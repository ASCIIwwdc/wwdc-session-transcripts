WEBVTT

00:00:20.126 --> 00:00:21.106 A:middle
&gt;&gt; Good morning, everyone, and

00:00:21.106 --> 00:00:23.326 A:middle
welcome to Friday of WWDC.

00:00:24.016 --> 00:00:24.536 A:middle
[applause] Thank you.

00:00:26.346 --> 00:00:27.816 A:middle
My name is Erik Turnquist and

00:00:27.816 --> 00:00:28.936 A:middle
today Brad and I are going to

00:00:28.936 --> 00:00:30.566 A:middle
talk about working with HEIF and

00:00:30.566 --> 00:00:31.146 A:middle
HEVC.

00:00:32.516 --> 00:00:34.616 A:middle
So, first off, what is HEVC?

00:00:35.106 --> 00:00:37.136 A:middle
HEVC stands for High Efficiency

00:00:37.136 --> 00:00:38.596 A:middle
Video Coding and it is the

00:00:38.596 --> 00:00:40.036 A:middle
industry standard next

00:00:40.036 --> 00:00:41.216 A:middle
generation video encoding

00:00:41.326 --> 00:00:42.036 A:middle
technology.

00:00:42.476 --> 00:00:44.416 A:middle
It's the successor to H.264.

00:00:45.056 --> 00:00:47.216 A:middle
Now for the more important

00:00:47.216 --> 00:00:48.786 A:middle
question, is why?

00:00:49.366 --> 00:00:50.636 A:middle
Why is Apple going through all

00:00:50.636 --> 00:00:51.696 A:middle
of the effort to deliver a new

00:00:51.696 --> 00:00:52.126 A:middle
codec?

00:00:52.126 --> 00:00:54.566 A:middle
H.264 has been really good to us

00:00:54.566 --> 00:00:55.636 A:middle
for over ten years.

00:00:56.486 --> 00:00:57.606 A:middle
Now we thought about this a lot,

00:00:57.726 --> 00:00:58.776 A:middle
and we really want to enable new

00:00:58.776 --> 00:00:59.886 A:middle
features and unfortunately,

00:00:59.886 --> 00:01:01.826 A:middle
H.264 has reached the limits of

00:01:01.826 --> 00:01:02.696 A:middle
its capabilities.

00:01:03.056 --> 00:01:04.796 A:middle
We want to enable new features

00:01:04.796 --> 00:01:06.916 A:middle
like 4K and larger frame sizes,

00:01:07.246 --> 00:01:09.256 A:middle
high bit depths like 10-bit and

00:01:09.256 --> 00:01:10.416 A:middle
wider color spaces like Rec.

00:01:10.416 --> 00:01:12.686 A:middle
2020. Now, we want to do all of

00:01:12.686 --> 00:01:13.866 A:middle
this while lowering the bit

00:01:13.866 --> 00:01:15.156 A:middle
rate, not raising that.

00:01:15.566 --> 00:01:16.376 A:middle
So, how do we do that?

00:01:17.616 --> 00:01:19.106 A:middle
Well, we do that with HEVC.

00:01:19.676 --> 00:01:21.066 A:middle
So, now how much lower are the

00:01:21.066 --> 00:01:22.116 A:middle
bit rates we're actually seeing?

00:01:22.736 --> 00:01:24.516 A:middle
Well, for generally encoded

00:01:24.516 --> 00:01:25.906 A:middle
content we're seeing up to a 40

00:01:25.906 --> 00:01:27.236 A:middle
percent bit rate reduction for

00:01:27.236 --> 00:01:28.406 A:middle
H.264.

00:01:28.406 --> 00:01:29.496 A:middle
So, this is a really big deal.

00:01:30.236 --> 00:01:31.536 A:middle
And for camera capture, we're

00:01:31.536 --> 00:01:33.076 A:middle
seeing up to a 2 times better

00:01:33.076 --> 00:01:35.816 A:middle
compression compared to H.264

00:01:35.896 --> 00:01:36.556 A:middle
and JPEG.

00:01:37.156 --> 00:01:38.546 A:middle
So, another really big deal

00:01:38.546 --> 00:01:38.816 A:middle
here.

00:01:39.756 --> 00:01:40.866 A:middle
And we're making all of these

00:01:40.866 --> 00:01:42.076 A:middle
changes today.

00:01:42.616 --> 00:01:43.886 A:middle
So, if you've installed the iOS,

00:01:43.886 --> 00:01:46.456 A:middle
iOS 11 seeds, we've enabled HEVC

00:01:46.456 --> 00:01:48.286 A:middle
Movie and HEIF Image Capture by

00:01:48.286 --> 00:01:48.676 A:middle
default.

00:01:48.676 --> 00:01:50.326 A:middle
So, that means, many of you have

00:01:50.326 --> 00:01:51.856 A:middle
already captured HEIF images or

00:01:51.856 --> 00:01:53.586 A:middle
HEVC movies without even knowing

00:01:53.586 --> 00:01:53.653 A:middle
it.

00:01:53.653 --> 00:01:54.866 A:middle
And it just works on our

00:01:54.866 --> 00:01:55.476 A:middle
platforms.

00:01:56.016 --> 00:01:57.696 A:middle
Let's go over what we're going

00:01:57.696 --> 00:01:58.586 A:middle
to talk about today.

00:01:58.826 --> 00:01:59.976 A:middle
I'm going to cover the HEVC

00:01:59.976 --> 00:02:01.466 A:middle
Movie side of things, and Brad's

00:02:01.466 --> 00:02:02.546 A:middle
going to cover the HEIF Image

00:02:02.546 --> 00:02:03.236 A:middle
side of things.

00:02:03.496 --> 00:02:04.736 A:middle
We're going to cover accessing

00:02:04.736 --> 00:02:06.606 A:middle
this content, playing it back

00:02:06.606 --> 00:02:09.026 A:middle
and displaying it, capturing and

00:02:09.026 --> 00:02:10.816 A:middle
creating HEIF and HEVC Movies,

00:02:10.916 --> 00:02:12.296 A:middle
and then export and transcode.

00:02:13.276 --> 00:02:14.786 A:middle
So, first let's cover access.

00:02:16.476 --> 00:02:17.786 A:middle
So, many of you are using

00:02:17.786 --> 00:02:19.146 A:middle
PhotoKit and PhotoKit will

00:02:19.146 --> 00:02:20.496 A:middle
deliver HEVC assets for

00:02:20.496 --> 00:02:21.016 A:middle
playback.

00:02:21.466 --> 00:02:22.496 A:middle
So, if you're using

00:02:22.496 --> 00:02:23.986 A:middle
requestPlayerItem or

00:02:23.986 --> 00:02:25.586 A:middle
requestLivePhoto they will

00:02:25.586 --> 00:02:26.766 A:middle
deliver, or they will give you

00:02:26.766 --> 00:02:28.576 A:middle
automatic playback with adopting

00:02:28.576 --> 00:02:30.576 A:middle
new, any new APIs, so this

00:02:30.576 --> 00:02:31.136 A:middle
should just work.

00:02:33.516 --> 00:02:35.626 A:middle
PhotoKit can also deliver you

00:02:35.626 --> 00:02:36.616 A:middle
HEVC assets.

00:02:36.616 --> 00:02:37.506 A:middle
So, if you're calling it

00:02:37.506 --> 00:02:39.106 A:middle
requestExportSession, it will

00:02:39.106 --> 00:02:41.166 A:middle
transcode to the existing preset

00:02:41.166 --> 00:02:42.176 A:middle
you're already using.

00:02:42.696 --> 00:02:43.536 A:middle
So, if you're using one of the

00:02:43.536 --> 00:02:44.816 A:middle
dimension presets that used to

00:02:44.816 --> 00:02:47.166 A:middle
give you H.264, it will still do

00:02:47.166 --> 00:02:47.416 A:middle
that.

00:02:47.596 --> 00:02:48.846 A:middle
But we'll cover new presets

00:02:48.846 --> 00:02:49.856 A:middle
we've added for HEVC.

00:02:49.896 --> 00:02:51.106 A:middle
If you're calling

00:02:51.106 --> 00:02:52.556 A:middle
requestAVAsset, it will give you

00:02:52.556 --> 00:02:54.656 A:middle
access to the HEVC media file

00:02:54.656 --> 00:02:56.246 A:middle
and this will have an HEVC video

00:02:56.246 --> 00:02:57.976 A:middle
track inside of it.

00:02:58.976 --> 00:02:59.906 A:middle
Now, if you're to backup the

00:02:59.906 --> 00:03:01.346 A:middle
application, you want access to

00:03:01.346 --> 00:03:02.986 A:middle
the raw bits, so you're probably

00:03:02.986 --> 00:03:04.546 A:middle
calling it requestData, so I

00:03:04.546 --> 00:03:05.706 A:middle
want to make note that this will

00:03:05.706 --> 00:03:07.606 A:middle
actually contain the HEVC video

00:03:07.606 --> 00:03:08.966 A:middle
track inside the movie file that

00:03:08.966 --> 00:03:09.996 A:middle
you've receive, so you need to

00:03:09.996 --> 00:03:10.886 A:middle
be able to handle this.

00:03:12.226 --> 00:03:14.196 A:middle
Now that you have this content,

00:03:14.196 --> 00:03:15.226 A:middle
let's call about playback and

00:03:15.226 --> 00:03:15.566 A:middle
display.

00:03:17.546 --> 00:03:19.326 A:middle
HEVC playback is supported in

00:03:19.326 --> 00:03:21.216 A:middle
our modern media frameworks like

00:03:21.216 --> 00:03:22.706 A:middle
AVKit, AVFoundation, and

00:03:22.706 --> 00:03:23.586 A:middle
VideoToolbox.

00:03:23.936 --> 00:03:25.796 A:middle
We support HTTP live streaming,

00:03:26.186 --> 00:03:27.676 A:middle
play-while-download, and local

00:03:27.676 --> 00:03:29.376 A:middle
file back or local file

00:03:29.376 --> 00:03:29.806 A:middle
playback.

00:03:30.506 --> 00:03:31.896 A:middle
And we support MPEG-4 and

00:03:31.896 --> 00:03:33.106 A:middle
QuickTime file formats as the

00:03:33.106 --> 00:03:34.726 A:middle
source, and here there's no API

00:03:34.726 --> 00:03:35.586 A:middle
opt-in required.

00:03:35.856 --> 00:03:36.626 A:middle
Things should just work.

00:03:38.376 --> 00:03:40.516 A:middle
We support Decode on macOS and

00:03:40.626 --> 00:03:42.206 A:middle
iOS and now let's go over where

00:03:42.206 --> 00:03:43.466 A:middle
we have Hardware Decode support.

00:03:44.206 --> 00:03:45.656 A:middle
So, we have 8- and 10-bit

00:03:45.656 --> 00:03:47.376 A:middle
decoders on our A9 chip, so

00:03:47.376 --> 00:03:49.646 A:middle
that's the iPhone 6s and we have

00:03:49.646 --> 00:03:51.236 A:middle
8-bit Hardware Decode on our 6th

00:03:51.236 --> 00:03:52.916 A:middle
generation Intel Cores, that's

00:03:52.916 --> 00:03:54.196 A:middle
Skylake and that's the MacBook

00:03:54.226 --> 00:03:55.176 A:middle
Pro with Touch Bar.

00:03:55.636 --> 00:03:57.376 A:middle
We also have 10-bit Decode on

00:03:57.376 --> 00:03:58.686 A:middle
the 7th Generation Intel Core

00:03:58.686 --> 00:04:00.416 A:middle
processors and that's Kaby Lake

00:04:00.416 --> 00:04:01.536 A:middle
and that's the brand-new MacBook

00:04:01.576 --> 00:04:02.266 A:middle
Pro with Touch Bar.

00:04:02.896 --> 00:04:04.236 A:middle
We also have 8- and 10-bit

00:04:04.656 --> 00:04:06.336 A:middle
Software Decode fallbacks on

00:04:06.336 --> 00:04:08.106 A:middle
macOS and iOS.

00:04:08.446 --> 00:04:09.496 A:middle
So, now let's go over some code

00:04:09.496 --> 00:04:10.736 A:middle
you might have and let's convert

00:04:10.736 --> 00:04:11.806 A:middle
it to HEVC playback.

00:04:12.416 --> 00:04:13.366 A:middle
So, here we're playing "My

00:04:13.366 --> 00:04:15.416 A:middle
Awesome Movie" making a URL,

00:04:15.586 --> 00:04:17.086 A:middle
then a player and playing it.

00:04:17.086 --> 00:04:19.156 A:middle
So, this is the H.264 version.

00:04:19.886 --> 00:04:21.436 A:middle
And now here's the HEVC version.

00:04:21.796 --> 00:04:23.146 A:middle
There's no changes.

00:04:23.426 --> 00:04:25.306 A:middle
So, to play an HEVC movie file,

00:04:25.486 --> 00:04:26.466 A:middle
you don't need to change any of

00:04:26.466 --> 00:04:26.936 A:middle
your code.

00:04:27.266 --> 00:04:28.716 A:middle
We want to have you think about

00:04:28.716 --> 00:04:29.376 A:middle
a couple things.

00:04:30.666 --> 00:04:32.026 A:middle
So, the first is about Decode

00:04:32.026 --> 00:04:32.746 A:middle
capability.

00:04:33.056 --> 00:04:33.696 A:middle
And if you're asking the

00:04:33.696 --> 00:04:35.356 A:middle
question is there a decoder on

00:04:35.356 --> 00:04:36.536 A:middle
the system that can handle this

00:04:36.536 --> 00:04:38.566 A:middle
content, this API is for you.

00:04:39.106 --> 00:04:40.626 A:middle
This is useful for non-realtime

00:04:40.626 --> 00:04:42.086 A:middle
operations, like sharing or

00:04:42.086 --> 00:04:42.876 A:middle
image generation.

00:04:42.876 --> 00:04:44.166 A:middle
And it can be limited by

00:04:44.166 --> 00:04:44.966 A:middle
hardware support.

00:04:45.246 --> 00:04:46.206 A:middle
So, not all of our hardware

00:04:46.206 --> 00:04:47.526 A:middle
decoders support every frame

00:04:47.526 --> 00:04:48.006 A:middle
size.

00:04:49.656 --> 00:04:51.086 A:middle
Now, for the more important

00:04:51.086 --> 00:04:52.236 A:middle
question is about playback

00:04:52.236 --> 00:04:52.866 A:middle
capability.

00:04:53.096 --> 00:04:54.286 A:middle
If you're asking, how do I have

00:04:54.286 --> 00:04:55.576 A:middle
the best playback experience for

00:04:55.576 --> 00:04:57.426 A:middle
my customer, this API is for

00:04:57.426 --> 00:04:57.696 A:middle
you.

00:04:57.826 --> 00:04:59.196 A:middle
And many of you are already

00:04:59.196 --> 00:04:59.986 A:middle
using this API.

00:05:01.016 --> 00:05:02.356 A:middle
So, not all content can be

00:05:02.356 --> 00:05:04.026 A:middle
played back in realtime and we

00:05:04.026 --> 00:05:05.286 A:middle
have differing capabilities on

00:05:05.286 --> 00:05:05.976 A:middle
different devices.

00:05:05.976 --> 00:05:07.556 A:middle
So, if you want to have a one

00:05:07.556 --> 00:05:09.196 A:middle
stop shop for the best user

00:05:09.196 --> 00:05:10.566 A:middle
experience for playback, whether

00:05:10.566 --> 00:05:12.636 A:middle
that's 1x or 2x playback,

00:05:12.636 --> 00:05:13.816 A:middle
rewind, scrubbing, or fast

00:05:13.816 --> 00:05:15.496 A:middle
forward, this is the API for

00:05:15.496 --> 00:05:15.696 A:middle
you.

00:05:15.696 --> 00:05:19.056 A:middle
Now, let's go on to Hardware

00:05:19.056 --> 00:05:20.286 A:middle
Decode availability.

00:05:20.456 --> 00:05:21.616 A:middle
If you want to get the best

00:05:21.616 --> 00:05:22.976 A:middle
battery life during playback,

00:05:23.266 --> 00:05:24.666 A:middle
you want to playback on systems

00:05:24.666 --> 00:05:25.726 A:middle
that have Hardware Decode

00:05:25.726 --> 00:05:26.136 A:middle
support.

00:05:26.666 --> 00:05:28.406 A:middle
This will also get you the best

00:05:28.406 --> 00:05:29.256 A:middle
Decode performance.

00:05:29.256 --> 00:05:31.286 A:middle
So, we have new VideoToolbox API

00:05:31.286 --> 00:05:33.256 A:middle
that you can query, is there a

00:05:33.256 --> 00:05:34.726 A:middle
Hardware Decoder Supported for

00:05:34.726 --> 00:05:35.296 A:middle
this codec?

00:05:35.496 --> 00:05:36.686 A:middle
Here I'm showing you HEVC, but

00:05:36.686 --> 00:05:37.976 A:middle
you can also use it for any

00:05:37.976 --> 00:05:40.666 A:middle
other codec.

00:05:40.746 --> 00:05:42.006 A:middle
Now, for the final question for

00:05:42.006 --> 00:05:43.896 A:middle
playback, which codec do I use

00:05:43.896 --> 00:05:44.526 A:middle
for playback?

00:05:45.116 --> 00:05:48.856 A:middle
Do I choose H.264 or HEVC?

00:05:49.606 --> 00:05:51.106 A:middle
Well, if you're concerned about

00:05:51.186 --> 00:05:52.386 A:middle
delivering the most compatible

00:05:52.386 --> 00:05:54.176 A:middle
content or want to deliver one

00:05:54.176 --> 00:05:55.256 A:middle
asset that just works

00:05:55.256 --> 00:05:58.136 A:middle
everywhere, choose H.264.

00:05:58.546 --> 00:05:59.936 A:middle
Our platforms have supported

00:05:59.936 --> 00:06:01.276 A:middle
this format for over 10 years

00:06:01.276 --> 00:06:03.206 A:middle
and there's broad adoption in

00:06:03.206 --> 00:06:04.896 A:middle
the third-party ecosystem.

00:06:05.656 --> 00:06:06.426 A:middle
However, if you want the

00:06:06.426 --> 00:06:08.826 A:middle
smallest file size and latest

00:06:08.826 --> 00:06:09.546 A:middle
and greatest encoding

00:06:09.546 --> 00:06:11.486 A:middle
technology, like 10-bit choose

00:06:11.486 --> 00:06:12.016 A:middle
HEVC.

00:06:12.456 --> 00:06:14.186 A:middle
You'll have to decide what works

00:06:14.186 --> 00:06:15.006 A:middle
in your application.

00:06:15.326 --> 00:06:17.906 A:middle
And with that, let's move on to

00:06:19.296 --> 00:06:19.546 A:middle
capture.

00:06:19.826 --> 00:06:22.166 A:middle
So, capturing HEVC is supported

00:06:22.276 --> 00:06:24.006 A:middle
with AVFoundation and we support

00:06:24.006 --> 00:06:25.356 A:middle
MPEG-4 and QuickTime file

00:06:25.356 --> 00:06:26.756 A:middle
formats as the destination.

00:06:27.336 --> 00:06:31.676 A:middle
We support HEVC capture on our

00:06:31.836 --> 00:06:33.566 A:middle
A10 chip, so that's iPhone 7,

00:06:33.976 --> 00:06:35.306 A:middle
and now let's go over the A, the

00:06:35.306 --> 00:06:37.096 A:middle
capture graph that many of you

00:06:37.096 --> 00:06:41.186 A:middle
are already familiar with.

00:06:41.616 --> 00:06:42.286 A:middle
This starts with an

00:06:42.286 --> 00:06:44.206 A:middle
AVCaptureSession, this needs to

00:06:44.206 --> 00:06:45.286 A:middle
get data from somewhere.

00:06:47.116 --> 00:06:49.556 A:middle
You create an AVCaptureDevice,

00:06:49.636 --> 00:06:51.936 A:middle
you add it as the input, then

00:06:51.936 --> 00:06:53.146 A:middle
data needs to go somewhere.

00:06:53.146 --> 00:06:54.136 A:middle
In this case you're using movie

00:06:54.136 --> 00:06:55.266 A:middle
file to compress and write the

00:06:55.266 --> 00:06:55.826 A:middle
output file.

00:06:57.536 --> 00:06:58.576 A:middle
These are all connected with an

00:06:58.576 --> 00:07:01.046 A:middle
AVCaptureConnection and this

00:07:01.046 --> 00:07:01.916 A:middle
creates your movie file.

00:07:02.426 --> 00:07:03.396 A:middle
So, let's convert this into

00:07:03.396 --> 00:07:03.816 A:middle
code.

00:07:03.816 --> 00:07:06.086 A:middle
And many of you probably have

00:07:06.086 --> 00:07:06.626 A:middle
this in your app.

00:07:06.966 --> 00:07:07.696 A:middle
First, create an

00:07:07.696 --> 00:07:08.686 A:middle
AVCaptureConnect -- or

00:07:08.686 --> 00:07:09.816 A:middle
AVCaptureSession.

00:07:09.816 --> 00:07:11.666 A:middle
Here we're making a 4k capture

00:07:11.666 --> 00:07:12.396 A:middle
session.

00:07:13.886 --> 00:07:14.446 A:middle
Then you create the

00:07:14.446 --> 00:07:16.196 A:middle
AVCaptureDevice, add it as the

00:07:16.196 --> 00:07:16.586 A:middle
input.

00:07:18.466 --> 00:07:20.266 A:middle
Create your MovieFileOutput and

00:07:20.266 --> 00:07:21.486 A:middle
this does the compression file

00:07:21.486 --> 00:07:22.776 A:middle
writing, add it as the output.

00:07:22.776 --> 00:07:25.016 A:middle
And then startRunning and

00:07:25.016 --> 00:07:25.656 A:middle
startRecording.

00:07:25.716 --> 00:07:27.106 A:middle
And then we're capturing.

00:07:27.446 --> 00:07:29.586 A:middle
So, how do we opt in to HEVC?

00:07:30.236 --> 00:07:32.036 A:middle
Well, with iOS 10 we added an

00:07:32.036 --> 00:07:33.806 A:middle
API to check for the available

00:07:33.806 --> 00:07:35.376 A:middle
video codecs during capture.

00:07:35.646 --> 00:07:37.256 A:middle
And new with iOS 11 is you can

00:07:37.256 --> 00:07:38.936 A:middle
check, does it contain HEVC.

00:07:39.606 --> 00:07:41.046 A:middle
On supported devices, it will

00:07:41.046 --> 00:07:42.956 A:middle
return true and you can go ahead

00:07:43.276 --> 00:07:45.896 A:middle
and use that in your output

00:07:45.896 --> 00:07:46.326 A:middle
settings.

00:07:46.576 --> 00:07:48.596 A:middle
And if it doesn't support it you

00:07:48.596 --> 00:07:49.656 A:middle
can go ahead and fall back to

00:07:49.656 --> 00:07:51.876 A:middle
another codec like H.264.

00:07:51.876 --> 00:07:53.386 A:middle
Now I want to make an important

00:07:53.386 --> 00:07:54.246 A:middle
point here, is that order

00:07:54.246 --> 00:07:54.876 A:middle
matters with the

00:07:54.876 --> 00:07:56.316 A:middle
availableVideoCodecTypes and for

00:07:56.316 --> 00:07:58.056 A:middle
this seed we made HEVC the first

00:07:58.056 --> 00:07:58.486 A:middle
option.

00:07:58.926 --> 00:07:59.916 A:middle
So, that means, if you do

00:07:59.916 --> 00:08:01.236 A:middle
nothing else, you'll be

00:08:01.236 --> 00:08:02.736 A:middle
capturing HEVC content.

00:08:03.196 --> 00:08:04.426 A:middle
We really want to get you used

00:08:04.426 --> 00:08:05.476 A:middle
to handling this content.

00:08:06.776 --> 00:08:07.626 A:middle
Now, let's move on to Live

00:08:07.626 --> 00:08:08.136 A:middle
Photos.

00:08:09.646 --> 00:08:10.716 A:middle
So, we have the same capture

00:08:10.716 --> 00:08:12.546 A:middle
graph here, but we use our

00:08:12.546 --> 00:08:14.086 A:middle
AVCapturePhotoOutput, and that

00:08:14.086 --> 00:08:15.296 A:middle
makes all the Live Photos we

00:08:15.296 --> 00:08:15.866 A:middle
love and enjoy.

00:08:16.596 --> 00:08:17.906 A:middle
So, first let's go over couple

00:08:18.206 --> 00:08:19.416 A:middle
new Live Photo enhancements

00:08:19.416 --> 00:08:20.316 A:middle
we've done in the past year.

00:08:21.696 --> 00:08:22.536 A:middle
We now support video

00:08:22.536 --> 00:08:24.246 A:middle
stabilization, so no more shaky

00:08:24.246 --> 00:08:25.646 A:middle
playback during Live Photos.

00:08:25.946 --> 00:08:27.556 A:middle
We also no longer pause music

00:08:27.556 --> 00:08:28.736 A:middle
playback during Live Photo

00:08:28.736 --> 00:08:30.346 A:middle
capture, and we support much

00:08:30.346 --> 00:08:32.416 A:middle
smoother Live Photos up to 30

00:08:32.416 --> 00:08:33.046 A:middle
frames per second.

00:08:33.466 --> 00:08:36.236 A:middle
So, let's go over capturing HEVC

00:08:36.236 --> 00:08:37.006 A:middle
with Live Photos.

00:08:38.226 --> 00:08:40.106 A:middle
So, we have new API in iOS 11

00:08:40.106 --> 00:08:40.766 A:middle
where you can create

00:08:40.766 --> 00:08:42.106 A:middle
availableLivePhotoVideo

00:08:42.106 --> 00:08:44.786 A:middle
CodecTypes, see if it contains

00:08:44.786 --> 00:08:47.096 A:middle
HEVC, and it will return true on

00:08:47.096 --> 00:08:48.146 A:middle
supported devices.

00:08:49.746 --> 00:08:50.916 A:middle
Then if it does go ahead and use

00:08:50.916 --> 00:08:51.876 A:middle
it, if it does not you can fall

00:08:51.876 --> 00:08:52.916 A:middle
back to another existing codec

00:08:52.916 --> 00:08:54.556 A:middle
like H.264.

00:08:54.816 --> 00:08:56.576 A:middle
I also want to make note that

00:08:56.576 --> 00:08:57.736 A:middle
there's the same considerations

00:08:57.736 --> 00:08:59.206 A:middle
here, is that order matters with

00:08:59.206 --> 00:09:00.596 A:middle
the availableVideoCodecTypes and

00:09:00.596 --> 00:09:02.046 A:middle
for this seed we made HEVC the

00:09:02.046 --> 00:09:02.746 A:middle
first option.

00:09:03.676 --> 00:09:05.066 A:middle
So, again, if you do nothing

00:09:05.066 --> 00:09:06.856 A:middle
else, you will capture HEVC Live

00:09:06.856 --> 00:09:07.476 A:middle
Photos.

00:09:08.316 --> 00:09:09.426 A:middle
You might be sensing a pattern

00:09:09.426 --> 00:09:09.716 A:middle
here.

00:09:09.856 --> 00:09:11.176 A:middle
We really want to get you used

00:09:11.176 --> 00:09:11.936 A:middle
to handling this kind of

00:09:11.936 --> 00:09:12.346 A:middle
content.

00:09:12.476 --> 00:09:15.946 A:middle
Now, let's go over the most

00:09:15.946 --> 00:09:17.996 A:middle
customizable capture graph, and

00:09:17.996 --> 00:09:18.506 A:middle
that's with

00:09:18.506 --> 00:09:20.616 A:middle
AVCaptureVideoDataOutput, and

00:09:20.616 --> 00:09:21.426 A:middle
AVAssetWriter.

00:09:21.996 --> 00:09:23.146 A:middle
So, you use this if you want to

00:09:23.146 --> 00:09:24.476 A:middle
modify the sample buffers in

00:09:24.476 --> 00:09:24.886 A:middle
some way.

00:09:24.886 --> 00:09:26.146 A:middle
So, you might be performing some

00:09:26.146 --> 00:09:27.236 A:middle
cool filtering operation.

00:09:27.876 --> 00:09:30.546 A:middle
With configuring AssetWriter for

00:09:30.546 --> 00:09:32.406 A:middle
HEVC, you have two options.

00:09:32.716 --> 00:09:34.256 A:middle
So, you can either configure

00:09:34.256 --> 00:09:35.666 A:middle
custom output settings where you

00:09:35.826 --> 00:09:38.066 A:middle
explicitly specify HEVC, or the

00:09:38.066 --> 00:09:39.186 A:middle
video data output can actually

00:09:39.186 --> 00:09:40.256 A:middle
recommend those settings for

00:09:40.256 --> 00:09:40.516 A:middle
you.

00:09:40.516 --> 00:09:41.926 A:middle
And we recommend this API.

00:09:42.736 --> 00:09:44.116 A:middle
In iOS 7 we added

00:09:44.116 --> 00:09:45.076 A:middle
recommendedVideoSettings

00:09:45.076 --> 00:09:45.856 A:middle
ForAssetWriter.

00:09:46.216 --> 00:09:47.266 A:middle
Now this always recommends

00:09:47.266 --> 00:09:48.256 A:middle
H.264.

00:09:48.336 --> 00:09:49.386 A:middle
So, if you want to stick with

00:09:49.386 --> 00:09:50.346 A:middle
that, that's fine.

00:09:50.856 --> 00:09:52.136 A:middle
However, in iOS 11 we've added

00:09:52.136 --> 00:09:53.586 A:middle
new API where you can actually

00:09:54.066 --> 00:09:55.626 A:middle
pass in the codec type and we

00:09:55.626 --> 00:09:56.606 A:middle
will give you recommended

00:09:56.606 --> 00:09:58.196 A:middle
settings for that codec type on

00:09:58.196 --> 00:09:59.106 A:middle
supported devices.

00:10:00.206 --> 00:10:01.306 A:middle
And with that let's move onto

00:10:01.306 --> 00:10:02.626 A:middle
the Export and transcode side of

00:10:02.626 --> 00:10:02.976 A:middle
things.

00:10:07.286 --> 00:10:09.376 A:middle
So you can transcode to HEVC

00:10:09.376 --> 00:10:10.716 A:middle
with AVFoundation and

00:10:10.716 --> 00:10:11.606 A:middle
VideoToolbox.

00:10:11.726 --> 00:10:13.386 A:middle
And we support MPEG-4 and

00:10:13.386 --> 00:10:14.716 A:middle
QuickTime file formats as the

00:10:14.716 --> 00:10:15.306 A:middle
destination.

00:10:15.756 --> 00:10:17.586 A:middle
And here API opt-in is required.

00:10:20.016 --> 00:10:22.486 A:middle
We support HEVC Encode on macOS

00:10:22.486 --> 00:10:23.926 A:middle
and iOS and now let's go over

00:10:23.926 --> 00:10:25.466 A:middle
where we support HEVC Hardware

00:10:25.466 --> 00:10:25.786 A:middle
Encode.

00:10:27.106 --> 00:10:28.386 A:middle
So, we have an 8-bit Hardware

00:10:28.386 --> 00:10:30.176 A:middle
Encoder on our A10 Fusion chip,

00:10:30.396 --> 00:10:32.666 A:middle
that's iPhone 7, and we support

00:10:32.666 --> 00:10:33.896 A:middle
8-bit Hardware Encode on our

00:10:33.896 --> 00:10:35.236 A:middle
macOS on our 6th generation

00:10:35.236 --> 00:10:37.086 A:middle
Intel Core processors, that's

00:10:37.086 --> 00:10:38.556 A:middle
the Skylake family, and that's

00:10:38.556 --> 00:10:39.936 A:middle
the MacBook Pro with Touch Bar.

00:10:40.556 --> 00:10:42.946 A:middle
And on macOS we have a special

00:10:42.946 --> 00:10:44.436 A:middle
10-bit non-realtime, high

00:10:44.436 --> 00:10:45.686 A:middle
quality software encoder that

00:10:45.686 --> 00:10:47.006 A:middle
you can use and we'll talk about

00:10:47.006 --> 00:10:48.836 A:middle
that in a little bit.

00:10:49.076 --> 00:10:49.906 A:middle
Now, let's start with the

00:10:49.906 --> 00:10:51.936 A:middle
highest-level export APIs, and

00:10:52.796 --> 00:10:53.996 A:middle
that's transcoding with

00:10:53.996 --> 00:10:54.986 A:middle
AVAssetExportSession.

00:10:56.326 --> 00:10:57.416 A:middle
So, with this, you give us an

00:10:57.416 --> 00:10:58.976 A:middle
asset, then you pick a preset

00:10:58.976 --> 00:11:00.906 A:middle
and we do all the operations for

00:11:00.906 --> 00:11:02.226 A:middle
you including compression and we

00:11:02.226 --> 00:11:03.256 A:middle
produce an output movie.

00:11:05.016 --> 00:11:06.396 A:middle
So, there's no change in

00:11:06.396 --> 00:11:08.066 A:middle
behavior for existing presets.

00:11:08.066 --> 00:11:08.946 A:middle
If you're using one of the

00:11:08.946 --> 00:11:10.216 A:middle
existing dimension-based

00:11:10.216 --> 00:11:11.506 A:middle
presets, and it used to give you

00:11:11.506 --> 00:11:13.936 A:middle
H.264, it will still do that.

00:11:14.466 --> 00:11:15.996 A:middle
We've added new presets here.

00:11:16.496 --> 00:11:17.626 A:middle
And those will convert from

00:11:17.626 --> 00:11:19.936 A:middle
H.264 or any other codec to

00:11:19.936 --> 00:11:21.966 A:middle
HEVC, and these will produce

00:11:21.966 --> 00:11:23.906 A:middle
smaller AVAssets, up to 40

00:11:23.906 --> 00:11:25.506 A:middle
percent in some cases, with the

00:11:25.506 --> 00:11:26.176 A:middle
same quality.

00:11:27.506 --> 00:11:29.136 A:middle
Now, let's move one level down

00:11:29.136 --> 00:11:30.936 A:middle
the stack, to compressing with

00:11:30.936 --> 00:11:31.596 A:middle
AVAssetWriter.

00:11:32.146 --> 00:11:35.506 A:middle
So, AVAssetWriter, you're either

00:11:35.716 --> 00:11:36.806 A:middle
generating the sample buffers

00:11:36.806 --> 00:11:38.136 A:middle
yourself, or getting them from

00:11:38.136 --> 00:11:39.806 A:middle
another one of our APIs like

00:11:39.806 --> 00:11:40.916 A:middle
VideoDataOutput or

00:11:40.916 --> 00:11:41.656 A:middle
AVAssetWriter.

00:11:41.736 --> 00:11:43.216 A:middle
And AVAssetWriter's responsible

00:11:43.216 --> 00:11:44.406 A:middle
for compression and file

00:11:44.406 --> 00:11:44.646 A:middle
writing.

00:11:46.056 --> 00:11:47.176 A:middle
Again, like I discussed

00:11:47.176 --> 00:11:48.406 A:middle
previously, there's two options

00:11:48.406 --> 00:11:49.266 A:middle
for AVAssetWriter.

00:11:49.566 --> 00:11:51.076 A:middle
You can either explicitly set

00:11:51.076 --> 00:11:52.556 A:middle
custom output settings, in this

00:11:52.556 --> 00:11:54.976 A:middle
case we're specifying use HEVC.

00:11:55.036 --> 00:11:56.506 A:middle
You can also specify your bit

00:11:56.506 --> 00:11:58.286 A:middle
rate and dimensions, or you can

00:11:58.286 --> 00:11:59.456 A:middle
use one of our convenience

00:11:59.566 --> 00:12:01.236 A:middle
settings in capture, you can use

00:12:01.236 --> 00:12:02.546 A:middle
the VideoDataOutput and for

00:12:02.546 --> 00:12:03.646 A:middle
general encode you can use the

00:12:03.646 --> 00:12:05.006 A:middle
AVOutputSettingsAssistant.

00:12:05.196 --> 00:12:06.656 A:middle
We've added two new presets here

00:12:06.656 --> 00:12:08.196 A:middle
that on supported devices will

00:12:08.196 --> 00:12:09.936 A:middle
return HEVC output settings.

00:12:11.076 --> 00:12:12.136 A:middle
Now, if you're in the business

00:12:12.136 --> 00:12:13.176 A:middle
of creating your own custom

00:12:13.176 --> 00:12:14.696 A:middle
output settings, it can be a

00:12:14.696 --> 00:12:15.466 A:middle
little tricky.

00:12:15.856 --> 00:12:17.216 A:middle
So, not all encoders support all

00:12:17.216 --> 00:12:17.976 A:middle
output settings.

00:12:19.006 --> 00:12:20.216 A:middle
We've fixed that problem in iOS

00:12:20.216 --> 00:12:21.826 A:middle
11 and macOS High Sierra so you

00:12:21.826 --> 00:12:23.016 A:middle
can now query the encoder for

00:12:23.016 --> 00:12:24.336 A:middle
supported properties to use in

00:12:24.336 --> 00:12:25.226 A:middle
your output settings.

00:12:25.546 --> 00:12:27.606 A:middle
To do that you pass in HEVC

00:12:27.606 --> 00:12:29.336 A:middle
here, and it will return the

00:12:29.336 --> 00:12:30.636 A:middle
encoder ID and a list of

00:12:30.636 --> 00:12:31.616 A:middle
supported properties.

00:12:32.166 --> 00:12:33.446 A:middle
The encoder ID is the unique

00:12:33.446 --> 00:12:35.206 A:middle
identifier for that specific

00:12:35.206 --> 00:12:36.906 A:middle
encoder, and with that the

00:12:36.906 --> 00:12:38.446 A:middle
properties and the encoder ID

00:12:38.446 --> 00:12:40.196 A:middle
can be specified in the output

00:12:40.196 --> 00:12:41.186 A:middle
settings and you can be sure

00:12:41.186 --> 00:12:42.176 A:middle
that it actually works for

00:12:42.176 --> 00:12:42.656 A:middle
compression.

00:12:43.396 --> 00:12:44.526 A:middle
Now, let's move to the lowest

00:12:44.526 --> 00:12:45.906 A:middle
level compression interface and

00:12:46.476 --> 00:12:47.786 A:middle
that's compressing samples with

00:12:47.786 --> 00:12:48.816 A:middle
VTCompressionSession.

00:12:49.306 --> 00:12:50.896 A:middle
So, just like with AssetWriter

00:12:50.896 --> 00:12:51.856 A:middle
you might be generating the

00:12:51.856 --> 00:12:53.206 A:middle
samples yourself or getting them

00:12:53.206 --> 00:12:55.446 A:middle
from another one of our APIs.

00:12:55.446 --> 00:12:56.756 A:middle
VTCompressionsSession compresses

00:12:56.756 --> 00:12:59.076 A:middle
them and produces our compressed

00:12:59.076 --> 00:13:01.536 A:middle
media data.

00:13:01.696 --> 00:13:03.196 A:middle
So, to create a compression

00:13:03.196 --> 00:13:04.926 A:middle
session with an HEVC encoder,

00:13:04.926 --> 00:13:05.816 A:middle
it's very simple.

00:13:05.856 --> 00:13:07.256 A:middle
In this case we're creating one

00:13:07.676 --> 00:13:09.806 A:middle
that's compressing to H.264.

00:13:09.806 --> 00:13:11.366 A:middle
Let's go ahead and convert it to

00:13:11.366 --> 00:13:11.496 A:middle
HEVC.

00:13:12.656 --> 00:13:13.466 A:middle
There we go, and now we're

00:13:13.466 --> 00:13:14.826 A:middle
compressing with HEVC with

00:13:14.826 --> 00:13:15.756 A:middle
VideoToolbox.

00:13:15.756 --> 00:13:16.736 A:middle
So, that was pretty easy.

00:13:17.196 --> 00:13:18.486 A:middle
Now, let's go over a couple of

00:13:18.486 --> 00:13:19.956 A:middle
considerations on macOS.

00:13:21.356 --> 00:13:22.756 A:middle
So, for optimal encoding

00:13:22.756 --> 00:13:24.136 A:middle
performance on macOS you want to

00:13:24.136 --> 00:13:25.086 A:middle
opt-in to hardware.

00:13:25.516 --> 00:13:26.606 A:middle
This will use hardware when

00:13:26.606 --> 00:13:27.976 A:middle
available and when it's not

00:13:28.036 --> 00:13:29.026 A:middle
fallback to software.

00:13:29.776 --> 00:13:32.166 A:middle
So, to do that, set the

00:13:32.166 --> 00:13:33.506 A:middle
EnableHardwareAccelerated

00:13:33.506 --> 00:13:36.246 A:middle
VideoEncoder property to true in

00:13:36.246 --> 00:13:38.926 A:middle
your encoderSpecification and

00:13:38.926 --> 00:13:39.696 A:middle
then pass it into

00:13:39.696 --> 00:13:41.136 A:middle
VTCompressionSessionCreate.

00:13:41.936 --> 00:13:44.926 A:middle
Now, if you're do realtime

00:13:44.926 --> 00:13:46.366 A:middle
encode, you'll want to often

00:13:46.366 --> 00:13:47.896 A:middle
require hardware and never

00:13:47.896 --> 00:13:48.896 A:middle
fallback to software.

00:13:49.396 --> 00:13:51.186 A:middle
So, to do that, you set in your

00:13:51.186 --> 00:13:52.206 A:middle
encoderSpecification

00:13:52.276 --> 00:13:53.626 A:middle
RequireHardwareAccelarated

00:13:53.626 --> 00:13:56.156 A:middle
VideoEncoder to true and then

00:13:56.356 --> 00:13:57.366 A:middle
pass it into your

00:13:57.366 --> 00:13:58.386 A:middle
encoderSpecification.

00:13:58.386 --> 00:13:59.896 A:middle
Again, on systems where hardware

00:13:59.896 --> 00:14:01.346 A:middle
supported, this will succeed,

00:14:01.456 --> 00:14:02.766 A:middle
but hardware on systems where

00:14:02.766 --> 00:14:03.676 A:middle
there's only software encode,

00:14:04.036 --> 00:14:04.656 A:middle
this will fail.

00:14:05.926 --> 00:14:06.906 A:middle
All right, now let's go onto a

00:14:06.906 --> 00:14:08.616 A:middle
couple advanced encoding topics.

00:14:09.106 --> 00:14:10.486 A:middle
And the first is bit depth.

00:14:11.226 --> 00:14:12.316 A:middle
So, if you've ever seen a nice

00:14:12.366 --> 00:14:14.056 A:middle
gradient in a user interface or

00:14:14.056 --> 00:14:15.866 A:middle
a nice sunrise or sunset, you

00:14:15.866 --> 00:14:16.866 A:middle
notice what it looks like in

00:14:16.946 --> 00:14:18.466 A:middle
real life versus what it looks

00:14:18.466 --> 00:14:20.206 A:middle
like in a movie isn't exactly

00:14:20.206 --> 00:14:20.676 A:middle
the same.

00:14:21.266 --> 00:14:22.366 A:middle
So, you might see these color

00:14:22.366 --> 00:14:23.856 A:middle
banning effects in the video

00:14:23.856 --> 00:14:25.976 A:middle
version of your, of your movie.

00:14:26.546 --> 00:14:27.726 A:middle
And that's because with 8-bits

00:14:27.726 --> 00:14:28.836 A:middle
we don't have enough precision

00:14:28.836 --> 00:14:29.826 A:middle
to represent the subtle

00:14:29.826 --> 00:14:31.066 A:middle
differences between colors.

00:14:31.546 --> 00:14:32.386 A:middle
Now, the great thing about

00:14:32.386 --> 00:14:33.836 A:middle
10-bit is we actually do.

00:14:33.836 --> 00:14:34.716 A:middle
So, you get these really

00:14:34.716 --> 00:14:35.616 A:middle
beautiful gradients.

00:14:36.766 --> 00:14:38.116 A:middle
Now, with our macOS software

00:14:38.116 --> 00:14:39.246 A:middle
encoder, we actually support

00:14:39.286 --> 00:14:40.206 A:middle
10-bit encode.

00:14:40.946 --> 00:14:41.806 A:middle
So, first check that the

00:14:41.806 --> 00:14:43.606 A:middle
property is supported, and if it

00:14:43.606 --> 00:14:45.236 A:middle
is go ahead and use our HEVC

00:14:45.236 --> 00:14:47.206 A:middle
Main10 profile for our software

00:14:47.206 --> 00:14:47.516 A:middle
encoder.

00:14:48.386 --> 00:14:49.296 A:middle
And we want to make sure your

00:14:49.296 --> 00:14:50.726 A:middle
entire pipeline is 10-bit.

00:14:50.856 --> 00:14:51.926 A:middle
We don't want you going from

00:14:51.926 --> 00:14:53.646 A:middle
8-bit to 10-bit and then back to

00:14:53.646 --> 00:14:54.726 A:middle
8-bit, because that loses

00:14:54.766 --> 00:14:55.226 A:middle
precision.

00:14:55.566 --> 00:14:56.756 A:middle
So, we've added new CoreVideo

00:14:56.756 --> 00:14:58.156 A:middle
pixel buffer formats to ensure

00:14:58.156 --> 00:14:59.896 A:middle
that you can stay in 10-bit.

00:14:59.896 --> 00:15:00.786 A:middle
One is listed here.

00:15:01.266 --> 00:15:02.336 A:middle
So, now for the first time you

00:15:02.336 --> 00:15:04.096 A:middle
can render in 10-bit, encode in

00:15:04.096 --> 00:15:06.016 A:middle
10-bit, decode in 10-bit, and

00:15:06.016 --> 00:15:07.436 A:middle
for the first time ever on iOS

00:15:07.436 --> 00:15:08.846 A:middle
and macOS our display pipeline

00:15:08.846 --> 00:15:10.536 A:middle
also supports 10-bit, so we get

00:15:10.536 --> 00:15:11.336 A:middle
it across everything.

00:15:12.516 --> 00:15:15.556 A:middle
[ Applause ]

00:15:16.056 --> 00:15:17.116 A:middle
Now, let's go over our second

00:15:17.116 --> 00:15:18.066 A:middle
advanced topic and that's

00:15:18.066 --> 00:15:19.286 A:middle
Hierarchical Encoding.

00:15:19.546 --> 00:15:20.986 A:middle
And so to understand a little

00:15:20.986 --> 00:15:22.176 A:middle
bit about this we need to go

00:15:22.176 --> 00:15:23.236 A:middle
over a little bit of video

00:15:23.236 --> 00:15:25.046 A:middle
encoding 101.

00:15:25.196 --> 00:15:26.426 A:middle
There's three major frame types

00:15:26.426 --> 00:15:27.486 A:middle
that compress video, and the

00:15:27.486 --> 00:15:28.736 A:middle
first is an I Frame.

00:15:29.236 --> 00:15:30.216 A:middle
You can think of I Frames like

00:15:30.216 --> 00:15:31.586 A:middle
an image file and they can be

00:15:31.586 --> 00:15:32.686 A:middle
decoded independently.

00:15:33.996 --> 00:15:35.846 A:middle
Then we have a P Frame, and P

00:15:35.846 --> 00:15:37.606 A:middle
Frames refer to previous frames,

00:15:37.746 --> 00:15:38.916 A:middle
so think of them like a 1-way

00:15:38.916 --> 00:15:39.956 A:middle
diff and they only contain

00:15:39.956 --> 00:15:41.116 A:middle
information that isn't in the

00:15:41.116 --> 00:15:41.786 A:middle
previous frame.

00:15:42.426 --> 00:15:43.906 A:middle
Now we have their cousin, the B

00:15:43.906 --> 00:15:44.276 A:middle
Frame.

00:15:44.746 --> 00:15:46.296 A:middle
B Frames refer to previous and

00:15:46.296 --> 00:15:47.496 A:middle
future frames and they're like a

00:15:47.496 --> 00:15:49.336 A:middle
fancy multidirectional diff.

00:15:49.446 --> 00:15:50.266 A:middle
So, they only contain

00:15:50.266 --> 00:15:51.996 A:middle
information that isn't in either

00:15:51.996 --> 00:15:52.786 A:middle
frame they're referencing.

00:15:53.506 --> 00:15:54.416 A:middle
Now let's pretend we have a

00:15:54.416 --> 00:15:55.896 A:middle
decoder that can only handle 30

00:15:55.896 --> 00:15:57.746 A:middle
frames a second, and let's say

00:15:57.746 --> 00:15:59.416 A:middle
we have content that is 240

00:15:59.416 --> 00:16:00.116 A:middle
frames a second.

00:16:00.556 --> 00:16:01.706 A:middle
Well that means we need to drop

00:16:01.706 --> 00:16:02.846 A:middle
some frames before we can

00:16:02.846 --> 00:16:04.026 A:middle
decode, because it can't keep

00:16:04.026 --> 00:16:04.226 A:middle
up.

00:16:04.756 --> 00:16:06.076 A:middle
So, when can we drop frames?

00:16:07.016 --> 00:16:08.196 A:middle
We can drop frames when another

00:16:08.196 --> 00:16:09.506 A:middle
frame doesn't depend on it.

00:16:10.146 --> 00:16:11.236 A:middle
So, in this case we can drop the

00:16:11.236 --> 00:16:13.106 A:middle
last P Frame, because it refers

00:16:13.106 --> 00:16:14.896 A:middle
to another frame, but no frames

00:16:14.896 --> 00:16:15.466 A:middle
refer to it.

00:16:15.606 --> 00:16:16.686 A:middle
So, let's go ahead and drop it.

00:16:17.186 --> 00:16:18.916 A:middle
We can also drop the B frame

00:16:18.916 --> 00:16:20.086 A:middle
because it refers to other

00:16:20.086 --> 00:16:21.906 A:middle
frames, but no frames refer to

00:16:21.906 --> 00:16:22.036 A:middle
it.

00:16:22.386 --> 00:16:24.216 A:middle
So, let's go ahead and drop it.

00:16:24.466 --> 00:16:25.806 A:middle
Now, let's move to a real-world

00:16:25.806 --> 00:16:27.806 A:middle
case of encoding 240 frames per

00:16:27.806 --> 00:16:28.506 A:middle
second content.

00:16:29.826 --> 00:16:31.076 A:middle
So, this is a typical encoding

00:16:31.076 --> 00:16:32.196 A:middle
scheme used when creating

00:16:32.196 --> 00:16:33.676 A:middle
content compatible with low end

00:16:33.676 --> 00:16:34.386 A:middle
devices.

00:16:35.246 --> 00:16:36.436 A:middle
So, for example, when encoding

00:16:36.436 --> 00:16:37.866 A:middle
240 frames a second content,

00:16:37.866 --> 00:16:39.126 A:middle
we'll have one non-droppable

00:16:39.126 --> 00:16:41.056 A:middle
frame for every seven droppable.

00:16:41.416 --> 00:16:42.386 A:middle
So, this gives us a lot of

00:16:42.386 --> 00:16:43.666 A:middle
flexibility during playback.

00:16:44.036 --> 00:16:46.256 A:middle
On devices that support 120

00:16:46.256 --> 00:16:47.406 A:middle
frames per second decode we can

00:16:47.406 --> 00:16:48.436 A:middle
handle that, on devices that

00:16:48.436 --> 00:16:49.966 A:middle
only support 30, we can also

00:16:49.966 --> 00:16:50.616 A:middle
playback there.

00:16:51.346 --> 00:16:52.546 A:middle
Now, let's throw in our frame

00:16:52.546 --> 00:16:53.286 A:middle
references.

00:16:53.756 --> 00:16:54.496 A:middle
Because these frames are

00:16:54.496 --> 00:16:55.836 A:middle
droppable, they can't refer to

00:16:55.836 --> 00:16:57.016 A:middle
each other and they all refer to

00:16:57.016 --> 00:16:58.106 A:middle
the non-droppable frame.

00:16:58.746 --> 00:16:59.546 A:middle
Now, those of you with

00:16:59.546 --> 00:17:00.926 A:middle
compression experience, are all

00:17:00.976 --> 00:17:02.886 A:middle
already seeing one problem, is

00:17:02.886 --> 00:17:04.166 A:middle
that compression suffers because

00:17:04.166 --> 00:17:05.576 A:middle
we can't refer to the nearby

00:17:05.576 --> 00:17:06.136 A:middle
frames.

00:17:06.346 --> 00:17:07.356 A:middle
So, they're all referring to the

00:17:07.356 --> 00:17:08.696 A:middle
non-droppable frame and a lot

00:17:08.696 --> 00:17:09.716 A:middle
might have changed between the

00:17:09.716 --> 00:17:11.186 A:middle
non-droppable and the droppable

00:17:11.186 --> 00:17:11.476 A:middle
frame.

00:17:11.586 --> 00:17:13.236 A:middle
All right, so that's problem

00:17:13.236 --> 00:17:14.006 A:middle
number one that we're going to

00:17:14.006 --> 00:17:14.316 A:middle
fix.

00:17:14.646 --> 00:17:15.936 A:middle
Now, let's step through and

00:17:15.936 --> 00:17:17.236 A:middle
decode down to 30 frames a

00:17:17.236 --> 00:17:17.506 A:middle
second.

00:17:17.996 --> 00:17:19.376 A:middle
So, first let's say we can't

00:17:19.376 --> 00:17:20.946 A:middle
handle 240 frames a second,

00:17:21.616 --> 00:17:22.466 A:middle
let's go ahead and drop some

00:17:22.466 --> 00:17:23.046 A:middle
frames.

00:17:23.216 --> 00:17:24.226 A:middle
So here we're dropping down to

00:17:24.226 --> 00:17:25.836 A:middle
240 frames a second, and let's

00:17:25.836 --> 00:17:27.046 A:middle
say we still can't keep up.

00:17:27.316 --> 00:17:28.626 A:middle
We need to go down to 60 frames

00:17:28.626 --> 00:17:30.526 A:middle
a second, let's say we have our

00:17:30.526 --> 00:17:32.046 A:middle
decoder that can only handle 30

00:17:32.046 --> 00:17:33.126 A:middle
frames a second, we can't even

00:17:33.126 --> 00:17:34.286 A:middle
handle 60 frames a second.

00:17:34.616 --> 00:17:35.876 A:middle
So, we go ahead and drop this

00:17:35.876 --> 00:17:36.396 A:middle
last frame.

00:17:37.436 --> 00:17:39.226 A:middle
Now, I was really guessing about

00:17:39.226 --> 00:17:40.196 A:middle
what frames to drop.

00:17:40.336 --> 00:17:41.836 A:middle
So, there's no indication at all

00:17:41.836 --> 00:17:42.866 A:middle
about whether I should drop

00:17:42.866 --> 00:17:44.146 A:middle
every other frame, or just the

00:17:44.146 --> 00:17:45.446 A:middle
first half, or just the second

00:17:45.446 --> 00:17:46.196 A:middle
half.

00:17:46.376 --> 00:17:47.806 A:middle
So, let's fix this problem too.

00:17:47.806 --> 00:17:50.516 A:middle
We can fix that with a concept

00:17:50.516 --> 00:17:52.186 A:middle
known as temporal levels, and

00:17:52.186 --> 00:17:53.606 A:middle
this allows us to organize

00:17:53.606 --> 00:17:55.366 A:middle
frames about which ones to drop

00:17:55.366 --> 00:17:55.846 A:middle
first.

00:17:56.146 --> 00:17:57.296 A:middle
So, let's go ahead and re-encode

00:17:57.296 --> 00:17:57.886 A:middle
our content.

00:17:57.956 --> 00:18:01.776 A:middle
And you can already see that

00:18:01.776 --> 00:18:03.346 A:middle
this is way more organized.

00:18:03.516 --> 00:18:05.196 A:middle
So, first we drop temporal level

00:18:05.196 --> 00:18:06.666 A:middle
three, and then two, and then

00:18:06.666 --> 00:18:07.736 A:middle
one, and there's no guessing

00:18:07.736 --> 00:18:08.136 A:middle
involved.

00:18:08.226 --> 00:18:09.156 A:middle
So, this really helps.

00:18:09.656 --> 00:18:10.576 A:middle
Now, let's throw in our frame

00:18:10.576 --> 00:18:11.196 A:middle
references.

00:18:12.466 --> 00:18:13.626 A:middle
And you can already see there's

00:18:13.626 --> 00:18:15.206 A:middle
a big difference here, is that

00:18:15.206 --> 00:18:16.426 A:middle
the reference frames are much

00:18:16.426 --> 00:18:17.416 A:middle
closer together and they're

00:18:17.416 --> 00:18:18.596 A:middle
often referring to frames that

00:18:18.596 --> 00:18:19.836 A:middle
are just before, or just

00:18:19.836 --> 00:18:20.426 A:middle
afterwards.

00:18:20.516 --> 00:18:21.496 A:middle
So, this really improves

00:18:21.496 --> 00:18:21.936 A:middle
compression.

00:18:22.946 --> 00:18:24.156 A:middle
Now, let's go through and let's

00:18:24.156 --> 00:18:25.266 A:middle
say we have our same decoder

00:18:25.266 --> 00:18:26.746 A:middle
that can only handle 30 frames a

00:18:26.746 --> 00:18:27.026 A:middle
second.

00:18:27.186 --> 00:18:28.426 A:middle
We need to drop some frames.

00:18:29.116 --> 00:18:29.856 A:middle
Well, there's no guessing

00:18:29.856 --> 00:18:30.246 A:middle
involved.

00:18:30.796 --> 00:18:32.046 A:middle
We dropped temporal level three.

00:18:32.286 --> 00:18:35.156 A:middle
Now we're down to 120 frames a

00:18:35.156 --> 00:18:35.416 A:middle
second.

00:18:35.416 --> 00:18:37.406 A:middle
Let's drop down to level one.

00:18:37.456 --> 00:18:40.436 A:middle
Now we're down to 60, and now we

00:18:40.436 --> 00:18:42.156 A:middle
have a level that our decoder

00:18:42.156 --> 00:18:42.986 A:middle
can actually handle.

00:18:43.396 --> 00:18:45.756 A:middle
So, this reduces guessing with

00:18:45.756 --> 00:18:46.256 A:middle
frame dropping.

00:18:47.616 --> 00:18:48.416 A:middle
Let's go over what we've

00:18:48.416 --> 00:18:48.826 A:middle
learned.

00:18:49.066 --> 00:18:50.626 A:middle
So, with HEVC hierarchical

00:18:50.626 --> 00:18:51.786 A:middle
encoding, we have improved

00:18:51.786 --> 00:18:52.966 A:middle
temporal scalability.

00:18:53.416 --> 00:18:54.406 A:middle
There's a much more obvious

00:18:54.406 --> 00:18:55.506 A:middle
frame dropping pattern and it

00:18:55.506 --> 00:18:57.546 A:middle
removes frame drop guessing

00:18:57.546 --> 00:18:58.266 A:middle
during playback.

00:18:58.786 --> 00:19:00.306 A:middle
We also have improved motion

00:19:00.306 --> 00:19:01.986 A:middle
compensation, the reference

00:19:01.986 --> 00:19:03.296 A:middle
frames are much closer to each

00:19:03.296 --> 00:19:04.796 A:middle
other, so we can use more parts

00:19:04.796 --> 00:19:05.996 A:middle
of other frames and it also

00:19:05.996 --> 00:19:06.806 A:middle
improves compression.

00:19:07.286 --> 00:19:08.376 A:middle
We're also using file

00:19:08.376 --> 00:19:09.806 A:middle
annotations and for those of you

00:19:09.806 --> 00:19:11.426 A:middle
who like to read specs, check

00:19:11.426 --> 00:19:14.146 A:middle
out MPEG-4, Part 15 section 8.4

00:19:14.466 --> 00:19:15.826 A:middle
and basically we're using sample

00:19:15.826 --> 00:19:16.996 A:middle
groups, so no bitstream is

00:19:17.026 --> 00:19:18.156 A:middle
parsing -- no, sorry.

00:19:18.716 --> 00:19:20.236 A:middle
We're using sample groups so no

00:19:20.236 --> 00:19:21.776 A:middle
bitstream parsing is necessary

00:19:21.776 --> 00:19:22.986 A:middle
to get at this information.

00:19:23.126 --> 00:19:24.056 A:middle
So, that really helps.

00:19:24.546 --> 00:19:25.086 A:middle
All right.

00:19:25.086 --> 00:19:26.396 A:middle
How do we opt-in to this?

00:19:27.276 --> 00:19:28.446 A:middle
So you want to opt-in to this if

00:19:28.446 --> 00:19:29.526 A:middle
you want to create compatible

00:19:29.526 --> 00:19:31.016 A:middle
high frame rate content and

00:19:31.016 --> 00:19:32.316 A:middle
there's two properties you

00:19:32.316 --> 00:19:32.846 A:middle
should set.

00:19:33.136 --> 00:19:34.546 A:middle
You set the base layer and

00:19:34.546 --> 00:19:35.376 A:middle
capture frame rate.

00:19:36.006 --> 00:19:36.826 A:middle
First check that they're

00:19:36.826 --> 00:19:38.086 A:middle
supported on the encoder you're

00:19:38.086 --> 00:19:39.526 A:middle
using, then set the

00:19:39.526 --> 00:19:41.166 A:middle
BaseLayerFrameRate, this is the

00:19:41.166 --> 00:19:43.066 A:middle
temporal level 0 frame rate, in

00:19:43.066 --> 00:19:44.226 A:middle
our previous example this was

00:19:44.226 --> 00:19:45.846 A:middle
the 30 frames a second, and then

00:19:45.846 --> 00:19:47.386 A:middle
set the ExpectedFrameRate, in

00:19:47.386 --> 00:19:48.916 A:middle
our previous example this was

00:19:48.916 --> 00:19:50.256 A:middle
240 frames a second.

00:19:50.876 --> 00:19:52.446 A:middle
The base layer must be decoded,

00:19:52.566 --> 00:19:53.786 A:middle
and we can decode or drop other

00:19:53.786 --> 00:19:54.246 A:middle
levels.

00:19:54.936 --> 00:19:56.226 A:middle
So, now that you're all experts

00:19:56.226 --> 00:19:58.006 A:middle
in hierarchical encoding, let's

00:19:58.006 --> 00:19:59.376 A:middle
move it over to Brad for the

00:19:59.376 --> 00:20:00.356 A:middle
image side of things.

00:20:00.456 --> 00:20:00.936 A:middle
Thank you.

00:20:01.516 --> 00:20:06.726 A:middle
[ Applause ]

00:20:07.226 --> 00:20:07.826 A:middle
&gt;&gt; Thanks, Erik.

00:20:08.146 --> 00:20:09.416 A:middle
I'm Brad Ford from the camera

00:20:09.416 --> 00:20:11.576 A:middle
software team, and I get to talk

00:20:11.576 --> 00:20:12.566 A:middle
to you about the other

00:20:12.566 --> 00:20:14.046 A:middle
four-letter acronym that begins

00:20:14.046 --> 00:20:18.416 A:middle
with HE, Here's the agenda for

00:20:18.416 --> 00:20:19.356 A:middle
the rest of the session.

00:20:19.716 --> 00:20:20.806 A:middle
First, we're going to cover what

00:20:20.806 --> 00:20:22.726 A:middle
is HEIF at high level.

00:20:22.856 --> 00:20:24.566 A:middle
We'll start at the very lowest

00:20:24.566 --> 00:20:25.906 A:middle
level when we talk about reading

00:20:25.906 --> 00:20:27.936 A:middle
and writing files with HEIF.

00:20:28.456 --> 00:20:29.676 A:middle
Then we'll go up to the top of

00:20:29.676 --> 00:20:31.086 A:middle
the stack and talk about how to

00:20:31.086 --> 00:20:33.126 A:middle
use general use cases and common

00:20:33.126 --> 00:20:34.986 A:middle
scenarios with HEIF, and we'll

00:20:34.986 --> 00:20:36.276 A:middle
end with a topic that's most

00:20:36.276 --> 00:20:37.626 A:middle
dear, near and dear to me, which

00:20:37.626 --> 00:20:38.536 A:middle
is capturing HEIF.

00:20:39.546 --> 00:20:41.046 A:middle
So, first off, what is HEIF?

00:20:42.336 --> 00:20:44.256 A:middle
HEIF is the High Efficiency

00:20:44.256 --> 00:20:46.466 A:middle
Image File Format.

00:20:46.936 --> 00:20:48.806 A:middle
The second F is implied and

00:20:48.806 --> 00:20:49.216 A:middle
silent.

00:20:49.436 --> 00:20:50.786 A:middle
You don't need to call it HEIF

00:20:50.786 --> 00:20:51.556 A:middle
[extra F sound].

00:20:51.556 --> 00:20:53.336 A:middle
You'll just embarrass yourself

00:20:53.336 --> 00:20:54.356 A:middle
in front of your compressionist

00:20:54.356 --> 00:20:55.136 A:middle
friends if you do that.

00:20:55.706 --> 00:20:57.436 A:middle
It's a modern container format

00:20:57.436 --> 00:20:58.866 A:middle
for still images, and image

00:20:58.866 --> 00:20:59.546 A:middle
sequences.

00:21:00.136 --> 00:21:02.156 A:middle
It's part of the MPEG H Part 12

00:21:02.156 --> 00:21:04.216 A:middle
specification, and by way of

00:21:04.216 --> 00:21:05.846 A:middle
curiosity it was proposed in

00:21:05.846 --> 00:21:08.306 A:middle
2013 and it was ratified in

00:21:08.306 --> 00:21:11.156 A:middle
summer of 2015, just 1.5 years

00:21:11.156 --> 00:21:11.526 A:middle
later.

00:21:12.346 --> 00:21:13.296 A:middle
If any of you know anything

00:21:13.296 --> 00:21:15.276 A:middle
about standards organizations, a

00:21:15.276 --> 00:21:16.516 A:middle
year and a half is kind of like

00:21:16.636 --> 00:21:18.216 A:middle
two days in real people time.

00:21:18.216 --> 00:21:19.016 A:middle
So, you know it must be an

00:21:19.066 --> 00:21:21.856 A:middle
awesome spec. The technical

00:21:21.856 --> 00:21:22.936 A:middle
detail I'm sure your most

00:21:22.936 --> 00:21:24.206 A:middle
interested in and the reasons

00:21:24.206 --> 00:21:26.056 A:middle
that you came today is how to

00:21:26.056 --> 00:21:26.676 A:middle
pronounce it.

00:21:27.716 --> 00:21:27.976 A:middle
So-- .

00:21:28.516 --> 00:21:32.616 A:middle
[ Laughter and Applause ]

00:21:33.116 --> 00:21:34.416 A:middle
I use the scientific method, I

00:21:34.566 --> 00:21:35.886 A:middle
pulled all the engineers on my

00:21:35.886 --> 00:21:37.766 A:middle
floor and the voting was largely

00:21:37.766 --> 00:21:38.986 A:middle
along party lines.

00:21:39.456 --> 00:21:41.586 A:middle
The German speaker said "hife",

00:21:42.026 --> 00:21:44.166 A:middle
the French said "eff", and the

00:21:44.166 --> 00:21:45.846 A:middle
Russian said "heef".

00:21:45.846 --> 00:21:47.906 A:middle
And "heef" was the runaway

00:21:47.906 --> 00:21:48.416 A:middle
winner though.

00:21:48.836 --> 00:21:50.486 A:middle
That's "heef" as in I can't

00:21:50.486 --> 00:21:52.576 A:middle
belief how big, or how small the

00:21:52.576 --> 00:21:53.066 A:middle
files are.

00:21:53.986 --> 00:21:55.946 A:middle
Now, my Finnish office-mate was

00:21:55.946 --> 00:21:57.546 A:middle
quick to point out that Nokia

00:21:57.546 --> 00:21:58.686 A:middle
researchers were the ones that

00:21:58.686 --> 00:22:00.186 A:middle
came up with the spec, so the

00:22:00.186 --> 00:22:01.666 A:middle
Finnish pronunciation should

00:22:01.666 --> 00:22:03.846 A:middle
win, that would be the 1 percent

00:22:03.976 --> 00:22:04.536 A:middle
"hafe".

00:22:07.496 --> 00:22:08.806 A:middle
Well, as for me and my floor

00:22:08.806 --> 00:22:09.776 A:middle
we're going to call it "heef".

00:22:10.176 --> 00:22:12.546 A:middle
It can use HEVC intra-encoding,

00:22:12.636 --> 00:22:14.326 A:middle
which unsurprisingly compresses

00:22:14.326 --> 00:22:15.856 A:middle
much better than the 20-year-old

00:22:16.036 --> 00:22:18.746 A:middle
JPEG, two times as well as a

00:22:18.746 --> 00:22:19.366 A:middle
matter of fact.

00:22:19.726 --> 00:22:21.406 A:middle
That's an average of two times

00:22:21.406 --> 00:22:22.906 A:middle
smaller, not up to two times

00:22:22.906 --> 00:22:23.316 A:middle
smaller.

00:22:23.836 --> 00:22:25.876 A:middle
We used qualitative analysis on

00:22:25.876 --> 00:22:27.496 A:middle
a large data set of images to

00:22:27.496 --> 00:22:29.576 A:middle
arrive at this number, ensuring

00:22:29.576 --> 00:22:32.126 A:middle
visually equal quality to JPEG.

00:22:33.216 --> 00:22:35.276 A:middle
It supports chopping up an image

00:22:35.276 --> 00:22:36.886 A:middle
and compressing it individual

00:22:36.886 --> 00:22:37.536 A:middle
tiles.

00:22:38.056 --> 00:22:39.336 A:middle
This allows for more efficient

00:22:39.336 --> 00:22:41.456 A:middle
decompression of large images in

00:22:41.456 --> 00:22:42.126 A:middle
sections.

00:22:43.356 --> 00:22:45.106 A:middle
HEIF also has first class

00:22:45.106 --> 00:22:47.036 A:middle
support for auxiliary images,

00:22:47.286 --> 00:22:49.366 A:middle
such as alpha, disparity, or

00:22:49.366 --> 00:22:50.166 A:middle
depth maps.

00:22:51.576 --> 00:22:52.446 A:middle
Here's a gray scale

00:22:52.446 --> 00:22:54.126 A:middle
visualization of the depth map

00:22:54.166 --> 00:22:55.326 A:middle
that's embedded in this HEIF

00:22:55.326 --> 00:22:55.706 A:middle
file.

00:22:56.626 --> 00:22:58.116 A:middle
Having depth information opens

00:22:58.116 --> 00:22:59.486 A:middle
up a world of possibilities for

00:22:59.486 --> 00:23:01.386 A:middle
image editing, such as applying

00:23:01.386 --> 00:23:02.166 A:middle
different effects to the

00:23:02.166 --> 00:23:03.996 A:middle
background and foreground like

00:23:03.996 --> 00:23:04.376 A:middle
this.

00:23:05.686 --> 00:23:07.226 A:middle
Here I've applied the Noir black

00:23:07.226 --> 00:23:08.646 A:middle
and white filter to background,

00:23:08.976 --> 00:23:10.066 A:middle
and the fade filter to the

00:23:10.066 --> 00:23:10.606 A:middle
foreground.

00:23:10.606 --> 00:23:11.456 A:middle
So, notice that the little

00:23:11.456 --> 00:23:13.126 A:middle
girl's tights are still in pink,

00:23:13.126 --> 00:23:14.606 A:middle
while everything behind is in

00:23:14.606 --> 00:23:15.026 A:middle
Noir.

00:23:15.956 --> 00:23:17.336 A:middle
Knowing the gradations of depth,

00:23:17.336 --> 00:23:19.006 A:middle
I can even move the switch-over

00:23:19.006 --> 00:23:21.276 A:middle
point of the filters like this,

00:23:21.506 --> 00:23:22.766 A:middle
keep an eye on her flower.

00:23:24.126 --> 00:23:25.156 A:middle
Now, just her hand and the

00:23:25.156 --> 00:23:26.246 A:middle
flower are in color, while

00:23:26.246 --> 00:23:27.276 A:middle
everything else is black and

00:23:27.276 --> 00:23:27.556 A:middle
white.

00:23:28.806 --> 00:23:30.026 A:middle
You can even control foreground

00:23:30.026 --> 00:23:31.086 A:middle
and background lighting

00:23:31.186 --> 00:23:32.756 A:middle
separately, exposure, such as

00:23:33.036 --> 00:23:33.476 A:middle
this.

00:23:34.916 --> 00:23:35.876 A:middle
Now, she looks like you

00:23:35.876 --> 00:23:37.266 A:middle
Photoshopped her into her very

00:23:37.266 --> 00:23:37.806 A:middle
own photo.

00:23:38.546 --> 00:23:39.556 A:middle
I'm not saying you should do it,

00:23:39.556 --> 00:23:40.486 A:middle
I'm saying you could do it.

00:23:41.826 --> 00:23:43.496 A:middle
That was just a teaser for a

00:23:43.496 --> 00:23:45.876 A:middle
two-part session that we had on

00:23:45.876 --> 00:23:47.506 A:middle
depth, and that's sessions 507

00:23:47.506 --> 00:23:48.216 A:middle
and 508.

00:23:48.216 --> 00:23:49.156 A:middle
I hope you'll make some time to

00:23:49.156 --> 00:23:50.066 A:middle
look at those videos.

00:23:51.246 --> 00:23:53.046 A:middle
When it comes to metadata, HEIF

00:23:53.316 --> 00:23:55.236 A:middle
has a great compatibility story.

00:23:55.376 --> 00:23:56.836 A:middle
It supports industry standard

00:23:56.836 --> 00:23:59.316 A:middle
Exif and xmp as first-class

00:23:59.316 --> 00:23:59.836 A:middle
citizens.

00:24:01.056 --> 00:24:02.676 A:middle
HEIF isn't just for single

00:24:02.676 --> 00:24:05.756 A:middle
images, it also supports image

00:24:05.756 --> 00:24:07.796 A:middle
sequences such as bursts,

00:24:08.106 --> 00:24:10.576 A:middle
exposure brackets, focus stacks.

00:24:11.256 --> 00:24:12.556 A:middle
It also has affordances for

00:24:12.556 --> 00:24:14.686 A:middle
mixed media, such as audio and

00:24:14.686 --> 00:24:15.496 A:middle
video tracks.

00:24:17.306 --> 00:24:18.346 A:middle
Let's do a demo, shall we?

00:24:19.626 --> 00:24:21.536 A:middle
Okay, this is a showcase that

00:24:21.536 --> 00:24:22.966 A:middle
takes place in Apple's very own

00:24:22.966 --> 00:24:23.566 A:middle
Photos app.

00:24:30.576 --> 00:24:31.326 A:middle
All right, I'm going to start

00:24:31.326 --> 00:24:34.016 A:middle
with a pano and this is a nice

00:24:34.016 --> 00:24:36.156 A:middle
looking pano, this one is from

00:24:36.156 --> 00:24:37.766 A:middle
Pothole Dome in Yosemite.

00:24:38.256 --> 00:24:40.136 A:middle
It looks great, it's sort of

00:24:40.416 --> 00:24:41.776 A:middle
what you'd expect from a pano

00:24:41.776 --> 00:24:43.596 A:middle
until you start zooming in.

00:24:44.276 --> 00:24:45.566 A:middle
So, let's do that.

00:24:46.366 --> 00:24:47.496 A:middle
Zoom in a bit.

00:24:48.316 --> 00:24:49.716 A:middle
Looks nice, let's zoom in a

00:24:49.716 --> 00:24:50.336 A:middle
little more.

00:24:51.176 --> 00:24:52.636 A:middle
And then zoom in a little more.

00:24:53.776 --> 00:24:55.246 A:middle
And zoom in a little more.

00:24:56.226 --> 00:24:57.456 A:middle
And keep zooming.

00:24:58.136 --> 00:25:00.256 A:middle
And keep zooming, oh my gosh I

00:25:00.256 --> 00:25:01.726 A:middle
can see what the speed limit is,

00:25:02.426 --> 00:25:03.976 A:middle
and wow.

00:25:04.516 --> 00:25:09.546 A:middle
[ Applause ]

00:25:10.046 --> 00:25:11.546 A:middle
There are cars there, and there

00:25:11.546 --> 00:25:13.306 A:middle
are Porta Potties.

00:25:13.366 --> 00:25:14.686 A:middle
I can even go and take a look at

00:25:14.686 --> 00:25:15.816 A:middle
the peaks in the background.

00:25:18.376 --> 00:25:20.366 A:middle
Notice how it snaps into clarity

00:25:20.366 --> 00:25:20.896 A:middle
as I go.

00:25:21.466 --> 00:25:24.806 A:middle
This is actually a 2.9 gigapixel

00:25:24.956 --> 00:25:25.356 A:middle
pano.

00:25:25.826 --> 00:25:28.136 A:middle
It's 91,000 pixels by about

00:25:28.206 --> 00:25:29.856 A:middle
32,000 pixels.

00:25:30.476 --> 00:25:32.376 A:middle
The RGB TIFF file for this is

00:25:32.376 --> 00:25:33.816 A:middle
well over 2 gigabytes and I

00:25:33.816 --> 00:25:35.786 A:middle
assured it brings any fast Mac

00:25:35.836 --> 00:25:38.566 A:middle
to its knees, whereas the HEIF

00:25:38.566 --> 00:25:41.206 A:middle
file is 160 megabytes, you

00:25:41.206 --> 00:25:42.866 A:middle
literally cannot do this with

00:25:42.866 --> 00:25:45.026 A:middle
JPEG, since JPEG maxes out at

00:25:45.106 --> 00:25:47.396 A:middle
64k by 64k pixels.

00:25:47.986 --> 00:25:49.376 A:middle
HEIF does not max out.

00:25:49.896 --> 00:25:52.056 A:middle
It supports arbitrarily large

00:25:52.476 --> 00:25:55.206 A:middle
files and it keeps the memory in

00:25:55.206 --> 00:25:56.926 A:middle
check by efficiently loading and

00:25:56.926 --> 00:25:58.016 A:middle
unloading tiles.

00:25:58.376 --> 00:25:59.566 A:middle
So, while I have this enormous

00:25:59.596 --> 00:26:01.116 A:middle
data sitting in front of me, I'm

00:26:01.116 --> 00:26:02.386 A:middle
never using more than 70

00:26:02.386 --> 00:26:04.386 A:middle
megabytes of memory at a time in

00:26:04.386 --> 00:26:05.006 A:middle
the Photos app.

00:26:05.336 --> 00:26:07.316 A:middle
So, it's responsive and I can

00:26:07.316 --> 00:26:08.146 A:middle
zoom in and zoom out.

00:26:08.146 --> 00:26:09.196 A:middle
I could do this all day long,

00:26:09.296 --> 00:26:10.236 A:middle
but I should probably go back to

00:26:10.236 --> 00:26:10.626 A:middle
slides.

00:26:12.516 --> 00:26:15.500 A:middle
[ Applause ]

00:26:19.226 --> 00:26:23.136 A:middle
On all iOS 11 and macOS 10.13

00:26:23.136 --> 00:26:24.856 A:middle
supported hardware, we read and

00:26:24.856 --> 00:26:26.816 A:middle
decode three different flavors

00:26:26.816 --> 00:26:28.046 A:middle
of HEIF.

00:26:28.136 --> 00:26:29.256 A:middle
The three different extensions

00:26:29.256 --> 00:26:30.466 A:middle
you see here relate to how the

00:26:30.466 --> 00:26:32.196 A:middle
main image in the file is

00:26:32.196 --> 00:26:32.676 A:middle
encoded.

00:26:34.416 --> 00:26:37.936 A:middle
For HEIC, .HEIC also the UTI of

00:26:37.936 --> 00:26:39.886 A:middle
public.heic that refers to HEIF

00:26:39.886 --> 00:26:41.826 A:middle
files in which the main image is

00:26:41.826 --> 00:26:43.396 A:middle
compressed with HEVC.

00:26:44.156 --> 00:26:46.746 A:middle
The second flavor is AVCI, in

00:26:46.746 --> 00:26:47.956 A:middle
which the main images is

00:26:47.956 --> 00:26:51.016 A:middle
compressed with H.264, and then

00:26:51.016 --> 00:26:52.576 A:middle
the .HEIF extension is reserved

00:26:52.576 --> 00:26:55.106 A:middle
for anything else, could be JPEG

00:26:55.106 --> 00:26:56.246 A:middle
inside, could be any of the

00:26:56.246 --> 00:26:57.226 A:middle
supported codecs.

00:26:59.166 --> 00:27:01.046 A:middle
We only support one form of HEIF

00:27:01.046 --> 00:27:03.006 A:middle
for encode and writing, and

00:27:03.006 --> 00:27:04.956 A:middle
that's the HEIC format, in other

00:27:04.956 --> 00:27:06.496 A:middle
words the ones in which you use

00:27:06.496 --> 00:27:06.806 A:middle
HEVC.

00:27:06.806 --> 00:27:08.686 A:middle
We figure if you've gone far

00:27:08.686 --> 00:27:09.976 A:middle
enough to adopt the new file

00:27:09.976 --> 00:27:11.326 A:middle
container, you might as well

00:27:11.326 --> 00:27:12.646 A:middle
adopt the greatest compression

00:27:12.646 --> 00:27:13.506 A:middle
standard as well.

00:27:14.166 --> 00:27:15.606 A:middle
Support is currently limited to

00:27:15.736 --> 00:27:17.836 A:middle
iOS 11 devices with the A10

00:27:17.836 --> 00:27:19.636 A:middle
Fusion chip.

00:27:19.876 --> 00:27:21.036 A:middle
All right, let's go over to

00:27:21.036 --> 00:27:22.506 A:middle
low-level access to HEIF.

00:27:23.136 --> 00:27:25.036 A:middle
The lowest level interface on

00:27:25.036 --> 00:27:26.436 A:middle
our platform for reading and

00:27:26.436 --> 00:27:28.606 A:middle
writing images is ImageIO.

00:27:29.126 --> 00:27:30.736 A:middle
It encapsulates reading from

00:27:30.736 --> 00:27:32.706 A:middle
either a file or in-memory data

00:27:32.706 --> 00:27:34.396 A:middle
source using an object called

00:27:34.526 --> 00:27:35.696 A:middle
CGImageSource.

00:27:36.606 --> 00:27:38.096 A:middle
It also supports writing to

00:27:38.096 --> 00:27:40.556 A:middle
files or to immutable data using

00:27:40.746 --> 00:27:42.226 A:middle
CGImageDestination.

00:27:42.896 --> 00:27:44.036 A:middle
These objects have been around

00:27:44.216 --> 00:27:45.226 A:middle
for a long time.

00:27:45.286 --> 00:27:46.326 A:middle
You've probably used them.

00:27:47.236 --> 00:27:48.806 A:middle
To open a JPEG image file on

00:27:48.806 --> 00:27:50.296 A:middle
disk, this is how you would do

00:27:50.296 --> 00:27:51.356 A:middle
it using ImageIO.

00:27:51.516 --> 00:27:53.836 A:middle
First you create the URL, then

00:27:53.836 --> 00:27:54.276 A:middle
you call

00:27:54.276 --> 00:27:56.886 A:middle
CGImageSourceCreateWithURL to

00:27:56.886 --> 00:27:57.826 A:middle
create your source.

00:27:58.276 --> 00:27:59.616 A:middle
The last argument is an options

00:27:59.616 --> 00:28:00.736 A:middle
dictionary where you can

00:28:00.736 --> 00:28:02.266 A:middle
optionally pass the UTI of the

00:28:02.266 --> 00:28:02.776 A:middle
input.

00:28:03.206 --> 00:28:04.266 A:middle
It's not needed when you're

00:28:04.266 --> 00:28:06.106 A:middle
opening a file on disk, because

00:28:06.106 --> 00:28:07.646 A:middle
the UTI can be inferred from the

00:28:07.646 --> 00:28:09.386 A:middle
file path extension.

00:28:10.286 --> 00:28:11.876 A:middle
Once you've got a CGImageSource,

00:28:12.276 --> 00:28:13.986 A:middle
you can do several things with

00:28:14.326 --> 00:28:17.016 A:middle
it, such as copy the properties

00:28:17.016 --> 00:28:19.066 A:middle
at any index, that's getting

00:28:19.166 --> 00:28:21.666 A:middle
metadata out of it such as Exif.

00:28:21.666 --> 00:28:23.556 A:middle
You can also create a CGImage

00:28:23.626 --> 00:28:24.826 A:middle
from any of the images in the

00:28:24.826 --> 00:28:25.216 A:middle
file.

00:28:25.326 --> 00:28:27.106 A:middle
For JPEG there's typically only

00:28:27.106 --> 00:28:28.306 A:middle
one image in the file.

00:28:29.016 --> 00:28:30.426 A:middle
CGImage is of course like a

00:28:30.426 --> 00:28:32.796 A:middle
promise, a rendering promise.

00:28:33.126 --> 00:28:34.776 A:middle
The JPEG data can be lazily

00:28:34.776 --> 00:28:36.776 A:middle
decoded when necessary using

00:28:36.776 --> 00:28:38.386 A:middle
CGImage such as when you're

00:28:38.386 --> 00:28:40.396 A:middle
rendering it to a CG bitmap

00:28:40.396 --> 00:28:40.996 A:middle
context.

00:28:41.676 --> 00:28:43.106 A:middle
You can also get a thumbnail

00:28:43.106 --> 00:28:45.176 A:middle
image using a variety of

00:28:45.176 --> 00:28:45.836 A:middle
options.

00:28:46.276 --> 00:28:47.856 A:middle
For instance, the maximum size

00:28:47.856 --> 00:28:49.116 A:middle
that you would like, what to do

00:28:49.116 --> 00:28:50.206 A:middle
if there's none available in the

00:28:50.206 --> 00:28:51.986 A:middle
file, and when you call

00:28:51.986 --> 00:28:52.736 A:middle
CGImageSource

00:28:52.736 --> 00:28:54.556 A:middle
CreateThumbnailAtIndex it does

00:28:54.856 --> 00:28:55.976 A:middle
decode right away.

00:28:57.896 --> 00:28:59.426 A:middle
Now, here's the analogous code

00:28:59.426 --> 00:29:01.386 A:middle
for opening a .HEIC file.

00:29:02.506 --> 00:29:03.816 A:middle
Can anyone spot the differences?

00:29:05.206 --> 00:29:06.236 A:middle
Here, I'll make it easy for you.

00:29:06.796 --> 00:29:08.166 A:middle
That's it.

00:29:09.076 --> 00:29:12.656 A:middle
It's a comment and it's a file

00:29:12.656 --> 00:29:13.666 A:middle
path, that's it.

00:29:14.146 --> 00:29:15.456 A:middle
In other words, CGImageSource

00:29:15.506 --> 00:29:16.196 A:middle
just works.

00:29:16.326 --> 00:29:17.806 A:middle
The one difference you don't see

00:29:17.806 --> 00:29:19.396 A:middle
is how the HEVC is being

00:29:19.396 --> 00:29:19.956 A:middle
decoded.

00:29:20.696 --> 00:29:22.606 A:middle
On recent iOS devices and Macs

00:29:22.606 --> 00:29:23.996 A:middle
the decode is hardware

00:29:23.996 --> 00:29:26.056 A:middle
accelerated, whereas on older

00:29:26.056 --> 00:29:27.656 A:middle
devices it's done in software

00:29:27.656 --> 00:29:28.876 A:middle
and with thus be slower.

00:29:30.106 --> 00:29:31.516 A:middle
A quick word on the tiling

00:29:31.516 --> 00:29:32.846 A:middle
support that we just saw in the

00:29:32.846 --> 00:29:35.516 A:middle
demo, CGImageSource can provide

00:29:35.516 --> 00:29:37.586 A:middle
a dictionary of properties about

00:29:37.586 --> 00:29:38.616 A:middle
the image by calling

00:29:38.766 --> 00:29:39.816 A:middle
CGImageSourceCopy

00:29:39.816 --> 00:29:41.496 A:middle
PropertiesAtIndex and the

00:29:41.496 --> 00:29:43.426 A:middle
properties dictionary is a

00:29:43.426 --> 00:29:46.666 A:middle
synonym for metadata, Exif,

00:29:46.866 --> 00:29:48.256 A:middle
Apple Maker Note, et cetera.

00:29:48.966 --> 00:29:50.126 A:middle
There's also a subdictionary

00:29:50.126 --> 00:29:51.856 A:middle
called the TIFF subdictionary,

00:29:52.196 --> 00:29:53.886 A:middle
in which you'll find the size of

00:29:53.886 --> 00:29:55.496 A:middle
the encoded tiles as the tile

00:29:55.496 --> 00:29:56.956 A:middle
length and tile width.

00:29:57.236 --> 00:29:58.576 A:middle
By default they are encoded as

00:29:58.576 --> 00:30:00.836 A:middle
512 by 512 pixels.

00:30:03.076 --> 00:30:04.956 A:middle
CGImageSource provides you with

00:30:05.006 --> 00:30:07.336 A:middle
CG Images as we saw, and CGImage

00:30:07.336 --> 00:30:08.866 A:middle
has a nifty method called

00:30:08.976 --> 00:30:10.746 A:middle
cropping(to: that takes

00:30:10.746 --> 00:30:11.806 A:middle
advantage of the tiling.

00:30:12.556 --> 00:30:14.536 A:middle
This call creates a new CGImage

00:30:14.536 --> 00:30:16.736 A:middle
containing just a subsection of

00:30:16.736 --> 00:30:17.546 A:middle
another image.

00:30:18.286 --> 00:30:20.056 A:middle
This isn't a new API, but it

00:30:20.056 --> 00:30:21.536 A:middle
works really well with HEIF

00:30:21.876 --> 00:30:23.236 A:middle
where the tiles are encoded

00:30:23.276 --> 00:30:23.986 A:middle
individually.

00:30:24.536 --> 00:30:25.496 A:middle
You don't need to worry about

00:30:25.696 --> 00:30:27.896 A:middle
the underlying encoded tile

00:30:27.896 --> 00:30:29.396 A:middle
size, you can simply ask for the

00:30:29.396 --> 00:30:30.476 A:middle
subregion that you want to

00:30:30.476 --> 00:30:33.046 A:middle
display or render, and know that

00:30:33.346 --> 00:30:34.296 A:middle
under the hood you're getting

00:30:34.296 --> 00:30:35.676 A:middle
all of the tile-y goodness.

00:30:35.676 --> 00:30:38.076 A:middle
It's only decoding the tiles

00:30:38.076 --> 00:30:39.086 A:middle
that are necessary for that

00:30:39.146 --> 00:30:39.716 A:middle
subregion.

00:30:40.326 --> 00:30:41.906 A:middle
Now, let's talk about the

00:30:41.906 --> 00:30:42.616 A:middle
writing side.

00:30:43.496 --> 00:30:45.096 A:middle
Here's how you write a JPEG with

00:30:45.096 --> 00:30:45.676 A:middle
ImageIO.

00:30:46.496 --> 00:30:47.796 A:middle
You, after creating a

00:30:47.796 --> 00:30:49.326 A:middle
CGImageDestination calling

00:30:49.326 --> 00:30:51.366 A:middle
CGImageDestinationCreateWithURL,

00:30:53.956 --> 00:30:56.266 A:middle
where I should point out you do

00:30:56.266 --> 00:30:58.116 A:middle
need to specify what the UTI is.

00:30:58.686 --> 00:31:00.806 A:middle
Here I'm using AVFileType.jpg

00:31:00.806 --> 00:31:03.136 A:middle
which is the same as the UT type

00:31:03.276 --> 00:31:04.316 A:middle
public.jpg.

00:31:05.356 --> 00:31:07.086 A:middle
I'm being careful with the

00:31:07.086 --> 00:31:10.156 A:middle
result, I'm using guard let just

00:31:10.156 --> 00:31:11.576 A:middle
in case destination is nil.

00:31:12.126 --> 00:31:14.016 A:middle
Now, in the, with the current

00:31:14.016 --> 00:31:15.226 A:middle
JPEG, the only reason it would

00:31:15.226 --> 00:31:17.336 A:middle
be nil is if you asked to write

00:31:17.336 --> 00:31:18.456 A:middle
to a file that's outside your

00:31:18.456 --> 00:31:20.206 A:middle
sandbox, but to be defensive you

00:31:20.206 --> 00:31:21.896 A:middle
should really write code in this

00:31:21.896 --> 00:31:22.286 A:middle
manner.

00:31:23.126 --> 00:31:25.056 A:middle
Next, you add your CG image or

00:31:25.056 --> 00:31:27.276 A:middle
images, one at a time with

00:31:27.276 --> 00:31:28.326 A:middle
accompanying metadata if you

00:31:28.576 --> 00:31:29.076 A:middle
would like.

00:31:29.076 --> 00:31:30.846 A:middle
And then when you're done, you

00:31:30.846 --> 00:31:32.896 A:middle
call CGImageDestinationFinalize

00:31:33.376 --> 00:31:34.756 A:middle
which closes the container for

00:31:34.756 --> 00:31:36.206 A:middle
editing and then writes it to

00:31:36.206 --> 00:31:36.496 A:middle
disc.

00:31:37.956 --> 00:31:39.286 A:middle
Now, let's look at the HEIC

00:31:39.486 --> 00:31:39.896 A:middle
writing.

00:31:40.056 --> 00:31:41.266 A:middle
Again, differences are very

00:31:41.266 --> 00:31:41.696 A:middle
small.

00:31:42.186 --> 00:31:45.456 A:middle
Just the file path extension,

00:31:45.566 --> 00:31:47.166 A:middle
the UTI, the comment.

00:31:47.746 --> 00:31:48.856 A:middle
One important difference here

00:31:48.856 --> 00:31:50.656 A:middle
though between JPEG and HEIF is

00:31:50.656 --> 00:31:51.516 A:middle
that creating a

00:31:51.516 --> 00:31:54.806 A:middle
CGImageDestination will fail on

00:31:54.806 --> 00:31:57.006 A:middle
devices with no HEVC hardware

00:31:57.006 --> 00:31:57.596 A:middle
encoder.

00:31:58.126 --> 00:31:59.776 A:middle
And when it fails, destination

00:31:59.776 --> 00:32:00.276 A:middle
is nil.

00:32:00.696 --> 00:32:02.056 A:middle
So, the good defensive code that

00:32:02.056 --> 00:32:03.316 A:middle
I wrote on the previous slide,

00:32:03.706 --> 00:32:05.446 A:middle
is even more important to do

00:32:05.516 --> 00:32:07.606 A:middle
with HEVC where there is now a

00:32:07.606 --> 00:32:09.036 A:middle
new reason that the destination

00:32:09.036 --> 00:32:09.686 A:middle
might be nil.

00:32:10.616 --> 00:32:11.836 A:middle
Please always make sure that you

00:32:11.836 --> 00:32:13.656 A:middle
check this is the one and only

00:32:13.656 --> 00:32:15.496 A:middle
way to know whether writing to

00:32:15.496 --> 00:32:16.616 A:middle
HEIC is supported on your

00:32:16.616 --> 00:32:17.366 A:middle
current platform.

00:32:19.056 --> 00:32:20.206 A:middle
Also worth noting is that

00:32:20.206 --> 00:32:21.986 A:middle
ImageIO has added support for

00:32:21.986 --> 00:32:23.666 A:middle
reading and writing depth maps

00:32:23.666 --> 00:32:25.086 A:middle
as I talked about earlier.

00:32:25.436 --> 00:32:26.746 A:middle
We've done that for both HEIC

00:32:26.746 --> 00:32:28.856 A:middle
and we manipulated JPEG in

00:32:28.856 --> 00:32:30.626 A:middle
strange sorcery ways that we

00:32:31.036 --> 00:32:32.026 A:middle
probably shouldn't talk about,

00:32:32.406 --> 00:32:34.216 A:middle
I'm not going to delve deeply

00:32:34.216 --> 00:32:35.636 A:middle
into that though because it's

00:32:35.636 --> 00:32:37.066 A:middle
covered in the dedicated session

00:32:37.066 --> 00:32:39.536 A:middle
507 and 508 where we talk about

00:32:39.606 --> 00:32:39.946 A:middle
depth.

00:32:39.946 --> 00:32:41.226 A:middle
And I hope you'll go look at

00:32:41.226 --> 00:32:42.686 A:middle
those session because they're

00:32:43.056 --> 00:32:45.296 A:middle
many segues to the auxiliary

00:32:45.296 --> 00:32:48.146 A:middle
image format in HEIF.

00:32:48.146 --> 00:32:49.216 A:middle
All right, it's time to move on

00:32:49.216 --> 00:32:50.486 A:middle
to our next major topic which is

00:32:50.616 --> 00:32:52.106 A:middle
high level access to HEIF.

00:32:52.986 --> 00:32:55.936 A:middle
But before we do that, I feel

00:32:55.936 --> 00:32:57.806 A:middle
that WWDC should be a cultural

00:32:57.806 --> 00:32:58.866 A:middle
experience, culturally

00:32:58.866 --> 00:33:00.316 A:middle
enriching, not just an

00:33:00.316 --> 00:33:01.106 A:middle
educational one.

00:33:01.106 --> 00:33:02.266 A:middle
And that's why I want you to

00:33:02.266 --> 00:33:03.286 A:middle
rest your brains for a moment

00:33:03.286 --> 00:33:04.926 A:middle
with some compression poetry.

00:33:06.226 --> 00:33:06.516 A:middle
All right.

00:33:07.396 --> 00:33:09.176 A:middle
Wait for it.

00:33:09.386 --> 00:33:13.046 A:middle
JPEG is yay big, but HEIF is

00:33:13.046 --> 00:33:13.456 A:middle
brief.

00:33:15.066 --> 00:33:15.396 A:middle
[laughter] Thank you.

00:33:16.041 --> 00:33:18.041 A:middle
[ Applause ]

00:33:18.066 --> 00:33:19.436 A:middle
See it's compression poetry, so

00:33:19.436 --> 00:33:20.106 A:middle
it's small.

00:33:20.526 --> 00:33:21.446 A:middle
Did you like that?

00:33:21.446 --> 00:33:22.916 A:middle
Do you want to hear some more?

00:33:24.066 --> 00:33:24.946 A:middle
Okay, let's do another one.

00:33:25.566 --> 00:33:26.696 A:middle
Here's a compression haiku.

00:33:29.186 --> 00:33:33.606 A:middle
HEVC has twice as many syllables

00:33:34.836 --> 00:33:37.176 A:middle
as JPEG progress.

00:33:38.166 --> 00:33:38.476 A:middle
Thank you.

00:33:38.756 --> 00:33:39.916 A:middle
All right let's move on.

00:33:41.746 --> 00:33:42.576 A:middle
[applause] I'm sure they'll edit

00:33:42.576 --> 00:33:43.306 A:middle
that out later.

00:33:44.226 --> 00:33:45.316 A:middle
Okay, we're going to talk about

00:33:45.316 --> 00:33:46.166 A:middle
HEIF and PhotoKit.

00:33:46.866 --> 00:33:48.006 A:middle
PhotoKit is actually two

00:33:48.006 --> 00:33:49.456 A:middle
frameworks, it's Photos

00:33:49.456 --> 00:33:51.106 A:middle
framework and PhotosUI and it's

00:33:51.106 --> 00:33:52.576 A:middle
very high level, it's even above

00:33:52.576 --> 00:33:53.156 A:middle
UIKit.

00:33:54.276 --> 00:33:56.816 A:middle
The way that you work with HEIF

00:33:56.816 --> 00:33:58.436 A:middle
in PhotoKit when applying

00:33:58.436 --> 00:34:00.056 A:middle
adjustments we're going to cover

00:34:00.116 --> 00:34:01.516 A:middle
just briefly and we're going to

00:34:01.516 --> 00:34:02.506 A:middle
talk about how you apply

00:34:02.506 --> 00:34:03.756 A:middle
adjustments in three different

00:34:03.756 --> 00:34:05.496 A:middle
scenarios, photos, videos, and

00:34:05.496 --> 00:34:06.206 A:middle
Live Photos.

00:34:06.496 --> 00:34:07.706 A:middle
And then we'll talk about common

00:34:07.706 --> 00:34:09.016 A:middle
workflows that you would use

00:34:09.016 --> 00:34:10.516 A:middle
with PHPhotoLibrary.

00:34:11.776 --> 00:34:12.956 A:middle
Let's briefly outline the steps

00:34:12.956 --> 00:34:14.866 A:middle
involved in applying an edit or

00:34:14.866 --> 00:34:16.726 A:middle
an adjustment to an asset using

00:34:16.726 --> 00:34:17.346 A:middle
PhotoLibrary.

00:34:18.216 --> 00:34:19.746 A:middle
You ask the PHPhotoLibrary to

00:34:19.746 --> 00:34:21.626 A:middle
performChanges and in that

00:34:21.626 --> 00:34:23.556 A:middle
change request you start with a

00:34:23.556 --> 00:34:25.046 A:middle
PHAsset that you want to edit,

00:34:25.496 --> 00:34:26.526 A:middle
such as a photo.

00:34:27.266 --> 00:34:28.946 A:middle
And you call request content

00:34:28.946 --> 00:34:30.876 A:middle
editing input on the asset to

00:34:30.876 --> 00:34:33.306 A:middle
get a PHContentEditingInput.

00:34:33.426 --> 00:34:35.626 A:middle
This is the guy that gives you

00:34:35.626 --> 00:34:36.756 A:middle
access to all the media

00:34:36.756 --> 00:34:38.446 A:middle
associated with your asset such

00:34:38.446 --> 00:34:42.026 A:middle
as a UIImage, a URL, an AVAsset,

00:34:42.466 --> 00:34:43.536 A:middle
or a Live Photo.

00:34:44.406 --> 00:34:45.536 A:middle
Next you create a

00:34:45.536 --> 00:34:47.906 A:middle
PHContentEditingOutput by

00:34:47.906 --> 00:34:49.176 A:middle
calling in it with content

00:34:49.176 --> 00:34:49.956 A:middle
editing input.

00:34:50.716 --> 00:34:52.556 A:middle
The editing output tells you

00:34:52.556 --> 00:34:53.906 A:middle
where to place all of your

00:34:53.906 --> 00:34:55.746 A:middle
rendered files on disc by

00:34:55.746 --> 00:34:57.096 A:middle
providing you with a

00:34:57.096 --> 00:34:58.586 A:middle
renderContentURL.

00:34:59.076 --> 00:35:00.906 A:middle
You then perform your edits to

00:35:00.906 --> 00:35:02.896 A:middle
the media that's provided you

00:35:02.896 --> 00:35:04.936 A:middle
from the editing input, and then

00:35:04.936 --> 00:35:06.356 A:middle
you write them to the specified

00:35:06.356 --> 00:35:06.966 A:middle
location.

00:35:07.336 --> 00:35:10.546 A:middle
Finally, the PHPhotoLibrary

00:35:10.546 --> 00:35:12.376 A:middle
validates your changes and

00:35:12.376 --> 00:35:13.606 A:middle
accepts them as a whole or

00:35:13.606 --> 00:35:14.596 A:middle
rejects the change.

00:35:16.066 --> 00:35:18.186 A:middle
So, the rules with respect to

00:35:18.186 --> 00:35:19.446 A:middle
renderedOutputImages are

00:35:19.446 --> 00:35:21.316 A:middle
unchanged, but you may not been

00:35:21.316 --> 00:35:23.036 A:middle
aware that they were in force.

00:35:23.516 --> 00:35:26.026 A:middle
In iOS 10 your output images

00:35:26.196 --> 00:35:29.016 A:middle
must be rendered as JPEG with an

00:35:29.016 --> 00:35:31.286 A:middle
Exif orientation of 1, that is

00:35:31.286 --> 00:35:33.126 A:middle
if there's any rotation to be

00:35:33.126 --> 00:35:34.926 A:middle
done, it is baked into the image

00:35:35.436 --> 00:35:37.036 A:middle
in the outputRendered file.

00:35:37.506 --> 00:35:38.456 A:middle
You may have overlooked this

00:35:38.456 --> 00:35:40.136 A:middle
detail since probably 99 percent

00:35:40.136 --> 00:35:41.096 A:middle
of the content that you are

00:35:41.096 --> 00:35:43.196 A:middle
editing was provided as JPEG and

00:35:43.346 --> 00:35:44.746 A:middle
then you just outputted it to

00:35:44.746 --> 00:35:45.536 A:middle
the same format.

00:35:45.916 --> 00:35:46.646 A:middle
But now you will see a

00:35:46.646 --> 00:35:48.606 A:middle
proliferation of input content

00:35:48.606 --> 00:35:50.316 A:middle
that is HEIC, so you should be

00:35:50.316 --> 00:35:51.766 A:middle
well aware that you must still

00:35:51.896 --> 00:35:53.336 A:middle
render all of your output

00:35:53.336 --> 00:35:55.386 A:middle
content to JPEG with Exif

00:35:55.386 --> 00:35:56.376 A:middle
orientation 1.

00:35:57.256 --> 00:35:59.726 A:middle
Here's the code for it.

00:35:59.886 --> 00:36:01.626 A:middle
Make, first you make a CIImage,

00:36:01.846 --> 00:36:03.116 A:middle
this would be one way of doing

00:36:03.116 --> 00:36:03.256 A:middle
it.

00:36:03.706 --> 00:36:05.316 A:middle
You could make a CIImage from

00:36:05.376 --> 00:36:07.106 A:middle
the content editing inputs file

00:36:07.146 --> 00:36:10.006 A:middle
URL, and then apply your edits.

00:36:10.106 --> 00:36:12.116 A:middle
Here I'm doing both an

00:36:12.116 --> 00:36:14.286 A:middle
application of a filter and

00:36:14.406 --> 00:36:15.816 A:middle
baking in the orientation.

00:36:16.336 --> 00:36:18.756 A:middle
And then when I'm done, I call

00:36:18.756 --> 00:36:20.776 A:middle
ciContext's handy dandy

00:36:20.776 --> 00:36:23.706 A:middle
writeJPEGRepresentation, which

00:36:23.806 --> 00:36:25.096 A:middle
if you've used this boilerplate

00:36:25.096 --> 00:36:26.626 A:middle
code in the past, it still works

00:36:26.686 --> 00:36:27.856 A:middle
correctly because it's

00:36:28.066 --> 00:36:29.996 A:middle
outputting to a JPEG regardless

00:36:29.996 --> 00:36:30.976 A:middle
of what the input was.

00:36:32.856 --> 00:36:34.286 A:middle
Our second applying adjustments

00:36:34.286 --> 00:36:36.326 A:middle
use case relates to videos, and

00:36:36.326 --> 00:36:39.556 A:middle
the rule again same as iOS 10 is

00:36:39.556 --> 00:36:40.796 A:middle
that no matter what the format

00:36:40.796 --> 00:36:42.826 A:middle
of your input movie content, you

00:36:42.826 --> 00:36:44.926 A:middle
must produce a movie compressed

00:36:44.926 --> 00:36:47.136 A:middle
with H.264 as your output.

00:36:48.076 --> 00:36:49.496 A:middle
Yes, even if the source movie is

00:36:49.496 --> 00:36:51.226 A:middle
HEVC, you still need to render

00:36:51.376 --> 00:36:56.806 A:middle
to H.264 for output.

00:36:57.636 --> 00:36:58.996 A:middle
Here's some boilerplate code to

00:36:58.996 --> 00:37:00.516 A:middle
edit video content that looks

00:37:00.516 --> 00:37:01.056 A:middle
like this.

00:37:01.176 --> 00:37:03.686 A:middle
First you get an AVAsset from

00:37:03.726 --> 00:37:06.816 A:middle
the PHContentEditingInput, then

00:37:06.816 --> 00:37:07.776 A:middle
you can create an

00:37:07.776 --> 00:37:09.826 A:middle
AVVideoComposition in which you

00:37:09.826 --> 00:37:11.786 A:middle
are handed each frame one at a

00:37:12.396 --> 00:37:13.976 A:middle
time and you can get them as

00:37:13.976 --> 00:37:15.926 A:middle
CIImages and then request an

00:37:15.926 --> 00:37:18.476 A:middle
object that has a mouthful of a

00:37:18.476 --> 00:37:19.816 A:middle
name, AVAsynchronous

00:37:19.816 --> 00:37:21.786 A:middle
CoreImageFilteringRequest.

00:37:22.636 --> 00:37:24.416 A:middle
You get a CIImage and then you

00:37:24.416 --> 00:37:26.756 A:middle
produce a CIImage, when you're

00:37:26.756 --> 00:37:27.986 A:middle
done rendering it you call

00:37:27.986 --> 00:37:30.386 A:middle
request.finish and then as a

00:37:30.386 --> 00:37:32.516 A:middle
final step, you export your

00:37:32.516 --> 00:37:34.816 A:middle
AVAsset to a file on disc at the

00:37:34.816 --> 00:37:36.436 A:middle
URL told to you by the

00:37:36.436 --> 00:37:38.316 A:middle
PHContentEditingOutput.

00:37:38.916 --> 00:37:39.996 A:middle
Now here's the important part.

00:37:40.506 --> 00:37:41.946 A:middle
The preset to use is

00:37:41.946 --> 00:37:43.636 A:middle
AVAssetExportPreset

00:37:43.636 --> 00:37:45.796 A:middle
HighestQuality or any of the

00:37:45.796 --> 00:37:47.346 A:middle
existing ones as Erik said,

00:37:47.586 --> 00:37:49.956 A:middle
still compressed to H.264.

00:37:50.196 --> 00:37:51.636 A:middle
Don't use the similarly named

00:37:51.636 --> 00:37:53.496 A:middle
new ones which have HEVC in the

00:37:53.496 --> 00:37:55.116 A:middle
name because you're change

00:37:55.116 --> 00:37:56.726 A:middle
request will fail with an error.

00:37:58.066 --> 00:38:00.956 A:middle
Finally, applying adjustments

00:38:01.066 --> 00:38:03.516 A:middle
using Live Photos, the video

00:38:03.516 --> 00:38:04.656 A:middle
content of Live Photos.

00:38:05.506 --> 00:38:06.916 A:middle
What I'm talking about here is

00:38:06.916 --> 00:38:09.466 A:middle
the moving aspect of a picture

00:38:09.466 --> 00:38:11.356 A:middle
when you either swipe between

00:38:11.356 --> 00:38:12.686 A:middle
photos that were Live Photos or

00:38:12.686 --> 00:38:14.656 A:middle
when you Force Touch on a

00:38:14.656 --> 00:38:15.986 A:middle
picture or swipe between

00:38:16.206 --> 00:38:16.756 A:middle
pictures.

00:38:17.316 --> 00:38:19.206 A:middle
This is the simplest use case as

00:38:19.256 --> 00:38:20.486 A:middle
you never get to deal directly

00:38:20.486 --> 00:38:22.266 A:middle
with the input or output files.

00:38:22.656 --> 00:38:24.506 A:middle
You're passed CIImages and you

00:38:24.506 --> 00:38:25.636 A:middle
produce CIImages.

00:38:26.036 --> 00:38:27.216 A:middle
The encoding is done on your

00:38:27.216 --> 00:38:27.736 A:middle
behalf.

00:38:28.786 --> 00:38:30.186 A:middle
There's a lot of good code to

00:38:30.186 --> 00:38:31.476 A:middle
look at here, but I'm not going

00:38:31.476 --> 00:38:32.546 A:middle
to spend a lot of time on it.

00:38:32.656 --> 00:38:33.756 A:middle
You can pause the video later

00:38:33.756 --> 00:38:35.366 A:middle
and take a good long look at it.

00:38:35.866 --> 00:38:37.346 A:middle
The one take home point is that

00:38:37.596 --> 00:38:38.676 A:middle
after you've filtered each

00:38:38.676 --> 00:38:41.196 A:middle
frame, in a Live Photo movie you

00:38:41.196 --> 00:38:42.576 A:middle
can tell the Live Photo content

00:38:42.626 --> 00:38:44.456 A:middle
to save your Live Photo to a

00:38:44.456 --> 00:38:46.156 A:middle
given URL and that's it.

00:38:46.636 --> 00:38:48.046 A:middle
The Live Photos will be saved

00:38:48.046 --> 00:38:50.556 A:middle
out using H.264 on your behalf

00:38:50.866 --> 00:38:52.806 A:middle
just as the stills will be

00:38:52.886 --> 00:38:55.176 A:middle
encoded as JPEG.

00:38:55.656 --> 00:38:56.806 A:middle
Okay, let's move over to the

00:38:56.806 --> 00:38:58.756 A:middle
common workflows with PhotoKit.

00:38:59.436 --> 00:39:01.296 A:middle
When displaying content from

00:39:01.296 --> 00:39:02.906 A:middle
your photo library, you use an

00:39:02.906 --> 00:39:04.876 A:middle
object called the PHImageManager

00:39:05.286 --> 00:39:08.346 A:middle
and this provides you with one

00:39:08.346 --> 00:39:09.146 A:middle
of three things.

00:39:09.836 --> 00:39:11.776 A:middle
You could get a UIImage if it's

00:39:11.776 --> 00:39:13.826 A:middle
an image, a PlayerItem if it's a

00:39:13.826 --> 00:39:16.346 A:middle
video, or a PHLivePhoto if it's

00:39:16.346 --> 00:39:17.676 A:middle
Live Photo content.

00:39:18.176 --> 00:39:19.386 A:middle
Here you don't need to make any

00:39:19.386 --> 00:39:21.616 A:middle
changes because all of these are

00:39:21.616 --> 00:39:23.466 A:middle
high level abstractions in which

00:39:23.466 --> 00:39:24.786 A:middle
you don't care where the sources

00:39:24.786 --> 00:39:25.966 A:middle
came from, all you're doing is

00:39:25.966 --> 00:39:26.626 A:middle
displaying them.

00:39:26.956 --> 00:39:28.216 A:middle
No code changes needed here.

00:39:29.466 --> 00:39:31.676 A:middle
The next is backup.

00:39:32.026 --> 00:39:33.556 A:middle
When using PhotoKit for backup

00:39:33.626 --> 00:39:35.476 A:middle
purposes, you probably want to

00:39:35.476 --> 00:39:37.746 A:middle
access the raw assets such as

00:39:37.786 --> 00:39:39.096 A:middle
the HEIC files and the QuickTime

00:39:39.096 --> 00:39:39.486 A:middle
movies.

00:39:39.786 --> 00:39:41.156 A:middle
And you do that using

00:39:41.156 --> 00:39:42.606 A:middle
PHAssetResourceManager.

00:39:42.976 --> 00:39:44.286 A:middle
It will give them to you in the

00:39:44.286 --> 00:39:45.086 A:middle
native format.

00:39:45.406 --> 00:39:46.426 A:middle
The only thing to be aware of

00:39:46.426 --> 00:39:48.206 A:middle
here is that you might get

00:39:48.206 --> 00:39:49.596 A:middle
different file types coming than

00:39:49.596 --> 00:39:50.736 A:middle
you're used to, so make sure

00:39:50.736 --> 00:39:52.776 A:middle
that you're ready for it.

00:39:53.626 --> 00:39:54.896 A:middle
The third and most complicated

00:39:54.896 --> 00:39:55.756 A:middle
case is sharing.

00:39:56.716 --> 00:39:58.226 A:middle
Here you're sort of leaving

00:39:58.226 --> 00:39:59.886 A:middle
Apple's nice walled garden.

00:40:00.336 --> 00:40:01.366 A:middle
You have to think about your

00:40:01.366 --> 00:40:02.756 A:middle
compatibility requirements.

00:40:03.116 --> 00:40:04.486 A:middle
Are native assets okay?

00:40:04.636 --> 00:40:06.526 A:middle
You might be doing your clients

00:40:06.526 --> 00:40:07.576 A:middle
a favor or you might be doing

00:40:07.576 --> 00:40:08.956 A:middle
them a disservice by giving them

00:40:08.956 --> 00:40:10.536 A:middle
HEIC content depending on

00:40:10.536 --> 00:40:11.546 A:middle
whether they're ready for it.

00:40:11.936 --> 00:40:12.906 A:middle
So, here you must weigh

00:40:12.906 --> 00:40:14.506 A:middle
compatibility versus the

00:40:14.506 --> 00:40:16.106 A:middle
features that HEIC affords.

00:40:17.216 --> 00:40:19.236 A:middle
If you do choose compatibility

00:40:19.236 --> 00:40:21.006 A:middle
over features, you can ensure

00:40:21.006 --> 00:40:22.346 A:middle
format compatibility by

00:40:22.346 --> 00:40:24.496 A:middle
specifying the output format

00:40:24.496 --> 00:40:25.226 A:middle
explicitly.

00:40:25.366 --> 00:40:27.796 A:middle
For images, you can just check

00:40:27.796 --> 00:40:29.776 A:middle
the UTType that you get, and see

00:40:29.776 --> 00:40:31.876 A:middle
that it conforms to say JPEG,

00:40:31.876 --> 00:40:33.756 A:middle
and if it doesn't, explicitly

00:40:33.756 --> 00:40:34.276 A:middle
convert it.

00:40:34.796 --> 00:40:36.446 A:middle
With videos, you can always

00:40:36.446 --> 00:40:37.686 A:middle
force compatibility by

00:40:37.686 --> 00:40:39.376 A:middle
requesting an export session

00:40:39.656 --> 00:40:41.146 A:middle
with a preset that you know will

00:40:41.146 --> 00:40:43.526 A:middle
deliver H.264 such as

00:40:43.736 --> 00:40:44.976 A:middle
PresetHighestQuality.

00:40:46.236 --> 00:40:48.636 A:middle
All right, onto our last topic

00:40:48.636 --> 00:40:50.156 A:middle
of the day, capturing HEIF.

00:40:50.476 --> 00:40:51.786 A:middle
Finally, one that I know what

00:40:51.786 --> 00:40:52.486 A:middle
I'm talking about.

00:40:53.906 --> 00:40:55.116 A:middle
But let's do compression haiku

00:40:55.116 --> 00:40:56.336 A:middle
number two, please would you let

00:40:56.336 --> 00:40:56.486 A:middle
me?

00:40:57.296 --> 00:40:57.976 A:middle
It's fun for me.

00:40:58.736 --> 00:40:59.106 A:middle
Here we go.

00:41:00.116 --> 00:41:03.886 A:middle
HEIF a container, compresses

00:41:03.926 --> 00:41:08.046 A:middle
four times better than HEVC.

00:41:09.576 --> 00:41:10.656 A:middle
Think about that.

00:41:10.766 --> 00:41:12.686 A:middle
Okay, so, why are we wasting our

00:41:12.686 --> 00:41:14.376 A:middle
lives saying HEVC, it's supposed

00:41:14.376 --> 00:41:15.306 A:middle
to be a good codec right?

00:41:15.306 --> 00:41:15.986 A:middle
Why aren't we calling it

00:41:15.986 --> 00:41:16.376 A:middle
"hevick".

00:41:17.976 --> 00:41:18.786 A:middle
All right.

00:41:19.456 --> 00:41:20.726 A:middle
So, Erik mentioned that

00:41:21.016 --> 00:41:23.256 A:middle
AVCapturePhotoOutput added

00:41:23.256 --> 00:41:25.156 A:middle
support for Live Photo movies

00:41:25.236 --> 00:41:26.446 A:middle
encoded with HEVC.

00:41:27.456 --> 00:41:28.796 A:middle
This class was introduced last

00:41:28.796 --> 00:41:30.426 A:middle
year as the successor to

00:41:30.426 --> 00:41:31.716 A:middle
AVCaptureStillImageOutput.

00:41:32.166 --> 00:41:33.716 A:middle
It excels at handling complex

00:41:33.716 --> 00:41:35.076 A:middle
still image capture requests

00:41:35.076 --> 00:41:36.796 A:middle
where you need multiple assets

00:41:36.796 --> 00:41:38.036 A:middle
delivered over time.

00:41:38.846 --> 00:41:40.126 A:middle
It is currently the only way on

00:41:40.126 --> 00:41:42.076 A:middle
our platform to capture Live

00:41:42.076 --> 00:41:45.966 A:middle
Photos, Bayer RAW images, Apple

00:41:46.046 --> 00:41:49.226 A:middle
P3 Wide Color Images, and new in

00:41:49.326 --> 00:41:50.976 A:middle
iOS 11 it is the only interface

00:41:50.976 --> 00:41:52.506 A:middle
on our platform for capturing

00:41:52.686 --> 00:41:53.786 A:middle
HEIF content.

00:41:56.236 --> 00:41:58.116 A:middle
HEIF capture is supported on the

00:41:58.416 --> 00:42:01.486 A:middle
A10 chip devices which are

00:42:01.486 --> 00:42:03.726 A:middle
iPhone 7 Plus, iPhone 7, and the

00:42:03.726 --> 00:42:05.596 A:middle
newly announced iPad Pros.

00:42:05.696 --> 00:42:08.966 A:middle
We'll do a brief refresher on

00:42:08.966 --> 00:42:10.426 A:middle
how to request and receive

00:42:10.426 --> 00:42:12.136 A:middle
images with the photo output.

00:42:12.496 --> 00:42:15.296 A:middle
First, you fill out an object

00:42:15.296 --> 00:42:17.026 A:middle
called an AVCapturePhotoSettings

00:42:17.026 --> 00:42:18.226 A:middle
this is sort of like a request

00:42:18.226 --> 00:42:19.866 A:middle
object where you specify the

00:42:19.866 --> 00:42:21.406 A:middle
features that you want in your

00:42:21.636 --> 00:42:22.396 A:middle
photo capture.

00:42:22.746 --> 00:42:24.356 A:middle
Here it's the orange box.

00:42:25.066 --> 00:42:26.316 A:middle
Here, I've indicated that I want

00:42:26.496 --> 00:42:29.166 A:middle
auto flash, meaning photo output

00:42:29.166 --> 00:42:30.526 A:middle
only use the flash if it's

00:42:30.526 --> 00:42:32.066 A:middle
necessary, only if the light is

00:42:32.246 --> 00:42:33.506 A:middle
low enough to warrant it.

00:42:34.386 --> 00:42:35.746 A:middle
I've also asked for a preview

00:42:35.746 --> 00:42:37.136 A:middle
sized image to accompany the

00:42:37.136 --> 00:42:38.976 A:middle
full-sized image so that I can

00:42:38.976 --> 00:42:40.306 A:middle
have a quick preview to put on

00:42:40.306 --> 00:42:40.806 A:middle
screen.

00:42:41.366 --> 00:42:42.376 A:middle
I don't know exactly what the

00:42:42.376 --> 00:42:43.996 A:middle
final aspect ratio of it will be

00:42:43.996 --> 00:42:46.146 A:middle
so I just ask for a box that's

00:42:46.146 --> 00:42:48.026 A:middle
1440 by 1440.

00:42:48.876 --> 00:42:50.706 A:middle
I then pass this settings object

00:42:50.706 --> 00:42:52.796 A:middle
with a delegate that I provide

00:42:53.336 --> 00:42:56.346 A:middle
to the photo output to start or

00:42:56.346 --> 00:42:57.846 A:middle
kick off a capture request.

00:43:00.256 --> 00:43:02.596 A:middle
Now the arrow on top shows when

00:43:02.596 --> 00:43:04.816 A:middle
the request was made, and now

00:43:05.346 --> 00:43:07.136 A:middle
I'm sort of tracking this

00:43:07.136 --> 00:43:09.426 A:middle
package delivery, PhotoOutput

00:43:09.506 --> 00:43:11.426 A:middle
calls my delegate back with one

00:43:11.426 --> 00:43:12.776 A:middle
method call at a time.

00:43:13.356 --> 00:43:14.606 A:middle
Very soon after I make the

00:43:14.606 --> 00:43:16.256 A:middle
request the PhotoOutput calls

00:43:16.256 --> 00:43:17.606 A:middle
the delegates first callback

00:43:17.606 --> 00:43:19.976 A:middle
which is willBeginCaptureFor

00:43:20.346 --> 00:43:22.246 A:middle
resolved settings and it passes

00:43:22.246 --> 00:43:24.096 A:middle
you this blue box which is a

00:43:24.096 --> 00:43:25.746 A:middle
ResolvedPhotoSettings.

00:43:26.726 --> 00:43:27.826 A:middle
This is sort of like the

00:43:27.826 --> 00:43:29.046 A:middle
courtesy email that you get

00:43:29.046 --> 00:43:30.056 A:middle
saying we've received your

00:43:30.056 --> 00:43:32.196 A:middle
order, here's what we'll be

00:43:32.196 --> 00:43:32.896 A:middle
sending you.

00:43:33.586 --> 00:43:35.876 A:middle
And this ResolvedPhotoSetting

00:43:35.876 --> 00:43:37.576 A:middle
sort of clears up any ambiguity

00:43:37.576 --> 00:43:39.286 A:middle
that you had in your settings

00:43:39.286 --> 00:43:40.316 A:middle
that you provided at the

00:43:40.316 --> 00:43:40.826 A:middle
beginning.

00:43:41.176 --> 00:43:42.306 A:middle
In this case, we can now see

00:43:42.306 --> 00:43:44.086 A:middle
that flash is not auto, it's

00:43:44.136 --> 00:43:44.916 A:middle
true or false.

00:43:45.286 --> 00:43:47.086 A:middle
So, it's become true, we know

00:43:47.086 --> 00:43:48.346 A:middle
that the flash is going to fire.

00:43:48.836 --> 00:43:50.946 A:middle
Also, we now know what the final

00:43:50.946 --> 00:43:52.486 A:middle
preview image resolution is

00:43:52.486 --> 00:43:53.116 A:middle
going to be.

00:43:55.446 --> 00:43:57.016 A:middle
Finally, after we get the

00:43:57.016 --> 00:43:59.066 A:middle
willBeginCaptureFor, we, our

00:43:59.066 --> 00:44:00.416 A:middle
second call back that we receive

00:44:00.416 --> 00:44:02.296 A:middle
is willCapturePhotoFor

00:44:02.296 --> 00:44:03.206 A:middle
ResolvedSettings.

00:44:03.796 --> 00:44:05.046 A:middle
This is delivered coincident

00:44:05.046 --> 00:44:06.956 A:middle
with the shutter sound being

00:44:06.956 --> 00:44:07.436 A:middle
played.

00:44:08.776 --> 00:44:10.356 A:middle
And then shortly thereafter

00:44:10.586 --> 00:44:12.546 A:middle
comes didCapturePhotoFor

00:44:12.546 --> 00:44:14.246 A:middle
ResolvedSettings just after the

00:44:14.246 --> 00:44:16.006 A:middle
image has been fully exposed and

00:44:16.006 --> 00:44:16.496 A:middle
read out.

00:44:17.816 --> 00:44:19.786 A:middle
Then some time typically passes

00:44:19.786 --> 00:44:21.856 A:middle
while the image or images are

00:44:21.856 --> 00:44:23.476 A:middle
processed, applying all the

00:44:23.476 --> 00:44:24.686 A:middle
features that you asked for.

00:44:25.366 --> 00:44:26.646 A:middle
When the photo is ready, you

00:44:26.646 --> 00:44:27.496 A:middle
receive the

00:44:27.496 --> 00:44:29.546 A:middle
didFinishProcessingPhoto sample

00:44:29.546 --> 00:44:31.776 A:middle
buffer call back and the image

00:44:31.776 --> 00:44:33.496 A:middle
or images are delivered to you.

00:44:33.946 --> 00:44:35.866 A:middle
Here I got the main image, and

00:44:35.866 --> 00:44:36.686 A:middle
the preview image.

00:44:37.076 --> 00:44:38.146 A:middle
They're delivered together in

00:44:38.146 --> 00:44:38.896 A:middle
the same call back.

00:44:39.966 --> 00:44:42.186 A:middle
Finally, you always always

00:44:42.186 --> 00:44:43.256 A:middle
always get the

00:44:43.256 --> 00:44:45.006 A:middle
DidFinishCaptureFor

00:44:45.006 --> 00:44:46.906 A:middle
ResolvedSettings callback.

00:44:47.356 --> 00:44:48.886 A:middle
And that is guaranteed to be

00:44:48.886 --> 00:44:49.656 A:middle
delivered last.

00:44:49.656 --> 00:44:50.946 A:middle
It's the PhotoOutput's way of

00:44:51.146 --> 00:44:52.836 A:middle
saying we're done with this

00:44:52.836 --> 00:44:54.606 A:middle
transaction, pleasure doing

00:44:54.606 --> 00:44:56.466 A:middle
business with you, you can clean

00:44:56.466 --> 00:44:57.316 A:middle
up your delegate now.

00:45:00.076 --> 00:45:02.066 A:middle
This programming model has

00:45:02.066 --> 00:45:03.966 A:middle
proved to be very flexible.

00:45:04.066 --> 00:45:05.336 A:middle
We've had a lot of success with

00:45:05.336 --> 00:45:06.586 A:middle
it because we've been able to

00:45:06.586 --> 00:45:08.646 A:middle
add new methods to the delegate

00:45:08.876 --> 00:45:10.446 A:middle
as needed when we add new

00:45:10.446 --> 00:45:10.996 A:middle
features.

00:45:11.736 --> 00:45:13.396 A:middle
For instance, we added support

00:45:13.396 --> 00:45:14.356 A:middle
for RAW images.

00:45:14.866 --> 00:45:16.166 A:middle
There's a call back for that.

00:45:16.926 --> 00:45:17.906 A:middle
We added support for Live

00:45:17.946 --> 00:45:19.756 A:middle
Photos, there's a separate call

00:45:19.756 --> 00:45:21.276 A:middle
back for that, for getting the

00:45:21.276 --> 00:45:21.646 A:middle
movie.

00:45:22.366 --> 00:45:23.756 A:middle
So, it would seem like HEIF

00:45:23.756 --> 00:45:25.026 A:middle
would be an easy addition to

00:45:25.026 --> 00:45:26.516 A:middle
this very flexible programming

00:45:26.516 --> 00:45:27.046 A:middle
paradigm.

00:45:27.576 --> 00:45:28.946 A:middle
Unfortunately, it's not.

00:45:30.116 --> 00:45:32.366 A:middle
The incompatibility lies in the

00:45:32.366 --> 00:45:34.886 A:middle
CoreMedia SampleBuffer which is

00:45:35.006 --> 00:45:36.416 A:middle
and has been the coin of the

00:45:36.416 --> 00:45:38.086 A:middle
realm in AVFoundation for many

00:45:38.086 --> 00:45:38.696 A:middle
many years.

00:45:39.226 --> 00:45:41.446 A:middle
We have used it for still images

00:45:41.766 --> 00:45:42.816 A:middle
since iOS 4.

00:45:44.436 --> 00:45:45.886 A:middle
It's a thin container for media

00:45:45.886 --> 00:45:47.496 A:middle
data such as video samples,

00:45:47.676 --> 00:45:49.376 A:middle
audio samples, text, closed

00:45:49.376 --> 00:45:50.066 A:middle
captions.

00:45:51.356 --> 00:45:53.606 A:middle
HEIF on the other hand is a file

00:45:53.606 --> 00:45:55.136 A:middle
format, not a media format.

00:45:55.526 --> 00:45:57.026 A:middle
It can hold many media types.

00:45:58.106 --> 00:46:00.256 A:middle
Also, CMSampleBuffers can of

00:46:00.296 --> 00:46:02.546 A:middle
course carry HEVC compressed

00:46:02.546 --> 00:46:05.286 A:middle
video, but that HEV compressed,

00:46:05.286 --> 00:46:06.736 A:middle
HEVC compressed video doesn't

00:46:06.736 --> 00:46:09.146 A:middle
look like the HEIF containerized

00:46:09.146 --> 00:46:09.526 A:middle
HEVC.

00:46:09.926 --> 00:46:11.366 A:middle
Remember, HEIF likes to chop

00:46:11.366 --> 00:46:13.176 A:middle
things up into individual tiles

00:46:13.536 --> 00:46:14.776 A:middle
for quick decode.

00:46:15.236 --> 00:46:17.506 A:middle
You can't store that kind of

00:46:17.506 --> 00:46:20.366 A:middle
HEVC compression in a frame in a

00:46:20.366 --> 00:46:21.526 A:middle
QuickTime movie, it would just

00:46:21.526 --> 00:46:22.646 A:middle
confuse the decoder.

00:46:23.356 --> 00:46:24.236 A:middle
So, at this point, you might be

00:46:24.236 --> 00:46:25.886 A:middle
asking yourself, if we have this

00:46:25.886 --> 00:46:27.826 A:middle
fundamental tension between file

00:46:27.826 --> 00:46:30.086 A:middle
container and media container,

00:46:30.286 --> 00:46:31.796 A:middle
how would we be able to use

00:46:31.866 --> 00:46:33.686 A:middle
CMSampleBuffer for so many years

00:46:33.926 --> 00:46:35.926 A:middle
with photo output and still

00:46:35.926 --> 00:46:36.496 A:middle
image output?

00:46:37.236 --> 00:46:39.356 A:middle
Well the answer is JPEG.

00:46:40.516 --> 00:46:42.016 A:middle
We got away with this because of

00:46:42.016 --> 00:46:43.676 A:middle
the happy coincidence that JPEG,

00:46:44.336 --> 00:46:46.516 A:middle
the image codec, and JFIF the

00:46:46.516 --> 00:46:48.436 A:middle
file format are virtually

00:46:48.436 --> 00:46:49.406 A:middle
indistinguishable from one

00:46:49.406 --> 00:46:49.736 A:middle
another.

00:46:50.206 --> 00:46:51.786 A:middle
Both are acceptable as images,

00:46:52.366 --> 00:46:53.946 A:middle
in another container such as a

00:46:53.946 --> 00:46:54.646 A:middle
QuickTime movie.

00:46:56.026 --> 00:46:58.056 A:middle
So, the answer to our quandary

00:46:58.056 --> 00:46:59.936 A:middle
is to come up with a new purpose

00:46:59.936 --> 00:47:01.826 A:middle
built in-memory wrapper for

00:47:01.826 --> 00:47:03.486 A:middle
image results and we call that

00:47:03.486 --> 00:47:04.666 A:middle
the AVCapturePhoto.

00:47:05.366 --> 00:47:06.746 A:middle
It's our drop-in replacement for

00:47:06.746 --> 00:47:07.766 A:middle
CMSampleBuffer.

00:47:08.596 --> 00:47:10.856 A:middle
It is in fact faster than

00:47:10.856 --> 00:47:12.286 A:middle
CMSampleBuffer because we are

00:47:12.286 --> 00:47:13.936 A:middle
able to optimize delivery of it

00:47:13.936 --> 00:47:15.696 A:middle
across the process boundary from

00:47:15.696 --> 00:47:17.156 A:middle
the media server, so you get

00:47:17.156 --> 00:47:18.436 A:middle
even better performance than you

00:47:18.436 --> 00:47:19.486 A:middle
did in iOS 10.

00:47:20.766 --> 00:47:22.946 A:middle
It's 100 percent immutable like

00:47:22.976 --> 00:47:24.836 A:middle
the, unlike the CMSampleBuffer

00:47:24.836 --> 00:47:26.906 A:middle
so that it's easier to share

00:47:26.906 --> 00:47:28.096 A:middle
between code modules.

00:47:29.206 --> 00:47:30.346 A:middle
It's also backed by

00:47:30.346 --> 00:47:31.606 A:middle
containerized data.

00:47:31.606 --> 00:47:32.756 A:middle
I'm going to talk more about

00:47:32.756 --> 00:47:34.386 A:middle
that in a minute.

00:47:34.576 --> 00:47:35.546 A:middle
Let's talk about some of its

00:47:35.546 --> 00:47:36.306 A:middle
attributes.

00:47:36.896 --> 00:47:38.266 A:middle
It has access to critical

00:47:38.266 --> 00:47:39.676 A:middle
information about the photo such

00:47:39.676 --> 00:47:41.166 A:middle
as the time at which it was

00:47:41.166 --> 00:47:43.786 A:middle
captured, whether or not it's a

00:47:43.786 --> 00:47:46.486 A:middle
RAW, Bayer RAW photo, and for

00:47:46.486 --> 00:47:48.016 A:middle
uncompressed or RAW photos, you

00:47:48.016 --> 00:47:49.426 A:middle
get access to the pixel buffer

00:47:49.426 --> 00:47:49.736 A:middle
data.

00:47:50.746 --> 00:47:52.286 A:middle
Also, side band information

00:47:52.286 --> 00:47:53.836 A:middle
travels with the AVCapturePhoto

00:47:53.836 --> 00:47:56.706 A:middle
too, such as the second smaller

00:47:56.706 --> 00:47:58.376 A:middle
preview image that you can ask

00:47:58.376 --> 00:47:58.646 A:middle
for.

00:47:59.476 --> 00:48:01.666 A:middle
You can also now request a third

00:48:01.906 --> 00:48:04.316 A:middle
image that's even smaller to be

00:48:04.316 --> 00:48:06.246 A:middle
in embedded as a thumbnail in

00:48:06.246 --> 00:48:06.876 A:middle
the container.

00:48:08.706 --> 00:48:10.076 A:middle
An ImageIO property style

00:48:10.076 --> 00:48:11.566 A:middle
metadata dictionary is provided

00:48:11.566 --> 00:48:13.666 A:middle
that can contain Exif, or other

00:48:13.666 --> 00:48:14.796 A:middle
metadata that you've come to

00:48:14.796 --> 00:48:15.206 A:middle
expect.

00:48:16.176 --> 00:48:18.186 A:middle
And with the iPhone 7 Plus dual

00:48:18.186 --> 00:48:20.386 A:middle
camera, you can request that a

00:48:20.386 --> 00:48:22.196 A:middle
depth data map be delivered with

00:48:22.196 --> 00:48:23.676 A:middle
the AVCapturePhoto results as

00:48:23.676 --> 00:48:23.976 A:middle
well.

00:48:25.456 --> 00:48:27.286 A:middle
AVCapturePhoto also provides a

00:48:27.286 --> 00:48:28.876 A:middle
number of convenience accessors

00:48:28.976 --> 00:48:31.036 A:middle
such as a reference to the

00:48:31.036 --> 00:48:32.556 A:middle
resolvedSettings object that we

00:48:32.556 --> 00:48:34.016 A:middle
saw in previous slides.

00:48:34.516 --> 00:48:37.026 A:middle
Also, it gives you easy access

00:48:37.026 --> 00:48:38.776 A:middle
to bookkeeping about the photos.

00:48:38.876 --> 00:48:40.746 A:middle
For instance, if you've fired

00:48:40.746 --> 00:48:42.836 A:middle
off a request for a RAW plus

00:48:42.916 --> 00:48:44.396 A:middle
HEIC, you would expect to get

00:48:44.436 --> 00:48:45.186 A:middle
two photos.

00:48:45.536 --> 00:48:47.196 A:middle
So, the photo count accessor

00:48:47.196 --> 00:48:48.736 A:middle
will tell is this photo one or

00:48:48.736 --> 00:48:49.336 A:middle
photo two?

00:48:50.706 --> 00:48:51.866 A:middle
If this photo is part of a

00:48:51.866 --> 00:48:53.896 A:middle
bracketed capture, such as an

00:48:53.896 --> 00:48:55.436 A:middle
auto exposure bracket of three

00:48:55.436 --> 00:48:57.936 A:middle
or four different EV values, it

00:48:57.936 --> 00:48:59.616 A:middle
can tell you which bracket

00:48:59.616 --> 00:49:00.766 A:middle
settings were applied to this

00:49:00.766 --> 00:49:02.906 A:middle
particular result as well as its

00:49:03.076 --> 00:49:05.406 A:middle
sequence number and whether lens

00:49:05.406 --> 00:49:07.116 A:middle
stabilization was engaged.

00:49:09.156 --> 00:49:11.116 A:middle
AVCapturePhoto also supports

00:49:11.196 --> 00:49:12.336 A:middle
conversions to different

00:49:12.336 --> 00:49:14.386 A:middle
formats, so it's friendly and

00:49:14.386 --> 00:49:16.616 A:middle
able to move to other frameworks

00:49:16.616 --> 00:49:17.746 A:middle
that you would use with image

00:49:17.746 --> 00:49:18.416 A:middle
processing.

00:49:18.906 --> 00:49:20.306 A:middle
First and foremost, it supports

00:49:20.306 --> 00:49:22.036 A:middle
conversions to data

00:49:22.036 --> 00:49:23.546 A:middle
representations if you just want

00:49:23.546 --> 00:49:24.336 A:middle
to write to file.

00:49:24.896 --> 00:49:26.636 A:middle
And it can produce a CGImage of

00:49:26.636 --> 00:49:28.426 A:middle
either the full-size preview or

00:49:28.426 --> 00:49:31.076 A:middle
the -- sorry the full-size photo

00:49:31.076 --> 00:49:31.976 A:middle
or the preview photo.

00:49:32.006 --> 00:49:35.446 A:middle
Now the mechanism for opting in

00:49:35.446 --> 00:49:37.176 A:middle
to get an AVCapturePhoto instead

00:49:37.176 --> 00:49:38.826 A:middle
of a CMSampleBuffer is just that

00:49:38.826 --> 00:49:40.166 A:middle
you need to implement one new

00:49:40.166 --> 00:49:41.816 A:middle
delegate method in your

00:49:41.816 --> 00:49:44.106 A:middle
AVCapture PhotoCapture delegate,

00:49:44.106 --> 00:49:45.096 A:middle
and that's this one here.

00:49:45.506 --> 00:49:46.846 A:middle
It's very simple it just has

00:49:46.846 --> 00:49:47.786 A:middle
three parameters.

00:49:48.146 --> 00:49:49.806 A:middle
It gives you the AVCapturePhoto

00:49:50.306 --> 00:49:51.766 A:middle
and optionally an error.

00:49:52.456 --> 00:49:54.686 A:middle
Now, error or not, you always

00:49:54.686 --> 00:49:56.726 A:middle
get an AVCapturePhoto with as

00:49:56.726 --> 00:49:58.026 A:middle
much information about it as

00:49:58.026 --> 00:49:59.616 A:middle
possible, even if there's no

00:49:59.616 --> 00:50:02.486 A:middle
backing pixel data.

00:50:03.156 --> 00:50:05.296 A:middle
The following two really lengthy

00:50:05.626 --> 00:50:06.906 A:middle
delegate methods have been

00:50:06.906 --> 00:50:09.256 A:middle
deprecated to help steer you

00:50:09.256 --> 00:50:10.526 A:middle
towards the new and better.

00:50:11.396 --> 00:50:14.166 A:middle
We used to have separate call

00:50:14.166 --> 00:50:16.186 A:middle
backs for getting the RAW or the

00:50:16.216 --> 00:50:18.096 A:middle
uncompressed or compressed,

00:50:18.206 --> 00:50:20.266 A:middle
didFinishProcessingPhoto which

00:50:20.266 --> 00:50:21.756 A:middle
would give you a CMSampleBuffer

00:50:21.756 --> 00:50:24.096 A:middle
or didFinishProcessingRawPhoto

00:50:24.096 --> 00:50:24.866 A:middle
which would give you a

00:50:24.866 --> 00:50:25.526 A:middle
SampleBuffer.

00:50:26.246 --> 00:50:28.586 A:middle
You needn't, you needn't use

00:50:28.586 --> 00:50:29.136 A:middle
these anymore.

00:50:29.136 --> 00:50:31.086 A:middle
You can just use the new single

00:50:31.516 --> 00:50:33.036 A:middle
which subsumes both of them into

00:50:33.036 --> 00:50:33.366 A:middle
one.

00:50:33.916 --> 00:50:37.026 A:middle
All right, in iOS 10 we

00:50:37.026 --> 00:50:38.916 A:middle
supported the following formats.

00:50:39.526 --> 00:50:40.856 A:middle
For compression, all you could

00:50:40.856 --> 00:50:41.656 A:middle
get was JPEG.

00:50:42.216 --> 00:50:43.366 A:middle
For uncompressed you had your

00:50:43.366 --> 00:50:45.636 A:middle
choice of two flavors of 420 or

00:50:45.636 --> 00:50:47.846 A:middle
BGRA, and of course we supported

00:50:47.896 --> 00:50:48.546 A:middle
Bayer RAW.

00:50:49.406 --> 00:50:52.186 A:middle
Now, in iOS 11, in addition to

00:50:52.186 --> 00:50:54.496 A:middle
adding HEVC support, we're

00:50:54.496 --> 00:50:55.736 A:middle
adding a new dimension to this

00:50:55.736 --> 00:50:56.186 A:middle
as well.

00:50:56.746 --> 00:50:58.226 A:middle
Every image format that you,

00:50:58.536 --> 00:51:01.436 A:middle
that you request is also backed

00:51:01.436 --> 00:51:03.926 A:middle
by a file container format.

00:51:04.136 --> 00:51:06.106 A:middle
In other words, implicitly,

00:51:06.406 --> 00:51:07.976 A:middle
every image that you capture is

00:51:07.976 --> 00:51:09.086 A:middle
being containerized.

00:51:09.686 --> 00:51:11.746 A:middle
For HEVC the implicit container

00:51:11.746 --> 00:51:16.206 A:middle
is HEIC, for JPEG it's JFIF, for

00:51:16.206 --> 00:51:17.536 A:middle
the uncompressed formats it's

00:51:17.666 --> 00:51:20.066 A:middle
TIFF, and for RAW formats as

00:51:20.066 --> 00:51:21.236 A:middle
before it's DNG.

00:51:21.766 --> 00:51:22.986 A:middle
Now, why would file

00:51:22.986 --> 00:51:24.246 A:middle
containerization be a good

00:51:24.246 --> 00:51:24.616 A:middle
thing?

00:51:25.456 --> 00:51:26.676 A:middle
The answer is performance.

00:51:26.726 --> 00:51:28.336 A:middle
Let me explain using a case

00:51:28.336 --> 00:51:28.626 A:middle
study.

00:51:29.246 --> 00:51:31.176 A:middle
So, here's the old way you would

00:51:31.176 --> 00:51:32.716 A:middle
get a JPEG and write it to disc.

00:51:33.726 --> 00:51:35.456 A:middle
PhotoOutput would deliver you a

00:51:35.456 --> 00:51:37.306 A:middle
SampleBuffer with a full-sized

00:51:37.306 --> 00:51:40.326 A:middle
image and a preview image and it

00:51:40.326 --> 00:51:41.776 A:middle
would attach some metadata to it

00:51:41.776 --> 00:51:42.866 A:middle
such as Exif.

00:51:42.966 --> 00:51:44.466 A:middle
If you wanted to mutate that in

00:51:44.466 --> 00:51:45.756 A:middle
any way, you would have to wait

00:51:45.756 --> 00:51:46.946 A:middle
until it delivered the call back

00:51:47.286 --> 00:51:48.486 A:middle
and then you would get the

00:51:48.486 --> 00:51:50.336 A:middle
attachment that had the Exif,

00:51:50.766 --> 00:51:53.406 A:middle
manipulate it, and re-add it to

00:51:53.406 --> 00:51:54.196 A:middle
the SampleBuffer.

00:51:54.776 --> 00:51:56.026 A:middle
Then when it came time for

00:51:56.026 --> 00:51:57.376 A:middle
writing it to disc, you would

00:51:57.376 --> 00:51:58.646 A:middle
call PhotoOutput's

00:51:59.106 --> 00:52:02.286 A:middle
JPEGDataPhotoRepresentation and

00:52:02.286 --> 00:52:03.416 A:middle
pass it the two buffers.

00:52:04.336 --> 00:52:06.586 A:middle
Outcomes a JPEG data, ready to

00:52:06.586 --> 00:52:07.266 A:middle
write to disc.

00:52:07.846 --> 00:52:09.966 A:middle
While in code it looks simple, a

00:52:09.966 --> 00:52:11.386 A:middle
lot is happening under the hood.

00:52:12.046 --> 00:52:13.616 A:middle
Because we conflated preview

00:52:13.616 --> 00:52:15.266 A:middle
image with embedded thumbnail

00:52:15.266 --> 00:52:16.776 A:middle
image, we had to take something

00:52:16.776 --> 00:52:18.156 A:middle
that was sized for the screen

00:52:18.526 --> 00:52:21.596 A:middle
and scale it down, compress it

00:52:21.596 --> 00:52:23.846 A:middle
to JPEG, incorporate all of your

00:52:23.846 --> 00:52:25.986 A:middle
Exif changes, and rewrite the

00:52:25.986 --> 00:52:26.916 A:middle
full-size image.

00:52:26.976 --> 00:52:29.816 A:middle
So, a lot of scaling and

00:52:29.816 --> 00:52:32.006 A:middle
compression done just because

00:52:32.006 --> 00:52:33.176 A:middle
you wanted to include a

00:52:33.176 --> 00:52:35.366 A:middle
thumbnail with your image and

00:52:35.486 --> 00:52:36.446 A:middle
manipulate a little bit of

00:52:36.446 --> 00:52:37.026 A:middle
metadata.

00:52:37.366 --> 00:52:38.426 A:middle
Not efficient at all.

00:52:38.996 --> 00:52:40.926 A:middle
Now in the new way,

00:52:40.926 --> 00:52:43.676 A:middle
AVCapturePhoto lets you specify

00:52:43.676 --> 00:52:45.596 A:middle
up front what you want in the

00:52:45.596 --> 00:52:46.136 A:middle
container.

00:52:47.106 --> 00:52:48.376 A:middle
If it has enough information to

00:52:48.376 --> 00:52:50.136 A:middle
prepare the file container right

00:52:50.286 --> 00:52:52.266 A:middle
the first time, then it's done

00:52:52.266 --> 00:52:53.426 A:middle
before you ever get the first

00:52:53.426 --> 00:52:53.906 A:middle
call back.

00:52:55.096 --> 00:52:56.166 A:middle
The way you do this is you fill

00:52:56.166 --> 00:52:58.006 A:middle
out some extra features in the

00:52:58.006 --> 00:52:59.106 A:middle
AvCapturePhotoSettings.

00:52:59.576 --> 00:53:00.786 A:middle
This time you can specify in

00:53:00.786 --> 00:53:02.566 A:middle
advance the codec that you want,

00:53:02.566 --> 00:53:04.536 A:middle
and optionally the file type.

00:53:05.526 --> 00:53:07.196 A:middle
You specify metadata that you

00:53:07.196 --> 00:53:08.806 A:middle
would like to add such as GPS

00:53:08.806 --> 00:53:10.036 A:middle
location, you can now do this

00:53:10.066 --> 00:53:11.786 A:middle
before you've even issued the

00:53:11.786 --> 00:53:12.406 A:middle
request.

00:53:12.906 --> 00:53:14.096 A:middle
You can also tell it I would

00:53:14.096 --> 00:53:15.376 A:middle
like an embedded thumbnail and I

00:53:15.376 --> 00:53:19.066 A:middle
would like it using these, these

00:53:19.066 --> 00:53:19.606 A:middle
dimensions.

00:53:21.026 --> 00:53:22.516 A:middle
You then submit your request to

00:53:22.516 --> 00:53:23.836 A:middle
the AVCapturePhotoOutput and

00:53:23.836 --> 00:53:25.546 A:middle
eventually it gives your

00:53:25.546 --> 00:53:28.246 A:middle
delegate an AVCapturePhoto as

00:53:28.616 --> 00:53:29.526 A:middle
its result.

00:53:30.166 --> 00:53:31.906 A:middle
This AVCapturePhoto is backed by

00:53:31.906 --> 00:53:33.146 A:middle
something that's already in a

00:53:33.226 --> 00:53:34.276 A:middle
HEIC container.

00:53:34.776 --> 00:53:36.266 A:middle
It's already been compressed in

00:53:36.266 --> 00:53:36.876 A:middle
tiles.

00:53:37.456 --> 00:53:39.366 A:middle
It's already embedded that

00:53:39.366 --> 00:53:40.636 A:middle
thumbnail image that you asked

00:53:40.636 --> 00:53:41.066 A:middle
it to.

00:53:41.066 --> 00:53:42.956 A:middle
It's already put the metadata in

00:53:42.956 --> 00:53:43.946 A:middle
the correct place.

00:53:44.856 --> 00:53:46.206 A:middle
So, the final call that you

00:53:46.206 --> 00:53:47.926 A:middle
would do to write it to disc

00:53:48.606 --> 00:53:51.646 A:middle
photo.fileDataRepresentation is

00:53:51.646 --> 00:53:52.616 A:middle
much simpler than in the

00:53:52.616 --> 00:53:53.596 A:middle
previous example.

00:53:54.156 --> 00:53:56.246 A:middle
All it's doing is a simple byte

00:53:56.246 --> 00:53:58.846 A:middle
copy to NSData of the backing

00:53:58.846 --> 00:53:59.186 A:middle
store.

00:53:59.816 --> 00:54:01.876 A:middle
No additional compression, or

00:54:01.876 --> 00:54:02.976 A:middle
scaling, or anything.

00:54:03.096 --> 00:54:04.826 A:middle
It's all done in advance.

00:54:05.106 --> 00:54:06.496 A:middle
This is much more efficient and

00:54:06.496 --> 00:54:07.496 A:middle
especially when we're dealing

00:54:07.496 --> 00:54:10.026 A:middle
with HEIF, it's necessary to get

00:54:10.236 --> 00:54:12.026 A:middle
all of the performance of that

00:54:12.026 --> 00:54:13.286 A:middle
great tiling format that I

00:54:13.456 --> 00:54:14.216 A:middle
talked about earlier.

00:54:15.286 --> 00:54:16.986 A:middle
Now, let's switch over to a few

00:54:16.986 --> 00:54:18.556 A:middle
performance considerations with

00:54:18.556 --> 00:54:19.706 A:middle
HEVC and HEIF.

00:54:20.386 --> 00:54:22.346 A:middle
The first is what to do about

00:54:22.346 --> 00:54:24.026 A:middle
photos that are taken during

00:54:24.026 --> 00:54:24.926 A:middle
still capture.

00:54:26.406 --> 00:54:28.246 A:middle
When you take a HEIC photo while

00:54:28.246 --> 00:54:30.016 A:middle
capturing a movie, you should be

00:54:30.016 --> 00:54:31.736 A:middle
aware that the same hardware

00:54:31.736 --> 00:54:33.336 A:middle
block that's compressing video,

00:54:33.336 --> 00:54:35.596 A:middle
that is the one that does H.264

00:54:35.596 --> 00:54:38.456 A:middle
or HEVC compression, is also

00:54:38.456 --> 00:54:40.416 A:middle
being asked to do double duty if

00:54:40.416 --> 00:54:43.156 A:middle
you want to encode a HEIC file

00:54:43.366 --> 00:54:45.056 A:middle
where HEVC is the compression

00:54:45.056 --> 00:54:45.476 A:middle
format.

00:54:46.376 --> 00:54:48.636 A:middle
That hardware block may be very

00:54:48.636 --> 00:54:50.486 A:middle
busy indeed if you are capturing

00:54:50.486 --> 00:54:52.346 A:middle
high-bandwidth video such as 4k

00:54:52.346 --> 00:54:54.216 A:middle
30 or 1080p 60.

00:54:55.366 --> 00:54:56.726 A:middle
Video is on a real-time

00:54:56.726 --> 00:54:58.706 A:middle
deadline, so it gets priority

00:54:58.906 --> 00:54:59.546 A:middle
over stills.

00:55:00.096 --> 00:55:01.196 A:middle
This means that it may take

00:55:01.196 --> 00:55:02.756 A:middle
longer to get your still results

00:55:02.756 --> 00:55:05.426 A:middle
back and it also may mean that

00:55:05.426 --> 00:55:06.626 A:middle
there are up to 20 percent

00:55:06.626 --> 00:55:07.896 A:middle
larger than they would be

00:55:07.896 --> 00:55:09.766 A:middle
otherwise because the encoder is

00:55:09.766 --> 00:55:11.096 A:middle
too busy to use all of the

00:55:11.096 --> 00:55:12.536 A:middle
features that it would if it

00:55:12.536 --> 00:55:13.586 A:middle
didn't have to meet that

00:55:13.586 --> 00:55:15.366 A:middle
real-time deadline for 30 or 60

00:55:15.366 --> 00:55:16.116 A:middle
frames a second.

00:55:16.646 --> 00:55:18.566 A:middle
So, our recommendation is if

00:55:18.566 --> 00:55:20.186 A:middle
you're capturing video, and

00:55:20.186 --> 00:55:22.776 A:middle
taking stills at the same time,

00:55:22.776 --> 00:55:23.926 A:middle
you should use JPEG for the

00:55:23.926 --> 00:55:26.676 A:middle
photos to leave the encoder for

00:55:26.676 --> 00:55:29.046 A:middle
HEVC as available as possible

00:55:29.046 --> 00:55:29.656 A:middle
for the video.

00:55:32.296 --> 00:55:34.946 A:middle
Another concern is HEVC and HEIF

00:55:35.026 --> 00:55:35.766 A:middle
bursts.

00:55:36.096 --> 00:55:37.726 A:middle
This is where you mash on the

00:55:37.726 --> 00:55:40.506 A:middle
button and you're trying to get

00:55:40.506 --> 00:55:41.986 A:middle
a constant frame rate maybe 10

00:55:41.986 --> 00:55:44.826 A:middle
frames a second of capture

00:55:44.826 --> 00:55:45.326 A:middle
images.

00:55:46.236 --> 00:55:47.976 A:middle
HEVC encode obviously is doing a

00:55:47.976 --> 00:55:49.416 A:middle
lot more work than JPEG did,

00:55:49.916 --> 00:55:51.416 A:middle
it's delivering a file that's

00:55:51.856 --> 00:55:53.856 A:middle
less half the size of JPEG.

00:55:54.276 --> 00:55:56.086 A:middle
Therefore, HEVC encode does take

00:55:56.086 --> 00:55:56.556 A:middle
longer.

00:55:57.366 --> 00:55:59.286 A:middle
Now we've benchmarked and we're

00:55:59.286 --> 00:56:03.266 A:middle
comfortable that HEVC HEIF can

00:56:03.266 --> 00:56:07.666 A:middle
meet the 10 fps minimum

00:56:07.666 --> 00:56:09.806 A:middle
requirement for bursts, but if

00:56:09.806 --> 00:56:11.356 A:middle
you need to capture at a higher

00:56:11.356 --> 00:56:12.636 A:middle
frame rate than that, our

00:56:12.636 --> 00:56:14.346 A:middle
recommendation is to go back to

00:56:14.346 --> 00:56:15.406 A:middle
JPEG for bursts.

00:56:15.936 --> 00:56:18.766 A:middle
And we've heard a lot about

00:56:18.766 --> 00:56:20.346 A:middle
compression today and I feel I

00:56:20.346 --> 00:56:21.716 A:middle
would remiss if I didn't give

00:56:21.716 --> 00:56:24.386 A:middle
you my thoughts on WWDC.

00:56:24.446 --> 00:56:26.946 A:middle
It is after all a compression

00:56:26.946 --> 00:56:27.296 A:middle
talk.

00:56:28.006 --> 00:56:29.936 A:middle
So, I can't just leave this

00:56:30.116 --> 00:56:30.866 A:middle
dangling there.

00:56:31.846 --> 00:56:33.806 A:middle
World Wide Developer Conference,

00:56:34.636 --> 00:56:35.666 A:middle
nine syllables.

00:56:36.796 --> 00:56:40.466 A:middle
W-W-D-C, eight syllables.

00:56:41.086 --> 00:56:42.776 A:middle
That is like the worst

00:56:42.776 --> 00:56:44.026 A:middle
compression format ever.

00:56:44.086 --> 00:56:47.916 A:middle
It's lossy, it's like .1 to 1

00:56:47.916 --> 00:56:49.186 A:middle
compression ratio, which is even

00:56:49.186 --> 00:56:50.296 A:middle
worse than lossless JPEG.

00:56:51.026 --> 00:56:53.236 A:middle
So, please as a service to me,

00:56:53.626 --> 00:56:55.256 A:middle
for the rest of the conference,

00:56:55.296 --> 00:56:56.706 A:middle
which you please only refer to

00:56:56.706 --> 00:56:59.386 A:middle
conference as Dub-Dub or

00:56:59.576 --> 00:57:00.356 A:middle
Wuh-Duck.

00:57:00.356 --> 00:57:03.916 A:middle
[laughter] All right.

00:57:04.036 --> 00:57:05.106 A:middle
Let's summarize what we learned

00:57:05.106 --> 00:57:05.356 A:middle
today.

00:57:06.796 --> 00:57:09.116 A:middle
HEVC movies are up to 40 percent

00:57:09.116 --> 00:57:10.726 A:middle
smaller for general content than

00:57:10.726 --> 00:57:13.226 A:middle
H.264 and for camera content on

00:57:13.226 --> 00:57:15.456 A:middle
iOS they are 2x smaller.

00:57:16.166 --> 00:57:18.106 A:middle
Also, HEVC playback is supported

00:57:18.106 --> 00:57:20.226 A:middle
everywhere on iOS 11 and High

00:57:20.226 --> 00:57:22.276 A:middle
Sierra, sometimes with software

00:57:22.436 --> 00:57:23.516 A:middle
sometimes with hardware.

00:57:24.186 --> 00:57:26.366 A:middle
And to create HEVC content you

00:57:26.366 --> 00:57:28.496 A:middle
need to opt in to new capture

00:57:28.496 --> 00:57:30.396 A:middle
APIs or new export APIs.

00:57:30.876 --> 00:57:32.266 A:middle
Also, we learned about HEIC

00:57:32.266 --> 00:57:34.606 A:middle
files that they are twice as

00:57:34.606 --> 00:57:37.836 A:middle
small as JPEGs and that decode

00:57:37.836 --> 00:57:39.616 A:middle
is supported everywhere on iOS

00:57:39.616 --> 00:57:42.246 A:middle
11 and macOS where capture is

00:57:42.246 --> 00:57:45.396 A:middle
supported iOS only and where we

00:57:45.396 --> 00:57:47.066 A:middle
have an A10 chip, and you do

00:57:47.066 --> 00:57:47.786 A:middle
that using the new

00:57:47.786 --> 00:57:49.526 A:middle
AVCapturePhoto interface.

00:57:50.046 --> 00:57:52.856 A:middle
For more information, here is

00:57:52.996 --> 00:57:54.526 A:middle
the URL for today's session.

00:57:55.836 --> 00:57:57.496 A:middle
I also wanted to point you to

00:57:57.496 --> 00:57:58.876 A:middle
some sister sessions to this

00:57:58.876 --> 00:58:00.686 A:middle
one, the first one in the list

00:58:00.886 --> 00:58:02.266 A:middle
High Efficiency Image File

00:58:02.266 --> 00:58:03.866 A:middle
Format is one that went straight

00:58:03.866 --> 00:58:04.456 A:middle
to video.

00:58:04.996 --> 00:58:06.256 A:middle
This is where we really delve

00:58:06.256 --> 00:58:09.596 A:middle
deeply into the bits in the HEIF

00:58:09.596 --> 00:58:09.986 A:middle
file.

00:58:10.436 --> 00:58:11.726 A:middle
It's a great, great

00:58:12.206 --> 00:58:13.006 A:middle
presentation.

00:58:13.006 --> 00:58:14.136 A:middle
You should definitely listen to

00:58:14.136 --> 00:58:14.286 A:middle
it.

00:58:14.636 --> 00:58:16.086 A:middle
It's performed by Davide so you

00:58:16.086 --> 00:58:17.336 A:middle
get the nice Italian accent

00:58:17.336 --> 00:58:18.456 A:middle
going at the same time.

00:58:19.456 --> 00:58:21.366 A:middle
Also, the Introducing HEIF and

00:58:21.366 --> 00:58:23.016 A:middle
HEVC which was one Tuesday,

00:58:23.286 --> 00:58:25.136 A:middle
which gave a higher-level

00:58:25.306 --> 00:58:26.776 A:middle
introduction to what we talked

00:58:26.776 --> 00:58:27.346 A:middle
about today.

00:58:27.716 --> 00:58:29.246 A:middle
And finally, the depth sessions

00:58:29.246 --> 00:58:30.206 A:middle
that I've made several

00:58:30.206 --> 00:58:31.926 A:middle
references to, they have several

00:58:31.926 --> 00:58:33.466 A:middle
segues to the auxiliary image

00:58:33.466 --> 00:58:34.856 A:middle
format that we use to store

00:58:35.516 --> 00:58:36.756 A:middle
depth in HEIF.

00:58:37.996 --> 00:58:39.446 A:middle
Thank you and enjoy the rest of

00:58:39.446 --> 00:58:39.746 A:middle
the show.

00:58:40.516 --> 00:58:44.500 A:middle
[ Applause ]