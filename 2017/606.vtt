WEBVTT

00:00:23.066 --> 00:00:23.696 A:middle
&gt;&gt; Good Morning [applause].

00:00:25.036 --> 00:00:27.876 A:middle
Thank you, and welcome to What's

00:00:27.876 --> 00:00:29.496 A:middle
New in Screen Recording and Live

00:00:29.496 --> 00:00:30.046 A:middle
Broadcast.

00:00:30.576 --> 00:00:32.336 A:middle
My name is Johnny Trenh, I'm a

00:00:32.336 --> 00:00:33.506 A:middle
software engineer at Apple

00:00:33.676 --> 00:00:34.796 A:middle
working on a ReplayKit team.

00:00:35.966 --> 00:00:37.926 A:middle
Today, my teammate Alexander

00:00:37.996 --> 00:00:39.776 A:middle
Subbotin and I are really

00:00:39.776 --> 00:00:41.646 A:middle
excited to talk to you about all

00:00:41.646 --> 00:00:42.826 A:middle
the new upcoming features we

00:00:42.826 --> 00:00:44.276 A:middle
have planned for ReplayKit this

00:00:44.276 --> 00:00:44.426 A:middle
year.

00:00:45.666 --> 00:00:46.866 A:middle
We've got a lot to discuss, so

00:00:46.866 --> 00:00:47.956 A:middle
let's go ahead and get started.

00:00:50.616 --> 00:00:52.896 A:middle
ReplayKit is a framework that

00:00:52.896 --> 00:00:54.686 A:middle
allows developers to record

00:00:54.686 --> 00:00:57.476 A:middle
their applications audio, video,

00:00:57.786 --> 00:00:59.756 A:middle
and microphone content to a

00:00:59.756 --> 00:01:01.546 A:middle
movie file that their users can

00:01:01.546 --> 00:01:04.706 A:middle
then review, edit, save, or

00:01:04.706 --> 00:01:05.566 A:middle
share with the rest of the

00:01:05.566 --> 00:01:05.836 A:middle
world.

00:01:08.286 --> 00:01:10.326 A:middle
ReplayKit also supports Live

00:01:10.326 --> 00:01:10.966 A:middle
Broadcast.

00:01:11.546 --> 00:01:12.956 A:middle
For applications generating

00:01:12.956 --> 00:01:15.446 A:middle
content, ReplayKit provides you

00:01:15.446 --> 00:01:17.476 A:middle
with all the tools necessary to

00:01:17.476 --> 00:01:19.346 A:middle
stream your application's audio,

00:01:19.346 --> 00:01:21.996 A:middle
video, and microphone content to

00:01:21.996 --> 00:01:23.046 A:middle
a broadcast extension.

00:01:24.456 --> 00:01:25.846 A:middle
For applications implementing a

00:01:25.846 --> 00:01:28.416 A:middle
broadcast extension, ReplayKit

00:01:28.416 --> 00:01:30.136 A:middle
comes equipped with easy to use

00:01:30.136 --> 00:01:31.986 A:middle
Xcode templates that will help

00:01:31.986 --> 00:01:33.746 A:middle
your application stream

00:01:33.836 --> 00:01:37.576 A:middle
ReplayKit content.

00:01:37.666 --> 00:01:39.856 A:middle
ReplayKit records both audio and

00:01:39.856 --> 00:01:42.016 A:middle
video in HD quality with

00:01:42.016 --> 00:01:43.886 A:middle
low-performance impact and

00:01:43.926 --> 00:01:45.116 A:middle
minimal power usage.

00:01:46.126 --> 00:01:47.826 A:middle
Privacy is a very big thing with

00:01:47.826 --> 00:01:50.396 A:middle
us, so both recording and

00:01:50.396 --> 00:01:51.946 A:middle
broadcasting comes equipped with

00:01:52.026 --> 00:01:54.056 A:middle
privacy safeguards such as user

00:01:54.056 --> 00:01:55.806 A:middle
consent as well as all

00:01:55.806 --> 00:01:57.676 A:middle
recordings and samples that

00:01:57.676 --> 00:01:58.646 A:middle
exclude system UI.

00:02:01.286 --> 00:02:02.956 A:middle
Since the release of ReplayKit,

00:02:02.956 --> 00:02:04.486 A:middle
we have seen some amazing

00:02:04.486 --> 00:02:06.026 A:middle
adoption from developers all

00:02:06.026 --> 00:02:06.926 A:middle
around the world.

00:02:07.836 --> 00:02:09.396 A:middle
Applications like Galaxy on

00:02:09.396 --> 00:02:11.886 A:middle
Fire, Vainglory, Call of

00:02:11.886 --> 00:02:14.186 A:middle
Champions, and Modern Combat 5,

00:02:14.496 --> 00:02:16.716 A:middle
are all using ReplayKit today to

00:02:16.716 --> 00:02:18.466 A:middle
record and broadcast their

00:02:18.466 --> 00:02:20.296 A:middle
users' experiences with the rest

00:02:20.296 --> 00:02:20.716 A:middle
of the world.

00:02:23.606 --> 00:02:25.356 A:middle
Last year we introduced Live

00:02:25.356 --> 00:02:26.586 A:middle
Broadcast with ReplayKit.

00:02:26.766 --> 00:02:28.356 A:middle
And we are proud to say that

00:02:28.356 --> 00:02:30.116 A:middle
ReplayKit now powers some of the

00:02:30.116 --> 00:02:31.786 A:middle
industry leaders in mobile

00:02:31.786 --> 00:02:32.166 A:middle
streaming.

00:02:33.796 --> 00:02:36.496 A:middle
The support adoption and

00:02:36.536 --> 00:02:37.556 A:middle
feedback we've received from

00:02:37.556 --> 00:02:39.056 A:middle
developers has been amazing.

00:02:39.866 --> 00:02:41.036 A:middle
That is why this year we're

00:02:41.166 --> 00:02:42.376 A:middle
really happy to introduce

00:02:43.886 --> 00:02:44.676 A:middle
ReplayKit 2.

00:02:45.816 --> 00:02:47.956 A:middle
With ReplayKit 2, our goal is to

00:02:47.956 --> 00:02:49.906 A:middle
bring ReplayKit to every user

00:02:50.126 --> 00:02:51.516 A:middle
and every application.

00:02:52.616 --> 00:02:54.306 A:middle
We've designed our new features

00:02:54.336 --> 00:02:55.976 A:middle
to take ReplayKit beyond just

00:02:55.976 --> 00:02:58.466 A:middle
gaming, enabling all developers

00:02:58.546 --> 00:03:00.866 A:middle
to record and broadcast their

00:03:00.866 --> 00:03:02.576 A:middle
users' experiences to the whole

00:03:02.576 --> 00:03:02.956 A:middle
world.

00:03:03.476 --> 00:03:05.946 A:middle
And to do that, the first thing

00:03:05.946 --> 00:03:08.486 A:middle
I want to talk about is In-App

00:03:08.486 --> 00:03:09.196 A:middle
Screen Capture.

00:03:10.506 --> 00:03:12.006 A:middle
Look, we've already seen the

00:03:12.006 --> 00:03:13.826 A:middle
amazing content your users have

00:03:13.826 --> 00:03:15.086 A:middle
been creating with ReplayKit.

00:03:16.326 --> 00:03:17.666 A:middle
With ReplayKit 2, we're

00:03:17.666 --> 00:03:19.636 A:middle
introducing In-App Screen

00:03:19.636 --> 00:03:21.506 A:middle
Capture, which is a powerful new

00:03:21.506 --> 00:03:23.586 A:middle
API that's going to give you

00:03:23.826 --> 00:03:25.426 A:middle
direct access to your

00:03:25.426 --> 00:03:28.316 A:middle
application's own audio, video,

00:03:28.436 --> 00:03:30.196 A:middle
and microphone content straight

00:03:30.196 --> 00:03:30.906 A:middle
from ReplayKit.

00:03:31.416 --> 00:03:35.636 A:middle
Our goal with ReplayKit 2 was to

00:03:35.636 --> 00:03:36.976 A:middle
bring ReplayKit to every

00:03:36.976 --> 00:03:37.626 A:middle
application.

00:03:38.506 --> 00:03:40.026 A:middle
And to do that we're making

00:03:40.026 --> 00:03:42.086 A:middle
ReplayKit instantly available to

00:03:42.086 --> 00:03:43.826 A:middle
every application on iOS.

00:03:44.736 --> 00:03:47.096 A:middle
Previously, to use ReplayKit and

00:03:47.096 --> 00:03:48.746 A:middle
to have a application using

00:03:48.746 --> 00:03:50.646 A:middle
ReplayKit, you'd have to use our

00:03:50.646 --> 00:03:50.926 A:middle
API.

00:03:51.566 --> 00:03:54.936 A:middle
But now, users can record and

00:03:54.936 --> 00:03:57.376 A:middle
broadcast their entire iOS

00:03:57.376 --> 00:03:59.326 A:middle
screen experience straight from

00:03:59.326 --> 00:04:00.736 A:middle
the new screen recording control

00:04:00.906 --> 00:04:03.856 A:middle
found in Control Center.

00:04:04.026 --> 00:04:06.006 A:middle
Also new with ReplayKit 2 is the

00:04:06.006 --> 00:04:08.186 A:middle
ability to pair your application

00:04:08.366 --> 00:04:09.876 A:middle
with a particular streaming

00:04:09.876 --> 00:04:10.376 A:middle
service.

00:04:11.696 --> 00:04:14.636 A:middle
Developers can now seamlessly

00:04:14.636 --> 00:04:16.296 A:middle
integrate their entire streaming

00:04:16.296 --> 00:04:17.896 A:middle
solution right from within their

00:04:17.896 --> 00:04:18.626 A:middle
own application.

00:04:20.676 --> 00:04:22.826 A:middle
Last year, we introduced front

00:04:22.826 --> 00:04:24.116 A:middle
camera support for ReplayKit.

00:04:24.896 --> 00:04:26.906 A:middle
This year with ReplayKit 2 we're

00:04:26.906 --> 00:04:28.306 A:middle
introducing Fast Camera

00:04:28.306 --> 00:04:29.826 A:middle
Switching, which is going to

00:04:29.826 --> 00:04:31.516 A:middle
enable you to use both the front

00:04:31.786 --> 00:04:33.486 A:middle
and rear cameras for additional

00:04:33.486 --> 00:04:33.976 A:middle
video commentary.

00:04:36.456 --> 00:04:37.906 A:middle
We've got a lot of new and

00:04:37.906 --> 00:04:39.056 A:middle
exciting things to talk about.

00:04:39.056 --> 00:04:40.126 A:middle
So, I'm just going to go ahead

00:04:40.126 --> 00:04:42.526 A:middle
and jump right in with In-App

00:04:42.526 --> 00:04:43.206 A:middle
Screen Capture.

00:04:44.616 --> 00:04:46.036 A:middle
In-App Screen Capture is a

00:04:46.126 --> 00:04:48.226 A:middle
powerful new API that's going to

00:04:48.226 --> 00:04:50.496 A:middle
give you direct access to your

00:04:50.536 --> 00:04:53.236 A:middle
application's own audio, video,

00:04:53.556 --> 00:04:55.156 A:middle
and microphone content straight

00:04:55.156 --> 00:04:55.846 A:middle
from ReplayKit.

00:04:56.926 --> 00:04:58.786 A:middle
This new API is going to open

00:04:58.786 --> 00:05:00.496 A:middle
doors to new user experiences

00:05:00.496 --> 00:05:01.906 A:middle
that just weren't possible

00:05:01.906 --> 00:05:02.276 A:middle
before.

00:05:03.256 --> 00:05:05.086 A:middle
But, before we get into In-App

00:05:05.086 --> 00:05:06.346 A:middle
Screen Capture, let's go ahead

00:05:06.346 --> 00:05:07.316 A:middle
and take a look at how

00:05:08.006 --> 00:05:09.756 A:middle
applications are currently using

00:05:09.756 --> 00:05:11.096 A:middle
ReplayKit to handle recording.

00:05:14.056 --> 00:05:15.236 A:middle
An application that's currently

00:05:15.236 --> 00:05:17.326 A:middle
using ReplayKit will call in to

00:05:17.326 --> 00:05:18.526 A:middle
RPScreenRecorder to get the

00:05:18.526 --> 00:05:19.886 A:middle
shared recorder instance.

00:05:20.536 --> 00:05:22.886 A:middle
From there, you'll call start

00:05:22.886 --> 00:05:24.686 A:middle
recording onto shared recorder

00:05:24.686 --> 00:05:26.696 A:middle
instance, at which time the

00:05:26.696 --> 00:05:27.916 A:middle
replay daemon will start to

00:05:27.916 --> 00:05:29.436 A:middle
capture your application's

00:05:29.436 --> 00:05:31.586 A:middle
audio, video, and microphone

00:05:31.586 --> 00:05:33.886 A:middle
content, and create and manage a

00:05:33.886 --> 00:05:35.106 A:middle
movie file just for your

00:05:35.106 --> 00:05:35.656 A:middle
application.

00:05:37.436 --> 00:05:39.156 A:middle
When you call stop recording on

00:05:39.156 --> 00:05:40.356 A:middle
a shared recorder instance,

00:05:40.766 --> 00:05:42.176 A:middle
replay daemon will communicate

00:05:42.176 --> 00:05:43.476 A:middle
with a share and preview

00:05:43.476 --> 00:05:45.776 A:middle
extension and instantiate an

00:05:45.776 --> 00:05:47.126 A:middle
RPPreviewViewController.

00:05:47.976 --> 00:05:48.666 A:middle
We'll pass that

00:05:48.666 --> 00:05:50.296 A:middle
RPPreviewViewController back to

00:05:50.296 --> 00:05:51.626 A:middle
your application so that you can

00:05:51.626 --> 00:05:52.886 A:middle
present it to your users,

00:05:53.326 --> 00:05:55.706 A:middle
allowing them to review, edit,

00:05:55.776 --> 00:05:57.116 A:middle
save, or share the recording

00:05:57.116 --> 00:05:58.236 A:middle
they just made in your

00:05:58.236 --> 00:05:58.806 A:middle
application.

00:06:01.616 --> 00:06:02.716 A:middle
With a new In-App Screen

00:06:02.716 --> 00:06:04.186 A:middle
Capture, just like with

00:06:04.186 --> 00:06:06.036 A:middle
recording, you're going to call

00:06:06.036 --> 00:06:07.266 A:middle
into RPScreenRecorder to get the

00:06:07.266 --> 00:06:08.536 A:middle
share recorder instance.

00:06:09.276 --> 00:06:11.036 A:middle
From there, you'll call start

00:06:11.036 --> 00:06:12.236 A:middle
capture on the share recorder

00:06:12.236 --> 00:06:13.746 A:middle
instance, at which point the

00:06:13.746 --> 00:06:15.186 A:middle
replay daemon will start to

00:06:15.186 --> 00:06:16.706 A:middle
capture your application's

00:06:16.706 --> 00:06:19.096 A:middle
audio, video, and microphone

00:06:19.096 --> 00:06:19.526 A:middle
content.

00:06:20.076 --> 00:06:22.136 A:middle
But instead of creating and

00:06:22.136 --> 00:06:23.716 A:middle
managing a movie file just for

00:06:23.716 --> 00:06:25.866 A:middle
your application, ReplayKit will

00:06:25.866 --> 00:06:27.366 A:middle
send those audio and video

00:06:27.366 --> 00:06:28.896 A:middle
samples right back up to

00:06:28.896 --> 00:06:29.736 A:middle
RPScreenRecorder.

00:06:30.346 --> 00:06:33.826 A:middle
A capture handler block is then

00:06:33.826 --> 00:06:35.406 A:middle
called, and we'll send the audio

00:06:35.406 --> 00:06:37.116 A:middle
and video samples, right back to

00:06:37.116 --> 00:06:38.446 A:middle
your application's process.

00:06:39.706 --> 00:06:41.926 A:middle
Your application now has direct

00:06:41.926 --> 00:06:44.786 A:middle
access to its own audio, video,

00:06:44.936 --> 00:06:46.556 A:middle
and microphone samples straight

00:06:46.556 --> 00:06:47.256 A:middle
from ReplayKit.

00:06:49.376 --> 00:06:51.366 A:middle
Giving you direct access to your

00:06:51.366 --> 00:06:52.936 A:middle
application's audio and video

00:06:52.936 --> 00:06:54.346 A:middle
samples from ReplayKit will

00:06:54.346 --> 00:06:55.456 A:middle
provide you with more

00:06:55.456 --> 00:06:58.096 A:middle
flexibility and control over the

00:06:58.096 --> 00:07:00.126 A:middle
content your users are already

00:07:00.126 --> 00:07:00.546 A:middle
creating.

00:07:01.806 --> 00:07:03.636 A:middle
Just like with recording, In-App

00:07:03.636 --> 00:07:05.216 A:middle
Screen Capture captures audio

00:07:05.576 --> 00:07:08.226 A:middle
and video in HD quality, with

00:07:08.226 --> 00:07:10.166 A:middle
low-performance impact and

00:07:10.166 --> 00:07:11.206 A:middle
minimal power usage.

00:07:12.296 --> 00:07:14.186 A:middle
Again, privacy is a very big

00:07:14.186 --> 00:07:16.166 A:middle
thing with us, so In-App Screen

00:07:16.166 --> 00:07:17.386 A:middle
Capture comes equipped with

00:07:17.386 --> 00:07:19.466 A:middle
privacy safeguards such as user

00:07:19.466 --> 00:07:21.736 A:middle
consent as well as all samples

00:07:21.736 --> 00:07:22.816 A:middle
excluding system UI.

00:07:24.656 --> 00:07:26.696 A:middle
The API is simple and

00:07:26.696 --> 00:07:27.096 A:middle
lightweight.

00:07:27.216 --> 00:07:28.316 A:middle
So, let's go ahead and take a

00:07:28.316 --> 00:07:30.606 A:middle
quick look at it.

00:07:30.876 --> 00:07:32.766 A:middle
StartCapture takes in two

00:07:32.766 --> 00:07:34.786 A:middle
blocks, a captureHandler block

00:07:35.026 --> 00:07:36.476 A:middle
and a completionHandler block.

00:07:37.866 --> 00:07:39.246 A:middle
The captureHandler block is

00:07:39.246 --> 00:07:41.196 A:middle
called every time ReplayKit is

00:07:41.196 --> 00:07:42.566 A:middle
ready to hand your application

00:07:42.566 --> 00:07:43.506 A:middle
back a sample.

00:07:44.386 --> 00:07:45.236 A:middle
We provide you with a

00:07:45.236 --> 00:07:46.926 A:middle
CMSampleBuffer ref an

00:07:46.926 --> 00:07:49.356 A:middle
RPSampleBufferType and an NS

00:07:49.356 --> 00:07:49.596 A:middle
Error.

00:07:50.696 --> 00:07:52.166 A:middle
The completion handler block is

00:07:52.166 --> 00:07:53.936 A:middle
called when startCapture has

00:07:53.936 --> 00:07:55.846 A:middle
completed and will give you an

00:07:55.846 --> 00:07:57.306 A:middle
NS Error indicating to you

00:07:57.306 --> 00:07:58.496 A:middle
whether or not an error has

00:07:58.496 --> 00:08:00.046 A:middle
occurred during startCapture.

00:08:01.286 --> 00:08:02.886 A:middle
The stopCapture also takes in a

00:08:02.886 --> 00:08:04.076 A:middle
completionHandler which will

00:08:04.076 --> 00:08:05.616 A:middle
also pass you back and NS Error

00:08:05.966 --> 00:08:07.696 A:middle
indicating to you whether or not

00:08:07.696 --> 00:08:08.626 A:middle
an error has occurred during

00:08:08.626 --> 00:08:09.366 A:middle
stopCapture.

00:08:10.566 --> 00:08:11.566 A:middle
Let's go ahead and take a look

00:08:11.566 --> 00:08:12.446 A:middle
at how we can use this in

00:08:12.446 --> 00:08:12.976 A:middle
practice.

00:08:15.106 --> 00:08:16.476 A:middle
Here, in our example, what I

00:08:16.476 --> 00:08:18.256 A:middle
want to do is I want to take the

00:08:18.256 --> 00:08:19.656 A:middle
samples that ReplayKit has given

00:08:19.656 --> 00:08:21.576 A:middle
me and I want to use it to write

00:08:21.576 --> 00:08:23.126 A:middle
a simple movie file to disc

00:08:23.276 --> 00:08:24.436 A:middle
using AVAssetWriter.

00:08:25.126 --> 00:08:27.026 A:middle
So, here I have method called

00:08:27.026 --> 00:08:28.226 A:middle
didPressCaptureButton.

00:08:28.736 --> 00:08:30.326 A:middle
Inside of it, I'm simply going

00:08:30.326 --> 00:08:31.656 A:middle
to grab the sharedRecorder

00:08:31.656 --> 00:08:33.266 A:middle
instance from RPScreenRecorder.

00:08:33.956 --> 00:08:35.416 A:middle
From there, I'll call

00:08:35.416 --> 00:08:37.266 A:middle
startCapture providing it a

00:08:37.266 --> 00:08:38.746 A:middle
capture handler block and a

00:08:38.746 --> 00:08:39.726 A:middle
completion handler block.

00:08:40.616 --> 00:08:41.936 A:middle
Remember, I'm trying to write a

00:08:41.936 --> 00:08:43.646 A:middle
movie file using AVAssetWriter

00:08:43.646 --> 00:08:44.866 A:middle
with the samples we get back.

00:08:45.146 --> 00:08:46.406 A:middle
So it's really important for me

00:08:46.406 --> 00:08:47.716 A:middle
to know how I'm going to handle

00:08:47.716 --> 00:08:48.356 A:middle
these samples.

00:08:49.006 --> 00:08:50.896 A:middle
So, let's take a closer look at

00:08:50.976 --> 00:08:51.736 A:middle
the capture handler.

00:08:53.876 --> 00:08:56.206 A:middle
Remember, the capture handler is

00:08:56.206 --> 00:08:58.566 A:middle
called every time ReplayKit is

00:08:58.566 --> 00:09:00.036 A:middle
ready to hand your application

00:09:00.036 --> 00:09:00.966 A:middle
back a sample.

00:09:01.616 --> 00:09:02.346 A:middle
We'll provide you with a

00:09:02.346 --> 00:09:04.246 A:middle
CMSampleBuffer ref, and

00:09:04.246 --> 00:09:06.526 A:middle
RPSampleBufferType, and an NS

00:09:06.566 --> 00:09:06.836 A:middle
Error.

00:09:08.046 --> 00:09:09.376 A:middle
Since I'm using these samples to

00:09:09.376 --> 00:09:10.766 A:middle
write a simple movie using

00:09:10.766 --> 00:09:12.786 A:middle
AVAssetWriter, it's really

00:09:12.786 --> 00:09:13.926 A:middle
important for me to know what

00:09:13.996 --> 00:09:15.456 A:middle
type of samples I'm getting back

00:09:15.456 --> 00:09:16.136 A:middle
from ReplayKit.

00:09:16.936 --> 00:09:18.476 A:middle
Here we have a switch on

00:09:18.476 --> 00:09:20.996 A:middle
RPSampleType that's going to do

00:09:20.996 --> 00:09:21.476 A:middle
just that.

00:09:22.866 --> 00:09:24.206 A:middle
If I get a sample buffer type

00:09:24.206 --> 00:09:25.906 A:middle
that's video, I'm simply going

00:09:25.906 --> 00:09:27.356 A:middle
to append that sample to my

00:09:27.356 --> 00:09:28.466 A:middle
video input for my

00:09:28.466 --> 00:09:29.166 A:middle
AVAssetWriter.

00:09:30.036 --> 00:09:31.396 A:middle
If I get a sample buffer type

00:09:31.396 --> 00:09:32.956 A:middle
that's audio, I'll append that

00:09:32.956 --> 00:09:35.266 A:middle
sample to my audio input for my

00:09:35.266 --> 00:09:35.976 A:middle
AVAssetWriter.

00:09:36.436 --> 00:09:38.136 A:middle
And finally, if I get a sample

00:09:38.136 --> 00:09:39.076 A:middle
buffer type that's for the

00:09:39.076 --> 00:09:40.576 A:middle
microphone, I'll append that

00:09:40.576 --> 00:09:42.096 A:middle
sample to my microphone input

00:09:42.446 --> 00:09:43.486 A:middle
for my AVAssetWriter.

00:09:44.276 --> 00:09:46.086 A:middle
And, just like that, I am now

00:09:46.086 --> 00:09:48.316 A:middle
handling all the expected types

00:09:48.316 --> 00:09:49.926 A:middle
of samples I'm going to get back

00:09:50.136 --> 00:09:50.786 A:middle
from ReplayKit.

00:09:51.516 --> 00:09:52.906 A:middle
And I'm also using them to write

00:09:52.906 --> 00:09:54.496 A:middle
a simple movie to disc using

00:09:54.496 --> 00:09:55.276 A:middle
AVAssetWriter.

00:09:56.726 --> 00:09:57.826 A:middle
Let's go ahead and take a closer

00:09:57.826 --> 00:09:58.896 A:middle
look at the completion handler.

00:10:02.046 --> 00:10:03.466 A:middle
Just like with recording, you

00:10:03.466 --> 00:10:05.026 A:middle
want to indicate to your users

00:10:05.226 --> 00:10:06.676 A:middle
that a capture session has

00:10:06.676 --> 00:10:08.076 A:middle
currently occurred or is in

00:10:08.076 --> 00:10:08.466 A:middle
session.

00:10:08.826 --> 00:10:10.366 A:middle
So, in our completion handler,

00:10:10.616 --> 00:10:11.956 A:middle
we're going to simply call

00:10:11.956 --> 00:10:13.246 A:middle
update the capture button with

00:10:13.246 --> 00:10:14.286 A:middle
the error that we get back

00:10:14.496 --> 00:10:15.476 A:middle
during our completion handler.

00:10:15.926 --> 00:10:17.426 A:middle
This will allow me to update my

00:10:17.426 --> 00:10:19.926 A:middle
UI and indicate to my users that

00:10:19.926 --> 00:10:21.176 A:middle
a capture session has occurred.

00:10:21.826 --> 00:10:22.956 A:middle
And that's it.

00:10:23.246 --> 00:10:24.166 A:middle
That's all you have to do to

00:10:24.166 --> 00:10:24.886 A:middle
start using this powerful new

00:10:24.886 --> 00:10:24.976 A:middle
API.

00:10:28.096 --> 00:10:29.816 A:middle
I want to take a minute to

00:10:29.816 --> 00:10:31.386 A:middle
revisit how In-App Screen

00:10:31.386 --> 00:10:32.616 A:middle
Capture's actually working.

00:10:33.076 --> 00:10:35.126 A:middle
And I'd like to remind you that

00:10:35.126 --> 00:10:37.406 A:middle
your application now has direct

00:10:37.406 --> 00:10:40.286 A:middle
access to its own audio, video,

00:10:40.346 --> 00:10:41.406 A:middle
and microphone content straight

00:10:41.406 --> 00:10:41.976 A:middle
from ReplayKit.

00:10:45.046 --> 00:10:46.586 A:middle
In our example, we use these

00:10:46.586 --> 00:10:48.156 A:middle
samples to create a simple movie

00:10:48.156 --> 00:10:50.256 A:middle
using AVAssetWriter, but you can

00:10:50.256 --> 00:10:52.056 A:middle
do so much more with this.

00:10:52.756 --> 00:10:54.466 A:middle
Now that your application has

00:10:54.466 --> 00:10:55.856 A:middle
access to its own audio and

00:10:55.856 --> 00:10:58.726 A:middle
video samples, you can create

00:10:58.726 --> 00:11:00.596 A:middle
and manage videos right into

00:11:00.596 --> 00:11:01.416 A:middle
your own application.

00:11:04.046 --> 00:11:05.656 A:middle
You can even create a custom

00:11:05.656 --> 00:11:07.096 A:middle
video editor and have it

00:11:07.096 --> 00:11:08.336 A:middle
seamlessly integrated in the

00:11:08.336 --> 00:11:09.706 A:middle
user experience for your

00:11:09.706 --> 00:11:10.166 A:middle
application.

00:11:12.056 --> 00:11:14.576 A:middle
Again, a goal of ReplayKit 2 was

00:11:14.576 --> 00:11:16.126 A:middle
to bring ReplayKit to every

00:11:16.126 --> 00:11:17.736 A:middle
application, not just gaming.

00:11:19.026 --> 00:11:20.716 A:middle
Here, I have the same

00:11:20.716 --> 00:11:22.606 A:middle
productivity app running on two

00:11:22.686 --> 00:11:23.976 A:middle
different iOS devices.

00:11:24.546 --> 00:11:27.256 A:middle
Now that I have access to my

00:11:27.256 --> 00:11:29.186 A:middle
application's audio and video

00:11:29.186 --> 00:11:31.266 A:middle
samples, just like with

00:11:31.316 --> 00:11:33.176 A:middle
broadcasts, I can encode these

00:11:33.176 --> 00:11:34.996 A:middle
samples myself, and I can send

00:11:34.996 --> 00:11:36.406 A:middle
them to my own personal server.

00:11:37.656 --> 00:11:39.556 A:middle
From there, I can share my

00:11:39.626 --> 00:11:41.366 A:middle
application's Screen Capture

00:11:41.646 --> 00:11:43.436 A:middle
with any other instance of my

00:11:43.436 --> 00:11:45.926 A:middle
application running on any other

00:11:45.926 --> 00:11:46.486 A:middle
device.

00:11:47.766 --> 00:11:49.276 A:middle
This just wasn't possible

00:11:49.276 --> 00:11:50.936 A:middle
before, but it is now with

00:11:50.936 --> 00:11:51.806 A:middle
In-App Screen Capture.

00:11:53.276 --> 00:11:54.406 A:middle
These are just some of the

00:11:54.406 --> 00:11:55.826 A:middle
examples of the new user

00:11:55.826 --> 00:11:57.536 A:middle
experiences you can create using

00:11:57.536 --> 00:11:58.396 A:middle
In-App Screen Capture.

00:11:58.626 --> 00:12:00.106 A:middle
We're really excited to see what

00:12:00.106 --> 00:12:00.916 A:middle
developers are going to do with

00:12:00.916 --> 00:12:00.983 A:middle
it.

00:12:05.046 --> 00:12:06.956 A:middle
With ReplayKit 2, our goal was

00:12:06.956 --> 00:12:08.996 A:middle
to bring ReplayKit to every type

00:12:08.996 --> 00:12:10.656 A:middle
of application, not just gaming.

00:12:11.416 --> 00:12:13.616 A:middle
And to do that, I'm really happy

00:12:13.616 --> 00:12:15.686 A:middle
to introduce iOS Screen

00:12:15.686 --> 00:12:16.756 A:middle
Recording and Broadcast.

00:12:17.836 --> 00:12:19.106 A:middle
iOS Screen Recording and

00:12:19.106 --> 00:12:21.266 A:middle
Broadcast is an amazing new user

00:12:21.266 --> 00:12:22.766 A:middle
feature that's going to allow

00:12:22.766 --> 00:12:25.666 A:middle
users to record and broadcast

00:12:25.666 --> 00:12:27.386 A:middle
their entire iOS screen

00:12:27.386 --> 00:12:28.026 A:middle
experience.

00:12:29.206 --> 00:12:30.206 A:middle
Let's go ahead and take a look

00:12:30.206 --> 00:12:31.036 A:middle
at how we can use this new

00:12:31.036 --> 00:12:31.396 A:middle
feature.

00:12:33.456 --> 00:12:35.326 A:middle
To use iOS Screen Recording and

00:12:35.326 --> 00:12:36.596 A:middle
Broadcast, you're going to first

00:12:36.596 --> 00:12:37.866 A:middle
need to enable the Screen

00:12:37.866 --> 00:12:39.446 A:middle
Recording control for Control

00:12:39.446 --> 00:12:39.726 A:middle
Center.

00:12:40.426 --> 00:12:41.466 A:middle
To do that, we're going to jump

00:12:41.466 --> 00:12:43.406 A:middle
right into settings, and Control

00:12:43.406 --> 00:12:43.686 A:middle
Center.

00:12:44.446 --> 00:12:46.236 A:middle
From there we'll be shown all

00:12:46.236 --> 00:12:47.756 A:middle
these supported controls for

00:12:47.756 --> 00:12:48.326 A:middle
Control Center.

00:12:49.136 --> 00:12:50.426 A:middle
We simply add the screen

00:12:50.426 --> 00:12:52.566 A:middle
recording control and we start

00:12:52.566 --> 00:12:53.136 A:middle
Control Center.

00:12:54.196 --> 00:12:55.556 A:middle
And just like that, you're now

00:12:55.556 --> 00:12:57.156 A:middle
up and running ready to share

00:12:57.156 --> 00:12:58.546 A:middle
your entire iOS screen

00:12:58.546 --> 00:12:59.186 A:middle
experience.

00:12:59.716 --> 00:13:00.856 A:middle
[applause] Thank you.

00:13:01.086 --> 00:13:05.016 A:middle
To initiate an iOS screen

00:13:05.016 --> 00:13:06.386 A:middle
recording, you simply tap the

00:13:06.386 --> 00:13:07.486 A:middle
Screen Recording control.

00:13:08.876 --> 00:13:10.536 A:middle
You are now recording your

00:13:10.536 --> 00:13:12.406 A:middle
entire iOS screen experience.

00:13:13.056 --> 00:13:14.746 A:middle
That status bar and our screen

00:13:14.746 --> 00:13:16.286 A:middle
recording control will indicate

00:13:16.286 --> 00:13:17.376 A:middle
to you that a recording is

00:13:17.376 --> 00:13:19.346 A:middle
ongoing by showing you recording

00:13:19.346 --> 00:13:21.346 A:middle
indicator as well as the elapsed

00:13:21.346 --> 00:13:22.516 A:middle
time for your current recording

00:13:22.516 --> 00:13:22.876 A:middle
session.

00:13:24.196 --> 00:13:26.776 A:middle
To stop the recording you simply

00:13:26.776 --> 00:13:28.016 A:middle
tap the screen recording control

00:13:28.016 --> 00:13:28.356 A:middle
again.

00:13:29.826 --> 00:13:30.746 A:middle
When the recording has been

00:13:30.746 --> 00:13:32.356 A:middle
stopped, you'll be presented

00:13:32.466 --> 00:13:34.396 A:middle
with a notification indicating

00:13:34.396 --> 00:13:36.026 A:middle
to you that the screen recording

00:13:36.026 --> 00:13:37.756 A:middle
you just took has now been saved

00:13:37.756 --> 00:13:38.906 A:middle
in your Photos application.

00:13:39.926 --> 00:13:41.756 A:middle
Tapping on this banner will take

00:13:41.756 --> 00:13:42.756 A:middle
you straight to your Photos

00:13:42.756 --> 00:13:44.096 A:middle
application where you can

00:13:44.096 --> 00:13:45.776 A:middle
review, edit, or share the

00:13:45.776 --> 00:13:46.846 A:middle
recording you just made.

00:13:48.996 --> 00:13:52.686 A:middle
You can also 3D Touch into our

00:13:52.686 --> 00:13:53.776 A:middle
screen recording control which

00:13:53.886 --> 00:13:55.536 A:middle
will bring you straight to our

00:13:55.536 --> 00:13:57.626 A:middle
expanded view where you'll have

00:13:57.696 --> 00:13:58.996 A:middle
access to the microphone

00:13:58.996 --> 00:14:01.036 A:middle
settings as well as the ability

00:14:01.036 --> 00:14:04.026 A:middle
to start recording, or to stop

00:14:04.026 --> 00:14:04.366 A:middle
recording.

00:14:06.716 --> 00:14:08.316 A:middle
Now, let's say I've just

00:14:08.316 --> 00:14:09.416 A:middle
downloaded a broadcast

00:14:09.416 --> 00:14:10.856 A:middle
application that supports

00:14:10.856 --> 00:14:12.016 A:middle
ReplayKit Live Streaming.

00:14:13.056 --> 00:14:14.576 A:middle
And I'd like to use that

00:14:14.656 --> 00:14:16.916 A:middle
broadcast application to share

00:14:16.916 --> 00:14:18.976 A:middle
my entire iOS screen experience.

00:14:19.756 --> 00:14:20.536 A:middle
Well, that's actually pretty

00:14:20.536 --> 00:14:21.946 A:middle
simple to do, because all you

00:14:21.946 --> 00:14:24.216 A:middle
need to do is 3D Touch into our

00:14:24.216 --> 00:14:25.256 A:middle
screen recording control.

00:14:26.126 --> 00:14:27.716 A:middle
You'll be taken to our expanded

00:14:27.716 --> 00:14:29.846 A:middle
view, where all the applications

00:14:29.846 --> 00:14:30.836 A:middle
that are installed on your

00:14:30.836 --> 00:14:32.456 A:middle
device that currently support

00:14:32.456 --> 00:14:33.976 A:middle
ReplayKit Live Streaming will be

00:14:33.976 --> 00:14:34.316 A:middle
shown.

00:14:35.256 --> 00:14:36.846 A:middle
You simply need to select the

00:14:36.846 --> 00:14:39.116 A:middle
service you'd like to use and

00:14:39.256 --> 00:14:40.316 A:middle
tap Start Broadcast.

00:14:41.876 --> 00:14:43.596 A:middle
You are now broadcasting to the

00:14:43.596 --> 00:14:46.536 A:middle
entire world your entire iOS

00:14:46.536 --> 00:14:47.486 A:middle
screen experience.

00:14:48.856 --> 00:14:50.956 A:middle
Just like with recording, the

00:14:50.956 --> 00:14:52.076 A:middle
status bar in the screen

00:14:52.076 --> 00:14:53.996 A:middle
recording control will indicate

00:14:53.996 --> 00:14:55.376 A:middle
to you that a broadcast is

00:14:55.376 --> 00:14:57.116 A:middle
currently in session by showing

00:14:57.116 --> 00:14:58.876 A:middle
you the recording indicator, the

00:14:58.876 --> 00:15:00.266 A:middle
current selected broadcast

00:15:00.266 --> 00:15:02.016 A:middle
service, and the elapsed time

00:15:02.016 --> 00:15:03.046 A:middle
for your current broadcast.

00:15:04.576 --> 00:15:05.966 A:middle
To stop the broadcast, you

00:15:06.016 --> 00:15:07.646 A:middle
simply tap the stop broadcast

00:15:07.646 --> 00:15:07.926 A:middle
button.

00:15:09.126 --> 00:15:12.296 A:middle
Now, you can record a video to

00:15:12.296 --> 00:15:13.846 A:middle
teach your grandparents how to

00:15:13.846 --> 00:15:14.926 A:middle
make that FaceTime call.

00:15:15.926 --> 00:15:17.636 A:middle
You can even stream a video to

00:15:17.876 --> 00:15:19.086 A:middle
teach your parents how to send

00:15:19.086 --> 00:15:19.996 A:middle
that important email.

00:15:20.746 --> 00:15:22.166 A:middle
Or better yet, you can now

00:15:22.166 --> 00:15:23.596 A:middle
record a video to teach your

00:15:23.596 --> 00:15:25.986 A:middle
kids how to find their favorite

00:15:25.986 --> 00:15:28.216 A:middle
TV shows and movies in iTunes.

00:15:28.986 --> 00:15:30.926 A:middle
It has never been easier to

00:15:30.926 --> 00:15:32.626 A:middle
share your entire iOS screen

00:15:32.626 --> 00:15:33.226 A:middle
experience.

00:15:33.776 --> 00:15:35.856 A:middle
iOS Screen Recording and

00:15:35.856 --> 00:15:37.696 A:middle
Broadcast creates new user

00:15:37.696 --> 00:15:39.766 A:middle
experiences with applications

00:15:39.766 --> 00:15:40.656 A:middle
that are already using

00:15:40.656 --> 00:15:41.136 A:middle
ReplayKit.

00:15:41.536 --> 00:15:42.866 A:middle
So, let's take a quick minute to

00:15:42.866 --> 00:15:46.886 A:middle
talk about some best practices.

00:15:46.886 --> 00:15:47.826 A:middle
iOS Screen Recording and

00:15:47.826 --> 00:15:49.276 A:middle
Broadcast has priority when it

00:15:49.276 --> 00:15:50.056 A:middle
comes to ReplayKit.

00:15:50.316 --> 00:15:51.806 A:middle
So, if your application is

00:15:51.886 --> 00:15:53.136 A:middle
currently using ReplayKit to

00:15:53.136 --> 00:15:55.266 A:middle
record or broadcast and the user

00:15:55.266 --> 00:15:56.816 A:middle
initiates an iOS Screen

00:15:56.816 --> 00:15:58.776 A:middle
Recording and Broadcast, your

00:15:58.776 --> 00:16:00.956 A:middle
application will be notified via

00:16:00.956 --> 00:16:02.816 A:middle
RPScreenRecorderDelegate that

00:16:02.816 --> 00:16:03.546 A:middle
your session has been

00:16:03.546 --> 00:16:04.106 A:middle
interrupted.

00:16:05.136 --> 00:16:07.786 A:middle
In this case, the recording will

00:16:07.786 --> 00:16:09.646 A:middle
be discarded and you should

00:16:09.646 --> 00:16:11.546 A:middle
update your UI and notify the

00:16:11.546 --> 00:16:12.326 A:middle
users accordingly.

00:16:12.796 --> 00:16:15.016 A:middle
iOS Screen Recording and

00:16:15.016 --> 00:16:17.096 A:middle
Broadcast is an amazing feature.

00:16:17.506 --> 00:16:19.876 A:middle
It's one that we hope users and

00:16:19.876 --> 00:16:21.496 A:middle
developers will use to create

00:16:21.496 --> 00:16:23.336 A:middle
new exciting iOS content.

00:16:23.836 --> 00:16:25.956 A:middle
And to help you do that, I'd

00:16:25.956 --> 00:16:27.626 A:middle
like to bring Alexander Subbotin

00:16:27.626 --> 00:16:29.026 A:middle
up to the stage to talk to you a

00:16:29.026 --> 00:16:30.476 A:middle
little bit more about how we do

00:16:30.476 --> 00:16:31.896 A:middle
broadcasting with ReplayKit.

00:16:33.516 --> 00:16:35.636 A:middle
[ Applause ]

00:16:36.136 --> 00:16:36.716 A:middle
&gt;&gt; Thank you, Johnny.

00:16:38.006 --> 00:16:38.496 A:middle
Good morning.

00:16:39.196 --> 00:16:40.696 A:middle
My name is Alexander Subbotin

00:16:40.916 --> 00:16:43.536 A:middle
and I am so excited to be here

00:16:43.746 --> 00:16:45.126 A:middle
talk to you and share more

00:16:45.126 --> 00:16:46.886 A:middle
details about our Live Broadcast

00:16:46.886 --> 00:16:46.976 A:middle
API.

00:16:49.856 --> 00:16:52.526 A:middle
ReplayKit enables applications

00:16:52.806 --> 00:16:54.556 A:middle
to stream their content to third

00:16:54.556 --> 00:16:55.886 A:middle
party broadcast services

00:16:55.956 --> 00:16:58.686 A:middle
directly from your iOS and tvOS

00:16:59.776 --> 00:17:00.516 A:middle
device.

00:17:00.516 --> 00:17:01.926 A:middle
On iOS you can also include

00:17:01.926 --> 00:17:03.746 A:middle
voice and video commentary using

00:17:03.746 --> 00:17:05.246 A:middle
the microphone and the camera.

00:17:06.026 --> 00:17:07.286 A:middle
And all this content is

00:17:07.326 --> 00:17:08.866 A:middle
absolutely secure and

00:17:08.866 --> 00:17:11.016 A:middle
unaccessible with a broadcast

00:17:11.016 --> 00:17:11.916 A:middle
service that you use.

00:17:15.276 --> 00:17:17.326 A:middle
This is a high level picture of

00:17:17.426 --> 00:17:19.226 A:middle
how Live Broadcast really works.

00:17:20.386 --> 00:17:22.086 A:middle
All on the left, you see a

00:17:22.086 --> 00:17:24.566 A:middle
player who at some point wants

00:17:24.566 --> 00:17:27.386 A:middle
to broadcast his game Tower Dash

00:17:27.386 --> 00:17:29.296 A:middle
to Mobcrush which is a broadcast

00:17:29.436 --> 00:17:30.046 A:middle
service.

00:17:31.876 --> 00:17:33.746 A:middle
So Tower Dash communicates to

00:17:33.746 --> 00:17:35.486 A:middle
the ReplayKit API to initiate

00:17:35.486 --> 00:17:36.146 A:middle
the broadcast.

00:17:37.416 --> 00:17:40.026 A:middle
And once that happens, ReplayKit

00:17:40.026 --> 00:17:41.716 A:middle
will present some UI that allows

00:17:41.716 --> 00:17:43.086 A:middle
user to ping the broadcast

00:17:43.086 --> 00:17:43.586 A:middle
service.

00:17:44.006 --> 00:17:45.836 A:middle
And that would be Mobcrush for

00:17:45.976 --> 00:17:46.556 A:middle
us.

00:17:48.216 --> 00:17:49.696 A:middle
And the broadcast starts.

00:17:49.696 --> 00:17:52.046 A:middle
And once broadcast is running,

00:17:52.396 --> 00:17:55.256 A:middle
ReplayKit will be providing

00:17:55.256 --> 00:17:57.566 A:middle
audio and video samples to the

00:17:57.566 --> 00:17:59.366 A:middle
mob crush app extension that

00:17:59.366 --> 00:18:02.016 A:middle
directly talks to the broadcast

00:18:02.016 --> 00:18:03.616 A:middle
service and the viewers around

00:18:03.616 --> 00:18:05.346 A:middle
the world can watch the

00:18:05.346 --> 00:18:07.066 A:middle
livestream online.

00:18:10.176 --> 00:18:12.296 A:middle
This is just a picture of how

00:18:12.296 --> 00:18:13.376 A:middle
broadcast runs.

00:18:13.636 --> 00:18:16.046 A:middle
And the way I want to describe

00:18:16.046 --> 00:18:17.986 A:middle
it to all of you is, I want to

00:18:17.986 --> 00:18:20.666 A:middle
break it into parts because if

00:18:21.336 --> 00:18:23.396 A:middle
you are a client application

00:18:23.396 --> 00:18:25.306 A:middle
developer, game developer the

00:18:26.246 --> 00:18:29.236 A:middle
only thing you need to do is to

00:18:29.236 --> 00:18:30.656 A:middle
present some ViewController

00:18:30.656 --> 00:18:33.646 A:middle
initiate broadcast and couple of

00:18:33.646 --> 00:18:35.066 A:middle
other fairly simple steps.

00:18:38.196 --> 00:18:39.786 A:middle
But I also know that some of you

00:18:39.786 --> 00:18:42.136 A:middle
in this room broadcast service

00:18:42.136 --> 00:18:43.006 A:middle
developers.

00:18:43.216 --> 00:18:45.216 A:middle
And we are going to walk through

00:18:45.216 --> 00:18:47.716 A:middle
the process for you and talk

00:18:47.716 --> 00:18:49.356 A:middle
about how do you actually

00:18:49.356 --> 00:18:50.636 A:middle
implement those extensions.

00:18:53.276 --> 00:18:54.656 A:middle
So, starting with the client

00:18:54.656 --> 00:18:56.566 A:middle
side and what the client

00:18:56.566 --> 00:18:58.186 A:middle
application wants to do, for

00:18:59.116 --> 00:19:01.606 A:middle
that we have a fairly simple API

00:19:02.876 --> 00:19:04.856 A:middle
that really wrapped up in those

00:19:04.856 --> 00:19:05.676 A:middle
three classes.

00:19:06.936 --> 00:19:07.406 A:middle
There's

00:19:07.706 --> 00:19:09.396 A:middle
BroadcastActivityViewController

00:19:10.216 --> 00:19:12.406 A:middle
and this class is used to

00:19:12.406 --> 00:19:13.916 A:middle
initiate a broadcast and it

00:19:13.916 --> 00:19:15.866 A:middle
presents this built in UI where

00:19:15.866 --> 00:19:16.826 A:middle
you select the broadcast

00:19:16.826 --> 00:19:17.306 A:middle
service.

00:19:18.616 --> 00:19:22.346 A:middle
RPBroadcastController allows you

00:19:22.946 --> 00:19:24.956 A:middle
to manage the broadcast in your

00:19:24.956 --> 00:19:26.956 A:middle
code and you would usually wire

00:19:26.956 --> 00:19:29.206 A:middle
to some UI where user can start,

00:19:29.206 --> 00:19:30.916 A:middle
stop, pause, or resume the

00:19:30.916 --> 00:19:31.826 A:middle
broadcast.

00:19:32.286 --> 00:19:32.816 A:middle
And the

00:19:32.816 --> 00:19:34.776 A:middle
RPBroadcastControllerDelegate is

00:19:34.776 --> 00:19:37.216 A:middle
internal and this is a dedicated

00:19:37.216 --> 00:19:38.326 A:middle
[inaudible] part about different

00:19:38.326 --> 00:19:39.866 A:middle
events during the broadcast.

00:19:39.866 --> 00:19:41.306 A:middle
The broadcast can stop for some

00:19:41.306 --> 00:19:43.236 A:middle
reason, there could be an error,

00:19:43.756 --> 00:19:46.566 A:middle
or the broadcast extension may

00:19:46.566 --> 00:19:47.996 A:middle
want to pass some information to

00:19:47.996 --> 00:19:49.626 A:middle
the client app, and this is

00:19:49.626 --> 00:19:51.106 A:middle
where the delegate tells the

00:19:51.106 --> 00:19:51.516 A:middle
user.

00:19:53.476 --> 00:19:55.776 A:middle
And now, I'm going to stop here

00:19:56.046 --> 00:19:57.176 A:middle
talking about this part of the

00:19:57.176 --> 00:19:59.606 A:middle
picture because last year,

00:20:00.056 --> 00:20:02.046 A:middle
we covered this API in depth in

00:20:02.046 --> 00:20:03.636 A:middle
our session Go Live with

00:20:03.636 --> 00:20:04.226 A:middle
ReplayKit.

00:20:04.846 --> 00:20:06.366 A:middle
So, in case you have not adopted

00:20:06.366 --> 00:20:09.976 A:middle
the API yet, please go to the

00:20:09.976 --> 00:20:11.316 A:middle
app and you can find the link to

00:20:11.316 --> 00:20:13.486 A:middle
last year's session and learn

00:20:13.486 --> 00:20:15.106 A:middle
more about that developer API.

00:20:19.776 --> 00:20:21.906 A:middle
Now let's talk about the second

00:20:21.906 --> 00:20:24.686 A:middle
part of the equation, you have

00:20:24.806 --> 00:20:26.416 A:middle
developer of the broadcast

00:20:26.416 --> 00:20:26.946 A:middle
service.

00:20:27.556 --> 00:20:28.686 A:middle
How do you integrate your

00:20:28.686 --> 00:20:31.626 A:middle
service so that you could stream

00:20:31.626 --> 00:20:33.486 A:middle
the content created by all these

00:20:33.486 --> 00:20:35.616 A:middle
players, games, and other

00:20:35.616 --> 00:20:36.366 A:middle
applications?

00:20:41.496 --> 00:20:44.436 A:middle
And the answer is these three

00:20:44.436 --> 00:20:45.086 A:middle
extensions.

00:20:46.936 --> 00:20:49.856 A:middle
The first one on the top is what

00:20:49.856 --> 00:20:52.136 A:middle
we call Broadcast Setup

00:20:52.136 --> 00:20:54.306 A:middle
extension, and its purpose is to

00:20:54.306 --> 00:20:56.146 A:middle
present some UI where you can

00:20:56.146 --> 00:20:57.776 A:middle
ask user to enter some

00:20:57.926 --> 00:20:59.656 A:middle
information, you may want user

00:20:59.656 --> 00:21:02.026 A:middle
to give the broadcast a

00:21:02.026 --> 00:21:05.076 A:middle
particular name or maybe log in

00:21:05.076 --> 00:21:07.056 A:middle
credentials or any details that

00:21:07.056 --> 00:21:08.716 A:middle
you need fire up your broadcast.

00:21:09.236 --> 00:21:12.676 A:middle
And the second one is called

00:21:13.016 --> 00:21:14.566 A:middle
Broadcast Upload extension.

00:21:14.766 --> 00:21:16.926 A:middle
And the function of this

00:21:16.926 --> 00:21:19.816 A:middle
extension is to receive the

00:21:19.816 --> 00:21:21.856 A:middle
media samples handed by

00:21:21.856 --> 00:21:25.306 A:middle
ReplayKit and encode them,

00:21:26.396 --> 00:21:27.836 A:middle
create a video stream, and

00:21:27.836 --> 00:21:30.526 A:middle
upload to the online service.

00:21:31.066 --> 00:21:33.746 A:middle
Each extension is a separate

00:21:33.746 --> 00:21:36.526 A:middle
binary that is installed on your

00:21:36.526 --> 00:21:37.996 A:middle
device along with the broadcast

00:21:37.996 --> 00:21:38.296 A:middle
app.

00:21:38.666 --> 00:21:40.576 A:middle
So you can install to Mobcrush,

00:21:40.666 --> 00:21:42.546 A:middle
you also get setup extension and

00:21:42.546 --> 00:21:44.316 A:middle
upload extension installed on

00:21:44.316 --> 00:21:44.926 A:middle
your device.

00:21:44.926 --> 00:21:48.136 A:middle
And each extension runs in its

00:21:48.136 --> 00:21:50.176 A:middle
own process independently from

00:21:50.176 --> 00:21:51.476 A:middle
Mobcrush that contains

00:21:51.476 --> 00:21:54.256 A:middle
extensions and Tower Dash that

00:21:54.256 --> 00:21:55.266 A:middle
initiates the broadcast.

00:21:55.266 --> 00:21:56.206 A:middle
So usually these are three

00:21:56.206 --> 00:21:58.166 A:middle
processes and the process of the

00:21:58.166 --> 00:22:01.176 A:middle
containing app of the Mobcrush

00:22:01.176 --> 00:22:01.836 A:middle
is never launched.

00:22:05.136 --> 00:22:06.316 A:middle
And to help you get started

00:22:06.316 --> 00:22:07.656 A:middle
developing new broadcast

00:22:07.656 --> 00:22:09.926 A:middle
extensions, we provide very easy

00:22:09.926 --> 00:22:11.896 A:middle
to use Xcode templates for both

00:22:11.896 --> 00:22:12.976 A:middle
types of extensions.

00:22:12.976 --> 00:22:16.376 A:middle
And just add two extensions to

00:22:16.376 --> 00:22:17.866 A:middle
your Xcode project and you are

00:22:17.866 --> 00:22:18.546 A:middle
ready to begin.

00:22:19.116 --> 00:22:22.846 A:middle
And now let's talk about how you

00:22:22.846 --> 00:22:24.446 A:middle
actually code all of this.

00:22:25.226 --> 00:22:26.426 A:middle
Starting from the setup

00:22:26.426 --> 00:22:26.916 A:middle
extension.

00:22:29.646 --> 00:22:31.316 A:middle
As I said, the purpose of the

00:22:31.316 --> 00:22:32.936 A:middle
setup extension is to present

00:22:32.936 --> 00:22:35.516 A:middle
this UI for user can enter the

00:22:35.886 --> 00:22:36.716 A:middle
name of the broadcast or

00:22:36.716 --> 00:22:37.316 A:middle
something.

00:22:38.286 --> 00:22:39.716 A:middle
But it also has another

00:22:39.836 --> 00:22:40.806 A:middle
important function.

00:22:43.106 --> 00:22:44.586 A:middle
It can get some information

00:22:44.586 --> 00:22:45.986 A:middle
about the client application

00:22:45.986 --> 00:22:47.866 A:middle
such as a bundleID, the name of

00:22:47.866 --> 00:22:49.836 A:middle
the application, or the icon of

00:22:49.836 --> 00:22:50.686 A:middle
the application.

00:22:51.896 --> 00:22:53.906 A:middle
And it can upload this

00:22:53.906 --> 00:22:55.166 A:middle
information to the broadcast

00:22:55.166 --> 00:22:56.536 A:middle
service so that the broadcast

00:22:56.536 --> 00:22:58.166 A:middle
service could build an

00:22:58.166 --> 00:23:00.976 A:middle
experience for viewers when the

00:23:00.976 --> 00:23:02.496 A:middle
viewer comes to the website and

00:23:02.496 --> 00:23:04.336 A:middle
he knows here's this place where

00:23:04.336 --> 00:23:05.876 A:middle
everyone playing Tower Dash,

00:23:06.106 --> 00:23:07.336 A:middle
there's an icon of Tower Dash.

00:23:08.996 --> 00:23:12.436 A:middle
And although the extension can

00:23:12.436 --> 00:23:14.026 A:middle
request from the broadcast

00:23:14.026 --> 00:23:16.156 A:middle
service a URL of that particular

00:23:16.156 --> 00:23:17.426 A:middle
Live Broadcast happening on the

00:23:17.426 --> 00:23:20.056 A:middle
website, and share it back to

00:23:20.056 --> 00:23:22.716 A:middle
the application so that the

00:23:22.716 --> 00:23:24.186 A:middle
player could send it to his

00:23:24.186 --> 00:23:25.726 A:middle
friends and get more followers.

00:23:30.196 --> 00:23:31.436 A:middle
The ViewController that

00:23:31.436 --> 00:23:33.176 A:middle
implements this UI communicates

00:23:33.176 --> 00:23:34.636 A:middle
to ReplayKit using property

00:23:34.636 --> 00:23:36.046 A:middle
called extensionContext.

00:23:36.046 --> 00:23:38.086 A:middle
And the class of this property

00:23:38.496 --> 00:23:39.446 A:middle
is a category of

00:23:39.486 --> 00:23:42.126 A:middle
NSExtensionContext that has two

00:23:42.126 --> 00:23:43.686 A:middle
more functions added by

00:23:43.776 --> 00:23:44.906 A:middle
ReplayKit.

00:23:45.326 --> 00:23:45.966 A:middle
The first one is

00:23:45.966 --> 00:23:47.736 A:middle
loadBroadcastingApplicationInfo

00:23:47.736 --> 00:23:48.646 A:middle
and the second one is

00:23:48.826 --> 00:23:50.236 A:middle
completeRequest with

00:23:50.236 --> 00:23:52.436 A:middle
broadcastURL and setupInfo.

00:23:54.636 --> 00:23:57.066 A:middle
The first one as I said it's

00:23:57.066 --> 00:23:58.696 A:middle
used to get the icon and the

00:23:58.696 --> 00:23:59.976 A:middle
name of the application, and

00:23:59.976 --> 00:24:01.246 A:middle
here is a small code example of

00:24:01.246 --> 00:24:03.346 A:middle
how you could do that and pass

00:24:03.346 --> 00:24:04.146 A:middle
this information to the

00:24:04.146 --> 00:24:05.076 A:middle
broadcast session.

00:24:07.486 --> 00:24:10.666 A:middle
The broadcast service when it

00:24:10.666 --> 00:24:13.556 A:middle
has this information, it can

00:24:13.826 --> 00:24:15.576 A:middle
identify in the broadcast

00:24:15.576 --> 00:24:17.566 A:middle
sessions, create channels, and

00:24:17.566 --> 00:24:20.046 A:middle
build simple intuitive user

00:24:20.046 --> 00:24:21.916 A:middle
experience of viewers experience

00:24:22.136 --> 00:24:22.746 A:middle
like this.

00:24:23.156 --> 00:24:24.556 A:middle
The viewer comes to the app and

00:24:24.556 --> 00:24:26.886 A:middle
he has an icon and name of the

00:24:26.926 --> 00:24:27.846 A:middle
application.

00:24:32.436 --> 00:24:34.676 A:middle
So, when you're done uploading

00:24:34.676 --> 00:24:36.866 A:middle
this icon, and already collected

00:24:36.866 --> 00:24:37.896 A:middle
all the information that you

00:24:37.896 --> 00:24:40.206 A:middle
need to begin the broadcast, you

00:24:40.206 --> 00:24:41.876 A:middle
should call the second one

00:24:41.876 --> 00:24:44.246 A:middle
called completeRequest with

00:24:44.246 --> 00:24:46.026 A:middle
broadcastURL and setupInfo.

00:24:47.136 --> 00:24:48.766 A:middle
The broadcastURL will be

00:24:48.766 --> 00:24:49.806 A:middle
available to the client

00:24:49.806 --> 00:24:51.306 A:middle
application as a property of the

00:24:51.306 --> 00:24:54.276 A:middle
broadcast controller and the

00:24:54.476 --> 00:24:56.926 A:middle
setupInfo it's a dictionary that

00:24:56.926 --> 00:24:58.586 A:middle
you create inside this extension

00:24:58.586 --> 00:25:00.146 A:middle
and all the information you

00:25:00.146 --> 00:25:01.836 A:middle
collected from the user, you put

00:25:01.836 --> 00:25:03.386 A:middle
it to that dictionary, and it

00:25:03.386 --> 00:25:04.746 A:middle
will be passed to the upload

00:25:04.746 --> 00:25:06.266 A:middle
extension when the broadcast

00:25:06.266 --> 00:25:06.716 A:middle
starts.

00:25:07.096 --> 00:25:08.786 A:middle
You should also always provide

00:25:08.786 --> 00:25:10.096 A:middle
an option for the user to cancel

00:25:10.096 --> 00:25:11.456 A:middle
broadcast, and for that you just

00:25:11.456 --> 00:25:12.326 A:middle
use your regular old

00:25:12.326 --> 00:25:14.516 A:middle
cancelRequest method of the

00:25:14.516 --> 00:25:16.066 A:middle
extensionContext.

00:25:17.926 --> 00:25:20.266 A:middle
Now, let's talk about the upload

00:25:20.266 --> 00:25:20.886 A:middle
extension.

00:25:21.836 --> 00:25:24.666 A:middle
As I said, it's function is to

00:25:25.046 --> 00:25:27.446 A:middle
receive the media frames handed

00:25:27.446 --> 00:25:29.346 A:middle
by ReplayKit in real time,

00:25:30.686 --> 00:25:32.616 A:middle
encode them, create a video

00:25:32.616 --> 00:25:35.196 A:middle
stream, and upload it to the

00:25:35.196 --> 00:25:36.126 A:middle
broadcast service.

00:25:39.736 --> 00:25:41.786 A:middle
If you create a new upload

00:25:41.786 --> 00:25:43.516 A:middle
extension using Xcode templates,

00:25:43.516 --> 00:25:44.746 A:middle
you will find a sampleHandler

00:25:44.746 --> 00:25:46.196 A:middle
class like this in your Xcode

00:25:46.196 --> 00:25:47.986 A:middle
project, and this is where you

00:25:47.986 --> 00:25:49.996 A:middle
override functions that take

00:25:49.996 --> 00:25:51.076 A:middle
care of events like the

00:25:51.076 --> 00:25:53.656 A:middle
broadcast has started, stopped,

00:25:53.816 --> 00:25:54.846 A:middle
paused, or resumed.

00:25:55.136 --> 00:25:57.016 A:middle
And also the function called

00:25:57.246 --> 00:25:59.706 A:middle
processSampleBuffer, now this is

00:25:59.706 --> 00:26:01.026 A:middle
the one that you want to

00:26:01.026 --> 00:26:03.276 A:middle
override to handle incoming

00:26:03.276 --> 00:26:04.146 A:middle
media samples.

00:26:04.766 --> 00:26:06.226 A:middle
This is where all the magic

00:26:06.226 --> 00:26:06.706 A:middle
happens.

00:26:06.706 --> 00:26:08.126 A:middle
You upload, the encoding, and

00:26:08.126 --> 00:26:08.856 A:middle
uploading here.

00:26:11.556 --> 00:26:15.806 A:middle
So, when the broadcast starts,

00:26:15.956 --> 00:26:18.826 A:middle
ReplayKit notifies extension

00:26:18.826 --> 00:26:20.356 A:middle
that it will begin providing it

00:26:20.356 --> 00:26:23.936 A:middle
with media samples and ReplayKit

00:26:23.936 --> 00:26:25.516 A:middle
is using the function called

00:26:25.516 --> 00:26:27.706 A:middle
broadcastStarted with setupInfo

00:26:28.406 --> 00:26:28.956 A:middle
of this.

00:26:29.026 --> 00:26:30.986 A:middle
And here's a code example that

00:26:30.986 --> 00:26:33.146 A:middle
shows you that you do receive a

00:26:33.146 --> 00:26:35.266 A:middle
setupInfo as an argument of that

00:26:35.266 --> 00:26:37.166 A:middle
function, and you could extract

00:26:37.166 --> 00:26:38.876 A:middle
say, name of the broadcast from

00:26:38.876 --> 00:26:40.206 A:middle
the dictionary and pass it to

00:26:40.206 --> 00:26:42.406 A:middle
the broadcast session, or in

00:26:42.406 --> 00:26:43.796 A:middle
case a broadcast has started

00:26:43.796 --> 00:26:45.076 A:middle
from the Control Center you can

00:26:45.076 --> 00:26:46.566 A:middle
just let know the session about

00:26:46.566 --> 00:26:46.936 A:middle
this one.

00:26:47.086 --> 00:26:51.676 A:middle
And now, let me zoom in on the

00:26:51.946 --> 00:26:53.256 A:middle
processSampleBuffer function.

00:26:53.656 --> 00:26:55.546 A:middle
ReplayKit provides extension

00:26:55.546 --> 00:26:56.706 A:middle
with three types of the media

00:26:56.706 --> 00:26:57.256 A:middle
samples.

00:26:59.456 --> 00:27:01.186 A:middle
Video samples captured from the

00:27:01.186 --> 00:27:01.716 A:middle
screen.

00:27:02.226 --> 00:27:03.976 A:middle
Audio samples captured from the

00:27:03.976 --> 00:27:05.426 A:middle
application, this is the audio

00:27:05.426 --> 00:27:07.216 A:middle
your application's playing back

00:27:07.216 --> 00:27:07.846 A:middle
right now.

00:27:07.846 --> 00:27:09.686 A:middle
And the audio samples captured

00:27:09.686 --> 00:27:10.526 A:middle
from the microphone.

00:27:10.526 --> 00:27:14.236 A:middle
And you can use any technology

00:27:14.236 --> 00:27:16.066 A:middle
to encode this media, but as a

00:27:16.066 --> 00:27:17.976 A:middle
practical matter we provide you

00:27:17.976 --> 00:27:20.016 A:middle
a lower level API called

00:27:20.016 --> 00:27:21.536 A:middle
VideoToolbox.

00:27:21.536 --> 00:27:22.626 A:middle
This is a framework that

00:27:22.626 --> 00:27:25.756 A:middle
provides access to the hardware

00:27:25.756 --> 00:27:27.356 A:middle
accelerated encoding and

00:27:27.356 --> 00:27:27.816 A:middle
decoding.

00:27:29.826 --> 00:27:32.196 A:middle
All samples go to the upload

00:27:32.196 --> 00:27:33.826 A:middle
extension and handled by the

00:27:33.826 --> 00:27:35.646 A:middle
function processSampleBuffer.

00:27:39.076 --> 00:27:40.986 A:middle
And the function should encode

00:27:40.986 --> 00:27:42.296 A:middle
and upload the media samples.

00:27:43.236 --> 00:27:44.566 A:middle
Here in this code example, we

00:27:44.566 --> 00:27:45.586 A:middle
show you how you could use a

00:27:45.586 --> 00:27:48.166 A:middle
VideoToolbox to encode the video

00:27:48.166 --> 00:27:48.616 A:middle
sample.

00:27:50.536 --> 00:27:51.776 A:middle
In your real code, you would

00:27:51.776 --> 00:27:53.676 A:middle
also have to implement the call

00:27:53.676 --> 00:27:55.346 A:middle
back to receive the encoded

00:27:55.346 --> 00:27:56.286 A:middle
data, et cetera.

00:27:57.126 --> 00:27:58.506 A:middle
But here I would like to speak

00:27:58.506 --> 00:28:00.596 A:middle
about the VideoToolbox, because

00:28:00.596 --> 00:28:02.286 A:middle
it's especially important when

00:28:02.286 --> 00:28:03.936 A:middle
you do your video processing in

00:28:03.936 --> 00:28:05.146 A:middle
an app extension.

00:28:05.146 --> 00:28:07.136 A:middle
Because app extensions have much

00:28:07.136 --> 00:28:09.306 A:middle
lower memory limits compared to

00:28:09.306 --> 00:28:10.756 A:middle
the programmed applications.

00:28:11.706 --> 00:28:13.086 A:middle
And having access to this

00:28:13.146 --> 00:28:15.326 A:middle
hardware accelerated video

00:28:15.326 --> 00:28:17.526 A:middle
encoding is vital for the

00:28:17.526 --> 00:28:19.186 A:middle
ReplayKit upload extensions.

00:28:19.496 --> 00:28:21.136 A:middle
And this year, we have great

00:28:21.136 --> 00:28:24.036 A:middle
news, VideoToolbox is also

00:28:24.036 --> 00:28:25.626 A:middle
available on tvOS now.

00:28:25.786 --> 00:28:27.006 A:middle
So, you can build highly

00:28:27.006 --> 00:28:28.776 A:middle
optimized, very efficient

00:28:28.776 --> 00:28:29.956 A:middle
extensions for both platforms.

00:28:36.046 --> 00:28:37.076 A:middle
This is a high level picture of

00:28:37.166 --> 00:28:39.756 A:middle
how Live Broadcast works, and

00:28:39.756 --> 00:28:41.296 A:middle
who implements each part.

00:28:43.576 --> 00:28:44.916 A:middle
Again if you are a game

00:28:44.916 --> 00:28:46.366 A:middle
developer, client application

00:28:46.366 --> 00:28:48.036 A:middle
developer, all you need to worry

00:28:48.036 --> 00:28:50.266 A:middle
about is just present the

00:28:50.266 --> 00:28:52.546 A:middle
ViewController initiate and stop

00:28:52.546 --> 00:28:56.686 A:middle
the broadcast, and you could

00:28:56.686 --> 00:28:59.116 A:middle
implement this API and be done

00:28:59.116 --> 00:29:00.786 A:middle
by the end of this session.

00:29:01.996 --> 00:29:03.786 A:middle
And if you are a broadcast

00:29:03.786 --> 00:29:05.666 A:middle
service developer there's a

00:29:05.666 --> 00:29:07.036 A:middle
little more work on your side.

00:29:07.766 --> 00:29:10.566 A:middle
You need to receive the samples,

00:29:10.566 --> 00:29:12.766 A:middle
encode them, and upload to the

00:29:12.766 --> 00:29:13.746 A:middle
broadcast service.

00:29:17.576 --> 00:29:19.916 A:middle
There's one more thing I need to

00:29:19.916 --> 00:29:21.486 A:middle
go over before we finish with

00:29:21.486 --> 00:29:23.166 A:middle
this part of the talk.

00:29:23.816 --> 00:29:25.496 A:middle
Is that so far we've been

00:29:25.496 --> 00:29:28.626 A:middle
assuming that all the data flows

00:29:28.626 --> 00:29:30.386 A:middle
upwards from the application to

00:29:30.386 --> 00:29:32.236 A:middle
the online service, but indeed

00:29:32.636 --> 00:29:34.336 A:middle
it is also possible for the data

00:29:34.336 --> 00:29:36.886 A:middle
to be flowing back from the

00:29:36.886 --> 00:29:39.706 A:middle
online service to the

00:29:39.706 --> 00:29:40.546 A:middle
application.

00:29:40.636 --> 00:29:42.116 A:middle
And that could be some viewers

00:29:42.116 --> 00:29:43.826 A:middle
feedback, like the comments of

00:29:43.826 --> 00:29:45.716 A:middle
the viewers or likes, or any

00:29:45.716 --> 00:29:47.556 A:middle
kind of data number viewers.

00:29:49.776 --> 00:29:51.866 A:middle
And for that we provide an API

00:29:51.866 --> 00:29:53.776 A:middle
that helps you to deliver this

00:29:53.776 --> 00:29:55.246 A:middle
information from the extension

00:29:55.246 --> 00:29:55.976 A:middle
to the client application.

00:29:58.476 --> 00:30:01.366 A:middle
And you have to just put this

00:30:01.366 --> 00:30:02.926 A:middle
data in a dictionary and use the

00:30:02.926 --> 00:30:03.866 A:middle
function called

00:30:04.656 --> 00:30:06.466 A:middle
updateServiceInfo from within

00:30:06.466 --> 00:30:07.326 A:middle
your extension.

00:30:07.326 --> 00:30:08.626 A:middle
And that dictionary would be

00:30:08.626 --> 00:30:10.196 A:middle
available to the application as

00:30:10.196 --> 00:30:11.546 A:middle
a property of the broadcast

00:30:11.546 --> 00:30:12.146 A:middle
controller.

00:30:12.376 --> 00:30:13.596 A:middle
The name of the property is

00:30:13.796 --> 00:30:16.536 A:middle
serviceInfo and it's KVO

00:30:16.536 --> 00:30:19.136 A:middle
observable, so you can monitor

00:30:19.136 --> 00:30:21.276 A:middle
this and update the UI

00:30:21.276 --> 00:30:22.036 A:middle
appropriately.

00:30:23.346 --> 00:30:24.756 A:middle
This is it for the Live

00:30:25.166 --> 00:30:27.086 A:middle
Broadcast API overview.

00:30:27.086 --> 00:30:29.916 A:middle
And having all this information

00:30:29.916 --> 00:30:32.536 A:middle
you can build absolutely new

00:30:32.536 --> 00:30:34.576 A:middle
products, given that you also

00:30:34.576 --> 00:30:35.706 A:middle
construct the broadcast from the

00:30:35.706 --> 00:30:37.116 A:middle
Control Center you can build

00:30:37.176 --> 00:30:38.686 A:middle
third parties screen mirroring

00:30:38.686 --> 00:30:41.796 A:middle
or video share, sharing of the

00:30:41.796 --> 00:30:43.156 A:middle
screen during the video

00:30:43.156 --> 00:30:43.756 A:middle
conference.

00:30:46.086 --> 00:30:47.766 A:middle
Thank you, and please come,

00:30:47.766 --> 00:30:48.976 A:middle
please welcome Johnny back on

00:30:48.976 --> 00:30:49.336 A:middle
stage.

00:30:50.516 --> 00:30:54.396 A:middle
[ Applause ]

00:30:54.896 --> 00:30:55.996 A:middle
&gt;&gt; Thank you, Alexander.

00:30:56.356 --> 00:30:58.656 A:middle
So, as Alexander has just

00:30:58.656 --> 00:31:00.626 A:middle
stated, current broadcaster

00:31:00.626 --> 00:31:02.606 A:middle
application, you would need to

00:31:02.606 --> 00:31:04.346 A:middle
present to the user a

00:31:04.346 --> 00:31:05.586 A:middle
RPBroadcastActivity

00:31:05.586 --> 00:31:07.066 A:middle
ViewController that allows them

00:31:07.066 --> 00:31:08.526 A:middle
to choose a public service to

00:31:08.526 --> 00:31:09.986 A:middle
broadcast your application to.

00:31:10.916 --> 00:31:12.966 A:middle
Well, sometimes you don't want

00:31:12.966 --> 00:31:14.536 A:middle
to broadcast your application to

00:31:14.536 --> 00:31:15.486 A:middle
a public service.

00:31:15.846 --> 00:31:17.856 A:middle
Sometimes, you want your

00:31:17.856 --> 00:31:19.506 A:middle
application to use your

00:31:19.506 --> 00:31:20.676 A:middle
broadcasting service.

00:31:21.326 --> 00:31:23.016 A:middle
Well, with ReplayKit 2 and

00:31:23.016 --> 00:31:24.386 A:middle
Broadcast Pairing, you can do

00:31:24.386 --> 00:31:24.896 A:middle
just that.

00:31:25.766 --> 00:31:27.806 A:middle
Broadcast Pairing enables you to

00:31:27.886 --> 00:31:29.526 A:middle
fully and seamlessly integrate

00:31:29.526 --> 00:31:31.576 A:middle
your entire streaming solution,

00:31:31.776 --> 00:31:32.706 A:middle
all from within your own

00:31:32.706 --> 00:31:33.266 A:middle
application.

00:31:35.076 --> 00:31:36.586 A:middle
Here we have our budget

00:31:36.586 --> 00:31:38.186 A:middle
application and we have our

00:31:38.186 --> 00:31:39.466 A:middle
conference application that

00:31:39.466 --> 00:31:40.676 A:middle
supports ReplayKit Live

00:31:40.676 --> 00:31:42.946 A:middle
Streaming and has implemented a

00:31:42.946 --> 00:31:44.016 A:middle
broadcast extension.

00:31:44.976 --> 00:31:46.996 A:middle
I want our budget application to

00:31:46.996 --> 00:31:48.996 A:middle
stream exclusively to our

00:31:48.996 --> 00:31:50.096 A:middle
conference application's

00:31:50.096 --> 00:31:51.126 A:middle
broadcast extension.

00:31:51.726 --> 00:31:53.246 A:middle
So to do that, I'm going to

00:31:53.246 --> 00:31:54.796 A:middle
initiate a broadcast pair.

00:31:55.646 --> 00:31:57.666 A:middle
Our budget application is going

00:31:57.666 --> 00:31:59.126 A:middle
to call load with preferred

00:31:59.126 --> 00:32:00.526 A:middle
extension on the class

00:32:00.706 --> 00:32:02.526 A:middle
RPActivityViewController.

00:32:03.646 --> 00:32:05.076 A:middle
We'll get back an instance of

00:32:05.076 --> 00:32:06.316 A:middle
RPBroadcastActivity

00:32:06.316 --> 00:32:07.806 A:middle
ViewController much like we do

00:32:07.806 --> 00:32:09.016 A:middle
with general broadcast

00:32:09.016 --> 00:32:11.626 A:middle
initiation, but here is the main

00:32:11.626 --> 00:32:13.156 A:middle
difference between Broadcast

00:32:13.156 --> 00:32:14.766 A:middle
Pairing and general broadcast

00:32:14.766 --> 00:32:15.436 A:middle
initiation.

00:32:15.916 --> 00:32:17.346 A:middle
Because when you go and present

00:32:17.386 --> 00:32:19.586 A:middle
that ViewController, instead of

00:32:19.586 --> 00:32:21.306 A:middle
the user being presented with a

00:32:21.406 --> 00:32:22.486 A:middle
picker that allows them to

00:32:22.486 --> 00:32:24.796 A:middle
choose a public service, they'll

00:32:24.796 --> 00:32:26.726 A:middle
be presented with an alert that

00:32:26.726 --> 00:32:28.156 A:middle
indicates to them your

00:32:28.156 --> 00:32:30.066 A:middle
application's intent to use a

00:32:30.116 --> 00:32:32.076 A:middle
particular broadcast service.

00:32:32.566 --> 00:32:34.316 A:middle
Here, our budget application

00:32:34.316 --> 00:32:35.156 A:middle
wants to stream to our

00:32:35.156 --> 00:32:36.276 A:middle
conference application's

00:32:36.276 --> 00:32:37.366 A:middle
broadcast service.

00:32:38.076 --> 00:32:39.596 A:middle
When a user taps accept,

00:32:40.536 --> 00:32:41.966 A:middle
ReplayKit will immediately

00:32:41.966 --> 00:32:43.216 A:middle
launch the paired broadcast

00:32:43.216 --> 00:32:45.046 A:middle
extension allowing the user to

00:32:45.046 --> 00:32:47.166 A:middle
input any information that might

00:32:47.166 --> 00:32:48.446 A:middle
be important to the broadcasting

00:32:48.446 --> 00:32:48.796 A:middle
session.

00:32:50.086 --> 00:32:51.196 A:middle
When the user has finished

00:32:51.196 --> 00:32:52.766 A:middle
inputting all their information,

00:32:54.076 --> 00:32:55.696 A:middle
ReplayKit will start

00:32:55.906 --> 00:32:58.046 A:middle
broadcasting to the paired

00:32:58.046 --> 00:32:59.016 A:middle
broadcast extension.

00:32:59.446 --> 00:33:00.966 A:middle
And just like that, our budget

00:33:00.966 --> 00:33:03.046 A:middle
application is now streaming

00:33:03.046 --> 00:33:04.886 A:middle
exclusively to its paired

00:33:04.886 --> 00:33:05.836 A:middle
broadcast extension.

00:33:06.366 --> 00:33:08.916 A:middle
Let's go ahead and take a look

00:33:08.916 --> 00:33:10.196 A:middle
at the API for Broadcast

00:33:10.196 --> 00:33:10.406 A:middle
Pairing.

00:33:10.936 --> 00:33:13.876 A:middle
The API for Broadcast Pairing is

00:33:13.876 --> 00:33:14.546 A:middle
very simple.

00:33:15.506 --> 00:33:16.936 A:middle
It's a new class method on

00:33:16.986 --> 00:33:18.386 A:middle
RPBroadcastActivity

00:33:18.386 --> 00:33:19.566 A:middle
ViewController called

00:33:19.566 --> 00:33:21.046 A:middle
load(withPreferredExtension.

00:33:21.896 --> 00:33:23.256 A:middle
We'll hand you back an instance

00:33:23.256 --> 00:33:23.496 A:middle
of

00:33:23.496 --> 00:33:25.046 A:middle
broadcastActivityViewController

00:33:25.136 --> 00:33:26.346 A:middle
that you can then present to

00:33:26.346 --> 00:33:26.926 A:middle
your users.

00:33:28.026 --> 00:33:29.276 A:middle
Let's jump in and take a look at

00:33:29.276 --> 00:33:30.806 A:middle
how our budget application is

00:33:30.806 --> 00:33:32.066 A:middle
going to imitate a broadcast

00:33:32.066 --> 00:33:34.066 A:middle
pair in a little bit more

00:33:34.736 --> 00:33:34.886 A:middle
detail.

00:33:35.046 --> 00:33:36.366 A:middle
Here, I have a method called

00:33:36.576 --> 00:33:38.266 A:middle
didPressBroadcastPairButton.

00:33:38.826 --> 00:33:40.536 A:middle
Inside of it, I'm simply going

00:33:40.536 --> 00:33:40.816 A:middle
to call

00:33:40.816 --> 00:33:42.936 A:middle
load(withPreferredExtension: on

00:33:42.936 --> 00:33:44.756 A:middle
the class RPBroadcastActivity

00:33:44.756 --> 00:33:45.316 A:middle
ViewController.

00:33:45.976 --> 00:33:47.206 A:middle
We'll go ahead and get back an

00:33:47.206 --> 00:33:48.956 A:middle
instance of RPBroadcastActivity

00:33:48.956 --> 00:33:49.966 A:middle
ViewController that.

00:33:50.316 --> 00:33:52.106 A:middle
When we go ahead and present the

00:33:52.106 --> 00:33:54.456 A:middle
user be presented with an alert

00:33:54.456 --> 00:33:55.746 A:middle
that indicates to them my

00:33:55.746 --> 00:33:57.086 A:middle
application's intent to use a

00:33:57.086 --> 00:33:58.936 A:middle
particular broadcasting service.

00:33:59.616 --> 00:34:01.286 A:middle
Once the user accepts, ReplayKit

00:34:01.286 --> 00:34:02.386 A:middle
will handle the rest and we'll

00:34:02.536 --> 00:34:05.166 A:middle
the broadcasting extension

00:34:05.166 --> 00:34:05.836 A:middle
that's been paired.

00:34:09.236 --> 00:34:10.636 A:middle
Broadcast Pairing has been

00:34:10.636 --> 00:34:11.826 A:middle
designed so that the

00:34:11.826 --> 00:34:13.356 A:middle
broadcasting app and the

00:34:13.356 --> 00:34:15.136 A:middle
broadcasting service are tightly

00:34:15.136 --> 00:34:15.576 A:middle
coupled.

00:34:16.066 --> 00:34:18.576 A:middle
So, initiating a Broadcast

00:34:18.576 --> 00:34:20.226 A:middle
Pairing session, developers are

00:34:20.226 --> 00:34:22.106 A:middle
going to have to supply a

00:34:22.106 --> 00:34:23.596 A:middle
bundleID for the broadcast

00:34:23.596 --> 00:34:24.056 A:middle
extension.

00:34:25.086 --> 00:34:26.926 A:middle
Users will also need to accept

00:34:26.926 --> 00:34:28.746 A:middle
the broadcasting pair through

00:34:28.746 --> 00:34:30.346 A:middle
the alert, which will be shown

00:34:30.416 --> 00:34:32.096 A:middle
every time you wish to initiate

00:34:32.096 --> 00:34:33.236 A:middle
a Broadcasting Pair session.

00:34:35.066 --> 00:34:37.036 A:middle
Broadcast Pairing allows you to

00:34:37.036 --> 00:34:38.906 A:middle
seamlessly integrate your entire

00:34:38.906 --> 00:34:40.566 A:middle
streaming solution all within

00:34:40.566 --> 00:34:41.386 A:middle
your own application.

00:34:43.896 --> 00:34:46.006 A:middle
Now, we know that creating

00:34:46.006 --> 00:34:47.726 A:middle
replays and Live Streams with

00:34:47.726 --> 00:34:49.716 A:middle
user commentary is a fantastic

00:34:49.716 --> 00:34:51.746 A:middle
way to get new user engagement

00:34:51.746 --> 00:34:53.656 A:middle
in your application as well as

00:34:53.656 --> 00:34:55.036 A:middle
generating a community around

00:34:55.036 --> 00:34:55.836 A:middle
your application.

00:34:56.856 --> 00:34:57.996 A:middle
That's why last year we

00:34:57.996 --> 00:34:59.476 A:middle
introduced front camera support

00:34:59.476 --> 00:35:00.086 A:middle
for ReplayKit.

00:35:00.466 --> 00:35:01.846 A:middle
And which is why this year we're

00:35:01.846 --> 00:35:03.826 A:middle
also introducing Fast Camera

00:35:03.826 --> 00:35:07.246 A:middle
Switching for ReplayKit 2.

00:35:07.366 --> 00:35:09.256 A:middle
Fast Camera Switching allows you

00:35:09.256 --> 00:35:11.586 A:middle
to change the camera feed in the

00:35:11.586 --> 00:35:13.196 A:middle
camera preview view found in

00:35:13.196 --> 00:35:15.006 A:middle
RPScreenRecorder to use either

00:35:15.006 --> 00:35:16.606 A:middle
the front camera or the rear

00:35:16.606 --> 00:35:16.946 A:middle
camera.

00:35:18.066 --> 00:35:19.606 A:middle
The camera preview view found in

00:35:19.606 --> 00:35:21.406 A:middle
RPScreenRecorder is a subclass

00:35:21.406 --> 00:35:23.356 A:middle
of UIView, so it can be added to

00:35:23.356 --> 00:35:24.656 A:middle
just about any application.

00:35:25.936 --> 00:35:27.656 A:middle
Developers are responsible for

00:35:27.656 --> 00:35:29.846 A:middle
UI elements that allow the user

00:35:29.846 --> 00:35:31.476 A:middle
to present and dismiss the

00:35:31.646 --> 00:35:33.126 A:middle
camera preview view, as well as

00:35:33.126 --> 00:35:35.566 A:middle
UI elements to allow the user to

00:35:35.566 --> 00:35:36.806 A:middle
switch the camera preview view.

00:35:37.836 --> 00:35:39.156 A:middle
Let's go ahead and take a quick

00:35:39.156 --> 00:35:40.546 A:middle
look at the API for Fast Camera

00:35:40.546 --> 00:35:40.856 A:middle
Switching.

00:35:42.376 --> 00:35:43.836 A:middle
The API for Fast Camera

00:35:43.836 --> 00:35:45.236 A:middle
Switching is really simple.

00:35:45.536 --> 00:35:47.266 A:middle
It consists of a new property on

00:35:47.266 --> 00:35:48.756 A:middle
RPScreenRecorder called

00:35:48.756 --> 00:35:50.966 A:middle
cameraPosition, which is used to

00:35:50.966 --> 00:35:52.486 A:middle
note the current cameraPosition

00:35:52.536 --> 00:35:54.016 A:middle
for the sharedRecorder instance.

00:35:54.956 --> 00:35:56.826 A:middle
CameraPosition is an enumeration

00:35:56.906 --> 00:35:58.886 A:middle
RPCameraPosition which includes

00:35:59.076 --> 00:36:01.196 A:middle
RPCameraPosition front and

00:36:01.346 --> 00:36:03.256 A:middle
RPCameraPosition back which is

00:36:03.256 --> 00:36:04.486 A:middle
used for the front and back

00:36:04.486 --> 00:36:05.556 A:middle
cameras respectively.

00:36:06.516 --> 00:36:07.536 A:middle
Let's go ahead and jump into an

00:36:07.536 --> 00:36:08.756 A:middle
example of how we can start

00:36:08.756 --> 00:36:12.156 A:middle
using Fast Camera Switching.

00:36:12.296 --> 00:36:13.936 A:middle
Wow, that photo looked a lot

00:36:13.936 --> 00:36:15.806 A:middle
better on a smaller screen.

00:36:16.426 --> 00:36:17.656 A:middle
Here, we have a function called

00:36:17.656 --> 00:36:18.456 A:middle
showPreviewView.

00:36:19.036 --> 00:36:20.356 A:middle
Inside we're simply going to

00:36:20.356 --> 00:36:21.546 A:middle
grab this sharedRecorder

00:36:21.546 --> 00:36:23.256 A:middle
instance on RPScreenRecorder.

00:36:23.756 --> 00:36:25.056 A:middle
From there, I'll grab the

00:36:25.056 --> 00:36:26.826 A:middle
cameraPreviewView for the RP,

00:36:26.826 --> 00:36:28.296 A:middle
for the sharedRecorder instance.

00:36:28.696 --> 00:36:29.856 A:middle
Since the sharedRecorder

00:36:29.856 --> 00:36:32.126 A:middle
instance and its cameraView is a

00:36:32.126 --> 00:36:33.856 A:middle
subclass of UI view, I'm simply

00:36:33.856 --> 00:36:35.396 A:middle
going to add it as a subview to

00:36:35.396 --> 00:36:36.676 A:middle
my view in my application.

00:36:37.476 --> 00:36:38.926 A:middle
And just like that, we're now

00:36:38.926 --> 00:36:40.786 A:middle
using the cameraPreviewView and

00:36:40.786 --> 00:36:42.646 A:middle
the front facing camera for our

00:36:42.646 --> 00:36:43.426 A:middle
video commentary.

00:36:44.366 --> 00:36:45.626 A:middle
Let's go ahead and take a quick

00:36:45.626 --> 00:36:46.836 A:middle
look at how we can use Fast

00:36:46.836 --> 00:36:47.406 A:middle
Camera Switching.

00:36:49.156 --> 00:36:50.676 A:middle
Here, I have a method called

00:36:50.676 --> 00:36:52.066 A:middle
didPressCameraSwitch.

00:36:52.326 --> 00:36:53.786 A:middle
Again, I'm simply going to grab

00:36:53.786 --> 00:36:55.896 A:middle
a sharedRecorder instance from

00:36:55.896 --> 00:36:56.846 A:middle
our RPScreenRecorder.

00:36:57.526 --> 00:36:58.876 A:middle
I'm really interested in knowing

00:36:58.876 --> 00:37:00.326 A:middle
what the current cameraPosition

00:37:00.326 --> 00:37:00.576 A:middle
is.

00:37:00.736 --> 00:37:01.876 A:middle
So, in our method here, we're

00:37:02.336 --> 00:37:03.356 A:middle
going to check to see what the

00:37:03.356 --> 00:37:04.616 A:middle
current cameraPosition is.

00:37:04.896 --> 00:37:06.096 A:middle
And whatever it is, I'm going to

00:37:06.096 --> 00:37:07.236 A:middle
switch it to its opposite.

00:37:07.486 --> 00:37:09.116 A:middle
So here, We notice that our

00:37:09.116 --> 00:37:10.196 A:middle
cameraPosition for our

00:37:10.196 --> 00:37:11.456 A:middle
sharedRecorder is using

00:37:11.456 --> 00:37:12.996 A:middle
RPCameraPosition.front.

00:37:13.456 --> 00:37:14.536 A:middle
I'm simply going to set the

00:37:14.536 --> 00:37:16.336 A:middle
shareRecorder's cameraPosition

00:37:16.436 --> 00:37:18.086 A:middle
to be RPCameraPosition.back.

00:37:18.876 --> 00:37:20.516 A:middle
And just like that, our preview

00:37:20.516 --> 00:37:21.556 A:middle
view is now using the rear

00:37:21.556 --> 00:37:23.096 A:middle
camera for its video commentary.

00:37:23.936 --> 00:37:26.506 A:middle
It really is just that easy and

00:37:26.506 --> 00:37:28.306 A:middle
it really is just that fast.

00:37:29.566 --> 00:37:31.756 A:middle
Fast Camera Switching will give

00:37:31.756 --> 00:37:33.616 A:middle
you additional tools to provide

00:37:33.616 --> 00:37:35.126 A:middle
your users with to create more

00:37:35.126 --> 00:37:36.936 A:middle
engaging video commentary in the

00:37:36.936 --> 00:37:37.966 A:middle
content their creating in your

00:37:37.966 --> 00:37:38.546 A:middle
application.

00:37:40.616 --> 00:37:42.956 A:middle
We have covered a lot today.

00:37:43.216 --> 00:37:44.336 A:middle
So let's go ahead and take a

00:37:44.336 --> 00:37:45.106 A:middle
minute to recap.

00:37:45.656 --> 00:37:47.686 A:middle
In ReplayKit 2, we introduced

00:37:47.956 --> 00:37:49.676 A:middle
In-App Screen Capture, which is

00:37:49.676 --> 00:37:51.556 A:middle
a powerful new API that's going

00:37:51.556 --> 00:37:53.826 A:middle
to give you direct access to

00:37:53.826 --> 00:37:55.776 A:middle
your application's own audio,

00:37:56.186 --> 00:37:58.066 A:middle
video, and microphone content

00:37:58.156 --> 00:37:59.236 A:middle
straight from ReplayKit.

00:38:00.816 --> 00:38:02.506 A:middle
With iOS Screen Recording and

00:38:02.506 --> 00:38:04.736 A:middle
Broadcast, users can now record

00:38:04.956 --> 00:38:07.236 A:middle
and broadcast their entire iOS

00:38:07.236 --> 00:38:09.176 A:middle
screen experience straight from

00:38:09.176 --> 00:38:09.746 A:middle
Control Center.

00:38:11.626 --> 00:38:13.046 A:middle
We introduced Broadcast Pairing

00:38:13.256 --> 00:38:15.026 A:middle
which enable you to seamlessly

00:38:15.026 --> 00:38:16.566 A:middle
integrate your entire streaming

00:38:16.566 --> 00:38:17.976 A:middle
solution all within your own

00:38:17.976 --> 00:38:18.536 A:middle
application.

00:38:19.766 --> 00:38:21.756 A:middle
And finally, with Fast Camera

00:38:21.756 --> 00:38:23.166 A:middle
Switching you now have more

00:38:23.166 --> 00:38:24.996 A:middle
tools to provide your users with

00:38:25.126 --> 00:38:26.596 A:middle
to create more engaging video

00:38:26.596 --> 00:38:27.106 A:middle
commentary.

00:38:28.856 --> 00:38:30.256 A:middle
For more information about our

00:38:30.256 --> 00:38:31.546 A:middle
session today, visit us at

00:38:31.546 --> 00:38:33.036 A:middle
developer.apple.com.

00:38:33.096 --> 00:38:34.856 A:middle
We are session 606.

00:38:35.316 --> 00:38:36.286 A:middle
We hope you have a wonderful

00:38:36.356 --> 00:38:37.076 A:middle
WWDC.

00:38:37.396 --> 00:38:37.716 A:middle
Thank you.

00:38:38.516 --> 00:38:41.370 A:middle
[ Applause ]