WEBVTT

00:00:27.516 --> 00:00:33.196 A:middle
[ Applause ]

00:00:33.696 --> 00:00:35.746 A:middle
&gt;&gt; Good morning and welcome to

00:00:35.746 --> 00:00:37.316 A:middle
your Apps and Evolving Network

00:00:37.376 --> 00:00:38.326 A:middle
Security Standards.

00:00:38.846 --> 00:00:41.086 A:middle
My name is Bailey Basile and I'm

00:00:41.086 --> 00:00:42.636 A:middle
secure transports engineer at

00:00:42.636 --> 00:00:43.086 A:middle
Apple.

00:00:43.856 --> 00:00:45.406 A:middle
Today, my colleague Chris and I

00:00:45.406 --> 00:00:46.966 A:middle
will be talking to you about the

00:00:46.966 --> 00:00:48.876 A:middle
ways that network security

00:00:48.916 --> 00:00:51.106 A:middle
standards change and how that

00:00:51.106 --> 00:00:52.616 A:middle
affects you and your apps.

00:00:53.766 --> 00:00:55.896 A:middle
We know that all of you care as

00:00:55.896 --> 00:00:57.936 A:middle
much about your users' privacy

00:00:57.936 --> 00:00:59.256 A:middle
and security as we do.

00:00:59.256 --> 00:01:01.446 A:middle
And that's why when you see

00:01:01.446 --> 00:01:04.226 A:middle
attacks like BEAST, and CRIME,

00:01:04.306 --> 00:01:06.656 A:middle
and DROWN, you worry about

00:01:06.656 --> 00:01:09.856 A:middle
whether your app is affected.

00:01:10.336 --> 00:01:13.346 A:middle
Unfortunately, all protocols

00:01:13.476 --> 00:01:15.856 A:middle
age, and as they are in the

00:01:15.856 --> 00:01:18.166 A:middle
public more attacks are found

00:01:18.166 --> 00:01:19.086 A:middle
over time.

00:01:20.136 --> 00:01:23.356 A:middle
Even worse, the algorithms upon

00:01:23.356 --> 00:01:26.906 A:middle
which these standards rely have

00:01:26.906 --> 00:01:29.346 A:middle
a built-in shelf life.

00:01:29.836 --> 00:01:32.126 A:middle
That means that as they age and

00:01:32.206 --> 00:01:34.886 A:middle
as computers get faster, those

00:01:34.886 --> 00:01:36.726 A:middle
algorithms become vulnerable to

00:01:36.726 --> 00:01:38.926 A:middle
attacks like collisions,

00:01:39.346 --> 00:01:41.696 A:middle
factorization and brute force.

00:01:43.086 --> 00:01:44.856 A:middle
When you hear about these scary

00:01:44.896 --> 00:01:47.286 A:middle
sounding attacks like a FLAME

00:01:47.616 --> 00:01:49.586 A:middle
and BREACH, and POODLE.

00:01:49.586 --> 00:01:51.136 A:middle
Well, maybe poodle doesn't sound

00:01:51.136 --> 00:01:51.686 A:middle
so scary.

00:01:52.796 --> 00:01:54.316 A:middle
When you hear about these scary

00:01:54.316 --> 00:01:56.856 A:middle
attacks, you wonder what you can

00:01:56.856 --> 00:01:59.336 A:middle
do to prevent your app from

00:01:59.336 --> 00:02:01.066 A:middle
appearing in the press the next

00:02:01.406 --> 00:02:03.146 A:middle
time a big attach happens.

00:02:03.816 --> 00:02:05.376 A:middle
And that's why today, I'm going

00:02:05.376 --> 00:02:06.736 A:middle
to be talking about some best

00:02:06.736 --> 00:02:09.466 A:middle
practices that you can follow in

00:02:09.496 --> 00:02:11.926 A:middle
order to ensure that your app is

00:02:11.926 --> 00:02:12.716 A:middle
not affected.

00:02:13.166 --> 00:02:14.986 A:middle
I'll also talk a little bit

00:02:14.986 --> 00:02:18.896 A:middle
about how Apple helps you by

00:02:18.896 --> 00:02:20.956 A:middle
removing insecure options from

00:02:20.956 --> 00:02:21.916 A:middle
our platforms.

00:02:23.176 --> 00:02:24.416 A:middle
Chris will then give you an

00:02:24.466 --> 00:02:26.356 A:middle
update on app transport

00:02:26.396 --> 00:02:28.156 A:middle
security, which is a mechanism

00:02:28.156 --> 00:02:30.736 A:middle
that you can use in your apps in

00:02:30.736 --> 00:02:32.286 A:middle
order to ensure that best

00:02:32.286 --> 00:02:33.856 A:middle
practices are enforced.

00:02:35.236 --> 00:02:36.916 A:middle
Finally, Chris will be giving

00:02:36.916 --> 00:02:39.466 A:middle
you a talk about Transport Layer

00:02:39.466 --> 00:02:42.386 A:middle
Security, or TLS and an exciting

00:02:42.386 --> 00:02:44.416 A:middle
new evolution in that protocol.

00:02:45.436 --> 00:02:46.966 A:middle
So, let's dive right into those

00:02:47.006 --> 00:02:48.046 A:middle
best practices.

00:02:48.886 --> 00:02:50.876 A:middle
I'll start at a high level.

00:02:51.576 --> 00:02:53.256 A:middle
First, the biggest thing you

00:02:53.256 --> 00:02:56.386 A:middle
have to remember, because as I

00:02:56.386 --> 00:02:58.476 A:middle
said, those protocols age, and

00:02:58.476 --> 00:03:00.376 A:middle
those standards have a built-in

00:03:00.376 --> 00:03:03.186 A:middle
shelf life, you can't set and

00:03:03.236 --> 00:03:05.576 A:middle
forget the security of your app.

00:03:06.486 --> 00:03:08.246 A:middle
You have to go through on a

00:03:08.246 --> 00:03:10.886 A:middle
regular basis and make sure that

00:03:10.886 --> 00:03:12.386 A:middle
your app is up to date.

00:03:12.806 --> 00:03:14.926 A:middle
And to know what to change, you

00:03:14.926 --> 00:03:16.516 A:middle
should be following standards

00:03:16.556 --> 00:03:19.226 A:middle
bodies, academic research and

00:03:19.226 --> 00:03:21.506 A:middle
industry best practices.

00:03:22.256 --> 00:03:24.706 A:middle
But the good news for all of

00:03:24.706 --> 00:03:26.996 A:middle
you, is that you are already

00:03:26.996 --> 00:03:28.776 A:middle
doing this because you're here

00:03:28.866 --> 00:03:29.366 A:middle
today.

00:03:30.616 --> 00:03:34.076 A:middle
If you are a developer or a

00:03:34.076 --> 00:03:35.916 A:middle
library developer, you may be

00:03:35.916 --> 00:03:38.416 A:middle
using a third-party library in

00:03:38.416 --> 00:03:39.466 A:middle
your app.

00:03:39.466 --> 00:03:41.276 A:middle
And those can be very risky.

00:03:41.776 --> 00:03:42.986 A:middle
In particular, if you're

00:03:42.986 --> 00:03:44.226 A:middle
integrating a third-party

00:03:44.226 --> 00:03:46.136 A:middle
library you have to be sure you

00:03:46.226 --> 00:03:47.246 A:middle
keep it up to date.

00:03:47.696 --> 00:03:49.376 A:middle
A library that you integrated

00:03:49.486 --> 00:03:52.156 A:middle
three years ago is already out

00:03:52.156 --> 00:03:54.576 A:middle
of date and maybe using weakened

00:03:54.646 --> 00:03:55.406 A:middle
security.

00:03:55.636 --> 00:03:57.446 A:middle
That means that your users are

00:03:57.446 --> 00:03:59.166 A:middle
not getting the security that

00:03:59.166 --> 00:03:59.766 A:middle
you want.

00:04:01.456 --> 00:04:04.096 A:middle
If you're using our APIs, we

00:04:04.096 --> 00:04:05.026 A:middle
help you here.

00:04:05.386 --> 00:04:07.396 A:middle
First, we remove many of the

00:04:07.396 --> 00:04:10.146 A:middle
insecure options from our APIs

00:04:10.416 --> 00:04:12.406 A:middle
so that you aren't affected.

00:04:13.756 --> 00:04:15.586 A:middle
We also make available App

00:04:15.846 --> 00:04:18.256 A:middle
Transport Security, or ATS, in

00:04:18.256 --> 00:04:19.736 A:middle
order for you to be able to

00:04:19.736 --> 00:04:21.756 A:middle
enforce those best practices in

00:04:21.756 --> 00:04:23.986 A:middle
your app, as long as you are

00:04:23.986 --> 00:04:26.246 A:middle
avoiding ATS exceptions.

00:04:27.986 --> 00:04:29.436 A:middle
Finally, when those attacks

00:04:29.686 --> 00:04:32.236 A:middle
happen, before those attacks

00:04:32.236 --> 00:04:34.446 A:middle
happen you have to remind your

00:04:34.476 --> 00:04:37.306 A:middle
clients, investors and managers

00:04:37.646 --> 00:04:39.246 A:middle
that it is worth the maintenance

00:04:39.296 --> 00:04:42.126 A:middle
cost to update your app so that

00:04:42.126 --> 00:04:44.376 A:middle
when the next attack happens you

00:04:44.376 --> 00:04:46.526 A:middle
are not scrambling to remediate

00:04:46.526 --> 00:04:48.716 A:middle
the problem wasting time and

00:04:48.716 --> 00:04:51.536 A:middle
energy and money as your app

00:04:52.166 --> 00:04:56.516 A:middle
appears in the press named as

00:04:56.626 --> 00:04:59.086 A:middle
one of the bad apps.

00:04:59.246 --> 00:05:01.196 A:middle
So, let's take a look back at

00:05:01.196 --> 00:05:02.376 A:middle
those attacks I was talking

00:05:02.376 --> 00:05:03.076 A:middle
about earlier.

00:05:04.046 --> 00:05:05.246 A:middle
I'd like to go through some

00:05:05.286 --> 00:05:07.126 A:middle
detailed best practices that you

00:05:07.126 --> 00:05:08.806 A:middle
can use to avoid these attacks.

00:05:09.346 --> 00:05:11.036 A:middle
Specifically, in the area of

00:05:11.036 --> 00:05:13.506 A:middle
encryption, cryptographic

00:05:13.506 --> 00:05:17.776 A:middle
hashes, public keys, protocols,

00:05:18.446 --> 00:05:19.846 A:middle
and revocation.

00:05:19.846 --> 00:05:23.326 A:middle
So, let's start right off the

00:05:23.326 --> 00:05:24.546 A:middle
bat with encryption.

00:05:25.376 --> 00:05:27.236 A:middle
Encryption, as all of you know

00:05:27.236 --> 00:05:29.786 A:middle
is a mechanism that you can use

00:05:29.786 --> 00:05:31.996 A:middle
to prevent your users' data from

00:05:31.996 --> 00:05:33.756 A:middle
being read by an attacker.

00:05:34.876 --> 00:05:36.556 A:middle
But unfortunately, some of the

00:05:36.556 --> 00:05:38.246 A:middle
algorithms that we've been using

00:05:38.246 --> 00:05:40.036 A:middle
for encryption for a long time

00:05:40.396 --> 00:05:42.536 A:middle
are vulnerable to attacks where

00:05:42.536 --> 00:05:46.226 A:middle
the key material or the plain

00:05:46.226 --> 00:05:48.136 A:middle
text could be recovered by an

00:05:48.166 --> 00:05:48.766 A:middle
attacker.

00:05:49.126 --> 00:05:51.096 A:middle
In particular, RC 4 is

00:05:51.176 --> 00:05:53.986 A:middle
vulnerable to an attack where

00:05:53.986 --> 00:05:55.896 A:middle
the key is recoverable within as

00:05:55.896 --> 00:05:57.646 A:middle
little as three days.

00:05:58.636 --> 00:06:00.906 A:middle
Furthermore, the CBC modes of

00:06:00.906 --> 00:06:04.856 A:middle
both Triple-DES and AES are

00:06:04.856 --> 00:06:06.816 A:middle
vulnerable to attacks like BEAST

00:06:07.186 --> 00:06:11.036 A:middle
and Lucky 13 that mean that the

00:06:11.516 --> 00:06:13.106 A:middle
algorithm is not providing the

00:06:13.206 --> 00:06:15.086 A:middle
same level of security as you

00:06:15.086 --> 00:06:18.646 A:middle
want your users to have.

00:06:19.366 --> 00:06:22.696 A:middle
We plan to remove both RC 4 and

00:06:22.696 --> 00:06:25.336 A:middle
Triple-DES from TLS across our

00:06:25.396 --> 00:06:26.856 A:middle
platforms in the future.

00:06:27.236 --> 00:06:29.916 A:middle
So, now is the time to upgrade.

00:06:31.336 --> 00:06:32.926 A:middle
Instead, you should be using

00:06:32.996 --> 00:06:34.526 A:middle
authenticated encryption

00:06:34.526 --> 00:06:37.206 A:middle
algorithm like AES-GCM or

00:06:37.206 --> 00:06:39.726 A:middle
ChaCha20/Poly1305.

00:06:40.686 --> 00:06:42.026 A:middle
Those will ensure that you have

00:06:42.026 --> 00:06:45.426 A:middle
both the best encryption and can

00:06:45.426 --> 00:06:47.516 A:middle
detect when that data has been

00:06:47.516 --> 00:06:48.196 A:middle
modified.

00:06:49.306 --> 00:06:50.726 A:middle
Speaking of modified data.

00:06:51.126 --> 00:06:52.156 A:middle
Let's talk now about

00:06:52.156 --> 00:06:53.826 A:middle
cryptographic hashes.

00:06:54.026 --> 00:06:56.516 A:middle
As you know, cryptographic

00:06:56.516 --> 00:06:58.446 A:middle
hashes are a mechanism that

00:06:58.446 --> 00:07:01.136 A:middle
allows you to detect when the

00:07:01.136 --> 00:07:03.556 A:middle
input data has been changed.

00:07:04.016 --> 00:07:05.716 A:middle
But unfortunately, some of the

00:07:05.716 --> 00:07:07.536 A:middle
cryptographic hash algorithms

00:07:07.586 --> 00:07:09.896 A:middle
that we've been using are

00:07:09.896 --> 00:07:11.086 A:middle
vulnerable to what's called a

00:07:11.086 --> 00:07:11.856 A:middle
collision attack.

00:07:12.536 --> 00:07:14.126 A:middle
A collision attack is where two

00:07:14.126 --> 00:07:15.866 A:middle
different inputs produce the

00:07:15.866 --> 00:07:17.546 A:middle
exact same output.

00:07:17.846 --> 00:07:21.046 A:middle
And so, you can't tell when an

00:07:21.616 --> 00:07:23.606 A:middle
attacker has modified the data

00:07:23.896 --> 00:07:25.396 A:middle
because the hashes will be the

00:07:25.476 --> 00:07:25.986 A:middle
same.

00:07:26.436 --> 00:07:29.716 A:middle
In particular, both MD 5 and

00:07:29.716 --> 00:07:32.026 A:middle
SHA-1 have demonstrated

00:07:32.026 --> 00:07:32.636 A:middle
collision attacks.

00:07:34.296 --> 00:07:37.096 A:middle
In fact, an MD-5 collision was

00:07:37.096 --> 00:07:39.296 A:middle
used in the Flame malware in

00:07:39.296 --> 00:07:41.896 A:middle
order to bypass platform

00:07:41.946 --> 00:07:43.756 A:middle
security and gain access to

00:07:43.756 --> 00:07:44.826 A:middle
users' systems.

00:07:45.536 --> 00:07:48.506 A:middle
We removed trust in all MD-5

00:07:48.586 --> 00:07:50.096 A:middle
signed certificates across our

00:07:50.156 --> 00:07:52.166 A:middle
platforms in previous years.

00:07:53.736 --> 00:07:56.616 A:middle
SHA-1 just recently had an

00:07:56.886 --> 00:07:57.036 A:middle
attack.

00:07:57.036 --> 00:07:58.726 A:middle
The Shouted attack was performed

00:07:59.166 --> 00:08:01.656 A:middle
earlier this year, and so this

00:08:01.656 --> 00:08:03.396 A:middle
is the freshest information.

00:08:03.856 --> 00:08:06.806 A:middle
Knowing that the SHA-1 one

00:08:06.926 --> 00:08:08.516 A:middle
attack was imminent, we removed

00:08:08.596 --> 00:08:10.756 A:middle
trust in all SHA-1 signed

00:08:10.756 --> 00:08:13.446 A:middle
certificates for TLS servers

00:08:13.896 --> 00:08:16.936 A:middle
when connecting through WebKit

00:08:17.066 --> 00:08:18.126 A:middle
and Safari.

00:08:19.026 --> 00:08:20.376 A:middle
And we've seen such an

00:08:20.376 --> 00:08:23.346 A:middle
improvement in the disk use of

00:08:23.346 --> 00:08:25.696 A:middle
SHA-1 certificates, that today

00:08:25.776 --> 00:08:26.856 A:middle
I'm announcing that we're

00:08:26.856 --> 00:08:29.516 A:middle
removing trust across all TLS

00:08:29.716 --> 00:08:32.016 A:middle
connections for SHA-1 signed

00:08:32.056 --> 00:08:32.716 A:middle
certificates.

00:08:33.306 --> 00:08:35.066 A:middle
I'll talk a little bit more

00:08:35.066 --> 00:08:36.616 A:middle
about how that affects you and

00:08:36.616 --> 00:08:38.296 A:middle
your app later on.

00:08:39.316 --> 00:08:41.216 A:middle
Instead, you should be using any

00:08:41.216 --> 00:08:44.296 A:middle
of the SHA-2 family of hashes in

00:08:44.296 --> 00:08:46.746 A:middle
order to get that best security

00:08:47.106 --> 00:08:48.766 A:middle
and avoid these collision

00:08:50.156 --> 00:08:50.316 A:middle
attacks.

00:08:50.606 --> 00:08:51.836 A:middle
Next, I'd like to talk about

00:08:52.046 --> 00:08:52.786 A:middle
public keys.

00:08:53.366 --> 00:08:55.746 A:middle
Public keys, as you know, are a

00:08:55.746 --> 00:08:58.346 A:middle
mechanism that provides an

00:08:58.346 --> 00:09:00.746 A:middle
identity, a sort of identity for

00:09:00.746 --> 00:09:01.186 A:middle
you.

00:09:01.486 --> 00:09:03.906 A:middle
Such that other people can

00:09:03.906 --> 00:09:05.676 A:middle
verify that something you signed

00:09:05.676 --> 00:09:07.526 A:middle
was signed by you and not

00:09:07.586 --> 00:09:08.206 A:middle
someone else.

00:09:08.936 --> 00:09:11.256 A:middle
And can be used to send you

00:09:11.256 --> 00:09:14.026 A:middle
encrypted data that only you can

00:09:14.026 --> 00:09:15.906 A:middle
decrypt with your private key.

00:09:16.956 --> 00:09:19.646 A:middle
But unfortunately, RSA key sizes

00:09:19.846 --> 00:09:22.236 A:middle
smaller than 1024 bits are

00:09:22.236 --> 00:09:25.856 A:middle
vulnerable to factorization

00:09:25.916 --> 00:09:26.166 A:middle
attacks.

00:09:27.226 --> 00:09:30.566 A:middle
In particular, a 768-bit RSA key

00:09:30.566 --> 00:09:33.966 A:middle
was factored back in 2009 and

00:09:34.476 --> 00:09:36.806 A:middle
that's why we removed trust from

00:09:36.866 --> 00:09:39.436 A:middle
any certificates using key sizes

00:09:39.536 --> 00:09:42.866 A:middle
smaller than 1024 bit RSA back

00:09:42.866 --> 00:09:44.956 A:middle
in the spring of 2016.

00:09:46.216 --> 00:09:49.916 A:middle
But the reality is even 1024 bit

00:09:49.916 --> 00:09:52.856 A:middle
RSA key sizes are not good

00:09:52.856 --> 00:09:53.226 A:middle
enough.

00:09:53.566 --> 00:09:55.796 A:middle
And we expect that an attack on

00:09:55.796 --> 00:09:58.866 A:middle
a 1024 bit RSA key is imminent.

00:09:59.216 --> 00:10:02.556 A:middle
And that's why today I'm

00:10:02.556 --> 00:10:04.136 A:middle
announcing that we're removing

00:10:04.136 --> 00:10:06.836 A:middle
trust from certificates using

00:10:06.906 --> 00:10:09.346 A:middle
key sizes smaller than 2048 bits

00:10:09.756 --> 00:10:11.976 A:middle
across all TLS connections to

00:10:11.976 --> 00:10:12.546 A:middle
servers.

00:10:13.496 --> 00:10:15.406 A:middle
In order to avoid these removals

00:10:15.866 --> 00:10:18.586 A:middle
and ensure that you have best

00:10:18.726 --> 00:10:20.596 A:middle
security, you should be using

00:10:20.656 --> 00:10:22.986 A:middle
RSA key sizes greater than or

00:10:23.036 --> 00:10:26.526 A:middle
equal to 2048 bits, or any of

00:10:26.526 --> 00:10:27.966 A:middle
the elliptic curves that are

00:10:27.966 --> 00:10:29.916 A:middle
trusted on our platforms.

00:10:30.576 --> 00:10:33.396 A:middle
Next, I'd like to spend some

00:10:33.396 --> 00:10:34.916 A:middle
time talking about protocols.

00:10:36.136 --> 00:10:38.696 A:middle
Protocols, as you know, are the

00:10:38.696 --> 00:10:40.956 A:middle
mechanism that you actually use

00:10:40.956 --> 00:10:42.436 A:middle
to talk to servers.

00:10:42.796 --> 00:10:44.196 A:middle
They are interoperable, which

00:10:44.196 --> 00:10:45.346 A:middle
means that you don't have to

00:10:45.346 --> 00:10:47.336 A:middle
worry whether the server you're

00:10:47.336 --> 00:10:49.306 A:middle
talking to across the world

00:10:49.696 --> 00:10:51.086 A:middle
supports the protocol you're

00:10:51.086 --> 00:10:51.666 A:middle
using.

00:10:52.656 --> 00:10:53.956 A:middle
Unfortunately, some of these

00:10:54.026 --> 00:10:58.026 A:middle
protocols are weak or provide no

00:10:58.136 --> 00:10:59.886 A:middle
security in particular.

00:10:59.886 --> 00:11:02.716 A:middle
If you are using http all of

00:11:02.716 --> 00:11:04.326 A:middle
your users' data is being

00:11:04.326 --> 00:11:05.936 A:middle
transmitted in the clear.

00:11:06.366 --> 00:11:08.106 A:middle
That means that anyone listening

00:11:08.106 --> 00:11:09.996 A:middle
in knows exactly that data.

00:11:11.286 --> 00:11:13.796 A:middle
But some of the older TLS

00:11:14.156 --> 00:11:16.356 A:middle
versions, like SSL Version 3,

00:11:16.836 --> 00:11:20.986 A:middle
TLS 1.0, and TLS 1.1 are also

00:11:20.986 --> 00:11:23.086 A:middle
vulnerable to numerous attacks.

00:11:24.216 --> 00:11:26.426 A:middle
And so, you should be avoiding

00:11:26.426 --> 00:11:28.746 A:middle
these when you configure your

00:11:28.746 --> 00:11:29.346 A:middle
servers.

00:11:30.006 --> 00:11:32.656 A:middle
We removed the use of SSL

00:11:32.656 --> 00:11:36.136 A:middle
Version 3 back in fall of 2015.

00:11:36.136 --> 00:11:37.786 A:middle
So, you've been protected on

00:11:38.006 --> 00:11:39.386 A:middle
that count for a while.

00:11:40.306 --> 00:11:42.176 A:middle
Instead, you should be using

00:11:42.516 --> 00:11:47.146 A:middle
HTTPS, that is HTTP over TLS,

00:11:47.766 --> 00:11:50.246 A:middle
with TLS 1.2.

00:11:50.846 --> 00:11:53.266 A:middle
TLS 1.2 is the current best

00:11:53.626 --> 00:11:56.636 A:middle
standard available for TLS

00:11:56.886 --> 00:11:57.496 A:middle
security.

00:11:58.146 --> 00:11:59.376 A:middle
But I'm pleased to announce

00:11:59.376 --> 00:12:00.876 A:middle
today that we're adding support

00:12:00.876 --> 00:12:03.166 A:middle
for the draft specification of

00:12:03.346 --> 00:12:04.706 A:middle
TLS 1.3.

00:12:05.586 --> 00:12:07.376 A:middle
Chris will be talking more about

00:12:07.406 --> 00:12:08.696 A:middle
that a little bit later.

00:12:10.126 --> 00:12:11.936 A:middle
Finally, I'd like to talk about

00:12:12.186 --> 00:12:13.076 A:middle
revocation.

00:12:13.686 --> 00:12:15.646 A:middle
Revocation is the mechanism that

00:12:15.646 --> 00:12:18.546 A:middle
clients use to verify the

00:12:18.546 --> 00:12:19.916 A:middle
certificate and determine

00:12:19.916 --> 00:12:21.326 A:middle
whether that certificate should

00:12:21.326 --> 00:12:23.946 A:middle
be trusted in the event that a

00:12:23.946 --> 00:12:26.996 A:middle
certificate is mishandled or

00:12:27.476 --> 00:12:28.296 A:middle
missed issued.

00:12:28.896 --> 00:12:31.036 A:middle
And of course, the worst thing

00:12:31.036 --> 00:12:32.636 A:middle
you can do in the area of

00:12:32.636 --> 00:12:36.746 A:middle
revocation is not check it.

00:12:36.876 --> 00:12:39.466 A:middle
Unfortunately, our platforms do

00:12:39.466 --> 00:12:41.896 A:middle
not check revocation by default

00:12:42.026 --> 00:12:44.176 A:middle
currently and I'll explain why

00:12:44.406 --> 00:12:44.896 A:middle
later.

00:12:45.606 --> 00:12:48.196 A:middle
That is, unless of course you

00:12:48.196 --> 00:12:50.266 A:middle
are using OCSP Stapling.

00:12:50.796 --> 00:12:53.136 A:middle
OCSP being the Online

00:12:53.226 --> 00:12:54.996 A:middle
Certificate Status Protocol.

00:12:55.526 --> 00:12:57.606 A:middle
If your servers are using OCSP

00:12:57.606 --> 00:13:00.776 A:middle
Stapling, your certificates are

00:13:00.886 --> 00:13:02.116 A:middle
always being checked for

00:13:02.116 --> 00:13:02.866 A:middle
revocation.

00:13:03.706 --> 00:13:05.646 A:middle
So, let's drill down into how

00:13:05.646 --> 00:13:09.326 A:middle
OCSP and OCSP Stapling work.

00:13:10.036 --> 00:13:13.596 A:middle
First, as usual, a server

00:13:13.776 --> 00:13:15.906 A:middle
requests a certificate from a

00:13:16.126 --> 00:13:17.816 A:middle
trusted third-party called a

00:13:17.876 --> 00:13:18.966 A:middle
certificate authority.

00:13:19.756 --> 00:13:22.206 A:middle
The server then uses that

00:13:22.206 --> 00:13:24.306 A:middle
certificate to identify itself

00:13:24.366 --> 00:13:26.676 A:middle
to clients connecting to it.

00:13:27.376 --> 00:13:29.486 A:middle
The client, in order to verify

00:13:29.486 --> 00:13:32.406 A:middle
that identity, then requests

00:13:32.716 --> 00:13:34.796 A:middle
information as to the status of

00:13:34.796 --> 00:13:36.696 A:middle
that certificate from the

00:13:36.766 --> 00:13:38.136 A:middle
certificate authority.

00:13:38.806 --> 00:13:39.976 A:middle
The certificate authority

00:13:39.976 --> 00:13:41.876 A:middle
replies back with a signed

00:13:42.026 --> 00:13:44.676 A:middle
message indicating the status of

00:13:44.676 --> 00:13:45.996 A:middle
the certificate that the client

00:13:45.996 --> 00:13:47.626 A:middle
is looking at.

00:13:47.806 --> 00:13:49.096 A:middle
The client verifies that

00:13:49.096 --> 00:13:50.916 A:middle
response and then uses that

00:13:51.206 --> 00:13:53.366 A:middle
status to determine whether to

00:13:53.366 --> 00:13:55.356 A:middle
continue the connection to the

00:13:55.446 --> 00:13:55.836 A:middle
server.

00:13:56.806 --> 00:13:59.516 A:middle
But unfortunately, OCSP has some

00:13:59.516 --> 00:14:00.076 A:middle
drawbacks.

00:14:00.926 --> 00:14:02.636 A:middle
As you can see from that

00:14:02.896 --> 00:14:04.736 A:middle
previous description It requires

00:14:04.736 --> 00:14:06.846 A:middle
an additional network connection

00:14:07.196 --> 00:14:08.896 A:middle
for every connection to the

00:14:08.896 --> 00:14:09.446 A:middle
server.

00:14:10.726 --> 00:14:12.806 A:middle
That means that your connections

00:14:12.806 --> 00:14:15.346 A:middle
in your apps appear slower and

00:14:15.346 --> 00:14:17.696 A:middle
none of us want that.

00:14:18.146 --> 00:14:20.726 A:middle
Furthermore, OCSP is performed

00:14:20.876 --> 00:14:21.836 A:middle
in the clear.

00:14:22.306 --> 00:14:23.616 A:middle
That means that all of the

00:14:24.026 --> 00:14:25.166 A:middle
traffic indicating which

00:14:25.206 --> 00:14:27.016 A:middle
certificate the client wants

00:14:27.046 --> 00:14:29.306 A:middle
checked is visible to anybody

00:14:29.456 --> 00:14:30.216 A:middle
watching.

00:14:30.706 --> 00:14:33.076 A:middle
And the reason that OCSP is

00:14:33.076 --> 00:14:35.366 A:middle
performed in the clear is that

00:14:36.026 --> 00:14:37.816 A:middle
it you would need it to

00:14:37.816 --> 00:14:40.136 A:middle
establish a secure connection.

00:14:40.296 --> 00:14:41.746 A:middle
So, if you had to establish a

00:14:41.806 --> 00:14:44.486 A:middle
secure connection to get OCSP,

00:14:44.656 --> 00:14:46.046 A:middle
you might end up in a circular

00:14:46.046 --> 00:14:46.646 A:middle
problem.

00:14:47.266 --> 00:14:49.786 A:middle
That's why OCSP is a huge

00:14:49.786 --> 00:14:51.386 A:middle
compromise of your users'

00:14:51.426 --> 00:14:52.156 A:middle
privacy.

00:14:52.636 --> 00:14:54.146 A:middle
Since all that information is in

00:14:54.146 --> 00:14:54.716 A:middle
the clear.

00:14:55.316 --> 00:14:57.546 A:middle
Anyone who is listening can and

00:14:57.626 --> 00:14:59.296 A:middle
find out what servers that

00:14:59.406 --> 00:15:00.786 A:middle
client is connecting to.

00:15:01.476 --> 00:15:03.416 A:middle
Furthermore, that third-party

00:15:03.476 --> 00:15:06.006 A:middle
certificate authority can

00:15:06.006 --> 00:15:08.506 A:middle
aggregate data as to which IP

00:15:08.506 --> 00:15:10.286 A:middle
address is which clients are

00:15:10.286 --> 00:15:13.366 A:middle
talking to which servers and

00:15:13.366 --> 00:15:15.516 A:middle
sell that to anybody they want.

00:15:15.516 --> 00:15:18.566 A:middle
So, that's very bad.

00:15:18.676 --> 00:15:20.916 A:middle
These 2 drawbacks are the reason

00:15:20.916 --> 00:15:24.436 A:middle
that we do not have OCSP enabled

00:15:24.436 --> 00:15:25.256 A:middle
by default.

00:15:25.926 --> 00:15:28.156 A:middle
And if you wanted to enable OCSP

00:15:28.156 --> 00:15:30.566 A:middle
in your app you would have to

00:15:30.566 --> 00:15:33.786 A:middle
integrate additional APIs.

00:15:34.436 --> 00:15:36.996 A:middle
So, next I want to talk about

00:15:37.176 --> 00:15:39.126 A:middle
OCSP Stapling, which is a

00:15:39.126 --> 00:15:42.666 A:middle
dramatic improvement on OCSP and

00:15:42.956 --> 00:15:44.646 A:middle
an evolution in the protocol

00:15:44.646 --> 00:15:46.356 A:middle
that removes many of the

00:15:46.356 --> 00:15:48.326 A:middle
drawbacks of OCSP.

00:15:49.146 --> 00:15:51.116 A:middle
As before, the server gets a

00:15:51.116 --> 00:15:52.976 A:middle
certificate from the certificate

00:15:52.976 --> 00:15:53.546 A:middle
authority.

00:15:54.336 --> 00:15:56.646 A:middle
But before sending that

00:15:56.646 --> 00:15:58.536 A:middle
certificate to a client, the

00:15:58.696 --> 00:16:01.156 A:middle
server requests the OCSP

00:16:01.156 --> 00:16:04.256 A:middle
response from the certificate

00:16:04.256 --> 00:16:04.826 A:middle
authority.

00:16:05.126 --> 00:16:06.336 A:middle
And when it gets that signed

00:16:06.336 --> 00:16:08.956 A:middle
response back, the server

00:16:08.956 --> 00:16:11.216 A:middle
verifies it and then sends it

00:16:11.216 --> 00:16:13.306 A:middle
along with the certificate to

00:16:13.306 --> 00:16:13.846 A:middle
the client.

00:16:14.646 --> 00:16:16.756 A:middle
The client can then verify both

00:16:16.786 --> 00:16:18.426 A:middle
the certificate and the

00:16:18.426 --> 00:16:19.486 A:middle
revocation status

00:16:19.636 --> 00:16:20.746 A:middle
simultaneously.

00:16:21.346 --> 00:16:23.326 A:middle
So, this is a huge win, both in

00:16:23.326 --> 00:16:25.096 A:middle
terms of performance, because

00:16:25.096 --> 00:16:26.506 A:middle
you don't need that additional

00:16:26.506 --> 00:16:27.636 A:middle
network connection on your

00:16:27.636 --> 00:16:28.076 A:middle
client.

00:16:28.726 --> 00:16:31.236 A:middle
And in terms of privacy, because

00:16:31.236 --> 00:16:32.806 A:middle
the client doesn't have to

00:16:32.806 --> 00:16:35.216 A:middle
connect to a third party to find

00:16:35.216 --> 00:16:37.166 A:middle
out about the revocation status.

00:16:38.546 --> 00:16:41.346 A:middle
But even OCSP Stapling has some

00:16:41.346 --> 00:16:41.876 A:middle
drawbacks.

00:16:42.826 --> 00:16:44.946 A:middle
We've noted that despite

00:16:44.946 --> 00:16:46.956 A:middle
encouraging all of you to adopt

00:16:46.956 --> 00:16:48.556 A:middle
it on your servers, that

00:16:48.556 --> 00:16:50.226 A:middle
adoption has been slow.

00:16:51.246 --> 00:16:54.006 A:middle
We are aware that enabling OCSP

00:16:54.006 --> 00:16:56.696 A:middle
in some of the open source

00:16:56.896 --> 00:16:59.176 A:middle
server implementations does have

00:16:59.176 --> 00:16:59.606 A:middle
drawbacks.

00:17:00.216 --> 00:17:02.076 A:middle
But we, nonetheless, encourage

00:17:02.076 --> 00:17:05.146 A:middle
you to fix those issues and to

00:17:05.146 --> 00:17:07.806 A:middle
adopt OCSP in order to improve

00:17:07.806 --> 00:17:10.956 A:middle
the security and the speed of

00:17:10.956 --> 00:17:12.796 A:middle
your app.

00:17:13.076 --> 00:17:15.856 A:middle
But the worst thing about OCSP

00:17:15.856 --> 00:17:17.766 A:middle
is that it actually doesn't

00:17:17.766 --> 00:17:20.516 A:middle
protect users against malicious

00:17:20.576 --> 00:17:21.116 A:middle
servers.

00:17:21.766 --> 00:17:23.666 A:middle
In particular, the malicious

00:17:23.666 --> 00:17:26.196 A:middle
server just need omit the

00:17:26.196 --> 00:17:28.616 A:middle
stapled OCSP response and the

00:17:28.616 --> 00:17:31.276 A:middle
client will never know that that

00:17:31.276 --> 00:17:33.016 A:middle
malicious server has a revoked

00:17:33.016 --> 00:17:33.786 A:middle
certificate.

00:17:35.106 --> 00:17:36.446 A:middle
That's why I'm pleased to

00:17:36.446 --> 00:17:39.066 A:middle
announce to you today that we

00:17:39.066 --> 00:17:41.946 A:middle
are enhancing revocation across

00:17:41.946 --> 00:17:43.266 A:middle
all of our platforms.

00:17:43.926 --> 00:17:46.256 A:middle
And it starts with us.

00:17:46.746 --> 00:17:49.126 A:middle
First, we gather information

00:17:49.286 --> 00:17:51.176 A:middle
from certificate transparency

00:17:51.176 --> 00:17:51.646 A:middle
logs.

00:17:52.146 --> 00:17:54.246 A:middle
Certificate transparency logs or

00:17:54.356 --> 00:17:58.256 A:middle
CT logs contain cryptographic

00:17:58.336 --> 00:18:00.376 A:middle
proofs of the existence of a

00:18:00.456 --> 00:18:01.136 A:middle
certificate.

00:18:01.756 --> 00:18:04.166 A:middle
You can find out more about CT

00:18:04.536 --> 00:18:06.856 A:middle
and how it works and how you can

00:18:06.856 --> 00:18:08.336 A:middle
use it to enhance the security

00:18:08.336 --> 00:18:10.626 A:middle
of your app by watching last

00:18:10.926 --> 00:18:13.066 A:middle
year's "What's New in Security"

00:18:13.146 --> 00:18:13.666 A:middle
session.

00:18:15.016 --> 00:18:16.696 A:middle
We use the information from the

00:18:16.746 --> 00:18:18.966 A:middle
certificate transparency logs to

00:18:19.046 --> 00:18:21.056 A:middle
find out about all of the

00:18:21.056 --> 00:18:22.646 A:middle
certificates that are trusted on

00:18:22.646 --> 00:18:23.516 A:middle
our platforms.

00:18:23.866 --> 00:18:25.406 A:middle
And if you want to help us

00:18:25.626 --> 00:18:28.086 A:middle
gather information about your

00:18:28.086 --> 00:18:29.806 A:middle
certificates in your apps and

00:18:29.806 --> 00:18:32.246 A:middle
your servers, you should verify

00:18:32.646 --> 00:18:34.286 A:middle
that your certificates are

00:18:34.286 --> 00:18:35.936 A:middle
logged to a CT log.

00:18:36.566 --> 00:18:39.176 A:middle
Many CA's will do this for you

00:18:39.176 --> 00:18:41.886 A:middle
so you just need check.

00:18:42.776 --> 00:18:45.406 A:middle
With that information, we now

00:18:45.406 --> 00:18:47.206 A:middle
know all of the certificate

00:18:47.206 --> 00:18:50.126 A:middle
authorities that are trusted on

00:18:50.466 --> 00:18:52.056 A:middle
our platforms.

00:18:52.216 --> 00:18:54.336 A:middle
And from that information we can

00:18:54.336 --> 00:18:57.076 A:middle
request all of the revocation

00:18:57.076 --> 00:18:58.736 A:middle
information from those

00:18:58.736 --> 00:18:59.866 A:middle
certificate authorities.

00:19:01.176 --> 00:19:03.316 A:middle
We then gather all of that

00:19:03.316 --> 00:19:04.756 A:middle
revocation information back.

00:19:05.556 --> 00:19:07.566 A:middle
We aggregate it into a single

00:19:07.566 --> 00:19:09.796 A:middle
efficient bundle, and then make

00:19:09.796 --> 00:19:11.746 A:middle
it available to all of our

00:19:11.746 --> 00:19:12.136 A:middle
clients.

00:19:13.726 --> 00:19:15.516 A:middle
Those clients check in

00:19:15.516 --> 00:19:18.466 A:middle
periodically with us to get that

00:19:18.466 --> 00:19:20.466 A:middle
bundled revocation information,

00:19:21.626 --> 00:19:24.916 A:middle
and use that latest status

00:19:25.016 --> 00:19:27.386 A:middle
revocation information when

00:19:27.746 --> 00:19:30.046 A:middle
checking server certificates

00:19:30.046 --> 00:19:31.206 A:middle
that they are using.

00:19:32.466 --> 00:19:36.176 A:middle
If the client hits a certificate

00:19:36.246 --> 00:19:38.346 A:middle
that is listed there, the client

00:19:38.346 --> 00:19:40.436 A:middle
will then perform OCSP.

00:19:40.766 --> 00:19:43.586 A:middle
Unless of course your app is

00:19:43.846 --> 00:19:45.866 A:middle
using OCSP Stapling.

00:19:47.116 --> 00:19:49.586 A:middle
The client uses this to verify

00:19:49.586 --> 00:19:51.206 A:middle
that the certificate really is

00:19:51.206 --> 00:19:51.726 A:middle
revoked.

00:19:51.726 --> 00:19:54.436 A:middle
So, we think this is a dramatic

00:19:54.436 --> 00:19:56.336 A:middle
improvement on the existing

00:19:56.406 --> 00:19:58.246 A:middle
state of revocation on our

00:19:58.246 --> 00:19:58.986 A:middle
platforms.

00:20:00.046 --> 00:20:02.346 A:middle
It has a dramatic improvement in

00:20:02.606 --> 00:20:04.496 A:middle
the privacy compromise area.

00:20:05.336 --> 00:20:06.896 A:middle
The bundle that we provide of

00:20:06.896 --> 00:20:08.296 A:middle
revocation information is the

00:20:08.296 --> 00:20:09.996 A:middle
same across all of our clients

00:20:10.156 --> 00:20:11.756 A:middle
and all of our platforms.

00:20:12.216 --> 00:20:15.106 A:middle
So, we never know which clients

00:20:15.106 --> 00:20:16.906 A:middle
are connecting to which servers.

00:20:17.736 --> 00:20:20.016 A:middle
Furthermore, only certificates

00:20:20.016 --> 00:20:23.636 A:middle
that are in that list require

00:20:23.636 --> 00:20:26.156 A:middle
the additional OCSP connection.

00:20:27.566 --> 00:20:30.946 A:middle
So, only the limited set of

00:20:30.946 --> 00:20:33.436 A:middle
certificates there risk that

00:20:33.536 --> 00:20:35.796 A:middle
additional privacy compromise if

00:20:35.976 --> 00:20:38.076 A:middle
your servers are not using OCSP

00:20:38.076 --> 00:20:38.826 A:middle
Stapling.

00:20:40.186 --> 00:20:43.556 A:middle
Another huge advantage is that

00:20:43.596 --> 00:20:47.376 A:middle
the information is automatically

00:20:47.516 --> 00:20:48.216 A:middle
updated.

00:20:49.166 --> 00:20:50.316 A:middle
That means that the client

00:20:50.596 --> 00:20:52.946 A:middle
always have that freshest

00:20:52.946 --> 00:20:55.026 A:middle
revocation information available

00:20:55.026 --> 00:20:56.906 A:middle
to them when making all of their

00:20:56.906 --> 00:20:59.476 A:middle
connections and this means that

00:20:59.476 --> 00:21:01.156 A:middle
you also get this for free.

00:21:01.486 --> 00:21:03.196 A:middle
You don't need to make a single

00:21:03.196 --> 00:21:05.176 A:middle
API call to get this best

00:21:05.176 --> 00:21:07.906 A:middle
practice security and faster

00:21:08.026 --> 00:21:08.806 A:middle
connections.

00:21:09.976 --> 00:21:12.426 A:middle
So, I've covered a lot of ground

00:21:12.426 --> 00:21:14.036 A:middle
in the last 20 minutes and I'd

00:21:14.036 --> 00:21:16.346 A:middle
like to recall what we talked

00:21:16.346 --> 00:21:16.726 A:middle
about.

00:21:17.386 --> 00:21:19.636 A:middle
First we talked about encryption

00:21:19.916 --> 00:21:21.766 A:middle
and using authenticated

00:21:21.766 --> 00:21:24.856 A:middle
encryption ciphers in your

00:21:24.946 --> 00:21:25.956 A:middle
servers and your apps.

00:21:27.106 --> 00:21:29.836 A:middle
We talked about hashes and how

00:21:29.836 --> 00:21:33.236 A:middle
to avoid collision attacks.

00:21:33.426 --> 00:21:35.936 A:middle
We talked about public keys and

00:21:35.936 --> 00:21:38.336 A:middle
using strong public keys that

00:21:38.336 --> 00:21:40.966 A:middle
are not subject to

00:21:41.056 --> 00:21:42.176 A:middle
factorization.

00:21:43.256 --> 00:21:45.246 A:middle
We also talked about protocols

00:21:45.246 --> 00:21:47.826 A:middle
and using the latest protocols

00:21:47.826 --> 00:21:51.966 A:middle
like TLS 1.2 and HTTPS to secure

00:21:51.966 --> 00:21:53.266 A:middle
your apps.

00:21:53.646 --> 00:21:55.316 A:middle
Finally, we talked about

00:21:55.316 --> 00:21:57.916 A:middle
revocation and how you can

00:21:57.916 --> 00:22:00.276 A:middle
improve the security of your app

00:22:00.486 --> 00:22:03.186 A:middle
by using revocation and OCSP

00:22:03.186 --> 00:22:04.736 A:middle
Stapling on your servers, and

00:22:04.736 --> 00:22:06.506 A:middle
the ways in which we've helped

00:22:06.506 --> 00:22:08.596 A:middle
you with a brand-new revocation

00:22:08.596 --> 00:22:09.246 A:middle
mechanism.

00:22:10.806 --> 00:22:12.586 A:middle
Now, I promise you that I'd talk

00:22:12.586 --> 00:22:14.956 A:middle
a little bit more about those

00:22:15.026 --> 00:22:16.616 A:middle
trust removals that I announced

00:22:16.696 --> 00:22:17.226 A:middle
earlier.

00:22:18.206 --> 00:22:20.286 A:middle
Let's go back and recall what

00:22:20.366 --> 00:22:22.006 A:middle
those trust removals were.

00:22:23.416 --> 00:22:25.396 A:middle
First, I announced that we would

00:22:25.396 --> 00:22:28.676 A:middle
be removing trust in any SHA-1

00:22:28.786 --> 00:22:30.906 A:middle
signed certificate for

00:22:30.906 --> 00:22:32.786 A:middle
connections to TLS servers

00:22:32.846 --> 00:22:34.986 A:middle
across all of our platforms.

00:22:35.906 --> 00:22:37.816 A:middle
I also announced that we would

00:22:37.816 --> 00:22:39.356 A:middle
be removing trust in

00:22:39.396 --> 00:22:41.976 A:middle
certificates using key sizes

00:22:42.136 --> 00:22:46.446 A:middle
smaller than 2048 bit RSA, also

00:22:46.446 --> 00:22:48.266 A:middle
in all TLS connections to

00:22:48.266 --> 00:22:48.736 A:middle
servers.

00:22:50.206 --> 00:22:52.086 A:middle
If you are connecting to a

00:22:52.206 --> 00:22:55.976 A:middle
server using TLS that has one of

00:22:55.976 --> 00:22:58.256 A:middle
these weak certificates, your

00:22:58.256 --> 00:23:01.106 A:middle
app will fail to make that

00:23:01.286 --> 00:23:04.166 A:middle
connection on macOS High Sierra

00:23:04.586 --> 00:23:07.366 A:middle
and iOS 11, and watchOS 4 and

00:23:07.586 --> 00:23:08.996 A:middle
tvOS 11.

00:23:09.836 --> 00:23:13.516 A:middle
Let's back up and remind

00:23:13.516 --> 00:23:16.496 A:middle
ourselves what certificates this

00:23:16.496 --> 00:23:18.196 A:middle
trust removal does not affect

00:23:18.626 --> 00:23:19.926 A:middle
based on my description.

00:23:20.866 --> 00:23:23.876 A:middle
First, this does not affect root

00:23:23.876 --> 00:23:24.556 A:middle
certificates.

00:23:25.606 --> 00:23:27.466 A:middle
In particular, root certificates

00:23:27.516 --> 00:23:29.936 A:middle
are not subject to the type of

00:23:29.976 --> 00:23:31.376 A:middle
collision attacks that we are

00:23:31.376 --> 00:23:34.076 A:middle
worried about with the SHA-1.

00:23:35.196 --> 00:23:38.526 A:middle
Also, we already removed all

00:23:38.526 --> 00:23:40.116 A:middle
roots certificates using key

00:23:40.116 --> 00:23:43.026 A:middle
sizes smaller than 2048 bits

00:23:43.496 --> 00:23:45.996 A:middle
back in fall of 2015.

00:23:46.226 --> 00:23:47.666 A:middle
So, you've been protected there

00:23:47.786 --> 00:23:48.616 A:middle
for awhile.

00:23:50.096 --> 00:23:51.906 A:middle
These trust removals also do not

00:23:51.906 --> 00:23:53.826 A:middle
affect enterprise distributed

00:23:53.826 --> 00:23:55.966 A:middle
certificates through mobile

00:23:55.966 --> 00:23:57.816 A:middle
device management or MDM.

00:23:58.496 --> 00:24:00.486 A:middle
It also doesn't affect user

00:24:00.486 --> 00:24:02.626 A:middle
installed certificates through

00:24:02.626 --> 00:24:05.596 A:middle
mail, Safari or keychain access.

00:24:06.766 --> 00:24:08.336 A:middle
Finally, it also doesn't affect

00:24:08.716 --> 00:24:11.096 A:middle
client certificates when used

00:24:11.336 --> 00:24:13.516 A:middle
with mutual authentication in

00:24:13.616 --> 00:24:13.986 A:middle
TLS.

00:24:15.196 --> 00:24:16.776 A:middle
It's not that we're not worried

00:24:16.846 --> 00:24:19.076 A:middle
about attacks on the

00:24:19.156 --> 00:24:21.236 A:middle
certificates, we are.

00:24:21.916 --> 00:24:24.156 A:middle
But we know that it takes time

00:24:24.826 --> 00:24:26.886 A:middle
for enterprises and users to

00:24:26.956 --> 00:24:29.676 A:middle
update all of their certificates

00:24:29.976 --> 00:24:31.956 A:middle
and their infrastructures to use

00:24:31.956 --> 00:24:33.496 A:middle
the latest algorithms.

00:24:33.916 --> 00:24:35.346 A:middle
And so, we're giving them just a

00:24:35.346 --> 00:24:36.596 A:middle
little bit more time.

00:24:37.446 --> 00:24:39.936 A:middle
I promise that we will be

00:24:39.936 --> 00:24:41.086 A:middle
removing trust in those

00:24:41.086 --> 00:24:42.376 A:middle
certificates later on.

00:24:42.706 --> 00:24:44.896 A:middle
So now is the time to start

00:24:44.896 --> 00:24:46.516 A:middle
updating, not then.

00:24:47.936 --> 00:24:49.506 A:middle
Now, you're probably wondering

00:24:49.506 --> 00:24:51.036 A:middle
what this looks like.

00:24:51.466 --> 00:24:52.646 A:middle
Because if it's affecting your

00:24:52.896 --> 00:24:53.746 A:middle
app, you need to know.

00:24:54.526 --> 00:24:56.596 A:middle
If you are in Safari, you see an

00:24:56.596 --> 00:24:57.726 A:middle
error dialog that looks

00:24:57.726 --> 00:24:59.106 A:middle
something like this.

00:24:59.726 --> 00:25:01.776 A:middle
And if we drill into the

00:25:01.836 --> 00:25:04.056 A:middle
certificate pane, we see that

00:25:04.056 --> 00:25:06.136 A:middle
there's a specific error message

00:25:06.176 --> 00:25:08.416 A:middle
for these removed weak

00:25:08.506 --> 00:25:08.916 A:middle
certificates.

00:25:08.916 --> 00:25:11.616 A:middle
And that's how you will know if

00:25:11.666 --> 00:25:13.136 A:middle
you're connecting to such a

00:25:13.136 --> 00:25:13.766 A:middle
certificate.

00:25:15.076 --> 00:25:16.536 A:middle
Now, many of you are app

00:25:16.646 --> 00:25:18.206 A:middle
developers and so you care more

00:25:18.206 --> 00:25:19.346 A:middle
about what you're going to see

00:25:19.346 --> 00:25:20.086 A:middle
in the logs.

00:25:20.086 --> 00:25:21.706 A:middle
Because you may never connect to

00:25:21.706 --> 00:25:23.806 A:middle
this server through Safari.

00:25:24.466 --> 00:25:25.796 A:middle
If you're looking in the logs,

00:25:26.046 --> 00:25:28.036 A:middle
you're going to see an invalid

00:25:28.166 --> 00:25:33.086 A:middle
searching or -9807 SSL error in

00:25:33.086 --> 00:25:34.836 A:middle
your URL session or URL

00:25:34.916 --> 00:25:35.506 A:middle
connection.

00:25:37.336 --> 00:25:39.836 A:middle
There's only one thing that you

00:25:39.836 --> 00:25:41.636 A:middle
can do in order to fix this

00:25:41.636 --> 00:25:43.996 A:middle
problem and that is to have your

00:25:43.996 --> 00:25:46.456 A:middle
server administrators upgrade

00:25:46.456 --> 00:25:48.056 A:middle
their servers to use new

00:25:48.126 --> 00:25:48.986 A:middle
certificates.

00:25:50.186 --> 00:25:52.346 A:middle
The good news is that all

00:25:52.406 --> 00:25:54.016 A:middle
certificate authorities trusted

00:25:54.086 --> 00:25:57.146 A:middle
on our platforms only issue

00:25:57.146 --> 00:25:58.556 A:middle
certificates that are not

00:25:58.796 --> 00:26:01.446 A:middle
subject to these removals and

00:26:01.446 --> 00:26:03.196 A:middle
you can find a list of all of

00:26:03.196 --> 00:26:04.776 A:middle
the root certificates that are

00:26:04.776 --> 00:26:08.926 A:middle
trusted on our platforms at this

00:26:09.026 --> 00:26:09.146 A:middle
link.

00:26:09.236 --> 00:26:11.156 A:middle
So, we've covered quite a bit

00:26:11.156 --> 00:26:13.986 A:middle
more ground now and I think I at

00:26:13.986 --> 00:26:15.796 A:middle
least am wondering what should I

00:26:15.796 --> 00:26:18.656 A:middle
do when I go back to my office.

00:26:18.656 --> 00:26:21.626 A:middle
How can I ensure that I have

00:26:21.626 --> 00:26:23.056 A:middle
best security.

00:26:23.526 --> 00:26:24.756 A:middle
And the very first thing you

00:26:24.756 --> 00:26:26.916 A:middle
should do is check your

00:26:26.916 --> 00:26:29.026 A:middle
implementations, libraries and

00:26:29.176 --> 00:26:30.766 A:middle
servers against those best

00:26:30.766 --> 00:26:32.386 A:middle
practices that I've listed.

00:26:33.066 --> 00:26:34.646 A:middle
We even have that handy chart

00:26:34.706 --> 00:26:36.976 A:middle
that you can use to ensure that

00:26:36.976 --> 00:26:39.096 A:middle
you have those good algorithms.

00:26:39.926 --> 00:26:42.006 A:middle
If you're a server developer you

00:26:42.006 --> 00:26:43.656 A:middle
might actually have quite a bit

00:26:43.656 --> 00:26:46.416 A:middle
of work to do in order to ensure

00:26:46.496 --> 00:26:48.236 A:middle
you have the best security for

00:26:48.386 --> 00:26:49.296 A:middle
all of your clients.

00:26:51.216 --> 00:26:52.366 A:middle
You should go through and

00:26:52.366 --> 00:26:55.336 A:middle
replace any SHA-1 or weak RSA

00:26:55.406 --> 00:26:58.376 A:middle
key certificates so that your

00:26:58.376 --> 00:27:00.626 A:middle
clients will not see failures on

00:27:00.756 --> 00:27:01.786 A:middle
our platforms.

00:27:02.506 --> 00:27:04.546 A:middle
And if you haven't already, you

00:27:04.546 --> 00:27:06.816 A:middle
should upgrade your servers to

00:27:06.816 --> 00:27:09.946 A:middle
TLS 1.2 and one of those

00:27:10.156 --> 00:27:11.936 A:middle
authenticated encryption ciphers

00:27:12.026 --> 00:27:13.286 A:middle
that I listed earlier.

00:27:14.756 --> 00:27:16.986 A:middle
You should allow the client to

00:27:16.986 --> 00:27:19.506 A:middle
determine what order to use

00:27:19.506 --> 00:27:22.326 A:middle
those ciphers because the

00:27:22.326 --> 00:27:25.346 A:middle
clients may be optimizing to use

00:27:25.346 --> 00:27:27.806 A:middle
the best and fastest cipher as

00:27:27.806 --> 00:27:30.356 A:middle
opposed to one of the slower

00:27:30.456 --> 00:27:32.106 A:middle
equally secure ciphers.

00:27:33.596 --> 00:27:34.716 A:middle
If you haven't already should

00:27:34.876 --> 00:27:37.866 A:middle
also enable OCSP Stapling so

00:27:37.866 --> 00:27:40.166 A:middle
that you can be sure that all of

00:27:40.166 --> 00:27:42.556 A:middle
your clients always have up to

00:27:42.556 --> 00:27:44.436 A:middle
date revocation information and

00:27:44.796 --> 00:27:46.756 A:middle
don't have to make privacy

00:27:46.756 --> 00:27:48.866 A:middle
compromising additional network

00:27:48.936 --> 00:27:49.656 A:middle
connections.

00:27:51.036 --> 00:27:52.886 A:middle
Finally, in order to help us

00:27:53.246 --> 00:27:54.836 A:middle
with our new revocation

00:27:54.836 --> 00:27:56.746 A:middle
mechanism you should check that

00:27:56.746 --> 00:27:58.726 A:middle
your certificates are being logs

00:27:58.726 --> 00:28:00.496 A:middle
to a certificate transparency

00:28:00.496 --> 00:28:00.836 A:middle
log.

00:28:02.166 --> 00:28:04.246 A:middle
Now many of you are probably app

00:28:04.416 --> 00:28:05.096 A:middle
developers.

00:28:05.986 --> 00:28:07.616 A:middle
And the good news for you is

00:28:07.616 --> 00:28:09.926 A:middle
that you have only one job.

00:28:10.816 --> 00:28:13.016 A:middle
Our platform has made it easy to

00:28:13.016 --> 00:28:15.556 A:middle
adopt best practices and all you

00:28:15.556 --> 00:28:18.616 A:middle
have to do is avoid ATS

00:28:18.906 --> 00:28:19.796 A:middle
exceptions.

00:28:19.976 --> 00:28:22.026 A:middle
If you are using an ATS

00:28:22.026 --> 00:28:22.626 A:middle
exception.

00:28:22.626 --> 00:28:25.856 A:middle
You are saying that connection

00:28:25.856 --> 00:28:28.606 A:middle
should have weaker security than

00:28:28.656 --> 00:28:30.536 A:middle
our platform can enforce.

00:28:31.306 --> 00:28:34.716 A:middle
So, now Chris is going to talk

00:28:34.716 --> 00:28:36.236 A:middle
to you about app transport

00:28:36.236 --> 00:28:37.996 A:middle
security a little bit more and

00:28:37.996 --> 00:28:39.436 A:middle
give you an update on the

00:28:39.436 --> 00:28:40.676 A:middle
current status.

00:28:41.106 --> 00:28:41.326 A:middle
Chris.

00:28:42.516 --> 00:28:48.696 A:middle
[ Applause ]

00:28:49.196 --> 00:28:49.826 A:middle
&gt;&gt; Thank you, Bailey.

00:28:49.826 --> 00:28:51.906 A:middle
Now, continuing along this

00:28:51.996 --> 00:28:54.206 A:middle
thread of best practices, I want

00:28:54.206 --> 00:28:55.666 A:middle
to dive a little bit deeper into

00:28:56.876 --> 00:28:57.136 A:middle
ATS.

00:28:57.136 --> 00:28:57.956 A:middle
ATS for those that aren't

00:28:57.956 --> 00:28:59.126 A:middle
familiar is a feature we

00:28:59.126 --> 00:29:01.106 A:middle
released in iOS 9 and

00:29:01.596 --> 00:29:02.966 A:middle
[inaudible] aimed at increasing

00:29:02.966 --> 00:29:04.346 A:middle
the security and privacy of your

00:29:04.346 --> 00:29:05.126 A:middle
customers' data.

00:29:05.796 --> 00:29:09.106 A:middle
ATS ensures that most of the

00:29:09.106 --> 00:29:10.466 A:middle
application data sent over the

00:29:10.466 --> 00:29:11.806 A:middle
network is encrypted and

00:29:11.806 --> 00:29:12.826 A:middle
protected by default.

00:29:14.716 --> 00:29:16.266 A:middle
Basically, this means moving

00:29:16.266 --> 00:29:18.656 A:middle
away from insecure and legacy

00:29:18.946 --> 00:29:19.816 A:middle
HTP toward HTTPS.

00:29:19.816 --> 00:29:22.166 A:middle
And that means a couple things,

00:29:22.936 --> 00:29:25.076 A:middle
the first of which is to use the

00:29:25.076 --> 00:29:26.506 A:middle
latest standardized version TLS,

00:29:26.746 --> 00:29:27.636 A:middle
version 1.2.

00:29:28.176 --> 00:29:29.556 A:middle
This has been updated and

00:29:29.556 --> 00:29:31.256 A:middle
amended over the years to take

00:29:31.256 --> 00:29:32.846 A:middle
into account some of the attacks

00:29:32.846 --> 00:29:34.136 A:middle
that Bailey eluded to earlier.

00:29:35.046 --> 00:29:36.256 A:middle
It also means using strong

00:29:36.256 --> 00:29:36.886 A:middle
cryptography.

00:29:37.646 --> 00:29:39.306 A:middle
That means using block cyphers

00:29:39.306 --> 00:29:41.096 A:middle
like AES and hash functions from

00:29:41.096 --> 00:29:41.926 A:middle
the SHA-2 family.

00:29:43.236 --> 00:29:44.696 A:middle
Importantly, it also means using

00:29:44.696 --> 00:29:46.186 A:middle
key exchange algorithms that

00:29:46.186 --> 00:29:47.366 A:middle
provide forward secrecy.

00:29:47.366 --> 00:29:49.226 A:middle
And this is an increasingly

00:29:49.226 --> 00:29:50.566 A:middle
important property in today's

00:29:50.566 --> 00:29:54.156 A:middle
day where the content of your

00:29:54.156 --> 00:29:56.486 A:middle
application's data as

00:29:56.486 --> 00:29:58.386 A:middle
transmitted over the network are

00:29:58.386 --> 00:29:59.926 A:middle
kept save, even in the event

00:29:59.926 --> 00:30:01.136 A:middle
that the long-term private key

00:30:01.136 --> 00:30:02.376 A:middle
of a server is compromised.

00:30:03.706 --> 00:30:05.566 A:middle
Now, we live in a world where

00:30:05.566 --> 00:30:07.276 A:middle
not all TL servers are equal,

00:30:07.466 --> 00:30:09.266 A:middle
and moreover, not all TLS

00:30:09.266 --> 00:30:10.806 A:middle
servers use the same version or

00:30:10.806 --> 00:30:11.586 A:middle
configuration.

00:30:12.296 --> 00:30:14.416 A:middle
For example, you might have to

00:30:14.416 --> 00:30:15.646 A:middle
connect to an add server that

00:30:15.646 --> 00:30:17.136 A:middle
doesn't even support HTTPS.

00:30:18.026 --> 00:30:18.976 A:middle
So, what do you do?

00:30:20.026 --> 00:30:21.136 A:middle
This is where exceptions come

00:30:21.136 --> 00:30:21.366 A:middle
in.

00:30:22.256 --> 00:30:24.696 A:middle
Exceptions allow your app to opt

00:30:24.696 --> 00:30:26.916 A:middle
out of ATS enforcement for

00:30:26.916 --> 00:30:29.496 A:middle
particular domains, or globally

00:30:29.496 --> 00:30:30.546 A:middle
across your application.

00:30:32.026 --> 00:30:33.916 A:middle
Exceptions are intended to be

00:30:33.916 --> 00:30:35.926 A:middle
temporary to help you maintain

00:30:35.926 --> 00:30:37.716 A:middle
functionality while servers

00:30:37.716 --> 00:30:39.456 A:middle
upgrade to more modern TLS

00:30:39.456 --> 00:30:40.426 A:middle
configurations.

00:30:41.996 --> 00:30:43.816 A:middle
Last year, we announced plans to

00:30:43.816 --> 00:30:45.486 A:middle
start requiring justification

00:30:45.486 --> 00:30:47.446 A:middle
for exceptions in the app store.

00:30:48.586 --> 00:30:50.706 A:middle
And since then, we've heard that

00:30:50.706 --> 00:30:51.946 A:middle
the exceptions we had available

00:30:51.946 --> 00:30:53.686 A:middle
to you did not adequately meet

00:30:53.846 --> 00:30:54.976 A:middle
all of your use cases.

00:30:55.656 --> 00:30:58.326 A:middle
And since universal ATS adoption

00:30:58.326 --> 00:31:01.216 A:middle
remains our primary goal, we've

00:31:01.216 --> 00:31:03.056 A:middle
taken that time to update the

00:31:03.056 --> 00:31:03.866 A:middle
exceptions that we have

00:31:03.866 --> 00:31:05.846 A:middle
available to you to meet and

00:31:05.846 --> 00:31:07.206 A:middle
satisfy these use cases.

00:31:07.576 --> 00:31:08.766 A:middle
And I want to dive into some

00:31:08.766 --> 00:31:10.596 A:middle
recent ones that were added in

00:31:10.596 --> 00:31:11.076 A:middle
the past.

00:31:11.866 --> 00:31:13.536 A:middle
Specifically, we've gone beyond

00:31:13.536 --> 00:31:14.746 A:middle
just acceptance for WebKit

00:31:14.746 --> 00:31:15.196 A:middle
content.

00:31:16.016 --> 00:31:17.116 A:middle
There are exceptions now to

00:31:17.116 --> 00:31:18.916 A:middle
ensure that if you are streaming

00:31:18.916 --> 00:31:20.176 A:middle
data through the AVFoundation

00:31:20.176 --> 00:31:21.406 A:middle
framework that happens to be

00:31:21.406 --> 00:31:23.176 A:middle
encrypted at rest, you can opt

00:31:23.176 --> 00:31:24.516 A:middle
out of ATS for that particular

00:31:24.516 --> 00:31:24.856 A:middle
data.

00:31:25.856 --> 00:31:26.956 A:middle
We also have exceptions to

00:31:26.956 --> 00:31:29.456 A:middle
support opting out of ATS for

00:31:29.456 --> 00:31:31.876 A:middle
arbitrary WebView request and

00:31:32.036 --> 00:31:33.706 A:middle
opting out of ATS for local

00:31:33.706 --> 00:31:34.546 A:middle
network connections.

00:31:35.406 --> 00:31:36.546 A:middle
Here, local network connections

00:31:36.546 --> 00:31:37.936 A:middle
is just a connection made to a

00:31:37.936 --> 00:31:39.986 A:middle
raw IP address, or a server with

00:31:39.986 --> 00:31:41.286 A:middle
an unqualified domain name.

00:31:42.516 --> 00:31:44.986 A:middle
I want to be clear, even though

00:31:44.986 --> 00:31:46.396 A:middle
it may not be necessary for the

00:31:46.396 --> 00:31:47.426 A:middle
security and privacy of your

00:31:47.426 --> 00:31:50.096 A:middle
data to opt out of ATS, because

00:31:50.096 --> 00:31:51.426 A:middle
you have otherwise encrypted

00:31:51.426 --> 00:31:52.676 A:middle
your data before transmitting

00:31:52.676 --> 00:31:53.046 A:middle
it.

00:31:53.476 --> 00:31:54.696 A:middle
We still believe that the right

00:31:54.696 --> 00:31:56.896 A:middle
and proper thing to do is to use

00:31:56.896 --> 00:31:58.316 A:middle
TLS to protect your data in

00:31:58.316 --> 00:31:58.766 A:middle
transit.

00:31:58.936 --> 00:32:00.936 A:middle
That means as app developers,

00:32:01.046 --> 00:32:02.166 A:middle
and as Bailey already mentioned,

00:32:02.706 --> 00:32:04.366 A:middle
your goal should be to minimize

00:32:04.406 --> 00:32:06.236 A:middle
or remove exceptions where at

00:32:06.236 --> 00:32:08.026 A:middle
all possible, if it is within

00:32:08.026 --> 00:32:09.496 A:middle
your power to do so.

00:32:10.266 --> 00:32:12.016 A:middle
I also want to point out a

00:32:12.016 --> 00:32:13.546 A:middle
recent key that was added to

00:32:13.546 --> 00:32:14.406 A:middle
support certificate

00:32:14.406 --> 00:32:15.136 A:middle
transparency.

00:32:16.306 --> 00:32:18.126 A:middle
If you want a particular server

00:32:18.126 --> 00:32:20.756 A:middle
to opt into or participate in

00:32:20.756 --> 00:32:22.256 A:middle
certificate transparency to help

00:32:22.256 --> 00:32:24.236 A:middle
protect your apps, and users'

00:32:24.236 --> 00:32:27.956 A:middle
apps against certificate

00:32:27.956 --> 00:32:29.396 A:middle
[inaudible] attacks, you can

00:32:29.396 --> 00:32:31.446 A:middle
specify for a particular domain

00:32:31.736 --> 00:32:32.696 A:middle
whether or not you want that

00:32:32.696 --> 00:32:35.766 A:middle
server to participate in CT.

00:32:36.156 --> 00:32:38.776 A:middle
Now, we remain committed to ATS.

00:32:39.706 --> 00:32:41.146 A:middle
And in the past year we've

00:32:41.146 --> 00:32:43.086 A:middle
continued upgrading the services

00:32:43.366 --> 00:32:44.436 A:middle
that we make available to you as

00:32:44.436 --> 00:32:45.606 A:middle
developers, to make sure that

00:32:45.606 --> 00:32:46.666 A:middle
they are ATS compliant.

00:32:47.506 --> 00:32:48.866 A:middle
All the services you see here

00:32:49.056 --> 00:32:50.966 A:middle
are fully ATS compliant, meaning

00:32:50.966 --> 00:32:51.936 A:middle
that your apps will not have to

00:32:51.936 --> 00:32:53.696 A:middle
specify and exceptions when

00:32:53.696 --> 00:32:54.366 A:middle
talking to them.

00:32:55.266 --> 00:32:56.606 A:middle
You get best practice network

00:32:56.606 --> 00:32:58.576 A:middle
security out of the box, which

00:32:58.576 --> 00:32:59.436 A:middle
is the ultimate goal.

00:33:00.866 --> 00:33:01.996 A:middle
Now, also in this past year, we

00:33:01.996 --> 00:33:04.686 A:middle
kept an eye on the app store to

00:33:04.736 --> 00:33:06.926 A:middle
track and see how ATS adoption

00:33:07.556 --> 00:33:08.386 A:middle
is going.

00:33:08.546 --> 00:33:10.696 A:middle
We see adoption increasing.

00:33:11.616 --> 00:33:13.186 A:middle
We've also been seeing the

00:33:13.186 --> 00:33:14.476 A:middle
number of exceptions increasing.

00:33:14.916 --> 00:33:15.796 A:middle
Which means that there's still

00:33:15.796 --> 00:33:16.746 A:middle
more work to be done.

00:33:17.536 --> 00:33:18.836 A:middle
If you are an app developer,

00:33:19.256 --> 00:33:21.036 A:middle
continue to be vigilant and

00:33:21.036 --> 00:33:23.306 A:middle
remove, or minimize your reliant

00:33:23.306 --> 00:33:24.026 A:middle
on exceptions.

00:33:24.566 --> 00:33:26.246 A:middle
If you are a server operator or

00:33:26.246 --> 00:33:29.146 A:middle
owner, please continue upgrading

00:33:29.146 --> 00:33:30.366 A:middle
your server configurations to

00:33:30.366 --> 00:33:32.726 A:middle
support 1.2 and more modern

00:33:32.726 --> 00:33:35.216 A:middle
versions of TLS.

00:33:35.436 --> 00:33:39.486 A:middle
Now, speaking of TLS, I want to

00:33:39.486 --> 00:33:40.996 A:middle
give you a brief glimpse into

00:33:40.996 --> 00:33:42.226 A:middle
the future of this critical

00:33:42.256 --> 00:33:43.156 A:middle
security protocol.

00:33:44.236 --> 00:33:45.306 A:middle
For those of you who don't know,

00:33:45.626 --> 00:33:47.256 A:middle
TLS is quickly becoming the

00:33:47.256 --> 00:33:48.106 A:middle
[inaudible] of the internet.

00:33:48.576 --> 00:33:49.996 A:middle
More and more of your traffic is

00:33:50.036 --> 00:33:52.616 A:middle
protected on the wire thanks to

00:33:52.616 --> 00:33:53.226 A:middle
TLS, today.

00:33:54.866 --> 00:33:57.226 A:middle
However, not all traffic is

00:33:57.226 --> 00:33:58.066 A:middle
protected the same.

00:33:59.026 --> 00:34:00.186 A:middle
This protocol has been with us

00:34:00.186 --> 00:34:01.926 A:middle
for many, many years and there

00:34:01.926 --> 00:34:02.576 A:middle
are many different

00:34:02.576 --> 00:34:03.726 A:middle
implementations and

00:34:03.726 --> 00:34:05.166 A:middle
configurations of servers out

00:34:05.166 --> 00:34:06.746 A:middle
there supporting a wide variety

00:34:06.746 --> 00:34:08.276 A:middle
of TLS versions.

00:34:09.636 --> 00:34:11.126 A:middle
And over time the protocol has

00:34:11.126 --> 00:34:12.616 A:middle
been patched and amended to

00:34:12.616 --> 00:34:13.836 A:middle
generally address some of the

00:34:13.836 --> 00:34:15.046 A:middle
attacks that Bailey eluded to

00:34:15.046 --> 00:34:17.166 A:middle
earlier and just to fix up

00:34:17.166 --> 00:34:18.176 A:middle
general deficiency in the

00:34:18.176 --> 00:34:18.646 A:middle
protocol.

00:34:19.776 --> 00:34:21.116 A:middle
In recent years, the internet

00:34:21.116 --> 00:34:22.056 A:middle
community has taken it upon

00:34:22.056 --> 00:34:22.996 A:middle
themselves and deemed it

00:34:22.996 --> 00:34:24.216 A:middle
necessary to start working on

00:34:24.216 --> 00:34:25.096 A:middle
the next version of this

00:34:25.566 --> 00:34:26.436 A:middle
critical protocol.

00:34:27.886 --> 00:34:30.816 A:middle
TLS 1.3. And in the spirit of

00:34:30.816 --> 00:34:32.676 A:middle
best practices, we are closely

00:34:32.676 --> 00:34:33.976 A:middle
tracking this work to ensure

00:34:33.976 --> 00:34:35.756 A:middle
that we are ready to adopt it

00:34:36.016 --> 00:34:37.916 A:middle
and help you adopt it when it

00:34:37.916 --> 00:34:40.276 A:middle
becomes a standard.

00:34:40.396 --> 00:34:42.476 A:middle
TLS 1.3 is truly best practice

00:34:42.476 --> 00:34:43.126 A:middle
by design.

00:34:44.156 --> 00:34:45.486 A:middle
All of the features, the

00:34:45.486 --> 00:34:46.576 A:middle
majority of the features that

00:34:46.576 --> 00:34:47.876 A:middle
are in ATS compliance

00:34:47.876 --> 00:34:49.936 A:middle
configurations are simply part

00:34:49.936 --> 00:34:50.826 A:middle
of the core standard.

00:34:52.016 --> 00:34:54.136 A:middle
That means legacy cryptographic

00:34:54.136 --> 00:34:55.756 A:middle
cipher suites, hash functions,

00:34:55.756 --> 00:34:56.906 A:middle
and key exchange algorithms are

00:34:56.906 --> 00:34:58.316 A:middle
simply not allowed.

00:34:58.606 --> 00:34:59.806 A:middle
Not that you shouldn't use them,

00:35:00.016 --> 00:35:01.246 A:middle
they're just not there to begin

00:35:01.246 --> 00:35:01.426 A:middle
with.

00:35:02.496 --> 00:35:03.846 A:middle
That means the specification is

00:35:03.886 --> 00:35:04.996 A:middle
overall much simpler.

00:35:05.786 --> 00:35:06.726 A:middle
Which means that it's easier to

00:35:06.726 --> 00:35:08.996 A:middle
implement, easier to reason

00:35:08.996 --> 00:35:10.856 A:middle
about, and most importantly

00:35:11.116 --> 00:35:11.956 A:middle
easier to test.

00:35:12.126 --> 00:35:13.736 A:middle
And this gives us greater

00:35:13.736 --> 00:35:15.036 A:middle
confidence that the

00:35:15.036 --> 00:35:17.096 A:middle
implementation is free, or at

00:35:17.096 --> 00:35:19.926 A:middle
least has very few problems that

00:35:19.926 --> 00:35:21.256 A:middle
have plagued TLS libraries in

00:35:21.996 --> 00:35:23.836 A:middle
the past.

00:35:23.986 --> 00:35:25.626 A:middle
As a result of this simplicity,

00:35:26.346 --> 00:35:27.596 A:middle
it also has improved network

00:35:27.596 --> 00:35:28.246 A:middle
efficiency.

00:35:29.096 --> 00:35:30.126 A:middle
And let me show you what I mean

00:35:30.956 --> 00:35:31.786 A:middle
by that.

00:35:31.936 --> 00:35:32.836 A:middle
Let's walk through a typical

00:35:32.836 --> 00:35:35.976 A:middle
handshake in TLS 1.2 and 1.3 to

00:35:35.976 --> 00:35:37.116 A:middle
establish a connection to a

00:35:37.116 --> 00:35:37.526 A:middle
server.

00:35:38.136 --> 00:35:41.796 A:middle
We start with a TCP connection,

00:35:42.216 --> 00:35:43.406 A:middle
which requires one round trip

00:35:43.406 --> 00:35:44.176 A:middle
between the client and the

00:35:44.176 --> 00:35:44.506 A:middle
server.

00:35:45.876 --> 00:35:47.026 A:middle
Next step you start your TLS

00:35:47.026 --> 00:35:48.906 A:middle
handshake, where the client and

00:35:48.906 --> 00:35:50.106 A:middle
server exchange some hellos and

00:35:50.106 --> 00:35:51.666 A:middle
some initial centrifugation

00:35:51.666 --> 00:35:54.476 A:middle
information needed to proceed

00:35:54.476 --> 00:35:55.546 A:middle
with the rest of the connection.

00:35:56.246 --> 00:35:58.806 A:middle
In TLS 1.3, they actually start

00:35:58.806 --> 00:36:00.756 A:middle
also negotiating key material

00:36:00.896 --> 00:36:03.256 A:middle
used to encrypt the rest of the

00:36:03.256 --> 00:36:05.476 A:middle
traffic sent over that section,

00:36:05.996 --> 00:36:07.066 A:middle
which means that in the next

00:36:07.066 --> 00:36:08.586 A:middle
round, the client can start

00:36:08.586 --> 00:36:09.726 A:middle
sending application data.

00:36:10.916 --> 00:36:13.536 A:middle
In 1.2, the client and server

00:36:13.536 --> 00:36:14.466 A:middle
are still negotiating key

00:36:14.466 --> 00:36:16.316 A:middle
material, which means that

00:36:16.316 --> 00:36:18.896 A:middle
requires one more round trip to

00:36:18.896 --> 00:36:20.566 A:middle
establish this session and start

00:36:20.566 --> 00:36:21.166 A:middle
sending data.

00:36:22.456 --> 00:36:23.476 A:middle
Now, this may not seem like a

00:36:23.476 --> 00:36:24.806 A:middle
lot, but let me put it in

00:36:24.806 --> 00:36:25.596 A:middle
perspective for you.

00:36:26.546 --> 00:36:27.786 A:middle
We collect data from a wide

00:36:27.786 --> 00:36:30.356 A:middle
variety of devices on different

00:36:30.356 --> 00:36:32.976 A:middle
networks, both carrier, cellular

00:36:33.126 --> 00:36:34.416 A:middle
and wi-fi around the world.

00:36:34.466 --> 00:36:36.866 A:middle
And our data suggests that at

00:36:36.866 --> 00:36:38.426 A:middle
least 10% of cellular

00:36:38.426 --> 00:36:41.566 A:middle
connections, or at least 10% of

00:36:41.566 --> 00:36:42.846 A:middle
TLS connections on cellular

00:36:42.846 --> 00:36:44.236 A:middle
networks, rather, require at

00:36:44.236 --> 00:36:45.636 A:middle
least 800 milliseconds to

00:36:45.636 --> 00:36:46.236 A:middle
complete.

00:36:46.806 --> 00:36:49.206 A:middle
And 10% of TLS connections on

00:36:49.206 --> 00:36:50.966 A:middle
wi-fi networks take 500

00:36:50.966 --> 00:36:51.946 A:middle
milliseconds to complete.

00:36:53.026 --> 00:36:55.566 A:middle
TLS 1.3 would effectively shave

00:36:55.566 --> 00:36:57.676 A:middle
1/3 of that time off, which is a

00:36:57.676 --> 00:37:00.906 A:middle
huge win in mobile world.

00:37:01.516 --> 00:37:05.036 A:middle
Now, TLS 1.3 is still very much

00:37:05.036 --> 00:37:05.966 A:middle
a work in progress.

00:37:06.026 --> 00:37:08.156 A:middle
And that's why ATS compliance is

00:37:08.156 --> 00:37:10.036 A:middle
still focused on getting you to

00:37:10.036 --> 00:37:12.046 A:middle
1.2, and ensuring that you're

00:37:12.046 --> 00:37:13.956 A:middle
using the latest proper standard

00:37:13.956 --> 00:37:14.536 A:middle
of the protocol.

00:37:15.556 --> 00:37:17.806 A:middle
However, if you want to

00:37:17.806 --> 00:37:19.656 A:middle
experiment with TLS 1.3 to

00:37:19.656 --> 00:37:20.636 A:middle
prepare yourself for this

00:37:20.636 --> 00:37:22.396 A:middle
protocol, I'm pleased to

00:37:22.446 --> 00:37:24.706 A:middle
announce that we can now allow

00:37:24.706 --> 00:37:25.376 A:middle
you to do that.

00:37:26.336 --> 00:37:27.926 A:middle
It is not on by default in any

00:37:27.926 --> 00:37:28.656 A:middle
of our systems.

00:37:29.296 --> 00:37:31.036 A:middle
However, if you opt into the

00:37:31.036 --> 00:37:33.576 A:middle
seed and want to start

00:37:33.576 --> 00:37:35.176 A:middle
experimenting with it, you can

00:37:35.176 --> 00:37:39.596 A:middle
install a profile on iOS, or

00:37:39.596 --> 00:37:41.226 A:middle
enable system wide TLS 1.3 on

00:37:41.226 --> 00:37:42.866 A:middle
macOS with the simple defaults

00:37:43.566 --> 00:37:43.666 A:middle
write.

00:37:44.286 --> 00:37:46.736 A:middle
And you would do this to prime

00:37:46.736 --> 00:37:47.916 A:middle
your application and your

00:37:47.916 --> 00:37:49.716 A:middle
network as the protocol marches

00:37:49.716 --> 00:37:51.056 A:middle
toward standardization in the

00:37:51.056 --> 00:37:51.586 A:middle
next year.

00:37:52.116 --> 00:37:54.396 A:middle
And in the meantime, we're

00:37:54.396 --> 00:37:56.516 A:middle
paying our due diligence and

00:37:56.516 --> 00:37:58.056 A:middle
working with third parties and

00:37:58.056 --> 00:37:59.286 A:middle
with our enterprise partners to

00:37:59.286 --> 00:38:01.916 A:middle
ensure their apps and their

00:38:01.916 --> 00:38:02.876 A:middle
networks are ready for the

00:38:02.876 --> 00:38:04.746 A:middle
adoption of the protocol as

00:38:05.736 --> 00:38:05.856 A:middle
well.

00:38:07.296 --> 00:38:08.416 A:middle
Now, I want to take a step back

00:38:08.416 --> 00:38:09.716 A:middle
and come full circle with

00:38:09.716 --> 00:38:11.326 A:middle
everything Bailey and I talked

00:38:11.826 --> 00:38:13.356 A:middle
about today.

00:38:13.546 --> 00:38:15.556 A:middle
One of our primary objectives is

00:38:15.556 --> 00:38:17.296 A:middle
to help you keep your customers'

00:38:17.296 --> 00:38:18.446 A:middle
data secure and private.

00:38:19.376 --> 00:38:20.696 A:middle
And we do this by giving you

00:38:20.696 --> 00:38:21.676 A:middle
best practice tools and

00:38:21.676 --> 00:38:23.116 A:middle
technologies to help achieve

00:38:23.226 --> 00:38:23.716 A:middle
that goal.

00:38:24.986 --> 00:38:26.326 A:middle
However, you need to do some

00:38:26.326 --> 00:38:27.016 A:middle
work yourself.

00:38:27.646 --> 00:38:29.256 A:middle
And that means avoiding legacy

00:38:29.256 --> 00:38:30.816 A:middle
or deprecated algorithms when at

00:38:30.816 --> 00:38:31.496 A:middle
all possible.

00:38:31.696 --> 00:38:33.666 A:middle
And it also means continuing to

00:38:33.666 --> 00:38:34.686 A:middle
upgrade to modern TLS

00:38:34.686 --> 00:38:35.546 A:middle
configurations.

00:38:36.866 --> 00:38:37.726 A:middle
If you're a server owner,

00:38:37.726 --> 00:38:39.916 A:middle
operator, again, that means

00:38:39.916 --> 00:38:42.096 A:middle
moving to 1.2 to make sure that

00:38:42.096 --> 00:38:44.406 A:middle
every app that is ATS compliant

00:38:44.406 --> 00:38:45.016 A:middle
can speak to you.

00:38:46.226 --> 00:38:47.356 A:middle
If you're an app developer,

00:38:47.356 --> 00:38:49.526 A:middle
again, that means minimizing or

00:38:49.526 --> 00:38:51.066 A:middle
reducing the use of exceptions.

00:38:52.666 --> 00:38:53.566 A:middle
And if you're particularly

00:38:53.566 --> 00:38:55.366 A:middle
adventurous, that means also

00:38:55.366 --> 00:38:57.976 A:middle
trying out TLS 1.3 to prime your

00:38:57.976 --> 00:38:59.956 A:middle
application and your network for

00:38:59.956 --> 00:39:00.996 A:middle
the next exciting version of

00:39:00.996 --> 00:39:01.536 A:middle
this protocol.

00:39:02.116 --> 00:39:05.736 A:middle
If you'd like any more

00:39:05.736 --> 00:39:07.886 A:middle
information on any of the topics

00:39:07.886 --> 00:39:09.306 A:middle
that Bailey and I discussed, you

00:39:09.306 --> 00:39:10.326 A:middle
can visit this link above.

00:39:11.866 --> 00:39:13.646 A:middle
Next up in this room we have a

00:39:13.646 --> 00:39:15.026 A:middle
session on privacy and your

00:39:15.026 --> 00:39:16.286 A:middle
apps, which I highly encourage

00:39:16.286 --> 00:39:17.546 A:middle
everyone to attend, given your

00:39:17.546 --> 00:39:18.466 A:middle
interest in security.

00:39:19.236 --> 00:39:20.586 A:middle
Tomorrow we have two back to

00:39:20.586 --> 00:39:22.216 A:middle
back jam packed sessions full of

00:39:22.216 --> 00:39:23.386 A:middle
advances in networking, which

00:39:23.656 --> 00:39:25.396 A:middle
would be very interesting and

00:39:25.396 --> 00:39:27.416 A:middle
relevant to anyone at all who is

00:39:27.416 --> 00:39:28.176 A:middle
interested in TLS.

00:39:28.176 --> 00:39:29.906 A:middle
And that's all I have.

00:39:30.486 --> 00:39:31.266 A:middle
Thank you for your time and

00:39:31.266 --> 00:39:32.896 A:middle
attention, enjoy the rest of the

00:39:32.896 --> 00:39:33.536 A:middle
conference.

00:39:34.516 --> 00:39:38.500 A:middle
[ Applause ]