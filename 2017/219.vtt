WEBVTT

00:00:07.516 --> 00:00:16.500 A:middle
[ Cheering ]

00:00:23.516 --> 00:00:27.136 A:middle
[ Applause ]

00:00:27.636 --> 00:00:28.966 A:middle
&gt;&gt; Good afternoon, everyone, and

00:00:28.966 --> 00:00:30.486 A:middle
welcome to modern user

00:00:30.486 --> 00:00:31.826 A:middle
interaction on iOS.

00:00:32.276 --> 00:00:33.536 A:middle
My name is Dominik Wagner.

00:00:33.536 --> 00:00:35.156 A:middle
I'm an engineer on the UIkit

00:00:35.156 --> 00:00:37.646 A:middle
frameworks team and I am going

00:00:37.646 --> 00:00:39.616 A:middle
to talk today about mastering

00:00:39.616 --> 00:00:41.136 A:middle
the UIkit's gesture recognizer

00:00:41.226 --> 00:00:41.696 A:middle
system.

00:00:41.696 --> 00:00:42.796 A:middle
I will be joined by my

00:00:42.796 --> 00:00:44.316 A:middle
colleagues, Glen and Michael

00:00:44.316 --> 00:00:44.916 A:middle
later on.

00:00:45.286 --> 00:00:46.806 A:middle
So what are we going to talk

00:00:46.806 --> 00:00:47.126 A:middle
about?

00:00:47.126 --> 00:00:48.406 A:middle
We are going to talk about

00:00:48.596 --> 00:00:49.366 A:middle
multi-touch.

00:00:49.366 --> 00:00:51.116 A:middle
Really just touch interface at

00:00:51.116 --> 00:00:51.586 A:middle
this time.

00:00:51.586 --> 00:00:52.616 A:middle
We have great other ways of

00:00:52.616 --> 00:00:54.366 A:middle
interacting with the system but

00:00:54.516 --> 00:00:56.136 A:middle
multi-touch is the subject of

00:00:56.166 --> 00:00:56.806 A:middle
this talk.

00:00:57.336 --> 00:00:59.056 A:middle
I will talk you through the UI

00:00:59.056 --> 00:01:01.246 A:middle
gesture recognizer system in

00:01:01.246 --> 00:01:02.966 A:middle
depth, showing you how to

00:01:02.966 --> 00:01:04.806 A:middle
interact with it and to

00:01:04.806 --> 00:01:06.286 A:middle
customize it to your liking.

00:01:07.206 --> 00:01:08.626 A:middle
Glen will come up and talk to

00:01:08.626 --> 00:01:10.346 A:middle
you about the new APIs for

00:01:10.346 --> 00:01:11.916 A:middle
system gesture interaction in

00:01:11.986 --> 00:01:12.796 A:middle
iOS 11.

00:01:13.266 --> 00:01:14.816 A:middle
And finally Mike will come up

00:01:15.256 --> 00:01:17.016 A:middle
and tell you how to play nice

00:01:17.016 --> 00:01:18.526 A:middle
with the new interactions for

00:01:18.526 --> 00:01:19.296 A:middle
drag and drop.

00:01:19.996 --> 00:01:22.856 A:middle
So this talk works best if you

00:01:22.856 --> 00:01:26.076 A:middle
already know about how touch is

00:01:26.076 --> 00:01:27.256 A:middle
handled in UIkit.

00:01:27.696 --> 00:01:29.366 A:middle
However, if you're new to the

00:01:29.446 --> 00:01:31.376 A:middle
system, let's walk over the two

00:01:31.376 --> 00:01:33.056 A:middle
building blocks for this.

00:01:33.466 --> 00:01:34.756 A:middle
We have the UI touch.

00:01:35.136 --> 00:01:37.276 A:middle
The UI touch is a representation

00:01:37.596 --> 00:01:39.896 A:middle
of a finger touching the screen.

00:01:40.176 --> 00:01:43.176 A:middle
So UI moves from begin, why I

00:01:43.176 --> 00:01:45.256 A:middle
move to cancel, or end it, and

00:01:45.256 --> 00:01:47.016 A:middle
represents one interaction with

00:01:47.076 --> 00:01:47.626 A:middle
the screen.

00:01:48.046 --> 00:01:49.356 A:middle
And on top of that we have

00:01:49.446 --> 00:01:50.966 A:middle
UIGestureRecognizer, a more

00:01:50.966 --> 00:01:52.116 A:middle
powerful abstraction.

00:01:52.726 --> 00:01:54.266 A:middle
UIGestureRecognizer can be

00:01:54.266 --> 00:01:56.086 A:middle
configured with a target and

00:01:56.086 --> 00:01:57.826 A:middle
action and put on a UI view.

00:01:59.006 --> 00:02:00.326 A:middle
And we have gesture recognizer

00:02:00.326 --> 00:02:01.996 A:middle
for all sorts of common

00:02:01.996 --> 00:02:04.246 A:middle
interactions, tap, pan, and

00:02:04.246 --> 00:02:04.706 A:middle
pinch.

00:02:05.616 --> 00:02:06.846 A:middle
And we have the gesture

00:02:06.846 --> 00:02:08.286 A:middle
recognizer system actually

00:02:08.286 --> 00:02:09.806 A:middle
coordinating between those.

00:02:10.126 --> 00:02:11.596 A:middle
And that's what I will be

00:02:11.646 --> 00:02:12.506 A:middle
focusing about.

00:02:13.226 --> 00:02:14.776 A:middle
And I will do this using a

00:02:14.866 --> 00:02:15.856 A:middle
simple example.

00:02:16.606 --> 00:02:18.366 A:middle
Like the AssistiveTouch widget.

00:02:18.776 --> 00:02:20.506 A:middle
You have a widget that it

00:02:20.506 --> 00:02:23.406 A:middle
recognizes a tap and you can pan

00:02:23.406 --> 00:02:23.976 A:middle
it around.

00:02:24.656 --> 00:02:26.396 A:middle
And maybe you even do regular

00:02:26.396 --> 00:02:27.696 A:middle
responder based touch handling

00:02:27.696 --> 00:02:29.586 A:middle
on it to pass through some

00:02:29.586 --> 00:02:30.196 A:middle
touches.

00:02:30.566 --> 00:02:32.206 A:middle
So this example is very simple

00:02:32.206 --> 00:02:33.176 A:middle
and purposefully so.

00:02:33.176 --> 00:02:34.996 A:middle
I don't want you to think about

00:02:34.996 --> 00:02:36.986 A:middle
this example in particular.

00:02:36.986 --> 00:02:38.376 A:middle
I want you to think about your

00:02:38.376 --> 00:02:39.156 A:middle
gesture setups.

00:02:39.596 --> 00:02:41.446 A:middle
So where the secrets of

00:02:41.446 --> 00:02:43.326 A:middle
[inaudible] I'm explaining is

00:02:43.326 --> 00:02:44.806 A:middle
fitting in your setups and how

00:02:44.806 --> 00:02:46.166 A:middle
you can improve yours.

00:02:46.536 --> 00:02:47.916 A:middle
So let's go through this

00:02:47.916 --> 00:02:48.296 A:middle
example.

00:02:48.296 --> 00:02:50.196 A:middle
We have a view and we have the

00:02:50.426 --> 00:02:51.826 A:middle
responder based touch handling

00:02:51.826 --> 00:02:53.026 A:middle
implemented on the view.

00:02:53.386 --> 00:02:55.706 A:middle
And also we begin with one tap

00:02:55.706 --> 00:02:56.656 A:middle
gesture recognizer.

00:02:57.686 --> 00:03:00.826 A:middle
So when a touch goes down on

00:03:00.826 --> 00:03:02.746 A:middle
this view, it begins in its

00:03:02.746 --> 00:03:03.616 A:middle
state began.

00:03:04.016 --> 00:03:05.686 A:middle
And the first thing that happens

00:03:05.686 --> 00:03:07.536 A:middle
is the gesture recognizer system

00:03:07.796 --> 00:03:09.366 A:middle
is delivering it to all gesture

00:03:09.366 --> 00:03:10.926 A:middle
recognizers interested in that

00:03:10.986 --> 00:03:11.366 A:middle
touch.

00:03:11.756 --> 00:03:13.106 A:middle
That means the tap gesture

00:03:13.106 --> 00:03:14.466 A:middle
recognizer in our case.

00:03:14.966 --> 00:03:16.206 A:middle
And the tap gesture recognizer

00:03:16.306 --> 00:03:18.536 A:middle
takes the touch and keeps its

00:03:18.536 --> 00:03:19.986 A:middle
state in its initial state that

00:03:20.016 --> 00:03:20.746 A:middle
it's possible.

00:03:21.406 --> 00:03:23.576 A:middle
And by receiving the touch, it

00:03:23.576 --> 00:03:25.086 A:middle
will be marked as being

00:03:25.306 --> 00:03:26.886 A:middle
including in this interaction.

00:03:27.586 --> 00:03:29.056 A:middle
And after the gesture recognizer

00:03:29.376 --> 00:03:31.656 A:middle
have their go we move on and

00:03:31.656 --> 00:03:33.126 A:middle
deliver that touch into this

00:03:33.126 --> 00:03:34.376 A:middle
state, to the touch handling

00:03:34.376 --> 00:03:34.636 A:middle
methods.

00:03:35.586 --> 00:03:37.836 A:middle
And when we lift up again, then

00:03:38.046 --> 00:03:39.616 A:middle
the touch moves its state to end

00:03:39.616 --> 00:03:40.856 A:middle
it and will be delivered again

00:03:40.856 --> 00:03:42.356 A:middle
first to the gesture recognizer

00:03:42.446 --> 00:03:42.866 A:middle
system.

00:03:43.066 --> 00:03:45.736 A:middle
And the tap gesture recognizer

00:03:45.736 --> 00:03:47.136 A:middle
in this case will recognize by

00:03:47.206 --> 00:03:48.766 A:middle
setting its state to end.

00:03:48.766 --> 00:03:49.866 A:middle
This is how your gesture

00:03:49.866 --> 00:03:52.546 A:middle
recognizers signal that they

00:03:52.546 --> 00:03:53.106 A:middle
recognize.

00:03:53.196 --> 00:03:54.186 A:middle
They move their state.

00:03:54.556 --> 00:03:55.596 A:middle
And the gesture recognizer

00:03:55.656 --> 00:03:58.756 A:middle
system, in turn, will now take

00:03:58.756 --> 00:04:00.636 A:middle
this marked state and send out

00:04:00.736 --> 00:04:02.196 A:middle
the action for this tap gesture

00:04:02.196 --> 00:04:02.776 A:middle
recognizer.

00:04:05.066 --> 00:04:07.346 A:middle
And after that, we continue

00:04:07.346 --> 00:04:10.066 A:middle
onward with sending the UITouch

00:04:10.336 --> 00:04:11.706 A:middle
to the touch handling methods.

00:04:11.886 --> 00:04:12.966 A:middle
The responder based one.

00:04:13.406 --> 00:04:14.906 A:middle
And as you notice we send it

00:04:14.906 --> 00:04:16.526 A:middle
onwards as cancelled and not as

00:04:16.526 --> 00:04:16.956 A:middle
ended.

00:04:17.516 --> 00:04:18.766 A:middle
So why do we do that?

00:04:19.466 --> 00:04:20.756 A:middle
That is because gesture

00:04:20.756 --> 00:04:23.136 A:middle
recognizers hate the regular

00:04:23.286 --> 00:04:25.336 A:middle
touch handling methods, and you

00:04:25.336 --> 00:04:26.766 A:middle
have wasted influence set.

00:04:26.766 --> 00:04:28.056 A:middle
So there are three properties on

00:04:28.056 --> 00:04:29.306 A:middle
your gesture recognizer that you

00:04:29.306 --> 00:04:31.996 A:middle
can set and the first two are

00:04:31.996 --> 00:04:33.226 A:middle
delaysTouchesEnded and

00:04:33.226 --> 00:04:34.556 A:middle
cancelsTouchesInView.

00:04:35.076 --> 00:04:36.796 A:middle
Both of them are set to true as

00:04:36.796 --> 00:04:38.286 A:middle
default and lead to the behavior

00:04:38.286 --> 00:04:39.176 A:middle
we just saw.

00:04:39.176 --> 00:04:40.866 A:middle
That you deliver the touch as

00:04:40.966 --> 00:04:42.636 A:middle
cancelled if a gesture

00:04:42.636 --> 00:04:43.856 A:middle
recognizer recognizes.

00:04:44.446 --> 00:04:45.676 A:middle
And you have a third one that is

00:04:45.736 --> 00:04:47.016 A:middle
delaysTouchesBegan.

00:04:47.016 --> 00:04:48.526 A:middle
And if you turn that to a yes

00:04:48.596 --> 00:04:50.186 A:middle
then the regular responder based

00:04:50.186 --> 00:04:52.086 A:middle
handling will not even see the

00:04:52.116 --> 00:04:53.066 A:middle
touch if your gesture

00:04:53.066 --> 00:04:53.816 A:middle
recognizes.

00:04:54.326 --> 00:04:56.556 A:middle
So the takeaway here is that the

00:04:56.556 --> 00:04:58.116 A:middle
gesture recognizer system comes

00:04:58.116 --> 00:04:59.456 A:middle
first in touch delivery.

00:05:00.036 --> 00:05:01.976 A:middle
That means that it's one of the

00:05:01.976 --> 00:05:03.496 A:middle
many reasons why you should move

00:05:03.496 --> 00:05:05.496 A:middle
on to actually implement gesture

00:05:05.496 --> 00:05:06.986 A:middle
recognizers or use our system

00:05:06.986 --> 00:05:08.176 A:middle
gesture recognizer whereas

00:05:08.216 --> 00:05:09.496 A:middle
implementing the touch handling

00:05:09.496 --> 00:05:09.886 A:middle
methods.

00:05:10.216 --> 00:05:11.586 A:middle
And only if you need to, you

00:05:11.586 --> 00:05:12.436 A:middle
should implement them.

00:05:12.916 --> 00:05:14.946 A:middle
So let's expand on our example

00:05:15.536 --> 00:05:17.876 A:middle
and add another recognizer to

00:05:17.876 --> 00:05:18.856 A:middle
make it a little bit more

00:05:18.856 --> 00:05:19.326 A:middle
interesting.

00:05:19.596 --> 00:05:21.396 A:middle
So let's add the pan gesture

00:05:21.396 --> 00:05:22.956 A:middle
recognizer to this.

00:05:23.116 --> 00:05:24.656 A:middle
And again, we follow a touch

00:05:24.656 --> 00:05:26.446 A:middle
sequence of a touch going down.

00:05:27.276 --> 00:05:29.196 A:middle
And it's -- it will be delivered

00:05:29.196 --> 00:05:30.476 A:middle
as began to all the gesture

00:05:30.476 --> 00:05:32.056 A:middle
recognizers interested in this.

00:05:32.466 --> 00:05:34.216 A:middle
And the gesture recognizers will

00:05:34.216 --> 00:05:36.596 A:middle
start out possible and be marked

00:05:36.726 --> 00:05:38.196 A:middle
because they received a touch as

00:05:38.196 --> 00:05:39.416 A:middle
interest as part of this

00:05:39.416 --> 00:05:40.726 A:middle
interaction by the system.

00:05:41.546 --> 00:05:43.106 A:middle
And then we will deliver this

00:05:43.596 --> 00:05:44.636 A:middle
touch again to the touch

00:05:44.636 --> 00:05:45.776 A:middle
handling methods and began.

00:05:46.606 --> 00:05:48.046 A:middle
Now we move the touch.

00:05:48.046 --> 00:05:51.246 A:middle
And if we move the touch, this

00:05:51.246 --> 00:05:53.386 A:middle
is delivered to the gesture and

00:05:53.386 --> 00:05:54.856 A:middle
the pan gesture, in this case,

00:05:55.466 --> 00:05:57.186 A:middle
will recognize because we moved

00:05:57.186 --> 00:05:59.706 A:middle
enough that the pan gesture will

00:05:59.706 --> 00:06:00.216 A:middle
recognize.

00:06:00.656 --> 00:06:02.216 A:middle
And it will do so by moving its

00:06:02.246 --> 00:06:03.116 A:middle
state to began.

00:06:03.946 --> 00:06:05.246 A:middle
However, we didn't move enough

00:06:05.296 --> 00:06:06.536 A:middle
for the tap gesture recognizer

00:06:06.536 --> 00:06:07.446 A:middle
to actually fail.

00:06:07.446 --> 00:06:08.616 A:middle
So we didn't exceed the

00:06:08.616 --> 00:06:09.486 A:middle
allowable movement.

00:06:09.556 --> 00:06:11.306 A:middle
So the tap gesture recognizer on

00:06:11.306 --> 00:06:13.706 A:middle
its own will stay in the state

00:06:13.786 --> 00:06:14.366 A:middle
possible.

00:06:15.486 --> 00:06:18.166 A:middle
However, in this case, it still

00:06:18.356 --> 00:06:18.916 A:middle
will fail.

00:06:19.146 --> 00:06:20.136 A:middle
That is because of another

00:06:20.136 --> 00:06:21.876 A:middle
aspect of the gesture recognizer

00:06:21.946 --> 00:06:22.336 A:middle
system.

00:06:22.686 --> 00:06:24.106 A:middle
In its default configuration

00:06:24.106 --> 00:06:26.066 A:middle
only gesture recognizer will

00:06:26.066 --> 00:06:27.426 A:middle
recognize and win and will

00:06:27.426 --> 00:06:28.976 A:middle
exclude all the others.

00:06:29.426 --> 00:06:30.786 A:middle
And this is what happened here.

00:06:31.356 --> 00:06:34.406 A:middle
And note that the began actually

00:06:34.406 --> 00:06:35.386 A:middle
will be sent by the gesture

00:06:35.386 --> 00:06:38.286 A:middle
recognizer system and the touch

00:06:38.286 --> 00:06:39.456 A:middle
handling will be sent as

00:06:39.556 --> 00:06:41.276 A:middle
cancelled already again because

00:06:41.276 --> 00:06:42.436 A:middle
the pan gesture recognizer

00:06:42.736 --> 00:06:44.846 A:middle
cancels touches in view and

00:06:45.096 --> 00:06:46.916 A:middle
therefore it began, it will be

00:06:46.916 --> 00:06:48.156 A:middle
cancelled which is an

00:06:48.156 --> 00:06:49.786 A:middle
interesting thing to look at

00:06:49.786 --> 00:06:51.736 A:middle
because your finger is still on

00:06:51.736 --> 00:06:53.706 A:middle
the screen and the gesture

00:06:53.706 --> 00:06:55.706 A:middle
recognizer see it as such but

00:06:55.846 --> 00:06:57.156 A:middle
your responder based handling

00:06:57.156 --> 00:06:57.506 A:middle
doesn't.

00:06:57.806 --> 00:06:59.246 A:middle
So that's something to think

00:06:59.246 --> 00:06:59.576 A:middle
about.

00:07:00.166 --> 00:07:03.146 A:middle
And then if you lift the touch,

00:07:03.896 --> 00:07:05.386 A:middle
it will move its state to ended.

00:07:05.386 --> 00:07:06.826 A:middle
And this ended will be delivered

00:07:07.186 --> 00:07:08.486 A:middle
again to the gesture recognizer

00:07:08.486 --> 00:07:09.196 A:middle
system first.

00:07:09.976 --> 00:07:11.246 A:middle
The pan gesture recognizer will

00:07:11.246 --> 00:07:14.566 A:middle
move its state to ended and mark

00:07:14.566 --> 00:07:16.766 A:middle
itself to one -- its action

00:07:16.766 --> 00:07:17.326 A:middle
being sent.

00:07:18.076 --> 00:07:19.256 A:middle
And then you might think that

00:07:19.256 --> 00:07:20.456 A:middle
the tap gesture recognizer will

00:07:20.456 --> 00:07:21.876 A:middle
also see the ended because you

00:07:21.876 --> 00:07:23.266 A:middle
usually see all the touch

00:07:23.266 --> 00:07:25.536 A:middle
sequences in your handling

00:07:25.736 --> 00:07:26.326 A:middle
methods.

00:07:26.656 --> 00:07:27.956 A:middle
However, because it failed you

00:07:27.956 --> 00:07:28.426 A:middle
don't.

00:07:28.966 --> 00:07:30.356 A:middle
And that's very important if you

00:07:30.356 --> 00:07:31.136 A:middle
do your [inaudible] gesture

00:07:31.136 --> 00:07:31.666 A:middle
recognizer.

00:07:31.776 --> 00:07:32.736 A:middle
So whenever your gesture

00:07:32.736 --> 00:07:34.686 A:middle
recognizer fails, you need to

00:07:34.686 --> 00:07:36.066 A:middle
reset all your state and make

00:07:36.066 --> 00:07:37.846 A:middle
sure that you don't leave behind

00:07:37.846 --> 00:07:39.986 A:middle
old references to touches that

00:07:39.986 --> 00:07:41.226 A:middle
you didn't receive an end or

00:07:41.226 --> 00:07:41.856 A:middle
cancel for.

00:07:41.986 --> 00:07:44.166 A:middle
The ideal place for this is

00:07:44.166 --> 00:07:46.206 A:middle
reset in your custom, your

00:07:46.206 --> 00:07:48.046 A:middle
gesture recognizer subtasks.

00:07:49.126 --> 00:07:50.376 A:middle
And then finally the gesture

00:07:50.376 --> 00:07:51.746 A:middle
recognizer system sends out the

00:07:51.856 --> 00:07:53.276 A:middle
ended -- the pan gesture

00:07:53.366 --> 00:07:54.226 A:middle
recognizer action.

00:07:55.806 --> 00:07:57.156 A:middle
So what you just saw was

00:07:57.226 --> 00:07:57.956 A:middle
exclusion.

00:07:58.136 --> 00:07:59.246 A:middle
This is something that happens

00:07:59.246 --> 00:08:00.396 A:middle
whenever the state change and

00:08:00.396 --> 00:08:01.676 A:middle
you have a way to influence

00:08:01.736 --> 00:08:02.036 A:middle
that.

00:08:02.036 --> 00:08:03.926 A:middle
So in your UIGestureRecognizer

00:08:03.926 --> 00:08:05.596 A:middle
delegate you have the method,

00:08:05.936 --> 00:08:07.026 A:middle
gesture recognizer should

00:08:07.026 --> 00:08:08.686 A:middle
recognize simultaneously with

00:08:09.266 --> 00:08:11.156 A:middle
and you can opt in to not be

00:08:11.156 --> 00:08:11.736 A:middle
excluded.

00:08:12.326 --> 00:08:13.576 A:middle
Note that this is the only thing

00:08:13.576 --> 00:08:14.126 A:middle
you can do.

00:08:14.126 --> 00:08:16.816 A:middle
If any of the participants wants

00:08:16.856 --> 00:08:18.316 A:middle
to recognize simultaneously,

00:08:18.546 --> 00:08:19.026 A:middle
they will.

00:08:19.026 --> 00:08:20.786 A:middle
You have no way to prevent that.

00:08:21.846 --> 00:08:23.566 A:middle
And on the UIGestureRecognizer

00:08:24.856 --> 00:08:26.666 A:middle
itself, you have the inverse

00:08:26.666 --> 00:08:28.046 A:middle
logic which can prevent -- and

00:08:28.046 --> 00:08:29.736 A:middle
can prevent it by in your sub

00:08:29.736 --> 00:08:30.046 A:middle
classes.

00:08:30.366 --> 00:08:33.116 A:middle
So you can do this for gesture

00:08:33.116 --> 00:08:34.726 A:middle
recognizers that you know you

00:08:34.726 --> 00:08:36.506 A:middle
want to recognize simultaneously

00:08:36.506 --> 00:08:36.696 A:middle
with.

00:08:37.616 --> 00:08:38.976 A:middle
So let's see how this looks.

00:08:42.576 --> 00:08:44.376 A:middle
So again we have our setup.

00:08:45.096 --> 00:08:47.016 A:middle
Our touch goes down and began.

00:08:47.636 --> 00:08:48.826 A:middle
And nothing changed in the

00:08:48.826 --> 00:08:49.396 A:middle
beginning.

00:08:50.766 --> 00:08:53.356 A:middle
It moves, again, far enough for

00:08:53.356 --> 00:08:54.736 A:middle
the pan recognizer to recognize

00:08:54.736 --> 00:08:56.056 A:middle
but not far enough for the tap

00:08:56.056 --> 00:08:59.406 A:middle
recognizer to fail on its own.

00:08:59.996 --> 00:09:01.096 A:middle
And at this point and time, the

00:09:01.096 --> 00:09:02.546 A:middle
gesture recognizer system will

00:09:02.546 --> 00:09:04.136 A:middle
perform exclusion because state

00:09:04.286 --> 00:09:04.726 A:middle
change.

00:09:04.726 --> 00:09:06.946 A:middle
So the included gesture

00:09:06.946 --> 00:09:08.966 A:middle
recognizers have changed the

00:09:08.966 --> 00:09:09.436 A:middle
state.

00:09:09.486 --> 00:09:12.016 A:middle
So we ask and this is where the

00:09:12.016 --> 00:09:13.526 A:middle
delegate callback gets called

00:09:13.836 --> 00:09:15.156 A:middle
and you return true.

00:09:15.606 --> 00:09:17.326 A:middle
And if you return true, the tap

00:09:17.326 --> 00:09:18.306 A:middle
gesture recognizer will be

00:09:18.306 --> 00:09:19.236 A:middle
allowed to continue.

00:09:19.686 --> 00:09:22.226 A:middle
And the pan gesture recognizer's

00:09:22.226 --> 00:09:25.976 A:middle
action will be sent.

00:09:26.146 --> 00:09:27.766 A:middle
And if you lift the finger now,

00:09:27.766 --> 00:09:30.686 A:middle
the began, the pan gesture

00:09:30.686 --> 00:09:32.216 A:middle
recognizer will move to ended

00:09:32.556 --> 00:09:33.226 A:middle
and finish.

00:09:33.566 --> 00:09:34.756 A:middle
And the tap gesture recognizer

00:09:34.756 --> 00:09:36.146 A:middle
will also move to ended and

00:09:36.146 --> 00:09:36.656 A:middle
finish.

00:09:37.096 --> 00:09:39.006 A:middle
So it's important to know that

00:09:39.066 --> 00:09:40.326 A:middle
the gesture recognizers will

00:09:40.326 --> 00:09:42.226 A:middle
change the state before the

00:09:42.226 --> 00:09:43.946 A:middle
system actually reconciles them.

00:09:44.276 --> 00:09:46.116 A:middle
That means, at this point, the

00:09:46.116 --> 00:09:46.976 A:middle
gesture recognizer should

00:09:46.976 --> 00:09:48.456 A:middle
recognize simultaneously will be

00:09:48.456 --> 00:09:50.096 A:middle
asked again because we have a

00:09:50.096 --> 00:09:51.476 A:middle
state change and you still need

00:09:51.476 --> 00:09:53.256 A:middle
to report true in this delegate

00:09:53.256 --> 00:09:54.886 A:middle
method if you want both to fire.

00:09:56.206 --> 00:09:57.116 A:middle
And now that both have

00:09:57.156 --> 00:09:58.396 A:middle
recognized, there is another

00:09:58.396 --> 00:09:59.626 A:middle
thing that's interesting.

00:09:59.976 --> 00:10:01.356 A:middle
If you have simultaneous

00:10:01.356 --> 00:10:02.456 A:middle
recognition of gesture

00:10:02.456 --> 00:10:04.676 A:middle
recognizers, once the action

00:10:04.916 --> 00:10:07.236 A:middle
will be sent, you don't -- you

00:10:07.236 --> 00:10:08.696 A:middle
can't rely on a specific order.

00:10:09.136 --> 00:10:10.476 A:middle
So the pan and the tap gesture

00:10:10.476 --> 00:10:11.726 A:middle
recognizer will fire because

00:10:11.726 --> 00:10:12.236 A:middle
they're recognized

00:10:12.236 --> 00:10:14.986 A:middle
simultaneously but you have no

00:10:14.986 --> 00:10:16.416 A:middle
guarantee in which order that

00:10:17.306 --> 00:10:18.636 A:middle
will happen.

00:10:18.746 --> 00:10:21.886 A:middle
So that's all and well but now

00:10:21.886 --> 00:10:23.736 A:middle
we have a little bit of a pan

00:10:23.736 --> 00:10:24.936 A:middle
and the tap and maybe that's not

00:10:24.936 --> 00:10:25.506 A:middle
what we want.

00:10:25.866 --> 00:10:28.706 A:middle
If we want the pan recognizer to

00:10:28.706 --> 00:10:30.116 A:middle
actually wait until the tap

00:10:30.116 --> 00:10:32.206 A:middle
recognizer has exceeded its

00:10:32.206 --> 00:10:34.526 A:middle
allowable movement, then we have

00:10:34.526 --> 00:10:36.516 A:middle
another way to do that and that

00:10:36.516 --> 00:10:37.546 A:middle
way is called failure

00:10:37.546 --> 00:10:38.436 A:middle
requirements.

00:10:39.056 --> 00:10:41.416 A:middle
And failure requirements, you

00:10:41.416 --> 00:10:43.236 A:middle
can set up between two gesture

00:10:43.236 --> 00:10:43.986 A:middle
recognizers.

00:10:44.846 --> 00:10:46.286 A:middle
For example with required to

00:10:46.286 --> 00:10:47.966 A:middle
fail statically and this is the

00:10:47.966 --> 00:10:48.686 A:middle
preferred one.

00:10:48.686 --> 00:10:50.186 A:middle
And what that means is that one

00:10:50.186 --> 00:10:52.286 A:middle
recognizer requires another one

00:10:52.286 --> 00:10:53.876 A:middle
to fail before it sends its

00:10:53.876 --> 00:10:54.306 A:middle
action.

00:10:54.696 --> 00:10:56.586 A:middle
It still would traverse its

00:10:56.586 --> 00:10:58.716 A:middle
state but it waits to send its

00:10:59.626 --> 00:10:59.776 A:middle
action.

00:11:00.486 --> 00:11:02.476 A:middle
And if you need more dynamic and

00:11:02.476 --> 00:11:04.276 A:middle
one dynamic way to do that you

00:11:04.356 --> 00:11:05.576 A:middle
can do so also in the

00:11:05.576 --> 00:11:07.116 A:middle
UIGestureRecognizer delegate

00:11:07.656 --> 00:11:08.836 A:middle
with the two methods gesture

00:11:08.836 --> 00:11:09.816 A:middle
recognizer should require

00:11:09.816 --> 00:11:11.506 A:middle
failure of and gesture

00:11:11.506 --> 00:11:13.086 A:middle
recognizer should be required to

00:11:13.086 --> 00:11:13.846 A:middle
fail by.

00:11:14.526 --> 00:11:15.666 A:middle
And note that those go both

00:11:15.736 --> 00:11:16.136 A:middle
ways.

00:11:16.266 --> 00:11:17.906 A:middle
You need to make sure to agree

00:11:17.906 --> 00:11:20.036 A:middle
in your implementation with what

00:11:20.036 --> 00:11:21.486 A:middle
your answer here because

00:11:21.486 --> 00:11:23.616 A:middle
depending on the UI more complex

00:11:23.706 --> 00:11:25.166 A:middle
gesture setup, that might be

00:11:25.166 --> 00:11:26.766 A:middle
called the one way or the other

00:11:26.766 --> 00:11:27.776 A:middle
way first.

00:11:28.086 --> 00:11:30.396 A:middle
So that needs to be the same,

00:11:30.726 --> 00:11:32.106 A:middle
otherwise, it might lead to

00:11:32.106 --> 00:11:33.556 A:middle
several bugs.

00:11:35.156 --> 00:11:36.376 A:middle
And you have the same in the

00:11:36.376 --> 00:11:38.256 A:middle
UIGestureRecognizer subclasses

00:11:38.456 --> 00:11:39.636 A:middle
where you can implement your

00:11:39.636 --> 00:11:40.846 A:middle
require failure or should be

00:11:40.846 --> 00:11:42.286 A:middle
required to fail by.

00:11:42.756 --> 00:11:44.406 A:middle
Again those directions are more

00:11:44.406 --> 00:11:46.736 A:middle
for a channel mechanism.

00:11:47.446 --> 00:11:49.436 A:middle
Let's also look into how this

00:11:49.436 --> 00:11:50.056 A:middle
works.

00:11:50.326 --> 00:11:52.016 A:middle
So we have setup our static

00:11:52.016 --> 00:11:53.526 A:middle
failure requirement between the

00:11:53.576 --> 00:11:55.086 A:middle
pan recognizer and the tap

00:11:55.086 --> 00:11:55.956 A:middle
recognizer.

00:11:56.686 --> 00:11:59.946 A:middle
And again, our touch goes down.

00:11:59.946 --> 00:12:02.086 A:middle
The state start out as possible.

00:12:02.876 --> 00:12:04.226 A:middle
Then we move the touch.

00:12:04.986 --> 00:12:07.666 A:middle
And the move will be delivered

00:12:07.836 --> 00:12:09.296 A:middle
to both gesture recognizers and

00:12:09.296 --> 00:12:10.776 A:middle
the pan recognizer will begin

00:12:11.026 --> 00:12:12.306 A:middle
and the tap recognizer will stay

00:12:12.306 --> 00:12:12.836 A:middle
possible.

00:12:13.666 --> 00:12:15.076 A:middle
However because the existing

00:12:15.126 --> 00:12:16.816 A:middle
failure requirement, the pan

00:12:16.816 --> 00:12:18.286 A:middle
recognizer will not send its

00:12:18.286 --> 00:12:19.646 A:middle
action at this point and time.

00:12:22.026 --> 00:12:23.396 A:middle
So going on, moving a little bit

00:12:23.446 --> 00:12:24.866 A:middle
further, but still not far

00:12:24.866 --> 00:12:26.316 A:middle
enough to fail the tap gesture

00:12:26.316 --> 00:12:28.586 A:middle
recognizer we will move, and the

00:12:28.586 --> 00:12:30.106 A:middle
pan recognizer will change its

00:12:30.176 --> 00:12:31.546 A:middle
state to changed.

00:12:33.386 --> 00:12:34.796 A:middle
And the tap recognizer will stay

00:12:34.796 --> 00:12:36.506 A:middle
possible but still the failure

00:12:36.506 --> 00:12:38.036 A:middle
requirement is not fulfilled.

00:12:38.256 --> 00:12:40.386 A:middle
So that means still no action.

00:12:40.956 --> 00:12:42.966 A:middle
And it is at this point and time

00:12:42.966 --> 00:12:45.116 A:middle
if you would move further away

00:12:45.436 --> 00:12:47.116 A:middle
then the tap recognizer would

00:12:47.116 --> 00:12:49.006 A:middle
fail and by failing would allow

00:12:49.006 --> 00:12:50.426 A:middle
the pan recognizer to send its

00:12:50.426 --> 00:12:50.896 A:middle
action.

00:12:51.716 --> 00:12:54.006 A:middle
And there's an important message

00:12:54.006 --> 00:12:54.336 A:middle
in there.

00:12:54.336 --> 00:12:56.006 A:middle
If the pan recognizer sends its

00:12:56.006 --> 00:12:57.366 A:middle
action as this point and time,

00:12:57.656 --> 00:12:58.896 A:middle
it will send its action in its

00:12:58.896 --> 00:12:59.706 A:middle
state began.

00:13:00.186 --> 00:13:01.836 A:middle
Although it already is in state

00:13:01.836 --> 00:13:03.406 A:middle
change because we make sure the

00:13:03.406 --> 00:13:04.836 A:middle
client see a consistent picture

00:13:05.106 --> 00:13:07.766 A:middle
of this but the important part,

00:13:08.126 --> 00:13:09.486 A:middle
you should never inspect the

00:13:09.486 --> 00:13:11.326 A:middle
gesture recognizer state outside

00:13:11.326 --> 00:13:13.186 A:middle
of its action method and think

00:13:13.186 --> 00:13:14.516 A:middle
you know exactly what the state

00:13:14.516 --> 00:13:16.376 A:middle
is, because only in the action

00:13:16.376 --> 00:13:17.606 A:middle
method that is defined.

00:13:18.896 --> 00:13:20.786 A:middle
But now let's go even further

00:13:20.786 --> 00:13:23.076 A:middle
and just lift the touch and the

00:13:23.076 --> 00:13:24.406 A:middle
touch then moves into the state

00:13:24.406 --> 00:13:26.026 A:middle
into ended and will be

00:13:26.026 --> 00:13:26.426 A:middle
delivered.

00:13:26.426 --> 00:13:27.766 A:middle
The pan recognizer move its

00:13:27.766 --> 00:13:29.246 A:middle
state to ended and recognizes.

00:13:29.556 --> 00:13:30.976 A:middle
The tap gesture recognizer moves

00:13:30.976 --> 00:13:31.996 A:middle
its state into ended and

00:13:31.996 --> 00:13:32.686 A:middle
recognizes.

00:13:35.296 --> 00:13:37.076 A:middle
But now still no action.

00:13:37.076 --> 00:13:38.496 A:middle
So we have a complete set of

00:13:38.496 --> 00:13:40.236 A:middle
state changes in the pan gesture

00:13:40.236 --> 00:13:41.676 A:middle
recognizer but it never send out

00:13:41.676 --> 00:13:43.406 A:middle
its action, because the tap

00:13:43.406 --> 00:13:45.496 A:middle
recognizer did recognize and

00:13:45.496 --> 00:13:47.166 A:middle
therefore no failure requirement

00:13:47.336 --> 00:13:48.076 A:middle
was fulfilled.

00:13:48.576 --> 00:13:50.146 A:middle
And the tap gesture recognizer

00:13:50.146 --> 00:13:51.666 A:middle
will finally send its action.

00:13:52.136 --> 00:13:53.926 A:middle
So that is failure requirements.

00:13:54.116 --> 00:13:55.596 A:middle
Failure requirements really just

00:13:55.646 --> 00:13:57.206 A:middle
prevent the extra send of a

00:13:57.206 --> 00:13:58.156 A:middle
gesture recognizer.

00:13:58.526 --> 00:14:01.866 A:middle
And you should be aware of that.

00:14:02.076 --> 00:14:03.326 A:middle
Let's look at this picture for a

00:14:03.326 --> 00:14:03.756 A:middle
moment.

00:14:03.756 --> 00:14:06.106 A:middle
So this is a regular settings

00:14:06.746 --> 00:14:08.656 A:middle
screen and think about how many

00:14:08.656 --> 00:14:10.106 A:middle
gesture recognizers are ready to

00:14:10.496 --> 00:14:11.736 A:middle
drop into action on this screen.

00:14:11.796 --> 00:14:14.776 A:middle
Just think of a number.

00:14:14.946 --> 00:14:17.916 A:middle
Yeah. It is 163.

00:14:19.616 --> 00:14:21.126 A:middle
That sounds quite a lot because

00:14:21.126 --> 00:14:23.276 A:middle
it is but our gesture recognizer

00:14:23.276 --> 00:14:25.236 A:middle
system is built for that and the

00:14:25.236 --> 00:14:26.506 A:middle
way we deal with this is we

00:14:26.506 --> 00:14:27.586 A:middle
narrow that down.

00:14:27.916 --> 00:14:29.596 A:middle
And for example, if a touch goes

00:14:29.736 --> 00:14:31.696 A:middle
down to the -- to this switch

00:14:31.696 --> 00:14:33.846 A:middle
here, we narrowed down the

00:14:33.846 --> 00:14:35.586 A:middle
interest gesture recognizers for

00:14:35.656 --> 00:14:35.876 A:middle
you.

00:14:36.706 --> 00:14:38.856 A:middle
And in this case that leaves

00:14:38.856 --> 00:14:39.716 A:middle
about seven.

00:14:40.036 --> 00:14:41.436 A:middle
And seven is really a good

00:14:41.766 --> 00:14:42.636 A:middle
number to deal with.

00:14:43.126 --> 00:14:44.406 A:middle
So how do we do this?

00:14:44.706 --> 00:14:46.466 A:middle
So in channel, we do hit testing

00:14:46.466 --> 00:14:48.166 A:middle
as soon as a touch goes down.

00:14:48.166 --> 00:14:50.036 A:middle
And this hit testing is done by

00:14:50.036 --> 00:14:51.346 A:middle
walking the view hierarchy.

00:14:51.346 --> 00:14:52.966 A:middle
Starting from window and asking

00:14:52.966 --> 00:14:55.236 A:middle
the hit testing methods if a

00:14:55.236 --> 00:14:56.986 A:middle
touch is inside of a view.

00:14:56.986 --> 00:14:58.196 A:middle
And when we find the deepest

00:14:58.296 --> 00:15:00.406 A:middle
view, we keep that and assign

00:15:00.406 --> 00:15:01.206 A:middle
that to the touch.

00:15:05.476 --> 00:15:07.386 A:middle
And this is a short overview

00:15:07.386 --> 00:15:07.986 A:middle
about this.

00:15:07.986 --> 00:15:10.366 A:middle
So you have hit test and point

00:15:10.366 --> 00:15:10.886 A:middle
inside.

00:15:11.716 --> 00:15:15.216 A:middle
In here this is your override

00:15:15.216 --> 00:15:15.626 A:middle
points.

00:15:15.886 --> 00:15:17.986 A:middle
Note that if you override this

00:15:17.986 --> 00:15:19.906 A:middle
to extend or contract your hit

00:15:19.906 --> 00:15:21.026 A:middle
testing area, you should

00:15:21.026 --> 00:15:22.926 A:middle
override both of them to agree

00:15:23.416 --> 00:15:23.966 A:middle
again.

00:15:24.496 --> 00:15:26.806 A:middle
Also note that the event in this

00:15:26.836 --> 00:15:28.206 A:middle
queue is not yet fully formed

00:15:28.206 --> 00:15:29.396 A:middle
because hit test is the first

00:15:29.396 --> 00:15:29.916 A:middle
thing we do.

00:15:30.346 --> 00:15:32.026 A:middle
That means that if you inspect

00:15:32.026 --> 00:15:33.936 A:middle
the touches of the event, they

00:15:33.936 --> 00:15:35.426 A:middle
might not be there because it's

00:15:35.426 --> 00:15:36.646 A:middle
really -- we deal with one after

00:15:36.646 --> 00:15:38.066 A:middle
another and then add the touches

00:15:38.066 --> 00:15:38.626 A:middle
to the event.

00:15:39.006 --> 00:15:40.226 A:middle
So that might be surprising to

00:15:40.226 --> 00:15:42.156 A:middle
you but that's how it is on hit

00:15:42.186 --> 00:15:42.576 A:middle
testing.

00:15:42.576 --> 00:15:43.816 A:middle
So the only thing you can ask

00:15:43.886 --> 00:15:45.306 A:middle
the event is kind of its

00:15:45.306 --> 00:15:48.146 A:middle
existence in the callback and

00:15:48.276 --> 00:15:49.826 A:middle
it's type.

00:15:50.296 --> 00:15:52.216 A:middle
There are more properties that

00:15:52.286 --> 00:15:53.396 A:middle
influence hit testing.

00:15:53.436 --> 00:15:55.276 A:middle
For example, in UIView there is

00:15:55.276 --> 00:15:56.496 A:middle
user interaction is enabled.

00:15:56.496 --> 00:15:57.846 A:middle
This is one of the most

00:15:57.846 --> 00:15:58.496 A:middle
important ones.

00:15:58.846 --> 00:16:01.376 A:middle
This is usually true other -- if

00:16:01.376 --> 00:16:03.236 A:middle
you didn't change it but for

00:16:03.236 --> 00:16:05.216 A:middle
example, for an image view that

00:16:05.216 --> 00:16:07.586 A:middle
is false by default.

00:16:07.866 --> 00:16:09.086 A:middle
So you need to switch it to yes

00:16:09.116 --> 00:16:10.686 A:middle
otherwise you don't have any hit

00:16:10.716 --> 00:16:11.666 A:middle
testing on this one.

00:16:12.056 --> 00:16:13.386 A:middle
And there's alpha and is hidden

00:16:13.386 --> 00:16:14.926 A:middle
which we use to actually guard

00:16:14.976 --> 00:16:16.596 A:middle
hit testing so if something is

00:16:16.596 --> 00:16:18.846 A:middle
invisible we don't hit test it

00:16:19.196 --> 00:16:21.516 A:middle
but in your customs subclasses

00:16:21.516 --> 00:16:23.226 A:middle
you really need to also adhere

00:16:23.226 --> 00:16:23.576 A:middle
to that.

00:16:23.916 --> 00:16:24.786 A:middle
And then there's -- it's

00:16:24.786 --> 00:16:26.866 A:middle
multiple touch enabled which for

00:16:26.866 --> 00:16:28.746 A:middle
historical reasons defaults to

00:16:28.746 --> 00:16:30.436 A:middle
no but doesn't affect the

00:16:30.436 --> 00:16:31.716 A:middle
gesture recognizer system.

00:16:31.716 --> 00:16:34.226 A:middle
So if you ever did come in a

00:16:34.226 --> 00:16:35.656 A:middle
situation where you actually

00:16:35.656 --> 00:16:37.096 A:middle
have working gesture [inaudible]

00:16:37.156 --> 00:16:38.946 A:middle
and everything but your

00:16:38.946 --> 00:16:40.136 A:middle
responder based touch handling

00:16:40.136 --> 00:16:41.706 A:middle
code only ever saw one touch,

00:16:41.706 --> 00:16:43.906 A:middle
then probably one view in your

00:16:43.906 --> 00:16:45.986 A:middle
hierarchy did have set this to

00:16:45.986 --> 00:16:46.676 A:middle
no still.

00:16:46.716 --> 00:16:47.776 A:middle
You just need to set this to

00:16:47.886 --> 00:16:48.146 A:middle
true.

00:16:48.596 --> 00:16:49.846 A:middle
And then, of course, there's

00:16:49.846 --> 00:16:51.566 A:middle
UIViewAnimationOptions when we

00:16:51.566 --> 00:16:53.646 A:middle
default you out of end user

00:16:53.646 --> 00:16:54.256 A:middle
interaction.

00:16:54.676 --> 00:16:57.646 A:middle
And that's not because we don't

00:16:57.646 --> 00:16:59.106 A:middle
want you to hit test during user

00:16:59.106 --> 00:17:01.176 A:middle
interaction, it's more because

00:17:01.176 --> 00:17:02.546 A:middle
you really need to do additional

00:17:02.546 --> 00:17:03.726 A:middle
work if you enable this.

00:17:04.036 --> 00:17:05.206 A:middle
So you need to override hit

00:17:05.206 --> 00:17:06.366 A:middle
testing in point and side

00:17:06.366 --> 00:17:07.016 A:middle
[phonetic] for this to work

00:17:07.066 --> 00:17:07.336 A:middle
well.

00:17:08.296 --> 00:17:09.466 A:middle
And we talked about this in the

00:17:09.466 --> 00:17:10.836 A:middle
past if presentation layer

00:17:10.836 --> 00:17:11.976 A:middle
versus model layer tells you

00:17:11.976 --> 00:17:13.206 A:middle
something then you're probably

00:17:13.976 --> 00:17:14.206 A:middle
good.

00:17:14.466 --> 00:17:16.196 A:middle
If not, please really watch that

00:17:16.196 --> 00:17:16.566 A:middle
talk.

00:17:17.036 --> 00:17:19.356 A:middle
And also last year we added the

00:17:19.356 --> 00:17:21.706 A:middle
UIViewPropertyAnimator and it

00:17:21.706 --> 00:17:23.046 A:middle
actually helps you with hit

00:17:23.046 --> 00:17:24.296 A:middle
testing during animations.

00:17:24.746 --> 00:17:26.386 A:middle
However, there is this property

00:17:26.386 --> 00:17:27.766 A:middle
that is manual hit testing

00:17:27.766 --> 00:17:29.156 A:middle
enabled and you have to set it

00:17:29.636 --> 00:17:32.076 A:middle
to true to make -- to do custom

00:17:32.076 --> 00:17:33.296 A:middle
interesting and more complex

00:17:33.296 --> 00:17:33.936 A:middle
scenarios.

00:17:34.456 --> 00:17:37.006 A:middle
So let's go back to our hit

00:17:37.006 --> 00:17:38.206 A:middle
testing in the view hierarchy.

00:17:38.566 --> 00:17:39.916 A:middle
Now that we have hit tested.

00:17:40.206 --> 00:17:41.476 A:middle
We walk back up the view

00:17:41.476 --> 00:17:42.796 A:middle
hierarchy and collect all the

00:17:42.796 --> 00:17:44.296 A:middle
gesture recognizers on those

00:17:44.336 --> 00:17:44.826 A:middle
views.

00:17:45.056 --> 00:17:46.586 A:middle
This is our base set of gesture

00:17:46.586 --> 00:17:49.666 A:middle
recognizers we consider for this

00:17:49.666 --> 00:17:53.206 A:middle
interaction but there is more

00:17:53.206 --> 00:17:54.516 A:middle
you can customize on this.

00:17:54.516 --> 00:17:55.726 A:middle
So you have a callback.

00:17:55.786 --> 00:17:56.906 A:middle
UIGestureRecognizer should

00:17:56.906 --> 00:17:57.666 A:middle
receive touch.

00:17:58.076 --> 00:18:00.496 A:middle
If you return false from that,

00:18:00.496 --> 00:18:03.196 A:middle
you can actually exclude a

00:18:03.196 --> 00:18:04.446 A:middle
gesture recognizer from

00:18:04.446 --> 00:18:05.696 A:middle
participating at all.

00:18:05.696 --> 00:18:07.346 A:middle
So it will never see that touch.

00:18:07.576 --> 00:18:09.056 A:middle
It's also a great break point

00:18:09.056 --> 00:18:10.826 A:middle
for you to see if your gesture

00:18:11.556 --> 00:18:13.246 A:middle
recognizer plays -- gets a

00:18:13.246 --> 00:18:15.246 A:middle
chance to actually play with the

00:18:15.246 --> 00:18:15.886 A:middle
interaction.

00:18:16.276 --> 00:18:17.746 A:middle
And there's a point little later

00:18:17.746 --> 00:18:18.986 A:middle
on that gesture recognizer

00:18:18.986 --> 00:18:20.386 A:middle
should begin also could create

00:18:20.386 --> 00:18:21.466 A:middle
problem for debugging.

00:18:21.756 --> 00:18:23.296 A:middle
And this is asked whenever a

00:18:23.356 --> 00:18:24.826 A:middle
gesture recognizer really tries

00:18:24.866 --> 00:18:26.806 A:middle
to begin and you can say no.

00:18:26.936 --> 00:18:28.756 A:middle
False in this case.

00:18:29.056 --> 00:18:31.106 A:middle
And if you do so, it will fail.

00:18:31.106 --> 00:18:33.356 A:middle
It will not -- it will fulfill

00:18:33.356 --> 00:18:34.936 A:middle
its failure requirements by

00:18:34.936 --> 00:18:36.916 A:middle
failing and its also a good

00:18:37.196 --> 00:18:39.386 A:middle
point to look into.

00:18:39.556 --> 00:18:41.056 A:middle
There's static properties is

00:18:41.056 --> 00:18:42.656 A:middle
enabled on UIGestureRecognizer.

00:18:42.656 --> 00:18:45.136 A:middle
You can set that to false

00:18:45.136 --> 00:18:47.026 A:middle
temporarily if you know your

00:18:47.026 --> 00:18:48.396 A:middle
state and you want to do that

00:18:48.736 --> 00:18:49.956 A:middle
statically, that is very

00:18:49.956 --> 00:18:50.486 A:middle
helpful.

00:18:50.716 --> 00:18:52.536 A:middle
And you also that trick we

00:18:52.536 --> 00:18:54.686 A:middle
talked about more often that

00:18:54.986 --> 00:18:57.056 A:middle
when you set this to false while

00:18:57.056 --> 00:18:58.576 A:middle
it recognizes, it will fail.

00:18:58.856 --> 00:19:00.156 A:middle
And if you set it immediately to

00:19:00.246 --> 00:19:01.766 A:middle
true again, your gesture

00:19:01.766 --> 00:19:04.226 A:middle
recognizer will begin respond to

00:19:04.226 --> 00:19:05.356 A:middle
the next touch sequence

00:19:05.386 --> 00:19:05.866 A:middle
directly.

00:19:06.776 --> 00:19:07.926 A:middle
And there's the allowed touch

00:19:07.976 --> 00:19:09.526 A:middle
types which default to all the

00:19:09.526 --> 00:19:11.686 A:middle
touch types that is direct,

00:19:11.686 --> 00:19:13.086 A:middle
indirect, and stylus.

00:19:13.656 --> 00:19:15.996 A:middle
But you can narrow it down to

00:19:15.996 --> 00:19:17.656 A:middle
just the stylus or just direct

00:19:17.656 --> 00:19:20.996 A:middle
touches, but if you really want

00:19:21.276 --> 00:19:23.006 A:middle
gestures to recognize between

00:19:23.006 --> 00:19:24.176 A:middle
different touch types you also

00:19:24.176 --> 00:19:25.856 A:middle
have to set requires exclusive

00:19:25.856 --> 00:19:27.546 A:middle
touch type to true.

00:19:27.936 --> 00:19:29.696 A:middle
Only then you can really do a

00:19:29.696 --> 00:19:31.166 A:middle
pinch between a pencil and a

00:19:31.166 --> 00:19:31.796 A:middle
direct touch.

00:19:32.206 --> 00:19:33.126 A:middle
Otherwise you can't.

00:19:33.826 --> 00:19:34.856 A:middle
Speaking of properties.

00:19:34.856 --> 00:19:36.206 A:middle
We have new properties for you

00:19:36.386 --> 00:19:37.886 A:middle
in iOS 11.

00:19:37.886 --> 00:19:39.086 A:middle
And that's a name.

00:19:39.656 --> 00:19:40.846 A:middle
Sounds simple but it's really

00:19:40.846 --> 00:19:42.256 A:middle
helpful because we encourage you

00:19:42.256 --> 00:19:43.356 A:middle
to actually use all of our

00:19:43.356 --> 00:19:44.436 A:middle
gesture recognizer and just

00:19:44.436 --> 00:19:45.256 A:middle
configure them.

00:19:45.576 --> 00:19:47.036 A:middle
So you can add an additional

00:19:47.036 --> 00:19:47.246 A:middle
name.

00:19:47.246 --> 00:19:48.396 A:middle
So in debugging you don't have

00:19:48.466 --> 00:19:49.706 A:middle
to look above the action method

00:19:50.146 --> 00:19:52.206 A:middle
and do that but only use that

00:19:52.206 --> 00:19:53.996 A:middle
for debugging.

00:19:53.996 --> 00:19:56.176 A:middle
We will not guarantee you that

00:19:56.176 --> 00:19:58.046 A:middle
we will mess with this by the

00:19:58.046 --> 00:19:58.486 A:middle
system.

00:19:59.676 --> 00:20:01.836 A:middle
And speaking about debugging.

00:20:01.836 --> 00:20:03.966 A:middle
We also have the break point

00:20:03.966 --> 00:20:05.076 A:middle
opportunities in gesture

00:20:05.076 --> 00:20:06.406 A:middle
recognizer should receive touch

00:20:06.976 --> 00:20:08.636 A:middle
to actually see if your setup

00:20:08.676 --> 00:20:09.146 A:middle
does work.

00:20:09.496 --> 00:20:11.116 A:middle
There's touches begin

00:20:11.116 --> 00:20:12.226 A:middle
[inaudible] responder base touch

00:20:12.226 --> 00:20:14.366 A:middle
handling method that helps you

00:20:14.816 --> 00:20:16.206 A:middle
look into the state of a gesture

00:20:16.206 --> 00:20:17.736 A:middle
recognizer system in a known

00:20:17.776 --> 00:20:19.106 A:middle
state as you have seen -- you've

00:20:19.156 --> 00:20:20.946 A:middle
seen the order how we do this.

00:20:21.246 --> 00:20:22.606 A:middle
Now you can look into that and

00:20:22.606 --> 00:20:25.866 A:middle
actually know what the values

00:20:25.866 --> 00:20:26.336 A:middle
mean.

00:20:26.736 --> 00:20:28.106 A:middle
And you can look at the gesture

00:20:28.106 --> 00:20:29.766 A:middle
recognizer of a touch, for

00:20:29.766 --> 00:20:31.886 A:middle
example, or you can look at the

00:20:31.886 --> 00:20:33.016 A:middle
touches for some gesture

00:20:33.016 --> 00:20:34.986 A:middle
recognizer by asking the event

00:20:35.346 --> 00:20:38.076 A:middle
or you can also collect the

00:20:38.076 --> 00:20:39.726 A:middle
gesture recognizers through the

00:20:39.726 --> 00:20:41.086 A:middle
view [inaudible] debugging

00:20:41.086 --> 00:20:41.426 A:middle
session.

00:20:43.356 --> 00:20:45.126 A:middle
Some words on custom

00:20:45.126 --> 00:20:46.176 A:middle
UIGestureRecognizers.

00:20:46.656 --> 00:20:47.946 A:middle
You should always begin late and

00:20:47.996 --> 00:20:48.786 A:middle
fail fast.

00:20:49.186 --> 00:20:50.896 A:middle
That means if you begin too

00:20:50.896 --> 00:20:52.086 A:middle
early, for example, in touches

00:20:52.126 --> 00:20:53.896 A:middle
begin you don't give any other

00:20:53.896 --> 00:20:55.736 A:middle
gesture recognizer the chance to

00:20:55.736 --> 00:20:56.826 A:middle
be not excluded.

00:20:57.276 --> 00:20:57.886 A:middle
This is bad.

00:20:57.886 --> 00:20:59.136 A:middle
So you should begin as late as

00:20:59.166 --> 00:21:00.786 A:middle
you can by still preserving the

00:21:00.786 --> 00:21:01.756 A:middle
intent of your gesture

00:21:01.756 --> 00:21:02.326 A:middle
recognizer.

00:21:02.756 --> 00:21:05.146 A:middle
And you also should fail fast so

00:21:05.146 --> 00:21:06.696 A:middle
you don't hang around failure

00:21:06.696 --> 00:21:08.006 A:middle
requirements of other gesture

00:21:08.006 --> 00:21:10.066 A:middle
recognizers which is very

00:21:10.066 --> 00:21:11.926 A:middle
important and you should also

00:21:11.926 --> 00:21:13.556 A:middle
always whenever you have seen a

00:21:13.556 --> 00:21:16.036 A:middle
touch move to the state to fail

00:21:16.086 --> 00:21:17.396 A:middle
even if we didn't move out of

00:21:17.396 --> 00:21:18.456 A:middle
possible, because you have to be

00:21:18.456 --> 00:21:19.806 A:middle
marked as being part of this

00:21:19.806 --> 00:21:21.166 A:middle
interaction and otherwise you

00:21:21.166 --> 00:21:23.026 A:middle
hang your system.

00:21:23.026 --> 00:21:24.526 A:middle
Also be serious about ignoring

00:21:24.526 --> 00:21:25.016 A:middle
touches.

00:21:25.076 --> 00:21:27.116 A:middle
Ignore them properly not just by

00:21:27.116 --> 00:21:28.226 A:middle
not handling them.

00:21:28.606 --> 00:21:30.016 A:middle
You should also call ignore.

00:21:30.346 --> 00:21:31.856 A:middle
That's for event on your custom

00:21:31.856 --> 00:21:33.676 A:middle
gesture recognizer subclass,

00:21:33.676 --> 00:21:34.886 A:middle
otherwise your touches will be

00:21:34.886 --> 00:21:36.856 A:middle
delayed although you weren't

00:21:36.856 --> 00:21:37.856 A:middle
even interested in them.

00:21:38.416 --> 00:21:39.656 A:middle
And also don't forget touches

00:21:39.696 --> 00:21:41.696 A:middle
cancelled as always.

00:21:41.996 --> 00:21:43.656 A:middle
And this becomes more important

00:21:43.656 --> 00:21:44.866 A:middle
this year because we cancel

00:21:44.866 --> 00:21:46.176 A:middle
touches more often with drag and

00:21:46.176 --> 00:21:46.446 A:middle
drop.

00:21:47.746 --> 00:21:50.116 A:middle
So your takeaway from here

00:21:50.116 --> 00:21:51.846 A:middle
should be revisit your setups.

00:21:51.846 --> 00:21:52.896 A:middle
Look into your gesture

00:21:52.896 --> 00:21:55.006 A:middle
recognizer setups and try to

00:21:55.886 --> 00:21:57.346 A:middle
make sense of the information

00:21:57.346 --> 00:21:58.576 A:middle
you've just heard and put them

00:21:58.636 --> 00:21:58.976 A:middle
together.

00:21:59.856 --> 00:22:01.016 A:middle
Revisit your exclusion and

00:22:01.016 --> 00:22:02.146 A:middle
failure requirements.

00:22:02.146 --> 00:22:03.606 A:middle
When you use one or the other,

00:22:03.826 --> 00:22:05.156 A:middle
how many simultaneous gesture

00:22:05.156 --> 00:22:06.356 A:middle
recognizers do you want to

00:22:06.356 --> 00:22:07.546 A:middle
achieve the same effect?

00:22:09.246 --> 00:22:10.746 A:middle
And also are your gesture

00:22:10.746 --> 00:22:12.336 A:middle
recognizers on the right views?

00:22:12.336 --> 00:22:13.556 A:middle
Are they deep enough?

00:22:13.666 --> 00:22:14.956 A:middle
The deeper you move them, the

00:22:14.956 --> 00:22:16.526 A:middle
less interference is with other

00:22:16.526 --> 00:22:17.306 A:middle
gesture recognizers.

00:22:17.356 --> 00:22:18.436 A:middle
The higher you move them the

00:22:18.436 --> 00:22:20.706 A:middle
more general you can make them.

00:22:21.126 --> 00:22:22.266 A:middle
So you these things you should

00:22:22.336 --> 00:22:22.896 A:middle
think about.

00:22:23.856 --> 00:22:26.276 A:middle
And by that, I want to hand over

00:22:26.276 --> 00:22:27.706 A:middle
to Glen for system gesture

00:22:27.706 --> 00:22:28.206 A:middle
interaction.

00:22:28.596 --> 00:22:28.876 A:middle
Thank you.

00:22:29.516 --> 00:22:35.546 A:middle
[ Clapping ]

00:22:36.046 --> 00:22:36.686 A:middle
&gt;&gt; Thanks, Dom.

00:22:36.686 --> 00:22:39.446 A:middle
My name is Glen Low.

00:22:39.446 --> 00:22:41.506 A:middle
I'm a software engineer with

00:22:41.506 --> 00:22:42.006 A:middle
UIkit.

00:22:42.396 --> 00:22:43.666 A:middle
I'm here to tell you about some

00:22:43.666 --> 00:22:45.706 A:middle
brand new API to improve the way

00:22:45.706 --> 00:22:46.936 A:middle
you to interact with the system

00:22:47.346 --> 00:22:48.526 A:middle
gesture recognizers.

00:22:49.236 --> 00:22:50.436 A:middle
But first a little

00:22:50.436 --> 00:22:51.056 A:middle
entertainment.

00:22:52.226 --> 00:22:53.976 A:middle
After a hard's day coding, this

00:22:54.016 --> 00:22:55.406 A:middle
software engineer needs to play.

00:22:55.766 --> 00:22:58.376 A:middle
So I fire up my demo bots and

00:22:58.376 --> 00:22:59.596 A:middle
move the robot around by

00:22:59.596 --> 00:23:00.546 A:middle
dragging up and down on the

00:23:00.546 --> 00:23:01.506 A:middle
virtual controls.

00:23:01.506 --> 00:23:03.126 A:middle
You see it on the upper right of

00:23:03.126 --> 00:23:03.716 A:middle
the screen.

00:23:03.936 --> 00:23:04.996 A:middle
The gray circles.

00:23:05.956 --> 00:23:06.976 A:middle
And it looks like this.

00:23:08.466 --> 00:23:11.176 A:middle
My little robot has to change

00:23:11.176 --> 00:23:13.276 A:middle
the bad robots into good robots.

00:23:14.606 --> 00:23:16.326 A:middle
As you see I'm doing quite well.

00:23:17.796 --> 00:23:19.036 A:middle
I think I missed one.

00:23:19.036 --> 00:23:20.466 A:middle
I need to get -- I need to go

00:23:20.466 --> 00:23:22.586 A:middle
down to get that one.

00:23:23.766 --> 00:23:25.966 A:middle
No oops, what happened?

00:23:26.186 --> 00:23:27.356 A:middle
I got that new cover sheet

00:23:27.356 --> 00:23:27.806 A:middle
instead?

00:23:28.386 --> 00:23:30.976 A:middle
That's not quite the user

00:23:30.976 --> 00:23:32.026 A:middle
experience we're looking for

00:23:32.026 --> 00:23:32.906 A:middle
here, is it?

00:23:33.946 --> 00:23:35.426 A:middle
So what exactly went wrong?

00:23:36.716 --> 00:23:38.166 A:middle
Well, we currently have a few

00:23:38.316 --> 00:23:40.816 A:middle
special gestures we call system

00:23:40.816 --> 00:23:41.386 A:middle
gestures.

00:23:41.846 --> 00:23:44.666 A:middle
You swipe up from the bottom,

00:23:44.666 --> 00:23:46.146 A:middle
you get the multitasking and

00:23:46.146 --> 00:23:46.466 A:middle
dock.

00:23:47.456 --> 00:23:49.796 A:middle
Swiping out from the -- to the

00:23:50.006 --> 00:23:52.006 A:middle
side brings in the slide over.

00:23:52.646 --> 00:23:54.996 A:middle
Swiping it from the top brings

00:23:55.046 --> 00:23:56.496 A:middle
down the cover sheet.

00:23:57.666 --> 00:23:59.856 A:middle
Now these special system

00:23:59.856 --> 00:24:02.146 A:middle
gestures recognizers fight with

00:24:02.146 --> 00:24:03.196 A:middle
your apps own gesture

00:24:03.426 --> 00:24:06.106 A:middle
recognizers and responders to

00:24:06.106 --> 00:24:07.086 A:middle
try and get to the touches

00:24:07.086 --> 00:24:07.206 A:middle
first.

00:24:07.206 --> 00:24:09.176 A:middle
So what could we do?

00:24:10.496 --> 00:24:12.036 A:middle
Well we do make an exception for

00:24:12.096 --> 00:24:13.036 A:middle
gesture recognizers.

00:24:13.626 --> 00:24:15.386 A:middle
Your tap, pinch, rotate, and

00:24:15.386 --> 00:24:17.646 A:middle
long press gesture recognizers

00:24:17.646 --> 00:24:18.966 A:middle
can [inaudible] touches at the

00:24:19.016 --> 00:24:21.016 A:middle
same time as a system gesture

00:24:21.046 --> 00:24:21.946 A:middle
recognizes.

00:24:22.676 --> 00:24:23.976 A:middle
Although sometimes they will get

00:24:23.976 --> 00:24:26.306 A:middle
cancelled if it's obvious later

00:24:26.306 --> 00:24:27.866 A:middle
on that it's actually a system

00:24:27.866 --> 00:24:28.206 A:middle
gesture.

00:24:28.836 --> 00:24:31.016 A:middle
That's why just tapping on a

00:24:31.576 --> 00:24:32.736 A:middle
button at the bottom won't

00:24:32.736 --> 00:24:34.276 A:middle
actually accidentally bring up

00:24:34.276 --> 00:24:36.106 A:middle
the dock.

00:24:36.106 --> 00:24:37.706 A:middle
That's because that's based on a

00:24:37.736 --> 00:24:39.016 A:middle
tap gesture recognizer.

00:24:40.026 --> 00:24:42.246 A:middle
On the other hand, we have pan

00:24:42.956 --> 00:24:44.286 A:middle
and swipe recognizers as well as

00:24:44.286 --> 00:24:46.286 A:middle
your old school responders.

00:24:46.586 --> 00:24:47.866 A:middle
While these will get the touches

00:24:47.916 --> 00:24:49.646 A:middle
after the system gesture

00:24:49.646 --> 00:24:51.136 A:middle
recognizers are done with them.

00:24:51.726 --> 00:24:53.056 A:middle
So when our users swipe from the

00:24:53.056 --> 00:24:54.616 A:middle
bottom, do you really want to

00:24:54.616 --> 00:24:56.626 A:middle
bring up the dock or do he want

00:24:56.816 --> 00:24:59.296 A:middle
to pan your view?

00:24:59.516 --> 00:25:03.276 A:middle
Well, we had to guess whether to

00:25:03.396 --> 00:25:04.586 A:middle
defer that system gesture.

00:25:05.506 --> 00:25:06.986 A:middle
For example, if your app

00:25:06.986 --> 00:25:09.116 A:middle
happened to hide the status bar,

00:25:09.446 --> 00:25:10.586 A:middle
we would defer bringing up the

00:25:10.586 --> 00:25:13.066 A:middle
dock but it was hard to guess

00:25:13.066 --> 00:25:14.266 A:middle
right all the time.

00:25:14.466 --> 00:25:16.536 A:middle
And really who knows best what

00:25:16.536 --> 00:25:17.386 A:middle
your user wants?

00:25:18.616 --> 00:25:21.076 A:middle
For iOS 11, you can now tell us

00:25:21.456 --> 00:25:22.976 A:middle
when to defer and where to

00:25:23.056 --> 00:25:23.356 A:middle
defer.

00:25:24.776 --> 00:25:25.586 A:middle
No more guesses.

00:25:25.906 --> 00:25:27.626 A:middle
You are not responsible for

00:25:28.066 --> 00:25:30.036 A:middle
deciding whether to defer system

00:25:30.036 --> 00:25:31.066 A:middle
gestures or not.

00:25:32.266 --> 00:25:33.866 A:middle
This means if your app hides the

00:25:33.866 --> 00:25:35.566 A:middle
status bar, we don't

00:25:35.566 --> 00:25:37.016 A:middle
automatically defer the dock

00:25:37.126 --> 00:25:37.556 A:middle
anymore.

00:25:38.716 --> 00:25:41.736 A:middle
What does this look like?

00:25:42.196 --> 00:25:43.836 A:middle
Instead you need to use this new

00:25:43.836 --> 00:25:46.506 A:middle
API we call ScreenEdgesDeferring

00:25:46.606 --> 00:25:47.896 A:middle
System Gestures.

00:25:48.626 --> 00:25:50.926 A:middle
This API lets you declare which

00:25:50.926 --> 00:25:52.546 A:middle
edges you want us to defer

00:25:52.806 --> 00:25:54.666 A:middle
system gestures in favor of your

00:25:54.666 --> 00:25:56.786 A:middle
own gesture recognizers.

00:25:57.476 --> 00:25:58.656 A:middle
In your view controllers,

00:25:58.796 --> 00:26:01.426 A:middle
override preferredScreenEdges

00:26:01.946 --> 00:26:03.706 A:middle
Deferring System Gesutres to

00:26:03.706 --> 00:26:05.046 A:middle
return the screen edges for

00:26:05.046 --> 00:26:05.606 A:middle
deferring.

00:26:06.356 --> 00:26:10.216 A:middle
Then whenever you want to return

00:26:10.216 --> 00:26:12.466 A:middle
something different, call

00:26:12.676 --> 00:26:14.766 A:middle
setNeedsUpdateOfScreen Edges

00:26:14.806 --> 00:26:16.736 A:middle
Deferring System Gestures.

00:26:17.386 --> 00:26:18.936 A:middle
Let's have a look at what is

00:26:19.296 --> 00:26:21.486 A:middle
this referral actually achieves.

00:26:24.346 --> 00:26:26.146 A:middle
Now when the user starts off in

00:26:26.956 --> 00:26:28.346 A:middle
the bottom, your gesture

00:26:28.346 --> 00:26:29.856 A:middle
recognizers and responders get

00:26:29.856 --> 00:26:30.996 A:middle
the touches immediately.

00:26:31.666 --> 00:26:33.806 A:middle
At the same time, we show a

00:26:35.036 --> 00:26:36.116 A:middle
tongue [phonetic], or a

00:26:36.556 --> 00:26:38.466 A:middle
[inaudible] so the user can see

00:26:38.466 --> 00:26:39.646 A:middle
that they can do more.

00:26:40.326 --> 00:26:41.876 A:middle
Swiping up from the bottom a

00:26:41.936 --> 00:26:43.646 A:middle
second time, then brings up the

00:26:43.646 --> 00:26:43.966 A:middle
dock.

00:26:51.306 --> 00:26:53.356 A:middle
One more method if you're

00:26:53.356 --> 00:26:54.966 A:middle
writing it all in container view

00:26:54.966 --> 00:26:55.476 A:middle
controller.

00:26:56.246 --> 00:26:57.236 A:middle
Most of the time this

00:26:57.236 --> 00:26:58.456 A:middle
[inaudible] for container view

00:26:58.456 --> 00:26:59.656 A:middle
controller is actually in the

00:26:59.656 --> 00:27:00.536 A:middle
child view controller.

00:27:00.626 --> 00:27:02.726 A:middle
So you'll want to return the

00:27:02.726 --> 00:27:04.486 A:middle
right one in your override of

00:27:04.806 --> 00:27:06.746 A:middle
childViewController For Screen

00:27:06.746 --> 00:27:08.296 A:middle
EdgesDeferring System Gestures

00:27:08.896 --> 00:27:10.686 A:middle
which, I think, is like the new

00:27:10.686 --> 00:27:12.016 A:middle
candidate for the longest method

00:27:12.016 --> 00:27:12.846 A:middle
name in iOS.

00:27:13.526 --> 00:27:16.066 A:middle
Now that you have all this power

00:27:16.066 --> 00:27:18.376 A:middle
at your fingertips, when should

00:27:18.376 --> 00:27:19.666 A:middle
you use it?

00:27:20.276 --> 00:27:23.966 A:middle
The short answer is don't do it.

00:27:24.676 --> 00:27:26.476 A:middle
Well why am I here, right?

00:27:26.866 --> 00:27:28.626 A:middle
The long answer, though, think

00:27:28.626 --> 00:27:30.946 A:middle
hard and long about when to use

00:27:30.946 --> 00:27:32.686 A:middle
it and why is that?

00:27:33.276 --> 00:27:35.016 A:middle
Well number one, your user is

00:27:35.016 --> 00:27:36.326 A:middle
familiar with swiping up to get

00:27:36.326 --> 00:27:37.886 A:middle
the dock and other system

00:27:37.886 --> 00:27:38.426 A:middle
gestures.

00:27:38.426 --> 00:27:40.516 A:middle
So using this API actually

00:27:40.516 --> 00:27:41.496 A:middle
breaks the intuition.

00:27:41.646 --> 00:27:43.476 A:middle
It breaks the expectation of

00:27:43.476 --> 00:27:44.316 A:middle
what actually happens.

00:27:45.316 --> 00:27:47.466 A:middle
Also if you're using tap, pinch,

00:27:47.506 --> 00:27:49.626 A:middle
rotate, and long press gesture

00:27:49.626 --> 00:27:51.356 A:middle
recognizers as we talked about

00:27:51.356 --> 00:27:52.816 A:middle
before, you're going to get

00:27:52.816 --> 00:27:54.146 A:middle
these touches first anyway

00:27:54.146 --> 00:27:55.826 A:middle
without even touching an API.

00:27:56.676 --> 00:28:00.476 A:middle
Third we reserve the right to

00:28:00.476 --> 00:28:02.466 A:middle
ignore or modify the suggested

00:28:02.466 --> 00:28:03.566 A:middle
edges for deferring.

00:28:04.566 --> 00:28:05.776 A:middle
So don't rely on the system

00:28:05.776 --> 00:28:07.616 A:middle
doing exactly what you asked it

00:28:08.146 --> 00:28:08.996 A:middle
to do.

00:28:09.226 --> 00:28:12.666 A:middle
And finally this API is for when

00:28:12.666 --> 00:28:14.056 A:middle
you really expect the user's

00:28:14.116 --> 00:28:16.166 A:middle
full attention interacting the

00:28:16.166 --> 00:28:18.046 A:middle
whole screen for long periods.

00:28:18.346 --> 00:28:20.316 A:middle
For example, if you're writing a

00:28:20.316 --> 00:28:22.716 A:middle
game or drawing apps ask

00:28:22.716 --> 00:28:24.876 A:middle
yourself, is your app really

00:28:24.946 --> 00:28:26.306 A:middle
that immersive enough to use

00:28:26.306 --> 00:28:26.806 A:middle
this API?

00:28:28.296 --> 00:28:29.746 A:middle
So on that note, I'd like to

00:28:29.746 --> 00:28:31.936 A:middle
hand you over to my colleague,

00:28:32.026 --> 00:28:34.526 A:middle
Mike Turner, who will talk to

00:28:34.526 --> 00:28:36.326 A:middle
you about how to work with drag

00:28:37.076 --> 00:28:37.566 A:middle
and drop.

00:28:37.666 --> 00:28:37.976 A:middle
Mikey?

00:28:38.516 --> 00:28:43.500 A:middle
[ Clapping ]

00:28:46.416 --> 00:28:47.406 A:middle
Thanks Glow.

00:28:50.676 --> 00:28:53.306 A:middle
So as you've seen with iOS 11,

00:28:53.306 --> 00:28:54.206 A:middle
we have a lot of great new

00:28:54.206 --> 00:28:55.626 A:middle
features and near the top of

00:28:55.626 --> 00:28:57.066 A:middle
that list is drag and drop.

00:28:57.476 --> 00:28:59.126 A:middle
And with drag and drop, the

00:28:59.326 --> 00:29:01.696 A:middle
users have an opportunity to

00:29:01.696 --> 00:29:03.006 A:middle
interact with your application

00:29:03.006 --> 00:29:04.266 A:middle
in exciting new ways.

00:29:04.846 --> 00:29:06.596 A:middle
But there is some things you'll

00:29:06.596 --> 00:29:09.016 A:middle
need to know about how to best

00:29:09.016 --> 00:29:10.686 A:middle
interact with drag and drop with

00:29:10.686 --> 00:29:11.646 A:middle
some of the existing gesture

00:29:11.646 --> 00:29:12.856 A:middle
recognizers in your application.

00:29:13.186 --> 00:29:14.086 A:middle
So I'd like to start with a

00:29:14.086 --> 00:29:15.486 A:middle
brief example of showing you how

00:29:15.486 --> 00:29:18.276 A:middle
you can make a view implement

00:29:18.276 --> 00:29:19.876 A:middle
drag and then what happens to

00:29:19.876 --> 00:29:20.586 A:middle
your existing gesture

00:29:20.586 --> 00:29:21.686 A:middle
recognizers when you do so.

00:29:22.356 --> 00:29:24.106 A:middle
So in iOS 11, we added a new

00:29:24.106 --> 00:29:25.876 A:middle
class called UIDragInteraction.

00:29:26.496 --> 00:29:28.136 A:middle
UIDragInteraction is really

00:29:28.236 --> 00:29:29.296 A:middle
super simple to use.

00:29:29.296 --> 00:29:30.216 A:middle
It's very familiar.

00:29:30.486 --> 00:29:31.386 A:middle
Similar to the pattern of

00:29:31.386 --> 00:29:33.006 A:middle
gesture recognizer or adding a

00:29:33.006 --> 00:29:34.766 A:middle
subview to a view and you just

00:29:34.766 --> 00:29:35.896 A:middle
initialize one of these with a

00:29:35.896 --> 00:29:37.316 A:middle
delegate of your choice and you

00:29:37.316 --> 00:29:38.666 A:middle
call add interaction on a view.

00:29:38.666 --> 00:29:39.966 A:middle
And that's pretty much all you

00:29:39.966 --> 00:29:40.416 A:middle
got to do.

00:29:40.416 --> 00:29:41.136 A:middle
You got to implement one

00:29:41.136 --> 00:29:42.696 A:middle
delegate API and you have drag.

00:29:43.236 --> 00:29:43.756 A:middle
Really simple.

00:29:44.056 --> 00:29:46.236 A:middle
So let's look at a quick

00:29:46.236 --> 00:29:47.546 A:middle
demonstration of what a view

00:29:47.546 --> 00:29:49.316 A:middle
looks like when you add a drag

00:29:49.316 --> 00:29:50.066 A:middle
interaction to it.

00:29:50.326 --> 00:29:51.496 A:middle
And here we're going to long

00:29:51.496 --> 00:29:52.826 A:middle
press on the view and then move

00:29:52.826 --> 00:29:53.506 A:middle
a little bit.

00:29:54.656 --> 00:29:56.046 A:middle
So when you long press, the view

00:29:56.046 --> 00:29:57.356 A:middle
lifts up off the screen.

00:29:57.356 --> 00:29:58.616 A:middle
When you move, it kind of tears

00:29:58.616 --> 00:29:59.656 A:middle
out of your application.

00:30:00.656 --> 00:30:01.916 A:middle
So let's see how drag

00:30:01.916 --> 00:30:03.076 A:middle
interaction accomplished this

00:30:03.136 --> 00:30:03.976 A:middle
behavior in your app.

00:30:05.146 --> 00:30:05.986 A:middle
So when we added the drag

00:30:05.986 --> 00:30:07.116 A:middle
interaction, it gets added to a

00:30:07.116 --> 00:30:08.676 A:middle
new interactions array on

00:30:08.676 --> 00:30:09.126 A:middle
UIView.

00:30:09.686 --> 00:30:10.996 A:middle
And the drag interaction, in

00:30:10.996 --> 00:30:12.136 A:middle
turn, creates some gesture

00:30:12.136 --> 00:30:13.536 A:middle
recognizers on its behalf.

00:30:13.946 --> 00:30:15.176 A:middle
Attaches them to your view and

00:30:15.176 --> 00:30:16.216 A:middle
becomes the delegate of those

00:30:16.216 --> 00:30:17.066 A:middle
gesture recognizers.

00:30:17.206 --> 00:30:18.326 A:middle
And it creates gesture

00:30:18.326 --> 00:30:19.766 A:middle
recognizers for initiating the

00:30:19.766 --> 00:30:21.446 A:middle
drag, managing relationships

00:30:21.446 --> 00:30:23.526 A:middle
with other gesture recognizers,

00:30:23.526 --> 00:30:25.196 A:middle
and adding additional items to

00:30:25.196 --> 00:30:26.276 A:middle
an existing drag in the

00:30:26.276 --> 00:30:26.816 A:middle
application.

00:30:27.426 --> 00:30:30.416 A:middle
So to make this example a little

00:30:30.416 --> 00:30:32.806 A:middle
bit more concrete, let's add our

00:30:32.806 --> 00:30:34.526 A:middle
own UILongPressGestureRecognizer

00:30:34.526 --> 00:30:35.866 A:middle
to the view and we'll wire that

00:30:35.866 --> 00:30:38.346 A:middle
up to an action that will pop an

00:30:38.526 --> 00:30:40.016 A:middle
activity view controller up for

00:30:40.016 --> 00:30:40.726 A:middle
this image.

00:30:41.296 --> 00:30:43.056 A:middle
So here when we get the gesture

00:30:43.056 --> 00:30:44.286 A:middle
recognizer state began, we're

00:30:44.286 --> 00:30:45.406 A:middle
going to present an activity

00:30:45.406 --> 00:30:47.046 A:middle
view controller and we get the

00:30:47.046 --> 00:30:48.276 A:middle
gesture recognizer state cancel,

00:30:48.276 --> 00:30:49.346 A:middle
we're going to dismiss that

00:30:49.346 --> 00:30:50.316 A:middle
activity view controller.

00:30:51.686 --> 00:30:52.506 A:middle
So let's look at that same

00:30:52.506 --> 00:30:53.916 A:middle
example again where we long

00:30:53.916 --> 00:30:55.716 A:middle
press on the view and move.

00:30:56.146 --> 00:30:57.306 A:middle
Now that we have our own

00:30:57.306 --> 00:30:58.736 A:middle
UILongPressGestureRecognizer

00:30:58.736 --> 00:30:59.246 A:middle
alongside.

00:31:00.626 --> 00:31:02.946 A:middle
So here we long press and move.

00:31:03.956 --> 00:31:05.176 A:middle
And I didn't see any activity

00:31:05.176 --> 00:31:05.886 A:middle
view controller there.

00:31:07.146 --> 00:31:08.256 A:middle
And that's because your long

00:31:08.256 --> 00:31:09.446 A:middle
press gesture recognizers are

00:31:09.446 --> 00:31:11.006 A:middle
now delayed when they're

00:31:11.006 --> 00:31:12.866 A:middle
alongside a UI drag interaction.

00:31:14.106 --> 00:31:15.356 A:middle
So let's adjust our user

00:31:15.356 --> 00:31:16.426 A:middle
interaction a little bit here to

00:31:16.496 --> 00:31:17.516 A:middle
see if we can get the activity

00:31:17.516 --> 00:31:18.526 A:middle
view controller to show up.

00:31:19.006 --> 00:31:20.326 A:middle
This time we'll long press and

00:31:20.326 --> 00:31:22.086 A:middle
we'll hold for just a little bit

00:31:22.186 --> 00:31:23.606 A:middle
and then we'll move.

00:31:24.516 --> 00:31:26.986 A:middle
So here we long press, hold, and

00:31:26.986 --> 00:31:27.366 A:middle
then move.

00:31:27.806 --> 00:31:29.076 A:middle
So here we saw the activity view

00:31:29.076 --> 00:31:30.866 A:middle
controller briefly and then it

00:31:30.866 --> 00:31:31.666 A:middle
was dismissed.

00:31:32.286 --> 00:31:34.696 A:middle
And that's because a beginning

00:31:34.696 --> 00:31:36.366 A:middle
drag will cancel the touch you

00:31:36.366 --> 00:31:37.696 A:middle
used to begin that drag in your

00:31:37.696 --> 00:31:38.246 A:middle
application.

00:31:38.706 --> 00:31:39.966 A:middle
So we'll send touches cancelled

00:31:40.026 --> 00:31:41.136 A:middle
for that touch to the app.

00:31:41.456 --> 00:31:42.576 A:middle
The app will then send it to its

00:31:42.606 --> 00:31:43.466 A:middle
gesture recognizers and

00:31:43.466 --> 00:31:44.146 A:middle
responders.

00:31:44.466 --> 00:31:45.476 A:middle
The gesture recognizer will then

00:31:45.476 --> 00:31:47.306 A:middle
send the cancelled state to its

00:31:47.306 --> 00:31:49.366 A:middle
action and thus dismissing that

00:31:49.366 --> 00:31:50.326 A:middle
activity view controller.

00:31:52.016 --> 00:31:53.776 A:middle
So in a compact trait

00:31:53.776 --> 00:31:56.036 A:middle
environment, adaptivity will

00:31:56.356 --> 00:31:57.466 A:middle
take that presentation of the

00:31:57.466 --> 00:31:58.606 A:middle
activity view controller and

00:31:58.606 --> 00:32:00.006 A:middle
it'll turn into an action sheet.

00:32:00.576 --> 00:32:01.786 A:middle
So let's see what happens in

00:32:01.786 --> 00:32:02.446 A:middle
that case.

00:32:03.136 --> 00:32:03.986 A:middle
So we'll long press.

00:32:04.306 --> 00:32:06.636 A:middle
Hold for a bit and then move in

00:32:06.636 --> 00:32:07.706 A:middle
a compact trait environment.

00:32:08.956 --> 00:32:09.996 A:middle
Here we long press.

00:32:10.596 --> 00:32:11.216 A:middle
Hold and move.

00:32:11.996 --> 00:32:13.366 A:middle
No activity view controller

00:32:13.366 --> 00:32:13.616 A:middle
again.

00:32:14.466 --> 00:32:16.296 A:middle
So let's see what happens here.

00:32:16.566 --> 00:32:17.646 A:middle
Your long presses are being

00:32:17.646 --> 00:32:19.426 A:middle
delayed until the touch ends in

00:32:19.426 --> 00:32:20.866 A:middle
this case because in a compact

00:32:20.866 --> 00:32:22.686 A:middle
trait environment, most of the

00:32:22.746 --> 00:32:24.306 A:middle
presentations turn into modal

00:32:24.306 --> 00:32:26.096 A:middle
presentation styles or action

00:32:26.096 --> 00:32:27.756 A:middle
sheets that would cover the

00:32:27.756 --> 00:32:29.056 A:middle
impending drag and that's not a

00:32:29.056 --> 00:32:30.196 A:middle
great user experience.

00:32:31.236 --> 00:32:32.486 A:middle
So let's look at how we can

00:32:32.486 --> 00:32:33.956 A:middle
adjust our user interaction here

00:32:34.306 --> 00:32:35.376 A:middle
to get that activity view

00:32:35.376 --> 00:32:35.786 A:middle
controller.

00:32:35.986 --> 00:32:37.936 A:middle
So we'll long press and lift.

00:32:39.326 --> 00:32:41.596 A:middle
So we long press and then lift

00:32:41.596 --> 00:32:42.046 A:middle
the touch.

00:32:42.046 --> 00:32:43.086 A:middle
And there you have it.

00:32:43.346 --> 00:32:44.986 A:middle
Your action sheet is up with the

00:32:44.986 --> 00:32:45.956 A:middle
activity view controller.

00:32:47.556 --> 00:32:49.626 A:middle
So UIDragInteraction also has

00:32:49.746 --> 00:32:51.486 A:middle
some built in ability to add

00:32:51.756 --> 00:32:53.386 A:middle
additional items to a drag and

00:32:53.386 --> 00:32:55.416 A:middle
as I said, it creates another

00:32:55.416 --> 00:32:57.736 A:middle
gesture recognizer to perform

00:32:57.736 --> 00:32:58.306 A:middle
this ability.

00:32:59.276 --> 00:33:00.546 A:middle
So here, this is a quick

00:33:00.546 --> 00:33:01.096 A:middle
demonstration.

00:33:01.096 --> 00:33:02.766 A:middle
We had a long press and move.

00:33:02.766 --> 00:33:04.736 A:middle
And then we can tap again on the

00:33:04.736 --> 00:33:06.326 A:middle
view to add additional items.

00:33:07.246 --> 00:33:09.216 A:middle
And it handles that tap for you

00:33:09.466 --> 00:33:10.386 A:middle
but you do have a way of

00:33:10.386 --> 00:33:11.376 A:middle
influencing this.

00:33:11.936 --> 00:33:13.336 A:middle
First this is an optional

00:33:13.336 --> 00:33:13.776 A:middle
behavior.

00:33:13.776 --> 00:33:15.686 A:middle
So the delegate method, items

00:33:15.686 --> 00:33:17.126 A:middle
for adding to on the

00:33:17.126 --> 00:33:18.726 A:middle
UIDragInteraction is optional.

00:33:18.796 --> 00:33:20.176 A:middle
You don't implement, you won't

00:33:20.176 --> 00:33:21.636 A:middle
get the adding behavior but if

00:33:21.636 --> 00:33:22.816 A:middle
you do implement it, you can

00:33:22.816 --> 00:33:24.636 A:middle
conditionally return zero items

00:33:24.636 --> 00:33:26.146 A:middle
in this API to continue

00:33:26.386 --> 00:33:27.786 A:middle
processing this touch as you

00:33:27.786 --> 00:33:29.586 A:middle
normally would in your app.

00:33:31.256 --> 00:33:33.036 A:middle
So it's really quite simple to

00:33:33.036 --> 00:33:34.406 A:middle
adapt your application when

00:33:34.406 --> 00:33:35.786 A:middle
you're using UIDragInteraction.

00:33:36.046 --> 00:33:37.586 A:middle
It's pretty much hands off but

00:33:37.586 --> 00:33:39.996 A:middle
you need a few basic concepts to

00:33:40.256 --> 00:33:41.246 A:middle
get you the rest of the way.

00:33:41.246 --> 00:33:42.916 A:middle
And the first thing you do is

00:33:42.916 --> 00:33:44.276 A:middle
just examine your existing

00:33:44.276 --> 00:33:44.906 A:middle
actions.

00:33:45.176 --> 00:33:46.526 A:middle
Do they make sense alongside

00:33:46.526 --> 00:33:47.526 A:middle
UIDragInteraction?

00:33:47.866 --> 00:33:49.586 A:middle
In some cases, UIDragInteraction

00:33:49.586 --> 00:33:50.666 A:middle
might replace some of that

00:33:50.666 --> 00:33:52.216 A:middle
existing functionality that you

00:33:52.216 --> 00:33:53.466 A:middle
had from a UILongPress.

00:33:54.486 --> 00:33:55.886 A:middle
And you need to be careful

00:33:55.886 --> 00:33:57.396 A:middle
presenting modal UI when you

00:33:57.396 --> 00:33:59.276 A:middle
have a long press -- excuse me,

00:33:59.276 --> 00:33:59.606 A:middle
when you have a

00:33:59.606 --> 00:34:00.526 A:middle
UIDragInteraction.

00:34:00.856 --> 00:34:03.376 A:middle
And that's because in a standard

00:34:03.376 --> 00:34:05.396 A:middle
trait environment, it's going to

00:34:05.396 --> 00:34:06.826 A:middle
be delayed and it might end be

00:34:06.826 --> 00:34:08.236 A:middle
presenting over top of the drag

00:34:08.516 --> 00:34:09.286 A:middle
and you need to take the

00:34:09.286 --> 00:34:10.276 A:middle
appropriate action here.

00:34:11.286 --> 00:34:12.646 A:middle
And then you need to handle the

00:34:12.646 --> 00:34:14.086 A:middle
cancelled state in your

00:34:14.086 --> 00:34:14.996 A:middle
UIGestureRecognizers.

00:34:15.416 --> 00:34:16.816 A:middle
As you see when the drag begins,

00:34:16.816 --> 00:34:17.916 A:middle
we send touch is cancelled.

00:34:18.016 --> 00:34:19.246 A:middle
So if you're not handling the

00:34:19.246 --> 00:34:20.466 A:middle
cancelled state in your gesture

00:34:20.466 --> 00:34:21.926 A:middle
recognizer you won't have the

00:34:21.926 --> 00:34:23.006 A:middle
opportunity to take the

00:34:23.006 --> 00:34:24.486 A:middle
appropriate action in our

00:34:24.486 --> 00:34:25.956 A:middle
example that was dismissing the

00:34:25.956 --> 00:34:26.966 A:middle
activity view controller.

00:34:27.626 --> 00:34:29.086 A:middle
And you need to remember one

00:34:29.086 --> 00:34:31.526 A:middle
really important but super cool

00:34:31.526 --> 00:34:33.316 A:middle
part of UIDragInteraction and

00:34:33.316 --> 00:34:34.706 A:middle
that's your app is fully

00:34:34.706 --> 00:34:35.906 A:middle
interactive during a drag.

00:34:36.606 --> 00:34:38.166 A:middle
So you might have some

00:34:38.206 --> 00:34:39.546 A:middle
interaction that you wouldn't

00:34:39.546 --> 00:34:39.946 A:middle
expect.

00:34:39.946 --> 00:34:41.846 A:middle
So you've been warned on that.

00:34:43.856 --> 00:34:45.986 A:middle
So Dom came up here and told us

00:34:45.986 --> 00:34:48.026 A:middle
about how you can best leverage

00:34:48.076 --> 00:34:50.786 A:middle
the gesture recognizer system to

00:34:50.786 --> 00:34:52.386 A:middle
get the setup that you want and

00:34:52.386 --> 00:34:53.456 A:middle
how you can use failure

00:34:53.456 --> 00:34:55.946 A:middle
requirements and exclusion to

00:34:55.946 --> 00:34:57.066 A:middle
influence how gesture

00:34:57.066 --> 00:34:58.336 A:middle
recognizers fire with each

00:34:58.336 --> 00:34:58.526 A:middle
other.

00:34:59.436 --> 00:35:01.276 A:middle
And he made the important point

00:35:01.276 --> 00:35:02.706 A:middle
of the gesture recognizers come

00:35:02.776 --> 00:35:03.126 A:middle
first.

00:35:03.936 --> 00:35:05.816 A:middle
So when we send touches through

00:35:05.816 --> 00:35:06.836 A:middle
application the gesture

00:35:06.836 --> 00:35:08.766 A:middle
recognizers can block your

00:35:08.766 --> 00:35:10.156 A:middle
responder based touch handling.

00:35:10.366 --> 00:35:11.516 A:middle
So you should always attempt to

00:35:11.516 --> 00:35:12.806 A:middle
use gesture recognizers when at

00:35:12.806 --> 00:35:14.276 A:middle
all possible to get the best

00:35:14.276 --> 00:35:14.786 A:middle
results.

00:35:15.436 --> 00:35:19.006 A:middle
And Glen told us how we can use

00:35:19.006 --> 00:35:20.786 A:middle
the new system gesture deferring

00:35:20.786 --> 00:35:24.116 A:middle
APIs to give preference to the

00:35:24.116 --> 00:35:25.466 A:middle
gesture recognizers within our

00:35:25.466 --> 00:35:27.366 A:middle
application when swiping from

00:35:27.366 --> 00:35:27.936 A:middle
the edges.

00:35:28.346 --> 00:35:29.486 A:middle
And you should use these very

00:35:29.486 --> 00:35:30.806 A:middle
sparingly, you know, in full

00:35:30.806 --> 00:35:31.876 A:middle
screen situations.

00:35:32.186 --> 00:35:33.126 A:middle
Things where your users are

00:35:33.126 --> 00:35:34.846 A:middle
going to expect interaction in

00:35:34.846 --> 00:35:36.216 A:middle
your app and not the system

00:35:36.216 --> 00:35:36.696 A:middle
behavior.

00:35:37.066 --> 00:35:37.986 A:middle
So very sparingly.

00:35:38.806 --> 00:35:40.646 A:middle
And finally, we had a brief talk

00:35:40.646 --> 00:35:42.436 A:middle
about how you can adapt your app

00:35:42.916 --> 00:35:44.686 A:middle
to use UIDragInteraction and

00:35:44.686 --> 00:35:45.526 A:middle
it's really quite simple.

00:35:46.456 --> 00:35:47.496 A:middle
So I hope you add

00:35:47.496 --> 00:35:49.056 A:middle
UIDragInteraction to most of

00:35:49.056 --> 00:35:49.576 A:middle
your views.

00:35:50.986 --> 00:35:52.656 A:middle
And for more information, you

00:35:52.986 --> 00:35:54.776 A:middle
can see the video in replay on

00:35:54.776 --> 00:35:55.676 A:middle
the following website.

00:35:56.086 --> 00:35:57.856 A:middle
We have some great past sessions

00:35:57.856 --> 00:35:59.126 A:middle
that go in-depth on handling

00:35:59.126 --> 00:36:00.296 A:middle
events in UIkit.

00:36:00.426 --> 00:36:01.296 A:middle
If you haven't seen them, I

00:36:01.336 --> 00:36:02.396 A:middle
highly would recommend those.

00:36:03.276 --> 00:36:05.416 A:middle
And we have some other sessions

00:36:05.416 --> 00:36:06.736 A:middle
related to drag and drop and

00:36:06.736 --> 00:36:08.466 A:middle
animations that you should check

00:36:08.466 --> 00:36:09.976 A:middle
out, and have a great WWDC.

00:36:10.516 --> 00:36:15.500 A:middle
[ Applause ]