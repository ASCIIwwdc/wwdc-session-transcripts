WEBVTT

00:00:07.516 --> 00:00:16.500 A:middle
[ Cheers ]

00:00:22.176 --> 00:00:23.306 A:middle
&gt;&gt; Hi, everyone.

00:00:23.396 --> 00:00:24.816 A:middle
My name is Neil Desai, and I'm a

00:00:24.816 --> 00:00:26.236 A:middle
WatchKit Frameworks Engineer,

00:00:26.506 --> 00:00:28.506 A:middle
and I'm really excited to talk

00:00:28.506 --> 00:00:30.166 A:middle
about the life of a watchOS app

00:00:30.166 --> 00:00:30.436 A:middle
today.

00:00:32.506 --> 00:00:35.086 A:middle
So, watch apps have a phenomenal

00:00:35.086 --> 00:00:37.316 A:middle
capacity to be simple yet

00:00:37.316 --> 00:00:38.626 A:middle
incredibly powerful.

00:00:39.276 --> 00:00:40.926 A:middle
Well-designed watch apps have

00:00:40.926 --> 00:00:43.036 A:middle
the potential to be the ultimate

00:00:43.036 --> 00:00:44.786 A:middle
companion on your user's wrist.

00:00:45.586 --> 00:00:47.926 A:middle
Now, let's imagine your user for

00:00:47.926 --> 00:00:48.376 A:middle
a second.

00:00:48.876 --> 00:00:50.366 A:middle
What are they asking for when

00:00:50.366 --> 00:00:51.736 A:middle
they want to use your watch app?

00:00:52.476 --> 00:00:53.626 A:middle
Maybe they want to quickly

00:00:53.626 --> 00:00:55.316 A:middle
glance at some information, or

00:00:55.316 --> 00:00:56.526 A:middle
complete a simple task.

00:00:57.206 --> 00:00:58.916 A:middle
We think about great watch apps

00:00:59.186 --> 00:01:00.406 A:middle
that are designed to help your

00:01:00.406 --> 00:01:02.646 A:middle
user accomplish their goals in a

00:01:02.646 --> 00:01:04.906 A:middle
simple, quick way so that the

00:01:04.906 --> 00:01:06.726 A:middle
technology disappears and the

00:01:06.726 --> 00:01:08.946 A:middle
user can go about their day and

00:01:08.946 --> 00:01:11.196 A:middle
have an enhanced experience, all

00:01:11.196 --> 00:01:14.486 A:middle
because of your app.

00:01:14.756 --> 00:01:16.706 A:middle
So, today we're going to design

00:01:16.706 --> 00:01:18.356 A:middle
an app that I've been working on

00:01:18.356 --> 00:01:19.266 A:middle
in watchOS 3.

00:01:19.886 --> 00:01:21.336 A:middle
We're not ready to ship it just

00:01:21.336 --> 00:01:23.046 A:middle
yet, but we'll get to take

00:01:23.046 --> 00:01:24.396 A:middle
advantage of some of the new

00:01:24.396 --> 00:01:26.676 A:middle
capabilities and enhancements in

00:01:26.676 --> 00:01:28.796 A:middle
watchOS 4 to take our app to the

00:01:28.796 --> 00:01:30.146 A:middle
next level.

00:01:30.756 --> 00:01:32.786 A:middle
Today, we're going to talk

00:01:32.786 --> 00:01:34.536 A:middle
through four different additions

00:01:34.536 --> 00:01:36.806 A:middle
in watchOS 4 that can help

00:01:36.806 --> 00:01:37.606 A:middle
design our app.

00:01:38.486 --> 00:01:39.506 A:middle
We're going to talk about some

00:01:39.506 --> 00:01:41.446 A:middle
new things, such as our new

00:01:43.166 --> 00:01:45.076 A:middle
Unified Process Runtime.

00:01:45.496 --> 00:01:46.896 A:middle
We're going to get some great

00:01:46.896 --> 00:01:48.296 A:middle
performance improvements in our

00:01:48.296 --> 00:01:49.486 A:middle
app, and I'm going to show you

00:01:49.486 --> 00:01:51.226 A:middle
how to do so in watchOS 4.

00:01:53.376 --> 00:01:54.866 A:middle
We're going to talk through our

00:01:54.866 --> 00:01:56.376 A:middle
new Frontmost App State.

00:01:56.766 --> 00:01:57.996 A:middle
We're going to take advantage of

00:01:57.996 --> 00:02:00.156 A:middle
this state and build an amazing

00:02:00.156 --> 00:02:01.526 A:middle
experience for our user.

00:02:03.776 --> 00:02:05.646 A:middle
Also, we're going to talk about

00:02:05.646 --> 00:02:07.166 A:middle
some new improvements we've made

00:02:07.166 --> 00:02:09.246 A:middle
to Background App Refresh, and

00:02:09.416 --> 00:02:10.596 A:middle
how we can take advantage of

00:02:10.596 --> 00:02:10.886 A:middle
them.

00:02:12.676 --> 00:02:14.786 A:middle
And lastly, we're going to talk

00:02:14.786 --> 00:02:16.506 A:middle
about some new background modes

00:02:16.506 --> 00:02:18.836 A:middle
that are available in watchOS 4,

00:02:18.836 --> 00:02:20.216 A:middle
and take advantage of one of

00:02:20.216 --> 00:02:21.036 A:middle
them in our app.

00:02:22.126 --> 00:02:24.336 A:middle
So, let's get started and dive

00:02:24.336 --> 00:02:26.716 A:middle
right into our new Unified

00:02:26.716 --> 00:02:27.736 A:middle
Process Runtime.

00:02:28.596 --> 00:02:29.886 A:middle
So, we've designed a

00:02:29.886 --> 00:02:31.596 A:middle
single-process architecture that

00:02:31.596 --> 00:02:33.276 A:middle
will help your apps become even

00:02:33.276 --> 00:02:35.166 A:middle
faster and more responsive to

00:02:35.166 --> 00:02:35.906 A:middle
your user.

00:02:36.526 --> 00:02:38.516 A:middle
So, let's now just revisit some

00:02:38.516 --> 00:02:39.796 A:middle
of the history of where we came

00:02:39.796 --> 00:02:41.056 A:middle
from and where we're now at,

00:02:41.146 --> 00:02:41.426 A:middle
today.

00:02:43.566 --> 00:02:45.996 A:middle
So in watchOS 3, your apps UI

00:02:45.996 --> 00:02:47.806 A:middle
lived in the app process, which

00:02:47.806 --> 00:02:49.556 A:middle
we managed for you, and your

00:02:49.556 --> 00:02:51.456 A:middle
code lived in the watch

00:02:51.456 --> 00:02:53.206 A:middle
extension, so we had two

00:02:53.206 --> 00:02:54.716 A:middle
separate processes, in this

00:02:54.716 --> 00:02:56.076 A:middle
case, that lived on the system.

00:02:57.436 --> 00:02:59.296 A:middle
So, we changed things internally

00:02:59.296 --> 00:03:01.206 A:middle
and unified our process runtime,

00:03:02.106 --> 00:03:04.646 A:middle
so now the UI and your extension

00:03:04.646 --> 00:03:06.646 A:middle
code all get executed from the

00:03:06.646 --> 00:03:07.596 A:middle
same process.

00:03:08.296 --> 00:03:09.926 A:middle
And now, you might be wondering,

00:03:09.926 --> 00:03:13.266 A:middle
why exactly did we do this?

00:03:13.446 --> 00:03:15.496 A:middle
So ultimately, we wanted to

00:03:15.496 --> 00:03:17.156 A:middle
improve the performance of all

00:03:17.156 --> 00:03:19.526 A:middle
WatchKit apps on watchOS 4, so

00:03:19.526 --> 00:03:21.356 A:middle
users could have an even better

00:03:21.356 --> 00:03:22.596 A:middle
experience with your apps.

00:03:23.246 --> 00:03:25.326 A:middle
And, I'm really happy to say,

00:03:25.326 --> 00:03:26.906 A:middle
we've accomplished our goals.

00:03:28.066 --> 00:03:29.556 A:middle
We can see touch latency

00:03:29.556 --> 00:03:30.946 A:middle
improvements of almost up to

00:03:30.946 --> 00:03:33.416 A:middle
twice as fast in some cases.

00:03:33.986 --> 00:03:35.546 A:middle
So, from the moment a user

00:03:35.546 --> 00:03:37.126 A:middle
actually touches the screen, to

00:03:37.126 --> 00:03:38.956 A:middle
when your code gets called into,

00:03:39.236 --> 00:03:40.436 A:middle
we've seen a dramatic

00:03:40.436 --> 00:03:41.076 A:middle
improvement.

00:03:42.236 --> 00:03:44.026 A:middle
Also, for example, we've seen

00:03:44.026 --> 00:03:45.376 A:middle
dramatic frames-per-second

00:03:45.376 --> 00:03:47.116 A:middle
improvements when tied to

00:03:47.116 --> 00:03:49.676 A:middle
general pan gestures, and we

00:03:49.676 --> 00:03:51.156 A:middle
expect launch performance to

00:03:51.156 --> 00:03:51.986 A:middle
also improve.

00:03:53.176 --> 00:03:55.066 A:middle
And now, since we just have one

00:03:55.066 --> 00:03:57.376 A:middle
process to manage your UI and

00:03:57.376 --> 00:03:59.236 A:middle
your extension code, we now have

00:03:59.236 --> 00:04:00.976 A:middle
upped the memory limits to

00:04:00.976 --> 00:04:01.726 A:middle
account for this.

00:04:03.016 --> 00:04:03.996 A:middle
And, you might be wondering,

00:04:03.996 --> 00:04:04.966 A:middle
there's a lot of architecture

00:04:04.966 --> 00:04:07.036 A:middle
that we did internally, so what

00:04:07.036 --> 00:04:08.346 A:middle
do you all have to do to change

00:04:08.516 --> 00:04:10.656 A:middle
your apps to adopt this new

00:04:10.656 --> 00:04:11.306 A:middle
mechanism?

00:04:11.626 --> 00:04:13.376 A:middle
And, the great thing is that

00:04:13.376 --> 00:04:14.646 A:middle
there are actually no changes

00:04:14.646 --> 00:04:15.606 A:middle
required at all.

00:04:16.206 --> 00:04:18.466 A:middle
So, you'll be happy to hear that

00:04:18.816 --> 00:04:20.366 A:middle
all existing native WatchKit

00:04:20.366 --> 00:04:22.236 A:middle
extensions in the App Store

00:04:22.236 --> 00:04:24.776 A:middle
today will get this behavior as

00:04:24.776 --> 00:04:26.226 A:middle
soon as your user upgrades to

00:04:26.226 --> 00:04:27.116 A:middle
watchOS 4.

00:04:27.776 --> 00:04:29.686 A:middle
This new Unified Process Runtime

00:04:29.686 --> 00:04:30.986 A:middle
is completely backwards

00:04:30.986 --> 00:04:31.606 A:middle
compatible.

00:04:32.786 --> 00:04:34.286 A:middle
As long as your app is built

00:04:34.286 --> 00:04:36.336 A:middle
with watchOS 2 or later, you

00:04:36.336 --> 00:04:38.006 A:middle
don't have to anything else.

00:04:38.826 --> 00:04:40.816 A:middle
So, this means the app we're

00:04:40.816 --> 00:04:43.016 A:middle
going to improve today doesn't

00:04:43.016 --> 00:04:45.126 A:middle
need to change in Xcode, or on

00:04:45.126 --> 00:04:45.836 A:middle
the App Store.

00:04:46.046 --> 00:04:47.426 A:middle
It just works.

00:04:49.586 --> 00:04:51.946 A:middle
So now, let's talk about our new

00:04:52.086 --> 00:04:53.036 A:middle
Frontmost App State.

00:04:54.126 --> 00:04:56.206 A:middle
On the watch, a user many times

00:04:56.206 --> 00:04:57.516 A:middle
uses an app in a matter of

00:04:57.516 --> 00:04:59.666 A:middle
seconds, and then they put their

00:04:59.666 --> 00:05:01.446 A:middle
wrist down and expect the app to

00:05:01.446 --> 00:05:03.456 A:middle
finish up whatever task needs to

00:05:03.456 --> 00:05:04.066 A:middle
be finished.

00:05:05.346 --> 00:05:07.096 A:middle
Many times, a user wants to

00:05:07.096 --> 00:05:08.796 A:middle
raise their wrist again and see

00:05:08.796 --> 00:05:10.516 A:middle
your app has finished doing

00:05:10.516 --> 00:05:12.626 A:middle
whatever it needs to, and they

00:05:12.626 --> 00:05:14.406 A:middle
want it to feel like magic.

00:05:15.316 --> 00:05:16.396 A:middle
And, users shouldn't have to

00:05:16.396 --> 00:05:17.606 A:middle
keep their wrist up, for your

00:05:17.606 --> 00:05:18.556 A:middle
app to have to finish doing

00:05:18.556 --> 00:05:19.736 A:middle
whatever task it needs to

00:05:19.736 --> 00:05:21.466 A:middle
finish, and this is a really

00:05:21.466 --> 00:05:23.196 A:middle
common pain point for our users.

00:05:24.116 --> 00:05:26.806 A:middle
So, we thought a lot about all

00:05:26.806 --> 00:05:28.006 A:middle
the different ways we could give

00:05:28.006 --> 00:05:30.246 A:middle
you all more runtime to help

00:05:30.246 --> 00:05:32.216 A:middle
finish your tasks for your user,

00:05:32.786 --> 00:05:35.246 A:middle
and today, we're introducing a

00:05:35.246 --> 00:05:36.926 A:middle
collection of new capabilities

00:05:37.136 --> 00:05:38.926 A:middle
we call the Frontmost App State

00:05:38.926 --> 00:05:40.976 A:middle
to help you design experiences

00:05:40.976 --> 00:05:41.866 A:middle
for this case.

00:05:44.186 --> 00:05:46.456 A:middle
So, without further ado, let's

00:05:46.456 --> 00:05:47.276 A:middle
talk about our app.

00:05:47.986 --> 00:05:51.436 A:middle
So, the app is called Apple Pie

00:05:51.436 --> 00:05:53.376 A:middle
Me, and let's see how it looks.

00:05:53.896 --> 00:05:55.906 A:middle
So, it's a food delivery service

00:05:55.906 --> 00:05:57.196 A:middle
where you can get apple pies

00:05:57.316 --> 00:05:59.206 A:middle
delivered wherever you are, so

00:05:59.206 --> 00:06:00.256 A:middle
an apple pie a day keeps the

00:06:00.256 --> 00:06:01.146 A:middle
doctor away, right?

00:06:01.676 --> 00:06:03.976 A:middle
I think so, at least, I really

00:06:03.976 --> 00:06:05.866 A:middle
hope so, because I eat an apple

00:06:05.866 --> 00:06:07.736 A:middle
pie every single day, and

00:06:07.786 --> 00:06:08.656 A:middle
they're delicious.

00:06:09.836 --> 00:06:12.106 A:middle
And, I'm pretty busy, and I

00:06:12.106 --> 00:06:13.146 A:middle
always just want to quickly

00:06:13.146 --> 00:06:14.476 A:middle
order my apple pie, and get it

00:06:14.476 --> 00:06:15.686 A:middle
delivered wherever I am.

00:06:16.696 --> 00:06:18.316 A:middle
And, most importantly, I want to

00:06:18.316 --> 00:06:20.016 A:middle
tap the order button and then

00:06:20.016 --> 00:06:21.706 A:middle
simply put my wrist down and go

00:06:21.706 --> 00:06:22.426 A:middle
about my day.

00:06:23.196 --> 00:06:24.986 A:middle
In watchOS 3, it was a bit

00:06:25.036 --> 00:06:26.506 A:middle
difficult to build a perfect

00:06:26.506 --> 00:06:28.966 A:middle
experience, but with watchOS 4,

00:06:28.966 --> 00:06:30.286 A:middle
I'm going to show you how to

00:06:30.286 --> 00:06:32.166 A:middle
surprise and delight your users

00:06:32.306 --> 00:06:33.806 A:middle
using our new Frontmost App

00:06:33.806 --> 00:06:34.146 A:middle
State.

00:06:36.166 --> 00:06:37.946 A:middle
So, to help explain the

00:06:37.946 --> 00:06:39.676 A:middle
Frontmost App State, we're going

00:06:39.676 --> 00:06:41.386 A:middle
to talk through what exactly

00:06:41.386 --> 00:06:42.786 A:middle
application state means on the

00:06:42.786 --> 00:06:44.846 A:middle
watch, what does the term

00:06:44.846 --> 00:06:46.986 A:middle
frontmost mean, the enhanced

00:06:46.986 --> 00:06:48.176 A:middle
capabilities that you're going

00:06:48.176 --> 00:06:50.386 A:middle
to receive, and lastly, we're

00:06:50.386 --> 00:06:51.146 A:middle
going to walk through

00:06:51.146 --> 00:06:52.676 A:middle
architecting our Apple Pie Me

00:06:52.676 --> 00:06:52.906 A:middle
app.

00:06:55.446 --> 00:06:56.876 A:middle
So, let's say our user decides

00:06:56.876 --> 00:06:57.606 A:middle
to launch our app.

00:06:58.056 --> 00:07:00.286 A:middle
So here, the app is foreground,

00:07:00.416 --> 00:07:01.786 A:middle
the screen is on, and the

00:07:01.786 --> 00:07:03.486 A:middle
application state, in this case,

00:07:03.486 --> 00:07:04.136 A:middle
is active.

00:07:05.466 --> 00:07:06.616 A:middle
So now, let's say our user

00:07:06.616 --> 00:07:08.056 A:middle
decided to go back to the watch

00:07:08.056 --> 00:07:08.396 A:middle
face.

00:07:09.286 --> 00:07:11.946 A:middle
So, in this case, the app is

00:07:11.946 --> 00:07:14.356 A:middle
actually in the background and,

00:07:14.486 --> 00:07:15.936 A:middle
for instance, your application

00:07:15.936 --> 00:07:16.816 A:middle
might be running for a

00:07:16.816 --> 00:07:18.096 A:middle
complication update, for

00:07:18.096 --> 00:07:18.506 A:middle
example.

00:07:20.036 --> 00:07:21.246 A:middle
And now, let's say our user

00:07:21.246 --> 00:07:23.606 A:middle
decides to go back to our app.

00:07:23.706 --> 00:07:25.256 A:middle
So, we're active in foreground

00:07:25.256 --> 00:07:27.166 A:middle
again, and now the user's using

00:07:27.166 --> 00:07:28.726 A:middle
the app, but then they decide

00:07:28.726 --> 00:07:29.586 A:middle
they want to put their wrist

00:07:29.586 --> 00:07:29.896 A:middle
down.

00:07:30.316 --> 00:07:32.256 A:middle
So, the screen turns off, and

00:07:32.256 --> 00:07:33.986 A:middle
your app is no longer foreground

00:07:34.586 --> 00:07:35.396 A:middle
because of this.

00:07:35.956 --> 00:07:37.776 A:middle
However, since your app was the

00:07:37.776 --> 00:07:39.246 A:middle
last thing used, it's the

00:07:39.246 --> 00:07:41.996 A:middle
frontmost app, so when the user

00:07:41.996 --> 00:07:43.736 A:middle
raises their wrist again, your

00:07:43.736 --> 00:07:45.166 A:middle
app will be what they see,

00:07:45.576 --> 00:07:46.926 A:middle
instead of the watch face.

00:07:48.136 --> 00:07:50.156 A:middle
During this time, we think of

00:07:50.156 --> 00:07:51.726 A:middle
your app as the frontmost app.

00:07:52.866 --> 00:07:54.476 A:middle
So now, when your app is

00:07:54.476 --> 00:07:55.996 A:middle
frontmost in this way, the

00:07:55.996 --> 00:07:57.816 A:middle
application state will be

00:07:57.816 --> 00:08:00.116 A:middle
background, and you might be

00:08:00.116 --> 00:08:02.366 A:middle
wondering how exactly, or how

00:08:02.366 --> 00:08:04.066 A:middle
long does the app stay frontmost

00:08:04.066 --> 00:08:04.296 A:middle
for?

00:08:05.646 --> 00:08:07.296 A:middle
So, it's going to be two minutes

00:08:07.296 --> 00:08:08.236 A:middle
for all apps.

00:08:09.106 --> 00:08:10.836 A:middle
However, if there is an

00:08:10.836 --> 00:08:13.146 A:middle
expectation by your user to see

00:08:13.146 --> 00:08:14.966 A:middle
your app next when they raise

00:08:14.966 --> 00:08:16.356 A:middle
their wrist, then you can use a

00:08:16.356 --> 00:08:18.716 A:middle
new API to extend this timeout

00:08:18.986 --> 00:08:20.006 A:middle
to be eight minutes.

00:08:21.176 --> 00:08:22.836 A:middle
So, for example, if you're a

00:08:22.836 --> 00:08:24.186 A:middle
ride-sharing app in the middle

00:08:24.186 --> 00:08:26.086 A:middle
of a ride, then you might want

00:08:26.086 --> 00:08:27.406 A:middle
additional time in the frontmost

00:08:27.406 --> 00:08:28.526 A:middle
state, because there's a

00:08:28.526 --> 00:08:30.406 A:middle
reasonable expectation that the

00:08:30.406 --> 00:08:32.116 A:middle
user wants to see your app the

00:08:32.116 --> 00:08:33.136 A:middle
next time they raise their

00:08:33.136 --> 00:08:33.546 A:middle
wrist.

00:08:34.676 --> 00:08:37.036 A:middle
However, in many cases, if you

00:08:37.036 --> 00:08:38.966 A:middle
forget to turn this off when

00:08:38.966 --> 00:08:40.176 A:middle
it's not needed, you can

00:08:40.176 --> 00:08:42.186 A:middle
unwittingly annoy your user and

00:08:42.186 --> 00:08:43.226 A:middle
leave them with a subpar

00:08:43.226 --> 00:08:44.016 A:middle
experience.

00:08:44.496 --> 00:08:46.196 A:middle
So, always just make sure to

00:08:46.196 --> 00:08:48.046 A:middle
turn it off, to reset the time

00:08:48.046 --> 00:08:49.896 A:middle
back to two minutes when you no

00:08:49.896 --> 00:08:51.156 A:middle
longer need this experience.

00:08:52.456 --> 00:08:54.626 A:middle
So, let's jump into code to see

00:08:54.626 --> 00:08:56.086 A:middle
how we might enable the extended

00:08:56.086 --> 00:08:56.476 A:middle
timeout.

00:08:58.726 --> 00:08:59.996 A:middle
So, it's really simple.

00:08:59.996 --> 00:09:01.456 A:middle
It's a Boolean property on our

00:09:01.456 --> 00:09:03.196 A:middle
WKExtension, and when we want

00:09:03.196 --> 00:09:04.456 A:middle
eight minutes, we can set it to

00:09:04.456 --> 00:09:06.246 A:middle
be true, and when we want to go

00:09:06.246 --> 00:09:07.416 A:middle
back to the default of two

00:09:07.416 --> 00:09:08.626 A:middle
minutes, we just set it to be

00:09:08.626 --> 00:09:09.066 A:middle
false.

00:09:11.916 --> 00:09:13.706 A:middle
So, there's one other point I

00:09:13.706 --> 00:09:14.666 A:middle
wanted to mention.

00:09:14.936 --> 00:09:16.816 A:middle
If the user raises their wrist

00:09:16.816 --> 00:09:18.306 A:middle
and views your app, then the

00:09:18.306 --> 00:09:20.916 A:middle
timeout is reset, regardless if,

00:09:20.916 --> 00:09:23.266 A:middle
if you use the frontmost

00:09:23.266 --> 00:09:24.666 A:middle
extended API or not.

00:09:25.716 --> 00:09:27.556 A:middle
Essentially, if the user is

00:09:27.556 --> 00:09:29.116 A:middle
still interested in using your

00:09:29.116 --> 00:09:30.526 A:middle
app, your app will stay

00:09:30.526 --> 00:09:31.226 A:middle
frontmost.

00:09:34.026 --> 00:09:36.376 A:middle
So, now we know what frontmost

00:09:36.376 --> 00:09:37.926 A:middle
means, but what does this all

00:09:37.926 --> 00:09:38.656 A:middle
really mean?

00:09:38.656 --> 00:09:40.026 A:middle
Like, what exactly does this new

00:09:40.026 --> 00:09:40.786 A:middle
state give us?

00:09:41.466 --> 00:09:42.736 A:middle
Well, we're going to get some

00:09:42.736 --> 00:09:43.956 A:middle
enhanced capabilities.

00:09:44.556 --> 00:09:47.376 A:middle
So, we're going to change the

00:09:47.376 --> 00:09:48.676 A:middle
notion of how we get our

00:09:48.676 --> 00:09:50.336 A:middle
WatchConnectivity resumes, and

00:09:50.336 --> 00:09:51.976 A:middle
our NSURLSession resumes.

00:09:52.186 --> 00:09:53.136 A:middle
So, our transfer and

00:09:53.136 --> 00:09:54.996 A:middle
connectivity is now improved.

00:09:55.596 --> 00:09:57.456 A:middle
We'll also change a little bit

00:09:57.456 --> 00:09:58.976 A:middle
about our task completions.

00:09:59.456 --> 00:10:00.516 A:middle
&gt;&gt; And then, we're also going to

00:10:00.516 --> 00:10:01.866 A:middle
allow haptics to be played in

00:10:01.866 --> 00:10:02.896 A:middle
this frontmost state.

00:10:03.216 --> 00:10:04.946 A:middle
And lastly, we're going to get a

00:10:04.946 --> 00:10:06.526 A:middle
frontmost notification, so we

00:10:06.526 --> 00:10:08.786 A:middle
can handle this via the user

00:10:08.786 --> 00:10:10.426 A:middle
notifications framework, and

00:10:10.426 --> 00:10:11.736 A:middle
choose the right experience.

00:10:13.226 --> 00:10:14.566 A:middle
So, let's dive right in.

00:10:15.176 --> 00:10:18.266 A:middle
So, for WatchConnectivity, we've

00:10:18.266 --> 00:10:19.896 A:middle
changed the way our background

00:10:19.896 --> 00:10:22.116 A:middle
transfers work, so when you use

00:10:22.116 --> 00:10:23.926 A:middle
on the phone, update application

00:10:23.926 --> 00:10:26.296 A:middle
context, transfer user info, or

00:10:26.296 --> 00:10:28.466 A:middle
transfer file, the request, when

00:10:28.466 --> 00:10:29.706 A:middle
you send it from the phone to

00:10:29.706 --> 00:10:31.516 A:middle
the watch, it'll just go right

00:10:31.566 --> 00:10:33.336 A:middle
through, wake up your app on the

00:10:33.336 --> 00:10:35.036 A:middle
watch, and then just deliver

00:10:35.036 --> 00:10:35.686 A:middle
your payload.

00:10:36.936 --> 00:10:39.456 A:middle
And, there's one point I wanted

00:10:39.456 --> 00:10:40.846 A:middle
to mention in relation to

00:10:40.846 --> 00:10:42.696 A:middle
WatchConnectivity, is that send

00:10:42.696 --> 00:10:44.266 A:middle
message won't work when you're

00:10:44.266 --> 00:10:45.896 A:middle
frontmost, but the screen's off,

00:10:46.126 --> 00:10:47.396 A:middle
because your application state

00:10:47.396 --> 00:10:48.046 A:middle
is background.

00:10:48.956 --> 00:10:50.376 A:middle
So, just always make sure that

00:10:50.376 --> 00:10:52.146 A:middle
call is reachable first, and

00:10:52.146 --> 00:10:53.266 A:middle
then that can allow you to send

00:10:53.266 --> 00:10:53.826 A:middle
the message.

00:10:55.196 --> 00:10:56.756 A:middle
And, along the same vein as

00:10:56.756 --> 00:10:58.696 A:middle
WatchConnectivity, we're also

00:10:58.696 --> 00:10:59.856 A:middle
going to change the notion of

00:10:59.856 --> 00:11:01.846 A:middle
our resumes for NSURLSession.

00:11:02.416 --> 00:11:03.816 A:middle
So, when we have a background

00:11:03.816 --> 00:11:05.726 A:middle
download, for instance, and the

00:11:05.726 --> 00:11:07.336 A:middle
system's downloading it for us,

00:11:08.116 --> 00:11:09.136 A:middle
and then when the system is

00:11:09.136 --> 00:11:09.986 A:middle
finished, it's going to

00:11:09.986 --> 00:11:11.886 A:middle
automatically wake up our app,

00:11:11.886 --> 00:11:13.176 A:middle
if we're in the frontmost state,

00:11:13.446 --> 00:11:15.116 A:middle
and deliver the data right to

00:11:15.116 --> 00:11:16.706 A:middle
our application.

00:11:18.356 --> 00:11:19.396 A:middle
And, of course, with

00:11:19.396 --> 00:11:20.796 A:middle
NSURLSession, there is actually

00:11:20.796 --> 00:11:21.936 A:middle
two major parts.

00:11:22.246 --> 00:11:23.476 A:middle
There is the resume, when the

00:11:23.476 --> 00:11:25.446 A:middle
system has actually completed

00:11:25.446 --> 00:11:26.766 A:middle
downloading whatever it is you

00:11:26.766 --> 00:11:28.336 A:middle
need, but then there's also the

00:11:28.336 --> 00:11:30.386 A:middle
initiation of a download in the

00:11:30.386 --> 00:11:30.936 A:middle
background.

00:11:32.386 --> 00:11:34.246 A:middle
So, in most cases, this will

00:11:34.246 --> 00:11:36.566 A:middle
occur immediately, also, and in

00:11:36.566 --> 00:11:38.066 A:middle
very rare cases, it could get

00:11:38.066 --> 00:11:40.726 A:middle
delayed up to 10 minutes, but

00:11:40.726 --> 00:11:42.296 A:middle
it's a very rare situation.

00:11:42.936 --> 00:11:44.566 A:middle
If you've ever used

00:11:44.636 --> 00:11:46.586 A:middle
NSURLSession, which probably

00:11:46.586 --> 00:11:48.316 A:middle
almost everyone has here, for a

00:11:48.316 --> 00:11:49.936 A:middle
background transfer, this is a

00:11:49.936 --> 00:11:51.476 A:middle
really big deal on the frontmost

00:11:51.476 --> 00:11:51.766 A:middle
state.

00:11:52.226 --> 00:11:54.726 A:middle
To reliably depend on the

00:11:54.726 --> 00:11:57.866 A:middle
initiation and the resume of our

00:11:57.866 --> 00:11:59.966 A:middle
connectivity is really going to

00:11:59.966 --> 00:12:01.366 A:middle
change the design landscape for

00:12:01.366 --> 00:12:03.126 A:middle
the watch, and also, in

00:12:03.126 --> 00:12:03.816 A:middle
addition, with our

00:12:03.816 --> 00:12:05.226 A:middle
WatchConnectivity and getting

00:12:05.226 --> 00:12:06.436 A:middle
requests right from our phone.

00:12:09.246 --> 00:12:12.826 A:middle
So, another thing is, a lot of

00:12:12.826 --> 00:12:13.816 A:middle
times, a user might put their

00:12:13.816 --> 00:12:15.586 A:middle
wrist down, and in that moment,

00:12:15.586 --> 00:12:17.296 A:middle
your application goes into the

00:12:17.296 --> 00:12:19.966 A:middle
background, but you might need

00:12:19.966 --> 00:12:21.086 A:middle
to finish up a task.

00:12:21.086 --> 00:12:22.186 A:middle
So, say you need to close a

00:12:22.186 --> 00:12:23.766 A:middle
database, or do something else.

00:12:24.536 --> 00:12:26.286 A:middle
So, you can just use the

00:12:26.376 --> 00:12:28.326 A:middle
NSProcessInfo class to perform

00:12:28.326 --> 00:12:31.006 A:middle
expiring activity API to get up

00:12:31.006 --> 00:12:32.766 A:middle
to 30 seconds when foreground

00:12:32.766 --> 00:12:34.956 A:middle
initiated, and up to 10 seconds

00:12:34.956 --> 00:12:36.146 A:middle
when background initiated.

00:12:36.566 --> 00:12:38.706 A:middle
So, for example, for background

00:12:38.706 --> 00:12:40.266 A:middle
initiated, maybe you're running

00:12:40.266 --> 00:12:42.246 A:middle
in a complication for an update,

00:12:42.246 --> 00:12:43.606 A:middle
and you just need a little extra

00:12:43.606 --> 00:12:45.036 A:middle
time to get done.

00:12:45.486 --> 00:12:46.656 A:middle
So, you can just use the

00:12:46.656 --> 00:12:48.896 A:middle
NSProcessInfo class to get some

00:12:48.896 --> 00:12:49.676 A:middle
additional time.

00:12:50.856 --> 00:12:52.826 A:middle
And now, when you're frontmost,

00:12:52.826 --> 00:12:55.236 A:middle
and you use that API, then

00:12:55.956 --> 00:12:57.856 A:middle
you'll get increased priority by

00:12:57.856 --> 00:12:58.506 A:middle
the system.

00:12:58.936 --> 00:13:00.806 A:middle
So, because the system believes

00:13:00.806 --> 00:13:02.706 A:middle
that your app is more important

00:13:02.706 --> 00:13:04.026 A:middle
to the user, because it's still

00:13:04.026 --> 00:13:05.566 A:middle
in the frontmost state, the

00:13:05.566 --> 00:13:07.196 A:middle
priority by the system will get

00:13:07.196 --> 00:13:09.126 A:middle
increased, so you're more likely

00:13:09.126 --> 00:13:10.746 A:middle
to get the runtime that you need

00:13:10.996 --> 00:13:12.426 A:middle
to finish up whatever task you

00:13:12.426 --> 00:13:13.696 A:middle
need to do for your user.

00:13:16.636 --> 00:13:18.126 A:middle
And, another benefit of being

00:13:18.126 --> 00:13:20.126 A:middle
frontmost is, you can now play

00:13:20.126 --> 00:13:21.946 A:middle
haptics, so when you have

00:13:21.946 --> 00:13:23.596 A:middle
runtime for another reason, you

00:13:23.596 --> 00:13:24.976 A:middle
can easily just play a haptic.

00:13:26.056 --> 00:13:26.396 A:middle
Thank you.

00:13:27.516 --> 00:13:29.766 A:middle
[ Applause ]

00:13:30.266 --> 00:13:31.836 A:middle
&gt;&gt; So, sometimes haptics can get

00:13:31.836 --> 00:13:33.196 A:middle
a little confusing here or

00:13:33.196 --> 00:13:35.386 A:middle
there, so let me just dive in

00:13:35.386 --> 00:13:38.436 A:middle
and talk to you about, so if

00:13:38.436 --> 00:13:39.986 A:middle
haptics, if you play a haptic,

00:13:39.986 --> 00:13:41.956 A:middle
and let's say some audio is

00:13:41.956 --> 00:13:44.096 A:middle
playing out a speaker, then only

00:13:44.096 --> 00:13:45.346 A:middle
the audio from a haptic will

00:13:45.346 --> 00:13:46.976 A:middle
play, and it ducks what's

00:13:47.006 --> 00:13:47.726 A:middle
currently playing.

00:13:48.616 --> 00:13:49.936 A:middle
If audio is playing out of

00:13:50.006 --> 00:13:51.536 A:middle
Bluetooth headphones and the

00:13:51.536 --> 00:13:53.376 A:middle
screen is on, then the haptics

00:13:53.376 --> 00:13:55.166 A:middle
will play, and if the screen is

00:13:55.166 --> 00:13:56.606 A:middle
off, then just the audio will

00:13:56.606 --> 00:13:58.056 A:middle
play, because that makes the

00:13:58.056 --> 00:14:00.096 A:middle
most sense for your user.

00:14:02.716 --> 00:14:04.456 A:middle
And so lastly, the other benefit

00:14:04.456 --> 00:14:06.276 A:middle
of being frontmost is, when you

00:14:06.276 --> 00:14:07.726 A:middle
receive a remote or local

00:14:07.726 --> 00:14:09.466 A:middle
notification via the user

00:14:09.466 --> 00:14:11.186 A:middle
notifications framework, you'll

00:14:11.186 --> 00:14:13.136 A:middle
then get called into, and then

00:14:13.136 --> 00:14:14.296 A:middle
you can decide the right

00:14:14.296 --> 00:14:15.556 A:middle
experience for your user.

00:14:16.086 --> 00:14:17.416 A:middle
So, maybe you want to just

00:14:17.416 --> 00:14:19.126 A:middle
update your UI, and play the

00:14:19.126 --> 00:14:20.746 A:middle
notification like normally, you

00:14:20.746 --> 00:14:22.216 A:middle
can have that choice, now.

00:14:23.596 --> 00:14:25.666 A:middle
And so, you'll get called into,

00:14:25.666 --> 00:14:26.606 A:middle
when you just override the

00:14:26.606 --> 00:14:28.266 A:middle
function userNotification

00:14:28.606 --> 00:14:29.996 A:middle
willPresent notification

00:14:30.106 --> 00:14:31.066 A:middle
withCompletionHandler.

00:14:31.606 --> 00:14:34.446 A:middle
And, the key of all these

00:14:34.446 --> 00:14:36.656 A:middle
benefits, and this can really

00:14:36.656 --> 00:14:38.566 A:middle
change the design landscape, but

00:14:38.566 --> 00:14:40.916 A:middle
the best part about all this is

00:14:40.916 --> 00:14:43.976 A:middle
it's free, so if your app gets a

00:14:43.976 --> 00:14:45.156 A:middle
WatchConnectivity or

00:14:45.246 --> 00:14:47.556 A:middle
NSURLSession resume, your app

00:14:47.556 --> 00:14:49.026 A:middle
will now get additional runtime.

00:14:49.766 --> 00:14:50.906 A:middle
If your app implements the

00:14:50.906 --> 00:14:52.096 A:middle
willPresent notification

00:14:52.096 --> 00:14:53.756 A:middle
callback, you'll now get that

00:14:53.756 --> 00:14:55.356 A:middle
for free in the frontmost state.

00:14:56.096 --> 00:14:58.046 A:middle
Also, if, for example, you want

00:14:58.046 --> 00:14:59.696 A:middle
to use a NSProcessInfo

00:14:59.696 --> 00:15:02.386 A:middle
performExpiringActivity API to

00:15:02.386 --> 00:15:03.436 A:middle
complete a task on

00:15:03.436 --> 00:15:05.196 A:middle
applicationWillEnterBackground,

00:15:05.566 --> 00:15:06.466 A:middle
you'll get some additional

00:15:06.466 --> 00:15:07.536 A:middle
priority by the system.

00:15:08.676 --> 00:15:10.126 A:middle
You can change nothing in

00:15:10.126 --> 00:15:12.066 A:middle
watchOS 4, and your current,

00:15:12.066 --> 00:15:13.836 A:middle
native application will

00:15:13.836 --> 00:15:15.946 A:middle
automatically be more glanceable

00:15:15.946 --> 00:15:17.636 A:middle
and actionable by default.

00:15:18.246 --> 00:15:19.766 A:middle
And, with the Unified Process

00:15:19.766 --> 00:15:21.176 A:middle
Runtime we talked about earlier,

00:15:21.576 --> 00:15:22.916 A:middle
your application will be even

00:15:22.916 --> 00:15:23.756 A:middle
more responsive.

00:15:24.856 --> 00:15:27.036 A:middle
But, we want you all to take it

00:15:27.036 --> 00:15:27.856 A:middle
a step further.

00:15:28.706 --> 00:15:30.476 A:middle
Your apps can now leap forward

00:15:30.476 --> 00:15:32.096 A:middle
in functionality if you take

00:15:32.096 --> 00:15:33.306 A:middle
these new behaviors into

00:15:33.306 --> 00:15:33.766 A:middle
account.

00:15:34.656 --> 00:15:36.586 A:middle
You need to architect your apps

00:15:36.586 --> 00:15:37.846 A:middle
for this experience.

00:15:38.926 --> 00:15:41.116 A:middle
So now, let's talk through the

00:15:41.116 --> 00:15:42.526 A:middle
Apple Pie Me app, and get

00:15:42.526 --> 00:15:44.016 A:middle
started architecting our app

00:15:44.066 --> 00:15:45.496 A:middle
using these new capabilities.

00:15:46.266 --> 00:15:47.706 A:middle
So, let's revisit some of the

00:15:47.706 --> 00:15:49.656 A:middle
design goals for the app from

00:15:49.656 --> 00:15:50.956 A:middle
the perspective of our user.

00:15:52.756 --> 00:15:55.186 A:middle
So, here we are at a timeline of

00:15:55.186 --> 00:15:56.886 A:middle
our user, and really, the user

00:15:56.886 --> 00:15:58.306 A:middle
just wants to order apple pie,

00:15:58.676 --> 00:15:59.976 A:middle
and then they want to eat apple

00:15:59.976 --> 00:16:02.106 A:middle
pie, and sometimes in between,

00:16:02.106 --> 00:16:02.866 A:middle
they just want to view the

00:16:02.866 --> 00:16:03.896 A:middle
status of their order.

00:16:04.556 --> 00:16:05.786 A:middle
So, it's a pretty simple app

00:16:05.786 --> 00:16:06.956 A:middle
from the user's perspective.

00:16:07.556 --> 00:16:08.766 A:middle
But now, let's break down the

00:16:08.766 --> 00:16:10.066 A:middle
problem from our app's

00:16:10.066 --> 00:16:10.726 A:middle
perspective.

00:16:12.676 --> 00:16:14.696 A:middle
So, when that Order button is

00:16:14.696 --> 00:16:15.886 A:middle
pressed, then we're going to

00:16:15.886 --> 00:16:17.316 A:middle
send that order to our server,

00:16:17.916 --> 00:16:19.376 A:middle
and eventually, when the

00:16:19.796 --> 00:16:21.026 A:middle
restaurant has received the

00:16:21.026 --> 00:16:23.796 A:middle
request properly, and we know

00:16:23.796 --> 00:16:24.836 A:middle
that the pie is cooking, we're

00:16:24.836 --> 00:16:25.486 A:middle
going to send a push

00:16:25.486 --> 00:16:26.186 A:middle
notification.

00:16:26.616 --> 00:16:27.906 A:middle
And then, we also want to tell

00:16:27.906 --> 00:16:30.356 A:middle
our user when a courier is on

00:16:30.356 --> 00:16:32.626 A:middle
the way, and when a courier is

00:16:32.626 --> 00:16:33.066 A:middle
outside.

00:16:34.166 --> 00:16:35.596 A:middle
So, let's break this down some

00:16:35.596 --> 00:16:38.936 A:middle
more, and take it step by step.

00:16:39.136 --> 00:16:40.826 A:middle
So, we're at the Receive Order,

00:16:40.826 --> 00:16:43.006 A:middle
and how exactly do we do this?

00:16:43.616 --> 00:16:45.226 A:middle
Once the user taps the Order

00:16:45.226 --> 00:16:46.936 A:middle
button, what exactly should we

00:16:46.936 --> 00:16:47.396 A:middle
show?

00:16:48.576 --> 00:16:49.556 A:middle
We're going to be sending the

00:16:49.556 --> 00:16:50.666 A:middle
order to our server here, and

00:16:50.666 --> 00:16:52.376 A:middle
can't guarantee it'll come back

00:16:52.376 --> 00:16:53.636 A:middle
immediately, no matter what.

00:16:54.396 --> 00:16:56.736 A:middle
And, do we show something like

00:16:56.806 --> 00:16:58.446 A:middle
this, maybe a Loading indicator?

00:16:59.076 --> 00:17:00.656 A:middle
So, sometimes Loading indicators

00:17:00.656 --> 00:17:02.456 A:middle
do make sense to your user, but

00:17:02.456 --> 00:17:04.156 A:middle
in this case, it's actually

00:17:04.156 --> 00:17:05.166 A:middle
pretty confusing.

00:17:05.256 --> 00:17:06.906 A:middle
I might see this, and I might

00:17:06.906 --> 00:17:08.666 A:middle
think, "Oh, I need to hold my

00:17:08.666 --> 00:17:09.646 A:middle
wrist up.

00:17:09.966 --> 00:17:11.006 A:middle
How long do I have to hold my

00:17:11.006 --> 00:17:11.486 A:middle
wrist up?"

00:17:12.046 --> 00:17:13.106 A:middle
This isn't really a great

00:17:13.106 --> 00:17:14.246 A:middle
experience on the watch.

00:17:15.186 --> 00:17:16.916 A:middle
But instead, we could actually

00:17:16.916 --> 00:17:18.046 A:middle
show something like this.

00:17:18.486 --> 00:17:20.016 A:middle
So, hey, we'll tap you when the

00:17:20.016 --> 00:17:20.726 A:middle
pie's ready.

00:17:21.006 --> 00:17:22.376 A:middle
So, the user knows they can just

00:17:22.376 --> 00:17:24.086 A:middle
drop their wrist and go about

00:17:24.086 --> 00:17:26.686 A:middle
their day.

00:17:26.936 --> 00:17:28.776 A:middle
So, now we know at the Receive

00:17:28.776 --> 00:17:30.896 A:middle
Order screen, we know we just

00:17:30.896 --> 00:17:31.926 A:middle
want to show this new UI

00:17:31.926 --> 00:17:34.196 A:middle
immediately, so now let's break

00:17:34.196 --> 00:17:36.266 A:middle
this down into its separate

00:17:36.266 --> 00:17:36.886 A:middle
components.

00:17:38.116 --> 00:17:40.646 A:middle
So, we want to use NSURLSession

00:17:40.646 --> 00:17:41.816 A:middle
and post the order to our

00:17:41.816 --> 00:17:44.176 A:middle
server, and we also want to

00:17:44.176 --> 00:17:45.966 A:middle
extend the timeout, and then

00:17:45.966 --> 00:17:46.796 A:middle
just update our UI.

00:17:48.216 --> 00:17:50.346 A:middle
And lastly, there are times when

00:17:50.346 --> 00:17:51.866 A:middle
our server might not be

00:17:51.866 --> 00:17:53.486 A:middle
responsive, or something could

00:17:53.486 --> 00:17:55.466 A:middle
have gone wrong, and we need to

00:17:55.466 --> 00:17:57.926 A:middle
handle that case.

00:17:58.096 --> 00:18:00.356 A:middle
So, we need a mechanism that

00:18:00.356 --> 00:18:01.956 A:middle
allows us to schedule something

00:18:01.956 --> 00:18:03.706 A:middle
around, let's say, five minutes

00:18:03.706 --> 00:18:04.046 A:middle
from now.

00:18:04.576 --> 00:18:06.166 A:middle
And, we also need something that

00:18:06.166 --> 00:18:07.936 A:middle
doesn't depend on the network,

00:18:08.426 --> 00:18:10.196 A:middle
or something that, regardless of

00:18:10.196 --> 00:18:12.166 A:middle
frontmost or not, should alert

00:18:12.166 --> 00:18:12.676 A:middle
our user.

00:18:14.386 --> 00:18:15.926 A:middle
We also need something that we

00:18:15.926 --> 00:18:18.826 A:middle
can cancel later on, and so, if

00:18:18.826 --> 00:18:19.716 A:middle
you're thinking about a local

00:18:19.716 --> 00:18:20.816 A:middle
notification, then you'd be

00:18:20.816 --> 00:18:21.746 A:middle
absolutely right.

00:18:22.396 --> 00:18:23.656 A:middle
So, we could just show a local

00:18:23.656 --> 00:18:25.036 A:middle
notification that says, "Oh no!

00:18:25.136 --> 00:18:26.096 A:middle
Something went wrong."

00:18:26.096 --> 00:18:27.626 A:middle
And then, the user can easily

00:18:27.626 --> 00:18:29.076 A:middle
just tap on the Reorder button

00:18:29.616 --> 00:18:32.006 A:middle
and get another apple pie, or

00:18:32.206 --> 00:18:33.326 A:middle
they could just tap on the App

00:18:33.326 --> 00:18:34.966 A:middle
icon and go into the app and see

00:18:34.966 --> 00:18:35.566 A:middle
what went wrong.

00:18:37.236 --> 00:18:39.226 A:middle
So, let's just add that last

00:18:39.226 --> 00:18:41.836 A:middle
step, and now, let's just jump

00:18:41.836 --> 00:18:43.726 A:middle
into some code and see how this

00:18:43.726 --> 00:18:46.846 A:middle
can be done.

00:18:47.016 --> 00:18:48.746 A:middle
So, here we are at our IBAction

00:18:48.746 --> 00:18:49.926 A:middle
for when the Order button is

00:18:49.926 --> 00:18:51.766 A:middle
actually pressed, and then we

00:18:51.766 --> 00:18:52.986 A:middle
just want to grab our background

00:18:52.986 --> 00:18:54.276 A:middle
session, and then we're going to

00:18:54.276 --> 00:18:55.566 A:middle
want to post the order to our

00:18:55.566 --> 00:18:56.056 A:middle
server.

00:18:56.626 --> 00:18:57.836 A:middle
And then, because there's a

00:18:57.836 --> 00:18:59.366 A:middle
reasonable expectation that the

00:18:59.366 --> 00:19:01.086 A:middle
user wants to see our app the

00:19:01.086 --> 00:19:02.386 A:middle
next time, because they just

00:19:02.386 --> 00:19:04.166 A:middle
pressed the Order button, then

00:19:04.166 --> 00:19:05.396 A:middle
we're just going to extend our

00:19:05.396 --> 00:19:06.266 A:middle
frontmost timeout.

00:19:07.016 --> 00:19:08.446 A:middle
And then, we're going to trigger

00:19:08.446 --> 00:19:10.596 A:middle
that just-in-case scenario, our

00:19:10.596 --> 00:19:13.456 A:middle
fallback local notification, and

00:19:13.456 --> 00:19:14.416 A:middle
then we're just going to want to

00:19:14.416 --> 00:19:15.376 A:middle
reload some new UI.

00:19:18.476 --> 00:19:20.556 A:middle
Great. So now, we've received

00:19:20.556 --> 00:19:22.096 A:middle
the order, and eventually we're

00:19:22.096 --> 00:19:22.796 A:middle
going to send a push

00:19:22.796 --> 00:19:24.596 A:middle
notification for when the pie is

00:19:24.596 --> 00:19:24.976 A:middle
cooking.

00:19:25.876 --> 00:19:27.896 A:middle
So now, let's say our user puts

00:19:27.896 --> 00:19:29.656 A:middle
their wrist down sometime after

00:19:29.936 --> 00:19:30.986 A:middle
we've received the order.

00:19:32.446 --> 00:19:35.066 A:middle
So, right before we send that

00:19:35.066 --> 00:19:37.236 A:middle
notification, we expect to be in

00:19:37.236 --> 00:19:39.616 A:middle
the Frontmost App State, but

00:19:39.616 --> 00:19:41.766 A:middle
really, we, the developer, we

00:19:41.766 --> 00:19:42.766 A:middle
don't really need to know too

00:19:42.766 --> 00:19:44.556 A:middle
much about when the user puts

00:19:44.556 --> 00:19:45.786 A:middle
their wrist down, or raises it

00:19:45.786 --> 00:19:46.236 A:middle
up.

00:19:46.546 --> 00:19:47.786 A:middle
The next event that's really

00:19:47.786 --> 00:19:49.886 A:middle
just important is our push

00:19:49.886 --> 00:19:51.366 A:middle
notification, to just alert our

00:19:51.366 --> 00:19:52.796 A:middle
user that their pie is cooking.

00:19:53.656 --> 00:19:55.216 A:middle
If the app is frontmost, we'll

00:19:55.216 --> 00:19:56.696 A:middle
get our willPresent notification

00:19:56.696 --> 00:19:58.026 A:middle
callback we talked about

00:19:58.026 --> 00:19:58.416 A:middle
earlier.

00:19:59.446 --> 00:20:00.786 A:middle
Otherwise, if we're not

00:20:00.786 --> 00:20:02.666 A:middle
frontmost, the user just gets a

00:20:02.666 --> 00:20:03.936 A:middle
notification like normally.

00:20:04.996 --> 00:20:06.236 A:middle
And so, let's jump back into

00:20:06.236 --> 00:20:07.796 A:middle
some code and see what we can

00:20:07.796 --> 00:20:07.966 A:middle
do.

00:20:10.256 --> 00:20:11.736 A:middle
So, here we're just going to

00:20:11.736 --> 00:20:13.356 A:middle
override our user notification

00:20:13.356 --> 00:20:15.296 A:middle
center, willPresent notification

00:20:15.516 --> 00:20:16.496 A:middle
withCompletionHandler.

00:20:17.026 --> 00:20:17.906 A:middle
And then, the first thing we

00:20:17.906 --> 00:20:19.636 A:middle
want to do is, we just want to

00:20:19.636 --> 00:20:21.716 A:middle
make sure that we cancel our

00:20:21.716 --> 00:20:22.846 A:middle
local notification.

00:20:23.426 --> 00:20:24.936 A:middle
And then, we just want to reload

00:20:24.936 --> 00:20:27.156 A:middle
our new UI, and then, because we

00:20:27.156 --> 00:20:29.036 A:middle
did that, we want to just tap

00:20:29.036 --> 00:20:30.256 A:middle
our user, so they know to raise

00:20:30.256 --> 00:20:30.766 A:middle
their wrist.

00:20:31.446 --> 00:20:32.756 A:middle
And lastly, we want to call the

00:20:32.756 --> 00:20:34.196 A:middle
completionHandler and finish up.

00:20:35.016 --> 00:20:36.086 A:middle
And, I wanted to point out for

00:20:36.086 --> 00:20:37.716 A:middle
the completionHandler, it

00:20:37.716 --> 00:20:39.376 A:middle
actually takes a UNNotification

00:20:39.376 --> 00:20:41.136 A:middle
PresentationOptions, and so

00:20:41.136 --> 00:20:43.856 A:middle
that's the options of alert,

00:20:43.856 --> 00:20:44.756 A:middle
badge, or sound.

00:20:45.706 --> 00:20:47.376 A:middle
And, in this particular case, we

00:20:47.376 --> 00:20:48.536 A:middle
actually don't want a

00:20:48.536 --> 00:20:50.486 A:middle
notification to appear on top of

00:20:50.486 --> 00:20:52.046 A:middle
our app, because we've already

00:20:52.046 --> 00:20:53.776 A:middle
tapped the user, and we've

00:20:53.776 --> 00:20:56.016 A:middle
updated our UI, so instead,

00:20:56.016 --> 00:20:56.836 A:middle
we're just calling

00:20:56.836 --> 00:20:57.946 A:middle
completionHandler with none of

00:20:57.946 --> 00:20:59.456 A:middle
the options, so essentially

00:20:59.456 --> 00:21:00.576 A:middle
we're just going to be consuming

00:21:00.576 --> 00:21:02.436 A:middle
the notification, and then,

00:21:02.626 --> 00:21:04.256 A:middle
because the tap comes in, the

00:21:04.256 --> 00:21:05.326 A:middle
user would raise their wrist.

00:21:09.056 --> 00:21:11.586 A:middle
So, we just tap the user, and

00:21:11.586 --> 00:21:12.736 A:middle
they might see something such as

00:21:12.736 --> 00:21:13.206 A:middle
the following.

00:21:14.716 --> 00:21:16.816 A:middle
So, great, their pie is coming.

00:21:16.816 --> 00:21:18.066 A:middle
It's about 12 minutes away.

00:21:18.556 --> 00:21:22.256 A:middle
It's cooking in the oven.

00:21:22.256 --> 00:21:23.966 A:middle
So, here's where we were, and

00:21:23.966 --> 00:21:24.856 A:middle
now let's go back to our

00:21:24.856 --> 00:21:25.396 A:middle
timeline.

00:21:26.756 --> 00:21:28.026 A:middle
So, now we know our pie's

00:21:28.026 --> 00:21:29.096 A:middle
cooking at the restaurant.

00:21:29.706 --> 00:21:31.406 A:middle
And now, let's say we want the

00:21:31.406 --> 00:21:33.326 A:middle
user to be able to raise their

00:21:33.326 --> 00:21:34.896 A:middle
wrist and see as up to date of

00:21:34.896 --> 00:21:35.996 A:middle
an ETA as possible.

00:21:36.876 --> 00:21:38.406 A:middle
So, as soon as the user raises

00:21:38.406 --> 00:21:39.946 A:middle
their wrist, we will, of course,

00:21:39.946 --> 00:21:41.686 A:middle
ask for the most up-to-date ETA,

00:21:42.626 --> 00:21:44.316 A:middle
and this means that the next

00:21:44.316 --> 00:21:45.516 A:middle
time the user raises their wrist

00:21:45.516 --> 00:21:48.206 A:middle
again, we'd expect them to see

00:21:48.206 --> 00:21:49.516 A:middle
that up-to-date ETA.

00:21:52.276 --> 00:21:54.036 A:middle
Great. So, we handled our push

00:21:54.036 --> 00:21:54.846 A:middle
notification.

00:21:55.076 --> 00:21:56.336 A:middle
We now have a mechanism for

00:21:56.336 --> 00:21:59.196 A:middle
updating our ETAs, and now we

00:21:59.196 --> 00:22:00.136 A:middle
just want to send a push

00:22:00.136 --> 00:22:01.706 A:middle
notification again for when the

00:22:01.706 --> 00:22:02.596 A:middle
courier is on the way.

00:22:03.736 --> 00:22:05.536 A:middle
And, if we receive this push in

00:22:05.536 --> 00:22:07.766 A:middle
willPresent, then we're just

00:22:07.766 --> 00:22:10.146 A:middle
going to tap our user again, and

00:22:10.146 --> 00:22:11.526 A:middle
then maybe we might want to add

00:22:11.526 --> 00:22:13.416 A:middle
a map and an updated ETA showing

00:22:13.416 --> 00:22:14.666 A:middle
either where we are, or where

00:22:14.666 --> 00:22:17.596 A:middle
the courier is.

00:22:17.816 --> 00:22:19.466 A:middle
And, let's say, after we sent a

00:22:19.466 --> 00:22:21.236 A:middle
push notification for our

00:22:21.236 --> 00:22:22.706 A:middle
courier is on the way, the user

00:22:22.706 --> 00:22:24.416 A:middle
decides to maybe raise their

00:22:24.416 --> 00:22:24.746 A:middle
wrist.

00:22:25.506 --> 00:22:27.026 A:middle
So now, the user would see the

00:22:27.026 --> 00:22:28.586 A:middle
map and where their courier is,

00:22:28.646 --> 00:22:30.096 A:middle
and the app would provide a

00:22:30.096 --> 00:22:31.926 A:middle
great, glanceable experience.

00:22:32.396 --> 00:22:34.206 A:middle
And next, we can just send

00:22:34.306 --> 00:22:35.976 A:middle
another push for when our

00:22:35.976 --> 00:22:36.806 A:middle
courier is outside.

00:22:38.186 --> 00:22:40.096 A:middle
And then, if we're still in the

00:22:40.096 --> 00:22:41.766 A:middle
frontmost state, we can easily

00:22:41.766 --> 00:22:43.276 A:middle
just play another haptic like

00:22:43.276 --> 00:22:45.356 A:middle
before, and update our UI to

00:22:45.356 --> 00:22:46.416 A:middle
show that the courier is right

00:22:46.416 --> 00:22:46.906 A:middle
outside.

00:22:47.616 --> 00:22:49.836 A:middle
And, at this point, let's just

00:22:49.836 --> 00:22:50.966 A:middle
make sure to disable our

00:22:50.966 --> 00:22:52.586 A:middle
frontmost timeout extended API,

00:22:53.236 --> 00:22:55.086 A:middle
since we expect our user to be

00:22:55.086 --> 00:22:57.006 A:middle
eating apple pie now, instead of

00:22:57.376 --> 00:22:58.626 A:middle
actually just using our app.

00:22:59.576 --> 00:23:00.996 A:middle
So, let's take a look at our

00:23:00.996 --> 00:23:01.836 A:middle
overall timeline.

00:23:04.216 --> 00:23:06.296 A:middle
So, here's our whole flow, and

00:23:06.296 --> 00:23:08.046 A:middle
it all looks great, but let's

00:23:08.046 --> 00:23:09.646 A:middle
try to challenge our assumptions

00:23:09.646 --> 00:23:10.626 A:middle
as much as possible.

00:23:11.426 --> 00:23:12.726 A:middle
Now, what happens if the user

00:23:12.726 --> 00:23:14.216 A:middle
decides to go back to the watch

00:23:14.216 --> 00:23:14.566 A:middle
face?

00:23:15.746 --> 00:23:17.546 A:middle
So, we're no longer frontmost in

00:23:17.546 --> 00:23:19.936 A:middle
that case, but does that really

00:23:19.936 --> 00:23:20.826 A:middle
change anything?

00:23:21.346 --> 00:23:22.446 A:middle
Not really, right?

00:23:22.446 --> 00:23:24.066 A:middle
Let's take it through our app

00:23:24.066 --> 00:23:27.666 A:middle
code again.

00:23:27.846 --> 00:23:29.116 A:middle
So, we use the background

00:23:29.116 --> 00:23:30.796 A:middle
NSURLSession to post the order

00:23:30.796 --> 00:23:32.266 A:middle
to our server, so if, right

00:23:32.266 --> 00:23:34.016 A:middle
afterwards, the user decided to

00:23:34.016 --> 00:23:35.466 A:middle
go back to the watch face, we

00:23:35.466 --> 00:23:36.786 A:middle
know that that will continue,

00:23:36.846 --> 00:23:38.826 A:middle
and then properly post the order

00:23:38.826 --> 00:23:39.456 A:middle
to our server.

00:23:40.006 --> 00:23:41.276 A:middle
And then, we just send a push

00:23:41.276 --> 00:23:42.576 A:middle
notification for all the

00:23:42.576 --> 00:23:43.416 A:middle
different stages.

00:23:43.896 --> 00:23:45.276 A:middle
So, even if we're not frontmost,

00:23:45.316 --> 00:23:46.636 A:middle
the user just gets a regular

00:23:46.636 --> 00:23:47.366 A:middle
notification.

00:23:49.776 --> 00:23:51.696 A:middle
And so, here we are at our

00:23:51.696 --> 00:23:52.616 A:middle
overall timeline.

00:23:53.036 --> 00:23:55.636 A:middle
So, we've handled the cases when

00:23:55.636 --> 00:23:57.276 A:middle
our server wasn't working

00:23:57.276 --> 00:23:58.456 A:middle
properly with the local

00:23:58.456 --> 00:24:00.376 A:middle
notification, and we've worked

00:24:00.376 --> 00:24:01.836 A:middle
through how to use some of the

00:24:01.836 --> 00:24:03.446 A:middle
new Frontmost App State to

00:24:03.476 --> 00:24:04.926 A:middle
provide a great experience to

00:24:04.926 --> 00:24:05.466 A:middle
our user.

00:24:06.186 --> 00:24:07.556 A:middle
And, the best part about all of

00:24:07.556 --> 00:24:09.586 A:middle
this is that our app works great

00:24:09.586 --> 00:24:10.916 A:middle
with or without the Frontmost

00:24:10.916 --> 00:24:11.426 A:middle
App State.

00:24:14.886 --> 00:24:16.966 A:middle
And so, we've now gone through

00:24:16.966 --> 00:24:18.586 A:middle
the Frontmost App State, and our

00:24:18.726 --> 00:24:20.456 A:middle
Unified Process Runtime, and how

00:24:20.456 --> 00:24:21.156 A:middle
it affects our app.

00:24:21.896 --> 00:24:23.226 A:middle
So, let's just now take some

00:24:23.226 --> 00:24:24.886 A:middle
time to revisit Background App

00:24:24.886 --> 00:24:26.596 A:middle
Refresh, which was introduced

00:24:26.596 --> 00:24:27.996 A:middle
last year, and see what

00:24:27.996 --> 00:24:29.556 A:middle
improvements we've added, and

00:24:29.556 --> 00:24:30.886 A:middle
how we can apply it to Apple Pie

00:24:30.886 --> 00:24:31.006 A:middle
Me.

00:24:32.276 --> 00:24:33.106 A:middle
So, let's just go through a

00:24:33.106 --> 00:24:33.856 A:middle
brief overview.

00:24:34.946 --> 00:24:37.456 A:middle
So, in watchOS, the system wakes

00:24:37.456 --> 00:24:39.006 A:middle
your application by handing it a

00:24:39.756 --> 00:24:40.846 A:middle
task, and the system has a

00:24:40.846 --> 00:24:43.286 A:middle
limited number of these to hand

00:24:43.286 --> 00:24:44.576 A:middle
out, so just make sure to make

00:24:44.576 --> 00:24:45.646 A:middle
the best use of each one you

00:24:45.646 --> 00:24:45.936 A:middle
get.

00:24:47.456 --> 00:24:48.956 A:middle
And, when the system wants to

00:24:48.956 --> 00:24:51.206 A:middle
wake your app, it gives you one

00:24:51.206 --> 00:24:53.146 A:middle
or more of these tasks, and then

00:24:53.146 --> 00:24:54.546 A:middle
you can do any work you'd like

00:24:54.546 --> 00:24:55.886 A:middle
in the background, and you just

00:24:55.886 --> 00:24:57.146 A:middle
make sure to hold this task for

00:24:57.146 --> 00:24:58.196 A:middle
as long as you're doing work.

00:24:58.636 --> 00:25:01.116 A:middle
And, the way in which the system

00:25:01.116 --> 00:25:02.516 A:middle
will deliver these tasks to you

00:25:02.986 --> 00:25:04.716 A:middle
is when you implement your

00:25:04.936 --> 00:25:06.996 A:middle
handle background tasks callback

00:25:07.286 --> 00:25:08.966 A:middle
on your WKExtension delegate.

00:25:14.476 --> 00:25:15.726 A:middle
And so, when you finish your

00:25:15.726 --> 00:25:17.926 A:middle
background work, you just return

00:25:17.926 --> 00:25:19.506 A:middle
the task to the system by

00:25:19.506 --> 00:25:20.946 A:middle
calling setTaskCompleted.

00:25:22.176 --> 00:25:23.916 A:middle
So, we've changed a little bit

00:25:23.916 --> 00:25:26.026 A:middle
of the API, so let's walk

00:25:26.026 --> 00:25:27.106 A:middle
through that now, now that we

00:25:27.106 --> 00:25:28.156 A:middle
have a good, conceptual

00:25:28.156 --> 00:25:28.536 A:middle
overview.

00:25:31.336 --> 00:25:33.296 A:middle
So, before, we would implement

00:25:33.296 --> 00:25:35.046 A:middle
our handle background tasks, and

00:25:35.046 --> 00:25:36.446 A:middle
then we would switch case on all

00:25:36.446 --> 00:25:37.356 A:middle
of the different tasks.

00:25:37.806 --> 00:25:39.786 A:middle
So, in this example, we have a

00:25:39.786 --> 00:25:41.246 A:middle
WKApplicationRefresh

00:25:41.246 --> 00:25:44.466 A:middle
BackgroundTask, and then, let's

00:25:44.466 --> 00:25:45.426 A:middle
say we perform whatever

00:25:45.426 --> 00:25:46.806 A:middle
functions we need to, to get our

00:25:46.806 --> 00:25:48.546 A:middle
app up to date, and then we just

00:25:48.546 --> 00:25:49.726 A:middle
want to schedule a snapshot.

00:25:50.776 --> 00:25:51.456 A:middle
And so, we use the

00:25:51.456 --> 00:25:54.036 A:middle
scheduleSnapshotRefresh, and we

00:25:54.586 --> 00:25:55.536 A:middle
use a preferred date.

00:25:55.726 --> 00:25:56.966 A:middle
And then, we just call

00:25:56.966 --> 00:25:58.036 A:middle
setTaskCompleted.

00:25:58.736 --> 00:26:00.316 A:middle
And, the important thing here

00:26:00.746 --> 00:26:02.226 A:middle
that was a little tricky was, it

00:26:02.226 --> 00:26:03.616 A:middle
was really important to call

00:26:03.616 --> 00:26:05.646 A:middle
setTaskCompleted after you

00:26:05.646 --> 00:26:06.936 A:middle
actually scheduled a snapshot

00:26:06.936 --> 00:26:08.876 A:middle
refresh, because if you called

00:26:08.876 --> 00:26:10.846 A:middle
it before, then, like I

00:26:10.846 --> 00:26:12.506 A:middle
mentioned, you're actually, by

00:26:12.506 --> 00:26:14.306 A:middle
calling setTaskCompleted, you're

00:26:14.306 --> 00:26:15.766 A:middle
returning the task to the

00:26:15.766 --> 00:26:17.736 A:middle
system, and no snapshot would

00:26:17.736 --> 00:26:18.576 A:middle
then be scheduled.

00:26:18.576 --> 00:26:20.826 A:middle
So, this was a little bit

00:26:20.826 --> 00:26:22.776 A:middle
cumbersome, and not the best

00:26:22.776 --> 00:26:23.436 A:middle
experience.

00:26:24.776 --> 00:26:26.756 A:middle
So now, all you have to do is

00:26:26.756 --> 00:26:27.886 A:middle
just call a new function that

00:26:27.886 --> 00:26:27.976 A:middle
says

00:26:28.136 --> 00:26:29.956 A:middle
setTaskCompletedWithSnapshot,

00:26:30.246 --> 00:26:31.746 A:middle
and you set it to be true when

00:26:31.746 --> 00:26:33.286 A:middle
you want that snapshot, and set

00:26:33.286 --> 00:26:34.446 A:middle
it to be false when you don't.

00:26:35.876 --> 00:26:37.486 A:middle
And so, for all tasks, the

00:26:37.486 --> 00:26:39.296 A:middle
default is just to take a

00:26:39.296 --> 00:26:40.506 A:middle
snapshot immediately.

00:26:41.256 --> 00:26:43.696 A:middle
However, for snapshot, just make

00:26:43.696 --> 00:26:45.246 A:middle
sure to remember that there's a

00:26:45.246 --> 00:26:47.326 A:middle
special call to setTaskCompleted

00:26:47.696 --> 00:26:48.446 A:middle
with a snapshot.

00:26:48.846 --> 00:26:51.906 A:middle
So, let's take a look at that.

00:26:52.086 --> 00:26:54.246 A:middle
So, here it is, again, we're

00:26:54.246 --> 00:26:55.196 A:middle
implementing our handle

00:26:55.196 --> 00:26:56.606 A:middle
background task, and this time,

00:26:56.956 --> 00:26:57.606 A:middle
we just have a

00:26:57.606 --> 00:26:59.676 A:middle
WKSnapshotRefreshBackgroundTask,

00:27:00.316 --> 00:27:01.256 A:middle
so we're just going to call

00:27:01.256 --> 00:27:02.966 A:middle
setTaskCompleted with a restored

00:27:02.966 --> 00:27:04.456 A:middle
default state, and then our

00:27:04.456 --> 00:27:06.096 A:middle
estimatedSnapshotExpiration.

00:27:07.376 --> 00:27:09.316 A:middle
So, this is really great, and

00:27:09.316 --> 00:27:10.956 A:middle
it's very simple to use, but I

00:27:10.956 --> 00:27:12.316 A:middle
actually want to point out one

00:27:12.316 --> 00:27:14.246 A:middle
cool trick.

00:27:14.426 --> 00:27:16.046 A:middle
So now, you can actually use

00:27:16.046 --> 00:27:17.926 A:middle
setTaskCompletedWithSnapshot on

00:27:17.926 --> 00:27:19.086 A:middle
your snapshotTask.

00:27:19.526 --> 00:27:22.036 A:middle
So, what that does is it will,

00:27:22.036 --> 00:27:23.126 A:middle
of course, take a snapshot

00:27:23.126 --> 00:27:25.206 A:middle
immediately, and then it'll

00:27:25.206 --> 00:27:26.976 A:middle
actually schedule a snapshot an

00:27:27.106 --> 00:27:28.506 A:middle
hour from now, if you set it to

00:27:28.506 --> 00:27:29.006 A:middle
be true.

00:27:29.806 --> 00:27:31.556 A:middle
So, essentially what this means,

00:27:31.886 --> 00:27:33.246 A:middle
if you just keep calling

00:27:33.246 --> 00:27:35.146 A:middle
setTaskCompletedWithSnapshot as

00:27:35.146 --> 00:27:36.776 A:middle
true, you're going to set up a

00:27:36.776 --> 00:27:38.366 A:middle
one-hour cadence, and it's

00:27:38.366 --> 00:27:39.906 A:middle
really easy to constantly make

00:27:39.906 --> 00:27:41.806 A:middle
sure that your app is up to date

00:27:41.806 --> 00:27:42.536 A:middle
every hour.

00:27:43.976 --> 00:27:46.076 A:middle
And, if you want more custom

00:27:46.076 --> 00:27:48.346 A:middle
data behavior, for example, then

00:27:48.346 --> 00:27:49.486 A:middle
just make sure to call

00:27:49.486 --> 00:27:51.216 A:middle
setTaskCompletedWithSnapshot

00:27:51.216 --> 00:27:54.526 A:middle
false after scheduling your

00:27:54.636 --> 00:27:56.366 A:middle
snapshot refresh, because if you

00:27:56.366 --> 00:27:58.166 A:middle
call it with true in this case,

00:27:58.166 --> 00:27:58.956 A:middle
then we're actually going to

00:27:58.956 --> 00:28:00.746 A:middle
replace your previously

00:28:00.746 --> 00:28:02.176 A:middle
scheduled snapshot, and just

00:28:02.176 --> 00:28:03.546 A:middle
replace it with one an hour from

00:28:03.546 --> 00:28:03.776 A:middle
now.

00:28:04.186 --> 00:28:05.356 A:middle
So, if you do want that custom

00:28:05.356 --> 00:28:06.966 A:middle
behavior, just make sure to set

00:28:06.966 --> 00:28:07.596 A:middle
it to be false.

00:28:10.696 --> 00:28:12.766 A:middle
So, another important thing for

00:28:12.766 --> 00:28:14.286 A:middle
our handle background tasks is

00:28:14.736 --> 00:28:16.586 A:middle
how we actually update our

00:28:16.586 --> 00:28:17.476 A:middle
complications.

00:28:17.906 --> 00:28:19.996 A:middle
So, in watchOS 3, we actually

00:28:19.996 --> 00:28:21.526 A:middle
soft deprecated on our

00:28:21.526 --> 00:28:24.576 A:middle
CLKComplicationDataSource, our

00:28:24.576 --> 00:28:26.976 A:middle
getNextRequestedUpdateDate, our

00:28:26.976 --> 00:28:29.406 A:middle
requestedUpdateDidBegin, and our

00:28:29.406 --> 00:28:31.336 A:middle
requestedUpdateBudgetExhausted.

00:28:31.896 --> 00:28:34.706 A:middle
So now, in watchOS 3, I should

00:28:34.706 --> 00:28:37.086 A:middle
say, if you implemented handle

00:28:37.086 --> 00:28:38.516 A:middle
background tasks, these just

00:28:38.516 --> 00:28:40.116 A:middle
wouldn't get called into, and

00:28:40.116 --> 00:28:41.076 A:middle
now they're just fully

00:28:41.076 --> 00:28:42.236 A:middle
deprecated, so they won't get

00:28:42.236 --> 00:28:43.026 A:middle
called into at all.

00:28:44.456 --> 00:28:46.226 A:middle
So, if you want to update your

00:28:46.226 --> 00:28:48.236 A:middle
complications, again, just make

00:28:48.236 --> 00:28:49.736 A:middle
sure to handle background tasks,

00:28:50.306 --> 00:28:51.076 A:middle
and then just call

00:28:51.076 --> 00:28:53.636 A:middle
scheduleBackgroundRefresh with

00:28:53.686 --> 00:28:54.966 A:middle
whatever date you want to update

00:28:54.966 --> 00:28:55.856 A:middle
your complication.

00:28:57.056 --> 00:28:58.816 A:middle
And so, last year, a lot of

00:28:58.816 --> 00:29:00.236 A:middle
times complications can be tied

00:29:00.236 --> 00:29:01.676 A:middle
to some sort of networking task,

00:29:01.906 --> 00:29:05.106 A:middle
and so last year, we guided you

00:29:05.106 --> 00:29:09.416 A:middle
all to essentially, basically

00:29:09.416 --> 00:29:10.896 A:middle
just schedule a background

00:29:10.896 --> 00:29:13.586 A:middle
refresh, and then that way you

00:29:13.586 --> 00:29:15.046 A:middle
would schedule it maybe for,

00:29:15.626 --> 00:29:17.266 A:middle
let's say, 15 minutes from now,

00:29:17.266 --> 00:29:18.466 A:middle
if you wanted a complication

00:29:18.466 --> 00:29:19.826 A:middle
update by 7:45.

00:29:20.416 --> 00:29:21.146 A:middle
So, essentially you would

00:29:21.146 --> 00:29:22.086 A:middle
schedule that background

00:29:22.086 --> 00:29:24.046 A:middle
refresh, and then you would get

00:29:24.046 --> 00:29:26.756 A:middle
woken up around 7:30 to get that

00:29:26.756 --> 00:29:28.686 A:middle
NSURLSession, and then you could

00:29:28.756 --> 00:29:31.696 A:middle
trigger that, and then by 7:45,

00:29:31.696 --> 00:29:33.246 A:middle
you would have enough time to

00:29:33.246 --> 00:29:34.406 A:middle
update your complication.

00:29:38.216 --> 00:29:40.296 A:middle
But now, with some new

00:29:40.386 --> 00:29:42.036 A:middle
NSURLSession APIs, we can

00:29:42.036 --> 00:29:43.296 A:middle
actually just reduce a step

00:29:43.296 --> 00:29:45.006 A:middle
here, and the reason we had

00:29:45.006 --> 00:29:46.246 A:middle
these steps was really because

00:29:46.646 --> 00:29:48.086 A:middle
we wanted to ensure we gave

00:29:48.086 --> 00:29:49.786 A:middle
enough background running time

00:29:49.786 --> 00:29:51.136 A:middle
to our NSURLSession.

00:29:51.656 --> 00:29:53.856 A:middle
But now, with some new API in

00:29:53.856 --> 00:29:55.876 A:middle
URLSessionTask, we can actually

00:29:55.876 --> 00:29:56.966 A:middle
just set an earliest begin date.

00:29:57.046 --> 00:29:59.456 A:middle
So, when we actually call the

00:29:59.456 --> 00:30:02.066 A:middle
download task, we can actually

00:30:02.066 --> 00:30:03.866 A:middle
just set on that task our

00:30:03.866 --> 00:30:06.146 A:middle
variable, earliestBeginDate, so

00:30:06.146 --> 00:30:07.166 A:middle
that way, we're telling the

00:30:07.166 --> 00:30:08.856 A:middle
system, "Hey, we don't need this

00:30:08.856 --> 00:30:10.346 A:middle
right now, we just need this at

00:30:10.676 --> 00:30:12.076 A:middle
whenever date we've specified."

00:30:12.596 --> 00:30:16.776 A:middle
And so now, we can actually just

00:30:16.936 --> 00:30:17.796 A:middle
reduce that step.

00:30:18.216 --> 00:30:19.556 A:middle
So, here in our schedule

00:30:19.556 --> 00:30:21.296 A:middle
background refresh, we probably

00:30:21.296 --> 00:30:23.236 A:middle
also just want to kick off our

00:30:23.286 --> 00:30:25.096 A:middle
URLSession task, and set it up

00:30:25.096 --> 00:30:26.586 A:middle
with the earliest begin date,

00:30:26.746 --> 00:30:28.896 A:middle
and so that way the system, on

00:30:28.896 --> 00:30:30.286 A:middle
our behalf, will actually just

00:30:30.286 --> 00:30:32.786 A:middle
trigger that NSURLSession around

00:30:32.786 --> 00:30:35.036 A:middle
7:30 p.m., and then when that

00:30:35.036 --> 00:30:37.626 A:middle
resume comes back, we can update

00:30:37.626 --> 00:30:39.626 A:middle
our complication at 7:45 p.m.

00:30:42.356 --> 00:30:44.646 A:middle
So now, let's talk about how we

00:30:44.646 --> 00:30:46.186 A:middle
can actually incorporate some of

00:30:46.186 --> 00:30:47.496 A:middle
the Background App Refresh

00:30:47.846 --> 00:30:50.556 A:middle
things we just talked about into

00:30:50.556 --> 00:30:53.386 A:middle
our app, Apple Pie Me.

00:30:53.626 --> 00:30:55.866 A:middle
So, here's that timeline we

00:30:55.866 --> 00:30:56.586 A:middle
looked at earlier.

00:30:57.206 --> 00:30:58.696 A:middle
So now, let's just focus in on

00:30:58.696 --> 00:31:00.176 A:middle
the Pie's Cooking notification.

00:31:00.526 --> 00:31:03.226 A:middle
So, if you remember, the code,

00:31:03.366 --> 00:31:04.406 A:middle
before, it looked a lot like

00:31:04.406 --> 00:31:04.796 A:middle
this.

00:31:04.796 --> 00:31:06.526 A:middle
We implemented

00:31:06.526 --> 00:31:08.116 A:middle
userNotificationCenter,

00:31:08.116 --> 00:31:09.716 A:middle
willPresent notification with

00:31:09.716 --> 00:31:12.026 A:middle
CompletionHandler, and then we

00:31:12.026 --> 00:31:13.576 A:middle
just cancelled those fallback

00:31:13.576 --> 00:31:14.776 A:middle
local notifications.

00:31:15.306 --> 00:31:16.496 A:middle
We updated our UI.

00:31:16.936 --> 00:31:18.376 A:middle
We then played a haptic, and

00:31:18.376 --> 00:31:19.586 A:middle
called our completionHandler.

00:31:20.166 --> 00:31:21.396 A:middle
And now, the great thing is,

00:31:21.396 --> 00:31:22.186 A:middle
once you call that

00:31:22.186 --> 00:31:23.846 A:middle
completionHandler, your app will

00:31:23.846 --> 00:31:26.306 A:middle
get suspended, and you will get

00:31:26.306 --> 00:31:28.056 A:middle
called into via handle

00:31:28.056 --> 00:31:29.816 A:middle
background tasks with a snapshot

00:31:29.816 --> 00:31:31.566 A:middle
task, and then your reason for

00:31:31.566 --> 00:31:33.116 A:middle
that snapshot would be app

00:31:33.116 --> 00:31:33.756 A:middle
backgrounded.

00:31:35.296 --> 00:31:37.416 A:middle
So now, when you have an ETA you

00:31:37.456 --> 00:31:39.186 A:middle
can share, you can just make

00:31:39.186 --> 00:31:41.146 A:middle
sure your snapshot looks as up

00:31:41.146 --> 00:31:42.606 A:middle
to date as possible in the doc.

00:31:43.096 --> 00:31:45.336 A:middle
And then, another thing I wanted

00:31:45.336 --> 00:31:47.606 A:middle
to point out from before was, if

00:31:47.606 --> 00:31:49.206 A:middle
you remember, we actually used,

00:31:49.406 --> 00:31:50.316 A:middle
when the user raised their

00:31:50.316 --> 00:31:52.086 A:middle
wrist, we then kicked off an

00:31:52.086 --> 00:31:54.336 A:middle
NSURLSession to then grab the

00:31:54.336 --> 00:31:55.746 A:middle
most up-to-date ETA.

00:31:55.746 --> 00:31:57.616 A:middle
And so now, with that new API we

00:31:57.616 --> 00:31:58.946 A:middle
just talked about on our

00:31:58.946 --> 00:32:01.266 A:middle
URLSessionTask, we can actually

00:32:01.266 --> 00:32:03.516 A:middle
just even schedule an ETA for

00:32:03.516 --> 00:32:04.416 A:middle
some time from now.

00:32:05.006 --> 00:32:06.316 A:middle
So, let's say, for example,

00:32:07.156 --> 00:32:08.716 A:middle
maybe our pie's coming in 12

00:32:08.716 --> 00:32:09.916 A:middle
minutes, and we just want to

00:32:09.916 --> 00:32:11.956 A:middle
schedule an ETA, like a refresh,

00:32:12.366 --> 00:32:14.486 A:middle
around, let's say, like, eight

00:32:14.486 --> 00:32:15.736 A:middle
minutes from now, for example.

00:32:18.556 --> 00:32:20.296 A:middle
So, let's think about our

00:32:20.296 --> 00:32:21.946 A:middle
overall timeline once again.

00:32:22.246 --> 00:32:23.616 A:middle
This was a really simple app,

00:32:23.616 --> 00:32:24.016 A:middle
actually.

00:32:24.016 --> 00:32:26.176 A:middle
It was just, we had an Order

00:32:26.176 --> 00:32:28.126 A:middle
button, and then we were able to

00:32:28.126 --> 00:32:28.616 A:middle
eat pie.

00:32:29.186 --> 00:32:30.906 A:middle
And then, but, it was actually

00:32:30.986 --> 00:32:33.946 A:middle
really powerful under the

00:32:33.946 --> 00:32:37.946 A:middle
surface in our app code, and so

00:32:37.946 --> 00:32:40.106 A:middle
we were able to take advantage

00:32:40.106 --> 00:32:43.226 A:middle
of our NSURLSession resumes, our

00:32:43.226 --> 00:32:45.496 A:middle
haptics in conjunction with our

00:32:45.736 --> 00:32:47.206 A:middle
frontmost notifications.

00:32:47.596 --> 00:32:49.966 A:middle
We're also taking advantage of

00:32:49.966 --> 00:32:51.846 A:middle
our Background App Refresh, as

00:32:51.846 --> 00:32:53.516 A:middle
well as we were able to schedule

00:32:53.646 --> 00:32:55.866 A:middle
NSURLSession ETA requests.

00:32:56.686 --> 00:32:58.546 A:middle
So, creating a great watch app

00:32:58.736 --> 00:33:00.236 A:middle
that delivered you apple pies

00:33:00.536 --> 00:33:02.276 A:middle
was certainly possible before,

00:33:02.616 --> 00:33:05.376 A:middle
but now with watchOS 4, you can

00:33:05.376 --> 00:33:07.776 A:middle
take a huge leap forward and wow

00:33:07.776 --> 00:33:08.496 A:middle
your users.

00:33:09.856 --> 00:33:12.236 A:middle
So now, let's dive into some of

00:33:12.236 --> 00:33:13.326 A:middle
our new background modes.

00:33:14.586 --> 00:33:17.086 A:middle
So, in watchOS 3, we introduced

00:33:17.086 --> 00:33:19.096 A:middle
our workout session as a

00:33:19.096 --> 00:33:21.246 A:middle
background mode, and now we

00:33:21.246 --> 00:33:22.686 A:middle
actually have audio recording

00:33:22.686 --> 00:33:24.966 A:middle
sessions, and then we also have

00:33:24.966 --> 00:33:26.126 A:middle
navigation sessions.

00:33:26.816 --> 00:33:28.036 A:middle
So, let's dive right into our

00:33:28.036 --> 00:33:29.626 A:middle
audio recording session.

00:33:30.706 --> 00:33:32.476 A:middle
So, in watchOS 3, you could

00:33:32.476 --> 00:33:34.516 A:middle
record audio, but it would,

00:33:34.516 --> 00:33:35.816 A:middle
essentially the API would

00:33:36.116 --> 00:33:38.576 A:middle
present a modal presentation

00:33:38.946 --> 00:33:40.606 A:middle
that would show our UI, and then

00:33:40.606 --> 00:33:42.586 A:middle
the user could then stop the

00:33:42.586 --> 00:33:44.176 A:middle
recording, and then that file

00:33:44.176 --> 00:33:45.496 A:middle
would get delivered to you all,

00:33:45.496 --> 00:33:46.116 A:middle
the developer.

00:33:47.376 --> 00:33:49.306 A:middle
However, now you can actually

00:33:49.306 --> 00:33:51.406 A:middle
just use your own UI, so you can

00:33:51.406 --> 00:33:52.766 A:middle
build the exact recording

00:33:52.766 --> 00:33:54.876 A:middle
experience you want in watchOS4.

00:33:55.866 --> 00:33:57.426 A:middle
And, the important thing is, now

00:33:57.426 --> 00:33:58.756 A:middle
it can be background running

00:33:59.246 --> 00:34:00.356 A:middle
but, of course, it's foreground

00:34:00.356 --> 00:34:01.756 A:middle
initiated and background

00:34:01.756 --> 00:34:03.166 A:middle
running, just like our workouts.

00:34:03.646 --> 00:34:06.826 A:middle
And then, your app will stay

00:34:06.826 --> 00:34:09.926 A:middle
frontmost while it's recording,

00:34:10.336 --> 00:34:12.686 A:middle
and what's great about that is,

00:34:12.686 --> 00:34:13.786 A:middle
you actually have the ability to

00:34:13.786 --> 00:34:14.676 A:middle
play haptics.

00:34:15.086 --> 00:34:16.306 A:middle
So, let's say, for example,

00:34:16.306 --> 00:34:18.026 A:middle
you're an app that wants to

00:34:18.026 --> 00:34:19.266 A:middle
detect what sort of song is

00:34:19.266 --> 00:34:20.266 A:middle
playing around you.

00:34:20.266 --> 00:34:22.306 A:middle
You could easily just press the

00:34:22.306 --> 00:34:23.146 A:middle
Record button.

00:34:23.606 --> 00:34:24.656 A:middle
The user would put their wrist

00:34:24.656 --> 00:34:25.126 A:middle
down.

00:34:25.126 --> 00:34:26.426 A:middle
You could detect what's playing,

00:34:26.786 --> 00:34:27.836 A:middle
and then you could easily tap

00:34:27.836 --> 00:34:29.046 A:middle
your user, so they know that,

00:34:29.046 --> 00:34:30.256 A:middle
hey, you detected what song it

00:34:30.256 --> 00:34:32.246 A:middle
was, and then you could show

00:34:32.246 --> 00:34:33.076 A:middle
that to your user.

00:34:33.536 --> 00:34:36.676 A:middle
And then, what's also great is

00:34:36.676 --> 00:34:38.386 A:middle
that, just like workout

00:34:38.386 --> 00:34:39.566 A:middle
sessions, it's a background

00:34:39.566 --> 00:34:42.246 A:middle
running mode, but the heart rate

00:34:42.246 --> 00:34:43.406 A:middle
sensor is not going to be on, so

00:34:43.406 --> 00:34:44.696 A:middle
there's actually less battery

00:34:44.696 --> 00:34:47.646 A:middle
life impact because of this.

00:34:47.836 --> 00:34:49.036 A:middle
And, another thing I wanted to

00:34:49.036 --> 00:34:51.946 A:middle
mention is, if for some reason

00:34:51.946 --> 00:34:53.516 A:middle
the user decides to go back to

00:34:53.516 --> 00:34:54.696 A:middle
the watch face, for instance,

00:34:55.016 --> 00:34:55.966 A:middle
we're going to show that

00:34:56.306 --> 00:34:58.456 A:middle
Microphone icon at the very top,

00:34:58.456 --> 00:34:59.886 A:middle
so that way the user knows that

00:34:59.886 --> 00:35:01.516 A:middle
something's recording, and then

00:35:01.616 --> 00:35:03.326 A:middle
they can also tap on that icon

00:35:03.546 --> 00:35:04.706 A:middle
and get launched right back to

00:35:04.706 --> 00:35:04.976 A:middle
the app.

00:35:08.576 --> 00:35:12.446 A:middle
So, for playback, in watchOS3.1,

00:35:12.446 --> 00:35:14.726 A:middle
we introduced AVAudioPlayer, and

00:35:14.726 --> 00:35:17.306 A:middle
so now, for recording, all you

00:35:17.306 --> 00:35:19.236 A:middle
need to use is AVAudioInputNode

00:35:19.236 --> 00:35:21.086 A:middle
via AVAudioEngine, or

00:35:21.086 --> 00:35:23.796 A:middle
AVAudioRecorder, and then our

00:35:23.796 --> 00:35:25.226 A:middle
AVAudio recording for

00:35:25.226 --> 00:35:25.806 A:middle
permissions.

00:35:27.006 --> 00:35:28.146 A:middle
And, there's a whole bunch of

00:35:28.146 --> 00:35:29.566 A:middle
formats that are now supported.

00:35:30.526 --> 00:35:33.076 A:middle
And so, let's talk about some of

00:35:33.076 --> 00:35:36.516 A:middle
our locations background mode.

00:35:36.686 --> 00:35:38.416 A:middle
So, just like audio recording

00:35:38.486 --> 00:35:40.286 A:middle
and our workout sessions, it's

00:35:40.286 --> 00:35:41.936 A:middle
foreground initiated, and then

00:35:41.936 --> 00:35:42.816 A:middle
just background running.

00:35:44.246 --> 00:35:45.346 A:middle
And, of course, you're going to

00:35:45.346 --> 00:35:46.876 A:middle
be frontmost while in session.

00:35:49.006 --> 00:35:50.776 A:middle
So, one thing to note is, you

00:35:50.776 --> 00:35:53.366 A:middle
must call startUpdatingLocation

00:35:53.366 --> 00:35:54.166 A:middle
while your app is in the

00:35:54.166 --> 00:35:56.496 A:middle
foreground, and you should also

00:35:56.496 --> 00:35:57.606 A:middle
just make sure to set

00:35:57.606 --> 00:35:59.796 A:middle
allowsBackgroundLocationUpdates

00:35:59.796 --> 00:36:01.596 A:middle
to true only when the navigation

00:36:01.596 --> 00:36:03.206 A:middle
session has actually begun, and

00:36:03.206 --> 00:36:04.406 A:middle
then set it to be false when

00:36:04.406 --> 00:36:06.876 A:middle
it's not.

00:36:07.096 --> 00:36:09.126 A:middle
So, if you recall, for Apple Pie

00:36:09.126 --> 00:36:11.076 A:middle
Me app, we actually had two

00:36:11.076 --> 00:36:11.756 A:middle
users.

00:36:12.076 --> 00:36:13.586 A:middle
We had myself, the person that

00:36:13.586 --> 00:36:15.246 A:middle
was about to eat that awesome

00:36:15.246 --> 00:36:17.056 A:middle
apple pie, and then we actually

00:36:17.056 --> 00:36:18.256 A:middle
had a courier that was going to

00:36:18.256 --> 00:36:19.076 A:middle
bring it to us.

00:36:19.556 --> 00:36:20.636 A:middle
So, in this case, we might

00:36:20.636 --> 00:36:22.286 A:middle
actually just want to build a

00:36:22.286 --> 00:36:24.036 A:middle
companion driver app for that

00:36:24.576 --> 00:36:26.126 A:middle
driver, so that way they can

00:36:26.126 --> 00:36:27.486 A:middle
easily be navigated on their

00:36:27.486 --> 00:36:29.236 A:middle
wrist to our destination.

00:36:29.736 --> 00:36:31.906 A:middle
And, the great thing is, you can

00:36:31.906 --> 00:36:33.076 A:middle
even play haptics while in

00:36:33.076 --> 00:36:36.496 A:middle
session, so now if, for example,

00:36:36.496 --> 00:36:38.556 A:middle
for a right turn or a left turn,

00:36:38.556 --> 00:36:39.316 A:middle
you could play a different

00:36:39.316 --> 00:36:41.566 A:middle
haptic, or maybe when a user has

00:36:41.776 --> 00:36:43.156 A:middle
missed a turn, for example.

00:36:43.586 --> 00:36:44.836 A:middle
And, I'm really excited about

00:36:44.836 --> 00:36:46.726 A:middle
this one, because, like, for

00:36:46.726 --> 00:36:49.036 A:middle
example, transit apps that, you

00:36:49.036 --> 00:36:51.246 A:middle
could imagine, you want to, just

00:36:51.246 --> 00:36:52.126 A:middle
right before the stop you're

00:36:52.126 --> 00:36:53.946 A:middle
about to get off at, the user

00:36:53.946 --> 00:36:56.056 A:middle
could be easily tapped, and then

00:36:56.056 --> 00:36:57.046 A:middle
they could know, oh, I need to

00:36:57.046 --> 00:36:58.906 A:middle
go to the doors, and so I can

00:36:58.906 --> 00:37:03.216 A:middle
get off at the next stop.

00:37:03.426 --> 00:37:05.636 A:middle
So, we're really excited about

00:37:05.636 --> 00:37:07.616 A:middle
our new Unified Process Runtime,

00:37:07.836 --> 00:37:09.006 A:middle
our new enhancements to

00:37:09.006 --> 00:37:10.936 A:middle
Background App Refresh, and our

00:37:10.936 --> 00:37:12.606 A:middle
new background modes, and I

00:37:12.606 --> 00:37:14.266 A:middle
especially am really excited

00:37:14.266 --> 00:37:15.916 A:middle
about the new Frontmost App

00:37:15.916 --> 00:37:16.276 A:middle
State.

00:37:16.976 --> 00:37:18.276 A:middle
And, we think the design

00:37:18.276 --> 00:37:19.556 A:middle
landscape will change in a

00:37:19.556 --> 00:37:21.466 A:middle
really unique way on watchOS.

00:37:25.136 --> 00:37:27.366 A:middle
So, I challenge you all to

00:37:27.366 --> 00:37:28.756 A:middle
design apps for the new

00:37:28.756 --> 00:37:29.776 A:middle
Frontmost App State.

00:37:30.886 --> 00:37:31.996 A:middle
Think through the enhanced

00:37:31.996 --> 00:37:33.496 A:middle
capabilities, and design

00:37:33.496 --> 00:37:34.626 A:middle
experiences where the

00:37:34.626 --> 00:37:36.396 A:middle
interactions are just two

00:37:36.396 --> 00:37:37.036 A:middle
seconds.

00:37:37.676 --> 00:37:39.486 A:middle
And so, we went through how to

00:37:39.486 --> 00:37:42.536 A:middle
use NSURLSession, haptics, and

00:37:42.536 --> 00:37:44.666 A:middle
frontmost notifications, but

00:37:44.666 --> 00:37:45.816 A:middle
that only really scratches the

00:37:45.816 --> 00:37:46.386 A:middle
surface.

00:37:46.816 --> 00:37:48.146 A:middle
With the enhancements to watch

00:37:48.146 --> 00:37:49.606 A:middle
connectivity and task

00:37:49.606 --> 00:37:51.286 A:middle
completions, you could design

00:37:51.316 --> 00:37:53.196 A:middle
even more powerful interactions

00:37:53.496 --> 00:37:54.886 A:middle
that are incredibly simple to

00:37:54.886 --> 00:37:55.326 A:middle
use.

00:37:55.916 --> 00:37:57.206 A:middle
And so, I'm really excited to

00:37:57.206 --> 00:37:58.676 A:middle
see how you all take advantage

00:37:58.676 --> 00:37:59.866 A:middle
of these new capabilities.

00:38:00.806 --> 00:38:02.206 A:middle
So, if you want more information

00:38:02.206 --> 00:38:03.406 A:middle
about this session or any other

00:38:03.406 --> 00:38:05.066 A:middle
session, feel free to go to

00:38:05.066 --> 00:38:07.996 A:middle
developer.apple.com, and then we

00:38:07.996 --> 00:38:08.846 A:middle
have some great related

00:38:08.846 --> 00:38:09.426 A:middle
sessions.

00:38:09.426 --> 00:38:10.746 A:middle
There's a great one tomorrow for

00:38:10.746 --> 00:38:12.076 A:middle
planning a great Apple Watch

00:38:12.076 --> 00:38:12.786 A:middle
experience.

00:38:13.056 --> 00:38:14.336 A:middle
I highly recommend checking it

00:38:14.336 --> 00:38:14.586 A:middle
out.

00:38:14.586 --> 00:38:16.036 A:middle
I'm super excited for that one.

00:38:16.416 --> 00:38:18.336 A:middle
And, I hope you all have a great

00:38:18.336 --> 00:38:18.976 A:middle
WWDC.

00:38:19.256 --> 00:38:19.646 A:middle
Thank you.

00:38:20.516 --> 00:38:23.500 A:middle
[ Applause ]