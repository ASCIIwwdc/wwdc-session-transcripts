WEBVTT

00:00:21.156 --> 00:00:21.716 A:middle
&gt;&gt; Hello and.

00:00:22.516 --> 00:00:27.646 A:middle
[ Applause ]

00:00:28.146 --> 00:00:29.176 A:middle
Welcome to what's new in Core

00:00:29.176 --> 00:00:29.686 A:middle
Spotlight.

00:00:30.316 --> 00:00:31.846 A:middle
I'm John Hornkvist, Senior

00:00:31.846 --> 00:00:33.516 A:middle
Manager for Core Spotlight and

00:00:33.516 --> 00:00:34.556 A:middle
joining me today will be my

00:00:34.556 --> 00:00:35.526 A:middle
colleague Lyn Fong.

00:00:36.876 --> 00:00:38.306 A:middle
Today, we'll cover some new

00:00:38.306 --> 00:00:41.186 A:middle
APIs, Core Spotlight on macOS,

00:00:43.176 --> 00:00:45.936 A:middle
Drag-and-Drop, Quick Look

00:00:45.936 --> 00:00:48.376 A:middle
previews, and then we'll give an

00:00:48.376 --> 00:00:50.586 A:middle
update on ranking before

00:00:50.586 --> 00:00:51.996 A:middle
finishing with a review of

00:00:51.996 --> 00:00:53.616 A:middle
indexing and search.

00:00:54.976 --> 00:00:56.986 A:middle
So, let's jump right into macOS.

00:00:57.846 --> 00:00:59.946 A:middle
Core Spotlight on macOS is the

00:00:59.946 --> 00:01:02.606 A:middle
exact same API as in iOS so it's

00:01:02.606 --> 00:01:04.826 A:middle
great for cross-platform apps.

00:01:05.376 --> 00:01:07.086 A:middle
It's already used by Notes and

00:01:07.086 --> 00:01:08.606 A:middle
Safari and because it's

00:01:08.606 --> 00:01:10.366 A:middle
cross-platform CoreData

00:01:10.486 --> 00:01:11.666 A:middle
Spotlight support has been

00:01:11.666 --> 00:01:12.736 A:middle
reimplemented using Core

00:01:12.736 --> 00:01:14.676 A:middle
Spotlight and is now available

00:01:14.676 --> 00:01:16.556 A:middle
for both iOS and macOS.

00:01:17.146 --> 00:01:18.996 A:middle
Core Spotlight is great for

00:01:18.996 --> 00:01:21.046 A:middle
databases and shoeboxes where

00:01:21.046 --> 00:01:22.546 A:middle
your app has full control over

00:01:22.546 --> 00:01:23.276 A:middle
the contents.

00:01:24.066 --> 00:01:26.106 A:middle
It's not for items that the user

00:01:26.106 --> 00:01:28.146 A:middle
monitors in the finder, for that

00:01:28.456 --> 00:01:30.276 A:middle
the classic Spotlight API still

00:01:30.276 --> 00:01:31.776 A:middle
exists and still works great.

00:01:33.416 --> 00:01:34.886 A:middle
Finally, the Core Spotlight API

00:01:35.006 --> 00:01:36.796 A:middle
is per user, so there's no

00:01:36.796 --> 00:01:37.216 A:middle
sharing.

00:01:37.686 --> 00:01:39.306 A:middle
For those of you who are new to

00:01:39.306 --> 00:01:41.736 A:middle
Core Spotlight we'll review the

00:01:41.736 --> 00:01:43.066 A:middle
basic concepts later in the

00:01:43.066 --> 00:01:43.476 A:middle
session.

00:01:43.936 --> 00:01:47.766 A:middle
An important new feature in iOS

00:01:47.766 --> 00:01:49.606 A:middle
11 is Drag-and-Drop and of

00:01:49.606 --> 00:01:51.216 A:middle
course, Drag-and-Drop is very

00:01:51.216 --> 00:01:52.596 A:middle
important to the Mac as well.

00:01:53.906 --> 00:01:54.636 A:middle
Drag-and-Drop with Core

00:01:54.636 --> 00:01:56.626 A:middle
Spotlight is built on the

00:01:56.626 --> 00:01:58.746 A:middle
concept of promises.

00:01:58.786 --> 00:02:00.036 A:middle
You make the promise of indexing

00:02:00.036 --> 00:02:02.286 A:middle
time and then you fulfill it

00:02:02.376 --> 00:02:03.906 A:middle
when the user drops a Core

00:02:03.906 --> 00:02:04.826 A:middle
Spotlight item later.

00:02:05.326 --> 00:02:07.866 A:middle
So, let's see this in action.

00:02:08.916 --> 00:02:10.286 A:middle
We start the drag in Spotlight

00:02:10.936 --> 00:02:15.096 A:middle
and then we hit the Home button

00:02:15.636 --> 00:02:16.936 A:middle
to go to SpringBoard where we

00:02:16.936 --> 00:02:20.316 A:middle
can enter notes and we can drop

00:02:20.316 --> 00:02:20.846 A:middle
the image.

00:02:21.316 --> 00:02:23.006 A:middle
This is an awesome accelerator

00:02:23.126 --> 00:02:24.636 A:middle
letting users get to the content

00:02:25.116 --> 00:02:26.016 A:middle
incredibly quickly.

00:02:26.576 --> 00:02:29.656 A:middle
Now you may wonder what's

00:02:29.656 --> 00:02:30.796 A:middle
actually going on behind the

00:02:30.796 --> 00:02:31.326 A:middle
scenes.

00:02:32.386 --> 00:02:34.116 A:middle
First your app indexes items and

00:02:34.116 --> 00:02:35.446 A:middle
each item carries a promise.

00:02:35.976 --> 00:02:40.426 A:middle
Your app quits and sometime

00:02:40.426 --> 00:02:42.226 A:middle
later the user runs a query in

00:02:42.226 --> 00:02:42.716 A:middle
Spotlight.

00:02:43.416 --> 00:02:45.116 A:middle
The user drags the item in

00:02:45.116 --> 00:02:46.736 A:middle
Spotlight and Spotlight creates

00:02:46.736 --> 00:02:48.666 A:middle
a promise that gets sent to the

00:02:48.666 --> 00:02:49.326 A:middle
drag receiver.

00:02:49.376 --> 00:02:52.966 A:middle
The app picks the type it wants

00:02:52.966 --> 00:02:54.056 A:middle
and the request goes back to

00:02:54.056 --> 00:02:54.586 A:middle
Spotlight.

00:02:56.256 --> 00:02:57.766 A:middle
Spotlight will then call your

00:02:57.766 --> 00:02:59.256 A:middle
application or your app

00:02:59.256 --> 00:03:01.966 A:middle
extension with the type and item

00:03:01.966 --> 00:03:02.936 A:middle
information.

00:03:07.176 --> 00:03:08.806 A:middle
So, then you provide the data

00:03:09.116 --> 00:03:10.556 A:middle
and it gets passed to Spotlight.

00:03:11.076 --> 00:03:13.616 A:middle
Of course, the receiving app it

00:03:13.616 --> 00:03:15.226 A:middle
can take the content.

00:03:15.346 --> 00:03:17.016 A:middle
This might look complicated, but

00:03:17.016 --> 00:03:18.326 A:middle
there's actually not that much

00:03:18.456 --> 00:03:20.296 A:middle
that you have to do.

00:03:20.816 --> 00:03:22.436 A:middle
Your first task is deciding what

00:03:22.436 --> 00:03:23.656 A:middle
drag types to support.

00:03:26.316 --> 00:03:28.226 A:middle
Drag types use uniform type

00:03:28.226 --> 00:03:30.426 A:middle
identifiers or UTI types which

00:03:30.426 --> 00:03:31.376 A:middle
are the [inaudible] of the

00:03:31.376 --> 00:03:31.756 A:middle
system.

00:03:32.256 --> 00:03:35.166 A:middle
These provide a uniform way of

00:03:35.166 --> 00:03:36.546 A:middle
describing types in our

00:03:36.546 --> 00:03:38.376 A:middle
hierarchy going from the most to

00:03:38.376 --> 00:03:39.206 A:middle
the least specific.

00:03:39.806 --> 00:03:42.106 A:middle
You can find great information

00:03:42.106 --> 00:03:43.616 A:middle
about uniform type identifiers

00:03:43.616 --> 00:03:44.966 A:middle
on developer.apple.com.

00:03:45.496 --> 00:03:48.526 A:middle
You can define new types for

00:03:48.526 --> 00:03:50.506 A:middle
your application, but for

00:03:50.506 --> 00:03:52.376 A:middle
Drag-and-Drop we want you to

00:03:52.376 --> 00:03:53.156 A:middle
declare types that are

00:03:53.156 --> 00:03:54.486 A:middle
well-known so that other

00:03:54.486 --> 00:03:56.106 A:middle
applications can receive the

00:03:56.106 --> 00:03:57.076 A:middle
data that you have to offer.

00:03:57.596 --> 00:04:00.576 A:middle
As an example, a note taking app

00:04:00.576 --> 00:04:02.406 A:middle
might have its own UTI type as a

00:04:02.616 --> 00:04:04.736 A:middle
type of its contents, but it

00:04:04.736 --> 00:04:05.796 A:middle
might advertise that it can

00:04:05.796 --> 00:04:08.126 A:middle
provide RTF, HTML and plaintext

00:04:08.246 --> 00:04:09.236 A:middle
when an item is dropped.

00:04:09.436 --> 00:04:11.736 A:middle
So that's types.

00:04:12.286 --> 00:04:13.446 A:middle
Now how do we let Spotlight know

00:04:13.446 --> 00:04:14.926 A:middle
what can be provided?

00:04:15.296 --> 00:04:17.716 A:middle
For that there are three new

00:04:17.716 --> 00:04:18.546 A:middle
attributes in

00:04:18.546 --> 00:04:19.946 A:middle
CSSearchableAttributeSet.

00:04:20.296 --> 00:04:22.046 A:middle
You can promise a data

00:04:22.046 --> 00:04:24.276 A:middle
representation, a file

00:04:24.276 --> 00:04:25.796 A:middle
representation which will get

00:04:25.796 --> 00:04:27.776 A:middle
copied or an in-place file

00:04:27.776 --> 00:04:29.856 A:middle
representation if your data is

00:04:29.856 --> 00:04:30.996 A:middle
saved [inaudible] copying.

00:04:31.476 --> 00:04:33.896 A:middle
As for the designing provider,

00:04:34.066 --> 00:04:35.316 A:middle
you should specify the highest

00:04:35.316 --> 00:04:36.896 A:middle
fidelity representation first.

00:04:37.776 --> 00:04:38.996 A:middle
So how is it used?

00:04:40.406 --> 00:04:40.956 A:middle
You create the

00:04:40.956 --> 00:04:42.926 A:middle
CSSearchableItemAttributeSet as

00:04:42.926 --> 00:04:43.286 A:middle
usual.

00:04:43.776 --> 00:04:45.036 A:middle
In this case, we already have an

00:04:45.036 --> 00:04:46.606 A:middle
image file so we'll provide that

00:04:46.606 --> 00:04:47.846 A:middle
for the file type identifier.

00:04:48.566 --> 00:04:49.906 A:middle
And we can also convert the

00:04:49.906 --> 00:04:51.756 A:middle
image [inaudible] so declared it

00:04:51.756 --> 00:04:54.266 A:middle
can provide plaintext as data.

00:04:54.556 --> 00:04:55.486 A:middle
So that's our promise.

00:04:55.766 --> 00:04:56.926 A:middle
Next, let's look at how to

00:04:56.926 --> 00:04:57.616 A:middle
produce that.

00:04:58.766 --> 00:05:01.206 A:middle
When the user drops items, your

00:05:01.206 --> 00:05:03.056 A:middle
extension will get called and in

00:05:03.056 --> 00:05:04.066 A:middle
the rare case that your app

00:05:04.066 --> 00:05:06.036 A:middle
happens to be running this may

00:05:06.036 --> 00:05:07.096 A:middle
be your app's index delegate

00:05:07.096 --> 00:05:07.456 A:middle
instead.

00:05:08.476 --> 00:05:09.996 A:middle
Depending on what the receiving

00:05:09.996 --> 00:05:11.996 A:middle
app requested one out of two

00:05:11.996 --> 00:05:12.896 A:middle
methods will get called.

00:05:13.216 --> 00:05:15.806 A:middle
If they ask for data or they ask

00:05:15.806 --> 00:05:17.106 A:middle
for a type or you could provide

00:05:17.106 --> 00:05:19.336 A:middle
data, the data method gets

00:05:19.336 --> 00:05:20.376 A:middle
called and takes a searchable

00:05:20.376 --> 00:05:22.456 A:middle
index, an item identifier, and a

00:05:22.456 --> 00:05:23.796 A:middle
type identifier and you're

00:05:23.796 --> 00:05:25.026 A:middle
expected to return the data

00:05:25.026 --> 00:05:25.506 A:middle
object.

00:05:26.776 --> 00:05:28.676 A:middle
The file URL method takes the

00:05:28.676 --> 00:05:30.716 A:middle
same arguments and additionally

00:05:30.716 --> 00:05:32.416 A:middle
Booleans specifying whether an

00:05:32.416 --> 00:05:33.656 A:middle
in-place file should be

00:05:33.656 --> 00:05:34.096 A:middle
provided.

00:05:36.036 --> 00:05:37.556 A:middle
The implementation of the data

00:05:37.556 --> 00:05:38.876 A:middle
method might look as follows.

00:05:38.986 --> 00:05:41.686 A:middle
We look at the model object for

00:05:41.686 --> 00:05:43.746 A:middle
the item identifier, we check

00:05:43.746 --> 00:05:45.096 A:middle
the type that's being requested,

00:05:45.726 --> 00:05:47.166 A:middle
and then we produce data

00:05:47.166 --> 00:05:47.736 A:middle
accordingly.

00:05:48.236 --> 00:05:52.386 A:middle
The implementation of the file

00:05:52.386 --> 00:05:53.866 A:middle
URL method is very similar.

00:05:54.326 --> 00:05:55.656 A:middle
Once again, we look at the model

00:05:55.656 --> 00:05:57.166 A:middle
object for the item identifier,

00:05:57.376 --> 00:05:58.346 A:middle
check the type that's being

00:05:58.346 --> 00:06:01.016 A:middle
requested, but here we produce a

00:06:01.016 --> 00:06:01.376 A:middle
file.

00:06:02.046 --> 00:06:03.656 A:middle
And that's actually all you need

00:06:03.656 --> 00:06:05.266 A:middle
to do for Drag-and-Drop on both

00:06:05.266 --> 00:06:06.416 A:middle
iOS and macOS.

00:06:06.996 --> 00:06:10.156 A:middle
So, to summarize the new API.

00:06:10.926 --> 00:06:12.206 A:middle
You declare and promise drag

00:06:12.206 --> 00:06:13.516 A:middle
types [inaudible] indexing time.

00:06:13.966 --> 00:06:15.346 A:middle
The Core Spotlight extension is

00:06:15.346 --> 00:06:16.766 A:middle
critical, it will get launched

00:06:16.766 --> 00:06:17.906 A:middle
to fulfill your promises.

00:06:18.526 --> 00:06:21.156 A:middle
Make producing the data as fast

00:06:21.156 --> 00:06:22.736 A:middle
as possible, the user will be

00:06:22.736 --> 00:06:24.046 A:middle
waiting for the drag to finish.

00:06:24.406 --> 00:06:26.856 A:middle
And of course, the new API is

00:06:26.856 --> 00:06:28.546 A:middle
for both macOS and iOS.

00:06:29.646 --> 00:06:30.996 A:middle
Next, Lyn is going to come

00:06:30.996 --> 00:06:32.296 A:middle
onstage to tell you all about

00:06:32.296 --> 00:06:33.426 A:middle
Quick Look previews for Core

00:06:33.426 --> 00:06:33.876 A:middle
Spotlight.

00:06:34.516 --> 00:06:40.826 A:middle
[ Applause ]

00:06:41.326 --> 00:06:43.486 A:middle
&gt;&gt; Hi [inaudible], let's talk

00:06:43.486 --> 00:06:44.826 A:middle
about Quick Look previews for

00:06:44.826 --> 00:06:46.146 A:middle
your Core Spotlight items.

00:06:47.266 --> 00:06:49.386 A:middle
On iOS Spotlight shows previews

00:06:49.456 --> 00:06:51.266 A:middle
of your content when you 3-D

00:06:51.266 --> 00:06:52.406 A:middle
touch to Peek and Pop.

00:06:53.816 --> 00:06:55.126 A:middle
By default, Spotlight shows a

00:06:55.126 --> 00:06:56.886 A:middle
text only preview based on the

00:06:56.886 --> 00:06:58.006 A:middle
text in your Core Spotlight

00:06:58.006 --> 00:07:00.396 A:middle
item, but now you can customize

00:07:00.396 --> 00:07:02.346 A:middle
your preview by adopting a Quick

00:07:02.346 --> 00:07:03.566 A:middle
Look preview extension.

00:07:04.146 --> 00:07:06.726 A:middle
So, this is an example of a

00:07:06.726 --> 00:07:08.566 A:middle
default Core Spotlight preview.

00:07:09.106 --> 00:07:10.616 A:middle
If you've tried Peek and Popping

00:07:10.616 --> 00:07:13.026 A:middle
on a Core Spotlight item in iOS

00:07:13.026 --> 00:07:14.466 A:middle
10 this may look familiar.

00:07:15.846 --> 00:07:17.606 A:middle
This is an example of what your

00:07:17.606 --> 00:07:19.216 A:middle
preview could look like by

00:07:19.216 --> 00:07:20.416 A:middle
adopting a Quick Look preview

00:07:20.416 --> 00:07:21.086 A:middle
extension.

00:07:21.836 --> 00:07:23.686 A:middle
This area here is where your

00:07:23.686 --> 00:07:25.656 A:middle
preview will be displayed and it

00:07:25.656 --> 00:07:27.426 A:middle
comes from a view controller in

00:07:27.426 --> 00:07:28.146 A:middle
your extension.

00:07:28.986 --> 00:07:30.866 A:middle
So, let's talk about how we go

00:07:30.866 --> 00:07:32.096 A:middle
about implementing one of these

00:07:32.096 --> 00:07:32.776 A:middle
extensions.

00:07:34.346 --> 00:07:35.966 A:middle
The Core Spotlight previews use

00:07:35.966 --> 00:07:37.476 A:middle
a Quick Look preview SDK which

00:07:37.636 --> 00:07:39.746 A:middle
is new to iOS this year and

00:07:39.746 --> 00:07:41.376 A:middle
comes with a shiny new Xcode

00:07:41.376 --> 00:07:41.736 A:middle
template.

00:07:42.716 --> 00:07:44.266 A:middle
When you create your target from

00:07:44.266 --> 00:07:45.946 A:middle
this template you will get an

00:07:45.946 --> 00:07:48.246 A:middle
extension Info.plist and if we

00:07:48.246 --> 00:07:50.306 A:middle
take a look at that plist under

00:07:50.486 --> 00:07:52.666 A:middle
NSExtension attributes you'll

00:07:52.666 --> 00:07:54.246 A:middle
see the QL supports searchable

00:07:54.246 --> 00:07:55.246 A:middle
items attribute.

00:07:55.706 --> 00:07:57.906 A:middle
For Core Spotlight previews you

00:07:57.906 --> 00:07:58.906 A:middle
want that set to yes.

00:07:59.546 --> 00:08:00.806 A:middle
This lets us know that your

00:08:00.806 --> 00:08:02.136 A:middle
Quick Look preview extension

00:08:02.136 --> 00:08:03.696 A:middle
supports Core Spotlight items.

00:08:04.526 --> 00:08:08.896 A:middle
So, let's take a look at the

00:08:09.056 --> 00:08:09.146 A:middle
API.

00:08:09.146 --> 00:08:10.356 A:middle
When you create your target, you

00:08:10.356 --> 00:08:12.036 A:middle
will get a view controller with

00:08:12.036 --> 00:08:13.886 A:middle
this method, preparePreviewOf

00:08:13.886 --> 00:08:14.716 A:middle
SearchableItem.

00:08:15.226 --> 00:08:16.496 A:middle
This is what will get called

00:08:16.686 --> 00:08:18.056 A:middle
when a preview is required.

00:08:18.636 --> 00:08:20.456 A:middle
In this method, you will get an

00:08:21.036 --> 00:08:22.856 A:middle
identifier, this is the Core

00:08:22.856 --> 00:08:24.636 A:middle
Spotlight identifier unique to

00:08:24.636 --> 00:08:25.306 A:middle
your result.

00:08:26.326 --> 00:08:28.036 A:middle
You'll get a query string which

00:08:28.036 --> 00:08:29.706 A:middle
is the string the user searched

00:08:29.706 --> 00:08:31.266 A:middle
for to get to your result.

00:08:31.736 --> 00:08:32.996 A:middle
This is helpful if you want to

00:08:32.996 --> 00:08:34.566 A:middle
highlight content relevant to

00:08:34.566 --> 00:08:36.136 A:middle
the search in your preview.

00:08:36.706 --> 00:08:38.766 A:middle
And finally, you will get a

00:08:38.766 --> 00:08:40.236 A:middle
completion handler that you have

00:08:40.236 --> 00:08:43.316 A:middle
to call once you're done.

00:08:43.516 --> 00:08:45.906 A:middle
So, debugging a Core Spotlight

00:08:45.956 --> 00:08:47.476 A:middle
preview extension is different

00:08:47.476 --> 00:08:48.786 A:middle
from debugging a typical

00:08:48.786 --> 00:08:50.266 A:middle
extension, but don't worry it's

00:08:50.266 --> 00:08:50.926 A:middle
still easy.

00:08:51.526 --> 00:08:53.116 A:middle
Instead of picking a host app

00:08:53.116 --> 00:08:54.066 A:middle
and launching your extension

00:08:54.066 --> 00:08:55.826 A:middle
from that host app you'll be

00:08:55.826 --> 00:08:57.126 A:middle
launching your extension from

00:08:57.126 --> 00:08:58.116 A:middle
Spotlight directly.

00:08:58.976 --> 00:09:00.966 A:middle
So, when Xcode asks you for an

00:09:00.966 --> 00:09:03.886 A:middle
app on launch pick any app, you

00:09:03.886 --> 00:09:05.456 A:middle
won't be using it, instead

00:09:05.456 --> 00:09:07.006 A:middle
you'll go to Spotlight, look for

00:09:07.006 --> 00:09:08.426 A:middle
your Core Spotlight item and

00:09:08.426 --> 00:09:09.176 A:middle
then Peek and Pop.

00:09:09.566 --> 00:09:11.406 A:middle
Xcode will automatically attach

00:09:11.406 --> 00:09:12.856 A:middle
to your extension for you.

00:09:13.196 --> 00:09:14.576 A:middle
So, let's take a look at this

00:09:14.576 --> 00:09:15.586 A:middle
workflow with a demo.

00:09:24.056 --> 00:09:25.236 A:middle
So, before we begin the app that

00:09:25.236 --> 00:09:26.356 A:middle
you will see in this demo is

00:09:26.356 --> 00:09:28.546 A:middle
available as sample code so feel

00:09:28.546 --> 00:09:29.516 A:middle
free to take a look after the

00:09:29.516 --> 00:09:29.956 A:middle
session.

00:09:30.416 --> 00:09:32.666 A:middle
So, let's start by taking a look

00:09:33.226 --> 00:09:33.926 A:middle
at our main app.

00:09:40.046 --> 00:09:41.256 A:middle
So here we have a simple app,

00:09:41.256 --> 00:09:42.506 A:middle
it's just a list of pictures.

00:09:43.246 --> 00:09:44.116 A:middle
If you select one of the

00:09:44.116 --> 00:09:45.696 A:middle
pictures you get a more detailed

00:09:45.696 --> 00:09:48.036 A:middle
view with a title, a rating and

00:09:48.036 --> 00:09:48.766 A:middle
some description.

00:09:49.076 --> 00:09:51.926 A:middle
So, let's see if we try to find

00:09:51.926 --> 00:09:53.326 A:middle
a picture in Spotlight and Peek

00:09:53.326 --> 00:09:53.896 A:middle
and Pop on it.

00:09:58.236 --> 00:09:59.436 A:middle
So, there's item.

00:10:00.036 --> 00:10:04.416 A:middle
Oops, it popped right in.

00:10:04.896 --> 00:10:08.236 A:middle
So, there's a bit of text, it's

00:10:08.236 --> 00:10:08.916 A:middle
not the greatest.

00:10:09.246 --> 00:10:10.206 A:middle
Let's see if we can do better.

00:10:11.646 --> 00:10:14.136 A:middle
So back in Xcode here I'm going

00:10:14.136 --> 00:10:16.736 A:middle
to add a new target from the

00:10:16.736 --> 00:10:18.326 A:middle
Quick Look preview extension

00:10:18.356 --> 00:10:20.846 A:middle
template and we'll call that

00:10:21.736 --> 00:10:25.226 A:middle
pictures preview extension for

00:10:26.776 --> 00:10:26.906 A:middle
iOS.

00:10:28.326 --> 00:10:29.436 A:middle
We'll go ahead and activate

00:10:29.436 --> 00:10:29.686 A:middle
that.

00:10:34.076 --> 00:10:35.596 A:middle
One thing I should mention is

00:10:35.596 --> 00:10:37.126 A:middle
that the view controller that we

00:10:37.126 --> 00:10:39.366 A:middle
saw in the app is in a framework

00:10:39.366 --> 00:10:40.756 A:middle
so that it can share across

00:10:40.876 --> 00:10:41.806 A:middle
multiple targets.

00:10:42.276 --> 00:10:43.976 A:middle
If you have code or resources to

00:10:43.976 --> 00:10:45.556 A:middle
share across targets we suggest

00:10:45.556 --> 00:10:46.726 A:middle
you use the same approach.

00:10:47.006 --> 00:10:49.006 A:middle
So, I'm going to go ahead and

00:10:49.006 --> 00:10:50.566 A:middle
import that framework now.

00:10:51.226 --> 00:10:53.566 A:middle
And then we can jump into the

00:10:53.566 --> 00:10:54.416 A:middle
meat of this file.

00:10:55.266 --> 00:10:55.966 A:middle
PreparePreview

00:10:55.966 --> 00:10:57.316 A:middle
OfSearchableItem, this is the

00:10:57.316 --> 00:10:58.276 A:middle
same method you saw in the

00:10:58.276 --> 00:10:58.866 A:middle
slides.

00:10:59.526 --> 00:11:00.986 A:middle
And here we have the identifier

00:11:01.096 --> 00:11:04.376 A:middle
and what we're going to do is

00:11:04.376 --> 00:11:06.676 A:middle
use that identifier to find a

00:11:06.676 --> 00:11:07.816 A:middle
picture with a matching

00:11:07.856 --> 00:11:08.536 A:middle
identifier.

00:11:09.716 --> 00:11:10.966 A:middle
And once we have that picture we

00:11:10.966 --> 00:11:12.596 A:middle
can just go ahead and set up our

00:11:12.596 --> 00:11:13.786 A:middle
view controller with that

00:11:13.786 --> 00:11:14.206 A:middle
picture.

00:11:14.626 --> 00:11:15.586 A:middle
Again, this is the same view

00:11:15.586 --> 00:11:16.756 A:middle
controller you saw in the main

00:11:17.666 --> 00:11:17.736 A:middle
app.

00:11:17.736 --> 00:11:19.236 A:middle
If you have a lightweight view

00:11:19.236 --> 00:11:21.356 A:middle
controller in your main app you

00:11:21.356 --> 00:11:22.226 A:middle
can certainly use the same

00:11:22.226 --> 00:11:22.696 A:middle
approach.

00:11:23.116 --> 00:11:25.286 A:middle
If your view controller is more

00:11:25.286 --> 00:11:26.696 A:middle
memory or speed intensive you

00:11:26.696 --> 00:11:28.566 A:middle
might want to consider making a

00:11:28.566 --> 00:11:30.216 A:middle
lighter weight version for this

00:11:30.216 --> 00:11:30.856 A:middle
purpose.

00:11:31.296 --> 00:11:32.746 A:middle
So, then we're going to go ahead

00:11:32.746 --> 00:11:33.446 A:middle
and present it.

00:11:34.356 --> 00:11:35.606 A:middle
Here I have a little printout so

00:11:35.606 --> 00:11:36.786 A:middle
I can see when Xcode has

00:11:36.786 --> 00:11:38.636 A:middle
attached and finally, we call

00:11:38.636 --> 00:11:39.666 A:middle
that completion handler.

00:11:40.716 --> 00:11:42.176 A:middle
So, let's go and give this a

00:11:42.176 --> 00:11:42.716 A:middle
spin.

00:11:43.326 --> 00:11:45.856 A:middle
So, as I mentioned, it doesn't

00:11:45.856 --> 00:11:47.086 A:middle
matter what you pick here you're

00:11:47.316 --> 00:11:48.496 A:middle
not going to use it, we're going

00:11:48.496 --> 00:11:49.666 A:middle
to pick pictures because that's

00:11:49.666 --> 00:11:49.976 A:middle
our app.

00:11:58.046 --> 00:11:58.976 A:middle
So, there's pictures and we're

00:11:59.046 --> 00:12:00.746 A:middle
going to head right back into

00:12:01.546 --> 00:12:03.136 A:middle
Spotlight and we're going to try

00:12:03.136 --> 00:12:04.216 A:middle
Peek and Popping again.

00:12:04.816 --> 00:12:08.146 A:middle
And there's our preview.

00:12:09.516 --> 00:12:14.546 A:middle
[ Applause ]

00:12:15.046 --> 00:12:15.546 A:middle
And you can see from the

00:12:15.546 --> 00:12:16.846 A:middle
printout in Xcode that we have

00:12:16.846 --> 00:12:18.456 A:middle
successfully attached and now we

00:12:18.456 --> 00:12:19.476 A:middle
can go ahead and debug.

00:12:26.166 --> 00:12:28.086 A:middle
So, as you saw implementing a

00:12:28.086 --> 00:12:29.416 A:middle
Quick Look preview extension can

00:12:29.416 --> 00:12:30.946 A:middle
be very simple, especially if

00:12:30.946 --> 00:12:31.836 A:middle
you already have a view

00:12:31.836 --> 00:12:32.896 A:middle
controller to display your

00:12:32.896 --> 00:12:33.396 A:middle
content.

00:12:33.986 --> 00:12:35.216 A:middle
Maybe the view controller in

00:12:35.216 --> 00:12:36.396 A:middle
your main app is lightweight

00:12:36.396 --> 00:12:37.656 A:middle
already or maybe you've got a

00:12:37.656 --> 00:12:39.706 A:middle
lightweight version for 3-D

00:12:39.706 --> 00:12:40.736 A:middle
touch in your app.

00:12:40.736 --> 00:12:42.006 A:middle
Either way, you can simply reuse

00:12:42.006 --> 00:12:43.126 A:middle
that view controller here.

00:12:43.466 --> 00:12:45.186 A:middle
Some final tips for your

00:12:45.186 --> 00:12:45.856 A:middle
extension.

00:12:46.056 --> 00:12:48.256 A:middle
A loading spinner will show

00:12:48.256 --> 00:12:49.526 A:middle
until you call that completion

00:12:49.526 --> 00:12:51.136 A:middle
handler so call it as soon as

00:12:51.136 --> 00:12:51.606 A:middle
you can.

00:12:52.316 --> 00:12:53.446 A:middle
You can expect to see that

00:12:53.446 --> 00:12:55.146 A:middle
spinner when Xcode is attaching

00:12:55.146 --> 00:12:57.116 A:middle
to your extension for the first

00:12:57.116 --> 00:12:58.236 A:middle
time like in the demo.

00:12:58.786 --> 00:13:00.406 A:middle
But once it has already attached

00:13:00.736 --> 00:13:01.666 A:middle
or if you're not running in

00:13:01.666 --> 00:13:02.926 A:middle
Xcode you want to see your

00:13:02.926 --> 00:13:04.286 A:middle
preview immediately.

00:13:04.606 --> 00:13:06.966 A:middle
This is an extension so memory

00:13:06.966 --> 00:13:08.406 A:middle
is limited, be efficient.

00:13:09.036 --> 00:13:10.566 A:middle
And finally, once you call that

00:13:10.566 --> 00:13:12.326 A:middle
completion handler your job is

00:13:12.326 --> 00:13:13.536 A:middle
done, don't do any more

00:13:13.536 --> 00:13:15.336 A:middle
background work after the fact.

00:13:15.626 --> 00:13:17.906 A:middle
So that's Core Spotlight

00:13:17.906 --> 00:13:19.306 A:middle
previews on iOS.

00:13:19.486 --> 00:13:21.786 A:middle
The Quick Look preview SDK also

00:13:21.786 --> 00:13:23.956 A:middle
supports file-based previews and

00:13:23.956 --> 00:13:25.556 A:middle
for that see the building great

00:13:25.646 --> 00:13:28.106 A:middle
documents based apps in iOS 11

00:13:28.366 --> 00:13:28.806 A:middle
session.

00:13:29.286 --> 00:13:32.906 A:middle
So, as John mentioned, Core

00:13:32.906 --> 00:13:34.556 A:middle
Spotlight is also coming to

00:13:34.556 --> 00:13:37.006 A:middle
macOS and just like on iOS you

00:13:37.006 --> 00:13:38.606 A:middle
can customize your preview.

00:13:39.556 --> 00:13:41.616 A:middle
On macOS a preview is shown when

00:13:41.616 --> 00:13:43.076 A:middle
you select a search result in

00:13:43.076 --> 00:13:44.066 A:middle
the Spotlight window.

00:13:44.206 --> 00:13:45.646 A:middle
Here you really do want to

00:13:45.646 --> 00:13:47.226 A:middle
implement a Quick Look preview

00:13:47.226 --> 00:13:48.336 A:middle
extension for your Core

00:13:48.336 --> 00:13:50.456 A:middle
Spotlight item because Spotlight

00:13:50.456 --> 00:13:52.956 A:middle
on macOS does not have a default

00:13:52.956 --> 00:13:53.436 A:middle
preview.

00:13:54.026 --> 00:13:55.176 A:middle
So, this is what it's going to

00:13:55.176 --> 00:13:57.146 A:middle
look like without a Quick Look

00:13:57.146 --> 00:13:58.056 A:middle
preview extension.

00:13:58.866 --> 00:14:00.346 A:middle
And this is what it could look

00:14:00.346 --> 00:14:01.196 A:middle
like with one.

00:14:02.246 --> 00:14:03.866 A:middle
This area here is where your

00:14:03.866 --> 00:14:05.956 A:middle
preview will be displayed and

00:14:05.956 --> 00:14:07.616 A:middle
just like on iOS it comes from a

00:14:07.616 --> 00:14:08.896 A:middle
view controller in your

00:14:08.896 --> 00:14:09.536 A:middle
extension.

00:14:09.536 --> 00:14:10.756 A:middle
So, you can do just about

00:14:10.756 --> 00:14:13.286 A:middle
anything a regular view can do.

00:14:14.186 --> 00:14:16.786 A:middle
Debugging a Core Spotlight Quick

00:14:16.786 --> 00:14:18.656 A:middle
Look preview extension on macOS

00:14:18.656 --> 00:14:19.716 A:middle
is again different from

00:14:19.716 --> 00:14:21.376 A:middle
debugging a typical extension

00:14:21.846 --> 00:14:23.206 A:middle
and also different from the iOS

00:14:23.376 --> 00:14:23.816 A:middle
workflow.

00:14:24.416 --> 00:14:26.346 A:middle
Because Spotlight's window

00:14:26.346 --> 00:14:27.996 A:middle
vanishes when another app gets

00:14:27.996 --> 00:14:29.876 A:middle
focused it can be difficult to

00:14:29.876 --> 00:14:31.536 A:middle
work with breakpoints in Xcode.

00:14:31.786 --> 00:14:33.336 A:middle
So instead we've provided the

00:14:33.336 --> 00:14:34.826 A:middle
Quick Look simulator to launch

00:14:34.826 --> 00:14:36.326 A:middle
your extension for you and it

00:14:36.326 --> 00:14:37.356 A:middle
will stick around while you

00:14:37.356 --> 00:14:37.836 A:middle
debug.

00:14:38.576 --> 00:14:39.496 A:middle
So, let's take a look at how

00:14:39.496 --> 00:14:39.976 A:middle
that works.

00:14:48.046 --> 00:14:49.356 A:middle
All right, so let's take a look

00:14:49.356 --> 00:14:51.946 A:middle
at the Mac version of the app.

00:14:58.246 --> 00:14:59.836 A:middle
So here we have the same app

00:14:59.836 --> 00:15:02.206 A:middle
that we saw on iOS.

00:15:02.856 --> 00:15:05.586 A:middle
It's got a list of pictures, if

00:15:05.586 --> 00:15:07.236 A:middle
you select a picture you get a

00:15:07.236 --> 00:15:09.066 A:middle
more detailed view with a title

00:15:09.066 --> 00:15:10.006 A:middle
and a larger picture.

00:15:10.786 --> 00:15:12.476 A:middle
Let's see what happens if we

00:15:12.476 --> 00:15:13.976 A:middle
search for it in Spotlight.

00:15:18.046 --> 00:15:18.966 A:middle
We get a big blank space.

00:15:19.426 --> 00:15:20.706 A:middle
Let's see if we can fix that.

00:15:26.046 --> 00:15:26.816 A:middle
So, I'm going to create another

00:15:26.816 --> 00:15:30.726 A:middle
target this time with the macOS

00:15:31.346 --> 00:15:32.636 A:middle
Quick Look preview extension

00:15:32.636 --> 00:15:35.676 A:middle
template and we'll call that

00:15:35.676 --> 00:15:40.166 A:middle
pictures preview extension for

00:15:40.166 --> 00:15:41.476 A:middle
macOS.

00:15:42.266 --> 00:15:45.866 A:middle
Go ahead and activate it.

00:15:47.876 --> 00:15:49.366 A:middle
And again, I'm going to import

00:15:49.366 --> 00:15:49.976 A:middle
the framework.

00:15:56.446 --> 00:15:58.266 A:middle
That one and jump to prepare

00:15:58.266 --> 00:15:59.956 A:middle
preview of searchable item which

00:15:59.956 --> 00:16:01.366 A:middle
is the same method that you saw

00:16:01.366 --> 00:16:01.956 A:middle
on iOS.

00:16:01.956 --> 00:16:03.896 A:middle
So, we're going to do the same

00:16:03.896 --> 00:16:05.266 A:middle
thing here and use that

00:16:05.266 --> 00:16:07.566 A:middle
identifier to get a picture with

00:16:07.566 --> 00:16:09.806 A:middle
the matching identifier and then

00:16:09.806 --> 00:16:11.126 A:middle
we're going to go ahead and set

00:16:11.126 --> 00:16:12.036 A:middle
up our view.

00:16:12.326 --> 00:16:13.366 A:middle
This is the same view that you

00:16:13.366 --> 00:16:15.256 A:middle
saw in the app, I'm going to add

00:16:15.256 --> 00:16:17.166 A:middle
it to our view hierarchy, do a

00:16:17.166 --> 00:16:18.326 A:middle
little printout so we know when

00:16:18.326 --> 00:16:20.346 A:middle
we've attached and finally, we

00:16:20.346 --> 00:16:21.526 A:middle
call that completion handler.

00:16:22.586 --> 00:16:24.836 A:middle
So, let's give that a go.

00:16:25.076 --> 00:16:26.156 A:middle
When you run your Quick Look

00:16:26.156 --> 00:16:27.756 A:middle
preview extension Xcode will

00:16:27.816 --> 00:16:29.226 A:middle
offer the Quick Look simulator

00:16:29.226 --> 00:16:29.816 A:middle
by default.

00:16:30.306 --> 00:16:32.586 A:middle
So, go ahead and select that.

00:16:40.236 --> 00:16:40.936 A:middle
And there's a Quick Look

00:16:40.936 --> 00:16:41.486 A:middle
simulator.

00:16:42.376 --> 00:16:44.336 A:middle
On the left you will see your

00:16:44.336 --> 00:16:45.516 A:middle
Core Spotlight items.

00:16:46.036 --> 00:16:47.256 A:middle
If you have a lot of index

00:16:47.256 --> 00:16:48.446 A:middle
search results you can use the

00:16:48.446 --> 00:16:49.976 A:middle
search field above to narrow it

00:16:49.976 --> 00:16:50.376 A:middle
down.

00:16:50.936 --> 00:16:52.736 A:middle
When you select one of these

00:16:52.736 --> 00:16:54.366 A:middle
results your preview will appear

00:16:54.366 --> 00:16:56.146 A:middle
on the right and you can see

00:16:56.146 --> 00:16:58.106 A:middle
that Xcode has successfully

00:16:58.106 --> 00:16:59.716 A:middle
attached and you can go ahead

00:16:59.716 --> 00:17:00.666 A:middle
and debug to your heart's

00:17:00.666 --> 00:17:01.046 A:middle
content.

00:17:01.586 --> 00:17:03.816 A:middle
So, let's see what it looks like

00:17:03.816 --> 00:17:04.626 A:middle
in Spotlight now.

00:17:10.056 --> 00:17:11.226 A:middle
So, as you can see Spotlight has

00:17:11.226 --> 00:17:12.576 A:middle
successfully replaced the blank

00:17:12.576 --> 00:17:14.286 A:middle
spot with your extension.

00:17:15.016 --> 00:17:16.000 A:middle
[ Applause ]

00:17:22.046 --> 00:17:23.926 A:middle
So, as you saw, the API for Core

00:17:23.926 --> 00:17:25.636 A:middle
Spotlight previews on macOS is

00:17:25.636 --> 00:17:27.326 A:middle
identical to the one on iOS.

00:17:28.706 --> 00:17:32.346 A:middle
Some final tips here.

00:17:32.346 --> 00:17:34.486 A:middle
One caveat to remember is that

00:17:35.136 --> 00:17:36.676 A:middle
you should not make any views in

00:17:36.676 --> 00:17:38.116 A:middle
your extension first responder.

00:17:38.486 --> 00:17:39.986 A:middle
Your preview is not meant to be

00:17:40.116 --> 00:17:41.686 A:middle
interactive, Spotlight is the

00:17:41.686 --> 00:17:43.046 A:middle
interactive element here.

00:17:44.146 --> 00:17:46.916 A:middle
And finally, the Quick Look

00:17:46.916 --> 00:17:49.006 A:middle
preview extension on macOS only

00:17:49.006 --> 00:17:50.806 A:middle
supports Core Spotlight items.

00:17:51.056 --> 00:17:53.126 A:middle
For file-based previews the

00:17:53.126 --> 00:17:54.946 A:middle
classic Quick Look generator API

00:17:55.206 --> 00:17:56.316 A:middle
is still the solution.

00:17:56.616 --> 00:17:58.806 A:middle
So that's it for Core Spotlight

00:17:58.806 --> 00:17:59.316 A:middle
previews.

00:17:59.316 --> 00:17:59.936 A:middle
Back to John.

00:18:00.516 --> 00:18:05.500 A:middle
[ Applause ]

00:18:10.076 --> 00:18:13.086 A:middle
&gt;&gt; Thanks Lyn, that was great.

00:18:13.416 --> 00:18:15.286 A:middle
Ranking is very important for

00:18:15.286 --> 00:18:15.846 A:middle
Spotlight.

00:18:16.696 --> 00:18:19.036 A:middle
In iOS 11 and macOS [inaudible]

00:18:19.376 --> 00:18:20.396 A:middle
we've added a new machine

00:18:20.396 --> 00:18:21.536 A:middle
learning based ranker for Core

00:18:21.536 --> 00:18:22.046 A:middle
Spotlight.

00:18:23.396 --> 00:18:24.596 A:middle
This is personalized and

00:18:24.596 --> 00:18:26.876 A:middle
adaptive, it runs on device

00:18:26.956 --> 00:18:29.166 A:middle
using Core ML and we've worked

00:18:29.166 --> 00:18:31.186 A:middle
very hard to keep your data

00:18:31.186 --> 00:18:31.696 A:middle
private.

00:18:32.816 --> 00:18:34.466 A:middle
All the personalization and

00:18:34.466 --> 00:18:35.936 A:middle
adaptation to the user happens

00:18:35.936 --> 00:18:36.596 A:middle
on device.

00:18:36.906 --> 00:18:38.276 A:middle
The ML model is trained in the

00:18:38.276 --> 00:18:40.136 A:middle
cloud using features known

00:18:40.136 --> 00:18:41.566 A:middle
locally from your devices.

00:18:42.036 --> 00:18:44.476 A:middle
Features are private, they do

00:18:44.476 --> 00:18:46.386 A:middle
not include actual results and

00:18:46.386 --> 00:18:47.696 A:middle
they do not include actual

00:18:47.696 --> 00:18:48.116 A:middle
queries.

00:18:48.736 --> 00:18:50.266 A:middle
Data for training is only

00:18:50.266 --> 00:18:52.216 A:middle
submitted if you're opted in to

00:18:52.216 --> 00:18:53.186 A:middle
device analytics.

00:18:53.826 --> 00:18:55.486 A:middle
This is a privacy friendly way

00:18:55.486 --> 00:18:56.406 A:middle
of doing machine learning.

00:19:02.206 --> 00:19:03.136 A:middle
We've also added some new

00:19:03.136 --> 00:19:05.386 A:middle
properties to let you help us

00:19:05.446 --> 00:19:06.366 A:middle
rank your content.

00:19:07.466 --> 00:19:08.916 A:middle
We've added a rankingHint which

00:19:08.916 --> 00:19:10.706 A:middle
is a number from 1 to 100 with

00:19:10.706 --> 00:19:11.906 A:middle
100 being the best.

00:19:12.456 --> 00:19:13.966 A:middle
And when the ranker can't tell

00:19:13.966 --> 00:19:15.456 A:middle
the difference between items

00:19:15.596 --> 00:19:17.916 A:middle
this can be used to elevate the

00:19:17.916 --> 00:19:19.046 A:middle
more important content.

00:19:19.486 --> 00:19:22.866 A:middle
A new Boolean attribute was

00:19:22.866 --> 00:19:23.426 A:middle
created.

00:19:24.046 --> 00:19:26.156 A:middle
This lets us know whether the

00:19:26.156 --> 00:19:27.536 A:middle
user created the item.

00:19:28.906 --> 00:19:30.646 A:middle
UserOwned lets us know whether

00:19:30.646 --> 00:19:31.806 A:middle
the user has purchased this

00:19:31.806 --> 00:19:32.176 A:middle
item.

00:19:32.426 --> 00:19:34.326 A:middle
And userCurated lets us know

00:19:34.326 --> 00:19:35.426 A:middle
whether this is an item that the

00:19:35.426 --> 00:19:37.126 A:middle
user selected, for example a

00:19:37.126 --> 00:19:38.096 A:middle
bookmarked news article.

00:19:38.426 --> 00:19:42.986 A:middle
Now keep in mind that this is

00:19:42.986 --> 00:19:44.316 A:middle
just input to the ranker.

00:19:45.546 --> 00:19:47.576 A:middle
If you try to fool the ranking

00:19:47.576 --> 00:19:49.506 A:middle
system by setting the

00:19:49.506 --> 00:19:51.486 A:middle
rankingHint at everything to 100

00:19:52.006 --> 00:19:53.306 A:middle
it won't really affect anything.

00:19:53.816 --> 00:19:55.716 A:middle
This is only for ranking within

00:19:55.716 --> 00:19:56.586 A:middle
your own items.

00:19:59.456 --> 00:20:01.076 A:middle
Match quality and usage

00:20:01.076 --> 00:20:03.576 A:middle
information is still critical

00:20:03.576 --> 00:20:04.136 A:middle
for ranking.

00:20:04.526 --> 00:20:05.956 A:middle
So, to get the best ranking

00:20:05.956 --> 00:20:08.146 A:middle
behavior use NSUserActivity so

00:20:08.146 --> 00:20:09.236 A:middle
that we know what the user

00:20:09.236 --> 00:20:11.066 A:middle
interacts with in your app.

00:20:12.016 --> 00:20:13.686 A:middle
Provide a rich metadata for the

00:20:13.686 --> 00:20:15.456 A:middle
ranker to work on, so set a

00:20:15.456 --> 00:20:17.956 A:middle
great title, set an informative

00:20:17.956 --> 00:20:20.096 A:middle
description, specify dates, and

00:20:20.096 --> 00:20:21.956 A:middle
judiciously use keywords to make

00:20:21.956 --> 00:20:24.266 A:middle
items easier to find, but don't

00:20:24.266 --> 00:20:27.156 A:middle
misuse keywords because straight

00:20:27.156 --> 00:20:28.736 A:middle
keyword matches means that your

00:20:28.736 --> 00:20:30.556 A:middle
application's results will rank

00:20:30.556 --> 00:20:30.856 A:middle
lower.

00:20:30.856 --> 00:20:35.026 A:middle
Now let's get back to basics.

00:20:35.506 --> 00:20:37.586 A:middle
You need to get content into the

00:20:37.586 --> 00:20:39.546 A:middle
index and the primary way to add

00:20:39.546 --> 00:20:41.626 A:middle
content is directly via the

00:20:41.626 --> 00:20:42.746 A:middle
CSSearchable index API.

00:20:44.516 --> 00:20:46.056 A:middle
Secondarily, you can also index

00:20:46.056 --> 00:20:47.686 A:middle
NSUserActivity which we

00:20:47.686 --> 00:20:48.956 A:middle
recommend doing because it

00:20:48.956 --> 00:20:50.236 A:middle
provides an important ranking

00:20:50.236 --> 00:20:50.566 A:middle
signal.

00:20:52.376 --> 00:20:53.946 A:middle
Sometimes you'll need to delete

00:20:53.946 --> 00:20:55.546 A:middle
items reacting to what the user

00:20:55.546 --> 00:20:57.236 A:middle
does or to external events.

00:20:57.236 --> 00:20:59.236 A:middle
And of course, we have APIs for

00:20:59.236 --> 00:21:02.726 A:middle
that as well.

00:21:02.816 --> 00:21:04.086 A:middle
Adding CSSearchableItems to the

00:21:04.086 --> 00:21:05.786 A:middle
index is quite easy and you're

00:21:05.786 --> 00:21:07.426 A:middle
in complete control of what you

00:21:07.426 --> 00:21:07.666 A:middle
add.

00:21:08.606 --> 00:21:10.066 A:middle
You first create a CSSearchable

00:21:10.066 --> 00:21:11.366 A:middle
item attribute set that will

00:21:11.366 --> 00:21:12.836 A:middle
hold the metadata for the item.

00:21:13.096 --> 00:21:14.776 A:middle
You initialize the attribute set

00:21:15.026 --> 00:21:16.886 A:middle
with the universal type

00:21:16.886 --> 00:21:17.466 A:middle
identifier.

00:21:18.756 --> 00:21:20.766 A:middle
Here we're using kUTTypeImage

00:21:20.766 --> 00:21:22.126 A:middle
with a generic type frame rich

00:21:22.126 --> 00:21:22.626 A:middle
content.

00:21:24.316 --> 00:21:25.506 A:middle
You also want to use something

00:21:25.506 --> 00:21:27.616 A:middle
more specific and there are many

00:21:27.616 --> 00:21:29.736 A:middle
built-in types of the system to

00:21:29.736 --> 00:21:30.406 A:middle
inherit from.

00:21:31.026 --> 00:21:32.346 A:middle
It's important in iOS and

00:21:32.346 --> 00:21:33.966 A:middle
critical in macOS that you use

00:21:33.966 --> 00:21:36.336 A:middle
the right type because it

00:21:36.336 --> 00:21:37.666 A:middle
affects where and how your

00:21:37.666 --> 00:21:38.586 A:middle
content is displayed.

00:21:40.196 --> 00:21:41.786 A:middle
Then you set some attributes and

00:21:41.786 --> 00:21:43.556 A:middle
the attribute set display name

00:21:43.556 --> 00:21:44.366 A:middle
is a bare minimum.

00:21:46.936 --> 00:21:48.316 A:middle
You create a searchable item

00:21:48.526 --> 00:21:49.996 A:middle
with a unique identifier, a

00:21:49.996 --> 00:21:51.486 A:middle
domain identifier and the

00:21:51.486 --> 00:21:52.056 A:middle
attribute set.

00:21:52.206 --> 00:21:53.906 A:middle
And keep in mind that unique

00:21:53.906 --> 00:21:55.086 A:middle
identifier is what you'll get

00:21:55.136 --> 00:21:56.646 A:middle
back when Spotlight wants to

00:21:56.646 --> 00:21:57.906 A:middle
launch into your application.

00:21:58.386 --> 00:22:02.276 A:middle
And you index it and the

00:22:02.276 --> 00:22:03.376 A:middle
completion handler will get

00:22:03.376 --> 00:22:05.226 A:middle
called and the data has been

00:22:05.226 --> 00:22:06.636 A:middle
safely committed to storage.

00:22:08.416 --> 00:22:09.736 A:middle
Just like for Spotlight

00:22:09.886 --> 00:22:11.436 A:middle
NSUserActivity can be used to

00:22:11.436 --> 00:22:12.816 A:middle
index content and navigation

00:22:12.816 --> 00:22:14.936 A:middle
points in your app.

00:22:14.936 --> 00:22:16.686 A:middle
NSUserActivity reflects what the

00:22:16.686 --> 00:22:17.456 A:middle
user has done in the

00:22:17.456 --> 00:22:19.106 A:middle
application, whereas

00:22:19.106 --> 00:22:22.606 A:middle
CSSearchable reflects what your

00:22:22.606 --> 00:22:23.406 A:middle
app has to offer.

00:22:23.976 --> 00:22:28.296 A:middle
So, the difference is that the

00:22:28.296 --> 00:22:29.686 A:middle
Core Spotlight API lets you

00:22:29.686 --> 00:22:31.736 A:middle
index items that the user hasn't

00:22:31.736 --> 00:22:33.176 A:middle
visited and is generally

00:22:33.176 --> 00:22:34.256 A:middle
preferable as it gives you

00:22:34.256 --> 00:22:35.716 A:middle
complete control over what is

00:22:35.716 --> 00:22:36.176 A:middle
indexed.

00:22:37.106 --> 00:22:38.596 A:middle
But on the other hand, because

00:22:38.636 --> 00:22:40.986 A:middle
NSUserActivity is only for items

00:22:40.986 --> 00:22:42.436 A:middle
that the user has visited it

00:22:42.436 --> 00:22:43.966 A:middle
provides that important signal

00:22:43.966 --> 00:22:44.486 A:middle
for ranking.

00:22:45.076 --> 00:22:47.346 A:middle
To use NSUserActivity to inform

00:22:47.346 --> 00:22:49.066 A:middle
ranking you need to relate them

00:22:49.066 --> 00:22:50.346 A:middle
to the CSSearchableItems that

00:22:50.346 --> 00:22:50.906 A:middle
you index.

00:22:55.276 --> 00:22:57.656 A:middle
To do this when you create your

00:22:58.076 --> 00:23:00.206 A:middle
NSUserActivity you also create

00:23:00.246 --> 00:23:01.846 A:middle
an attribute set.

00:23:03.116 --> 00:23:04.496 A:middle
You set properties on the

00:23:04.496 --> 00:23:06.256 A:middle
attribute set and then you set

00:23:06.256 --> 00:23:08.536 A:middle
the related unique identifier or

00:23:08.536 --> 00:23:09.896 A:middle
if you don't want the lifetime

00:23:09.896 --> 00:23:12.926 A:middle
of your NSUserActivity tied to

00:23:12.926 --> 00:23:15.016 A:middle
your Core Spotlight items use

00:23:15.016 --> 00:23:16.076 A:middle
the [inaudible] related unique

00:23:16.936 --> 00:23:18.176 A:middle
identifier instead.

00:23:19.916 --> 00:23:21.396 A:middle
Then you mark your user activity

00:23:21.396 --> 00:23:24.416 A:middle
as eligible for search and you

00:23:24.606 --> 00:23:26.176 A:middle
set the attribute set on the

00:23:26.176 --> 00:23:26.766 A:middle
user activity.

00:23:28.186 --> 00:23:32.306 A:middle
The many reasons to delete items

00:23:32.446 --> 00:23:34.046 A:middle
from reacting to user's actions

00:23:34.436 --> 00:23:35.766 A:middle
to getting rid of stale content.

00:23:36.666 --> 00:23:38.036 A:middle
Using the Core Spotlight API you

00:23:38.036 --> 00:23:40.586 A:middle
can delete specific items by

00:23:40.586 --> 00:23:41.536 A:middle
their identifiers.

00:23:41.916 --> 00:23:43.816 A:middle
For example, if the user deletes

00:23:43.816 --> 00:23:44.336 A:middle
a document.

00:23:44.496 --> 00:23:46.366 A:middle
You can delete groups of items

00:23:46.366 --> 00:23:48.056 A:middle
by their domain identifier which

00:23:48.056 --> 00:23:49.356 A:middle
can be useful if the user signs

00:23:49.356 --> 00:23:50.906 A:middle
out of account or ends a

00:23:50.906 --> 00:23:51.986 A:middle
subscription and you want to

00:23:51.986 --> 00:23:53.586 A:middle
remove all content for it.

00:23:53.586 --> 00:23:55.216 A:middle
You can also use this to delete

00:23:55.216 --> 00:23:56.316 A:middle
NSUserActivities that you've

00:23:56.316 --> 00:23:58.096 A:middle
indexed if you set the domain

00:23:58.096 --> 00:24:00.566 A:middle
identifier on them.

00:24:00.566 --> 00:24:02.646 A:middle
Finally, you can delete all

00:24:02.736 --> 00:24:03.666 A:middle
searchable items for your

00:24:03.666 --> 00:24:05.586 A:middle
applications, which is useful if

00:24:05.586 --> 00:24:06.616 A:middle
you have a version change and

00:24:06.616 --> 00:24:07.856 A:middle
you need to restart indexing.

00:24:08.116 --> 00:24:09.306 A:middle
This is also called on your

00:24:09.306 --> 00:24:11.206 A:middle
behalf when the user deletes an

00:24:11.206 --> 00:24:11.796 A:middle
application.

00:24:11.856 --> 00:24:16.006 A:middle
Now let's get into the details

00:24:16.006 --> 00:24:17.206 A:middle
of indexing Core Spotlight.

00:24:17.206 --> 00:24:19.326 A:middle
Let's start with how to register

00:24:19.326 --> 00:24:21.496 A:middle
as an index delete and then talk

00:24:21.496 --> 00:24:22.976 A:middle
about how to build a Core

00:24:22.976 --> 00:24:24.536 A:middle
Spotlight extension which does

00:24:24.536 --> 00:24:26.866 A:middle
the job of a delegate when your

00:24:26.866 --> 00:24:27.626 A:middle
app isn't running.

00:24:27.626 --> 00:24:29.776 A:middle
We'll talk about how client

00:24:29.776 --> 00:24:31.296 A:middle
state works and how you can use

00:24:31.296 --> 00:24:32.926 A:middle
it to make indexing robust and

00:24:32.926 --> 00:24:33.366 A:middle
efficient.

00:24:34.046 --> 00:24:35.096 A:middle
And we'll discuss some

00:24:35.096 --> 00:24:36.296 A:middle
performance considerations.

00:24:40.496 --> 00:24:42.206 A:middle
Registering as an index delegate

00:24:42.296 --> 00:24:44.166 A:middle
lets Spotlight reach out to your

00:24:44.166 --> 00:24:46.226 A:middle
app when we need you to take

00:24:46.226 --> 00:24:46.696 A:middle
action.

00:24:47.566 --> 00:24:48.616 A:middle
It lets us request that you

00:24:48.616 --> 00:24:50.496 A:middle
index all your content or index

00:24:50.496 --> 00:24:51.396 A:middle
particular items [inaudible]

00:24:51.746 --> 00:24:55.306 A:middle
accurate and up-to-date.

00:24:55.536 --> 00:24:56.566 A:middle
It's also responsible for

00:24:56.666 --> 00:24:58.096 A:middle
responding to index throttling

00:24:58.096 --> 00:24:59.976 A:middle
and for providing Drag-and-Drop

00:25:00.536 --> 00:25:00.656 A:middle
data.

00:25:00.696 --> 00:25:01.686 A:middle
As usual, setting up the

00:25:01.686 --> 00:25:03.196 A:middle
delegate is just a single line

00:25:03.196 --> 00:25:05.986 A:middle
of code, but to be a delegate

00:25:05.986 --> 00:25:06.836 A:middle
you need to implement the

00:25:06.836 --> 00:25:08.116 A:middle
CSSearchableIndex delegate

00:25:08.116 --> 00:25:08.466 A:middle
protocol.

00:25:10.136 --> 00:25:11.796 A:middle
This is a complete protocol.

00:25:12.476 --> 00:25:13.386 A:middle
The first two methods are

00:25:13.386 --> 00:25:15.086 A:middle
required, we look at those in a

00:25:15.086 --> 00:25:16.176 A:middle
bit more detail in a moment.

00:25:16.856 --> 00:25:18.756 A:middle
The second two are optional and

00:25:18.756 --> 00:25:19.816 A:middle
let you know that indexing has

00:25:19.816 --> 00:25:21.116 A:middle
been slowed down to favor

00:25:21.116 --> 00:25:23.316 A:middle
foreground activity giving you

00:25:23.316 --> 00:25:24.586 A:middle
the option of stopping any

00:25:24.586 --> 00:25:25.926 A:middle
noncritical indexing and

00:25:25.926 --> 00:25:27.646 A:middle
focusing on the most important

00:25:27.646 --> 00:25:28.006 A:middle
items.

00:25:28.466 --> 00:25:31.486 A:middle
And finally, there are the two

00:25:31.486 --> 00:25:32.696 A:middle
methods for Drag-and-Drop that

00:25:32.696 --> 00:25:33.526 A:middle
we discussed earlier.

00:25:41.146 --> 00:25:42.226 A:middle
When the index all method is

00:25:42.226 --> 00:25:43.566 A:middle
called you add everything to the

00:25:43.566 --> 00:25:44.026 A:middle
index.

00:25:44.626 --> 00:25:45.826 A:middle
And when you get the call back

00:25:45.826 --> 00:25:47.126 A:middle
for the last item you call the

00:25:47.126 --> 00:25:47.886 A:middle
acknowledgment handler.

00:25:48.316 --> 00:25:49.426 A:middle
If your app quits and is

00:25:49.426 --> 00:25:50.706 A:middle
relaunched before the handler is

00:25:50.706 --> 00:25:52.086 A:middle
called the Spotlight will call

00:25:52.086 --> 00:25:53.386 A:middle
that again with the same

00:25:53.386 --> 00:25:53.826 A:middle
callback.

00:25:54.786 --> 00:25:55.616 A:middle
When reindex items with

00:25:55.616 --> 00:25:57.056 A:middle
identifiers is called you look

00:25:57.056 --> 00:25:58.296 A:middle
up the items the Spotlight is

00:25:58.296 --> 00:25:59.986 A:middle
requesting and re-add or delete

00:25:59.986 --> 00:26:00.746 A:middle
them as appropriate.

00:26:01.206 --> 00:26:02.086 A:middle
And again, you call

00:26:02.086 --> 00:26:03.716 A:middle
acknowledgment handler only when

00:26:03.716 --> 00:26:04.686 A:middle
you've received the last

00:26:04.686 --> 00:26:06.006 A:middle
callback for any outstanding

00:26:06.006 --> 00:26:06.336 A:middle
work.

00:26:06.736 --> 00:26:10.606 A:middle
The Core Spotlight extension

00:26:10.686 --> 00:26:12.306 A:middle
implements a CSSearchableIndex

00:26:12.306 --> 00:26:14.126 A:middle
delegate protocol and allows

00:26:14.126 --> 00:26:15.356 A:middle
callbacks to happen when your

00:26:15.356 --> 00:26:16.126 A:middle
app is not running.

00:26:17.836 --> 00:26:19.096 A:middle
This gets your content back into

00:26:19.096 --> 00:26:20.816 A:middle
Spotlight as quickly as possible

00:26:20.816 --> 00:26:22.216 A:middle
after the user is restored from

00:26:22.216 --> 00:26:24.036 A:middle
backup or when disaster recovery

00:26:24.036 --> 00:26:24.396 A:middle
is needed.

00:26:25.176 --> 00:26:26.476 A:middle
The Core Spotlight extension

00:26:26.476 --> 00:26:27.836 A:middle
will be called before your items

00:26:27.836 --> 00:26:29.416 A:middle
expire allowing you to update

00:26:29.416 --> 00:26:30.746 A:middle
them if necessary, even if the

00:26:30.796 --> 00:26:32.406 A:middle
user happens to not be using

00:26:32.406 --> 00:26:33.146 A:middle
your application.

00:26:34.026 --> 00:26:36.396 A:middle
Since the interface extension is

00:26:36.396 --> 00:26:37.376 A:middle
the same as for the index

00:26:37.376 --> 00:26:38.956 A:middle
delegate it's best to factor

00:26:38.956 --> 00:26:40.136 A:middle
your code so that you can share

00:26:40.136 --> 00:26:40.946 A:middle
the implementation.

00:26:41.176 --> 00:26:42.766 A:middle
And ideally, the shared

00:26:42.766 --> 00:26:44.016 A:middle
implementation will live in the

00:26:44.016 --> 00:26:44.536 A:middle
framework.

00:26:45.596 --> 00:26:46.616 A:middle
Remember also that the Core

00:26:46.616 --> 00:26:48.056 A:middle
Spotlight extension is critical

00:26:48.056 --> 00:26:49.186 A:middle
to support Drag-and-Drop.

00:26:49.776 --> 00:26:51.066 A:middle
If you don't have an extension

00:26:51.066 --> 00:26:52.506 A:middle
there will be nothing to call

00:26:52.746 --> 00:26:55.386 A:middle
when the user drops an item for

00:26:55.386 --> 00:26:56.676 A:middle
your application in another app.

00:26:56.676 --> 00:27:00.916 A:middle
Well you can get the indexing

00:27:00.916 --> 00:27:02.506 A:middle
right without using client

00:27:02.506 --> 00:27:02.936 A:middle
state.

00:27:03.226 --> 00:27:05.076 A:middle
We found that it makes the task

00:27:05.106 --> 00:27:05.846 A:middle
far easier.

00:27:06.406 --> 00:27:07.896 A:middle
Client state allows you to keep

00:27:07.896 --> 00:27:09.326 A:middle
Spotlight and your own database

00:27:09.326 --> 00:27:11.826 A:middle
in sync without redundant work.

00:27:14.816 --> 00:27:16.106 A:middle
Client state is an opaque

00:27:16.106 --> 00:27:16.776 A:middle
Spotlight.

00:27:17.416 --> 00:27:18.886 A:middle
What it is is your choice.

00:27:19.616 --> 00:27:21.116 A:middle
It's often a simple integer

00:27:21.346 --> 00:27:24.026 A:middle
denoting a sequence number which

00:27:24.166 --> 00:27:25.916 A:middle
could be in a marker in a

00:27:25.916 --> 00:27:27.766 A:middle
database journal, but we've seen

00:27:27.766 --> 00:27:29.086 A:middle
more complex cases as well.

00:27:30.306 --> 00:27:31.386 A:middle
Let's look at how this works.

00:27:33.486 --> 00:27:34.756 A:middle
Your app sends batches to Core

00:27:34.756 --> 00:27:36.276 A:middle
Spotlight, each batch is

00:27:36.306 --> 00:27:37.916 A:middle
journaled with the client state.

00:27:38.796 --> 00:27:39.656 A:middle
When the batch has been

00:27:40.146 --> 00:27:41.486 A:middle
committed to the journal your

00:27:41.486 --> 00:27:42.896 A:middle
callback log is called letting

00:27:42.896 --> 00:27:44.026 A:middle
you know that the batch has been

00:27:44.026 --> 00:27:44.486 A:middle
received.

00:27:45.016 --> 00:27:47.316 A:middle
So here the app is just indexing

00:27:47.316 --> 00:27:50.096 A:middle
a new batch, but disaster

00:27:50.096 --> 00:27:51.506 A:middle
strikes and the app crashes.

00:27:52.826 --> 00:27:53.866 A:middle
Now what happened to the data

00:27:53.866 --> 00:27:55.516 A:middle
that was in flight, did it make

00:27:55.516 --> 00:27:56.236 A:middle
it to the index?

00:27:56.746 --> 00:27:59.166 A:middle
With client state, you can find

00:28:00.226 --> 00:28:00.306 A:middle
out.

00:28:00.576 --> 00:28:01.986 A:middle
When your app starts again you

00:28:01.986 --> 00:28:03.696 A:middle
request the client state.

00:28:04.186 --> 00:28:05.586 A:middle
Here you get state two back

00:28:05.656 --> 00:28:07.386 A:middle
since this was last state that

00:28:07.386 --> 00:28:08.466 A:middle
actually made it into the

00:28:08.466 --> 00:28:09.986 A:middle
journal and you can restart

00:28:09.986 --> 00:28:11.346 A:middle
indexing at just the right

00:28:11.346 --> 00:28:11.666 A:middle
point.

00:28:12.306 --> 00:28:15.046 A:middle
If the data had already made it

00:28:15.046 --> 00:28:16.306 A:middle
to the Core Spotlight process

00:28:16.306 --> 00:28:17.446 A:middle
when the crash happened you

00:28:17.446 --> 00:28:18.456 A:middle
could continue it from state

00:28:18.456 --> 00:28:19.836 A:middle
three instead, so you do the

00:28:19.836 --> 00:28:20.886 A:middle
minimal amount of work.

00:28:21.916 --> 00:28:24.156 A:middle
To store client state, you need

00:28:24.156 --> 00:28:25.306 A:middle
to create a named index.

00:28:25.786 --> 00:28:27.116 A:middle
You can't use the default

00:28:27.116 --> 00:28:27.636 A:middle
instance.

00:28:28.546 --> 00:28:30.196 A:middle
The name lets us know which

00:28:30.196 --> 00:28:31.816 A:middle
states to fetch which is

00:28:31.816 --> 00:28:33.446 A:middle
required because some apps need

00:28:33.446 --> 00:28:34.346 A:middle
more than one token.

00:28:34.616 --> 00:28:35.526 A:middle
For example, because they're

00:28:35.526 --> 00:28:36.466 A:middle
multiple databases.

00:28:37.586 --> 00:28:39.536 A:middle
So, in your code first you

00:28:39.536 --> 00:28:40.896 A:middle
create a named index instance,

00:28:41.746 --> 00:28:44.716 A:middle
you'll begin an index batch, you

00:28:44.946 --> 00:28:46.456 A:middle
add searchable items as usual,

00:28:46.966 --> 00:28:49.106 A:middle
and then you compute the state

00:28:49.106 --> 00:28:50.016 A:middle
that you want to save.

00:28:51.306 --> 00:28:53.606 A:middle
Finally, you end the batch with

00:28:53.606 --> 00:28:55.326 A:middle
your opaque state and pay

00:28:55.326 --> 00:28:57.026 A:middle
attention to any errors returned

00:28:57.026 --> 00:28:58.036 A:middle
with the completion handler.

00:28:58.526 --> 00:29:01.556 A:middle
So, at some later point when

00:29:01.556 --> 00:29:03.016 A:middle
you're app or extension starts

00:29:04.066 --> 00:29:05.516 A:middle
use client state to resume

00:29:05.516 --> 00:29:05.976 A:middle
indexing.

00:29:06.486 --> 00:29:09.496 A:middle
You fetch the client state and

00:29:09.496 --> 00:29:10.996 A:middle
you compare it to the current

00:29:10.996 --> 00:29:12.826 A:middle
state doing whatever work is

00:29:12.826 --> 00:29:14.096 A:middle
needed to bring them in sync.

00:29:14.486 --> 00:29:18.406 A:middle
So, in your code you create an

00:29:18.406 --> 00:29:19.536 A:middle
index instance for the same

00:29:19.536 --> 00:29:22.376 A:middle
name, you fetch the client

00:29:22.676 --> 00:29:25.126 A:middle
state, you examine the state

00:29:25.756 --> 00:29:26.846 A:middle
after dealing with any errors,

00:29:27.526 --> 00:29:29.746 A:middle
and then you just pick up where

00:29:29.746 --> 00:29:31.316 A:middle
you left off if required.

00:29:31.556 --> 00:29:34.156 A:middle
And so, you can replay exactly

00:29:34.156 --> 00:29:35.286 A:middle
the operations that are needed

00:29:35.286 --> 00:29:36.796 A:middle
to bring your index and Core

00:29:36.796 --> 00:29:37.736 A:middle
Spotlight in sync.

00:29:41.336 --> 00:29:42.556 A:middle
Let's talk some more about

00:29:42.556 --> 00:29:43.566 A:middle
indexing performance.

00:29:44.236 --> 00:29:46.036 A:middle
Indexing is a background task

00:29:46.036 --> 00:29:47.226 A:middle
and you don't want to slow down

00:29:47.226 --> 00:29:48.846 A:middle
your app or the device with

00:29:48.846 --> 00:29:49.526 A:middle
indexing work.

00:29:50.076 --> 00:29:53.476 A:middle
So, minimize overhead, optimize

00:29:53.476 --> 00:29:55.296 A:middle
any access to the file system or

00:29:55.296 --> 00:29:58.026 A:middle
databases that you have to do in

00:29:58.026 --> 00:29:58.976 A:middle
order to create items.

00:29:59.626 --> 00:30:01.536 A:middle
And remember that each call to

00:30:01.536 --> 00:30:03.166 A:middle
Core Spotlight carries overhead.

00:30:03.856 --> 00:30:06.306 A:middle
So, has batches of items instead

00:30:06.306 --> 00:30:08.236 A:middle
of single items whenever it's

00:30:08.446 --> 00:30:08.846 A:middle
possible.

00:30:09.476 --> 00:30:11.706 A:middle
That said, consider that memory

00:30:11.706 --> 00:30:15.326 A:middle
is limited, so keep your batches

00:30:15.326 --> 00:30:16.416 A:middle
reasonably small.

00:30:16.576 --> 00:30:18.056 A:middle
Even batching just 10 items

00:30:18.056 --> 00:30:19.676 A:middle
decreases the overhead by an

00:30:19.676 --> 00:30:20.426 A:middle
order of magnitude.

00:30:21.126 --> 00:30:23.016 A:middle
And it's often more efficient to

00:30:23.016 --> 00:30:25.286 A:middle
give multiple batches in flight

00:30:25.286 --> 00:30:27.106 A:middle
in the pipeline manner than to

00:30:27.316 --> 00:30:30.296 A:middle
use a single large batch.

00:30:30.296 --> 00:30:31.516 A:middle
This allows indexing to happen

00:30:31.516 --> 00:30:33.756 A:middle
in parallel with your work.

00:30:34.046 --> 00:30:35.336 A:middle
Sine your app will be indexing

00:30:36.016 --> 00:30:38.196 A:middle
while it's in use don't block

00:30:38.196 --> 00:30:38.766 A:middle
the main thread.

00:30:38.866 --> 00:30:40.896 A:middle
And finally, index on a

00:30:40.896 --> 00:30:42.356 A:middle
background queue this will help

00:30:42.356 --> 00:30:43.676 A:middle
with power and responsiveness.

00:30:44.246 --> 00:30:47.576 A:middle
To get a great presentation in

00:30:47.576 --> 00:30:49.136 A:middle
Spotlight you want to set a good

00:30:49.136 --> 00:30:49.596 A:middle
thumbnail.

00:30:51.006 --> 00:30:52.506 A:middle
By default, Spotlight will use

00:30:52.506 --> 00:30:54.066 A:middle
your app icon, which makes it

00:30:54.106 --> 00:30:55.446 A:middle
hard to distinguish results at a

00:30:55.446 --> 00:30:55.946 A:middle
glance.

00:30:56.846 --> 00:30:59.116 A:middle
Just as important the thumbnail

00:30:59.116 --> 00:31:01.306 A:middle
is a title, the title is not

00:31:01.306 --> 00:31:03.056 A:middle
just created visually, it's also

00:31:03.056 --> 00:31:04.176 A:middle
what users most frequently

00:31:04.176 --> 00:31:04.896 A:middle
search on.

00:31:05.366 --> 00:31:07.426 A:middle
After the thumbnail and the

00:31:07.426 --> 00:31:09.056 A:middle
title, you're going to set other

00:31:09.056 --> 00:31:10.286 A:middle
fields that are suitable for

00:31:10.286 --> 00:31:11.326 A:middle
your contact.

00:31:12.636 --> 00:31:14.256 A:middle
Your description creates a much

00:31:14.256 --> 00:31:16.196 A:middle
richer result and providing the

00:31:16.196 --> 00:31:17.866 A:middle
content creation date can be

00:31:17.866 --> 00:31:20.376 A:middle
very helpful as well.

00:31:20.376 --> 00:31:22.216 A:middle
Where appropriate, rating and

00:31:22.216 --> 00:31:23.776 A:middle
rating description can make a

00:31:23.776 --> 00:31:24.446 A:middle
big difference.

00:31:24.866 --> 00:31:26.616 A:middle
And if you know the location for

00:31:26.616 --> 00:31:28.036 A:middle
something, setting the location

00:31:28.036 --> 00:31:29.246 A:middle
name can be a very nice touch.

00:31:29.746 --> 00:31:35.426 A:middle
So, set a title, provide a great

00:31:35.426 --> 00:31:37.386 A:middle
thumbnail, and set the right

00:31:37.416 --> 00:31:39.466 A:middle
content type for your content.

00:31:40.076 --> 00:31:41.136 A:middle
Then fill out the UI with

00:31:41.136 --> 00:31:42.456 A:middle
additional metadata to write a

00:31:42.456 --> 00:31:43.746 A:middle
great visual representation of

00:31:43.746 --> 00:31:44.326 A:middle
your content.

00:31:44.896 --> 00:31:46.676 A:middle
And remember that setting the

00:31:46.676 --> 00:31:48.076 A:middle
right metadata isn't just about

00:31:48.076 --> 00:31:50.416 A:middle
looks it also affects behavior,

00:31:50.996 --> 00:31:53.726 A:middle
so let's take a look at that.

00:31:53.896 --> 00:31:55.236 A:middle
For starters, enabling quick

00:31:55.236 --> 00:31:56.536 A:middle
actions like directions and

00:31:56.536 --> 00:31:57.946 A:middle
calling makes the user interface

00:31:57.946 --> 00:31:59.866 A:middle
richer and provides great value

00:31:59.866 --> 00:32:00.486 A:middle
to the user.

00:32:01.476 --> 00:32:03.176 A:middle
To support navigation, you set

00:32:03.216 --> 00:32:04.566 A:middle
the latitude and longitude

00:32:04.566 --> 00:32:06.226 A:middle
attributes and set supports

00:32:06.226 --> 00:32:07.906 A:middle
navigation to true.

00:32:08.366 --> 00:32:10.136 A:middle
Similarly, to support phone

00:32:10.136 --> 00:32:11.706 A:middle
calls, you need to set the phone

00:32:11.706 --> 00:32:13.516 A:middle
numbers attribute and set

00:32:13.516 --> 00:32:14.806 A:middle
supports navigation to true

00:32:15.506 --> 00:32:17.506 A:middle
sorry, and set phone call to

00:32:17.506 --> 00:32:17.696 A:middle
true.

00:32:18.486 --> 00:32:21.026 A:middle
Setting attributes that the user

00:32:21.026 --> 00:32:22.856 A:middle
can understand makes it easy to

00:32:22.856 --> 00:32:23.356 A:middle
search.

00:32:23.866 --> 00:32:24.916 A:middle
And setting attributes that

00:32:24.916 --> 00:32:26.146 A:middle
aren't naturally associated with

00:32:26.146 --> 00:32:27.556 A:middle
the item makes it hard to search

00:32:27.556 --> 00:32:28.646 A:middle
and leads to poor ranking of

00:32:28.646 --> 00:32:29.336 A:middle
your results.

00:32:29.746 --> 00:32:31.996 A:middle
By setting contact identifiers,

00:32:32.566 --> 00:32:34.016 A:middle
you can enable focus contact

00:32:34.016 --> 00:32:35.666 A:middle
search which is a great way to

00:32:35.876 --> 00:32:38.076 A:middle
get the user to your content.

00:32:39.376 --> 00:32:40.646 A:middle
Supporting features like

00:32:40.646 --> 00:32:42.756 A:middle
Drag-and-Drop and Quick Actions

00:32:43.856 --> 00:32:44.796 A:middle
makes for a first-class

00:32:44.796 --> 00:32:45.406 A:middle
experience.

00:32:46.636 --> 00:32:48.086 A:middle
Another part of experiences is

00:32:48.086 --> 00:32:49.116 A:middle
being able to engage with

00:32:49.116 --> 00:32:49.676 A:middle
[inaudible] in your own

00:32:49.676 --> 00:32:52.286 A:middle
application, so let's look at

00:32:53.096 --> 00:32:53.236 A:middle
that.

00:32:53.416 --> 00:32:54.396 A:middle
Make sure launching from

00:32:54.396 --> 00:32:55.906 A:middle
Spotlight is fast and that it

00:32:55.906 --> 00:32:57.156 A:middle
takes the user directly to the

00:32:57.156 --> 00:32:57.876 A:middle
found items.

00:32:59.206 --> 00:33:00.706 A:middle
Use NSUserActivity to restore

00:33:00.706 --> 00:33:03.016 A:middle
the state, your app delegate

00:33:03.016 --> 00:33:04.296 A:middle
will be called a continuous

00:33:04.296 --> 00:33:06.096 A:middle
activity and your [inaudible]

00:33:06.096 --> 00:33:08.586 A:middle
activity type and the userInfo

00:33:08.586 --> 00:33:09.686 A:middle
dictionary is necessary.

00:33:09.946 --> 00:33:10.956 A:middle
If you're being launched because

00:33:10.956 --> 00:33:11.716 A:middle
the user selected a

00:33:11.716 --> 00:33:13.286 A:middle
CSSearchableItem in Spotlight

00:33:13.286 --> 00:33:15.296 A:middle
the activity type will be the

00:33:15.406 --> 00:33:18.226 A:middle
CSSearchableItem action type and

00:33:18.386 --> 00:33:20.666 A:middle
the unique identifier can be

00:33:20.666 --> 00:33:21.726 A:middle
retrieved from the userInfo

00:33:21.726 --> 00:33:22.696 A:middle
dictionary by using

00:33:22.776 --> 00:33:24.136 A:middle
CSSearchableItem activity

00:33:24.136 --> 00:33:24.856 A:middle
identifier.

00:33:26.056 --> 00:33:27.266 A:middle
Another reason for being

00:33:27.266 --> 00:33:29.946 A:middle
launched is that the user wants

00:33:29.946 --> 00:33:31.476 A:middle
to continue the search in your

00:33:31.476 --> 00:33:32.026 A:middle
application.

00:33:32.596 --> 00:33:33.656 A:middle
In that case, you get the

00:33:33.656 --> 00:33:35.376 A:middle
CSQueryContinuation action type

00:33:35.896 --> 00:33:38.266 A:middle
and you can retrieve the search

00:33:38.266 --> 00:33:39.176 A:middle
query using the

00:33:39.176 --> 00:33:40.736 A:middle
CSSearchQueryString from the

00:33:40.736 --> 00:33:41.696 A:middle
userInfo dictionary.

00:33:42.046 --> 00:33:45.536 A:middle
Of course, the search system

00:33:45.536 --> 00:33:46.786 A:middle
wouldn't be complete without a

00:33:46.786 --> 00:33:47.316 A:middle
search API.

00:33:48.316 --> 00:33:49.636 A:middle
Core Spotlight provides the

00:33:49.636 --> 00:33:51.036 A:middle
ability to search the data that

00:33:51.036 --> 00:33:51.686 A:middle
you have provided.

00:33:52.656 --> 00:33:53.856 A:middle
It's the same search engine

00:33:53.856 --> 00:33:55.586 A:middle
that's used in many places on

00:33:55.586 --> 00:33:56.076 A:middle
the system.

00:33:56.856 --> 00:33:58.616 A:middle
By using it you get consistent

00:33:58.616 --> 00:33:59.906 A:middle
behavior with Spotlight and the

00:33:59.906 --> 00:34:00.926 A:middle
system applications.

00:34:01.526 --> 00:34:02.836 A:middle
It's great for all your content

00:34:02.836 --> 00:34:04.616 A:middle
on the device and of course, it

00:34:04.616 --> 00:34:06.346 A:middle
works in both iOS and macOS.

00:34:06.866 --> 00:34:11.576 A:middle
You can query for equality, for

00:34:11.576 --> 00:34:12.746 A:middle
greater than or less than.

00:34:13.786 --> 00:34:15.306 A:middle
So, if you want to find items

00:34:15.306 --> 00:34:16.506 A:middle
with more than a certain number

00:34:16.506 --> 00:34:18.676 A:middle
of pages the query is very short

00:34:18.676 --> 00:34:19.126 A:middle
and simple.

00:34:19.666 --> 00:34:20.966 A:middle
If you want to find all items

00:34:20.966 --> 00:34:22.046 A:middle
with page count in a certain

00:34:22.046 --> 00:34:23.466 A:middle
range you can use the InRange

00:34:23.466 --> 00:34:23.966 A:middle
operator.

00:34:23.966 --> 00:34:26.146 A:middle
You can use Boolean operators

00:34:26.216 --> 00:34:27.456 A:middle
for example, to select only

00:34:27.456 --> 00:34:29.476 A:middle
items for the given width and

00:34:29.476 --> 00:34:29.696 A:middle
height.

00:34:30.396 --> 00:34:32.396 A:middle
You can use string matching with

00:34:32.396 --> 00:34:33.606 A:middle
flags that makes Spotlight's

00:34:33.606 --> 00:34:35.076 A:middle
matching more or less strict.

00:34:36.016 --> 00:34:37.416 A:middle
From use in case insensitive

00:34:37.516 --> 00:34:38.136 A:middle
word matching [inaudible]

00:34:38.136 --> 00:34:40.136 A:middle
insensitive matching to other

00:34:40.136 --> 00:34:42.046 A:middle
combinations of flags or to

00:34:42.046 --> 00:34:43.556 A:middle
strict matching of full fields.

00:34:45.316 --> 00:34:46.326 A:middle
Or you can make your matching

00:34:46.326 --> 00:34:47.866 A:middle
very laxed and treat each word

00:34:47.866 --> 00:34:48.846 A:middle
as an individual query.

00:34:49.576 --> 00:34:50.926 A:middle
This is what Spotlight itself

00:34:50.926 --> 00:34:52.296 A:middle
does so if you want to be

00:34:52.296 --> 00:34:54.246 A:middle
consistent it's a good place to

00:34:54.246 --> 00:34:54.586 A:middle
start.

00:34:55.196 --> 00:34:57.346 A:middle
And of course, if this doesn't

00:34:57.346 --> 00:34:59.146 A:middle
suit your own application you

00:34:59.146 --> 00:35:00.636 A:middle
can combine and mix-and-match as

00:35:00.636 --> 00:35:00.996 A:middle
you like.

00:35:04.496 --> 00:35:06.156 A:middle
Core Spotlight supports a full

00:35:06.156 --> 00:35:07.716 A:middle
range of operators for

00:35:07.896 --> 00:35:09.456 A:middle
comparison and Boolean logic and

00:35:09.456 --> 00:35:10.286 A:middle
of course, you can nest

00:35:10.286 --> 00:35:11.666 A:middle
expressions using parentheses.

00:35:12.066 --> 00:35:13.306 A:middle
The field wildcard will match

00:35:13.306 --> 00:35:15.426 A:middle
any default search metadata and

00:35:15.426 --> 00:35:16.806 A:middle
the double wildcard will match

00:35:16.806 --> 00:35:18.216 A:middle
that, as well as text content.

00:35:18.636 --> 00:35:21.326 A:middle
We have a number of options for

00:35:21.326 --> 00:35:22.056 A:middle
string matching.

00:35:22.376 --> 00:35:23.886 A:middle
Our index is heavily optimized

00:35:23.886 --> 00:35:25.456 A:middle
for exact and prefix search and

00:35:25.506 --> 00:35:27.396 A:middle
it's incredibly fast if you use

00:35:27.876 --> 00:35:28.046 A:middle
these.

00:35:28.696 --> 00:35:30.376 A:middle
As a general rule, the longer

00:35:30.376 --> 00:35:33.116 A:middle
the prefix the faster the query.

00:35:34.046 --> 00:35:35.616 A:middle
Partial matching is very similar

00:35:35.616 --> 00:35:37.416 A:middle
to prefix matching, depending on

00:35:37.416 --> 00:35:39.396 A:middle
the string whichever has your

00:35:39.396 --> 00:35:42.296 A:middle
results is faster.

00:35:42.386 --> 00:35:43.896 A:middle
Phrase matching which means

00:35:43.896 --> 00:35:45.196 A:middle
matching only on consecutive

00:35:45.196 --> 00:35:46.876 A:middle
words is significantly more

00:35:46.876 --> 00:35:47.396 A:middle
expensive.

00:35:48.766 --> 00:35:50.146 A:middle
And finally, suffix and infix

00:35:50.146 --> 00:35:51.536 A:middle
matching are all slower and

00:35:51.536 --> 00:35:52.806 A:middle
using phrase matching combined

00:35:52.806 --> 00:35:55.086 A:middle
with these multiplies the cost.

00:35:56.696 --> 00:35:58.446 A:middle
The query syntax also offers a

00:35:58.446 --> 00:35:59.856 A:middle
set of flags that you can apply

00:36:00.046 --> 00:36:00.886 A:middle
to make the matching less

00:36:00.886 --> 00:36:01.306 A:middle
strict.

00:36:01.746 --> 00:36:03.696 A:middle
The C is for case insensitive, D

00:36:03.696 --> 00:36:04.976 A:middle
is for diacritics insensitive,

00:36:05.236 --> 00:36:09.166 A:middle
which means that characters like

00:36:09.166 --> 00:36:10.976 A:middle
an over [inaudible] can still be

00:36:10.976 --> 00:36:12.326 A:middle
matched with an old character if

00:36:12.426 --> 00:36:14.046 A:middle
the user is using the English

00:36:14.046 --> 00:36:14.416 A:middle
locale.

00:36:15.776 --> 00:36:17.706 A:middle
Word matching means that we

00:36:17.706 --> 00:36:19.606 A:middle
match words internal to fields

00:36:19.606 --> 00:36:21.246 A:middle
instead of just being anchored

00:36:21.246 --> 00:36:22.166 A:middle
at the beginning of a field.

00:36:22.256 --> 00:36:24.516 A:middle
And T for tokenized breaks out

00:36:24.516 --> 00:36:25.656 A:middle
the individual words of the

00:36:25.656 --> 00:36:26.056 A:middle
query.

00:36:27.496 --> 00:36:28.886 A:middle
So, let's look at an example.

00:36:30.636 --> 00:36:31.786 A:middle
We're implementing a search

00:36:31.786 --> 00:36:33.046 A:middle
function that takes a user query

00:36:33.046 --> 00:36:33.566 A:middle
as input.

00:36:34.786 --> 00:36:36.166 A:middle
First, we make sure to cancel

00:36:36.166 --> 00:36:37.846 A:middle
any currently running query so

00:36:37.846 --> 00:36:38.736 A:middle
that we don't have multiple

00:36:38.736 --> 00:36:40.066 A:middle
concurrent queries as this will

00:36:40.066 --> 00:36:41.066 A:middle
slow down the new query.

00:36:41.606 --> 00:36:42.876 A:middle
Since it's user input we make

00:36:42.876 --> 00:36:44.256 A:middle
sure to state the query string.

00:36:44.776 --> 00:36:47.736 A:middle
We then use the double star

00:36:47.736 --> 00:36:51.496 A:middle
syntax with cdwmt operators to

00:36:51.546 --> 00:36:53.056 A:middle
make a very forgiving query.

00:36:53.516 --> 00:36:57.286 A:middle
We create the query object

00:36:57.856 --> 00:36:59.076 A:middle
specifying that we want to fetch

00:36:59.076 --> 00:36:59.806 A:middle
the display names.

00:37:00.346 --> 00:37:02.736 A:middle
We set the found items handler

00:37:03.246 --> 00:37:05.036 A:middle
and then we set the completion

00:37:05.036 --> 00:37:05.296 A:middle
handler.

00:37:06.576 --> 00:37:09.966 A:middle
The completion handler will get

00:37:09.966 --> 00:37:11.056 A:middle
called only when there are no

00:37:11.056 --> 00:37:12.576 A:middle
more results to receive from the

00:37:12.576 --> 00:37:14.516 A:middle
query while the found items

00:37:14.516 --> 00:37:15.796 A:middle
handler can be called with

00:37:15.796 --> 00:37:17.106 A:middle
multiple batches of results.

00:37:17.786 --> 00:37:19.886 A:middle
After that all they need to do

00:37:19.886 --> 00:37:21.296 A:middle
is start the query, that's how

00:37:21.296 --> 00:37:22.816 A:middle
easy it is to use the Core

00:37:22.816 --> 00:37:23.706 A:middle
Spotlight search API.

00:37:29.066 --> 00:37:30.656 A:middle
So, in summary Core Spotlight is

00:37:30.656 --> 00:37:31.986 A:middle
now available for the Mac, as

00:37:31.986 --> 00:37:34.096 A:middle
well as iOS and it's great for

00:37:34.096 --> 00:37:35.166 A:middle
all your managed content.

00:37:36.096 --> 00:37:37.696 A:middle
Please adopt the new APIs or

00:37:37.696 --> 00:37:40.136 A:middle
previews for Drag-and-Drop on

00:37:40.136 --> 00:37:41.406 A:middle
both iOS and macOS.

00:37:42.156 --> 00:37:43.556 A:middle
Provide a rich metadata for

00:37:43.556 --> 00:37:45.466 A:middle
search, display and ranking.

00:37:45.846 --> 00:37:48.416 A:middle
And use NSUserActivity to

00:37:48.416 --> 00:37:49.646 A:middle
provide usage information.

00:37:50.136 --> 00:37:52.676 A:middle
And as always, keep the index

00:37:52.676 --> 00:37:54.106 A:middle
accurate and up-to-date by

00:37:54.106 --> 00:37:55.806 A:middle
implementing indexing extension

00:37:56.406 --> 00:37:58.646 A:middle
and taking advantage of client

00:37:59.236 --> 00:37:59.366 A:middle
state.

00:38:01.186 --> 00:38:02.796 A:middle
For more information, visit

00:38:02.796 --> 00:38:06.876 A:middle
developer.apple.com and you can

00:38:06.876 --> 00:38:08.236 A:middle
also watch some sessions from

00:38:08.236 --> 00:38:09.816 A:middle
earlier in the week if you're

00:38:09.886 --> 00:38:11.496 A:middle
interested in Drag-and-Drop,

00:38:11.566 --> 00:38:13.036 A:middle
introducing Drag-and-Drop, as

00:38:13.086 --> 00:38:14.506 A:middle
well as mastering Drag-and-Drop

00:38:15.056 --> 00:38:15.796 A:middle
would be recommended.

00:38:15.936 --> 00:38:17.936 A:middle
And if you want to know about

00:38:17.936 --> 00:38:19.246 A:middle
how CoreData and Core Spotlight

00:38:19.246 --> 00:38:21.286 A:middle
interact the session on what's

00:38:21.286 --> 00:38:23.206 A:middle
new in CoreData is great to

00:38:23.206 --> 00:38:23.556 A:middle
watch.

00:38:24.536 --> 00:38:25.836 A:middle
Thank you very much.