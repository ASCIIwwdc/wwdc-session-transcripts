WEBVTT

00:00:07.516 --> 00:00:15.500 A:middle
[ Cheering ]

00:00:21.516 --> 00:00:27.500 A:middle
[ Applause ]

00:00:29.206 --> 00:00:29.956 A:middle
&gt;&gt; Hello, everyone.

00:00:30.306 --> 00:00:31.546 A:middle
Welcome to Engineering for

00:00:31.546 --> 00:00:32.246 A:middle
Testability.

00:00:33.256 --> 00:00:34.546 A:middle
My name is Brian Croom, and I

00:00:34.546 --> 00:00:36.306 A:middle
work on the Xcode Team.

00:00:37.356 --> 00:00:38.846 A:middle
My colleague Greg and I, want to

00:00:38.846 --> 00:00:39.786 A:middle
share some things that we've

00:00:39.786 --> 00:00:41.896 A:middle
been learning about testability

00:00:42.046 --> 00:00:42.946 A:middle
and what it means for the

00:00:42.946 --> 00:00:45.486 A:middle
process of developing great

00:00:48.826 --> 00:00:48.936 A:middle
apps.

00:00:49.136 --> 00:00:50.776 A:middle
I'll start by talking about what

00:00:50.776 --> 00:00:52.296 A:middle
it means for an app's code to be

00:00:52.346 --> 00:00:52.766 A:middle
testable.

00:00:53.686 --> 00:00:55.316 A:middle
And we'll see some examples of

00:00:55.316 --> 00:00:56.476 A:middle
techniques that can be applied

00:00:56.546 --> 00:00:58.376 A:middle
to improving testability of an

00:00:58.376 --> 00:00:59.746 A:middle
existing code.

00:01:01.276 --> 00:01:03.286 A:middle
Then Gregg will come up, and

00:01:03.286 --> 00:01:04.616 A:middle
talk about some ways of working

00:01:04.616 --> 00:01:06.196 A:middle
with your test suite to help

00:01:06.196 --> 00:01:08.146 A:middle
ensure that it helps support the

00:01:08.146 --> 00:01:09.986 A:middle
development of your app, even as

00:01:09.986 --> 00:01:11.516 A:middle
it grows in size and complexity.

00:01:14.256 --> 00:01:15.786 A:middle
So, let's dive in, and talk

00:01:15.786 --> 00:01:16.896 A:middle
about testability.

00:01:17.346 --> 00:01:20.616 A:middle
I remember a while back, when I

00:01:20.616 --> 00:01:21.876 A:middle
was first learning about writing

00:01:22.386 --> 00:01:22.666 A:middle
tests.

00:01:23.746 --> 00:01:25.116 A:middle
I'd been hearing a lot about how

00:01:25.116 --> 00:01:26.806 A:middle
a test suite could help during

00:01:26.806 --> 00:01:27.766 A:middle
the development of my app.

00:01:27.966 --> 00:01:30.816 A:middle
How it could provide confidence,

00:01:31.176 --> 00:01:32.656 A:middle
that the code I was writing was

00:01:32.656 --> 00:01:33.906 A:middle
working the way it was supposed

00:01:34.646 --> 00:01:34.716 A:middle
to.

00:01:35.636 --> 00:01:36.766 A:middle
How it could help patch

00:01:36.826 --> 00:01:38.916 A:middle
regressions in my code as my app

00:01:39.066 --> 00:01:40.266 A:middle
grew and changed over time.

00:01:40.866 --> 00:01:43.626 A:middle
And how it could serve as

00:01:43.626 --> 00:01:45.206 A:middle
executable documentation for my

00:01:45.206 --> 00:01:45.506 A:middle
code.

00:01:46.126 --> 00:01:49.066 A:middle
But, I would start writing a

00:01:49.066 --> 00:01:51.636 A:middle
test, and get stuck before I'd

00:01:51.636 --> 00:01:52.496 A:middle
gotten very far.

00:01:53.136 --> 00:01:56.166 A:middle
It felt as if my app's code were

00:01:56.166 --> 00:01:57.976 A:middle
actively trying to prevent me

00:01:57.976 --> 00:01:58.876 A:middle
from writing the test.

00:01:59.416 --> 00:02:02.946 A:middle
It took a while, but eventually

00:02:02.946 --> 00:02:04.256 A:middle
I discovered that I was

00:02:04.256 --> 00:02:06.076 A:middle
structuring my code in a way

00:02:06.076 --> 00:02:07.236 A:middle
that interfered with effective

00:02:07.286 --> 00:02:07.500 A:middle
testing.

00:02:10.896 --> 00:02:12.386 A:middle
To explore what this means,

00:02:12.896 --> 00:02:14.056 A:middle
let's first take a look at a

00:02:14.056 --> 00:02:15.936 A:middle
unit test for some code that is

00:02:15.936 --> 00:02:18.486 A:middle
readily testable, sorting an

00:02:18.876 --> 00:02:18.946 A:middle
array.

00:02:21.456 --> 00:02:23.636 A:middle
This is a test that exercises

00:02:23.636 --> 00:02:25.186 A:middle
the Sorted Method from the Swift

00:02:25.186 --> 00:02:25.966 A:middle
Standard Library.

00:02:26.676 --> 00:02:29.796 A:middle
It begins by setting up an array

00:02:29.796 --> 00:02:30.876 A:middle
of unsorted values.

00:02:31.556 --> 00:02:35.446 A:middle
It calls the sorted method on

00:02:35.446 --> 00:02:35.926 A:middle
that array.

00:02:36.646 --> 00:02:39.556 A:middle
And then asserts that the

00:02:39.556 --> 00:02:41.606 A:middle
returned array has the values in

00:02:41.686 --> 00:02:44.996 A:middle
the expected order.

00:02:45.186 --> 00:02:47.366 A:middle
Generalizing this, we can see

00:02:47.366 --> 00:02:49.056 A:middle
that the test structure consists

00:02:49.056 --> 00:02:51.226 A:middle
of first, setting up any

00:02:51.226 --> 00:02:53.386 A:middle
required input state or values,

00:02:54.526 --> 00:02:56.136 A:middle
then, calling the code being

00:02:56.136 --> 00:02:59.386 A:middle
tested, and finally, asserting

00:02:59.386 --> 00:03:00.556 A:middle
that the returned output is

00:03:00.556 --> 00:03:01.746 A:middle
correct.

00:03:02.416 --> 00:03:04.356 A:middle
This is sometimes referred to as

00:03:04.356 --> 00:03:05.956 A:middle
the Arrange Act Assert Pattern.

00:03:06.586 --> 00:03:11.426 A:middle
So, we've seen that sorted is a

00:03:11.426 --> 00:03:13.206 A:middle
nicely testable piece of code.

00:03:14.266 --> 00:03:15.466 A:middle
But I know what you're thinking,

00:03:16.176 --> 00:03:17.396 A:middle
"My app's code doesn't have a

00:03:17.486 --> 00:03:19.426 A:middle
single sorting algorithm in it."

00:03:20.496 --> 00:03:22.056 A:middle
In my experience, most of the

00:03:22.056 --> 00:03:23.486 A:middle
code in apps, looks pretty

00:03:23.486 --> 00:03:24.306 A:middle
different than the sorting

00:03:24.306 --> 00:03:24.816 A:middle
algorithm.

00:03:25.276 --> 00:03:27.616 A:middle
Still, there are some

00:03:27.616 --> 00:03:29.326 A:middle
characteristics of the sorted

00:03:29.326 --> 00:03:31.116 A:middle
method that we can strive to

00:03:31.116 --> 00:03:32.426 A:middle
achieve in our app's code, and

00:03:32.836 --> 00:03:34.016 A:middle
to make them more testable.

00:03:35.286 --> 00:03:38.206 A:middle
Specifically, testable code

00:03:38.206 --> 00:03:39.836 A:middle
provides a way for its clients

00:03:39.836 --> 00:03:41.516 A:middle
to have control over all of the

00:03:41.516 --> 00:03:42.836 A:middle
inputs that it operates on.

00:03:43.416 --> 00:03:46.446 A:middle
It provides a way for its

00:03:46.446 --> 00:03:48.276 A:middle
clients to inspect any output

00:03:48.276 --> 00:03:49.026 A:middle
being generated.

00:03:49.656 --> 00:03:52.436 A:middle
And it avoids relying on

00:03:52.436 --> 00:03:54.166 A:middle
internal state that could affect

00:03:54.166 --> 00:03:55.346 A:middle
the code's behavior later on.

00:03:55.346 --> 00:04:02.106 A:middle
I want to use code examples to

00:04:02.416 --> 00:04:03.306 A:middle
demonstrate a couple of

00:04:03.306 --> 00:04:05.016 A:middle
techniques that can be used to

00:04:05.016 --> 00:04:06.616 A:middle
help application code take on

00:04:06.616 --> 00:04:08.636 A:middle
these characteristics, and thus,

00:04:08.636 --> 00:04:09.876 A:middle
improve its testability.

00:04:13.836 --> 00:04:15.656 A:middle
The first technique is how to

00:04:15.656 --> 00:04:16.916 A:middle
introduce protocols and

00:04:16.916 --> 00:04:18.336 A:middle
parameterization into a piece of

00:04:18.336 --> 00:04:18.500 A:middle
code.

00:04:21.406 --> 00:04:23.456 A:middle
For this example, imagine a

00:04:23.456 --> 00:04:25.466 A:middle
document browser app, that is

00:04:25.466 --> 00:04:27.056 A:middle
capable of previewing documents

00:04:27.056 --> 00:04:29.046 A:middle
of various types, and has the

00:04:29.046 --> 00:04:30.406 A:middle
ability to switch to a different

00:04:30.406 --> 00:04:31.776 A:middle
app for viewing it in more

00:04:31.776 --> 00:04:33.766 A:middle
detail or editing it.

00:04:34.936 --> 00:04:36.676 A:middle
The previous screen we see here,

00:04:36.676 --> 00:04:38.086 A:middle
includes an open button for

00:04:38.086 --> 00:04:39.546 A:middle
this, along with a segmented

00:04:39.546 --> 00:04:40.896 A:middle
control for choosing [inaudible]

00:04:41.146 --> 00:04:42.546 A:middle
open for viewing or editing.

00:04:42.546 --> 00:04:46.776 A:middle
So, let's have a look at the

00:04:46.776 --> 00:04:48.506 A:middle
first try at some code for this

00:04:48.856 --> 00:04:49.000 A:middle
screen.

00:04:51.716 --> 00:04:52.796 A:middle
So, the event handler in the

00:04:52.796 --> 00:04:54.216 A:middle
view controller that gets

00:04:54.216 --> 00:04:55.626 A:middle
invoked when that Open button is

00:04:56.636 --> 00:04:56.766 A:middle
tapped.

00:04:58.996 --> 00:05:00.216 A:middle
It starts with some business

00:05:00.216 --> 00:05:02.756 A:middle
logic for constructing a URL to

00:05:02.756 --> 00:05:04.536 A:middle
be used to request that iOS

00:05:04.536 --> 00:05:06.186 A:middle
switch to the other app.

00:05:08.216 --> 00:05:10.586 A:middle
Then, it uses the shared UI

00:05:10.586 --> 00:05:12.356 A:middle
application instance, provided

00:05:12.356 --> 00:05:14.576 A:middle
by UIKit, to determine whether

00:05:14.576 --> 00:05:15.806 A:middle
the system is able to handle

00:05:15.806 --> 00:05:18.256 A:middle
this Open request, and perform

00:05:18.256 --> 00:05:19.926 A:middle
the open URL action if it is.

00:05:20.596 --> 00:05:23.386 A:middle
And if not, it calls a helper

00:05:23.386 --> 00:05:25.386 A:middle
method to show some UI to direct

00:05:25.386 --> 00:05:26.526 A:middle
the user to install the other

00:05:26.526 --> 00:05:27.000 A:middle
app.

00:05:30.086 --> 00:05:31.536 A:middle
Now, I want to write some tests

00:05:31.696 --> 00:05:32.996 A:middle
to make sure that this Open

00:05:32.996 --> 00:05:34.186 A:middle
button is working the way it's

00:05:34.186 --> 00:05:35.436 A:middle
supposed to.

00:05:36.916 --> 00:05:38.196 A:middle
There are a couple of different

00:05:38.196 --> 00:05:39.896 A:middle
ways to approach testing this.

00:05:41.446 --> 00:05:43.346 A:middle
One option would be to write a

00:05:43.346 --> 00:05:43.916 A:middle
UI test.

00:05:45.216 --> 00:05:46.566 A:middle
We ask to launch the app,

00:05:46.566 --> 00:05:48.886 A:middle
navigate to this screen, tap on

00:05:48.936 --> 00:05:50.316 A:middle
the [inaudible] control, to peck

00:05:50.316 --> 00:05:52.256 A:middle
and open mode, tap the Open

00:05:52.256 --> 00:05:55.196 A:middle
button, and then verify that the

00:05:55.196 --> 00:05:56.506 A:middle
phone switched to show the other

00:05:56.506 --> 00:05:57.186 A:middle
app.

00:05:57.446 --> 00:06:00.196 A:middle
While this would work, there are

00:06:00.196 --> 00:06:01.446 A:middle
some drawbacks to this approach.

00:06:01.886 --> 00:06:04.866 A:middle
For one, the task would probably

00:06:04.866 --> 00:06:07.006 A:middle
take a while to run, especially

00:06:07.006 --> 00:06:08.836 A:middle
if I wanted to expand it to test

00:06:08.836 --> 00:06:09.976 A:middle
with several different documents

00:06:09.976 --> 00:06:11.066 A:middle
types for the different open

00:06:11.066 --> 00:06:11.466 A:middle
modes.

00:06:11.996 --> 00:06:15.086 A:middle
The bigger problem, however, is

00:06:15.086 --> 00:06:17.606 A:middle
that a UI test would have no way

00:06:17.606 --> 00:06:19.206 A:middle
to inspect that URL that was

00:06:19.206 --> 00:06:21.366 A:middle
being generated, to request that

00:06:21.366 --> 00:06:22.236 A:middle
iOS switch apps.

00:06:23.166 --> 00:06:24.526 A:middle
And that URL is really something

00:06:24.526 --> 00:06:25.436 A:middle
that I want to be able to

00:06:25.436 --> 00:06:26.576 A:middle
inspect more precisely.

00:06:28.176 --> 00:06:29.626 A:middle
So, it really feels like a unit

00:06:29.626 --> 00:06:30.876 A:middle
test is more appropriate for the

00:06:30.876 --> 00:06:31.556 A:middle
situation.

00:06:34.416 --> 00:06:35.586 A:middle
So, let's see what it would take

00:06:35.586 --> 00:06:36.836 A:middle
to write a unit test for this

00:06:36.836 --> 00:06:37.000 A:middle
code.

00:06:40.016 --> 00:06:41.806 A:middle
First, you need an instance of

00:06:41.806 --> 00:06:42.756 A:middle
the view controller to work

00:06:42.756 --> 00:06:42.926 A:middle
with.

00:06:44.346 --> 00:06:45.286 A:middle
My view controller uses a

00:06:45.286 --> 00:06:47.406 A:middle
storyboard for its UI, so I'll

00:06:47.406 --> 00:06:48.986 A:middle
ask UI Storyboard to give me an

00:06:48.986 --> 00:06:50.126 A:middle
instance of the view controller.

00:06:50.646 --> 00:06:54.616 A:middle
Then we need to load the view to

00:06:55.976 --> 00:06:57.186 A:middle
populate that [inaudible]

00:06:57.186 --> 00:06:59.856 A:middle
control property, so that we --

00:06:59.856 --> 00:07:01.776 A:middle
it's populated by the view data.

00:07:01.776 --> 00:07:03.786 A:middle
We can then configure that for

00:07:03.786 --> 00:07:05.096 A:middle
our open mode.

00:07:05.756 --> 00:07:07.406 A:middle
Provide a document to work with.

00:07:08.106 --> 00:07:12.136 A:middle
And with the setup finally

00:07:12.136 --> 00:07:13.566 A:middle
complete, we're now ready to

00:07:13.566 --> 00:07:15.546 A:middle
call the method being tested.

00:07:18.116 --> 00:07:19.576 A:middle
But what do we do now?

00:07:20.836 --> 00:07:22.046 A:middle
It's not so clear what kind of

00:07:22.046 --> 00:07:23.000 A:middle
assertion we could write here.

00:07:27.056 --> 00:07:29.176 A:middle
Let's go back to the code, and

00:07:29.176 --> 00:07:30.346 A:middle
look more closely at what makes

00:07:30.346 --> 00:07:32.146 A:middle
this challenging to test.

00:07:34.386 --> 00:07:36.476 A:middle
For one thing, just being in a

00:07:36.476 --> 00:07:37.806 A:middle
view controller, made the

00:07:37.806 --> 00:07:39.346 A:middle
methods test more complicated.

00:07:39.986 --> 00:07:40.806 A:middle
You're going to jump through

00:07:40.806 --> 00:07:41.436 A:middle
some hoops to get the view

00:07:41.436 --> 00:07:42.506 A:middle
controller instance to work

00:07:42.506 --> 00:07:42.656 A:middle
with.

00:07:43.236 --> 00:07:46.776 A:middle
Then here, we're pulling input

00:07:46.776 --> 00:07:48.286 A:middle
state directly from the view.

00:07:48.286 --> 00:07:50.646 A:middle
[Inaudible] of the test had to

00:07:50.646 --> 00:07:52.536 A:middle
force the view to load, and then

00:07:52.576 --> 00:07:54.636 A:middle
indirectly provide the input by

00:07:54.636 --> 00:07:56.066 A:middle
setting a property on some

00:07:56.776 --> 00:08:00.066 A:middle
sub-view.

00:08:00.266 --> 00:08:01.966 A:middle
The biggest problem though was

00:08:01.966 --> 00:08:03.826 A:middle
this usage of a UI application

00:08:03.826 --> 00:08:04.706 A:middle
shared instance.

00:08:08.516 --> 00:08:10.286 A:middle
The return value from this call

00:08:10.286 --> 00:08:12.816 A:middle
to can open URL, is effectively

00:08:12.816 --> 00:08:14.126 A:middle
another input for the method.

00:08:15.586 --> 00:08:16.966 A:middle
But since this relies on global

00:08:16.966 --> 00:08:18.676 A:middle
system state, there's no

00:08:18.676 --> 00:08:20.356 A:middle
programmatic way for the test to

00:08:20.356 --> 00:08:21.506 A:middle
control the result of this

00:08:21.506 --> 00:08:22.000 A:middle
query.

00:08:25.396 --> 00:08:26.606 A:middle
Nor is there a good way for a

00:08:26.606 --> 00:08:28.306 A:middle
unit test to observe the side

00:08:28.306 --> 00:08:29.836 A:middle
effects of opening a URL.

00:08:30.616 --> 00:08:33.806 A:middle
In fact, after calling this, the

00:08:33.806 --> 00:08:35.156 A:middle
test render app would actually

00:08:35.156 --> 00:08:36.636 A:middle
be sent to the background, and

00:08:36.636 --> 00:08:37.546 A:middle
there'd be no way to bring it

00:08:37.546 --> 00:08:38.206 A:middle
back to the foreground

00:08:38.206 --> 00:08:38.766 A:middle
afterwards.

00:08:38.766 --> 00:08:42.646 A:middle
So, let's see what we can do to

00:08:42.646 --> 00:08:43.946 A:middle
improve the testability of this

00:08:43.946 --> 00:08:44.206 A:middle
code.

00:08:44.856 --> 00:08:48.846 A:middle
We can start by getting it out

00:08:48.846 --> 00:08:49.586 A:middle
of the view controller.

00:08:50.046 --> 00:08:53.076 A:middle
Let's introduce a new document

00:08:53.076 --> 00:08:55.206 A:middle
opener class, to encapsulate

00:08:55.206 --> 00:08:56.206 A:middle
this logic and behavior.

00:08:58.756 --> 00:09:00.506 A:middle
The open mode and document

00:09:00.506 --> 00:09:02.426 A:middle
inputs, should now be provided a

00:09:02.426 --> 00:09:04.126 A:middle
simple method arguments that the

00:09:04.126 --> 00:09:05.346 A:middle
test can pass indirectly.

00:09:05.996 --> 00:09:09.306 A:middle
But we still have to fix the

00:09:09.306 --> 00:09:11.026 A:middle
problems caused by that shared

00:09:11.026 --> 00:09:12.496 A:middle
UI application incidence.

00:09:13.026 --> 00:09:17.246 A:middle
What can we do about that?

00:09:18.056 --> 00:09:20.086 A:middle
Well, to start, we can stop

00:09:20.086 --> 00:09:21.336 A:middle
using that [inaudible] accessor

00:09:21.336 --> 00:09:22.376 A:middle
directly into method.

00:09:22.966 --> 00:09:25.696 A:middle
Let's add an initializer to the

00:09:25.696 --> 00:09:27.786 A:middle
class that lets us pass in a

00:09:27.786 --> 00:09:29.776 A:middle
particular application instance.

00:09:30.316 --> 00:09:34.126 A:middle
We can provide a default value

00:09:34.126 --> 00:09:35.986 A:middle
for the argument, so the

00:09:35.986 --> 00:09:36.336 A:middle
[inaudible] in the view

00:09:36.336 --> 00:09:37.436 A:middle
controller, doesn't have to

00:09:37.436 --> 00:09:38.426 A:middle
worry about this detail.

00:09:38.996 --> 00:09:44.546 A:middle
Back in the open method, we then

00:09:44.546 --> 00:09:45.556 A:middle
switch over to use the

00:09:45.556 --> 00:09:47.006 A:middle
application instance that was

00:09:47.006 --> 00:09:49.416 A:middle
passed in.

00:09:49.636 --> 00:09:50.366 A:middle
Let's see how far this

00:09:50.366 --> 00:09:51.356 A:middle
refactoring gets us.

00:09:55.016 --> 00:09:56.556 A:middle
If we try to rewrite our test

00:09:56.556 --> 00:09:58.536 A:middle
now, with the document open or

00:09:58.536 --> 00:10:00.116 A:middle
in its current state, we'll

00:10:00.116 --> 00:10:01.006 A:middle
still find ourselves getting

00:10:01.006 --> 00:10:01.606 A:middle
stuck.

00:10:02.896 --> 00:10:03.786 A:middle
You want to pass in an

00:10:03.786 --> 00:10:04.836 A:middle
application instance that we

00:10:04.836 --> 00:10:05.966 A:middle
have control over.

00:10:06.566 --> 00:10:07.886 A:middle
So, you can imagine sub-classing

00:10:07.886 --> 00:10:10.156 A:middle
UI application, overriding the

00:10:10.156 --> 00:10:12.236 A:middle
can open URL and open methods,

00:10:12.456 --> 00:10:13.896 A:middle
to get the control that we need.

00:10:14.166 --> 00:10:16.616 A:middle
However, it turns out that UI

00:10:16.616 --> 00:10:18.486 A:middle
application strictly enforces

00:10:18.486 --> 00:10:19.446 A:middle
its singleton nature.

00:10:20.166 --> 00:10:21.476 A:middle
And throws an exception to try

00:10:21.476 --> 00:10:23.086 A:middle
to make a second instance, even

00:10:23.086 --> 00:10:24.000 A:middle
if it's a subclass.

00:10:27.046 --> 00:10:28.006 A:middle
So, instead of using

00:10:28.066 --> 00:10:29.876 A:middle
sub-classing, to get the control

00:10:29.876 --> 00:10:32.176 A:middle
that we need, let's instead add

00:10:32.176 --> 00:10:33.766 A:middle
a protocol, URL Opening.

00:10:34.316 --> 00:10:38.136 A:middle
We go to protocol, two methods,

00:10:38.786 --> 00:10:39.756 A:middle
with precisely the same

00:10:39.756 --> 00:10:41.596 A:middle
signatures as the application

00:10:41.596 --> 00:10:43.506 A:middle
methods that we've been using up

00:10:44.166 --> 00:10:47.506 A:middle
to this point.

00:10:47.506 --> 00:10:49.546 A:middle
We still want UI application to

00:10:49.546 --> 00:10:50.966 A:middle
be the primary implementation of

00:10:50.966 --> 00:10:51.596 A:middle
this protocol.

00:10:52.876 --> 00:10:54.626 A:middle
So, we'll throw an extension on

00:10:54.626 --> 00:10:56.466 A:middle
UI application to give it the

00:10:56.466 --> 00:10:57.726 A:middle
URL opening conformance.

00:10:58.226 --> 00:11:02.066 A:middle
Since the method signatures line

00:11:02.066 --> 00:11:03.736 A:middle
up exactly, you don't have to

00:11:03.736 --> 00:11:05.106 A:middle
add any additional code in the

00:11:05.106 --> 00:11:05.896 A:middle
extension to get the

00:11:05.896 --> 00:11:06.386 A:middle
conformance.

00:11:06.426 --> 00:11:12.056 A:middle
With a protocol in place, let's

00:11:12.056 --> 00:11:13.736 A:middle
update the document opener to

00:11:13.736 --> 00:11:15.436 A:middle
use the protocol instead of

00:11:15.436 --> 00:11:17.000 A:middle
requiring UI application itself.

00:11:20.366 --> 00:11:21.946 A:middle
First, we change the property

00:11:21.946 --> 00:11:24.306 A:middle
and initialize a parameter to

00:11:24.306 --> 00:11:25.766 A:middle
accept any implementation of the

00:11:25.766 --> 00:11:26.856 A:middle
URL opening protocol.

00:11:27.446 --> 00:11:30.216 A:middle
Note that we're still able to

00:11:30.216 --> 00:11:31.716 A:middle
keep the shared UI application

00:11:31.716 --> 00:11:32.846 A:middle
instance with the default

00:11:32.846 --> 00:11:34.816 A:middle
argument as a convenience when

00:11:34.816 --> 00:11:35.506 A:middle
we use it in the view

00:11:35.506 --> 00:11:35.986 A:middle
controller.

00:11:39.316 --> 00:11:40.856 A:middle
A final change requires the

00:11:40.856 --> 00:11:43.176 A:middle
document opener simply to adopt

00:11:43.176 --> 00:11:45.416 A:middle
the URL opener property name.

00:11:48.576 --> 00:11:49.826 A:middle
With that, let's return to the

00:11:49.826 --> 00:11:51.546 A:middle
test and see how the pieces fit

00:11:51.546 --> 00:11:52.000 A:middle
together.

00:11:57.046 --> 00:11:58.796 A:middle
Since UI Application doesn't

00:11:58.796 --> 00:12:00.196 A:middle
give us the control that we need

00:12:00.196 --> 00:12:02.146 A:middle
in our test, we want to create a

00:12:02.146 --> 00:12:04.076 A:middle
secondary mock implementation of

00:12:04.076 --> 00:12:06.566 A:middle
the protocol, to use in its

00:12:08.436 --> 00:12:08.566 A:middle
place.

00:12:08.746 --> 00:12:10.506 A:middle
Here we add a sub-implementation

00:12:10.596 --> 00:12:13.866 A:middle
of the two methods.

00:12:13.866 --> 00:12:16.246 A:middle
The can open URL method acts as

00:12:16.246 --> 00:12:17.516 A:middle
an input from the document

00:12:17.516 --> 00:12:17.896 A:middle
opener.

00:12:18.726 --> 00:12:19.596 A:middle
So, the test needs to have

00:12:19.596 --> 00:12:20.776 A:middle
control over this input.

00:12:21.806 --> 00:12:22.816 A:middle
We can get that by having the

00:12:22.816 --> 00:12:24.716 A:middle
implementation return the value

00:12:24.716 --> 00:12:26.276 A:middle
of a property that the test can

00:12:26.276 --> 00:12:27.096 A:middle
set beforehand.

00:12:30.296 --> 00:12:32.106 A:middle
The open method, act as an

00:12:32.106 --> 00:12:33.636 A:middle
output from the document opener.

00:12:34.836 --> 00:12:35.776 A:middle
The test wants to be able to

00:12:35.776 --> 00:12:37.996 A:middle
access any URL that was passed

00:12:37.996 --> 00:12:38.696 A:middle
into this method.

00:12:39.176 --> 00:12:41.916 A:middle
We can achieve that by stashing

00:12:41.916 --> 00:12:43.916 A:middle
the URL into a property for the

00:12:43.976 --> 00:12:45.346 A:middle
test to -- to read afterwards.

00:12:48.956 --> 00:12:50.616 A:middle
So, let's go ahead and write the

00:12:50.616 --> 00:12:51.000 A:middle
test.

00:12:53.436 --> 00:12:54.726 A:middle
First, we create an instance of

00:12:54.726 --> 00:12:56.146 A:middle
our mock URL opener that we just

00:12:56.146 --> 00:12:58.306 A:middle
wrote, and configure the input

00:12:58.546 --> 00:12:59.706 A:middle
using the can open property.

00:13:02.296 --> 00:13:03.446 A:middle
And create a document opener.

00:13:03.446 --> 00:13:06.046 A:middle
And we pass in that mock URL

00:13:06.046 --> 00:13:07.106 A:middle
opener as the argument.

00:13:07.666 --> 00:13:11.756 A:middle
With that setup finished, we can

00:13:11.756 --> 00:13:14.216 A:middle
call the open method, passing in

00:13:14.216 --> 00:13:15.696 A:middle
document and open mode values,

00:13:16.066 --> 00:13:18.186 A:middle
to act as the rest of the input.

00:13:20.316 --> 00:13:22.296 A:middle
And we can then assert that the

00:13:22.296 --> 00:13:24.116 A:middle
opened URL property of the mock

00:13:24.116 --> 00:13:26.216 A:middle
URL opener, has been set to the

00:13:26.216 --> 00:13:27.036 A:middle
expected URL.

00:13:27.666 --> 00:13:30.966 A:middle
This one assertion, is testing

00:13:30.966 --> 00:13:32.446 A:middle
both at the open method was

00:13:32.446 --> 00:13:34.756 A:middle
called at all, as well as the

00:13:34.756 --> 00:13:36.436 A:middle
URL passed in contains the

00:13:36.436 --> 00:13:37.006 A:middle
correct data.

00:13:40.696 --> 00:13:42.186 A:middle
With that test under our belt,

00:13:42.546 --> 00:13:43.606 A:middle
you could continue to write

00:13:43.606 --> 00:13:45.046 A:middle
tests for other variations of

00:13:45.046 --> 00:13:47.286 A:middle
input data, such as when the can

00:13:47.286 --> 00:13:48.626 A:middle
open property is set to false.

00:13:48.626 --> 00:13:50.436 A:middle
But we have a lot more to cover,

00:13:50.436 --> 00:13:51.806 A:middle
so let's just leave it there.

00:13:55.646 --> 00:13:57.776 A:middle
So, in this example, you

00:13:57.776 --> 00:13:59.766 A:middle
performed a few refactorings to

00:13:59.766 --> 00:14:01.406 A:middle
allow us to write unit tests for

00:14:01.406 --> 00:14:02.000 A:middle
our code.

00:14:04.436 --> 00:14:05.506 A:middle
We pulled out explicit

00:14:05.506 --> 00:14:07.046 A:middle
references to a shared singleton

00:14:07.046 --> 00:14:09.416 A:middle
instance, and replaced them with

00:14:09.416 --> 00:14:11.516 A:middle
parameterized input to offer

00:14:11.516 --> 00:14:12.246 A:middle
substitution.

00:14:13.666 --> 00:14:15.566 A:middle
This is sometimes referred to as

00:14:15.566 --> 00:14:17.976 A:middle
a penancy injection.

00:14:18.196 --> 00:14:20.186 A:middle
In this example, we use an

00:14:20.186 --> 00:14:22.356 A:middle
initializer parameter to achieve

00:14:22.356 --> 00:14:22.916 A:middle
this.

00:14:23.296 --> 00:14:24.466 A:middle
We could also have used a

00:14:24.466 --> 00:14:26.636 A:middle
property setter, or a parameter

00:14:26.636 --> 00:14:27.500 A:middle
of the method being tested.

00:14:31.196 --> 00:14:33.236 A:middle
We created a protocol to

00:14:33.236 --> 00:14:34.276 A:middle
decouple the code from the

00:14:34.276 --> 00:14:35.396 A:middle
concrete class that it

00:14:35.396 --> 00:14:37.000 A:middle
previously depended on.

00:14:39.096 --> 00:14:40.396 A:middle
And we created a test

00:14:40.396 --> 00:14:42.756 A:middle
implementation to use in its

00:14:42.756 --> 00:14:43.176 A:middle
place.

00:14:43.176 --> 00:14:45.506 A:middle
And it gave us the control that

00:14:45.506 --> 00:14:46.826 A:middle
we needed over the inputs, and

00:14:47.426 --> 00:14:49.346 A:middle
the visibility into the outputs.

00:14:56.276 --> 00:14:58.656 A:middle
Next, I want to look at how

00:14:58.656 --> 00:15:00.356 A:middle
separating out logic from

00:15:00.356 --> 00:15:02.176 A:middle
effects, can also be used to

00:15:02.176 --> 00:15:03.386 A:middle
enhance testability.

00:15:07.636 --> 00:15:10.226 A:middle
The example here is an on-disk

00:15:10.316 --> 00:15:12.466 A:middle
cache class, which might be used

00:15:12.466 --> 00:15:14.526 A:middle
by an app for faster retrieval

00:15:14.526 --> 00:15:15.806 A:middle
of assets that have been

00:15:15.806 --> 00:15:17.346 A:middle
previously downloaded from a

00:15:17.856 --> 00:15:18.000 A:middle
server.

00:15:20.946 --> 00:15:22.866 A:middle
This cache defines a script for

00:15:22.866 --> 00:15:24.066 A:middle
representing the items that it

00:15:24.066 --> 00:15:24.416 A:middle
stores.

00:15:24.896 --> 00:15:26.926 A:middle
It defines the path to the item

00:15:26.926 --> 00:15:28.936 A:middle
on the file system, how long

00:15:28.936 --> 00:15:30.436 A:middle
it's been in the cache, and its

00:15:30.436 --> 00:15:31.146 A:middle
size on disk.

00:15:31.656 --> 00:15:34.166 A:middle
And it provides a way to get the

00:15:34.166 --> 00:15:35.706 A:middle
set of all the items currently

00:15:35.706 --> 00:15:36.586 A:middle
stored in the cache.

00:15:40.096 --> 00:15:41.176 A:middle
The method that you want to look

00:15:41.176 --> 00:15:43.216 A:middle
at now, though, is a cleanup

00:15:43.216 --> 00:15:43.586 A:middle
method.

00:15:44.316 --> 00:15:45.096 A:middle
It's meant to be called

00:15:45.096 --> 00:15:46.816 A:middle
periodically, to ensure that the

00:15:46.816 --> 00:15:47.976 A:middle
cache doesn't grow to take up

00:15:47.976 --> 00:15:49.146 A:middle
too much space in the file

00:15:49.146 --> 00:15:49.486 A:middle
system.

00:15:49.836 --> 00:15:53.136 A:middle
So, let's have a look at the

00:15:53.136 --> 00:15:54.716 A:middle
starting implementation for this

00:15:55.176 --> 00:15:55.326 A:middle
method.

00:15:57.256 --> 00:15:59.716 A:middle
First, it asks for the set of

00:15:59.716 --> 00:16:00.916 A:middle
all the current items in the

00:16:00.916 --> 00:16:02.926 A:middle
cache, sorts them from newest to

00:16:02.926 --> 00:16:03.456 A:middle
oldest.

00:16:03.936 --> 00:16:07.646 A:middle
But then it [inaudible] over all

00:16:07.646 --> 00:16:09.986 A:middle
of these items, keeping track of

00:16:09.986 --> 00:16:11.406 A:middle
the total size of the items

00:16:11.406 --> 00:16:12.000 A:middle
already seen.

00:16:15.086 --> 00:16:16.086 A:middle
Once you've seen enough items

00:16:16.156 --> 00:16:17.196 A:middle
then we reached our maximum

00:16:17.196 --> 00:16:19.416 A:middle
size, we begin removing the rest

00:16:19.416 --> 00:16:23.636 A:middle
of them from the file system.

00:16:23.896 --> 00:16:24.986 A:middle
So, let's think about how to

00:16:24.986 --> 00:16:25.646 A:middle
test this method.

00:16:26.976 --> 00:16:27.846 A:middle
What are the inputs?

00:16:28.186 --> 00:16:31.566 A:middle
What are the outputs?

00:16:31.696 --> 00:16:33.896 A:middle
Well, one input is the parameter

00:16:33.896 --> 00:16:35.116 A:middle
specifying how large you want

00:16:35.116 --> 00:16:36.346 A:middle
the cache to be able to grow.

00:16:36.346 --> 00:16:39.076 A:middle
This is a simple integer, and a

00:16:39.076 --> 00:16:40.996 A:middle
method parameter, so the test

00:16:40.996 --> 00:16:42.476 A:middle
already has full control over

00:16:42.606 --> 00:16:42.660 A:middle
it.

00:16:45.316 --> 00:16:47.506 A:middle
The other input, is the list of

00:16:47.506 --> 00:16:48.816 A:middle
items that are currently stored

00:16:48.816 --> 00:16:51.226 A:middle
in the cache.

00:16:51.436 --> 00:16:52.636 A:middle
We didn't take the time to look

00:16:52.636 --> 00:16:54.326 A:middle
at how this is implemented, but

00:16:54.326 --> 00:16:56.236 A:middle
the key point is that it uses a

00:16:56.236 --> 00:16:57.976 A:middle
file manager to retrieve a list

00:16:57.976 --> 00:16:59.586 A:middle
of files from the disc.

00:17:01.736 --> 00:17:03.326 A:middle
This means that the input is

00:17:03.326 --> 00:17:04.626 A:middle
actually derived from the file

00:17:04.626 --> 00:17:06.836 A:middle
system, which is the dependency

00:17:06.836 --> 00:17:07.726 A:middle
that the tests would need to

00:17:07.726 --> 00:17:08.976 A:middle
deal with.

00:17:12.296 --> 00:17:14.276 A:middle
The clean cache method has no

00:17:14.276 --> 00:17:14.966 A:middle
return value.

00:17:15.576 --> 00:17:18.606 A:middle
So, its output can't be data.

00:17:18.786 --> 00:17:20.566 A:middle
Rather, it's the side effect of

00:17:20.566 --> 00:17:22.296 A:middle
a certain set of files having

00:17:22.296 --> 00:17:23.606 A:middle
been removed from the disc.

00:17:24.056 --> 00:17:27.196 A:middle
Because of this dependency on

00:17:27.196 --> 00:17:29.146 A:middle
the file system, tests for this

00:17:29.146 --> 00:17:31.436 A:middle
method would need to deal with a

00:17:31.436 --> 00:17:33.126 A:middle
file manager in the file system.

00:17:34.336 --> 00:17:35.966 A:middle
For setup, they might need to

00:17:35.966 --> 00:17:37.876 A:middle
create a temporary directory and

00:17:37.876 --> 00:17:39.716 A:middle
populate it with a bunch of

00:17:39.716 --> 00:17:41.526 A:middle
files of certain sizes and give

00:17:41.526 --> 00:17:43.196 A:middle
them particular timestamps to

00:17:43.196 --> 00:17:43.936 A:middle
provide the input.

00:17:45.856 --> 00:17:47.466 A:middle
To validate the output, you

00:17:47.836 --> 00:17:48.876 A:middle
would need to then return to the

00:17:48.876 --> 00:17:50.936 A:middle
file system to see which files

00:17:50.936 --> 00:17:52.000 A:middle
are still there.

00:17:56.176 --> 00:17:57.266 A:middle
One way to approach this could

00:17:57.266 --> 00:17:59.816 A:middle
be to use the protocols and

00:17:59.816 --> 00:18:01.116 A:middle
parameterization techniques that

00:18:01.116 --> 00:18:01.926 A:middle
we've already seen.

00:18:03.296 --> 00:18:04.636 A:middle
You could introduce a file

00:18:04.636 --> 00:18:06.676 A:middle
manager protocol that has the

00:18:06.676 --> 00:18:07.916 A:middle
methods that we need for getting

00:18:07.916 --> 00:18:09.606 A:middle
a list of files, and for

00:18:09.606 --> 00:18:10.306 A:middle
removing a file.

00:18:11.786 --> 00:18:13.026 A:middle
And then create a test

00:18:13.026 --> 00:18:15.206 A:middle
implementation that would allow

00:18:15.206 --> 00:18:16.446 A:middle
specifying the list of files

00:18:16.446 --> 00:18:17.986 A:middle
that would be returned, and a

00:18:17.986 --> 00:18:19.246 A:middle
query of which ones have been

00:18:19.746 --> 00:18:19.946 A:middle
removed.

00:18:21.996 --> 00:18:23.396 A:middle
If we do this though, we're

00:18:23.396 --> 00:18:25.136 A:middle
still interacting indirectly

00:18:25.286 --> 00:18:26.276 A:middle
with the code that we're trying

00:18:26.276 --> 00:18:28.386 A:middle
to test mediated by the file

00:18:28.386 --> 00:18:28.756 A:middle
manager.

00:18:32.306 --> 00:18:34.146 A:middle
Instead, let's try something a

00:18:34.146 --> 00:18:35.156 A:middle
little bit different.

00:18:35.826 --> 00:18:37.406 A:middle
We could take our clean cache

00:18:37.406 --> 00:18:40.376 A:middle
method and factor out the logic

00:18:40.656 --> 00:18:41.896 A:middle
responsible for deciding while

00:18:41.896 --> 00:18:44.126 A:middle
files should be removed, the

00:18:44.126 --> 00:18:46.606 A:middle
clean-up policy, which you can

00:18:46.606 --> 00:18:47.576 A:middle
then interact with more

00:18:47.576 --> 00:18:48.026 A:middle
directly.

00:18:48.666 --> 00:18:51.606 A:middle
Let's see how that might work.

00:18:54.776 --> 00:18:56.136 A:middle
To clearly define the APIs we're

00:18:56.136 --> 00:18:57.316 A:middle
going to work with, let's first

00:18:57.586 --> 00:18:59.206 A:middle
define clean-up policy as a

00:18:59.206 --> 00:18:59.776 A:middle
protocol.

00:19:00.406 --> 00:19:03.976 A:middle
It just needs a single method --

00:19:04.326 --> 00:19:05.126 A:middle
items to remove.

00:19:06.456 --> 00:19:07.876 A:middle
Notice how the type signature

00:19:07.876 --> 00:19:09.696 A:middle
that we've given it, looks a bit

00:19:09.696 --> 00:19:11.836 A:middle
different than from the clean

00:19:11.836 --> 00:19:13.126 A:middle
cache method that we started

00:19:13.416 --> 00:19:13.500 A:middle
with.

00:19:16.066 --> 00:19:18.856 A:middle
As input, the new method takes a

00:19:18.916 --> 00:19:20.276 A:middle
set of cache item values.

00:19:21.616 --> 00:19:23.316 A:middle
And for output, it returns

00:19:23.416 --> 00:19:25.506 A:middle
another set of them, but that is

00:19:25.506 --> 00:19:27.206 A:middle
the ones to be removed.

00:19:30.596 --> 00:19:32.046 A:middle
So, let's see how we can

00:19:32.046 --> 00:19:33.696 A:middle
implement this protocol using

00:19:33.696 --> 00:19:35.166 A:middle
the algorithm that we previously

00:19:35.166 --> 00:19:37.326 A:middle
saw from the cache class.

00:19:39.416 --> 00:19:40.546 A:middle
Well, first define a property

00:19:40.756 --> 00:19:41.966 A:middle
for that max size input.

00:19:42.896 --> 00:19:44.276 A:middle
That'll let us specify this max

00:19:44.276 --> 00:19:45.496 A:middle
size, and we construct the

00:19:45.496 --> 00:19:45.936 A:middle
policy.

00:19:48.916 --> 00:19:50.646 A:middle
Then we add the items to remove

00:19:50.646 --> 00:19:52.166 A:middle
method that the protocol

00:19:52.166 --> 00:19:52.716 A:middle
requires.

00:19:56.136 --> 00:19:57.686 A:middle
We want to inspect each of the

00:19:57.686 --> 00:19:59.096 A:middle
items passed into the method,

00:19:59.786 --> 00:20:01.246 A:middle
and build up a set of items to

00:20:01.246 --> 00:20:02.906 A:middle
remove, and return that to the

00:20:02.906 --> 00:20:04.000 A:middle
method when we're done.

00:20:07.216 --> 00:20:09.166 A:middle
To populate the set, we'll loop

00:20:09.166 --> 00:20:10.346 A:middle
over all of the items from

00:20:10.346 --> 00:20:13.416 A:middle
newest to oldest, summing up the

00:20:13.416 --> 00:20:14.826 A:middle
size of all the items we've seen

00:20:14.826 --> 00:20:16.006 A:middle
so far.

00:20:18.336 --> 00:20:19.776 A:middle
Once we've reached the maximum

00:20:19.776 --> 00:20:22.346 A:middle
size, we start adding the rest

00:20:22.346 --> 00:20:24.186 A:middle
to the set of items to remove.

00:20:27.496 --> 00:20:29.826 A:middle
Looking at this code, we can see

00:20:29.826 --> 00:20:31.086 A:middle
that the side effects that were

00:20:31.086 --> 00:20:32.556 A:middle
prone in the earlier version

00:20:32.806 --> 00:20:33.556 A:middle
have been removed.

00:20:34.166 --> 00:20:36.666 A:middle
What remains is the underlying

00:20:36.666 --> 00:20:40.096 A:middle
algorithm, taking data as input,

00:20:40.806 --> 00:20:44.016 A:middle
and returning some data as

00:20:44.016 --> 00:20:44.416 A:middle
output.

00:20:45.566 --> 00:20:46.886 A:middle
We can also visualize the data

00:20:46.886 --> 00:20:47.956 A:middle
flow that we've achieved by

00:20:47.956 --> 00:20:48.496 A:middle
doing this.

00:20:49.106 --> 00:20:51.826 A:middle
Notice that the code has taken

00:20:51.826 --> 00:20:53.206 A:middle
on a very functional style.

00:20:53.946 --> 00:20:55.376 A:middle
Data in; data out.

00:20:59.736 --> 00:21:01.336 A:middle
With the logic factored out in

00:21:01.336 --> 00:21:03.456 A:middle
this way, we've enabled

00:21:03.456 --> 00:21:04.796 A:middle
ourselves to write clear,

00:21:04.796 --> 00:21:06.536 A:middle
concise tests that put the

00:21:06.536 --> 00:21:10.216 A:middle
algorithm through its paces.

00:21:10.336 --> 00:21:12.046 A:middle
All we have to do is define an

00:21:12.156 --> 00:21:16.536 A:middle
input set with some cache items,

00:21:16.536 --> 00:21:17.826 A:middle
create an instance of the type,

00:21:18.656 --> 00:21:20.296 A:middle
calling the method, directly

00:21:20.296 --> 00:21:21.486 A:middle
passing in the values that it

00:21:21.486 --> 00:21:25.246 A:middle
needs, and then asserting that

00:21:25.246 --> 00:21:27.026 A:middle
the returned items match the

00:21:27.026 --> 00:21:27.736 A:middle
expected result.

00:21:28.266 --> 00:21:32.296 A:middle
With a code in this form, we now

00:21:32.296 --> 00:21:33.326 A:middle
have easy control over the

00:21:33.326 --> 00:21:35.446 A:middle
inputs, visibility into the

00:21:35.446 --> 00:21:38.116 A:middle
outputs, and there's no hidden

00:21:38.116 --> 00:21:39.486 A:middle
state to contend with at all.

00:21:40.476 --> 00:21:41.656 A:middle
It's very reminiscent of the

00:21:41.656 --> 00:21:43.606 A:middle
test for the sorted method that

00:21:43.606 --> 00:21:44.576 A:middle
we saw at the beginning.

00:21:46.496 --> 00:21:48.406 A:middle
This allows the test to be easy

00:21:48.406 --> 00:21:50.136 A:middle
to read, with minimal

00:21:50.136 --> 00:21:51.926 A:middle
distraction from the essentials

00:21:51.926 --> 00:21:55.506 A:middle
of what is being tested to run

00:21:55.506 --> 00:21:57.446 A:middle
very quickly because it has no

00:21:57.446 --> 00:21:59.536 A:middle
dependency on slow resources

00:21:59.536 --> 00:22:00.436 A:middle
like the file system.

00:22:00.966 --> 00:22:04.406 A:middle
And to be deterministic because

00:22:04.576 --> 00:22:06.256 A:middle
all of the data in use is fully

00:22:06.256 --> 00:22:06.936 A:middle
self-contained.

00:22:11.756 --> 00:22:13.596 A:middle
Taking a peek back at the

00:22:13.596 --> 00:22:15.136 A:middle
original clean cache method,

00:22:15.476 --> 00:22:17.476 A:middle
after the extraction, we see

00:22:17.476 --> 00:22:19.326 A:middle
that there's very little left.

00:22:21.476 --> 00:22:22.826 A:middle
All we're doing is asking the

00:22:22.826 --> 00:22:24.736 A:middle
clean-up policy for the list of

00:22:24.736 --> 00:22:28.126 A:middle
items to remove, and iterating

00:22:28.126 --> 00:22:30.076 A:middle
over all of them, removing them

00:22:30.076 --> 00:22:30.906 A:middle
from the file system.

00:22:33.236 --> 00:22:36.036 A:middle
To test what remains, we could

00:22:36.036 --> 00:22:37.496 A:middle
decide to introduce that file

00:22:37.496 --> 00:22:39.186 A:middle
manager protocol and testable

00:22:39.186 --> 00:22:41.236 A:middle
implementation to allow writing

00:22:41.236 --> 00:22:42.836 A:middle
a very isolated unit tests for

00:22:43.446 --> 00:22:43.500 A:middle
it.

00:22:44.496 --> 00:22:46.486 A:middle
Or we might decide that a couple

00:22:46.486 --> 00:22:48.466 A:middle
of integration tests are

00:22:48.466 --> 00:22:49.506 A:middle
sufficient to give the

00:22:49.506 --> 00:22:51.496 A:middle
confidence that we need that the

00:22:51.496 --> 00:22:52.646 A:middle
code is doing the right thing.

00:22:53.916 --> 00:22:55.176 A:middle
This thin layer of [inaudible]

00:22:55.296 --> 00:22:56.986 A:middle
code that's left.

00:23:01.816 --> 00:23:04.186 A:middle
So, in this example, we looked

00:23:04.736 --> 00:23:08.036 A:middle
at how to extract business logic

00:23:08.036 --> 00:23:09.606 A:middle
and algorithms into separate

00:23:09.606 --> 00:23:12.176 A:middle
types, away from the code, using

00:23:12.206 --> 00:23:13.606 A:middle
side effects.

00:23:15.636 --> 00:23:17.806 A:middle
When doing this, the algorithms

00:23:17.806 --> 00:23:19.046 A:middle
tend to take on a rather

00:23:19.046 --> 00:23:21.026 A:middle
functional style, using value

00:23:21.026 --> 00:23:22.976 A:middle
types to describe the inputs and

00:23:23.186 --> 00:23:23.976 A:middle
the outputs.

00:23:24.466 --> 00:23:26.926 A:middle
This allows for straightforward

00:23:26.926 --> 00:23:29.216 A:middle
unit tests that exercise the

00:23:29.216 --> 00:23:30.806 A:middle
algorithm in as much detail as

00:23:30.806 --> 00:23:31.326 A:middle
you require.

00:23:34.676 --> 00:23:36.116 A:middle
We're left with a small amount

00:23:36.116 --> 00:23:37.636 A:middle
of code that perform side

00:23:37.636 --> 00:23:38.966 A:middle
effects based on the computer

00:23:38.966 --> 00:23:39.406 A:middle
data.

00:23:39.906 --> 00:23:42.336 A:middle
This bit is often a good

00:23:42.336 --> 00:23:43.856 A:middle
candidate for testing with

00:23:43.856 --> 00:23:46.316 A:middle
integration tests in order to

00:23:46.316 --> 00:23:47.406 A:middle
track that its interaction with

00:23:47.406 --> 00:23:48.526 A:middle
the rest of the system is

00:23:48.526 --> 00:23:49.256 A:middle
working properly.

00:23:54.176 --> 00:23:57.126 A:middle
So, to wrap up, we saw examples

00:23:57.126 --> 00:23:59.186 A:middle
that allowed us to explore two

00:23:59.186 --> 00:24:00.956 A:middle
sets of techniques that allow us

00:24:00.956 --> 00:24:03.116 A:middle
to structure or ask code, so

00:24:03.116 --> 00:24:04.956 A:middle
that tests have control over the

00:24:04.956 --> 00:24:06.996 A:middle
code's inputs, and visibility

00:24:06.996 --> 00:24:09.126 A:middle
into its outputs, thereby

00:24:09.126 --> 00:24:10.456 A:middle
allowing us to write effective

00:24:10.456 --> 00:24:12.026 A:middle
unit tests for it.

00:24:14.776 --> 00:24:16.296 A:middle
And now, I want to call up my

00:24:16.296 --> 00:24:18.146 A:middle
colleague, Greg Tracy, to talk

00:24:18.146 --> 00:24:19.466 A:middle
about how to create a test suite

00:24:19.816 --> 00:24:21.126 A:middle
that scales with your app as it

00:24:21.126 --> 00:24:21.556 A:middle
grows.

00:24:23.516 --> 00:24:27.500 A:middle
[ Applause ]

00:24:31.636 --> 00:24:32.586 A:middle
&gt;&gt; Hi, everyone.

00:24:32.796 --> 00:24:33.536 A:middle
My name is Greg.

00:24:33.536 --> 00:24:35.996 A:middle
And I also work on Xcode.

00:24:37.316 --> 00:24:38.866 A:middle
Earlier, Brian showed you some

00:24:38.866 --> 00:24:40.176 A:middle
techniques about how to make app

00:24:40.176 --> 00:24:41.216 A:middle
code more testable.

00:24:41.826 --> 00:24:42.926 A:middle
Now, I want to show you how to

00:24:42.926 --> 00:24:44.336 A:middle
make the accompanying test code

00:24:44.336 --> 00:24:45.356 A:middle
more scalable.

00:24:45.356 --> 00:24:47.316 A:middle
To do this, we'll look at a few

00:24:47.316 --> 00:24:49.376 A:middle
methods to make tests faster,

00:24:49.376 --> 00:24:51.166 A:middle
more readable, and more

00:24:51.166 --> 00:24:52.006 A:middle
modularized.

00:24:52.446 --> 00:24:54.306 A:middle
I also want to mention that many

00:24:54.306 --> 00:24:55.606 A:middle
of the techniques that Brian

00:24:55.606 --> 00:24:57.256 A:middle
described earlier, can also be

00:24:57.256 --> 00:24:58.256 A:middle
applied to test code.

00:24:58.926 --> 00:25:00.056 A:middle
Here, we're going to go through

00:25:00.056 --> 00:25:01.766 A:middle
some additional tips.

00:25:03.196 --> 00:25:05.516 A:middle
First, I'll talk about having a

00:25:05.606 --> 00:25:07.166 A:middle
balance between UI and unit

00:25:08.106 --> 00:25:08.330 A:middle
tests.

00:25:09.376 --> 00:25:11.496 A:middle
Then, dive into code that helps

00:25:11.496 --> 00:25:13.816 A:middle
test scale with the focus on UI

00:25:13.816 --> 00:25:14.376 A:middle
test code.

00:25:15.086 --> 00:25:17.386 A:middle
And then, I'll talk about the

00:25:17.386 --> 00:25:19.416 A:middle
importance of having quality in

00:25:19.416 --> 00:25:20.000 A:middle
test code.

00:25:22.736 --> 00:25:23.716 A:middle
Striking the right balance

00:25:23.776 --> 00:25:27.436 A:middle
between UI and unit tests.

00:25:27.436 --> 00:25:28.436 A:middle
I sometimes like to view my

00:25:28.436 --> 00:25:30.006 A:middle
distribution of tests as a

00:25:30.006 --> 00:25:30.536 A:middle
pyramid.

00:25:31.816 --> 00:25:33.216 A:middle
At the top, you have your UI

00:25:33.216 --> 00:25:36.036 A:middle
tests, and at the bottom, you

00:25:36.036 --> 00:25:37.906 A:middle
have your unit tests.

00:25:38.656 --> 00:25:40.026 A:middle
These [inaudible] pyramid

00:25:40.026 --> 00:25:42.286 A:middle
structure we usually have more

00:25:42.406 --> 00:25:44.336 A:middle
unit tests than we will UI

00:25:44.336 --> 00:25:44.826 A:middle
tests.

00:25:45.336 --> 00:25:46.526 A:middle
This is usually because unit

00:25:46.526 --> 00:25:48.496 A:middle
tests can run much more quickly

00:25:48.496 --> 00:25:49.566 A:middle
than UI tests.

00:25:50.956 --> 00:25:53.296 A:middle
Now between UI and unit tests,

00:25:53.456 --> 00:25:56.206 A:middle
we also have integration tests.

00:25:56.986 --> 00:25:58.726 A:middle
However, today, we're going to

00:25:58.726 --> 00:26:00.156 A:middle
focus more on just UI and unit

00:26:00.156 --> 00:26:00.330 A:middle
tests.

00:26:04.396 --> 00:26:06.216 A:middle
Aside from the distribution, we

00:26:06.216 --> 00:26:07.516 A:middle
might also look at the pyramid

00:26:07.516 --> 00:26:08.786 A:middle
as a way to do maintenance

00:26:08.786 --> 00:26:09.246 A:middle
costs.

00:26:09.986 --> 00:26:11.496 A:middle
Generally, UI tests tend to have

00:26:11.496 --> 00:26:12.586 A:middle
a higher maintenance cost

00:26:12.586 --> 00:26:14.036 A:middle
because of the number of things

00:26:14.036 --> 00:26:14.716 A:middle
that can happen.

00:26:15.896 --> 00:26:17.106 A:middle
Unit tests on the other hand,

00:26:17.396 --> 00:26:19.206 A:middle
have a lower maintenance cost.

00:26:19.476 --> 00:26:21.626 A:middle
So, if a unit test fails, it's

00:26:21.626 --> 00:26:23.206 A:middle
usually immediately obvious

00:26:23.346 --> 00:26:24.146 A:middle
what's gone wrong.

00:26:25.336 --> 00:26:27.066 A:middle
With UI tests, it's like casting

00:26:27.066 --> 00:26:28.916 A:middle
a wide net where you can get

00:26:28.916 --> 00:26:30.006 A:middle
failures that are difficult to

00:26:30.006 --> 00:26:31.996 A:middle
understand, or might not be

00:26:31.996 --> 00:26:33.286 A:middle
relevant to the test at hand.

00:26:33.336 --> 00:26:34.946 A:middle
So, it can be a bit more tricky.

00:26:38.216 --> 00:26:39.556 A:middle
While the testing pyramid is a

00:26:39.556 --> 00:26:41.216 A:middle
great way to represent

00:26:41.506 --> 00:26:43.176 A:middle
distributions of -- our

00:26:43.176 --> 00:26:45.096 A:middle
distribution of tests, it

00:26:45.096 --> 00:26:46.486 A:middle
doesn't represent every

00:26:46.536 --> 00:26:47.136 A:middle
situation.

00:26:47.826 --> 00:26:48.996 A:middle
In fact, you might think of

00:26:48.996 --> 00:26:50.816 A:middle
testing as a spectrum, rather

00:26:50.816 --> 00:26:51.726 A:middle
than a pyramid.

00:26:52.296 --> 00:26:53.886 A:middle
It's often the case that some UI

00:26:54.376 --> 00:26:55.606 A:middle
and unit tests, exist on

00:26:55.676 --> 00:26:56.946 A:middle
opposite ends of the spectrum,

00:26:57.406 --> 00:26:58.726 A:middle
or opposite ends of the pyramid.

00:26:59.306 --> 00:27:01.056 A:middle
Some UI tests might be more like

00:27:01.056 --> 00:27:03.626 A:middle
unit tests, and a unit test

00:27:03.696 --> 00:27:04.936 A:middle
might interact with several

00:27:04.936 --> 00:27:07.136 A:middle
different modules of code and

00:27:07.136 --> 00:27:08.886 A:middle
not just single, isolated bits.

00:27:09.986 --> 00:27:10.916 A:middle
The pyramid is just a good

00:27:10.916 --> 00:27:11.746 A:middle
approximation.

00:27:11.746 --> 00:27:15.816 A:middle
It's not written in stone.

00:27:15.906 --> 00:27:16.896 A:middle
When thinking about these two

00:27:16.896 --> 00:27:18.146 A:middle
kinds of tests, we need to

00:27:18.146 --> 00:27:19.036 A:middle
consider each of their

00:27:19.036 --> 00:27:20.000 A:middle
strengths.

00:27:21.386 --> 00:27:23.326 A:middle
Unit tests are great at testing

00:27:23.326 --> 00:27:25.136 A:middle
small bits of code that might be

00:27:25.136 --> 00:27:26.846 A:middle
hard to reach without access to

00:27:26.846 --> 00:27:28.026 A:middle
all of our app source code.

00:27:28.546 --> 00:27:30.896 A:middle
UI tests on the other hand, are

00:27:30.896 --> 00:27:32.196 A:middle
great when you need to test

00:27:32.196 --> 00:27:34.106 A:middle
large chunks of code, working

00:27:34.106 --> 00:27:34.526 A:middle
together.

00:27:35.686 --> 00:27:36.956 A:middle
Of course, we need to keep in

00:27:36.956 --> 00:27:38.406 A:middle
mind that unit tests do have

00:27:38.406 --> 00:27:39.716 A:middle
access to all of our app's

00:27:39.716 --> 00:27:42.686 A:middle
source, whereas UI tests do not.

00:27:45.036 --> 00:27:46.826 A:middle
Focusing more on UI tests, let's

00:27:47.056 --> 00:27:48.096 A:middle
look at a few things you could

00:27:48.096 --> 00:27:49.306 A:middle
to do improve the quality of

00:27:49.306 --> 00:27:50.026 A:middle
your test code.

00:27:51.066 --> 00:27:52.006 A:middle
By making some of the changes

00:27:52.006 --> 00:27:54.236 A:middle
I'm about to suggest, we can

00:27:54.236 --> 00:27:56.026 A:middle
make it easier to create tests

00:27:56.246 --> 00:27:57.766 A:middle
that scale alongside our app

00:27:57.876 --> 00:27:57.976 A:middle
code.

00:28:01.046 --> 00:28:03.356 A:middle
We'll look at abstracting UI

00:28:03.356 --> 00:28:06.196 A:middle
element queries, creating

00:28:06.246 --> 00:28:07.686 A:middle
objects in utility functions,

00:28:07.716 --> 00:28:08.736 A:middle
which can then be placed in a

00:28:08.736 --> 00:28:11.916 A:middle
library for later use, and

00:28:12.126 --> 00:28:13.586 A:middle
utilizing keyboard shortcuts.

00:28:17.326 --> 00:28:18.116 A:middle
So, first we'll look at

00:28:18.116 --> 00:28:19.606 A:middle
abstracting UI element queries.

00:28:20.976 --> 00:28:22.116 A:middle
Say I have an app that has

00:28:22.246 --> 00:28:23.186 A:middle
several buttons in a view

00:28:23.186 --> 00:28:23.696 A:middle
controller.

00:28:24.496 --> 00:28:25.926 A:middle
And each button is at the same

00:28:25.926 --> 00:28:27.086 A:middle
level in the view hierarchy.

00:28:27.086 --> 00:28:29.306 A:middle
The only difference is the name

00:28:29.406 --> 00:28:31.736 A:middle
of each button.

00:28:31.896 --> 00:28:32.836 A:middle
Instead of writing out this

00:28:32.836 --> 00:28:34.706 A:middle
query seven times, let's wrap

00:28:34.706 --> 00:28:35.416 A:middle
this up in a method.

00:28:39.116 --> 00:28:40.746 A:middle
We can now modify each of our

00:28:40.746 --> 00:28:42.416 A:middle
queries to use the new method we

00:28:42.416 --> 00:28:43.066 A:middle
just created.

00:28:43.676 --> 00:28:45.556 A:middle
However, I might even go

00:28:45.556 --> 00:28:45.876 A:middle
further.

00:28:49.366 --> 00:28:50.656 A:middle
Since each method calls the

00:28:50.766 --> 00:28:53.026 A:middle
same, except for the name, let's

00:28:53.026 --> 00:28:54.326 A:middle
put all those names in array and

00:28:54.326 --> 00:28:56.486 A:middle
just loop through them.

00:28:56.696 --> 00:28:57.646 A:middle
This adds some benefit of

00:28:57.646 --> 00:28:59.116 A:middle
maintainability for this code.

00:28:59.616 --> 00:29:00.756 A:middle
If I add an extra button in the

00:29:00.806 --> 00:29:02.926 A:middle
future, I don't have to add a

00:29:02.926 --> 00:29:03.756 A:middle
new line of code.

00:29:03.886 --> 00:29:04.996 A:middle
I just have to add an extra

00:29:04.996 --> 00:29:09.206 A:middle
button name to the array.

00:29:09.376 --> 00:29:11.086 A:middle
By nature of what a UI test is,

00:29:11.726 --> 00:29:14.116 A:middle
we're issuing a lot of these

00:29:14.116 --> 00:29:14.576 A:middle
queries.

00:29:14.576 --> 00:29:16.926 A:middle
So, if you're using the same

00:29:16.926 --> 00:29:18.946 A:middle
query multiple times, store it

00:29:18.946 --> 00:29:19.776 A:middle
as a variable.

00:29:20.076 --> 00:29:21.666 A:middle
Even if it's only part of a

00:29:21.816 --> 00:29:26.126 A:middle
query, store it somewhere.

00:29:26.236 --> 00:29:27.826 A:middle
Also, if you have queries that

00:29:27.826 --> 00:29:29.386 A:middle
are very similar, consider

00:29:29.386 --> 00:29:30.686 A:middle
creating a helper method around

00:29:30.686 --> 00:29:31.316 A:middle
that query.

00:29:32.526 --> 00:29:34.056 A:middle
The code will look a lot cleaner

00:29:34.056 --> 00:29:35.566 A:middle
and become much more readable.

00:29:36.416 --> 00:29:38.246 A:middle
In terms of scaling our test

00:29:38.246 --> 00:29:39.866 A:middle
suite, the use of shorter lines

00:29:39.966 --> 00:29:42.356 A:middle
of code -- of shorter lines of

00:29:42.356 --> 00:29:43.476 A:middle
test code and thoughtfully named

00:29:43.476 --> 00:29:44.996 A:middle
helper methods, will make it

00:29:45.146 --> 00:29:46.576 A:middle
faster and easier to implement

00:29:46.576 --> 00:29:51.046 A:middle
new tests when the time comes.

00:29:51.236 --> 00:29:52.346 A:middle
So, that was abstracting UI

00:29:52.346 --> 00:29:53.396 A:middle
element queries.

00:29:54.166 --> 00:29:55.286 A:middle
Now, let's move on to creating

00:29:55.286 --> 00:29:56.646 A:middle
objects in utility functions.

00:29:56.996 --> 00:29:59.946 A:middle
I have this game I've been

00:29:59.946 --> 00:30:01.916 A:middle
working on, and for each test, I

00:30:01.916 --> 00:30:02.976 A:middle
want to change some settings.

00:30:04.326 --> 00:30:06.506 A:middle
Now, this is not a great example

00:30:06.506 --> 00:30:07.176 A:middle
of scalable code.

00:30:08.166 --> 00:30:09.296 A:middle
Because I've been recently

00:30:09.296 --> 00:30:10.376 A:middle
working with this app, I'm

00:30:10.376 --> 00:30:11.686 A:middle
familiar with how everything is

00:30:11.686 --> 00:30:12.076 A:middle
laid out.

00:30:13.006 --> 00:30:14.296 A:middle
I understand exactly what's

00:30:14.296 --> 00:30:14.746 A:middle
going on.

00:30:15.746 --> 00:30:17.866 A:middle
However, later, if I was to come

00:30:17.866 --> 00:30:19.106 A:middle
back to this code after a few

00:30:19.106 --> 00:30:21.546 A:middle
weeks, or better yet, somebody

00:30:21.546 --> 00:30:23.126 A:middle
not familiar with my code has to

00:30:23.126 --> 00:30:24.796 A:middle
sit down and read what I wrote,

00:30:25.026 --> 00:30:26.406 A:middle
it might not make all that much

00:30:26.486 --> 00:30:27.000 A:middle
sense.

00:30:28.336 --> 00:30:30.146 A:middle
I first have to realize that I

00:30:30.376 --> 00:30:32.886 A:middle
have a Settings page that I need

00:30:32.886 --> 00:30:35.156 A:middle
to get in and out of.

00:30:35.156 --> 00:30:36.636 A:middle
And I then have to realize that

00:30:36.636 --> 00:30:38.446 A:middle
between those two lines, I'm

00:30:38.446 --> 00:30:39.796 A:middle
going through a difficulty page,

00:30:40.066 --> 00:30:42.796 A:middle
setting the difficulty, then I'm

00:30:42.796 --> 00:30:43.666 A:middle
going through a sound page, and

00:30:43.666 --> 00:30:44.726 A:middle
setting the sound.

00:30:45.946 --> 00:30:47.176 A:middle
Coming after an extended period

00:30:47.176 --> 00:30:49.066 A:middle
of time, I might not understand

00:30:49.066 --> 00:30:50.486 A:middle
why I have two back tabs at the

00:30:50.486 --> 00:30:50.876 A:middle
bottom.

00:30:50.876 --> 00:30:53.326 A:middle
I would have to run through this

00:30:53.366 --> 00:30:54.616 A:middle
test to actually see this

00:30:54.616 --> 00:30:55.026 A:middle
happen.

00:30:56.666 --> 00:30:58.366 A:middle
And if the test were broken

00:30:58.366 --> 00:30:59.376 A:middle
because of some change in the

00:30:59.376 --> 00:31:01.146 A:middle
actual UI, I wouldn't be able to

00:31:01.146 --> 00:31:02.626 A:middle
run my test, and I would be able

00:31:02.626 --> 00:31:03.686 A:middle
to see what I wanted to see.

00:31:04.506 --> 00:31:05.876 A:middle
I'd be clueless as to why the

00:31:05.876 --> 00:31:07.316 A:middle
code was written the way it was.

00:31:08.516 --> 00:31:09.926 A:middle
To fix this, let's try to

00:31:09.926 --> 00:31:11.306 A:middle
abstract away some of this logic

00:31:11.306 --> 00:31:12.226 A:middle
into helper methods.

00:31:12.916 --> 00:31:16.666 A:middle
We can create a method to set

00:31:16.696 --> 00:31:17.396 A:middle
the difficulty.

00:31:17.396 --> 00:31:19.676 A:middle
And then similarly, we can

00:31:19.676 --> 00:31:20.586 A:middle
create a method to set the

00:31:20.676 --> 00:31:21.066 A:middle
sound.

00:31:21.636 --> 00:31:23.056 A:middle
But can we do a little better?

00:31:24.046 --> 00:31:26.856 A:middle
Sure. We can instead, of instead

00:31:26.856 --> 00:31:27.946 A:middle
of passing stream typed

00:31:28.006 --> 00:31:29.826 A:middle
arguments, let's utilize enums.

00:31:30.996 --> 00:31:32.406 A:middle
That way, Xcode can -- helps

00:31:32.406 --> 00:31:34.036 A:middle
determine if the arguments we're

00:31:34.036 --> 00:31:35.876 A:middle
passing are even valid, before

00:31:35.876 --> 00:31:36.916 A:middle
we even compile.

00:31:40.276 --> 00:31:41.456 A:middle
Now, looking at the code from

00:31:41.456 --> 00:31:43.056 A:middle
before, if we replace some of

00:31:43.056 --> 00:31:44.126 A:middle
the code with our new helper

00:31:44.126 --> 00:31:47.386 A:middle
methods, we reduce what we had

00:31:47.386 --> 00:31:47.826 A:middle
before.

00:31:47.826 --> 00:31:48.966 A:middle
And this is already starting to

00:31:48.966 --> 00:31:49.796 A:middle
look a lot better.

00:31:49.796 --> 00:31:53.116 A:middle
What about the initial jump in

00:31:53.116 --> 00:31:54.386 A:middle
and out of the Settings page?

00:31:55.016 --> 00:31:56.726 A:middle
Can we improve this as well?

00:31:57.086 --> 00:31:57.866 A:middle
I think we can.

00:31:58.836 --> 00:32:00.556 A:middle
Let's make a game app class.

00:32:00.556 --> 00:32:03.566 A:middle
And in this class, I'll include

00:32:03.566 --> 00:32:05.276 A:middle
the enums I defined earlier for

00:32:05.276 --> 00:32:07.786 A:middle
difficulty and sound.

00:32:07.826 --> 00:32:09.066 A:middle
I'll also include the helper

00:32:09.066 --> 00:32:10.826 A:middle
methods from before that set

00:32:10.826 --> 00:32:12.000 A:middle
those settings.

00:32:13.396 --> 00:32:14.516 A:middle
We'll create another method

00:32:14.516 --> 00:32:16.286 A:middle
called Configure Settings, that

00:32:16.286 --> 00:32:17.326 A:middle
takes the two settings as

00:32:17.326 --> 00:32:20.496 A:middle
inputs, and we'll migrate the

00:32:20.546 --> 00:32:22.336 A:middle
setup logic from before, into

00:32:22.336 --> 00:32:23.206 A:middle
the configure method.

00:32:23.716 --> 00:32:26.966 A:middle
Back to where we were before,

00:32:27.206 --> 00:32:28.286 A:middle
now that we've created this game

00:32:28.286 --> 00:32:30.276 A:middle
app class, we can take away all

00:32:30.276 --> 00:32:32.266 A:middle
the code we wrote before, and

00:32:32.266 --> 00:32:33.866 A:middle
just use a single call, the

00:32:33.866 --> 00:32:34.626 A:middle
configure method.

00:32:35.476 --> 00:32:36.956 A:middle
This looks a lot more readable

00:32:36.956 --> 00:32:38.286 A:middle
to me than what we had before.

00:32:39.276 --> 00:32:41.416 A:middle
Now, if I wrote more tests than

00:32:41.416 --> 00:32:42.856 A:middle
needed to set the settings, I

00:32:43.206 --> 00:32:44.156 A:middle
would just call our configure

00:32:44.156 --> 00:32:44.660 A:middle
method.

00:32:46.166 --> 00:32:48.276 A:middle
And if I needed to -- or if I

00:32:48.276 --> 00:32:49.386 A:middle
decided that I wanted to add

00:32:49.386 --> 00:32:50.836 A:middle
more settings to my app, I would

00:32:50.836 --> 00:32:51.826 A:middle
just have to update our

00:32:51.826 --> 00:32:53.026 A:middle
configure settings method to

00:32:53.026 --> 00:32:53.946 A:middle
handle these additional

00:32:53.946 --> 00:32:54.306 A:middle
settings.

00:32:54.996 --> 00:32:58.856 A:middle
From the example, one of the

00:32:58.856 --> 00:33:00.516 A:middle
most important things to do when

00:33:00.516 --> 00:33:02.096 A:middle
trying to scale your tests, is

00:33:02.096 --> 00:33:03.926 A:middle
to create abstraction that you

00:33:04.056 --> 00:33:05.726 A:middle
can later put into a library

00:33:05.726 --> 00:33:06.006 A:middle
suite.

00:33:06.606 --> 00:33:07.796 A:middle
By doing this, we're

00:33:07.796 --> 00:33:09.476 A:middle
encapsulating common workflows

00:33:09.806 --> 00:33:10.986 A:middle
that can be applied to more than

00:33:10.986 --> 00:33:12.266 A:middle
one test.

00:33:13.816 --> 00:33:15.296 A:middle
This also means that we're able

00:33:15.296 --> 00:33:16.676 A:middle
to share test code across

00:33:16.746 --> 00:33:17.716 A:middle
different platforms.

00:33:18.256 --> 00:33:22.306 A:middle
And, of course, by sharing code,

00:33:22.306 --> 00:33:23.906 A:middle
we improve maintainability.

00:33:24.926 --> 00:33:26.006 A:middle
If something related to an

00:33:26.006 --> 00:33:27.876 A:middle
abstracted workflow changes, we

00:33:27.876 --> 00:33:29.146 A:middle
only have to update our code in

00:33:29.146 --> 00:33:32.076 A:middle
a single place, as opposed to

00:33:34.756 --> 00:33:35.196 A:middle
several.

00:33:35.246 --> 00:33:36.176 A:middle
One other improvement that I

00:33:36.176 --> 00:33:37.646 A:middle
want to mention, in our

00:33:37.646 --> 00:33:39.756 A:middle
configure method, and new in

00:33:39.916 --> 00:33:42.566 A:middle
Xcode this year, we can add an

00:33:42.566 --> 00:33:45.036 A:middle
XCTContent.runActivity block to

00:33:45.666 --> 00:33:46.706 A:middle
our code.

00:33:46.906 --> 00:33:48.086 A:middle
This makes it so that when we

00:33:48.086 --> 00:33:49.636 A:middle
run our test, instead of having

00:33:49.636 --> 00:33:51.006 A:middle
a log that contains all the

00:33:51.006 --> 00:33:52.426 A:middle
actions that we made at the top

00:33:52.426 --> 00:33:55.056 A:middle
level, we can nest our logging,

00:33:55.056 --> 00:33:56.076 A:middle
using runActivity.

00:33:56.626 --> 00:33:59.406 A:middle
This helps organize our logging

00:33:59.406 --> 00:34:01.686 A:middle
to make things look a little bit

00:34:02.556 --> 00:34:02.726 A:middle
cleaner.

00:34:02.856 --> 00:34:03.986 A:middle
For more information regarding

00:34:03.986 --> 00:34:05.926 A:middle
the test activity feature, check

00:34:05.926 --> 00:34:07.516 A:middle
out the earlier talk about

00:34:07.516 --> 00:34:11.006 A:middle
What's New in Testing?

00:34:11.546 --> 00:34:13.116 A:middle
Now, let's move on to Utilizing

00:34:13.116 --> 00:34:14.996 A:middle
Keyboard Shortcuts for macOS UI

00:34:14.996 --> 00:34:15.330 A:middle
Tests.

00:34:17.886 --> 00:34:19.166 A:middle
Let's say I have an app where

00:34:19.166 --> 00:34:20.606 A:middle
the user can pick a color for

00:34:20.606 --> 00:34:21.876 A:middle
their text, using the standard

00:34:21.876 --> 00:34:23.276 A:middle
macOS color picker.

00:34:23.886 --> 00:34:25.336 A:middle
And I'm writing a test to verify

00:34:25.336 --> 00:34:26.646 A:middle
that the color is set correctly.

00:34:27.196 --> 00:34:30.186 A:middle
The typical way to bring up the

00:34:30.186 --> 00:34:32.056 A:middle
color picker in my app is by

00:34:32.056 --> 00:34:34.056 A:middle
opening the Format menu, and

00:34:34.056 --> 00:34:35.716 A:middle
navigating to the Font sub-menu,

00:34:36.086 --> 00:34:37.316 A:middle
and finally choosing Show

00:34:37.316 --> 00:34:37.926 A:middle
Colors.

00:34:37.986 --> 00:34:40.796 A:middle
I can write this in my UI test

00:34:40.796 --> 00:34:41.500 A:middle
like this.

00:34:43.976 --> 00:34:45.616 A:middle
But there's a faster way to do

00:34:45.616 --> 00:34:47.016 A:middle
this that'll scale better as my

00:34:47.016 --> 00:34:47.846 A:middle
test [inaudible] grows.

00:34:49.166 --> 00:34:50.816 A:middle
Notice that the Show Colors menu

00:34:50.816 --> 00:34:52.576 A:middle
item has an associated keyboard

00:34:52.576 --> 00:34:53.236 A:middle
shortcut.

00:34:53.846 --> 00:34:57.456 A:middle
Rather than using multiple lines

00:34:57.456 --> 00:34:58.516 A:middle
of code to bring up the color

00:34:58.516 --> 00:35:01.166 A:middle
picker, we can just use one line

00:35:01.166 --> 00:35:02.666 A:middle
of code using the shortcut.

00:35:03.236 --> 00:35:06.436 A:middle
And for the sake of readability,

00:35:06.616 --> 00:35:07.806 A:middle
I might use a wrapper to make

00:35:07.806 --> 00:35:08.576 A:middle
this call for me.

00:35:09.646 --> 00:35:11.266 A:middle
So, not only is this less code

00:35:11.266 --> 00:35:13.056 A:middle
to maintain in my tests, it's

00:35:13.056 --> 00:35:14.306 A:middle
less code that has to be run

00:35:14.306 --> 00:35:15.846 A:middle
that isn't directly relevant to

00:35:15.846 --> 00:35:17.016 A:middle
the actual test I'm trying to

00:35:17.046 --> 00:35:18.000 A:middle
perform.

00:35:20.576 --> 00:35:22.326 A:middle
So, in an example test method, I

00:35:22.326 --> 00:35:23.446 A:middle
was previously going through the

00:35:23.446 --> 00:35:25.006 A:middle
menu to get the color picker to

00:35:25.006 --> 00:35:25.316 A:middle
show.

00:35:25.826 --> 00:35:29.136 A:middle
Using the new wrapper method, we

00:35:29.136 --> 00:35:30.406 A:middle
remove all those extra lines and

00:35:30.406 --> 00:35:31.856 A:middle
reduce to a single method.

00:35:32.586 --> 00:35:33.906 A:middle
Not only does this make my test

00:35:34.036 --> 00:35:35.426 A:middle
faster, it makes my code look a

00:35:35.426 --> 00:35:36.876 A:middle
lot more readable.

00:35:39.206 --> 00:35:40.886 A:middle
Looking at what we just saw, if

00:35:40.886 --> 00:35:42.066 A:middle
you're writing a UI test for a

00:35:42.066 --> 00:35:44.076 A:middle
macOS application, you can offer

00:35:44.076 --> 00:35:45.416 A:middle
a keyboard shortcut instead of

00:35:45.416 --> 00:35:46.416 A:middle
going through the menu bar.

00:35:47.056 --> 00:35:49.016 A:middle
I'm still going to have at least

00:35:49.016 --> 00:35:50.736 A:middle
one test that ensures that

00:35:50.736 --> 00:35:52.046 A:middle
bringing up the color picker via

00:35:52.046 --> 00:35:53.686 A:middle
the menu bar, works properly,

00:35:54.076 --> 00:35:56.246 A:middle
but that doesn't need to be

00:35:56.246 --> 00:35:57.826 A:middle
repeated across every single

00:35:57.826 --> 00:35:58.786 A:middle
test that involves the color

00:35:58.786 --> 00:35:59.126 A:middle
picker.

00:36:02.916 --> 00:36:04.956 A:middle
In the process of using keyboard

00:36:04.956 --> 00:36:06.876 A:middle
shortcuts, we make our test code

00:36:06.876 --> 00:36:09.196 A:middle
more compact by skipping extra

00:36:09.196 --> 00:36:10.496 A:middle
steps needed to work through the

00:36:10.496 --> 00:36:12.856 A:middle
UI, sometimes reducing multiple

00:36:12.856 --> 00:36:14.206 A:middle
lines of code to a single line,

00:36:14.546 --> 00:36:15.746 A:middle
which can help for readability.

00:36:18.636 --> 00:36:20.346 A:middle
Finally, I want to stress to all

00:36:20.346 --> 00:36:21.966 A:middle
of you that writing good tests

00:36:22.096 --> 00:36:23.496 A:middle
is about writing good code.

00:36:24.126 --> 00:36:25.886 A:middle
It's easy to treat tests as an

00:36:25.886 --> 00:36:26.436 A:middle
afterthought.

00:36:27.446 --> 00:36:29.366 A:middle
Usually, we focus on trying to

00:36:29.366 --> 00:36:30.466 A:middle
make our app the best it can

00:36:30.466 --> 00:36:32.346 A:middle
possibly be, by investing all

00:36:32.346 --> 00:36:33.506 A:middle
this time in writing beautiful

00:36:33.506 --> 00:36:35.216 A:middle
app code that adheres to all

00:36:35.216 --> 00:36:36.696 A:middle
these principles of good design.

00:36:36.966 --> 00:36:38.246 A:middle
We might have this additional

00:36:38.496 --> 00:36:40.336 A:middle
requirement of writing test

00:36:40.396 --> 00:36:40.686 A:middle
code.

00:36:40.686 --> 00:36:41.746 A:middle
It might be something tacked on

00:36:41.746 --> 00:36:43.196 A:middle
at the end or done in a hurry

00:36:43.196 --> 00:36:44.546 A:middle
just to check off a checkbox.

00:36:44.606 --> 00:36:46.896 A:middle
But we can't allow this to

00:36:47.186 --> 00:36:47.330 A:middle
happen.

00:36:48.926 --> 00:36:50.476 A:middle
Without the same attention to

00:36:50.476 --> 00:36:52.326 A:middle
detail, test code isn't going to

00:36:52.326 --> 00:36:53.896 A:middle
scale the same way our app code

00:36:53.896 --> 00:36:54.000 A:middle
might.

00:36:56.416 --> 00:36:58.546 A:middle
So, to that end, test code is

00:36:58.546 --> 00:37:00.266 A:middle
important even though it isn't

00:37:00.266 --> 00:37:00.736 A:middle
shipping.

00:37:02.156 --> 00:37:03.496 A:middle
Also note that the test suite

00:37:03.496 --> 00:37:04.936 A:middle
should support the evolution of

00:37:04.936 --> 00:37:06.686 A:middle
your app, and not hinder change.

00:37:07.156 --> 00:37:08.396 A:middle
With low quality test code, it

00:37:08.396 --> 00:37:10.006 A:middle
becomes a burden to have to

00:37:10.006 --> 00:37:11.056 A:middle
update your test whenever you

00:37:11.056 --> 00:37:12.276 A:middle
make a change to your app.

00:37:13.156 --> 00:37:14.626 A:middle
But by consciously designing

00:37:14.626 --> 00:37:16.416 A:middle
test code with quality in mind,

00:37:16.816 --> 00:37:18.736 A:middle
our ability to scale won't be

00:37:18.736 --> 00:37:19.856 A:middle
inhibited by poorly designed

00:37:19.856 --> 00:37:20.106 A:middle
tests.

00:37:20.836 --> 00:37:24.156 A:middle
And of course, coding principles

00:37:24.156 --> 00:37:26.056 A:middle
that apply to app code, also

00:37:26.056 --> 00:37:27.086 A:middle
apply to test code.

00:37:27.686 --> 00:37:28.826 A:middle
Test code and app code should be

00:37:28.826 --> 00:37:29.536 A:middle
viewed equally.

00:37:30.106 --> 00:37:33.246 A:middle
And here's an idea for you.

00:37:33.286 --> 00:37:34.706 A:middle
We should have code reviews for

00:37:34.706 --> 00:37:36.646 A:middle
test code, not just code reviews

00:37:36.886 --> 00:37:37.986 A:middle
with test code.

00:37:38.596 --> 00:37:39.446 A:middle
Having code reviews that are

00:37:39.446 --> 00:37:40.976 A:middle
exclusively for test code,

00:37:40.976 --> 00:37:42.006 A:middle
ensures that somebody else is

00:37:42.006 --> 00:37:42.656 A:middle
checking your work, or

00:37:43.016 --> 00:37:44.626 A:middle
[inaudible] with a test cover,

00:37:44.946 --> 00:37:46.256 A:middle
and it's a chance to further

00:37:46.256 --> 00:37:47.566 A:middle
improve the tests themselves.

00:37:47.566 --> 00:37:51.506 A:middle
Now, I want to leave you with a

00:37:51.506 --> 00:37:51.726 A:middle
thought.

00:37:52.316 --> 00:37:54.016 A:middle
App code and the tests that

00:37:54.016 --> 00:37:55.516 A:middle
verify it, are really two halves

00:37:55.516 --> 00:37:56.016 A:middle
of a whole.

00:37:56.726 --> 00:37:57.896 A:middle
When you update your app code,

00:37:57.966 --> 00:37:58.976 A:middle
you'll need to update your test

00:37:59.196 --> 00:37:59.716 A:middle
code too.

00:37:59.716 --> 00:38:04.026 A:middle
We need to think of app code and

00:38:04.026 --> 00:38:05.966 A:middle
the test code, as part of the

00:38:05.966 --> 00:38:07.526 A:middle
same thing, our code.

00:38:08.476 --> 00:38:09.366 A:middle
By making our code more

00:38:09.366 --> 00:38:10.956 A:middle
testable, as Brian discussed

00:38:10.956 --> 00:38:12.546 A:middle
earlier, and by treating test

00:38:12.546 --> 00:38:13.816 A:middle
code with the same care as your

00:38:13.816 --> 00:38:15.286 A:middle
app code, you improve the

00:38:15.286 --> 00:38:16.306 A:middle
quality of the whole app.

00:38:17.196 --> 00:38:18.236 A:middle
We ought to be proud of both

00:38:18.236 --> 00:38:20.166 A:middle
halves, and treat each with the

00:38:20.166 --> 00:38:21.496 A:middle
care and attention that they

00:38:21.496 --> 00:38:21.926 A:middle
deserve.

00:38:25.826 --> 00:38:26.996 A:middle
For more information and

00:38:26.996 --> 00:38:27.976 A:middle
resources regarding this

00:38:27.976 --> 00:38:29.286 A:middle
session, you can visit the link

00:38:29.316 --> 00:38:30.226 A:middle
listed on the screen.

00:38:30.226 --> 00:38:33.296 A:middle
Here are a few related sessions.

00:38:33.356 --> 00:38:34.596 A:middle
One that happened yesterday, and

00:38:34.596 --> 00:38:35.826 A:middle
a few that happened in previous

00:38:35.826 --> 00:38:36.196 A:middle
years.

00:38:36.226 --> 00:38:37.616 A:middle
You can check those out online,

00:38:37.706 --> 00:38:40.156 A:middle
or through the WWDC app.

00:38:40.446 --> 00:38:41.476 A:middle
And with that, I'd like to thank

00:38:41.476 --> 00:38:42.506 A:middle
you for your attention, and I

00:38:42.506 --> 00:38:43.336 A:middle
hope you enjoy the rest of the

00:38:43.336 --> 00:38:43.676 A:middle
conference.

00:38:44.516 --> 00:38:50.500 A:middle
[ Applause ]