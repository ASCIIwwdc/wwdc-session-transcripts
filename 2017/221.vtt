WEBVTT

00:00:23.516 --> 00:00:30.116 A:middle
[ Applause ]

00:00:30.616 --> 00:00:31.696 A:middle
&gt;&gt; Good afternoon, everyone.

00:00:31.866 --> 00:00:32.696 A:middle
Thank you for being here.

00:00:32.996 --> 00:00:34.706 A:middle
Welcome to "What's New in

00:00:34.706 --> 00:00:35.056 A:middle
Health".

00:00:35.506 --> 00:00:36.386 A:middle
My name is Alexa.

00:00:36.556 --> 00:00:37.946 A:middle
I'm a software engineer on the

00:00:37.946 --> 00:00:40.036 A:middle
HealthKit Team and one of my

00:00:40.036 --> 00:00:41.506 A:middle
favorite parts of being on this

00:00:41.506 --> 00:00:43.356 A:middle
team is getting to see the ways

00:00:43.356 --> 00:00:44.486 A:middle
in which technology can help

00:00:44.486 --> 00:00:45.386 A:middle
people improve their lives.

00:00:46.036 --> 00:00:48.216 A:middle
Like many of our users, I've

00:00:48.286 --> 00:00:49.586 A:middle
absolutely loved getting to use

00:00:49.586 --> 00:00:51.516 A:middle
all fitness features on my Apple

00:00:51.516 --> 00:00:51.906 A:middle
Watch.

00:00:52.526 --> 00:00:53.976 A:middle
Getting to close my rings every

00:00:53.976 --> 00:00:55.476 A:middle
day and share my activity with

00:00:55.476 --> 00:00:55.986 A:middle
friends.

00:00:55.986 --> 00:00:57.506 A:middle
And really the integration with

00:00:57.506 --> 00:00:58.816 A:middle
all of your great fitness apps

00:00:59.146 --> 00:01:01.846 A:middle
have made it easier to get fit.

00:01:02.426 --> 00:01:04.236 A:middle
Many people also use technology

00:01:04.236 --> 00:01:05.236 A:middle
to help them track other

00:01:05.236 --> 00:01:06.166 A:middle
components of the well-being

00:01:06.166 --> 00:01:06.696 A:middle
like sleep.

00:01:07.256 --> 00:01:08.346 A:middle
Having a good understanding of

00:01:08.346 --> 00:01:09.846 A:middle
your sleep can help you be more

00:01:09.846 --> 00:01:11.766 A:middle
prepared for your day and get a

00:01:11.766 --> 00:01:13.766 A:middle
better night's rest.

00:01:14.086 --> 00:01:15.956 A:middle
However, many of our users also

00:01:15.956 --> 00:01:18.216 A:middle
rely on technology in ways that

00:01:18.216 --> 00:01:19.236 A:middle
we may not even think of.

00:01:20.366 --> 00:01:21.636 A:middle
For example, in managing a

00:01:21.636 --> 00:01:23.316 A:middle
chronic condition like diabetes

00:01:23.926 --> 00:01:27.946 A:middle
and on iOS and watchOS, the home

00:01:27.946 --> 00:01:29.466 A:middle
of all of this personal health

00:01:29.736 --> 00:01:30.886 A:middle
data is HealthKit.

00:01:31.856 --> 00:01:33.926 A:middle
So, we've seen that users have

00:01:33.926 --> 00:01:34.956 A:middle
really bought into our health

00:01:34.956 --> 00:01:36.056 A:middle
and wellness ecosystem.

00:01:36.436 --> 00:01:37.236 A:middle
And by innovating with

00:01:37.236 --> 00:01:38.566 A:middle
HealthKit, you're app can

00:01:38.566 --> 00:01:40.006 A:middle
immediately take advantage of

00:01:40.006 --> 00:01:41.446 A:middle
the guarantees of privacy,

00:01:41.446 --> 00:01:43.296 A:middle
transparency and control that we

00:01:43.296 --> 00:01:44.526 A:middle
aim to give all of our users.

00:01:45.706 --> 00:01:47.566 A:middle
So, in the next 60 minutes we'll

00:01:47.566 --> 00:01:49.346 A:middle
be going over what's new in our

00:01:49.346 --> 00:01:51.256 A:middle
SEK this year in iOS 11 and

00:01:51.256 --> 00:01:53.376 A:middle
watchOS 4 to help you continue

00:01:53.376 --> 00:01:54.496 A:middle
to create innovative health

00:01:54.496 --> 00:01:56.086 A:middle
technologies on Apple platforms.

00:01:57.096 --> 00:01:58.186 A:middle
Let's dive in.

00:01:59.336 --> 00:02:00.846 A:middle
So, first we'll go over a quick

00:02:00.846 --> 00:02:02.536 A:middle
tour of the new datatypes in

00:02:02.536 --> 00:02:03.396 A:middle
HealthKit this year.

00:02:04.416 --> 00:02:06.046 A:middle
After that, we'll cover some

00:02:06.046 --> 00:02:07.736 A:middle
general updates to our workout

00:02:07.736 --> 00:02:08.936 A:middle
API's to help build really great

00:02:08.936 --> 00:02:10.026 A:middle
fitness experiences.

00:02:10.566 --> 00:02:13.046 A:middle
After that we'll introduce sync

00:02:13.046 --> 00:02:14.826 A:middle
identifiers which are a new

00:02:14.826 --> 00:02:16.156 A:middle
feature to help you de-duplicate

00:02:16.156 --> 00:02:17.566 A:middle
data across multiple devices.

00:02:18.166 --> 00:02:20.206 A:middle
And finally, we have some

00:02:20.206 --> 00:02:21.546 A:middle
updates to share regarding our

00:02:21.546 --> 00:02:22.786 A:middle
support for users managing

00:02:22.786 --> 00:02:23.316 A:middle
diabetes.

00:02:23.316 --> 00:02:26.276 A:middle
So, let's get started with our

00:02:26.276 --> 00:02:27.226 A:middle
new HealthKit types.

00:02:27.366 --> 00:02:28.576 A:middle
So, if you've used HealthKit

00:02:28.576 --> 00:02:30.036 A:middle
before you'll know that we

00:02:30.096 --> 00:02:31.226 A:middle
categorize all of that personal

00:02:31.226 --> 00:02:32.626 A:middle
data into a bunch of different

00:02:32.626 --> 00:02:33.736 A:middle
types that you then save to

00:02:33.736 --> 00:02:34.146 A:middle
HealthKit.

00:02:34.146 --> 00:02:35.326 A:middle
And we have some new ones to

00:02:35.326 --> 00:02:36.096 A:middle
introduce this year.

00:02:36.526 --> 00:02:38.336 A:middle
I'm going to start with the

00:02:38.336 --> 00:02:39.106 A:middle
sample types.

00:02:39.576 --> 00:02:40.806 A:middle
So, samples that you save into

00:02:40.806 --> 00:02:42.486 A:middle
HealthKit are bits of data that

00:02:42.486 --> 00:02:44.036 A:middle
have particular timestamps and

00:02:44.356 --> 00:02:45.326 A:middle
are of a certain type.

00:02:46.656 --> 00:02:47.796 A:middle
The first new one that we have

00:02:47.796 --> 00:02:50.256 A:middle
this year, is HKWorkoutRoute.

00:02:50.696 --> 00:02:52.206 A:middle
So, workout routes let you save

00:02:52.206 --> 00:02:54.326 A:middle
a map of your colocation during

00:02:54.326 --> 00:02:54.766 A:middle
a workout.

00:02:55.116 --> 00:02:56.466 A:middle
And we will cover this in much

00:02:56.466 --> 00:02:59.346 A:middle
more detail later in the talk.

00:02:59.936 --> 00:03:01.286 A:middle
We are also introducing waist

00:03:01.286 --> 00:03:01.956 A:middle
circumference.

00:03:02.296 --> 00:03:03.406 A:middle
So, this is a body metric

00:03:03.406 --> 00:03:05.786 A:middle
similar to height or weight that

00:03:05.786 --> 00:03:07.156 A:middle
users can track over time to

00:03:07.156 --> 00:03:08.276 A:middle
understand changes to their

00:03:08.276 --> 00:03:08.586 A:middle
body.

00:03:09.036 --> 00:03:11.936 A:middle
Another body metric that we've

00:03:11.966 --> 00:03:13.826 A:middle
introduced this year is VO2 max.

00:03:14.426 --> 00:03:16.486 A:middle
So, VO2 max measures the maximum

00:03:16.486 --> 00:03:18.116 A:middle
rate of oxygen intake during

00:03:18.116 --> 00:03:18.906 A:middle
peak exercise.

00:03:19.096 --> 00:03:20.206 A:middle
And what's really cool about

00:03:20.206 --> 00:03:22.836 A:middle
this is on watchOS 4, the Apple

00:03:22.836 --> 00:03:25.146 A:middle
Watch can even estimate VO2 max

00:03:25.476 --> 00:03:26.846 A:middle
during certain outdoor walking

00:03:26.846 --> 00:03:27.486 A:middle
and running workouts.

00:03:28.056 --> 00:03:29.416 A:middle
So, with permission to do this

00:03:29.416 --> 00:03:31.346 A:middle
data, your app can see the VO2

00:03:31.346 --> 00:03:33.846 A:middle
max that was estimated by Apple

00:03:33.846 --> 00:03:34.206 A:middle
Watch.

00:03:34.676 --> 00:03:37.296 A:middle
And finally, one of our most

00:03:37.296 --> 00:03:38.456 A:middle
requested types in HealthKit,

00:03:38.786 --> 00:03:39.886 A:middle
this year we are introducing

00:03:39.886 --> 00:03:40.696 A:middle
insulin delivery.

00:03:41.176 --> 00:03:42.236 A:middle
My colleague Michael will cover

00:03:42.236 --> 00:03:42.516 A:middle
this [applause].

00:03:46.976 --> 00:03:47.946 A:middle
My colleague Michael will cover

00:03:47.946 --> 00:03:49.246 A:middle
this in much more detail later

00:03:49.246 --> 00:03:49.746 A:middle
in the talk.

00:03:50.636 --> 00:03:51.776 A:middle
So, along with these sample

00:03:51.776 --> 00:03:53.196 A:middle
types, we've also introduced

00:03:53.196 --> 00:03:54.646 A:middle
some new workout activity types.

00:03:55.156 --> 00:03:56.206 A:middle
So, these categorize the

00:03:56.206 --> 00:03:57.226 A:middle
different workouts your users

00:03:57.226 --> 00:03:58.036 A:middle
might be doing.

00:03:58.316 --> 00:04:00.576 A:middle
And we have a wide range of them

00:04:00.576 --> 00:04:02.216 A:middle
and they configure your workout

00:04:02.526 --> 00:04:03.416 A:middle
as well.

00:04:04.016 --> 00:04:04.806 A:middle
So, the first one we've

00:04:04.806 --> 00:04:06.226 A:middle
introduced this year is Tai Chi

00:04:06.676 --> 00:04:09.166 A:middle
as well as mixed cardio, and

00:04:09.166 --> 00:04:10.326 A:middle
finally hand cycling.

00:04:10.626 --> 00:04:11.586 A:middle
So, you can use these to build

00:04:11.586 --> 00:04:12.826 A:middle
even more encompassing fitness

00:04:12.826 --> 00:04:14.096 A:middle
experiences for your users.

00:04:14.576 --> 00:04:17.276 A:middle
Along with our new workout

00:04:17.536 --> 00:04:19.296 A:middle
activity types, we also have

00:04:19.296 --> 00:04:20.356 A:middle
some general updates to our

00:04:20.356 --> 00:04:20.896 A:middle
workout API.

00:04:22.076 --> 00:04:24.196 A:middle
So, some of these are tied to

00:04:24.196 --> 00:04:25.526 A:middle
our fall release where we

00:04:25.526 --> 00:04:26.706 A:middle
released the Apple Watch Series

00:04:26.706 --> 00:04:26.956 A:middle
2.

00:04:27.196 --> 00:04:28.346 A:middle
And some of this is new this

00:04:28.346 --> 00:04:30.036 A:middle
year in iOS 11 and watchOS 4.

00:04:30.136 --> 00:04:31.426 A:middle
So, we'll cover some updates

00:04:31.426 --> 00:04:32.216 A:middle
regarding swimming.

00:04:32.556 --> 00:04:34.706 A:middle
We'll talk about the new segment

00:04:34.996 --> 00:04:35.296 A:middle
API.

00:04:35.296 --> 00:04:36.796 A:middle
And we'll also talk about a new

00:04:36.796 --> 00:04:37.946 A:middle
way that your apps can pause and

00:04:37.946 --> 00:04:38.706 A:middle
resume workouts.

00:04:39.636 --> 00:04:42.046 A:middle
So, last fall we released the

00:04:42.046 --> 00:04:43.066 A:middle
Apple Watch Series 2.

00:04:43.376 --> 00:04:44.776 A:middle
And people have absolutely loved

00:04:44.776 --> 00:04:45.536 A:middle
getting to take their watch

00:04:45.536 --> 00:04:45.936 A:middle
swimming.

00:04:46.556 --> 00:04:47.986 A:middle
You can take it in the pool as

00:04:47.986 --> 00:04:49.256 A:middle
well as out in the ocean and

00:04:49.256 --> 00:04:49.626 A:middle
lakes.

00:04:50.136 --> 00:04:51.506 A:middle
And so, I'm going to start by

00:04:51.816 --> 00:04:52.936 A:middle
covering some of the types of

00:04:52.936 --> 00:04:54.886 A:middle
tracking that Apple Watch does

00:04:54.886 --> 00:04:56.436 A:middle
for swimming workouts, and then

00:04:56.596 --> 00:04:57.666 A:middle
dive into some of the new stuff

00:04:57.666 --> 00:04:58.056 A:middle
this year.

00:04:59.376 --> 00:05:01.276 A:middle
So firstly, as I mentioned we

00:05:01.276 --> 00:05:02.956 A:middle
have support for both pool and

00:05:02.956 --> 00:05:03.896 A:middle
open water swims.

00:05:04.306 --> 00:05:05.496 A:middle
And for pool swims you can

00:05:05.496 --> 00:05:06.986 A:middle
configure the lap length to get

00:05:06.986 --> 00:05:08.396 A:middle
the most accurate statistics

00:05:08.396 --> 00:05:10.406 A:middle
about the workout.

00:05:10.876 --> 00:05:12.536 A:middle
We also automatically track some

00:05:12.536 --> 00:05:13.636 A:middle
key swimming metrics.

00:05:14.116 --> 00:05:15.866 A:middle
The first of these are swimming

00:05:15.866 --> 00:05:18.096 A:middle
distance and swimming stroke

00:05:18.096 --> 00:05:18.346 A:middle
count.

00:05:19.176 --> 00:05:20.176 A:middle
So, if you're familiar with

00:05:20.176 --> 00:05:21.236 A:middle
HealthKit, you'll be aware of

00:05:21.236 --> 00:05:22.346 A:middle
how you would want to open a

00:05:22.346 --> 00:05:23.756 A:middle
query against certain samples

00:05:23.756 --> 00:05:24.716 A:middle
that you're interested in during

00:05:24.716 --> 00:05:25.126 A:middle
the workout.

00:05:25.126 --> 00:05:26.786 A:middle
For example, the calories the

00:05:26.786 --> 00:05:28.826 A:middle
user has burned or their heart

00:05:28.826 --> 00:05:30.286 A:middle
rate for that current time.

00:05:31.066 --> 00:05:32.396 A:middle
So, similarly, these two metrics

00:05:32.686 --> 00:05:34.176 A:middle
you'd want to open a query for

00:05:34.176 --> 00:05:34.936 A:middle
and track throughout the

00:05:34.936 --> 00:05:36.386 A:middle
workout, so you can display them

00:05:36.386 --> 00:05:37.096 A:middle
live to the user.

00:05:38.166 --> 00:05:40.676 A:middle
Apple Watch can also detect

00:05:40.786 --> 00:05:42.356 A:middle
individual laps as the user is

00:05:42.356 --> 00:05:43.446 A:middle
swimming in real time.

00:05:44.316 --> 00:05:46.136 A:middle
In addition, we even track the

00:05:46.136 --> 00:05:47.726 A:middle
stroke style per lap, which is

00:05:47.726 --> 00:05:48.876 A:middle
really cool and can help give

00:05:49.176 --> 00:05:51.516 A:middle
really up-to-date statistics

00:05:51.516 --> 00:05:52.166 A:middle
about the workout.

00:05:53.766 --> 00:05:55.186 A:middle
So, the stroke style detection

00:05:55.466 --> 00:05:57.416 A:middle
is stored as metadata on both

00:05:57.416 --> 00:05:59.556 A:middle
the stroke count sample, as well

00:05:59.556 --> 00:06:00.816 A:middle
as each lap event.

00:06:01.166 --> 00:06:02.056 A:middle
And we'll go over what that

00:06:02.056 --> 00:06:03.726 A:middle
looks like in a little bit.

00:06:04.386 --> 00:06:06.986 A:middle
New this year, in watchOS 4, we

00:06:06.986 --> 00:06:08.276 A:middle
also have automatic set

00:06:08.306 --> 00:06:08.866 A:middle
detection.

00:06:09.326 --> 00:06:10.856 A:middle
So, this is HealthKit detecting

00:06:10.856 --> 00:06:11.906 A:middle
the time in which the user was

00:06:11.906 --> 00:06:13.396 A:middle
swimming continuously and

00:06:13.426 --> 00:06:14.436 A:middle
highlighting that to the user.

00:06:14.866 --> 00:06:15.956 A:middle
And your apps will have access

00:06:15.956 --> 00:06:18.766 A:middle
to that information as well.

00:06:18.766 --> 00:06:20.516 A:middle
Also, new this year, in watchOS

00:06:20.546 --> 00:06:23.866 A:middle
4, your apps can now enable

00:06:23.866 --> 00:06:24.396 A:middle
Water lock.

00:06:24.756 --> 00:06:26.126 A:middle
So, this is a really great

00:06:26.126 --> 00:06:28.016 A:middle
feature that allows your app to

00:06:28.016 --> 00:06:29.526 A:middle
ignore any input from water on

00:06:29.526 --> 00:06:30.006 A:middle
the screen.

00:06:30.316 --> 00:06:31.666 A:middle
Which is really great to get a

00:06:31.666 --> 00:06:33.026 A:middle
consistent user experience.

00:06:33.156 --> 00:06:34.636 A:middle
When the user wants to exit

00:06:34.636 --> 00:06:36.006 A:middle
Water lock, all they need to do

00:06:36.006 --> 00:06:37.466 A:middle
is simply twist digital crown on

00:06:37.466 --> 00:06:39.886 A:middle
their watch and it'll eject the

00:06:39.886 --> 00:06:40.866 A:middle
water through the speakers by

00:06:40.866 --> 00:06:42.046 A:middle
displaying a custom sound.

00:06:42.856 --> 00:06:45.566 A:middle
So, now let's dig in by going

00:06:45.566 --> 00:06:46.676 A:middle
over some of the new metadata

00:06:46.676 --> 00:06:47.966 A:middle
keys and values that we

00:06:47.966 --> 00:06:49.036 A:middle
introduced along with swimming.

00:06:50.436 --> 00:06:51.786 A:middle
As I said, we have location

00:06:51.786 --> 00:06:51.986 A:middle
type.

00:06:51.986 --> 00:06:54.396 A:middle
And this is both pool open

00:06:54.396 --> 00:06:57.156 A:middle
water, as well as unknown.

00:06:57.246 --> 00:06:58.906 A:middle
We also have the swimming stroke

00:06:58.906 --> 00:07:01.976 A:middle
style, which is common styles

00:07:01.976 --> 00:07:03.776 A:middle
like freestyle and backstroke as

00:07:03.826 --> 00:07:06.446 A:middle
well as unknown or mixed.

00:07:08.056 --> 00:07:10.186 A:middle
So, now let's say you want to

00:07:10.186 --> 00:07:11.476 A:middle
build a swimming app and you

00:07:11.476 --> 00:07:12.466 A:middle
want to know how to start out

00:07:12.466 --> 00:07:12.956 A:middle
with HealthKit.

00:07:13.396 --> 00:07:14.316 A:middle
So, the first step is going to

00:07:14.316 --> 00:07:15.506 A:middle
be to configure a swimming

00:07:15.506 --> 00:07:15.826 A:middle
workout.

00:07:16.136 --> 00:07:17.106 A:middle
Let's say in this case we're

00:07:17.106 --> 00:07:18.576 A:middle
doing a pool swim workout.

00:07:19.236 --> 00:07:20.296 A:middle
So, first we'd want to create

00:07:20.296 --> 00:07:21.906 A:middle
our HK workoutConfiguration

00:07:21.946 --> 00:07:22.236 A:middle
object.

00:07:23.586 --> 00:07:24.456 A:middle
Next, we want to set some

00:07:24.456 --> 00:07:25.186 A:middle
properties on it.

00:07:25.306 --> 00:07:26.506 A:middle
Firstly, the activity type to

00:07:26.506 --> 00:07:26.956 A:middle
swimming.

00:07:28.256 --> 00:07:29.776 A:middle
The swimming location type.

00:07:29.836 --> 00:07:31.116 A:middle
We said we're going for a pool

00:07:31.116 --> 00:07:31.426 A:middle
swim.

00:07:32.096 --> 00:07:33.866 A:middle
And then the lap length.

00:07:33.866 --> 00:07:35.066 A:middle
In this case I'm setting it to

00:07:35.176 --> 00:07:36.966 A:middle
the HK quantity of 25 yards,

00:07:37.036 --> 00:07:37.946 A:middle
which is a pretty common pool

00:07:37.946 --> 00:07:38.366 A:middle
length.

00:07:39.486 --> 00:07:41.186 A:middle
Next, we want to start our

00:07:41.186 --> 00:07:42.766 A:middle
session by creating a session

00:07:42.766 --> 00:07:44.046 A:middle
object and then passing it to

00:07:44.046 --> 00:07:44.686 A:middle
the healthStore.

00:07:46.096 --> 00:07:47.496 A:middle
So, first we're going to create

00:07:47.496 --> 00:07:49.456 A:middle
our workout session and pass in

00:07:49.456 --> 00:07:50.296 A:middle
the configuration.

00:07:50.776 --> 00:07:51.856 A:middle
And you'll note here that the

00:07:51.856 --> 00:07:53.516 A:middle
initializer for HK Workout

00:07:53.516 --> 00:07:54.916 A:middle
session could throw.

00:07:55.306 --> 00:07:56.486 A:middle
It would throw in the case that

00:07:56.486 --> 00:07:57.886 A:middle
you pass an invalid workout

00:07:57.886 --> 00:07:58.586 A:middle
configuration.

00:07:58.926 --> 00:08:00.006 A:middle
For example, if you try to set

00:08:00.006 --> 00:08:01.756 A:middle
the lap length on an open water

00:08:01.756 --> 00:08:02.106 A:middle
swim.

00:08:02.676 --> 00:08:03.706 A:middle
So, be sure to handle that in

00:08:03.706 --> 00:08:04.136 A:middle
your code.

00:08:04.536 --> 00:08:06.766 A:middle
Next, we're going to set the

00:08:07.046 --> 00:08:08.846 A:middle
delegate of the workout session

00:08:08.906 --> 00:08:10.016 A:middle
to be ourselves so that we can

00:08:10.016 --> 00:08:11.446 A:middle
receive callbacks from HealthKit

00:08:11.746 --> 00:08:13.636 A:middle
as swimming events happen.

00:08:14.516 --> 00:08:16.196 A:middle
Finally, we're going to actually

00:08:16.196 --> 00:08:17.536 A:middle
start the session by calling the

00:08:17.626 --> 00:08:19.386 A:middle
start method on healthStore and

00:08:19.386 --> 00:08:20.446 A:middle
passing in the session we just

00:08:20.496 --> 00:08:20.906 A:middle
created.

00:08:22.076 --> 00:08:23.276 A:middle
So now, great.

00:08:23.276 --> 00:08:24.586 A:middle
Our swimming session is ongoing.

00:08:24.826 --> 00:08:26.136 A:middle
Maybe we also want to enable

00:08:26.136 --> 00:08:27.216 A:middle
water lock for this workout.

00:08:27.556 --> 00:08:30.206 A:middle
So, a good place to do that is

00:08:30.206 --> 00:08:31.506 A:middle
when our workout session changes

00:08:31.506 --> 00:08:32.516 A:middle
state to start running.

00:08:32.956 --> 00:08:34.086 A:middle
This is because this API will

00:08:34.086 --> 00:08:35.876 A:middle
only work if you have an active

00:08:36.136 --> 00:08:38.186 A:middle
workout, or a location session

00:08:38.186 --> 00:08:39.826 A:middle
ongoing, and if you're in the

00:08:39.826 --> 00:08:40.346 A:middle
foreground.

00:08:40.916 --> 00:08:42.226 A:middle
So, let's look at this method.

00:08:42.226 --> 00:08:43.786 A:middle
Workout session did change to

00:08:43.786 --> 00:08:45.286 A:middle
from state date.

00:08:45.716 --> 00:08:48.106 A:middle
We're going to switch on the

00:08:48.106 --> 00:08:49.586 A:middle
from state to the to state.

00:08:50.196 --> 00:08:51.546 A:middle
In this case, we're interested

00:08:51.546 --> 00:08:53.276 A:middle
in not started, switching to

00:08:53.276 --> 00:08:54.386 A:middle
running, which is how we know

00:08:54.386 --> 00:08:55.406 A:middle
that our session has begun.

00:08:56.366 --> 00:08:57.686 A:middle
So, here's where we're going to

00:08:57.686 --> 00:08:59.706 A:middle
want to grab the shared WatchKit

00:08:59.706 --> 00:09:01.476 A:middle
extension and then call enable

00:09:01.476 --> 00:09:02.766 A:middle
water lock on it.

00:09:04.376 --> 00:09:06.536 A:middle
So, along with the changes to

00:09:06.536 --> 00:09:08.716 A:middle
our swimming data types, we also

00:09:08.806 --> 00:09:10.406 A:middle
have some changes to our workout

00:09:10.406 --> 00:09:11.536 A:middle
events to better support

00:09:11.536 --> 00:09:13.466 A:middle
swimming as well as more nuance

00:09:13.466 --> 00:09:14.726 A:middle
workout experiences in general.

00:09:14.906 --> 00:09:15.976 A:middle
So, let's start with just an

00:09:15.976 --> 00:09:17.496 A:middle
overview of HKWorkoutEvent.

00:09:19.096 --> 00:09:20.616 A:middle
So, WorkoutEvents highlight a

00:09:20.616 --> 00:09:21.766 A:middle
specific time of interest in

00:09:21.766 --> 00:09:22.276 A:middle
your workout.

00:09:22.526 --> 00:09:24.856 A:middle
That can be used for pausing and

00:09:24.856 --> 00:09:26.216 A:middle
resuming, as well as things like

00:09:26.316 --> 00:09:28.076 A:middle
laps and markers.

00:09:28.076 --> 00:09:29.256 A:middle
And markers can really be

00:09:29.256 --> 00:09:30.586 A:middle
anything arbitrary set by your

00:09:30.586 --> 00:09:32.026 A:middle
application, and you can store

00:09:32.026 --> 00:09:33.516 A:middle
data on the metadata of the

00:09:33.756 --> 00:09:35.276 A:middle
event to store what you need for

00:09:36.066 --> 00:09:37.436 A:middle
your purpose.

00:09:37.706 --> 00:09:38.916 A:middle
Events are created by both

00:09:38.916 --> 00:09:40.146 A:middle
HealthKit and your app.

00:09:40.836 --> 00:09:41.946 A:middle
And this is key because

00:09:41.946 --> 00:09:43.276 A:middle
HealthKit will create events and

00:09:43.276 --> 00:09:44.076 A:middle
then pass them to you

00:09:44.076 --> 00:09:44.596 A:middle
immediately.

00:09:44.596 --> 00:09:45.666 A:middle
So, that's how you'll find

00:09:45.666 --> 00:09:47.526 A:middle
information about laps, and

00:09:47.526 --> 00:09:48.386 A:middle
strokes style and that for

00:09:48.386 --> 00:09:49.976 A:middle
swimming as well as pausing and

00:09:49.976 --> 00:09:51.186 A:middle
resuming through general workout

00:09:52.086 --> 00:09:52.196 A:middle
apps.

00:09:52.716 --> 00:09:54.996 A:middle
And WorkoutEvents are saved on a

00:09:54.996 --> 00:09:57.256 A:middle
list on HKWorkout.

00:09:57.606 --> 00:09:58.456 A:middle
And so, you'll get them back

00:09:58.746 --> 00:09:59.416 A:middle
when you're querying for

00:09:59.416 --> 00:09:59.856 A:middle
workouts.

00:09:59.926 --> 00:10:00.806 A:middle
Of, if you're looking at

00:10:00.806 --> 00:10:01.546 A:middle
workouts from other

00:10:01.546 --> 00:10:02.176 A:middle
applications.

00:10:04.396 --> 00:10:05.566 A:middle
In addition, workout events

00:10:05.566 --> 00:10:06.946 A:middle
affect the workout's duration.

00:10:07.536 --> 00:10:09.716 A:middle
Specifically, pause and resume

00:10:09.716 --> 00:10:10.106 A:middle
events.

00:10:10.396 --> 00:10:11.826 A:middle
So, if I go for a 10-minute run

00:10:12.146 --> 00:10:13.156 A:middle
and I pause for a minute,

00:10:13.696 --> 00:10:14.666 A:middle
HealthKit will see that there's

00:10:14.666 --> 00:10:15.936 A:middle
a pause event followed by a

00:10:15.936 --> 00:10:17.556 A:middle
resume event a minute later and

00:10:17.556 --> 00:10:18.956 A:middle
calculate the total duration to

00:10:18.956 --> 00:10:20.476 A:middle
be 9 minutes, just as we would

00:10:20.476 --> 00:10:20.696 A:middle
expect.

00:10:22.186 --> 00:10:23.736 A:middle
So, let's take a look at how we

00:10:23.736 --> 00:10:25.526 A:middle
can observe lap events back in

00:10:25.526 --> 00:10:26.396 A:middle
my swimming example.

00:10:27.206 --> 00:10:29.796 A:middle
So, we have this method, workout

00:10:29.796 --> 00:10:31.186 A:middle
session did generate event.

00:10:31.656 --> 00:10:32.576 A:middle
And that's where HealthKit is

00:10:32.576 --> 00:10:33.696 A:middle
going to pass through events as

00:10:33.696 --> 00:10:34.666 A:middle
the workout is ongoing.

00:10:35.756 --> 00:10:36.906 A:middle
So, we're going to switch on the

00:10:37.056 --> 00:10:38.066 A:middle
type of event that's given to

00:10:38.066 --> 00:10:38.426 A:middle
us.

00:10:39.716 --> 00:10:40.456 A:middle
In this case, what we're

00:10:40.456 --> 00:10:42.996 A:middle
interested in is laps.

00:10:43.496 --> 00:10:44.926 A:middle
So, now that we have our lap

00:10:44.926 --> 00:10:46.196 A:middle
event, we do something specific

00:10:46.196 --> 00:10:47.796 A:middle
to our app, like maybe increment

00:10:47.796 --> 00:10:48.736 A:middle
a count, so we can display it

00:10:48.736 --> 00:10:49.536 A:middle
live to the user.

00:10:50.376 --> 00:10:52.456 A:middle
We can also grab the stroke

00:10:52.456 --> 00:10:53.796 A:middle
style off of this lap event.

00:10:54.286 --> 00:10:55.396 A:middle
So, the stroke style is stored

00:10:55.396 --> 00:10:56.086 A:middle
as metadata.

00:10:56.526 --> 00:10:57.976 A:middle
We want to get the metadata for

00:10:57.976 --> 00:10:59.456 A:middle
the key swimming stroke style

00:10:59.746 --> 00:11:00.756 A:middle
and then again we can do

00:11:00.756 --> 00:11:02.576 A:middle
something specific like display

00:11:02.576 --> 00:11:03.666 A:middle
the current stroke style back to

00:11:03.756 --> 00:11:04.206 A:middle
the user.

00:11:04.406 --> 00:11:07.206 A:middle
So, as you can see, this can

00:11:07.206 --> 00:11:08.646 A:middle
help you build really detailed

00:11:08.646 --> 00:11:09.946 A:middle
experiences that your user can

00:11:10.016 --> 00:11:11.226 A:middle
access really quickly right from

00:11:11.226 --> 00:11:12.326 A:middle
their wrist.

00:11:13.436 --> 00:11:15.046 A:middle
So, we also have some new

00:11:15.046 --> 00:11:16.646 A:middle
WorkoutEvents this year in iOS

00:11:16.646 --> 00:11:17.696 A:middle
11 and watchOS 4.

00:11:18.366 --> 00:11:20.926 A:middle
So, here's our existing

00:11:20.926 --> 00:11:22.246 A:middle
WorkoutEvent type Enum.

00:11:22.796 --> 00:11:24.716 A:middle
And new this year, we've added

00:11:24.716 --> 00:11:26.146 A:middle
segments and pause and resume.

00:11:26.786 --> 00:11:27.826 A:middle
So, both of these new types have

00:11:27.826 --> 00:11:28.786 A:middle
important implications for

00:11:28.786 --> 00:11:30.136 A:middle
swimming, but they can also be

00:11:30.136 --> 00:11:31.256 A:middle
used for all workout apps in

00:11:31.256 --> 00:11:31.546 A:middle
general.

00:11:31.936 --> 00:11:34.766 A:middle
We'll start with talking about

00:11:34.816 --> 00:11:35.266 A:middle
segments.

00:11:35.686 --> 00:11:36.956 A:middle
So, rather than representing

00:11:36.956 --> 00:11:38.006 A:middle
just a moment in time.

00:11:38.336 --> 00:11:39.976 A:middle
Segments can represent a moment

00:11:39.976 --> 00:11:40.806 A:middle
and a duration.

00:11:41.766 --> 00:11:42.856 A:middle
And so, this has caused us to

00:11:42.856 --> 00:11:44.476 A:middle
update our existing WorkoutEvent

00:11:44.476 --> 00:11:46.436 A:middle
class; whereas previously we had

00:11:46.436 --> 00:11:48.806 A:middle
a date property, we've

00:11:48.806 --> 00:11:50.046 A:middle
deprecated that in favor of a

00:11:50.046 --> 00:11:51.136 A:middle
date interval property.

00:11:51.576 --> 00:11:53.176 A:middle
So, for all previous events

00:11:53.176 --> 00:11:54.896 A:middle
saved to HealthKit, the date

00:11:55.206 --> 00:11:56.586 A:middle
will now be the start date of

00:11:56.586 --> 00:11:57.736 A:middle
the state interval, and they

00:11:57.736 --> 00:11:58.896 A:middle
would have a duration of 0.

00:11:59.876 --> 00:12:01.156 A:middle
For segments, however, you would

00:12:01.156 --> 00:12:02.656 A:middle
have both a start data and a

00:12:02.656 --> 00:12:04.366 A:middle
duration, or equivalently a

00:12:04.366 --> 00:12:05.566 A:middle
start date and an end date on

00:12:05.566 --> 00:12:06.316 A:middle
that date interval.

00:12:06.966 --> 00:12:08.316 A:middle
So, I want to show you a

00:12:08.316 --> 00:12:09.546 A:middle
timeline of what this would look

00:12:09.546 --> 00:12:10.636 A:middle
like for a typical swimming

00:12:10.636 --> 00:12:12.236 A:middle
workout and all of these events

00:12:12.236 --> 00:12:13.436 A:middle
you can get in your application

00:12:13.526 --> 00:12:16.406 A:middle
as they happen with your workout

00:12:17.276 --> 00:12:17.586 A:middle
session.

00:12:17.916 --> 00:12:19.436 A:middle
So, first we start our workout.

00:12:20.266 --> 00:12:21.966 A:middle
And our user begins swimming.

00:12:22.486 --> 00:12:23.606 A:middle
Each of these grey dots

00:12:23.606 --> 00:12:25.356 A:middle
represents a lap event as the

00:12:25.356 --> 00:12:26.906 A:middle
user is swimming if we take a

00:12:26.906 --> 00:12:28.246 A:middle
look at a particular lap event,

00:12:28.246 --> 00:12:29.186 A:middle
you'll see that the type of

00:12:29.186 --> 00:12:30.086 A:middle
event is lap.

00:12:30.666 --> 00:12:32.896 A:middle
It has date interval, in this

00:12:32.936 --> 00:12:34.496 A:middle
case just the start date of 2.

00:12:34.776 --> 00:12:36.676 A:middle
And then it has on the metadata

00:12:36.676 --> 00:12:37.336 A:middle
the stroke style.

00:12:37.626 --> 00:12:38.886 A:middle
So, our user's doing a freestyle

00:12:38.946 --> 00:12:39.226 A:middle
stroke.

00:12:39.856 --> 00:12:42.716 A:middle
The user continues swimming and

00:12:42.716 --> 00:12:43.836 A:middle
decides to switch stroke style

00:12:43.836 --> 00:12:44.366 A:middle
to butterfly.

00:12:44.846 --> 00:12:45.716 A:middle
This will be reflected

00:12:45.716 --> 00:12:47.266 A:middle
immediately in the next lap

00:12:47.266 --> 00:12:48.536 A:middle
event your application receives.

00:12:50.016 --> 00:12:51.816 A:middle
The user might then decide to

00:12:51.816 --> 00:12:53.656 A:middle
pause their workout and you'll

00:12:53.656 --> 00:12:54.826 A:middle
get an event for that pause as

00:12:54.826 --> 00:12:55.126 A:middle
well.

00:12:55.286 --> 00:12:56.466 A:middle
In this case, you have no

00:12:56.466 --> 00:12:57.636 A:middle
metadata on the pause event.

00:12:57.896 --> 00:12:59.406 A:middle
And you also have just the start

00:12:59.406 --> 00:13:01.126 A:middle
date and no duration to your

00:13:01.686 --> 00:13:02.766 A:middle
date interval.

00:13:03.296 --> 00:13:04.896 A:middle
Now, in watchOS 4, HealthKit

00:13:04.896 --> 00:13:06.486 A:middle
will actually generate the auto

00:13:06.486 --> 00:13:08.126 A:middle
set detection for this

00:13:08.126 --> 00:13:09.486 A:middle
particular swimming workout for

00:13:09.486 --> 00:13:10.546 A:middle
the time in which the user was

00:13:10.546 --> 00:13:11.596 A:middle
swimming continuously.

00:13:12.186 --> 00:13:14.116 A:middle
So, this segment event has both

00:13:14.116 --> 00:13:16.216 A:middle
the start date of 0 and it ends

00:13:16.216 --> 00:13:18.126 A:middle
at 3:30 and the user has paused.

00:13:18.436 --> 00:13:19.906 A:middle
And it doesn't have any metadata

00:13:19.906 --> 00:13:22.776 A:middle
on it in this case.

00:13:22.876 --> 00:13:23.986 A:middle
Now, the user resumes their work

00:13:23.986 --> 00:13:24.856 A:middle
out again, and we receive an

00:13:24.856 --> 00:13:25.436 A:middle
event for that.

00:13:25.436 --> 00:13:27.906 A:middle
And they begin swimming back to

00:13:27.906 --> 00:13:28.416 A:middle
freestyle.

00:13:29.246 --> 00:13:30.546 A:middle
Now, at this point we're like

00:13:30.546 --> 00:13:32.336 A:middle
six 30 minutes in and our user

00:13:32.336 --> 00:13:33.446 A:middle
gets tired and they decide to

00:13:33.446 --> 00:13:34.886 A:middle
stop at the edge of the pool and

00:13:34.886 --> 00:13:36.306 A:middle
take a breath, but they forget

00:13:36.306 --> 00:13:37.636 A:middle
to actually pause their workout.

00:13:38.196 --> 00:13:40.386 A:middle
However, HealthKit will still

00:13:40.386 --> 00:13:41.646 A:middle
generate an event for the time

00:13:41.646 --> 00:13:42.556 A:middle
in which the user was swimming

00:13:42.556 --> 00:13:43.256 A:middle
continuously.

00:13:43.646 --> 00:13:45.176 A:middle
So, there will be a segment from

00:13:45.176 --> 00:13:46.676 A:middle
when they resumed the workout to

00:13:46.676 --> 00:13:47.636 A:middle
when they stopped actively

00:13:47.636 --> 00:13:48.056 A:middle
swimming.

00:13:48.586 --> 00:13:51.246 A:middle
Our user begins swimming again,

00:13:51.246 --> 00:13:51.846 A:middle
once they've caught their

00:13:51.846 --> 00:13:52.146 A:middle
breath.

00:13:52.946 --> 00:13:55.236 A:middle
And HealthKit generates a final

00:13:55.236 --> 00:13:56.716 A:middle
segment from when they started

00:13:56.716 --> 00:13:57.996 A:middle
swimming again to the end of the

00:13:57.996 --> 00:13:58.366 A:middle
workout.

00:13:59.026 --> 00:14:00.456 A:middle
So, as you can see, you can use

00:14:00.456 --> 00:14:01.506 A:middle
those to build really rich

00:14:01.506 --> 00:14:03.136 A:middle
swimming experiences, but your

00:14:03.136 --> 00:14:04.666 A:middle
apps can also create segments

00:14:04.696 --> 00:14:05.756 A:middle
that are specific to any other

00:14:05.756 --> 00:14:09.366 A:middle
type of workout app that you

00:14:09.816 --> 00:14:09.956 A:middle
build.

00:14:09.956 --> 00:14:11.886 A:middle
So, the other new WorkoutEvent

00:14:11.886 --> 00:14:12.846 A:middle
type that we have this year is

00:14:12.846 --> 00:14:14.136 A:middle
pause and resume request.

00:14:14.476 --> 00:14:16.186 A:middle
And if you've used the Apple

00:14:16.186 --> 00:14:17.306 A:middle
Watch workout app, you might be

00:14:17.306 --> 00:14:18.506 A:middle
familiar that you can press the

00:14:18.506 --> 00:14:19.766 A:middle
digital crown and side button

00:14:19.766 --> 00:14:21.506 A:middle
simultaneously to pause your

00:14:21.506 --> 00:14:22.776 A:middle
workout without ever interacting

00:14:22.776 --> 00:14:24.266 A:middle
with the screen, and now this

00:14:24.266 --> 00:14:25.496 A:middle
year, your apps can enable that

00:14:25.496 --> 00:14:26.246 A:middle
behavior as well.

00:14:26.246 --> 00:14:29.176 A:middle
So, again it's a quick press of

00:14:29.206 --> 00:14:30.516 A:middle
the digital crown and the side

00:14:30.516 --> 00:14:30.816 A:middle
button.

00:14:31.406 --> 00:14:33.696 A:middle
And it does work in water lock.

00:14:33.946 --> 00:14:35.916 A:middle
So, this is really great for

00:14:35.916 --> 00:14:37.356 A:middle
swimming applications, because

00:14:37.356 --> 00:14:38.636 A:middle
your user doesn't need to

00:14:38.636 --> 00:14:39.906 A:middle
interact with the screen at all,

00:14:39.906 --> 00:14:41.266 A:middle
or disturb their workout, they

00:14:41.266 --> 00:14:43.666 A:middle
can pause just by pressing the

00:14:45.436 --> 00:14:45.626 A:middle
buttons.

00:14:46.026 --> 00:14:47.296 A:middle
Like other events, you'd want to

00:14:47.296 --> 00:14:48.476 A:middle
handle this in your workout

00:14:48.476 --> 00:14:50.136 A:middle
session delegate, however, it's

00:14:50.136 --> 00:14:52.036 A:middle
important to note here that we

00:14:52.036 --> 00:14:53.036 A:middle
will not pause and resume

00:14:53.036 --> 00:14:54.666 A:middle
automatically when this event is

00:14:54.666 --> 00:14:55.116 A:middle
received.

00:14:55.296 --> 00:14:56.396 A:middle
It's up to your application to

00:14:56.396 --> 00:14:58.196 A:middle
actually enable this behavior by

00:14:58.196 --> 00:14:59.256 A:middle
calling pause or resume.

00:14:59.966 --> 00:15:01.376 A:middle
So, let's take a look at what

00:15:01.376 --> 00:15:02.816 A:middle
that would look like to enable

00:15:02.816 --> 00:15:03.436 A:middle
this behavior.

00:15:04.066 --> 00:15:06.966 A:middle
So, first our user is going to

00:15:06.966 --> 00:15:08.276 A:middle
press the digital crown and side

00:15:08.276 --> 00:15:09.306 A:middle
button to indicate they'd like

00:15:09.306 --> 00:15:09.776 A:middle
to pause.

00:15:10.706 --> 00:15:12.586 A:middle
And HealthKit then generates a

00:15:12.586 --> 00:15:13.876 A:middle
pause and resume request.

00:15:15.196 --> 00:15:16.716 A:middle
The application receives this

00:15:16.716 --> 00:15:18.006 A:middle
request, in your workout session

00:15:18.006 --> 00:15:19.486 A:middle
delegate and then you choose to

00:15:19.486 --> 00:15:20.116 A:middle
respond to it.

00:15:20.546 --> 00:15:21.386 A:middle
So, in this case we're going to

00:15:21.386 --> 00:15:21.796 A:middle
respond.

00:15:23.286 --> 00:15:24.686 A:middle
So, based on our state, we

00:15:24.686 --> 00:15:25.576 A:middle
either pause or resume.

00:15:25.996 --> 00:15:27.136 A:middle
If we're currently running, we'd

00:15:27.136 --> 00:15:28.396 A:middle
want to pause and if we're

00:15:28.396 --> 00:15:29.566 A:middle
currently paused, we'd want to

00:15:29.566 --> 00:15:29.936 A:middle
resume.

00:15:30.826 --> 00:15:33.426 A:middle
When HealthKit receives that, it

00:15:33.616 --> 00:15:34.986 A:middle
then generates an event for the

00:15:34.986 --> 00:15:36.546 A:middle
pause or the resume itself.

00:15:36.956 --> 00:15:38.496 A:middle
And finally, that pause or

00:15:38.496 --> 00:15:40.306 A:middle
resume event is also received in

00:15:40.306 --> 00:15:41.306 A:middle
your workout session delegate.

00:15:42.446 --> 00:15:43.776 A:middle
We think this is a really great

00:15:43.776 --> 00:15:45.276 A:middle
feature to provide consistent

00:15:45.276 --> 00:15:46.636 A:middle
experiences to users using

00:15:46.636 --> 00:15:47.366 A:middle
different workout apps.

00:15:47.846 --> 00:15:49.476 A:middle
And we hope that you adopt it to

00:15:49.546 --> 00:15:53.816 A:middle
continue that behavior.

00:15:54.616 --> 00:15:56.646 A:middle
So, another new, exciting

00:15:56.646 --> 00:15:57.696 A:middle
workout API this year we've

00:15:57.696 --> 00:15:59.846 A:middle
introduced is workout routes.

00:16:00.176 --> 00:16:01.596 A:middle
Users can use this to track

00:16:01.596 --> 00:16:02.516 A:middle
their location throughout their

00:16:02.516 --> 00:16:03.106 A:middle
workout.

00:16:03.106 --> 00:16:04.156 A:middle
And people have really loved

00:16:04.156 --> 00:16:05.076 A:middle
doing this with the Apple Watch

00:16:05.076 --> 00:16:05.666 A:middle
series 2.

00:16:07.066 --> 00:16:08.276 A:middle
People have used it for things

00:16:08.276 --> 00:16:10.016 A:middle
as ambitious as marathons or

00:16:10.016 --> 00:16:11.806 A:middle
maybe just a casual jog around

00:16:11.806 --> 00:16:12.506 A:middle
Golden Gate Park.

00:16:12.726 --> 00:16:14.496 A:middle
So, let's start with how your

00:16:14.496 --> 00:16:16.066 A:middle
applications can read this data

00:16:16.236 --> 00:16:16.826 A:middle
from HealthKit.

00:16:18.196 --> 00:16:20.326 A:middle
So, we have a new datatype which

00:16:20.326 --> 00:16:21.706 A:middle
is HKWorkoutRouteType.

00:16:22.886 --> 00:16:23.986 A:middle
And it's important that this

00:16:23.986 --> 00:16:25.166 A:middle
type requires additional

00:16:25.166 --> 00:16:25.986 A:middle
authorization.

00:16:26.096 --> 00:16:27.126 A:middle
And this is really on two

00:16:27.126 --> 00:16:27.546 A:middle
fronts.

00:16:27.996 --> 00:16:29.266 A:middle
The first is that even if you

00:16:29.266 --> 00:16:30.836 A:middle
have access to read and write

00:16:30.836 --> 00:16:32.186 A:middle
workouts from HealthKit, you

00:16:32.186 --> 00:16:33.616 A:middle
need additional authorization to

00:16:33.616 --> 00:16:34.496 A:middle
read or write WorkoutRoutes.

00:16:35.226 --> 00:16:36.606 A:middle
In addition to actually get the

00:16:36.606 --> 00:16:38.496 A:middle
user's location you would want

00:16:38.496 --> 00:16:40.006 A:middle
permission or authorization from

00:16:40.006 --> 00:16:41.926 A:middle
Core Location to view the user's

00:16:41.926 --> 00:16:42.446 A:middle
location.

00:16:43.776 --> 00:16:45.676 A:middle
So, HealthKit models

00:16:45.676 --> 00:16:46.866 A:middle
WorkoutRoutes as an array of

00:16:47.016 --> 00:16:48.186 A:middle
CLLocation, which is Core

00:16:48.186 --> 00:16:49.106 A:middle
Location Location.

00:16:49.606 --> 00:16:51.196 A:middle
Each location has latitude and

00:16:51.196 --> 00:16:52.446 A:middle
longitude as well as some other

00:16:52.446 --> 00:16:53.846 A:middle
data about the location at that

00:16:53.846 --> 00:16:54.976 A:middle
moment including speed.

00:16:55.536 --> 00:16:58.056 A:middle
It's important to know that

00:16:58.056 --> 00:16:59.316 A:middle
these datasets can be quite

00:16:59.316 --> 00:16:59.926 A:middle
large.

00:17:00.296 --> 00:17:01.616 A:middle
So, in marathon example, it can

00:17:01.616 --> 00:17:02.686 A:middle
be many thousands of data

00:17:02.686 --> 00:17:03.096 A:middle
points.

00:17:03.706 --> 00:17:04.676 A:middle
Because of this, we've

00:17:04.676 --> 00:17:07.846 A:middle
introduced a new query

00:17:07.846 --> 00:17:09.076 A:middle
specifically for WorkoutRoutes,

00:17:09.236 --> 00:17:10.696 A:middle
which is HKWorkoutRouteQuery.

00:17:12.316 --> 00:17:13.956 A:middle
This returns location data in

00:17:13.956 --> 00:17:15.026 A:middle
batches, rather than all at

00:17:15.026 --> 00:17:15.226 A:middle
once.

00:17:15.316 --> 00:17:16.646 A:middle
So, you don't have to hold it

00:17:16.846 --> 00:17:18.556 A:middle
all in memory at one time.

00:17:19.196 --> 00:17:20.866 A:middle
So, let's go over what this

00:17:20.866 --> 00:17:22.356 A:middle
looks like in code to read a

00:17:22.356 --> 00:17:23.406 A:middle
WorkoutRoute from HealthKit.

00:17:24.536 --> 00:17:25.616 A:middle
So, we're going to assume we

00:17:25.616 --> 00:17:26.746 A:middle
already have the workout that

00:17:26.746 --> 00:17:27.976 A:middle
we're interested in saved as a

00:17:27.976 --> 00:17:28.656 A:middle
workout object.

00:17:30.086 --> 00:17:32.176 A:middle
So, first we create the type we

00:17:32.176 --> 00:17:33.936 A:middle
want by calling WorkoutRoute on

00:17:33.936 --> 00:17:34.866 A:middle
HKSeriesType.

00:17:35.306 --> 00:17:37.306 A:middle
And then we create a predicate

00:17:37.346 --> 00:17:38.916 A:middle
for the objects associated with

00:17:38.916 --> 00:17:39.396 A:middle
our workout.

00:17:39.846 --> 00:17:42.596 A:middle
Next, we want to use an

00:17:42.596 --> 00:17:43.796 A:middle
HKSampleQuery.

00:17:44.066 --> 00:17:45.446 A:middle
So, this is an existing query

00:17:45.446 --> 00:17:46.566 A:middle
that just returns samples of a

00:17:46.566 --> 00:17:47.186 A:middle
certain type.

00:17:47.186 --> 00:17:48.566 A:middle
And we're going to pass in our

00:17:48.566 --> 00:17:50.506 A:middle
WorkoutRoute type as well as our

00:17:50.506 --> 00:17:51.326 A:middle
workout predicate.

00:17:51.796 --> 00:17:53.256 A:middle
We don't have any limit on the

00:17:53.256 --> 00:17:54.696 A:middle
samples we want to receive back

00:17:54.956 --> 00:17:55.596 A:middle
in this case.

00:17:55.936 --> 00:17:56.856 A:middle
And we don't have any sort

00:17:56.856 --> 00:17:57.356 A:middle
descriptors.

00:17:57.906 --> 00:18:00.626 A:middle
So, this will give us back the

00:18:00.626 --> 00:18:02.206 A:middle
query itself as well as the

00:18:02.206 --> 00:18:03.386 A:middle
samples we're interested in and

00:18:03.386 --> 00:18:04.926 A:middle
potentially an error.

00:18:05.756 --> 00:18:07.006 A:middle
So, the first step here, is

00:18:07.006 --> 00:18:07.826 A:middle
we're going to guard that the

00:18:07.826 --> 00:18:09.256 A:middle
samples that we got back are

00:18:09.256 --> 00:18:10.726 A:middle
indeed HKWorkoutRoutes.

00:18:11.226 --> 00:18:13.736 A:middle
And now, the second step is to

00:18:13.736 --> 00:18:14.986 A:middle
actually query for the raw

00:18:14.986 --> 00:18:17.686 A:middle
location data from each route.

00:18:18.166 --> 00:18:19.246 A:middle
So, here's where the new

00:18:19.246 --> 00:18:21.126 A:middle
HKWorkoutRouteQuery comes in.

00:18:21.376 --> 00:18:23.606 A:middle
It takes the WorkoutRoute and it

00:18:23.606 --> 00:18:24.956 A:middle
then returns that query.

00:18:25.486 --> 00:18:27.566 A:middle
The raw locations, a Boolean to

00:18:27.566 --> 00:18:28.556 A:middle
indicate whether it's done

00:18:28.556 --> 00:18:30.106 A:middle
batching the data to you, and

00:18:30.106 --> 00:18:31.626 A:middle
potentially an error.

00:18:32.596 --> 00:18:33.896 A:middle
So, here we'd want to do

00:18:33.896 --> 00:18:34.656 A:middle
something specific to our

00:18:34.656 --> 00:18:36.236 A:middle
application like add the

00:18:36.236 --> 00:18:37.096 A:middle
location data to a map.

00:18:37.506 --> 00:18:39.136 A:middle
And note that this block will

00:18:39.136 --> 00:18:40.136 A:middle
probably be called multiple

00:18:40.136 --> 00:18:41.556 A:middle
times as the data is returned to

00:18:41.556 --> 00:18:42.266 A:middle
you in batches.

00:18:43.306 --> 00:18:45.386 A:middle
Finally, we execute this by

00:18:45.386 --> 00:18:46.836 A:middle
calling execute on the queries,

00:18:47.206 --> 00:18:50.606 A:middle
or calling the execute method on

00:18:50.606 --> 00:18:51.736 A:middle
healthStore and passing these

00:18:51.736 --> 00:18:52.076 A:middle
queries.

00:18:53.246 --> 00:18:54.946 A:middle
So, now let's go over how your

00:18:54.946 --> 00:18:56.496 A:middle
applications can actually build

00:18:56.496 --> 00:18:57.566 A:middle
and save your own workout

00:18:57.566 --> 00:18:57.846 A:middle
routes.

00:18:59.066 --> 00:19:00.756 A:middle
So, we use a builder model

00:19:00.756 --> 00:19:02.226 A:middle
called HKWorkoutRouteBuilder.

00:19:02.696 --> 00:19:04.036 A:middle
And the lifetime of this model

00:19:04.036 --> 00:19:05.076 A:middle
is that you want one builder

00:19:05.076 --> 00:19:06.476 A:middle
object per route that you're

00:19:06.476 --> 00:19:07.826 A:middle
keeping track of.

00:19:08.976 --> 00:19:10.996 A:middle
So, location data is added

00:19:10.996 --> 00:19:12.466 A:middle
asynchronously and it's sorted

00:19:12.466 --> 00:19:13.766 A:middle
by date, by HealthKit when the

00:19:13.766 --> 00:19:14.826 A:middle
series is finalized.

00:19:15.176 --> 00:19:16.086 A:middle
So, you don't need to worry

00:19:16.086 --> 00:19:17.446 A:middle
about the order in which you add

00:19:18.136 --> 00:19:19.696 A:middle
the data.

00:19:19.776 --> 00:19:21.036 A:middle
Also, the workout needs to be

00:19:21.036 --> 00:19:21.996 A:middle
saved before the route.

00:19:22.056 --> 00:19:23.766 A:middle
So, let's go over what the

00:19:23.886 --> 00:19:25.246 A:middle
timeline would look like if you

00:19:25.246 --> 00:19:26.746 A:middle
have a workout session and you

00:19:26.746 --> 00:19:27.976 A:middle
want to keep track of the route

00:19:27.976 --> 00:19:29.256 A:middle
for it and save it to HealthKit.

00:19:29.336 --> 00:19:30.946 A:middle
So, first we're going to create

00:19:30.946 --> 00:19:31.986 A:middle
our WorkoutRouteBuilder.

00:19:32.436 --> 00:19:35.696 A:middle
Next, we want to actually start

00:19:35.696 --> 00:19:36.976 A:middle
our workout session as we've

00:19:36.976 --> 00:19:37.366 A:middle
shown.

00:19:39.296 --> 00:19:40.856 A:middle
Then our workout is active.

00:19:40.856 --> 00:19:43.616 A:middle
And we want to begin observing

00:19:43.616 --> 00:19:44.266 A:middle
location data.

00:19:44.786 --> 00:19:46.086 A:middle
And this is where you' would be

00:19:46.086 --> 00:19:47.416 A:middle
observing location data from

00:19:47.416 --> 00:19:48.886 A:middle
Core Location, the location

00:19:48.886 --> 00:19:50.466 A:middle
framework on iOS and watchOS.

00:19:51.256 --> 00:19:53.596 A:middle
You then want to add those

00:19:53.596 --> 00:19:54.766 A:middle
locations to your builder.

00:19:54.766 --> 00:19:57.026 A:middle
And this process is ongoing.

00:19:57.026 --> 00:19:58.096 A:middle
You want to do it many times

00:19:58.096 --> 00:19:59.426 A:middle
throughout your workout.

00:20:00.576 --> 00:20:02.006 A:middle
Finally, you'd want to end your

00:20:02.006 --> 00:20:03.456 A:middle
session and save the workout.

00:20:03.456 --> 00:20:05.206 A:middle
And then the last step is to

00:20:05.206 --> 00:20:07.056 A:middle
finish your WorkoutRoute, which

00:20:07.056 --> 00:20:07.936 A:middle
saves it into HealthKit.

00:20:08.606 --> 00:20:09.806 A:middle
So, let's take a look at the

00:20:09.806 --> 00:20:11.006 A:middle
same thing in code.

00:20:11.556 --> 00:20:13.536 A:middle
You're going to start by

00:20:13.666 --> 00:20:15.396 A:middle
creating your RouteBuilder and

00:20:15.396 --> 00:20:16.176 A:middle
adding locations.

00:20:16.686 --> 00:20:17.736 A:middle
So, we create our builder,

00:20:18.006 --> 00:20:20.206 A:middle
passing in the healthStore and a

00:20:20.206 --> 00:20:20.706 A:middle
device.

00:20:20.746 --> 00:20:22.146 A:middle
In this case, nil will default

00:20:22.146 --> 00:20:23.046 A:middle
to the local device.

00:20:24.946 --> 00:20:26.326 A:middle
You then add locations as the

00:20:26.326 --> 00:20:27.356 A:middle
workout is ongoing.

00:20:27.696 --> 00:20:28.856 A:middle
So, presumably this snippet of

00:20:28.856 --> 00:20:30.216 A:middle
code is called multiple times.

00:20:30.896 --> 00:20:32.526 A:middle
And here I'm calling some local

00:20:32.526 --> 00:20:34.176 A:middle
method fetchRecentLocations that

00:20:34.176 --> 00:20:35.076 A:middle
returns me a list of

00:20:35.146 --> 00:20:37.076 A:middle
CLLocations, and then inserting

00:20:37.076 --> 00:20:39.176 A:middle
those locations into the

00:20:39.796 --> 00:20:40.106 A:middle
builder.

00:20:40.106 --> 00:20:41.076 A:middle
Because I'm a responsible

00:20:41.076 --> 00:20:42.056 A:middle
developer, I'm going to handle

00:20:42.056 --> 00:20:42.646 A:middle
all my errors.

00:20:44.056 --> 00:20:45.206 A:middle
Step three.

00:20:45.436 --> 00:20:46.676 A:middle
So, this is after our workout is

00:20:46.676 --> 00:20:47.066 A:middle
saved.

00:20:47.416 --> 00:20:48.376 A:middle
We'd want to finish the route.

00:20:49.116 --> 00:20:50.666 A:middle
And this takes in the workout

00:20:50.666 --> 00:20:51.576 A:middle
objects that we've already

00:20:51.576 --> 00:20:53.426 A:middle
saved, as well as any metadata

00:20:53.426 --> 00:20:57.656 A:middle
that we want to be on the route.

00:20:58.256 --> 00:21:00.036 A:middle
So, next I'd like to demo adding

00:21:00.036 --> 00:21:01.596 A:middle
WorkoutRoutes to an application

00:21:01.596 --> 00:21:01.986 A:middle
to you guys.

00:21:02.686 --> 00:21:04.576 A:middle
So, if you attended our talk or

00:21:04.576 --> 00:21:06.396 A:middle
watched online last year, you'll

00:21:06.396 --> 00:21:07.866 A:middle
remember that Speedy Sloth is a

00:21:07.866 --> 00:21:10.016 A:middle
super cool workout application

00:21:10.016 --> 00:21:10.936 A:middle
for sloth lovers.

00:21:11.166 --> 00:21:12.126 A:middle
And today we're going to add

00:21:12.126 --> 00:21:13.646 A:middle
location routes to it.

00:21:19.986 --> 00:21:20.806 A:middle
Great. So, I'm going to switch

00:21:20.806 --> 00:21:22.176 A:middle
over to XCode and you'll see

00:21:22.176 --> 00:21:23.376 A:middle
here that I have Speedy Sloth

00:21:23.376 --> 00:21:23.746 A:middle
running.

00:21:24.396 --> 00:21:25.906 A:middle
So, Speedy Sloth is a WatchKit

00:21:26.006 --> 00:21:27.606 A:middle
app that lets you configure your

00:21:27.606 --> 00:21:29.816 A:middle
workout and then run it and show

00:21:29.816 --> 00:21:30.816 A:middle
you some live metrics.

00:21:31.066 --> 00:21:32.326 A:middle
And it saves the workouts into

00:21:32.326 --> 00:21:32.796 A:middle
HealthKit.

00:21:33.216 --> 00:21:35.076 A:middle
So, I'll start here by just

00:21:35.076 --> 00:21:36.116 A:middle
running Speedy Sloth so you have

00:21:36.116 --> 00:21:37.076 A:middle
an idea of what it looks like

00:21:37.076 --> 00:21:37.516 A:middle
currently.

00:21:37.936 --> 00:21:39.276 A:middle
So, you'll see that we keep

00:21:39.276 --> 00:21:40.326 A:middle
track of the duration of the

00:21:40.326 --> 00:21:40.776 A:middle
workout.

00:21:41.386 --> 00:21:43.296 A:middle
I can pause or resume.

00:21:44.016 --> 00:21:46.036 A:middle
And we keep track of the current

00:21:46.086 --> 00:21:47.496 A:middle
totals of your metrics as the

00:21:47.496 --> 00:21:48.376 A:middle
workout is ongoing.

00:21:48.846 --> 00:21:50.316 A:middle
So, we have calories coming in,

00:21:50.586 --> 00:21:51.426 A:middle
as well as meters.

00:21:52.166 --> 00:21:54.126 A:middle
So, I'll stop that.

00:21:55.566 --> 00:21:57.206 A:middle
And we saw a summary there of

00:21:57.206 --> 00:21:57.676 A:middle
our workout.

00:21:58.626 --> 00:22:00.466 A:middle
So, switching over to XCode, I

00:22:00.466 --> 00:22:01.246 A:middle
have this class,

00:22:01.546 --> 00:22:02.516 A:middle
healthStoreManager.

00:22:03.026 --> 00:22:03.966 A:middle
So, this is the class that

00:22:03.966 --> 00:22:05.396 A:middle
handles all of our interactions

00:22:05.706 --> 00:22:07.146 A:middle
with the HKhealthStore, which

00:22:07.216 --> 00:22:08.496 A:middle
saves and reads data from

00:22:09.146 --> 00:22:09.366 A:middle
HealthKit.

00:22:10.316 --> 00:22:16.426 A:middle
So, what I want to do first, is

00:22:16.426 --> 00:22:18.256 A:middle
implement the CLLocation Manager

00:22:18.256 --> 00:22:19.286 A:middle
Delegate Protocol.

00:22:19.536 --> 00:22:20.796 A:middle
This will allow me to receive

00:22:20.796 --> 00:22:22.676 A:middle
locations from Core Location.

00:22:23.256 --> 00:22:27.216 A:middle
In order to track these

00:22:27.216 --> 00:22:28.526 A:middle
locations, I'll need some

00:22:28.526 --> 00:22:29.096 A:middle
properties.

00:22:29.776 --> 00:22:32.606 A:middle
So, the first of these is going

00:22:32.606 --> 00:22:34.336 A:middle
to be the HKWorkoutRouteBuilder

00:22:34.336 --> 00:22:35.126 A:middle
that we just went over.

00:22:36.706 --> 00:22:38.586 A:middle
Next, I'll also need a location

00:22:38.586 --> 00:22:40.936 A:middle
manager from Core Location to

00:22:40.936 --> 00:22:45.646 A:middle
receive the updates from them.

00:22:45.856 --> 00:22:47.376 A:middle
Now, I want to actually start

00:22:47.376 --> 00:22:48.606 A:middle
accumulating location data.

00:22:49.056 --> 00:22:50.996 A:middle
So, we have this method, start

00:22:50.996 --> 00:22:51.736 A:middle
accumulating data.

00:22:52.406 --> 00:22:53.616 A:middle
And this is called when our

00:22:53.616 --> 00:22:55.126 A:middle
workout session changes state

00:22:55.406 --> 00:22:56.896 A:middle
from not started to running.

00:22:57.436 --> 00:22:58.356 A:middle
You can see here that I was

00:22:58.356 --> 00:23:00.046 A:middle
already using this place to

00:23:00.046 --> 00:23:01.126 A:middle
start walking and running

00:23:01.126 --> 00:23:02.336 A:middle
queries, which is what's

00:23:02.426 --> 00:23:05.356 A:middle
updating that distance metric,

00:23:05.616 --> 00:23:06.906 A:middle
as well as the

00:23:06.906 --> 00:23:08.946 A:middle
ActiveEnergyBurnedQuery which is

00:23:09.116 --> 00:23:10.606 A:middle
going to be showing the calorie

00:23:10.606 --> 00:23:10.946 A:middle
metric.

00:23:11.196 --> 00:23:13.016 A:middle
So, here's a good place to also

00:23:13.176 --> 00:23:15.796 A:middle
start accumulating location

00:23:16.606 --> 00:23:16.736 A:middle
data.

00:23:17.916 --> 00:23:19.996 A:middle
So, here I have a new method,

00:23:19.996 --> 00:23:21.356 A:middle
startAccumulatingLocationData.

00:23:21.796 --> 00:23:26.106 A:middle
And I'm going to add in the

00:23:26.106 --> 00:23:26.996 A:middle
implementation here.

00:23:27.496 --> 00:23:31.986 A:middle
First, I want to guard that he

00:23:31.986 --> 00:23:33.636 A:middle
location services are enabled,

00:23:33.836 --> 00:23:34.686 A:middle
otherwise return.

00:23:35.236 --> 00:23:37.706 A:middle
And then I want to create my

00:23:37.806 --> 00:23:39.316 A:middle
CLLocationManager object.

00:23:40.326 --> 00:23:41.926 A:middle
I'm going to set the delegate of

00:23:41.926 --> 00:23:43.286 A:middle
the object to be myself, so I

00:23:43.286 --> 00:23:44.956 A:middle
can receive callbacks for the

00:23:44.956 --> 00:23:46.116 A:middle
locations that are incoming.

00:23:46.716 --> 00:23:49.246 A:middle
I'm going to set the

00:23:49.246 --> 00:23:51.716 A:middle
desiredAccuracy to be the best

00:23:51.816 --> 00:23:52.716 A:middle
possible accuracy.

00:23:53.206 --> 00:23:54.386 A:middle
This is a good idea since we're

00:23:54.386 --> 00:23:55.366 A:middle
going to be displaying this data

00:23:55.366 --> 00:23:55.766 A:middle
on a map.

00:23:55.766 --> 00:23:57.216 A:middle
So, we want the most accurate

00:23:57.216 --> 00:23:58.746 A:middle
data possible to show visually

00:23:58.746 --> 00:23:59.286 A:middle
to our user.

00:23:59.816 --> 00:24:03.536 A:middle
Next, I'm going to set allows

00:24:03.536 --> 00:24:05.016 A:middle
background updates to be true.

00:24:05.596 --> 00:24:06.516 A:middle
And so, this will allow us to

00:24:06.516 --> 00:24:07.876 A:middle
continue to receive locations

00:24:07.876 --> 00:24:08.816 A:middle
while we're in the background.

00:24:09.456 --> 00:24:11.016 A:middle
So, in order for this to work,

00:24:11.016 --> 00:24:12.096 A:middle
we'd also need to setup some

00:24:12.166 --> 00:24:13.436 A:middle
keys in our info.keylist.

00:24:13.716 --> 00:24:14.626 A:middle
I'm not going to demo that

00:24:14.626 --> 00:24:16.126 A:middle
explicitly, but we do have

00:24:16.126 --> 00:24:17.686 A:middle
Speedy Sloth as a sample app

00:24:17.746 --> 00:24:19.256 A:middle
that you can check out at the

00:24:19.256 --> 00:24:20.226 A:middle
website we'll show at the end of

00:24:20.226 --> 00:24:20.706 A:middle
the session.

00:24:22.996 --> 00:24:24.066 A:middle
And finally, from the Core

00:24:24.066 --> 00:24:25.826 A:middle
Location side, I want to start

00:24:25.826 --> 00:24:26.786 A:middle
updating locations.

00:24:27.466 --> 00:24:28.916 A:middle
And all I need to do on the

00:24:28.916 --> 00:24:30.466 A:middle
HealthKit side is simply

00:24:30.466 --> 00:24:31.316 A:middle
instantiate my

00:24:31.316 --> 00:24:33.506 A:middle
HKWorkoutRouteBuilder, passing

00:24:33.506 --> 00:24:34.776 A:middle
in the healthStore variable,

00:24:34.776 --> 00:24:37.036 A:middle
which is a HK healthStore, as

00:24:37.036 --> 00:24:40.136 A:middle
well as a nil device.

00:24:40.136 --> 00:24:42.206 A:middle
Awesome. So, now we have all the

00:24:42.206 --> 00:24:43.316 A:middle
variables we need to track

00:24:43.316 --> 00:24:43.946 A:middle
location.

00:24:44.236 --> 00:24:45.336 A:middle
We've set everything up.

00:24:45.656 --> 00:24:46.876 A:middle
Now, we actually need to handle

00:24:46.876 --> 00:24:49.236 A:middle
those locations as they come in.

00:24:49.596 --> 00:24:53.486 A:middle
And to do that we want to

00:24:53.486 --> 00:24:55.366 A:middle
implement the function from Core

00:24:55.366 --> 00:24:56.586 A:middle
Location Manager Delegate,

00:24:57.046 --> 00:24:58.156 A:middle
locationManager

00:24:58.276 --> 00:24:59.426 A:middle
didUpdateLocations.

00:24:59.836 --> 00:25:01.746 A:middle
So, this passes us the manager

00:25:01.746 --> 00:25:04.176 A:middle
object itself, as well as the

00:25:04.176 --> 00:25:05.906 A:middle
list of CLLocation.

00:25:06.416 --> 00:25:09.546 A:middle
So, first, I'm going to filter

00:25:09.546 --> 00:25:10.726 A:middle
the locations that come in.

00:25:10.936 --> 00:25:12.776 A:middle
This is a good idea depending on

00:25:12.776 --> 00:25:14.356 A:middle
the exact purpose of your app.

00:25:14.356 --> 00:25:15.656 A:middle
I'm going to do a really simple

00:25:15.656 --> 00:25:17.656 A:middle
filter here, in some cases you

00:25:17.656 --> 00:25:18.446 A:middle
might want to instead do

00:25:18.446 --> 00:25:19.446 A:middle
something like smooth the route,

00:25:19.446 --> 00:25:21.286 A:middle
but for this demo, I'll just do

00:25:21.286 --> 00:25:21.956 A:middle
a simple filter.

00:25:22.316 --> 00:25:23.186 A:middle
So, I'm checking that the

00:25:23.186 --> 00:25:25.306 A:middle
horizontal accuracy is less than

00:25:25.306 --> 00:25:26.396 A:middle
or equal to the nearest 10

00:25:26.396 --> 00:25:26.756 A:middle
meters.

00:25:27.916 --> 00:25:29.346 A:middle
It's also important to do this

00:25:29.346 --> 00:25:30.606 A:middle
because even though we set the

00:25:30.606 --> 00:25:32.006 A:middle
desired accuracy on the Core

00:25:32.006 --> 00:25:33.566 A:middle
Location Manager, that is not

00:25:33.566 --> 00:25:34.256 A:middle
guaranteed.

00:25:34.696 --> 00:25:37.756 A:middle
Next, I want to check that

00:25:37.756 --> 00:25:39.366 A:middle
filter locations isn't empty

00:25:39.366 --> 00:25:40.186 A:middle
otherwise return.

00:25:40.726 --> 00:25:44.736 A:middle
And finally, I'm going to insert

00:25:44.736 --> 00:25:46.756 A:middle
this data into the

00:25:46.756 --> 00:25:48.456 A:middle
WorkoutRouteBuilder, passing in

00:25:48.456 --> 00:25:49.996 A:middle
the filtered locations and

00:25:49.996 --> 00:25:52.106 A:middle
receiving back successfully and

00:25:52.256 --> 00:25:52.816 A:middle
an error.

00:25:53.636 --> 00:25:55.416 A:middle
If it's not successful, I'm just

00:25:55.416 --> 00:25:58.276 A:middle
going to print the error here.

00:25:58.276 --> 00:26:00.026 A:middle
Awesome. So, now our workout

00:26:00.026 --> 00:26:01.586 A:middle
session is ongoing, we're

00:26:01.586 --> 00:26:03.126 A:middle
receiving locations from Core

00:26:03.126 --> 00:26:04.636 A:middle
Location and inserting them into

00:26:04.636 --> 00:26:05.176 A:middle
our builder.

00:26:05.176 --> 00:26:06.386 A:middle
Now, we want to make sure we

00:26:06.426 --> 00:26:07.986 A:middle
clean up after ourselves, once

00:26:07.986 --> 00:26:09.036 A:middle
the user has ended their

00:26:09.036 --> 00:26:09.436 A:middle
workout.

00:26:09.946 --> 00:26:12.466 A:middle
So, this method,

00:26:12.596 --> 00:26:13.906 A:middle
stopAccumulatingData is

00:26:13.906 --> 00:26:15.056 A:middle
similarly called when the

00:26:15.056 --> 00:26:16.316 A:middle
workout session changes state.

00:26:16.786 --> 00:26:18.076 A:middle
In this case, when it changes

00:26:18.076 --> 00:26:19.826 A:middle
state from running, or from

00:26:19.826 --> 00:26:21.216 A:middle
pause, to ended.

00:26:22.186 --> 00:26:23.496 A:middle
And so, here I was previously

00:26:23.496 --> 00:26:25.106 A:middle
going through my healthStore

00:26:25.106 --> 00:26:26.646 A:middle
queries and stopping them as

00:26:26.646 --> 00:26:27.726 A:middle
well as removing the active

00:26:27.726 --> 00:26:29.396 A:middle
queries on.

00:26:29.396 --> 00:26:30.336 A:middle
So, here's where I'll want to

00:26:30.336 --> 00:26:32.426 A:middle
also stop receiving location

00:26:32.466 --> 00:26:32.916 A:middle
updates.

00:26:33.336 --> 00:26:34.496 A:middle
So, I just called

00:26:34.696 --> 00:26:36.356 A:middle
stopUpdatingLocation on the

00:26:36.356 --> 00:26:37.496 A:middle
CLLocationMangaer.

00:26:38.046 --> 00:26:40.976 A:middle
Awesome. Now, the last step is

00:26:40.976 --> 00:26:42.816 A:middle
to actually save this data into

00:26:42.816 --> 00:26:43.366 A:middle
HealthKit.

00:26:43.886 --> 00:26:45.576 A:middle
So, I have this method,

00:26:45.836 --> 00:26:48.756 A:middle
saveWorkout and you'll see it

00:26:48.756 --> 00:26:50.426 A:middle
takes in the session as well as

00:26:50.426 --> 00:26:51.156 A:middle
a start and an end date.

00:26:51.906 --> 00:26:53.146 A:middle
So, first I want to configure

00:26:53.146 --> 00:26:54.886 A:middle
some metadata to save with my

00:26:54.886 --> 00:26:55.286 A:middle
workout.

00:26:55.696 --> 00:26:57.916 A:middle
In this case, what I'm doing is

00:26:57.916 --> 00:26:59.286 A:middle
I'm checking whether the

00:26:59.286 --> 00:27:01.266 A:middle
location type is indoor, and

00:27:01.266 --> 00:27:03.136 A:middle
setting the metadata key indoor

00:27:03.136 --> 00:27:03.736 A:middle
to that value.

00:27:03.736 --> 00:27:07.386 A:middle
Now, I actually want to create

00:27:07.386 --> 00:27:09.156 A:middle
my workout object with the

00:27:09.156 --> 00:27:11.246 A:middle
activity type from the workout

00:27:11.246 --> 00:27:12.006 A:middle
configuration.

00:27:12.786 --> 00:27:14.136 A:middle
The start and the end date.

00:27:14.136 --> 00:27:16.256 A:middle
The list of workout events that

00:27:16.256 --> 00:27:17.386 A:middle
I've saved elsewhere in Speedy

00:27:17.386 --> 00:27:17.686 A:middle
Sloth.

00:27:18.366 --> 00:27:20.346 A:middle
The total energy burned, the

00:27:20.346 --> 00:27:22.036 A:middle
total distance, as well as the

00:27:22.036 --> 00:27:25.526 A:middle
metadata I just created.

00:27:25.586 --> 00:27:27.296 A:middle
Now, finally I want to save the

00:27:27.296 --> 00:27:27.706 A:middle
workout.

00:27:28.436 --> 00:27:29.646 A:middle
And if the workout save was

00:27:29.646 --> 00:27:30.786 A:middle
successful, you'll see here that

00:27:30.786 --> 00:27:32.036 A:middle
we are already adding samples to

00:27:32.036 --> 00:27:32.426 A:middle
workout.

00:27:32.706 --> 00:27:33.506 A:middle
So, that was actually

00:27:33.506 --> 00:27:35.216 A:middle
associating those distance and

00:27:35.216 --> 00:27:36.356 A:middle
calorie samples with the

00:27:36.356 --> 00:27:36.716 A:middle
workout.

00:27:37.066 --> 00:27:38.646 A:middle
So, here's a good place to also

00:27:38.646 --> 00:27:39.666 A:middle
finish the WorkoutRoute.

00:27:39.666 --> 00:27:44.076 A:middle
So, I'm going to add this

00:27:44.076 --> 00:27:46.806 A:middle
snippet of code in here, which

00:27:46.806 --> 00:27:47.976 A:middle
calls FinishRoute on the

00:27:47.976 --> 00:27:49.486 A:middle
Builder, passing in the workout

00:27:49.486 --> 00:27:51.626 A:middle
as well as no metadata for the

00:27:51.626 --> 00:27:52.596 A:middle
route itself.

00:27:53.836 --> 00:27:55.436 A:middle
And finally, just check whether

00:27:55.436 --> 00:27:57.366 A:middle
or not there's an error.

00:27:57.676 --> 00:27:59.246 A:middle
Awesome. So, let's run this.

00:28:12.666 --> 00:28:13.766 A:middle
So, you'll note that I also did

00:28:13.766 --> 00:28:15.136 A:middle
not show in this demo actually

00:28:15.136 --> 00:28:16.486 A:middle
receiving authorization for the

00:28:16.486 --> 00:28:17.266 A:middle
HealthKit types.

00:28:17.746 --> 00:28:18.966 A:middle
I've already done that in the

00:28:19.056 --> 00:28:20.056 A:middle
iOS component of the app.

00:28:20.456 --> 00:28:21.306 A:middle
So, be sure to check out how to

00:28:21.306 --> 00:28:22.296 A:middle
do that in our sample code as

00:28:22.296 --> 00:28:22.476 A:middle
well.

00:28:23.656 --> 00:28:25.306 A:middle
So, here we can start another

00:28:25.306 --> 00:28:27.806 A:middle
outdoor walking workout, and see

00:28:27.806 --> 00:28:28.966 A:middle
again that we have our metrics

00:28:28.966 --> 00:28:29.216 A:middle
tracked.

00:28:29.536 --> 00:28:31.596 A:middle
The duration, and the calories

00:28:31.596 --> 00:28:32.716 A:middle
and meters that are incoming.

00:28:33.296 --> 00:28:34.436 A:middle
Maybe we want to throw in a

00:28:34.436 --> 00:28:35.926 A:middle
marker if we've seen a really

00:28:35.926 --> 00:28:36.446 A:middle
cool sloth.

00:28:37.146 --> 00:28:39.246 A:middle
All right, finally, we're going

00:28:39.246 --> 00:28:40.746 A:middle
to stop our workout and see our

00:28:40.746 --> 00:28:41.356 A:middle
summary.

00:28:42.096 --> 00:28:44.216 A:middle
And then, I'm going to open

00:28:44.216 --> 00:28:46.006 A:middle
HealthKit to show you that this

00:28:46.186 --> 00:28:47.036 A:middle
data has been saved.

00:28:47.406 --> 00:28:49.426 A:middle
So, I'll open the Health app.

00:28:51.276 --> 00:28:52.806 A:middle
And here we see a list of

00:28:52.806 --> 00:28:53.306 A:middle
workouts.

00:28:53.306 --> 00:28:56.536 A:middle
So, in the most recent one,

00:28:56.596 --> 00:28:58.136 A:middle
we'll see here we have workout

00:28:58.136 --> 00:28:58.656 A:middle
route saved.

00:28:59.456 --> 00:29:01.756 A:middle
I can click in and look about

00:29:01.756 --> 00:29:02.496 A:middle
this map view.

00:29:03.516 --> 00:29:04.906 A:middle
And now other applications that

00:29:04.906 --> 00:29:06.546 A:middle
have access to WorkoutRoute can

00:29:06.546 --> 00:29:08.146 A:middle
also receive this data and

00:29:08.146 --> 00:29:09.576 A:middle
analyze it, or do anything else

00:29:09.616 --> 00:29:10.846 A:middle
that they see fit.

00:29:13.096 --> 00:29:15.186 A:middle
So, that's how easy it is to add

00:29:15.186 --> 00:29:16.586 A:middle
WorkoutRoutes to your existing

00:29:16.586 --> 00:29:17.206 A:middle
application.

00:29:17.486 --> 00:29:18.526 A:middle
I'm going to switch back to the

00:29:18.526 --> 00:29:22.706 A:middle
slides, and then I want to

00:29:22.936 --> 00:29:24.256 A:middle
summarize what I've just done.

00:29:24.876 --> 00:29:26.106 A:middle
So, I first implemented the

00:29:26.106 --> 00:29:27.346 A:middle
CLLocationManager delegate

00:29:27.346 --> 00:29:27.966 A:middle
protocol.

00:29:28.286 --> 00:29:29.716 A:middle
I kept around some variables to

00:29:29.716 --> 00:29:31.116 A:middle
keep track of the state, both

00:29:31.116 --> 00:29:32.376 A:middle
from HealthKit and from Core

00:29:32.376 --> 00:29:32.956 A:middle
Location.

00:29:33.696 --> 00:29:35.386 A:middle
I set up the Location Manager.

00:29:35.836 --> 00:29:37.746 A:middle
I made sure to insert the

00:29:37.746 --> 00:29:39.486 A:middle
location data I got and Location

00:29:39.486 --> 00:29:41.726 A:middle
Manager did update location into

00:29:41.726 --> 00:29:42.686 A:middle
the WorkoutRouteBuilder.

00:29:43.456 --> 00:29:45.006 A:middle
I made sure to stop updating

00:29:45.006 --> 00:29:46.056 A:middle
location when I finished.

00:29:46.536 --> 00:29:47.976 A:middle
And then finally after the

00:29:47.976 --> 00:29:49.746 A:middle
workout was saved I finished the

00:29:49.746 --> 00:29:50.326 A:middle
WorkoutRoute.

00:29:52.586 --> 00:29:53.746 A:middle
So, next I want to hand it over

00:29:53.746 --> 00:29:55.126 A:middle
to my colleague Michael, who's

00:29:55.126 --> 00:29:56.006 A:middle
going to talk to you about a new

00:29:56.006 --> 00:29:57.266 A:middle
feature called Sync Identifiers.

00:29:57.546 --> 00:29:57.846 A:middle
Thank you.

00:29:58.516 --> 00:30:06.006 A:middle
[ Applause ]

00:30:06.506 --> 00:30:07.046 A:middle
&gt;&gt; Thanks Alexa.

00:30:07.696 --> 00:30:09.586 A:middle
Hi. I'm Michael and I'm an iOS

00:30:09.586 --> 00:30:10.806 A:middle
software engineer on the

00:30:10.806 --> 00:30:11.926 A:middle
HealthKit team.

00:30:12.476 --> 00:30:14.186 A:middle
Today our users are carrying

00:30:14.186 --> 00:30:15.436 A:middle
more than one device, such as a

00:30:15.436 --> 00:30:16.596 A:middle
watch and a phone.

00:30:17.866 --> 00:30:19.006 A:middle
We know that it's important that

00:30:19.006 --> 00:30:20.136 A:middle
you want to make sure that your

00:30:20.136 --> 00:30:21.436 A:middle
health apps data stays

00:30:21.436 --> 00:30:22.786 A:middle
consistent across all their

00:30:22.786 --> 00:30:23.306 A:middle
devices.

00:30:23.766 --> 00:30:24.976 A:middle
Sometimes this can be rather

00:30:24.976 --> 00:30:25.406 A:middle
difficult.

00:30:27.986 --> 00:30:29.346 A:middle
Sometimes, we want to be able to

00:30:29.346 --> 00:30:31.046 A:middle
add a sample to one device, and

00:30:31.046 --> 00:30:31.956 A:middle
then also add a sample to

00:30:31.956 --> 00:30:33.526 A:middle
another device, and then have

00:30:33.526 --> 00:30:34.936 A:middle
the sample synced over, it can

00:30:34.936 --> 00:30:35.966 A:middle
get sometimes complicated.

00:30:36.956 --> 00:30:39.336 A:middle
In iOS 11 and watchOS 4 we've

00:30:39.336 --> 00:30:40.656 A:middle
introduced Sync Identifiers.

00:30:41.636 --> 00:30:43.446 A:middle
Sync Identifiers allows you to

00:30:43.446 --> 00:30:44.936 A:middle
uniquely identify a sample

00:30:44.936 --> 00:30:46.446 A:middle
within HealthKit across all your

00:30:46.446 --> 00:30:47.226 A:middle
user's devices.

00:30:47.956 --> 00:30:51.006 A:middle
To support this, we've added two

00:30:51.006 --> 00:30:51.856 A:middle
new metadata keys.

00:30:52.366 --> 00:30:52.786 A:middle
These are

00:30:52.786 --> 00:30:55.006 A:middle
HKMetadatKeySyncIdentifier and

00:30:55.006 --> 00:30:56.486 A:middle
HKMetadataKeySyncVersion.

00:30:57.076 --> 00:30:59.986 A:middle
The Sync Identifier can be any

00:30:59.986 --> 00:31:01.166 A:middle
string, such as a string

00:31:01.166 --> 00:31:03.416 A:middle
representation of a UUID or the

00:31:03.416 --> 00:31:04.386 A:middle
primary key in a remote

00:31:04.386 --> 00:31:04.946 A:middle
database.

00:31:05.456 --> 00:31:08.006 A:middle
The sync version can be any

00:31:08.006 --> 00:31:08.306 A:middle
number.

00:31:09.756 --> 00:31:11.226 A:middle
HealthKit will use this version

00:31:11.396 --> 00:31:12.806 A:middle
to perform conflict resolution

00:31:12.836 --> 00:31:13.546 A:middle
on your behalf.

00:31:13.656 --> 00:31:15.406 A:middle
So, when you save a sample into

00:31:15.406 --> 00:31:16.816 A:middle
HealthKit, first it will look

00:31:16.816 --> 00:31:18.166 A:middle
for an existing sample matching

00:31:18.166 --> 00:31:18.976 A:middle
the Sync Identifier.

00:31:19.696 --> 00:31:20.976 A:middle
If it finds a sample, it will

00:31:20.976 --> 00:31:21.906 A:middle
then compare the version.

00:31:22.216 --> 00:31:23.746 A:middle
If your new sample has a higher

00:31:23.746 --> 00:31:25.276 A:middle
version, HealthKit will delete

00:31:25.276 --> 00:31:26.686 A:middle
the original sample, and then

00:31:26.856 --> 00:31:28.266 A:middle
save your new sample in its

00:31:28.266 --> 00:31:28.686 A:middle
place.

00:31:29.096 --> 00:31:30.556 A:middle
If you save a sample with a

00:31:30.556 --> 00:31:31.766 A:middle
lower version, HealthKit will

00:31:31.766 --> 00:31:32.526 A:middle
ignore this safe.

00:31:35.476 --> 00:31:36.956 A:middle
You must use both these keys

00:31:36.956 --> 00:31:37.806 A:middle
together to enable this

00:31:37.806 --> 00:31:38.206 A:middle
behavior.

00:31:39.846 --> 00:31:41.486 A:middle
This metadata applies to any HK

00:31:41.486 --> 00:31:41.856 A:middle
object.

00:31:42.036 --> 00:31:43.426 A:middle
Such as an HKSample, or an

00:31:43.426 --> 00:31:43.986 A:middle
HKWorkout.

00:31:45.776 --> 00:31:47.316 A:middle
Further, it's important to note

00:31:47.316 --> 00:31:48.526 A:middle
that this is restricted to your

00:31:48.526 --> 00:31:48.996 A:middle
source.

00:31:49.716 --> 00:31:51.256 A:middle
So, only your app can override

00:31:51.256 --> 00:31:52.866 A:middle
samples that you inserted.

00:31:57.856 --> 00:31:59.726 A:middle
Sync Identifiers adds a whole

00:31:59.726 --> 00:32:00.966 A:middle
new flexibility to how you can

00:32:00.966 --> 00:32:02.286 A:middle
manage your data.

00:32:03.196 --> 00:32:04.906 A:middle
By just using these two metadata

00:32:04.906 --> 00:32:06.446 A:middle
keys, you could ensure sample

00:32:06.446 --> 00:32:07.806 A:middle
uniqueness across all your

00:32:07.806 --> 00:32:08.216 A:middle
devices.

00:32:10.656 --> 00:32:12.786 A:middle
Further, by taking advantage of

00:32:13.216 --> 00:32:15.416 A:middle
the version key, you can also

00:32:15.416 --> 00:32:16.596 A:middle
enable local versioning.

00:32:20.476 --> 00:32:21.856 A:middle
HealthKit will manage all

00:32:21.856 --> 00:32:23.186 A:middle
conflict resolution for you,

00:32:24.006 --> 00:32:25.416 A:middle
upon saving and syncing.

00:32:26.896 --> 00:32:28.966 A:middle
Additionally, all operations

00:32:29.036 --> 00:32:30.716 A:middle
done using Sync Identifiers are

00:32:30.716 --> 00:32:31.656 A:middle
transaction safe.

00:32:32.156 --> 00:32:33.386 A:middle
That means that if there was any

00:32:33.386 --> 00:32:35.356 A:middle
error, then you can know that

00:32:35.356 --> 00:32:36.626 A:middle
your data will be in a

00:32:36.676 --> 00:32:38.966 A:middle
consistent state.

00:32:39.176 --> 00:32:40.656 A:middle
And finally, relationships to

00:32:40.656 --> 00:32:42.146 A:middle
parent objects are maintained.

00:32:42.786 --> 00:32:44.086 A:middle
If you replace a sample that's

00:32:44.086 --> 00:32:45.906 A:middle
been associated to an HKWorkout,

00:32:45.906 --> 00:32:47.856 A:middle
or a HKCorrelation, the replaced

00:32:47.856 --> 00:32:49.406 A:middle
sample will still be associated

00:32:49.406 --> 00:32:50.726 A:middle
to that HKWorkout or

00:32:50.726 --> 00:32:51.466 A:middle
HKCorrelation.

00:32:52.626 --> 00:32:57.316 A:middle
Now, let's take a look at how

00:32:57.316 --> 00:32:58.656 A:middle
using sync identifiers can

00:32:58.656 --> 00:33:00.206 A:middle
enable our apps to become fully

00:33:00.206 --> 00:33:00.736 A:middle
independent.

00:33:01.646 --> 00:33:03.096 A:middle
Imagine we have a workout app on

00:33:03.096 --> 00:33:04.726 A:middle
our phone and a WatchKit

00:33:04.726 --> 00:33:05.136 A:middle
extension.

00:33:05.566 --> 00:33:06.636 A:middle
We're going to us a remote

00:33:06.636 --> 00:33:08.116 A:middle
server to provide some

00:33:08.116 --> 00:33:09.306 A:middle
additional processing after the

00:33:09.306 --> 00:33:12.816 A:middle
workout has completed.

00:33:12.816 --> 00:33:14.036 A:middle
Our user is going to perform a

00:33:14.036 --> 00:33:15.716 A:middle
workout using their watch, and

00:33:15.716 --> 00:33:16.886 A:middle
our app is going to save this

00:33:16.886 --> 00:33:17.766 A:middle
data into HealthKit.

00:33:17.976 --> 00:33:19.276 A:middle
We're going to use a random Sync

00:33:19.276 --> 00:33:20.746 A:middle
Identifier and because this is

00:33:20.746 --> 00:33:21.966 A:middle
the initial version, we're going

00:33:21.966 --> 00:33:22.866 A:middle
to call this version 1.

00:33:23.376 --> 00:33:26.656 A:middle
After the save our watch can

00:33:26.656 --> 00:33:28.996 A:middle
upload the data directly to our

00:33:30.556 --> 00:33:31.006 A:middle
cloud.

00:33:31.006 --> 00:33:33.366 A:middle
As usual, HealthKit notices that

00:33:33.366 --> 00:33:34.676 A:middle
there's new data and syncs our

00:33:34.676 --> 00:33:35.176 A:middle
devices.

00:33:35.806 --> 00:33:39.406 A:middle
Now, the sample exists on both

00:33:39.406 --> 00:33:42.976 A:middle
of our devices.

00:33:43.046 --> 00:33:44.176 A:middle
Sometime later our cloud

00:33:44.176 --> 00:33:45.546 A:middle
finishes processing the data and

00:33:45.546 --> 00:33:46.876 A:middle
at this point, we can call this

00:33:46.876 --> 00:33:47.396 A:middle
version 2.

00:33:47.976 --> 00:33:52.406 A:middle
Our phone notices new data in

00:33:52.406 --> 00:33:54.086 A:middle
cloud and decides to download it

00:33:54.086 --> 00:33:55.056 A:middle
and save it into HealthKit.

00:33:55.056 --> 00:33:56.446 A:middle
We're going to use the same Sync

00:33:56.446 --> 00:33:57.366 A:middle
Identifier that we used

00:33:57.526 --> 00:33:58.886 A:middle
previously, but this time we're

00:33:58.886 --> 00:34:00.656 A:middle
going to set the version to 2.

00:34:02.376 --> 00:34:03.526 A:middle
Because we're using Sync

00:34:03.526 --> 00:34:04.916 A:middle
Identifiers, HealthKit will

00:34:04.916 --> 00:34:06.026 A:middle
first look for an existing

00:34:06.026 --> 00:34:07.316 A:middle
sample matching that identifier.

00:34:07.766 --> 00:34:09.196 A:middle
In this case, it found that the

00:34:09.196 --> 00:34:10.516 A:middle
existing sample is a version 1,

00:34:10.746 --> 00:34:11.956 A:middle
and our new sample has a version

00:34:11.956 --> 00:34:12.156 A:middle
2.

00:34:12.746 --> 00:34:13.976 A:middle
So, it deleted the existing

00:34:13.976 --> 00:34:15.156 A:middle
sample and replaced it with our

00:34:15.156 --> 00:34:15.646 A:middle
new sample.

00:34:17.156 --> 00:34:18.676 A:middle
Again, HealthKit notices that

00:34:18.676 --> 00:34:20.686 A:middle
there's new data, so it performs

00:34:21.526 --> 00:34:25.256 A:middle
a sync.

00:34:25.406 --> 00:34:26.266 A:middle
Because we're using Sync

00:34:26.266 --> 00:34:28.186 A:middle
Identifiers during sync

00:34:28.186 --> 00:34:29.506 A:middle
HealthKit will also look for an

00:34:29.506 --> 00:34:30.666 A:middle
existing sample matching the

00:34:30.666 --> 00:34:31.366 A:middle
Sync Identifier.

00:34:32.076 --> 00:34:33.126 A:middle
In our case, it found the

00:34:33.166 --> 00:34:33.846 A:middle
original sample.

00:34:34.556 --> 00:34:35.776 A:middle
Notice that our new sample has a

00:34:35.776 --> 00:34:37.266 A:middle
version 2, so it deleted the

00:34:37.266 --> 00:34:38.486 A:middle
original sample and replaced it

00:34:38.486 --> 00:34:39.136 A:middle
with our new sample.

00:34:39.696 --> 00:34:42.516 A:middle
As we expect, there's only one

00:34:42.516 --> 00:34:43.826 A:middle
sample in all of our devices,

00:34:44.006 --> 00:34:45.066 A:middle
and HealthKit managed all the

00:34:45.066 --> 00:34:46.886 A:middle
conflict resolution for us.

00:34:49.156 --> 00:34:50.776 A:middle
Because your apps are fully

00:34:50.776 --> 00:34:52.246 A:middle
independent, the Watch does not

00:34:52.246 --> 00:34:53.876 A:middle
need to know whether the phone

00:34:53.876 --> 00:34:54.986 A:middle
has downloaded data or not.

00:34:55.786 --> 00:34:57.766 A:middle
So, our Watch app sees new data

00:34:57.766 --> 00:34:59.416 A:middle
in the cloud, downloads it and

00:34:59.416 --> 00:35:00.246 A:middle
saves into HealthKit.

00:35:00.386 --> 00:35:01.636 A:middle
We're going to use the same Sync

00:35:01.636 --> 00:35:03.276 A:middle
Identifier and we're also going

00:35:03.276 --> 00:35:06.616 A:middle
to specify the version as 2.

00:35:06.856 --> 00:35:08.436 A:middle
In this case, HealthKit saw that

00:35:08.726 --> 00:35:09.796 A:middle
there already existed sample

00:35:09.796 --> 00:35:11.186 A:middle
with the same identifier, and

00:35:11.186 --> 00:35:11.876 A:middle
the same version.

00:35:12.446 --> 00:35:13.426 A:middle
So, this sample is ignored.

00:35:13.936 --> 00:35:18.326 A:middle
As we expect, we have one sample

00:35:18.326 --> 00:35:19.616 A:middle
on all of our devices and

00:35:19.616 --> 00:35:20.506 A:middle
HealthKit managed all the

00:35:20.506 --> 00:35:21.686 A:middle
conflict resolution for us.

00:35:21.906 --> 00:35:25.776 A:middle
Now, our app can upload and

00:35:25.776 --> 00:35:27.236 A:middle
download, and sync whenever it

00:35:27.236 --> 00:35:27.556 A:middle
wants.

00:35:27.756 --> 00:35:28.806 A:middle
And we don't have to worry about

00:35:28.806 --> 00:35:29.186 A:middle
anything.

00:35:29.516 --> 00:35:30.556 A:middle
HealthKit manages all the

00:35:30.556 --> 00:35:32.186 A:middle
conflict resolution for us and

00:35:32.186 --> 00:35:33.676 A:middle
handles all the complicated

00:35:33.766 --> 00:35:34.506 A:middle
things necessary.

00:35:37.276 --> 00:35:37.866 A:middle
All right.

00:35:38.066 --> 00:35:39.576 A:middle
Alexa just added WorkoutRoutes

00:35:39.576 --> 00:35:40.236 A:middle
to Speedy Sloth.

00:35:40.636 --> 00:35:42.516 A:middle
Now, I'm going to do a demo on

00:35:42.516 --> 00:35:43.416 A:middle
how to update this route.

00:35:45.686 --> 00:35:47.586 A:middle
A common example of this might

00:35:47.586 --> 00:35:49.046 A:middle
be to do some additional

00:35:49.046 --> 00:35:50.206 A:middle
processing such as smoothing out

00:35:50.206 --> 00:35:51.816 A:middle
the route and then we want to

00:35:51.816 --> 00:35:52.946 A:middle
update the route in place.

00:35:53.436 --> 00:35:55.696 A:middle
So, first I'm going to go to

00:35:56.756 --> 00:35:57.116 A:middle
Speedy Sloth.

00:35:57.116 --> 00:35:58.256 A:middle
Earlier, I added this new

00:35:58.256 --> 00:35:59.876 A:middle
ability to Speedy Sloth, to

00:35:59.876 --> 00:36:00.966 A:middle
slothify our workouts.

00:36:01.486 --> 00:36:04.006 A:middle
What this means, it's going to

00:36:04.006 --> 00:36:05.566 A:middle
take our original route and

00:36:05.566 --> 00:36:06.966 A:middle
change it so we visit every tree

00:36:06.966 --> 00:36:07.486 A:middle
along the way.

00:36:07.656 --> 00:36:09.026 A:middle
Just like a sloth would.

00:36:10.496 --> 00:36:13.206 A:middle
All right, so let's see the

00:36:13.206 --> 00:36:14.376 A:middle
implementation of this method.

00:36:14.656 --> 00:36:16.536 A:middle
First, we're going to go to

00:36:16.536 --> 00:36:17.656 A:middle
configuration interface

00:36:17.656 --> 00:36:18.056 A:middle
controller.

00:36:18.656 --> 00:36:22.256 A:middle
In this class, we have a method

00:36:22.256 --> 00:36:23.476 A:middle
called updateWorkoutRoute.

00:36:24.896 --> 00:36:26.766 A:middle
This method takes a workout, a

00:36:26.766 --> 00:36:27.996 A:middle
route from that workout and all

00:36:27.996 --> 00:36:29.956 A:middle
the locations from that route.

00:36:30.236 --> 00:36:31.496 A:middle
Below in this file, I've already

00:36:31.496 --> 00:36:32.616 A:middle
performed all the necessary

00:36:32.616 --> 00:36:33.606 A:middle
queries to collect all this

00:36:33.606 --> 00:36:33.826 A:middle
data.

00:36:34.756 --> 00:36:36.306 A:middle
When we press slothify workouts,

00:36:36.446 --> 00:36:37.336 A:middle
it's going to collect all this

00:36:37.336 --> 00:36:38.406 A:middle
data and then pass it to this

00:36:38.406 --> 00:36:38.716 A:middle
method.

00:36:42.246 --> 00:36:43.756 A:middle
With our raw locations collected

00:36:43.756 --> 00:36:44.876 A:middle
from the initial workout, we're

00:36:44.876 --> 00:36:45.556 A:middle
going to pass this to our

00:36:45.556 --> 00:36:47.276 A:middle
method, slothifyRouteLocations.

00:36:47.546 --> 00:36:48.996 A:middle
This is going to take our

00:36:48.996 --> 00:36:50.656 A:middle
locations, find all the trees,

00:36:50.686 --> 00:36:51.556 A:middle
and then adjust our route

00:36:51.556 --> 00:36:52.196 A:middle
accordingly.

00:36:52.376 --> 00:36:54.296 A:middle
Now, we're going to have the new

00:36:54.296 --> 00:36:54.946 A:middle
locations.

00:36:56.026 --> 00:36:57.246 A:middle
Next, we're going to create a

00:36:57.246 --> 00:36:58.706 A:middle
new WorkoutRoute and associate

00:36:58.706 --> 00:36:59.526 A:middle
this with our workout.

00:36:59.946 --> 00:37:01.736 A:middle
To do this, we're going to

00:37:01.736 --> 00:37:04.096 A:middle
create an HKWorkoutRouteBuilder.

00:37:04.636 --> 00:37:07.516 A:middle
Again, we're going to pass our

00:37:07.516 --> 00:37:08.896 A:middle
healthStore and a nil device to

00:37:08.896 --> 00:37:10.026 A:middle
represent our local source.

00:37:10.586 --> 00:37:13.826 A:middle
To insert the locations, we're

00:37:14.856 --> 00:37:16.856 A:middle
going to call insertRouteData on

00:37:16.856 --> 00:37:18.126 A:middle
our WorkoutRouteBuilder passing

00:37:18.126 --> 00:37:18.986 A:middle
our new locations.

00:37:19.486 --> 00:37:22.396 A:middle
We're going to ensure that this

00:37:22.396 --> 00:37:24.106 A:middle
was successful, and once that is

00:37:24.106 --> 00:37:25.526 A:middle
done, we're going to finish our

00:37:25.526 --> 00:37:27.526 A:middle
route on the original workout.

00:37:28.036 --> 00:37:30.626 A:middle
All right, let's see this in

00:37:30.626 --> 00:37:30.806 A:middle
action.

00:37:36.766 --> 00:37:38.826 A:middle
Here is Alexa's original route.

00:37:45.046 --> 00:37:46.396 A:middle
Let's go ahead and slothify that

00:37:46.576 --> 00:37:46.696 A:middle
route.

00:37:47.516 --> 00:38:11.256 A:middle
[Pause]

00:38:11.756 --> 00:38:12.826 A:middle
All right, as you can see the

00:38:12.826 --> 00:38:14.146 A:middle
original route was slothified,

00:38:14.176 --> 00:38:15.096 A:middle
and then applied onto the

00:38:15.096 --> 00:38:15.486 A:middle
workout.

00:38:16.536 --> 00:38:18.766 A:middle
But the original route is still

00:38:18.766 --> 00:38:19.036 A:middle
there.

00:38:19.036 --> 00:38:21.416 A:middle
What we need to do now is delete

00:38:21.416 --> 00:38:23.486 A:middle
the original route and then add

00:38:23.486 --> 00:38:24.016 A:middle
our new route.

00:38:24.456 --> 00:38:25.096 A:middle
This can get kind of

00:38:25.096 --> 00:38:25.686 A:middle
complicated.

00:38:25.686 --> 00:38:26.616 A:middle
We need to make sure the data

00:38:26.616 --> 00:38:27.956 A:middle
has been synced over correctly,

00:38:28.226 --> 00:38:29.296 A:middle
and then it's also not really

00:38:29.296 --> 00:38:30.156 A:middle
transaction safe.

00:38:30.296 --> 00:38:32.956 A:middle
So, to do this, very easily, I'm

00:38:32.956 --> 00:38:34.366 A:middle
going to use Sync Identifiers.

00:38:34.856 --> 00:38:37.556 A:middle
First, I'm going to go to where

00:38:37.556 --> 00:38:38.566 A:middle
we originally created the

00:38:38.566 --> 00:38:39.076 A:middle
WorkoutRoute.

00:38:39.596 --> 00:38:42.326 A:middle
In this save workout method,

00:38:43.046 --> 00:38:44.556 A:middle
after we've originally saved the

00:38:44.556 --> 00:38:46.336 A:middle
workout, and right before we

00:38:46.336 --> 00:38:48.096 A:middle
finish the route, I'm going to

00:38:48.096 --> 00:38:49.346 A:middle
add in some Sync Identifier

00:38:49.346 --> 00:38:49.786 A:middle
metadata.

00:39:02.076 --> 00:39:03.326 A:middle
First, I'm going to create the

00:39:03.326 --> 00:39:04.236 A:middle
metadata dictionary.

00:39:06.076 --> 00:39:07.886 A:middle
Next, I'm going to assign the

00:39:07.886 --> 00:39:10.046 A:middle
Sync Identifier metadata key to

00:39:10.106 --> 00:39:11.996 A:middle
string representation of a UUID.

00:39:13.346 --> 00:39:15.506 A:middle
Next, I'm going to set the sync

00:39:15.506 --> 00:39:17.116 A:middle
version to version 1, because

00:39:17.116 --> 00:39:18.136 A:middle
this is our initial route.

00:39:19.576 --> 00:39:20.426 A:middle
After we've created our

00:39:20.426 --> 00:39:22.706 A:middle
metadata, we're going to pass it

00:39:23.276 --> 00:39:24.396 A:middle
to finish route, so it is

00:39:24.396 --> 00:39:25.976 A:middle
associated to the workout route

00:39:25.976 --> 00:39:26.956 A:middle
when we save it onto the

00:39:26.956 --> 00:39:27.306 A:middle
workout.

00:39:27.306 --> 00:39:29.856 A:middle
Now let's go back to

00:39:29.856 --> 00:39:30.866 A:middle
configuration interface

00:39:30.866 --> 00:39:32.716 A:middle
controller to where we updated

00:39:32.716 --> 00:39:33.346 A:middle
this WorkoutRoute.

00:39:35.476 --> 00:39:37.406 A:middle
To enable Sync Identifiers,

00:39:37.406 --> 00:39:39.116 A:middle
we're also going to add the same

00:39:39.116 --> 00:39:41.646 A:middle
Sync Identifier metadata to our

00:39:41.646 --> 00:39:42.186 A:middle
updated route.

00:39:43.666 --> 00:39:45.546 A:middle
First, we're going to grab the

00:39:45.546 --> 00:39:47.026 A:middle
Sync Identifier that we used on

00:39:47.026 --> 00:39:47.596 A:middle
the original route.

00:39:48.666 --> 00:39:49.856 A:middle
Just in case our routes don't

00:39:49.856 --> 00:39:51.036 A:middle
have any metadata, we're going

00:39:51.036 --> 00:39:52.026 A:middle
to define a default value.

00:39:52.526 --> 00:39:55.806 A:middle
Next, let's create a metadata

00:39:55.806 --> 00:39:56.256 A:middle
dictionary.

00:39:56.826 --> 00:40:00.186 A:middle
Here, we create our dictionary

00:40:00.736 --> 00:40:02.746 A:middle
and then assigns the Sync

00:40:02.746 --> 00:40:04.156 A:middle
Identifier to the original Sync

00:40:04.156 --> 00:40:04.976 A:middle
Identifier we had.

00:40:05.836 --> 00:40:07.456 A:middle
Next, we're going to use the

00:40:07.456 --> 00:40:09.076 A:middle
sync version of 2, because this

00:40:09.076 --> 00:40:09.926 A:middle
is our updated route.

00:40:11.406 --> 00:40:13.136 A:middle
Again, let's pass the metadata

00:40:13.606 --> 00:40:15.086 A:middle
to finish route, so we associate

00:40:15.086 --> 00:40:16.146 A:middle
it to the WorkoutRoute when it

00:40:16.146 --> 00:40:17.096 A:middle
gets saved to the workout.

00:40:18.216 --> 00:40:19.456 A:middle
HealthKit will then replace our

00:40:19.456 --> 00:40:19.906 A:middle
original route.

00:40:19.906 --> 00:40:22.106 A:middle
All right, let's see this in

00:40:22.106 --> 00:40:22.406 A:middle
action.

00:40:23.516 --> 00:40:33.736 A:middle
[Pause]

00:40:34.236 --> 00:40:34.486 A:middle
All right.

00:40:34.766 --> 00:40:35.706 A:middle
First let's perform a new

00:40:35.706 --> 00:40:36.126 A:middle
workout.

00:40:37.446 --> 00:40:39.626 A:middle
When we save this workout, it

00:40:39.626 --> 00:40:40.756 A:middle
will have Sync Identifier

00:40:40.756 --> 00:40:41.336 A:middle
metadata.

00:40:42.736 --> 00:40:44.546 A:middle
After we've burn some calories

00:40:44.856 --> 00:40:46.976 A:middle
and walked a few meters, we're

00:40:46.976 --> 00:40:47.816 A:middle
going to go ahead and stop our

00:40:47.816 --> 00:40:49.926 A:middle
workout and save into HealthKit.

00:40:56.046 --> 00:40:56.986 A:middle
Here, we can see our original

00:40:56.986 --> 00:40:57.126 A:middle
route.

00:40:57.126 --> 00:40:59.926 A:middle
Now, let's go back and slothify

00:40:59.926 --> 00:41:00.926 A:middle
this route.

00:41:01.516 --> 00:41:14.896 A:middle
[Pause]

00:41:15.396 --> 00:41:15.776 A:middle
All right.

00:41:16.416 --> 00:41:17.586 A:middle
As you can see, the original

00:41:17.586 --> 00:41:18.986 A:middle
route was replaced with our new

00:41:18.986 --> 00:41:19.206 A:middle
route.

00:41:19.926 --> 00:41:20.936 A:middle
All we need to do is add a

00:41:20.936 --> 00:41:22.276 A:middle
couple metadata keys, and

00:41:22.276 --> 00:41:23.296 A:middle
HealthKit handled all the

00:41:23.296 --> 00:41:24.476 A:middle
conflict resolution for us.

00:41:26.816 --> 00:41:28.166 A:middle
Now, you can see how easy it is

00:41:28.306 --> 00:41:29.696 A:middle
to handle conflict resolution

00:41:29.896 --> 00:41:30.706 A:middle
and take advantage of

00:41:30.706 --> 00:41:31.596 A:middle
HealthKit's advanced new

00:41:31.596 --> 00:41:32.086 A:middle
features.

00:41:34.436 --> 00:41:36.576 A:middle
Okay, onto sample source

00:41:36.576 --> 00:41:37.056 A:middle
information.

00:41:38.306 --> 00:41:39.476 A:middle
It's important to know that when

00:41:39.476 --> 00:41:40.906 A:middle
you display data from HealthKit,

00:41:41.766 --> 00:41:43.156 A:middle
the origin of where the data

00:41:43.156 --> 00:41:43.666 A:middle
came from.

00:41:44.356 --> 00:41:46.946 A:middle
When you query for data, samples

00:41:46.946 --> 00:41:47.796 A:middle
will contain an

00:41:47.796 --> 00:41:48.736 A:middle
HKSourceRevision.

00:41:49.326 --> 00:41:51.666 A:middle
An HKSourceRevision includes the

00:41:51.726 --> 00:41:54.256 A:middle
app and the device which saved

00:41:54.256 --> 00:41:55.306 A:middle
the sample into HealthKit.

00:41:56.716 --> 00:41:58.606 A:middle
In iOS 11 and watchOS 4, we're

00:41:58.606 --> 00:42:00.256 A:middle
adding additional properties and

00:42:00.256 --> 00:42:01.916 A:middle
a few constants so you can gain

00:42:01.916 --> 00:42:03.356 A:middle
a deeper insight into the data

00:42:03.356 --> 00:42:04.686 A:middle
that you display form HealthKit.

00:42:07.356 --> 00:42:09.776 A:middle
In iOS 10 HKSourceRevision

00:42:09.776 --> 00:42:12.296 A:middle
included the source, as HK

00:42:12.296 --> 00:42:15.086 A:middle
source, and the version of the

00:42:15.086 --> 00:42:18.326 A:middle
app as an NSString.

00:42:18.466 --> 00:42:19.966 A:middle
First, we added product type.

00:42:20.596 --> 00:42:21.556 A:middle
Product type is a string

00:42:21.556 --> 00:42:22.996 A:middle
representation of the device

00:42:22.996 --> 00:42:24.466 A:middle
which saved the sample into

00:42:24.466 --> 00:42:24.936 A:middle
HealthKit.

00:42:24.936 --> 00:42:26.996 A:middle
So, if you save a sample on a

00:42:26.996 --> 00:42:28.626 A:middle
Watch Series 2, this will be

00:42:28.626 --> 00:42:30.926 A:middle
Watch 2, 4.

00:42:31.316 --> 00:42:32.846 A:middle
Next, we added operating system

00:42:32.846 --> 00:42:33.186 A:middle
version.

00:42:34.156 --> 00:42:35.206 A:middle
This is the operating system

00:42:35.206 --> 00:42:36.596 A:middle
that was running on the device

00:42:36.786 --> 00:42:38.226 A:middle
when the sample was saved into

00:42:38.816 --> 00:42:39.036 A:middle
HealthKit.

00:42:39.496 --> 00:42:41.576 A:middle
So, if we save the sample using

00:42:41.576 --> 00:42:44.546 A:middle
watchOS 4.0, this will return 4,

00:42:44.546 --> 00:42:45.476 A:middle
0, 0.

00:42:46.276 --> 00:42:49.176 A:middle
Next, we added three new

00:42:49.176 --> 00:42:49.836 A:middle
constants.

00:42:50.056 --> 00:42:50.706 A:middle
These constants are

00:42:50.706 --> 00:42:52.956 A:middle
HKSourceRevision, any version,

00:42:53.486 --> 00:42:54.976 A:middle
HKSourceRevision any product

00:42:54.976 --> 00:42:55.176 A:middle
type.

00:42:55.716 --> 00:42:57.286 A:middle
And HKSourceRevision any

00:42:57.286 --> 00:42:58.316 A:middle
operating system.

00:42:58.926 --> 00:43:00.296 A:middle
When creating predicates to

00:43:00.296 --> 00:43:02.776 A:middle
query for data, which involves

00:43:02.776 --> 00:43:04.556 A:middle
an HKSourceRevision, you must

00:43:04.556 --> 00:43:05.936 A:middle
specify all of these values.

00:43:06.696 --> 00:43:08.356 A:middle
You can use these constants so

00:43:08.356 --> 00:43:10.486 A:middle
you could gain a very specific

00:43:10.486 --> 00:43:13.396 A:middle
predicate, such as for a certain

00:43:13.396 --> 00:43:14.856 A:middle
product type, but any operating

00:43:14.856 --> 00:43:15.156 A:middle
system.

00:43:16.246 --> 00:43:18.176 A:middle
With this new information, you

00:43:18.176 --> 00:43:20.726 A:middle
can now gain deeper insight into

00:43:20.726 --> 00:43:21.906 A:middle
the data that you display in

00:43:21.906 --> 00:43:26.226 A:middle
your app.

00:43:26.476 --> 00:43:27.386 A:middle
All right.

00:43:27.886 --> 00:43:30.236 A:middle
Finally, supporting diabetes

00:43:30.236 --> 00:43:34.056 A:middle
management in HealthKit.

00:43:34.056 --> 00:43:35.516 A:middle
Our users love using Apple

00:43:35.516 --> 00:43:37.196 A:middle
products to help manage their

00:43:37.196 --> 00:43:37.606 A:middle
condition.

00:43:38.216 --> 00:43:40.466 A:middle
Today in HealthKit we have

00:43:40.466 --> 00:43:41.466 A:middle
support for tracking blood

00:43:41.466 --> 00:43:43.316 A:middle
glucose samples, keeping track

00:43:43.316 --> 00:43:44.746 A:middle
of carbohydrates and tracking

00:43:44.796 --> 00:43:46.066 A:middle
all kinds of activity data,

00:43:46.366 --> 00:43:47.616 A:middle
which is all useful in managing

00:43:47.886 --> 00:43:48.446 A:middle
diabetes.

00:43:49.536 --> 00:43:50.376 A:middle
We've heard there's some missing

00:43:50.376 --> 00:43:52.026 A:middle
pieces to the story and I'm

00:43:52.026 --> 00:43:53.106 A:middle
pleased to announce that we've

00:43:53.106 --> 00:43:54.396 A:middle
added some new additional

00:43:54.446 --> 00:43:55.976 A:middle
features to help out.

00:44:00.366 --> 00:44:02.286 A:middle
First, we added the ability to

00:44:02.286 --> 00:44:04.476 A:middle
track the relative mealtime to a

00:44:04.476 --> 00:44:05.376 A:middle
blood glucose sample.

00:44:05.886 --> 00:44:08.736 A:middle
Next, we added the ability to

00:44:08.736 --> 00:44:09.956 A:middle
track insulin delivery.

00:44:10.526 --> 00:44:13.596 A:middle
With the addition to

00:44:13.596 --> 00:44:15.786 A:middle
CoreBluetooth in watchOS 4, now

00:44:15.786 --> 00:44:17.286 A:middle
your Bluetooth enabled diabetes

00:44:17.286 --> 00:44:19.086 A:middle
devices can connect directly to

00:44:19.156 --> 00:44:20.326 A:middle
your Watch.

00:44:21.056 --> 00:44:22.686 A:middle
Please watch "What's New in

00:44:22.686 --> 00:44:23.696 A:middle
CoreBluetooth" to learn more

00:44:23.696 --> 00:44:24.726 A:middle
about that.

00:44:25.376 --> 00:44:27.196 A:middle
To support the relative blood

00:44:27.196 --> 00:44:28.886 A:middle
glucose mealtime, we've added a

00:44:28.886 --> 00:44:29.746 A:middle
new metadata key.

00:44:30.326 --> 00:44:31.386 A:middle
This metadata key is

00:44:31.386 --> 00:44:32.406 A:middle
HKMetadataKey

00:44:32.406 --> 00:44:33.546 A:middle
BloodGlucoseMealTime.

00:44:33.546 --> 00:44:35.416 A:middle
You could use this metadata key

00:44:35.416 --> 00:44:36.536 A:middle
when saving blood glucose

00:44:36.536 --> 00:44:37.036 A:middle
samples.

00:44:38.496 --> 00:44:39.976 A:middle
This metadata key supports two

00:44:39.976 --> 00:44:40.896 A:middle
possible values.

00:44:41.636 --> 00:44:42.986 A:middle
These values can be found in the

00:44:42.986 --> 00:44:44.906 A:middle
Enum, HKBloodGlucoseMealTime.

00:44:45.616 --> 00:44:47.326 A:middle
The values are preprandial and

00:44:47.326 --> 00:44:47.916 A:middle
postprandial.

00:44:48.946 --> 00:44:50.586 A:middle
Preprandial represents any time

00:44:50.586 --> 00:44:51.226 A:middle
before a meal.

00:44:51.226 --> 00:44:53.236 A:middle
And postprandial represents any

00:44:53.236 --> 00:44:57.426 A:middle
time after a meal.

00:44:57.646 --> 00:44:58.866 A:middle
With this new data, now you

00:44:58.866 --> 00:45:00.156 A:middle
could gain a deeper insight into

00:45:00.156 --> 00:45:01.956 A:middle
blood glucose samples relative

00:45:01.956 --> 00:45:03.016 A:middle
to when the user last ate a

00:45:03.016 --> 00:45:03.236 A:middle
meal.

00:45:03.976 --> 00:45:05.846 A:middle
Now, we are onto supporting

00:45:05.846 --> 00:45:06.946 A:middle
insulin deliver in HealthKit.

00:45:07.996 --> 00:45:09.306 A:middle
Here is a graph of what it looks

00:45:09.306 --> 00:45:12.496 A:middle
like in HealthKit for all data

00:45:12.776 --> 00:45:13.766 A:middle
that's been inserted into

00:45:14.356 --> 00:45:14.486 A:middle
Health.

00:45:16.116 --> 00:45:17.706 A:middle
To support this new type, we've

00:45:17.706 --> 00:45:18.916 A:middle
added a new quantity type

00:45:18.916 --> 00:45:19.576 A:middle
identifier.

00:45:19.946 --> 00:45:20.446 A:middle
This is

00:45:20.446 --> 00:45:21.786 A:middle
HKQuantityTypeIdentifier,

00:45:21.786 --> 00:45:22.506 A:middle
insulinDelivery.

00:45:23.586 --> 00:45:24.836 A:middle
When adding samples of this

00:45:24.836 --> 00:45:27.226 A:middle
quantity type, you must include

00:45:27.566 --> 00:45:28.456 A:middle
the delivery reason.

00:45:29.406 --> 00:45:31.756 A:middle
To do this, you should use the

00:45:31.756 --> 00:45:32.986 A:middle
HKMetadataKeyInsulin

00:45:32.986 --> 00:45:33.846 A:middle
DeliveryReason.

00:45:34.076 --> 00:45:36.796 A:middle
Metadata. This metadata supports

00:45:36.796 --> 00:45:37.846 A:middle
two possible values.

00:45:38.926 --> 00:45:40.236 A:middle
These values and be found on the

00:45:40.236 --> 00:45:41.886 A:middle
Enum HKInsulinDeliverReason.

00:45:43.326 --> 00:45:44.686 A:middle
These values are basal and

00:45:44.686 --> 00:45:45.216 A:middle
bolus.

00:45:46.416 --> 00:45:47.496 A:middle
Basal is the background

00:45:47.496 --> 00:45:48.546 A:middle
metabolic need throughout the

00:45:48.546 --> 00:45:48.826 A:middle
day.

00:45:49.206 --> 00:45:50.926 A:middle
While bolus is the episodic need

00:45:50.956 --> 00:45:52.186 A:middle
such as for a meal and

00:45:52.186 --> 00:45:53.106 A:middle
correcting high blood sugar.

00:45:54.416 --> 00:45:56.586 A:middle
It's important to know that you

00:45:56.586 --> 00:45:57.776 A:middle
should only add these kinds of

00:45:57.776 --> 00:45:59.866 A:middle
samples after user has delivered

00:45:59.866 --> 00:46:00.266 A:middle
insulin.

00:46:02.216 --> 00:46:04.476 A:middle
Further, when creating an HK

00:46:04.476 --> 00:46:06.406 A:middle
sample with this identifier, you

00:46:06.406 --> 00:46:07.776 A:middle
should use the international

00:46:08.346 --> 00:46:08.506 A:middle
unit.

00:46:09.476 --> 00:46:10.896 A:middle
To support the international

00:46:10.896 --> 00:46:12.986 A:middle
unit, or the IU, we've extended

00:46:12.986 --> 00:46:14.786 A:middle
HKUnit to now return an

00:46:14.786 --> 00:46:15.556 A:middle
international unit.

00:46:16.376 --> 00:46:18.016 A:middle
The international unit is the

00:46:18.016 --> 00:46:19.806 A:middle
biological effectiveness of the

00:46:19.806 --> 00:46:20.426 A:middle
substance.

00:46:20.956 --> 00:46:23.586 A:middle
It does not represent a specific

00:46:23.586 --> 00:46:24.886 A:middle
amount, but it represents the

00:46:24.886 --> 00:46:26.406 A:middle
biological effectiveness of the

00:46:26.406 --> 00:46:27.426 A:middle
amount that's been delivered.

00:46:27.936 --> 00:46:30.886 A:middle
It's also important to know that

00:46:30.886 --> 00:46:32.316 A:middle
this unit cannot be converted to

00:46:32.316 --> 00:46:33.876 A:middle
other units, but it does

00:46:33.876 --> 00:46:35.836 A:middle
support, common SI prefixes such

00:46:35.836 --> 00:46:36.756 A:middle
as mili and micro.

00:46:37.336 --> 00:46:41.936 A:middle
All right let's take a look at

00:46:41.936 --> 00:46:43.166 A:middle
how to insert insulin delivery

00:46:43.166 --> 00:46:43.506 A:middle
sample.

00:46:44.756 --> 00:46:46.576 A:middle
Let's say our insulin pump has

00:46:46.576 --> 00:46:49.416 A:middle
delivered 0.85 units of basal

00:46:49.416 --> 00:46:50.596 A:middle
insulin over the past hour.

00:46:51.916 --> 00:46:53.356 A:middle
First, let's create an

00:46:53.356 --> 00:46:54.576 A:middle
HKQuantityType using the

00:46:54.576 --> 00:46:56.106 A:middle
identifier insulinDelivery.

00:46:56.626 --> 00:47:01.196 A:middle
Next, let's create an HKQuantity

00:47:01.396 --> 00:47:03.256 A:middle
using the international unit and

00:47:03.386 --> 00:47:06.006 A:middle
a double value of 0.825.

00:47:08.016 --> 00:47:09.886 A:middle
After that we're going to create

00:47:09.886 --> 00:47:10.666 A:middle
an HKQuantitySample.

00:47:11.336 --> 00:47:12.486 A:middle
We're going to use the quantity

00:47:12.486 --> 00:47:13.736 A:middle
type and the quantity we

00:47:13.736 --> 00:47:14.556 A:middle
previously defined.

00:47:15.056 --> 00:47:16.456 A:middle
We're going to set the start and

00:47:16.456 --> 00:47:17.706 A:middle
end date to be the start end

00:47:17.706 --> 00:47:18.956 A:middle
date that the pump had delivered

00:47:18.956 --> 00:47:19.386 A:middle
the insulin.

00:47:20.806 --> 00:47:22.096 A:middle
Next, we're going to remember to

00:47:22.096 --> 00:47:23.386 A:middle
include the required metadata

00:47:23.386 --> 00:47:24.286 A:middle
for the deliver reason.

00:47:24.816 --> 00:47:26.146 A:middle
In our case, this is basal.

00:47:26.726 --> 00:47:29.526 A:middle
After the sample has been

00:47:29.526 --> 00:47:30.926 A:middle
created, we can save into

00:47:30.926 --> 00:47:32.396 A:middle
HealthKit by passing it to the

00:47:32.396 --> 00:47:33.436 A:middle
save function on our

00:47:33.436 --> 00:47:33.866 A:middle
healthStore.

00:47:34.526 --> 00:47:36.816 A:middle
Now, an insulin delivery sample

00:47:36.816 --> 00:47:37.886 A:middle
has been saved into HealthKit,

00:47:37.946 --> 00:47:39.106 A:middle
which can be utilized by your

00:47:39.106 --> 00:47:40.796 A:middle
app and any other app which

00:47:40.796 --> 00:47:42.106 A:middle
helps users manage diabetes.

00:47:42.686 --> 00:47:46.966 A:middle
With the sample in HealthKit,

00:47:47.396 --> 00:47:48.996 A:middle
now we can retrieve it back out.

00:47:49.556 --> 00:47:50.436 A:middle
To do this we're going to

00:47:50.436 --> 00:47:51.876 A:middle
perform a statistic query for

00:47:51.876 --> 00:47:52.726 A:middle
all basal samples.

00:47:53.416 --> 00:47:55.076 A:middle
I'm interested in every basal

00:47:55.076 --> 00:47:56.016 A:middle
sample that's ever been

00:47:56.016 --> 00:47:57.626 A:middle
delivered to the user on an hour

00:47:57.626 --> 00:47:58.546 A:middle
by hour basis.

00:47:59.686 --> 00:48:01.056 A:middle
First, we're going to create a

00:48:01.056 --> 00:48:01.446 A:middle
predicate.

00:48:02.066 --> 00:48:02.996 A:middle
We're going to base this on the

00:48:02.996 --> 00:48:03.746 A:middle
metadata key,

00:48:03.916 --> 00:48:05.416 A:middle
insulineDeliveryReason, and

00:48:05.416 --> 00:48:06.766 A:middle
we're going to pass in basal.

00:48:06.766 --> 00:48:08.286 A:middle
Because that's the type we're

00:48:08.286 --> 00:48:09.416 A:middle
interested in.

00:48:10.716 --> 00:48:12.646 A:middle
Next, we're going to define the

00:48:12.646 --> 00:48:13.806 A:middle
quantity type, just like we did

00:48:13.806 --> 00:48:14.136 A:middle
before.

00:48:14.756 --> 00:48:15.546 A:middle
We're going to use the

00:48:15.546 --> 00:48:16.966 A:middle
insulinDelivery quantityType

00:48:16.966 --> 00:48:17.456 A:middle
identifier.

00:48:19.076 --> 00:48:21.126 A:middle
After that we're going to create

00:48:21.126 --> 00:48:22.206 A:middle
an HK statistics collections

00:48:22.206 --> 00:48:22.446 A:middle
query.

00:48:22.876 --> 00:48:23.576 A:middle
We're going to pass in the

00:48:23.576 --> 00:48:24.686 A:middle
quantity type and predicate that

00:48:24.686 --> 00:48:25.586 A:middle
we previously defined.

00:48:26.086 --> 00:48:29.066 A:middle
Next, we're going to pass in a

00:48:29.066 --> 00:48:29.846 A:middle
couple of options.

00:48:29.846 --> 00:48:31.176 A:middle
These are cumulativeSum and

00:48:31.176 --> 00:48:32.096 A:middle
separateBySource.

00:48:32.256 --> 00:48:33.706 A:middle
It's important to pass in

00:48:33.706 --> 00:48:35.426 A:middle
separateBySource, because

00:48:35.846 --> 00:48:37.646 A:middle
HealthKit would normally only

00:48:37.996 --> 00:48:39.836 A:middle
return samples within a certain

00:48:39.836 --> 00:48:40.366 A:middle
time period.

00:48:40.626 --> 00:48:42.556 A:middle
Because the user has the option

00:48:42.556 --> 00:48:44.186 A:middle
to be delivered insulin over the

00:48:44.186 --> 00:48:45.666 A:middle
course of an hour, and also by

00:48:45.666 --> 00:48:47.586 A:middle
manual injection, these time

00:48:47.586 --> 00:48:48.426 A:middle
periods can overlap.

00:48:48.936 --> 00:48:50.336 A:middle
So, we use separateBySource to

00:48:50.336 --> 00:48:51.416 A:middle
get all the information.

00:48:51.926 --> 00:48:54.406 A:middle
Next, I'm interested in all the

00:48:54.406 --> 00:48:55.416 A:middle
basal samples.

00:48:55.476 --> 00:48:57.086 A:middle
So, I'm going to use date,

00:48:57.086 --> 00:48:58.496 A:middle
distantPast for the anchor date.

00:48:58.986 --> 00:49:01.766 A:middle
After that, to specify an hour

00:49:01.766 --> 00:49:03.236 A:middle
by hour basis, I'm going to pass

00:49:03.236 --> 00:49:04.776 A:middle
DateComponents of an hour of 1

00:49:05.066 --> 00:49:06.216 A:middle
to the intervalComponents.

00:49:06.766 --> 00:49:10.366 A:middle
Now that my query is created, I

00:49:10.366 --> 00:49:11.816 A:middle
could create the initial results

00:49:11.816 --> 00:49:12.096 A:middle
handler.

00:49:12.396 --> 00:49:14.216 A:middle
The results pass back from this

00:49:14.216 --> 00:49:15.766 A:middle
handler are going to contain all

00:49:15.766 --> 00:49:16.956 A:middle
the information that we need to

00:49:16.956 --> 00:49:18.436 A:middle
sum up to find out this

00:49:18.436 --> 00:49:21.876 A:middle
information that we need.

00:49:21.876 --> 00:49:22.966 A:middle
Finally, I'm going to execute

00:49:22.966 --> 00:49:24.156 A:middle
this query by passing it to the

00:49:24.546 --> 00:49:26.136 A:middle
execute method on healthStore.

00:49:26.736 --> 00:49:28.936 A:middle
Now you know how to insert

00:49:28.936 --> 00:49:30.186 A:middle
samples and retrieve them back

00:49:30.936 --> 00:49:31.006 A:middle
out.

00:49:35.336 --> 00:49:36.836 A:middle
Today we learned about a lot of

00:49:36.836 --> 00:49:38.816 A:middle
new features available in

00:49:39.856 --> 00:49:40.076 A:middle
HealthKit.

00:49:40.176 --> 00:49:41.416 A:middle
First, you learned about new

00:49:41.416 --> 00:49:42.746 A:middle
data types and new activity

00:49:42.746 --> 00:49:43.926 A:middle
types, which will make your

00:49:43.926 --> 00:49:49.446 A:middle
great workout apps even better.

00:49:49.806 --> 00:49:51.026 A:middle
Next, you learned about the new

00:49:51.026 --> 00:49:52.436 A:middle
WorkoutRouteBuilder API.

00:49:53.366 --> 00:49:54.886 A:middle
This allow you to record workout

00:49:54.886 --> 00:49:56.056 A:middle
routes and associate them to

00:49:56.056 --> 00:49:56.676 A:middle
workouts.

00:49:57.186 --> 00:49:59.986 A:middle
After that we introduced sync

00:49:59.986 --> 00:50:00.726 A:middle
identifiers.

00:50:01.376 --> 00:50:02.456 A:middle
Now, you can take advantage of

00:50:02.456 --> 00:50:04.186 A:middle
HealthKit to manage all data

00:50:04.186 --> 00:50:05.906 A:middle
duplication and prevent data

00:50:05.906 --> 00:50:07.656 A:middle
duplication across your devices.

00:50:08.226 --> 00:50:12.516 A:middle
And Finally, we added additional

00:50:12.516 --> 00:50:14.476 A:middle
support for users managing

00:50:14.476 --> 00:50:15.016 A:middle
diabetes.

00:50:19.846 --> 00:50:21.746 A:middle
For more information and to

00:50:21.746 --> 00:50:23.056 A:middle
download the full-implementation

00:50:23.056 --> 00:50:24.966 A:middle
of Speedy Sloth, please visit

00:50:25.506 --> 00:50:26.816 A:middle
this URL.

00:50:27.516 --> 00:50:33.856 A:middle
[ Applause ]

00:50:34.356 --> 00:50:35.516 A:middle
We have a few related sessions

00:50:35.516 --> 00:50:36.226 A:middle
that we recommend.

00:50:37.586 --> 00:50:41.736 A:middle
Thank you and have a great WWDC

00:50:41.736 --> 00:50:42.000 A:middle
[Applause].