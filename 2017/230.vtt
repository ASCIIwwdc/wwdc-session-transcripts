WEBVTT

00:00:07.516 --> 00:00:15.500 A:middle
[ Background Sounds ]

00:00:22.046 --> 00:00:23.816 A:middle
&gt;&gt; Hey everyone, I'm Joe Cerra

00:00:23.816 --> 00:00:26.466 A:middle
and I'm an engineer UIKit and

00:00:26.466 --> 00:00:28.416 A:middle
welcome to advanced animations

00:00:28.416 --> 00:00:29.146 A:middle
with UIKit.

00:00:29.246 --> 00:00:32.246 A:middle
So, today we have a lot to talk

00:00:32.246 --> 00:00:32.546 A:middle
about.

00:00:32.856 --> 00:00:33.826 A:middle
We're going to start off by

00:00:33.826 --> 00:00:35.536 A:middle
covering some of the basics and

00:00:35.536 --> 00:00:37.576 A:middle
how animations work and also how

00:00:37.576 --> 00:00:38.596 A:middle
animations are timed.

00:00:40.126 --> 00:00:41.286 A:middle
We're going to discuss how to

00:00:41.286 --> 00:00:42.496 A:middle
make animations fully

00:00:42.496 --> 00:00:43.756 A:middle
interactive and interruptible

00:00:43.756 --> 00:00:45.856 A:middle
using some modern techniques.

00:00:46.496 --> 00:00:48.006 A:middle
Then we're going to talk about

00:00:48.006 --> 00:00:49.016 A:middle
some of the new API that we're

00:00:49.016 --> 00:00:50.526 A:middle
providing this year in iOS 11.

00:00:50.526 --> 00:00:52.966 A:middle
And then we're going to use all

00:00:52.966 --> 00:00:54.176 A:middle
of that knowledge and I'm going

00:00:54.176 --> 00:00:55.626 A:middle
to show you how to coordinate

00:00:55.626 --> 00:00:56.186 A:middle
animations.

00:00:57.336 --> 00:00:58.946 A:middle
And then finally, we're going to

00:00:58.946 --> 00:01:00.826 A:middle
go over some tips and tricks and

00:01:00.826 --> 00:01:02.116 A:middle
a few more techniques to help

00:01:02.116 --> 00:01:03.006 A:middle
you create really great

00:01:03.006 --> 00:01:04.156 A:middle
animations for your users.

00:01:05.766 --> 00:01:06.806 A:middle
So, let's get into it.

00:01:08.436 --> 00:01:09.926 A:middle
UIView-based animations have

00:01:09.926 --> 00:01:10.956 A:middle
been around really since the

00:01:10.956 --> 00:01:11.716 A:middle
dawn of iOS.

00:01:11.716 --> 00:01:13.566 A:middle
And here's a quick refresher on

00:01:13.566 --> 00:01:14.116 A:middle
how they work.

00:01:15.456 --> 00:01:16.676 A:middle
So, say I have a UIView that

00:01:16.676 --> 00:01:17.976 A:middle
renders a circle and I'd like

00:01:17.976 --> 00:01:20.176 A:middle
the animate it from its position

00:01:20.176 --> 00:01:21.566 A:middle
of X equals zero to 100.

00:01:21.766 --> 00:01:24.136 A:middle
Well the way I might do this is

00:01:24.136 --> 00:01:25.506 A:middle
by calling the UIView.animate

00:01:25.506 --> 00:01:25.846 A:middle
method.

00:01:26.566 --> 00:01:28.086 A:middle
Here I'm calling UIView.animate

00:01:28.086 --> 00:01:30.126 A:middle
with a duration, performing some

00:01:30.126 --> 00:01:31.266 A:middle
animations in an animation

00:01:31.266 --> 00:01:31.576 A:middle
block.

00:01:31.986 --> 00:01:33.236 A:middle
In this case, I'm offsetting the

00:01:33.236 --> 00:01:35.466 A:middle
X value of our circle by 100.

00:01:36.466 --> 00:01:38.326 A:middle
And when I do that UIKit will

00:01:38.326 --> 00:01:39.776 A:middle
implicitly create an animation,

00:01:39.776 --> 00:01:41.116 A:middle
add it to our layer and produce

00:01:41.146 --> 00:01:42.136 A:middle
the following animation.

00:01:44.316 --> 00:01:46.286 A:middle
But last year we introduced the

00:01:46.286 --> 00:01:48.226 A:middle
UIViewPropertyAnimator, which

00:01:48.226 --> 00:01:49.936 A:middle
gives us a lot more control for

00:01:49.936 --> 00:01:51.736 A:middle
animations than its predecessor

00:01:51.736 --> 00:01:52.586 A:middle
UIViewAnimate.

00:01:53.126 --> 00:01:55.326 A:middle
Now this includes being able to

00:01:55.326 --> 00:01:57.146 A:middle
provide custom timing functions

00:01:57.416 --> 00:01:58.286 A:middle
and the ability to make your

00:01:58.286 --> 00:01:59.896 A:middle
animations fully interactive and

00:01:59.896 --> 00:02:01.496 A:middle
interruptible really easily.

00:02:02.466 --> 00:02:03.906 A:middle
In fact, with property animator

00:02:04.526 --> 00:02:05.896 A:middle
you can modify your animations

00:02:05.896 --> 00:02:06.536 A:middle
on the fly.

00:02:07.926 --> 00:02:08.596 A:middle
So, let's take a look at our

00:02:08.596 --> 00:02:09.606 A:middle
animation again and this time

00:02:09.606 --> 00:02:10.996 A:middle
we're going to use an animator

00:02:10.996 --> 00:02:12.456 A:middle
to animate it.

00:02:12.456 --> 00:02:13.436 A:middle
So, we create our animator

00:02:13.526 --> 00:02:14.556 A:middle
providing a duration and a

00:02:14.556 --> 00:02:16.306 A:middle
timing curve provider

00:02:16.306 --> 00:02:16.926 A:middle
animations.

00:02:17.536 --> 00:02:18.996 A:middle
And then we call startAnimator

00:02:19.156 --> 00:02:20.616 A:middle
which actually then runs that

00:02:20.616 --> 00:02:22.306 A:middle
animation block producing this

00:02:22.306 --> 00:02:22.796 A:middle
animation.

00:02:27.076 --> 00:02:28.366 A:middle
Now in the last two examples we

00:02:28.366 --> 00:02:29.816 A:middle
drove our animation with a

00:02:29.816 --> 00:02:30.986 A:middle
linear timing curve.

00:02:31.636 --> 00:02:33.316 A:middle
And what a timing curve is, is

00:02:33.316 --> 00:02:34.806 A:middle
essentially a function that maps

00:02:34.956 --> 00:02:37.396 A:middle
time to progress or the fraction

00:02:37.396 --> 00:02:38.806 A:middle
of elapsed time of your

00:02:38.806 --> 00:02:40.606 A:middle
animation to the fraction of

00:02:40.656 --> 00:02:41.786 A:middle
progress of your animation.

00:02:43.146 --> 00:02:44.236 A:middle
Now linear timing curves are

00:02:44.236 --> 00:02:46.226 A:middle
actually kind of interesting and

00:02:46.256 --> 00:02:47.826 A:middle
this is because the fraction of

00:02:47.916 --> 00:02:49.336 A:middle
time is equal to the fraction of

00:02:49.366 --> 00:02:51.036 A:middle
progress and we'll see why this

00:02:51.036 --> 00:02:53.896 A:middle
is interesting in just a second.

00:02:54.286 --> 00:02:56.026 A:middle
There are also of course, timing

00:02:56.026 --> 00:02:57.816 A:middle
curves other than linear, such

00:02:57.816 --> 00:02:59.446 A:middle
as the built-in ease in timing

00:02:59.446 --> 00:03:01.076 A:middle
function which starts off slowly

00:03:01.076 --> 00:03:02.006 A:middle
and then accelerates.

00:03:02.756 --> 00:03:04.426 A:middle
And the built-in ease out timing

00:03:04.426 --> 00:03:05.346 A:middle
function which starts off

00:03:05.386 --> 00:03:06.656 A:middle
quickly and then decelerates.

00:03:07.636 --> 00:03:09.346 A:middle
Well with property animators you

00:03:09.346 --> 00:03:10.416 A:middle
can provide your own custom

00:03:10.416 --> 00:03:11.876 A:middle
timing functions, such as this

00:03:11.876 --> 00:03:12.056 A:middle
one.

00:03:12.766 --> 00:03:14.156 A:middle
And the way you do that is by

00:03:14.156 --> 00:03:15.736 A:middle
providing two cubic Bezier

00:03:15.736 --> 00:03:16.346 A:middle
control points.

00:03:17.686 --> 00:03:19.106 A:middle
Now we'll see a little bit later

00:03:19.466 --> 00:03:21.686 A:middle
why it can be really useful to

00:03:21.686 --> 00:03:22.646 A:middle
be able to provide your own

00:03:22.646 --> 00:03:23.666 A:middle
custom timing functions.

00:03:25.766 --> 00:03:27.196 A:middle
So that's essentially how

00:03:27.196 --> 00:03:27.986 A:middle
animations work.

00:03:29.116 --> 00:03:30.256 A:middle
Now I want to talk about how to

00:03:30.256 --> 00:03:31.576 A:middle
make your animations fully

00:03:31.576 --> 00:03:32.146 A:middle
interactive.

00:03:33.766 --> 00:03:35.306 A:middle
So, an interactive animation is

00:03:35.306 --> 00:03:36.916 A:middle
one in which the user's actions

00:03:36.956 --> 00:03:38.946 A:middle
interactively drive the progress

00:03:38.946 --> 00:03:39.676 A:middle
of your animation.

00:03:40.646 --> 00:03:41.716 A:middle
So, here's a familiar example

00:03:41.716 --> 00:03:43.126 A:middle
where a gesture is driving

00:03:43.126 --> 00:03:44.526 A:middle
interactive animation and now

00:03:44.526 --> 00:03:46.646 A:middle
we're using 3D Touch to drive

00:03:46.646 --> 00:03:47.556 A:middle
another animation.

00:03:48.086 --> 00:03:50.786 A:middle
And we can, of course, dismiss

00:03:50.786 --> 00:03:51.756 A:middle
our Control Center view

00:03:51.756 --> 00:03:53.076 A:middle
interactively with a gesture.

00:03:54.646 --> 00:03:55.386 A:middle
So, let's do a quick

00:03:55.586 --> 00:03:56.396 A:middle
demonstration here.

00:03:56.976 --> 00:03:58.596 A:middle
So, we're going to add a

00:03:58.596 --> 00:03:59.756 A:middle
PanGestureRecognizer to our

00:03:59.756 --> 00:04:02.226 A:middle
circle and we're going to

00:04:02.226 --> 00:04:03.626 A:middle
animate it, but we're going to

00:04:03.626 --> 00:04:04.796 A:middle
do so with our finger by

00:04:04.796 --> 00:04:05.706 A:middle
scrubbing an animator.

00:04:05.706 --> 00:04:07.386 A:middle
And at this point we're going to

00:04:07.386 --> 00:04:08.756 A:middle
lift our finger off and continue

00:04:08.756 --> 00:04:09.966 A:middle
that animation to its target

00:04:09.966 --> 00:04:10.376 A:middle
position.

00:04:10.376 --> 00:04:13.366 A:middle
Now here's the code to do this.

00:04:14.456 --> 00:04:17.246 A:middle
We're going to save an instance

00:04:17.246 --> 00:04:19.086 A:middle
of our property animator in our

00:04:19.146 --> 00:04:20.646 A:middle
hand gesture recognizer handler.

00:04:21.116 --> 00:04:22.386 A:middle
We're going to create that

00:04:22.386 --> 00:04:23.816 A:middle
animator and initialize it with

00:04:23.866 --> 00:04:25.536 A:middle
some animations in an ease out

00:04:25.536 --> 00:04:25.976 A:middle
timing function.

00:04:30.116 --> 00:04:31.376 A:middle
Afterwards we're going to call

00:04:31.376 --> 00:04:33.076 A:middle
pauseAnimation immediately after

00:04:33.136 --> 00:04:34.056 A:middle
and that's going to run that

00:04:34.056 --> 00:04:35.596 A:middle
animation block producing that

00:04:35.596 --> 00:04:36.776 A:middle
animation implicitly.

00:04:37.556 --> 00:04:39.026 A:middle
And what property animator does

00:04:39.156 --> 00:04:41.056 A:middle
is essentially sets the speed of

00:04:41.056 --> 00:04:42.406 A:middle
that animation to zero.

00:04:43.006 --> 00:04:44.636 A:middle
So now we can interact with it.

00:04:45.176 --> 00:04:46.326 A:middle
So, we're going to scrub our

00:04:46.326 --> 00:04:47.576 A:middle
animator's fraction complete

00:04:47.696 --> 00:04:48.906 A:middle
based on the distance our finger

00:04:48.906 --> 00:04:50.626 A:middle
travels relative to the total

00:04:50.626 --> 00:04:52.336 A:middle
distance of the animation, which

00:04:52.336 --> 00:04:53.936 A:middle
in this case is 100 because

00:04:53.936 --> 00:04:55.076 A:middle
we're animating from zero to

00:04:55.076 --> 00:04:55.426 A:middle
100.

00:04:57.666 --> 00:04:58.766 A:middle
And when our finger is lifted

00:04:58.766 --> 00:04:59.776 A:middle
off we're just going to call

00:04:59.776 --> 00:05:00.666 A:middle
continueAnimation.

00:05:02.536 --> 00:05:04.056 A:middle
Now that's really easy, but

00:05:04.056 --> 00:05:05.326 A:middle
there's actually two really

00:05:05.326 --> 00:05:06.626 A:middle
interesting moments that occur

00:05:06.686 --> 00:05:08.216 A:middle
here and that is when we pause

00:05:08.216 --> 00:05:09.266 A:middle
our animation and then when we

00:05:09.306 --> 00:05:10.346 A:middle
continue it, so let's take a

00:05:10.346 --> 00:05:10.926 A:middle
look at those.

00:05:12.346 --> 00:05:13.226 A:middle
So, we've just created our

00:05:13.226 --> 00:05:14.966 A:middle
animator and we're about to

00:05:14.966 --> 00:05:16.306 A:middle
pause it so we can interact with

00:05:16.306 --> 00:05:16.376 A:middle
it.

00:05:16.646 --> 00:05:18.696 A:middle
Notice that our animator has

00:05:18.696 --> 00:05:20.246 A:middle
been created with an ease out

00:05:20.246 --> 00:05:20.866 A:middle
timing function.

00:05:21.336 --> 00:05:22.416 A:middle
So, let's call pause and see

00:05:22.416 --> 00:05:23.566 A:middle
what happens.

00:05:25.396 --> 00:05:27.536 A:middle
So, our animator becomes active,

00:05:28.016 --> 00:05:29.346 A:middle
but we've just converted our

00:05:29.346 --> 00:05:31.266 A:middle
timing curve automatically into

00:05:31.266 --> 00:05:32.186 A:middle
a linear timing curve.

00:05:32.816 --> 00:05:33.966 A:middle
Why did the property animator do

00:05:33.966 --> 00:05:34.216 A:middle
that?

00:05:35.206 --> 00:05:36.596 A:middle
Well it turns out this makes

00:05:36.596 --> 00:05:38.026 A:middle
scrubbing your animation really

00:05:38.026 --> 00:05:40.006 A:middle
easy because of that property of

00:05:40.006 --> 00:05:41.406 A:middle
linear timing functions where

00:05:41.566 --> 00:05:42.846 A:middle
the fraction of time is equal to

00:05:42.846 --> 00:05:44.406 A:middle
the fraction of progress, you

00:05:44.406 --> 00:05:45.786 A:middle
can now scrub both time and

00:05:45.786 --> 00:05:46.966 A:middle
progress uniformly.

00:05:48.926 --> 00:05:49.746 A:middle
Now let's take a look at what

00:05:49.746 --> 00:05:50.946 A:middle
happens when we continue our

00:05:50.946 --> 00:05:51.406 A:middle
animation.

00:05:52.676 --> 00:05:53.276 A:middle
So, we're scrubbing our

00:05:53.276 --> 00:05:55.226 A:middle
animation here and now our

00:05:55.226 --> 00:05:56.356 A:middle
finger is lifted off and we're

00:05:56.356 --> 00:05:58.316 A:middle
about call continueAnimation, so

00:05:58.316 --> 00:06:02.796 A:middle
let's see what that does.

00:06:03.036 --> 00:06:04.436 A:middle
So, we convert back to that ease

00:06:04.436 --> 00:06:06.706 A:middle
out timing function, but also

00:06:06.706 --> 00:06:07.786 A:middle
something interesting happened.

00:06:07.786 --> 00:06:09.586 A:middle
We remapped time in the process.

00:06:10.046 --> 00:06:11.326 A:middle
So, fraction complete which was

00:06:11.326 --> 00:06:14.676 A:middle
once 50% is now 10% and the

00:06:14.676 --> 00:06:16.626 A:middle
reason for that is we want to

00:06:16.626 --> 00:06:18.456 A:middle
keep our progress value stable

00:06:18.456 --> 00:06:19.686 A:middle
when we convert back to that

00:06:19.686 --> 00:06:20.696 A:middle
ease out timing function.

00:06:22.826 --> 00:06:23.916 A:middle
Also, I want to draw attention

00:06:23.916 --> 00:06:25.206 A:middle
to our duration factor here,

00:06:25.206 --> 00:06:26.746 A:middle
which is zero and what this

00:06:26.746 --> 00:06:27.866 A:middle
means is for our property

00:06:27.866 --> 00:06:28.796 A:middle
animator to use whatever

00:06:28.796 --> 00:06:30.186 A:middle
remaining time it has left,

00:06:30.686 --> 00:06:32.556 A:middle
which in this case would be 90%

00:06:32.986 --> 00:06:34.306 A:middle
of its original duration.

00:06:34.706 --> 00:06:36.616 A:middle
So, if for example, our animator

00:06:36.616 --> 00:06:37.796 A:middle
was created with a duration of

00:06:37.796 --> 00:06:39.736 A:middle
two seconds it would continue in

00:06:39.736 --> 00:06:40.706 A:middle
1.8 seconds.

00:06:42.646 --> 00:06:44.306 A:middle
So that's how interactive

00:06:44.306 --> 00:06:45.076 A:middle
animations work.

00:06:45.076 --> 00:06:46.366 A:middle
Now let's talk about how to make

00:06:46.366 --> 00:06:47.366 A:middle
our animations fully

00:06:47.366 --> 00:06:47.896 A:middle
interruptible.

00:06:50.006 --> 00:06:51.206 A:middle
Now an interruptible animation

00:06:51.206 --> 00:06:52.186 A:middle
is one in which the user's

00:06:52.186 --> 00:06:53.666 A:middle
actions interrupt or pause a

00:06:53.666 --> 00:06:54.776 A:middle
currently running animation.

00:06:55.496 --> 00:06:56.336 A:middle
Here's an example that you're

00:06:56.336 --> 00:06:57.266 A:middle
probably familiar with, with

00:06:57.266 --> 00:06:57.796 A:middle
Safari.

00:06:57.966 --> 00:06:59.306 A:middle
When you flick your finger, it

00:06:59.306 --> 00:07:00.966 A:middle
accelerates and then it sort of

00:07:00.966 --> 00:07:01.696 A:middle
decelerates.

00:07:02.186 --> 00:07:03.116 A:middle
But if you touch the screen

00:07:03.116 --> 00:07:04.286 A:middle
again you interrupt that

00:07:04.286 --> 00:07:05.936 A:middle
animation at which point you can

00:07:05.936 --> 00:07:07.046 A:middle
scrub it.

00:07:08.456 --> 00:07:09.476 A:middle
So, we're going to do one more

00:07:09.476 --> 00:07:11.376 A:middle
demonstration this time and

00:07:11.376 --> 00:07:12.246 A:middle
we're going to add our

00:07:12.246 --> 00:07:13.506 A:middle
PanGestureRecognizer to our

00:07:13.506 --> 00:07:14.906 A:middle
circle, but this time we're

00:07:14.906 --> 00:07:15.916 A:middle
going to let it animate for a

00:07:15.916 --> 00:07:16.766 A:middle
little bit and then we're going

00:07:16.796 --> 00:07:17.766 A:middle
to catch it midflight.

00:07:19.266 --> 00:07:20.996 A:middle
So here it is animating then we

00:07:20.996 --> 00:07:22.796 A:middle
catch it with our finger at this

00:07:22.906 --> 00:07:24.046 A:middle
point we can scrub it, but we've

00:07:24.046 --> 00:07:25.606 A:middle
already seen how that works so

00:07:25.606 --> 00:07:26.246 A:middle
instead, we're just going to

00:07:26.246 --> 00:07:27.426 A:middle
lift our finger and continue the

00:07:27.426 --> 00:07:28.486 A:middle
animation to its target

00:07:28.486 --> 00:07:29.000 A:middle
destination.

00:07:33.336 --> 00:07:34.686 A:middle
So, here's the code from before

00:07:34.686 --> 00:07:35.416 A:middle
and we're just going to make a

00:07:35.416 --> 00:07:37.086 A:middle
few changes so we can support

00:07:37.086 --> 00:07:38.246 A:middle
both interactive and

00:07:38.246 --> 00:07:39.376 A:middle
interruptible animations.

00:07:39.376 --> 00:07:41.436 A:middle
So, we're going to introduce a

00:07:41.436 --> 00:07:42.406 A:middle
new method here called

00:07:42.406 --> 00:07:43.936 A:middle
animateTransitionIfNeeded and

00:07:43.936 --> 00:07:46.656 A:middle
this is a custom method, this is

00:07:46.656 --> 00:07:48.226 A:middle
not a UIKit method for example.

00:07:49.046 --> 00:07:50.356 A:middle
So, what this does is it'll

00:07:50.356 --> 00:07:51.606 A:middle
initiate our transition if it

00:07:51.606 --> 00:07:52.546 A:middle
isn't already running.

00:07:53.436 --> 00:07:54.316 A:middle
Were also going to introduce a

00:07:54.316 --> 00:07:55.456 A:middle
new property called

00:07:55.556 --> 00:07:56.726 A:middle
progressWhenInterrupted and this

00:07:56.996 --> 00:07:58.306 A:middle
is going to save any relative

00:07:58.336 --> 00:07:59.616 A:middle
progress made by your animator

00:07:59.616 --> 00:08:00.886 A:middle
prior to it being interrupted.

00:08:00.886 --> 00:08:03.536 A:middle
Now when our gesture begins

00:08:03.536 --> 00:08:04.186 A:middle
we're going to create that

00:08:04.186 --> 00:08:05.426 A:middle
animator again, but this time

00:08:05.426 --> 00:08:06.846 A:middle
only if our transition isn't

00:08:06.846 --> 00:08:07.126 A:middle
running.

00:08:07.736 --> 00:08:08.726 A:middle
We're then going to pause it so

00:08:08.726 --> 00:08:09.706 A:middle
that we can interact with it and

00:08:10.206 --> 00:08:11.306 A:middle
we're going to save any relative

00:08:11.306 --> 00:08:12.766 A:middle
progress made by it prior to

00:08:12.766 --> 00:08:13.526 A:middle
being interrupted.

00:08:15.316 --> 00:08:16.316 A:middle
When our finger moves we're

00:08:16.316 --> 00:08:17.446 A:middle
going to scrub our animator's

00:08:17.446 --> 00:08:19.176 A:middle
fraction complete, but this time

00:08:19.436 --> 00:08:20.096 A:middle
we're going to scrub our

00:08:20.096 --> 00:08:21.596 A:middle
animator based on the distance

00:08:21.596 --> 00:08:23.156 A:middle
our finger has traveled relative

00:08:23.156 --> 00:08:25.206 A:middle
to any progress it made prior to

00:08:25.206 --> 00:08:25.856 A:middle
being interrupted.

00:08:27.636 --> 00:08:28.666 A:middle
And when our finger lifts we're

00:08:28.666 --> 00:08:29.686 A:middle
going to continue our animation.

00:08:30.956 --> 00:08:31.976 A:middle
But to make this example a

00:08:31.976 --> 00:08:32.996 A:middle
little bit more interesting

00:08:33.406 --> 00:08:34.766 A:middle
let's continue with an ease out

00:08:34.766 --> 00:08:36.246 A:middle
timing function and let's assume

00:08:36.246 --> 00:08:37.356 A:middle
that our animation was created

00:08:37.356 --> 00:08:38.456 A:middle
with an ease and timing function

00:08:38.786 --> 00:08:39.896 A:middle
just to see what that does.

00:08:42.806 --> 00:08:44.456 A:middle
So, here we are about to

00:08:44.456 --> 00:08:45.876 A:middle
interrupt our animation and

00:08:45.876 --> 00:08:47.426 A:middle
fraction completes about 50% sol

00:08:47.426 --> 00:08:48.716 A:middle
it's ran for about half its

00:08:48.716 --> 00:08:50.286 A:middle
duration and progress is only

00:08:50.286 --> 00:08:51.626 A:middle
about 10% because we're on an

00:08:51.676 --> 00:08:52.686 A:middle
ease out timing function.

00:08:53.146 --> 00:08:54.526 A:middle
So, let's call pause and watch

00:08:55.086 --> 00:08:56.046 A:middle
what happens.

00:08:56.256 --> 00:08:57.676 A:middle
So again, we convert into that

00:08:57.676 --> 00:08:58.666 A:middle
linear timing function to make

00:08:58.666 --> 00:09:00.526 A:middle
scrubbing really easy, but we

00:09:00.526 --> 00:09:02.316 A:middle
also have remapped time just as

00:09:02.316 --> 00:09:03.536 A:middle
we did before to keep progress

00:09:03.536 --> 00:09:04.766 A:middle
stable so our animation doesn't

00:09:04.766 --> 00:09:05.026 A:middle
jump.

00:09:05.886 --> 00:09:06.566 A:middle
Now when we call

00:09:06.566 --> 00:09:08.576 A:middle
continueAnimation we're going to

00:09:08.576 --> 00:09:10.196 A:middle
do so with an ease out timing

00:09:10.196 --> 00:09:11.696 A:middle
function and again, you can see

00:09:12.116 --> 00:09:13.946 A:middle
we convert back into that new

00:09:13.946 --> 00:09:15.616 A:middle
timing function and remap time

00:09:15.616 --> 00:09:15.876 A:middle
again.

00:09:17.126 --> 00:09:18.596 A:middle
So, this is a really subtle

00:09:18.596 --> 00:09:20.156 A:middle
aspect of property animators

00:09:20.186 --> 00:09:20.916 A:middle
that's really important to

00:09:20.916 --> 00:09:21.706 A:middle
understand when you're

00:09:21.706 --> 00:09:22.566 A:middle
manipulating them.

00:09:23.186 --> 00:09:27.286 A:middle
So that's how to make animations

00:09:27.286 --> 00:09:28.046 A:middle
fully interactive and

00:09:28.046 --> 00:09:28.596 A:middle
interruptible.

00:09:28.646 --> 00:09:29.676 A:middle
Now let's talk about some of the

00:09:29.676 --> 00:09:30.826 A:middle
new API that we're providing

00:09:30.826 --> 00:09:31.126 A:middle
this year.

00:09:32.686 --> 00:09:35.036 A:middle
So, new in iOS 11 property

00:09:35.036 --> 00:09:36.696 A:middle
animator is getting two new

00:09:36.696 --> 00:09:39.536 A:middle
properties, scrubsLinearly and

00:09:39.536 --> 00:09:40.516 A:middle
pausesOnCompletion.

00:09:41.396 --> 00:09:43.356 A:middle
It's also getting a new behavior

00:09:43.356 --> 00:09:45.716 A:middle
which is starting as paused, so

00:09:45.716 --> 00:09:46.626 A:middle
let's talk about these.

00:09:47.996 --> 00:09:48.816 A:middle
So, in the last couple of

00:09:48.816 --> 00:09:50.436 A:middle
examples you saw that when we

00:09:50.436 --> 00:09:51.836 A:middle
paused our animator it converts

00:09:51.836 --> 00:09:52.896 A:middle
the timing function into a

00:09:52.896 --> 00:09:54.386 A:middle
linear timing function and it

00:09:54.386 --> 00:09:56.136 A:middle
does this to make scrubbing the

00:09:56.276 --> 00:09:57.496 A:middle
progress of your animator really

00:09:57.546 --> 00:09:57.896 A:middle
easy.

00:09:58.696 --> 00:09:59.926 A:middle
But you know sometimes it's

00:09:59.926 --> 00:10:01.056 A:middle
really useful for your animator

00:10:01.056 --> 00:10:02.326 A:middle
to maintain its pacing when it's

00:10:02.326 --> 00:10:03.436 A:middle
being driven interactively.

00:10:04.166 --> 00:10:05.216 A:middle
And now you can do that by

00:10:05.216 --> 00:10:06.516 A:middle
disabling linear scrubbing.

00:10:07.416 --> 00:10:08.556 A:middle
And here's just a quick example

00:10:08.626 --> 00:10:10.506 A:middle
where linearly scrubbing the

00:10:10.506 --> 00:10:12.876 A:middle
opacity of the circle on top and

00:10:12.876 --> 00:10:14.216 A:middle
we're nonlinearly scrubbing the

00:10:14.216 --> 00:10:15.556 A:middle
opacity of the circle on the

00:10:15.556 --> 00:10:16.996 A:middle
bottom according to an ease out

00:10:16.996 --> 00:10:17.596 A:middle
timing function.

00:10:19.086 --> 00:10:20.226 A:middle
We'll see a little bit later

00:10:20.226 --> 00:10:21.036 A:middle
when we're coordinating

00:10:21.036 --> 00:10:22.136 A:middle
transitions this could be a

00:10:22.136 --> 00:10:23.456 A:middle
really interesting thing to do

00:10:23.456 --> 00:10:26.426 A:middle
to create some pretty compelling

00:10:26.426 --> 00:10:27.006 A:middle
animations.

00:10:28.906 --> 00:10:30.336 A:middle
Animators can now also pause on

00:10:30.336 --> 00:10:30.826 A:middle
completion.

00:10:32.316 --> 00:10:33.966 A:middle
So, when an animator's

00:10:33.966 --> 00:10:35.316 A:middle
animations finish it will

00:10:35.316 --> 00:10:36.556 A:middle
automatically transition into

00:10:36.556 --> 00:10:37.456 A:middle
the inactive state.

00:10:38.066 --> 00:10:39.296 A:middle
And when it does that it's going

00:10:39.296 --> 00:10:40.586 A:middle
to release any animations that

00:10:40.586 --> 00:10:42.336 A:middle
it was previously tracking which

00:10:42.336 --> 00:10:44.246 A:middle
means you cannot manipulate or

00:10:44.246 --> 00:10:45.516 A:middle
even reverse them after they've

00:10:45.576 --> 00:10:45.966 A:middle
finished.

00:10:46.916 --> 00:10:48.166 A:middle
But now if you set pauses on

00:10:48.166 --> 00:10:50.016 A:middle
completion to true your animator

00:10:50.016 --> 00:10:51.606 A:middle
will pause at 100% fraction

00:10:51.606 --> 00:10:53.316 A:middle
complete allowing you to at any

00:10:53.316 --> 00:10:54.646 A:middle
point in the future reverse

00:10:54.646 --> 00:10:55.286 A:middle
those animations.

00:10:55.916 --> 00:10:58.766 A:middle
And to give you guys a little

00:10:58.766 --> 00:11:00.176 A:middle
bit of insight here we actually

00:11:00.176 --> 00:11:01.286 A:middle
use this in UIKit for

00:11:01.286 --> 00:11:01.906 A:middle
Drag-and-Drop.

00:11:02.726 --> 00:11:04.556 A:middle
So, here's an example of a lift

00:11:04.556 --> 00:11:05.876 A:middle
animation and as you may be

00:11:05.876 --> 00:11:07.206 A:middle
aware, you can provide your own

00:11:07.506 --> 00:11:08.846 A:middle
alongside animations to

00:11:08.846 --> 00:11:09.776 A:middle
customize this.

00:11:10.706 --> 00:11:11.726 A:middle
And we're actually going to

00:11:11.726 --> 00:11:13.656 A:middle
drive those animations by a

00:11:13.656 --> 00:11:15.086 A:middle
property animator that pauses on

00:11:15.086 --> 00:11:16.806 A:middle
completion internally in UIKit.

00:11:17.686 --> 00:11:18.816 A:middle
And because of that we could

00:11:18.976 --> 00:11:20.876 A:middle
easily reverse those animations

00:11:20.876 --> 00:11:22.666 A:middle
for you at any time after the

00:11:22.826 --> 00:11:25.286 A:middle
user lifts their finger even if

00:11:25.326 --> 00:11:26.516 A:middle
your animations have already

00:11:26.516 --> 00:11:27.000 A:middle
finished.

00:11:30.916 --> 00:11:32.756 A:middle
I also should mention that we're

00:11:32.756 --> 00:11:33.446 A:middle
not going to call your

00:11:33.446 --> 00:11:34.636 A:middle
animator's completion handler

00:11:34.636 --> 00:11:35.896 A:middle
when it pauses on completion,

00:11:36.356 --> 00:11:37.346 A:middle
but if you are interested to

00:11:37.346 --> 00:11:38.286 A:middle
know when those animations have

00:11:38.366 --> 00:11:39.836 A:middle
finished you can simply observe

00:11:39.866 --> 00:11:40.716 A:middle
the running property.

00:11:41.266 --> 00:11:44.906 A:middle
And finally, now you can create

00:11:44.906 --> 00:11:46.426 A:middle
a property animator and start it

00:11:46.426 --> 00:11:47.646 A:middle
before you've provided any

00:11:47.646 --> 00:11:48.496 A:middle
animations to it.

00:11:49.196 --> 00:11:50.646 A:middle
Now what this does is any

00:11:50.646 --> 00:11:51.516 A:middle
animation blocks that you

00:11:51.516 --> 00:11:53.126 A:middle
subsequently provide will be ran

00:11:53.126 --> 00:11:54.776 A:middle
immediately instead of escaping.

00:11:54.776 --> 00:11:56.106 A:middle
And this is great if you're

00:11:56.106 --> 00:11:57.476 A:middle
transitioning any of your UIView

00:11:57.506 --> 00:11:59.086 A:middle
animate code over to using

00:11:59.086 --> 00:11:59.906 A:middle
property animators.

00:12:00.526 --> 00:12:04.256 A:middle
Now I just want to spend a

00:12:04.366 --> 00:12:05.596 A:middle
couple minutes here talking

00:12:05.596 --> 00:12:06.336 A:middle
about springs.

00:12:07.006 --> 00:12:07.866 A:middle
So, spring animations are

00:12:07.866 --> 00:12:10.376 A:middle
pervasive in UIKit in iOS and

00:12:10.376 --> 00:12:11.616 A:middle
they add a sense of realism to

00:12:11.616 --> 00:12:12.306 A:middle
your animations.

00:12:13.546 --> 00:12:14.856 A:middle
Now in UIKit we provide two

00:12:14.856 --> 00:12:16.516 A:middle
kinds of springs, critically

00:12:16.516 --> 00:12:17.936 A:middle
damped springs and under damped

00:12:17.936 --> 00:12:18.226 A:middle
springs.

00:12:19.516 --> 00:12:20.726 A:middle
A critically damped spring is

00:12:20.726 --> 00:12:22.026 A:middle
one which accelerates quickly

00:12:22.026 --> 00:12:23.326 A:middle
and it sort of decelerates just

00:12:23.326 --> 00:12:24.506 A:middle
as quickly hovering over its

00:12:24.506 --> 00:12:27.376 A:middle
target value, whereas an under

00:12:27.376 --> 00:12:28.376 A:middle
damped spring accelerates

00:12:28.376 --> 00:12:30.076 A:middle
quickly beyond its target value

00:12:30.076 --> 00:12:31.046 A:middle
and then oscillates.

00:12:32.826 --> 00:12:34.006 A:middle
So, spring animations are unique

00:12:34.006 --> 00:12:35.646 A:middle
in this way and we think of

00:12:35.646 --> 00:12:36.986 A:middle
spring animations just as we

00:12:36.986 --> 00:12:38.396 A:middle
think about timing curves.

00:12:39.056 --> 00:12:40.286 A:middle
But spring animations are also

00:12:40.286 --> 00:12:41.626 A:middle
unique in that they always

00:12:41.696 --> 00:12:42.736 A:middle
animate from their current

00:12:42.736 --> 00:12:43.576 A:middle
presentation value.

00:12:43.576 --> 00:12:45.136 A:middle
And there are a couple reasons

00:12:45.136 --> 00:12:46.076 A:middle
why we do this.

00:12:47.976 --> 00:12:49.376 A:middle
So, the first is, it may

00:12:49.376 --> 00:12:51.096 A:middle
actually be undefined to convert

00:12:51.096 --> 00:12:52.606 A:middle
a spring animation to a cubic

00:12:52.606 --> 00:12:54.056 A:middle
animation and this is because

00:12:54.056 --> 00:12:55.456 A:middle
cubic timing functions don't

00:12:55.456 --> 00:12:56.466 A:middle
oscillate or overshoot their

00:12:56.466 --> 00:12:58.076 A:middle
value as they're bounded by

00:12:58.076 --> 00:12:59.376 A:middle
minimum and maximum values.

00:12:59.906 --> 00:13:03.526 A:middle
And the second reason it's a

00:13:03.526 --> 00:13:05.016 A:middle
little bit more interesting and

00:13:05.456 --> 00:13:07.626 A:middle
this is if you animate with a

00:13:07.626 --> 00:13:09.136 A:middle
two-dimensional initial velocity

00:13:09.136 --> 00:13:11.196 A:middle
with unique DX and DY components

00:13:11.626 --> 00:13:12.976 A:middle
property animator is actually

00:13:12.976 --> 00:13:14.276 A:middle
going to decompose that for you

00:13:14.606 --> 00:13:15.626 A:middle
and create two spring

00:13:15.626 --> 00:13:16.166 A:middle
animations.

00:13:17.036 --> 00:13:17.946 A:middle
And because those two spring

00:13:17.946 --> 00:13:19.466 A:middle
animations have different

00:13:19.466 --> 00:13:20.656 A:middle
velocities they're going to be

00:13:20.656 --> 00:13:21.636 A:middle
desynchronized so we're not

00:13:21.636 --> 00:13:22.356 A:middle
going to be able to convert

00:13:22.386 --> 00:13:23.966 A:middle
those onto a cubic animation.

00:13:24.546 --> 00:13:28.196 A:middle
So, if you do have to interrupt

00:13:28.196 --> 00:13:29.356 A:middle
the spring animation here are a

00:13:29.356 --> 00:13:30.506 A:middle
few best practices.

00:13:31.636 --> 00:13:32.596 A:middle
So, the first thing you can do

00:13:32.726 --> 00:13:33.836 A:middle
is consider stopping your spring

00:13:33.836 --> 00:13:35.046 A:middle
animation, promoting current

00:13:35.046 --> 00:13:36.166 A:middle
presentation value to model

00:13:36.166 --> 00:13:37.396 A:middle
value, and then creating a

00:13:37.396 --> 00:13:38.466 A:middle
brand-new animation from there.

00:13:39.056 --> 00:13:42.196 A:middle
The second thing you can do is

00:13:42.226 --> 00:13:43.256 A:middle
consider using a critically

00:13:43.256 --> 00:13:44.346 A:middle
damped spring without initial

00:13:44.346 --> 00:13:45.446 A:middle
velocity as these don't

00:13:45.446 --> 00:13:47.026 A:middle
overshoot or oscillate.

00:13:48.416 --> 00:13:50.106 A:middle
And then finally, if you are

00:13:50.106 --> 00:13:51.526 A:middle
animating with a two-dimensional

00:13:51.526 --> 00:13:52.986 A:middle
initial velocity with unique X

00:13:52.986 --> 00:13:54.986 A:middle
and Y components you can

00:13:54.986 --> 00:13:56.256 A:middle
consider decomposing that

00:13:56.256 --> 00:13:58.356 A:middle
yourself and driving the X

00:13:58.356 --> 00:14:00.106 A:middle
animations with one animator and

00:14:00.106 --> 00:14:01.536 A:middle
the Y animations with another.

00:14:03.246 --> 00:14:06.156 A:middle
So that's how property

00:14:06.156 --> 00:14:06.876 A:middle
animations work.

00:14:07.686 --> 00:14:09.116 A:middle
Now let's talk about how to use

00:14:09.116 --> 00:14:10.686 A:middle
all that knowledge to coordinate

00:14:10.796 --> 00:14:11.336 A:middle
animations.

00:14:12.416 --> 00:14:13.726 A:middle
So, for this we're going to

00:14:13.726 --> 00:14:15.086 A:middle
build a fully interactive

00:14:15.086 --> 00:14:16.156 A:middle
interruptible animated

00:14:16.156 --> 00:14:17.786 A:middle
transition that coordinates

00:14:17.786 --> 00:14:19.696 A:middle
across multiple uniquely timed

00:14:19.916 --> 00:14:20.416 A:middle
animators.

00:14:22.376 --> 00:14:23.746 A:middle
So, say that we have an app and

00:14:23.746 --> 00:14:24.776 A:middle
our app is showing some piece of

00:14:24.776 --> 00:14:26.256 A:middle
content and anchored to the

00:14:26.256 --> 00:14:27.316 A:middle
bottom of the screen is the

00:14:27.316 --> 00:14:28.916 A:middle
Comments button and when we tap

00:14:28.916 --> 00:14:30.506 A:middle
on it it expands showing our

00:14:30.506 --> 00:14:31.106 A:middle
comments view.

00:14:32.386 --> 00:14:33.496 A:middle
Now we might implement this

00:14:33.496 --> 00:14:35.386 A:middle
using UIView controller animated

00:14:35.386 --> 00:14:36.666 A:middle
transitioning for example, but

00:14:37.286 --> 00:14:38.916 A:middle
we'd like this to be completely

00:14:38.916 --> 00:14:40.106 A:middle
interactive and interruptible so

00:14:40.106 --> 00:14:41.146 A:middle
I'd like to show you how to do

00:14:41.146 --> 00:14:41.376 A:middle
that.

00:14:41.926 --> 00:14:43.866 A:middle
So, the first thing we're going

00:14:43.866 --> 00:14:45.446 A:middle
to do is add two gesture

00:14:45.446 --> 00:14:46.806 A:middle
recognizers, a tap gesture

00:14:46.806 --> 00:14:48.116 A:middle
recognizer so that we can tap on

00:14:48.116 --> 00:14:49.436 A:middle
it and expands and tap on it

00:14:49.436 --> 00:14:50.536 A:middle
again it will collapse.

00:14:51.016 --> 00:14:52.166 A:middle
We'd also like to be able to tap

00:14:52.166 --> 00:14:53.296 A:middle
on it while that animation is

00:14:53.346 --> 00:14:54.656 A:middle
running so it can be reversed.

00:14:55.666 --> 00:14:56.576 A:middle
And we're going to add a pan

00:14:56.576 --> 00:14:57.526 A:middle
gesture recognizer so we can

00:14:57.566 --> 00:14:58.196 A:middle
interact with it.

00:14:58.986 --> 00:15:00.246 A:middle
So, here's our code form before

00:15:00.916 --> 00:15:01.826 A:middle
and we're going to make just a

00:15:01.826 --> 00:15:03.446 A:middle
couple modifications to it to

00:15:03.446 --> 00:15:04.636 A:middle
create this infrastructure that

00:15:04.636 --> 00:15:05.486 A:middle
we're going to build on.

00:15:06.516 --> 00:15:07.186 A:middle
So, the first thing we're going

00:15:07.186 --> 00:15:08.906 A:middle
to do is we're going to replace

00:15:08.956 --> 00:15:10.056 A:middle
our instance of our property

00:15:10.056 --> 00:15:11.876 A:middle
animator with a collection of

00:15:11.876 --> 00:15:13.156 A:middle
running property animators.

00:15:14.966 --> 00:15:16.746 A:middle
And for that collection of

00:15:16.986 --> 00:15:19.036 A:middle
running property animators if we

00:15:19.036 --> 00:15:20.236 A:middle
ever create a property animator

00:15:20.236 --> 00:15:20.986 A:middle
we're just going to add it to

00:15:21.036 --> 00:15:22.516 A:middle
that collection and let's assume

00:15:22.576 --> 00:15:23.646 A:middle
that when those animations

00:15:23.646 --> 00:15:24.646 A:middle
finish it's automatically

00:15:24.646 --> 00:15:24.996 A:middle
removed.

00:15:26.546 --> 00:15:27.876 A:middle
Next, we're going to reintroduce

00:15:27.876 --> 00:15:29.696 A:middle
our animateTransitionIfNeeded

00:15:29.696 --> 00:15:30.936 A:middle
method and it's going to take a

00:15:30.936 --> 00:15:32.386 A:middle
target state to animate to.

00:15:32.976 --> 00:15:36.026 A:middle
So, if we look at this if our

00:15:36.026 --> 00:15:37.406 A:middle
runningAnimators.isEmpty that

00:15:37.406 --> 00:15:38.356 A:middle
means there's no transition

00:15:38.356 --> 00:15:39.716 A:middle
currently running, so we're

00:15:39.716 --> 00:15:41.036 A:middle
going to initiate a transition

00:15:41.036 --> 00:15:41.956 A:middle
if that is the case.

00:15:41.956 --> 00:15:42.996 A:middle
And we're going to do that by

00:15:42.996 --> 00:15:44.476 A:middle
creating a new property animator

00:15:44.476 --> 00:15:45.556 A:middle
for our frame which is going to

00:15:45.556 --> 00:15:46.716 A:middle
use a critically damped spring.

00:15:46.716 --> 00:15:48.456 A:middle
We're then going to perform our

00:15:48.456 --> 00:15:49.946 A:middle
animations and we're going to

00:15:49.946 --> 00:15:51.446 A:middle
start that animator and add it

00:15:51.446 --> 00:15:52.356 A:middle
to that collection of running

00:15:52.356 --> 00:15:52.796 A:middle
animators.

00:15:57.046 --> 00:15:57.896 A:middle
Next, in our tap gesture

00:15:57.896 --> 00:15:58.956 A:middle
recognizer handler we're going

00:15:58.956 --> 00:16:00.496 A:middle
to call this method and this is

00:16:00.496 --> 00:16:02.366 A:middle
going to animate or reverse our

00:16:02.366 --> 00:16:03.166 A:middle
running transition.

00:16:03.726 --> 00:16:05.416 A:middle
So, if our transition isn't

00:16:05.416 --> 00:16:06.346 A:middle
running we're going to just

00:16:06.406 --> 00:16:07.476 A:middle
initiate our transition,

00:16:08.136 --> 00:16:09.786 A:middle
otherwise we're going to iterate

00:16:09.786 --> 00:16:10.916 A:middle
through all of our running

00:16:10.916 --> 00:16:12.346 A:middle
property animators and reverse

00:16:12.346 --> 00:16:12.526 A:middle
them.

00:16:17.066 --> 00:16:18.356 A:middle
Now for these next three methods

00:16:18.356 --> 00:16:19.486 A:middle
we're just going to extract our

00:16:19.486 --> 00:16:21.156 A:middle
pan gesture recognizer handling

00:16:21.156 --> 00:16:23.136 A:middle
code from before, so I'm just

00:16:23.136 --> 00:16:24.396 A:middle
going to quickly summarize what

00:16:24.396 --> 00:16:24.756 A:middle
these do.

00:16:25.426 --> 00:16:26.016 A:middle
So, for

00:16:26.016 --> 00:16:27.356 A:middle
startInteractiveTransition this

00:16:27.356 --> 00:16:28.536 A:middle
is called when your gesture

00:16:28.536 --> 00:16:29.846 A:middle
begins and it's just going to

00:16:29.846 --> 00:16:30.926 A:middle
initiate the transition if it

00:16:30.926 --> 00:16:32.676 A:middle
isn't running, pause all of your

00:16:32.676 --> 00:16:34.506 A:middle
animators uniformly, and save

00:16:34.506 --> 00:16:36.096 A:middle
any relative progress made by

00:16:36.096 --> 00:16:36.276 A:middle
them.

00:16:38.416 --> 00:16:39.766 A:middle
UpdateInteractiveTransition is

00:16:39.766 --> 00:16:41.556 A:middle
going to scrub your animators

00:16:41.556 --> 00:16:43.936 A:middle
uniformly relative to the

00:16:43.936 --> 00:16:45.366 A:middle
distance your finger travels and

00:16:45.406 --> 00:16:47.226 A:middle
any progress that your animators

00:16:47.226 --> 00:16:48.486 A:middle
made prior to being interrupted.

00:16:49.466 --> 00:16:50.396 A:middle
And then finally, when your

00:16:50.396 --> 00:16:51.286 A:middle
finger is lifted we just call

00:16:51.286 --> 00:16:52.666 A:middle
continue animation on all your

00:16:52.666 --> 00:16:53.876 A:middle
animators conditionally

00:16:53.876 --> 00:16:54.876 A:middle
reversing them based on the

00:16:54.876 --> 00:16:55.736 A:middle
direction your finger was

00:16:55.736 --> 00:16:56.126 A:middle
traveling.

00:16:57.906 --> 00:16:58.716 A:middle
So, let's check this out.

00:17:00.506 --> 00:17:02.126 A:middle
So, we can drive our animation

00:17:02.216 --> 00:17:04.336 A:middle
non-interactively by tapping, we

00:17:04.336 --> 00:17:05.686 A:middle
can also interactively drive it

00:17:06.576 --> 00:17:07.886 A:middle
by pulling up or pulling down,

00:17:09.536 --> 00:17:11.696 A:middle
and we can tap on it again while

00:17:11.696 --> 00:17:12.866 A:middle
it's running to interrupt it and

00:17:12.866 --> 00:17:13.386 A:middle
reverse it.

00:17:14.416 --> 00:17:15.846 A:middle
And we can also capture

00:17:15.846 --> 00:17:17.326 A:middle
animation while it's running and

00:17:17.326 --> 00:17:18.406 A:middle
at which point we can scrub it.

00:17:19.946 --> 00:17:21.266 A:middle
So now we've created this

00:17:21.336 --> 00:17:23.236 A:middle
infrastructure and right now we

00:17:23.236 --> 00:17:24.456 A:middle
just have a frame animation

00:17:24.456 --> 00:17:25.676 A:middle
which isn't that interesting, so

00:17:25.676 --> 00:17:26.536 A:middle
let's make this a little bit

00:17:26.536 --> 00:17:27.096 A:middle
more interesting.

00:17:29.046 --> 00:17:29.936 A:middle
So, first thing we're going to

00:17:29.936 --> 00:17:30.606 A:middle
do is we're going to add an

00:17:30.636 --> 00:17:31.396 A:middle
interactive blur.

00:17:32.596 --> 00:17:35.306 A:middle
Now in iOS 8 we introduced

00:17:35.346 --> 00:17:37.286 A:middle
UIVisualEffectView, which allows

00:17:37.286 --> 00:17:39.056 A:middle
us to add blur and vibrancy to

00:17:39.056 --> 00:17:39.696 A:middle
our view hierarchy.

00:17:39.696 --> 00:17:42.226 A:middle
And it turns out that the

00:17:42.316 --> 00:17:43.036 A:middle
effects property of

00:17:43.036 --> 00:17:43.976 A:middle
VisualEffectsView is an

00:17:44.026 --> 00:17:45.996 A:middle
animatable property so that's

00:17:45.996 --> 00:17:46.236 A:middle
great.

00:17:47.136 --> 00:17:48.196 A:middle
So, what we're going to do here

00:17:48.496 --> 00:17:49.856 A:middle
is the only code changes we're

00:17:49.856 --> 00:17:51.066 A:middle
going to make is to animate

00:17:51.066 --> 00:17:53.096 A:middle
transition if needed and we're

00:17:53.096 --> 00:17:54.146 A:middle
just going to create a new

00:17:54.146 --> 00:17:55.946 A:middle
animator for our blur, which is

00:17:55.946 --> 00:17:57.026 A:middle
going to use a critically damped

00:17:57.026 --> 00:17:57.986 A:middle
spring at least for now.

00:17:58.906 --> 00:17:59.956 A:middle
And then we're going to perform

00:17:59.956 --> 00:18:01.026 A:middle
our animations here either

00:18:01.026 --> 00:18:02.146 A:middle
setting or unsetting the blur

00:18:02.146 --> 00:18:03.736 A:middle
effect, starting our blur

00:18:03.736 --> 00:18:04.896 A:middle
animator and adding it to that

00:18:04.896 --> 00:18:06.666 A:middle
collection and here's what we

00:18:06.666 --> 00:18:06.866 A:middle
get.

00:18:13.236 --> 00:18:14.046 A:middle
So, we can now have an

00:18:14.046 --> 00:18:17.916 A:middle
interactive blur animation, but.

00:18:17.916 --> 00:18:22.336 A:middle
Let's see that again in slow

00:18:22.336 --> 00:18:24.076 A:middle
motion because I've got to be

00:18:24.076 --> 00:18:25.426 A:middle
honest with you guys, I don't

00:18:25.426 --> 00:18:26.496 A:middle
know if I'm really feeling this

00:18:26.536 --> 00:18:27.466 A:middle
blur animation right now.

00:18:28.526 --> 00:18:29.856 A:middle
I feel like it's animating

00:18:29.856 --> 00:18:30.986 A:middle
potentially a little bit too

00:18:30.986 --> 00:18:31.416 A:middle
quickly.

00:18:32.506 --> 00:18:34.076 A:middle
Now let's drive this and take a

00:18:34.076 --> 00:18:34.556 A:middle
look at it.

00:18:35.326 --> 00:18:36.316 A:middle
So maybe it looks a little

00:18:36.316 --> 00:18:37.486 A:middle
better, but it still doesn't

00:18:37.486 --> 00:18:38.086 A:middle
look quite right.

00:18:38.086 --> 00:18:40.246 A:middle
Now there are a few reasons for

00:18:40.246 --> 00:18:40.416 A:middle
this.

00:18:41.786 --> 00:18:42.986 A:middle
The first is because we're using

00:18:42.986 --> 00:18:44.386 A:middle
a critically damped spring our

00:18:44.386 --> 00:18:45.636 A:middle
blur is going to animate in too

00:18:45.636 --> 00:18:46.046 A:middle
quickly.

00:18:47.216 --> 00:18:48.476 A:middle
And because our property

00:18:48.476 --> 00:18:49.996 A:middle
animator is going to linearly

00:18:49.996 --> 00:18:51.506 A:middle
scrub it our blur is still going

00:18:51.506 --> 00:18:52.626 A:middle
to animate in a little bit too

00:18:52.626 --> 00:18:53.756 A:middle
quickly and it's going animate

00:18:53.756 --> 00:18:54.646 A:middle
out too slowly.

00:18:55.726 --> 00:18:57.026 A:middle
So, in order to fix this, we're

00:18:57.136 --> 00:18:58.096 A:middle
actually going to provide our

00:18:58.096 --> 00:18:59.336 A:middle
own custom timing curves.

00:18:59.776 --> 00:19:01.336 A:middle
So, our custom ease in function

00:19:01.336 --> 00:19:02.346 A:middle
so that our blur animates in

00:19:02.436 --> 00:19:04.256 A:middle
really slowly and a custom ease

00:19:04.256 --> 00:19:05.236 A:middle
out timing function so it

00:19:05.236 --> 00:19:06.696 A:middle
animates out really quickly.

00:19:07.476 --> 00:19:08.836 A:middle
And because these are inversions

00:19:08.836 --> 00:19:10.176 A:middle
of each other we're going to get

00:19:10.176 --> 00:19:12.096 A:middle
symmetric pacing, which means

00:19:12.096 --> 00:19:13.446 A:middle
that the path of our animation

00:19:13.446 --> 00:19:14.766 A:middle
on its way out will match that

00:19:14.766 --> 00:19:15.756 A:middle
of its path on the way in.

00:19:17.386 --> 00:19:18.286 A:middle
So, here's the code for this,

00:19:18.456 --> 00:19:19.666 A:middle
we're just creating cubic timing

00:19:19.666 --> 00:19:20.926 A:middle
parameters based on the target

00:19:20.926 --> 00:19:22.966 A:middle
state and we're going to disable

00:19:22.966 --> 00:19:24.256 A:middle
linear scrubbing here so that

00:19:24.256 --> 00:19:25.436 A:middle
our animator maintains its

00:19:25.496 --> 00:19:26.636 A:middle
pacing when we're driving it

00:19:26.636 --> 00:19:27.256 A:middle
interactively.

00:19:28.466 --> 00:19:29.416 A:middle
So, let's check this out again.

00:19:34.056 --> 00:19:34.396 A:middle
Much better.

00:19:34.846 --> 00:19:36.336 A:middle
It's really subtle, but it's

00:19:36.336 --> 00:19:37.286 A:middle
much better this time.

00:19:37.556 --> 00:19:39.216 A:middle
And let's also do that a little

00:19:39.216 --> 00:19:40.306 A:middle
bit more slowly so you can

00:19:40.306 --> 00:19:41.246 A:middle
really get a sense of what it

00:19:41.246 --> 00:19:41.626 A:middle
looks like.

00:19:47.056 --> 00:19:47.966 A:middle
And also, let's drive that

00:19:47.966 --> 00:19:48.856 A:middle
interactively so you can see

00:19:48.856 --> 00:19:49.996 A:middle
that it does indeed maintain its

00:19:50.036 --> 00:19:51.206 A:middle
pacing when you're driving it

00:19:51.206 --> 00:19:51.716 A:middle
interactively.

00:19:56.046 --> 00:19:57.666 A:middle
Cool, so now we have two

00:19:58.076 --> 00:19:59.546 A:middle
property animators with unique

00:19:59.546 --> 00:20:00.466 A:middle
timing characteristics

00:20:00.646 --> 00:20:01.626 A:middle
contributing to our overall

00:20:01.626 --> 00:20:02.166 A:middle
transition.

00:20:02.426 --> 00:20:04.006 A:middle
But let's make it a little bit

00:20:04.006 --> 00:20:04.666 A:middle
more interesting.

00:20:05.146 --> 00:20:06.526 A:middle
I'd now like to demonstrate a

00:20:06.526 --> 00:20:07.746 A:middle
technique I like to call view

00:20:07.746 --> 00:20:08.166 A:middle
morphing.

00:20:09.236 --> 00:20:10.926 A:middle
So, say that we have a label; in

00:20:10.926 --> 00:20:12.676 A:middle
this case we have a label.

00:20:12.676 --> 00:20:14.166 A:middle
It's blue, it's kind of small,

00:20:14.526 --> 00:20:16.096 A:middle
it's got a regular typeface and

00:20:16.096 --> 00:20:17.136 A:middle
let's say we want it to be a lot

00:20:17.136 --> 00:20:18.246 A:middle
bigger, maybe a different color,

00:20:18.246 --> 00:20:19.316 A:middle
maybe a heavier typeface.

00:20:19.986 --> 00:20:21.286 A:middle
What would that transition look

00:20:21.806 --> 00:20:21.906 A:middle
like?

00:20:22.556 --> 00:20:24.736 A:middle
Well this is what I call view

00:20:24.736 --> 00:20:26.036 A:middle
morphing, it's the scaling

00:20:26.036 --> 00:20:27.766 A:middle
translation and opacity blending

00:20:27.796 --> 00:20:28.586 A:middle
of two views.

00:20:29.326 --> 00:20:30.356 A:middle
So, in this case, we're going to

00:20:30.356 --> 00:20:32.016 A:middle
use UILabels, but this technique

00:20:32.016 --> 00:20:33.486 A:middle
is generally applicable to any

00:20:33.486 --> 00:20:35.006 A:middle
view or view hierarchy; not just

00:20:35.006 --> 00:20:35.386 A:middle
labels.

00:20:37.116 --> 00:20:38.546 A:middle
So, [inaudible] we're going to

00:20:38.546 --> 00:20:39.496 A:middle
take our comments label and

00:20:39.496 --> 00:20:40.656 A:middle
we're going to make it blue and

00:20:40.656 --> 00:20:41.796 A:middle
when it expands we're going to

00:20:41.796 --> 00:20:42.796 A:middle
want it to look like this.

00:20:43.066 --> 00:20:44.466 A:middle
And notice it's much darker, but

00:20:44.466 --> 00:20:45.946 A:middle
it's also slightly inset from

00:20:45.946 --> 00:20:47.066 A:middle
the top of its parent view.

00:20:48.476 --> 00:20:49.906 A:middle
And the way that we're going to

00:20:49.906 --> 00:20:50.976 A:middle
animate that is like this.

00:20:59.376 --> 00:21:00.406 A:middle
So, how are we going to build

00:21:00.406 --> 00:21:00.496 A:middle
this?

00:21:00.976 --> 00:21:02.316 A:middle
Well, UILabels don't expose any

00:21:02.316 --> 00:21:03.656 A:middle
animatable properties, but

00:21:03.656 --> 00:21:04.556 A:middle
that's okay because as I

00:21:04.556 --> 00:21:05.546 A:middle
mentioned, this is generally

00:21:05.546 --> 00:21:06.516 A:middle
application to any view or view

00:21:06.516 --> 00:21:07.556 A:middle
hierarchy, not just labels.

00:21:07.726 --> 00:21:10.406 A:middle
What we're going to do is use

00:21:10.406 --> 00:21:11.596 A:middle
UIView's oft overlooked

00:21:11.666 --> 00:21:13.526 A:middle
transform property and we're

00:21:13.526 --> 00:21:14.726 A:middle
going to compute the scale and

00:21:14.726 --> 00:21:16.246 A:middle
translation for both of our

00:21:16.246 --> 00:21:17.906 A:middle
labels so that we can blend them

00:21:17.906 --> 00:21:18.576 A:middle
into each other.

00:21:19.186 --> 00:21:20.766 A:middle
And we're also going to animate

00:21:20.766 --> 00:21:21.966 A:middle
their opacities so that we can

00:21:21.966 --> 00:21:22.866 A:middle
blend them together.

00:21:22.866 --> 00:21:25.536 A:middle
So, first thing we're going to

00:21:25.536 --> 00:21:26.626 A:middle
do is compute the scale.

00:21:27.086 --> 00:21:29.296 A:middle
It turns out this is really easy

00:21:29.296 --> 00:21:30.566 A:middle
to do, it's just a simple

00:21:30.566 --> 00:21:31.936 A:middle
dimensional ratio based on the

00:21:31.936 --> 00:21:32.836 A:middle
target dimension and your

00:21:32.836 --> 00:21:33.546 A:middle
current dimension.

00:21:33.546 --> 00:21:35.456 A:middle
And, in fact, once you computed

00:21:35.456 --> 00:21:36.976 A:middle
one of these you basically get

00:21:36.976 --> 00:21:38.136 A:middle
the other one for free by taking

00:21:38.136 --> 00:21:38.746 A:middle
the inverse.

00:21:38.746 --> 00:21:42.036 A:middle
Now computing translations is a

00:21:42.036 --> 00:21:43.576 A:middle
little bit more interesting and

00:21:43.576 --> 00:21:45.536 A:middle
this is because we're animating

00:21:45.536 --> 00:21:46.556 A:middle
our scale, which is going to

00:21:46.556 --> 00:21:47.636 A:middle
affect our bounds during the

00:21:47.636 --> 00:21:49.456 A:middle
transition, so we can't just

00:21:49.456 --> 00:21:50.796 A:middle
simply take the Y offsets.

00:21:50.796 --> 00:21:54.086 A:middle
What we can do is pre-apply that

00:21:54.086 --> 00:21:55.746 A:middle
scale of transform in order to

00:21:55.746 --> 00:21:57.406 A:middle
obtain a new value for our Y

00:21:57.406 --> 00:21:58.496 A:middle
offsets and we could use that

00:21:58.496 --> 00:21:59.256 A:middle
for our translation.

00:22:00.936 --> 00:22:01.876 A:middle
And now we're going to drive

00:22:01.876 --> 00:22:03.806 A:middle
this using three animators, a

00:22:03.806 --> 00:22:05.296 A:middle
critically damped spring to

00:22:05.296 --> 00:22:06.516 A:middle
drive our transform so that it

00:22:06.516 --> 00:22:08.136 A:middle
follows the overall path of the

00:22:08.136 --> 00:22:10.166 A:middle
transition and then ease in and

00:22:10.166 --> 00:22:11.656 A:middle
ease out animators to perform

00:22:11.656 --> 00:22:13.236 A:middle
the opacity blending, both of

00:22:13.236 --> 00:22:14.416 A:middle
which are going to scrub

00:22:14.416 --> 00:22:15.086 A:middle
nonlinearly.

00:22:15.656 --> 00:22:17.916 A:middle
And here's the code for this and

00:22:17.916 --> 00:22:19.336 A:middle
I've also omitted some of the

00:22:19.336 --> 00:22:20.246 A:middle
repetitive bits.

00:22:20.596 --> 00:22:21.726 A:middle
So, we created transform

00:22:21.726 --> 00:22:22.636 A:middle
animator, we animate the

00:22:22.636 --> 00:22:23.926 A:middle
transform of our labels.

00:22:24.396 --> 00:22:25.676 A:middle
The incoming label is getting

00:22:25.676 --> 00:22:27.396 A:middle
the identity transform and

00:22:27.396 --> 00:22:28.726 A:middle
that's because it's already been

00:22:28.726 --> 00:22:30.346 A:middle
pre-scaled and translated down

00:22:30.626 --> 00:22:32.366 A:middle
to match the bounds of the

00:22:32.426 --> 00:22:33.116 A:middle
outgoing label.

00:22:33.976 --> 00:22:35.116 A:middle
And the outgoing label is going

00:22:35.116 --> 00:22:36.086 A:middle
to get transformed such that it

00:22:36.086 --> 00:22:37.506 A:middle
matches the bounds of the

00:22:37.506 --> 00:22:39.096 A:middle
incoming label prior to it being

00:22:39.096 --> 00:22:39.496 A:middle
animated.

00:22:39.496 --> 00:22:42.086 A:middle
And then we create two property

00:22:42.086 --> 00:22:43.306 A:middle
animators here to blend our

00:22:43.306 --> 00:22:44.616 A:middle
alphas, we disable linear

00:22:44.616 --> 00:22:45.716 A:middle
scrubbing here so they maintain

00:22:45.716 --> 00:22:48.046 A:middle
their pacing and let's see what

00:22:48.046 --> 00:22:50.646 A:middle
that gets us.

00:22:51.256 --> 00:22:53.526 A:middle
So again, non-interactively we

00:22:53.526 --> 00:22:55.936 A:middle
can animate this transition, but

00:22:57.266 --> 00:22:58.686 A:middle
we can also interactively

00:22:58.686 --> 00:23:00.036 A:middle
animate it and it looks great.

00:23:02.666 --> 00:23:04.056 A:middle
And we can even animate it and

00:23:04.056 --> 00:23:05.606 A:middle
then interrupt it and it just

00:23:05.676 --> 00:23:06.126 A:middle
works.

00:23:07.706 --> 00:23:09.976 A:middle
What I think is really cool --

00:23:10.516 --> 00:23:15.606 A:middle
[ Applause ]

00:23:16.106 --> 00:23:16.676 A:middle
What I think is really cool

00:23:16.676 --> 00:23:18.436 A:middle
about this is we now have one

00:23:18.436 --> 00:23:20.056 A:middle
cohesive animated transition

00:23:20.056 --> 00:23:21.486 A:middle
that's being driven by six

00:23:21.636 --> 00:23:22.986 A:middle
different property animators,

00:23:23.416 --> 00:23:24.586 A:middle
five of which have their own

00:23:24.766 --> 00:23:25.716 A:middle
timing characteristics.

00:23:26.576 --> 00:23:27.926 A:middle
Now being able to do this prior

00:23:27.926 --> 00:23:29.466 A:middle
to property animators required a

00:23:29.626 --> 00:23:31.516 A:middle
ton of code and complexity, but

00:23:31.516 --> 00:23:32.606 A:middle
now with this infrastructure

00:23:32.606 --> 00:23:34.346 A:middle
we've set up we can use property

00:23:34.346 --> 00:23:35.526 A:middle
animators to easily achieve

00:23:35.526 --> 00:23:37.146 A:middle
these effects just by declaring

00:23:37.146 --> 00:23:38.406 A:middle
our timing characteristics and

00:23:38.406 --> 00:23:39.296 A:middle
scrubbing behaviors.

00:23:41.626 --> 00:23:42.526 A:middle
So that's how to coordinate

00:23:42.526 --> 00:23:43.146 A:middle
animations.

00:23:44.066 --> 00:23:45.226 A:middle
Now let's talk about some tips

00:23:45.226 --> 00:23:46.216 A:middle
and tricks and some additional

00:23:46.216 --> 00:23:47.616 A:middle
techniques that you can use when

00:23:47.616 --> 00:23:48.616 A:middle
you're creating animations for

00:23:48.616 --> 00:23:49.066 A:middle
users.

00:23:51.006 --> 00:23:52.346 A:middle
So, is there anyone out there

00:23:52.346 --> 00:23:53.516 A:middle
that's ever tried to animate a

00:23:53.516 --> 00:23:54.336 A:middle
corner radius before?

00:23:55.356 --> 00:23:56.566 A:middle
I imagine maybe a few of you.

00:23:57.756 --> 00:23:59.356 A:middle
So, to do this you pretty much

00:23:59.356 --> 00:24:00.606 A:middle
have to manually set your corner

00:24:00.606 --> 00:24:01.786 A:middle
radius or if you want to animate

00:24:01.786 --> 00:24:03.356 A:middle
it you have to create a CA basic

00:24:03.356 --> 00:24:04.496 A:middle
animation and set its to and

00:24:04.496 --> 00:24:05.046 A:middle
from values.

00:24:05.446 --> 00:24:08.626 A:middle
What we'd like to do is animate

00:24:08.626 --> 00:24:10.066 A:middle
our corner radius such that it's

00:24:10.066 --> 00:24:10.806 A:middle
interactive.

00:24:12.236 --> 00:24:14.846 A:middle
So, how are we going to do this?

00:24:16.136 --> 00:24:17.056 A:middle
Well I'm really happy to let you

00:24:17.056 --> 00:24:18.506 A:middle
guys know that corner radius is

00:24:18.506 --> 00:24:20.406 A:middle
now a fully animatable property

00:24:20.506 --> 00:24:20.936 A:middle
in UIKit.

00:24:21.516 --> 00:24:27.566 A:middle
[ Applause ]

00:24:28.066 --> 00:24:29.236 A:middle
Now because UIView doesn't

00:24:29.236 --> 00:24:30.356 A:middle
expose the corner radius

00:24:30.406 --> 00:24:31.776 A:middle
property you actually have to

00:24:31.776 --> 00:24:33.216 A:middle
reach into your views backing

00:24:33.216 --> 00:24:34.506 A:middle
layer to modify the corner

00:24:34.506 --> 00:24:35.896 A:middle
radius, but as long as you do

00:24:35.896 --> 00:24:37.216 A:middle
that within an animation block

00:24:37.216 --> 00:24:38.496 A:middle
we're going to implicitly create

00:24:38.496 --> 00:24:39.946 A:middle
that animation for you and it'll

00:24:39.946 --> 00:24:40.906 A:middle
be fully trackable and

00:24:40.906 --> 00:24:41.336 A:middle
scrubbable.

00:24:41.916 --> 00:24:43.106 A:middle
In fact, you can even do this

00:24:43.106 --> 00:24:44.476 A:middle
from the UIView animate method.

00:24:45.926 --> 00:24:46.746 A:middle
So that takes care of our

00:24:46.746 --> 00:24:47.746 A:middle
interactive corner radius

00:24:47.746 --> 00:24:48.296 A:middle
animation.

00:24:48.296 --> 00:24:50.006 A:middle
Now what about these two guys,

00:24:50.816 --> 00:24:52.066 A:middle
we only want to animate the top

00:24:52.066 --> 00:24:53.526 A:middle
left and right corners, so how

00:24:53.526 --> 00:24:54.186 A:middle
do we do that?

00:24:55.786 --> 00:24:56.756 A:middle
Well I'm also happy to let you

00:24:56.756 --> 00:24:57.916 A:middle
guys know we're adding a new

00:24:57.916 --> 00:24:59.506 A:middle
property to CALayer, which is

00:24:59.506 --> 00:24:59.976 A:middle
maskedCorners.

00:25:00.516 --> 00:25:05.556 A:middle
[ Applause ]

00:25:06.056 --> 00:25:06.626 A:middle
Now this allows us to

00:25:06.626 --> 00:25:07.796 A:middle
selectively choose which corners

00:25:07.796 --> 00:25:08.926 A:middle
we want to apply our corner

00:25:08.926 --> 00:25:10.356 A:middle
radius mask to, which in our

00:25:10.356 --> 00:25:11.746 A:middle
case is going to be the top left

00:25:11.746 --> 00:25:12.746 A:middle
and top right corners.

00:25:14.906 --> 00:25:16.296 A:middle
And now finally, here's the code

00:25:16.296 --> 00:25:17.626 A:middle
to do this again, omitting some

00:25:17.626 --> 00:25:18.486 A:middle
of the repetitive bits.

00:25:18.796 --> 00:25:20.416 A:middle
So, we're just creating a new

00:25:20.416 --> 00:25:21.336 A:middle
animator here, we're going to

00:25:21.336 --> 00:25:22.526 A:middle
use a linear timing function and

00:25:22.526 --> 00:25:23.606 A:middle
we're going to perform our

00:25:23.606 --> 00:25:25.246 A:middle
corner radius animations and

00:25:25.246 --> 00:25:26.156 A:middle
that's pretty much all we need

00:25:26.256 --> 00:25:28.076 A:middle
to and that gives us the

00:25:28.076 --> 00:25:28.956 A:middle
following animation.

00:25:34.076 --> 00:25:35.156 A:middle
And it's subtle, but we are

00:25:35.156 --> 00:25:36.606 A:middle
indeed interactively scrubbing

00:25:36.606 --> 00:25:37.756 A:middle
the corner radius there, which

00:25:37.756 --> 00:25:38.000 A:middle
is cool.

00:25:42.436 --> 00:25:44.576 A:middle
Now if there's one underlying

00:25:44.576 --> 00:25:46.776 A:middle
message thus far it's that it's

00:25:46.876 --> 00:25:48.456 A:middle
really important for all your

00:25:48.456 --> 00:25:50.076 A:middle
animators to share the same unit

00:25:50.076 --> 00:25:50.576 A:middle
duration.

00:25:51.146 --> 00:25:52.466 A:middle
This makes scrubbing them really

00:25:52.546 --> 00:25:54.046 A:middle
easy and it makes it possible to

00:25:54.046 --> 00:25:55.206 A:middle
uniformly scrub them.

00:25:56.626 --> 00:25:58.406 A:middle
But, you know, sometimes it's

00:25:58.406 --> 00:25:59.266 A:middle
kind of useful to have an

00:25:59.266 --> 00:26:00.646 A:middle
animation that finishes a little

00:26:00.646 --> 00:26:02.156 A:middle
early or one that maybe starts

00:26:02.156 --> 00:26:02.726 A:middle
with a delay.

00:26:03.756 --> 00:26:06.656 A:middle
And an example this could be in

00:26:06.656 --> 00:26:08.396 A:middle
the following animation where if

00:26:08.396 --> 00:26:09.576 A:middle
you notice the Details button

00:26:09.576 --> 00:26:10.806 A:middle
here it animates in about

00:26:10.806 --> 00:26:12.796 A:middle
halfway through is when it

00:26:12.796 --> 00:26:13.236 A:middle
starts.

00:26:13.626 --> 00:26:14.976 A:middle
And it's fully animated out

00:26:14.976 --> 00:26:16.336 A:middle
around that same halfway point.

00:26:17.646 --> 00:26:19.416 A:middle
And if we try this interactively

00:26:19.416 --> 00:26:21.106 A:middle
you can really see it, so it

00:26:21.106 --> 00:26:22.316 A:middle
just starts animating at this

00:26:22.316 --> 00:26:25.496 A:middle
point and it's fully animated

00:26:25.496 --> 00:26:26.616 A:middle
out right around there.

00:26:27.696 --> 00:26:29.466 A:middle
And if you look across UIKit you

00:26:29.466 --> 00:26:30.926 A:middle
can actually see a lot of places

00:26:30.926 --> 00:26:31.746 A:middle
where we do this.

00:26:31.986 --> 00:26:34.116 A:middle
In fact, UINavigationBar since

00:26:34.216 --> 00:26:36.066 A:middle
iOS 7 has had this effect when

00:26:36.066 --> 00:26:37.626 A:middle
you drive that animation

00:26:37.626 --> 00:26:38.266 A:middle
interactively.

00:26:40.116 --> 00:26:41.676 A:middle
So, we could create an animator

00:26:41.676 --> 00:26:43.236 A:middle
with reduced duration or we

00:26:43.236 --> 00:26:44.466 A:middle
could use a delay factor here,

00:26:44.846 --> 00:26:45.566 A:middle
but that's really going to

00:26:45.566 --> 00:26:46.786 A:middle
complicate our scrubbing code.

00:26:47.176 --> 00:26:48.666 A:middle
It turns out there's a much more

00:26:48.666 --> 00:26:49.856 A:middle
elegant solution here and that

00:26:49.856 --> 00:26:51.706 A:middle
is using keyframe animations.

00:26:52.776 --> 00:26:54.226 A:middle
So, if we look at the UIView

00:26:54.226 --> 00:26:55.436 A:middle
headers we see the following two

00:26:55.436 --> 00:26:56.256 A:middle
keyframe methods.

00:26:56.956 --> 00:26:57.776 A:middle
And I'd like to draw your

00:26:57.776 --> 00:26:59.336 A:middle
attention to RelativeStartTime

00:26:59.336 --> 00:27:00.506 A:middle
and RelativeDuration.

00:27:01.146 --> 00:27:02.096 A:middle
So, in order to create this

00:27:02.096 --> 00:27:04.546 A:middle
effect, we perform a keyframe

00:27:04.546 --> 00:27:06.166 A:middle
animation inside of our property

00:27:06.166 --> 00:27:07.956 A:middle
animator, so we call

00:27:07.956 --> 00:27:09.786 A:middle
UIView.animateKeyframes with a

00:27:09.786 --> 00:27:11.206 A:middle
relative duration of zero.

00:27:11.726 --> 00:27:12.866 A:middle
And what this means is our

00:27:12.866 --> 00:27:14.356 A:middle
keyframe animation will inherit

00:27:14.516 --> 00:27:15.696 A:middle
the duration of its outer

00:27:15.696 --> 00:27:17.726 A:middle
property animator and in fact,

00:27:17.886 --> 00:27:19.516 A:middle
if you nest animations like this

00:27:19.786 --> 00:27:20.806 A:middle
you'll get this inheritance

00:27:20.806 --> 00:27:21.776 A:middle
behavior for free.

00:27:21.856 --> 00:27:22.936 A:middle
So, this can be really useful if

00:27:22.936 --> 00:27:23.856 A:middle
you're not using property

00:27:23.856 --> 00:27:24.376 A:middle
animators.

00:27:26.276 --> 00:27:27.826 A:middle
Now when we expand our comments

00:27:27.826 --> 00:27:28.976 A:middle
view we want that animation to

00:27:28.976 --> 00:27:29.976 A:middle
start late so we're going to use

00:27:29.976 --> 00:27:31.996 A:middle
a relative start time of 0.5 and

00:27:32.346 --> 00:27:33.286 A:middle
we're going to compensate for

00:27:33.286 --> 00:27:34.136 A:middle
that by using a relative

00:27:34.136 --> 00:27:35.346 A:middle
duration of 0.5.

00:27:35.926 --> 00:27:37.556 A:middle
And when we collapse it we're

00:27:37.556 --> 00:27:38.426 A:middle
going to use a relative start

00:27:38.426 --> 00:27:39.596 A:middle
time of zero because we want it

00:27:39.596 --> 00:27:41.306 A:middle
to immediately begin or we use a

00:27:41.306 --> 00:27:43.966 A:middle
relative duration of 0.5 so that

00:27:43.966 --> 00:27:44.786 A:middle
it finishes early.

00:27:45.706 --> 00:27:46.406 A:middle
And I'd like to draw your

00:27:46.406 --> 00:27:47.416 A:middle
attention to these two

00:27:47.416 --> 00:27:48.176 A:middle
parameters here.

00:27:48.786 --> 00:27:49.786 A:middle
So, you don't have to use a

00:27:49.786 --> 00:27:50.986 A:middle
linear timing function for your

00:27:50.986 --> 00:27:52.796 A:middle
keyframe animations you can use

00:27:52.976 --> 00:27:54.526 A:middle
any timing function you want,

00:27:54.666 --> 00:27:56.176 A:middle
including your own custom timing

00:27:56.176 --> 00:27:56.646 A:middle
functions.

00:27:57.216 --> 00:27:58.186 A:middle
And if you have multiple

00:27:58.186 --> 00:27:59.626 A:middle
keyframes here, which we don't,

00:28:00.076 --> 00:28:01.406 A:middle
you could actually interpolate

00:28:01.446 --> 00:28:02.896 A:middle
them using the options parameter

00:28:03.986 --> 00:28:05.236 A:middle
or control the way that they're

00:28:05.236 --> 00:28:06.466 A:middle
interpolated using the options

00:28:06.466 --> 00:28:06.816 A:middle
parameter.

00:28:06.816 --> 00:28:12.486 A:middle
Now lastly, I'd like to talk a

00:28:12.486 --> 00:28:14.036 A:middle
little bit about additive

00:28:14.036 --> 00:28:14.546 A:middle
animations.

00:28:16.416 --> 00:28:17.456 A:middle
So, additive animations are

00:28:17.456 --> 00:28:19.436 A:middle
really powerful and I find them

00:28:19.436 --> 00:28:20.656 A:middle
really interesting because they

00:28:20.656 --> 00:28:23.226 A:middle
allow us to modify or to animate

00:28:23.226 --> 00:28:25.196 A:middle
a single property of a view with

00:28:25.196 --> 00:28:26.856 A:middle
multiple simultaneously running

00:28:26.956 --> 00:28:27.476 A:middle
animations.

00:28:28.476 --> 00:28:31.266 A:middle
Now for this demonstration the

00:28:32.236 --> 00:28:34.626 A:middle
sort of point of it is that I'd

00:28:34.696 --> 00:28:36.066 A:middle
like to demonstrate how to think

00:28:36.066 --> 00:28:37.346 A:middle
a little bit more additively

00:28:37.416 --> 00:28:38.396 A:middle
when we're designing and

00:28:38.396 --> 00:28:39.316 A:middle
building our animations.

00:28:39.826 --> 00:28:40.496 A:middle
So, let's say that we have a

00:28:40.496 --> 00:28:41.986 A:middle
square and let's say that we'd

00:28:41.986 --> 00:28:43.756 A:middle
like to animate it by 360

00:28:43.756 --> 00:28:44.746 A:middle
degrees times 10.

00:28:45.136 --> 00:28:45.946 A:middle
That animation might look

00:28:45.946 --> 00:28:46.756 A:middle
something like this.

00:28:50.706 --> 00:28:51.706 A:middle
Now you might be thinking well

00:28:51.706 --> 00:28:53.646 A:middle
that's just as easy as animating

00:28:53.646 --> 00:28:56.136 A:middle
the transform our view and you

00:28:56.136 --> 00:28:57.216 A:middle
wouldn't actually be wrong.

00:28:58.396 --> 00:28:59.876 A:middle
But code such as this, which is

00:28:59.876 --> 00:29:01.336 A:middle
animating our view by 20 pi

00:29:01.336 --> 00:29:03.446 A:middle
radians, does not produce that

00:29:03.446 --> 00:29:03.916 A:middle
animation.

00:29:04.926 --> 00:29:06.336 A:middle
It actually produces this

00:29:06.336 --> 00:29:06.766 A:middle
animation.

00:29:07.306 --> 00:29:10.676 A:middle
Did you see it?

00:29:10.676 --> 00:29:14.886 A:middle
Well, it actually didn't animate

00:29:15.006 --> 00:29:16.346 A:middle
and there's a really good reason

00:29:16.346 --> 00:29:16.696 A:middle
for that.

00:29:17.666 --> 00:29:18.896 A:middle
That's because Core Animation

00:29:18.966 --> 00:29:20.186 A:middle
only cares about the total

00:29:20.186 --> 00:29:21.026 A:middle
displacement when you're

00:29:21.026 --> 00:29:22.256 A:middle
animating the transform of your

00:29:22.256 --> 00:29:22.476 A:middle
view.

00:29:23.266 --> 00:29:24.996 A:middle
So, in this case, the target

00:29:24.996 --> 00:29:26.656 A:middle
rotational value, which is 20 pi

00:29:26.656 --> 00:29:28.406 A:middle
radians, is the same orientation

00:29:28.406 --> 00:29:30.206 A:middle
as the current rotational value.

00:29:30.886 --> 00:29:32.096 A:middle
So, the total displacement there

00:29:32.096 --> 00:29:33.106 A:middle
is actually zero.

00:29:34.496 --> 00:29:35.916 A:middle
Now Core Animation will actually

00:29:36.126 --> 00:29:37.306 A:middle
produce an animation for you,

00:29:37.476 --> 00:29:38.726 A:middle
but it's to and from values are

00:29:38.726 --> 00:29:39.616 A:middle
going to be the same.

00:29:40.736 --> 00:29:42.106 A:middle
And you know a similar problem

00:29:42.106 --> 00:29:43.786 A:middle
exists if you try to rotate a

00:29:43.786 --> 00:29:44.986 A:middle
view by 180 degrees

00:29:45.046 --> 00:29:46.986 A:middle
counterclockwise by specifying

00:29:46.986 --> 00:29:48.046 A:middle
negative pi radians.

00:29:49.066 --> 00:29:50.566 A:middle
And that's because Core

00:29:50.566 --> 00:29:52.086 A:middle
Animation because it only cares

00:29:52.086 --> 00:29:53.866 A:middle
about total displacement is

00:29:53.866 --> 00:29:54.896 A:middle
going to look for the shortest

00:29:55.256 --> 00:29:56.246 A:middle
path, which when ambiguous,

00:29:56.246 --> 00:29:57.556 A:middle
which it is here, will be

00:29:57.726 --> 00:29:58.296 A:middle
clockwise.

00:29:58.296 --> 00:30:00.976 A:middle
So, how do we do this?

00:30:01.086 --> 00:30:03.266 A:middle
Well we could drop down a core

00:30:03.266 --> 00:30:04.596 A:middle
animation and create our own CA

00:30:04.596 --> 00:30:06.486 A:middle
basic animation and manually set

00:30:06.486 --> 00:30:07.566 A:middle
our to and from values and

00:30:07.566 --> 00:30:08.576 A:middle
that's perfectly fine and would

00:30:08.576 --> 00:30:08.826 A:middle
work.

00:30:09.436 --> 00:30:11.606 A:middle
But we wouldn't get the tracking

00:30:11.606 --> 00:30:12.576 A:middle
and scrubbing behavior from

00:30:12.576 --> 00:30:13.496 A:middle
property animators.

00:30:14.136 --> 00:30:15.336 A:middle
And it also would make this

00:30:15.406 --> 00:30:16.836 A:middle
example much less interesting.

00:30:18.336 --> 00:30:20.216 A:middle
What we could do is we could

00:30:20.386 --> 00:30:21.996 A:middle
decompose this into several

00:30:21.996 --> 00:30:23.786 A:middle
smaller additive rotational

00:30:23.826 --> 00:30:25.446 A:middle
animations and animate them all

00:30:25.446 --> 00:30:26.656 A:middle
together to create our desired

00:30:26.656 --> 00:30:27.006 A:middle
effect.

00:30:27.976 --> 00:30:30.166 A:middle
So, it turns out transform is an

00:30:30.166 --> 00:30:31.506 A:middle
additively animatable property

00:30:32.036 --> 00:30:33.536 A:middle
as long as it's affine along

00:30:33.536 --> 00:30:35.236 A:middle
with frame, bound, center, and

00:30:35.236 --> 00:30:35.646 A:middle
position.

00:30:37.596 --> 00:30:39.456 A:middle
So, in our solution we're

00:30:39.456 --> 00:30:40.896 A:middle
actually going to create 20

00:30:41.266 --> 00:30:43.816 A:middle
animations altogether and each

00:30:43.816 --> 00:30:44.956 A:middle
animation is going to animate

00:30:45.026 --> 00:30:47.356 A:middle
for 180 degrees and altogether

00:30:47.356 --> 00:30:49.176 A:middle
they're going to contribute to

00:30:49.176 --> 00:30:50.166 A:middle
this following animation.

00:30:51.886 --> 00:30:53.136 A:middle
Now what's kind of cool is we

00:30:53.136 --> 00:30:55.056 A:middle
actually have 20 animations

00:30:55.196 --> 00:30:56.606 A:middle
running simultaneously here.

00:30:57.586 --> 00:30:58.756 A:middle
And I'm not suggesting that this

00:30:58.756 --> 00:31:02.826 A:middle
is a good idea generally, but it

00:31:02.916 --> 00:31:04.296 A:middle
does help us think a little bit

00:31:04.296 --> 00:31:06.146 A:middle
more additively when we're

00:31:06.496 --> 00:31:07.936 A:middle
designing and composing and

00:31:07.936 --> 00:31:08.996 A:middle
creating our animations.

00:31:09.046 --> 00:31:10.546 A:middle
So, the point of this is to

00:31:10.816 --> 00:31:12.446 A:middle
consider how you can chain many

00:31:12.446 --> 00:31:14.806 A:middle
animations together or compose

00:31:14.806 --> 00:31:16.256 A:middle
together to create interesting

00:31:16.256 --> 00:31:16.906 A:middle
transitions.

00:31:18.616 --> 00:31:21.296 A:middle
So today, we learned about how

00:31:21.296 --> 00:31:22.316 A:middle
to make animations fully

00:31:22.316 --> 00:31:23.596 A:middle
interactive and interruptible

00:31:23.596 --> 00:31:24.746 A:middle
using some modern techniques.

00:31:25.696 --> 00:31:26.746 A:middle
We also talked about how to

00:31:26.746 --> 00:31:28.166 A:middle
coordinate several animations

00:31:28.166 --> 00:31:29.816 A:middle
together that all have unique

00:31:29.916 --> 00:31:30.696 A:middle
timing functions.

00:31:31.446 --> 00:31:33.226 A:middle
And we looked at some techniques

00:31:33.226 --> 00:31:34.756 A:middle
in order to help us create some

00:31:34.756 --> 00:31:36.066 A:middle
really awesome animations for

00:31:36.066 --> 00:31:36.546 A:middle
our users.

00:31:37.266 --> 00:31:38.716 A:middle
It is my hope that you walk away

00:31:38.716 --> 00:31:40.846 A:middle
from this presentation and

00:31:41.046 --> 00:31:42.136 A:middle
consider making more of your

00:31:42.136 --> 00:31:43.356 A:middle
animated transitions fully

00:31:43.356 --> 00:31:44.606 A:middle
interactive and interruptible.

00:31:45.186 --> 00:31:47.196 A:middle
So, we have a few related

00:31:47.196 --> 00:31:47.696 A:middle
sessions.

00:31:47.936 --> 00:31:49.386 A:middle
If you've missed any of these I

00:31:49.386 --> 00:31:50.276 A:middle
encourage you to watch them

00:31:50.276 --> 00:31:52.726 A:middle
online and there are a few

00:31:52.726 --> 00:31:54.296 A:middle
interesting sessions from prior

00:31:54.296 --> 00:31:54.796 A:middle
years.

00:31:55.066 --> 00:31:56.046 A:middle
So, if you're interested in

00:31:56.046 --> 00:31:57.536 A:middle
animations, I highly encourage

00:31:57.536 --> 00:31:58.366 A:middle
you to check these out,

00:31:58.806 --> 00:32:00.076 A:middle
especially last year's session

00:32:00.076 --> 00:32:00.806 A:middle
where we introduced

00:32:00.806 --> 00:32:01.926 A:middle
UIViewPropertyAnimator.

00:32:02.766 --> 00:32:04.006 A:middle
For more information, please

00:32:04.006 --> 00:32:05.136 A:middle
feel free to visit the following

00:32:05.136 --> 00:32:07.766 A:middle
URL and thank you all very much.

00:32:08.516 --> 00:32:12.830 A:middle
[ Applause ]