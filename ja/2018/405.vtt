WEBVTT

00:00:07.107 --> 00:00:16.617 align:start position:43% line:-1
(音楽)

00:00:23.123 --> 00:00:28.061 align:start position:43% line:-1
(拍手)

00:00:32.799 --> 00:00:33.934 align:start position:41% line:-1
こんにちは

00:00:34.434 --> 00:00:37.604 align:start position:18% line:-2
Darwin Runtimeチームの
シェーンです

00:00:37.704 --> 00:00:38.839 align:start position:38% line:-1
今日のテーマは

00:00:38.939 --> 00:00:41.508 align:start position:30% line:-2
ロギングを使った
パフォーマンス計測です

00:00:42.509 --> 00:00:46.380 align:start position:36% line:-2
ご存じのとおり
パフォーマンスは

00:00:46.580 --> 00:00:50.717 align:start position:29% line:-2
ユーザエクスペリエンスの
カギを握るものです

00:00:50.817 --> 00:00:56.390 align:start position:27% line:-2
素早くダイナミックな動作や
応答の速さが求められます

00:00:57.424 --> 00:00:58.125 align:start position:45% line:-1
でも…

00:00:59.393 --> 00:01:01.295 align:start position:30% line:-1
ソフトウェアは複雑です

00:00:59.393 --> 00:01:01.295 align:start position:30% line:-1
ソフトウェアは複雑です

00:01:01.695 --> 00:01:07.367 align:start position:27% line:-2
アプリケーションの動作には
多くのプログラムが関係し

00:01:08.001 --> 00:01:13.040 align:start position:29% line:-2
時に予想外の
パフォーマンスを生みます

00:01:13.640 --> 00:01:18.679 align:start position:30% line:-2
しかし そうした成果を
発見するためには

00:01:18.779 --> 00:01:22.850 align:start position:30% line:-2
プログラムへの
深い理解が欠かせません

00:01:22.983 --> 00:01:26.320 align:start position:32% line:-2
“このコードは
いつ実行されるのか”

00:01:26.420 --> 00:01:28.856 align:start position:38% line:-2
“要する時間は
どれくらいか”

00:01:29.456 --> 00:01:34.194 align:start position:32% line:-2
ここで優れたツールが
求められるわけです

00:01:34.428 --> 00:01:38.265 align:start position:27% line:-2
我々は
より優れたツールを提供して

00:01:38.365 --> 00:01:42.402 align:start position:32% line:-2
生産性の向上に
貢献したいと思います

00:01:42.669 --> 00:01:45.372 align:start position:29% line:-1
そこで今日 紹介するのは

00:01:45.506 --> 00:01:48.475 align:start position:30% line:-2
signpostという
ツールです

00:01:48.675 --> 00:01:52.346 align:start position:34% line:-2
新たにOSLogに
加わったもので

00:01:52.613 --> 00:01:56.283 align:start position:29% line:-1
macOSで使用できます

00:01:56.383 --> 00:02:01.088 align:start position:29% line:-2
他にもiOSやSwift
Ｃ言語に対応

00:01:56.383 --> 00:02:01.088 align:start position:29% line:-2
他にもiOSやSwift
Ｃ言語に対応

00:02:01.655 --> 00:02:05.292 align:start position:23% line:-2
更にInstrumentsでも
使えます

00:02:05.392 --> 00:02:08.428 align:start position:29% line:-2
つまりsignpostの
データを取り込んで

00:02:08.829 --> 00:02:12.399 align:start position:34% line:-2
プログラムの動きを
確認できるのです

00:02:13.367 --> 00:02:15.836 align:start position:29% line:-1
まずは歴史をお話しします

00:02:16.470 --> 00:02:19.273 align:start position:32% line:-2
OSLogは２年前に
登場しました

00:02:19.606 --> 00:02:22.843 align:start position:32% line:-1
最新のロギング機能で

00:02:22.943 --> 00:02:26.280 align:start position:32% line:-2
システムから
デバッグ情報を得ます

00:02:26.613 --> 00:02:31.885 align:start position:29% line:-2
効率性とプライバシーを
考慮して作られたものです

00:02:32.653 --> 00:02:35.055 align:start position:25% line:-1
これがOSLogのコードです

00:02:35.222 --> 00:02:39.426 align:start position:25% line:-2
“Hello world”を
表示させてみます

00:02:40.294 --> 00:02:43.564 align:start position:32% line:-2
パフォーマンスの
ユースケースのために

00:02:43.664 --> 00:02:47.034 align:start position:29% line:-2
signpostは
OSLogのAPIを拡張

00:02:47.134 --> 00:02:49.102 align:start position:36% line:-2
パフォーマンスに
関する情報が

00:02:49.303 --> 00:02:51.738 align:start position:34% line:-2
デベロッパツールに
統合されます

00:02:51.972 --> 00:02:57.344 align:start position:18% line:-2
そこでコードを加え
Instrumentsを実行させます

00:02:58.412 --> 00:03:02.316 align:start position:20% line:-2
プログラムの動きと
signpostのアクティビティが

00:02:58.412 --> 00:03:02.316 align:start position:20% line:-2
プログラムの動きと
signpostのアクティビティが

00:03:02.416 --> 00:03:05.786 align:start position:29% line:-1
時系列で可視化されました

00:03:05.953 --> 00:03:12.192 align:start position:21% line:-2
下部はsignpostのデータを
統計分析した表で

00:03:12.292 --> 00:03:17.531 align:start position:27% line:-2
プログラムの動作を
多角的に見ることができます

00:03:18.398 --> 00:03:22.269 align:start position:29% line:-2
今回はsignpostの
使い方とメリットを

00:03:22.369 --> 00:03:24.304 align:start position:39% line:-1
お話しします

00:03:24.471 --> 00:03:28.675 align:start position:21% line:-2
その後 Instrumentsと
signpostによる情報表示を

00:03:28.775 --> 00:03:32.145 align:start position:29% line:-1
実際にご覧に入れましょう

00:03:34.014 --> 00:03:35.015 align:start position:43% line:-1
まずは―

00:03:36.850 --> 00:03:39.253 align:start position:34% line:-1
簡単な例を用います

00:03:39.653 --> 00:03:42.823 align:start position:27% line:-2
これが あなたの
アプリケーションだとします

00:03:43.056 --> 00:03:46.293 align:start position:34% line:-2
インターフェイスの
リフレッシュに

00:03:46.393 --> 00:03:49.663 align:start position:36% line:-2
要する時間を
調べてみましょう

00:03:49.963 --> 00:03:55.335 align:start position:27% line:-2
そのために画像を読み込ませ
表示してみます

00:03:56.303 --> 00:04:01.375 align:start position:30% line:-2
アセットの取得中は
このようにシンプルです

00:03:56.303 --> 00:04:01.375 align:start position:30% line:-2
アセットの取得中は
このようにシンプルです

00:04:01.475 --> 00:04:04.578 align:start position:29% line:-2
取得が終われば
リフレッシュが完了します

00:04:05.345 --> 00:04:10.784 align:start position:21% line:-2
signpostにより タスクの
始まりと終わりを記録し

00:04:10.884 --> 00:04:14.755 align:start position:32% line:-2
２つのログイベントを
結びつけます

00:04:15.222 --> 00:04:19.358 align:start position:29% line:-2
os signpostの
関数呼び出しを使います

00:04:19.660 --> 00:04:23.530 align:start position:27% line:-2
BEGINとENDの
２つの関数が表示されました

00:04:23.630 --> 00:04:27.734 align:start position:32% line:-2
BEGINのほうには
矢印の下に“b”と

00:04:27.835 --> 00:04:31.038 align:start position:34% line:-2
ENDのほうには
“e”と示しました

00:04:31.438 --> 00:04:38.045 align:start position:29% line:-2
この２つのポイントから
経過時間を計算するのです

00:04:38.912 --> 00:04:39.713 align:start position:39% line:-1
いいですか？

00:04:40.080 --> 00:04:44.384 align:start position:25% line:-2
コード上 アルゴリズム実装は
シンプルです

00:04:44.484 --> 00:04:47.988 align:start position:34% line:-2
インターフェイスの
各エレメントに―

00:04:48.088 --> 00:04:51.792 align:start position:32% line:-2
アセットを取得し
これを計測するのです

00:04:52.292 --> 00:04:55.162 align:start position:27% line:-2
signpostを
コードベースに組み込むため

00:04:55.262 --> 00:04:59.967 align:start position:29% line:-2
os.signpostを
インポートします

00:05:00.434 --> 00:05:04.371 align:start position:25% line:-2
signpostは
OSLogの機能の一部なので

00:05:04.471 --> 00:05:06.507 align:start position:29% line:-1
ログハンドルを作成します

00:05:06.740 --> 00:05:10.611 align:start position:29% line:-2
ここではサブシステムと
カテゴリが引数になります

00:05:11.111 --> 00:05:15.315 align:start position:27% line:-2
プロジェクトを通して
サブシステムは同一でしょう

00:05:15.449 --> 00:05:16.817 align:start position:32% line:-1
バンドルIDのように

00:05:16.917 --> 00:05:21.555 align:start position:29% line:-2
コンポーネントや
フレームワークを示します

00:05:22.723 --> 00:05:28.862 align:start position:25% line:-2
カテゴリはsignpostと
関連付けるために必要です

00:05:29.062 --> 00:05:31.932 align:start position:30% line:-1
後ほど また登場します

00:05:33.200 --> 00:05:34.902 align:start position:30% line:-1
ログハンドルを作ったら

00:05:35.302 --> 00:05:39.907 align:start position:27% line:-2
BEGINとENDの２つの
CALL文を設定

00:05:40.140 --> 00:05:43.210 align:start position:32% line:-2
ここにログハンドルを
渡します

00:05:43.310 --> 00:05:47.014 align:start position:32% line:-2
３つ目の引数は
signpost名で

00:05:47.714 --> 00:05:51.652 align:start position:36% line:-2
経過時間を示す
文字列が入ります

00:05:51.752 --> 00:05:55.055 align:start position:34% line:-2
今回 計測する
処理時間のことです

00:05:55.622 --> 00:06:00.494 align:start position:23% line:-2
この文字列は
BEGINやENDの目印として

00:05:55.622 --> 00:06:00.494 align:start position:23% line:-2
この文字列は
BEGINやENDの目印として

00:06:00.594 --> 00:06:04.798 align:start position:27% line:-1
一致させるために使われます

00:06:04.965 --> 00:06:08.202 align:start position:29% line:-1
時系列では こうなります

00:06:08.402 --> 00:06:12.172 align:start position:25% line:-2
各タスクの始めに
os signpostを置き

00:06:12.272 --> 00:06:14.875 align:start position:25% line:-2
各タスクの最後にも
os signpostを置く

00:06:14.975 --> 00:06:19.346 align:start position:25% line:-2
BEGINとENDの文字列が
呼応するため

00:06:19.446 --> 00:06:21.248 align:start position:34% line:-1
２つは結びつきます

00:06:22.182 --> 00:06:24.151 align:start position:30% line:-1
では 各タスクではなく

00:06:24.251 --> 00:06:28.188 align:start position:29% line:-2
リフレッシュ全体に要した
時間を計るには？

00:06:28.422 --> 00:06:34.628 align:start position:27% line:-2
BEGINとENDのペアを
もう１つコードに加えるだけ

00:06:34.761 --> 00:06:35.596 align:start position:41% line:-1
簡単ですね

00:06:35.896 --> 00:06:39.666 align:start position:29% line:-2
今回は文字列と
signpost名を変え

00:06:39.766 --> 00:06:45.305 align:start position:27% line:-2
ループとは異なる時間を
計測するように設定しました

00:06:47.140 --> 00:06:48.175 align:start position:39% line:-1
時系列では―

00:06:50.143 --> 00:06:52.946 align:start position:25% line:-1
２つのsignpostを追加

00:06:54.081 --> 00:06:59.152 align:start position:34% line:-2
リフレッシュすると
文字列がマッチし

00:06:59.653 --> 00:07:01.722 align:start position:30% line:-1
２つの点が結びつきます

00:06:59.653 --> 00:07:01.722 align:start position:30% line:-1
２つの点が結びつきます

00:07:02.789 --> 00:07:06.026 align:start position:32% line:-2
たとえが
少し難しいのですが…

00:07:06.126 --> 00:07:09.763 align:start position:36% line:-2
プログラムは
１つ完了してから

00:07:09.863 --> 00:07:12.065 align:start position:30% line:-1
次に進むとは限りません

00:07:12.165 --> 00:07:17.504 align:start position:27% line:-2
非同期的に 多くのタスクが
進行することもあります

00:07:17.738 --> 00:07:20.774 align:start position:36% line:-1
そのような場合は

00:07:20.874 --> 00:07:26.079 align:start position:27% line:-2
最終的にすべて完了するよう
タスクを進めます

00:07:26.180 --> 00:07:30.517 align:start position:32% line:-2
これらのタスクも
同時進行になり得ます

00:07:31.118 --> 00:07:35.322 align:start position:21% line:-2
ですから 他のsignpostと
区別するため

00:07:35.422 --> 00:07:38.525 align:start position:38% line:-2
情報を追加する
必要があります

00:07:39.092 --> 00:07:43.597 align:start position:29% line:-2
ここまでは
最初と最後にマッチする―

00:07:43.697 --> 00:07:46.900 align:start position:36% line:-2
文字列だけで
区別してきました

00:07:47.167 --> 00:07:53.807 align:start position:27% line:-2
これではオーバーラップする
処理時間を区別できません

00:07:54.141 --> 00:07:59.046 align:start position:23% line:-2
そこでsignpost IDを
追加してみましょう

00:08:00.180 --> 00:08:04.918 align:start position:29% line:-2
このIDにより
同種のオペレーションでも

00:08:05.018 --> 00:08:07.921 align:start position:34% line:-1
個々を区別できます

00:08:08.255 --> 00:08:12.492 align:start position:21% line:-2
同時進行でも
signpost IDが異なれば

00:08:12.593 --> 00:08:14.862 align:start position:30% line:-1
別々の時間を計算します

00:08:15.028 --> 00:08:19.466 align:start position:32% line:-2
最初と最後のIDさえ
そろえておけば

00:08:19.566 --> 00:08:22.903 align:start position:29% line:-1
２つは自動で結びつきます

00:08:23.504 --> 00:08:28.141 align:start position:29% line:-2
IDはコンストラクタでも
生成できますが

00:08:28.709 --> 00:08:32.212 align:start position:36% line:-2
オブジェクトでも
生成できます

00:08:32.513 --> 00:08:36.717 align:start position:29% line:-2
オブジェクトを
使っている場合に便利です

00:08:36.817 --> 00:08:41.621 align:start position:29% line:-2
同じインスタンス内では
同一IDが生成されるため

00:08:41.722 --> 00:08:47.127 align:start position:16% line:-2
signpost IDを格納したりする
必要もありません

00:08:48.729 --> 00:08:49.363 align:start position:43% line:-1
つまり…

00:08:50.998 --> 00:08:57.304 align:start position:16% line:-2
signpost IDは 呼び出しの際
付加的な情報を加えることで

00:08:57.838 --> 00:09:03.377 align:start position:29% line:-2
あるオペレーションの
最初と最後を関連付けます

00:08:57.838 --> 00:09:03.377 align:start position:29% line:-2
あるオペレーションの
最初と最後を関連付けます

00:09:03.644 --> 00:09:06.980 align:start position:27% line:-2
これにより
オペレーションの同時進行や

00:09:07.114 --> 00:09:09.616 align:start position:27% line:-1
所要時間の差に対応できます

00:09:12.052 --> 00:09:14.988 align:start position:38% line:-2
実際のコードを
見てみましょう

00:09:15.589 --> 00:09:21.361 align:start position:29% line:-2
同期の読み込みを
非同期の呼び出しにします

00:09:21.828 --> 00:09:24.264 align:start position:34% line:-2
アセットの取得後に
開始する―

00:09:24.364 --> 00:09:27.568 align:start position:29% line:-1
完了ハンドラを追加します

00:09:28.335 --> 00:09:34.308 align:start position:27% line:-2
全アセットの取得後も同様に
完了ハンドラを追加します

00:09:34.875 --> 00:09:38.912 align:start position:21% line:-2
ENDのos signpostを
完了の前に入れ

00:09:39.112 --> 00:09:43.217 align:start position:30% line:-2
最後にマッチするように
設定しました

00:09:45.686 --> 00:09:49.923 align:start position:32% line:-2
複数のアセット取得が
同時に進行するため

00:09:50.023 --> 00:09:52.659 align:start position:21% line:-2
それぞれに
signpost IDが必要です

00:09:52.759 --> 00:09:56.497 align:start position:30% line:-2
上の例は
コンストラクタで生成し

00:09:56.597 --> 00:10:01.001 align:start position:27% line:-2
下の例は
オブジェクトで作っています

00:09:56.597 --> 00:10:01.001 align:start position:27% line:-2
下の例は
オブジェクトで作っています

00:10:01.502 --> 00:10:04.771 align:start position:21% line:-2
そして
生成したsignpost IDを

00:10:04.972 --> 00:10:07.541 align:start position:27% line:-1
CALL文に渡せば完了です

00:10:08.976 --> 00:10:14.882 align:start position:29% line:-2
signpostは分類や
階級付けに似ています

00:10:14.982 --> 00:10:19.720 align:start position:27% line:-2
すべてのオペレーションは
ログハンドルで関連付けられ

00:10:20.020 --> 00:10:23.824 align:start position:29% line:-2
各オペレーションに
signpost名を付与

00:10:24.992 --> 00:10:29.897 align:start position:25% line:-2
タスクが同時に進行するため
signpost IDを与え

00:10:29.997 --> 00:10:35.469 align:start position:29% line:-2
個々の処理時間を
識別できるようにしました

00:10:38.071 --> 00:10:42.176 align:start position:30% line:-2
このインターフェイスは
非常に柔軟です

00:10:42.576 --> 00:10:46.246 align:start position:27% line:-2
BEGINやENDの引数や
signpost名

00:10:46.346 --> 00:10:50.117 align:start position:27% line:-2
ハンドルやIDも
自由にコントロールできます

00:10:50.651 --> 00:10:56.557 align:start position:21% line:-2
今回はBEGINとENDの引数が
同じだったため

00:10:56.790 --> 00:10:59.326 align:start position:32% line:-1
２つはマッチしました

00:10:59.426 --> 00:11:02.429 align:start position:27% line:-1
しかし分けることも可能です

00:10:59.426 --> 00:11:02.429 align:start position:27% line:-1
しかし分けることも可能です

00:11:02.663 --> 00:11:06.867 align:start position:29% line:-2
別のオブジェクトや
ソースファイルを使えます

00:11:07.234 --> 00:11:10.671 align:start position:25% line:-1
このCALL文を幅広く応用し

00:11:10.771 --> 00:11:15.442 align:start position:27% line:-2
コードにsignpostを
組み込んでみてください

00:11:17.845 --> 00:11:22.616 align:start position:25% line:-2
以上がsignpostによる
時間の計測です

00:11:22.850 --> 00:11:28.322 align:start position:27% line:-2
今度は signpostに
付加的な情報を加えるため

00:11:28.422 --> 00:11:32.659 align:start position:29% line:-2
CALL文にメタデータを
加えてみます

00:11:34.261 --> 00:11:39.399 align:start position:27% line:-2
基本のCALL文に
文字列のパラメータを足すと

00:11:39.733 --> 00:11:43.570 align:start position:32% line:-2
BEGINとENDに
情報を追加できます

00:11:44.304 --> 00:11:48.775 align:start position:32% line:-2
更に文字列は
OSLog形式なので

00:11:49.476 --> 00:11:53.013 align:start position:21% line:-1
複数のBEGINとENDにも対応

00:11:53.113 --> 00:11:57.484 align:start position:34% line:-2
signpostに
付加情報を渡せます

00:11:57.584 --> 00:12:01.889 align:start position:27% line:-2
例えば４つの整数を渡すため
“%d”を使います

00:11:57.584 --> 00:12:01.889 align:start position:27% line:-2
例えば４つの整数を渡すため
“%d”を使います

00:12:02.723 --> 00:12:08.562 align:start position:25% line:-2
これはOSLogの形式なので
多くの引数に対応します

00:12:08.662 --> 00:12:10.731 align:start position:34% line:-1
浮動小数点の数字も

00:12:10.831 --> 00:12:16.003 align:start position:29% line:-2
書式指定子を用いた指示も
システムに伝えられます

00:12:17.604 --> 00:12:21.208 align:start position:34% line:-2
動的に文字列を
呼び出すことも可能

00:12:21.642 --> 00:12:27.514 align:start position:29% line:-2
呼び出した関数や
入力された情報も渡せます

00:12:28.048 --> 00:12:32.820 align:start position:32% line:-2
一定のメモリから
文字列を参照するため

00:12:33.020 --> 00:12:37.524 align:start position:32% line:-2
人間が読める文字なら
設定は自由です

00:12:39.293 --> 00:12:43.864 align:start position:27% line:-2
Instrumentsで
表示されるものと同じなので

00:12:43.964 --> 00:12:48.235 align:start position:32% line:-2
気軽に情報を
追加してみてください

00:12:48.335 --> 00:12:51.405 align:start position:36% line:-2
すべての文字列を
表示したり

00:12:51.505 --> 00:12:55.075 align:start position:30% line:-2
付加データに
アクセスしたりできます

00:12:57.978 --> 00:12:59.379 align:start position:45% line:-1
次は―

00:12:59.479 --> 00:13:03.784 align:start position:29% line:-2
時間軸に個別のポイントを
追加する場合です

00:12:59.479 --> 00:13:03.784 align:start position:29% line:-2
時間軸に個別のポイントを
追加する場合です

00:13:04.051 --> 00:13:08.722 align:start position:23% line:-2
BEGINとENDの
signpostに加えてみます

00:13:08.822 --> 00:13:12.326 align:start position:32% line:-2
例えば 特定の時間に
縛られない―

00:13:12.426 --> 00:13:14.661 align:start position:38% line:-1
一定の時間です

00:13:14.828 --> 00:13:18.265 align:start position:21% line:-2
イベント型の
os signpostを使います

00:13:18.765 --> 00:13:23.303 align:start position:25% line:-2
コードはBEGINやENDと
同様に見えますが

00:13:23.437 --> 00:13:25.239 align:start position:38% line:-1
イベント型です

00:13:25.639 --> 00:13:28.008 align:start position:27% line:-1
１つの時点がマークされます

00:13:28.575 --> 00:13:31.278 align:start position:32% line:-1
前後関係がある場合も

00:13:31.378 --> 00:13:36.416 align:start position:27% line:-2
ユーザ行動のように
突発的な場合もあるでしょう

00:13:36.917 --> 00:13:40.454 align:start position:27% line:-1
アセット取得時の一時点です

00:13:40.687 --> 00:13:44.858 align:start position:34% line:-2
アセットの提供元に
接続した時や

00:13:45.025 --> 00:13:47.694 align:start position:27% line:-1
その一部の取得を開始した時

00:13:48.328 --> 00:13:50.931 align:start position:29% line:-1
特定の処理時間内であれば

00:13:51.031 --> 00:13:55.302 align:start position:32% line:-2
何度でも処理状況を
アップデートできます

00:13:56.336 --> 00:14:02.042 align:start position:29% line:-2
もしくはイベントの発生を
トラッキングするとします

00:13:56.336 --> 00:14:02.042 align:start position:29% line:-2
もしくはイベントの発生を
トラッキングするとします

00:14:02.142 --> 00:14:05.412 align:start position:34% line:-2
例えばユーザが
リフレッシュした時

00:14:05.746 --> 00:14:10.417 align:start position:27% line:-2
パフォーマンスに問題があり
スワイプを繰り返すと

00:14:10.584 --> 00:14:12.853 align:start position:30% line:-1
点がいくつも発生します

00:14:14.688 --> 00:14:18.992 align:start position:27% line:-2
通常signpostは
デフォルト設定されています

00:14:19.326 --> 00:14:22.596 align:start position:30% line:-2
その設定の切り替え方を
説明します

00:14:23.964 --> 00:14:27.835 align:start position:29% line:-2
我々はsignpostを
軽量化するため

00:14:27.968 --> 00:14:32.406 align:start position:32% line:-2
コンパイラの最適化に
注力しました

00:14:32.573 --> 00:14:37.678 align:start position:29% line:-2
実行時間の前にタスクが
完了するようにしたのです

00:14:37.811 --> 00:14:41.882 align:start position:21% line:-2
またInstrumentsの裏で
行う仕事を分けました

00:14:41.982 --> 00:14:46.453 align:start position:27% line:-2
つまりsignpostは
少ないリソースで済むのです

00:14:46.787 --> 00:14:50.424 align:start position:36% line:-2
コードへの影響も
小さくなります

00:14:50.924 --> 00:14:55.629 align:start position:29% line:-2
また短いタイムスパンでも
signpostを活用し

00:14:55.729 --> 00:14:59.299 align:start position:34% line:-2
細やかな計測を
行うことが可能です

00:15:00.167 --> 00:15:03.203 align:start position:29% line:-1
もちろんオフにもできます

00:15:03.303 --> 00:15:07.841 align:start position:27% line:-2
例えばコードの
オーバーヘッドを軽減する時

00:15:08.041 --> 00:15:12.446 align:start position:21% line:-2
またはsignpostカテゴリが
２つある中で

00:15:12.546 --> 00:15:16.950 align:start position:32% line:-2
一方のデバッグに
集中したい時などです

00:15:17.784 --> 00:15:21.655 align:start position:25% line:-2
その場合
OSLogの機能を活用します

00:15:21.755 --> 00:15:23.657 align:start position:30% line:-1
無効なログハンドルです

00:15:24.057 --> 00:15:27.394 align:start position:30% line:-2
これは
シンプルなハンドルです

00:15:27.794 --> 00:15:33.233 align:start position:21% line:-2
すべてのos signpostの
呼び出しに対し

00:15:33.333 --> 00:15:36.036 align:start position:29% line:-1
何もしない状態になります

00:15:36.503 --> 00:15:40.474 align:start position:29% line:-2
Ｃ言語に
このハンドルがある場合は

00:15:40.674 --> 00:15:43.243 align:start position:32% line:-1
引数も求められません

00:15:44.244 --> 00:15:48.081 align:start position:27% line:-2
ランタイムに
ハンドルを変更するだけです

00:15:49.950 --> 00:15:53.353 align:start position:32% line:-2
最初に使ったコードを
例にします

00:15:53.453 --> 00:15:56.356 align:start position:27% line:-1
１番上に初期設定があります

00:15:56.790 --> 00:16:00.661 align:start position:29% line:-1
ここに条件式を追加します

00:15:56.790 --> 00:16:00.661 align:start position:29% line:-1
ここに条件式を追加します

00:16:01.028 --> 00:16:04.865 align:start position:30% line:-2
割り当て先は
通常のコンストラクタか

00:16:04.965 --> 00:16:07.501 align:start position:34% line:-1
無効のハンドルです

00:16:09.169 --> 00:16:13.807 align:start position:21% line:-2
前者ならos signpostが
呼び出されますが

00:16:14.007 --> 00:16:18.212 align:start position:34% line:-2
後者だと
何も実行されません

00:16:18.779 --> 00:16:21.114 align:start position:36% line:-1
ご説明したとおり

00:16:21.215 --> 00:16:24.952 align:start position:23% line:-1
CALL文の内容は変更不要です

00:16:25.052 --> 00:16:27.221 align:start position:30% line:-1
変えるのは初期設定だけ

00:16:27.487 --> 00:16:31.525 align:start position:34% line:-2
ここでは環境変数の
条件を付けました

00:16:31.625 --> 00:16:35.963 align:start position:27% line:-2
デバッグする時の
Xcodeは この設定です

00:16:37.764 --> 00:16:40.067 align:start position:27% line:-1
CALL文は変更不要ですが

00:16:40.167 --> 00:16:44.471 align:start position:32% line:-2
計測に使う
固有の機能は使えます

00:16:44.571 --> 00:16:48.475 align:start position:29% line:-2
高いけど
デバッグに役立つものです

00:16:48.842 --> 00:16:51.879 align:start position:27% line:-1
ログハンドルのプロパティで

00:16:51.979 --> 00:16:55.549 align:start position:27% line:-2
signpostが オンに
なっているか確認します

00:16:55.949 --> 00:17:00.988 align:start position:29% line:-2
付加的なオペレーションを
制御するためです

00:16:55.949 --> 00:17:00.988 align:start position:29% line:-2
付加的なオペレーションを
制御するためです

00:17:02.489 --> 00:17:06.926 align:start position:29% line:-2
これまでの例は
Swiftで見せましたが

00:17:07.294 --> 00:17:11.498 align:start position:25% line:-2
signpostはＣ言語にも
対応しています

00:17:13.000 --> 00:17:16.103 align:start position:27% line:-1
お話しした全機能が使えます

00:17:16.203 --> 00:17:19.873 align:start position:25% line:-2
ログハンドルや
３つのsignpostの設定

00:17:19.973 --> 00:17:22.608 align:start position:30% line:-1
IDの付け方も同様です

00:17:22.943 --> 00:17:26.747 align:start position:29% line:-2
Ｃ言語のデベロッパ視点で
書かれた―

00:17:26.847 --> 00:17:31.151 align:start position:32% line:-2
HeaderDocも
ぜひ参照してください

00:17:32.486 --> 00:17:36.156 align:start position:25% line:-2
以上が
コードにsignpostを―

00:17:36.256 --> 00:17:39.393 align:start position:34% line:-1
組み込む方法でした

00:17:39.893 --> 00:17:44.231 align:start position:23% line:-2
次はInstrumentsでの
活用法を見てみましょう

00:17:44.565 --> 00:17:48.702 align:start position:27% line:-2
ここからは 同僚のチャドが
ご説明します

00:17:48.902 --> 00:17:49.803 align:start position:46% line:-1
では

00:17:49.903 --> 00:17:54.241 align:start position:43% line:-1
(拍手)

00:17:57.511 --> 00:17:59.546 align:start position:32% line:-1
ありがとう シェーン

00:18:00.414 --> 00:18:03.183 align:start position:23% line:-2
次は
signpostが活用できる―

00:18:03.283 --> 00:18:08.021 align:start position:23% line:-2
Instruments 10の
３つの新機能をご紹介します

00:18:08.422 --> 00:18:10.524 align:start position:23% line:-1
１つ目はos signpost

00:18:10.624 --> 00:18:12.859 align:start position:38% line:-1
記録や可視化―

00:18:12.960 --> 00:18:16.997 align:start position:25% line:-2
アプリケーション内の
アクティビティ分析ができます

00:18:17.564 --> 00:18:19.833 align:start position:18% line:-2
２つ目が
Points of Interest

00:18:19.933 --> 00:18:24.271 align:start position:34% line:-2
概要と どんな時に
便利かを説明します

00:18:25.038 --> 00:18:27.975 align:start position:32% line:-2
最後に
新しいカスタム機能と

00:18:28.075 --> 00:18:32.112 align:start position:27% line:-2
os signpostとの
使い方をお見せします

00:18:32.212 --> 00:18:35.582 align:start position:27% line:-2
signpostを活用する
ヒントになります

00:18:35.949 --> 00:18:38.652 align:start position:27% line:-1
それではデモをお見せします

00:18:42.856 --> 00:18:47.094 align:start position:27% line:-2
デモ用のアプリケーションを
用意しました

00:18:47.194 --> 00:18:49.396 align:start position:27% line:-1
Trailblazerです

00:18:49.963 --> 00:18:54.301 align:start position:32% line:-2
ハイキングスポットを
紹介するもので

00:18:54.401 --> 00:18:59.039 align:start position:34% line:-2
スクロールすると
画像が表示されます

00:18:59.873 --> 00:19:05.245 align:start position:29% line:-2
最初は白い背景が表示され
遅れて画像が現れます

00:18:59.873 --> 00:19:05.245 align:start position:29% line:-2
最初は白い背景が表示され
遅れて画像が現れます

00:19:05.345 --> 00:19:11.318 align:start position:27% line:-2
最新のアプリケーションでは
一般的な挙動と言えます

00:19:11.852 --> 00:19:15.422 align:start position:34% line:-2
パフォーマンスには
優れますが

00:19:15.522 --> 00:19:17.758 align:start position:27% line:-1
プロファイルには不向きです

00:19:18.025 --> 00:19:21.728 align:start position:34% line:-2
多くの非同期処理が
起きるためで

00:19:21.828 --> 00:19:25.899 align:start position:32% line:-2
スクロールと 画像の
読み込みが重なります

00:19:25.999 --> 00:19:28.535 align:start position:30% line:-1
速くスクロールされると

00:19:28.735 --> 00:19:33.874 align:start position:32% line:-2
読み込みが完了せず
画像が表示されません

00:19:33.974 --> 00:19:38.712 align:start position:34% line:-2
こういう場合は
キャンセルしないと

00:19:38.812 --> 00:19:42.416 align:start position:27% line:-2
平行して
読み込みを続けようとします

00:19:42.883 --> 00:19:45.319 align:start position:23% line:-1
そこでsignpostを使って

00:19:45.419 --> 00:19:48.121 align:start position:34% line:-2
アプリケーションを
分析します

00:19:49.223 --> 00:19:51.558 align:start position:36% line:-1
これがコードです

00:19:51.658 --> 00:19:55.129 align:start position:16% line:-2
startImageDownloadを
使っています

00:19:55.229 --> 00:19:58.198 align:start position:36% line:-2
画像を読み込む際
呼び出され

00:19:58.332 --> 00:20:02.169 align:start position:34% line:-2
該当の画像の名前が
渡されます

00:19:58.332 --> 00:20:02.169 align:start position:34% line:-2
該当の画像の名前が
渡されます

00:20:02.436 --> 00:20:04.738 align:start position:29% line:-1
ダウンローダの記載はここ

00:20:04.838 --> 00:20:10.410 align:start position:27% line:-2
ダウンロードが終わると
コールバックを受け取れます

00:20:11.245 --> 00:20:17.084 align:start position:29% line:-2
今回はダウンローダが
同時に起動していますので

00:20:17.184 --> 00:20:20.888 align:start position:23% line:-2
signpost IDの生成に
ピッタリです

00:20:20.988 --> 00:20:25.459 align:start position:25% line:-2
ダウンローダの
オブジェクトでIDを作ります

00:20:26.560 --> 00:20:29.463 align:start position:23% line:-2
ここがos signpostの
BEGINです

00:20:29.563 --> 00:20:32.533 align:start position:30% line:-2
networkingの
ログハンドルに送ります

00:20:32.633 --> 00:20:35.769 align:start position:30% line:-1
ちょっと見てみましょう

00:20:35.869 --> 00:20:39.106 align:start position:34% line:-2
アプリケーションの
バンドルIDがあり

00:20:39.206 --> 00:20:41.008 align:start position:34% line:-1
カテゴリがあります

00:20:43.777 --> 00:20:48.549 align:start position:27% line:-2
次に 背景画像の
読み込み完了が分かるように

00:20:48.682 --> 00:20:51.318 align:start position:20% line:-1
画像のsignpost名を渡します

00:20:51.518 --> 00:20:54.054 align:start position:23% line:-1
次にsignpost IDです

00:20:54.154 --> 00:20:56.790 align:start position:25% line:-1
BEGINにメタデータを加え

00:20:57.057 --> 00:21:01.395 align:start position:32% line:-2
読み込む画像の名前を
伝えます

00:20:57.057 --> 00:21:01.395 align:start position:32% line:-2
読み込む画像の名前を
伝えます

00:21:01.662 --> 00:21:03.330 align:start position:34% line:-1
ダウンロードを開始

00:21:03.430 --> 00:21:05.032 align:start position:39% line:-1
プロパティが

00:21:05.132 --> 00:21:08.502 align:start position:32% line:-2
ダウンローダの作動を
トラッキングします

00:21:09.102 --> 00:21:12.906 align:start position:29% line:-2
完了すると
コールバックが送られます

00:21:13.006 --> 00:21:16.543 align:start position:30% line:-1
読み込んだ画像を表示し

00:21:17.277 --> 00:21:19.813 align:start position:32% line:-1
ENDを呼び出します

00:21:19.913 --> 00:21:24.585 align:start position:27% line:-2
ログハンドルも名前もIDも
同じものを使いますが

00:21:24.785 --> 00:21:30.023 align:start position:30% line:-2
次はサイズを規定する
メタデータを追加します

00:21:30.691 --> 00:21:34.695 align:start position:27% line:-1
ご覧のとおり 今回は詳細に

00:21:34.795 --> 00:21:38.499 align:start position:12% line:-2
“xcode:size-in-bytes”
と記しました

00:21:38.932 --> 00:21:41.635 align:start position:18% line:-1
XcodeとInstrumentsに

00:21:41.735 --> 00:21:46.773 align:start position:29% line:-2
引数をバイト単位で表示し
分析させるためです

00:21:47.741 --> 00:21:49.042 align:start position:39% line:-1
これについて

00:21:49.142 --> 00:21:54.414 align:start position:23% line:-2
詳しくはヘルプ内の
デベロッパガイドをご覧ください

00:21:55.849 --> 00:21:59.887 align:start position:29% line:-2
ダウンロードが完了すると
nilに戻ります

00:22:00.721 --> 00:22:03.957 align:start position:30% line:-1
終わり方は２つあります

00:22:04.291 --> 00:22:05.859 align:start position:38% line:-1
今のが成功例で

00:22:05.959 --> 00:22:08.462 align:start position:27% line:-1
次はキャンセルする場合です

00:22:08.829 --> 00:22:10.364 align:start position:36% line:-1
再読み込みに備え

00:22:10.831 --> 00:22:15.702 align:start position:30% line:-2
作動中のダウンローダを
先にキャンセルします

00:22:16.236 --> 00:22:19.273 align:start position:27% line:-1
そのためにENDを置きます

00:22:19.807 --> 00:22:25.045 align:start position:29% line:-2
同じログハンドルと
名前とIDを使いましょう

00:22:25.212 --> 00:22:28.715 align:start position:25% line:-2
メタデータに
“Cancelled”と加え

00:22:28.849 --> 00:22:31.318 align:start position:29% line:-1
成功した場合と区別します

00:22:32.052 --> 00:22:34.321 align:start position:34% line:-1
準備は終わりました

00:22:34.421 --> 00:22:38.358 align:start position:34% line:-2
次はプロファイルを
作成します

00:22:39.126 --> 00:22:40.928 align:start position:29% line:-2
Instrumentsが
立ち上がります

00:22:42.729 --> 00:22:45.132 align:start position:29% line:-1
まだインストール中ですね

00:22:46.066 --> 00:22:47.468 align:start position:36% line:-1
立ち上がりました

00:22:47.834 --> 00:22:50.337 align:start position:36% line:-1
新規作成を選び―

00:22:51.271 --> 00:22:52.706 align:start position:36% line:-1
Libraryへ

00:22:52.806 --> 00:22:56.276 align:start position:23% line:-2
新しいos signpostを
使ってみます

00:22:56.510 --> 00:22:59.546 align:start position:34% line:-1
ここに ありますね

00:23:00.814 --> 00:23:03.851 align:start position:32% line:-2
ドラッグ＆ドロップで
トレースを表示

00:23:04.084 --> 00:23:05.853 align:start position:34% line:-1
スペースを広げて―

00:23:06.320 --> 00:23:08.555 align:start position:30% line:-1
Recordを押します

00:23:09.356 --> 00:23:13.727 align:start position:21% line:-1
先ほどのiPhoneを持ってきて

00:23:13.827 --> 00:23:17.431 align:start position:30% line:-2
普通のスクロールと
速いスクロールをします

00:23:18.165 --> 00:23:20.367 align:start position:30% line:-1
画面が止まるのを待ち―

00:23:21.468 --> 00:23:24.438 align:start position:25% line:-2
Instrumentsに戻り
記録を確認します

00:23:25.672 --> 00:23:27.141 align:start position:36% line:-1
記録を停止します

00:23:27.541 --> 00:23:31.011 align:start position:36% line:-2
トラックビューを
見てください

00:23:31.111 --> 00:23:34.414 align:start position:30% line:-1
これは背景画像の処理で

00:23:34.515 --> 00:23:36.049 align:start position:30% line:-1
signpost名です

00:23:36.650 --> 00:23:39.152 align:start position:25% line:-1
Optionを押しながら拡大

00:23:39.486 --> 00:23:41.588 align:start position:32% line:-1
処理時間が見られます

00:23:41.688 --> 00:23:46.360 align:start position:30% line:-2
最初と最後の
メタデータも見えますね

00:23:48.028 --> 00:23:52.633 align:start position:32% line:-2
縮小して もう一度
トレースを見てみます

00:23:52.900 --> 00:23:57.237 align:start position:30% line:-2
同時に読み込まれている
画像の数は

00:23:57.337 --> 00:23:59.573 align:start position:36% line:-1
５つくらいですね

00:23:59.940 --> 00:24:01.842 align:start position:32% line:-1
キャンセルは成功です

00:23:59.940 --> 00:24:01.842 align:start position:32% line:-1
キャンセルは成功です

00:24:02.176 --> 00:24:06.914 align:start position:32% line:-2
確認したければ
詳細を見てみましょう

00:24:07.147 --> 00:24:09.249 align:start position:30% line:-1
処理時間のメタデータに

00:24:09.349 --> 00:24:12.286 align:start position:29% line:-2
“Cancelled”と
書かれています

00:24:13.420 --> 00:24:16.890 align:start position:27% line:-1
次に詳しい数字を確認します

00:24:16.990 --> 00:24:20.360 align:start position:34% line:-2
例えば処理に要した
時間を見るなら―

00:24:21.428 --> 00:24:23.797 align:start position:32% line:-1
処理時間のサマリーへ

00:24:24.431 --> 00:24:27.701 align:start position:30% line:-2
カテゴリごとに
ブレイクダウンされます

00:24:27.868 --> 00:24:32.706 align:start position:29% line:-2
その下は名前ごと
そしてメッセージごとです

00:24:33.307 --> 00:24:36.076 align:start position:36% line:-1
少し狭めましょう

00:24:36.743 --> 00:24:41.515 align:start position:30% line:-2
93個の画像を読み込む
リクエストがありました

00:24:42.149 --> 00:24:44.551 align:start position:23% line:-1
うち12個はlocation１

00:24:45.352 --> 00:24:47.321 align:start position:29% line:-1
そのうち７つはキャンセル

00:24:47.421 --> 00:24:50.858 align:start position:32% line:-2
５つは3.31MBで
読み込みました

00:24:51.925 --> 00:24:55.596 align:start position:34% line:-2
所要時間が
右側に表示されます

00:24:55.696 --> 00:24:57.831 align:start position:32% line:-1
キャンセルに要した―

00:24:57.931 --> 00:25:02.102 align:start position:32% line:-2
最短時間と平均時間が
出ています

00:24:57.931 --> 00:25:02.102 align:start position:32% line:-2
最短時間と平均時間が
出ています

00:25:02.202 --> 00:25:06.039 align:start position:34% line:-2
処理完了の場合より
ずっと短いです

00:25:06.140 --> 00:25:09.109 align:start position:32% line:-1
想定どおりの傾向です

00:25:09.776 --> 00:25:14.715 align:start position:27% line:-2
キャンセルした全イベントの
詳細を確認するには

00:25:14.815 --> 00:25:16.884 align:start position:34% line:-1
横の矢印をクリック

00:25:17.151 --> 00:25:20.554 align:start position:32% line:-1
リストビューが開いて

00:25:20.654 --> 00:25:25.792 align:start position:27% line:-2
キャンセルのメッセージを
受け取った場所が分かります

00:25:26.293 --> 00:25:30.831 align:start position:32% line:-2
更に このように
該当箇所の処理時間が

00:25:30.931 --> 00:25:33.200 align:start position:27% line:-1
トレースビューで示されます

00:25:33.300 --> 00:25:36.870 align:start position:30% line:-2
エラーの原因を探す時に
便利です

00:25:38.405 --> 00:25:44.378 align:start position:29% line:-2
いつ処理時間が発生したか
知る方法は分かりました

00:25:44.978 --> 00:25:48.849 align:start position:36% line:-2
ではメタデータを
分析する方法は？

00:25:49.216 --> 00:25:50.851 align:start position:38% line:-1
例えばネットで

00:25:50.951 --> 00:25:55.189 align:start position:29% line:-2
何バイトの画像を
読み込んだのか知るには？

00:25:55.656 --> 00:26:01.462 align:start position:27% line:-2
サイズに関するメッセージを
メタデータに加えましたが

00:25:55.656 --> 00:26:01.462 align:start position:27% line:-2
サイズに関するメッセージを
メタデータに加えましたが

00:26:01.628 --> 00:26:04.531 align:start position:32% line:-1
これが使えそうですね

00:26:05.165 --> 00:26:06.300 align:start position:39% line:-1
やってみます

00:26:06.400 --> 00:26:09.303 align:start position:14% line:-2
サマリーの
Metadata Statisticsへ

00:26:10.504 --> 00:26:14.875 align:start position:30% line:-2
サブシステム カテゴリ
フォーマットごとに

00:26:14.975 --> 00:26:16.343 align:start position:30% line:-1
ブレイクダウンされます

00:26:16.443 --> 00:26:19.646 align:start position:27% line:-1
フォーマットの下は引数です

00:26:19.746 --> 00:26:23.317 align:start position:34% line:-2
今回の場合は
arg0だけでした

00:26:24.084 --> 00:26:26.553 align:start position:18% line:-1
Instrumentsが合計値を算出

00:26:26.653 --> 00:26:28.755 align:start position:32% line:-1
バイトで表示されます

00:26:28.856 --> 00:26:35.095 align:start position:29% line:-2
ここでは読み込んだ画像が
80MBだと分かりました

00:26:36.563 --> 00:26:40.134 align:start position:27% line:-2
横には
最短･最長･平均時間もあり

00:26:40.234 --> 00:26:43.070 align:start position:32% line:-1
分析するのに最適です

00:26:43.170 --> 00:26:47.207 align:start position:32% line:-2
パフォーマンスを
統計的に分析できます

00:26:48.208 --> 00:26:51.912 align:start position:32% line:-2
signpostは
軽量という話でしたね

00:26:52.012 --> 00:26:53.714 align:start position:41% line:-1
事実ですが

00:26:54.114 --> 00:26:57.151 align:start position:30% line:-1
今見せた操作は例外です

00:26:58.151 --> 00:27:01.588 align:start position:25% line:-2
デフォルトの
immediateモードでは

00:26:58.151 --> 00:27:01.588 align:start position:25% line:-2
デフォルトの
immediateモードでは

00:27:01.688 --> 00:27:06.693 align:start position:32% line:-2
記録もデータの閲覧も
ほぼリアルタイムです

00:27:06.960 --> 00:27:09.162 align:start position:25% line:-1
その場合 signpostは

00:27:09.263 --> 00:27:13.100 align:start position:25% line:-2
Instrumentsに直接
データを送ります

00:27:13.200 --> 00:27:17.070 align:start position:34% line:-2
バッファリングする
最適化のデータより

00:27:17.171 --> 00:27:18.972 align:start position:34% line:-1
優先して送られます

00:27:19.106 --> 00:27:23.844 align:start position:30% line:-2
signpostの場合
デモで行った規模なら

00:27:23.944 --> 00:27:28.081 align:start position:32% line:-2
オーバーヘッドは
気にならない程度です

00:27:28.248 --> 00:27:32.653 align:start position:25% line:-2
しかし １秒に何千もの
signpostが必要な場合

00:27:32.753 --> 00:27:35.022 align:start position:32% line:-1
負荷が大きくなります

00:27:35.122 --> 00:27:37.624 align:start position:30% line:-1
それを回避する方法です

00:27:37.724 --> 00:27:41.428 align:start position:18% line:-2
記録の前に
Instrumentsの記録モードを

00:27:41.528 --> 00:27:43.096 align:start position:41% line:-1
変更します

00:27:43.197 --> 00:27:44.865 align:start position:30% line:-1
Recordボタンから

00:27:44.965 --> 00:27:49.436 align:start position:18% line:-2
Recording Optionsを
選択します

00:27:50.771 --> 00:27:54.441 align:start position:18% line:-2
下部に現れる
Global Optionsを押すと

00:27:55.008 --> 00:27:57.344 align:start position:27% line:-2
Immediateモードに
なっています

00:27:57.444 --> 00:28:00.147 align:start position:34% line:-2
これを“５秒間”に
変更します

00:27:57.444 --> 00:28:00.147 align:start position:34% line:-2
これを“５秒間”に
変更します

00:28:00.380 --> 00:28:02.649 align:start position:34% line:-1
ウィンドウ制限です

00:28:03.150 --> 00:28:06.320 align:start position:36% line:-2
すべての
イベントではなく

00:28:06.420 --> 00:28:10.390 align:start position:30% line:-2
５秒分だけを
記録するという設定です

00:28:10.557 --> 00:28:15.596 align:start position:20% line:-2
これによりInstrumentsが
OSを邪魔しなくなります

00:28:15.696 --> 00:28:18.832 align:start position:32% line:-2
システムやゲームの
パフォーマンス調査に

00:28:18.932 --> 00:28:22.069 align:start position:27% line:-1
非常によく使われる手段です

00:28:22.169 --> 00:28:26.039 align:start position:32% line:-2
スタッターやエラーを
発見できます

00:28:27.508 --> 00:28:31.678 align:start position:25% line:-2
以上が
os signpostでした

00:28:32.646 --> 00:28:35.082 align:start position:14% line:-2
次は
Points of Interestです

00:28:36.750 --> 00:28:39.686 align:start position:23% line:-2
再度 Trailblazerを
使います

00:28:40.754 --> 00:28:45.292 align:start position:34% line:-2
画像を選択すると
詳細が表示されます

00:28:45.926 --> 00:28:49.730 align:start position:34% line:-2
別の画像を選べば
また詳細が現れます

00:28:50.364 --> 00:28:53.534 align:start position:34% line:-2
いつどこで
詳細が表示されるか

00:28:53.634 --> 00:28:56.703 align:start position:32% line:-2
トラッキングできれば
便利です

00:28:56.803 --> 00:29:01.875 align:start position:32% line:-2
ユーザの関心や行動を
予測できますからね

00:28:56.803 --> 00:29:01.875 align:start position:32% line:-2
ユーザの関心や行動を
予測できますからね

00:29:02.609 --> 00:29:06.847 align:start position:25% line:-1
signpostで可能ですが

00:29:06.947 --> 00:29:09.049 align:start position:23% line:-1
Instrumentsを使って

00:29:09.149 --> 00:29:12.386 align:start position:38% line:-2
すべて記録する
必要があります

00:29:12.486 --> 00:29:17.291 align:start position:29% line:-2
必然的に多くのイベントに
埋もれてしまいます

00:29:17.624 --> 00:29:22.029 align:start position:16% line:-2
Points of Interestで
優先度を上げましょう

00:29:22.529 --> 00:29:24.898 align:start position:30% line:-1
コードを見てみましょう

00:29:25.499 --> 00:29:28.101 align:start position:21% line:-2
メソッド
viewDidAppearの中に

00:29:28.202 --> 00:29:32.773 align:start position:20% line:-2
os signpostのイベントを
作りました

00:29:32.873 --> 00:29:36.443 align:start position:27% line:-1
詳細の名前がここに入ります

00:29:37.077 --> 00:29:40.814 align:start position:16% line:-2
Points of Interestに
これが送られます

00:29:40.914 --> 00:29:45.586 align:start position:36% line:-2
識別子のついた
ハンドルが作られ

00:29:45.752 --> 00:29:48.522 align:start position:36% line:-2
専用のカテゴリが
設けられます

00:29:48.622 --> 00:29:51.492 align:start position:29% line:-2
Instrumentsは
これを目印に

00:29:51.592 --> 00:29:57.397 align:start position:34% line:-2
該当する箇所を探し
カテゴリ分けします

00:29:57.831 --> 00:30:00.801 align:start position:32% line:-2
タイムプロファイルを
見てみましょう

00:29:57.831 --> 00:30:00.801 align:start position:32% line:-2
タイムプロファイルを
見てみましょう

00:30:00.901 --> 00:30:05.272 align:start position:16% line:-2
Points of Interestが
自動で読み込まれています

00:30:05.839 --> 00:30:07.474 align:start position:36% line:-1
記録を開始します

00:30:08.909 --> 00:30:14.615 align:start position:29% line:-2
先ほどと同じように
２ヵ所の詳細を閲覧します

00:30:15.115 --> 00:30:18.151 align:start position:34% line:-2
もう１ヵ所
やっておきましょう

00:30:19.286 --> 00:30:22.055 align:start position:21% line:-1
Instrumentsに戻ります

00:30:22.156 --> 00:30:27.728 align:start position:16% line:-2
Points of Interestが
しっかりと記録されています

00:30:27.828 --> 00:30:33.834 align:start position:29% line:-2
ユーザが見ていた場所や
詳細なデータが分かります

00:30:33.934 --> 00:30:36.803 align:start position:30% line:-2
あなたの
アプリケーションの中で

00:30:36.904 --> 00:30:41.408 align:start position:29% line:-2
ユーザの関心が高い場所を
把握できます

00:30:41.508 --> 00:30:46.413 align:start position:21% line:-2
デベロッパチームやコミュニティで
このデータを

00:30:46.513 --> 00:30:48.916 align:start position:30% line:-1
共有することもできます

00:30:49.917 --> 00:30:52.886 align:start position:27% line:-2
以上が
signpostを使った―

00:30:52.986 --> 00:30:55.823 align:start position:16% line:-2
Points of Interestの
デモでした

00:30:56.890 --> 00:31:00.327 align:start position:23% line:-2
Instruments 10の
もう１つの特長は

00:30:56.890 --> 00:31:00.327 align:start position:23% line:-2
Instruments 10の
もう１つの特長は

00:31:00.427 --> 00:31:03.263 align:start position:27% line:-1
カスタマイズできることです

00:31:03.464 --> 00:31:07.734 align:start position:34% line:-2
今回 カスタム版の
デモのために

00:31:08.001 --> 00:31:13.140 align:start position:25% line:-2
Trailblazer専用の
パッケージを作ってきました

00:31:13.807 --> 00:31:16.510 align:start position:32% line:-1
今から実行してみます

00:31:18.078 --> 00:31:19.479 align:start position:39% line:-1
見てください

00:31:20.480 --> 00:31:22.950 align:start position:32% line:-2
パッケージが
インストールされた―

00:31:23.050 --> 00:31:26.153 align:start position:29% line:-2
Instrumentsの
コピーが現れました

00:31:26.887 --> 00:31:29.490 align:start position:30% line:-1
これを立ち上げましょう

00:31:29.590 --> 00:31:34.094 align:start position:11% line:-2
Trailblazer Networking
テンプレートがあります

00:31:34.361 --> 00:31:35.662 align:start position:39% line:-1
これを選ぶと

00:31:36.130 --> 00:31:40.500 align:start position:21% line:-2
専用のトレースドキュメントが
Instrumentsに現れます

00:31:41.435 --> 00:31:45.139 align:start position:32% line:-2
それでは早速
記録をしてみましょう

00:31:45.239 --> 00:31:50.010 align:start position:18% line:-2
os signpostとカスタム版の
違いを確認します

00:31:50.110 --> 00:31:53.380 align:start position:34% line:-2
もう一度
画像を読み込みます

00:31:55.916 --> 00:31:58.318 align:start position:29% line:-1
トレースを見てみましょう

00:31:58.952 --> 00:32:01.655 align:start position:32% line:-1
見た目から違いますね

00:31:58.952 --> 00:32:01.655 align:start position:32% line:-1
見た目から違いますね

00:32:01.755 --> 00:32:03.624 align:start position:38% line:-1
拡大してみます

00:32:04.424 --> 00:32:06.827 align:start position:34% line:-1
左側を見てください

00:32:06.927 --> 00:32:11.165 align:start position:27% line:-2
signpost名ではなく
画像名で並んでいます

00:32:11.265 --> 00:32:14.735 align:start position:34% line:-2
画像２の読み込みが
行われたのは

00:32:14.968 --> 00:32:17.471 align:start position:36% line:-1
ここと ここです

00:32:18.172 --> 00:32:22.709 align:start position:27% line:-2
各読み込みに
画像のサイズを表記しました

00:32:22.910 --> 00:32:29.083 align:start position:29% line:-2
3.5MBを超えると
赤くなる設定もしています

00:32:29.550 --> 00:32:34.021 align:start position:32% line:-2
このようにグラフを
カスタマイズしました

00:32:34.421 --> 00:32:36.356 align:start position:34% line:-1
下の詳細も違います

00:32:36.457 --> 00:32:39.927 align:start position:27% line:-1
とてもシンプルなリストです

00:32:40.060 --> 00:32:42.663 align:start position:29% line:-1
トレースでも確認できます

00:32:43.397 --> 00:32:45.732 align:start position:39% line:-1
そして更に…

00:32:45.833 --> 00:32:48.101 align:start position:36% line:-1
画面を戻しますね

00:32:48.535 --> 00:32:52.306 align:start position:32% line:-2
全ダウンロードの
サマリーも見られます

00:32:52.406 --> 00:32:54.408 align:start position:38% line:-1
これが合計です

00:32:54.975 --> 00:32:58.779 align:start position:29% line:-2
Timesliceという
便利な機能も

00:32:58.879 --> 00:33:03.350 align:start position:30% line:-2
“同時進行のタスクは
いくつあるか”という―

00:32:58.879 --> 00:33:03.350 align:start position:30% line:-2
“同時進行のタスクは
いくつあるか”という―

00:33:03.450 --> 00:33:06.386 align:start position:32% line:-1
問いに答えてくれます

00:33:06.587 --> 00:33:08.822 align:start position:32% line:-1
タスクの数を知るには

00:33:08.922 --> 00:33:12.493 align:start position:34% line:-2
画面上の縦線を
時間軸に動かします

00:33:12.593 --> 00:33:15.062 align:start position:34% line:-1
縦線と交差する数が

00:33:15.195 --> 00:33:18.532 align:start position:38% line:-2
同時に進行する
タスクの数です

00:33:18.632 --> 00:33:22.202 align:start position:36% line:-2
これも役立つ
データの１つです

00:33:23.003 --> 00:33:27.374 align:start position:27% line:-2
もしチームで
プロジェクトを進行するなら

00:33:27.474 --> 00:33:29.543 align:start position:32% line:-1
カスタム版は最適です

00:33:29.643 --> 00:33:32.746 align:start position:29% line:-1
コードの詳細を知られずに

00:33:32.846 --> 00:33:37.718 align:start position:21% line:-2
signpostのデータを活用し
プログラムを共有できます

00:33:37.818 --> 00:33:39.620 align:start position:38% line:-1
重要な特長です

00:33:40.053 --> 00:33:42.456 align:start position:38% line:-1
他にもあります

00:33:42.556 --> 00:33:44.625 align:start position:36% line:-1
このカスタム版は

00:33:44.892 --> 00:33:50.397 align:start position:29% line:-2
わずか115行のXMLで
すべて定義されています

00:33:50.964 --> 00:33:54.902 align:start position:34% line:-2
幅広く応用が利き
強力であると同時に

00:33:55.002 --> 00:33:56.803 align:start position:39% line:-1
簡単なのです

00:33:58.005 --> 00:34:00.541 align:start position:38% line:-1
デモは以上です

00:33:58.005 --> 00:34:00.541 align:start position:38% line:-1
デモは以上です

00:34:01.675 --> 00:34:06.146 align:start position:43% line:-1
(拍手)

00:34:08.916 --> 00:34:12.820 align:start position:29% line:-2
今日はsignpostの
APIを使い

00:34:12.920 --> 00:34:18.559 align:start position:16% line:-2
Points of Interestと
処理時間のデモを行いました

00:34:18.926 --> 00:34:20.627 align:start position:36% line:-1
メタデータを集め

00:34:20.728 --> 00:34:25.032 align:start position:29% line:-2
Instrumentsで
可視化し分析しましたね

00:34:25.364 --> 00:34:30.437 align:start position:23% line:-2
更にsignpostのデータを
使いやすくするため

00:34:30.536 --> 00:34:35.175 align:start position:29% line:-2
Instrumentsの
カスタム版を作りました

00:34:36.009 --> 00:34:39.612 align:start position:27% line:-1
今回の情報は非常に有益です

00:34:39.713 --> 00:34:41.815 align:start position:30% line:-1
ぜひアプリケーションの

00:34:41.915 --> 00:34:46.353 align:start position:32% line:-2
パフォーマンス向上に
役立ててください

00:34:46.453 --> 00:34:51.091 align:start position:7% line:-2
os signpostとInstrumentsを
うまく活用すれば

00:34:51.190 --> 00:34:53.960 align:start position:29% line:-2
ユーザエクスペリエンスを
改善できます

00:34:54.895 --> 00:34:59.867 align:start position:30% line:-2
今回は以上ですが
ラボにもお越しください

00:34:59.967 --> 00:35:03.837 align:start position:34% line:-2
テクノロジーラボは
本日３時からです

00:34:59.967 --> 00:35:03.837 align:start position:34% line:-2
テクノロジーラボは
本日３時からです

00:35:04.071 --> 00:35:07.541 align:start position:32% line:-2
セッション410でも
お話しします

00:35:07.808 --> 00:35:11.011 align:start position:29% line:-2
Instrumentsの
カスタム版について

00:35:11.111 --> 00:35:15.148 align:start position:25% line:-2
Trailblazerを例に
解説します

00:35:15.616 --> 00:35:17.784 align:start position:30% line:-1
ありがとうございました

00:35:17.918 --> 00:35:21.622 align:start position:43% line:-1
(拍手)
