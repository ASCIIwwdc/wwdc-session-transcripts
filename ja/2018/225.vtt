WEBVTT

00:00:07.107 --> 00:00:15.282 align:start position:43% line:-1
(音楽)

00:00:22.523 --> 00:00:29.530 align:start position:43% line:-1
(拍手)

00:00:29.763 --> 00:00:33.867 align:start position:2% line:-2
A Tour of UICollectionViewへ
ようこそ

00:00:34.268 --> 00:00:36.236 align:start position:29% line:-1
私はスティーブ･ブリーン

00:00:36.336 --> 00:00:39.139 align:start position:25% line:-1
フレームワークエンジニアです

00:00:39.673 --> 00:00:42.309 align:start position:20% line:-1
本日は 私と同じUIKitチームの

00:00:42.409 --> 00:00:46.113 align:start position:30% line:-2
モハメド･ジスロウイと
ツアーを行います

00:00:48.815 --> 00:00:51.385 align:start position:27% line:-1
今日は変わったことをします

00:00:51.485 --> 00:00:55.889 align:start position:27% line:-2
デザイナーのスペックを基に
アプリケーションを構築し

00:00:56.023 --> 00:01:00.027 align:start position:20% line:-2
UICollectionViewの
機能を活用します

00:00:56.023 --> 00:01:00.027 align:start position:20% line:-2
UICollectionViewの
機能を活用します

00:01:00.127 --> 00:01:04.364 align:start position:21% line:-1
アプリケーションを構築する過程で

00:01:04.464 --> 00:01:07.835 align:start position:34% line:-2
様々なトピックに
触れたいと思います

00:01:07.935 --> 00:01:11.972 align:start position:29% line:-2
レイアウト 更新
アニメーションを含みます

00:01:12.606 --> 00:01:15.709 align:start position:27% line:-1
それでは早速 始めましょう

00:01:17.344 --> 00:01:20.614 align:start position:23% line:-1
これはデザイナーのスペックです

00:01:20.714 --> 00:01:22.850 align:start position:27% line:-1
フレンドフィードのようです

00:01:22.950 --> 00:01:24.852 align:start position:36% line:-1
レイアウトは縦で

00:01:24.985 --> 00:01:27.321 align:start position:32% line:-1
分かりやすい作りです

00:01:28.689 --> 00:01:30.357 align:start position:36% line:-1
これはいいですね

00:01:30.457 --> 00:01:33.327 align:start position:23% line:-1
フレンドフィードのコンテンツが

00:01:33.427 --> 00:01:35.762 align:start position:27% line:-1
モザイクで表示されています

00:01:36.163 --> 00:01:39.132 align:start position:27% line:-1
これらを使うためのコードを

00:01:39.233 --> 00:01:41.502 align:start position:32% line:-1
モハメドが説明します

00:01:41.602 --> 00:01:43.003 align:start position:36% line:-1
デザインはどう？

00:01:43.170 --> 00:01:45.572 align:start position:27% line:-1
実際に見るのは初めてだけど

00:01:45.672 --> 00:01:48.041 align:start position:12% line:-1
CollectionViewが使えると思う

00:01:48.141 --> 00:01:49.943 align:start position:30% line:-1
作業するのが楽しそうだ

00:01:50.043 --> 00:01:51.512 align:start position:36% line:-1
これはすごくいい

00:01:52.312 --> 00:01:57.651 align:start position:29% line:-2
コードを使った説明は
モハメドが後ほど行います

00:01:57.751 --> 00:02:01.255 align:start position:18% line:-2
まず CollectionViewを
理解するために

00:01:57.751 --> 00:02:01.255 align:start position:18% line:-2
まず CollectionViewを
理解するために

00:02:01.355 --> 00:02:03.824 align:start position:25% line:-1
３つのコンセプトを説明します

00:02:03.924 --> 00:02:08.127 align:start position:29% line:-2
レイアウト データソース
デリゲートです

00:02:10.062 --> 00:02:13.500 align:start position:23% line:-1
まずレイアウトからお話しします

00:02:13.600 --> 00:02:18.105 align:start position:20% line:-2
UICollectionViewの
定義を開きます

00:02:18.438 --> 00:02:20.274 align:start position:20% line:-1
UITableViewに詳しければ

00:02:20.374 --> 00:02:23.777 align:start position:21% line:-1
APIが似ていることに気づきます

00:02:24.144 --> 00:02:27.548 align:start position:30% line:-2
デリゲートや
データソースがあります

00:02:27.915 --> 00:02:32.819 align:start position:12% line:-2
しかし UICollectionViewの
レイアウトコンセプトは

00:02:32.920 --> 00:02:36.056 align:start position:23% line:-1
独特で すごい力を持っています

00:02:36.723 --> 00:02:41.128 align:start position:25% line:-2
視覚配置の情報を
コンテンツから抽象化できます

00:02:41.228 --> 00:02:43.697 align:start position:27% line:-1
コンテンツ自身とは別にです

00:02:44.331 --> 00:02:47.668 align:start position:29% line:-2
レイアウトは
コンテンツの配置場所です

00:02:48.936 --> 00:02:51.371 align:start position:20% line:-2
全アイテムが
UICollectionViewの

00:02:51.872 --> 00:02:55.409 align:start position:21% line:-1
レイアウト属性で特定されています

00:02:55.509 --> 00:02:59.446 align:start position:30% line:-2
境界 センター
フレームなどの属性です

00:02:59.546 --> 00:03:04.384 align:start position:30% line:-2
表示アイテムを定義する
プロパティとも言えます

00:02:59.546 --> 00:03:04.384 align:start position:30% line:-2
表示アイテムを定義する
プロパティとも言えます

00:03:04.484 --> 00:03:09.723 align:start position:27% line:-2
サブクラスを作成して
カスタマイズすることもでき

00:03:09.823 --> 00:03:11.925 align:start position:25% line:-1
自分のデザインに組み込めます

00:03:12.826 --> 00:03:17.130 align:start position:32% line:-2
ユーザがコンテンツを
スクロールする時―

00:03:17.231 --> 00:03:20.234 align:start position:25% line:-1
通常レイアウトは変わりません

00:03:20.567 --> 00:03:23.604 align:start position:27% line:-1
しかし レイアウトの表示を

00:03:23.704 --> 00:03:25.706 align:start position:32% line:-1
変えたい時もあります

00:03:25.906 --> 00:03:30.244 align:start position:25% line:-2
その時には
無効化メカニズムを使用します

00:03:31.445 --> 00:03:36.049 align:start position:23% line:-2
レイアウトがコンテンツとは別に
抽象化されるので

00:03:36.149 --> 00:03:38.986 align:start position:21% line:-1
別のレイアウトへの移行が簡単です

00:03:39.086 --> 00:03:42.956 align:start position:25% line:-2
また移行時に
アニメーション効果が使えます

00:03:43.390 --> 00:03:47.127 align:start position:32% line:-2
レイアウトＡとＢの
情報共有は要りません

00:03:47.227 --> 00:03:50.864 align:start position:32% line:-2
作りたいレイアウトを
宣言するだけです

00:03:51.899 --> 00:03:55.969 align:start position:12% line:-2
CollectionViewLayoutは
抽象クラスなので

00:03:56.069 --> 00:03:59.206 align:start position:32% line:-1
直接は使用されません

00:03:59.306 --> 00:04:02.943 align:start position:23% line:-1
むしろサブクラスが使用されます

00:03:59.306 --> 00:04:02.943 align:start position:23% line:-1
むしろサブクラスが使用されます

00:04:03.944 --> 00:04:08.615 align:start position:14% line:-2
今回は UICollectionView
FlowLayoutがあります

00:04:08.715 --> 00:04:11.885 align:start position:23% line:-2
CollectionViewを
知っていれば簡単です

00:04:13.020 --> 00:04:16.255 align:start position:2% line:-2
UICollectionViewFlowLayoutの
カスタマイズには

00:04:16.356 --> 00:04:19.259 align:start position:32% line:-1
色々と方法があります

00:04:19.358 --> 00:04:22.196 align:start position:23% line:-1
デリゲートを使うこともできます

00:04:22.763 --> 00:04:27.234 align:start position:5% line:-2
しかし
CollectionViewFlowLayoutは

00:04:27.334 --> 00:04:32.539 align:start position:7% line:-2
CollectionViewDelegateより
多くのものを特定できます

00:04:34.408 --> 00:04:38.679 align:start position:29% line:-2
フローレイアウトは
行配置に基づいているため

00:04:38.779 --> 00:04:44.151 align:start position:30% line:-2
様々なデザインに
対応することができます

00:04:46.653 --> 00:04:49.656 align:start position:27% line:-1
行配置とはどういう意味か？

00:04:49.890 --> 00:04:52.993 align:start position:25% line:-1
行配置システムを説明するには

00:04:53.093 --> 00:04:56.330 align:start position:27% line:-1
例を挙げるのが一番でしょう

00:04:56.496 --> 00:05:00.234 align:start position:23% line:-2
この縦にスクロールする
CollectionViewで

00:04:56.496 --> 00:05:00.234 align:start position:23% line:-2
この縦にスクロールする
CollectionViewで

00:05:00.334 --> 00:05:04.404 align:start position:27% line:-2
フローレイアウトの
コンテンツ表示を再現します

00:05:04.605 --> 00:05:07.307 align:start position:32% line:-1
まず最初のアイテムを

00:05:07.407 --> 00:05:10.177 align:start position:36% line:-1
上端に配置します

00:05:10.277 --> 00:05:13.680 align:start position:21% line:-1
そして同じ行にアイテムを並べます

00:05:14.081 --> 00:05:16.817 align:start position:32% line:-1
アイテムを並べる行は

00:05:16.917 --> 00:05:20.554 align:start position:32% line:-2
スクロール軸に直交し
水平になます

00:05:21.255 --> 00:05:24.758 align:start position:27% line:-1
最初の行が一杯になったので

00:05:24.858 --> 00:05:27.628 align:start position:34% line:-1
次の行に移動します

00:05:27.728 --> 00:05:30.264 align:start position:29% line:-1
コンテンツを更に並べます

00:05:31.098 --> 00:05:33.634 align:start position:34% line:-1
最後の行に来ました

00:05:33.734 --> 00:05:35.836 align:start position:27% line:-1
コンテンツを全て並べました

00:05:36.970 --> 00:05:39.706 align:start position:23% line:-1
水平なレイアウトが分かるように

00:05:39.806 --> 00:05:42.009 align:start position:38% line:-1
線を引きました

00:05:42.376 --> 00:05:46.947 align:start position:25% line:-2
フローレイアウトを
カスタマイズする定義を見ます

00:05:47.948 --> 00:05:50.384 align:start position:32% line:-1
最初はラインスペース

00:05:50.851 --> 00:05:55.823 align:start position:32% line:-2
矢印で表示されている
行間のスペースです

00:05:56.557 --> 00:05:57.758 align:start position:45% line:-1
同様に

00:05:58.892 --> 00:06:03.463 align:start position:25% line:-2
レイアウトに沿った
アイテム間スペースもあります

00:05:58.892 --> 00:06:03.463 align:start position:25% line:-2
レイアウトに沿った
アイテム間スペースもあります

00:06:03.564 --> 00:06:08.368 align:start position:25% line:-2
両方の最低スペースを定義する
プロパティは２つ

00:06:09.403 --> 00:06:11.905 align:start position:27% line:-1
それでは理解を深めるために

00:06:12.005 --> 00:06:15.409 align:start position:32% line:-2
90度回転させて
もう１度やってみます

00:06:15.576 --> 00:06:17.644 align:start position:38% line:-1
最初は左上です

00:06:17.878 --> 00:06:23.116 align:start position:29% line:-2
今度は横スクロールなので
縦にアイテムを並べます

00:06:23.784 --> 00:06:28.088 align:start position:21% line:-1
下まで一杯になったら上に戻ります

00:06:28.555 --> 00:06:31.191 align:start position:29% line:-1
パターンは分かりましたね

00:06:31.425 --> 00:06:33.760 align:start position:30% line:-1
コンテンツを全て入れて

00:06:34.027 --> 00:06:36.597 align:start position:27% line:-1
縦のレイアウトができました

00:06:36.864 --> 00:06:40.968 align:start position:29% line:-2
この方向での
ラインスペースはこれです

00:06:41.802 --> 00:06:44.838 align:start position:29% line:-1
アイテム間スペースはこれ

00:06:45.239 --> 00:06:47.574 align:start position:34% line:-1
必ず覚えてください

00:06:48.475 --> 00:06:49.910 align:start position:32% line:-1
以上がレイアウトです

00:06:51.311 --> 00:06:53.514 align:start position:30% line:-1
今度はデータソースです

00:06:54.381 --> 00:06:59.086 align:start position:21% line:-2
TableViewを知っていれば
すぐに使えます

00:06:59.353 --> 00:07:01.788 align:start position:30% line:-1
APIが似ているのです

00:06:59.353 --> 00:07:01.788 align:start position:30% line:-1
APIが似ているのです

00:07:02.089 --> 00:07:06.093 align:start position:30% line:-2
レイアウトは
コンテンツの表示場所で

00:07:06.193 --> 00:07:09.263 align:start position:25% line:-1
データソースがコンテンツです

00:07:09.897 --> 00:07:14.735 align:start position:27% line:-2
メソッドは３つあり
１つ目はセクションの数です

00:07:15.068 --> 00:07:18.438 align:start position:21% line:-1
入力しない場合 値は１になります

00:07:19.540 --> 00:07:24.144 align:start position:30% line:-2
２つ目はセクション内の
アイテムの数で

00:07:24.244 --> 00:07:27.381 align:start position:30% line:-2
各セクションの
アイテム数が分かります

00:07:27.748 --> 00:07:33.220 align:start position:7% line:-2
３つ目はコンテンツを提供する
cellForItemAtIndexPathです

00:07:34.188 --> 00:07:35.889 align:start position:30% line:-1
以上がデータソースです

00:07:36.623 --> 00:07:38.959 align:start position:25% line:-1
３つ目のトピックはデリゲート

00:07:39.059 --> 00:07:42.529 align:start position:27% line:-1
コードに入る前に説明します

00:07:42.629 --> 00:07:46.233 align:start position:34% line:-2
デリゲートの使用は
必須ではありません

00:07:47.134 --> 00:07:50.237 align:start position:14% line:-2
CollectionViewは
UIScrollViewのサブクラスです

00:07:50.337 --> 00:07:53.440 align:start position:18% line:-2
そのため
UIScrollViewが提供する―

00:07:53.540 --> 00:07:57.244 align:start position:21% line:-1
同じデリゲートを拡張して使います

00:07:57.411 --> 00:08:02.049 align:start position:29% line:-2
スクロールを変える時も
同じデリゲートを使います

00:07:57.411 --> 00:08:02.049 align:start position:29% line:-2
スクロールを変える時も
同じデリゲートを使います

00:08:02.149 --> 00:08:07.187 align:start position:29% line:-2
また ハイライトや選択の
細かい作業を可能にする―

00:08:07.321 --> 00:08:13.193 align:start position:7% line:-2
UICollectionViewDelegate
メソッドとも連携できます

00:08:14.461 --> 00:08:18.131 align:start position:5% line:-2
willDisplayItemと
didEndDisplayingItemのAPIが

00:08:18.232 --> 00:08:21.034 align:start position:32% line:-2
スクリーンの
新着情報を通知します

00:08:23.504 --> 00:08:27.241 align:start position:20% line:-2
UICollectionViewの
コードを説明する前に

00:08:27.341 --> 00:08:31.044 align:start position:32% line:-2
お話ししたかったのは
この３点です

00:08:31.145 --> 00:08:35.414 align:start position:30% line:-2
ではモハメドと交代して
実際に見てみましょう

00:08:35.515 --> 00:08:36.283 align:start position:43% line:-1
モハメド

00:08:36.416 --> 00:08:41.221 align:start position:5% line:-2
CollectionViewFlowLayoutを
使用するのに

00:08:41.321 --> 00:08:44.892 align:start position:23% line:-1
最初の縦のレイアウトは最適です

00:08:44.992 --> 00:08:47.861 align:start position:30% line:-1
そこで全てを行えるので

00:08:47.961 --> 00:08:52.466 align:start position:20% line:-2
UICollectionViewを
使うのに向いています

00:08:54.768 --> 00:08:59.540 align:start position:27% line:-2
更にカスタマイズするために
フローレイアウトではなく

00:08:59.640 --> 00:09:05.012 align:start position:5% line:-2
CollectionViewFlowLayoutの
サブクラスを見ます

00:08:59.640 --> 00:09:05.012 align:start position:5% line:-2
CollectionViewFlowLayoutの
サブクラスを見ます

00:09:05.112 --> 00:09:09.816 align:start position:14% line:-2
ColumnFlowLayoutクラスの
インスタンスを

00:09:09.917 --> 00:09:13.554 align:start position:25% line:-1
作成することから初めましょう

00:09:13.654 --> 00:09:17.791 align:start position:20% line:-2
そのインスタンスを使い
CollectionViewを作り

00:09:18.258 --> 00:09:21.195 align:start position:25% line:-1
ビュープロパティを設定します

00:09:21.295 --> 00:09:24.264 align:start position:20% line:-2
autoresizingMaskや
backgroundColorです

00:09:24.364 --> 00:09:28.335 align:start position:12% line:-1
ScrollViewプロパティも設定します

00:09:28.435 --> 00:09:32.506 align:start position:23% line:-1
これで希望どおりに表示されます

00:09:33.307 --> 00:09:38.645 align:start position:14% line:-2
ビュー階層に
CollectionViewを入れた後に

00:09:38.745 --> 00:09:43.951 align:start position:16% line:-2
一意識別子を使い
PersonCellクラスを登録します

00:09:44.985 --> 00:09:49.289 align:start position:21% line:-2
View Controllerを
データソースとして設定

00:09:49.389 --> 00:09:53.727 align:start position:29% line:-2
表示するセルの数や
データの種類などの情報を

00:09:53.827 --> 00:09:56.497 align:start position:34% line:-1
これで提供できます

00:09:57.631 --> 00:10:02.436 align:start position:27% line:-2
デリゲートとしても設定して
セル選択を可能にします

00:09:57.631 --> 00:10:02.436 align:start position:27% line:-2
デリゲートとしても設定して
セル選択を可能にします

00:10:03.170 --> 00:10:07.574 align:start position:27% line:-2
そして ２つのプロトコルに
準拠させます

00:10:07.774 --> 00:10:11.411 align:start position:23% line:-1
まずデータソースに準拠させます

00:10:12.045 --> 00:10:14.948 align:start position:27% line:-1
２つのメソッドを実装します

00:10:15.048 --> 00:10:20.020 align:start position:23% line:-2
１つ目は
セクション内のアイテムの数です

00:10:20.387 --> 00:10:25.292 align:start position:27% line:-2
people配列にある
人数やアイテムの数を返して

00:10:25.392 --> 00:10:28.462 align:start position:27% line:-2
データモデルオブジェクトを
表示させます

00:10:28.562 --> 00:10:31.899 align:start position:27% line:-1
２つ目に実装するメソッドは

00:10:31.999 --> 00:10:35.269 align:start position:7% line:-1
CellForItemAtIndexPathです

00:10:35.369 --> 00:10:38.839 align:start position:11% line:-2
一意識別子でCollectionViewから
セルを取り除き

00:10:39.606 --> 00:10:43.877 align:start position:11% line:-2
people配列のPersonオブジェクトを
セルに渡します

00:10:43.977 --> 00:10:49.049 align:start position:29% line:-2
データを実際に表示させて
セルを戻します

00:10:50.350 --> 00:10:53.987 align:start position:27% line:-2
最後に
選択をハンドルできるように

00:10:54.087 --> 00:10:58.892 align:start position:29% line:-2
デリゲートプロトコルの
任意メソッドを実装します

00:10:59.226 --> 00:11:03.230 align:start position:2% line:-2
まず
DidSelectItemAtIndexPathを追加

00:10:59.226 --> 00:11:03.230 align:start position:2% line:-2
まず
DidSelectItemAtIndexPathを追加

00:11:03.530 --> 00:11:07.668 align:start position:16% line:-2
feedViewControllerを
インスタンス化し

00:11:07.768 --> 00:11:11.038 align:start position:25% line:-1
２つ目のスクリーンを作ります

00:11:11.138 --> 00:11:13.740 align:start position:23% line:-1
表示する画像が誰か分かるように

00:11:13.841 --> 00:11:16.944 align:start position:20% line:-1
Personオブジェクトを渡します

00:11:17.044 --> 00:11:20.881 align:start position:18% line:-1
navControllerに置きます

00:11:21.181 --> 00:11:23.951 align:start position:34% line:-1
ではシミュレータで

00:11:24.051 --> 00:11:27.454 align:start position:30% line:-1
実際にやってみましょう

00:11:29.790 --> 00:11:30.424 align:start position:43% line:-1
始めます

00:11:30.524 --> 00:11:33.393 align:start position:38% line:-1
(拍手 喝采)

00:11:34.061 --> 00:11:38.065 align:start position:16% line:-1
これはCollectionViewです

00:11:38.165 --> 00:11:40.601 align:start position:29% line:-1
いくつかセルが見えますが

00:11:40.701 --> 00:11:43.403 align:start position:25% line:-1
表示サイズが正しくありません

00:11:43.504 --> 00:11:47.875 align:start position:27% line:-2
そこでカスタマイズしたいと
思います

00:11:47.975 --> 00:11:51.044 align:start position:25% line:-1
ではXcodeに戻りましょう

00:11:51.144 --> 00:11:54.815 align:start position:32% line:-1
そして 列のクラスを

00:11:55.482 --> 00:11:57.251 align:start position:43% line:-1
開きます

00:11:57.885 --> 00:12:02.356 align:start position:12% line:-2
先程の
ColumnFlowLayoutクラスです

00:11:57.885 --> 00:12:02.356 align:start position:12% line:-2
先程の
ColumnFlowLayoutクラスです

00:12:03.023 --> 00:12:03.824 align:start position:45% line:-1
そして

00:12:05.726 --> 00:12:07.961 align:start position:29% line:-1
必要な作業をお見せします

00:12:08.061 --> 00:12:13.333 align:start position:25% line:-2
既にprepareメソッドを
スタブに置き換えています

00:12:13.433 --> 00:12:16.603 align:start position:20% line:-2
UICollectionViewの
prepareメソッドが

00:12:16.703 --> 00:12:18.906 align:start position:23% line:-1
レイアウトの無効化で呼ばれます

00:12:19.039 --> 00:12:22.009 align:start position:0% line:-1
UICollectionViewFlowLayoutでは

00:12:22.576 --> 00:12:27.247 align:start position:27% line:-2
サイズの境界が変わると
レイアウトが無効化されます

00:12:27.347 --> 00:12:32.853 align:start position:29% line:-2
アプリケーションの向きや
サイズが変わった時です

00:12:33.887 --> 00:12:38.125 align:start position:16% line:-2
ですからCollectionViewの
サイズを考慮した

00:12:38.225 --> 00:12:41.295 align:start position:23% line:-1
カスタマイズを行うのに最適です

00:12:41.395 --> 00:12:45.165 align:start position:14% line:-2
セルに
CollectionViewの幅に関する

00:12:45.265 --> 00:12:47.067 align:start position:36% line:-1
機能を持たせます

00:12:47.367 --> 00:12:51.471 align:start position:23% line:-2
CollectionViewに
アイテムサイズのプロパティで

00:12:51.572 --> 00:12:54.308 align:start position:30% line:-1
希望サイズを知らせます

00:12:54.441 --> 00:12:56.743 align:start position:34% line:-1
実際にやってみます

00:12:57.377 --> 00:13:01.114 align:start position:34% line:-2
アイテムのサイズを
CGサイズにして

00:12:57.377 --> 00:13:01.114 align:start position:34% line:-2
アイテムのサイズを
CGサイズにして

00:13:01.215 --> 00:13:05.752 align:start position:16% line:-2
CollectionViewの境界幅に
合わせます

00:13:05.853 --> 00:13:08.088 align:start position:25% line:-1
レイアウトのマージンに合わせ

00:13:08.355 --> 00:13:10.724 align:start position:27% line:-1
高さを70ポイントにします

00:13:10.824 --> 00:13:13.227 align:start position:29% line:-1
これでデザインに合います

00:13:13.994 --> 00:13:19.099 align:start position:30% line:-2
ついでに見た目を
もう少し良くしましょう

00:13:19.199 --> 00:13:23.036 align:start position:23% line:-1
アイテム間スペースに合うように

00:13:23.136 --> 00:13:25.572 align:start position:30% line:-1
セクションを挿入します

00:13:25.806 --> 00:13:30.777 align:start position:23% line:-2
CollectionViewの
セーフエリアに全て収まるように

00:13:30.878 --> 00:13:35.315 align:start position:27% line:-2
挿入参照プロパティを
セーフエリアから設定します

00:13:35.549 --> 00:13:39.119 align:start position:27% line:-1
シミュレータでレイアウトが

00:13:39.219 --> 00:13:41.822 align:start position:30% line:-1
どう見えるか確認します

00:13:43.857 --> 00:13:46.860 align:start position:23% line:-1
スペックどおり表示されています

00:13:46.960 --> 00:13:49.029 align:start position:29% line:-1
デザイナーも満足でしょう

00:13:50.731 --> 00:13:55.035 align:start position:27% line:-2
画面を横にすると
セルのサイズが変更されます

00:13:55.135 --> 00:13:58.605 align:start position:21% line:-1
無効化コードが呼び出されたのです

00:13:59.673 --> 00:14:04.311 align:start position:23% line:-2
しかし
もっと良いレイアウトにできると

00:13:59.673 --> 00:14:04.311 align:start position:23% line:-2
しかし
もっと良いレイアウトにできると

00:14:04.411 --> 00:14:07.514 align:start position:29% line:-1
考える人もいると思います

00:14:08.382 --> 00:14:11.818 align:start position:25% line:-1
まだスペースが余っているので

00:14:11.919 --> 00:14:15.122 align:start position:23% line:-1
複数の列を表示させてみましょう

00:14:15.222 --> 00:14:18.225 align:start position:32% line:-2
フローレイアウトなら
簡単にできます

00:14:18.325 --> 00:14:22.963 align:start position:27% line:-2
スティーブが説明したように
フローレイアウトは

00:14:23.197 --> 00:14:27.267 align:start position:30% line:-2
１行にできるだけ多くの
アイテムを入れます

00:14:27.367 --> 00:14:30.404 align:start position:23% line:-1
そして 入らないと行を変えます

00:14:30.504 --> 00:14:35.542 align:start position:27% line:-2
つまり アイテムのサイズを
変更すると

00:14:35.809 --> 00:14:39.179 align:start position:27% line:-1
複数の列が作成されるのです

00:14:39.413 --> 00:14:43.083 align:start position:25% line:-1
Xcodeのレイアウトに戻り

00:14:43.784 --> 00:14:47.821 align:start position:30% line:-2
アイテムサイズの計算を
変更します

00:14:47.921 --> 00:14:51.658 align:start position:27% line:-1
サイズに合わせる設定を消し

00:14:51.758 --> 00:14:55.929 align:start position:25% line:-1
代わりに少し計算式を入れます

00:14:56.230 --> 00:15:00.367 align:start position:32% line:-2
まず 使用可能な幅は
前回と同じです

00:14:56.230 --> 00:15:00.367 align:start position:32% line:-2
まず 使用可能な幅は
前回と同じです

00:15:00.467 --> 00:15:03.437 align:start position:32% line:-2
これはマージンによる
境界のインセットです

00:15:03.637 --> 00:15:07.674 align:start position:34% line:-2
列の最低幅を決める
任意の定義は

00:15:07.774 --> 00:15:11.545 align:start position:29% line:-1
300ポイントになります

00:15:12.980 --> 00:15:17.651 align:start position:29% line:-2
この決められたスペースに
最大 何列まで入るかを

00:15:17.751 --> 00:15:20.787 align:start position:27% line:-1
両方の値を使って計算します

00:15:20.888 --> 00:15:23.991 align:start position:30% line:-1
求めた数値で幅を割ると

00:15:24.324 --> 00:15:26.426 align:start position:30% line:-1
最適なセルの幅がでます

00:15:26.493 --> 00:15:30.164 align:start position:21% line:-1
300ポイント以上かもしれません

00:15:30.564 --> 00:15:34.334 align:start position:25% line:-1
それをCGSizeに伝えます

00:15:34.802 --> 00:15:38.405 align:start position:29% line:-1
シミュレータに再び戻って

00:15:38.505 --> 00:15:41.108 align:start position:25% line:-1
レイアウトの更新を確認します

00:15:42.509 --> 00:15:45.913 align:start position:23% line:-1
前と同じように表示されています

00:15:46.680 --> 00:15:49.750 align:start position:29% line:-1
画面を横にして表示すると

00:15:49.850 --> 00:15:52.653 align:start position:30% line:-1
列が左右に並んでいます

00:15:54.621 --> 00:15:55.456 align:start position:41% line:-1
どうだい？

00:15:55.556 --> 00:15:59.927 align:start position:21% line:-1
簡単に調整できる良いレイアウトだ

00:16:00.427 --> 00:16:01.828 align:start position:36% line:-1
次のデザインは？

00:16:01.929 --> 00:16:04.698 align:start position:25% line:-1
フレンドリストは終わりにして

00:16:04.798 --> 00:16:08.135 align:start position:23% line:-1
モザイクのレイアウトを作ります

00:16:08.235 --> 00:16:10.070 align:start position:39% line:-1
いい考えだね

00:16:10.170 --> 00:16:13.774 align:start position:21% line:-1
スライドに戻って説明をしましょう

00:16:17.044 --> 00:16:22.282 align:start position:32% line:-2
このレイアウトを見て
何ができるか考えます

00:16:22.382 --> 00:16:26.019 align:start position:30% line:-2
私はフローレイアウトを
使う傾向にあります

00:16:26.119 --> 00:16:28.255 align:start position:32% line:-1
まず使ってみましょう

00:16:29.189 --> 00:16:34.261 align:start position:21% line:-2
このデザインに
フローレイアウトが適切か考えます

00:16:34.895 --> 00:16:40.133 align:start position:29% line:-2
３枚の写真が並ぶ
この箇所を拡大してみます

00:16:40.234 --> 00:16:45.105 align:start position:32% line:-2
このインスタンスには
左に大きな写真があり

00:16:45.205 --> 00:16:48.242 align:start position:25% line:-1
右には写真が縦に並んでいます

00:16:48.342 --> 00:16:52.913 align:start position:29% line:-2
フローレイアウトでは
左にアイテムを置いた後に

00:16:53.013 --> 00:16:56.483 align:start position:29% line:-2
次のアイテムを
空いている場所に置きます

00:16:56.583 --> 00:16:58.485 align:start position:29% line:-1
空きがなければ次の行です

00:16:58.952 --> 00:17:01.188 align:start position:29% line:-1
縦に並ぶ写真を改善します

00:16:58.952 --> 00:17:01.188 align:start position:29% line:-1
縦に並ぶ写真を改善します

00:17:01.288 --> 00:17:04.858 align:start position:30% line:-2
このレイアウトは
行配置に基づかないため

00:17:04.958 --> 00:17:09.363 align:start position:32% line:-2
フローレイアウトを
使うことはできません

00:17:09.695 --> 00:17:13.567 align:start position:23% line:-1
しかし試しに一度 使ってみます

00:17:15.301 --> 00:17:19.039 align:start position:32% line:-2
カスタムレイアウトを
作成しましょう

00:17:19.540 --> 00:17:24.578 align:start position:32% line:-2
難しくありません
４つの基本メソッドに

00:17:24.678 --> 00:17:28.816 align:start position:34% line:-2
もう１つメソッドを
追加するだけです

00:17:29.917 --> 00:17:32.052 align:start position:27% line:-1
４つのメソッドを説明します

00:17:32.686 --> 00:17:36.657 align:start position:16% line:-2
１つ目はCollectionViewの
コンテンツサイズ

00:17:37.224 --> 00:17:41.395 align:start position:14% line:-2
CollectionViewは
UIScrollViewのサブクラスです

00:17:41.495 --> 00:17:43.697 align:start position:21% line:-1
UIScrollViewの特徴は

00:17:43.797 --> 00:17:47.067 align:start position:32% line:-2
広いコンテンツ領域が
可視である点です

00:17:47.267 --> 00:17:51.772 align:start position:25% line:-2
そのため領域内で
快適にコンテンツを動かせます

00:17:52.105 --> 00:17:56.944 align:start position:21% line:-2
ScrollViewに伝えるべき
コンテンツサイズを

00:17:57.177 --> 00:18:00.214 align:start position:27% line:-1
どうやって求めるのでしょう

00:17:57.177 --> 00:18:00.214 align:start position:27% line:-1
どうやって求めるのでしょう

00:18:00.614 --> 00:18:03.550 align:start position:21% line:-1
コンテンツを含む長方形があります

00:18:03.650 --> 00:18:08.255 align:start position:34% line:-2
その長方形の領域の
サイズを出すのです

00:18:09.289 --> 00:18:12.726 align:start position:27% line:-1
以上がコンテンツサイズです

00:18:13.460 --> 00:18:18.432 align:start position:27% line:-2
次の２つのメソッドは
レイアウト属性を提供します

00:18:19.299 --> 00:18:22.703 align:start position:9% line:-2
１つ目はlayoutAttributesFor
ElementsInRectです

00:18:23.103 --> 00:18:27.608 align:start position:18% line:-2
これはCollectionViewが
画面に何を表示するか

00:18:27.708 --> 00:18:31.378 align:start position:29% line:-1
確認する時に呼び出します

00:18:31.745 --> 00:18:34.515 align:start position:23% line:-1
このクエリは幾何学領域からです

00:18:35.916 --> 00:18:40.954 align:start position:30% line:-2
もう１つのAPIは
特定のアイテムを探す―

00:18:41.054 --> 00:18:44.958 align:start position:14% line:-2
LayoutAttributes
ForItemAtIndexPathです

00:18:45.792 --> 00:18:48.595 align:start position:25% line:-1
後ほどモハメドが説明しますが

00:18:48.695 --> 00:18:53.267 align:start position:29% line:-2
この２つのAPIでは
処理能力がカギとなります

00:18:57.070 --> 00:19:01.041 align:start position:25% line:-2
４つ目のカスタムレイアウトの
サブクラスは

00:18:57.070 --> 00:19:01.041 align:start position:25% line:-2
４つ目のカスタムレイアウトの
サブクラスは

00:19:01.141 --> 00:19:04.311 align:start position:27% line:-1
prepareメソッドです

00:19:04.411 --> 00:19:06.547 align:start position:34% line:-1
これはレイアウトが

00:19:06.647 --> 00:19:09.783 align:start position:23% line:-1
無効化される度に呼び出されます

00:19:09.917 --> 00:19:14.421 align:start position:32% line:-2
キャッシュ保存したい
レイアウト属性や

00:19:14.721 --> 00:19:19.526 align:start position:32% line:-2
コンテンツのサイズを
計算する良い機会です

00:19:23.363 --> 00:19:26.867 align:start position:25% line:-1
追加のAPIについて話します

00:19:26.967 --> 00:19:30.170 align:start position:11% line:-2
shouldInvalidateLayout
(forBoundsChange:)です

00:19:30.704 --> 00:19:34.908 align:start position:25% line:-2
これは境界が
変更される度に呼び出されます

00:19:35.008 --> 00:19:38.445 align:start position:21% line:-2
これもUIScrollViewの
サブクラスです

00:19:38.545 --> 00:19:41.982 align:start position:25% line:-1
境界の変更とは何を指すのか？

00:19:42.082 --> 00:19:46.487 align:start position:23% line:-1
スクロール中に原点が変わったり

00:19:46.587 --> 00:19:51.492 align:start position:29% line:-2
アプリケーションと共に
サイズが変わったりします

00:19:51.592 --> 00:19:54.528 align:start position:29% line:-1
そのため スクロール時や

00:19:55.028 --> 00:19:57.998 align:start position:23% line:-1
絵文字の使用中に呼び出されます

00:19:58.098 --> 00:20:01.301 align:start position:25% line:-1
うまく設定する必要があります

00:19:58.098 --> 00:20:01.301 align:start position:25% line:-1
うまく設定する必要があります

00:20:01.401 --> 00:20:07.374 align:start position:9% line:-2
UICollectionViewLayoutは
デフォルトでfalseを返します

00:20:07.841 --> 00:20:11.245 align:start position:23% line:-1
変更したければ ここで行います

00:20:11.845 --> 00:20:15.782 align:start position:2% line:-2
これに対して
UICollectionViewFlowLayoutは

00:20:15.883 --> 00:20:18.786 align:start position:20% line:-1
原点が変わるとfalseを返します

00:20:18.886 --> 00:20:23.223 align:start position:32% line:-2
スクロール時は
デフォルトに任せます

00:20:23.323 --> 00:20:28.328 align:start position:21% line:-2
機器が回転してアプリケーションの
サイズが変わると

00:20:28.428 --> 00:20:29.897 align:start position:34% line:-1
trueを返します

00:20:30.497 --> 00:20:34.167 align:start position:23% line:-2
例外は
フローティングヘッダとフッタで

00:20:34.268 --> 00:20:37.304 align:start position:23% line:-1
スクロール中に再計算が必要です

00:20:37.404 --> 00:20:40.541 align:start position:23% line:-1
これはカスタム無効化で行います

00:20:40.741 --> 00:20:43.844 align:start position:32% line:-1
理論はここまでにして

00:20:44.311 --> 00:20:46.180 align:start position:32% line:-1
実際に見てみましょう

00:20:46.580 --> 00:20:49.416 align:start position:23% line:-1
では このレイアウトのコードを

00:20:49.516 --> 00:20:52.753 align:start position:25% line:-1
モハメドに説明してもらいます

00:20:54.354 --> 00:20:56.089 align:start position:36% line:-1
では始めましょう

00:20:56.190 --> 00:20:59.293 align:start position:29% line:-1
このレイアウトで使用する

00:20:59.393 --> 00:21:02.196 align:start position:29% line:-1
サブクラスを入力しました

00:20:59.393 --> 00:21:02.196 align:start position:29% line:-1
サブクラスを入力しました

00:21:02.296 --> 00:21:06.133 align:start position:4% line:-1
UICollectionViewLayoutの直下で

00:21:06.233 --> 00:21:09.536 align:start position:2% line:-2
UICollectionViewFlowLayoutの
下ではありません

00:21:09.636 --> 00:21:13.207 align:start position:29% line:-2
その理由は
スティーブが説明しました

00:21:13.307 --> 00:21:16.844 align:start position:2% line:-2
UICollectionViewFlowLayoutは
カスタムモザイクを

00:21:16.944 --> 00:21:19.813 align:start position:30% line:-1
サポートしないからです

00:21:20.814 --> 00:21:24.818 align:start position:23% line:-1
まずインスタンス変数を設定して

00:21:24.918 --> 00:21:29.790 align:start position:30% line:-2
後で重要な情報を
参照できるようにします

00:21:30.624 --> 00:21:36.363 align:start position:21% line:-2
１つ目は
コンテンツ境界のCGRectです

00:21:36.463 --> 00:21:40.734 align:start position:21% line:-2
CollectionView内の
アイテムの境界を示します

00:21:41.702 --> 00:21:46.273 align:start position:25% line:-2
２つ目は
キャッシュ済みの属性配列です

00:21:46.373 --> 00:21:50.277 align:start position:30% line:-2
後でレイアウト属性を
参照することができます

00:21:51.745 --> 00:21:56.316 align:start position:20% line:-2
ではレイアウトに
prepareメソッドを実装します

00:21:57.050 --> 00:22:01.088 align:start position:25% line:-2
レイアウト作業に
prepareが使われるのは

00:21:57.050 --> 00:22:01.088 align:start position:25% line:-2
レイアウト作業に
prepareが使われるのは

00:22:01.188 --> 00:22:04.458 align:start position:32% line:-2
無効化の度に
呼び出されるからです

00:22:04.591 --> 00:22:08.295 align:start position:30% line:-2
レイアウトを
ここに作れば終わりです

00:22:08.395 --> 00:22:11.765 align:start position:32% line:-2
もっと頻繁に呼ばれる
メソッドのように

00:22:11.865 --> 00:22:14.434 align:start position:25% line:-1
難しい作業や計算は要りません

00:22:18.472 --> 00:22:23.844 align:start position:25% line:-2
まずキャッシュ属性と
コンテンツ境界をリセットして

00:22:23.944 --> 00:22:28.649 align:start position:36% line:-2
古い無効化情報は
全て消去します

00:22:29.516 --> 00:22:34.454 align:start position:20% line:-2
次にCollectionViewの
全てのアイテムに対し

00:22:35.355 --> 00:22:38.325 align:start position:36% line:-1
属性を設定します

00:22:38.425 --> 00:22:42.496 align:start position:32% line:-2
レイアウトごとに
必要なものが違うので

00:22:42.596 --> 00:22:44.264 align:start position:38% line:-1
詳細は省きます

00:22:44.364 --> 00:22:49.436 align:start position:34% line:-2
ここでサイズ 位置
変化などを計算して

00:22:49.536 --> 00:22:53.407 align:start position:30% line:-2
セルを自分のデザインに
合わせるのです

00:22:53.674 --> 00:22:58.011 align:start position:32% line:-2
属性を設定したら
重要な作業を行います

00:22:58.111 --> 00:23:01.415 align:start position:30% line:-2
後で使うため
属性をキャッシュ保存し

00:22:58.111 --> 00:23:01.415 align:start position:30% line:-2
後で使うため
属性をキャッシュ保存し

00:23:01.515 --> 00:23:03.951 align:start position:25% line:-1
キャッシュ属性配列に置きます

00:23:05.219 --> 00:23:09.890 align:start position:25% line:-2
次にコンテンツ境界矩形を使い
フレームを統合し

00:23:10.057 --> 00:23:12.626 align:start position:23% line:-1
コンテンツ境界を最新に保ちます

00:23:14.127 --> 00:23:17.931 align:start position:18% line:-1
prepareメソッドは作動したので

00:23:18.131 --> 00:23:22.035 align:start position:27% line:-2
レイアウトの
残りのメソッドを実装します

00:23:24.338 --> 00:23:27.508 align:start position:20% line:-2
まずCollectionViewの
コンテンツサイズです

00:23:27.608 --> 00:23:30.177 align:start position:21% line:-1
prepareで設定しているので

00:23:30.277 --> 00:23:33.313 align:start position:32% line:-2
コンテンツ境界を
サイズとして返します

00:23:35.449 --> 00:23:38.585 align:start position:7% line:-2
次はshouldInvalidateLayout
(forBoundsChange:)です

00:23:39.453 --> 00:23:43.257 align:start position:27% line:-2
スクロール中に
無効化する必要のある要素は

00:23:43.357 --> 00:23:45.659 align:start position:25% line:-1
レイアウトに含まれていません

00:23:45.759 --> 00:23:49.897 align:start position:23% line:-2
フローティングヘッダもフッタも
ありません

00:23:49.997 --> 00:23:54.468 align:start position:23% line:-2
境界のサイズが変更された時のみ
無効化します

00:23:54.568 --> 00:23:57.871 align:start position:32% line:-2
新しい境界のサイズが
現在のサイズと

00:23:57.971 --> 00:24:02.242 align:start position:23% line:-1
異なる場合にtrueを返します

00:23:57.971 --> 00:24:02.242 align:start position:23% line:-1
異なる場合にtrueを返します

00:24:04.111 --> 00:24:07.414 align:start position:4% line:-2
その後layoutAttributesForItem
AtIndexPathを実装します

00:24:07.514 --> 00:24:11.518 align:start position:23% line:-2
準備はprepareメソッドで
行っています

00:24:11.618 --> 00:24:15.656 align:start position:16% line:-2
そのため
要求したIndexPathに合う属性を

00:24:15.756 --> 00:24:18.392 align:start position:32% line:-1
配列から選ぶだけです

00:24:19.726 --> 00:24:21.762 align:start position:34% line:-1
最後に実装するのは

00:24:22.196 --> 00:24:24.698 align:start position:2% line:-2
layoutAttributesForElements
InRectです

00:24:25.232 --> 00:24:30.137 align:start position:27% line:-2
このメソッドで呼び出された
矩形の範囲は

00:24:30.237 --> 00:24:32.806 align:start position:16% line:-2
CollectionViewより大きい
こともあります

00:24:32.906 --> 00:24:35.776 align:start position:23% line:-1
CollectionViewは

00:24:35.876 --> 00:24:38.312 align:start position:23% line:-1
領域に合う属性だけを要求します

00:24:38.545 --> 00:24:44.618 align:start position:16% line:-2
CollectionViewの矩形内に
表示されるアイテムに

00:24:44.718 --> 00:24:49.323 align:start position:29% line:-2
対応する属性を含む配列を
返す必要があります

00:24:50.557 --> 00:24:53.260 align:start position:32% line:-1
これは簡単に行えます

00:24:53.360 --> 00:24:56.463 align:start position:23% line:-1
キャッシュ保存された属性配列を

00:24:56.563 --> 00:25:00.000 align:start position:21% line:-1
属性フレームでフィルタにかけます

00:25:00.100 --> 00:25:02.870 align:start position:25% line:-1
属性フレームが矩形と交われば

00:25:02.970 --> 00:25:06.273 align:start position:29% line:-1
これを返すことができます

00:25:06.473 --> 00:25:12.179 align:start position:23% line:-2
シミュレータで
レイアウトを確認してみましょう

00:25:13.180 --> 00:25:16.950 align:start position:32% line:-2
フィードを１つ選んで
レイアウトを出します

00:25:17.050 --> 00:25:21.755 align:start position:29% line:-2
画像が奇麗に
モザイク配置されています

00:25:22.456 --> 00:25:26.427 align:start position:27% line:-2
横にすると
セルのサイズが変更されます

00:25:26.527 --> 00:25:29.830 align:start position:25% line:-1
全てが適切に更新されています

00:25:35.502 --> 00:25:39.239 align:start position:29% line:-2
しかし スクロール機能が
いま一つです

00:25:39.339 --> 00:25:41.241 align:start position:36% line:-1
すごく悪いですね

00:25:41.708 --> 00:25:44.177 align:start position:30% line:-1
ご存じかもしれませんが

00:25:44.278 --> 00:25:47.815 align:start position:21% line:-1
コードに戻り問題を確認しましょう

00:25:49.483 --> 00:25:53.086 align:start position:29% line:-2
矩形内のレイアウト属性を
見てみます

00:25:53.187 --> 00:25:57.257 align:start position:32% line:-2
これはスクロール中に
よく呼び出されます

00:25:58.926 --> 00:26:03.464 align:start position:32% line:-2
この関数は配列全体を
フィルタにかけます

00:25:58.926 --> 00:26:03.464 align:start position:32% line:-2
この関数は配列全体を
フィルタにかけます

00:26:03.564 --> 00:26:08.202 align:start position:27% line:-2
そのためアイテムが増えると
作業が大変になります

00:26:08.302 --> 00:26:12.840 align:start position:23% line:-2
写真が増えると
スクロールの速度が落ちるのです

00:26:14.541 --> 00:26:20.414 align:start position:25% line:-2
こういう時は 一段階前に戻り
レイアウトの性質と

00:26:20.514 --> 00:26:23.817 align:start position:25% line:-1
最適化について考えてください

00:26:24.184 --> 00:26:26.487 align:start position:29% line:-1
レイアウトの要求は何か？

00:26:27.688 --> 00:26:30.824 align:start position:21% line:-1
それは アプリケーションのセルが

00:26:30.924 --> 00:26:33.260 align:start position:29% line:-1
上下 左右に並ぶことです

00:26:33.427 --> 00:26:37.698 align:start position:30% line:-2
つまり属性は既に
キャッシュ属性配列内で

00:26:37.798 --> 00:26:42.135 align:start position:32% line:-2
フレームの最低Ｙ値で
並べられているのです

00:26:43.704 --> 00:26:45.172 align:start position:32% line:-1
配列はソート済みです

00:26:45.272 --> 00:26:49.042 align:start position:29% line:-2
従って フィルタではなく
２分探索を使うと

00:26:49.142 --> 00:26:52.980 align:start position:23% line:-1
検索を迅速に行うことができます

00:26:53.614 --> 00:26:56.417 align:start position:29% line:-1
まずスピードの遅い実装を

00:26:57.151 --> 00:26:59.319 align:start position:38% line:-1
削除しましょう

00:26:59.486 --> 00:27:02.322 align:start position:23% line:-1
そして 速いものと入れ替えます

00:26:59.486 --> 00:27:02.322 align:start position:23% line:-1
そして 速いものと入れ替えます

00:27:04.892 --> 00:27:08.061 align:start position:27% line:-1
ステップごとに説明をします

00:27:08.161 --> 00:27:12.900 align:start position:30% line:-2
まず初めに
準備した２分探索機能を

00:27:13.367 --> 00:27:16.236 align:start position:32% line:-1
使うことから始めます

00:27:16.336 --> 00:27:21.275 align:start position:25% line:-2
配列と矩形内の
様々なインデックスを使います

00:27:22.476 --> 00:27:27.448 align:start position:32% line:-2
属性がフレームを持ち
矩形内にある場合

00:27:27.548 --> 00:27:31.285 align:start position:27% line:-2
配列内で属性を
インデックスとして返します

00:27:32.953 --> 00:27:36.056 align:start position:29% line:-2
このインデックスを使って
矩形のための

00:27:36.156 --> 00:27:39.760 align:start position:30% line:-2
残りの属性を
設定することができます

00:27:39.893 --> 00:27:44.498 align:start position:32% line:-2
配列内でループさせて
属性を選んでいき

00:27:44.598 --> 00:27:49.703 align:start position:32% line:-2
矩形外の属性を
見つけるまで続けます

00:27:49.803 --> 00:27:51.772 align:start position:34% line:-1
この方法は迅速です

00:27:51.872 --> 00:27:54.441 align:start position:25% line:-1
配列にある何千ものアイテムを

00:27:54.641 --> 00:27:58.278 align:start position:23% line:-1
何千回も検索しなくていいのです

00:27:58.479 --> 00:28:01.582 align:start position:27% line:-1
スクロールのアルゴリズムを

00:27:58.479 --> 00:28:01.582 align:start position:27% line:-1
スクロールのアルゴリズムを

00:28:01.682 --> 00:28:04.618 align:start position:25% line:-1
シミュレータで確認してみます

00:28:07.221 --> 00:28:11.592 align:start position:34% line:-2
スクロールすると
速いのが分かります

00:28:12.526 --> 00:28:13.594 align:start position:32% line:-1
どうだいスティーブ？

00:28:13.727 --> 00:28:17.030 align:start position:27% line:-2
いいね
２つのレイアウトが完成した

00:28:17.130 --> 00:28:18.232 align:start position:43% line:-1
次は何？

00:28:18.665 --> 00:28:22.202 align:start position:29% line:-1
残りはフレンドリスト用の

00:28:22.302 --> 00:28:24.705 align:start position:30% line:-1
更新アニメーションです

00:28:24.805 --> 00:28:29.443 align:start position:30% line:-2
“すごくクールな
更新アニメーション”を

00:28:29.543 --> 00:28:32.913 align:start position:29% line:-1
スライドで見てみましょう

00:28:33.514 --> 00:28:36.783 align:start position:29% line:-1
アニメーションのビデオを

00:28:36.884 --> 00:28:39.453 align:start position:36% line:-1
実際に見てみます

00:28:40.454 --> 00:28:43.357 align:start position:29% line:-1
画面上の最後のアイテムが

00:28:43.457 --> 00:28:47.261 align:start position:29% line:-2
誰かが写真を投稿したので
更新されました

00:28:47.361 --> 00:28:51.398 align:start position:34% line:-2
そして３番目の
サミアのアイテムは

00:28:51.498 --> 00:28:53.767 align:start position:32% line:-1
画面から消されました

00:28:53.867 --> 00:28:56.503 align:start position:27% line:-1
今３つのことが行われました

00:28:56.603 --> 00:28:59.840 align:start position:29% line:-1
リロード 移動 削除です

00:29:00.407 --> 00:29:02.643 align:start position:29% line:-1
モハメドがシミュレータで

00:29:02.743 --> 00:29:05.412 align:start position:34% line:-1
やり方を説明します

00:29:06.113 --> 00:29:07.281 align:start position:39% line:-1
では始めます

00:29:08.515 --> 00:29:13.620 align:start position:27% line:-2
複数の更新アニメーションを
同時に行っています

00:29:13.954 --> 00:29:19.092 align:start position:20% line:-2
UICollectionViewと
UITableViewが提供する―

00:29:19.193 --> 00:29:21.728 align:start position:7% line:-2
performBatchUpdatesのAPIが
使えます

00:29:21.828 --> 00:29:25.866 align:start position:25% line:-1
これで更新とアニメーションが

00:29:25.966 --> 00:29:30.137 align:start position:25% line:-1
同時に実行されるようにします

00:29:30.470 --> 00:29:35.676 align:start position:14% line:-2
performBatchUpdatesを
呼び出します

00:29:35.776 --> 00:29:38.278 align:start position:11% line:-1
データソースとCollectionViewの

00:29:38.378 --> 00:29:41.048 align:start position:27% line:-1
両方の更新をここで行います

00:29:41.148 --> 00:29:45.819 align:start position:21% line:-1
これは更新が矛盾を生まないように

00:29:45.919 --> 00:29:50.190 align:start position:23% line:-1
同期させる最善の方法と言えます

00:29:50.757 --> 00:29:54.962 align:start position:30% line:-2
初めに データソースの
最後のアイテムを

00:29:55.062 --> 00:29:57.464 align:start position:32% line:-1
更新したいと思います

00:29:57.564 --> 00:30:02.102 align:start position:29% line:-2
下から２番目を削除し
最後を１番上に持ってきて

00:29:57.564 --> 00:30:02.102 align:start position:29% line:-2
下から２番目を削除し
最後を１番上に持ってきて

00:30:02.202 --> 00:30:06.406 align:start position:25% line:-1
アニメーションを表示させます

00:30:06.673 --> 00:30:11.178 align:start position:30% line:-2
シミュレータで
レイアウトを確認します

00:30:11.278 --> 00:30:15.682 align:start position:25% line:-2
更新コードを
右上の更新ボタンで送りました

00:30:17.985 --> 00:30:18.919 align:start position:41% line:-1
おかしいな

00:30:19.086 --> 00:30:20.053 align:start position:41% line:-1
どうした？

00:30:22.523 --> 00:30:23.557 align:start position:41% line:-1
何てことだ

00:30:24.691 --> 00:30:25.325 align:start position:43% line:-1
どうした

00:30:25.425 --> 00:30:29.062 align:start position:32% line:-2
私もiOSのコードで
同じ画面を見たよ

00:30:29.797 --> 00:30:31.398 align:start position:30% line:-1
ステージで起こるなんて

00:30:34.468 --> 00:30:38.639 align:start position:32% line:-2
時間があまりないので
データをリロードして

00:30:38.739 --> 00:30:42.376 align:start position:21% line:-1
アニメーションをやり直さないか？

00:30:42.476 --> 00:30:43.443 align:start position:43% line:-1
本気で？

00:30:43.544 --> 00:30:48.115 align:start position:43% line:-1
(拍手)

00:30:48.215 --> 00:30:52.486 align:start position:27% line:-2
でも“すごくクールな
更新アニメーション”を失い

00:30:52.586 --> 00:30:55.789 align:start position:27% line:-1
ユーザの期待に応えられない

00:30:56.557 --> 00:30:59.259 align:start position:34% line:-1
確かにそのとおりだ

00:30:59.359 --> 00:31:00.527 align:start position:38% line:-1
分かってくれた

00:30:59.359 --> 00:31:00.527 align:start position:38% line:-1
分かってくれた

00:31:00.627 --> 00:31:02.596 align:start position:34% line:-1
ではスライドに戻り

00:31:02.996 --> 00:31:07.100 align:start position:30% line:-2
アニメーションを
救えるか見てみましょう

00:31:07.734 --> 00:31:08.802 align:start position:34% line:-1
これは前に見ました

00:31:08.902 --> 00:31:09.970 align:start position:46% line:-1
では

00:31:10.270 --> 00:31:15.175 align:start position:32% line:-2
このデバッグ例外が
示すものを見てみます

00:31:15.475 --> 00:31:18.579 align:start position:23% line:-1
indexPathの0-3から

00:31:18.679 --> 00:31:21.582 align:start position:30% line:-1
削除と移動を試みました

00:31:21.682 --> 00:31:25.519 align:start position:29% line:-2
４番目のアイテムを
リロードして移動しました

00:31:26.487 --> 00:31:29.823 align:start position:25% line:-2
４番でなく
３番目の0-2を削除したはず

00:31:30.057 --> 00:31:31.091 align:start position:43% line:-1
そうだね

00:31:31.191 --> 00:31:33.560 align:start position:38% line:-1
何かおかしいな

00:31:33.660 --> 00:31:38.799 align:start position:11% line:-2
まずperformBatchUpdatesの
APIを確認して

00:31:38.899 --> 00:31:42.202 align:start position:29% line:-2
ハイレベルな原則について
お話しします

00:31:42.302 --> 00:31:45.105 align:start position:27% line:-1
このAPIを使用する目的は

00:31:45.205 --> 00:31:49.710 align:start position:23% line:-1
同時に複数の更新を行うことです

00:31:49.810 --> 00:31:54.181 align:start position:25% line:-2
そして全てに
アニメーションを演出させます

00:31:54.281 --> 00:31:58.619 align:start position:14% line:-1
CollectionViewの更新と共に

00:31:58.719 --> 00:32:02.923 align:start position:32% line:-2
データソースの更新を
必ず行ってください

00:31:58.719 --> 00:32:02.923 align:start position:32% line:-2
データソースの更新を
必ず行ってください

00:32:03.190 --> 00:32:07.628 align:start position:12% line:-1
CollectionViewに関することは

00:32:07.728 --> 00:32:10.697 align:start position:18% line:-1
TableViewにも当てはまります

00:32:11.398 --> 00:32:14.268 align:start position:34% line:-1
では見てみましょう

00:32:14.368 --> 00:32:18.038 align:start position:16% line:-1
CollectionViewの更新では

00:32:18.138 --> 00:32:23.043 align:start position:25% line:-2
挿入 移動 削除を行う順番は
重要ではありません

00:32:23.544 --> 00:32:27.347 align:start position:27% line:-1
しかしデータソースの更新で

00:32:27.448 --> 00:32:31.752 align:start position:23% line:-2
データソースの構成を変える時は
順序が重要です

00:32:32.352 --> 00:32:35.556 align:start position:23% line:-1
分かりやすいように例を挙げます

00:32:35.656 --> 00:32:39.660 align:start position:34% line:-2
３つの要素を含む
配列が２つあります

00:32:39.960 --> 00:32:43.931 align:start position:32% line:-2
理解しやすいように
削除と挿入を行います

00:32:44.031 --> 00:32:47.201 align:start position:29% line:-1
１回目は削除を最初に行い

00:32:47.301 --> 00:32:50.304 align:start position:23% line:-1
２回目は削除を２番目に行います

00:32:50.671 --> 00:32:54.041 align:start position:23% line:-1
こうすると感覚的に理解できます

00:32:54.308 --> 00:32:56.477 align:start position:29% line:-1
１番目のアイテムを削除し

00:32:57.177 --> 00:33:00.280 align:start position:27% line:-1
インデックス１に挿入します

00:32:57.177 --> 00:33:00.280 align:start position:27% line:-1
インデックス１に挿入します

00:33:01.148 --> 00:33:06.120 align:start position:27% line:-2
２つ目は逆に
挿入をした後に 削除します

00:33:06.520 --> 00:33:11.258 align:start position:30% line:-2
違う結果が出るので
悪い例だと思うでしょう

00:33:12.326 --> 00:33:15.929 align:start position:12% line:-2
これをCollectionViewの更新と
比較します

00:33:16.029 --> 00:33:20.701 align:start position:11% line:-2
BatchUpdates経由の
CollectionViewの更新が２つあり

00:33:20.834 --> 00:33:24.304 align:start position:32% line:-2
データソースの更新は
していません

00:33:24.872 --> 00:33:27.007 align:start position:30% line:-1
１つは挿入した後に削除

00:33:27.107 --> 00:33:30.644 align:start position:32% line:-2
もう１つは
削除した後に挿入です

00:33:30.744 --> 00:33:32.813 align:start position:29% line:-1
結果は全く同じになります

00:33:33.347 --> 00:33:37.751 align:start position:30% line:-2
エンジニアとしては
その理由が気になります

00:33:38.886 --> 00:33:42.956 align:start position:18% line:-2
なぜCollectionViewでは
更新の順番が重要でなく

00:33:43.056 --> 00:33:44.892 align:start position:27% line:-1
データソースでは重要なのか

00:33:45.359 --> 00:33:47.795 align:start position:29% line:-1
ステップごとに見てみます

00:33:47.895 --> 00:33:49.696 align:start position:38% line:-1
１番目の削除は

00:33:50.030 --> 00:33:53.700 align:start position:16% line:-1
indexPathで降順に処理されます

00:33:54.268 --> 00:33:57.070 align:start position:23% line:-1
indexPathを説明します

00:33:57.171 --> 00:33:59.773 align:start position:18% line:-1
BatchUpdatesが始まる前は

00:33:59.873 --> 00:34:03.343 align:start position:23% line:-1
データソースは更新前の状態です

00:33:59.873 --> 00:34:03.343 align:start position:23% line:-1
データソースは更新前の状態です

00:34:03.944 --> 00:34:08.415 align:start position:21% line:-1
終わると更新後の状態に移行します

00:34:08.514 --> 00:34:13.687 align:start position:25% line:-2
indexPathは
削除に対し常に更新前の状態を

00:34:14.621 --> 00:34:16.156 align:start position:41% line:-1
参照します

00:34:16.255 --> 00:34:20.694 align:start position:16% line:-2
一方 挿入は
indexPathで昇順に処理されます

00:34:20.793 --> 00:34:24.231 align:start position:16% line:-1
よってindexPathは挿入に対して

00:34:24.331 --> 00:34:28.668 align:start position:25% line:-1
常に更新後の状態を参照します

00:34:29.536 --> 00:34:34.741 align:start position:21% line:-2
移動はこの２つを混ぜたもので
indexPathからの更新前と

00:34:34.842 --> 00:34:39.746 align:start position:30% line:-2
indexPathへの
更新後の状態があります

00:34:41.148 --> 00:34:44.217 align:start position:25% line:-1
リロードはスーパーコマンドで

00:34:44.318 --> 00:34:48.355 align:start position:30% line:-2
削除と挿入に
分解することができます

00:34:49.056 --> 00:34:52.326 align:start position:23% line:-1
リロードのindexPathは

00:34:52.426 --> 00:34:55.462 align:start position:27% line:-1
更新前の状態を示しています

00:34:56.063 --> 00:35:00.033 align:start position:25% line:-1
リロードの仕組みを理解すると

00:34:56.063 --> 00:35:00.033 align:start position:25% line:-1
リロードの仕組みを理解すると

00:35:00.134 --> 00:35:04.938 align:start position:29% line:-2
今回のアプリケーションの
エラーが分かってきます

00:35:05.372 --> 00:35:10.778 align:start position:23% line:-2
リロードでの削除が
移動と矛盾を起こしているのです

00:35:10.878 --> 00:35:13.180 align:start position:30% line:-1
後でコードで修正します

00:35:14.248 --> 00:35:17.951 align:start position:25% line:-1
参考までに紹介しておきますが

00:35:18.052 --> 00:35:23.557 align:start position:18% line:-2
これがCollectionViewが
作動しなくなる原因です

00:35:25.325 --> 00:35:29.730 align:start position:25% line:-2
どうやって
これらの知識を活用できるのか

00:35:29.830 --> 00:35:33.133 align:start position:27% line:-2
どのように
データソースの更新を適用し

00:35:33.233 --> 00:35:36.937 align:start position:23% line:-1
全てが同期するように保てるのか

00:35:37.037 --> 00:35:39.173 align:start position:29% line:-1
４つの基本原則があります

00:35:39.373 --> 00:35:43.243 align:start position:25% line:-1
移動を 削除と挿入に分解して

00:35:43.710 --> 00:35:47.047 align:start position:30% line:-1
２つのリストに分けます

00:35:47.981 --> 00:35:52.085 align:start position:27% line:-2
まずindexPath上で
削除を降順で処理し

00:35:52.319 --> 00:35:55.355 align:start position:30% line:-1
挿入を昇順で適用します

00:35:55.756 --> 00:35:58.192 align:start position:30% line:-1
これをやれば大丈夫です

00:35:59.727 --> 00:36:01.428 align:start position:32% line:-1
データのリロードは？

00:35:59.727 --> 00:36:01.428 align:start position:32% line:-1
データのリロードは？

00:36:01.528 --> 00:36:04.798 align:start position:30% line:-2
モハメドが言ったように
リロードは

00:36:04.898 --> 00:36:06.733 align:start position:30% line:-1
ボタン１つで終わります

00:36:07.234 --> 00:36:09.737 align:start position:25% line:-1
しかしアニメーションが出せず

00:36:09.837 --> 00:36:12.306 align:start position:30% line:-1
荒っぽいアプローチです

00:36:12.406 --> 00:36:16.477 align:start position:23% line:-1
アニメーションを提供したいので

00:36:16.577 --> 00:36:19.880 align:start position:23% line:-1
これは特別な時にしか使いません

00:36:20.214 --> 00:36:23.116 align:start position:27% line:-1
モハメド コードを修正して

00:36:23.217 --> 00:36:27.521 align:start position:25% line:-2
更新アニメーションを出せるか
試してみよう

00:36:27.621 --> 00:36:29.356 align:start position:36% line:-1
名誉挽回の時間だ

00:36:29.890 --> 00:36:34.995 align:start position:25% line:-2
スティーブが説明した
修正ガイドラインを使用します

00:36:35.095 --> 00:36:37.965 align:start position:29% line:-1
まず古い実装を削除します

00:36:38.966 --> 00:36:44.738 align:start position:30% line:-2
更新はリロード 削除
移動から成っていました

00:36:44.838 --> 00:36:50.310 align:start position:20% line:-2
そしてリロードと移動は
同じindexPathを使いました

00:36:50.410 --> 00:36:52.613 align:start position:34% line:-1
そこが矛盾点でした

00:36:52.713 --> 00:36:55.782 align:start position:25% line:-1
まず この２つを切り離します

00:36:55.883 --> 00:37:00.921 align:start position:7% line:-2
リロードを
performBatchUpdatesに移します

00:36:55.883 --> 00:37:00.921 align:start position:7% line:-2
リロードを
performBatchUpdatesに移します

00:37:02.389 --> 00:37:06.326 align:start position:25% line:-1
そしてデータソースを更新して

00:37:06.427 --> 00:37:10.130 align:start position:12% line:-2
リロードのアイテムを
CollectionViewに呼び出します

00:37:10.230 --> 00:37:14.601 align:start position:7% line:-2
performWithoutAnimationで
実行しています

00:37:14.701 --> 00:37:17.804 align:start position:29% line:-1
実はスペックをよく見ると

00:37:18.205 --> 00:37:20.941 align:start position:21% line:-1
アニメーションは使われていません

00:37:22.276 --> 00:37:27.247 align:start position:32% line:-2
次に 残りの更新の
削除と移動を行います

00:37:29.817 --> 00:37:32.186 align:start position:32% line:-1
状況を整理しましょう

00:37:32.286 --> 00:37:36.256 align:start position:23% line:-1
index 2に削除があります

00:37:36.723 --> 00:37:40.761 align:start position:27% line:-2
index 3のアイテムを
index 0に移動します

00:37:41.295 --> 00:37:46.133 align:start position:32% line:-2
ガイドラインに従って
移動を分けると

00:37:46.233 --> 00:37:51.205 align:start position:11% line:-1
index 2とindex 3に削除がきます

00:37:51.305 --> 00:37:56.510 align:start position:21% line:-2
そしてindex 3のアイテムを
index 0に挿入

00:37:57.411 --> 00:38:00.614 align:start position:32% line:-1
ここでの作業は２つで

00:37:57.411 --> 00:38:00.614 align:start position:32% line:-1
ここでの作業は２つで

00:38:00.714 --> 00:38:02.950 align:start position:38% line:-1
削除と挿入です

00:38:03.050 --> 00:38:05.285 align:start position:32% line:-1
順番に作業を行います

00:38:05.619 --> 00:38:08.655 align:start position:29% line:-1
まず削除を降順で行います

00:38:08.755 --> 00:38:12.826 align:start position:27% line:-1
index 3で削除を行い

00:38:12.926 --> 00:38:16.897 align:start position:30% line:-2
Personを後から
挿入できるようにします

00:38:17.731 --> 00:38:20.834 align:start position:18% line:-1
そしてindex 2のアイテムを削除

00:38:23.136 --> 00:38:26.306 align:start position:23% line:-1
その後 昇順で挿入を処理します

00:38:26.406 --> 00:38:29.176 align:start position:36% line:-2
１つしかないので
それを挿入します

00:38:30.110 --> 00:38:33.547 align:start position:18% line:-1
最後にCollectionViewに

00:38:33.647 --> 00:38:37.017 align:start position:21% line:-1
アニメーションの表示を指示します

00:38:37.718 --> 00:38:42.256 align:start position:30% line:-2
正しいアニメーションを
表示させるために

00:38:42.356 --> 00:38:45.292 align:start position:25% line:-1
移動の指示のままにしています

00:38:45.392 --> 00:38:47.594 align:start position:29% line:-1
データソースが正しければ

00:38:47.694 --> 00:38:50.831 align:start position:30% line:-2
正しいアニメーションが
表示されます

00:38:51.298 --> 00:38:55.636 align:start position:34% line:-2
シミュレータに戻り
更新の状況を

00:38:56.003 --> 00:38:58.372 align:start position:38% line:-1
見てみましょう

00:38:59.540 --> 00:39:01.575 align:start position:32% line:-1
うまくいくでしょうか

00:38:59.540 --> 00:39:01.575 align:start position:32% line:-1
うまくいくでしょうか

00:39:02.810 --> 00:39:03.744 align:start position:39% line:-1
成功しました

00:39:03.844 --> 00:39:07.981 align:start position:43% line:-1
(拍手)

00:39:08.082 --> 00:39:11.719 align:start position:27% line:-2
リロードして
スローモーションでもう一度

00:39:13.854 --> 00:39:16.657 align:start position:32% line:-1
スペックのとおりです

00:39:16.757 --> 00:39:18.292 align:start position:39% line:-1
良くできてる

00:39:18.825 --> 00:39:23.163 align:start position:32% line:-2
ではスライドに戻って
まとめてみましょう

00:39:23.897 --> 00:39:26.934 align:start position:25% line:-1
カスタムレイアウトを作る時に

00:39:27.034 --> 00:39:31.138 align:start position:29% line:-1
緊張したことはありますか

00:39:31.238 --> 00:39:33.740 align:start position:32% line:-1
今日ご紹介した方法で

00:39:33.841 --> 00:39:37.811 align:start position:11% line:-2
CollectionViewソリューションを
作ってください

00:39:38.145 --> 00:39:41.515 align:start position:30% line:-2
リロードデータが一杯で
アニメーションが

00:39:41.615 --> 00:39:43.817 align:start position:32% line:-1
使えない時もあります

00:39:43.917 --> 00:39:47.554 align:start position:27% line:-1
これらの事項をチェックして

00:39:47.654 --> 00:39:51.024 align:start position:25% line:-1
間違った点を修正してください

00:39:52.426 --> 00:39:56.096 align:start position:30% line:-2
このリンクで
詳しい情報が見られます

00:39:56.196 --> 00:39:59.399 align:start position:14% line:-2
明日の朝９時に
CollectionViewラボに来れば

00:39:59.500 --> 00:40:02.236 align:start position:34% line:-1
質問を受け付けます

00:39:59.500 --> 00:40:02.236 align:start position:34% line:-1
質問を受け付けます

00:40:02.336 --> 00:40:05.472 align:start position:27% line:-1
モハメドと私がいる予定です

00:40:05.572 --> 00:40:09.510 align:start position:25% line:-1
本日はありがとうございました

00:40:09.743 --> 00:40:13.180 align:start position:43% line:-1
(拍手)
