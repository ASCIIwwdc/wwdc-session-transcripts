WEBVTT

00:00:07.140 --> 00:00:16.283 align:start position:43% line:-1
(音楽)

00:00:20.988 --> 00:00:22.289 align:start position:43% line:-1
(拍手)

00:00:22.389 --> 00:00:23.390 align:start position:41% line:-1
こんにちは

00:00:25.259 --> 00:00:29.162 align:start position:29% line:-2
Turi Createの
セッションへようこそ

00:00:30.197 --> 00:00:33.901 align:start position:20% line:-2
今回の土台である
Create MLのセッションでは

00:00:34.001 --> 00:00:37.538 align:start position:21% line:-2
Swiftによる機械学習について
説明しました

00:00:37.638 --> 00:00:41.241 align:start position:29% line:-2
見逃した方は
後でご覧になってください

00:00:42.409 --> 00:00:48.582 align:start position:16% line:-2
Turi Createで実現できるのは
インテリジェントなユーザ体験です

00:00:49.716 --> 00:00:53.387 align:start position:32% line:-2
例えば 朝食の写真の
食べ物をタップし

00:00:53.487 --> 00:00:57.724 align:start position:29% line:-2
カロリーを
表示させることもできます

00:00:59.326 --> 00:01:04.897 align:start position:21% line:-2
iPhoneを使った単純な動作で
照明の制御も可能です

00:00:59.326 --> 00:01:04.897 align:start position:21% line:-2
iPhoneを使った単純な動作で
照明の制御も可能です

00:01:07.568 --> 00:01:10.270 align:start position:36% line:-2
リアルタイムで
物体の追跡も可能

00:01:10.370 --> 00:01:14.341 align:start position:29% line:-2
犬とか 身近にいなければ
犬の写真とか

00:01:14.541 --> 00:01:16.710 align:start position:41% line:-1
(笑い声)

00:01:17.678 --> 00:01:21.515 align:start position:32% line:-2
ゲームで使う
カスタムアバターでは

00:01:21.615 --> 00:01:27.154 align:start position:25% line:-2
ユーザが選んだヒゲに合わせて
髪型を薦めることもできます

00:01:28.455 --> 00:01:34.261 align:start position:29% line:-2
写真に芸術的なフィルタを
かけることも可能です

00:01:35.596 --> 00:01:38.065 align:start position:29% line:-1
これらのユーザ体験には―

00:01:38.165 --> 00:01:40.501 align:start position:29% line:-1
いくつか共通点があります

00:01:40.968 --> 00:01:43.904 align:start position:27% line:-1
どれも機械学習を使っており

00:01:44.738 --> 00:01:48.408 align:start position:32% line:-2
ほんの少しのデータで
実行可能

00:01:49.943 --> 00:01:52.446 align:start position:25% line:-2
どのモデルも
Turi Createで作り

00:01:52.546 --> 00:01:54.748 align:start position:29% line:-1
Core MLでデプロイ

00:01:55.883 --> 00:02:00.621 align:start position:27% line:-2
今日は これらに使う
５段階のレシピを説明します

00:01:55.883 --> 00:02:00.621 align:start position:27% line:-2
今日は これらに使う
５段階のレシピを説明します

00:02:01.688 --> 00:02:05.759 align:start position:30% line:-2
デモは全部
ラボでご覧いただけます

00:02:05.859 --> 00:02:09.729 align:start position:34% line:-2
ぜひ実際に
試してみてください

00:02:11.932 --> 00:02:14.268 align:start position:27% line:-2
Turi Createは
Pythonのパッケージで

00:02:14.368 --> 00:02:16.670 align:start position:30% line:-2
Core MLモデルを
作成できます

00:02:17.371 --> 00:02:18.872 align:start position:39% line:-1
使い方は簡単

00:02:18.972 --> 00:02:22.476 align:start position:34% line:-2
機械学習に
特別詳しくなくても

00:02:22.576 --> 00:02:25.145 align:start position:32% line:-2
こうしたユーザ体験を
生み出せます

00:02:25.546 --> 00:02:28.982 align:start position:32% line:-2
タスクにフォーカスし
使いやすくしました

00:02:29.116 --> 00:02:33.587 align:start position:25% line:-2
複雑な機械学習アルゴリズムを
省いて

00:02:33.687 --> 00:02:37.090 align:start position:30% line:-2
ユーザ体験に
フォーカスできるのです

00:02:37.991 --> 00:02:42.596 align:start position:29% line:-2
Turi Createは
クロスプラットフォームで

00:02:42.996 --> 00:02:44.798 align:start position:34% line:-1
オープンソースです

00:02:45.666 --> 00:02:50.637 align:start position:27% line:-2
GitHubにレポジトリが
あるのでご覧ください

00:02:51.371 --> 00:02:54.741 align:start position:29% line:-2
皆さんと一緒に
Turi Createを

00:02:54.842 --> 00:02:57.544 align:start position:36% line:-2
よりよくしたいと
思っています

00:02:58.879 --> 00:03:04.551 align:start position:16% line:-2
今回 Turi Create 5.0の
ベータ版をリリースしました

00:02:58.879 --> 00:03:04.551 align:start position:16% line:-2
今回 Turi Create 5.0の
ベータ版をリリースしました

00:03:04.852 --> 00:03:08.422 align:start position:23% line:-2
GPUアクセラレーションなどの
新機能について―

00:03:08.522 --> 00:03:11.758 align:start position:32% line:-1
後で詳しく説明します

00:03:13.293 --> 00:03:16.530 align:start position:27% line:-2
今日の本題は
Core MLモデル作成の

00:03:16.630 --> 00:03:18.799 align:start position:34% line:-1
５段階のレシピです

00:03:19.066 --> 00:03:21.935 align:start position:27% line:-1
まずは各段階を説明してから

00:03:22.035 --> 00:03:24.805 align:start position:38% line:-2
デモとコードを
ご覧に入れます

00:03:26.540 --> 00:03:31.345 align:start position:29% line:-2
第１段階はタスクを理解し
機械学習での―

00:03:31.445 --> 00:03:34.815 align:start position:32% line:-2
タスクの参照の仕方を
理解すること

00:03:35.816 --> 00:03:39.353 align:start position:30% line:-2
第２段階は
タスクに必要なデータの

00:03:39.453 --> 00:03:42.222 align:start position:30% line:-1
種類と量を把握すること

00:03:43.957 --> 00:03:46.460 align:start position:30% line:-1
第３段階はモデルの作成

00:03:48.262 --> 00:03:51.765 align:start position:34% line:-2
第４段階では
モデルの評価を行い

00:03:51.865 --> 00:03:55.235 align:start position:29% line:-2
その質や
作成が可能かを判断します

00:03:56.370 --> 00:04:01.175 align:start position:21% line:-2
第５段階ではCore MLを使い
デプロイします

00:03:56.370 --> 00:04:01.175 align:start position:21% line:-2
第５段階ではCore MLを使い
デプロイします

00:04:02.242 --> 00:04:05.112 align:start position:29% line:-1
詳しく説明していきますね

00:04:05.979 --> 00:04:10.684 align:start position:20% line:-2
Turi Createは機械学習の
様々なタスクを達成でき

00:04:10.784 --> 00:04:13.654 align:start position:36% line:-2
多種類のデータに
対応できます

00:04:13.854 --> 00:04:16.390 align:start position:30% line:-1
例えば お持ちの画像に

00:04:16.490 --> 00:04:20.093 align:start position:32% line:-2
画像分類や物体検知を
行うことができます

00:04:20.726 --> 00:04:24.198 align:start position:21% line:-1
パーソナライズドレコメンドも可能

00:04:24.865 --> 00:04:30.604 align:start position:25% line:-2
歩行や挙手 跳躍などの動きを
自動的に検出できますし

00:04:31.738 --> 00:04:35.843 align:start position:25% line:-2
テキストから
ユーザの気持ちを理解できます

00:04:36.143 --> 00:04:39.913 align:start position:25% line:-2
分類や回帰など
従来の機械学習アルゴリズムを

00:04:40.013 --> 00:04:42.649 align:start position:34% line:-1
使うことも可能です

00:04:44.818 --> 00:04:49.423 align:start position:27% line:-2
初心者の方は
混乱されたかもしれませんね

00:04:49.523 --> 00:04:54.161 align:start position:29% line:-2
簡単な表にまとめたものが
こちらです

00:04:54.294 --> 00:04:58.465 align:start position:36% line:-2
タスクの種類と
機械学習の用語を

00:04:58.565 --> 00:05:01.468 align:start position:27% line:-1
分かりやすく並べてみました

00:04:58.565 --> 00:05:01.468 align:start position:27% line:-1
分かりやすく並べてみました

00:05:01.568 --> 00:05:06.740 align:start position:23% line:-2
最初にお話しした
インテリジェントなユーザ体験に

00:05:06.840 --> 00:05:09.309 align:start position:29% line:-1
タスクを当てはめてみます

00:05:09.543 --> 00:05:14.014 align:start position:29% line:-2
例えば 写真の花の種類を
識別することを

00:05:14.114 --> 00:05:16.149 align:start position:34% line:-1
画像分類といいます

00:05:17.384 --> 00:05:22.890 align:start position:27% line:-2
朝食の写真に写るそれぞれの
食べ物を認識するのは

00:05:22.990 --> 00:05:25.192 align:start position:39% line:-1
物体検知です

00:05:26.393 --> 00:05:29.930 align:start position:30% line:-2
写真に芸術的な
エフェクトをかけるのは

00:05:30.030 --> 00:05:31.899 align:start position:36% line:-1
スタイル変換です

00:05:33.867 --> 00:05:39.806 align:start position:23% line:-2
デバイスに搭載されたセンサーで
動きを認識するのは

00:05:39.907 --> 00:05:42.176 align:start position:30% line:-1
“アクティビティ分類”

00:05:44.211 --> 00:05:47.814 align:start position:25% line:-2
パーソナライズドレコメンドの
ことは

00:05:47.915 --> 00:05:50.417 align:start position:25% line:-1
レコメンダシステムといいます

00:05:52.653 --> 00:05:56.590 align:start position:32% line:-2
すばらしいことに
この５段階のレシピは

00:05:56.690 --> 00:05:58.458 align:start position:34% line:-1
コードにも使えます

00:05:59.059 --> 00:06:01.495 align:start position:25% line:-2
まずTuri Createを
インポート

00:05:59.059 --> 00:06:01.495 align:start position:25% line:-2
まずTuri Createを
インポート

00:06:02.396 --> 00:06:06.633 align:start position:23% line:-2
SFrameというデータ構造で
データをロード

00:06:06.733 --> 00:06:10.337 align:start position:30% line:-2
SFrameについては
後ほど説明します

00:06:11.538 --> 00:06:15.742 align:start position:29% line:-2
関数“.create”を
使ってモデルを作成

00:06:15.843 --> 00:06:20.814 align:start position:27% line:-2
この関数は複雑な機械学習を
省いてくれます

00:06:22.850 --> 00:06:27.387 align:start position:21% line:-2
次に関数“.evaluate”で
モデルを評価します

00:06:28.789 --> 00:06:31.358 align:start position:34% line:-2
最後に モデルを
エクスポートします

00:06:31.458 --> 00:06:33.460 align:start position:27% line:-1
mlmodel形式にした後

00:06:33.560 --> 00:06:36.964 align:start position:34% line:-2
Xcodeに
ドラッグ＆ドロップ

00:06:37.598 --> 00:06:42.336 align:start position:18% line:-2
このレシピはTuri Createの
どのタスクにも

00:06:42.436 --> 00:06:44.004 align:start position:34% line:-1
使えると話しました

00:06:44.137 --> 00:06:46.073 align:start position:39% line:-1
物体検知でも

00:06:46.740 --> 00:06:48.442 align:start position:39% line:-1
画像分類でも

00:06:49.042 --> 00:06:53.280 align:start position:30% line:-2
アクティビティ分類でも
やり方は同じです

00:06:55.349 --> 00:06:56.850 align:start position:38% line:-1
最初のデモは―

00:06:56.950 --> 00:06:59.219 align:start position:32% line:-2
カロリー計算の
アプリケーションです

00:06:59.319 --> 00:07:01.522 align:start position:36% line:-2
物体検知モデルを
使っています

00:06:59.319 --> 00:07:01.522 align:start position:36% line:-2
物体検知モデルを
使っています

00:07:01.622 --> 00:07:05.959 align:start position:34% line:-2
画像の食べ物ごとに
位置を認識させて

00:07:06.059 --> 00:07:10.497 align:start position:30% line:-2
タップしたらカロリーが
表示されるようにします

00:07:13.467 --> 00:07:18.172 align:start position:30% line:-2
機械学習モデルの作成に
必要なデータは何か？

00:07:19.573 --> 00:07:20.707 align:start position:38% line:-1
まずは画像です

00:07:20.807 --> 00:07:24.077 align:start position:36% line:-2
単純な画像分類を
行うだけなら

00:07:24.178 --> 00:07:28.715 align:start position:30% line:-2
画像一式と各画像の
ラベルがあれば十分です

00:07:29.249 --> 00:07:33.720 align:start position:34% line:-2
物体検知には
それでは足りません

00:07:33.820 --> 00:07:38.125 align:start position:29% line:-2
画像の内容と物体の位置の
理解が必要です

00:07:38.859 --> 00:07:44.097 align:start position:21% line:-2
こちらの画像には
コーヒーの周りに赤い枠があります

00:07:44.498 --> 00:07:46.833 align:start position:36% line:-2
クロワッサンには
緑の枠です

00:07:47.201 --> 00:07:52.072 align:start position:27% line:-2
これは境界ボックスといい
JSON形式で表示されます

00:07:52.172 --> 00:07:56.376 align:start position:30% line:-2
ラベル 高さと幅
xとyの座標を使います

00:07:56.543 --> 00:08:00.247 align:start position:30% line:-2
xとyは境界ボックスの
中心を参照します

00:07:56.543 --> 00:08:00.247 align:start position:30% line:-2
xとyは境界ボックスの
中心を参照します

00:08:00.414 --> 00:08:05.986 align:start position:27% line:-2
物体検知では
画像上の複数の物体を参照し

00:08:06.086 --> 00:08:08.322 align:start position:36% line:-1
検知できるのです

00:08:10.157 --> 00:08:14.995 align:start position:20% line:-2
この例では
SFrameにデータをロードすると

00:08:15.295 --> 00:08:17.931 align:start position:32% line:-1
カラムが２つできます

00:08:18.031 --> 00:08:20.234 align:start position:34% line:-1
１つは画像のカラム

00:08:20.367 --> 00:08:24.838 align:start position:29% line:-2
もう１つはJSON形式の
アノテーションです

00:08:27.674 --> 00:08:29.776 align:start position:32% line:-1
ここで少し話を戻して

00:08:29.877 --> 00:08:33.647 align:start position:32% line:-2
SFrameについて
説明しますね

00:08:34.481 --> 00:08:39.186 align:start position:32% line:-2
SFrameとは
表形式のデータ構造で

00:08:39.285 --> 00:08:44.158 align:start position:25% line:-2
膨大なデータでも
機械学習モデルを作成できます

00:08:45.292 --> 00:08:48.795 align:start position:32% line:-2
一般的なデータ操作の
タスクも可能

00:08:48.896 --> 00:08:53.800 align:start position:29% line:-2
特定の行やカラムの
フィルタリングなどですね

00:08:55.536 --> 00:08:58.305 align:start position:32% line:-2
異なる種類のデータを
使用できます

00:08:58.805 --> 00:09:01.675 align:start position:30% line:-2
データをSFrameに
ロードすれば―

00:08:58.805 --> 00:09:01.675 align:start position:30% line:-2
データをSFrameに
ロードすれば―

00:09:01.775 --> 00:09:05.445 align:start position:36% line:-2
視覚的にデータを
確認できます

00:09:08.815 --> 00:09:12.085 align:start position:34% line:-2
SFrameで
できることは何か？

00:09:12.686 --> 00:09:14.721 align:start position:32% line:-1
物体検知で説明します

00:09:15.322 --> 00:09:19.059 align:start position:29% line:-2
Turi Createを
インポートした後―

00:09:19.159 --> 00:09:21.862 align:start position:32% line:-2
２つのSFrameを
ロードします

00:09:21.962 --> 00:09:24.431 align:start position:32% line:-1
１つはアノテーション

00:09:24.798 --> 00:09:27.601 align:start position:34% line:-1
もう１つは画像です

00:09:28.302 --> 00:09:33.607 align:start position:21% line:-2
関数“.explore”を使えば
データを視覚的に確認できます

00:09:34.174 --> 00:09:38.812 align:start position:30% line:-2
特定の行やカラムに
アクセスすることも可能

00:09:39.746 --> 00:09:44.618 align:start position:21% line:-2
もちろん
２つのSFrameを結合するとか

00:09:44.718 --> 00:09:49.156 align:start position:30% line:-2
保存しておくなどの
一般的な操作もできます

00:09:51.358 --> 00:09:55.562 align:start position:30% line:-2
次はモデルの作成です
またあの関数を使います

00:09:55.662 --> 00:09:59.867 align:start position:32% line:-2
“.create”が
面倒な仕事をこなして

00:09:59.967 --> 00:10:05.205 align:start position:27% line:-2
モデルをタスクに合わせて
カスタマイズするだけでなく

00:09:59.967 --> 00:10:05.205 align:start position:27% line:-2
モデルをタスクに合わせて
カスタマイズするだけでなく

00:10:05.305 --> 00:10:08.976 align:start position:36% line:-2
高品質で高精度に
作成してくれます

00:10:09.076 --> 00:10:14.314 align:start position:32% line:-2
これはデータの大小に
関係なく実行可能です

00:10:14.414 --> 00:10:18.585 align:start position:29% line:-2
たとえ１つの項目に対して
画像40枚ほどの―

00:10:18.819 --> 00:10:23.557 align:start position:32% line:-2
小さなデータでも
タスクは実行できます

00:10:23.657 --> 00:10:26.593 align:start position:34% line:-1
物体検知が可能です

00:10:29.196 --> 00:10:33.100 align:start position:34% line:-2
評価に移りましょう
先ほどと同様です

00:10:33.200 --> 00:10:37.404 align:start position:23% line:-2
“.evaluate”を使って
モデルを評価します

00:10:38.105 --> 00:10:42.242 align:start position:34% line:-2
物体検知の場合
考慮する要素は２つ

00:10:42.342 --> 00:10:45.045 align:start position:34% line:-1
正しいラベル付けと

00:10:45.479 --> 00:10:49.917 align:start position:30% line:-2
物体への境界ボックスの
正しい配置です

00:10:50.517 --> 00:10:54.755 align:start position:29% line:-2
この２つの要素で
単純なメトリックを作成し

00:10:54.855 --> 00:11:01.195 align:start position:21% line:-2
グラウンドトゥルースデータに対し
テストデータのスコアを予測

00:10:54.855 --> 00:11:01.195 align:start position:21% line:-2
グラウンドトゥルースデータに対し
テストデータのスコアを予測

00:11:01.328 --> 00:11:04.298 align:start position:36% line:-2
それに必要なのは
正しいラベルと

00:11:04.398 --> 00:11:10.270 align:start position:25% line:-2
さらにグラウンドトゥルースの
境界ボックスと比較した際に

00:11:10.370 --> 00:11:15.008 align:start position:21% line:-2
標準メトリックが予測のボックスで
５割は重なっていること

00:11:16.376 --> 00:11:21.682 align:start position:23% line:-2
この例では“コーヒー”と正しく
ラベル付けされていますが

00:11:21.782 --> 00:11:27.487 align:start position:27% line:-2
２つの境界ボックスは
約１割しか重なっていません

00:11:27.588 --> 00:11:29.923 align:start position:29% line:-1
正しい予測ではないですね

00:11:31.558 --> 00:11:34.294 align:start position:27% line:-1
こちらは重なりが広いものの

00:11:34.428 --> 00:11:36.997 align:start position:32% line:-2
ラベルが“バナナ”と
なっています

00:11:37.097 --> 00:11:40.234 align:start position:32% line:-2
この予測も
うまくいっていません

00:11:40.901 --> 00:11:43.136 align:start position:34% line:-1
この真ん中の例では

00:11:43.237 --> 00:11:48.175 align:start position:27% line:-2
７割が重なっており
“コーヒー”となっています

00:11:48.842 --> 00:11:53.380 align:start position:30% line:-2
テストデータで
すべての予測を実行して

00:11:53.547 --> 00:11:57.151 align:start position:34% line:-2
モデルの精度の
スコアを出すのです

00:11:59.119 --> 00:12:01.655 align:start position:29% line:-1
最後にデプロイを行います

00:11:59.119 --> 00:12:01.655 align:start position:29% line:-1
最後にデプロイを行います

00:12:01.788 --> 00:12:06.693 align:start position:29% line:-2
モデルをCore MLに
エクスポートしたら

00:12:06.894 --> 00:12:09.797 align:start position:29% line:-2
Xcodeに
ドラッグ＆ドロップで完了

00:12:10.597 --> 00:12:15.602 align:start position:32% line:-2
今週 物体検知の
新しい機能が出ました

00:12:15.736 --> 00:12:20.641 align:start position:27% line:-2
明日のCore MLの
セッションにご参加ください

00:12:20.741 --> 00:12:25.012 align:start position:32% line:-2
明日は 今日作った
物体検知モデルを使い

00:12:25.112 --> 00:12:28.115 align:start position:27% line:-1
デプロイについて説明します

00:12:30.150 --> 00:12:34.188 align:start position:21% line:-2
以上が Turi Createの
５段階のレシピでした

00:12:34.988 --> 00:12:38.525 align:start position:43% line:-1
(拍手)

00:12:38.692 --> 00:12:39.426 align:start position:41% line:-1
ありがとう

00:12:40.260 --> 00:12:43.730 align:start position:34% line:-2
次は同僚のザックが
デモを行います

00:12:47.267 --> 00:12:50.237 align:start position:43% line:-1
(拍手)

00:12:50.838 --> 00:12:51.872 align:start position:32% line:-1
ありがとう　アーロン

00:12:52.339 --> 00:12:56.810 align:start position:34% line:-2
では 早速コードを
書いてみましょう

00:12:56.910 --> 00:13:00.247 align:start position:30% line:-2
今から物体検知モデルを
作ります

00:12:56.910 --> 00:13:00.247 align:start position:30% line:-2
今から物体検知モデルを
作ります

00:13:09.923 --> 00:13:14.394 align:start position:29% line:-2
まずFinderで画像の
フォルダを見つけて

00:13:14.495 --> 00:13:16.563 align:start position:29% line:-1
これでモデルを訓練します

00:13:17.097 --> 00:13:19.266 align:start position:25% line:-1
このフォルダ“data”には

00:13:19.433 --> 00:13:22.569 align:start position:36% line:-2
食べ物の画像が
たくさんあります

00:13:22.669 --> 00:13:26.273 align:start position:36% line:-2
クロワッサンや
目玉焼きなどです

00:13:26.874 --> 00:13:31.979 align:start position:30% line:-2
朝食のデータですね
これでコードを書きます

00:13:32.880 --> 00:13:36.850 align:start position:14% line:-2
環境を
Jupyter Notebookにします

00:13:36.984 --> 00:13:39.920 align:start position:30% line:-2
これは Pythonの
対話型環境で

00:13:40.020 --> 00:13:43.290 align:start position:25% line:-2
コードのスニペットを入れれば
すぐに実行されるので

00:13:43.390 --> 00:13:46.693 align:start position:29% line:-2
インタラクティブな作業が
簡単です

00:13:46.793 --> 00:13:50.430 align:start position:20% line:-2
XcodeのPlaygroundと
似ていますね

00:13:50.964 --> 00:13:54.067 align:start position:21% line:-2
まずは Turi Createを
インポート

00:13:55.102 --> 00:13:56.336 align:start position:36% line:-1
“tc”とします

00:13:59.239 --> 00:14:02.776 align:start position:30% line:-2
これでスクリプトで
tcとして実行されます

00:13:59.239 --> 00:14:02.776 align:start position:30% line:-2
これでスクリプトで
tcとして実行されます

00:14:03.477 --> 00:14:05.679 align:start position:32% line:-1
さて 最初のタスクは

00:14:06.380 --> 00:14:07.981 align:start position:34% line:-1
データのロードです

00:14:10.951 --> 00:14:13.654 align:start position:25% line:-1
SFrameの形式で行います

00:14:14.087 --> 00:14:18.358 align:start position:4% line:-2
“images = tc.load images”と
入れたら

00:14:18.458 --> 00:14:21.929 align:start position:34% line:-2
先ほどのフォルダ名
“data”を入力

00:14:24.965 --> 00:14:29.503 align:start position:21% line:-2
Turi Createはデータを
参照し視覚化します

00:14:29.837 --> 00:14:34.942 align:start position:30% line:-2
SFrameの形式で
できたか確認してみます

00:14:35.075 --> 00:14:37.010 align:start position:23% line:-1
“.explore”を使います

00:14:37.344 --> 00:14:39.880 align:start position:27% line:-1
するとウインドウが開きます

00:14:39.980 --> 00:14:42.950 align:start position:30% line:-2
SFrameにカラムが
２つありますね

00:14:43.050 --> 00:14:47.321 align:start position:34% line:-2
１つはディスク上の
画像への相対パス

00:14:47.421 --> 00:14:51.859 align:start position:32% line:-2
もう１つは
画像のコンテンツです

00:14:51.959 --> 00:14:54.194 align:start position:29% line:-1
食べ物の画像が見えますね

00:14:54.561 --> 00:14:57.831 align:start position:32% line:-2
画像は正しく
ロードされたようです

00:14:59.766 --> 00:15:05.339 align:start position:29% line:-2
今度はアノテーションを
SFrame形式でロード

00:14:59.766 --> 00:15:05.339 align:start position:29% line:-2
今度はアノテーションを
SFrame形式でロード

00:15:08.175 --> 00:15:14.114 align:start position:12% line:-2
このファイル名を
“annotations.csv”とします

00:15:14.214 --> 00:15:19.019 align:start position:27% line:-2
このcsvは画像に対応した
アノテーションを含みます

00:15:22.022 --> 00:15:23.557 align:start position:38% line:-1
見てみましょう

00:15:23.757 --> 00:15:27.594 align:start position:34% line:-2
このSFrameの
パスのカラムは

00:15:27.694 --> 00:15:30.964 align:start position:25% line:-1
画像の相対パスを示しています

00:15:31.064 --> 00:15:34.601 align:start position:27% line:-2
アノテーションは
JSONオブジェクトを含み

00:15:34.701 --> 00:15:38.705 align:start position:30% line:-2
画像のラベルと
境界ボックスを示します

00:15:39.673 --> 00:15:41.708 align:start position:38% line:-2
データソースが
２つありますが

00:15:41.808 --> 00:15:45.078 align:start position:34% line:-2
モデルの訓練用に
１つにしたいですね

00:15:45.212 --> 00:15:46.780 align:start position:32% line:-1
２つを結合しましょう

00:15:46.980 --> 00:15:50.451 align:start position:27% line:-2
Turi Createでは
結合も簡単です

00:15:50.551 --> 00:15:55.956 align:start position:16% line:-2
“data = images.join
(annotations)”と入力

00:15:58.025 --> 00:16:01.995 align:start position:30% line:-2
SFrameにカラムが
３つできました

00:15:58.025 --> 00:16:01.995 align:start position:30% line:-2
SFrameにカラムが
３つできました

00:16:02.095 --> 00:16:06.033 align:start position:34% line:-2
パスに結合したので
それぞれの画像に

00:16:06.133 --> 00:16:08.769 align:start position:36% line:-2
アノテーションが
結びつきました

00:16:08.902 --> 00:16:11.939 align:start position:27% line:-1
これで情報がリンクしました

00:16:12.539 --> 00:16:14.408 align:start position:32% line:-1
ではモデルの訓練です

00:16:17.010 --> 00:16:18.979 align:start position:27% line:-1
新しいセクションを作ります

00:16:19.479 --> 00:16:21.248 align:start position:18% line:-1
名前は“Train a model”

00:16:24.785 --> 00:16:27.054 align:start position:30% line:-1
コードは１行で済みます

00:16:27.154 --> 00:16:30.724 align:start position:4% line:-2
“model =
tc.object detector.create”

00:16:30.824 --> 00:16:35.963 align:start position:29% line:-2
これは物体検知のタスクに
フォーカスしたAPIです

00:16:36.363 --> 00:16:39.466 align:start position:30% line:-2
さっきのSFrameの
データを渡して

00:16:39.566 --> 00:16:45.038 align:start position:16% line:-2
このデモ用に パラメータ
“max iterations”を入力

00:16:45.138 --> 00:16:47.541 align:start position:27% line:-1
通常 パラメータは不要です

00:16:47.641 --> 00:16:53.046 align:start position:14% line:-2
Turi Createがイテレーションの
回数を導き出すからです

00:16:53.347 --> 00:16:56.416 align:start position:30% line:-2
今回はイテレーションを
１回にして

00:16:56.517 --> 00:16:59.453 align:start position:34% line:-1
訓練をお見せします

00:16:59.720 --> 00:17:04.590 align:start position:27% line:-2
ここで時間がかかるのは
画像のサイズを変えるからで

00:16:59.720 --> 00:17:04.590 align:start position:27% line:-2
ここで時間がかかるのは
画像のサイズを変えるからで

00:17:04.691 --> 00:17:07.594 align:start position:29% line:-2
ニューラルネットワークに
かけるためです

00:17:07.694 --> 00:17:10.263 align:start position:30% line:-2
これは物体検知器の中で
行われます

00:17:10.364 --> 00:17:14.468 align:start position:32% line:-2
MacのGPUで
イテレーションを１回

00:17:16.336 --> 00:17:21.407 align:start position:27% line:-2
これは訓練が短時間なので
最高のモデルとは言えません

00:17:21.508 --> 00:17:25.179 align:start position:29% line:-2
なので ここは
料理番組の方式でいきます

00:17:25.279 --> 00:17:28.682 align:start position:30% line:-2
“作っておいた料理”を
出しますね

00:17:29.883 --> 00:17:32.553 align:start position:16% line:-1
“tc.load model”と入力し

00:17:33.253 --> 00:17:36.990 align:start position:9% line:-2
“breakfast-model.model”
を入力

00:17:38.058 --> 00:17:41.595 align:start position:32% line:-2
これが前もって
作っておいたものです

00:17:41.695 --> 00:17:46.900 align:start position:23% line:-2
画面を見ると物体検知器を使った
モデルだと分かります

00:17:47.100 --> 00:17:51.805 align:start position:30% line:-2
６つのクラスで
55分ほど訓練しました

00:17:51.905 --> 00:17:57.611 align:start position:25% line:-2
物体検知モデルを
１時間弱で訓練できたわけです

00:18:00.614 --> 00:18:05.119 align:start position:29% line:-2
次に このモデルの予測を
検証しましょう

00:18:11.125 --> 00:18:14.261 align:start position:11% line:-2
“Inspect predictions”の
セクションを作ります

00:18:14.361 --> 00:18:17.798 align:start position:29% line:-2
テストデータセットとして
ロードするのに

00:18:17.898 --> 00:18:22.069 align:start position:32% line:-2
SFrameの形式の
データを用意しました

00:18:22.336 --> 00:18:25.339 align:start position:0% line:-2
“test-breakfast-data.sframe”
です

00:18:25.539 --> 00:18:28.942 align:start position:32% line:-2
このSFrameには
重要な特質が２つ

00:18:29.042 --> 00:18:34.448 align:start position:27% line:-2
訓練に使ったのと同じ種類の
画像が含まれていることと

00:18:34.548 --> 00:18:39.353 align:start position:25% line:-2
モデルがこれらの
画像を見たことがないことです

00:18:39.453 --> 00:18:44.858 align:start position:29% line:-2
これでユーザのデータに
汎化できるか検証できます

00:18:47.027 --> 00:18:51.632 align:start position:21% line:-2
“model.predict”を
呼び出し

00:18:51.732 --> 00:18:56.870 align:start position:27% line:-2
用意したSFrameを使い
バッチ予測を行います

00:18:59.606 --> 00:19:02.743 align:start position:30% line:-1
これは数秒で終わります

00:18:59.606 --> 00:19:02.743 align:start position:30% line:-1
これは数秒で終わります

00:19:02.876 --> 00:19:06.447 align:start position:30% line:-2
検証しましょう
ランダムに選んでみます

00:19:06.547 --> 00:19:09.182 align:start position:29% line:-1
では“２”にしましょうか

00:19:09.483 --> 00:19:12.486 align:start position:27% line:-1
このJSONオブジェクトは

00:19:12.586 --> 00:19:16.223 align:start position:30% line:-2
訓練データと同じ形式で
予測されました

00:19:16.323 --> 00:19:21.595 align:start position:21% line:-2
高さや幅　xとyの座標と
“バナナ”というラベルが出ました

00:19:21.695 --> 00:19:26.200 align:start position:30% line:-2
モデルの信頼度は
約87パーセントですが

00:19:26.767 --> 00:19:30.204 align:start position:32% line:-2
これは人間には
解釈しにくいものです

00:19:30.304 --> 00:19:34.308 align:start position:36% line:-2
この画像が本当に
バナナなのか―

00:19:34.408 --> 00:19:38.846 align:start position:29% line:-2
座標の表す位置が
正確なのかも分かりません

00:19:39.580 --> 00:19:43.383 align:start position:27% line:-2
Turi Createには
境界ボックスを

00:19:43.484 --> 00:19:47.354 align:start position:34% line:-2
画像に正しく
描く機能があります

00:19:47.454 --> 00:19:49.189 align:start position:36% line:-1
やってみましょう

00:19:49.423 --> 00:19:54.194 align:start position:25% line:-2
さっきのテストSFrameに
予測画像のカラムを作り

00:19:54.928 --> 00:19:59.299 align:start position:25% line:-2
物体検知器のユーティリティの
出力を指定

00:19:59.399 --> 00:20:01.368 align:start position:29% line:-1
境界ボックスを作成します

00:19:59.399 --> 00:20:01.368 align:start position:29% line:-1
境界ボックスを作成します

00:20:02.369 --> 00:20:05.038 align:start position:29% line:-1
ボックスの作成に使うのは

00:20:05.572 --> 00:20:09.910 align:start position:30% line:-2
テスト画像のカラム
つまり画像そのものです

00:20:10.010 --> 00:20:13.947 align:start position:32% line:-2
さらにモデルから得た
予測も使います

00:20:14.248 --> 00:20:18.452 align:start position:30% line:-2
これで画像に
境界ボックスを描きます

00:20:18.552 --> 00:20:23.390 align:start position:25% line:-2
今度は画像形式で
先ほどの予測結果を表示します

00:20:24.892 --> 00:20:28.695 align:start position:30% line:-2
“.show”を使って
予測画像を確認します

00:20:28.796 --> 00:20:31.165 align:start position:32% line:-1
これで表示されました

00:20:31.365 --> 00:20:35.335 align:start position:43% line:-1
(拍手)

00:20:38.438 --> 00:20:43.410 align:start position:27% line:-2
このモデルは
１枚の写真には有効でしたが

00:20:43.510 --> 00:20:48.115 align:start position:30% line:-2
例えば５万枚の画像では
どうでしょうか？

00:20:48.549 --> 00:20:52.152 align:start position:32% line:-2
今度はモデルを量的に
評価してみます

00:20:53.120 --> 00:20:56.623 align:start position:12% line:-2
“Evaluate the model”の
セクションを作ります

00:20:56.857 --> 00:21:00.260 align:start position:20% line:-2
“model.evaluate”を
呼び出して

00:20:56.857 --> 00:21:00.260 align:start position:20% line:-2
“model.evaluate”を
呼び出して

00:21:00.661 --> 00:21:03.931 align:start position:34% line:-2
テストデータ全部を
評価します

00:21:06.133 --> 00:21:10.671 align:start position:23% line:-2
評価関数は
アーロンが説明したメトリックで

00:21:10.771 --> 00:21:15.876 align:start position:27% line:-2
境界ボックスと
ラベルの正確さを検証します

00:21:15.976 --> 00:21:20.180 align:start position:29% line:-2
これで訓練した６クラスの
結果が得られました

00:21:20.414 --> 00:21:23.717 align:start position:30% line:-2
境界ボックスとラベルが
示しているのは

00:21:23.817 --> 00:21:27.888 align:start position:29% line:-2
約80パーセントの確率で
“ベーグル”

00:21:27.988 --> 00:21:31.592 align:start position:29% line:-2
約67パーセントの確率で
“バナナ”です

00:21:32.326 --> 00:21:33.327 align:start position:38% line:-1
いい結果ですね

00:21:33.460 --> 00:21:37.598 align:start position:27% line:-2
実際のアプリケーションでも
使えるでしょうか？

00:21:37.898 --> 00:21:41.235 align:start position:16% line:-1
“export coreml”を使って

00:21:41.335 --> 00:21:44.471 align:start position:27% line:-1
Core MLモデルを作成

00:21:44.872 --> 00:21:47.608 align:start position:5% line:-2
“BreakfastModel.mlmodel”と
名付けます

00:21:47.708 --> 00:21:51.979 align:start position:30% line:-2
終わり次第
Finderで開きます

00:21:54.014 --> 00:21:56.049 align:start position:38% line:-2
エクスポートが
終了したらです

00:21:59.253 --> 00:22:00.687 align:start position:36% line:-1
Finderには

00:21:59.253 --> 00:22:00.687 align:start position:36% line:-1
Finderには

00:22:01.088 --> 00:22:03.557 align:start position:7% line:-2
“BreakfastModel.mlmodel”
があります

00:22:03.657 --> 00:22:08.595 align:start position:18% line:-2
Xcodeで開くと
Core MLモデルと同様の画面です

00:22:09.730 --> 00:22:11.565 align:start position:30% line:-1
入力された画像の記録と

00:22:11.698 --> 00:22:15.402 align:start position:29% line:-2
アウトプット項目では
信頼度と座標が見られます

00:22:15.502 --> 00:22:20.107 align:start position:30% line:-2
これで画像に対する
予測結果が分かりますね

00:22:20.240 --> 00:22:24.912 align:start position:27% line:-2
そしてiPhoneの
アプリケーションを使います

00:22:27.981 --> 00:22:29.683 align:start position:29% line:-1
僕のiPhoneにある―

00:22:29.850 --> 00:22:32.019 align:start position:23% line:-1
FoodPredictorです

00:22:32.252 --> 00:22:34.888 align:start position:36% line:-2
先ほど訓練した
モデルを使います

00:22:35.255 --> 00:22:40.294 align:start position:25% line:-2
写真を選びます
今日の朝食の写真にしましょう

00:22:40.394 --> 00:22:44.264 align:start position:34% line:-2
コーヒーとバナナは
僕の定番の朝食です

00:22:44.364 --> 00:22:47.501 align:start position:34% line:-2
バナナは めったに
食べないんですが

00:22:47.634 --> 00:22:49.770 align:start position:36% line:-1
今朝は例外ですね

00:22:52.039 --> 00:22:55.576 align:start position:32% line:-2
画像の境界ボックスを
タップします

00:22:55.676 --> 00:23:01.115 align:start position:27% line:-2
ボックス内の物体は
バナナだと表示されています

00:22:55.676 --> 00:23:01.115 align:start position:27% line:-2
ボックス内の物体は
バナナだと表示されています

00:23:01.782 --> 00:23:03.317 align:start position:32% line:-1
これはコーヒーですね

00:23:04.117 --> 00:23:05.786 align:start position:43% line:-1
(拍手)

00:23:15.996 --> 00:23:18.198 align:start position:36% line:-1
では まとめます

00:23:19.800 --> 00:23:23.937 align:start position:27% line:-2
まず画像とアノテーションを
SFrame形式にロード

00:23:24.037 --> 00:23:27.007 align:start position:36% line:-2
関数を呼び出して
データを結合

00:23:27.174 --> 00:23:31.078 align:start position:29% line:-2
Exploreメソッドで
対話式にデータを探す

00:23:31.712 --> 00:23:36.617 align:start position:32% line:-2
画像と境界ボックスと
ラベルのデータから

00:23:36.717 --> 00:23:40.320 align:start position:29% line:-2
高レベルのAPIを使って
モデルを作成

00:23:40.787 --> 00:23:46.360 align:start position:27% line:-2
モデルの評価では 質的には
アウトプットを抜き取り検査

00:23:46.460 --> 00:23:51.832 align:start position:30% line:-2
量的には タスクに使う
メトリックを求めました

00:23:52.232 --> 00:23:56.537 align:start position:21% line:-2
最後にモデルを
Core ML形式でエクスポート

00:23:58.605 --> 00:24:04.511 align:start position:12% line:-2
ここからはTuri Create 5.0の
新機能を紹介します

00:23:58.605 --> 00:24:04.511 align:start position:12% line:-2
ここからはTuri Create 5.0の
新機能を紹介します

00:24:06.980 --> 00:24:11.485 align:start position:12% line:-2
まずは Style Transferという
新しいタスク

00:24:12.453 --> 00:24:14.822 align:start position:29% line:-1
パフォーマンスについては

00:24:14.922 --> 00:24:17.891 align:start position:29% line:-2
ネイティブGPU
アクセラレーションで向上

00:24:19.226 --> 00:24:24.031 align:start position:25% line:-2
新たにパーソナライズのための
レコメンダモデルと

00:24:24.131 --> 00:24:28.469 align:start position:9% line:-2
Vision Feature Printによる
モデルをオプションで導入

00:24:28.569 --> 00:24:31.705 align:start position:34% line:-2
OSにあるモデルを
活用できます

00:24:33.574 --> 00:24:36.543 align:start position:14% line:-1
Style Transferのタスクには

00:24:36.977 --> 00:24:39.746 align:start position:30% line:-1
スタイル画像を使います

00:24:39.847 --> 00:24:44.818 align:start position:29% line:-2
例えば 印象に残りやすく
デザイン性の高い画像

00:24:44.918 --> 00:24:49.756 align:start position:30% line:-2
ここに蜂の巣状の画像と
花の画像があります

00:24:49.923 --> 00:24:54.561 align:start position:27% line:-2
写真に この画像の
フィルタをかけてみましょう

00:24:55.863 --> 00:24:57.564 align:start position:38% line:-1
この犬の写真に

00:24:57.664 --> 00:25:00.834 align:start position:29% line:-1
フィルタをかけてみますね

00:24:57.664 --> 00:25:00.834 align:start position:29% line:-1
フィルタをかけてみますね

00:25:01.201 --> 00:25:02.503 align:start position:38% line:-1
こうなりました

00:25:03.437 --> 00:25:08.442 align:start position:27% line:-2
複数の写真に
同じフィルタをかけられます

00:25:08.542 --> 00:25:10.577 align:start position:32% line:-1
猫と別の犬の写真では

00:25:10.777 --> 00:25:12.813 align:start position:32% line:-1
こんな感じになります

00:25:15.549 --> 00:25:17.284 align:start position:29% line:-1
アプリケーションを使って

00:25:17.384 --> 00:25:21.622 align:start position:30% line:-2
ユーザの写真に
フィルタをかけられます

00:25:25.025 --> 00:25:29.563 align:start position:18% line:-2
Style Transferモデルの
コード作成においても

00:25:29.663 --> 00:25:32.332 align:start position:29% line:-1
５段階のレシピを使います

00:25:32.432 --> 00:25:37.404 align:start position:18% line:-2
Turi Createをインポートし
SFrame形式でデータをロード

00:25:37.571 --> 00:25:40.908 align:start position:34% line:-2
高レベルのAPIで
モデルを作成

00:25:41.208 --> 00:25:45.012 align:start position:23% line:-2
予測をしたら
今度は関数“stylize”で

00:25:45.112 --> 00:25:47.781 align:start position:29% line:-1
画像にフィルタをかけます

00:25:48.081 --> 00:25:53.620 align:start position:27% line:-2
最後にCore ML形式で
エクスポートします

00:25:56.156 --> 00:26:01.028 align:start position:11% line:-2
次のデモでは
Style Transferモデルを作ります

00:25:56.156 --> 00:26:01.028 align:start position:11% line:-2
次のデモでは
Style Transferモデルを作ります

00:26:14.374 --> 00:26:17.344 align:start position:14% line:-1
Jupyter Notebookに戻って

00:26:17.444 --> 00:26:20.948 align:start position:20% line:-1
Turi Createをインポート

00:26:22.549 --> 00:26:23.717 align:start position:36% line:-1
“tc”とします

00:26:28.722 --> 00:26:33.060 align:start position:29% line:-2
画像を含むSFrameを
２つロードします

00:26:33.160 --> 00:26:36.497 align:start position:16% line:-2
１つはスタイル画像
“tc.load images”と入力

00:26:36.597 --> 00:26:38.866 align:start position:36% line:-2
ディレクトリ名は
“styles”

00:26:38.966 --> 00:26:41.835 align:start position:34% line:-2
もう１つは
コンテンツ画像です

00:26:42.836 --> 00:26:48.709 align:start position:23% line:-2
スタイル画像は写真などにかける
フィルタになります

00:26:48.809 --> 00:26:50.477 align:start position:34% line:-1
コンテンツ画像は―

00:26:50.577 --> 00:26:56.016 align:start position:27% line:-2
フィルタをかける写真などの
画像のことです

00:26:56.116 --> 00:26:59.219 align:start position:30% line:-1
今回は写真のことですね

00:26:59.720 --> 00:27:04.458 align:start position:25% line:-2
フォルダ“content”を
SFrameにロード

00:26:59.720 --> 00:27:04.458 align:start position:25% line:-2
フォルダ“content”を
SFrameにロード

00:27:05.125 --> 00:27:07.861 align:start position:27% line:-1
これでモデルを訓練できます

00:27:08.295 --> 00:27:13.600 align:start position:0% line:-2
“model =
tc.style transfer.create”と入力

00:27:13.700 --> 00:27:17.271 align:start position:25% line:-2
“style”と
“content”を渡します

00:27:18.205 --> 00:27:19.439 align:start position:39% line:-1
これだけです

00:27:20.007 --> 00:27:23.043 align:start position:36% line:-2
この訓練には
時間がかかるので

00:27:23.143 --> 00:27:28.048 align:start position:25% line:-2
今回も“作っておいた料理”を
お見せしますね

00:27:28.415 --> 00:27:31.452 align:start position:9% line:-2
“model = tc.load model”
と入力し

00:27:31.585 --> 00:27:35.622 align:start position:12% line:-2
訓練済みの
Style Transferモデルをロード

00:27:37.291 --> 00:27:42.229 align:start position:25% line:-2
どんなスタイル画像を使うのか
見てみましょう

00:27:43.897 --> 00:27:47.534 align:start position:29% line:-2
スタイルのSFrameの
画像カラムから

00:27:47.634 --> 00:27:51.338 align:start position:27% line:-1
スタイル“３”を見てみます

00:27:51.672 --> 00:27:54.208 align:start position:34% line:-1
積んである薪ですね

00:27:54.308 --> 00:27:57.044 align:start position:32% line:-1
印象的なパターンです

00:27:57.144 --> 00:28:01.648 align:start position:30% line:-2
これをフィルタにしたら
分かりやすいですね

00:27:57.144 --> 00:28:01.648 align:start position:30% line:-2
これをフィルタにしたら
分かりやすいですね

00:28:02.549 --> 00:28:05.786 align:start position:36% line:-2
コンテンツ画像も
見てみましょう

00:28:05.886 --> 00:28:09.857 align:start position:32% line:-2
テストデータセットを
ロードします

00:28:09.957 --> 00:28:15.529 align:start position:23% line:-2
これはアプリケーション実行時に
ユーザが持っている画像です

00:28:15.629 --> 00:28:19.433 align:start position:30% line:-2
モデルは訓練時に
この画像を見ていません

00:28:19.533 --> 00:28:21.835 align:start position:32% line:-1
テスト画像で評価して

00:28:21.935 --> 00:28:25.505 align:start position:32% line:-2
ユーザのデータに
汎化可能か見てみます

00:28:26.440 --> 00:28:28.942 align:start position:29% line:-2
まずテストデータセットを
ロード

00:28:30.510 --> 00:28:33.413 align:start position:16% line:-1
関数“tc.load images”で

00:28:33.614 --> 00:28:36.283 align:start position:20% line:-1
フォルダ“test”を呼び出します

00:28:36.917 --> 00:28:40.988 align:start position:30% line:-2
テストデータセットから
サンプルを１枚選びます

00:28:41.088 --> 00:28:44.925 align:start position:29% line:-2
最初の画像を
取り出すことにしましょう

00:28:46.093 --> 00:28:48.829 align:start position:29% line:-1
“.show”を呼び出し

00:28:50.430 --> 00:28:53.600 align:start position:32% line:-2
フィルタなしの写真を
表示させます

00:28:53.901 --> 00:28:55.636 align:start position:36% line:-1
これは僕の猫です

00:28:59.039 --> 00:29:00.407 align:start position:36% line:-1
いつもこんな感じ

00:28:59.039 --> 00:29:00.407 align:start position:36% line:-1
いつもこんな感じ

00:29:01.742 --> 00:29:07.347 align:start position:27% line:-2
では 訓練したモデルで
画像のスタイルを変換します

00:29:08.782 --> 00:29:13.687 align:start position:20% line:-2
“stylized image =
model.stylize”と入力

00:29:13.854 --> 00:29:16.924 align:start position:23% line:-1
関数が“stylize”なのは

00:29:17.024 --> 00:29:20.694 align:start position:16% line:-2
Style Transferのタスクに
特化しているからです

00:29:20.794 --> 00:29:23.730 align:start position:29% line:-1
サンプルの画像を渡します

00:29:23.831 --> 00:29:26.366 align:start position:32% line:-1
スタイルは“３”です

00:29:26.467 --> 00:29:30.470 align:start position:34% line:-2
さっきの薪の画像を
使うからです

00:29:32.339 --> 00:29:35.175 align:start position:29% line:-2
スタイルを変換した画像を
見てみます

00:29:36.443 --> 00:29:38.178 align:start position:29% line:-1
“.show”を使います

00:29:38.278 --> 00:29:40.881 align:start position:29% line:-1
猫が薪みたいになりました

00:29:40.981 --> 00:29:43.484 align:start position:43% line:-1
(拍手)

00:29:47.120 --> 00:29:49.456 align:start position:27% line:-1
他のスタイルも試してみます

00:29:49.790 --> 00:29:53.660 align:start position:34% line:-2
別のスタイルに
画像を変換しますね

00:29:53.961 --> 00:29:55.229 align:start position:41% line:-1
使うのは…

00:29:58.165 --> 00:29:59.700 align:start position:29% line:-1
さっきのサンプル画像です

00:29:59.933 --> 00:30:03.303 align:start position:34% line:-2
スタイルは“７”に
してみます

00:29:59.933 --> 00:30:03.303 align:start position:34% line:-2
スタイルは“７”に
してみます

00:30:05.105 --> 00:30:06.874 align:start position:36% line:-1
どうなるでしょう

00:30:12.780 --> 00:30:16.483 align:start position:27% line:-2
いいですね
フィルタはどれでしょうか？

00:30:16.583 --> 00:30:19.219 align:start position:29% line:-1
スタイル画像を見てみます

00:30:25.192 --> 00:30:26.793 align:start position:36% line:-1
スタイル画像の７

00:30:28.262 --> 00:30:32.332 align:start position:30% line:-2
“.show”を使って
表示させます

00:30:32.432 --> 00:30:36.103 align:start position:36% line:-2
これが猫にかけた
フィルタですね

00:30:37.471 --> 00:30:39.740 align:start position:18% line:-2
Style Transferモデルが
完成したので

00:30:39.840 --> 00:30:42.976 align:start position:11% line:-2
“model.export coreml”を
呼び出し

00:30:43.076 --> 00:30:47.047 align:start position:23% line:-1
Core ML形式で保存します

00:30:52.486 --> 00:30:56.190 align:start position:30% line:-2
今度は iPhoneの
アプリケーションを使い

00:30:56.290 --> 00:30:58.625 align:start position:34% line:-1
フィルタをかけます

00:31:01.929 --> 00:31:06.266 align:start position:20% line:-2
Style Transferという
アプリケーションを起動し

00:31:06.567 --> 00:31:10.938 align:start position:25% line:-2
Photo Libraryで
写真を選びます

00:31:12.005 --> 00:31:13.540 align:start position:36% line:-1
僕の犬の写真です

00:31:16.276 --> 00:31:17.544 align:start position:38% line:-1
名前はライカー

00:31:18.345 --> 00:31:21.982 align:start position:30% line:-2
このアプリケーションで
使用可能なスタイルは

00:31:22.082 --> 00:31:24.818 align:start position:29% line:-1
スクロールして見られます

00:31:24.918 --> 00:31:30.757 align:start position:21% line:-2
１つのモデルを訓練するのに
全部のスタイル画像を使いましたね

00:31:30.858 --> 00:31:33.894 align:start position:27% line:-2
モデル１つで
複数のスタイルができるので

00:31:33.994 --> 00:31:38.198 align:start position:34% line:-2
アプリケーションの
容量は増えません

00:31:39.032 --> 00:31:42.035 align:start position:25% line:-1
ライカーにかけたスタイルは―

00:31:43.937 --> 00:31:44.872 align:start position:39% line:-1
いい感じです

00:31:52.546 --> 00:31:53.447 align:start position:45% line:-1
では…

00:31:53.547 --> 00:31:58.585 align:start position:43% line:-1
(拍手)

00:31:58.685 --> 00:32:00.621 align:start position:38% line:-1
では要約します

00:31:58.685 --> 00:32:00.621 align:start position:38% line:-1
では要約します

00:32:00.821 --> 00:32:03.423 align:start position:29% line:-2
画像を
SFrame形式でロード

00:32:03.524 --> 00:32:07.628 align:start position:27% line:-2
スタイルとコンテンツ画像を
２つのSFrameへ

00:32:07.728 --> 00:32:11.432 align:start position:34% line:-2
高レベルのAPIで
作成したモデルは

00:32:11.532 --> 00:32:16.103 align:start position:25% line:-2
スタイルとコンテンツの画像に
直接作用します

00:32:16.336 --> 00:32:21.141 align:start position:29% line:-2
このモデルを検証するため
画像のスタイルを変換し―

00:32:21.241 --> 00:32:23.977 align:start position:30% line:-1
予測結果を視覚化します

00:32:24.111 --> 00:32:28.415 align:start position:27% line:-2
最後にCore ML形式で
モデルをエクスポート

00:32:30.484 --> 00:32:34.655 align:start position:21% line:-2
Turi Create 5.0の
他の機能を紹介します

00:32:34.955 --> 00:32:37.391 align:start position:29% line:-2
まずは Macの
GPUアクセラレーション

00:32:37.491 --> 00:32:41.528 align:start position:30% line:-2
パフォーマンスが
画像分類では12倍向上

00:32:41.628 --> 00:32:45.566 align:start position:21% line:-2
物体検知では９倍です
iMac Proを使った場合です

00:32:46.133 --> 00:32:50.204 align:start position:43% line:-1
(拍手)

00:32:50.971 --> 00:32:54.675 align:start position:21% line:-2
Core ML形式の
エクスポートに使える新しいタスク

00:32:54.775 --> 00:32:56.243 align:start position:29% line:-2
パーソナライゼーションも
あります

00:32:56.343 --> 00:32:59.079 align:start position:30% line:-1
これはユーザの履歴から

00:32:59.179 --> 00:33:02.182 align:start position:30% line:-1
レコメンドすることです

00:32:59.179 --> 00:33:02.182 align:start position:30% line:-1
レコメンドすることです

00:33:02.783 --> 00:33:07.254 align:start position:21% line:-2
モデルはCore MLの
カスタムモデルでデプロイされます

00:33:07.354 --> 00:33:11.458 align:start position:27% line:-2
macOS Mojaveと
iOS 12で使えます

00:33:11.592 --> 00:33:15.562 align:start position:23% line:-2
これはオープンソースにしてから
要望が多かったので

00:33:15.662 --> 00:33:17.898 align:start position:27% line:-1
紹介できてうれしく思います

00:33:19.199 --> 00:33:22.770 align:start position:43% line:-1
(拍手)

00:33:23.771 --> 00:33:28.041 align:start position:20% line:-2
レコメンダモデルは
他のCore MLモデルと同じです

00:33:28.141 --> 00:33:32.813 align:start position:21% line:-2
一番下のセクション
“Dependencies”には

00:33:32.913 --> 00:33:36.750 align:start position:32% line:-2
カスタムモデルを
使っているとあります

00:33:36.850 --> 00:33:39.286 align:start position:23% line:-1
TCRecommenderです

00:33:39.386 --> 00:33:42.756 align:start position:25% line:-2
Turi Createは
カスタムモデルAPIを通して

00:33:42.856 --> 00:33:45.859 align:start position:25% line:-2
Core MLのレコメンダを
サポートします

00:33:47.528 --> 00:33:52.099 align:start position:20% line:-2
使い方は
他のCore MLモデルとほぼ同じ

00:33:52.199 --> 00:33:54.301 align:start position:27% line:-1
モデルをインスタンス化して

00:33:54.635 --> 00:33:59.173 align:start position:21% line:-2
インプットを作り アバターの
作成アプリケーションを作りました

00:33:59.273 --> 00:34:01.975 align:start position:27% line:-1
ユーザは茶色のあごヒゲに―

00:33:59.273 --> 00:34:01.975 align:start position:27% line:-1
ユーザは茶色のあごヒゲに―

00:34:02.075 --> 00:34:06.380 align:start position:30% line:-2
口ヒゲとロングヘアを
アバターに選んでますね

00:34:06.480 --> 00:34:11.217 align:start position:23% line:-2
こうした対話をインプットとして
このモデルから予測できます

00:34:11.351 --> 00:34:16.790 align:start position:20% line:-2
“k: 10”とはトップテン予測を
出すということです

00:34:19.393 --> 00:34:21.428 align:start position:30% line:-1
では 今日のまとめです

00:34:22.161 --> 00:34:25.431 align:start position:27% line:-2
Turi Createでは
Core MLモデルを作り

00:34:25.532 --> 00:34:28.635 align:start position:29% line:-2
インテリジェントな機能を
実現できます

00:34:28.735 --> 00:34:31.371 align:start position:27% line:-1
使うのは５段階のレシピです

00:34:31.471 --> 00:34:36.844 align:start position:29% line:-2
最初にタスクを確認し
機械学習タスクにすること

00:34:36.944 --> 00:34:41.447 align:start position:29% line:-2
データを集めて注釈をつけ
モデルの訓練に使うこと

00:34:42.049 --> 00:34:47.821 align:start position:21% line:-2
タスクに合った高レベルのAPIを
使ってモデルを訓練すること

00:34:48.355 --> 00:34:53.159 align:start position:32% line:-2
質的にも量的にも
モデルを評価すること

00:34:53.260 --> 00:34:56.864 align:start position:27% line:-2
最後にCore ML形式で
デプロイすること

00:34:59.133 --> 00:35:03.971 align:start position:16% line:-2
このレシピでコードを作成します
まずTuri Createをインポート

00:34:59.133 --> 00:35:03.971 align:start position:16% line:-2
このレシピでコードを作成します
まずTuri Createをインポート

00:35:04.304 --> 00:35:06.807 align:start position:27% line:-2
データをSFrame形式に
ロード

00:35:06.907 --> 00:35:10.611 align:start position:30% line:-2
タスクに合ったAPIで
モデルを作成

00:35:11.011 --> 00:35:16.383 align:start position:23% line:-2
同じくタスクに合った評価関数で
モデルを評価

00:35:16.517 --> 00:35:20.354 align:start position:21% line:-2
“export coreml”で
エクスポートしてデプロイ

00:35:21.855 --> 00:35:25.526 align:start position:23% line:-2
Turi Createは
機械学習タスクをサポートします

00:35:25.626 --> 00:35:30.597 align:start position:25% line:-2
画像分類やテキスト分類などの
高レベルのタスクから

00:35:30.698 --> 00:35:36.570 align:start position:29% line:-2
データの回帰や分類など
低レベルのタスクまでです

00:35:37.871 --> 00:35:42.542 align:start position:25% line:-2
インテリジェントな機能を
作成したモデルで実装できます

00:35:42.643 --> 00:35:46.847 align:start position:27% line:-2
物体検知や
スタイル変換などの機能です

00:35:48.415 --> 00:35:53.520 align:start position:7% line:-2
詳しくはdeveloper.apple.comの
セッションで

00:35:53.620 --> 00:35:58.092 align:start position:29% line:-2
ラボは今日と金曜の午後に
やっています

00:35:58.192 --> 00:36:02.162 align:start position:30% line:-2
フィードバック歓迎です
質問にもお答えします

00:35:58.192 --> 00:36:02.162 align:start position:30% line:-2
フィードバック歓迎です
質問にもお答えします

00:36:02.262 --> 00:36:06.667 align:start position:32% line:-2
今日お見せしたデモも
ご覧いただけます

00:36:07.067 --> 00:36:07.834 align:start position:41% line:-1
ありがとう

00:36:07.935 --> 00:36:10.204 align:start position:43% line:-1
(拍手)
