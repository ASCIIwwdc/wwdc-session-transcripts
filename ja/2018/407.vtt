WEBVTT

00:00:07.508 --> 00:00:16.082 align:start position:43% line:-1
(音楽)

00:00:20.587 --> 00:00:25.726 align:start position:43% line:-1
(拍手)

00:00:25.826 --> 00:00:27.227 align:start position:41% line:-1
こんにちは

00:00:27.327 --> 00:00:28.462 align:start position:36% line:-1
ジョン･ヘスです

00:00:28.562 --> 00:00:34.868 align:start position:0% line:-2
Practical Approaches to Great
App Performanceの話をします

00:00:35.302 --> 00:00:37.404 align:start position:20% line:-2
私は
Xcodeチームのエンジニアとして

00:00:37.504 --> 00:00:42.543 align:start position:21% line:-2
この数年 パフォーマンスの問題に
取り組んできました

00:00:42.643 --> 00:00:45.145 align:start position:21% line:-2
まず Project Findと
Open Quickly

00:00:45.245 --> 00:00:50.117 align:start position:23% line:-2
パフォーマンスを左右する
主要な機能となる２つの領域です

00:00:50.651 --> 00:00:55.522 align:start position:14% line:-2
最近 XcodeのGUIの応答性について
調査する機会がありました

00:00:55.622 --> 00:00:59.359 align:start position:29% line:-2
そこでのアプローチを
共有したいと考えています

00:00:59.459 --> 00:01:01.862 align:start position:29% line:-1
私が熟知しているコードと

00:00:59.459 --> 00:01:01.862 align:start position:29% line:-1
私が熟知しているコードと

00:01:01.962 --> 00:01:04.730 align:start position:30% line:-2
初めて経験したコードの
両方で行いました

00:01:05.833 --> 00:01:11.138 align:start position:25% line:-2
今日のセッションで
最も大切な教訓を１つ教えます

00:01:11.338 --> 00:01:15.042 align:start position:25% line:-2
“測定こそが
パフォーマンスの基盤となる”

00:01:15.609 --> 00:01:18.212 align:start position:30% line:-2
パフォーマンスの問題を
解決したければ

00:01:18.378 --> 00:01:22.816 align:start position:21% line:-1
まず 測定して現状を知ることです

00:01:23.584 --> 00:01:26.186 align:start position:29% line:-1
修正を繰り返し行う場合―

00:01:26.286 --> 00:01:32.426 align:start position:25% line:-2
期待どおりの効果が出ているか
毎回測定する必要があります

00:01:33.360 --> 00:01:36.897 align:start position:34% line:-2
問題が解決したら
再度測定を行います

00:01:37.130 --> 00:01:39.666 align:start position:30% line:-1
最初の段階と比較して―

00:01:39.766 --> 00:01:44.972 align:start position:27% line:-2
パフォーマンスの改善状況を
定量化します

00:01:45.072 --> 00:01:49.510 align:start position:27% line:-2
それを上司や同僚やユーザと
共有するのです

00:01:50.577 --> 00:01:53.847 align:start position:23% line:-2
ユーザ向けに
パフォーマンス改善を行う場合―

00:01:54.248 --> 00:01:58.085 align:start position:29% line:-2
“トータルパフォーマンス
インパクト”が大切です

00:01:58.552 --> 00:02:04.191 align:start position:27% line:-2
例えば アプリケーションの
１つの分野の機能と性能を―

00:01:58.552 --> 00:02:04.191 align:start position:27% line:-2
例えば アプリケーションの
１つの分野の機能と性能を―

00:02:05.092 --> 00:02:06.393 align:start position:29% line:-1
50パーセント改善します

00:02:06.493 --> 00:02:09.496 align:start position:23% line:-2
でも ユーザの１パーセントしか
使わない機能だったら？

00:02:09.596 --> 00:02:14.968 align:start position:23% line:-2
すべてのユーザがよく使う機能を
10パーセント改善する方が

00:02:15.068 --> 00:02:17.171 align:start position:27% line:-1
大きなインパクトがあります

00:02:17.271 --> 00:02:19.206 align:start position:23% line:-1
エッジケースの最適化ではなく―

00:02:19.306 --> 00:02:22.543 align:start position:30% line:-2
トータルなインパクトを
重視してください

00:02:24.778 --> 00:02:28.115 align:start position:23% line:-1
性能のバグをどう解決しますか？

00:02:28.215 --> 00:02:29.783 align:start position:34% line:-1
通常のバグの場合―

00:02:29.883 --> 00:02:33.787 align:start position:29% line:-2
ユーザからの不具合報告で
始まります

00:02:33.887 --> 00:02:37.824 align:start position:23% line:-2
アプリケーションの不具合状況が
記されています

00:02:38.091 --> 00:02:41.195 align:start position:30% line:-2
問題のある動作を
再現する方法を見つけ―

00:02:41.295 --> 00:02:43.197 align:start position:29% line:-1
わざと不具合を起こします

00:02:43.530 --> 00:02:46.366 align:start position:23% line:-1
そこで デバッガに接続すれば―

00:02:46.466 --> 00:02:49.703 align:start position:27% line:-1
不具合の内容が確認できます

00:02:50.804 --> 00:02:53.674 align:start position:25% line:-2
そこで コードの本来の動きと
組み合わせて

00:02:53.841 --> 00:02:57.544 align:start position:27% line:-2
必要な修正と
不審な動きの排除を行います

00:02:57.811 --> 00:03:00.981 align:start position:30% line:-2
何か副作用が
起きていないか確認して

00:02:57.811 --> 00:03:00.981 align:start position:30% line:-2
何か副作用が
起きていないか確認して

00:03:01.081 --> 00:03:04.484 align:start position:29% line:-2
バグが完全になくなるまで
検証を続けます

00:03:05.652 --> 00:03:09.389 align:start position:27% line:-1
性能のバグもこれと同様です

00:03:09.957 --> 00:03:11.992 align:start position:34% line:-2
唯一違うのは
デバッガではなく―

00:03:12.092 --> 00:03:16.630 align:start position:25% line:-2
測定に適したツール
“プロファイラ”を使用します

00:03:16.897 --> 00:03:21.502 align:start position:27% line:-2
プログラムの動作が遅いのを
再現する方法を見つけます

00:03:21.935 --> 00:03:24.571 align:start position:29% line:-2
プロファイラを用いて
そのステップを走らせると

00:03:24.671 --> 00:03:28.442 align:start position:29% line:-2
動作が遅い時の
コードの動きが分かります

00:03:29.176 --> 00:03:30.611 align:start position:39% line:-1
その知識と―

00:03:30.711 --> 00:03:33.947 align:start position:29% line:-2
その時 プログラムが
行うべき動作を統合します

00:03:34.047 --> 00:03:37.117 align:start position:29% line:-2
そして 問題となっている
ステップを排除します

00:03:37.217 --> 00:03:38.819 align:start position:41% line:-1
基本的に―

00:03:38.919 --> 00:03:42.756 align:start position:27% line:-2
ムダなステップを取り除くと
コードが高速化します

00:03:42.856 --> 00:03:44.658 align:start position:30% line:-1
どんな場合でも同じです

00:03:45.659 --> 00:03:48.328 align:start position:34% line:-1
コードを修正して―

00:03:48.428 --> 00:03:52.599 align:start position:29% line:-2
期待した結果が出るまで
修正と測定を繰り返します

00:03:54.968 --> 00:03:56.737 align:start position:29% line:-1
このような作業をする際―

00:03:56.837 --> 00:04:00.541 align:start position:27% line:-1
いくつかの状況に遭遇します

00:03:56.837 --> 00:04:00.541 align:start position:27% line:-1
いくつかの状況に遭遇します

00:04:00.807 --> 00:04:04.111 align:start position:30% line:-2
状況によって
バグを再現させるための

00:04:04.211 --> 00:04:06.480 align:start position:23% line:-1
コードのテスト方法も異なります

00:04:06.847 --> 00:04:10.317 align:start position:29% line:-2
時々起こるのが
性能のリグレッションです

00:04:10.617 --> 00:04:15.822 align:start position:30% line:-2
順調に動作していたのが
誰かがチェックすると

00:04:15.923 --> 00:04:17.958 align:start position:25% line:-1
性能がひどく落ち込んでいます

00:04:18.058 --> 00:04:21.628 align:start position:27% line:-2
その原因を
突き止めなければなりません

00:04:21.962 --> 00:04:24.097 align:start position:27% line:-1
リグレッションが明白な場合

00:04:24.998 --> 00:04:28.769 align:start position:30% line:-2
あるいは 近い将来に
再現しないと考えた場合

00:04:28.869 --> 00:04:33.507 align:start position:25% line:-2
プロファイラを用いたテストで
終わらせるかもしれません

00:04:34.408 --> 00:04:38.912 align:start position:21% line:-2
でも パフォーマンスの“勝利”は
簡単にはつかめません

00:04:39.446 --> 00:04:43.450 align:start position:29% line:-2
緩やかなリグレッションを
見つけるのは困難です

00:04:43.884 --> 00:04:45.552 align:start position:29% line:-1
皆さんにお勧めするのが―

00:04:45.652 --> 00:04:47.788 align:start position:29% line:-2
自動化された性能テストを
使うことです

00:04:47.888 --> 00:04:49.756 align:start position:29% line:-2
アプリケーションの性能を
把握することで

00:04:49.857 --> 00:04:52.726 align:start position:29% line:-2
緩やかなリグレッションに
気付くことができます

00:04:55.128 --> 00:04:57.297 align:start position:34% line:-1
もう１つの状況です

00:04:57.397 --> 00:05:01.435 align:start position:29% line:-2
アプリケーションの動作が
ずっと同じ場合です

00:04:57.397 --> 00:05:01.435 align:start position:29% line:-2
アプリケーションの動作が
ずっと同じ場合です

00:05:01.568 --> 00:05:05.005 align:start position:30% line:-2
例えば 描画テストで
45fpsで動いていて

00:05:05.105 --> 00:05:06.640 align:start position:27% line:-1
60fpsが目標だとします

00:05:06.740 --> 00:05:10.143 align:start position:21% line:-1
わずかに改善する必要がありますが

00:05:10.244 --> 00:05:15.849 align:start position:27% line:-2
部分的な修正で解決できると
分かっているケースです

00:05:16.250 --> 00:05:20.387 align:start position:27% line:-2
この状況でも 自動化された
性能テストが有効です

00:05:20.487 --> 00:05:22.956 align:start position:27% line:-1
これまでの経験から言えます

00:05:24.758 --> 00:05:26.460 align:start position:36% line:-1
３番目の状況です

00:05:26.560 --> 00:05:29.429 align:start position:29% line:-2
設計不良により
アプリケーションの性能が

00:05:29.530 --> 00:05:32.533 align:start position:25% line:-1
目標より大きく低下しています

00:05:33.400 --> 00:05:36.103 align:start position:23% line:-1
部分的な修正では改善できません

00:05:36.203 --> 00:05:39.806 align:start position:27% line:-1
過去に何度か修正しましたが

00:05:39.907 --> 00:05:41.708 align:start position:30% line:-1
まだ性能が劣っています

00:05:41.909 --> 00:05:45.479 align:start position:30% line:-2
この場合は
徹底的な修正が必要です

00:05:45.579 --> 00:05:49.483 align:start position:23% line:-2
機能のコア部分や
アルゴリズムの再設計を行います

00:05:49.583 --> 00:05:52.219 align:start position:21% line:-1
性能に大きな影響を与えるからです

00:05:52.352 --> 00:05:55.355 align:start position:34% line:-2
このような場合は
性能テストを行い―

00:05:55.455 --> 00:05:58.525 align:start position:30% line:-2
問題が解決したか
測定する必要があります

00:05:59.159 --> 00:06:02.162 align:start position:29% line:-1
何をテストすべきでしょう

00:05:59.159 --> 00:06:02.162 align:start position:29% line:-1
何をテストすべきでしょう

00:06:02.262 --> 00:06:06.967 align:start position:27% line:-2
このような修正を行う時は
“一気にすべてを進めない”

00:06:07.067 --> 00:06:09.102 align:start position:38% line:-1
これが大切です

00:06:09.203 --> 00:06:10.604 align:start position:30% line:-1
本当はそうしたいのです

00:06:10.704 --> 00:06:14.675 align:start position:34% line:-2
何もないところから
すべてを組み立てる

00:06:15.042 --> 00:06:16.343 align:start position:32% line:-1
でも それは危険です

00:06:16.476 --> 00:06:18.378 align:start position:30% line:-1
改善を成し遂げたくても

00:06:18.478 --> 00:06:22.382 align:start position:25% line:-2
すべての機能を手直しするのは
苦難の道です

00:06:24.017 --> 00:06:27.321 align:start position:27% line:-1
この時 理解すべきなのは―

00:06:27.421 --> 00:06:30.491 align:start position:25% line:-2
コードの機能的な制約だけでは
ありません

00:06:30.591 --> 00:06:32.492 align:start position:34% line:-1
性能面における制約

00:06:32.593 --> 00:06:37.130 align:start position:21% line:-2
そして 多くのユーザに当てはまる
典型的な使用パターンも含まれます

00:06:37.231 --> 00:06:41.068 align:start position:32% line:-2
過去に実施した検証が
それを可能にします

00:06:41.502 --> 00:06:46.440 align:start position:21% line:-2
私が Xcodeで経験した状況を
共有しましょう

00:06:47.107 --> 00:06:51.812 align:start position:11% line:-2
Xcode 9で Project Findの
修正を行いました

00:06:52.412 --> 00:06:56.316 align:start position:27% line:-2
目標は数十ミリ秒で
検索結果を表示することです

00:06:56.817 --> 00:07:00.587 align:start position:23% line:-1
それについて同僚と議論した時―

00:06:56.817 --> 00:07:00.587 align:start position:23% line:-1
それについて同僚と議論した時―

00:07:00.687 --> 00:07:04.758 align:start position:21% line:-2
大きなプロジェクトをまたぐ検索が
課題でした

00:07:04.858 --> 00:07:07.327 align:start position:20% line:-1
例えば 文字列や“E”を含む文字は

00:07:07.427 --> 00:07:09.763 align:start position:34% line:-1
膨大な結果が出ます

00:07:10.097 --> 00:07:14.368 align:start position:29% line:-2
アプリケーションが
検索結果を即座に出せたら

00:07:14.468 --> 00:07:16.136 align:start position:38% line:-1
かなり高速です

00:07:16.370 --> 00:07:19.106 align:start position:27% line:-1
しかし 通常はどうでしょう

00:07:19.306 --> 00:07:22.943 align:start position:30% line:-2
使用しているAPIや
クラスの名前を探します

00:07:23.043 --> 00:07:26.113 align:start position:23% line:-1
または 参照している画像の名前

00:07:26.213 --> 00:07:28.815 align:start position:21% line:-1
たぶん数十か数百の結果を出します

00:07:28.916 --> 00:07:33.353 align:start position:21% line:-2
もちろん 100万件の検索結果が
必要な時もあります

00:07:33.453 --> 00:07:36.323 align:start position:29% line:-1
しかし 通常は数百件です

00:07:36.690 --> 00:07:39.626 align:start position:27% line:-1
検索で行うことのいくつかは

00:07:39.726 --> 00:07:43.430 align:start position:27% line:-1
生の検索結果を出すことです

00:07:43.530 --> 00:07:48.035 align:start position:23% line:-2
他には 効率的に
テキストにインデックスを付けて

00:07:48.135 --> 00:07:49.970 align:start position:29% line:-1
最初の作業を省くことです

00:07:50.070 --> 00:07:54.675 align:start position:29% line:-2
これら２つの状況は
目的がまったく異なるので

00:07:54.775 --> 00:07:58.412 align:start position:29% line:-2
どちらを優先するかで
最適化の方法が異なります

00:07:58.745 --> 00:08:01.215 align:start position:32% line:-1
ですから大切なのは―

00:07:58.745 --> 00:08:01.215 align:start position:32% line:-1
ですから大切なのは―

00:08:01.582 --> 00:08:05.853 align:start position:21% line:-2
ユーザの目的を理解して
それに合った最適化を行うことです

00:08:07.855 --> 00:08:11.492 align:start position:27% line:-2
テストには
手作業か自動かに関わらず―

00:08:11.592 --> 00:08:13.927 align:start position:27% line:-1
ある種のフォームが必要です

00:08:16.163 --> 00:08:18.699 align:start position:25% line:-1
２つの性能テストを紹介します

00:08:18.799 --> 00:08:21.869 align:start position:30% line:-2
Xcodeの性能を測る
典型的なものです

00:08:23.637 --> 00:08:25.072 align:start position:34% line:-1
ユニットテストと―

00:08:25.172 --> 00:08:26.673 align:start position:29% line:-1
インテグレーションテスト

00:08:27.107 --> 00:08:28.475 align:start position:36% line:-1
２つを比較します

00:08:29.243 --> 00:08:30.844 align:start position:29% line:-1
まず ユニットテストです

00:08:30.944 --> 00:08:34.715 align:start position:32% line:-2
アプリケーションの
一部の機能を分離して

00:08:34.815 --> 00:08:36.650 align:start position:32% line:-1
性能を自動測定します

00:08:36.917 --> 00:08:38.652 align:start position:36% line:-1
依存を遮断して―

00:08:38.751 --> 00:08:43.056 align:start position:32% line:-2
他の機能と切り離して
テストを実施します

00:08:43.390 --> 00:08:47.995 align:start position:18% line:-2
私が Xcodeのコード補完のための
テストを行うなら

00:08:48.095 --> 00:08:50.731 align:start position:23% line:-1
３つのテストを１セットにします

00:08:50.998 --> 00:08:52.132 align:start position:41% line:-1
まず１つ目

00:08:52.232 --> 00:08:55.903 align:start position:30% line:-2
コンパイラを使って
生データの結果を得て―

00:08:56.003 --> 00:08:58.305 align:start position:27% line:-1
コード補完の候補を返します

00:08:58.839 --> 00:09:00.541 align:start position:39% line:-1
そして２つ目

00:08:58.839 --> 00:09:00.541 align:start position:39% line:-1
そして２つ目

00:09:00.774 --> 00:09:03.977 align:start position:25% line:-2
結果の相関性 序列 スコアを
測定し―

00:09:04.077 --> 00:09:06.113 align:start position:27% line:-1
どれを表示するか判断します

00:09:06.813 --> 00:09:10.284 align:start position:23% line:-1
３つ目は それらの結果をもとに

00:09:10.384 --> 00:09:13.620 align:start position:23% line:-1
画面のUI要素に入れていきます

00:09:13.854 --> 00:09:15.789 align:start position:29% line:-1
この３つのテストにより―

00:09:15.889 --> 00:09:20.861 align:start position:21% line:-2
開発環境に必要な
コード補完の要素をカバーできます

00:09:23.030 --> 00:09:27.201 align:start position:25% line:-2
ユニットテストには
いくつかのメリットがあります

00:09:27.534 --> 00:09:30.971 align:start position:30% line:-2
リグレッションに
重点が置かれているので

00:09:31.071 --> 00:09:33.607 align:start position:32% line:-2
問題が起きた時
場所の特定が容易です

00:09:33.707 --> 00:09:36.376 align:start position:21% line:-1
コードがすでに調査済みだからです

00:09:37.578 --> 00:09:41.448 align:start position:27% line:-2
さらに 再現性の高い結果を
生成します

00:09:41.548 --> 00:09:45.152 align:start position:27% line:-2
実施ごとに
大きなばらつきもありません

00:09:45.319 --> 00:09:47.487 align:start position:36% line:-1
コードは明確です

00:09:48.088 --> 00:09:50.157 align:start position:23% line:-1
次に インテグレーションテスト

00:09:50.958 --> 00:09:54.027 align:start position:23% line:-1
ここでは ユーザと同じ状況で―

00:09:54.128 --> 00:09:57.698 align:start position:29% line:-2
アプリケーションの性能を
測定します

00:09:58.232 --> 00:09:59.433 align:start position:39% line:-1
全体的にです

00:09:59.833 --> 00:10:05.272 align:start position:23% line:-2
インテグレーションテストで
コード補完を書いているとします

00:09:59.833 --> 00:10:05.272 align:start position:23% line:-2
インテグレーションテストで
コード補完を書いているとします

00:10:05.772 --> 00:10:07.908 align:start position:23% line:-2
Xcodeのアプリケーションを
すべて立ち上げ―

00:10:08.308 --> 00:10:09.910 align:start position:29% line:-1
ソースファイルを開きます

00:10:10.010 --> 00:10:12.913 align:start position:23% line:-1
ファイルを操作し タイプして―

00:10:13.080 --> 00:10:15.582 align:start position:23% line:-1
コード補完を何度も繰り返します

00:10:15.949 --> 00:10:19.653 align:start position:18% line:-2
この時 Xcodeが何をやっているか
監視すると―

00:10:19.753 --> 00:10:23.290 align:start position:29% line:-1
他には何も行っていません

00:10:24.024 --> 00:10:27.361 align:start position:34% line:-2
私のタイプどおりに
描画し配置して―

00:10:27.461 --> 00:10:30.297 align:start position:27% line:-2
シンタックスカラーリングを
しているのです

00:10:30.430 --> 00:10:33.901 align:start position:27% line:-2
裏ではインデックスを作成し
ステータスを取得して

00:10:34.001 --> 00:10:37.004 align:start position:20% line:-2
Assistant Editorに
表示するファイルを決めています

00:10:37.104 --> 00:10:40.874 align:start position:32% line:-2
これらのすべては
コード補完と連動して

00:10:40.974 --> 00:10:42.509 align:start position:21% line:-1
CPUのリソースで競合しています

00:10:43.010 --> 00:10:47.714 align:start position:20% line:-2
プロファイラでは 80パーセントを
シンタックスカラーリング

00:10:47.815 --> 00:10:50.884 align:start position:25% line:-2
20パーセントをコード補完に
費やしているのが分かります

00:10:50.984 --> 00:10:53.987 align:start position:25% line:-1
コード補完の性能を改善する―

00:10:54.154 --> 00:10:56.056 align:start position:25% line:-1
ベストな方法が見つかりました

00:10:56.156 --> 00:10:58.458 align:start position:27% line:-2
シンタックスカラーリングの
先送りです

00:10:58.592 --> 00:11:02.763 align:start position:29% line:-2
これはユニットテストでは
得られなかった知識です

00:10:58.592 --> 00:11:02.763 align:start position:29% line:-2
これはユニットテストでは
得られなかった知識です

00:11:03.030 --> 00:11:06.433 align:start position:27% line:-2
今日 皆さんに２つの教訓を
与えられるなら―

00:11:06.533 --> 00:11:08.068 align:start position:36% line:-1
２つ目は以下です

00:11:08.168 --> 00:11:09.670 align:start position:34% line:-1
“性能の検証は―”

00:11:09.770 --> 00:11:13.540 align:start position:23% line:-2
“インテグレーションテストから
始める”

00:11:13.640 --> 00:11:16.743 align:start position:25% line:-1
そこでユーザ体験を測定します

00:11:17.978 --> 00:11:21.281 align:start position:32% line:-2
テストと測定について
説明してきましたが―

00:11:21.381 --> 00:11:25.619 align:start position:23% line:-2
今からツールを使った
プロファイリングの紹介をします

00:11:25.719 --> 00:11:27.454 align:start position:34% line:-1
デモ機を使用します

00:11:34.628 --> 00:11:36.797 align:start position:25% line:-1
パフォーマンスに問題があり―

00:11:36.897 --> 00:11:39.800 align:start position:16% line:-2
Xcode 9とXcode 10の間で
修正を行いました

00:11:40.234 --> 00:11:41.468 align:start position:34% line:-1
それをお見せします

00:11:41.568 --> 00:11:43.504 align:start position:27% line:-1
Xcode 9を立ち上げ―

00:11:44.238 --> 00:11:46.139 align:start position:27% line:-2
アプリケーションのソースを
開きます

00:11:47.207 --> 00:11:50.110 align:start position:34% line:-2
これから見るのは
タブ作成の問題です

00:11:50.344 --> 00:11:53.580 align:start position:14% line:-1
“command + T”を数回押します

00:11:53.680 --> 00:11:56.650 align:start position:27% line:-1
この時 画面が黒く点滅して

00:11:56.750 --> 00:11:59.253 align:start position:34% line:-2
タブを作成するのに
数秒かかります

00:11:59.520 --> 00:12:03.257 align:start position:23% line:-1
明らかに期待していない動作です

00:11:59.520 --> 00:12:03.257 align:start position:23% line:-1
明らかに期待していない動作です

00:12:03.524 --> 00:12:04.825 align:start position:32% line:-1
修正の必要があります

00:12:04.925 --> 00:12:07.060 align:start position:30% line:-1
その方法をご覧ください

00:12:08.195 --> 00:12:11.131 align:start position:18% line:-2
Instrumentsを立ち上げます
プロファイリングのツールです

00:12:11.298 --> 00:12:13.133 align:start position:21% line:-1
メニューのXcodeから開けます

00:12:13.233 --> 00:12:15.769 align:start position:7% line:-2
“Open Developer Tool”の下の
“Instruments”です

00:12:15.869 --> 00:12:18.005 align:start position:25% line:-1
これは Xcode 9なので

00:12:18.105 --> 00:12:20.474 align:start position:18% line:-2
そこから“Instruments”が
立ち上がります

00:12:20.574 --> 00:12:22.543 align:start position:29% line:-2
でも今回は
私の“Dock”にある―

00:12:22.643 --> 00:12:24.178 align:start position:25% line:-1
Xcode 10用を使います

00:12:24.511 --> 00:12:27.414 align:start position:23% line:-1
Xcodeを隠して持ってきます

00:12:29.049 --> 00:12:30.918 align:start position:29% line:-2
Instrumentsが
立ち上がりました

00:12:31.685 --> 00:12:35.856 align:start position:21% line:-2
測定に使う
プロファイリングツールの一覧です

00:12:36.223 --> 00:12:37.591 align:start position:29% line:-1
さまざまな測定が可能です

00:12:37.691 --> 00:12:39.827 align:start position:30% line:-1
グラフィックスの使用率

00:12:40.060 --> 00:12:41.528 align:start position:39% line:-1
メモリ消費量

00:12:41.728 --> 00:12:42.796 align:start position:45% line:-1
I/O

00:12:42.996 --> 00:12:44.298 align:start position:38% line:-1
さまざまな時間

00:12:45.632 --> 00:12:49.269 align:start position:30% line:-2
どれから使えばいいのか
戸惑うかもしれません

00:12:51.471 --> 00:12:53.140 align:start position:36% line:-1
お勧めがあります

00:12:53.640 --> 00:12:56.143 align:start position:29% line:-1
この中の１つを学ぶなら―

00:12:56.243 --> 00:12:57.845 align:start position:23% line:-1
Time Profilerです

00:12:58.212 --> 00:13:01.515 align:start position:23% line:-2
私は測定の95パーセント以上を
これで行っています

00:12:58.212 --> 00:13:01.515 align:start position:23% line:-2
私は測定の95パーセント以上を
これで行っています

00:13:01.615 --> 00:13:04.218 align:start position:25% line:-2
アプリケーションが遅いという
問題は―

00:13:04.318 --> 00:13:08.155 align:start position:23% line:-1
処理時間が長すぎるのが原因です

00:13:08.655 --> 00:13:11.658 align:start position:23% line:-1
I/Oが多すぎて遅いのならば―

00:13:11.825 --> 00:13:15.529 align:start position:14% line:-2
時間に関係するので
Time Profilerで検証できます

00:13:16.029 --> 00:13:17.831 align:start position:34% line:-1
１つだけ選ぶならば

00:13:17.965 --> 00:13:19.566 align:start position:23% line:-1
Time Profilerです

00:13:20.467 --> 00:13:22.302 align:start position:34% line:-1
使い方を見ましょう

00:13:25.639 --> 00:13:29.243 align:start position:29% line:-2
ダブルクリックするだけで
立ち上がります

00:13:30.377 --> 00:13:32.579 align:start position:25% line:-2
“Instruments”を
全画面にします

00:13:33.580 --> 00:13:35.682 align:start position:25% line:-1
ここでXcodeを記録します

00:13:36.316 --> 00:13:39.353 align:start position:16% line:-2
左上の
“Instruments”ウインドウで

00:13:39.453 --> 00:13:42.789 align:start position:32% line:-2
記録プロセスを
コントロールできます

00:13:43.023 --> 00:13:45.859 align:start position:27% line:-2
デフォルトでは
この“記録”ボタンを押すと

00:13:45.959 --> 00:13:48.095 align:start position:23% line:-2
すべてのプロセスが
“My Mac”に記録されます

00:13:48.195 --> 00:13:50.597 align:start position:25% line:-1
今回は Xcodeに絞ります

00:13:55.068 --> 00:13:57.638 align:start position:29% line:-2
ターゲットを
Xcodeに切り替えて―

00:13:58.238 --> 00:13:59.306 align:start position:34% line:-1
“記録”を押します

00:13:59.406 --> 00:14:01.675 align:start position:23% line:-1
ウインドウのこの部分に注目して

00:13:59.406 --> 00:14:01.675 align:start position:23% line:-1
ウインドウのこの部分に注目して

00:14:01.775 --> 00:14:03.610 align:start position:29% line:-1
トラックしたいと思います

00:14:03.710 --> 00:14:05.979 align:start position:25% line:-1
ウインドウを少し小さくします

00:14:06.079 --> 00:14:08.048 align:start position:38% line:-1
まだ見えますね

00:14:08.148 --> 00:14:11.685 align:start position:29% line:-2
先ほど問題のあった
タブをいくつか作成します

00:14:12.986 --> 00:14:16.089 align:start position:27% line:-1
ここのグラフが変わりました

00:14:16.190 --> 00:14:17.691 align:start position:36% line:-1
ここで停止して―

00:14:18.425 --> 00:14:19.960 align:start position:21% line:-1
Instrumentsに戻ります

00:14:21.628 --> 00:14:23.330 align:start position:32% line:-1
何が起きたでしょう？

00:14:23.797 --> 00:14:25.566 align:start position:25% line:-1
プロファイラが走っている間―

00:14:25.999 --> 00:14:28.435 align:start position:27% line:-2
デバッガのように
プロセスを追跡していました

00:14:28.602 --> 00:14:31.738 align:start position:27% line:-1
毎秒数千回 止まっています

00:14:32.072 --> 00:14:35.008 align:start position:27% line:-2
それが止まるたびに
バックトレースを収集します

00:14:35.108 --> 00:14:36.376 align:start position:34% line:-1
念のため言いますが

00:14:36.477 --> 00:14:40.714 align:start position:25% line:-2
バックトレースはプログラムが
たどった経路を記述しています

00:14:40.814 --> 00:14:43.550 align:start position:25% line:-2
例えば functionCの
６行目にいるなら―

00:14:43.650 --> 00:14:46.019 align:start position:27% line:-2
メインがAを呼び Bを呼び
そしてCを呼んだからです

00:14:46.119 --> 00:14:48.455 align:start position:21% line:-2
そして 経路は
“メイン A B C”となります

00:14:48.922 --> 00:14:52.025 align:start position:23% line:-2
Instrumentsが
その１つを選んでこう記述します

00:14:52.125 --> 00:14:55.062 align:start position:14% line:-1
“functionCで１ミリ秒費やした”

00:14:55.362 --> 00:14:57.898 align:start position:27% line:-1
それがサンプリングの間隔で

00:14:57.998 --> 00:14:59.867 align:start position:25% line:-1
ミリ秒ごとに記録するからです

00:15:00.934 --> 00:15:02.269 align:start position:32% line:-1
メインスレッドでは―

00:15:02.369 --> 00:15:04.805 align:start position:14% line:-2
すべてのバックトレースが
main functionから始まります

00:15:04.905 --> 00:15:06.640 align:start position:14% line:-1
application mainを呼んで

00:15:06.740 --> 00:15:09.776 align:start position:21% line:-2
枝分かれして
すべてのコードに広がっていきます

00:15:10.110 --> 00:15:12.646 align:start position:29% line:-2
これらのバックトレースを
折り畳み―

00:15:12.746 --> 00:15:15.182 align:start position:25% line:-1
プレフィックス木を展開します

00:15:15.282 --> 00:15:17.384 align:start position:25% line:-1
メインから広がっていくのです

00:15:17.484 --> 00:15:20.954 align:start position:29% line:-2
ミリ秒ごとのカウンターを
最上位で集めるので

00:15:21.054 --> 00:15:26.360 align:start position:23% line:-2
ソースコード各領域の所要時間を
階層的に見られます

00:15:26.660 --> 00:15:30.831 align:start position:27% line:-2
これにより 冗長で不必要な
オペレーションを見つけ―

00:15:30.931 --> 00:15:32.199 align:start position:36% line:-1
高速化を図れます

00:15:32.299 --> 00:15:36.270 align:start position:29% line:-2
アプリケーションの性能を
向上させる基本手段です

00:15:36.937 --> 00:15:38.572 align:start position:36% line:-1
ご想像のとおり―

00:15:39.106 --> 00:15:41.742 align:start position:23% line:-1
毎秒数千回のバックトレースです

00:15:41.842 --> 00:15:45.579 align:start position:27% line:-2
Instrumentsには
膨大なデータがあります

00:15:46.046 --> 00:15:48.015 align:start position:36% line:-1
最も重要なのは―

00:15:48.115 --> 00:15:50.884 align:start position:27% line:-2
データをできるだけ
フィルタリングすることです

00:15:50.984 --> 00:15:53.820 align:start position:23% line:-1
そうすれば 道筋が見えてきます

00:15:53.921 --> 00:15:56.790 align:start position:21% line:-1
細かい点にとらわれてはいけません

00:15:56.890 --> 00:16:00.427 align:start position:29% line:-2
ここで 強力なフィルタの
使い方をご紹介します

00:15:56.890 --> 00:16:00.427 align:start position:29% line:-2
ここで 強力なフィルタの
使い方をご紹介します

00:16:04.565 --> 00:16:08.235 align:start position:30% line:-2
先ほどトラックビューを
見えるようにしました

00:16:09.236 --> 00:16:12.873 align:start position:27% line:-2
新しいタブを作っている間に
CPUの使用率が―

00:16:12.973 --> 00:16:16.710 align:start position:27% line:-2
どこでどのように変化するか
確認したかったからです

00:16:17.044 --> 00:16:19.780 align:start position:29% line:-1
この部分だと分かりました

00:16:20.080 --> 00:16:25.552 align:start position:23% line:-2
ドラッグして
そのトレースのエリアを選択し―

00:16:25.819 --> 00:16:28.755 align:start position:25% line:-2
“Instruments”に
フォーカスさせました

00:16:29.189 --> 00:16:32.926 align:start position:34% line:-2
その間の経路だけに
焦点を当てます

00:16:33.026 --> 00:16:35.829 align:start position:27% line:-1
この部分はタブを作る前です

00:16:35.929 --> 00:16:38.432 align:start position:27% line:-1
こちらがタブを作った後で―

00:16:38.532 --> 00:16:39.867 align:start position:23% line:-1
アプリケーションを止めた時です

00:16:39.967 --> 00:16:43.604 align:start position:27% line:-2
最適化する部分ではないので
このデータは見ません

00:16:45.105 --> 00:16:45.772 align:start position:45% line:-1
さて―

00:16:46.974 --> 00:16:51.578 align:start position:12% line:-2
“Instruments”ウインドウの下に
すべてのトレースデータがあります

00:16:51.678 --> 00:16:56.517 align:start position:23% line:-2
デフォルトでは スレッドごとに
一列に表示されています

00:16:56.617 --> 00:16:59.219 align:start position:25% line:-2
この例で走っているスレッドは
４つです

00:16:59.319 --> 00:17:02.789 align:start position:21% line:-2
これは同時に走る
アプリケーションの数で異なります

00:16:59.319 --> 00:17:02.789 align:start position:21% line:-2
これは同時に走る
アプリケーションの数で異なります

00:17:03.223 --> 00:17:05.858 align:start position:27% line:-2
私はこれらを集約するために
折り畳みます

00:17:05.959 --> 00:17:08.829 align:start position:32% line:-1
また 各スレッドを―

00:17:08.929 --> 00:17:14.034 align:start position:21% line:-2
スレッドIDではなく
上位の機能に基づいて折り畳みます

00:17:14.134 --> 00:17:17.704 align:start position:4% line:-2
これでGrand Central Dispatchが
使いやすくなります

00:17:18.472 --> 00:17:20.574 align:start position:16% line:-2
“Instruments”ウインドウの
下にある―

00:17:20.674 --> 00:17:23.109 align:start position:32% line:-2
呼び出し木のボタンを
クリックします

00:17:23.944 --> 00:17:26.380 align:start position:25% line:-1
よく分かるようにズームします

00:17:26.946 --> 00:17:28.715 align:start position:25% line:-1
いくつかのフィルタがあります

00:17:28.816 --> 00:17:32.019 align:start position:29% line:-2
これはスレッド別で
デフォルトは“オン”です

00:17:32.453 --> 00:17:34.021 align:start position:34% line:-1
これを無効にして―

00:17:34.121 --> 00:17:39.359 align:start position:25% line:-2
スレッドをIDではなく
上位機能別にグループ化します

00:17:42.262 --> 00:17:44.531 align:start position:27% line:-1
このトレースを見てください

00:17:45.399 --> 00:17:47.801 align:start position:23% line:-1
動作中のスレッドが確認できます

00:17:47.901 --> 00:17:52.406 align:start position:30% line:-2
メイントレースの下が
CPU使用量の合計で―

00:17:52.940 --> 00:17:55.042 align:start position:29% line:-2
スレッドごとの
CPU使用量が分かります

00:17:55.142 --> 00:17:59.179 align:start position:21% line:-2
このトレースの間 他のスレッドは
ほとんど動いていません

00:17:59.313 --> 00:18:02.749 align:start position:27% line:-2
ここでメインスレッドだけを
選択して―

00:17:59.313 --> 00:18:02.749 align:start position:27% line:-2
ここでメインスレッドだけを
選択して―

00:18:02.883 --> 00:18:07.254 align:start position:25% line:-2
この間のメインスレッドだけを
トレースします

00:18:08.288 --> 00:18:10.824 align:start position:25% line:-1
このコールの階層を掘り下げて

00:18:10.924 --> 00:18:12.993 align:start position:29% line:-2
アプリケーションの動きを
確認します

00:18:13.527 --> 00:18:15.729 align:start position:25% line:-1
通常 キーボードを使う時は―

00:18:15.829 --> 00:18:18.966 align:start position:29% line:-1
右と下の矢印で操作します

00:18:19.266 --> 00:18:22.569 align:start position:20% line:-2
でも今回は
Instrumentsが提供する―

00:18:22.669 --> 00:18:24.338 align:start position:23% line:-1
高度なインスペクタを紹介します

00:18:24.438 --> 00:18:27.741 align:start position:23% line:-2
インスペクタが見えなければ
このボタンで切り替えてください

00:18:27.941 --> 00:18:30.144 align:start position:9% line:-1
この“Extended Detail”のタブで

00:18:30.244 --> 00:18:32.379 align:start position:29% line:-1
高度なトレースが可能です

00:18:32.746 --> 00:18:36.617 align:start position:29% line:-2
ここでトレースするのは
最も頻繁に現れた経路です

00:18:36.717 --> 00:18:38.786 align:start position:30% line:-1
現在の選択範囲の中で―

00:18:38.886 --> 00:18:41.688 align:start position:27% line:-1
最も頻繁にたどった経路です

00:18:42.089 --> 00:18:45.692 align:start position:25% line:-2
ここで一度に
多くのフレームを操作できます

00:18:46.393 --> 00:18:49.463 align:start position:25% line:-2
通常 自分のAPIを探す時に
ここを見ます

00:18:49.563 --> 00:18:52.533 align:start position:36% line:-2
驚くほど時間が
かかっている場所

00:18:52.633 --> 00:18:57.638 align:start position:21% line:-2
または 多くの分岐点がある場所を
探します

00:18:58.238 --> 00:19:03.544 align:start position:12% line:-2
ここにある“IDE Navigator”の
コールを見ましょう

00:18:58.238 --> 00:19:03.544 align:start position:12% line:-2
ここにある“IDE Navigator”の
コールを見ましょう

00:19:03.710 --> 00:19:05.779 align:start position:29% line:-2
ビューコントローラを
インストールしてあります

00:19:05.879 --> 00:19:09.316 align:start position:27% line:-2
これは 私が熟知している
Xcodeの内部APIです

00:19:10.184 --> 00:19:14.288 align:start position:34% line:-2
このトレースの
左端の部分を見ると

00:19:14.388 --> 00:19:18.358 align:start position:25% line:-2
1.19秒で返していることが
分かります

00:19:18.458 --> 00:19:21.862 align:start position:25% line:-2
記録した時間の
45パーセントを占めています

00:19:22.062 --> 00:19:26.433 align:start position:30% line:-2
これは 私の予想を
はるかに上回る時間です

00:19:27.834 --> 00:19:30.704 align:start position:27% line:-1
その要因を知るのは困難です

00:19:30.804 --> 00:19:33.974 align:start position:30% line:-2
この下にすべての経路が
出ていますが

00:19:34.107 --> 00:19:37.844 align:start position:27% line:-2
スタックの深さが
30から40はありそうです

00:19:37.945 --> 00:19:41.048 align:start position:32% line:-2
ここでどう絞り込むか
見せましょう

00:19:41.181 --> 00:19:44.952 align:start position:32% line:-2
最初のやり方は
呼び出し木に戻ります

00:19:47.154 --> 00:19:48.789 align:start position:27% line:-1
このポップオーバーを使って

00:19:48.922 --> 00:19:50.757 align:start position:11% line:-2
“Flattened Recursion”を
選択します

00:19:51.658 --> 00:19:52.893 align:start position:39% line:-1
やってみます

00:19:55.229 --> 00:19:58.565 align:start position:29% line:-2
ここにメソッド呼び出しの
繰り返しが見えます

00:19:59.299 --> 00:20:01.401 align:start position:30% line:-1
畳み込んでしまいました

00:19:59.299 --> 00:20:01.401 align:start position:30% line:-1
畳み込んでしまいました

00:20:02.436 --> 00:20:03.604 align:start position:36% line:-1
スクロールします

00:20:05.572 --> 00:20:06.607 align:start position:30% line:-1
この部分を見てください

00:20:06.707 --> 00:20:10.377 align:start position:16% line:-2
実は IDE Navigator内部の
API呼び出しに―

00:20:10.477 --> 00:20:14.081 align:start position:34% line:-2
問題の要因があると
確信しています

00:20:14.181 --> 00:20:16.750 align:start position:32% line:-2
呼び出し木全体を
再度フォーカスします

00:20:17.117 --> 00:20:18.685 align:start position:32% line:-1
ここをクリックして―

00:20:19.152 --> 00:20:21.088 align:start position:16% line:-2
“Focus on Subtree”を
選択します

00:20:21.488 --> 00:20:24.725 align:start position:23% line:-2
“Instruments”が
コールグラフのトップに移動して

00:20:24.825 --> 00:20:25.959 align:start position:36% line:-1
すべて削除します

00:20:26.059 --> 00:20:28.529 align:start position:21% line:-2
パーセンテージを
100パーセントに再設定するので

00:20:28.629 --> 00:20:30.497 align:start position:29% line:-1
ここにフォーカスできます

00:20:30.731 --> 00:20:33.901 align:start position:34% line:-1
検証を続けましょう

00:20:34.067 --> 00:20:36.737 align:start position:27% line:-1
この矢印キーで操作できます

00:20:37.037 --> 00:20:38.739 align:start position:23% line:-1
私はこのAPIを熟知しています

00:20:38.839 --> 00:20:41.375 align:start position:27% line:-2
ここでは
復元作業をしているようです

00:20:41.708 --> 00:20:43.811 align:start position:36% line:-1
さらに展開します

00:20:44.778 --> 00:20:47.548 align:start position:27% line:-1
テーブルビューの奥深くです

00:20:47.714 --> 00:20:54.221 align:start position:23% line:-2
ここでは 最新のコールパスが
全体の大きな割合を占めています

00:20:54.321 --> 00:20:56.823 align:start position:21% line:-1
さらに付随するサンプルもあります

00:20:58.492 --> 00:21:00.527 align:start position:25% line:-1
ここにすべて集約されています

00:20:58.492 --> 00:21:00.527 align:start position:25% line:-1
ここにすべて集約されています

00:21:01.328 --> 00:21:04.364 align:start position:18% line:-2
その１つが
objc messageSendです

00:21:04.531 --> 00:21:08.435 align:start position:21% line:-2
これは Objective-Cで
書いていると起こります

00:21:08.535 --> 00:21:10.003 align:start position:30% line:-1
Swiftコードでも―

00:21:10.104 --> 00:21:12.406 align:start position:21% line:-2
システムライブラリを使っていると
これが起こります

00:21:12.506 --> 00:21:14.208 align:start position:29% line:-1
対応する機能も目にします

00:21:14.308 --> 00:21:15.509 align:start position:14% line:-1
“objc”や“load strong”

00:21:15.609 --> 00:21:17.711 align:start position:11% line:-1
“load weak”や“retain”など

00:21:17.811 --> 00:21:21.782 align:start position:25% line:-2
これらを呼び出し木から
すべて取り除くことができます

00:21:22.816 --> 00:21:25.485 align:start position:27% line:-2
コンテキストをクリックして
以下を選択します

00:21:26.787 --> 00:21:29.122 align:start position:4% line:-2
“Charge libobjc.A.dylib to
callers”

00:21:29.256 --> 00:21:33.026 align:start position:20% line:-2
“libobjc”からのサンプルを
すべて拾い取り除くよう―

00:21:33.126 --> 00:21:34.795 align:start position:16% line:-1
Instrumentsに命令しています

00:21:34.895 --> 00:21:37.965 align:start position:21% line:-2
しかし 親フレームが呼んだ時間は
保持したままです

00:21:38.065 --> 00:21:40.601 align:start position:29% line:-1
私はこれらの実行時間を―

00:21:40.701 --> 00:21:43.504 align:start position:21% line:-2
Objective-Cを書く時に
必要なものと捉えています

00:21:43.604 --> 00:21:46.740 align:start position:30% line:-2
それを最適化することは
ほとんどないので

00:21:46.874 --> 00:21:52.212 align:start position:21% line:-2
データから取り除いて
必要な部分にフォーカスしています

00:21:53.046 --> 00:21:56.250 align:start position:32% line:-2
フィルタの適用方法を
もう１つ紹介します

00:21:56.350 --> 00:22:00.387 align:start position:23% line:-2
それが このセットフレーム間に
生じた―

00:21:56.350 --> 00:22:00.387 align:start position:23% line:-2
それが このセットフレーム間に
生じた―

00:22:00.487 --> 00:22:02.890 align:start position:29% line:-1
細かいサンプルの削除です

00:22:03.590 --> 00:22:05.826 align:start position:4% line:-2
“Call Tree Constraints”の中に
あります

00:22:07.060 --> 00:22:08.028 align:start position:39% line:-1
見てください

00:22:11.365 --> 00:22:14.301 align:start position:18% line:-1
Instrumentsにこう言います

00:22:14.401 --> 00:22:19.072 align:start position:21% line:-2
“トレースの中の20ミリ秒以上の
サンプルが見たい”

00:22:19.172 --> 00:22:23.777 align:start position:27% line:-2
すでに２秒間隔は選んだので
20ミリ秒にしました

00:22:23.877 --> 00:22:26.380 align:start position:29% line:-2
それは全体の
約１パーセントに当たり―

00:22:26.480 --> 00:22:29.516 align:start position:27% line:-1
必要な精度に合致しています

00:22:31.552 --> 00:22:33.187 align:start position:11% line:-2
Call Tree Constraintsを
呼んで―

00:22:33.887 --> 00:22:36.156 align:start position:29% line:-1
“最低20”と設定します

00:22:36.757 --> 00:22:39.793 align:start position:21% line:-1
この部分をさらにフォーカスします

00:22:40.360 --> 00:22:43.130 align:start position:23% line:-1
ビューアイテムを展開しています

00:22:43.230 --> 00:22:46.366 align:start position:18% line:-2
実際には
NSOutlineViewを呼んで―

00:22:46.467 --> 00:22:48.235 align:start position:25% line:-1
アイテムと子を増やしています

00:22:48.402 --> 00:22:52.339 align:start position:29% line:-2
多くの人がコールグラフで
立ち止まるかもしれません

00:22:52.439 --> 00:22:54.875 align:start position:29% line:-1
システムフレームワークに

00:22:54.975 --> 00:22:56.543 align:start position:32% line:-2
多くの時間がかかると
思っています

00:22:56.643 --> 00:22:58.712 align:start position:29% line:-1
どうしたらよいでしょう？

00:22:58.812 --> 00:23:02.249 align:start position:25% line:-2
NSOutlineViewは
最適化できません

00:22:58.812 --> 00:23:02.249 align:start position:25% line:-2
NSOutlineViewは
最適化できません

00:23:03.016 --> 00:23:06.019 align:start position:27% line:-1
この状況の打開策があります

00:23:06.253 --> 00:23:09.523 align:start position:29% line:-2
システムフレームワークに
時間がかかる理由

00:23:10.490 --> 00:23:12.893 align:start position:32% line:-2
それは データ作業を
行っているためです

00:23:13.260 --> 00:23:17.831 align:start position:25% line:-2
このメソッドを
何千や何百万回も呼んでいます

00:23:18.265 --> 00:23:22.636 align:start position:25% line:-2
あるいは コードを
呼び戻しているかもしれません

00:23:22.836 --> 00:23:23.937 align:start position:39% line:-1
重要なのは―

00:23:24.037 --> 00:23:27.508 align:start position:30% line:-2
フレームワークの動きを
読むことです

00:23:27.608 --> 00:23:29.376 align:start position:23% line:-2
Instrumentsの階層を
展開することで

00:23:29.476 --> 00:23:31.979 align:start position:21% line:-1
呼び出している機能が分かるのです

00:23:32.079 --> 00:23:35.015 align:start position:27% line:-1
これこそバグ修正の方法です

00:23:37.084 --> 00:23:40.187 align:start position:23% line:-2
トレースをアウトラインビューに
展開すると―

00:23:40.654 --> 00:23:43.357 align:start position:23% line:-2
２つのメソッドを呼んでいるのが
分かります

00:23:44.925 --> 00:23:48.729 align:start position:0% line:-2
“Batch expand items with
item entries expand children”

00:23:48.829 --> 00:23:50.998 align:start position:2% line:-1
“Do work after end updates”

00:23:51.765 --> 00:23:53.867 align:start position:30% line:-1
これらをまとめることで

00:23:53.967 --> 00:23:56.570 align:start position:27% line:-1
効率アップが実現しそうです

00:23:56.770 --> 00:23:59.439 align:start position:30% line:-2
ご想像のとおり
アウトラインビューは―

00:24:00.007 --> 00:24:01.775 align:start position:21% line:-1
一式のアイテムからスタートします

00:24:01.875 --> 00:24:05.779 align:start position:29% line:-2
そして コードの領域で
展開を復元しようとします

00:24:05.879 --> 00:24:08.348 align:start position:27% line:-2
例えば
一番上のアイテムを開きます

00:24:08.448 --> 00:24:10.350 align:start position:32% line:-1
その指示を出した時―

00:24:10.450 --> 00:24:13.487 align:start position:23% line:-2
内部では
他のアイテムを下げているのです

00:24:13.954 --> 00:24:15.889 align:start position:25% line:-1
２番目のアイテムを開く時は―

00:24:15.989 --> 00:24:17.691 align:start position:29% line:-1
すべてを再度下げています

00:24:17.791 --> 00:24:19.293 align:start position:36% line:-1
３番目も同じです

00:24:19.393 --> 00:24:20.828 align:start position:34% line:-1
それを行うごとに―

00:24:20.928 --> 00:24:24.598 align:start position:34% line:-2
アイテムを何千回も
動かしているのです

00:24:25.032 --> 00:24:29.102 align:start position:23% line:-2
パフォーマンスの改善をする上で
まさに取り除きたい―

00:24:29.203 --> 00:24:31.104 align:start position:38% line:-1
ムダな作業です

00:24:31.405 --> 00:24:34.408 align:start position:23% line:-2
これらのメソッド呼び出しが
バッチを実行している事実から―

00:24:34.908 --> 00:24:36.243 align:start position:38% line:-1
こう考えました

00:24:36.343 --> 00:24:40.380 align:start position:23% line:-2
“アウトラインビューに大量の
作業を要求できるAPIがある”

00:24:40.480 --> 00:24:42.182 align:start position:32% line:-1
コールを呼び出すと―

00:24:42.282 --> 00:24:45.352 align:start position:32% line:-2
それがすべての配置を
１度で計算するのです

00:24:46.153 --> 00:24:47.955 align:start position:27% line:-1
このようなコールもあります

00:24:48.055 --> 00:24:50.224 align:start position:29% line:-1
“更新完了後に作業する”

00:24:50.324 --> 00:24:55.028 align:start position:27% line:-2
時々 APIが配列計算する
大量のメソッドを処理します

00:24:55.129 --> 00:24:58.932 align:start position:21% line:-2
また別の時には
トランザクションのAPIを提供し

00:24:59.032 --> 00:25:00.901 align:start position:30% line:-1
変更を加えようとします

00:24:59.032 --> 00:25:00.901 align:start position:30% line:-1
変更を加えようとします

00:25:01.001 --> 00:25:03.370 align:start position:21% line:-1
そして それが終わったと伝えると

00:25:03.470 --> 00:25:06.807 align:start position:29% line:-2
その変更に対して発生した
すべての計算を行います

00:25:06.907 --> 00:25:10.344 align:start position:30% line:-2
すべて１つ１つやるより
効率的です

00:25:11.111 --> 00:25:15.649 align:start position:16% line:-2
ここで NSOutlineViewや
NSTableView APIに進み―

00:25:15.749 --> 00:25:17.518 align:start position:25% line:-1
いくつかのメソッドを探します

00:25:17.618 --> 00:25:19.453 align:start position:25% line:-1
NSTableViewには―

00:25:19.553 --> 00:25:22.656 align:start position:29% line:-2
開始と更新の完了のための
複数のメソッドがあります

00:25:22.756 --> 00:25:26.860 align:start position:25% line:-2
これはテーブルビューを統合し
作業を効率化します

00:25:27.427 --> 00:25:29.963 align:start position:21% line:-1
Xcode 10に搭載しています

00:25:30.130 --> 00:25:31.198 align:start position:36% line:-1
お見せしましょう

00:25:33.167 --> 00:25:34.735 align:start position:25% line:-1
Xcode 10を起動します

00:25:38.071 --> 00:25:40.107 align:start position:30% line:-2
アプリケーションとして
ソースを開きます

00:25:42.676 --> 00:25:44.444 align:start position:36% line:-1
タブを作成します

00:25:44.678 --> 00:25:46.947 align:start position:27% line:-1
先ほどのような点滅はなく―

00:25:47.047 --> 00:25:49.049 align:start position:32% line:-1
タブがすぐに開きます

00:25:49.383 --> 00:25:50.050 align:start position:45% line:-1
さて―

00:25:51.351 --> 00:25:53.821 align:start position:25% line:-1
もっと早く開きたいと思います

00:25:54.521 --> 00:25:56.256 align:start position:29% line:-1
どうしたらよいでしょう？

00:25:56.490 --> 00:26:03.130 align:start position:23% line:-2
幸運にもトレースを検証していて
サンプルの半分を占める―

00:25:56.490 --> 00:26:03.130 align:start position:23% line:-2
幸運にもトレースを検証していて
サンプルの半分を占める―

00:26:03.230 --> 00:26:06.433 align:start position:25% line:-2
明らかな問題を見つけることが
できました

00:26:07.601 --> 00:26:11.138 align:start position:30% line:-2
こんな大きな手掛かりは
めったに見つかりません

00:26:11.572 --> 00:26:13.340 align:start position:25% line:-1
通常しなければならないことは

00:26:13.674 --> 00:26:16.877 align:start position:30% line:-2
フィルタを使った
サンプル全体の調査です

00:26:17.044 --> 00:26:20.547 align:start position:27% line:-2
そして全体の１パーセントの
処理について調べます

00:26:20.647 --> 00:26:23.016 align:start position:29% line:-2
そうやって
１つ１つの原因を探して―

00:26:23.116 --> 00:26:26.920 align:start position:27% line:-2
ほんの少し速くする解決法を
見つけるのです

00:26:27.955 --> 00:26:31.725 align:start position:30% line:-2
それを紙切れか
テキストに書き出して―

00:26:31.925 --> 00:26:35.495 align:start position:25% line:-1
解決する順番を決めていきます

00:26:35.596 --> 00:26:38.065 align:start position:30% line:-1
時々 ５番目の修正が―

00:26:38.165 --> 00:26:41.568 align:start position:32% line:-2
２番目の問題に
役立つこともあります

00:26:41.768 --> 00:26:45.072 align:start position:30% line:-2
余計な仕事をして
作業の順番を変えるのは

00:26:45.172 --> 00:26:48.408 align:start position:25% line:-1
本末転倒で気分が悪いものです

00:26:48.642 --> 00:26:51.912 align:start position:25% line:-2
しかし
すべてを予測するのは困難です

00:26:52.012 --> 00:26:54.615 align:start position:25% line:-1
作業が終わるまで分かりません

00:26:54.715 --> 00:26:58.919 align:start position:30% line:-1
まず始めてみることです

00:26:59.019 --> 00:27:01.522 align:start position:30% line:-2
３パーセントの改善を
10回積み重ねることが

00:26:59.019 --> 00:27:01.522 align:start position:30% line:-2
３パーセントの改善を
10回積み重ねることが

00:27:01.622 --> 00:27:04.525 align:start position:23% line:-2
２番目の30パーセントの改善に
つながります

00:27:05.626 --> 00:27:06.460 align:start position:39% line:-1
いいですね？

00:27:07.227 --> 00:27:11.665 align:start position:29% line:-1
では スライドに戻ります

00:27:11.899 --> 00:27:16.236 align:start position:30% line:-2
継続的な改善に役立つ
テクニックを紹介します

00:27:21.241 --> 00:27:23.510 align:start position:29% line:-1
最も頻繁に起こる問題は―

00:27:23.610 --> 00:27:26.280 align:start position:25% line:-2
アウトラインビューと
同じテクニックを使っています

00:27:26.380 --> 00:27:28.148 align:start position:29% line:-1
“バッチ”と“延期”です

00:27:28.248 --> 00:27:32.085 align:start position:32% line:-2
APIが呼ばれた時に
副作用が起こると―

00:27:32.186 --> 00:27:34.354 align:start position:32% line:-2
APIをループする
コードを受け取ります

00:27:34.454 --> 00:27:37.224 align:start position:23% line:-1
要求された最初の命令を実行して

00:27:37.324 --> 00:27:38.892 align:start position:30% line:-1
副作用が起こったのです

00:27:39.126 --> 00:27:42.196 align:start position:30% line:-2
副作用の結果を
誰も理解していなければ

00:27:42.296 --> 00:27:45.199 align:start position:25% line:-1
その仕事を何度も繰り返します

00:27:45.632 --> 00:27:48.068 align:start position:21% line:-2
もっと効率的なインターフェイスを
得られます

00:27:48.168 --> 00:27:51.104 align:start position:30% line:-2
クライアントが提供する
配列やコレクションの―

00:27:51.538 --> 00:27:53.807 align:start position:29% line:-2
バッチインターフェイスを
使用するのです

00:27:53.907 --> 00:27:56.276 align:start position:32% line:-2
それで副作用の計算が
１度で完了します

00:27:57.077 --> 00:27:59.346 align:start position:32% line:-2
クライアントが
複数の場合もあります

00:27:59.446 --> 00:28:04.618 align:start position:27% line:-2
一括にまとめることができず
作業を延期しているため

00:27:59.446 --> 00:28:04.618 align:start position:27% line:-2
一括にまとめることができず
作業を延期しているため

00:28:04.718 --> 00:28:07.054 align:start position:29% line:-1
まだ 性能が同じ状態です

00:28:09.389 --> 00:28:13.327 align:start position:21% line:-2
３つ目はInstrumentsの
トレースを調べて―

00:28:13.694 --> 00:28:17.865 align:start position:23% line:-2
同じ計算を何度もしている領域を
見つけることです

00:28:18.165 --> 00:28:21.502 align:start position:21% line:-2
例えば テキストサイズを計算する
メソッドがあります

00:28:21.602 --> 00:28:23.337 align:start position:27% line:-1
そして その数フレーム後―

00:28:23.437 --> 00:28:27.241 align:start position:23% line:-2
同じ計算を何度もしている部分が
あったとします

00:28:27.341 --> 00:28:31.311 align:start position:29% line:-2
このような場合は
１回で計算したいはずです

00:28:31.979 --> 00:28:35.015 align:start position:25% line:-2
最上位で計算し
下位に渡すかキャッシュします

00:28:36.683 --> 00:28:39.987 align:start position:25% line:-2
UIアプリケーションにおける
もう１つのテクニックは

00:28:40.287 --> 00:28:43.490 align:start position:25% line:-2
UI表示に使用するビュー数を
考えることです

00:28:43.824 --> 00:28:45.659 align:start position:30% line:-1
ビュー数が少ないことは

00:28:45.893 --> 00:28:49.263 align:start position:27% line:-2
ソースコードの構造において
大変有効です

00:28:49.363 --> 00:28:53.300 align:start position:27% line:-2
小さな機能のセットを
大きな塊に組み立てるのです

00:28:53.400 --> 00:28:54.935 align:start position:34% line:-1
ビューが増えると―

00:28:55.035 --> 00:28:58.705 align:start position:23% line:-2
表示やレイアウトのシステムへの
負担がその分重くなります

00:28:59.206 --> 00:29:01.141 align:start position:34% line:-1
双方向の関係性です

00:28:59.206 --> 00:29:01.141 align:start position:34% line:-1
双方向の関係性です

00:29:01.241 --> 00:29:04.578 align:start position:23% line:-2
ビューが少なければ
より細かいキャッシュが得られ―

00:29:04.678 --> 00:29:06.513 align:start position:27% line:-1
パフォーマンスも向上します

00:29:07.181 --> 00:29:10.250 align:start position:23% line:-1
通常はビューの数を調整できます

00:29:10.350 --> 00:29:12.886 align:start position:27% line:-2
パフォーマンスに
大きな影響を与えるためです

00:29:12.986 --> 00:29:15.522 align:start position:29% line:-2
ビューが少ないことが
常にベストではありません

00:29:15.622 --> 00:29:19.459 align:start position:23% line:-2
さもないと 巨大なビュー１つで
すべてをやることになります

00:29:21.161 --> 00:29:23.197 align:start position:23% line:-1
もう１つ よく使うテクニックに

00:29:23.297 --> 00:29:25.132 align:start position:21% line:-2
“ダイレクトオブザベーション”が
あります

00:29:25.265 --> 00:29:27.768 align:start position:27% line:-1
ソースコードの２つの領域が

00:29:27.868 --> 00:29:30.104 align:start position:27% line:-2
緩やかに連動していることが
よくあります

00:29:30.204 --> 00:29:32.406 align:start position:27% line:-1
一方が他方を分かっていて―

00:29:32.506 --> 00:29:36.276 align:start position:29% line:-2
間接的な方法によって
互いに交信しているのです

00:29:36.376 --> 00:29:39.379 align:start position:14% line:-2
使用しているのは
NSNotificationCenter

00:29:39.580 --> 00:29:41.315 align:start position:30% line:-2
あとは ブロック単位の
コールバック

00:29:41.415 --> 00:29:43.884 align:start position:25% line:-1
“委譲”や“キー値監視”です

00:29:44.918 --> 00:29:48.322 align:start position:29% line:-2
いくつかのモデルコードを
目にすることがあります

00:29:48.422 --> 00:29:52.092 align:start position:23% line:-2
ループに入って変更されるたびに
そのループに入っていき―

00:29:52.192 --> 00:29:55.195 align:start position:14% line:-2
“KVO Notifications”を
数多く出しています

00:29:55.295 --> 00:29:57.431 align:start position:29% line:-1
もちろん直接は見えません

00:29:57.531 --> 00:29:59.299 align:start position:25% line:-1
しかし コントローラの中では

00:29:59.399 --> 00:30:02.870 align:start position:29% line:-2
モデルコードの変更に
必死に応答しているのです

00:29:59.399 --> 00:30:02.870 align:start position:29% line:-2
モデルコードの変更に
必死に応答しているのです

00:30:02.970 --> 00:30:05.505 align:start position:25% line:-2
これに CPUが多くの時間を
費やしていて

00:30:05.606 --> 00:30:09.042 align:start position:25% line:-2
変更全体で考えた時に
不要な処理となっているのです

00:30:09.443 --> 00:30:13.480 align:start position:27% line:-2
これが モデルコードからの
呼び出しだったら？

00:30:13.580 --> 00:30:15.983 align:start position:25% line:-1
通知や委譲を経由していたり―

00:30:16.083 --> 00:30:17.684 align:start position:30% line:-2
手動のブロックベース
コールバックだったら？

00:30:17.785 --> 00:30:21.221 align:start position:32% line:-2
何が起こっているかが
ずっと明らかです

00:30:21.321 --> 00:30:23.657 align:start position:23% line:-1
そして適切な処理をするでしょう

00:30:23.757 --> 00:30:28.161 align:start position:27% line:-2
いくつかの通知を
ループの中から外に出して―

00:30:28.262 --> 00:30:29.963 align:start position:23% line:-1
パフォーマンス向上を図るのです

00:30:30.430 --> 00:30:32.833 align:start position:32% line:-2
コントローラサイドの
やり方もあります

00:30:32.933 --> 00:30:36.203 align:start position:29% line:-2
ここでは 延期とバッチの
テクニックを使って

00:30:36.303 --> 00:30:39.606 align:start position:30% line:-2
ムダな仕事を省いて
同期応答を回避できます

00:30:40.874 --> 00:30:42.509 align:start position:38% line:-1
最後は簡単です

00:30:42.709 --> 00:30:46.413 align:start position:27% line:-2
コードが
すでに適切に動いていれば―

00:30:46.513 --> 00:30:49.183 align:start position:29% line:-2
すでにリニアということで
理想的です

00:30:49.283 --> 00:30:53.020 align:start position:27% line:-2
ある意味 パフォーマンスの
向上の余地も限られます

00:30:53.520 --> 00:30:56.290 align:start position:25% line:-2
その場合は
定期的な改善を続けることです

00:30:57.157 --> 00:31:00.994 align:start position:23% line:-2
オブジェクト指向の
ディクショナリを使っているなら

00:30:57.157 --> 00:31:00.994 align:start position:23% line:-2
オブジェクト指向の
ディクショナリを使っているなら

00:31:01.094 --> 00:31:02.896 align:start position:36% line:-1
お気付きでしょう

00:31:03.063 --> 00:31:05.833 align:start position:27% line:-2
すべてのキーに
大量の文字列定数があるなら

00:31:05.933 --> 00:31:07.301 align:start position:32% line:-1
大きな改善が可能です

00:31:07.401 --> 00:31:09.903 align:start position:32% line:-1
コードの明瞭化や補完

00:31:10.003 --> 00:31:11.138 align:start position:36% line:-1
リファクタリング

00:31:11.238 --> 00:31:14.875 align:start position:34% line:-2
特定の型を使った
ソースコードの検証

00:31:14.975 --> 00:31:17.244 align:start position:30% line:-2
structを使うのが
一番簡単でしょう

00:31:17.344 --> 00:31:21.181 align:start position:25% line:-2
暗黙のイニシャライザや
ハッシュ値との適合も使えます

00:31:21.281 --> 00:31:24.618 align:start position:23% line:-1
これでソースコードが改善します

00:31:24.718 --> 00:31:28.889 align:start position:23% line:-2
文字列ハッシュや文字列方程式に
費やしていた時間に―

00:31:28.989 --> 00:31:30.390 align:start position:36% line:-1
驚くことでしょう

00:31:30.490 --> 00:31:33.660 align:start position:29% line:-2
すべては
小さな改善の積み重ねです

00:31:34.561 --> 00:31:36.730 align:start position:27% line:-1
次はマシューに引き継ぎます

00:31:36.830 --> 00:31:38.866 align:start position:30% line:-1
これらのテクニックの―

00:31:38.966 --> 00:31:41.034 align:start position:32% line:-2
写真 Appへの
適用方法を紹介します

00:31:42.536 --> 00:31:48.242 align:start position:43% line:-1
(拍手)

00:31:48.375 --> 00:31:49.776 align:start position:41% line:-1
ありがとう

00:31:49.877 --> 00:31:50.677 align:start position:41% line:-1
こんにちは

00:31:50.777 --> 00:31:54.781 align:start position:27% line:-2
私はマシュー･ルーカス
写真チームのエンジニアです

00:31:54.915 --> 00:31:58.352 align:start position:29% line:-2
今日は 写真 Appの
パフォーマンスに関する―

00:31:58.452 --> 00:32:00.654 align:start position:29% line:-1
実例をいくつか紹介します

00:31:58.452 --> 00:32:00.654 align:start position:29% line:-1
実例をいくつか紹介します

00:32:01.255 --> 00:32:03.891 align:start position:27% line:-2
まず 写真 Appについて
少し話します

00:32:04.024 --> 00:32:05.826 align:start position:30% line:-2
よくご存知の
アプリケーションですね

00:32:05.926 --> 00:32:10.164 align:start position:32% line:-2
お気に入りの瞬間を
保存して閲覧できます

00:32:10.397 --> 00:32:13.500 align:start position:21% line:-1
この“モーメント”から閲覧します

00:32:13.600 --> 00:32:15.903 align:start position:25% line:-1
今見ているのがデフォルトです

00:32:16.136 --> 00:32:20.374 align:start position:27% line:-2
それ以外に“コレクション”
“年別”の表示もあります

00:32:21.008 --> 00:32:23.110 align:start position:36% line:-1
後ほど説明します

00:32:23.343 --> 00:32:26.914 align:start position:23% line:-2
ライブラリには 1000枚から
10万枚の写真が保存できます

00:32:27.347 --> 00:32:31.051 align:start position:21% line:-1
どれほど写真が好きかで変わります

00:32:31.251 --> 00:32:35.389 align:start position:27% line:-2
私たちは毎日の楽しい瞬間を
記録するのが大好きです

00:32:36.256 --> 00:32:38.125 align:start position:25% line:-1
記録することには寛容な一方―

00:32:38.225 --> 00:32:41.061 align:start position:27% line:-1
こんな画面は我慢できません

00:32:41.161 --> 00:32:42.963 align:start position:25% line:-1
アプリケーションを起動して―

00:32:43.063 --> 00:32:46.366 align:start position:30% line:-2
このような画面が出たら
どう思いますか？

00:32:47.267 --> 00:32:49.736 align:start position:27% line:-2
このような画面を
目にすることもあるでしょう

00:32:50.337 --> 00:32:52.339 align:start position:30% line:-2
多数のプレースホルダが
表示されていますが―

00:32:52.439 --> 00:32:54.041 align:start position:38% line:-1
問題があります

00:32:54.141 --> 00:32:58.145 align:start position:29% line:-2
スクロールしていると
このようにグレーになり―

00:32:58.245 --> 00:33:00.080 align:start position:25% line:-1
サムネイルがロードを始めます

00:32:58.245 --> 00:33:00.080 align:start position:25% line:-1
サムネイルがロードを始めます

00:33:00.180 --> 00:33:02.716 align:start position:27% line:-2
スクロールを続けると
フレーム落ちしてしまいます

00:33:02.816 --> 00:33:04.585 align:start position:23% line:-1
ビューが更新されているからです

00:33:05.452 --> 00:33:08.055 align:start position:30% line:-2
目標はこのような表示を
なくすことです

00:33:08.589 --> 00:33:11.425 align:start position:21% line:-1
望ましいユーザ体験ではありません

00:33:11.758 --> 00:33:14.361 align:start position:25% line:-1
避けられない場合もありますが

00:33:14.461 --> 00:33:17.064 align:start position:29% line:-1
頻繁に起こるのは困ります

00:33:18.432 --> 00:33:22.703 align:start position:29% line:-2
アプリケーションにとって
反応の速さは重要です

00:33:23.470 --> 00:33:27.007 align:start position:29% line:-2
アニメーションが
スムーズなことも大切です

00:33:28.876 --> 00:33:33.013 align:start position:32% line:-2
この２つは
ユーザ体験の基本です

00:33:33.347 --> 00:33:36.950 align:start position:27% line:-2
ユーザがアプリケーションに
信頼が持てなければ

00:33:37.050 --> 00:33:38.685 align:start position:27% line:-1
使用をやめるかもしれません

00:33:39.419 --> 00:33:41.422 align:start position:32% line:-1
この２つ問題について

00:33:41.588 --> 00:33:43.924 align:start position:29% line:-1
２つの事例をご紹介します

00:33:44.057 --> 00:33:48.395 align:start position:32% line:-2
最初が モーメントを
立ち上げる時の最適化

00:33:48.762 --> 00:33:51.932 align:start position:27% line:-2
次が コレクションと年別の
スクロールを―

00:33:52.032 --> 00:33:54.201 align:start position:30% line:-1
スムーズにする方法です

00:33:56.937 --> 00:34:00.407 align:start position:23% line:-1
最初に モーメントを起動します

00:33:56.937 --> 00:34:00.407 align:start position:23% line:-1
最初に モーメントを起動します

00:34:02.643 --> 00:34:05.779 align:start position:30% line:-1
起動には３種類あります

00:34:06.580 --> 00:34:09.716 align:start position:27% line:-2
最も時間がかかるのが
“コールド”と呼ばれるもの

00:34:09.817 --> 00:34:13.587 align:start position:23% line:-2
リブート後にアプリケーションを
再起動させます

00:34:14.188 --> 00:34:16.389 align:start position:30% line:-2
キャッシュに
何も保存されていません

00:34:16.489 --> 00:34:18.492 align:start position:25% line:-2
そのため バックグラウンドで
プロセスが走ったり―

00:34:18.592 --> 00:34:20.360 align:start position:32% line:-2
ライブラリのロードが
必要かもしれません

00:34:21.027 --> 00:34:23.530 align:start position:25% line:-1
また システムがメモリ不足で

00:34:23.630 --> 00:34:27.501 align:start position:23% line:-2
メモリの再要求をしている時にも
起こります

00:34:29.168 --> 00:34:32.773 align:start position:25% line:-2
アプリケーションを中止しても
コールドにはなりません

00:34:32.873 --> 00:34:36.409 align:start position:21% line:-2
リソースがページアウトされる時を
システムが決めるからです

00:34:38.411 --> 00:34:42.315 align:start position:27% line:-2
アプリケーションを中止して
数秒後に再度立ち上げると

00:34:42.416 --> 00:34:45.886 align:start position:27% line:-1
問題なく速やかに起動します

00:34:45.985 --> 00:34:47.454 align:start position:30% line:-1
これが“ウォーム”です

00:34:47.554 --> 00:34:51.625 align:start position:23% line:-2
リソースが すでにキャッシュに
保存されているので

00:34:51.824 --> 00:34:53.327 align:start position:34% line:-1
早く立ち上がります

00:34:54.395 --> 00:34:56.730 align:start position:34% line:-2
最後が“ホット”と
呼ばれるもので―

00:34:56.830 --> 00:34:59.833 align:start position:25% line:-1
基本的にレジュームを指します

00:34:59.933 --> 00:35:03.904 align:start position:23% line:-2
起動しているアプリケーションを
復帰させる状態です

00:34:59.933 --> 00:35:03.904 align:start position:23% line:-2
起動しているアプリケーションを
復帰させる状態です

00:35:04.905 --> 00:35:06.874 align:start position:30% line:-1
起動の評価をする場合は

00:35:06.974 --> 00:35:09.309 align:start position:32% line:-1
ウォームから始めます

00:35:09.409 --> 00:35:14.781 align:start position:29% line:-2
ウォームからの起動時間は
コールドに比べて―

00:35:15.349 --> 00:35:17.151 align:start position:32% line:-1
変動が少なくなります

00:35:17.251 --> 00:35:20.988 align:start position:21% line:-2
デバイスのリブートが不要で
テストのイテレーションも高速です

00:35:21.755 --> 00:35:26.627 align:start position:23% line:-2
起動の評価はアプリケーションの
アイコンを押してから

00:35:26.727 --> 00:35:30.230 align:start position:30% line:-2
やりとりを始めるまでの
所要時間を測定します

00:35:30.898 --> 00:35:32.833 align:start position:29% line:-1
ここで言う“やりとり”は

00:35:32.933 --> 00:35:36.069 align:start position:29% line:-2
実際にアプリケーションを
使い始めることです

00:35:37.371 --> 00:35:41.441 align:start position:29% line:-2
通常 立ち上がってすぐは
スピナーが表示され―

00:35:41.542 --> 00:35:45.612 align:start position:23% line:-2
アプリケーションが使えないので
その時間は省きます

00:35:47.314 --> 00:35:50.250 align:start position:25% line:-1
ここでは３つの目標があります

00:35:50.584 --> 00:35:53.420 align:start position:29% line:-1
最初の目標は“瞬時”です

00:35:53.921 --> 00:35:58.792 align:start position:27% line:-2
スピナーやプレースホルダも
表示したくありません

00:36:01.195 --> 00:36:02.830 align:start position:27% line:-1
灰色のサムネイルも同様です

00:36:03.230 --> 00:36:04.965 align:start position:38% line:-1
正直に言うと―

00:36:05.332 --> 00:36:08.802 align:start position:20% line:-2
初めて iCloudに同期する時は
プレースホルダが現れます

00:36:08.902 --> 00:36:12.439 align:start position:21% line:-2
でも データがローカルにある時は
表示しないようにしています

00:36:13.874 --> 00:36:15.742 align:start position:25% line:-1
さて“瞬時”とは何でしょう？

00:36:16.310 --> 00:36:17.811 align:start position:34% line:-1
起動までの時間は―

00:36:17.911 --> 00:36:20.881 align:start position:25% line:-2
ズームアニメーションの表示と
同時でなくてはいけません

00:36:20.981 --> 00:36:23.951 align:start position:18% line:-1
通常 500から600ミリ秒の間です

00:36:24.051 --> 00:36:29.022 align:start position:21% line:-2
それならホーム画面から
アプリケーションへの移行が円滑で

00:36:29.123 --> 00:36:33.060 align:start position:27% line:-2
アニメーションが終わり次第
使い始めることができます

00:36:33.727 --> 00:36:36.396 align:start position:25% line:-1
これは写真 Appに限らず―

00:36:36.497 --> 00:36:39.032 align:start position:27% line:-2
どんなアプリケーションでも
有効です

00:36:40.234 --> 00:36:42.569 align:start position:21% line:-1
次に 写真 Appの起動方法です

00:36:43.337 --> 00:36:46.106 align:start position:27% line:-2
より詳しく見ると
アニメーションが終わる前に

00:36:46.206 --> 00:36:50.844 align:start position:27% line:-2
写真がすべて配置されるのが
分かります

00:36:53.414 --> 00:36:55.949 align:start position:34% line:-1
起動分析を見ると―

00:36:56.049 --> 00:36:58.585 align:start position:23% line:-1
大きく２つのパートに分かれます

00:36:58.685 --> 00:37:00.988 align:start position:23% line:-1
最初のパートは“dyld”です

00:36:58.685 --> 00:37:00.988 align:start position:23% line:-1
最初のパートは“dyld”です

00:37:01.088 --> 00:37:05.058 align:start position:27% line:-2
必要なすべてのライブラリの
読み込みをするローダで

00:37:05.192 --> 00:37:08.095 align:start position:16% line:-1
staticイニシャライザも作動します

00:37:08.662 --> 00:37:12.266 align:start position:23% line:-2
このパートの制御は限定的ですが
不可能ではありません

00:37:12.833 --> 00:37:17.771 align:start position:21% line:-2
詳しくは 昨年のdyldに関する
セッションをご覧ください

00:37:19.773 --> 00:37:22.276 align:start position:27% line:-1
理解を深めるのに役立ちます

00:37:23.477 --> 00:37:26.813 align:start position:21% line:-2
dyldはオブジェクトテーブルの
mainを呼び出し―

00:37:26.947 --> 00:37:30.951 align:start position:29% line:-2
多くの制御が可能な
２番目のパートに移ります

00:37:31.218 --> 00:37:35.389 align:start position:27% line:-2
このパートは
500ミリ秒未満となります

00:37:35.856 --> 00:37:40.060 align:start position:7% line:-2
“didFinishLaunching”のあとの
“First layout”が

00:37:40.160 --> 00:37:41.829 align:start position:27% line:-1
起動終了のサインになります

00:37:41.929 --> 00:37:44.164 align:start position:23% line:-2
これがアプリケーションが使える
時間です

00:37:46.199 --> 00:37:50.003 align:start position:29% line:-2
このセッションで伝えたい
いくつかの原則があります

00:37:50.104 --> 00:37:54.274 align:start position:23% line:-2
それらは パフォーマンス改善の
共通の柱となります

00:37:55.042 --> 00:37:57.878 align:start position:29% line:-1
１つ目は“怠け者”になる

00:37:57.978 --> 00:38:00.480 align:start position:27% line:-1
必要のない仕事は延期します

00:37:57.978 --> 00:38:00.480 align:start position:27% line:-1
必要のない仕事は延期します

00:38:01.281 --> 00:38:03.684 align:start position:30% line:-1
２番目は“先回り”する

00:38:03.917 --> 00:38:06.253 align:start position:27% line:-1
これは２つの意味で有効です

00:38:06.520 --> 00:38:11.325 align:start position:25% line:-2
まずは
“後回しする作業を予測する”

00:38:11.658 --> 00:38:14.895 align:start position:30% line:-2
次に“リグレッションを
いち早く見つける”

00:38:14.995 --> 00:38:18.999 align:start position:27% line:-2
インテグレーションテストの
継続的な実施が重要です

00:38:21.635 --> 00:38:23.804 align:start position:38% line:-1
最後は“一定”

00:38:23.904 --> 00:38:26.940 align:start position:32% line:-2
ロードするデータ量に
関わらずです

00:38:29.710 --> 00:38:32.079 align:start position:27% line:-1
アプローチ方法を間違えて―

00:38:32.179 --> 00:38:34.448 align:start position:27% line:-2
起動に必要な
すべてをロードするとします

00:38:34.548 --> 00:38:38.885 align:start position:29% line:-2
それは ３万アイテムにも
及ぶことになります

00:38:39.953 --> 00:38:41.889 align:start position:23% line:-1
まず データベースを初期化して

00:38:41.989 --> 00:38:44.157 align:start position:23% line:-1
ビューコントローラを用意します

00:38:44.258 --> 00:38:46.260 align:start position:23% line:-1
そして データソースを構成し―

00:38:46.360 --> 00:38:49.429 align:start position:21% line:-2
ライブラリ画像をロードして
クラウドのステータスを定義します

00:38:50.931 --> 00:38:54.101 align:start position:25% line:-2
これはデータの増え方によって
変わります

00:38:54.201 --> 00:38:56.503 align:start position:21% line:-1
ユーザは日々写真を撮っているので

00:38:56.603 --> 00:38:59.039 align:start position:27% line:-1
データは永遠に増え続けます

00:38:59.940 --> 00:39:04.111 align:start position:25% line:-2
私たちが扱っている写真は
結び付きのないデータの塊です

00:38:59.940 --> 00:39:04.111 align:start position:25% line:-2
私たちが扱っている写真は
結び付きのないデータの塊です

00:39:05.646 --> 00:39:09.016 align:start position:29% line:-2
次に各ステップを
最適化する方法を紹介し―

00:39:09.116 --> 00:39:11.385 align:start position:25% line:-1
データベースを初期設定します

00:39:13.520 --> 00:39:16.290 align:start position:32% line:-2
通常 最初のクエリが
要求された時に―

00:39:16.390 --> 00:39:18.458 align:start position:27% line:-2
データベースが
初期化されてロードされます

00:39:18.625 --> 00:39:23.530 align:start position:25% line:-2
バックグラウンドスレッドでは
即座に最適化が行われます

00:39:23.730 --> 00:39:26.033 align:start position:27% line:-2
そのため
クエリの要求が完了した時―

00:39:26.133 --> 00:39:28.068 align:start position:30% line:-1
初期化は必要ありません

00:39:28.936 --> 00:39:30.738 align:start position:29% line:-1
これは 最初のクエリが―

00:39:30.838 --> 00:39:33.374 align:start position:30% line:-2
メインスレッドから
行われた場合のことです

00:39:34.708 --> 00:39:38.645 align:start position:30% line:-2
私たちは
多くの時間を費やして―

00:39:39.413 --> 00:39:43.384 align:start position:27% line:-2
起動の時に
すべてのクエリを見ています

00:39:43.550 --> 00:39:46.019 align:start position:25% line:-1
今している作業が必要なことか

00:39:46.120 --> 00:39:49.590 align:start position:25% line:-1
ムダがないか確認してください

00:39:53.494 --> 00:39:56.196 align:start position:32% line:-1
最後に確認したいのは

00:39:56.296 --> 00:39:59.399 align:start position:27% line:-2
すべてのクエリが
最大限に効率化されているか

00:39:59.500 --> 00:40:03.570 align:start position:29% line:-2
そして 複雑なクエリが
極力回避されているかです

00:39:59.500 --> 00:40:03.570 align:start position:29% line:-2
そして 複雑なクエリが
極力回避されているかです

00:40:05.506 --> 00:40:09.276 align:start position:30% line:-2
有効な方法として
インデックスを作成し―

00:40:09.376 --> 00:40:12.479 align:start position:34% line:-2
スピードアップを
図ることができます

00:40:15.582 --> 00:40:20.654 align:start position:25% line:-2
これで初期設定の時間は
最大30ミリ秒に短縮できます

00:40:21.188 --> 00:40:24.157 align:start position:27% line:-2
次に ビューコントローラの
起動設定に移ります

00:40:25.025 --> 00:40:28.795 align:start position:32% line:-2
主要な機能として
４つのタブがあります

00:40:29.630 --> 00:40:32.332 align:start position:30% line:-1
最初に注意すべき点です

00:40:32.432 --> 00:40:34.535 align:start position:27% line:-2
これら３つの不可視ビューに
おいて―

00:40:34.635 --> 00:40:37.771 align:start position:34% line:-2
初期設定時の作業を
最小限にしたいです

00:40:38.672 --> 00:40:40.908 align:start position:34% line:-1
ここでのルールは―

00:40:41.008 --> 00:40:44.077 align:start position:30% line:-2
イニシャライザの作業を
最小化することです

00:40:44.278 --> 00:40:48.649 align:start position:25% line:-2
必要最小限にした上で
ビューの全データを記録します

00:40:50.384 --> 00:40:55.556 align:start position:23% line:-2
さらに コントローラの初期化も
一定時間の中で行います

00:40:58.392 --> 00:41:02.663 align:start position:25% line:-2
最後に可視ビューだけが
ロードされたことを確認します

00:40:58.392 --> 00:41:02.663 align:start position:25% line:-2
最後に可視ビューだけが
ロードされたことを確認します

00:41:02.796 --> 00:41:07.034 align:start position:27% line:-2
この部分で
退行することがよくあるので

00:41:07.134 --> 00:41:09.436 align:start position:32% line:-1
十分な注意が必要です

00:41:11.939 --> 00:41:16.110 align:start position:23% line:-2
ビューコントローラの起動目標は
120ミリ秒です

00:41:16.877 --> 00:41:20.547 align:start position:25% line:-2
しかし ここで
データソースの設計を行うので

00:41:20.647 --> 00:41:22.382 align:start position:27% line:-1
そのチャンクを見ていきます

00:41:25.586 --> 00:41:29.189 align:start position:23% line:-2
モーメントには
人生の出来事が記録されています

00:41:29.389 --> 00:41:33.594 align:start position:23% line:-2
UIはそれをグループに分類して
表示しています

00:41:34.094 --> 00:41:38.098 align:start position:25% line:-2
例えば このライブラリには
500モーメントくらいあり―

00:41:38.198 --> 00:41:41.735 align:start position:21% line:-2
ビューを作成するため
事前にそれらの読み込みが必要です

00:41:43.670 --> 00:41:46.206 align:start position:25% line:-1
モーメントに本当に必要なのは

00:41:46.306 --> 00:41:49.309 align:start position:30% line:-2
ビューを作成するための
メタデータだけです

00:41:49.576 --> 00:41:50.978 align:start position:32% line:-1
コンテンツは不要です

00:41:51.245 --> 00:41:53.580 align:start position:32% line:-1
そこで最初に行うのは

00:41:53.680 --> 00:41:57.184 align:start position:23% line:-1
超高速なクエリを投げることです

00:41:57.618 --> 00:42:01.521 align:start position:25% line:-2
次に 必要なコンテンツだけを
読み込みます

00:41:57.618 --> 00:42:01.521 align:start position:25% line:-2
次に 必要なコンテンツだけを
読み込みます

00:42:02.189 --> 00:42:05.859 align:start position:23% line:-2
この場合 可視コンテンツだけを
ロードします

00:42:05.959 --> 00:42:09.863 align:start position:23% line:-2
このケースでは
７から10までのモーメントです

00:42:10.898 --> 00:42:13.767 align:start position:27% line:-1
不足分は限られているので―

00:42:13.867 --> 00:42:17.137 align:start position:30% line:-2
メインスレッドで
同期することができます

00:42:18.605 --> 00:42:22.943 align:start position:27% line:-2
さらに 残りのデータを
同期してロードできるように

00:42:23.043 --> 00:42:26.847 align:start position:34% line:-2
作業の予測と計画を
立てたいと思います

00:42:27.214 --> 00:42:29.650 align:start position:27% line:-2
バックグラウンドスレッドで
行い―

00:42:29.750 --> 00:42:34.154 align:start position:27% line:-2
メインスレッドの動作に
影響を与えないようにします

00:42:38.659 --> 00:42:41.729 align:start position:23% line:-1
ここでの目標は100ミリ秒です

00:42:44.731 --> 00:42:46.767 align:start position:36% line:-1
そして 最後に―

00:42:47.034 --> 00:42:49.837 align:start position:23% line:-1
データソースが画像を提供します

00:42:49.937 --> 00:42:52.206 align:start position:25% line:-1
このパートを最適化しましょう

00:42:53.574 --> 00:42:56.677 align:start position:29% line:-2
ここは飛びぬけて
大きなチャンクだったので

00:42:56.944 --> 00:43:01.648 align:start position:27% line:-2
画像のロードに
多くの時間を要していました

00:42:56.944 --> 00:43:01.648 align:start position:27% line:-2
画像のロードに
多くの時間を要していました

00:43:01.749 --> 00:43:04.952 align:start position:23% line:-1
ここでの作業が多すぎるようです

00:43:05.052 --> 00:43:07.121 align:start position:39% line:-1
まず最初に―

00:43:07.488 --> 00:43:11.125 align:start position:30% line:-2
起動時に必要な
画像数の検討を行います

00:43:11.425 --> 00:43:14.161 align:start position:34% line:-2
そして それだけを
最初にロードします

00:43:15.796 --> 00:43:20.200 align:start position:23% line:-2
この場合
最大60枚くらいになりそうです

00:43:21.769 --> 00:43:24.338 align:start position:30% line:-2
次に それらを
最初にロードするため―

00:43:24.438 --> 00:43:28.375 align:start position:30% line:-2
低解像度の画像だけ
読み込む必要があります

00:43:28.709 --> 00:43:32.913 align:start position:25% line:-2
ピクセル数が小さい画像の方が
ずっと効率的です

00:43:35.215 --> 00:43:37.951 align:start position:27% line:-2
今 このチャンクは
200ミリ秒になっています

00:43:39.520 --> 00:43:41.989 align:start position:25% line:-1
以前に比べると大きな進歩です

00:43:42.189 --> 00:43:46.060 align:start position:30% line:-2
この時間を維持できれば
すばらしいことです

00:43:47.694 --> 00:43:50.164 align:start position:23% line:-1
時々 こう自問自答してください

00:43:50.264 --> 00:43:52.099 align:start position:21% line:-1
“これは起動時に必要なことか？”

00:43:52.199 --> 00:43:55.302 align:start position:21% line:-1
ここで挙げる例はフッタビューです

00:43:55.436 --> 00:43:58.872 align:start position:23% line:-2
ネットワークやデータベースから
情報を引き出し―

00:44:00.007 --> 00:44:03.911 align:start position:30% line:-2
起動時にデザインを
表示しないようにします

00:44:04.011 --> 00:44:09.149 align:start position:23% line:-2
可能な限り表示しようとした
画像の優先順位を決めるためです

00:44:09.249 --> 00:44:10.450 align:start position:32% line:-1
これで単純化されます

00:44:11.351 --> 00:44:13.887 align:start position:29% line:-1
起動後の作業予定を立て―

00:44:13.987 --> 00:44:19.126 align:start position:25% line:-2
あとで呼び出すプロセス情報を
キャッシュに格納します

00:44:20.594 --> 00:44:23.697 align:start position:29% line:-2
この情報の表示要求を
受け取っていたとしたら？

00:44:23.797 --> 00:44:28.802 align:start position:2% line:-2
Background App Refresh APIを
UIKitから利用できるでしょう

00:44:28.936 --> 00:44:30.938 align:start position:23% line:-1
アプリケーションがクリアされて

00:44:31.038 --> 00:44:35.142 align:start position:29% line:-2
起動時に コンテンツを
立ち上げることができます

00:44:37.444 --> 00:44:42.416 align:start position:21% line:-2
その部分が消えて CPUの時間が
400ミリ秒節約できました

00:44:43.384 --> 00:44:46.253 align:start position:34% line:-1
この内訳を見ると―

00:44:46.353 --> 00:44:50.657 align:start position:27% line:-2
ここまで 450ミリ秒しか
使ってないことが分かります

00:44:52.159 --> 00:44:55.762 align:start position:21% line:-2
これを 500ミリ秒の
タイムウインドウに収めていきます

00:44:55.863 --> 00:44:59.299 align:start position:30% line:-2
ここでは
表示の仕方に関わらず―

00:44:59.399 --> 00:45:04.972 align:start position:29% line:-2
コンテンツの準備時間を
考えることが最も重要です

00:44:59.399 --> 00:45:04.972 align:start position:29% line:-2
コンテンツの準備時間を
考えることが最も重要です

00:45:05.472 --> 00:45:08.742 align:start position:23% line:-1
つまり それを測定することです

00:45:10.510 --> 00:45:13.547 align:start position:23% line:-1
ロードするデータ量に関係なく―

00:45:13.647 --> 00:45:16.283 align:start position:29% line:-2
一定時間で
処理しなければなりません

00:45:16.583 --> 00:45:20.721 align:start position:29% line:-2
関連性のないデータですが
一定を保つ必要があります

00:45:24.658 --> 00:45:27.528 align:start position:25% line:-2
アプリケーションを立ち上げて
使い始めます

00:45:27.628 --> 00:45:31.632 align:start position:32% line:-2
コレクションと年別の
整理方法を紹介します

00:45:32.733 --> 00:45:39.339 align:start position:30% line:-2
ユーザはモーメントから
コレクション 年別まで

00:45:39.439 --> 00:45:41.942 align:start position:29% line:-2
アニメーションで
シームレスに移動できます

00:45:44.511 --> 00:45:46.647 align:start position:32% line:-1
これは複雑な階層です

00:45:46.847 --> 00:45:49.183 align:start position:23% line:-1
写真が何千枚も表示されています

00:45:49.516 --> 00:45:51.518 align:start position:27% line:-1
この階層を行き来しながら―

00:45:51.618 --> 00:45:57.724 align:start position:25% line:-2
最新更新やアニメーション
ジェスチャまでサポートします

00:46:00.360 --> 00:46:02.429 align:start position:30% line:-1
ここでも目標があります

00:46:02.930 --> 00:46:05.732 align:start position:27% line:-1
ユーザ体験に関する目標です

00:46:06.300 --> 00:46:07.935 align:start position:32% line:-1
１つ目は前と同じで―

00:46:08.035 --> 00:46:11.705 align:start position:25% line:-2
“スピナーやプレースホルダを
表示しない”

00:46:11.805 --> 00:46:13.841 align:start position:25% line:-2
さらに
“スムーズなアニメーション”

00:46:13.941 --> 00:46:15.709 align:start position:25% line:-1
ここで言う“スムーズ”とは―

00:46:15.809 --> 00:46:21.381 align:start position:20% line:-2
スクリーンに応じて
60fpsや120fpsを指します

00:46:23.183 --> 00:46:27.387 align:start position:30% line:-2
先ほどの原則が
ここでも当てはまります

00:46:27.488 --> 00:46:30.490 align:start position:29% line:-2
“怠け者”になって
必要のない仕事は延期する

00:46:30.657 --> 00:46:33.360 align:start position:25% line:-2
“先回り”して
リグレッションを早く見つける

00:46:34.094 --> 00:46:37.297 align:start position:29% line:-2
そして レイアウトパスで
“一定”を保つ

00:46:37.397 --> 00:46:40.067 align:start position:32% line:-2
ロードするデータ量に
関わらずです

00:46:41.435 --> 00:46:43.704 align:start position:27% line:-1
ここでは“タイムリー”な―

00:46:43.804 --> 00:46:46.473 align:start position:29% line:-2
レンダリングの
ループサイクルも大切です

00:46:46.974 --> 00:46:49.376 align:start position:34% line:-1
忘れないでください

00:46:49.476 --> 00:46:52.913 align:start position:25% line:-2
フレームの描画時間は
８か16ミリ秒しかありません

00:46:53.013 --> 00:46:57.551 align:start position:25% line:-2
そのタイミングを逃したら
フレーム落ちしてしまうのです

00:46:59.253 --> 00:47:03.524 align:start position:30% line:-2
ここで達成したいことを
見ていきましょう

00:46:59.253 --> 00:47:03.524 align:start position:30% line:-2
ここで達成したいことを
見ていきましょう

00:47:03.724 --> 00:47:07.895 align:start position:21% line:-2
セクションの中に小さなセルのある
このビューを見てください

00:47:09.897 --> 00:47:13.400 align:start position:9% line:-1
“UICollectionView”の画面です

00:47:13.500 --> 00:47:15.269 align:start position:34% line:-1
極端な例を除いて―

00:47:15.369 --> 00:47:18.939 align:start position:27% line:-2
通常のアプローチで
可能な限度を制限しています

00:47:19.173 --> 00:47:22.109 align:start position:34% line:-2
ビューとレイヤが
増えすぎたからです

00:47:24.011 --> 00:47:27.214 align:start position:25% line:-1
さらにレイヤの複雑性が増し―

00:47:27.314 --> 00:47:30.484 align:start position:23% line:-1
多くのメモリが必要になりました

00:47:31.652 --> 00:47:33.454 align:start position:27% line:-1
イノベーションが必要でした

00:47:33.720 --> 00:47:36.290 align:start position:25% line:-2
そこで コレクションビューを
使いながら―

00:47:36.390 --> 00:47:38.358 align:start position:30% line:-2
ビューの数を
制限することにしました

00:47:40.694 --> 00:47:44.898 align:start position:21% line:-2
ビデオゲームでよく使われる
“atlasing”を使いました

00:47:45.132 --> 00:47:49.670 align:start position:25% line:-2
簡単に言うと 画像一式を
１つに結合するテクニックです

00:47:50.504 --> 00:47:54.741 align:start position:29% line:-2
まず 小さなサムネイルで
それを効率的に使い―

00:47:54.908 --> 00:47:57.277 align:start position:27% line:-1
次に デザインカンバスに―

00:47:57.377 --> 00:48:00.047 align:start position:27% line:-2
すべてのRaw画像データを
スタンプします

00:47:57.377 --> 00:48:00.047 align:start position:27% line:-2
すべてのRaw画像データを
スタンプします

00:48:01.081 --> 00:48:02.983 align:start position:20% line:-1
Raw画像データを使用しているので

00:48:03.083 --> 00:48:06.220 align:start position:30% line:-2
それぞれのサムネイルの
デコードを省けます

00:48:08.288 --> 00:48:11.191 align:start position:27% line:-2
基本的にランダムな画像列を
表示しています

00:48:12.326 --> 00:48:14.695 align:start position:32% line:-2
生成とキャッシュが
オンザフライなので―

00:48:14.795 --> 00:48:16.463 align:start position:39% line:-1
より柔軟です

00:48:18.365 --> 00:48:21.401 align:start position:27% line:-2
複数の画像を
１つにまとめて表示するので

00:48:21.702 --> 00:48:24.538 align:start position:21% line:-2
セル レイヤ オブジェクトの数が
大幅に減ります

00:48:24.638 --> 00:48:27.741 align:start position:30% line:-2
レイアウトが簡素化され
時間も短縮します

00:48:29.543 --> 00:48:33.580 align:start position:29% line:-2
それと交換に
考えるべきことがあります

00:48:33.747 --> 00:48:35.315 align:start position:34% line:-1
これがその１つです

00:48:36.817 --> 00:48:41.655 align:start position:25% line:-2
ここにある画像を“長押し”や
“早押し”した場合―

00:48:41.822 --> 00:48:45.726 align:start position:25% line:-2
その場所を特定して
正確に表示する必要があります

00:48:46.860 --> 00:48:48.962 align:start position:29% line:-2
そのため
１つの画像を表示する時ー

00:48:49.897 --> 00:48:55.102 align:start position:27% line:-2
個々の画像と表示列の位置を
維持する必要があります

00:48:55.969 --> 00:48:58.972 align:start position:27% line:-2
これらをオンザフライで
生成するのはなぜでしょう？

00:49:00.440 --> 00:49:04.044 align:start position:32% line:-2
最新情報を
サポートするためです

00:49:04.311 --> 00:49:06.947 align:start position:32% line:-2
多様なビューサイズの
サポートも必要です

00:49:07.347 --> 00:49:09.316 align:start position:38% line:-1
これは横長です

00:49:09.416 --> 00:49:12.186 align:start position:36% line:-1
こちらは縦長です

00:49:13.153 --> 00:49:16.723 align:start position:25% line:-1
これには他にも理由があります

00:49:16.823 --> 00:49:21.495 align:start position:25% line:-2
ライブラリの画像は
有機的に増えていくものなので

00:49:21.595 --> 00:49:25.432 align:start position:23% line:-2
数千のライブラリを作成するのは
非常にまれだからです

00:49:27.601 --> 00:49:31.271 align:start position:25% line:-2
セクション全体を
生成しないのはなぜでしょう？

00:49:32.573 --> 00:49:36.243 align:start position:21% line:-1
このアニメーションを行うためです

00:49:36.343 --> 00:49:39.379 align:start position:29% line:-2
コレクションが
セクションに展開したり―

00:49:39.479 --> 00:49:42.683 align:start position:32% line:-2
逆にグループに
折り畳まれたりします

00:49:45.853 --> 00:49:49.289 align:start position:34% line:-2
２番目のパートで
もう１つ大切なこと

00:49:49.389 --> 00:49:52.459 align:start position:29% line:-2
それはビュー階層の
レイアウトコストを考え―

00:49:52.860 --> 00:49:54.228 align:start position:30% line:-1
それを測定することです

00:49:56.530 --> 00:49:59.433 align:start position:25% line:-2
最後は 常にパフォーマンスを
考えること

00:49:59.533 --> 00:50:03.270 align:start position:21% line:-2
私たちは日々
そのことを考え改善を重ねています

00:49:59.533 --> 00:50:03.270 align:start position:21% line:-2
私たちは日々
そのことを考え改善を重ねています

00:50:04.838 --> 00:50:06.273 align:start position:34% line:-1
より詳しい情報は―

00:50:06.373 --> 00:50:10.544 align:start position:30% line:-2
ここに映っている
３つのラボで紹介します

00:50:11.211 --> 00:50:13.247 align:start position:18% line:-1
引き続き WWDCをお楽しみください

00:50:13.447 --> 00:50:14.415 align:start position:41% line:-1
ありがとう

00:50:14.515 --> 00:50:20.521 align:start position:43% line:-1
(拍手)
