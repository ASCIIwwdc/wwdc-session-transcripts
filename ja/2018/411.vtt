WEBVTT

00:00:07.074 --> 00:00:16.450 align:start position:43% line:-1
(音楽)

00:00:20.654 --> 00:00:26.994 align:start position:43% line:-1
(拍手)

00:00:27.094 --> 00:00:31.031 align:start position:12% line:-2
Getting to Know Swift
Package Managerへようこそ

00:00:31.365 --> 00:00:34.601 align:start position:29% line:-2
私リック･バラードと
ボリス･ビューグリンが―

00:00:34.701 --> 00:00:37.671 align:start position:11% line:-2
SwiftのPackage Managerを
紹介します

00:00:38.238 --> 00:00:40.908 align:start position:27% line:-1
SwiftPMとも呼びます

00:00:41.575 --> 00:00:44.711 align:start position:30% line:-2
今回はオープンソース
プロジェクトに注目し―

00:00:44.811 --> 00:00:47.181 align:start position:29% line:-1
他のツールには触れません

00:00:47.281 --> 00:00:49.850 align:start position:25% line:-1
しかし内容は盛りだくさんです

00:00:50.817 --> 00:00:57.324 align:start position:12% line:-2
SwiftPMはSwiftのエコシステムに
簡単にソースコードを配信できます

00:00:57.591 --> 00:01:03.797 align:start position:27% line:-2
今回の議題は目標とデザイン
そして未来への指標です

00:00:57.591 --> 00:01:03.797 align:start position:27% line:-2
今回の議題は目標とデザイン
そして未来への指標です

00:01:05.833 --> 00:01:11.972 align:start position:12% line:-2
まず新しいPackage Managerを
作った理由をお話ししましょう

00:01:12.372 --> 00:01:14.474 align:start position:30% line:-1
使い方を説明したあと―

00:01:14.575 --> 00:01:17.411 align:start position:29% line:-1
デザインと特性に移ります

00:01:18.312 --> 00:01:21.381 align:start position:27% line:-1
それから未来の指標に触れ―

00:01:21.481 --> 00:01:27.988 align:start position:16% line:-2
SwiftPMのオープンソースの工程と
関わり方についてお話しします

00:01:29.289 --> 00:01:34.628 align:start position:21% line:-2
パッケージマネージャは
コードのシェアと再利用に最適です

00:01:34.795 --> 00:01:37.764 align:start position:16% line:-1
では なぜSwift専用が必要なのか？

00:01:40.133 --> 00:01:42.703 align:start position:27% line:-2
Swiftの言語は
クロスプラットフォームで―

00:01:42.803 --> 00:01:46.473 align:start position:29% line:-2
それに対応した
ビルドツールが必要でした

00:01:46.907 --> 00:01:53.247 align:start position:21% line:-2
Swiftの全プラットフォームで
コード設定が簡単になります

00:01:53.914 --> 00:01:58.986 align:start position:21% line:-2
SwiftPMのビルドシステムは
ソフトフェアを設定し―

00:01:59.086 --> 00:02:03.290 align:start position:32% line:-2
ビルドとテストを行い
実行をします

00:01:59.086 --> 00:02:03.290 align:start position:32% line:-2
ビルドとテストを行い
実行をします

00:02:07.427 --> 00:02:10.030 align:start position:27% line:-1
またSwiftライブラリを

00:02:10.130 --> 00:02:14.601 align:start position:27% line:-2
誰とでも簡単に
シェアできるようにするため

00:02:15.002 --> 00:02:18.672 align:start position:25% line:-2
基本のパッケージマネージャを
提供しています

00:02:18.772 --> 00:02:22.576 align:start position:29% line:-2
共通基準を明確にするのに
役立つでしょう

00:02:23.410 --> 00:02:27.881 align:start position:27% line:-2
これはエコシステムと
Swift自体に好影響です

00:02:29.383 --> 00:02:33.487 align:start position:25% line:-2
皆さんも
追加したい機能があるでしょう

00:02:33.587 --> 00:02:36.990 align:start position:34% line:-2
コアライブラリへの
変更は慎重に行い―

00:02:37.090 --> 00:02:40.027 align:start position:23% line:-1
精選されたAPIを保っています

00:02:40.427 --> 00:02:45.032 align:start position:25% line:-2
優れたパッケージマネージャは
コアライブラリに入らずに―

00:02:45.132 --> 00:02:48.035 align:start position:25% line:-1
追加機能をパッケージ化します

00:02:48.502 --> 00:02:55.342 align:start position:23% line:-2
良いアイデアはコミュニティ内で
注目され 徐々に規格化されます

00:02:56.777 --> 00:03:00.180 align:start position:30% line:-2
パッケージマネージャの
開発によって―

00:02:56.777 --> 00:03:00.180 align:start position:30% line:-2
パッケージマネージャの
開発によって―

00:03:00.280 --> 00:03:04.017 align:start position:18% line:-1
Swiftのパワーと哲学を生かせます

00:03:04.585 --> 00:03:09.256 align:start position:25% line:-2
SwiftPMはSwiftに
書き込まれています

00:03:09.523 --> 00:03:15.929 align:start position:21% line:-2
Swift言語とコアライブラリの
プロジェクトにも関わることで―

00:03:16.029 --> 00:03:19.867 align:start position:30% line:-2
コードがより
使いやすくなっています

00:03:21.502 --> 00:03:24.505 align:start position:23% line:-2
SwiftPMはオープンソース
プロジェクトの一環で―

00:03:24.605 --> 00:03:28.976 align:start position:20% line:-2
Swift.orgとGitHubに
詳細が載っています

00:03:29.476 --> 00:03:34.748 align:start position:16% line:-2
“Package Manager”から
読むのをお勧めします

00:03:35.849 --> 00:03:42.756 align:start position:12% line:-2
他のSwiftツールもSwift.orgで
ダウンロードが可能です

00:03:43.156 --> 00:03:47.728 align:start position:30% line:-2
また最新のXcodeの
リリースも含まれます

00:03:49.096 --> 00:03:51.932 align:start position:32% line:-1
使い方を説明するため

00:03:52.032 --> 00:03:55.602 align:start position:29% line:-2
ボリスがSwiftPMの
基本をお見せします

00:03:56.170 --> 00:04:03.277 align:start position:43% line:-1
(拍手)

00:03:56.170 --> 00:04:03.277 align:start position:43% line:-1
(拍手)

00:04:07.314 --> 00:04:08.148 align:start position:41% line:-1
ありがとう

00:04:08.248 --> 00:04:10.717 align:start position:32% line:-1
では使い方の説明です

00:04:12.986 --> 00:04:18.091 align:start position:23% line:-2
SwiftPMには４つの
コマンドラインツールがあります

00:04:18.358 --> 00:04:20.861 align:start position:25% line:-2
“swift build”は
パッケージをビルドし―

00:04:20.961 --> 00:04:23.864 align:start position:18% line:-1
“swift run”は実行をします

00:04:23.964 --> 00:04:26.767 align:start position:14% line:-1
“swift test”はテストを行い―

00:04:26.900 --> 00:04:31.705 align:start position:11% line:-2
“swift package”はビルド不可の
オペレーションを実行します

00:04:33.240 --> 00:04:35.809 align:start position:25% line:-2
パッケージは
Gitリポジトリに保存され―

00:04:35.909 --> 00:04:39.146 align:start position:21% line:-1
分岐はGitタグにより表されます

00:04:41.882 --> 00:04:47.788 align:start position:25% line:-2
次にパッケージ作成が
どれだけ簡単かをお見せします

00:04:51.391 --> 00:04:55.429 align:start position:29% line:-2
ターミナルで
ディレクトリを作成します

00:04:55.929 --> 00:05:00.000 align:start position:12% line:-1
“helloworld”がパッケージ名です

00:05:00.300 --> 00:05:05.439 align:start position:9% line:-2
ディレクトリに切り替え
“swift package init”を実行

00:05:06.406 --> 00:05:08.609 align:start position:21% line:-1
タイプは“executable”

00:05:10.377 --> 00:05:14.381 align:start position:30% line:-2
これでSwiftPMが
基本構成を作成します

00:05:15.015 --> 00:05:16.650 align:start position:30% line:-1
Finderを開いて―

00:05:17.584 --> 00:05:19.920 align:start position:32% line:-1
詳しく見てみましょう

00:05:29.163 --> 00:05:33.567 align:start position:21% line:-2
“Package.swift”は
パッケージの構成を表します

00:05:33.667 --> 00:05:35.369 align:start position:27% line:-1
“README”もあります

00:05:36.737 --> 00:05:41.608 align:start position:16% line:-2
“Sources”には
サブフォルダの“helloworld”

00:05:41.775 --> 00:05:44.645 align:start position:12% line:-1
“main.swift”が実行ファイルです

00:05:44.878 --> 00:05:49.016 align:start position:29% line:-2
“Tests”は
ユニットテストを行えます

00:05:50.951 --> 00:05:52.286 align:start position:34% line:-1
ターミナルに戻り―

00:05:55.556 --> 00:05:59.827 align:start position:20% line:-2
“swift run”とタイプして
パッケージを実行します

00:06:00.394 --> 00:06:02.095 align:start position:32% line:-1
これでコンパイルされ

00:06:02.663 --> 00:06:06.633 align:start position:20% line:-2
リンクするとhelloworldが
出力されます

00:06:08.235 --> 00:06:12.573 align:start position:27% line:-2
今度はもっと複雑な
パッケージを見てみましょう

00:06:12.673 --> 00:06:18.612 align:start position:21% line:-2
SwiftPMの基本コンセプトも
併せてお話しします

00:06:19.146 --> 00:06:20.113 align:start position:43% line:-1
まずは―

00:06:21.014 --> 00:06:23.750 align:start position:34% line:-1
実行してみましょう

00:06:24.351 --> 00:06:29.022 align:start position:30% line:-2
トランプのカードが
ランダムに出力されます

00:06:34.895 --> 00:06:37.631 align:start position:32% line:-1
ではスライドに戻り―

00:06:38.565 --> 00:06:41.168 align:start position:25% line:-1
基本コンセプトをお話しします

00:06:47.541 --> 00:06:50.077 align:start position:25% line:-1
パッケージは３つに分かれます

00:06:50.177 --> 00:06:51.478 align:start position:39% line:-1
依存関係と―

00:06:52.779 --> 00:06:53.947 align:start position:41% line:-1
ターゲット

00:06:56.216 --> 00:06:57.551 align:start position:38% line:-1
そして製品です

00:06:58.719 --> 00:07:02.222 align:start position:25% line:-1
それぞれの詳細を見ていきます

00:06:58.719 --> 00:07:02.222 align:start position:25% line:-1
それぞれの詳細を見ていきます

00:07:04.258 --> 00:07:09.930 align:start position:29% line:-2
新たな機能を開発する際に
使うのが依存関係です

00:07:11.632 --> 00:07:15.602 align:start position:30% line:-2
各依存関係が１つ以上の
製品を提供します

00:07:15.736 --> 00:07:18.872 align:start position:34% line:-2
例えばパッケージの
ライブラリなどです

00:07:21.074 --> 00:07:24.811 align:start position:30% line:-2
マニフェストファイルで
依存関係を見てみます

00:07:26.346 --> 00:07:28.882 align:start position:27% line:-1
各々でソースの場所があり―

00:07:30.250 --> 00:07:31.885 align:start position:32% line:-1
バージョンもあります

00:07:35.823 --> 00:07:39.026 align:start position:32% line:-2
ターゲットは
パッケージの基礎です

00:07:39.693 --> 00:07:43.564 align:start position:25% line:-2
モジュールかテストスイートに
ソースファイルが―

00:07:43.964 --> 00:07:47.401 align:start position:25% line:-1
どうビルドされるかを表します

00:07:50.170 --> 00:07:54.441 align:start position:23% line:-2
ターゲットは同じパッケージ内で
依存し合い―

00:07:56.677 --> 00:08:01.215 align:start position:29% line:-2
別のパッケージの製品を
依存関係として宣言します

00:07:56.677 --> 00:08:01.215 align:start position:29% line:-2
別のパッケージの製品を
依存関係として宣言します

00:08:03.150 --> 00:08:05.853 align:start position:25% line:-1
製品はライブラリで実行され―

00:08:07.354 --> 00:08:11.925 align:start position:29% line:-2
１つ以上のターゲットから
成っています

00:08:14.228 --> 00:08:19.466 align:start position:21% line:-2
製品を定義することでパッケージは
ライブラリを提供します

00:08:19.633 --> 00:08:25.005 align:start position:21% line:-2
デフォルトでは
ライブラリのタイプを宣言しません

00:08:25.639 --> 00:08:29.610 align:start position:16% line:-1
SwiftPMが用途に合わせて選びます

00:08:30.344 --> 00:08:35.448 align:start position:25% line:-2
スタティックかダイナミックの
宣言は可能です

00:08:37.717 --> 00:08:40.654 align:start position:21% line:-1
マニフェストでターゲットを見ます

00:08:41.989 --> 00:08:44.525 align:start position:27% line:-1
３つのターゲットがあります

00:08:46.093 --> 00:08:51.999 align:start position:16% line:-2
“libdealer”はメインの機能の
実装が含まれています

00:08:52.432 --> 00:08:55.502 align:start position:11% line:-2
依存関係は
“DeckOfPlayingCards”です

00:08:55.836 --> 00:08:59.573 align:start position:23% line:-1
これは先に宣言した依存関係です

00:09:01.108 --> 00:09:06.914 align:start position:20% line:-2
“dealer”は それに依存して
コマンドラインツールを提供

00:09:09.216 --> 00:09:12.986 align:start position:14% line:-1
最後に“testTarget”があります

00:09:13.086 --> 00:09:15.823 align:start position:29% line:-1
ユニットテストが可能です

00:09:19.993 --> 00:09:23.497 align:start position:29% line:-1
また２つの製品があります

00:09:24.565 --> 00:09:29.469 align:start position:23% line:-2
ライブラリはターゲットの
“libdealer”に対応し

00:09:29.970 --> 00:09:35.075 align:start position:29% line:-2
これによりライブラリでの
実装が可能になります

00:09:37.244 --> 00:09:41.982 align:start position:25% line:-2
次の実行可能な対象は
“dealer”に依存させ―

00:09:42.249 --> 00:09:45.853 align:start position:34% line:-2
コマンドラインの
使用を可能にします

00:09:50.691 --> 00:09:56.630 align:start position:23% line:-2
最後に新しい機能を追加する際の
パッケージの使い方です

00:10:00.334 --> 00:10:02.369 align:start position:23% line:-1
ターミナルウィンドウを開きます

00:10:02.936 --> 00:10:06.173 align:start position:16% line:-1
“Package.swift”を開き―

00:10:08.742 --> 00:10:10.544 align:start position:29% line:-1
新たな依存関係を加えます

00:10:12.679 --> 00:10:16.016 align:start position:27% line:-1
ここではSwiftPMです

00:10:16.116 --> 00:10:20.754 align:start position:23% line:-2
リックがお話しした
Swift専用のパッケージです

00:10:21.054 --> 00:10:25.826 align:start position:18% line:-2
不安定なAPIなので“exact”に
バージョンナンバーが出ます

00:10:27.728 --> 00:10:32.833 align:start position:18% line:-2
ターゲットの“libdealer”の
製品に依存します

00:10:32.933 --> 00:10:34.368 align:start position:25% line:-1
“Utility”と言います

00:10:34.501 --> 00:10:38.605 align:start position:21% line:-2
またターミナルコントローラという
クラスがあり―

00:10:39.506 --> 00:10:45.245 align:start position:29% line:-2
ターミナルの出力に
色をつけることができます

00:10:46.413 --> 00:10:51.552 align:start position:21% line:-2
正式なAppleのAPIではなく
デモのために使用しています

00:10:53.420 --> 00:10:55.255 align:start position:32% line:-1
ターミナルに戻ります

00:10:57.024 --> 00:11:01.495 align:start position:29% line:-2
新しい依存関係を使うため
コードは変更しました

00:10:57.024 --> 00:11:01.495 align:start position:29% line:-2
新しい依存関係を使うため
コードは変更しました

00:11:01.929 --> 00:11:03.664 align:start position:36% line:-1
デモの事前にです

00:11:03.764 --> 00:11:07.601 align:start position:36% line:-2
これで実行すれば
結果が見られます

00:11:08.669 --> 00:11:13.807 align:start position:25% line:-2
同じ出力ですが
カラーになって楽しい感じです

00:11:19.279 --> 00:11:21.215 align:start position:32% line:-1
最後のデモに移ります

00:11:22.883 --> 00:11:25.385 align:start position:27% line:-1
SwiftPMのテストです

00:11:25.485 --> 00:11:28.889 align:start position:25% line:-2
これにはSwift Neoの
パッケージを使います

00:11:29.022 --> 00:11:32.860 align:start position:27% line:-2
春に公開した
ネットワークライブラリです

00:11:34.795 --> 00:11:36.730 align:start position:21% line:-1
“swift test”を実行し

00:11:38.131 --> 00:11:39.700 align:start position:25% line:-1
“parallel”とします

00:11:40.734 --> 00:11:45.005 align:start position:30% line:-2
並行テストなので
結果は迅速に得られます

00:11:45.172 --> 00:11:47.341 align:start position:23% line:-1
フィルターオプションもかけます

00:11:49.610 --> 00:11:54.281 align:start position:21% line:-2
テストのサブセットを実行するので
反復して使えます

00:11:57.951 --> 00:12:03.557 align:start position:27% line:-2
パッケージがコンパイルされ
テストが実行されます

00:11:57.951 --> 00:12:03.557 align:start position:27% line:-2
パッケージがコンパイルされ
テストが実行されます

00:12:03.991 --> 00:12:05.559 align:start position:38% line:-1
あと数秒ですね

00:12:09.396 --> 00:12:12.466 align:start position:25% line:-1
プログレスバーが出てきました

00:12:12.566 --> 00:12:16.103 align:start position:34% line:-2
並行テストなので
結果はすぐに出ます

00:12:18.305 --> 00:12:20.240 align:start position:30% line:-1
スライドに戻りましょう

00:12:26.446 --> 00:12:30.684 align:start position:16% line:-1
次はSwiftPMのデザインのお話です

00:12:36.456 --> 00:12:41.595 align:start position:20% line:-2
SwiftPMはSwiftと同じく
すばやく安全で表現豊かです

00:12:42.796 --> 00:12:45.732 align:start position:32% line:-2
高い安全性は
独立したビルド環境と

00:12:45.833 --> 00:12:49.036 align:start position:30% line:-2
任意のコマンドの禁止に
起因しています

00:12:50.170 --> 00:12:55.242 align:start position:25% line:-2
拡張可能なビルドエンジンで
大きな依存グラフにも高速対応

00:12:56.610 --> 00:13:01.315 align:start position:18% line:-2
マニフェストにSwift言語を使用し
表現も豊かです

00:12:56.610 --> 00:13:01.315 align:start position:18% line:-2
マニフェストにSwift言語を使用し
表現も豊かです

00:13:02.282 --> 00:13:06.720 align:start position:25% line:-2
また既存の
プログラミング言語も使えます

00:13:09.089 --> 00:13:10.858 align:start position:34% line:-1
次のセクションでは

00:13:11.258 --> 00:13:16.530 align:start position:23% line:-2
Swiftパッケージを作成する
工程をご説明します

00:13:16.797 --> 00:13:17.898 align:start position:45% line:-1
まずは

00:13:18.465 --> 00:13:19.900 align:start position:43% line:-1
構造です

00:13:23.370 --> 00:13:27.107 align:start position:23% line:-2
SwiftPMのマニフェストは
Swiftを基本としています

00:13:27.207 --> 00:13:32.479 align:start position:23% line:-2
新しい言語を学ぶ必要がないので
簡単に理解できます

00:13:32.646 --> 00:13:37.751 align:start position:23% line:-2
APIデザインのガイドラインに
従っているので親しみやすく

00:13:38.151 --> 00:13:43.724 align:start position:29% line:-2
既存のSwiftツールを
活用することができます

00:13:46.693 --> 00:13:52.299 align:start position:27% line:-2
マニフェストを書き込む際は
宣言型構文をお勧めします

00:13:53.133 --> 00:13:55.502 align:start position:21% line:-1
SwiftPMはソースコードが―

00:13:55.602 --> 00:13:59.807 align:start position:30% line:-2
診断される時間と頻度を
保証しないからです

00:14:00.374 --> 00:14:05.078 align:start position:30% line:-2
スライドの左側の例では
宣言ができません

00:14:05.312 --> 00:14:07.948 align:start position:23% line:-1
名前は生成中のものが表示されず

00:14:08.048 --> 00:14:11.885 align:start position:30% line:-2
パッケージ内で
何度か使用されています

00:14:13.420 --> 00:14:18.492 align:start position:27% line:-2
右側は文字列定数を使って
マニフェストが宣言できます

00:14:18.592 --> 00:14:22.262 align:start position:32% line:-2
理解しやすく
ターゲットが明確です

00:14:23.764 --> 00:14:30.304 align:start position:25% line:-2
宣言型構文を使わない場合
マニフェストは複雑になります

00:14:33.040 --> 00:14:39.146 align:start position:23% line:-2
ソースファイルは各ターゲットの
名前ごとに整頓されます

00:14:39.746 --> 00:14:44.885 align:start position:27% line:-2
これによりパッケージが
共通構造を選定しやすくなり

00:14:45.486 --> 00:14:48.188 align:start position:30% line:-1
すばやい操作を行えます

00:14:51.091 --> 00:14:54.862 align:start position:21% line:-2
Package Managerや
他のビルドツールは

00:14:54.962 --> 00:15:01.468 align:start position:9% line:-2
ユーザの設定とPackage Managerの
規則が相反することがあります

00:14:54.962 --> 00:15:01.468 align:start position:9% line:-2
ユーザの設定とPackage Managerの
規則が相反することがあります

00:15:05.772 --> 00:15:07.341 align:start position:36% line:-1
先に述べたとおり

00:15:07.441 --> 00:15:11.979 align:start position:25% line:-2
ソースファイルは規則に基づく
場所から自動的に取得

00:15:12.246 --> 00:15:17.918 align:start position:25% line:-2
マニフェストを編集せずに
ソースファイルを更新できます

00:15:19.720 --> 00:15:23.690 align:start position:32% line:-2
製品とターゲットは
設定の価値があります

00:15:25.058 --> 00:15:28.462 align:start position:30% line:-2
ディスクのレイアウトと
相互参照なしでも―

00:15:28.562 --> 00:15:31.932 align:start position:32% line:-2
パッケージや定義が
分かりやすくなります

00:15:32.733 --> 00:15:39.439 align:start position:21% line:-2
またマニフェストを見るだけで
クライアントも簡単に理解できます

00:15:42.242 --> 00:15:46.613 align:start position:21% line:-2
他のプログラム言語の
ソースコードもサポートしています

00:15:46.713 --> 00:15:49.817 align:start position:12% line:-1
CやC++ Objective-Cなどです

00:15:50.050 --> 00:15:52.619 align:start position:32% line:-1
これで統合が可能です

00:15:53.387 --> 00:15:59.026 align:start position:18% line:-2
しかしSwift内の同じターゲットで
言語の統合はサポートしていません

00:16:01.828 --> 00:16:04.965 align:start position:21% line:-1
次に依存関係とバージョニングです

00:16:08.068 --> 00:16:13.207 align:start position:30% line:-2
チャーンを避けて
バグ修正ができるように

00:16:13.307 --> 00:16:16.643 align:start position:23% line:-2
セマンティックバージョニングを
使っています

00:16:17.511 --> 00:16:23.650 align:start position:27% line:-2
バージョン番号の各要素に
具体的な意味を当てはめます

00:16:25.586 --> 00:16:28.589 align:start position:32% line:-2
メジャーバージョンは
大きな変更を表し

00:16:29.122 --> 00:16:32.326 align:start position:23% line:-1
コードのアップデートが必要です

00:16:33.126 --> 00:16:36.864 align:start position:32% line:-2
変更とは 既存の型や
メッセージの削除―

00:16:36.964 --> 00:16:39.566 align:start position:29% line:-1
署名の変更などがあります

00:16:40.067 --> 00:16:43.904 align:start position:34% line:-2
互換性のない
バグ修正も含みます

00:16:44.671 --> 00:16:49.710 align:start position:30% line:-2
または既存のAPIの
大きな変更も含まれます

00:16:51.111 --> 00:16:56.116 align:start position:23% line:-2
マイナーバージョンは後方互換の
機能が追加された場合で

00:16:56.950 --> 00:16:59.953 align:start position:34% line:-2
メソッドや型を
追加した時などです

00:17:01.221 --> 00:17:07.060 align:start position:23% line:-2
パッチバージョンは後方互換性の
バグ修正作成時に増加させます

00:17:08.494 --> 00:17:12.031 align:start position:29% line:-2
クライアントはバグ修正で
ソースコードを―

00:17:12.398 --> 00:17:15.068 align:start position:29% line:-1
壊すリスクがなくなります

00:17:17.738 --> 00:17:24.444 align:start position:16% line:-2
SwiftPMはビルド前にパッケージの
バージョンを決める必要があります

00:17:24.877 --> 00:17:28.048 align:start position:27% line:-1
“依存関係解決”と呼びます

00:17:28.649 --> 00:17:32.719 align:start position:25% line:-2
SwiftPMは
すべての必要条件を確認します

00:17:33.453 --> 00:17:35.389 align:start position:32% line:-1
パッケージを明確にし

00:17:35.556 --> 00:17:39.126 align:start position:27% line:-2
互換性のある
最新のバージョンを探します

00:17:40.127 --> 00:17:45.666 align:start position:25% line:-2
先程のデモを使って
このプロセスを見てみましょう

00:17:47.367 --> 00:17:51.271 align:start position:27% line:-2
dealerには
２つの依存関係がありました

00:17:51.371 --> 00:17:55.709 align:start position:18% line:-1
SwiftPMとトランプのカードです

00:17:58.178 --> 00:18:01.949 align:start position:23% line:-2
SwiftPMは
これらのバージョンを決定します

00:17:58.178 --> 00:18:01.949 align:start position:23% line:-2
SwiftPMは
これらのバージョンを決定します

00:18:02.249 --> 00:18:06.887 align:start position:30% line:-2
１つ目はバージョンを
決めていたので簡単です

00:18:07.788 --> 00:18:09.690 align:start position:32% line:-1
そのタグから始めます

00:18:10.357 --> 00:18:13.093 align:start position:34% line:-1
２つ目は構文なので

00:18:13.193 --> 00:18:18.165 align:start position:27% line:-2
マイナーまたはパッチ要素を
アップデートします

00:18:20.300 --> 00:18:24.404 align:start position:20% line:-1
この例の場合 タグは3.1.4です

00:18:27.007 --> 00:18:28.909 align:start position:29% line:-1
プロセスは繰り返されます

00:18:29.076 --> 00:18:33.480 align:start position:27% line:-2
次にSwiftPMは
推移的依存関係を確認します

00:18:33.580 --> 00:18:37.417 align:start position:25% line:-2
SwiftPMは
これ以上することがありません

00:18:38.619 --> 00:18:42.823 align:start position:14% line:-2
トランプは“fisher-yates”と
“playing-card”に依存します

00:18:46.026 --> 00:18:49.596 align:start position:30% line:-2
これらのバージョンも
決めなければなりません

00:18:49.696 --> 00:18:55.869 align:start position:21% line:-2
fisher-yagesは構文を
使用しているので先程と同様です

00:18:56.603 --> 00:18:59.973 align:start position:27% line:-1
タグは2.2.5となります

00:19:01.442 --> 00:19:05.279 align:start position:9% line:-2
playing-cardは
“upToNextMinor”を使っているので

00:19:05.379 --> 00:19:08.649 align:start position:32% line:-2
パッチ要素のみ
アップデートされます

00:19:09.516 --> 00:19:15.022 align:start position:23% line:-2
バグ修正のみの場合
同じ構文を使用しても構いません

00:19:16.523 --> 00:19:19.793 align:start position:25% line:-1
タグは3.0.2となりました

00:19:22.029 --> 00:19:24.231 align:start position:29% line:-1
最後にターゲットを見ると

00:19:24.331 --> 00:19:28.101 align:start position:30% line:-2
必須の製品を
決定したパッケージと―

00:19:28.202 --> 00:19:30.904 align:start position:27% line:-1
組み合わせる必要があります

00:19:31.505 --> 00:19:34.308 align:start position:16% line:-1
そこでlibdealerに目を向けます

00:19:34.741 --> 00:19:40.681 align:start position:21% line:-2
SwiftPMから製品の
Utilityが提供されています

00:19:41.381 --> 00:19:45.519 align:start position:29% line:-2
その他は
別の製品を提供しています

00:19:48.489 --> 00:19:53.727 align:start position:9% line:-2
すべて終わると
Package.resolvedに記録されます

00:19:54.595 --> 00:19:59.766 align:start position:25% line:-2
決定したバージョンを
メンバーにシェアするためです

00:19:59.867 --> 00:20:05.305 align:start position:27% line:-2
また一連の統合の基礎により
ビルド成果を取得でき

00:19:59.867 --> 00:20:05.305 align:start position:27% line:-2
また一連の統合の基礎により
ビルド成果を取得でき

00:20:05.405 --> 00:20:09.042 align:start position:32% line:-2
アップデートの時機が
計りやすくなります

00:20:10.677 --> 00:20:14.781 align:start position:5% line:-2
その際はSwift Package Updateを
実行してください

00:20:15.282 --> 00:20:18.719 align:start position:9% line:-1
これはPackage.resolvedを含む―

00:20:19.152 --> 00:20:21.755 align:start position:25% line:-1
トップレベルのパッケージです

00:20:22.089 --> 00:20:25.993 align:start position:11% line:-2
推移的依存関係に
Package.resolveが含まれる場合

00:20:26.093 --> 00:20:28.829 align:start position:25% line:-1
依存関係解決では無視できます

00:20:31.031 --> 00:20:33.500 align:start position:27% line:-1
次はパッケージのビルドです

00:20:36.437 --> 00:20:40.174 align:start position:23% line:-2
ビルドエンジンは
llbuildを使用しています

00:20:40.440 --> 00:20:43.577 align:start position:30% line:-2
ビルドシステムのための
ライブラリです

00:20:43.677 --> 00:20:47.881 align:start position:30% line:-2
汎用と再利用可能な
ビルドエンジンに優れ―

00:20:48.081 --> 00:20:52.619 align:start position:32% line:-2
高速かつ正確な
増分ビルドが行えます

00:20:52.953 --> 00:20:55.889 align:start position:23% line:-1
Xcodeにも採用されています

00:20:57.257 --> 00:21:00.961 align:start position:25% line:-2
オープンソースプロジェクトの
一環でもあります

00:20:57.257 --> 00:21:00.961 align:start position:25% line:-2
オープンソースプロジェクトの
一環でもあります

00:21:03.030 --> 00:21:07.267 align:start position:25% line:-2
すべての依存関係の明言を伴う
独立した環境では―

00:21:09.503 --> 00:21:16.043 align:start position:21% line:-2
複雑な条件を有するパッケージでも
ビルドと使用が保証されます

00:21:16.977 --> 00:21:19.580 align:start position:36% line:-2
全パッケージを
インストールせず

00:21:19.680 --> 00:21:24.318 align:start position:30% line:-2
依存関係が明らかな
パッケージが使われます

00:21:25.052 --> 00:21:27.354 align:start position:23% line:-1
また サンドボックス化を活用し

00:21:27.488 --> 00:21:32.493 align:start position:30% line:-2
任意の場所への
書き込みを防いでいます

00:21:33.460 --> 00:21:39.466 align:start position:23% line:-2
また任意のコマンドと
シェルスクリプトを禁じています

00:21:40.134 --> 00:21:43.103 align:start position:36% line:-2
ビルドグラフが
理解しやすくなり

00:21:43.704 --> 00:21:49.843 align:start position:21% line:-2
すべての入力と出力が
高速で正確な増分ビルドを行えます

00:21:50.077 --> 00:21:53.614 align:start position:34% line:-2
すべての依存関係が
確認できるからです

00:21:55.682 --> 00:21:59.853 align:start position:29% line:-2
SwiftPMはテストも
サポートしています

00:21:59.987 --> 00:22:03.724 align:start position:23% line:-2
XCTestのフレームワークに
基づいています

00:21:59.987 --> 00:22:03.724 align:start position:23% line:-2
XCTestのフレームワークに
基づいています

00:22:05.359 --> 00:22:09.229 align:start position:34% line:-2
並行テストなので
結果はすぐに出ます

00:22:10.197 --> 00:22:12.032 align:start position:32% line:-1
テストのフィルタで―

00:22:12.432 --> 00:22:16.303 align:start position:34% line:-2
サブセットを実行し
反復して使えます

00:22:18.639 --> 00:22:22.276 align:start position:36% line:-2
ワークフローの
特性を考えるのは

00:22:22.376 --> 00:22:26.246 align:start position:27% line:-2
コマンドラインで
すべての開発を行うためです

00:22:27.614 --> 00:22:29.750 align:start position:27% line:-1
例えばエディットモードです

00:22:30.150 --> 00:22:36.156 align:start position:25% line:-2
特定のパッケージの
推移的な発生を上書きできます

00:22:37.191 --> 00:22:39.459 align:start position:29% line:-1
一時的に編集が可能となり

00:22:40.394 --> 00:22:43.630 align:start position:29% line:-1
依存関係がテストできます

00:22:43.730 --> 00:22:47.201 align:start position:30% line:-2
グラフの全パッケージの
転送は要りません

00:22:51.271 --> 00:22:56.610 align:start position:23% line:-2
ブランチ依存関係は
厳密なバージョン要件が不要です

00:22:56.710 --> 00:23:00.447 align:start position:27% line:-2
複数のパッケージを作る際に
便利です

00:22:56.710 --> 00:23:00.447 align:start position:27% line:-2
複数のパッケージを作る際に
便利です

00:23:01.181 --> 00:23:03.016 align:start position:32% line:-1
開発段階の機能なので

00:23:03.116 --> 00:23:08.222 align:start position:23% line:-2
タグの公開前には
バージョン依存関係を変更します

00:23:10.891 --> 00:23:15.195 align:start position:29% line:-2
ローカルパッケージは
パッケージを直接使用でき

00:23:15.295 --> 00:23:17.631 align:start position:23% line:-1
Gitリポジトリは使用しません

00:23:17.731 --> 00:23:21.535 align:start position:23% line:-1
これで作成の初期段階に複数の―

00:23:22.402 --> 00:23:25.339 align:start position:23% line:-1
パッケージを使うことができます

00:23:28.141 --> 00:23:33.247 align:start position:16% line:-2
最後にSwiftPMとSwift言語の
新バージョンについてです

00:23:35.115 --> 00:23:41.488 align:start position:20% line:-2
Package.swiftの
マニフェストAPIも新しくなります

00:23:41.688 --> 00:23:43.991 align:start position:30% line:-1
既存のAPIも使えます

00:23:44.224 --> 00:23:49.563 align:start position:23% line:-2
新しいソースツールを活用する際
アップデートは不要ですし

00:23:49.696 --> 00:23:52.900 align:start position:32% line:-2
既存のパッケージにも
アクセスできます

00:23:53.467 --> 00:23:56.437 align:start position:29% line:-1
新しいAPIでは独立して

00:23:56.537 --> 00:24:00.908 align:start position:29% line:-2
ソースコードの言語の
バージョン変更ができます

00:23:56.537 --> 00:24:00.908 align:start position:29% line:-2
ソースコードの言語の
バージョン変更ができます

00:24:03.010 --> 00:24:07.114 align:start position:23% line:-1
どのバージョンかを確認するには

00:24:07.414 --> 00:24:13.187 align:start position:7% line:-2
Package.swiftの一番上にある
swift-tools-versionを使います

00:24:13.353 --> 00:24:17.291 align:start position:30% line:-2
マニフェストを
処理するために必要な―

00:24:17.858 --> 00:24:20.527 align:start position:27% line:-1
バージョンを表示しています

00:24:22.296 --> 00:24:29.036 align:start position:18% line:-2
各パッケージは必要なSwift言語の
バージョンを宣言します

00:24:29.436 --> 00:24:33.607 align:start position:27% line:-2
コンパイラディレクティブを
使って

00:24:33.707 --> 00:24:37.344 align:start position:34% line:-2
複数のバージョンを
選ぶことができます

00:24:37.711 --> 00:24:42.249 align:start position:30% line:-2
異なる言語バージョンを
混ぜることも可能です

00:24:44.685 --> 00:24:47.287 align:start position:20% line:-1
現状のSwiftPMの話をしました

00:24:47.387 --> 00:24:52.826 align:start position:21% line:-2
次はリックから
未来の指針を話してもらいましょう

00:24:53.660 --> 00:24:58.932 align:start position:43% line:-1
(拍手)

00:24:59.032 --> 00:25:00.234 align:start position:34% line:-1
ありがとう ボリス

00:24:59.032 --> 00:25:00.234 align:start position:34% line:-1
ありがとう ボリス

00:25:01.168 --> 00:25:06.373 align:start position:23% line:-2
ボリスは現状をお話ししましたが
次は未来の可能性です

00:25:06.473 --> 00:25:10.043 align:start position:29% line:-2
SwiftPMは
まだ発展の余地があります

00:25:11.411 --> 00:25:13.814 align:start position:27% line:-2
“オープンエボリューション
プロセス”とは

00:25:13.914 --> 00:25:18.252 align:start position:29% line:-2
誰でもアイデアを
提供できるということです

00:25:18.919 --> 00:25:22.823 align:start position:30% line:-2
我々はいつでも
アイデアをシェアします

00:25:22.923 --> 00:25:25.492 align:start position:34% line:-1
計画とは無関係です

00:25:25.893 --> 00:25:30.297 align:start position:29% line:-2
SwiftPMの可能性を
知ってもらいたいのです

00:25:30.564 --> 00:25:36.703 align:start position:21% line:-2
フィードバックやコメント
独自のアイデアをお待ちしています

00:25:38.438 --> 00:25:42.309 align:start position:30% line:-2
これから４つのテーマで
お話しします

00:25:43.143 --> 00:25:48.081 align:start position:25% line:-2
SwiftPMを他のツールと
統合させること

00:25:48.715 --> 00:25:53.053 align:start position:27% line:-2
パッケージの新バージョンを
発表し展開させること

00:25:53.620 --> 00:25:57.958 align:start position:25% line:-2
現段階以上に複雑な
パッケージをサポートすること

00:25:58.392 --> 00:26:02.963 align:start position:34% line:-2
そしてパッケージの
可能性と信頼性です

00:25:58.392 --> 00:26:02.963 align:start position:34% line:-2
そしてパッケージの
可能性と信頼性です

00:26:04.698 --> 00:26:10.604 align:start position:23% line:-2
コマンドライン体験は重要なので
他のツールとの統合が必要です

00:26:10.704 --> 00:26:14.608 align:start position:21% line:-1
例えば開発環境や自動化などでです

00:26:15.909 --> 00:26:20.814 align:start position:30% line:-2
すでにアーキテクチャで
基礎作りはしました

00:26:21.248 --> 00:26:23.851 align:start position:21% line:-1
現在は安定したAPIがありません

00:26:23.951 --> 00:26:27.387 align:start position:25% line:-2
しかしSwiftPMの変化に
準じたツールは

00:26:27.488 --> 00:26:31.058 align:start position:25% line:-1
現在でも選定と追加が可能です

00:26:32.593 --> 00:26:36.096 align:start position:18% line:-2
デベロッパツールにおける
SwiftPMのサポート構築について

00:26:36.196 --> 00:26:38.665 align:start position:30% line:-1
意見を聞かせてください

00:26:38.766 --> 00:26:43.470 align:start position:21% line:-2
SwiftPMをエコシステムにと
考えています

00:26:45.339 --> 00:26:48.242 align:start position:21% line:-1
最近 あるリクエストがありました

00:26:48.342 --> 00:26:53.313 align:start position:14% line:-2
Package.swiftマニフェストを
ユーザからではなく

00:26:53.413 --> 00:26:57.317 align:start position:29% line:-2
自動化されたツールで
編集する方法についてです

00:26:57.651 --> 00:27:00.721 align:start position:27% line:-2
SwiftPMで
サポートできると考えました

00:26:57.651 --> 00:27:00.721 align:start position:27% line:-2
SwiftPMで
サポートできると考えました

00:27:00.821 --> 00:27:03.457 align:start position:23% line:-1
使うのはlibSyntaxです

00:27:03.957 --> 00:27:08.262 align:start position:25% line:-2
オープンソースプロジェクトで
開発されたライブラリです

00:27:08.362 --> 00:27:14.635 align:start position:21% line:-2
他のツールからSwiftの構文の
理解と操作がしやすくなります

00:27:15.969 --> 00:27:21.308 align:start position:12% line:-2
Package.swiftマニフェストには
宣言型構文をお勧めします

00:27:21.408 --> 00:27:23.343 align:start position:36% line:-1
その理由の１つが

00:27:23.510 --> 00:27:27.114 align:start position:23% line:-2
SwiftPMがマニフェストを
理解しやすくなること

00:27:27.214 --> 00:27:29.182 align:start position:27% line:-1
これで自動的に編集されます

00:27:29.283 --> 00:27:32.753 align:start position:25% line:-2
例えば依存関係やターゲットを
加えることです

00:27:35.389 --> 00:27:40.961 align:start position:29% line:-2
新バージョンの公開と
製品の展開を手助けする―

00:27:41.061 --> 00:27:42.930 align:start position:34% line:-1
機能も追加できます

00:27:44.131 --> 00:27:49.369 align:start position:21% line:-2
今は公開する際
Gitを手動でタグ付けしています

00:27:49.837 --> 00:27:54.408 align:start position:30% line:-2
タグを検査したい場合も
Gitを直接使用します

00:27:55.275 --> 00:27:58.645 align:start position:30% line:-2
これを自動化する機能が
追加できます

00:27:58.745 --> 00:28:03.750 align:start position:27% line:-2
ハウスキーピング処理や検証
その他の補助的なタスクは

00:27:58.745 --> 00:28:03.750 align:start position:27% line:-2
ハウスキーピング処理や検証
その他の補助的なタスクは

00:28:03.851 --> 00:28:06.386 align:start position:25% line:-1
ワークフローに組み込まれます

00:28:07.988 --> 00:28:14.394 align:start position:21% line:-2
セマンティックバージョニングを
正しく維持する機能も追加できます

00:28:15.062 --> 00:28:19.933 align:start position:21% line:-2
SwiftPMが新バージョンでの
APIの相違点を分析でき

00:28:20.033 --> 00:28:24.004 align:start position:27% line:-2
コンパイル時間に互換しない
変更点を探せます

00:28:24.104 --> 00:28:28.041 align:start position:27% line:-2
これによりバージョンの
アップデートを推奨できます

00:28:31.111 --> 00:28:37.184 align:start position:29% line:-2
他にもパッケージの製品を
配置しやすくできます

00:28:37.818 --> 00:28:42.623 align:start position:30% line:-2
ライブラリとのリンクや
製品のレイアウトを

00:28:42.723 --> 00:28:46.760 align:start position:29% line:-2
カスタマイズしたい
場合があるかもしれません

00:28:47.327 --> 00:28:53.400 align:start position:25% line:-2
または何のパッケージかを示す
バージョン情報を含みたい時や

00:28:53.967 --> 00:29:00.174 align:start position:23% line:-2
製品内のパッケージ情報に関する
コンテキストを使いたい時もです

00:28:53.967 --> 00:29:00.174 align:start position:23% line:-2
製品内のパッケージ情報に関する
コンテキストを使いたい時もです

00:29:00.407 --> 00:29:04.044 align:start position:29% line:-2
SwiftPMは
これらのニーズに応えます

00:29:06.113 --> 00:29:08.448 align:start position:25% line:-1
様々なものがビルドできますが

00:29:08.549 --> 00:29:13.754 align:start position:25% line:-2
さらに複雑なパッケージを
サポートしたいと思っています

00:29:15.122 --> 00:29:18.859 align:start position:30% line:-2
最大の課題は
リソースのサポートです

00:29:18.959 --> 00:29:22.196 align:start position:27% line:-2
画像やデータファイルなどが
ある場合―

00:29:22.296 --> 00:29:26.300 align:start position:29% line:-2
製品とともに
まとめることができません

00:29:27.000 --> 00:29:31.271 align:start position:25% line:-2
コアライブラリが
この春 APIを追加しました

00:29:31.371 --> 00:29:34.641 align:start position:25% line:-2
リソースの
クロスプラットフォーム化です

00:29:34.741 --> 00:29:38.378 align:start position:29% line:-2
SwiftPMも
このAPIを適用できます

00:29:40.380 --> 00:29:45.552 align:start position:27% line:-2
ユーザの中には
コンパイラフラグの指定など

00:29:45.652 --> 00:29:49.056 align:start position:30% line:-2
現在は使用できない
機能を求める人もいます

00:29:49.523 --> 00:29:53.727 align:start position:27% line:-2
安定したビルド設定モデルが
必要です

00:29:53.827 --> 00:29:57.164 align:start position:36% line:-2
可能性としては
条件付きの設定や

00:29:57.264 --> 00:30:01.869 align:start position:29% line:-2
パッケージが得る設定値を
制御する設定などです

00:29:57.264 --> 00:30:01.869 align:start position:29% line:-2
パッケージが得る設定値を
制御する設定などです

00:30:03.570 --> 00:30:08.242 align:start position:29% line:-2
SwiftPMは独立した
ビルド環境にあります

00:30:09.109 --> 00:30:11.445 align:start position:29% line:-2
任意のシェルスクリプトは
実行不能です

00:30:11.545 --> 00:30:15.382 align:start position:30% line:-2
しかし ある程度の
カスタマイズは必要です

00:30:15.482 --> 00:30:19.253 align:start position:30% line:-2
ユーザはカスタム言語や
プロセッサを使いますし

00:30:19.353 --> 00:30:22.189 align:start position:23% line:-1
自らの実装を実行したいでしょう

00:30:22.289 --> 00:30:25.559 align:start position:32% line:-2
他の作業をする場合も
あるかもしれません

00:30:26.760 --> 00:30:29.196 align:start position:23% line:-1
SwiftPMなら可能でしょう

00:30:29.296 --> 00:30:34.701 align:start position:23% line:-2
新しいツールを
ビルド工程に含めたとしてもです

00:30:34.835 --> 00:30:38.305 align:start position:21% line:-1
この場合に確認することがあります

00:30:38.405 --> 00:30:41.341 align:start position:30% line:-1
新しいツールを加えたら

00:30:41.442 --> 00:30:45.212 align:start position:34% line:-2
出入力の依存関係を
正しく宣言します

00:30:45.312 --> 00:30:51.385 align:start position:25% line:-2
それにより正確な増分と
並行化可能なビルドを保てます

00:30:53.821 --> 00:31:00.727 align:start position:21% line:-2
最後にパッケージの可能性と信頼性
そして管理についてお話しします

00:30:53.821 --> 00:31:00.727 align:start position:21% line:-2
最後にパッケージの可能性と信頼性
そして管理についてお話しします

00:31:02.362 --> 00:31:07.935 align:start position:25% line:-2
GitはTLSのような
セキュリティ構造をサポートし

00:31:08.035 --> 00:31:12.072 align:start position:30% line:-2
リモートリポジトリへの
接続を確認しています

00:31:12.239 --> 00:31:18.345 align:start position:21% line:-2
それでも不正アクセスされ
悪質なコンテンツが置かれる場合も

00:31:18.712 --> 00:31:24.151 align:start position:21% line:-2
これは第三者のコードを使用する際
想定すべきリスクです

00:31:24.284 --> 00:31:29.389 align:start position:27% line:-2
しかしSwiftPMは
セキュリティ機能をビルドし

00:31:29.490 --> 00:31:33.327 align:start position:25% line:-2
所望のパッケージコンテンツを
取得できます

00:31:35.696 --> 00:31:40.901 align:start position:14% line:-2
またビルド中のPackage.swift
マニフェスト評価の―

00:31:41.001 --> 00:31:45.572 align:start position:21% line:-2
エスケープや書き込み
ネットワークアクセスを回避します

00:31:45.672 --> 00:31:49.877 align:start position:29% line:-2
現在はmacOSの
サンドボックス技術を使用

00:31:49.977 --> 00:31:53.480 align:start position:30% line:-2
他のプラットフォームも
強化を考えています

00:31:55.816 --> 00:31:58.719 align:start position:34% line:-2
ユーザはフォークの
しやすさを求めます

00:31:58.819 --> 00:32:03.724 align:start position:29% line:-2
一方のパッケージを
カスタマイズしたい場合や

00:31:58.819 --> 00:32:03.724 align:start position:29% line:-2
一方のパッケージを
カスタマイズしたい場合や

00:32:03.991 --> 00:32:10.063 align:start position:21% line:-2
パッケージを取得したオリジナルの
URLをオーバーライドして

00:32:10.164 --> 00:32:14.234 align:start position:21% line:-2
自分で
コントロールしたい場合もあります

00:32:14.334 --> 00:32:17.838 align:start position:32% line:-2
オリジナルに頼る
必要がないようにです

00:32:20.240 --> 00:32:24.244 align:start position:27% line:-2
最終的に
インデックスを持つでしょう

00:32:24.545 --> 00:32:30.517 align:start position:21% line:-2
ネームスペースの提供や
パッケージの発見のしやすさに加え

00:32:30.684 --> 00:32:36.423 align:start position:29% line:-2
パッケージの品質測定法も
加えたいと思っています

00:32:36.523 --> 00:32:41.495 align:start position:27% line:-2
またはパッケージの信頼性を
精査する方法です

00:32:43.730 --> 00:32:47.534 align:start position:21% line:-1
これらは可能性の一部に過ぎません

00:32:47.634 --> 00:32:53.674 align:start position:23% line:-2
興味があればフィードバックや
アイデアなどをお待ちしています

00:32:53.774 --> 00:32:57.745 align:start position:29% line:-2
SwiftPMを
最高のツールにしましょう

00:32:59.012 --> 00:33:04.785 align:start position:21% line:-2
そのためにSwiftの
オープンソースの工程を説明します

00:32:59.012 --> 00:33:04.785 align:start position:21% line:-2
そのためにSwiftの
オープンソースの工程を説明します

00:33:05.986 --> 00:33:10.724 align:start position:23% line:-2
SwiftPMはオープンソース
プロジェクトの一環で

00:33:10.824 --> 00:33:16.763 align:start position:20% line:-2
swift.orgにコミュニティと
プロセスの詳細があります

00:33:18.799 --> 00:33:22.469 align:start position:25% line:-2
Swift言語の
エボリューションプロセスでは

00:33:22.569 --> 00:33:25.172 align:start position:29% line:-1
誰でも試案を提出できます

00:33:25.272 --> 00:33:29.943 align:start position:25% line:-2
SwiftPMの新しい機能や
変更についてです

00:33:31.378 --> 00:33:35.749 align:start position:25% line:-2
試案を完成させて提出する前に
フォーラムの―

00:33:35.849 --> 00:33:41.054 align:start position:18% line:-2
Package Managerに訪れ
アイデアをシェアしてください

00:33:41.155 --> 00:33:44.925 align:start position:27% line:-2
フィードバックで
アイデアがさらに磨かれます

00:33:46.560 --> 00:33:50.197 align:start position:36% line:-2
もう少し控えめに
参加したいならば

00:33:50.297 --> 00:33:54.401 align:start position:23% line:-2
bugs.swift.orgに
多くのアイデアがあります

00:33:54.501 --> 00:33:59.139 align:start position:27% line:-2
特にStarterBugの
タグ付けバグを見てください

00:33:59.239 --> 00:34:04.912 align:start position:18% line:-2
SwiftPMはSwift言語なので
チェックは簡単です

00:33:59.239 --> 00:34:04.912 align:start position:18% line:-2
SwiftPMはSwift言語なので
チェックは簡単です

00:34:06.313 --> 00:34:08.982 align:start position:30% line:-2
SwiftPM使用時に
バグを見つけたら

00:34:09.083 --> 00:34:12.219 align:start position:23% line:-2
bugs.swift.orgに
ファイルしてください

00:34:12.319 --> 00:34:14.755 align:start position:30% line:-1
トラッキングも可能です

00:34:16.657 --> 00:34:22.161 align:start position:14% line:-2
SwiftPMはSwiftプロジェクトの
恩恵を得ています

00:34:22.262 --> 00:34:27.501 align:start position:23% line:-2
ポーリングが自動的にビルドされ
テストが実行されます

00:34:27.668 --> 00:34:30.938 align:start position:27% line:-2
SwiftPMのコードには
立派なテストがあり―

00:34:31.038 --> 00:34:33.974 align:start position:29% line:-1
その基礎構造が役立ちます

00:34:35.576 --> 00:34:40.313 align:start position:5% line:-2
最新版はSnapshotsのToolchainから
ダウンロードできます

00:34:40.414 --> 00:34:44.451 align:start position:25% line:-2
swift.orgで定期的に
アップデートしています

00:34:46.687 --> 00:34:49.822 align:start position:32% line:-2
コミュニティの成長は
喜ばしいことです

00:34:49.922 --> 00:34:55.195 align:start position:27% line:-2
180人以上がバグ修正や
新しい機能に貢献しています

00:34:55.562 --> 00:34:58.799 align:start position:21% line:-1
エコシステムも成長を続けています

00:34:58.899 --> 00:35:03.537 align:start position:16% line:-2
クロスプラットフォームやGitHubの
パッケージとも連動し

00:34:58.899 --> 00:35:03.537 align:start position:16% line:-2
クロスプラットフォームやGitHubの
パッケージとも連動し

00:35:04.004 --> 00:35:10.444 align:start position:21% line:-2
皆は製品に集中し 他は
パッケージ依存関係に任せられます

00:35:11.345 --> 00:35:16.950 align:start position:27% line:-2
未だ発展段階ではありますが
２点ほど試してみてください

00:35:17.051 --> 00:35:20.988 align:start position:23% line:-2
コマンドラインユーティリティと
ライブラリです

00:35:21.255 --> 00:35:23.924 align:start position:18% line:-1
Swiftをサーバで成長させるのです

00:35:24.725 --> 00:35:29.463 align:start position:18% line:-2
サーバ側では
SwiftPMを頻繁に使用しています

00:35:29.563 --> 00:35:32.099 align:start position:23% line:-1
ウェブやバックエンドの開発の―

00:35:32.199 --> 00:35:35.969 align:start position:30% line:-2
フレームワークとともに
成長しています

00:35:36.203 --> 00:35:43.043 align:start position:21% line:-2
これらのクロスプラットフォームの
発展にSwift言語は最適です

00:35:44.278 --> 00:35:51.151 align:start position:23% line:-2
コマンドラインユーティリティや
ライブラリの作成でも構いません

00:35:51.552 --> 00:35:57.324 align:start position:7% line:-2
始めは“swift package init”を
実行するだけです

00:35:57.958 --> 00:36:02.529 align:start position:27% line:-2
新しいことに挑戦したければ
試してみてください

00:35:57.958 --> 00:36:02.529 align:start position:27% line:-2
新しいことに挑戦したければ
試してみてください

00:36:02.963 --> 00:36:08.102 align:start position:25% line:-2
貢献いただけるなら
フォーラムで話し合いましょう

00:36:09.002 --> 00:36:13.607 align:start position:25% line:-2
話をしたければ
明日の午後３時にラボにいます

00:36:14.708 --> 00:36:20.147 align:start position:25% line:-2
これからコミュニティで
一緒に何ができるか楽しみです

00:36:20.514 --> 00:36:26.119 align:start position:21% line:-2
あなたの貢献が助けとなり
コミュニティにも好影響を与えます

00:36:26.687 --> 00:36:29.356 align:start position:30% line:-1
ありがとうございました

00:36:29.590 --> 00:36:33.827 align:start position:43% line:-1
(拍手)
