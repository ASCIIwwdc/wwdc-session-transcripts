WEBVTT

00:00:07.207 --> 00:00:14.314 align:start position:43% line:-1
(音楽)

00:00:21.822 --> 00:00:25.893 align:start position:43% line:-1
(拍手)

00:00:26.426 --> 00:00:27.828 align:start position:41% line:-1
こんにちは

00:00:27.928 --> 00:00:30.264 align:start position:36% line:-1
ここで話す内容は

00:00:30.364 --> 00:00:35.269 align:start position:34% line:-2
ARKitの追跡や
認識についてです

00:00:35.369 --> 00:00:40.040 align:start position:25% line:-1
ぜひ ARを構築してください

00:00:40.574 --> 00:00:43.610 align:start position:29% line:-2
私は ARKitチームの
マリオンです

00:00:44.011 --> 00:00:45.145 align:start position:41% line:-1
皆さんは？

00:00:46.113 --> 00:00:51.752 align:start position:27% line:-2
ARKitの構成が知りたい
デベロッパでしょうか？

00:00:52.219 --> 00:00:53.954 align:start position:34% line:-1
期待に応えましょう

00:00:55.255 --> 00:00:57.024 align:start position:32% line:-1
初心者かもしれません

00:00:57.491 --> 00:01:01.128 align:start position:34% line:-2
ここで さまざまな
追跡に関する技術や

00:00:57.491 --> 00:01:01.128 align:start position:34% line:-2
ここで さまざまな
追跡に関する技術や

00:01:01.228 --> 00:01:05.632 align:start position:30% line:-2
ARの基礎や専門用語を
学ぶことができます

00:01:05.732 --> 00:01:10.204 align:start position:29% line:-2
ARを初めて構築するのに
役立つでしょう

00:01:11.872 --> 00:01:13.207 align:start position:38% line:-1
では 始めます

00:01:13.740 --> 00:01:14.875 align:start position:41% line:-1
追跡とは？

00:01:18.011 --> 00:01:21.515 align:start position:29% line:-1
追跡は 現実世界について

00:01:21.615 --> 00:01:25.252 align:start position:34% line:-2
カメラが認識すべき
位置を提供します

00:01:25.352 --> 00:01:30.424 align:start position:25% line:-2
すると カメラ越しに
仮想コンテンツを付与できます

00:01:31.124 --> 00:01:33.227 align:start position:30% line:-1
ビデオで説明しましょう

00:01:33.527 --> 00:01:37.931 align:start position:30% line:-2
手前のテーブルとイスは
仮想コンテンツです

00:01:38.031 --> 00:01:42.135 align:start position:32% line:-2
現実世界のテラスに
情報を付与しています

00:01:42.703 --> 00:01:44.571 align:start position:34% line:-1
IKEAの製品です

00:01:45.405 --> 00:01:49.443 align:start position:32% line:-2
仮想コンテンツは常に
正確に表示されます

00:01:49.710 --> 00:01:54.882 align:start position:29% line:-2
正確な配置 サイズ
見え方で表示されるのです

00:01:55.749 --> 00:02:01.655 align:start position:25% line:-2
多様な追跡技術が カメラに
参照用のシステムを提供します

00:01:55.749 --> 00:02:01.655 align:start position:25% line:-2
多様な追跡技術が カメラに
参照用のシステムを提供します

00:02:01.755 --> 00:02:04.458 align:start position:27% line:-1
つまり カメラが現実世界や

00:02:04.558 --> 00:02:08.428 align:start position:27% line:-1
情報を捉えるということです

00:02:09.128 --> 00:02:14.301 align:start position:30% line:-2
他の追跡技術については
この後に説明します

00:02:14.968 --> 00:02:19.106 align:start position:27% line:-2
そうすれば
用途に合った選択ができます

00:02:20.908 --> 00:02:26.180 align:start position:29% line:-2
まず話すのは 既存の
AR技術である位置特定や

00:02:26.346 --> 00:02:29.416 align:start position:32% line:-2
方向特定や
平面検出についてです

00:02:29.583 --> 00:02:35.556 align:start position:27% line:-2
そのあと 最新の認識技術や
追跡技術を備えた―

00:02:36.223 --> 00:02:38.525 align:start position:27% line:-1
ARKit 2を説明します

00:02:38.659 --> 00:02:44.064 align:start position:25% line:-2
マップの保存やロード
画像追跡や物体検出の説明です

00:02:45.299 --> 00:02:47.901 align:start position:27% line:-1
これらの詳細を説明する前に

00:02:48.368 --> 00:02:52.973 align:start position:34% line:-2
ARKitを手短に
復習しましょう

00:02:53.173 --> 00:02:56.643 align:start position:36% line:-2
初心者の方には
興味深い内容です

00:02:58.378 --> 00:03:02.149 align:start position:27% line:-2
まず ARSessionを
作成します

00:02:58.378 --> 00:03:02.149 align:start position:27% line:-2
まず ARSessionを
作成します

00:03:02.449 --> 00:03:05.285 align:start position:32% line:-2
ARSessionは
オブジェクトで―

00:03:05.953 --> 00:03:11.391 align:start position:27% line:-2
AR技術の構成から稼働まで
全てを処理します

00:03:11.492 --> 00:03:15.996 align:start position:34% line:-2
さらに AR技術の
処理結果も返します

00:03:17.097 --> 00:03:22.069 align:start position:32% line:-2
そのあと どの技術を
起動するか指示します

00:03:22.169 --> 00:03:24.404 align:start position:32% line:-2
例えば
どの追跡技術を使うか

00:03:24.505 --> 00:03:28.408 align:start position:30% line:-2
方向特定を有効にするか
などを指示します

00:03:30.410 --> 00:03:34.047 align:start position:21% line:-2
ARConfigurationを
取得して

00:03:34.181 --> 00:03:40.387 align:start position:30% line:-2
ARSession上の
メソッドを呼び出します

00:03:41.522 --> 00:03:43.557 align:start position:25% line:-1
すると ARSessionは

00:03:44.224 --> 00:03:48.962 align:start position:20% line:-2
AVCaptureSessionの
構成を開始

00:03:49.096 --> 00:03:51.498 align:start position:32% line:-1
画像の受信を始めます

00:03:51.598 --> 00:03:57.437 align:start position:21% line:-2
CMMotionManagerも
同様に構成されます

00:03:57.538 --> 00:04:03.143 align:start position:25% line:-2
これが基本的な ARKitに
内蔵された入力システムです

00:03:57.538 --> 00:04:03.143 align:start position:25% line:-2
これが基本的な ARKitに
内蔵された入力システムです

00:04:05.112 --> 00:04:11.151 align:start position:27% line:-2
処理結果はARFrameに
毎秒60フレームで返ります

00:04:12.052 --> 00:04:18.125 align:start position:23% line:-2
ARFrameはレンダリングに
必要な情報を与えてくれます

00:04:18.458 --> 00:04:21.862 align:start position:30% line:-2
例えば
カメラが捉えた画像です

00:04:21.962 --> 00:04:25.465 align:start position:29% line:-2
その画像を
ARにレンダリングします

00:04:25.732 --> 00:04:28.135 align:start position:30% line:-1
追跡した動きも同様です

00:04:28.702 --> 00:04:31.538 align:start position:29% line:-1
仮想カメラに反映されます

00:04:31.638 --> 00:04:36.376 align:start position:32% line:-2
カメラが捉えた情報と
同じ位置関係で

00:04:36.476 --> 00:04:38.078 align:start position:32% line:-1
レンダリングされます

00:04:38.679 --> 00:04:44.017 align:start position:30% line:-2
検知した平面の情報など
環境の情報も含まれます

00:04:45.619 --> 00:04:49.556 align:start position:30% line:-2
では 初期の追跡技術の
話を始めましょう

00:04:51.525 --> 00:04:53.493 align:start position:32% line:-1
位置特定についてです

00:04:54.361 --> 00:04:56.997 align:start position:29% line:-1
位置特定とは何でしょう？

00:04:57.097 --> 00:05:01.535 align:start position:29% line:-2
回転だけを追跡することを
表しています

00:04:57.097 --> 00:05:01.535 align:start position:29% line:-2
回転だけを追跡することを
表しています

00:05:02.069 --> 00:05:04.771 align:start position:29% line:-1
つまり 首を動かすだけで

00:05:04.872 --> 00:05:09.276 align:start position:30% line:-2
仮想コンテンツを
追跡するということです

00:05:09.877 --> 00:05:15.015 align:start position:25% line:-2
この場合 同じ位置の
仮想コンテンツは取得できても

00:05:15.148 --> 00:05:18.385 align:start position:32% line:-2
違う位置からのものは
できません

00:05:19.520 --> 00:05:22.923 align:start position:32% line:-2
３つの軸の動きだけを
追跡します

00:05:23.023 --> 00:05:26.493 align:start position:34% line:-2
これが 3DOFと
呼ばれる理由です

00:05:27.127 --> 00:05:30.631 align:start position:36% line:-2
球状の仮想環境で
活用できます

00:05:30.731 --> 00:05:34.401 align:start position:29% line:-1
例えば 360度動画です

00:05:34.501 --> 00:05:38.505 align:start position:30% line:-2
仮想コンテンツを
同じ位置から見られます

00:05:39.273 --> 00:05:43.544 align:start position:29% line:-2
遠くにある物を
拡大するためにも使えます

00:05:44.311 --> 00:05:48.916 align:start position:34% line:-2
さまざまな視点で
物を見たい場合には

00:05:49.016 --> 00:05:53.187 align:start position:32% line:-2
位置特定による拡大は
適切ではありません

00:05:54.988 --> 00:05:59.760 align:start position:30% line:-2
位置特定を実行中の
内部の処理を説明します

00:06:01.161 --> 00:06:02.963 align:start position:34% line:-1
極めてシンプルです

00:06:03.130 --> 00:06:06.433 align:start position:29% line:-1
回転データだけを使用して

00:06:06.533 --> 00:06:10.337 align:start position:32% line:-2
モーションセンサーの
データに適用します

00:06:11.338 --> 00:06:16.410 align:start position:27% line:-2
動作データは カメラの
画像よりも早く提供されます

00:06:16.577 --> 00:06:19.580 align:start position:36% line:-2
そのため 画像が
有効になってから

00:06:19.680 --> 00:06:23.584 align:start position:34% line:-2
最新の動作データを
取得します

00:06:23.684 --> 00:06:27.321 align:start position:32% line:-2
そして 双方の結果を
返します

00:06:27.421 --> 00:06:29.256 align:start position:39% line:-1
これだけです

00:06:29.590 --> 00:06:34.661 align:start position:29% line:-2
カメラフィードは
位置特定で処理されません

00:06:34.761 --> 00:06:37.397 align:start position:30% line:-2
コンピュータビジョンが
ないのです

00:06:38.232 --> 00:06:42.636 align:start position:36% line:-2
位置特定処理を
実行するためには

00:06:42.736 --> 00:06:47.508 align:start position:30% line:-2
ARSessionを
構成する必要があります

00:06:48.208 --> 00:06:52.779 align:start position:23% line:-2
処理結果は
ARFrameから提供された―

00:06:53.580 --> 00:06:55.782 align:start position:27% line:-1
ARCameraに返ります

00:06:56.316 --> 00:06:59.319 align:start position:14% line:-1
ARCameraのtransformには

00:06:59.419 --> 00:07:04.057 align:start position:27% line:-2
位置特定においては
回転データのみが含まれます

00:06:59.419 --> 00:07:04.057 align:start position:27% line:-2
位置特定においては
回転データのみが含まれます

00:07:04.158 --> 00:07:06.393 align:start position:27% line:-1
カメラが追跡したデータです

00:07:07.060 --> 00:07:12.032 align:start position:27% line:-2
eulerAnglesでも
代用が可能です

00:07:12.199 --> 00:07:14.601 align:start position:27% line:-1
最適なほうを使ってください

00:07:16.803 --> 00:07:20.841 align:start position:29% line:-2
次は より高度な
追跡技術の話をしましょう

00:07:21.074 --> 00:07:22.843 align:start position:32% line:-1
方向特定についてです

00:07:24.545 --> 00:07:28.582 align:start position:32% line:-2
方向特定は
カメラビューの位置や

00:07:28.682 --> 00:07:32.152 align:start position:34% line:-2
位置の変更を追跡し
現実世界に反映

00:07:32.252 --> 00:07:35.622 align:start position:32% line:-2
現実世界に関する
事前の情報は不要です

00:07:36.190 --> 00:07:38.425 align:start position:30% line:-1
では 左をご覧ください

00:07:39.493 --> 00:07:42.229 align:start position:32% line:-2
実際のカメラビューの
映像です

00:07:42.329 --> 00:07:46.366 align:start position:32% line:-2
右は カメラの動きを
追跡した映像です

00:07:46.466 --> 00:07:51.972 align:start position:32% line:-2
座標系で表示された
環境を探索しています

00:07:52.906 --> 00:07:56.643 align:start position:36% line:-2
何が起きているか
詳しく説明します

00:07:58.145 --> 00:08:01.415 align:start position:32% line:-2
方向特定では
モーションセンサーと

00:07:58.145 --> 00:08:01.415 align:start position:32% line:-2
方向特定では
モーションセンサーと

00:08:02.082 --> 00:08:06.520 align:start position:32% line:-2
加速度計が測位した
動作データを使います

00:08:06.854 --> 00:08:12.726 align:start position:30% line:-2
方向や移動の変化を
頻繁に演算するためです

00:08:14.962 --> 00:08:19.600 align:start position:29% line:-2
また Metalの情報も
提供します

00:08:20.901 --> 00:08:26.273 align:start position:27% line:-2
追跡システムのこの技術は
慣性オドメトリと呼ばれます

00:08:26.974 --> 00:08:30.477 align:start position:36% line:-2
この動作データは
優れた動作情報を

00:08:30.577 --> 00:08:33.347 align:start position:32% line:-1
短い間隔で提供します

00:08:33.447 --> 00:08:38.818 align:start position:27% line:-2
ただし 突然の動きがあると
間隔は長くなります

00:08:38.919 --> 00:08:43.756 align:start position:29% line:-2
データの精度が不十分で
誤差と仮定されるからです

00:08:44.424 --> 00:08:47.761 align:start position:32% line:-2
このため
単独で使用できません

00:08:47.995 --> 00:08:50.230 align:start position:30% line:-1
では 誤差を補正します

00:08:51.632 --> 00:08:56.603 align:start position:27% line:-2
方向特定では
コンピュータビジョンを適用

00:08:57.070 --> 00:09:00.174 align:start position:29% line:-2
そして カメラフレームを
使います

00:08:57.070 --> 00:09:00.174 align:start position:29% line:-2
そして カメラフレームを
使います

00:09:01.074 --> 00:09:06.747 align:start position:27% line:-2
この技術の精度は高いですが
演算時間が長くかかります

00:09:08.081 --> 00:09:12.553 align:start position:27% line:-2
また カメラの動きに対する
感度が高いので

00:09:12.653 --> 00:09:15.856 align:start position:36% line:-2
被写体がぶれる
原因にもなります

00:09:16.490 --> 00:09:21.828 align:start position:27% line:-2
この技術は
視覚オドメトリと呼ばれます

00:09:21.929 --> 00:09:27.234 align:start position:29% line:-2
コンピュータビジョンと
モーションデータの融合で

00:09:27.334 --> 00:09:30.470 align:start position:34% line:-2
ARKitは双方の
利点を持ちます

00:09:30.571 --> 00:09:35.475 align:start position:30% line:-2
コンピュータビジョンの
利点は精度の高さです

00:09:35.709 --> 00:09:39.346 align:start position:29% line:-2
モーションデータの利点は
更新速度と

00:09:39.446 --> 00:09:44.551 align:start position:27% line:-2
短い間隔でも
正確な情報を提供する点です

00:09:46.086 --> 00:09:51.058 align:start position:23% line:-2
２つが融合すると
コンピュータビジョンを省けます

00:09:51.158 --> 00:09:56.263 align:start position:27% line:-2
一方で 効率的で感度の高い
追跡を維持できるのです

00:09:56.864 --> 00:10:01.969 align:start position:27% line:-2
CPUが解放されるので
アプリケーションに使えます

00:09:56.864 --> 00:10:01.969 align:start position:27% line:-2
CPUが解放されるので
アプリケーションに使えます

00:10:02.803 --> 00:10:08.041 align:start position:25% line:-2
２つを融合した技術を
視覚慣性オドメトリと呼びます

00:10:08.842 --> 00:10:13.046 align:start position:30% line:-2
視覚的なことを
詳しく見ていきましょう

00:10:14.414 --> 00:10:18.919 align:start position:30% line:-2
コンピュータビジョンの
処理において

00:10:19.019 --> 00:10:23.991 align:start position:27% line:-2
興味深いものを抜粋したのが
青とオレンジの点です

00:10:24.391 --> 00:10:27.761 align:start position:38% line:-2
この２つの点は
同じ環境下で

00:10:27.861 --> 00:10:31.965 align:start position:34% line:-2
画像が異なる場合も
確実に抜粋されます

00:10:32.933 --> 00:10:35.802 align:start position:36% line:-2
フィーチャーと
呼ばれる領域です

00:10:36.537 --> 00:10:41.742 align:start position:30% line:-2
フィーチャーは類似性と
外見を基にして

00:10:41.842 --> 00:10:44.912 align:start position:27% line:-1
さまざまな画像と一致します

00:10:45.145 --> 00:10:49.449 align:start position:32% line:-2
すると 3Dとして
見える状態になります

00:10:50.083 --> 00:10:54.788 align:start position:32% line:-2
２つのフィーチャーが
両側に並んでいます

00:10:54.988 --> 00:10:58.225 align:start position:38% line:-2
この２点間の
視差は重要です

00:10:58.325 --> 00:11:02.429 align:start position:36% line:-2
全く異なる視点を
もたらすことで

00:10:58.325 --> 00:11:02.429 align:start position:36% line:-2
全く異なる視点を
もたらすことで

00:11:02.529 --> 00:11:06.700 align:start position:29% line:-2
立体的に見え
深度を認識できるからです

00:11:07.067 --> 00:11:09.303 align:start position:27% line:-1
これがARKitの現状です

00:11:09.403 --> 00:11:14.474 align:start position:27% line:-2
同じカメラで
さまざまな視点を処理します

00:11:14.675 --> 00:11:18.545 align:start position:29% line:-2
機能するのは
十分な視差がある場合です

00:11:18.846 --> 00:11:23.517 align:start position:30% line:-2
ARKitは 足りない
深度の情報も演算します

00:11:23.617 --> 00:11:26.286 align:start position:32% line:-2
つまり
2Dのフィーチャーが

00:11:26.520 --> 00:11:29.590 align:start position:29% line:-1
3Dに再構築されるのです

00:11:30.724 --> 00:11:34.828 align:start position:34% line:-2
ただし 再構築を
成功させるためには

00:11:35.629 --> 00:11:39.466 align:start position:32% line:-2
カメラの位置を
変える必要があります

00:11:39.566 --> 00:11:41.902 align:start position:29% line:-1
十分な視差を得るためです

00:11:42.269 --> 00:11:44.771 align:start position:30% line:-1
例えば 横への移動です

00:11:44.872 --> 00:11:49.209 align:start position:29% line:-2
回転するだけでは
十分な情報は得られません

00:11:50.444 --> 00:11:53.480 align:start position:38% line:-2
つまり これが
最初の地図です

00:11:53.580 --> 00:11:56.450 align:start position:25% line:-2
ARKitでは
World Mapと呼びます

00:11:57.317 --> 00:12:03.090 align:start position:30% line:-2
同時に シーケンスの
カメラ位置と方向を演算

00:11:57.317 --> 00:12:03.090 align:start position:30% line:-2
同時に シーケンスの
カメラ位置と方向を演算

00:12:03.223 --> 00:12:07.127 align:start position:30% line:-1
Ｃの文字が表示されます

00:12:07.394 --> 00:12:09.296 align:start position:32% line:-1
追跡システムである―

00:12:09.396 --> 00:12:13.333 align:start position:34% line:-2
方向特定の
初期化を意味します

00:12:14.501 --> 00:12:19.306 align:start position:32% line:-2
World Mapが
再構築されると同時に

00:12:19.406 --> 00:12:21.708 align:start position:34% line:-1
起点も明示されます

00:12:22.009 --> 00:12:27.881 align:start position:32% line:-2
カメラの最初の起点に
設定されるのです

00:12:27.981 --> 00:12:30.717 align:start position:29% line:-1
また 重力も設定されます

00:12:30.984 --> 00:12:33.420 align:start position:30% line:-1
Ｗの文字が表示されます

00:12:34.788 --> 00:12:38.125 align:start position:32% line:-2
これで 小さな
仮想世界ができました

00:12:38.225 --> 00:12:42.029 align:start position:29% line:-2
World Mapとして
再構築されています

00:12:42.863 --> 00:12:48.302 align:start position:29% line:-2
また カメラは現実世界の
動きを追跡してくれます

00:12:51.138 --> 00:12:57.411 align:start position:25% line:-2
では 仮想コンテンツを
カメラビューに付与しましょう

00:12:58.579 --> 00:13:03.116 align:start position:29% line:-2
ARSessionに
正確な情報を付与するには

00:12:58.579 --> 00:13:03.116 align:start position:29% line:-2
ARSessionに
正確な情報を付与するには

00:13:03.217 --> 00:13:06.453 align:start position:34% line:-2
ARAnchorを
使うとよいでしょう

00:13:06.553 --> 00:13:08.455 align:start position:30% line:-1
Ａの文字が表示されます

00:13:09.556 --> 00:13:13.660 align:start position:27% line:-2
ARAnchorは
World Mapにおける

00:13:13.760 --> 00:13:16.063 align:start position:41% line:-1
基準点です

00:13:16.463 --> 00:13:19.500 align:start position:38% line:-2
方向特定は
更新されるので

00:13:19.600 --> 00:13:22.035 align:start position:23% line:-1
ARAnchorを使うべきです

00:13:22.135 --> 00:13:26.440 align:start position:29% line:-2
つまり 仮想コンテンツも
更新され 正しい情報が―

00:13:27.808 --> 00:13:30.978 align:start position:38% line:-2
カメラビューに
付与されます

00:13:32.679 --> 00:13:37.951 align:start position:18% line:-2
ARAnchorで 仮想コンテンツを
付与できるのです

00:13:38.118 --> 00:13:44.458 align:start position:23% line:-2
ARAnchorが情報を正しく
カメラビューに付与します

00:13:46.093 --> 00:13:50.697 align:start position:23% line:-2
これで 3Dの
World Mapを作りました

00:13:50.797 --> 00:13:53.500 align:start position:27% line:-1
方向特定の参照システムです

00:13:53.967 --> 00:13:56.937 align:start position:27% line:-1
新しい画像の参照に用います

00:13:57.070 --> 00:14:02.242 align:start position:29% line:-2
フィーチャーが一致すると
三角測量を行います

00:13:57.070 --> 00:14:02.242 align:start position:29% line:-2
フィーチャーが一致すると
三角測量を行います

00:14:02.609 --> 00:14:07.881 align:start position:25% line:-2
同時に 新しいフィーチャーの
抽出 一致 三角測量が行われ

00:14:07.981 --> 00:14:11.084 align:start position:21% line:-1
World Mapに付与されます

00:14:11.185 --> 00:14:14.521 align:start position:32% line:-2
つまり ARKitが
学習するのです

00:14:15.856 --> 00:14:18.759 align:start position:34% line:-2
学習により
追跡のための演算が

00:14:18.859 --> 00:14:22.296 align:start position:34% line:-2
最新のカメラ位置と
方向を更新します

00:14:22.996 --> 00:14:27.734 align:start position:27% line:-2
そして最新の情報が
カメラビューに反映されます

00:14:30.103 --> 00:14:32.639 align:start position:30% line:-1
周囲を探索している間も

00:14:32.773 --> 00:14:36.376 align:start position:29% line:-2
方向特定は
カメラの動きを追跡します

00:14:36.477 --> 00:14:39.880 align:start position:36% line:-2
現実世界の学習を
続けるのです

00:14:40.414 --> 00:14:44.484 align:start position:32% line:-2
しかし 徐々に
ARにずれが生じます

00:14:44.818 --> 00:14:48.355 align:start position:27% line:-1
例えば 左のような状態です

00:14:48.455 --> 00:14:51.325 align:start position:29% line:-1
わずかな偏差がありますね

00:14:52.292 --> 00:14:57.664 align:start position:30% line:-2
たとえ わずかな偏差や
誤差であっても

00:14:57.764 --> 00:15:01.702 align:start position:32% line:-2
蓄積されれば
目立つようになります

00:14:57.764 --> 00:15:01.702 align:start position:32% line:-2
蓄積されれば
目立つようになります

00:15:03.403 --> 00:15:06.673 align:start position:32% line:-2
端末が
過去に探索した場所に

00:15:06.773 --> 00:15:09.743 align:start position:36% line:-2
戻ってきた場合の
説明をします

00:15:09.843 --> 00:15:12.846 align:start position:36% line:-2
例えば 探索の
開始地点に戻ると

00:15:12.946 --> 00:15:16.149 align:start position:36% line:-2
別の最適化処理の
実行が可能です

00:15:16.517 --> 00:15:20.521 align:start position:32% line:-1
視覚慣性オドメトリが

00:15:20.654 --> 00:15:26.393 align:start position:27% line:-2
視覚慣性SLAMシステムを
作ります

00:15:27.528 --> 00:15:32.799 align:start position:27% line:-2
では 方向特定が探索を
開始した画像に戻りましょう

00:15:33.867 --> 00:15:39.273 align:start position:27% line:-2
過去と現在に見た
風景のWorld Mapと

00:15:39.373 --> 00:15:43.744 align:start position:32% line:-2
追跡情報の
一致具合を確認します

00:15:43.844 --> 00:15:46.280 align:start position:29% line:-1
例えば 最初の風景と比較

00:15:47.948 --> 00:15:51.285 align:start position:27% line:-1
そして 最適化を実行します

00:15:51.985 --> 00:15:55.456 align:start position:21% line:-1
現在の情報とWorld Mapを

00:15:55.556 --> 00:15:58.091 align:start position:30% line:-1
現実世界に調和させます

00:15:59.059 --> 00:16:02.830 align:start position:34% line:-2
ARAnchorも
更新されましたね

00:15:59.059 --> 00:16:02.830 align:start position:34% line:-2
ARAnchorも
更新されましたね

00:16:02.930 --> 00:16:06.233 align:start position:29% line:-2
これが 仮想コンテンツを
付与する際に

00:16:06.333 --> 00:16:09.770 align:start position:34% line:-2
ARAnchorを
使うべき理由です

00:16:12.873 --> 00:16:17.711 align:start position:27% line:-2
この流れをカメラフィードの
目線で見てみましょう

00:16:18.045 --> 00:16:21.448 align:start position:23% line:-1
左が カメラフィードの目線です

00:16:21.548 --> 00:16:25.219 align:start position:30% line:-2
画像を追跡する
フィーチャーも見えます

00:16:25.319 --> 00:16:29.156 align:start position:34% line:-2
右に映るのは
風景の鳥かん図です

00:16:29.256 --> 00:16:32.726 align:start position:29% line:-2
ARKitが風景を認識し
3Dに―

00:16:33.927 --> 00:16:36.797 align:start position:34% line:-2
再構築しているのが
分かります

00:16:38.098 --> 00:16:42.736 align:start position:32% line:-2
再構築する場所を
符号化したのが点です

00:16:42.836 --> 00:16:47.341 align:start position:30% line:-2
青が床 赤がテーブルと
イスを表しています

00:16:49.409 --> 00:16:55.148 align:start position:29% line:-2
カメラが 出発地点などの
過去に見た場所に戻ると

00:16:55.249 --> 00:16:58.352 align:start position:34% line:-2
ARKitは
最適化を実行します

00:16:58.452 --> 00:17:01.755 align:start position:34% line:-2
点とカメラの軌道を
見てください

00:16:58.452 --> 00:17:01.755 align:start position:34% line:-2
点とカメラの軌道を
見てください

00:17:02.756 --> 00:17:05.759 align:start position:29% line:-1
更新に気が付きましたか？

00:17:08.529 --> 00:17:13.166 align:start position:30% line:-2
この更新でARKitと
現実世界の調整をします

00:17:13.267 --> 00:17:16.103 align:start position:29% line:-1
カメラの動きも調整します

00:17:16.203 --> 00:17:21.141 align:start position:29% line:-2
これで カメラフレームの
精度が高くなるのです

00:17:21.875 --> 00:17:27.214 align:start position:29% line:-2
ところで 方向特定が
演算や学習した情報は全て

00:17:27.314 --> 00:17:31.985 align:start position:32% line:-2
端末だけで
処理を実行しています

00:17:32.085 --> 00:17:35.389 align:start position:27% line:-1
また 保存先も端末だけです

00:17:36.990 --> 00:17:40.961 align:start position:29% line:-2
では アプリケーションで
どう使うのでしょう

00:17:41.862 --> 00:17:43.530 align:start position:38% line:-1
答えは簡単です

00:17:45.666 --> 00:17:49.236 align:start position:27% line:-1
方向特定を稼働するためには

00:17:49.336 --> 00:17:52.172 align:start position:23% line:-1
ARSessionを構成します

00:17:52.906 --> 00:17:58.178 align:start position:27% line:-2
結果は ARFrameの
ARCameraに返ります

00:18:01.148 --> 00:18:05.018 align:start position:34% line:-2
ARCameraは
方向特定の場合

00:18:05.119 --> 00:18:07.287 align:start position:25% line:-1
transformを含みます

00:18:07.421 --> 00:18:12.459 align:start position:27% line:-2
回転や移動で
カメラの動きを追跡できます

00:18:13.193 --> 00:18:18.031 align:start position:23% line:-2
ARCameraに含まれるのは
追跡の情報と状態や

00:18:18.131 --> 00:18:20.134 align:start position:12% line:-1
trackingStateReasonです

00:18:21.368 --> 00:18:25.706 align:start position:30% line:-2
このインスタンスが
追跡の品質を提供します

00:18:26.607 --> 00:18:28.275 align:start position:38% line:-1
追跡の品質です

00:18:28.675 --> 00:18:31.745 align:start position:29% line:-2
ARのアプリケーションを
使ったら

00:18:31.845 --> 00:18:35.983 align:start position:32% line:-2
追跡が機能しなかった
経験はありますか？

00:18:36.250 --> 00:18:37.851 align:start position:34% line:-1
どう感じましたか？

00:18:38.385 --> 00:18:41.488 align:start position:39% line:-2
イライラして
再起動した？

00:18:42.256 --> 00:18:45.792 align:start position:27% line:-2
どうすれば
追跡の品質は向上するのか？

00:18:46.627 --> 00:18:51.899 align:start position:29% line:-2
品質に影響を与える原因を
理解する必要があります

00:18:52.065 --> 00:18:54.167 align:start position:34% line:-1
主な原因は３つです

00:18:55.002 --> 00:18:58.672 align:start position:34% line:-2
１つめは
方向特定が 画像と

00:18:58.772 --> 00:19:01.375 align:start position:36% line:-2
センサーデータに
依存すること

00:18:58.772 --> 00:19:01.375 align:start position:36% line:-2
センサーデータに
依存すること

00:19:01.475 --> 00:19:05.979 align:start position:32% line:-2
長時間 妨害があると
追跡は制限されます

00:19:06.813 --> 00:19:11.852 align:start position:30% line:-2
２つめは 方向特定が
機能する環境の問題です

00:19:11.952 --> 00:19:15.989 align:start position:32% line:-2
方向特定は 視覚的に
安定した位置を使い

00:19:16.089 --> 00:19:18.692 align:start position:30% line:-1
三角測量を行うからです

00:19:18.792 --> 00:19:24.097 align:start position:29% line:-2
視覚的複雑性が
十分にあることが重要です

00:19:24.598 --> 00:19:30.037 align:start position:27% line:-2
例えば 環境が暗すぎたり
背景が白い壁だったりすると

00:19:30.137 --> 00:19:33.006 align:start position:32% line:-1
追跡の品質は落ちます

00:19:34.208 --> 00:19:35.275 align:start position:41% line:-1
３つめです

00:19:35.776 --> 00:19:39.913 align:start position:29% line:-2
方向特定は 静的な環境で
最も機能します

00:19:40.247 --> 00:19:43.584 align:start position:27% line:-1
カメラが動きを捉えすぎると

00:19:44.351 --> 00:19:48.355 align:start position:29% line:-2
画像とモーションデータは
一致しません

00:19:49.122 --> 00:19:52.426 align:start position:38% line:-2
これが ずれの
原因になります

00:19:52.859 --> 00:19:57.798 align:start position:30% line:-2
バスなどの動く場所では
使わないほうがいいです

00:19:58.232 --> 00:20:03.904 align:start position:30% line:-2
視覚的な変化はなくても
モーションセンサーが

00:19:58.232 --> 00:20:03.904 align:start position:30% line:-2
視覚的な変化はなくても
モーションセンサーが

00:20:04.171 --> 00:20:07.975 align:start position:30% line:-2
上下の動きを
検知してしまうからです

00:20:09.676 --> 00:20:13.547 align:start position:30% line:-2
では ユーザが使用中の
追跡の品質は

00:20:13.647 --> 00:20:16.783 align:start position:29% line:-1
どうやって分かるでしょう

00:20:18.185 --> 00:20:20.921 align:start position:25% line:-1
ARKitの監視で分かります

00:20:21.088 --> 00:20:25.592 align:start position:32% line:-2
認識しづらい状況での
情報を集めたデータで

00:20:25.692 --> 00:20:30.764 align:start position:30% line:-2
訓練を行った
機械学習を適用しました

00:20:31.698 --> 00:20:36.270 align:start position:30% line:-2
追跡の性能を伝える
分類子を訓練するために

00:20:36.370 --> 00:20:41.475 align:start position:27% line:-2
目に見える
アノテーションを使いました

00:20:41.842 --> 00:20:44.845 align:start position:29% line:-1
端末の速度も使っています

00:20:45.412 --> 00:20:48.782 align:start position:29% line:-1
稼働時の 追跡の健全性は

00:20:48.882 --> 00:20:52.252 align:start position:32% line:-2
パラメータに基づいて
決まります

00:20:52.553 --> 00:20:56.457 align:start position:38% line:-2
健全性の評価は
このビデオの

00:20:56.557 --> 00:20:59.626 align:start position:30% line:-1
左下に表示されています

00:20:59.993 --> 00:21:02.596 align:start position:32% line:-1
カメラが覆われると―

00:20:59.993 --> 00:21:02.596 align:start position:32% line:-1
カメラが覆われると―

00:21:03.497 --> 00:21:06.700 align:start position:39% line:-2
動いていても
健全性が悪化

00:21:07.701 --> 00:21:12.940 align:start position:32% line:-2
覆いが外れると
健全性は元に戻ります

00:21:13.941 --> 00:21:17.511 align:start position:21% line:-1
ARKitが 追跡の状態を提供し

00:21:17.811 --> 00:21:20.114 align:start position:34% line:-1
情報を簡易化します

00:21:20.447 --> 00:21:25.385 align:start position:29% line:-2
追跡の状態は３つあります
１つは普通の状態です

00:21:25.752 --> 00:21:29.289 align:start position:30% line:-1
健全な状態を意味します

00:21:29.389 --> 00:21:32.392 align:start position:38% line:-2
大体の場合は
健全な状態です

00:21:32.493 --> 00:21:36.697 align:start position:32% line:-2
２つめは 性能が悪く
制限がある状態

00:21:37.431 --> 00:21:38.899 align:start position:39% line:-1
この場合は―

00:21:39.833 --> 00:21:43.337 align:start position:27% line:-1
制限がかかる理由があります

00:21:43.437 --> 00:21:46.773 align:start position:30% line:-2
例えば フィーチャーが
不十分だとか

00:21:46.874 --> 00:21:50.477 align:start position:27% line:-1
初期化の段階にあるためです

00:21:51.879 --> 00:21:56.550 align:start position:29% line:-2
３つめは 追跡が
始まっていない無効の状態

00:21:57.050 --> 00:22:01.255 align:start position:34% line:-2
カメラの追跡状態が
変わる度に

00:21:57.050 --> 00:22:01.255 align:start position:34% line:-2
カメラの追跡状態が
変わる度に

00:22:01.355 --> 00:22:04.358 align:start position:38% line:-2
デリゲートが
呼び出されます

00:22:05.159 --> 00:22:08.729 align:start position:36% line:-2
そのため 制限が
かかった時には

00:22:08.829 --> 00:22:11.465 align:start position:32% line:-1
ユーザに通知されます

00:22:12.032 --> 00:22:16.336 align:start position:30% line:-2
そこで ユーザが
追跡状態を改善するのに

00:22:16.437 --> 00:22:19.907 align:start position:30% line:-2
有効なフィードバックを
提供しますので

00:22:20.073 --> 00:22:23.577 align:start position:32% line:-2
大体は ユーザ自身で
改善できます

00:22:23.677 --> 00:22:27.915 align:start position:29% line:-2
例えば 先程学んだように
横へ動いて

00:22:28.015 --> 00:22:30.184 align:start position:36% line:-1
初期化を行うこと

00:22:30.350 --> 00:22:33.687 align:start position:30% line:-2
または 視覚的複雑性を
得るため

00:22:33.787 --> 00:22:36.223 align:start position:32% line:-1
光を確保することです

00:22:37.758 --> 00:22:40.761 align:start position:36% line:-2
方向特定について
まとめましょう

00:22:44.464 --> 00:22:50.437 align:start position:27% line:-2
方向特定は カメラを
6DOFで追跡する技術です

00:22:51.338 --> 00:22:54.274 align:start position:27% line:-1
ユーザの周辺の環境を追跡し

00:22:54.374 --> 00:22:57.945 align:start position:34% line:-2
その環境に関する
事前情報は不要です

00:22:58.111 --> 00:23:01.648 align:start position:30% line:-2
そして どの視点でも
見ることができる情報を

00:22:58.111 --> 00:23:01.648 align:start position:30% line:-2
そして どの視点でも
見ることができる情報を

00:23:01.748 --> 00:23:05.419 align:start position:32% line:-1
現実世界に付与します

00:23:06.553 --> 00:23:09.723 align:start position:25% line:-1
またWorld Mapも作成

00:23:09.823 --> 00:23:12.793 align:start position:32% line:-2
これは 新しい画像を
特定する―

00:23:12.893 --> 00:23:15.796 align:start position:30% line:-2
追跡の
参照システムとなります

00:23:17.197 --> 00:23:21.735 align:start position:29% line:-2
すばらしい体験を創るため
追跡の性能を監視し

00:23:21.869 --> 00:23:25.539 align:start position:27% line:-2
ユーザに
フィードバックも提供します

00:23:26.907 --> 00:23:32.279 align:start position:34% line:-2
ユーザの端末だけで
処理 保存されます

00:23:33.380 --> 00:23:37.751 align:start position:29% line:-2
デベロッパ用の
サンプルを試してください

00:23:37.851 --> 00:23:40.821 align:start position:14% line:-2
“Building Your First
AR Experience”です

00:23:40.921 --> 00:23:43.390 align:start position:36% line:-1
さまざまな状況で

00:23:43.490 --> 00:23:48.428 align:start position:32% line:-2
追跡の性能を
試してみてくださいね

00:23:48.529 --> 00:23:50.998 align:start position:30% line:-1
ユーザに伝えてください

00:23:51.098 --> 00:23:56.303 align:start position:34% line:-2
追跡しづらい状況に
陥ったとしても

00:23:56.537 --> 00:24:00.541 align:start position:36% line:-2
すばらしい性能を
保証しています

00:23:56.537 --> 00:24:00.541 align:start position:36% line:-2
すばらしい性能を
保証しています

00:24:02.709 --> 00:24:05.312 align:start position:30% line:-1
方向特定とは カメラが

00:24:05.412 --> 00:24:09.650 align:start position:32% line:-2
現実世界を映している
場所のことでした

00:24:10.083 --> 00:24:11.385 align:start position:39% line:-1
次に進みます

00:24:11.485 --> 00:24:16.957 align:start position:27% line:-2
仮想コンテンツと現実世界の
関わり方の話をしましょう

00:24:17.057 --> 00:24:19.993 align:start position:32% line:-1
平面検出についてです

00:24:23.163 --> 00:24:28.135 align:start position:30% line:-2
平面検出を使用した例を
ビデオでお見せします

00:24:28.402 --> 00:24:34.341 align:start position:27% line:-2
仮想コンテンツを
配置し相互作用を体験します

00:24:35.542 --> 00:24:41.615 align:start position:27% line:-2
初めに アプリケーションが
ユーザの動きを促します

00:24:42.216 --> 00:24:45.452 align:start position:34% line:-1
水平面を検出すると

00:24:45.552 --> 00:24:50.257 align:start position:27% line:-2
配置できる仮想のテーブルが
表示されます

00:24:51.158 --> 00:24:55.929 align:start position:29% line:-2
配置したら 好きな方向に
回転させ 固定します

00:24:56.096 --> 00:25:02.035 align:start position:27% line:-2
地面とテーブルを固定した時
相互作用に気付きましたか？

00:24:56.096 --> 00:25:02.035 align:start position:27% line:-2
地面とテーブルを固定した時
相互作用に気付きましたか？

00:25:02.135 --> 00:25:05.139 align:start position:29% line:-1
一瞬ですが はずんだのは

00:25:05.239 --> 00:25:09.142 align:start position:30% line:-2
平面がどこなのか
認識できているからです

00:25:09.476 --> 00:25:12.446 align:start position:34% line:-2
では 内部の動きを
見ましょう

00:25:14.248 --> 00:25:16.850 align:start position:25% line:-1
World Mapを使います

00:25:16.950 --> 00:25:22.022 align:start position:27% line:-2
World Mapのことは
先程ご説明しました

00:25:22.289 --> 00:25:25.259 align:start position:32% line:-2
画面には
黄色で表示しています

00:25:26.093 --> 00:25:28.996 align:start position:21% line:-1
World Mapが検知するのは

00:25:29.096 --> 00:25:31.532 align:start position:32% line:-1
水平か垂直な表面です

00:25:31.632 --> 00:25:34.868 align:start position:38% line:-2
例えば 地面や
ベンチ 壁です

00:25:35.302 --> 00:25:39.706 align:start position:32% line:-2
情報を蓄積することで
検出が可能です

00:25:40.007 --> 00:25:42.910 align:start position:32% line:-1
ユーザが動き回るほど

00:25:43.010 --> 00:25:46.613 align:start position:34% line:-2
より多くの表面の
情報が取得されます

00:25:46.813 --> 00:25:49.116 align:start position:36% line:-1
平面検出を使えば

00:25:49.216 --> 00:25:53.253 align:start position:30% line:-2
表面が広がった
凸包なども検出できます

00:25:55.989 --> 00:26:01.228 align:start position:27% line:-2
表面に 複数の平面が
検出された場合の話をします

00:25:55.989 --> 00:26:01.228 align:start position:27% line:-2
表面に 複数の平面が
検出された場合の話をします

00:26:01.328 --> 00:26:04.965 align:start position:32% line:-2
画面の 緑色と
紫色の部分のことです

00:26:05.165 --> 00:26:08.268 align:start position:38% line:-2
重複すると
融合を始めます

00:26:09.736 --> 00:26:12.606 align:start position:27% line:-1
水平と垂直の面が交差すると

00:26:12.706 --> 00:26:17.811 align:start position:29% line:-2
２つの面が切られるのが
ARKit 2の特徴です

00:26:20.114 --> 00:26:23.951 align:start position:30% line:-2
平面検出は 負荷の低い
設計をしています

00:26:24.351 --> 00:26:28.589 align:start position:32% line:-2
方向特定で作った点を
転用するからです

00:26:28.989 --> 00:26:32.292 align:start position:29% line:-1
平面検出が点と一致すると

00:26:32.392 --> 00:26:36.964 align:start position:29% line:-2
少しずつ 継続的に
多くの点を集めていきます

00:26:37.064 --> 00:26:40.100 align:start position:34% line:-2
そして 重複すると
融合するのです

00:26:41.168 --> 00:26:45.272 align:start position:32% line:-2
なので 最初の検出は
時間がかかります

00:26:46.039 --> 00:26:47.541 align:start position:36% line:-1
どういうことか？

00:26:48.776 --> 00:26:52.546 align:start position:34% line:-2
アプリケーションを
起動しても すぐに

00:26:52.646 --> 00:26:56.250 align:start position:34% line:-2
平面は検出されない
ということです

00:26:57.184 --> 00:27:01.588 align:start position:36% line:-2
平面の検出が
強制である場合は

00:26:57.184 --> 00:27:01.588 align:start position:36% line:-2
平面の検出が
強制である場合は

00:27:01.688 --> 00:27:04.258 align:start position:30% line:-1
ユーザを導いてください

00:27:04.358 --> 00:27:08.262 align:start position:34% line:-2
カメラを移動させて
視差を基に

00:27:08.362 --> 00:27:12.332 align:start position:34% line:-2
再構築できるように
するのです

00:27:12.566 --> 00:27:15.369 align:start position:38% line:-2
視覚的複雑性も
得てください

00:27:15.969 --> 00:27:20.874 align:start position:30% line:-2
再構成する場合
回転だけでは不十分です

00:27:22.709 --> 00:27:25.145 align:start position:36% line:-2
平面検出を
有効にするには？

00:27:25.712 --> 00:27:27.147 align:start position:38% line:-1
とても簡単です

00:27:27.247 --> 00:27:31.251 align:start position:27% line:-2
方向特定の
3Dマップを再利用するので

00:27:31.351 --> 00:27:35.389 align:start position:27% line:-1
クラスを使って構築できます

00:27:36.623 --> 00:27:39.893 align:start position:36% line:-2
次は 平面検出の
属性の設定です

00:27:39.993 --> 00:27:44.431 align:start position:29% line:-2
水平か垂直
どちらかを設定しましょう

00:27:45.032 --> 00:27:50.270 align:start position:25% line:-2
そして ARSessionを
呼び出します

00:27:50.370 --> 00:27:53.273 align:start position:32% line:-2
すると 平面の検出を
開始します

00:27:54.474 --> 00:27:58.278 align:start position:34% line:-2
結果は どのように
返るのでしょうか

00:28:01.748 --> 00:28:05.352 align:start position:25% line:-2
ARPlaneAnchorに
結果が返ります

00:28:05.853 --> 00:28:09.289 align:start position:21% line:-1
ARAnchorのサブクラスです

00:28:10.023 --> 00:28:12.860 align:start position:20% line:-1
“transform”を提供します

00:28:13.494 --> 00:28:17.898 align:start position:29% line:-2
Anchorの位置情報を
持っています

00:28:19.166 --> 00:28:22.369 align:start position:25% line:-1
ARPlaneAnchorも

00:28:22.469 --> 00:28:26.173 align:start position:34% line:-2
平面の配列の
情報を持っています

00:28:26.740 --> 00:28:29.142 align:start position:39% line:-2
２つの方法で
表示されます

00:28:29.243 --> 00:28:33.580 align:start position:27% line:-2
１つは 境界ボックスとして
表示する方法

00:28:34.248 --> 00:28:38.418 align:start position:36% line:-2
または 検出した
平面の凸包を

00:28:38.519 --> 00:28:41.655 align:start position:34% line:-2
3Dメッシュとして
表示する方法です

00:28:42.556 --> 00:28:45.826 align:start position:34% line:-2
平面の検知の通知を
得たい場合は―

00:28:47.327 --> 00:28:49.463 align:start position:29% line:-1
デリゲートを呼び出します

00:28:49.997 --> 00:28:54.268 align:start position:29% line:-2
追加 更新 削除が
あった場合に呼び出します

00:28:54.568 --> 00:28:57.971 align:start position:30% line:-2
これで 変更した平面を
使えますし

00:28:58.071 --> 00:29:00.474 align:start position:32% line:-1
更新にも反応できます

00:28:58.071 --> 00:29:00.474 align:start position:32% line:-1
更新にも反応できます

00:29:01.575 --> 00:29:03.911 align:start position:30% line:-1
平面で何ができるのか？

00:29:04.778 --> 00:29:07.848 align:start position:29% line:-1
先程見た映像がいい例です

00:29:07.948 --> 00:29:11.218 align:start position:29% line:-2
例えば 仮想コンテンツを
配置したり

00:29:11.985 --> 00:29:15.122 align:start position:34% line:-2
物理的な
相互作用ができます

00:29:15.222 --> 00:29:19.026 align:start position:30% line:-2
先程のように
はずむこともできますね

00:29:19.760 --> 00:29:24.464 align:start position:29% line:-2
オクルージョンを追加して
使うこともできます

00:29:24.565 --> 00:29:29.069 align:start position:29% line:-2
追加した平面の後ろにある
仮想コンテンツを

00:29:29.169 --> 00:29:31.171 align:start position:30% line:-1
隠すことができるのです

00:29:32.840 --> 00:29:35.709 align:start position:38% line:-2
では 内容を
整理しましょう

00:29:36.477 --> 00:29:39.580 align:start position:36% line:-2
まず 位置特定の
話をしました

00:29:40.581 --> 00:29:42.149 align:start position:38% line:-1
次に 方向特定

00:29:42.950 --> 00:29:44.651 align:start position:32% line:-1
そして 平面検出です

00:29:45.219 --> 00:29:49.890 align:start position:27% line:-2
この後 ミケーレが
新しい追跡技術を紹介します

00:29:49.990 --> 00:29:52.226 align:start position:34% line:-1
ARKit 2です

00:29:52.593 --> 00:29:54.027 align:start position:30% line:-1
ミケーレを呼びましょう

00:29:54.328 --> 00:29:57.831 align:start position:43% line:-1
(拍手)

00:29:58.332 --> 00:29:59.500 align:start position:41% line:-1
ありがとう

00:30:00.434 --> 00:30:04.671 align:start position:29% line:-2
私はミケーレです
後半を担当できて光栄です

00:30:05.038 --> 00:30:08.642 align:start position:27% line:-2
World Mapの保存と
ロードについて話します

00:30:08.876 --> 00:30:13.213 align:start position:34% line:-2
取得した情報を全て
保存する機能です

00:30:13.313 --> 00:30:17.518 align:start position:34% line:-2
つまり 後で情報を
ロードして使っても

00:30:17.618 --> 00:30:21.922 align:start position:30% line:-2
ARの体験に一貫性を
持たせることができます

00:30:22.322 --> 00:30:28.295 align:start position:30% line:-2
別の端末でロードして
複数での利用も可能です

00:30:28.562 --> 00:30:30.230 align:start position:34% line:-1
例を見てみましょう

00:30:37.004 --> 00:30:40.541 align:start position:36% line:-2
映像に映る男性は
アンドレです

00:30:40.641 --> 00:30:44.812 align:start position:32% line:-2
テーブルの周りを歩き
ARを体験しています

00:30:45.312 --> 00:30:47.815 align:start position:34% line:-2
彼のカメラの映像が
これです

00:30:47.915 --> 00:30:52.152 align:start position:27% line:-2
仮想の花瓶をテーブルの上に
置いています

00:30:54.822 --> 00:30:58.258 align:start position:34% line:-2
数分後 彼の友人が
やって来ました

00:30:58.358 --> 00:31:00.460 align:start position:32% line:-1
同じ風景を見ています

00:30:58.358 --> 00:31:00.460 align:start position:32% line:-1
同じ風景を見ています

00:31:00.561 --> 00:31:05.966 align:start position:30% line:-2
左がアンドレの画面
右が彼の友人の画面です

00:31:06.467 --> 00:31:10.070 align:start position:30% line:-2
同じ風景を
見ているのが分かります

00:31:10.170 --> 00:31:13.807 align:start position:30% line:-2
重要なのは 同じものが
見えていることです

00:31:14.208 --> 00:31:17.077 align:start position:34% line:-2
AR体験を
共有しているのです

00:31:19.146 --> 00:31:24.084 align:start position:32% line:-2
この例は ３段階に
分けることができます

00:31:24.184 --> 00:31:28.055 align:start position:29% line:-2
初めに アンドレが
World Mapを取得

00:31:28.856 --> 00:31:31.859 align:start position:27% line:-2
次に World Mapを
共有します

00:31:32.826 --> 00:31:36.363 align:start position:32% line:-2
最後に 友人の端末に
対応させます

00:31:37.431 --> 00:31:43.237 align:start position:25% line:-2
つまり 新しい端末でも
同じ位置だと認識できるのです

00:31:43.504 --> 00:31:47.207 align:start position:32% line:-2
World Mapの
正確な位置を演算し

00:31:47.307 --> 00:31:52.212 align:start position:27% line:-2
違う端末でも 同じ位置から
追跡を始めるのです

00:31:53.614 --> 00:31:56.650 align:start position:32% line:-1
詳しい説明をする前に

00:31:56.783 --> 00:32:00.187 align:start position:32% line:-2
World Mapを
復習しましょう

00:31:56.783 --> 00:32:00.187 align:start position:32% line:-2
World Mapを
復習しましょう

00:32:01.388 --> 00:32:06.793 align:start position:27% line:-2
World Mapは
追跡データを保持しています

00:32:06.894 --> 00:32:10.697 align:start position:30% line:-2
例えば 先程の
フィーチャーポイントや

00:32:10.797 --> 00:32:13.133 align:start position:27% line:-1
ポイントの見え方の情報です

00:32:16.970 --> 00:32:20.607 align:start position:34% line:-2
システムが追加した
平面などの

00:32:20.707 --> 00:32:23.977 align:start position:25% line:-1
Anchorも保持しています

00:32:24.812 --> 00:32:29.883 align:start position:29% line:-2
または ユーザが追加した
花瓶などの情報です

00:32:31.318 --> 00:32:34.822 align:start position:29% line:-2
このデータは
シリアル変換が可能なので

00:32:34.922 --> 00:32:40.127 align:start position:30% line:-2
複数のユーザが
AR体験を共有できます

00:32:40.227 --> 00:32:44.398 align:start position:27% line:-2
では World Mapの
取得の説明です

00:32:46.066 --> 00:32:50.070 align:start position:36% line:-2
最初のビデオを
もう一度流します

00:32:50.237 --> 00:32:52.940 align:start position:30% line:-1
左がアンドレの画面です

00:32:55.742 --> 00:33:00.581 align:start position:25% line:-2
右には World Mapが
映っています

00:32:55.742 --> 00:33:00.581 align:start position:25% line:-2
右には World Mapが
映っています

00:33:00.681 --> 00:33:04.418 align:start position:36% line:-2
テーブルとイスが
見えています

00:33:05.385 --> 00:33:09.623 align:start position:30% line:-2
取得する際に
注意すべき点があります

00:33:09.957 --> 00:33:14.261 align:start position:29% line:-2
マリオンが話した注意点が
全て当てはまります

00:33:14.361 --> 00:33:19.032 align:start position:30% line:-2
つまり 高密度の
フィーチャーが必要です

00:33:19.466 --> 00:33:21.568 align:start position:32% line:-1
静的な風景も必要です

00:33:22.002 --> 00:33:25.839 align:start position:36% line:-2
わずかな変化には
対処できますが

00:33:25.939 --> 00:33:28.342 align:start position:38% line:-2
大部分は静的が
いいでしょう

00:33:28.942 --> 00:33:32.913 align:start position:25% line:-2
さらに World Mapを
共有する場合

00:33:33.013 --> 00:33:36.950 align:start position:38% line:-2
複数の視点から
環境を見ます

00:33:37.451 --> 00:33:43.123 align:start position:27% line:-2
特に 後で対応させる場所の
情報は全て取得しましょう

00:33:45.292 --> 00:33:50.097 align:start position:12% line:-2
World mapping statusを
用意しました

00:33:50.197 --> 00:33:52.900 align:start position:29% line:-1
これで簡単に取得できます

00:33:53.801 --> 00:33:56.336 align:start position:29% line:-1
これまでに説明した内容を

00:33:56.670 --> 00:33:59.273 align:start position:32% line:-1
要約してお伝えします

00:33:59.506 --> 00:34:03.110 align:start position:25% line:-2
最初は World Mapに
制限があります

00:33:59.506 --> 00:34:03.110 align:start position:25% line:-2
最初は World Mapに
制限があります

00:34:03.210 --> 00:34:07.948 align:start position:30% line:-2
風景を学習するにつれて
徐々に有効になります

00:34:08.047 --> 00:34:13.253 align:start position:25% line:-2
最後は World Mapが
作成済みになります

00:34:13.654 --> 00:34:17.424 align:start position:23% line:-2
そのあと World Mapを
保存します

00:34:18.992 --> 00:34:21.161 align:start position:30% line:-1
これは よい情報ですが

00:34:21.261 --> 00:34:24.764 align:start position:34% line:-2
ユーザに
適用される情報です

00:34:24.864 --> 00:34:29.436 align:start position:30% line:-2
デベロッパは ユーザを
導く必要があります

00:34:30.204 --> 00:34:34.475 align:start position:32% line:-2
状態を表示して
作成済みになるまでは

00:34:34.574 --> 00:34:39.947 align:start position:27% line:-2
World Mapの保存や
共有を無効にできるのです

00:34:42.049 --> 00:34:47.021 align:start position:29% line:-2
また 情報の取得中に
追跡の性能を監視できます

00:34:47.487 --> 00:34:52.592 align:start position:29% line:-2
追跡に制限がある場合には
ユーザに報告もできます

00:34:53.025 --> 00:34:56.196 align:start position:32% line:-2
再起動を勧めることも
できるでしょう

00:34:57.397 --> 00:35:02.936 align:start position:30% line:-2
情報を受信する端末では
対応の手助けができます

00:34:57.397 --> 00:35:02.936 align:start position:30% line:-2
情報を受信する端末では
対応の手助けができます

00:35:03.036 --> 00:35:06.273 align:start position:27% line:-1
取得する端末側の話をします

00:35:06.373 --> 00:35:09.843 align:start position:27% line:-2
撮影した画像は
World Mapと一緒に

00:35:09.943 --> 00:35:12.212 align:start position:32% line:-1
受信端末に送信します

00:35:12.312 --> 00:35:18.218 align:start position:27% line:-2
受信端末では 画像と
同じ場所を探してもらいます

00:35:19.787 --> 00:35:23.590 align:start position:34% line:-2
取得方法の次は
共有方法の説明です

00:35:24.892 --> 00:35:27.294 align:start position:25% line:-1
World Mapの取得には

00:35:27.394 --> 00:35:30.798 align:start position:27% line:-1
このインスタンスを使います

00:35:30.898 --> 00:35:33.000 align:start position:34% line:-1
これで取得可能です

00:35:34.635 --> 00:35:37.438 align:start position:30% line:-1
直列化可能クラスなので

00:35:37.571 --> 00:35:40.507 align:start position:14% line:-1
NSKeyedArchiverを使います

00:35:40.607 --> 00:35:42.876 align:start position:30% line:-1
データを並べるためです

00:35:43.577 --> 00:35:49.283 align:start position:29% line:-2
１人で利用する場合は
ディスクに保存もできます

00:35:49.616 --> 00:35:53.120 align:start position:36% line:-2
そうでない場合は
共有しましょう

00:35:53.287 --> 00:35:56.490 align:start position:29% line:-1
フレームワークを使います

00:35:56.857 --> 00:36:00.928 align:start position:32% line:-2
自動デバイスのような
優れた特徴があり

00:35:56.857 --> 00:36:00.928 align:start position:32% line:-2
自動デバイスのような
優れた特徴があり

00:36:01.028 --> 00:36:05.299 align:start position:29% line:-2
端末間での効率的な
データ通信を可能にします

00:36:05.532 --> 00:36:08.902 align:start position:29% line:-1
デベロッパWebサイトで

00:36:09.103 --> 00:36:13.774 align:start position:30% line:-2
ARKitでの使用例を
確認してみてください

00:36:15.809 --> 00:36:18.712 align:start position:34% line:-2
受信端末が
情報を受信したあと

00:36:19.279 --> 00:36:22.249 align:start position:32% line:-2
方向特定を
使うまでを説明します

00:36:22.349 --> 00:36:27.087 align:start position:21% line:-2
initialWorldMapを
設定するだけです

00:36:28.188 --> 00:36:32.726 align:start position:30% line:-2
セッションを起動すると
過去の情報を検索します

00:36:33.560 --> 00:36:38.232 align:start position:29% line:-2
同じ風景を指していないと
時間がかかります

00:36:38.699 --> 00:36:40.901 align:start position:29% line:-1
対応中かどうか知るには？

00:36:41.602 --> 00:36:44.505 align:start position:29% line:-1
追跡の状態で判断できます

00:36:44.605 --> 00:36:48.042 align:start position:36% line:-2
セッションを
開始するとすぐに

00:36:48.142 --> 00:36:51.812 align:start position:32% line:-2
対応を行うため
制限状態になるのです

00:36:52.846 --> 00:36:56.016 align:start position:27% line:-1
追跡データは取得可能ですが

00:36:56.116 --> 00:37:01.155 align:start position:29% line:-2
風景の基本は
最初に撮影したカメラです

00:36:56.116 --> 00:37:01.155 align:start position:29% line:-2
風景の基本は
最初に撮影したカメラです

00:37:02.623 --> 00:37:06.894 align:start position:34% line:-2
同じ風景を捉えると
対応が始まります

00:37:06.994 --> 00:37:12.432 align:start position:30% line:-2
追跡の状態が通常になり
風景が一致します

00:37:13.567 --> 00:37:17.104 align:start position:25% line:-1
Anchorが利用できるので

00:37:17.204 --> 00:37:19.540 align:start position:29% line:-1
仮想コンテンツを戻せます

00:37:21.742 --> 00:37:25.312 align:start position:34% line:-2
内部の処理に関する
注意事項です

00:37:25.546 --> 00:37:28.448 align:start position:36% line:-2
フィーチャーを
一致しているので

00:37:28.549 --> 00:37:32.119 align:start position:38% line:-2
風景の類似点が
必要になります

00:37:32.219 --> 00:37:35.522 align:start position:29% line:-2
つまり 対応したい場所の
風景です

00:37:36.089 --> 00:37:39.927 align:start position:32% line:-2
夜に同じ風景を
撮影しても失敗します

00:37:42.162 --> 00:37:46.199 align:start position:32% line:-2
World Mapの
保存やロードでの

00:37:46.300 --> 00:37:48.902 align:start position:32% line:-1
共有体験の説明でした

00:37:49.169 --> 00:37:51.638 align:start position:30% line:-1
次は 画像追跡の話です

00:37:54.775 --> 00:38:00.447 align:start position:21% line:-2
ARとは 現実世界に
仮想コンテンツを付与することです

00:37:54.775 --> 00:38:00.447 align:start position:21% line:-2
ARとは 現実世界に
仮想コンテンツを付与することです

00:38:00.547 --> 00:38:05.919 align:start position:30% line:-2
現実世界には
あらゆる物が存在します

00:38:06.086 --> 00:38:08.589 align:start position:32% line:-1
例えば 広告などです

00:38:08.755 --> 00:38:12.492 align:start position:30% line:-2
画像追跡で
物を認識することができ

00:38:12.593 --> 00:38:16.196 align:start position:25% line:-1
ARを体験することができます

00:38:17.798 --> 00:38:19.066 align:start position:38% line:-1
例を見ましょう

00:38:19.933 --> 00:38:23.804 align:start position:30% line:-2
２つの物が
同時に追跡されています

00:38:24.371 --> 00:38:27.608 align:start position:27% line:-1
左には ゾウが映っています

00:38:27.708 --> 00:38:31.044 align:start position:36% line:-2
ゾウの写真の上に
立っています

00:38:31.545 --> 00:38:35.449 align:start position:34% line:-2
右には 仮想画面が
映っています

00:38:36.116 --> 00:38:39.853 align:start position:32% line:-1
自由に動き回る物体を

00:38:40.053 --> 00:38:42.422 align:start position:34% line:-2
毎秒60フレームで
追跡します

00:38:43.924 --> 00:38:46.894 align:start position:27% line:-1
内部の処理を説明しましょう

00:38:47.361 --> 00:38:53.333 align:start position:23% line:-2
ゾウの画像を 右側の画像の中で
使いたいとします

00:38:54.201 --> 00:38:58.772 align:start position:30% line:-2
グレースケールにします
追跡に似た処理の話です

00:38:58.872 --> 00:39:03.911 align:start position:30% line:-2
参照画像と現在の風景で
興味深い点を追跡します

00:38:58.872 --> 00:39:03.911 align:start position:30% line:-2
参照画像と現在の風景で
興味深い点を追跡します

00:39:04.645 --> 00:39:09.717 align:start position:27% line:-2
そして フィーチャーを
参照イメージと一致させます

00:39:10.384 --> 00:39:15.522 align:start position:27% line:-2
幾何学と線形代数を用いると
現在の風景の

00:39:15.622 --> 00:39:19.459 align:start position:34% line:-2
最初の推定値は
十分に取得可能です

00:39:20.460 --> 00:39:21.762 align:start position:39% line:-1
まだ続けます

00:39:22.496 --> 00:39:26.833 align:start position:27% line:-1
正確で速い追跡を行うために

00:39:26.934 --> 00:39:29.636 align:start position:30% line:-1
高密度の追跡を進めます

00:39:29.903 --> 00:39:34.174 align:start position:30% line:-2
最初の推定値を使い
ピクセルを取り出します

00:39:35.442 --> 00:39:41.115 align:start position:32% line:-2
そして 右のような
長方形に変形させます

00:39:41.215 --> 00:39:43.150 align:start position:34% line:-1
再構成した画像です

00:39:43.484 --> 00:39:47.354 align:start position:32% line:-2
ピクセルを
長方形に変えています

00:39:47.821 --> 00:39:52.760 align:start position:30% line:-2
次に 再構成した画像と
参照画像を比較して

00:39:52.860 --> 00:39:55.796 align:start position:36% line:-2
下のような
エラー画像を作成

00:39:56.563 --> 00:40:01.869 align:start position:30% line:-2
画像の位置を最適化して
エラーを最小限にします

00:39:56.563 --> 00:40:01.869 align:start position:30% line:-2
画像の位置を最適化して
エラーを最小限にします

00:40:03.337 --> 00:40:07.708 align:start position:32% line:-2
つまり 非常に正確な
情報になるのです

00:40:09.276 --> 00:40:10.077 align:start position:41% line:-1
ありがとう

00:40:10.444 --> 00:40:13.180 align:start position:34% line:-2
毎秒60フレームで
追跡中です

00:40:15.215 --> 00:40:18.552 align:start position:32% line:-2
ARKitでの
処理方法を説明します

00:40:18.852 --> 00:40:19.853 align:start position:36% line:-1
これまでどおり―

00:40:21.054 --> 00:40:24.425 align:start position:29% line:-1
APIは単純に３段階です

00:40:24.525 --> 00:40:27.995 align:start position:34% line:-2
最初に 参照画像を
全て集めます

00:40:28.428 --> 00:40:32.966 align:start position:25% line:-2
それからARSessionを
２つの方法で設定

00:40:33.100 --> 00:40:37.237 align:start position:0% line:-1
ARWorldTrackingConfigurationを

00:40:37.337 --> 00:40:39.640 align:start position:29% line:-1
使うという方法が１つです

00:40:39.773 --> 00:40:44.778 align:start position:29% line:-2
iOS 12では独立型の
画像追跡を導入しました

00:40:46.613 --> 00:40:49.750 align:start position:23% line:-2
それから
ARImageAnchor型の

00:40:49.850 --> 00:40:52.653 align:start position:34% line:-1
結果を受け取ります

00:40:53.220 --> 00:40:58.258 align:start position:30% line:-2
３つの段階の１つめから
詳しく見ていきましょう

00:40:59.526 --> 00:41:05.432 align:start position:27% line:-2
アセットカタログで
参照画像を楽に追加できます

00:40:59.526 --> 00:41:05.432 align:start position:27% line:-2
アセットカタログで
参照画像を楽に追加できます

00:41:06.066 --> 00:41:10.738 align:start position:18% line:-2
AR Resource Groupを
作るだけです

00:41:11.505 --> 00:41:14.375 align:start position:36% line:-2
次に 画像の
物理的次元を設定

00:41:14.475 --> 00:41:17.878 align:start position:34% line:-2
右上のプロパティで
設定できます

00:41:19.213 --> 00:41:23.450 align:start position:32% line:-2
この設定は必須ですが
理由があります

00:41:24.385 --> 00:41:28.188 align:start position:32% line:-2
画像の配置を
物理的寸法にするので

00:41:28.288 --> 00:41:30.924 align:start position:30% line:-2
情報も
物理的寸法になるのです

00:41:31.091 --> 00:41:35.896 align:start position:30% line:-2
ARKitでは
全てがメートル表記です

00:41:37.297 --> 00:41:41.769 align:start position:30% line:-2
追跡した情報を
方向特定と融合する場合

00:41:41.869 --> 00:41:44.505 align:start position:32% line:-1
正しい設定が重要です

00:41:44.872 --> 00:41:49.376 align:start position:29% line:-2
設定により 画像と現実の
位置が一貫します

00:41:51.078 --> 00:41:54.681 align:start position:29% line:-1
参照画像の例を見ましょう

00:41:56.016 --> 00:41:58.385 align:start position:32% line:-1
２つの画像があります

00:41:58.519 --> 00:42:00.954 align:start position:27% line:-1
画像追跡でうまく機能します

00:41:58.519 --> 00:42:00.954 align:start position:27% line:-1
画像追跡でうまく機能します

00:42:01.054 --> 00:42:04.525 align:start position:32% line:-2
高い色調で
明暗差に優れています

00:42:04.625 --> 00:42:08.762 align:start position:34% line:-2
さらに 反復構造を
含みません

00:42:09.029 --> 00:42:13.233 align:start position:30% line:-2
うまく機能しない画像も
紹介します

00:42:13.367 --> 00:42:16.603 align:start position:27% line:-1
その例を右側に表示しました

00:42:17.071 --> 00:42:20.874 align:start position:25% line:-1
上の２つの例を見てみましょう

00:42:21.141 --> 00:42:25.379 align:start position:30% line:-2
よい画像には点が
多くあるのが分かります

00:42:25.479 --> 00:42:29.083 align:start position:30% line:-2
ヒストグラムも
うまく分散されています

00:42:29.249 --> 00:42:30.784 align:start position:32% line:-1
一方 悪い画像では―

00:42:31.752 --> 00:42:33.854 align:start position:38% line:-1
点の数が少なく

00:42:33.954 --> 00:42:37.024 align:start position:29% line:-1
ヒストグラムは非対称です

00:42:38.392 --> 00:42:43.397 align:start position:27% line:-2
画像の評価はXcodeから
直接入手できます

00:42:44.031 --> 00:42:47.901 align:start position:32% line:-2
画像をドラッグすると
分析されます

00:42:48.001 --> 00:42:52.773 align:start position:32% line:-2
エラーがあれば
起動前でも警告を出し

00:42:52.873 --> 00:42:54.842 align:start position:30% line:-1
フィードバックをします

00:42:55.576 --> 00:42:58.445 align:start position:30% line:-1
例えば ページ下にある

00:42:58.545 --> 00:43:01.515 align:start position:27% line:-1
雑誌の画像をクリックします

00:42:58.545 --> 00:43:01.515 align:start position:27% line:-1
雑誌の画像をクリックします

00:43:01.648 --> 00:43:06.520 align:start position:29% line:-2
Xcodeが警告を
出しているのが分かります

00:43:06.620 --> 00:43:09.456 align:start position:30% line:-1
画像が白すぎるためです

00:43:09.556 --> 00:43:14.361 align:start position:32% line:-2
さらに 反復構造が
含まれているようです

00:43:15.729 --> 00:43:19.767 align:start position:34% line:-2
別の例では 画像が
似すぎているため

00:43:19.867 --> 00:43:25.506 align:start position:29% line:-2
検出時に混乱を招く恐れが
あると警告が出ています

00:43:25.839 --> 00:43:30.077 align:start position:30% line:-2
この例は 同じ山の
２枚の画像で見られます

00:43:31.378 --> 00:43:33.781 align:start position:29% line:-1
警告の対処方法があります

00:43:33.881 --> 00:43:35.816 align:start position:36% line:-1
例えばこの絵です

00:43:35.916 --> 00:43:39.186 align:start position:32% line:-1
反復構造を含んでおり

00:43:39.286 --> 00:43:42.022 align:start position:27% line:-1
ヒストグラムの分散が変です

00:43:42.422 --> 00:43:45.993 align:start position:32% line:-2
この画像の特徴的な
領域を特定しましょう

00:43:46.093 --> 00:43:49.897 align:start position:30% line:-2
この場合 ページにある
写真のことです

00:43:50.030 --> 00:43:53.700 align:start position:30% line:-2
写真を切り取り
参照画像として使います

00:43:53.801 --> 00:43:57.337 align:start position:27% line:-1
すると 警告は全て消えます

00:43:57.438 --> 00:43:59.973 align:start position:30% line:-1
追跡の精度も上がります

00:44:01.875 --> 00:44:06.747 align:start position:18% line:-2
AR Resource Groupも
使えます

00:44:07.448 --> 00:44:10.284 align:start position:36% line:-2
より多くの画像の
検出が可能です

00:44:10.384 --> 00:44:14.054 align:start position:34% line:-2
検出できる画像を
最大で25におさえ

00:44:14.154 --> 00:44:17.057 align:start position:30% line:-2
効率的で 素早い反応を
保っています

00:44:17.858 --> 00:44:19.860 align:start position:29% line:-1
ただし いくつも作れます

00:44:19.960 --> 00:44:23.497 align:start position:34% line:-2
グループ間の
切り替えも可能です

00:44:23.964 --> 00:44:28.402 align:start position:29% line:-2
例えば 何百もの物がある
美術館で

00:44:28.502 --> 00:44:31.038 align:start position:30% line:-1
ARを構築するとします

00:44:31.905 --> 00:44:35.476 align:start position:32% line:-2
通常 美術品は
別々の部屋にあります

00:44:35.742 --> 00:44:38.845 align:start position:30% line:-2
そこで 部屋に置かれた
美術品を

00:44:38.946 --> 00:44:41.515 align:start position:29% line:-1
グループにまとめるのです

00:44:41.615 --> 00:44:44.084 align:start position:29% line:-1
部屋ごとにまとめましょう

00:44:44.184 --> 00:44:49.022 align:start position:29% line:-2
部屋を切り替えるために
中核となる場所を使います

00:44:50.891 --> 00:44:55.462 align:start position:34% line:-2
類似した物がないか
注意してください

00:44:56.530 --> 00:44:59.166 align:start position:30% line:-1
参照画像についてでした

00:44:59.533 --> 00:45:02.269 align:start position:16% line:-1
configurationの話をします

00:44:59.533 --> 00:45:02.269 align:start position:16% line:-1
configurationの話をします

00:45:02.936 --> 00:45:07.474 align:start position:23% line:-2
左は 独立型の
configurationです

00:45:07.574 --> 00:45:09.977 align:start position:38% line:-2
方向特定処理は
行いません

00:45:10.544 --> 00:45:13.046 align:start position:29% line:-1
元の画像も存在しないので

00:45:13.146 --> 00:45:16.850 align:start position:34% line:-2
カメラに写る
風景のみ使用します

00:45:18.185 --> 00:45:21.955 align:start position:32% line:-2
方向特定と画像追跡の
融合も可能です

00:45:23.524 --> 00:45:26.894 align:start position:34% line:-2
この場合
風景を理解できます

00:45:26.994 --> 00:45:30.397 align:start position:27% line:-1
例えば 平面検出と同じです

00:45:30.998 --> 00:45:34.668 align:start position:36% line:-2
どちらを使うのが
適切でしょうか？

00:45:34.968 --> 00:45:39.540 align:start position:0% line:-1
ARImageTrackingConfigurationは

00:45:39.707 --> 00:45:42.910 align:start position:32% line:-2
風景を構成するために
作られました

00:45:43.110 --> 00:45:45.178 align:start position:36% line:-1
左に例を映します

00:45:46.513 --> 00:45:50.050 align:start position:30% line:-1
教科書が置いてあります

00:45:50.450 --> 00:45:54.555 align:start position:32% line:-2
魅力的にするため
力学グラフを被せます

00:45:54.655 --> 00:45:57.124 align:start position:25% line:-1
今回は 正三角形になりました

00:45:57.791 --> 00:46:01.094 align:start position:32% line:-2
物体に適したグラフが
使われます

00:45:57.791 --> 00:46:01.094 align:start position:32% line:-2
物体に適したグラフが
使われます

00:46:01.395 --> 00:46:04.198 align:start position:30% line:-1
他の例も見てみましょう

00:46:04.465 --> 00:46:06.700 align:start position:30% line:-1
画像追跡が引き金になり

00:46:06.800 --> 00:46:10.170 align:start position:36% line:-2
実際の画像から
物が飛び出します

00:46:10.704 --> 00:46:15.275 align:start position:0% line:-1
ARWorldTrackingConfigurationで

00:46:15.375 --> 00:46:18.345 align:start position:38% line:-2
飛び出た物の
追跡ができます

00:46:20.013 --> 00:46:23.684 align:start position:29% line:-2
また モーションデータは
使いません

00:46:23.784 --> 00:46:26.854 align:start position:36% line:-2
つまり バスや
エレベーターでも

00:46:26.987 --> 00:46:29.556 align:start position:34% line:-2
画像追跡を
使うことができます

00:46:31.158 --> 00:46:34.094 align:start position:38% line:-2
では コードを
見てみましょう

00:46:35.128 --> 00:46:37.798 align:start position:29% line:-1
３つのステップがあります

00:46:37.898 --> 00:46:40.701 align:start position:32% line:-1
まず 画像を集めます

00:46:40.801 --> 00:46:45.105 align:start position:30% line:-2
特定のグループの画像を
全て集める

00:46:45.205 --> 00:46:48.375 align:start position:30% line:-1
便利なクラスもあります

00:46:48.475 --> 00:46:50.544 align:start position:29% line:-1
クラス名はRoom1です

00:46:51.812 --> 00:46:58.418 align:start position:20% line:-2
次にtrackingImagesを
クラスに設定します

00:46:58.519 --> 00:46:59.820 align:start position:38% line:-1
最後は実行です

00:47:00.821 --> 00:47:04.691 align:start position:34% line:-2
そして 処理結果を
受け取ります

00:47:04.792 --> 00:47:07.561 align:start position:21% line:-1
didUpdateなどを使います

00:47:07.828 --> 00:47:11.498 align:start position:23% line:-1
Anchorの型も確認可能です

00:47:12.533 --> 00:47:16.970 align:start position:29% line:-2
Anchorは物の位置や
方向の情報を

00:47:17.071 --> 00:47:18.572 align:start position:38% line:-1
保持しています

00:47:18.672 --> 00:47:21.241 align:start position:34% line:-2
自分が付けた名前が
使えるので

00:47:21.341 --> 00:47:25.045 align:start position:30% line:-2
どの画像が
検出されたか分かります

00:47:25.946 --> 00:47:27.881 align:start position:32% line:-1
Booleanでは―

00:47:28.215 --> 00:47:31.585 align:start position:30% line:-2
画像が追跡されているか
確認できます

00:47:33.787 --> 00:47:37.157 align:start position:30% line:-1
使用例は他にもあります

00:47:37.724 --> 00:47:41.461 align:start position:27% line:-1
画像検出や画像追跡を使えば

00:47:41.628 --> 00:47:43.997 align:start position:27% line:-1
他にもできることがあります

00:47:45.466 --> 00:47:49.670 align:start position:32% line:-2
例えば ２つの端末で
同じ画像を見る場合

00:47:50.037 --> 00:47:52.706 align:start position:27% line:-1
両端末で画像を検出できます

00:47:52.806 --> 00:47:56.477 align:start position:29% line:-2
座標系を
共有できるようになるので

00:47:56.577 --> 00:47:59.313 align:start position:34% line:-2
共有体験の
代替手段になります

00:48:01.749 --> 00:48:07.187 align:start position:27% line:-2
また 画像が実在する場所が
分かった場合の話をします

00:48:08.222 --> 00:48:12.292 align:start position:34% line:-2
例えば この公園の
場所が分かった場合

00:48:12.393 --> 00:48:16.964 align:start position:30% line:-2
画像追跡で 端末を
向ける位置が分かります

00:48:17.331 --> 00:48:21.802 align:start position:30% line:-2
端末の位置も現実世界に
関係しているので

00:48:21.902 --> 00:48:27.407 align:start position:27% line:-2
現実世界と同じように
方向を重ねることも可能です

00:48:30.010 --> 00:48:32.546 align:start position:29% line:-1
画像追跡の話は終わりです

00:48:32.646 --> 00:48:35.616 align:start position:36% line:-2
次は 物体検出の
説明をします

00:48:38.252 --> 00:48:41.488 align:start position:29% line:-1
画像追跡で 検出する物は

00:48:41.588 --> 00:48:44.758 align:start position:27% line:-1
平面的なオブジェクトでした

00:48:45.325 --> 00:48:48.162 align:start position:34% line:-2
物体検出では
3Dオブジェクトを

00:48:48.262 --> 00:48:51.098 align:start position:27% line:-1
検出できるようになりました

00:48:52.599 --> 00:48:57.971 align:start position:27% line:-2
ただし 動き回る物ではなく
静的な物を想定しています

00:48:58.772 --> 00:49:00.073 align:start position:38% line:-1
例を見ましょう

00:48:58.772 --> 00:49:00.073 align:start position:38% line:-1
例を見ましょう

00:49:01.008 --> 00:49:05.546 align:start position:27% line:-2
美術館にある
ネフェルティティの胸像です

00:49:05.646 --> 00:49:08.015 align:start position:27% line:-1
ARKitで検出しましょう

00:49:08.182 --> 00:49:13.520 align:start position:30% line:-2
それから 情報を
頭上に重ねてみましょう

00:49:15.456 --> 00:49:18.592 align:start position:38% line:-2
ARKitでの
物体検出では

00:49:18.692 --> 00:49:21.461 align:start position:34% line:-2
特定の物体について
話しています

00:49:21.562 --> 00:49:24.198 align:start position:29% line:-1
一般的な物体の話ではなく

00:49:24.298 --> 00:49:27.801 align:start position:34% line:-2
この胸像の話なので
注意してください

00:49:28.769 --> 00:49:31.305 align:start position:29% line:-1
では どう表示するのか？

00:49:31.572 --> 00:49:35.108 align:start position:29% line:-1
２つのステップがあります

00:49:35.208 --> 00:49:38.178 align:start position:27% line:-1
まず 物体をスキャンします

00:49:39.012 --> 00:49:44.485 align:start position:27% line:-2
デベロッパに関係する
スキャンについて説明します

00:49:44.785 --> 00:49:49.456 align:start position:27% line:-2
基本的には 検出で使用する
物体を作ります

00:49:51.525 --> 00:49:56.330 align:start position:32% line:-2
World Mapと
同様に表示されます

00:49:56.697 --> 00:50:02.302 align:start position:25% line:-2
胸像の3Dフィーチャーの点が
右に表示されています

00:49:56.697 --> 00:50:02.302 align:start position:25% line:-2
胸像の3Dフィーチャーの点が
右に表示されています

00:50:02.970 --> 00:50:07.441 align:start position:34% line:-2
スキャンに使用する
サンプルコードは

00:50:07.608 --> 00:50:10.811 align:start position:27% line:-1
ウェブサイトで入手可能です

00:50:11.678 --> 00:50:16.483 align:start position:29% line:-2
コードを実行して
得られる検出結果の品質は

00:50:16.583 --> 00:50:19.319 align:start position:36% line:-2
スキャンの品質に
左右されます

00:50:19.687 --> 00:50:25.325 align:start position:27% line:-2
では スキャン中に最高の
品質を得る方法を説明します

00:50:27.494 --> 00:50:32.766 align:start position:30% line:-2
サンプルをビルドして
実行したあとの表示です

00:50:33.967 --> 00:50:38.338 align:start position:32% line:-2
まず 物体の周辺に
スペースを見つけます

00:50:38.972 --> 00:50:44.311 align:start position:34% line:-2
フィーチャーから
境界ボックスを予測

00:50:44.812 --> 00:50:47.347 align:start position:29% line:-1
境界ボックスはドラッグで

00:50:47.448 --> 00:50:51.084 align:start position:27% line:-1
縮小 拡大の調整が可能です

00:50:53.053 --> 00:50:57.257 align:start position:27% line:-1
物体の周りを記録する時には

00:50:57.357 --> 00:51:01.428 align:start position:30% line:-2
特徴を見落とさないよう
注意してください

00:50:57.357 --> 00:51:01.428 align:start position:30% line:-2
特徴を見落とさないよう
注意してください

00:51:01.795 --> 00:51:05.532 align:start position:30% line:-2
２本指で物体を
回転することもできます

00:51:05.799 --> 00:51:11.638 align:start position:29% line:-2
境界ボックスが物体全体を
囲むようにしてください

00:51:13.273 --> 00:51:15.542 align:start position:30% line:-1
次は スキャンをします

00:51:17.344 --> 00:51:21.548 align:start position:34% line:-2
スキャンをする時は
物体の周囲を記録し

00:51:21.648 --> 00:51:26.120 align:start position:32% line:-2
物体の全体像を
捉えることが重要です

00:51:27.021 --> 00:51:31.491 align:start position:34% line:-2
どこまで捉えたかを
把握するために

00:51:31.592 --> 00:51:34.695 align:start position:32% line:-1
タイルが表示されます

00:51:34.828 --> 00:51:39.667 align:start position:34% line:-2
タイルの数は
上部に表示されます

00:51:40.334 --> 00:51:44.905 align:start position:30% line:-2
うまく検出できるように
時間をかけて

00:51:45.005 --> 00:51:48.042 align:start position:32% line:-2
物体の特徴を
捉えることが重要です

00:51:48.475 --> 00:51:50.544 align:start position:30% line:-1
近付いて細部を捉えます

00:51:50.644 --> 00:51:54.648 align:start position:30% line:-2
必ず あらゆる方向から
記録してください

00:51:56.350 --> 00:51:57.751 align:start position:36% line:-1
ご覧のとおりです

00:51:59.586 --> 00:52:04.091 align:start position:32% line:-2
物体を十分に捉えたら
次のステップです

00:51:59.586 --> 00:52:04.091 align:start position:32% line:-2
物体を十分に捉えたら
次のステップです

00:52:04.191 --> 00:52:07.394 align:start position:34% line:-1
ドラッグするだけで

00:52:07.561 --> 00:52:10.330 align:start position:29% line:-1
実際の物体に調整できます

00:52:10.497 --> 00:52:16.370 align:start position:30% line:-2
検出する際に使用できる
システムです

00:52:16.470 --> 00:52:21.074 align:start position:30% line:-2
仮想コンテンツとして
使えるように設置します

00:52:24.077 --> 00:52:28.215 align:start position:32% line:-2
ここまでで 物体の
全体像を捉えています

00:52:28.615 --> 00:52:31.151 align:start position:32% line:-1
つまり検出が可能です

00:52:31.652 --> 00:52:35.389 align:start position:38% line:-2
検出モードに
切り替わります

00:52:36.023 --> 00:52:41.395 align:start position:34% line:-2
このモードの使用を
推奨します

00:52:41.829 --> 00:52:46.667 align:start position:39% line:-2
違う視点から
物体を見ても

00:52:46.767 --> 00:52:49.469 align:start position:29% line:-1
物体が検出されていますね

00:52:50.571 --> 00:52:52.473 align:start position:38% line:-1
端末を遠ざけて

00:52:52.840 --> 00:52:55.442 align:start position:38% line:-2
別の角度から
物体を映します

00:52:55.809 --> 00:53:00.280 align:start position:34% line:-2
それでも問題なく
物体が検出できます

00:52:55.809 --> 00:53:00.280 align:start position:34% line:-2
それでも問題なく
物体が検出できます

00:53:01.448 --> 00:53:03.650 align:start position:32% line:-1
物体の周りを移動して

00:53:03.750 --> 00:53:06.186 align:start position:34% line:-2
明るさが
違う状態も試します

00:53:06.787 --> 00:53:12.025 align:start position:30% line:-2
おもちゃなどを
検出する場合に重要です

00:53:12.226 --> 00:53:15.829 align:start position:32% line:-2
どんな風景に重なるか
分からないからです

00:53:17.364 --> 00:53:21.535 align:start position:32% line:-2
違う環境で検出可能か
確認することも

00:53:21.969 --> 00:53:24.872 align:start position:39% line:-1
勧めています

00:53:25.572 --> 00:53:29.677 align:start position:32% line:-2
検出されなかった場合
再度スキャンします

00:53:29.910 --> 00:53:32.946 align:start position:38% line:-2
環境の明るさを
確認しましょう

00:53:34.014 --> 00:53:38.218 align:start position:32% line:-2
十分に明るい場所での
スキャンは重要です

00:53:38.418 --> 00:53:42.389 align:start position:25% line:-1
約500ルクスが最適でしょう

00:53:42.956 --> 00:53:48.328 align:start position:29% line:-2
それでも暗ければ
再度スキャンしてください

00:53:50.531 --> 00:53:55.869 align:start position:29% line:-2
検出の結果に満足できたら
Macにモデルをドロップ

00:53:56.136 --> 00:54:00.808 align:start position:18% line:-2
AR Resource Groupに
追加します

00:53:56.136 --> 00:54:00.808 align:start position:18% line:-2
AR Resource Groupに
追加します

00:54:02.910 --> 00:54:07.414 align:start position:32% line:-2
このシステムで
扱いやすい物の画像を

00:54:07.514 --> 00:54:09.316 align:start position:34% line:-1
左に表示しています

00:54:09.516 --> 00:54:15.022 align:start position:34% line:-2
固い物で質感がよく
特徴的な物質です

00:54:15.355 --> 00:54:18.826 align:start position:32% line:-2
扱いにくい物も
紹介しておきましょう

00:54:18.959 --> 00:54:22.529 align:start position:30% line:-1
例を右側に表示しました

00:54:22.629 --> 00:54:25.933 align:start position:36% line:-2
透明な金属や
光を反射する物は

00:54:26.033 --> 00:54:28.435 align:start position:36% line:-1
うまく扱えません

00:54:29.236 --> 00:54:33.774 align:start position:30% line:-2
ガラスなどの透明な物も
うまく検出できません

00:54:33.874 --> 00:54:37.444 align:start position:32% line:-2
置かれた場所で
外観が変わるためです

00:54:39.780 --> 00:54:41.582 align:start position:32% line:-1
スキャンの説明でした

00:54:41.682 --> 00:54:44.418 align:start position:27% line:-1
十分に明るい環境が必要です

00:54:44.918 --> 00:54:48.455 align:start position:34% line:-2
では 検出の処理を
見てみましょう

00:54:49.923 --> 00:54:55.429 align:start position:27% line:-2
APIが似ているので
親しみやすいかもしれません

00:54:55.529 --> 00:54:59.299 align:start position:32% line:-2
オブジェクトを集める
メソッドがあります

00:54:59.433 --> 00:55:02.236 align:start position:34% line:-2
今回も クラス内に
ありますね

00:54:59.433 --> 00:55:02.236 align:start position:34% line:-2
今回も クラス内に
ありますね

00:55:02.770 --> 00:55:06.840 align:start position:29% line:-2
クラスを確認するためには
オブジェクトを

00:55:06.940 --> 00:55:11.211 align:start position:12% line:-1
detectionObjectsに渡します

00:55:13.146 --> 00:55:17.718 align:start position:30% line:-2
セッションを開始すると
結果が返ってきます

00:55:18.252 --> 00:55:21.989 align:start position:23% line:-2
ARObjectAnchorも
確認します

00:55:22.323 --> 00:55:25.726 align:start position:34% line:-2
物の位置や方向の
情報を保持してます

00:55:26.894 --> 00:55:28.262 align:start position:34% line:-1
現実世界の情報です

00:55:28.662 --> 00:55:32.766 align:start position:32% line:-2
アセットカタログに
物体の名称があります

00:55:35.235 --> 00:55:39.506 align:start position:27% line:-2
物体検出と
World Mapの対応の

00:55:39.973 --> 00:55:43.010 align:start position:29% line:-1
類似性に気付いたでしょう

00:55:43.377 --> 00:55:44.812 align:start position:36% line:-1
相違点もあります

00:55:44.912 --> 00:55:47.214 align:start position:34% line:-1
物体検出の場合には

00:55:47.314 --> 00:55:51.251 align:start position:27% line:-2
物体の位置は
現実世界での位置を表します

00:55:51.418 --> 00:55:54.655 align:start position:27% line:-1
一方 World Mapは

00:55:54.755 --> 00:55:57.124 align:start position:30% line:-1
現在の情報に調整します

00:55:58.225 --> 00:56:01.829 align:start position:32% line:-2
物体検出では
複数の検出が可能です

00:55:58.225 --> 00:56:01.829 align:start position:32% line:-2
物体検出では
複数の検出が可能です

00:56:01.929 --> 00:56:06.767 align:start position:34% line:-2
テーブルの上などで
うまく機能します

00:56:07.067 --> 00:56:10.671 align:start position:32% line:-2
World Mapは
風景で機能します

00:56:12.339 --> 00:56:14.508 align:start position:29% line:-1
物体検出の説明は以上です

00:56:14.608 --> 00:56:16.643 align:start position:30% line:-1
今日の内容をまとめます

00:56:19.446 --> 00:56:23.350 align:start position:30% line:-2
位置特定は
端末の回転だけを追跡し

00:56:23.450 --> 00:56:26.854 align:start position:38% line:-2
静的な環境での
使用が可能です

00:56:27.854 --> 00:56:31.759 align:start position:32% line:-2
方向特定は位置を追跡
フィーチャーし

00:56:31.859 --> 00:56:36.563 align:start position:36% line:-2
元の位置情報を
端末に提供します

00:56:36.964 --> 00:56:40.801 align:start position:36% line:-2
風景全体の理解を
可能にしています

00:56:41.101 --> 00:56:43.737 align:start position:32% line:-1
そして 平面検出です

00:56:44.405 --> 00:56:49.643 align:start position:32% line:-2
垂直で平面な場所との
相互作用を実現し

00:56:49.743 --> 00:56:52.012 align:start position:27% line:-1
仮想コンテンツを付与します

00:56:53.981 --> 00:56:57.551 align:start position:30% line:-2
データの保存やロードで
一貫性のある―

00:56:57.651 --> 00:57:00.988 align:start position:34% line:-2
複数での共有体験を
紹介しました

00:56:57.651 --> 00:57:00.988 align:start position:34% line:-2
複数での共有体験を
紹介しました

00:57:01.455 --> 00:57:03.323 align:start position:30% line:-1
画像検出の話もしました

00:57:03.424 --> 00:57:07.027 align:start position:32% line:-2
毎秒60フレームで
追跡するシステムです

00:57:07.628 --> 00:57:11.665 align:start position:30% line:-2
画像検出で 物の全体を
検出できました

00:57:12.866 --> 00:57:16.870 align:start position:34% line:-2
今日の説明で
ARKitが持つ―

00:57:16.970 --> 00:57:22.443 align:start position:27% line:-2
追跡技術に関する 皆さんの
理解が深まればうれしいです

00:57:23.010 --> 00:57:26.313 align:start position:27% line:-1
品質についても話しましたね

00:57:26.413 --> 00:57:29.950 align:start position:34% line:-2
ぜひ ARKitを
活用してください

00:57:30.884 --> 00:57:34.755 align:start position:18% line:-2
詳しい情報は
デベロッパWebサイトをご覧ください

00:57:34.855 --> 00:57:37.925 align:start position:27% line:-1
ARKitのラボは明日です

00:57:38.292 --> 00:57:43.030 align:start position:29% line:-2
ARKitに関する質問に
お答えします

00:57:43.730 --> 00:57:47.434 align:start position:30% line:-1
ありがとうございました

00:57:47.668 --> 00:57:51.071 align:start position:43% line:-1
(拍手)
