WEBVTT

00:00:07.508 --> 00:00:15.582 align:start position:43% line:-1
(音楽)

00:00:19.520 --> 00:00:25.559 align:start position:43% line:-1
(拍手)

00:00:25.659 --> 00:00:26.960 align:start position:41% line:-1
こんにちは

00:00:27.060 --> 00:00:29.062 align:start position:25% line:-1
私の名前はケン･フェリーです

00:00:29.463 --> 00:00:33.100 align:start position:21% line:-2
本日はAuto Layoutの
パフォーマンスについて説明します

00:00:33.534 --> 00:00:37.804 align:start position:14% line:-2
私が前回 Auto Layoutについて
お話ししたのは2011年でした

00:00:37.938 --> 00:00:39.640 align:start position:32% line:-1
初めて紹介した時です

00:00:39.740 --> 00:00:44.011 align:start position:21% line:-1
また皆さんにお会いできて光栄です

00:00:44.845 --> 00:00:47.314 align:start position:38% line:-1
では 始めます

00:00:48.248 --> 00:00:49.249 align:start position:23% line:-1
“Auto Layout”は―

00:00:49.683 --> 00:00:53.287 align:start position:25% line:-2
MacでiOSの
コンテンツを的確に配置します

00:00:53.387 --> 00:00:57.758 align:start position:27% line:-2
ここで重要な要素となるのが
“ビュー”と“制約”です

00:00:58.125 --> 00:01:00.827 align:start position:36% line:-2
制約がビューに
条件付けをします

00:00:58.125 --> 00:01:00.827 align:start position:36% line:-2
制約がビューに
条件付けをします

00:01:01.061 --> 00:01:05.999 align:start position:29% line:-2
コンテンツ配置を行う際
次のような課題があります

00:01:06.099 --> 00:01:08.702 align:start position:30% line:-2
“２つのボタンの間隔を
20ポイントにしたい”

00:01:08.802 --> 00:01:10.404 align:start position:30% line:-1
“でも そのための―”

00:01:10.504 --> 00:01:14.107 align:start position:23% line:-1
“実行プロセスが分かりづらい”

00:01:14.208 --> 00:01:18.378 align:start position:25% line:-2
これでは アプリケーションの
パフォーマンスや

00:01:18.478 --> 00:01:22.382 align:start position:23% line:-1
速度や動作状況も把握できません

00:01:22.983 --> 00:01:25.252 align:start position:27% line:-1
そこで このセッションでは

00:01:25.352 --> 00:01:29.957 align:start position:27% line:-2
コンテンツ配置のプロセスを
明確にします

00:01:30.357 --> 00:01:31.558 align:start position:39% line:-1
では まず―

00:01:31.658 --> 00:01:36.230 align:start position:23% line:-2
iOS 12のリリースにおける
改善点をご紹介します

00:01:36.330 --> 00:01:39.433 align:start position:25% line:-1
とても多くの改良を加えました

00:01:41.134 --> 00:01:43.504 align:start position:34% line:-1
それが終わったら―

00:01:43.604 --> 00:01:48.442 align:start position:29% line:-2
理解を深めるために
１つ１つ詳しく説明します

00:01:48.542 --> 00:01:52.246 align:start position:30% line:-2
パフォーマンスを上げる
直感力が身に着きます

00:01:52.346 --> 00:01:55.315 align:start position:30% line:-1
今日は特別な試みとして

00:01:55.682 --> 00:01:57.518 align:start position:25% line:-1
iOS内部の動作を説明します

00:01:57.618 --> 00:01:59.086 align:start position:36% line:-1
楽しんでください

00:02:02.456 --> 00:02:06.360 align:start position:23% line:-1
一方で直感に頼っているだけでは

00:02:06.460 --> 00:02:08.262 align:start position:25% line:-1
パフォーマンスは向上しません

00:02:08.362 --> 00:02:13.066 align:start position:29% line:-2
そこで カシアが説明する
コード解析により―

00:02:13.167 --> 00:02:18.005 align:start position:25% line:-2
皆さんの“直感”と“実践”を
結び付けていきます

00:02:18.872 --> 00:02:20.340 align:start position:34% line:-1
では 始めましょう

00:02:20.440 --> 00:02:25.045 align:start position:30% line:-2
まず Apple伝統の
多くのデータと自慢です

00:02:25.512 --> 00:02:29.116 align:start position:41% line:-1
(笑い声)

00:02:29.216 --> 00:02:33.220 align:start position:23% line:-1
今見ているのはベンチマークです

00:02:33.320 --> 00:02:36.924 align:start position:34% line:-2
これを行う上で
第三者のものも含め

00:02:37.024 --> 00:02:39.927 align:start position:27% line:-2
数多くのアプリケーションを
検証しました

00:02:40.027 --> 00:02:43.597 align:start position:30% line:-2
テストケースごとに
発生した問題を切り分け

00:02:43.697 --> 00:02:45.799 align:start position:30% line:-1
測定したものになります

00:02:45.899 --> 00:02:50.337 align:start position:18% line:-2
これは セルフサイジングセルの
UICollectionViewです

00:02:50.437 --> 00:02:54.808 align:start position:32% line:-2
左右で動きが悪い方が
iOS 11です

00:02:57.144 --> 00:03:00.113 align:start position:30% line:-1
違いがお分かりですよね

00:02:57.144 --> 00:03:00.113 align:start position:30% line:-1
違いがお分かりですよね

00:03:00.214 --> 00:03:03.083 align:start position:23% line:-1
一方 iOS 12は完ぺきです

00:03:03.183 --> 00:03:04.484 align:start position:25% line:-1
フルフレームレートの動きです

00:03:05.052 --> 00:03:07.754 align:start position:25% line:-1
これがテストケースの１つです

00:03:07.855 --> 00:03:11.959 align:start position:32% line:-2
他にもいくつか事例を
お見せします

00:03:12.059 --> 00:03:14.561 align:start position:21% line:-1
これらはすべて時間を表しています

00:03:14.661 --> 00:03:18.165 align:start position:23% line:-1
灰色のグラフがiOS 11です

00:03:18.265 --> 00:03:19.867 align:start position:27% line:-1
多くの時間がかかっています

00:03:19.967 --> 00:03:21.869 align:start position:30% line:-1
水色がiOS 12です

00:03:22.936 --> 00:03:27.774 align:start position:27% line:-2
以上からも 多くの改良点を
理解いただけるでしょう

00:03:28.008 --> 00:03:31.578 align:start position:27% line:-2
皆さんのアプリケーションも
同様です

00:03:31.678 --> 00:03:33.981 align:start position:32% line:-1
大幅な改善が可能です

00:03:35.249 --> 00:03:37.551 align:start position:30% line:-2
スタックに
さまざまな手を加えます

00:03:37.651 --> 00:03:41.989 align:start position:27% line:-2
一部は アプリケーションの
心臓部に及びます

00:03:42.089 --> 00:03:45.926 align:start position:23% line:-2
また UIKitや
クライアントレイヤにも及びます

00:03:46.026 --> 00:03:48.529 align:start position:18% line:-1
Auto Layoutの活用次第です

00:03:48.629 --> 00:03:51.498 align:start position:11% line:-1
UICollectionViewで見た例では

00:03:51.598 --> 00:03:53.834 align:start position:29% line:-1
あらゆる点を改良しました

00:03:53.934 --> 00:03:56.537 align:start position:29% line:-1
アプリケーションの心臓部

00:03:56.637 --> 00:04:02.543 align:start position:16% line:-2
さらに Auto Layoutを使った
多くの変更により―

00:03:56.637 --> 00:04:02.543 align:start position:16% line:-2
さらに Auto Layoutを使った
多くの変更により―

00:04:02.643 --> 00:04:05.179 align:start position:21% line:-1
高いパフォーマンスを実現しました

00:04:05.279 --> 00:04:08.148 align:start position:34% line:-1
これからの時間で―

00:04:08.248 --> 00:04:12.219 align:start position:29% line:-2
Auto Layoutの
適切な使い方を説明します

00:04:13.120 --> 00:04:14.555 align:start position:41% line:-1
私たちが―

00:04:14.955 --> 00:04:18.926 align:start position:21% line:-1
これら多くの改善を実現できた理由

00:04:19.026 --> 00:04:23.564 align:start position:27% line:-2
それは 物事をどう統合して
機能させるかという―

00:04:23.697 --> 00:04:26.567 align:start position:23% line:-1
メンタルモデルがあったからです

00:04:27.301 --> 00:04:30.103 align:start position:25% line:-1
皆さんもモデルを作りましょう

00:04:30.237 --> 00:04:31.305 align:start position:41% line:-1
そのために

00:04:31.405 --> 00:04:34.908 align:start position:32% line:-2
クライアントコードを
見ていきます

00:04:35.008 --> 00:04:38.946 align:start position:21% line:-1
同時にその問題点も明らかにします

00:04:39.179 --> 00:04:42.549 align:start position:29% line:-2
多くのアプリケーションを
見てきた中で

00:04:42.649 --> 00:04:47.788 align:start position:27% line:-2
最もよく起こるだろう問題を
取り上げます

00:04:47.888 --> 00:04:52.626 align:start position:27% line:-2
同じ問題を抱えていない方も
ぜひご覧ください

00:04:52.726 --> 00:04:56.363 align:start position:25% line:-1
新しい知識が得られるはずです

00:04:56.930 --> 00:04:58.765 align:start position:38% line:-1
では 始めます

00:04:59.700 --> 00:05:03.136 align:start position:29% line:-1
このレイアウトを作ります

00:04:59.700 --> 00:05:03.136 align:start position:29% line:-1
このレイアウトを作ります

00:05:03.537 --> 00:05:04.905 align:start position:34% line:-1
とてもシンプルです

00:05:05.005 --> 00:05:08.442 align:start position:11% line:-2
皆さん Interface Builderで
作るでしょう

00:05:08.709 --> 00:05:11.345 align:start position:34% line:-1
賢明なアイデアです

00:05:11.445 --> 00:05:14.781 align:start position:21% line:-1
これから起こる問題を回避できます

00:05:15.849 --> 00:05:17.651 align:start position:41% line:-1
(笑い声)

00:05:17.751 --> 00:05:21.221 align:start position:23% line:-1
でも ここではコードを使います

00:05:23.357 --> 00:05:28.061 align:start position:29% line:-2
解析する前に
コードの意味を説明します

00:05:28.795 --> 00:05:30.464 align:start position:30% line:-1
まず UIViewの―

00:05:30.564 --> 00:05:33.534 align:start position:14% line:-2
“updateConstraints”を
オーバーライドしています

00:05:33.800 --> 00:05:36.603 align:start position:27% line:-1
詳しくは 後ほど説明します

00:05:37.771 --> 00:05:42.643 align:start position:14% line:-2
次に“myConstraints”という
インスタンス変数があります

00:05:42.743 --> 00:05:48.015 align:start position:27% line:-2
その変数で
すべての制約を無効にします

00:05:48.482 --> 00:05:52.753 align:start position:30% line:-2
それから制約を作成し
レイアウトを実装します

00:05:52.920 --> 00:05:55.856 align:start position:4% line:-2
Visual Format Languageを使った
単純なものです

00:05:56.156 --> 00:05:59.026 align:start position:30% line:-2
これらの制約を有効にし
インストールして

00:05:59.126 --> 00:06:03.463 align:start position:4% line:-2
“super.updateConstraints”を
忘れずに呼び出します

00:05:59.126 --> 00:06:03.463 align:start position:4% line:-2
“super.updateConstraints”を
忘れずに呼び出します

00:06:03.564 --> 00:06:07.968 align:start position:18% line:-2
なぜならこれで
UIViewの実装が完了するからです

00:06:09.069 --> 00:06:12.673 align:start position:30% line:-1
以上が基本的な構造です

00:06:12.773 --> 00:06:15.642 align:start position:25% line:-1
もちろん実際に機能しています

00:06:15.876 --> 00:06:17.711 align:start position:32% line:-1
ここからは具体的に―

00:06:17.811 --> 00:06:21.548 align:start position:32% line:-2
パフォーマンスを
理解していきましょう

00:06:21.915 --> 00:06:24.785 align:start position:23% line:-1
今 オーバーライドしていたのが

00:06:24.885 --> 00:06:27.287 align:start position:11% line:-2
“updateConstraints”という
メソッドです

00:06:28.555 --> 00:06:30.991 align:start position:21% line:-2
これは Render Loopの
コンポーネントの１つです

00:06:31.525 --> 00:06:36.830 align:start position:11% line:-2
Render Loopとは 毎秒120回走る
潜在力のあるプロセスで

00:06:37.130 --> 00:06:40.968 align:start position:29% line:-2
コンテンツを各フレームに
確実に表示させます

00:06:41.535 --> 00:06:44.071 align:start position:36% line:-2
３つのフェーズで
構成されています

00:06:44.171 --> 00:06:46.740 align:start position:16% line:-2
updateConstraints
Layout Displayの３つです

00:06:47.074 --> 00:06:48.475 align:start position:36% line:-1
すべてのビューは

00:06:48.575 --> 00:06:51.245 align:start position:14% line:-2
“updateConstraints”を
受け取ります

00:06:51.545 --> 00:06:56.150 align:start position:27% line:-2
そしてウィンドウに向かって
ビュー階層を上っていきます

00:06:56.550 --> 00:06:59.152 align:start position:25% line:-2
次にレイアウトのサブビューを
受け取ります

00:06:59.253 --> 00:07:02.923 align:start position:30% line:-2
これはウィンドウから
下へと逆方向に動きます

00:06:59.253 --> 00:07:02.923 align:start position:30% line:-2
これはウィンドウから
下へと逆方向に動きます

00:07:03.056 --> 00:07:07.461 align:start position:34% line:-2
最後に必要ならば
表示を受け取ります

00:07:08.562 --> 00:07:12.599 align:start position:27% line:-2
さて これらは
何のためにあるのでしょう？

00:07:13.267 --> 00:07:15.669 align:start position:27% line:-1
これらは同じ目的を持った―

00:07:15.769 --> 00:07:18.539 align:start position:32% line:-2
パラレル処理される
メソッドのセットです

00:07:18.639 --> 00:07:21.942 align:start position:23% line:-2
その目的とは
“ムダな仕事を避ける”ことです

00:07:22.576 --> 00:07:24.344 align:start position:32% line:-1
例を使って説明します

00:07:24.745 --> 00:07:26.780 align:start position:36% line:-1
まず ラベルです

00:07:26.880 --> 00:07:30.484 align:start position:27% line:-2
UILabelは
テキストサイズを定義した―

00:07:30.584 --> 00:07:33.820 align:start position:29% line:-1
制約を持つ必要があります

00:07:33.921 --> 00:07:36.223 align:start position:29% line:-2
それに関するプロパティが
数多くあります

00:07:36.323 --> 00:07:38.125 align:start position:34% line:-1
テキストプロパティ

00:07:38.258 --> 00:07:39.426 align:start position:43% line:-1
フォント

00:07:39.526 --> 00:07:41.728 align:start position:34% line:-1
テキストサイズなど

00:07:42.896 --> 00:07:45.332 align:start position:29% line:-1
プロパティを変更する度に

00:07:45.432 --> 00:07:48.001 align:start position:29% line:-2
テキストを
再測定する方法があります

00:07:48.468 --> 00:07:51.538 align:start position:29% line:-2
しかし
連続して変更する場合には

00:07:51.638 --> 00:07:54.007 align:start position:36% line:-1
かなり非効率です

00:07:54.107 --> 00:07:55.442 align:start position:36% line:-1
ラベル設定時に―

00:07:55.542 --> 00:07:57.811 align:start position:32% line:-2
プロパティセッターを
呼び出すでしょう

00:07:57.911 --> 00:08:00.214 align:start position:32% line:-2
そこで １つずつ
再測定するとしたら？

00:07:57.911 --> 00:08:00.214 align:start position:32% line:-2
そこで １つずつ
再測定するとしたら？

00:08:00.414 --> 00:08:03.650 align:start position:32% line:-2
それまでの作業が
すべてムダになります

00:08:03.750 --> 00:08:05.652 align:start position:14% line:-1
そこで Render Loopを使います

00:08:05.819 --> 00:08:09.756 align:start position:32% line:-2
そうすれば
セットフォントの中で

00:08:09.857 --> 00:08:12.926 align:start position:0% line:-2
“setNeedsUpdateConstraints”を
呼び出すだけです

00:08:13.260 --> 00:08:16.463 align:start position:32% line:-2
それで フレームが
画面に表示される前に

00:08:16.563 --> 00:08:19.132 align:start position:29% line:-1
制約が確実に更新されます

00:08:19.733 --> 00:08:20.901 align:start position:38% line:-1
それが狙いです

00:08:21.368 --> 00:08:25.005 align:start position:25% line:-1
先に進む前におさらいをします

00:08:25.105 --> 00:08:27.975 align:start position:21% line:-2
まず
“毎秒120フレームの高速動作”

00:08:28.308 --> 00:08:30.544 align:start position:32% line:-1
次に“パラレル処理”

00:08:30.644 --> 00:08:32.546 align:start position:38% line:-1
直感で使えます

00:08:32.645 --> 00:08:35.948 align:start position:30% line:-2
もし レイアウトパスが
理解できているなら―

00:08:36.116 --> 00:08:39.586 align:start position:14% line:-2
“updateConstraints”も
同じように使えます

00:08:40.053 --> 00:08:45.459 align:start position:27% line:-2
最後が すべての目的である
“ムダな作業の回避”

00:08:45.726 --> 00:08:48.395 align:start position:29% line:-1
作業を延期か省略できます

00:08:49.363 --> 00:08:50.030 align:start position:41% line:-1
いいですね

00:08:51.064 --> 00:08:56.503 align:start position:25% line:-2
では 今から
このメソッドの解析に入ります

00:08:56.803 --> 00:08:58.872 align:start position:36% line:-1
毎回 私たちは―

00:08:58.972 --> 00:09:04.311 align:start position:25% line:-2
制約を無効にしてから
新しい設定を再度有効にします

00:08:58.972 --> 00:09:04.311 align:start position:25% line:-2
制約を無効にしてから
新しい設定を再度有効にします

00:09:05.345 --> 00:09:07.548 align:start position:16% line:-2
これは layoutSubviewsと
似ています

00:09:07.648 --> 00:09:12.753 align:start position:12% line:-2
そこで まったく同じコードを
layoutSubviewsで書くとします

00:09:12.853 --> 00:09:19.326 align:start position:9% line:-2
それは毎回 layoutSubviewsを呼び
サブビューを壊し―

00:09:19.660 --> 00:09:22.629 align:start position:23% line:-2
作り直して再度追加しているのと
同じです

00:09:23.330 --> 00:09:27.301 align:start position:34% line:-2
皆さんの多くが
こう感じるでしょう

00:09:27.401 --> 00:09:29.136 align:start position:27% line:-1
“よい性能は期待できない”

00:09:30.671 --> 00:09:33.407 align:start position:38% line:-1
そのとおりです

00:09:33.507 --> 00:09:37.911 align:start position:7% line:-2
それは“updateConstraints”にも
当てはまります

00:09:38.011 --> 00:09:41.348 align:start position:23% line:-1
制約を外したら作業が増えました

00:09:42.349 --> 00:09:43.617 align:start position:34% line:-1
どう修正しますか？

00:09:43.750 --> 00:09:46.353 align:start position:34% line:-1
先ほど言ったように

00:09:46.453 --> 00:09:50.924 align:start position:23% line:-2
同じことを２度やらないためには
作業の延期です

00:09:51.391 --> 00:09:55.329 align:start position:30% line:-2
その作業を
すでに行っているなら―

00:09:55.529 --> 00:09:58.098 align:start position:30% line:-1
もう何もしないことです

00:09:58.198 --> 00:10:01.335 align:start position:29% line:-2
まだなら
その制約を１度設定します

00:09:58.198 --> 00:10:01.335 align:start position:29% line:-2
まだなら
その制約を１度設定します

00:10:01.668 --> 00:10:03.971 align:start position:30% line:-1
これでうまく機能します

00:10:04.071 --> 00:10:05.539 align:start position:36% line:-1
繰り返しますが―

00:10:05.639 --> 00:10:09.643 align:start position:21% line:-2
これがクライアントコードにおける
一番の問題です

00:10:09.743 --> 00:10:12.346 align:start position:29% line:-2
不必要に
制約を外したり戻すことを

00:10:12.746 --> 00:10:15.048 align:start position:30% line:-1
“衝突”と呼んでいます

00:10:16.049 --> 00:10:17.618 align:start position:41% line:-1
いいですね

00:10:18.018 --> 00:10:19.786 align:start position:38% line:-1
先に進む前に―

00:10:19.887 --> 00:10:23.290 align:start position:23% line:-2
Render Loopについて
もう少し話します

00:10:24.525 --> 00:10:27.728 align:start position:27% line:-1
不必要な作業を避けたい時に

00:10:27.828 --> 00:10:31.465 align:start position:18% line:-1
Render Loopは大変便利です

00:10:32.032 --> 00:10:33.467 align:start position:32% line:-1
一方 危険もあります

00:10:33.567 --> 00:10:37.371 align:start position:32% line:-2
頻繁に走っているので
注意が必要です

00:10:38.305 --> 00:10:42.276 align:start position:27% line:-1
このようなコードを書く時は

00:10:42.409 --> 00:10:44.511 align:start position:32% line:-1
慎重さが求められます

00:10:44.611 --> 00:10:47.614 align:start position:23% line:-1
また 回数を最小限にすべきです

00:10:47.714 --> 00:10:50.984 align:start position:27% line:-1
失敗するのが明らかですから

00:10:53.253 --> 00:10:56.690 align:start position:27% line:-1
次のように考えてみましょう

00:10:56.790 --> 00:10:58.358 align:start position:30% line:-1
“一度でできないか？”

00:10:58.458 --> 00:11:01.128 align:start position:16% line:-2
“updateConstraintsに
置かない方法はないか？”

00:10:58.458 --> 00:11:01.128 align:start position:16% line:-2
“updateConstraintsに
置かない方法はないか？”

00:11:01.228 --> 00:11:02.162 align:start position:39% line:-1
そんな時は―

00:11:02.262 --> 00:11:06.833 align:start position:11% line:-2
Interface Builderを使うのが
一番です

00:11:07.401 --> 00:11:10.137 align:start position:27% line:-1
あらゆる作業が楽になります

00:11:11.438 --> 00:11:13.307 align:start position:34% line:-1
さて いいでしょう

00:11:13.407 --> 00:11:17.911 align:start position:29% line:-2
これでよく起こる問題点が
理解できましたね

00:11:18.011 --> 00:11:20.581 align:start position:25% line:-1
似たケースでも参考になります

00:11:21.215 --> 00:11:23.650 align:start position:30% line:-1
でも目的は別にあります

00:11:23.750 --> 00:11:26.320 align:start position:29% line:-1
“これが悪い”ではなく―

00:11:26.420 --> 00:11:30.090 align:start position:23% line:-1
そのプロセスを理解したいのです

00:11:30.290 --> 00:11:34.061 align:start position:23% line:-1
そこで 覆いをすべて取り去り―

00:11:34.161 --> 00:11:37.331 align:start position:27% line:-1
何が起きているのかを見ます

00:11:38.866 --> 00:11:44.037 align:start position:29% line:-2
“制約を有効にする時”と
“制約を追加する時”

00:11:44.438 --> 00:11:46.006 align:start position:25% line:-1
それぞれ何が起きるでしょう？

00:11:46.807 --> 00:11:48.408 align:start position:30% line:-1
ハイレベルの図にします

00:11:48.509 --> 00:11:52.312 align:start position:25% line:-1
これが制約を加えたビューです

00:11:53.080 --> 00:11:54.481 align:start position:29% line:-1
ウィンドウの中にあります

00:11:55.616 --> 00:11:58.485 align:start position:32% line:-2
そこからつり下がる
内部オブジェクトは―

00:11:58.652 --> 00:12:00.454 align:start position:29% line:-1
“エンジン”と呼ばれます

00:11:58.652 --> 00:12:00.454 align:start position:29% line:-1
“エンジン”と呼ばれます

00:12:00.821 --> 00:12:03.624 align:start position:12% line:-1
これが Auto Layoutの心臓部です

00:12:04.892 --> 00:12:07.628 align:start position:32% line:-1
制約が加えられると―

00:12:07.728 --> 00:12:10.898 align:start position:36% line:-1
等式が作られます

00:12:10.998 --> 00:12:12.833 align:start position:27% line:-1
それは制約に対応するもので

00:12:12.933 --> 00:12:15.536 align:start position:30% line:-1
エンジンに加えられます

00:12:16.737 --> 00:12:18.872 align:start position:34% line:-1
最後のポイントは―

00:12:18.972 --> 00:12:22.442 align:start position:25% line:-1
この等式が変数に関わる点です

00:12:22.709 --> 00:12:27.247 align:start position:29% line:-2
等式を用いて
“X”の値を求める場合―

00:12:27.381 --> 00:12:28.649 align:start position:30% line:-1
“X”が変数になります

00:12:29.283 --> 00:12:32.186 align:start position:25% line:-1
この場合 私たちが求めるのは

00:12:32.286 --> 00:12:34.955 align:start position:27% line:-1
ビューのフレームデータです

00:12:35.055 --> 00:12:37.157 align:start position:34% line:-1
変数は次の４つです

00:12:37.257 --> 00:12:39.893 align:start position:25% line:-1
minX minY 幅 高さ

00:12:41.028 --> 00:12:41.762 align:start position:41% line:-1
いいですね

00:12:42.129 --> 00:12:44.064 align:start position:34% line:-1
では 進めましょう

00:12:44.164 --> 00:12:45.732 align:start position:29% line:-1
このレイアウトを作ります

00:12:45.833 --> 00:12:48.836 align:start position:23% line:-1
横方向の制約に焦点を当てますが

00:12:48.936 --> 00:12:50.771 align:start position:27% line:-1
すべてに共通のプロセスです

00:12:51.271 --> 00:12:55.843 align:start position:29% line:-2
まず最初に
このような等式ができます

00:12:57.044 --> 00:12:58.479 align:start position:34% line:-1
とてもシンプルです

00:12:58.579 --> 00:13:02.816 align:start position:25% line:-2
一番興味深いのは
テキストフィールドの間隔です

00:12:58.579 --> 00:13:02.816 align:start position:25% line:-2
一番興味深いのは
テキストフィールドの間隔です

00:13:03.016 --> 00:13:08.222 align:start position:27% line:-2
２つの間隔は 制約の定義と
とても似ています

00:13:08.322 --> 00:13:12.025 align:start position:30% line:-2
でも 変数なので
制約よりローレベルです

00:13:13.293 --> 00:13:14.895 align:start position:39% line:-1
次に進みます

00:13:15.329 --> 00:13:18.699 align:start position:30% line:-2
それぞれの等式が
エンジンに加えられます

00:13:19.500 --> 00:13:22.069 align:start position:29% line:-1
プロセスに沿って進みます

00:13:22.169 --> 00:13:25.506 align:start position:27% line:-2
目的はもちろん
パフォーマンス向上ですが―

00:13:26.206 --> 00:13:29.243 align:start position:27% line:-1
それで何が起こるでしょうか

00:13:29.743 --> 00:13:32.813 align:start position:27% line:-2
エンジンは これらの変数を
解こうとしています

00:13:33.180 --> 00:13:36.483 align:start position:30% line:-1
代数でやっていたことと

00:13:36.583 --> 00:13:38.385 align:start position:39% line:-1
ほぼ同じです

00:13:38.619 --> 00:13:40.287 align:start position:34% line:-1
それに従いましょう

00:13:40.387 --> 00:13:45.025 align:start position:14% line:-2
最初のフィールドを
“text１.minX = ８”とします

00:13:45.993 --> 00:13:48.195 align:start position:12% line:-1
幅は“text１.width = 100”

00:13:48.362 --> 00:13:50.364 align:start position:34% line:-1
次のフィールドです

00:13:50.497 --> 00:13:54.902 align:start position:0% line:-2
“text２.minX =
text１.minX + text１.width + 20”

00:13:55.035 --> 00:14:00.073 align:start position:30% line:-2
これらの変数を
代数でどう解きますか？

00:13:55.035 --> 00:14:00.073 align:start position:30% line:-2
これらの変数を
代数でどう解きますか？

00:14:00.841 --> 00:14:03.977 align:start position:23% line:-1
すでにある値を代入するでしょう

00:14:04.077 --> 00:14:05.913 align:start position:38% line:-1
そのとおりです

00:14:06.547 --> 00:14:10.984 align:start position:21% line:-2
分析すると
エンジンのメソッドが見えてきます

00:14:11.084 --> 00:14:14.621 align:start position:34% line:-2
文字列置換と
長いメソッド名です

00:14:14.721 --> 00:14:15.923 align:start position:36% line:-1
Cocoaなので

00:14:16.456 --> 00:14:17.958 align:start position:41% line:-1
(笑い声)

00:14:18.325 --> 00:14:21.395 align:start position:29% line:-1
つまり そういうことです

00:14:22.162 --> 00:14:24.765 align:start position:32% line:-1
最後の等式が来ました

00:14:24.865 --> 00:14:26.900 align:start position:38% line:-1
これで完了です

00:14:27.000 --> 00:14:30.437 align:start position:27% line:-2
少なくとも
このケースで発生した作業は

00:14:30.537 --> 00:14:33.140 align:start position:34% line:-1
変数を解くことです

00:14:33.373 --> 00:14:37.978 align:start position:30% line:-2
これが 現段階で
理解してほしいことです

00:14:38.078 --> 00:14:40.814 align:start position:27% line:-1
あまり複雑なことではなく―

00:14:40.914 --> 00:14:45.185 align:start position:32% line:-2
手作業でやるのと
ほぼ同じプロセスです

00:14:46.487 --> 00:14:48.055 align:start position:34% line:-1
工数もかかりません

00:14:48.155 --> 00:14:51.925 align:start position:21% line:-1
いわゆる“代入計算”にすぎません

00:14:52.526 --> 00:14:58.198 align:start position:25% line:-2
さて 変数を求めましたが
レイアウトは完成していません

00:14:58.298 --> 00:15:01.068 align:start position:27% line:-1
プロセスを完了させましょう

00:14:58.298 --> 00:15:01.068 align:start position:27% line:-1
プロセスを完了させましょう

00:15:01.902 --> 00:15:07.474 align:start position:27% line:-2
次に エンジンが
これらの変数に値を与えます

00:15:07.574 --> 00:15:12.346 align:start position:25% line:-2
そして ビューに
変更された変数が伝えられます

00:15:13.480 --> 00:15:15.449 align:start position:34% line:-1
どう返すでしょう？

00:15:16.450 --> 00:15:20.587 align:start position:16% line:-2
少し考えて Superviewを呼んで
こう言います

00:15:20.687 --> 00:15:22.022 align:start position:21% line:-1
“setNeedsLayout”

00:15:22.189 --> 00:15:24.091 align:start position:30% line:-1
動く必要があるからです

00:15:25.159 --> 00:15:30.664 align:start position:11% line:-2
これが updateConstraintsで
起こることです

00:15:31.031 --> 00:15:35.936 align:start position:12% line:-2
“setNeedsLayout”を受け取り
Layoutに移ります

00:15:36.603 --> 00:15:38.639 align:start position:34% line:-1
では 次に行きます

00:15:38.739 --> 00:15:43.310 align:start position:9% line:-2
最後に UIViewが
“layoutSubviews”を受け取ります

00:15:43.610 --> 00:15:45.779 align:start position:9% line:-1
UIViewのlayoutSubviewsは―

00:15:45.879 --> 00:15:49.483 align:start position:30% line:-2
データをエンジンから
フレームにコピーします

00:15:50.250 --> 00:15:54.221 align:start position:27% line:-2
エンジンに
“変数の値は？”と聞きます

00:15:54.321 --> 00:15:58.358 align:start position:29% line:-2
エンジンは それに答えて
Superviewから―

00:15:58.458 --> 00:16:02.396 align:start position:7% line:-2
“setBounds”と“setCenter”を
呼びます

00:15:58.458 --> 00:16:02.396 align:start position:7% line:-2
“setBounds”と“setCenter”を
呼びます

00:16:03.197 --> 00:16:04.965 align:start position:38% line:-1
これで完了です

00:16:05.999 --> 00:16:08.235 align:start position:36% line:-1
少し戻りましょう

00:16:08.335 --> 00:16:11.104 align:start position:23% line:-1
これがレイアウトのプロセスです

00:16:11.205 --> 00:16:13.974 align:start position:29% line:-1
この概念を習得できれば―

00:16:14.074 --> 00:16:19.780 align:start position:29% line:-2
パフォーマンスへの理解が
ずっと高まっていきます

00:16:20.380 --> 00:16:22.683 align:start position:32% line:-1
実際に見てみましょう

00:16:22.783 --> 00:16:27.421 align:start position:27% line:-2
これは 先ほど
私たちが見てきたメソッドで

00:16:27.521 --> 00:16:30.891 align:start position:32% line:-2
制約を無効にしてから
再び有効にしています

00:16:30.991 --> 00:16:34.495 align:start position:29% line:-2
ここで エンジンが
何をしているか見ましょう

00:16:35.562 --> 00:16:36.997 align:start position:43% line:-1
これです

00:16:40.367 --> 00:16:42.402 align:start position:36% line:-1
再び“衝突”です

00:16:42.503 --> 00:16:46.540 align:start position:29% line:-2
複雑なオペレーションでは
ありません

00:16:46.640 --> 00:16:48.408 align:start position:38% line:-1
ただし大量です

00:16:48.742 --> 00:16:52.446 align:start position:23% line:-1
必要のないムダな作業と言えます

00:16:52.613 --> 00:16:57.851 align:start position:30% line:-2
こういったことが
感覚として理解できれば

00:16:57.951 --> 00:17:00.154 align:start position:34% line:-1
失敗を避けられます

00:16:57.951 --> 00:17:00.154 align:start position:34% line:-1
失敗を避けられます

00:17:00.254 --> 00:17:03.790 align:start position:34% line:-2
私たちと同じような
パフォーマンスを

00:17:03.891 --> 00:17:05.826 align:start position:34% line:-1
皆さんも得られます

00:17:06.593 --> 00:17:09.229 align:start position:36% line:-1
さあ いいですね

00:17:11.598 --> 00:17:15.102 align:start position:21% line:-1
もう１つ重要なトピックがあります

00:17:15.202 --> 00:17:17.204 align:start position:23% line:-1
高いパフォーマンスを求めるなら

00:17:17.304 --> 00:17:21.942 align:start position:16% line:-2
必要な時だけ
Auto Layoutを使ってください

00:17:22.041 --> 00:17:26.079 align:start position:32% line:-2
どういうことか
次の事例で説明します

00:17:26.180 --> 00:17:29.349 align:start position:30% line:-1
今回は 前より複雑で―

00:17:29.449 --> 00:17:33.487 align:start position:27% line:-2
２つの階層の中に
４つのフィールドがあります

00:17:34.388 --> 00:17:39.793 align:start position:25% line:-2
この場合
階層を横断する制約を作ります

00:17:39.993 --> 00:17:41.862 align:start position:43% line:-1
こうです

00:17:42.062 --> 00:17:46.934 align:start position:18% line:-2
同じSuperviewを持ちませんが
text１とtext３をそろえます

00:17:48.068 --> 00:17:53.373 align:start position:21% line:-1
こんな心配をする方もいるでしょう

00:17:53.474 --> 00:17:56.877 align:start position:25% line:-2
“スピードが
かなり遅くなるのではないか”

00:17:56.977 --> 00:17:59.546 align:start position:27% line:-1
“常に何かが影響し合い―”

00:17:59.646 --> 00:18:03.717 align:start position:27% line:-2
“大きな泥のボールみたいで
パフォーマンスは最低だ”

00:17:59.646 --> 00:18:03.717 align:start position:27% line:-2
“大きな泥のボールみたいで
パフォーマンスは最低だ”

00:18:04.985 --> 00:18:10.490 align:start position:29% line:-2
では 一般的なケースで
何が起こるのか見ましょう

00:18:10.591 --> 00:18:12.392 align:start position:38% line:-1
これは貴重です

00:18:12.493 --> 00:18:15.262 align:start position:27% line:-1
ビューは ほとんどの時間―

00:18:15.362 --> 00:18:19.500 align:start position:32% line:-2
親や兄弟の制約だけを
受けるからです

00:18:19.600 --> 00:18:24.905 align:start position:30% line:-2
ここに ２つの独立した
ブロックがあります

00:18:25.105 --> 00:18:29.776 align:start position:25% line:-2
エンジンの中には
２つの代数のブロックがあり―

00:18:29.877 --> 00:18:33.981 align:start position:21% line:-1
それぞれの干渉や重複はありません

00:18:35.249 --> 00:18:39.887 align:start position:21% line:-2
これらが
互いに影響し合うこともありません

00:18:39.987 --> 00:18:44.091 align:start position:30% line:-2
１つ処理をするのに
一定の時間がかかります

00:18:44.191 --> 00:18:48.829 align:start position:30% line:-2
もちろん ２つの場合は
２倍の時間がかかります

00:18:49.129 --> 00:18:51.131 align:start position:36% line:-1
３つなら３倍です

00:18:51.231 --> 00:18:53.534 align:start position:32% line:-1
ポイントはこのライン

00:18:53.667 --> 00:18:55.402 align:start position:27% line:-1
リニアなパフォーマンスです

00:18:56.837 --> 00:19:01.408 align:start position:27% line:-2
これがパフォーマンスを知る
ベストな指標です

00:18:56.837 --> 00:19:01.408 align:start position:27% line:-2
これがパフォーマンスを知る
ベストな指標です

00:19:02.476 --> 00:19:08.182 align:start position:27% line:-2
それぞれが独立しているため
この直線が生まれます

00:19:08.382 --> 00:19:13.053 align:start position:27% line:-2
依存性を確保したければ
等式のブロックをつなぎます

00:19:13.220 --> 00:19:17.458 align:start position:25% line:-2
より多くの
コンピュータ処理になりますが

00:19:17.558 --> 00:19:20.194 align:start position:27% line:-1
必要な時だけ行ってください

00:19:20.294 --> 00:19:23.163 align:start position:23% line:-1
同じようなことを手作業でやれば

00:19:23.263 --> 00:19:27.668 align:start position:34% line:-2
より複雑になる分
少し大変になります

00:19:27.768 --> 00:19:29.603 align:start position:32% line:-1
Cocoaの狙いは―

00:19:29.703 --> 00:19:35.109 align:start position:25% line:-2
“シンプルなことをシンプルに
複雑なことを可能に”

00:19:35.209 --> 00:19:39.880 align:start position:25% line:-2
必要がない時は
工数をかけなくてもよいのです

00:19:40.747 --> 00:19:45.853 align:start position:25% line:-1
エンジンを直感的に捉えると―

00:19:46.153 --> 00:19:50.824 align:start position:29% line:-2
レイアウトキャッシュと
依存トラッカーと言えます

00:19:51.191 --> 00:19:55.362 align:start position:30% line:-2
どの制約がどのビューに
影響を与えるか明確です

00:19:55.462 --> 00:20:00.167 align:start position:27% line:-2
変更を加えると
必要な部分だけ更新されます

00:19:55.462 --> 00:20:00.167 align:start position:27% line:-2
変更を加えると
必要な部分だけ更新されます

00:20:01.401 --> 00:20:04.004 align:start position:23% line:-1
また コードにも影響を与えます

00:20:04.671 --> 00:20:06.607 align:start position:32% line:-1
時々 目にするのは―

00:20:06.707 --> 00:20:12.079 align:start position:27% line:-2
何とか制約を作らないように
苦心する人々です

00:20:12.179 --> 00:20:15.816 align:start position:34% line:-2
面倒な作業になる
印象があるからです

00:20:16.617 --> 00:20:18.318 align:start position:34% line:-1
確かにそうですが―

00:20:18.418 --> 00:20:23.223 align:start position:27% line:-2
それは 問題と密接に関わる
制約を作る時だけです

00:20:23.390 --> 00:20:27.928 align:start position:27% line:-2
それを避ければ
多くのメリットを得られます

00:20:28.028 --> 00:20:32.900 align:start position:27% line:-2
人は時々 複雑な測定をして
足し算をして―

00:20:33.000 --> 00:20:36.370 align:start position:34% line:-2
情報を抜き出したり
戻したりします

00:20:36.470 --> 00:20:38.272 align:start position:34% line:-1
それが大変なのです

00:20:38.372 --> 00:20:41.608 align:start position:36% line:-2
制約で表現すれば
よりシンプルです

00:20:42.509 --> 00:20:44.711 align:start position:34% line:-1
一方 逆もあります

00:20:45.078 --> 00:20:47.581 align:start position:29% line:-1
時々 このような階層を―

00:20:47.681 --> 00:20:50.417 align:start position:30% line:-1
目にすることがあります

00:20:50.517 --> 00:20:53.787 align:start position:27% line:-1
多くの制約と優先度があって

00:20:53.887 --> 00:20:55.556 align:start position:34% line:-1
全容が分かりません

00:20:55.656 --> 00:20:57.357 align:start position:43% line:-1
これは―

00:20:57.458 --> 00:21:00.994 align:start position:29% line:-1
まさにそういった事例です

00:20:57.458 --> 00:21:00.994 align:start position:29% line:-1
まさにそういった事例です

00:21:01.094 --> 00:21:05.165 align:start position:29% line:-2
２つの完全に切り離された
レイアウトです

00:21:05.265 --> 00:21:09.603 align:start position:21% line:-1
それらを１セットの制約にまとめて

00:21:09.703 --> 00:21:11.672 align:start position:29% line:-1
統合しようと考えています

00:21:11.772 --> 00:21:14.074 align:start position:34% line:-1
でも懸念があります

00:21:14.174 --> 00:21:16.043 align:start position:39% line:-1
２つの間に―

00:21:16.510 --> 00:21:21.348 align:start position:25% line:-2
関係性があるかのような
ニセの依存を作り出しています

00:21:21.448 --> 00:21:25.018 align:start position:32% line:-2
それに気付けなければ
デバッグも不可能です

00:21:26.153 --> 00:21:29.990 align:start position:27% line:-1
全体的なアドバイスとしては

00:21:30.124 --> 00:21:32.593 align:start position:27% line:-1
問題をモデル化することです

00:21:32.693 --> 00:21:37.798 align:start position:21% line:-2
後ほど カシアがレイアウトの
切り替えについて詳しく説明します

00:21:38.131 --> 00:21:41.969 align:start position:29% line:-2
問題のモデル化は
一般的なアドバイスとして

00:21:42.069 --> 00:21:45.505 align:start position:23% line:-1
パフォーマンス向上に役立ちます

00:21:47.207 --> 00:21:48.575 align:start position:45% line:-1
さて―

00:21:49.576 --> 00:21:51.011 align:start position:38% line:-1
以上が要点です

00:21:51.111 --> 00:21:55.516 align:start position:25% line:-2
でも 私たちはレイアウトの
メンタルモデルを作りたいので

00:21:55.616 --> 00:21:59.720 align:start position:29% line:-2
主要な特性について
すべて触れておきましょう

00:22:00.053 --> 00:22:01.889 align:start position:27% line:-1
まだ できることがあります

00:22:02.589 --> 00:22:04.391 align:start position:36% line:-1
それを説明します

00:22:04.491 --> 00:22:08.262 align:start position:27% line:-2
“幅100ポイント以上”の
ビューが必要な場合

00:22:08.362 --> 00:22:09.730 align:start position:36% line:-1
不等式を使えます

00:22:10.030 --> 00:22:11.165 align:start position:38% line:-1
大変でしょうか

00:22:11.665 --> 00:22:15.135 align:start position:23% line:-2
“幅100ポイント”にするより
ずっと簡単です

00:22:15.335 --> 00:22:20.040 align:start position:34% line:-2
説明したとおり
変数が１つ増えます

00:22:20.140 --> 00:22:20.941 align:start position:39% line:-1
それだけです

00:22:22.409 --> 00:22:24.211 align:start position:12% line:-1
“set constant”も呼び出せます

00:22:24.344 --> 00:22:26.813 align:start position:32% line:-1
次のようなケースです

00:22:26.914 --> 00:22:30.851 align:start position:23% line:-2
私にはジェスチャ認識があり
ビューをドラッグしようとします

00:22:30.951 --> 00:22:35.789 align:start position:29% line:-2
そしてジェスチャ認識から
毎回コールを受け取り―

00:22:35.889 --> 00:22:37.958 align:start position:29% line:-1
それを翻訳しようとします

00:22:38.091 --> 00:22:41.628 align:start position:16% line:-2
そして 翻訳した値が入った
“set constant”を呼び出し

00:22:41.728 --> 00:22:46.300 align:start position:25% line:-1
制約に投入しようとしています

00:22:46.500 --> 00:22:47.267 align:start position:41% line:-1
いいですね

00:22:47.367 --> 00:22:48.435 align:start position:43% line:-1
そして―

00:22:48.535 --> 00:22:52.139 align:start position:27% line:-2
エンジンは どのように
依存関係をトラックするか？

00:22:52.239 --> 00:22:55.309 align:start position:32% line:-2
このメソッドが
最大限に活用されます

00:22:55.542 --> 00:23:00.047 align:start position:27% line:-2
制約の変更で
変えなければならないことを

00:22:55.542 --> 00:23:00.047 align:start position:27% line:-2
制約の変更で
変えなければならないことを

00:23:00.147 --> 00:23:04.418 align:start position:30% line:-2
１回の更新で
すべて完了させるのです

00:23:04.818 --> 00:23:09.289 align:start position:12% line:-2
パフォーマンスを最適化する
“set constant”のメソッドです

00:23:09.590 --> 00:23:11.792 align:start position:29% line:-1
最後は優先度についてです

00:23:12.359 --> 00:23:14.361 align:start position:32% line:-1
例えば こう言います

00:23:14.461 --> 00:23:18.198 align:start position:27% line:-2
“このビューは
幅100ポイントが理想だ”

00:23:18.298 --> 00:23:22.503 align:start position:27% line:-2
でも できるだけ狭くという
要件があったら―

00:23:22.903 --> 00:23:26.540 align:start position:27% line:-1
より多くの作業が発生します

00:23:26.640 --> 00:23:30.110 align:start position:29% line:-1
このような場合もあります

00:23:30.210 --> 00:23:34.882 align:start position:23% line:-2
“このビューは
幅100ポイント前後にしたい”

00:23:34.982 --> 00:23:36.984 align:start position:25% line:-1
“エラーはできるだけ小さく”

00:23:37.317 --> 00:23:38.786 align:start position:34% line:-1
こういった要件です

00:23:39.586 --> 00:23:43.323 align:start position:25% line:-1
エラーを最小限にする方法は？

00:23:43.423 --> 00:23:48.662 align:start position:16% line:-2
ビューがlayoutSubviewsの
一部としてエンジンに言います

00:23:48.762 --> 00:23:50.464 align:start position:36% line:-1
“変数の値は？”

00:23:50.564 --> 00:23:54.835 align:start position:27% line:-2
エンジンは最初に
エラーが最小限か確認します

00:23:55.302 --> 00:23:59.239 align:start position:25% line:-1
この部分の詳細については省き

00:23:59.339 --> 00:24:01.742 align:start position:27% line:-2
パフォーマンス特性について
説明します

00:23:59.339 --> 00:24:01.742 align:start position:27% line:-2
パフォーマンス特性について
説明します

00:24:01.842 --> 00:24:03.911 align:start position:36% line:-1
“超スゴイ”です

00:24:04.411 --> 00:24:06.180 align:start position:32% line:-1
興味が湧きましたか？

00:24:06.280 --> 00:24:09.683 align:start position:21% line:-1
単純な Xアルゴリズムを使います

00:24:09.783 --> 00:24:13.387 align:start position:34% line:-2
第二次世界大戦中に
書かれたものです

00:24:13.487 --> 00:24:15.289 align:start position:29% line:-1
コンピュータ発明以前です

00:24:17.324 --> 00:24:21.828 align:start position:30% line:-2
当時 このような
計算をする人々のことを

00:24:21.929 --> 00:24:23.831 align:start position:21% line:-1
“コンピュータ”と呼んでいました

00:24:23.931 --> 00:24:25.099 align:start position:36% line:-1
彼らは手計算です

00:24:25.199 --> 00:24:28.168 align:start position:23% line:-1
これが パフォーマンス特性です

00:24:28.268 --> 00:24:31.205 align:start position:30% line:-1
手計算でも早くできます

00:24:32.239 --> 00:24:35.509 align:start position:23% line:-1
“やっていることの本質は同じ”

00:24:35.642 --> 00:24:37.377 align:start position:34% line:-1
そう考えてください

00:24:38.145 --> 00:24:40.447 align:start position:30% line:-1
優先度を調整する場合―

00:24:40.547 --> 00:24:43.417 align:start position:27% line:-1
その程度の工数が発生します

00:24:44.084 --> 00:24:46.353 align:start position:34% line:-1
それ以外は同じです

00:24:47.855 --> 00:24:50.557 align:start position:30% line:-1
大切な話をしてきました

00:24:50.657 --> 00:24:54.394 align:start position:29% line:-2
Auto Layoutの
パフォーマンス特性を

00:24:54.495 --> 00:24:57.364 align:start position:25% line:-1
直感的に理解する上で重要です

00:24:57.498 --> 00:25:00.033 align:start position:30% line:-1
ここで要点を整理します

00:24:57.498 --> 00:25:00.033 align:start position:30% line:-1
ここで要点を整理します

00:25:00.134 --> 00:25:02.102 align:start position:30% line:-1
制約を“衝突”させない

00:25:02.202 --> 00:25:04.905 align:start position:25% line:-1
不必要な作業は意味がないので

00:25:05.005 --> 00:25:06.039 align:start position:38% line:-1
やめてください

00:25:06.273 --> 00:25:10.077 align:start position:25% line:-2
制約は
基礎代数を解くようなものです

00:25:10.177 --> 00:25:13.781 align:start position:36% line:-2
制約を追加したり
取り除いたり―

00:25:13.881 --> 00:25:17.751 align:start position:16% line:-2
“set constant”を呼ぶ時が
まさにそうです

00:25:18.385 --> 00:25:22.623 align:start position:27% line:-2
エラーを最小限にしたい時も
同様です

00:25:25.459 --> 00:25:29.196 align:start position:21% line:-2
Auto Layoutの機能は
レイアウトのキャッシュと同じです

00:25:29.296 --> 00:25:32.466 align:start position:27% line:-2
エンジンには
すべての値が保存されていて

00:25:32.566 --> 00:25:34.134 align:start position:25% line:-1
依存関係をトラックしています

00:25:34.234 --> 00:25:35.769 align:start position:32% line:-1
そのため変更があると

00:25:35.869 --> 00:25:39.573 align:start position:34% line:-2
その値だけを
的確に更新できます

00:25:39.773 --> 00:25:41.074 align:start position:43% line:-1
最後は―

00:25:41.175 --> 00:25:44.545 align:start position:32% line:-2
自分が必要な機能のみ
使ってください

00:25:45.145 --> 00:25:48.849 align:start position:23% line:-1
これまでの話は 直感の部分です

00:25:48.949 --> 00:25:52.786 align:start position:32% line:-2
残りの時間は
カシアに引き継ぎます

00:25:52.886 --> 00:25:56.690 align:start position:30% line:-2
直感だけに頼っては
うまくいかないからです

00:25:56.790 --> 00:25:59.193 align:start position:32% line:-1
いくつか分析を行い―

00:25:59.293 --> 00:26:02.296 align:start position:29% line:-1
直感を実践に結び付けます

00:25:59.293 --> 00:26:02.296 align:start position:29% line:-1
直感を実践に結び付けます

00:26:02.396 --> 00:26:04.331 align:start position:36% line:-1
お楽しみください

00:26:04.464 --> 00:26:11.305 align:start position:43% line:-1
(拍手)

00:26:11.405 --> 00:26:13.507 align:start position:30% line:-1
スライドをお願いします

00:26:14.007 --> 00:26:14.842 align:start position:41% line:-1
ありがとう

00:26:14.942 --> 00:26:19.947 align:start position:14% line:-2
私は iOS Keyboardsチームの
カシア･ヴァーヴァです

00:26:20.047 --> 00:26:25.419 align:start position:21% line:-2
今日は効率的な
レイアウト構築について説明します

00:26:26.186 --> 00:26:28.889 align:start position:32% line:-1
制約の衝突に戻ります

00:26:29.022 --> 00:26:32.326 align:start position:34% line:-2
制約を変更する時に
衝突が起こりますが

00:26:32.426 --> 00:26:34.962 align:start position:30% line:-2
実際のビューは
動かす必要がありません

00:26:35.095 --> 00:26:39.500 align:start position:25% line:-2
エンジンに余計な負荷がかかり
パフォーマンスに影響が出ます

00:26:39.600 --> 00:26:41.068 align:start position:36% line:-1
避けたい事態です

00:26:41.935 --> 00:26:46.907 align:start position:32% line:-2
この問題の要因と
回避方法を説明します

00:26:47.708 --> 00:26:51.245 align:start position:25% line:-2
これは
SNSのアプリケーションです

00:26:51.478 --> 00:26:54.014 align:start position:29% line:-1
アバタービューがあります

00:26:54.114 --> 00:26:55.849 align:start position:30% line:-1
そして タイトルと日付

00:26:55.949 --> 00:26:57.618 align:start position:32% line:-1
ログのエントリビュー

00:26:58.418 --> 00:27:00.954 align:start position:29% line:-1
ここにスペースが必要です

00:26:58.418 --> 00:27:00.954 align:start position:29% line:-1
ここにスペースが必要です

00:27:01.054 --> 00:27:04.858 align:start position:27% line:-2
サイズを決めて
いくらか調整も必要でしょう

00:27:05.492 --> 00:27:09.096 align:start position:32% line:-2
でもこれは
純粋なSNSではなく

00:27:09.196 --> 00:27:13.734 align:start position:32% line:-2
シェアするかどうかを
選ぶことができます

00:27:14.368 --> 00:27:18.305 align:start position:25% line:-2
そのため
オプションのビューがあります

00:27:18.839 --> 00:27:23.377 align:start position:25% line:-2
もちろん ネコの写真を
シェアできなくてはいけません

00:27:23.877 --> 00:27:26.213 align:start position:23% line:-1
そのためのレイアウトが必要です

00:27:26.713 --> 00:27:31.018 align:start position:27% line:-2
でも かわいい写真を
一人で楽しみたい人もいます

00:27:32.019 --> 00:27:35.656 align:start position:25% line:-2
そこで４つの似たレイアウトを
用意しました

00:27:35.756 --> 00:27:39.259 align:start position:30% line:-2
テーブルビューのセルを
画面に表示させたいので

00:27:39.359 --> 00:27:41.428 align:start position:30% line:-1
いくらか調整が必要です

00:27:41.929 --> 00:27:45.732 align:start position:29% line:-2
今 パフォーマンス改善に
取り組んでいるとします

00:27:45.833 --> 00:27:48.902 align:start position:34% line:-2
現在のスクロールの
パフォーマンスです

00:27:50.270 --> 00:27:53.874 align:start position:32% line:-2
下から上の動きに
引っかかりがあります

00:27:53.974 --> 00:27:58.078 align:start position:29% line:-2
このような場合
どうやって改善しますか？

00:27:58.545 --> 00:28:03.717 align:start position:30% line:-2
今日は 現在開発中の
新しい方法を紹介します

00:27:58.545 --> 00:28:03.717 align:start position:30% line:-2
今日は 現在開発中の
新しい方法を紹介します

00:28:03.817 --> 00:28:05.986 align:start position:30% line:-1
ベータ版では使えません

00:28:06.553 --> 00:28:07.855 align:start position:39% line:-1
でもご安心を

00:28:07.955 --> 00:28:10.724 align:start position:30% line:-1
あるツールを紹介します

00:28:11.959 --> 00:28:13.360 align:start position:41% line:-1
いいですね

00:28:13.460 --> 00:28:18.999 align:start position:43% line:-1
(拍手)

00:28:19.099 --> 00:28:22.369 align:start position:27% line:-1
喜んでもらえてうれしいです

00:28:22.469 --> 00:28:24.938 align:start position:34% line:-1
では 見てください

00:28:25.372 --> 00:28:29.309 align:start position:25% line:-1
最上段はCPUの使用量を示し

00:28:29.409 --> 00:28:31.745 align:start position:30% line:-1
問題の兆候を知らせます

00:28:31.845 --> 00:28:33.313 align:start position:32% line:-1
ここに山が多い場合は

00:28:33.413 --> 00:28:37.251 align:start position:29% line:-2
レイアウトに問題があると
示唆しています

00:28:37.484 --> 00:28:39.019 align:start position:39% line:-1
平らな場合は

00:28:39.119 --> 00:28:41.822 align:start position:30% line:-2
パフォーマンスの問題は
他にあるはずです

00:28:42.489 --> 00:28:46.126 align:start position:27% line:-2
この部分が
制約の衝突を知らせています

00:28:46.326 --> 00:28:48.395 align:start position:36% line:-1
このバーの高さが

00:28:48.495 --> 00:28:52.933 align:start position:30% line:-2
衝突の影響を受けている
ビューの数です

00:28:53.467 --> 00:28:56.537 align:start position:25% line:-1
その高さで影響度が分かります

00:28:57.838 --> 00:29:02.743 align:start position:34% line:-2
次が 制約の破棄と
変更の状況について

00:28:57.838 --> 00:29:02.743 align:start position:34% line:-2
次が 制約の破棄と
変更の状況について

00:29:03.143 --> 00:29:06.713 align:start position:27% line:-2
最後が UILabelと
テキストビューのサイズです

00:29:06.813 --> 00:29:09.616 align:start position:25% line:-1
ここでは UILabelと―

00:29:09.850 --> 00:29:12.553 align:start position:27% line:-2
別タイプのテキストビューも
分析しています

00:29:13.654 --> 00:29:17.224 align:start position:27% line:-2
先ほどのアプリケーションの
動きについて―

00:29:17.591 --> 00:29:18.992 align:start position:32% line:-1
何が分かるでしょうか

00:29:19.092 --> 00:29:23.363 align:start position:34% line:-2
CPUビューにある
いくつかの山の中で

00:29:23.464 --> 00:29:24.665 align:start position:36% line:-1
ここに注目します

00:29:24.765 --> 00:29:27.701 align:start position:32% line:-2
制約の衝突が
跳ね上がっているので

00:29:27.801 --> 00:29:29.236 align:start position:34% line:-1
問題がありそうです

00:29:29.870 --> 00:29:34.608 align:start position:30% line:-2
このビューの詳細が
下の画面で確認できます

00:29:34.708 --> 00:29:39.112 align:start position:30% line:-2
衝突の影響を受けている
ビューのリストです

00:29:39.513 --> 00:29:44.251 align:start position:18% line:-2
Superviewでグループ化すると
テーブルビューのセルの中で

00:29:44.351 --> 00:29:50.424 align:start position:23% line:-2
特定のコンテクストにおいて
衝突が起こっていると分かります

00:29:50.991 --> 00:29:56.330 align:start position:25% line:-2
この場合 アバタービューと
３つのラベルが衝突しています

00:29:57.197 --> 00:30:01.135 align:start position:32% line:-2
私がこの解析ツールを
走らせているので

00:29:57.197 --> 00:30:01.135 align:start position:32% line:-2
私がこの解析ツールを
走らせているので

00:30:01.235 --> 00:30:06.006 align:start position:23% line:-2
この３つが“タイトル”“日付”
“ログエントリ”だと分かります

00:30:06.940 --> 00:30:09.543 align:start position:29% line:-1
セルのビューの大部分です

00:30:09.710 --> 00:30:12.513 align:start position:21% line:-1
何が起きているのか見てみましょう

00:30:13.680 --> 00:30:15.749 align:start position:34% line:-1
この画面に戻ります

00:30:16.250 --> 00:30:18.418 align:start position:38% line:-1
コードを調べて

00:30:18.519 --> 00:30:21.922 align:start position:18% line:-2
updateConstraintsの
オーバーライドを確認します

00:30:22.389 --> 00:30:27.694 align:start position:11% line:-2
何か変更した時や
updateConstraintsの動作中は

00:30:27.795 --> 00:30:32.633 align:start position:32% line:-2
すべての制約を破棄し
必要に応じて戻します

00:30:33.767 --> 00:30:37.471 align:start position:25% line:-1
すべてを元の場所に戻しました

00:30:37.571 --> 00:30:41.942 align:start position:25% line:-2
一度破棄したことで
パフォーマンスが上がりました

00:30:42.409 --> 00:30:45.812 align:start position:30% line:-2
このインスタンスでは
ソーシャルアバターが―

00:30:45.913 --> 00:30:48.849 align:start position:29% line:-1
追加され 破棄されました

00:30:48.949 --> 00:30:50.918 align:start position:32% line:-1
あとは必要ありません

00:30:51.685 --> 00:30:54.054 align:start position:29% line:-1
この制約のビューを見ると

00:30:54.354 --> 00:30:59.193 align:start position:30% line:-2
このビュー以外には
影響がないと分かります

00:30:59.426 --> 00:31:01.762 align:start position:30% line:-1
ご存知だと思いますが―

00:30:59.426 --> 00:31:01.762 align:start position:30% line:-1
ご存知だと思いますが―

00:31:02.095 --> 00:31:05.165 align:start position:23% line:-2
これが“setHidden”と
呼ばれるものです

00:31:05.365 --> 00:31:09.303 align:start position:34% line:-2
周りのビューに
影響を与えないので

00:31:09.403 --> 00:31:11.472 align:start position:34% line:-1
制約はそのままです

00:31:11.572 --> 00:31:15.909 align:start position:25% line:-2
これはビューの表示を変更する
一番楽な方法です

00:31:16.009 --> 00:31:20.013 align:start position:23% line:-1
ビュー階層からやるより簡単です

00:31:20.114 --> 00:31:22.850 align:start position:34% line:-2
一方 画像ビューは
どうでしょう？

00:31:23.350 --> 00:31:24.985 align:start position:38% line:-1
説明しましょう

00:31:25.085 --> 00:31:28.422 align:start position:27% line:-2
こちらも
一度すべての制約を破棄して

00:31:28.522 --> 00:31:31.258 align:start position:23% line:-1
元々あった画像ビューを加えます

00:31:31.792 --> 00:31:35.662 align:start position:29% line:-2
すべて元の場所に戻るので
衝突が発生します

00:31:36.463 --> 00:31:38.031 align:start position:34% line:-1
このような状況では

00:31:38.131 --> 00:31:41.502 align:start position:32% line:-2
制約をグループ化して
考えてください

00:31:42.135 --> 00:31:45.005 align:start position:27% line:-1
緑線の部分が１グループです

00:31:46.106 --> 00:31:49.943 align:start position:27% line:-2
これらの制約は
すべてのレイアウト共通です

00:31:50.377 --> 00:31:53.914 align:start position:29% line:-2
変更しなくてよいビューで
表示を切り替えても

00:31:54.014 --> 00:31:55.616 align:start position:27% line:-1
アバタービューは動きません

00:31:55.716 --> 00:31:58.452 align:start position:30% line:-2
ログエントリのラベルが
長くなることを除いて

00:31:58.552 --> 00:32:01.155 align:start position:30% line:-1
他のラベルは動きません

00:31:58.552 --> 00:32:01.155 align:start position:30% line:-1
他のラベルは動きません

00:32:01.588 --> 00:32:05.692 align:start position:30% line:-2
緑線の制約は
ビュー作成時に追加して

00:32:06.126 --> 00:32:08.362 align:start position:36% line:-1
そのままにします

00:32:08.462 --> 00:32:10.931 align:start position:34% line:-1
触ってはいけません

00:32:11.899 --> 00:32:15.769 align:start position:27% line:-2
ここに 画像ビューに関する
４つの制約があります

00:32:15.869 --> 00:32:18.672 align:start position:30% line:-1
それらを配列に入れます

00:32:19.673 --> 00:32:23.944 align:start position:32% line:-2
画像がない時の制約も
入れましょう

00:32:24.044 --> 00:32:27.247 align:start position:12% line:-2
“imageConstraints”と
“noImageConstraints”で

00:32:27.347 --> 00:32:29.016 align:start position:36% line:-1
区別してください

00:32:29.183 --> 00:32:30.951 align:start position:38% line:-1
そして 次に―

00:32:31.051 --> 00:32:35.656 align:start position:30% line:-2
画像ビューを
入れたり外したりします

00:32:35.756 --> 00:32:37.858 align:start position:23% line:-1
レイアウトはどうなったでしょう

00:32:37.991 --> 00:32:40.861 align:start position:14% line:-2
画像が必要なければ
“noImageConstraints”

00:32:40.994 --> 00:32:43.096 align:start position:9% line:-2
必要なら“imageConstraints”を
有効にします

00:32:44.331 --> 00:32:45.866 align:start position:38% line:-1
画像がない場合

00:32:45.966 --> 00:32:49.970 align:start position:30% line:-2
他はすでに有効なので
追加する制約は１つです

00:32:50.070 --> 00:32:53.474 align:start position:32% line:-2
１つの制約ですが
両方の配列に入れます

00:32:53.574 --> 00:32:55.542 align:start position:21% line:-1
コードをシンプルにしたいからです

00:32:55.642 --> 00:32:59.012 align:start position:32% line:-2
配列か制約か
確認する必要がなく―

00:32:59.113 --> 00:33:01.115 align:start position:29% line:-1
常に制約の配列を扱います

00:32:59.113 --> 00:33:01.115 align:start position:29% line:-1
常に制約の配列を扱います

00:33:01.782 --> 00:33:02.916 align:start position:39% line:-1
よい方法です

00:33:03.951 --> 00:33:06.086 align:start position:34% line:-1
メリットを教えます

00:33:06.186 --> 00:33:10.023 align:start position:25% line:-1
このように制約を分析していて

00:33:10.124 --> 00:33:14.261 align:start position:29% line:-2
ユーザの前に画像を
ライブで出したいとします

00:33:14.728 --> 00:33:18.432 align:start position:7% line:-2
その場合
“imageConstraints”を有効にして

00:33:18.532 --> 00:33:21.401 align:start position:27% line:-2
アニメーションブロック内に
Layoutを呼び出せます

00:33:21.502 --> 00:33:23.670 align:start position:23% line:-1
するとアニメーションが動きます

00:33:24.037 --> 00:33:27.508 align:start position:29% line:-2
制約をすべて無効にして
それを戻しながら試せば―

00:33:28.542 --> 00:33:31.078 align:start position:34% line:-1
とても面白そうです

00:33:31.778 --> 00:33:37.050 align:start position:23% line:-2
さて デバッグが終わり
制約のグループを改修しています

00:33:37.151 --> 00:33:41.021 align:start position:27% line:-1
これは 先ほど見た画面です

00:33:41.622 --> 00:33:42.790 align:start position:36% line:-1
スクロールします

00:33:43.590 --> 00:33:44.258 align:start position:41% line:-1
ダメですね

00:33:44.358 --> 00:33:47.361 align:start position:25% line:-1
これが デバッグ後の画面です

00:33:48.862 --> 00:33:50.464 align:start position:34% line:-1
とてもスムーズです

00:33:51.432 --> 00:33:52.099 align:start position:41% line:-1
ありがとう

00:33:52.399 --> 00:33:53.967 align:start position:43% line:-1
(拍手)

00:33:54.068 --> 00:33:55.302 align:start position:38% line:-1
他にもあります

00:33:56.136 --> 00:33:58.272 align:start position:23% line:-1
これは iOS 11の映像です

00:33:58.739 --> 00:34:03.377 align:start position:27% line:-2
iOS 12の改良の影響は
受けていません

00:33:58.739 --> 00:34:03.377 align:start position:27% line:-2
iOS 12の改良の影響は
受けていません

00:34:03.710 --> 00:34:07.881 align:start position:32% line:-2
クライアントコードを
改善した結果です

00:34:08.215 --> 00:34:09.983 align:start position:25% line:-1
iOS 12でも すてきです

00:34:12.786 --> 00:34:14.888 align:start position:36% line:-1
本当にすばらしい

00:34:14.987 --> 00:34:15.822 align:start position:41% line:-1
(笑い声)

00:34:15.922 --> 00:34:16.924 align:start position:43% line:-1
(拍手)

00:34:17.024 --> 00:34:17.858 align:start position:43% line:-1
最高です

00:34:17.958 --> 00:34:20.226 align:start position:43% line:-1
(拍手)

00:34:20.327 --> 00:34:22.396 align:start position:27% line:-1
制約の衝突を回避するには？

00:34:23.096 --> 00:34:24.898 align:start position:27% line:-1
“制約をすべて削除しない”

00:34:24.998 --> 00:34:28.768 align:start position:23% line:-2
そうしないと
大量の制約を戻すことになります

00:34:28.869 --> 00:34:31.972 align:start position:30% line:-2
それにより
必要のないフレームや―

00:34:32.072 --> 00:34:35.976 align:start position:29% line:-2
再び表示されないビューに
中継することになります

00:34:36.743 --> 00:34:41.181 align:start position:29% line:-2
アプリケーションに共通の
制約のセットがあれば

00:34:41.281 --> 00:34:46.053 align:start position:7% line:-2
一度追加して動かさないことが
Interface Builderを使うコツです

00:34:46.587 --> 00:34:50.290 align:start position:21% line:-1
“制約の変更を不必要に行わない”

00:34:50.858 --> 00:34:52.793 align:start position:38% line:-1
これが大切です

00:34:52.893 --> 00:34:55.963 align:start position:29% line:-2
あと ビューを隠すという
裏ワザがあります

00:34:56.362 --> 00:34:58.732 align:start position:30% line:-1
削除するより合理的です

00:34:59.366 --> 00:35:01.435 align:start position:7% line:-2
ツールの
“Constraint churning”の下に

00:34:59.366 --> 00:35:01.435 align:start position:7% line:-2
ツールの
“Constraint churning”の下に

00:35:01.535 --> 00:35:04.571 align:start position:16% line:-2
“UILabel sizing”という
ビューがあります

00:35:05.105 --> 00:35:10.344 align:start position:27% line:-2
これはラベルが寸法の計測に
要する時間を示します

00:35:10.444 --> 00:35:12.512 align:start position:25% line:-2
今から“固有の寸法”について
説明します

00:35:13.814 --> 00:35:15.682 align:start position:38% line:-1
少し移動します

00:35:15.782 --> 00:35:19.419 align:start position:23% line:-2
すべてのビューに
固有の寸法が必要ではありません

00:35:20.621 --> 00:35:23.624 align:start position:34% line:-2
不可視の背景がある
ビューの場合は―

00:35:23.824 --> 00:35:28.262 align:start position:21% line:-1
その固有の寸法を返すため必要です

00:35:28.362 --> 00:35:29.830 align:start position:36% line:-1
２つ例をあげます

00:35:29.930 --> 00:35:33.434 align:start position:23% line:-2
まず UIImageViewは
画像サイズを使って

00:35:33.534 --> 00:35:35.636 align:start position:27% line:-1
画像の固有の寸法を測ります

00:35:35.736 --> 00:35:38.472 align:start position:30% line:-2
また UILabelは
テキストを計測し―

00:35:38.572 --> 00:35:41.241 align:start position:29% line:-1
その固有の寸法を返します

00:35:41.775 --> 00:35:45.279 align:start position:29% line:-2
固有の寸法は
魔法のようなものではなく

00:35:45.379 --> 00:35:48.282 align:start position:25% line:-2
UIViewから
制約を生成するために使います

00:35:48.382 --> 00:35:51.218 align:start position:29% line:-1
寸法の制約を作るだけです

00:35:51.485 --> 00:35:54.288 align:start position:27% line:-1
寸法をすべて制約で定義して

00:35:54.388 --> 00:35:55.923 align:start position:29% line:-1
面倒なことを省略できます

00:35:56.356 --> 00:35:59.626 align:start position:29% line:-2
まれに
オーバーライドされますが

00:35:59.727 --> 00:36:04.131 align:start position:25% line:-2
UIViewのサブクラス内で
起こることと同様です

00:35:59.727 --> 00:36:04.131 align:start position:25% line:-2
UIViewのサブクラス内で
起こることと同様です

00:36:04.231 --> 00:36:09.570 align:start position:21% line:-2
通常 スピードや正確性向上のため
オーバーライドされますが

00:36:09.670 --> 00:36:11.438 align:start position:34% line:-1
この場合は違います

00:36:12.005 --> 00:36:14.308 align:start position:29% line:-1
しかし オーバーライドが

00:36:14.408 --> 00:36:16.944 align:start position:30% line:-2
パフォーマンス向上に
貢献する場合があります

00:36:18.112 --> 00:36:20.214 align:start position:32% line:-2
テキスト測定は
時々工数がかかります

00:36:21.081 --> 00:36:23.984 align:start position:23% line:-1
でも このアプリケーションでは

00:36:24.084 --> 00:36:27.688 align:start position:21% line:-1
それほど時間がかかりませんでした

00:36:27.788 --> 00:36:31.458 align:start position:30% line:-2
だから その部分を
いじる必要はありません

00:36:31.558 --> 00:36:33.460 align:start position:25% line:-1
しかし テキストが多い場合は

00:36:33.560 --> 00:36:37.164 align:start position:23% line:-2
UILabelのテキスト測定に
時間がかかります

00:36:37.331 --> 00:36:40.200 align:start position:23% line:-1
それは 他のツールでも同じです

00:36:40.300 --> 00:36:43.871 align:start position:30% line:-2
何か情報があれば
役に立つかもしれません

00:36:45.038 --> 00:36:49.376 align:start position:30% line:-2
もし 計測しなくても
必要なサイズが分かれば

00:36:49.476 --> 00:36:52.179 align:start position:32% line:-2
そのサイズと
固有の寸法を返せます

00:36:52.646 --> 00:36:56.483 align:start position:25% line:-2
あるいは
ビューを画面に置こうとする時

00:36:56.583 --> 00:37:00.754 align:start position:30% line:-2
そのテキストのサイズを
制約が完全に定義します

00:36:56.583 --> 00:37:00.754 align:start position:30% line:-2
そのテキストのサイズを
制約が完全に定義します

00:37:00.854 --> 00:37:05.125 align:start position:25% line:-2
例えば テキストは
常に実際より長く定義されます

00:37:05.426 --> 00:37:07.427 align:start position:27% line:-1
そのため 幅と高さに対して

00:37:07.528 --> 00:37:10.898 align:start position:21% line:-1
固有の寸法を返す必要がありません

00:37:11.031 --> 00:37:12.666 align:start position:34% line:-1
親にこう言うのです

00:37:12.766 --> 00:37:16.169 align:start position:34% line:-2
“わざわざ寸法を
測らなくていいよ”

00:37:16.737 --> 00:37:20.240 align:start position:29% line:-2
自分で測定しない場合だけ
有効ですが―

00:37:20.708 --> 00:37:23.477 align:start position:27% line:-2
パフォーマンス改善に役立つ
可能性があります

00:37:23.577 --> 00:37:26.113 align:start position:21% line:-1
裏ワザとして知っておいてください

00:37:26.647 --> 00:37:31.618 align:start position:4% line:-2
“systemLayoutSizeFitting”も
忘れるわけにはいきません

00:37:32.653 --> 00:37:34.688 align:start position:25% line:-1
これらは相反するものですが―

00:37:35.355 --> 00:37:38.325 align:start position:23% line:-1
多くの人が混同して考えています

00:37:38.692 --> 00:37:40.828 align:start position:36% line:-1
“固有の寸法”は

00:37:40.928 --> 00:37:44.598 align:start position:25% line:-2
エンジンにサイズ情報を伝える
手段です

00:37:45.132 --> 00:37:46.934 align:start position:4% line:-1
“systemLayoutSizeFitting”は

00:37:47.034 --> 00:37:50.204 align:start position:29% line:-2
エンジンからサイズ情報を
受け取る手段です

00:37:50.304 --> 00:37:51.505 align:start position:36% line:-1
まさに正反対です

00:37:52.472 --> 00:37:55.409 align:start position:27% line:-2
これは 混合型レイアウトで
使われます

00:37:55.509 --> 00:37:58.011 align:start position:23% line:-2
Auto Layoutを使って
サブビューを操るビューから―

00:37:58.112 --> 00:38:00.981 align:start position:27% line:-2
フレーム情報を得る時などに
使います

00:37:58.112 --> 00:38:00.981 align:start position:27% line:-2
フレーム情報を得る時などに
使います

00:38:01.749 --> 00:38:05.552 align:start position:34% line:-2
頻繁でなくても
必要な時に使えます

00:38:05.686 --> 00:38:08.355 align:start position:32% line:-1
この使い方を教えます

00:38:08.555 --> 00:38:10.691 align:start position:38% line:-1
意外と厄介です

00:38:11.625 --> 00:38:14.194 align:start position:4% line:-2
“systemLayoutSizeFitting”を
呼び出すと

00:38:14.361 --> 00:38:15.829 align:start position:30% line:-1
エンジンが生成されます

00:38:16.029 --> 00:38:19.266 align:start position:29% line:-2
制約がエンジンに追加され
レイアウトができます

00:38:19.433 --> 00:38:22.770 align:start position:30% line:-2
トップビューフレームの
サイズが返されて―

00:38:23.303 --> 00:38:24.938 align:start position:30% line:-1
エンジンが破棄されます

00:38:25.572 --> 00:38:29.243 align:start position:21% line:-2
このメソッドでは 毎回エンジンが
生成され破棄されます

00:38:29.777 --> 00:38:33.080 align:start position:25% line:-1
これを何回もやっているなら―

00:38:33.180 --> 00:38:35.482 align:start position:27% line:-2
ロスタイムになっているかも
知れません

00:38:35.582 --> 00:38:38.986 align:start position:4% line:-2
“systemLayoutSizeFitting”を
呼ぶ時は気を付けてください

00:38:39.520 --> 00:38:45.426 align:start position:25% line:-2
時々 セルフサイジングセルや
テーブルビューのセルから

00:38:45.526 --> 00:38:48.095 align:start position:23% line:-2
コンテンツビューに
コールを転送している人がいます

00:38:48.262 --> 00:38:54.201 align:start position:23% line:-2
その場合 スクロールの最適化が
オーバーライドされていて

00:38:54.301 --> 00:38:56.036 align:start position:23% line:-1
余分なエンジンを追加しています

00:38:56.203 --> 00:39:00.374 align:start position:27% line:-2
スクロールに問題がある方は
確認してください

00:38:56.203 --> 00:39:00.374 align:start position:27% line:-2
スクロールに問題がある方は
確認してください

00:39:01.108 --> 00:39:03.644 align:start position:23% line:-1
次は 私の大好きなトピックです

00:39:03.744 --> 00:39:05.446 align:start position:2% line:-1
“Unsatisfiable Constraints”

00:39:06.146 --> 00:39:07.014 align:start position:45% line:-1
さて―

00:39:07.848 --> 00:39:10.117 align:start position:27% line:-1
“満足できない制約”とは？

00:39:10.217 --> 00:39:14.321 align:start position:25% line:-2
知らない方のために
どんな時に起こるか説明します

00:39:14.421 --> 00:39:17.324 align:start position:21% line:-1
“このビューの幅は50ポイント”

00:39:17.424 --> 00:39:19.326 align:start position:20% line:-1
“同時に200ポイントにもしたい”

00:39:19.793 --> 00:39:22.062 align:start position:34% line:-1
もちろん不可能です

00:39:22.162 --> 00:39:24.631 align:start position:27% line:-1
量子電話は存在しませんから

00:39:25.232 --> 00:39:27.267 align:start position:30% line:-1
未来は分かりませんけど

00:39:28.602 --> 00:39:33.374 align:start position:27% line:-2
そこで エンジンは
無効なレイアウトを計算して

00:39:33.474 --> 00:39:37.878 align:start position:25% line:-2
正しく生成するために
制約を破らなければなりません

00:39:38.512 --> 00:39:44.051 align:start position:29% line:-2
エンジンは 制約を破ると
詳細なログを送ってきて―

00:39:44.318 --> 00:39:45.619 align:start position:39% line:-1
こう言います

00:39:45.752 --> 00:39:49.022 align:start position:21% line:-1
“この制約が無効だから破ったよ”

00:39:49.356 --> 00:39:52.593 align:start position:27% line:-1
“この部分に影響が出たよ”

00:39:53.160 --> 00:39:55.162 align:start position:30% line:-1
パフォーマンスの低下や

00:39:55.262 --> 00:39:57.865 align:start position:27% line:-2
他の問題を
起こしているかもしれません

00:39:57.965 --> 00:39:59.933 align:start position:34% line:-1
デバッグが必要です

00:40:00.100 --> 00:40:03.570 align:start position:5% line:-2
Mysteries of Auto Layout,
Part ２に有益な情報があるので

00:40:03.771 --> 00:40:08.542 align:start position:30% line:-2
問題解決のために
ぜひ参考にしてください

00:40:09.677 --> 00:40:11.378 align:start position:38% line:-1
これで卒業です

00:40:11.478 --> 00:40:14.214 align:start position:14% line:-2
皆さんは
Auto Layoutのエキスパートです

00:40:14.648 --> 00:40:19.520 align:start position:21% line:-2
内部の動作について
楽しく学んでいただけたと思います

00:40:19.620 --> 00:40:23.090 align:start position:23% line:-1
制約の更新やプロセスについても

00:40:23.190 --> 00:40:25.225 align:start position:30% line:-1
理解が深まったでしょう

00:40:25.325 --> 00:40:29.329 align:start position:21% line:-2
サイズや優先度や不等式についても
学びました

00:40:29.463 --> 00:40:33.066 align:start position:25% line:-2
iOS 12では
レイアウトが高速になりました

00:40:33.367 --> 00:40:35.202 align:start position:34% line:-1
明日はラボにいます

00:40:35.302 --> 00:40:36.737 align:start position:30% line:-1
ご質問のある方はどうぞ

00:40:36.904 --> 00:40:39.973 align:start position:30% line:-2
こちらのリンクから
情報にアクセスできます

00:40:40.174 --> 00:40:41.575 align:start position:29% line:-1
この後もお楽しみください

00:40:41.675 --> 00:40:45.612 align:start position:43% line:-1
(拍手)
