WEBVTT

00:00:07.040 --> 00:00:16.950 align:start position:43% line:-1
(音楽)

00:00:22.556 --> 00:00:23.624 align:start position:41% line:-1
こんにちは

00:00:25.025 --> 00:00:27.394 align:start position:29% line:-1
このセッションへようこそ

00:00:28.228 --> 00:00:31.698 align:start position:36% line:-2
tvOSチームの
ハンス･キムです

00:00:32.366 --> 00:00:37.204 align:start position:29% line:-2
今日は tvOS 12の
新機能をご紹介します

00:00:37.738 --> 00:00:40.274 align:start position:30% line:-1
パスワードの自動入力と

00:00:40.908 --> 00:00:45.512 align:start position:32% line:-2
フォーカスエンジンの
新しい拡張機能

00:00:46.079 --> 00:00:49.183 align:start position:29% line:-1
そして最後に tvOSの

00:00:49.283 --> 00:00:52.486 align:start position:32% line:-2
新しいUIパターンを
発表します

00:00:53.020 --> 00:00:55.689 align:start position:38% line:-2
幅広い内容で
デモもあります

00:00:55.789 --> 00:00:56.857 align:start position:39% line:-1
始めましょう

00:00:57.291 --> 00:01:00.827 align:start position:32% line:-2
まずは アレックスと
コンラッドによる―

00:00:57.291 --> 00:01:00.827 align:start position:32% line:-2
まずは アレックスと
コンラッドによる―

00:01:00.928 --> 00:01:04.096 align:start position:30% line:-2
パスワードの自動入力の
紹介です

00:01:05.766 --> 00:01:10.804 align:start position:43% line:-1
(拍手)

00:01:11.071 --> 00:01:12.172 align:start position:41% line:-1
ありがとう

00:01:12.573 --> 00:01:15.108 align:start position:27% line:-1
こんにちは　アレックスです

00:01:15.209 --> 00:01:19.346 align:start position:30% line:-2
今日はパスワードの
自動入力をご紹介します

00:01:20.614 --> 00:01:23.784 align:start position:34% line:-2
誰もがサインインを
経験します

00:01:23.884 --> 00:01:26.753 align:start position:21% line:-1
例えば開発中の“shiny.”は

00:01:26.854 --> 00:01:31.391 align:start position:27% line:-2
サインインして犬の写真を
楽しむアプリケーションです

00:01:32.125 --> 00:01:34.661 align:start position:36% line:-2
サインインを
簡単にするため―

00:01:34.761 --> 00:01:37.798 align:start position:27% line:-2
tvOS 12には
パスワードの自動入力を導入

00:01:37.965 --> 00:01:43.403 align:start position:38% line:-2
iOSと同じく
操作は簡単です

00:01:43.504 --> 00:01:44.705 align:start position:39% line:-1
デモをします

00:01:53.547 --> 00:01:55.849 align:start position:23% line:-2
コンティニュイティキーボードを
使います

00:01:55.949 --> 00:01:59.319 align:start position:30% line:-2
これは
iOSデバイスを使って

00:01:59.419 --> 00:02:03.924 align:start position:25% line:-2
Apple TVにテキストを
入力する機能ですね

00:01:59.419 --> 00:02:03.924 align:start position:25% line:-2
Apple TVにテキストを
入力する機能ですね

00:02:04.024 --> 00:02:05.025 align:start position:38% line:-1
見てみましょう

00:02:05.826 --> 00:02:09.562 align:start position:32% line:-2
shiny.の画面で
フィールドを選択

00:02:11.231 --> 00:02:14.234 align:start position:23% line:-2
コンティニュイティキーボードの
通知が出ました

00:02:14.334 --> 00:02:17.804 align:start position:36% line:-2
自動入力の機能が
加わっています

00:02:17.971 --> 00:02:19.506 align:start position:39% line:-1
通知を開くと

00:02:21.175 --> 00:02:26.647 align:start position:29% line:-2
QuickTypeバーに
クレデンシャルが出ます

00:02:26.747 --> 00:02:30.918 align:start position:29% line:-2
タップすれば入力が完了し
サインインできます

00:02:31.018 --> 00:02:32.252 align:start position:39% line:-1
やってみます

00:02:35.589 --> 00:02:37.257 align:start position:36% line:-1
かわいいですよね

00:02:37.958 --> 00:02:42.596 align:start position:43% line:-1
(拍手)

00:02:43.664 --> 00:02:45.732 align:start position:25% line:-1
iPhoneに通知が出たのは

00:02:45.833 --> 00:02:49.469 align:start position:25% line:-2
iCloud上のアカウントが
同じだからです

00:02:49.837 --> 00:02:52.539 align:start position:16% line:-2
Apple TV Remote App
などでも

00:02:52.639 --> 00:02:55.809 align:start position:32% line:-1
同様の操作が可能です

00:02:56.777 --> 00:02:59.546 align:start position:32% line:-2
さらに こんなことも
可能です

00:02:59.646 --> 00:03:02.783 align:start position:30% line:-2
僕のApple TVを
初めて使う人でも

00:02:59.646 --> 00:03:02.783 align:start position:30% line:-2
僕のApple TVを
初めて使う人でも

00:03:02.883 --> 00:03:06.320 align:start position:34% line:-2
簡単にサインインが
できるのです

00:03:06.420 --> 00:03:09.456 align:start position:32% line:-2
コンラッドに
やってもらいましょう

00:03:11.058 --> 00:03:13.994 align:start position:43% line:-1
(拍手)

00:03:14.094 --> 00:03:15.195 align:start position:41% line:-1
ありがとう

00:03:16.129 --> 00:03:20.200 align:start position:32% line:-2
僕はアレックスの家に
遊びに来ています

00:03:20.767 --> 00:03:22.803 align:start position:30% line:-1
彼の犬はかわいいですね

00:03:23.170 --> 00:03:28.408 align:start position:29% line:-2
でも自分の犬のマックスか
ミンの写真が見たいので

00:03:28.509 --> 00:03:30.911 align:start position:36% line:-2
shiny.に
サインインします

00:03:31.478 --> 00:03:34.815 align:start position:30% line:-2
彼のApple TVは
初めて使うので

00:03:34.915 --> 00:03:39.286 align:start position:32% line:-2
先ほどの方法では
サインインできません

00:03:39.520 --> 00:03:42.556 align:start position:25% line:-2
しかも
iCloud キーチェーンで

00:03:42.656 --> 00:03:46.360 align:start position:23% line:-2
強力なパスワードを管理していて
覚えていません

00:03:46.627 --> 00:03:49.663 align:start position:29% line:-1
自分のパスワードを調べて

00:03:49.763 --> 00:03:54.601 align:start position:29% line:-2
１文字ずつ入力することに
なりそうです

00:03:55.369 --> 00:03:56.803 align:start position:38% line:-1
見てみましょう

00:03:58.539 --> 00:04:01.842 align:start position:25% line:-1
僕のiPhoneを用意します

00:03:58.539 --> 00:04:01.842 align:start position:25% line:-1
僕のiPhoneを用意します

00:04:02.776 --> 00:04:05.012 align:start position:32% line:-1
サインインしましょう

00:04:05.312 --> 00:04:09.249 align:start position:30% line:-2
設定を開いたり
Siriにパスワードを

00:04:09.349 --> 00:04:11.618 align:start position:32% line:-1
聞かなくて済みました

00:04:11.718 --> 00:04:15.856 align:start position:20% line:-2
iPhoneがすでに パスワードの
自動入力をオファーしています

00:04:16.690 --> 00:04:19.293 align:start position:36% line:-1
この通知を開けば

00:04:20.594 --> 00:04:21.461 align:start position:41% line:-1
このとおり

00:04:21.628 --> 00:04:25.866 align:start position:34% line:-2
PINを入力すれば
Apple TVと

00:04:25.966 --> 00:04:28.635 align:start position:34% line:-1
安全に接続できます

00:04:29.136 --> 00:04:30.304 align:start position:30% line:-1
Touch IDで認証

00:04:31.305 --> 00:04:34.374 align:start position:23% line:-2
shiny.のクレデンシャルが
一番上に出ます

00:04:34.474 --> 00:04:37.444 align:start position:30% line:-1
ワンタップでサインイン

00:04:37.678 --> 00:04:38.812 align:start position:43% line:-1
簡単です

00:04:38.912 --> 00:04:42.816 align:start position:43% line:-1
(拍手)

00:04:42.916 --> 00:04:44.651 align:start position:38% line:-1
これはミンです

00:04:46.253 --> 00:04:48.655 align:start position:29% line:-1
なぜ今の操作ができたのか

00:04:48.956 --> 00:04:51.525 align:start position:30% line:-1
不思議に思われますよね

00:04:52.159 --> 00:04:55.729 align:start position:27% line:-2
なぜ僕のiPhoneだけに
通知が出たのか？

00:04:56.496 --> 00:04:59.933 align:start position:34% line:-2
これは本当に
すごい機能なんです

00:05:00.567 --> 00:05:04.571 align:start position:29% line:-2
Siri Remoteが
近くのiPhoneを探し

00:05:04.671 --> 00:05:07.441 align:start position:32% line:-1
通知を表示したのです

00:05:07.541 --> 00:05:10.744 align:start position:30% line:-2
それが
僕のiPhoneでした

00:05:11.211 --> 00:05:14.414 align:start position:29% line:-2
これが
パスワードの自動入力です

00:05:14.581 --> 00:05:18.285 align:start position:29% line:-2
アレックスに
戻ってきてもらいましょう

00:05:18.919 --> 00:05:23.724 align:start position:29% line:-2
どのアプリケーションでも
使えることをお見せします

00:05:23.924 --> 00:05:24.791 align:start position:41% line:-1
アレックス

00:05:25.192 --> 00:05:29.630 align:start position:43% line:-1
(拍手)

00:05:29.863 --> 00:05:30.898 align:start position:45% line:-1
どうも

00:05:31.465 --> 00:05:32.866 align:start position:39% line:-1
良いデモです

00:05:33.033 --> 00:05:34.801 align:start position:36% line:-1
すごい機能ですね

00:05:36.503 --> 00:05:41.074 align:start position:29% line:-2
パスワードの自動入力は
tvOSでのサインインを

00:05:41.175 --> 00:05:43.477 align:start position:29% line:-1
簡単にするためのものです

00:05:43.911 --> 00:05:48.649 align:start position:29% line:-2
アプリケーションを大きく
変える必要はありません

00:05:49.016 --> 00:05:54.121 align:start position:27% line:-2
少し手を加えるだけで
この機能が最大限に使えます

00:05:54.221 --> 00:05:55.856 align:start position:38% line:-1
確認しましょう

00:05:57.724 --> 00:06:01.795 align:start position:21% line:-1
まずQuickTypeバーを出し

00:05:57.724 --> 00:06:01.795 align:start position:21% line:-1
まずQuickTypeバーを出し

00:06:02.563 --> 00:06:07.067 align:start position:32% line:-2
次にクレデンシャルを
表示させます

00:06:07.601 --> 00:06:08.735 align:start position:45% line:-1
最後に

00:06:09.336 --> 00:06:12.472 align:start position:29% line:-2
ワンタップの
サインインを可能にします

00:06:12.639 --> 00:06:15.008 align:start position:34% line:-1
細かく見ていきます

00:06:16.343 --> 00:06:19.379 align:start position:21% line:-1
QuickTypeバーを出すには

00:06:19.479 --> 00:06:22.449 align:start position:18% line:-2
UITextContentTypeを
使います

00:06:23.116 --> 00:06:26.720 align:start position:30% line:-2
tvOSがユーザ名と
パスワードを探すために

00:06:26.820 --> 00:06:30.724 align:start position:32% line:-2
テキストフィールドを
強調します

00:06:31.358 --> 00:06:34.461 align:start position:32% line:-2
シングルプロパティと
同じくらい簡単です

00:06:34.561 --> 00:06:39.700 align:start position:20% line:-2
ユーザ名のフィールドには
textContentTypeに―

00:06:39.800 --> 00:06:44.271 align:start position:27% line:-2
.usernameを設定し
パスワードも同様にします

00:06:44.471 --> 00:06:47.508 align:start position:16% line:-2
Interface Builderでも
できます

00:06:48.775 --> 00:06:50.978 align:start position:18% line:-2
UITextContentTypeを
使うと

00:06:51.078 --> 00:06:54.548 align:start position:34% line:-2
画面にはこのような
通知が出ます

00:06:54.648 --> 00:06:58.252 align:start position:29% line:-2
これでパスワードの入力が
できますが

00:06:58.452 --> 00:07:01.889 align:start position:36% line:-2
何回もタップする
必要があります

00:06:58.452 --> 00:07:01.889 align:start position:36% line:-2
何回もタップする
必要があります

00:07:02.022 --> 00:07:04.791 align:start position:25% line:-1
QuickTypeバーの上に

00:07:04.992 --> 00:07:08.795 align:start position:34% line:-2
クレデンシャルを
表示したいですよね

00:07:09.496 --> 00:07:14.168 align:start position:14% line:-2
これを行うのが
Associated Domainsです

00:07:14.268 --> 00:07:18.872 align:start position:30% line:-2
クレデンシャルの候補を
安全に通知します

00:07:21.375 --> 00:07:24.111 align:start position:25% line:-1
この技術はHandoffなど

00:07:24.211 --> 00:07:27.781 align:start position:27% line:-1
他の機能にも使われています

00:07:31.685 --> 00:07:35.856 align:start position:32% line:-2
アプリケーションと
接続先のドメインとを

00:07:35.956 --> 00:07:38.158 align:start position:34% line:-1
安全に関連付けます

00:07:39.059 --> 00:07:41.595 align:start position:25% line:-2
これを使い
QuickTypeバー上に―

00:07:41.695 --> 00:07:45.399 align:start position:30% line:-2
正確なクレデンシャルを
表示します

00:07:46.667 --> 00:07:50.637 align:start position:9% line:-2
Associated Domainsを知るには
WWDC 2017の

00:07:50.737 --> 00:07:54.741 align:start position:0% line:-2
“Introducing Password AutoFill
for Apps”がお勧めです

00:07:55.108 --> 00:08:00.347 align:start position:27% line:-2
iOSでの使い方を
順を追って説明していますが

00:07:55.108 --> 00:08:00.347 align:start position:27% line:-2
iOSでの使い方を
順を追って説明していますが

00:08:00.447 --> 00:08:03.150 align:start position:29% line:-1
tvOSでも同じ手順です

00:08:04.651 --> 00:08:06.520 align:start position:36% line:-1
この技術を使うと

00:08:06.620 --> 00:08:11.992 align:start position:30% line:-2
shiny.の画面には
このように表示されます

00:08:12.092 --> 00:08:13.126 align:start position:38% line:-1
すごいですよね

00:08:13.227 --> 00:08:18.632 align:start position:29% line:-2
文字を入力することなく
フィールドが埋まりました

00:08:19.099 --> 00:08:22.503 align:start position:30% line:-2
ユーザが一番見たいのは
これですね

00:08:22.836 --> 00:08:26.106 align:start position:36% line:-2
ワンタップだけで
サインインして

00:08:26.206 --> 00:08:28.909 align:start position:30% line:-1
愛犬の写真が見られます

00:08:30.043 --> 00:08:34.615 align:start position:0% line:-2
preferredFocusEnvironments APIを
実装すれば可能です

00:08:36.216 --> 00:08:39.553 align:start position:32% line:-2
パスワードを入れると
フォーカスが更新され

00:08:39.653 --> 00:08:44.358 align:start position:29% line:-2
フォーカスされたボタンが
サインインを実行します

00:08:44.458 --> 00:08:47.928 align:start position:27% line:-1
このAPIを実装することで

00:08:48.028 --> 00:08:51.064 align:start position:32% line:-2
フォーカスエンジンが
ボタンを認識します

00:08:51.231 --> 00:08:53.133 align:start position:32% line:-1
では見ていきましょう

00:08:54.501 --> 00:08:58.305 align:start position:5% line:-2
UIFocusEnvironmentオブジェクトの
配列を返す―

00:08:58.405 --> 00:09:01.975 align:start position:0% line:-2
preferredFocusEnvironments APIの
サンプル画面です

00:08:58.405 --> 00:09:01.975 align:start position:0% line:-2
preferredFocusEnvironments APIの
サンプル画面です

00:09:02.876 --> 00:09:06.380 align:start position:34% line:-2
このフィールドから
テキストを抽出し

00:09:06.480 --> 00:09:09.816 align:start position:29% line:-2
loginButtonを
返すだけです

00:09:10.317 --> 00:09:14.121 align:start position:30% line:-2
ユーザが
まだ入力していない場合

00:09:14.221 --> 00:09:17.658 align:start position:18% line:-2
usernameTextFieldを
返し フォーカスさせます

00:09:17.891 --> 00:09:19.026 align:start position:43% line:-1
簡単です

00:09:20.594 --> 00:09:23.864 align:start position:27% line:-2
パスワードの
自動入力についてまとめます

00:09:25.098 --> 00:09:29.736 align:start position:32% line:-2
ワンタップだけで
サインインできるので

00:09:29.836 --> 00:09:33.307 align:start position:30% line:-1
ユーザの手間を省きます

00:09:33.540 --> 00:09:38.412 align:start position:30% line:-2
デベロッパにとっても
仕組みはとても簡単です

00:09:39.179 --> 00:09:43.217 align:start position:16% line:-1
UITextContentTypeや―

00:09:44.418 --> 00:09:48.956 align:start position:16% line:-2
Associated Domainsで
クレデンシャルを表示

00:09:49.923 --> 00:09:52.759 align:start position:2% line:-2
最後に
preferredFocusEnvironmentsで

00:09:52.860 --> 00:09:56.029 align:start position:27% line:-2
ワンタップでのサインインを
可能にします

00:09:56.697 --> 00:09:58.832 align:start position:23% line:-2
パスワードの自動入力については
以上です

00:09:58.932 --> 00:10:02.169 align:start position:32% line:-2
早く皆さんに
使ってもらいたいです

00:09:58.932 --> 00:10:02.169 align:start position:32% line:-2
早く皆さんに
使ってもらいたいです

00:10:02.402 --> 00:10:05.372 align:start position:30% line:-2
次はフォーカスについて
エイダがお話します

00:10:05.472 --> 00:10:11.445 align:start position:43% line:-1
(拍手)

00:10:13.313 --> 00:10:14.548 align:start position:41% line:-1
ありがとう

00:10:14.648 --> 00:10:16.216 align:start position:34% line:-1
どうも　エイダです

00:10:16.316 --> 00:10:22.089 align:start position:27% line:-2
tvOS 12で改良された
フォーカスをご紹介します

00:10:22.789 --> 00:10:27.394 align:start position:27% line:-2
アプリケーションの動作には
フォーカスが重要です

00:10:27.494 --> 00:10:32.366 align:start position:23% line:-2
Siri Remoteの
Touchサーフェスと連動して

00:10:32.466 --> 00:10:35.602 align:start position:34% line:-2
コンテンツ間を
滑らかに移動します

00:10:36.470 --> 00:10:39.706 align:start position:5% line:-2
UIKit SpriteKit SceneKitで
作られたアプリケーションは

00:10:39.806 --> 00:10:41.942 align:start position:36% line:-2
元々フォーカスに
対応しています

00:10:42.042 --> 00:10:45.879 align:start position:21% line:-2
しかし他の方法でレンダリングする
アプリケーションは

00:10:45.979 --> 00:10:49.349 align:start position:30% line:-2
フォーカスエンジンに
対応していませんでした

00:10:49.950 --> 00:10:53.187 align:start position:30% line:-2
今回 tvOS 12の
フォーカスエンジンは

00:10:53.287 --> 00:10:57.524 align:start position:29% line:-2
どのレンダリング方式でも
サポートします

00:10:57.858 --> 00:11:02.830 align:start position:43% line:-1
(拍手)

00:10:57.858 --> 00:11:02.830 align:start position:43% line:-1
(拍手)

00:11:02.930 --> 00:11:06.333 align:start position:30% line:-2
Metalで開発された
アプリケーションでも

00:11:06.433 --> 00:11:10.237 align:start position:34% line:-2
直接 フォーカスが
使えるのです

00:11:10.337 --> 00:11:13.340 align:start position:30% line:-2
UIKitを継承しない
クラスでも

00:11:13.440 --> 00:11:18.278 align:start position:32% line:-2
フォーカスへの適合が
可能になったからです

00:11:18.645 --> 00:11:20.914 align:start position:30% line:-1
フォーカスされた状態を

00:11:21.014 --> 00:11:25.185 align:start position:34% line:-2
アプリケーションが
管理するのです

00:11:25.285 --> 00:11:29.089 align:start position:30% line:-2
そしてフォーカスが
動ける範囲も特定します

00:11:29.189 --> 00:11:34.862 align:start position:25% line:-2
アクセシビリティのサポートや
スクロールなどの動きは

00:11:34.962 --> 00:11:38.031 align:start position:18% line:-2
ネイティブtvOSアプリケーションと
同じです

00:11:38.932 --> 00:11:41.635 align:start position:34% line:-2
新しいフォーカスの
APIを見る前に

00:11:41.735 --> 00:11:45.739 align:start position:27% line:-2
現在のフォーカスの
コンポーネントを紹介します

00:11:46.139 --> 00:11:48.642 align:start position:14% line:-2
まず
UIFocusEnvironmentです

00:11:48.742 --> 00:11:52.846 align:start position:29% line:-2
フォーカスが起こる状態を
管理するプロトコルです

00:11:52.946 --> 00:11:57.751 align:start position:27% line:-2
フォーカスの更新を通知して
ビヘイビアに影響します

00:11:57.851 --> 00:12:02.789 align:start position:5% line:-2
UIKitでは UIViewControllerが
これを実装しています

00:11:57.851 --> 00:12:02.789 align:start position:5% line:-2
UIKitでは UIViewControllerが
これを実装しています

00:12:03.323 --> 00:12:05.826 align:start position:21% line:-1
次に UIFocusItemです

00:12:06.260 --> 00:12:08.962 align:start position:16% line:-2
UIFocusEnvironmentを
継承し

00:12:09.062 --> 00:12:13.433 align:start position:29% line:-2
アイテムに
実際にフォーカスできます

00:12:13.534 --> 00:12:16.737 align:start position:16% line:-2
UIKitのUIViewや
SpriteKitのSKNodeなどに

00:12:16.837 --> 00:12:19.439 align:start position:36% line:-1
実装されています

00:12:19.840 --> 00:12:25.445 align:start position:18% line:-2
最後に UIFocusSystemは
フォーカス時の音を

00:12:25.546 --> 00:12:30.517 align:start position:30% line:-2
カスタマイズすることが
可能となっています

00:12:31.084 --> 00:12:35.589 align:start position:29% line:-2
詳しい情報やフォーカスの
デバッグについては

00:12:35.689 --> 00:12:41.428 align:start position:12% line:-2
“Focus Interaction in
tvOS 11”をお勧めします

00:12:42.029 --> 00:12:44.798 align:start position:32% line:-2
ここからは
フォーカスエンジンの

00:12:44.898 --> 00:12:47.401 align:start position:32% line:-1
新しい要素の紹介です

00:12:47.734 --> 00:12:50.337 align:start position:29% line:-1
まず tvOS 12では

00:12:50.437 --> 00:12:54.241 align:start position:18% line:-2
FocusSystemオブジェクトの
機能を拡張

00:12:54.341 --> 00:12:57.678 align:start position:21% line:-2
与えられた環境に対して
FocusSystemを読み出し

00:12:57.778 --> 00:13:01.748 align:start position:27% line:-2
そこからフォーカスされた
アイテムにアクセスできます

00:12:57.778 --> 00:13:01.748 align:start position:27% line:-2
そこからフォーカスされた
アイテムにアクセスできます

00:13:02.182 --> 00:13:07.020 align:start position:12% line:-2
新しいプロトコル
UIFocusItemContainerは

00:13:07.120 --> 00:13:10.524 align:start position:32% line:-2
空間的コンテキストを
アイテムに与えます

00:13:11.158 --> 00:13:14.628 align:start position:16% line:-2
UIFocusEnvironmentが
制御するプロトコルです

00:13:14.728 --> 00:13:18.232 align:start position:36% line:-2
アイテムの位置を
ある領域で特定し

00:13:18.332 --> 00:13:22.169 align:start position:27% line:-2
最適なフォーカスの候補へと
導きます

00:13:23.370 --> 00:13:28.909 align:start position:0% line:-2
特別なプロトコルの
UIFocusItemScrollableContainerは

00:13:29.009 --> 00:13:33.780 align:start position:27% line:-2
フォーカスが動く時の
スクロールをサポートします

00:13:34.381 --> 00:13:38.852 align:start position:12% line:-2
最後に
UIFocusMovementHintです

00:13:38.952 --> 00:13:42.890 align:start position:36% line:-2
Raw値によって
視覚効果を作り

00:13:42.990 --> 00:13:46.660 align:start position:34% line:-2
フォーカスの
次の動きを示します

00:13:47.161 --> 00:13:52.733 align:start position:29% line:-2
どのようにクラスを
組み込むか見てみましょう

00:13:53.066 --> 00:13:56.503 align:start position:11% line:-2
まずはUIFocusEnvironmentの
実装です

00:13:56.703 --> 00:14:02.509 align:start position:27% line:-2
フォーカスエンジンが
プロトコルを見つけるために

00:13:56.703 --> 00:14:02.509 align:start position:27% line:-2
フォーカスエンジンが
プロトコルを見つけるために

00:14:02.609 --> 00:14:07.214 align:start position:7% line:-2
parentFocusEnvironmentと
focusItemContainerを設定します

00:14:07.314 --> 00:14:11.318 align:start position:11% line:-2
例えば UIViewControllerでは
parentViewControllerに

00:14:11.418 --> 00:14:16.390 align:start position:9% line:-2
parentFocusEnvironmentを
設定するといった具合です

00:14:17.491 --> 00:14:22.763 align:start position:25% line:-2
更新をコントロールするための
メソッドがいくつかあります

00:14:22.863 --> 00:14:27.701 align:start position:4% line:-2
preferredFocusEnvironmentは
最初のビューが決まると

00:14:27.801 --> 00:14:31.605 align:start position:29% line:-2
次にフォーカスする場所を
選べます

00:14:31.705 --> 00:14:34.174 align:start position:38% line:-2
プログラムでの
更新も同じです

00:14:34.675 --> 00:14:39.446 align:start position:30% line:-2
さらに２つのメソッドを
ご紹介したいと思います

00:14:39.546 --> 00:14:43.050 align:start position:12% line:-2
SetNeedsFocusUpdateと
updateFocusIfNeededです

00:14:43.150 --> 00:14:45.285 align:start position:36% line:-1
これらの実装には

00:14:45.385 --> 00:14:50.090 align:start position:18% line:-2
UIFocusSystem上の特定の
メソッドを呼び出します

00:14:51.291 --> 00:14:55.262 align:start position:11% line:-2
次に
UIFocusItemContainerです

00:14:57.030 --> 00:14:59.933 align:start position:18% line:-2
まずcoordinateSpaceを
入力します

00:15:00.033 --> 00:15:02.803 align:start position:34% line:-2
UIView自体が
座標空間となります

00:15:02.903 --> 00:15:07.007 align:start position:12% line:-2
抽象クラスの場合は
今のcoordinateSpaceを返すか

00:15:07.107 --> 00:15:08.909 align:start position:32% line:-1
独自の座標空間を実装

00:15:09.776 --> 00:15:12.880 align:start position:12% line:-2
次にfocusItems in rectを
実装します

00:15:12.980 --> 00:15:16.083 align:start position:27% line:-2
これは与えられたrectと
重なった―

00:15:16.183 --> 00:15:18.919 align:start position:27% line:-1
すべてのアイテムを返します

00:15:19.052 --> 00:15:24.024 align:start position:21% line:-2
このメソッドに渡されたrectは
座標空間に現れます

00:15:24.124 --> 00:15:28.095 align:start position:30% line:-2
各アイテムのフレームも
同じように

00:15:28.195 --> 00:15:31.231 align:start position:14% line:-1
coordinateSpaceに現れます

00:15:33.100 --> 00:15:36.169 align:start position:25% line:-2
次にカスタムした
UIFocusItemを実装

00:15:36.770 --> 00:15:42.576 align:start position:7% line:-2
UIFocusEnvironmentのメソッドも
実装する必要があります

00:15:43.410 --> 00:15:46.847 align:start position:30% line:-2
アイテムにフォーカスを
動かすために

00:15:46.947 --> 00:15:50.117 align:start position:18% line:-2
canBecomeFocusedから
trueを返します

00:15:50.951 --> 00:15:56.223 align:start position:18% line:-1
ユーザがTouchサーフェスに触ると

00:15:56.323 --> 00:15:58.725 align:start position:29% line:-1
呼び出されるメソッドです

00:15:58.826 --> 00:16:02.129 align:start position:30% line:-2
フォーカスアイテムに
動きのヒントを与えます

00:15:58.826 --> 00:16:02.129 align:start position:30% line:-2
フォーカスアイテムに
動きのヒントを与えます

00:16:02.229 --> 00:16:05.365 align:start position:36% line:-2
視覚効果を作る
Raw値によって

00:16:05.466 --> 00:16:08.936 align:start position:30% line:-1
次の移動先を示すのです

00:16:09.570 --> 00:16:12.039 align:start position:27% line:-1
最後にフレームを設定します

00:16:12.139 --> 00:16:16.143 align:start position:12% line:-2
このフレームも
UIFocusItemContainerの

00:16:16.243 --> 00:16:18.679 align:start position:30% line:-1
座標空間に出現させます

00:16:18.779 --> 00:16:23.417 align:start position:23% line:-2
UIViewでは 親のビューの
座標空間に現れます

00:16:23.517 --> 00:16:28.355 align:start position:12% line:-2
UIFocusItemContainerと
同じ座標空間です

00:16:29.156 --> 00:16:33.427 align:start position:5% line:-2
UIFocusMovementHintオブジェクト
を詳しく見ましょう

00:16:34.061 --> 00:16:37.097 align:start position:29% line:-2
動きの方向はベクトル量で
値の範囲は―

00:16:37.197 --> 00:16:40.434 align:start position:27% line:-1
-１と-１から １と１です

00:16:40.534 --> 00:16:44.905 align:start position:32% line:-2
移動するフォーカスの
方向を表します

00:16:45.305 --> 00:16:48.809 align:start position:27% line:-2
この値は
Touchサーフェス上での

00:16:48.909 --> 00:16:51.378 align:start position:32% line:-1
指の動きと連動します

00:16:52.446 --> 00:16:56.416 align:start position:14% line:-2
perspective rotation
translationの値を使って

00:16:56.517 --> 00:17:00.454 align:start position:27% line:-2
tvOSでの
ヒントを出す動きを作ります

00:16:56.517 --> 00:17:00.454 align:start position:27% line:-2
tvOSでの
ヒントを出す動きを作ります

00:17:00.888 --> 00:17:06.560 align:start position:12% line:-2
interactionTransformが
この値を3Dに変換します

00:17:08.161 --> 00:17:13.367 align:start position:0% line:-2
UIFocusItemScrollableContainerを
実装しましょう

00:17:13.634 --> 00:17:18.638 align:start position:30% line:-2
この特別なプロトコルを
適合させることで

00:17:18.739 --> 00:17:22.576 align:start position:29% line:-2
スクロールをサポートする
信号が送られます

00:17:22.675 --> 00:17:26.346 align:start position:27% line:-2
UIScrollViewで
やってみましょう

00:17:26.847 --> 00:17:30.017 align:start position:27% line:-1
３つのプロパティを追加して

00:17:30.117 --> 00:17:33.187 align:start position:34% line:-2
スクロールの動きを
可能にします

00:17:33.287 --> 00:17:38.325 align:start position:23% line:-2
まずは読み書きを行う
contentOffsetです

00:17:38.425 --> 00:17:41.395 align:start position:27% line:-1
スクロールの距離を描きます

00:17:41.495 --> 00:17:45.065 align:start position:27% line:-2
フォーカスされたアイテムを
表示したままにする時

00:17:45.165 --> 00:17:50.270 align:start position:27% line:-2
フォーカスエンジンによって
自動的に生成されます

00:17:50.871 --> 00:17:53.073 align:start position:25% line:-1
次のcontentSizeは

00:17:53.173 --> 00:17:58.111 align:start position:25% line:-2
コンテンツのスクロール領域を
表すものです

00:17:58.212 --> 00:18:04.184 align:start position:16% line:-2
そしてvisibleSizeが表すのは
画面のサイズです

00:17:58.212 --> 00:18:04.184 align:start position:16% line:-2
そしてvisibleSizeが表すのは
画面のサイズです

00:18:04.284 --> 00:18:08.655 align:start position:5% line:-2
UIScrollViewのbounds.sizeと
類似しています

00:18:09.756 --> 00:18:14.127 align:start position:16% line:-2
重要なのはcontentOffsetが
自動生成されること

00:18:14.228 --> 00:18:18.899 align:start position:27% line:-2
生成時に適切な
コンテンツの更新を行うかは

00:18:18.999 --> 00:18:21.201 align:start position:38% line:-1
皆さん次第です

00:18:24.071 --> 00:18:28.642 align:start position:30% line:-2
次はアクセシビリティの
加え方です

00:18:28.809 --> 00:18:31.245 align:start position:36% line:-1
とても簡単ですよ

00:18:31.378 --> 00:18:35.916 align:start position:11% line:-2
UIFocusItemContainerと
focusItems in rectの実装で

00:18:36.016 --> 00:18:39.920 align:start position:34% line:-2
次のことが
可能になったのです

00:18:40.020 --> 00:18:43.023 align:start position:29% line:-2
VoiceOverによる
ナビゲーションです

00:18:43.390 --> 00:18:48.962 align:start position:12% line:-2
accessibilityLabelと
accessibilityHintを設定し

00:18:49.062 --> 00:18:53.367 align:start position:27% line:-2
快適なVoiceOverを
提供してください

00:18:53.534 --> 00:18:57.337 align:start position:30% line:-2
より詳しく知るためには
WWDC2016の

00:18:57.438 --> 00:19:01.642 align:start position:0% line:-2
“What's New in Accessibility”
をお勧めします

00:18:57.438 --> 00:19:01.642 align:start position:0% line:-2
“What's New in Accessibility”
をお勧めします

00:19:01.742 --> 00:19:06.813 align:start position:18% line:-2
tvOSでのフォーカスと
VoiceOverのことが分かります

00:19:08.148 --> 00:19:11.285 align:start position:32% line:-2
ここで
ポールを呼びましょう

00:19:11.385 --> 00:19:15.322 align:start position:23% line:-2
Metalアプリケーションでの
デモをお見せします

00:19:16.290 --> 00:19:21.795 align:start position:43% line:-1
(拍手)

00:19:21.895 --> 00:19:22.796 align:start position:45% line:-1
どうも

00:19:23.764 --> 00:19:26.800 align:start position:27% line:-2
Metalを使ったゲームの
画面を作っています

00:19:27.034 --> 00:19:29.837 align:start position:30% line:-1
下側には標準的なボタン

00:19:30.504 --> 00:19:33.740 align:start position:32% line:-2
上側にはレベルを選ぶ
タイルです

00:19:33.941 --> 00:19:36.677 align:start position:27% line:-1
ゲームエンジンが描きました

00:19:36.777 --> 00:19:39.813 align:start position:27% line:-1
見事な3Dグラフィックです

00:19:40.647 --> 00:19:43.517 align:start position:34% line:-2
リモートでタイルを
選択します

00:19:44.184 --> 00:19:47.454 align:start position:32% line:-2
今までは自分で
イベントをハンドルし

00:19:47.621 --> 00:19:52.059 align:start position:21% line:-2
フォーカスエンジンに合う
ナビゲーションを実装していました

00:19:52.159 --> 00:19:56.363 align:start position:25% line:-2
tvOS 12では タイルを
直接結びつけられます

00:19:56.530 --> 00:19:57.931 align:start position:39% line:-1
やってみます

00:20:01.368 --> 00:20:06.173 align:start position:21% line:-2
LevelTileクラスを拡張し
UIFocusItemを実装

00:20:06.540 --> 00:20:09.042 align:start position:30% line:-2
これで
フォーカスが当たります

00:20:09.810 --> 00:20:13.380 align:start position:36% line:-2
上部のコードに
注目してください

00:20:14.081 --> 00:20:17.818 align:start position:20% line:-2
canBecomeFocusedを
trueに入力

00:20:18.552 --> 00:20:22.890 align:start position:9% line:-2
parentFocusEnvironmentは
戻り値をレンダ可能のビューに

00:20:23.423 --> 00:20:25.893 align:start position:4% line:-1
didUpdateFocus in contextは

00:20:25.993 --> 00:20:30.497 align:start position:27% line:-2
フォーカス時のタイルを
activeにセットします

00:20:31.532 --> 00:20:35.068 align:start position:29% line:-2
次にフォーカスエンジンを
設定します

00:20:35.335 --> 00:20:39.673 align:start position:23% line:-2
レンダ可能なMetalビューに
拡張します

00:20:40.374 --> 00:20:44.044 align:start position:34% line:-2
ビュー階層には
組み込み済みのため

00:20:44.144 --> 00:20:45.812 align:start position:32% line:-1
余計な設定はしません

00:20:46.380 --> 00:20:50.651 align:start position:9% line:-2
UIViewなので
UIFocusItemContainerに従い

00:20:50.751 --> 00:20:53.720 align:start position:18% line:-2
coordinateSpaceとして
機能します

00:20:54.288 --> 00:20:57.858 align:start position:12% line:-2
あとはfocusItem in rectを
オーバーライド

00:20:58.058 --> 00:21:02.162 align:start position:23% line:-2
UIFocusItemとなった
タイルを返します

00:20:58.058 --> 00:21:02.162 align:start position:23% line:-2
UIFocusItemとなった
タイルを返します

00:21:03.030 --> 00:21:04.765 align:start position:34% line:-1
タイルを返すだけで

00:21:04.865 --> 00:21:08.902 align:start position:27% line:-2
フォーカスの
パフォーマンスが得られます

00:21:10.204 --> 00:21:13.307 align:start position:30% line:-1
では表示してみましょう

00:21:17.978 --> 00:21:20.948 align:start position:32% line:-2
タイルが
フォーカス可能となり

00:21:21.048 --> 00:21:24.251 align:start position:27% line:-1
標準的な効果音も加わります

00:21:24.351 --> 00:21:29.056 align:start position:32% line:-2
下部のボタンにも
フォーカスが可能です

00:21:30.257 --> 00:21:33.961 align:start position:30% line:-2
しかしタイルが
画面から途切れていると

00:21:34.061 --> 00:21:37.464 align:start position:34% line:-2
フォーカスを
見失ってしまいます

00:21:38.031 --> 00:21:43.403 align:start position:30% line:-2
そこでタイルが画面内へ
動く設定を行います

00:21:46.273 --> 00:21:48.842 align:start position:27% line:-1
レンダ可能のビューにします

00:21:48.942 --> 00:21:52.546 align:start position:0% line:-2
今回 実装するのは
UIFocusItemScrollableContainer

00:21:52.946 --> 00:21:57.251 align:start position:25% line:-2
contentOffsetで
レンダリングを調整します

00:21:57.384 --> 00:22:03.524 align:start position:27% line:-2
これでフォーカスされた
アイテムは画面内に動きます

00:21:57.384 --> 00:22:03.524 align:start position:27% line:-2
これでフォーカスされた
アイテムは画面内に動きます

00:22:04.124 --> 00:22:08.362 align:start position:21% line:-2
UIViewのため
bounds.originで更新

00:22:08.462 --> 00:22:11.698 align:start position:21% line:-2
coordinateSpaceは
引き続き機能します

00:22:14.668 --> 00:22:15.802 align:start position:41% line:-1
実行します

00:22:18.539 --> 00:22:22.109 align:start position:29% line:-2
フォーカスされたタイルは
画面内に収まり

00:22:22.609 --> 00:22:26.980 align:start position:32% line:-2
またスクロールも
スムーズになりました

00:22:27.080 --> 00:22:27.781 align:start position:41% line:-1
ありがとう

00:22:28.182 --> 00:22:32.886 align:start position:27% line:-2
UIScrollViewの
アニメーションに似ています

00:22:34.121 --> 00:22:37.157 align:start position:29% line:-1
さらに機能を向上できます

00:22:37.257 --> 00:22:42.329 align:start position:27% line:-2
本来の仕様のように
タイルに動作を与えられます

00:22:43.697 --> 00:22:44.898 align:start position:36% line:-1
やってみましょう

00:22:46.233 --> 00:22:48.068 align:start position:29% line:-1
LevelTileに戻り

00:22:48.302 --> 00:22:52.739 align:start position:12% line:-2
didHintFocusMovementを
実装します

00:22:53.807 --> 00:22:57.778 align:start position:9% line:-2
現れたperspective
rotation translationの値を

00:22:57.878 --> 00:23:02.015 align:start position:30% line:-2
タイルのレンダリングに
適用します

00:22:57.878 --> 00:23:02.015 align:start position:30% line:-2
タイルのレンダリングに
適用します

00:23:03.217 --> 00:23:04.251 align:start position:38% line:-1
見てみましょう

00:23:10.224 --> 00:23:15.495 align:start position:30% line:-2
パッド上の指の動きに
タイルが反応しています

00:23:16.063 --> 00:23:19.600 align:start position:34% line:-2
まるでUIKitを
使用したかのような

00:23:19.766 --> 00:23:23.203 align:start position:34% line:-2
フォーカスの動きに
なりました

00:23:23.303 --> 00:23:24.605 align:start position:38% line:-1
では エイダに

00:23:24.805 --> 00:23:28.575 align:start position:43% line:-1
(拍手)

00:23:28.675 --> 00:23:29.943 align:start position:34% line:-1
ありがとう　ポール

00:23:30.577 --> 00:23:33.013 align:start position:32% line:-1
すばらしいデモでした

00:23:33.113 --> 00:23:38.185 align:start position:23% line:-2
少しコードを加えれば
Metalのインターフェースで

00:23:38.285 --> 00:23:44.024 align:start position:30% line:-2
スムーズなフォーカスの
動作が可能になります

00:23:44.124 --> 00:23:46.693 align:start position:20% line:-2
まるでネイティブ
tvOSアプリケーションと同じです

00:23:47.394 --> 00:23:51.432 align:start position:34% line:-2
では紹介した機能を
振り返りましょう

00:23:52.065 --> 00:23:56.904 align:start position:12% line:-2
１つ目はUIFocusItemと
UIFocusEnvironmentの実装

00:23:57.004 --> 00:24:00.174 align:start position:27% line:-2
UIKitコンポーネントは
不要です

00:23:57.004 --> 00:24:00.174 align:start position:27% line:-2
UIKitコンポーネントは
不要です

00:24:00.674 --> 00:24:04.044 align:start position:14% line:-2
２つ目は
UIFocusItemContainer

00:24:04.144 --> 00:24:09.416 align:start position:29% line:-2
フォーカスの動作が
非常にスムーズになります

00:24:10.017 --> 00:24:12.553 align:start position:12% line:-2
３つ目は
UIFocusMovementHintの値

00:24:12.653 --> 00:24:17.090 align:start position:21% line:-2
Siri Remoteと連動した
インターフェースが出来ます

00:24:17.791 --> 00:24:21.295 align:start position:0% line:-2
４つ目は
UIFocusItemScrollableContainer

00:24:21.395 --> 00:24:26.767 align:start position:27% line:-2
スムーズで使いやすい
スクロール感覚を得られます

00:24:26.867 --> 00:24:32.539 align:start position:29% line:-2
最後はアクセシビリティの
サポートを紹介しました

00:24:32.639 --> 00:24:37.578 align:start position:27% line:-2
これらのプロトコルを適用し
必要な属性を与えれば

00:24:37.678 --> 00:24:40.480 align:start position:29% line:-2
誰でもアプリケーションを
楽しめます

00:24:40.981 --> 00:24:44.585 align:start position:20% line:-2
すべてDeveloperベータ版で
利用できます

00:24:44.685 --> 00:24:48.722 align:start position:32% line:-2
新機能の実装が
いかに手軽にできるか

00:24:48.822 --> 00:24:51.792 align:start position:29% line:-1
体感してもらえるでしょう

00:24:52.125 --> 00:24:55.229 align:start position:23% line:-1
それではハンスより tvOSの

00:24:55.329 --> 00:24:58.665 align:start position:30% line:-2
UIデザインパターンを
紹介します

00:24:58.766 --> 00:25:01.101 align:start position:43% line:-1
(拍手)

00:24:58.766 --> 00:25:01.101 align:start position:43% line:-1
(拍手)

00:25:01.201 --> 00:25:02.135 align:start position:34% line:-1
ありがとう　エイダ

00:25:04.671 --> 00:25:09.176 align:start position:32% line:-2
連動性を実感する上で
フォーカスは重要です

00:25:09.676 --> 00:25:13.714 align:start position:27% line:-2
tvOSには多くの
共通UIパターンがあります

00:25:14.314 --> 00:25:19.820 align:start position:27% line:-2
一例としてフォーカス時に
文字が動くラベルがあります

00:25:21.488 --> 00:25:25.058 align:start position:27% line:-1
流れる文字やアニメーション

00:25:25.159 --> 00:25:28.462 align:start position:34% line:-2
これらはラベルの
ジオメトリを変えず

00:25:28.562 --> 00:25:31.265 align:start position:27% line:-1
可変長文字列を表示できます

00:25:32.466 --> 00:25:37.805 align:start position:27% line:-2
また視覚的に強調する上でも
非常に効果的です

00:25:38.906 --> 00:25:44.878 align:start position:23% line:-2
これまでtvOSでは扱いにくい
ビヘイビアでしたが

00:25:45.045 --> 00:25:46.647 align:start position:38% line:-1
それは過去の話

00:25:47.514 --> 00:25:50.984 align:start position:34% line:-2
tvOS 12では
容易になりました

00:25:52.119 --> 00:25:54.354 align:start position:27% line:-1
新たなプロパティをセットし

00:25:54.822 --> 00:25:58.192 align:start position:4% line:-2
enablesMarqueeWhenAncestor
Focusedをtrueにするだけ

00:25:58.325 --> 00:26:02.029 align:start position:43% line:-1
(拍手)

00:25:58.325 --> 00:26:02.029 align:start position:43% line:-1
(拍手)

00:26:02.129 --> 00:26:05.666 align:start position:34% line:-2
これでフォーカスを
あててみます

00:26:05.799 --> 00:26:09.303 align:start position:30% line:-2
ラベルに収まりきらない
文字列でも―

00:26:11.805 --> 00:26:15.776 align:start position:30% line:-2
文字が横に移動しながら
表示されます

00:26:17.077 --> 00:26:22.583 align:start position:27% line:-2
このようなビヘイビアを
簡単にラベルに与えられます

00:26:23.317 --> 00:26:25.552 align:start position:30% line:-2
これは
テキストスクロールです

00:26:27.120 --> 00:26:31.859 align:start position:29% line:-2
tvOSには他にも
様々なパターンがあります

00:26:32.292 --> 00:26:35.696 align:start position:27% line:-2
例えば
フォーカス時の画像やラベル

00:26:38.065 --> 00:26:41.602 align:start position:30% line:-2
１つのユニットで
フロートするビュー階層

00:26:44.505 --> 00:26:48.075 align:start position:34% line:-2
好みの動作を
設定したボタンや―

00:26:50.844 --> 00:26:52.946 align:start position:30% line:-1
ウィジェットもあります

00:26:53.847 --> 00:26:58.986 align:start position:25% line:-2
これらのパターンはtvOSの
至る箇所に適用できます

00:26:59.152 --> 00:27:02.222 align:start position:36% line:-2
TVMLKitで
利用可能ですので

00:26:59.152 --> 00:27:02.222 align:start position:36% line:-2
TVMLKitで
利用可能ですので

00:27:02.322 --> 00:27:05.192 align:start position:27% line:-2
皆さんのアプリケーションも
対応します

00:27:06.193 --> 00:27:08.495 align:start position:23% line:-1
ではUIKitならどうでしょう

00:27:09.296 --> 00:27:13.967 align:start position:18% line:-2
tvOS 12ではUIKitベースの
アプリケーションでも

00:27:14.601 --> 00:27:18.338 align:start position:32% line:-2
利用できるパターンが
あります

00:27:18.438 --> 00:27:23.043 align:start position:43% line:-1
(拍手)

00:27:23.143 --> 00:27:27.181 align:start position:32% line:-2
新たに追加されたのが
TVUIKitです

00:27:29.149 --> 00:27:32.019 align:start position:27% line:-1
４つの要素を取り入れました

00:27:32.352 --> 00:27:33.287 align:start position:43% line:-1
ポスター

00:27:33.854 --> 00:27:35.189 align:start position:34% line:-1
キャプションボタン

00:27:35.722 --> 00:27:36.490 align:start position:45% line:-1
カード

00:27:37.157 --> 00:27:38.358 align:start position:38% line:-1
モノグラムです

00:27:39.259 --> 00:27:40.594 align:start position:34% line:-1
それぞれ紹介します

00:27:41.728 --> 00:27:43.530 align:start position:38% line:-1
まずはポスター

00:27:44.231 --> 00:27:48.368 align:start position:27% line:-2
TVPosterViewは
画像に特化した表示形式です

00:27:49.269 --> 00:27:52.873 align:start position:34% line:-2
フッターは
２つのラベルに分割

00:27:53.640 --> 00:27:55.475 align:start position:34% line:-1
フォーカスされると

00:27:55.709 --> 00:27:59.746 align:start position:30% line:-2
画像が拡大し
ラベルも同様に動きます

00:28:00.814 --> 00:28:05.485 align:start position:32% line:-2
フォーカスが外れると
元のサイズに戻ります

00:28:06.887 --> 00:28:09.289 align:start position:30% line:-1
画像をプログラムすれば

00:28:09.389 --> 00:28:12.926 align:start position:27% line:-1
適当なサイズで拡大されます

00:28:14.328 --> 00:28:18.699 align:start position:29% line:-2
簡単な操作で このような
インターフェースが

00:28:18.866 --> 00:28:20.100 align:start position:39% line:-1
作成できます

00:28:21.768 --> 00:28:23.537 align:start position:23% line:-1
TVPosterViewでした

00:28:24.638 --> 00:28:26.340 align:start position:29% line:-1
続いてキャプションボタン

00:28:27.241 --> 00:28:29.676 align:start position:16% line:-1
形式はCall To Actionです

00:28:32.045 --> 00:28:38.018 align:start position:14% line:-2
TVCaptionButtonViewは
ボタン型のビューになります

00:28:39.186 --> 00:28:42.589 align:start position:29% line:-1
フッターにはラベルが２つ

00:28:43.791 --> 00:28:49.530 align:start position:29% line:-2
コンテンツ部分には画像や
テキストなどが入ります

00:28:50.931 --> 00:28:55.402 align:start position:30% line:-2
フォーカスされると
フロート状態になります

00:28:56.203 --> 00:29:00.741 align:start position:20% line:-2
TVPosterViewとは異なり
拡大する方向は

00:28:56.203 --> 00:29:00.741 align:start position:20% line:-2
TVPosterViewとは異なり
拡大する方向は

00:29:00.841 --> 00:29:03.210 align:start position:34% line:-1
上部と左右だけです

00:29:04.812 --> 00:29:09.116 align:start position:29% line:-2
フロート時のモーションは
横揺れか―

00:29:09.683 --> 00:29:11.285 align:start position:36% line:-1
縦揺れにできます

00:29:12.820 --> 00:29:17.524 align:start position:27% line:-2
複数のボタンを作成し
共通のモーションを与えれば

00:29:17.791 --> 00:29:19.693 align:start position:30% line:-1
グループ分けも可能です

00:29:20.661 --> 00:29:23.297 align:start position:12% line:-2
TVCaptionButtonViewなら
簡単です

00:29:25.199 --> 00:29:27.100 align:start position:38% line:-1
次にカードです

00:29:28.802 --> 00:29:30.938 align:start position:23% line:-1
TVCardViewの形式は―

00:29:32.172 --> 00:29:37.211 align:start position:27% line:-2
任意に構成したビュー階層が
表示されます

00:29:39.546 --> 00:29:41.281 align:start position:32% line:-1
フォーカスが当たると

00:29:42.282 --> 00:29:48.622 align:start position:25% line:-2
コンテンツ部分とサブビューが
一体になってフロートします

00:29:51.425 --> 00:29:56.697 align:start position:30% line:-2
インターフェースは
このように仕上がります

00:29:59.199 --> 00:30:00.634 align:start position:38% line:-1
操作は簡単です

00:29:59.199 --> 00:30:00.634 align:start position:38% line:-1
操作は簡単です

00:30:02.102 --> 00:30:04.938 align:start position:34% line:-1
次はモノグラムです

00:30:06.707 --> 00:30:09.243 align:start position:29% line:-1
ユーザ表示に適しています

00:30:10.844 --> 00:30:15.215 align:start position:23% line:-2
TVMonogramViewは
画像を円形に表示します

00:30:15.582 --> 00:30:19.186 align:start position:27% line:-1
フッターはラベルが２つです

00:30:20.354 --> 00:30:24.024 align:start position:36% line:-2
ユーザ名や画像を
載せない場合

00:30:24.258 --> 00:30:27.327 align:start position:32% line:-2
一般的な
シルエットだけ出ます

00:30:29.029 --> 00:30:34.568 align:start position:29% line:-2
名前のみならイニシャルの
モノグラムが表示されます

00:30:36.970 --> 00:30:41.875 align:start position:32% line:-2
当然ながら画像は
そのまま反映されます

00:30:43.944 --> 00:30:46.547 align:start position:32% line:-1
フォーカスが当たると

00:30:47.281 --> 00:30:50.884 align:start position:34% line:-2
ラベルが下方に避け
画像は拡大します

00:30:52.953 --> 00:30:55.222 align:start position:21% line:-1
TVMonogramViewなら

00:30:55.889 --> 00:30:58.959 align:start position:27% line:-2
このような
インターフェースが出来ます

00:30:59.760 --> 00:31:04.398 align:start position:32% line:-2
４つの要素に共通する
パターンもあります

00:30:59.760 --> 00:31:04.398 align:start position:32% line:-2
４つの要素に共通する
パターンもあります

00:31:05.566 --> 00:31:08.202 align:start position:29% line:-1
メインとなるコンテンツに

00:31:09.103 --> 00:31:11.171 align:start position:32% line:-2
ヘッダーとフッターを
添えます

00:31:11.705 --> 00:31:15.976 align:start position:29% line:-2
フォーカス時は
ヘッダーとフッターが動き

00:31:16.076 --> 00:31:18.479 align:start position:27% line:-1
コンテンツ部分が拡大します

00:31:20.414 --> 00:31:25.352 align:start position:16% line:-2
基底クラスのTVLockupViewに
設定されています

00:31:27.254 --> 00:31:31.358 align:start position:27% line:-2
TVLockupViewで
カスタマイズしたビューは

00:31:31.959 --> 00:31:33.894 align:start position:36% line:-1
サイズが明確です

00:31:34.461 --> 00:31:37.898 align:start position:36% line:-2
レイアウトに
非常に役立ちます

00:31:39.967 --> 00:31:44.571 align:start position:27% line:-2
フォーカス時
ビューの拡大サイズに関して

00:31:45.672 --> 00:31:51.011 align:start position:30% line:-2
４方向それぞれに
異なる幅を指定できます

00:31:52.479 --> 00:31:55.816 align:start position:12% line:-2
TVCaptionButtonViewでも
可能です

00:31:59.153 --> 00:32:02.923 align:start position:34% line:-2
自身のコンテンツを
載せる場合

00:31:59.153 --> 00:32:02.923 align:start position:34% line:-2
自身のコンテンツを
載せる場合

00:32:03.123 --> 00:32:07.561 align:start position:11% line:-2
TVLockupViewComponentの
プロトコルが使えます

00:32:08.562 --> 00:32:10.898 align:start position:27% line:-2
TVLockupViewの
stateを変えると

00:32:10.998 --> 00:32:14.334 align:start position:20% line:-2
updateAppearanceが
呼び出されます

00:32:14.535 --> 00:32:17.404 align:start position:27% line:-1
全サブビューに適用されます

00:32:18.272 --> 00:32:21.742 align:start position:32% line:-2
サブビューの
ビヘイビアが更新され

00:32:21.842 --> 00:32:25.045 align:start position:30% line:-2
デザインの
カスタマイズも可能です

00:32:28.148 --> 00:32:33.387 align:start position:27% line:-2
フォーカスに反応する
ウィジェットも作成できます

00:32:33.587 --> 00:32:38.992 align:start position:27% line:-2
先ほどの４種のサブクラスも
カスタマイズ可能です

00:32:40.761 --> 00:32:43.297 align:start position:27% line:-2
TVLockupViewと
そのサブクラスでした

00:32:45.065 --> 00:32:48.469 align:start position:34% line:-2
最後に紹介するのが
こちらです

00:32:49.770 --> 00:32:55.676 align:start position:29% line:-2
このような画面の実装には
複雑な手順を要します

00:32:57.611 --> 00:33:03.484 align:start position:4% line:-2
しかしそれを容易にするのが
TVDigitEntryViewController

00:32:57.611 --> 00:33:03.484 align:start position:4% line:-2
しかしそれを容易にするのが
TVDigitEntryViewController

00:33:05.385 --> 00:33:09.289 align:start position:34% line:-2
これは全画面表示を
使用します

00:33:09.423 --> 00:33:13.093 align:start position:27% line:-1
タイトルや入力を促すラベル

00:33:13.927 --> 00:33:17.297 align:start position:32% line:-2
桁入力のビュー
キーボードが現れます

00:33:19.433 --> 00:33:23.036 align:start position:30% line:-2
この機能で
カスタマイズできるのは

00:33:23.437 --> 00:33:25.572 align:start position:36% line:-1
パスコードの桁数

00:33:26.440 --> 00:33:30.077 align:start position:32% line:-2
入力値が
正しいかどうかの判断

00:33:32.146 --> 00:33:35.616 align:start position:36% line:-2
数字を処理する
完了ハンドラです

00:33:36.817 --> 00:33:41.822 align:start position:27% line:-2
この機能に関しては
マーシャルがデモを行います

00:33:41.922 --> 00:33:47.060 align:start position:43% line:-1
(拍手)

00:33:48.295 --> 00:33:49.863 align:start position:38% line:-1
マーシャルです

00:33:49.963 --> 00:33:53.700 align:start position:4% line:-2
ご紹介するのは
TVDigitEntryViewController

00:33:53.801 --> 00:33:56.937 align:start position:32% line:-2
ユーザの数字データを
扱います

00:33:57.037 --> 00:34:01.408 align:start position:18% line:-2
今回 “Top Movies”という
アプリケーションを使います

00:33:57.037 --> 00:34:01.408 align:start position:18% line:-2
今回 “Top Movies”という
アプリケーションを使います

00:34:01.508 --> 00:34:05.045 align:start position:34% line:-2
コンテンツの適性は
人それぞれ

00:34:05.145 --> 00:34:10.650 align:start position:29% line:-2
そこでPINコードを使い
視聴者を制限します

00:34:10.984 --> 00:34:16.023 align:start position:21% line:-2
TVPosterViewを使った
コレクションビューです

00:34:16.889 --> 00:34:21.628 align:start position:4% line:-2
didSelectItemAt indexPathが
このビューのコードです

00:34:21.728 --> 00:34:25.799 align:start position:2% line:-2
TVDigitEntryViewControllerを
用意し

00:34:25.899 --> 00:34:31.605 align:start position:27% line:-2
５桁のパスコードを要求する
テキストに設定します

00:34:32.005 --> 00:34:33.873 align:start position:36% line:-1
桁数は５とします

00:34:33.974 --> 00:34:38.579 align:start position:20% line:-2
パスコードを扱うため
isSecureはtrueにセット

00:34:40.114 --> 00:34:43.583 align:start position:7% line:-2
次に実装するのが
entryCompletionHandlerです

00:34:44.051 --> 00:34:50.257 align:start position:29% line:-2
ユーザがビューに入力を
終えると文字列を返します

00:34:50.791 --> 00:34:54.628 align:start position:34% line:-2
今回は５桁すべてを
１に設定します

00:34:54.728 --> 00:34:58.365 align:start position:18% line:-2
入力が正しければ
View Controllerが外れ

00:34:58.465 --> 00:35:02.669 align:start position:34% line:-2
間違いなら無効だと
ユーザに伝えます

00:34:58.465 --> 00:35:02.669 align:start position:34% line:-2
間違いなら無効だと
ユーザに伝えます

00:35:02.770 --> 00:35:05.672 align:start position:14% line:-2
clearEntryのanimatedを
trueにすると

00:35:05.772 --> 00:35:11.712 align:start position:27% line:-2
入力された数字が消え
エラーを示すことができます

00:35:12.379 --> 00:35:14.481 align:start position:18% line:-2
最後に
View Controllerですが

00:35:14.581 --> 00:35:19.052 align:start position:30% line:-2
表示形式の
カスタマイズが可能です

00:35:19.153 --> 00:35:24.057 align:start position:9% line:-2
昨年に紹介した
blurOverFullScreenを使います

00:35:25.426 --> 00:35:27.127 align:start position:34% line:-1
では実行してみます

00:35:28.095 --> 00:35:30.130 align:start position:36% line:-1
映画を選択します

00:35:30.230 --> 00:35:34.968 align:start position:29% line:-2
背景がぼやけて
パスコードが求められます

00:35:35.335 --> 00:35:40.007 align:start position:27% line:-2
正しくは５桁すべて１ですが
２にしてみます

00:35:40.407 --> 00:35:43.710 align:start position:34% line:-2
枠が揺れ
入力値が消えました

00:35:44.111 --> 00:35:46.480 align:start position:34% line:-1
では１を入力します

00:35:46.914 --> 00:35:51.018 align:start position:18% line:-2
View Controllerが外れ
視聴可能になりました

00:35:52.386 --> 00:35:57.124 align:start position:27% line:-2
ユーザ自身が
パスコードを設定したい場合

00:35:57.224 --> 00:36:02.830 align:start position:27% line:-2
設定ボタンから行えるように
調整が可能です

00:35:57.224 --> 00:36:02.830 align:start position:27% line:-2
設定ボタンから行えるように
調整が可能です

00:36:03.297 --> 00:36:05.499 align:start position:23% line:-1
IBActionをセットします

00:36:05.899 --> 00:36:09.703 align:start position:2% line:-2
TVDigitEntryViewControllerを
再び用意

00:36:09.837 --> 00:36:12.539 align:start position:32% line:-1
タイトルテキストには

00:36:12.639 --> 00:36:16.410 align:start position:30% line:-2
視聴制限のための
パスコード要求をセット

00:36:16.510 --> 00:36:18.378 align:start position:36% line:-1
桁数は５にします

00:36:19.313 --> 00:36:23.250 align:start position:9% line:-2
entryCompletionHandlerを
再び実装します

00:36:23.350 --> 00:36:28.155 align:start position:12% line:-2
するとオプショナル変数
passcodeToVerifyが現れます

00:36:28.255 --> 00:36:33.193 align:start position:29% line:-2
１回目にユーザが入力した
パスコードは維持され

00:36:33.293 --> 00:36:37.197 align:start position:32% line:-2
再入力のパスコードと
照合できます

00:36:37.397 --> 00:36:40.100 align:start position:38% line:-2
完了ハンドラが
呼び出された時

00:36:40.500 --> 00:36:42.703 align:start position:20% line:-2
passcodeToVerifyが
nilか確認

00:36:42.803 --> 00:36:48.175 align:start position:27% line:-2
１回目ならユーザに
パスコードの確認を促します

00:36:48.275 --> 00:36:52.146 align:start position:14% line:-2
clearEntryのanimatedは
falseにします

00:36:52.246 --> 00:36:56.884 align:start position:32% line:-2
揺れがなくなり
入力値だけが消えます

00:36:57.151 --> 00:37:00.087 align:start position:20% line:-2
passcodeToVerifyに
値があれば

00:36:57.151 --> 00:37:00.087 align:start position:20% line:-2
passcodeToVerifyに
値があれば

00:37:00.187 --> 00:37:03.190 align:start position:34% line:-2
ユーザが確認中だと
分かります

00:37:03.290 --> 00:37:07.361 align:start position:30% line:-2
パスコードが正しければ
保存します

00:37:07.461 --> 00:37:12.399 align:start position:27% line:-2
間違いなら指示テキストを
リセットして入力値をクリア

00:37:12.499 --> 00:37:15.802 align:start position:30% line:-2
改めてパスコード入力を
要求します

00:37:15.903 --> 00:37:18.238 align:start position:16% line:-2
あとはView Controllerの
調整です

00:37:21.909 --> 00:37:25.512 align:start position:29% line:-2
設定を押すと
新規パスコードが要求され

00:37:25.612 --> 00:37:29.449 align:start position:38% line:-2
数字を入力後
確認に移ります

00:37:29.750 --> 00:37:31.618 align:start position:38% line:-1
全部２にします

00:37:32.019 --> 00:37:35.823 align:start position:36% line:-2
正しくないので
再入力が必要です

00:37:36.256 --> 00:37:39.226 align:start position:29% line:-1
PINコードを保存すれば

00:37:39.326 --> 00:37:42.562 align:start position:32% line:-2
ユーザは必要に応じて
設定できます

00:37:43.397 --> 00:37:47.734 align:start position:2% line:-2
TVDigitEntryViewControllerの
実装手順は以上です

00:37:47.935 --> 00:37:49.603 align:start position:30% line:-1
ではハンスに代わります

00:37:49.703 --> 00:37:52.706 align:start position:43% line:-1
(拍手)

00:37:52.806 --> 00:37:54.041 align:start position:30% line:-1
ありがとう　マーシャル

00:37:55.275 --> 00:38:00.714 align:start position:20% line:-2
TVUIKitの共通UIパターンを
デモで紹介しました

00:37:55.275 --> 00:38:00.714 align:start position:20% line:-2
TVUIKitの共通UIパターンを
デモで紹介しました

00:38:02.516 --> 00:38:08.722 align:start position:23% line:-2
TVUIKitには右横書きなど
ローカライズ機能もあります

00:38:09.022 --> 00:38:10.758 align:start position:29% line:-1
アクセシビリティにも対応

00:38:11.391 --> 00:38:15.729 align:start position:25% line:-2
Developerベータ版を
ダウンロードして

00:38:15.896 --> 00:38:17.731 align:start position:32% line:-1
ぜひ お試しください

00:38:18.499 --> 00:38:21.535 align:start position:34% line:-2
皆さんの時間や
リソースも節約され

00:38:21.635 --> 00:38:24.137 align:start position:34% line:-2
アプリケーションが
充実します

00:38:25.739 --> 00:38:27.241 align:start position:29% line:-1
TVUIKitは以上です

00:38:29.143 --> 00:38:32.579 align:start position:30% line:-2
本日はtvOS 12に
備わった新機能を

00:38:32.679 --> 00:38:36.083 align:start position:30% line:-1
項目別にご紹介しました

00:38:37.317 --> 00:38:40.954 align:start position:29% line:-2
アプリケーションの
サインインを手軽にする―

00:38:41.054 --> 00:38:43.190 align:start position:32% line:-1
パスワードの自動入力

00:38:43.924 --> 00:38:47.561 align:start position:34% line:-2
強いパスワードなら
より役立ちます

00:38:49.229 --> 00:38:54.535 align:start position:27% line:-2
次にレンダリングの仕組みに
関わらず拡張できる―

00:38:54.635 --> 00:38:56.904 align:start position:25% line:-1
tvOSのフォーカスエンジン

00:38:57.404 --> 00:38:59.039 align:start position:36% line:-1
非常に革新的です

00:39:00.674 --> 00:39:03.243 align:start position:29% line:-1
最後はTVUIKitです

00:39:03.344 --> 00:39:07.681 align:start position:34% line:-2
共通UIパターンを
ご覧いただきました

00:39:09.616 --> 00:39:14.321 align:start position:29% line:-2
さらに詳しい情報は
セッションページをどうぞ

00:39:14.555 --> 00:39:19.226 align:start position:18% line:-2
またtvOSや
Safari WebKitのラボでも

00:39:19.359 --> 00:39:22.262 align:start position:30% line:-1
質問を受け付けています

00:39:22.562 --> 00:39:26.533 align:start position:30% line:-2
本日はご来場
ありがとうございました
