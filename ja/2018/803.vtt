WEBVTT

00:00:07.040 --> 00:00:16.315 align:start position:43% line:-1
(音楽)

00:00:27.694 --> 00:00:28.862 align:start position:41% line:-1
こんにちは

00:00:28.962 --> 00:00:32.031 align:start position:43% line:-1
(拍手)

00:00:32.131 --> 00:00:33.367 align:start position:45% line:-1
どうも

00:00:33.967 --> 00:00:35.936 align:start position:27% line:-1
ようこそいらっしゃいました

00:00:36.570 --> 00:00:39.206 align:start position:16% line:-2
今日のお話は“Designing
Fluid Interfaces”です

00:00:39.306 --> 00:00:40.574 align:start position:41% line:-1
私はチャン

00:00:40.674 --> 00:00:43.544 align:start position:27% line:-2
ヒューマンインターフェイス
チーム所属です

00:00:43.710 --> 00:00:46.113 align:start position:34% line:-1
私の最新の研究は―

00:00:46.213 --> 00:00:49.483 align:start position:9% line:-2
iPhone Xのfluid gestural
インターフェイスです

00:00:49.750 --> 00:00:53.120 align:start position:29% line:-2
私 マーコス ネイサンの
３人は

00:00:53.520 --> 00:00:57.124 align:start position:34% line:-2
これら一連の開発を
してきました

00:00:57.224 --> 00:00:59.626 align:start position:32% line:-1
そのお話をしましょう

00:00:59.826 --> 00:01:04.031 align:start position:30% line:-2
私たちが自らに
何度も問いかけたのは―

00:00:59.826 --> 00:01:04.031 align:start position:30% line:-2
私たちが自らに
何度も問いかけたのは―

00:01:04.131 --> 00:01:07.334 align:start position:27% line:-2
滑らかな
インターフェイスとは何か？

00:01:08.168 --> 00:01:12.039 align:start position:34% line:-2
その表現方法は
人によって様々です

00:01:12.139 --> 00:01:15.876 align:start position:32% line:-2
私たちがデモを行うと
それを見た人は

00:01:15.976 --> 00:01:18.178 align:start position:29% line:-1
実際に手に取り 使います

00:01:18.345 --> 00:01:22.649 align:start position:32% line:-2
“速い”と言う人
“スムーズ”と言う人

00:01:22.816 --> 00:01:26.587 align:start position:30% line:-2
感覚がぴったり合い
“ナチュラル”と言う人

00:01:26.687 --> 00:01:27.888 align:start position:38% line:-1
“魔法だ”とも

00:01:28.255 --> 00:01:29.990 align:start position:38% line:-1
結局のところ―

00:01:30.290 --> 00:01:34.895 align:start position:29% line:-2
こういう物は
実際に触ってみることです

00:01:34.995 --> 00:01:36.563 align:start position:34% line:-1
良さを実感できます

00:01:36.997 --> 00:01:39.066 align:start position:29% line:-1
ジェスチャUIを試せます

00:01:39.166 --> 00:01:42.069 align:start position:27% line:-1
多くのジェスチャUIの中で

00:01:42.169 --> 00:01:45.606 align:start position:32% line:-2
出来が良くないものは
何か違うと感じます

00:01:45.706 --> 00:01:49.009 align:start position:30% line:-2
指がしっくりこないのは
なぜか？

00:01:49.309 --> 00:01:51.411 align:start position:30% line:-1
フレームレートの問題？

00:01:51.512 --> 00:01:55.616 align:start position:30% line:-2
１秒間に60フレームで
サクサク動いても

00:01:55.716 --> 00:01:59.887 align:start position:32% line:-2
何かが違うこの感覚は
何なのか？

00:02:00.554 --> 00:02:03.023 align:start position:34% line:-1
行きつくところは―

00:02:03.123 --> 00:02:06.360 align:start position:29% line:-2
“道具を心の延長のように
感じられるか”

00:02:06.793 --> 00:02:08.862 align:start position:29% line:-1
心とつながっているかです

00:02:09.062 --> 00:02:11.064 align:start position:29% line:-1
なぜ それが大切なのか？

00:02:11.865 --> 00:02:14.968 align:start position:25% line:-1
iPhoneは道具ですよね？

00:02:15.068 --> 00:02:18.639 align:start position:36% line:-2
情報通信のための
手道具で―

00:02:18.739 --> 00:02:23.610 align:start position:32% line:-2
触覚と視覚が密接に
結び付いて機能します

00:02:24.144 --> 00:02:28.549 align:start position:34% line:-2
手道具の長い歴史を
受け継いでおり

00:02:28.649 --> 00:02:31.451 align:start position:36% line:-2
起源は数千年前に
さかのぼります

00:02:31.885 --> 00:02:36.857 align:start position:27% line:-2
左側の道具は 15万年前
骨髄の抽出に使用されました

00:02:36.957 --> 00:02:39.459 align:start position:36% line:-2
指に沿うように
鋭く伸びています

00:02:39.593 --> 00:02:42.796 align:start position:34% line:-2
人々は手道具を
作り続けてきました

00:02:42.896 --> 00:02:47.067 align:start position:32% line:-2
最も驚くべきことは
私たちの手は進化し―

00:02:47.167 --> 00:02:49.670 align:start position:29% line:-1
道具に順応してきたのです

00:02:49.770 --> 00:02:54.308 align:start position:30% line:-2
大きな進化を遂げた
筋肉や神経 血管などが

00:02:54.408 --> 00:02:58.612 align:start position:30% line:-2
繊細な動きを表現し
軽い接触も感知できます

00:02:59.112 --> 00:03:03.717 align:start position:27% line:-2
私たちはこの触知性の時代に
順応してきました

00:02:59.112 --> 00:03:03.717 align:start position:27% line:-2
私たちはこの触知性の時代に
順応してきました

00:03:04.051 --> 00:03:07.054 align:start position:27% line:-1
コンピュータの歴史を見ると

00:03:07.187 --> 00:03:12.025 align:start position:29% line:-2
以前は動かすための
手順がいくつもありました

00:03:12.125 --> 00:03:15.262 align:start position:32% line:-2
操作には様々な知識が
必要だったため

00:03:15.362 --> 00:03:18.265 align:start position:36% line:-2
多くの人にとって
遠い存在でした

00:03:19.233 --> 00:03:22.236 align:start position:23% line:-1
しかし この20～30年の間に

00:03:22.336 --> 00:03:26.540 align:start position:27% line:-2
最初は間接操作だった多くの
手順が省かれました

00:03:26.640 --> 00:03:30.210 align:start position:30% line:-2
個人が直接扱えるものに
近付いたのです

00:03:30.344 --> 00:03:31.912 align:start position:38% line:-1
そして 現在―

00:03:32.012 --> 00:03:36.049 align:start position:30% line:-2
コンテンツに
直接アクセスできるよう

00:03:36.149 --> 00:03:38.752 align:start position:34% line:-2
全手順を
省こうとしています

00:03:38.852 --> 00:03:43.657 align:start position:27% line:-2
コンピュータと感じなくなる
魔法の要素です

00:03:43.757 --> 00:03:49.429 align:start position:32% line:-2
自然界の延長のように
感じ始めるのです

00:03:49.796 --> 00:03:53.033 align:start position:27% line:-2
つまり インターフェイスと
人とのつながりは

00:03:53.133 --> 00:03:57.604 align:start position:29% line:-2
これまでよりも
古代の形に近付いたのです

00:03:57.704 --> 00:04:00.274 align:start position:32% line:-1
それでいて高水準です

00:03:57.704 --> 00:04:00.274 align:start position:32% line:-1
それでいて高水準です

00:04:00.374 --> 00:04:04.411 align:start position:30% line:-2
少しでも違うと感じると
期待は打ち砕かれます

00:04:04.711 --> 00:04:10.450 align:start position:27% line:-2
しかし うまくいけば
自分の分身のように感じます

00:04:10.551 --> 00:04:12.753 align:start position:30% line:-1
あなたの考えと共鳴して

00:04:12.853 --> 00:04:17.757 align:start position:27% line:-2
楽しく 人との摩擦も少なく
遊び心さえ感じます

00:04:18.125 --> 00:04:20.160 align:start position:30% line:-1
なぜ そう感じるのか？

00:04:20.260 --> 00:04:23.297 align:start position:32% line:-2
しっくりこない時には
どうするか？

00:04:23.397 --> 00:04:25.899 align:start position:29% line:-1
その答えが今日のお話です

00:04:26.833 --> 00:04:32.206 align:start position:29% line:-2
今から４つのお話をします
まず 動作原理の策定

00:04:32.306 --> 00:04:36.476 align:start position:29% line:-2
そして自身の延長のような
インターフェイスの構築

00:04:37.244 --> 00:04:42.983 align:start position:27% line:-2
人の体や 様々な物の動きに
合った動作の設計方法

00:04:43.550 --> 00:04:47.654 align:start position:34% line:-2
優雅で知性を感じる
ジェスチャの設計

00:04:49.022 --> 00:04:52.559 align:start position:32% line:-2
これらの原理の上に
どう相互作用を構築し

00:04:52.659 --> 00:04:57.965 align:start position:27% line:-2
どうやって体の一部のように
感じてもらうか？

00:04:59.233 --> 00:05:00.734 align:start position:34% line:-1
では 始めましょう

00:04:59.233 --> 00:05:00.734 align:start position:34% line:-1
では 始めましょう

00:05:00.834 --> 00:05:05.339 align:start position:23% line:-2
分身のようなインターフェイスを
どう設計するか？

00:05:05.606 --> 00:05:08.208 align:start position:30% line:-1
私たちが考えた方法は―

00:05:08.308 --> 00:05:13.046 align:start position:23% line:-2
考え方や動き方に
インターフェイスを合わせること

00:05:13.447 --> 00:05:15.682 align:start position:30% line:-1
ここで最も重要な点は―

00:05:15.816 --> 00:05:20.787 align:start position:29% line:-2
心は常に 変化や刺激や
思考に反応するということ

00:05:21.255 --> 00:05:25.425 align:start position:29% line:-2
心と体は常に
動的変化の状態にあります

00:05:25.526 --> 00:05:28.962 align:start position:34% line:-2
インターフェイスは
人の滑らかな動きに

00:05:29.062 --> 00:05:31.865 align:start position:29% line:-1
反応できる必要があります

00:05:32.833 --> 00:05:36.069 align:start position:27% line:-1
そう 反応から始まるのです

00:05:36.970 --> 00:05:39.840 align:start position:36% line:-2
道具は反応時間の
早さが大切です

00:05:40.107 --> 00:05:42.376 align:start position:34% line:-1
道具や楽器を使う際

00:05:42.476 --> 00:05:46.747 align:start position:34% line:-2
反応に遅れが出ては
使いづらく大変です

00:05:47.047 --> 00:05:50.484 align:start position:36% line:-2
人々は反応時間に
実に敏感です

00:05:50.584 --> 00:05:53.353 align:start position:30% line:-1
タイムラグが発生したり

00:05:54.087 --> 00:05:57.824 align:start position:21% line:-1
突然 反応しなくなったりしたら？

00:05:57.925 --> 00:06:01.828 align:start position:34% line:-2
かみ合わなさに
ストレスを感じます

00:05:57.925 --> 00:06:01.828 align:start position:34% line:-2
かみ合わなさに
ストレスを感じます

00:06:01.929 --> 00:06:04.264 align:start position:27% line:-1
もはや 分身とは思えません

00:06:04.531 --> 00:06:07.434 align:start position:32% line:-2
そこで 懸命に
反応時間を削りました

00:06:07.534 --> 00:06:11.772 align:start position:30% line:-2
最新のiPhoneでは
反応がより早くなり

00:06:11.872 --> 00:06:16.076 align:start position:34% line:-2
微妙な動きも
即座に検知できます

00:06:16.476 --> 00:06:20.047 align:start position:32% line:-2
iPhoneを
気に入ってほしいので

00:06:20.681 --> 00:06:23.684 align:start position:36% line:-2
遅れがないか
入念に探すのです

00:06:23.784 --> 00:06:28.255 align:start position:27% line:-2
スワイプやタップだけでなく
全ての作用に対して

00:06:28.388 --> 00:06:30.824 align:start position:29% line:-1
即時の反応が必要なのです

00:06:31.291 --> 00:06:35.062 align:start position:29% line:-2
この製品を設計する過程で
頻繁に―

00:06:36.330 --> 00:06:38.699 align:start position:32% line:-1
微妙な遅れが出ました

00:06:38.799 --> 00:06:45.005 align:start position:29% line:-2
慎重に意識的に 遅れに
注意を払うことが大切です

00:06:45.105 --> 00:06:48.008 align:start position:34% line:-2
インターフェイスに
タイマーを仕込み

00:06:48.108 --> 00:06:50.210 align:start position:32% line:-2
常に反応する設定にも
できます

00:06:51.345 --> 00:06:56.884 align:start position:25% line:-2
インターフェイスを活発にする
反応について話してきました

00:06:58.852 --> 00:06:59.653 align:start position:45% line:-1
次に―

00:07:00.621 --> 00:07:06.293 align:start position:30% line:-2
方向転換や中断について
考慮することも大切です

00:07:06.460 --> 00:07:10.364 align:start position:29% line:-2
私たちの心と体は
絶えず方向転換しています

00:07:10.597 --> 00:07:12.933 align:start position:30% line:-1
思考の変化に反応します

00:07:13.333 --> 00:07:17.871 align:start position:30% line:-2
ステージ脇に歩いていて
忘れ物に気付いたら

00:07:17.971 --> 00:07:22.009 align:start position:34% line:-2
端にたどり着く前に
引き返すでしょう

00:07:22.109 --> 00:07:23.977 align:start position:29% line:-1
端まで行かないですよね？

00:07:24.077 --> 00:07:29.550 align:start position:25% line:-2
インターフェイスは方向転換に
即応することが重要です

00:07:29.683 --> 00:07:31.818 align:start position:36% line:-2
つながっていると
感じられます

00:07:32.052 --> 00:07:36.823 align:start position:23% line:-2
そこで iPhone Xに
リダイレクト機能を構築しました

00:07:37.090 --> 00:07:38.492 align:start position:39% line:-1
それは何か？

00:07:39.893 --> 00:07:45.032 align:start position:29% line:-2
２つのアプリケーションを
行き来できる機能です

00:07:45.132 --> 00:07:46.800 align:start position:29% line:-1
ホームにも すぐ戻れます

00:07:46.900 --> 00:07:50.370 align:start position:36% line:-2
戻る途中で
２つを同時に見て

00:07:50.470 --> 00:07:53.607 align:start position:36% line:-2
どちらに行くかを
決められます

00:07:53.841 --> 00:07:57.678 align:start position:34% line:-2
どちらもやめて
ホームにも戻れます

00:07:58.078 --> 00:08:00.414 align:start position:34% line:-2
重要と思えないかも
しれません

00:07:58.078 --> 00:08:00.414 align:start position:34% line:-2
重要と思えないかも
しれません

00:08:00.514 --> 00:08:03.784 align:start position:29% line:-2
しかし この機能がないと
どうなるか？

00:08:05.118 --> 00:08:10.657 align:start position:29% line:-2
２つのアプリケーションの
行き来だけであれば

00:08:10.757 --> 00:08:15.929 align:start position:29% line:-2
ホームに戻れば終了で
それ以上 何もできません

00:08:16.430 --> 00:08:20.434 align:start position:29% line:-1
その場合 指を動かす前に

00:08:20.534 --> 00:08:23.370 align:start position:30% line:-2
したいことを
考えなくてはいけません

00:08:23.804 --> 00:08:26.073 align:start position:32% line:-2
イベントは
１本の線上に並びます

00:08:26.173 --> 00:08:29.543 align:start position:30% line:-2
ホームに戻るか
マルチタスクをするか―

00:08:29.643 --> 00:08:33.313 align:start position:32% line:-2
決めてから指を動かし
命令を発します

00:08:34.014 --> 00:08:36.884 align:start position:34% line:-2
リダイレクト機能の
素晴らしい点は

00:08:36.984 --> 00:08:40.020 align:start position:27% line:-2
並行する思考とジェスチャに
対応できること

00:08:40.220 --> 00:08:43.624 align:start position:25% line:-1
考えると同時に行動するほうが

00:08:43.789 --> 00:08:47.060 align:start position:27% line:-1
行動する前に考えるより速い

00:08:47.161 --> 00:08:52.065 align:start position:29% line:-2
マルチ画面をジェスチャで
操作できるのです

00:08:52.166 --> 00:08:53.700 align:start position:29% line:-1
別々のジェスチャではなく

00:08:53.800 --> 00:08:57.538 align:start position:34% line:-2
１つのジェスチャで
全てできるのです

00:08:57.638 --> 00:09:00.507 align:start position:38% line:-2
別々のものと
考えなくていい

00:08:57.638 --> 00:09:00.507 align:start position:38% line:-2
別々のものと
考えなくていい

00:09:01.008 --> 00:09:01.942 align:start position:43% line:-1
そして―

00:09:02.509 --> 00:09:07.915 align:start position:29% line:-2
操作していく中で 新たな
ジェスチャを発見できます

00:09:08.382 --> 00:09:12.686 align:start position:27% line:-2
思考と同時に ジェスチャを
重ねていけるのです

00:09:13.053 --> 00:09:14.588 align:start position:36% line:-1
どういう意味か？

00:09:14.688 --> 00:09:16.590 align:start position:32% line:-1
例を挙げてみましょう

00:09:16.690 --> 00:09:21.795 align:start position:27% line:-2
シミュレーションを
見やすくゆっくり再生します

00:09:22.296 --> 00:09:25.699 align:start position:34% line:-2
スワイプで
ホームに戻りながら

00:09:25.799 --> 00:09:28.869 align:start position:29% line:-1
次のページに移動できます

00:09:28.969 --> 00:09:32.039 align:start position:27% line:-2
同時に ２つのジェスチャが
できるのです

00:09:33.040 --> 00:09:37.611 align:start position:27% line:-2
他にも アプリケーションを
起動させながら

00:09:37.711 --> 00:09:42.549 align:start position:34% line:-2
マルチタスキングを
開くことができます

00:09:43.417 --> 00:09:45.552 align:start position:38% line:-1
他にもあります

00:09:46.320 --> 00:09:49.590 align:start position:27% line:-2
間違ってアプリケーションを
起動した場合

00:09:49.690 --> 00:09:52.593 align:start position:29% line:-1
起動完了前に終了できます

00:09:53.861 --> 00:09:57.531 align:start position:32% line:-2
さらに
こんなこともできます

00:09:57.965 --> 00:10:02.669 align:start position:27% line:-2
起動中のアプリケーションを
操作できるのです

00:09:57.965 --> 00:10:02.669 align:start position:27% line:-2
起動中のアプリケーションを
操作できるのです

00:10:03.203 --> 00:10:06.173 align:start position:34% line:-2
インターフェイスが
常に反応するのは

00:10:06.273 --> 00:10:10.043 align:start position:32% line:-2
非常に重要なことだと
分かりました

00:10:10.143 --> 00:10:14.014 align:start position:30% line:-2
常にユーザを
理解することが重要です

00:10:14.314 --> 00:10:18.919 align:start position:30% line:-2
インターフェイスが
ユーザを理解することは

00:10:19.019 --> 00:10:23.357 align:start position:30% line:-2
快適な使い心地のために
とても重要です

00:10:26.193 --> 00:10:31.064 align:start position:30% line:-2
操作開始時だけではなく
操作の途中でも

00:10:31.164 --> 00:10:34.268 align:start position:27% line:-1
反応することが求められます

00:10:34.401 --> 00:10:37.704 align:start position:30% line:-2
割り込みにも
反応できるのが大事です

00:10:37.805 --> 00:10:40.874 align:start position:27% line:-2
iPhone Xで
マルチタスキングを開くには

00:10:41.208 --> 00:10:46.313 align:start position:25% line:-2
画面の下部から
上にスワイプして指を止めます

00:10:46.413 --> 00:10:50.717 align:start position:30% line:-2
このモーションの変化を
検知するためには

00:10:50.818 --> 00:10:53.654 align:start position:27% line:-1
どうすればいいでしょうか？

00:10:53.754 --> 00:10:55.022 align:start position:36% line:-1
タイマーを使う？

00:10:55.122 --> 00:10:58.525 align:start position:34% line:-2
ある速度を一定期間
下回ったら

00:10:58.625 --> 00:11:02.663 align:start position:30% line:-2
マルチタスキングを
開けばいいでしょうか？

00:10:58.625 --> 00:11:02.663 align:start position:30% line:-2
マルチタスキングを
開けばいいでしょうか？

00:11:02.763 --> 00:11:04.898 align:start position:34% line:-1
それでは遅すぎます

00:11:04.998 --> 00:11:08.302 align:start position:30% line:-2
ユーザが期待するくらい
迅速に

00:11:08.602 --> 00:11:12.739 align:start position:34% line:-2
マルチタスキングを
開く方法が必要です

00:11:14.007 --> 00:11:16.643 align:start position:27% line:-1
そこで指の加速に注目します

00:11:17.077 --> 00:11:21.515 align:start position:32% line:-2
指を止めたい時 人は
指を迅速に動かします

00:11:21.615 --> 00:11:25.419 align:start position:34% line:-2
止まるのが速いほど
鋭く検出できます

00:11:25.586 --> 00:11:28.255 align:start position:34% line:-2
モーションの変化に
反応したほうが

00:11:28.355 --> 00:11:31.925 align:start position:34% line:-2
タイマーを使うより
早いのです

00:11:32.893 --> 00:11:37.231 align:start position:30% line:-2
リダイレクションに
素早く反応する例でした

00:11:39.566 --> 00:11:42.569 align:start position:30% line:-2
割り込みと
リダイレクションにより

00:11:42.903 --> 00:11:46.507 align:start position:29% line:-2
直感的に
操作できるようになります

00:11:47.407 --> 00:11:48.175 align:start position:45% line:-1
次です

00:11:49.710 --> 00:11:53.247 align:start position:34% line:-2
インターフェイスの
配置について―

00:11:53.347 --> 00:11:54.681 align:start position:41% line:-1
紹介します

00:11:55.582 --> 00:12:00.487 align:start position:25% line:-2
動作を通して 空間的一貫性を
保つことが重要です

00:11:55.582 --> 00:12:00.487 align:start position:25% line:-2
動作を通して 空間的一貫性を
保つことが重要です

00:12:01.021 --> 00:12:02.089 align:start position:39% line:-1
その意味は？

00:12:02.322 --> 00:12:06.760 align:start position:30% line:-2
実世界での物体の動作を
まねることで

00:12:06.860 --> 00:12:11.031 align:start position:27% line:-2
スムーズに出入りするように
見せるのです

00:12:11.732 --> 00:12:16.370 align:start position:27% line:-2
何かが消えたら
消えた場所から現れますよね

00:12:16.470 --> 00:12:20.908 align:start position:27% line:-2
もし私があっちに消えたのに
逆から現れたら

00:12:21.141 --> 00:12:22.609 align:start position:39% line:-1
驚くでしょう

00:12:22.709 --> 00:12:24.978 align:start position:36% line:-1
道理に合いません

00:12:25.245 --> 00:12:31.451 align:start position:23% line:-2
そこで 人間が持つ一貫した
空間感覚に合わせようとしました

00:12:33.120 --> 00:12:38.058 align:start position:25% line:-2
つまり 何かが視界から消えて
また現れる場合

00:12:38.158 --> 00:12:43.330 align:start position:29% line:-2
画面外への出入りは
同じ経路をたどるべきです

00:12:43.730 --> 00:12:47.000 align:start position:25% line:-1
iOSの画面遷移が良い例です

00:12:47.100 --> 00:12:50.737 align:start position:34% line:-2
項目をタップすると
ページは右から現れ

00:12:51.004 --> 00:12:55.275 align:start position:29% line:-2
戻る時は同じ経路をたどり
右に戻ります

00:12:55.375 --> 00:12:59.446 align:start position:29% line:-2
項目ごとに
場所が決まっているのです

00:12:59.746 --> 00:13:03.917 align:start position:32% line:-2
場所を把握していれば
自分でスライドして

00:12:59.746 --> 00:13:03.917 align:start position:32% line:-2
場所を把握していれば
自分でスライドして

00:13:04.017 --> 00:13:06.753 align:start position:34% line:-1
戻すこともできます

00:13:07.321 --> 00:13:08.856 align:start position:30% line:-1
この機能がなかったら？

00:13:08.956 --> 00:13:12.092 align:start position:30% line:-1
スライドインしたものが

00:13:12.192 --> 00:13:16.997 align:start position:27% line:-2
下に行ったら
一貫性がなく混乱しますよね

00:13:17.264 --> 00:13:19.299 align:start position:34% line:-1
送るような感覚です

00:13:19.399 --> 00:13:23.837 align:start position:29% line:-2
どこかに送るような動作に
見えてしまいます

00:13:24.571 --> 00:13:27.441 align:start position:29% line:-1
空間的一貫性を保つことで

00:13:27.908 --> 00:13:32.045 align:start position:27% line:-2
ジェスチャと同調するように
感じるのです

00:13:33.580 --> 00:13:37.885 align:start position:34% line:-2
次は ジェスチャの
ヒントについてです

00:13:38.585 --> 00:13:43.490 align:start position:25% line:-2
人間は常に 次に起こることを
予測しています

00:13:43.590 --> 00:13:49.530 align:start position:29% line:-2
これまでの経験を利用して
次の動きを予想するのです

00:13:50.164 --> 00:13:54.101 align:start position:27% line:-2
インターフェイスでも
それができたらいいですよね

00:13:54.334 --> 00:13:59.006 align:start position:32% line:-2
例えば 初期と最後の
ステートがあったら

00:13:59.139 --> 00:14:03.710 align:start position:30% line:-2
中間のトランジションが
あるはずです

00:13:59.139 --> 00:14:03.710 align:start position:30% line:-2
中間のトランジションが
あるはずです

00:14:03.810 --> 00:14:08.015 align:start position:29% line:-2
オブジェクトは
初期から最後のステートに

00:14:08.115 --> 00:14:11.552 align:start position:29% line:-1
スムーズに拡大するのです

00:14:12.452 --> 00:14:14.688 align:start position:30% line:-2
コントロールセンターが
良い例です

00:14:15.022 --> 00:14:20.494 align:start position:29% line:-2
モジュールを長押しすると
徐々に大きくなって

00:14:20.828 --> 00:14:24.631 align:start position:27% line:-1
最終的にポップアップします

00:14:26.300 --> 00:14:31.338 align:start position:25% line:-2
この効果によって
ジェスチャを予測できるのです

00:14:33.407 --> 00:14:39.012 align:start position:29% line:-2
次は 軽快なタッチ操作の
重要性についてです

00:14:39.346 --> 00:14:43.750 align:start position:23% line:-2
Multi-Touchの軽さは
過小評価されがちですが

00:14:43.851 --> 00:14:49.823 align:start position:21% line:-2
軽い力でスワイプなどができるのは
そのおかげです

00:14:49.923 --> 00:14:54.628 align:start position:32% line:-2
課題は 軽さを残して
動きの幅を増やすこと

00:14:54.728 --> 00:14:58.031 align:start position:29% line:-2
小さな入力で
大きな出力を得ることです

00:14:58.131 --> 00:15:03.403 align:start position:29% line:-2
何かを投げるような感覚で
操作できるのが理想です

00:14:58.131 --> 00:15:03.403 align:start position:29% line:-2
何かを投げるような感覚で
操作できるのが理想です

00:15:04.204 --> 00:15:08.742 align:start position:30% line:-2
インターフェイスでは
短い操作から始まります

00:15:09.042 --> 00:15:11.245 align:start position:36% line:-1
軽く短い操作です

00:15:11.712 --> 00:15:16.817 align:start position:27% line:-2
ジェスチャのプロファイルを
生成するために

00:15:16.917 --> 00:15:22.089 align:start position:25% line:-2
我々の全てのセンサーや技術を
利用します

00:15:23.023 --> 00:15:27.027 align:start position:32% line:-2
位置や速度 強さなど
全てを用いて

00:15:27.127 --> 00:15:32.466 align:start position:27% line:-2
ジェスチャのプロファイルを
生成するのです

00:15:32.566 --> 00:15:36.169 align:start position:30% line:-1
そしてそれを増幅すると

00:15:36.503 --> 00:15:39.640 align:start position:29% line:-1
体の延長のように感じます

00:15:39.873 --> 00:15:44.144 align:start position:30% line:-2
軽い操作で満足のいく
使用感が得られるのです

00:15:44.912 --> 00:15:47.614 align:start position:30% line:-1
スクロールが良い例です

00:15:47.714 --> 00:15:51.084 align:start position:32% line:-2
画面上に指があるのは
短い間ですが

00:15:51.451 --> 00:15:57.424 align:start position:25% line:-2
強さや推進力が保存され
インターフェイスに送られます

00:15:58.025 --> 00:15:59.927 align:start position:30% line:-1
この機能がなかったら？

00:16:00.394 --> 00:16:03.831 align:start position:36% line:-2
スワイプしても
あまり動きません

00:16:05.866 --> 00:16:10.504 align:start position:25% line:-2
スクロールするには
長くスワイプしなければならず

00:16:10.604 --> 00:16:14.575 align:start position:34% line:-2
大きな力が求められ
使いにくいでしょう

00:16:15.676 --> 00:16:18.412 align:start position:27% line:-1
ホームへ戻るのも良い例です

00:16:18.879 --> 00:16:22.249 align:start position:27% line:-1
画面に触れるのは短時間です

00:16:22.549 --> 00:16:27.855 align:start position:25% line:-2
流れるような軽いジェスチャで
操作でき―

00:16:27.955 --> 00:16:31.058 align:start position:25% line:-2
Multi-Touch特有と
感じられます

00:16:31.291 --> 00:16:34.228 align:start position:27% line:-1
画面の下部から指を動かせば

00:16:34.328 --> 00:16:37.865 align:start position:21% line:-1
SpringBoardに戻ります

00:16:40.634 --> 00:16:44.404 align:start position:32% line:-2
スワイプだけではなく
タップでも

00:16:44.705 --> 00:16:48.842 align:start position:32% line:-2
全ての操作に
高い反応性が必要です

00:16:48.942 --> 00:16:52.045 align:start position:34% line:-2
インターフェイスと
つながっている感覚

00:16:52.146 --> 00:16:56.083 align:start position:38% line:-2
その感覚こそが
大事だからです

00:16:56.750 --> 00:16:59.953 align:start position:38% line:-2
動きの軽さと幅
についてでした

00:17:01.722 --> 00:17:04.358 align:start position:29% line:-2
次は
ラバーバンド効果という―

00:17:04.892 --> 00:17:09.061 align:start position:29% line:-2
インターフェイスの境界を
示す演出についてです

00:17:10.230 --> 00:17:15.202 align:start position:29% line:-2
インターフェイスは
ページの終わりが近付くと

00:17:15.301 --> 00:17:17.738 align:start position:34% line:-1
暗に知らせてきます

00:17:17.838 --> 00:17:20.507 align:start position:27% line:-1
ユーザを理解しているのです

00:17:20.807 --> 00:17:22.509 align:start position:30% line:-1
この機能がなかったら？

00:17:22.809 --> 00:17:26.813 align:start position:29% line:-2
雑な印象で
壁に当たったかのようです

00:17:26.914 --> 00:17:31.885 align:start position:25% line:-2
まるで故障のようで
フリーズとの区別もつきません

00:17:31.985 --> 00:17:35.055 align:start position:38% line:-2
画面の最上部で
止まるだけです

00:17:35.155 --> 00:17:39.593 align:start position:34% line:-2
境界を伝えるのは
大事なことなのです

00:17:40.561 --> 00:17:44.164 align:start position:30% line:-2
トランジションの場合も
同様です

00:17:44.264 --> 00:17:49.870 align:start position:30% line:-2
ある動作から別の動作に
移る時もスムーズです

00:17:50.070 --> 00:17:55.075 align:start position:29% line:-2
Dockをスワイプして
アプリケーションを開く時

00:17:55.342 --> 00:17:59.246 align:start position:30% line:-2
ぶつかったりせずに
別の動作に移動できます

00:17:59.346 --> 00:18:02.483 align:start position:36% line:-2
引き継ぎの動きは
スムーズで―

00:17:59.346 --> 00:18:02.483 align:start position:36% line:-2
引き継ぎの動きは
スムーズで―

00:18:02.583 --> 00:18:08.355 align:start position:34% line:-2
別の動作に移る時に
不快感を与えません

00:18:09.790 --> 00:18:13.460 align:start position:36% line:-2
次はスムーズな
動きについてです

00:18:14.261 --> 00:18:19.199 align:start position:29% line:-2
上下に動くオブジェクトが
あるとします

00:18:19.433 --> 00:18:23.871 align:start position:30% line:-2
これは 実際に
動いているわけではなく

00:18:24.104 --> 00:18:26.406 align:start position:34% line:-1
そう見えるだけです

00:18:26.507 --> 00:18:32.713 align:start position:27% line:-2
大量のフレームを見て
動いていると錯覚するのです

00:18:32.880 --> 00:18:38.719 align:start position:23% line:-2
フレームを展開して
時間の推移の中で見てみましょう

00:18:39.386 --> 00:18:43.423 align:start position:29% line:-2
懸念するのは
ハイライトされた部分です

00:18:43.524 --> 00:18:48.328 align:start position:32% line:-2
隣接するフレーム間に
大きな変化があります

00:18:48.428 --> 00:18:53.000 align:start position:27% line:-2
ここではインターフェイスが
ぎこちなくなり

00:18:53.100 --> 00:18:55.035 align:start position:32% line:-1
ちらつきが起こります

00:18:55.569 --> 00:19:00.274 align:start position:30% line:-2
２つのフレームの違いが
大きすぎるからです

00:18:55.569 --> 00:19:00.274 align:start position:30% line:-2
２つのフレームの違いが
大きすぎるからです

00:19:00.841 --> 00:19:03.443 align:start position:30% line:-1
だから ちらつくのです

00:19:03.544 --> 00:19:07.981 align:start position:30% line:-2
この例では 両方とも
１秒30フレームですが

00:19:08.081 --> 00:19:10.517 align:start position:30% line:-1
左のほうがスムーズです

00:19:10.617 --> 00:19:15.022 align:start position:34% line:-2
右のほうは速すぎて
ちらついています

00:19:15.122 --> 00:19:19.660 align:start position:36% line:-2
視覚認識が
追いつかないので

00:19:19.760 --> 00:19:22.996 align:start position:30% line:-1
スムーズには見えません

00:19:23.297 --> 00:19:27.201 align:start position:27% line:-2
つまり重要なのは
フレームレートだけではなく

00:19:27.367 --> 00:19:29.303 align:start position:34% line:-1
フレームの内容です

00:19:29.536 --> 00:19:31.839 align:start position:34% line:-2
では スムーズさを
保ちながら

00:19:31.939 --> 00:19:35.375 align:start position:34% line:-2
どこまで速く
できるでしょうか？

00:19:35.843 --> 00:19:40.647 align:start position:32% line:-2
１秒30フレームから
60フレームにすると

00:19:40.747 --> 00:19:46.320 align:start position:30% line:-2
スムーズさを保ちながら
もう少し速くできます

00:19:46.420 --> 00:19:48.822 align:start position:32% line:-1
ちらつきもありません

00:19:49.356 --> 00:19:52.359 align:start position:27% line:-1
モーションブラーも使えます

00:19:52.459 --> 00:19:58.632 align:start position:25% line:-2
それぞれのフレームに
動きに関する情報を足すのです

00:19:58.732 --> 00:20:01.368 align:start position:32% line:-2
人間の目は
このように機能します

00:19:58.732 --> 00:20:01.368 align:start position:32% line:-2
人間の目は
このように機能します

00:20:02.102 --> 00:20:06.607 align:start position:32% line:-2
2Dアニメーションや
ゲームからも学べます

00:20:06.707 --> 00:20:10.677 align:start position:27% line:-2
モーションストレッチという
技術を使えば

00:20:11.111 --> 00:20:15.649 align:start position:30% line:-2
オブジェクトを伸び縮み
させることができます

00:20:17.117 --> 00:20:20.387 align:start position:29% line:-1
動かすと こんな感じです

00:20:20.487 --> 00:20:23.090 align:start position:30% line:-1
それぞれの異なる技術が

00:20:23.190 --> 00:20:29.162 align:start position:23% line:-2
動きについて より多くの情報を
エンコードしようとします

00:20:29.396 --> 00:20:32.099 align:start position:30% line:-2
モーションストレッチの
技術は

00:20:32.199 --> 00:20:34.434 align:start position:21% line:-1
iPhone Xで使われています

00:20:34.668 --> 00:20:36.803 align:start position:34% line:-2
アプリケーションを
起動すると

00:20:37.671 --> 00:20:41.909 align:start position:30% line:-2
アイコンが拡大しながら
起動します

00:20:42.209 --> 00:20:45.679 align:start position:34% line:-2
そして終了する時は
逆に縮みます

00:20:45.779 --> 00:20:51.151 align:start position:30% line:-2
スムーズに見えるように
情報を補っているのです

00:20:53.053 --> 00:20:57.925 align:start position:29% line:-2
最後に アニメーションと
ビヘイビアについてです

00:20:58.025 --> 00:21:03.597 align:start position:27% line:-2
物体は常に動的な状態にあり
外界の作用を受けます

00:20:58.025 --> 00:21:03.597 align:start position:27% line:-2
物体は常に動的な状態にあり
外界の作用を受けます

00:21:03.697 --> 00:21:07.067 align:start position:29% line:-1
アニメーションは違います

00:21:07.167 --> 00:21:11.104 align:start position:25% line:-2
アニメーションは
現実の影響を受けませんからね

00:21:11.205 --> 00:21:14.608 align:start position:30% line:-2
そこでアニメーションや
ビヘイビアを

00:21:14.708 --> 00:21:17.544 align:start position:30% line:-1
会話と考えてみましょう

00:21:17.711 --> 00:21:22.349 align:start position:23% line:-2
静的なものから
アニメートされたものへの移行を

00:21:22.449 --> 00:21:24.151 align:start position:39% line:-1
考えるのです

00:21:24.284 --> 00:21:28.755 align:start position:25% line:-2
ネイサンが後で説明しますので
ここでは簡単に

00:21:30.991 --> 00:21:34.761 align:start position:38% line:-1
さて 写真は―

00:21:35.062 --> 00:21:38.999 align:start position:36% line:-2
概念上は軽いため
容量が少ないです

00:21:39.099 --> 00:21:43.971 align:start position:29% line:-2
一方 アプリケーションは
重く大きいので

00:21:44.071 --> 00:21:46.106 align:start position:30% line:-1
容量が当てられています

00:21:48.742 --> 00:21:54.047 align:start position:43% line:-1
(拍手)

00:21:54.915 --> 00:21:58.218 align:start position:29% line:-2
人間のように考える
インターフェイスについて

00:21:58.318 --> 00:22:00.254 align:start position:38% line:-1
お話ししました

00:21:58.318 --> 00:22:00.254 align:start position:38% line:-1
お話ししました

00:22:03.123 --> 00:22:05.092 align:start position:32% line:-1
レスポンスから始まり

00:22:05.292 --> 00:22:10.497 align:start position:25% line:-2
ユーザとつながっているように
感じさせること

00:22:10.998 --> 00:22:12.966 align:start position:32% line:-1
空間的一貫性を保って

00:22:13.066 --> 00:22:16.069 align:start position:30% line:-1
空間感覚に合わせること

00:22:16.503 --> 00:22:18.839 align:start position:30% line:-1
同じ経路で移動すること

00:22:19.273 --> 00:22:24.278 align:start position:25% line:-2
予測を助けるため
ジェスチャのヒントを出すこと

00:22:24.711 --> 00:22:29.249 align:start position:32% line:-2
軽い操作で
最大の出力を得ること

00:22:29.349 --> 00:22:34.021 align:start position:27% line:-2
少ない力で
十分なレスポンスを得ること

00:22:35.389 --> 00:22:39.226 align:start position:29% line:-2
インターフェイスの境界を
暗に示し

00:22:39.326 --> 00:22:42.963 align:start position:36% line:-2
端に来ても
常に反応すること

00:22:43.063 --> 00:22:45.966 align:start position:27% line:-1
トランジションが自然なこと

00:22:47.634 --> 00:22:52.239 align:start position:25% line:-2
そしてスムーズな
動的ビヘイビアを設計すること

00:22:55.409 --> 00:22:58.979 align:start position:32% line:-2
インターフェイスを
心の一部にするための

00:22:59.079 --> 00:23:01.081 align:start position:32% line:-1
原則をお話ししました

00:22:59.079 --> 00:23:01.081 align:start position:32% line:-1
原則をお話ししました

00:23:01.615 --> 00:23:05.485 align:start position:30% line:-2
ここで同僚のネイサンに
代わります

00:23:05.586 --> 00:23:10.157 align:start position:30% line:-2
ユーザや自然界の動きに
合った方法で

00:23:10.257 --> 00:23:13.260 align:start position:32% line:-2
設計することについて
お話しします

00:23:15.062 --> 00:23:21.869 align:start position:43% line:-1
(拍手)

00:23:22.336 --> 00:23:23.237 align:start position:38% line:-1
どうも　チャン

00:23:24.004 --> 00:23:25.572 align:start position:36% line:-1
私はネイサンです

00:23:25.672 --> 00:23:30.878 align:start position:25% line:-2
動的モーションを使った
デザインについてお話しします

00:23:31.979 --> 00:23:37.084 align:start position:23% line:-2
人間の心と体
そして 私たちを取り巻く世界は

00:23:37.184 --> 00:23:39.753 align:start position:29% line:-1
常に変化の状態にあります

00:23:39.853 --> 00:23:45.893 align:start position:23% line:-2
そのため インターフェイスも
同様のビヘイビアを期待されます

00:23:45.993 --> 00:23:51.932 align:start position:25% line:-2
触覚的になるにつれ
高い忠実性が要求されるのです

00:23:52.833 --> 00:23:58.005 align:start position:21% line:-2
インターフェイスでは
アニメーションが使われてきました

00:23:58.105 --> 00:24:00.073 align:start position:30% line:-1
ボタンがタップされると

00:23:58.105 --> 00:24:00.073 align:start position:30% line:-1
ボタンがタップされると

00:24:00.174 --> 00:24:03.744 align:start position:25% line:-1
手綱はデザイナーに渡されます

00:24:04.077 --> 00:24:09.349 align:start position:25% line:-2
デザイナーの役割は 完璧な
アニメーションを作ることです

00:24:09.449 --> 00:24:15.656 align:start position:21% line:-2
完成すると 手綱は
インターフェイスのユーザに戻され

00:24:15.756 --> 00:24:17.958 align:start position:34% line:-1
操作が続行されます

00:24:18.091 --> 00:24:22.062 align:start position:30% line:-2
いわば
アニメーションと操作は

00:24:22.162 --> 00:24:26.567 align:start position:32% line:-2
時系列に沿って
交互に行われるのです

00:24:27.968 --> 00:24:32.539 align:start position:23% line:-2
fluidインターフェイスでは
人の持つ動的性質により

00:24:32.639 --> 00:24:36.643 align:start position:34% line:-2
デザイナーの手から
主導権が離れます

00:24:37.010 --> 00:24:39.580 align:start position:32% line:-1
デザイナーは代わりに

00:24:39.680 --> 00:24:44.051 align:start position:21% line:-2
操作時に どのような動きをするか
設計します

00:24:45.385 --> 00:24:49.056 align:start position:32% line:-2
そして一連の
動的ビヘイビアとして

00:24:49.156 --> 00:24:51.892 align:start position:32% line:-1
常に有効にするのです

00:24:53.227 --> 00:24:57.965 align:start position:21% line:-2
今日はこの動的ビヘイビアについて
お話しします

00:24:59.099 --> 00:25:03.003 align:start position:29% line:-2
まず
シームレスモーションです

00:24:59.099 --> 00:25:03.003 align:start position:29% line:-2
まず
シームレスモーションです

00:25:03.270 --> 00:25:05.939 align:start position:34% line:-1
この要素のおかげで

00:25:06.039 --> 00:25:09.877 align:start position:25% line:-2
動的モーションが
体の延長のように感じられます

00:25:10.878 --> 00:25:12.679 align:start position:34% line:-1
特徴も見ていきます

00:25:12.780 --> 00:25:16.850 align:start position:30% line:-2
アニメーションなしでも
インターフェイスに

00:25:16.950 --> 00:25:23.590 align:start position:29% line:-2
遊びの要素や特徴 触感を
取り入れることができます

00:25:24.491 --> 00:25:30.731 align:start position:27% line:-2
最後に ユーザの動きから
どのように意図を解釈するか

00:25:30.831 --> 00:25:32.132 align:start position:39% line:-1
お話しします

00:25:32.232 --> 00:25:36.136 align:start position:34% line:-2
ジェスチャを
よく分析することで

00:25:36.236 --> 00:25:39.807 align:start position:34% line:-2
不確実性を排除し
意図を読み解きます

00:25:41.775 --> 00:25:43.577 align:start position:34% line:-1
では まず始めに―

00:25:43.844 --> 00:25:47.815 align:start position:29% line:-2
シームレスモーションとは
何でしょうか？

00:25:48.482 --> 00:25:53.020 align:start position:34% line:-2
概念をつかむために
例を見てみましょう

00:25:54.354 --> 00:25:58.425 align:start position:36% line:-2
車が一定の速度で
進んでいます

00:25:58.525 --> 00:26:02.329 align:start position:34% line:-2
ブレーキをかけると
減速して止まります

00:25:58.525 --> 00:26:02.329 align:start position:34% line:-2
ブレーキをかけると
減速して止まります

00:26:04.331 --> 00:26:09.169 align:start position:27% line:-2
今度は 位置を描写しながら
見てみましょう

00:26:11.305 --> 00:26:15.843 align:start position:32% line:-2
まず 曲線は直線的に
右上に向かいます

00:26:15.943 --> 00:26:19.746 align:start position:30% line:-2
速度が一定であることを
意味します

00:26:19.847 --> 00:26:21.148 align:start position:43% line:-1
不変です

00:26:21.515 --> 00:26:25.986 align:start position:32% line:-2
しかし その後
ゆっくりと曲がり始め

00:26:26.320 --> 00:26:28.188 align:start position:38% line:-1
直線と離れます

00:26:28.288 --> 00:26:33.627 align:start position:29% line:-2
ブレーキが かかったので
摩擦により減速するのです

00:26:34.194 --> 00:26:37.364 align:start position:29% line:-1
曲線の終わりは水平になり

00:26:37.464 --> 00:26:41.935 align:start position:29% line:-2
位置が不変になったことを
示します

00:26:44.037 --> 00:26:48.976 align:start position:21% line:-2
この曲線はシームレスモーションを
視覚化しています

00:26:49.076 --> 00:26:54.681 align:start position:27% line:-2
曲線に切れ目がなく
突然の方向変換もありません

00:26:56.049 --> 00:26:58.118 align:start position:29% line:-1
スムーズでシームレスです

00:26:58.218 --> 00:27:03.156 align:start position:25% line:-2
ブレーキのような
新しい動的ビヘイビアが加わり

00:26:58.218 --> 00:27:03.156 align:start position:25% line:-2
ブレーキのような
新しい動的ビヘイビアが加わり

00:27:03.257 --> 00:27:06.760 align:start position:34% line:-2
車に摩擦が
かかった時でもです

00:27:08.161 --> 00:27:10.497 align:start position:32% line:-1
車が完全に止まる時も

00:27:10.597 --> 00:27:13.333 align:start position:34% line:-1
曲線はスムーズです

00:27:13.433 --> 00:27:18.772 align:start position:30% line:-2
車がいつ止まったのか
正確には判別できません

00:27:19.773 --> 00:27:24.978 align:start position:21% line:-2
fluidインターフェイスの話で
なぜ車の例なのか？

00:27:25.612 --> 00:27:29.817 align:start position:29% line:-2
なぜなら 物質界の特性を
応用できると

00:27:29.917 --> 00:27:32.019 align:start position:38% line:-1
考えるからです

00:27:32.453 --> 00:27:35.823 align:start position:32% line:-2
車の例は
分かりやすいですよね

00:27:35.923 --> 00:27:39.693 align:start position:36% line:-2
車のような物体が
どのように動くか

00:27:39.827 --> 00:27:42.996 align:start position:30% line:-1
共通認識があるからです

00:27:43.764 --> 00:27:45.899 align:start position:29% line:-1
この点が参考になりました

00:27:47.034 --> 00:27:53.273 align:start position:25% line:-2
車の動きを完全に
模倣するわけではありませんが

00:27:53.373 --> 00:27:56.076 align:start position:30% line:-1
車の動きを応用できます

00:27:56.176 --> 00:28:00.514 align:start position:30% line:-2
物質界での物体の動きを
応用するのです

00:27:56.176 --> 00:28:00.514 align:start position:30% line:-2
物質界での物体の動きを
応用するのです

00:28:00.948 --> 00:28:06.120 align:start position:25% line:-2
それを動的ビヘイビアで使えば
自然な動きになり

00:28:06.220 --> 00:28:10.524 align:start position:32% line:-2
共感や信頼感も
生まれやすくなります

00:28:11.758 --> 00:28:16.663 align:start position:23% line:-2
物質界を参照して
動的ビヘイビアを設計することは

00:28:16.763 --> 00:28:20.100 align:start position:30% line:-2
以前からiPhoneで
行われています

00:28:20.801 --> 00:28:25.272 align:start position:30% line:-2
おもちゃの車を押すのと
同じくらい簡単に

00:28:25.439 --> 00:28:28.742 align:start position:34% line:-2
子供でも簡単に
スクロールできます

00:28:30.644 --> 00:28:36.250 align:start position:29% line:-2
スクロールについて
主な特徴は何でしょうか？

00:28:37.518 --> 00:28:42.956 align:start position:29% line:-2
１つは 我々の共通認識を
利用していることです

00:28:43.056 --> 00:28:48.095 align:start position:29% line:-2
物体の動きや物体への
作用に関する共通認識です

00:28:49.429 --> 00:28:52.900 align:start position:34% line:-2
コンテンツの動きは
シームレスです

00:28:53.000 --> 00:28:56.737 align:start position:27% line:-2
操作時や
コンテンツをドラッグする時

00:28:56.904 --> 00:29:01.542 align:start position:29% line:-2
体は滑らかなので
動きにも流動性があります

00:28:56.904 --> 00:29:01.542 align:start position:29% line:-2
体は滑らかなので
動きにも流動性があります

00:29:02.276 --> 00:29:04.645 align:start position:34% line:-1
コンテンツを離すと

00:29:04.745 --> 00:29:07.581 align:start position:29% line:-1
減速し やがて止まります

00:29:07.848 --> 00:29:13.187 align:start position:27% line:-2
インターフェイスに置く時の
推進力が維持されるためです

00:29:14.621 --> 00:29:18.959 align:start position:34% line:-2
スクロールの際の
摩擦量は一定なので

00:29:19.059 --> 00:29:22.396 align:start position:34% line:-2
予測可能で
簡単に習得できます

00:29:23.430 --> 00:29:27.601 align:start position:32% line:-2
最後に コンテンツは
ゆっくりと止まるので

00:29:27.701 --> 00:29:31.839 align:start position:29% line:-2
正確には いつ止まったか
分かりません

00:29:32.372 --> 00:29:35.776 align:start position:27% line:-1
終わりという感覚がないので

00:29:35.876 --> 00:29:41.381 align:start position:25% line:-2
常に コンテンツを
動かせるという感覚があります

00:29:41.482 --> 00:29:45.786 align:start position:29% line:-2
スクロールが際限なく
続くような感覚があるので

00:29:45.886 --> 00:29:49.423 align:start position:32% line:-2
何かが終わるのを
待つ必要はありません

00:29:51.658 --> 00:29:53.994 align:start position:32% line:-1
実世界のビヘイビアは

00:29:54.094 --> 00:29:57.798 align:start position:27% line:-1
無数の特徴により作られます

00:29:57.931 --> 00:30:01.568 align:start position:34% line:-2
今回は １つの
特徴を取り上げます

00:29:57.931 --> 00:30:01.568 align:start position:34% line:-2
今回は １つの
特徴を取り上げます

00:30:01.668 --> 00:30:06.406 align:start position:32% line:-2
我々の設計作業で
不可欠となる要素です

00:30:07.841 --> 00:30:10.444 align:start position:34% line:-1
花の質感にご注目を

00:30:10.611 --> 00:30:14.581 align:start position:36% line:-2
自然が生み出す
この繊維の特徴は

00:30:14.948 --> 00:30:18.685 align:start position:34% line:-2
元へ戻ろうとする
回復力を持つ点です

00:30:19.853 --> 00:30:25.993 align:start position:30% line:-2
圧力や張力がかかっても
この回復力があることで

00:30:26.093 --> 00:30:28.529 align:start position:30% line:-1
花は元の状態に戻ります

00:30:29.429 --> 00:30:32.666 align:start position:32% line:-2
人間の体も
高い回復力を持ちます

00:30:33.033 --> 00:30:37.171 align:start position:30% line:-2
我々が 驚くほど長時間
動けるのは

00:30:37.271 --> 00:30:42.609 align:start position:27% line:-2
筋力のためではなく
力を抜く能力があるためです

00:30:43.076 --> 00:30:45.612 align:start position:29% line:-1
回復できるということです

00:30:46.079 --> 00:30:49.583 align:start position:30% line:-2
筋肉を
リラックスさせることで

00:30:49.683 --> 00:30:54.121 align:start position:34% line:-2
エネルギーを維持し
自然な感覚を得ます

00:30:55.556 --> 00:30:59.359 align:start position:30% line:-2
iPhone Xも
同様の回復力を有します

00:30:59.760 --> 00:31:05.399 align:start position:29% line:-2
アイコンをタップすると
アプリケーションが起動し

00:30:59.760 --> 00:31:05.399 align:start position:29% line:-2
アイコンをタップすると
アプリケーションが起動し

00:31:05.799 --> 00:31:08.268 align:start position:29% line:-1
スクリーンに表示されます

00:31:08.368 --> 00:31:10.204 align:start position:30% line:-1
下部からスワイプすると

00:31:10.304 --> 00:31:14.374 align:start position:34% line:-2
ホーム画面の
元の位置に戻ります

00:31:16.610 --> 00:31:19.046 align:start position:34% line:-1
スクロールも同様で

00:31:19.146 --> 00:31:22.850 align:start position:32% line:-2
やりすぎると
ゴムのように動きます

00:31:23.083 --> 00:31:25.052 align:start position:34% line:-1
指を画面から離すと

00:31:25.285 --> 00:31:29.123 align:start position:34% line:-2
コンテンツが
画面内に収まります

00:31:29.223 --> 00:31:33.927 align:start position:29% line:-2
これにより 次の
スクロールに備えるのです

00:31:35.429 --> 00:31:41.034 align:start position:27% line:-2
では スクリーンの裏側で
何が起きているか見てみます

00:31:42.603 --> 00:31:47.908 align:start position:29% line:-2
バネがついたボールを
コンテンツだとしましょう

00:31:49.610 --> 00:31:51.979 align:start position:30% line:-1
接続しているほうの端が

00:31:52.079 --> 00:31:55.849 align:start position:36% line:-2
画面に表示される
“現在地”です

00:31:56.417 --> 00:32:01.455 align:start position:29% line:-2
元に戻ろうとする力により
この現在地は

00:31:56.417 --> 00:32:01.455 align:start position:29% line:-2
元に戻ろうとする力により
この現在地は

00:32:01.555 --> 00:32:05.826 align:start position:27% line:-2
反対側の端“ターゲット”に
引っ張られます

00:32:05.926 --> 00:32:09.630 align:start position:29% line:-2
これがコンテンツの場所に
影響します

00:32:10.964 --> 00:32:15.769 align:start position:27% line:-2
バネが現在地を
ターゲットに引き寄せました

00:32:16.403 --> 00:32:19.773 align:start position:34% line:-2
バネが見せる
シームレスな動きは

00:32:19.873 --> 00:32:24.144 align:start position:29% line:-2
このビヘイビアに備わった
固有の特徴です

00:32:24.845 --> 00:32:30.384 align:start position:27% line:-2
滑らかなインターフェイスに
有用な特徴と言えます

00:32:30.717 --> 00:32:35.889 align:start position:30% line:-2
ビヘイビア自体に備わり
無料で手に入る特徴です

00:32:37.791 --> 00:32:41.595 align:start position:29% line:-2
我々も このビヘイビアを
活用します

00:32:41.695 --> 00:32:46.467 align:start position:30% line:-2
ボールに ターゲットの
場所さえ示せば

00:32:46.567 --> 00:32:49.136 align:start position:30% line:-1
シームレスに動くのです

00:32:49.403 --> 00:32:52.706 align:start position:29% line:-2
一方で スピードや
オーバーシュートについて

00:32:52.806 --> 00:32:56.310 align:start position:32% line:-2
コントロールするには
どうすれば？

00:32:56.977 --> 00:33:01.615 align:start position:32% line:-2
ボールを大きく
重くする手があります

00:32:56.977 --> 00:33:01.615 align:start position:32% line:-2
ボールを大きく
重くする手があります

00:33:02.082 --> 00:33:05.819 align:start position:32% line:-2
ボールの慣性に
変化を与えるでしょう

00:33:05.919 --> 00:33:08.789 align:start position:32% line:-2
動き出したり
停止するタイミングを

00:33:08.889 --> 00:33:12.326 align:start position:30% line:-1
遅らせることになります

00:33:12.426 --> 00:33:15.195 align:start position:34% line:-2
オーバーシュートも
抑えられます

00:33:16.530 --> 00:33:21.768 align:start position:29% line:-2
バネの引っ張る力を
大きくする方法もあります

00:33:22.002 --> 00:33:25.973 align:start position:30% line:-2
ボールに適用される力が
大きくなり

00:33:26.073 --> 00:33:28.742 align:start position:27% line:-1
ターゲットに速く近付きます

00:33:30.010 --> 00:33:33.480 align:start position:27% line:-1
または車のブレーキのように

00:33:33.714 --> 00:33:39.419 align:start position:27% line:-2
ボール表面の減衰力や
摩擦力を変える手もあります

00:33:39.553 --> 00:33:43.457 align:start position:34% line:-2
ボールのスピードに
ブレーキをかけ

00:33:43.557 --> 00:33:46.226 align:start position:34% line:-2
オーバーシュートも
抑制します

00:33:47.528 --> 00:33:51.165 align:start position:38% line:-2
ボールやバネの
物理的性質は

00:33:51.265 --> 00:33:55.536 align:start position:32% line:-2
科学の法則に
従っていると言えます

00:33:55.636 --> 00:33:59.606 align:start position:30% line:-2
しかしスクリーン上での
ビヘイビアに関しては

00:33:59.706 --> 00:34:04.678 align:start position:30% line:-2
不便な面もあり
設計上 調整が必要です

00:33:59.706 --> 00:34:04.678 align:start position:30% line:-2
不便な面もあり
設計上 調整が必要です

00:34:05.679 --> 00:34:10.484 align:start position:30% line:-2
そこでツールを使用する
設計者のニーズに応え

00:34:10.583 --> 00:34:14.121 align:start position:34% line:-2
インターフェイスに
手を加えます

00:34:14.688 --> 00:34:21.128 align:start position:27% line:-2
設計上 使いやすくするには
どう簡易化すべきでしょうか

00:34:22.295 --> 00:34:28.902 align:start position:29% line:-2
バネの基本的な要素である
質量と減衰力は保持し

00:34:29.002 --> 00:34:32.739 align:start position:36% line:-2
２つのシンプルな
法則に絞りました

00:34:33.239 --> 00:34:38.045 align:start position:29% line:-2
１つはオーバーシュートを
コントロールする減衰力

00:34:38.145 --> 00:34:41.348 align:start position:30% line:-2
オーバーシュートがない
減衰力100％から

00:34:41.447 --> 00:34:45.518 align:start position:27% line:-2
バネが不安定に揺れる
０％までコントロールします

00:34:46.920 --> 00:34:51.024 align:start position:38% line:-2
２つ目の要素は
“反応”です

00:34:51.891 --> 00:34:56.530 align:start position:27% line:-2
現在地がターゲットに達する
速さを決めます

00:34:56.730 --> 00:35:00.134 align:start position:27% line:-2
元に戻ろうとする力について
話す時

00:34:56.730 --> 00:35:00.134 align:start position:27% line:-2
元に戻ろうとする力について
話す時

00:35:00.234 --> 00:35:05.038 align:start position:29% line:-2
“持続時間”という言葉を
我々は使いません

00:35:05.138 --> 00:35:09.476 align:start position:30% line:-2
持続的な変化を
強調してしまうためです

00:35:09.576 --> 00:35:13.547 align:start position:32% line:-2
バネはどこでも
持続的に動くものです

00:35:14.248 --> 00:35:19.052 align:start position:27% line:-2
技術的には“減衰比”や
“周波数応答”と呼ばれます

00:35:19.153 --> 00:35:22.723 align:start position:36% line:-2
もし そのほうが
分かりやすければ

00:35:22.823 --> 00:35:25.459 align:start position:29% line:-1
専門用語を使ってください

00:35:27.561 --> 00:35:32.499 align:start position:29% line:-2
回復力をコントロールする
２つの要素を与えました

00:35:33.801 --> 00:35:38.305 align:start position:30% line:-2
しかし他にも
可能性は無数にあります

00:35:38.405 --> 00:35:43.811 align:start position:27% line:-2
２つの要素を取り入れるにも
多くの方法があり

00:35:43.911 --> 00:35:46.113 align:start position:30% line:-1
ビヘイビアも変わります

00:35:46.914 --> 00:35:50.484 align:start position:34% line:-2
アプリケーションの
特徴を作るための

00:35:50.584 --> 00:35:52.820 align:start position:36% line:-1
取り入れ方とは？

00:35:54.054 --> 00:35:59.827 align:start position:25% line:-2
“デバイスはツールである”を
念頭に置きます

00:36:00.127 --> 00:36:05.799 align:start position:30% line:-2
ツールは目的にかなった
使用法をするものです

00:36:06.533 --> 00:36:12.406 align:start position:29% line:-2
不要な動きをさせることは
望ましくありません

00:36:13.140 --> 00:36:15.642 align:start position:30% line:-1
シンプルに考えましょう

00:36:15.976 --> 00:36:20.614 align:start position:29% line:-2
バネのオーバーシュートは
避けるべきです

00:36:21.715 --> 00:36:24.718 align:start position:29% line:-1
減衰力100％で始めるか

00:36:24.818 --> 00:36:28.489 align:start position:30% line:-2
オーバーシュートが
起きないよう調整します

00:36:28.589 --> 00:36:32.459 align:start position:30% line:-2
スムーズでシームレスな
動きを得られ

00:36:32.593 --> 00:36:37.231 align:start position:30% line:-2
作業中のタスクを
妨げることもありません

00:36:39.266 --> 00:36:44.438 align:start position:27% line:-2
では弾む動きは
どこで使われるのが適切か？

00:36:45.072 --> 00:36:49.877 align:start position:30% line:-2
動かすジェスチャ自体に
推進力があるなら

00:36:50.144 --> 00:36:53.280 align:start position:30% line:-2
オーバーシュートとして
反映すべきです

00:36:54.381 --> 00:36:59.153 align:start position:27% line:-2
ジェスチャに推進力があり
オーバーシュートがない場合

00:36:59.253 --> 00:37:05.626 align:start position:30% line:-2
正しい反応がないという
不満感を覚えるでしょう

00:36:59.253 --> 00:37:05.626 align:start position:30% line:-2
正しい反応がないという
不満感を覚えるでしょう

00:37:07.227 --> 00:37:09.997 align:start position:30% line:-2
例えば
ミュージックAppです

00:37:10.297 --> 00:37:15.335 align:start position:29% line:-2
画面下部に現在 再生中の
曲名などが表示され

00:37:15.469 --> 00:37:18.672 align:start position:36% line:-2
タップすると
全画面に現れます

00:37:20.207 --> 00:37:25.879 align:start position:27% line:-2
タップ自体には 方向を伴う
推進力は発生しないので

00:37:25.979 --> 00:37:29.717 align:start position:27% line:-2
100％の減衰力を使い
オーバーシュートを防ぎます

00:37:31.018 --> 00:37:36.723 align:start position:30% line:-2
スワイプで再生中画面を
閉じると 推進力が発生

00:37:36.823 --> 00:37:40.627 align:start position:34% line:-2
減衰力80％で
弾力ある動きを生み

00:37:40.728 --> 00:37:43.364 align:start position:30% line:-1
ジェスチャに反応します

00:37:46.533 --> 00:37:51.104 align:start position:34% line:-2
機能的な面でも
弾む動きは有用です

00:37:51.271 --> 00:37:55.509 align:start position:30% line:-2
例えば ユーザに
ヒントを与える場合です

00:37:57.111 --> 00:38:01.281 align:start position:32% line:-2
iPhone Xの
ロック画面にあるのは

00:37:57.111 --> 00:38:01.281 align:start position:32% line:-2
iPhone Xの
ロック画面にあるのは

00:38:01.548 --> 00:38:04.785 align:start position:34% line:-2
フラッシュライトと
カメラのボタンです

00:38:06.453 --> 00:38:09.456 align:start position:27% line:-1
誤操作による起動を防ぐため

00:38:09.556 --> 00:38:14.161 align:start position:27% line:-2
フラッシュライトの起動には
意図的な動作が必要です

00:38:14.862 --> 00:38:19.133 align:start position:32% line:-2
しかし その方法を
知らなかったとします

00:38:19.500 --> 00:38:22.002 align:start position:29% line:-1
タップするとボタンが弾み

00:38:22.102 --> 00:38:26.306 align:start position:27% line:-2
ボタンが機能していることを
示します

00:38:26.940 --> 00:38:31.345 align:start position:29% line:-2
また操作に対し
反応していると分かります

00:38:31.445 --> 00:38:36.049 align:start position:29% line:-2
これによりユーザは
もっとしっかり押すことで

00:38:36.417 --> 00:38:40.320 align:start position:34% line:-2
起動するという
ヒントを得るのです

00:38:40.487 --> 00:38:44.458 align:start position:27% line:-2
弾む動きは
何かを暗示するのに便利です

00:38:47.361 --> 00:38:51.431 align:start position:29% line:-2
ここまで“動き”によって
物を動かし

00:38:51.531 --> 00:38:55.736 align:start position:30% line:-2
質量や画面上での表示を
変化させました

00:38:56.370 --> 00:38:59.907 align:start position:34% line:-2
動きは より多様な
変化を起こします

00:39:00.007 --> 00:39:05.746 align:start position:29% line:-2
例えば光や色
感触や感覚 音さえもです

00:39:05.846 --> 00:39:09.883 align:start position:30% line:-2
我々が感知できる
多くの変化に起因します

00:39:11.552 --> 00:39:14.888 align:start position:30% line:-2
我々は この“動き”を
もっと活用し

00:39:14.988 --> 00:39:18.892 align:start position:32% line:-2
アプリケーションに
適用できると考えます

00:39:19.760 --> 00:39:22.296 align:start position:29% line:-1
動きへの動的ビヘイビアと

00:39:22.396 --> 00:39:26.033 align:start position:32% line:-2
音や触覚への
動的ビヘイビアを結合

00:39:26.166 --> 00:39:30.604 align:start position:29% line:-2
インターフェイスの表情を
根本から変えます

00:39:35.375 --> 00:39:40.948 align:start position:27% line:-2
ユーザが感知する
ジェスチャの結果を変えます

00:39:41.048 --> 00:39:44.418 align:start position:30% line:-2
ただのスクロールという
挙動から

00:39:44.518 --> 00:39:48.989 align:start position:27% line:-2
感触のある
インターフェイスになります

00:39:51.725 --> 00:39:56.630 align:start position:29% line:-2
アプリケーションを作る際
考えるべき最後の１点は

00:39:57.164 --> 00:40:01.401 align:start position:30% line:-2
特徴に結合性を
感じられるかどうかです

00:39:57.164 --> 00:40:01.401 align:start position:30% line:-2
特徴に結合性を
感じられるかどうかです

00:40:02.402 --> 00:40:03.737 align:start position:41% line:-1
説明します

00:40:04.938 --> 00:40:08.275 align:start position:30% line:-2
同じアプリケーションや
システム内で

00:40:08.375 --> 00:40:12.512 align:start position:30% line:-2
同種のビヘイビアが
保たれることは大切です

00:40:12.980 --> 00:40:15.416 align:start position:32% line:-1
例えばスクロールです

00:40:15.516 --> 00:40:19.353 align:start position:29% line:-2
ページを下に送るのは
スクロールビヘイビアです

00:40:19.453 --> 00:40:21.088 align:start position:29% line:-1
ステータスバーをタップし

00:40:21.188 --> 00:40:24.625 align:start position:29% line:-2
上部にスクロールするのは
回復のビヘイビア

00:40:24.758 --> 00:40:29.563 align:start position:32% line:-2
２つの場合で 動きに
差が出てはいけません

00:40:29.663 --> 00:40:33.133 align:start position:34% line:-2
異なる２つの
ビヘイビアを用いて

00:40:33.233 --> 00:40:35.869 align:start position:27% line:-1
動きを起こす場合も同様です

00:40:36.870 --> 00:40:40.841 align:start position:29% line:-2
１つの相互作用だけでなく
アプリケーション全体に

00:40:41.175 --> 00:40:42.943 align:start position:34% line:-1
適用されるべきです

00:40:43.043 --> 00:40:46.580 align:start position:27% line:-2
設定したアプリケーションの
特徴を

00:40:46.680 --> 00:40:49.550 align:start position:30% line:-1
全体を通じて踏襲します

00:40:49.650 --> 00:40:52.786 align:start position:34% line:-2
そうすればユーザは
ビヘイビアを

00:40:52.886 --> 00:40:55.188 align:start position:34% line:-1
簡単に習得できます

00:40:55.289 --> 00:41:01.428 align:start position:27% line:-2
我々は繰り返しから学び
それを他に適用するからです

00:40:55.289 --> 00:41:01.428 align:start position:27% line:-2
我々は繰り返しから学び
それを他に適用するからです

00:41:06.133 --> 00:41:08.869 align:start position:30% line:-1
続いて お話しするのは

00:41:09.169 --> 00:41:13.374 align:start position:27% line:-2
意図を伴う
動的モーションについてです

00:41:17.377 --> 00:41:20.180 align:start position:34% line:-1
例えばボタンの場合

00:41:20.914 --> 00:41:23.984 align:start position:34% line:-2
ジェスチャの意図は
明らかです

00:41:24.084 --> 00:41:28.589 align:start position:29% line:-2
画面に異なる
３つのアイコンがあります

00:41:29.056 --> 00:41:32.426 align:start position:27% line:-1
何を意図するか明らかですね

00:41:33.961 --> 00:41:36.030 align:start position:30% line:-1
スワイプはどうでしょう

00:41:36.363 --> 00:41:39.166 align:start position:36% line:-2
意図が 即座には
分かりません

00:41:39.466 --> 00:41:43.971 align:start position:34% line:-2
モーションは意図を
記号化しています

00:41:44.171 --> 00:41:46.573 align:start position:32% line:-1
ですから意図を解釈し

00:41:46.673 --> 00:41:51.311 align:start position:27% line:-2
そのモーションへの
対応を決めることが大切です

00:41:52.412 --> 00:41:53.947 align:start position:38% line:-1
例を見てみます

00:41:54.848 --> 00:41:58.552 align:start position:30% line:-2
FaceTime通話を
かけるとします

00:41:58.952 --> 00:42:05.092 align:start position:27% line:-2
画面の端に 自分が映った
小さなウインドウが現れます

00:41:58.952 --> 00:42:05.092 align:start position:27% line:-2
画面の端に 自分が映った
小さなウインドウが現れます

00:42:05.192 --> 00:42:08.729 align:start position:34% line:-2
これが 相手に
見えている映像です

00:42:09.563 --> 00:42:13.634 align:start position:25% line:-2
“ピクチャ･イン･ピクチャ”
略して“PIP”です

00:42:14.701 --> 00:42:19.473 align:start position:32% line:-2
浮いているように見せ
移動できることを暗示

00:42:19.807 --> 00:42:25.379 align:start position:30% line:-2
軽いフリックで 好きな
コーナーへ移動できます

00:42:27.781 --> 00:42:32.152 align:start position:27% line:-2
“再生”“停止”など
先ほどの３つのボタンと比べ

00:42:32.452 --> 00:42:34.021 align:start position:36% line:-1
何が違うでしょう

00:42:35.055 --> 00:42:40.260 align:start position:30% line:-2
この場合 目に見えない
４つの区画が存在します

00:42:40.427 --> 00:42:45.799 align:start position:29% line:-2
タップできるような
明らかな表示はありません

00:42:45.899 --> 00:42:50.304 align:start position:29% line:-2
ジェスチャを通して
起きたモーションに注目し

00:42:50.404 --> 00:42:54.842 align:start position:32% line:-2
どの区画へ行くべきか
意図を読み取ります

00:42:55.476 --> 00:42:59.980 align:start position:29% line:-2
３つの区画は
“ジェスチャの終点”です

00:43:00.314 --> 00:43:04.084 align:start position:27% line:-1
PIPにおける我々の目標は

00:43:04.184 --> 00:43:07.021 align:start position:29% line:-1
正しい終点を見つけること

00:43:07.254 --> 00:43:12.593 align:start position:29% line:-2
そして意図に応じた終点と
結び付けることです

00:43:15.095 --> 00:43:20.901 align:start position:25% line:-2
１つ目は PIPをドラッグし
１番近い終点と結ぶ方法

00:43:22.035 --> 00:43:26.640 align:start position:30% line:-2
隣の区画に
PIPを移動できました

00:43:27.307 --> 00:43:32.312 align:start position:27% line:-2
しかし場所が少し遠くなると
問題が発生します

00:43:33.547 --> 00:43:38.385 align:start position:30% line:-2
希望の区画と結ぶため
PIPを画面の半分以上

00:43:38.485 --> 00:43:41.155 align:start position:27% line:-1
ドラッグする必要があります

00:43:41.255 --> 00:43:45.025 align:start position:30% line:-2
これではユーザの意図を
読めていません

00:43:45.125 --> 00:43:47.394 align:start position:29% line:-1
ここでフリックしてみると

00:43:47.995 --> 00:43:52.332 align:start position:29% line:-2
意に反し １番近い区画に
戻ってしまいます

00:43:53.300 --> 00:43:56.070 align:start position:30% line:-1
問題は 位置だけを見て

00:43:56.170 --> 00:43:59.807 align:start position:34% line:-2
PIPの推進力を
無視している点です

00:43:59.907 --> 00:44:02.509 align:start position:30% line:-1
速度も考慮していません

00:43:59.907 --> 00:44:02.509 align:start position:30% line:-1
速度も考慮していません

00:44:03.277 --> 00:44:06.013 align:start position:29% line:-1
正しい終点を見極めるのに

00:44:06.113 --> 00:44:09.883 align:start position:30% line:-2
推進力を活用する方法を
考えます

00:44:11.485 --> 00:44:17.191 align:start position:29% line:-2
いったん終点は忘れて
一歩引いて見てみましょう

00:44:17.624 --> 00:44:20.527 align:start position:29% line:-1
問題をシンプルに考えます

00:44:22.229 --> 00:44:27.201 align:start position:29% line:-2
画面上でコンテンツを
移動するのが最終目的なら

00:44:27.634 --> 00:44:32.840 align:start position:27% line:-2
スクロールという強力で
最適なビヘイビアがあります

00:44:34.174 --> 00:44:37.478 align:start position:30% line:-1
使わない手はありません

00:44:38.445 --> 00:44:43.650 align:start position:29% line:-2
スクロール時に どこまで
コンテンツを動かすか

00:44:43.951 --> 00:44:46.186 align:start position:30% line:-1
直観的に理解しています

00:44:47.287 --> 00:44:52.059 align:start position:25% line:-2
そこで今度は
PIPをスクロールしてみると

00:44:52.292 --> 00:44:54.595 align:start position:27% line:-1
滑るように動き 止まります

00:44:54.695 --> 00:45:00.033 align:start position:29% line:-2
スクロールと同じ
減速の方法を使っています

00:44:54.695 --> 00:45:00.033 align:start position:29% line:-2
スクロールと同じ
減速の方法を使っています

00:45:00.834 --> 00:45:04.338 align:start position:34% line:-2
他で習得した特徴を
適用するという

00:45:04.638 --> 00:45:07.941 align:start position:29% line:-1
メリットを利用しています

00:45:08.042 --> 00:45:12.079 align:start position:29% line:-2
同一システムで
同じビヘイビアを用いる―

00:45:12.646 --> 00:45:13.814 align:start position:38% line:-1
メリットですね

00:45:15.382 --> 00:45:21.355 align:start position:27% line:-2
このPIPの位置の話は
実際の話ではありませんから

00:45:21.455 --> 00:45:23.991 align:start position:34% line:-2
インターフェイスを
お見せしません

00:45:24.091 --> 00:45:26.160 align:start position:27% line:-1
ここでは“予測”を行います

00:45:26.894 --> 00:45:29.196 align:start position:29% line:-1
PIPがフリックされると

00:45:29.296 --> 00:45:33.567 align:start position:34% line:-2
その速度と減速率を
掛け合わせます

00:45:33.667 --> 00:45:38.972 align:start position:29% line:-2
スクロールで進むであろう
位置を予測するのです

00:45:40.974 --> 00:45:44.745 align:start position:38% line:-2
１番近い終点を
探すのではなく

00:45:44.845 --> 00:45:50.350 align:start position:29% line:-2
予測される位置を計算し
移動する方法を使いました

00:45:51.652 --> 00:45:56.523 align:start position:29% line:-2
これにより対角の区画へも
軽いフリックで

00:45:57.124 --> 00:46:00.027 align:start position:32% line:-1
期待通りに移動します

00:45:57.124 --> 00:46:00.027 align:start position:32% line:-1
期待通りに移動します

00:46:03.297 --> 00:46:08.502 align:start position:29% line:-2
推進力を予測する考え方は
かなり有用です

00:46:08.602 --> 00:46:12.873 align:start position:32% line:-2
コーディングの一例を
ご紹介しますので

00:46:12.973 --> 00:46:15.275 align:start position:34% line:-1
ぜひお試しください

00:46:16.143 --> 00:46:20.147 align:start position:34% line:-2
PIPの初期速度と
減速率を―

00:46:20.514 --> 00:46:22.282 align:start position:38% line:-1
まずは与えます

00:46:22.783 --> 00:46:28.555 align:start position:29% line:-2
それらの値を元に
動きの終点が取得できます

00:46:28.889 --> 00:46:30.157 align:start position:41% line:-1
簡単ですね

00:46:31.625 --> 00:46:36.630 align:start position:23% line:-2
FaceTimeでのパン操作の
コーディング例です

00:46:37.698 --> 00:46:41.301 align:start position:7% line:-2
“UIScrollView.
DecelerationRate”を使っています

00:46:41.401 --> 00:46:47.407 align:start position:27% line:-2
一般的なスクロールの感覚に
合わせているわけです

00:46:48.075 --> 00:46:51.912 align:start position:34% line:-2
それを使って
予測を行っています

00:46:52.012 --> 00:46:58.218 align:start position:29% line:-2
PIPの速度と減速率から
PIPの位置を仮想し―

00:46:59.486 --> 00:47:05.459 align:start position:25% line:-2
得られた位置から
最寄りのコーナーを特定します

00:46:59.486 --> 00:47:05.459 align:start position:25% line:-2
得られた位置から
最寄りのコーナーを特定します

00:47:06.060 --> 00:47:08.729 align:start position:36% line:-2
そしてそこに
PIPを送ります

00:47:11.365 --> 00:47:15.469 align:start position:30% line:-2
今のように移動の終点を
算出する際に―

00:47:16.236 --> 00:47:20.374 align:start position:36% line:-2
予測を行う手法は
とても便利です

00:47:20.474 --> 00:47:25.245 align:start position:32% line:-2
ジェスチャの推進力を
尊重できます

00:47:26.213 --> 00:47:30.918 align:start position:32% line:-2
この予測の関数は
“位置”だけでなく―

00:47:31.018 --> 00:47:37.057 align:start position:25% line:-2
“スケール”や“回転”
２つの組み合わせにも使えます

00:47:37.658 --> 00:47:40.394 align:start position:30% line:-1
かなり万能なツールです

00:47:40.494 --> 00:47:44.231 align:start position:36% line:-2
これを使えば
動的モーションが

00:47:44.331 --> 00:47:49.436 align:start position:34% line:-2
自分の延長のように
感じられるはずです

00:47:52.139 --> 00:47:56.110 align:start position:30% line:-2
以上が動的モーションを
意識した設計です

00:47:56.643 --> 00:47:59.646 align:start position:34% line:-2
ビヘイビアと
インタラクションは

00:47:59.747 --> 00:48:03.350 align:start position:32% line:-2
シームレスであるのが
理想です

00:47:59.747 --> 00:48:03.350 align:start position:32% line:-2
シームレスであるのが
理想です

00:48:05.419 --> 00:48:10.591 align:start position:27% line:-2
みんなが持っている
物理的な直感を頼りましょう

00:48:10.691 --> 00:48:15.429 align:start position:27% line:-2
子供の頃に学んだ
“物体はどう動くか”こそが

00:48:15.529 --> 00:48:19.600 align:start position:29% line:-2
動的なインターフェイスの
要となります

00:48:21.201 --> 00:48:24.405 align:start position:34% line:-2
弾む動きは
目的を持って使い―

00:48:24.705 --> 00:48:27.841 align:start position:36% line:-2
本当に必要か
見極めてください

00:48:28.142 --> 00:48:32.045 align:start position:36% line:-2
何か特徴や感触を
付け加える際は

00:48:32.146 --> 00:48:34.581 align:start position:34% line:-1
実用性を考慮します

00:48:36.083 --> 00:48:38.919 align:start position:32% line:-2
最後に
推進力の予測でしたね

00:48:39.019 --> 00:48:42.756 align:start position:32% line:-2
位置以外にも
使える情報を全て使い

00:48:42.856 --> 00:48:49.196 align:start position:25% line:-2
ユーザの意思に沿った
モーションを実現させましょう

00:48:50.931 --> 00:48:55.702 align:start position:27% line:-2
もう少し深く
滑らかなレスポンスについて

00:48:55.802 --> 00:48:58.705 align:start position:36% line:-2
同僚のマーコスが
掘り下げます

00:48:58.805 --> 00:48:59.940 align:start position:30% line:-1
ありがとうございました

00:49:00.040 --> 00:49:03.110 align:start position:43% line:-1
(拍手)

00:49:05.379 --> 00:49:06.346 align:start position:41% line:-1
良かったよ

00:49:07.548 --> 00:49:08.682 align:start position:32% line:-1
ありがとう ネイサン

00:49:13.287 --> 00:49:14.421 align:start position:41% line:-1
こんにちは

00:49:14.822 --> 00:49:16.123 align:start position:39% line:-1
マーコスです

00:49:16.557 --> 00:49:21.328 align:start position:29% line:-2
滑らかさがいかに大切かを
これまで見てきました

00:49:21.628 --> 00:49:25.866 align:start position:25% line:-2
その多くは
インタラクションから生じます

00:49:26.567 --> 00:49:28.135 align:start position:34% line:-1
そこで 私からは―

00:49:28.235 --> 00:49:32.806 align:start position:30% line:-2
ジェスチャの検出方法を
紹介したいと思います

00:49:33.240 --> 00:49:38.679 align:start position:27% line:-2
続いて効果的なジェスチャの
設計方法を説明します

00:49:42.149 --> 00:49:47.187 align:start position:29% line:-2
まずは主要なジェスチャの
設計ポイントを見てから―

00:49:47.754 --> 00:49:53.193 align:start position:29% line:-2
インタラクションの
原則についてお話しします

00:49:53.994 --> 00:49:58.932 align:start position:30% line:-2
ジェスチャが複数の時の
処理法も説明します

00:50:00.234 --> 00:50:05.172 align:start position:27% line:-2
手始めに 極めてシンプルな
タップの設計です

00:50:05.572 --> 00:50:10.544 align:start position:27% line:-2
“タップに設計など
必要ない”と思いますよね？

00:50:10.644 --> 00:50:13.981 align:start position:29% line:-1
意外とそうでもないんです

00:50:14.681 --> 00:50:18.418 align:start position:32% line:-2
ボタンのタップを例に
見てみます

00:50:18.519 --> 00:50:21.088 align:start position:30% line:-1
おなじみの計算機ですね

00:50:24.591 --> 00:50:29.563 align:start position:27% line:-2
タッチされた瞬間に
ボタンはハイライトされます

00:50:30.030 --> 00:50:34.268 align:start position:32% line:-2
ボタンが問題なく
反応している証しです

00:50:34.601 --> 00:50:38.605 align:start position:30% line:-2
でも指を離さないと
タップは検知されません

00:50:40.073 --> 00:50:44.344 align:start position:32% line:-2
タップ領域には
余裕を持たせています

00:50:44.445 --> 00:50:47.848 align:start position:32% line:-2
タップが
より快適になりますし

00:50:47.948 --> 00:50:52.085 align:start position:29% line:-2
誤操作によるキャンセルも
回避できます

00:50:53.220 --> 00:50:55.322 align:start position:29% line:-1
チャンも言っていましたが

00:50:55.422 --> 00:50:58.759 align:start position:32% line:-2
操作途中で考えが
変わることもあります

00:50:58.859 --> 00:51:03.997 align:start position:27% line:-2
タップ領域の外で指を離せば
タップは中止できます

00:50:58.859 --> 00:51:03.997 align:start position:27% line:-2
タップ領域の外で指を離せば
タップは中止できます

00:51:05.165 --> 00:51:07.868 align:start position:29% line:-2
逆に
スワイプで領域内に戻れば

00:51:07.968 --> 00:51:10.804 align:start position:29% line:-1
タップ操作は継続されます

00:51:13.040 --> 00:51:15.008 align:start position:34% line:-1
次のジェスチャは―

00:51:15.676 --> 00:51:17.911 align:start position:39% line:-1
スワイプです

00:51:18.479 --> 00:51:21.248 align:start position:27% line:-2
iOSの主要なジェスチャの
１つであり

00:51:21.348 --> 00:51:25.486 align:start position:27% line:-2
スクロールを始め
多くの動作に使われています

00:51:26.420 --> 00:51:29.623 align:start position:29% line:-2
しかし
使い道や呼び方に関係なく

00:51:29.723 --> 00:51:32.459 align:start position:30% line:-1
根本的な原則は同じです

00:51:33.427 --> 00:51:37.331 align:start position:30% line:-2
画像のドラッグに
スワイプを使った例です

00:51:38.298 --> 00:51:42.870 align:start position:25% line:-2
画像に触れた瞬間
インタラクションが始まります

00:51:46.840 --> 00:51:51.879 align:start position:27% line:-2
でも このジェスチャが
スワイプだと認識させるには

00:51:51.979 --> 00:51:55.115 align:start position:27% line:-1
一定の距離の移動が必要です

00:51:55.649 --> 00:52:00.220 align:start position:25% line:-2
“ヒステリシス”と呼ぶ距離で
iOSでは10ポイントです

00:51:55.649 --> 00:52:00.220 align:start position:25% line:-2
“ヒステリシス”と呼ぶ距離で
iOSでは10ポイントです

00:52:01.221 --> 00:52:05.225 align:start position:32% line:-2
この距離に届くと
スワイプが始まります

00:52:06.060 --> 00:52:09.196 align:start position:29% line:-2
この時 スワイプの向きも
判断します

00:52:09.296 --> 00:52:12.199 align:start position:29% line:-1
横か縦かといった具合です

00:52:12.299 --> 00:52:16.904 align:start position:29% line:-2
例は挙げませんが
時として非常に役立ちます

00:52:18.005 --> 00:52:22.209 align:start position:30% line:-2
スワイプが検出され
開始位置が定まりました

00:52:22.643 --> 00:52:27.881 align:start position:29% line:-2
以降は指と画像が
一緒に動く必要があります

00:52:28.082 --> 00:52:33.387 align:start position:27% line:-2
ドラッグポイントは
画像の真ん中ではありません

00:52:34.087 --> 00:52:37.958 align:start position:30% line:-2
ドラッグ中は
位置を記録しておきます

00:52:38.058 --> 00:52:41.161 align:start position:32% line:-2
終了時に
最終位置は使いません

00:52:41.261 --> 00:52:47.134 align:start position:29% line:-2
動きの履歴を使って
滑らかな動きを実現します

00:52:50.437 --> 00:52:54.141 align:start position:30% line:-2
大事なのは
指の動きとコンテンツを

00:52:54.241 --> 00:52:56.777 align:start position:27% line:-1
１対１で連動させることです

00:52:57.211 --> 00:53:01.582 align:start position:29% line:-2
コンテンツがジェスチャを
離れてはいけません

00:52:57.211 --> 00:53:01.582 align:start position:29% line:-2
コンテンツがジェスチャを
離れてはいけません

00:53:02.549 --> 00:53:04.751 align:start position:30% line:-1
iOSの原則の１つです

00:53:04.885 --> 00:53:08.689 align:start position:27% line:-2
スクロールできるデバイスは
快適ですね

00:53:10.157 --> 00:53:15.095 align:start position:29% line:-2
１対１の連動が途絶えれば
私たちは瞬時に

00:53:15.195 --> 00:53:16.864 align:start position:36% line:-1
それに気付きます

00:53:16.964 --> 00:53:18.232 align:start position:34% line:-1
スクロール中なら―

00:53:18.332 --> 00:53:22.102 align:start position:34% line:-2
それはコンテンツの
終わりを意味します

00:53:24.171 --> 00:53:27.374 align:start position:29% line:-2
タッチスクリーン以外でも
同じです

00:53:27.474 --> 00:53:32.746 align:start position:18% line:-2
Apple TVのインターフェイスが
良い例です

00:53:33.280 --> 00:53:36.417 align:start position:34% line:-2
指で直接
触れなくても大丈夫

00:53:36.517 --> 00:53:39.820 align:start position:29% line:-2
操作とインターフェイスが
連動していれば

00:53:39.920 --> 00:53:43.424 align:start position:36% line:-2
快適な動作が
実現されるのです

00:53:47.394 --> 00:53:52.633 align:start position:29% line:-2
もう１つ大事なのは 常に
フィードバックを行うこと

00:53:52.733 --> 00:53:57.738 align:start position:27% line:-2
あらゆるインタラクションに
言えることです

00:53:58.205 --> 00:54:01.542 align:start position:29% line:-2
フラッシュライトボタンを
再度 見てみます

00:53:58.205 --> 00:54:01.542 align:start position:29% line:-2
フラッシュライトボタンを
再度 見てみます

00:54:01.642 --> 00:54:05.412 align:start position:34% line:-2
指の圧力に応じて
大きさが変化します

00:54:05.646 --> 00:54:10.718 align:start position:30% line:-2
システムがジェスチャに
反応していることと―

00:54:10.818 --> 00:54:15.489 align:start position:30% line:-2
強く押せばライトが
つくことを教えています

00:54:16.990 --> 00:54:21.729 align:start position:16% line:-2
Apple TVのフォーカスエンジンも
良い例です

00:54:22.429 --> 00:54:26.600 align:start position:21% line:-2
Siri Remote上の動きは
常に画面に反映されます

00:54:26.833 --> 00:54:29.903 align:start position:32% line:-2
おかげで
選択中のアイテムや―

00:54:30.104 --> 00:54:35.042 align:start position:25% line:-2
選択対象の変化 動きの向きも
ひと目で分かります

00:54:37.544 --> 00:54:42.750 align:start position:29% line:-2
ジェスチャ中は必ず
反応を返す必要があります

00:54:42.950 --> 00:54:47.121 align:start position:27% line:-2
そのため
ジェスチャの検出が遅れる―

00:54:47.221 --> 00:54:51.792 align:start position:5% line:-2
UISwipeGestureRecognizerの
使用は避けましょう

00:54:52.092 --> 00:54:54.294 align:start position:27% line:-1
代わりに UITouchや

00:54:54.395 --> 00:54:59.633 align:start position:25% line:-2
他のジェスチャリコグナイザを
使いましょう

00:55:00.367 --> 00:55:05.739 align:start position:27% line:-2
位置 速度 強さなど
あらゆる情報を使うためです

00:55:07.875 --> 00:55:13.013 align:start position:29% line:-2
でも 大抵の場合
ジェスチャは複数ですよね

00:55:13.347 --> 00:55:15.516 align:start position:32% line:-2
充実した
アプリケーションほど

00:55:15.616 --> 00:55:18.819 align:start position:27% line:-1
ジェスチャが多くて複雑です

00:55:19.920 --> 00:55:22.823 align:start position:18% line:-1
例えばScroll Viewを使う時

00:55:22.923 --> 00:55:27.194 align:start position:30% line:-2
大抵 他のジェスチャも
併用します

00:55:27.294 --> 00:55:30.430 align:start position:32% line:-2
この例では
連絡先のスクロールや

00:55:30.531 --> 00:55:33.100 align:start position:32% line:-1
プレビューが可能です

00:55:35.102 --> 00:55:39.773 align:start position:29% line:-2
フィードバックなしに
最後のジェスチャを待つと

00:55:39.873 --> 00:55:41.875 align:start position:38% line:-1
遅延が生じます

00:55:42.142 --> 00:55:45.446 align:start position:27% line:-2
もはや
レスポンシブとは言えません

00:55:46.680 --> 00:55:51.752 align:start position:30% line:-2
だから ジェスチャは
開始時点で全て検出し―

00:55:51.985 --> 00:55:56.323 align:start position:34% line:-2
意図が読めた時点で
不要な分を止めます

00:55:58.692 --> 00:56:00.594 align:start position:38% line:-1
連絡先の例です

00:55:58.692 --> 00:56:00.594 align:start position:38% line:-1
連絡先の例です

00:56:00.694 --> 00:56:04.365 align:start position:27% line:-2
１件押し始めてから
スクロールしたくなりました

00:56:04.665 --> 00:56:10.137 align:start position:23% line:-2
直ちに3D Touchを中止し
ジェスチャを切り替えます

00:56:13.841 --> 00:56:17.277 align:start position:30% line:-2
ただ
防げない遅延もあります

00:56:17.711 --> 00:56:22.916 align:start position:29% line:-2
例えば ダブルタップと
タップが共存する場合です

00:56:23.417 --> 00:56:28.155 align:start position:32% line:-2
どちらか判断するため
待つしかないのです

00:56:30.390 --> 00:56:34.228 align:start position:27% line:-2
この例では ダブルタップで
拡大や縮小ができる分―

00:56:34.328 --> 00:56:38.899 align:start position:27% line:-2
タップによるメニュー表示が
約0.5秒遅れています

00:56:39.633 --> 00:56:41.935 align:start position:34% line:-2
こういったケースも
考慮しつつ

00:56:42.035 --> 00:56:46.306 align:start position:27% line:-2
可能な限り
遅延を防ぐ努力をしましょう

00:56:49.376 --> 00:56:50.544 align:start position:41% line:-1
まとめます

00:56:50.644 --> 00:56:55.082 align:start position:32% line:-2
主要なジェスチャの
設計法を説明しました

00:56:55.282 --> 00:56:57.284 align:start position:29% line:-1
コンテンツと指の動きは―

00:56:57.951 --> 00:57:02.990 align:start position:30% line:-2
１対１で連動させるのが
iOSの原則でしたね

00:56:57.951 --> 00:57:02.990 align:start position:30% line:-2
１対１で連動させるのが
iOSの原則でしたね

00:57:03.223 --> 00:57:06.994 align:start position:36% line:-2
フィードバックは
常に行い―

00:57:07.094 --> 00:57:12.099 align:start position:30% line:-2
ジェスチャが複数の時は
全て始めから検出します

00:57:13.700 --> 00:57:19.373 align:start position:29% line:-2
それでは そろそろ
チャンにマイクを戻します

00:57:19.673 --> 00:57:20.574 align:start position:30% line:-1
ありがとうございました

00:57:20.674 --> 00:57:25.379 align:start position:43% line:-1
(拍手)

00:57:25.479 --> 00:57:26.313 align:start position:45% line:-1
お疲れ

00:57:28.248 --> 00:57:30.150 align:start position:36% line:-1
皆さん ただいま

00:57:30.517 --> 00:57:33.921 align:start position:27% line:-1
滑らかでインタラクティブな

00:57:34.021 --> 00:57:38.158 align:start position:32% line:-2
インターフェイスの
作り方を見てきました

00:57:38.559 --> 00:57:42.629 align:start position:27% line:-2
だいぶ分かってきたところで
ここからは

00:57:42.729 --> 00:57:45.866 align:start position:25% line:-2
fluidインターフェイスの
使い方です

00:57:45.966 --> 00:57:48.035 align:start position:29% line:-1
まずは“教える”ことです

00:57:48.469 --> 00:57:51.338 align:start position:29% line:-2
ジェスチャ中心の
インターフェイスの弱点は

00:57:51.438 --> 00:57:55.476 align:start position:36% line:-2
瞬時に操作方法が
見えないことです

00:57:55.576 --> 00:57:57.678 align:start position:34% line:-1
優しく魅力的な形で

00:57:57.778 --> 00:58:01.615 align:start position:30% line:-2
賢くユーザを導く必要が
あるのです

00:57:57.778 --> 00:58:01.615 align:start position:30% line:-2
賢くユーザを導く必要が
あるのです

00:58:02.649 --> 00:58:05.886 align:start position:30% line:-2
１つは“視覚的な
ヒントを示す”手法です

00:58:06.053 --> 00:58:09.423 align:start position:34% line:-2
そこら中で見かける
この物体

00:58:09.523 --> 00:58:13.193 align:start position:36% line:-2
どこにあっても
上手に使えますね

00:58:13.360 --> 00:58:16.396 align:start position:36% line:-2
ひと目で使い方が
分かるからです

00:58:17.431 --> 00:58:20.834 align:start position:30% line:-2
iOSでも
同じことを目指しました

00:58:20.934 --> 00:58:22.503 align:start position:39% line:-1
例を挙げます

00:58:22.970 --> 00:58:27.141 align:start position:34% line:-2
スクロール画面では
あえて最後を隠し―

00:58:27.241 --> 00:58:31.912 align:start position:30% line:-2
続きの存在をほのめかし
下へ誘導しています

00:58:32.546 --> 00:58:34.982 align:start position:27% line:-1
複数ページのコンテンツでは

00:58:35.082 --> 00:58:39.820 align:start position:30% line:-2
インジケータを使って
ページの存在を示します

00:58:40.154 --> 00:58:44.958 align:start position:25% line:-2
画面をつかんで
スライドできることを示すには

00:58:45.526 --> 00:58:48.128 align:start position:29% line:-1
このようなバーを使います

00:58:49.196 --> 00:58:54.301 align:start position:25% line:-2
インタラクティブな要素を
“別の次元で示す”のも手です

00:58:54.401 --> 00:59:00.641 align:start position:29% line:-2
１つ上の平面に引き上げて
他の要素と差別化します

00:58:54.401 --> 00:59:00.641 align:start position:29% line:-2
１つ上の平面に引き上げて
他の要素と差別化します

00:59:01.375 --> 00:59:04.177 align:start position:32% line:-2
オン／オフスイッチが
良い例です

00:59:04.278 --> 00:59:07.247 align:start position:34% line:-2
白い丸は動かせると
示すため

00:59:07.347 --> 00:59:09.650 align:start position:32% line:-1
丸を少し浮かせました

00:59:09.850 --> 00:59:14.021 align:start position:30% line:-2
視覚的に分離することで
性質を示したのです

00:59:14.521 --> 00:59:18.625 align:start position:32% line:-2
インターフェイス上の
浮き上がった要素は

00:59:18.726 --> 00:59:21.195 align:start position:27% line:-1
“動かせる要素”なわけです

00:59:22.629 --> 00:59:23.564 align:start position:45% line:-1
次です

00:59:24.231 --> 00:59:30.104 align:start position:29% line:-2
使い方を“教える代わりに
見せる”手法もあります

00:59:30.204 --> 00:59:34.341 align:start position:29% line:-2
アニメーションで
ジェスチャを伝えるのです

00:59:34.775 --> 00:59:36.777 align:start position:32% line:-1
Safariの例です

00:59:37.077 --> 00:59:40.814 align:start position:29% line:-2
Safariでは
タブ左上の“X”を押すと

00:59:40.914 --> 00:59:44.818 align:start position:30% line:-2
タブが左にスライドして
消えます

00:59:45.385 --> 00:59:48.656 align:start position:30% line:-2
“スライドで消せる”と
ヒントを与え

00:59:48.756 --> 00:59:52.826 align:start position:29% line:-2
ジェスチャを
習得させることができます

00:59:53.193 --> 00:59:57.097 align:start position:32% line:-2
アニメーションと
ジェスチャを並べれば

00:59:57.197 --> 00:59:59.633 align:start position:29% line:-1
“お手本”を示せるのです

01:00:02.135 --> 01:00:05.205 align:start position:30% line:-2
あとは
“説明する”手法ですね

01:00:05.305 --> 01:00:08.809 align:start position:29% line:-2
使い方を
ストレートに教えるんです

01:00:09.376 --> 01:00:11.411 align:start position:30% line:-1
この方法は多用を避け―

01:00:11.511 --> 01:00:15.983 align:start position:29% line:-2
頻出するジェスチャにのみ
使いましょう

01:00:16.083 --> 01:00:21.321 align:start position:27% line:-2
そして 一度使ったら
使い続けて効果を高めること

01:00:21.688 --> 01:00:26.193 align:start position:27% line:-2
レアなジェスチャに使っても
記憶に残りません

01:00:26.760 --> 01:00:27.694 align:start position:43% line:-1
ここで…

01:00:28.128 --> 01:00:32.199 align:start position:30% line:-2
楽しみと遊び心について
少し話します

01:00:32.299 --> 01:00:36.170 align:start position:25% line:-2
fluidインターフェイスが
もたらす―

01:00:36.270 --> 01:00:39.339 align:start position:32% line:-1
重要な産物だからです

01:00:40.140 --> 01:00:42.843 align:start position:30% line:-2
でも
それらが得られるのは―

01:00:42.943 --> 01:00:48.382 align:start position:25% line:-2
今日たくさんご説明した
fluidインターフェイスが

01:00:48.482 --> 01:00:52.119 align:start position:27% line:-1
確実に実現できた時だけです

01:00:52.219 --> 01:00:57.791 align:start position:30% line:-2
インターフェイスとの
一体感が生まれてくると

01:00:57.891 --> 01:01:02.796 align:start position:27% line:-2
学んでいる意識が消え
発見する喜びを感じ始めます

01:00:57.891 --> 01:01:02.796 align:start position:27% line:-2
学んでいる意識が消え
発見する喜びを感じ始めます

01:01:03.597 --> 01:01:08.736 align:start position:25% line:-2
遊びながらインターフェイスを
発見できたら最高です

01:01:08.836 --> 01:01:11.839 align:start position:30% line:-1
とにかく“楽しい”はず

01:01:12.639 --> 01:01:15.843 align:start position:34% line:-2
人は何かで
遊ぶのが大好きです

01:01:15.943 --> 01:01:20.180 align:start position:30% line:-2
天性の娯楽好きな素質を
利用すればいい

01:01:20.480 --> 01:01:24.952 align:start position:23% line:-2
“遊び”こそが心と
インターフェイスをつなぐ鍵です

01:01:25.119 --> 01:01:29.223 align:start position:34% line:-2
まずは とにかく
作ってみることです

01:01:29.323 --> 01:01:34.061 align:start position:27% line:-2
自分で遊んでみて
人が遊ぶ様子も見てください

01:01:34.161 --> 01:01:40.100 align:start position:27% line:-2
そして何を追加すれば
より良くなるか考えるんです

01:01:41.101 --> 01:01:47.274 align:start position:27% line:-2
遊べるインターフェイスは
多くの可能性を秘めています

01:01:49.276 --> 01:01:55.282 align:start position:29% line:-2
道具としての滑らかさは
どのように構築するのか？

01:01:55.482 --> 01:02:00.888 align:start position:29% line:-2
インタラクションを適切に
設計する必要があります

01:01:55.482 --> 01:02:00.888 align:start position:29% line:-2
インタラクションを適切に
設計する必要があります

01:02:02.156 --> 01:02:07.327 align:start position:29% line:-2
まず 両者の関係は
切り離せないものにします

01:02:07.427 --> 01:02:12.900 align:start position:29% line:-2
インタラクションを
後付けにするのではなく―

01:02:13.000 --> 01:02:16.637 align:start position:34% line:-2
インターフェイスと
同時に設計します

01:02:17.271 --> 01:02:19.673 align:start position:29% line:-1
デモを作ることも大切です

01:02:19.773 --> 01:02:23.610 align:start position:27% line:-1
人に見せる目的もありますが

01:02:23.710 --> 01:02:29.750 align:start position:25% line:-2
インターフェイスの本質を
自ら確認するためでもあります

01:02:30.818 --> 01:02:34.121 align:start position:29% line:-1
見本を用意しておくことで

01:02:34.221 --> 01:02:39.126 align:start position:29% line:-2
作り込みながら
新たな発見もできるのです

01:02:39.493 --> 01:02:42.963 align:start position:30% line:-2
iPhone Xも
同じ手法で設計しました

01:02:43.831 --> 01:02:47.568 align:start position:30% line:-2
実装への
目標設定にも役立ちます

01:02:47.668 --> 01:02:52.072 align:start position:30% line:-2
優秀なエンジニアが多い
Appleだからこそ

01:02:52.172 --> 01:02:54.107 align:start position:32% line:-1
なせる技ではあります

01:02:55.476 --> 01:02:58.312 align:start position:27% line:-1
見本は本当に貴重な存在です

01:02:58.412 --> 01:03:02.616 align:start position:34% line:-2
自分で作ったものが
実際はどんな感じか

01:02:58.412 --> 01:03:02.616 align:start position:34% line:-2
自分で作ったものが
実際はどんな感じか

01:03:02.816 --> 01:03:05.486 align:start position:30% line:-1
知ることができるのです

01:03:05.586 --> 01:03:10.691 align:start position:29% line:-2
それって実はすごく
大事なことだったりします

01:03:11.725 --> 01:03:12.659 align:start position:43% line:-1
さらに…

01:03:13.227 --> 01:03:17.631 align:start position:25% line:-2
形になったアプリケーションは
コピーされにくく

01:03:17.731 --> 01:03:20.134 align:start position:34% line:-1
独自性も守られます

01:03:22.536 --> 01:03:23.337 align:start position:41% line:-1
ところで…

01:03:24.471 --> 01:03:29.376 align:start position:21% line:-2
みんな Multi-Touchが
大好きですよね

01:03:29.977 --> 01:03:34.281 align:start position:29% line:-2
触るだけでコンピュータと
やり取りできる

01:03:34.548 --> 01:03:36.383 align:start position:34% line:-1
素晴らしいですよね

01:03:38.018 --> 01:03:41.321 align:start position:34% line:-2
本日お話した指針は
いずれも―

01:03:41.855 --> 01:03:46.026 align:start position:29% line:-2
iPhone Xの設計の
中核を成すものです

01:03:46.126 --> 01:03:49.496 align:start position:32% line:-2
操作に機敏に反応する
インターフェイス

01:03:49.596 --> 01:03:53.133 align:start position:32% line:-2
動的モーションと
洗練されたジェスチャ

01:03:53.434 --> 01:03:57.871 align:start position:27% line:-2
fluidインターフェイス
そのものなのです

01:03:58.772 --> 01:04:02.776 align:start position:30% line:-2
インターフェイスが
思考や動きと一致すると

01:03:58.772 --> 01:04:02.776 align:start position:30% line:-2
インターフェイスが
思考や動きと一致すると

01:04:03.110 --> 01:04:05.546 align:start position:30% line:-1
不思議なことが起きます

01:04:05.779 --> 01:04:08.615 align:start position:32% line:-2
コンピュータの感覚は
消え―

01:04:08.849 --> 01:04:12.186 align:start position:34% line:-2
自分の延長のように
感じ始めます

01:04:14.922 --> 01:04:17.691 align:start position:32% line:-2
これからの
インターフェイスには

01:04:17.891 --> 01:04:23.030 align:start position:27% line:-2
人間らしさを取り込むことが
大事だと思うんです

01:04:23.430 --> 01:04:26.166 align:start position:38% line:-2
それは決して
負担ではなく―

01:04:26.266 --> 01:04:30.337 align:start position:34% line:-2
楽しみと喜びに
満ちたことなのです

01:04:30.704 --> 01:04:32.139 align:start position:30% line:-1
ありがとうございました

01:04:32.239 --> 01:04:35.275 align:start position:43% line:-1
(拍手)
