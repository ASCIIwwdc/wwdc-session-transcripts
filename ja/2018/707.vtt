WEBVTT

00:00:07.107 --> 00:00:16.315 align:start position:43% line:-1
(音楽)

00:00:19.419 --> 00:00:24.825 align:start position:43% line:-1
(拍手)

00:00:24.925 --> 00:00:29.229 align:start position:27% line:-2
皆さん
ご来場ありがとうございます

00:00:29.329 --> 00:00:33.200 align:start position:32% line:-2
フィットネスチームの
ニハリカです

00:00:33.300 --> 00:00:37.371 align:start position:30% line:-2
今日は ヘルスチームの
カリムと一緒に

00:00:37.538 --> 00:00:42.409 align:start position:21% line:-2
HealthKitの新たな特長を
ご紹介します

00:00:42.509 --> 00:00:46.513 align:start position:20% line:-2
iOS 12とwatchOS 5で
追加されました

00:00:49.183 --> 00:00:51.652 align:start position:18% line:-1
Apple Watchの発売から３年

00:00:51.752 --> 00:00:56.557 align:start position:25% line:-2
ヘルス機能は
発売当初から大活躍しています

00:00:56.657 --> 00:01:00.794 align:start position:32% line:-2
リングを完成させたり
友達と共有したり

00:00:56.657 --> 00:01:00.794 align:start position:32% line:-2
リングを完成させたり
友達と共有したり

00:01:00.894 --> 00:01:03.864 align:start position:32% line:-2
何より ユーザは
ワークアウトが大好き

00:01:04.164 --> 00:01:09.636 align:start position:20% line:-2
Watchは進化するエコシステムの
入り口にいます

00:01:09.736 --> 00:01:13.941 align:start position:32% line:-2
これも デベロッパの
皆さんのおかげです

00:01:14.975 --> 00:01:17.578 align:start position:30% line:-1
2017年 第４四半期

00:01:17.678 --> 00:01:20.147 align:start position:34% line:-2
ヘルスカテゴリの
アプリケーションは

00:01:20.247 --> 00:01:23.684 align:start position:36% line:-2
ダウンロード数が
２億を超えました

00:01:24.084 --> 00:01:31.358 align:start position:25% line:-2
この数字は驚くべきものであり
２つのことを証明しています

00:01:31.458 --> 00:01:35.529 align:start position:29% line:-2
１つは ユーザの
すばらしい体験のために―

00:01:35.629 --> 00:01:38.532 align:start position:29% line:-1
皆さんの貢献があったこと

00:01:38.632 --> 00:01:41.502 align:start position:27% line:-1
２つ目は人々の強い関心です

00:01:41.602 --> 00:01:44.605 align:start position:34% line:-2
皆さんが発表する
アプリケーションを

00:01:44.705 --> 00:01:47.040 align:start position:27% line:-1
ユーザは心待ちにしています

00:01:48.275 --> 00:01:52.813 align:start position:25% line:-2
要となるのは
２種類のアプリケーションです

00:01:52.913 --> 00:01:57.050 align:start position:29% line:-2
１つは 活動データを
可視化するアクティビティ

00:01:57.150 --> 00:02:00.954 align:start position:32% line:-2
カロリーや運動時間が
見られます

00:01:57.150 --> 00:02:00.954 align:start position:32% line:-2
カロリーや運動時間が
見られます

00:02:01.255 --> 00:02:03.524 align:start position:30% line:-1
もう１つは ヘルスケア

00:02:03.790 --> 00:02:09.096 align:start position:18% line:-2
そして その全ての
中心となるのがHealthKitです

00:02:10.097 --> 00:02:13.667 align:start position:23% line:-1
今日は たくさんの話をしますが

00:02:13.767 --> 00:02:18.138 align:start position:29% line:-2
まず とても重要なことを
お伝えします

00:02:18.238 --> 00:02:20.908 align:start position:30% line:-1
プライバシーと権限です

00:02:21.008 --> 00:02:23.744 align:start position:36% line:-2
ヘルスデータは
とてもデリケート

00:02:23.844 --> 00:02:25.812 align:start position:27% line:-1
アプリケーションの開発では

00:02:25.913 --> 00:02:30.150 align:start position:30% line:-2
プライバシーへの
包括的な配慮が重要です

00:02:30.684 --> 00:02:34.555 align:start position:29% line:-2
次に カリムが
新しいAPIの話をします

00:02:34.655 --> 00:02:39.059 align:start position:30% line:-2
アプリケーション開発が
さらに簡単になります

00:02:39.326 --> 00:02:43.363 align:start position:7% line:-2
最後に Quantity Series APIを
ご紹介します

00:02:43.463 --> 00:02:47.701 align:start position:30% line:-2
頻度の高いデータを扱う
新しい方法です

00:02:48.635 --> 00:02:49.937 align:start position:34% line:-1
では 始めましょう

00:02:52.439 --> 00:02:54.675 align:start position:32% line:-1
プライバシーと権限は

00:02:54.775 --> 00:02:58.212 align:start position:34% line:-2
開発の最初に
考慮すべきことです

00:02:58.312 --> 00:03:01.648 align:start position:25% line:-1
Appleの考え方はシンプル

00:02:58.312 --> 00:03:01.648 align:start position:25% line:-1
Appleの考え方はシンプル

00:03:02.082 --> 00:03:04.251 align:start position:36% line:-2
“プライバシーは
人に関すること”

00:03:04.818 --> 00:03:06.954 align:start position:16% line:-1
これを念頭に置いたHealthKitは

00:03:07.054 --> 00:03:11.024 align:start position:34% line:-2
ユーザがデータを
管理できる設計です

00:03:11.124 --> 00:03:15.896 align:start position:27% line:-2
いつでもデータにアクセスし
消去もできます

00:03:16.330 --> 00:03:19.600 align:start position:27% line:-2
このパズルの最後を担うのは
皆さんです

00:03:19.700 --> 00:03:22.736 align:start position:34% line:-2
プライバシー尊重を
徹底するため―

00:03:22.836 --> 00:03:26.139 align:start position:27% line:-1
私たちがツールを提供します

00:03:26.940 --> 00:03:29.610 align:start position:27% line:-1
単純なルールで考えましょう

00:03:29.710 --> 00:03:33.280 align:start position:29% line:-1
１つは比例的なデータ収集

00:03:33.380 --> 00:03:38.685 align:start position:30% line:-2
必要なデータだけを
集めるという考え方です

00:03:38.886 --> 00:03:43.223 align:start position:34% line:-2
決まった量でなく
最初は少しだけ集め

00:03:43.323 --> 00:03:48.729 align:start position:25% line:-2
用途が増えたら
集めるデータを増やしましょう

00:03:48.829 --> 00:03:53.467 align:start position:27% line:-2
その時点で必要なものだけを
集めることが重要です

00:03:54.168 --> 00:03:58.472 align:start position:25% line:-2
２つ目は 権限は変わるという
考え方です

00:03:58.772 --> 00:04:00.140 align:start position:34% line:-1
少し微妙な問題です

00:03:58.772 --> 00:04:00.140 align:start position:34% line:-1
少し微妙な問題です

00:04:00.240 --> 00:04:04.278 align:start position:32% line:-2
ユーザが 位置情報や
プライバシーの設定を

00:04:04.378 --> 00:04:06.280 align:start position:34% line:-1
初期化したとします

00:04:06.380 --> 00:04:12.786 align:start position:27% line:-2
必ず それを尊重することが
デベロッパとしての責任です

00:04:13.020 --> 00:04:21.461 align:start position:14% line:-2
権限の状態を反映するHealthKitを
真実の情報源とするのが最善策です

00:04:21.562 --> 00:04:24.565 align:start position:29% line:-1
決してキャッシュに残さず

00:04:24.665 --> 00:04:29.436 align:start position:18% line:-2
アクセス可能なデータを
常にHealthKitに尋ねましょう

00:04:30.103 --> 00:04:33.941 align:start position:30% line:-2
この考え方を
３つのルールにしました

00:04:34.508 --> 00:04:37.477 align:start position:27% line:-1
プライバシーと権限を考慮し

00:04:37.578 --> 00:04:42.716 align:start position:25% line:-2
必要なことだけを 必要な時に
そのつど尋ねること

00:04:44.218 --> 00:04:47.487 align:start position:32% line:-1
コードもシンプルです

00:04:47.621 --> 00:04:50.657 align:start position:23% line:-2
ワークアウトアプリケーションを
例にして

00:04:50.757 --> 00:04:54.094 align:start position:27% line:-2
プライバシーと権限の処理を
行ってみます

00:04:54.228 --> 00:05:00.501 align:start position:27% line:-2
まずワークアウトのタイプを
共有するということを

00:04:54.228 --> 00:05:00.501 align:start position:27% line:-2
まずワークアウトのタイプを
共有するということを

00:05:00.601 --> 00:05:02.402 align:start position:36% line:-1
明確に宣言します

00:05:02.870 --> 00:05:07.307 align:start position:29% line:-2
最初なので
追跡したい情報は少数です

00:05:07.407 --> 00:05:12.713 align:start position:29% line:-2
ユーザの心拍数とカロリー
歩行や走行の距離

00:05:12.813 --> 00:05:16.517 align:start position:36% line:-2
要求したい情報は
これだけです

00:05:17.951 --> 00:05:21.688 align:start position:23% line:-2
最後にhealthStoreに
権限を要求し

00:05:21.788 --> 00:05:24.558 align:start position:27% line:-1
共有したいタイプを求めます

00:05:24.825 --> 00:05:27.628 align:start position:30% line:-1
この３ステップを行えば

00:05:27.728 --> 00:05:31.732 align:start position:30% line:-2
ユーザのプライバシーを
尊重できます

00:05:33.734 --> 00:05:37.304 align:start position:29% line:-2
優れたアプリケーションを
作るには

00:05:37.404 --> 00:05:42.409 align:start position:25% line:-2
必ず 最初の段階で
プライバシーを考慮しましょう

00:05:42.643 --> 00:05:44.945 align:start position:30% line:-1
ここまで話したところで

00:05:45.045 --> 00:05:50.484 align:start position:23% line:-2
カリムが 新しいAPIについて
ご紹介します

00:05:51.051 --> 00:05:56.023 align:start position:43% line:-1
(拍手)

00:05:56.890 --> 00:05:58.358 align:start position:34% line:-1
皆さん こんにちは

00:05:58.458 --> 00:06:01.094 align:start position:32% line:-1
来てくれてありがとう

00:05:58.458 --> 00:06:01.094 align:start position:32% line:-1
来てくれてありがとう

00:06:01.195 --> 00:06:05.666 align:start position:27% line:-2
新しいワークアウトAPIの
ご紹介です

00:06:06.433 --> 00:06:10.938 align:start position:21% line:-2
HealthKitが初めての人は
アプリケーションが

00:06:11.038 --> 00:06:14.808 align:start position:34% line:-2
簡単に作れることを
知るでしょう

00:06:15.275 --> 00:06:18.779 align:start position:29% line:-2
すでにアプリケーションを
作っている人なら

00:06:18.979 --> 00:06:24.585 align:start position:30% line:-2
APIの優れた新機能を
すぐに役立てられるはず

00:06:25.152 --> 00:06:26.820 align:start position:38% line:-1
では 始めます

00:06:27.387 --> 00:06:30.257 align:start position:23% line:-2
まず
ワークアウトアプリケーションの

00:06:30.357 --> 00:06:33.794 align:start position:36% line:-2
ライフサイクルを
考えてみましょう

00:06:34.127 --> 00:06:38.799 align:start position:23% line:-2
例えばユーザのアクティビティを
追跡するアプリケーションなら

00:06:39.199 --> 00:06:43.804 align:start position:27% line:-2
最初のステップは
アプリケーションの設定です

00:06:44.171 --> 00:06:46.874 align:start position:27% line:-1
この段階で分かっているのは

00:06:46.974 --> 00:06:50.844 align:start position:23% line:-2
ユーザは
ワークアウトがしたいということ

00:06:50.944 --> 00:06:54.815 align:start position:32% line:-2
UIはそれに
備える必要があります

00:06:55.883 --> 00:07:00.787 align:start position:27% line:-2
設定が済んだら
ワークアウトを始められます

00:06:55.883 --> 00:07:00.787 align:start position:27% line:-2
設定が済んだら
ワークアウトを始められます

00:07:01.688 --> 00:07:06.360 align:start position:23% line:-1
ここから ユーザは活発に運動し

00:07:07.194 --> 00:07:12.933 align:start position:30% line:-2
一定時間が経過したあと
ワークアウトを終えます

00:07:13.634 --> 00:07:16.036 align:start position:27% line:-1
ここでワークアウトの内容や

00:07:16.136 --> 00:07:19.573 align:start position:21% line:-2
関連データを
HealthKitに保存できます

00:07:20.807 --> 00:07:25.746 align:start position:27% line:-2
これがアプリケーションの
一般的なライフサイクルです

00:07:26.246 --> 00:07:30.517 align:start position:30% line:-2
では ワークアウト中は
どうでしょう

00:07:32.486 --> 00:07:38.525 align:start position:29% line:-2
この中央部分で
行いたいタスクがあります

00:07:38.625 --> 00:07:42.596 align:start position:30% line:-2
ワークアウトのデータを
収集して

00:07:42.963 --> 00:07:45.666 align:start position:30% line:-1
UIに表示することです

00:07:46.266 --> 00:07:51.505 align:start position:27% line:-2
また ユーザが自分で
ワークアウトの状態を管理し

00:07:51.605 --> 00:07:55.375 align:start position:27% line:-2
中断や再開ができるようにも
したいですね

00:07:57.678 --> 00:08:00.380 align:start position:21% line:-1
HealthKitに詳しい人なら

00:07:57.678 --> 00:08:00.380 align:start position:21% line:-1
HealthKitに詳しい人なら

00:08:00.681 --> 00:08:05.152 align:start position:5% line:-2
watchOSのHKWorkoutSessionを
知っているでしょう

00:08:06.353 --> 00:08:10.557 align:start position:32% line:-2
このライフサイクルの
いくつかの段階を

00:08:10.657 --> 00:08:12.960 align:start position:34% line:-1
これで操作できます

00:08:14.228 --> 00:08:17.664 align:start position:27% line:-2
センサーが
ワークアウト関連のデータを

00:08:18.065 --> 00:08:23.270 align:start position:30% line:-2
正確に収集できるよう
デバイスに備えさせます

00:08:23.370 --> 00:08:26.640 align:start position:30% line:-2
カロリーや心拍数などの
データです

00:08:27.875 --> 00:08:30.844 align:start position:34% line:-2
ワークアウト中に
バックグラウンドで

00:08:30.944 --> 00:08:34.280 align:start position:29% line:-2
アプリケーションを
実行させることも可能です

00:08:36.616 --> 00:08:40.419 align:start position:18% line:-1
HKWorkoutSessionでは

00:08:40.520 --> 00:08:43.357 align:start position:32% line:-2
ワークアウトの状態も
管理できます

00:08:44.324 --> 00:08:50.230 align:start position:30% line:-2
さらに往復水泳などの
イベントも生成できます

00:08:51.865 --> 00:08:54.134 align:start position:27% line:-1
これでも まだ不十分ですね

00:08:54.234 --> 00:08:59.506 align:start position:27% line:-2
デバイスが生成した
ワークアウトの関連データを

00:08:59.606 --> 00:09:03.210 align:start position:30% line:-1
収集する必要があります

00:08:59.606 --> 00:09:03.210 align:start position:30% line:-1
収集する必要があります

00:09:03.710 --> 00:09:06.446 align:start position:32% line:-1
保存もしたいですよね

00:09:07.414 --> 00:09:10.918 align:start position:32% line:-2
そのために
これから紹介するのが

00:09:11.018 --> 00:09:14.521 align:start position:16% line:-2
HKWorkoutBuilderという
新しいクラスです

00:09:15.222 --> 00:09:18.759 align:start position:25% line:-2
データの収集と
HealthKitへの保存が

00:09:18.859 --> 00:09:22.095 align:start position:29% line:-1
これ１つで可能になります

00:09:23.330 --> 00:09:28.435 align:start position:21% line:-2
ワークアウトを表す
HKWorkoutオブジェクトを

00:09:28.535 --> 00:09:31.705 align:start position:34% line:-1
作成して保存します

00:09:33.273 --> 00:09:37.110 align:start position:32% line:-1
サンプルやイベントや

00:09:37.211 --> 00:09:42.082 align:start position:30% line:-2
カスタムのメタデータも
追加が可能です

00:09:43.584 --> 00:09:45.419 align:start position:30% line:-1
watchOSの場合は

00:09:45.519 --> 00:09:49.756 align:start position:9% line:-2
HKLiveWorkoutBuilderという
サブクラスを使えます

00:09:50.791 --> 00:09:52.593 align:start position:25% line:-1
これはwatchOSのみです

00:09:53.293 --> 00:09:57.097 align:start position:20% line:-2
HKWorkoutBuilderの
サブクラスですから―

00:09:57.197 --> 00:10:00.033 align:start position:36% line:-2
その利点を
全て備えています

00:09:57.197 --> 00:10:00.033 align:start position:36% line:-2
その利点を
全て備えています

00:10:00.701 --> 00:10:02.836 align:start position:30% line:-1
watchOS上にあり

00:10:02.936 --> 00:10:05.973 align:start position:20% line:-2
HKWorkoutSessionと
連携しています

00:10:06.240 --> 00:10:12.412 align:start position:23% line:-2
そのため サンプルやイベントの
自動収集機能などもあります

00:10:12.513 --> 00:10:14.148 align:start position:38% line:-1
後ほど話します

00:10:15.983 --> 00:10:19.253 align:start position:32% line:-2
アプリケーションの
ライフサイクルに戻り

00:10:20.387 --> 00:10:26.326 align:start position:21% line:-2
この新APIを用いた
設定と開始のやり方をご説明します

00:10:29.563 --> 00:10:33.066 align:start position:14% line:-2
まずはHKWorkoutBuilderを
作成します

00:10:33.800 --> 00:10:36.036 align:start position:32% line:-1
イニシャライザを使い

00:10:36.136 --> 00:10:39.006 align:start position:18% line:-2
healthStoreオブジェクトを
渡します

00:10:39.306 --> 00:10:44.344 align:start position:27% line:-2
またワークアウトのタイプや
屋内外などの情報を含んだ

00:10:44.444 --> 00:10:48.115 align:start position:18% line:-1
configurationを渡します

00:10:48.882 --> 00:10:51.451 align:start position:34% line:-1
最後はデバイスです

00:10:51.585 --> 00:10:55.189 align:start position:29% line:-2
外部デバイスから
データを取る場合などです

00:10:56.223 --> 00:10:58.225 align:start position:36% line:-1
作成が完了したら

00:10:58.492 --> 00:11:03.330 align:start position:14% line:-2
beginCollectionを呼び出し
開始日時を渡します

00:10:58.492 --> 00:11:03.330 align:start position:14% line:-2
beginCollectionを呼び出し
開始日時を渡します

00:11:04.031 --> 00:11:05.265 align:start position:41% line:-1
簡単ですね

00:11:06.300 --> 00:11:08.268 align:start position:34% line:-1
watchOSなら

00:11:08.702 --> 00:11:11.104 align:start position:12% line:-2
HKLiveWorkoutBuilderを
使えます

00:11:11.305 --> 00:11:14.608 align:start position:21% line:-1
まず sessionを作成します

00:11:15.242 --> 00:11:18.245 align:start position:5% line:-2
healthStoreと
workoutConfigurationを渡します

00:11:18.645 --> 00:11:22.382 align:start position:21% line:-1
builderは自分では作成せず

00:11:22.482 --> 00:11:26.887 align:start position:21% line:-2
コールを用いてsessionから
直接 読み出します

00:11:27.821 --> 00:11:31.792 align:start position:14% line:-2
これで sessionとbuilderを
開始できます

00:11:32.926 --> 00:11:36.797 align:start position:23% line:-2
開始日時を渡して
startActivityと―

00:11:37.030 --> 00:11:41.468 align:start position:21% line:-2
beginCollectionを
呼び出すだけです

00:11:43.103 --> 00:11:48.242 align:start position:23% line:-2
以上が builderを用いた
設定と開始の方法です

00:11:48.809 --> 00:11:55.315 align:start position:30% line:-2
次は データを収集して
UIに直接 表示し

00:11:55.782 --> 00:12:00.487 align:start position:30% line:-2
さらに ユーザが状態を
管理できるようにします

00:11:55.782 --> 00:12:00.487 align:start position:30% line:-2
さらに ユーザが状態を
管理できるようにします

00:12:03.223 --> 00:12:04.925 align:start position:32% line:-1
まず データ収集です

00:12:05.025 --> 00:12:09.463 align:start position:27% line:-2
ワークアウト関連のサンプル
例えば―

00:12:09.696 --> 00:12:14.201 align:start position:25% line:-2
カロリー 距離 心拍数などを
追加するには？

00:12:14.334 --> 00:12:18.872 align:start position:25% line:-2
builder.addという
シンプルなコールを用いて

00:12:18.972 --> 00:12:21.842 align:start position:21% line:-1
HKSampleの配列を与えます

00:12:23.944 --> 00:12:28.415 align:start position:27% line:-2
ワークアウトに
イベントを追加したい場合は

00:12:29.016 --> 00:12:32.319 align:start position:5% line:-2
builder.addWorkoutEventsを
呼び出します

00:12:33.687 --> 00:12:35.923 align:start position:32% line:-1
メタデータも同様です

00:12:36.757 --> 00:12:41.695 align:start position:14% line:-2
builder.addMetadataを
呼び出し

00:12:41.795 --> 00:12:44.264 align:start position:29% line:-1
ディクショナリを渡します

00:12:46.233 --> 00:12:50.871 align:start position:25% line:-2
Apple Watchの場合
デバイスが手首にあり

00:12:51.071 --> 00:12:54.007 align:start position:32% line:-2
さまざまなセンサーも
備えているので

00:12:54.107 --> 00:12:59.146 align:start position:29% line:-2
実際に カロリーや距離の
データを生成できます

00:12:59.479 --> 00:13:03.584 align:start position:32% line:-2
そうしたデータを
自動的に収集できたら

00:12:59.479 --> 00:13:03.584 align:start position:32% line:-2
そうしたデータを
自動的に収集できたら

00:13:03.784 --> 00:13:06.587 align:start position:32% line:-1
いいと思いませんか？

00:13:07.221 --> 00:13:09.423 align:start position:29% line:-1
watchOS 5からは

00:13:10.157 --> 00:13:14.194 align:start position:32% line:-2
自動的なデータ収集が
可能になります

00:13:14.294 --> 00:13:18.131 align:start position:7% line:-2
HKLiveWorkoutDataSourceを
使うのです

00:13:20.234 --> 00:13:22.603 align:start position:34% line:-1
これで収集するのは

00:13:22.703 --> 00:13:27.441 align:start position:32% line:-2
現在のワークアウトに
関連するサンプルです

00:13:29.143 --> 00:13:34.581 align:start position:32% line:-2
収集するタイプの
カスタマイズも可能で

00:13:34.681 --> 00:13:38.886 align:start position:34% line:-2
自由に追加したり
削除したりできます

00:13:39.153 --> 00:13:40.854 align:start position:36% line:-1
お見せしましょう

00:13:41.388 --> 00:13:44.091 align:start position:20% line:-1
まず data sourceを作成

00:13:45.425 --> 00:13:47.161 align:start position:29% line:-1
healthStoreと

00:13:47.261 --> 00:13:50.130 align:start position:12% line:-2
workoutConfigurationを
渡します

00:13:50.230 --> 00:13:55.335 align:start position:16% line:-2
活動のタイプに関する情報を含む
configurationを渡したので

00:13:55.435 --> 00:13:58.505 align:start position:29% line:-2
data sourceが
収集するタイプを

00:13:58.605 --> 00:14:01.808 align:start position:30% line:-1
推定することができます

00:13:58.605 --> 00:14:01.808 align:start position:30% line:-1
推定することができます

00:14:03.143 --> 00:14:08.315 align:start position:7% line:-2
次に HKLiveWorkoutBuilderに
このdata sourceをセットします

00:14:09.483 --> 00:14:14.354 align:start position:32% line:-2
収集するタイプは
追加や削除ができます

00:14:14.655 --> 00:14:17.457 align:start position:29% line:-1
では 追加してみましょう

00:14:17.558 --> 00:14:21.228 align:start position:27% line:-1
追加したいタイプを指定して

00:14:21.328 --> 00:14:27.067 align:start position:18% line:-2
optionalPredicateで
収集するタイプも限定できます

00:14:27.901 --> 00:14:32.806 align:start position:0% line:-2
dataSource.collectStatisticsを
呼び出して

00:14:33.373 --> 00:14:37.878 align:start position:11% line:-2
収集するタイプと
optionalPredicateを渡します

00:14:40.147 --> 00:14:42.683 align:start position:27% line:-1
これでデータが収集されます

00:14:42.783 --> 00:14:47.688 align:start position:27% line:-2
それをUIに表示する方法を
見てみましょう

00:14:49.723 --> 00:14:55.762 align:start position:18% line:-2
builderのデリゲートメソッドに
データが入ってくると

00:14:55.863 --> 00:15:00.634 align:start position:11% line:-2
そのつど didCollectDataOf
collectedTypesが呼び出されます

00:14:55.863 --> 00:15:00.634 align:start position:11% line:-2
そのつど didCollectDataOf
collectedTypesが呼び出されます

00:15:00.968 --> 00:15:05.639 align:start position:32% line:-2
心拍数を知りたいなら
収集するタイプに―

00:15:05.739 --> 00:15:09.176 align:start position:29% line:-1
それを含めるようにします

00:15:09.443 --> 00:15:11.612 align:start position:20% line:-2
そして
quantityTypeメソッドに

00:15:11.712 --> 00:15:15.749 align:start position:23% line:-1
statisticsを使います

00:15:15.916 --> 00:15:19.419 align:start position:16% line:-2
HKStatisticsオブジェクトが
得られます

00:15:19.586 --> 00:15:22.256 align:start position:27% line:-1
今回の場合 含まれる情報は

00:15:22.356 --> 00:15:27.294 align:start position:30% line:-2
心拍数の最小値 最大値
平均値 最新値など

00:15:27.394 --> 00:15:31.064 align:start position:34% line:-2
ワークアウト中に
記録されたものです

00:15:31.965 --> 00:15:34.902 align:start position:29% line:-1
これでUIを更新できます

00:15:36.570 --> 00:15:40.741 align:start position:23% line:-2
ワークアウトアプリケーションで
よくあるのが

00:15:40.841 --> 00:15:43.544 align:start position:30% line:-1
経過時間のタイマーです

00:15:44.178 --> 00:15:48.715 align:start position:27% line:-2
ワークアウト開始時に
タイマーをスタートしますが

00:15:48.916 --> 00:15:50.684 align:start position:34% line:-1
それでは不十分です

00:15:50.784 --> 00:15:55.556 align:start position:29% line:-2
中断や再開によって
経過時間は変わるからです

00:15:56.123 --> 00:15:59.893 align:start position:29% line:-2
そこで 新たなイベントを
追加する度に

00:16:00.260 --> 00:16:05.799 align:start position:0% line:-2
workoutBuilderDidCollectEventsを
呼び出します

00:16:06.066 --> 00:16:11.104 align:start position:14% line:-2
あとは builderの
elapsedTimeプロパティを使って

00:16:11.205 --> 00:16:15.242 align:start position:25% line:-1
現在の経過時間を取得できます

00:16:16.076 --> 00:16:17.377 align:start position:39% line:-1
簡単でしょう

00:16:19.646 --> 00:16:23.584 align:start position:32% line:-2
次に ワークアウトの
状態の管理です

00:16:25.118 --> 00:16:27.221 align:start position:32% line:-1
まず ワークアウトの

00:16:27.721 --> 00:16:32.459 align:start position:30% line:-2
さまざまな状態について
話したいと思います

00:16:33.126 --> 00:16:35.896 align:start position:30% line:-1
１つ目は“開始前”です

00:16:36.263 --> 00:16:38.499 align:start position:30% line:-1
始まっていない状態です

00:16:40.367 --> 00:16:44.938 align:start position:30% line:-2
ユーザはワークアウトを
始めていません

00:16:45.038 --> 00:16:49.109 align:start position:29% line:-2
次に“準備完了”の状態に
移ります

00:16:49.576 --> 00:16:54.715 align:start position:20% line:-2
この段階ではシステムが
Session Modeになります

00:16:54.815 --> 00:16:58.719 align:start position:27% line:-2
アプリケーションが
バックグラウンドで実行され

00:16:58.819 --> 00:17:02.456 align:start position:23% line:-2
センサーは
アクティビティの追跡に備えます

00:16:58.819 --> 00:17:02.456 align:start position:23% line:-2
センサーは
アクティビティの追跡に備えます

00:17:02.789 --> 00:17:05.125 align:start position:30% line:-1
しかし開始は まだです

00:17:06.226 --> 00:17:11.265 align:start position:27% line:-2
例えば アプリケーションに
カウントダウン機能があれば

00:17:11.598 --> 00:17:14.935 align:start position:29% line:-2
その前に
“準備完了”に移行します

00:17:15.035 --> 00:17:19.106 align:start position:27% line:-2
デバイスがアクティビティの
追跡に備えるためです

00:17:20.641 --> 00:17:23.277 align:start position:32% line:-1
次に“活動中”の状態

00:17:23.609 --> 00:17:27.181 align:start position:27% line:-1
ユーザはワークアウト中です

00:17:27.448 --> 00:17:32.252 align:start position:30% line:-2
途中で“中断”に
切り替えることも可能で

00:17:32.419 --> 00:17:37.958 align:start position:29% line:-2
これを繰り返したあと
“停止”の段階に移ります

00:17:39.126 --> 00:17:42.696 align:start position:20% line:-2
デバイスは
まだSession Modeなので

00:17:42.796 --> 00:17:46.633 align:start position:25% line:-2
アプリケーションは
バックグラウンドで実行中です

00:17:46.733 --> 00:17:51.338 align:start position:30% line:-2
つまりワークアウトを
保存する時間も取れます

00:17:52.706 --> 00:17:55.709 align:start position:29% line:-2
その後
ワークアウトを終了すれば

00:17:55.976 --> 00:17:59.913 align:start position:18% line:-1
Session Modeは終わります

00:18:01.682 --> 00:18:04.551 align:start position:29% line:-1
それぞれの状態間の移行は

00:18:04.751 --> 00:18:09.523 align:start position:29% line:-2
直接 このようなコールを
使うだけです

00:18:14.795 --> 00:18:19.833 align:start position:25% line:-2
こうして
集めたデータをUIに表示でき

00:18:19.933 --> 00:18:22.803 align:start position:32% line:-2
ワークアウトの状態を
管理できます

00:18:23.704 --> 00:18:27.441 align:start position:29% line:-1
では次に 終了と保存です

00:18:29.676 --> 00:18:34.147 align:start position:18% line:-2
終了するには まず
session.endを呼び出します

00:18:34.915 --> 00:18:40.621 align:start position:4% line:-2
builder.endCollectionも呼び出し
終了日時を渡します

00:18:41.088 --> 00:18:45.759 align:start position:21% line:-2
これ以降 ワークアウトのデータは
収集されません

00:18:46.960 --> 00:18:49.830 align:start position:21% line:-1
HealthKitに保存するには

00:18:49.930 --> 00:18:53.634 align:start position:11% line:-2
builder.finishWorkoutを
呼び出します

00:18:53.867 --> 00:18:58.138 align:start position:30% line:-2
完了ハンドラに
オブジェクトが戻ります

00:18:58.238 --> 00:19:02.609 align:start position:29% line:-2
すでに関連データとともに
保存された状態です

00:18:58.238 --> 00:19:02.609 align:start position:29% line:-2
すでに関連データとともに
保存された状態です

00:19:04.611 --> 00:19:09.449 align:start position:27% line:-2
新しいAPIを使った
アプリケーション作成でした

00:19:10.250 --> 00:19:14.788 align:start position:30% line:-2
実際に どう動くかを
デモでお見せしましょう

00:19:14.988 --> 00:19:18.392 align:start position:25% line:-2
Apple Watch向けの
アプリケーションです

00:19:19.660 --> 00:19:24.832 align:start position:43% line:-1
(拍手)

00:19:30.204 --> 00:19:33.640 align:start position:30% line:-1
今 私が作っているのは

00:19:33.740 --> 00:19:40.514 align:start position:21% line:-2
とてもシンプルな仕組みの
ランニング用アプリケーションです

00:19:40.614 --> 00:19:47.521 align:start position:23% line:-2
ここにある大きなRUNボタンを
タップするとUIが現れ

00:19:47.621 --> 00:19:52.392 align:start position:29% line:-2
ワークアウトの経過時間や
測定値が表示されます

00:19:52.493 --> 00:19:56.196 align:start position:32% line:-2
例えば 消費カロリー
最新の心拍数

00:19:56.463 --> 00:20:00.467 align:start position:34% line:-2
ワークアウト中に
走った距離などです

00:19:56.463 --> 00:20:00.467 align:start position:34% line:-2
ワークアウト中に
走った距離などです

00:20:01.001 --> 00:20:05.839 align:start position:21% line:-1
もちろん ユーザは状態を管理でき

00:20:05.939 --> 00:20:09.343 align:start position:27% line:-1
中断 再開 終了が可能です

00:20:11.912 --> 00:20:16.216 align:start position:29% line:-2
このように すでにUIは
実装されています

00:20:16.316 --> 00:20:18.285 align:start position:34% line:-1
他にやるべきことは

00:20:18.385 --> 00:20:22.656 align:start position:32% line:-2
新しいAPIを使って
機能させるだけです

00:20:24.124 --> 00:20:29.897 align:start position:25% line:-2
最初に必要なのは
プロジェクトの適切な設定です

00:20:30.564 --> 00:20:33.700 align:start position:25% line:-1
そのためには 設定画面に進み

00:20:34.167 --> 00:20:36.370 align:start position:23% line:-1
Capabilitiesタブへ

00:20:36.670 --> 00:20:41.241 align:start position:12% line:-2
HealthKitのCapabilityを
オンにします

00:20:42.042 --> 00:20:46.113 align:start position:7% line:-2
WatchKit App Extensionでも
同じように―

00:20:46.213 --> 00:20:50.717 align:start position:12% line:-2
HealthKitのCapabilityを
オンにしておきます

00:20:51.285 --> 00:20:58.292 align:start position:16% line:-2
さらに info.plistファイルに
２つの目的文字列を追加し

00:20:58.492 --> 00:21:03.030 align:start position:27% line:-2
データにアクセスする理由を
ユーザに伝えます

00:20:58.492 --> 00:21:03.030 align:start position:27% line:-2
データにアクセスする理由を
ユーザに伝えます

00:21:03.664 --> 00:21:08.902 align:start position:18% line:-2
１つ目は“Health Share
Usage Description”

00:21:09.203 --> 00:21:14.107 align:start position:30% line:-2
データを保存する理由を
ユーザに伝えるものです

00:21:14.341 --> 00:21:17.444 align:start position:18% line:-2
２つ目は“Health Update
Usage Description”

00:21:17.544 --> 00:21:20.614 align:start position:23% line:-1
データを読み取る理由の説明です

00:21:23.116 --> 00:21:27.688 align:start position:30% line:-2
これが済めば
新しいAPIを使えます

00:21:28.188 --> 00:21:32.226 align:start position:30% line:-2
もちろん その前にまず
するべきことは

00:21:32.526 --> 00:21:37.865 align:start position:30% line:-2
必要なデータに関する
権限を要求することです

00:21:38.599 --> 00:21:41.034 align:start position:30% line:-2
アプリケーションにより
異なりますが

00:21:41.135 --> 00:21:44.571 align:start position:25% line:-1
私のアプリケーションの場合は

00:21:45.005 --> 00:21:49.376 align:start position:32% line:-2
ここでワークアウトを
保存したいと思います

00:21:49.543 --> 00:21:53.814 align:start position:32% line:-2
アクセスが必要となる
タイプの１つです

00:21:53.914 --> 00:21:58.886 align:start position:29% line:-2
カロリー 心拍数 距離も
読み取る必要があるので

00:21:59.219 --> 00:22:00.287 align:start position:41% line:-1
そうします

00:21:59.219 --> 00:22:00.287 align:start position:41% line:-1
そうします

00:22:01.321 --> 00:22:06.760 align:start position:29% line:-2
もちろん 必要な時に
そのつど権限を要求します

00:22:07.094 --> 00:22:13.400 align:start position:21% line:-2
今回は このUIが表示される度に
要求したいと思います

00:22:13.667 --> 00:22:18.038 align:start position:30% line:-2
ワークアウト開始の前に
権限を得るためです

00:22:18.972 --> 00:22:21.575 align:start position:29% line:-1
この画面で使っているのは

00:22:21.742 --> 00:22:25.345 align:start position:9% line:-2
WorkoutStartViewの
WKInterfaceControllerです

00:22:25.612 --> 00:22:31.218 align:start position:18% line:-2
これからdidAppearメソッドで
権限を実行します

00:22:33.854 --> 00:22:40.227 align:start position:12% line:-2
最後に保存したいので
typesToShareはワークアウトです

00:22:42.262 --> 00:22:47.534 align:start position:16% line:-2
読み取りたいのは heartRateと
activeEnergyBurned

00:22:47.935 --> 00:22:50.404 align:start position:7% line:-2
そして
distanceWalkingRunningです

00:22:51.672 --> 00:22:54.208 align:start position:32% line:-1
この２つを指定したら

00:22:54.741 --> 00:23:00.447 align:start position:5% line:-2
requestAuthorizationを呼び出し
タイプを渡します

00:22:54.741 --> 00:23:00.447 align:start position:5% line:-2
requestAuthorizationを呼び出し
タイプを渡します

00:23:01.882 --> 00:23:05.185 align:start position:34% line:-2
では コードを
実行してみましょう

00:23:06.153 --> 00:23:09.056 align:start position:25% line:-1
Watchの画面が小さいため

00:23:09.156 --> 00:23:15.162 align:start position:27% line:-2
権限シートはユーザの
iPhoneに表示されます

00:23:15.662 --> 00:23:20.400 align:start position:25% line:-2
ですから iPhone上でも
権限の操作が必要です

00:23:22.736 --> 00:23:28.008 align:start position:30% line:-2
では この画面を閉じて
iPhoneを開きます

00:23:28.208 --> 00:23:31.979 align:start position:27% line:-1
権限シートが表示されました

00:23:32.279 --> 00:23:37.284 align:start position:30% line:-2
アクセスを許可するかを
ここで決定します

00:23:37.718 --> 00:23:43.223 align:start position:25% line:-2
デモなので全てをオンにして
“Allow”をタップします

00:23:44.057 --> 00:23:48.328 align:start position:34% line:-2
アプリケーションに
権限を許可しました

00:23:49.229 --> 00:23:53.534 align:start position:25% line:-2
いよいよ
ワークアウトAPIの開始です

00:23:54.301 --> 00:23:59.506 align:start position:29% line:-2
このボタンをタップすると
画面が表示されます

00:23:59.606 --> 00:24:02.242 align:start position:38% line:-2
ワークアウトの
情報を含んだ―

00:23:59.606 --> 00:24:02.242 align:start position:38% line:-2
ワークアウトの
情報を含んだ―

00:24:02.342 --> 00:24:04.845 align:start position:12% line:-2
workoutConfigurationの
オブジェクトです

00:24:04.945 --> 00:24:07.314 align:start position:29% line:-1
この例ではランニングです

00:24:07.681 --> 00:24:11.418 align:start position:32% line:-2
では ワークアウトの
設定をしましょう

00:24:11.985 --> 00:24:17.791 align:start position:9% line:-2
この画面に使っているのは
WKInterfaceControllerです

00:24:18.058 --> 00:24:21.228 align:start position:23% line:-1
awakeメソッドで設定します

00:24:22.463 --> 00:24:28.168 align:start position:9% line:-2
まず HKWorkoutSessionと
HKLiveWorkoutBuilderを作成

00:24:30.571 --> 00:24:34.441 align:start position:30% line:-2
イニシャライザを使って
作成します

00:24:34.675 --> 00:24:37.177 align:start position:12% line:-2
workoutConfigurationを
渡します

00:24:37.778 --> 00:24:43.083 align:start position:23% line:-2
あとは sessionから直接
builderを読み出します

00:24:44.351 --> 00:24:48.989 align:start position:16% line:-2
configurationが無効の場合
作成はできません

00:24:49.289 --> 00:24:53.060 align:start position:21% line:-2
そのため
do-catchブロックを用いて

00:24:53.160 --> 00:24:56.163 align:start position:30% line:-1
不備があれば却下します

00:24:58.232 --> 00:25:01.068 align:start position:16% line:-2
次に sessionとbuilderの
設定です

00:24:58.232 --> 00:25:01.068 align:start position:16% line:-2
次に sessionとbuilderの
設定です

00:25:02.169 --> 00:25:05.739 align:start position:12% line:-2
ここでは
interface controllerに

00:25:05.839 --> 00:25:09.676 align:start position:21% line:-2
sessionとbuilderを
デリゲートします

00:25:09.977 --> 00:25:14.047 align:start position:30% line:-2
デバイスが生成する
サンプルも集めたいので

00:25:14.147 --> 00:25:19.853 align:start position:2% line:-2
HKLiveWorkoutDataSourceを用いて
workoutConfigurationを渡し

00:25:20.120 --> 00:25:23.857 align:start position:32% line:-2
自動的にタイプを
推定するようにします

00:25:25.859 --> 00:25:31.532 align:start position:14% line:-2
そして sessionとbuilderを
開始します

00:25:33.901 --> 00:25:38.438 align:start position:32% line:-2
ワークアウトを始めて
最初にすることは

00:25:38.539 --> 00:25:41.341 align:start position:30% line:-2
タイマーを
スタートさせることです

00:25:41.708 --> 00:25:46.580 align:start position:21% line:-2
beginCollectionの
コールバックで行います

00:25:49.783 --> 00:25:52.553 align:start position:29% line:-1
これが そのメソッドです

00:25:52.953 --> 00:25:59.426 align:start position:30% line:-2
中断や再開のイベントが
経過時間に影響するので

00:25:59.526 --> 00:26:04.665 align:start position:0% line:-2
workoutBuilberDidCollectEventも
使います

00:25:59.526 --> 00:26:04.665 align:start position:0% line:-2
workoutBuilberDidCollectEventも
使います

00:26:07.835 --> 00:26:09.603 align:start position:36% line:-1
では 実行します

00:26:10.504 --> 00:26:15.142 align:start position:18% line:-2
このUIで使用するのは
WKInterfaceTimerです

00:26:15.275 --> 00:26:17.478 align:start position:34% line:-1
このオブジェクトは

00:26:18.078 --> 00:26:23.383 align:start position:29% line:-2
カウントを開始する
過去の日時を必要とします

00:26:23.917 --> 00:26:26.520 align:start position:27% line:-2
そこで
Dateオブジェクトを作成

00:26:26.687 --> 00:26:29.990 align:start position:20% line:-2
elapsedTimeプロパティを
用います

00:26:30.624 --> 00:26:36.096 align:start position:30% line:-2
過去の日時が必要なので
マイナス記号を入れます

00:26:36.997 --> 00:26:42.436 align:start position:29% line:-2
そして UIなので
メインキューで実行します

00:26:42.536 --> 00:26:45.038 align:start position:30% line:-2
あとはタイマーの日時を
設定するだけ

00:26:46.473 --> 00:26:53.413 align:start position:30% line:-2
ワークアウト中だけ
タイマーを実行するには

00:26:53.614 --> 00:26:54.715 align:start position:41% line:-1
こうします

00:26:55.616 --> 00:26:57.785 align:start position:18% line:-1
まず sessionStateを挿入

00:26:58.452 --> 00:27:00.888 align:start position:30% line:-1
メインキューで実行です

00:26:58.452 --> 00:27:00.888 align:start position:30% line:-1
メインキューで実行です

00:27:00.988 --> 00:27:04.591 align:start position:34% line:-2
ワークアウト中なら
タイマーを開始

00:27:04.858 --> 00:27:07.694 align:start position:32% line:-1
それ以外なら止めます

00:27:08.595 --> 00:27:12.933 align:start position:32% line:-2
これで タイマーが
経過時間を追跡します

00:27:13.901 --> 00:27:19.306 align:start position:23% line:-2
次に UIに表示される測定値が
正確かを確認しましょう

00:27:19.907 --> 00:27:24.578 align:start position:21% line:-2
builderが新たなサンプルを
収集する度に

00:27:24.678 --> 00:27:27.047 align:start position:25% line:-1
このメソッドが呼び出されます

00:27:27.614 --> 00:27:32.252 align:start position:14% line:-2
ここでは collectedTypesを
反復します

00:27:36.623 --> 00:27:42.229 align:start position:30% line:-2
今回 欲しいデータは
全て数量サンプルなので

00:27:42.329 --> 00:27:45.732 align:start position:27% line:-1
それだけを扱うようにします

00:27:47.501 --> 00:27:51.004 align:start position:29% line:-1
ここで 新しいメソッド―

00:27:51.104 --> 00:27:56.443 align:start position:5% line:-2
workoutBuilder.statistics
(for: quantityType)を利用

00:27:56.543 --> 00:27:59.513 align:start position:16% line:-2
HKStatisticsオブジェクトが
得られます

00:27:59.613 --> 00:28:06.487 align:start position:23% line:-2
各タイプの最大値 最小値
平均値 最新値が含まれています

00:27:59.613 --> 00:28:06.487 align:start position:23% line:-2
各タイプの最大値 最小値
平均値 最新値が含まれています

00:28:07.855 --> 00:28:10.324 align:start position:16% line:-1
statisticsオブジェクトを挿入

00:28:11.358 --> 00:28:14.828 align:start position:29% line:-1
すでに実行したメソッドが

00:28:14.962 --> 00:28:19.833 align:start position:27% line:-2
特定の数量タイプに
UIラベルを与えてくれます

00:28:20.567 --> 00:28:25.572 align:start position:14% line:-2
あとはstatisticsオブジェクトで
ラベルが更新されます

00:28:27.508 --> 00:28:32.246 align:start position:27% line:-2
次に ユーザが状態を
管理できるようにしましょう

00:28:33.413 --> 00:28:38.685 align:start position:25% line:-2
中断ボタンが押されると
このメソッドが呼び出されます

00:28:38.986 --> 00:28:42.923 align:start position:25% line:-2
session.pauseを
呼び出しましょう

00:28:43.924 --> 00:28:48.929 align:start position:21% line:-2
再開する時は
session.resumeです

00:28:50.197 --> 00:28:55.435 align:start position:20% line:-2
ワークアウトを
終了するにはsession.end

00:28:55.903 --> 00:29:01.041 align:start position:4% line:-2
そして builder.endCollectionに
終了日時を渡します

00:28:55.903 --> 00:29:01.041 align:start position:4% line:-2
そして builder.endCollectionに
終了日時を渡します

00:29:01.742 --> 00:29:06.880 align:start position:18% line:-2
finishWorkoutを呼び出し
ワークアウトと関連データを

00:29:06.980 --> 00:29:09.516 align:start position:38% line:-1
全て保存します

00:29:10.217 --> 00:29:11.985 align:start position:36% line:-1
これで終わりです

00:29:12.386 --> 00:29:16.857 align:start position:34% line:-2
では このコードを
実行してみましょう

00:29:24.298 --> 00:29:27.468 align:start position:29% line:-1
ワークアウトを開始します

00:29:28.235 --> 00:29:33.006 align:start position:25% line:-2
ご覧のとおり
タイマーが更新されていきます

00:29:33.106 --> 00:29:36.643 align:start position:30% line:-1
データは直接 収集され

00:29:36.743 --> 00:29:39.746 align:start position:34% line:-1
UIに表示されます

00:29:40.114 --> 00:29:45.385 align:start position:29% line:-2
もちろん 状態の変化にも
対応できます

00:29:45.485 --> 00:29:48.522 align:start position:29% line:-1
ワークアウトを中断すると

00:29:49.323 --> 00:29:52.726 align:start position:30% line:-2
タイマーとデータ収集が
止まります

00:29:52.993 --> 00:29:54.928 align:start position:38% line:-1
再開しましょう

00:29:57.397 --> 00:30:03.003 align:start position:30% line:-2
わずか数行のコードで
完全な機能を備えました

00:29:57.397 --> 00:30:03.003 align:start position:30% line:-2
わずか数行のコードで
完全な機能を備えました

00:30:03.570 --> 00:30:08.876 align:start position:43% line:-1
(拍手)

00:30:09.276 --> 00:30:11.745 align:start position:29% line:-1
ワークアウトを停止します

00:30:14.081 --> 00:30:20.087 align:start position:25% line:-2
どのように保存されたか
iPhoneで見てみましょう

00:30:22.456 --> 00:30:26.727 align:start position:34% line:-2
これが今 保存した
ワークアウトです

00:30:26.927 --> 00:30:30.597 align:start position:30% line:-2
これほど豊富な情報が
HealthKit内に

00:30:30.731 --> 00:30:33.667 align:start position:27% line:-1
直接 保存されているのです

00:30:33.901 --> 00:30:35.969 align:start position:38% line:-1
デバイスの詳細

00:30:36.069 --> 00:30:42.943 align:start position:21% line:-2
心拍数 距離 消費エネルギーなど
関連するサンプル

00:30:43.110 --> 00:30:48.916 align:start position:29% line:-2
そして 中断や再開などの
イベントも記録されます

00:30:57.257 --> 00:30:59.359 align:start position:34% line:-1
このように 簡単に

00:30:59.459 --> 00:31:03.931 align:start position:23% line:-2
ワークアウトアプリケーションを
構築できます

00:30:59.459 --> 00:31:03.931 align:start position:23% line:-2
ワークアウトアプリケーションを
構築できます

00:31:04.832 --> 00:31:09.603 align:start position:43% line:-1
(拍手)

00:31:10.170 --> 00:31:14.474 align:start position:27% line:-2
しかし 常にうまくいくとは
限りません

00:31:14.808 --> 00:31:20.114 align:start position:23% line:-2
初めてのマラソンで
このアプリケーションを使おうと

00:31:20.214 --> 00:31:23.884 align:start position:25% line:-1
楽しみにしていたとしましょう

00:31:24.184 --> 00:31:26.787 align:start position:29% line:-1
ところが 終わってみると

00:31:27.120 --> 00:31:30.390 align:start position:29% line:-2
途中でアプリケーションが
クラッシュ

00:31:30.490 --> 00:31:32.392 align:start position:29% line:-1
全データが消えてしまった

00:31:33.026 --> 00:31:37.731 align:start position:20% line:-2
そんな時はwatchOS 5の
Workout Recoveryで

00:31:37.998 --> 00:31:40.033 align:start position:34% line:-1
問題を解決できます

00:31:40.567 --> 00:31:44.438 align:start position:43% line:-1
(拍手)

00:31:44.538 --> 00:31:48.809 align:start position:21% line:-2
アプリケーションが
ワークアウト中にクラッシュしても

00:31:49.209 --> 00:31:54.248 align:start position:34% line:-2
自動的に再起動して
復元するのです

00:31:55.282 --> 00:32:01.188 align:start position:21% line:-2
sessionとbuilderが
以前の状態に修復されます

00:31:55.282 --> 00:32:01.188 align:start position:21% line:-2
sessionとbuilderが
以前の状態に修復されます

00:32:01.455 --> 00:32:06.560 align:start position:21% line:-2
startActivityなどを
呼び出す必要はありません

00:32:07.761 --> 00:32:12.332 align:start position:14% line:-2
データの自動収集に
data sourceを用いている場合は

00:32:12.432 --> 00:32:14.434 align:start position:36% line:-1
再設定が必要です

00:32:15.636 --> 00:32:17.070 align:start position:38% line:-1
見てみましょう

00:32:18.605 --> 00:32:21.575 align:start position:27% line:-1
クラッシュ後 再起動すると

00:32:21.675 --> 00:32:25.913 align:start position:7% line:-2
WKExtensionDelegateメソッドを
呼び出します

00:32:26.013 --> 00:32:28.315 align:start position:0% line:-2
それから
handleActiveWorkoutRecoveryも

00:32:28.982 --> 00:32:33.053 align:start position:18% line:-2
healthStoreオブジェクトを
作成して

00:32:33.554 --> 00:32:38.158 align:start position:0% line:-2
recoverActiveWorkoutSessionを
呼び出します

00:32:38.358 --> 00:32:42.129 align:start position:29% line:-2
完了ハンドラに
sessionが戻ります

00:32:42.729 --> 00:32:43.997 align:start position:39% line:-1
これだけです

00:32:47.134 --> 00:32:49.803 align:start position:30% line:-1
これが新しいAPIです

00:32:49.970 --> 00:32:54.474 align:start position:23% line:-2
これまで以上に 簡単に
アプリケーションを構築できます

00:32:54.875 --> 00:32:58.378 align:start position:7% line:-2
さらに 新しい
Quantity Series APIもあります

00:32:58.479 --> 00:33:03.383 align:start position:27% line:-2
これについては ニハリカが
詳しく紹介します

00:32:58.479 --> 00:33:03.383 align:start position:27% line:-2
これについては ニハリカが
詳しく紹介します

00:33:04.017 --> 00:33:08.322 align:start position:43% line:-1
(拍手)

00:33:08.956 --> 00:33:10.157 align:start position:39% line:-1
すごいですね

00:33:10.257 --> 00:33:14.561 align:start position:29% line:-2
完全なアプリケーションが
10分未満で作れました

00:33:14.661 --> 00:33:20.567 align:start position:21% line:-2
ユーザはワークアウトが好きなので
これは とても重要なことです

00:33:21.034 --> 00:33:24.037 align:start position:30% line:-2
ワークアウトは
大量のデータを生みます

00:33:24.138 --> 00:33:26.607 align:start position:23% line:-1
サッカーのアプリケーションなら

00:33:26.840 --> 00:33:30.244 align:start position:30% line:-2
ユーザの動きを
理解する必要があります

00:33:30.344 --> 00:33:35.616 align:start position:29% line:-2
フィールド上をどのくらい
動いたかという距離も―

00:33:35.716 --> 00:33:37.651 align:start position:36% line:-1
追跡したいですね

00:33:38.285 --> 00:33:42.556 align:start position:30% line:-2
ワークアウトが始まれば
サンプルが入ってきます

00:33:42.890 --> 00:33:47.661 align:start position:18% line:-1
まず2.25m進み 次に0.6m進み

00:33:47.761 --> 00:33:50.864 align:start position:34% line:-2
また さらに進んで
終わりました

00:33:50.998 --> 00:33:54.234 align:start position:25% line:-1
これまでは それぞれの距離が

00:33:54.334 --> 00:33:57.337 align:start position:21% line:-2
個別のHKQuantityとして
保存されました

00:33:57.504 --> 00:34:00.974 align:start position:25% line:-1
それぞれが独立していたのです

00:33:57.504 --> 00:34:00.974 align:start position:25% line:-1
それぞれが独立していたのです

00:34:01.341 --> 00:34:05.579 align:start position:32% line:-2
これを１つにできたら
便利ですよね

00:34:05.679 --> 00:34:11.585 align:start position:27% line:-2
累計を追跡しつつ
個別の数字も保存するのです

00:34:12.018 --> 00:34:15.922 align:start position:11% line:-2
そこで紹介するのが HKCumulative
QuantitySeriesSample

00:34:16.023 --> 00:34:21.395 align:start position:27% line:-2
頻度の高いデータを
効率的に保存する新機能です

00:34:21.562 --> 00:34:22.996 align:start position:38% line:-1
利点は２つです

00:34:23.096 --> 00:34:28.101 align:start position:30% line:-2
まず １つのサンプルを
保存すればよいので

00:34:28.202 --> 00:34:33.607 align:start position:29% line:-2
頻繁に生じるデータを
効率的に保存できる点です

00:34:33.774 --> 00:34:37.411 align:start position:29% line:-2
２つ目は
サンプルを構成する数字の

00:34:37.511 --> 00:34:40.347 align:start position:29% line:-1
連結が保たれている点です

00:34:41.215 --> 00:34:43.484 align:start position:34% line:-1
これは おなじみの

00:34:43.583 --> 00:34:48.121 align:start position:20% line:-2
HKQuantitySampleの
サブクラスです

00:34:48.222 --> 00:34:54.194 align:start position:29% line:-2
以前に使ったことがあれば
ほぼ同じだと分かります

00:34:55.329 --> 00:34:57.498 align:start position:30% line:-1
では どう役立つのか？

00:34:57.731 --> 00:35:00.100 align:start position:32% line:-1
例えばデータの可視化

00:34:57.731 --> 00:35:00.100 align:start position:32% line:-1
例えばデータの可視化

00:35:00.200 --> 00:35:03.604 align:start position:29% line:-1
複雑な表やグラフを使って

00:35:03.704 --> 00:35:07.941 align:start position:34% line:-2
ユーザのデータを
美しく見せたい時は

00:35:08.342 --> 00:35:12.446 align:start position:18% line:-2
HKStatisticsQueryを
使いましょう

00:35:12.546 --> 00:35:15.282 align:start position:20% line:-2
またはHKStatistics
CollectionQueryです

00:35:15.382 --> 00:35:19.153 align:start position:36% line:-2
この目的に使える
既存のクエリです

00:35:19.253 --> 00:35:22.589 align:start position:23% line:-1
きめ細かいデータにアクセスでき

00:35:22.689 --> 00:35:27.895 align:start position:21% line:-2
新しいSeriesSampleの
データも取得できます

00:35:27.995 --> 00:35:31.398 align:start position:32% line:-1
余分な処理は不要です

00:35:32.366 --> 00:35:37.037 align:start position:29% line:-2
データ解析がしたい場合は
もう一歩 踏み込んで

00:35:37.137 --> 00:35:40.841 align:start position:34% line:-2
個々の数字を
知る必要があります

00:35:41.341 --> 00:35:45.679 align:start position:0% line:-2
HKQuantitySeriesSampleQueryを
使いましょう

00:35:45.979 --> 00:35:48.849 align:start position:29% line:-1
最後に サッカーのように

00:35:48.949 --> 00:35:52.753 align:start position:34% line:-2
頻繁なデータ収集を
要する場合です

00:35:53.053 --> 00:35:56.356 align:start position:0% line:-2
HKQuantitySeriesSampleBuilderを
使いましょう

00:35:56.457 --> 00:36:01.562 align:start position:27% line:-2
累積的な数量サンプルを作る
新しい方法で

00:35:56.457 --> 00:36:01.562 align:start position:27% line:-2
累積的な数量サンプルを作る
新しい方法で

00:36:01.662 --> 00:36:04.097 align:start position:30% line:-1
保存も効率的にできます

00:36:05.933 --> 00:36:07.935 align:start position:30% line:-1
では やってみましょう

00:36:08.035 --> 00:36:09.603 align:start position:39% line:-1
この方法では

00:36:09.703 --> 00:36:15.142 align:start position:5% line:-2
QuantitySeriesSampleを構成する
個別のHKQuantityを

00:36:15.242 --> 00:36:17.711 align:start position:30% line:-2
深く調べ
理解することができます

00:36:18.579 --> 00:36:23.717 align:start position:29% line:-2
コードでは まず
数量の保存場所を決めます

00:36:23.817 --> 00:36:26.520 align:start position:32% line:-2
ここでは数量の配列に
保存します

00:36:27.888 --> 00:36:33.260 align:start position:27% line:-2
次に 取得したいサンプルで
クエリを初期化

00:36:33.360 --> 00:36:37.197 align:start position:29% line:-2
大部分の処理は
完了ハンドラで発生します

00:36:37.297 --> 00:36:40.534 align:start position:18% line:-2
analyzeQuantityという
メソッドは

00:36:40.634 --> 00:36:43.804 align:start position:30% line:-2
関心のある数量について
処理します

00:36:43.904 --> 00:36:47.808 align:start position:30% line:-2
この例では
数量の配列に追加します

00:36:48.342 --> 00:36:50.944 align:start position:32% line:-1
最後に クエリを実行

00:36:51.145 --> 00:36:52.780 align:start position:39% line:-1
これだけです

00:36:52.980 --> 00:36:57.818 align:start position:29% line:-2
皆さんの知っている
他のクエリとほぼ同じです

00:36:59.453 --> 00:37:02.656 align:start position:16% line:-2
次に HKQuantitySeries
SampleBuilder

00:36:59.453 --> 00:37:02.656 align:start position:16% line:-2
次に HKQuantitySeries
SampleBuilder

00:37:02.756 --> 00:37:07.995 align:start position:27% line:-2
頻繁にデータを取得するのに
非常に優れています

00:37:08.095 --> 00:37:12.032 align:start position:32% line:-2
より効率的に
データを保存しながら

00:37:12.132 --> 00:37:14.568 align:start position:29% line:-1
データ間の連結も可能です

00:37:15.002 --> 00:37:19.740 align:start position:18% line:-2
まずは SampleBuilderを
作ります

00:37:19.840 --> 00:37:24.678 align:start position:23% line:-2
最初はhealthStoreと
quantityTypeです

00:37:25.012 --> 00:37:30.284 align:start position:29% line:-2
次に サンプルに入れたい
データがあれば挿入します

00:37:30.384 --> 00:37:32.786 align:start position:30% line:-1
例えばサッカーの場合は

00:37:32.886 --> 00:37:37.024 align:start position:30% line:-2
関心があるのは
ユーザが動いた距離です

00:37:37.124 --> 00:37:41.461 align:start position:32% line:-2
そこで 単位として
メートルを宣言します

00:37:41.562 --> 00:37:44.531 align:start position:20% line:-2
これをseriesBuilderに
挿入します

00:37:46.166 --> 00:37:49.737 align:start position:27% line:-2
最後に
finishを呼び出します

00:37:49.837 --> 00:37:53.273 align:start position:7% line:-2
新しいQuantitySeriesSampleを
入手すれば

00:37:53.374 --> 00:37:56.376 align:start position:25% line:-1
保存も より効率的にできます

00:37:56.610 --> 00:38:02.516 align:start position:21% line:-2
皆さんのアプリケーションに
ぜひ このAPIを使ってください

00:37:56.610 --> 00:38:02.516 align:start position:21% line:-2
皆さんのアプリケーションに
ぜひ このAPIを使ってください

00:38:02.616 --> 00:38:05.419 align:start position:27% line:-1
データ保存の新しい方法です

00:38:05.786 --> 00:38:11.391 align:start position:30% line:-2
データを関連付けて
興味深い分析もできます

00:38:14.194 --> 00:38:17.698 align:start position:30% line:-2
今日は
いろいろな話をしました

00:38:17.798 --> 00:38:21.935 align:start position:30% line:-2
それぞれをパーツとして
考えてみてください

00:38:22.035 --> 00:38:24.438 align:start position:29% line:-1
組み合わせることによって

00:38:24.538 --> 00:38:29.009 align:start position:32% line:-2
最初から最後まで
ユーザを尊重できます

00:38:29.176 --> 00:38:32.880 align:start position:25% line:-1
まず尊重すべきはプライバシー

00:38:32.980 --> 00:38:37.184 align:start position:32% line:-2
ユーザの個人データに
アクセスするからには

00:38:37.284 --> 00:38:42.222 align:start position:34% line:-2
相応の敬意をもって
扱うことが重要です

00:38:42.589 --> 00:38:48.996 align:start position:21% line:-2
そしてカリムが紹介した新機能で
シームレスな体験を提供しましょう

00:38:49.096 --> 00:38:56.036 align:start position:27% line:-2
クラッシュ対策などの機能で
ユーザの期待に応えられます

00:38:56.203 --> 00:39:00.073 align:start position:23% line:-1
最後に 新しいAPIを活用して

00:38:56.203 --> 00:39:00.073 align:start position:23% line:-1
最後に 新しいAPIを活用して

00:39:00.174 --> 00:39:05.379 align:start position:27% line:-2
デバイスの能力を
最大限に引き出してください

00:39:05.479 --> 00:39:08.649 align:start position:30% line:-2
最高の体験を
ユーザに提供しましょう

00:39:08.749 --> 00:39:13.120 align:start position:23% line:-2
ワークアウトアプリケーションは
成長を続け

00:39:13.220 --> 00:39:17.658 align:start position:34% line:-2
それを使うユーザも
増え続けています

00:39:17.758 --> 00:39:20.194 align:start position:32% line:-1
大いに期待しています

00:39:21.161 --> 00:39:24.231 align:start position:7% line:-2
Developer Documentationに
詳しい情報があります

00:39:24.331 --> 00:39:29.403 align:start position:23% line:-2
今日 このあとのセッションにも
お越しください

00:39:29.503 --> 00:39:33.040 align:start position:27% line:-2
ヘルスケアとフィットネスの
集まりもあるので

00:39:33.140 --> 00:39:37.911 align:start position:29% line:-2
直接 お目にかかれるのを
楽しみにしています

00:39:38.011 --> 00:39:41.849 align:start position:32% line:-2
HealthKitの
新機能については

00:39:41.949 --> 00:39:46.353 align:start position:0% line:-2
“Accessing Health Records with
HealthKit”をお聞きください

00:39:47.221 --> 00:39:50.424 align:start position:30% line:-1
皆さんに期待しています

00:39:50.924 --> 00:39:51.658 align:start position:41% line:-1
ありがとう

00:39:51.759 --> 00:39:56.330 align:start position:43% line:-1
(拍手)
