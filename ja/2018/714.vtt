WEBVTT

00:00:07.140 --> 00:00:16.517 align:start position:43% line:-1
(音楽)

00:00:18.886 --> 00:00:26.326 align:start position:43% line:-1
(拍手)

00:00:26.894 --> 00:00:28.662 align:start position:34% line:-1
おはようございます

00:00:28.962 --> 00:00:32.299 align:start position:30% line:-2
今回 初めてWWDCに
参加される方は？

00:00:33.667 --> 00:00:37.871 align:start position:27% line:-2
毎年 新たな参加者が増えて
うれしいです

00:00:38.138 --> 00:00:41.742 align:start position:29% line:-2
私 スチュアートが
ネットワークの話をします

00:00:42.643 --> 00:00:47.848 align:start position:29% line:-2
まずはアプリケーションの
動作に関わるトピックです

00:00:47.948 --> 00:00:52.186 align:start position:23% line:-2
ネットワークを使わないAppは
ほぼ存在しないので

00:00:52.286 --> 00:00:56.323 align:start position:30% line:-2
最高のパフォーマンスを
引き出すことが重要です

00:00:56.423 --> 00:01:00.294 align:start position:32% line:-2
そのための技術を
いくつかご紹介します

00:00:56.423 --> 00:01:00.294 align:start position:32% line:-2
そのための技術を
いくつかご紹介します

00:01:01.228 --> 00:01:05.399 align:start position:32% line:-2
AppleのAPIを
有効活用するための―

00:01:05.699 --> 00:01:09.570 align:start position:32% line:-2
秘訣についても
皆さんにお教えします

00:01:09.670 --> 00:01:13.473 align:start position:32% line:-2
そして後半は
私の同僚のジテンが―

00:01:13.574 --> 00:01:18.478 align:start position:20% line:-2
URLSessionの詳細について
ご紹介します

00:01:21.048 --> 00:01:25.052 align:start position:29% line:-2
まずは最新の
ネットワークについてです

00:01:25.419 --> 00:01:31.058 align:start position:25% line:-2
インターネット利用者数は
いまや40億人まで増えました

00:01:31.158 --> 00:01:34.061 align:start position:25% line:-1
これは世界人口の半数以上で―

00:01:34.161 --> 00:01:37.497 align:start position:36% line:-2
ネットの使用量も
増え続けています

00:01:37.698 --> 00:01:43.170 align:start position:29% line:-2
ネット利用者数の増加率は
緩やかになりましたが

00:01:43.270 --> 00:01:48.342 align:start position:29% line:-2
インターネットの成長率は
降下してはいません

00:01:48.442 --> 00:01:54.181 align:start position:18% line:-2
M2MやIoT スマートホームなどで
進化を続けています

00:01:54.281 --> 00:01:57.484 align:start position:32% line:-2
インドや
中国の人々の間では―

00:01:58.185 --> 00:02:04.892 align:start position:29% line:-2
デスクトップ型パソコンが
あまり普及していません

00:01:58.185 --> 00:02:04.892 align:start position:29% line:-2
デスクトップ型パソコンが
あまり普及していません

00:02:04.992 --> 00:02:09.863 align:start position:30% line:-2
彼らはスマートフォンを
メインで使用しており―

00:02:10.830 --> 00:02:14.735 align:start position:34% line:-2
その通信規格は
2Gのままなのです

00:02:15.035 --> 00:02:20.774 align:start position:27% line:-2
この会場の皆さんが生み出す
アプリケーションは―

00:02:20.874 --> 00:02:25.112 align:start position:27% line:-2
ほとんどがLTEを想定した
仕様のはずです

00:02:25.379 --> 00:02:28.949 align:start position:32% line:-2
これは私たちにとって
不利な事実です

00:02:29.049 --> 00:02:32.853 align:start position:32% line:-2
LTE向けの
アプリケーションは―

00:02:33.420 --> 00:02:36.623 align:start position:34% line:-2
2Gでの操作性が
非常に悪いからです

00:02:36.924 --> 00:02:41.461 align:start position:29% line:-2
2Gでのパフォーマンスが
良いアプリケーションは―

00:02:41.562 --> 00:02:43.797 align:start position:27% line:-1
LTEだと最高の操作性です

00:02:43.997 --> 00:02:48.468 align:start position:30% line:-2
そこで速度の遅い環境の
プロパティを再現する―

00:02:48.569 --> 00:02:53.373 align:start position:5% line:-2
Network Link Conditionerを
ご紹介いたします

00:02:53.941 --> 00:02:58.111 align:start position:34% line:-2
このNLCを
必ず実行しながら―

00:02:58.212 --> 00:03:02.983 align:start position:32% line:-2
アプリケーションの
開発を進めてください

00:02:58.212 --> 00:03:02.983 align:start position:32% line:-2
アプリケーションの
開発を進めてください

00:03:03.417 --> 00:03:07.354 align:start position:29% line:-2
アプリケーションが
完成した後では手遅れです

00:03:07.454 --> 00:03:09.923 align:start position:36% line:-2
プログラミングに
ミスがあっても―

00:03:10.023 --> 00:03:14.595 align:start position:27% line:-2
開発途中なら
すぐに修正ができるからです

00:03:15.462 --> 00:03:20.801 align:start position:16% line:-2
Wiresharkやtcptraceを
使うことで操作性や―

00:03:20.901 --> 00:03:24.571 align:start position:29% line:-2
メモリとCPUの使用量を
確認できます

00:03:25.038 --> 00:03:29.643 align:start position:32% line:-2
tcptraceは
このようなグラフで―

00:03:29.743 --> 00:03:33.247 align:start position:32% line:-2
ネットワークの状況を
ひと目で確認できます

00:03:33.347 --> 00:03:37.317 align:start position:29% line:-2
詳しくは３年前の
セッションをご覧ください

00:03:39.453 --> 00:03:43.891 align:start position:30% line:-2
IPv6の使用量が
増え続けている理由は―

00:03:43.991 --> 00:03:49.229 align:start position:30% line:-2
IPv4より良い
性能を発揮するからです

00:03:49.329 --> 00:03:51.899 align:start position:34% line:-2
アプリケーションの
操作性には―

00:03:51.999 --> 00:03:57.337 align:start position:27% line:-2
ネイティブ方式のIPv6に
対応しているかも重要です

00:03:57.704 --> 00:04:01.475 align:start position:29% line:-2
IPv6が推奨されている
地域は多く―

00:03:57.704 --> 00:04:01.475 align:start position:29% line:-2
IPv6が推奨されている
地域は多く―

00:04:01.875 --> 00:04:06.413 align:start position:27% line:-2
アメリカでも87％の携帯が
IPv6向けです

00:04:06.647 --> 00:04:12.186 align:start position:27% line:-2
ほぼ同じ状況である
インドに焦点を当ててみます

00:04:12.553 --> 00:04:17.423 align:start position:27% line:-2
これは今年の初めに調査した
ネットワークのデータです

00:04:17.824 --> 00:04:21.394 align:start position:32% line:-2
インドの
携帯ネットワークで―

00:04:21.495 --> 00:04:27.134 align:start position:23% line:-2
TCP接続にかかる時間と
その往復遅延時間を表しています

00:04:27.234 --> 00:04:29.369 align:start position:32% line:-1
青い線がIPv6です

00:04:29.469 --> 00:04:34.107 align:start position:30% line:-2
例として75％の部分を
見てみましょう

00:04:34.208 --> 00:04:39.179 align:start position:27% line:-2
IPv6によるTCP接続の
75％が―

00:04:39.279 --> 00:04:42.216 align:start position:27% line:-2
0.15秒以下であることを
意味します

00:04:42.316 --> 00:04:47.254 align:start position:25% line:-2
一方 IPv4での接続時間は
0.325秒以上で―

00:04:47.354 --> 00:04:48.956 align:start position:34% line:-1
２倍以上の遅さです

00:04:49.056 --> 00:04:53.193 align:start position:30% line:-2
もしアプリケーションの
操作性を高めるなら―

00:04:53.293 --> 00:04:55.729 align:start position:27% line:-1
IPv6に対応してください

00:04:56.997 --> 00:04:59.333 align:start position:11% line:-2
他にもExplicit Congestion
Notificationで

00:04:59.433 --> 00:05:04.471 align:start position:25% line:-2
パケットロスや再送信を減らし
操作性を高められます

00:04:59.433 --> 00:05:04.471 align:start position:25% line:-2
パケットロスや再送信を減らし
操作性を高められます

00:05:04.805 --> 00:05:07.841 align:start position:29% line:-1
macOSやiOSには―

00:05:07.941 --> 00:05:11.311 align:start position:27% line:-1
数年前から実装されています

00:05:11.411 --> 00:05:13.247 align:start position:29% line:-1
特別な作業は不要ですが―

00:05:13.614 --> 00:05:17.284 align:start position:29% line:-2
ネットワークは
ECN対応にしてください

00:05:18.185 --> 00:05:22.523 align:start position:25% line:-2
Alexaで上位100万件の
Webサイトを調べると―

00:05:22.623 --> 00:05:26.960 align:start position:29% line:-2
そのうち77％が
ECN対応のサイトでした

00:05:27.060 --> 00:05:29.796 align:start position:29% line:-1
数年前より激増しています

00:05:32.833 --> 00:05:37.704 align:start position:25% line:-2
その他 操作性と
レジリエンス向上に有効なのが

00:05:37.804 --> 00:05:39.673 align:start position:23% line:-1
Multipath TCPです

00:05:39.773 --> 00:05:44.311 align:start position:30% line:-2
オフィスでWi-Fiが
つながっていても―

00:05:44.411 --> 00:05:47.781 align:start position:30% line:-2
屋外では
途切れることがあります

00:05:47.881 --> 00:05:53.086 align:start position:29% line:-2
その場合 従来のTCPは
再接続が必要でした

00:05:53.187 --> 00:05:58.926 align:start position:20% line:-2
Multipath TCPは経路を
パケットごとに決めるため―

00:05:59.159 --> 00:06:04.198 align:start position:29% line:-2
異なるインターフェイスへ
接続できるのです

00:05:59.159 --> 00:06:04.198 align:start position:29% line:-2
異なるインターフェイスへ
接続できるのです

00:06:05.833 --> 00:06:10.237 align:start position:27% line:-2
詳しくは昨年のセッションを
ご覧ください

00:06:10.337 --> 00:06:15.342 align:start position:27% line:-2
そして お使いのサーバが
マルチパス対応かもご確認を

00:06:16.109 --> 00:06:21.381 align:start position:30% line:-2
世界中の携帯キャリアを
調査した結果―

00:06:21.481 --> 00:06:28.555 align:start position:18% line:-2
78％がMultipath TCPを
利用したネットワークでした

00:06:28.655 --> 00:06:32.259 align:start position:34% line:-2
未対応のままなのは
たった22％です

00:06:34.561 --> 00:06:37.598 align:start position:23% line:-1
TCP Fast Openは―

00:06:37.698 --> 00:06:42.803 align:start position:30% line:-2
TCPの往復遅延を
改善してくれる技術です

00:06:42.903 --> 00:06:45.939 align:start position:27% line:-1
TCP接続確立パケットに―

00:06:46.039 --> 00:06:50.944 align:start position:27% line:-2
初回のデータを含めることが
可能になります

00:06:52.546 --> 00:06:56.383 align:start position:29% line:-2
詳細は３年前の
セッションをご覧ください

00:06:56.483 --> 00:06:58.452 align:start position:27% line:-1
そして お使いのサーバが―

00:06:58.552 --> 00:07:02.456 align:start position:21% line:-2
TCP Fast Open対応か
ご確認ください

00:06:58.552 --> 00:07:02.456 align:start position:21% line:-2
TCP Fast Open対応か
ご確認ください

00:07:03.423 --> 00:07:06.160 align:start position:34% line:-1
次は新しい情報です

00:07:07.127 --> 00:07:11.832 align:start position:29% line:-2
QUICという技術を
ご存知の方もいるでしょう

00:07:11.999 --> 00:07:16.236 align:start position:34% line:-2
ここ30年来で
初めて開発された―

00:07:16.336 --> 00:07:19.640 align:start position:32% line:-2
TCPに代わる
新しいプロトコルです

00:07:19.740 --> 00:07:23.410 align:start position:32% line:-2
Googleの
エンジニアが開発し―

00:07:23.510 --> 00:07:25.412 align:start position:30% line:-1
その成果も検証済みです

00:07:25.512 --> 00:07:27.281 align:start position:29% line:-1
現在はIETFによって―

00:07:27.381 --> 00:07:30.984 align:start position:34% line:-2
QUICの標準化が
検討されています

00:07:31.919 --> 00:07:34.321 align:start position:27% line:-1
Appleのエンジニアも―

00:07:34.421 --> 00:07:39.059 align:start position:30% line:-2
スウェーデンで開催中の
会議に参加しています

00:07:40.093 --> 00:07:45.299 align:start position:29% line:-2
標準化はまだ先の話ですが
我々は準備を進めています

00:07:45.399 --> 00:07:49.803 align:start position:29% line:-2
準備が整い次第
我々のAPIも対応します

00:07:51.238 --> 00:07:53.507 align:start position:29% line:-1
他にも操作性の観点から―

00:07:54.308 --> 00:07:57.244 align:start position:27% line:-1
よくある事象に気づきました

00:07:57.344 --> 00:08:01.748 align:start position:30% line:-2
ウェブサイトで使われる
DNSレコードは―

00:07:57.344 --> 00:08:01.748 align:start position:30% line:-2
ウェブサイトで使われる
DNSレコードは―

00:08:01.849 --> 00:08:04.551 align:start position:25% line:-1
持続時間が短いものばかりです

00:08:04.651 --> 00:08:08.288 align:start position:29% line:-2
それは データセンターが
ダウンした際に―

00:08:08.388 --> 00:08:14.261 align:start position:23% line:-2
DNSを更新し 別のセンターに
迅速にアクセスするためです

00:08:15.195 --> 00:08:21.502 align:start position:30% line:-2
しかし コストをかけて
この対策を行っても―

00:08:21.602 --> 00:08:24.905 align:start position:30% line:-2
センターは
めったにダウンしません

00:08:25.005 --> 00:08:30.110 align:start position:29% line:-2
そのためDNSレコードが
期限切れになるたびに

00:08:30.210 --> 00:08:33.947 align:start position:34% line:-2
サーバからの応答を
待たねばならず

00:08:34.047 --> 00:08:39.620 align:start position:32% line:-2
余分な往復遅延時間が
かかることになります

00:08:39.720 --> 00:08:45.592 align:start position:30% line:-2
では 私たちにできる
最適な方法は何なのか？

00:08:45.826 --> 00:08:49.329 align:start position:30% line:-1
それをご説明しましょう

00:08:49.429 --> 00:08:55.269 align:start position:30% line:-2
例えばキャッシュに
古い情報があった場合―

00:08:55.369 --> 00:09:00.507 align:start position:29% line:-2
すぐさま同時進行で
DNSクエリを実行します

00:08:55.369 --> 00:09:00.507 align:start position:29% line:-2
すぐさま同時進行で
DNSクエリを実行します

00:09:00.607 --> 00:09:03.844 align:start position:25% line:-1
DNSの情報を照会するのです

00:09:04.511 --> 00:09:08.949 align:start position:34% line:-2
予想どおりの
応答が得られれば―

00:09:09.049 --> 00:09:13.987 align:start position:27% line:-2
そのまま接続ができ
データ往復の時間が省けます

00:09:14.354 --> 00:09:21.028 align:start position:27% line:-2
違うアドレスで応答があると
非同期通知が送られ―

00:09:21.128 --> 00:09:24.565 align:start position:36% line:-2
新たなアドレスで
再接続を行います

00:09:24.665 --> 00:09:29.303 align:start position:23% line:-2
Happy Eyeballsと
連動させることで―

00:09:29.403 --> 00:09:32.840 align:start position:30% line:-1
並列的な接続が可能です

00:09:32.940 --> 00:09:37.744 align:start position:18% line:-2
IPv6 IPv4 複数のアドレスや
インターフェイスを試します

00:09:38.512 --> 00:09:43.650 align:start position:30% line:-2
皆さんがお考えのとおり
これは大変な作業です

00:09:44.051 --> 00:09:48.822 align:start position:30% line:-2
この作業を簡単に行える
新たなAPIについて―

00:09:48.922 --> 00:09:52.759 align:start position:30% line:-1
後ほどご紹介いたします

00:09:54.495 --> 00:09:56.597 align:start position:34% line:-1
次はガイダンスです

00:09:56.697 --> 00:10:00.300 align:start position:25% line:-2
SCNetwork
Reachabilityで―

00:09:56.697 --> 00:10:00.300 align:start position:25% line:-2
SCNetwork
Reachabilityで―

00:10:00.400 --> 00:10:05.806 align:start position:29% line:-2
事前チェックを行う
デベロッパも多いでしょう

00:10:06.373 --> 00:10:08.575 align:start position:30% line:-1
ネットワークの運用が―

00:10:08.675 --> 00:10:12.513 align:start position:32% line:-2
うまくいくかどうかを
確認するためです

00:10:12.613 --> 00:10:17.117 align:start position:32% line:-2
しかし先のことを
予見するのは大変です

00:10:17.217 --> 00:10:19.453 align:start position:30% line:-1
今はうまく接続しても―

00:10:19.553 --> 00:10:24.791 align:start position:25% line:-2
２秒後にはWi-Fiの電波が
途切れるかもしれません

00:10:24.892 --> 00:10:30.030 align:start position:32% line:-2
運用が成功する保証は
どこにもないのです

00:10:30.497 --> 00:10:35.969 align:start position:32% line:-2
運用がうまくいくまで
失敗を繰り返すのも―

00:10:36.069 --> 00:10:38.205 align:start position:38% line:-1
日常茶飯事です

00:10:38.539 --> 00:10:42.042 align:start position:30% line:-2
ネットワークプロキシの
設定も―

00:10:42.142 --> 00:10:46.747 align:start position:32% line:-2
とても複雑で
負担の大きい作業です

00:10:47.514 --> 00:10:49.316 align:start position:29% line:-1
その悩みを解決しましょう

00:10:51.885 --> 00:10:57.825 align:start position:12% line:-2
waitsForConnectivityで
作業負荷を減らせます

00:10:58.759 --> 00:11:03.297 align:start position:29% line:-2
詳細は昨年のセッションを
ご覧ください

00:10:58.759 --> 00:11:03.297 align:start position:29% line:-2
詳細は昨年のセッションを
ご覧ください

00:11:03.397 --> 00:11:06.700 align:start position:30% line:-2
このシステムに
接続を要請するだけです

00:11:06.800 --> 00:11:09.203 align:start position:30% line:-1
タイミングは問いません

00:11:09.303 --> 00:11:14.575 align:start position:25% line:-2
デバイスが機内モードの場合
設定を解除すれば接続されます

00:11:14.675 --> 00:11:18.512 align:start position:30% line:-2
リトライ処理を行うより
はるかに簡単です

00:11:19.079 --> 00:11:23.183 align:start position:32% line:-2
ユーザに多数の質問に
回答してもらう際―

00:11:23.283 --> 00:11:27.454 align:start position:29% line:-2
有効であるという
開発時のケースがあります

00:11:27.554 --> 00:11:33.560 align:start position:25% line:-2
処理が失敗しても ユーザの
時間を無駄にしたくないですね

00:11:34.128 --> 00:11:37.531 align:start position:32% line:-2
休憩後のセッションで
詳細をお伝えします

00:11:37.631 --> 00:11:40.567 align:start position:30% line:-1
改善策をお知らせします

00:11:43.370 --> 00:11:46.340 align:start position:29% line:-1
セキュリティ面も重要です

00:11:47.341 --> 00:11:50.711 align:start position:30% line:-2
TLS1.2が普及して
10年が経ちました

00:11:50.811 --> 00:11:54.882 align:start position:23% line:-2
より安全性の高い
TLS 1.3への移行準備が―

00:11:55.315 --> 00:11:57.951 align:start position:32% line:-1
すでに始まっています

00:11:58.051 --> 00:12:02.689 align:start position:30% line:-2
TLS 1.3は
接続時間も短く済みます

00:11:58.051 --> 00:12:02.689 align:start position:30% line:-2
TLS 1.3は
接続時間も短く済みます

00:12:03.457 --> 00:12:08.462 align:start position:32% line:-2
標準規格化に向けて
最終調整をしており―

00:12:08.562 --> 00:12:12.132 align:start position:29% line:-2
公表文書の最終稿も
IESGに認証されました

00:12:12.566 --> 00:12:17.671 align:start position:29% line:-2
RFCエディタより
正式文書が刊行されたら―

00:12:17.838 --> 00:12:22.543 align:start position:27% line:-2
初期設定をTLS 1.3に
切り替える予定です

00:12:23.310 --> 00:12:26.680 align:start position:29% line:-2
今すぐにTLS 1.3を
試したい方は―

00:12:27.147 --> 00:12:31.585 align:start position:25% line:-2
iOSやmacOSの説明書を
ご参照ください

00:12:31.685 --> 00:12:35.923 align:start position:21% line:-2
アプリケーションを
TLS 1.3規格に更新できます

00:12:36.023 --> 00:12:42.896 align:start position:23% line:-2
規格がデフォルトになった時点で
互換性の問題が発覚しないよう

00:12:42.996 --> 00:12:46.166 align:start position:25% line:-1
なるべく早めにお試しください

00:12:46.266 --> 00:12:52.306 align:start position:29% line:-2
切り替え時期が来る前に
動作確認を終えてください

00:12:55.509 --> 00:13:00.113 align:start position:5% line:-2
Certificate Transparencyも
セキュリティ対策の１つです

00:12:55.509 --> 00:13:00.113 align:start position:5% line:-2
Certificate Transparencyも
セキュリティ対策の１つです

00:13:00.514 --> 00:13:05.853 align:start position:30% line:-2
悪意からか無能ゆえか
認証局が不正な証明書を

00:13:05.953 --> 00:13:11.692 align:start position:30% line:-2
適切でない相手に
発行する場合があります

00:13:12.459 --> 00:13:17.130 align:start position:27% line:-2
この解決策が
“証明書の透明性ログ”です

00:13:17.531 --> 00:13:22.803 align:start position:34% line:-2
認証局が発行した
すべての証明書に―

00:13:22.903 --> 00:13:25.472 align:start position:36% line:-1
証跡が残るのです

00:13:25.572 --> 00:13:29.610 align:start position:30% line:-2
その証跡は第三者の
監査ログに記載されます

00:13:30.143 --> 00:13:35.916 align:start position:29% line:-2
ポリシー外の認証局から
不正に発行された証明書は

00:13:36.216 --> 00:13:39.386 align:start position:34% line:-1
すぐに検知されます

00:13:40.454 --> 00:13:43.991 align:start position:30% line:-2
証明書が未発行の場合も
同様です

00:13:44.958 --> 00:13:48.262 align:start position:34% line:-2
なじみのある
セットアップですね

00:13:48.362 --> 00:13:50.998 align:start position:34% line:-1
新しいのはログです

00:13:51.098 --> 00:13:55.569 align:start position:32% line:-2
認証局が
証明書を発行すると―

00:13:55.669 --> 00:14:00.340 align:start position:30% line:-2
監査ログに
その証跡が記録されます

00:13:55.669 --> 00:14:00.340 align:start position:30% line:-2
監査ログに
その証跡が記録されます

00:14:00.440 --> 00:14:07.047 align:start position:29% line:-2
サーバは接続時に
ログから取得した証跡を―

00:14:07.214 --> 00:14:09.616 align:start position:29% line:-1
クライアントに提示します

00:14:09.716 --> 00:14:13.086 align:start position:38% line:-2
クライアントは
その証明書が―

00:14:13.187 --> 00:14:16.256 align:start position:29% line:-2
公的に記録され
署名されたと確認できます

00:14:16.890 --> 00:14:19.560 align:start position:27% line:-1
このポリシー外の認証局が―

00:14:20.027 --> 00:14:24.364 align:start position:32% line:-2
不正な証明書を
発行したと想定します

00:14:24.631 --> 00:14:28.869 align:start position:30% line:-2
クライアントは
ログを確認することで―

00:14:28.969 --> 00:14:32.005 align:start position:32% line:-2
この証明書が不正だと
検知できます

00:14:33.006 --> 00:14:36.310 align:start position:29% line:-1
私たちは今年の終わりに―

00:14:37.411 --> 00:14:40.747 align:start position:32% line:-2
新たなTLS証明書を
発行します

00:14:40.848 --> 00:14:42.816 align:start position:34% line:-1
ログの検証による―

00:14:42.916 --> 00:14:47.454 align:start position:32% line:-2
不正な証明書の検知も
可能です

00:14:47.554 --> 00:14:51.291 align:start position:29% line:-2
アプリケーションの改訂は
要りません

00:14:51.391 --> 00:14:56.396 align:start position:32% line:-2
独自のサーバ証明書を
お持ちの場合は―

00:14:56.497 --> 00:15:00.467 align:start position:29% line:-2
適切にログが記載されるか
ご確認ください

00:14:56.497 --> 00:15:00.467 align:start position:29% line:-2
適切にログが記載されるか
ご確認ください

00:15:01.468 --> 00:15:05.706 align:start position:30% line:-2
ハードウェアについても
お知らせがあります

00:15:06.240 --> 00:15:09.243 align:start position:18% line:-2
Bonjour
Conformance Testで―

00:15:09.343 --> 00:15:13.947 align:start position:27% line:-2
Bonjourが適切に
実装されているかが分ります

00:15:14.414 --> 00:15:19.853 align:start position:23% line:-2
Bonjourの商標を使う際は
ぜひ試してください

00:15:20.220 --> 00:15:27.561 align:start position:18% line:-2
Windowsのアプリケーションに
Bonjourを実装する際も同様です

00:15:27.661 --> 00:15:32.866 align:start position:11% line:-2
AirPrintやAirPlayなどの商標を
商品に使用する際も

00:15:32.966 --> 00:15:34.868 align:start position:32% line:-1
このテストが必須です

00:15:34.968 --> 00:15:37.871 align:start position:21% line:-1
Bonjourの信頼性の高さが―

00:15:37.971 --> 00:15:41.308 align:start position:25% line:-1
その商品の根幹になるからです

00:15:41.975 --> 00:15:46.180 align:start position:34% line:-2
そしてテストで
さらに重要なのは―

00:15:46.280 --> 00:15:51.285 align:start position:32% line:-2
皆さんの商品の質を
高めるということです

00:15:51.385 --> 00:15:55.989 align:start position:34% line:-2
それが顧客の満足に
つながり―

00:15:56.089 --> 00:15:59.126 align:start position:27% line:-1
皆さんの幸せにつながります

00:15:59.226 --> 00:16:03.831 align:start position:30% line:-2
顧客が信頼できる商品と
快適に暮らせることが

00:15:59.226 --> 00:16:03.831 align:start position:30% line:-2
顧客が信頼できる商品と
快適に暮らせることが

00:16:04.264 --> 00:16:06.833 align:start position:36% line:-1
私たちの望みです

00:16:09.636 --> 00:16:11.939 align:start position:34% line:-1
次はAPIの話です

00:16:12.639 --> 00:16:16.343 align:start position:27% line:-2
30年前はBSDソケットが
一般的でした

00:16:16.443 --> 00:16:18.879 align:start position:29% line:-1
当時にしては優れものです

00:16:18.979 --> 00:16:24.384 align:start position:32% line:-2
しかし30年前には
携帯端末はもちろん―

00:16:24.484 --> 00:16:28.288 align:start position:27% line:-2
ワイヤレス接続や
IPv6もありませんでした

00:16:29.289 --> 00:16:32.693 align:start position:32% line:-1
PCの複数台接続や―

00:16:32.793 --> 00:16:37.264 align:start position:27% line:-2
イーサネットのポートがある
PCも珍しかったのです

00:16:37.364 --> 00:16:43.637 align:start position:29% line:-2
いまや40億人もの人々が
電源管理を行いつつ

00:16:43.737 --> 00:16:48.375 align:start position:25% line:-2
IPv6対応のモバイル端末を
持ち歩く時代です

00:16:48.475 --> 00:16:50.878 align:start position:30% line:-1
世界は複雑化しています

00:16:52.045 --> 00:16:57.384 align:start position:29% line:-2
ソケット通信のサービスを
お使いの方もいれば―

00:16:57.684 --> 00:17:01.155 align:start position:29% line:-2
URLSessionを
お使いの方もいるでしょう

00:16:57.684 --> 00:17:01.155 align:start position:29% line:-2
URLSessionを
お使いの方もいるでしょう

00:17:01.255 --> 00:17:06.960 align:start position:18% line:-2
URLSessionはソケット通信と
大差ないと思いますか？

00:17:07.928 --> 00:17:10.097 align:start position:36% line:-1
それは間違いです

00:17:10.830 --> 00:17:15.502 align:start position:20% line:-2
URLSessionはAppleの
ユーザ空間を使って―

00:17:15.602 --> 00:17:18.204 align:start position:36% line:-1
設計されています

00:17:18.305 --> 00:17:21.040 align:start position:32% line:-1
iOS 12からは―

00:17:21.141 --> 00:17:25.212 align:start position:27% line:-2
URLSessionと同じ
APIが使用されます

00:17:25.311 --> 00:17:29.449 align:start position:30% line:-2
お持ちの
アプリケーションから―

00:17:29.550 --> 00:17:33.387 align:start position:32% line:-2
TCP接続などのため
直接使用可能です

00:17:33.487 --> 00:17:38.926 align:start position:18% line:-2
URLやGETメソッドを使ってる方は
ご検討ください

00:17:39.026 --> 00:17:44.531 align:start position:25% line:-2
URLSession非対応の
アプリケーション用に―

00:17:44.631 --> 00:17:47.234 align:start position:36% line:-2
フレームワークも
公開しています

00:17:47.868 --> 00:17:51.305 align:start position:27% line:-2
BSDソケットで設計された
ライブラリを―

00:17:51.405 --> 00:17:55.375 align:start position:34% line:-2
開発されている方も
いるでしょう

00:17:55.475 --> 00:17:59.479 align:start position:11% line:-2
その場合はNetwork.framework
APIを使ってください

00:17:59.580 --> 00:18:04.751 align:start position:30% line:-2
ライブラリを高性能な
APIに移行いただき―

00:17:59.580 --> 00:18:04.751 align:start position:30% line:-2
ライブラリを高性能な
APIに移行いただき―

00:18:04.852 --> 00:18:08.288 align:start position:32% line:-2
ぜひフィードバックを
お寄せください

00:18:08.856 --> 00:18:13.927 align:start position:29% line:-2
2018年は
BSDソケットの利用を―

00:18:14.027 --> 00:18:18.532 align:start position:34% line:-2
やめることを
強くおすすめします

00:18:18.632 --> 00:18:23.604 align:start position:32% line:-2
BSDソケット系統の
ライブラリも同様です

00:18:23.704 --> 00:18:30.611 align:start position:23% line:-2
そして古いAPIをお使いの方も
切り替えをご検討ください

00:18:30.844 --> 00:18:35.449 align:start position:30% line:-2
今日の午後もしくは明日
我々のラボで―

00:18:35.549 --> 00:18:39.453 align:start position:25% line:-2
移行に関するフィードバックを
お待ちしています

00:18:39.987 --> 00:18:42.923 align:start position:32% line:-1
次は同僚のジテンが―

00:18:43.023 --> 00:18:46.994 align:start position:25% line:-2
URLSessionの詳細を
ご説明します

00:18:47.094 --> 00:18:52.366 align:start position:43% line:-1
(拍手)

00:18:52.466 --> 00:18:53.567 align:start position:41% line:-1
ありがとう

00:18:54.201 --> 00:18:55.602 align:start position:34% line:-1
おはようございます

00:18:55.702 --> 00:18:59.673 align:start position:23% line:-2
CFNetworkのエンジニア
ジテンです

00:19:00.174 --> 00:19:04.478 align:start position:27% line:-2
今日は皆さんに最適な
ネットワークをご紹介します

00:19:05.312 --> 00:19:08.782 align:start position:29% line:-2
アプリケーションに
ネットワークは不可欠です

00:19:09.283 --> 00:19:13.253 align:start position:29% line:-2
新たな開発に
尽力されている皆さんに―

00:19:13.353 --> 00:19:17.824 align:start position:32% line:-2
ネットワークの詳細を
簡単にお話しします

00:19:17.925 --> 00:19:20.494 align:start position:32% line:-1
きっと役立つはずです

00:19:23.063 --> 00:19:28.435 align:start position:29% line:-2
これから 待機時間の削減
処理量や反応性の向上

00:19:28.669 --> 00:19:32.706 align:start position:34% line:-2
システムリソースの
有効活用といった―

00:19:33.006 --> 00:19:35.742 align:start position:27% line:-1
４つの項目について話します

00:19:36.743 --> 00:19:41.949 align:start position:20% line:-2
その前に簡単に
URLSessionのおさらいです

00:19:45.485 --> 00:19:50.557 align:start position:16% line:-2
URLSessionはApple推奨の
高性能APIで―

00:19:50.657 --> 00:19:53.427 align:start position:23% line:-2
Appleのプラットフォームで
利用可能です

00:19:54.394 --> 00:19:58.799 align:start position:32% line:-2
第一推奨の利用環境は
HTTP/2と―

00:19:59.066 --> 00:20:01.235 align:start position:32% line:-1
HTTP/1.1です

00:19:59.066 --> 00:20:01.235 align:start position:32% line:-1
HTTP/1.1です

00:20:02.336 --> 00:20:05.606 align:start position:29% line:-2
アプリケーションが
HTTP非対応の場合は―

00:20:05.706 --> 00:20:08.041 align:start position:7% line:-1
URLSessionStreamTaskをどうぞ

00:20:08.308 --> 00:20:13.146 align:start position:32% line:-2
そうすれば
任意のプロトコルで―

00:20:13.247 --> 00:20:16.316 align:start position:27% line:-2
サーバへの
TCP接続が可能になります

00:20:17.484 --> 00:20:19.086 align:start position:34% line:-1
おさらいは以上です

00:20:19.620 --> 00:20:24.358 align:start position:30% line:-2
では 待機時間の削減の
トピックに移りましょう

00:20:25.292 --> 00:20:29.463 align:start position:34% line:-2
あなたは友人と
レストランを訪れ―

00:20:29.563 --> 00:20:32.232 align:start position:29% line:-1
店員に水を頼んだとします

00:20:32.666 --> 00:20:36.670 align:start position:29% line:-2
店員があなたに
水を持ってきたところで―

00:20:36.937 --> 00:20:39.973 align:start position:32% line:-1
友人も水を頼みました

00:20:40.073 --> 00:20:44.444 align:start position:29% line:-2
店員は再び歩きさり
友人に水を持ってきました

00:20:44.545 --> 00:20:47.681 align:start position:36% line:-2
店員が水を一度に
持ってくれば―

00:20:47.781 --> 00:20:49.950 align:start position:29% line:-1
往復時間が省けるはずです

00:20:50.751 --> 00:20:52.953 align:start position:32% line:-1
リソース取得までの―

00:20:53.453 --> 00:20:57.024 align:start position:30% line:-2
往復時間を減らす場合も
考え方は同様です

00:20:57.658 --> 00:20:59.626 align:start position:27% line:-1
アプリケーションの動きは？

00:21:02.095 --> 00:21:05.899 align:start position:32% line:-2
このプロトコルは
HTTP/1.1です

00:21:06.867 --> 00:21:08.769 align:start position:29% line:-1
リソースを取得するため―

00:21:09.336 --> 00:21:13.640 align:start position:30% line:-2
URLSessionで
タスクを開始します

00:21:14.141 --> 00:21:17.578 align:start position:32% line:-2
するとDNSやTCP
TLSを含んだ―

00:21:17.678 --> 00:21:21.615 align:start position:29% line:-1
新たな接続が作成されます

00:21:22.616 --> 00:21:27.154 align:start position:34% line:-2
サーバに接続したら
リクエストを送り―

00:21:28.455 --> 00:21:31.959 align:start position:27% line:-1
サーバからの応答を待ちます

00:21:32.593 --> 00:21:38.899 align:start position:27% line:-2
この間 アプリケーションに
待機時間が発生するのです

00:21:40.567 --> 00:21:44.004 align:start position:36% line:-2
応答が得られたら
終了ブロックか―

00:21:44.104 --> 00:21:47.875 align:start position:32% line:-2
デリゲートで
ロードを終了させます

00:21:49.309 --> 00:21:54.314 align:start position:29% line:-2
ロード中に別のリソースを
取得することも可能です

00:21:55.449 --> 00:22:00.554 align:start position:21% line:-2
その場合はURLSessionで
別のタスクを作成し―

00:21:55.449 --> 00:22:00.554 align:start position:21% line:-2
その場合はURLSessionで
別のタスクを作成し―

00:22:00.654 --> 00:22:03.590 align:start position:30% line:-2
接続プールに
ムダな接続がない状態で

00:22:03.690 --> 00:22:07.127 align:start position:32% line:-2
リソース取得のために
新たに接続します

00:22:08.128 --> 00:22:13.634 align:start position:29% line:-2
さらに他のリソースを
取得したい場合も同様に―

00:22:13.734 --> 00:22:18.272 align:start position:30% line:-2
URLSessionで
別のタスクを作成します

00:22:19.406 --> 00:22:22.142 align:start position:30% line:-1
ここでは同じサーバから

00:22:22.242 --> 00:22:26.647 align:start position:23% line:-2
３つの接続で
異なるリソースを取得しています

00:22:27.714 --> 00:22:31.518 align:start position:32% line:-2
初回の接続には
時間を要しましたが―

00:22:32.486 --> 00:22:36.457 align:start position:30% line:-2
これが単一接続だったら
どうでしょう

00:22:38.659 --> 00:22:40.761 align:start position:34% line:-1
単一接続の場合です

00:22:40.928 --> 00:22:45.866 align:start position:27% line:-2
初回の接続時間は短いですが
別の問題があります

00:22:46.567 --> 00:22:49.536 align:start position:29% line:-1
２つ目の緑色のタスクは―

00:22:49.636 --> 00:22:53.574 align:start position:30% line:-2
最初のタスクの完了まで
待機が必要です

00:22:54.141 --> 00:22:56.844 align:start position:30% line:-2
３つ目の
オレンジ色のタスクも―

00:22:56.944 --> 00:23:02.649 align:start position:27% line:-2
２つ目のタスクが終わるまで
待機が必要です

00:22:56.944 --> 00:23:02.649 align:start position:27% line:-2
２つ目のタスクが終わるまで
待機が必要です

00:23:03.750 --> 00:23:07.221 align:start position:30% line:-2
これがヘッドオブ
ラインブロッキングです

00:23:08.355 --> 00:23:14.361 align:start position:27% line:-2
実は新規格のHTTP/2も
単一接続を行いますが―

00:23:14.461 --> 00:23:18.265 align:start position:30% line:-2
この問題への
回避策が備わっています

00:23:19.299 --> 00:23:24.571 align:start position:25% line:-2
HTTP/2は１つの接続上で
ストリームを多重化し―

00:23:24.671 --> 00:23:29.543 align:start position:32% line:-2
複数の送受信を
並列的に行えるのです

00:23:31.078 --> 00:23:34.915 align:start position:20% line:-2
HTTP/2がHTTP/1.1より
優れていることを―

00:23:35.015 --> 00:23:37.684 align:start position:30% line:-1
例を見て分析しましょう

00:23:39.653 --> 00:23:43.724 align:start position:36% line:-2
複数のリソースを
取得するまでの―

00:23:43.824 --> 00:23:46.427 align:start position:27% line:-1
所要時間に注目してください

00:23:47.094 --> 00:23:51.432 align:start position:32% line:-2
HTTP/1.1では
明らかな遅延が

00:23:51.532 --> 00:23:56.537 align:start position:25% line:-2
リソース取得のリクエストが
送られるまでに発生しています

00:23:57.571 --> 00:24:01.275 align:start position:30% line:-1
一方のHTTP/2は―

00:23:57.571 --> 00:24:01.275 align:start position:30% line:-1
一方のHTTP/2は―

00:24:01.375 --> 00:24:04.511 align:start position:30% line:-1
遅れが少なく 迅速に―

00:24:04.611 --> 00:24:07.181 align:start position:27% line:-1
リクエストが送られています

00:24:10.250 --> 00:24:13.020 align:start position:36% line:-2
グレーの部分にも
注目してください

00:24:13.387 --> 00:24:16.256 align:start position:29% line:-1
先ほどお話ししたとおり―

00:24:16.356 --> 00:24:21.228 align:start position:27% line:-2
サーバからの応答を待つ
待機時間が生じてしまいます

00:24:22.930 --> 00:24:27.134 align:start position:29% line:-2
HTTP/2では
この待機時間が削減され―

00:24:27.234 --> 00:24:32.906 align:start position:23% line:-2
バンド幅を有効に使い
迅速なロードが可能になるのです

00:24:35.742 --> 00:24:40.547 align:start position:20% line:-2
HTTP/2がHTTP/1.1より
優れている点を―

00:24:40.647 --> 00:24:42.382 align:start position:32% line:-1
簡単におさらいします

00:24:43.150 --> 00:24:47.387 align:start position:23% line:-2
HTTP/2はヘッドオブライン
ブロッキングを解消し―

00:24:47.654 --> 00:24:51.258 align:start position:27% line:-1
バンド幅を有効利用できます

00:24:52.192 --> 00:24:57.331 align:start position:25% line:-2
すでにURLSessionを
お使いの方は―

00:24:57.931 --> 00:25:02.703 align:start position:21% line:-2
そのままの状態で
HTTP/2の恩恵を受けられます

00:24:57.931 --> 00:25:02.703 align:start position:21% line:-2
そのままの状態で
HTTP/2の恩恵を受けられます

00:25:04.037 --> 00:25:08.308 align:start position:29% line:-2
HTTP/2はサーバへの
接続回数も少ないので―

00:25:08.408 --> 00:25:13.814 align:start position:29% line:-2
サーバ側の負担が軽く済む
メリットもあります

00:25:15.115 --> 00:25:18.519 align:start position:21% line:-1
今年からURLSessionに―

00:25:18.619 --> 00:25:22.089 align:start position:27% line:-2
HTTP/2の強みを生かす
技術が加わります

00:25:24.157 --> 00:25:26.960 align:start position:20% line:-2
HTTP/2 Connection
Coalescingについて―

00:25:27.060 --> 00:25:28.695 align:start position:39% line:-1
ご紹介します

00:25:30.030 --> 00:25:31.999 align:start position:32% line:-1
この技術のおかげで―

00:25:32.099 --> 00:25:35.502 align:start position:36% line:-2
より強力な接続が
可能になります

00:25:36.803 --> 00:25:41.542 align:start position:27% line:-2
毎回 接続をオープンにする
やり取りが不要なため―

00:25:41.642 --> 00:25:44.878 align:start position:27% line:-1
さらに反応が速くなるのです

00:25:45.913 --> 00:25:47.881 align:start position:0% line:-1
HTTP/2 Connection Coalescingは

00:25:48.949 --> 00:25:52.653 align:start position:23% line:-2
URLSessionに対応した
アプリケーションでは

00:25:52.753 --> 00:25:55.422 align:start position:36% line:-1
自動適用されます

00:25:56.557 --> 00:26:00.727 align:start position:34% line:-2
接続の再利用方法を
見てみましょう

00:25:56.557 --> 00:26:00.727 align:start position:34% line:-2
接続の再利用方法を
見てみましょう

00:26:03.497 --> 00:26:04.998 align:start position:32% line:-1
アプリケーションが―

00:26:05.365 --> 00:26:10.204 align:start position:36% line:-2
リソースの取得を
要求したとします

00:26:10.704 --> 00:26:15.275 align:start position:30% line:-2
サーバへ接続をすると
証明書が発行されました

00:26:16.043 --> 00:26:20.514 align:start position:32% line:-2
さらに他のリソースを
取得する場合は―

00:26:20.614 --> 00:26:24.551 align:start position:27% line:-2
別の接続をオープンにし
新たな証明書が発行されます

00:26:25.419 --> 00:26:28.589 align:start position:29% line:-2
これは従来の
URLSessionで―

00:26:28.689 --> 00:26:33.594 align:start position:29% line:-2
複数のリソースを取得する
手順と同じです

00:26:34.828 --> 00:26:39.700 align:start position:30% line:-2
しかし よく見ると
最初の証明書によって―

00:26:39.800 --> 00:26:43.504 align:start position:30% line:-2
すべてのサブドメインが
網羅されています

00:26:44.004 --> 00:26:46.707 align:start position:12% line:-1
delivery.example.comに

00:26:46.807 --> 00:26:49.376 align:start position:32% line:-2
最初の証明書が
適用されているのです

00:26:50.277 --> 00:26:53.413 align:start position:30% line:-2
さらに最初の接続と同じ
IPアドレスで―

00:26:53.514 --> 00:26:57.217 align:start position:32% line:-2
処理されていることも
分かります

00:26:58.385 --> 00:27:00.687 align:start position:30% line:-1
同一のエンドポイントが

00:26:58.385 --> 00:27:00.687 align:start position:30% line:-1
同一のエンドポイントが

00:27:00.787 --> 00:27:04.558 align:start position:29% line:-2
接続を再利用しているので
安全です

00:27:04.658 --> 00:27:08.729 align:start position:30% line:-2
新たな接続のオープンが
不要なため―

00:27:09.062 --> 00:27:13.734 align:start position:30% line:-2
待機時間が
大幅に短縮されるのです

00:27:15.269 --> 00:27:19.006 align:start position:20% line:-2
HTTP/2 Connection
Coalescingは―

00:27:19.106 --> 00:27:22.643 align:start position:14% line:-2
iOS 12とmacOS Mojaveに
搭載されています

00:27:23.677 --> 00:27:28.081 align:start position:30% line:-2
URLSessionの
オブジェクトによる―

00:27:28.182 --> 00:27:30.184 align:start position:32% line:-1
処理速度を見てみます

00:27:32.920 --> 00:27:38.225 align:start position:29% line:-2
先ほどご紹介した
接続の恩恵を受けるには―

00:27:38.458 --> 00:27:44.665 align:start position:27% line:-2
同じURLSessionを
利用する必要があります

00:27:47.267 --> 00:27:52.673 align:start position:30% line:-2
URLSessionは
接続プールが可能なので

00:27:52.773 --> 00:27:58.278 align:start position:25% line:-2
オブジェクトを複数作成すると
メリットは感じられません

00:27:59.046 --> 00:28:02.549 align:start position:29% line:-2
また自明でない
メモリフットプリントを―

00:27:59.046 --> 00:28:02.549 align:start position:29% line:-2
また自明でない
メモリフットプリントを―

00:28:02.649 --> 00:28:07.087 align:start position:21% line:-2
URLSessionで作成すると
コストがかかります

00:28:07.988 --> 00:28:11.058 align:start position:23% line:-2
そのためURLSessionの
オブジェクトは―

00:28:11.158 --> 00:28:13.827 align:start position:30% line:-1
少ないほうが良いのです

00:28:15.729 --> 00:28:20.100 align:start position:29% line:-2
次は処理量の向上について
お話しします

00:28:21.668 --> 00:28:23.504 align:start position:38% line:-1
レストランで―

00:28:23.937 --> 00:28:25.739 align:start position:32% line:-1
こう注文したとします

00:28:25.839 --> 00:28:29.276 align:start position:30% line:-2
“グリルチキンと
トマトとタマネギに―”

00:28:29.376 --> 00:28:32.946 align:start position:34% line:-2
“バターたっぷりの
ソースを添えて”

00:28:33.881 --> 00:28:35.516 align:start position:36% line:-1
言いにくいですね

00:28:35.616 --> 00:28:38.886 align:start position:34% line:-2
“バターチキン”と
注文すれば十分です

00:28:39.920 --> 00:28:43.857 align:start position:32% line:-2
リソース取得時の
送信バイトを減らし―

00:28:43.957 --> 00:28:47.194 align:start position:30% line:-2
処理量を
向上させるのも同様です

00:28:47.294 --> 00:28:49.396 align:start position:34% line:-1
実際にお見せします

00:28:51.598 --> 00:28:54.968 align:start position:32% line:-2
リクエストのサイズを
減らす方法です

00:28:56.270 --> 00:28:59.039 align:start position:29% line:-2
HTTP cookieに
注目してください

00:28:59.139 --> 00:29:04.278 align:start position:29% line:-2
cookieは すべての
リクエストにおいて―

00:28:59.139 --> 00:29:04.278 align:start position:29% line:-2
cookieは すべての
リクエストにおいて―

00:29:05.179 --> 00:29:10.350 align:start position:32% line:-2
ドメインとパス属性で
ひも付けられています

00:29:10.450 --> 00:29:13.020 align:start position:27% line:-1
サイズが膨大になる原因です

00:29:13.921 --> 00:29:17.791 align:start position:32% line:-2
ドメインとパス属性を
効果的に使えば―

00:29:17.891 --> 00:29:21.628 align:start position:27% line:-2
cookieとリクエストが
適切に照合されます

00:29:22.463 --> 00:29:26.934 align:start position:29% line:-2
小さいcookieを使い
適宜 削除すれば―

00:29:28.168 --> 00:29:33.574 align:start position:20% line:-2
クライアント側のcookieの数を
減らすことができます

00:29:34.775 --> 00:29:39.713 align:start position:29% line:-2
HTTP/2に移行すれば
ヘッダ圧縮も可能です

00:29:40.981 --> 00:29:43.684 align:start position:36% line:-2
圧縮について
詳しく説明します

00:29:45.986 --> 00:29:49.790 align:start position:30% line:-2
HTTP圧縮はサーバと
クライアント間で―

00:29:50.424 --> 00:29:55.696 align:start position:36% line:-2
行き交うデータを
圧縮する手法です

00:29:56.063 --> 00:29:58.899 align:start position:34% line:-2
これにより
情報量が増加します

00:29:59.700 --> 00:30:02.135 align:start position:27% line:-1
URLSessionでは―

00:29:59.700 --> 00:30:02.135 align:start position:27% line:-1
URLSessionでは―

00:30:02.236 --> 00:30:06.306 align:start position:29% line:-2
GzipとBrotliを
推奨しています

00:30:07.207 --> 00:30:11.345 align:start position:30% line:-2
Gzipは汎用性が高く
処理速度も速いです

00:30:11.912 --> 00:30:14.214 align:start position:18% line:-1
Brotliは昨年 iOS 11と―

00:30:14.314 --> 00:30:17.785 align:start position:18% line:-2
macOS High Sierraで
導入されました

00:30:18.619 --> 00:30:22.589 align:start position:36% line:-2
構造化テキストや
HTMLなどの―

00:30:22.723 --> 00:30:26.427 align:start position:30% line:-2
小さなデータの圧縮に
Brotliは最適です

00:30:27.661 --> 00:30:31.932 align:start position:32% line:-2
ぜひ この圧縮方法を
サーバに適用ください

00:30:33.300 --> 00:30:35.836 align:start position:30% line:-1
次にご紹介する項目は―

00:30:36.370 --> 00:30:38.472 align:start position:29% line:-1
反応性の向上についてです

00:30:39.173 --> 00:30:41.308 align:start position:29% line:-1
再びレストランに戻ります

00:30:41.808 --> 00:30:46.046 align:start position:30% line:-2
あなたはWWDCで
旧友と再会する予定です

00:30:46.980 --> 00:30:49.583 align:start position:36% line:-2
２人はテーブルに
座っていて―

00:30:49.683 --> 00:30:52.486 align:start position:32% line:-2
ドリンクは
すでに手元にあります

00:30:52.586 --> 00:30:55.656 align:start position:32% line:-2
食事前に旧友と
近況報告をするため―

00:30:56.089 --> 00:30:57.925 align:start position:30% line:-1
あなたは店員に言います

00:30:58.025 --> 00:31:01.728 align:start position:30% line:-2
“食事はゆっくり
出してもらえますか？”

00:30:58.025 --> 00:31:01.728 align:start position:30% line:-2
“食事はゆっくり
出してもらえますか？”

00:31:02.196 --> 00:31:04.598 align:start position:32% line:-1
別タスクの実行中に―

00:31:04.698 --> 00:31:09.570 align:start position:29% line:-2
特定のタスクを
優先させる場合も同様です

00:31:10.104 --> 00:31:12.439 align:start position:32% line:-1
実際に見てみましょう

00:31:15.609 --> 00:31:19.413 align:start position:27% line:-2
５つのQoSと
NSOperationが―

00:31:19.513 --> 00:31:23.050 align:start position:34% line:-2
関連しているのは
ご存じだと思います

00:31:23.617 --> 00:31:26.520 align:start position:27% line:-2
スケジューリングポリシーに
沿っています

00:31:27.521 --> 00:31:31.758 align:start position:29% line:-2
URLSessionは
“QoS-aware”で

00:31:31.859 --> 00:31:36.463 align:start position:18% line:-2
task.resumeを呼ぶキューで
QoSをキャプチャします

00:31:37.064 --> 00:31:42.002 align:start position:32% line:-2
送られるメッセージは
QoSを優先します

00:31:43.237 --> 00:31:44.638 align:start position:38% line:-1
例を見ましょう

00:31:45.272 --> 00:31:49.143 align:start position:34% line:-2
緊急でないデータを
取得する場合―

00:31:49.309 --> 00:31:53.947 align:start position:34% line:-2
バックグラウンドの
QoSが働きます

00:31:54.047 --> 00:31:57.351 align:start position:32% line:-2
優先度の高いタスクを
妨げないように―

00:31:57.451 --> 00:32:00.954 align:start position:32% line:-1
処理してくれるのです

00:31:57.451 --> 00:32:00.954 align:start position:32% line:-1
処理してくれるのです

00:32:04.158 --> 00:32:09.797 align:start position:30% line:-2
URLSessionの
オブジェクトによって―

00:32:10.164 --> 00:32:13.700 align:start position:27% line:-2
ネットワークトラフィックが
分類され

00:32:14.268 --> 00:32:18.272 align:start position:34% line:-2
タスクに優先順位が
つけられるのです

00:32:19.540 --> 00:32:23.777 align:start position:20% line:-2
“responsiveData”を
今年から導入します

00:32:24.578 --> 00:32:30.818 align:start position:18% line:-2
defaultTypeより高度なので
上手に活用しましょう

00:32:31.452 --> 00:32:34.521 align:start position:23% line:-1
responsiveDataは

00:32:34.822 --> 00:32:39.093 align:start position:27% line:-2
通販サイトで清算する時にも
便利です

00:32:39.526 --> 00:32:42.029 align:start position:30% line:-1
支払い請求書の情報を―

00:32:42.129 --> 00:32:46.733 align:start position:29% line:-2
すぐにサーバから
呼び出す時などに便利です

00:32:48.368 --> 00:32:52.940 align:start position:25% line:-2
Ciscoのファストレーンを
使うことで―

00:32:53.040 --> 00:32:57.377 align:start position:32% line:-2
記録されたタグを
いつでも呼び出せます

00:32:58.045 --> 00:33:00.347 align:start position:32% line:-1
このAPIの詳細は―

00:32:58.045 --> 00:33:00.347 align:start position:32% line:-1
このAPIの詳細は―

00:33:00.447 --> 00:33:04.952 align:start position:20% line:-2
2016年のWWDCのセッションで
ご確認ください

00:33:08.055 --> 00:33:13.126 align:start position:18% line:-2
昨年 URLSessionのAPIで
導入したのが―

00:33:13.327 --> 00:33:14.995 align:start position:11% line:-1
waitsForConnectivityです

00:33:15.963 --> 00:33:19.099 align:start position:36% line:-2
タスクの実行中に
接続が切れても―

00:33:19.199 --> 00:33:23.871 align:start position:27% line:-1
タスクを待機させてくれます

00:33:24.605 --> 00:33:27.908 align:start position:34% line:-2
従来 リクエストの
事前チェックには―

00:33:28.008 --> 00:33:31.011 align:start position:11% line:-2
STNetworkReachabilityが
主流でした

00:33:31.111 --> 00:33:35.082 align:start position:32% line:-2
しかしスチュアートが
指摘したとおり

00:33:35.182 --> 00:33:38.685 align:start position:30% line:-2
サーバの接続中に
タスクが競合しがちです

00:33:38.786 --> 00:33:41.255 align:start position:36% line:-2
いざリクエストを
実行すると―

00:33:41.355 --> 00:33:44.291 align:start position:32% line:-2
接続が切れてることも
あります

00:33:45.826 --> 00:33:48.829 align:start position:20% line:-2
waitsFor
Connectivityを使えば―

00:33:48.929 --> 00:33:53.000 align:start position:29% line:-2
有効なサーバに
すぐリクエストを送れます

00:33:53.967 --> 00:33:59.173 align:start position:16% line:-2
また taskIsWaitingFor
Connectivityのメソッドを

00:33:59.273 --> 00:34:02.342 align:start position:36% line:-2
接続がない状態で
呼び出せます

00:33:59.273 --> 00:34:02.342 align:start position:36% line:-2
接続がない状態で
呼び出せます

00:34:03.243 --> 00:34:06.547 align:start position:34% line:-2
このためユーザは
違う操作をしたり―

00:34:06.647 --> 00:34:10.484 align:start position:34% line:-2
UIをオフラインに
することができます

00:34:11.652 --> 00:34:13.719 align:start position:32% line:-1
このAPIの詳細は―

00:34:13.821 --> 00:34:18.859 align:start position:30% line:-2
昨年のWWDCの内容を
ご参照ください

00:34:20.661 --> 00:34:22.963 align:start position:38% line:-1
最後の項目は―

00:34:23.063 --> 00:34:25.998 align:start position:34% line:-2
システムリソースの
有効活用です

00:34:26.600 --> 00:34:28.601 align:start position:30% line:-1
再びレストランの例です

00:34:29.803 --> 00:34:34.274 align:start position:30% line:-2
あなたは料理が気に入り
明日も来たくなりました

00:34:35.007 --> 00:34:39.246 align:start position:29% line:-2
しかし このレストランは
宅配も行っており―

00:34:39.346 --> 00:34:42.649 align:start position:32% line:-2
注文した翌日に
料理を届けてくれます

00:34:42.750 --> 00:34:47.286 align:start position:30% line:-2
顧客の時間と労力が
宅配によって節約され―

00:34:47.387 --> 00:34:51.891 align:start position:30% line:-2
店側も仕事の優先順位が
つけられます

00:34:52.492 --> 00:34:57.764 align:start position:30% line:-2
システムリソースの
有効活用も同じ考えです

00:35:00.400 --> 00:35:01.602 align:start position:32% line:-1
バックグラウンドで―

00:35:01.702 --> 00:35:03.871 align:start position:32% line:-2
アップロードと
ダウンロードをします

00:35:04.405 --> 00:35:06.974 align:start position:29% line:-1
システムが状況に応じて―

00:35:07.074 --> 00:35:10.878 align:start position:34% line:-2
ロードの中断や
再開をしてくれます

00:35:10.978 --> 00:35:16.049 align:start position:23% line:-2
バッテリーやCPU
Wi-Fi環境で判断するのです

00:35:17.951 --> 00:35:20.420 align:start position:36% line:-2
バックグラウンド
セッションは―

00:35:20.521 --> 00:35:22.756 align:start position:30% line:-1
大容量データに有効です

00:35:23.724 --> 00:35:27.394 align:start position:32% line:-2
これらのタスクは
プロセス外で実行され

00:35:27.494 --> 00:35:32.199 align:start position:27% line:-2
アプリケーションが停止中も
ダウンロードが続きます

00:35:33.333 --> 00:35:35.502 align:start position:32% line:-1
本件に関する詳細は―

00:35:35.602 --> 00:35:39.540 align:start position:29% line:-2
2014年のセッションを
ご参照ください

00:35:42.776 --> 00:35:45.612 align:start position:30% line:-2
キャッシュで待機時間は
削減されます

00:35:46.213 --> 00:35:50.551 align:start position:27% line:-2
しかしディスクI/Oでしか
効果を発揮できません

00:35:51.351 --> 00:35:57.124 align:start position:25% line:-2
現実世界のアプリケーションは
日々 大容量のデータを扱い

00:35:57.224 --> 00:36:00.027 align:start position:30% line:-2
フラッシュストレージが
劣化します

00:35:57.224 --> 00:36:00.027 align:start position:30% line:-2
フラッシュストレージが
劣化します

00:36:01.128 --> 00:36:05.599 align:start position:27% line:-2
固有のコンテンツに
キャッシュは不向きなのです

00:36:06.033 --> 00:36:09.269 align:start position:32% line:-2
あなたが
マッチングアプリの―

00:36:09.436 --> 00:36:12.105 align:start position:32% line:-2
ネットワークコードの
責任者だとします

00:36:13.040 --> 00:36:17.878 align:start position:30% line:-2
ユーザのプロフィールを
高画質でロードします

00:36:18.479 --> 00:36:22.216 align:start position:34% line:-2
この高画質な画像の
読み込みに―

00:36:22.316 --> 00:36:26.119 align:start position:30% line:-2
キャッシュを用いるのは
ムダです

00:36:26.219 --> 00:36:28.689 align:start position:32% line:-2
ユーザは
いろんな人の画像を―

00:36:28.789 --> 00:36:31.358 align:start position:27% line:-1
次々と閲覧していくからです

00:36:32.392 --> 00:36:36.763 align:start position:18% line:-2
willCacheResponseを
実装すれば―

00:36:36.864 --> 00:36:40.701 align:start position:29% line:-2
キャッシュするリソースを
判断してくれます

00:36:41.869 --> 00:36:46.106 align:start position:20% line:-2
自身のサーバをお持ちなら
Cache-Controlヘッダを

00:36:46.206 --> 00:36:49.243 align:start position:32% line:-1
ぜひ お試しください

00:36:51.879 --> 00:36:54.882 align:start position:36% line:-2
今日のポイントを
おさらいします

00:36:55.349 --> 00:36:59.153 align:start position:30% line:-2
レストランでは
一度に全部の注文をする

00:36:59.820 --> 00:37:01.488 align:start position:38% line:-1
今のは冗談です

00:36:59.820 --> 00:37:01.488 align:start position:38% line:-1
今のは冗談です

00:37:01.588 --> 00:37:04.458 align:start position:32% line:-2
HTTP/2は
ヘッダを圧縮したり―

00:37:04.558 --> 00:37:08.395 align:start position:27% line:-2
ヘッドオブライン
ブロッキングを解消できます

00:37:10.030 --> 00:37:13.567 align:start position:29% line:-2
URLSessionの
オブジェクトを減らせば―

00:37:13.667 --> 00:37:15.669 align:start position:32% line:-1
待機時間を減らせます

00:37:15.769 --> 00:37:20.941 align:start position:25% line:-2
メモリフットプリントも削減し
リソースの活用がより効率的に

00:37:22.576 --> 00:37:26.179 align:start position:29% line:-2
リクエストのサイズ削減で
処理速度を最大にします

00:37:27.614 --> 00:37:32.085 align:start position:27% line:-2
QoSでアプリケーションの
反応性も向上します

00:37:32.186 --> 00:37:35.756 align:start position:34% line:-2
システムリソースの
有効活用の鍵は―

00:37:35.856 --> 00:37:38.492 align:start position:23% line:-1
バックグラウンドセッションです

00:37:39.860 --> 00:37:43.364 align:start position:27% line:-2
詳しい情報は
ウェブサイトをご覧ください

00:37:43.697 --> 00:37:46.533 align:start position:29% line:-1
少し休憩をはさんだ後に―

00:37:46.633 --> 00:37:51.138 align:start position:21% line:-2
ソケットの代わりとなる
新たなフレームワークを紹介します

00:37:51.238 --> 00:37:56.276 align:start position:30% line:-2
我々のラボにも
ぜひお立ち寄りください

00:37:57.511 --> 00:38:01.248 align:start position:34% line:-2
皆さんの
ご参加に感謝します

00:37:57.511 --> 00:38:01.248 align:start position:34% line:-2
皆さんの
ご参加に感謝します

00:38:01.348 --> 00:38:04.284 align:start position:43% line:-1
(拍手)
