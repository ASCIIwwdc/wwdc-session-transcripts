WEBVTT

00:00:07.074 --> 00:00:15.315 align:start position:43% line:-1
(音楽)

00:00:22.122 --> 00:00:31.031 align:start position:43% line:-1
(拍手)

00:00:31.265 --> 00:00:32.698 align:start position:43% line:-1
ようこそ

00:00:33.300 --> 00:00:34.935 align:start position:39% line:-1
パヴェルです

00:00:35.035 --> 00:00:39.273 align:start position:29% line:-2
ClassKitについて
マリンと話します

00:00:40.774 --> 00:00:43.377 align:start position:34% line:-1
３部構成にしました

00:00:43.610 --> 00:00:47.347 align:start position:23% line:-1
ClassKitの概要説明では

00:00:47.714 --> 00:00:50.450 align:start position:30% line:-1
データの流れを話します

00:00:50.617 --> 00:00:54.521 align:start position:30% line:-2
続いて
クラスについて取り上げ

00:00:54.621 --> 00:00:57.791 align:start position:30% line:-1
面白い特徴を紹介します

00:00:58.192 --> 00:01:03.130 align:start position:27% line:-2
最後はアプリケーションへの
適用についてです

00:00:58.192 --> 00:01:03.130 align:start position:27% line:-2
最後はアプリケーションへの
適用についてです

00:01:03.797 --> 00:01:06.066 align:start position:34% line:-1
では 始めましょう

00:01:09.036 --> 00:01:12.973 align:start position:25% line:-2
ClassKitは教育向けの
フレームワークで

00:01:13.073 --> 00:01:15.609 align:start position:32% line:-1
学校等で活用されます

00:01:17.277 --> 00:01:21.815 align:start position:30% line:-2
例えば 教師が
アプリケーションを使い

00:01:21.915 --> 00:01:25.552 align:start position:23% line:-1
生徒に課題を出すことができます

00:01:26.653 --> 00:01:33.126 align:start position:27% line:-2
更に そうした課題の進捗を
管理することもできます

00:01:34.361 --> 00:01:36.663 align:start position:32% line:-1
個人情報は守られます

00:01:36.763 --> 00:01:38.966 align:start position:34% line:-1
具体的に説明します

00:01:39.700 --> 00:01:43.403 align:start position:34% line:-2
教師は課題の進捗を
確認できますが

00:01:43.504 --> 00:01:49.009 align:start position:27% line:-2
自ら出した課題の進捗以外は
見られない仕組みです

00:01:50.544 --> 00:01:53.647 align:start position:25% line:-1
ClassKitを導入すれば

00:01:53.747 --> 00:01:59.152 align:start position:29% line:-2
生徒の学習と教師の指導の
効率が一層増します

00:01:59.853 --> 00:02:04.958 align:start position:29% line:-2
アプリケーションで
課題を把握できるからです

00:01:59.853 --> 00:02:04.958 align:start position:29% line:-2
アプリケーションで
課題を把握できるからです

00:02:05.826 --> 00:02:11.765 align:start position:30% line:-2
教師にとっては生徒の
学習状況を見通せる上に

00:02:12.032 --> 00:02:15.435 align:start position:29% line:-1
個別指導も可能になります

00:02:15.802 --> 00:02:18.805 align:start position:29% line:-1
学習状況が正確に分かると

00:02:18.906 --> 00:02:23.377 align:start position:30% line:-2
必要な課題を
工夫して出せるでしょう

00:02:23.777 --> 00:02:26.947 align:start position:30% line:-2
デベロッパの皆さんにも
利点があります

00:02:27.047 --> 00:02:32.519 align:start position:30% line:-2
教師にとっては
自分の仕事に影響します

00:02:32.619 --> 00:02:36.990 align:start position:27% line:-2
皆さんのアプリケーションが
気に入れば

00:02:37.090 --> 00:02:40.060 align:start position:29% line:-1
学校中で勧めてもらえます

00:02:40.928 --> 00:02:46.033 align:start position:5% line:-2
類似の技術に
Apple School Managerがあります

00:02:46.400 --> 00:02:50.671 align:start position:21% line:-1
IT管理者はこのシステムを使って

00:02:51.004 --> 00:02:56.109 align:start position:25% line:-2
管理対象 Apple IDを
学校関係者に発行できます

00:02:56.543 --> 00:03:01.481 align:start position:29% line:-2
要は 教師と生徒の全員に
このIDが付与されます

00:02:56.543 --> 00:03:01.481 align:start position:29% line:-2
要は 教師と生徒の全員に
このIDが付与されます

00:03:01.949 --> 00:03:04.651 align:start position:29% line:-1
この他にも IT管理者は

00:03:04.751 --> 00:03:09.089 align:start position:27% line:-1
教科ごとにクラスを作れます

00:03:10.224 --> 00:03:13.594 align:start position:25% line:-2
そして
特定のIDを持つ教師と生徒を

00:03:13.760 --> 00:03:17.264 align:start position:27% line:-1
各クラスに割り当てられます

00:03:18.298 --> 00:03:22.569 align:start position:30% line:-2
コンテンツとデバイスも
管理できます

00:03:23.270 --> 00:03:27.407 align:start position:32% line:-2
デベロッパの利点と
先ほど言ったように―

00:03:28.442 --> 00:03:34.181 align:start position:27% line:-2
ClassKitと連動して
生徒の進捗が記録されます

00:03:36.817 --> 00:03:41.288 align:start position:23% line:-2
また 学校はアプリケーションを
一括購入できます

00:03:41.588 --> 00:03:45.192 align:start position:20% line:-1
ClassKitに対応している場合

00:03:45.292 --> 00:03:49.796 align:start position:27% line:-2
“スクールワークと連動”に
チェックマークが付きます

00:03:51.265 --> 00:03:55.836 align:start position:29% line:-2
スクールワークは
まもなくリリースされます

00:03:56.170 --> 00:04:01.875 align:start position:25% line:-2
このアプリケーションで
生徒はHandoutを確認し

00:03:56.170 --> 00:04:01.875 align:start position:25% line:-2
このアプリケーションで
生徒はHandoutを確認し

00:04:01.975 --> 00:04:05.345 align:start position:29% line:-1
教師は課題を作成できます

00:04:05.445 --> 00:04:08.182 align:start position:29% line:-2
システム内では課題を
Handoutと呼びます

00:04:09.049 --> 00:04:15.889 align:start position:20% line:-2
例えば コンテンツの１つが
Handout内のタスクになります

00:04:18.559 --> 00:04:23.597 align:start position:25% line:-2
教師は特定のHandoutを
確認すれば

00:04:23.697 --> 00:04:27.701 align:start position:29% line:-2
アプリケーション上で
生徒の進捗を把握できます

00:04:28.702 --> 00:04:32.539 align:start position:32% line:-2
Handoutの
流れを見てみましょう

00:04:33.473 --> 00:04:37.477 align:start position:27% line:-1
作成する前に準備が必要です

00:04:38.045 --> 00:04:43.584 align:start position:25% line:-2
課題としてアサインする内容を
決めておいてください

00:04:45.919 --> 00:04:53.026 align:start position:21% line:-2
本フレームワークではCLS準拠の
コンテキストを使用しており

00:04:53.126 --> 00:04:56.697 align:start position:21% line:-1
コンテンツをツリー構造で表せます

00:04:57.164 --> 00:05:00.667 align:start position:29% line:-2
アプリケーションに合わせ
再定義した―

00:04:57.164 --> 00:05:00.667 align:start position:29% line:-2
アプリケーションに合わせ
再定義した―

00:05:01.835 --> 00:05:04.404 align:start position:30% line:-2
App コンテキストが
用意されています

00:05:05.005 --> 00:05:10.210 align:start position:32% line:-2
コンテキストツリーの
ルートとなっています

00:05:10.677 --> 00:05:15.349 align:start position:32% line:-2
すべてのコンテンツが
ここから派生します

00:05:18.685 --> 00:05:23.757 align:start position:23% line:-2
コンテンツは
できるだけ早く定義してください

00:05:23.857 --> 00:05:28.262 align:start position:34% line:-2
コンテンツの定義が
速やかであるほど

00:05:28.362 --> 00:05:31.398 align:start position:29% line:-1
教師がすぐに利用できます

00:05:32.900 --> 00:05:35.369 align:start position:25% line:-1
コンテキストツリーができたら

00:05:35.636 --> 00:05:41.775 align:start position:27% line:-2
教師はスクールワーク上で
ボタンをタップするだけです

00:05:42.543 --> 00:05:45.712 align:start position:21% line:-1
Handoutを新規作成できます

00:05:46.446 --> 00:05:49.883 align:start position:27% line:-1
特定のコンテンツを指定して

00:05:50.484 --> 00:05:54.922 align:start position:30% line:-2
あとはHandoutを
生徒に送るだけです

00:05:55.489 --> 00:06:01.195 align:start position:20% line:-2
生徒がHandoutをタップすると
アプリケーションが起動します

00:05:55.489 --> 00:06:01.195 align:start position:20% line:-2
生徒がHandoutをタップすると
アプリケーションが起動します

00:06:01.495 --> 00:06:05.866 align:start position:21% line:-2
この時点で
必要なコンテキストが生成されます

00:06:06.400 --> 00:06:09.636 align:start position:27% line:-1
生徒たちが同じコンテンツを

00:06:09.736 --> 00:06:13.407 align:start position:25% line:-1
使うようにガイドしてください

00:06:15.242 --> 00:06:18.612 align:start position:29% line:-1
手法はマリンが説明します

00:06:19.046 --> 00:06:24.418 align:start position:32% line:-2
そして 実際に生徒が
課題に取りかかると

00:06:24.585 --> 00:06:27.721 align:start position:30% line:-1
進捗の記録が始まります

00:06:27.988 --> 00:06:32.492 align:start position:29% line:-2
データはすべて
１つのレポートに集約され

00:06:32.593 --> 00:06:35.696 align:start position:27% line:-1
教師のデバイスに送られます

00:06:36.263 --> 00:06:40.534 align:start position:27% line:-2
教師は作成した
Handoutにアクセスし

00:06:40.634 --> 00:06:42.703 align:start position:32% line:-1
レポートを確認します

00:06:46.139 --> 00:06:49.643 align:start position:25% line:-1
このフローの実現に必要なのは

00:06:49.743 --> 00:06:52.980 align:start position:23% line:-2
教師と生徒の
管理対象 Apple IDです

00:06:53.413 --> 00:06:56.850 align:start position:23% line:-1
それと 動作テストできるように

00:06:56.950 --> 00:07:00.954 align:start position:29% line:-2
最低でも
１台のデバイスが必要です

00:06:56.950 --> 00:07:00.954 align:start position:29% line:-2
最低でも
１台のデバイスが必要です

00:07:01.788 --> 00:07:05.692 align:start position:32% line:-2
より一層
実行しやすくするため

00:07:05.792 --> 00:07:09.129 align:start position:23% line:-1
デベロッパモードを用意しました

00:07:09.563 --> 00:07:15.536 align:start position:27% line:-2
このモードではデベロッパが
教師として操作できます

00:07:15.903 --> 00:07:19.606 align:start position:20% line:-1
つまり Handoutを作成したり

00:07:19.706 --> 00:07:23.710 align:start position:34% line:-2
生徒の進捗を
確認したりできます

00:07:23.810 --> 00:07:27.648 align:start position:23% line:-1
また 生徒として課題に取り組み

00:07:27.748 --> 00:07:31.118 align:start position:29% line:-1
進捗を教師と共有できます

00:07:33.187 --> 00:07:36.390 align:start position:32% line:-2
開発データの
リセット機能もあり―

00:07:37.691 --> 00:07:41.595 align:start position:25% line:-1
個人的には何度も利用しました

00:07:42.429 --> 00:07:45.599 align:start position:27% line:-1
続いて クラスを説明します

00:07:46.066 --> 00:07:48.836 align:start position:23% line:-1
DataStoreから始めます

00:07:50.370 --> 00:07:54.474 align:start position:32% line:-2
コンテキストツリーを
管理するものです

00:07:57.544 --> 00:08:01.482 align:start position:29% line:-2
ここでコンテキストが
プロパティとして表示され

00:07:57.544 --> 00:08:01.482 align:start position:29% line:-2
ここでコンテキストが
プロパティとして表示され

00:08:01.915 --> 00:08:07.187 align:start position:27% line:-2
システム内のオブジェクトの
変更履歴が記録されます

00:08:07.855 --> 00:08:11.024 align:start position:25% line:-1
オブジェクトを保存するには―

00:08:11.458 --> 00:08:15.863 align:start position:11% line:-1
CLSDataStoreをコールしてください

00:08:18.031 --> 00:08:24.238 align:start position:27% line:-2
CLSDataStoreの
共有インスタンスもあります

00:08:25.239 --> 00:08:29.243 align:start position:23% line:-1
コンテキストの話に移りましょう

00:08:30.811 --> 00:08:35.482 align:start position:30% line:-2
先ほどの例では
３つの階層がありました

00:08:35.682 --> 00:08:39.186 align:start position:25% line:-1
コンテキストの使い方や特徴は

00:08:39.285 --> 00:08:43.222 align:start position:23% line:-1
後ほどマリンが詳しく説明します

00:08:43.457 --> 00:08:47.127 align:start position:21% line:-1
私はコンテキストIDの話をします

00:08:48.195 --> 00:08:53.000 align:start position:27% line:-2
ClassKitの
アイデンティティは２つです

00:08:53.400 --> 00:08:55.802 align:start position:20% line:-1
まずidentifierプロパティ

00:08:56.803 --> 00:08:59.106 align:start position:34% line:-1
このプロパティは―

00:08:59.206 --> 00:09:03.143 align:start position:29% line:-2
兄弟ノード内で
コンテキストを識別します

00:08:59.206 --> 00:09:03.143 align:start position:29% line:-2
兄弟ノード内で
コンテキストを識別します

00:09:04.344 --> 00:09:06.446 align:start position:34% line:-1
つまり同じ識別子を

00:09:06.547 --> 00:09:10.918 align:start position:32% line:-2
複数のコンテキストに
設定しても構いません

00:09:11.185 --> 00:09:14.721 align:start position:36% line:-2
親ノードが別なら
問題ありません

00:09:15.789 --> 00:09:20.127 align:start position:2% line:-2
これをContext Identifier Pathと
呼んでいます

00:09:21.128 --> 00:09:25.098 align:start position:32% line:-2
ツリー内で
特定のコンテキストを

00:09:25.199 --> 00:09:28.502 align:start position:27% line:-1
識別する時に必要となります

00:09:29.002 --> 00:09:33.907 align:start position:27% line:-2
これはコンテキスト識別子の
配列です

00:09:34.308 --> 00:09:39.813 align:start position:32% line:-2
パスに沿い 最後の
ノードに到達するまで

00:09:40.047 --> 00:09:43.884 align:start position:29% line:-1
コンテキストを走査します

00:09:45.452 --> 00:09:47.955 align:start position:32% line:-1
実際に見てみましょう

00:09:50.023 --> 00:09:56.163 align:start position:21% line:-2
コンテキストカードが 本　第２章
第１節の順に指しています

00:09:56.797 --> 00:09:59.032 align:start position:25% line:-1
コンテキストツリーもあります

00:09:59.199 --> 00:10:02.636 align:start position:36% line:-2
第１節を探すには
Appに行き―

00:09:59.199 --> 00:10:02.636 align:start position:36% line:-2
第１節を探すには
Appに行き―

00:10:03.036 --> 00:10:04.738 align:start position:36% line:-1
次に本に進みます

00:10:04.838 --> 00:10:08.509 align:start position:27% line:-1
本の子である第２章を見つけ

00:10:08.809 --> 00:10:11.912 align:start position:29% line:-1
同様に第１節を見つけます

00:10:12.379 --> 00:10:18.552 align:start position:29% line:-2
第１節はパスの最後なので
ここが参照先となります

00:10:20.287 --> 00:10:24.258 align:start position:30% line:-2
コンテキストの検索法は
複数あります

00:10:24.658 --> 00:10:28.095 align:start position:25% line:-1
絶対パスを使って検索する場合

00:10:28.195 --> 00:10:32.933 align:start position:2% line:-1
matchingIdentifierPathを呼びます

00:10:34.034 --> 00:10:39.540 align:start position:29% line:-2
完了ブロックはパス内の
全コンテキストを返します

00:10:39.640 --> 00:10:41.008 align:start position:32% line:-1
この場合の配列は--

00:10:41.508 --> 00:10:47.014 align:start position:16% line:-1
App 本 第２章 第１節 となります

00:10:47.915 --> 00:10:51.218 align:start position:36% line:-2
もし第１節の中に
第２章がなければ

00:10:51.318 --> 00:10:57.024 align:start position:23% line:-2
完了ブロック内のその後の配列は
Appと本になります

00:10:57.858 --> 00:11:02.262 align:start position:23% line:-2
ここで欠けているコンテキストを
他のもので補えます

00:10:57.858 --> 00:11:02.262 align:start position:23% line:-2
ここで欠けているコンテキストを
他のもので補えます

00:11:03.464 --> 00:11:06.366 align:start position:27% line:-1
相対パスでの検索も可能です

00:11:07.000 --> 00:11:11.572 align:start position:30% line:-2
特定のコンテキストの
子孫を探す時に便利です

00:11:11.972 --> 00:11:16.944 align:start position:0% line:-2
descendantMatchingIdentifierPath
です

00:11:17.411 --> 00:11:22.883 align:start position:27% line:-2
該当コンテキストがなければ
nilになります

00:11:24.484 --> 00:11:28.822 align:start position:29% line:-2
一般的な
コンテキスト検索法として

00:11:28.922 --> 00:11:33.026 align:start position:21% line:-2
Context Matching
プレディケートが使えます

00:11:33.126 --> 00:11:38.398 align:start position:29% line:-2
この例ではコンテキストの
子の探し方を示しています

00:11:39.366 --> 00:11:43.036 align:start position:5% line:-1
CLSDataStoreDelegateもあります

00:11:43.537 --> 00:11:49.643 align:start position:27% line:-2
これはパスを利用した手法と
組み合わせて使います

00:11:51.778 --> 00:11:56.116 align:start position:21% line:-1
デリゲートの定義の例がこちらです

00:11:59.386 --> 00:12:02.856 align:start position:34% line:-2
利用できない
コンテキストがあり

00:11:59.386 --> 00:12:02.856 align:start position:34% line:-2
利用できない
コンテキストがあり

00:12:02.956 --> 00:12:08.228 align:start position:29% line:-2
必要に応じて追加で
作成したい時に役立ちます

00:12:08.328 --> 00:12:12.766 align:start position:29% line:-2
まず最初に
パス内にクエリを出します

00:12:12.866 --> 00:12:17.204 align:start position:23% line:-1
コンテキストが見つからなければ

00:12:17.304 --> 00:12:21.909 align:start position:2% line:-2
createContextforIdentifierを
コールします

00:12:22.009 --> 00:12:26.647 align:start position:29% line:-2
存在しないコンテキストを
生成することができます

00:12:27.314 --> 00:12:32.986 align:start position:29% line:-2
作成されたコンテキストは
適切な場所に追加されます

00:12:35.556 --> 00:12:39.726 align:start position:27% line:-2
動的なコンテンツを利用する
アプリケーションに便利です

00:12:39.993 --> 00:12:42.596 align:start position:32% line:-1
流れを見てみましょう

00:12:43.230 --> 00:12:48.202 align:start position:30% line:-2
先ほどと同じパスですが
不完全な構造です

00:12:48.535 --> 00:12:49.970 align:start position:32% line:-1
デリゲートもあります

00:12:51.138 --> 00:12:57.177 align:start position:29% line:-2
先ほどと同じように
Appから本に向かいます

00:12:57.644 --> 00:13:01.648 align:start position:30% line:-2
続いて
第２章に進むはずですが

00:12:57.644 --> 00:13:01.648 align:start position:30% line:-2
続いて
第２章に進むはずですが

00:13:02.282 --> 00:13:06.353 align:start position:27% line:-2
存在しないので
デリゲートを使い生成します

00:13:06.587 --> 00:13:12.793 align:start position:27% line:-2
ツリー内の正しい位置に
コンテキストが追加されます

00:13:13.427 --> 00:13:17.531 align:start position:30% line:-2
第１節にも
同じ処理を行いましょう

00:13:18.198 --> 00:13:20.634 align:start position:29% line:-1
第１節はパスの最後なので

00:13:20.734 --> 00:13:23.470 align:start position:30% line:-1
ここがパスの参照先です

00:13:26.073 --> 00:13:29.042 align:start position:16% line:-1
次はActivity Objectです

00:13:30.777 --> 00:13:35.916 align:start position:30% line:-2
教師への進捗報告に
使われるオブジェクトで

00:13:36.183 --> 00:13:39.586 align:start position:34% line:-2
実は これが
レポートになります

00:13:42.256 --> 00:13:46.360 align:start position:32% line:-2
常にコンテキストに
ひも付けられています

00:13:46.460 --> 00:13:48.996 align:start position:32% line:-1
単体では存在しません

00:13:49.363 --> 00:13:52.499 align:start position:32% line:-1
新規で作成するには―

00:13:53.367 --> 00:13:56.937 align:start position:0% line:-2
CLSContext.createNewActivityを
コールします

00:13:57.037 --> 00:14:00.807 align:start position:29% line:-1
レシーバと共に返されます

00:13:57.037 --> 00:14:00.807 align:start position:29% line:-1
レシーバと共に返されます

00:14:02.810 --> 00:14:07.781 align:start position:27% line:-2
コンテキストに関連した
アクティビティを調べるには

00:14:07.881 --> 00:14:12.619 align:start position:27% line:-2
CLS Context上の
プロパティをクエリします

00:14:14.721 --> 00:14:18.025 align:start position:25% line:-1
アクティビティの新規作成は―

00:14:18.125 --> 00:14:21.728 align:start position:23% line:-1
アクティビティの実行と同義です

00:14:22.062 --> 00:14:26.433 align:start position:23% line:-2
つまり 教師に
新しい進捗レポートが送られます

00:14:30.170 --> 00:14:35.742 align:start position:27% line:-2
進捗機能を設定するには
直接プロパティを追加します

00:14:36.276 --> 00:14:41.248 align:start position:30% line:-2
この時 開始から終了の
範囲を入力します

00:14:42.416 --> 00:14:45.786 align:start position:23% line:-1
直接プロパティを設定するのは―

00:14:46.019 --> 00:14:49.323 align:start position:21% line:-1
開始の数値を０にするのと同じです

00:14:51.425 --> 00:14:55.496 align:start position:30% line:-2
範囲の一部または全部を
重複させて

00:14:55.662 --> 00:14:59.633 align:start position:23% line:-1
繰り返し用いても問題ありません

00:15:00.000 --> 00:15:03.871 align:start position:34% line:-2
最終的には
正しい範囲の進捗が

00:15:03.971 --> 00:15:07.007 align:start position:29% line:-1
教師のもとへ報告されます

00:15:08.442 --> 00:15:14.214 align:start position:16% line:-2
もう１つ Activity Itemの
話もしましょう

00:15:14.748 --> 00:15:17.151 align:start position:21% line:-1
Activity Itemとは―

00:15:18.485 --> 00:15:23.290 align:start position:29% line:-2
報告の一部として
教師に提供される数値です

00:15:25.159 --> 00:15:30.631 align:start position:9% line:-2
各アクティビティは１つ
primaryActivityItemを持ち―

00:15:30.731 --> 00:15:33.934 align:start position:25% line:-1
この情報が先生に表示されます

00:15:34.034 --> 00:15:35.602 align:start position:32% line:-1
進捗とは別の情報です

00:15:36.537 --> 00:15:39.873 align:start position:29% line:-2
例えばテストの点数などに
活用できます

00:15:41.174 --> 00:15:44.311 align:start position:30% line:-1
この他にも複数の情報を

00:15:45.112 --> 00:15:50.317 align:start position:9% line:-2
additionalActivityItems
として追加できます

00:15:50.617 --> 00:15:55.289 align:start position:27% line:-2
例えばヒントの数や
個々の質問への答えなどです

00:15:57.457 --> 00:16:00.461 align:start position:18% line:-1
現状 Activity Itemには

00:15:57.457 --> 00:16:00.461 align:start position:18% line:-1
現状 Activity Itemには

00:16:01.028 --> 00:16:04.965 align:start position:23% line:-1
サブクラスを３つ定義しています

00:16:05.866 --> 00:16:08.669 align:start position:18% line:-1
まずCLSQuantityItemは

00:16:08.769 --> 00:16:13.640 align:start position:32% line:-2
ヒントの数などを
求める際に役立ちます

00:16:14.341 --> 00:16:19.246 align:start position:27% line:-2
CLSScoreItemは
全体に対する数値を出すので

00:16:19.780 --> 00:16:24.351 align:start position:34% line:-2
テストの点数などを
求めるのに便利です

00:16:24.651 --> 00:16:27.187 align:start position:23% line:-1
CLSBinaryItemは―

00:16:27.888 --> 00:16:33.193 align:start position:32% line:-2
２択式の問題に
回答するのに使えます

00:16:34.561 --> 00:16:37.631 align:start position:18% line:-1
ではActivity Itemを作り

00:16:37.731 --> 00:16:41.668 align:start position:14% line:-2
primaryActivityItemを
追加しましょう

00:16:41.902 --> 00:16:46.974 align:start position:12% line:-2
“Total Score”というタイトルで
Score Itemを作成します

00:16:47.274 --> 00:16:52.179 align:start position:11% line:-2
primaryActivityItemとして
関連付けるため

00:16:52.412 --> 00:16:55.883 align:start position:30% line:-1
プロパティを設定します

00:16:58.018 --> 00:17:02.456 align:start position:7% line:-2
additionalActivityItemsの
追加も同様です

00:16:58.018 --> 00:17:02.456 align:start position:7% line:-2
additionalActivityItemsの
追加も同様です

00:17:02.623 --> 00:17:05.925 align:start position:9% line:-2
ここでは
CLSQuantityItemを作成しています

00:17:06.026 --> 00:17:09.530 align:start position:25% line:-1
タイトルは“Hints”です

00:17:10.230 --> 00:17:13.300 align:start position:25% line:-1
作成したアイテムを渡した後―

00:17:13.400 --> 00:17:19.071 align:start position:5% line:-2
addAdditionalActivityItem
をコールします

00:17:19.172 --> 00:17:23.242 align:start position:30% line:-2
これでアクティビティに
ひも付きます

00:17:23.977 --> 00:17:28.448 align:start position:18% line:-2
Activity Itemを扱う際の
注意点があります

00:17:29.182 --> 00:17:34.621 align:start position:9% line:-2
まず primaryActivityItemの
サブクラス統一です

00:17:35.522 --> 00:17:40.928 align:start position:25% line:-2
教師が２人の生徒に
同じ課題を出す場合を考えます

00:17:41.395 --> 00:17:47.267 align:start position:14% line:-2
primaryActivityItemを
生徒ＡではScoreItemに設定し

00:17:47.901 --> 00:17:52.639 align:start position:21% line:-2
生徒ＢではBinaryItemに
設定したとします

00:17:52.940 --> 00:17:58.445 align:start position:29% line:-2
これだと教師への報告時に
データを統合できません

00:17:58.779 --> 00:18:04.318 align:start position:12% line:-2
ScoreItemとBinaryItemは
互換性がありません

00:17:58.779 --> 00:18:04.318 align:start position:12% line:-2
ScoreItemとBinaryItemは
互換性がありません

00:18:04.585 --> 00:18:07.154 align:start position:11% line:-1
primaryActivityItemに関し

00:18:07.621 --> 00:18:10.924 align:start position:25% line:-1
サブクラスは統一してください

00:18:11.625 --> 00:18:17.130 align:start position:29% line:-2
また タイトルは
明確かつ簡潔にしましょう

00:18:17.231 --> 00:18:22.669 align:start position:29% line:-2
設定したタイトルは
教師の目に触れる情報です

00:18:24.238 --> 00:18:29.443 align:start position:7% line:-2
additionalActivityItemsも
ぜひ ご活用ください

00:18:29.877 --> 00:18:36.483 align:start position:23% line:-2
教師が生徒を理解する上で必要な
多くの情報を提供できます

00:18:37.351 --> 00:18:42.456 align:start position:30% line:-2
これからマリンが
実際の動作を説明します

00:18:42.789 --> 00:18:48.796 align:start position:43% line:-1
(拍手)

00:18:51.498 --> 00:18:52.933 align:start position:41% line:-1
こんにちは

00:18:53.133 --> 00:18:56.870 align:start position:20% line:-1
ClassKitチームのマリンです

00:18:57.137 --> 00:19:02.809 align:start position:29% line:-2
既存アプリケーションへの
適用について話します

00:18:57.137 --> 00:19:02.809 align:start position:29% line:-2
既存アプリケーションへの
適用について話します

00:19:03.143 --> 00:19:07.181 align:start position:27% line:-2
サンプルアプリケーションを
用意しました

00:19:07.848 --> 00:19:13.086 align:start position:25% line:-2
計算テストのアプリケーション
Quizzlerです

00:19:13.387 --> 00:19:19.259 align:start position:27% line:-2
まず 計算問題の種類を
選択する画面が表示されます

00:19:19.426 --> 00:19:21.962 align:start position:34% line:-1
足し算にしましょう

00:19:22.863 --> 00:19:25.766 align:start position:32% line:-1
こちらが次の質問です

00:19:25.866 --> 00:19:30.804 align:start position:29% line:-2
高成績者の得点表を見るか
計算を始めるか

00:19:30.904 --> 00:19:33.707 align:start position:32% line:-1
どちらかを選択します

00:19:33.907 --> 00:19:36.210 align:start position:34% line:-1
計算を始めましょう

00:19:37.144 --> 00:19:40.647 align:start position:27% line:-1
表示される計算問題を解いて

00:19:40.914 --> 00:19:44.952 align:start position:36% line:-2
最後まで終えると
成績が分かります

00:19:45.552 --> 00:19:48.956 align:start position:25% line:-1
このようなアプリケーションに

00:19:49.056 --> 00:19:52.526 align:start position:27% line:-2
ClassKitを適用する
方法を解説します

00:19:53.427 --> 00:19:56.363 align:start position:32% line:-2
まず どのような
コンテキストデータが

00:19:56.463 --> 00:20:00.300 align:start position:30% line:-2
このアプリケーションに
適しているか考えます

00:19:56.463 --> 00:20:00.300 align:start position:30% line:-2
このアプリケーションに
適しているか考えます

00:20:00.968 --> 00:20:02.302 align:start position:43% line:-1
続いて―

00:20:02.569 --> 00:20:08.041 align:start position:27% line:-2
生徒の学習データについても
掘り下げましょう

00:20:08.876 --> 00:20:13.480 align:start position:30% line:-2
ディープリンクの方法は
２通りあります

00:20:13.580 --> 00:20:16.383 align:start position:29% line:-1
まずはユニバーサルリンク

00:20:16.717 --> 00:20:20.954 align:start position:29% line:-2
対応済みの
アプリケーションであれば

00:20:21.054 --> 00:20:26.460 align:start position:23% line:-2
ユニバーサルリンクプロパティを
設定するだけです

00:20:27.661 --> 00:20:33.300 align:start position:30% line:-2
このサンプルは非対応の
アプリケーションなので

00:20:33.400 --> 00:20:37.504 align:start position:32% line:-2
ハンドラを使う
第２の方法を用います

00:20:38.505 --> 00:20:42.609 align:start position:34% line:-2
デベロッパモードと
スクールワークで

00:20:42.709 --> 00:20:45.579 align:start position:32% line:-1
実装テストを行います

00:20:46.447 --> 00:20:51.185 align:start position:34% line:-2
ではコンテキストの
構造を見ていきます

00:20:51.652 --> 00:20:54.421 align:start position:32% line:-1
まずUIと対応する―

00:20:54.521 --> 00:20:58.859 align:start position:32% line:-2
コンテキストツリーを
作ることにしましょう

00:20:59.126 --> 00:21:03.397 align:start position:29% line:-2
そうすると
このような構造になります

00:20:59.126 --> 00:21:03.397 align:start position:29% line:-2
そうすると
このような構造になります

00:21:03.831 --> 00:21:08.735 align:start position:23% line:-1
Appのコンテキストが最上位で

00:21:09.169 --> 00:21:14.474 align:start position:27% line:-2
その下位が足し算と掛け算の
コンテキストです

00:21:14.608 --> 00:21:18.846 align:start position:30% line:-2
更に得点表と
テストのコンテキストが

00:21:18.946 --> 00:21:21.348 align:start position:36% line:-1
それぞれ続きます

00:21:21.915 --> 00:21:27.621 align:start position:27% line:-2
前述のとおりコンテキストは
アプリケーションの一部で

00:21:27.721 --> 00:21:30.858 align:start position:30% line:-1
生徒にアサインされます

00:21:31.091 --> 00:21:35.429 align:start position:30% line:-2
それを念頭に置き
得点表について考えます

00:21:36.063 --> 00:21:40.267 align:start position:30% line:-2
得点表のコンテキストが
何かというと

00:21:40.367 --> 00:21:42.436 align:start position:36% line:-1
高得点の記録です

00:21:42.803 --> 00:21:47.841 align:start position:32% line:-2
教師はこれを生徒へ
アサインしませんよね

00:21:49.042 --> 00:21:52.279 align:start position:34% line:-1
ですので消去します

00:21:52.946 --> 00:21:55.883 align:start position:29% line:-1
すると構造はこうなります

00:21:56.483 --> 00:22:00.087 align:start position:23% line:-1
次は足し算のコンテキストですが

00:21:56.483 --> 00:22:00.087 align:start position:23% line:-1
次は足し算のコンテキストですが

00:22:00.354 --> 00:22:03.690 align:start position:29% line:-1
その実体は何でしょうか？

00:22:04.091 --> 00:22:06.960 align:start position:27% line:-1
単に足し算のテストですよね

00:22:07.327 --> 00:22:12.766 align:start position:30% line:-2
これらは重複するので
１つにまとめるべきです

00:22:12.866 --> 00:22:17.804 align:start position:29% line:-2
掛け算のコンテキストにも
同じことが言えます

00:22:18.605 --> 00:22:21.642 align:start position:30% line:-1
ツリーはこうなりました

00:22:22.209 --> 00:22:25.812 align:start position:25% line:-1
パヴェルと先の展開を話し合い

00:22:25.913 --> 00:22:31.552 align:start position:29% line:-2
引き算と割り算のテストの
追加を検討しました

00:22:31.652 --> 00:22:35.789 align:start position:30% line:-2
その場合 兄弟ノードを
簡単に作れます

00:22:36.056 --> 00:22:40.861 align:start position:27% line:-2
皆さんのアプリケーションに
合った構造を考える時は

00:22:40.961 --> 00:22:46.200 align:start position:27% line:-2
現状に加え 将来的な内容も
考慮してください

00:22:46.300 --> 00:22:49.469 align:start position:25% line:-1
構造の拡張性を確保しましょう

00:22:50.737 --> 00:22:53.307 align:start position:23% line:-1
コンテキストに関して説明します

00:22:53.841 --> 00:22:56.977 align:start position:27% line:-1
まずタイトルを明確にします

00:22:57.077 --> 00:23:01.115 align:start position:34% line:-2
タイトルとは
教師と生徒にとって

00:22:57.077 --> 00:23:01.115 align:start position:34% line:-2
タイトルとは
教師と生徒にとって

00:23:01.215 --> 00:23:06.887 align:start position:29% line:-2
どんなコンテキストか
知るための情報だからです

00:23:07.654 --> 00:23:11.658 align:start position:23% line:-2
コンテキストは
なるべく早い段階で決めましょう

00:23:12.159 --> 00:23:17.431 align:start position:29% line:-2
この例では
静的コンテンツがあるので

00:23:17.531 --> 00:23:21.535 align:start position:34% line:-2
起動と同時に
内容を決められます

00:23:22.870 --> 00:23:25.105 align:start position:34% line:-1
次は 教師のために

00:23:25.205 --> 00:23:29.910 align:start position:29% line:-2
決まった順で
コンテキストを表示します

00:23:30.077 --> 00:23:33.814 align:start position:25% line:-1
そこで サンプルでは足し算を

00:23:33.914 --> 00:23:38.819 align:start position:30% line:-2
掛け算の上に
表示させようと思います

00:23:38.919 --> 00:23:41.221 align:start position:32% line:-1
そのために役立つのが

00:23:41.321 --> 00:23:45.159 align:start position:16% line:-1
displayOrderプロパティです

00:23:46.093 --> 00:23:49.496 align:start position:27% line:-1
コンテキストが決まったので

00:23:49.596 --> 00:23:52.366 align:start position:30% line:-1
次は生徒側を見ましょう

00:23:53.367 --> 00:23:56.537 align:start position:25% line:-1
これはスクールワークの画面で

00:23:56.637 --> 00:24:01.208 align:start position:30% line:-2
学習データが
このように表示されます

00:23:56.637 --> 00:24:01.208 align:start position:30% line:-2
学習データが
このように表示されます

00:24:01.942 --> 00:24:06.513 align:start position:27% line:-1
生徒がテストにかけた時間を

00:24:06.613 --> 00:24:09.149 align:start position:29% line:-1
記録するのが良さそうです

00:24:09.383 --> 00:24:10.651 align:start position:41% line:-1
そのため―

00:24:10.751 --> 00:24:16.323 align:start position:21% line:-2
メソッドのstartとstopを
コールしましょう

00:24:17.157 --> 00:24:22.496 align:start position:29% line:-2
更に テストの点数を
表示できるといいですよね

00:24:22.996 --> 00:24:26.767 align:start position:34% line:-2
ただ よく考えると
生徒の得点は

00:24:26.867 --> 00:24:31.338 align:start position:34% line:-2
テストで恐らく
最も重要な情報です

00:24:31.438 --> 00:24:35.876 align:start position:29% line:-2
スクールワークの画面上で
目立たせましょう

00:24:36.109 --> 00:24:40.948 align:start position:20% line:-2
そのためには
CLSScoreItemを作成して

00:24:41.048 --> 00:24:44.351 align:start position:14% line:-2
primaryActivityItemに
設定します

00:24:44.451 --> 00:24:47.588 align:start position:27% line:-1
すると 画面に反映されます

00:24:48.689 --> 00:24:54.795 align:start position:27% line:-2
加えて それぞれの回答の
正誤も表示したいところです

00:24:55.462 --> 00:25:01.068 align:start position:18% line:-2
ですから 今度は
CLSBinaryItemを作成して

00:24:55.462 --> 00:25:01.068 align:start position:18% line:-2
ですから 今度は
CLSBinaryItemを作成して

00:25:01.635 --> 00:25:06.640 align:start position:9% line:-2
additionalActivityItems
として追加します

00:25:07.474 --> 00:25:11.478 align:start position:34% line:-2
書くコードの内容は
決まったので

00:25:11.578 --> 00:25:14.848 align:start position:27% line:-1
実際の動作を見てみましょう

00:25:20.287 --> 00:25:24.558 align:start position:32% line:-2
私のディスプレイの
Xcodeを映します

00:25:24.992 --> 00:25:29.429 align:start position:32% line:-2
まず プロジェクトの
ターゲットを選びます

00:25:30.063 --> 00:25:33.433 align:start position:16% line:-1
Capabilitiesペインを選択し

00:25:33.534 --> 00:25:36.737 align:start position:18% line:-1
ClassKitのAPIを見つけます

00:25:37.438 --> 00:25:40.507 align:start position:23% line:-1
ClassKitをオンにすれば

00:25:40.607 --> 00:25:43.744 align:start position:27% line:-1
コードを書く準備は万全です

00:25:44.244 --> 00:25:47.047 align:start position:21% line:-1
アプリケーションを起動すればすぐ

00:25:47.147 --> 00:25:50.450 align:start position:36% line:-2
コンテキストを
書き始められます

00:25:50.551 --> 00:25:53.720 align:start position:30% line:-1
デリゲートを起動します

00:25:54.054 --> 00:26:00.027 align:start position:23% line:-2
コンテキストをパブリッシュする
関数を作成します

00:25:54.054 --> 00:26:00.027 align:start position:23% line:-2
コンテキストをパブリッシュする
関数を作成します

00:26:01.995 --> 00:26:05.032 align:start position:27% line:-1
ここに関数が作成されました

00:26:05.132 --> 00:26:09.770 align:start position:29% line:-2
CLSContextの
インスタンスを生成します

00:26:10.204 --> 00:26:13.340 align:start position:29% line:-1
コンテキストの型を渡して

00:26:14.274 --> 00:26:19.513 align:start position:27% line:-2
固有の識別子と
簡潔なタイトルを入力します

00:26:20.047 --> 00:26:23.450 align:start position:16% line:-1
displayOrderも忘れず追加し

00:26:23.550 --> 00:26:27.187 align:start position:32% line:-2
足し算を掛け算の上に
表示させます

00:26:27.821 --> 00:26:30.591 align:start position:32% line:-2
掛け算も同様に
インスタンスを生成し

00:26:30.691 --> 00:26:34.261 align:start position:18% line:-1
displayOrderを設定します

00:26:34.862 --> 00:26:40.667 align:start position:30% line:-2
その後はコンテキストの
辞書を作成しておきます

00:26:41.668 --> 00:26:45.973 align:start position:27% line:-2
これを追加する
親コンテキストを選択します

00:26:46.140 --> 00:26:48.008 align:start position:38% line:-1
水平構造なので

00:26:48.108 --> 00:26:53.146 align:start position:23% line:-2
親は常に
App コンテキストになります

00:26:53.680 --> 00:26:58.218 align:start position:21% line:-2
これらのコンテキストが存在するか
クエリを発行します

00:26:58.352 --> 00:27:00.354 align:start position:32% line:-1
プレディケートを作り

00:26:58.352 --> 00:27:00.354 align:start position:32% line:-1
プレディケートを作り

00:27:00.521 --> 00:27:05.225 align:start position:32% line:-2
親コンテキスト以下を
すべて検索します

00:27:05.726 --> 00:27:10.631 align:start position:27% line:-2
CLSDataStoreの
共有インスタンスに対して

00:27:11.265 --> 00:27:16.937 align:start position:27% line:-2
プレディケートに一致する
全コンテキストを検索します

00:27:17.638 --> 00:27:20.541 align:start position:23% line:-1
コンテキストの配列が返されます

00:27:21.175 --> 00:27:25.913 align:start position:29% line:-2
存在する全コンテキストに
これを繰り返します

00:27:26.580 --> 00:27:29.783 align:start position:32% line:-1
その各コンテキストを

00:27:29.917 --> 00:27:34.188 align:start position:32% line:-2
コンテキスト辞書から
消去しましょう

00:27:35.455 --> 00:27:39.927 align:start position:23% line:-2
次は 存在しない
コンテキストへのイテレートです

00:27:40.260 --> 00:27:42.496 align:start position:36% line:-1
各コンテキストを

00:27:42.596 --> 00:27:47.100 align:start position:30% line:-2
親コンテキストの下に
子として追加しましょう

00:27:47.968 --> 00:27:50.337 align:start position:36% line:-1
変更を保存します

00:27:50.904 --> 00:27:55.175 align:start position:25% line:-1
これで起動時に関数を使えます

00:27:57.845 --> 00:28:02.182 align:start position:29% line:-2
コンテキストが実在するか
テストしましょう

00:27:57.845 --> 00:28:02.182 align:start position:29% line:-2
コンテキストが実在するか
テストしましょう

00:28:03.083 --> 00:28:06.420 align:start position:27% line:-1
私のデバイス画面を映します

00:28:06.820 --> 00:28:09.590 align:start position:23% line:-1
Quizzlerが起動しました

00:28:10.057 --> 00:28:12.392 align:start position:25% line:-1
ただ 見た目は以前と同じです

00:28:12.659 --> 00:28:16.597 align:start position:30% line:-2
作成したコンテキストの
確認に用いるのが

00:28:16.797 --> 00:28:19.900 align:start position:34% line:-2
デベロッパモードと
スクールワークです

00:28:20.000 --> 00:28:23.837 align:start position:34% line:-2
ホームボタンを押し
設定を開きます

00:28:24.705 --> 00:28:28.008 align:start position:29% line:-1
デベロッパ設定を探します

00:28:28.609 --> 00:28:33.447 align:start position:25% line:-2
選択するとClassKitの
APIが出てきます

00:28:33.747 --> 00:28:39.553 align:start position:30% line:-2
ここを切り替えることで
教師として操作できます

00:28:39.786 --> 00:28:41.955 align:start position:36% line:-1
選択を確認したら

00:28:42.322 --> 00:28:46.460 align:start position:29% line:-2
ホームボタンから
スクールワークを開きます

00:28:48.328 --> 00:28:53.767 align:start position:29% line:-2
起動時のウェルカム画面は
閉じて先に進みます

00:28:53.867 --> 00:28:58.105 align:start position:34% line:-2
画面の右上に見える
プラスボタンは

00:28:58.338 --> 00:29:00.841 align:start position:29% line:-1
教師でログインした印です

00:28:58.338 --> 00:29:00.841 align:start position:29% line:-1
教師でログインした印です

00:29:01.074 --> 00:29:05.646 align:start position:25% line:-2
タップすると
Handout作成画面が開き

00:29:05.812 --> 00:29:07.815 align:start position:34% line:-1
課題を追加できます

00:29:08.415 --> 00:29:12.486 align:start position:18% line:-1
ここにQuizzlerが表示されます

00:29:12.719 --> 00:29:16.723 align:start position:30% line:-2
ちゃんとコンテキストが
ありました

00:29:16.823 --> 00:29:20.727 align:start position:25% line:-1
これで存在を確認できましたね

00:29:21.128 --> 00:29:26.266 align:start position:29% line:-2
ちなみに足し算の下に
掛け算が表示されています

00:29:26.433 --> 00:29:30.604 align:start position:27% line:-2
displayOrderも
正しく機能しています

00:29:31.004 --> 00:29:36.443 align:start position:27% line:-2
では今から 足し算の問題を
Handoutに追加して

00:29:36.543 --> 00:29:39.980 align:start position:29% line:-1
自分のクラスに配布します

00:29:40.614 --> 00:29:44.151 align:start position:23% line:-1
TOフィールドでクラスを選び―

00:29:45.018 --> 00:29:47.688 align:start position:23% line:-1
Handoutに名前を付けます

00:29:49.223 --> 00:29:54.728 align:start position:21% line:-2
“Post”をタップすると
Handoutをクラスに送れます

00:29:54.828 --> 00:29:58.165 align:start position:25% line:-1
同時にコンテキストが認証され

00:29:58.265 --> 00:30:01.902 align:start position:36% line:-2
進捗データの
記録が始まります

00:29:58.265 --> 00:30:01.902 align:start position:36% line:-2
進捗データの
記録が始まります

00:30:02.736 --> 00:30:08.742 align:start position:25% line:-2
Handoutをタップすると
コンテキストが表示されます

00:30:08.842 --> 00:30:13.614 align:start position:30% line:-2
隣にアプリケーションの
アイコンもあります

00:30:13.914 --> 00:30:18.786 align:start position:30% line:-2
ここから足し算テストに
飛べるはずなので

00:30:18.886 --> 00:30:20.554 align:start position:39% line:-1
タップします

00:30:21.355 --> 00:30:26.760 align:start position:25% line:-2
アプリケーションは開きますが
画面が違います

00:30:27.027 --> 00:30:32.266 align:start position:27% line:-2
ディープリンクを忘れたので
Xcodeで追加します

00:30:32.900 --> 00:30:38.338 align:start position:29% line:-2
デリゲートに戻って
ハンドラを追加しましょう

00:30:39.940 --> 00:30:42.376 align:start position:29% line:-1
このハンドラが処理する―

00:30:42.476 --> 00:30:47.514 align:start position:21% line:-1
ユーザアクティビティを選択します

00:30:47.614 --> 00:30:50.150 align:start position:4% line:-1
contextIdentifierPathを続けます

00:30:51.018 --> 00:30:53.086 align:start position:34% line:-1
ここまでできたら―

00:30:53.320 --> 00:30:59.259 align:start position:23% line:-2
コンテキストにひも付く
計算問題をインスタンス化します

00:30:59.860 --> 00:31:04.264 align:start position:32% line:-2
そして先ほどの関数を
コールします

00:30:59.860 --> 00:31:04.264 align:start position:32% line:-2
そして先ほどの関数を
コールします

00:31:04.364 --> 00:31:09.403 align:start position:27% line:-2
もしコンテキストがなければ
作成しましょう

00:31:09.670 --> 00:31:14.041 align:start position:27% line:-2
エラーがあれば返されるので
対処します

00:31:15.042 --> 00:31:18.078 align:start position:29% line:-1
更に メインのスレッドで

00:31:18.445 --> 00:31:24.685 align:start position:4% line:-2
storyboardとviewControllerを
インスタンス化します

00:31:25.219 --> 00:31:30.457 align:start position:14% line:-2
viewControllerで計算問題の
見え方を設定します

00:31:30.724 --> 00:31:36.497 align:start position:27% line:-2
では ディープリンクが
機能するかテストしましょう

00:31:36.997 --> 00:31:42.469 align:start position:29% line:-2
再度 私のデバイスで
スクールワークを開きます

00:31:44.371 --> 00:31:47.207 align:start position:30% line:-1
アイコンをタップします

00:31:48.141 --> 00:31:51.912 align:start position:32% line:-2
今回は足し算テストに
飛びました

00:31:52.146 --> 00:31:56.483 align:start position:30% line:-2
次は生徒の学習データに
移りましょう

00:31:56.583 --> 00:31:58.085 align:start position:34% line:-1
Xcodeに戻って

00:31:58.185 --> 00:32:03.290 align:start position:27% line:-2
テスト開始時にコールされる
コードに進みましょう

00:31:58.185 --> 00:32:03.290 align:start position:27% line:-2
テスト開始時にコールされる
コードに進みましょう

00:32:04.391 --> 00:32:07.628 align:start position:29% line:-1
先ほど話していた機能を―

00:32:08.195 --> 00:32:11.231 align:start position:30% line:-1
テストに設定しましょう

00:32:12.399 --> 00:32:13.867 align:start position:39% line:-1
タイマーです

00:32:13.967 --> 00:32:19.573 align:start position:21% line:-2
まず CLSDataStoreに
クエリを発行します

00:32:19.907 --> 00:32:25.179 align:start position:20% line:-1
対象はAppコンテキストの全子孫で

00:32:25.279 --> 00:32:29.950 align:start position:16% line:-2
Identifier Pathが一致し
テストにひも付くものです

00:32:30.517 --> 00:32:35.823 align:start position:32% line:-2
任意のコンテキストが
返されます

00:32:35.923 --> 00:32:38.258 align:start position:21% line:-1
becomeActiveを確認し

00:32:38.559 --> 00:32:43.030 align:start position:32% line:-2
新規アクティビティを
インスタンス化します

00:32:43.163 --> 00:32:46.033 align:start position:27% line:-1
このコードが実行されるのは

00:32:46.133 --> 00:32:50.704 align:start position:27% line:-2
生徒が新たに
テストを始める時だからです

00:32:51.138 --> 00:32:55.642 align:start position:25% line:-2
アクティビティとプロパティを
キャッシュします

00:32:56.877 --> 00:33:00.414 align:start position:29% line:-2
タイマー用に
startをコールします

00:32:56.877 --> 00:33:00.414 align:start position:29% line:-2
タイマー用に
startをコールします

00:33:00.914 --> 00:33:05.419 align:start position:32% line:-2
各問題への回答も
報告したいと思います

00:33:05.652 --> 00:33:10.591 align:start position:32% line:-2
回答時にコールされる
コードを見ていきます

00:33:11.758 --> 00:33:14.595 align:start position:34% line:-1
ここで活用するのは

00:33:14.695 --> 00:33:18.899 align:start position:34% line:-2
すでに実行している
アクティビティです

00:33:19.233 --> 00:33:24.204 align:start position:18% line:-2
そして CLSBinaryItemを
インスタンス化します

00:33:24.505 --> 00:33:29.843 align:start position:29% line:-2
固有の識別子と
明確なタイトルをつけます

00:33:30.277 --> 00:33:33.947 align:start position:27% line:-1
型も忘れずに渡してください

00:33:34.848 --> 00:33:37.684 align:start position:34% line:-1
生徒の回答について

00:33:37.785 --> 00:33:42.122 align:start position:30% line:-2
正解かどうかを
valueで設定します

00:33:42.823 --> 00:33:48.262 align:start position:4% line:-2
このBinaryItemを
additionalActivityItemsとして

00:33:48.362 --> 00:33:50.430 align:start position:27% line:-2
実行中の
アクティビティに追加します

00:33:51.098 --> 00:33:56.270 align:start position:29% line:-2
あとは タイマーの停止と
総得点の設定ですね

00:33:56.537 --> 00:34:02.309 align:start position:27% line:-2
テスト終了時にコールされる
コードを見ていきます

00:33:56.537 --> 00:34:02.309 align:start position:27% line:-2
テスト終了時にコールされる
コードを見ていきます

00:34:03.010 --> 00:34:06.980 align:start position:25% line:-2
現在実行中のアクティビティを
取得します

00:34:07.347 --> 00:34:11.518 align:start position:21% line:-2
では CLSScoreItemを
作りましょう

00:34:11.752 --> 00:34:15.054 align:start position:34% line:-2
識別子とタイトルは
固有にします

00:34:15.389 --> 00:34:19.326 align:start position:32% line:-2
それから満点中
生徒が何点を取ったか

00:34:19.493 --> 00:34:22.396 align:start position:36% line:-1
データを渡します

00:34:22.963 --> 00:34:28.702 align:start position:11% line:-2
primaryActivityItemとして
ScoreItemを追加します

00:34:28.902 --> 00:34:30.536 align:start position:36% line:-1
ここのポイントは

00:34:30.637 --> 00:34:35.342 align:start position:21% line:-2
CLSActivityItemの
サブクラス統一です

00:34:35.442 --> 00:34:38.344 align:start position:27% line:-1
常にScoreItemです

00:34:39.079 --> 00:34:42.516 align:start position:25% line:-1
stopでタイマーを停止させ

00:34:42.815 --> 00:34:45.351 align:start position:30% line:-1
変更をすべて保存します

00:34:45.786 --> 00:34:48.121 align:start position:30% line:-1
生徒の学習データに関し

00:34:48.222 --> 00:34:52.226 align:start position:34% line:-2
正しく設定できたか
テストしましょう

00:34:52.726 --> 00:34:58.031 align:start position:27% line:-2
今回は 生徒として
操作できるよう切り替えます

00:34:58.132 --> 00:35:02.236 align:start position:29% line:-2
そのため
デベロッパ設定に戻ります

00:34:58.132 --> 00:35:02.236 align:start position:29% line:-2
そのため
デベロッパ設定に戻ります

00:35:02.469 --> 00:35:05.205 align:start position:32% line:-1
各種ある設定の中から

00:35:05.305 --> 00:35:08.242 align:start position:34% line:-1
生徒に切り替えます

00:35:08.675 --> 00:35:11.511 align:start position:29% line:-1
スクールワークを開きます

00:35:12.346 --> 00:35:16.750 align:start position:30% line:-2
画面の右上に
プラスボタンがないのは

00:35:16.850 --> 00:35:19.253 align:start position:38% line:-1
生徒だからです

00:35:19.520 --> 00:35:22.823 align:start position:29% line:-2
教師からHandoutが
届いています

00:35:22.923 --> 00:35:27.194 align:start position:32% line:-2
タップすると
課題内容が表示されて

00:35:27.294 --> 00:35:31.465 align:start position:32% line:-2
アイコンから
テスト画面に飛べます

00:35:31.999 --> 00:35:36.003 align:start position:32% line:-2
進捗記録が
教師に送られることが

00:35:36.103 --> 00:35:37.671 align:start position:36% line:-1
アラートされます

00:35:37.771 --> 00:35:39.339 align:start position:39% line:-1
これを閉じ―

00:35:39.940 --> 00:35:43.677 align:start position:38% line:-2
すべての問題を
解いていきます

00:35:45.212 --> 00:35:47.114 align:start position:34% line:-1
最後に成績が出ます

00:35:47.214 --> 00:35:49.149 align:start position:32% line:-1
100％得点しました

00:35:49.416 --> 00:35:54.488 align:start position:30% line:-2
スクールワークに戻ると
データを確認できます

00:35:54.588 --> 00:35:57.291 align:start position:34% line:-1
所要時間と得点です

00:35:57.458 --> 00:36:00.828 align:start position:27% line:-1
得点がはっきり目立ちますね

00:35:57.458 --> 00:36:00.828 align:start position:27% line:-1
得点がはっきり目立ちますね

00:36:00.928 --> 00:36:04.798 align:start position:25% line:-2
Activity Itemが
機能しています

00:36:04.898 --> 00:36:06.934 align:start position:36% line:-1
更にタップすると

00:36:07.034 --> 00:36:10.270 align:start position:29% line:-1
設定した全データが出ます

00:36:10.370 --> 00:36:15.876 align:start position:29% line:-2
ここに総得点とタイトルも
表示されています

00:36:16.143 --> 00:36:21.048 align:start position:29% line:-2
下にあるのは
１問ずつにかけた時間です

00:36:21.148 --> 00:36:26.620 align:start position:27% line:-2
各問題について
設定したタイトルも見えます

00:36:26.954 --> 00:36:32.092 align:start position:29% line:-2
これで 設定内容の確認は
完了しました

00:36:32.459 --> 00:36:36.330 align:start position:23% line:-1
では パヴェルに登壇してもらい

00:36:36.430 --> 00:36:39.366 align:start position:30% line:-1
内容を振り返りましょう

00:36:39.533 --> 00:36:45.539 align:start position:43% line:-1
(拍手)

00:36:48.308 --> 00:36:49.677 align:start position:41% line:-1
ありがとう

00:36:50.344 --> 00:36:54.281 align:start position:32% line:-2
ClassKitでの
重要点をまとめます

00:36:54.948 --> 00:37:01.255 align:start position:27% line:-2
まず 教師が使えるように
コンテキストを早く決めます

00:36:54.948 --> 00:37:01.255 align:start position:27% line:-2
まず 教師が使えるように
コンテキストを早く決めます

00:37:01.455 --> 00:37:06.560 align:start position:30% line:-2
すべてをコンテキストに
する必要はありません

00:37:07.694 --> 00:37:11.365 align:start position:32% line:-2
必要な時には
デリゲートが使えます

00:37:11.865 --> 00:37:15.869 align:start position:7% line:-2
additionalActivityItemsも
便利です

00:37:16.003 --> 00:37:19.439 align:start position:29% line:-1
生徒の進捗を把握する上で

00:37:19.540 --> 00:37:24.044 align:start position:34% line:-2
役に立つ詳細情報を
教師に提供できます

00:37:25.212 --> 00:37:28.448 align:start position:34% line:-2
教育関係全般に
言えることですが―

00:37:28.849 --> 00:37:31.451 align:start position:14% line:-1
StoreKitへの依存をなくしましょう

00:37:31.985 --> 00:37:35.989 align:start position:30% line:-2
学校でApp 内課金は
不適切です

00:37:36.356 --> 00:37:38.859 align:start position:29% line:-1
また パージ可能領域は―

00:37:39.693 --> 00:37:44.198 align:start position:25% line:-1
一般に便利ですが学校では特に

00:37:44.298 --> 00:37:49.670 align:start position:23% line:-2
iPadが共有されることが多く
容量が貴重だからです

00:37:50.003 --> 00:37:53.907 align:start position:2% line:-2
最後は
Managed app configurationです

00:37:54.241 --> 00:37:56.176 align:start position:34% line:-1
これで設定を行えば

00:37:56.276 --> 00:37:59.446 align:start position:34% line:-2
学校のIT管理者の
負担が減ります

00:38:00.247 --> 00:38:04.718 align:start position:29% line:-2
今日話した内容のリンクや
詳細情報は

00:38:04.818 --> 00:38:08.255 align:start position:0% line:-2
developer.apple.com/education
までどうぞ

00:38:09.223 --> 00:38:13.093 align:start position:34% line:-2
引き続きWWDCを
お楽しみください

00:38:13.227 --> 00:38:14.361 align:start position:43% line:-1
以上です

00:38:14.461 --> 00:38:20.200 align:start position:43% line:-1
(拍手)
