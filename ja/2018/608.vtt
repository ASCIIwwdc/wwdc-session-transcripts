WEBVTT

00:00:07.074 --> 00:00:16.483 align:start position:43% line:-1
(音楽)

00:00:20.354 --> 00:00:26.593 align:start position:43% line:-1
(拍手)

00:00:26.693 --> 00:00:28.695 align:start position:41% line:-1
こんにちは

00:00:29.396 --> 00:00:31.398 align:start position:32% line:-1
ここに立てて光栄です

00:00:31.598 --> 00:00:33.200 align:start position:39% line:-1
始めましょう

00:00:34.034 --> 00:00:36.870 align:start position:29% line:-2
シェーダは
グラフィックスの要であり

00:00:36.970 --> 00:00:40.574 align:start position:27% line:-2
ゲームやアプリケーションの
見栄えをよくします

00:00:41.508 --> 00:00:46.680 align:start position:27% line:-2
膨大な計算を実行する環境で
シェーダを扱うのは厄介です

00:00:47.047 --> 00:00:50.651 align:start position:34% line:-2
開発の過程で
失敗することも多く

00:00:50.884 --> 00:00:54.855 align:start position:32% line:-2
うまくいったとしても
処理速度も問題です

00:00:55.389 --> 00:00:56.523 align:start position:41% line:-1
私はアルプ

00:00:56.623 --> 00:01:01.128 align:start position:23% line:-2
Metalシェーダのデバッグと
プロファイリングで―

00:00:56.623 --> 00:01:01.128 align:start position:23% line:-2
Metalシェーダのデバッグと
プロファイリングで―

00:01:01.662 --> 00:01:04.263 align:start position:27% line:-2
役立つツールと
ワークフローをご紹介します

00:01:05.632 --> 00:01:07.267 align:start position:34% line:-1
まずMetalです

00:01:09.136 --> 00:01:12.539 align:start position:30% line:-2
フレームワークや
言語だけではありません

00:01:13.373 --> 00:01:16.977 align:start position:5% line:-2
Metal Performance Shaders
MetalKitに加え―

00:01:17.277 --> 00:01:21.748 align:start position:34% line:-2
開発過程を支援する
ツールもあります

00:01:22.783 --> 00:01:26.420 align:start position:14% line:-2
Instrumentsに統合された
Metal System Traceが―

00:01:26.520 --> 00:01:30.324 align:start position:27% line:-2
CPUやGPUの並行処理の
可視性を広げます

00:01:30.424 --> 00:01:33.427 align:start position:27% line:-2
アプリケーションの
パフォーマンスも高まります

00:01:34.428 --> 00:01:38.732 align:start position:27% line:-2
プロファイリングを始める際
有用なツールです

00:01:39.967 --> 00:01:44.571 align:start position:11% line:-2
しかし今日 注目するのは
Metal Frame Debuggerです

00:01:46.607 --> 00:01:50.611 align:start position:7% line:-2
Metal Frame Debuggerを使えば
ゲームのフレームや―

00:01:50.711 --> 00:01:55.682 align:start position:20% line:-2
アップロードやAPIコールの中から
Metal処理を見つけ出します

00:01:57.251 --> 00:01:59.920 align:start position:36% line:-2
現状とリソースも
確認できます

00:02:00.988 --> 00:02:04.124 align:start position:27% line:-2
さらに
プロファイリング機能により

00:02:04.224 --> 00:02:07.461 align:start position:23% line:-2
GPUカウンタやパイプラインの
統計にアクセスできます

00:02:08.127 --> 00:02:12.833 align:start position:25% line:-2
Xcodeに組み込まれており
Metalワークロードの―

00:02:12.933 --> 00:02:16.303 align:start position:27% line:-2
プロファイリングと
デバッグが１カ所でできます

00:02:17.304 --> 00:02:22.709 align:start position:27% line:-2
今年はさらに 有用な機能が
いくつか加わりました

00:02:23.477 --> 00:02:28.115 align:start position:18% line:-2
Dependency Viewerで
エンコーダが可視化され―

00:02:28.215 --> 00:02:32.419 align:start position:30% line:-2
リソース使用における
連携の様子が分かります

00:02:33.287 --> 00:02:36.757 align:start position:34% line:-2
ワークロードを導く
優れたツールで―

00:02:36.857 --> 00:02:40.427 align:start position:32% line:-2
フレーム作成の過程が
理解できます

00:02:42.262 --> 00:02:47.000 align:start position:23% line:-2
明日10時のMetalゲームに
関するセッションでは―

00:02:47.100 --> 00:02:50.170 align:start position:18% line:-2
Dependency Viewerの
話をします

00:02:50.704 --> 00:02:54.942 align:start position:21% line:-2
でも今日のテーマは
Geometry Viewerと

00:02:55.209 --> 00:02:58.445 align:start position:21% line:-2
Shader Debuggerと
Shader Profiler

00:02:58.912 --> 00:03:04.418 align:start position:27% line:-2
日々の作業に役立つ
ワークロードをご紹介します

00:02:58.912 --> 00:03:04.418 align:start position:27% line:-2
日々の作業に役立つ
ワークロードをご紹介します

00:03:05.419 --> 00:03:07.688 align:start position:20% line:-1
まずGeometry Viewer

00:03:12.059 --> 00:03:15.629 align:start position:27% line:-2
グラフィックパイプラインの
第１段階である―

00:03:16.129 --> 00:03:19.900 align:start position:30% line:-2
頂点ステージでの失敗は
致命的です

00:03:20.934 --> 00:03:24.872 align:start position:27% line:-2
だからシェーダのデバッグに
手をつける前に―

00:03:24.972 --> 00:03:27.541 align:start position:30% line:-1
頂点の問題を排除します

00:03:29.476 --> 00:03:32.880 align:start position:29% line:-2
頂点ステージではいくつか
チェック事項があります

00:03:33.647 --> 00:03:38.318 align:start position:27% line:-2
主に頂点入力 インデックス
頂点出力です

00:03:39.052 --> 00:03:43.490 align:start position:25% line:-2
昨年 我々がXcode 9で
導入した入力属性ビューでは

00:03:43.590 --> 00:03:47.561 align:start position:34% line:-2
全データを表形式で
見ることができます

00:03:48.228 --> 00:03:51.765 align:start position:34% line:-2
それでも元の3Dを
参照しなければ

00:03:52.799 --> 00:03:55.636 align:start position:34% line:-2
視覚データの
デバッグは困難です

00:03:56.503 --> 00:04:00.541 align:start position:29% line:-2
だから今年は
すべてのデータを統合し―

00:03:56.503 --> 00:04:00.541 align:start position:29% line:-2
だから今年は
すべてのデータを統合し―

00:04:00.774 --> 00:04:04.711 align:start position:30% line:-2
視覚化し確認できる場を
作りました

00:04:05.179 --> 00:04:08.749 align:start position:16% line:-1
ではGeometry Viewerです

00:04:11.084 --> 00:04:15.589 align:start position:43% line:-1
(拍手)

00:04:15.689 --> 00:04:18.926 align:start position:32% line:-2
変換後の頂点データを
3Dで視覚化し―

00:04:19.026 --> 00:04:24.498 align:start position:27% line:-2
頂点出力が実際に
どう見えるか示すツールです

00:04:25.032 --> 00:04:30.070 align:start position:29% line:-2
データ入力 インデックス
出力の情報が分かるので―

00:04:30.170 --> 00:04:33.040 align:start position:30% line:-1
元の3Dを参照できます

00:04:33.907 --> 00:04:38.378 align:start position:34% line:-2
ドローコールごとに
提供されるので―

00:04:38.478 --> 00:04:43.283 align:start position:27% line:-2
頂点における問題のすべてを
１カ所で確認できます

00:04:44.518 --> 00:04:48.956 align:start position:29% line:-2
頂点に関する３つの
一般的な問題を取り上げ―

00:04:49.089 --> 00:04:52.593 align:start position:21% line:-2
Geometry Viewerの
使い方をご紹介します

00:04:54.928 --> 00:04:59.500 align:start position:30% line:-2
ドローコールを出し
木を描こうとしています

00:04:59.867 --> 00:05:04.037 align:start position:29% line:-2
三角形の頂点のいくつかが
画面外にあり―

00:04:59.867 --> 00:05:04.037 align:start position:29% line:-2
三角形の頂点のいくつかが
画面外にあり―

00:05:04.338 --> 00:05:07.407 align:start position:30% line:-1
三角形がゆがんでいます

00:05:07.841 --> 00:05:11.745 align:start position:21% line:-2
Geometry Viewerで
この三角形をクリックします

00:05:12.479 --> 00:05:16.917 align:start position:32% line:-2
頂点の入出力に関する
すべてのデータが―

00:05:17.217 --> 00:05:21.522 align:start position:32% line:-2
画面下のビューアーに
表示されます

00:05:25.058 --> 00:05:29.163 align:start position:32% line:-2
２つ目の例も
同じドローコールです

00:05:29.429 --> 00:05:32.599 align:start position:29% line:-1
でも今回は木はありません

00:05:33.300 --> 00:05:36.136 align:start position:21% line:-2
Geometry Viewerと
Freeflyカメラを使って―

00:05:37.971 --> 00:05:42.509 align:start position:32% line:-2
台の外で木の描画が
完成するのが見えます

00:05:43.844 --> 00:05:46.113 align:start position:32% line:-2
画面上に現れないのも
納得ですね

00:05:47.014 --> 00:05:51.552 align:start position:20% line:-2
Geometry Viewerなら
検出は簡単です

00:05:52.419 --> 00:05:58.025 align:start position:27% line:-2
最後の例では3Dで三角形が
できないことすらあります

00:05:58.125 --> 00:06:01.929 align:start position:27% line:-1
これらのデバッグは厄介です

00:05:58.125 --> 00:06:01.929 align:start position:27% line:-1
これらのデバッグは厄介です

00:06:03.397 --> 00:06:08.936 align:start position:27% line:-2
複数の頂点が同地点に
向かうと三角形が作れません

00:06:09.169 --> 00:06:13.640 align:start position:32% line:-2
あるいは頂点の出力に
無限数や非数があると

00:06:13.740 --> 00:06:16.009 align:start position:25% line:-1
GPUはこれを受け付けません

00:06:16.977 --> 00:06:22.816 align:start position:14% line:-2
Geometry Viewerはこれらを
見つけ出してくれます

00:06:26.420 --> 00:06:31.058 align:start position:32% line:-2
ワンクリックで
問題の一覧が現れます

00:06:32.359 --> 00:06:35.796 align:start position:27% line:-1
不正な三角形を検出しました

00:06:36.430 --> 00:06:39.433 align:start position:34% line:-2
クリックすると
データが見られます

00:06:40.067 --> 00:06:43.303 align:start position:34% line:-2
このデータによれば
頂点の２つが―

00:06:43.437 --> 00:06:48.842 align:start position:30% line:-2
原点に向かっており
三角形が変形しています

00:06:50.677 --> 00:06:53.680 align:start position:20% line:-2
このように
Geometry Viewerは―

00:06:54.281 --> 00:07:00.487 align:start position:29% line:-2
ジオメトリ関連の問題を
すばやく調べるツールです

00:06:54.281 --> 00:07:00.487 align:start position:29% line:-2
ジオメトリ関連の問題を
すばやく調べるツールです

00:07:00.888 --> 00:07:05.626 align:start position:29% line:-2
入力に問題があれば
モデルをチェックしますが

00:07:06.126 --> 00:07:10.664 align:start position:29% line:-2
出力に問題があれば
デバッグが必要になります

00:07:11.265 --> 00:07:12.933 align:start position:39% line:-1
次に移ります

00:07:16.203 --> 00:07:19.139 align:start position:20% line:-1
Shader Debuggerです

00:07:20.107 --> 00:07:21.909 align:start position:23% line:-1
シェーダのデバッグは難しいです

00:07:22.609 --> 00:07:26.013 align:start position:27% line:-2
コードが複雑で
ベクトル演算が多いからです

00:07:26.880 --> 00:07:30.350 align:start position:36% line:-2
シェーダコードは
フレームごとに―

00:07:30.450 --> 00:07:33.987 align:start position:34% line:-2
何百万回も実行され
並列処理されます

00:07:35.289 --> 00:07:38.659 align:start position:20% line:-2
Book of the Deadの
デモを見てみましょう

00:07:38.759 --> 00:07:42.796 align:start position:30% line:-2
今週前半の基調講演でも
登場しましたね

00:07:43.230 --> 00:07:45.766 align:start position:38% line:-2
このシーンの
１フレームで―

00:07:46.366 --> 00:07:49.169 align:start position:27% line:-2
1000万の頂点シェーダが
起動します

00:07:49.436 --> 00:07:55.042 align:start position:27% line:-2
すべてのパスの各フレームの
ピクセル数は6000万

00:07:56.143 --> 00:07:58.645 align:start position:36% line:-2
シェーダに
問題がある場合―

00:07:58.745 --> 00:08:04.952 align:start position:25% line:-2
原因となっているシェーダや
コードを特定するのは困難です

00:07:58.745 --> 00:08:04.952 align:start position:25% line:-2
原因となっているシェーダや
コードを特定するのは困難です

00:08:05.419 --> 00:08:08.355 align:start position:32% line:-2
シェーダのデバッグを
支援するための―

00:08:08.488 --> 00:08:13.227 align:start position:16% line:-2
新たなShader Debuggerを
ご紹介します

00:08:14.595 --> 00:08:19.867 align:start position:43% line:-1
(拍手)

00:08:20.934 --> 00:08:25.506 align:start position:21% line:-2
Shader Debuggerは
Metalシェーダ用ツールです

00:08:25.873 --> 00:08:30.410 align:start position:34% line:-2
数千ものスレッドを
即座に可視化します

00:08:32.246 --> 00:08:36.049 align:start position:29% line:-2
エミュレータでなく
GPUのデータを示します

00:08:38.118 --> 00:08:42.256 align:start position:29% line:-2
柔軟な設定ができるので
ブレークポイントなしに―

00:08:42.356 --> 00:08:44.625 align:start position:30% line:-1
実行することができます

00:08:45.726 --> 00:08:48.929 align:start position:12% line:-2
Metal Frame Debuggerに
組み込まれており―

00:08:49.029 --> 00:08:53.167 align:start position:21% line:-2
シェーダのデバッグに必要なものが
すべてそろいます

00:08:53.734 --> 00:08:58.071 align:start position:20% line:-2
では同僚のハビエルが
Shader Profilerを―

00:08:58.172 --> 00:09:00.107 align:start position:39% line:-1
ご紹介します

00:08:58.172 --> 00:09:00.107 align:start position:39% line:-1
ご紹介します

00:09:00.374 --> 00:09:00.974 align:start position:43% line:-1
ハビエル

00:09:01.074 --> 00:09:04.444 align:start position:43% line:-1
(拍手)

00:09:04.545 --> 00:09:05.512 align:start position:34% line:-1
ありがとう アルプ

00:09:05.712 --> 00:09:07.014 align:start position:34% line:-1
皆さん こんにちは

00:09:08.949 --> 00:09:12.986 align:start position:29% line:-2
今日はカッコいい水の
シミュレーションをします

00:09:13.086 --> 00:09:16.490 align:start position:34% line:-2
しかしジオメトリに
問題があります

00:09:16.990 --> 00:09:19.860 align:start position:16% line:-2
新しいShader Debuggerを
ご紹介し―

00:09:19.960 --> 00:09:25.432 align:start position:27% line:-2
ジオメトリの問題を解決する
方法をお見せします

00:09:26.567 --> 00:09:29.403 align:start position:29% line:-2
まずは
フレームのキャプチャです

00:09:29.937 --> 00:09:34.074 align:start position:29% line:-2
デバッグバーのキャプチャ
ボタンをクリックします

00:09:37.344 --> 00:09:40.814 align:start position:30% line:-2
フレームをキャプチャし
デバッグを始めます

00:09:42.816 --> 00:09:46.920 align:start position:20% line:-2
ジオメトリに問題があるので
Geometry Viewerで―

00:09:49.656 --> 00:09:54.561 align:start position:27% line:-2
ドローコールのジオメトリを
調べてみましょう

00:09:56.763 --> 00:10:02.035 align:start position:30% line:-2
平らであるべき水面が
崖のようになっています

00:09:56.763 --> 00:10:02.035 align:start position:30% line:-2
平らであるべき水面が
崖のようになっています

00:10:02.369 --> 00:10:06.573 align:start position:34% line:-2
不正な三角の１つを
クリックします

00:10:06.773 --> 00:10:11.345 align:start position:34% line:-2
底辺の不正な頂点を
詳しく見ていきます

00:10:12.045 --> 00:10:14.715 align:start position:30% line:-1
この表を使えば簡単です

00:10:16.750 --> 00:10:21.655 align:start position:30% line:-2
入力された位置の座標を
確認してみると―

00:10:22.990 --> 00:10:28.695 align:start position:29% line:-2
この三角の頂点は
ほぼ同じ値になっています

00:10:28.795 --> 00:10:32.366 align:start position:29% line:-1
Ｙ座標はまったく同じです

00:10:32.966 --> 00:10:35.769 align:start position:30% line:-1
入力値は正しいようです

00:10:37.104 --> 00:10:41.141 align:start position:34% line:-2
3Dビューで出力に
不具合があるのは―

00:10:41.275 --> 00:10:45.212 align:start position:29% line:-2
頂点シェーダに
問題があるということです

00:10:45.546 --> 00:10:48.916 align:start position:21% line:-2
Shader Debuggerで
この問題を修復します

00:10:49.917 --> 00:10:54.421 align:start position:23% line:-2
右下コーナーのデバッグボタンを
クリックするだけで

00:10:57.357 --> 00:11:01.528 align:start position:14% line:-1
Shader Debuggerに入れます

00:10:57.357 --> 00:11:01.528 align:start position:14% line:-1
Shader Debuggerに入れます

00:11:05.799 --> 00:11:10.938 align:start position:20% line:-2
Shader Debuggerでは
ソースコードに沿って―

00:11:11.038 --> 00:11:14.875 align:start position:34% line:-2
修正された全変数に
アクセスできます

00:11:15.442 --> 00:11:18.111 align:start position:38% line:-2
変数の詳細が
知りたければ―

00:11:18.212 --> 00:11:22.649 align:start position:36% line:-2
この詳細ボタンを
クリックします

00:11:25.118 --> 00:11:30.557 align:start position:25% line:-2
ソースコード言語で
すべての変数値が表示されます

00:11:31.191 --> 00:11:34.161 align:start position:38% line:-2
デバッグ対象の
三角について―

00:11:34.261 --> 00:11:37.497 align:start position:34% line:-2
全頂点の変数の値も
表示されます

00:11:40.400 --> 00:11:44.771 align:start position:30% line:-2
デバッグナビゲータでは
履歴も見られます

00:11:44.872 --> 00:11:50.143 align:start position:27% line:-2
実行した内容が
最初から最後まで見られます

00:11:50.711 --> 00:11:56.250 align:start position:27% line:-2
矢印キーを使うだけで
コードも簡単に処理できます

00:11:58.185 --> 00:12:01.889 align:start position:30% line:-2
ご覧のとおり
ナビゲータの実行中は―

00:11:58.185 --> 00:12:01.889 align:start position:30% line:-2
ご覧のとおり
ナビゲータの実行中は―

00:12:01.989 --> 00:12:04.491 align:start position:30% line:-2
ソースコードが
ハイライト表示されます

00:12:04.792 --> 00:12:06.894 align:start position:27% line:-1
これは逆方向にも作用します

00:12:06.994 --> 00:12:12.299 align:start position:23% line:-2
ソースコードの１行を選ぶと
ナビゲータ上の位置が定まります

00:12:13.600 --> 00:12:18.205 align:start position:32% line:-2
画面下の変数ビューで
対象の変数すべてに―

00:12:18.305 --> 00:12:21.108 align:start position:29% line:-1
いつでもアクセスできます

00:12:23.210 --> 00:12:27.581 align:start position:29% line:-2
少し分かってきたところで
実際にやってみましょう

00:12:30.684 --> 00:12:34.321 align:start position:32% line:-2
変位ベクトルの生成で
水の計算が行われ―

00:12:34.421 --> 00:12:36.924 align:start position:27% line:-1
後で最終位置に加えられます

00:12:37.491 --> 00:12:42.029 align:start position:27% line:-2
詳細ビューで変位ベクトルの
詳細を見ます

00:12:46.800 --> 00:12:48.969 align:start position:32% line:-1
ここで分かるとおり―

00:12:49.269 --> 00:12:54.274 align:start position:27% line:-2
デバッグ中の頂点の右座標は
大きなマイナスの値です

00:12:54.374 --> 00:12:58.512 align:start position:30% line:-2
しかし他の正しい頂点は
プラスです

00:12:58.779 --> 00:13:02.716 align:start position:27% line:-2
つまり問題は
変位ベクトルの計算方法です

00:12:58.779 --> 00:13:02.716 align:start position:27% line:-2
つまり問題は
変位ベクトルの計算方法です

00:13:03.684 --> 00:13:08.789 align:start position:29% line:-2
デバッグナビゲータで
何が起きているか調べます

00:13:16.363 --> 00:13:19.133 align:start position:29% line:-1
コードを読むまでもなく―

00:13:19.233 --> 00:13:21.935 align:start position:27% line:-1
問題があることが分かります

00:13:22.169 --> 00:13:25.439 align:start position:34% line:-2
変数の１つが
非数を示しています

00:13:25.539 --> 00:13:28.442 align:start position:29% line:-1
これが障害だと思われます

00:13:28.609 --> 00:13:31.211 align:start position:34% line:-1
原因を調べましょう

00:13:31.845 --> 00:13:36.617 align:start position:29% line:-2
ここをクリックすると
演算の数値がマイナスで―

00:13:36.717 --> 00:13:40.521 align:start position:32% line:-2
それが問題を
起こしているようです

00:13:40.721 --> 00:13:43.457 align:start position:29% line:-1
問題の原因が分かりました

00:13:43.557 --> 00:13:46.860 align:start position:38% line:-2
この２つの行を
切り替えれば―

00:13:46.960 --> 00:13:50.130 align:start position:36% line:-2
マイナスの数値が
修正されます

00:13:51.098 --> 00:13:55.169 align:start position:36% line:-2
これでシェーダが
変更されました

00:13:55.269 --> 00:14:00.340 align:start position:32% line:-2
リロード変更ボタンを
クリックし変更します

00:13:55.269 --> 00:14:00.340 align:start position:32% line:-2
リロード変更ボタンを
クリックし変更します

00:14:03.610 --> 00:14:07.748 align:start position:29% line:-2
シェーダのリロードが
新たなシェーダで行われ―

00:14:07.848 --> 00:14:10.350 align:start position:36% line:-2
すぐに結果が
チェックできます

00:14:11.585 --> 00:14:16.256 align:start position:29% line:-2
ご覧のとおり
水面が滑らかになりました

00:14:17.224 --> 00:14:22.963 align:start position:27% line:-2
デバッグバーの継続ボタンを
クリックしチェックします

00:14:27.534 --> 00:14:32.039 align:start position:29% line:-2
正しいシミュレーションが
完成しました

00:14:32.139 --> 00:14:34.308 align:start position:43% line:-1
(拍手)

00:14:34.408 --> 00:14:38.712 align:start position:29% line:-2
今ご紹介したのは
フレームキャプチャの方法

00:14:38.812 --> 00:14:42.382 align:start position:18% line:-2
Geometry Viewerを使い
不正な頂点を見つける方法

00:14:42.482 --> 00:14:46.854 align:start position:11% line:-2
そして新しいShader Debuggerで
頂点シェーダを修復する方法です

00:14:46.954 --> 00:14:48.789 align:start position:29% line:-1
アルプにマイクを戻します

00:14:48.889 --> 00:14:54.094 align:start position:43% line:-1
(拍手)

00:14:57.431 --> 00:14:58.565 align:start position:36% line:-1
すごいでしょう？

00:14:59.833 --> 00:15:00.834 align:start position:32% line:-1
ありがとう ハビエル

00:14:59.833 --> 00:15:00.834 align:start position:32% line:-1
ありがとう ハビエル

00:15:01.568 --> 00:15:03.971 align:start position:21% line:-2
Shader Debuggerを
ご紹介したところで―

00:15:04.171 --> 00:15:09.076 align:start position:30% line:-2
デバッグニーズのための
使い方を詳細に述べます

00:15:09.743 --> 00:15:10.777 align:start position:34% line:-1
でも最初の問題は―

00:15:11.278 --> 00:15:14.481 align:start position:21% line:-2
Shader Debuggerに
どう入るか

00:15:16.617 --> 00:15:20.654 align:start position:29% line:-2
フレームをキャプチャして
最終コールで―

00:15:21.154 --> 00:15:24.925 align:start position:27% line:-2
ドローあるいはディスパッチ
コールを選択します

00:15:25.159 --> 00:15:29.963 align:start position:27% line:-2
デバッグバーの
シェーダボタンを起動すると

00:15:30.063 --> 00:15:32.032 align:start position:21% line:-2
Shader Debuggerに
アクセスできます

00:15:32.599 --> 00:15:36.837 align:start position:32% line:-2
ビューが現れたら
スレッドを選択します

00:15:37.905 --> 00:15:42.876 align:start position:25% line:-2
シェーダのタイプに応じて
その後の作業は変わってきます

00:15:43.644 --> 00:15:47.681 align:start position:29% line:-2
フラグメントシェーダなら
ピクセルインスペクタで―

00:15:47.781 --> 00:15:50.451 align:start position:29% line:-2
デバッグしたいピクセルを
選びます

00:15:51.218 --> 00:15:55.522 align:start position:20% line:-2
頂点シェーダなら
Geometry Viewerで―

00:15:55.856 --> 00:15:57.825 align:start position:32% line:-1
問題の頂点を選びます

00:15:59.193 --> 00:16:04.798 align:start position:27% line:-2
計算するならコントロールで
対象のスレッドを選択し―

00:15:59.193 --> 00:16:04.798 align:start position:27% line:-2
計算するならコントロールで
対象のスレッドを選択し―

00:16:05.132 --> 00:16:09.269 align:start position:36% line:-2
デバッグボタンを
クリックするだけ

00:16:09.536 --> 00:16:11.004 align:start position:18% line:-1
Shader Debuggerなら―

00:16:11.471 --> 00:16:17.044 align:start position:32% line:-2
気になっている変数を
簡単に確認できます

00:16:17.778 --> 00:16:22.516 align:start position:29% line:-2
その変数のソースラインに
アクセスするだけ

00:16:22.916 --> 00:16:26.253 align:start position:30% line:-2
ブレークポイントもなく
コードも不要

00:16:26.954 --> 00:16:32.125 align:start position:32% line:-2
修正された変数の値が
サイドバーに現れます

00:16:33.293 --> 00:16:38.532 align:start position:29% line:-2
デモで見たとおり無限値が
ハイライト表示され―

00:16:38.632 --> 00:16:41.768 align:start position:30% line:-1
誤りが簡単に分かります

00:16:42.569 --> 00:16:46.874 align:start position:30% line:-2
サイドバーのボタンで
詳細ビューが表示され―

00:16:46.974 --> 00:16:49.843 align:start position:29% line:-1
変数の全情報が分かります

00:16:51.311 --> 00:16:55.282 align:start position:30% line:-2
必要があれば
別のコンポーネントの―

00:16:55.382 --> 00:16:58.151 align:start position:32% line:-1
詳細まで確認できます

00:16:59.319 --> 00:17:03.991 align:start position:27% line:-2
ソースコードにある変数なら
どれでも―

00:16:59.319 --> 00:17:03.991 align:start position:27% line:-2
ソースコードにある変数なら
どれでも―

00:17:04.223 --> 00:17:08.295 align:start position:34% line:-2
値を即座に
知ることができます

00:17:09.061 --> 00:17:10.897 align:start position:38% line:-2
この例のように
テクスチャの―

00:17:10.998 --> 00:17:14.867 align:start position:27% line:-1
サンプリングでも役立ちます

00:17:14.968 --> 00:17:18.539 align:start position:30% line:-2
正しいテクスチャが
すぐにチェックできます

00:17:20.574 --> 00:17:25.579 align:start position:29% line:-2
CPUデバッガと同様に
変数ビューにアクセスし―

00:17:25.679 --> 00:17:28.315 align:start position:30% line:-1
全変数の表示もできます

00:17:29.950 --> 00:17:34.555 align:start position:30% line:-2
変数の確認はシェーダの
デバッグの核ですが―

00:17:34.788 --> 00:17:36.623 align:start position:32% line:-1
すべてではありません

00:17:37.024 --> 00:17:41.295 align:start position:34% line:-2
コードの実行順序も
知りたいですね

00:17:41.461 --> 00:17:44.231 align:start position:32% line:-1
これも簡単にできます

00:17:45.966 --> 00:17:49.069 align:start position:21% line:-2
Shader Debuggerの
デバッグナビゲータに―

00:17:49.169 --> 00:17:54.408 align:start position:27% line:-2
選択したスレッドの
ソースラインが表示されます

00:17:55.876 --> 00:18:00.247 align:start position:30% line:-2
どのラインを
選択することもできます

00:17:55.876 --> 00:18:00.247 align:start position:30% line:-2
どのラインを
選択することもできます

00:18:00.981 --> 00:18:04.084 align:start position:30% line:-1
カーソルキーを使用して

00:18:04.184 --> 00:18:07.955 align:start position:32% line:-2
コードの順番を
チェックできるのです

00:18:09.423 --> 00:18:14.761 align:start position:29% line:-2
ナビゲータの関数を拡張し
ステップインもできます

00:18:17.064 --> 00:18:19.533 align:start position:32% line:-1
逆戻りも可能なので―

00:18:20.033 --> 00:18:23.704 align:start position:32% line:-2
シェーダのデバッグの
性能が高まります

00:18:23.804 --> 00:18:26.473 align:start position:38% line:-2
不正値を持つ
変数を見つけ―

00:18:26.573 --> 00:18:30.844 align:start position:32% line:-2
誤りと原因を追って
過去にさかのぼれます

00:18:33.547 --> 00:18:35.415 align:start position:30% line:-1
フィルタ機能もあります

00:18:36.216 --> 00:18:38.585 align:start position:29% line:-1
シェーダコードにおいて―

00:18:39.586 --> 00:18:43.791 align:start position:32% line:-2
気になることを何でも
フィルタできます

00:18:44.625 --> 00:18:50.364 align:start position:25% line:-2
関数コール 変数 リソースが
フィルタの対象です

00:18:50.964 --> 00:18:55.469 align:start position:29% line:-2
シェーダコードは他の
ファイルでも使われますが

00:18:55.736 --> 00:19:00.807 align:start position:32% line:-2
フィルタを使う場合は
シェーダの対象だけ

00:18:55.736 --> 00:19:00.807 align:start position:32% line:-2
フィルタを使う場合は
シェーダの対象だけ

00:19:01.041 --> 00:19:03.310 align:start position:30% line:-1
対象の限定に効果的です

00:19:06.113 --> 00:19:10.450 align:start position:27% line:-2
１つのスレッドのデバッグは
これでよさそうです

00:19:10.818 --> 00:19:13.120 align:start position:30% line:-1
しかし別のスレッドは？

00:19:14.288 --> 00:19:17.624 align:start position:32% line:-2
選択した
最初のスレッドから―

00:19:17.724 --> 00:19:20.994 align:start position:36% line:-2
他のスレッドにも
アクセスできます

00:19:21.795 --> 00:19:27.201 align:start position:29% line:-2
つまり選択した頂点の
プリミティブが得られます

00:19:28.101 --> 00:19:32.306 align:start position:32% line:-2
フラグメントでは
選択したピクセル周辺

00:19:33.373 --> 00:19:37.811 align:start position:27% line:-2
計算では選択したスレッドの
グループの情報が得られ―

00:19:37.911 --> 00:19:42.449 align:start position:27% line:-2
スレッドグループメモリに
絡む変数にアクセスできます

00:19:43.884 --> 00:19:49.857 align:start position:27% line:-2
他のスレッドへのアクセスは
なぜデバッグに有効か

00:19:51.825 --> 00:19:56.997 align:start position:30% line:-2
コードが数百万もの
ピクセルを実行する際―

00:19:57.664 --> 00:20:03.170 align:start position:23% line:-2
ピクセルごとに１つの変数が
常に役に立つわけではありません

00:19:57.664 --> 00:20:03.170 align:start position:23% line:-2
ピクセルごとに１つの変数が
常に役に立つわけではありません

00:20:03.470 --> 00:20:04.938 align:start position:36% line:-1
例をお見せします

00:20:05.439 --> 00:20:09.643 align:start position:30% line:-2
勾配を計算していますが
値が確定せず―

00:20:09.743 --> 00:20:15.215 align:start position:30% line:-2
この勾配値が適切なのか
どうか分かりません

00:20:16.083 --> 00:20:19.386 align:start position:38% line:-2
クリックすれば
詳細ビューで―

00:20:20.154 --> 00:20:25.259 align:start position:32% line:-2
自分のピクセル周辺の
勾配値を確認できます

00:20:25.359 --> 00:20:30.931 align:start position:23% line:-2
きれいな勾配ではないため
値が正しくないことが分かります

00:20:32.499 --> 00:20:36.270 align:start position:30% line:-2
このように詳細ビューは
シェーダの理解を助け―

00:20:36.537 --> 00:20:40.774 align:start position:32% line:-2
値が正しいかどうかの
判断に役立ちます

00:20:42.109 --> 00:20:45.812 align:start position:32% line:-2
すぐに他のピクセルに
移動し―

00:20:45.913 --> 00:20:49.550 align:start position:32% line:-2
変数が適切かどうかを
判断できます

00:20:51.418 --> 00:20:55.689 align:start position:30% line:-2
このビューでスレッドの
切り替えもできます

00:20:56.990 --> 00:21:02.829 align:start position:29% line:-2
ピクセルの正否が明らかな
場合の比較に有用です

00:20:56.990 --> 00:21:02.829 align:start position:29% line:-2
ピクセルの正否が明らかな
場合の比較に有用です

00:21:02.963 --> 00:21:07.401 align:start position:25% line:-2
すばやく切り替え
ピクセルの動作を確認できます

00:21:08.602 --> 00:21:13.307 align:start position:30% line:-2
切り替えで実行履歴と
変数ビューが更新され―

00:21:13.407 --> 00:21:17.277 align:start position:30% line:-2
選択したスレッドを
完全にデバッグできます

00:21:19.346 --> 00:21:20.881 align:start position:34% line:-1
さらにいいことに―

00:21:21.615 --> 00:21:25.185 align:start position:29% line:-2
ダイバージェンスの理解が
深まります

00:21:26.220 --> 00:21:30.324 align:start position:30% line:-2
詳細ビューの
右側のマスクも有用です

00:21:30.490 --> 00:21:34.228 align:start position:30% line:-2
どのスレッドが
同じコードを実行したか

00:21:34.428 --> 00:21:37.531 align:start position:32% line:-1
常に表示してくれます

00:21:38.665 --> 00:21:42.603 align:start position:34% line:-2
この例では対角線で
区切られた部分です

00:21:43.103 --> 00:21:46.006 align:start position:30% line:-1
スレッドのおよそ半分が

00:21:46.206 --> 00:21:52.446 align:start position:27% line:-2
同じコードを実行したことが
はっきりと分かります

00:21:53.814 --> 00:21:56.550 align:start position:29% line:-1
次はフラグメントシェーダ

00:21:56.650 --> 00:22:00.454 align:start position:36% line:-2
詳細ビューで
問題を修復します

00:21:56.650 --> 00:22:00.454 align:start position:36% line:-2
詳細ビューで
問題を修復します

00:22:00.554 --> 00:22:03.657 align:start position:30% line:-1
再びハビエルの登場です

00:22:03.757 --> 00:22:04.658 align:start position:43% line:-1
ハビエル

00:22:04.992 --> 00:22:08.028 align:start position:43% line:-1
(拍手)

00:22:08.128 --> 00:22:09.062 align:start position:41% line:-1
ありがとう

00:22:10.164 --> 00:22:13.200 align:start position:32% line:-2
先ほどはジオメトリの
問題を解決し―

00:22:13.433 --> 00:22:15.869 align:start position:30% line:-2
プロセスとエフェクトに
目を向けました

00:22:16.170 --> 00:22:18.272 align:start position:29% line:-1
結果が予想と違ったので―

00:22:18.572 --> 00:22:21.041 align:start position:32% line:-2
フレームキャプチャで
デバッグしました

00:22:26.046 --> 00:22:28.448 align:start position:32% line:-1
このビューを見ると―

00:22:28.782 --> 00:22:34.254 align:start position:29% line:-2
ハイライトの下に
暗い部分ができていますね

00:22:34.788 --> 00:22:37.925 align:start position:21% line:-2
Shader Debuggerで
修正します

00:22:38.992 --> 00:22:42.162 align:start position:30% line:-2
ピクセルインスペクタを
呼び出し―

00:22:42.529 --> 00:22:45.499 align:start position:29% line:-2
デバッグしたいピクセルを
選択します

00:22:46.266 --> 00:22:50.270 align:start position:29% line:-2
例えば
このピクセルを選択して―

00:22:50.737 --> 00:22:55.876 align:start position:18% line:-2
デバッグボタンを押し
Shader Debuggerを開始

00:22:58.245 --> 00:23:00.781 align:start position:32% line:-2
フレームとシェーダを
デバッグ中です

00:22:58.245 --> 00:23:00.781 align:start position:32% line:-2
フレームとシェーダを
デバッグ中です

00:23:05.686 --> 00:23:10.724 align:start position:32% line:-2
ハイライトは３段階で
生成されています

00:23:10.891 --> 00:23:14.394 align:start position:36% line:-2
詳細ビューで
現状を把握します

00:23:14.828 --> 00:23:17.631 align:start position:30% line:-1
最初にこれを見ましょう

00:23:19.399 --> 00:23:23.971 align:start position:29% line:-2
オリジナルカラーから
サンプルを作成しています

00:23:24.071 --> 00:23:25.806 align:start position:38% line:-1
正しいようです

00:23:25.906 --> 00:23:27.608 align:start position:38% line:-1
次を見ましょう

00:23:29.109 --> 00:23:32.779 align:start position:32% line:-2
ハイライトが１方向に
集中しています

00:23:32.913 --> 00:23:35.716 align:start position:36% line:-2
詳細ビューを開き
結果を見ます

00:23:37.751 --> 00:23:40.154 align:start position:27% line:-2
こちらの詳細ビューを見れば
分かるように

00:23:40.287 --> 00:23:43.791 align:start position:29% line:-2
下のほうに
すでに暗い部分があるので

00:23:44.157 --> 00:23:48.362 align:start position:30% line:-2
このハイライトの集中が
問題のようです

00:23:48.962 --> 00:23:52.232 align:start position:32% line:-2
このように
詳細ビューを使えば―

00:23:52.332 --> 00:23:55.502 align:start position:30% line:-2
コードを読まずに
シェーダを理解できます

00:23:56.637 --> 00:24:01.675 align:start position:32% line:-2
デバッグナビゲータで
最初の例を見ましょう

00:23:56.637 --> 00:24:01.675 align:start position:32% line:-2
デバッグナビゲータで
最初の例を見ましょう

00:24:04.711 --> 00:24:09.283 align:start position:30% line:-2
この関数は主に 何度か
繰り返すループで―

00:24:09.383 --> 00:24:11.885 align:start position:32% line:-2
マップからサンプルを
蓄積します

00:24:13.287 --> 00:24:16.190 align:start position:34% line:-2
ループがハイライト
されているので―

00:24:16.290 --> 00:24:21.295 align:start position:30% line:-2
デバッグナビゲータで
繰り返しを確認できます

00:24:21.495 --> 00:24:27.534 align:start position:27% line:-2
ソースコードに沿って
各ループの変数が得られます

00:24:28.802 --> 00:24:32.539 align:start position:36% line:-2
ここに注目すると
繰り返すごとに―

00:24:32.639 --> 00:24:35.475 align:start position:27% line:-1
変数が違うことが分かります

00:24:37.244 --> 00:24:41.715 align:start position:30% line:-2
詳細ビューとこれを
合わせて使うと強力です

00:24:42.115 --> 00:24:46.253 align:start position:30% line:-2
最終的な色の
詳細ビューを表示します

00:24:46.353 --> 00:24:49.022 align:start position:34% line:-2
ここにハイライトが
集中しています

00:24:51.792 --> 00:24:54.728 align:start position:29% line:-2
デバッグナビゲータを使い
繰り返します

00:24:55.395 --> 00:25:01.301 align:start position:27% line:-2
繰り返すと最終的な色に
ハイライトが蓄積し始めます

00:24:55.395 --> 00:25:01.301 align:start position:27% line:-2
繰り返すと最終的な色に
ハイライトが蓄積し始めます

00:25:01.468 --> 00:25:04.805 align:start position:29% line:-2
しかしループの最後に向け
繰り返し続けると―

00:25:04.905 --> 00:25:07.474 align:start position:30% line:-1
あるパターンが現れます

00:25:07.708 --> 00:25:10.878 align:start position:30% line:-1
その理由を考えましょう

00:25:14.181 --> 00:25:19.386 align:start position:27% line:-2
デバッガが示すとおり
ウェイトの値がマイナスです

00:25:19.720 --> 00:25:25.592 align:start position:27% line:-2
このために最終的な色が
蓄積せずゆがめられています

00:25:26.293 --> 00:25:31.365 align:start position:34% line:-2
原因が分かったので
手早く修復します

00:25:34.868 --> 00:25:40.574 align:start position:32% line:-2
リロード変更ボタンで
結果を確認しましょう

00:25:42.643 --> 00:25:46.513 align:start position:29% line:-2
ご覧のとおり
もう暗い部分はありません

00:25:46.613 --> 00:25:50.284 align:start position:29% line:-2
継続ボタンをクリックして
アクションを見ます

00:25:54.888 --> 00:25:57.791 align:start position:34% line:-2
ハイライトは
修正されたようです

00:25:58.692 --> 00:26:01.662 align:start position:21% line:-2
Shader Debuggerの
使い方の一例です

00:25:58.692 --> 00:26:01.662 align:start position:21% line:-2
Shader Debuggerの
使い方の一例です

00:26:01.762 --> 00:26:05.699 align:start position:34% line:-2
詳細ビューの威力が
分かりましたか

00:26:05.833 --> 00:26:07.468 align:start position:29% line:-1
アルプにマイクを返します

00:26:07.568 --> 00:26:11.972 align:start position:43% line:-1
(拍手)

00:26:12.072 --> 00:26:13.273 align:start position:32% line:-1
ありがとう ハビエル

00:26:15.375 --> 00:26:21.081 align:start position:21% line:-2
Shader Debuggerの
全容が分かりましたね

00:26:22.616 --> 00:26:27.254 align:start position:12% line:-2
Shader DebuggerはMetal
シェーダに特化しています

00:26:27.354 --> 00:26:31.058 align:start position:34% line:-2
GPUの高度な
並行処理に対応し―

00:26:31.525 --> 00:26:35.129 align:start position:36% line:-2
バグの修正に
非常に効果的です

00:26:35.729 --> 00:26:41.635 align:start position:29% line:-2
非数と無限のハイライトで
誤りが見つけやすく―

00:26:42.503 --> 00:26:45.539 align:start position:34% line:-2
シェーダの理解にも
役立ちます

00:26:45.906 --> 00:26:51.044 align:start position:27% line:-2
詳細ビューを使えばコードを
読む必要はありません

00:26:51.912 --> 00:26:56.283 align:start position:30% line:-2
シェーダ開発に
良好な環境を提供します

00:26:56.683 --> 00:26:59.520 align:start position:16% line:-1
Shader Debuggerを使い―

00:27:00.554 --> 00:27:03.757 align:start position:29% line:-2
編集を始め
結果を繰り返してください

00:27:05.292 --> 00:27:11.298 align:start position:18% line:-2
最新ハードウェアのiOS
macOSやtvOSをサポートします

00:27:12.065 --> 00:27:15.002 align:start position:21% line:-1
そしてXcode 10で使えます

00:27:16.803 --> 00:27:21.708 align:start position:43% line:-1
(拍手)

00:27:21.808 --> 00:27:28.148 align:start position:27% line:-2
ビューアーとデバッガによる
問題の修復に続いて―

00:27:28.415 --> 00:27:32.886 align:start position:30% line:-2
シェーダの速度アップに
注目しましょう

00:27:36.557 --> 00:27:40.794 align:start position:27% line:-2
GPUの利用環境の最適化が
重要なのは―

00:27:40.894 --> 00:27:47.201 align:start position:27% line:-2
アプリケーションの
稼働速度を高めたいからです

00:27:47.734 --> 00:27:52.539 align:start position:29% line:-2
しかし最適化を始める前に
対象を知る必要があります

00:27:54.174 --> 00:27:58.745 align:start position:27% line:-2
GPU基盤ならMetalの
ワークロードのパスが多く―

00:27:59.046 --> 00:28:03.217 align:start position:30% line:-2
どのパスに注目するかが
非常に大切です

00:27:59.046 --> 00:28:03.217 align:start position:30% line:-2
どのパスに注目するかが
非常に大切です

00:28:03.984 --> 00:28:09.590 align:start position:27% line:-2
そのためにプロファイリング
ツールを充実させました

00:28:11.492 --> 00:28:15.863 align:start position:29% line:-2
GPUカウンタは
パフォーマンスを高めます

00:28:16.363 --> 00:28:19.700 align:start position:27% line:-2
エンコーダあるいは
ドローコールの時期を知らせ

00:28:19.800 --> 00:28:24.171 align:start position:29% line:-2
複数のカウンタが
ボトルネックを表示します

00:28:25.305 --> 00:28:30.477 align:start position:27% line:-2
拡張可能なパスが分かれば
パイプラインに移動できます

00:28:31.812 --> 00:28:35.015 align:start position:32% line:-2
シェーダに合った
コンパイルができて―

00:28:35.149 --> 00:28:38.585 align:start position:36% line:-2
命令の種類が
すべて分かります

00:28:39.953 --> 00:28:42.823 align:start position:21% line:-2
Shader Profilerを
使えば―

00:28:42.923 --> 00:28:47.528 align:start position:29% line:-2
ドローコールのタイミング
なども分かります

00:28:48.729 --> 00:28:53.066 align:start position:20% line:-2
今日 注目するのは
Shader Profilerです

00:28:53.167 --> 00:28:57.237 align:start position:29% line:-2
シェーダの最適化に役立つ
ワークフローも紹介します

00:29:00.407 --> 00:29:05.846 align:start position:12% line:-2
Metal Frame Debuggerの
パフォーマンスナビゲータで―

00:29:05.946 --> 00:29:10.951 align:start position:30% line:-2
パイプラインごとに
実行時間が表示されます

00:29:11.885 --> 00:29:17.191 align:start position:29% line:-2
最適化対象の拡張可能な
すべてのパイプラインです

00:29:18.225 --> 00:29:22.229 align:start position:27% line:-2
これを使ってドローコールに
アクセスもでき―

00:29:22.329 --> 00:29:25.999 align:start position:29% line:-2
描画中の対象を
直接 見ることができます

00:29:27.201 --> 00:29:29.903 align:start position:23% line:-1
iOSあるいはtvOSの場合―

00:29:30.370 --> 00:29:34.308 align:start position:27% line:-2
シェーダソースで各ラインの
実行コストが分かります

00:29:34.808 --> 00:29:38.979 align:start position:34% line:-2
時間がかかる場所が
明らかになります

00:29:39.079 --> 00:29:41.215 align:start position:27% line:-1
シェーダではラインごとです

00:29:42.449 --> 00:29:44.785 align:start position:34% line:-1
シェーダソースで―

00:29:44.885 --> 00:29:50.691 align:start position:25% line:-2
コードを編集しリロードして
タイミングの差を確認できます

00:29:52.760 --> 00:29:55.495 align:start position:21% line:-2
Shader Debuggerを
使うこともできます

00:29:56.196 --> 00:29:59.433 align:start position:25% line:-2
このワークフローは
アルゴリズムを最適化する時や

00:29:59.533 --> 00:30:04.605 align:start position:21% line:-2
コントロールフローがうまく動くか
確認したい時に使えます

00:29:59.533 --> 00:30:04.605 align:start position:21% line:-2
コントロールフローがうまく動くか
確認したい時に使えます

00:30:06.106 --> 00:30:11.512 align:start position:21% line:-2
Shader Profilerは
シェーダの最適化に有用で―

00:30:11.778 --> 00:30:15.215 align:start position:27% line:-1
A11ではさらに効果的です

00:30:16.283 --> 00:30:22.322 align:start position:18% line:-2
A11 Bionicチップは全面的に
AppleがデザインしたGPUです

00:30:22.422 --> 00:30:26.793 align:start position:30% line:-2
我々はシェーダの動作の
理解を支援します

00:30:27.995 --> 00:30:31.832 align:start position:30% line:-2
A11で得られる
この図に示されるのは―

00:30:31.932 --> 00:30:34.802 align:start position:34% line:-2
実行されたラインの
コストの内訳です

00:30:35.469 --> 00:30:38.939 align:start position:27% line:-2
シェーダは異なる
実行ユニットで構成されます

00:30:39.239 --> 00:30:43.143 align:start position:30% line:-2
１つを酷使すると
それが障害になり得ます

00:30:43.877 --> 00:30:47.014 align:start position:30% line:-2
ALUとメモリの内訳を
見れば―

00:30:47.414 --> 00:30:52.352 align:start position:29% line:-2
各実行ユニットで費やした
時間を確認できます

00:30:53.387 --> 00:30:58.192 align:start position:27% line:-2
我々はA11で命令の精度を
高める努力をしました

00:30:58.292 --> 00:31:03.664 align:start position:21% line:-2
floatでなくhalfを使えば
GPUバジェットは変わるはず

00:30:58.292 --> 00:31:03.664 align:start position:21% line:-2
floatでなくhalfを使えば
GPUバジェットは変わるはず

00:31:05.566 --> 00:31:09.970 align:start position:29% line:-2
可視化できる
もう１つの領域は同期です

00:31:10.237 --> 00:31:12.573 align:start position:34% line:-1
これが重要なのは―

00:31:12.673 --> 00:31:17.644 align:start position:27% line:-2
シェーダが同期を待たず
フル稼働してほしいからです

00:31:18.846 --> 00:31:22.750 align:start position:23% line:-2
シェーダコードで
テクスチャやバッファを読んだり

00:31:22.850 --> 00:31:28.622 align:start position:21% line:-2
アトミックやバリアを使うと
同期に時間を要するかもしれません

00:31:29.890 --> 00:31:33.227 align:start position:29% line:-2
だから我々は
シェーダからコールする―

00:31:33.327 --> 00:31:36.663 align:start position:29% line:-2
インライン関数のコストを
可視化しました

00:31:37.297 --> 00:31:43.337 align:start position:29% line:-2
最も高い関数を処理して
最適化することができます

00:31:43.504 --> 00:31:48.242 align:start position:43% line:-1
(拍手)

00:31:48.842 --> 00:31:52.880 align:start position:21% line:-2
AppleのA11 bionic
チップは―

00:31:52.980 --> 00:31:56.016 align:start position:30% line:-2
最高のプロファイリング
データを提供します

00:31:56.283 --> 00:32:00.087 align:start position:29% line:-2
今年 インライン関数でも
導入したのは―

00:31:56.283 --> 00:32:00.087 align:start position:29% line:-2
今年 インライン関数でも
導入したのは―

00:32:00.187 --> 00:32:03.724 align:start position:27% line:-2
各ラインのタイミング情報と
命令カテゴリ

00:32:03.891 --> 00:32:04.958 align:start position:39% line:-1
僕はマックス

00:32:05.058 --> 00:32:08.595 align:start position:29% line:-2
皆さんのシェーダの性能を
マックスにしたいのです

00:32:09.429 --> 00:32:13.600 align:start position:43% line:-1
(拍手)

00:32:13.700 --> 00:32:19.373 align:start position:23% line:-2
同じ水のシミュレーションを
僕のiPhoneでやってみます

00:32:20.941 --> 00:32:25.345 align:start position:30% line:-2
パフォーマンスごとに
フレームを変えてみます

00:32:25.512 --> 00:32:31.051 align:start position:29% line:-2
時間順に並べたフレームの
パイプライン一覧から―

00:32:31.218 --> 00:32:36.256 align:start position:27% line:-2
ノイズパイプラインに時間が
かかっていると分かります

00:32:36.990 --> 00:32:42.563 align:start position:25% line:-2
フラグメントシェーダでは
ほぼすべてが費やされています

00:32:42.663 --> 00:32:44.832 align:start position:30% line:-1
でも今年は進化しました

00:32:46.733 --> 00:32:50.604 align:start position:29% line:-2
シェーダがコールしている
関数ごとに―

00:32:50.704 --> 00:32:53.707 align:start position:34% line:-2
費やしている時間が
分かります

00:32:54.942 --> 00:32:59.413 align:start position:25% line:-2
ここをクリックすると
ソースコードファイルに飛び―

00:32:59.513 --> 00:33:01.849 align:start position:32% line:-2
そのラインを
調べることができます

00:32:59.513 --> 00:33:01.849 align:start position:32% line:-2
そのラインを
調べることができます

00:33:04.551 --> 00:33:08.355 align:start position:36% line:-2
この画面の右側に
見えているのは―

00:33:08.455 --> 00:33:12.526 align:start position:32% line:-2
この関数で使っている
時間の割合

00:33:12.860 --> 00:33:18.165 align:start position:29% line:-2
さらに下に行くと
各ラインの時間の割合です

00:33:19.199 --> 00:33:22.369 align:start position:21% line:-2
Shader Profilerは
最適化コードで動くので―

00:33:22.469 --> 00:33:25.539 align:start position:34% line:-2
コンパイラは命令を
再オーダーできます

00:33:25.639 --> 00:33:29.443 align:start position:32% line:-2
タイミング情報がない
ラインもあります

00:33:30.777 --> 00:33:34.381 align:start position:32% line:-2
タイミング情報の次は
命令カテゴリ

00:33:34.481 --> 00:33:35.749 align:start position:38% line:-1
見てみましょう

00:33:37.551 --> 00:33:41.688 align:start position:32% line:-2
ALUの計算に時間を
費やしています

00:33:41.788 --> 00:33:44.358 align:start position:30% line:-2
メモリとテクスチャから
読んでいます

00:33:44.725 --> 00:33:48.796 align:start position:32% line:-2
しかし心配なのは
同期に費やす時間です

00:33:48.896 --> 00:33:51.398 align:start position:30% line:-2
特にメモリの待機時間が
長いです

00:33:51.498 --> 00:33:54.935 align:start position:27% line:-2
これはつまり GPUが
データをすばやく読み込めず

00:33:55.035 --> 00:33:59.506 align:start position:21% line:-2
別のスレッドでALUを稼働しても
カバーできなかったということです

00:34:00.140 --> 00:34:02.109 align:start position:34% line:-1
原因を探りましょう

00:34:05.379 --> 00:34:09.083 align:start position:29% line:-2
パフォーマンスの数値から
到達したこのラインは―

00:34:09.183 --> 00:34:13.020 align:start position:29% line:-2
シェーダの全時間の
半分以上を費やしています

00:34:14.254 --> 00:34:16.989 align:start position:36% line:-2
命令カテゴリを
再度 検証します

00:34:17.091 --> 00:34:21.728 align:start position:32% line:-2
同期にかなりの時間を
費やしています

00:34:21.829 --> 00:34:22.830 align:start position:39% line:-1
なぜでしょう

00:34:26.467 --> 00:34:31.371 align:start position:27% line:-2
カラーテクスチャから読んだ
カラーの値を使っています

00:34:31.839 --> 00:34:33.306 align:start position:29% line:-1
ここで使うオフセットは―

00:34:34.274 --> 00:34:37.244 align:start position:32% line:-2
ノイズテクスチャから
読み込まれました

00:34:37.344 --> 00:34:39.746 align:start position:29% line:-1
つまり依存テクスチャです

00:34:39.847 --> 00:34:44.985 align:start position:23% line:-2
テクスチャからデータを
読み込むまでGPUは動きません

00:34:45.085 --> 00:34:47.688 align:start position:30% line:-1
どうすればいいでしょう

00:34:47.788 --> 00:34:51.759 align:start position:32% line:-2
ノイズテクスチャから
読み込む代わりに―

00:34:51.859 --> 00:34:55.329 align:start position:34% line:-2
GPUでノイズ値を
計算できます

00:34:55.829 --> 00:34:57.031 align:start position:39% line:-1
やってみます

00:34:59.233 --> 00:35:01.535 align:start position:34% line:-2
シェーダを
アップデートします

00:34:59.233 --> 00:35:01.535 align:start position:34% line:-2
シェーダを
アップデートします

00:35:02.469 --> 00:35:05.772 align:start position:27% line:-2
コンパイルしたらデバイスに
シェーダを送り―

00:35:05.873 --> 00:35:09.843 align:start position:27% line:-2
フレーム全体を再実行し
プロファイルをやり直します

00:35:09.943 --> 00:35:15.416 align:start position:27% line:-2
１つの変更がGPU全体に
影響する可能性があるので―

00:35:16.450 --> 00:35:18.519 align:start position:32% line:-1
終わったら確認します

00:35:20.587 --> 00:35:26.527 align:start position:27% line:-2
下から20超までシェーダで
３ミリ秒 費やしています

00:35:26.793 --> 00:35:30.397 align:start position:38% line:-2
命令カテゴリも
見てみましょう

00:35:33.434 --> 00:35:38.105 align:start position:30% line:-2
同期の合計時間が
大幅に短縮されており―

00:35:38.205 --> 00:35:41.575 align:start position:30% line:-2
GPUがしっかり働ける
状態です

00:35:42.442 --> 00:35:46.213 align:start position:29% line:-2
要するにシェーダの障害を
検出すれば―

00:35:46.313 --> 00:35:50.984 align:start position:30% line:-2
タイミング情報から
問題の所在が分かります

00:35:51.084 --> 00:35:54.955 align:start position:36% line:-2
命令カテゴリから
原因が分かります

00:35:55.222 --> 00:35:56.457 align:start position:43% line:-1
以上です

00:35:56.557 --> 00:35:58.025 align:start position:29% line:-1
アルプにマイクを返します

00:35:58.125 --> 00:36:02.663 align:start position:43% line:-1
(拍手)

00:35:58.125 --> 00:36:02.663 align:start position:43% line:-1
(拍手)

00:36:03.497 --> 00:36:04.631 align:start position:32% line:-1
ありがとう マックス

00:36:05.866 --> 00:36:10.537 align:start position:36% line:-2
最後にひとつだけ
言わせてください

00:36:10.637 --> 00:36:14.775 align:start position:27% line:-2
優れたツールを
より使いやすくする情報です

00:36:16.209 --> 00:36:20.013 align:start position:30% line:-2
オフラインでシェーダを
コンパイルしていれば―

00:36:20.114 --> 00:36:23.384 align:start position:27% line:-2
オンラインの
ランタイムコストは不要です

00:36:23.884 --> 00:36:26.620 align:start position:27% line:-2
オフラインで
コンパイルすることにより―

00:36:26.720 --> 00:36:32.259 align:start position:27% line:-2
新しいコンパイラで
シェーダのソースを保存し―

00:36:32.359 --> 00:36:36.663 align:start position:30% line:-2
どこからでもシェーダに
アクセスできます

00:36:37.731 --> 00:36:41.101 align:start position:29% line:-2
Xcodeプロジェクトで
コンパイルしているなら―

00:36:41.235 --> 00:36:44.238 align:start position:27% line:-2
ビルド設定で
この選択肢を起動しましょう

00:36:44.671 --> 00:36:47.708 align:start position:36% line:-2
コマンドラインを
使っているなら―

00:36:47.808 --> 00:36:51.745 align:start position:29% line:-2
Metalコンパイラに
“-MO”をパスするだけ

00:36:52.379 --> 00:36:55.816 align:start position:29% line:-2
しかしデバッグビルド内で
実行しないと―

00:36:55.916 --> 00:37:00.821 align:start position:25% line:-2
シェーダソースを含めて
Appをリリースしかねません

00:36:55.916 --> 00:37:00.821 align:start position:25% line:-2
シェーダソースを含めて
Appをリリースしかねません

00:37:01.955 --> 00:37:05.859 align:start position:34% line:-2
では今日の話を
おさらいしましょう

00:37:07.828 --> 00:37:09.763 align:start position:20% line:-1
まずGeometry Viewer

00:37:10.130 --> 00:37:14.701 align:start position:30% line:-2
頂点関連の問題を
集中的に調べられる他―

00:37:15.035 --> 00:37:17.337 align:start position:27% line:-2
視覚的問題を
デバッグすることもできます

00:37:17.438 --> 00:37:20.240 align:start position:34% line:-2
シェーダを
デバッグする前に―

00:37:20.340 --> 00:37:24.978 align:start position:21% line:-2
Geometry Viewerを
まずチェックしてください

00:37:26.046 --> 00:37:28.815 align:start position:20% line:-1
次にShader Debugger

00:37:28.949 --> 00:37:32.286 align:start position:32% line:-2
Metalシェーダの
強力なデバッガです

00:37:32.586 --> 00:37:36.156 align:start position:36% line:-2
バグを修正し
シェーダを理解し

00:37:36.256 --> 00:37:38.125 align:start position:30% line:-2
シェーダを開発する際に
役立ちます

00:37:39.560 --> 00:37:43.230 align:start position:21% line:-2
Shader Profilerで
可視性が高まり―

00:37:43.330 --> 00:37:48.635 align:start position:21% line:-2
A11 bionicチップによる
GPUの動作が分かります

00:37:49.937 --> 00:37:52.940 align:start position:27% line:-1
詳細はリンクをご覧ください

00:37:53.540 --> 00:37:58.812 align:start position:0% line:-2
明日10時の講演は“Metal
Game Performance Optimization”

00:37:58.912 --> 00:38:03.384 align:start position:29% line:-2
ゲームに共通する
パフォーマンスの問題と―

00:37:58.912 --> 00:38:03.384 align:start position:29% line:-2
ゲームに共通する
パフォーマンスの問題と―

00:38:03.484 --> 00:38:06.753 align:start position:30% line:-2
それを検出し修正する
ツールについて話します

00:38:06.854 --> 00:38:07.421 align:start position:45% line:-1
どうも

00:38:07.521 --> 00:38:09.223 align:start position:43% line:-1
(拍手)
