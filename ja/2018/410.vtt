WEBVTT

00:00:07.074 --> 00:00:16.383 align:start position:43% line:-1
(音楽)

00:00:17.384 --> 00:00:26.126 align:start position:43% line:-1
(拍手)

00:00:26.226 --> 00:00:27.327 align:start position:34% line:-1
おはようございます

00:00:27.427 --> 00:00:28.762 align:start position:34% line:-1
チャド･ウルフです

00:00:28.862 --> 00:00:31.198 align:start position:27% line:-1
Appleのエンジニアです

00:00:31.298 --> 00:00:33.066 align:start position:32% line:-1
このセッションでは―

00:00:33.167 --> 00:00:36.136 align:start position:23% line:-2
カスタムinstrumentの
話をします

00:00:37.237 --> 00:00:42.442 align:start position:34% line:-2
作りたくなる理由も
少し触れましょう

00:00:42.743 --> 00:00:47.681 align:start position:32% line:-2
盛りだくさんの内容を
入門 中級 上級の―

00:00:47.981 --> 00:00:50.384 align:start position:29% line:-1
３つに分けてお届けします

00:00:50.717 --> 00:00:56.557 align:start position:30% line:-2
ベストプラクティスを
本日 最後に紹介します

00:00:57.724 --> 00:01:00.627 align:start position:27% line:-1
では まず作りたい理由です

00:00:57.724 --> 00:01:00.627 align:start position:27% line:-1
では まず作りたい理由です

00:01:01.328 --> 00:01:04.730 align:start position:27% line:-2
Instrumentsには
有益なツールがあります

00:01:04.864 --> 00:01:09.803 align:start position:21% line:-2
アプリケーションとの互換性を
確認するSystem Trace

00:01:10.637 --> 00:01:15.242 align:start position:5% line:-2
Metal System Traceと組み合わせた
ビデオゲームのテンプレートは―

00:01:15.442 --> 00:01:20.080 align:start position:21% line:-2
アプリ上の機械的な画像の不具合や
フレームの消失などを解消しました

00:01:21.448 --> 00:01:26.854 align:start position:0% line:-2
Network Connections Instrumentを
お持ちであれば

00:01:26.954 --> 00:01:30.858 align:start position:25% line:-2
アプリ間の
TCP/IPの交信ができます

00:01:31.258 --> 00:01:36.163 align:start position:23% line:-2
そして おなじみの
Time Profilerです

00:01:36.296 --> 00:01:38.365 align:start position:30% line:-2
アプリ内の
時間がかかる処理を調べ

00:01:38.465 --> 00:01:42.069 align:start position:21% line:-2
原因がネットワーク階層なのか
ゲームエンジンなのかなど探ります

00:01:42.703 --> 00:01:46.373 align:start position:30% line:-1
当たり前のことですが―

00:01:46.740 --> 00:01:51.078 align:start position:36% line:-2
コードが分かれば
とても有益です

00:01:51.345 --> 00:01:57.050 align:start position:23% line:-2
IPアドレスやコールスタックの
仕組みを理解することで

00:01:57.217 --> 00:01:59.586 align:start position:25% line:-2
Time Profilerを
簡単にすることができます

00:01:59.920 --> 00:02:03.790 align:start position:30% line:-2
ではコードに不慣れだと
どうなるでしょう？

00:01:59.920 --> 00:02:03.790 align:start position:30% line:-2
ではコードに不慣れだと
どうなるでしょう？

00:02:03.891 --> 00:02:05.359 align:start position:30% line:-2
アプリの
ネットワークレイヤの―

00:02:05.459 --> 00:02:10.264 align:start position:21% line:-2
処理時間があまりにも
かかっていたら どう解決します？

00:02:10.464 --> 00:02:13.567 align:start position:23% line:-2
カスタムinstrumentの
出番です

00:02:13.800 --> 00:02:18.805 align:start position:27% line:-2
アプリケーションやレイヤの
状況について―

00:02:18.906 --> 00:02:23.544 align:start position:27% line:-2
コード初心者が分かるように
示せるのです

00:02:24.745 --> 00:02:29.750 align:start position:21% line:-2
Expert System技術の
有用性について―

00:02:29.850 --> 00:02:31.318 align:start position:36% line:-1
上級編で話します

00:02:31.485 --> 00:02:34.888 align:start position:27% line:-2
これによって
自動で悪いパターンを探し―

00:02:34.988 --> 00:02:39.126 align:start position:23% line:-2
アンチパターンを検出する
instrumentを作れます

00:02:40.294 --> 00:02:43.363 align:start position:32% line:-2
ではアーキテクチャを
見てみましょう

00:02:44.198 --> 00:02:46.066 align:start position:39% line:-1
そのために―

00:02:47.367 --> 00:02:48.669 align:start position:36% line:-1
振り返ってみます

00:02:49.102 --> 00:02:52.172 align:start position:29% line:-2
Instrumentsは
当時も今も―

00:02:52.272 --> 00:02:57.611 align:start position:32% line:-2
単なるドキュメントの
ライブラリです

00:02:57.811 --> 00:03:01.148 align:start position:32% line:-2
レコードを押すと
ツールが実行されます

00:02:57.811 --> 00:03:01.148 align:start position:32% line:-2
レコードを押すと
ツールが実行されます

00:03:01.515 --> 00:03:06.053 align:start position:16% line:-2
以前との主な違いは
Instrumentsはその組織構造上

00:03:06.153 --> 00:03:09.356 align:start position:30% line:-2
コードを書く速度を
上げられなかったのです

00:03:09.623 --> 00:03:12.793 align:start position:27% line:-1
当時は問題ありませんでした

00:03:12.893 --> 00:03:16.597 align:start position:21% line:-2
アセットやパフォーマンスツールを
引き継いでいたからです

00:03:16.697 --> 00:03:19.700 align:start position:32% line:-2
独自のレコード技術や
論理解析がありました

00:03:19.800 --> 00:03:23.904 align:start position:7% line:-2
トレースからデータを得るために
カスタムstorage mechanismを作り

00:03:24.071 --> 00:03:27.140 align:start position:20% line:-2
アプリケーションに組み込むのに
カスタムUIを作る必要がありました

00:03:27.774 --> 00:03:30.210 align:start position:29% line:-2
Instrumentsと
該当モデルの―

00:03:30.310 --> 00:03:33.046 align:start position:30% line:-1
維持費が急上昇しました

00:03:33.514 --> 00:03:36.116 align:start position:30% line:-2
その理由は毎回
各７個のカスタムUIと

00:03:36.216 --> 00:03:37.851 align:start position:11% line:-2
カスタムstorage mechanismの
作成が必要で

00:03:37.951 --> 00:03:41.021 align:start position:23% line:-2
それを変更する
新たな機能を加えたかったのです

00:03:41.255 --> 00:03:43.123 align:start position:30% line:-1
従来型のモデルを持続し

00:03:43.223 --> 00:03:46.994 align:start position:21% line:-2
メンテナンスにかかるコスト負担を
皆さんに続けてほしくありません

00:03:47.094 --> 00:03:51.798 align:start position:32% line:-2
新しい機能より
コスト問題の解決を―

00:03:51.999 --> 00:03:53.167 align:start position:38% line:-1
優先したのです

00:03:53.467 --> 00:03:55.169 align:start position:21% line:-1
新しいInstrumentsは―

00:03:55.269 --> 00:04:00.140 align:start position:27% line:-2
カスタムUIなどの代わりに
２つの標準化要素を使います

00:03:55.269 --> 00:04:00.140 align:start position:27% line:-2
カスタムUIなどの代わりに
２つの標準化要素を使います

00:04:00.274 --> 00:04:03.410 align:start position:23% line:-2
Standard UIと
Analysis Coreです

00:04:04.011 --> 00:04:08.215 align:start position:16% line:-2
Standard UIは
現代のInstrumentsのUIで―

00:04:08.549 --> 00:04:11.151 align:start position:25% line:-2
Analysis Coreと
組み合わせます

00:04:11.418 --> 00:04:14.655 align:start position:25% line:-2
Analysis Coreは
データベースと―

00:04:14.855 --> 00:04:17.057 align:start position:30% line:-2
エキスパートシステムの
中間です

00:04:17.224 --> 00:04:22.062 align:start position:23% line:-2
そしてInstrumentsの
重要な基盤となります

00:04:22.329 --> 00:04:26.733 align:start position:20% line:-2
現代の構造でInstrumentを
作ると―

00:04:26.900 --> 00:04:33.473 align:start position:4% line:-2
Standard UIとAnalysis Coreの
custom configurationが必要です

00:04:34.007 --> 00:04:37.477 align:start position:27% line:-1
こちらの画面をご覧ください

00:04:37.578 --> 00:04:40.714 align:start position:25% line:-1
System Traceと―

00:04:41.048 --> 00:04:43.517 align:start position:34% line:-1
ゲームテンプレート

00:04:43.750 --> 00:04:45.819 align:start position:29% line:-2
ネットワークコネクション
テンプレートと―

00:04:46.153 --> 00:04:48.555 align:start position:18% line:-1
Time Profilerの画面です

00:04:48.789 --> 00:04:50.824 align:start position:29% line:-2
全ドキュメントの
Instrumentは―

00:04:50.924 --> 00:04:55.028 align:start position:4% line:-2
Standard UIとAnalysis Coreで
ビルドされました

00:04:55.362 --> 00:04:57.764 align:start position:30% line:-1
同様に皆さんも作れます

00:04:58.699 --> 00:05:03.770 align:start position:7% line:-2
Xcode 10とInstruments 10で
同じツールを提供しています

00:04:58.699 --> 00:05:03.770 align:start position:7% line:-2
Xcode 10とInstruments 10で
同じツールを提供しています

00:05:03.871 --> 00:05:08.542 align:start position:21% line:-2
Xcodeと皆さんの
Instrumentsの違いは―

00:05:08.642 --> 00:05:11.211 align:start position:38% line:-1
作成者だけです

00:05:12.779 --> 00:05:15.215 align:start position:18% line:-2
ライブラリにInstrumentsが
表示されます

00:05:15.349 --> 00:05:18.685 align:start position:29% line:-2
トップは
アクティビティモニタです

00:05:19.019 --> 00:05:23.757 align:start position:32% line:-2
ドラッグ＆ドロップで
レコードを残します

00:05:24.124 --> 00:05:27.261 align:start position:25% line:-2
Analysis Coreに
データを入れると―

00:05:27.361 --> 00:05:30.998 align:start position:21% line:-2
Standard UIがグラフと
Table Viewを表示します

00:05:31.765 --> 00:05:37.437 align:start position:29% line:-2
トップにグラフがあり
２通りで表示されています

00:05:37.638 --> 00:05:41.608 align:start position:34% line:-2
１つ以上のグラフで
定義できます

00:05:42.576 --> 00:05:45.379 align:start position:36% line:-2
定義するグラフを
選ぶ方法は―

00:05:45.479 --> 00:05:48.582 align:start position:21% line:-2
Instrumentsアイコンの
この部分を使います

00:05:48.682 --> 00:05:52.452 align:start position:29% line:-2
CPUからネットワークに
変更できます

00:05:53.987 --> 00:05:57.624 align:start position:30% line:-2
どのグラフにも
一定のレーンがあります

00:05:57.724 --> 00:06:01.795 align:start position:29% line:-2
CPUの使用率で
３つレーンを定義しました

00:05:57.724 --> 00:06:01.795 align:start position:29% line:-2
CPUの使用率で
３つレーンを定義しました

00:06:03.130 --> 00:06:06.833 align:start position:18% line:-2
レーンはAnalysis Coreの
テーブルに結びつきます

00:06:06.934 --> 00:06:11.438 align:start position:29% line:-2
同テーブル内の別カラムの
場合もあります

00:06:12.673 --> 00:06:15.108 align:start position:21% line:-1
Instrumentsの下部は―

00:06:15.209 --> 00:06:18.846 align:start position:21% line:-2
Detail Viewと呼ばれる
重要な部分です

00:06:19.246 --> 00:06:22.649 align:start position:12% line:-1
event-by-event listや―

00:06:22.749 --> 00:06:25.752 align:start position:27% line:-2
データのアグリゲーションや
サマリも見られます

00:06:27.521 --> 00:06:30.757 align:start position:32% line:-1
グラフと同じように―

00:06:30.958 --> 00:06:33.594 align:start position:21% line:-2
Instrumentsの項目数を
定義できます

00:06:33.694 --> 00:06:37.030 align:start position:38% line:-2
ジャンプバーで
項目を選び―

00:06:37.130 --> 00:06:39.900 align:start position:27% line:-2
自分で定義づけるタイトルの
詳細を選択します

00:06:40.868 --> 00:06:43.070 align:start position:29% line:-1
グラフのレーンと同じく―

00:06:43.170 --> 00:06:47.474 align:start position:18% line:-2
全項目がAnalysis Coreの
テーブルに結び付いています

00:06:47.574 --> 00:06:51.044 align:start position:34% line:-2
データを受け取って
レコードします

00:06:51.145 --> 00:06:54.715 align:start position:38% line:-2
特別なコードは
必要ありません

00:06:56.049 --> 00:07:01.889 align:start position:18% line:-2
Analysis Coreは すべて
テーブルで表示されます

00:06:56.049 --> 00:07:01.889 align:start position:18% line:-2
Analysis Coreは すべて
テーブルで表示されます

00:07:01.989 --> 00:07:04.491 align:start position:38% line:-1
テーブルとは―

00:07:05.058 --> 00:07:09.429 align:start position:30% line:-2
ローの集合体で
構造は定義されています

00:07:09.530 --> 00:07:11.698 align:start position:29% line:-1
データベースに似ています

00:07:12.466 --> 00:07:16.370 align:start position:32% line:-2
スキーマはカラムや
その名前を定義します

00:07:16.470 --> 00:07:18.138 align:start position:20% line:-1
新しいAnalysis Coreは

00:07:18.238 --> 00:07:20.807 align:start position:16% line:-2
engineering typeという
システムを使っています

00:07:20.974 --> 00:07:26.280 align:start position:23% line:-2
標準UIの中でも データの保存
視覚化 解析の方法が分かります

00:07:27.447 --> 00:07:32.352 align:start position:34% line:-2
テーブルの構造を
スキーマが説明し―

00:07:32.586 --> 00:07:36.223 align:start position:34% line:-2
コンテンツの説明に
属性を使用できます

00:07:36.523 --> 00:07:39.226 align:start position:32% line:-2
何がテーブルに入るか
分かります

00:07:39.426 --> 00:07:44.264 align:start position:16% line:-2
Objective-CかSwiftでは
スキーマはクラスで

00:07:44.498 --> 00:07:46.266 align:start position:30% line:-1
ローはインスタンスです

00:07:46.533 --> 00:07:49.837 align:start position:29% line:-1
スキーマの名称は固有です

00:07:49.937 --> 00:07:53.273 align:start position:29% line:-2
Objective-Cの
クラスの名前や―

00:07:53.407 --> 00:07:56.743 align:start position:27% line:-2
Stringの代わりの
NSStringと同じです

00:07:57.044 --> 00:08:00.147 align:start position:36% line:-2
上級編で
重要な点ですが―

00:07:57.044 --> 00:08:00.147 align:start position:36% line:-2
上級編で
重要な点ですが―

00:08:00.814 --> 00:08:02.115 align:start position:39% line:-1
先に触れます

00:08:02.883 --> 00:08:05.886 align:start position:34% line:-2
スキーマの例として
tickがあります

00:08:06.019 --> 00:08:08.655 align:start position:29% line:-2
Instrumentsの
スキーマの１つです

00:08:08.755 --> 00:08:11.258 align:start position:32% line:-1
統計計算で使用する―

00:08:11.358 --> 00:08:15.262 align:start position:23% line:-2
総合的なClock Tickの
テーブルを維持していました

00:08:15.796 --> 00:08:19.199 align:start position:23% line:-2
カラムは１つで
Sample Timeを使う―

00:08:19.299 --> 00:08:21.635 align:start position:34% line:-1
シンプルな構造です

00:08:22.102 --> 00:08:24.104 align:start position:25% line:-1
さらにテーブルの特徴である―

00:08:24.238 --> 00:08:27.541 align:start position:27% line:-2
周波数に属する可能性のある
視覚属性を定義づけます

00:08:27.708 --> 00:08:33.480 align:start position:25% line:-2
10属性でtickスキーマに
テーブルを作るとしましょう

00:08:33.947 --> 00:08:38.118 align:start position:29% line:-2
１秒10タイムスタンプで
データ入力が必要だと―

00:08:38.251 --> 00:08:40.386 align:start position:30% line:-1
プロバイダは分かります

00:08:40.520 --> 00:08:43.857 align:start position:23% line:-2
こうしてテーブルに書き込んだ
データと情報伝達ができるのです

00:08:44.491 --> 00:08:48.462 align:start position:34% line:-2
入門編の情報は
これで十分でしょう

00:08:48.762 --> 00:08:53.767 align:start position:16% line:-2
XcodeでのInstrumentsの
作り方をお示しします

00:08:53.901 --> 00:08:56.470 align:start position:23% line:-2
また tickを
Detail Viewで示す―

00:08:56.570 --> 00:09:00.107 align:start position:23% line:-2
Instrumentの作り方も
お伝えします

00:08:56.570 --> 00:09:00.107 align:start position:23% line:-2
Instrumentの作り方も
お伝えします

00:09:00.307 --> 00:09:03.777 align:start position:29% line:-1
では同僚のキャスパーが―

00:09:03.877 --> 00:09:05.445 align:start position:41% line:-1
実演します

00:09:05.679 --> 00:09:08.315 align:start position:43% line:-1
(拍手)

00:09:08.448 --> 00:09:09.583 align:start position:32% line:-1
ありがとうございます

00:09:09.950 --> 00:09:15.589 align:start position:20% line:-2
カスタムinstrumentを作り
実行する方法を説明します

00:09:16.256 --> 00:09:19.059 align:start position:27% line:-1
tickスキーマを使って―

00:09:19.259 --> 00:09:22.796 align:start position:23% line:-2
一定の頻度で
Instrumentを作ります

00:09:23.764 --> 00:09:26.333 align:start position:29% line:-1
パッケージを説明したり―

00:09:26.700 --> 00:09:30.571 align:start position:29% line:-2
Instrumentsで
テストする方法を学びます

00:09:31.071 --> 00:09:32.005 align:start position:39% line:-1
始めましょう

00:09:33.173 --> 00:09:35.876 align:start position:29% line:-1
Xcodeと同じように―

00:09:36.009 --> 00:09:38.345 align:start position:27% line:-1
新しいパッケージを作ります

00:09:38.612 --> 00:09:40.547 align:start position:12% line:-1
New Xcode Projectに飛び―

00:09:40.848 --> 00:09:43.984 align:start position:20% line:-2
Instrumentsパッケージを
選びます

00:09:45.252 --> 00:09:49.790 align:start position:20% line:-2
Instrumentsパッケージの
デフォルト名を入力します

00:09:49.923 --> 00:09:51.258 align:start position:30% line:-1
“Ticks”とします

00:09:52.693 --> 00:09:53.827 align:start position:30% line:-1
“Next”をクリック

00:09:54.561 --> 00:09:55.729 align:start position:27% line:-1
“Create”をクリック

00:09:59.733 --> 00:10:04.037 align:start position:4% line:-2
Xcodeが package definitionと
package targetを持つ―

00:09:59.733 --> 00:10:04.037 align:start position:4% line:-2
Xcodeが package definitionと
package targetを持つ―

00:10:04.304 --> 00:10:05.873 align:start position:27% line:-1
プロジェクトを作成しました

00:10:07.674 --> 00:10:09.009 align:start position:38% line:-1
中を見てみます

00:10:10.410 --> 00:10:13.747 align:start position:29% line:-2
パッケージは
XMLのシンタックスです

00:10:13.981 --> 00:10:19.186 align:start position:27% line:-2
ID タイトル オーナーが
含まれています

00:10:19.319 --> 00:10:23.290 align:start position:23% line:-2
パッケージをインストールすると
これらのフィールドが見られます

00:10:24.758 --> 00:10:28.128 align:start position:34% line:-2
スキーマとモデラを
定義して―

00:10:29.429 --> 00:10:30.898 align:start position:41% line:-1
開始します

00:10:31.031 --> 00:10:36.069 align:start position:25% line:-2
先に定めたtickスキーマを
使うのでガイドを消します

00:10:39.406 --> 00:10:45.112 align:start position:16% line:-2
ベースパッケージからスキーマの
要素とfirst nameを特定して―

00:10:47.381 --> 00:10:49.383 align:start position:36% line:-1
インポートします

00:10:53.554 --> 00:10:56.557 align:start position:29% line:-2
Instrumentsの
準備が整いました

00:10:58.992 --> 00:11:02.262 align:start position:32% line:-2
複雑な要素を
簡単に定義するため―

00:10:58.992 --> 00:11:02.262 align:start position:32% line:-2
複雑な要素を
簡単に定義するため―

00:11:02.496 --> 00:11:04.832 align:start position:30% line:-2
Xcodeで
スニペットを利用します

00:11:05.165 --> 00:11:08.435 align:start position:16% line:-2
要素名を
例えばInstrumentと書き込み―

00:11:08.836 --> 00:11:11.972 align:start position:34% line:-1
リターンを押します

00:11:13.707 --> 00:11:17.244 align:start position:30% line:-2
Instrumentに
ユニークIDと―

00:11:21.215 --> 00:11:24.918 align:start position:16% line:-2
後でInstrumentsライブラリに
出現するプロパティをいくつか入力

00:11:29.890 --> 00:11:32.025 align:start position:34% line:-1
10ミリ秒ごとに―

00:11:34.194 --> 00:11:35.863 align:start position:29% line:-2
tickを書き込む
Instrumentです

00:11:39.199 --> 00:11:43.937 align:start position:11% line:-2
このInstrumentがライブラリから
trace documentにドロップした時

00:11:44.037 --> 00:11:46.907 align:start position:30% line:-1
テーブルが作成されます

00:11:47.875 --> 00:11:52.012 align:start position:16% line:-2
テーブルIDは Instrumentの
定義内で固有でなければなりません

00:11:52.546 --> 00:11:54.148 align:start position:21% line:-1
“tick-table”とします

00:11:56.049 --> 00:11:57.284 align:start position:25% line:-1
schema-refの中に―

00:11:57.384 --> 00:12:01.221 align:start position:18% line:-2
すでにtickにインポートされている
スキーマのリファレンスが必要です

00:11:57.384 --> 00:12:01.221 align:start position:18% line:-2
すでにtickにインポートされている
スキーマのリファレンスが必要です

00:12:04.424 --> 00:12:07.361 align:start position:25% line:-2
Track Viewと
Detail Viewでの―

00:12:07.794 --> 00:12:09.863 align:start position:36% line:-1
表示を定義します

00:12:10.464 --> 00:12:12.266 align:start position:32% line:-1
グラフ要素を使います

00:12:14.268 --> 00:12:17.905 align:start position:30% line:-2
グラフの中のタイトルを
“Ticks”とします

00:12:19.373 --> 00:12:21.542 align:start position:32% line:-1
レーンのタイトルです

00:12:24.211 --> 00:12:27.080 align:start position:36% line:-2
事前に作成した
テーブルとして―

00:12:27.214 --> 00:12:31.552 align:start position:30% line:-2
tickテーブルの
リファレンスが必要です

00:12:34.221 --> 00:12:37.457 align:start position:27% line:-2
これでグラフの
プロッティングを特定します

00:12:38.158 --> 00:12:39.927 align:start position:30% line:-1
プロット要素を使います

00:12:40.627 --> 00:12:42.563 align:start position:41% line:-1
基本的に―

00:12:42.663 --> 00:12:47.267 align:start position:27% line:-2
カラムのmnemonicを
パスする必要があります

00:12:48.101 --> 00:12:49.670 align:start position:38% line:-1
グラフ化します

00:12:52.940 --> 00:12:57.444 align:start position:29% line:-2
タイムスタンプが
見られるようにするため―

00:12:57.711 --> 00:13:00.681 align:start position:32% line:-1
リスト要素を使います

00:12:57.711 --> 00:13:00.681 align:start position:32% line:-1
リスト要素を使います

00:13:02.883 --> 00:13:07.888 align:start position:21% line:-2
レーン要素と同じく
table refで表示される―

00:13:10.257 --> 00:13:13.260 align:start position:34% line:-2
リストのタイトルを
パスします

00:13:15.028 --> 00:13:17.030 align:start position:30% line:-1
見たいカラムも同じです

00:13:20.467 --> 00:13:25.072 align:start position:29% line:-2
Instrumentsを
実行する準備ができました

00:13:25.839 --> 00:13:28.909 align:start position:25% line:-1
Xcodeスキーマを使います

00:13:29.576 --> 00:13:30.611 align:start position:39% line:-1
やってみます

00:13:33.413 --> 00:13:35.716 align:start position:30% line:-1
ビルドエラーが出ました

00:13:35.816 --> 00:13:39.153 align:start position:36% line:-2
IDサポートが
表示されています

00:13:39.253 --> 00:13:41.154 align:start position:36% line:-1
エラーはここです

00:13:41.255 --> 00:13:45.092 align:start position:29% line:-2
カラムのタイムスタンプが
ないという内容です

00:13:45.626 --> 00:13:48.695 align:start position:30% line:-2
“time”にしないと
いけません

00:13:49.029 --> 00:13:50.230 align:start position:41% line:-1
修正して―

00:13:51.798 --> 00:13:53.000 align:start position:41% line:-1
実行します

00:13:55.335 --> 00:13:57.471 align:start position:36% line:-1
確認できるのは―

00:13:57.671 --> 00:14:00.340 align:start position:29% line:-2
Instrumentsの
コピーだからです

00:13:57.671 --> 00:14:00.340 align:start position:29% line:-2
Instrumentsの
コピーだからです

00:14:00.841 --> 00:14:04.044 align:start position:34% line:-2
アイコンが違うので
分かります

00:14:04.745 --> 00:14:08.382 align:start position:32% line:-2
一時的にパッケージを
取り込みます

00:14:08.715 --> 00:14:11.685 align:start position:29% line:-1
もっと簡単に繰り返せます

00:14:13.487 --> 00:14:16.590 align:start position:29% line:-1
取り込みを確認するには―

00:14:16.723 --> 00:14:19.993 align:start position:4% line:-2
New Package Management UIで
分かります

00:14:20.294 --> 00:14:23.363 align:start position:21% line:-2
“Instruments”の
“Preferences”から―

00:14:23.730 --> 00:14:24.965 align:start position:39% line:-1
確認できます

00:14:27.501 --> 00:14:31.705 align:start position:30% line:-2
新しく作成された
パッケージを見られます

00:14:31.805 --> 00:14:34.274 align:start position:27% line:-1
一時的に取り込まれています

00:14:35.642 --> 00:14:38.178 align:start position:32% line:-2
システムパッケージも
あります

00:14:38.312 --> 00:14:42.583 align:start position:36% line:-2
ここに表示される
リンクを使えます

00:14:44.718 --> 00:14:47.221 align:start position:12% line:-2
Ticksパッケージは
Ticks Instrumentを含みます

00:14:47.387 --> 00:14:48.922 align:start position:36% line:-1
テストしましょう

00:14:51.625 --> 00:14:53.126 align:start position:32% line:-1
空のテンプレートです

00:14:53.594 --> 00:14:56.663 align:start position:30% line:-2
ターゲットを
MacBookにします

00:15:00.367 --> 00:15:03.570 align:start position:23% line:-2
ライブラリで
Instrumentを探します

00:15:04.671 --> 00:15:06.306 align:start position:32% line:-1
“Ticks”と入力

00:15:08.509 --> 00:15:13.447 align:start position:5% line:-2
package definitionから入力された
全プロパティが表示されます

00:15:15.015 --> 00:15:17.017 align:start position:30% line:-1
ドラッグ＆ドロップし―

00:15:19.753 --> 00:15:21.688 align:start position:32% line:-1
すぐにレコードします

00:15:26.093 --> 00:15:31.899 align:start position:20% line:-2
下位ペインを見ると10ミリ秒ごとに
データが生成され増えています

00:15:33.267 --> 00:15:36.136 align:start position:30% line:-2
detailとグラフは
調整し合っています

00:15:36.270 --> 00:15:40.107 align:start position:12% line:-2
ローをクリックすると
inspection headが移動します

00:15:41.008 --> 00:15:42.843 align:start position:29% line:-1
グラフをズームインします

00:15:42.976 --> 00:15:45.379 align:start position:23% line:-2
Optionを押してクリックし
ドラッグします

00:15:48.682 --> 00:15:51.952 align:start position:29% line:-1
tickが刻まれています

00:15:54.221 --> 00:15:57.090 align:start position:29% line:-1
パッケージの作り方でした

00:15:57.457 --> 00:16:01.228 align:start position:20% line:-2
ではチャドが
Standard UIの話をします

00:15:57.457 --> 00:16:01.228 align:start position:20% line:-2
ではチャドが
Standard UIの話をします

00:16:02.029 --> 00:16:04.765 align:start position:43% line:-1
(拍手)

00:16:04.865 --> 00:16:06.366 align:start position:41% line:-1
ありがとう

00:16:06.700 --> 00:16:09.736 align:start position:32% line:-2
初めての
プロジェクトとして―

00:16:09.837 --> 00:16:13.307 align:start position:25% line:-2
基本のInstrumentの
作り方を説明しました

00:16:13.607 --> 00:16:16.610 align:start position:38% line:-2
次はグラフと
詳細について―

00:16:16.710 --> 00:16:21.114 align:start position:27% line:-2
また実際のデータでの対応を
説明します

00:16:21.548 --> 00:16:24.051 align:start position:32% line:-1
グラフレーンからです

00:16:24.751 --> 00:16:28.689 align:start position:30% line:-2
キャスパーは
プロット要素を使って―

00:16:28.856 --> 00:16:30.824 align:start position:36% line:-2
グラフとレーンを
定義しました

00:16:31.325 --> 00:16:32.693 align:start position:36% line:-1
プロット要素は―

00:16:33.260 --> 00:16:36.263 align:start position:27% line:-2
Standard UIへの
指示方法です

00:16:36.363 --> 00:16:39.166 align:start position:36% line:-2
テーブルの
全コンテンツを―

00:16:39.299 --> 00:16:41.835 align:start position:30% line:-2
レーンに割り当てるよう
指示します

00:16:42.102 --> 00:16:48.675 align:start position:27% line:-2
グラフの作り方やその扱いを
プロット要素が決めるには

00:16:48.876 --> 00:16:53.547 align:start position:29% line:-2
カラムとスキーマの両方を
確認することです

00:16:53.914 --> 00:16:57.751 align:start position:30% line:-2
インターバルスキーマは
継続時間があり―

00:16:57.851 --> 00:17:02.022 align:start position:29% line:-2
ポイントスキーマは
タイムスタンプと同じです

00:16:57.851 --> 00:17:02.022 align:start position:29% line:-2
ポイントスキーマは
タイムスタンプと同じです

00:17:02.489 --> 00:17:05.959 align:start position:29% line:-2
カラムがマグニチュードを
ターゲットとした時は―

00:17:06.059 --> 00:17:10.564 align:start position:34% line:-2
このように
棒グラフを作れます

00:17:11.397 --> 00:17:14.134 align:start position:29% line:-2
もう１つは
ライフサイクルレーンで―

00:17:14.233 --> 00:17:19.272 align:start position:23% line:-2
インターバルスキーマですが
stateのカラムを選択します

00:17:19.373 --> 00:17:24.044 align:start position:18% line:-2
stateはマグニチュードがないので
棒グラフは作成しません

00:17:24.411 --> 00:17:27.513 align:start position:14% line:-2
Standard UIは インターバルを
関連づけることができ―

00:17:27.614 --> 00:17:29.883 align:start position:11% line:-2
state style treatmentを
自動的に選びます

00:17:30.017 --> 00:17:35.756 align:start position:21% line:-2
そして丸長方形型に分類されるので
平らな棒グラフとは異なります

00:17:36.256 --> 00:17:39.393 align:start position:29% line:-2
Standard UIは
こうした調整が可能です

00:17:39.493 --> 00:17:42.129 align:start position:18% line:-2
それでInstruments UIを
安定させます

00:17:42.262 --> 00:17:44.932 align:start position:30% line:-2
私たちが
状態図を定義する場合―

00:17:45.065 --> 00:17:48.068 align:start position:29% line:-2
Standard UIは
同じ処理を行います

00:17:48.168 --> 00:17:52.839 align:start position:16% line:-2
それがInstrumentsのユーザの
利便性を高めています

00:17:54.341 --> 00:17:58.979 align:start position:30% line:-2
グラフや多くのレーンを
作りたいなら―

00:17:59.079 --> 00:18:02.616 align:start position:30% line:-2
プロットテンプレートを
定義できます

00:17:59.079 --> 00:18:02.616 align:start position:30% line:-2
プロットテンプレートを
定義できます

00:18:02.916 --> 00:18:06.019 align:start position:29% line:-2
テーブルでカラムを選べる
要素を除いて―

00:18:06.120 --> 00:18:10.324 align:start position:29% line:-1
プロットに類似しています

00:18:10.424 --> 00:18:14.394 align:start position:30% line:-2
そしてカラムで値ごとに
ローを分けて作ります

00:18:15.896 --> 00:18:18.432 align:start position:23% line:-2
スパイクまたはアクティビティの
停止区間を限定して見たい場合は

00:18:18.532 --> 00:18:19.933 align:start position:30% line:-1
ヒストグラムがあります

00:18:20.067 --> 00:18:24.838 align:start position:23% line:-2
100ミリ秒ほどタイムラインを
休ませることができます

00:18:24.972 --> 00:18:27.975 align:start position:27% line:-2
COUNT SUM または
最大値 最小値で―

00:18:28.242 --> 00:18:33.747 align:start position:27% line:-2
バケットのマグニチュードを
増やすことができます

00:18:33.847 --> 00:18:36.316 align:start position:36% line:-1
一番よい方法は―

00:18:36.416 --> 00:18:42.356 align:start position:16% line:-2
アクティビティのスパイクを
System Traceで探すことです

00:18:44.024 --> 00:18:47.794 align:start position:27% line:-2
UIの下半分にある
Detailsの話をします

00:18:48.362 --> 00:18:50.664 align:start position:30% line:-1
“List”の画面です

00:18:50.764 --> 00:18:55.102 align:start position:4% line:-2
UI内のテーブルと
Analysis CoreとTable Viewの―

00:18:55.235 --> 00:18:57.905 align:start position:29% line:-1
シンプルなマッピングです

00:18:58.672 --> 00:19:00.107 align:start position:29% line:-1
“アグリゲーション”です

00:18:58.672 --> 00:19:00.107 align:start position:29% line:-1
“アグリゲーション”です

00:19:00.707 --> 00:19:04.011 align:start position:30% line:-2
タイムコンポーネントを
減じたり―

00:19:04.111 --> 00:19:08.849 align:start position:32% line:-2
テーブルの中の統計を
取りたいですよね

00:19:09.283 --> 00:19:11.418 align:start position:34% line:-2
アグリゲーションを
定義する時―

00:19:11.652 --> 00:19:14.621 align:start position:36% line:-1
カラムは関数です

00:19:14.721 --> 00:19:17.758 align:start position:23% line:-2
SUM 平均値 COUNTなど
異種の統計計算機能を使い―

00:19:17.858 --> 00:19:23.497 align:start position:25% line:-2
望みどおりの
アグリゲーションviewを―

00:19:23.597 --> 00:19:26.567 align:start position:34% line:-1
作ることができます

00:19:28.035 --> 00:19:32.072 align:start position:29% line:-2
アグリゲーションの利点は
階層を定義することです

00:19:32.172 --> 00:19:36.643 align:start position:23% line:-2
ここで 仮想メモリ階層の中に
プロセススレッドを定義しました

00:19:36.810 --> 00:19:39.713 align:start position:32% line:-2
プロセスや その中の
各スレッドによって―

00:19:39.813 --> 00:19:44.084 align:start position:34% line:-2
分析された全体を
見ることができます

00:19:44.184 --> 00:19:45.986 align:start position:29% line:-1
該当するプロセス内でです

00:19:46.086 --> 00:19:50.724 align:start position:23% line:-2
アグリゲーションは 大量の
データの概要を見るのに最適です

00:19:52.059 --> 00:19:54.862 align:start position:27% line:-2
Call Treeは
新しいアグリゲーションです

00:19:55.362 --> 00:19:58.665 align:start position:14% line:-2
Call Treeは
backtraceカラムがあれば有用です

00:19:58.832 --> 00:20:03.370 align:start position:9% line:-2
Time Profiler同様
weighted backtrace または―

00:19:58.832 --> 00:20:03.370 align:start position:9% line:-2
Time Profiler同様
weighted backtrace または―

00:20:03.637 --> 00:20:06.406 align:start position:7% line:-2
weighted Call Tree viewを
作ることができます

00:20:07.641 --> 00:20:09.910 align:start position:32% line:-2
ナラティブと呼ばれる
形式があります

00:20:10.010 --> 00:20:14.181 align:start position:30% line:-2
専門用語に関する情報を
伝える時に―

00:20:14.281 --> 00:20:16.517 align:start position:32% line:-1
ナラティブが有益です

00:20:16.617 --> 00:20:18.385 align:start position:23% line:-2
例えば エキスパートシステムの
出力などが

00:20:18.485 --> 00:20:21.655 align:start position:2% line:-2
narrative engineering typeに
円滑に伝達されます

00:20:23.791 --> 00:20:26.860 align:start position:23% line:-1
最後はtime sliceです

00:20:26.994 --> 00:20:29.062 align:start position:27% line:-1
これはListに似ています

00:20:29.162 --> 00:20:33.167 align:start position:30% line:-2
青色の線で
二分した区間を含めて―

00:20:33.267 --> 00:20:36.570 align:start position:29% line:-2
コンテンツを絞り込む点が
違います

00:20:36.670 --> 00:20:41.341 align:start position:16% line:-2
青いライン つまり
inspection headを動かし

00:20:41.475 --> 00:20:44.678 align:start position:32% line:-2
リストのコンテンツが
比較されます

00:20:46.680 --> 00:20:51.018 align:start position:16% line:-2
Analysis Coreのテーブルに
３つのUIが関連づけられます

00:20:51.218 --> 00:20:52.586 align:start position:34% line:-1
レコードを押すと―

00:20:52.686 --> 00:20:57.524 align:start position:16% line:-2
Instrumentsにデータが入り
Analysis Coreが埋まります

00:20:57.791 --> 00:21:01.094 align:start position:32% line:-2
プロセスがどう働くか
説明します

00:20:57.791 --> 00:21:01.094 align:start position:32% line:-2
プロセスがどう働くか
説明します

00:21:02.663 --> 00:21:05.732 align:start position:32% line:-1
レコードを押す前に―

00:21:05.833 --> 00:21:09.570 align:start position:25% line:-2
Analysis Coreが
テーブルを取ります

00:21:09.670 --> 00:21:13.173 align:start position:29% line:-2
マッピングして
ストレージを割り当てます

00:21:13.640 --> 00:21:17.010 align:start position:21% line:-2
テーブルがまったく同じスキーマで
属性を持てば―

00:21:17.110 --> 00:21:21.849 align:start position:27% line:-2
定義上 同じデータなので
同じストアでマップされます

00:21:23.016 --> 00:21:27.521 align:start position:25% line:-2
次に 各ストアに
データ用プロバイダを探します

00:21:27.654 --> 00:21:31.058 align:start position:21% line:-2
ターゲットのデータストリームから
直接レコードすることも可能ですし

00:21:31.258 --> 00:21:34.361 align:start position:32% line:-2
モデラを使って
データを統合できます

00:21:35.195 --> 00:21:37.464 align:start position:30% line:-2
モデラは独自の入力を
要求することができます

00:21:37.564 --> 00:21:40.167 align:start position:32% line:-2
これらは他のモデラの
出力にもなり

00:21:40.267 --> 00:21:42.536 align:start position:21% line:-2
直接レコードする方法が分からない
残りのデータを統合し

00:21:42.636 --> 00:21:46.740 align:start position:32% line:-2
データストリームより
直接レコード可能です

00:21:47.341 --> 00:21:52.846 align:start position:11% line:-2
Analysis Coreの中にストアされた
すべてのデータソースを得られます

00:21:53.180 --> 00:21:57.384 align:start position:9% line:-2
このbinding solutionですが
binding solutionを可視化します

00:21:57.484 --> 00:22:00.754 align:start position:16% line:-2
Instrumentsがbinding
solutionを見られるようにします

00:21:57.484 --> 00:22:00.754 align:start position:16% line:-2
Instrumentsがbinding
solutionを見られるようにします

00:22:00.854 --> 00:22:02.656 align:start position:12% line:-1
thread narrativeと呼びます

00:22:03.924 --> 00:22:05.893 align:start position:18% line:-1
binding solutionは―

00:22:06.093 --> 00:22:07.861 align:start position:30% line:-1
トレース全体に渡ります

00:22:08.195 --> 00:22:12.266 align:start position:18% line:-2
ドラッグ＆ドロップで
Instrumentをトレースします

00:22:12.432 --> 00:22:15.969 align:start position:27% line:-2
Instrumentsは
最大限にレコード 演算し―

00:22:16.069 --> 00:22:19.339 align:start position:32% line:-2
ターゲットへの影響を
最小限に抑えます

00:22:20.741 --> 00:22:23.076 align:start position:25% line:-2
テーブルや
テーブルインスタンスを作る時

00:22:23.177 --> 00:22:24.978 align:start position:29% line:-2
Instrumentsは
スキーマを必要とします

00:22:25.279 --> 00:22:29.149 align:start position:30% line:-2
すでに100スキーマを
超えています

00:22:29.817 --> 00:22:34.888 align:start position:7% line:-2
Package Management UIの中に
含まれる全スキーマが使えます

00:22:35.089 --> 00:22:38.759 align:start position:34% line:-2
自分のパッケージに
インポート可能です

00:22:38.892 --> 00:22:43.163 align:start position:27% line:-2
スキーマが基本パッケージに
含まれていない場合―

00:22:43.297 --> 00:22:47.801 align:start position:34% line:-2
Xcodeの設定で
関連づけが必要です

00:22:47.901 --> 00:22:53.440 align:start position:30% line:-2
他のパッケージを
探せるように設定します

00:22:54.608 --> 00:22:57.478 align:start position:23% line:-2
スキーマはすべて 他の
パッケージ内でも定義されるので

00:22:57.578 --> 00:23:01.248 align:start position:23% line:-2
レコードを押すと テーブルが
スキーマと共に情報入力されます

00:22:57.578 --> 00:23:01.248 align:start position:23% line:-2
レコードを押すと テーブルが
スキーマと共に情報入力されます

00:23:01.348 --> 00:23:03.584 align:start position:32% line:-2
モデラが定義するか
データストリームから

00:23:03.684 --> 00:23:04.952 align:start position:27% line:-1
レコードする方法が分かれば

00:23:05.052 --> 00:23:07.921 align:start position:30% line:-2
自身のモデラに書き込む
優れた出力を作るよりも

00:23:08.155 --> 00:23:11.925 align:start position:25% line:-2
優れたビルディングブロックを
作ることができます

00:23:12.493 --> 00:23:13.994 align:start position:27% line:-1
これでモデラエレメントと―

00:23:14.094 --> 00:23:17.731 align:start position:11% line:-2
Instruments Packageの中に
書くか定義することができます

00:23:18.098 --> 00:23:21.468 align:start position:29% line:-2
モデラに
カスタム出力スキーマを―

00:23:21.568 --> 00:23:24.004 align:start position:34% line:-1
作ることができます

00:23:24.104 --> 00:23:26.840 align:start position:29% line:-1
点にはポイントスキーマを

00:23:26.974 --> 00:23:29.910 align:start position:23% line:-2
点と区間の複合の場合は
インターバルスキーマを使えます

00:23:31.612 --> 00:23:34.848 align:start position:27% line:-2
モデラは
どの入力が必要か定義でき―

00:23:35.015 --> 00:23:39.553 align:start position:25% line:-2
残りのデータフロー･グラフを
埋めることができますが―

00:23:39.653 --> 00:23:43.357 align:start position:27% line:-2
これをデータバインディング
ソリューションと呼びます

00:23:44.491 --> 00:23:49.263 align:start position:21% line:-2
モデラはCLIPS言語で書かれた
小型のエキスパートシステムです

00:23:49.496 --> 00:23:52.900 align:start position:34% line:-2
つまりパワフルで
進化しているのです

00:23:53.000 --> 00:23:57.871 align:start position:23% line:-2
モデラの作り方の詳細は上級編で
後ほど扱います

00:23:58.772 --> 00:24:02.443 align:start position:34% line:-2
独自のスキーマを
定義できることと―

00:23:58.772 --> 00:24:02.443 align:start position:34% line:-2
独自のスキーマを
定義できることと―

00:24:02.543 --> 00:24:05.279 align:start position:12% line:-2
Instrumentsに入れるデータを得る
最適な方法

00:24:05.379 --> 00:24:08.048 align:start position:16% line:-2
新しいos signpost APIを
持つことが最重要でした

00:24:08.448 --> 00:24:10.951 align:start position:36% line:-2
ショートカットも
作っています

00:24:11.952 --> 00:24:16.023 align:start position:14% line:-2
パッケージ内に os-signpost-
interval-schemaという―

00:24:16.156 --> 00:24:18.559 align:start position:30% line:-1
スキーマを定義できます

00:24:18.759 --> 00:24:23.964 align:start position:21% line:-2
スキーマを定義し　モデラを代理で
作成する方法を説明してくれます

00:24:24.631 --> 00:24:28.068 align:start position:7% line:-2
os signpost callsのメタデータに
自分でレコードしたデータを

00:24:28.168 --> 00:24:30.370 align:start position:30% line:-2
内部から
取り込むことができます

00:24:31.138 --> 00:24:34.808 align:start position:34% line:-2
そして取り込んだ
メタデータを使い―

00:24:34.942 --> 00:24:39.313 align:start position:27% line:-2
スキーマのカラムの埋め方を
定義できます

00:24:40.013 --> 00:24:42.583 align:start position:36% line:-1
シンプルな例です

00:24:43.016 --> 00:24:46.787 align:start position:32% line:-2
JSONのデコードを
例にしましょう

00:24:46.920 --> 00:24:52.493 align:start position:18% line:-2
デコードの始まりと終わりを
マークするsignpostがあります

00:24:52.793 --> 00:24:55.629 align:start position:34% line:-2
最初はメタデータを
取り込み―

00:24:55.729 --> 00:24:59.867 align:start position:23% line:-2
解析するJSONオブジェクトの
容量を示します

00:25:00.701 --> 00:25:02.636 align:start position:0% line:-2
これで
Instruments Package definitionに

00:25:02.703 --> 00:25:05.139 align:start position:0% line:-2
os-signpost-interval-schemaを
作れます

00:25:05.405 --> 00:25:08.842 align:start position:27% line:-1
スキーマの名前も定義します

00:25:09.142 --> 00:25:14.314 align:start position:21% line:-2
レコードしたいsignpostと
その名前を選びます

00:25:14.982 --> 00:25:19.152 align:start position:23% line:-2
これでシンタックスを使って
メタデータメッセージの最初から

00:25:19.253 --> 00:25:21.755 align:start position:27% line:-1
各メタデータを取り込みます

00:25:22.122 --> 00:25:26.126 align:start position:32% line:-2
さらに取り込んだ値を
使って―

00:25:26.293 --> 00:25:30.697 align:start position:25% line:-2
定義したカラムのデータ容量を
入力する方法を教えてくれます

00:25:32.533 --> 00:25:38.305 align:start position:20% line:-2
セッション405ではロギングを使い
計測法を紹介していましたね

00:25:38.806 --> 00:25:43.010 align:start position:21% line:-2
その時 Trailblazerの
実演を行い―

00:25:43.110 --> 00:25:47.681 align:start position:18% line:-2
signpostを基に書き込める
Instrumentをお見せしました

00:25:47.848 --> 00:25:51.151 align:start position:21% line:-2
カスタムinstrumentへの
書き込みについてでした

00:25:51.251 --> 00:25:53.821 align:start position:34% line:-1
ではキャスパーに―

00:25:53.921 --> 00:25:57.758 align:start position:32% line:-2
パッケージの作り方を
実演してもらいます

00:25:57.958 --> 00:26:04.264 align:start position:43% line:-1
(拍手)

00:25:57.958 --> 00:26:04.264 align:start position:43% line:-1
(拍手)

00:26:04.898 --> 00:26:05.899 align:start position:34% line:-1
ありがとう チャド

00:26:10.070 --> 00:26:12.673 align:start position:21% line:-2
TrailblazerはiOSの
アプリケーションで―

00:26:12.806 --> 00:26:16.443 align:start position:29% line:-2
身近なハイキングコースを
紹介するものです

00:26:17.177 --> 00:26:20.314 align:start position:20% line:-1
UITableViewを使用します

00:26:20.914 --> 00:26:24.451 align:start position:27% line:-1
各セルで画像を取り込みます

00:26:25.185 --> 00:26:28.055 align:start position:36% line:-2
欠陥を防ぎ
最適化するため―

00:26:28.155 --> 00:26:30.757 align:start position:29% line:-2
セルの再利用時は
ダウンロードを中止します

00:26:31.425 --> 00:26:33.927 align:start position:30% line:-1
流れを可視化するため―

00:26:34.061 --> 00:26:37.064 align:start position:11% line:-2
データを os signpost callに
まとめます

00:26:37.397 --> 00:26:38.699 align:start position:39% line:-1
ご覧ください

00:26:41.735 --> 00:26:45.806 align:start position:32% line:-2
セルの表示中に
画像が取り込まれます

00:26:45.939 --> 00:26:48.942 align:start position:23% line:-2
OSログハンドルやダウンローダ
オブジェクトから取得する―

00:26:49.042 --> 00:26:52.679 align:start position:9% line:-2
downloader signpost IDを
作ると

00:26:53.180 --> 00:26:56.483 align:start position:27% line:-2
UITableViewの
セルのアドレスを入手します

00:26:57.918 --> 00:27:02.422 align:start position:34% line:-2
signpost
ネットワークから―

00:26:57.918 --> 00:27:02.422 align:start position:34% line:-2
signpost
ネットワークから―

00:27:02.589 --> 00:27:06.226 align:start position:18% line:-2
OSログより始まる
os signpostを呼び出します

00:27:07.194 --> 00:27:10.731 align:start position:27% line:-2
このログが カテゴリー別に
サブシステムと

00:27:10.831 --> 00:27:12.900 align:start position:23% line:-2
ネットワークの
アプリケーションIDを取ります

00:27:14.802 --> 00:27:16.837 align:start position:27% line:-1
背景画像の名前と関連せず―

00:27:17.204 --> 00:27:22.443 align:start position:14% line:-2
画像名が含まれたsignpost IDと
メッセージ形式が作られました

00:27:23.844 --> 00:27:27.681 align:start position:25% line:-2
stringやcallerは
セルのアドレスなので―

00:27:28.182 --> 00:27:30.684 align:start position:20% line:-2
public specifierに
まとめます

00:27:32.152 --> 00:27:35.789 align:start position:30% line:-2
２通りで
ダウンロードできました

00:27:35.989 --> 00:27:37.724 align:start position:39% line:-1
ご覧ください

00:27:39.059 --> 00:27:43.330 align:start position:30% line:-2
このように完了すると
デリゲート方が最適です

00:27:43.997 --> 00:27:48.936 align:start position:11% line:-2
先にsignpost IDを作って
os signpost endを呼び出します

00:27:49.469 --> 00:27:53.006 align:start position:27% line:-2
今回はステータスとサイズを
パスします

00:27:54.074 --> 00:27:57.377 align:start position:36% line:-2
ステータスの値が
完了しています

00:27:58.178 --> 00:28:00.280 align:start position:38% line:-2
サイズは画像に
合わせます

00:27:58.178 --> 00:28:00.280 align:start position:38% line:-2
サイズは画像に
合わせます

00:28:02.115 --> 00:28:06.487 align:start position:23% line:-2
次にoverwriteの準備を
ご覧ください

00:28:08.088 --> 00:28:11.425 align:start position:30% line:-2
実行中のダウンローダを
キャンセルします

00:28:12.059 --> 00:28:15.129 align:start position:25% line:-2
signpost IDを作り
呼び出します

00:28:15.229 --> 00:28:18.766 align:start position:30% line:-2
同じフォーマットですが
値はキャンセルです

00:28:18.932 --> 00:28:22.002 align:start position:27% line:-2
ダウンロードに失敗したので
サイズはゼロです

00:28:23.971 --> 00:28:27.207 align:start position:20% line:-2
os signpostインターバル
スキーマを見てみます

00:28:27.307 --> 00:28:30.644 align:start position:30% line:-2
どのようにパッケージを
取り込むのでしょうか

00:28:33.013 --> 00:28:37.151 align:start position:16% line:-2
signpostインターバルスキーマを
ユニークID タイトルと共に定義

00:28:37.651 --> 00:28:40.787 align:start position:32% line:-2
そしてサブシステムと
カテゴリを定義します

00:28:40.888 --> 00:28:44.958 align:start position:23% line:-2
OSのlogハンドルを作った際
パスしたものです

00:28:47.394 --> 00:28:52.766 align:start position:20% line:-2
os signpostの呼び出しや
startとendでパスした―

00:28:53.267 --> 00:28:56.437 align:start position:27% line:-2
名前要素とスタート･エンド
パターンを作ります

00:28:56.637 --> 00:29:02.042 align:start position:4% line:-2
両方が os signpostのbeginとendの
セルを通過したものと一致してます

00:28:56.637 --> 00:29:02.042 align:start position:4% line:-2
両方が os signpostのbeginとendの
セルを通過したものと一致してます

00:29:04.177 --> 00:29:07.214 align:start position:25% line:-2
メッセージ要素は
書式のstringと同じです

00:29:07.314 --> 00:29:09.817 align:start position:21% line:-2
format argumentの
代わりに―

00:29:10.083 --> 00:29:15.689 align:start position:14% line:-2
os signpostを呼びこむ時 値を
取り込むために変数をパスします

00:29:17.291 --> 00:29:20.994 align:start position:27% line:-2
カラムに値を入力する方法を
説明します

00:29:24.164 --> 00:29:26.867 align:start position:27% line:-2
ここにステータスのカラムが
あります

00:29:26.967 --> 00:29:30.604 align:start position:36% line:-2
完了か中止なので
stringです

00:29:31.405 --> 00:29:35.375 align:start position:27% line:-1
ステータス変数を入力します

00:29:37.144 --> 00:29:41.081 align:start position:27% line:-2
式要素は
Clipsの式を取るので―

00:29:41.615 --> 00:29:44.384 align:start position:27% line:-1
もっと高度なこともできます

00:29:44.718 --> 00:29:49.423 align:start position:23% line:-2
容量によりイベントインパクトを
演算することができます

00:29:49.790 --> 00:29:53.961 align:start position:25% line:-2
3.5MBを超えるとイベント
インパクトは高いです

00:29:54.328 --> 00:29:56.997 align:start position:27% line:-2
オペレーションインパクトは
逆に低いです

00:29:58.632 --> 00:30:01.602 align:start position:20% line:-2
os signpostインターバル
スキーマの定義でした

00:29:58.632 --> 00:30:01.602 align:start position:20% line:-2
os signpostインターバル
スキーマの定義でした

00:30:01.768 --> 00:30:04.471 align:start position:32% line:-1
次にテーブル作成です

00:30:06.006 --> 00:30:11.645 align:start position:20% line:-2
os signpostインターバル
スキーマのIDをパスし―

00:30:11.879 --> 00:30:15.082 align:start position:30% line:-2
テーブルに
ユニークIDを作ります

00:30:15.816 --> 00:30:19.086 align:start position:20% line:-2
そしてUI definitionで
参照します

00:30:20.487 --> 00:30:23.056 align:start position:27% line:-1
グラフ用にレーンを作ります

00:30:23.690 --> 00:30:28.262 align:start position:25% line:-2
テーブルを取得し プロット
テンプレートでグラフにします

00:30:28.695 --> 00:30:31.698 align:start position:30% line:-2
プロットテンプレートは
グラフ作成に最適です

00:30:32.065 --> 00:30:36.170 align:start position:32% line:-2
エレメントによって
パスされたカラムを―

00:30:36.303 --> 00:30:38.772 align:start position:38% line:-1
認識するのです

00:30:38.872 --> 00:30:43.177 align:start position:29% line:-2
そしてカラムの値に
固有のプロットを作ります

00:30:44.478 --> 00:30:50.083 align:start position:18% line:-2
Label formatエレメントで
プロットタイトルを作れます

00:30:50.217 --> 00:30:54.188 align:start position:32% line:-2
これがimgカラムと
画像名からの値です

00:30:55.455 --> 00:30:57.991 align:start position:34% line:-2
プロットの値として
画像名をパスします

00:30:58.659 --> 00:31:03.497 align:start position:21% line:-2
各図形は カラムの
インパクトに応じて色がつけらます

00:30:58.659 --> 00:31:03.497 align:start position:21% line:-2
各図形は カラムの
インパクトに応じて色がつけらます

00:31:04.198 --> 00:31:07.634 align:start position:30% line:-2
各図形のラベルは
画像の容量に関連します

00:31:09.303 --> 00:31:10.804 align:start position:36% line:-1
次はlistです

00:31:12.339 --> 00:31:15.742 align:start position:36% line:-2
tickの紹介で
お見せしました

00:31:16.810 --> 00:31:19.346 align:start position:36% line:-2
見たいカラムを
すべてパスします

00:31:21.448 --> 00:31:23.150 align:start position:29% line:-1
次はアグリゲーションです

00:31:23.617 --> 00:31:26.753 align:start position:30% line:-2
完了したダウンロードを
すべて追跡します

00:31:27.120 --> 00:31:31.625 align:start position:25% line:-2
テーブルには完了及び中止した
ダウンロードも含まれるので―

00:31:31.725 --> 00:31:35.295 align:start position:23% line:-2
データにフィルタをかける
sliceエレメントが必要です

00:31:35.929 --> 00:31:40.400 align:start position:30% line:-2
sliceエレメントで
カラムを特定し―

00:31:40.868 --> 00:31:43.670 align:start position:34% line:-1
合う値を断定します

00:31:43.804 --> 00:31:47.307 align:start position:30% line:-2
テーブルから
完了したローを拾います

00:31:48.208 --> 00:31:49.910 align:start position:36% line:-1
階層を定義します

00:31:50.310 --> 00:31:53.380 align:start position:30% line:-2
画像名と 可視化された
カラムがある―

00:31:54.314 --> 00:31:56.216 align:start position:30% line:-1
１つのレベルの階層です

00:31:56.783 --> 00:32:00.154 align:start position:32% line:-2
画像名ごとに
数や容量を特定します

00:31:56.783 --> 00:32:00.154 align:start position:32% line:-2
画像名ごとに
数や容量を特定します

00:32:01.155 --> 00:32:05.125 align:start position:34% line:-2
そして画像の容量を
合計します

00:32:07.094 --> 00:32:09.997 align:start position:25% line:-1
次にtime sliceです

00:32:10.364 --> 00:32:13.400 align:start position:32% line:-2
可視化されたカラムを
特定します

00:32:16.003 --> 00:32:21.241 align:start position:30% line:-2
Instrumentを
もっと簡単に使うため―

00:32:21.341 --> 00:32:23.811 align:start position:30% line:-2
カスタムテンプレートを
特定できます

00:32:25.379 --> 00:32:28.148 align:start position:27% line:-1
ではパッケージを実行します

00:32:34.321 --> 00:32:38.058 align:start position:36% line:-2
テンプレートが
表示されましたね

00:32:41.962 --> 00:32:44.865 align:start position:16% line:-2
iPhoneとTrailblazerを
対象にします

00:32:49.536 --> 00:32:51.638 align:start position:38% line:-1
レコードします

00:33:01.215 --> 00:33:05.319 align:start position:25% line:-2
TrackViewのデータが
増えたと分かります

00:33:06.520 --> 00:33:09.990 align:start position:30% line:-2
プロットは画像名ごとに
作成されます

00:33:11.258 --> 00:33:15.963 align:start position:16% line:-2
package definitionで
パスした書式と照合します

00:33:16.530 --> 00:33:20.701 align:start position:30% line:-2
ダウンロードが
3.5MBを超えたら―

00:33:20.801 --> 00:33:22.836 align:start position:32% line:-1
図形は赤色になります

00:33:23.470 --> 00:33:25.439 align:start position:34% line:-1
容量も表示されます

00:33:26.840 --> 00:33:29.877 align:start position:29% line:-1
では詳細を見てみましょう

00:33:32.679 --> 00:33:35.449 align:start position:36% line:-1
リストがあります

00:33:35.949 --> 00:33:39.319 align:start position:34% line:-2
ダウンロードした
すべてのデータです

00:33:40.621 --> 00:33:42.723 align:start position:27% line:-1
アグリゲーションを選びます

00:33:44.892 --> 00:33:48.395 align:start position:36% line:-2
画像名で
区分されています

00:33:48.495 --> 00:33:52.166 align:start position:25% line:-2
ダウンロードした
12の画像がトップにあります

00:33:53.600 --> 00:33:57.137 align:start position:27% line:-2
７番目の画像は
２回ダウンロードされました

00:33:59.540 --> 00:34:02.075 align:start position:16% line:-1
次はActive requestsです

00:33:59.540 --> 00:34:02.075 align:start position:16% line:-1
次はActive requestsです

00:34:03.744 --> 00:34:07.014 align:start position:21% line:-2
inspection headを
つかむと―

00:34:09.516 --> 00:34:13.152 align:start position:29% line:-2
ディテールビューの
データの数値が変化します

00:34:13.520 --> 00:34:16.489 align:start position:18% line:-2
多数のActive requestを
追跡でき―

00:34:16.590 --> 00:34:20.194 align:start position:21% line:-2
inspection headの
持続時間を確認できます

00:34:22.663 --> 00:34:27.967 align:start position:20% line:-2
異なった方法でのデータ
Storeやモデラを確認したい場合

00:34:28.068 --> 00:34:32.873 align:start position:12% line:-2
Instrument Inspectorで
次のようにしましょう

00:34:33.507 --> 00:34:36.310 align:start position:23% line:-2
カスタムinstrumentの
デバッグ方法です

00:34:36.944 --> 00:34:39.980 align:start position:27% line:-1
これはStoreの手順です

00:34:40.748 --> 00:34:44.251 align:start position:18% line:-2
os signpostのStoreが
作成されています

00:34:44.418 --> 00:34:47.121 align:start position:29% line:-1
ネットワークカテゴリと―

00:34:47.221 --> 00:34:49.889 align:start position:12% line:-2
com apple trailblazer
subsystemを認識してます

00:34:50.056 --> 00:34:52.492 align:start position:32% line:-1
ローの値は24ですね

00:34:53.159 --> 00:34:58.565 align:start position:29% line:-2
作成したテーブル画像では
ローは12です

00:35:02.035 --> 00:35:05.806 align:start position:34% line:-2
全コンテンツが
底部に表示されます

00:35:07.641 --> 00:35:09.376 align:start position:38% line:-1
次はモデラです

00:35:09.476 --> 00:35:13.180 align:start position:29% line:-2
自動生成するos log
モデラを確認できます

00:35:13.380 --> 00:35:17.251 align:start position:32% line:-2
24から12のローを
出力します

00:35:18.252 --> 00:35:21.188 align:start position:20% line:-2
binding solutionが
右に表示されます

00:35:21.455 --> 00:35:23.991 align:start position:30% line:-2
生成した
os logモデラは―

00:35:24.124 --> 00:35:28.562 align:start position:20% line:-2
os signpostテーブルから
データを移します

00:35:29.296 --> 00:35:32.065 align:start position:23% line:-2
その後 Instrumentで
使われます

00:35:33.867 --> 00:35:38.839 align:start position:20% line:-2
os signpostの呼び出しと
UIの作成―

00:35:38.939 --> 00:35:41.575 align:start position:12% line:-2
Instrument Inspectorで
使われたデータを見てきました

00:35:41.942 --> 00:35:46.079 align:start position:29% line:-2
ではチャドから
上級モデリングの紹介です

00:35:46.447 --> 00:35:53.086 align:start position:43% line:-1
(拍手)

00:35:54.655 --> 00:35:56.390 align:start position:41% line:-1
ありがとう

00:35:57.558 --> 00:36:00.460 align:start position:21% line:-2
os signpostと
カスタムinstrumentを―

00:35:57.558 --> 00:36:00.460 align:start position:21% line:-2
os signpostと
カスタムinstrumentを―

00:36:00.561 --> 00:36:03.564 align:start position:36% line:-2
結び付ける方法を
お見せしました

00:36:03.730 --> 00:36:07.134 align:start position:29% line:-1
この２つの組み合わせを―

00:36:07.234 --> 00:36:10.470 align:start position:30% line:-1
引き離すことができます

00:36:10.771 --> 00:36:14.875 align:start position:32% line:-2
少し上級のトピックを
お話しします

00:36:14.975 --> 00:36:18.645 align:start position:36% line:-2
モデラを作成し
定義する方法です

00:36:19.279 --> 00:36:23.083 align:start position:32% line:-2
入力を行う
シンプルなマシンです

00:36:23.183 --> 00:36:26.386 align:start position:38% line:-2
入力を論証し
出力を生みます

00:36:27.221 --> 00:36:30.457 align:start position:36% line:-2
入力は常に
完全な時間順です

00:36:30.691 --> 00:36:33.093 align:start position:32% line:-1
異なる要求をしても―

00:36:33.193 --> 00:36:37.464 align:start position:32% line:-2
最初のオーダーとなり
時間順に並びます

00:36:37.865 --> 00:36:39.600 align:start position:34% line:-2
ワーキングメモリを
供給します

00:36:39.800 --> 00:36:44.671 align:start position:27% line:-2
処理の１つ１つが
ワーキングメモリに入ります

00:36:45.138 --> 00:36:51.145 align:start position:27% line:-2
ワーキングメモリの展開から
モデラは推測します

00:36:51.345 --> 00:36:54.681 align:start position:36% line:-2
出力を生みだす
パターンを見て―

00:36:54.781 --> 00:36:57.484 align:start position:38% line:-2
出力テーブルに
書き込みます

00:36:58.819 --> 00:37:03.424 align:start position:30% line:-2
モデラの楽しい使い方を
ご紹介しましょう

00:36:58.819 --> 00:37:03.424 align:start position:30% line:-2
モデラの楽しい使い方を
ご紹介しましょう

00:37:04.224 --> 00:37:07.427 align:start position:32% line:-2
“マッチ遊び”の
スキーマを定義します

00:37:07.561 --> 00:37:10.764 align:start position:20% line:-2
os signpostインターバル
スキーマです

00:37:10.864 --> 00:37:16.403 align:start position:20% line:-2
危険な処理を行うことを
定義したos signpostが―

00:37:16.603 --> 00:37:17.671 align:start position:43% line:-1
対象です

00:37:18.238 --> 00:37:21.909 align:start position:27% line:-2
“アプリケーション炎上”の
スキーマも定義します

00:37:22.042 --> 00:37:25.913 align:start position:30% line:-2
これもsignpost
スキーマですが―

00:37:26.013 --> 00:37:29.850 align:start position:27% line:-1
状態が悪いことを意味します

00:37:30.517 --> 00:37:32.886 align:start position:30% line:-1
出力スキーマを作ります

00:37:32.986 --> 00:37:37.624 align:start position:25% line:-2
“マッチ遊び”オブジェクトと
炎上時間を記録します

00:37:37.858 --> 00:37:40.427 align:start position:34% line:-2
炎上開始スキーマを
呼び出します

00:37:41.662 --> 00:37:44.031 align:start position:34% line:-2
モデラは
このような感じです

00:37:44.131 --> 00:37:48.102 align:start position:36% line:-2
すべての入力を
時間順にすると―

00:37:48.202 --> 00:37:53.507 align:start position:29% line:-2
左の点線を
モデラクロックと呼びます

00:37:54.041 --> 00:37:57.978 align:start position:32% line:-2
メモリに最初の入力を
入れると

00:37:58.078 --> 00:38:00.647 align:start position:21% line:-2
モデラのクロックが
インターバルの最初の地点に移動し

00:37:58.078 --> 00:38:00.647 align:start position:21% line:-2
モデラのクロックが
インターバルの最初の地点に移動し

00:38:01.415 --> 00:38:03.851 align:start position:32% line:-1
次の入力をつかむと―

00:38:03.951 --> 00:38:08.222 align:start position:27% line:-2
またクロックが最初に戻り
ワーキングメモリに入れます

00:38:08.722 --> 00:38:12.392 align:start position:34% line:-2
モデラは
両方とも認識します

00:38:12.659 --> 00:38:13.694 align:start position:36% line:-1
“マッチ遊び”は

00:38:13.794 --> 00:38:16.864 align:start position:30% line:-2
アプリケーションの前に
すでに炎上しています

00:38:16.964 --> 00:38:21.034 align:start position:21% line:-2
アプリケーションが先に炎上し
順番が逆でも結果に大差ありません

00:38:21.335 --> 00:38:24.638 align:start position:32% line:-2
“炎上の原因”という
ロジカルな結論を―

00:38:25.272 --> 00:38:30.210 align:start position:34% line:-2
ワーキングメモリに
盛り込めます

00:38:31.578 --> 00:38:35.616 align:start position:32% line:-2
第３の入力をつかむと
クロックの動きが―

00:38:35.716 --> 00:38:39.086 align:start position:30% line:-2
２つの入力とは
交わらないと気づきます

00:38:39.419 --> 00:38:42.222 align:start position:23% line:-2
その２つはワーキングメモリから
削除されます

00:38:42.656 --> 00:38:46.126 align:start position:14% line:-2
“炎上の原因”に
logical supportがあれば―

00:38:46.260 --> 00:38:48.662 align:start position:34% line:-1
これも削除されます

00:38:50.764 --> 00:38:55.102 align:start position:29% line:-2
クロックの設定は入力時の
タイムスタンプです

00:38:55.469 --> 00:38:58.372 align:start position:30% line:-2
ワーキングメモリの中に
入力を残すために―

00:38:58.505 --> 00:39:02.576 align:start position:29% line:-2
モデラの現在のクロックは
交差します

00:38:58.505 --> 00:39:02.576 align:start position:29% line:-2
モデラの現在のクロックは
交差します

00:39:02.876 --> 00:39:07.281 align:start position:29% line:-2
こうして一致させ
古いデータを取り除きます

00:39:07.381 --> 00:39:12.085 align:start position:27% line:-2
そして入力が時間と
互換性があるかも分かります

00:39:13.821 --> 00:39:16.857 align:start position:27% line:-2
モデラがワーキングメモリを
論証する方法は―

00:39:16.957 --> 00:39:20.627 align:start position:18% line:-2
production systemで
定義します

00:39:21.461 --> 00:39:24.731 align:start position:7% line:-2
Production systemは ワーキング
メモリ内のファクトに基づき作動し

00:39:25.098 --> 00:39:30.671 align:start position:34% line:-2
オペレータの左辺と
右辺で定義されます

00:39:31.004 --> 00:39:36.810 align:start position:25% line:-2
左辺はルールを
アクティブにするパターンで―

00:39:37.177 --> 00:39:41.849 align:start position:27% line:-2
右辺はルールが集中した時に
起こるアクションです

00:39:41.949 --> 00:39:45.652 align:start position:38% line:-2
出力テーブルに
ローを加えます

00:39:45.752 --> 00:39:49.757 align:start position:27% line:-2
また モデリングプロセスの
進歩として―

00:39:49.890 --> 00:39:52.726 align:start position:36% line:-2
新たなファクトを
含めたりします

00:39:54.061 --> 00:39:56.797 align:start position:27% line:-1
ファクトのソースは２つです

00:39:56.930 --> 00:39:59.099 align:start position:36% line:-2
１つは
テーブル入力です

00:39:59.199 --> 00:40:01.802 align:start position:21% line:-2
先に説明したモデリングクロックの
ルールをファクトとして使用し―

00:39:59.199 --> 00:40:01.802 align:start position:21% line:-2
先に説明したモデリングクロックの
ルールをファクトとして使用し―

00:40:01.969 --> 00:40:05.005 align:start position:32% line:-1
自動的に組み込みます

00:40:05.639 --> 00:40:09.977 align:start position:23% line:-2
さらに 右辺プロダクションから
自動組み込みによって作られます

00:40:10.978 --> 00:40:13.547 align:start position:36% line:-2
自分のファクトを
作るなら―

00:40:13.647 --> 00:40:19.386 align:start position:18% line:-2
Clipsにファクトの構成を提供する
ファクトテンプレートがあります

00:40:20.020 --> 00:40:22.556 align:start position:23% line:-1
Clipsでルールを見てみます

00:40:23.123 --> 00:40:26.527 align:start position:29% line:-1
まず“原因”を見つけます

00:40:27.261 --> 00:40:29.096 align:start position:41% line:-1
解読します

00:40:29.196 --> 00:40:33.667 align:start position:25% line:-2
t1が“誰がマッチで遊ぶか”
というオブジェクトで―

00:40:34.001 --> 00:40:37.004 align:start position:27% line:-2
“アプリケーション炎上”が
t2

00:40:37.471 --> 00:40:40.841 align:start position:36% line:-2
t1がt2の前に
起きたとします

00:40:41.108 --> 00:40:44.278 align:start position:32% line:-2
すると“炎上の原因”
という―

00:40:44.411 --> 00:40:47.848 align:start position:34% line:-2
新たなファクトを
右辺に主張できます

00:40:48.082 --> 00:40:50.417 align:start position:27% line:-1
ワーキングメモリに入ります

00:40:51.051 --> 00:40:53.554 align:start position:36% line:-1
第２のルールは―

00:40:53.654 --> 00:40:55.556 align:start position:30% line:-1
“原因のレコード”です

00:40:55.889 --> 00:41:01.328 align:start position:27% line:-2
“アプリケーション炎上”が
あって原因が分かれば―

00:40:55.889 --> 00:41:01.328 align:start position:27% line:-2
“アプリケーション炎上”が
あって原因が分かれば―

00:41:01.461 --> 00:41:04.365 align:start position:30% line:-2
アペンド側を関連づける
テーブルがあります

00:41:04.465 --> 00:41:07.101 align:start position:34% line:-1
モデラの出力側です

00:41:07.468 --> 00:41:13.740 align:start position:23% line:-2
定義する“炎上開始”スキーマに
テーブルが該当すれば―

00:41:14.475 --> 00:41:17.311 align:start position:29% line:-1
テーブルにローを作れます

00:41:17.444 --> 00:41:22.449 align:start position:29% line:-2
そして炎上を起こした人と
時間を値に設定します

00:41:23.817 --> 00:41:28.088 align:start position:29% line:-2
さらに最初のエキスパート
システムを作って―

00:41:28.188 --> 00:41:31.759 align:start position:30% line:-2
２つのルールに沿って
悪いパターンを調べます

00:41:33.427 --> 00:41:38.665 align:start position:29% line:-2
モデラかレコーダに
ルールが付加されています

00:41:38.832 --> 00:41:43.136 align:start position:7% line:-2
これらは modules in Clipsといい
両グループのルールに従いつつ―

00:41:43.303 --> 00:41:46.073 align:start position:29% line:-1
実行順を制御したりします

00:41:46.373 --> 00:41:49.643 align:start position:30% line:-1
出力を維持した場合は―

00:41:49.743 --> 00:41:52.412 align:start position:29% line:-2
レコーダモジュールの中の
テーブル出力が

00:41:52.512 --> 00:41:54.415 align:start position:30% line:-2
新たに生成される出力を
ルールするので

00:41:54.615 --> 00:41:57.084 align:start position:29% line:-1
その場合 検証の途中で―

00:41:57.184 --> 00:42:02.055 align:start position:36% line:-2
出力を書こうとは
しないはず

00:41:57.184 --> 00:42:02.055 align:start position:36% line:-2
出力を書こうとは
しないはず

00:42:02.156 --> 00:42:07.961 align:start position:29% line:-2
モデラのルールの実行が
レコーダより先だからです

00:42:09.496 --> 00:42:12.399 align:start position:16% line:-2
logical supportの期間に
ついて説明します

00:42:12.666 --> 00:42:15.602 align:start position:18% line:-1
logical supportとは―

00:42:15.836 --> 00:42:17.938 align:start position:32% line:-1
推論規則に関連します

00:42:18.105 --> 00:42:21.942 align:start position:27% line:-2
“AとBならCだ”のような
ルールです

00:42:22.042 --> 00:42:26.413 align:start position:21% line:-2
logical supportを
加えたとします

00:42:26.613 --> 00:42:31.285 align:start position:27% line:-2
AとBがワーキングメモリに
存在しない場合―

00:42:31.385 --> 00:42:33.454 align:start position:29% line:-1
Cは自動的に削除されます

00:42:33.554 --> 00:42:38.659 align:start position:27% line:-2
つまりAとBがCを論理的に
裏付けています

00:42:39.259 --> 00:42:43.797 align:start position:29% line:-2
ワーキングメモリの膨張を
制限することと

00:42:43.897 --> 00:42:48.168 align:start position:21% line:-2
ワーキングメモリから無効な
ファクトを削除することが重要です

00:42:48.268 --> 00:42:51.905 align:start position:36% line:-2
AもBも無効なら
Cも削除されます

00:42:52.439 --> 00:42:56.543 align:start position:21% line:-2
logical supportを
加えるために―

00:42:56.844 --> 00:43:00.848 align:start position:16% line:-2
keyword logicalと一緒に
パターンをまとめ

00:42:56.844 --> 00:43:00.848 align:start position:16% line:-2
keyword logicalと一緒に
パターンをまとめ

00:43:00.948 --> 00:43:03.350 align:start position:38% line:-2
ルールの右辺に
示すものは―

00:43:03.450 --> 00:43:06.920 align:start position:30% line:-2
進行していくと
自動的に取り消されます

00:43:07.021 --> 00:43:10.924 align:start position:30% line:-2
そして
この２つのファクトは―

00:43:11.125 --> 00:43:14.495 align:start position:27% line:-1
スキーマにちなんだ名前です

00:43:14.661 --> 00:43:17.798 align:start position:34% line:-2
モデラのクロックが
動いたら―

00:43:17.931 --> 00:43:20.067 align:start position:27% line:-1
インプットは取り消されます

00:43:22.069 --> 00:43:26.173 align:start position:30% line:-2
モデラの作り方の基本を
知ったうえで―

00:43:26.273 --> 00:43:29.910 align:start position:29% line:-2
Clips言語とルールを
見てきました

00:43:30.043 --> 00:43:35.816 align:start position:32% line:-2
悪いパターンや誤用を
階層で見つけるため―

00:43:36.750 --> 00:43:38.986 align:start position:18% line:-2
エキスパートシステムを
ネットワークInstrumentsに

00:43:39.086 --> 00:43:41.488 align:start position:30% line:-1
追加できるか見てみます

00:43:41.588 --> 00:43:45.125 align:start position:38% line:-2
キャスパーから
最後の実演です

00:43:45.759 --> 00:43:51.031 align:start position:43% line:-1
(拍手)

00:43:54.868 --> 00:43:58.906 align:start position:36% line:-2
アンチパターンを
検出するため―

00:43:59.006 --> 00:44:02.309 align:start position:29% line:-1
既存のログで書き込みます

00:43:59.006 --> 00:44:02.309 align:start position:29% line:-1
既存のログで書き込みます

00:44:02.643 --> 00:44:04.845 align:start position:21% line:-1
Trailblazerを使用中―

00:44:04.945 --> 00:44:09.683 align:start position:27% line:-2
速くスクロールすると欠陥が
現れるように思えますが

00:44:09.817 --> 00:44:12.452 align:start position:29% line:-1
画像は何度も入れ替わり―

00:44:12.753 --> 00:44:16.423 align:start position:29% line:-2
取り消しが機能していない
可能性もあります

00:44:17.257 --> 00:44:20.360 align:start position:32% line:-2
検証のため
モデラに書き込みます

00:44:21.094 --> 00:44:25.232 align:start position:16% line:-2
package definitionを
見てみましょう

00:44:25.499 --> 00:44:28.235 align:start position:29% line:-2
モデラエレメントを書いて
始めます

00:44:28.502 --> 00:44:32.673 align:start position:23% line:-2
モデラは
ID タイトル 目的を持ちます

00:44:33.273 --> 00:44:36.610 align:start position:25% line:-2
ドキュメンテーションに
この３つの領域が引用されます

00:44:37.444 --> 00:44:40.013 align:start position:34% line:-2
モデラの
全ロジックを含む―

00:44:40.314 --> 00:44:43.183 align:start position:36% line:-2
生成システムの
パスを特定します

00:44:45.018 --> 00:44:47.788 align:start position:36% line:-2
ここで　モデラに
出力を定義します

00:44:47.955 --> 00:44:50.424 align:start position:30% line:-2
それは ダウンローダ
ナラティブスキーマです

00:44:50.824 --> 00:44:56.130 align:start position:20% line:-2
要求される入力は
os signpostテーブルです

00:44:56.497 --> 00:44:59.933 align:start position:25% line:-2
このテーブルは
beginとendを含みます

00:45:00.801 --> 00:45:05.339 align:start position:30% line:-2
ダウンローダスキーマの
定義を見ましょう

00:45:11.345 --> 00:45:15.115 align:start position:23% line:-2
２つのカラムとタイムスタンプを
定義づけるポイントスキーマです

00:45:15.449 --> 00:45:18.785 align:start position:21% line:-2
タイムスタンプは診断メッセージの
ログの時間を追跡し

00:45:20.120 --> 00:45:24.157 align:start position:27% line:-1
何が誤作動したか説明します

00:45:26.393 --> 00:45:30.264 align:start position:18% line:-2
そこで テーブルに
Instrument定義を制作します

00:45:31.999 --> 00:45:36.637 align:start position:29% line:-2
ダウンローダスキーマと
ユニークIDをパスします

00:45:38.138 --> 00:45:42.376 align:start position:29% line:-2
ここで ナラティブ
エレメント定義を使います

00:45:44.745 --> 00:45:46.480 align:start position:34% line:-2
はい ナラティブが
定義できました

00:45:46.580 --> 00:45:50.317 align:start position:30% line:-2
すでに作成した
テーブルrefをパスし

00:45:51.018 --> 00:45:54.154 align:start position:25% line:-2
タイムカラムと
ナラティブカラムを定義します

00:45:55.856 --> 00:45:59.126 align:start position:29% line:-2
これでモデラのロジックを
定義できます

00:46:00.160 --> 00:46:04.965 align:start position:27% line:-2
モデラ定義で
参照したファイルを作ります

00:46:05.466 --> 00:46:09.036 align:start position:20% line:-2
Clipsファイルを作るには
“File”から“New”を選び―

00:46:11.605 --> 00:46:13.507 align:start position:23% line:-2
macOSのプラットフォームを
選択します

00:46:14.508 --> 00:46:17.010 align:start position:20% line:-1
“Clips file”をクリック

00:46:19.213 --> 00:46:21.014 align:start position:38% line:-1
名前を入力し―

00:46:24.184 --> 00:46:25.419 align:start position:41% line:-1
作成します

00:46:27.854 --> 00:46:31.091 align:start position:30% line:-2
１つ以上のリクエストが
同時に同一セルで

00:46:31.191 --> 00:46:33.126 align:start position:30% line:-2
実行されてるか
検出するアルゴリズムは

00:46:33.227 --> 00:46:34.395 align:start position:38% line:-1
次のとおりです

00:46:34.962 --> 00:46:38.932 align:start position:29% line:-2
ワーキングメモリの要求を
すべて追跡します

00:46:39.366 --> 00:46:42.669 align:start position:30% line:-2
最初にファクトの
テンプレートを作ります

00:46:45.038 --> 00:46:48.542 align:start position:29% line:-1
時間やセルのアドレスに―

00:46:48.875 --> 00:46:51.211 align:start position:21% line:-1
取り込んだsignpost ID

00:46:52.112 --> 00:46:54.515 align:start position:32% line:-1
要求した画像名など―

00:46:55.115 --> 00:46:57.551 align:start position:27% line:-1
ファクトに保管されています

00:46:57.784 --> 00:47:00.154 align:start position:23% line:-2
ここでは“ダウンロード開始”の
ファクトと呼びます

00:46:57.784 --> 00:47:00.154 align:start position:23% line:-2
ここでは“ダウンロード開始”の
ファクトと呼びます

00:47:01.321 --> 00:47:06.293 align:start position:32% line:-2
次にモデラのルールを
書き込みます

00:47:09.163 --> 00:47:12.232 align:start position:23% line:-2
これはos signpostを
認識します

00:47:12.466 --> 00:47:16.670 align:start position:30% line:-2
サブシステム 名前
イベントタイプを特定し

00:47:17.271 --> 00:47:20.708 align:start position:29% line:-2
欲しい情報すべてを特定し
取り込みます

00:47:21.041 --> 00:47:26.046 align:start position:18% line:-2
画像名 callerアドレス 時間
signpost IDを取り込みます

00:47:27.114 --> 00:47:30.317 align:start position:25% line:-2
ここで 新たなファクトを
ワーキングメモリに明示します

00:47:34.288 --> 00:47:38.225 align:start position:32% line:-2
ダウンロード後
クリーンにするため―

00:47:38.392 --> 00:47:41.128 align:start position:21% line:-2
ワーキングメモリから
このファクトを消す必要があります

00:47:44.465 --> 00:47:46.667 align:start position:32% line:-1
同じテーブルですが―

00:47:46.767 --> 00:47:52.005 align:start position:32% line:-2
endのイベントのみ
見ています

00:47:52.773 --> 00:47:55.142 align:start position:18% line:-1
signpost IDを取り込みます

00:47:55.642 --> 00:47:59.747 align:start position:16% line:-2
signpostのbeginとendは
同じIDだというファクトを

00:47:59.847 --> 00:48:02.015 align:start position:34% line:-1
ここで使っています

00:47:59.847 --> 00:48:02.015 align:start position:34% line:-1
ここで使っています

00:48:02.616 --> 00:48:05.752 align:start position:25% line:-2
signpost IDを持つ
ファクトを―

00:48:05.853 --> 00:48:08.989 align:start position:27% line:-1
ワーキングメモリで探します

00:48:09.389 --> 00:48:10.958 align:start position:38% line:-1
そして消します

00:48:14.395 --> 00:48:16.897 align:start position:34% line:-2
ナラティブデータを
生成する―

00:48:16.997 --> 00:48:20.601 align:start position:36% line:-2
レコーダルールを
書き込みます

00:48:24.438 --> 00:48:28.442 align:start position:21% line:-2
レコーダルールはスタンダード
ダウンロードファクト全部を認識し

00:48:28.642 --> 00:48:30.277 align:start position:34% line:-1
それを取り込みます

00:48:30.544 --> 00:48:34.348 align:start position:27% line:-2
時間 callerアドレス
画像名を取り込みました

00:48:34.681 --> 00:48:38.819 align:start position:23% line:-2
同じcallerアドレスを持つ
別の標準ダウンロードがある場合

00:48:38.919 --> 00:48:44.291 align:start position:29% line:-2
変数は同じで最初の
ファクトの前に発生したと

00:48:45.859 --> 00:48:49.029 align:start position:32% line:-1
気づくことができます

00:48:49.530 --> 00:48:53.901 align:start position:29% line:-2
アンチパターンや
重複リクエストがあります

00:48:54.635 --> 00:48:58.639 align:start position:21% line:-2
ダウンローダナラティブスキーマに
アクセスできるか確認し―

00:49:00.474 --> 00:49:01.975 align:start position:32% line:-1
新しいローを作ります

00:49:03.477 --> 00:49:07.614 align:start position:30% line:-2
最初のファクトの時間に
時刻カラムを設定し―

00:49:08.448 --> 00:49:10.450 align:start position:27% line:-1
ナラティブ記述を設定します

00:49:10.951 --> 00:49:17.458 align:start position:25% line:-2
後でデバッグできるよう
問題に関する情報を出力します

00:49:19.359 --> 00:49:22.262 align:start position:18% line:-1
ではInstrumentを実行します

00:49:24.264 --> 00:49:25.766 align:start position:38% line:-1
これで実行です

00:49:32.406 --> 00:49:35.108 align:start position:18% line:-2
Trailblazerネットワークを
テンプレートから選び―

00:49:37.511 --> 00:49:38.479 align:start position:38% line:-1
レコードします

00:49:40.047 --> 00:49:42.916 align:start position:36% line:-2
下まで速く
スクロールして―

00:49:43.450 --> 00:49:45.786 align:start position:27% line:-1
ナラティブテーブルを見ます

00:49:50.023 --> 00:49:55.329 align:start position:34% line:-2
多くのメッセージが
出力されています

00:49:55.896 --> 00:50:00.267 align:start position:32% line:-2
問題を確認して
調べることができます

00:49:55.896 --> 00:50:00.267 align:start position:32% line:-2
問題を確認して
調べることができます

00:50:00.734 --> 00:50:04.505 align:start position:27% line:-2
ナラティブは
インタラクティブの詳細です

00:50:04.771 --> 00:50:09.243 align:start position:20% line:-2
パスしたargumentを確認して
フィルタをかけられます

00:50:09.343 --> 00:50:13.380 align:start position:27% line:-2
このcallerアドレスを
詳細として加えて―

00:50:13.514 --> 00:50:16.083 align:start position:30% line:-1
詳細フィルタができます

00:50:17.384 --> 00:50:19.787 align:start position:20% line:-1
ではInstruments開発の―

00:50:19.887 --> 00:50:23.757 align:start position:32% line:-2
ベストプラクティスを
チャドが紹介します

00:50:24.324 --> 00:50:30.197 align:start position:43% line:-1
(拍手)

00:50:30.364 --> 00:50:31.598 align:start position:30% line:-1
ありがとう キャスパー

00:50:32.065 --> 00:50:35.068 align:start position:23% line:-2
Instrumentの中の
エキスパートシステムについて―

00:50:35.202 --> 00:50:38.072 align:start position:27% line:-1
基本の作り方を見てきました

00:50:38.605 --> 00:50:43.243 align:start position:27% line:-2
途中でも触れた
ベストプラクティスの話です

00:50:44.177 --> 00:50:47.981 align:start position:27% line:-2
まずInstrumentを
１つ以上書くこと

00:50:48.115 --> 00:50:50.417 align:start position:36% line:-2
練習を積むのでは
ありません

00:50:50.684 --> 00:50:54.121 align:start position:14% line:-2
すでにInstrumentを持っていても
それに新しい機能を追加したい場合

00:50:54.221 --> 00:50:58.559 align:start position:21% line:-2
単純にそれを追加したり
余計なグラフや詳細を足すでしょう

00:50:58.826 --> 00:51:01.962 align:start position:34% line:-2
でも それでいいか
考えてください

00:50:58.826 --> 00:51:01.962 align:start position:34% line:-2
でも それでいいか
考えてください

00:51:02.129 --> 00:51:05.332 align:start position:27% line:-2
きめ細かい
Instrumentなら―

00:51:05.432 --> 00:51:08.869 align:start position:32% line:-2
ユーザに選択肢を多く
提供できます

00:51:09.136 --> 00:51:12.306 align:start position:25% line:-2
欲しいInstrumentを
ライブラリにドラッグできてー

00:51:12.539 --> 00:51:15.642 align:start position:32% line:-2
ターゲットに対する
記録影響が最小限です

00:51:15.742 --> 00:51:20.280 align:start position:18% line:-2
多機能の１つのInstrumentは
全能か無能かのどちらかです

00:51:20.881 --> 00:51:23.917 align:start position:23% line:-1
もし Instrumentに―

00:51:24.017 --> 00:51:26.420 align:start position:25% line:-2
複数のInstrumentの
同じ問題に対して

00:51:26.520 --> 00:51:28.589 align:start position:29% line:-2
ターゲットを絞ったものを
組み合わせて作りたいなら

00:51:28.689 --> 00:51:31.892 align:start position:36% line:-2
全機能のものを
同時に使うよりは

00:51:32.226 --> 00:51:36.263 align:start position:21% line:-2
問題ごとにカスタムテンプレートを
作るほうがよいでしょう

00:51:36.597 --> 00:51:42.403 align:start position:14% line:-2
ドキュメントを作り
Instrumentをドラッグして設定し

00:51:42.503 --> 00:51:45.472 align:start position:34% line:-2
テンプレートとして
保存します

00:51:45.572 --> 00:51:50.210 align:start position:23% line:-2
キャスパーがネットワーク
テンプレートに追加した要素は―

00:51:50.310 --> 00:51:52.579 align:start position:27% line:-1
パッケージ内で使用できます

00:51:53.080 --> 00:51:56.817 align:start position:14% line:-2
１つ以上のInstrumentを書くのは
ツールを使う際 よりよい方法です

00:51:57.951 --> 00:52:00.954 align:start position:30% line:-1
２つ目の方法は大変です

00:51:57.951 --> 00:52:00.954 align:start position:30% line:-1
２つ目の方法は大変です

00:52:01.121 --> 00:52:04.725 align:start position:23% line:-2
immediate modeは
レコード形式で―

00:52:04.825 --> 00:52:09.730 align:start position:32% line:-2
ほぼリアルタイムで
データを可視化します

00:52:09.897 --> 00:52:12.666 align:start position:29% line:-1
大変な理由は２つあります

00:52:12.766 --> 00:52:15.636 align:start position:30% line:-2
まずは追加でサポートが
必要なこと

00:52:15.802 --> 00:52:19.606 align:start position:30% line:-2
時間が足りず
当日中に対応できません

00:52:19.873 --> 00:52:22.075 align:start position:32% line:-1
今 取り組んでいます

00:52:22.309 --> 00:52:25.412 align:start position:36% line:-2
そして重要な
２つ目の理由は―

00:52:26.080 --> 00:52:28.882 align:start position:30% line:-1
インターバルデータです

00:52:28.982 --> 00:52:33.320 align:start position:23% line:-2
Analysis Coreでは
beginとendを見れば―

00:52:33.420 --> 00:52:36.557 align:start position:21% line:-2
インターバルデータは それが
閉じるまではテーブルに入りません

00:52:36.657 --> 00:52:40.694 align:start position:29% line:-2
でも実演していると多くの
インターバルができます

00:52:40.794 --> 00:52:44.865 align:start position:32% line:-2
モデラが 実行可能な
出力として要求すれば

00:52:44.998 --> 00:52:48.535 align:start position:21% line:-2
upstreamにインターバルが
あると―

00:52:48.635 --> 00:52:50.804 align:start position:29% line:-2
インターバルが閉じるまで
全モデラクロックの

00:52:50.904 --> 00:52:53.307 align:start position:30% line:-2
ダウンストリームを
停止する必要があります

00:52:53.407 --> 00:52:56.844 align:start position:29% line:-1
モデラは時間順だからです

00:52:56.944 --> 00:53:01.682 align:start position:21% line:-2
インターバルのアップストリームが
閉じるまでクロックは動かせません

00:52:56.944 --> 00:53:01.682 align:start position:21% line:-2
インターバルのアップストリームが
閉じるまでクロックは動かせません

00:53:01.915 --> 00:53:05.786 align:start position:29% line:-2
長い区間でインターバルが
できていたら―

00:53:05.886 --> 00:53:08.655 align:start position:36% line:-1
出力は止まります

00:53:08.889 --> 00:53:12.659 align:start position:30% line:-2
ユーザが
レコード停止を押せば―

00:53:12.760 --> 00:53:17.331 align:start position:27% line:-2
インターバルは閉じ
元どおりにデータが入ります

00:53:17.498 --> 00:53:19.166 align:start position:30% line:-1
でも好ましくありません

00:53:19.333 --> 00:53:22.202 align:start position:30% line:-2
ディベロッパには
２つの選択肢があります

00:53:22.302 --> 00:53:26.573 align:start position:30% line:-2
Instrumentに
制限の要素を追加し―

00:53:26.673 --> 00:53:30.077 align:start position:23% line:-2
immediate modeで
サポートを選ぶこと

00:53:30.744 --> 00:53:36.216 align:start position:21% line:-2
もう１つは先ほどエキスパート
システムで実演したのと同じように

00:53:36.350 --> 00:53:39.720 align:start position:25% line:-2
モデラから出力として
インターバルデータを離す方法

00:53:39.820 --> 00:53:42.356 align:start position:34% line:-2
私たちは実際
インターバルよりも

00:53:42.456 --> 00:53:45.058 align:start position:18% line:-2
os signpost pointの
イベントを使います

00:53:45.158 --> 00:53:47.161 align:start position:34% line:-1
簡単に見えますが―

00:53:47.261 --> 00:53:50.330 align:start position:27% line:-2
immediateモードは
実装する時に注意が必要です

00:53:51.398 --> 00:53:53.901 align:start position:32% line:-1
３つ目の重要な点は―

00:53:54.034 --> 00:53:58.706 align:start position:12% line:-2
大量の入力データを
ターゲットしたInstrumentを作る時

00:53:58.906 --> 00:54:04.111 align:start position:25% line:-2
プリレコードタイムが
５秒モードのものが効率的です

00:53:58.906 --> 00:54:04.111 align:start position:25% line:-2
プリレコードタイムが
５秒モードのものが効率的です

00:54:04.211 --> 00:54:05.579 align:start position:27% line:-1
traceドキュメントに―

00:54:05.679 --> 00:54:08.215 align:start position:25% line:-2
レコード形式の
オプションを切り替える方法は

00:54:08.315 --> 00:54:12.853 align:start position:12% line:-2
immediateと deferredと
last end secondsモードです

00:54:13.153 --> 00:54:14.988 align:start position:36% line:-1
なぜ効率的なのか

00:54:15.088 --> 00:54:18.125 align:start position:29% line:-2
レコーディング技術が
バッファリングを使用し―

00:54:18.225 --> 00:54:20.294 align:start position:25% line:-1
パフォーマンスを改善するので

00:54:20.394 --> 00:54:23.163 align:start position:20% line:-2
データをInstrumentsから
リアルタイムで消費しないからです

00:54:23.263 --> 00:54:25.966 align:start position:27% line:-2
signpostデータには
大きな効果があり―

00:54:26.066 --> 00:54:31.872 align:start position:30% line:-2
最新の５秒のデータしか
見られませんが

00:54:32.139 --> 00:54:36.076 align:start position:25% line:-2
５秒モードでは
10倍もの速度で処理可能です

00:54:36.176 --> 00:54:41.248 align:start position:18% line:-2
Instrumentが生成する大量の
データの処理にはもってこいです

00:54:41.348 --> 00:54:43.684 align:start position:18% line:-2
System Traceや
Metal System Trace

00:54:43.784 --> 00:54:47.054 align:start position:25% line:-2
そしてゲームパフォーマンス
テンプレートでは一般的ですが

00:54:47.154 --> 00:54:49.723 align:start position:25% line:-2
このようなアプリケーションを
ターゲットとする場合―

00:54:49.823 --> 00:54:53.293 align:start position:23% line:-2
immediate modeは
選びません

00:54:53.394 --> 00:54:58.766 align:start position:21% line:-2
ユーザやInstrumentsに
問題はなく―

00:54:58.866 --> 00:55:01.101 align:start position:27% line:-2
データ取得やインターバルの
問題でもありません

00:54:58.866 --> 00:55:01.101 align:start position:27% line:-2
データ取得やインターバルの
問題でもありません

00:55:02.836 --> 00:55:04.671 align:start position:38% line:-1
終了の時間です

00:55:04.771 --> 00:55:06.840 align:start position:32% line:-1
多くのワークを経て―

00:55:07.041 --> 00:55:12.513 align:start position:27% line:-2
皆さんと分かち合えたことが
最高の喜びです

00:55:12.613 --> 00:55:16.116 align:start position:30% line:-2
皆さんの製品を見るのが
待ち遠しいです

00:55:16.450 --> 00:55:19.853 align:start position:38% line:-2
私たちと直接
話したい方は―

00:55:19.953 --> 00:55:23.223 align:start position:36% line:-2
３時に８番ラボへ
お越しください

00:55:23.323 --> 00:55:29.229 align:start position:14% line:-2
os signpost APIの使い方は
405セッションで紹介します

00:55:29.730 --> 00:55:30.931 align:start position:36% line:-1
楽しんでください

00:55:31.265 --> 00:55:35.536 align:start position:43% line:-1
(拍手)
