WEBVTT

00:00:07.007 --> 00:00:16.283 align:start position:43% line:-1
(音楽)

00:00:19.920 --> 00:00:21.054 align:start position:45% line:-1
どうも

00:00:21.288 --> 00:00:22.623 align:start position:41% line:-1
こんにちは

00:00:22.723 --> 00:00:26.793 align:start position:43% line:-1
(拍手)

00:00:27.694 --> 00:00:31.131 align:start position:0% line:-2
Adding Delight to Your iOS Appへ
ようこそ

00:00:31.565 --> 00:00:32.533 align:start position:43% line:-1
ベンです

00:00:32.633 --> 00:00:33.800 align:start position:39% line:-1
ピーターです

00:00:33.901 --> 00:00:37.538 align:start position:25% line:-2
魔法を生み出すプロのヒントを
６つ お教えします

00:00:37.905 --> 00:00:41.308 align:start position:27% line:-2
まずは
外付けディスプレイサポート

00:00:41.408 --> 00:00:44.111 align:start position:30% line:-2
アプリケーション体験を
大画面に

00:00:45.946 --> 00:00:49.950 align:start position:30% line:-2
次は最新の
プログラミングパターン

00:00:50.050 --> 00:00:51.785 align:start position:29% line:-1
レイアウト駆動型UIです

00:00:52.686 --> 00:00:57.858 align:start position:27% line:-2
次は顧客が楽しい体験を
可能な限り早く始められる―

00:00:57.958 --> 00:00:59.793 align:start position:39% line:-1
起動の高速化

00:01:00.194 --> 00:01:04.798 align:start position:25% line:-2
スムーズなスクロールに尽力し
快適さを保ちます

00:01:05.632 --> 00:01:08.769 align:start position:30% line:-2
連係はiOSの
最も魔法的な体験の１つ

00:01:08.869 --> 00:01:13.140 align:start position:27% line:-2
Handoffを簡単に
組み込む方法をお見せします

00:01:13.607 --> 00:01:19.580 align:start position:23% line:-2
最後に「マトリックス」レベルの
プロのデバッグ技をお教えします

00:01:20.447 --> 00:01:23.150 align:start position:36% line:-2
盛りだくさんです
始めましょう

00:01:28.422 --> 00:01:33.794 align:start position:27% line:-2
iOSデバイスの特徴は
驚異の統合ディスプレイです

00:01:35.529 --> 00:01:41.535 align:start position:21% line:-2
外付けディスプレイサポートで
アプリケーション体験が向上します

00:01:43.303 --> 00:01:46.273 align:start position:29% line:-1
解説用のデモを作りました

00:01:47.074 --> 00:01:50.143 align:start position:27% line:-2
iOSに組み込まれた
ディスプレイのミラー化は―

00:01:50.244 --> 00:01:55.349 align:start position:29% line:-2
外部接続ディスプレイに
システムUIを再現します

00:01:56.383 --> 00:02:00.120 align:start position:32% line:-2
デモはご覧のとおり
単純なフォトビューア

00:01:56.383 --> 00:02:00.120 align:start position:32% line:-2
デモはご覧のとおり
単純なフォトビューア

00:02:00.220 --> 00:02:04.858 align:start position:29% line:-2
サムネイルをタップすると
全画面表示されます

00:02:05.359 --> 00:02:09.863 align:start position:23% line:-2
この体験が外付けディスプレイに
再現されます

00:02:11.298 --> 00:02:17.304 align:start position:20% line:-2
iPhoneを回転させ 横長にして
そのサイズを十分に生かせます

00:02:19.039 --> 00:02:23.744 align:start position:27% line:-2
すばらしいことに労せずして
この体験を得られました

00:02:24.711 --> 00:02:27.648 align:start position:29% line:-2
しかし
これ以上のことができます

00:02:28.382 --> 00:02:33.420 align:start position:25% line:-2
iOSに組み込まれたAPIは
この外部接続ディスプレイに―

00:02:33.520 --> 00:02:37.624 align:start position:30% line:-2
完全にカスタムの
第２UIを生成できます

00:02:39.526 --> 00:02:43.096 align:start position:27% line:-2
実行したアプリケーションの
例を見ましょう

00:02:45.465 --> 00:02:47.668 align:start position:29% line:-1
好例はKeynoteです

00:02:48.135 --> 00:02:53.040 align:start position:23% line:-2
外付けディスプレイでは目の前の
最初のスライドに集中

00:02:53.640 --> 00:02:58.579 align:start position:20% line:-2
iPhoneの統合ディスプレイでは
講演者用メモも次のスライドも―

00:02:58.679 --> 00:03:01.315 align:start position:36% line:-2
不可欠なツールを
すべて見られます

00:02:58.679 --> 00:03:01.315 align:start position:36% line:-2
不可欠なツールを
すべて見られます

00:03:02.916 --> 00:03:04.418 align:start position:38% line:-1
あるいはゲーム

00:03:05.352 --> 00:03:08.255 align:start position:36% line:-2
通常は操作画面が
重なっていますが

00:03:08.889 --> 00:03:13.227 align:start position:29% line:-2
そこで完全にカスタムの
操作用UIを生成できます

00:03:13.327 --> 00:03:16.296 align:start position:32% line:-2
これをディスプレイに
載せれば―

00:03:16.797 --> 00:03:22.703 align:start position:21% line:-2
邪魔も入らず 没入的ゲーム体験が
外付けディスプレイで可能に

00:03:25.439 --> 00:03:29.209 align:start position:25% line:-2
外付けディスプレイ用に
アプリケーションを設計する際

00:03:29.409 --> 00:03:32.179 align:start position:34% line:-2
考慮すべき
重要な点があります

00:03:33.747 --> 00:03:39.052 align:start position:25% line:-2
明らかにサイズが違う上
iPhoneはパーソナルです

00:03:39.386 --> 00:03:44.057 align:start position:30% line:-2
画面に表示させる情報は
非公開と考えるべきです

00:03:45.392 --> 00:03:51.398 align:start position:23% line:-2
一方 外付けディスプレイは通常
大勢が見られる環境にあります

00:03:51.665 --> 00:03:56.270 align:start position:25% line:-2
例えば居間のテレビや会議場の
プロジェクションシステム

00:03:57.538 --> 00:04:01.942 align:start position:27% line:-2
その画面に表示される情報は
公開と仮定すべきです

00:03:57.538 --> 00:04:01.942 align:start position:27% line:-2
その画面に表示される情報は
公開と仮定すべきです

00:04:03.110 --> 00:04:08.081 align:start position:23% line:-2
さらにiPhoneとiPadの
ディスプレイは対話型ですが

00:04:08.182 --> 00:04:10.417 align:start position:32% line:-2
外付けディスプレイは
違います

00:04:10.651 --> 00:04:12.019 align:start position:38% line:-1
UIの要素や―

00:04:12.119 --> 00:04:16.589 align:start position:29% line:-2
対話可能なコントロールは
表示すべきではありません

00:04:17.991 --> 00:04:22.963 align:start position:27% line:-2
この考えをデモに当てはめて
何ができるか見てみましょう

00:04:24.131 --> 00:04:27.501 align:start position:30% line:-2
外付けディスプレイ用に
最適化してあります

00:04:28.468 --> 00:04:30.137 align:start position:38% line:-1
ご覧のとおり―

00:04:30.237 --> 00:04:34.775 align:start position:30% line:-2
外付けディスプレイには
選んだ写真を全画面表示

00:04:35.442 --> 00:04:38.745 align:start position:34% line:-2
統合ディスプレイは
サムネールのみ

00:04:38.846 --> 00:04:43.750 align:start position:27% line:-2
新しい選択インジケータが
全画面表示の写真を示します

00:04:45.285 --> 00:04:49.056 align:start position:27% line:-2
単純ですが このデザインの
有効な使い方です

00:04:50.791 --> 00:04:55.229 align:start position:27% line:-2
デモにどう組み込んだか
３つのテーマでお見せします

00:04:56.029 --> 00:05:00.100 align:start position:34% line:-2
接続 動作
そして接続遷移です

00:04:56.029 --> 00:05:00.100 align:start position:34% line:-2
接続 動作
そして接続遷移です

00:05:01.101 --> 00:05:02.836 align:start position:38% line:-1
まず最初は接続

00:05:03.370 --> 00:05:06.707 align:start position:30% line:-2
外付けディスプレイの
接続の有無を知るには？

00:05:08.008 --> 00:05:10.878 align:start position:25% line:-2
UIScreenのクラス変数
screensは―

00:05:10.978 --> 00:05:16.083 align:start position:25% line:-2
iPhoneを含む すべての
接続ディスプレイを収容します

00:05:16.817 --> 00:05:22.823 align:start position:23% line:-2
この配列に複数の要素があれば
外付けディスプレイと分かります

00:05:24.491 --> 00:05:30.230 align:start position:27% line:-2
加えて外付けディスプレイは
接続も切断も自由なので―

00:05:30.898 --> 00:05:34.902 align:start position:30% line:-2
接続時も切断時も
UIKitが通知します

00:05:35.502 --> 00:05:39.306 align:start position:16% line:-2
UIScreen.didConnect
Notificationか―

00:05:39.406 --> 00:05:42.209 align:start position:11% line:-2
UIScreen.didDisconnect
Notificationに応じ

00:05:42.309 --> 00:05:44.978 align:start position:32% line:-2
UIを生成か
破棄せねばなりません

00:05:46.079 --> 00:05:50.617 align:start position:23% line:-2
第２UIの設定がどれほど簡単か
やってみてくれる？

00:05:50.851 --> 00:05:56.790 align:start position:23% line:-2
喜んで　UIScreenの
接続コールバックに飛びましょう

00:05:57.658 --> 00:06:02.129 align:start position:27% line:-2
screens配列の最後に
ローカル変数を設定します

00:05:57.658 --> 00:06:02.129 align:start position:27% line:-2
screens配列の最後に
ローカル変数を設定します

00:06:02.429 --> 00:06:04.431 align:start position:32% line:-1
外付けと分かるのは―

00:06:04.531 --> 00:06:08.035 align:start position:11% line:-2
didConnectNotification
コールバック内だから

00:06:08.502 --> 00:06:12.973 align:start position:21% line:-2
次に このディスプレイに表示する
UIウインドウを生成し

00:06:13.173 --> 00:06:17.044 align:start position:27% line:-2
画面プロパティを
screenに割り当てます

00:06:17.144 --> 00:06:20.180 align:start position:30% line:-2
次は このウインドウを
設定したことを確認

00:06:20.314 --> 00:06:22.015 align:start position:29% line:-1
関数に組み込みましたが―

00:06:22.115 --> 00:06:26.453 align:start position:18% line:-2
ルートViewControllerを
ウインドウに貼り付けるだけ

00:06:26.553 --> 00:06:29.456 align:start position:34% line:-2
内蔵ディスプレイと
同じ方法です

00:06:29.790 --> 00:06:35.496 align:start position:23% line:-2
最後に このウインドウが
外付け画面に表示されるよう設定

00:06:36.129 --> 00:06:37.564 align:start position:38% line:-1
以上が接続です

00:06:37.664 --> 00:06:40.667 align:start position:38% line:-2
次は切断ですが
もっと簡単です

00:06:41.168 --> 00:06:45.939 align:start position:5% line:-2
これはUIScreen.didDisconnect
Notificationハンドラの中身

00:06:46.039 --> 00:06:48.742 align:start position:34% line:-2
ウインドウを
非表示にしてから―

00:06:48.842 --> 00:06:52.346 align:start position:30% line:-2
ローカル参照を削除し
リソースを解放するだけ

00:06:52.446 --> 00:06:56.850 align:start position:32% line:-2
以上がディスプレイの
接続と切断の実装です

00:06:57.050 --> 00:06:58.952 align:start position:34% line:-1
本当に簡単だったね

00:07:00.754 --> 00:07:02.556 align:start position:34% line:-1
次に考えるべきは―

00:07:02.656 --> 00:07:07.394 align:start position:27% line:-2
接続時のアプリケーションの
デフォルト動作の変更です

00:07:08.996 --> 00:07:12.266 align:start position:32% line:-2
コードの例を
デモで見てみましょう

00:07:13.033 --> 00:07:17.037 align:start position:27% line:-2
コレクションビューで
写真をタップした時のコード

00:07:18.138 --> 00:07:19.940 align:start position:29% line:-2
単一の
ディスプレイモードでは―

00:07:20.007 --> 00:07:24.678 align:start position:14% line:-2
photoViewControllerを
ナビゲーションスタックにプッシュ

00:07:25.445 --> 00:07:27.848 align:start position:25% line:-2
しかし
外付けディスプレイ接続時は―

00:07:27.948 --> 00:07:32.152 align:start position:25% line:-2
そのコントローラは第２UIに
既に表示されているので

00:07:32.386 --> 00:07:35.355 align:start position:27% line:-1
その写真の表示を命じるだけ

00:07:35.856 --> 00:07:36.790 align:start position:39% line:-1
実に簡単です

00:07:37.991 --> 00:07:42.029 align:start position:25% line:-2
外付けディスプレイ用の設計で
第３に考えるべきは―

00:07:42.996 --> 00:07:46.967 align:start position:32% line:-2
接続の切り替えを
滑らかに行うことです

00:07:48.735 --> 00:07:51.371 align:start position:30% line:-1
デモに戻って解説します

00:07:52.673 --> 00:07:56.777 align:start position:27% line:-2
現在は写真を
フルサイズで表示しています

00:07:56.944 --> 00:07:59.713 align:start position:27% line:-1
外付けディスプレイは未接続

00:08:00.614 --> 00:08:02.516 align:start position:32% line:-1
つなぐと どうなるか

00:08:06.220 --> 00:08:10.123 align:start position:21% line:-2
View Controllerを
サムネールビューに戻し―

00:08:10.224 --> 00:08:16.230 align:start position:21% line:-2
同時に写真を外付けディスプレイに
フルサイズ表示しました

00:08:17.831 --> 00:08:22.870 align:start position:29% line:-2
こうした滑らかな遷移で
コンテキストが保護でき―

00:08:22.970 --> 00:08:26.373 align:start position:30% line:-2
顧客は自分がフローの
どこにいるか分かります

00:08:28.075 --> 00:08:31.979 align:start position:25% line:-2
外付けディスプレイサポートの
設定は実に簡単

00:08:32.479 --> 00:08:36.517 align:start position:21% line:-2
ただ さまざまな
ディスプレイコンテキストを考慮し

00:08:36.616 --> 00:08:39.385 align:start position:29% line:-2
滑らかに切り替わるように
してください

00:08:40.053 --> 00:08:44.858 align:start position:20% line:-2
さらなる詳細はWWDC 2011の
この講演を参照してください

00:08:45.259 --> 00:08:46.059 align:start position:43% line:-1
以上です

00:08:46.593 --> 00:08:50.464 align:start position:43% line:-1
(拍手)

00:08:51.632 --> 00:08:55.836 align:start position:21% line:-2
レイアウト駆動型UIは
アプリケーションを書くのに有効で

00:08:55.936 --> 00:09:00.407 align:start position:30% line:-2
機能の追加やデバッグが
より簡単になります

00:08:55.936 --> 00:09:00.407 align:start position:30% line:-2
機能の追加やデバッグが
より簡単になります

00:09:01.375 --> 00:09:06.914 align:start position:23% line:-2
iOSアプリケーションの問題を
引き起こす 一番の原因―

00:09:07.014 --> 00:09:09.950 align:start position:30% line:-2
UIの複雑さへの対処に
役立ちます

00:09:10.751 --> 00:09:13.954 align:start position:27% line:-2
皆さん 経験があるでしょう
私もです

00:09:14.321 --> 00:09:16.957 align:start position:29% line:-2
ジェスチャコールバックで
コードを足す

00:09:17.057 --> 00:09:20.527 align:start position:29% line:-2
通知コールバックで
UI更新コードを追加する

00:09:20.627 --> 00:09:24.665 align:start position:25% line:-2
UIコントロールで
値のトリガを得て さらに追加

00:09:24.865 --> 00:09:29.536 align:start position:23% line:-2
すると突然 アプリケーションが
理解しがたい状態に

00:09:29.870 --> 00:09:34.208 align:start position:30% line:-2
そして奇妙な命令に従い
異常なバグを再現

00:09:34.575 --> 00:09:39.046 align:start position:29% line:-2
機能を追加すればするほど
問題が悪化します

00:09:40.080 --> 00:09:42.850 align:start position:32% line:-2
そうせずに
簡単なレシピに従い―

00:09:42.950 --> 00:09:46.920 align:start position:30% line:-2
UI更新をレイアウトに
プッシュすれば―

00:09:47.020 --> 00:09:50.724 align:start position:27% line:-2
バグを排除でき
機能の追加が簡単になります

00:09:51.258 --> 00:09:55.762 align:start position:27% line:-2
ではレイアウト駆動型UIを
追加するレシピです

00:09:57.431 --> 00:09:59.032 align:start position:32% line:-1
最初にすべきことは―

00:09:59.133 --> 00:10:04.071 align:start position:21% line:-2
UIに影響を与えるすべての状態の
特定と追跡です

00:09:59.133 --> 00:10:04.071 align:start position:21% line:-2
UIに影響を与えるすべての状態の
特定と追跡です

00:10:05.372 --> 00:10:08.041 align:start position:36% line:-2
次は その状態が
変わるたびに―

00:10:08.141 --> 00:10:11.678 align:start position:16% line:-2
setNeedsLayoutを呼び出し
レイアウトを無効にします

00:10:12.813 --> 00:10:18.318 align:start position:18% line:-2
最後にlayoutSubviewsで
UIを更新しましょう

00:10:19.186 --> 00:10:20.154 align:start position:43% line:-1
以上です

00:10:20.587 --> 00:10:24.291 align:start position:32% line:-2
このレシピは
簡単さがたまりません

00:10:25.425 --> 00:10:29.463 align:start position:30% line:-2
レイアウト駆動型UIを
全体に適用すると？

00:10:30.564 --> 00:10:33.934 align:start position:29% line:-2
iOSアプリケーションの
３つのコア構成要素は―

00:10:34.034 --> 00:10:37.137 align:start position:27% line:-2
レイアウト アニメーション
ジェスチャです

00:10:37.671 --> 00:10:40.874 align:start position:29% line:-1
この３つ 全部の実装が―

00:10:40.974 --> 00:10:44.845 align:start position:34% line:-2
実に見事に調和して
機能するのです

00:10:45.812 --> 00:10:47.781 align:start position:32% line:-1
まずはレイアウトから

00:10:49.650 --> 00:10:54.688 align:start position:23% line:-2
アプリケーションのコンテンツを
画面に配置するプロセスですが

00:10:55.422 --> 00:11:00.427 align:start position:21% line:-2
他のUI更新もすべて
レイアウトで行うのをお勧めします

00:10:55.422 --> 00:11:00.427 align:start position:21% line:-2
他のUI更新もすべて
レイアウトで行うのをお勧めします

00:11:00.661 --> 00:11:04.565 align:start position:27% line:-2
この点を強調すべく
単純なサンプルを書きました

00:11:04.932 --> 00:11:06.366 align:start position:32% line:-1
説明をお願いできる？

00:11:07.134 --> 00:11:08.101 align:start position:43% line:-1
いいとも

00:11:09.002 --> 00:11:12.372 align:start position:29% line:-2
本当に単純で
中央の“クールガイ”は―

00:11:12.773 --> 00:11:16.777 align:start position:25% line:-2
我々がクールな気分の時に現れ
そうでない時は隠れます

00:11:17.845 --> 00:11:20.881 align:start position:25% line:-2
今はとてもクールな気分だから
呼び戻そう

00:11:21.682 --> 00:11:24.818 align:start position:30% line:-2
すばらしい
これは単純な例ですが―

00:11:24.918 --> 00:11:29.623 align:start position:30% line:-2
仕組みが理解できるよう
段階を踏んで説明します

00:11:30.257 --> 00:11:34.027 align:start position:25% line:-2
このアプリケーションの概要を
学んで―

00:11:34.128 --> 00:11:37.497 align:start position:27% line:-2
ベンが見せてくれたレシピを
やってみましょう

00:11:38.065 --> 00:11:42.202 align:start position:27% line:-2
これはクールガイのビューを
管理する管理ビュー

00:11:42.302 --> 00:11:45.272 align:start position:32% line:-2
先に書いておいた
coolViewです

00:11:45.739 --> 00:11:48.175 align:start position:29% line:-1
ベン 最初のステップは？

00:11:48.442 --> 00:11:53.213 align:start position:29% line:-2
UIに影響を与える状態の
特定と追跡です

00:11:53.580 --> 00:11:55.182 align:start position:34% line:-1
思い出してください

00:11:55.282 --> 00:12:00.187 align:start position:27% line:-2
クールガイは我々が
クールな気分の時に現れます

00:11:55.282 --> 00:12:00.187 align:start position:27% line:-2
クールガイは我々が
クールな気分の時に現れます

00:12:00.621 --> 00:12:03.390 align:start position:25% line:-2
feelingCoolという
変数があるはず

00:12:03.790 --> 00:12:07.094 align:start position:30% line:-2
出ましたね
ベン 次のステップは？

00:12:07.394 --> 00:12:09.630 align:start position:29% line:-1
その状態が変わるたびに―

00:12:09.730 --> 00:12:13.133 align:start position:16% line:-2
setNeedsLayoutを呼び出し
レイアウトを無効に

00:12:13.534 --> 00:12:17.337 align:start position:27% line:-2
状態変化のたびに
必ずこうなるようにすること

00:12:17.437 --> 00:12:21.275 align:start position:25% line:-2
状態変化はアプリケーションの
あちこちで起こります

00:12:21.475 --> 00:12:25.712 align:start position:25% line:-2
レイアウトが必ず無効になるか
どう確認する？

00:12:25.946 --> 00:12:28.916 align:start position:34% line:-2
よくぞ聞いてくれた
名案がある

00:12:29.183 --> 00:12:32.586 align:start position:20% line:-2
Swiftのプロパティオブザーバと
いう機能で―

00:12:33.187 --> 00:12:37.357 align:start position:29% line:-2
プロパティ設定の前か後に
コードを実行できます

00:12:37.691 --> 00:12:42.262 align:start position:14% line:-2
didSetプロパティのオブザーバで
setNeedsLayoutを呼び出せる

00:12:42.462 --> 00:12:46.466 align:start position:30% line:-2
プロパティオブザーバの
優れた使い方です

00:12:47.134 --> 00:12:51.438 align:start position:29% line:-2
これで終わったも同然
ベン 最後のステップは？

00:12:51.872 --> 00:12:56.543 align:start position:11% line:-2
この状態を使い
layoutSubviewsでUIを更新する

00:12:57.211 --> 00:12:58.979 align:start position:38% line:-1
了解　簡単です

00:12:59.179 --> 00:13:01.582 align:start position:23% line:-2
layoutSubviewsを
オーバーライドし―

00:12:59.179 --> 00:13:01.582 align:start position:23% line:-2
layoutSubviewsを
オーバーライドし―

00:13:01.682 --> 00:13:06.753 align:start position:16% line:-2
feelingCoolの値を基盤に
isHiddenプロパティを更新します

00:13:06.987 --> 00:13:11.225 align:start position:25% line:-2
レイアウト駆動型UIの追加に
必要な作業は これだけ

00:13:11.625 --> 00:13:17.631 align:start position:23% line:-2
この簡単な例でも成功しますが
より複雑な先の例でも成功します

00:13:18.198 --> 00:13:21.535 align:start position:18% line:-2
昨夜 ベンと遅くまで
Apple Campusを席巻中の―

00:13:21.635 --> 00:13:26.006 align:start position:20% line:-2
macOSの「ザ･ギャザリング」で
遊んでいました

00:13:26.907 --> 00:13:28.842 align:start position:32% line:-1
週末の対戦に備えて―

00:13:28.942 --> 00:13:32.179 align:start position:23% line:-2
デッキビルダアプリケーションを
作りました

00:13:32.746 --> 00:13:37.518 align:start position:27% line:-2
カードをドラッグして
デッキエリアに放り込めます

00:13:37.618 --> 00:13:42.156 align:start position:30% line:-2
速くて楽しく 滑らかで
２枚を同時に選べます

00:13:42.322 --> 00:13:46.793 align:start position:23% line:-2
レイアウト駆動型UIの仕組みが
よく分かりますし―

00:13:46.927 --> 00:13:50.731 align:start position:32% line:-2
何より 次の週末に
ベンの同僚に勝てます

00:13:51.298 --> 00:13:55.302 align:start position:27% line:-2
レイアウト駆動型UIの
３大コア構成要素への適用法

00:13:55.402 --> 00:13:58.005 align:start position:27% line:-1
残り２つを順番に説明します

00:13:58.105 --> 00:14:00.274 align:start position:32% line:-1
まずはアニメーション

00:13:58.105 --> 00:14:00.274 align:start position:32% line:-1
まずはアニメーション

00:14:01.708 --> 00:14:05.779 align:start position:21% line:-2
アニメーションは
すばらしいiOS体験を保証します

00:14:06.413 --> 00:14:11.051 align:start position:29% line:-2
躍動感をもたらす
UIの生き生きとした動き

00:14:12.286 --> 00:14:17.524 align:start position:18% line:-2
UIKitにはアニメーションの生成に
役立つ優れたAPIがあります

00:14:18.792 --> 00:14:22.796 align:start position:9% line:-2
UIViewPropertyAnimatorは
実に強力なツールで

00:14:22.963 --> 00:14:26.200 align:start position:27% line:-2
昨年 新機能を
多数 搭載してパワーアップ

00:14:26.867 --> 00:14:28.368 align:start position:30% line:-2
いろいろな詳細は
WWDC 2017の―

00:14:28.469 --> 00:14:33.474 align:start position:0% line:-2
Advanced Animations with UIKitを
参照してください

00:14:34.641 --> 00:14:40.647 align:start position:16% line:-2
さらにUIViewのクロージャAPIも
実証済みの優れた方法です

00:14:42.482 --> 00:14:45.752 align:start position:25% line:-2
レイアウト駆動型UIベースの
アプリケーションで―

00:14:45.853 --> 00:14:48.288 align:start position:23% line:-2
UIViewのアニメーションが
使えます

00:14:48.922 --> 00:14:50.324 align:start position:30% line:-1
１つ覚えておくべきは―

00:14:50.424 --> 00:14:54.928 align:start position:7% line:-2
beginFromCurrentStateという
オプションを必ず使うこと

00:14:55.729 --> 00:15:00.200 align:start position:30% line:-2
これはUIkitに
アニメーション中でも―

00:14:55.729 --> 00:15:00.200 align:start position:30% line:-2
これはUIkitに
アニメーション中でも―

00:15:00.300 --> 00:15:03.770 align:start position:25% line:-2
ビューの現在の画面上の位置を
取るよう命じます

00:15:04.171 --> 00:15:09.343 align:start position:23% line:-2
これにより 割り込み可能な
対話型アニメーションができます

00:15:09.710 --> 00:15:13.914 align:start position:34% line:-2
デッキビルダの例を
見てみましょう

00:15:15.249 --> 00:15:19.520 align:start position:25% line:-2
デッキにどんなカードがあるか
追跡する変数があります

00:15:19.720 --> 00:15:23.156 align:start position:25% line:-2
Swiftの
プロパティオブザーバを使い―

00:15:23.257 --> 00:15:26.159 align:start position:14% line:-2
変化のたびに
setNeedsLayoutを呼び出し―

00:15:26.260 --> 00:15:28.095 align:start position:34% line:-1
レイアウトを無効に

00:15:29.830 --> 00:15:33.000 align:start position:30% line:-2
次に カードを
デッキに置きたい時は―

00:15:33.100 --> 00:15:38.238 align:start position:21% line:-2
レイアウトを無効にするこの配列に
そのカードを追加するだけ

00:15:38.338 --> 00:15:43.210 align:start position:5% line:-2
次に animationブロックの中で
beginFromCurrentStateを使い―

00:15:43.310 --> 00:15:45.546 align:start position:23% line:-2
layoutIfNeededを
呼び出します

00:15:46.013 --> 00:15:49.116 align:start position:16% line:-2
これがlayoutSubviews内の
コードを呼び出し―

00:15:49.216 --> 00:15:51.151 align:start position:36% line:-2
すべてのビューを
動かして―

00:15:51.251 --> 00:15:54.221 align:start position:30% line:-2
適切なアニメーションの
状態遷移を再生します

00:15:54.521 --> 00:15:57.891 align:start position:32% line:-2
そして私が強調したい
優れた点は―

00:15:57.991 --> 00:16:01.695 align:start position:32% line:-2
特別なケースを
追加しなくていいこと

00:15:57.991 --> 00:16:01.695 align:start position:32% line:-2
特別なケースを
追加しなくていいこと

00:16:02.062 --> 00:16:05.098 align:start position:25% line:-2
何もせずに
このレイアウトを得られました

00:16:05.199 --> 00:16:08.669 align:start position:25% line:-2
animationブロックの
レイアウトを実行しただけ

00:16:09.036 --> 00:16:10.637 align:start position:38% line:-1
すごいことです

00:16:11.371 --> 00:16:15.108 align:start position:30% line:-2
以上がアニメーションを
追加する方法です

00:16:16.276 --> 00:16:21.748 align:start position:23% line:-2
最後に ３つ目の
ジェスチャについてご説明します

00:16:22.015 --> 00:16:27.621 align:start position:7% line:-2
UIGestureRecognizerを語らずに
ジェスチャは語れません

00:16:27.721 --> 00:16:31.792 align:start position:25% line:-2
ジェスチャ操作を追加する
UIkitの優れたAPIです

00:16:33.427 --> 00:16:38.432 align:start position:4% line:-2
UIKitはUIgestureRecognizerの
具体的なサブクラスを提供します

00:16:38.732 --> 00:16:42.102 align:start position:21% line:-2
パン ピンチ スワイプ 回転など
何もかも

00:16:42.302 --> 00:16:45.606 align:start position:27% line:-2
これらを使い
お望みの操作が生成できます

00:16:45.706 --> 00:16:47.841 align:start position:27% line:-1
しかもカスタマイズ可能です

00:16:48.809 --> 00:16:51.145 align:start position:29% line:-1
クレイジーにしたいなら―

00:16:51.245 --> 00:16:54.214 align:start position:14% line:-2
UIGestureRecognizerの
サブクラスを作れます

00:16:56.016 --> 00:16:59.753 align:start position:7% line:-2
組み込みの
UIKitGestureRecognizerは―

00:16:59.853 --> 00:17:04.925 align:start position:21% line:-2
単発ジェスチャと連続ジェスチャの
違いを理解することが重要

00:16:59.853 --> 00:17:04.925 align:start position:21% line:-2
単発ジェスチャと連続ジェスチャの
違いを理解することが重要

00:17:05.826 --> 00:17:08.996 align:start position:27% line:-2
連続ジェスチャは
イベントの発生を知らせます

00:17:09.463 --> 00:17:11.165 align:start position:23% line:-1
Possibleの状態で開始し

00:17:11.397 --> 00:17:14.801 align:start position:29% line:-2
“Goを通過せず
200ドルも受け取らず”

00:17:14.902 --> 00:17:17.604 align:start position:21% line:-2
すぐに
Recognizedの状態に遷移

00:17:18.372 --> 00:17:22.509 align:start position:27% line:-2
アプリケーションの操作の
自動識別と追跡に便利ですが

00:17:22.608 --> 00:17:26.079 align:start position:29% line:-2
操作中の全段階で
知らせるわけではないです

00:17:27.448 --> 00:17:33.353 align:start position:23% line:-2
もう１つの連続ジェスチャは
はるかに高い忠実性を提供します

00:17:34.188 --> 00:17:37.291 align:start position:25% line:-2
単発ジェスチャと同様
Possibleの状態で開始

00:17:37.624 --> 00:17:41.328 align:start position:30% line:-2
しかし認識され始めると
Beganの状態に遷移

00:17:42.496 --> 00:17:45.465 align:start position:23% line:-2
追跡する時
Changedの状態に入ります

00:17:45.599 --> 00:17:50.270 align:start position:23% line:-2
ここでジェスチャが動き回り
一連の連続イベントを受信します

00:17:51.338 --> 00:17:55.709 align:start position:25% line:-2
ジェスチャが完了すると
Endedの状態に遷移します

00:17:57.478 --> 00:18:02.249 align:start position:9% line:-2
UIPanGestureRecognizerは
我々の好む連続ジェスチャの１つで

00:17:57.478 --> 00:18:02.249 align:start position:9% line:-2
UIPanGestureRecognizerは
我々の好む連続ジェスチャの１つで

00:18:02.649 --> 00:18:06.987 align:start position:29% line:-2
これを最大限に活用できる
優れた機能が２つあります

00:18:07.921 --> 00:18:13.126 align:start position:18% line:-2
translationInViewは
ジェスチャの移動位置を知らせ―

00:18:14.228 --> 00:18:17.998 align:start position:21% line:-2
velocityInViewは
ジェスチャの移動速度を知らせます

00:18:18.232 --> 00:18:22.069 align:start position:25% line:-2
ジェスチャと
続くアニメーションとの間で―

00:18:22.169 --> 00:18:23.904 align:start position:30% line:-1
速度を引き継げるのです

00:18:25.372 --> 00:18:29.610 align:start position:23% line:-2
こうしたジェスチャ操作の生成の
詳細はWWDC 2014の―

00:18:29.710 --> 00:18:35.082 align:start position:4% line:-2
Building Interruptible and
Responsive Interactionsで

00:18:36.150 --> 00:18:39.486 align:start position:9% line:-2
UIPanGestureRecognizerは
私も大好きで

00:18:39.586 --> 00:18:43.791 align:start position:30% line:-2
カードのドラッグ操作の
生成にも使いました

00:18:44.258 --> 00:18:47.261 align:start position:25% line:-2
ではレイアウト駆動型UIでの
やり方を

00:18:48.996 --> 00:18:52.032 align:start position:27% line:-2
やはりローカル変数が
このジェスチャを適用した―

00:18:52.633 --> 00:18:56.770 align:start position:30% line:-2
各カードのオフセットを
追跡します

00:18:57.271 --> 00:19:00.240 align:start position:29% line:-2
そして やはり
この変数が変わるたびに―

00:18:57.271 --> 00:19:00.240 align:start position:29% line:-2
そして やはり
この変数が変わるたびに―

00:19:00.340 --> 00:19:04.645 align:start position:12% line:-2
プロパティオブザーバで
setNeedsLayoutを呼び出します

00:19:06.146 --> 00:19:10.217 align:start position:11% line:-2
次はpanGestureRecognizer
コールバック関数内で―

00:19:10.517 --> 00:19:14.421 align:start position:29% line:-2
現在の変換とビューを
ジェスチャから取り出し―

00:19:14.655 --> 00:19:18.225 align:start position:32% line:-2
このジェスチャを
カードと関連づけます

00:19:18.792 --> 00:19:24.131 align:start position:21% line:-2
次に そのカードのオフセットを
この辞書内でインクリメントします

00:19:25.399 --> 00:19:28.101 align:start position:16% line:-1
最後にlayoutSubviewsで―

00:19:28.435 --> 00:19:32.072 align:start position:30% line:-2
カードのビューの位置を
更新するようにします

00:19:32.172 --> 00:19:35.075 align:start position:25% line:-1
この辞書のオフセットを基盤に

00:19:36.310 --> 00:19:39.980 align:start position:32% line:-2
特別なことは
何もしていないのです

00:19:40.080 --> 00:19:43.550 align:start position:25% line:-2
従来のレイアウト駆動型UIの
ケースだけ

00:19:44.084 --> 00:19:47.854 align:start position:32% line:-2
ジェスチャが駆動する
状態に対して―

00:19:47.955 --> 00:19:50.657 align:start position:23% line:-2
layoutSubviewsで
応答するだけ

00:19:51.525 --> 00:19:55.195 align:start position:30% line:-2
アプリケーション全体で
このパターンに従えば―

00:19:55.295 --> 00:19:59.466 align:start position:29% line:-2
こういう操作の組み込みが
とても簡単になります

00:20:00.400 --> 00:20:04.137 align:start position:23% line:-2
以上がレイアウト駆動型UIです
レシピのおさらいを

00:20:04.538 --> 00:20:07.975 align:start position:29% line:-2
UIに影響する
すべての状態の特定と追跡

00:20:08.075 --> 00:20:09.943 align:start position:29% line:-2
Swiftの
プロパティオブザーバで―

00:20:10.043 --> 00:20:13.781 align:start position:16% line:-2
状態が変わるたび
setNeedsLayoutを呼び出す

00:20:14.581 --> 00:20:17.751 align:start position:16% line:-2
最後に
layoutSubviewsの実装で―

00:20:17.851 --> 00:20:23.056 align:start position:29% line:-2
追跡した状態を基盤に
ビューの状態を更新します

00:20:23.190 --> 00:20:24.024 align:start position:43% line:-1
以上です

00:20:24.758 --> 00:20:28.829 align:start position:43% line:-1
(拍手)

00:20:29.029 --> 00:20:32.900 align:start position:27% line:-2
iOS体験とは
レスポンシブであることです

00:20:33.867 --> 00:20:39.740 align:start position:29% line:-2
また 顧客に楽しい経験を
可能な限り早く提供したい

00:20:40.908 --> 00:20:46.113 align:start position:21% line:-2
アイコンをタップして楽しむまでに
ステップが１つ 挟まります

00:20:46.847 --> 00:20:50.150 align:start position:36% line:-2
そのステップとは
起動時間です

00:20:52.519 --> 00:20:55.823 align:start position:32% line:-2
これを最適化するのに
役立つ―

00:20:55.923 --> 00:21:01.094 align:start position:23% line:-2
起動を構成する ５つの
高レベル構成要素をご説明します

00:20:55.923 --> 00:21:01.094 align:start position:23% line:-2
起動を構成する ５つの
高レベル構成要素をご説明します

00:21:02.596 --> 00:21:05.866 align:start position:34% line:-2
まずは１つ目の
プロセスのフォーク

00:21:06.900 --> 00:21:09.469 align:start position:36% line:-2
このフェーズでは
何ができる？

00:21:10.003 --> 00:21:13.507 align:start position:32% line:-2
プロセスのフォークは
本当に複雑です

00:21:13.607 --> 00:21:16.743 align:start position:25% line:-2
fork and execの
manページを読んで―

00:21:16.844 --> 00:21:19.847 align:start position:34% line:-2
POSIXの基本を
把握したくなります

00:21:19.947 --> 00:21:24.418 align:start position:23% line:-2
冗談です　プロセスのフォークは
iOSにお任せください

00:21:25.619 --> 00:21:28.555 align:start position:32% line:-2
１つ目はお任せを
２つ目に行きましょう

00:21:31.458 --> 00:21:32.693 align:start position:34% line:-1
ダイナミックリンク

00:21:34.228 --> 00:21:39.066 align:start position:21% line:-2
このフェーズではメモリを割り当て
アプリケーションを実行し

00:21:39.733 --> 00:21:42.102 align:start position:29% line:-2
ライブラリと
フレームワークをリンクし

00:21:42.503 --> 00:21:45.739 align:start position:16% line:-2
Swiftや Objective-Cや
Foundationを初期化

00:21:46.306 --> 00:21:48.942 align:start position:34% line:-2
静的オブジェクトも
初期化します

00:21:50.077 --> 00:21:55.949 align:start position:23% line:-2
通常は これで標準起動時間の
40～50％を取られかねません

00:21:57.151 --> 00:22:01.422 align:start position:23% line:-2
ここで重要なのは
コードを全く実行していないこと

00:21:57.151 --> 00:22:01.422 align:start position:23% line:-2
ここで重要なのは
コードを全く実行していないこと

00:22:02.422 --> 00:22:05.592 align:start position:25% line:-2
これを最適化する方法の理解が
不可欠です

00:22:06.093 --> 00:22:08.562 align:start position:34% line:-2
皆さんに何か
いいアドバイスは？

00:22:08.729 --> 00:22:10.330 align:start position:34% line:-1
よくぞ聞いてくれた

00:22:10.430 --> 00:22:13.667 align:start position:27% line:-2
起動時間のリンクフェーズを
最適化する時は―

00:22:13.767 --> 00:22:16.103 align:start position:30% line:-2
細心の注意を払うことが
重要です

00:22:16.203 --> 00:22:20.140 align:start position:30% line:-2
起動時間を
かなり取られるからです

00:22:21.375 --> 00:22:26.513 align:start position:25% line:-2
まず 可能な時は
コードの重複を避けることです

00:22:26.880 --> 00:22:31.018 align:start position:29% line:-2
関数やオブジェクト
構造体が重複していたら―

00:22:31.118 --> 00:22:34.087 align:start position:27% line:-1
削除して 重複させないこと

00:22:35.122 --> 00:22:39.359 align:start position:27% line:-2
次に 他社製のライブラリは
使用を制限しましょう

00:22:39.993 --> 00:22:42.796 align:start position:29% line:-2
Apple製ライブラリは
キャッシュされるので―

00:22:42.896 --> 00:22:47.601 align:start position:30% line:-2
アクティブメモリに
既にあるかもしれません

00:22:48.268 --> 00:22:50.971 align:start position:34% line:-2
他社製ライブラリは
キャッシュされず―

00:22:51.071 --> 00:22:54.908 align:start position:23% line:-2
他のアプリケーションが
同じライブラリを使っていても―

00:22:55.008 --> 00:22:58.412 align:start position:34% line:-2
フレームワークに
入れねばなりません

00:22:58.579 --> 00:23:03.150 align:start position:29% line:-2
他社製の使用は
できるだけ制限すべきです

00:22:58.579 --> 00:23:03.150 align:start position:29% line:-2
他社製の使用は
できるだけ制限すべきです

00:23:03.817 --> 00:23:07.988 align:start position:30% line:-2
最後に
静的イニシャライザと―

00:23:08.088 --> 00:23:13.126 align:start position:12% line:-2
+loadや+initializeといった
メソッドでの動作を避けます

00:23:13.227 --> 00:23:17.231 align:start position:23% line:-2
アプリケーションの作業より先に
実行するものなので

00:23:18.665 --> 00:23:21.568 align:start position:27% line:-2
以上に関して より詳しくは
WWDC 2017の―

00:23:21.668 --> 00:23:27.007 align:start position:0% line:-2
App Startup Time: Past, Present,
and Futureを参照してください

00:23:28.575 --> 00:23:32.212 align:start position:25% line:-1
次のフェーズはUIの構築です

00:23:32.813 --> 00:23:37.317 align:start position:12% line:-2
ここではUIを準備し
View Controllerを構築します

00:23:38.452 --> 00:23:42.456 align:start position:30% line:-2
システムが状態を復元し
環境設定を読み込みます

00:23:43.690 --> 00:23:47.895 align:start position:23% line:-2
皆さんは必要なデータを読み込み
レスポンシブに

00:23:49.563 --> 00:23:52.733 align:start position:36% line:-2
このフェーズでは
何ができる？

00:23:53.500 --> 00:23:58.505 align:start position:23% line:-2
最適化により UIの構築速度を
できるだけ速くします

00:23:59.206 --> 00:24:01.909 align:start position:32% line:-2
つまりできるだけ速く
UIの―

00:23:59.206 --> 00:24:01.909 align:start position:32% line:-2
つまりできるだけ速く
UIの―

00:24:02.009 --> 00:24:05.212 align:start position:21% line:-2
アプリケーション起動メソッドから
戻ること

00:24:05.412 --> 00:24:08.215 align:start position:11% line:-2
willFinishLaunching
didFinishLaunching そして

00:24:08.315 --> 00:24:09.917 align:start position:20% line:-1
DidBecomeActiveです

00:24:10.050 --> 00:24:13.020 align:start position:30% line:-2
アプリケーションが
アクティブになるのは―

00:24:13.120 --> 00:24:15.656 align:start position:27% line:-1
これらから戻った後なのです

00:24:16.957 --> 00:24:19.660 align:start position:29% line:-2
次に アプリケーションの
起動中は―

00:24:19.927 --> 00:24:23.030 align:start position:32% line:-2
ファイルシステムへの
書き込みを避けます

00:24:23.430 --> 00:24:26.133 align:start position:34% line:-2
システムコールを
要求されるからです

00:24:26.767 --> 00:24:32.406 align:start position:29% line:-2
これに合わせて 起動中の
大量の読み込みも避けます

00:24:32.873 --> 00:24:38.111 align:start position:23% line:-2
今すぐ必要なデータのみの
ストリーミングを考えてください

00:24:38.979 --> 00:24:44.618 align:start position:21% line:-2
最後に データベースがクリーンか
整理状況の確認をお勧めします

00:24:45.319 --> 00:24:47.888 align:start position:25% line:-2
CoreDataライブラリを
使う時は―

00:24:48.121 --> 00:24:52.426 align:start position:21% line:-2
スキーマのできるだけ早い最適化を
検討してください

00:24:52.759 --> 00:24:56.897 align:start position:21% line:-2
独自のソリューションを
SQLiteなどで展開するなら―

00:24:56.997 --> 00:25:00.467 align:start position:25% line:-2
データベースの定期的な掃除を
検討してください

00:24:56.997 --> 00:25:00.467 align:start position:25% line:-2
データベースの定期的な掃除を
検討してください

00:25:00.567 --> 00:25:03.270 align:start position:29% line:-2
例えばアプリケーションの
更新時ですね

00:25:04.104 --> 00:25:05.005 align:start position:41% line:-1
ありがとう

00:25:06.039 --> 00:25:09.843 align:start position:23% line:-2
次のフェーズは
最初のフレームを生成する時です

00:25:11.278 --> 00:25:16.016 align:start position:16% line:-2
ここではCore Animationが
必要なレンダリングを行い―

00:25:16.950 --> 00:25:18.352 align:start position:34% line:-1
テキストを描画し―

00:25:18.452 --> 00:25:22.823 align:start position:30% line:-2
UIに表示すべき画像を
読み込んで展開します

00:25:24.424 --> 00:25:27.995 align:start position:25% line:-2
ピーター
何か賢明なアドバイスはある？

00:25:28.595 --> 00:25:29.696 align:start position:43% line:-1
あるとも

00:25:29.797 --> 00:25:34.101 align:start position:27% line:-2
最初のフレームを用意する時
重要なのは―

00:25:34.201 --> 00:25:38.438 align:start position:29% line:-2
起動中に必要なUIのみ
準備するよう注意すること

00:25:38.739 --> 00:25:42.776 align:start position:27% line:-2
ユーザが特定のセクションに
移動していなければ―

00:25:43.043 --> 00:25:44.111 align:start position:39% line:-1
読み込まず―

00:25:44.211 --> 00:25:47.815 align:start position:32% line:-2
絶対 必要な時に
ゆっくり取り込むこと

00:25:48.615 --> 00:25:53.053 align:start position:25% line:-2
アプリケーションに移動した時
表示されるべきでない―

00:25:53.153 --> 00:25:55.155 align:start position:34% line:-2
ビューとレイヤーを
隠すだけにしない

00:25:55.889 --> 00:25:59.393 align:start position:34% line:-2
隠していても
負担はかかるので―

00:25:59.493 --> 00:26:03.931 align:start position:25% line:-2
最初のフレームに不可欠な
ビューとレイヤーのみにします

00:25:59.493 --> 00:26:03.931 align:start position:25% line:-2
最初のフレームに不可欠な
ビューとレイヤーのみにします

00:26:05.566 --> 00:26:10.804 align:start position:30% line:-2
最後のフェーズは
拡張起動アクションです

00:26:12.339 --> 00:26:16.443 align:start position:27% line:-2
皆さんは こういうタスクを
起動パスから延期し―

00:26:16.543 --> 00:26:18.579 align:start position:27% line:-1
反応を早くしているでしょう

00:26:19.513 --> 00:26:24.184 align:start position:25% line:-2
それでレスポンシブになっても
まだあまり使えないのでは

00:26:25.385 --> 00:26:28.889 align:start position:27% line:-2
このフェーズでは
次の作業の優先度を決めます

00:26:29.323 --> 00:26:31.892 align:start position:30% line:-2
今すぐ表示すべき
コンテンツのみにします

00:26:32.860 --> 00:26:36.163 align:start position:23% line:-2
コンテンツをリモートサーバから
読み込むなら―

00:26:36.263 --> 00:26:39.766 align:start position:25% line:-2
ネットワークの状態が
課題となることを お忘れなく

00:26:39.900 --> 00:26:44.004 align:start position:25% line:-2
必要ならプレースホルダUIを
準備してください

00:26:46.273 --> 00:26:51.011 align:start position:27% line:-2
以上が起動を構成する
５つの高レベル構成要素です

00:26:52.446 --> 00:26:54.248 align:start position:36% line:-1
今日は もう１つ

00:26:55.549 --> 00:26:57.151 align:start position:41% line:-1
ABMです

00:26:58.018 --> 00:27:01.388 align:start position:34% line:-2
“常に計測する”と
いうことです

00:26:58.018 --> 00:27:01.388 align:start position:34% line:-2
“常に計測する”と
いうことです

00:27:01.488 --> 00:27:03.724 align:start position:34% line:-2
アプリケーションは
高速起動でないと

00:27:04.291 --> 00:27:08.095 align:start position:29% line:-2
起動に要する時間の把握は
不可欠です

00:27:08.428 --> 00:27:11.298 align:start position:25% line:-2
Time Profilerで
定期的に計測すること

00:27:11.932 --> 00:27:16.970 align:start position:25% line:-2
起動パスのコードを
変えるたびに計測してください

00:27:17.171 --> 00:27:22.342 align:start position:21% line:-2
そして１つのプロファイルに頼らず
統計的平均を取ること

00:27:23.911 --> 00:27:27.414 align:start position:30% line:-2
高速起動にして
反応を早くしてください

00:27:27.514 --> 00:27:31.518 align:start position:34% line:-2
必要なものだけ使い
計測を繰り返すこと

00:27:31.985 --> 00:27:32.753 align:start position:43% line:-1
以上です

00:27:32.920 --> 00:27:39.026 align:start position:43% line:-1
(拍手)

00:27:39.126 --> 00:27:43.964 align:start position:29% line:-2
スクロールはiOSの
ユーザ体験の重要な要素で

00:27:44.064 --> 00:27:47.668 align:start position:30% line:-2
アプリケーション体験の
大きな部分を占めます

00:27:48.635 --> 00:27:52.272 align:start position:29% line:-2
iPhoneとiPadは
魔法のガラス板で

00:27:52.372 --> 00:27:56.009 align:start position:30% line:-2
アプリケーションの
望むとおりに変化します

00:27:56.910 --> 00:27:58.745 align:start position:30% line:-1
そこで重要になるのが―

00:27:58.846 --> 00:28:04.017 align:start position:23% line:-2
この魔法の板の上でコンテンツを
滑らかに動かし続けること

00:27:58.846 --> 00:28:04.017 align:start position:23% line:-2
この魔法の板の上でコンテンツを
滑らかに動かし続けること

00:28:04.952 --> 00:28:10.224 align:start position:21% line:-2
Appleで好んで使うフレーズが
“バターのように滑らかな感触”

00:28:11.358 --> 00:28:14.862 align:start position:27% line:-2
しかし時々 引っかかったり
つかえたりして―

00:28:14.962 --> 00:28:19.132 align:start position:25% line:-2
バターというより
ピーナツバターのような感触に

00:28:20.134 --> 00:28:23.604 align:start position:32% line:-2
アプリケーションが
ぎくしゃくするのです

00:28:24.605 --> 00:28:28.408 align:start position:30% line:-2
ベン こうやって
動作が遅くなる原因は？

00:28:29.009 --> 00:28:34.882 align:start position:29% line:-2
君が説明した動作の遅さは
フレームが落ちているから

00:28:35.215 --> 00:28:40.487 align:start position:23% line:-2
原因を把握する必要がありますが
発生しうる重要な領域が２つ

00:28:40.954 --> 00:28:43.891 align:start position:30% line:-2
１つ目は
計算が多すぎる可能性で

00:28:44.491 --> 00:28:49.062 align:start position:27% line:-2
２つ目はグラフィック描画が
複雑すぎる可能性です

00:28:50.430 --> 00:28:54.034 align:start position:30% line:-2
順番に見ていきましょう
まずは計算から

00:28:54.902 --> 00:28:57.471 align:start position:36% line:-2
計算が多すぎるか
確かめるには？

00:28:58.605 --> 00:29:03.177 align:start position:4% line:-2
InstrumentsのTime Profilerが
究極のツールです

00:28:58.605 --> 00:29:03.177 align:start position:4% line:-2
InstrumentsのTime Profilerが
究極のツールです

00:29:03.844 --> 00:29:09.583 align:start position:23% line:-2
コードの使用CPU時間を計測し
行ごとに知らせてくれます

00:29:10.017 --> 00:29:13.220 align:start position:30% line:-2
実に有効なツールなので
WWDC 2016の―

00:29:13.320 --> 00:29:17.825 align:start position:4% line:-2
Using the Time Profiler in
Instrumentsをご参照ください

00:29:18.759 --> 00:29:23.130 align:start position:25% line:-2
Time Profilerで
ホットスポットを特定したら―

00:29:23.230 --> 00:29:26.099 align:start position:27% line:-2
最適化する
すばらしいヒントがあります

00:29:27.100 --> 00:29:31.672 align:start position:12% line:-2
１つはUICollectionViewと
UITableViewを使ったプリフェッチ

00:29:32.139 --> 00:29:34.308 align:start position:32% line:-2
ユーザが
特定のセルに向かい―

00:29:34.408 --> 00:29:37.678 align:start position:30% line:-2
スクロールしている間に
知らせるAPIです

00:29:38.011 --> 00:29:40.948 align:start position:27% line:-2
そのデータを
先読みする機会を得られます

00:29:41.515 --> 00:29:45.419 align:start position:27% line:-2
これに関しては2016年の
２人のイケメンによる―

00:29:45.519 --> 00:29:47.855 align:start position:36% line:-2
セッションを
ぜひご覧ください

00:29:49.356 --> 00:29:51.492 align:start position:29% line:-1
次にお教えするヒントは―

00:29:51.592 --> 00:29:55.095 align:start position:32% line:-2
メインキューの作業を
できるだけ減らし―

00:29:55.195 --> 00:29:56.964 align:start position:29% line:-1
バックグラウンドキューへ

00:29:57.064 --> 00:30:01.768 align:start position:21% line:-2
メインキューを解放し UI更新と
ユーザ入力の処理をさせます

00:29:57.064 --> 00:30:01.768 align:start position:21% line:-2
メインキューを解放し UI更新と
ユーザ入力の処理をさせます

00:30:02.336 --> 00:30:05.405 align:start position:30% line:-2
ベン
どんな作業が減らせる？

00:30:06.039 --> 00:30:08.308 align:start position:27% line:-1
予想の範囲内では通常の作業

00:30:08.575 --> 00:30:11.278 align:start position:25% line:-2
ネットワークや
ファイルシステムへのアクセス

00:30:11.378 --> 00:30:13.347 align:start position:36% line:-2
メインスレッドで
実行すべきでない

00:30:14.047 --> 00:30:18.085 align:start position:25% line:-2
意外なところでは画像の描画や
テキストのサイズ設定

00:30:18.819 --> 00:30:23.924 align:start position:7% line:-2
UIGraphicsImageRendererと
その分散型文字列は安全に―

00:30:24.024 --> 00:30:25.893 align:start position:27% line:-2
バックグラウンドスレッドで
使えます

00:30:25.993 --> 00:30:31.732 align:start position:25% line:-2
複雑な計算を一部
メインキューから移動できます

00:30:33.233 --> 00:30:37.571 align:start position:32% line:-2
すばらしいヒントだ
思いもよらなかったよ

00:30:38.038 --> 00:30:40.974 align:start position:16% line:-2
“言われたとおり
Time Profilerを実行し―”

00:30:41.074 --> 00:30:46.914 align:start position:23% line:-2
“先読みをやり メインキューの
作業を減らしたのに―”

00:30:47.548 --> 00:30:49.550 align:start position:34% line:-1
“まだ動作が遅い”

00:30:49.850 --> 00:30:52.152 align:start position:27% line:-1
“問題は他にあるのでは？”

00:30:52.853 --> 00:30:55.756 align:start position:32% line:-2
まだ問題が
解決していないのかも

00:30:56.223 --> 00:30:58.859 align:start position:32% line:-2
可能性としては
計算を最適化しても―

00:30:59.359 --> 00:31:02.696 align:start position:30% line:-2
グラフィックシステムに
まだ問題が

00:30:59.359 --> 00:31:02.696 align:start position:30% line:-2
グラフィックシステムに
まだ問題が

00:31:05.065 --> 00:31:07.568 align:start position:30% line:-2
幸い もう１つ
優れたツールがあります

00:31:08.969 --> 00:31:14.908 align:start position:4% line:-2
Core Animation Instrumentは
フレームレートを表示します

00:31:15.142 --> 00:31:18.912 align:start position:29% line:-2
同時にGPUの使用状況も
調べます

00:31:19.880 --> 00:31:21.849 align:start position:32% line:-1
実に有効なツールです

00:31:21.949 --> 00:31:23.851 align:start position:30% line:-2
使い方の詳細は
WWDC 2014の―

00:31:23.951 --> 00:31:29.056 align:start position:0% line:-2
Advanced Graphics and Animations
for iOS Appsを参照してください

00:31:30.791 --> 00:31:33.961 align:start position:30% line:-2
グラフィックが原因だと
特定できたら―

00:31:34.061 --> 00:31:37.297 align:start position:27% line:-2
簡単に調査できる
すばらしいヒントがあります

00:31:38.265 --> 00:31:43.136 align:start position:23% line:-2
通常 高グラフィック負荷の
アプリケーションは視覚効果か―

00:31:43.537 --> 00:31:46.473 align:start position:27% line:-2
マスキングとクリッピングの
使いすぎです

00:31:47.074 --> 00:31:50.944 align:start position:12% line:-2
blurやvibrancyなどの視覚効果は
高負荷なので―

00:31:51.044 --> 00:31:54.181 align:start position:30% line:-1
上品に使うべきなのです

00:31:54.715 --> 00:31:59.453 align:start position:29% line:-2
それと視覚効果を
重ねるべきではありません

00:31:59.553 --> 00:32:04.024 align:start position:23% line:-2
GPUのオーバードライブ状態で
アプリケーションが遅くなる

00:31:59.553 --> 00:32:04.024 align:start position:23% line:-2
GPUのオーバードライブ状態で
アプリケーションが遅くなる

00:32:04.892 --> 00:32:09.329 align:start position:27% line:-2
マスキングとクリッピングも
可能な限り 避けます

00:32:09.830 --> 00:32:13.901 align:start position:32% line:-2
代わりに 同じ外観が
実現できるなら―

00:32:14.001 --> 00:32:19.173 align:start position:27% line:-2
不透明なコンテンツの配置を
お勧めします

00:32:19.373 --> 00:32:24.645 align:start position:12% line:-2
UIViewやCALayerのマスクされた
ビューやプロパティは使わない

00:32:25.345 --> 00:32:28.949 align:start position:25% line:-2
以上がスムーズな
スクロールのための最適化です

00:32:29.249 --> 00:32:34.021 align:start position:0% line:-2
Time ProfilerとCore Animationを
必ず使ってください

00:32:34.922 --> 00:32:39.226 align:start position:23% line:-2
プリフェッチし メインキューの
作業をできるだけ減らし

00:32:40.427 --> 00:32:45.265 align:start position:30% line:-2
視覚効果とマスキングと
クリッピングを控える

00:32:45.833 --> 00:32:48.469 align:start position:29% line:-2
プロファイリングの詳細は
WWDC 2015の―

00:32:48.569 --> 00:32:51.839 align:start position:36% line:-2
すばらしい講演を
参照してください

00:32:52.005 --> 00:32:52.873 align:start position:43% line:-1
以上です

00:32:53.807 --> 00:32:56.510 align:start position:43% line:-1
(拍手)

00:32:56.610 --> 00:33:01.381 align:start position:18% line:-2
連係はAppleのプラットフォームの
最も魔法的な体験の１つ

00:32:56.610 --> 00:33:01.381 align:start position:18% line:-2
連係はAppleのプラットフォームの
最も魔法的な体験の１つ

00:33:02.182 --> 00:33:06.787 align:start position:23% line:-2
そしてHandoffは
顧客を楽しませる優れた方法です

00:33:07.588 --> 00:33:13.360 align:start position:27% line:-2
タスクを１つのデバイスから
別のデバイスへ―

00:33:13.460 --> 00:33:17.798 align:start position:27% line:-2
シームレスに遷移できるのは
すばらしい体験です

00:33:19.266 --> 00:33:22.970 align:start position:20% line:-2
HandoffはiOS macOS
watchOS間で機能します

00:33:23.570 --> 00:33:27.441 align:start position:25% line:-2
P2P接続なので
インターネット接続は不要です

00:33:28.575 --> 00:33:32.246 align:start position:27% line:-2
皆さんにとって何よりなのは
設定が実に簡単です

00:33:34.181 --> 00:33:37.017 align:start position:30% line:-2
Handoffの使用を
どう考えるべきか

00:33:37.985 --> 00:33:42.556 align:start position:23% line:-2
Appleのアプリケーションで
例を検討していきましょう

00:33:43.891 --> 00:33:47.294 align:start position:21% line:-2
例えば あのイケメン講演者からの
メッセージに―

00:33:47.528 --> 00:33:51.231 align:start position:20% line:-2
iPhone Xの面白いアニ文字で
返信したい

00:33:52.099 --> 00:33:57.571 align:start position:23% line:-2
iOSのAppスイッチャーから
すぐに この会話に戻れます

00:33:58.705 --> 00:34:02.242 align:start position:25% line:-2
あるいはMacのPagesで
ドキュメントの編集中に―

00:33:58.705 --> 00:34:02.242 align:start position:25% line:-2
あるいはMacのPagesで
ドキュメントの編集中に―

00:34:02.776 --> 00:34:08.549 align:start position:21% line:-2
iPadに引き継ぎたい時は
Dockのアイコンをタップします

00:34:10.016 --> 00:34:13.487 align:start position:29% line:-2
あるいはWatchで
何となく写真を見ていて―

00:34:14.154 --> 00:34:18.992 align:start position:23% line:-2
前回のWWDCの写真を見つけて
アルバムごと見たくなったら―

00:34:19.626 --> 00:34:24.764 align:start position:20% line:-2
その１枚を検索せず iPhoneの
フォトライブラリに戻れます

00:34:26.065 --> 00:34:27.900 align:start position:25% line:-1
Handoffは実に有効です

00:34:28.001 --> 00:34:32.505 align:start position:29% line:-2
顧客はデバイスを移る時
時間を大幅に節約できます

00:34:34.241 --> 00:34:36.743 align:start position:32% line:-2
導入がどれだけ簡単か
お見せします

00:34:36.944 --> 00:34:40.581 align:start position:12% line:-2
NSUserActivity APIの上に
構築されます

00:34:41.949 --> 00:34:47.487 align:start position:18% line:-2
NSUserActivityは現在の
状態やアクティビティを示します

00:34:47.654 --> 00:34:49.822 align:start position:34% line:-2
ここではEメールを
作成しています

00:34:52.793 --> 00:34:54.828 align:start position:32% line:-2
このアクティビティが
生成されると―

00:34:54.928 --> 00:34:58.799 align:start position:25% line:-2
同じiCloudアカウントで
サインインされている―

00:34:59.133 --> 00:35:01.769 align:start position:27% line:-2
近くの全デバイスに
Handoff可能の表示が

00:34:59.133 --> 00:35:01.769 align:start position:27% line:-2
近くの全デバイスに
Handoff可能の表示が

00:35:02.502 --> 00:35:04.972 align:start position:32% line:-2
MacではDockに
アイコンがあります

00:35:06.607 --> 00:35:09.309 align:start position:32% line:-2
“メール”アイコンを
クリックすると―

00:35:09.443 --> 00:35:12.212 align:start position:36% line:-2
アクティビティが
Macへ移動し

00:35:13.146 --> 00:35:16.517 align:start position:23% line:-2
メールが起動
中断したところから続けられます

00:35:18.619 --> 00:35:21.521 align:start position:32% line:-2
設定に必要なコードを
見てみましょう

00:35:24.558 --> 00:35:29.730 align:start position:20% line:-2
元のデバイスでは任意のタイプの
NSUserActivityを生成

00:35:30.430 --> 00:35:34.568 align:start position:23% line:-2
このタイプはユーザの
現在のアクティビティを示します

00:35:36.036 --> 00:35:39.873 align:start position:0% line:-2
次にタイトルを設定し
isEligibleForHandoffをtrueに設定

00:35:40.841 --> 00:35:43.911 align:start position:27% line:-2
次にuserInfo辞書に
値を設定します

00:35:44.478 --> 00:35:49.917 align:start position:25% line:-2
アクティビティの継続に必要な
すべての情報を入れます

00:35:50.617 --> 00:35:56.256 align:start position:21% line:-2
ここではビデオの例なので
ビデオのIDと現在の再生時間です

00:35:58.125 --> 00:36:03.130 align:start position:14% line:-2
最後に View Controllerの
userActivityプロパティに設定

00:35:58.125 --> 00:36:03.130 align:start position:14% line:-2
最後に View Controllerの
userActivityプロパティに設定

00:36:03.897 --> 00:36:08.335 align:start position:11% line:-2
View Controllerの表示のたびに
現在のアクティビティになります

00:36:09.403 --> 00:36:11.772 align:start position:32% line:-2
元のデバイスの設定は
以上です

00:36:12.840 --> 00:36:14.441 align:start position:30% line:-1
引き継ぐデバイスでは―

00:36:14.541 --> 00:36:19.613 align:start position:25% line:-2
まず生成したアクティビティの
タイプのサポートを宣言し

00:36:20.047 --> 00:36:24.051 align:start position:5% line:-2
２つのUIApplicationDelegateの
コールバックを実装

00:36:24.585 --> 00:36:27.888 align:start position:0% line:-2
１つ目はapplication: will
ContinueUserActivityWithType:

00:36:27.988 --> 00:36:30.858 align:start position:30% line:-2
アイコンをクリックか
タップすると すぐに―

00:36:30.958 --> 00:36:33.427 align:start position:32% line:-2
これが呼び出され
引き継ぎが始まります

00:36:34.328 --> 00:36:37.898 align:start position:12% line:-2
NSUserActivityオブジェクトを
まだ用意してませんが

00:36:38.265 --> 00:36:41.168 align:start position:29% line:-2
継続するアクティビティの
種類は分かるので―

00:36:41.268 --> 00:36:43.570 align:start position:29% line:-1
UIの準備を始められます

00:36:44.771 --> 00:36:45.873 align:start position:36% line:-1
直後に受け取る―

00:36:45.973 --> 00:36:49.343 align:start position:0% line:-2
applicationContinueRestoration
ハンドラが―

00:36:49.743 --> 00:36:53.547 align:start position:9% line:-2
完全に復元された
NSUserActivityオブジェクトを収容

00:36:54.648 --> 00:36:59.853 align:start position:21% line:-2
その時点から 引き継ぐデバイスで
体験の継続ができます

00:37:00.854 --> 00:37:04.792 align:start position:18% line:-2
userInfo辞書に収まりきらない
情報があるなら―

00:37:04.892 --> 00:37:07.895 align:start position:23% line:-2
NSUserActivityの
優れた機能が使えます

00:37:07.995 --> 00:37:10.230 align:start position:34% line:-1
継続ストリームです

00:37:10.631 --> 00:37:15.669 align:start position:2% line:-2
supportsContinuationStreams
プロパティをtrueに設定するだけ

00:37:16.236 --> 00:37:18.972 align:start position:21% line:-2
次に 引き継ぐデバイスで
NSUserActivityの―

00:37:19.073 --> 00:37:24.211 align:start position:11% line:-2
getContinuationStreams
メソッドを呼び出します

00:37:24.411 --> 00:37:27.648 align:start position:30% line:-2
これが入力ストリームと
出力ストリームを提供

00:37:28.448 --> 00:37:32.452 align:start position:11% line:-2
元のデバイスでも
NSUserActivityのデリゲートが―

00:37:32.552 --> 00:37:37.191 align:start position:25% line:-2
これらのストリームを提供する
コールバックを受信します

00:37:37.791 --> 00:37:41.428 align:start position:32% line:-2
元のデバイスと
引き継ぐデバイスは―

00:37:41.528 --> 00:37:44.832 align:start position:32% line:-2
これらのチャンネルで
双方向通信ができます

00:37:45.232 --> 00:37:48.102 align:start position:29% line:-2
しかし これを
できるだけ早く完了したい

00:37:48.202 --> 00:37:51.238 align:start position:30% line:-2
ユーザがデバイス同士を
離すかもしれないので

00:37:52.372 --> 00:37:53.807 align:start position:32% line:-1
ストリームの詳細は―

00:37:53.907 --> 00:37:57.611 align:start position:5% line:-2
デベロッパWebサイトの
Stream Programming Guideを

00:37:58.845 --> 00:38:03.050 align:start position:18% line:-2
userInfo辞書に適さないものを
移すのに最適です

00:37:58.845 --> 00:38:03.050 align:start position:18% line:-2
userInfo辞書に適さないものを
移すのに最適です

00:38:03.150 --> 00:38:07.621 align:start position:21% line:-2
例えば画像や 先のEメールの例の
ビデオコンテンツです

00:38:08.188 --> 00:38:12.526 align:start position:21% line:-2
ドキュメントベースの
アプリケーションなら もっと簡単

00:38:13.026 --> 00:38:15.429 align:start position:32% line:-2
動作の多くを
何もせずに得られます

00:38:16.096 --> 00:38:20.567 align:start position:4% line:-2
NSUserActivityオブジェクトを
UIDocumentとNSDocumentが自動生成

00:38:20.667 --> 00:38:23.904 align:start position:25% line:-2
現在 編集中のドキュメントが
示されます

00:38:25.339 --> 00:38:28.509 align:start position:27% line:-2
これはiCloud内の
すべてのドキュメントに有効

00:38:29.943 --> 00:38:34.114 align:start position:14% line:-2
アプリケーションでは
Info.plistを適切に設定するだけ

00:38:36.183 --> 00:38:38.252 align:start position:30% line:-2
アプリケーション同士に
加え―

00:38:38.819 --> 00:38:42.022 align:start position:20% line:-2
ウェブブラウザへのHandoffも
サポートします

00:38:42.990 --> 00:38:47.961 align:start position:25% line:-2
ネイティブアプリケーションの
体験を引き継ぐデバイスに―

00:38:48.896 --> 00:38:52.065 align:start position:25% line:-2
ネイティブアプリケーションが
ない場合は―

00:38:52.633 --> 00:38:57.204 align:start position:25% line:-2
Safariに引き継いで
ウェブブラウザで継続できます

00:38:58.739 --> 00:39:02.810 align:start position:18% line:-2
ウェブブラウザからのHandoffも
サポートします

00:38:58.739 --> 00:39:02.810 align:start position:18% line:-2
ウェブブラウザからのHandoffも
サポートします

00:39:03.444 --> 00:39:07.481 align:start position:23% line:-2
承認済みアプリケーションIDの
リストをサーバ側で作成

00:39:07.581 --> 00:39:12.352 align:start position:14% line:-2
次にassociated-domains
エンタイトルメントを追加します

00:39:12.519 --> 00:39:16.457 align:start position:27% line:-2
これでユーザはウェブ体験を
アプリケーションへ―

00:39:16.557 --> 00:39:18.392 align:start position:29% line:-1
シームレスに引き継げます

00:39:18.759 --> 00:39:20.127 align:start position:25% line:-1
さらなる詳細は2014年の―

00:39:20.227 --> 00:39:23.931 align:start position:30% line:-2
Handoffの講演を
参照してください

00:39:25.732 --> 00:39:29.703 align:start position:29% line:-2
Handoffは以上です
ぜひ実装してください

00:39:29.803 --> 00:39:33.240 align:start position:32% line:-2
ユーザが楽しめますし
さらに付け加えると―

00:39:33.340 --> 00:39:37.044 align:start position:16% line:-2
NSUserActivity APIは
システム体験全体で使われます

00:39:37.144 --> 00:39:40.748 align:start position:18% line:-2
例えばSpotlight検索や
新機能のSiri Shortcuts

00:39:41.782 --> 00:39:45.886 align:start position:25% line:-2
詳細は以前のWWDCの講演を
参照してください

00:39:46.153 --> 00:39:46.920 align:start position:43% line:-1
以上です

00:39:47.321 --> 00:39:53.193 align:start position:43% line:-1
(拍手)

00:39:56.730 --> 00:40:00.033 align:start position:25% line:-2
すばらしいアプリケーションを
書いても―

00:39:56.730 --> 00:40:00.033 align:start position:25% line:-2
すばらしいアプリケーションを
書いても―

00:40:00.801 --> 00:40:04.972 align:start position:30% line:-2
調べねばならない問題が
時には生じます

00:40:05.372 --> 00:40:10.377 align:start position:21% line:-2
そこで 「マトリックス」レベルの
デバッグ技をお教えします

00:40:10.477 --> 00:40:13.180 align:start position:34% line:-2
しかし 先にひと言
忠告します

00:40:14.381 --> 00:40:18.986 align:start position:21% line:-2
“赤いピル”を飲ませ
“ウサギの穴の深さ”を教える前に

00:40:19.219 --> 00:40:22.956 align:start position:27% line:-2
このセクションでお見せする
手法は―

00:40:23.056 --> 00:40:27.394 align:start position:14% line:-2
デバッグに最適ですが
App Storeに提出してはいけません

00:40:27.861 --> 00:40:31.899 align:start position:27% line:-2
アプリケーションは却下され
嫌な思いをするでしょう

00:40:32.299 --> 00:40:34.735 align:start position:27% line:-1
この忠告を前提に 始めます

00:40:35.936 --> 00:40:38.705 align:start position:30% line:-1
まずは探偵の心構えから

00:40:38.805 --> 00:40:42.176 align:start position:32% line:-2
プログラムの問題には
そうやって対処します

00:40:42.876 --> 00:40:47.748 align:start position:11% line:-2
次はビューやView Controllerの
デバックのやり方

00:40:48.282 --> 00:40:53.587 align:start position:20% line:-2
そしてアプリケーションの
状態の問題をLLDBで特定する方法

00:40:54.188 --> 00:40:59.693 align:start position:21% line:-2
最後に 出くわすと気分が悪くなる
メモリの大問題に関する―

00:40:59.793 --> 00:41:01.895 align:start position:29% line:-1
テクニックを見ていきます

00:40:59.793 --> 00:41:01.895 align:start position:29% line:-1
テクニックを見ていきます

00:41:02.396 --> 00:41:05.232 align:start position:30% line:-1
まずは探偵の心構えです

00:41:05.833 --> 00:41:11.471 align:start position:23% line:-2
プログラムの問題では
自分の仮説を必ず検証しましょう

00:41:11.672 --> 00:41:16.543 align:start position:25% line:-2
プログラムが何をしているか
予想したら 確かめてください

00:41:16.977 --> 00:41:20.781 align:start position:25% line:-2
デバッグする時
これが大きな一歩になりえます

00:41:21.849 --> 00:41:25.586 align:start position:30% line:-2
どの仮説が反していたか
確認できたら―

00:41:25.919 --> 00:41:29.423 align:start position:29% line:-2
手掛かりを
探し始めることができます

00:41:29.957 --> 00:41:32.793 align:start position:34% line:-2
これからお見せする
ツールで―

00:41:32.893 --> 00:41:35.929 align:start position:30% line:-2
オブジェクトや構造体を
探ってください

00:41:36.563 --> 00:41:41.735 align:start position:25% line:-2
次にアプリケーションの状態を
変えることで勘を試し

00:41:41.835 --> 00:41:43.937 align:start position:27% line:-1
問題を見つけたか確かめます

00:41:44.605 --> 00:41:47.875 align:start position:29% line:-2
始めましょう
サンプルのバグは本物です

00:41:49.042 --> 00:41:53.947 align:start position:20% line:-2
Appleで働くことの特権の１つが
スクリーンショットエディタ

00:41:54.715 --> 00:41:59.787 align:start position:25% line:-2
先日 ペンツールが
消えてしまったのでデバッグを

00:41:59.887 --> 00:42:01.255 align:start position:39% line:-1
これはひどい

00:41:59.887 --> 00:42:01.255 align:start position:39% line:-1
これはひどい

00:42:03.023 --> 00:42:06.460 align:start position:32% line:-2
この問題の原因究明に
役立つツールはある？

00:42:07.061 --> 00:42:08.128 align:start position:43% line:-1
もちろん

00:42:08.529 --> 00:42:11.598 align:start position:27% line:-2
Xcodeに内蔵されている
ビューデバッガ

00:42:12.299 --> 00:42:15.736 align:start position:30% line:-2
下のツールバーの
このアイコンをクリック

00:42:16.403 --> 00:42:21.275 align:start position:23% line:-2
するとXcodeがビュー階層を
3Dで表示します

00:42:22.643 --> 00:42:26.146 align:start position:27% line:-2
鉛筆ツールは 見てのとおり
まだあるものの―

00:42:26.246 --> 00:42:29.683 align:start position:36% line:-2
全画面ビューに
前を塞がれている

00:42:30.551 --> 00:42:35.088 align:start position:23% line:-2
このUIの構築場所で順序付けに
何が起きているか 調べるべきだ

00:42:35.889 --> 00:42:36.690 align:start position:41% line:-1
すばらしい

00:42:36.790 --> 00:42:41.829 align:start position:27% line:-2
ビューデバッガはビューの
デバッグに最高のツールです

00:42:42.763 --> 00:42:46.100 align:start position:25% line:-2
これに関して
役立つツールは他にもあります

00:42:47.968 --> 00:42:50.304 align:start position:14% line:-2
UIViewの
recursiveDescription

00:42:50.504 --> 00:42:52.806 align:start position:7% line:-1
UIViewのparentDescription

00:42:52.940 --> 00:42:56.477 align:start position:14% line:-2
UIViewControllerクラスの
printHierarchyメソッド

00:42:56.643 --> 00:43:00.848 align:start position:14% line:-2
ビューやView Controllerの
問題のデバックに最適です

00:42:56.643 --> 00:43:00.848 align:start position:14% line:-2
ビューやView Controllerの
問題のデバックに最適です

00:43:01.815 --> 00:43:06.286 align:start position:14% line:-2
ただし これらも
App Storeに提出しないでください

00:43:07.287 --> 00:43:10.858 align:start position:18% line:-2
そして これらは
Objective-Cのセレクタです

00:43:10.991 --> 00:43:13.760 align:start position:27% line:-2
ですから これらを使う前に
デバッガを―

00:43:13.861 --> 00:43:17.464 align:start position:18% line:-2
このコマンドで
Objective-Cモードにします

00:43:18.265 --> 00:43:20.868 align:start position:27% line:-2
これらのデバッグメソッドを
１つ１つ―

00:43:20.968 --> 00:43:23.771 align:start position:27% line:-1
どう役立つのかお教えします

00:43:23.871 --> 00:43:26.773 align:start position:14% line:-2
まずはUIViewの
recursiveDescription

00:43:28.775 --> 00:43:31.812 align:start position:11% line:-2
UIViewの
recursiveDescriptionは―

00:43:31.912 --> 00:43:35.849 align:start position:27% line:-2
レシーバのサブビュー階層を
出力します

00:43:35.949 --> 00:43:40.621 align:start position:25% line:-2
レイアウト属性の理解に役立つ
関連プロパティがあります

00:43:41.622 --> 00:43:43.190 align:start position:34% line:-1
例を見てみましょう

00:43:43.524 --> 00:43:46.627 align:start position:27% line:-2
スクリーンショットのUIの
ビューが消えているバグ

00:43:47.494 --> 00:43:51.765 align:start position:5% line:-2
View Controllerのビューの
recursiveDescriptionを呼び出す

00:43:53.700 --> 00:43:57.504 align:start position:21% line:-2
デバッグテキストの壁に見えますね
そのとおりです

00:43:58.939 --> 00:44:03.377 align:start position:25% line:-2
スクリーンショットのビューが
ここにあると分かっています

00:43:58.939 --> 00:44:03.377 align:start position:25% line:-2
スクリーンショットのビューが
ここにあると分かっています

00:44:03.477 --> 00:44:06.847 align:start position:27% line:-2
調べると現在は
隠されていると分かるので―

00:44:08.248 --> 00:44:13.854 align:start position:20% line:-2
hiddenプロパティの設定場所を
すべて調べ 原因を把握します

00:44:16.090 --> 00:44:20.294 align:start position:11% line:-2
さらにUIViewには
parentDescriptionもあります

00:44:20.394 --> 00:44:24.398 align:start position:29% line:-2
これはビュー階層を
親ビューまで上っていき―

00:44:24.798 --> 00:44:29.737 align:start position:21% line:-2
同じ種類のデバッグ情報を出力する
nil parentに達します

00:44:32.039 --> 00:44:36.577 align:start position:21% line:-2
以上のどちらも
UIViewのデバッグに最適です

00:44:36.810 --> 00:44:40.214 align:start position:11% line:-2
しかし問題が
UIViewControllerにあることも

00:44:40.347 --> 00:44:44.451 align:start position:18% line:-2
そこで使えるのが
UIViewControllerの―

00:44:44.551 --> 00:44:45.919 align:start position:21% line:-1
printHierarchyです

00:44:46.887 --> 00:44:49.656 align:start position:21% line:-2
先日の
スクリーンショットエディタのバグ

00:44:49.757 --> 00:44:53.994 align:start position:11% line:-2
viewDidAppearのメッセージを
View Controllerが受信してない

00:44:54.094 --> 00:44:56.430 align:start position:34% line:-2
状態の設定が
不適切だったのです

00:44:57.197 --> 00:45:00.167 align:start position:23% line:-2
printHierarchyを
実行すると―

00:44:57.197 --> 00:45:00.167 align:start position:23% line:-2
printHierarchyを
実行すると―

00:45:00.500 --> 00:45:05.906 align:start position:11% line:-2
表示中のView Controllerと
表示されたView Controllerと―

00:45:06.473 --> 00:45:09.643 align:start position:11% line:-2
parentViewControllerと
childViewControllersと―

00:45:09.743 --> 00:45:12.112 align:start position:9% line:-2
presentationControllerの
出力が取得可能

00:45:12.212 --> 00:45:13.881 align:start position:21% line:-1
まさに controller祭り

00:45:14.281 --> 00:45:17.751 align:start position:20% line:-2
ではスクリーンショットUIの
printHierarchyを実行

00:45:19.319 --> 00:45:22.389 align:start position:14% line:-2
これは
View Controllerの階層です

00:45:22.523 --> 00:45:25.726 align:start position:12% line:-2
問題のある
View Controllerを調べると―

00:45:25.826 --> 00:45:30.964 align:start position:27% line:-2
出現状態で固まり
コールバックに失敗していた

00:45:31.064 --> 00:45:35.068 align:start position:27% line:-2
そこで このコールバックの
呼び出しをする所を調べ―

00:45:35.168 --> 00:45:36.703 align:start position:36% line:-1
問題を見つけます

00:45:37.337 --> 00:45:42.676 align:start position:14% line:-2
ビューやView Controllerの
問題をこれで特定できます

00:45:43.143 --> 00:45:46.413 align:start position:25% line:-2
しかし時には
もっと根本的な問題があります

00:45:46.980 --> 00:45:51.218 align:start position:23% line:-2
これには状態のデバッグに関する
すばらしいヒントを

00:45:51.852 --> 00:45:57.558 align:start position:14% line:-2
LLDBのexpressionコマンドで
任意のコードを実行できます

00:45:57.925 --> 00:46:01.495 align:start position:27% line:-2
ソースエディタ
デバッガに直接 書き込み―

00:45:57.925 --> 00:46:01.495 align:start position:27% line:-2
ソースエディタ
デバッガに直接 書き込み―

00:46:01.595 --> 00:46:05.966 align:start position:29% line:-2
プログラム実行中に
実行できるコードなのです

00:46:06.366 --> 00:46:08.702 align:start position:27% line:-1
デバッグにとても役立ちます

00:46:09.069 --> 00:46:11.205 align:start position:38% line:-2
構造体の関数を
呼び出せるし―

00:46:11.305 --> 00:46:13.240 align:start position:27% line:-2
オブジェクトのプロパティを
取得でき―

00:46:13.340 --> 00:46:16.376 align:start position:27% line:-2
プログラムが何をしているか
的確な診断ができる

00:46:17.077 --> 00:46:20.380 align:start position:29% line:-2
より詳しくは過去の講演を
参照してください

00:46:20.480 --> 00:46:23.550 align:start position:25% line:-2
2012年の
LLDBを使ったデバッグと―

00:46:23.750 --> 00:46:27.021 align:start position:27% line:-2
2014年の
Swiftでのデバッグです

00:46:27.721 --> 00:46:31.491 align:start position:23% line:-2
expressionコマンドで
実行できる―

00:46:31.592 --> 00:46:34.294 align:start position:27% line:-2
LLDBのすばらしい機能を
お教えします

00:46:34.395 --> 00:46:36.330 align:start position:38% line:-1
１つ目はダンプ

00:46:41.268 --> 00:46:44.805 align:start position:27% line:-2
Swiftのオブジェクトや
構造体 プロパティを―

00:46:44.905 --> 00:46:47.207 align:start position:36% line:-1
すべて出力します

00:46:48.075 --> 00:46:52.579 align:start position:27% line:-2
カスタムUIの
別のバグを調べてみましょう

00:46:53.480 --> 00:46:56.183 align:start position:30% line:-2
複数のサブビューを含む
ビューですが

00:46:56.283 --> 00:46:58.819 align:start position:21% line:-2
複数のラベルと
１つのimageViewがあり―

00:46:58.919 --> 00:47:01.321 align:start position:34% line:-2
そのラベルの１つが
消えています

00:46:58.919 --> 00:47:01.321 align:start position:34% line:-2
そのラベルの１つが
消えています

00:47:02.089 --> 00:47:06.693 align:start position:27% line:-2
親ビューでダンプを実行し
何が起きているか見てみます

00:47:07.728 --> 00:47:10.197 align:start position:38% line:-2
消えたラベルが
見つかりました

00:47:10.631 --> 00:47:15.202 align:start position:21% line:-2
しかし その並びの
imageViewを見てみると―

00:47:15.569 --> 00:47:21.175 align:start position:27% line:-2
この２つのフレームの起点が
同じだと分かります

00:47:21.942 --> 00:47:26.513 align:start position:25% line:-2
imageViewがラベルを
塞いでいるのでしょう

00:47:27.214 --> 00:47:29.483 align:start position:34% line:-2
レイアウトコードを
再度 調べるべきだ

00:47:31.418 --> 00:47:34.922 align:start position:25% line:-2
Swiftのオブジェクト用の
ダンプに加えて―

00:47:35.022 --> 00:47:38.125 align:start position:21% line:-2
Objective-Cのコードが
まだあるなら―

00:47:38.458 --> 00:47:41.862 align:start position:14% line:-2
ivarDescriptionメソッドも
NSObjectにはあります

00:47:42.696 --> 00:47:47.134 align:start position:16% line:-2
Objective-Cのオブジェクトの
インスタント変数を出力します

00:47:48.402 --> 00:47:51.138 align:start position:32% line:-2
スクリーンショットの
コードにもバグが

00:47:51.238 --> 00:47:53.841 align:start position:32% line:-2
クロップハンドルが
なぜか機能していない

00:47:55.309 --> 00:48:00.514 align:start position:11% line:-2
スクリーンショットのビューで
ivarDescriptionを呼び出すと―

00:47:55.309 --> 00:48:00.514 align:start position:11% line:-2
スクリーンショットのビューで
ivarDescriptionを呼び出すと―

00:48:00.614 --> 00:48:06.453 align:start position:14% line:-2
cropEnabledのivarの設定が
NOになっていると分かります

00:48:07.554 --> 00:48:10.724 align:start position:30% line:-2
ここからバグを調べると
いいでしょう

00:48:11.692 --> 00:48:12.926 align:start position:41% line:-1
すばらしい

00:48:13.126 --> 00:48:18.966 align:start position:14% line:-2
ダンプとivarDescriptionは
問題を診断するのに最適です

00:48:20.067 --> 00:48:24.972 align:start position:25% line:-2
もう１つのすばらしいヒントは
ブレークポイント

00:48:25.572 --> 00:48:29.910 align:start position:25% line:-2
これを使うと任意の実行状態で
プログラムを停止し―

00:48:30.110 --> 00:48:31.578 align:start position:30% line:-1
コマンドを実行できます

00:48:32.379 --> 00:48:36.850 align:start position:27% line:-2
LLDBのコマンドラインか
XcodeのUIで―

00:48:36.950 --> 00:48:40.487 align:start position:29% line:-2
ブレークポイント実行前に
条件の追加もできます

00:48:40.621 --> 00:48:43.791 align:start position:25% line:-2
ブレークポイントに達するたび
実行するコマンドも

00:48:44.525 --> 00:48:47.861 align:start position:25% line:-2
ブレークポイントは
デバッグの作業の流れの根幹で

00:48:47.961 --> 00:48:52.433 align:start position:12% line:-2
expressionコマンド
ダンプ ivarDescriptionは―

00:48:52.533 --> 00:48:54.735 align:start position:34% line:-2
ブレークポイントと
併用できます

00:48:54.902 --> 00:49:00.073 align:start position:25% line:-2
次のデバッグでは
ぜひブレークポイントの使用を

00:48:54.902 --> 00:49:00.073 align:start position:25% line:-2
次のデバッグでは
ぜひブレークポイントの使用を

00:49:01.441 --> 00:49:04.912 align:start position:20% line:-2
しかし時にはビューや
View Controllerや―

00:49:05.245 --> 00:49:07.448 align:start position:32% line:-1
状態の問題ではなく―

00:49:07.948 --> 00:49:11.285 align:start position:34% line:-2
メモリ管理の
問題だったりします

00:49:12.219 --> 00:49:14.521 align:start position:27% line:-1
これに使えるツールはある？

00:49:15.322 --> 00:49:17.357 align:start position:34% line:-2
よくぞ聞いてくれた
あるとも

00:49:17.458 --> 00:49:22.062 align:start position:21% line:-2
Xcode内蔵のすばらしいツール
メモリデバッガです

00:49:23.464 --> 00:49:28.102 align:start position:25% line:-2
アプリケーションの
メモリの使い方を可視化します

00:49:29.469 --> 00:49:33.240 align:start position:9% line:-2
リークしているView Controllerを
先日 デバッグしました

00:49:33.740 --> 00:49:36.810 align:start position:29% line:-2
ブロックが保持していたと
ここで分かりました

00:49:37.678 --> 00:49:39.646 align:start position:12% line:-2
Malloc stack loggingを
有効にして―

00:49:39.747 --> 00:49:44.318 align:start position:23% line:-2
ブロックがいつ割り当てられたか
バックトレースを確認できた

00:49:45.886 --> 00:49:50.591 align:start position:11% line:-2
このView Controllerが生成した
ブロックでした

00:49:51.225 --> 00:49:56.296 align:start position:11% line:-2
つまり このView Controllerも
このブロックを保持しています

00:49:57.064 --> 00:49:58.599 align:start position:39% line:-1
循環参照です

00:49:59.533 --> 00:50:00.467 align:start position:41% line:-1
すばらしい

00:49:59.533 --> 00:50:00.467 align:start position:41% line:-1
すばらしい

00:50:00.567 --> 00:50:06.540 align:start position:20% line:-2
Xcodeのメモリグラフデバッガは
こういう問題の診断に最適です

00:50:07.007 --> 00:50:10.310 align:start position:7% line:-2
より詳しくは2017年の
Debugging with Xcode 9を―

00:50:10.410 --> 00:50:11.879 align:start position:36% line:-1
参照してください

00:50:13.113 --> 00:50:16.550 align:start position:30% line:-2
以上がプロ並みに
デバッグできる方法です

00:50:18.685 --> 00:50:23.991 align:start position:25% line:-2
プログラムの問題に遭遇したら
必ず探偵の心構えを持ち―

00:50:25.025 --> 00:50:29.229 align:start position:25% line:-2
Xcodeのビューデバッガと
メモリグラフデバッガで―

00:50:29.329 --> 00:50:32.566 align:start position:27% line:-2
ビューやメモリ関連の問題を
掘り下げること

00:50:33.000 --> 00:50:38.372 align:start position:14% line:-2
LLDBのexpressionコマンドと
ダンプの併用など―

00:50:38.472 --> 00:50:41.742 align:start position:30% line:-2
ご説明したデバッグ技を
使ってください

00:50:44.478 --> 00:50:45.379 align:start position:43% line:-1
以上です

00:50:45.913 --> 00:50:52.019 align:start position:43% line:-1
(拍手)

00:50:52.119 --> 00:50:57.157 align:start position:27% line:-2
今回は６つの面白いテーマを
取り上げましたが

00:50:58.625 --> 00:51:00.728 align:start position:25% line:-1
ほんの少し かじっただけです

00:50:58.625 --> 00:51:00.728 align:start position:25% line:-1
ほんの少し かじっただけです

00:51:00.828 --> 00:51:04.798 align:start position:30% line:-2
随所でご紹介した講演を
ぜひ参照して―

00:51:04.898 --> 00:51:07.834 align:start position:30% line:-2
アプリケーションを
より楽しくしてください

00:51:08.402 --> 00:51:12.239 align:start position:21% line:-2
詳しくはデベロッパWebサイトを
参照してください

00:51:12.339 --> 00:51:14.741 align:start position:30% line:-1
ありがとうございました

00:51:14.842 --> 00:51:15.676 align:start position:41% line:-1
感謝します
