WEBVTT

00:00:07.074 --> 00:00:16.550 align:start position:43% line:-1
(音楽)

00:00:19.019 --> 00:00:24.825 align:start position:43% line:-1
(拍手)

00:00:24.925 --> 00:00:28.795 align:start position:32% line:-2
画像処理の最良事例を
ご紹介します

00:00:28.896 --> 00:00:31.064 align:start position:38% line:-1
私はカイルです

00:00:31.565 --> 00:00:33.734 align:start position:34% line:-1
画像コンテンツの―

00:00:33.834 --> 00:00:38.472 align:start position:29% line:-2
効率的な処理技術について
お話ししましょう

00:00:39.740 --> 00:00:45.078 align:start position:29% line:-2
UIImageと
UIImageViewは

00:00:45.479 --> 00:00:50.250 align:start position:30% line:-2
画像に使用する
UIKitのツールです

00:00:51.051 --> 00:00:57.291 align:start position:25% line:-2
アプリケーションにおける
UIKitの描画法をご紹介し

00:00:58.025 --> 00:01:03.764 align:start position:30% line:-2
最後はCPUとGPUを
統合する技術についても

00:00:58.025 --> 00:01:03.764 align:start position:30% line:-2
最後はCPUとGPUを
統合する技術についても

00:01:04.063 --> 00:01:05.465 align:start position:39% line:-1
軽く触れます

00:01:06.667 --> 00:01:09.203 align:start position:30% line:-1
今回 特に注目するのは

00:01:09.303 --> 00:01:13.340 align:start position:34% line:-2
デバイスで不足する
２つのリソース

00:01:13.440 --> 00:01:15.709 align:start position:34% line:-1
メモリとCPUです

00:01:16.210 --> 00:01:19.513 align:start position:30% line:-2
この２つは
分けて考えがちですよね

00:01:19.613 --> 00:01:25.752 align:start position:21% line:-2
デバッグナビゲータも
Instrumentsも違います

00:01:25.886 --> 00:01:28.288 align:start position:32% line:-1
しかし関連があります

00:01:29.323 --> 00:01:34.428 align:start position:34% line:-2
アプリケーションが
CPUを多く使えば

00:01:34.928 --> 00:01:39.867 align:start position:30% line:-2
バッテリーの寿命が縮み
処理が遅くなります

00:01:40.634 --> 00:01:42.970 align:start position:29% line:-1
しかし お気づきですか？

00:01:43.070 --> 00:01:48.175 align:start position:29% line:-2
各種のアプリケーションが
メモリを消費すると

00:01:48.275 --> 00:01:51.478 align:start position:29% line:-1
CPUの使用量も増えます

00:01:51.612 --> 00:01:55.949 align:start position:32% line:-2
バッテリーや
処理速度に悪影響です

00:01:56.283 --> 00:01:59.586 align:start position:34% line:-2
リソースを
うまく使いましょう

00:02:01.688 --> 00:02:05.225 align:start position:36% line:-2
写真の処理を例に
ご説明します

00:02:05.592 --> 00:02:09.496 align:start position:29% line:-1
写真Appがいいでしょう

00:02:10.130 --> 00:02:12.099 align:start position:34% line:-1
この写真を使います

00:02:12.332 --> 00:02:18.539 align:start position:25% line:-2
画像データを扱う
上位クラスのUIImageで

00:02:18.639 --> 00:02:22.609 align:start position:34% line:-2
リッチコンテンツを
表示します

00:02:23.577 --> 00:02:27.347 align:start position:36% line:-2
画像コンテンツは
２種類あります

00:02:27.548 --> 00:02:30.851 align:start position:32% line:-1
つまり写真と図形です

00:02:31.318 --> 00:02:35.889 align:start position:30% line:-2
UIImageは
ボタンのアイコンなどの

00:02:36.056 --> 00:02:38.225 align:start position:36% line:-1
表示にも使います

00:02:39.893 --> 00:02:42.062 align:start position:29% line:-1
UIImageViewは

00:02:42.296 --> 00:02:47.301 align:start position:23% line:-2
UIImageを表示するための
クラスです

00:02:50.337 --> 00:02:55.475 align:start position:27% line:-2
MVCではUIImageは
モデルオブジェクト

00:02:55.576 --> 00:02:58.946 align:start position:20% line:-1
UIImageViewはビューです

00:02:59.513 --> 00:03:04.651 align:start position:30% line:-2
モデルとビューには
それぞれ役割があります

00:02:59.513 --> 00:03:04.651 align:start position:30% line:-2
モデルとビューには
それぞれ役割があります

00:03:04.885 --> 00:03:08.222 align:start position:21% line:-1
UIImageはデータをロードし

00:03:08.322 --> 00:03:11.959 align:start position:29% line:-2
UIImageViewは
それを表示します

00:03:13.493 --> 00:03:18.432 align:start position:30% line:-2
一方通行の単純な
関係のように思えますが

00:03:19.166 --> 00:03:22.102 align:start position:29% line:-1
実際は もう少し複雑です

00:03:23.103 --> 00:03:27.774 align:start position:32% line:-2
繰り返し行われる
レンダリングに加えて

00:03:28.242 --> 00:03:34.581 align:start position:29% line:-2
アプリケーションの速度に
関わるフェーズがあります

00:03:35.115 --> 00:03:36.650 align:start position:39% line:-1
デコードです

00:03:37.818 --> 00:03:42.122 align:start position:29% line:-2
しかし まず先に
バッファの話をしましょう

00:03:43.590 --> 00:03:48.128 align:start position:34% line:-2
バッファはメモリに
隣接する領域ですが

00:03:48.228 --> 00:03:52.266 align:start position:29% line:-2
通常はサイズも内部構造も
画一的な―

00:03:52.499 --> 00:03:56.770 align:start position:34% line:-2
要素の配列から成る
メモリを指します

00:03:57.838 --> 00:04:02.276 align:start position:32% line:-2
今回 重要となる
イメージバッファとは

00:03:57.838 --> 00:04:02.276 align:start position:32% line:-2
今回 重要となる
イメージバッファとは

00:04:02.376 --> 00:04:07.881 align:start position:27% line:-2
インメモリで画像を
表示するバッファのことです

00:04:08.782 --> 00:04:10.450 align:start position:41% line:-1
各要素には

00:04:10.551 --> 00:04:16.322 align:start position:29% line:-2
画像のピクセルごとの色と
透明度が記述されています

00:04:17.057 --> 00:04:21.728 align:start position:30% line:-2
よってバッファサイズは
含まれる画像の―

00:04:21.928 --> 00:04:24.198 align:start position:34% line:-1
サイズに比例します

00:04:25.332 --> 00:04:30.537 align:start position:34% line:-2
特に重要となるのが
フレームバッファ

00:04:31.305 --> 00:04:36.009 align:start position:29% line:-2
レンダリングの出力内容を
保持する領域です

00:04:36.877 --> 00:04:40.981 align:start position:30% line:-2
ビュー階層を更新すると
UIKitが

00:04:41.081 --> 00:04:46.153 align:start position:29% line:-2
ウィンドウとサブビューを
レンダリングします

00:04:47.154 --> 00:04:50.524 align:start position:30% line:-2
このフレームバッファの
色情報を―

00:04:50.624 --> 00:04:55.562 align:start position:30% line:-2
ディスプレイが読み
各ピクセルを彩色します

00:04:58.198 --> 00:05:00.968 align:start position:30% line:-1
彩色のフレームレートは

00:04:58.198 --> 00:05:00.968 align:start position:30% line:-1
彩色のフレームレートは

00:05:01.568 --> 00:05:05.506 align:start position:34% line:-2
60fps つまり
１秒間に60回です

00:05:05.806 --> 00:05:12.045 align:start position:21% line:-2
ProMotionディスプレイの
iPadなら120fps

00:05:13.814 --> 00:05:16.016 align:start position:34% line:-1
何も動きがなければ

00:05:16.116 --> 00:05:20.988 align:start position:29% line:-2
ディスプレイは
同じデータを受け取ります

00:05:21.822 --> 00:05:23.323 align:start position:38% line:-1
しかし例えば―

00:05:24.124 --> 00:05:29.963 align:start position:30% line:-2
新しいUIImageを
ビューに割り当てると

00:05:30.998 --> 00:05:35.369 align:start position:23% line:-2
UIKitがフレームバッファに
再レンダリング

00:05:35.802 --> 00:05:40.174 align:start position:29% line:-2
それをディスプレイが読み
表示します

00:05:41.842 --> 00:05:43.744 align:start position:34% line:-1
これと対照的なのが

00:05:43.844 --> 00:05:49.082 align:start position:29% line:-2
データバッファという
バイト配列を含む領域です

00:05:49.883 --> 00:05:54.488 align:start position:30% line:-2
ネットやディスクから
取り込んだ画像を含む―

00:05:54.621 --> 00:05:58.292 align:start position:30% line:-2
データバッファについて
お話しします

00:05:59.660 --> 00:06:03.864 align:start position:30% line:-2
通常 画像サイズなどの
メタデータが

00:05:59.660 --> 00:06:03.864 align:start position:30% line:-2
通常 画像サイズなどの
メタデータが

00:06:03.964 --> 00:06:06.800 align:start position:30% line:-1
先頭に格納されています

00:06:07.901 --> 00:06:10.070 align:start position:34% line:-1
その次が画像データ

00:06:10.170 --> 00:06:14.741 align:start position:32% line:-2
エンコードされた
JPEGやPNGです

00:06:16.176 --> 00:06:19.446 align:start position:34% line:-2
つまりメタデータの
次のバイトには

00:06:19.613 --> 00:06:23.784 align:start position:32% line:-2
ピクセルの情報は直接
記述されていません

00:06:26.954 --> 00:06:30.390 align:start position:32% line:-2
このパイプラインを
詳しく見てみましょう

00:06:31.091 --> 00:06:35.662 align:start position:34% line:-2
フレームバッファの
レンダリング領域を

00:06:35.963 --> 00:06:38.432 align:start position:29% line:-1
ハイライトして示しました

00:06:38.832 --> 00:06:41.168 align:start position:29% line:-1
UIImageをビューへ

00:06:42.302 --> 00:06:48.542 align:start position:27% line:-2
画像ファイルを表示するのは
データバッファですが

00:06:49.343 --> 00:06:54.615 align:start position:27% line:-2
ピクセルの情報を持つ
フレームバッファも必要です

00:06:55.382 --> 00:07:00.053 align:start position:30% line:-2
そこでUIImageは
イメージバッファを

00:06:55.382 --> 00:07:00.053 align:start position:30% line:-2
そこでUIImageは
イメージバッファを

00:07:00.621 --> 00:07:04.791 align:start position:34% line:-2
画像と同じサイズで
割り当てます

00:07:05.492 --> 00:07:13.333 align:start position:27% line:-2
そしてデコードにより
JPEGなどの画像データを

00:07:13.433 --> 00:07:16.703 align:start position:30% line:-2
ピクセル単位の色情報に
変換します

00:07:17.604 --> 00:07:23.210 align:start position:27% line:-2
UIKitがレンダリングを
要求すると 画像ビューは

00:07:23.810 --> 00:07:28.348 align:start position:32% line:-2
イメージバッファから
フレームバッファへ―

00:07:28.448 --> 00:07:30.017 align:start position:39% line:-1
コピーします

00:07:32.619 --> 00:07:38.225 align:start position:30% line:-2
大きな画像のデコードは
CPUには負担です

00:07:38.692 --> 00:07:43.363 align:start position:32% line:-2
でもUIImageを
毎回コピーせずに

00:07:43.931 --> 00:07:48.802 align:start position:29% line:-2
イメージバッファに残せば
一度で済みます

00:07:49.436 --> 00:07:53.207 align:start position:27% line:-2
これなら
画像をすべてデコードしても

00:07:53.307 --> 00:07:56.844 align:start position:36% line:-2
大容量のメモリを
確保できます

00:07:57.978 --> 00:08:03.016 align:start position:27% line:-2
この割り当てに比例するのは
画像サイズであり

00:07:57.978 --> 00:08:03.016 align:start position:27% line:-2
この割り当てに比例するのは
画像サイズであり

00:08:03.116 --> 00:08:07.120 align:start position:30% line:-2
画像ビューのサイズでは
ありません

00:08:08.255 --> 00:08:11.458 align:start position:30% line:-2
これが処理速度の低下を
招きます

00:08:12.392 --> 00:08:16.597 align:start position:32% line:-2
アプリケーションの
アドレス空間が大きく

00:08:16.697 --> 00:08:20.234 align:start position:36% line:-2
関連コンテンツが
分散するのです

00:08:20.334 --> 00:08:23.804 align:start position:29% line:-2
これが
フラグメンテーションです

00:08:25.873 --> 00:08:30.277 align:start position:34% line:-2
アプリケーションが
メモリを多く使うと

00:08:30.377 --> 00:08:35.849 align:start position:27% line:-2
OSが物理的メモリの内容を
圧縮し始めます

00:08:36.750 --> 00:08:39.686 align:start position:34% line:-2
アプリケーション内
だけでなく

00:08:39.785 --> 00:08:43.222 align:start position:27% line:-1
ここでもCPUが使われます

00:08:43.323 --> 00:08:48.028 align:start position:30% line:-2
この負荷の増大を
ユーザは制御できません

00:08:48.962 --> 00:08:52.966 align:start position:36% line:-2
メモリの使用量が
多くなりすぎると

00:08:53.133 --> 00:08:59.306 align:start position:29% line:-2
優先度の低いプロセスから
OSが終了処理を始めます

00:09:00.140 --> 00:09:01.341 align:start position:41% line:-1
最終的には

00:09:01.441 --> 00:09:05.879 align:start position:30% line:-2
アプリケーション自体が
終了してしまいます

00:09:06.346 --> 00:09:09.716 align:start position:36% line:-2
優先度が低くても
重要なプロセスは

00:09:09.816 --> 00:09:12.586 align:start position:30% line:-1
すぐ再起動するでしょう

00:09:13.520 --> 00:09:17.925 align:start position:30% line:-2
たとえメモリを使うのは
短時間でも―

00:09:18.458 --> 00:09:23.197 align:start position:30% line:-2
CPUの負荷への影響は
長引きかねません

00:09:24.031 --> 00:09:27.568 align:start position:36% line:-2
メモリの使用量を
減らす手法に

00:09:27.768 --> 00:09:31.538 align:start position:32% line:-2
ダウンサンプリングが
あります

00:09:32.773 --> 00:09:36.877 align:start position:32% line:-2
パイプラインを
詳しく見てみましょう

00:09:36.977 --> 00:09:40.247 align:start position:27% line:-1
画像を表示する画像ビューは

00:09:40.514 --> 00:09:44.418 align:start position:36% line:-2
画像データより
小さなサイズです

00:09:44.985 --> 00:09:49.189 align:start position:23% line:-2
Core Animationの
フレームワークは

00:09:49.289 --> 00:09:51.692 align:start position:34% line:-1
画像を縮小しますが

00:09:52.226 --> 00:09:55.963 align:start position:32% line:-2
ダウンサンプリングで
メモリを節約できます

00:09:56.063 --> 00:10:02.636 align:start position:29% line:-2
この手法では縮小の工程で
サムネイルを作ります

00:09:56.063 --> 00:10:02.636 align:start position:29% line:-2
この手法では縮小の工程で
サムネイルを作ります

00:10:03.270 --> 00:10:06.773 align:start position:34% line:-2
イメージバッファが
小さくなるので

00:10:07.541 --> 00:10:11.278 align:start position:29% line:-1
メモリの使用量も減ります

00:10:12.613 --> 00:10:16.083 align:start position:36% line:-2
画像ソースで
サムネイルを作り

00:10:16.350 --> 00:10:19.953 align:start position:30% line:-2
イメージバッファを
UIImageにして―

00:10:20.053 --> 00:10:22.823 align:start position:29% line:-1
画像ビューに割り当てます

00:10:23.423 --> 00:10:26.760 align:start position:27% line:-1
データバッファは不要になり

00:10:26.994 --> 00:10:31.498 align:start position:30% line:-2
メモリフットプリントも
かなり小さくなります

00:10:31.598 --> 00:10:35.636 align:start position:34% line:-2
重要なコードを数行
ご紹介しましょう

00:10:35.736 --> 00:10:39.907 align:start position:27% line:-2
CGImageSource
オブジェクトを―

00:10:40.374 --> 00:10:42.976 align:start position:30% line:-1
作るところから始めます

00:10:44.178 --> 00:10:47.714 align:start position:14% line:-1
CGImageSourceCreateは

00:10:47.815 --> 00:10:51.952 align:start position:23% line:-2
shouldCacheフラグを
渡します

00:10:52.052 --> 00:10:56.790 align:start position:27% line:-2
Core Graphics
フレームワークに

00:10:57.424 --> 00:11:00.661 align:start position:27% line:-1
オブジェクトを生成させます

00:10:57.424 --> 00:11:00.661 align:start position:27% line:-1
オブジェクトを生成させます

00:11:01.695 --> 00:11:04.431 align:start position:30% line:-1
デコードは まだですよ

00:11:04.531 --> 00:11:09.036 align:start position:27% line:-2
URLの情報で
オブジェクトを作るだけです

00:11:11.138 --> 00:11:14.842 align:start position:32% line:-2
次に画像の辺の長さを
計算しますが

00:11:14.942 --> 00:11:19.079 align:start position:27% line:-2
縮尺比と
ポイントサイズを基にします

00:11:19.880 --> 00:11:22.349 align:start position:32% line:-1
大きいほうの寸法です

00:11:22.649 --> 00:11:27.454 align:start position:29% line:-2
サムネイルの
ディクショナリも作ります

00:11:28.222 --> 00:11:32.893 align:start position:30% line:-2
いくつかのオプションが
書かれていますね

00:11:32.993 --> 00:11:37.431 align:start position:20% line:-2
CacheImmediatelyは
特に重要です

00:11:38.465 --> 00:11:44.104 align:start position:20% line:-2
これでCore Graphicsは
サムネイルと同時に

00:11:44.204 --> 00:11:48.876 align:start position:27% line:-2
デコードした
イメージバッファを作ります

00:11:49.576 --> 00:11:53.580 align:start position:30% line:-2
その時のCPU使用量も
制御できます

00:11:56.016 --> 00:12:00.621 align:start position:34% line:-2
CGImageの
サムネイルを生成し

00:11:56.016 --> 00:12:00.621 align:start position:34% line:-2
CGImageの
サムネイルを生成し

00:12:00.721 --> 00:12:04.224 align:start position:30% line:-2
ヘルパー機能で
UIImageにラップ

00:12:05.959 --> 00:12:09.463 align:start position:34% line:-2
この成果を
数字で表しましょう

00:12:09.763 --> 00:12:14.368 align:start position:20% line:-2
これは3000×2000ピクセルの
写真です

00:12:14.601 --> 00:12:19.606 align:start position:21% line:-2
最適化せずStoryboardの
UIImageViewに入れると

00:12:20.040 --> 00:12:24.411 align:start position:32% line:-2
静止画の表示だけで
31.5MB必要です

00:12:25.846 --> 00:12:27.781 align:start position:32% line:-1
ダウンサンプリングで

00:12:27.881 --> 00:12:31.585 align:start position:34% line:-2
イメージバッファを
作るだけで―

00:12:32.152 --> 00:12:36.723 align:start position:30% line:-2
メモリの使用量は
18.4MBになります

00:12:36.823 --> 00:12:39.526 align:start position:32% line:-1
大幅に節約できました

00:12:41.962 --> 00:12:44.264 align:start position:43% line:-1
(拍手)

00:12:44.364 --> 00:12:48.769 align:start position:30% line:-2
この技術を使えば
皆さんも称賛されますよ

00:12:49.236 --> 00:12:53.474 align:start position:32% line:-2
アプリケーションに
大きな画像が多くても

00:12:53.574 --> 00:12:56.343 align:start position:30% line:-1
狭い場所に表示できます

00:12:56.844 --> 00:13:00.848 align:start position:34% line:-2
カメラロールを例に
ご説明しましょう

00:12:56.844 --> 00:13:00.848 align:start position:34% line:-2
カメラロールを例に
ご説明しましょう

00:13:02.649 --> 00:13:08.589 align:start position:20% line:-2
UICollectionViewで
こんな命令を実行しました

00:13:09.089 --> 00:13:13.527 align:start position:32% line:-2
先ほど記述した
ヘルパー機能を使って

00:13:13.727 --> 00:13:18.131 align:start position:32% line:-2
画面上のセルに合わせ
画像を縮小します

00:13:19.700 --> 00:13:22.035 align:start position:32% line:-1
すばらしいでしょう？

00:13:22.135 --> 00:13:26.907 align:start position:34% line:-2
メモリの使用量を
大幅に減らせました

00:13:27.374 --> 00:13:30.477 align:start position:27% line:-1
しかし まだ問題があります

00:13:30.577 --> 00:13:34.481 align:start position:34% line:-2
スクロールビューで
起きる現象です

00:13:35.382 --> 00:13:38.652 align:start position:30% line:-2
スムーズに
スクロールできない時が

00:13:38.752 --> 00:13:40.721 align:start position:39% line:-1
ありますよね

00:13:41.188 --> 00:13:43.457 align:start position:32% line:-1
その原因は こうです

00:13:43.924 --> 00:13:48.795 align:start position:30% line:-2
スクロール中 CPUは
ほぼ休止しているか

00:13:49.062 --> 00:13:54.802 align:start position:30% line:-2
画像処理より優先すべき
命令を実行しています

00:13:55.502 --> 00:13:57.237 align:start position:34% line:-1
更新された画像を―

00:13:57.337 --> 00:14:02.576 align:start position:29% line:-2
ディスプレイがすぐ
受け取れば問題ありません

00:13:57.337 --> 00:14:02.576 align:start position:29% line:-2
ディスプレイがすぐ
受け取れば問題ありません

00:14:03.277 --> 00:14:06.079 align:start position:29% line:-1
今は別の画像を表示します

00:14:06.346 --> 00:14:10.017 align:start position:16% line:-1
Core Graphicsでデコードし

00:14:10.384 --> 00:14:12.853 align:start position:14% line:-1
セルをUICollectionViewへ

00:14:13.453 --> 00:14:19.927 align:start position:27% line:-2
CPUの負荷が増して
画像データを更新できません

00:14:20.861 --> 00:14:25.899 align:start position:27% line:-2
しかしディスプレイは
動作するので 画面の動きは

00:14:25.999 --> 00:14:27.501 align:start position:41% line:-1
不安定です

00:14:29.303 --> 00:14:34.107 align:start position:20% line:-2
デコード後のセルを
UICollectionViewへ

00:14:35.008 --> 00:14:39.246 align:start position:34% line:-2
スクロールが再開し
また止まりました

00:14:40.848 --> 00:14:45.118 align:start position:32% line:-2
この問題による影響は
他にも及びます

00:14:45.886 --> 00:14:49.890 align:start position:34% line:-2
バッテリーの寿命が
少し縮むのです

00:14:50.424 --> 00:14:54.862 align:start position:29% line:-2
iOSは電力需要の調整が
得意ですが

00:14:55.562 --> 00:14:59.633 align:start position:34% line:-2
CPUを少しずつ
使う場合に限ります

00:14:59.733 --> 00:15:01.969 align:start position:32% line:-1
今は急上昇しています

00:14:59.733 --> 00:15:01.969 align:start position:32% line:-1
今は急上昇しています

00:15:02.069 --> 00:15:05.105 align:start position:36% line:-2
新しい行が
表示されるたび―

00:15:05.939 --> 00:15:10.677 align:start position:27% line:-2
CPUの使用量は跳ね上がり
また戻ります

00:15:12.246 --> 00:15:17.217 align:start position:29% line:-2
使用量の急上昇を
抑える技術は２つあります

00:15:17.518 --> 00:15:19.253 align:start position:34% line:-1
１つ目は“先読み”

00:15:19.720 --> 00:15:22.990 align:start position:25% line:-1
詳しくはWWDC18の講演―

00:15:23.190 --> 00:15:27.294 align:start position:12% line:-2
“A Tour of
UICollectionView”をどうぞ

00:15:27.427 --> 00:15:30.264 align:start position:32% line:-2
先読みでは
コレクションビューが

00:15:30.364 --> 00:15:33.300 align:start position:32% line:-1
データソースに対して

00:15:33.700 --> 00:15:37.805 align:start position:30% line:-2
“もうすぐセルが
必要になる”と伝えます

00:15:37.905 --> 00:15:44.545 align:start position:25% line:-2
作業を早く始められる上
CPUの負荷も分散できるので

00:15:45.212 --> 00:15:47.981 align:start position:32% line:-1
最大使用量が減ります

00:15:49.616 --> 00:15:53.187 align:start position:32% line:-2
２つ目は
バックグラウンド処理

00:15:53.287 --> 00:15:58.025 align:start position:29% line:-2
処理量が分散し
CPUの使用率が減ります

00:16:01.595 --> 00:16:05.632 align:start position:29% line:-2
これでアプリケーションの
反応速度が上がり

00:16:05.732 --> 00:16:08.135 align:start position:27% line:-1
バッテリーの寿命も延びます

00:16:09.503 --> 00:16:15.642 align:start position:29% line:-2
ここではデータソースに
先読みの手法を使いました

00:16:16.610 --> 00:16:21.548 align:start position:27% line:-2
またヘルパー機能を呼び出し
画像を縮小して

00:16:21.849 --> 00:16:25.786 align:start position:27% line:-2
コレクションビューのセルに
表示します

00:16:27.187 --> 00:16:32.326 align:start position:30% line:-2
非同期キューの１つに
ディスパッチするのです

00:16:33.694 --> 00:16:36.897 align:start position:34% line:-2
バックグラウンドで
処理できました

00:16:37.564 --> 00:16:40.267 align:start position:32% line:-1
しかし欠点があります

00:16:40.767 --> 00:16:43.871 align:start position:32% line:-1
“スレッド爆発”です

00:16:44.505 --> 00:16:50.477 align:start position:29% line:-2
CPUに能力以上の仕事を
させると起きる現象です

00:16:51.411 --> 00:16:55.182 align:start position:36% line:-2
６～８枚の画像を
同時に表示する時

00:16:55.616 --> 00:17:00.854 align:start position:32% line:-2
CPUが２個だけでは
一気に処理できません

00:16:55.616 --> 00:17:00.854 align:start position:32% line:-2
CPUが２個だけでは
一気に処理できません

00:17:00.954 --> 00:17:03.724 align:start position:30% line:-1
CPUが足りないのです

00:17:04.992 --> 00:17:09.930 align:start position:29% line:-2
ディスパッチの際
デッドロックを避けるため

00:17:10.230 --> 00:17:15.335 align:start position:29% line:-2
GCDが新しいスレッドを
生成し 処理します

00:17:16.236 --> 00:17:20.307 align:start position:32% line:-2
CPUはスレッド間を
行き来しながら

00:17:20.406 --> 00:17:25.612 align:start position:27% line:-2
OSに命じられている処理を
徐々に進めます

00:17:25.712 --> 00:17:29.316 align:start position:29% line:-2
これが
オーバーヘッドの原因です

00:17:31.351 --> 00:17:35.722 align:start position:29% line:-2
CPUの画像処理の負荷を
減らせたら

00:17:35.989 --> 00:17:38.325 align:start position:32% line:-1
とても助かりますよね

00:17:39.126 --> 00:17:43.497 align:start position:29% line:-2
去年の講演で
紹介された技術の出番です

00:17:43.730 --> 00:17:46.600 align:start position:11% line:-2
Modernizing Grand
Central Dispatch Usage

00:17:46.700 --> 00:17:50.938 align:start position:32% line:-2
タスクを同期…　失礼
順番に並べましょう

00:17:52.940 --> 00:17:57.211 align:start position:32% line:-2
非同期キューを
単にディスパッチせず

00:17:58.212 --> 00:18:00.247 align:start position:32% line:-1
シリアルキューを作成

00:17:58.212 --> 00:18:00.247 align:start position:32% line:-1
シリアルキューを作成

00:18:01.181 --> 00:18:03.917 align:start position:38% line:-2
先読みをしつつ
非同期で―

00:18:05.285 --> 00:18:07.554 align:start position:34% line:-1
ディスパッチします

00:18:07.888 --> 00:18:12.826 align:start position:29% line:-2
個々の画像の立ち上がりは
遅くなりますが

00:18:13.560 --> 00:18:19.132 align:start position:27% line:-2
CPUのタスクの切り替えは
以前より早まります

00:18:21.568 --> 00:18:24.771 align:start position:30% line:-1
画像の保存先は様々です

00:18:25.139 --> 00:18:30.477 align:start position:29% line:-2
アプリケーション内なら
イメージアセットでしょう

00:18:30.577 --> 00:18:35.415 align:start position:29% line:-2
ファイルの中や
ネットワーク上でしょうか

00:18:36.016 --> 00:18:42.756 align:start position:27% line:-2
ドキュメントディレクトリや
キャッシュかもしれませんね

00:18:43.690 --> 00:18:46.193 align:start position:32% line:-1
アートワークの場合は

00:18:46.493 --> 00:18:50.264 align:start position:34% line:-2
イメージアセットを
強く勧めます

00:18:51.198 --> 00:18:52.966 align:start position:38% line:-1
理由があります

00:18:54.501 --> 00:18:58.472 align:start position:27% line:-2
画像に名称や特性を持たせて
管理するため―

00:18:58.572 --> 00:19:04.845 align:start position:27% line:-2
ディスクのファイル検索より
速く画像を探せるのです

00:18:58.572 --> 00:19:04.845 align:start position:27% line:-2
ディスクのファイル検索より
速く画像を探せるのです

00:19:06.880 --> 00:19:12.519 align:start position:27% line:-2
アセットカタログは随時
バッファサイズを調整します

00:19:13.854 --> 00:19:18.926 align:start position:30% line:-2
イメージアセットだけの
特色もあります

00:19:19.026 --> 00:19:24.531 align:start position:29% line:-2
例えばデバイスに関連する
画像リソースだけを

00:19:24.631 --> 00:19:27.100 align:start position:32% line:-1
ダウンロードできます

00:19:27.201 --> 00:19:28.802 align:start position:32% line:-1
ベクタ画像も扱えます

00:19:30.904 --> 00:19:36.477 align:start position:29% line:-2
イメージアセットの設定で
チェックを入れれば

00:19:36.577 --> 00:19:39.379 align:start position:32% line:-1
ベクタ画像を使えます

00:19:40.147 --> 00:19:44.218 align:start position:32% line:-2
これが画像ビューに
レンダリングされると

00:19:44.384 --> 00:19:48.455 align:start position:34% line:-2
サイズが変わっても
画質は鮮明です

00:19:49.389 --> 00:19:54.728 align:start position:32% line:-2
ラスタ化してあるため
ジャギーが出ません

00:19:55.796 --> 00:20:03.237 align:start position:25% line:-2
OSのアクセシビリティ設定で
フォントサイズを大きくして

00:19:55.796 --> 00:20:03.237 align:start position:25% line:-2
OSのアクセシビリティ設定で
フォントサイズを大きくして

00:20:03.537 --> 00:20:08.408 align:start position:27% line:-2
タブバーのアイテムを押すと
HUDが現れ

00:20:08.509 --> 00:20:13.146 align:start position:30% line:-2
指で押さえている画像が
拡大されます

00:20:14.047 --> 00:20:18.252 align:start position:27% line:-2
こういう時に画像の見栄えを
よくするには

00:20:18.719 --> 00:20:23.757 align:start position:23% line:-2
Preserve Vector
Dataを―

00:20:23.857 --> 00:20:25.959 align:start position:36% line:-1
設定してください

00:20:26.760 --> 00:20:30.364 align:start position:30% line:-2
先ほどのパイプラインに
似ています

00:20:30.631 --> 00:20:37.104 align:start position:29% line:-2
ラスタ化ではベクタ画像を
ビットマップ画像に変換し

00:20:37.204 --> 00:20:40.941 align:start position:34% line:-2
フレームバッファに
コピーします

00:20:45.078 --> 00:20:50.751 align:start position:30% line:-2
このベクタ画像の処理に
CPUをかなり使うため

00:20:50.851 --> 00:20:52.619 align:start position:36% line:-1
最適化しましょう

00:20:53.120 --> 00:20:57.024 align:start position:30% line:-2
設定済みのベクタ画像を
通常サイズで

00:20:57.291 --> 00:20:59.927 align:start position:32% line:-1
レンダリングしました

00:21:01.195 --> 00:21:05.032 align:start position:34% line:-2
アセットカタログの
コンパイラは

00:21:05.132 --> 00:21:09.036 align:start position:32% line:-2
変換前の画像を
すでに保存しています

00:21:09.336 --> 00:21:14.842 align:start position:27% line:-2
だったら それをデコードし
カタログに保存すれば

00:21:15.209 --> 00:21:22.516 align:start position:27% line:-2
フレームバッファに直接
レンダリングできるわけです

00:21:24.952 --> 00:21:29.490 align:start position:30% line:-2
例えば
大小２種類のアイコンを

00:21:29.590 --> 00:21:33.393 align:start position:34% line:-2
レンダリングすると
しましょう

00:21:33.794 --> 00:21:37.331 align:start position:30% line:-2
その場合はベクタ画像の
設定に頼らず

00:21:37.698 --> 00:21:43.237 align:start position:27% line:-2
レンダリングに適した
イメージアセットを作ります

00:21:45.005 --> 00:21:47.040 align:start position:34% line:-1
これならCPUは―

00:21:47.741 --> 00:21:52.412 align:start position:29% line:-2
フレームバッファに
毎回 描画する必要はなく

00:21:52.679 --> 00:21:55.883 align:start position:30% line:-1
ラスタ化だけで済みます

00:21:58.218 --> 00:22:01.722 align:start position:25% line:-2
UIImageと
UIImageViewでした

00:21:58.218 --> 00:22:01.722 align:start position:25% line:-2
UIImageと
UIImageViewでした

00:22:02.823 --> 00:22:09.329 align:start position:27% line:-2
アプリケーションの実行中に
描画するケースもありますね

00:22:12.332 --> 00:22:13.967 align:start position:39% line:-1
例を挙げます

00:22:14.268 --> 00:22:19.506 align:start position:25% line:-2
Photosで編集する場合を
考えましょう

00:22:21.208 --> 00:22:27.614 align:start position:25% line:-2
UIButtonはアイコンを
表示するオブジェクトですが

00:22:28.482 --> 00:22:35.289 align:start position:23% line:-2
Live Photoのボタンは
サポートしていません

00:22:36.190 --> 00:22:38.458 align:start position:34% line:-1
自作してみましょう

00:22:39.326 --> 00:22:45.065 align:start position:29% line:-2
このようにUIViewの
サブクラスを作ります

00:22:45.399 --> 00:22:51.405 align:start position:30% line:-2
角が丸い黄色の長方形と
文字と画像を入れました

00:22:53.707 --> 00:22:55.309 align:start position:39% line:-1
この方法は―

00:22:56.243 --> 00:22:57.444 align:start position:41% line:-1
ダメですね

00:22:58.045 --> 00:23:03.750 align:start position:21% line:-2
ビューのサブクラスと
UIImageViewを比べます

00:22:58.045 --> 00:23:03.750 align:start position:21% line:-2
ビューのサブクラスと
UIImageViewを比べます

00:23:04.318 --> 00:23:07.287 align:start position:29% line:-1
UIViewを支えるのは

00:23:07.387 --> 00:23:11.058 align:start position:23% line:-2
Core Animationの
CALayerです

00:23:11.725 --> 00:23:13.227 align:start position:38% line:-1
画像ビューは―

00:23:13.327 --> 00:23:18.165 align:start position:29% line:-2
デコードした
イメージバッファを要求し

00:23:19.066 --> 00:23:24.705 align:start position:27% line:-2
それをCALayerに渡し
レイヤとして使います

00:23:26.173 --> 00:23:28.442 align:start position:30% line:-1
しかし サブクラスは―

00:23:29.776 --> 00:23:31.578 align:start position:39% line:-1
少し違います

00:23:31.678 --> 00:23:36.817 align:start position:27% line:-2
レイヤがdrawメソッドの
イメージバッファを作り

00:23:37.317 --> 00:23:43.524 align:start position:27% line:-2
サブクラスがdraw機能で
コンテンツを上書きします

00:23:43.624 --> 00:23:48.295 align:start position:27% line:-2
その後 フレームバッファに
コピーするのです

00:23:55.068 --> 00:24:00.574 align:start position:27% line:-2
この処理は負担が大きいので
別の方法がよいでしょう

00:23:55.068 --> 00:24:00.574 align:start position:27% line:-2
この処理は負担が大きいので
別の方法がよいでしょう

00:24:01.608 --> 00:24:03.811 align:start position:34% line:-1
バッキングストアも

00:24:03.944 --> 00:24:06.780 align:start position:34% line:-2
CALayerの
イメージバッファも

00:24:06.880 --> 00:24:10.150 align:start position:30% line:-2
サイズは
表示するビュー次第です

00:24:11.151 --> 00:24:14.621 align:start position:23% line:-1
iOS 12で最適化されたのは

00:24:14.988 --> 00:24:19.226 align:start position:34% line:-2
バッキングストアの
要素のサイズです

00:24:19.493 --> 00:24:24.198 align:start position:32% line:-2
標準色域にない色を
使うかどうかによって

00:24:24.298 --> 00:24:28.502 align:start position:29% line:-2
サイズが
ダイナミックに変わります

00:24:29.036 --> 00:24:33.674 align:start position:25% line:-2
拡張したsRGBの色を使って
描画すると

00:24:33.907 --> 00:24:36.210 align:start position:32% line:-1
バッキングストアは―

00:24:37.044 --> 00:24:42.249 align:start position:27% line:-2
０と１で表す色だけの時より
大きくなります

00:24:43.951 --> 00:24:49.523 align:start position:21% line:-2
iOS 11ではCALayerの
コンテンツ形式プロパティで

00:24:49.623 --> 00:24:52.960 align:start position:20% line:-1
Core Animationに対し

00:24:53.060 --> 00:24:58.565 align:start position:27% line:-2
ビューで広色域のサポートが
必要かどうかを伝えました

00:24:58.966 --> 00:25:03.270 align:start position:23% line:-2
しかし これは
iOS 12で導入した最適化を

00:24:58.966 --> 00:25:03.270 align:start position:23% line:-2
しかし これは
iOS 12で導入した最適化を

00:25:03.370 --> 00:25:05.272 align:start position:39% line:-1
無効にします

00:25:05.372 --> 00:25:08.709 align:start position:25% line:-2
layerWillDrawを
チェックして

00:25:08.809 --> 00:25:14.581 align:start position:27% line:-2
iOS 12の最適化を
無効にしないよう ご注意を

00:25:17.684 --> 00:25:21.388 align:start position:34% line:-2
バッキングストアに
情報を伝えるより

00:25:21.488 --> 00:25:23.757 align:start position:34% line:-1
いい方法があります

00:25:23.857 --> 00:25:27.895 align:start position:34% line:-2
バッキングストアの
量も減ります

00:25:27.995 --> 00:25:32.466 align:start position:32% line:-2
サブビューに
リファクタリングして

00:25:33.000 --> 00:25:36.837 align:start position:30% line:-2
draw機能の上書きを
削除します

00:25:38.238 --> 00:25:42.042 align:start position:32% line:-2
メモリのコピー画像が
不要になり

00:25:42.843 --> 00:25:47.848 align:start position:21% line:-2
UIViewの最適化プロパティを
使えます

00:25:50.851 --> 00:25:56.457 align:start position:25% line:-2
drawメソッドの上書きには
バッキングストアが必須です

00:25:57.391 --> 00:26:01.662 align:start position:30% line:-2
上書きしなくても
プロパティは機能します

00:25:57.391 --> 00:26:01.662 align:start position:30% line:-2
上書きしなくても
プロパティは機能します

00:26:01.762 --> 00:26:04.665 align:start position:34% line:-2
バッキングストアが
不要な例は

00:26:04.765 --> 00:26:09.303 align:start position:29% line:-2
UIViewの背景が
パターン色でない場合です

00:26:09.403 --> 00:26:13.507 align:start position:34% line:-2
パターン色の背景は
避けましょう

00:26:15.209 --> 00:26:20.147 align:start position:25% line:-2
UIImageViewを作り
画像をビューに割り当て―

00:26:20.247 --> 00:26:24.852 align:start position:27% line:-2
タイリングを設定するための
機能を使います

00:26:27.921 --> 00:26:31.525 align:start position:32% line:-2
長方形の角を切る時は
CALayerの―

00:26:32.226 --> 00:26:35.495 align:start position:27% line:-2
cornerRadiusを
指定します

00:26:35.829 --> 00:26:38.599 align:start position:21% line:-1
Core Animationなら

00:26:38.966 --> 00:26:42.736 align:start position:29% line:-2
メモリを割り当てなくても
可能です

00:26:43.437 --> 00:26:47.674 align:start position:30% line:-2
maskViewなどを
使う場合は

00:26:48.375 --> 00:26:51.812 align:start position:30% line:-2
マスクを保存する領域が
必要です

00:26:53.714 --> 00:26:57.785 align:start position:34% line:-2
一部が透明など
複雑な背景の場合は

00:26:58.118 --> 00:27:03.123 align:start position:29% line:-2
UIImageViewを
使ってみてください

00:26:58.118 --> 00:27:03.123 align:start position:29% line:-2
UIImageViewを
使ってみてください

00:27:03.824 --> 00:27:06.126 align:start position:34% line:-2
アセットカタログに
保存するか

00:27:06.226 --> 00:27:08.195 align:start position:36% line:-1
レンダリングして

00:27:08.295 --> 00:27:12.666 align:start position:34% line:-2
画像ビューに
データを提供します

00:27:15.135 --> 00:27:18.705 align:start position:30% line:-2
最後は
アイコンを作りましょう

00:27:19.773 --> 00:27:24.344 align:start position:29% line:-2
UIImageViewは
メモリを追加しなくても

00:27:24.444 --> 00:27:27.214 align:start position:34% line:-1
画像を彩色できます

00:27:28.182 --> 00:27:31.552 align:start position:27% line:-1
イメージアセットエディタで

00:27:31.652 --> 00:27:37.157 align:start position:29% line:-2
レンダリングモードを
テンプレートに設定します

00:27:37.758 --> 00:27:41.128 align:start position:14% line:-2
または
withRenderingMode機能で

00:27:41.228 --> 00:27:43.931 align:start position:29% line:-1
UIImageを作ります

00:27:44.932 --> 00:27:51.338 align:start position:20% line:-2
画像を画像ビューに割り当て
tintColorで彩色しましょう

00:27:52.139 --> 00:27:58.345 align:start position:21% line:-2
画像をフレームバッファに
レンダリングするUIImageは

00:27:58.445 --> 00:28:00.447 align:start position:36% line:-1
単色を設定します

00:27:58.445 --> 00:28:00.447 align:start position:36% line:-1
単色を設定します

00:28:00.581 --> 00:28:05.586 align:start position:34% line:-2
単色のコピー画像を
別々には持ちません

00:28:07.988 --> 00:28:11.058 align:start position:30% line:-1
一方 UILabelは

00:28:11.358 --> 00:28:15.262 align:start position:38% line:-2
カラーの文字や
絵文字ではなく

00:28:15.863 --> 00:28:20.801 align:start position:29% line:-2
黒い文字の表示なら
メモリを75％節約します

00:28:21.835 --> 00:28:25.539 align:start position:34% line:-2
この最適化の詳細は
WWDC18の―

00:28:25.839 --> 00:28:31.145 align:start position:9% line:-2
“iOS Memory Deep Dive”を
どうぞ

00:28:31.345 --> 00:28:34.982 align:start position:29% line:-2
A8のバッキングストアの
解説です

00:28:38.252 --> 00:28:39.887 align:start position:38% line:-1
UIKitで―

00:28:41.388 --> 00:28:45.959 align:start position:27% line:-2
オフスクリーンバッファの
画像をレンダリングする時は

00:28:46.093 --> 00:28:50.264 align:start position:7% line:-2
UIGraphicsImageRendererを
使います

00:28:50.898 --> 00:28:56.970 align:start position:14% line:-2
UIGraphicsBeginImage
Contextは使いません

00:28:57.070 --> 00:29:02.443 align:start position:27% line:-2
前者だけが広色域を
正しくレンダリングできます

00:28:57.070 --> 00:29:02.443 align:start position:27% line:-2
前者だけが広色域を
正しくレンダリングできます

00:29:03.977 --> 00:29:09.049 align:start position:27% line:-2
前者でオフスクリーン
バッファにレンダリングして

00:29:09.283 --> 00:29:13.220 align:start position:29% line:-2
UIImageViewで
画面に表示します

00:29:15.055 --> 00:29:20.427 align:start position:27% line:-2
先ほどのバッキングストアの
最適化と同様に

00:29:20.694 --> 00:29:26.033 align:start position:7% line:-2
UIGraphicsImageRendererも
ダイナミックに―

00:29:26.133 --> 00:29:31.238 align:start position:34% line:-2
イメージバッファの
サイズを拡大します

00:29:33.974 --> 00:29:37.911 align:start position:27% line:-2
iOS 12より前のOSで
実行するなら

00:29:38.178 --> 00:29:43.150 align:start position:12% line:-1
prefersExtendedRangeで

00:29:43.517 --> 00:29:47.287 align:start position:23% line:-1
広色域かをUIKitに伝えます

00:29:50.490 --> 00:29:53.060 align:start position:30% line:-1
しかし 迷うところです

00:29:53.393 --> 00:29:57.564 align:start position:36% line:-2
最初 レンダラに
画像を生成すると

00:29:58.198 --> 00:30:00.534 align:start position:34% line:-1
その画像が使う色は

00:29:58.198 --> 00:30:00.534 align:start position:34% line:-1
その画像が使う色は

00:30:00.634 --> 00:30:05.139 align:start position:32% line:-2
sRGBの範囲を
超えるかもしれません

00:30:06.073 --> 00:30:10.777 align:start position:27% line:-2
しかし その情報を持つのは
小さな要素です

00:30:10.878 --> 00:30:12.813 align:start position:34% line:-1
UIImageには

00:30:13.113 --> 00:30:16.183 align:start position:34% line:-2
再レンダリングの
ストレージがある―

00:30:16.283 --> 00:30:22.723 align:start position:23% line:-2
オブジェクトを得るための
レンダラのプロパティがあります

00:30:26.960 --> 00:30:31.298 align:start position:29% line:-2
iOSが提供する
CPUとGPUの技術の―

00:30:31.398 --> 00:30:35.602 align:start position:32% line:-2
アプリケーションへの
統合法をお話しします

00:30:37.571 --> 00:30:42.876 align:start position:30% line:-2
高度な画像処理を瞬時に
行う場合 お勧めなのが

00:30:43.343 --> 00:30:45.112 align:start position:29% line:-1
Core Imageです

00:30:46.046 --> 00:30:51.318 align:start position:27% line:-2
Core Imageは
画像加工のフレームワークで

00:30:51.685 --> 00:30:54.922 align:start position:25% line:-1
CPUとGPUを使い分けます

00:30:55.756 --> 00:31:00.494 align:start position:16% line:-1
CIImageからUIImageを作り

00:30:55.756 --> 00:31:00.494 align:start position:16% line:-1
CIImageからUIImageを作り

00:31:00.727 --> 00:31:05.666 align:start position:23% line:-2
それをUIImageViewが
GPUで加工します

00:31:06.767 --> 00:31:11.038 align:start position:29% line:-2
その間 CPUは
他のタスクを処理できます

00:31:12.105 --> 00:31:17.978 align:start position:29% line:-2
CIImageを作った後
イニシャライザを使います

00:31:19.813 --> 00:31:25.185 align:start position:30% line:-2
iOSで画像処理できる
高度なフレームワークは

00:31:25.319 --> 00:31:26.720 align:start position:36% line:-1
他にも あります

00:31:26.820 --> 00:31:30.190 align:start position:29% line:-2
Metal　Vision
Accelerateです

00:31:31.158 --> 00:31:35.596 align:start position:27% line:-2
データ型は
CVPixelBuffer

00:31:36.563 --> 00:31:39.333 align:start position:30% line:-1
バッファの働きをする―

00:31:39.433 --> 00:31:43.804 align:start position:27% line:-2
CPUやGPUで使用可能な
データ型です

00:31:44.571 --> 00:31:48.509 align:start position:30% line:-2
このピクセルバッファを
構成する時は

00:31:48.609 --> 00:31:51.979 align:start position:30% line:-2
最良のイニシャライザを
使います

00:31:52.746 --> 00:31:56.383 align:start position:36% line:-2
エンコードは
しないでください

00:31:56.750 --> 00:32:00.687 align:start position:32% line:-2
UIImageなどが
デコード済みです

00:31:56.750 --> 00:32:00.687 align:start position:32% line:-2
UIImageなどが
デコード済みです

00:32:01.655 --> 00:32:04.758 align:start position:25% line:-1
CPUとGPUのデータ移行は

00:32:04.858 --> 00:32:10.197 align:start position:27% line:-2
作業を交換しないよう注意し
並行処理します

00:32:11.498 --> 00:32:14.568 align:start position:21% line:-1
Accelerateとsimdの

00:32:14.668 --> 00:32:17.805 align:start position:30% line:-2
バッファの
正しいフォーマットを―

00:32:17.905 --> 00:32:20.274 align:start position:36% line:-1
最後に解説します

00:32:22.843 --> 00:32:25.212 align:start position:34% line:-1
要点だけにしますね

00:32:25.913 --> 00:32:31.585 align:start position:29% line:-2
ビューを先読みすると
速く滑らかに処理できます

00:32:33.053 --> 00:32:35.956 align:start position:30% line:-2
最適化を
無効にしないでください

00:32:36.256 --> 00:32:41.762 align:start position:25% line:-2
バッキングストアを
UIKitが小さくしています

00:32:43.864 --> 00:32:48.535 align:start position:29% line:-2
画像はアセットカタログに
まとめましょう

00:32:49.103 --> 00:32:52.105 align:start position:32% line:-2
ファイルには
保存しないでください

00:32:53.807 --> 00:32:56.844 align:start position:29% line:-1
大小のアイコンを作る時は

00:32:57.544 --> 00:33:00.881 align:start position:36% line:-2
画像の設定を
過信しないように

00:32:57.544 --> 00:33:00.881 align:start position:36% line:-2
画像の設定を
過信しないように

00:33:03.183 --> 00:33:07.788 align:start position:30% line:-2
更に詳しく
お知りになりたい場合は

00:33:08.021 --> 00:33:12.359 align:start position:27% line:-2
パフォーマンス向上の講演が
お勧めです

00:33:12.693 --> 00:33:14.461 align:start position:36% line:-1
ご質問があれば―

00:33:14.561 --> 00:33:18.799 align:start position:32% line:-2
明日と金曜日のラボに
お越しください

00:33:19.833 --> 00:33:21.034 align:start position:41% line:-1
ありがとう

00:33:21.135 --> 00:33:24.972 align:start position:43% line:-1
(拍手)
