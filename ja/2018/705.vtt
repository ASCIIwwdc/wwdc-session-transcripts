WEBVTT

00:00:07.174 --> 00:00:16.216 align:start position:43% line:-1
(音楽)

00:00:23.056 --> 00:00:24.224 align:start position:41% line:-1
こんにちは

00:00:24.625 --> 00:00:29.696 align:start position:43% line:-1
(拍手)

00:00:30.430 --> 00:00:34.168 align:start position:29% line:-2
エンジニアマネージャーの
ピートです

00:00:34.268 --> 00:00:37.104 align:start position:21% line:-1
サーバインフラストラクチャを使い

00:00:37.204 --> 00:00:40.240 align:start position:29% line:-1
定期購読を促す話をします

00:00:40.574 --> 00:00:42.643 align:start position:29% line:-2
初めに
サーバアーキテクチャと―

00:00:42.776 --> 00:00:46.146 align:start position:29% line:-2
アプリケーションの設計に
ついてです

00:00:47.047 --> 00:00:51.351 align:start position:27% line:-2
ここにユーザ体験を強化する
ヒントがあります

00:00:52.152 --> 00:00:56.290 align:start position:27% line:-2
その後 定期購読の解約率を
下げるための話があり

00:00:56.590 --> 00:01:01.628 align:start position:27% line:-2
最後に分析とレポート関連の
発表があります

00:00:56.590 --> 00:01:01.628 align:start position:27% line:-2
最後に分析とレポート関連の
発表があります

00:01:02.229 --> 00:01:04.665 align:start position:25% line:-2
では
サーバインフラストラクチャと

00:01:04.765 --> 00:01:06.400 align:start position:29% line:-1
アプリケーションの話です

00:01:07.401 --> 00:01:11.805 align:start position:27% line:-2
まず初めに“定期購読”とは
何でしょうか

00:01:12.639 --> 00:01:18.779 align:start position:29% line:-2
繰り返し料金を支払って
サービスを受けることです

00:01:19.146 --> 00:01:24.184 align:start position:21% line:-2
技術的には
繰り返しトランザクションが発生し

00:01:24.284 --> 00:01:27.721 align:start position:30% line:-2
その都度
購読期間が延長されます

00:01:28.555 --> 00:01:30.524 align:start position:32% line:-1
定期購読を使うには―

00:01:30.624 --> 00:01:35.229 align:start position:29% line:-2
一連のトランザクションを
処理しなければなりません

00:01:35.395 --> 00:01:37.598 align:start position:32% line:-1
順を追って説明します

00:01:38.131 --> 00:01:41.168 align:start position:29% line:-1
まずアプリケーションで―

00:01:42.035 --> 00:01:44.238 align:start position:25% line:-1
トランザクションを開始します

00:01:44.338 --> 00:01:48.609 align:start position:27% line:-2
トランザクションが本物なら
お金の所有者が変わります

00:01:49.443 --> 00:01:53.080 align:start position:25% line:-1
この時点で購読状態を更新し―

00:01:53.180 --> 00:01:56.183 align:start position:25% line:-1
管理するかは あなた次第です

00:01:56.617 --> 00:01:58.619 align:start position:34% line:-1
詳しくお話しします

00:01:58.719 --> 00:02:02.623 align:start position:29% line:-2
初めにトランザクションの
話をします

00:01:58.719 --> 00:02:02.623 align:start position:29% line:-2
初めにトランザクションの
話をします

00:02:04.057 --> 00:02:09.295 align:start position:30% line:-2
購読が初回または更新に
かかわらず―

00:02:09.395 --> 00:02:14.368 align:start position:21% line:-2
StoreKitフレームワークで
処理するように設定します

00:02:14.735 --> 00:02:18.338 align:start position:23% line:-1
StoreKitを実装すると―

00:02:18.438 --> 00:02:21.575 align:start position:32% line:-2
App Storeが
ユーザに請求をします

00:02:21.675 --> 00:02:23.777 align:start position:23% line:-1
トランザクションが発生すると―

00:02:23.877 --> 00:02:28.916 align:start position:14% line:-2
SKPaymentTransaction
Observerから通知されます

00:02:30.083 --> 00:02:35.689 align:start position:32% line:-2
このオブザーバは
App内課金の柱です

00:02:35.789 --> 00:02:40.227 align:start position:20% line:-2
StoreKitのプロトコルであり
何にでも実装できます

00:02:40.327 --> 00:02:43.163 align:start position:20% line:-2
この例ではAppDelegateに
実装しています

00:02:43.831 --> 00:02:47.000 align:start position:30% line:-2
このオブザーバを
ペイメントのキューに―

00:02:47.100 --> 00:02:50.671 align:start position:30% line:-2
初期段階で
実装することが重要です

00:02:51.505 --> 00:02:54.875 align:start position:29% line:-1
オブザーバを実装したら―

00:02:54.975 --> 00:02:58.779 align:start position:23% line:-1
トランザクションの準備完了です

00:02:59.913 --> 00:03:04.785 align:start position:29% line:-2
トランザクションを
コールバックで受け取り―

00:02:59.913 --> 00:03:04.785 align:start position:29% line:-2
トランザクションを
コールバックで受け取り―

00:03:04.985 --> 00:03:09.890 align:start position:29% line:-2
StoreKitから
処理するよう通知されます

00:03:09.990 --> 00:03:13.794 align:start position:29% line:-2
様々な状態が想定され
全てお話しできませんが―

00:03:13.894 --> 00:03:17.030 align:start position:25% line:-2
購読状態のトランザクションを
注視してください

00:03:17.231 --> 00:03:22.569 align:start position:27% line:-2
アプリケーションは検証と
アンロックの準備が完了です

00:03:24.671 --> 00:03:30.844 align:start position:30% line:-2
次にトランザクションが
本物かを検証します

00:03:32.412 --> 00:03:36.984 align:start position:34% line:-2
この時 決済完了の
確認に使うのは―

00:03:37.985 --> 00:03:39.953 align:start position:23% line:-1
App Storeレシートです

00:03:40.487 --> 00:03:43.557 align:start position:27% line:-1
お店のレシートと同じもので

00:03:43.657 --> 00:03:47.027 align:start position:30% line:-2
ユーザが購入したことを
証明します

00:03:47.728 --> 00:03:53.767 align:start position:27% line:-2
初めてのダウンロードで
決済完了した記録があります

00:03:54.568 --> 00:03:57.104 align:start position:23% line:-1
レシートは各デバイスに保存され

00:03:57.204 --> 00:04:01.308 align:start position:18% line:-2
App Storeが提供するAPIで
アクセスできます

00:03:57.204 --> 00:04:01.308 align:start position:18% line:-2
App Storeが提供するAPIで
アクセスできます

00:04:02.342 --> 00:04:06.146 align:start position:27% line:-1
証明として署名されるので―

00:04:06.246 --> 00:04:09.850 align:start position:20% line:-1
Appleが発行したと確認できます

00:04:10.551 --> 00:04:14.021 align:start position:30% line:-2
レシートは
デバイス固有のものです

00:04:14.121 --> 00:04:16.123 align:start position:36% line:-1
同じユーザでも―

00:04:16.423 --> 00:04:22.396 align:start position:27% line:-2
所持しているデバイスごとに
少しずつ書面が異なります

00:04:24.264 --> 00:04:27.467 align:start position:34% line:-2
トランザクションを
検証するには―

00:04:27.568 --> 00:04:33.540 align:start position:21% line:-2
このApp Storeレシートが
本物かどうか確認します

00:04:35.175 --> 00:04:36.076 align:start position:39% line:-1
方法は２通り

00:04:36.176 --> 00:04:38.312 align:start position:29% line:-1
１つ目はローカル検証です

00:04:38.412 --> 00:04:40.647 align:start position:32% line:-1
ユーザのデバイスで―

00:04:40.747 --> 00:04:46.153 align:start position:27% line:-2
レシートが適切に
署名されているか確認します

00:04:46.253 --> 00:04:49.356 align:start position:21% line:-2
２つ目は
App Storeを使う技術です

00:04:49.723 --> 00:04:52.926 align:start position:34% line:-2
エンコードされた
レシートデータを―

00:04:53.460 --> 00:04:57.998 align:start position:25% line:-2
サーバ経由で
App Storeに送ります

00:04:58.098 --> 00:05:00.734 align:start position:14% line:-1
するとApp Storeが検証を行います

00:04:58.098 --> 00:05:00.734 align:start position:14% line:-1
するとApp Storeが検証を行います

00:05:02.369 --> 00:05:04.037 align:start position:34% line:-1
どちらの方法でも―

00:05:04.137 --> 00:05:08.475 align:start position:25% line:-2
デバイス上でオンライン検証は
しないでください

00:05:08.609 --> 00:05:12.346 align:start position:29% line:-1
安全な方法ではありません

00:05:13.113 --> 00:05:15.649 align:start position:32% line:-1
この２つの検証方法を

00:05:15.749 --> 00:05:19.653 align:start position:23% line:-1
購読管理と更新で比較してみます

00:05:20.420 --> 00:05:24.758 align:start position:30% line:-2
どちらも文書の真正性を
確保する方法で―

00:05:25.592 --> 00:05:30.964 align:start position:27% line:-2
トランザクションに関わる
レシートにアクセスできます

00:05:31.431 --> 00:05:34.735 align:start position:32% line:-2
しかし購読の
自動更新に関しては―

00:05:34.835 --> 00:05:39.373 align:start position:21% line:-2
App Storeを使ったほうが
有利な点があります

00:05:39.473 --> 00:05:45.279 align:start position:27% line:-2
検証の応答で
購読情報を追加できるのです

00:05:45.379 --> 00:05:48.382 align:start position:27% line:-1
マイケルが後ほど説明します

00:05:49.283 --> 00:05:52.986 align:start position:25% line:-2
こうした情報は
常にサーバで処理されています

00:05:53.086 --> 00:05:56.823 align:start position:23% line:-2
これは複数のプラットフォームの
展開に重要です

00:05:58.492 --> 00:06:01.562 align:start position:29% line:-2
サーバはデバイスの時計に
影響されません

00:05:58.492 --> 00:06:01.562 align:start position:29% line:-2
サーバはデバイスの時計に
影響されません

00:06:01.762 --> 00:06:05.732 align:start position:29% line:-2
デバイス上で
ローカル検証をした場合―

00:06:05.833 --> 00:06:10.904 align:start position:23% line:-2
デバイスの時計を過去にされると
逆らえないのです

00:06:11.004 --> 00:06:14.741 align:start position:25% line:-1
無料お試しなどで悪用されます

00:06:15.742 --> 00:06:18.312 align:start position:20% line:-1
それとApp Storeを使うと―

00:06:18.579 --> 00:06:24.918 align:start position:18% line:-2
OpenSSLやASN.1デコードの
設計が不要です

00:06:25.018 --> 00:06:28.922 align:start position:32% line:-2
購読状態の自動更新の
管理に関しては―

00:06:29.022 --> 00:06:33.527 align:start position:23% line:-2
App Storeを使う検証を
強くお薦めします

00:06:34.495 --> 00:06:38.465 align:start position:29% line:-2
オンライン接続が必要ない
アプリケーションなら―

00:06:38.565 --> 00:06:41.568 align:start position:25% line:-1
ローカル検証でもいいでしょう

00:06:41.668 --> 00:06:45.672 align:start position:32% line:-2
興味があれば昨年の
ビデオをご覧ください

00:06:45.772 --> 00:06:49.743 align:start position:23% line:-2
StoreKitのセッションで
ローカル検証の話をしています

00:06:50.310 --> 00:06:55.682 align:start position:18% line:-2
今日はApp Storeを使う検証に
焦点を当てます

00:06:56.250 --> 00:07:01.421 align:start position:27% line:-2
例に戻って
プロセスを見ていきましょう

00:06:56.250 --> 00:07:01.421 align:start position:27% line:-2
例に戻って
プロセスを見ていきましょう

00:07:01.889 --> 00:07:05.859 align:start position:23% line:-2
バンドル内の
レシートのURL APIを使い

00:07:05.959 --> 00:07:09.596 align:start position:27% line:-2
レシートデータに
オブザーバでアクセスします

00:07:09.930 --> 00:07:15.002 align:start position:27% line:-2
そこでファイル内の
バイナリデータを取得します

00:07:15.102 --> 00:07:18.939 align:start position:20% line:-2
receiptDataと
base64Encodeを取得して

00:07:19.039 --> 00:07:21.675 align:start position:27% line:-1
サーバに送信し 処理します

00:07:21.775 --> 00:07:25.746 align:start position:18% line:-2
ユーザのApp内ネットワークAPIを
提供してもよいでしょう

00:07:27.214 --> 00:07:31.552 align:start position:32% line:-2
処理用のデータ送信は
安全に行います

00:07:31.652 --> 00:07:36.323 align:start position:27% line:-2
トランザクション･
エンドポイントに送信すると

00:07:36.423 --> 00:07:41.295 align:start position:27% line:-2
このユーザIDが
自分のシステム上に現れます

00:07:41.795 --> 00:07:47.134 align:start position:18% line:-2
レシートデータをサーバに送ると
App Storeのエンドポイントに

00:07:47.234 --> 00:07:49.970 align:start position:25% line:-1
安全な接続が確立できるのです

00:07:50.070 --> 00:07:53.373 align:start position:21% line:-2
レシートデータが
App Storeに送信されると

00:07:53.740 --> 00:07:58.212 align:start position:21% line:-2
パスワードはApp Storeと
アプリケーションで共有され

00:07:58.312 --> 00:08:02.282 align:start position:14% line:-2
App Store Connectに設定
サーバに保存されます

00:07:58.312 --> 00:08:02.282 align:start position:14% line:-2
App Store Connectに設定
サーバに保存されます

00:08:03.116 --> 00:08:06.086 align:start position:27% line:-1
レシートデータを送信すると

00:08:06.186 --> 00:08:10.390 align:start position:27% line:-2
JSON形式のペイロードで
応答します

00:08:11.792 --> 00:08:16.964 align:start position:29% line:-2
トランザクションの検証時
ステータスを確認すると

00:08:17.231 --> 00:08:21.335 align:start position:27% line:-2
実際にAppleが
発行しているかが分かります

00:08:21.735 --> 00:08:24.104 align:start position:29% line:-1
ステータスが“０”なら―

00:08:24.204 --> 00:08:27.875 align:start position:30% line:-2
レシートのコンテンツを
確認できます

00:08:27.975 --> 00:08:32.246 align:start position:25% line:-2
これはレシート検証のため
復元されたバイナリデータです

00:08:32.346 --> 00:08:35.616 align:start position:29% line:-2
アプリケーションと
レシートのバンドルIDが

00:08:35.716 --> 00:08:38.818 align:start position:32% line:-1
一致するか確認します

00:08:39.052 --> 00:08:45.659 align:start position:29% line:-2
トランザクションの一覧で
App内の配列を調べます

00:08:45.759 --> 00:08:47.694 align:start position:25% line:-1
レシートのプロダクトIDが―

00:08:47.794 --> 00:08:51.865 align:start position:27% line:-2
アプリケーションと
関連づいているか検証します

00:08:52.533 --> 00:08:54.368 align:start position:32% line:-1
全て一致していたら―

00:08:54.468 --> 00:08:59.273 align:start position:30% line:-2
このユーザの定期購読を
認証できます

00:08:59.439 --> 00:09:04.344 align:start position:29% line:-2
３つ目のステップ
購読状態の更新に進みます

00:08:59.439 --> 00:09:04.344 align:start position:29% line:-2
３つ目のステップ
購読状態の更新に進みます

00:09:07.481 --> 00:09:13.620 align:start position:30% line:-2
各購読期間には開始日と
有効期限がありますが―

00:09:14.454 --> 00:09:19.960 align:start position:32% line:-2
レシートの検証で
有効期限が分かります

00:09:20.060 --> 00:09:24.865 align:start position:29% line:-2
トランザクションと応答を
解析すると―

00:09:24.965 --> 00:09:26.900 align:start position:29% line:-1
有効期限を見つけられます

00:09:27.701 --> 00:09:32.005 align:start position:34% line:-2
サーバに保存された
ユーザテーブルです

00:09:32.973 --> 00:09:37.244 align:start position:32% line:-2
トランザクションから
有効期限を取得し―

00:09:37.344 --> 00:09:40.848 align:start position:30% line:-2
サーバの特定のユーザに
追加します

00:09:40.948 --> 00:09:44.117 align:start position:27% line:-2
このユーザが
購読者かどうかにかかわらず

00:09:44.218 --> 00:09:47.487 align:start position:23% line:-2
サーバ上では
このソースがtrueとなります

00:09:48.355 --> 00:09:52.526 align:start position:25% line:-2
同時にオリジナルの
トランザクションIDを記録し

00:09:52.626 --> 00:09:56.930 align:start position:32% line:-2
このサーバに
保存しておきましょう

00:09:57.030 --> 00:10:00.100 align:start position:25% line:-1
後ほど この理由を説明します

00:09:57.030 --> 00:10:00.100 align:start position:25% line:-1
後ほど この理由を説明します

00:10:01.468 --> 00:10:06.974 align:start position:27% line:-2
２つの情報をサーバに保存し
最後のステップです

00:10:07.074 --> 00:10:11.578 align:start position:32% line:-2
無事に検証できたと
デバイスに通知します

00:10:11.979 --> 00:10:15.048 align:start position:34% line:-2
このコールバックを
デバイスが受け取り

00:10:15.148 --> 00:10:17.518 align:start position:7% line:-1
finishTransactionを呼び出します

00:10:18.252 --> 00:10:22.756 align:start position:23% line:-2
大事なのは ここでペイメントの
キューが消えることです

00:10:22.856 --> 00:10:25.692 align:start position:18% line:-2
finishTransactionを
呼び出さないと―

00:10:25.792 --> 00:10:27.828 align:start position:25% line:-1
次の起動時に再度 処理します

00:10:27.928 --> 00:10:31.398 align:start position:34% line:-2
トランザクションは
完了させましょう

00:10:32.833 --> 00:10:36.603 align:start position:32% line:-2
完了するとサーバの
購読状態が更新され―

00:10:36.703 --> 00:10:40.574 align:start position:27% line:-2
ユーザは購読期間中
サービスを利用できるのです

00:10:43.143 --> 00:10:47.114 align:start position:30% line:-2
さて サーバに保存した
ユーザテーブルの話です

00:10:47.815 --> 00:10:50.284 align:start position:25% line:-1
定期購読を購入したユーザには

00:10:50.384 --> 00:10:54.588 align:start position:30% line:-2
トランザクションIDが
割り当てられます

00:10:54.688 --> 00:10:56.590 align:start position:34% line:-1
それを保存しました

00:10:56.924 --> 00:11:00.460 align:start position:27% line:-2
この識別子が
サブスクリプションIDです

00:10:56.924 --> 00:11:00.460 align:start position:27% line:-2
この識別子が
サブスクリプションIDです

00:11:01.261 --> 00:11:05.032 align:start position:30% line:-2
更新時に必ず表示される
重要なものです

00:11:05.132 --> 00:11:07.100 align:start position:34% line:-1
仕組みを見ましょう

00:11:07.201 --> 00:11:09.536 align:start position:29% line:-1
更新を検証するとしたら―

00:11:09.636 --> 00:11:14.107 align:start position:29% line:-2
トランザクション･
エンドポイントで行います

00:11:14.675 --> 00:11:19.046 align:start position:34% line:-2
トランザクションが
有効か検証し―

00:11:19.146 --> 00:11:22.482 align:start position:25% line:-1
ユーザの購読状態を更新します

00:11:22.583 --> 00:11:27.120 align:start position:27% line:-2
更新なので 過去の複数の
トランザクションがあります

00:11:27.955 --> 00:11:33.227 align:start position:25% line:-2
既存のサーバ側のロジックでは
有効期限が過ぎていました

00:11:33.327 --> 00:11:39.700 align:start position:27% line:-2
そこで現在も購読しているか
レシートデータを確認します

00:11:40.100 --> 00:11:44.438 align:start position:34% line:-2
レシートデータから
判断する方法は？

00:11:45.038 --> 00:11:49.610 align:start position:29% line:-2
オリジナルの
トランザクションIDの―

00:11:49.710 --> 00:11:52.579 align:start position:23% line:-1
トランザクションを呼び出します

00:11:53.347 --> 00:11:57.117 align:start position:23% line:-1
その最新の有効期限で確認します

00:11:57.217 --> 00:12:02.089 align:start position:34% line:-2
日付が過ぎていたら
確かに期限切れです

00:11:57.217 --> 00:12:02.089 align:start position:34% line:-2
日付が過ぎていたら
確かに期限切れです

00:12:02.189 --> 00:12:07.761 align:start position:29% line:-2
未来の日付になっていたら
購読期間内です

00:12:08.395 --> 00:12:11.532 align:start position:34% line:-1
例で見てみましょう

00:12:13.367 --> 00:12:16.670 align:start position:29% line:-2
オリジナルの
トランザクションIDと―

00:12:16.837 --> 00:12:20.274 align:start position:23% line:-1
トランザクションを取り出します

00:12:20.774 --> 00:12:26.079 align:start position:32% line:-2
有効期限をソートして
最新の日付を見て―

00:12:26.180 --> 00:12:31.919 align:start position:27% line:-2
サーバ上の最新の有効期限の
フィールドを更新します

00:12:32.553 --> 00:12:37.291 align:start position:30% line:-2
これでユーザの
購読期間が延長されて―

00:12:37.391 --> 00:12:41.061 align:start position:27% line:-2
サーバ側でも購読が有効だと
確認できます

00:12:41.828 --> 00:12:44.198 align:start position:23% line:-1
StoreKitで更新する時も

00:12:44.298 --> 00:12:49.369 align:start position:27% line:-2
検証できたことをデバイスに
通知する必要があります

00:12:49.469 --> 00:12:53.907 align:start position:11% line:-2
アプリケーションがStoreKitに
finishTransactionを出します

00:12:57.377 --> 00:13:00.147 align:start position:29% line:-1
正常に動作できたとします

00:12:57.377 --> 00:13:00.147 align:start position:29% line:-1
正常に動作できたとします

00:13:00.514 --> 00:13:04.184 align:start position:20% line:-1
App Storeはカードに請求し

00:13:04.284 --> 00:13:07.654 align:start position:25% line:-2
StoreKitが
トランザクションを開始します

00:13:07.754 --> 00:13:12.392 align:start position:32% line:-2
そしてサーバが最新の
有効期限に更新します

00:13:12.492 --> 00:13:17.030 align:start position:25% line:-2
購読状態にかかわらず
サーバ側はtrueとなります

00:13:17.698 --> 00:13:22.202 align:start position:27% line:-2
ウェブサイトでも
サービス提供している場合は

00:13:22.302 --> 00:13:23.704 align:start position:38% line:-1
もっと複雑です

00:13:24.271 --> 00:13:27.941 align:start position:29% line:-2
ユーザがウェブサイトから
アクセスすると―

00:13:28.041 --> 00:13:31.745 align:start position:23% line:-1
有効期限で購読中だと分かります

00:13:32.613 --> 00:13:36.984 align:start position:30% line:-2
常にアプリケーションを
使ってほしいですが―

00:13:37.217 --> 00:13:39.353 align:start position:30% line:-2
あまり使われていないと
しましょう

00:13:39.553 --> 00:13:44.658 align:start position:27% line:-2
一方でApp Storeが
購読状態を更新したとします

00:13:45.192 --> 00:13:48.495 align:start position:30% line:-2
ユーザがウェブサイトに
アクセスした時―

00:13:48.595 --> 00:13:53.267 align:start position:30% line:-2
サーバが認識せず
有効期限が古いままです

00:13:53.367 --> 00:13:57.604 align:start position:30% line:-2
ではトランザクションを
サーバが把握するには？

00:14:00.107 --> 00:14:06.146 align:start position:27% line:-2
ステータスポーリングを使い
直接 サーバから確認します

00:14:06.446 --> 00:14:10.617 align:start position:32% line:-2
実装するには
各ユーザに関連する―

00:14:10.717 --> 00:14:15.956 align:start position:27% line:-2
暗号化したレシートデータの
最新バージョンを保存します

00:14:16.256 --> 00:14:20.294 align:start position:29% line:-2
暗号化したデータは
トークンのように扱います

00:14:20.594 --> 00:14:27.067 align:start position:27% line:-2
暗号化したレシートデータを
送信するたび―

00:14:27.167 --> 00:14:31.605 align:start position:27% line:-2
復元したレシートデータで
応答するだけではありません

00:14:31.705 --> 00:14:37.444 align:start position:29% line:-2
新しいトランザクションが
含まれているのです

00:14:37.678 --> 00:14:41.882 align:start position:11% line:-2
それはlatest receipt info
フィールドにあります

00:14:42.816 --> 00:14:45.953 align:start position:32% line:-2
アプリケーションを
起動しないユーザの―

00:14:46.053 --> 00:14:49.256 align:start position:30% line:-2
購読期間のアンロックに
この情報が使われます

00:14:50.057 --> 00:14:51.191 align:start position:38% line:-1
見てみましょう

00:14:51.291 --> 00:14:55.863 align:start position:29% line:-2
先ほどのように
トランザクションの検証で

00:14:56.663 --> 00:15:02.302 align:start position:29% line:-2
レシートデータを送信して
無事に検証できました

00:14:56.663 --> 00:15:02.302 align:start position:29% line:-2
レシートデータを送信して
無事に検証できました

00:15:02.402 --> 00:15:08.575 align:start position:23% line:-2
最新レシートデータがサーバ内の
ユーザ情報に保存されます

00:15:09.510 --> 00:15:15.182 align:start position:18% line:-2
これがユーザの
base64Encodeの文字列です

00:15:15.282 --> 00:15:21.121 align:start position:27% line:-2
購読がアクティブか知るには
最新のレシートデータを―

00:15:21.221 --> 00:15:24.858 align:start position:25% line:-2
サーバから取り出し
App Storeへ送ります

00:15:25.259 --> 00:15:29.730 align:start position:27% line:-2
古いトランザクションを省く
フラグも立てましょう

00:15:29.830 --> 00:15:33.567 align:start position:29% line:-1
レシート検証で必要なのは

00:15:33.667 --> 00:15:36.537 align:start position:23% line:-1
新しいトランザクションだけです

00:15:37.337 --> 00:15:42.910 align:start position:23% line:-2
レシート検証では
最新のレシート情報に応答します

00:15:43.010 --> 00:15:48.749 align:start position:27% line:-2
レシートデータ生成前の
新しいトランザクションです

00:15:48.882 --> 00:15:54.822 align:start position:27% line:-2
最新のレシート情報の応答で
直接 有効期限を取得して

00:15:55.289 --> 00:16:00.694 align:start position:32% line:-2
ユーザ情報を更新し
購読期間を延長します

00:15:55.289 --> 00:16:00.694 align:start position:32% line:-2
ユーザ情報を更新し
購読期間を延長します

00:16:00.794 --> 00:16:05.165 align:start position:27% line:-2
ウェブサイトでアクセスする
ユーザも―

00:16:05.265 --> 00:16:10.037 align:start position:29% line:-2
アプリケーションを使わず
購読を延長できました

00:16:11.305 --> 00:16:17.144 align:start position:21% line:-2
前述のユーザが
アプリケーションを再び起動すると

00:16:17.244 --> 00:16:21.682 align:start position:23% line:-2
トランザクションが
StoreKitで開始されます

00:16:21.782 --> 00:16:24.284 align:start position:27% line:-1
こうしたトランザクションを

00:16:24.518 --> 00:16:28.922 align:start position:29% line:-2
検証し 完了させることが
必要となるのです

00:16:29.022 --> 00:16:32.392 align:start position:30% line:-2
ステータスポーリングを
実施済みだとしてもです

00:16:33.560 --> 00:16:36.663 align:start position:29% line:-1
最新のレシートデータを―

00:16:36.763 --> 00:16:40.267 align:start position:27% line:-2
サーバに保存する機会として
使いましょう

00:16:44.304 --> 00:16:48.509 align:start position:27% line:-2
ステータスポーリングは
カード請求の時に役立ちます

00:16:48.675 --> 00:16:53.614 align:start position:30% line:-2
しかし 購読期間中に
請求で問題が起きたら―

00:16:53.714 --> 00:16:57.818 align:start position:21% line:-2
App Storeは次回購読分を
請求できません

00:16:57.985 --> 00:17:00.787 align:start position:27% line:-1
ユーザは購読できないまま？

00:16:57.985 --> 00:17:00.787 align:start position:27% line:-1
ユーザは購読できないまま？

00:17:01.555 --> 00:17:02.389 align:start position:45% line:-1
いいえ

00:17:03.190 --> 00:17:06.359 align:start position:29% line:-1
３つのステップがあります

00:17:06.460 --> 00:17:10.030 align:start position:29% line:-2
１つ目はユーザの
トランザクションがなく―

00:17:10.130 --> 00:17:13.233 align:start position:30% line:-1
購読の失効を確認します

00:17:13.733 --> 00:17:19.039 align:start position:27% line:-2
２つ目は支払い情報の更新を
ユーザに促します

00:17:19.906 --> 00:17:23.743 align:start position:29% line:-2
３つ目は新たな
トランザクションがあれば

00:17:23.844 --> 00:17:26.646 align:start position:27% line:-1
即座にブロックを解除します

00:17:27.281 --> 00:17:31.885 align:start position:23% line:-2
１と２はステータスポーリングの
技術を使います

00:17:31.985 --> 00:17:37.824 align:start position:14% line:-2
３つ目はserver-to-server
notificationを使います

00:17:38.392 --> 00:17:40.194 align:start position:34% line:-1
例を見てみましょう

00:17:40.294 --> 00:17:45.232 align:start position:27% line:-2
購読期間中 カード請求時に
エラーが出たのですが

00:17:46.333 --> 00:17:51.438 align:start position:29% line:-2
トランザクションがないと
確認できました

00:17:52.105 --> 00:17:56.977 align:start position:25% line:-2
サーバは このユーザの購読が
失効していると判断します

00:17:57.077 --> 00:18:01.515 align:start position:29% line:-2
ユーザがアクセスすると
エラーメッセージが出て―

00:17:57.077 --> 00:18:01.515 align:start position:29% line:-2
ユーザがアクセスすると
エラーメッセージが出て―

00:18:01.615 --> 00:18:04.418 align:start position:23% line:-1
更新できなかったと通知されます

00:18:04.718 --> 00:18:08.956 align:start position:21% line:-2
App Storeで支払い情報を
更新するよう案内します

00:18:09.456 --> 00:18:15.462 align:start position:29% line:-2
支払い情報が更新されたら
２つのことが起こります

00:18:15.896 --> 00:18:21.668 align:start position:23% line:-2
まずApp Storeが請求し
トランザクションに成功

00:18:21.768 --> 00:18:26.573 align:start position:32% line:-2
次に更新が成功したら
直接 サーバに―

00:18:26.673 --> 00:18:29.943 align:start position:23% line:-1
HTTP POSTを送信します

00:18:30.043 --> 00:18:33.480 align:start position:23% line:-1
新しいトランザクションの情報が

00:18:33.580 --> 00:18:36.750 align:start position:21% line:-1
POSTのペイロードに含まれます

00:18:37.017 --> 00:18:40.354 align:start position:27% line:-2
オリジナルの
トランザクションIDから―

00:18:40.454 --> 00:18:42.956 align:start position:29% line:-1
通知が誰のものか捜します

00:18:43.323 --> 00:18:47.661 align:start position:29% line:-2
ユーザを特定したら
最新の有効期限を取得し―

00:18:47.761 --> 00:18:52.833 align:start position:27% line:-2
それを更新した後
次回の購読期間を付与します

00:18:53.367 --> 00:18:58.071 align:start position:23% line:-2
ユーザがApp Storeから
通知を受け取ると即座に―

00:18:58.505 --> 00:19:04.578 align:start position:34% line:-2
ユーザのアクセスが
アンロックされます

00:18:58.505 --> 00:19:04.578 align:start position:34% line:-2
ユーザのアクセスが
アンロックされます

00:19:05.946 --> 00:19:10.050 align:start position:27% line:-2
すぐにアンロックすることが
とても重要です

00:19:10.217 --> 00:19:15.522 align:start position:27% line:-2
ユーザは手動で情報を更新し
待っているからです

00:19:15.622 --> 00:19:21.728 align:start position:21% line:-2
ただしnotificationは
購読失効の場合のみです

00:19:22.062 --> 00:19:25.265 align:start position:29% line:-1
更新の成功を確認するには

00:19:25.365 --> 00:19:28.035 align:start position:23% line:-1
ステータスポーリングを使います

00:19:28.602 --> 00:19:31.772 align:start position:0% line:-2
server-to-server notificationは
簡単です

00:19:31.872 --> 00:19:35.008 align:start position:18% line:-2
App Store Connectに
URLを入力するだけ

00:19:35.275 --> 00:19:39.413 align:start position:18% line:-2
App Store Connectに
登録すると―

00:19:39.513 --> 00:19:44.351 align:start position:18% line:-2
App Storeはステータス変更の
HTTPS POSTを送信します

00:19:44.451 --> 00:19:50.157 align:start position:29% line:-2
最新のトランザクションが
含まれるので―

00:19:50.624 --> 00:19:53.961 align:start position:32% line:-2
サーバのATS対応を
確認してください

00:19:54.061 --> 00:19:58.632 align:start position:27% line:-2
これだけでユーザに
よりよい体験を提供できます

00:20:02.402 --> 00:20:06.940 align:start position:30% line:-2
サーバアーキテクチャの
構築のヒントでした

00:20:07.040 --> 00:20:12.980 align:start position:27% line:-2
次にユーザ体験を向上する
３つのヒントをお話しします

00:20:13.514 --> 00:20:18.852 align:start position:27% line:-2
まず ユーザがアカウントに
サインインしているとします

00:20:19.753 --> 00:20:25.626 align:start position:27% line:-2
サブスクリプションIDを
記録するテーブルが必要です

00:20:25.726 --> 00:20:32.132 align:start position:27% line:-2
アカウントが作られる前の
App内課金をお薦めします

00:20:32.633 --> 00:20:35.636 align:start position:32% line:-2
初回起動時に
定期購読を購入すれば

00:20:35.736 --> 00:20:40.541 align:start position:27% line:-2
ユーザはすぐにコンテンツを
体験できるからです

00:20:40.641 --> 00:20:43.143 align:start position:30% line:-1
顧客転換率も上がります

00:20:43.243 --> 00:20:48.549 align:start position:27% line:-2
ユーザが支払いのために
諸々 入力しなくて済みます

00:20:49.283 --> 00:20:54.621 align:start position:29% line:-2
匿名アカウントを使って
この技術を見てみましょう

00:20:55.689 --> 00:21:01.595 align:start position:25% line:-2
トランザクションIDで
複数のデバイスに対応できます

00:20:55.689 --> 00:21:01.595 align:start position:25% line:-2
トランザクションIDで
複数のデバイスに対応できます

00:21:02.463 --> 00:21:07.234 align:start position:27% line:-2
このように匿名アカウントを
使っているなら

00:21:07.334 --> 00:21:11.839 align:start position:32% line:-2
アカウント作成時に
非匿名化で対応します

00:21:11.939 --> 00:21:16.443 align:start position:29% line:-2
ここでメールフィールドや
他の情報を更新します

00:21:17.978 --> 00:21:19.179 align:start position:34% line:-1
これがヒント１です

00:21:19.279 --> 00:21:22.149 align:start position:20% line:-1
ヒント２はApp内課金を売る時です

00:21:22.249 --> 00:21:27.421 align:start position:27% line:-2
昨年ローンチした
お試し価格の機能が使えます

00:21:27.888 --> 00:21:30.357 align:start position:30% line:-1
お試し価格を使う場合―

00:21:30.457 --> 00:21:35.629 align:start position:29% line:-2
実行時に ユーザが対象か
判断する必要があります

00:21:35.729 --> 00:21:39.967 align:start position:29% line:-2
ユーザによって
通常価格を提供するのか―

00:21:40.067 --> 00:21:45.606 align:start position:29% line:-2
入り口としてお試し価格を
提供するのか 判断します

00:21:46.340 --> 00:21:48.675 align:start position:27% line:-1
トランザクションを監視して

00:21:48.776 --> 00:21:53.146 align:start position:25% line:-1
その判断をすることになります

00:21:53.480 --> 00:21:59.486 align:start position:30% line:-2
ある２つのフィールドに
注目して検証しましょう

00:21:59.720 --> 00:22:04.424 align:start position:4% line:-2
is trial periodと
is in intro offer periodです

00:21:59.720 --> 00:22:04.424 align:start position:4% line:-2
is trial periodと
is in intro offer periodです

00:22:04.525 --> 00:22:09.029 align:start position:27% line:-2
どちらかがtrueであれば
お試し価格や―

00:22:09.129 --> 00:22:12.099 align:start position:25% line:-1
無料トライアルは使用済みです

00:22:12.633 --> 00:22:17.604 align:start position:29% line:-2
ユーザのプロダクトIDを
記録したら―

00:22:17.704 --> 00:22:20.974 align:start position:5% line:-2
consumedProductDiscountsに
保存します

00:22:21.642 --> 00:22:27.247 align:start position:30% line:-2
どの製品がお試し価格で
使われたか記録するのは

00:22:27.347 --> 00:22:31.552 align:start position:34% line:-2
新しい購読製品を
提供したい場合です

00:22:31.919 --> 00:22:35.222 align:start position:5% line:-2
consumedProductDiscountsを
取得し―

00:22:35.322 --> 00:22:39.860 align:start position:9% line:-1
SKProductsRequestを実行します

00:22:39.960 --> 00:22:43.864 align:start position:25% line:-2
iOS 12に購読グループが
包括されていて―

00:22:43.964 --> 00:22:49.603 align:start position:27% line:-2
どのグループがどの製品を
使用しているか分かるのです

00:22:49.937 --> 00:22:52.673 align:start position:29% line:-1
購読グループの識別子で―

00:22:52.773 --> 00:22:57.744 align:start position:29% line:-2
特定のユーザが割引を
受けているか記録できます

00:22:57.844 --> 00:23:01.849 align:start position:27% line:-2
どの購読グループがお試しを
利用済みか分かります

00:22:57.844 --> 00:23:01.849 align:start position:27% line:-2
どの購読グループがお試しを
利用済みか分かります

00:23:02.849 --> 00:23:07.488 align:start position:27% line:-2
簡単な確認で
製品Ａの価格を決められます

00:23:07.588 --> 00:23:11.792 align:start position:32% line:-2
割引消費グループの
ユーザリストを見て―

00:23:11.892 --> 00:23:15.262 align:start position:30% line:-2
製品Ａの識別子を含むか
確認します

00:23:15.362 --> 00:23:20.300 align:start position:29% line:-2
含まれていれば
お試しを利用済みなので―

00:23:20.400 --> 00:23:24.104 align:start position:32% line:-2
このユーザには
通常価格を適用します

00:23:24.271 --> 00:23:27.241 align:start position:34% line:-2
含まれていなければ
お試し対象なので―

00:23:27.341 --> 00:23:31.545 align:start position:21% line:-2
SKProductObjectの
お試し価格を適用します

00:23:32.546 --> 00:23:39.219 align:start position:30% line:-2
App内課金で 既に
使われている技術なので

00:23:39.319 --> 00:23:44.191 align:start position:29% line:-2
深く話しませんが
ぜひビデオをご覧ください

00:23:44.291 --> 00:23:47.761 align:start position:32% line:-2
この価格設定について
お話ししています

00:23:48.195 --> 00:23:53.233 align:start position:7% line:-2
“What's New in App Store
Connect”にもご参加ください

00:23:53.333 --> 00:23:55.369 align:start position:30% line:-1
水曜の午後５時からです

00:23:57.171 --> 00:23:58.939 align:start position:34% line:-1
以上がヒント２です

00:23:59.039 --> 00:24:02.142 align:start position:30% line:-1
ヒント３は購読管理です

00:23:59.039 --> 00:24:02.142 align:start position:30% line:-1
ヒント３は購読管理です

00:24:03.043 --> 00:24:08.248 align:start position:29% line:-2
アップグレードと
ダウングレードの案内には

00:24:08.482 --> 00:24:12.119 align:start position:32% line:-2
初回の定期購読と
同じ仕組みが使えます

00:24:13.320 --> 00:24:17.124 align:start position:32% line:-2
売りたいサービスは
購読グループの一部で

00:24:17.224 --> 00:24:20.661 align:start position:29% line:-2
ユーザが購読中のものとは
異なるとしましょう

00:24:20.761 --> 00:24:25.966 align:start position:21% line:-2
初回の購読販売と同様に
SKPaymentを作成すると―

00:24:26.066 --> 00:24:30.437 align:start position:21% line:-2
StoreKitがアップグレード
ダウングレードを処理します

00:24:30.637 --> 00:24:33.740 align:start position:29% line:-2
そのためユーザが二重に
購読する心配がありません

00:24:34.341 --> 00:24:38.345 align:start position:32% line:-2
このために別のUIを
用意したくない時は―

00:24:38.445 --> 00:24:41.982 align:start position:23% line:-2
App Storeの購読管理へ
リンクできます

00:24:42.082 --> 00:24:45.853 align:start position:34% line:-2
App内から直接
飛べる画面があり―

00:24:45.953 --> 00:24:49.456 align:start position:32% line:-2
アップグレードなどの
管理ができます

00:24:50.257 --> 00:24:55.162 align:start position:27% line:-2
ユーザが定期購読を管理する
入り口となるので―

00:24:55.262 --> 00:25:00.767 align:start position:29% line:-2
ぜひApp内に購読管理の
リンクを貼りましょう

00:24:55.262 --> 00:25:00.767 align:start position:29% line:-2
ぜひApp内に購読管理の
リンクを貼りましょう

00:25:01.435 --> 00:25:05.505 align:start position:21% line:-2
「In App Purchase
プログラミングガイド」に

00:25:05.739 --> 00:25:07.875 align:start position:27% line:-1
このリンクが書かれています

00:25:09.109 --> 00:25:14.681 align:start position:27% line:-2
定期購読のユーザ体験を
向上させる簡単な技術でした

00:25:14.781 --> 00:25:20.220 align:start position:27% line:-2
次はマイケルから解約率を
下げる方法について話します

00:25:20.320 --> 00:25:21.221 align:start position:41% line:-1
ありがとう

00:25:21.321 --> 00:25:25.492 align:start position:43% line:-1
(拍手)

00:25:29.496 --> 00:25:31.865 align:start position:30% line:-2
こんにちは
僕はマイケル･ガーガス

00:25:31.965 --> 00:25:35.035 align:start position:18% line:-1
App Storeの技術普及担当です

00:25:35.469 --> 00:25:38.005 align:start position:29% line:-1
購読解約を減らすための―

00:25:38.105 --> 00:25:43.043 align:start position:29% line:-2
App内での施策について
お話しします

00:25:44.845 --> 00:25:51.185 align:start position:32% line:-2
非自発的な解約と
自発的な解約があり―

00:25:51.285 --> 00:25:56.390 align:start position:29% line:-2
失うかもしれない購読者を
取り戻す方法もあります

00:25:57.691 --> 00:26:00.928 align:start position:34% line:-2
非自発的な解約から
お話ししましょう

00:25:57.691 --> 00:26:00.928 align:start position:34% line:-2
非自発的な解約から
お話ししましょう

00:26:01.395 --> 00:26:07.267 align:start position:32% line:-2
非自発的な解約は
請求の問題が原因です

00:26:08.502 --> 00:26:10.270 align:start position:34% line:-1
昨年のWWDCで―

00:26:10.370 --> 00:26:16.009 align:start position:25% line:-2
非自発的な解約を減らす施策を
お話ししました

00:26:16.310 --> 00:26:18.779 align:start position:18% line:-2
Billing Retryサービスが
新しくなり―

00:26:18.879 --> 00:26:23.517 align:start position:29% line:-2
再請求期間を24時間から
60日間に延ばしました

00:26:24.017 --> 00:26:26.553 align:start position:32% line:-1
新しい再請求戦略で―

00:26:26.653 --> 00:26:31.058 align:start position:32% line:-2
時間をかけて
購読数を取り戻します

00:26:32.059 --> 00:26:35.963 align:start position:30% line:-2
2017年７月13日は
記念すべき日です

00:26:36.063 --> 00:26:41.468 align:start position:20% line:-2
この日 Appleは購読数の回復に
取り組み始めました

00:26:43.771 --> 00:26:46.840 align:start position:29% line:-1
再請求をローンチしてから

00:26:46.940 --> 00:26:50.410 align:start position:25% line:-1
再開率は倍以上になっています

00:26:51.245 --> 00:26:56.617 align:start position:27% line:-2
非自発的な解約は
２パーセント減となりました

00:26:56.717 --> 00:27:01.889 align:start position:43% line:-1
(拍手)

00:26:56.717 --> 00:27:01.889 align:start position:43% line:-1
(拍手)

00:27:02.923 --> 00:27:06.793 align:start position:36% line:-2
我々の取り組みの
影響を見てみます

00:27:06.894 --> 00:27:09.196 align:start position:29% line:-1
四半期ごとの数値ですが―

00:27:09.296 --> 00:27:13.767 align:start position:36% line:-2
定期購読の再開が
増え続けています

00:27:15.502 --> 00:27:18.005 align:start position:32% line:-1
これを実数にすると―

00:27:18.105 --> 00:27:22.976 align:start position:32% line:-2
実に1200万人が
再請求で再開しました

00:27:23.076 --> 00:27:26.947 align:start position:43% line:-1
(拍手)

00:27:27.114 --> 00:27:30.417 align:start position:25% line:-1
非自発的な解約が減っています

00:27:30.851 --> 00:27:33.487 align:start position:29% line:-1
しかし デベロッパとして

00:27:33.587 --> 00:27:37.691 align:start position:32% line:-2
アプリケーションでの
戦略もあります

00:27:38.358 --> 00:27:43.063 align:start position:29% line:-2
ピートが話したレシートを
活用します

00:27:43.497 --> 00:27:46.967 align:start position:27% line:-1
猶予期間を設け その間に―

00:27:47.067 --> 00:27:50.370 align:start position:25% line:-1
効果的なメッセージを流します

00:27:51.038 --> 00:27:53.740 align:start position:34% line:-1
例を見てみましょう

00:27:54.341 --> 00:27:58.645 align:start position:29% line:-2
この購読は
４月26日に更新されます

00:27:58.745 --> 00:28:01.782 align:start position:23% line:-1
しかし 請求で問題がありました

00:27:58.745 --> 00:28:01.782 align:start position:23% line:-1
しかし 請求で問題がありました

00:28:02.483 --> 00:28:04.751 align:start position:30% line:-1
Appleが積極的に―

00:28:04.852 --> 00:28:09.623 align:start position:14% line:-2
Billing Retryサービスを使い
ユーザに支払いを促します

00:28:09.723 --> 00:28:15.896 align:start position:27% line:-2
JSON応答のフィールドに
再請求期間を出します

00:28:15.996 --> 00:28:21.268 align:start position:25% line:-2
値“１”は 購読者に
請求していることを意味します

00:28:23.403 --> 00:28:28.141 align:start position:23% line:-2
先ほどの例を見ると
JSON応答に追加されています

00:28:28.609 --> 00:28:31.512 align:start position:29% line:-1
有効期限と連携しており―

00:28:31.612 --> 00:28:36.150 align:start position:29% line:-2
デベロッパへの
猶予期間を設ける合図です

00:28:37.284 --> 00:28:39.820 align:start position:38% line:-1
猶予期間とは？

00:28:42.723 --> 00:28:47.194 align:start position:32% line:-2
再請求中でも
アクセスできる期間で

00:28:47.294 --> 00:28:51.565 align:start position:30% line:-2
定期購読を解約する前の
期間のことです

00:28:52.032 --> 00:28:54.902 align:start position:27% line:-1
この目的は再開率の向上です

00:28:55.669 --> 00:29:00.140 align:start position:32% line:-2
レシートをどのように
活用するか見てみます

00:28:55.669 --> 00:29:00.140 align:start position:32% line:-2
レシートをどのように
活用するか見てみます

00:29:00.874 --> 00:29:03.177 align:start position:36% line:-1
例の定期購読は―

00:29:03.277 --> 00:29:08.448 align:start position:29% line:-2
再請求状態にあり
４月26日で更新されます

00:29:09.249 --> 00:29:13.453 align:start position:25% line:-2
有効期限フィールドに
サーバ側のロジックを追加し―

00:29:13.554 --> 00:29:19.793 align:start position:29% line:-2
再請求期間を
例えば３日間 延ばします

00:29:19.893 --> 00:29:25.099 align:start position:30% line:-2
ユーザはその期間も
サービスが使えるのです

00:29:27.067 --> 00:29:29.203 align:start position:32% line:-1
なぜ こんなことを？

00:29:29.303 --> 00:29:33.073 align:start position:27% line:-2
顧客に効果的なメッセージを
配信し―

00:29:33.173 --> 00:29:39.179 align:start position:27% line:-2
適切なコミュニケーションで
請求の問題を伝えます

00:29:39.813 --> 00:29:43.517 align:start position:32% line:-1
支払い方法の更新や―

00:29:43.617 --> 00:29:48.789 align:start position:30% line:-2
購読商品の価値を
見直してもらうためです

00:29:49.356 --> 00:29:52.493 align:start position:34% line:-2
閲覧はできるが
体験できないなど―

00:29:52.593 --> 00:29:56.163 align:start position:21% line:-1
限定的なサービスの提供もできます

00:29:58.265 --> 00:30:01.869 align:start position:30% line:-2
これは定期購読Appの
“PEAK”です

00:29:58.265 --> 00:30:01.869 align:start position:30% line:-2
これは定期購読Appの
“PEAK”です

00:30:02.503 --> 00:30:05.272 align:start position:29% line:-1
再請求フィールドを改良し

00:30:05.372 --> 00:30:11.678 align:start position:30% line:-2
購読に問題があることを
適切に通知しています

00:30:12.446 --> 00:30:13.781 align:start position:34% line:-1
これが通知ですが―

00:30:13.881 --> 00:30:19.753 align:start position:27% line:-2
問題点と解決法を
分かりやすく知らせています

00:30:21.422 --> 00:30:26.293 align:start position:27% line:-2
さらに この画面から
支払い情報の更新に進めれば

00:30:26.393 --> 00:30:29.496 align:start position:34% line:-1
より効果的でしょう

00:30:30.664 --> 00:30:36.069 align:start position:29% line:-2
今年のWWDCの後に
２つのURLを発表します

00:30:36.203 --> 00:30:39.439 align:start position:34% line:-2
支払い情報の
更新へのリンクと―

00:30:39.540 --> 00:30:44.978 align:start position:30% line:-2
アップグレードなどの
購読管理へのリンクです

00:30:45.078 --> 00:30:49.316 align:start position:43% line:-1
(拍手)

00:30:51.084 --> 00:30:56.323 align:start position:30% line:-2
では いつ購読の再開を
確認できるのでしょうか

00:30:56.890 --> 00:31:00.160 align:start position:25% line:-1
再開したユーザのほとんどが―

00:30:56.890 --> 00:31:00.160 align:start position:25% line:-1
再開したユーザのほとんどが―

00:31:00.260 --> 00:31:04.164 align:start position:30% line:-2
再請求になって
１週間で再開しています

00:31:06.200 --> 00:31:12.372 align:start position:25% line:-2
ほぼ自発的に再開しているので
閲覧制限なしでいいでしょう

00:31:14.007 --> 00:31:17.411 align:start position:29% line:-2
猶予期間の終わりにかけて
通知し―

00:31:17.511 --> 00:31:21.815 align:start position:29% line:-2
ゆっくり構えている顧客に
再開を促しましょう

00:31:24.451 --> 00:31:26.753 align:start position:29% line:-1
例の購読を見てみましょう

00:31:27.321 --> 00:31:31.592 align:start position:29% line:-2
効果が出て
顧客が再開したとしたら？

00:31:33.126 --> 00:31:35.462 align:start position:32% line:-1
再請求が成功したら―

00:31:35.629 --> 00:31:40.667 align:start position:27% line:-2
再請求日または再開日が
新しい購読開始日となります

00:31:40.767 --> 00:31:46.340 align:start position:29% line:-2
トランザクションが成功し
完了になります

00:31:47.941 --> 00:31:52.579 align:start position:16% line:-2
続けてserver-to-server
notificationを配置し―

00:31:52.679 --> 00:31:56.383 align:start position:36% line:-2
即座にアクセスを
アンロックします

00:31:56.483 --> 00:32:00.521 align:start position:27% line:-2
再請求が止まり
設定が完了したと知らせます

00:31:56.483 --> 00:32:00.521 align:start position:27% line:-2
再請求が止まり
設定が完了したと知らせます

00:32:02.523 --> 00:32:08.362 align:start position:27% line:-2
非自発的な解約は
ユーザの意志ではありません

00:32:09.696 --> 00:32:11.465 align:start position:36% line:-1
自発的な解約は？

00:32:12.432 --> 00:32:17.237 align:start position:34% line:-2
ユーザの意志による
購読の失効です

00:32:17.371 --> 00:32:20.274 align:start position:29% line:-1
キャンセルか返金要求です

00:32:20.741 --> 00:32:25.812 align:start position:27% line:-2
はっきり言います
ユーザの意志による解約です

00:32:26.847 --> 00:32:32.453 align:start position:32% line:-2
では自発的な解約を
減らすための戦略は？

00:32:33.353 --> 00:32:37.024 align:start position:27% line:-2
先ほど話した
ステータスポーリングを使い

00:32:37.124 --> 00:32:40.027 align:start position:29% line:-1
鍵となる情報を得るのです

00:32:40.594 --> 00:32:43.230 align:start position:36% line:-2
その情報を基に
ユーザに対して―

00:32:43.330 --> 00:32:48.135 align:start position:30% line:-2
魅力的な選択肢を提供し
解約を食い止めましょう

00:32:51.104 --> 00:32:54.007 align:start position:21% line:-1
ステータスポーリングの話をします

00:32:55.142 --> 00:32:58.612 align:start position:14% line:-2
server-to-server
notificationが発表されても―

00:32:58.712 --> 00:33:01.849 align:start position:27% line:-2
ステータスポーリングを使う
理由は２つです

00:32:58.712 --> 00:33:01.849 align:start position:27% line:-2
ステータスポーリングを使う
理由は２つです

00:33:03.217 --> 00:33:09.056 align:start position:30% line:-2
１つ目は
解約者の購読期間の把握

00:33:09.523 --> 00:33:12.493 align:start position:30% line:-2
２つ目は
購読者の更新の把握です

00:33:14.261 --> 00:33:19.633 align:start position:29% line:-2
ステータスポーリングで
いつ ユーザ情報をつかみ

00:33:19.867 --> 00:33:22.002 align:start position:25% line:-1
購読状態を確認すればいいのか

00:33:23.570 --> 00:33:25.739 align:start position:32% line:-1
最も効果的な時期は―

00:33:25.839 --> 00:33:29.877 align:start position:29% line:-1
購読期間の最初と最後です

00:33:30.144 --> 00:33:34.648 align:start position:27% line:-2
ステータスポーリングで
解約しそうなユーザの情報を

00:33:35.048 --> 00:33:38.352 align:start position:27% line:-1
得られる可能性が高いのです

00:33:40.888 --> 00:33:45.893 align:start position:25% line:-2
ステータスポーリングでは
他の情報にもアクセスできます

00:33:46.927 --> 00:33:52.099 align:start position:23% line:-2
データベースのユーザテーブルに
verifyReceiptで

00:33:52.432 --> 00:33:54.668 align:start position:21% line:-1
復元したJSON応答を保存します

00:33:55.469 --> 00:33:58.906 align:start position:29% line:-1
またはセグメント化のため

00:33:59.073 --> 00:34:02.443 align:start position:30% line:-2
特定の情報を
確認することもできます

00:33:59.073 --> 00:34:02.443 align:start position:30% line:-2
特定の情報を
確認することもできます

00:34:02.543 --> 00:34:06.480 align:start position:29% line:-2
再請求状態にあるかどうか
確認もできます

00:34:07.948 --> 00:34:11.185 align:start position:25% line:-1
自発的な解約をするユーザは―

00:34:11.284 --> 00:34:15.121 align:start position:30% line:-2
自動更新のステータスで
予測できます

00:34:17.190 --> 00:34:20.127 align:start position:29% line:-1
自動更新の値が“１”なら

00:34:20.226 --> 00:34:24.031 align:start position:34% line:-1
購読者は再開します

00:34:24.331 --> 00:34:30.036 align:start position:27% line:-2
値が“０”なら次の更新日で
自発的に解約します

00:34:31.839 --> 00:34:34.507 align:start position:34% line:-1
例で見てみましょう

00:34:35.742 --> 00:34:39.179 align:start position:29% line:-1
３月26日に購読開始し―

00:34:41.114 --> 00:34:45.452 align:start position:30% line:-2
購読管理の画面で
自動更新を解除しました

00:34:47.054 --> 00:34:50.791 align:start position:27% line:-2
たまたまこの後に
ステータスポーリングをして

00:34:51.125 --> 00:34:56.897 align:start position:32% line:-2
自動更新が“０”だと
知ることができました

00:34:58.031 --> 00:35:03.270 align:start position:29% line:-2
この時点でデータベースか
サーバの情報を更新し―

00:34:58.031 --> 00:35:03.270 align:start position:29% line:-2
この時点でデータベースか
サーバの情報を更新し―

00:35:03.504 --> 00:35:07.608 align:start position:32% line:-2
自発的解約の見込みと
セグメント化します

00:35:10.010 --> 00:35:14.581 align:start position:27% line:-2
ステータスポーリングをした
例の定期購読者に―

00:35:15.282 --> 00:35:18.018 align:start position:29% line:-1
何をすればいいでしょうか

00:35:18.685 --> 00:35:21.054 align:start position:32% line:-1
同じ購読グループに―

00:35:21.155 --> 00:35:24.992 align:start position:29% line:-2
魅力的なダウングレードを
提案する機会です

00:35:25.526 --> 00:35:29.763 align:start position:34% line:-2
先ほどのPeakは
提供内容を変えて―

00:35:29.863 --> 00:35:35.569 align:start position:30% line:-2
通常より短期間や安価な
プランを提案しています

00:35:37.771 --> 00:35:40.874 align:start position:29% line:-1
購読者が延長を決めた場合

00:35:40.974 --> 00:35:45.612 align:start position:30% line:-2
アプリケーションで
管理画面を表示させます

00:35:46.380 --> 00:35:51.118 align:start position:32% line:-2
どの製品を更新したか
お知らせするためです

00:35:52.953 --> 00:35:56.857 align:start position:29% line:-2
自動更新プロダクトIDで
これを行います

00:35:57.224 --> 00:35:58.959 align:start position:27% line:-1
プロダクトIDとは異なり―

00:35:59.059 --> 00:36:03.664 align:start position:32% line:-2
購読更新後の
次回の提案に使います

00:35:59.059 --> 00:36:03.664 align:start position:32% line:-2
購読更新後の
次回の提案に使います

00:36:06.266 --> 00:36:12.239 align:start position:27% line:-2
この例は解約する代わりに
ダウングレードした場合です

00:36:12.906 --> 00:36:18.112 align:start position:25% line:-2
自動更新を“１”にして
自動更新プロダクトIDを追加

00:36:19.680 --> 00:36:23.217 align:start position:27% line:-2
変更は即座に通知したほうが
有益です

00:36:23.517 --> 00:36:27.187 align:start position:20% line:-2
server-to-server
notificationも送信され

00:36:27.287 --> 00:36:31.792 align:start position:27% line:-2
更新プリファレンスを
購読者が変えたと分かります

00:36:33.193 --> 00:36:37.865 align:start position:30% line:-2
購読の種類や購読期間の
違いに合わせて―

00:36:37.965 --> 00:36:42.002 align:start position:30% line:-2
異なるサービスを
提案する際に役立ちます

00:36:44.371 --> 00:36:48.775 align:start position:25% line:-2
解約者のいない購読ビジネスは
あり得ません

00:36:48.942 --> 00:36:54.681 align:start position:30% line:-2
重要なのは流出を
少しでも減らすことです

00:36:56.717 --> 00:37:02.890 align:start position:32% line:-2
解約を決めた購読者に
別の提案をするか―

00:36:56.717 --> 00:37:02.890 align:start position:32% line:-2
解約を決めた購読者に
別の提案をするか―

00:37:03.156 --> 00:37:06.660 align:start position:32% line:-2
解約理由を聞いて
今後につなげましょう

00:37:08.162 --> 00:37:09.997 align:start position:36% line:-1
例の購読を見て―

00:37:10.097 --> 00:37:15.202 align:start position:32% line:-2
自発的な解約を観察し
活用法を考えましょう

00:37:16.036 --> 00:37:20.240 align:start position:20% line:-2
ユーザはAppleCareを使って
解約しました

00:37:20.941 --> 00:37:26.179 align:start position:30% line:-2
JSON応答で解約日を
あなたに通知します

00:37:26.580 --> 00:37:28.482 align:start position:21% line:-1
顧客はAppleCareに連絡し

00:37:28.615 --> 00:37:33.153 align:start position:29% line:-2
解約か返金を
要求していると分かります

00:37:33.754 --> 00:37:38.258 align:start position:30% line:-2
デベロッパのあなたは
すぐに情報が欲しいので

00:37:39.059 --> 00:37:42.029 align:start position:21% line:-2
server-to-server
notificationを配置

00:37:42.830 --> 00:37:48.402 align:start position:29% line:-2
すぐにユーザのアクセスを
ブロックするため―

00:37:48.569 --> 00:37:52.539 align:start position:29% line:-2
他の購読製品を
提供するためにも重要です

00:37:54.241 --> 00:37:59.012 align:start position:23% line:-2
ユーザが解約した後も簡単に
セグメント化することが重要です

00:37:59.113 --> 00:38:01.582 align:start position:32% line:-1
自発的な解約なのか―

00:37:59.113 --> 00:38:01.582 align:start position:32% line:-1
自発的な解約なのか―

00:38:02.216 --> 00:38:06.119 align:start position:30% line:-2
請求の問題で
非自発的に解約したのか

00:38:06.987 --> 00:38:12.059 align:start position:30% line:-2
そのためJSON応答で
解約意志を返します

00:38:12.659 --> 00:38:17.531 align:start position:27% line:-2
これは購読が失効した後のみ
表示されます

00:38:17.965 --> 00:38:20.667 align:start position:32% line:-1
２つの値に注目します

00:38:20.834 --> 00:38:25.205 align:start position:34% line:-2
１つ目は“１”の値
自発的な解約

00:38:25.672 --> 00:38:31.178 align:start position:34% line:-2
２つめは“２”の値
非自発的な解約です

00:38:33.113 --> 00:38:37.484 align:start position:25% line:-2
AppleCareに連絡して
解約した顧客は―

00:38:37.584 --> 00:38:42.990 align:start position:29% line:-2
レシートの応答で
解約意志を“１”とします

00:38:45.459 --> 00:38:50.731 align:start position:30% line:-2
ではユーザの解約が
自発的か非自発的かを―

00:38:50.831 --> 00:38:55.102 align:start position:27% line:-2
セグメント化した後は
どうすればいいでしょうか？

00:38:56.570 --> 00:39:02.476 align:start position:29% line:-2
自発的な解約者には
アンケートをとりましょう

00:38:56.570 --> 00:39:02.476 align:start position:29% line:-2
自発的な解約者には
アンケートをとりましょう

00:39:02.576 --> 00:39:06.113 align:start position:34% line:-2
顧客に適さなかった
理由を聞き―

00:39:06.213 --> 00:39:11.785 align:start position:27% line:-2
ユーザ体験を向上するための
今後につなげます

00:39:12.486 --> 00:39:17.991 align:start position:30% line:-2
それと他の購読製品を
常に提案し続けましょう

00:39:18.092 --> 00:39:23.630 align:start position:23% line:-2
再開した場合 85パーセントの
利益配分が継続されます

00:39:25.299 --> 00:39:28.969 align:start position:25% line:-2
Peakではユーザが自発的に
解約した場合

00:39:29.436 --> 00:39:33.640 align:start position:30% line:-2
60パーセント引きで
再購読を提供しています

00:39:36.710 --> 00:39:41.148 align:start position:29% line:-2
非自発的な解約者は
自分の意志ではないので―

00:39:41.248 --> 00:39:44.852 align:start position:29% line:-2
同じか または
他の購読製品を表示します

00:39:45.285 --> 00:39:50.057 align:start position:27% line:-2
永続的な通知を残しておいて
ユーザがログインした際に

00:39:50.157 --> 00:39:53.794 align:start position:32% line:-2
いつでも再開可能だと
示しておきましょう

00:39:54.528 --> 00:39:57.831 align:start position:34% line:-2
閲覧できるけど
体験できないなど―

00:39:58.332 --> 00:40:01.869 align:start position:34% line:-2
限定的なサービスも
残しておきましょう

00:39:58.332 --> 00:40:01.869 align:start position:34% line:-2
限定的なサービスも
残しておきましょう

00:40:02.970 --> 00:40:04.471 align:start position:30% line:-1
これはTinderです

00:40:04.771 --> 00:40:08.609 align:start position:34% line:-2
ユーザ同士の交流に
レベルがあり―

00:40:08.709 --> 00:40:11.545 align:start position:30% line:-2
継続的に
有料購読を促しています

00:40:12.913 --> 00:40:17.584 align:start position:27% line:-2
まとめると 購読の解約率を
下げるには―

00:40:17.684 --> 00:40:21.989 align:start position:30% line:-2
レシートフィールドを
効果的に活用しましょう

00:40:23.690 --> 00:40:29.062 align:start position:25% line:-2
ステータスポーリングで
自発的な解約を見つけましょう

00:40:32.566 --> 00:40:37.204 align:start position:32% line:-2
効果的なメッセージを
配信しましょう

00:40:38.705 --> 00:40:43.944 align:start position:27% line:-2
適切な購読サービスを提案し
購読の再開―

00:40:44.044 --> 00:40:47.614 align:start position:34% line:-2
もしくは解約防止に
つなげましょう

00:40:49.349 --> 00:40:53.253 align:start position:29% line:-2
ピートに戻して
分析とレポートを話します

00:40:53.354 --> 00:40:54.087 align:start position:45% line:-1
どうも

00:40:54.188 --> 00:40:57.958 align:start position:43% line:-1
(拍手)

00:41:02.830 --> 00:41:03.831 align:start position:32% line:-1
マイケル　ありがとう

00:41:04.665 --> 00:41:07.167 align:start position:29% line:-2
このJSONフィールドを
実装していないなら―

00:41:07.267 --> 00:41:11.371 align:start position:32% line:-2
保有率に効果的なので
強くお薦めします

00:41:11.538 --> 00:41:16.710 align:start position:21% line:-2
通常 シンプルなアーキテクチャで
効果的な物は少ないですが

00:41:16.810 --> 00:41:19.580 align:start position:27% line:-1
これは高い収益が見込めます

00:41:20.047 --> 00:41:24.117 align:start position:25% line:-2
分析とレポートに関して
新しいアップデートがあります

00:41:24.718 --> 00:41:29.790 align:start position:18% line:-2
App Store Connectの
「売上とトレンド」です

00:41:30.057 --> 00:41:33.093 align:start position:27% line:-1
分析がより詳細になりました

00:41:33.394 --> 00:41:36.063 align:start position:29% line:-1
既存の登録数サマリーの他

00:41:36.163 --> 00:41:40.534 align:start position:30% line:-2
再請求の状態を
監視することもできます

00:41:41.268 --> 00:41:44.137 align:start position:30% line:-1
購読者の行動を把握し―

00:41:44.238 --> 00:41:49.143 align:start position:30% line:-2
最も効果的な猶予期間の
決定に役立ちます

00:41:51.011 --> 00:41:55.315 align:start position:34% line:-2
今年は定期購読者の
保有率も新設します

00:41:55.883 --> 00:41:59.086 align:start position:32% line:-1
お試し価格の効果や―

00:41:59.186 --> 00:42:02.189 align:start position:27% line:-2
最も高い収益率の購買者数も
一目瞭然

00:41:59.186 --> 00:42:02.189 align:start position:27% line:-2
最も高い収益率の購買者数も
一目瞭然

00:42:02.289 --> 00:42:06.894 align:start position:32% line:-2
１年購読した場合の
収益率も分かりますね

00:42:08.095 --> 00:42:14.234 align:start position:27% line:-2
高パフォーマンスの購読群を
新しいグラフで把握できます

00:42:14.334 --> 00:42:18.438 align:start position:32% line:-2
異なる領域の購読者の
パフォーマンスを―

00:42:18.539 --> 00:42:21.642 align:start position:30% line:-2
長期的に
監視することもできます

00:42:22.376 --> 00:42:26.380 align:start position:18% line:-2
App Store Connectの
レポートだけでなく―

00:42:26.480 --> 00:42:30.083 align:start position:11% line:-2
App Store Connect APIで
入手可能になりました

00:42:30.751 --> 00:42:34.488 align:start position:34% line:-2
毎日更新され
自身の設定次第で―

00:42:34.588 --> 00:42:39.593 align:start position:32% line:-2
データウェアハウスに
インポートできます

00:42:39.893 --> 00:42:43.197 align:start position:11% line:-2
App Store Connect APIの
説明はしませんが―

00:42:43.297 --> 00:42:48.602 align:start position:0% line:-2
automating App Store Connectの
セッションに ぜひご参加ください

00:42:48.702 --> 00:42:51.972 align:start position:32% line:-2
自動化について
興味深い話が聞けます

00:42:53.073 --> 00:42:58.545 align:start position:25% line:-2
レシートとレポートから
得られる情報をお話ししました

00:42:58.679 --> 00:43:03.550 align:start position:20% line:-2
App Storeレシートは
StoreKitトランザクションと

00:42:58.679 --> 00:43:03.550 align:start position:20% line:-2
App Storeレシートは
StoreKitトランザクションと

00:43:03.650 --> 00:43:07.287 align:start position:29% line:-2
ユーザの購読状態
サーバの維持に役立ちます

00:43:07.387 --> 00:43:12.125 align:start position:29% line:-2
各ユーザの行動の把握にも
役立ちます

00:43:13.327 --> 00:43:18.265 align:start position:11% line:-2
App Store Connectレポートの
存在意義は少し異なり

00:43:18.365 --> 00:43:21.969 align:start position:25% line:-1
マクロレベルの分析ができます

00:43:22.069 --> 00:43:27.875 align:start position:30% line:-2
定期購読による
入金額の把握ができます

00:43:29.476 --> 00:43:33.113 align:start position:29% line:-2
いろいろお話ししましたが
まとめます

00:43:33.213 --> 00:43:37.084 align:start position:36% line:-2
サーバの状態を
管理することで―

00:43:37.184 --> 00:43:39.720 align:start position:29% line:-1
購読に柔軟に対応できます

00:43:40.721 --> 00:43:45.426 align:start position:18% line:-2
URLを追加しApp Storeから
通知を受け取ってください

00:43:46.326 --> 00:43:51.632 align:start position:27% line:-2
お試し価格を設定して
購読者獲得につなげましょう

00:43:52.666 --> 00:43:57.738 align:start position:27% line:-2
メッセージを配信し
購読の解約を減らしましょう

00:43:57.838 --> 00:44:04.111 align:start position:25% line:-2
解約後のユーザには
他の購読製品で再開を促します

00:43:57.838 --> 00:44:04.111 align:start position:25% line:-2
解約後のユーザには
他の購読製品で再開を促します

00:44:04.745 --> 00:44:08.916 align:start position:18% line:-2
App Store Connectの
新しいレポートもお忘れなく

00:44:10.417 --> 00:44:14.455 align:start position:25% line:-2
このセッションは705でした
ビデオ閲覧の参考まで

00:44:14.555 --> 00:44:17.257 align:start position:29% line:-1
この後 ラボにも行きます

00:44:17.357 --> 00:44:20.828 align:start position:32% line:-2
木曜の午前９時からは
StoreKitと―

00:44:20.928 --> 00:44:25.499 align:start position:18% line:-2
App Store Connectの
エンジニアが質問にお答えます

00:44:25.599 --> 00:44:26.567 align:start position:41% line:-1
ありがとう

00:44:26.700 --> 00:44:31.572 align:start position:43% line:-1
(拍手)
