WEBVTT

00:00:07.140 --> 00:00:16.583 align:start position:43% line:-1
(音楽)

00:00:18.519 --> 00:00:25.225 align:start position:43% line:-1
(拍手)

00:00:25.325 --> 00:00:26.326 align:start position:41% line:-1
こんにちは

00:00:26.426 --> 00:00:28.729 align:start position:11% line:-2
Optimizing App Assetsへ
ようこそ

00:00:28.929 --> 00:00:31.832 align:start position:29% line:-2
Cocoaフレームワーク
エンジニアのウィルです

00:00:31.932 --> 00:00:34.801 align:start position:29% line:-1
今日は同僚のパトリックと

00:00:34.935 --> 00:00:39.506 align:start position:29% line:-2
アセットの最適化について
お話しします

00:00:41.608 --> 00:00:46.280 align:start position:23% line:-2
現在 多くのアプリケーションに
高品質のアセットが使われ

00:00:46.380 --> 00:00:50.717 align:start position:30% line:-2
すばらしいユーザ体験を
生み出しています

00:00:50.817 --> 00:00:56.690 align:start position:27% line:-2
アセットの活用で多くの人を
惹き付けているのです

00:00:56.857 --> 00:01:01.361 align:start position:27% line:-2
皆さんの役に立てるよう
今日はいくつかお話しします

00:00:56.857 --> 00:01:01.361 align:start position:27% line:-2
皆さんの役に立てるよう
今日はいくつかお話しします

00:01:01.528 --> 00:01:06.200 align:start position:30% line:-2
アセットカタログの
ベストプラクティスや―

00:01:06.333 --> 00:01:10.037 align:start position:30% line:-2
アセットのより効率的な
配備方法

00:01:10.137 --> 00:01:13.207 align:start position:32% line:-2
そして ユーザ体験を
向上させる方法です

00:01:15.209 --> 00:01:20.214 align:start position:29% line:-2
話の中で 基本的な
デザインや開発 配備など

00:01:20.314 --> 00:01:24.418 align:start position:30% line:-2
ワークフローの各工程に
触れていきます

00:01:24.785 --> 00:01:29.623 align:start position:23% line:-2
その中で
まず私がお話ししたいトピックは

00:01:30.090 --> 00:01:31.925 align:start position:38% line:-1
画像の圧縮です

00:01:34.461 --> 00:01:37.831 align:start position:21% line:-2
画像圧縮は
アセットカタログエディタの核です

00:01:39.066 --> 00:01:42.669 align:start position:30% line:-2
そしてコンパイル作業の
最終工程で

00:01:42.970 --> 00:01:47.841 align:start position:32% line:-2
他の工程の最適化にも
大きく関係します

00:01:49.376 --> 00:01:55.249 align:start position:21% line:-2
アセットカタログにはデフォルトで
様々な圧縮タイプがあります

00:01:55.649 --> 00:01:59.486 align:start position:23% line:-1
また使用する画像やテクスチャに

00:01:59.586 --> 00:02:02.489 align:start position:27% line:-1
最適な圧縮タイプを選べます

00:01:59.586 --> 00:02:02.489 align:start position:27% line:-1
最適な圧縮タイプを選べます

00:02:03.423 --> 00:02:05.993 align:start position:29% line:-1
これで十分とも言えますが

00:02:06.226 --> 00:02:10.364 align:start position:23% line:-2
すべてのオプションを知ることも
大切です

00:02:10.464 --> 00:02:13.667 align:start position:30% line:-2
さらにトレードオフや
プロジェクトへの影響を

00:02:13.767 --> 00:02:16.537 align:start position:29% line:-1
理解した方がいいでしょう

00:02:19.206 --> 00:02:23.410 align:start position:29% line:-2
さて画像圧縮の詳しい話を
進める前に

00:02:23.644 --> 00:02:28.115 align:start position:25% line:-2
アセットカタログの
もう１つの最適化の話をします

00:02:28.315 --> 00:02:31.852 align:start position:25% line:-2
その機能は
すべての圧縮に関連するもので

00:02:32.252 --> 00:02:34.288 align:start position:9% line:-2
Automatic Image Packing
といいます

00:02:37.891 --> 00:02:44.198 align:start position:21% line:-2
アセットカタログが導入される前は
アセットを配備するのに

00:02:44.298 --> 00:02:48.468 align:start position:30% line:-2
大量の画像ファイルを
ただ入れ込むだけでした

00:02:49.269 --> 00:02:53.740 align:start position:29% line:-2
注意すべき点は
この方法には多くの欠点と

00:02:53.841 --> 00:02:55.442 align:start position:29% line:-1
トレードオフがある点です

00:02:56.009 --> 00:03:00.380 align:start position:32% line:-2
まず２つの欠点を
覚えておいてください

00:02:56.009 --> 00:03:00.380 align:start position:32% line:-2
まず２つの欠点を
覚えておいてください

00:03:00.714 --> 00:03:05.853 align:start position:32% line:-2
１つはディスク容量が
追加で必要なことです

00:03:06.854 --> 00:03:09.656 align:start position:32% line:-2
従来の画像コンテナの
フォーマットは

00:03:10.123 --> 00:03:14.261 align:start position:29% line:-2
メタデータの保存に
余分な容量を必要とします

00:03:14.595 --> 00:03:16.763 align:start position:32% line:-1
画像の属性も同様です

00:03:17.564 --> 00:03:22.870 align:start position:23% line:-2
アプリケーションに膨大な数の
アセットとメタデータがある場合

00:03:23.003 --> 00:03:27.641 align:start position:32% line:-2
意味もなく同じ情報が
二重に保存されます

00:03:28.742 --> 00:03:32.813 align:start position:30% line:-2
それにアセットの大半が
小さい場合は

00:03:33.180 --> 00:03:36.483 align:start position:32% line:-2
画像圧縮の利点が
あまり生かされません

00:03:38.118 --> 00:03:43.690 align:start position:27% line:-2
もう１つの欠点は
構成上のオーバーヘッドです

00:03:44.358 --> 00:03:47.828 align:start position:30% line:-2
未整理の画像ファイルは
作業が大変です

00:03:48.428 --> 00:03:51.331 align:start position:21% line:-2
それをNSImageや
UIImageなどで処理するのは

00:03:51.431 --> 00:03:54.701 align:start position:32% line:-1
さらに大変なことです

00:03:55.736 --> 00:04:00.474 align:start position:30% line:-2
しかも統一されていない
フォーマットや―

00:03:55.736 --> 00:04:00.474 align:start position:30% line:-2
しかも統一されていない
フォーマットや―

00:04:00.574 --> 00:04:03.911 align:start position:27% line:-1
属性を扱う必要性が生じます

00:04:04.478 --> 00:04:06.713 align:start position:32% line:-1
例えばアートワークに

00:04:06.813 --> 00:04:11.852 align:start position:23% line:-2
透過性の画像とそうでないものが
混在するなどです

00:04:12.819 --> 00:04:17.124 align:start position:23% line:-2
同じことが
色空間と色域にも当てはまります

00:04:19.358 --> 00:04:22.162 align:start position:34% line:-2
アセットカタログは
すべて解決できます

00:04:22.262 --> 00:04:26.533 align:start position:23% line:-2
同じスペクトルの
カラープロファイルを持つ画像を

00:04:26.633 --> 00:04:30.437 align:start position:29% line:-2
グループ化し より大きな
画像のアトラスを作ります

00:04:31.104 --> 00:04:36.643 align:start position:27% line:-2
そうすれば同じメタデータを
何度も保存せずに済むのです

00:04:37.177 --> 00:04:41.448 align:start position:32% line:-2
また画像圧縮の利点を
より生かせます

00:04:42.683 --> 00:04:45.986 align:start position:23% line:-1
では実際の例を見ていきましょう

00:04:48.522 --> 00:04:52.392 align:start position:30% line:-2
左側に12個の
アートワークがあります

00:04:52.960 --> 00:04:58.298 align:start position:29% line:-2
我々のプラットフォームで
見たことがあるでしょう

00:04:59.266 --> 00:05:01.869 align:start position:30% line:-1
それぞれは小さいですが

00:04:59.266 --> 00:05:01.869 align:start position:30% line:-1
それぞれは小さいですが

00:05:02.402 --> 00:05:06.940 align:start position:21% line:-1
全体のサイズは50KBを超えます

00:05:10.210 --> 00:05:11.912 align:start position:5% line:-2
そこで
Automatic Image Packingです

00:05:12.379 --> 00:05:18.051 align:start position:21% line:-2
アセットカタログはこれらの画像が
よく似たスペクトルだと識別

00:05:18.519 --> 00:05:23.624 align:start position:23% line:-2
そしてグループ化し
１つの画像アトラスを生成します

00:05:24.825 --> 00:05:25.859 align:start position:38% line:-1
この方法では―

00:05:26.960 --> 00:05:32.733 align:start position:23% line:-2
全体のディスク容量が
元々のわずか20％に下がります

00:05:33.033 --> 00:05:36.703 align:start position:20% line:-1
つまり80％もサイズを減らせました

00:05:37.838 --> 00:05:42.209 align:start position:21% line:-2
この最適化の割合を把握することも
重要です

00:05:42.409 --> 00:05:46.313 align:start position:29% line:-2
アプリケーションの
アセットの数が増えるほど

00:05:46.580 --> 00:05:49.416 align:start position:25% line:-1
最適化の恩恵も大きくなります

00:05:52.486 --> 00:05:54.488 align:start position:4% line:-1
Automatic Image Packingでした

00:05:56.423 --> 00:05:59.426 align:start position:25% line:-1
次はロッシー圧縮の話をします

00:06:01.295 --> 00:06:06.266 align:start position:32% line:-2
これは画像の解像度を
少し落とす代わりに

00:06:06.433 --> 00:06:10.604 align:start position:25% line:-1
高い圧縮率を実現する方法です

00:06:11.171 --> 00:06:15.275 align:start position:25% line:-1
ロッシー圧縮を使用すべきかは

00:06:15.375 --> 00:06:17.945 align:start position:21% line:-1
アプリケーションの状態によります

00:06:19.479 --> 00:06:23.217 align:start position:23% line:-2
通常 スクリーン表示時間が短い
アートワークには

00:06:23.450 --> 00:06:26.553 align:start position:29% line:-1
ロッシー圧縮を推奨します

00:06:27.688 --> 00:06:31.658 align:start position:29% line:-2
例えばアプリケーションの
スプラッシュ画面や

00:06:32.125 --> 00:06:34.294 align:start position:30% line:-2
アニメーションや効果に
使う画像です

00:06:35.996 --> 00:06:39.900 align:start position:30% line:-2
これからご紹介するのは
アセットカタログの

00:06:40.334 --> 00:06:43.303 align:start position:30% line:-1
新しいロッシー圧縮です

00:06:43.937 --> 00:06:48.876 align:start position:27% line:-2
それは 今年サポートを
拡大することになるHEIF

00:06:49.009 --> 00:06:52.513 align:start position:20% line:-2
ハイ･エフィシエンシー･イメージ･
ファイル･フォーマットです

00:06:54.348 --> 00:06:57.050 align:start position:32% line:-1
昨年の発表を見た方は

00:06:57.217 --> 00:07:00.888 align:start position:25% line:-2
HEIFフォーマットの導入を
ご存知ですね

00:06:57.217 --> 00:07:00.888 align:start position:25% line:-2
HEIFフォーマットの導入を
ご存知ですね

00:07:01.021 --> 00:07:05.492 align:start position:23% line:-2
すべてのプラットフォームと
アセットカタログに採用しました

00:07:06.460 --> 00:07:09.096 align:start position:29% line:-1
今年はもう１歩前進します

00:07:09.196 --> 00:07:14.968 align:start position:20% line:-2
アセットカタログに
HEIFのロッシー圧縮を追加します

00:07:18.472 --> 00:07:21.675 align:start position:43% line:-1
(拍手)

00:07:21.775 --> 00:07:22.509 align:start position:45% line:-1
どうも

00:07:23.677 --> 00:07:29.249 align:start position:30% line:-2
では HEIFの長所を
手短にお話ししましょう

00:07:30.684 --> 00:07:34.922 align:start position:29% line:-2
最大の利点は
従来のロッシー圧縮に比べ

00:07:35.255 --> 00:07:39.359 align:start position:18% line:-1
HEIFの圧縮率は非常に高いことです

00:07:39.893 --> 00:07:43.964 align:start position:30% line:-2
従来のフォーマットとは
JPEGなどです

00:07:45.165 --> 00:07:48.235 align:start position:27% line:-1
他にも多くの長所があります

00:07:48.335 --> 00:07:52.406 align:start position:32% line:-2
すぐに使える透過性の
サポートなどです

00:07:53.841 --> 00:07:57.044 align:start position:27% line:-1
もっと重要な特徴もあります

00:07:57.377 --> 00:08:01.949 align:start position:21% line:-2
アセットカタログは
他のフォーマットの画像ファイルを

00:07:57.377 --> 00:08:01.949 align:start position:21% line:-2
アセットカタログは
他のフォーマットの画像ファイルを

00:08:02.149 --> 00:08:04.585 align:start position:25% line:-1
自動でHEIFに変換できます

00:08:05.018 --> 00:08:09.523 align:start position:23% line:-2
つまり画像アセットを
ロッシー圧縮にひも付けておけば

00:08:09.690 --> 00:08:14.394 align:start position:27% line:-2
開発側は
他に何もしなくていいのです

00:08:14.528 --> 00:08:18.999 align:start position:27% line:-2
コンパイル時にすべて自動で
行われます

00:08:20.667 --> 00:08:24.371 align:start position:20% line:-1
HEIFフォーマットの詳しい情報は

00:08:24.471 --> 00:08:27.508 align:start position:23% line:-1
昨年のセッションを参照ください

00:08:31.612 --> 00:08:34.815 align:start position:23% line:-1
ではロスレス圧縮の話に移ります

00:08:35.549 --> 00:08:38.684 align:start position:23% line:-1
これはデフォルトの圧縮タイプで

00:08:38.784 --> 00:08:41.855 align:start position:23% line:-1
アセットの大半に使われています

00:08:43.056 --> 00:08:48.595 align:start position:23% line:-2
ですからロスレス圧縮の最適化は
非常に重要です

00:08:51.498 --> 00:08:55.736 align:start position:21% line:-2
通常 アートワークは
カラースペクトルのプロファイルで

00:08:55.836 --> 00:08:58.172 align:start position:25% line:-1
２つのグループに分類されます

00:08:58.772 --> 00:09:03.544 align:start position:25% line:-2
ロスレス圧縮によるメリットは
それぞれ異なります

00:08:58.772 --> 00:09:03.544 align:start position:25% line:-2
ロスレス圧縮によるメリットは
それぞれ異なります

00:09:04.178 --> 00:09:05.546 align:start position:38% line:-1
見てみましょう

00:09:08.115 --> 00:09:12.619 align:start position:30% line:-2
１種類目はいわゆる
単純なアートワークです

00:09:13.587 --> 00:09:15.622 align:start position:32% line:-1
単純とされる理由は―

00:09:16.390 --> 00:09:19.059 align:start position:21% line:-1
カラースペクトルの範囲が狭いこと

00:09:19.159 --> 00:09:22.329 align:start position:30% line:-2
そして個別のカラー値が
小さいことです

00:09:23.464 --> 00:09:26.200 align:start position:25% line:-1
シンプルなデザインだからです

00:09:26.333 --> 00:09:29.469 align:start position:23% line:-1
多くのアイコンがこのタイプです

00:09:31.171 --> 00:09:36.543 align:start position:27% line:-2
もう一方のタイプはいわゆる
複雑なアートワークです

00:09:37.845 --> 00:09:43.083 align:start position:25% line:-2
前述のとおり ロスレス圧縮の
利点は各タイプで異なります

00:09:43.183 --> 00:09:47.855 align:start position:27% line:-2
両タイプともロスレス圧縮に
適しているため

00:09:47.955 --> 00:09:49.690 align:start position:36% line:-1
非常に効果的です

00:09:50.958 --> 00:09:55.562 align:start position:29% line:-2
我々はこの両方が重要だと
気付きました

00:09:56.129 --> 00:09:58.699 align:start position:27% line:-1
それに すべてのアセットを

00:09:58.799 --> 00:10:02.169 align:start position:23% line:-1
最高のロスレス圧縮で配備したい

00:09:58.799 --> 00:10:02.169 align:start position:23% line:-1
最高のロスレス圧縮で配備したい

00:10:03.070 --> 00:10:05.405 align:start position:27% line:-1
そこで新機能を追加しました

00:10:05.572 --> 00:10:09.810 align:start position:30% line:-2
アセットカタログの
新しいロスレス圧縮です

00:10:11.278 --> 00:10:14.681 align:start position:14% line:-2
その名はApple Deep Pixel
Image Compressionです

00:10:17.518 --> 00:10:21.989 align:start position:43% line:-1
(拍手)

00:10:22.089 --> 00:10:23.223 align:start position:41% line:-1
ありがとう

00:10:24.658 --> 00:10:28.862 align:start position:25% line:-2
この新機能は
カラースペクトルに適応する―

00:10:28.962 --> 00:10:31.598 align:start position:30% line:-1
フレキシブルな圧縮です

00:10:32.533 --> 00:10:36.203 align:start position:23% line:-1
カラースペクトルの特質に合わせ

00:10:36.303 --> 00:10:41.174 align:start position:29% line:-2
最適な圧縮アルゴリズムが
選択されるのです

00:10:42.376 --> 00:10:47.514 align:start position:27% line:-2
今年発表のこの新しい圧縮は
皆さんだけでなく

00:10:47.614 --> 00:10:51.919 align:start position:21% line:-2
我々のすべてのプラットフォームと
アプリケーションでも利用可能です

00:10:53.253 --> 00:10:56.423 align:start position:21% line:-1
これにより既存の全プロジェクトで

00:10:56.523 --> 00:11:01.161 align:start position:29% line:-2
平均20％のサイズ縮小が
可能になりました

00:10:56.523 --> 00:11:01.161 align:start position:29% line:-2
平均20％のサイズ縮小が
可能になりました

00:11:01.995 --> 00:11:03.497 align:start position:38% line:-1
大きな改良です

00:11:03.597 --> 00:11:07.367 align:start position:43% line:-1
(拍手)

00:11:08.869 --> 00:11:12.239 align:start position:29% line:-1
では数字を見てみましょう

00:11:15.008 --> 00:11:19.680 align:start position:25% line:-2
この表は各プラットフォームの
アセットカタログの

00:11:19.880 --> 00:11:22.649 align:start position:27% line:-1
全体のサイズを示しています

00:11:23.851 --> 00:11:26.653 align:start position:27% line:-1
すべてのプラットフォームで

00:11:26.753 --> 00:11:31.225 align:start position:27% line:-2
最大20％も
サイズが削減されていますね

00:11:35.829 --> 00:11:40.868 align:start position:29% line:-2
ロスレス圧縮で重要なのは
圧縮率だけではありません

00:11:41.335 --> 00:11:46.740 align:start position:29% line:-2
大半のアプリケーションで
使用されているため

00:11:47.007 --> 00:11:49.910 align:start position:25% line:-1
デコード時間も同様に大事です

00:11:50.577 --> 00:11:52.713 align:start position:18% line:-2
Apple Deep Pixel
Image Compressionは

00:11:52.946 --> 00:11:57.718 align:start position:30% line:-2
デコード時間も
最大20％短縮できます

00:12:02.723 --> 00:12:04.958 align:start position:29% line:-1
以上がロスレス圧縮でした

00:12:05.826 --> 00:12:09.696 align:start position:23% line:-2
今から
２つのトピックについて話します

00:12:09.797 --> 00:12:12.799 align:start position:30% line:-1
互いに関連するものです

00:12:13.400 --> 00:12:18.305 align:start position:25% line:-2
先ほど話した最適化と圧縮にも
大きく関連します

00:12:19.540 --> 00:12:22.042 align:start position:14% line:-1
それは配備とApp Thinningです

00:12:25.612 --> 00:12:28.182 align:start position:14% line:-1
まずはApp Thinningの概要です

00:12:28.549 --> 00:12:31.518 align:start position:20% line:-2
App Thinningは
App Store内のプロセスです

00:12:31.618 --> 00:12:35.989 align:start position:25% line:-2
全デバイスモデルと
配備ターゲットのバージョンに

00:12:36.123 --> 00:12:39.393 align:start position:27% line:-2
プロジェクトのバリアントを
生成します

00:12:41.195 --> 00:12:45.065 align:start position:14% line:-1
App Thinningが有効な時とは？

00:12:45.566 --> 00:12:50.204 align:start position:25% line:-2
それはアプリケーションの
配備ターゲットのバージョンが

00:12:50.437 --> 00:12:53.073 align:start position:32% line:-1
最新ではない場合です

00:12:53.674 --> 00:12:56.944 align:start position:29% line:-2
そうすれば
幅広く利用されるからです

00:12:58.479 --> 00:13:04.084 align:start position:21% line:-2
App Thinningは
すべてのバリアントを自動で生成し

00:12:58.479 --> 00:13:04.084 align:start position:21% line:-2
App Thinningは
すべてのバリアントを自動で生成し

00:13:04.184 --> 00:13:08.956 align:start position:30% line:-2
各ユーザに最適なものを
配備できます

00:13:10.591 --> 00:13:16.363 align:start position:20% line:-2
今年 Xcode 10と
iOS 12用のSDKで開発すれば

00:13:16.697 --> 00:13:22.703 align:start position:25% line:-2
自動的にあらゆる最適化と
最新の圧縮機能が利用できます

00:13:24.138 --> 00:13:29.343 align:start position:29% line:-2
しかし以前のバージョンを
配備ターゲットとする際は

00:13:30.644 --> 00:13:34.481 align:start position:25% line:-1
最新の最適化は適用されません

00:13:35.682 --> 00:13:39.653 align:start position:29% line:-2
旧バージョンと
互換性のあるバリアントを

00:13:39.753 --> 00:13:42.656 align:start position:27% line:-1
生成する必要があるからです

00:13:44.625 --> 00:13:49.363 align:start position:27% line:-2
しかし私たちはアセットを
最適な方法で配備したいので

00:13:49.463 --> 00:13:52.533 align:start position:27% line:-1
これは理想的ではありません

00:13:53.100 --> 00:13:58.305 align:start position:16% line:-2
そこで今年はApp Thinningの
新バージョンを発表します

00:13:58.405 --> 00:14:00.140 align:start position:12% line:-1
OS Variant Thinningです

00:13:58.405 --> 00:14:00.140 align:start position:12% line:-1
OS Variant Thinningです

00:14:02.276 --> 00:14:03.911 align:start position:12% line:-1
OS Variant Thinningでも

00:14:05.579 --> 00:14:11.752 align:start position:29% line:-2
古いプラットフォームを
配備ターゲットにできます

00:14:12.052 --> 00:14:15.589 align:start position:18% line:-1
例えばiOS 9からiOS 11です

00:14:17.090 --> 00:14:20.093 align:start position:14% line:-2
OS Variant Thinningは
最新のiOSに

00:14:20.494 --> 00:14:24.231 align:start position:25% line:-1
特別なバリアントを生成します

00:14:24.464 --> 00:14:27.968 align:start position:23% line:-2
そして最新の最適化と圧縮機能が
使えるのです

00:14:28.602 --> 00:14:33.941 align:start position:21% line:-2
つまり最も効率の良いバージョンを
みんなが利用でき

00:14:34.341 --> 00:14:35.742 align:start position:32% line:-1
みんなが満足できます

00:14:39.046 --> 00:14:42.883 align:start position:43% line:-1
(拍手)

00:14:43.684 --> 00:14:46.086 align:start position:12% line:-1
App Thinningと逆行の配備でした

00:14:47.287 --> 00:14:50.791 align:start position:23% line:-2
次はXcode上で
App Thinningを使い

00:14:50.891 --> 00:14:55.262 align:start position:21% line:-2
ローカルにエクスポートする方法を
ご説明します

00:14:56.663 --> 00:14:58.632 align:start position:36% line:-1
やり方は簡単です

00:14:58.966 --> 00:15:03.103 align:start position:21% line:-2
Xcodeの“Archive”を
選ぶだけです

00:14:58.966 --> 00:15:03.103 align:start position:21% line:-2
Xcodeの“Archive”を
選ぶだけです

00:15:03.937 --> 00:15:07.908 align:start position:29% line:-2
これでXcodeが
バリアントを生成できます

00:15:10.244 --> 00:15:14.615 align:start position:25% line:-2
次に“Organizer”を
クリックしてください

00:15:14.715 --> 00:15:19.620 align:start position:27% line:-2
すると生成したバリアントが
表示されます

00:15:22.089 --> 00:15:27.861 align:start position:20% line:-2
これがウインドウで
今回の例はGarageBandです

00:15:28.996 --> 00:15:33.901 align:start position:27% line:-2
まずは配信方法の選択画面が
表示されます

00:15:34.535 --> 00:15:37.404 align:start position:23% line:-1
すべてのバリアントの配信用です

00:15:38.405 --> 00:15:43.277 align:start position:20% line:-2
この例では配信は“Ad Hoc”を
選びます

00:15:46.213 --> 00:15:50.517 align:start position:16% line:-2
次のウインドウの
App Thinningのフィールドで

00:15:51.084 --> 00:15:55.155 align:start position:11% line:-2
“All compatible device
variants”を選択

00:15:56.056 --> 00:16:00.661 align:start position:21% line:-2
これでXcodeはサポートされる
全デバイス用のバリアントが

00:15:56.056 --> 00:16:00.661 align:start position:21% line:-2
これでXcodeはサポートされる
全デバイス用のバリアントが

00:16:00.894 --> 00:16:03.730 align:start position:32% line:-1
エクスポートされます

00:16:06.300 --> 00:16:10.504 align:start position:25% line:-2
次に生成したバリアントを含む
レポートが

00:16:10.771 --> 00:16:13.607 align:start position:30% line:-1
Xcodeで作られます

00:16:14.374 --> 00:16:17.578 align:start position:30% line:-2
アプリケーション配備の
詳細を知りたい時に

00:16:17.678 --> 00:16:20.714 align:start position:30% line:-1
レポートで確認できます

00:16:21.014 --> 00:16:24.284 align:start position:25% line:-1
基本的な質問もあると思います

00:16:24.651 --> 00:16:26.954 align:start position:27% line:-1
生成したバリアントの数は？

00:16:27.521 --> 00:16:29.556 align:start position:29% line:-1
そのサイズはどれくらい？

00:16:30.090 --> 00:16:35.462 align:start position:27% line:-2
特定のバリアントの最適化や
微調整をする余地は？

00:16:37.764 --> 00:16:43.337 align:start position:23% line:-2
このGarageBandでは
生成された半分がエクスポートに

00:16:43.804 --> 00:16:45.239 align:start position:38% line:-1
見てみましょう

00:16:47.341 --> 00:16:49.009 align:start position:32% line:-1
この表をご覧ください

00:16:50.577 --> 00:16:52.012 align:start position:39% line:-1
この表では―

00:16:52.112 --> 00:16:56.717 align:start position:27% line:-2
各デバイス用のバリアントの
サイズが比較できます

00:16:58.619 --> 00:17:03.724 align:start position:27% line:-2
これは iOS 11以前の
バージョンのバリアントです

00:16:58.619 --> 00:17:03.724 align:start position:27% line:-2
これは iOS 11以前の
バージョンのバリアントです

00:17:04.925 --> 00:17:10.531 align:start position:12% line:-2
GarageBandは膨大な数の画像を含み
容量が大きく

00:17:10.998 --> 00:17:16.837 align:start position:23% line:-2
バリアントのサイズは
90MBから100MB以上です

00:17:19.373 --> 00:17:22.776 align:start position:20% line:-1
そしてこれがiOS 12の数字です

00:17:23.844 --> 00:17:26.946 align:start position:29% line:-1
その差は一目瞭然でしょう

00:17:27.047 --> 00:17:32.286 align:start position:29% line:-2
10％から20％程度も
サイズが縮小されています

00:17:33.487 --> 00:17:35.856 align:start position:29% line:-1
数字に見覚えがありますね

00:17:36.290 --> 00:17:41.862 align:start position:27% line:-2
これはすべて 先ほど話した
最適化と圧縮によるものです

00:17:46.200 --> 00:17:47.935 align:start position:32% line:-1
以上が画像圧縮でした

00:17:48.669 --> 00:17:52.139 align:start position:27% line:-1
では次に同僚のパトリックが

00:17:52.372 --> 00:17:55.042 align:start position:23% line:-1
デザインと制作について話します

00:17:56.009 --> 00:17:58.979 align:start position:43% line:-1
(拍手)

00:17:59.079 --> 00:18:00.180 align:start position:38% line:-1
ウィル どうも

00:17:59.079 --> 00:18:00.180 align:start position:38% line:-1
ウィル どうも

00:18:02.282 --> 00:18:06.253 align:start position:18% line:-1
Xcodeのアセットカタログを使って

00:18:06.353 --> 00:18:09.990 align:start position:34% line:-2
簡単にアセットを
改良する方法でした

00:18:10.557 --> 00:18:13.660 align:start position:27% line:-2
あと少し
アセットカタログを活用して

00:18:13.760 --> 00:18:18.899 align:start position:25% line:-2
アセットを最適化するやり方を
説明しましょう

00:18:19.433 --> 00:18:23.036 align:start position:25% line:-1
まずはデザインと制作の話です

00:18:23.136 --> 00:18:25.706 align:start position:30% line:-1
これがすべての原点です

00:18:28.141 --> 00:18:33.547 align:start position:21% line:-2
アセット用の様々なツールや
ワークフローやソースがありますが

00:18:33.647 --> 00:18:37.784 align:start position:30% line:-2
結局はすべて
人間が作っているのです

00:18:37.951 --> 00:18:40.254 align:start position:32% line:-1
そこで情報を整理して

00:18:40.354 --> 00:18:45.692 align:start position:23% line:-2
アセットが開発のワークフローに
入るプロセスを理解しましょう

00:18:45.792 --> 00:18:51.365 align:start position:25% line:-2
そうすればアプリケーションは
大きく改善されます

00:18:52.666 --> 00:18:56.637 align:start position:21% line:-1
まずはカラーマネジメントの話です

00:18:56.737 --> 00:18:59.373 align:start position:25% line:-1
見過ごされがちですが重要です

00:19:01.041 --> 00:19:05.612 align:start position:27% line:-2
ディスク内の画像アセットは
色の無い状態では

00:19:05.712 --> 00:19:09.716 align:start position:32% line:-2
ただのバイトで
何の意味もありません

00:19:10.017 --> 00:19:14.221 align:start position:25% line:-2
ではどうやって
色が与えられるのでしょうか？

00:19:14.321 --> 00:19:16.723 align:start position:23% line:-1
カラープロファイルが使われます

00:19:16.857 --> 00:19:20.227 align:start position:25% line:-1
それが測色値をタプルに与えて

00:19:20.327 --> 00:19:25.265 align:start position:23% line:-2
システムに
どんな色を表示するのか教えます

00:19:25.632 --> 00:19:31.238 align:start position:23% line:-2
ソースアーティファクトで
カラープロファイルを保管します

00:19:31.338 --> 00:19:36.076 align:start position:27% line:-2
そのメタデータを利用すれば
デザイナーの意図を

00:19:36.243 --> 00:19:38.378 align:start position:32% line:-1
そのまま伝えられます

00:19:38.479 --> 00:19:42.849 align:start position:21% line:-1
これを余分なメタデータかと判断し

00:19:42.950 --> 00:19:45.652 align:start position:32% line:-2
プロファイルを
消去しないでください

00:19:45.752 --> 00:19:48.088 align:start position:21% line:-1
大事なソースアーティファクトです

00:19:48.188 --> 00:19:51.325 align:start position:25% line:-1
最適化はツールに任せましょう

00:19:53.494 --> 00:19:56.096 align:start position:27% line:-1
色の管理がなぜ大事なのか？

00:19:56.196 --> 00:20:01.401 align:start position:25% line:-2
それはデバイスによって
ディスプレイが異なるからです

00:19:56.196 --> 00:20:01.401 align:start position:25% line:-2
それはデバイスによって
ディスプレイが異なるからです

00:20:01.502 --> 00:20:05.339 align:start position:27% line:-2
そしてどのディスプレイにも
正しく色をマッチさせ

00:20:05.439 --> 00:20:08.709 align:start position:25% line:-1
表示し再現する必要があります

00:20:08.809 --> 00:20:11.311 align:start position:25% line:-2
それが
カラーマネジメントの仕事です

00:20:11.745 --> 00:20:13.747 align:start position:36% line:-1
計算が必要なので

00:20:14.014 --> 00:20:18.986 align:start position:23% line:-2
CPUかGPUで処理されますが
少々手間です

00:20:19.920 --> 00:20:24.391 align:start position:21% line:-1
そこでアセットカタログの出番です

00:20:24.491 --> 00:20:29.530 align:start position:27% line:-2
コンパイルの間に
カラーマッチングを行います

00:20:29.663 --> 00:20:35.202 align:start position:23% line:-2
つまりデバイス上での計算処理を
省略できます

00:20:35.636 --> 00:20:41.508 align:start position:27% line:-2
すぐにアセットをデバイスに
ロードし表示できるのです

00:20:41.975 --> 00:20:46.079 align:start position:25% line:-1
この処理にはオマケがあります

00:20:46.180 --> 00:20:49.950 align:start position:21% line:-2
カラープロファイルのペイロードを
削除します

00:20:50.250 --> 00:20:52.886 align:start position:30% line:-1
さらに効率の良いことに

00:20:52.986 --> 00:20:57.057 align:start position:23% line:-2
色空間とディスク上のピクセルの
注釈も付けられます

00:20:58.492 --> 00:21:00.294 align:start position:29% line:-1
カラーマネジメントでした

00:20:58.492 --> 00:21:00.294 align:start position:29% line:-1
カラーマネジメントでした

00:21:00.627 --> 00:21:04.331 align:start position:30% line:-2
次のトピックは
ワーキングスペースです

00:21:05.099 --> 00:21:07.234 align:start position:30% line:-1
ワーキングスペースとは

00:21:07.334 --> 00:21:10.504 align:start position:29% line:-2
アセットが最初に作られる
環境のことです

00:21:10.604 --> 00:21:15.576 align:start position:29% line:-2
アートワークを作る
デザイナーやエンジニアが

00:21:15.676 --> 00:21:18.745 align:start position:25% line:-2
デザインツールでコンテンツを
作ります

00:21:18.846 --> 00:21:22.783 align:start position:27% line:-2
ここで重要なのは
すべてのデザインファイルに

00:21:22.883 --> 00:21:25.352 align:start position:25% line:-2
一貫した
カラー設定を使用することです

00:21:25.452 --> 00:21:29.623 align:start position:30% line:-2
これは良い習慣で
技術的な利点もあります

00:21:29.723 --> 00:21:32.960 align:start position:30% line:-2
なぜなら
アプリケーション全体を

00:21:33.060 --> 00:21:38.198 align:start position:30% line:-2
きちんと管理することに
つながるからです

00:21:38.532 --> 00:21:43.504 align:start position:21% line:-2
作業用デザインファイルの作成時に
推奨されるフォーマットは

00:21:43.604 --> 00:21:45.739 align:start position:38% line:-1
２種類あります

00:21:45.839 --> 00:21:50.510 align:start position:30% line:-2
最もよく使われるのが
sRGB 8ビットです

00:21:50.611 --> 00:21:55.582 align:start position:29% line:-2
全デバイスとコンテンツに
幅広く適用されます

00:21:55.983 --> 00:22:01.088 align:start position:23% line:-2
しかし 斬新で
色鮮やかなデザインもありますね

00:21:55.983 --> 00:22:01.088 align:start position:23% line:-2
しかし 斬新で
色鮮やかなデザインもありますね

00:22:01.188 --> 00:22:03.824 align:start position:30% line:-1
例えばこのアイコンです

00:22:03.924 --> 00:22:09.263 align:start position:27% line:-2
これを幅広い色に対応可能な
デバイスで生かすため

00:22:09.363 --> 00:22:14.802 align:start position:27% line:-2
広い色域やカラーアセットを
使いたいでしょう

00:22:14.902 --> 00:22:18.605 align:start position:14% line:-1
その場合 Display P3が最適です

00:22:18.806 --> 00:22:24.778 align:start position:23% line:-2
デザインの損失を防ぐため
16ビット/チャンネルにします

00:22:24.945 --> 00:22:29.983 align:start position:25% line:-2
Xcodeや
ランタイムプラットフォームで

00:22:30.083 --> 00:22:33.654 align:start position:23% line:-2
広いカラーアセットを扱う方法は
多彩です

00:22:33.887 --> 00:22:37.057 align:start position:27% line:-1
ここでは詳細を省きますので

00:22:37.157 --> 00:22:41.495 align:start position:18% line:-2
２年前の“Working with
Wide Color”をご覧ください

00:22:41.595 --> 00:22:45.666 align:start position:27% line:-2
このトピックの詳細と背景が
分かります

00:22:45.766 --> 00:22:50.037 align:start position:27% line:-2
P3アセットの詳細は
ホームページを参照ください

00:22:50.137 --> 00:22:56.276 align:start position:14% line:-2
developer.apple.comの
iOS デザインリソースセクションです

00:22:58.245 --> 00:23:01.181 align:start position:29% line:-1
では次の話に移りましょう

00:22:58.245 --> 00:23:01.181 align:start position:29% line:-1
では次の話に移りましょう

00:23:02.382 --> 00:23:06.420 align:start position:32% line:-2
アートワークについて
皆さんが作る―

00:23:07.120 --> 00:23:12.326 align:start position:23% line:-2
UIは色々な表示やレイアウトに
対応する必要があり

00:23:12.726 --> 00:23:16.597 align:start position:34% line:-2
アートワークを
引き伸ばしたりして

00:23:16.697 --> 00:23:19.800 align:start position:27% line:-1
レイアウト変更に対処します

00:23:19.900 --> 00:23:21.768 align:start position:34% line:-1
どのように行うか？

00:23:22.302 --> 00:23:28.776 align:start position:21% line:-2
最も一般的な方法は
画像の伸縮部と非伸縮部の特定です

00:23:28.876 --> 00:23:29.943 align:start position:43% line:-1
違いは？

00:23:30.043 --> 00:23:34.748 align:start position:25% line:-2
スライドの例は
ある画像だと想像してください

00:23:34.848 --> 00:23:39.820 align:start position:29% line:-2
丸い角の美しい形状を
どのサイズでも保持したい

00:23:40.087 --> 00:23:43.657 align:start position:29% line:-2
青色の部分を
伸ばすことはできませんが

00:23:43.757 --> 00:23:45.859 align:start position:32% line:-1
黄色の部分は可能です

00:23:46.293 --> 00:23:50.464 align:start position:30% line:-2
通常これを行うには
デザインツールを使って

00:23:50.564 --> 00:23:53.066 align:start position:30% line:-1
すべてをスライスします

00:23:53.167 --> 00:23:56.904 align:start position:29% line:-2
次に各リージョンを
個別のアセットとして支給

00:23:57.004 --> 00:24:00.807 align:start position:30% line:-2
それを３または９分割の
APIを使って

00:23:57.004 --> 00:24:00.807 align:start position:30% line:-2
それを３または９分割の
APIを使って

00:24:00.908 --> 00:24:04.044 align:start position:25% line:-1
最終デザインのサイズにします

00:24:04.645 --> 00:24:08.849 align:start position:32% line:-2
長年 これが有効かつ
一般的な方法でした

00:24:09.149 --> 00:24:10.651 align:start position:32% line:-1
しかし短所があります

00:24:10.784 --> 00:24:14.855 align:start position:32% line:-2
最後の画像の再構築は
CPUの負荷が大きく

00:24:15.055 --> 00:24:18.759 align:start position:23% line:-1
複雑で非効率とも言える作業です

00:24:18.859 --> 00:24:24.364 align:start position:12% line:-2
現在のCore Animationのような
機能にも合っていません

00:24:25.766 --> 00:24:27.434 align:start position:36% line:-1
より良い方法は？

00:24:27.534 --> 00:24:30.137 align:start position:30% line:-1
それは単一の画像を使い

00:24:30.337 --> 00:24:36.109 align:start position:25% line:-2
そこに伸縮部分を特定する
メタデータを提供することです

00:24:36.777 --> 00:24:41.548 align:start position:20% line:-2
それは最適な
GPUアニメーションを可能にします

00:24:42.649 --> 00:24:46.653 align:start position:32% line:-2
アセットカタログでは
これが簡単にできます

00:24:47.454 --> 00:24:49.556 align:start position:18% line:-1
Show Slicingエディタです

00:24:50.224 --> 00:24:54.261 align:start position:18% line:-1
まずStart Slicingに進み

00:24:54.495 --> 00:24:58.098 align:start position:34% line:-1
境界線を操作します

00:24:58.232 --> 00:25:03.704 align:start position:25% line:-2
この線で画像の
伸縮部と非伸縮部を設定します

00:24:58.232 --> 00:25:03.704 align:start position:25% line:-2
この線で画像の
伸縮部と非伸縮部を設定します

00:25:03.804 --> 00:25:06.607 align:start position:25% line:-1
この例ではオレンジ色の両端と

00:25:06.740 --> 00:25:10.244 align:start position:27% line:-1
中間のスライスが伸縮部です

00:25:10.444 --> 00:25:11.378 align:start position:39% line:-1
見てのとおり

00:25:11.912 --> 00:25:16.884 align:start position:30% line:-2
白く影のかかった
大きな部分がありますね

00:25:16.984 --> 00:25:18.218 align:start position:39% line:-1
これは何か？

00:25:18.685 --> 00:25:22.723 align:start position:32% line:-2
面白いことに
アセットのこの部分は

00:25:22.823 --> 00:25:25.058 align:start position:34% line:-1
もう必要ありません

00:25:25.159 --> 00:25:28.829 align:start position:30% line:-2
残りの３つで
サイズを示せるからです

00:25:29.296 --> 00:25:31.265 align:start position:34% line:-1
これがなぜ重要か？

00:25:31.798 --> 00:25:36.703 align:start position:29% line:-2
ビルドの際にXcodeが
必要な部分を認識し

00:25:36.803 --> 00:25:40.307 align:start position:23% line:-1
その他の部分はそのまま残します

00:25:40.541 --> 00:25:45.712 align:start position:25% line:-2
不要な大部分を
ディスク容量から減らせるので

00:25:45.979 --> 00:25:46.914 align:start position:43% line:-1
便利です

00:25:47.080 --> 00:25:50.350 align:start position:25% line:-1
そして２次的な利点もあります

00:25:50.450 --> 00:25:53.020 align:start position:27% line:-1
私はこれが気に入っています

00:25:53.353 --> 00:25:55.722 align:start position:30% line:-1
デザイナーはアセットを

00:25:55.856 --> 00:25:59.560 align:start position:29% line:-1
自然なサイズで作ればいい

00:25:59.660 --> 00:26:05.933 align:start position:25% line:-2
効率的に配置するため
最小サイズで最適化するなどは

00:25:59.660 --> 00:26:05.933 align:start position:25% line:-2
効率的に配置するため
最小サイズで最適化するなどは

00:26:06.033 --> 00:26:09.603 align:start position:32% line:-2
気にしなくていい
それより長期的には―

00:26:09.703 --> 00:26:13.974 align:start position:23% line:-2
ソースコードを
分かりやすくするほうが大事です

00:26:14.107 --> 00:26:16.977 align:start position:27% line:-1
配置はツールに任せましょう

00:26:18.479 --> 00:26:22.683 align:start position:29% line:-2
伸縮部は図で確認や設定を
できますが

00:26:22.783 --> 00:26:27.020 align:start position:16% line:-2
Show Slicingインスペクタも
あります

00:26:27.120 --> 00:26:29.490 align:start position:32% line:-1
両端の微調整が可能で

00:26:29.590 --> 00:26:34.628 align:start position:27% line:-2
中心部のビヘイビアを
伸縮かタイルに設定できます

00:26:35.963 --> 00:26:40.434 align:start position:25% line:-2
その結果 伸縮のメタデータを
アートワークに近付け

00:26:40.534 --> 00:26:44.805 align:start position:32% line:-2
最終的に大きな利益を
もたらすのです

00:26:44.938 --> 00:26:47.875 align:start position:27% line:-1
デザインに変更を加える際は

00:26:48.008 --> 00:26:51.645 align:start position:23% line:-1
すべてを一括で更新するだけです

00:26:51.745 --> 00:26:55.382 align:start position:27% line:-2
コードの位置を覚える必要は
ありません

00:26:55.649 --> 00:26:58.519 align:start position:25% line:-1
１ヵ所にまとまっていますから

00:27:00.621 --> 00:27:01.455 align:start position:45% line:-1
どうも

00:27:01.555 --> 00:27:03.624 align:start position:43% line:-1
(拍手)

00:27:04.591 --> 00:27:07.561 align:start position:29% line:-1
次はベクターアセットです

00:27:08.362 --> 00:27:13.233 align:start position:30% line:-2
ディスプレイの解像度は
製品によって異なるので

00:27:13.333 --> 00:27:19.773 align:start position:18% line:-2
ターゲットに合わせ1x 2x 3xの
アセットを作成します

00:27:20.007 --> 00:27:22.209 align:start position:29% line:-1
これでうまくいっています

00:27:22.509 --> 00:27:27.481 align:start position:21% line:-2
しかしデザインごとに
アセットを２～３つも納品するのは

00:27:27.948 --> 00:27:30.050 align:start position:36% line:-1
無駄とも言えます

00:27:30.684 --> 00:27:33.854 align:start position:27% line:-1
アセット１つで対応可能か？

00:27:33.954 --> 00:27:39.426 align:start position:25% line:-2
アセットカタログのPDF用
ベクターアセットなら可能です

00:27:39.626 --> 00:27:43.096 align:start position:23% line:-1
Xcodeのアセットカタログは

00:27:43.464 --> 00:27:45.532 align:start position:36% line:-1
PDFを扱えます

00:27:45.732 --> 00:27:49.469 align:start position:21% line:-1
XcodeがPDFを必要な倍率に

00:27:49.570 --> 00:27:52.639 align:start position:23% line:-1
自動で生成しラスタライズします

00:27:53.240 --> 00:27:56.210 align:start position:29% line:-2
これで異なるターゲットに
適用できます

00:27:57.044 --> 00:28:02.249 align:start position:25% line:-2
PDFのベクターアセットを
レンダリングしなくて済むので

00:27:57.044 --> 00:28:02.249 align:start position:25% line:-2
PDFのベクターアセットを
レンダリングしなくて済むので

00:28:02.349 --> 00:28:07.221 align:start position:29% line:-2
デバイスのランタイム時に
コストがかかりません

00:28:08.155 --> 00:28:10.891 align:start position:27% line:-1
安心してベクターを使えます

00:28:11.258 --> 00:28:16.163 align:start position:27% line:-2
さてアセットには
最も自然なサイズがあります

00:28:16.263 --> 00:28:18.298 align:start position:30% line:-1
しかし場合によっては―

00:28:18.398 --> 00:28:23.203 align:start position:21% line:-2
違う大きさで
アセットを表示したい時もあります

00:28:23.604 --> 00:28:28.175 align:start position:14% line:-1
昨年からiOS 11とXcode 9では

00:28:28.275 --> 00:28:30.744 align:start position:25% line:-1
ベクターデータを保存できます

00:28:31.078 --> 00:28:35.215 align:start position:27% line:-2
ですから
その画像を自然なサイズより

00:28:35.315 --> 00:28:39.152 align:start position:23% line:-1
大きな画像ビューに入れられます

00:28:39.253 --> 00:28:42.823 align:start position:21% line:-2
そして元のPDFベクターデータを
見つけます

00:28:42.990 --> 00:28:46.160 align:start position:27% line:-2
これは無関係なメタデータや
プロファイルとは

00:28:46.293 --> 00:28:49.463 align:start position:25% line:-1
切り離されてスリムな状態です

00:28:49.730 --> 00:28:54.301 align:start position:30% line:-2
サイズを変える場合のみ
再度ラスタライズします

00:28:54.401 --> 00:28:57.805 align:start position:30% line:-2
それ以外は最適化された
ビットマップを使います

00:28:58.338 --> 00:29:03.143 align:start position:27% line:-2
アプリケーションは
より柔軟に動的タイプに対応

00:28:58.338 --> 00:29:03.143 align:start position:27% line:-2
アプリケーションは
より柔軟に動的タイプに対応

00:29:03.310 --> 00:29:07.681 align:start position:14% line:-2
UIImage Viewのサイズ変更時に
画像が

00:29:07.981 --> 00:29:10.617 align:start position:27% line:-1
自動的によりハッキリします

00:29:12.453 --> 00:29:13.821 align:start position:27% line:-1
ベクターアセットは以上です

00:29:14.922 --> 00:29:19.960 align:start position:25% line:-2
次は2x用のデザインについて
お話しします

00:29:21.028 --> 00:29:23.230 align:start position:18% line:-1
2xとはRetinaディスプレイです

00:29:23.797 --> 00:29:26.833 align:start position:23% line:-1
最もよく使われている表示密度で

00:29:26.934 --> 00:29:30.771 align:start position:27% line:-1
皆さんもよくご存じでしょう

00:29:30.871 --> 00:29:35.409 align:start position:29% line:-2
すばらしいディスプレイで
大きな前進でした

00:29:35.509 --> 00:29:40.047 align:start position:25% line:-2
しかし まだ
使用するデザインによっては―

00:29:41.348 --> 00:29:45.986 align:start position:30% line:-2
細かい線やエッジが
ぼやける場合があります

00:29:46.086 --> 00:29:51.358 align:start position:25% line:-2
エッジがシャープかファジーか
分からない程度の解像度です

00:29:52.059 --> 00:29:57.030 align:start position:27% line:-2
アセットのデザインにおいて
いまだに課題です

00:29:58.165 --> 00:30:02.202 align:start position:23% line:-1
この問題の解決に役立つ技術は？

00:29:58.165 --> 00:30:02.202 align:start position:23% line:-1
この問題の解決に役立つ技術は？

00:30:03.904 --> 00:30:09.176 align:start position:20% line:-2
１つがベクターデザインツールの
ポイントバウンダリスナッピングです

00:30:09.276 --> 00:30:13.747 align:start position:21% line:-2
１ポイント間隔でグリッドを設定し
スナッピングをオンにします

00:30:13.847 --> 00:30:17.718 align:start position:21% line:-2
形やコントロールポイントの調整は
スナップだけで

00:30:17.818 --> 00:30:22.790 align:start position:29% line:-2
スナップ先の境界線は
ピクセルの境界になります

00:30:23.090 --> 00:30:24.324 align:start position:41% line:-1
便利ですね

00:30:24.591 --> 00:30:28.562 align:start position:21% line:-1
しかし次のような場合もあります

00:30:28.662 --> 00:30:31.632 align:start position:32% line:-2
なぜかエッジが
ポイントの間にくるが

00:30:32.866 --> 00:30:37.938 align:start position:16% line:-1
Retina 2xのデバイスのために―

00:30:38.071 --> 00:30:43.076 align:start position:23% line:-2
表示密度に合うよう アセットを
最適化したい場合などです

00:30:43.443 --> 00:30:46.980 align:start position:23% line:-1
そんな時は2xのグリッドを使い

00:30:47.080 --> 00:30:49.850 align:start position:23% line:-1
アセットを２倍のサイズにします

00:30:49.950 --> 00:30:54.154 align:start position:32% line:-2
つまり２ポイントが
１ピクセルグリッドで

00:30:54.254 --> 00:30:57.724 align:start position:20% line:-2
２単位が
Retinaの１ポイントになります

00:30:58.458 --> 00:31:02.596 align:start position:27% line:-2
次にアセットを調整し
ポイントスナッピングを使い

00:30:58.458 --> 00:31:02.596 align:start position:27% line:-2
次にアセットを調整し
ポイントスナッピングを使い

00:31:02.696 --> 00:31:05.933 align:start position:21% line:-1
線やエッジをポイントに合わせます

00:31:07.100 --> 00:31:10.070 align:start position:27% line:-1
では その後はどうするか？

00:31:10.170 --> 00:31:11.939 align:start position:32% line:-1
大きすぎて使えない？

00:31:12.105 --> 00:31:13.140 align:start position:43% line:-1
使えます

00:31:13.340 --> 00:31:19.012 align:start position:21% line:-2
アセットカタログのスケールビンの
2xに入れるだけです

00:31:19.113 --> 00:31:22.950 align:start position:30% line:-2
そうすればXcodeが
自動で処理します

00:31:23.050 --> 00:31:25.686 align:start position:27% line:-1
これは2xのアートワークで

00:31:25.786 --> 00:31:29.256 align:start position:21% line:-2
１ポイントは
Retinaの２ピクセルではない

00:31:29.356 --> 00:31:31.091 align:start position:32% line:-1
その逆だと認識します

00:31:31.191 --> 00:31:32.226 align:start position:39% line:-1
すべて計算し

00:31:32.326 --> 00:31:37.231 align:start position:21% line:-2
ラスタライズされたビットマップを
他の倍率にレンダリングします

00:31:37.331 --> 00:31:42.369 align:start position:25% line:-2
デザイナーは2xグリッドだけ
使えばいいのです

00:31:43.971 --> 00:31:49.810 align:start position:25% line:-2
自動のスケーリングが不十分で
まだ問題がある場合

00:31:49.910 --> 00:31:52.679 align:start position:32% line:-2
最終的に開発側で
コントロールできます

00:31:52.780 --> 00:31:57.451 align:start position:21% line:-2
ビットマップを適切な倍率のビンに
入れてください

00:31:57.551 --> 00:32:03.056 align:start position:25% line:-2
ラスタライズされたPDFより
それが優先されます

00:31:57.551 --> 00:32:03.056 align:start position:25% line:-2
ラスタライズされたPDFより
それが優先されます

00:32:04.658 --> 00:32:09.263 align:start position:25% line:-2
デザインと制作についての話は
以上です

00:32:09.363 --> 00:32:15.302 align:start position:21% line:-2
次はカタログ化と
Xcodeの構成について話します

00:32:16.270 --> 00:32:20.974 align:start position:23% line:-2
Xcodeのアセットカタログを
使ってみた方は

00:32:21.074 --> 00:32:26.880 align:start position:27% line:-2
できる事とオプションの数に
圧倒されたでしょう

00:32:27.147 --> 00:32:32.753 align:start position:29% line:-2
私は意味があるものだけを
使うことをおすすめします

00:32:32.953 --> 00:32:35.022 align:start position:30% line:-1
皆さんのプロジェクトや

00:32:35.455 --> 00:32:38.225 align:start position:23% line:-1
コンテンツに関わる項目だけです

00:32:38.325 --> 00:32:41.462 align:start position:21% line:-1
オプションは多くエンジンは強力で

00:32:41.562 --> 00:32:44.231 align:start position:27% line:-1
多くの機能が備わっています

00:32:44.331 --> 00:32:50.003 align:start position:21% line:-2
ですが目的に沿って
簡単な操作から始めてみてください

00:32:51.438 --> 00:32:57.711 align:start position:23% line:-2
これから役に立つ構成上の技法を
２つ説明していきます

00:32:57.978 --> 00:33:00.114 align:start position:32% line:-1
１つ目はバンドルです

00:32:57.978 --> 00:33:00.114 align:start position:32% line:-1
１つ目はバンドルです

00:33:00.414 --> 00:33:04.151 align:start position:27% line:-2
アセットに
なぜバンドルが関係するか？

00:33:04.251 --> 00:33:09.056 align:start position:21% line:-2
理由は
大型プロジェクトに有効だからです

00:33:09.156 --> 00:33:12.292 align:start position:30% line:-1
複数のフレームワークや

00:33:12.426 --> 00:33:16.830 align:start position:27% line:-2
複数のチームが関わる
大型プロジェクトもあります

00:33:16.930 --> 00:33:21.635 align:start position:23% line:-2
複数のアセットをすべてメインの
バンドルに集め

00:33:21.735 --> 00:33:24.104 align:start position:32% line:-1
管理するのは大変です

00:33:24.204 --> 00:33:28.175 align:start position:34% line:-2
そして該当箇所と
うまくひも付くよう

00:33:28.408 --> 00:33:31.345 align:start position:27% line:-1
名前を付ける必要があります

00:33:31.678 --> 00:33:36.517 align:start position:23% line:-2
対処法の１つは複数のバンドルを
作成することです

00:33:36.617 --> 00:33:42.289 align:start position:23% line:-2
Xcodeは各バンドルに単一の
アーティファクトを作るからです

00:33:42.456 --> 00:33:46.093 align:start position:29% line:-2
例えばアートワークだけの
バンドルを作る

00:33:46.193 --> 00:33:49.196 align:start position:27% line:-1
これは再利用のいい戦略です

00:33:49.296 --> 00:33:53.901 align:start position:29% line:-2
すべてのアートワークを
一貫したネームスペースで

00:33:54.034 --> 00:33:56.904 align:start position:25% line:-1
１つに整理して管理するのです

00:33:57.004 --> 00:34:01.942 align:start position:23% line:-2
アプリケーションの他の部分にも
画像を提供できます

00:33:57.004 --> 00:34:01.942 align:start position:23% line:-2
アプリケーションの他の部分にも
画像を提供できます

00:34:03.177 --> 00:34:05.479 align:start position:30% line:-1
どうやって取り出すか？

00:34:06.146 --> 00:34:11.217 align:start position:4% line:-2
イメージコンストラクタの
“UIImage.Name”“in: Bundle”

00:34:11.451 --> 00:34:14.321 align:start position:29% line:-1
などでバンドル引数を取得

00:34:14.420 --> 00:34:19.159 align:start position:21% line:-2
macOSにはNSBundleの
リソースがあります

00:34:19.993 --> 00:34:24.264 align:start position:29% line:-2
バンドルは
単一のネームスペースです

00:34:24.364 --> 00:34:28.335 align:start position:30% line:-2
つまりその中で
同じ名前にはできません

00:34:28.435 --> 00:34:32.105 align:start position:30% line:-2
ですが別のバンドルなら
命名規則も不要です

00:34:34.375 --> 00:34:38.645 align:start position:21% line:-1
ネームスペースについて話しますが

00:34:38.745 --> 00:34:41.114 align:start position:21% line:-1
これも大型プロジェクトの課題です

00:34:41.215 --> 00:34:44.685 align:start position:25% line:-1
次の例では大きい集まりの中に

00:34:44.784 --> 00:34:48.589 align:start position:21% line:-1
いくつかの構造が存在する場合です

00:34:49.322 --> 00:34:53.827 align:start position:27% line:-2
例えばアプリケーション内に
50の部屋があり

00:34:53.927 --> 00:34:57.965 align:start position:30% line:-2
各部屋にテーブルといす
そのアセットがあります

00:34:58.065 --> 00:35:03.404 align:start position:29% line:-2
コードにテーブルといすを
入れたいが50個もある

00:34:58.065 --> 00:35:03.404 align:start position:29% line:-2
コードにテーブルといすを
入れたいが50個もある

00:35:03.504 --> 00:35:04.705 align:start position:36% line:-1
さてどうするか？

00:35:05.138 --> 00:35:09.109 align:start position:34% line:-2
選択肢の１つは
ある命名規則を作り

00:35:09.209 --> 00:35:12.679 align:start position:32% line:-2
コードに入れますが
これは理想的ではない

00:35:12.980 --> 00:35:18.218 align:start position:9% line:-2
そこで“Provides Namespace”
オプションです

00:35:18.919 --> 00:35:24.057 align:start position:23% line:-2
アートワークをフォルダに整理し
ここをチェックします

00:35:24.157 --> 00:35:28.762 align:start position:23% line:-2
そうすればアセットカタログ内の
各画像の先頭に

00:35:28.862 --> 00:35:32.900 align:start position:34% line:-2
自動でフォルダ名を
追加するのです

00:35:33.267 --> 00:35:35.202 align:start position:30% line:-1
後で簡単に取り出せます

00:35:35.302 --> 00:35:39.773 align:start position:29% line:-2
アセットの大きな集まりを
うまく整理できます

00:35:40.574 --> 00:35:45.012 align:start position:29% line:-2
以上 カタログ化について
話しました

00:35:45.712 --> 00:35:48.749 align:start position:25% line:-1
次は配備について話しましょう

00:35:48.849 --> 00:35:51.552 align:start position:27% line:-1
この工程から楽しくなります

00:35:53.620 --> 00:35:55.989 align:start position:16% line:-1
前述のApp Thinningに関する

00:35:56.089 --> 00:36:00.194 align:start position:27% line:-2
アセットカタログの活用法を
見てみましょう

00:35:56.089 --> 00:36:00.194 align:start position:27% line:-2
アセットカタログの活用法を
見てみましょう

00:36:00.294 --> 00:36:05.065 align:start position:27% line:-2
概要としては全コンテンツの
バリアントの作成です

00:36:05.165 --> 00:36:09.436 align:start position:27% line:-2
各デバイスに合わせるための
作業です

00:36:09.536 --> 00:36:13.340 align:start position:25% line:-2
最も一般的な方法は
製品群ごとに分けるやり方です

00:36:13.440 --> 00:36:16.877 align:start position:11% line:-1
iPad iPhone TV Watchなど

00:36:16.977 --> 00:36:21.515 align:start position:21% line:-2
もしくは3xと2xの解像度ごとに
分けます

00:36:21.682 --> 00:36:25.018 align:start position:30% line:-2
コンテンツ最適化のため
バリアントを提供すると

00:36:25.219 --> 00:36:30.023 align:start position:27% line:-2
App Thinningが
正しいサブセットを選択

00:36:30.124 --> 00:36:33.760 align:start position:21% line:-2
アプリケーションを使うデバイスに
合わせます

00:36:36.263 --> 00:36:41.168 align:start position:29% line:-2
さてコンテンツの適応には
もう１つの方法があります

00:36:41.535 --> 00:36:45.672 align:start position:32% line:-2
その別のアプローチは
性能のクラスです

00:36:46.306 --> 00:36:52.579 align:start position:25% line:-2
もしアプリケーションが
すべての製品群を認識する際に

00:36:52.679 --> 00:36:58.218 align:start position:29% line:-2
先ほど述べた特徴ではなく
性能別で分けるとしたら？

00:36:58.685 --> 00:37:01.155 align:start position:25% line:-1
アセットカタログでは可能です

00:36:58.685 --> 00:37:01.155 align:start position:25% line:-1
アセットカタログでは可能です

00:37:01.321 --> 00:37:06.427 align:start position:25% line:-2
デバイスごとにハードウェアの
性能は大きく異なります

00:37:06.527 --> 00:37:12.266 align:start position:20% line:-2
例えばiOSでもiPhone 5と
最新のiPhone Xでは

00:37:12.366 --> 00:37:15.002 align:start position:30% line:-1
性能の差は非常に大きい

00:37:15.536 --> 00:37:20.941 align:start position:25% line:-2
それを利用すればサポートする
最も低性能のデバイスに

00:37:21.041 --> 00:37:24.611 align:start position:27% line:-2
アプリケーションを
合わせる必要もなくなります

00:37:24.978 --> 00:37:28.015 align:start position:23% line:-1
それを両立させるのがゴールです

00:37:28.115 --> 00:37:31.919 align:start position:21% line:-1
解決法はアダプティブリソースです

00:37:32.019 --> 00:37:33.854 align:start position:34% line:-1
これから説明します

00:37:34.388 --> 00:37:37.791 align:start position:32% line:-2
性能で区別するための
主な方法は２つ

00:37:37.891 --> 00:37:41.428 align:start position:29% line:-2
１つ目はメモリのクラスで
これは重要です

00:37:41.528 --> 00:37:44.631 align:start position:23% line:-1
１GBから４GBまで４段階あり

00:37:44.731 --> 00:37:48.669 align:start position:23% line:-1
様々な製品のメモリに対応します

00:37:48.769 --> 00:37:54.174 align:start position:25% line:-2
これはそれが何かに関わらず
すべての製品に当てはまります

00:37:55.476 --> 00:38:00.647 align:start position:29% line:-2
２つ目はグラフィックスの
クラスを使う方法です

00:37:55.476 --> 00:38:00.647 align:start position:29% line:-2
２つ目はグラフィックスの
クラスを使う方法です

00:38:00.748 --> 00:38:03.717 align:start position:23% line:-1
実際には２つのものに対応します

00:38:03.851 --> 00:38:07.454 align:start position:20% line:-1
１つ目がMetalのバージョンです

00:38:07.554 --> 00:38:11.491 align:start position:20% line:-1
それはGPUのコンセプトと同じです

00:38:11.692 --> 00:38:17.865 align:start position:23% line:-2
またデバイスの
特定のプロセッサにも一致します

00:38:18.098 --> 00:38:21.001 align:start position:25% line:-1
Metal 1はA7に対応し

00:38:21.101 --> 00:38:25.005 align:start position:20% line:-1
Metal 4はA11に対応します

00:38:25.138 --> 00:38:27.975 align:start position:27% line:-1
各グラフィックスのクラスに

00:38:28.075 --> 00:38:31.779 align:start position:21% line:-1
アセットを分類し割り当てられます

00:38:32.813 --> 00:38:36.049 align:start position:27% line:-1
どちらかだけでも強力ですが

00:38:36.149 --> 00:38:41.688 align:start position:27% line:-2
両方の特徴を組み合わせると
非常に興味深いのです

00:38:41.789 --> 00:38:45.792 align:start position:29% line:-2
性能のマトリックスを作り
アセットの適応先が

00:38:45.893 --> 00:38:49.797 align:start position:23% line:-1
どこになるか確認してみましょう

00:38:51.865 --> 00:38:53.434 align:start position:32% line:-1
具体的にどう働くか？

00:38:54.201 --> 00:38:57.838 align:start position:23% line:-1
簡単な例を使って説明しましょう

00:38:57.938 --> 00:39:02.843 align:start position:25% line:-2
これが仕組みを理解し
利用するためのキーとなります

00:38:57.938 --> 00:39:02.843 align:start position:25% line:-2
これが仕組みを理解し
利用するためのキーとなります

00:39:02.976 --> 00:39:05.946 align:start position:30% line:-1
この例のアセットは３つ

00:39:06.046 --> 00:39:11.051 align:start position:27% line:-2
“AnyとAny”は
より低性能のデバイス用です

00:39:11.151 --> 00:39:16.457 align:start position:21% line:-2
あと２つは最適化されたアセットで
３GBのMetal 3用と

00:39:16.657 --> 00:39:19.893 align:start position:25% line:-1
２GBのMetal 4用です

00:39:20.427 --> 00:39:24.398 align:start position:12% line:-1
私はiPhone 8 Plusを基準として

00:39:24.531 --> 00:39:27.334 align:start position:25% line:-1
アセットを選んでいるとします

00:39:27.534 --> 00:39:30.637 align:start position:21% line:-1
つまり４GBのMetal 4です

00:39:31.071 --> 00:39:35.409 align:start position:20% line:-1
メモリ軸の４GBには何もありません

00:39:35.909 --> 00:39:40.280 align:start position:30% line:-2
次に 他のものを探して
下がっていくと

00:39:40.380 --> 00:39:43.317 align:start position:30% line:-1
３GBが見つかりました

00:39:44.284 --> 00:39:47.154 align:start position:29% line:-1
そしてアセットを見つけ―

00:39:47.921 --> 00:39:49.423 align:start position:41% line:-1
選択します

00:39:49.556 --> 00:39:54.328 align:start position:25% line:-2
私がどのアセットを選んだかが
重要です

00:39:54.428 --> 00:39:56.296 align:start position:25% line:-1
３GBのMetal 3でした

00:39:56.396 --> 00:40:01.168 align:start position:29% line:-2
実はGPUのクラスには
一致するものがありました

00:39:56.396 --> 00:40:01.168 align:start position:29% line:-2
実はGPUのクラスには
一致するものがありました

00:40:01.301 --> 00:40:06.206 align:start position:21% line:-2
しかし メモリを
グラフィックスより先に探したため

00:40:06.306 --> 00:40:08.742 align:start position:30% line:-1
メモリから選択しました

00:40:08.842 --> 00:40:11.111 align:start position:32% line:-1
これは非常に重要です

00:40:11.211 --> 00:40:15.449 align:start position:29% line:-2
性能を決めるのは
メモリだと判断したのです

00:40:15.549 --> 00:40:19.486 align:start position:29% line:-2
それに従い
マトリックスを進みました

00:40:21.355 --> 00:40:24.191 align:start position:27% line:-1
この仕組みを生かしましょう

00:40:24.658 --> 00:40:28.428 align:start position:34% line:-2
メモリはデバイスの
ヘッドルーム全体や

00:40:28.562 --> 00:40:31.565 align:start position:27% line:-1
性能を最もよく示す指標です

00:40:31.665 --> 00:40:37.271 align:start position:29% line:-2
大きくリッチなアセットを
使いたいと思います

00:40:37.371 --> 00:40:42.009 align:start position:27% line:-2
それにはレンダリング時など
大量のメモリが必要です

00:40:42.309 --> 00:40:45.479 align:start position:32% line:-2
豊かなユーザ体験には
メモリが要ります

00:40:45.612 --> 00:40:47.748 align:start position:29% line:-1
高性能なグラフィックスは

00:40:47.848 --> 00:40:52.552 align:start position:23% line:-2
CPUとGPU両方の処理能力と
関連するため―

00:40:52.653 --> 00:40:54.855 align:start position:29% line:-1
複雑なアセットに向きます

00:40:55.255 --> 00:41:00.594 align:start position:21% line:-2
特定のGPUと機能でしかできない
シェーダを使ったり

00:40:55.255 --> 00:41:00.594 align:start position:21% line:-2
特定のGPUと機能でしかできない
シェーダを使ったり

00:41:00.694 --> 00:41:05.799 align:start position:30% line:-2
少し多めの処理が必要な
アセットを含めたり

00:41:06.233 --> 00:41:11.305 align:start position:32% line:-2
２つの例を挙げて
どうなるかを見せます

00:41:12.840 --> 00:41:16.543 align:start position:23% line:-2
NSDataAssetを用いて
説明します

00:41:16.777 --> 00:41:21.014 align:start position:16% line:-2
NSDataAssetはシンプルですが
とても強力です

00:41:21.115 --> 00:41:25.819 align:start position:23% line:-2
アセットカタログに
フレキシブルなコンテナを提供し

00:41:25.919 --> 00:41:29.356 align:start position:32% line:-2
任意のファイル周辺に
バリアントを格納

00:41:29.490 --> 00:41:33.126 align:start position:23% line:-1
画像だけでなく何でもいいのです

00:41:33.360 --> 00:41:37.498 align:start position:18% line:-1
App Thinningでこれを使い

00:41:37.598 --> 00:41:40.768 align:start position:29% line:-2
各データを各性能クラスへ
転送できます

00:41:40.868 --> 00:41:44.972 align:start position:29% line:-2
例えば ゲームの
カットシーン用の動画です

00:41:45.772 --> 00:41:51.011 align:start position:21% line:-2
性能スペクトルの中レベルの動画を
使うかもしれません

00:41:51.812 --> 00:41:55.749 align:start position:23% line:-1
またはスペクトルの最高レベルの

00:41:55.849 --> 00:42:00.788 align:start position:30% line:-2
高解像度の動画を
提供することも可能です

00:41:55.849 --> 00:42:00.788 align:start position:30% line:-2
高解像度の動画を
提供することも可能です

00:42:00.888 --> 00:42:03.023 align:start position:32% line:-1
もしくはローエンドな

00:42:03.123 --> 00:42:07.761 align:start position:25% line:-2
静止画や簡単な連続イメージも
使えます

00:42:07.861 --> 00:42:12.065 align:start position:30% line:-2
時間や過度なリソースを
かけないので

00:42:12.166 --> 00:42:14.635 align:start position:29% line:-1
使用時も反応が良いのです

00:42:15.869 --> 00:42:19.239 align:start position:29% line:-2
もう１つのより面白い例は
plistです

00:42:19.339 --> 00:42:24.244 align:start position:20% line:-2
なぜアセットカタログでplistを
使うのか？

00:42:24.344 --> 00:42:27.714 align:start position:21% line:-1
NSDataAssetと共に使い

00:42:27.814 --> 00:42:31.418 align:start position:23% line:-1
アプリケーションを調整できます

00:42:32.119 --> 00:42:37.558 align:start position:14% line:-2
NSDataAsset内で plistを
収めた性能クラスに対応する―

00:42:37.691 --> 00:42:40.127 align:start position:27% line:-1
設定パラメータを使うのです

00:42:40.227 --> 00:42:45.732 align:start position:27% line:-2
例えば雲をレンダリングする
アプリケーションで

00:42:45.833 --> 00:42:50.104 align:start position:29% line:-2
ハードウェアに合わせ
雲のサイズを設定できます

00:42:50.204 --> 00:42:54.541 align:start position:30% line:-2
使われている
実際のデバイスに合わせ

00:42:54.641 --> 00:42:56.977 align:start position:27% line:-1
コードが自動で調整されます

00:42:57.644 --> 00:43:00.981 align:start position:27% line:-1
以上が性能クラスの話でした

00:42:57.644 --> 00:43:00.981 align:start position:27% line:-1
以上が性能クラスの話でした

00:43:02.750 --> 00:43:05.786 align:start position:18% line:-1
次はSprite Atlasの話です

00:43:05.953 --> 00:43:09.790 align:start position:27% line:-2
数年前に発表された
Sprite Atlasは

00:43:09.923 --> 00:43:14.127 align:start position:27% line:-2
SpriteKitゲームを
サポートします

00:43:15.162 --> 00:43:20.367 align:start position:14% line:-1
しかし SpriteKitゲームではなく

00:43:20.467 --> 00:43:23.937 align:start position:23% line:-1
一般的なコンテキストで話します

00:43:25.305 --> 00:43:30.778 align:start position:2% line:-2
これはAutomatic Image Packingと
同様の属性を持ち

00:43:30.878 --> 00:43:34.915 align:start position:23% line:-2
Sprite Atlas内に
関連する画像を１つにまとめます

00:43:35.015 --> 00:43:40.120 align:start position:23% line:-2
画像は１度にロードされ
アトラス内で参照される全画像は

00:43:40.220 --> 00:43:44.425 align:start position:25% line:-1
アトラス内では軽量化されます

00:43:45.259 --> 00:43:46.460 align:start position:38% line:-1
すばらしいです

00:43:48.128 --> 00:43:53.934 align:start position:23% line:-2
重要なのはSpriteKitを
使わなくてもいい点です

00:43:54.034 --> 00:43:59.339 align:start position:11% line:-1
Sprite Atlasではグループを管理し

00:43:59.439 --> 00:44:00.874 align:start position:34% line:-1
名前を付けられます

00:43:59.439 --> 00:44:00.874 align:start position:34% line:-1
名前を付けられます

00:44:00.974 --> 00:44:05.379 align:start position:30% line:-2
そのように複数のものを
整理して管理できます

00:44:05.979 --> 00:44:11.251 align:start position:12% line:-2
またUIImageやNSImageのような
APIか名前で

00:44:11.351 --> 00:44:13.487 align:start position:30% line:-1
画像にアクセス可能です

00:44:13.754 --> 00:44:17.658 align:start position:29% line:-2
SpriteKit以外の
アプリケーションにも

00:44:17.758 --> 00:44:20.427 align:start position:25% line:-1
SpriteKitを使えます

00:44:20.527 --> 00:44:24.798 align:start position:0% line:-2
SKTextureAtlas.preloadTexture
AtlasesNamedです

00:44:24.898 --> 00:44:29.336 align:start position:27% line:-2
多量の画像を
すぐに読み込み使いたい時に

00:44:29.436 --> 00:44:31.939 align:start position:30% line:-1
このAPIが役立ちます

00:44:32.039 --> 00:44:35.476 align:start position:29% line:-2
それは事前に
もしくはその場でロードし

00:44:35.576 --> 00:44:38.912 align:start position:25% line:-2
デコードし
非同期でメモリに読み込みます

00:44:39.012 --> 00:44:44.585 align:start position:27% line:-2
完了ハンドラが名付けられた
アトラスを処理します

00:44:44.685 --> 00:44:47.254 align:start position:27% line:-1
使用の際は注意点もあります

00:44:47.421 --> 00:44:49.890 align:start position:27% line:-1
無差別に使わないでください

00:44:50.524 --> 00:44:53.594 align:start position:29% line:-2
指示内容を
そのまま実行するからです

00:44:53.694 --> 00:44:56.763 align:start position:20% line:-1
つまり大量のI/Oとメモリを消費し

00:44:56.864 --> 00:45:00.701 align:start position:29% line:-2
すべての画像をロードする
可能性があります

00:44:56.864 --> 00:45:00.701 align:start position:29% line:-2
すべての画像をロードする
可能性があります

00:45:00.801 --> 00:45:05.038 align:start position:29% line:-2
ですから すぐ使うべきか
正しく判断しないと

00:45:05.172 --> 00:45:07.341 align:start position:32% line:-1
大変なことになります

00:45:09.943 --> 00:45:14.081 align:start position:11% line:-1
Sprite Atlasの強みはまだあります

00:45:14.181 --> 00:45:16.350 align:start position:18% line:-1
Sprite Atlas内の全画像は

00:45:16.517 --> 00:45:21.088 align:start position:29% line:-2
アセットカタログの画像と
同じ機能が使えます

00:45:21.188 --> 00:45:25.225 align:start position:29% line:-2
例えばカタログ化や圧縮の
すべての設定と

00:45:25.325 --> 00:45:27.494 align:start position:21% line:-1
App Thinningなどです

00:45:27.594 --> 00:45:32.266 align:start position:34% line:-2
画像を自動で分割し
順番に並べます

00:45:32.566 --> 00:45:37.204 align:start position:27% line:-2
分割はピクセルやデバイスや
圧縮のタイプによります

00:45:37.304 --> 00:45:41.575 align:start position:32% line:-2
そしてすべてが適切に
読み込まれ最適化され

00:45:41.675 --> 00:45:44.244 align:start position:27% line:-1
すぐにデバイスに送られます

00:45:46.813 --> 00:45:49.283 align:start position:32% line:-1
以上が配備の話でした

00:45:49.383 --> 00:45:51.051 align:start position:34% line:-1
さあ あと少しです

00:45:51.185 --> 00:45:54.755 align:start position:32% line:-2
では重要なポイントを
おさらいしましょう

00:45:54.855 --> 00:45:56.924 align:start position:30% line:-1
何よりもまず肝心なこと

00:45:57.424 --> 00:46:01.729 align:start position:21% line:-2
画像リソースの管理には
アセットカタログが最良の選択です

00:45:57.424 --> 00:46:01.729 align:start position:21% line:-2
画像リソースの管理には
アセットカタログが最良の選択です

00:46:01.962 --> 00:46:04.631 align:start position:21% line:-1
今年は新しい圧縮で10～20％も

00:46:04.731 --> 00:46:08.435 align:start position:25% line:-1
ディスクの容量を削減できます

00:46:08.635 --> 00:46:11.138 align:start position:18% line:-1
App Thinningの改良により

00:46:11.238 --> 00:46:16.610 align:start position:25% line:-2
iOS 12のユーザは
最適化された状態を楽しめます

00:46:16.710 --> 00:46:20.180 align:start position:23% line:-1
配備ターゲットは関係ないのです

00:46:20.581 --> 00:46:26.020 align:start position:25% line:-2
アプリケーションのリソースを
デバイスに適応させる―

00:46:26.120 --> 00:46:28.422 align:start position:25% line:-1
カタログ化機能も紹介しました

00:46:29.723 --> 00:46:32.826 align:start position:25% line:-2
その他の情報は
こちらのリンクをご覧ください

00:46:33.260 --> 00:46:35.095 align:start position:41% line:-1
それでは―

00:46:35.729 --> 00:46:37.464 align:start position:34% line:-1
皆さん 良い１日を

00:46:37.564 --> 00:46:38.398 align:start position:41% line:-1
ありがとう

00:46:38.499 --> 00:46:41.235 align:start position:43% line:-1
(拍手)
