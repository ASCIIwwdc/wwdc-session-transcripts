WEBVTT

00:00:07.140 --> 00:00:16.250 align:start position:43% line:-1
(音楽)

00:00:17.351 --> 00:00:22.589 align:start position:43% line:-1
(拍手)

00:00:23.524 --> 00:00:24.658 align:start position:41% line:-1
こんにちは

00:00:25.025 --> 00:00:28.395 align:start position:23% line:-2
GPUソフトウェアエンジニアの
ショーンです

00:00:28.595 --> 00:00:31.265 align:start position:29% line:-2
レイトレーシングについて
お話しします

00:00:31.365 --> 00:00:36.069 align:start position:12% line:-2
“State of the Union”で
デモを見た人がいるでしょう

00:00:36.670 --> 00:00:39.840 align:start position:29% line:-2
自分のアプリケーションで
使いたい人も

00:00:39.940 --> 00:00:43.977 align:start position:25% line:-2
今から話すのは
アプリケーションでの使い方と

00:00:44.077 --> 00:00:47.514 align:start position:16% line:-1
Metalを用いたGPUでの高速化です

00:00:48.482 --> 00:00:51.618 align:start position:5% line:-2
Metal Performance Shaderを
使います

00:00:52.452 --> 00:00:59.927 align:start position:12% line:-2
このMPSはiOSとmacOSに最適化した
GPU計算プリミティブの集合体です

00:01:00.894 --> 00:01:06.066 align:start position:29% line:-2
画像処理と線形代数
機械学習をサポートします

00:01:06.767 --> 00:01:10.671 align:start position:30% line:-2
これまでのセッションで
ご説明しました

00:01:11.271 --> 00:01:14.675 align:start position:30% line:-2
今年はトレーニングへの
サポートも追加

00:01:14.875 --> 00:01:17.711 align:start position:23% line:-1
明日のセッションでお話しします

00:01:18.245 --> 00:01:23.116 align:start position:23% line:-2
本日はレイトレーシングに関する
新機能をご説明します

00:01:23.684 --> 00:01:26.153 align:start position:27% line:-1
まずレイトレーシングとは？

00:01:27.754 --> 00:01:30.824 align:start position:30% line:-2
レイトレーシングの
アプリケーションでは―

00:01:30.924 --> 00:01:33.861 align:start position:30% line:-1
レイの軌跡をたどります

00:01:34.494 --> 00:01:38.165 align:start position:30% line:-2
レイとは 光線や音線
その他のエネルギーです

00:01:38.398 --> 00:01:40.267 align:start position:36% line:-1
レンダリングや―

00:01:40.367 --> 00:01:44.037 align:start position:25% line:-2
音響･物理シミュレーションに
用いる方法です

00:01:44.771 --> 00:01:47.741 align:start position:30% line:-2
また レイは
ある点が見えるかなど―

00:01:47.841 --> 00:01:50.377 align:start position:27% line:-1
抽象的な概念も表せるのです

00:01:51.245 --> 00:01:56.984 align:start position:27% line:-2
従って 衝突判定や人工知能
経路探索にも使われます

00:01:57.885 --> 00:02:03.457 align:start position:25% line:-2
本日は１つの例として
レンダリングに焦点を当てます

00:01:57.885 --> 00:02:03.457 align:start position:25% line:-2
本日は１つの例として
レンダリングに焦点を当てます

00:02:05.058 --> 00:02:07.928 align:start position:30% line:-2
ラスタ化パイプラインは
ご存じですね

00:02:08.228 --> 00:02:11.665 align:start position:29% line:-2
ラスタ化では
三角形を１つずつ投影させ

00:02:11.765 --> 00:02:15.335 align:start position:32% line:-2
対応するピクセルを
シェーディングします

00:02:15.636 --> 00:02:18.672 align:start position:30% line:-2
GPUハードウェアで
素早く処理できるので―

00:02:18.772 --> 00:02:22.843 align:start position:23% line:-2
ゲームなどリアルタイムの表示に
選択されてきました

00:02:24.211 --> 00:02:29.416 align:start position:27% line:-2
しかしラスタ化では
表現しにくい現象があります

00:02:30.717 --> 00:02:32.753 align:start position:34% line:-1
例えば光の反射です

00:02:32.986 --> 00:02:35.789 align:start position:27% line:-1
ラスタ化では反射の実装に―

00:02:35.889 --> 00:02:39.693 align:start position:32% line:-2
キューブマップなどの
近似値を使います

00:02:40.527 --> 00:02:44.464 align:start position:27% line:-2
一方 レイトレーシングでは
反射を正確に計算できます

00:02:45.833 --> 00:02:47.768 align:start position:34% line:-1
２つ目の例は影です

00:02:48.068 --> 00:02:52.239 align:start position:29% line:-2
ラスタ化では
シャドウマップで影を表現

00:02:52.439 --> 00:02:57.144 align:start position:30% line:-2
しかし エイリアス化や
解像度の問題があり

00:02:57.678 --> 00:03:02.783 align:start position:30% line:-2
均一なソフトシャドウに
なりがちです

00:02:57.678 --> 00:03:02.783 align:start position:30% line:-2
均一なソフトシャドウに
なりがちです

00:03:03.584 --> 00:03:08.622 align:start position:32% line:-2
レイトレーシングでは
個々の点を計算します

00:03:08.722 --> 00:03:10.591 align:start position:32% line:-1
クリーンなシャドウで

00:03:10.691 --> 00:03:16.430 align:start position:27% line:-2
ハードからソフトシャドウに
リアルに遷移します

00:03:18.432 --> 00:03:21.034 align:start position:23% line:-2
最後の例は
グローバルイルミネーションです

00:03:22.102 --> 00:03:25.239 align:start position:23% line:-1
物体表面の照り返しを表現します

00:03:25.606 --> 00:03:29.543 align:start position:30% line:-2
ラスタ化で生成するのは
困難ですが―

00:03:29.643 --> 00:03:32.713 align:start position:32% line:-2
レイトレーシングでは
自然です

00:03:32.880 --> 00:03:37.818 align:start position:21% line:-2
ゲームやリアルタイムの
アプリケーションでは この技術で

00:03:37.918 --> 00:03:42.422 align:start position:27% line:-2
事前に計算し
テクスチャに保存しています

00:03:42.523 --> 00:03:45.492 align:start position:25% line:-1
そして実行時に表示するのです

00:03:47.294 --> 00:03:50.664 align:start position:32% line:-2
他にも多くの効果を
シミュレートできます

00:03:50.764 --> 00:03:55.035 align:start position:27% line:-2
アンビエントオクルージョン
屈折や面光源―

00:03:55.135 --> 00:03:58.405 align:start position:29% line:-2
被写界深度や
モーションブラーなどです

00:03:59.506 --> 00:04:04.745 align:start position:27% line:-2
従って写実的なオフラインの
描画に用いられます

00:03:59.506 --> 00:04:04.745 align:start position:27% line:-2
従って写実的なオフラインの
描画に用いられます

00:04:05.779 --> 00:04:10.817 align:start position:29% line:-2
しかしレイトレーシングは
作業量が膨大なため

00:04:10.918 --> 00:04:14.154 align:start position:30% line:-2
ラスタ化より
計算コストが高いのです

00:04:14.988 --> 00:04:18.392 align:start position:30% line:-2
まずレイトレーシングの
レンダリングに触れ―

00:04:18.492 --> 00:04:21.295 align:start position:21% line:-1
Metalでの高速化を説明します

00:04:23.463 --> 00:04:25.365 align:start position:25% line:-1
パストレーシング法を使います

00:04:26.400 --> 00:04:29.403 align:start position:25% line:-1
現実では光源から光子が放たれ

00:04:29.503 --> 00:04:33.173 align:start position:32% line:-2
跳ね返りながら
カメラや目に届きます

00:04:33.841 --> 00:04:37.211 align:start position:30% line:-2
ただ カメラに届くのは
光子の一部なので―

00:04:37.311 --> 00:04:39.880 align:start position:29% line:-1
すべてを追うのはムダです

00:04:40.414 --> 00:04:46.353 align:start position:27% line:-2
そこでカメラの位置から
逆方向に光をトレースします

00:04:47.120 --> 00:04:52.125 align:start position:27% line:-2
まずカメラから空間に向けて
プライマリレイを飛ばし

00:04:53.393 --> 00:04:56.363 align:start position:32% line:-2
物体との交点で
シェーディングします

00:04:56.763 --> 00:05:01.101 align:start position:32% line:-2
計算するのは
交点に届いた光量と―

00:04:56.763 --> 00:05:01.101 align:start position:32% line:-2
計算するのは
交点に届いた光量と―

00:05:01.201 --> 00:05:05.005 align:start position:29% line:-2
反射して
カメラに戻る光の割合です

00:05:05.472 --> 00:05:09.042 align:start position:25% line:-1
ここで２種類の光が登場します

00:05:10.711 --> 00:05:12.913 align:start position:32% line:-1
その１つが直接光で―

00:05:13.146 --> 00:05:17.150 align:start position:34% line:-2
光源から交点に
直接 届いた光です

00:05:18.118 --> 00:05:22.623 align:start position:30% line:-2
交点に達した光量と
反射して戻る光の割合は

00:05:22.723 --> 00:05:24.791 align:start position:34% line:-1
簡単に計算できます

00:05:25.058 --> 00:05:27.327 align:start position:32% line:-1
ライティングの前に―

00:05:27.427 --> 00:05:31.198 align:start position:32% line:-2
影の領域でないことを
確認しましょう

00:05:32.499 --> 00:05:37.905 align:start position:29% line:-2
そのために交点から光源に
シャドウレイを飛ばします

00:05:38.939 --> 00:05:41.775 align:start position:27% line:-1
レイが光源に到達しなければ

00:05:41.875 --> 00:05:46.446 align:start position:30% line:-2
その点は影ということを
意味します

00:05:48.782 --> 00:05:51.552 align:start position:29% line:-1
もう１つの光は間接光で―

00:05:52.019 --> 00:05:57.191 align:start position:29% line:-2
他の物体の表面で跳ね返り
交点に達した光です

00:05:57.858 --> 00:06:03.530 align:start position:27% line:-2
ここでは交点からランダムに
セカンダリレイを飛ばし

00:05:57.858 --> 00:06:03.530 align:start position:27% line:-2
ここでは交点からランダムに
セカンダリレイを飛ばし

00:06:04.565 --> 00:06:08.435 align:start position:32% line:-2
２番目の交点で
シェーディングします

00:06:09.837 --> 00:06:11.138 align:start position:38% line:-1
計算するのは―

00:06:11.238 --> 00:06:14.842 align:start position:32% line:-2
２番目の交点に
直接 達した光量と―

00:06:14.942 --> 00:06:19.546 align:start position:25% line:-1
反射して１番目の交点を経て―

00:06:19.646 --> 00:06:22.082 align:start position:29% line:-1
カメラに戻る光の割合です

00:06:22.850 --> 00:06:27.120 align:start position:30% line:-2
さらに２番目の交点から
シャドウレイを照射

00:06:28.856 --> 00:06:34.161 align:start position:29% line:-2
この工程を繰り返し
反射をシミュレートします

00:06:36.830 --> 00:06:40.868 align:start position:27% line:-2
ソフトシャドウと
反射光の効果を得るために―

00:06:41.001 --> 00:06:45.639 align:start position:27% line:-2
無数のシャドウレイと
セカンダリレイを飛ばします

00:06:46.406 --> 00:06:51.245 align:start position:27% line:-2
反射が増えると
レイの本数は急増するのです

00:06:51.845 --> 00:06:53.981 align:start position:30% line:-1
この増加を避けるため―

00:06:54.281 --> 00:06:59.119 align:start position:27% line:-2
それぞれのレイを反射ごとに
１本ずつにします

00:06:59.987 --> 00:07:02.289 align:start position:32% line:-1
ノイズが生じますが―

00:06:59.987 --> 00:07:02.289 align:start position:32% line:-1
ノイズが生じますが―

00:07:02.523 --> 00:07:05.859 align:start position:23% line:-1
複数フレームの平均値が出せます

00:07:06.193 --> 00:07:09.029 align:start position:32% line:-2
各フレームでは
プライマリレイを生成

00:07:09.129 --> 00:07:14.535 align:start position:23% line:-2
被写界深度や
モーションブラーも表現できます

00:07:16.470 --> 00:07:18.639 align:start position:36% line:-1
図で示しましょう

00:07:19.873 --> 00:07:22.142 align:start position:27% line:-1
まずプライマリレイを飛ばし

00:07:22.809 --> 00:07:25.112 align:start position:30% line:-1
物体との交点を求めます

00:07:26.213 --> 00:07:28.815 align:start position:27% line:-1
そしてシェーディングを計算

00:07:28.916 --> 00:07:31.118 align:start position:36% line:-1
工程を繰り返し―

00:07:31.218 --> 00:07:36.290 align:start position:23% line:-2
シャドウレイとセカンダリレイで
物体との交差を調べます

00:07:36.757 --> 00:07:39.893 align:start position:32% line:-2
最後に
計算した色を付けます

00:07:40.894 --> 00:07:43.397 align:start position:29% line:-1
以上がレンダリングですが

00:07:43.497 --> 00:07:48.435 align:start position:29% line:-2
レイと三角形の交差判定に
かなり時間がかかります

00:07:49.336 --> 00:07:54.541 align:start position:21% line:-2
つまり交差させるインターセクタは
レンダリング全体に―

00:07:54.641 --> 00:07:57.644 align:start position:32% line:-1
大きく影響するのです

00:07:58.412 --> 00:08:03.283 align:start position:25% line:-2
レイトレーシングの
アプリケーションでも同様です

00:07:58.412 --> 00:08:03.283 align:start position:25% line:-2
レイトレーシングの
アプリケーションでも同様です

00:08:04.785 --> 00:08:07.921 align:start position:29% line:-1
この問題を解決するために

00:08:08.021 --> 00:08:13.493 align:start position:29% line:-2
高性能なインターセクタを
提供することにしました

00:08:14.661 --> 00:08:18.632 align:start position:9% line:-2
今年 導入する
MPSRayIntersectorのAPIです

00:08:19.566 --> 00:08:22.936 align:start position:14% line:-1
macOSとiOSデバイスのGPU上で―

00:08:23.036 --> 00:08:27.207 align:start position:30% line:-1
交差判定を高速化します

00:08:28.442 --> 00:08:33.881 align:start position:23% line:-2
レイは まとめて
Metalバッファに格納します

00:08:34.548 --> 00:08:37.751 align:start position:23% line:-1
最も近い交点をMPSが見つけ―

00:08:37.851 --> 00:08:40.254 align:start position:29% line:-1
別のバッファに格納します

00:08:40.654 --> 00:08:43.957 align:start position:29% line:-2
あとは
交差判定をしたい箇所で―

00:08:44.057 --> 00:08:47.761 align:start position:25% line:-2
Metalコマンドバッファを
提供するだけ

00:08:47.861 --> 00:08:51.465 align:start position:21% line:-1
そこに交差情報をエンコードします

00:08:52.699 --> 00:08:55.669 align:start position:30% line:-1
詳しくご説明しましょう

00:08:59.640 --> 00:09:00.507 align:start position:41% line:-1
出ましたね

00:08:59.640 --> 00:09:00.507 align:start position:41% line:-1
出ましたね

00:09:01.475 --> 00:09:05.479 align:start position:36% line:-2
3Dモデルは通常
三角形で表します

00:09:06.013 --> 00:09:09.016 align:start position:23% line:-1
これらの三角形とレイの交点を―

00:09:09.116 --> 00:09:11.919 align:start position:32% line:-1
調べる必要があります

00:09:12.853 --> 00:09:17.858 align:start position:30% line:-2
また レイの始点に
最も近い交点を求めます

00:09:19.026 --> 00:09:20.794 align:start position:32% line:-1
一番 単純な方法は―

00:09:20.894 --> 00:09:24.932 align:start position:32% line:-2
すべての三角形で
交点を求めることです

00:09:25.232 --> 00:09:28.936 align:start position:27% line:-1
しかし時間がかかりすぎます

00:09:29.803 --> 00:09:34.007 align:start position:29% line:-2
そこで“加速構造”という
データ構造を作成

00:09:34.608 --> 00:09:37.845 align:start position:23% line:-1
再帰的にシーンを分割することで

00:09:37.945 --> 00:09:41.215 align:start position:32% line:-2
空間内で近い三角形を
グループ化

00:09:42.382 --> 00:09:47.955 align:start position:29% line:-2
ツリー内の境界ボックスと
レイを交差させます

00:09:48.255 --> 00:09:52.159 align:start position:30% line:-2
交差しないサブツリーは
スキップして

00:09:52.993 --> 00:09:57.931 align:start position:32% line:-2
交点を求める三角形を
最終的に残すのです

00:09:59.032 --> 00:10:02.236 align:start position:27% line:-1
以上が交差判定の高速化です

00:09:59.032 --> 00:10:02.236 align:start position:27% line:-1
以上が交差判定の高速化です

00:10:03.203 --> 00:10:05.539 align:start position:27% line:-1
これは単純化した例なので―

00:10:06.073 --> 00:10:10.177 align:start position:36% line:-2
実際の加速構造は
もう少し複雑です

00:10:11.278 --> 00:10:13.146 align:start position:38% line:-1
この画像では―

00:10:13.247 --> 00:10:17.284 align:start position:30% line:-2
複雑なジオメトリに
加速構造を使っています

00:10:17.751 --> 00:10:21.154 align:start position:29% line:-2
つまり
大半の時間を費やすのは―

00:10:21.255 --> 00:10:25.392 align:start position:30% line:-2
ジオメトリの
複雑な範囲だけなのです

00:10:26.460 --> 00:10:32.232 align:start position:30% line:-2
加速構造の理解のため
このことに触れています

00:10:32.432 --> 00:10:34.902 align:start position:34% line:-1
でも心配は無用です

00:10:35.002 --> 00:10:37.404 align:start position:25% line:-1
MPSがすべてサポートします

00:10:38.939 --> 00:10:41.308 align:start position:34% line:-1
三角形のモデルは―

00:10:41.708 --> 00:10:45.946 align:start position:27% line:-2
頂点として
頂点バッファに格納されます

00:10:46.713 --> 00:10:52.352 align:start position:23% line:-2
MPSを呼び 頂点バッファから
加速構造を作ってください

00:10:53.287 --> 00:10:58.559 align:start position:27% line:-2
交差判定の際 加速構造を
インターセクタに提供します

00:10:59.560 --> 00:11:02.396 align:start position:34% line:-2
アプリケーションで
使ってみましょう

00:10:59.560 --> 00:11:02.396 align:start position:34% line:-2
アプリケーションで
使ってみましょう

00:11:03.363 --> 00:11:05.632 align:start position:36% line:-1
３段階に分けます

00:11:05.732 --> 00:11:08.068 align:start position:27% line:-1
まずプライマリレイを生成し

00:11:08.168 --> 00:11:11.538 align:start position:32% line:-2
交点を求めて
シェーディングを計算

00:11:11.905 --> 00:11:17.077 align:start position:32% line:-2
ラスタ化と同じですが
次の段階があります

00:11:18.145 --> 00:11:19.880 align:start position:39% line:-1
次に影を生成

00:11:19.980 --> 00:11:24.852 align:start position:25% line:-2
MPSがシャドウレイを支援し
速度が上がります

00:11:26.086 --> 00:11:30.791 align:start position:27% line:-2
最後にセカンダリレイで
光の跳ね返りをシミュレート

00:11:31.291 --> 00:11:33.627 align:start position:29% line:-1
ラスタ化では困難ですが―

00:11:33.727 --> 00:11:37.064 align:start position:32% line:-2
レイトレーシングでは
簡単な拡張機能です

00:11:38.599 --> 00:11:40.334 align:start position:25% line:-1
まず プライマリレイですが―

00:11:41.568 --> 00:11:43.637 align:start position:30% line:-1
次の５つの処理をします

00:11:44.271 --> 00:11:47.107 align:start position:32% line:-1
インターセクタを生成

00:11:48.442 --> 00:11:51.612 align:start position:23% line:-1
頂点バッファから加速構造を作成

00:11:53.380 --> 00:11:57.151 align:start position:30% line:-2
プライマリレイを生成し
レイバッファに格納

00:11:58.652 --> 00:12:03.357 align:start position:30% line:-2
インターセクタで
レイと物体の交差を判定

00:11:58.652 --> 00:12:03.357 align:start position:30% line:-2
インターセクタで
レイと物体の交差を判定

00:12:03.924 --> 00:12:07.928 align:start position:32% line:-2
最後に その結果から
シェーディングを計算

00:12:09.096 --> 00:12:10.998 align:start position:34% line:-2
では まず
インターセクタです

00:12:12.499 --> 00:12:17.671 align:start position:12% line:-2
MPSRayIntersectorクラスで
交差判定を支援

00:12:18.238 --> 00:12:23.377 align:start position:20% line:-2
交差判定に使うMetalデバイスを
提供するだけで作成できます

00:12:25.279 --> 00:12:27.481 align:start position:30% line:-1
次は加速構造の作成です

00:12:28.882 --> 00:12:32.820 align:start position:0% line:-2
MPSTriangleAccelerationStructure
クラスで―

00:12:32.986 --> 00:12:38.358 align:start position:18% line:-2
インターセクタの時と同じ
Metalデバイスを提供するだけです

00:12:39.960 --> 00:12:43.630 align:start position:18% line:-2
vertexBufferをアタッチし
triangleCountを指定

00:12:44.198 --> 00:12:47.367 align:start position:27% line:-1
そして加速構造を構築します

00:12:47.467 --> 00:12:53.006 align:start position:30% line:-2
１回 作成しておけば
何度でも再利用できます

00:12:56.543 --> 00:13:00.280 align:start position:27% line:-2
次はプライマリレイの生成と
バッファ格納です

00:12:56.543 --> 00:13:00.280 align:start position:27% line:-2
次はプライマリレイの生成と
バッファ格納です

00:13:01.048 --> 00:13:05.886 align:start position:27% line:-2
ピクセルごとに１スレッドで
2D計算カーネルを起動

00:13:06.420 --> 00:13:10.057 align:start position:27% line:-2
各スレッドに
このレイ構造体を記述します

00:13:11.358 --> 00:13:15.929 align:start position:27% line:-2
カメラの前に
平面が浮き出るイメージです

00:13:17.297 --> 00:13:22.135 align:start position:30% line:-2
プライマリレイの始点は
カメラの位置にします

00:13:22.636 --> 00:13:24.404 align:start position:36% line:-1
方向については―

00:13:24.505 --> 00:13:29.676 align:start position:27% line:-2
カメラ前の画面上の
ピクセルを通して計算します

00:13:32.479 --> 00:13:36.783 align:start position:32% line:-2
次はインターセクタで
交差を判定

00:13:38.185 --> 00:13:42.656 align:start position:16% line:-2
encodeIntersectionで
すべてを結び付けます

00:13:43.357 --> 00:13:47.060 align:start position:25% line:-2
エンコードは
Metalコマンドバッファに

00:13:47.828 --> 00:13:51.765 align:start position:32% line:-2
交点の求め方は
いくつかありますが―

00:13:51.932 --> 00:13:56.637 align:start position:30% line:-2
この場合は各レイで
最も近い交点を使います

00:13:58.071 --> 00:14:03.043 align:start position:29% line:-2
そしてプライマリレイを
格納したレイバッファと―

00:13:58.071 --> 00:14:03.043 align:start position:29% line:-2
そしてプライマリレイを
格納したレイバッファと―

00:14:03.310 --> 00:14:06.813 align:start position:25% line:-2
交差情報を
格納するバッファを提供します

00:14:07.748 --> 00:14:12.853 align:start position:29% line:-2
画像の幅×高さで示される
レイの本数も必要です

00:14:13.687 --> 00:14:16.356 align:start position:27% line:-1
最後に加速構造を提供します

00:14:17.624 --> 00:14:23.063 align:start position:27% line:-2
MPSは最も近い交点を求め
交差情報をバッファに格納

00:14:23.230 --> 00:14:27.000 align:start position:23% line:-1
あとはシェーディングの計算です

00:14:28.535 --> 00:14:31.071 align:start position:25% line:-1
別の計算カーネルを起動します

00:14:31.572 --> 00:14:35.809 align:start position:30% line:-2
フラグメントシェーダと
同様の処理が可能です

00:14:35.909 --> 00:14:40.481 align:start position:27% line:-2
標準的なテクスチャや関数が
計算カーネルでも―

00:14:40.581 --> 00:14:42.616 align:start position:39% line:-1
利用できます

00:14:43.684 --> 00:14:46.653 align:start position:29% line:-1
しかしシェーディングには

00:14:46.753 --> 00:14:49.823 align:start position:23% line:-1
交点と頂点属性の両方が必要です

00:14:49.990 --> 00:14:53.727 align:start position:27% line:-2
フラグメントシェーダがする
頂点属性の補間は

00:14:53.827 --> 00:14:57.564 align:start position:32% line:-2
交差データに基づき
自分で行ってください

00:14:58.832 --> 00:15:01.735 align:start position:29% line:-1
まず交点を計算しましょう

00:14:58.832 --> 00:15:01.735 align:start position:29% line:-1
まず交点を計算しましょう

00:15:03.103 --> 00:15:06.573 align:start position:23% line:-1
レイは始点と方向で定義されます

00:15:09.343 --> 00:15:13.080 align:start position:27% line:-2
これが
交差判定の結果の構造体です

00:15:13.447 --> 00:15:15.148 align:start position:32% line:-1
distanceに―

00:15:15.249 --> 00:15:20.754 align:start position:29% line:-2
レイの始点から交点までの
距離が示されます

00:15:20.988 --> 00:15:24.458 align:start position:36% line:-2
交差がない場合は
負となります

00:15:26.426 --> 00:15:29.496 align:start position:23% line:-2
primitiveIndexは
交差した三角形を示し

00:15:30.230 --> 00:15:33.800 align:start position:27% line:-2
最終フィールドは
頂点属性の補間に使用します

00:15:35.035 --> 00:15:39.206 align:start position:30% line:-2
ここには UとVという
重心座標が入り

00:15:39.306 --> 00:15:44.545 align:start position:32% line:-2
三角形の頂点に対する
交点の位置を示します

00:15:45.412 --> 00:15:49.016 align:start position:34% line:-2
３つ目の重心座標は
合計の１から―

00:15:49.116 --> 00:15:54.021 align:start position:29% line:-2
先ほどの２つの座標を引き
Wを算出します

00:15:55.422 --> 00:16:01.628 align:start position:25% line:-2
三角形の各頂点で
頂点属性が定義されていれば―

00:15:55.422 --> 00:16:01.628 align:start position:25% line:-2
三角形の各頂点で
頂点属性が定義されていれば―

00:16:02.262 --> 00:16:07.868 align:start position:27% line:-2
補間されるのは 重心座標で
加重和された属性です

00:16:08.168 --> 00:16:11.071 align:start position:23% line:-1
例えば 頂点の色属性があれば―

00:16:11.171 --> 00:16:15.642 align:start position:32% line:-2
各頂点の色の加重和が
補間された色です

00:16:18.111 --> 00:16:22.816 align:start position:27% line:-2
ここまででインターセクタと
加速構造を作成

00:16:23.450 --> 00:16:27.721 align:start position:29% line:-2
プライマリレイを生成して
交点を調べ―

00:16:28.222 --> 00:16:32.826 align:start position:29% line:-2
シェーディングを計算して
色を付けました

00:16:32.926 --> 00:16:34.695 align:start position:36% line:-1
画像を見ましょう

00:16:35.963 --> 00:16:39.266 align:start position:27% line:-1
加速構造が表すジオメトリと

00:16:39.366 --> 00:16:42.936 align:start position:23% line:-2
補間した頂点色とライティングが
確認できます

00:16:43.804 --> 00:16:47.341 align:start position:29% line:-1
さらに効果を加えましょう

00:16:48.642 --> 00:16:51.278 align:start position:34% line:-1
まずは影を加えます

00:16:53.347 --> 00:16:55.782 align:start position:32% line:-1
シェーディング点に―

00:16:55.883 --> 00:17:00.087 align:start position:30% line:-2
光が到達していることを
確認しましょう

00:16:55.883 --> 00:17:00.087 align:start position:30% line:-2
光が到達していることを
確認しましょう

00:17:00.821 --> 00:17:06.393 align:start position:29% line:-2
そのために交点から光源に
シャドウレイを飛ばします

00:17:07.528 --> 00:17:12.332 align:start position:30% line:-2
光源に到達しなければ
その点は影ということで

00:17:12.432 --> 00:17:14.701 align:start position:27% line:-1
色を加えないほうがいいです

00:17:17.570 --> 00:17:19.640 align:start position:25% line:-1
シャドウレイを格納するために

00:17:19.740 --> 00:17:22.976 align:start position:29% line:-2
シェーディングカーネルを
修正します

00:17:24.310 --> 00:17:27.347 align:start position:30% line:-1
そして再び交差を判定し

00:17:28.015 --> 00:17:29.783 align:start position:34% line:-1
最終カーネルを起動

00:17:29.883 --> 00:17:33.053 align:start position:29% line:-2
シャドウレイの交差情報に
基づき―

00:17:33.153 --> 00:17:35.889 align:start position:29% line:-1
画像に色付けしてくれます

00:17:36.857 --> 00:17:39.426 align:start position:27% line:-2
まずは
シェーディングカーネルです

00:17:40.794 --> 00:17:43.931 align:start position:29% line:-2
シャドウレイは
プライマリレイと違います

00:17:44.031 --> 00:17:47.734 align:start position:27% line:-2
光源へのオーバーシュートを
避けるため―

00:17:47.834 --> 00:17:50.704 align:start position:29% line:-1
交差距離を最大に取ります

00:17:52.406 --> 00:17:59.012 align:start position:23% line:-2
三角形インデックスや
重心座標を知る必要はありません

00:18:00.180 --> 00:18:04.017 align:start position:29% line:-2
シェーディング点が
影でないと確認するまで―

00:18:04.117 --> 00:18:07.554 align:start position:30% line:-1
色を加えてもいけません

00:18:07.788 --> 00:18:12.359 align:start position:27% line:-2
シェーディングカーネルから
インターセクタを通じ―

00:18:12.459 --> 00:18:15.596 align:start position:27% line:-1
最終カーネルに色を伝えます

00:18:16.263 --> 00:18:18.899 align:start position:23% line:-1
レイ構造体をカスタムしましょう

00:18:22.135 --> 00:18:26.673 align:start position:32% line:-2
まずインターセクタに
渡すデータを選びます

00:18:27.074 --> 00:18:31.545 align:start position:27% line:-2
最小と最大距離の
フィールドを含むデータです

00:18:32.246 --> 00:18:35.449 align:start position:20% line:-1
MPSは この範囲外の交差を無視し

00:18:35.549 --> 00:18:38.619 align:start position:27% line:-2
光源へのオーバーシュートを
避けます

00:18:40.020 --> 00:18:44.925 align:start position:27% line:-2
次にアプリケーション固有の
データがあるなら―

00:18:45.025 --> 00:18:49.229 align:start position:23% line:-1
レイ構造体の最後に追加できます

00:18:49.663 --> 00:18:53.133 align:start position:30% line:-2
そうすれば
読み出す際に飛ばします

00:18:53.734 --> 00:18:56.870 align:start position:29% line:-2
この場合は
色のシェードを加えれば―

00:18:56.970 --> 00:19:00.774 align:start position:23% line:-1
最終カーネルに伝達されるのです

00:18:56.970 --> 00:19:00.774 align:start position:23% line:-1
最終カーネルに伝達されるのです

00:19:02.142 --> 00:19:04.845 align:start position:27% line:-1
インターセクタに構成します

00:19:05.179 --> 00:19:08.816 align:start position:16% line:-1
まず rayDataTypeを設定し―

00:19:10.551 --> 00:19:14.188 align:start position:14% line:-1
それから rayStrideを設定します

00:19:16.457 --> 00:19:19.092 align:start position:25% line:-1
次にシャドウレイを飛ばします

00:19:20.794 --> 00:19:23.230 align:start position:30% line:-1
これは元の呼び出しです

00:19:23.464 --> 00:19:28.769 align:start position:21% line:-2
シャドウレイの目的は
光源から見えるかどうかの確認です

00:19:28.869 --> 00:19:30.871 align:start position:34% line:-1
２つ最適化できます

00:19:31.472 --> 00:19:34.775 align:start position:29% line:-1
１つ目は レイと同様に―

00:19:34.875 --> 00:19:40.447 align:start position:25% line:-2
交差データタイプや
戻すデータをカスタムすること

00:19:41.882 --> 00:19:47.087 align:start position:27% line:-2
この場合は距離の正負で
交差の有無が確認できるので

00:19:47.387 --> 00:19:50.524 align:start position:32% line:-2
データタイプを
距離だけに設定します

00:19:50.624 --> 00:19:55.395 align:start position:21% line:-2
これで読み書きするメモリ帯域幅が
節約できます

00:19:57.297 --> 00:20:00.834 align:start position:32% line:-2
２つ目は
いずれかの三角形に―

00:19:57.297 --> 00:20:00.834 align:start position:32% line:-2
２つ目は
いずれかの三角形に―

00:20:00.934 --> 00:20:04.538 align:start position:29% line:-2
交差した時点で
交点探しを終えることです

00:20:04.638 --> 00:20:08.509 align:start position:30% line:-2
最も近い交点を探すより
速くなります

00:20:09.009 --> 00:20:10.911 align:start position:18% line:-1
intersectionTypeを―

00:20:11.011 --> 00:20:15.482 align:start position:20% line:-2
“nearest”から“any”に
変えてください

00:20:18.285 --> 00:20:22.322 align:start position:27% line:-2
最後に最終カーネルを起動し
色を加えます

00:20:24.124 --> 00:20:29.263 align:start position:27% line:-2
各スレッドがシャドウレイと
交差データを読み込みます

00:20:30.164 --> 00:20:32.299 align:start position:34% line:-1
交差距離が正なら―

00:20:32.399 --> 00:20:36.737 align:start position:29% line:-2
交点は影なので
それ以上の作業は不要です

00:20:37.404 --> 00:20:40.040 align:start position:25% line:-1
正以外なら 影ではないので―

00:20:41.108 --> 00:20:44.978 align:start position:23% line:-1
レイの色を読み込み 画像に反映

00:20:45.879 --> 00:20:48.315 align:start position:30% line:-1
このように影を付けます

00:20:50.651 --> 00:20:54.688 align:start position:30% line:-2
光源から各点が見えるか
確認してから―

00:20:54.788 --> 00:20:56.957 align:start position:30% line:-1
ライティングを加えます

00:20:57.524 --> 00:20:59.426 align:start position:30% line:-1
レイトレーシングでは―

00:20:59.526 --> 00:21:04.731 align:start position:25% line:-2
表面をランダムにトレースし
美しいソフトシャドウにします

00:20:59.526 --> 00:21:04.731 align:start position:25% line:-2
表面をランダムにトレースし
美しいソフトシャドウにします

00:21:07.201 --> 00:21:09.603 align:start position:29% line:-1
最後はセカンダリレイです

00:21:11.104 --> 00:21:15.008 align:start position:34% line:-2
光の跳ね返りを
シミュレートします

00:21:15.542 --> 00:21:20.114 align:start position:34% line:-2
すべてのカーネルを
ループで繰り返し―

00:21:20.380 --> 00:21:25.152 align:start position:30% line:-2
各回でランダムな方向に
レイを飛ばします

00:21:29.623 --> 00:21:31.458 align:start position:36% line:-1
繰り返しのため―

00:21:31.558 --> 00:21:34.394 align:start position:29% line:-2
シェーディングカーネルを
修正します

00:21:35.062 --> 00:21:37.130 align:start position:34% line:-1
画像を更新したら―

00:21:37.231 --> 00:21:40.367 align:start position:29% line:-1
最初の交差判定に戻ります

00:21:40.634 --> 00:21:44.304 align:start position:29% line:-2
このループを
好きなだけ繰り返すのです

00:21:47.107 --> 00:21:49.610 align:start position:25% line:-1
ではカーネルを修正しましょう

00:21:51.745 --> 00:21:56.083 align:start position:34% line:-2
各回でレイの始点を
交点に移動させ

00:21:57.484 --> 00:22:00.187 align:start position:27% line:-1
ランダムな方向に飛ばします

00:21:57.484 --> 00:22:00.187 align:start position:27% line:-1
ランダムな方向に飛ばします

00:22:01.288 --> 00:22:05.959 align:start position:27% line:-2
レイの色と補間した頂点色を
掛け合わせて―

00:22:06.727 --> 00:22:11.231 align:start position:32% line:-2
跳ね返った表面の色を
反映させるのです

00:22:11.698 --> 00:22:16.303 align:start position:27% line:-2
高度なアプリケーションでは
複雑な計算をしますが

00:22:16.470 --> 00:22:21.708 align:start position:21% line:-2
慎重にランダムな方向を選ぶことで
計算が楽になります

00:22:22.409 --> 00:22:25.345 align:start position:30% line:-1
逆方向のトレースでも―

00:22:25.445 --> 00:22:30.484 align:start position:27% line:-2
各交点でレイの色合いを
直接光に付ければよいのです

00:22:31.685 --> 00:22:33.921 align:start position:29% line:-1
以上がセカンダリレイです

00:22:35.055 --> 00:22:40.828 align:start position:27% line:-2
光が壁で跳ね返り
箱や天井に入射していますね

00:22:41.995 --> 00:22:43.931 align:start position:36% line:-1
適用例は以上です

00:22:44.765 --> 00:22:49.002 align:start position:32% line:-2
まずプライマリレイと
シェーディング

00:22:49.603 --> 00:22:51.271 align:start position:38% line:-1
次に影を加え―

00:22:51.371 --> 00:22:55.509 align:start position:30% line:-2
最後にセカンダリレイで
光を跳ね返らせます

00:22:56.076 --> 00:23:00.047 align:start position:36% line:-2
デモに切り替えて
見てみましょう

00:22:56.076 --> 00:23:00.047 align:start position:36% line:-2
デモに切り替えて
見てみましょう

00:23:03.917 --> 00:23:08.956 align:start position:20% line:-2
12.9インチのiPad Proで
動かしています

00:23:09.590 --> 00:23:11.692 align:start position:29% line:-1
アプリケーションを拡張し

00:23:11.792 --> 00:23:15.896 align:start position:29% line:-2
高度なライティングや
シェーディングなどを支援

00:23:16.029 --> 00:23:20.734 align:start position:29% line:-2
これらの機能を使った
複雑なシーンを見ましょう

00:23:25.939 --> 00:23:28.041 align:start position:12% line:-2
“State of the Union”で
お見せした―

00:23:28.141 --> 00:23:32.279 align:start position:2% line:-2
“Amazon Lumberyard Bistro”の
シーンです

00:23:32.646 --> 00:23:35.349 align:start position:21% line:-1
使われている三角形は約100万個

00:23:35.449 --> 00:23:37.918 align:start position:30% line:-1
iPad Pro上で―

00:23:38.018 --> 00:23:42.356 align:start position:25% line:-2
毎秒2000万本近くのレイを
実現しています

00:23:42.456 --> 00:23:46.994 align:start position:29% line:-2
プライマリやシャドウ
セカンダリレイの合計です

00:23:48.262 --> 00:23:51.532 align:start position:29% line:-2
このような
アプリケーションの実装に

00:23:51.632 --> 00:23:55.002 align:start position:21% line:-1
簡単に使えるAPIを作成しました

00:23:55.936 --> 00:23:57.738 align:start position:32% line:-1
ではデモを終わります

00:23:59.139 --> 00:24:00.140 align:start position:41% line:-1
ありがとう

00:23:59.139 --> 00:24:00.140 align:start position:41% line:-1
ありがとう

00:24:00.240 --> 00:24:03.377 align:start position:43% line:-1
(拍手)

00:24:03.477 --> 00:24:08.482 align:start position:25% line:-2
このアプリケーションは
サンプルとして提供するので―

00:24:09.049 --> 00:24:12.386 align:start position:32% line:-2
お話ししたこと以外も
確認できます

00:24:12.553 --> 00:24:15.389 align:start position:25% line:-1
サンプルをダウンロードして―

00:24:15.489 --> 00:24:19.126 align:start position:29% line:-2
ご自身でジオメトリなどを
加えてください

00:24:19.459 --> 00:24:23.597 align:start position:27% line:-2
まだご説明していないことが
多くあるので―

00:24:23.697 --> 00:24:27.334 align:start position:34% line:-2
ドキュメントなどで
ご確認ください

00:24:27.734 --> 00:24:30.470 align:start position:21% line:-1
マルチGPUへの拡張については―

00:24:30.571 --> 00:24:33.373 align:start position:30% line:-1
ウェインがお話しします

00:24:35.542 --> 00:24:36.410 align:start position:41% line:-1
ありがとう

00:24:36.510 --> 00:24:41.949 align:start position:43% line:-1
(拍手)

00:24:42.049 --> 00:24:43.083 align:start position:41% line:-1
ありがとう

00:24:43.584 --> 00:24:44.518 align:start position:41% line:-1
こんにちは

00:24:47.921 --> 00:24:52.359 align:start position:20% line:-1
Macには内蔵GPUがありますが―

00:24:52.459 --> 00:24:56.497 align:start position:32% line:-2
高性能のeGPUを
複数 外付けできます

00:24:57.397 --> 00:25:01.201 align:start position:23% line:-1
これらのGPUをすべて使って―

00:24:57.397 --> 00:25:01.201 align:start position:23% line:-1
これらのGPUをすべて使って―

00:25:01.301 --> 00:25:04.338 align:start position:34% line:-2
レイトレーシングを
高速化しましょう

00:25:05.172 --> 00:25:09.576 align:start position:27% line:-2
そのために検討すべきことが
３つあります

00:25:10.210 --> 00:25:14.281 align:start position:27% line:-2
１つ目は
どのように処理を分散するか

00:25:15.649 --> 00:25:20.587 align:start position:30% line:-2
２つ目は GPUが
データを交換する時に―

00:25:20.687 --> 00:25:22.823 align:start position:38% line:-1
どう対処するか

00:25:23.757 --> 00:25:27.027 align:start position:29% line:-2
３つ目は
どのように同期するかです

00:25:27.561 --> 00:25:32.065 align:start position:23% line:-2
今週 導入する
Metalイベントを紹介します

00:25:32.633 --> 00:25:33.867 align:start position:39% line:-1
始めましょう

00:25:35.169 --> 00:25:36.437 align:start position:36% line:-1
処理の分散には―

00:25:36.537 --> 00:25:39.306 align:start position:34% line:-2
スプリットフレーム
レンダリングです

00:25:39.740 --> 00:25:42.910 align:start position:29% line:-1
まずフレームを領域に分割

00:25:43.010 --> 00:25:48.715 align:start position:25% line:-2
次に各領域をGPUに割り当て
並行してレンダリングします

00:25:49.850 --> 00:25:53.954 align:start position:27% line:-2
各GPUは完全な
レンダリングパイプラインで

00:25:54.054 --> 00:25:59.092 align:start position:27% line:-2
レイの生成や
シェーディングを処理します

00:26:00.260 --> 00:26:05.265 align:start position:29% line:-2
すべてのGPUで
処理が終われば取り出し―

00:26:05.666 --> 00:26:09.203 align:start position:29% line:-1
領域全体をコピーして合成

00:26:10.470 --> 00:26:15.542 align:start position:21% line:-2
合成では 領域をつなげて
１つのフレームバッファに入れます

00:26:15.943 --> 00:26:19.046 align:start position:32% line:-2
あるいは 以前の
レンダリング結果と―

00:26:19.146 --> 00:26:21.715 align:start position:27% line:-1
合わせてノイズを除去します

00:26:23.484 --> 00:26:29.156 align:start position:23% line:-2
レンダリング前に必ず
各GPUにシーンをコピーします

00:26:30.057 --> 00:26:35.696 align:start position:27% line:-2
頂点バッファやテクスチャは
全GPUに複製してください

00:26:36.463 --> 00:26:40.067 align:start position:21% line:-1
ショーンが紹介した加速構造もです

00:26:42.402 --> 00:26:44.638 align:start position:32% line:-1
加速構造については―

00:26:44.738 --> 00:26:49.209 align:start position:29% line:-2
各GPUでゼロから
作成するのは避けたいです

00:26:49.510 --> 00:26:51.111 align:start position:32% line:-1
そこで追加したのが―

00:26:51.211 --> 00:26:57.217 align:start position:21% line:-2
既存の加速構造を
各GPUにコピーできるAPIです

00:26:58.085 --> 00:27:00.854 align:start position:25% line:-1
このコピーは非再帰的なので―

00:26:58.085 --> 00:27:00.854 align:start position:25% line:-1
このコピーは非再帰的なので―

00:27:00.954 --> 00:27:07.027 align:start position:25% line:-2
加速構造にアタッチした頂点と
インデックスのバッファなどは

00:27:07.327 --> 00:27:09.029 align:start position:34% line:-1
別々にコピーして―

00:27:09.129 --> 00:27:12.766 align:start position:30% line:-2
先ほど作った加速構造に
アタッチします

00:27:16.036 --> 00:27:20.574 align:start position:29% line:-2
これで すべてのGPUに
データを複製しました

00:27:21.909 --> 00:27:24.778 align:start position:27% line:-1
マルチGPUにしましたが―

00:27:24.878 --> 00:27:29.650 align:start position:29% line:-2
この部分のパイプラインは
ほぼ変わりありません

00:27:30.117 --> 00:27:32.686 align:start position:29% line:-1
ただしマルチGPUでは―

00:27:32.786 --> 00:27:38.058 align:start position:29% line:-2
各GPUが処理する画面に
再生成してはなりません

00:27:38.425 --> 00:27:40.027 align:start position:36% line:-1
その他は同じです

00:27:40.828 --> 00:27:46.300 align:start position:29% line:-2
次は マルチGPUで
最も気をつけたい段階で―

00:27:46.533 --> 00:27:48.902 align:start position:36% line:-1
最終的な合成です

00:27:51.305 --> 00:27:57.377 align:start position:21% line:-2
各GPUはプライベートバッファに
レンダリングするのがベストです

00:27:58.011 --> 00:27:59.780 align:start position:32% line:-1
レンダリング後には―

00:27:59.880 --> 00:28:04.117 align:start position:30% line:-2
合成に使うGPUに
バッファをコピーします

00:27:59.880 --> 00:28:04.117 align:start position:30% line:-2
合成に使うGPUに
バッファをコピーします

00:28:04.918 --> 00:28:07.187 align:start position:29% line:-1
Metalのリソースは―

00:28:07.287 --> 00:28:11.058 align:start position:30% line:-2
それが作られた
デバイスでのみ使えます

00:28:11.391 --> 00:28:13.360 align:start position:34% line:-1
従ってバッファを―

00:28:13.460 --> 00:28:17.831 align:start position:29% line:-2
別のGPUにアタッチし
blit転送はできません

00:28:18.799 --> 00:28:21.735 align:start position:32% line:-2
システムメモリを通じ
コピーします

00:28:23.270 --> 00:28:27.908 align:start position:34% line:-2
効率的に行う方法を
お見せしましょう

00:28:29.276 --> 00:28:35.115 align:start position:20% line:-2
別のデバイスのMetalバッファに
共通のCPUを割り当てます

00:28:35.949 --> 00:28:38.952 align:start position:25% line:-1
バッファは同じメモリをラップ

00:28:39.052 --> 00:28:42.156 align:start position:29% line:-2
デバイスAのバッファへの
書き込みは―

00:28:42.356 --> 00:28:45.392 align:start position:27% line:-2
デバイスBのバッファからも
見えます

00:28:46.860 --> 00:28:50.964 align:start position:25% line:-2
macOSのパフォーマンスを
優先するため―

00:28:51.064 --> 00:28:54.635 align:start position:30% line:-2
プライベートバッファで
レンダリングします

00:28:55.135 --> 00:29:00.574 align:start position:23% line:-2
システムメモリを通じて領域を
別のGPUにblit転送します

00:28:55.135 --> 00:29:00.574 align:start position:23% line:-2
システムメモリを通じて領域を
別のGPUにblit転送します

00:29:01.909 --> 00:29:04.211 align:start position:30% line:-1
設定をご説明しましょう

00:29:04.945 --> 00:29:09.049 align:start position:30% line:-2
デバイスAのバッファは
共有ストレージモード

00:29:09.650 --> 00:29:12.319 align:start position:23% line:-1
内部でシステムメモリを割り当て

00:29:12.486 --> 00:29:15.656 align:start position:18% line:-1
.contentsメソッドを使います

00:29:18.559 --> 00:29:20.594 align:start position:29% line:-1
デバイスBのバッファは―

00:29:20.694 --> 00:29:25.365 align:start position:25% line:-2
NoCopyで バッファAに
割り当てたメモリをラップ

00:29:26.900 --> 00:29:32.406 align:start position:27% line:-2
このAPIでバッファは
ページサイズの倍数にします

00:29:32.673 --> 00:29:35.642 align:start position:29% line:-1
長さを水増ししてください

00:29:38.745 --> 00:29:43.383 align:start position:32% line:-2
メモリを共有したので
同期について考えます

00:29:43.817 --> 00:29:49.223 align:start position:27% line:-2
２つのGPUの動きを示した
タイムラインの一例です

00:29:49.456 --> 00:29:52.926 align:start position:34% line:-2
黒ボックスは
コマンドバッファで

00:29:53.026 --> 00:29:58.832 align:start position:29% line:-2
緑ボックスは バッファに
エンコードした処理です

00:29:59.900 --> 00:30:03.237 align:start position:34% line:-2
上のGPUは
レンダリングをして

00:29:59.900 --> 00:30:03.237 align:start position:34% line:-2
上のGPUは
レンダリングをして

00:30:03.403 --> 00:30:08.642 align:start position:27% line:-2
処理し終えた領域を
共有バッファにblit転送

00:30:09.910 --> 00:30:14.047 align:start position:30% line:-2
同時にGPU Bも
レンダリングを行います

00:30:15.015 --> 00:30:17.885 align:start position:30% line:-1
合成に用いるGPUです

00:30:18.051 --> 00:30:22.456 align:start position:25% line:-2
GPU Aが作ったバッファが
必要になります

00:30:23.323 --> 00:30:25.125 align:start position:36% line:-1
ここで問題が発生

00:30:25.826 --> 00:30:28.462 align:start position:30% line:-1
この部分は同期しません

00:30:28.862 --> 00:30:34.468 align:start position:29% line:-2
GPU Aの書き込み中に
GPU Bが読み出します

00:30:35.602 --> 00:30:38.272 align:start position:23% line:-1
ここでMetalイベントを使用

00:30:38.939 --> 00:30:42.409 align:start position:30% line:-2
コマンドバッファに
“Wait”を入れます

00:30:42.943 --> 00:30:47.548 align:start position:32% line:-2
実行中のGPUは
ここで処理を止めて―

00:30:48.649 --> 00:30:51.952 align:start position:21% line:-1
他方のGPUのシグナルを待ちます

00:30:53.453 --> 00:30:57.958 align:start position:25% line:-2
GPU Aが書き込みを終えて
シグナルを発すると

00:30:58.058 --> 00:31:00.627 align:start position:29% line:-1
GPU Bが読み出せます

00:30:58.058 --> 00:31:00.627 align:start position:29% line:-1
GPU Bが読み出せます

00:31:02.529 --> 00:31:05.899 align:start position:27% line:-1
これで同期の問題は解決です

00:31:06.667 --> 00:31:11.371 align:start position:30% line:-2
しかし高性能なGPUを
遊ばせておくのは―

00:31:11.472 --> 00:31:13.173 align:start position:36% line:-1
もったいないです

00:31:13.707 --> 00:31:19.479 align:start position:30% line:-2
GPUが待機する時間は
できるだけ短くしたい

00:31:20.814 --> 00:31:23.317 align:start position:25% line:-1
ここでロードバランシングです

00:31:24.518 --> 00:31:27.955 align:start position:27% line:-2
GPUに対して
均等に画面を分割したことで

00:31:28.055 --> 00:31:29.990 align:start position:34% line:-1
問題が発生しました

00:31:30.257 --> 00:31:34.828 align:start position:27% line:-2
まずGPUの性能差を
考慮していないのが問題です

00:31:35.696 --> 00:31:40.300 align:start position:30% line:-2
一方のGPUが速ければ
先に処理を終えます

00:31:41.535 --> 00:31:47.274 align:start position:29% line:-2
また 画面の領域によって
複雑さが違うのも問題です

00:31:47.474 --> 00:31:51.011 align:start position:30% line:-2
複雑なジオメトリなどが
あり得ます

00:31:52.246 --> 00:31:56.283 align:start position:29% line:-2
つまり領域を
調整する必要があるのです

00:31:56.783 --> 00:32:01.255 align:start position:29% line:-2
各GPUがレンダリングに
かかる時間を―

00:31:56.783 --> 00:32:01.255 align:start position:29% line:-2
各GPUがレンダリングに
かかる時間を―

00:32:01.355 --> 00:32:02.923 align:start position:36% line:-1
同じにするのです

00:32:04.191 --> 00:32:09.863 align:start position:27% line:-2
では まず固定された分割を
変えて処理しましょう

00:32:10.531 --> 00:32:13.367 align:start position:27% line:-1
GPUの実行時間を計って―

00:32:13.467 --> 00:32:17.638 align:start position:32% line:-2
次に割り当てる領域の
広さを判断します

00:32:19.873 --> 00:32:22.643 align:start position:29% line:-1
処理中に これを続けます

00:32:23.210 --> 00:32:27.047 align:start position:29% line:-1
画面のどの部分であろうと

00:32:27.147 --> 00:32:30.317 align:start position:25% line:-1
GPUの性能に合わせられます

00:32:32.753 --> 00:32:37.758 align:start position:27% line:-2
コマンドバッファ
完了ハンドラを使いましょう

00:32:38.692 --> 00:32:42.563 align:start position:27% line:-2
これは コマンドバッファの
実行後に―

00:32:42.663 --> 00:32:45.632 align:start position:32% line:-2
使えるCPUコードの
ブロックです

00:32:46.767 --> 00:32:48.936 align:start position:23% line:-1
iOSではコマンドバッファに―

00:32:49.036 --> 00:32:54.408 align:start position:25% line:-2
GPUでの実行に必要な時間が
分かるプロパティがあります

00:32:55.475 --> 00:32:59.713 align:start position:27% line:-2
しかし macOSでは
近似値を出す必要があります

00:33:00.681 --> 00:33:05.919 align:start position:25% line:-2
完了ハンドラが呼び出されると
ホスト時間が残ります

00:33:06.353 --> 00:33:08.522 align:start position:34% line:-1
その時間の差から―

00:33:08.622 --> 00:33:12.826 align:start position:23% line:-1
GPUの実行時間が分かるのです

00:33:13.327 --> 00:33:18.732 align:start position:29% line:-2
例えば これら３つの
コマンドバッファの場合は

00:33:18.832 --> 00:33:24.304 align:start position:29% line:-2
３と０で完了ハンドラが
呼び出された時間の差です

00:33:26.473 --> 00:33:30.144 align:start position:27% line:-1
ではデモをお見せしましょう

00:33:42.055 --> 00:33:47.027 align:start position:30% line:-2
ショーンが先ほど
お見せしたシーンですね

00:33:47.427 --> 00:33:49.830 align:start position:25% line:-1
MacBook Pro上です

00:33:50.764 --> 00:33:52.633 align:start position:38% line:-1
画面の左上に―

00:33:52.733 --> 00:33:57.004 align:start position:29% line:-2
毎秒 放射しているレイの
本数を表示しています

00:33:57.104 --> 00:33:59.073 align:start position:34% line:-1
プライマリレイと―

00:33:59.173 --> 00:34:03.610 align:start position:30% line:-2
セカンダリレイと
シャドウレイの合計です

00:33:59.173 --> 00:34:03.610 align:start position:30% line:-2
セカンダリレイと
シャドウレイの合計です

00:34:04.311 --> 00:34:07.247 align:start position:27% line:-2
現在は
毎秒 およそ3000万本で

00:34:07.347 --> 00:34:10.317 align:start position:29% line:-1
この数字を上げたいですね

00:34:10.417 --> 00:34:14.254 align:start position:29% line:-2
外付けしていたeGPUを
１台 有効にします

00:34:16.822 --> 00:34:18.257 align:start position:34% line:-1
画面の表示どおり―

00:34:18.358 --> 00:34:22.362 align:start position:27% line:-2
RX 580と内蔵GPUで
動かしています

00:34:22.562 --> 00:34:26.266 align:start position:27% line:-2
性能は倍加して
毎秒 約6000万レイです

00:34:26.833 --> 00:34:28.202 align:start position:41% line:-1
緑の線で―

00:34:28.302 --> 00:34:31.972 align:start position:30% line:-2
GPUごとの作業領域を
分けています

00:34:32.072 --> 00:34:34.908 align:start position:30% line:-1
一方のGPUが線の上を

00:34:35.007 --> 00:34:37.543 align:start position:29% line:-1
他方が下を担当しています

00:34:38.645 --> 00:34:42.549 align:start position:34% line:-2
eGPUで２倍ほど
速くなりましたが―

00:34:43.116 --> 00:34:45.619 align:start position:34% line:-1
もっと速くなるはず

00:34:45.719 --> 00:34:49.723 align:start position:32% line:-2
問題はeGPUが
待機していることです

00:34:50.090 --> 00:34:52.292 align:start position:34% line:-1
分割を固定せずに―

00:34:52.592 --> 00:34:55.728 align:start position:25% line:-1
ロードバランシングを変えます

00:34:56.096 --> 00:34:59.133 align:start position:20% line:-1
RX 580の担当領域がかなり増え

00:34:59.233 --> 00:35:01.902 align:start position:27% line:-1
速度も飛躍的に向上しました

00:34:59.233 --> 00:35:01.902 align:start position:27% line:-1
速度も飛躍的に向上しました

00:35:04.405 --> 00:35:07.074 align:start position:32% line:-2
使われている三角形は
約100万個

00:35:07.174 --> 00:35:09.710 align:start position:29% line:-1
では外のシーンに移ります

00:35:09.810 --> 00:35:13.146 align:start position:0% line:-2
同じく
“Amazon Lumberyard Bistro”です

00:35:13.247 --> 00:35:16.717 align:start position:32% line:-2
使われている三角形は
約300万個

00:35:17.484 --> 00:35:20.888 align:start position:27% line:-1
さらにGPUを有効にします

00:35:20.988 --> 00:35:24.157 align:start position:27% line:-1
今回は Vega 64です

00:35:24.792 --> 00:35:27.161 align:start position:32% line:-1
担当領域が広いですね

00:35:28.762 --> 00:35:33.534 align:start position:25% line:-2
まったく異なる３つのGPUが
動いています

00:35:33.634 --> 00:35:36.937 align:start position:30% line:-2
アーキテクチャも性能も
違うGPUが―

00:35:37.037 --> 00:35:39.807 align:start position:27% line:-1
見事な描画を実現しています

00:35:43.510 --> 00:35:48.582 align:start position:43% line:-1
(拍手)

00:35:50.884 --> 00:35:53.887 align:start position:16% line:-2
ご紹介した
MPSRayIntersectorは―

00:35:53.987 --> 00:35:58.592 align:start position:32% line:-2
GPUで交差判定を
高速化するAPIです

00:35:59.727 --> 00:36:04.531 align:start position:25% line:-2
すべてのiOSとmacOSで
利用できます

00:35:59.727 --> 00:36:04.531 align:start position:25% line:-2
すべてのiOSとmacOSで
利用できます

00:36:04.631 --> 00:36:08.302 align:start position:25% line:-1
マルチGPUで拡張も可能です

00:36:09.670 --> 00:36:13.841 align:start position:34% line:-2
皆さんがどう使うか
楽しみにしています

00:36:14.041 --> 00:36:16.977 align:start position:29% line:-2
本日はパストレーシングを
使いました

00:36:17.311 --> 00:36:20.814 align:start position:27% line:-2
ハイブリッドレンダリングも
あります

00:36:20.914 --> 00:36:24.618 align:start position:27% line:-2
アンビエントオクルージョン
美しい影や反射も

00:36:25.285 --> 00:36:27.221 align:start position:30% line:-1
レンダリング以外にも―

00:36:27.387 --> 00:36:33.260 align:start position:27% line:-2
音響や物理シミュレーション
人工知能などにも使われます

00:36:34.828 --> 00:36:36.630 align:start position:36% line:-1
皆さんのために―

00:36:38.632 --> 00:36:43.270 align:start position:14% line:-2
developer.apple.comで
サンプルコードを紹介しています

00:36:43.370 --> 00:36:47.307 align:start position:23% line:-1
詳細やご紹介できなかった機能は

00:36:47.407 --> 00:36:50.544 align:start position:25% line:-1
ドキュメントでご確認ください

00:36:51.311 --> 00:36:54.214 align:start position:36% line:-2
明日のラボでは
ショーンと僕が―

00:36:54.515 --> 00:36:59.987 align:start position:25% line:-2
アプリケーションで使えるよう
皆さんをサポートします

00:37:00.087 --> 00:37:01.922 align:start position:30% line:-1
どうぞ参加してください

00:37:02.556 --> 00:37:04.825 align:start position:30% line:-1
ありがとうございました

00:37:04.925 --> 00:37:07.261 align:start position:27% line:-1
WWDCをお楽しみください

00:37:07.461 --> 00:37:12.733 align:start position:43% line:-1
(拍手)
