WEBVTT

00:00:07.074 --> 00:00:16.717 align:start position:43% line:-1
(音楽)

00:00:20.821 --> 00:00:25.993 align:start position:43% line:-1
(拍手)

00:00:26.093 --> 00:00:27.628 align:start position:41% line:-1
こんにちは

00:00:27.728 --> 00:00:30.697 align:start position:34% line:-1
お集まりいただき―

00:00:30.831 --> 00:00:33.167 align:start position:32% line:-1
ありがとうございます

00:00:33.267 --> 00:00:36.970 align:start position:36% line:-2
今日は皆さんに
自然言語処理の―

00:00:37.070 --> 00:00:39.940 align:start position:29% line:-1
新たな機能をご紹介します

00:00:40.541 --> 00:00:44.945 align:start position:29% line:-2
私 ヴィヴェクと
同僚のダグがお話しします

00:00:45.045 --> 00:00:46.346 align:start position:39% line:-1
では始めます

00:00:47.581 --> 00:00:50.784 align:start position:30% line:-1
昨年 ご紹介したのは―

00:00:51.051 --> 00:00:54.221 align:start position:27% line:-1
自然言語処理の応用方法です

00:00:54.755 --> 00:00:57.591 align:start position:34% line:-2
アプリケーションが
より賢くなりました

00:00:58.192 --> 00:01:01.762 align:start position:16% line:-2
NSLinguisticTaggerを
使えば―

00:00:58.192 --> 00:01:01.762 align:start position:16% line:-2
NSLinguisticTaggerを
使えば―

00:01:01.862 --> 00:01:04.131 align:start position:32% line:-1
APIが利用可能です

00:01:05.032 --> 00:01:09.203 align:start position:16% line:-2
NSLinguisticTaggerが
提供するのは―

00:01:09.536 --> 00:01:14.441 align:start position:32% line:-2
自然言語処理に必要な
クラスと基本処理です

00:01:14.575 --> 00:01:17.177 align:start position:32% line:-1
言語の識別や構成理解

00:01:17.277 --> 00:01:19.680 align:start position:27% line:-1
品詞タグ付けなどを含みます

00:01:20.280 --> 00:01:24.051 align:start position:38% line:-2
従来の言語学と
機械学習を―

00:01:24.151 --> 00:01:26.620 align:start position:30% line:-1
有機的に結びつけました

00:01:26.920 --> 00:01:30.524 align:start position:29% line:-1
APIを活用することで―

00:01:30.624 --> 00:01:32.426 align:start position:34% line:-1
開発に集中できます

00:01:33.093 --> 00:01:36.597 align:start position:36% line:-2
今年の新技術を
ご紹介しましょう

00:01:37.297 --> 00:01:42.803 align:start position:14% line:-2
新たなフレームワーク
“Natural Language”です

00:01:43.170 --> 00:01:46.073 align:start position:30% line:-1
デバイスに依存せずに―

00:01:46.173 --> 00:01:50.811 align:start position:29% line:-2
自然言語処理を開発できる
フレームワークです

00:01:51.512 --> 00:01:55.682 align:start position:20% line:-2
Natural Languageの
優れた機能を紹介します

00:01:56.984 --> 00:02:00.654 align:start position:25% line:-1
APIを一から作り直しました

00:01:56.984 --> 00:02:00.654 align:start position:25% line:-1
APIを一から作り直しました

00:02:01.154 --> 00:02:05.526 align:start position:16% line:-2
NSLinguisticTaggerの
全機能をサポートします

00:02:05.759 --> 00:02:08.729 align:start position:25% line:-1
SwiftベースのAPIです

00:02:09.630 --> 00:02:13.867 align:start position:32% line:-2
さらに好きなモデルを
使うことも可能です

00:02:13.967 --> 00:02:16.770 align:start position:20% line:-2
モデルは
Create MLを使えば作成でき

00:02:16.870 --> 00:02:21.408 align:start position:5% line:-2
Core MLかNatural Languageで
展開できます

00:02:22.609 --> 00:02:26.413 align:start position:20% line:-2
Natural Languageの
全機能は―

00:02:26.513 --> 00:02:31.385 align:start position:27% line:-2
Appleのハードウェアに
最適化されています

00:02:32.319 --> 00:02:35.989 align:start position:36% line:-2
そして すべて
単独で動作します

00:02:36.089 --> 00:02:39.927 align:start position:18% line:-2
Natural Language内の
機械学習は―

00:02:40.027 --> 00:02:42.796 align:start position:23% line:-1
ユーザのプライバシーを守ります

00:02:42.896 --> 00:02:46.166 align:start position:27% line:-2
これは
Appleが提供している―

00:02:46.266 --> 00:02:49.837 align:start position:27% line:-1
機械学習の仕組みと同じです

00:02:50.437 --> 00:02:53.841 align:start position:36% line:-2
各APIの機能を
ご説明しましょう

00:02:53.941 --> 00:02:56.143 align:start position:25% line:-1
まずはSwift APIです

00:02:58.245 --> 00:03:00.247 align:start position:18% line:-1
Natural Languageは―

00:02:58.245 --> 00:03:00.247 align:start position:18% line:-1
Natural Languageは―

00:03:00.347 --> 00:03:03.350 align:start position:16% line:-2
NSLinguisticTaggerと
同じ機能を持ちます

00:03:03.450 --> 00:03:07.254 align:start position:29% line:-2
それでいて
より使いやすくなりました

00:03:07.955 --> 00:03:10.991 align:start position:27% line:-2
架空の
アプリケーションを使って―

00:03:11.091 --> 00:03:13.760 align:start position:29% line:-1
APIをご紹介しましょう

00:03:15.095 --> 00:03:18.699 align:start position:27% line:-2
皆さんがアプリケーションを
作ったとします

00:03:19.600 --> 00:03:24.371 align:start position:29% line:-2
メッセージング機能のある
アプリケーションです

00:03:25.405 --> 00:03:29.309 align:start position:27% line:-1
メッセージの内容に応じて―

00:03:29.409 --> 00:03:33.447 align:start position:34% line:-2
適切なステッカーが
表示されます

00:03:33.547 --> 00:03:38.218 align:start position:27% line:-2
これは“疲れた　おやすみ”
というメッセージです

00:03:38.318 --> 00:03:41.288 align:start position:29% line:-1
表示されたステッカーは―

00:03:41.388 --> 00:03:45.259 align:start position:34% line:-2
そのまま貼り付けて
送信できます

00:03:45.359 --> 00:03:49.329 align:start position:36% line:-2
高い評価を
受けている一方―

00:03:49.830 --> 00:03:53.200 align:start position:30% line:-2
“多言語化していない”
という声も

00:03:53.634 --> 00:03:58.939 align:start position:29% line:-2
最近では複数言語を
使うユーザも増えています

00:03:59.039 --> 00:04:03.343 align:start position:30% line:-2
でも中国語には
対応していませんでした

00:03:59.039 --> 00:04:03.343 align:start position:30% line:-2
でも中国語には
対応していませんでした

00:04:03.944 --> 00:04:07.147 align:start position:12% line:-1
Natural Languageの出番です

00:04:08.282 --> 00:04:11.985 align:start position:34% line:-2
２つのAPIで
簡単に解決できます

00:04:12.119 --> 00:04:14.288 align:start position:38% line:-1
１つは言語識別

00:04:15.022 --> 00:04:19.059 align:start position:16% line:-2
まずNatural Languageを
インポートします

00:04:19.760 --> 00:04:23.597 align:start position:12% line:-2
NLLanguageRecognizerの
インスタンスを作成し

00:04:24.364 --> 00:04:26.767 align:start position:30% line:-1
処理したい文字列を入力

00:04:27.167 --> 00:04:30.037 align:start position:20% line:-2
dominantLanguageを
呼び出します

00:04:30.370 --> 00:04:33.640 align:start position:32% line:-2
すると最も
可能性の高い言語が―

00:04:34.007 --> 00:04:36.076 align:start position:39% line:-1
判定されます

00:04:36.677 --> 00:04:39.746 align:start position:30% line:-1
簡体字と判定されました

00:04:40.447 --> 00:04:43.317 align:start position:20% line:-2
Natural Languageは
新しいAPIもサポート

00:04:43.417 --> 00:04:48.288 align:start position:34% line:-2
可能性の高い言語を
知りたい場合に―

00:04:48.488 --> 00:04:52.960 align:start position:30% line:-2
上位の候補を
割り出すことができます

00:04:53.060 --> 00:04:57.898 align:start position:32% line:-2
マルチリンガルな
アプリケーションで―

00:04:57.998 --> 00:05:01.668 align:start position:29% line:-1
さまざまな応用が可能です

00:04:57.998 --> 00:05:01.668 align:start position:29% line:-1
さまざまな応用が可能です

00:05:02.169 --> 00:05:06.006 align:start position:12% line:-2
languageHypothesesという
APIを使います

00:05:06.106 --> 00:05:08.675 align:start position:27% line:-1
出力する候補数を設定すると

00:05:08.775 --> 00:05:13.680 align:start position:30% line:-2
その候補と それぞれの
確率が出力されます

00:05:14.548 --> 00:05:19.520 align:start position:29% line:-2
次に この文字列を
トークン化してみましょう

00:05:19.987 --> 00:05:21.989 align:start position:20% line:-2
Natural Languageを
インポートし

00:05:22.289 --> 00:05:24.825 align:start position:29% line:-2
NLTokenizerの
インスタンスを作成

00:05:25.125 --> 00:05:28.328 align:start position:27% line:-1
いくつかの文字をつなげて―

00:05:28.428 --> 00:05:31.064 align:start position:32% line:-1
単語として識別します

00:05:32.733 --> 00:05:34.168 align:start position:38% line:-1
文字列を入力し

00:05:34.501 --> 00:05:38.372 align:start position:16% line:-2
オブジェクトの
“tokens”メソッドを呼び出します

00:05:39.039 --> 00:05:41.508 align:start position:36% line:-1
単語が現れました

00:05:41.909 --> 00:05:46.747 align:start position:34% line:-2
“おやすみ”という
単語も入っています

00:05:47.347 --> 00:05:50.717 align:start position:27% line:-1
これで多言語に対応しました

00:05:50.918 --> 00:05:55.923 align:start position:21% line:-2
言語識別のAPIと
トークン化のAPIを使うことで―

00:05:56.023 --> 00:05:58.192 align:start position:38% line:-1
実現できました

00:05:58.959 --> 00:06:00.961 align:start position:34% line:-1
別のAPIのお話を

00:05:58.959 --> 00:06:00.961 align:start position:34% line:-1
別のAPIのお話を

00:06:01.061 --> 00:06:04.064 align:start position:32% line:-2
言語識別と
トークン化以外にも―

00:06:04.164 --> 00:06:07.868 align:start position:30% line:-2
品詞タグ付けや
情報抽出も必要でしょう

00:06:07.968 --> 00:06:11.138 align:start position:29% line:-2
再び架空の
アプリケーションを使って

00:06:11.238 --> 00:06:13.240 align:start position:36% line:-1
説明していきます

00:06:14.241 --> 00:06:17.444 align:start position:32% line:-2
これはニュース
アプリケーションです

00:06:17.544 --> 00:06:21.915 align:start position:23% line:-1
ロイヤルウェディングについて―

00:06:22.015 --> 00:06:25.385 align:start position:27% line:-1
興味のある人がいるとします

00:06:25.652 --> 00:06:28.255 align:start position:32% line:-1
関連する記事を読み―

00:06:28.422 --> 00:06:31.925 align:start position:36% line:-2
“ハリー”で
検索をかけました

00:06:32.292 --> 00:06:35.529 align:start position:30% line:-1
ところが出てくるのは―

00:06:35.629 --> 00:06:39.466 align:start position:27% line:-1
まったく関係ないものばかり

00:06:39.566 --> 00:06:41.535 align:start position:38% line:-1
探したいのは―

00:06:42.002 --> 00:06:45.172 align:start position:27% line:-1
ハリー王子の結婚の記事です

00:06:45.272 --> 00:06:50.644 align:start position:25% line:-2
固有表現抽出のAPIを使えば
問題を解決できます

00:06:51.311 --> 00:06:54.381 align:start position:30% line:-1
やはり手順は似ています

00:06:54.481 --> 00:06:57.584 align:start position:12% line:-1
NSLinguisticTaggerより―

00:06:57.684 --> 00:07:01.989 align:start position:30% line:-2
はるかに
使いやすくなっています

00:06:57.684 --> 00:07:01.989 align:start position:30% line:-2
はるかに
使いやすくなっています

00:07:02.689 --> 00:07:04.391 align:start position:20% line:-2
Natural Languageを
インポートし

00:07:04.825 --> 00:07:07.261 align:start position:34% line:-2
NLTaggerの
インスタンスを作成

00:07:07.628 --> 00:07:10.364 align:start position:21% line:-1
“nameType”と指定します

00:07:10.831 --> 00:07:15.169 align:start position:18% line:-2
品詞タグ付けなら
“lexicalClass”とします

00:07:15.969 --> 00:07:18.839 align:start position:34% line:-2
処理したい文字列を
入力します

00:07:19.373 --> 00:07:22.776 align:start position:38% line:-2
ここでは言語を
英語にして―

00:07:22.910 --> 00:07:24.912 align:start position:39% line:-1
説明をします

00:07:25.279 --> 00:07:29.016 align:start position:34% line:-2
その言語を
知らなくても大丈夫

00:07:29.116 --> 00:07:32.186 align:start position:18% line:-1
Natural Languageが―

00:07:32.286 --> 00:07:35.222 align:start position:30% line:-1
自動で言語を認識します

00:07:36.156 --> 00:07:40.661 align:start position:25% line:-2
最後に“tags”メソッドを
呼び出し―

00:07:40.761 --> 00:07:44.364 align:start position:27% line:-2
引数に“word”と
“nameType”を指定

00:07:44.932 --> 00:07:48.202 align:start position:30% line:-2
“ハリー王子”と
“メーガン･マークル”

00:07:48.302 --> 00:07:51.638 align:start position:36% line:-2
“ウィンザー”も
抽出されました

00:07:51.738 --> 00:07:56.109 align:start position:32% line:-2
閲覧履歴の
文脈情報に基づいて―

00:07:56.210 --> 00:08:01.215 align:start position:29% line:-2
検索結果の質を
高めることができるのです

00:07:56.210 --> 00:08:01.215 align:start position:29% line:-2
検索結果の質を
高めることができるのです

00:08:03.750 --> 00:08:06.887 align:start position:23% line:-1
APIの活用法に関する情報は―

00:08:06.987 --> 00:08:10.090 align:start position:30% line:-2
ドキュメンテーションで
ご覧ください

00:08:10.324 --> 00:08:12.259 align:start position:18% line:-1
Natural Languageは―

00:08:12.359 --> 00:08:15.729 align:start position:16% line:-2
NSLinguisticTaggerの
機能を含みつつ

00:08:15.829 --> 00:08:18.332 align:start position:29% line:-1
未来的な機能を実現します

00:08:18.432 --> 00:08:22.236 align:start position:32% line:-2
このフレームワークに
移行して―

00:08:22.336 --> 00:08:26.406 align:start position:34% line:-2
新しい機能を
使ってみてください

00:08:27.274 --> 00:08:30.777 align:start position:29% line:-2
話は変わり
こんな状況があるとします

00:08:30.878 --> 00:08:33.212 align:start position:30% line:-2
作りたい
アプリケーションがある

00:08:33.580 --> 00:08:38.385 align:start position:16% line:-2
でもNatural Languageが
必要な機能を提供してない

00:08:39.520 --> 00:08:40.554 align:start position:41% line:-1
どうするか

00:08:41.621 --> 00:08:45.125 align:start position:34% line:-2
機能を実装するのも
手でしょう

00:08:45.225 --> 00:08:48.562 align:start position:27% line:-1
でも便利なツールがあれば？

00:08:50.964 --> 00:08:56.136 align:start position:27% line:-2
Create MLを使った
カスタムモデルの作り方

00:08:56.236 --> 00:09:01.241 align:start position:29% line:-2
そして それらのモデルの
使い方について―

00:08:56.236 --> 00:09:01.241 align:start position:29% line:-2
そして それらのモデルの
使い方について―

00:09:01.475 --> 00:09:03.343 align:start position:34% line:-1
ダグがお話しします

00:09:03.443 --> 00:09:07.948 align:start position:43% line:-1
(拍手)

00:09:09.750 --> 00:09:10.918 align:start position:30% line:-1
ありがとう ヴィヴェク

00:09:11.051 --> 00:09:15.556 align:start position:30% line:-2
新たなフレームワークに
興奮しています

00:09:15.656 --> 00:09:17.691 align:start position:30% line:-1
何より うれしいのは―

00:09:17.791 --> 00:09:22.930 align:start position:30% line:-2
カスタムモデルを
サポートできたことです

00:09:23.330 --> 00:09:26.867 align:start position:27% line:-2
ご自身のアプリケーションを
考えてください

00:09:27.134 --> 00:09:31.104 align:start position:32% line:-2
すでに作ったもの
これから作りたいもの

00:09:31.305 --> 00:09:34.908 align:start position:34% line:-2
もう少しテキストを
知っていれば―

00:09:35.008 --> 00:09:39.846 align:start position:27% line:-2
ユーザ体験を
高めることができるはずです

00:09:40.314 --> 00:09:44.785 align:start position:32% line:-2
テキストをどのように
分析していますか？

00:09:44.885 --> 00:09:50.257 align:start position:29% line:-2
おそらく例を見て
そこから学習するでしょう

00:09:50.591 --> 00:09:55.195 align:start position:30% line:-2
テキストに
さっと目を通すだけで―

00:09:55.295 --> 00:09:58.732 align:start position:34% line:-2
書かれている内容を
理解します

00:09:59.266 --> 00:10:03.070 align:start position:36% line:-2
機械も同じように
理解できるはず

00:09:59.266 --> 00:10:03.070 align:start position:36% line:-2
機械も同じように
理解できるはず

00:10:03.170 --> 00:10:04.771 align:start position:34% line:-1
機械学習モデルを―

00:10:05.539 --> 00:10:07.608 align:start position:38% line:-1
訓練するのです

00:10:07.708 --> 00:10:11.578 align:start position:34% line:-2
アプリケーションが
自動で分析を行い―

00:10:11.745 --> 00:10:15.616 align:start position:36% line:-2
機械学習のための
例を提供します

00:10:15.716 --> 00:10:19.453 align:start position:32% line:-2
分析するモデル自体も
作ります

00:10:19.887 --> 00:10:21.889 align:start position:34% line:-1
自然言語処理には―

00:10:21.989 --> 00:10:25.459 align:start position:30% line:-2
多くの機械学習モデルが
あります

00:10:25.559 --> 00:10:30.197 align:start position:29% line:-2
機械学習の
訓練方法も さまざまです

00:10:30.297 --> 00:10:34.468 align:start position:36% line:-2
でも私たちに
課された仕事は―

00:10:34.568 --> 00:10:37.938 align:start position:29% line:-1
機械学習を簡単にすること

00:10:38.372 --> 00:10:43.277 align:start position:7% line:-2
学習した結果をNatural Languageと
統合することです

00:10:43.443 --> 00:10:48.148 align:start position:32% line:-2
我々は２つのモデルを
サポートしています

00:10:48.282 --> 00:10:52.219 align:start position:34% line:-2
これらのモデルは
幅広い機能に対応し

00:10:52.386 --> 00:10:54.788 align:start position:34% line:-1
テキストの内容を―

00:10:54.888 --> 00:10:58.592 align:start position:34% line:-2
ラベル付けするのに
役立ちます

00:10:58.692 --> 00:11:02.696 align:start position:32% line:-2
１つはテキスト分類に
特化したモデルです

00:10:58.692 --> 00:11:02.696 align:start position:32% line:-2
１つはテキスト分類に
特化したモデルです

00:11:02.830 --> 00:11:07.401 align:start position:29% line:-2
この分類器は
文章や段落文書全体など―

00:11:07.501 --> 00:11:11.605 align:start position:32% line:-2
膨大な量のテキストに
ラベル付けします

00:11:11.705 --> 00:11:14.174 align:start position:30% line:-1
既存のAPIに対応し―

00:11:14.274 --> 00:11:17.611 align:start position:29% line:-2
言語やスクリプトの識別が
可能です

00:11:18.212 --> 00:11:21.482 align:start position:32% line:-2
もう１つは
単語へのタグ付けです

00:11:21.615 --> 00:11:26.753 align:start position:30% line:-2
文章は単語のつながりで
構成されています

00:11:26.854 --> 00:11:31.291 align:start position:29% line:-2
分類器は その１つ１つに
ラベルを付けます

00:11:31.391 --> 00:11:34.561 align:start position:27% line:-1
既存のAPIでの応用例は―

00:11:34.661 --> 00:11:37.431 align:start position:36% line:-2
品詞タグ付けや
固有表現抽出です

00:11:37.531 --> 00:11:40.367 align:start position:34% line:-1
しかし これらは―

00:11:40.801 --> 00:11:43.604 align:start position:34% line:-1
汎用的なモデルです

00:11:43.904 --> 00:11:45.873 align:start position:36% line:-1
独自のモデルなら

00:11:45.973 --> 00:11:48.809 align:start position:23% line:-1
より多くのことが可能になります

00:11:48.909 --> 00:11:51.612 align:start position:29% line:-1
例を挙げて説明しましょう

00:11:51.845 --> 00:11:56.216 align:start position:29% line:-2
レビューを認識する
アプリケーションの例です

00:11:56.316 --> 00:11:59.953 align:start position:34% line:-2
各レビューが
肯定的か否定的か―

00:12:00.053 --> 00:12:04.091 align:start position:38% line:-2
中立的なのかを
自動認識したい

00:12:04.191 --> 00:12:08.896 align:start position:27% line:-2
そのためには
テキスト分類器を訓練します

00:12:10.430 --> 00:12:15.302 align:start position:27% line:-2
記事の本文や要約
または見出しがあるとします

00:12:15.402 --> 00:12:18.939 align:start position:27% line:-1
それらが属するトピックを―

00:12:19.039 --> 00:12:22.442 align:start position:36% line:-2
独自な分類基準で
自動認識したい

00:12:22.643 --> 00:12:25.345 align:start position:34% line:-1
テキスト分類器を―

00:12:25.779 --> 00:12:28.549 align:start position:34% line:-1
訓練すれば可能です

00:12:29.983 --> 00:12:34.454 align:start position:32% line:-2
次は自動認識を使った
旅行の代理店業務です

00:12:34.555 --> 00:12:37.057 align:start position:29% line:-1
顧客から依頼を受けた時―

00:12:37.157 --> 00:12:40.594 align:start position:36% line:-2
まず知りたいのは
依頼の内容です

00:12:40.694 --> 00:12:44.631 align:start position:32% line:-2
ホテルか
レストランか航空券か

00:12:45.098 --> 00:12:49.770 align:start position:27% line:-2
テキスト分類器を訓練すれば
判別できます

00:12:50.871 --> 00:12:56.176 align:start position:32% line:-2
単語のタグ付けですが
我々が提供するのは―

00:12:56.276 --> 00:12:59.513 align:start position:36% line:-2
複数の言語に
対応するものです

00:12:59.613 --> 00:13:02.749 align:start position:30% line:-2
でもサポートされてない
言語の―

00:12:59.613 --> 00:13:02.749 align:start position:30% line:-2
でもサポートされてない
言語の―

00:13:02.850 --> 00:13:06.153 align:start position:27% line:-1
品詞タグ付けをしたければ？

00:13:06.320 --> 00:13:11.225 align:start position:25% line:-2
カスタムモデルで
単語のタグ付け器を訓練します

00:13:12.226 --> 00:13:14.495 align:start position:30% line:-1
固有表現抽出も同じです

00:13:14.661 --> 00:13:16.663 align:start position:36% line:-1
汎用モデルでも―

00:13:16.763 --> 00:13:20.834 align:start position:34% line:-2
人名や地名や
組織名を認識します

00:13:21.301 --> 00:13:26.306 align:start position:29% line:-2
でもサポートされてない
固有名詞を抽出するには？

00:13:26.406 --> 00:13:28.742 align:start position:32% line:-1
例えば商品名などです

00:13:28.909 --> 00:13:33.013 align:start position:36% line:-2
カスタムモデルを
訓練すれば―

00:13:33.247 --> 00:13:39.153 align:start position:29% line:-2
意図した固有名詞や用語を
認識できるようになります

00:13:40.587 --> 00:13:45.993 align:start position:29% line:-2
旅行代理業務の例では
利用者の要望が判明したら

00:13:46.093 --> 00:13:50.430 align:start position:30% line:-2
次に関連語を
認識する必要があります

00:13:50.531 --> 00:13:54.701 align:start position:34% line:-2
航空券が希望なら
出発地と目的地は？

00:13:55.435 --> 00:13:57.971 align:start position:32% line:-1
単語のタグ付け器が―

00:13:58.172 --> 00:14:01.208 align:start position:29% line:-1
文章内の用語を認識します

00:13:58.172 --> 00:14:01.208 align:start position:29% line:-1
文章内の用語を認識します

00:14:02.242 --> 00:14:04.344 align:start position:34% line:-1
もっと踏み込むと―

00:14:04.444 --> 00:14:07.514 align:start position:32% line:-2
文を句に
区切ることもできます

00:14:07.614 --> 00:14:10.818 align:start position:29% line:-1
名詞句 動詞句 前置詞句

00:14:10.918 --> 00:14:15.522 align:start position:34% line:-2
単語のタグ付け器を
訓練すれば可能です

00:14:15.689 --> 00:14:18.792 align:start position:27% line:-2
他にも
さまざまな種類のタスクを―

00:14:19.226 --> 00:14:21.929 align:start position:34% line:-1
ラベル付けできます

00:14:22.029 --> 00:14:26.500 align:start position:32% line:-2
テキストの一部や
大量のテキストにも―

00:14:26.600 --> 00:14:30.270 align:start position:29% line:-1
ラベル付けは実行可能です

00:14:33.607 --> 00:14:36.610 align:start position:32% line:-2
これらは
教師あり機械学習で―

00:14:36.710 --> 00:14:40.080 align:start position:27% line:-1
常に２つの段階が含まれます

00:14:40.180 --> 00:14:43.584 align:start position:36% line:-2
１つ目は訓練
２つ目は推論です

00:14:43.684 --> 00:14:47.988 align:start position:30% line:-2
訓練は開発のプロセスで
行われます

00:14:48.155 --> 00:14:51.492 align:start position:27% line:-1
ラベル付きの訓練データを―

00:14:51.892 --> 00:14:56.230 align:start position:27% line:-2
Create MLに入力し
モデルを作成します

00:14:57.164 --> 00:15:00.300 align:start position:27% line:-1
推論はアプリケーションに―

00:14:57.164 --> 00:15:00.300 align:start position:27% line:-1
推論はアプリケーションに―

00:15:00.400 --> 00:15:03.270 align:start position:25% line:-1
モデルを入れた時に行われます

00:15:03.370 --> 00:15:07.641 align:start position:32% line:-2
ユーザからの
データを受け取ると―

00:15:07.741 --> 00:15:11.778 align:start position:34% line:-2
データを分析し
ラベルを認識します

00:15:11.945 --> 00:15:14.181 align:start position:32% line:-1
詳しく説明しましょう

00:15:14.848 --> 00:15:19.219 align:start position:32% line:-2
訓練は常に
データから始まります

00:15:19.319 --> 00:15:21.021 align:start position:38% line:-1
訓練データを―

00:15:21.355 --> 00:15:25.159 align:start position:23% line:-1
Create MLに入力します

00:15:25.259 --> 00:15:29.596 align:start position:21% line:-2
Create MLのセッションで
説明されたように―

00:15:30.230 --> 00:15:32.432 align:start position:30% line:-1
スクリプトを使用します

00:15:32.566 --> 00:15:37.571 align:start position:14% line:-2
Natural Languageを通して
Create MLは訓練します

00:15:37.938 --> 00:15:41.575 align:start position:30% line:-2
Core MLモデルが
出力されます

00:15:41.675 --> 00:15:44.812 align:start position:32% line:-2
デバイスに
最適化されたものです

00:15:45.846 --> 00:15:48.649 align:start position:29% line:-1
データの例をお見せします

00:15:48.849 --> 00:15:53.120 align:start position:27% line:-2
Create MLは複数の
データ形式に対応しています

00:15:53.220 --> 00:15:58.959 align:start position:23% line:-2
JSONのコードが見やすいので
JSON形式を紹介します

00:15:59.092 --> 00:16:01.995 align:start position:32% line:-1
お見せしているのは―

00:15:59.092 --> 00:16:01.995 align:start position:32% line:-1
お見せしているのは―

00:16:02.329 --> 00:16:06.099 align:start position:34% line:-2
テキスト分類器を
訓練するデータです

00:16:06.200 --> 00:16:07.701 align:start position:34% line:-1
感情を識別させます

00:16:07.801 --> 00:16:10.370 align:start position:32% line:-1
それぞれのデータは―

00:16:11.071 --> 00:16:13.674 align:start position:29% line:-1
２つのパーツから成ります

00:16:13.774 --> 00:16:18.345 align:start position:32% line:-2
テキストのかたまりと
適切なラベルです

00:16:18.579 --> 00:16:22.482 align:start position:27% line:-2
この文は
肯定的とラベルされています

00:16:22.583 --> 00:16:25.085 align:start position:27% line:-1
ラベルは自由に設定できます

00:16:27.721 --> 00:16:30.757 align:start position:32% line:-2
Create MLを
使ってみましょう

00:16:30.858 --> 00:16:33.961 align:start position:30% line:-1
わずか数行のコードで―

00:16:34.061 --> 00:16:36.830 align:start position:27% line:-1
簡単にモデルを訓練できます

00:16:36.930 --> 00:16:38.332 align:start position:41% line:-1
１行目で―

00:16:38.599 --> 00:16:42.703 align:start position:27% line:-2
JSON形式の訓練データを
読み込みます

00:16:42.803 --> 00:16:46.406 align:start position:21% line:-1
JSONファイルのURLを入力し

00:16:46.507 --> 00:16:49.209 align:start position:34% line:-1
テーブルを作ります

00:16:49.910 --> 00:16:51.545 align:start position:36% line:-1
そして２行目で―

00:16:51.645 --> 00:16:55.616 align:start position:30% line:-2
テキスト分類器を作成し
訓練します

00:16:55.716 --> 00:17:00.053 align:start position:32% line:-2
訓練に使うテキストと
ラベルを指定し―

00:16:55.716 --> 00:17:00.053 align:start position:32% line:-2
訓練に使うテキストと
ラベルを指定し―

00:17:01.388 --> 00:17:05.459 align:start position:34% line:-2
完成したモデルの
保存先を指定します

00:17:07.194 --> 00:17:12.165 align:start position:29% line:-2
単語のタグ付け器の場合は
もう少し複雑です

00:17:12.266 --> 00:17:15.102 align:start position:27% line:-1
例が１つのテキストではなく

00:17:15.202 --> 00:17:17.971 align:start position:27% line:-1
連続するトークンだからです

00:17:18.704 --> 00:17:21.241 align:start position:32% line:-1
すべてのトークンに―

00:17:21.340 --> 00:17:24.744 align:start position:29% line:-1
ラベルが１つ付いています

00:17:24.845 --> 00:17:27.814 align:start position:34% line:-1
この訓練データは―

00:17:27.915 --> 00:17:32.152 align:start position:30% line:-2
固有名詞を
抽出するためのものです

00:17:32.352 --> 00:17:35.856 align:start position:36% line:-2
それぞれの単語に
ラベルがあります

00:17:35.956 --> 00:17:39.259 align:start position:32% line:-2
固有名詞でない場合は
“NONE”

00:17:39.359 --> 00:17:43.664 align:start position:30% line:-2
組織名には“ORG”
商品名には“PROD”

00:17:43.764 --> 00:17:48.035 align:start position:29% line:-2
他にもさまざまなラベルを
作れます

00:17:48.135 --> 00:17:50.370 align:start position:29% line:-1
各トークンにラベルがあり

00:17:50.671 --> 00:17:53.674 align:start position:29% line:-1
１つの文章はトークンと―

00:17:53.774 --> 00:17:57.110 align:start position:29% line:-1
ラベルで構成されています

00:17:58.512 --> 00:18:03.283 align:start position:25% line:-2
Create MLの使い方は
ほぼ同じです

00:17:58.512 --> 00:18:03.283 align:start position:25% line:-2
Create MLの使い方は
ほぼ同じです

00:18:03.917 --> 00:18:08.755 align:start position:30% line:-2
訓練データを読み込んで
テーブルを作成

00:18:10.157 --> 00:18:15.596 align:start position:29% line:-2
単語のタグ付け器を作成し
訓練をしたら―

00:18:15.863 --> 00:18:18.131 align:start position:36% line:-1
最後に保存します

00:18:18.232 --> 00:18:23.270 align:start position:25% line:-2
Create MLには他にも
機能やAPIがあります

00:18:23.370 --> 00:18:28.809 align:start position:27% line:-2
さらに詳しい情報については
Create MLの―

00:18:28.909 --> 00:18:32.579 align:start position:30% line:-2
ドキュメンテーションを
ご覧ください

00:18:32.980 --> 00:18:36.517 align:start position:34% line:-2
モデルが完成したら
次は推論です

00:18:36.617 --> 00:18:39.987 align:start position:27% line:-2
Xcodeのプロジェクトに
モデルを入れると

00:18:40.087 --> 00:18:44.324 align:start position:34% line:-2
モデルがリソースに
組み込まれます

00:18:44.424 --> 00:18:46.493 align:start position:32% line:-1
使い方は あなた次第

00:18:46.593 --> 00:18:51.265 align:start position:25% line:-2
汎用のCore MLモデルと
同様に使えます

00:18:51.365 --> 00:18:54.501 align:start position:27% line:-1
そして これらのモデルは―

00:18:54.601 --> 00:18:58.972 align:start position:34% line:-2
汎用モデルと
同じように扱えます

00:18:59.273 --> 00:19:03.977 align:start position:14% line:-2
つまりNatural Languageの
APIを―

00:18:59.273 --> 00:19:03.977 align:start position:14% line:-2
つまりNatural Languageの
APIを―

00:19:04.111 --> 00:19:05.612 align:start position:36% line:-1
利用できるのです

00:19:06.580 --> 00:19:10.684 align:start position:32% line:-2
推論では
入ってきたデータを―

00:19:11.218 --> 00:19:13.420 align:start position:12% line:-1
Natural Languageに渡します

00:19:14.021 --> 00:19:17.257 align:start position:30% line:-1
モデルを使って認識し―

00:19:17.357 --> 00:19:19.927 align:start position:34% line:-1
ラベルを抽出します

00:19:20.027 --> 00:19:23.730 align:start position:30% line:-2
結果は
文のラベルなら分類器に

00:19:23.831 --> 00:19:27.501 align:start position:30% line:-2
単語ラベルなら
タグ付け器に渡されます

00:19:30.304 --> 00:19:34.041 align:start position:14% line:-2
Natural Languageを使って
ご説明します

00:19:34.241 --> 00:19:37.211 align:start position:30% line:-1
まずはリソースの中の―

00:19:37.311 --> 00:19:39.880 align:start position:34% line:-1
モデルを選択します

00:19:39.980 --> 00:19:45.219 align:start position:29% line:-2
そしてNL Modelの
インスタンスを作成

00:19:45.953 --> 00:19:50.924 align:start position:29% line:-2
インスタンスに
テキストを入れるだけで―

00:19:51.024 --> 00:19:54.161 align:start position:32% line:-1
ラベルが抽出されます

00:19:54.628 --> 00:19:57.064 align:start position:34% line:-1
これらのモデルは―

00:19:57.197 --> 00:20:00.701 align:start position:23% line:-1
NLTaggerと連携可能です

00:19:57.197 --> 00:20:00.701 align:start position:23% line:-1
NLTaggerと連携可能です

00:20:01.502 --> 00:20:05.305 align:start position:32% line:-2
汎用モデルと
まったく同じように―

00:20:05.639 --> 00:20:07.941 align:start position:34% line:-1
使うことができます

00:20:08.075 --> 00:20:09.843 align:start position:34% line:-1
実際にやってみます

00:20:10.310 --> 00:20:13.113 align:start position:34% line:-1
タグのスキームは―

00:20:13.213 --> 00:20:16.283 align:start position:29% line:-1
品詞タグ付けに限りません

00:20:16.750 --> 00:20:20.287 align:start position:29% line:-1
自由に作ることができます

00:20:21.755 --> 00:20:26.960 align:start position:27% line:-2
タグ付け器のタグスキームは
数を調整できます

00:20:27.060 --> 00:20:30.898 align:start position:32% line:-2
カスタムタグや
汎用タグを選択します

00:20:32.232 --> 00:20:35.202 align:start position:32% line:-1
使うタグとモデルを―

00:20:35.302 --> 00:20:38.438 align:start position:32% line:-1
タグ付け器に教えます

00:20:39.807 --> 00:20:42.910 align:start position:29% line:-1
その他は すべて同じです

00:20:43.143 --> 00:20:46.580 align:start position:36% line:-2
タグ付け器に
文字列を入れると

00:20:46.680 --> 00:20:48.248 align:start position:36% line:-1
タグが得られます

00:20:48.782 --> 00:20:53.787 align:start position:29% line:-2
モデルに合わせて
テキストの長さを変えます

00:20:54.521 --> 00:20:58.759 align:start position:30% line:-2
タグ付け器は必要に応じ
モデルを呼び出します

00:20:58.859 --> 00:21:02.696 align:start position:32% line:-2
タグを抽出するために
必要なことは―

00:20:58.859 --> 00:21:02.696 align:start position:32% line:-2
タグを抽出するために
必要なことは―

00:21:02.796 --> 00:21:05.299 align:start position:21% line:-1
NLTaggerが自動で行います

00:21:05.399 --> 00:21:08.936 align:start position:34% line:-2
言語の識別や
トークン化などです

00:21:10.003 --> 00:21:14.341 align:start position:32% line:-2
例を使って
説明していきましょう

00:21:14.541 --> 00:21:19.246 align:start position:32% line:-2
これは架空の
アプリケーションです

00:21:19.847 --> 00:21:24.117 align:start position:32% line:-2
記事をブックマークに
保存して―

00:21:24.218 --> 00:21:26.587 align:start position:30% line:-1
後で読むことができます

00:21:27.221 --> 00:21:30.257 align:start position:30% line:-1
でも１つ課題があります

00:21:30.357 --> 00:21:35.262 align:start position:30% line:-2
ブックマークが
整理されていないのです

00:21:35.462 --> 00:21:39.833 align:start position:36% line:-2
これらの記事を
自動的に分類し―

00:21:40.167 --> 00:21:43.036 align:start position:29% line:-1
トピックごとに整理したい

00:21:43.537 --> 00:21:46.507 align:start position:30% line:-1
分類器を訓練しましょう

00:21:47.007 --> 00:21:51.712 align:start position:34% line:-2
記事は ひと続きの
長いテキストです

00:21:52.279 --> 00:21:56.650 align:start position:36% line:-2
興味のある部分を
ハイライトしたい

00:21:56.750 --> 00:21:58.552 align:start position:34% line:-1
例えば固有名詞です

00:21:58.719 --> 00:22:02.656 align:start position:32% line:-2
汎用の
固有名詞識別機能で―

00:21:58.719 --> 00:22:02.656 align:start position:32% line:-2
汎用の
固有名詞識別機能で―

00:22:02.756 --> 00:22:05.826 align:start position:32% line:-2
人名や地名
組織名を識別できます

00:22:06.326 --> 00:22:09.062 align:start position:27% line:-1
でも商品名を識別するには―

00:22:09.162 --> 00:22:13.734 align:start position:34% line:-2
単語のタグ付け器の
訓練が必要です

00:22:15.269 --> 00:22:17.504 align:start position:30% line:-1
デモをお見せしましょう

00:22:22.843 --> 00:22:25.312 align:start position:29% line:-1
このアプリケーションは―

00:22:25.412 --> 00:22:29.216 align:start position:36% line:-2
自然言語処理を
行う前の状態です

00:22:29.316 --> 00:22:33.153 align:start position:32% line:-2
左側に整理されてない
記事のリスト

00:22:33.253 --> 00:22:35.989 align:start position:29% line:-1
右側にテキストがあります

00:22:36.089 --> 00:22:37.824 align:start position:38% line:-1
改善しましょう

00:22:38.625 --> 00:22:39.560 align:start position:45% line:-1
では―

00:22:40.360 --> 00:22:41.695 align:start position:43% line:-1
始めます

00:22:42.129 --> 00:22:46.934 align:start position:32% line:-2
モデルを訓練するには
データが必要です

00:22:47.100 --> 00:22:50.571 align:start position:36% line:-2
ありがたいことに
同僚たちが―

00:22:50.671 --> 00:22:54.608 align:start position:36% line:-2
訓練データを
集めてくれました

00:22:54.708 --> 00:22:57.978 align:start position:29% line:-2
最初のモデルは
テキスト分類器を使って―

00:22:58.078 --> 00:23:00.647 align:start position:27% line:-1
トピックで記事を分類します

00:22:58.078 --> 00:23:00.647 align:start position:27% line:-1
トピックで記事を分類します

00:23:00.747 --> 00:23:03.484 align:start position:30% line:-1
こちらが訓練データです

00:23:03.650 --> 00:23:07.788 align:start position:36% line:-2
文章とラベルで
構成されており―

00:23:07.988 --> 00:23:12.826 align:start position:27% line:-2
ラベルは娯楽や政治
スポーツなどのトピックです

00:23:15.429 --> 00:23:20.868 align:start position:27% line:-2
こちらは単語のタグ付け器を
訓練するデータです

00:23:21.168 --> 00:23:26.006 align:start position:34% line:-2
文章に含まれている
商品名を認識します

00:23:26.173 --> 00:23:28.475 align:start position:32% line:-1
データはシンプルです

00:23:28.609 --> 00:23:32.012 align:start position:30% line:-1
文章で構成されていて―

00:23:32.112 --> 00:23:35.449 align:start position:32% line:-2
単語ごとに
ラベルが付いています

00:23:35.549 --> 00:23:39.386 align:start position:23% line:-1
固有名詞でなければ“NONE”

00:23:39.486 --> 00:23:41.622 align:start position:27% line:-1
商品名には“PROD”です

00:23:43.590 --> 00:23:46.760 align:start position:29% line:-1
では訓練をしてみましょう

00:23:47.060 --> 00:23:49.229 align:start position:36% line:-1
それでは まず―

00:23:49.596 --> 00:23:54.501 align:start position:23% line:-2
Create MLを使っている
Playgroundを開きます

00:23:54.902 --> 00:23:57.771 align:start position:32% line:-1
開いているところです

00:23:57.905 --> 00:24:01.542 align:start position:25% line:-1
これは商品名のタグ付け器です

00:23:57.905 --> 00:24:01.542 align:start position:25% line:-1
これは商品名のタグ付け器です

00:24:01.642 --> 00:24:05.679 align:start position:30% line:-2
データを読み込み
単語のタグ付け器を作成

00:24:05.779 --> 00:24:08.682 align:start position:30% line:-1
ディスクに書き出します

00:24:09.383 --> 00:24:12.553 align:start position:30% line:-1
データを読み込みました

00:24:13.020 --> 00:24:16.323 align:start position:29% line:-1
トークン化と特徴抽出が―

00:24:16.423 --> 00:24:19.293 align:start position:30% line:-1
裏で自動的に行われます

00:24:19.393 --> 00:24:21.995 align:start position:29% line:-1
このモデルは小さいので―

00:24:22.095 --> 00:24:24.932 align:start position:29% line:-1
あまり時間はかかりません

00:24:25.265 --> 00:24:30.137 align:start position:30% line:-2
モデルをデスクトップに
保存するよう―

00:24:30.237 --> 00:24:31.872 align:start position:39% line:-1
設定しました

00:24:31.972 --> 00:24:33.240 align:start position:41% line:-1
これですね

00:24:36.143 --> 00:24:37.945 align:start position:38% line:-1
今のが１つです

00:24:38.545 --> 00:24:42.983 align:start position:20% line:-2
次はテキスト分類器の
Playgroundを立ち上げます

00:24:43.083 --> 00:24:46.420 align:start position:30% line:-1
訓練データを読み込み―

00:24:47.321 --> 00:24:50.657 align:start position:32% line:-2
テキスト分類器を作り
保存します

00:24:51.592 --> 00:24:54.495 align:start position:30% line:-1
では やってみましょう

00:24:55.062 --> 00:24:57.297 align:start position:36% line:-1
データを読み込み

00:24:57.397 --> 00:25:01.068 align:start position:34% line:-2
トークン化と
特徴抽出を行います

00:24:57.397 --> 00:25:01.068 align:start position:34% line:-2
トークン化と
特徴抽出を行います

00:25:01.168 --> 00:25:04.338 align:start position:34% line:-2
大きいモデルなので
数分 必要です

00:25:04.438 --> 00:25:07.808 align:start position:34% line:-2
モデルが
できるまでの間に―

00:25:08.041 --> 00:25:12.346 align:start position:32% line:-2
これらのモデルを使う
コードを見ましょう

00:25:12.646 --> 00:25:16.950 align:start position:32% line:-2
とても小さなクラスを
２つ書きました

00:25:17.050 --> 00:25:19.553 align:start position:29% line:-1
１つはテキスト分類器です

00:25:19.953 --> 00:25:24.024 align:start position:34% line:-2
リソースから
モデルを見つけて―

00:25:24.124 --> 00:25:26.193 align:start position:29% line:-1
NLModelを作ります

00:25:26.760 --> 00:25:29.429 align:start position:38% line:-1
記事に対して―

00:25:30.430 --> 00:25:34.368 align:start position:30% line:-2
１つのラベルを
出力するようにさせます

00:25:34.568 --> 00:25:36.870 align:start position:34% line:-1
やることは以上です

00:25:38.405 --> 00:25:41.241 align:start position:27% line:-1
単語のタグ付け器の場合は―

00:25:41.341 --> 00:25:43.911 align:start position:30% line:-1
追加のコードが必要です

00:25:44.077 --> 00:25:47.448 align:start position:32% line:-1
先ほどと同じように―

00:25:47.881 --> 00:25:50.551 align:start position:29% line:-1
商品名抽出の例を使います

00:25:50.851 --> 00:25:54.555 align:start position:36% line:-2
知りたいのは
商品名だけなので

00:25:54.655 --> 00:25:57.090 align:start position:32% line:-1
専用のタグを作ります

00:25:58.258 --> 00:26:02.095 align:start position:36% line:-2
再びリソースから
モデルを見つけ―

00:25:58.258 --> 00:26:02.095 align:start position:36% line:-2
再びリソースから
モデルを見つけ―

00:26:02.696 --> 00:26:06.934 align:start position:25% line:-2
NLModelと
NLTaggerを作成します

00:26:07.034 --> 00:26:10.170 align:start position:32% line:-2
NLTaggerに
２つのスキームを設定

00:26:10.270 --> 00:26:15.609 align:start position:29% line:-2
１つは汎用モデルを使った
固有名詞の抽出

00:26:15.709 --> 00:26:18.345 align:start position:30% line:-1
１つは独自の商品名抽出

00:26:18.445 --> 00:26:20.848 align:start position:32% line:-1
設定の仕方は同じです

00:26:21.482 --> 00:26:25.252 align:start position:32% line:-2
独自のスキームのため
タグ付け器には―

00:26:25.352 --> 00:26:27.154 align:start position:32% line:-1
専用モデルを使います

00:26:27.654 --> 00:26:32.493 align:start position:32% line:-2
対応する言語の数だけ
モデルを使います

00:26:34.495 --> 00:26:37.798 align:start position:32% line:-1
それでは次に進みます

00:26:37.898 --> 00:26:40.500 align:start position:38% line:-1
記事の中から―

00:26:40.601 --> 00:26:44.371 align:start position:32% line:-2
抽出された固有名詞を
ハイライトします

00:26:44.471 --> 00:26:49.343 align:start position:32% line:-2
ハイライトするために
属性情報を追加します

00:26:49.977 --> 00:26:55.382 align:start position:30% line:-2
“string”を
タグ付け器に入力します

00:26:55.916 --> 00:26:59.486 align:start position:32% line:-2
タグに対して
次の処理を実行します

00:26:59.586 --> 00:27:03.123 align:start position:32% line:-2
１つ目は
汎用モデルを使って―

00:26:59.586 --> 00:27:03.123 align:start position:32% line:-2
１つ目は
汎用モデルを使って―

00:27:03.457 --> 00:27:07.127 align:start position:34% line:-2
人名や地名
組織名を抽出します

00:27:07.294 --> 00:27:12.332 align:start position:29% line:-2
抽出された中に
特定のものを見つけたら―

00:27:12.666 --> 00:27:16.069 align:start position:34% line:-2
ハイライトの属性を
追加します

00:27:16.170 --> 00:27:18.338 align:start position:36% line:-1
色の変更などです

00:27:20.207 --> 00:27:24.278 align:start position:34% line:-2
カスタムモデルでも
方法は同じです

00:27:24.778 --> 00:27:28.549 align:start position:30% line:-2
商品名抽出機能を使って
探し出します

00:27:29.550 --> 00:27:34.021 align:start position:30% line:-2
特定のものを見つけたら
ハイライトします

00:27:34.121 --> 00:27:38.025 align:start position:27% line:-1
同じように色を変えましょう

00:27:38.992 --> 00:27:43.597 align:start position:14% line:-2
Natural Languageの中では
汎用モデルと同等に―

00:27:43.697 --> 00:27:47.167 align:start position:34% line:-2
専用モデルも
使うことができます

00:27:47.468 --> 00:27:49.736 align:start position:20% line:-1
Playgroundに戻りましょう

00:27:49.837 --> 00:27:52.506 align:start position:32% line:-1
訓練が終わっています

00:27:52.606 --> 00:27:56.376 align:start position:29% line:-2
デスクトップに
２つのモデルが現れました

00:27:57.978 --> 00:28:01.482 align:start position:18% line:-1
Playgroundにドラッグします

00:27:57.978 --> 00:28:01.482 align:start position:18% line:-1
Playgroundにドラッグします

00:28:02.049 --> 00:28:03.717 align:start position:43% line:-1
まずは―

00:28:04.251 --> 00:28:06.487 align:start position:32% line:-1
これをドラッグします

00:28:08.288 --> 00:28:09.456 align:start position:41% line:-1
できました

00:28:11.892 --> 00:28:15.062 align:start position:32% line:-1
そして もう１つも―

00:28:15.929 --> 00:28:17.731 align:start position:38% line:-1
ドラッグします

00:28:18.565 --> 00:28:22.669 align:start position:30% line:-2
Xcodeがモデルを
自動でコンパイルします

00:28:22.770 --> 00:28:26.373 align:start position:36% line:-2
あとはビルドして
実行するだけ

00:28:31.311 --> 00:28:34.681 align:start position:30% line:-2
Playgroundは
閉じておきましょう

00:28:34.815 --> 00:28:38.952 align:start position:30% line:-2
さっきと違い
今度は記事のリストが―

00:28:39.052 --> 00:28:42.623 align:start position:36% line:-2
トピック別に
分類されています

00:28:45.826 --> 00:28:50.531 align:start position:34% line:-2
１つの記事を選んで
開いてみましょう

00:28:50.631 --> 00:28:54.001 align:start position:30% line:-2
固有名詞が
ハイライトされています

00:28:54.101 --> 00:28:56.937 align:start position:29% line:-1
汎用の抽出機能を使って―

00:28:57.037 --> 00:28:59.973 align:start position:36% line:-2
人名や地名が
抽出されています

00:29:00.107 --> 00:29:01.909 align:start position:36% line:-1
さらに見ていくと

00:29:02.342 --> 00:29:06.313 align:start position:29% line:-1
商品名抽出機能を使って―

00:29:06.513 --> 00:29:12.052 align:start position:23% line:-2
iPadやMacBookなどの
商品名が抽出されています

00:29:13.487 --> 00:29:18.525 align:start position:18% line:-2
Natural Languageでは
簡単に専用モデルが作れ

00:29:18.625 --> 00:29:22.729 align:start position:34% line:-2
簡単に使えることを
お見せしました

00:29:24.431 --> 00:29:30.804 align:start position:43% line:-1
(拍手)

00:29:30.904 --> 00:29:33.640 align:start position:34% line:-1
次はヴィヴェクが―

00:29:33.740 --> 00:29:37.911 align:start position:32% line:-2
訓練における
重要事項を説明します

00:29:40.480 --> 00:29:43.851 align:start position:43% line:-1
(拍手)

00:29:43.984 --> 00:29:46.820 align:start position:32% line:-1
ダグ　説明ありがとう

00:29:46.920 --> 00:29:50.290 align:start position:20% line:-2
Natural Languageと
機械学習が―

00:29:50.390 --> 00:29:53.427 align:start position:30% line:-1
強力に連携できています

00:29:53.794 --> 00:29:57.664 align:start position:32% line:-2
この新しいAPIを
ぜひ活用してください

00:29:58.799 --> 00:30:02.169 align:start position:30% line:-2
パフォーマンスについて
お話しします

00:29:58.799 --> 00:30:02.169 align:start position:30% line:-2
パフォーマンスについて
お話しします

00:30:03.036 --> 00:30:07.641 align:start position:20% line:-2
Natural Languageは
あらゆるデバイスで使えて

00:30:08.041 --> 00:30:12.412 align:start position:29% line:-2
標準化したテキスト処理を
提供します

00:30:13.080 --> 00:30:15.949 align:start position:27% line:-1
詳しく説明していきましょう

00:30:16.350 --> 00:30:21.255 align:start position:20% line:-2
従来の機械学習では
Create MLを使っていません

00:30:21.455 --> 00:30:24.525 align:start position:30% line:-1
訓練データから始めます

00:30:25.259 --> 00:30:29.329 align:start position:32% line:-2
データをトークン化し
特徴を抽出します

00:30:29.429 --> 00:30:34.535 align:start position:29% line:-2
中国語や日本語には
トークン化は特に重要です

00:30:35.335 --> 00:30:37.971 align:start position:32% line:-1
ツールキットに入れ―

00:30:38.372 --> 00:30:41.375 align:start position:27% line:-1
機械学習のモデルを作ります

00:30:41.942 --> 00:30:44.845 align:start position:34% line:-2
モデルをデバイスで
使うためには―

00:30:44.945 --> 00:30:47.414 align:start position:21% line:-1
Core MLモデルに変換します

00:30:47.881 --> 00:30:51.018 align:start position:30% line:-1
変換ツールで変換します

00:30:51.418 --> 00:30:54.288 align:start position:29% line:-1
これが学習したモデルを―

00:30:54.388 --> 00:30:58.358 align:start position:34% line:-2
デバイスで
使うための流れです

00:30:59.827 --> 00:31:02.696 align:start position:36% line:-1
推論の段階では―

00:30:59.827 --> 00:31:02.696 align:start position:36% line:-1
推論の段階では―

00:31:02.796 --> 00:31:06.567 align:start position:32% line:-2
アプリケーションに
モデルを組み込みます

00:31:07.134 --> 00:31:11.004 align:start position:38% line:-2
さらにモデルを
トークン化し―

00:31:11.104 --> 00:31:14.942 align:start position:36% line:-2
訓練と同じように
特徴を抽出します

00:31:16.510 --> 00:31:20.647 align:start position:34% line:-2
訓練と同じ環境で
使うことが大事です

00:31:20.747 --> 00:31:24.651 align:start position:30% line:-2
抽出した特徴を
トークン化する過程は―

00:31:24.751 --> 00:31:27.254 align:start position:27% line:-1
訓練と推論で統一すべきです

00:31:27.821 --> 00:31:31.492 align:start position:14% line:-2
Natural Languageを使えば
問題ありません

00:31:31.725 --> 00:31:36.196 align:start position:30% line:-2
訓練の時には
訓練データを入力します

00:31:37.197 --> 00:31:40.500 align:start position:23% line:-1
Create MLが処理します

00:31:41.068 --> 00:31:43.437 align:start position:11% line:-1
Natural Languageが呼び出され

00:31:43.537 --> 00:31:46.140 align:start position:27% line:-1
特徴を抽出しトークン化する

00:31:46.306 --> 00:31:49.009 align:start position:27% line:-1
機械学習ライブラリが選ばれ

00:31:49.143 --> 00:31:52.212 align:start position:23% line:-1
Core MLモデルを返します

00:31:53.046 --> 00:31:57.217 align:start position:27% line:-2
推論ではアプリケーションに
モデルを組み込みます

00:31:58.151 --> 00:32:01.522 align:start position:30% line:-2
特徴抽出と
トークン化については―

00:31:58.151 --> 00:32:01.522 align:start position:30% line:-2
特徴抽出と
トークン化については―

00:32:01.622 --> 00:32:04.458 align:start position:34% line:-2
コードを書く必要は
ありません

00:32:04.558 --> 00:32:07.161 align:start position:20% line:-2
Natural Languageが
処理します

00:32:07.261 --> 00:32:11.365 align:start position:36% line:-2
皆さんはモデルを
組み込むだけです

00:32:13.767 --> 00:32:16.703 align:start position:20% line:-2
Natural Languageの
他の特徴は―

00:32:16.803 --> 00:32:19.640 align:start position:27% line:-1
ハードウェアへの最適化です

00:32:19.907 --> 00:32:22.643 align:start position:32% line:-1
例を使って説明します

00:32:23.710 --> 00:32:28.448 align:start position:27% line:-2
ダグが説明した内容について
性能比較をします

00:32:28.549 --> 00:32:32.386 align:start position:36% line:-2
比較するモデルを
作成した環境は―

00:32:32.486 --> 00:32:35.522 align:start position:18% line:-2
CRFSuiteと
Natural Languageです

00:32:35.622 --> 00:32:40.661 align:start position:29% line:-2
同じ訓練データと
試験データを使っています

00:32:40.761 --> 00:32:45.365 align:start position:30% line:-2
同じ特徴が使われており
認識精度は同じです

00:32:45.666 --> 00:32:49.203 align:start position:20% line:-2
Natural Languageは
モデルサイズが小さく―

00:32:49.336 --> 00:32:52.639 align:start position:29% line:-2
固有表現抽出の
モデルサイズは1.4MB

00:32:52.740 --> 00:32:56.276 align:start position:27% line:-2
チャンク化のモデルサイズは
1.8MBです

00:32:56.443 --> 00:33:00.180 align:start position:34% line:-2
アプリケーションの
容量を節約できます

00:32:56.443 --> 00:33:00.180 align:start position:34% line:-2
アプリケーションの
容量を節約できます

00:33:02.883 --> 00:33:07.621 align:start position:30% line:-2
機械学習アルゴリズムを
２つサポートします

00:33:08.355 --> 00:33:12.726 align:start position:29% line:-2
テキスト分類器に
指定できるアルゴリズムは

00:33:12.893 --> 00:33:16.296 align:start position:27% line:-1
１つは最大エントロピーです

00:33:16.497 --> 00:33:20.801 align:start position:23% line:-2
多項ロジスティック回帰モデルに
基づいた―

00:33:20.901 --> 00:33:23.303 align:start position:36% line:-1
アルゴリズムです

00:33:23.804 --> 00:33:27.608 align:start position:30% line:-2
１つは条件付き確率場の
アルゴリズムです

00:33:28.575 --> 00:33:31.712 align:start position:27% line:-1
用途によって選んでください

00:33:31.812 --> 00:33:35.616 align:start position:30% line:-2
両方を試して
比較することを勧めます

00:33:37.117 --> 00:33:41.788 align:start position:25% line:-2
単語のタグ付けのデフォルトは
条件付き確率場です

00:33:41.889 --> 00:33:45.726 align:start position:27% line:-1
単語のタグ付け器を作ると―

00:33:46.026 --> 00:33:49.463 align:start position:27% line:-1
条件付き確率場が使われます

00:33:50.497 --> 00:33:53.934 align:start position:36% line:-2
どちらを選ぶかは
用途によります

00:33:54.268 --> 00:33:55.936 align:start position:38% line:-1
開発の合間に―

00:33:56.036 --> 00:34:00.107 align:start position:30% line:-2
プログラムを書けるほど
簡単なのです

00:33:56.036 --> 00:34:00.107 align:start position:30% line:-2
プログラムを書けるほど
簡単なのです

00:34:00.207 --> 00:34:04.178 align:start position:27% line:-2
アイデアが決まったら
アプリケーションを開発する

00:34:04.278 --> 00:34:08.415 align:start position:27% line:-2
機械学習も
同じ流れだと気づくでしょう

00:34:08.916 --> 00:34:11.585 align:start position:30% line:-1
最初にデータを必要とし

00:34:11.685 --> 00:34:15.121 align:start position:36% line:-2
データを得たら
疑問が生まれます

00:34:15.556 --> 00:34:18.324 align:start position:29% line:-1
訓練データが確かなものか

00:34:18.425 --> 00:34:21.661 align:start position:34% line:-2
偽物のデータや
汚染データがないか

00:34:22.262 --> 00:34:26.433 align:start position:27% line:-2
データの検証後は各クラスの
インスタンスを調べます

00:34:26.533 --> 00:34:29.303 align:start position:27% line:-1
感情認識を訓練するとします

00:34:29.402 --> 00:34:33.739 align:start position:30% line:-2
数千の肯定データに対し
５個の否定データだと―

00:34:33.841 --> 00:34:39.379 align:start position:27% line:-2
バランスが悪く
安定的なモデルが作れません

00:34:39.478 --> 00:34:44.016 align:start position:29% line:-2
クラス間でバランスのよい
サンプル数が必要です

00:34:44.818 --> 00:34:48.554 align:start position:38% line:-2
それができたら
次は訓練です

00:34:48.755 --> 00:34:53.159 align:start position:34% line:-2
訓練のオプションは
両方を試して―

00:34:53.659 --> 00:34:55.228 align:start position:36% line:-1
比較してください

00:34:55.429 --> 00:34:59.566 align:start position:34% line:-2
アプリケーションに
適合した方を―

00:34:59.666 --> 00:35:01.969 align:start position:34% line:-1
選ぶとよいでしょう

00:34:59.666 --> 00:35:01.969 align:start position:34% line:-1
選ぶとよいでしょう

00:35:02.069 --> 00:35:05.639 align:start position:27% line:-1
その次のステップは評価です

00:35:07.174 --> 00:35:12.412 align:start position:30% line:-2
機械学習の評価は
同じ訓練データを使い―

00:35:12.679 --> 00:35:17.618 align:start position:27% line:-2
訓練データを訓練用
検証用 テスト用に分けます

00:35:17.718 --> 00:35:22.956 align:start position:27% line:-2
検証用でアルゴリズムを調整
テスト用でテストします

00:35:23.056 --> 00:35:26.493 align:start position:29% line:-1
機械学習に使われている―

00:35:26.593 --> 00:35:29.129 align:start position:30% line:-1
この基準に従いましょう

00:35:29.897 --> 00:35:33.967 align:start position:36% line:-2
対象外のデータも
テストすべきです

00:35:34.067 --> 00:35:37.104 align:start position:27% line:-2
例えば
アプリケーションを開発中で

00:35:37.204 --> 00:35:41.809 align:start position:29% line:-2
機械学習モデルに
データを取り込むとします

00:35:42.209 --> 00:35:46.413 align:start position:30% line:-2
ホテルのレビューを
分類しようとしています

00:35:46.513 --> 00:35:50.718 align:start position:30% line:-2
学習したモデルに
レビューが入力されます

00:35:51.418 --> 00:35:54.822 align:start position:36% line:-2
対象外のデータを
受け取りました

00:35:54.922 --> 00:35:58.559 align:start position:34% line:-2
おそらく飲食店か
映画のレビューです

00:35:58.659 --> 00:36:01.094 align:start position:34% line:-1
モデルの安定性を―

00:35:58.659 --> 00:36:01.094 align:start position:34% line:-1
モデルの安定性を―

00:36:01.562 --> 00:36:03.697 align:start position:38% line:-1
評価しましょう

00:36:04.097 --> 00:36:07.801 align:start position:29% line:-1
従来 バグを修正する際―

00:36:07.901 --> 00:36:11.939 align:start position:34% line:-2
パッチを書いて
アップデートします

00:36:12.406 --> 00:36:14.208 align:start position:34% line:-1
では機械学習では？

00:36:15.943 --> 00:36:19.079 align:start position:32% line:-1
問題を修正するには―

00:36:19.179 --> 00:36:25.018 align:start position:30% line:-2
モデルの弱点を見つけて
適切なデータで補います

00:36:25.185 --> 00:36:29.656 align:start position:29% line:-2
データを追加し
モデルを再訓練するのです

00:36:29.757 --> 00:36:34.461 align:start position:32% line:-2
この修正の手順は
開発手順そのものです

00:36:34.561 --> 00:36:37.097 align:start position:34% line:-1
モデルは織物と同じ

00:36:37.197 --> 00:36:40.634 align:start position:34% line:-2
機械学習を
使うということは―

00:36:40.734 --> 00:36:43.871 align:start position:29% line:-1
言葉を紡いでいくことです

00:36:45.939 --> 00:36:49.109 align:start position:30% line:-1
最後はプライバシーです

00:36:49.443 --> 00:36:51.612 align:start position:30% line:-1
今日 紹介したものは―

00:36:52.246 --> 00:36:57.518 align:start position:29% line:-2
機械学習も自然言語処理も
デバイスで行われます

00:36:57.851 --> 00:37:00.154 align:start position:30% line:-1
プライバシーは大切です

00:36:57.851 --> 00:37:00.154 align:start position:30% line:-1
プライバシーは大切です

00:37:00.254 --> 00:37:03.724 align:start position:34% line:-2
機械学習を
デバイスで処理し―

00:37:03.824 --> 00:37:06.293 align:start position:29% line:-1
プライバシーを保護します

00:37:06.627 --> 00:37:10.264 align:start position:18% line:-2
つまり
Natural Languageは―

00:37:10.364 --> 00:37:14.535 align:start position:30% line:-2
プライバシーを保護した
機械学習といえます

00:37:16.169 --> 00:37:17.371 align:start position:41% line:-1
まとめです

00:37:18.438 --> 00:37:22.109 align:start position:21% line:-2
Natural Language
フレームワークは―

00:37:22.309 --> 00:37:25.446 align:start position:23% line:-1
Appleの機械学習と密に連携

00:37:25.546 --> 00:37:28.182 align:start position:32% line:-2
Create MLで
モデルを訓練し

00:37:28.682 --> 00:37:33.086 align:start position:12% line:-2
Core MLか
Natural Languageで認識する

00:37:34.321 --> 00:37:38.325 align:start position:14% line:-2
Natural Languageで作った
モデルは効率が高く―

00:37:38.425 --> 00:37:41.729 align:start position:34% line:-2
全デバイスに
最適化されています

00:37:42.196 --> 00:37:44.832 align:start position:29% line:-1
機械学習をデバイスで行い

00:37:44.932 --> 00:37:48.669 align:start position:30% line:-2
ユーザのプライバシーを
保護します

00:37:51.004 --> 00:37:54.341 align:start position:34% line:-2
さらに詳しい情報は
こちらまで

00:37:54.441 --> 00:37:57.544 align:start position:32% line:-2
明日のラボに
ぜひ お越しください

00:37:57.644 --> 00:38:02.950 align:start position:29% line:-2
アプリケーションの相談や
質問も歓迎します

00:37:57.644 --> 00:38:02.950 align:start position:29% line:-2
アプリケーションの相談や
質問も歓迎します

00:38:03.684 --> 00:38:05.452 align:start position:36% line:-1
他の機械学習や―

00:38:05.552 --> 00:38:09.823 align:start position:29% line:-2
Create MLなどの
紹介もします

00:38:09.923 --> 00:38:13.460 align:start position:36% line:-2
皆さんのお越しを
お待ちしています

00:38:13.694 --> 00:38:16.096 align:start position:36% line:-1
以上で終わります

00:38:16.196 --> 00:38:18.665 align:start position:43% line:-1
(拍手)
