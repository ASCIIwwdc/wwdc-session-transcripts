WEBVTT

00:00:06.974 --> 00:00:16.450 align:start position:43% line:-1
(音楽)

00:00:22.055 --> 00:00:27.895 align:start position:43% line:-1
(拍手)

00:00:27.995 --> 00:00:33.300 align:start position:21% line:-2
SafariとWebKit担当の
ジョン･ビランデルです

00:00:34.535 --> 00:00:38.672 align:start position:29% line:-2
今日はウェブコンテンツの
セキュリティの話をします

00:00:38.805 --> 00:00:43.343 align:start position:27% line:-2
スウェーデン人からの
アドバイスと捉えてください

00:00:44.978 --> 00:00:50.150 align:start position:29% line:-2
“ウェブコンテンツ”とは
あまりにも広義すぎますが

00:00:50.284 --> 00:00:53.820 align:start position:29% line:-1
皆さんに関係のある話です

00:00:54.221 --> 00:00:57.991 align:start position:34% line:-2
Appの様々な面で
使用されています

00:00:58.258 --> 00:01:02.863 align:start position:25% line:-2
たとえば広告やログインフロー
スプラッシュスクリーン

00:00:58.258 --> 00:01:02.863 align:start position:25% line:-2
たとえば広告やログインフロー
スプラッシュスクリーン

00:01:02.963 --> 00:01:06.567 align:start position:9% line:-2
Safari View Controllerを
Appに使用していたり

00:01:06.667 --> 00:01:10.370 align:start position:23% line:-2
AppのUIがWebViewに
レンダリングされているかも

00:01:11.071 --> 00:01:15.475 align:start position:23% line:-2
ブラウザにレンダリングされたり
ウェブAppとAppをつなぐ―

00:01:16.276 --> 00:01:22.416 align:start position:27% line:-2
コンパニオンウェブAppを
使用することもあるでしょう

00:01:22.716 --> 00:01:27.454 align:start position:30% line:-2
従って セキュリティが
非常に重要となります

00:01:27.588 --> 00:01:31.024 align:start position:32% line:-2
ビジネスの継続や
お客様満足度の向上―

00:01:31.225 --> 00:01:33.560 align:start position:32% line:-1
競争力強化のためです

00:01:33.861 --> 00:01:39.333 align:start position:27% line:-2
セキュリティの確保が
生き残りの条件ともなります

00:01:40.367 --> 00:01:42.302 align:start position:34% line:-1
今日の話の中では―

00:01:43.270 --> 00:01:47.541 align:start position:29% line:-2
まず 通信や接続の
セキュリティの話をします

00:01:47.708 --> 00:01:53.981 align:start position:27% line:-2
何よりも先に行うべき基礎を
私が簡単に説明します

00:01:54.381 --> 00:01:57.284 align:start position:34% line:-2
セキュリティ確保は
ビジネスの要です

00:01:57.885 --> 00:02:00.921 align:start position:30% line:-2
次にクロスオリジン
ロックダウンについて―

00:01:57.885 --> 00:02:00.921 align:start position:30% line:-2
次にクロスオリジン
ロックダウンについて―

00:02:01.121 --> 00:02:07.227 align:start position:23% line:-2
WebKitで使用可能な技術を
ご紹介します

00:02:07.528 --> 00:02:10.464 align:start position:32% line:-2
お持ちの
ウェブコンテンツを―

00:02:10.697 --> 00:02:15.802 align:start position:30% line:-2
より高いセキュリティで
守るのに役立ちます

00:02:15.969 --> 00:02:19.506 align:start position:38% line:-2
我々は代わりに
行えないため―

00:02:19.606 --> 00:02:23.143 align:start position:30% line:-2
オプトインは
ご自身でしてもらいます

00:02:23.877 --> 00:02:29.049 align:start position:29% line:-2
セキュリティを学ぶことに
疑問がある方のため―

00:02:29.383 --> 00:02:35.489 align:start position:29% line:-2
実際の攻撃シナリオや
その防御策もご紹介します

00:02:35.589 --> 00:02:38.258 align:start position:32% line:-2
皆さんの
ウェブコンテンツを―

00:02:38.358 --> 00:02:40.661 align:start position:30% line:-1
守る方法が理解できます

00:02:41.195 --> 00:02:47.067 align:start position:27% line:-2
通信のセキュリティは
皆さんの身近な問題でしょう

00:02:47.734 --> 00:02:54.441 align:start position:21% line:-2
HTTPSとWSSへ移行する際の
セキュリティのことです

00:02:55.475 --> 00:02:58.846 align:start position:30% line:-2
HTTPとWSは
存在し続けていますが―

00:02:58.946 --> 00:03:03.951 align:start position:30% line:-2
使い続けるのは
避けた方がいいでしょう

00:02:58.946 --> 00:03:03.951 align:start position:30% line:-2
使い続けるのは
避けた方がいいでしょう

00:03:04.184 --> 00:03:06.620 align:start position:30% line:-1
セキュリティのためです

00:03:07.020 --> 00:03:12.993 align:start position:29% line:-2
ブラウザやAppを通して
表示するコンテンツは―

00:03:13.327 --> 00:03:16.296 align:start position:34% line:-2
信頼できるサーバを
経由させます

00:03:16.530 --> 00:03:19.867 align:start position:34% line:-2
誰かが操作するのを
防ぐためです

00:03:20.701 --> 00:03:23.704 align:start position:29% line:-2
メインコンテンツを
HTTPSへ移行するのを

00:03:23.871 --> 00:03:27.007 align:start position:27% line:-1
支援する技術をご紹介します

00:03:27.407 --> 00:03:30.978 align:start position:36% line:-2
単に移行するのは
もちろん―

00:03:31.245 --> 00:03:35.782 align:start position:29% line:-2
より厳格なセキュリティの
HSTSを使いましょう

00:03:36.483 --> 00:03:42.189 align:start position:21% line:-2
HSTSとはWebKitのような
レンダリングエンジンで―

00:03:42.656 --> 00:03:47.461 align:start position:29% line:-2
HTTPSを経由するよう
指示する役割を果たします

00:03:47.761 --> 00:03:51.265 align:start position:32% line:-2
HTTPへの
接続指示があっても―

00:03:51.365 --> 00:03:54.301 align:start position:23% line:-1
自動的にHTTPSに変換します

00:03:54.568 --> 00:03:58.372 align:start position:30% line:-2
プレーンテキスト接続は
行いません

00:03:59.173 --> 00:04:04.044 align:start position:32% line:-2
この設定を有効とする
期間も指定できます

00:03:59.173 --> 00:04:04.044 align:start position:32% line:-2
この設定を有効とする
期間も指定できます

00:04:04.311 --> 00:04:07.114 align:start position:27% line:-1
通常は半年先まで指定します

00:04:08.348 --> 00:04:11.652 align:start position:32% line:-2
次に 自分の管理外の
サーバから―

00:04:11.752 --> 00:04:14.888 align:start position:25% line:-1
コンテンツを読み込む場合です

00:04:15.122 --> 00:04:20.661 align:start position:5% line:-1
Upgrade Insecure Requestは

00:04:21.394 --> 00:04:25.732 align:start position:27% line:-2
ブラウザにリンクを
アップグレードするよう指示

00:04:25.833 --> 00:04:29.303 align:start position:32% line:-2
セキュリティの低い
サーバからの情報も―

00:04:29.403 --> 00:04:35.509 align:start position:29% line:-2
アップグレードするよう
指示してくれる仕組みです

00:04:36.343 --> 00:04:40.814 align:start position:27% line:-2
以上２点により
安全な接続が可能となります

00:04:42.082 --> 00:04:46.653 align:start position:27% line:-2
またcookieの
セキュリティ確保も必要です

00:04:46.787 --> 00:04:49.623 align:start position:27% line:-1
cookieのヘッダーに―

00:04:49.723 --> 00:04:51.892 align:start position:30% line:-2
セミコロンと
secureと入れます

00:04:52.159 --> 00:04:55.629 align:start position:36% line:-2
これにより
安全な場合のみ―

00:04:55.863 --> 00:04:59.766 align:start position:27% line:-2
cookieが送られるよう
指示できます

00:04:59.967 --> 00:05:03.837 align:start position:29% line:-2
プレーンテキストの指示が
あったとしても―

00:04:59.967 --> 00:05:03.837 align:start position:29% line:-2
プレーンテキストの指示が
あったとしても―

00:05:03.937 --> 00:05:06.306 align:start position:21% line:-1
cookieの情報は送られません

00:05:06.673 --> 00:05:11.879 align:start position:23% line:-2
接続の安全確保と共に
cookieの安全も不可欠です

00:05:13.046 --> 00:05:17.918 align:start position:29% line:-2
最後にApp特有の
セキュリティを説明します

00:05:18.385 --> 00:05:21.855 align:start position:34% line:-2
ATSという言葉を
ご存じでしょうか？

00:05:22.489 --> 00:05:24.992 align:start position:30% line:-1
iOS Appに対し―

00:05:25.292 --> 00:05:29.730 align:start position:29% line:-2
セキュリティの高い接続を
行うよう指示する機能です

00:05:30.397 --> 00:05:34.201 align:start position:34% line:-2
ウェブコンテンツの
セキュリティは―

00:05:34.301 --> 00:05:38.038 align:start position:38% line:-2
低い方がいいと
言う人もいます

00:05:38.739 --> 00:05:39.973 align:start position:39% line:-1
それではダメ

00:05:40.073 --> 00:05:46.046 align:start position:27% line:-2
任意のウェブコンテンツは
特にセキュリティが重要です

00:05:46.914 --> 00:05:50.317 align:start position:29% line:-2
通信の際のセキュリティの
次は―

00:05:50.417 --> 00:05:53.086 align:start position:25% line:-2
クロスオリジンロックダウンを
取り上げます

00:05:53.654 --> 00:05:58.225 align:start position:25% line:-2
“ロックダウン”と呼ぶ理由は
ウェブコンテンツの

00:05:58.325 --> 00:06:02.996 align:start position:27% line:-2
健全性や安全性を決めるのは
皆さん自身だからです

00:05:58.325 --> 00:06:02.996 align:start position:27% line:-2
健全性や安全性を決めるのは
皆さん自身だからです

00:06:03.197 --> 00:06:07.134 align:start position:29% line:-2
リスクを全て
取り締まることによって―

00:06:07.434 --> 00:06:10.604 align:start position:34% line:-2
希望どおりの
操作を可能とします

00:06:11.805 --> 00:06:17.544 align:start position:23% line:-2
まず クロスオリジンロードとは
何かについて説明します

00:06:17.978 --> 00:06:21.949 align:start position:29% line:-2
ウェブは
異なるサーバやオリジン―

00:06:22.049 --> 00:06:26.420 align:start position:25% line:-1
またはドメインからであっても

00:06:27.020 --> 00:06:29.556 align:start position:25% line:-1
一緒に組み込む特徴があります

00:06:30.390 --> 00:06:32.292 align:start position:30% line:-1
画像を例として挙げます

00:06:32.659 --> 00:06:35.696 align:start position:25% line:-1
ウェブ上のあらゆるサーバから

00:06:35.796 --> 00:06:38.832 align:start position:32% line:-2
画像を読み込むのが
クロスオリジンロード

00:06:39.466 --> 00:06:42.202 align:start position:32% line:-1
スクリプトも同様です

00:06:42.669 --> 00:06:48.141 align:start position:29% line:-2
元々の効力を保持したまま
読み込めるので―

00:06:48.242 --> 00:06:54.114 align:start position:30% line:-2
他のサーバからの場合は
注意が必要となります

00:06:54.281 --> 00:06:57.050 align:start position:32% line:-2
皆さんと同程度の力を
保有し―

00:06:57.217 --> 00:06:59.520 align:start position:36% line:-2
コンテンツを
所有するからです

00:06:59.987 --> 00:07:02.523 align:start position:25% line:-1
次にiframeの話をします

00:06:59.987 --> 00:07:02.523 align:start position:25% line:-1
次にiframeの話をします

00:07:02.656 --> 00:07:09.696 align:start position:27% line:-2
異なるドメインのサーバから
全ページを埋め込みます

00:07:09.796 --> 00:07:12.900 align:start position:32% line:-1
例を３つ挙げましょう

00:07:14.334 --> 00:07:18.772 align:start position:30% line:-2
このようなデータを守る
基本的な仕組みとして―

00:07:18.872 --> 00:07:24.044 align:start position:27% line:-2
セキュリティメカニズムが
20年以上前から存在します

00:07:24.144 --> 00:07:26.780 align:start position:29% line:-1
同一オリジンポリシーです

00:07:26.947 --> 00:07:31.185 align:start position:34% line:-2
実在するドメインで
例を挙げます

00:07:31.451 --> 00:07:35.656 align:start position:32% line:-1
画像を読み込む例と―

00:07:36.557 --> 00:07:39.493 align:start position:27% line:-1
スクリプトを読み込むCDN

00:07:39.860 --> 00:07:44.398 align:start position:29% line:-2
ソーシャルウィジェットの
iframeを挙げました

00:07:44.798 --> 00:07:51.071 align:start position:29% line:-2
“.example”とは
ウェブの例という意味です

00:07:51.338 --> 00:07:54.641 align:start position:20% line:-2
分かりにくければ
.comや.orgと考えてください

00:07:55.475 --> 00:08:00.013 align:start position:27% line:-2
クロスオリジンロードを
同一オリジンポリシーが管理

00:07:55.475 --> 00:08:00.013 align:start position:27% line:-2
クロスオリジンロードを
同一オリジンポリシーが管理

00:08:00.214 --> 00:08:02.950 align:start position:27% line:-1
画像などの各要素について―

00:08:03.050 --> 00:08:06.787 align:start position:32% line:-2
どこから読み込んだか
管理するのです

00:08:06.887 --> 00:08:09.189 align:start position:30% line:-1
何のための管理かって？

00:08:09.289 --> 00:08:13.727 align:start position:32% line:-2
コンテンツの基本的な
保護のためです

00:08:13.827 --> 00:08:18.232 align:start position:27% line:-2
コンテンツのiframeに
触れないようにしたり―

00:08:18.465 --> 00:08:22.302 align:start position:29% line:-2
書き加えたりしないように
するためです

00:08:22.603 --> 00:08:28.175 align:start position:27% line:-2
同一オリジンポリシーにより
コンテンツの中でも―

00:08:28.275 --> 00:08:31.245 align:start position:25% line:-1
異なるサーバのものを守ります

00:08:31.345 --> 00:08:35.082 align:start position:34% line:-2
コンテンツの加工を
防ぐためです

00:08:36.350 --> 00:08:39.119 align:start position:29% line:-1
同一オリジンポリシーとは

00:08:39.219 --> 00:08:42.089 align:start position:29% line:-2
２つのブラウザの
タブの調和と捉えられます

00:08:42.188 --> 00:08:47.361 align:start position:27% line:-2
一方のタブが他方の
様子を探ることはできません

00:08:47.794 --> 00:08:52.399 align:start position:25% line:-2
そこで同一オリジンポリシーが
役立つのです

00:08:53.734 --> 00:08:57.838 align:start position:34% line:-2
ではリスクを
どう取り締まるのか

00:08:58.138 --> 00:09:01.275 align:start position:29% line:-2
同一オリジンポリシーでは
不十分です

00:08:58.138 --> 00:09:01.275 align:start position:29% line:-2
同一オリジンポリシーでは
不十分です

00:09:01.508 --> 00:09:04.778 align:start position:32% line:-2
デフォルトへの
オプトインが必要です

00:09:04.978 --> 00:09:10.184 align:start position:29% line:-2
サブリソースの整合性から
取り掛かります

00:09:10.417 --> 00:09:14.221 align:start position:25% line:-2
scriptタグの
マークアップを変えるだけです

00:09:14.988 --> 00:09:18.325 align:start position:29% line:-2
次はコンテンツ
セキュリティポリシーで―

00:09:18.425 --> 00:09:21.061 align:start position:32% line:-1
ページ全体を守ります

00:09:21.295 --> 00:09:24.264 align:start position:29% line:-1
スクリプトを読み込む時―

00:09:24.431 --> 00:09:28.769 align:start position:30% line:-2
他のサーバからの
不要な情報は除外します

00:09:28.969 --> 00:09:32.573 align:start position:27% line:-1
次はサーバ構成についてです

00:09:32.873 --> 00:09:37.477 align:start position:30% line:-2
HTTPレスポンス
ヘッダーによる指示で―

00:09:37.578 --> 00:09:42.950 align:start position:27% line:-2
古いAPIサポートを
強いセキュリティに変えます

00:09:43.050 --> 00:09:45.485 align:start position:27% line:-1
不要なものは除外するのです

00:09:46.019 --> 00:09:49.890 align:start position:30% line:-2
サブリソースの整合性を
詳しく説明します

00:09:51.291 --> 00:09:53.160 align:start position:39% line:-1
この方法で―

00:09:53.260 --> 00:09:58.165 align:start position:27% line:-2
CDNからフレームワークを
読み込みます

00:09:58.732 --> 00:10:05.105 align:start position:23% line:-2
scriptタグはスクリプトを
取得するためのものです

00:09:58.732 --> 00:10:05.105 align:start position:23% line:-2
scriptタグはスクリプトを
取得するためのものです

00:10:05.372 --> 00:10:08.942 align:start position:34% line:-2
ウェブコンテンツを
正常に動かすため

00:10:09.209 --> 00:10:14.148 align:start position:29% line:-2
CDNを信頼して
スクリプトを取り出します

00:10:14.781 --> 00:10:21.889 align:start position:29% line:-2
しかし何らかの理由で
スクリプトに不備があると

00:10:22.389 --> 00:10:27.794 align:start position:30% line:-2
ウェブコンテンツが
不能となってしまいます

00:10:27.961 --> 00:10:30.597 align:start position:25% line:-1
理想のスクリプト入手のため―

00:10:30.931 --> 00:10:34.468 align:start position:25% line:-2
このようなscriptタグを
発信します

00:10:34.968 --> 00:10:38.639 align:start position:29% line:-1
ブラウザへの指示内容は―

00:10:38.739 --> 00:10:42.743 align:start position:27% line:-2
“JavaScriptに
取り込んだ内容を実行せよ”

00:10:43.010 --> 00:10:45.212 align:start position:30% line:-1
しかしより良い方法は―

00:10:45.312 --> 00:10:48.081 align:start position:29% line:-2
確実に
スクリプトを入手すること

00:10:48.515 --> 00:10:52.753 align:start position:12% line:-2
scriptタグにintegrity属性を
付与してもいいです

00:10:53.320 --> 00:10:58.458 align:start position:25% line:-2
チェックサムで確認します
SHA-256を使いましょう

00:10:58.559 --> 00:11:03.230 align:start position:27% line:-2
“このスクリプトを
CDNから取り出してくれ”

00:10:58.559 --> 00:11:03.230 align:start position:27% line:-2
“このスクリプトを
CDNから取り出してくれ”

00:11:03.831 --> 00:11:07.367 align:start position:34% line:-2
このように指示し
完全一致の場合に―

00:11:07.467 --> 00:11:08.836 align:start position:39% line:-1
実行させます

00:11:09.169 --> 00:11:12.005 align:start position:32% line:-2
これにより
ブラウザエンジンは―

00:11:12.105 --> 00:11:16.410 align:start position:30% line:-2
実行前にチェックサムと
比較します

00:11:17.110 --> 00:11:20.347 align:start position:30% line:-2
バージョンアップなどの
理由で―

00:11:20.447 --> 00:11:23.617 align:start position:36% line:-2
一致しない場合に
どうするのか

00:11:24.017 --> 00:11:28.121 align:start position:30% line:-2
このように追加の指示を
入れます

00:11:28.222 --> 00:11:31.258 align:start position:29% line:-2
ここではフレームワークを
求めます

00:11:31.692 --> 00:11:36.630 align:start position:32% line:-2
読み込みが成功したら
データを確認します

00:11:36.797 --> 00:11:41.335 align:start position:32% line:-2
データがない場合
自分のサーバに行き―

00:11:41.468 --> 00:11:44.638 align:start position:32% line:-1
そこから読み込みます

00:11:44.838 --> 00:11:51.411 align:start position:30% line:-2
正常に動くコンテンツや
サイトが手に入ります

00:11:51.945 --> 00:11:57.251 align:start position:32% line:-2
以上がサブリソースの
整合性の説明でした

00:11:57.451 --> 00:12:01.889 align:start position:27% line:-2
自分のページの
方針を決めるようなものです

00:11:57.451 --> 00:12:01.889 align:start position:27% line:-2
自分のページの
方針を決めるようなものです

00:12:02.523 --> 00:12:05.659 align:start position:27% line:-1
アーキテクチャポリシーです

00:12:05.759 --> 00:12:09.129 align:start position:36% line:-2
ソフトウェア
エンジニアなら―

00:12:09.229 --> 00:12:13.467 align:start position:34% line:-2
ディペンデンシーを
管理したいでしょう

00:12:14.501 --> 00:12:18.071 align:start position:25% line:-2
HTTPレスポンスヘッダーに
話を戻します

00:12:18.305 --> 00:12:20.874 align:start position:36% line:-2
自分のサーバから
発信する場合―

00:12:20.974 --> 00:12:23.944 align:start position:38% line:-2
このヘッダーを
付け足します

00:12:24.044 --> 00:12:29.983 align:start position:29% line:-2
ページ管理についての
方針などを指示するのです

00:12:30.551 --> 00:12:33.887 align:start position:29% line:-2
まずはデフォルトソースの
指示です

00:12:33.987 --> 00:12:39.059 align:start position:30% line:-2
遠隔でコンテンツを
読み込む際のサーバは―

00:12:39.526 --> 00:12:42.830 align:start position:27% line:-1
自分のもののみと設定します

00:12:42.930 --> 00:12:45.299 align:start position:32% line:-1
以上で設定は完了です

00:12:45.399 --> 00:12:51.505 align:start position:29% line:-2
これで設定した方針と
一致しない動作は防げます

00:12:51.605 --> 00:12:58.812 align:start position:27% line:-2
他のサーバからの読み込みも
WebKitに拒否されます

00:12:59.680 --> 00:13:04.518 align:start position:29% line:-2
No inlineという
コメントも入れました

00:12:59.680 --> 00:13:04.518 align:start position:29% line:-2
No inlineという
コメントも入れました

00:13:04.685 --> 00:13:10.691 align:start position:25% line:-2
これでインラインスクリプトは
許可されません

00:13:11.191 --> 00:13:14.194 align:start position:29% line:-2
アーキテクチャポリシーと
呼ぶのは

00:13:14.294 --> 00:13:20.167 align:start position:20% line:-2
マークアップやCSSファイルなどの
スタイリングから

00:13:21.301 --> 00:13:24.872 align:start position:29% line:-2
ロジックを複数ファイルに
分けていくためです

00:13:26.240 --> 00:13:31.345 align:start position:27% line:-2
cdn.exampleから
スクリプトを読み込む時

00:13:31.445 --> 00:13:37.818 align:start position:27% line:-2
デフォルトソースから行くと
禁止されてしまいます

00:13:38.085 --> 00:13:41.922 align:start position:21% line:-2
ここでホワイトリストメカニズムを
使用します

00:13:42.322 --> 00:13:47.227 align:start position:27% line:-2
cdn.exampleを
開くように指示することで―

00:13:47.327 --> 00:13:49.630 align:start position:30% line:-2
スクリプトを
読み込むことができます

00:13:49.730 --> 00:13:53.400 align:start position:21% line:-2
自身のサーバと
cdn.example以外からは

00:13:53.500 --> 00:13:54.835 align:start position:32% line:-1
読み込み拒否されます

00:13:55.802 --> 00:13:59.807 align:start position:34% line:-2
ソーシャルメディア
プラグインを―

00:13:59.907 --> 00:14:02.209 align:start position:36% line:-1
使いたいとします

00:13:59.907 --> 00:14:02.209 align:start position:36% line:-1
使いたいとします

00:14:02.309 --> 00:14:05.345 align:start position:27% line:-1
フレームソースを追加します

00:14:05.445 --> 00:14:08.515 align:start position:23% line:-1
“iframeを読み込みたい”

00:14:09.016 --> 00:14:12.252 align:start position:36% line:-2
“でも可能なのは
自分だけとする”

00:14:12.519 --> 00:14:17.491 align:start position:32% line:-2
このように自分で
設定すればいいのです

00:14:17.591 --> 00:14:21.862 align:start position:32% line:-2
逆のことも同じように
指示できます

00:14:22.229 --> 00:14:27.134 align:start position:29% line:-2
例えば自分のコンテンツが
読み込まれそうな時―

00:14:27.434 --> 00:14:33.841 align:start position:18% line:-2
frame ancestorsという
指示を入れればいいのです

00:14:33.941 --> 00:14:38.579 align:start position:27% line:-2
“コンテンツを読み込もうと
している人は―”

00:14:38.846 --> 00:14:44.718 align:start position:29% line:-2
“リストに名前がない限り
許可は与えない”と

00:14:45.285 --> 00:14:50.524 align:start position:20% line:-2
この場合news.exampleは
許可を与えているので―

00:14:50.624 --> 00:14:53.126 align:start position:29% line:-1
コンテンツを入手できます

00:14:53.994 --> 00:14:59.933 align:start position:29% line:-2
いろんなことを話したので
１つ１つ復習しましょう

00:15:00.300 --> 00:15:04.104 align:start position:30% line:-2
コンテンツセキュリティ
ポリシーは―

00:15:04.204 --> 00:15:08.842 align:start position:30% line:-2
デフォルトの
コード指定から始めます

00:15:08.942 --> 00:15:12.880 align:start position:32% line:-2
自分のオリジンと
ドメインを指定します

00:15:13.580 --> 00:15:20.087 align:start position:27% line:-2
次に スクリプトを読み込む
ドメインを追加します

00:15:20.687 --> 00:15:26.393 align:start position:25% line:-2
また フレームの読み込み先も
指定します

00:15:26.593 --> 00:15:30.931 align:start position:29% line:-2
誰かのページの
iframeに入る場合も

00:15:31.031 --> 00:15:36.003 align:start position:12% line:-2
frame ancestorで実行するため
ホワイトリストに登録します

00:15:36.837 --> 00:15:41.174 align:start position:30% line:-2
コンテンツセキュリティ
ポリシーの話は以上です

00:15:41.608 --> 00:15:47.915 align:start position:30% line:-2
攻撃シナリオの中でも
また取り上げる予定です

00:15:48.916 --> 00:15:51.752 align:start position:25% line:-1
次はcookieについてです

00:15:51.852 --> 00:15:57.391 align:start position:29% line:-2
ウェブが始まった当初
マジックだと言われました

00:15:57.958 --> 00:16:01.862 align:start position:29% line:-2
言葉どおり 様々なものに
利用できます

00:15:57.958 --> 00:16:01.862 align:start position:29% line:-2
言葉どおり 様々なものに
利用できます

00:16:02.162 --> 00:16:06.099 align:start position:25% line:-2
ユーザ認証をするという点から
慎重さが求められます

00:16:06.200 --> 00:16:11.438 align:start position:25% line:-2
ログインすると
Cookieが配布されますが

00:16:11.538 --> 00:16:16.543 align:start position:21% line:-2
盗まれたりレンダリングエンジンへ
移行されると

00:16:16.777 --> 00:16:19.546 align:start position:34% line:-2
ユーザが偽装される
可能性があります

00:16:19.780 --> 00:16:23.383 align:start position:30% line:-2
そのため慎重に
保護する必要があります

00:16:23.484 --> 00:16:27.855 align:start position:30% line:-2
プレーンテキスト要求に
応じないよう―

00:16:28.121 --> 00:16:30.224 align:start position:36% line:-1
設定しておきます

00:16:30.491 --> 00:16:34.528 align:start position:21% line:-2
HTTPOnlyのcookieを
見ていきましょう

00:16:35.062 --> 00:16:40.267 align:start position:32% line:-2
15年前程前からある
比較的古めの技術です

00:16:40.367 --> 00:16:42.870 align:start position:25% line:-1
HTTPOnlyというより―

00:16:43.270 --> 00:16:47.341 align:start position:5% line:-2
ウェブAPIのdocument.cookieの方が
有名でしょうか？

00:16:47.808 --> 00:16:52.179 align:start position:18% line:-2
JavaScriptでcookieの
読み書きが可能です

00:16:52.946 --> 00:16:57.851 align:start position:21% line:-2
他のサーバから
JavaScriptを読み込むと

00:16:57.951 --> 00:17:02.489 align:start position:16% line:-2
APIを通じ全ユーザのcookieへの
アクセス権を与えてしまいます

00:16:57.951 --> 00:17:02.489 align:start position:16% line:-2
APIを通じ全ユーザのcookieへの
アクセス権を与えてしまいます

00:17:03.190 --> 00:17:07.661 align:start position:32% line:-2
強力な権限を
与えすぎだと思います

00:17:07.761 --> 00:17:13.233 align:start position:23% line:-2
HTTPOnlyと指定した
cookieでログインする方が

00:17:13.567 --> 00:17:16.002 align:start position:43% line:-1
安全です

00:17:16.336 --> 00:17:22.608 align:start position:20% line:-2
このset-cookieヘッダーに
あるようにHTTPOnlyを送信し

00:17:23.143 --> 00:17:27.548 align:start position:14% line:-2
document.cookie APIで
cookieを表示しないよう指定します

00:17:28.015 --> 00:17:31.051 align:start position:12% line:-2
これでJavaScriptでcookieを
閲覧できなくなります

00:17:31.151 --> 00:17:36.657 align:start position:27% line:-2
操作したりや盗み出すことも
不可能となるのです

00:17:38.091 --> 00:17:43.831 align:start position:14% line:-2
また SameSite cookiesが
導入されました

00:17:44.398 --> 00:17:49.970 align:start position:25% line:-2
ここでもcookieの設定に
ヘッダーを使います

00:17:50.337 --> 00:17:54.474 align:start position:21% line:-2
SameSite=strictと
入力しました

00:17:54.575 --> 00:17:59.079 align:start position:30% line:-2
これは簡易版ですが
基本的な意味はこうです

00:17:59.479 --> 00:18:05.519 align:start position:27% line:-2
自分がオーナーのページのみ
cookieを送信します

00:17:59.479 --> 00:18:05.519 align:start position:27% line:-2
自分がオーナーのページのみ
cookieを送信します

00:18:05.619 --> 00:18:09.423 align:start position:29% line:-2
ユーザエクスペリエンスや
web view全体を

00:18:09.523 --> 00:18:12.893 align:start position:29% line:-2
管理している場合のみ
cookieを送信します

00:18:13.727 --> 00:18:16.330 align:start position:32% line:-1
信頼のないユーザに―

00:18:16.430 --> 00:18:19.933 align:start position:34% line:-2
ウェブコンテンツを
組み込まれた場合―

00:18:20.500 --> 00:18:25.973 align:start position:11% line:-2
SameSite cookiesは送信されず
サーバが検出します

00:18:26.073 --> 00:18:30.310 align:start position:12% line:-2
サーバはSameSite cookiesが
ないことから―

00:18:30.410 --> 00:18:34.314 align:start position:32% line:-2
盗もうとする
ユーザだと分かります

00:18:34.748 --> 00:18:37.284 align:start position:32% line:-1
慎重に対処すべきです

00:18:37.818 --> 00:18:42.456 align:start position:30% line:-2
コンテンツを守るための
方法は以上です

00:18:43.757 --> 00:18:46.326 align:start position:34% line:-2
次にクロスオリジン
ロックダウンです

00:18:46.426 --> 00:18:49.596 align:start position:29% line:-1
全く新しい技術と言えます

00:18:49.696 --> 00:18:53.801 align:start position:32% line:-2
このヘッダーの利用は
WebKitが初です

00:18:54.167 --> 00:18:58.539 align:start position:29% line:-2
コンテンツダウンロードを
制限するための―

00:18:58.639 --> 00:19:00.941 align:start position:32% line:-2
クロスオリジン
リソースポリシーです

00:18:58.639 --> 00:19:00.941 align:start position:32% line:-2
クロスオリジン
リソースポリシーです

00:19:02.176 --> 00:19:07.481 align:start position:25% line:-2
クロスオリジンで
読み込み可能なコンテンツは―

00:19:07.581 --> 00:19:12.586 align:start position:32% line:-2
すでに話したとおり
画像とスクリプトです

00:19:12.686 --> 00:19:15.756 align:start position:32% line:-2
ウェブができた頃から
存在し―

00:19:16.123 --> 00:19:21.595 align:start position:30% line:-2
他のサイトの読み込みを
禁止する仕組みは―

00:19:22.262 --> 00:19:25.332 align:start position:25% line:-1
これまでに ありませんでした

00:19:25.699 --> 00:19:30.571 align:start position:32% line:-2
誰でも どこからでも
画像を読み込めます

00:19:31.138 --> 00:19:36.410 align:start position:30% line:-2
しかし これを制限する
仕組みが誕生しました

00:19:36.810 --> 00:19:39.746 align:start position:32% line:-2
それがクロスオリジン
リソースポリシーです

00:19:39.847 --> 00:19:44.051 align:start position:27% line:-2
ここでSameという指示を
与えていますが―

00:19:44.151 --> 00:19:47.588 align:start position:29% line:-2
自分のサイトのみを
画像読み込み可能とします

00:19:47.688 --> 00:19:53.427 align:start position:30% line:-2
メインページの
ドメインが一致した場合

00:19:53.527 --> 00:19:57.931 align:start position:34% line:-2
ウェブコンテンツに
画像を読み込めます

00:19:58.031 --> 00:20:03.837 align:start position:27% line:-2
別の人が画像やスクリプトを
読み込もうとしたら―

00:19:58.031 --> 00:20:03.837 align:start position:27% line:-2
別の人が画像やスクリプトを
読み込もうとしたら―

00:20:03.937 --> 00:20:08.175 align:start position:34% line:-2
このヘッダーにより
それが防げます

00:20:09.276 --> 00:20:11.945 align:start position:30% line:-1
最近開発された技術です

00:20:13.146 --> 00:20:18.385 align:start position:30% line:-2
最後にクロスオリジン
ウィンドウポリシーです

00:20:18.485 --> 00:20:21.989 align:start position:12% line:-1
window.openという古いAPIです

00:20:22.156 --> 00:20:27.494 align:start position:34% line:-2
新しいウィンドウを
開くことによって―

00:20:27.594 --> 00:20:30.597 align:start position:30% line:-1
他者のページを開けます

00:20:31.031 --> 00:20:36.069 align:start position:30% line:-2
開くと言っても
通常のリンクと異なり―

00:20:36.170 --> 00:20:40.007 align:start position:34% line:-2
新しいウィンドウを
開くイメージです

00:20:40.707 --> 00:20:47.281 align:start position:27% line:-2
昔は格好の悪い
ポップアップが出てきました

00:20:48.415 --> 00:20:53.921 align:start position:29% line:-2
しかし古いAPIと異なり
ウィンドウが開きます

00:20:54.755 --> 00:20:57.758 align:start position:34% line:-2
誰かがコンテンツを
開いた時―

00:20:58.625 --> 00:21:02.796 align:start position:18% line:-2
“SameSite cookiesが
あるから大丈夫”

00:20:58.625 --> 00:21:02.796 align:start position:18% line:-2
“SameSite cookiesが
あるから大丈夫”

00:21:02.896 --> 00:21:05.099 align:start position:36% line:-1
そう思うでしょう

00:21:05.532 --> 00:21:10.838 align:start position:27% line:-2
しかし相手はウィンドウを
保有しているような状態です

00:21:11.672 --> 00:21:14.708 align:start position:32% line:-2
APIでウィンドウの
操作もでき―

00:21:14.808 --> 00:21:18.846 align:start position:32% line:-2
ナビゲートすることも
可能となります

00:21:19.980 --> 00:21:24.084 align:start position:29% line:-2
クロスオリジンウィンドウ
ポリシーでは―

00:21:24.184 --> 00:21:27.187 align:start position:36% line:-2
このような行為を
禁止できます

00:21:27.521 --> 00:21:33.160 align:start position:25% line:-2
このAPIを使用したサイトは
あまり多くなく―

00:21:33.260 --> 00:21:37.764 align:start position:30% line:-2
他者のウィンドウ操作も
まれではあります

00:21:38.165 --> 00:21:44.471 align:start position:29% line:-2
しかし確かに存在するので
ヘッダー指示により―

00:21:44.605 --> 00:21:47.541 align:start position:29% line:-1
禁止すべき行為と言えます

00:21:47.708 --> 00:21:51.478 align:start position:32% line:-2
サイト閲覧は可能でも
操作権限は与えません

00:21:51.945 --> 00:21:57.684 align:start position:29% line:-2
メッセージの投稿を行える
機能も存在します

00:21:57.985 --> 00:22:00.921 align:start position:29% line:-1
ウィンドウ間で会話をし―

00:21:57.985 --> 00:22:00.921 align:start position:29% line:-1
ウィンドウ間で会話をし―

00:22:01.021 --> 00:22:06.193 align:start position:30% line:-2
メッセージの投稿のみを
許可する仕組みです

00:22:07.127 --> 00:22:11.665 align:start position:30% line:-2
以上がクロスオリジン
ロックダウンの説明です

00:22:13.233 --> 00:22:16.336 align:start position:27% line:-1
それほど難しくないでしょう

00:22:16.437 --> 00:22:21.608 align:start position:25% line:-2
まずはホワイトリスト登録など
レスポンスヘッダーの設定

00:22:21.742 --> 00:22:27.314 align:start position:25% line:-2
そしてscriptタグの
integrity属性ですね

00:22:27.581 --> 00:22:30.818 align:start position:32% line:-2
ここで攻撃シナリオを
ご紹介し―

00:22:30.918 --> 00:22:37.491 align:start position:29% line:-2
リスクにどのような対処を
しているのか説明します

00:22:37.724 --> 00:22:41.428 align:start position:32% line:-2
クロスオリジン攻撃や
投機的実行攻撃

00:22:41.528 --> 00:22:46.633 align:start position:25% line:-2
ウィンドウコントロール攻撃に
ついて話します

00:22:47.100 --> 00:22:49.469 align:start position:30% line:-2
まずは
クロスオリジン攻撃です

00:22:50.337 --> 00:22:55.242 align:start position:25% line:-2
CDNに不具合が起こる
クロスサイトスクリプティング

00:22:55.342 --> 00:22:59.479 align:start position:27% line:-2
そしてご存知のクロスサイト
リクエストフォージェリ

00:23:00.581 --> 00:23:04.418 align:start position:32% line:-2
メッセージAppを
イメージしてください

00:23:04.518 --> 00:23:08.822 align:start position:27% line:-2
WebViewを伴う
ネイティブAppがあります

00:23:08.922 --> 00:23:14.695 align:start position:30% line:-2
ウェブブラウザ上でも
ウェブAppを使ったり

00:23:14.795 --> 00:23:19.199 align:start position:29% line:-2
メッセージを送り合ったり
することができます

00:23:19.299 --> 00:23:24.505 align:start position:30% line:-2
快いメッセージが
ほとんどとなりますが―

00:23:24.838 --> 00:23:30.777 align:start position:25% line:-2
一部 悪意のある内容のものも
含まれてしまいます

00:23:30.878 --> 00:23:33.146 align:start position:34% line:-1
こんなイメージです

00:23:34.047 --> 00:23:37.918 align:start position:30% line:-2
感じよく挨拶で始まり
マークアップが入ります

00:23:38.318 --> 00:23:44.658 align:start position:29% line:-2
Appやウェブサイトなど
どこかで間違えると―

00:23:45.559 --> 00:23:49.997 align:start position:29% line:-2
本物のマークアップとして
捉えられます

00:23:50.497 --> 00:23:55.836 align:start position:25% line:-2
すると攻撃者が
受け手のブラウザエンジンで―

00:23:56.370 --> 00:24:02.576 align:start position:25% line:-2
スクリプトを実行し
cookieを盗もうとします

00:23:56.370 --> 00:24:02.576 align:start position:25% line:-2
スクリプトを実行し
cookieを盗もうとします

00:24:02.676 --> 00:24:05.612 align:start position:30% line:-2
これには
完全な効力があるので―

00:24:05.712 --> 00:24:11.018 align:start position:34% line:-2
UIを乗っ取られる
可能性もあります

00:24:11.818 --> 00:24:16.890 align:start position:29% line:-2
これは起こってほしくない
事例ではありますが―

00:24:17.758 --> 00:24:22.663 align:start position:21% line:-2
HTTPOnlyの
認証cookieが設定されており

00:24:22.896 --> 00:24:26.767 align:start position:32% line:-2
悪意あるスクリプトは
無効にできます

00:24:27.367 --> 00:24:32.806 align:start position:18% line:-2
HTTPOnly cookieは
cookie自体を保護するものなので

00:24:33.307 --> 00:24:36.510 align:start position:27% line:-1
スクリプトはまだ実行中です

00:24:37.077 --> 00:24:39.947 align:start position:27% line:-1
では他に何ができるでしょう

00:24:40.614 --> 00:24:45.719 align:start position:30% line:-2
コンテンツセキュリティ
ポリシーは―

00:24:45.986 --> 00:24:50.524 align:start position:29% line:-2
スクリプト操作を
自分のみに可能とさせます

00:24:50.624 --> 00:24:57.731 align:start position:27% line:-2
インラインスクリプトを防ぎ
バグを引き起こしません

00:24:58.899 --> 00:25:03.971 align:start position:29% line:-2
ウェブページのポリシーを
設定しているので―

00:24:58.899 --> 00:25:03.971 align:start position:29% line:-2
ウェブページのポリシーを
設定しているので―

00:25:04.071 --> 00:25:06.707 align:start position:32% line:-2
外部からスクリプトを
挿入できません

00:25:08.208 --> 00:25:12.379 align:start position:29% line:-2
次にCDNが攻撃されたら
どうなるか

00:25:12.479 --> 00:25:16.783 align:start position:34% line:-2
防ぎたいものの
起こり得ることです

00:25:17.718 --> 00:25:20.687 align:start position:32% line:-2
CDNから読み込んだ
フレームワークは―

00:25:21.188 --> 00:25:26.593 align:start position:32% line:-2
スクリプトと同程度の
影響力がある要素です

00:25:28.061 --> 00:25:33.133 align:start position:18% line:-2
CDNが攻撃され
evil.exampleへと転送され

00:25:33.233 --> 00:25:36.103 align:start position:30% line:-2
攻撃コードを読み込めば
どうなるでしょう

00:25:36.537 --> 00:25:42.209 align:start position:29% line:-2
フレームワークは役に立つ
仕組みではありますが―

00:25:42.309 --> 00:25:44.344 align:start position:39% line:-1
悪さもします

00:25:44.778 --> 00:25:47.214 align:start position:32% line:-1
どう対処すべきなのか

00:25:47.481 --> 00:25:49.683 align:start position:30% line:-2
コンテンツセキュリティ
ポリシーで―

00:25:49.783 --> 00:25:51.919 align:start position:32% line:-2
ホワイトリスト登録を
しました

00:25:52.019 --> 00:25:54.054 align:start position:32% line:-1
そのためブラウザは―

00:25:54.154 --> 00:25:56.957 align:start position:32% line:-2
悪意あるスクリプトを
拒否します

00:25:58.192 --> 00:26:02.763 align:start position:29% line:-2
すると攻撃者も頭を使って
考え始めます

00:25:58.192 --> 00:26:02.763 align:start position:29% line:-2
すると攻撃者も頭を使って
考え始めます

00:26:03.297 --> 00:26:07.434 align:start position:21% line:-2
evil.exampleサーバに
転送する代わりに

00:26:07.534 --> 00:26:11.104 align:start position:21% line:-2
CDNサーバ上のスクリプト変更を
試みるでしょう

00:26:11.205 --> 00:26:15.309 align:start position:27% line:-2
そうすると
スクリプトは実行されますが

00:26:15.943 --> 00:26:21.081 align:start position:27% line:-2
サブリソースの整合性により
助かります

00:26:21.181 --> 00:26:26.253 align:start position:30% line:-2
自分のサーバ以外からの
スクリプトについては―

00:26:26.720 --> 00:26:31.391 align:start position:27% line:-2
チェックサムと合致しないと
除外されます

00:26:32.092 --> 00:26:34.194 align:start position:36% line:-1
攻撃は失敗します

00:26:35.662 --> 00:26:37.631 align:start position:39% line:-1
さて最後に―

00:26:37.731 --> 00:26:42.803 align:start position:27% line:-2
クロスサイト
リクエストフォージェリです

00:26:43.237 --> 00:26:47.174 align:start position:30% line:-2
フォージェリは
偽造という意味ですが―

00:26:47.274 --> 00:26:50.644 align:start position:34% line:-2
攻撃者はユーザの
リクエストに似た―

00:26:50.744 --> 00:26:56.483 align:start position:30% line:-2
偽のリクエストを
発信する場合があります

00:26:59.486 --> 00:27:02.589 align:start position:30% line:-2
メッセージAppの話に
戻りましょう

00:26:59.486 --> 00:27:02.589 align:start position:30% line:-2
メッセージAppの話に
戻りましょう

00:27:02.890 --> 00:27:07.094 align:start position:29% line:-2
ユーザがメッセージを送る
フォーラムでは―

00:27:07.194 --> 00:27:10.664 align:start position:23% line:-1
HTTPリクエストが送られます

00:27:10.764 --> 00:27:16.437 align:start position:29% line:-2
サーバにメッセージが届き
何の問題もないようなら―

00:27:16.537 --> 00:27:19.840 align:start position:36% line:-2
そのメッセージを
相手に送ります

00:27:20.641 --> 00:27:24.011 align:start position:27% line:-1
そこに悪意ある攻撃が入り―

00:27:24.111 --> 00:27:27.581 align:start position:29% line:-1
ユーザ情報を盗み取ります

00:27:27.681 --> 00:27:34.321 align:start position:18% line:-2
ユーザにリンクを送り
evil.exampleへ誘導します

00:27:34.421 --> 00:27:39.159 align:start position:30% line:-2
そこでネコに関する
興味深い統計を見せます

00:27:39.259 --> 00:27:44.464 align:start position:29% line:-2
この方法で しばらくの間
サイトに居させるのです

00:27:45.199 --> 00:27:48.035 align:start position:30% line:-1
そして気付かぬうちに―

00:27:48.135 --> 00:27:53.040 align:start position:32% line:-2
コンテンツに
リソースが読み込まれ

00:27:53.140 --> 00:27:57.144 align:start position:34% line:-2
ユーザの代わりに
メッセージを送り―

00:27:57.244 --> 00:28:01.381 align:start position:30% line:-2
cookieの機能も
自動的に付け足されます

00:27:57.244 --> 00:28:01.381 align:start position:30% line:-2
cookieの機能も
自動的に付け足されます

00:28:01.482 --> 00:28:04.384 align:start position:32% line:-1
これによりサーバは―

00:28:04.484 --> 00:28:09.389 align:start position:32% line:-2
ユーザはメッセージを
送りたいと誤解します

00:28:09.990 --> 00:28:14.895 align:start position:25% line:-2
内容はスパムや
マルウェアへのリンクでしょう

00:28:15.095 --> 00:28:19.633 align:start position:27% line:-2
最悪パートナーとの破局か…
話がそれました

00:28:19.733 --> 00:28:21.768 align:start position:25% line:-1
悪意のあるソフトウェアですね

00:28:23.504 --> 00:28:27.074 align:start position:36% line:-2
何としてでも
避けたいでしょう

00:28:27.941 --> 00:28:30.944 align:start position:20% line:-1
SameSite cookiesを

00:28:31.311 --> 00:28:34.181 align:start position:30% line:-1
幸運にも使用しています

00:28:34.281 --> 00:28:39.586 align:start position:30% line:-2
埋め込まれたことで
サーバの検出が働きます

00:28:39.720 --> 00:28:45.392 align:start position:23% line:-2
他のページのiframe内での
メッセージ送付は許可してません

00:28:45.526 --> 00:28:50.330 align:start position:27% line:-2
機密性の高い動作を行う場合
自分のUIである必要があり

00:28:50.430 --> 00:28:54.635 align:start position:30% line:-2
違う場合はリクエストを
拒否し 管理します

00:28:56.236 --> 00:29:02.876 align:start position:27% line:-2
クロスオリジン攻撃に対する
セキュリティは終了です

00:28:56.236 --> 00:29:02.876 align:start position:27% line:-2
クロスオリジン攻撃に対する
セキュリティは終了です

00:29:02.976 --> 00:29:07.347 align:start position:36% line:-2
次は新しく珍しい
攻撃の話をします

00:29:07.448 --> 00:29:11.051 align:start position:25% line:-1
投機的実行攻撃というものです

00:29:13.554 --> 00:29:18.725 align:start position:29% line:-2
ここでは投機的実行攻撃が
何かを説明し―

00:29:19.059 --> 00:29:23.997 align:start position:27% line:-2
その攻撃の手口と
対処法について取り上げます

00:29:25.199 --> 00:29:29.503 align:start position:30% line:-2
まずはCPUを
深く掘り下げていきます

00:29:29.603 --> 00:29:34.107 align:start position:16% line:-1
これがexecuting codeです

00:29:34.208 --> 00:29:38.278 align:start position:34% line:-2
様々な事柄に
条件付きで応じます

00:29:38.378 --> 00:29:43.016 align:start position:21% line:-2
“このxと呼ばれる
Array indexは安全か”

00:29:43.116 --> 00:29:47.221 align:start position:27% line:-1
“配列の範囲内か範囲外か”

00:29:47.321 --> 00:29:51.758 align:start position:29% line:-2
“範囲外であれば
エラー処理をするべきか”

00:29:51.859 --> 00:29:55.829 align:start position:29% line:-2
“範囲内なら 配列の中に
データを読み込もう”

00:29:56.964 --> 00:30:03.403 align:start position:27% line:-2
現在のCPUには学習能力が
備わっているので―

00:29:56.964 --> 00:30:03.403 align:start position:27% line:-2
現在のCPUには学習能力が
備わっているので―

00:30:03.504 --> 00:30:09.743 align:start position:29% line:-2
範囲内の場合 この配列を
読み込むのは安全だと判断

00:30:10.344 --> 00:30:16.517 align:start position:29% line:-2
安全かどうか判断する前に
推測から読み込むのです

00:30:16.617 --> 00:30:18.185 align:start position:38% line:-1
こんな感じです

00:30:18.285 --> 00:30:22.189 align:start position:34% line:-2
コードを見て
安全だろうと推測し

00:30:22.289 --> 00:30:26.126 align:start position:27% line:-1
そしてデータを読み込みます

00:30:26.226 --> 00:30:27.694 align:start position:36% line:-1
しかしこの場合―

00:30:27.795 --> 00:30:32.833 align:start position:32% line:-2
xは安全でなく
読み込みは誤りでした

00:30:32.933 --> 00:30:36.603 align:start position:27% line:-1
そこで正しく軌道修正します

00:30:38.005 --> 00:30:43.577 align:start position:30% line:-2
なぜこれでＯＫなのか？
あくまで予想だからです

00:30:43.677 --> 00:30:49.416 align:start position:29% line:-2
先取りして仕事を
進めておき 結論が出たら

00:30:49.516 --> 00:30:54.621 align:start position:32% line:-2
軌道修正すればいい
これが投機的実行です

00:30:55.589 --> 00:30:58.225 align:start position:30% line:-2
これが
どう攻撃に変わるのか？

00:30:58.325 --> 00:31:04.198 align:start position:30% line:-2
投機的実行の結果である
キャッシュ効果を―

00:30:58.325 --> 00:31:04.198 align:start position:30% line:-2
投機的実行の結果である
キャッシュ効果を―

00:31:04.298 --> 00:31:07.167 align:start position:27% line:-1
悪意あるコードが観察します

00:31:07.267 --> 00:31:12.873 align:start position:29% line:-2
そして読み込んだデータを
漏出してしまうのです

00:31:12.973 --> 00:31:17.911 align:start position:27% line:-2
読み込むべきではなくとも
キャッシュに痕跡が残ります

00:31:18.011 --> 00:31:24.351 align:start position:27% line:-2
攻撃者はキャッシュから
不正なデータを漏出できます

00:31:25.018 --> 00:31:27.654 align:start position:27% line:-1
ウェブコンテンツはどうか？

00:31:28.288 --> 00:31:30.357 align:start position:30% line:-2
同一オリジンポリシーの
話をしました

00:31:30.457 --> 00:31:35.596 align:start position:27% line:-2
20年間 我々を守ってきた
この仕組みのおかげで

00:31:35.696 --> 00:31:41.935 align:start position:23% line:-2
異なるオリジンのフレームからは
情報を読み取れません

00:31:43.136 --> 00:31:47.775 align:start position:29% line:-2
投機的実行攻撃の際
このポリシーは頼れません

00:31:48.709 --> 00:31:53.013 align:start position:30% line:-2
スクリプトを
書き出せるのであれば―

00:31:53.113 --> 00:32:00.521 align:start position:29% line:-2
投機的実行攻撃の際に
コンテンツを読み取れます

00:31:53.113 --> 00:32:00.521 align:start position:29% line:-2
投機的実行攻撃の際に
コンテンツを読み取れます

00:32:01.455 --> 00:32:04.458 align:start position:32% line:-2
ウェブ上の
大きな課題と言えます

00:32:04.591 --> 00:32:08.128 align:start position:29% line:-2
私はブラウザのベンダーと
一緒に

00:32:08.228 --> 00:32:13.767 align:start position:27% line:-2
デフォルトでこの問題を
解決するため尽力しています

00:32:13.867 --> 00:32:18.205 align:start position:30% line:-2
しかし皆さんのご協力が
必要なのです

00:32:18.305 --> 00:32:22.443 align:start position:30% line:-2
今まで見てきた防衛策に
皆さんがオプトインし

00:32:22.543 --> 00:32:28.015 align:start position:27% line:-2
より良いデフォルトが
欲しいと我々に伝えてほしい

00:32:28.115 --> 00:32:31.118 align:start position:29% line:-2
“古いAPIのサポートは
不要”とも

00:32:31.218 --> 00:32:33.287 align:start position:32% line:-1
我々はより積極的に―

00:32:33.387 --> 00:32:36.757 align:start position:36% line:-2
投機的実行攻撃に
立ち向えます

00:32:37.391 --> 00:32:41.795 align:start position:30% line:-2
さて 基本的な
対処法を見てみましょう

00:32:42.029 --> 00:32:47.134 align:start position:14% line:-1
evil.exampleのフレームとして

00:32:47.234 --> 00:32:53.106 align:start position:25% line:-2
ウェブコンテンツプロセスを
実行しないようにすることです

00:32:53.273 --> 00:32:56.944 align:start position:27% line:-2
evil.exampleの
フレームがあれば―

00:32:57.044 --> 00:33:02.616 align:start position:23% line:-2
同じプロセスを利用して
ウェブコンテンツを読み取れます

00:32:57.044 --> 00:33:02.616 align:start position:23% line:-2
同じプロセスを利用して
ウェブコンテンツを読み取れます

00:33:03.350 --> 00:33:06.086 align:start position:34% line:-2
どのように
防げるでしょうか？

00:33:06.186 --> 00:33:12.960 align:start position:29% line:-2
まずはWKWebView
というものがあります

00:33:14.661 --> 00:33:17.931 align:start position:25% line:-1
これはSafariの画面です

00:33:18.031 --> 00:33:23.437 align:start position:25% line:-2
現代版WebKitとも言える
WKWebViewを―

00:33:23.537 --> 00:33:25.739 align:start position:29% line:-1
長い間 使用してきました

00:33:26.340 --> 00:33:29.476 align:start position:27% line:-1
様々な利点があるのですが―

00:33:30.010 --> 00:33:36.116 align:start position:9% line:-2
evil.example webkit.org
ウェブコンテンツの３つのタブは

00:33:36.216 --> 00:33:39.386 align:start position:23% line:-1
個別にレンダリングされています

00:33:40.087 --> 00:33:45.659 align:start position:27% line:-2
またWKWebViewでは
ネットワークも個別で

00:33:45.759 --> 00:33:52.266 align:start position:23% line:-2
１つ１つにcookieや
HTTPヘッダーが付加されます

00:33:54.268 --> 00:33:56.803 align:start position:34% line:-1
投機的実行攻撃は―

00:33:56.904 --> 00:34:00.440 align:start position:29% line:-2
全て同じプロセスの場合に
効果を発揮します

00:33:56.904 --> 00:34:00.440 align:start position:29% line:-2
全て同じプロセスの場合に
効果を発揮します

00:34:00.541 --> 00:34:06.680 align:start position:23% line:-2
プロセスが同じだと
データも読み取り可能となります

00:34:07.047 --> 00:34:12.418 align:start position:29% line:-2
プロセスを分けてしまうと
攻撃が効果を発揮しません

00:34:12.518 --> 00:34:17.024 align:start position:27% line:-2
プロセス境界を越えることは
できないのです

00:34:17.157 --> 00:34:19.760 align:start position:27% line:-1
つまりすでに守られています

00:34:19.860 --> 00:34:24.063 align:start position:27% line:-2
ここで重要なのが
ウェブコンテンツプロセスは

00:34:24.164 --> 00:34:28.702 align:start position:25% line:-2
ネットワークに到達できず
攻撃も不可能だということです

00:34:29.969 --> 00:34:33.172 align:start position:32% line:-2
UIWebViewを
使用しているなら―

00:34:33.273 --> 00:34:39.478 align:start position:30% line:-2
我々はベータ版と見なし
お勧めしていません

00:34:40.414 --> 00:34:47.021 align:start position:27% line:-2
自身のウェブコンテンツと
evil.exampleが

00:34:47.420 --> 00:34:49.456 align:start position:27% line:-1
全てAppに入っている場合

00:34:50.257 --> 00:34:55.929 align:start position:27% line:-2
投機的実行攻撃をする側から
見ると 攻撃可能です

00:34:56.263 --> 00:34:58.599 align:start position:32% line:-1
全て同じプロセスで―

00:34:58.966 --> 00:35:03.737 align:start position:27% line:-1
投機的実行攻撃は防げません

00:34:58.966 --> 00:35:03.737 align:start position:27% line:-1
投機的実行攻撃は防げません

00:35:04.171 --> 00:35:07.007 align:start position:30% line:-2
UIWebViewは
やめた方がいいでしょう

00:35:07.741 --> 00:35:11.445 align:start position:21% line:-1
WKWebViewを使用すると―

00:35:12.780 --> 00:35:15.382 align:start position:32% line:-1
プロセスが異なるので

00:35:15.716 --> 00:35:20.220 align:start position:27% line:-2
攻撃された場合
他の要素に影響はありません

00:35:21.155 --> 00:35:26.226 align:start position:29% line:-2
次はWKWebViewの
セキュリティについてです

00:35:27.327 --> 00:35:31.098 align:start position:21% line:-2
social.exampleから
ウィジェットが提供されます

00:35:32.099 --> 00:35:36.403 align:start position:25% line:-2
そこで
インジェクション攻撃を受け―

00:35:36.503 --> 00:35:40.174 align:start position:30% line:-2
メッセージに
含まれるマークアップを

00:35:40.274 --> 00:35:42.976 align:start position:25% line:-1
表示してしまうかもしれません

00:35:43.310 --> 00:35:46.046 align:start position:30% line:-2
またアドネットワークが
攻撃され―

00:35:46.146 --> 00:35:52.452 align:start position:20% line:-2
そこからevil.exampleに
つながるのです

00:35:52.586 --> 00:35:59.193 align:start position:18% line:-2
evil.exampleのフレームが
ある状態では危険です

00:35:59.927 --> 00:36:03.931 align:start position:30% line:-2
コンテンツセキュリティ
ポリシーを展開し―

00:35:59.927 --> 00:36:03.931 align:start position:30% line:-2
コンテンツセキュリティ
ポリシーを展開し―

00:36:04.031 --> 00:36:08.435 align:start position:30% line:-2
フレームの読み込み先を
指定しました

00:36:09.103 --> 00:36:11.672 align:start position:27% line:-2
evil.exampleは
許可してはなりません

00:36:13.507 --> 00:36:19.279 align:start position:29% line:-2
これが害のあるフレームを
取り込んだ場合の対応です

00:36:20.347 --> 00:36:22.316 align:start position:29% line:-1
逆にウェブコンテンツが―

00:36:22.416 --> 00:36:27.121 align:start position:27% line:-2
害あるプロセスに
引き込まれることもあります

00:36:27.821 --> 00:36:31.125 align:start position:29% line:-1
どうやって防ぐのでしょう

00:36:31.458 --> 00:36:36.063 align:start position:30% line:-2
コンテンツセキュリティ
ポリシーの―

00:36:36.163 --> 00:36:39.900 align:start position:20% line:-2
frame ancestorの話を
思い出しましょう

00:36:40.000 --> 00:36:41.735 align:start position:30% line:-1
“none”と指定して

00:36:41.835 --> 00:36:45.372 align:start position:29% line:-2
iframeを拒否すれば
いいのです

00:36:45.472 --> 00:36:48.842 align:start position:30% line:-2
自分のウェブコンテンツ
なので―

00:36:48.942 --> 00:36:52.446 align:start position:30% line:-2
勝手にiframeには
取り込まれません

00:36:52.746 --> 00:36:55.916 align:start position:36% line:-2
このような指示を
入力すると―

00:36:56.016 --> 00:37:01.221 align:start position:25% line:-2
evil.exampleから
コンテンツが守られます

00:36:56.016 --> 00:37:01.221 align:start position:25% line:-2
evil.exampleから
コンテンツが守られます

00:37:01.321 --> 00:37:05.626 align:start position:23% line:-2
これはネットワークプロセス上で
行います

00:37:05.726 --> 00:37:11.231 align:start position:21% line:-2
攻撃は同じプロセススペースでのみ
起こるので

00:37:11.331 --> 00:37:16.303 align:start position:18% line:-2
JavaScriptが実行される前に
防ぐことが重要です

00:37:17.237 --> 00:37:22.442 align:start position:16% line:-2
次に
HTTPOnly cookieについて

00:37:22.542 --> 00:37:28.282 align:start position:23% line:-2
クロスサイトスクリプティングを
防ぐよりも重要です

00:37:28.382 --> 00:37:35.322 align:start position:9% line:-2
cookieを閲覧するAPI
document.cookieを覚えてますか？

00:37:35.989 --> 00:37:39.927 align:start position:30% line:-2
同一オリジンポリシーに
頼れなくなった今―

00:37:40.027 --> 00:37:45.332 align:start position:14% line:-2
evil.exampleがiframeに
到達できます

00:37:45.732 --> 00:37:46.900 align:start position:43% line:-1
最悪です

00:37:47.201 --> 00:37:53.040 align:start position:20% line:-2
しかしHTTPOnlyとすることで
これを防げます

00:37:53.173 --> 00:37:58.612 align:start position:27% line:-2
ウェブコンテンツプロセスに
移すことも不要です

00:37:59.446 --> 00:38:03.750 align:start position:27% line:-2
自動的にcookieを
投機的実行攻撃から守ります

00:37:59.446 --> 00:38:03.750 align:start position:27% line:-2
自動的にcookieを
投機的実行攻撃から守ります

00:38:05.118 --> 00:38:06.453 align:start position:20% line:-1
SameSite cookiesは

00:38:06.553 --> 00:38:10.324 align:start position:23% line:-2
コンテンツを組み込まれた場合に
対処します

00:38:10.424 --> 00:38:15.863 align:start position:27% line:-2
evil.exampleは
投機的実行攻撃を狙います

00:38:16.530 --> 00:38:21.501 align:start position:14% line:-2
しかしSameSite cookiesは
送信されず

00:38:21.602 --> 00:38:25.906 align:start position:29% line:-2
埋め込まれたコンテンツを
サーバーが検出

00:38:26.006 --> 00:38:30.210 align:start position:30% line:-2
リソースを組み込むのを
サーバが拒否します

00:38:31.278 --> 00:38:34.948 align:start position:20% line:-1
evil.exampleも防げます

00:38:35.716 --> 00:38:40.788 align:start position:25% line:-2
最後にクロスオリジンリソース
ポリシーについて話します

00:38:41.355 --> 00:38:46.593 align:start position:32% line:-2
この新しいヘッダーの
ブラウザエンジンでは

00:38:46.693 --> 00:38:52.099 align:start position:25% line:-2
サーバから画像やスクリプトを
読み込めるのは自分だけです

00:38:52.199 --> 00:38:56.703 align:start position:23% line:-2
サーバー上の画像やスクリプトに
ヘッダーを送ると

00:38:56.803 --> 00:39:01.074 align:start position:21% line:-2
evil.exampleによって
読み込まれるのを防ぎます

00:38:56.803 --> 00:39:01.074 align:start position:21% line:-2
evil.exampleによって
読み込まれるのを防ぎます

00:39:01.175 --> 00:39:04.077 align:start position:30% line:-2
ネットワークプロセスを
ブロックします

00:39:04.244 --> 00:39:10.851 align:start position:27% line:-2
再確認ですがプロセスを
分けることで攻撃を防げます

00:39:12.552 --> 00:39:19.393 align:start position:32% line:-2
最後はウィンドウ
コントロール攻撃です

00:39:20.360 --> 00:39:23.764 align:start position:16% line:-1
tabnappingとも呼ばれる攻撃と

00:39:23.864 --> 00:39:27.067 align:start position:29% line:-1
防衛方法を見てみましょう

00:39:28.335 --> 00:39:32.940 align:start position:23% line:-2
再びevil.exampleを
取り上げます

00:39:33.040 --> 00:39:34.608 align:start position:21% line:-1
window.openが行使され

00:39:34.708 --> 00:39:41.815 align:start position:25% line:-2
新しいウィンドウで誰かが
ウェブページを開いたようです

00:39:42.549 --> 00:39:46.553 align:start position:16% line:-2
SameSite cookiesもあり
大丈夫と思っても―

00:39:47.054 --> 00:39:48.989 align:start position:36% line:-1
安心はできません

00:39:49.089 --> 00:39:54.027 align:start position:20% line:-2
evil.exampleはユーザが
目を離すのを待ち―

00:39:54.161 --> 00:39:59.366 align:start position:32% line:-2
偽のページへ誘導する
操作を行います

00:39:59.466 --> 00:40:03.771 align:start position:34% line:-2
元のページのように
見せかけ―

00:39:59.466 --> 00:40:03.771 align:start position:34% line:-2
元のページのように
見せかけ―

00:40:04.171 --> 00:40:07.674 align:start position:36% line:-2
再ログインさせて
情報を盗みます

00:40:08.375 --> 00:40:12.312 align:start position:34% line:-2
管理を任せていると
起こり得ることです

00:40:13.146 --> 00:40:16.150 align:start position:30% line:-2
クロスオリジン
ウィンドウポリシーを―

00:40:16.717 --> 00:40:20.654 align:start position:27% line:-2
適用すると ウィンドウへの
誘導ができず―

00:40:20.754 --> 00:40:24.525 align:start position:25% line:-1
攻撃される心配もなくなります

00:40:25.859 --> 00:40:28.395 align:start position:27% line:-1
セキュリティの話は以上です

00:40:30.030 --> 00:40:34.001 align:start position:30% line:-2
ここからは
今日の内容を振り返り―

00:40:34.101 --> 00:40:39.606 align:start position:27% line:-2
帰宅もしくは帰社後に
行動に移してもらいたいです

00:40:40.674 --> 00:40:43.877 align:start position:32% line:-2
まずは通信の
セキュリティとして―

00:40:43.977 --> 00:40:46.380 align:start position:32% line:-2
HTTPSとWSSへ
移行してください

00:40:47.181 --> 00:40:52.119 align:start position:20% line:-2
CookieはHTTPOnlyとし
守ってください

00:40:52.219 --> 00:40:56.890 align:start position:27% line:-2
私は全てHTTPOnlyと
することをお勧めします

00:40:57.791 --> 00:41:03.163 align:start position:23% line:-2
UIWebViewは
WKWebViewに移行します

00:40:57.791 --> 00:41:03.163 align:start position:23% line:-2
UIWebViewは
WKWebViewに移行します

00:41:03.697 --> 00:41:07.234 align:start position:34% line:-2
あとはディフェンス
メカニズムについて

00:41:07.334 --> 00:41:10.370 align:start position:30% line:-2
コンテンツセキュリティ
ポリシーは―

00:41:10.470 --> 00:41:14.475 align:start position:36% line:-2
攻撃から守る
役割を果たします

00:41:16.176 --> 00:41:18.178 align:start position:21% line:-1
HTTPOnly cookieは

00:41:18.278 --> 00:41:23.450 align:start position:25% line:-2
クロスサイトスクリプティング
からも守れますが

00:41:23.884 --> 00:41:27.454 align:start position:36% line:-2
投機的実行攻撃は
確実に防げます

00:41:27.554 --> 00:41:31.425 align:start position:21% line:-2
HTTPOnly cookieは
送信されないからです

00:41:33.227 --> 00:41:38.098 align:start position:27% line:-2
サブリソースの整合性により
CDN攻撃から守ります

00:41:38.198 --> 00:41:42.569 align:start position:27% line:-2
他人の実行コードを
自分のページから除外します

00:41:44.538 --> 00:41:49.176 align:start position:20% line:-2
SameSite cookiesは
偽のリクエストにより―

00:41:49.276 --> 00:41:52.780 align:start position:29% line:-2
情報が盗み取られることを
防ぎます

00:41:52.880 --> 00:41:56.984 align:start position:20% line:-2
SameSite cookiesが
送信されない場合―

00:41:57.084 --> 00:42:00.053 align:start position:27% line:-1
このリスクに注意が必要です

00:41:57.084 --> 00:42:00.053 align:start position:27% line:-1
このリスクに注意が必要です

00:42:00.154 --> 00:42:03.056 align:start position:27% line:-1
投機的実行攻撃でも同様です

00:42:03.156 --> 00:42:09.263 align:start position:32% line:-2
害のあるページが
盗みを働いている時―

00:42:09.363 --> 00:42:13.167 align:start position:20% line:-2
SameSite cookiesは
送られません

00:42:14.501 --> 00:42:18.305 align:start position:32% line:-2
次にクロスオリジン
リソースポリシーです

00:42:18.705 --> 00:42:24.578 align:start position:30% line:-2
画像やスクリプトなどの
クロスオリジンロードを

00:42:24.678 --> 00:42:28.115 align:start position:34% line:-2
自分のサイトのみで
可能とします

00:42:28.482 --> 00:42:30.751 align:start position:38% line:-2
そして最後に
ウィンドウは―

00:42:30.851 --> 00:42:37.424 align:start position:29% line:-2
他者が操作できないように
注意が必要となります

00:42:40.227 --> 00:42:44.264 align:start position:32% line:-2
今日ご紹介したのは
簡単なものばかりです

00:42:44.365 --> 00:42:49.136 align:start position:34% line:-2
特に自分のサイトや
コンテンツなので―

00:42:49.269 --> 00:42:55.509 align:start position:25% line:-2
デフォルト設定では危ないため
各自オプトインしてください

00:42:56.276 --> 00:42:59.980 align:start position:32% line:-2
セキュリティの状態も
確認してください

00:43:00.280 --> 00:43:05.886 align:start position:27% line:-2
その目的で自分で攻撃を
仕掛けてみるのもお勧めです

00:43:05.986 --> 00:43:10.057 align:start position:25% line:-1
もちろん機能の確認も必要です

00:43:11.725 --> 00:43:15.162 align:start position:23% line:-2
WebKitはオープンソースの
プロジェクトで

00:43:15.262 --> 00:43:18.765 align:start position:30% line:-2
技術については
ブログに記載しています

00:43:18.999 --> 00:43:22.636 align:start position:32% line:-2
クロスオリジン
リソースポリシーと―

00:43:22.736 --> 00:43:26.473 align:start position:29% line:-2
クロスオリジンウィンドウ
ポリシーについても―

00:43:26.573 --> 00:43:29.977 align:start position:36% line:-2
このブログで
更新していきます

00:43:30.077 --> 00:43:35.883 align:start position:25% line:-2
現在 ブラウザのベンダーと
標準化の話し合いをしています

00:43:36.216 --> 00:43:42.422 align:start position:27% line:-2
そのため名称や機能に
変更がある可能性もあります

00:43:42.522 --> 00:43:49.296 align:start position:29% line:-2
何せ新しい仕組みなので
まだアクセスもできません

00:43:49.396 --> 00:43:53.901 align:start position:30% line:-2
サポート体制も
まだ構築できていません

00:43:55.436 --> 00:44:01.441 align:start position:20% line:-2
他にもSafariやWebKitの
セッションも開催しています

00:43:55.436 --> 00:44:01.441 align:start position:20% line:-2
他にもSafariやWebKitの
セッションも開催しています

00:44:01.542 --> 00:44:03.043 align:start position:36% line:-1
明日の14時です

00:44:03.143 --> 00:44:09.550 align:start position:27% line:-2
是非ご参加いただき 一緒に
最適な方法を探しましょう

00:44:09.850 --> 00:44:14.988 align:start position:27% line:-2
一般的な内容のセッションが
金曜日にもあります

00:44:16.290 --> 00:44:17.091 align:start position:41% line:-1
では また

00:44:17.191 --> 00:44:21.495 align:start position:43% line:-1
(拍手)
