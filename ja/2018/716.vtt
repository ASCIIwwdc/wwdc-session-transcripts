WEBVTT

00:00:07.040 --> 00:00:16.683 align:start position:43% line:-1
(音楽)

00:00:19.586 --> 00:00:26.460 align:start position:43% line:-1
(拍手)

00:00:27.561 --> 00:00:32.031 align:start position:27% line:-2
オブジェクトトラッキングに
ついてお話しします

00:00:32.665 --> 00:00:36.069 align:start position:32% line:-2
Visionの問題に
直面したことは？

00:00:36.603 --> 00:00:40.040 align:start position:29% line:-2
もしあれば
MacであれiOSであれ

00:00:40.140 --> 00:00:43.110 align:start position:36% line:-2
このセッションが
役に立つでしょう

00:00:43.310 --> 00:00:44.645 align:start position:34% line:-1
私 カメンスキーが

00:00:44.745 --> 00:00:47.981 align:start position:23% line:-2
Visionのフレームワークに
ついてお話しします

00:00:51.585 --> 00:00:53.587 align:start position:32% line:-1
アジェンダは４つです

00:00:53.687 --> 00:00:55.989 align:start position:27% line:-1
まず なぜVisionか？

00:00:56.190 --> 00:01:00.194 align:start position:32% line:-2
次は本年度の
最新情報についてです

00:00:56.190 --> 00:01:00.194 align:start position:32% line:-2
次は本年度の
最新情報についてです

00:01:00.827 --> 00:01:04.965 align:start position:14% line:-2
そして
Vision APIについてお話しします

00:01:05.465 --> 00:01:10.604 align:start position:29% line:-2
最後は本日のメインの
トラッキングについてです

00:01:13.874 --> 00:01:14.942 align:start position:32% line:-1
なぜVisionか？

00:01:17.811 --> 00:01:23.617 align:start position:23% line:-2
コンピュータービジョンに関する
あらゆる問題を解消するために

00:01:24.051 --> 00:01:28.555 align:start position:27% line:-2
シンプルで一貫性のある
インターフェイスにしました

00:01:28.655 --> 00:01:33.260 align:start position:32% line:-2
iOSとmacOSと
tvOSで稼働します

00:01:34.127 --> 00:01:35.762 align:start position:32% line:-1
プライバシーを重視し

00:01:35.863 --> 00:01:41.068 align:start position:27% line:-2
デバイス内のデータが
流出しないようにしています

00:01:42.202 --> 00:01:43.971 align:start position:34% line:-1
我々は常に進化し―

00:01:44.471 --> 00:01:49.042 align:start position:27% line:-2
アルゴリズムを改善し
新開発にも取り組んでいます

00:01:51.512 --> 00:01:53.113 align:start position:23% line:-1
Visionの基礎を見ましょう

00:01:54.515 --> 00:01:59.753 align:start position:29% line:-2
Vision APIとの
インタラクションにおいて

00:02:00.254 --> 00:02:03.690 align:start position:32% line:-2
何をどう処理し
結果をどこで見るか？

00:02:04.658 --> 00:02:07.327 align:start position:30% line:-1
何を処理するかというと

00:02:07.694 --> 00:02:09.763 align:start position:30% line:-1
皆さんのリクエストです

00:02:10.364 --> 00:02:14.134 align:start position:34% line:-2
どのように
処理するかというと

00:02:14.234 --> 00:02:18.472 align:start position:32% line:-2
リクエストハンドラや
エンジンを使います

00:02:19.006 --> 00:02:23.610 align:start position:25% line:-2
結果は
オブザベーションとして出ます

00:02:24.444 --> 00:02:25.946 align:start position:39% line:-1
ご覧ください

00:02:26.180 --> 00:02:31.218 align:start position:25% line:-2
これは今回のセッションで
最も重要なスライドの１つです

00:02:31.318 --> 00:02:37.824 align:start position:23% line:-2
リクエストやリクエストハンドラ
オブザベーションを示しています

00:02:42.229 --> 00:02:44.064 align:start position:32% line:-1
まずはリクエストです

00:02:44.164 --> 00:02:47.201 align:start position:38% line:-2
本日ご用意した
リクエストです

00:02:47.534 --> 00:02:52.606 align:start position:30% line:-2
様々なディテクタがあり
画像登録処理や―

00:02:52.706 --> 00:02:56.143 align:start position:20% line:-2
トラッカーに加え
Core MLリクエストもあります

00:02:56.243 --> 00:02:59.980 align:start position:23% line:-2
VisionとCore MLの
併用については

00:03:00.080 --> 00:03:06.086 align:start position:25% line:-2
同僚のフランが行う
次のセッションでお話しします

00:03:08.455 --> 00:03:10.190 align:start position:30% line:-1
リクエストハンドラです

00:03:11.124 --> 00:03:13.994 align:start position:11% line:-1
VNImageRequestHandlerと

00:03:14.094 --> 00:03:16.430 align:start position:5% line:-2
VNSequenceRequestHandlerが
あります

00:03:16.530 --> 00:03:19.099 align:start position:34% line:-1
比較してみましょう

00:03:20.200 --> 00:03:22.169 align:start position:12% line:-2
まずは
VNImageRequestHandler

00:03:24.004 --> 00:03:28.942 align:start position:29% line:-2
同じイメージで１つ以上の
リクエストを処理します

00:03:30.010 --> 00:03:35.716 align:start position:23% line:-2
ここにはイメージの派生物などの
情報をキャッシュして

00:03:35.816 --> 00:03:39.286 align:start position:32% line:-2
他のパイプライン上の
リクエストで使います

00:03:39.887 --> 00:03:43.924 align:start position:29% line:-2
例えば
ニューラルネットワークは

00:03:44.024 --> 00:03:48.395 align:start position:27% line:-2
カラースキームのしかるべき
イメージを持ちます

00:03:48.495 --> 00:03:53.233 align:start position:23% line:-2
例えば 500×500で白黒と
予想した場合

00:03:53.800 --> 00:03:57.004 align:start position:32% line:-2
その形式の
ユーザ入力はまれです

00:03:57.104 --> 00:03:59.640 align:start position:27% line:-1
そこでイメージを変換します

00:03:59.740 --> 00:04:02.910 align:start position:29% line:-2
ニューラルネットワークに
入れる情報を

00:03:59.740 --> 00:04:02.910 align:start position:29% line:-2
ニューラルネットワークに
入れる情報を

00:04:03.010 --> 00:04:06.480 align:start position:30% line:-2
リクエストハンドラでも
キャッシュします

00:04:06.580 --> 00:04:12.719 align:start position:29% line:-2
次に同一の形式を使う際に
再計算の必要がありません

00:04:13.187 --> 00:04:17.891 align:start position:23% line:-2
リクエストの結果もキャッシュし
パイプライン上で使えます

00:04:17.991 --> 00:04:21.428 align:start position:36% line:-2
パイプラインを
見ていきましょう

00:04:22.930 --> 00:04:24.865 align:start position:9% line:-1
SequenceRequestHandlerは

00:04:25.499 --> 00:04:31.839 align:start position:25% line:-2
フレームのシーケンス内での
トラッキングなどに使われます

00:04:32.406 --> 00:04:35.509 align:start position:29% line:-2
シーケンス全体にわたって
フレーム間の―

00:04:35.609 --> 00:04:38.512 align:start position:32% line:-2
オペレーション状況を
キャッシュします

00:04:39.546 --> 00:04:43.750 align:start position:23% line:-2
Visionではトラッキングや
画像登録処理などに使われ

00:04:43.884 --> 00:04:46.987 align:start position:7% line:-2
その他の処理は
ImageRequestHandlerによります

00:04:51.124 --> 00:04:54.928 align:start position:27% line:-2
結果は
オブザベーションから出ます

00:04:55.295 --> 00:05:01.401 align:start position:18% line:-2
これはVNObservationから
派生するクラスの集合体です

00:04:55.295 --> 00:05:01.401 align:start position:18% line:-2
これはVNObservationから
派生するクラスの集合体です

00:05:01.501 --> 00:05:03.070 align:start position:38% line:-1
取得の方法は？

00:05:03.537 --> 00:05:05.639 align:start position:38% line:-1
１つ目の方法は

00:05:05.739 --> 00:05:11.812 align:start position:23% line:-2
リクエストの処理後に
結果のプロパティを見ることです

00:05:11.912 --> 00:05:14.615 align:start position:27% line:-1
それで処理結果が分かります

00:05:16.483 --> 00:05:19.353 align:start position:29% line:-1
２つ目は手動で作成します

00:05:19.820 --> 00:05:22.789 align:start position:32% line:-2
後ほど これらの例を
ご覧ください

00:05:27.327 --> 00:05:30.030 align:start position:25% line:-1
今年の最新情報をお話しします

00:05:30.330 --> 00:05:33.066 align:start position:25% line:-2
まずは
新しいフェイスディテクタです

00:05:34.835 --> 00:05:39.439 align:start position:27% line:-2
より多くの顔を
方向に関係なく検出できます

00:05:39.773 --> 00:05:44.244 align:start position:23% line:-2
一例として
７人の顔の画像を見てみましょう

00:05:44.444 --> 00:05:49.049 align:start position:30% line:-2
昨年のディテクタで
検出できる顔は３つです

00:05:49.149 --> 00:05:52.953 align:start position:29% line:-2
これらは
直立姿勢に近い人の顔です

00:05:53.854 --> 00:05:57.858 align:start position:34% line:-2
新しいディテクタで
処理すると

00:05:57.958 --> 00:06:01.895 align:start position:29% line:-2
ご覧のように
すべての顔が検出されます

00:05:57.958 --> 00:06:01.895 align:start position:29% line:-2
ご覧のように
すべての顔が検出されます

00:06:04.031 --> 00:06:06.066 align:start position:36% line:-1
詳しく見ましょう

00:06:06.166 --> 00:06:09.736 align:start position:43% line:-1
(拍手)

00:06:15.042 --> 00:06:20.614 align:start position:29% line:-2
このディテクタは昨年と
同じAPIを使っています

00:06:20.714 --> 00:06:25.652 align:start position:30% line:-2
修正事項を特定する時は
プロパティを上書きして

00:06:25.752 --> 00:06:28.288 align:start position:25% line:-2
ユーザのRevision2と
設定します

00:06:28.388 --> 00:06:30.657 align:start position:30% line:-1
理由はあとで説明します

00:06:31.525 --> 00:06:34.361 align:start position:36% line:-2
新規プロパティも
２つ導入しました

00:06:34.461 --> 00:06:37.698 align:start position:34% line:-2
１つは 回転
頭のこんな動きです

00:06:37.798 --> 00:06:41.235 align:start position:32% line:-2
もう１つは 方位変更
首を軸にした動きです

00:06:45.005 --> 00:06:49.543 align:start position:27% line:-2
我々は新たなアルゴリズムを
導入する際でも

00:06:49.643 --> 00:06:51.945 align:start position:29% line:-1
旧版を即座に廃止しません

00:06:52.045 --> 00:06:57.985 align:start position:27% line:-2
新旧両方の修正事項を
ある程度の期間は維持します

00:06:58.385 --> 00:07:02.823 align:start position:32% line:-2
プロパティを特定し
処理の方法を決めます

00:06:58.385 --> 00:07:02.823 align:start position:32% line:-2
プロパティを特定し
処理の方法を決めます

00:07:03.957 --> 00:07:07.661 align:start position:27% line:-1
デフォルトの動作もあります

00:07:07.761 --> 00:07:11.131 align:start position:29% line:-2
リクエストオブジェクトを
作成する際に

00:07:11.231 --> 00:07:14.368 align:start position:36% line:-2
指示を与えないと
こうなります

00:07:14.735 --> 00:07:21.208 align:start position:21% line:-2
アプリケーションがリンクしている
SDKのリクエストの

00:07:21.308 --> 00:07:23.911 align:start position:27% line:-1
直近の修正事項が出てきます

00:07:24.011 --> 00:07:26.613 align:start position:29% line:-1
重要なので例を紹介します

00:07:26.980 --> 00:07:30.484 align:start position:30% line:-2
昨年のSDKに
リンクしているとします

00:07:30.584 --> 00:07:33.086 align:start position:27% line:-1
昨年は単一のディテクタです

00:07:33.187 --> 00:07:35.222 align:start position:30% line:-1
コンパイルせずに使うと

00:07:35.455 --> 00:07:39.693 align:start position:32% line:-2
昨年のディテクタしか
使えないのです

00:07:40.460 --> 00:07:44.932 align:start position:27% line:-2
その一方で
コードや座標を変更せずに―

00:07:45.032 --> 00:07:48.702 align:start position:29% line:-2
アプリケーションを
コンパイルし直すとします

00:07:48.802 --> 00:07:53.040 align:start position:23% line:-2
そうすればデフォルトで
Revision2となるのです

00:07:54.808 --> 00:07:59.313 align:start position:29% line:-2
アプリケーションを最新に
保ってください

00:07:59.413 --> 00:08:02.816 align:start position:36% line:-2
次のステップが
常に決まるのです

00:07:59.413 --> 00:08:02.816 align:start position:36% line:-2
次のステップが
常に決まるのです

00:08:02.916 --> 00:08:07.154 align:start position:23% line:-2
皆さんが引用するアルゴリズムの
パフォーマンスは

00:08:07.254 --> 00:08:08.622 align:start position:36% line:-1
お分かりでしょう

00:08:08.722 --> 00:08:12.159 align:start position:32% line:-2
アプリケーションは
最新の状態に保てます

00:08:12.259 --> 00:08:17.865 align:start position:30% line:-2
例えば特定の修正事項を
数年後に廃止して

00:08:18.065 --> 00:08:20.901 align:start position:30% line:-1
新たにコード化できます

00:08:25.405 --> 00:08:29.576 align:start position:25% line:-2
次はVision APIとの
インタラクションです

00:08:32.011 --> 00:08:34.548 align:start position:25% line:-2
イメージリクエストハンドラの
例を見ます

00:08:35.549 --> 00:08:40.888 align:start position:27% line:-2
同一のイメージで１つ以上の
処理を行います

00:08:42.489 --> 00:08:47.060 align:start position:27% line:-2
リクエスト結果などの情報を
キャッシュし―

00:08:47.194 --> 00:08:52.499 align:start position:32% line:-2
連続したリクエストで
その情報を使えます

00:08:53.333 --> 00:08:54.701 align:start position:30% line:-1
サンプルコードを見ます

00:08:56.904 --> 00:09:02.743 align:start position:29% line:-2
このサンプルのポイントを
強調しておきましょう

00:08:56.904 --> 00:09:02.743 align:start position:29% line:-2
このサンプルのポイントを
強調しておきましょう

00:09:03.277 --> 00:09:06.280 align:start position:32% line:-2
エラーハンドリングは
いい例ではありません

00:09:06.380 --> 00:09:09.383 align:start position:29% line:-1
強制アンラップを使います

00:09:09.616 --> 00:09:11.785 align:start position:30% line:-1
望まない動作を防ぐため

00:09:11.885 --> 00:09:16.223 align:start position:32% line:-2
暗号化する際は
ガードを使うべきです

00:09:17.157 --> 00:09:23.163 align:start position:23% line:-2
imageURLを使って
リクエストハンドラを作成します

00:09:23.497 --> 00:09:27.467 align:start position:30% line:-2
ファイルが置かれている
SSDの場です

00:09:28.402 --> 00:09:29.736 align:start position:38% line:-1
例を見ましょう

00:09:30.637 --> 00:09:34.441 align:start position:30% line:-2
まず顔検出の
リクエストを作成します

00:09:35.042 --> 00:09:38.979 align:start position:11% line:-2
次にImageRequestHandlerを
作成して

00:09:39.146 --> 00:09:42.482 align:start position:27% line:-1
imageURLを渡します

00:09:43.116 --> 00:09:46.420 align:start position:29% line:-2
そしてハンドラに
リクエストを処理させます

00:09:46.653 --> 00:09:48.622 align:start position:34% line:-1
最後に結果を見ます

00:09:49.890 --> 00:09:55.195 align:start position:29% line:-2
顔が１つ写っている画像の
結果はこちらです

00:10:00.000 --> 00:10:03.103 align:start position:34% line:-2
オブザベーションを
取得します

00:10:03.203 --> 00:10:07.608 align:start position:30% line:-2
顔が配置されている
境界ボックスが重要です

00:10:09.376 --> 00:10:10.944 align:start position:39% line:-1
ご覧ください

00:10:11.044 --> 00:10:16.517 align:start position:27% line:-2
最初の３行だけで
画像内の顔が見つかるのです

00:10:18.118 --> 00:10:22.589 align:start position:43% line:-1
(拍手)

00:10:22.689 --> 00:10:24.725 align:start position:21% line:-2
次は
シーケンスリクエストハンドラです

00:10:27.861 --> 00:10:30.430 align:start position:36% line:-2
シーケンス上での
トラッキングなど

00:10:30.531 --> 00:10:34.201 align:start position:32% line:-2
特定の操作プロセスで
使います

00:10:35.369 --> 00:10:39.439 align:start position:32% line:-2
このサンプルコードは
最もシンプルな―

00:10:39.540 --> 00:10:42.676 align:start position:27% line:-2
Vision APIの
トラッキングシーケンスです

00:10:43.710 --> 00:10:46.413 align:start position:29% line:-2
まずリクエストハンドラを
作成します

00:10:47.381 --> 00:10:51.185 align:start position:4% line:-2
次に
DetectedObjectObservationで

00:10:51.318 --> 00:10:54.321 align:start position:30% line:-2
トラッキングする対象を
特定します

00:10:54.421 --> 00:10:57.724 align:start position:32% line:-2
これで境界ボックスが
取得できます

00:10:58.759 --> 00:11:01.261 align:start position:30% line:-2
トラッキング
シーケンスを開始します

00:10:58.759 --> 00:11:01.261 align:start position:30% line:-2
トラッキング
シーケンスを開始します

00:11:01.662 --> 00:11:05.833 align:start position:29% line:-2
５つの連続したフレームで
トラッキングします

00:11:06.767 --> 00:11:08.569 align:start position:38% line:-1
見てみましょう

00:11:08.702 --> 00:11:13.941 align:start position:30% line:-2
フレームをフィードする
オブジェクトがあります

00:11:14.208 --> 00:11:15.742 align:start position:32% line:-1
フレームを取得します

00:11:16.510 --> 00:11:21.081 align:start position:4% line:-2
リクエストを作成し
DetectedObjectObservationを

00:11:21.181 --> 00:11:24.117 align:start position:29% line:-2
イニシャライザ付きで
パラメータとして渡します

00:11:24.218 --> 00:11:27.087 align:start position:36% line:-2
ループの始動前に
作成しました

00:11:28.622 --> 00:11:31.859 align:start position:32% line:-2
リクエストハンドラに
処理を依頼します

00:11:33.660 --> 00:11:38.799 align:start position:30% line:-2
ここで結果を分析して
さらなる作業を行います

00:11:39.199 --> 00:11:40.300 align:start position:43% line:-1
最後です

00:11:41.201 --> 00:11:43.570 align:start position:32% line:-1
これは非常に重要です

00:11:43.670 --> 00:11:48.141 align:start position:30% line:-2
結果を当該ループから
取り出して次に渡します

00:11:48.242 --> 00:11:52.179 align:start position:25% line:-2
次のループリクエスト作成後に
結果を見ます

00:11:53.514 --> 00:11:58.051 align:start position:30% line:-2
５つのフレームに
収めたい場合の結果です

00:12:06.360 --> 00:12:07.828 align:start position:29% line:-2
リクエストオブジェクトの
作成法は？

00:12:09.563 --> 00:12:13.267 align:start position:25% line:-2
リクエストには
２種類のプロパティがあります

00:12:13.367 --> 00:12:16.570 align:start position:30% line:-2
必須のものと
オプショナルのものです

00:12:17.037 --> 00:12:19.339 align:start position:34% line:-1
必須のプロパティは

00:12:19.439 --> 00:12:24.711 align:start position:21% line:-2
リクエストオブジェクト作成のため
イニシャライザを経由します

00:12:25.879 --> 00:12:27.014 align:start position:38% line:-1
例を見ましょう

00:12:28.415 --> 00:12:31.418 align:start position:34% line:-2
先ほどスライド上で
見たものです

00:12:31.518 --> 00:12:36.690 align:start position:16% line:-2
TrackObjectRequestの
イニシャライザに渡された―

00:12:36.790 --> 00:12:38.892 align:start position:30% line:-2
オブザベーションは
必須プロパティの例です

00:12:40.561 --> 00:12:42.162 align:start position:38% line:-2
オプショナルの
ものもあります

00:12:43.330 --> 00:12:45.632 align:start position:32% line:-1
どちらのプロパティも

00:12:45.732 --> 00:12:49.670 align:start position:25% line:-2
リクエストオブジェクトが
宣言されている場所にあります

00:12:50.904 --> 00:12:55.742 align:start position:27% line:-2
オプショナルには
重要なデフォルトがあります

00:12:55.843 --> 00:13:00.047 align:start position:32% line:-2
これを初期化しますが
上書きも可能です

00:12:55.843 --> 00:13:00.047 align:start position:32% line:-2
これを初期化しますが
上書きも可能です

00:13:00.414 --> 00:13:01.548 align:start position:38% line:-1
例を見ましょう

00:13:05.786 --> 00:13:09.056 align:start position:12% line:-2
DetectBarcodesRequest
オブジェクトです

00:13:09.490 --> 00:13:14.862 align:start position:27% line:-2
リクエストハンドラに
フィードさせるだけであれば

00:13:14.962 --> 00:13:18.665 align:start position:29% line:-2
バーコードを探し
イメージ全体で処理します

00:13:19.066 --> 00:13:24.771 align:start position:30% line:-2
しかしここでは
小さな部分を特定します

00:13:24.872 --> 00:13:27.875 align:start position:29% line:-2
ここでは
バーコードにフォーカスし

00:13:28.108 --> 00:13:30.978 align:start position:27% line:-1
プロパティの上書きをします

00:13:31.345 --> 00:13:34.214 align:start position:27% line:-1
ハンドラにフィードした場合

00:13:34.348 --> 00:13:37.384 align:start position:32% line:-2
小さな部分のみに
フォーカスするのです

00:13:38.118 --> 00:13:43.090 align:start position:27% line:-2
オプショナルのプロパティの
例を見てください

00:13:43.657 --> 00:13:47.494 align:start position:29% line:-2
取得した
リクエストオブジェクトは

00:13:47.761 --> 00:13:51.164 align:start position:36% line:-2
完全に構築された
オブジェクトです

00:13:51.532 --> 00:13:55.536 align:start position:27% line:-1
いつでも使用を開始できます

00:13:55.636 --> 00:13:59.873 align:start position:29% line:-2
あとからでもプロパティを
上書きできますが

00:13:59.973 --> 00:14:03.443 align:start position:30% line:-2
オブジェクトがある時は
作業すべきです

00:13:59.973 --> 00:14:03.443 align:start position:30% line:-2
オブジェクトがある時は
作業すべきです

00:14:07.414 --> 00:14:13.420 align:start position:29% line:-2
次のセッションで
より詳しくご説明するのが

00:14:13.987 --> 00:14:15.889 align:start position:36% line:-1
境界ボックスです

00:14:16.089 --> 00:14:20.627 align:start position:34% line:-2
受け取る座標は
正規化されています

00:14:20.727 --> 00:14:24.765 align:start position:25% line:-1
位置座標が０から１の範囲です

00:14:25.032 --> 00:14:29.870 align:start position:30% line:-2
詳細は次のセッションで
ご確認ください

00:14:33.607 --> 00:14:35.409 align:start position:32% line:-1
次は結果をどう見るか

00:14:37.044 --> 00:14:40.481 align:start position:25% line:-2
結果はオブザベーションとして
出てきます

00:14:41.648 --> 00:14:45.886 align:start position:29% line:-2
結果のプロパティを通して
追加されます

00:14:46.353 --> 00:14:48.055 align:start position:30% line:-1
オブザベーション数は？

00:14:49.756 --> 00:14:51.959 align:start position:32% line:-1
０からＮまであります

00:14:52.492 --> 00:14:55.896 align:start position:32% line:-2
もう１つの
アスペクトがあります

00:14:55.996 --> 00:15:01.635 align:start position:27% line:-2
nilはリクエストの失敗で
０とは異なります

00:14:55.996 --> 00:15:01.635 align:start position:27% line:-2
nilはリクエストの失敗で
０とは異なります

00:15:01.835 --> 00:15:06.306 align:start position:32% line:-2
０は探しているものが
ないということです

00:15:06.740 --> 00:15:09.710 align:start position:32% line:-2
フェイスディテクタを
例に出しましょう

00:15:10.711 --> 00:15:14.648 align:start position:32% line:-2
顔のない画像を
フィードすれば０です

00:15:15.315 --> 00:15:19.219 align:start position:36% line:-2
１つ以上の顔を
フィードさせれば

00:15:19.453 --> 00:15:22.156 align:start position:29% line:-2
適切な数の
オブザベーションが出ます

00:15:24.258 --> 00:15:28.829 align:start position:29% line:-2
そしてオブザベーションは
変更できません

00:15:28.929 --> 00:15:32.065 align:start position:34% line:-2
使用されている例を
見ましょう

00:15:33.200 --> 00:15:39.072 align:start position:25% line:-2
注目していただきたい
プロパティがあと２つあります

00:15:39.173 --> 00:15:43.710 align:start position:30% line:-2
１つは 一意のIDで
しかるべき結果が出る―

00:15:43.877 --> 00:15:46.813 align:start position:29% line:-1
処理ステップを特定します

00:15:47.481 --> 00:15:49.316 align:start position:32% line:-1
もう１つは信頼度です

00:15:50.250 --> 00:15:54.488 align:start position:30% line:-2
どのくらいの確証で出た
結果か分かります

00:15:55.489 --> 00:15:58.959 align:start position:32% line:-1
信頼度は０から１です

00:15:59.059 --> 00:16:02.763 align:start position:30% line:-2
次のセッションで詳しく
お話しします

00:15:59.059 --> 00:16:02.763 align:start position:30% line:-2
次のセッションで詳しく
お話しします

00:16:07.134 --> 00:16:08.869 align:start position:32% line:-1
次はパイプラインです

00:16:09.670 --> 00:16:10.771 align:start position:34% line:-1
パイプラインとは？

00:16:11.605 --> 00:16:15.275 align:start position:30% line:-2
リクエスト１が
２の実行に依存しており

00:16:15.375 --> 00:16:20.380 align:start position:29% line:-2
２が３の実行に
依存しているとしましょう

00:16:22.015 --> 00:16:26.587 align:start position:27% line:-2
この状態で
シーケンスを処理するには？

00:16:26.687 --> 00:16:30.257 align:start position:32% line:-2
まずはリクエスト３の
処理をします

00:16:30.357 --> 00:16:34.194 align:start position:38% line:-2
その結果を２に
フィードします

00:16:34.328 --> 00:16:36.530 align:start position:34% line:-1
同じことを２で行い

00:16:36.630 --> 00:16:39.333 align:start position:30% line:-1
最後に１の処理をします

00:16:41.568 --> 00:16:44.071 align:start position:29% line:-1
この例ではパイプラインを

00:16:44.371 --> 00:16:47.941 align:start position:30% line:-2
暗黙的･明示的な順序で
稼働させました

00:16:48.208 --> 00:16:53.981 align:start position:29% line:-2
次はフェイスランドマーク
ディテクタを稼働します

00:16:54.381 --> 00:16:58.285 align:start position:30% line:-2
フェイスランドマークは
顔の特徴です

00:16:58.385 --> 00:17:02.222 align:start position:34% line:-2
両目 眉 鼻 口の
配置のことです

00:16:58.385 --> 00:17:02.222 align:start position:34% line:-2
両目 眉 鼻 口の
配置のことです

00:17:02.890 --> 00:17:06.093 align:start position:34% line:-2
これに暗黙的順序を
適用するには？

00:17:13.901 --> 00:17:16.970 align:start position:27% line:-1
すでに見たものと似ています

00:17:17.069 --> 00:17:19.506 align:start position:27% line:-1
顔の特徴のリクエストを作り

00:17:20.440 --> 00:17:23.042 align:start position:14% line:-2
ImageRequestHandlerを
作成します

00:17:23.710 --> 00:17:25.579 align:start position:27% line:-1
そしてリクエストの処理です

00:17:26.113 --> 00:17:28.281 align:start position:34% line:-1
最後に結果を見ます

00:17:28.916 --> 00:17:33.187 align:start position:30% line:-2
１つの顔を含む画像なら
結果はこうなります

00:17:35.255 --> 00:17:37.357 align:start position:30% line:-1
シーケンスをたどります

00:17:39.193 --> 00:17:40.094 align:start position:43% line:-1
結果です

00:17:40.694 --> 00:17:44.398 align:start position:29% line:-1
顔の境界ボックスを取得し

00:17:44.965 --> 00:17:47.401 align:start position:30% line:-1
顔の特徴が把握できます

00:17:48.435 --> 00:17:53.373 align:start position:27% line:-2
ランドマークのリクエストの
処理が始まると―

00:17:53.474 --> 00:17:57.911 align:start position:30% line:-2
顔の検出は
まだであると理解され―

00:17:58.579 --> 00:18:01.915 align:start position:30% line:-2
代わりにディテクタ内で
実行されるのです

00:17:58.579 --> 00:18:01.915 align:start position:30% line:-2
代わりにディテクタ内で
実行されるのです

00:18:02.015 --> 00:18:06.920 align:start position:27% line:-2
ランドマークはディテクタで
検索されます

00:18:08.956 --> 00:18:10.724 align:start position:34% line:-1
右側を見てください

00:18:12.893 --> 00:18:17.664 align:start position:23% line:-2
オブザベーションオブジェクトの
いくつかの項目です

00:18:17.764 --> 00:18:21.268 align:start position:29% line:-1
１つ目は 一意のIDです

00:18:21.535 --> 00:18:24.771 align:start position:30% line:-1
２番目は 境界ボックス

00:18:24.938 --> 00:18:29.910 align:start position:32% line:-2
最後は顔の特徴を表す
ランドマークです

00:18:33.747 --> 00:18:38.619 align:start position:30% line:-2
次は同じユースケースを
明示的順序で見ます

00:18:40.621 --> 00:18:44.925 align:start position:27% line:-2
ディテクタを
明示的な順序で作動させます

00:18:46.393 --> 00:18:52.199 align:start position:27% line:-2
この４行を実行すると
境界ボックスを取得できます

00:18:52.499 --> 00:18:56.870 align:start position:34% line:-2
結果は同じタイプの
オブザベーションで

00:18:57.137 --> 00:18:59.239 align:start position:30% line:-1
項目は先ほどと同じです

00:18:59.339 --> 00:19:03.644 align:start position:34% line:-2
このプロセスを表す
一意の番号や

00:18:59.339 --> 00:19:03.644 align:start position:34% line:-2
このプロセスを表す
一意の番号や

00:19:04.011 --> 00:19:09.049 align:start position:29% line:-2
この処理の主な結果である
境界ボックス

00:19:09.149 --> 00:19:13.720 align:start position:32% line:-2
そしてランドマークは
nilとなります

00:19:14.721 --> 00:19:18.091 align:start position:34% line:-2
次にランドマークの
リクエストを作成し

00:19:18.492 --> 00:19:24.698 align:start position:25% line:-2
その結果をオブザベーションの
プロパティにフィードします

00:19:25.866 --> 00:19:28.569 align:start position:29% line:-2
次にリクエストハンドラに
処理を依頼し

00:19:29.203 --> 00:19:31.038 align:start position:34% line:-1
最後に結果を見ます

00:19:31.605 --> 00:19:37.945 align:start position:27% line:-2
同じ画像で実行すると
まったく同じ結果になります

00:19:38.612 --> 00:19:40.747 align:start position:34% line:-2
オブザベーションは
どうなるか？

00:19:40.948 --> 00:19:43.183 align:start position:34% line:-1
両方のディテクタが

00:19:43.517 --> 00:19:49.189 align:start position:21% line:-2
同じタイプを返しても
オブザベーションは変更できません

00:19:49.323 --> 00:19:52.993 align:start position:30% line:-1
しかし上書きもしません

00:19:53.193 --> 00:19:57.931 align:start position:25% line:-2
２つの項目を
新しいオブジェクトにコピーし

00:19:58.298 --> 00:20:01.301 align:start position:36% line:-2
ランドマークを
項目に追加します

00:19:58.298 --> 00:20:01.301 align:start position:36% line:-2
ランドマークを
項目に追加します

00:20:02.135 --> 00:20:06.573 align:start position:34% line:-2
ほとんどのケースで
UIDが同じです

00:20:07.174 --> 00:20:08.041 align:start position:38% line:-1
なぜでしょう？

00:20:08.141 --> 00:20:12.579 align:start position:29% line:-2
同じ顔だから
同じ処理ステップなのです

00:20:14.147 --> 00:20:16.483 align:start position:27% line:-1
暗黙･明示の使い分け方は？

00:20:17.284 --> 00:20:22.256 align:start position:23% line:-2
シンプルなアプリケーションなら
暗黙的がいいでしょう

00:20:22.356 --> 00:20:25.959 align:start position:27% line:-2
リクエストを作成するだけで
いいのです

00:20:28.595 --> 00:20:32.166 align:start position:27% line:-2
反対に
複雑なアプリケーションなら

00:20:32.266 --> 00:20:35.769 align:start position:29% line:-2
顔を検出してから
フィルタリングしましょう

00:20:35.903 --> 00:20:41.408 align:start position:29% line:-2
例えば 中央の顔のみに
フォーカスしたい場合は―

00:20:41.675 --> 00:20:46.680 align:start position:23% line:-2
そのステップのあと
周辺の顔のランドマークを見ます

00:20:47.147 --> 00:20:49.983 align:start position:34% line:-2
この場合は明示的が
いいでしょう

00:20:50.517 --> 00:20:55.489 align:start position:27% line:-2
内部でフェイスディテクタを
再稼働させないからです

00:21:02.463 --> 00:21:07.267 align:start position:23% line:-2
皆さんのアプリケーションの
パフォーマンス最適化が目標です

00:21:07.367 --> 00:21:10.003 align:start position:30% line:-1
次のスライドが重要です

00:21:11.905 --> 00:21:13.774 align:start position:27% line:-1
オブジェクトの保存時間は？

00:21:16.944 --> 00:21:21.648 align:start position:23% line:-2
イメージリクエストハンドラでは
画像処理の間中 保存しましょう

00:21:22.249 --> 00:21:27.421 align:start position:27% line:-2
シンプルですが
それが非常に重要なことです

00:21:28.121 --> 00:21:32.125 align:start position:32% line:-2
オブジェクトを
早期にリリースすれば

00:21:32.226 --> 00:21:34.495 align:start position:25% line:-1
再びハンドラの作成が必要です

00:21:34.595 --> 00:21:38.532 align:start position:27% line:-2
しかしすべての
キャッシュを失っているため

00:21:38.632 --> 00:21:42.135 align:start position:29% line:-1
再計算が必要になるのです

00:21:43.804 --> 00:21:49.309 align:start position:27% line:-2
一方でリリースが遅すぎると
メモリが断片化し

00:21:49.610 --> 00:21:54.982 align:start position:23% line:-2
他の重要なことに
メモリを再利用できなくなります

00:21:56.350 --> 00:22:00.621 align:start position:30% line:-2
必要な期間 使用したら
すぐリリースしましょう

00:21:56.350 --> 00:22:00.621 align:start position:30% line:-2
必要な期間 使用したら
すぐリリースしましょう

00:22:00.721 --> 00:22:04.525 align:start position:29% line:-2
内部にイメージや派生物を
格納しています

00:22:06.360 --> 00:22:09.496 align:start position:23% line:-2
シーケンスリクエストハンドラも
同様ですが

00:22:09.596 --> 00:22:14.034 align:start position:23% line:-2
リリースが早すぎると
シーケンス全体がダメになります

00:22:14.134 --> 00:22:16.470 align:start position:27% line:-1
全キャッシュを失うからです

00:22:18.305 --> 00:22:21.041 align:start position:32% line:-2
リクエストと
オブザベーションは？

00:22:21.608 --> 00:22:25.345 align:start position:34% line:-2
どちらも非常に軽い
オブジェクトで

00:22:25.445 --> 00:22:28.448 align:start position:34% line:-2
キャッシュの必要も
ありません

00:22:35.789 --> 00:22:37.391 align:start position:29% line:-1
どこでリクエスト処理を？

00:22:39.860 --> 00:22:43.630 align:start position:21% line:-2
Visionではデバイスの
ニューラルネットワークが頼りです

00:22:44.464 --> 00:22:49.369 align:start position:16% line:-2
ニューラルネットワークの実行は
通常はCPUよりもGPUの方が高速です

00:22:51.772 --> 00:22:54.007 align:start position:30% line:-1
どちらで実行すべきか？

00:22:55.676 --> 00:23:01.348 align:start position:30% line:-2
GPUで実行できる場合
まずはそれを試します

00:22:55.676 --> 00:23:01.348 align:start position:30% line:-2
GPUで実行できる場合
まずはそれを試します

00:23:01.915 --> 00:23:06.420 align:start position:32% line:-2
できなければCPUに
切り替えます

00:23:08.021 --> 00:23:09.523 align:start position:32% line:-1
それがデフォルトです

00:23:10.958 --> 00:23:15.929 align:start position:25% line:-2
しかしグラフィック表示が多い
アプリケーションなら

00:23:16.029 --> 00:23:19.933 align:start position:34% line:-2
GPUはその作業に
とっておきましょう

00:23:20.033 --> 00:23:25.339 align:start position:27% line:-2
その場合はCPUを上書きし
trueに設定します

00:23:25.439 --> 00:23:28.509 align:start position:36% line:-2
これでCPU上で
直接処理できます

00:23:35.182 --> 00:23:38.719 align:start position:30% line:-2
ここまでVisionの
ベーシックな―

00:23:38.819 --> 00:23:42.289 align:start position:29% line:-2
インタラクションについて
説明してきました

00:23:42.589 --> 00:23:46.693 align:start position:29% line:-2
次はVisionでの
トラッキングについてです

00:23:48.829 --> 00:23:49.863 align:start position:34% line:-1
トラッキングとは―

00:23:50.931 --> 00:23:55.936 align:start position:21% line:-2
フレームのシーケンス内で
対象のオブジェクトを探すことです

00:23:56.036 --> 00:24:01.208 align:start position:29% line:-2
通常は最初のフレームで
オブジェクトを見つけます

00:23:56.036 --> 00:24:01.208 align:start position:29% line:-2
通常は最初のフレームで
オブジェクトを見つけます

00:24:02.142 --> 00:24:04.244 align:start position:39% line:-1
利用方法は？

00:24:04.478 --> 00:24:06.480 align:start position:34% line:-1
いろいろと使えます

00:24:06.847 --> 00:24:12.986 align:start position:25% line:-2
注釈付きの
スポーツイベントなど様々です

00:24:15.355 --> 00:24:20.260 align:start position:34% line:-2
なぜトラッキングを
使用するのでしょう

00:24:20.694 --> 00:24:22.763 align:start position:29% line:-1
いくつかの理由があります

00:24:23.096 --> 00:24:28.335 align:start position:23% line:-2
まず 各オブジェクト特定の
トラッカーがあるとは限りません

00:24:28.902 --> 00:24:33.674 align:start position:25% line:-2
顔であれば
フェイスディテクタがあります

00:24:33.941 --> 00:24:37.578 align:start position:30% line:-2
では鳥のトラッキングは
どうでしょう

00:24:37.778 --> 00:24:43.851 align:start position:27% line:-2
そのためのディテクタを
作成しなくてはいけませんが

00:24:43.951 --> 00:24:48.655 align:start position:32% line:-2
他の作業があるので
やりたくないですよね

00:24:50.424 --> 00:24:52.893 align:start position:30% line:-1
でも顔のトラッキングに

00:24:52.993 --> 00:24:54.761 align:start position:29% line:-1
ディテクタを使いますか？

00:24:55.095 --> 00:24:57.498 align:start position:30% line:-1
おそらく必要ありません

00:24:58.031 --> 00:24:59.333 align:start position:36% line:-1
例をご紹介します

00:25:00.500 --> 00:25:04.004 align:start position:30% line:-2
最初のフレームで
ディテクタを稼働します

00:25:04.137 --> 00:25:05.439 align:start position:36% line:-1
５つの顔を回収し

00:25:06.039 --> 00:25:09.309 align:start position:30% line:-2
２つ目のフレームからも
回収します

00:25:09.576 --> 00:25:14.915 align:start position:25% line:-2
両方のフレームの顔が同じだと
なぜ分かるのでしょう？

00:25:15.182 --> 00:25:17.951 align:start position:32% line:-2
人が替わっているかも
しれません

00:25:19.152 --> 00:25:22.890 align:start position:32% line:-2
そこでオブジェクトを
マッチングするという

00:25:22.990 --> 00:25:26.226 align:start position:27% line:-1
完全に別の作業が発生します

00:25:27.060 --> 00:25:28.729 align:start position:34% line:-1
しかしトラッカーは

00:25:30.330 --> 00:25:32.299 align:start position:32% line:-1
重要な情報を使います

00:25:32.399 --> 00:25:37.905 align:start position:27% line:-2
オブジェクトの軌道を把握し
次の動きを予測するのです

00:25:39.540 --> 00:25:41.208 align:start position:30% line:-1
顔のトラッキングをして

00:25:41.442 --> 00:25:45.946 align:start position:30% line:-2
フレーム中に
単一の顔があるとします

00:25:46.046 --> 00:25:47.714 align:start position:29% line:-1
ディテクタを使いますか？

00:25:48.248 --> 00:25:50.250 align:start position:30% line:-1
この場合も不要でしょう

00:25:56.423 --> 00:26:01.728 align:start position:29% line:-2
トラッカーは通常は軽量の
アルゴリズムですが

00:25:56.423 --> 00:26:01.728 align:start position:29% line:-2
トラッカーは通常は軽量の
アルゴリズムですが

00:26:01.828 --> 00:26:04.765 align:start position:36% line:-2
ディテクタは
時間がかかります

00:26:05.933 --> 00:26:08.035 align:start position:32% line:-1
情報を表示する場合―

00:26:08.402 --> 00:26:13.841 align:start position:27% line:-2
トラッカーの方が
スムーズに感じると思います

00:26:17.244 --> 00:26:20.948 align:start position:32% line:-2
３つの言葉が大切だと
言いましたね

00:26:23.183 --> 00:26:25.319 align:start position:30% line:-2
“何を”“どのように”
“結果”です

00:26:25.853 --> 00:26:29.223 align:start position:25% line:-2
トラッキングの
ユースケースではどうでしょう

00:26:30.891 --> 00:26:33.727 align:start position:32% line:-1
まずはリクエストです

00:26:34.328 --> 00:26:38.031 align:start position:25% line:-2
Visionには
２種類のリクエストがあります

00:26:38.131 --> 00:26:42.236 align:start position:30% line:-2
一般的なトラッカーと
長方形のトラッカーです

00:26:42.936 --> 00:26:43.771 align:start position:41% line:-1
使い方は？

00:26:44.571 --> 00:26:48.308 align:start position:11% line:-2
SequenceRequestHandler
を使います

00:26:49.743 --> 00:26:50.510 align:start position:43% line:-1
結果です

00:26:51.578 --> 00:26:53.113 align:start position:34% line:-1
このうち２つが重要

00:26:53.213 --> 00:26:56.884 align:start position:32% line:-2
検出された
オブザベーションには

00:26:56.984 --> 00:26:59.686 align:start position:30% line:-1
境界ボックスがあります

00:27:00.254 --> 00:27:02.689 align:start position:27% line:-1
長方形のオブザベーションは

00:27:02.956 --> 00:27:07.094 align:start position:32% line:-2
長方形の頂点が
どこにあるか示します

00:27:07.861 --> 00:27:11.565 align:start position:34% line:-2
なぜ長方形の頂点が
必要なのでしょう

00:27:12.299 --> 00:27:16.770 align:start position:21% line:-2
長方形を描く時には
長方形のオブジェクトが存在します

00:27:16.870 --> 00:27:19.907 align:start position:25% line:-1
しかしフレームに投影されると

00:27:20.040 --> 00:27:22.342 align:start position:30% line:-1
違う形に見える可能性も

00:27:23.477 --> 00:27:25.412 align:start position:38% line:-1
このケースでは

00:27:25.512 --> 00:27:30.250 align:start position:29% line:-2
境界ボックスはそれ自体が
長方形ではないのです

00:27:33.654 --> 00:27:35.022 align:start position:32% line:-1
デモを見てみましょう

00:27:47.301 --> 00:27:52.639 align:start position:25% line:-2
サンプルのアプリケーションは
WWDCのウェブサイトから

00:27:52.740 --> 00:27:54.908 align:start position:32% line:-1
ダウンロードできます

00:27:55.375 --> 00:27:58.145 align:start position:29% line:-1
ムービーの撮影ができます

00:27:59.413 --> 00:28:01.748 align:start position:32% line:-1
フレームに解析します

00:27:59.413 --> 00:28:01.748 align:start position:32% line:-1
フレームに解析します

00:28:01.982 --> 00:28:07.354 align:start position:29% line:-2
最初のフレームで
オブジェクトを選択します

00:28:08.522 --> 00:28:10.023 align:start position:36% line:-1
まずはこちらです

00:28:11.692 --> 00:28:15.596 align:start position:32% line:-2
最初にオブジェクトか
長方形を選んで

00:28:15.696 --> 00:28:19.700 align:start position:27% line:-2
次に使用するアルゴリズムを
選びます

00:28:19.800 --> 00:28:22.302 align:start position:32% line:-2
Visionでは
２種類サポートします

00:28:23.136 --> 00:28:27.274 align:start position:34% line:-2
速さと正確性の
どちらかを選べます

00:28:28.809 --> 00:28:32.212 align:start position:38% line:-2
今回は速い方を
使いましょう

00:28:32.813 --> 00:28:34.081 align:start position:36% line:-1
対象を選択します

00:28:35.082 --> 00:28:38.619 align:start position:32% line:-2
赤い傘をさした人物を
トラッキングして

00:28:38.719 --> 00:28:41.088 align:start position:30% line:-2
この集団の
トラッキングも試みます

00:28:45.826 --> 00:28:46.727 align:start position:39% line:-1
稼働させます

00:28:54.635 --> 00:28:59.740 align:start position:25% line:-2
選択したオブジェクトを
うまくトラッキングしています

00:29:06.947 --> 00:29:09.616 align:start position:34% line:-1
もっと複雑な例です

00:29:10.617 --> 00:29:13.687 align:start position:27% line:-1
ウェイクボーダーの男性です

00:29:14.721 --> 00:29:16.924 align:start position:30% line:-1
今度は正確性を選びます

00:29:17.858 --> 00:29:19.459 align:start position:38% line:-1
対象を選択して

00:29:23.330 --> 00:29:24.698 align:start position:39% line:-1
稼働させます

00:29:30.370 --> 00:29:34.641 align:start position:32% line:-2
オブジェクトの様子は
変わっていきますが

00:29:34.741 --> 00:29:38.979 align:start position:29% line:-2
形や配置や色が変わっても
トラッキングできます

00:29:39.079 --> 00:29:40.514 align:start position:38% line:-1
優れた機能です

00:29:40.914 --> 00:29:45.419 align:start position:43% line:-1
(拍手)

00:29:47.788 --> 00:29:52.793 align:start position:29% line:-2
次は実際に実行されている
様子をお見せします

00:30:01.101 --> 00:30:04.705 align:start position:29% line:-2
Xcodeを稼働し
iPhoneをつないで―

00:30:04.805 --> 00:30:08.041 align:start position:27% line:-2
先ほどのアプリケーションを
使用します

00:30:09.376 --> 00:30:11.145 align:start position:32% line:-1
デバッガで稼働させて

00:30:16.583 --> 00:30:18.018 align:start position:36% line:-1
対象を選択します

00:30:19.253 --> 00:30:22.756 align:start position:29% line:-2
今回の目的は
シーケンスを見ることです

00:30:23.290 --> 00:30:24.525 align:start position:39% line:-1
稼働させます

00:30:27.728 --> 00:30:31.398 align:start position:27% line:-2
ここで
ブレークポイントを設定して

00:30:31.498 --> 00:30:34.368 align:start position:34% line:-2
トラッキング機能を
実行します

00:30:34.668 --> 00:30:37.137 align:start position:36% line:-2
シーケンスを
実行する機能です

00:30:38.739 --> 00:30:40.240 align:start position:38% line:-1
見てみましょう

00:30:40.340 --> 00:30:43.577 align:start position:23% line:-1
まずビデオリーダーを作成します

00:30:43.977 --> 00:30:49.082 align:start position:23% line:-2
対象を選択する最初のフレームを
削除します

00:30:50.284 --> 00:30:51.985 align:start position:30% line:-1
キャンセルのフラグです

00:30:52.719 --> 00:30:56.290 align:start position:16% line:-2
次にinputObservationを
初期化します

00:30:56.390 --> 00:30:58.659 align:start position:30% line:-1
先ほどお見せしましたね

00:31:01.295 --> 00:31:05.833 align:start position:30% line:-2
そして結果を表示可能に
するための記帳は

00:31:06.433 --> 00:31:09.770 align:start position:11% line:-1
TrackedPolyRectに保管されます

00:31:10.971 --> 00:31:13.874 align:start position:32% line:-1
スイッチを稼働します

00:31:13.974 --> 00:31:18.812 align:start position:23% line:-2
タイプは
ユーザインターフェイス由来です

00:31:20.047 --> 00:31:22.416 align:start position:36% line:-1
２つ選択しました

00:31:23.317 --> 00:31:28.455 align:start position:30% line:-2
ユーザインターフェイス
からの情報です

00:31:31.859 --> 00:31:33.060 align:start position:39% line:-1
この２つです

00:31:33.360 --> 00:31:36.230 align:start position:27% line:-1
このループが２度稼働します

00:31:36.330 --> 00:31:42.269 align:start position:9% line:-2
これがスライドに表示されている
inputObservationを初期化します

00:31:43.403 --> 00:31:45.205 align:start position:29% line:-1
境界ボックスを渡すのです

00:31:46.206 --> 00:31:49.843 align:start position:30% line:-2
そして
記帳構造を初期化します

00:31:50.010 --> 00:31:50.944 align:start position:39% line:-1
稼働させます

00:31:58.385 --> 00:32:00.487 align:start position:38% line:-1
見てみましょう

00:31:58.385 --> 00:32:00.487 align:start position:38% line:-1
見てみましょう

00:32:08.095 --> 00:32:12.166 align:start position:29% line:-2
重要な項目がいくつかあり
これは一意のIDです

00:32:12.800 --> 00:32:15.836 align:start position:36% line:-2
境界ボックスは
正規化しています

00:32:17.971 --> 00:32:20.941 align:start position:29% line:-1
長方形として使わないため

00:32:21.108 --> 00:32:24.078 align:start position:23% line:-1
このブレークポイントをつけます

00:32:26.313 --> 00:32:29.049 align:start position:29% line:-1
これがポイントとなります

00:32:30.851 --> 00:32:32.453 align:start position:32% line:-1
フレームカウンタです

00:32:33.854 --> 00:32:35.856 align:start position:29% line:-1
失敗するとフラグが出ます

00:32:36.523 --> 00:32:39.259 align:start position:29% line:-1
トラッキングを開始します

00:32:39.393 --> 00:32:45.332 align:start position:27% line:-2
この無限ループから
抜けるにはキャンセルするか

00:32:45.432 --> 00:32:47.267 align:start position:30% line:-1
ムービーを終了させます

00:32:51.271 --> 00:32:54.041 align:start position:32% line:-1
グラフィカルユーザに

00:32:54.875 --> 00:33:00.347 align:start position:29% line:-2
情報を維持するため
長方形構造を初期化します

00:32:54.875 --> 00:33:00.347 align:start position:29% line:-2
情報を維持するため
長方形構造を初期化します

00:33:00.647 --> 00:33:06.053 align:start position:29% line:-2
そしてオブザベーションの
ループを開始します

00:33:06.320 --> 00:33:08.956 align:start position:7% line:-1
TrackObjectRequestを作成します

00:33:14.995 --> 00:33:19.900 align:start position:34% line:-2
リクエストを進めて
すべてを収集します

00:33:22.402 --> 00:33:26.974 align:start position:30% line:-2
ループを切断し
処理の準備ができました

00:33:27.574 --> 00:33:32.713 align:start position:30% line:-2
実行機能でリクエストの
収集が受理されます

00:33:33.080 --> 00:33:36.683 align:start position:34% line:-2
単一のリクエストを
使用しただけで

00:33:36.783 --> 00:33:40.721 align:start position:29% line:-2
同時に２つのリクエストを
トラッキングします

00:33:41.388 --> 00:33:42.623 align:start position:41% line:-1
実行します

00:33:44.625 --> 00:33:49.196 align:start position:29% line:-2
リクエストを実行したので
結果を見てみます

00:33:49.296 --> 00:33:52.065 align:start position:34% line:-2
それぞれの
プロパティで見ます

00:33:54.968 --> 00:33:58.739 align:start position:29% line:-2
プロパティでは最初の
オブジェクトを取得します

00:33:58.839 --> 00:34:02.943 align:start position:23% line:-2
単一のものが
オブザベーションとしてあります

00:33:58.839 --> 00:34:02.943 align:start position:23% line:-2
単一のものが
オブザベーションとしてあります

00:34:03.677 --> 00:34:08.482 align:start position:29% line:-2
オブザベーションの
信頼度のプロパティを見て

00:34:08.748 --> 00:34:11.284 align:start position:23% line:-1
任意のしきい値を0.5にします

00:34:12.018 --> 00:34:17.056 align:start position:29% line:-2
しきい値より上であれば
境界ボックスを実線で描き

00:34:17.157 --> 00:34:20.327 align:start position:29% line:-1
下であれば点線で描きます

00:34:20.427 --> 00:34:23.530 align:start position:29% line:-1
不具合があるか分かります

00:34:26.333 --> 00:34:28.735 align:start position:29% line:-1
残りはシンプルな記帳です

00:34:29.503 --> 00:34:31.338 align:start position:32% line:-1
長方形の構造を追加し

00:34:32.039 --> 00:34:36.577 align:start position:27% line:-2
当該のループから
オブザベーションを取ります

00:34:36.677 --> 00:34:39.913 align:start position:32% line:-2
そして 次のループに
割り当てます

00:34:43.784 --> 00:34:45.452 align:start position:36% line:-1
これは２度目です

00:34:46.018 --> 00:34:48.088 align:start position:27% line:-1
ブレークポイントに行きます

00:34:49.156 --> 00:34:50.724 align:start position:34% line:-1
フレームを表示し―

00:34:51.824 --> 00:34:56.029 align:start position:29% line:-2
フレームレートに合わせて
スリープにします

00:34:56.663 --> 00:35:01.335 align:start position:27% line:-2
すると トラッキングの
２つ目のループに来ています

00:34:56.663 --> 00:35:01.335 align:start position:27% line:-2
すると トラッキングの
２つ目のループに来ています

00:35:03.971 --> 00:35:05.873 align:start position:30% line:-1
スライドに戻りましょう

00:35:10.911 --> 00:35:16.283 align:start position:43% line:-1
(拍手)

00:35:18.852 --> 00:35:22.122 align:start position:29% line:-1
重要な点を復習しましょう

00:35:23.056 --> 00:35:27.027 align:start position:32% line:-2
まずはオブジェクトの
初期化の方法です

00:35:27.961 --> 00:35:32.399 align:start position:32% line:-2
自動で境界ボックスを
取り出すのが

00:35:32.499 --> 00:35:34.201 align:start position:41% line:-1
１つ目です

00:35:34.635 --> 00:35:37.905 align:start position:27% line:-1
２つ目は手動で行う方法です

00:35:53.120 --> 00:35:58.659 align:start position:23% line:-2
単一のトラッキングリクエストを
オブジェクトごとに使用しました

00:35:58.759 --> 00:36:00.861 align:start position:34% line:-1
関係性は１対１です

00:35:58.759 --> 00:36:00.861 align:start position:34% line:-1
関係性は１対１です

00:36:03.597 --> 00:36:05.566 align:start position:27% line:-1
トラッカーは２種類あります

00:36:05.666 --> 00:36:09.837 align:start position:30% line:-2
一般的なトラッカーと
長方形のトラッカーです

00:36:12.573 --> 00:36:16.176 align:start position:30% line:-2
それぞれに２つの
アルゴリズムがあります

00:36:16.276 --> 00:36:19.179 align:start position:34% line:-2
速さと正確性ですが
この２つは―

00:36:19.780 --> 00:36:21.949 align:start position:36% line:-1
交換条件なのです

00:36:23.784 --> 00:36:27.454 align:start position:29% line:-2
結果が信用できるか否かを
判断するために

00:36:27.888 --> 00:36:31.058 align:start position:32% line:-2
信頼度のプロパティを
お見せしました

00:36:34.395 --> 00:36:37.898 align:start position:30% line:-2
Visionでの
トラッキングの限界は？

00:36:41.235 --> 00:36:43.136 align:start position:29% line:-1
まずはトラッカーの数です

00:36:45.372 --> 00:36:47.975 align:start position:29% line:-2
同時に
トラッキングできる数は？

00:36:48.375 --> 00:36:53.781 align:start position:27% line:-2
各タイプで16の
トラッカーの設定が限界です

00:36:53.881 --> 00:36:59.486 align:start position:27% line:-2
一般的なもので16と
長方形で16ということです

00:37:00.621 --> 00:37:03.090 align:start position:29% line:-1
それ以上はエラーが出ます

00:37:03.857 --> 00:37:09.163 align:start position:23% line:-2
その場合 いくつかトラッカーを
リリースしてください

00:37:09.396 --> 00:37:10.430 align:start position:41% line:-1
やり方は？

00:37:12.432 --> 00:37:16.036 align:start position:34% line:-2
最後のフレームの
プロパティを設定し

00:37:16.270 --> 00:37:19.940 align:start position:32% line:-2
リクエストハンドラに
フィードさせます

00:37:20.207 --> 00:37:25.579 align:start position:27% line:-2
これで関連するトラッカーを
リリースすべきと認識します

00:37:26.213 --> 00:37:29.249 align:start position:34% line:-2
またはリクエストに
関わる―

00:37:29.349 --> 00:37:33.987 align:start position:32% line:-2
すべてのトラッカーを
リリースしてください

00:37:38.926 --> 00:37:43.931 align:start position:29% line:-2
トラッキングシーケンスの
実行後にはどんな課題が？

00:37:44.365 --> 00:37:49.770 align:start position:27% line:-2
トラッキングシーケンスでは
対象の様子が変化します

00:37:49.937 --> 00:37:53.140 align:start position:30% line:-1
色や配置が変わることは

00:37:53.340 --> 00:37:55.976 align:start position:32% line:-2
アルゴリズムにとって
課題です

00:37:56.477 --> 00:37:57.878 align:start position:34% line:-1
どうすればいいか？

00:37:58.479 --> 00:38:02.449 align:start position:27% line:-1
万能の解決方法はありません

00:37:58.479 --> 00:38:02.449 align:start position:27% line:-1
万能の解決方法はありません

00:38:02.549 --> 00:38:07.521 align:start position:34% line:-2
しかし速さと
正確性を試してみて

00:38:07.854 --> 00:38:11.658 align:start position:36% line:-2
うまくいく方法を
探ってください

00:38:15.128 --> 00:38:17.498 align:start position:27% line:-1
境界ボックスを選択するなら

00:38:17.798 --> 00:38:21.235 align:start position:30% line:-2
突出したオブジェクトを
見つけます

00:38:22.836 --> 00:38:24.538 align:start position:32% line:-1
信頼度のしきい値は？

00:38:25.239 --> 00:38:27.041 align:start position:34% line:-1
答えは１つではなく

00:38:27.141 --> 00:38:33.180 align:start position:25% line:-2
それぞれのケースがしかるべき
しきい値で機能します

00:38:34.848 --> 00:38:36.950 align:start position:29% line:-1
テクニックをお教えします

00:38:37.051 --> 00:38:41.321 align:start position:23% line:-2
1000フレームのトラッキング
シーケンスがあるとします

00:38:42.156 --> 00:38:44.358 align:start position:36% line:-1
それを開始すると

00:38:44.458 --> 00:38:49.096 align:start position:30% line:-2
選択したオブジェクトは
逸脱を始めます

00:38:49.196 --> 00:38:53.567 align:start position:27% line:-2
そのまま続けると
すべてが変わってしまいます

00:38:54.234 --> 00:38:59.473 align:start position:27% line:-2
そこで50フレームくらいの
サブシーケンスに分けます

00:38:59.573 --> 00:39:03.143 align:start position:23% line:-2
ディテクタを稼働して
50フレームでトラッキングし―

00:38:59.573 --> 00:39:03.143 align:start position:23% line:-2
ディテクタを稼働して
50フレームでトラッキングし―

00:39:03.243 --> 00:39:07.948 align:start position:23% line:-2
ディテクタの再稼働を
50フレームごとに繰り返します

00:39:08.148 --> 00:39:13.120 align:start position:25% line:-2
単一のオブジェクトの
トラッキングに見えるでしょう

00:39:13.620 --> 00:39:16.457 align:start position:34% line:-1
しかしその内部では

00:39:16.557 --> 00:39:21.662 align:start position:27% line:-2
小さなシーケンスを
トラッキングしているのです

00:39:27.201 --> 00:39:29.069 align:start position:41% line:-1
要約します

00:39:30.204 --> 00:39:35.042 align:start position:21% line:-2
最初に Visionを使う目的や
フレームワーク

00:39:35.208 --> 00:39:39.179 align:start position:32% line:-2
プライバシーについて
お話ししました

00:39:41.381 --> 00:39:47.521 align:start position:21% line:-2
次に 方向に左右されない最新の
フェイスディテクタを紹介しました

00:39:48.021 --> 00:39:49.890 align:start position:34% line:-1
修正についてもです

00:39:51.191 --> 00:39:54.261 align:start position:29% line:-2
Vision APIとの
インタラクションや

00:39:54.461 --> 00:39:58.765 align:start position:25% line:-2
リクエストやオブザベーション
などについてお話ししました

00:39:59.867 --> 00:40:03.771 align:start position:32% line:-2
最後はトラッキングを
実行する方法です

00:39:59.867 --> 00:40:03.771 align:start position:32% line:-2
最後はトラッキングを
実行する方法です

00:40:05.606 --> 00:40:10.244 align:start position:27% line:-2
詳細はこちらの
ウェブサイトをご覧ください

00:40:10.477 --> 00:40:14.415 align:start position:29% line:-2
次のセッションへの参加も
お勧めします

00:40:14.515 --> 00:40:17.684 align:start position:25% line:-2
VisionとCoreMLの
併用についてご説明します

00:40:17.784 --> 00:40:20.821 align:start position:36% line:-2
独自のモデルには
重要となります

00:40:21.121 --> 00:40:26.627 align:start position:29% line:-2
さらにフレームワークの
詳細もカバーする予定です

00:40:27.561 --> 00:40:30.464 align:start position:23% line:-1
明日はVision Labです

00:40:31.064 --> 00:40:33.801 align:start position:32% line:-2
引き続き WWDCを
お楽しみください

00:40:33.901 --> 00:40:38.338 align:start position:43% line:-1
(拍手)
