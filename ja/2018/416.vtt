WEBVTT

00:00:07.140 --> 00:00:16.550 align:start position:43% line:-1
(音楽)

00:00:23.390 --> 00:00:27.995 align:start position:43% line:-1
(拍手)

00:00:28.095 --> 00:00:30.797 align:start position:18% line:-2
Appleのソフトウェアエンジニアの
カイルです

00:00:30.898 --> 00:00:33.901 align:start position:21% line:-1
本日はiOSのメモリの話をします

00:00:34.001 --> 00:00:37.171 align:start position:23% line:-1
iOSにフォーカスした話ですが

00:00:37.271 --> 00:00:40.908 align:start position:29% line:-2
他のプラットフォームへも
適用可能です

00:00:43.177 --> 00:00:47.214 align:start position:29% line:-2
最初のトピックは
なぜメモリを減らすのか？

00:00:48.882 --> 00:00:53.120 align:start position:29% line:-2
ここで言うメモリとは
メモリフットプリントです

00:00:53.220 --> 00:00:54.454 align:start position:30% line:-1
後ほど詳しく説明します

00:00:55.355 --> 00:00:58.458 align:start position:27% line:-2
次にメモリフットプリントを
分析するツールの話

00:00:59.092 --> 00:01:03.463 align:start position:21% line:-2
画像がバックグラウンドにある時の
最適化の話もします

00:00:59.092 --> 00:01:03.463 align:start position:21% line:-2
画像がバックグラウンドにある時の
最適化の話もします

00:01:03.564 --> 00:01:05.599 align:start position:32% line:-1
そして最後はデモです

00:01:06.400 --> 00:01:09.236 align:start position:23% line:-1
さて なぜメモリを減らすのか？

00:01:10.437 --> 00:01:13.240 align:start position:34% line:-2
ユーザの使い勝手を
よくするためです

00:01:13.340 --> 00:01:16.743 align:start position:32% line:-2
Appの起動ばかりか
動作も速くなります

00:01:16.844 --> 00:01:20.247 align:start position:29% line:-2
誰のAppでも
メモリに長くとどまります

00:01:20.347 --> 00:01:21.915 align:start position:38% line:-1
利点ばかりです

00:01:22.216 --> 00:01:28.121 align:start position:25% line:-2
今 隣に座っている
デベロッパを助けているのです

00:01:29.990 --> 00:01:32.826 align:start position:30% line:-2
メモリフットプリントの
話をしましょう

00:01:32.926 --> 00:01:34.661 align:start position:27% line:-1
すべてのメモリは異なります

00:01:34.761 --> 00:01:35.996 align:start position:38% line:-1
その意味とは？

00:01:36.964 --> 00:01:38.498 align:start position:34% line:-1
ページを例にします

00:01:38.599 --> 00:01:40.100 align:start position:34% line:-1
紙のページとは違い

00:01:40.534 --> 00:01:42.302 align:start position:34% line:-1
メモリのページです

00:01:42.402 --> 00:01:45.339 align:start position:30% line:-1
システムから提供されて

00:01:45.606 --> 00:01:47.975 align:start position:21% line:-2
ヒープ上で 複数のオブジェクトを
所持できます

00:01:48.075 --> 00:01:51.879 align:start position:30% line:-2
数ページに渡る
オブジェクトもあります

00:01:54.047 --> 00:01:56.316 align:start position:23% line:-1
サイズは大抵16キロバイトです

00:01:56.416 --> 00:01:58.619 align:start position:32% line:-2
クリーンかダーティな
ページに分かれます

00:02:00.487 --> 00:02:05.192 align:start position:23% line:-2
メモリ使用量とは
ページ数とページサイズの積です

00:02:07.194 --> 00:02:09.696 align:start position:32% line:-2
クリーンとダーティの
例を挙げます

00:02:09.795 --> 00:02:14.668 align:start position:30% line:-2
例えば ２万個の整数を
配置するとします

00:02:14.768 --> 00:02:17.271 align:start position:25% line:-2
そのシステムには
６ページ要するかもしれません

00:02:18.572 --> 00:02:21.074 align:start position:25% line:-1
配置時のページはクリーンです

00:02:21.208 --> 00:02:23.143 align:start position:32% line:-2
ただデータバッファに
何かを入力した場合

00:02:23.243 --> 00:02:26.213 align:start position:27% line:-1
例えば先頭部分に入力すると

00:02:26.380 --> 00:02:28.115 align:start position:27% line:-1
ページはダーティになります

00:02:28.782 --> 00:02:29.716 align:start position:41% line:-1
同じように

00:02:30.184 --> 00:02:36.023 align:start position:25% line:-2
データバッファの最終ページに
入力してもダーティになります

00:02:36.390 --> 00:02:40.294 align:start position:34% line:-2
挟まれた４ページは
クリーンなままです

00:02:42.796 --> 00:02:45.999 align:start position:27% line:-2
さらに興味深いのは
メモリマップトファイルです

00:02:46.099 --> 00:02:49.803 align:start position:21% line:-2
これはディスク上で
メモリにロードされたファイルです

00:02:50.237 --> 00:02:53.440 align:start position:23% line:-2
読み込み専用ファイルは
常にクリーンなページになります

00:02:53.774 --> 00:02:57.244 align:start position:32% line:-2
カーネルがRAMへの
移動を管理します

00:02:58.979 --> 00:03:01.481 align:start position:25% line:-1
分かりやすい例はJPEGです

00:02:58.979 --> 00:03:01.481 align:start position:25% line:-1
分かりやすい例はJPEGです

00:03:01.582 --> 00:03:04.218 align:start position:30% line:-2
このJPEGのサイズが
50キロバイトの場合―

00:03:05.185 --> 00:03:10.824 align:start position:25% line:-2
メモリがマップされ
ページにすると約４ページです

00:03:10.924 --> 00:03:14.728 align:start position:30% line:-2
４ページ目は空きがあり
まだ使用可能です

00:03:14.828 --> 00:03:16.797 align:start position:32% line:-1
少しトリッキーですね

00:03:16.897 --> 00:03:22.135 align:start position:23% line:-1
最初の３ページはパージ可能です

00:03:24.137 --> 00:03:26.440 align:start position:34% line:-1
通常のAppでは―

00:03:27.107 --> 00:03:31.612 align:start position:23% line:-2
フットプリントの要素はダーティ
圧縮 クリーンに分かれます

00:03:32.079 --> 00:03:33.447 align:start position:32% line:-1
詳しく説明しましょう

00:03:34.681 --> 00:03:38.252 align:start position:32% line:-2
クリーンなメモリは
ページアウト可能です

00:03:38.685 --> 00:03:40.888 align:start position:21% line:-1
これがメモリマップトファイルです

00:03:40.988 --> 00:03:44.825 align:start position:30% line:-2
画像やBLOBデータ
トレーニングモデルなど

00:03:45.959 --> 00:03:47.561 align:start position:27% line:-1
フレームワークでもよいです

00:03:48.495 --> 00:03:51.999 align:start position:27% line:-2
フレームワークは
DATA CONSTを持ち

00:03:52.466 --> 00:03:57.371 align:start position:20% line:-2
swizzlingなどを実行すると
ダーティになります

00:04:01.008 --> 00:04:05.012 align:start position:30% line:-2
ダーティはAppによる
書込みがあるメモリです

00:04:05.612 --> 00:04:07.781 align:start position:21% line:-2
ダーティメモリにはオブジェクトや
文字列や配列などの

00:04:07.881 --> 00:04:10.851 align:start position:29% line:-2
mallocで定義された
あらゆるものがあります

00:04:12.619 --> 00:04:15.789 align:start position:34% line:-2
またデコードされた
イメージバッファや

00:04:17.391 --> 00:04:18.992 align:start position:29% line:-1
フレームワークもそうです

00:04:19.259 --> 00:04:23.730 align:start position:21% line:-2
フレームワークには通常のデータと
ダーティな部分がありますが

00:04:24.231 --> 00:04:27.301 align:start position:23% line:-1
ダーティとして認識されています

00:04:27.935 --> 00:04:30.637 align:start position:36% line:-2
フレームワークは
２度登場しました

00:04:30.737 --> 00:04:35.642 align:start position:23% line:-2
フレームワークをリンクするには
両方のメモリを使うのです

00:04:35.742 --> 00:04:38.478 align:start position:29% line:-2
フレームワークのリンクの
話をすると

00:04:38.579 --> 00:04:40.447 align:start position:25% line:-1
このフレームワークの整備には

00:04:40.781 --> 00:04:43.483 align:start position:27% line:-2
Singletonsと
グローバルイニシャライザが

00:04:43.584 --> 00:04:46.320 align:start position:23% line:-1
ダーティメモリ削減に役立ちます

00:04:46.420 --> 00:04:50.290 align:start position:20% line:-2
Singletonsは生成された後
必ずメモリに起生し

00:04:50.424 --> 00:04:54.962 align:start position:23% line:-2
イニシャライザはリンク時
クラスのロード時に実行されます

00:04:57.631 --> 00:05:00.033 align:start position:29% line:-1
次は圧縮されたメモリです

00:04:57.631 --> 00:05:00.033 align:start position:29% line:-1
次は圧縮されたメモリです

00:05:00.667 --> 00:05:03.504 align:start position:27% line:-2
iOSはディスクスワップの
システムがありません

00:05:04.505 --> 00:05:06.473 align:start position:23% line:-2
代わりに
メモリ圧縮プログラムを使います

00:05:06.573 --> 00:05:08.308 align:start position:23% line:-1
iOS 7でリリースされました

00:05:08.575 --> 00:05:12.012 align:start position:30% line:-2
この圧縮プログラムは
未アクセスのページを―

00:05:12.246 --> 00:05:16.116 align:start position:23% line:-1
圧縮してスペースを生み出します

00:05:16.316 --> 00:05:20.787 align:start position:21% line:-2
またアクセス時にはページを解凍し
メモリを読み取れます

00:05:21.121 --> 00:05:22.556 align:start position:38% line:-1
例を見ましょう

00:05:23.390 --> 00:05:25.692 align:start position:25% line:-2
キャッシュ用の
ディクショナリがあるとします

00:05:25.859 --> 00:05:28.595 align:start position:30% line:-1
使用メモリは３ページ分

00:05:29.296 --> 00:05:32.966 align:start position:23% line:-2
アクセスがなく
システムがスペースを要求すれば

00:05:33.066 --> 00:05:35.769 align:start position:29% line:-1
１ページまで圧縮できます

00:05:35.869 --> 00:05:38.138 align:start position:32% line:-1
このように圧縮されて

00:05:39.540 --> 00:05:42.676 align:start position:25% line:-1
２ページ分の空きができました

00:05:42.809 --> 00:05:45.646 align:start position:27% line:-1
アクセスすれば元に戻ります

00:05:46.747 --> 00:05:49.116 align:start position:27% line:-1
次はメモリ不足警告について

00:05:49.750 --> 00:05:53.320 align:start position:21% line:-1
警告の原因がAppとは限りません

00:05:53.787 --> 00:05:57.124 align:start position:29% line:-2
ローメモリのデバイスでの
電話受信は―

00:05:57.224 --> 00:05:58.959 align:start position:32% line:-1
警告の原因になります

00:05:59.059 --> 00:06:03.330 align:start position:34% line:-2
皆さんのAppが
原因ではありません

00:05:59.059 --> 00:06:03.330 align:start position:34% line:-2
皆さんのAppが
原因ではありません

00:06:03.931 --> 00:06:07.401 align:start position:29% line:-2
この圧縮プログラムは
メモリ開放を複雑にします

00:06:07.935 --> 00:06:12.172 align:start position:29% line:-2
圧縮対象によっては
よりメモリを使うからです

00:06:12.272 --> 00:06:14.741 align:start position:30% line:-2
そこでポリシーの変更を
お薦めします

00:06:14.842 --> 00:06:17.611 align:start position:21% line:-1
一定期間キャッシュを停止するとか

00:06:17.711 --> 00:06:21.481 align:start position:30% line:-2
バックグラウンド作業の
一部を抑制するなど

00:06:22.482 --> 00:06:25.285 align:start position:32% line:-2
対応済みの方も
いるかと思いますが―

00:06:26.553 --> 00:06:29.857 align:start position:21% line:-2
警告を受けたら キャッシュから
すべてのオブジェクトを削除します

00:06:31.291 --> 00:06:34.228 align:start position:27% line:-2
圧縮されたディクショナリの
例に戻りましょう

00:06:34.695 --> 00:06:35.796 align:start position:34% line:-1
どうなるでしょう？

00:06:35.896 --> 00:06:38.499 align:start position:23% line:-1
ディクショナリにアクセスすると

00:06:38.899 --> 00:06:41.602 align:start position:27% line:-1
ページの使用数が増えました

00:06:42.035 --> 00:06:46.006 align:start position:29% line:-2
制限されたメモリ環境では
問題ですね

00:06:46.406 --> 00:06:48.642 align:start position:29% line:-1
私はオブジェクトを削除し

00:06:49.142 --> 00:06:53.480 align:start position:23% line:-2
圧縮時と同じ１ページに戻すため
多くの作業をしています

00:06:54.181 --> 00:06:58.285 align:start position:25% line:-2
一般的に
メモリ不足警告には要注意です

00:06:59.620 --> 00:07:02.823 align:start position:30% line:-2
さてキャッシュに関する
重要ポイントです

00:06:59.620 --> 00:07:02.823 align:start position:30% line:-2
さてキャッシュに関する
重要ポイントです

00:07:03.190 --> 00:07:07.127 align:start position:23% line:-2
キャッシュは
CPUのリピート作業を避けます

00:07:07.227 --> 00:07:10.264 align:start position:34% line:-2
度を越えると
メモリを使い果たし

00:07:10.697 --> 00:07:13.000 align:start position:32% line:-1
システムには問題です

00:07:13.367 --> 00:07:16.537 align:start position:30% line:-2
メモリ圧縮プログラムと
キャッシュがありますが

00:07:16.637 --> 00:07:20.841 align:start position:27% line:-2
キャッシュと再計算の
バランスを考慮してください

00:07:21.341 --> 00:07:24.845 align:start position:25% line:-2
またディクショナリの代わりに
NSCacheを使えば

00:07:24.945 --> 00:07:28.382 align:start position:21% line:-1
安全にオブジェクトを保存できます

00:07:28.482 --> 00:07:32.252 align:start position:23% line:-2
NSCacheで割り当てられた
メモリはパージ可能で

00:07:32.352 --> 00:07:34.855 align:start position:29% line:-1
メモリ制約下では有効です

00:07:36.690 --> 00:07:39.827 align:start position:21% line:-1
Appのメモリ構造に戻りましょう

00:07:39.927 --> 00:07:45.032 align:start position:23% line:-2
Appのフットプリントと言えば
ダーティか圧縮の部分です

00:07:45.132 --> 00:07:47.234 align:start position:32% line:-1
クリーンは別ものです

00:07:47.801 --> 00:07:52.105 align:start position:23% line:-2
どんなAppにも
フットプリントの限度があります

00:07:52.973 --> 00:07:55.442 align:start position:30% line:-1
上限はかなり高いですが

00:07:55.542 --> 00:07:59.346 align:start position:36% line:-2
デバイスによって
限度は変わります

00:07:59.446 --> 00:08:03.283 align:start position:27% line:-2
１ギガバイトのデバイスでは
４ギガバイトのデバイスほど

00:07:59.446 --> 00:08:03.283 align:start position:27% line:-2
１ギガバイトのデバイスでは
４ギガバイトのデバイスほど

00:08:03.383 --> 00:08:05.385 align:start position:34% line:-1
メモリは使えません

00:08:06.820 --> 00:08:10.524 align:start position:20% line:-1
そこでExtensionを使います

00:08:10.624 --> 00:08:12.793 align:start position:29% line:-2
Extensionの
フットプリントは低いです

00:08:12.893 --> 00:08:16.930 align:start position:29% line:-2
使用の際は
心に留めておいてください

00:08:17.965 --> 00:08:21.735 align:start position:27% line:-2
フットプリントが超過すると
例外を得ます

00:08:22.135 --> 00:08:26.573 align:start position:2% line:-1
それがEXC RESOURCE EXCEPTIONです

00:08:27.341 --> 00:08:29.476 align:start position:36% line:-1
それではこれから

00:08:30.043 --> 00:08:33.179 align:start position:25% line:-2
フットプリントの分析について
ジェイムスが話します

00:08:34.615 --> 00:08:37.183 align:start position:43% line:-1
(拍手)

00:08:37.284 --> 00:08:38.150 align:start position:32% line:-1
よろしく　ジェイムス

00:08:38.251 --> 00:08:39.052 align:start position:41% line:-1
ありがとう

00:08:40.587 --> 00:08:41.388 align:start position:34% line:-1
ありがとう　カイル

00:08:41.688 --> 00:08:44.358 align:start position:18% line:-2
Appleのソフトウェアエンジニアの
ジェイムスです

00:08:44.458 --> 00:08:49.897 align:start position:25% line:-2
フットプリントの分析のための
ツールを紹介します

00:08:51.398 --> 00:08:54.301 align:start position:29% line:-2
Xcodeのメモリ測定は
ご存知ですね

00:08:54.401 --> 00:09:00.474 align:start position:25% line:-2
デバッグナビゲータに表示され
フットプリントを確認できます

00:08:54.401 --> 00:09:00.474 align:start position:25% line:-2
デバッグナビゲータに表示され
フットプリントを確認できます

00:09:00.908 --> 00:09:04.978 align:start position:23% line:-2
Xcode 10ではシステムの
グレードも表示されますが―

00:09:05.078 --> 00:09:08.549 align:start position:29% line:-2
Xcode 9との違いは
気にしないでください

00:09:09.149 --> 00:09:13.053 align:start position:25% line:-2
XcodeでAppの実行をし
多くのメモリを消費しています

00:09:13.353 --> 00:09:15.022 align:start position:32% line:-1
調査に使うツールは？

00:09:15.289 --> 00:09:17.591 align:start position:27% line:-1
Instrumentsです

00:09:18.292 --> 00:09:21.695 align:start position:23% line:-2
これで様々な方法で
フットプリントの調査ができます

00:09:23.096 --> 00:09:25.732 align:start position:18% line:-2
AllocationsとLeaksは
ご存知ですね

00:09:25.833 --> 00:09:28.769 align:start position:29% line:-2
Allocationsは
ヒープの配置を分析し

00:09:28.869 --> 00:09:31.371 align:start position:25% line:-2
Leaksはメモリのリークを
チェックします

00:09:31.471 --> 00:09:35.175 align:start position:11% line:-2
そして聞きなれないVM Trackerと
Virtual Memory Traceです

00:09:36.443 --> 00:09:40.380 align:start position:27% line:-2
カイルがiOSの
メモリについて話しました―

00:09:40.480 --> 00:09:42.783 align:start position:25% line:-1
ダーティおよび圧縮メモリです

00:09:42.883 --> 00:09:46.153 align:start position:23% line:-2
VM Trackerはそれらを
分析できます

00:09:47.054 --> 00:09:51.058 align:start position:36% line:-2
ダーティと圧縮の
別々の記録を持ち

00:09:51.158 --> 00:09:53.494 align:start position:29% line:-2
レジデントサイズの情報を
提供します

00:09:53.994 --> 00:09:57.798 align:start position:25% line:-2
ダーティメモリのサイズ調査に
有効です

00:09:58.832 --> 00:10:01.535 align:start position:5% line:-1
最後はVirtual Memory Traceです

00:09:58.832 --> 00:10:01.535 align:start position:5% line:-1
最後はVirtual Memory Traceです

00:10:01.735 --> 00:10:06.507 align:start position:25% line:-2
Appの仮想メモリシステムの
パフォーマンスを表示します

00:10:09.009 --> 00:10:11.745 align:start position:18% line:-1
Operationタブから見られます

00:10:11.879 --> 00:10:15.983 align:start position:25% line:-2
仮想メモリの分析や
ページのキャッシュヒット数や

00:10:16.083 --> 00:10:18.519 align:start position:21% line:-1
ページのゼロフィルも表示されます

00:10:21.355 --> 00:10:27.161 align:start position:21% line:-2
デバイスのメモリが上限に近づくと
例外の警告を受け取ります

00:10:27.261 --> 00:10:29.730 align:start position:18% line:-1
Xcode 10でAppを起動すると

00:10:30.531 --> 00:10:33.467 align:start position:25% line:-2
Xcodeが例外をキャッチし
Appを停止します

00:10:33.567 --> 00:10:37.037 align:start position:30% line:-2
メモリデバッガを起動し
調査を開始できます

00:10:37.137 --> 00:10:38.939 align:start position:38% line:-1
とても便利です

00:10:40.674 --> 00:10:43.310 align:start position:21% line:-1
Xcode 8より導入されました

00:10:43.410 --> 00:10:46.980 align:start position:25% line:-2
オブジェクトの依存 サイクル
リークを追跡できます

00:10:47.080 --> 00:10:50.417 align:start position:21% line:-2
Xcode 10には
レイアウトのよい更新がありました

00:10:50.517 --> 00:10:53.353 align:start position:29% line:-2
大きなmemgraphが
見やすくなりました

00:10:53.887 --> 00:10:59.760 align:start position:18% line:-2
Xcodeがmemgraphを利用し
Appのメモリ情報を蓄積しています

00:11:00.060 --> 00:11:04.832 align:start position:23% line:-2
実は コマンドラインツールでも
memgraphを使えます

00:11:06.300 --> 00:11:08.802 align:start position:18% line:-2
まずXcodeからmemgraphを
エクスポートします

00:11:08.902 --> 00:11:10.103 align:start position:34% line:-1
とてもシンプルです

00:11:10.938 --> 00:11:15.075 align:start position:27% line:-2
エクスポートボタンを押して
保存するだけです

00:11:15.309 --> 00:11:16.076 align:start position:45% line:-1
そして

00:11:16.877 --> 00:11:21.448 align:start position:29% line:-2
そのmemgraphを
コマンドラインに移します

00:11:22.182 --> 00:11:26.220 align:start position:18% line:-2
私がXcode 10でAppを実行し
例外を受け取ったとして

00:11:26.320 --> 00:11:29.523 align:start position:21% line:-1
memgraphを使い調査します

00:11:29.623 --> 00:11:30.891 align:start position:38% line:-1
何をするのか？

00:11:30.991 --> 00:11:32.960 align:start position:32% line:-1
ターミナルへ行きます

00:11:34.128 --> 00:11:36.463 align:start position:27% line:-1
使うツールはvmmapです

00:11:36.563 --> 00:11:39.266 align:start position:23% line:-2
プロセスに割り当てられた
仮想メモリ領域を表示することで

00:11:39.366 --> 00:11:42.503 align:start position:27% line:-2
Appのメモリ消費の分析が
可能になります

00:11:43.871 --> 00:11:46.206 align:start position:21% line:-2
まずはsummary flagを
お薦めします

00:11:46.673 --> 00:11:50.978 align:start position:30% line:-2
領域のメモリのサイズを
詳細に表示し

00:11:52.713 --> 00:11:54.481 align:start position:32% line:-1
ダーティな領域も表示

00:11:55.449 --> 00:11:58.151 align:start position:25% line:-1
圧縮されたメモリ量も示します

00:11:58.252 --> 00:12:01.321 align:start position:32% line:-2
ダーティやスワップは
とても重要です

00:11:58.252 --> 00:12:01.321 align:start position:32% line:-2
ダーティやスワップは
とても重要です

00:12:01.922 --> 00:12:07.427 align:start position:21% line:-2
ただスワップサイズは
圧縮される前のサイズだということ

00:12:07.528 --> 00:12:09.263 align:start position:30% line:-1
圧縮サイズとは違います

00:12:10.197 --> 00:12:13.400 align:start position:29% line:-1
より詳細な情報を望む場合

00:12:13.500 --> 00:12:17.771 align:start position:14% line:-2
memgraphに対しvmmapを実行し
コンテンツを取得してください

00:12:17.871 --> 00:12:21.108 align:start position:23% line:-1
すると実行可能コードのような―

00:12:21.208 --> 00:12:23.177 align:start position:21% line:-1
書き込み不可能な領域が判明します

00:12:24.144 --> 00:12:27.147 align:start position:23% line:-2
これでインスタンスなどの
書き込み可能な領域も判明します

00:12:27.247 --> 00:12:29.149 align:start position:32% line:-1
ヒープがある場所です

00:12:30.684 --> 00:12:36.256 align:start position:21% line:-2
すべてのツールがコマンドライン
ユーティリティでうまく機能します

00:12:36.456 --> 00:12:39.827 align:start position:27% line:-2
先日VM Trackerで
私のAppを分析したところ

00:12:39.927 --> 00:12:42.930 align:start position:21% line:-1
ダーティメモリが増加していました

00:12:43.063 --> 00:12:44.331 align:start position:25% line:-1
そこでmemgraphを使い

00:12:44.832 --> 00:12:47.100 align:start position:25% line:-1
ダーティデータの原因となる―

00:12:47.201 --> 00:12:50.704 align:start position:30% line:-2
フレームワークや
ライブラリを探しました

00:12:52.206 --> 00:12:55.676 align:start position:27% line:-2
その時のmemgraphに
実行したvmmapです

00:12:56.243 --> 00:12:58.712 align:start position:29% line:-1
ページフラグを使いました

00:12:58.812 --> 00:13:02.850 align:start position:30% line:-2
バイト数の代わりに
ページ数で表示されます

00:12:58.812 --> 00:13:02.850 align:start position:30% line:-2
バイト数の代わりに
ページ数で表示されます

00:13:04.918 --> 00:13:06.720 align:start position:25% line:-1
私は検索のため グレップに―

00:13:06.820 --> 00:13:09.890 align:start position:25% line:-2
“ダイナミックライブラリ”と
挿入しました

00:13:10.991 --> 00:13:13.961 align:start position:21% line:-1
最後にawkスクリプトを挿入して

00:13:14.061 --> 00:13:18.332 align:start position:29% line:-2
ダーティなカラムを合算し
ページ数を表示させます

00:13:19.333 --> 00:13:21.835 align:start position:30% line:-2
便利なので
常にこれを使っています

00:13:21.935 --> 00:13:26.607 align:start position:23% line:-2
デベロッパにとって有効な
デバッギング作業となるでしょう

00:13:29.076 --> 00:13:33.514 align:start position:20% line:-2
macOSデベロッパはleaksを
ご存じかもしれません

00:13:33.780 --> 00:13:37.551 align:start position:23% line:-2
ランタイムにどこにも根付かない
オブジェクトを記録します

00:13:37.651 --> 00:13:41.788 align:start position:18% line:-2
leaksで見つかったオブジェクトは
開放不可なダーティメモリです

00:13:43.457 --> 00:13:45.259 align:start position:23% line:-1
メモリデバッガのリークを見ると

00:13:46.193 --> 00:13:51.598 align:start position:25% line:-2
互いに関連する
３つのオブジェクトがあります

00:13:51.765 --> 00:13:55.335 align:start position:21% line:-1
leaksツールで見てみましょう

00:13:56.603 --> 00:14:00.807 align:start position:23% line:-2
最新のleaksは
リークされたオブジェクト以外に

00:13:56.603 --> 00:14:00.807 align:start position:23% line:-2
最新のleaksは
リークされたオブジェクト以外に

00:14:01.808 --> 00:14:05.612 align:start position:29% line:-2
それらが属するサイクルも
表示されます

00:14:05.913 --> 00:14:08.582 align:start position:27% line:-2
mallocスタックログが
プロセス上で可能なら

00:14:08.682 --> 00:14:11.385 align:start position:25% line:-2
ルートノードの
バックトレースも提供されます

00:14:14.354 --> 00:14:17.691 align:start position:23% line:-1
メモリはどこへ行くのでしょう？

00:14:18.058 --> 00:14:22.329 align:start position:29% line:-2
vmmapを調べると
ヒープは本当に大きいです

00:14:22.563 --> 00:14:27.234 align:start position:21% line:-2
ヒープツールはプロセス上すべての
オブジェクト配置情報を提供します

00:14:27.334 --> 00:14:31.772 align:start position:29% line:-2
同じ種類のオブジェクトや
配置の追跡に役立ちます

00:14:34.274 --> 00:14:39.046 align:start position:18% line:-2
Xcodeがメモリリソースの例外を
キャッチした際のmemgraphです

00:14:39.146 --> 00:14:40.714 align:start position:34% line:-1
ヒープを調査します

00:14:40.814 --> 00:14:46.119 align:start position:29% line:-2
するとオブジェクト情報
クラス名などが分かります

00:14:47.087 --> 00:14:48.489 align:start position:32% line:-1
オブジェクトの数量や

00:14:49.490 --> 00:14:53.694 align:start position:36% line:-2
平均サイズや
合計サイズなども

00:14:54.895 --> 00:14:59.833 align:start position:32% line:-2
小さなオブジェクトも
多数 表示されますが

00:14:59.933 --> 00:15:02.236 align:start position:29% line:-1
それは問題ではありません

00:14:59.933 --> 00:15:02.236 align:start position:29% line:-1
それは問題ではありません

00:15:05.606 --> 00:15:07.841 align:start position:27% line:-1
ヒープは数でソートされます

00:15:08.308 --> 00:15:11.945 align:start position:30% line:-2
私が見たいのは
数ではなくサイズなので

00:15:12.045 --> 00:15:15.582 align:start position:21% line:-2
sortBySizeフラグを使い
サイズでソートします

00:15:16.583 --> 00:15:19.786 align:start position:14% line:-1
NSConcreteDataが巨大ですね

00:15:19.887 --> 00:15:24.992 align:start position:25% line:-2
結果はバグレポートにしますが
まだ十分ではありません

00:15:25.092 --> 00:15:26.860 align:start position:38% line:-1
源を探るのです

00:15:27.761 --> 00:15:31.265 align:start position:18% line:-2
NSConcreteDataの１つを
アドレスを取得します

00:15:31.899 --> 00:15:33.233 align:start position:30% line:-1
アドレスフラグを使い―

00:15:33.333 --> 00:15:38.071 align:start position:23% line:-2
クラス名でアドレス指定をすると
アドレスが取得できます

00:15:39.773 --> 00:15:43.010 align:start position:29% line:-1
データの源が分かりました

00:15:43.877 --> 00:15:46.146 align:start position:20% line:-2
ここでmallocのスタックログが
役立ちます

00:15:46.480 --> 00:15:50.184 align:start position:25% line:-1
システムが各配置を記録します

00:15:50.284 --> 00:15:53.253 align:start position:21% line:-2
ログはmemgraphの記録時に
キャプチャされ

00:15:53.353 --> 00:15:56.723 align:start position:36% line:-2
ツールの出力時に
注釈を付けます

00:15:57.090 --> 00:16:00.961 align:start position:14% line:-1
diagnosticsタブで設定可能です

00:15:57.090 --> 00:16:00.961 align:start position:14% line:-1
diagnosticsタブで設定可能です

00:16:01.428 --> 00:16:05.065 align:start position:7% line:-1
私のお薦めはLive Allocationsです

00:16:06.633 --> 00:16:10.537 align:start position:11% line:-2
memgraphはmallocスタックログに
キャプチャされました

00:16:10.804 --> 00:16:13.073 align:start position:25% line:-1
次は配置のバックトレースです

00:16:13.173 --> 00:16:15.242 align:start position:14% line:-1
使うのはmalloc historyです

00:16:15.509 --> 00:16:17.644 align:start position:20% line:-2
memgraphに
malloc historyをパス

00:16:17.744 --> 00:16:19.580 align:start position:32% line:-2
さらにインスタンスの
アドレスをパス

00:16:19.680 --> 00:16:21.982 align:start position:30% line:-2
バックトレースがあれば
表示されます

00:16:24.051 --> 00:16:27.387 align:start position:18% line:-2
これはNSConcreteDataの
アドレスの１つです

00:16:27.487 --> 00:16:29.189 align:start position:14% line:-1
malloc historyにパスすると

00:16:30.090 --> 00:16:31.358 align:start position:27% line:-1
バックトレースがありました

00:16:31.525 --> 00:16:36.830 align:start position:12% line:-2
NoirFilter.applyメソッドが
巨大なNSデータを生成しています

00:16:37.097 --> 00:16:42.002 align:start position:25% line:-2
これはバグレポートに添付して
誰かに見てもらいます

00:16:43.403 --> 00:16:48.375 align:start position:25% line:-2
以上はAppの動作を調査する
ほんの一部の方法です

00:16:48.609 --> 00:16:51.445 align:start position:21% line:-1
メモリ問題の対処に使うツールは？

00:16:52.045 --> 00:16:53.947 align:start position:36% line:-1
３つ考えられます

00:16:54.248 --> 00:16:55.983 align:start position:25% line:-1
オブジェクトの生成を見る場合

00:16:56.083 --> 00:16:58.919 align:start position:25% line:-2
オブジェクトに関連するものを
見る場合

00:16:59.019 --> 00:17:01.355 align:start position:30% line:-1
単にサイズを見たい場合

00:16:59.019 --> 00:17:01.355 align:start position:30% line:-1
単にサイズを見たい場合

00:17:02.356 --> 00:17:07.127 align:start position:20% line:-2
もしプロセス開始時に
mallocスタックログが有効なら

00:17:07.227 --> 00:17:09.930 align:start position:9% line:-2
malloc historyが オブジェクトの
バックトレースを見つけます

00:17:10.830 --> 00:17:13.267 align:start position:25% line:-1
オブジェクト関連を見たいなら

00:17:13.433 --> 00:17:18.338 align:start position:21% line:-2
leaksやその他のオプションを
使うことができます

00:17:19.172 --> 00:17:22.376 align:start position:25% line:-1
そしてサイズを確認したいなら

00:17:22.476 --> 00:17:24.411 align:start position:29% line:-1
vmmapとheapです

00:17:24.811 --> 00:17:30.484 align:start position:9% line:-2
私自身はvmmapとsummary flagを
使うことをお薦めします

00:17:30.584 --> 00:17:32.419 align:start position:29% line:-1
そしてスレッドに従います

00:17:34.054 --> 00:17:35.322 align:start position:36% line:-1
ここでカイルが―

00:17:35.422 --> 00:17:40.394 align:start position:29% line:-2
最大のオブジェクトである
画像について説明します

00:17:40.627 --> 00:17:41.161 align:start position:43% line:-1
カイル？

00:17:41.295 --> 00:17:46.233 align:start position:43% line:-1
(拍手)

00:17:46.333 --> 00:17:47.334 align:start position:41% line:-1
ありがとう

00:17:47.834 --> 00:17:48.402 align:start position:43% line:-1
それでは

00:17:48.902 --> 00:17:49.837 align:start position:43% line:-1
画像です

00:17:50.470 --> 00:17:53.507 align:start position:30% line:-1
画像で最も重要なことは

00:17:53.607 --> 00:17:59.079 align:start position:23% line:-2
メモリに関連するのはファイルの
サイズではなく寸法だということ

00:17:59.646 --> 00:18:05.886 align:start position:16% line:-2
ここにiPad Appの背景に使いたい
美しい画像があります

00:17:59.646 --> 00:18:05.886 align:start position:16% line:-2
ここにiPad Appの背景に使いたい
美しい画像があります

00:18:06.587 --> 00:18:10.124 align:start position:27% line:-2
寸法は幅が2048ピクセル
高さが1536ピクセル

00:18:10.457 --> 00:18:13.727 align:start position:21% line:-1
ディスク上で590キロバイトです

00:18:13.927 --> 00:18:16.497 align:start position:29% line:-1
さて メモリの使用量は？

00:18:18.732 --> 00:18:19.900 align:start position:34% line:-1
10メガバイトです

00:18:20.000 --> 00:18:22.202 align:start position:34% line:-1
とても大きいですね

00:18:22.469 --> 00:18:27.875 align:start position:18% line:-2
2048ピクセルと1536ピクセルの
積のサイズがその原因です

00:18:27.975 --> 00:18:31.178 align:start position:27% line:-2
1ピクセル４バイトなので
約10メガバイトになります

00:18:31.712 --> 00:18:34.381 align:start position:29% line:-1
なぜこんなに大きいのか？

00:18:34.948 --> 00:18:38.051 align:start position:25% line:-1
iOSでの画像の説明をします

00:18:38.151 --> 00:18:40.721 align:start position:21% line:-2
“Load”と“Decode”
そして“Render”があります

00:18:41.321 --> 00:18:47.728 align:start position:21% line:-2
ロードには590キロに圧縮された
JPEGファイルがあります

00:18:47.828 --> 00:18:49.129 align:start position:32% line:-1
メモリにロードします

00:18:49.797 --> 00:18:55.769 align:start position:23% line:-2
デコードではJPEGをGPUで
読み込めるフォーマットに変換

00:18:55.869 --> 00:18:59.406 align:start position:20% line:-1
この解凍で10メガバイトになります

00:18:59.907 --> 00:19:02.910 align:start position:34% line:-2
デコードすると
レンダーが可能です

00:18:59.907 --> 00:19:02.910 align:start position:34% line:-2
デコードすると
レンダーが可能です

00:19:03.477 --> 00:19:07.347 align:start position:34% line:-2
画像ついての詳細や
最適化の方法は―

00:19:07.448 --> 00:19:12.186 align:start position:5% line:-2
“Images and Graphics Best
Practice”のセッションをどうぞ

00:19:14.154 --> 00:19:17.824 align:start position:25% line:-2
画像はSRGBフォーマットで
表示されます

00:19:18.158 --> 00:19:22.196 align:start position:30% line:-2
これは最も典型的な
画像のフォーマットです

00:19:22.296 --> 00:19:24.298 align:start position:30% line:-1
１ピクセル８ビットです

00:19:25.699 --> 00:19:26.233 align:start position:43% line:-1
そのため

00:19:26.867 --> 00:19:32.005 align:start position:29% line:-2
赤が１バイト緑が１バイト
青が１バイトそしてその他

00:19:33.106 --> 00:19:34.608 align:start position:36% line:-1
さらに大きいのが

00:19:35.843 --> 00:19:39.213 align:start position:23% line:-1
iOSのワイドフォーマットです

00:19:39.313 --> 00:19:43.584 align:start position:25% line:-2
色が豊かになり
１ピクセルに２バイト必要です

00:19:43.684 --> 00:19:45.886 align:start position:30% line:-1
サイズが倍になりました

00:19:46.320 --> 00:19:51.291 align:start position:21% line:-2
iPhone 7 8 Ｘや
iPad Proなどのカメラは―

00:19:51.391 --> 00:19:55.462 align:start position:27% line:-2
このハイファイコンテンツに
対応しています

00:19:55.562 --> 00:19:59.333 align:start position:32% line:-2
スポーツロゴなどにも
使える精密さです

00:19:59.967 --> 00:20:05.072 align:start position:25% line:-2
しかし便利なのは
大きなディスプレイの場合です

00:19:59.967 --> 00:20:05.072 align:start position:25% line:-2
しかし便利なのは
大きなディスプレイの場合です

00:20:05.706 --> 00:20:08.175 align:start position:25% line:-2
つまり実際は小さなサイズでも
対応できます

00:20:08.308 --> 00:20:10.477 align:start position:29% line:-2
ルミナンスと
アルファ８フォーマットが

00:20:10.577 --> 00:20:14.681 align:start position:30% line:-2
これはグレースケールと
アルファ値のみで

00:20:14.848 --> 00:20:19.019 align:start position:21% line:-2
通常はMetal Appのような
シェーダなどで使われます

00:20:19.253 --> 00:20:21.288 align:start position:32% line:-1
一般的ではありません

00:20:21.388 --> 00:20:23.257 align:start position:34% line:-1
さらに小さくなると

00:20:23.690 --> 00:20:26.427 align:start position:27% line:-1
アルファ８フォーマットです

00:20:26.527 --> 00:20:29.062 align:start position:30% line:-2
１チャネルのみで
１ピクセル１バイトです

00:20:29.162 --> 00:20:29.797 align:start position:39% line:-1
とても小さく

00:20:29.897 --> 00:20:32.466 align:start position:23% line:-1
SRGBより75％も小さいので

00:20:33.033 --> 00:20:38.472 align:start position:27% line:-2
マスクやモノクロの
テキストなどに最適でしょう

00:20:39.006 --> 00:20:41.808 align:start position:32% line:-1
内訳を確認してみると

00:20:42.242 --> 00:20:47.347 align:start position:27% line:-2
１ピクセル１バイトから
１ピクセル８バイトまであり

00:20:47.448 --> 00:20:48.982 align:start position:39% line:-1
幅広いですね

00:20:49.082 --> 00:20:52.619 align:start position:29% line:-2
必要なのは
正しい選択を知ることです

00:20:52.886 --> 00:20:54.755 align:start position:23% line:-1
正しいフォーマットを選ぶには？

00:20:55.956 --> 00:20:58.358 align:start position:29% line:-1
フォーマットを選ばずに―

00:20:58.458 --> 00:20:59.960 align:start position:41% line:-1
選ばせます

00:21:01.061 --> 00:21:06.133 align:start position:0% line:-2
もしUIGraphicsBeginImageContext
WithOptionsを使っているなら

00:21:06.467 --> 00:21:09.136 align:start position:21% line:-1
これは初期からあったAPIですが

00:21:09.236 --> 00:21:12.206 align:start position:7% line:-2
UIGraphicsImageRendererに
変えてください

00:21:12.306 --> 00:21:14.942 align:start position:30% line:-1
メモリを抑えられますよ

00:21:15.042 --> 00:21:21.115 align:start position:2% line:-2
UIGraphicsBeginImageContext
WithOptionsは１ピクセル４バイト

00:21:21.949 --> 00:21:23.016 align:start position:38% line:-1
SRGBですね

00:21:23.116 --> 00:21:28.322 align:start position:27% line:-2
従ってワイドフォーマットも
アルファ８も使えません

00:21:28.689 --> 00:21:31.458 align:start position:7% line:-2
UIGraphicsImageRendererの
APIを使えば

00:21:31.558 --> 00:21:36.830 align:start position:25% line:-2
APIが自動的に
最適なフォーマットを選びます

00:21:38.465 --> 00:21:39.533 align:start position:39% line:-1
これが例です

00:21:39.633 --> 00:21:41.735 align:start position:30% line:-1
マスク用に円を描きます

00:21:41.902 --> 00:21:46.206 align:start position:12% line:-2
ハイライトされたdrawing codeを
処理するのは旧型のAPIですが

00:21:46.306 --> 00:21:50.177 align:start position:21% line:-2
黒い円を描くのに１ピクセルあたり
４バイトのフォーマットです

00:21:50.978 --> 00:21:55.282 align:start position:30% line:-2
新しいAPIに変更して
同様に実行すると

00:21:55.582 --> 00:21:59.052 align:start position:32% line:-2
１ピクセルあたり
１バイトになりました

00:21:59.152 --> 00:22:02.623 align:start position:25% line:-1
75％のメモリ削減になります

00:21:59.152 --> 00:22:02.623 align:start position:25% line:-1
75％のメモリ削減になります

00:22:02.723 --> 00:22:05.492 align:start position:32% line:-1
すばらしい節約ですね

00:22:08.161 --> 00:22:10.531 align:start position:30% line:-1
さらなる利点もあります

00:22:10.631 --> 00:22:14.067 align:start position:34% line:-2
マスクの再利用時
色の変更が可能です

00:22:14.434 --> 00:22:18.372 align:start position:14% line:-1
imageviewで複数色に変えられます

00:22:18.472 --> 00:22:21.175 align:start position:25% line:-1
更なるメモリは必要ありません

00:22:21.275 --> 00:22:23.477 align:start position:34% line:-1
黒の円だけではなく

00:22:23.577 --> 00:22:28.248 align:start position:27% line:-2
青や赤や緑の円を描いても
追加メモリは必要ありません

00:22:32.186 --> 00:22:35.122 align:start position:30% line:-2
その他の処理と言えば
ダウンサンプリングです

00:22:35.422 --> 00:22:39.293 align:start position:34% line:-2
サムネイル用などに
縮小したい場合

00:22:39.793 --> 00:22:42.896 align:start position:20% line:-1
UIImageは使いたくありません

00:22:42.996 --> 00:22:45.132 align:start position:27% line:-1
もしUIImageを使えば

00:22:45.232 --> 00:22:49.169 align:start position:23% line:-2
座標空間の変更が必要なため
パフォーマンスが悪くなるうえに

00:22:49.269 --> 00:22:53.106 align:start position:29% line:-2
メモリ内の画像を
解凍しなければなりません

00:22:53.574 --> 00:22:56.343 align:start position:16% line:-1
そこでImageIOフレームワークです

00:22:56.510 --> 00:22:59.079 align:start position:16% line:-1
ImageIOはダウンサンプルが可能で

00:22:59.179 --> 00:23:04.017 align:start position:25% line:-2
最終画像にはダーティメモリの
コストしか必要ないため

00:22:59.179 --> 00:23:04.017 align:start position:25% line:-2
最終画像にはダーティメモリの
コストしか必要ないため

00:23:04.117 --> 00:23:06.053 align:start position:25% line:-1
メモリ使用量の上昇を防ぎます

00:23:07.521 --> 00:23:10.357 align:start position:23% line:-2
例えば ディスクからファイルを
取得した際のコードです

00:23:10.457 --> 00:23:12.359 align:start position:34% line:-2
ダウンロードした
ファイルでも可です

00:23:12.893 --> 00:23:17.931 align:start position:27% line:-2
そしてUIImageを使い
小さい長方形を描きます

00:23:18.031 --> 00:23:20.267 align:start position:29% line:-1
メモリ使用量が上昇します

00:23:21.001 --> 00:23:25.672 align:start position:14% line:-2
今度はImageIOを使い ディスクから
ファイルをロードします

00:23:26.140 --> 00:23:31.245 align:start position:29% line:-2
画像の大きさを入力する
パラメータをセットします

00:23:31.678 --> 00:23:35.749 align:start position:7% line:-2
そしてCGImageSourceCreate
ThumbnailAtIndexを使い作成します

00:23:35.849 --> 00:23:38.919 align:start position:27% line:-2
CG画像は
UIImageでも作れます

00:23:39.019 --> 00:23:43.190 align:start position:23% line:-2
より小さな画像を
以前の半分の時間で手にしました

00:23:45.425 --> 00:23:49.396 align:start position:21% line:-2
次のトピックはバックグラウンドで
使用する場合の最適化です

00:23:49.830 --> 00:23:54.067 align:start position:23% line:-2
フルスクリーンのAppの画像が
あるとします

00:23:54.167 --> 00:23:55.769 align:start position:32% line:-1
とても美しい画像です

00:23:55.869 --> 00:24:01.275 align:start position:25% line:-2
しかし通知を確認する際などに
ホームスクリーンに戻ります

00:23:55.869 --> 00:24:01.275 align:start position:25% line:-2
しかし通知を確認する際などに
ホームスクリーンに戻ります

00:24:01.942 --> 00:24:03.977 align:start position:32% line:-1
画像はメモリの中です

00:24:04.545 --> 00:24:10.317 align:start position:21% line:-2
今までの経験から“表示されない
大きなリソースはアンロード”です

00:24:12.719 --> 00:24:13.821 align:start position:34% line:-1
方法は２つあります

00:24:13.921 --> 00:24:15.122 align:start position:18% line:-1
まずはApp lifecycleです

00:24:15.222 --> 00:24:21.128 align:start position:21% line:-2
バックグラウンドでも
フォアグラウンドでも使用できます

00:24:21.628 --> 00:24:27.601 align:start position:7% line:-2
UIViewControllerに準拠しておらず
オンスクリーンでの適用です

00:24:27.701 --> 00:24:30.938 align:start position:9% line:-1
UIViewControllerのメソッドは―

00:24:31.405 --> 00:24:34.308 align:start position:7% line:-1
複数view controllersがありますが

00:24:34.408 --> 00:24:36.477 align:start position:30% line:-2
スクリーンに
表示されるのは１枚です

00:24:36.643 --> 00:24:39.613 align:start position:12% line:-2
viewWillAppearや
viewDidDisappearを活用して

00:24:39.713 --> 00:24:43.150 align:start position:30% line:-2
メモリフットプリントを
小さくできます

00:24:43.984 --> 00:24:45.319 align:start position:39% line:-1
これが例です

00:24:46.153 --> 00:24:50.090 align:start position:27% line:-2
バックグラウンドにある
Appに通知をセットします

00:24:50.190 --> 00:24:53.026 align:start position:23% line:-2
この場合は
画像のアンロードをセットします

00:24:53.794 --> 00:24:56.697 align:start position:21% line:-2
Appがフォアグラウンドに来ると
通知されます

00:24:57.531 --> 00:24:59.199 align:start position:32% line:-1
画像をリロードしても

00:24:59.299 --> 00:25:04.238 align:start position:21% line:-2
バックグラウンドではメモリを
セーブでき 忠実性も維持できます

00:24:59.299 --> 00:25:04.238 align:start position:21% line:-2
バックグラウンドではメモリを
セーブでき 忠実性も維持できます

00:25:04.338 --> 00:25:08.509 align:start position:30% line:-2
システムに
メモリの余裕ができます

00:25:10.377 --> 00:25:14.381 align:start position:11% line:-2
Navigation Controllerや
Tab Bar Controllerと同様に

00:25:14.481 --> 00:25:17.584 align:start position:23% line:-2
ViewControllerは
画像が消えるとアンロードします

00:25:17.684 --> 00:25:21.955 align:start position:11% line:-2
そしてviewWillAppearで戻る前に
リロードできるので

00:25:22.055 --> 00:25:24.224 align:start position:27% line:-1
ユーザは違いを感じませんが

00:25:24.324 --> 00:25:27.060 align:start position:27% line:-1
メモリの使用量は減少します

00:25:30.030 --> 00:25:34.101 align:start position:23% line:-2
ここからは
クリスにデモをお願いしましょう

00:25:34.401 --> 00:25:35.102 align:start position:43% line:-1
クリス？

00:25:35.202 --> 00:25:39.973 align:start position:43% line:-1
(拍手)

00:25:40.073 --> 00:25:42.709 align:start position:27% line:-1
デモマシーンに切り替えます

00:25:43.277 --> 00:25:43.944 align:start position:43% line:-1
始めます

00:25:44.044 --> 00:25:45.445 align:start position:30% line:-1
使うのはこのAppです

00:25:45.546 --> 00:25:51.251 align:start position:25% line:-2
まずはこの高解像度の画像から
始めたいと思います

00:25:51.351 --> 00:25:56.256 align:start position:27% line:-2
NASAの太陽系の写真に
様々なフィルタを適用します

00:25:56.356 --> 00:26:00.828 align:start position:23% line:-2
簡単な例として 太陽に
フィルタを適用するのが見えます

00:25:56.356 --> 00:26:00.828 align:start position:23% line:-2
簡単な例として 太陽に
フィルタを適用するのが見えます

00:26:00.928 --> 00:26:03.497 align:start position:36% line:-2
これまでの結果に
満足しています

00:26:03.697 --> 00:26:06.266 align:start position:23% line:-1
私がジェイムスに意見を求めると

00:26:06.366 --> 00:26:09.570 align:start position:21% line:-2
返信メールに
ファイルが２つ添付されていました

00:26:09.837 --> 00:26:14.007 align:start position:21% line:-2
１つはmemgraphファイルで
もう１つはこの画像でした

00:26:15.742 --> 00:26:19.379 align:start position:29% line:-2
ジェイムスは
とても控えめな男性なので

00:26:19.479 --> 00:26:25.152 align:start position:27% line:-2
こんな絵文字を送るなんて
相当 混乱しているようです

00:26:25.819 --> 00:26:29.490 align:start position:21% line:-1
私は彼に“何が問題か分からない”

00:26:29.690 --> 00:26:33.861 align:start position:20% line:-2
“赤い部分に達してないから
まだ500メガバイトはあるはずだ”

00:26:33.961 --> 00:26:37.231 align:start position:29% line:-2
“使っていいだろう？”と
聞きました

00:26:37.798 --> 00:26:41.802 align:start position:29% line:-2
そして優秀なジェイムスは
私の考え方の―

00:26:41.902 --> 00:26:44.338 align:start position:32% line:-1
間違いを指摘しました

00:26:44.438 --> 00:26:50.377 align:start position:21% line:-2
まず このゲージは２ギガバイトの
デバイスの測定結果です

00:26:50.477 --> 00:26:52.713 align:start position:34% line:-2
それ以下のメモリの
デバイスもあります

00:26:52.813 --> 00:26:56.417 align:start position:29% line:-2
１ギガバイトのデバイスで
同じコードを実行したら

00:26:56.517 --> 00:27:00.420 align:start position:27% line:-2
AppはOSから
強制終了させられるでしょう

00:26:56.517 --> 00:27:00.420 align:start position:27% line:-2
AppはOSから
強制終了させられるでしょう

00:27:01.188 --> 00:27:02.189 align:start position:45% line:-1
第２に

00:27:03.123 --> 00:27:08.762 align:start position:23% line:-2
OSはAppを強制終了する際
今使用しているAppだけでなく

00:27:08.862 --> 00:27:13.567 align:start position:27% line:-2
他に実行されているAppや
OSのメモリも考慮します

00:27:13.967 --> 00:27:19.540 align:start position:21% line:-2
従って 赤い部分に達してなくても
強制終了の危険性はあります

00:27:20.107 --> 00:27:24.344 align:start position:30% line:-2
第３にユーザにとっては
最悪の例ですが

00:27:24.611 --> 00:27:27.414 align:start position:34% line:-2
使用量の比較を
示したチャートに―

00:27:27.514 --> 00:27:31.185 align:start position:34% line:-2
ゼロキロバイトの
メモリが存在します

00:27:31.485 --> 00:27:35.923 align:start position:23% line:-2
これはAppのスペースのために
OSから放棄されたメモリです

00:27:36.823 --> 00:27:40.260 align:start position:25% line:-1
ここで私をにらんでくださいね

00:27:40.360 --> 00:27:44.531 align:start position:23% line:-2
ユーザは他のAppを使う際
再ロードする必要があるからです

00:27:45.732 --> 00:27:47.167 align:start position:30% line:-1
ジェイムスは正しいです

00:27:47.267 --> 00:27:53.607 align:start position:27% line:-2
この針が示すメモリ使用量を
最大限小さくするために―

00:27:54.007 --> 00:27:56.076 align:start position:34% line:-1
何ができるでしょう

00:27:56.510 --> 00:27:59.112 align:start position:21% line:-1
memgraphファイルを見ます

00:28:01.115 --> 00:28:03.484 align:start position:25% line:-1
memgraphを使う時に―

00:28:05.285 --> 00:28:09.289 align:start position:23% line:-1
私にはいくつかの戦略があります

00:28:09.389 --> 00:28:12.960 align:start position:27% line:-2
第１に…
スクリーン表示を調整します

00:28:13.060 --> 00:28:15.095 align:start position:32% line:-1
まずリークを探します

00:28:15.362 --> 00:28:18.766 align:start position:29% line:-1
フィルタツールバーに行き

00:28:18.866 --> 00:28:20.534 align:start position:20% line:-1
leaksフィルタをクリックします

00:28:20.634 --> 00:28:24.538 align:start position:30% line:-2
memgraphにある
リークが表示されます

00:28:24.638 --> 00:28:27.841 align:start position:25% line:-1
このファイルにはありませんね

00:28:27.941 --> 00:28:30.978 align:start position:29% line:-2
これは良いニュースであり
悪いニュースでもあります

00:28:31.111 --> 00:28:35.449 align:start position:32% line:-2
何が起きているのか
調べる必要があります

00:28:36.583 --> 00:28:38.752 align:start position:21% line:-1
memgraphのいいところは―

00:28:38.852 --> 00:28:44.725 align:start position:27% line:-2
予測以上のインスタンス数を
表示してくれるところです

00:28:44.825 --> 00:28:45.959 align:start position:25% line:-1
このmemgraphを使って

00:28:46.059 --> 00:28:51.865 align:start position:23% line:-2
コードから特定のオブジェクトに
絞ると

00:28:51.965 --> 00:28:55.969 align:start position:23% line:-2
メモリには５つしかなく 実際は
１つずつなのが分かります

00:28:56.069 --> 00:28:59.172 align:start position:11% line:-1
複数のrootViewControllerや

00:28:59.273 --> 00:29:03.010 align:start position:11% line:-2
複数のnoirFilter
multiple filtersなどがあれば

00:28:59.273 --> 00:29:03.010 align:start position:11% line:-2
複数のnoirFilter
multiple filtersなどがあれば

00:29:03.110 --> 00:29:06.246 align:start position:25% line:-2
予想以上に
調べられることは多いでしょう

00:29:06.447 --> 00:29:10.083 align:start position:27% line:-2
予測以上の
インスタンスはないようです

00:29:10.184 --> 00:29:12.252 align:start position:29% line:-1
１つのサイズが大きいので

00:29:12.352 --> 00:29:14.254 align:start position:29% line:-1
念のため調べてみましょう

00:29:14.354 --> 00:29:18.158 align:start position:29% line:-2
メモリインスペクタを使い
確認します

00:29:18.258 --> 00:29:20.828 align:start position:29% line:-2
オブジェクトの
サイズがリスト化されます

00:29:20.928 --> 00:29:23.831 align:start position:27% line:-1
私のAppは32バイトです

00:29:23.931 --> 00:29:26.133 align:start position:9% line:-1
viewcontrollerのデータは1500

00:29:26.233 --> 00:29:27.868 align:start position:38% line:-1
よく見てみても

00:29:28.469 --> 00:29:33.106 align:start position:25% line:-2
ここにあるどのオブジェクトも
Appが１ギガを超えている―

00:29:33.240 --> 00:29:36.543 align:start position:27% line:-1
原因ではなさそうに思えます

00:29:37.010 --> 00:29:41.315 align:start position:23% line:-2
これがXcodeで
memgraphを扱う方法です

00:29:41.415 --> 00:29:42.816 align:start position:32% line:-1
次はどうしましょう？

00:29:43.217 --> 00:29:47.120 align:start position:25% line:-1
WWDCセッションで学んだ―

00:29:47.221 --> 00:29:51.158 align:start position:23% line:-1
コマンドラインツールを使います

00:29:51.425 --> 00:29:54.828 align:start position:23% line:-1
何か見つかるか試してみましょう

00:29:55.329 --> 00:29:58.332 align:start position:30% line:-1
ジェイムスのお薦めは―

00:29:58.432 --> 00:30:01.969 align:start position:27% line:-2
summary flagと
vmmapを使うことでした

00:29:58.432 --> 00:30:01.969 align:start position:27% line:-2
summary flagと
vmmapを使うことでした

00:30:02.736 --> 00:30:07.141 align:start position:23% line:-2
私のmemgraphファイルで
試してみましょう

00:30:09.376 --> 00:30:11.044 align:start position:36% line:-1
出力を確認します

00:30:11.678 --> 00:30:14.081 align:start position:30% line:-1
ここで私が探すべきは？

00:30:14.481 --> 00:30:16.583 align:start position:30% line:-1
普通は大きな数字ですね

00:30:16.683 --> 00:30:21.355 align:start position:32% line:-2
メモリの使用量が多い
何かを見つけるのです

00:30:21.488 --> 00:30:25.392 align:start position:27% line:-1
多くのカラムが存在しますね

00:30:25.492 --> 00:30:27.661 align:start position:32% line:-1
重要なものもあります

00:30:27.761 --> 00:30:32.399 align:start position:34% line:-2
まずは現実ではない
仮想サイズですが

00:30:32.499 --> 00:30:34.768 align:start position:30% line:-1
このカラムは無視します

00:30:34.868 --> 00:30:38.505 align:start position:25% line:-2
Appが要求したメモリですが
今は使用されていません

00:30:38.772 --> 00:30:42.409 align:start position:29% line:-2
ダーティは響きが悪いので
使用したくありませんね

00:30:42.509 --> 00:30:47.347 align:start position:29% line:-2
私は自分のAppは
クリーンなほうがいいです

00:30:47.448 --> 00:30:50.484 align:start position:32% line:-2
そして iOSなので
圧縮物を探します

00:30:51.318 --> 00:30:55.622 align:start position:21% line:-1
カイルとジェイムスが話したとおり

00:30:55.722 --> 00:30:58.892 align:start position:29% line:-2
ダーティなサイズと
圧縮されたサイズの合計が

00:30:58.992 --> 00:31:04.098 align:start position:29% line:-2
OSがAppのために
要求するメモリの容量です

00:30:58.992 --> 00:31:04.098 align:start position:29% line:-2
OSがAppのために
要求するメモリの容量です

00:31:04.198 --> 00:31:06.600 align:start position:27% line:-1
これら２つのカラムに注目し

00:31:06.700 --> 00:31:08.902 align:start position:32% line:-1
大きな数値を探します

00:31:09.002 --> 00:31:11.472 align:start position:25% line:-1
CG画像がすぐ目に入りました

00:31:11.572 --> 00:31:15.109 align:start position:32% line:-2
ダーティなサイズと
圧縮されたサイズです

00:31:15.209 --> 00:31:18.212 align:start position:29% line:-1
今はとにかく探し続けます

00:31:18.412 --> 00:31:23.183 align:start position:27% line:-2
IOSurfaceに大きな
ダーティサイズがあります

00:31:23.283 --> 00:31:25.018 align:start position:25% line:-1
圧縮されたサイズはありません

00:31:25.119 --> 00:31:28.655 align:start position:25% line:-2
MALLOC LARGEにも
ダーティサイズがありますね

00:31:28.755 --> 00:31:31.725 align:start position:21% line:-1
圧縮されたサイズはとても少量です

00:31:31.825 --> 00:31:35.429 align:start position:23% line:-2
他にはそれほど
大きなサイズのものはありません

00:31:35.529 --> 00:31:38.131 align:start position:34% line:-1
ここで見る限りでは

00:31:38.232 --> 00:31:42.736 align:start position:30% line:-2
仮想領域のCG画像に
集中していくべきですね

00:31:43.036 --> 00:31:45.038 align:start position:23% line:-1
それを理解した上で進みましょう

00:31:45.505 --> 00:31:47.908 align:start position:36% line:-1
次のステップは？

00:31:48.108 --> 00:31:51.678 align:start position:21% line:-1
仮想メモリについて知りたいですね

00:31:51.778 --> 00:31:54.481 align:start position:29% line:-1
vmmapに行きましょう

00:31:54.581 --> 00:32:00.754 align:start position:18% line:-2
今回はsummay flagではなく
Memgraghファイルを実行します

00:31:54.581 --> 00:32:00.754 align:start position:18% line:-2
今回はsummay flagではなく
Memgraghファイルを実行します

00:32:01.221 --> 00:32:04.224 align:start position:30% line:-1
心配なのはCG画像です

00:32:04.324 --> 00:32:08.896 align:start position:18% line:-1
vmmapが示す他の仮想メモリ領域は

00:32:08.996 --> 00:32:10.664 align:start position:39% line:-1
気にしません

00:32:10.764 --> 00:32:13.167 align:start position:30% line:-1
グレップを使いましょう

00:32:13.267 --> 00:32:17.838 align:start position:34% line:-2
CG画像についての
ラインが見たいです

00:32:17.938 --> 00:32:19.473 align:start position:36% line:-1
どうでしょうか？

00:32:20.007 --> 00:32:21.508 align:start position:36% line:-1
ラインは３つあり

00:32:21.608 --> 00:32:25.279 align:start position:30% line:-2
２つの仮想メモリ領域が
存在します

00:32:25.379 --> 00:32:28.782 align:start position:23% line:-2
それから
開始と終了のアドレスがあります

00:32:28.916 --> 00:32:31.518 align:start position:25% line:-1
上記と同じカラムと分かります

00:32:31.618 --> 00:32:36.557 align:start position:23% line:-2
仮想でかつ常駐
ダーティで圧縮されたラインです

00:32:36.657 --> 00:32:39.793 align:start position:32% line:-2
最後のラインは
サマリーラインなので

00:32:41.328 --> 00:32:44.098 align:start position:30% line:-1
上のラインと同じですね

00:32:44.464 --> 00:32:49.269 align:start position:25% line:-2
２つの領域のうち１つは小さく
片方は巨大です

00:32:49.369 --> 00:32:52.706 align:start position:32% line:-2
私はこの巨大な領域を
見たかったのです

00:32:53.841 --> 00:32:58.679 align:start position:29% line:-2
この領域について
より詳細を知るためには？

00:32:58.879 --> 00:33:01.915 align:start position:32% line:-2
vmmapについての
書類を見たところ

00:32:58.879 --> 00:33:01.915 align:start position:32% line:-2
vmmapについての
書類を見たところ

00:33:02.015 --> 00:33:04.551 align:start position:20% line:-1
verboseフラグに気づきました

00:33:04.651 --> 00:33:08.755 align:start position:27% line:-2
このverboseフラグは
多くの情報を出力します

00:33:08.856 --> 00:33:10.824 align:start position:30% line:-1
何が分かるでしょうか？

00:33:11.425 --> 00:33:16.396 align:start position:20% line:-2
verboseとmemgraphを
実行してみましょう

00:33:17.831 --> 00:33:23.370 align:start position:20% line:-2
再度言いますが
私が注視するのはCG画像の領域のみ

00:33:23.470 --> 00:33:26.306 align:start position:21% line:-1
グレップを使いフィルタをかけます

00:33:26.840 --> 00:33:30.043 align:start position:30% line:-1
多くの領域が現れました

00:33:30.144 --> 00:33:31.678 align:start position:36% line:-1
どうでしょうか？

00:33:31.778 --> 00:33:34.281 align:start position:25% line:-1
さてvmmapは初期設定で―

00:33:34.381 --> 00:33:38.752 align:start position:29% line:-2
連続した領域が見つかると
一緒に折り畳みます

00:33:38.852 --> 00:33:41.755 align:start position:27% line:-1
２ライン目を見てみましょう

00:33:41.855 --> 00:33:46.293 align:start position:23% line:-2
この領域の
終了と開始のアドレスが同じです

00:33:46.393 --> 00:33:48.796 align:start position:23% line:-1
同じパターンが続いているので―

00:33:48.896 --> 00:33:52.733 align:start position:32% line:-2
vmmapがそれらを
単一の領域に変えます

00:33:52.900 --> 00:33:55.802 align:start position:25% line:-1
いくつかの違いにも気づきます

00:33:55.903 --> 00:34:00.507 align:start position:29% line:-2
ダーティなメモリを
さらに使用するものもあり

00:33:55.903 --> 00:34:00.507 align:start position:29% line:-2
ダーティなメモリを
さらに使用するものもあり

00:34:00.607 --> 00:34:02.576 align:start position:30% line:-1
圧縮されたメモリもある

00:34:02.676 --> 00:34:06.647 align:start position:25% line:-1
注目すべきものが分かりました

00:34:06.780 --> 00:34:09.083 align:start position:29% line:-1
しかし別の方法を使います

00:34:09.183 --> 00:34:13.821 align:start position:32% line:-2
必須ではないですが
一般的なルールとして

00:34:14.021 --> 00:34:18.725 align:start position:25% line:-1
仮想メモリ領域作成が遅れると

00:34:18.824 --> 00:34:21.962 align:start position:27% line:-1
Appの作動も遅くなります

00:34:22.062 --> 00:34:26.699 align:start position:18% line:-2
このmemgraphはメモリ使用量の
上昇中に取得されたので

00:34:26.934 --> 00:34:32.339 align:start position:25% line:-2
これらの領域は
メモリの上昇と関連しています

00:34:32.505 --> 00:34:38.445 align:start position:21% line:-2
最大のダーティや圧縮サイズでなく
領域の最後から探ってみます

00:34:39.746 --> 00:34:42.716 align:start position:21% line:-1
最終領域の最初のアドレスを取得し

00:34:43.116 --> 00:34:45.152 align:start position:36% line:-1
次にすることは？

00:34:45.786 --> 00:34:50.556 align:start position:30% line:-2
ジェイムスが先に述べた
ヒープがありますが

00:34:50.757 --> 00:34:55.696 align:start position:29% line:-2
ただし仮想メモリ領域では
役に立ちません

00:34:56.330 --> 00:34:59.299 align:start position:29% line:-1
試したいリークは存在せず

00:34:59.399 --> 00:35:04.538 align:start position:18% line:-2
Memgraphにも見当たらないので
leaksは使えません

00:34:59.399 --> 00:35:04.538 align:start position:18% line:-2
Memgraphにも見当たらないので
leaksは使えません

00:35:04.638 --> 00:35:09.676 align:start position:23% line:-2
leaksに関するヘルプ情報を
調べてみました

00:35:09.777 --> 00:35:11.879 align:start position:25% line:-1
leaksでできることは多く

00:35:11.979 --> 00:35:17.217 align:start position:27% line:-2
ヒープ上や仮想メモリ領域の
関連オブジェクトも―

00:35:17.317 --> 00:35:19.119 align:start position:38% line:-1
示してくれます

00:35:19.253 --> 00:35:21.355 align:start position:36% line:-1
進めてみましょう

00:35:21.622 --> 00:35:27.828 align:start position:12% line:-2
leaksを使いtraceTreeフラグに
パスしてみます

00:35:27.961 --> 00:35:30.998 align:start position:27% line:-1
これで関連するアドレスの―

00:35:31.098 --> 00:35:34.868 align:start position:27% line:-1
ツリービューが表示されます

00:35:34.968 --> 00:35:38.772 align:start position:25% line:-1
ここで私の仮想メモリ領域の―

00:35:38.872 --> 00:35:42.209 align:start position:27% line:-1
開始のアドレスをパスします

00:35:42.376 --> 00:35:45.279 align:start position:21% line:-2
最後にmemgraphファイルを
提供します

00:35:46.213 --> 00:35:47.247 align:start position:34% line:-1
どうなるでしょう？

00:35:47.347 --> 00:35:50.918 align:start position:23% line:-1
関連するツリーを見てみましょう

00:35:51.018 --> 00:35:52.519 align:start position:36% line:-1
スクロールをして

00:35:53.120 --> 00:35:54.788 align:start position:38% line:-1
上を見てみます

00:35:54.888 --> 00:35:58.926 align:start position:30% line:-2
仮想メモリ領域と
CG画像領域があります

00:35:59.026 --> 00:36:01.729 align:start position:25% line:-1
そしてツリービューがあります

00:35:59.026 --> 00:36:01.729 align:start position:25% line:-1
そしてツリービューがあります

00:36:01.829 --> 00:36:06.800 align:start position:30% line:-2
関連するものが
すべて表示されています

00:36:06.934 --> 00:36:09.670 align:start position:29% line:-1
ここでXcodeに戻り―

00:36:09.770 --> 00:36:12.472 align:start position:21% line:-1
同じアドレスでフィルタをかけます

00:36:13.474 --> 00:36:16.143 align:start position:27% line:-1
そしてオブジェクトを見ると

00:36:16.443 --> 00:36:19.313 align:start position:23% line:-2
ツリーはリークスから得たものと
全く同じもので

00:36:19.413 --> 00:36:23.417 align:start position:30% line:-2
ノードの１つ１つを
展開することも可能です

00:36:23.517 --> 00:36:25.786 align:start position:32% line:-1
詳細を見てみましょう

00:36:26.219 --> 00:36:28.255 align:start position:27% line:-1
少し時間がかかるし退屈です

00:36:28.355 --> 00:36:31.458 align:start position:27% line:-1
leaksの出力で良い点は

00:36:31.558 --> 00:36:36.396 align:start position:27% line:-2
スキャンや検索や
フィルタが素早くできること

00:36:36.497 --> 00:36:39.667 align:start position:25% line:-2
バグレポートや
Eメールに挿入可能なことです

00:36:39.767 --> 00:36:43.537 align:start position:20% line:-2
Xcodeのグラフィカルビューでは
不可能です

00:36:43.637 --> 00:36:45.973 align:start position:30% line:-1
何が見つかるでしょう？

00:36:46.106 --> 00:36:47.508 align:start position:41% line:-1
理想的には

00:36:47.608 --> 00:36:52.512 align:start position:32% line:-2
私のAppのクラスを
見つけたいですね

00:36:52.613 --> 00:36:56.517 align:start position:29% line:-2
ですがクラスがないことは
確認済みです

00:36:56.617 --> 00:36:58.218 align:start position:32% line:-1
さてどうしましょう？

00:36:58.318 --> 00:37:01.855 align:start position:23% line:-1
フレームワークのようなクラスは

00:36:58.318 --> 00:37:01.855 align:start position:23% line:-1
フレームワークのようなクラスは

00:37:01.955 --> 00:37:05.426 align:start position:34% line:-2
代理もしくは
直接作ったものです

00:37:05.526 --> 00:37:09.697 align:start position:21% line:-2
私のAppにはUiviewがあり
UIImageがあります

00:37:09.797 --> 00:37:14.468 align:start position:25% line:-2
そしてコアイメージクラスを
フィルタリングに使っています

00:37:14.568 --> 00:37:16.437 align:start position:36% line:-1
先に進みましょう

00:37:16.537 --> 00:37:21.074 align:start position:27% line:-2
洗練されたデバッグツールを
調べてみましょう

00:37:21.542 --> 00:37:24.177 align:start position:32% line:-1
さらに見ていきますよ

00:37:25.779 --> 00:37:28.749 align:start position:27% line:-1
欲しいものがあるでしょうか

00:37:31.118 --> 00:37:32.920 align:start position:38% line:-1
大きな出力です

00:37:33.020 --> 00:37:34.755 align:start position:36% line:-1
少し混乱しますね

00:37:35.055 --> 00:37:38.025 align:start position:21% line:-1
例えばフォントに関連するものです

00:37:38.125 --> 00:37:40.627 align:start position:29% line:-1
私のAppで使っています

00:37:40.728 --> 00:37:45.432 align:start position:29% line:-2
フォントは メモリを
大量には消費しませんので

00:37:45.532 --> 00:37:47.234 align:start position:36% line:-1
意味がありません

00:37:47.868 --> 00:37:50.204 align:start position:36% line:-1
下部を見てみると

00:37:50.571 --> 00:37:54.508 align:start position:32% line:-2
CIクラスが
多数表示されています

00:37:54.608 --> 00:37:57.544 align:start position:21% line:-1
これはコアイメージフィルタなどで

00:37:57.644 --> 00:38:00.247 align:start position:21% line:-1
Appのフィルタ機能を作成します

00:37:57.644 --> 00:38:00.247 align:start position:21% line:-1
Appのフィルタ機能を作成します

00:38:00.681 --> 00:38:04.184 align:start position:23% line:-1
これも確認しておきたいことです

00:38:04.284 --> 00:38:08.021 align:start position:29% line:-2
しかし既に確認し
何も見つかりませんでした

00:38:09.223 --> 00:38:13.126 align:start position:29% line:-2
従ってleaksの出力は
必要ありませんね

00:38:13.227 --> 00:38:14.995 align:start position:41% line:-1
残念でした

00:38:15.596 --> 00:38:18.465 align:start position:32% line:-1
次はどうしましょう？

00:38:19.500 --> 00:38:25.372 align:start position:21% line:-2
幸いにもジェイムスには
メモリバックトレースがありました

00:38:25.472 --> 00:38:29.409 align:start position:18% line:-2
memgraphをキャプチャした際に
記録したものです

00:38:29.510 --> 00:38:32.546 align:start position:27% line:-1
従って別のツールを使います

00:38:32.646 --> 00:38:36.717 align:start position:27% line:-2
それでオブジェクトの
バックトレースを見ましょう

00:38:36.817 --> 00:38:38.919 align:start position:16% line:-1
malloc historyを使います

00:38:40.053 --> 00:38:44.024 align:start position:14% line:-1
まずmemgraphファイルにパスします

00:38:45.859 --> 00:38:50.698 align:start position:16% line:-2
ヘルプ文書から
fullStacksフラグにパスします

00:38:50.998 --> 00:38:56.970 align:start position:25% line:-2
そして人間が読みやすいように
出力します

00:38:57.071 --> 00:39:01.408 align:start position:29% line:-2
次に仮想メモリ領域の
開始アドレスにパスをして

00:38:57.071 --> 00:39:01.408 align:start position:29% line:-2
次に仮想メモリ領域の
開始アドレスにパスをして

00:39:01.775 --> 00:39:03.277 align:start position:39% line:-1
様子を見ます

00:39:03.977 --> 00:39:10.417 align:start position:21% line:-2
バックトレースは大きくないので
コードがラインに表示されています

00:39:10.517 --> 00:39:14.388 align:start position:30% line:-2
ライン６から９は
私のAppのコードです

00:39:14.488 --> 00:39:16.823 align:start position:34% line:-1
ライン６にあるのは

00:39:16.924 --> 00:39:19.660 align:start position:16% line:-1
NoirFilter apply関数で

00:39:19.760 --> 00:39:24.798 align:start position:27% line:-2
特定の仮想メモリ領域作成の
元になっています

00:39:24.898 --> 00:39:31.572 align:start position:23% line:-2
私のAppでどの部分がメモリを
使用しているかが分かる証拠です

00:39:31.805 --> 00:39:34.441 align:start position:21% line:-1
Memgraphファイルに戻ると

00:39:34.541 --> 00:39:38.879 align:start position:21% line:-2
Xcodeと同じバックトレースが
見て取れます

00:39:39.146 --> 00:39:42.983 align:start position:12% line:-2
NoirFilter applyメソッドも
あります

00:39:43.183 --> 00:39:48.655 align:start position:25% line:-2
実際にデバッグしていないので
ハイライトは見られません

00:39:48.755 --> 00:39:50.390 align:start position:27% line:-2
memgraphファイルを
読み込んでいるので

00:39:50.490 --> 00:39:53.927 align:start position:23% line:-2
malloc historyと
同じ出力ですね

00:39:54.294 --> 00:39:59.299 align:start position:30% line:-2
そして実際に
さらに確認をしてみると

00:39:59.399 --> 00:40:05.772 align:start position:23% line:-2
仮想メモリ領域の
CG画像のフルリストがあります

00:39:59.399 --> 00:40:05.772 align:start position:23% line:-2
仮想メモリ領域の
CG画像のフルリストがあります

00:40:05.873 --> 00:40:10.711 align:start position:23% line:-2
下から２番目の行をクリックして
移動させます

00:40:10.811 --> 00:40:13.514 align:start position:27% line:-1
バックトレースを見ましょう

00:40:15.482 --> 00:40:17.351 align:start position:29% line:-1
同じバックトレースですね

00:40:17.451 --> 00:40:20.721 align:start position:32% line:-2
同じコードパスが
その領域にもあります

00:40:20.988 --> 00:40:24.191 align:start position:25% line:-1
いくつかの領域を見てみると―

00:40:24.291 --> 00:40:26.727 align:start position:27% line:-1
バックトレースは同じでした

00:40:26.827 --> 00:40:31.665 align:start position:25% line:-2
さて これで
アプリケーションのどの部分が

00:40:31.765 --> 00:40:36.236 align:start position:23% line:-2
仮想メモリ領域を作成する原因と
なるのかが分かりました

00:40:36.603 --> 00:40:38.505 align:start position:34% line:-1
どうしましょうか？

00:40:38.605 --> 00:40:42.643 align:start position:20% line:-2
Xcodeに戻り
memgraphファイルを閉じます

00:40:43.377 --> 00:40:48.082 align:start position:30% line:-2
私が最初にしたいことは
このコードの中の―

00:40:48.348 --> 00:40:50.784 align:start position:36% line:-1
フィルタを見ると

00:40:52.219 --> 00:40:54.955 align:start position:20% line:-1
apply関数があるのが分かります

00:40:55.055 --> 00:40:57.391 align:start position:25% line:-1
さらに何かが表示されています

00:40:57.491 --> 00:41:01.962 align:start position:14% line:-2
UIGraphicsBeginImage
ContextWithOptionsや―

00:40:57.491 --> 00:41:01.962 align:start position:14% line:-2
UIGraphicsBeginImage
ContextWithOptionsや―

00:41:02.362 --> 00:41:06.733 align:start position:23% line:-2
UIGraphicsEnd
ImageContextよりも

00:41:06.833 --> 00:41:09.436 align:start position:21% line:-1
この状況に最適なAPIがあります

00:41:09.603 --> 00:41:14.308 align:start position:30% line:-2
まずは基準値を
設定する必要があります

00:41:14.408 --> 00:41:20.314 align:start position:23% line:-2
Appのメモリ消費に どれほど
影響があるか確かめるためです

00:41:20.414 --> 00:41:23.083 align:start position:30% line:-1
Appを実行してみます

00:41:23.584 --> 00:41:28.455 align:start position:27% line:-2
そしてデバッグナビゲータで
メモリレポートを確認します

00:41:28.555 --> 00:41:32.993 align:start position:27% line:-2
私のAppのメモリ使用量を
見てみましょう

00:41:33.394 --> 00:41:37.631 align:start position:32% line:-2
私はこの土星の北極の
画像が大好きです

00:41:37.798 --> 00:41:42.770 align:start position:29% line:-2
奇妙な六角形が
クールで 少し不気味です

00:41:43.170 --> 00:41:47.307 align:start position:34% line:-2
フィルタを適用して
結果を見ましょう

00:41:47.608 --> 00:41:53.046 align:start position:23% line:-2
１ギガ ３ギガ ４ギガ ６ギガ
７ギガ

00:41:53.146 --> 00:41:55.182 align:start position:43% line:-1
最悪です

00:41:57.518 --> 00:42:02.189 align:start position:29% line:-2
しかしこれはデバイスでは
使い物になりません

00:41:57.518 --> 00:42:02.189 align:start position:29% line:-2
しかしこれはデバイスでは
使い物になりません

00:42:02.289 --> 00:42:06.894 align:start position:23% line:-2
シミュレータ実行時は
デバッグやテストに役に立ちます

00:42:06.994 --> 00:42:09.997 align:start position:25% line:-1
デバイス上でも確認しましょう

00:42:10.097 --> 00:42:14.101 align:start position:30% line:-2
シミュレータは決して
メモリ不足になりません

00:42:14.201 --> 00:42:18.972 align:start position:21% line:-2
Appが強制終了された時は
シミュレータを使ってみてください

00:42:19.073 --> 00:42:23.277 align:start position:23% line:-2
割り当てができるので
強制終了されることはありません

00:42:23.377 --> 00:42:25.512 align:start position:32% line:-1
それで調査もできます

00:42:25.612 --> 00:42:30.951 align:start position:25% line:-2
ここに表示されている
グラフに注目したいと思います

00:42:31.985 --> 00:42:34.788 align:start position:23% line:-1
7.7ギガバイトに達しています

00:42:34.922 --> 00:42:36.256 align:start position:39% line:-1
ひどいですね

00:42:37.024 --> 00:42:39.593 align:start position:27% line:-1
さて 何ができるでしょう？

00:42:40.794 --> 00:42:44.231 align:start position:23% line:-1
ここでapply関数に戻ります

00:42:44.331 --> 00:42:48.669 align:start position:12% line:-2
beginImageContextWith
Optionsに戻りますが

00:42:48.769 --> 00:42:51.305 align:start position:27% line:-1
カイルの言葉を思い出します

00:42:51.405 --> 00:42:56.510 align:start position:21% line:-2
画像を扱っている時
メモリに関して最も重要なことは？

00:42:56.643 --> 00:42:58.045 align:start position:36% line:-1
画像のサイズです

00:42:58.145 --> 00:43:01.014 align:start position:30% line:-1
それでは見てみましょう

00:42:58.145 --> 00:43:01.014 align:start position:30% line:-1
それでは見てみましょう

00:43:01.115 --> 00:43:04.418 align:start position:29% line:-1
再度フィルタを挿入します

00:43:06.620 --> 00:43:08.755 align:start position:32% line:-1
デバッガで停止したら

00:43:10.991 --> 00:43:14.395 align:start position:29% line:-1
画像のサイズを確認します

00:43:14.495 --> 00:43:19.900 align:start position:32% line:-2
そして戻ってくる前に
水を飲みます

00:43:20.601 --> 00:43:23.270 align:start position:29% line:-1
やはり飲むのはやめました

00:43:24.571 --> 00:43:27.841 align:start position:14% line:-1
これは１万5000と１万3000の積です

00:43:27.941 --> 00:43:29.810 align:start position:39% line:-1
文書を見ると

00:43:29.910 --> 00:43:34.314 align:start position:23% line:-2
UIImageでは
ピクセルではなくポイントでした

00:43:34.548 --> 00:43:37.584 align:start position:20% line:-1
2Xもしくは3Xのデバイスであれば

00:43:37.684 --> 00:43:41.321 align:start position:32% line:-2
さらに大きい数を
掛ける必要があります

00:43:41.421 --> 00:43:45.125 align:start position:29% line:-2
カイルは10メガバイトで
驚いていました

00:43:45.225 --> 00:43:47.494 align:start position:32% line:-1
これは彼には秘密です

00:43:47.928 --> 00:43:51.398 align:start position:30% line:-1
試したいことがあります

00:43:51.498 --> 00:43:52.599 align:start position:39% line:-1
やってみます

00:43:53.734 --> 00:43:58.705 align:start position:18% line:-1
１万5000と１万3000の積として

00:43:59.506 --> 00:44:03.510 align:start position:18% line:-2
iPhone Xは3Xデバイスなので
幅３を掛けます

00:43:59.506 --> 00:44:03.510 align:start position:18% line:-2
iPhone Xは3Xデバイスなので
幅３を掛けます

00:44:04.711 --> 00:44:10.083 align:start position:25% line:-2
さらに高さ３を掛け
１ピクセル４バイトも掛けます

00:44:11.852 --> 00:44:14.154 align:start position:32% line:-1
また大きな数字ですね

00:44:15.789 --> 00:44:21.929 align:start position:21% line:-2
メモリの内7.5ギガバイツほどを
使用しているということです

00:44:23.096 --> 00:44:25.933 align:start position:7% line:-1
原因はbeginImageContextではなく

00:44:26.033 --> 00:44:27.601 align:start position:36% line:-1
画像サイズでした

00:44:27.701 --> 00:44:30.804 align:start position:27% line:-1
画像は大きくなくてよいです

00:44:30.904 --> 00:44:35.008 align:start position:29% line:-2
自分のビューと同じ寸法へ
縮小したいです

00:44:35.108 --> 00:44:37.244 align:start position:29% line:-1
メモリの削減にもなります

00:44:37.444 --> 00:44:40.214 align:start position:29% line:-2
画像をロードするコードに
戻ります

00:44:40.314 --> 00:44:43.384 align:start position:27% line:-2
その前にブレークポイントを
無効にします

00:44:44.785 --> 00:44:46.153 align:start position:29% line:-1
どうなるか見てみましょう

00:44:46.253 --> 00:44:47.521 align:start position:41% line:-1
簡単ですね

00:44:47.621 --> 00:44:49.923 align:start position:27% line:-1
バンドルからURLを取得し

00:44:50.023 --> 00:44:54.061 align:start position:21% line:-2
URLのデータから
UIImageにロードしています

00:44:54.161 --> 00:44:57.031 align:start position:25% line:-1
それがフィルタにパスされます

00:44:57.364 --> 00:45:01.902 align:start position:32% line:-2
フィルタに渡る前に
画像を縮小したいです

00:44:57.364 --> 00:45:01.902 align:start position:32% line:-2
フィルタに渡る前に
画像を縮小したいです

00:45:02.002 --> 00:45:04.405 align:start position:29% line:-1
カイルの言っていたように

00:45:04.505 --> 00:45:06.540 align:start position:27% line:-1
UIImageは使いません

00:45:06.640 --> 00:45:11.545 align:start position:23% line:-2
画像全体をメモリに
読む込むことは避けたいからです

00:45:12.379 --> 00:45:15.883 align:start position:25% line:-1
この関数は使わないでおきます

00:45:16.150 --> 00:45:20.220 align:start position:32% line:-2
カイルの提案どおりの
コードに置き換えます

00:45:22.589 --> 00:45:24.958 align:start position:27% line:-1
すると どうなるでしょう？

00:45:25.792 --> 00:45:30.664 align:start position:25% line:-1
バンドルから画像を取得します

00:45:30.898 --> 00:45:31.732 align:start position:43% line:-1
今回は―

00:45:31.832 --> 00:45:34.301 align:start position:36% line:-1
少し幅を広げて…

00:45:34.735 --> 00:45:37.838 align:start position:2% line:-2
CGImageSourceCreateWithURLを
呼び出します

00:45:37.938 --> 00:45:43.977 align:start position:9% line:-2
それからCGImageSourceCreate
ThumbnailAtIndexにパスし

00:45:44.077 --> 00:45:49.516 align:start position:25% line:-2
全体をメモリに読み込まずとも
サイズが変更できます

00:45:49.950 --> 00:45:52.753 align:start position:32% line:-1
違いを確認しましょう

00:45:52.853 --> 00:45:54.488 align:start position:39% line:-1
再構築します

00:45:55.823 --> 00:45:58.559 align:start position:25% line:-1
そしてAppの起動を待ちます

00:45:59.426 --> 00:46:01.028 align:start position:34% line:-1
一旦表示されると…

00:45:59.426 --> 00:46:01.028 align:start position:34% line:-1
一旦表示されると…

00:46:01.995 --> 00:46:03.964 align:start position:30% line:-1
おっと 警告が出ました

00:46:07.901 --> 00:46:10.037 align:start position:34% line:-1
この部分を省きます

00:46:10.938 --> 00:46:12.005 align:start position:36% line:-1
どうなるでしょう

00:46:12.740 --> 00:46:14.475 align:start position:39% line:-1
作っています

00:46:15.208 --> 00:46:16.777 align:start position:41% line:-1
作成中です

00:46:17.211 --> 00:46:19.246 align:start position:36% line:-1
出来上がりました

00:46:19.346 --> 00:46:22.115 align:start position:30% line:-1
メモリレポートを確認し

00:46:22.850 --> 00:46:26.186 align:start position:23% line:-1
土星の北極の画像に戻りましょう

00:46:26.286 --> 00:46:28.989 align:start position:21% line:-1
これが ずっと言いたかったんです

00:46:29.857 --> 00:46:33.327 align:start position:23% line:-1
画像がどうなるか見てみましょう

00:46:33.427 --> 00:46:36.797 align:start position:21% line:-1
75…93メガバイトになりました

00:46:36.897 --> 00:46:41.435 align:start position:20% line:-1
グラフの最高点は93メガバイトです

00:46:41.568 --> 00:46:43.337 align:start position:34% line:-1
著しく向上しました

00:46:43.437 --> 00:46:45.472 align:start position:43% line:-1
(拍手)

00:46:45.572 --> 00:46:51.411 align:start position:23% line:-2
シャットダウン寸前の
7.5ギガバイトからの改善です

00:46:52.179 --> 00:46:54.915 align:start position:29% line:-1
ここで戻りたいと思います

00:46:55.015 --> 00:46:58.018 align:start position:34% line:-1
そして停止させます

00:46:58.118 --> 00:47:01.121 align:start position:30% line:-1
フィルタメソッドに戻り

00:46:58.118 --> 00:47:01.121 align:start position:30% line:-1
フィルタメソッドに戻り

00:47:02.122 --> 00:47:07.061 align:start position:14% line:-2
UIBeginImageContextを
カイルの提案どおりに変更します

00:47:07.161 --> 00:47:10.497 align:start position:27% line:-1
このコードを消すことにして

00:47:10.597 --> 00:47:13.467 align:start position:27% line:-1
新たなフィルタを追加します

00:47:14.401 --> 00:47:19.273 align:start position:2% line:-2
そしてUIGraphicsImageRendererを
使います

00:47:19.373 --> 00:47:24.311 align:start position:23% line:-2
そしてこのRenderer内で
フィルタを適用するため

00:47:25.178 --> 00:47:26.146 align:start position:27% line:-1
CIFilterを使います

00:47:27.681 --> 00:47:29.183 align:start position:41% line:-1
実行します

00:47:29.283 --> 00:47:30.517 align:start position:41% line:-1
願わくは―

00:47:30.617 --> 00:47:34.321 align:start position:32% line:-2
メモリ使用量の違いが
現れますように

00:47:35.956 --> 00:47:40.160 align:start position:25% line:-2
デバッグナビゲータと
メモリレポートに戻りましょう

00:47:40.561 --> 00:47:44.031 align:start position:21% line:-1
そして再び 土星の画像に戻ります

00:47:46.667 --> 00:47:50.637 align:start position:25% line:-1
ここでフィルタを適用させます

00:47:51.338 --> 00:47:54.708 align:start position:27% line:-1
これでグラフがどうなるか？

00:47:54.808 --> 00:47:55.909 align:start position:32% line:-1
98メガバイトですね

00:47:56.010 --> 00:47:58.879 align:start position:29% line:-1
先ほどと ほぼ同じですね

00:47:58.979 --> 00:48:02.082 align:start position:30% line:-1
私が期待したとおりです

00:47:58.979 --> 00:48:02.082 align:start position:30% line:-1
私が期待したとおりです

00:48:02.182 --> 00:48:06.487 align:start position:29% line:-2
画像は１ピクセルあたり
４バイトを使用しています

00:48:06.587 --> 00:48:10.724 align:start position:32% line:-2
ここではメモリ削減が
目標ではありません

00:48:10.824 --> 00:48:14.361 align:start position:23% line:-1
しかし削減のチャンスはあります

00:48:14.728 --> 00:48:19.700 align:start position:25% line:-2
例えばOSがピクセルあたりの
バイト数を少なくしたり

00:48:19.800 --> 00:48:24.137 align:start position:25% line:-2
さらなるバイト数を要求しても
問題はないです

00:48:24.471 --> 00:48:29.710 align:start position:29% line:-2
大きな向上はないですが
私のコードは改善しました

00:48:30.477 --> 00:48:33.414 align:start position:29% line:-1
まだできることがあります

00:48:33.514 --> 00:48:37.117 align:start position:20% line:-2
Appがバックグラウンドに入った時
画像をアンロードし

00:48:37.217 --> 00:48:41.221 align:start position:23% line:-2
スクリーンにない画像はビューに
表示しないようにするなどです

00:48:41.321 --> 00:48:44.858 align:start position:32% line:-2
しかし この結果に
本当に満足しています

00:48:44.958 --> 00:48:46.927 align:start position:27% line:-1
ジェイムスに返送しましょう

00:48:47.461 --> 00:48:52.800 align:start position:29% line:-2
スクリーンショットと共に
注意書きを付けます

00:48:52.900 --> 00:48:56.136 align:start position:21% line:-1
私の喜びを知ってもらいたいのです

00:48:56.236 --> 00:48:59.206 align:start position:34% line:-1
私が彼に送るのは―

00:49:01.809 --> 00:49:03.944 align:start position:34% line:-1
目が星の絵文字です

00:49:04.478 --> 00:49:07.781 align:start position:30% line:-2
ジェイムスが
喜んでくれると願います

00:49:08.682 --> 00:49:13.220 align:start position:30% line:-2
では最後を締めてくれる
カイルを呼びましょう

00:49:13.320 --> 00:49:13.854 align:start position:30% line:-1
ありがとうございました

00:49:13.954 --> 00:49:16.623 align:start position:43% line:-1
(拍手)

00:49:16.723 --> 00:49:17.724 align:start position:34% line:-1
ありがとう　クリス

00:49:20.027 --> 00:49:21.094 align:start position:41% line:-1
ありがとう

00:49:21.528 --> 00:49:22.563 align:start position:36% line:-1
すばらしいですね

00:49:22.663 --> 00:49:28.235 align:start position:27% line:-2
少しの作業でメモリ使用量を
大幅に削減できました

00:49:30.704 --> 00:49:35.809 align:start position:29% line:-2
まとめるとメモリとは
有限で共有物だということ

00:49:36.477 --> 00:49:39.079 align:start position:27% line:-1
個人が使えば他人は使えない

00:49:39.179 --> 00:49:43.851 align:start position:27% line:-2
メモリは必要な分だけを使う
心がけが必要です

00:49:46.553 --> 00:49:50.524 align:start position:18% line:-2
デバッグの際は
Xcodeのメモリレポートが重要です

00:49:50.624 --> 00:49:53.660 align:start position:30% line:-2
Appの実行時に
Xcodeも実行すれば

00:49:53.760 --> 00:49:57.631 align:start position:27% line:-2
デバッグで不具合に
気づくことができるでしょう

00:49:59.333 --> 00:50:03.637 align:start position:27% line:-2
iOSは画像フォーマットを
選択します

00:49:59.333 --> 00:50:03.637 align:start position:27% line:-2
iOSは画像フォーマットを
選択します

00:50:03.737 --> 00:50:07.474 align:start position:23% line:-2
SRGBからアルファ８で
75％のメモリを節約できたのは

00:50:07.574 --> 00:50:12.679 align:start position:7% line:-2
UIImageGraphicsRendererの
使用によるものです

00:50:12.780 --> 00:50:15.115 align:start position:27% line:-1
マスクやテキストに最適です

00:50:16.350 --> 00:50:20.821 align:start position:21% line:-2
画像をダウンサンプリングする際は
ImageIOを使用します

00:50:21.188 --> 00:50:23.857 align:start position:32% line:-1
メモリの急上昇を避け

00:50:23.957 --> 00:50:27.227 align:start position:34% line:-2
UIImageでの
描画よりも高速です

00:50:29.129 --> 00:50:33.801 align:start position:25% line:-2
画面上にない画像やリソースを
アンロードしたいのです

00:50:33.901 --> 00:50:37.204 align:start position:23% line:-2
ユーザが見えないもので
メモリを消費するのは無意味です

00:50:38.205 --> 00:50:41.341 align:start position:36% line:-2
これだけやっても
まだ足りません

00:50:41.942 --> 00:50:44.478 align:start position:29% line:-1
Memgraphの使用は

00:50:44.578 --> 00:50:48.549 align:start position:27% line:-2
メモリフットプリントの
削減と状況把握に役立ちます

00:50:48.649 --> 00:50:53.420 align:start position:11% line:-2
malloc historyとの組み合わせで
メモリの状態が把握できました

00:50:54.121 --> 00:50:57.858 align:start position:27% line:-2
従って
私が皆さんにお薦めするのは

00:50:57.958 --> 00:51:01.895 align:start position:20% line:-2
malloc historyを使い
ツールを分析することです

00:50:57.958 --> 00:51:01.895 align:start position:20% line:-2
malloc historyを使い
ツールを分析することです

00:51:03.497 --> 00:51:07.301 align:start position:23% line:-1
詳細はスライドをご参照ください

00:51:07.401 --> 00:51:08.602 align:start position:39% line:-1
そしてさらに

00:51:09.436 --> 00:51:14.408 align:start position:32% line:-2
質問がある方はこの後
ラボにお越しください

00:51:15.075 --> 00:51:17.511 align:start position:27% line:-2
WWDCへの
ご参加ありがとうございます

00:51:17.611 --> 00:51:22.349 align:start position:43% line:-1
(拍手)
