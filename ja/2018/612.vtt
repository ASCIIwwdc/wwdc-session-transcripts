WEBVTT

00:00:07.107 --> 00:00:16.483 align:start position:43% line:-1
(音楽)

00:00:20.721 --> 00:00:28.595 align:start position:43% line:-1
(拍手)

00:00:29.429 --> 00:00:31.665 align:start position:34% line:-1
おはようございます

00:00:31.932 --> 00:00:38.138 align:start position:21% line:-2
私はGPUソフトウェア
パフォーマンスチームのギエムです

00:00:38.839 --> 00:00:43.143 align:start position:30% line:-2
我々の使命は iOSで
ゲームデベロッパを―

00:00:43.243 --> 00:00:46.013 align:start position:34% line:-1
手助けすることです

00:00:46.380 --> 00:00:51.952 align:start position:27% line:-2
そこで 人気のゲームを調べ
共通する問題を探しました

00:00:52.386 --> 00:00:58.525 align:start position:27% line:-2
その膨大なデータの
解析結果をご説明しましょう

00:00:59.860 --> 00:01:03.997 align:start position:30% line:-2
本日のテーマは
“すごいゲームの開発”

00:00:59.860 --> 00:01:03.997 align:start position:30% line:-2
本日のテーマは
“すごいゲームの開発”

00:01:04.998 --> 00:01:09.703 align:start position:29% line:-2
ただし 技術的に
すごいという意味合いです

00:01:10.070 --> 00:01:15.242 align:start position:25% line:-2
始める前にCroteam社に
感謝したいと思います

00:01:15.342 --> 00:01:19.746 align:start position:11% line:-2
彼らが開発したゲーム
The Talos Principleを使い

00:01:19.847 --> 00:01:23.317 align:start position:36% line:-2
スライドやデモを
お見せします

00:01:23.417 --> 00:01:27.154 align:start position:30% line:-2
このゲームは
映像が美しいだけでなく

00:01:27.254 --> 00:01:31.491 align:start position:34% line:-2
パフォーマンスも
犠牲にしていません

00:01:32.159 --> 00:01:34.394 align:start position:34% line:-1
では本日の議題です

00:01:35.195 --> 00:01:38.665 align:start position:29% line:-1
まずツールから紹介します

00:01:38.866 --> 00:01:44.071 align:start position:29% line:-2
そのあとパフォーマンスの
問題を取り上げます

00:01:44.371 --> 00:01:50.410 align:start position:27% line:-2
フレームペーシングや
スレッド優先度など４点です

00:01:51.111 --> 00:01:56.450 align:start position:30% line:-2
これらは組み合わさって
悪影響が出るため

00:01:56.550 --> 00:01:58.485 align:start position:30% line:-1
まとめて対処しましょう

00:01:59.820 --> 00:02:01.421 align:start position:38% line:-1
ではツールから

00:01:59.820 --> 00:02:01.421 align:start position:38% line:-1
ではツールから

00:02:04.625 --> 00:02:09.696 align:start position:23% line:-2
大切なのは 早い段階で
頻繁にプロファイリングすること

00:02:10.597 --> 00:02:13.867 align:start position:23% line:-1
プロファイリングは欠かせません

00:02:13.967 --> 00:02:16.870 align:start position:25% line:-1
まずはツールの理解が重要です

00:02:17.504 --> 00:02:20.340 align:start position:32% line:-2
今日は２つのツールを
ご紹介します

00:02:21.008 --> 00:02:23.010 align:start position:23% line:-1
１つ目はInstruments

00:02:23.110 --> 00:02:25.078 align:start position:21% line:-1
メインのプロファイリングツールで

00:02:25.312 --> 00:02:30.684 align:start position:21% line:-2
パフォーマンスやレイテンシ
総合的なタイミングを確認できます

00:02:31.151 --> 00:02:33.921 align:start position:27% line:-2
２つ目は
Metalフレームデバッガ

00:02:34.021 --> 00:02:39.326 align:start position:21% line:-2
GPUの負荷をデバッグするための
非常に強力なツールです

00:02:40.661 --> 00:02:44.698 align:start position:29% line:-2
では どこから
始めればよいのでしょうか

00:02:45.132 --> 00:02:48.035 align:start position:27% line:-1
今回 我々は皆さんのために

00:02:48.135 --> 00:02:52.873 align:start position:12% line:-2
新しいInstrumentsテンプレートを
ご紹介します

00:02:53.040 --> 00:02:54.675 align:start position:21% line:-2
Game Performance
テンプレートです

00:02:55.275 --> 00:03:00.013 align:start position:21% line:-2
これはSystem Traceや
Time Profilerなどを

00:02:55.275 --> 00:03:00.013 align:start position:21% line:-2
これはSystem Traceや
Time Profilerなどを

00:03:00.581 --> 00:03:03.717 align:start position:32% line:-1
組み合わせたものです

00:03:03.951 --> 00:03:09.556 align:start position:27% line:-2
設定済みなので
CPUやGPUのデータを―

00:03:09.656 --> 00:03:10.924 align:start position:39% line:-1
記録できます

00:03:12.326 --> 00:03:15.295 align:start position:32% line:-1
では起動する方法です

00:03:15.762 --> 00:03:19.032 align:start position:18% line:-1
Instrumentsの中央を見ます

00:03:19.967 --> 00:03:23.937 align:start position:29% line:-2
他のテンプレートと同様に
設定が可能です

00:03:24.805 --> 00:03:30.844 align:start position:16% line:-2
Windowed Modeで実行すれば
好きなだけゲームをプレイでき

00:03:30.944 --> 00:03:33.881 align:start position:27% line:-1
最後の数秒だけ記録されます

00:03:34.114 --> 00:03:37.651 align:start position:27% line:-1
これが そのデータの例です

00:03:38.785 --> 00:03:42.823 align:start position:25% line:-1
簡単に全体を見ていきましょう

00:03:45.158 --> 00:03:47.928 align:start position:25% line:-2
System Traceと
Time Profilerは

00:03:48.028 --> 00:03:52.633 align:start position:27% line:-2
システムの負荷や
CPUの使用量を表示します

00:03:53.333 --> 00:03:58.972 align:start position:4% line:-2
例えば User Interactive Loadは
アクティブスレッドを全て記録

00:03:59.306 --> 00:04:02.543 align:start position:25% line:-1
この場合 オレンジ色の部分は

00:03:59.306 --> 00:04:02.543 align:start position:25% line:-1
この場合 オレンジ色の部分は

00:04:02.643 --> 00:04:08.348 align:start position:21% line:-2
動作可能なスレッドが
他にも存在することを示しています

00:04:08.982 --> 00:04:11.685 align:start position:32% line:-1
とても見やすいですね

00:04:12.719 --> 00:04:18.425 align:start position:21% line:-2
Instrumentsについて
さらに詳しくは別途ご確認ください

00:04:20.394 --> 00:04:24.798 align:start position:11% line:-1
次はMetal System Traceです

00:04:24.932 --> 00:04:27.734 align:start position:25% line:-2
Metalフレームワークから
ディスプレイまでの

00:04:28.135 --> 00:04:31.605 align:start position:30% line:-2
グラフィックスタックを
確認できます

00:04:32.573 --> 00:04:37.244 align:start position:30% line:-2
特にGPUの使用時間を
確認する場合は

00:04:37.344 --> 00:04:41.915 align:start position:18% line:-2
VertexやFragmentなどに
分かれます

00:04:42.749 --> 00:04:47.221 align:start position:30% line:-2
ディスプレイトラックも
最初に調べるべきです

00:04:47.554 --> 00:04:52.059 align:start position:30% line:-2
長いフレームや
スタッタリングを見つけ

00:04:52.159 --> 00:04:53.861 align:start position:32% line:-1
そこから始めましょう

00:04:56.563 --> 00:05:02.503 align:start position:27% line:-2
これは強力なツールで
多くの情報がありますから―

00:04:56.563 --> 00:05:02.503 align:start position:27% line:-2
これは強力なツールで
多くの情報がありますから―

00:05:03.303 --> 00:05:06.707 align:start position:34% line:-2
他にもセッションが
用意されています

00:05:08.141 --> 00:05:13.514 align:start position:18% line:-2
今年 新たにご紹介する
Thread Statesビューには

00:05:14.248 --> 00:05:21.121 align:start position:25% line:-2
ゲーム内の全スレッドの状態が
色別に示されています

00:05:21.321 --> 00:05:24.358 align:start position:30% line:-2
オレンジ色はスレッドの
プリエンプション

00:05:24.458 --> 00:05:26.660 align:start position:34% line:-1
赤色はブロックです

00:05:27.528 --> 00:05:31.598 align:start position:23% line:-1
我々が このビューを作ったのは

00:05:31.732 --> 00:05:36.203 align:start position:29% line:-2
現在のスレッドシステムが
複雑だからです

00:05:36.303 --> 00:05:38.572 align:start position:32% line:-1
ぜひ ご利用ください

00:05:40.240 --> 00:05:43.810 align:start position:34% line:-2
CPUコアごとの
トラックもあります

00:05:44.244 --> 00:05:46.547 align:start position:29% line:-1
コアで処理中のスレッドや

00:05:46.647 --> 00:05:50.551 align:start position:32% line:-2
スレッドの優先度が
カラーで表示されます

00:05:51.518 --> 00:05:55.923 align:start position:30% line:-2
これでシステムの状態が
よく分かりますね

00:05:56.924 --> 00:06:02.196 align:start position:30% line:-2
ツールの概要を
簡単に ご説明しました

00:05:56.924 --> 00:06:02.196 align:start position:30% line:-2
ツールの概要を
簡単に ご説明しました

00:06:02.296 --> 00:06:05.666 align:start position:32% line:-2
次はパフォーマンスの
問題についてです

00:06:06.033 --> 00:06:09.069 align:start position:29% line:-1
最初はフレームペーシング

00:06:10.170 --> 00:06:12.339 align:start position:29% line:-1
まずは映像をご覧ください

00:06:12.706 --> 00:06:18.846 align:start position:23% line:-2
これはSceneKitを使った
Fox 2のデモです

00:06:20.614 --> 00:06:24.418 align:start position:30% line:-2
レンダリングが速いのは
どちらでしょう？

00:06:27.287 --> 00:06:30.991 align:start position:32% line:-2
分からない人も
いるかもしれませんね

00:06:31.458 --> 00:06:35.762 align:start position:29% line:-2
左側は毎秒60フレームを
目指しましたが

00:06:35.963 --> 00:06:38.131 align:start position:27% line:-1
実際は毎秒40フレームです

00:06:38.232 --> 00:06:40.801 align:start position:29% line:-1
動きがカクついていますね

00:06:40.901 --> 00:06:45.239 align:start position:21% line:-1
一方 右側は毎秒30フレームです

00:06:45.339 --> 00:06:49.476 align:start position:34% line:-2
動きに一貫性があり
スムーズですね

00:06:50.878 --> 00:06:54.047 align:start position:32% line:-2
これは感覚の問題では
ありません

00:06:54.147 --> 00:06:59.653 align:start position:29% line:-2
レンダリングの速度が速く
映像がスムーズでないのは

00:07:00.387 --> 00:07:05.192 align:start position:29% line:-2
マイクロスタッタリングと
呼ばれる現象です

00:07:06.059 --> 00:07:10.931 align:start position:21% line:-2
ディスプレイのリフレッシュ間隔と
フレーム時間の差で発生します

00:07:11.298 --> 00:07:17.871 align:start position:25% line:-2
例えばゲームのレンダリングに
毎秒40フレームかかり

00:07:17.971 --> 00:07:23.477 align:start position:21% line:-2
ディスプレイが毎秒60フレームで
リフレッシュされるとします

00:07:23.577 --> 00:07:28.148 align:start position:27% line:-2
この場合 見た目の一貫性が
失われてしまいます

00:07:29.650 --> 00:07:35.355 align:start position:29% line:-2
これを解決するには
何をすればよいでしょう？

00:07:35.756 --> 00:07:40.828 align:start position:32% line:-2
実際には ほとんど
行うことはありません

00:07:41.728 --> 00:07:46.099 align:start position:30% line:-2
レンダリングのあと
ディスプレイリンクから

00:07:46.200 --> 00:07:51.305 align:start position:23% line:-2
次のdrawableを受け取り
すぐに表示します

00:07:51.405 --> 00:07:53.907 align:start position:25% line:-1
そして次のリフレッシュまで―

00:07:54.007 --> 00:07:58.345 align:start position:27% line:-2
drawableを表示して
おくよう命令します

00:07:58.445 --> 00:08:01.782 align:start position:27% line:-1
目標は毎秒60フレームです

00:07:58.445 --> 00:08:01.782 align:start position:27% line:-1
目標は毎秒60フレームです

00:08:03.350 --> 00:08:07.554 align:start position:29% line:-2
マイクロスタッタリングの
原因は他にもあります

00:08:08.689 --> 00:08:11.925 align:start position:36% line:-2
フレームレートを
低くはしていても

00:08:12.359 --> 00:08:18.799 align:start position:21% line:-2
usleepを使っているゲームが
数多くありました

00:08:19.333 --> 00:08:23.637 align:start position:29% line:-2
これはiOSでは
非常によくない習慣なので

00:08:23.804 --> 00:08:28.575 align:start position:32% line:-2
後ほど修正する方法を
お話ししましょう

00:08:29.376 --> 00:08:34.414 align:start position:29% line:-2
マイクロスタッタリングが
発生する時―

00:08:34.515 --> 00:08:38.519 align:start position:29% line:-2
システム内で
何が起きているのでしょう

00:08:39.052 --> 00:08:43.289 align:start position:30% line:-2
全てのコンポーネントの
タイムラインを見ます

00:08:43.957 --> 00:08:47.461 align:start position:29% line:-2
通常どおり
レンダリングを開始すると

00:08:47.728 --> 00:08:51.398 align:start position:36% line:-2
３つのバッファが
確認できます

00:08:51.498 --> 00:08:56.069 align:start position:29% line:-2
全てのdrawableは
文字と色で表されています

00:08:56.670 --> 00:08:58.805 align:start position:36% line:-1
前提を説明します

00:08:59.006 --> 00:09:01.074 align:start position:30% line:-1
Ｂのレンダリング時間は

00:08:59.006 --> 00:09:01.074 align:start position:30% line:-1
Ｂのレンダリング時間は

00:09:01.174 --> 00:09:04.144 align:start position:32% line:-2
ディスプレイの
リフレッシュ間隔より

00:09:04.244 --> 00:09:06.013 align:start position:36% line:-1
長くなっています

00:09:07.247 --> 00:09:10.751 align:start position:30% line:-2
Ｂのレンダリング時間は
25ミリ秒で

00:09:10.851 --> 00:09:14.488 align:start position:21% line:-2
ディスプレイのリフレッシュ間隔は
16.6ミリ秒

00:09:16.223 --> 00:09:22.062 align:start position:29% line:-2
こうなるとディスプレイは
レンダリングが終わるまで

00:09:22.162 --> 00:09:25.799 align:start position:30% line:-2
Ａを表示し続けなければ
なりません

00:09:26.733 --> 00:09:32.973 align:start position:25% line:-2
そうして待っている間に
Ｂのレンダリングが完了します

00:09:33.540 --> 00:09:35.809 align:start position:27% line:-1
表示する準備はできましたが

00:09:36.310 --> 00:09:39.346 align:start position:29% line:-1
ここで別の問題が起きます

00:09:39.613 --> 00:09:43.350 align:start position:27% line:-2
待っている間に
Ｃのレンダリングも終わり―

00:09:43.617 --> 00:09:45.719 align:start position:27% line:-1
表示の準備が完了したのです

00:09:46.687 --> 00:09:51.325 align:start position:29% line:-2
すると一貫性のない
フレームペーシングが発生

00:09:51.592 --> 00:09:55.863 align:start position:32% line:-2
これ以降のフレームは
一貫性がなくなり

00:09:56.263 --> 00:09:58.765 align:start position:29% line:-2
マイクロスタッタリングが
発生します

00:10:00.601 --> 00:10:05.806 align:start position:30% line:-2
これは いろいろな形で
実際に起こる現象です

00:10:06.006 --> 00:10:12.312 align:start position:11% line:-2
The Talos Principleを使い
デモをお見せします

00:10:12.446 --> 00:10:16.316 align:start position:29% line:-2
マイクロスタッタリングを
確認できるでしょうか

00:10:25.259 --> 00:10:30.297 align:start position:32% line:-2
今からお見せするのは
先ほどお話しした―

00:10:30.397 --> 00:10:33.767 align:start position:21% line:-2
Game Performance
テンプレートです

00:10:34.234 --> 00:10:37.805 align:start position:20% line:-1
左側にInstrumentsがあり

00:10:39.473 --> 00:10:42.209 align:start position:29% line:-1
中央にスレッドがあります

00:10:42.676 --> 00:10:46.780 align:start position:25% line:-2
ではマイクロスタッタリングを
探します

00:10:47.281 --> 00:10:50.417 align:start position:25% line:-1
ディスプレイトラックに注目し

00:10:50.517 --> 00:10:54.755 align:start position:30% line:-2
一貫性のないフレームを
見つけます

00:10:55.122 --> 00:10:57.524 align:start position:23% line:-1
ディスプレイトラックはここです

00:10:58.458 --> 00:11:05.532 align:start position:21% line:-2
このディスプレイトラックに
いくつかのヒントが隠されています

00:10:58.458 --> 00:11:05.532 align:start position:21% line:-2
このディスプレイトラックに
いくつかのヒントが隠されています

00:11:05.933 --> 00:11:09.303 align:start position:36% line:-2
このアイコンは
通常の時間よりも

00:11:09.403 --> 00:11:12.773 align:start position:25% line:-1
表示が長くなった時に現れます

00:11:13.106 --> 00:11:18.512 align:start position:29% line:-2
いい例を見つけたので
そこを拡大してみましょう

00:11:19.079 --> 00:11:24.484 align:start position:25% line:-2
optionキーを押したまま
ポインタをドラッグします

00:11:25.652 --> 00:11:28.856 align:start position:25% line:-1
ディスプレイトラックを見ると

00:11:29.223 --> 00:11:31.825 align:start position:29% line:-2
マイクロスタッタリングが
確認できますね

00:11:31.925 --> 00:11:35.929 align:start position:34% line:-2
表示のタイミングが
全て違います

00:11:36.396 --> 00:11:41.068 align:start position:20% line:-2
この場合は
50ミリ秒と33ミリ秒と16ミリ秒

00:11:41.401 --> 00:11:44.371 align:start position:25% line:-1
50ミリ秒のあと 33ミリ秒

00:11:44.471 --> 00:11:48.542 align:start position:32% line:-2
この繰り返しが
見られるということは

00:11:48.642 --> 00:11:51.311 align:start position:27% line:-1
マイクロスタッタリングです

00:11:51.778 --> 00:11:54.381 align:start position:32% line:-1
これを修正しましょう

00:11:58.051 --> 00:12:02.122 align:start position:30% line:-2
実際に起こり得る問題を
ご覧いただきました

00:11:58.051 --> 00:12:02.122 align:start position:30% line:-2
実際に起こり得る問題を
ご覧いただきました

00:12:02.389 --> 00:12:06.693 align:start position:29% line:-2
では どのように
修正すればよいのでしょう

00:12:07.861 --> 00:12:11.765 align:start position:32% line:-2
フレームレートを
調整するのが一番です

00:12:12.166 --> 00:12:17.004 align:start position:27% line:-2
フレーム持続時間の最小値を
APIを使って―

00:12:17.938 --> 00:12:20.841 align:start position:32% line:-2
レンダリング時間より
長く設定します

00:12:21.241 --> 00:12:24.444 align:start position:14% line:-2
例えばMTLDrawable
addPresentedHandlerは

00:12:24.545 --> 00:12:27.648 align:start position:27% line:-2
drawableが現れると
コールバックし

00:12:27.748 --> 00:12:31.185 align:start position:29% line:-2
マイクロスタッタリングを
認識できます

00:12:31.852 --> 00:12:35.722 align:start position:34% line:-2
他の２つのAPIは
実際に問題を解決し

00:12:35.823 --> 00:12:40.194 align:start position:32% line:-2
フレームペーシングを
コントロールします

00:12:40.394 --> 00:12:44.531 align:start position:29% line:-2
今回は下の２つのAPIを
利用します

00:12:45.132 --> 00:12:51.171 align:start position:27% line:-2
フレーム持続時間の最小値を
レンダリング時間より―

00:12:51.839 --> 00:12:54.508 align:start position:36% line:-2
長く設定すると
どうなるでしょう

00:12:55.976 --> 00:13:01.014 align:start position:27% line:-2
レンダリングを始めた時から
フレーム持続時間は

00:12:55.976 --> 00:13:01.014 align:start position:27% line:-2
レンダリングを始めた時から
フレーム持続時間は

00:13:01.114 --> 00:13:05.385 align:start position:30% line:-2
レンダリング時間より
一貫して長くなりました

00:13:05.719 --> 00:13:07.688 align:start position:34% line:-1
全てのフレームが―

00:13:08.655 --> 00:13:11.792 align:start position:32% line:-1
一貫性を保っています

00:13:12.192 --> 00:13:15.729 align:start position:27% line:-1
思わぬ副次的効果もあります

00:13:15.829 --> 00:13:18.966 align:start position:32% line:-2
フレームレートが
毎秒40フレームから

00:13:19.066 --> 00:13:24.004 align:start position:27% line:-2
毎秒30フレームになり
フレーム時間が伸びたのです

00:13:25.172 --> 00:13:31.645 align:start position:23% line:-2
どうすればフレームペーシングを
このように修正できるでしょうか

00:13:31.745 --> 00:13:35.682 align:start position:30% line:-2
必要なのは
わずか数行のコードです

00:13:36.049 --> 00:13:39.486 align:start position:30% line:-2
先ほどと同じパターンで
レンダリングを行い

00:13:39.586 --> 00:13:42.556 align:start position:21% line:-1
drawableを受け取りました

00:13:43.056 --> 00:13:48.161 align:start position:27% line:-2
先ほどと異なるのは
フレーム持続時間の最小値が

00:13:48.395 --> 00:13:51.331 align:start position:32% line:-1
設定されている点です

00:13:51.598 --> 00:13:52.799 align:start position:39% line:-1
それだけです

00:13:53.400 --> 00:13:58.272 align:start position:34% line:-2
これでフレームの
一貫性が保たれます

00:13:59.306 --> 00:14:02.376 align:start position:21% line:-1
しかし こんな疑問もあるでしょう

00:13:59.306 --> 00:14:02.376 align:start position:21% line:-1
しかし こんな疑問もあるでしょう

00:14:02.876 --> 00:14:05.112 align:start position:27% line:-1
“最大値はどうなるのか？”

00:14:05.612 --> 00:14:10.617 align:start position:29% line:-2
“作業の優先度については
どうするのか？”

00:14:11.185 --> 00:14:15.155 align:start position:34% line:-2
それが次の問題
スレッド優先度です

00:14:16.290 --> 00:14:19.226 align:start position:29% line:-1
まずは映像をご覧ください

00:14:19.526 --> 00:14:22.329 align:start position:29% line:-1
再びFox 2のデモです

00:14:23.530 --> 00:14:27.634 align:start position:25% line:-1
スタッタリングが起こる原因は

00:14:27.734 --> 00:14:31.705 align:start position:25% line:-1
数多く存在すると考えられます

00:14:32.072 --> 00:14:37.778 align:start position:29% line:-2
その中でも極めて基本的で
かつ一般的な原因は

00:14:38.946 --> 00:14:40.747 align:start position:34% line:-1
スレッドの遅延です

00:14:42.316 --> 00:14:46.954 align:start position:27% line:-2
作業の優先度が
うまく調整されていなければ

00:14:47.054 --> 00:14:49.356 align:start position:29% line:-1
予期せぬ遅延が発生します

00:14:50.090 --> 00:14:53.927 align:start position:30% line:-2
iOSは他にも
処理を行っているのです

00:14:54.928 --> 00:15:00.033 align:start position:23% line:-2
スレッド優先度はシステム全体の
安定性の保証に使われるため

00:14:54.928 --> 00:15:00.033 align:start position:23% line:-2
スレッド優先度はシステム全体の
安定性の保証に使われるため

00:15:00.667 --> 00:15:05.706 align:start position:27% line:-2
多くの作業を行うスレッドは
優先度が下がり

00:15:05.806 --> 00:15:07.808 align:start position:36% line:-1
他が実行されます

00:15:08.242 --> 00:15:10.811 align:start position:30% line:-1
これが優先度の低下です

00:15:11.912 --> 00:15:16.016 align:start position:23% line:-1
また 優先度の逆転も起こります

00:15:16.116 --> 00:15:20.387 align:start position:30% line:-2
これは非常に似た状況で
現れる別の問題です

00:15:20.521 --> 00:15:24.725 align:start position:30% line:-2
優先度の逆転は
レンダリングスレッドが

00:15:24.825 --> 00:15:30.964 align:start position:27% line:-2
優先度の低いスレッドに
依存している時に起こります

00:15:31.465 --> 00:15:34.768 align:start position:30% line:-2
先ほどのタイムラインで
確認しましょう

00:15:35.836 --> 00:15:40.407 align:start position:30% line:-2
まず毎秒30フレームで
レンダリングを開始

00:15:41.041 --> 00:15:44.044 align:start position:29% line:-2
ここでバックグラウンドの
処理が発生

00:15:44.678 --> 00:15:47.781 align:start position:32% line:-2
iOSは たくさんの
処理をします

00:15:48.715 --> 00:15:52.653 align:start position:32% line:-2
スレッドが正しく
設定されていない場合

00:15:53.453 --> 00:15:55.856 align:start position:21% line:-1
バックグラウンド作業と入れ替わり

00:15:55.956 --> 00:16:00.027 align:start position:27% line:-2
スケジューリングされていた
処理が終わりません

00:15:55.956 --> 00:16:00.027 align:start position:27% line:-2
スケジューリングされていた
処理が終わりません

00:16:01.061 --> 00:16:05.065 align:start position:27% line:-2
フレーム持続時間の最大値は
設定していないので

00:16:05.165 --> 00:16:08.268 align:start position:34% line:-2
何百ミリ秒も
表示される可能性も

00:16:08.735 --> 00:16:10.938 align:start position:27% line:-2
ユーザは
スタッタリングを認識します

00:16:12.673 --> 00:16:16.109 align:start position:30% line:-2
これは理論上の話ですが
現実でも―

00:16:16.276 --> 00:16:19.479 align:start position:30% line:-2
同様の問題が
さまざまな形で起きます

00:16:19.813 --> 00:16:25.085 align:start position:9% line:-2
The Talos Principleを使って
デモをお見せしましょう

00:16:25.252 --> 00:16:27.521 align:start position:30% line:-1
この問題を確認できます

00:16:38.065 --> 00:16:43.937 align:start position:9% line:-2
Game Performanceテンプレートを
再び表示しました

00:16:44.271 --> 00:16:48.408 align:start position:32% line:-2
注目したいフレームを
すでに拡大しています

00:16:48.509 --> 00:16:50.410 align:start position:32% line:-1
非常に長いフレームで

00:16:51.311 --> 00:16:54.014 align:start position:32% line:-1
233ミリ秒あります

00:16:54.114 --> 00:16:57.117 align:start position:30% line:-1
ここを見ていきましょう

00:16:58.652 --> 00:17:04.525 align:start position:21% line:-2
GPUが正常に動作していないのが
一目で分かります

00:16:58.652 --> 00:17:04.525 align:start position:21% line:-2
GPUが正常に動作していないのが
一目で分かります

00:17:04.992 --> 00:17:10.897 align:start position:30% line:-2
アイドル状態があって
あまりよくありませんね

00:17:12.232 --> 00:17:17.538 align:start position:27% line:-2
CPUを見ると このように
かなりのビジー状態で

00:17:17.704 --> 00:17:21.141 align:start position:30% line:-1
絶え間なく動いています

00:17:22.443 --> 00:17:28.214 align:start position:14% line:-2
しかし
Time Profilerビューを見ると

00:17:28.315 --> 00:17:30.651 align:start position:38% line:-1
動いていません

00:17:31.318 --> 00:17:36.323 align:start position:32% line:-2
なぜスタッタリングが
発生したのでしょう？

00:17:36.957 --> 00:17:42.829 align:start position:20% line:-2
Thread Statesビューに
切り替えます

00:17:43.397 --> 00:17:47.334 align:start position:21% line:-1
そのためにはアイコンをクリックし

00:17:47.768 --> 00:17:52.739 align:start position:18% line:-1
Track Displayを開きます

00:17:53.640 --> 00:17:56.043 align:start position:21% line:-1
Thread Statesを選択

00:17:57.678 --> 00:18:01.815 align:start position:27% line:-2
何か問題が起きていることが
分かります

00:17:57.678 --> 00:18:01.815 align:start position:27% line:-2
何か問題が起きていることが
分かります

00:18:02.349 --> 00:18:04.718 align:start position:32% line:-1
オレンジ色の箇所です

00:18:04.818 --> 00:18:09.957 align:start position:27% line:-2
スレッドは192ミリ秒間
プリエンプトされているので

00:18:10.524 --> 00:18:15.429 align:start position:29% line:-2
レンダリングスレッドが
その間 動作していません

00:18:16.230 --> 00:18:22.503 align:start position:25% line:-2
より詳細な情報が知りたいなら
下部を見れば分かります

00:18:23.837 --> 00:18:27.407 align:start position:29% line:-2
プリエンプトされた
スレッドをクリックすると

00:18:27.708 --> 00:18:31.478 align:start position:34% line:-2
何が起きているのか
ここに表示されます

00:18:31.578 --> 00:18:35.849 align:start position:27% line:-2
スレッド優先度26として
プリエンプトされたようです

00:18:35.949 --> 00:18:39.019 align:start position:29% line:-2
バックグラウンド処理より
順位が低く

00:18:39.486 --> 00:18:41.555 align:start position:14% line:-1
App Storeの更新が優先されました

00:18:42.089 --> 00:18:43.891 align:start position:36% line:-1
これでは困るので

00:18:43.991 --> 00:18:51.365 align:start position:23% line:-2
今はゲームのほうが重要なのだと
システムに伝える必要があります

00:18:51.765 --> 00:18:54.468 align:start position:27% line:-1
その方法をご説明しましょう

00:19:02.242 --> 00:19:05.779 align:start position:25% line:-2
一番いいのは
レンダリングスレッドを設定し

00:19:06.213 --> 00:19:10.384 align:start position:30% line:-2
スレッドの優先度を
45に固定することです

00:19:11.151 --> 00:19:16.190 align:start position:25% line:-2
iOSやmacOSの優先度は
値が大きいほうが上で

00:19:16.957 --> 00:19:21.728 align:start position:32% line:-2
優先度31は
４よりも高くなります

00:19:22.329 --> 00:19:26.200 align:start position:32% line:-2
また 優先度の低下を
避けるため

00:19:26.300 --> 00:19:30.671 align:start position:9% line:-2
スケジューラの
Quality of Serviceを止めます

00:19:31.738 --> 00:19:34.408 align:start position:32% line:-1
では見ていきましょう

00:19:36.043 --> 00:19:39.379 align:start position:27% line:-1
すでに設定は完了しています

00:19:39.880 --> 00:19:41.482 align:start position:34% line:-1
レンダリングを開始

00:19:42.616 --> 00:19:46.386 align:start position:29% line:-2
バックグラウンドの作業も
実行します

00:19:46.787 --> 00:19:51.191 align:start position:20% line:-1
内容はApp Storeの更新です

00:19:51.692 --> 00:19:56.864 align:start position:30% line:-2
それでもレンダリングは
正しく処理されています

00:19:57.130 --> 00:20:01.668 align:start position:29% line:-2
バックグラウンドの作業を
プリエンプトしているので

00:19:57.130 --> 00:20:01.668 align:start position:29% line:-2
バックグラウンドの作業を
プリエンプトしているので

00:20:02.536 --> 00:20:05.139 align:start position:27% line:-1
スタッタリングはありません

00:20:05.305 --> 00:20:09.076 align:start position:27% line:-2
ゲームは毎秒30フレームで
動いており

00:20:09.176 --> 00:20:11.578 align:start position:27% line:-1
負荷は膨大ですが大丈夫です

00:20:12.012 --> 00:20:14.982 align:start position:23% line:-1
まさに“技術的にすごい”ですね

00:20:15.182 --> 00:20:18.719 align:start position:36% line:-2
ではコードを
見ていきましょう

00:20:19.953 --> 00:20:24.124 align:start position:23% line:-1
必要なのは わずか数行だけです

00:20:24.725 --> 00:20:29.129 align:start position:20% line:-2
この場合は
pthread属性を設定したあとに

00:20:29.229 --> 00:20:31.532 align:start position:23% line:-1
pthreadを作成しています

00:20:32.166 --> 00:20:37.104 align:start position:12% line:-2
Quality of Serviceを止め
優先度を45にしています

00:20:38.005 --> 00:20:42.409 align:start position:23% line:-2
これで必要な
pthreadが作成できました

00:20:43.110 --> 00:20:45.479 align:start position:32% line:-2
シンプルで
技術的にすごいですね

00:20:47.181 --> 00:20:51.785 align:start position:34% line:-2
次の問題は
もう少し複雑ですよ

00:20:52.586 --> 00:20:55.055 align:start position:38% line:-1
温度の状態です

00:20:56.256 --> 00:21:01.395 align:start position:27% line:-2
持続可能なパフォーマンスの
ためのデザインには

00:20:56.256 --> 00:21:01.395 align:start position:27% line:-2
持続可能なパフォーマンスの
ためのデザインには

00:21:02.963 --> 00:21:05.165 align:start position:34% line:-1
温度管理が大切です

00:21:05.632 --> 00:21:07.468 align:start position:34% line:-1
これを考えましょう

00:21:08.836 --> 00:21:12.706 align:start position:32% line:-2
iOSデバイスは
非常にパワフルですが

00:21:12.806 --> 00:21:15.309 align:start position:36% line:-1
とても小さいです

00:21:15.642 --> 00:21:18.812 align:start position:30% line:-2
アプリケーションが
多くのリソースを使えば

00:21:19.012 --> 00:21:24.551 align:start position:29% line:-2
低温を維持するために
システムは対策を講じます

00:21:25.152 --> 00:21:29.690 align:start position:29% line:-2
また ユーザが
省電力モードを設定すれば

00:21:29.790 --> 00:21:32.526 align:start position:29% line:-1
同じような影響を与えます

00:21:34.561 --> 00:21:38.098 align:start position:30% line:-2
最善の方法は
システムの状態によって

00:21:38.198 --> 00:21:41.301 align:start position:29% line:-1
作業負荷を変えることです

00:21:42.202 --> 00:21:45.706 align:start position:30% line:-2
システムへの
負荷を調整するための―

00:21:45.873 --> 00:21:48.809 align:start position:32% line:-1
APIが多数あります

00:21:48.909 --> 00:21:52.646 align:start position:27% line:-2
NSProcessInfo
thermalStateは

00:21:52.746 --> 00:21:57.484 align:start position:30% line:-2
デバイスの温度状態が
変わった時に通知します

00:21:57.818 --> 00:22:02.523 align:start position:25% line:-2
同様に 省電力モードの状況も
チェックしましょう

00:21:57.818 --> 00:22:02.523 align:start position:25% line:-2
同様に 省電力モードの状況も
チェックしましょう

00:22:02.923 --> 00:22:08.161 align:start position:27% line:-2
一番下のAPIを使用すると
システムの負荷が

00:22:08.395 --> 00:22:12.733 align:start position:25% line:-2
GPU時間に
どう影響しているか分かります

00:22:14.468 --> 00:22:17.504 align:start position:27% line:-1
ではコードを見てみましょう

00:22:18.372 --> 00:22:20.707 align:start position:32% line:-1
これが最善の方法です

00:22:21.175 --> 00:22:24.745 align:start position:21% line:-1
switchステートメントがあり

00:22:24.845 --> 00:22:27.514 align:start position:32% line:-2
caseは温度状態に
対応しています

00:22:27.714 --> 00:22:31.018 align:start position:18% line:-1
内容は“nominal”“fair”

00:22:32.186 --> 00:22:34.788 align:start position:12% line:-1
“serious”“critical”です

00:22:37.458 --> 00:22:40.561 align:start position:30% line:-1
これで温度状態が分かり

00:22:40.661 --> 00:22:45.465 align:start position:29% line:-2
どう対処すればよいかも
コマンドが教えてくれます

00:22:45.999 --> 00:22:50.137 align:start position:32% line:-2
では 低温を保つには
どうすれば？

00:22:51.004 --> 00:22:54.508 align:start position:38% line:-2
いくつか方法を
提案できますが

00:22:54.608 --> 00:23:00.881 align:start position:25% line:-2
システムのために何を選ぶかは
ゲームデベロッパ次第です

00:22:54.608 --> 00:23:00.881 align:start position:25% line:-2
システムのために何を選ぶかは
ゲームデベロッパ次第です

00:23:01.215 --> 00:23:05.519 align:start position:30% line:-2
最高の状態を保つために
何が必要でしょうか

00:23:06.587 --> 00:23:10.657 align:start position:29% line:-2
ゲームを完遂できるような
フレームレートを

00:23:10.757 --> 00:23:13.160 align:start position:29% line:-1
目標にするとよいでしょう

00:23:13.694 --> 00:23:16.797 align:start position:27% line:-2
例えば
毎秒60フレームが無理なら

00:23:16.897 --> 00:23:20.534 align:start position:23% line:-1
毎秒30フレームを維持すること

00:23:21.435 --> 00:23:25.172 align:start position:32% line:-2
GPUの作業の調整も
非常に重要です

00:23:25.973 --> 00:23:30.177 align:start position:25% line:-2
中間レンダリングターゲットの
解像度を下げたり

00:23:30.811 --> 00:23:34.915 align:start position:34% line:-2
シャドウマップを
単純化したりします

00:23:35.015 --> 00:23:38.352 align:start position:23% line:-1
後処理を削除してもよいでしょう

00:23:38.585 --> 00:23:43.357 align:start position:29% line:-2
あなたのゲームにとって
最適な方法を選びましょう

00:23:44.925 --> 00:23:48.328 align:start position:27% line:-1
これは次の問題に関係します

00:23:49.096 --> 00:23:51.765 align:start position:30% line:-1
不要なGPUの処理です

00:23:51.932 --> 00:23:56.837 align:start position:30% line:-2
ここからは私の同僚
オハッドにお願いします

00:23:57.104 --> 00:24:00.507 align:start position:43% line:-1
(拍手)

00:23:57.104 --> 00:24:00.507 align:start position:43% line:-1
(拍手)

00:24:00.607 --> 00:24:01.642 align:start position:41% line:-1
ありがとう

00:24:04.878 --> 00:24:06.046 align:start position:41% line:-1
こんにちは

00:24:06.146 --> 00:24:10.150 align:start position:30% line:-2
私はゲーム技術チームの
オハッドです

00:24:10.751 --> 00:24:16.323 align:start position:27% line:-2
システムへの適合が大事だと
お分かりいただけましたね

00:24:17.191 --> 00:24:21.929 align:start position:23% line:-2
温度状態の変化や
省電力モードに対応するためには

00:24:22.262 --> 00:24:28.435 align:start position:30% line:-2
GPUの作業負荷を
調整する必要があります

00:24:29.303 --> 00:24:31.205 align:start position:29% line:-1
しかし多くのデベロッパは

00:24:31.305 --> 00:24:35.909 align:start position:21% line:-2
GPUは複雑な
ブラックボックスだと考えています

00:24:36.376 --> 00:24:38.779 align:start position:27% line:-1
今日は その中を解明します

00:24:40.447 --> 00:24:45.819 align:start position:23% line:-2
気付かずにGPU時間を
無駄にすることは よくあります

00:24:46.120 --> 00:24:51.458 align:start position:30% line:-2
技術的にすごいゲームは
GPUを有効に利用し

00:24:52.292 --> 00:24:57.564 align:start position:32% line:-2
適切な温度管理を行い
電力をセーブします

00:24:57.898 --> 00:25:02.002 align:start position:25% line:-2
その方法は
著名なゲームからも学べますが

00:24:57.898 --> 00:25:02.002 align:start position:25% line:-2
その方法は
著名なゲームからも学べますが

00:25:02.102 --> 00:25:07.274 align:start position:27% line:-2
今日はレンダリングについて
お話しします

00:25:08.075 --> 00:25:11.378 align:start position:23% line:-1
CPUの話でもお伝えしたように

00:25:11.745 --> 00:25:15.682 align:start position:25% line:-2
最良の方法は
GPUのプロファイリングです

00:25:17.284 --> 00:25:22.389 align:start position:30% line:-2
GPUには多くの性能が
隠されています

00:25:22.689 --> 00:25:28.662 align:start position:27% line:-2
作業時間を測定し
レンダリング技術を理解して

00:25:29.129 --> 00:25:33.500 align:start position:36% line:-2
ゲームを視覚的に
向上させましょう

00:25:34.268 --> 00:25:36.537 align:start position:30% line:-1
しかし どこが非効率で

00:25:37.070 --> 00:25:40.607 align:start position:32% line:-2
パイプラインのどこが
過剰なのでしょうか

00:25:40.707 --> 00:25:43.577 align:start position:30% line:-1
ここでツールに戻ります

00:25:44.878 --> 00:25:50.117 align:start position:11% line:-2
Instrumentsを開き
Metal System Traceを見ます

00:25:50.551 --> 00:25:56.290 align:start position:18% line:-2
VertexやFragmentなどの
処理完了のタイミングが分かります

00:25:57.324 --> 00:26:00.694 align:start position:23% line:-1
しかし これだけでは不十分です

00:25:57.324 --> 00:26:00.694 align:start position:23% line:-1
しかし これだけでは不十分です

00:26:00.961 --> 00:26:05.833 align:start position:30% line:-2
各パスが何をしているか
理解しましょう

00:26:06.967 --> 00:26:11.271 align:start position:25% line:-2
Metalフレームデバッガに
追加された新機能は

00:26:11.371 --> 00:26:13.006 align:start position:34% line:-1
依存関係グラフです

00:26:15.209 --> 00:26:19.079 align:start position:36% line:-2
１つのフレームに
関してのグラフで

00:26:20.114 --> 00:26:24.852 align:start position:36% line:-2
ノードとエッジで
構成されています

00:26:25.752 --> 00:26:29.756 align:start position:27% line:-2
エッジはパス間の依存関係を
表しています

00:26:29.857 --> 00:26:34.628 align:start position:29% line:-2
全体を見ると どのパスと
パイプラインが―

00:26:34.728 --> 00:26:37.998 align:start position:29% line:-2
フレームを形成しているか
分かります

00:26:38.966 --> 00:26:42.936 align:start position:32% line:-2
一方でノードは
１つのパスの情報です

00:26:44.304 --> 00:26:46.273 align:start position:38% line:-1
主な要素は３つ

00:26:46.573 --> 00:26:50.577 align:start position:30% line:-2
まずタイトルで
パスの名前が示されます

00:26:50.677 --> 00:26:53.947 align:start position:30% line:-1
名前は必ず付けましょう

00:26:54.047 --> 00:26:58.585 align:start position:34% line:-2
ツール全般において
名前は重要です

00:26:59.686 --> 00:27:04.224 align:start position:30% line:-2
今見ているパスの種類も
ここで分かります

00:26:59.686 --> 00:27:04.224 align:start position:30% line:-2
今見ているパスの種類も
ここで分かります

00:27:04.992 --> 00:27:10.264 align:start position:23% line:-2
転送パスや計算パスもありますが
これはレンダリングパスです

00:27:11.498 --> 00:27:16.103 align:start position:27% line:-2
次は このパスで処理された
作業状況の一覧

00:27:16.837 --> 00:27:22.843 align:start position:27% line:-2
最後は下部に表示される
パスのリソースのリストです

00:27:22.943 --> 00:27:27.581 align:start position:27% line:-2
ラベルや
作業内容を示すサムネールや

00:27:27.681 --> 00:27:32.119 align:start position:29% line:-2
それぞれのリソース情報を
示したリストです

00:27:33.086 --> 00:27:37.424 align:start position:34% line:-2
これらのおかげで
パスを理解できます

00:27:37.891 --> 00:27:43.764 align:start position:30% line:-2
グラフの説明をしたので
デモをお見せしましょう

00:27:52.973 --> 00:27:56.844 align:start position:21% line:-1
Fox 2のデモを見てみましょう

00:27:57.110 --> 00:28:01.248 align:start position:29% line:-2
このゲームに さまざまな
効果を追加します

00:27:57.110 --> 00:28:01.248 align:start position:29% line:-2
このゲームに さまざまな
効果を追加します

00:28:02.416 --> 00:28:05.519 align:start position:36% line:-2
シャドウマップや
ブルーム効果―

00:28:05.853 --> 00:28:11.959 align:start position:30% line:-2
被写界深度などを駆使し
美しい映像を描きます

00:28:12.559 --> 00:28:15.529 align:start position:29% line:-1
では依存関係ビューアです

00:28:15.963 --> 00:28:21.201 align:start position:9% line:-2
Xcodeを開き
Capture GPU frameボタンを押し

00:28:21.468 --> 00:28:23.570 align:start position:25% line:-1
MainPassを選択します

00:28:25.139 --> 00:28:25.806 align:start position:43% line:-1
(拍手)

00:28:25.906 --> 00:28:30.210 align:start position:25% line:-2
自動モードに変更すると
右側にアシスタントが現れます

00:28:30.310 --> 00:28:34.214 align:start position:32% line:-2
デバッグナビゲータで
選んだパスが

00:28:34.314 --> 00:28:38.418 align:start position:36% line:-2
メインビューで
表示されています

00:28:38.519 --> 00:28:43.724 align:start position:27% line:-2
これは双方向的で
グラフは相互に作用するので

00:28:43.824 --> 00:28:49.129 align:start position:30% line:-2
別のパスやテキスチャや
バッファを選ぶと

00:28:49.763 --> 00:28:54.835 align:start position:23% line:-2
左のナビゲータも
右のアシスタントも更新されます

00:28:55.335 --> 00:28:58.472 align:start position:29% line:-2
フレームの
すばらしい操作方法ですね

00:29:01.108 --> 00:29:05.045 align:start position:34% line:-2
ズームアウトすると
統計データが隠れ

00:29:05.145 --> 00:29:09.850 align:start position:27% line:-2
フォーカスが個別のパスから
フレーム全体へと移ります

00:29:10.217 --> 00:29:15.789 align:start position:27% line:-2
さらに縮小すると
フレーム全体が確認できます

00:29:17.324 --> 00:29:23.030 align:start position:29% line:-2
グラフの結びつきは
依存関係を示しているので

00:29:24.298 --> 00:29:27.801 align:start position:30% line:-2
それぞれの処理が
グループ化されています

00:29:28.435 --> 00:29:30.337 align:start position:38% line:-1
説明しましょう

00:29:30.437 --> 00:29:33.907 align:start position:25% line:-2
ここにシャドウマップ作成用の
ノードがあります

00:29:35.609 --> 00:29:40.647 align:start position:21% line:-2
影をレンダリングする３つのパスが
左側に見えます

00:29:41.148 --> 00:29:46.086 align:start position:32% line:-2
フレーム全体の様子が
分かるだけでなく

00:29:46.253 --> 00:29:49.523 align:start position:30% line:-2
２つのレイヤの間にある
階層も見えます

00:29:49.756 --> 00:29:53.093 align:start position:30% line:-2
レンダリング技術の
大切な要素の１つですが

00:29:53.327 --> 00:29:58.365 align:start position:25% line:-2
ゲームエンジンを使う際に
常に目立つものではありません

00:29:58.465 --> 00:30:02.102 align:start position:27% line:-2
例えば カスケードに
個別のパスが必要なことに―

00:29:58.465 --> 00:30:02.102 align:start position:27% line:-2
例えば カスケードに
個別のパスが必要なことに―

00:30:02.202 --> 00:30:05.072 align:start position:29% line:-1
気付かない場合もあります

00:30:05.572 --> 00:30:12.479 align:start position:23% line:-2
これら一つ一つについては考えず
グループとしてとらえます

00:30:13.447 --> 00:30:17.484 align:start position:25% line:-2
これにより
GPUの作業負荷を調整する時

00:30:17.584 --> 00:30:21.455 align:start position:25% line:-1
確かな情報を基に判断できます

00:30:22.923 --> 00:30:24.591 align:start position:27% line:-1
以上が依存関係ビューアです

00:30:24.858 --> 00:30:29.563 align:start position:32% line:-2
スライドに戻って
ギエムを呼びましょう

00:30:29.663 --> 00:30:30.564 align:start position:41% line:-1
ありがとう

00:30:30.664 --> 00:30:35.435 align:start position:43% line:-1
(拍手)

00:30:36.336 --> 00:30:39.406 align:start position:32% line:-2
ありがとう
すばらしいデモでした

00:30:44.077 --> 00:30:49.149 align:start position:29% line:-2
今 オハッドがご説明した
依存関係ビューアは

00:30:50.117 --> 00:30:54.288 align:start position:29% line:-2
GPUの作業負荷の調査に
適しています

00:30:54.721 --> 00:31:00.894 align:start position:27% line:-2
例えば このように小さく
シンプルなパイプラインから

00:30:54.721 --> 00:31:00.894 align:start position:27% line:-2
例えば このように小さく
シンプルなパイプラインから

00:31:01.695 --> 00:31:08.535 align:start position:23% line:-2
後処理などが必要な複雑なものに
変える場合がよくあります

00:31:09.736 --> 00:31:12.372 align:start position:30% line:-1
これらはオブジェクトに

00:31:12.473 --> 00:31:16.243 align:start position:27% line:-2
プロパティを追加することが
必要です

00:31:17.211 --> 00:31:20.948 align:start position:34% line:-2
コードの変更は
最小限で済みますが

00:31:21.248 --> 00:31:25.786 align:start position:30% line:-2
レンダリングの複雑さは
10倍単位で増えます

00:31:26.820 --> 00:31:31.859 align:start position:29% line:-2
そこで最初に
お話しした内容に戻ります

00:31:32.826 --> 00:31:33.994 align:start position:32% line:-1
プロファイリングです

00:31:34.394 --> 00:31:38.432 align:start position:23% line:-1
ゲームを理解することが大切です

00:31:39.366 --> 00:31:43.337 align:start position:25% line:-1
開発に時間をかけるだけでなく

00:31:43.437 --> 00:31:46.874 align:start position:21% line:-1
プロファイリングの時間も必要です

00:31:47.608 --> 00:31:52.146 align:start position:32% line:-2
今日お話しした問題は
数分で見つけられます

00:31:52.613 --> 00:31:55.949 align:start position:29% line:-1
探し回る必要はありません

00:31:56.083 --> 00:31:59.019 align:start position:32% line:-2
スタッタリングや
長いフレームを記録し

00:31:59.119 --> 00:32:01.488 align:start position:27% line:-1
そこから調整を始めるのです

00:31:59.119 --> 00:32:01.488 align:start position:27% line:-1
そこから調整を始めるのです

00:32:01.588 --> 00:32:02.923 align:start position:38% line:-1
簡単なことです

00:32:03.090 --> 00:32:07.094 align:start position:32% line:-2
問題を認識するための
情報を得るために

00:32:07.628 --> 00:32:09.429 align:start position:32% line:-1
ツールを使いましょう

00:32:10.597 --> 00:32:14.201 align:start position:25% line:-1
このことを忘れないでください

00:32:14.568 --> 00:32:19.206 align:start position:30% line:-2
さまざまな解決法と共に
見てきた問題は―

00:32:19.840 --> 00:32:23.143 align:start position:34% line:-2
プロファイリングで
発見できます

00:32:23.243 --> 00:32:29.083 align:start position:25% line:-2
我々も多くのゲームを解析して
問題を見つけたのです

00:32:29.917 --> 00:32:33.253 align:start position:38% line:-2
ソースコードに
アクセスしたら

00:32:33.654 --> 00:32:37.658 align:start position:23% line:-2
フレームペーシングと
スレッド優先度を設定しましょう

00:32:37.858 --> 00:32:39.927 align:start position:29% line:-1
コードは ほんの数行です

00:32:40.694 --> 00:32:44.665 align:start position:34% line:-2
そのうえで
温度を適切に管理し

00:32:44.765 --> 00:32:47.734 align:start position:21% line:-1
不要なGPUの処理を避けましょう

00:32:48.435 --> 00:32:51.572 align:start position:29% line:-1
これらを確実に実行すれば

00:32:52.039 --> 00:32:56.376 align:start position:30% line:-2
技術的にすごいゲームを
開発できます

00:32:57.344 --> 00:33:01.582 align:start position:32% line:-2
より詳細な情報は
ラボでご確認ください

00:32:57.344 --> 00:33:01.582 align:start position:32% line:-2
より詳細な情報は
ラボでご確認ください

00:33:01.682 --> 00:33:07.621 align:start position:34% line:-2
皆様からのご質問も
お待ちしております

00:33:07.955 --> 00:33:12.125 align:start position:25% line:-2
あなたのゲームの
プロファイリングも行いますよ

00:33:12.693 --> 00:33:19.299 align:start position:20% line:-2
Metalでのゲーム開発については
他にもセッションがあります

00:33:20.868 --> 00:33:25.072 align:start position:30% line:-2
ありがとうございました
よい一日を

00:33:25.272 --> 00:33:33.013 align:start position:43% line:-1
(拍手)
