WEBVTT

00:00:07.107 --> 00:00:16.283 align:start position:43% line:-1
(音楽)

00:00:22.422 --> 00:00:24.491 align:start position:34% line:-1
おはようございます

00:00:25.526 --> 00:00:29.196 align:start position:43% line:-1
(拍手)

00:00:29.296 --> 00:00:32.031 align:start position:30% line:-2
エンジニアの
マシュー･バディンです

00:00:32.432 --> 00:00:34.635 align:start position:21% line:-2
AccelerateとSIMDの
セッションへようこそ

00:00:36.870 --> 00:00:39.439 align:start position:38% line:-2
同僚のチャンと
私が担当します

00:00:39.840 --> 00:00:44.478 align:start position:21% line:-2
Accelerateが可能にする
APIについてお話しします

00:00:45.312 --> 00:00:50.651 align:start position:25% line:-2
まずはAccelerateの
ハイレベルな概要から始め

00:00:51.552 --> 00:00:54.555 align:start position:36% line:-2
ライブラリを
詳しく紹介します

00:00:55.489 --> 00:00:57.691 align:start position:32% line:-1
まずはvDSPの例を

00:00:58.592 --> 00:01:00.093 align:start position:38% line:-1
２つ紹介します

00:00:58.592 --> 00:01:00.093 align:start position:38% line:-1
２つ紹介します

00:01:00.928 --> 00:01:03.797 align:start position:36% line:-2
ノイズから信号を
取り出す方法

00:01:04.131 --> 00:01:08.302 align:start position:29% line:-2
画像のアーティファクトを
取り除く方法です

00:01:09.903 --> 00:01:11.505 align:start position:30% line:-1
次にSIMDへ目を向け

00:01:11.972 --> 00:01:15.843 align:start position:30% line:-2
四元数を用いた
三次元回転を紹介します

00:01:18.579 --> 00:01:21.248 align:start position:29% line:-1
その後 ルーク･チャンが

00:01:21.348 --> 00:01:24.418 align:start position:23% line:-1
Vimageの機能を紹介します

00:01:25.185 --> 00:01:27.354 align:start position:32% line:-1
では早速始めましょう

00:01:29.323 --> 00:01:31.458 align:start position:36% line:-1
まず最初の議題は

00:01:31.558 --> 00:01:33.293 align:start position:20% line:-1
“Accelerateとは何か？”

00:01:35.796 --> 00:01:41.034 align:start position:25% line:-2
Accelerateは大量の
プリミティブを提供します

00:01:41.368 --> 00:01:44.204 align:start position:32% line:-2
全プラットフォームが
対象です

00:01:44.771 --> 00:01:49.076 align:start position:20% line:-2
iOSやmacOS
watchOSやtvOSも含みます

00:01:51.445 --> 00:01:55.616 align:start position:27% line:-2
これらはマイクロ
アーキテクチャに組み込まれ

00:01:56.049 --> 00:01:58.418 align:start position:30% line:-1
快適な動作を実現します

00:01:59.853 --> 00:02:03.290 align:start position:38% line:-2
また省エネにも
役立っています

00:01:59.853 --> 00:02:03.290 align:start position:38% line:-2
また省エネにも
役立っています

00:02:04.491 --> 00:02:07.494 align:start position:30% line:-2
Accelerate
フレームワークを使えば

00:02:07.594 --> 00:02:11.331 align:start position:27% line:-2
アプリケーションは速くなり
バッテリーも長く持ちます

00:02:11.798 --> 00:02:14.601 align:start position:36% line:-2
ユーザの満足度も
上がるでしょう

00:02:18.338 --> 00:02:20.941 align:start position:32% line:-2
多くのプリミティブを
扱う場合

00:02:21.041 --> 00:02:25.779 align:start position:27% line:-2
各ドメインに
グループ分けすると便利です

00:02:26.947 --> 00:02:31.418 align:start position:29% line:-2
例えば信号処理された
プリミティブはvDSPへ

00:02:32.085 --> 00:02:35.589 align:start position:27% line:-2
例えばFFT
またはDFTとDCTですね

00:02:35.689 --> 00:02:38.826 align:start position:32% line:-2
高速フーリエ変換や
離散コサイン変換です

00:02:41.094 --> 00:02:43.964 align:start position:30% line:-2
画像処理の
プリミティブもあります

00:02:44.631 --> 00:02:47.267 align:start position:36% line:-2
色空間変換で使う
ライブラリです

00:02:49.570 --> 00:02:52.239 align:start position:34% line:-2
vForceは
ベクトル型超越関数

00:02:52.339 --> 00:02:54.208 align:start position:32% line:-1
サインやコサインです

00:02:56.543 --> 00:02:58.812 align:start position:30% line:-1
また高度の線型代数学と

00:02:59.813 --> 00:03:01.481 align:start position:36% line:-1
疎行列も可能です

00:02:59.813 --> 00:03:01.481 align:start position:36% line:-1
疎行列も可能です

00:03:02.983 --> 00:03:06.420 align:start position:29% line:-2
BNNSという
ニューラルネットワークは

00:03:06.520 --> 00:03:08.922 align:start position:30% line:-1
ライブラリで管理します

00:03:09.656 --> 00:03:12.059 align:start position:18% line:-1
Accelerateではありませんが

00:03:12.192 --> 00:03:14.928 align:start position:29% line:-1
関連の深いライブラリです

00:03:15.028 --> 00:03:16.930 align:start position:27% line:-1
SIMDもこれに含まれます

00:03:17.297 --> 00:03:19.499 align:start position:25% line:-1
CPU用のベクトル計画法です

00:03:20.400 --> 00:03:24.538 align:start position:27% line:-2
Compressionには
可逆圧縮機能があります

00:03:26.373 --> 00:03:29.610 align:start position:30% line:-2
まずはvDSPについて
説明します

00:03:31.345 --> 00:03:36.950 align:start position:27% line:-2
信号処理プリミティブを含む
最新のライブラリであり

00:03:37.618 --> 00:03:42.256 align:start position:32% line:-2
足し算や引き算などの
基本的な算術演算

00:03:42.956 --> 00:03:45.692 align:start position:32% line:-1
より複雑な演算の例は

00:03:46.160 --> 00:03:48.262 align:start position:27% line:-1
畳み込みやフーリエ変換です

00:03:49.363 --> 00:03:53.767 align:start position:23% line:-2
アプリケーション開発者にとって
フーリエ変換は厄介ですが

00:03:53.867 --> 00:03:56.069 align:start position:18% line:-1
Accelerateを使えば簡単です

00:03:56.203 --> 00:03:58.672 align:start position:32% line:-2
いくつかの
コード行を入れるだけ

00:03:59.139 --> 00:04:00.307 align:start position:39% line:-1
例があります

00:03:59.139 --> 00:04:00.307 align:start position:39% line:-1
例があります

00:04:00.707 --> 00:04:02.976 align:start position:34% line:-2
ノイズから
信号を取り出します

00:04:14.821 --> 00:04:16.589 align:start position:29% line:-1
これはオーディオ信号です

00:04:17.024 --> 00:04:19.892 align:start position:27% line:-1
まだノイズは加えていません

00:04:20.293 --> 00:04:22.296 align:start position:30% line:-1
下にスライダがあります

00:04:22.963 --> 00:04:25.132 align:start position:30% line:-1
左下でノイズを加えます

00:04:28.001 --> 00:04:28.969 align:start position:41% line:-1
入りました

00:04:30.437 --> 00:04:33.507 align:start position:32% line:-2
右下でノイズの除去が
可能です

00:04:34.541 --> 00:04:35.676 align:start position:39% line:-1
しきい値です

00:04:37.211 --> 00:04:39.613 align:start position:27% line:-1
右下にトグルスイッチがあり

00:04:40.914 --> 00:04:43.317 align:start position:27% line:-1
異なるドメインを表示します

00:04:43.417 --> 00:04:46.920 align:start position:30% line:-2
今はタイムドメインでの
表示ですが

00:04:47.020 --> 00:04:51.391 align:start position:32% line:-2
周波数ドメインで
信号を見てみましょう

00:04:53.060 --> 00:04:55.195 align:start position:32% line:-1
左側に山形があります

00:04:55.329 --> 00:04:57.497 align:start position:30% line:-1
これらが周波数成分です

00:04:59.900 --> 00:05:01.902 align:start position:34% line:-1
青の直線もあります

00:04:59.900 --> 00:05:01.902 align:start position:34% line:-1
青の直線もあります

00:05:02.503 --> 00:05:05.973 align:start position:38% line:-2
しきい値なので
動かしてみます

00:05:08.542 --> 00:05:12.112 align:start position:36% line:-2
これから信号に
ノイズを加えます

00:05:13.046 --> 00:05:14.915 align:start position:34% line:-1
もっと加えましょう

00:05:18.385 --> 00:05:21.288 align:start position:32% line:-1
私が注目しているのは

00:05:21.388 --> 00:05:23.423 align:start position:36% line:-1
左にある山形です

00:05:23.524 --> 00:05:27.160 align:start position:36% line:-2
一番高い
山形ともいえます

00:05:27.628 --> 00:05:31.098 align:start position:27% line:-1
加えたノイズは背景雑音です

00:05:31.298 --> 00:05:35.435 align:start position:32% line:-2
低い山形が
ほぼ均等に並びました

00:05:37.037 --> 00:05:39.473 align:start position:29% line:-1
ではノイズを取り除きます

00:05:39.573 --> 00:05:42.776 align:start position:36% line:-2
しきい値を
少しだけ上げます

00:05:44.077 --> 00:05:47.347 align:start position:27% line:-1
何が起きているのかというと

00:05:47.447 --> 00:05:52.519 align:start position:29% line:-2
しきい値よりも低い
周波数成分が削除されます

00:05:52.619 --> 00:05:57.191 align:start position:36% line:-2
青い直線よりも
低い山形があれば

00:05:57.391 --> 00:05:59.393 align:start position:32% line:-1
ノイズと認識されます

00:06:01.261 --> 00:06:02.863 align:start position:38% line:-1
さらに上げます

00:06:06.200 --> 00:06:08.001 align:start position:34% line:-1
ノイズが消えました

00:06:10.003 --> 00:06:13.941 align:start position:32% line:-2
タイムドメインでも
ノイズは消えています

00:06:14.041 --> 00:06:17.477 align:start position:29% line:-1
ここで しきい値を外すと

00:06:17.911 --> 00:06:21.415 align:start position:34% line:-2
元のノイズ入りの
信号が表示されます

00:06:22.716 --> 00:06:24.084 align:start position:34% line:-1
やり方を解説します

00:06:29.690 --> 00:06:33.560 align:start position:36% line:-2
最初にすることは
信号の解析です

00:06:33.760 --> 00:06:35.195 align:start position:34% line:-1
スイッチを使います

00:06:36.163 --> 00:06:40.968 align:start position:29% line:-2
それから周波数成分の
ノイズを見つけ除去します

00:06:41.869 --> 00:06:45.038 align:start position:30% line:-2
最後にオーディオ信号を
再構築します

00:06:45.372 --> 00:06:46.707 align:start position:38% line:-1
次はコードです

00:06:50.177 --> 00:06:54.147 align:start position:32% line:-2
使うのはDCT
離散コサイン変換です

00:06:55.415 --> 00:06:57.751 align:start position:21% line:-2
DCT CreateSetupが
見えますね

00:06:59.453 --> 00:07:05.259 align:start position:30% line:-2
コンテキストでタイプと
空き容量が分かります

00:06:59.453 --> 00:07:05.259 align:start position:30% line:-2
コンテキストでタイプと
空き容量が分かります

00:07:06.326 --> 00:07:08.729 align:start position:34% line:-2
今回はDCT
タイプ２を使います

00:07:10.497 --> 00:07:13.834 align:start position:29% line:-1
コンテキストを実行すると

00:07:16.870 --> 00:07:18.739 align:start position:36% line:-1
解析が行われます

00:07:21.408 --> 00:07:24.711 align:start position:27% line:-1
解析後はノイズを除去します

00:07:24.845 --> 00:07:26.680 align:start position:34% line:-1
ここがポイントです

00:07:27.748 --> 00:07:31.618 align:start position:32% line:-2
しきい値よりも
低い周波数成分を探し

00:07:32.219 --> 00:07:34.822 align:start position:32% line:-1
ゼロにしてしまいます

00:07:36.690 --> 00:07:39.193 align:start position:30% line:-2
最後は
オーディオ信号の再構築

00:07:43.330 --> 00:07:46.300 align:start position:18% line:-1
再びCreateSetupを使います

00:07:48.969 --> 00:07:53.407 align:start position:30% line:-2
今度はDCTタイプ３で
再構築を行います

00:07:57.044 --> 00:08:00.214 align:start position:29% line:-1
コンテキストを実行すると

00:07:57.044 --> 00:08:00.214 align:start position:29% line:-1
コンテキストを実行すると

00:08:00.314 --> 00:08:03.550 align:start position:36% line:-2
オーディオ信号が
再構築されます

00:08:05.619 --> 00:08:06.920 align:start position:41% line:-1
一例として

00:08:08.055 --> 00:08:12.626 align:start position:30% line:-2
オーディオ信号から
ノイズを取り除きました

00:08:13.160 --> 00:08:18.232 align:start position:27% line:-2
次に画像からノイズを
除去する方法をお見せします

00:08:20.868 --> 00:08:24.805 align:start position:36% line:-2
古い新聞の写真の
復元を試みます

00:08:32.044 --> 00:08:33.847 align:start position:38% line:-1
画像を取り込み

00:08:35.349 --> 00:08:38.150 align:start position:34% line:-2
白黒のスクリーンを
適用します

00:08:39.785 --> 00:08:41.822 align:start position:29% line:-1
古い新聞の写真と同じです

00:08:41.922 --> 00:08:45.025 align:start position:32% line:-2
これからスクリーンを
取り除きます

00:08:45.125 --> 00:08:47.761 align:start position:27% line:-1
アーティファクトの除去です

00:08:48.295 --> 00:08:50.797 align:start position:32% line:-1
今は何もしていません

00:08:51.732 --> 00:08:54.334 align:start position:29% line:-1
まずはサンプルを取り出し

00:08:54.468 --> 00:08:59.173 align:start position:34% line:-2
マスクを作成して
画像に適用させます

00:08:59.606 --> 00:09:01.341 align:start position:36% line:-1
やってみましょう

00:08:59.606 --> 00:09:01.341 align:start position:36% line:-1
やってみましょう

00:09:04.778 --> 00:09:10.050 align:start position:30% line:-2
今は周波数成分を
認識しているところです

00:09:10.384 --> 00:09:14.054 align:start position:34% line:-2
しきい値よりも高い
周波数成分を

00:09:15.088 --> 00:09:16.023 align:start position:41% line:-1
除去します

00:09:17.024 --> 00:09:18.792 align:start position:36% line:-1
しきい値が低いと

00:09:19.893 --> 00:09:24.198 align:start position:30% line:-2
アーティファクトに加え
画像も消えてしまいます

00:09:27.968 --> 00:09:29.469 align:start position:38% line:-1
次は高くします

00:09:32.239 --> 00:09:34.174 align:start position:36% line:-1
変化がありません

00:09:38.912 --> 00:09:40.280 align:start position:39% line:-1
中間にすると

00:09:40.981 --> 00:09:44.651 align:start position:30% line:-2
アーティファクトだけが
除去されます

00:09:44.952 --> 00:09:48.055 align:start position:32% line:-2
画像には
ダメージを与えません

00:09:48.689 --> 00:09:50.057 align:start position:41% line:-1
まとめます

00:09:55.262 --> 00:10:00.300 align:start position:27% line:-2
画像とサンプルに
高速フーリエ変換を施します

00:09:55.262 --> 00:10:00.300 align:start position:27% line:-2
画像とサンプルに
高速フーリエ変換を施します

00:10:01.168 --> 00:10:05.505 align:start position:27% line:-2
サンプルからマスクを作成し
画像に適用させ

00:10:07.341 --> 00:10:10.477 align:start position:36% line:-2
オリジナル画像を
再構築します

00:10:10.677 --> 00:10:12.446 align:start position:38% line:-1
次にコードです

00:10:14.948 --> 00:10:16.250 align:start position:36% line:-1
FFTを使います

00:10:18.418 --> 00:10:21.855 align:start position:32% line:-2
パワー２なので
ログ２を呼び出します

00:10:22.856 --> 00:10:25.626 align:start position:30% line:-2
画像のサイズは
1024×1024です

00:10:28.662 --> 00:10:32.399 align:start position:25% line:-2
これをfft2d zropに
落とします

00:10:32.900 --> 00:10:35.602 align:start position:30% line:-1
opは“置き違い”です

00:10:35.702 --> 00:10:39.072 align:start position:34% line:-2
このため仮の
スペースを作ります

00:10:41.542 --> 00:10:47.781 align:start position:29% line:-2
複雑な数列構造を２つの
列に分けて保管するのです

00:10:48.182 --> 00:10:51.618 align:start position:27% line:-1
実際の成分と架空の成分です

00:10:52.753 --> 00:10:54.621 align:start position:36% line:-1
方向も指示します

00:10:54.788 --> 00:10:56.723 align:start position:29% line:-1
今回はforwardです

00:11:01.695 --> 00:11:06.033 align:start position:30% line:-2
アーティファクト除去は
さらに複雑なので

00:11:06.133 --> 00:11:08.702 align:start position:29% line:-1
上級者向けにお話しします

00:11:09.069 --> 00:11:12.539 align:start position:30% line:-2
サンプルはオンラインで
取得できます

00:11:12.773 --> 00:11:18.545 align:start position:23% line:-2
vDSPの項目に工程を解説した
ドキュメントもあります

00:11:20.480 --> 00:11:26.520 align:start position:27% line:-2
まずサンプルの周波数成分の
大きさを割り出してから

00:11:27.921 --> 00:11:30.357 align:start position:29% line:-1
除去する成分も確認します

00:11:33.026 --> 00:11:35.562 align:start position:30% line:-1
そこからマスクを作成し

00:11:36.964 --> 00:11:39.833 align:start position:30% line:-1
元の画像に適用させます

00:11:41.101 --> 00:11:43.704 align:start position:29% line:-1
除去したい成分に０を掛け

00:11:43.837 --> 00:11:47.407 align:start position:27% line:-1
残したい成分に１を掛けます

00:11:52.312 --> 00:11:54.882 align:start position:25% line:-1
zropで画像を再構築します

00:11:54.982 --> 00:11:57.718 align:start position:30% line:-2
FFTはコンテキストを
再利用できます

00:12:01.321 --> 00:12:06.260 align:start position:30% line:-2
重要なのは２つの配列に
画像を保存すること

00:12:06.360 --> 00:12:07.928 align:start position:36% line:-1
それほど複雑です

00:12:08.028 --> 00:12:12.466 align:start position:30% line:-2
偶数画素は実際の列
奇数画素は架空の列です

00:12:15.068 --> 00:12:18.872 align:start position:30% line:-2
今回は逆高速
フーリエ変換を行います

00:12:19.873 --> 00:12:21.675 align:start position:36% line:-1
少し話を移します

00:12:21.975 --> 00:12:24.411 align:start position:30% line:-1
２つの例を見せましたね

00:12:26.046 --> 00:12:28.882 align:start position:27% line:-1
先にvDSPの活用例を見せ

00:12:29.283 --> 00:12:34.454 align:start position:32% line:-2
それらの作成方法を
あとから説明しました

00:12:34.555 --> 00:12:37.057 align:start position:30% line:-1
結果と説明が逆でしたね

00:12:37.858 --> 00:12:41.094 align:start position:36% line:-2
次は基本的な
成分から始めます

00:12:41.195 --> 00:12:43.030 align:start position:38% line:-1
結果は最後です

00:12:43.130 --> 00:12:44.898 align:start position:34% line:-1
今度はSIMDです

00:12:45.566 --> 00:12:49.970 align:start position:27% line:-2
低水準の基本的な
プリミティブを回転させます

00:12:50.070 --> 00:12:52.172 align:start position:34% line:-1
3D物体の回転です

00:12:54.575 --> 00:12:55.709 align:start position:36% line:-1
SIMDの特性は

00:12:57.110 --> 00:12:59.813 align:start position:30% line:-2
ベクトル処理ユニットの
抽象化です

00:13:00.514 --> 00:13:04.918 align:start position:29% line:-2
ベクトルおよびマトリクス
対象を宣言させ

00:13:05.385 --> 00:13:10.824 align:start position:30% line:-2
対象を編集可能にし
ハードウェアへ導きます

00:13:11.992 --> 00:13:13.627 align:start position:36% line:-1
コードを見せます

00:13:16.063 --> 00:13:20.200 align:start position:32% line:-2
２つの配列を使い
成分の平均を割り出し

00:13:20.534 --> 00:13:25.506 align:start position:30% line:-2
成分を繰り返し足しては
２で割っていくのです

00:13:27.574 --> 00:13:28.976 align:start position:38% line:-1
大変な作業です

00:13:31.078 --> 00:13:35.048 align:start position:25% line:-2
配列をSIMD float4
ベクトルタイプに

00:13:36.550 --> 00:13:41.788 align:start position:30% line:-2
宣言することで対象物の
計算が可能になります

00:13:43.023 --> 00:13:48.695 align:start position:29% line:-2
算出が滑らかになり
高速計算が可能となります

00:13:49.830 --> 00:13:52.132 align:start position:32% line:-2
全プラットフォームで
可能です

00:13:55.969 --> 00:13:58.172 align:start position:32% line:-1
他にも機能があります

00:13:58.839 --> 00:14:01.542 align:start position:34% line:-2
ベクトルおよび
マトリクス対象物の

00:13:58.839 --> 00:14:01.542 align:start position:34% line:-2
ベクトルおよび
マトリクス対象物の

00:14:02.709 --> 00:14:06.947 align:start position:30% line:-2
高度な計算を可能に
するだけではありません

00:14:08.749 --> 00:14:12.419 align:start position:34% line:-2
例えばドット積と
clamp関数です

00:14:14.188 --> 00:14:17.825 align:start position:30% line:-2
サイン コサインなどの
超越関数や

00:14:19.726 --> 00:14:21.161 align:start position:39% line:-1
四元数もです

00:14:21.562 --> 00:14:25.232 align:start position:34% line:-2
四元数は３次元での
回転に利用できます

00:14:25.332 --> 00:14:27.801 align:start position:32% line:-1
詳しく解説しましょう

00:14:29.870 --> 00:14:32.206 align:start position:29% line:-1
コードの例を見ていきます

00:14:33.674 --> 00:14:35.142 align:start position:39% line:-1
少し複雑です

00:14:35.843 --> 00:14:37.211 align:start position:39% line:-1
まずは右から

00:14:37.511 --> 00:14:40.013 align:start position:34% line:-2
グレーの
単位球面があります

00:14:40.280 --> 00:14:41.915 align:start position:34% line:-1
赤い点が見えますね

00:14:43.150 --> 00:14:44.985 align:start position:34% line:-1
ベクトルの先端です

00:14:46.019 --> 00:14:47.988 align:start position:23% line:-1
SIMD float3を宣言し

00:14:48.088 --> 00:14:51.892 align:start position:34% line:-2
ｘとｙを０に
ｚを１に設定します

00:14:52.059 --> 00:14:53.494 align:start position:32% line:-1
こちらに出てきますね

00:14:54.428 --> 00:14:57.297 align:start position:27% line:-1
赤い点はベクトルの先端です

00:14:58.932 --> 00:15:02.236 align:start position:30% line:-2
四元数を使って
ベクトルを回転させます

00:14:58.932 --> 00:15:02.236 align:start position:30% line:-2
四元数を使って
ベクトルを回転させます

00:15:03.670 --> 00:15:08.575 align:start position:29% line:-2
実際は全体を回しますが
ここではベクトルとします

00:15:10.010 --> 00:15:14.715 align:start position:32% line:-2
四元数を使うため
軸と角度を設定します

00:15:15.649 --> 00:15:19.286 align:start position:27% line:-2
何をどれだけ
回転させるかということです

00:15:20.154 --> 00:15:24.792 align:start position:29% line:-2
ｘを軸に３ラジアン分のπ
上昇させましょう

00:15:27.594 --> 00:15:30.364 align:start position:20% line:-1
act functionを呼び出し

00:15:31.899 --> 00:15:36.003 align:start position:32% line:-2
四元数を実行すると
ベクトルが回転します

00:15:37.137 --> 00:15:38.605 align:start position:39% line:-1
やってみます

00:15:47.147 --> 00:15:52.986 align:start position:27% line:-2
皆さんは複数の軸を使っての
回転に興味があるでしょう

00:15:54.521 --> 00:15:57.925 align:start position:34% line:-2
通常の回転
マトリクスと同様に

00:16:00.127 --> 00:16:03.063 align:start position:38% line:-2
掛け算を用いて
回転させます

00:16:03.163 --> 00:16:06.700 align:start position:34% line:-2
また掛け算は
可換ではありません

00:16:06.833 --> 00:16:11.038 align:start position:32% line:-2
演算対象を変更する際
位数も変えます

00:16:13.373 --> 00:16:16.643 align:start position:36% line:-2
３ラジアン分のπ
上方に動かし

00:16:17.144 --> 00:16:18.946 align:start position:32% line:-1
同様に右へ動かします

00:16:19.046 --> 00:16:21.281 align:start position:29% line:-1
これを１つの動きにします

00:16:26.854 --> 00:16:30.791 align:start position:32% line:-2
四元数でできることに
補間があります

00:16:30.891 --> 00:16:33.527 align:start position:30% line:-1
２つのタイプの補間です

00:16:34.828 --> 00:16:36.129 align:start position:36% line:-1
まずはSlerp

00:16:37.865 --> 00:16:40.100 align:start position:32% line:-1
球面線形補間のことで

00:16:42.035 --> 00:16:43.770 align:start position:34% line:-1
異体が２つあります

00:16:47.174 --> 00:16:52.646 align:start position:21% line:-2
simd slerpは最短の弧で
青と緑を結んだもの

00:16:53.747 --> 00:16:58.452 align:start position:16% line:-2
simd slerp longestは
最長で背面に回っています

00:17:07.127 --> 00:17:08.896 align:start position:34% line:-1
次はSplineで

00:17:09.762 --> 00:17:13.000 align:start position:32% line:-2
複数の回転を行うのに
便利です

00:17:13.099 --> 00:17:17.371 align:start position:36% line:-2
では複数の回転の
配列を補間します

00:17:17.971 --> 00:17:21.842 align:start position:27% line:-2
Splineのコードだけに
注目してください

00:17:24.645 --> 00:17:29.650 align:start position:27% line:-2
個々の回転を反復して
Splineに適用させます

00:17:34.421 --> 00:17:40.094 align:start position:30% line:-2
従って補間したい２つの
回転だけではなく

00:17:40.194 --> 00:17:42.496 align:start position:32% line:-1
前後の回転を含めます

00:17:44.498 --> 00:17:45.933 align:start position:39% line:-1
こうなります

00:17:51.939 --> 00:17:57.678 align:start position:29% line:-2
ゲーム開発者であれば
対象物を回転させたいはず

00:17:57.911 --> 00:17:59.146 align:start position:38% line:-1
それも可能です

00:17:59.279 --> 00:18:02.983 align:start position:36% line:-2
複数のベクトルで
表された立方体が

00:17:59.279 --> 00:18:02.983 align:start position:36% line:-2
複数のベクトルで
表された立方体が

00:18:03.083 --> 00:18:05.252 align:start position:32% line:-1
８種の回転を行います

00:18:05.485 --> 00:18:10.257 align:start position:20% line:-2
左はSlerpを右はSplineを
使ったものです

00:18:10.357 --> 00:18:12.159 align:start position:32% line:-1
まずはSlerpから

00:18:19.800 --> 00:18:25.005 align:start position:32% line:-2
線形補間のため
動きが角ばっています

00:18:25.239 --> 00:18:26.874 align:start position:32% line:-1
次はSplineです

00:18:35.082 --> 00:18:39.520 align:start position:34% line:-2
前後の回転も認識し
なめらかな動きです

00:18:39.620 --> 00:18:40.821 align:start position:39% line:-1
ではもう一度

00:18:52.666 --> 00:18:54.701 align:start position:34% line:-1
少し駆け足でしたが

00:18:55.502 --> 00:18:56.737 align:start position:39% line:-1
振り返ります

00:18:58.272 --> 00:19:01.575 align:start position:34% line:-2
最初にvDSPの
２つの例を見ました

00:18:58.272 --> 00:19:01.575 align:start position:34% line:-2
最初にvDSPの
２つの例を見ました

00:19:01.675 --> 00:19:03.944 align:start position:29% line:-1
ノイズから信号を取り出し

00:19:04.545 --> 00:19:07.881 align:start position:27% line:-2
画像からアーティファクトを
除去しました

00:19:08.916 --> 00:19:14.288 align:start position:27% line:-2
次にSIMDで四元数を用い
３次元での回転を見せました

00:19:15.289 --> 00:19:18.025 align:start position:32% line:-2
次はルーク･チャンが
担当します

00:19:18.158 --> 00:19:20.727 align:start position:21% line:-1
Vimageの活用法についてです

00:19:21.462 --> 00:19:26.600 align:start position:43% line:-1
(拍手)

00:19:26.700 --> 00:19:27.701 align:start position:41% line:-1
ありがとう

00:19:30.170 --> 00:19:32.372 align:start position:34% line:-1
私はルーク･チャン

00:19:32.473 --> 00:19:34.775 align:start position:14% line:-2
Vector and Numericsの
エンジニアです

00:19:35.142 --> 00:19:38.946 align:start position:21% line:-2
今回は
Vimageについてお話しします

00:19:39.046 --> 00:19:41.882 align:start position:29% line:-1
機能と利便性についてです

00:19:42.349 --> 00:19:47.221 align:start position:27% line:-2
わずかなコード行で
動画にエフェクトを入れます

00:19:47.421 --> 00:19:48.522 align:start position:39% line:-1
始めましょう

00:19:50.791 --> 00:19:53.694 align:start position:30% line:-2
Vimageは
画像処理ライブラリです

00:19:54.528 --> 00:19:59.566 align:start position:30% line:-2
いくつかある機能の内の
１つは転換機能です

00:20:00.100 --> 00:20:05.672 align:start position:27% line:-2
フォーマットの異なる画像を
転換することができます

00:20:06.373 --> 00:20:10.043 align:start position:30% line:-2
フォーマットには
それぞれ利点があります

00:20:10.144 --> 00:20:14.815 align:start position:30% line:-2
RGBはディスプレイの
画素と相性がよく

00:20:14.915 --> 00:20:16.550 align:start position:34% line:-1
背景画面に最適です

00:20:17.084 --> 00:20:20.087 align:start position:27% line:-1
一方でYCbCrもあります

00:20:20.654 --> 00:20:23.724 align:start position:27% line:-1
人の視覚に近いのが特徴です

00:20:23.957 --> 00:20:27.995 align:start position:36% line:-2
明るさを認識する
輝度チャネル

00:20:28.495 --> 00:20:31.231 align:start position:32% line:-2
色を認識する
クロミナンスチャネル

00:20:32.065 --> 00:20:36.403 align:start position:27% line:-2
カメラは
YCbCrを使っていますね

00:20:37.438 --> 00:20:41.942 align:start position:27% line:-2
転換機能でフォーマット間を
移動可能にします

00:20:43.677 --> 00:20:45.913 align:start position:36% line:-1
次に形状機能です

00:20:46.880 --> 00:20:51.718 align:start position:27% line:-2
画像のサイズや
位置の変更が可能になります

00:20:52.152 --> 00:20:57.024 align:start position:23% line:-2
vImageScaleを使って
画像の拡大縮小ができます

00:20:57.391 --> 00:21:02.996 align:start position:27% line:-2
ランチョス法アルゴリズムで
高品質な仕上がりです

00:20:57.391 --> 00:21:02.996 align:start position:27% line:-2
ランチョス法アルゴリズムで
高品質な仕上がりです

00:21:03.797 --> 00:21:09.136 align:start position:25% line:-2
vImageRotateでは
画像の回転が可能です

00:21:11.171 --> 00:21:13.407 align:start position:32% line:-1
次に畳み込み機能です

00:21:13.974 --> 00:21:18.312 align:start position:30% line:-2
この機能の一番の特徴は
ぼかし効果です

00:21:18.745 --> 00:21:23.417 align:start position:27% line:-2
UIや写真では
よく見られるエフェクトです

00:21:23.650 --> 00:21:29.256 align:start position:27% line:-2
何かを背景へぼかしたい際に
このエフェクトを使います

00:21:31.024 --> 00:21:33.160 align:start position:34% line:-1
そして変換機能です

00:21:33.727 --> 00:21:37.130 align:start position:34% line:-2
基本的には
行列の乗法のことで

00:21:37.397 --> 00:21:40.901 align:start position:29% line:-2
各画素のデータチャネルに
対応します

00:21:41.168 --> 00:21:44.271 align:start position:38% line:-2
例えば赤や緑を
強くしたい場合

00:21:44.371 --> 00:21:46.874 align:start position:32% line:-1
変換機能が役立ちます

00:21:48.709 --> 00:21:49.776 align:start position:43% line:-1
形態機能

00:21:50.377 --> 00:21:55.682 align:start position:29% line:-2
この機能で対象物の
サイズや形を変更できます

00:21:55.782 --> 00:21:57.151 align:start position:38% line:-1
対象物のみです

00:21:57.818 --> 00:21:59.620 align:start position:29% line:-1
vImageErodeと

00:22:00.154 --> 00:22:04.324 align:start position:27% line:-2
vImageDilateで
拡大縮小ができます

00:22:04.825 --> 00:22:06.827 align:start position:36% line:-1
冒険をしたければ

00:22:06.927 --> 00:22:11.231 align:start position:32% line:-2
カーネルの形を
各機能に反映させます

00:22:11.398 --> 00:22:16.437 align:start position:21% line:-2
するとErodeとDilateは
対象物の拡大縮小を

00:22:16.537 --> 00:22:18.705 align:start position:30% line:-1
カーネルを元に行います

00:22:20.307 --> 00:22:22.576 align:start position:30% line:-1
これらが５つの機能です

00:22:22.676 --> 00:22:26.980 align:start position:30% line:-2
これからVimageの
デモアプリケーションで

00:22:27.080 --> 00:22:30.150 align:start position:30% line:-1
エフェクトを紹介します

00:22:33.754 --> 00:22:38.158 align:start position:29% line:-2
これは端末の
背面カメラで映した映像で

00:22:38.826 --> 00:22:41.762 align:start position:27% line:-1
スクリーンに投影させました

00:22:42.362 --> 00:22:46.133 align:start position:36% line:-2
リアルタイムの
ライブ映像なので

00:22:46.233 --> 00:22:49.970 align:start position:32% line:-2
バラの横で水飲み鳥が
動いていますね

00:22:50.571 --> 00:22:54.675 align:start position:30% line:-2
まずはサチュレーション
エフェクトです

00:22:54.775 --> 00:22:59.613 align:start position:29% line:-2
これは他社の画像編集
ソフトでもよく見られます

00:23:00.047 --> 00:23:02.483 align:start position:30% line:-1
色を鮮やかにしましょう

00:23:02.583 --> 00:23:06.687 align:start position:38% line:-2
このスライダを
右へ動かします

00:23:08.956 --> 00:23:12.159 align:start position:27% line:-1
赤はより赤く 緑はより緑に

00:23:13.560 --> 00:23:16.964 align:start position:34% line:-2
また左側に
白いバラがあります

00:23:17.264 --> 00:23:21.435 align:start position:29% line:-2
この色は
あまり面白味がありません

00:23:21.535 --> 00:23:24.605 align:start position:34% line:-2
この映像で
注目してほしいのは

00:23:24.738 --> 00:23:28.375 align:start position:27% line:-1
構図と色のコントラストです

00:23:28.942 --> 00:23:31.778 align:start position:34% line:-1
左へスライドさせて

00:23:32.179 --> 00:23:34.147 align:start position:38% line:-1
彩度を下げます

00:23:36.049 --> 00:23:39.720 align:start position:32% line:-2
映像が白黒になるまで
スライドさせると

00:23:40.087 --> 00:23:43.023 align:start position:29% line:-1
色は もう気になりません

00:23:43.123 --> 00:23:47.127 align:start position:30% line:-2
構図とコントラストのみ
注目されます

00:23:48.161 --> 00:23:51.498 align:start position:29% line:-1
では やり方を解説します

00:23:55.969 --> 00:23:57.771 align:start position:30% line:-1
いくつかステップがあり

00:23:57.871 --> 00:24:01.842 align:start position:36% line:-2
まずはカメラで
画像を撮影します

00:23:57.871 --> 00:24:01.842 align:start position:36% line:-2
まずはカメラで
画像を撮影します

00:24:03.677 --> 00:24:08.448 align:start position:25% line:-2
次にVimageを使うための
準備として

00:24:08.549 --> 00:24:12.352 align:start position:27% line:-1
出入力バッファを用意します

00:24:13.687 --> 00:24:17.558 align:start position:32% line:-2
Vimageの機能で
エフェクトをかけ

00:24:18.859 --> 00:24:21.495 align:start position:30% line:-1
スクリーンに出力します

00:24:22.596 --> 00:24:28.268 align:start position:27% line:-2
先にVimageを使った
エフェクトの話をしましょう

00:24:30.704 --> 00:24:33.106 align:start position:36% line:-2
サチュレーション
エフェクトは

00:24:33.207 --> 00:24:36.910 align:start position:29% line:-1
こちらの方程式を使います

00:24:37.344 --> 00:24:40.347 align:start position:30% line:-2
基本的には
画素からバイアスを外し

00:24:40.781 --> 00:24:44.985 align:start position:32% line:-2
掛け算を使って
エフェクトをかけます

00:24:45.519 --> 00:24:48.655 align:start position:29% line:-1
そしてバイアスを戻します

00:24:49.656 --> 00:24:53.293 align:start position:32% line:-2
Vimageは
この作業を行うのです

00:24:53.627 --> 00:24:56.296 align:start position:12% line:-2
vImageMatrixMultiplyと
いいます

00:24:58.332 --> 00:25:01.168 align:start position:30% line:-2
まずは
プリバイアスを取り出し

00:24:58.332 --> 00:25:01.168 align:start position:30% line:-2
まずは
プリバイアスを取り出し

00:25:01.268 --> 00:25:05.072 align:start position:29% line:-2
例では-128ですが
これでバイアスを除きます

00:25:06.140 --> 00:25:11.278 align:start position:29% line:-2
彩度は点が浮いていますが
画像は整数値です

00:25:11.712 --> 00:25:16.150 align:start position:30% line:-2
彩度の値を定点に
変換する必要があります

00:25:16.283 --> 00:25:21.622 align:start position:27% line:-2
Q12を定点とすると
除数は0×100となります

00:25:22.756 --> 00:25:28.095 align:start position:29% line:-2
ポストバイアス×除数で
バイアスを画素に戻します

00:25:30.397 --> 00:25:32.933 align:start position:29% line:-1
マトリクスはシンプルです

00:25:33.033 --> 00:25:37.337 align:start position:34% line:-2
CbCrチャネルを
スケーリングします

00:25:37.438 --> 00:25:44.311 align:start position:27% line:-2
マトリクスはスケーラーで
CbCrチャネルを掛けます

00:25:45.512 --> 00:25:49.449 align:start position:12% line:-2
vImageMatrixMultiplyを
呼び出すと

00:25:49.883 --> 00:25:55.656 align:start position:29% line:-2
１つの配列と１つの機能で
エフェクトがかけられます

00:25:57.157 --> 00:26:00.094 align:start position:30% line:-1
ではステップに戻ります

00:25:57.157 --> 00:26:00.094 align:start position:30% line:-1
ではステップに戻ります

00:26:01.128 --> 00:26:05.065 align:start position:34% line:-2
カメラから
画像を取り出すには

00:26:06.467 --> 00:26:08.235 align:start position:32% line:-1
デリゲートを使います

00:26:08.902 --> 00:26:12.573 align:start position:29% line:-2
カメラから
CV画像バッファを取得し

00:26:13.340 --> 00:26:15.109 align:start position:30% line:-1
バッファを手に入れます

00:26:15.843 --> 00:26:19.813 align:start position:34% line:-2
CPUでアクセスが
可能か確認します

00:26:19.913 --> 00:26:21.548 align:start position:25% line:-1
そこにVimageがあります

00:26:22.149 --> 00:26:26.286 align:start position:34% line:-2
どんなエフェクトを
かけたあとも

00:26:26.386 --> 00:26:30.324 align:start position:27% line:-2
バッファのベースアドレスを
アンロックします

00:26:30.757 --> 00:26:33.727 align:start position:38% line:-2
これでメモリを
再利用できます

00:26:36.763 --> 00:26:41.068 align:start position:27% line:-2
次のステップでは
出入力バッファを準備します

00:26:43.504 --> 00:26:46.573 align:start position:27% line:-1
CV画像バッファがあるので

00:26:46.673 --> 00:26:49.409 align:start position:30% line:-1
情報を取得するだけです

00:26:49.510 --> 00:26:52.079 align:start position:32% line:-1
高さや長さなどですね

00:26:53.280 --> 00:26:57.084 align:start position:34% line:-2
これをVimage
バッファ対象とし

00:26:57.217 --> 00:26:59.720 align:start position:30% line:-1
ライブラリで使用します

00:26:59.820 --> 00:27:02.389 align:start position:34% line:-2
輝度とクロミナンス
チャネルのためです

00:26:59.820 --> 00:27:02.389 align:start position:34% line:-2
輝度とクロミナンス
チャネルのためです

00:27:03.490 --> 00:27:05.893 align:start position:32% line:-2
そして出力バッファを
用意します

00:27:06.493 --> 00:27:11.098 align:start position:29% line:-2
メモリは まだ出力画像に
配置されていません

00:27:11.198 --> 00:27:14.902 align:start position:32% line:-2
Vimageには
便利な機能があります

00:27:15.002 --> 00:27:17.604 align:start position:21% line:-1
正確にはVimageバッファです

00:27:18.672 --> 00:27:23.377 align:start position:27% line:-2
高さと長さ
１画素のビット数を与えると

00:27:23.911 --> 00:27:27.881 align:start position:34% line:-2
画像の保存に十分な
メモリを配置します

00:27:27.981 --> 00:27:30.517 align:start position:38% line:-2
さらにバッファ
対象物を作成し

00:27:30.617 --> 00:27:33.620 align:start position:32% line:-2
ライブラリ内での
使用が可能になります

00:27:35.689 --> 00:27:40.394 align:start position:27% line:-2
最後のステップで
画像をスクリーンに移します

00:27:43.430 --> 00:27:44.865 align:start position:30% line:-1
すでにお話ししましたが

00:27:45.699 --> 00:27:48.001 align:start position:30% line:-2
RGBは
ディスプレイに最適です

00:27:48.101 --> 00:27:50.170 align:start position:32% line:-1
では転換機能を使って

00:27:50.270 --> 00:27:54.241 align:start position:32% line:-2
YCbCr画像を
RGB画像に変えます

00:27:54.341 --> 00:27:58.579 align:start position:25% line:-2
UIはCGImage対象物に
対応するので

00:27:58.679 --> 00:28:00.180 align:start position:38% line:-1
新しく作ります

00:27:58.679 --> 00:28:00.180 align:start position:38% line:-1
新しく作ります

00:28:01.482 --> 00:28:03.150 align:start position:32% line:-1
Vimageの機能で

00:28:03.250 --> 00:28:06.920 align:start position:18% line:-1
CGImageCreateがあります

00:28:08.021 --> 00:28:12.893 align:start position:27% line:-2
Vimageバッファから
CGImageを作成します

00:28:13.794 --> 00:28:15.229 align:start position:38% line:-1
特筆すべき点は

00:28:15.329 --> 00:28:21.068 align:start position:27% line:-2
大きなデータバッファを
コピーしていないということ

00:28:21.201 --> 00:28:24.271 align:start position:27% line:-1
CGImageを単に作成し

00:28:24.371 --> 00:28:27.574 align:start position:34% line:-2
画像バッファの
容量を足しています

00:28:28.108 --> 00:28:33.514 align:start position:21% line:-2
必要な情報を提供し
CGImageを作成しているので

00:28:33.614 --> 00:28:35.716 align:start position:36% line:-1
コピーは不要です

00:28:37.117 --> 00:28:41.989 align:start position:29% line:-2
作成したCGImageを
イメージビューに送ると

00:28:42.422 --> 00:28:44.758 align:start position:29% line:-1
スクリーンに投影されます

00:28:44.892 --> 00:28:46.126 align:start position:43% line:-1
簡単です

00:28:46.293 --> 00:28:50.063 align:start position:32% line:-2
４つのステップで
エフェクトを加えます

00:28:50.164 --> 00:28:51.865 align:start position:36% line:-1
例は彩度でしたが

00:28:51.965 --> 00:28:56.503 align:start position:27% line:-2
Vimageの他の
エフェクトも紹介しましょう

00:28:57.538 --> 00:29:03.210 align:start position:30% line:-2
時計回りと反時計回りに
画像を回転させることと

00:28:57.538 --> 00:29:03.210 align:start position:30% line:-2
時計回りと反時計回りに
画像を回転させることと

00:29:03.544 --> 00:29:07.314 align:start position:32% line:-2
背景への
ぼかし効果も可能です

00:29:08.115 --> 00:29:13.220 align:start position:29% line:-2
画像にレトロな
質感を出したいと感じたら

00:29:13.320 --> 00:29:16.223 align:start position:38% line:-2
ディザリングで
白黒にできます

00:29:16.657 --> 00:29:19.560 align:start position:36% line:-2
カラー画像は
量子化も可能です

00:29:20.227 --> 00:29:23.397 align:start position:32% line:-2
アプリケーションでの
操作をお見せします

00:29:36.510 --> 00:29:40.447 align:start position:34% line:-2
回転を操作する
スライダがあります

00:29:40.848 --> 00:29:44.618 align:start position:34% line:-2
映像を反時計回りに
回転させたり

00:29:46.220 --> 00:29:48.889 align:start position:29% line:-1
時計回りの回転も可能です

00:29:51.525 --> 00:29:53.427 align:start position:32% line:-1
次に ぼかし効果です

00:29:53.527 --> 00:29:55.329 align:start position:34% line:-1
ここをクリックして

00:29:55.963 --> 00:29:59.433 align:start position:30% line:-1
段々とぼかしていきます

00:30:00.534 --> 00:30:03.237 align:start position:32% line:-1
左にスライドさせれば

00:30:03.704 --> 00:30:06.140 align:start position:29% line:-1
再びバラを前面に戻せます

00:30:08.041 --> 00:30:10.310 align:start position:27% line:-1
ディザリングで白黒にします

00:30:12.246 --> 00:30:14.848 align:start position:27% line:-1
この白黒映像のグレー部分は

00:30:14.948 --> 00:30:18.719 align:start position:36% line:-2
点の密集によって
表示されています

00:30:18.819 --> 00:30:20.187 align:start position:36% line:-1
ディザリングです

00:30:20.287 --> 00:30:24.191 align:start position:29% line:-2
アクセントとディザリング
アルゴリズムは

00:30:24.291 --> 00:30:26.093 align:start position:34% line:-1
のちほど解説します

00:30:27.127 --> 00:30:30.464 align:start position:30% line:-2
カラー量子化は
参照テーブルがあります

00:30:31.131 --> 00:30:34.334 align:start position:30% line:-2
スライダで
量子化レベルを上げます

00:30:34.434 --> 00:30:36.670 align:start position:34% line:-1
右に動かしていくと

00:30:36.970 --> 00:30:40.974 align:start position:30% line:-2
映像の色が
どんどん減っていきます

00:30:41.308 --> 00:30:43.076 align:start position:36% line:-1
独創的な映像です

00:30:44.478 --> 00:30:48.682 align:start position:29% line:-2
80～90年代の
パソコンの画面のようです

00:30:50.417 --> 00:30:52.219 align:start position:38% line:-1
それでは今から

00:30:53.086 --> 00:30:54.955 align:start position:34% line:-1
やり方を説明します

00:30:58.458 --> 00:31:01.862 align:start position:21% line:-2
回転はvImageRotateを
呼び出し

00:30:58.458 --> 00:31:01.862 align:start position:21% line:-2
回転はvImageRotateを
呼び出し

00:31:01.962 --> 00:31:04.364 align:start position:36% line:-1
角度を設定します

00:31:04.464 --> 00:31:08.268 align:start position:32% line:-2
時計回りも
反時計回りも可能です

00:31:09.903 --> 00:31:12.906 align:start position:25% line:-2
ぼかしは
TentConvolveです

00:31:13.574 --> 00:31:16.310 align:start position:29% line:-1
カーネルのサイズが重要で

00:31:16.610 --> 00:31:19.446 align:start position:32% line:-2
大きいほど
ぼかしが強くなります

00:31:21.648 --> 00:31:26.153 align:start position:27% line:-2
ディザリングは画像を
８ビットから１ビットに変え

00:31:26.253 --> 00:31:29.456 align:start position:30% line:-1
アルゴリズムも選びます

00:31:29.623 --> 00:31:32.793 align:start position:30% line:-2
ここではアトキンソン
ディザリングを使います

00:31:35.462 --> 00:31:36.864 align:start position:38% line:-1
カラー量子化は

00:31:36.964 --> 00:31:42.236 align:start position:29% line:-2
RGBチャネルのために
参照テーブルを作成します

00:31:42.870 --> 00:31:45.472 align:start position:18% line:-2
vImageTableLookUpを
呼び出し

00:31:45.739 --> 00:31:51.178 align:start position:29% line:-2
参照テーブルを適用し
色の数を限定していきます

00:31:54.047 --> 00:31:56.917 align:start position:34% line:-2
４つのエフェクトを
紹介しましたが

00:31:57.017 --> 00:32:01.455 align:start position:29% line:-2
ここからは次のトピックに
話を移します

00:31:57.017 --> 00:32:01.455 align:start position:29% line:-2
ここからは次のトピックに
話を移します

00:32:04.491 --> 00:32:05.759 align:start position:27% line:-1
LINPACKベンチマーク

00:32:06.860 --> 00:32:09.797 align:start position:25% line:-1
Accelerateの機能は

00:32:09.897 --> 00:32:13.967 align:start position:29% line:-2
アプリケーションでの
利用も手軽だと話しました

00:32:14.401 --> 00:32:18.071 align:start position:32% line:-2
しかし速度に関しては
話していません

00:32:18.572 --> 00:32:21.341 align:start position:32% line:-2
そこでLINPACK
ベンチマークです

00:32:23.410 --> 00:32:25.112 align:start position:36% line:-1
一体何をするのか

00:32:25.712 --> 00:32:30.818 align:start position:32% line:-2
連立一次方程式を解く
速度を計るツールです

00:32:31.718 --> 00:32:34.721 align:start position:30% line:-1
実際には３種類あります

00:32:34.822 --> 00:32:38.225 align:start position:30% line:-2
行列を100に固定して
計測するもの

00:32:38.859 --> 00:32:41.662 align:start position:25% line:-1
行列を1000に固定するもの

00:32:42.229 --> 00:32:47.601 align:start position:27% line:-2
最後が これからお見せする
タイプのもので

00:32:47.868 --> 00:32:49.002 align:start position:41% line:-1
無制限です

00:32:49.103 --> 00:32:51.505 align:start position:30% line:-1
どんな行列でも可能です

00:32:51.605 --> 00:32:56.243 align:start position:32% line:-2
機械の計算能力を
最大限に使っています

00:32:57.644 --> 00:33:02.049 align:start position:14% line:-2
iPhone XでAccelerateを
使ってみましょう

00:32:57.644 --> 00:33:02.049 align:start position:14% line:-2
iPhone XでAccelerateを
使ってみましょう

00:33:03.116 --> 00:33:05.419 align:start position:29% line:-1
速度はギガフロップスです

00:33:07.120 --> 00:33:10.858 align:start position:25% line:-2
倍精度は
iPhone 5Sから上がり

00:33:11.291 --> 00:33:12.659 align:start position:36% line:-1
iPhone 6

00:33:13.927 --> 00:33:17.698 align:start position:18% line:-1
iPhone 6S　iPhone 7

00:33:18.065 --> 00:33:22.102 align:start position:27% line:-2
そしてiPhone Xは
28.7ギガフロップスです

00:33:22.269 --> 00:33:23.704 align:start position:38% line:-1
これが倍精度で

00:33:23.804 --> 00:33:25.706 align:start position:34% line:-1
単精度も見ましょう

00:33:27.007 --> 00:33:27.941 align:start position:41% line:-1
そうですね

00:33:31.044 --> 00:33:35.082 align:start position:34% line:-2
はみ出したので
チャートを縮めます

00:33:38.318 --> 00:33:41.889 align:start position:30% line:-2
iPhone Xは
68ギガフロップスです

00:33:42.689 --> 00:33:46.727 align:start position:34% line:-2
別に驚くことでは
ないかもしれません

00:33:47.194 --> 00:33:51.899 align:start position:30% line:-2
精度もパフォーマンスも
改良されていますが

00:33:52.599 --> 00:33:55.536 align:start position:30% line:-1
それだけではありません

00:33:56.603 --> 00:34:01.475 align:start position:29% line:-2
マイクロアーキテクチャで
計算能力が上がり

00:33:56.603 --> 00:34:01.475 align:start position:29% line:-2
マイクロアーキテクチャで
計算能力が上がり

00:34:01.775 --> 00:34:06.346 align:start position:27% line:-2
高度な計算能力を
使うソフトが必要となります

00:34:06.680 --> 00:34:08.282 align:start position:34% line:-1
そこに注目しました

00:34:08.982 --> 00:34:13.053 align:start position:21% line:-1
同じLINPACKベンチマークが

00:34:13.187 --> 00:34:16.290 align:start position:21% line:-1
５つのiPhoneで実行できます

00:34:16.422 --> 00:34:19.359 align:start position:23% line:-1
Accelerateで得られる

00:34:20.260 --> 00:34:21.695 align:start position:38% line:-1
最適な動作環境

00:34:23.330 --> 00:34:25.399 align:start position:27% line:-1
アプリケーションも同様です

00:34:25.833 --> 00:34:31.304 align:start position:25% line:-2
Accelerateを使えば
最適な動作が保障されます

00:34:31.405 --> 00:34:34.475 align:start position:29% line:-2
すべての
アーキテクチャで可能です

00:34:35.641 --> 00:34:40.748 align:start position:20% line:-2
異なるプラットフォームも
Accelerateが利用できます

00:34:41.014 --> 00:34:45.886 align:start position:25% line:-2
macOS iOS tvOS
watchOSで可能です

00:34:47.187 --> 00:34:52.292 align:start position:29% line:-2
新しいアーキテクチャや
プラットフォームが出ても

00:34:52.391 --> 00:34:54.027 align:start position:36% line:-1
心配は要りません

00:34:54.561 --> 00:34:57.865 align:start position:29% line:-1
その際に必要な作業は１つ

00:34:57.965 --> 00:35:01.635 align:start position:30% line:-2
Accelerateに
リンクさせるだけです

00:34:57.965 --> 00:35:01.635 align:start position:30% line:-2
Accelerateに
リンクさせるだけです

00:35:01.735 --> 00:35:04.705 align:start position:36% line:-2
これで最新の
アーキテクチャや

00:35:04.805 --> 00:35:07.908 align:start position:34% line:-2
プラットフォームも
快適に使用できます

00:35:10.711 --> 00:35:12.512 align:start position:36% line:-1
最後にまとめます

00:35:12.846 --> 00:35:18.318 align:start position:29% line:-2
Accelerateには
様々な機能があります

00:35:18.819 --> 00:35:22.055 align:start position:36% line:-2
想定以上のことが
可能なのです

00:35:22.489 --> 00:35:27.461 align:start position:27% line:-2
機能が不十分であれば
リクエストを送ってください

00:35:27.895 --> 00:35:32.599 align:start position:32% line:-2
送られたものは検証し
開発に役立てます

00:35:32.766 --> 00:35:37.571 align:start position:30% line:-2
リクエストから生まれた
機能はたくさんあります

00:35:38.939 --> 00:35:40.808 align:start position:23% line:-1
Accelerateは手軽です

00:35:40.908 --> 00:35:44.445 align:start position:36% line:-2
大抵は機能を
呼び出すだけです

00:35:45.446 --> 00:35:47.948 align:start position:32% line:-1
高速かつ省エネであり

00:35:48.115 --> 00:35:52.853 align:start position:29% line:-2
アプリケーションは速く
バッテリーも長く持ちます

00:35:53.854 --> 00:35:57.491 align:start position:18% line:-1
Accelerateは移行が可能です

00:35:57.591 --> 00:36:00.594 align:start position:29% line:-2
全プラットフォームと
全アーキテクチャにおいて

00:35:57.591 --> 00:36:00.594 align:start position:29% line:-2
全プラットフォームと
全アーキテクチャにおいて

00:36:00.694 --> 00:36:03.564 align:start position:30% line:-2
最適なパフォーマンスを
保障します

00:36:03.964 --> 00:36:06.767 align:start position:36% line:-2
コードの変更は
必要はありません

00:36:09.069 --> 00:36:14.141 align:start position:12% line:-2
developer.apple.comにて
詳細が確認できます

00:36:14.241 --> 00:36:19.913 align:start position:29% line:-2
デモアプリケーションや
コードなども取得可能です

00:36:20.547 --> 00:36:23.750 align:start position:29% line:-2
明日は
ラボセッションがあります

00:36:24.184 --> 00:36:25.886 align:start position:36% line:-1
とても楽しみです

00:36:25.986 --> 00:36:29.923 align:start position:25% line:-2
Accelerateに関する
質問があれば

00:36:30.090 --> 00:36:31.625 align:start position:34% line:-1
明日 聞きましょう

00:36:33.427 --> 00:36:36.229 align:start position:29% line:-1
では本日は ここまでです

00:36:36.330 --> 00:36:37.397 align:start position:41% line:-1
よい１日を

00:36:37.498 --> 00:36:40.567 align:start position:43% line:-1
(拍手)
