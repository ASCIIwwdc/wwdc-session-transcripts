WEBVTT

00:00:07.074 --> 00:00:16.183 align:start position:43% line:-1
(音楽)

00:00:25.859 --> 00:00:28.896 align:start position:43% line:-1
(拍手)

00:00:28.996 --> 00:00:30.163 align:start position:34% line:-1
おはようございます

00:00:30.831 --> 00:00:33.133 align:start position:25% line:-1
今回のテーマはSwiftです

00:00:33.467 --> 00:00:37.771 align:start position:18% line:-2
SwiftとSwiftコミュニティは
進化しました

00:00:37.871 --> 00:00:42.910 align:start position:27% line:-2
スラヴァと私が
改良された点をご紹介します

00:00:43.610 --> 00:00:45.846 align:start position:34% line:-1
主な議題は２つです

00:00:46.046 --> 00:00:51.418 align:start position:27% line:-2
まずはオープンソースと
それに関連したコミュニティ

00:00:51.518 --> 00:00:57.090 align:start position:18% line:-2
次にベータ版Xcode 10の
Swift 4.2を詳しく紹介します

00:00:58.559 --> 00:01:03.263 align:start position:23% line:-2
オープンソースの開発は
GitHub上で行ってきました

00:00:58.559 --> 00:01:03.263 align:start position:23% line:-2
オープンソースの開発は
GitHub上で行ってきました

00:01:04.464 --> 00:01:08.435 align:start position:34% line:-2
ユーザ間で
議論や提案を重ねて

00:01:08.669 --> 00:01:13.740 align:start position:30% line:-2
言語と基本ライブラリの
改良を行ってきました

00:01:15.609 --> 00:01:22.082 align:start position:23% line:-2
600人以上のユーザが
コードをGitHub上に提供し

00:01:22.482 --> 00:01:26.386 align:start position:30% line:-2
１万8000件以上の
プルリクエストをマージ

00:01:27.154 --> 00:01:29.823 align:start position:21% line:-1
Swift.orgを開設してから

00:01:29.923 --> 00:01:35.762 align:start position:27% line:-2
SwiftはXcode用に
ダウンロードが可能となり

00:01:35.863 --> 00:01:38.465 align:start position:23% line:-1
Ubuntuにも対応しています

00:01:38.565 --> 00:01:43.837 align:start position:27% line:-2
これは開発スナップショット
および公式リリース日です

00:01:44.905 --> 00:01:51.245 align:start position:23% line:-2
また全プラットフォームでの
Swiftの使用を実現するには

00:01:51.411 --> 00:01:56.850 align:start position:27% line:-2
コミュニティによるテストの
サポートが欠かせません

00:01:56.950 --> 00:02:02.322 align:start position:23% line:-2
Swiftサポートを広げるため
大勢が努力しています

00:01:56.950 --> 00:02:02.322 align:start position:23% line:-2
Swiftサポートを広げるため
大勢が努力しています

00:02:02.422 --> 00:02:04.691 align:start position:34% line:-1
我々も協力しました

00:02:06.360 --> 00:02:12.332 align:start position:29% line:-2
継続的インテグレーション
システムを拡大したのです

00:02:12.432 --> 00:02:16.937 align:start position:29% line:-2
新たなプラットフォームで
Swiftを使う時も

00:02:17.037 --> 00:02:21.108 align:start position:27% line:-2
ハードウェアサポートを
プラグインしテストできます

00:02:21.241 --> 00:02:24.845 align:start position:32% line:-2
Swiftサポートを
広げる第一歩です

00:02:26.813 --> 00:02:32.953 align:start position:29% line:-2
オープンソースの開発には
多額の投資も行いました

00:02:33.053 --> 00:02:36.356 align:start position:32% line:-2
変更点について論じる
コミュニティです

00:02:36.924 --> 00:02:42.796 align:start position:27% line:-2
コミュニティの要望で
約半年前にメール形式から―

00:02:42.896 --> 00:02:45.098 align:start position:30% line:-1
フォーラムに変えました

00:02:45.265 --> 00:02:47.568 align:start position:34% line:-1
ユーザが求めたのは

00:02:47.668 --> 00:02:51.839 align:start position:32% line:-2
自分のレベルに合った
参加方法です

00:02:52.072 --> 00:02:54.474 align:start position:34% line:-1
以前は困難でしたが

00:02:54.575 --> 00:02:58.178 align:start position:25% line:-1
フォーラムで可能となりました

00:02:59.379 --> 00:03:03.750 align:start position:30% line:-2
フォーラムは
一般のプロジェクトでも

00:02:59.379 --> 00:03:03.750 align:start position:30% line:-2
フォーラムは
一般のプロジェクトでも

00:03:03.917 --> 00:03:06.420 align:start position:32% line:-1
使えるようにしました

00:03:08.455 --> 00:03:12.693 align:start position:27% line:-2
Swiftオープンソースの
管理者であれば

00:03:12.793 --> 00:03:15.963 align:start position:27% line:-1
フォーラムで議論が可能です

00:03:16.063 --> 00:03:19.666 align:start position:36% line:-2
議題はユーザや
開発についてなど

00:03:20.901 --> 00:03:26.340 align:start position:25% line:-2
Swift.orgの一般的な
利用方法も考えました

00:03:26.507 --> 00:03:30.911 align:start position:7% line:-2
今週 The Swift Programming
LanguageをSwift.orgに移しました

00:03:31.378 --> 00:03:35.015 align:start position:16% line:-1
URLはdocs.swift.orgで

00:03:35.115 --> 00:03:39.353 align:start position:29% line:-2
コミュニティで活用できる
ドキュメントがあります

00:03:41.522 --> 00:03:46.760 align:start position:25% line:-2
人々はSwiftを使うことに
心を躍らせていて―

00:03:46.860 --> 00:03:49.596 align:start position:34% line:-1
あちこちで話題です

00:03:49.696 --> 00:03:52.933 align:start position:20% line:-1
例えばPodcastやMeetup

00:03:53.033 --> 00:03:56.770 align:start position:32% line:-2
カンファレンスなどを
活用して

00:03:56.870 --> 00:04:00.240 align:start position:27% line:-1
評価などを参考にしています

00:03:56.870 --> 00:04:00.240 align:start position:27% line:-1
評価などを参考にしています

00:04:00.807 --> 00:04:05.479 align:start position:29% line:-2
昨年より我々は
プレゼンテーションを行い

00:04:05.579 --> 00:04:11.251 align:start position:27% line:-2
Swiftの技術的な解説や
何が可能かを伝えてきました

00:04:11.351 --> 00:04:15.489 align:start position:29% line:-2
オープンソースの開発への
参加方法もです

00:04:16.290 --> 00:04:19.860 align:start position:32% line:-2
情報の提供は
今後も続けていきます

00:04:21.361 --> 00:04:26.400 align:start position:23% line:-2
その一環として
金曜にカンファレンスがあります

00:04:26.500 --> 00:04:29.670 align:start position:12% line:-1
try! Swift San Joseです

00:04:29.770 --> 00:04:33.307 align:start position:29% line:-2
コミュニティメンバーとの
ワークショップがあり

00:04:33.407 --> 00:04:38.512 align:start position:27% line:-2
オープンソースの開発に
協力する人をサポートします

00:04:38.612 --> 00:04:44.918 align:start position:27% line:-2
コンパイラチームも参加し
議論の手助けをする予定です

00:04:46.954 --> 00:04:48.755 align:start position:30% line:-1
コミュニティは以上です

00:04:48.989 --> 00:04:50.224 align:start position:30% line:-1
次はSwift 4.2

00:04:51.091 --> 00:04:55.829 align:start position:29% line:-2
まずは改良点と
その影響に関して話します

00:04:58.098 --> 00:05:02.736 align:start position:21% line:-2
Swiftの大規模アップデートは
年に２回です

00:04:58.098 --> 00:05:02.736 align:start position:21% line:-2
Swiftの大規模アップデートは
年に２回です

00:05:02.903 --> 00:05:07.374 align:start position:14% line:-2
Swift 4.2は4.1と4.0からの
アップデートです

00:05:08.141 --> 00:05:12.079 align:start position:34% line:-2
大まかに２つの点が
改良されました

00:05:12.212 --> 00:05:15.616 align:start position:34% line:-2
１つは開発者の
生産性を重視した点

00:05:15.716 --> 00:05:17.484 align:start position:36% line:-1
改良点は様々です

00:05:17.584 --> 00:05:19.353 align:start position:30% line:-1
例えばビルド速度の向上

00:05:19.453 --> 00:05:21.655 align:start position:32% line:-1
さらに力を入れたのが

00:05:21.822 --> 00:05:26.493 align:start position:27% line:-2
デバッガからエディタまでの
操作性の改善です

00:05:26.960 --> 00:05:30.430 align:start position:32% line:-2
コミュニティは
言語の改良にも注力し

00:05:30.531 --> 00:05:34.735 align:start position:30% line:-2
開発者のワークフローを
改善しました

00:05:34.835 --> 00:05:39.039 align:start position:30% line:-2
またSDKの改良のため
投資も続けています

00:05:39.139 --> 00:05:42.843 align:start position:20% line:-2
Objective-C APIsが
うまく反映され

00:05:43.010 --> 00:05:47.681 align:start position:30% line:-2
言語やAPIの活用が
より有効的になりました

00:05:48.148 --> 00:05:50.984 align:start position:29% line:-1
さらに 注力しているのが

00:05:51.084 --> 00:05:54.488 align:start position:23% line:-1
ランタイムの変更や改良による―

00:05:54.588 --> 00:05:56.990 align:start position:29% line:-1
バイナリ互換性の達成です

00:05:57.891 --> 00:05:59.293 align:start position:39% line:-1
達成時期は―

00:06:01.528 --> 00:06:05.232 align:start position:23% line:-2
Swift 5をリリース予定の
2019年初めです

00:06:05.933 --> 00:06:07.835 align:start position:32% line:-1
バイナリ互換性とは？

00:06:08.302 --> 00:06:13.640 align:start position:21% line:-2
Swift 5以降のコンパイラで
ビルドしたSwiftコードを

00:06:13.807 --> 00:06:20.280 align:start position:25% line:-2
バイナリレベルで別のコードと
相互に運用できることです

00:06:20.380 --> 00:06:24.852 align:start position:34% line:-2
言語の成熟において
重大な進歩です

00:06:25.085 --> 00:06:30.390 align:start position:23% line:-2
これでSwiftのランタイムが
OSに組み込まれ

00:06:30.491 --> 00:06:35.329 align:start position:25% line:-2
アプリケーションにバンドルで
含む必要がありません

00:06:35.662 --> 00:06:41.835 align:start position:27% line:-2
スタートアップの時間や
メモリ使用量なども改善され

00:06:41.935 --> 00:06:44.505 align:start position:29% line:-1
様々な好結果が得られます

00:06:45.772 --> 00:06:51.078 align:start position:29% line:-2
ABIの安定化 つまり
バイナリ互換性については

00:06:51.178 --> 00:06:55.449 align:start position:7% line:-2
Swift.orgのABI STABILITYを
ご覧ください

00:06:57.951 --> 00:07:03.123 align:start position:16% line:-2
Swift 4.2はSwift 5へと
つながっていきます

00:06:57.951 --> 00:07:03.123 align:start position:16% line:-2
Swift 4.2はSwift 5へと
つながっていきます

00:07:04.625 --> 00:07:06.493 align:start position:29% line:-1
ソース互換性の話をします

00:07:07.427 --> 00:07:13.066 align:start position:21% line:-2
Xcode 10には１つの
Swiftコンパイラが含まれます

00:07:13.534 --> 00:07:16.603 align:start position:25% line:-1
Swift 4.2がそうです

00:07:17.171 --> 00:07:20.107 align:start position:25% line:-1
しかしXcode 9と同じく

00:07:20.207 --> 00:07:24.711 align:start position:30% line:-2
コンパイラは複数言語の
互換モードがあります

00:07:25.145 --> 00:07:28.482 align:start position:32% line:-2
どのモードでも
APIや言語機能が―

00:07:28.582 --> 00:07:30.684 align:start position:34% line:-1
すべて使用可能です

00:07:30.784 --> 00:07:33.820 align:start position:27% line:-1
これらはソースに影響します

00:07:35.989 --> 00:07:39.226 align:start position:27% line:-2
最初の２つは
Xcode 9にも搭載され

00:07:39.326 --> 00:07:45.332 align:start position:20% line:-2
Swift 3と4のコードを変えず
そのまま使うことができます

00:07:45.566 --> 00:07:52.339 align:start position:18% line:-2
さらにSwift 4.2ではSDKの
改良で幅が広がりました

00:07:53.407 --> 00:07:54.074 align:start position:43% line:-1
そうです

00:07:55.676 --> 00:08:02.015 align:start position:21% line:-2
前バージョンからの移行は
Edit menuで対応できます

00:07:55.676 --> 00:08:02.015 align:start position:21% line:-2
前バージョンからの移行は
Edit menuで対応できます

00:08:02.716 --> 00:08:07.321 align:start position:32% line:-2
SDKの変更に関して
注意点があります

00:08:07.421 --> 00:08:11.291 align:start position:25% line:-2
ベータ版Xcode 10では
SDKが改良がされるため

00:08:11.391 --> 00:08:14.361 align:start position:27% line:-1
フィードバックを募集します

00:08:14.461 --> 00:08:19.967 align:start position:27% line:-2
APIで改良すべき点と
Swiftへの影響などです

00:08:20.133 --> 00:08:25.372 align:start position:27% line:-2
4.2への移行を先に行うと
あとで変更があるので

00:08:25.472 --> 00:08:29.176 align:start position:34% line:-2
移行を遅らせるのも
１つの選択です

00:08:30.511 --> 00:08:36.283 align:start position:23% line:-2
Swift 4.2ではコードの
発達が急速に進んでいます

00:08:36.383 --> 00:08:40.721 align:start position:34% line:-2
言語の成熟において
重要な時期です

00:08:41.421 --> 00:08:47.895 align:start position:20% line:-2
だからこそSwift 3から
Swift 4.2に移行を勧めます

00:08:47.995 --> 00:08:52.366 align:start position:30% line:-2
コードサイズは改善され
言語も発達しました

00:08:52.733 --> 00:08:57.538 align:start position:21% line:-2
Swift 3互換モードは
Xcode 10で最後となります

00:08:59.640 --> 00:09:01.808 align:start position:32% line:-1
ツールの話に移ります

00:08:59.640 --> 00:09:01.808 align:start position:32% line:-1
ツールの話に移ります

00:09:02.442 --> 00:09:06.880 align:start position:21% line:-2
Xcode 9に比べ
Swiftプロジェクトのビルドは

00:09:06.980 --> 00:09:09.683 align:start position:32% line:-1
大幅に改善されました

00:09:10.083 --> 00:09:14.855 align:start position:14% line:-2
MacBook Proのクアッドコア
Intel Core i7プロセッサです

00:09:15.489 --> 00:09:17.791 align:start position:29% line:-1
その中の１つを紹介します

00:09:18.792 --> 00:09:21.862 align:start position:23% line:-1
Objective-Cで始まり

00:09:21.962 --> 00:09:25.933 align:start position:30% line:-2
Swiftを組み込んだ
プロジェクトです

00:09:26.133 --> 00:09:28.168 align:start position:32% line:-1
これは普通の流れです

00:09:28.669 --> 00:09:31.071 align:start position:34% line:-1
ビルド時間の改善で

00:09:31.305 --> 00:09:35.876 align:start position:23% line:-2
Swiftコードのビルド速度が
大幅に向上しました

00:09:36.243 --> 00:09:39.546 align:start position:30% line:-2
Swiftコードの
ビルド速度だけを見ると

00:09:39.646 --> 00:09:43.217 align:start position:34% line:-2
以前の３倍の
速度になっています

00:09:43.317 --> 00:09:47.788 align:start position:32% line:-2
プロジェクト全体では
1.6xの高速化です

00:09:49.556 --> 00:09:54.094 align:start position:32% line:-2
ビルドの改善は
プロジェクトの内容や

00:09:54.194 --> 00:09:57.865 align:start position:21% line:-1
コード量とコア数などで異なります

00:09:57.965 --> 00:10:01.802 align:start position:32% line:-2
大体のプロジェクトは
2xの速度になります

00:09:57.965 --> 00:10:01.802 align:start position:32% line:-2
大体のプロジェクトは
2xの速度になります

00:10:02.336 --> 00:10:04.905 align:start position:30% line:-1
さらなる利点があります

00:10:05.005 --> 00:10:09.143 align:start position:32% line:-2
Swiftでは複数の
ファイルを扱えます

00:10:09.243 --> 00:10:12.379 align:start position:29% line:-1
ヘッダファイルは不要です

00:10:12.479 --> 00:10:15.949 align:start position:32% line:-2
コンパイラの
不要な処理も多いです

00:10:16.149 --> 00:10:18.886 align:start position:23% line:-2
そこでコンパイルパイプラインを
革新し

00:10:18.986 --> 00:10:22.923 align:start position:27% line:-2
無駄を抑え
コアの活用を効率化しました

00:10:23.023 --> 00:10:24.825 align:start position:32% line:-1
これが速さの理由です

00:10:25.192 --> 00:10:31.131 align:start position:27% line:-2
ビルドの工程に関しては
今週 別のセッションがあり

00:10:31.231 --> 00:10:34.468 align:start position:27% line:-1
様々な利点について話します

00:10:36.270 --> 00:10:40.908 align:start position:34% line:-2
さて１番の利点は
デバッグビルドです

00:10:43.076 --> 00:10:47.948 align:start position:29% line:-2
Xcodeのビルド設定を
例に説明します

00:10:48.649 --> 00:10:52.853 align:start position:27% line:-2
最近 コンパイルモードを
最適化レベルから分けました

00:10:53.120 --> 00:10:56.990 align:start position:27% line:-1
プロジェクトの作成方法です

00:10:57.090 --> 00:11:00.427 align:start position:21% line:-2
リリースビルドは
Whole Moduleモードで

00:10:57.090 --> 00:11:00.427 align:start position:21% line:-2
リリースビルドは
Whole Moduleモードで

00:11:00.527 --> 00:11:04.198 align:start position:34% line:-2
全ファイルを
同時にビルドします

00:11:04.298 --> 00:11:07.501 align:start position:27% line:-1
これが最適化を可能にします

00:11:07.935 --> 00:11:11.605 align:start position:32% line:-2
最適化の機会が
増えるということです

00:11:12.039 --> 00:11:15.209 align:start position:23% line:-2
デバッグビルドは
Incrementalモードで

00:11:15.309 --> 00:11:18.979 align:start position:27% line:-1
ビルドが同時ではありません

00:11:19.479 --> 00:11:23.116 align:start position:27% line:-2
これにより
パフォーマンスは低下します

00:11:23.417 --> 00:11:26.720 align:start position:16% line:-2
Optimazation Levelは
No optimazationです

00:11:26.820 --> 00:11:29.323 align:start position:29% line:-1
デバッグ情報が改善します

00:11:29.423 --> 00:11:32.426 align:start position:36% line:-2
リリースビルドは
最適化されますが

00:11:32.593 --> 00:11:35.829 align:start position:36% line:-2
そのレベルは
あとで説明します

00:11:39.533 --> 00:11:44.138 align:start position:27% line:-2
コンパイルモードと
最適化レベルを分けたことで

00:11:44.738 --> 00:11:49.243 align:start position:32% line:-2
ある興味深い暫定策が
見つかりました

00:11:49.543 --> 00:11:53.714 align:start position:9% line:-2
Whole Moduleモードと
No optimazationを組み合わせると

00:11:53.814 --> 00:11:56.483 align:start position:36% line:-2
デバッグビルドが
速くなるのです

00:11:56.884 --> 00:11:58.418 align:start position:32% line:-1
この組み合わせにより

00:11:58.519 --> 00:12:03.423 align:start position:29% line:-2
先にお話しした無駄が
格段に抑えられるからです

00:11:58.519 --> 00:12:03.423 align:start position:29% line:-2
先にお話しした無駄が
格段に抑えられるからです

00:12:03.524 --> 00:12:09.163 align:start position:27% line:-2
除去に努めてきた
不要部分が大幅に減るのです

00:12:09.963 --> 00:12:13.233 align:start position:36% line:-2
しかしビルドが
増えにくくなり―

00:12:13.333 --> 00:12:17.271 align:start position:27% line:-2
１つを変えると
全ファイルが再構築されます

00:12:17.371 --> 00:12:20.107 align:start position:34% line:-2
Xcode 10の
デバッグビルドでは

00:12:20.207 --> 00:12:23.243 align:start position:29% line:-1
暫定策は必要なくなります

00:12:23.343 --> 00:12:29.183 align:start position:21% line:-2
Incrementalモードも
先の組み合わせと同じく効果的です

00:12:29.283 --> 00:12:31.952 align:start position:36% line:-2
すでにサポート
範囲内だからです

00:12:34.588 --> 00:12:37.591 align:start position:34% line:-2
次にランタイムの
最適化についてです

00:12:37.691 --> 00:12:40.928 align:start position:34% line:-2
バイナリ互換性にも
つながります

00:12:43.230 --> 00:12:46.066 align:start position:34% line:-2
Swiftは自動で
メモリを管理します

00:12:46.767 --> 00:12:51.338 align:start position:23% line:-2
Objective-Cと同様に
参照カウントを使います

00:12:51.805 --> 00:12:56.777 align:start position:30% line:-2
これはコンパイラの
リリースまでの流れです

00:12:57.411 --> 00:12:59.713 align:start position:25% line:-1
Swift 4.1の場合です

00:13:02.216 --> 00:13:06.253 align:start position:16% line:-2
+1 reference countが
付随します

00:13:06.687 --> 00:13:11.091 align:start position:30% line:-2
規約ではオブジェクトが
別の関数に渡されると

00:13:11.191 --> 00:13:14.728 align:start position:34% line:-2
関数が呼び出され
リリースされました

00:13:14.828 --> 00:13:19.800 align:start position:30% line:-2
リリース処理を
別の関数にさせるのです

00:13:20.300 --> 00:13:24.638 align:start position:27% line:-2
これはオブジェクトの
ライフタイムを縮めています

00:13:24.738 --> 00:13:27.307 align:start position:29% line:-1
最小限の働きしかしません

00:13:27.708 --> 00:13:31.245 align:start position:23% line:-1
しかし こういったコードの場合

00:13:31.345 --> 00:13:35.716 align:start position:25% line:-2
オブジェクトを異なるAPIに
何度も渡します

00:13:35.816 --> 00:13:38.352 align:start position:34% line:-1
呼び出し規約に従い

00:13:38.452 --> 00:13:43.257 align:start position:30% line:-2
初めの参照数が最後の
呼び出しとつり合います

00:13:43.423 --> 00:13:47.828 align:start position:36% line:-2
しかし規約では
途中の呼び出しが

00:13:47.928 --> 00:13:50.297 align:start position:29% line:-1
保持されリリースされます

00:13:50.797 --> 00:13:52.432 align:start position:38% line:-1
無駄な作業です

00:13:52.533 --> 00:13:57.404 align:start position:29% line:-2
オブジェクトは一連の
流れの中でも生きています

00:13:57.704 --> 00:14:00.707 align:start position:20% line:-1
Swift 4.2では改善しました

00:13:57.704 --> 00:14:00.707 align:start position:20% line:-1
Swift 4.2では改善しました

00:14:00.807 --> 00:14:05.012 align:start position:34% line:-2
オブジェクトは
リリースされません

00:14:05.112 --> 00:14:08.415 align:start position:36% line:-2
保持とリリースの
工程は消えました

00:14:10.517 --> 00:14:13.320 align:start position:27% line:-1
これで無駄が縮小されました

00:14:13.854 --> 00:14:15.355 align:start position:36% line:-1
これによる利点は

00:14:15.456 --> 00:14:18.525 align:start position:36% line:-2
コードサイズが
縮小されたことと

00:14:18.625 --> 00:14:20.661 align:start position:32% line:-1
ランタイムの改善です

00:14:23.330 --> 00:14:26.099 align:start position:29% line:-1
また文字列も改善しました

00:14:26.533 --> 00:14:30.537 align:start position:32% line:-2
以前は24だったのが
今は16バイトです

00:14:30.637 --> 00:14:34.274 align:start position:32% line:-2
メモリと動作との間の
妥協点です

00:14:35.242 --> 00:14:40.347 align:start position:30% line:-2
まだこのサイズでも
文字列を最適化できます

00:14:40.614 --> 00:14:44.084 align:start position:27% line:-1
文字列が15バイト内の場合

00:14:44.184 --> 00:14:47.321 align:start position:36% line:-2
文字列の型として
表示されます

00:14:47.421 --> 00:14:50.924 align:start position:32% line:-2
異なるバッファに
移す必要はありません

00:14:51.325 --> 00:14:55.395 align:start position:32% line:-2
これでメモリと動作が
さらに改善されます

00:14:55.629 --> 00:14:58.365 align:start position:29% line:-1
文字列内の最適化と同様に

00:14:58.465 --> 00:15:00.834 align:start position:27% line:-1
多くの文字列を入力できます

00:14:58.465 --> 00:15:00.834 align:start position:27% line:-1
多くの文字列を入力できます

00:15:03.704 --> 00:15:07.274 align:start position:32% line:-2
最後に言語の
改良点をお話しします

00:15:07.741 --> 00:15:10.978 align:start position:36% line:-2
コードサイズの
縮小についてです

00:15:12.079 --> 00:15:16.016 align:start position:29% line:-2
呼び出し規約を変え
コードサイズを抑えました

00:15:16.116 --> 00:15:18.752 align:start position:38% line:-2
最適化レベルも
追加しました

00:15:18.886 --> 00:15:20.854 align:start position:16% line:-1
Optimize for Sizeです

00:15:21.388 --> 00:15:25.459 align:start position:29% line:-2
ダウンロード制限など
アプリケーションの容量が

00:15:25.559 --> 00:15:28.395 align:start position:32% line:-1
重要な場合に有用です

00:15:29.029 --> 00:15:35.102 align:start position:29% line:-2
Swiftはプログラムの
静的知識を備えています

00:15:35.202 --> 00:15:39.139 align:start position:32% line:-2
コンパイラは
動作を最適化しやすく

00:15:39.239 --> 00:15:42.543 align:start position:36% line:-2
インライン展開や
脱仮想化など

00:15:42.643 --> 00:15:45.345 align:start position:38% line:-2
動作の改善に
役立っています

00:15:45.646 --> 00:15:48.949 align:start position:34% line:-2
しかし時に
それが不要な場合も

00:15:50.184 --> 00:15:54.087 align:start position:27% line:-2
これはソース互換性に
Osizeを適用した結果で

00:15:54.188 --> 00:15:58.625 align:start position:23% line:-2
GitHubのフレームワークと
アプリケーションを含みます

00:15:59.059 --> 00:16:05.132 align:start position:27% line:-2
コードサイズが
10～30％縮小されました

00:15:59.059 --> 00:16:05.132 align:start position:27% line:-2
コードサイズが
10～30％縮小されました

00:16:05.732 --> 00:16:11.338 align:start position:21% line:-2
Swiftコードをコンパイルした
機械語のサイズで

00:16:11.438 --> 00:16:16.009 align:start position:30% line:-2
アプリケーション全体の
サイズではありません

00:16:17.477 --> 00:16:21.915 align:start position:34% line:-2
ランタイムは
約５％遅くなります

00:16:22.015 --> 00:16:24.151 align:start position:36% line:-1
若干の損失ですね

00:16:24.251 --> 00:16:26.720 align:start position:30% line:-1
しかし支障はありません

00:16:26.820 --> 00:16:29.056 align:start position:32% line:-1
使用の目的によります

00:16:29.156 --> 00:16:32.392 align:start position:34% line:-2
興味があれば
試してみてください

00:16:34.361 --> 00:16:39.566 align:start position:20% line:-2
次はスラヴァがSwift 4.2の
言語改善点をお話しします

00:16:39.666 --> 00:16:45.806 align:start position:43% line:-1
(拍手)

00:16:45.906 --> 00:16:47.708 align:start position:29% line:-1
スラヴァ･ペーストフです

00:16:47.808 --> 00:16:53.213 align:start position:21% line:-2
Swift 4.2の新しい言語の
特性について話します

00:16:53.313 --> 00:16:56.350 align:start position:30% line:-2
シンプルで
管理しやすくなりました

00:16:57.451 --> 00:17:04.223 align:start position:25% line:-2
本題に移る前に まずは
言語改善の工程をお話しします

00:16:57.451 --> 00:17:04.223 align:start position:25% line:-2
本題に移る前に まずは
言語改善の工程をお話しします

00:17:04.391 --> 00:17:09.963 align:start position:25% line:-2
Swiftはオープンソースで
オープンデザインです

00:17:10.130 --> 00:17:13.200 align:start position:36% line:-2
もし言語改善の
アイデアがあれば

00:17:13.300 --> 00:17:15.502 align:start position:29% line:-1
フォーラムに書き込みます

00:17:15.602 --> 00:17:20.007 align:start position:34% line:-2
アイデアが注目され
試案をまとめたら

00:17:20.107 --> 00:17:24.377 align:start position:29% line:-2
アイデアを実装し
コアチームに提出できます

00:17:24.545 --> 00:17:29.616 align:start position:27% line:-2
評価中もコミュニティで
さらにフィードバックがあり

00:17:29.716 --> 00:17:33.954 align:start position:29% line:-2
チームが試案を
正式に受理するか決めます

00:17:34.721 --> 00:17:36.957 align:start position:21% line:-2
Swift Evolutionの
ページでは

00:17:37.057 --> 00:17:42.629 align:start position:23% line:-2
Swift 4.2に追加された
試案のリストが閲覧できます

00:17:43.297 --> 00:17:46.700 align:start position:29% line:-1
試案の数がとても多いので

00:17:46.800 --> 00:17:48.635 align:start position:29% line:-1
すべてはお話しできません

00:17:48.735 --> 00:17:52.406 align:start position:32% line:-2
しかし強調したいのは
多くの試案が

00:17:52.506 --> 00:17:56.343 align:start position:30% line:-2
コミュニティから
生まれたということです

00:17:56.510 --> 00:18:02.783 align:start position:27% line:-2
ユーザ間で共感できるような
言語の改善すべき点をあげ

00:17:56.510 --> 00:18:02.783 align:start position:27% line:-2
ユーザ間で共感できるような
言語の改善すべき点をあげ

00:18:02.883 --> 00:18:07.154 align:start position:32% line:-2
解決方法のアイデアを
出し合います

00:18:07.254 --> 00:18:11.859 align:start position:25% line:-2
皆さんの貢献で
Swiftが改善されるのです

00:18:12.059 --> 00:18:12.893 align:start position:41% line:-1
いいですね

00:18:12.993 --> 00:18:19.299 align:start position:43% line:-1
(拍手)

00:18:19.399 --> 00:18:26.140 align:start position:27% line:-2
最初の改良点は列挙型での
ボイラープレートの削除です

00:18:26.440 --> 00:18:28.408 align:start position:38% line:-1
例えば列挙型で

00:18:28.509 --> 00:18:33.146 align:start position:27% line:-2
データタイプのすべての値を
printと定義します

00:18:33.247 --> 00:18:37.384 align:start position:34% line:-2
Swift 4では
プロパティの定義で

00:18:37.484 --> 00:18:40.721 align:start position:29% line:-1
全型のリストも含めました

00:18:40.988 --> 00:18:46.927 align:start position:27% line:-2
新たな型を追加したら
プロパティの更新が必要です

00:18:47.060 --> 00:18:50.230 align:start position:34% line:-2
でないと正確な
動作が得られません

00:18:50.831 --> 00:18:56.770 align:start position:25% line:-2
コンパイラに繰り返し
同じ作業を課すことになります

00:18:56.870 --> 00:19:01.508 align:start position:23% line:-2
そこでCaseIterable
プロトコルが追加されました

00:18:56.870 --> 00:19:01.508 align:start position:23% line:-2
そこでCaseIterable
プロトコルが追加されました

00:19:01.608 --> 00:19:07.448 align:start position:27% line:-2
プロトコルを適合させれば
コンパイラが全型を作ります

00:19:08.115 --> 00:19:09.216 align:start position:43% line:-1
以上です

00:19:09.316 --> 00:19:13.587 align:start position:43% line:-1
(拍手)

00:19:13.687 --> 00:19:17.858 align:start position:27% line:-2
また別のボイラープレートも
削除しました

00:19:17.958 --> 00:19:22.062 align:start position:32% line:-2
ジェネリックコードを
作成できない場合です

00:19:22.596 --> 00:19:26.867 align:start position:25% line:-2
Swift 4の
containsメソッドでは

00:19:26.967 --> 00:19:30.938 align:start position:25% line:-2
その数列の要素型が
Equatableでなければ

00:19:31.038 --> 00:19:34.007 align:start position:30% line:-1
要素は見つけられません

00:19:34.541 --> 00:19:40.013 align:start position:21% line:-2
文字列がEquatableなので
その配列でも呼び出せます

00:19:40.114 --> 00:19:42.849 align:start position:29% line:-1
配列の配列内で呼び出すと

00:19:43.116 --> 00:19:47.955 align:start position:30% line:-2
整数の配列では要素型の
同値比較はできません

00:19:48.055 --> 00:19:50.958 align:start position:25% line:-1
コンパイル時間エラーが出ます

00:19:51.658 --> 00:19:56.964 align:start position:23% line:-2
ではライブラリが全配列を
Equatableとすればいい

00:19:57.064 --> 00:19:59.533 align:start position:29% line:-1
しかし それはいけません

00:19:59.633 --> 00:20:04.037 align:start position:25% line:-2
配列の要素型が
Equatableでない場合

00:19:59.633 --> 00:20:04.037 align:start position:25% line:-2
配列の要素型が
Equatableでない場合

00:20:04.137 --> 00:20:06.907 align:start position:25% line:-2
配列をEquatableには
できません

00:20:07.941 --> 00:20:10.911 align:start position:29% line:-2
配列の要素型が
Equatableならば

00:20:11.011 --> 00:20:16.717 align:start position:29% line:-2
配列の同じ動作が定義でき
要素の比較が可能です

00:20:17.050 --> 00:20:21.155 align:start position:30% line:-2
ライブラリは この
限定的な適合ができます

00:20:21.255 --> 00:20:27.261 align:start position:23% line:-2
要素型がEquatableなら
配列も同様になります

00:20:27.361 --> 00:20:31.665 align:start position:23% line:-2
Swift 4.2では今の例が
可能になりました

00:20:33.066 --> 00:20:39.239 align:start position:29% line:-2
また他の限定的な適合を
ライブラリで定義できます

00:20:39.339 --> 00:20:44.945 align:start position:11% line:-2
例えばOptionalと
DictionaryはEquatableです

00:20:45.045 --> 00:20:51.618 align:start position:18% line:-2
HashableやEncodable
Decodableも適合します

00:20:52.486 --> 00:20:53.120 align:start position:43% line:-1
そして…

00:20:53.220 --> 00:20:57.791 align:start position:43% line:-1
(拍手)

00:20:57.891 --> 00:21:02.596 align:start position:34% line:-2
今まで不可能だった
組み立てができます

00:20:57.891 --> 00:21:02.596 align:start position:34% line:-2
今まで不可能だった
組み立てができます

00:21:02.896 --> 00:21:07.568 align:start position:29% line:-2
Optional整数値の
配列があれば

00:21:07.768 --> 00:21:10.671 align:start position:30% line:-1
すべてが可能になります

00:21:12.306 --> 00:21:15.275 align:start position:30% line:-1
今週末のセッションでは

00:21:15.409 --> 00:21:22.216 align:start position:27% line:-2
限定的な適合や総合的な
改良点を詳しくお話しします

00:21:24.151 --> 00:21:27.988 align:start position:12% line:-2
次にEquatableとHashableの
定義について

00:21:28.522 --> 00:21:34.161 align:start position:18% line:-2
Swiftには多くのプロパティを持つ
構造体があり

00:21:34.261 --> 00:21:37.264 align:start position:25% line:-2
これらは
すべてEquatableです

00:21:37.364 --> 00:21:40.033 align:start position:29% line:-1
２つの値を比較するだけで

00:21:40.134 --> 00:21:43.303 align:start position:20% line:-1
構造体もEquatableにします

00:21:43.403 --> 00:21:46.974 align:start position:34% line:-2
Swift 4では
手入力が必要でした

00:21:47.074 --> 00:21:48.509 align:start position:32% line:-1
ボイラープレートです

00:21:48.609 --> 00:21:53.847 align:start position:21% line:-2
プロパティを追加したら
Equatableの更新も必要で

00:21:53.947 --> 00:21:57.518 align:start position:36% line:-2
その際に間違いが
起こりかねません

00:21:57.684 --> 00:22:03.190 align:start position:21% line:-2
Swift 4.1から同値比較の
実装が可能になりました

00:21:57.684 --> 00:22:03.190 align:start position:21% line:-2
Swift 4.1から同値比較の
実装が可能になりました

00:22:03.290 --> 00:22:06.894 align:start position:18% line:-2
実装しなくても
プロパティがEquatableならば

00:22:06.994 --> 00:22:10.430 align:start position:34% line:-2
コンパイラが
自動的に処理します

00:22:11.031 --> 00:22:13.033 align:start position:27% line:-1
Hashableも同様です

00:22:13.901 --> 00:22:16.069 align:start position:30% line:-1
ジェネリックタイプは？

00:22:16.170 --> 00:22:22.643 align:start position:25% line:-2
これはleftとrightの
インスタンスのデータ型です

00:22:22.843 --> 00:22:26.613 align:start position:27% line:-2
両方をEquatableに
制限したくありません

00:22:26.713 --> 00:22:32.786 align:start position:12% line:-2
関数やエラー non Equatableも
使用可能にするためです

00:22:32.920 --> 00:22:35.689 align:start position:30% line:-1
限定的な適合を宣言し―

00:22:35.789 --> 00:22:39.993 align:start position:18% line:-2
両方がそうなら
それぞれもEquatableとします

00:22:40.094 --> 00:22:41.995 align:start position:30% line:-1
これだけではありません

00:22:42.095 --> 00:22:44.865 align:start position:29% line:-1
同値比較の実装については

00:22:44.998 --> 00:22:47.768 align:start position:30% line:-1
正しいやり方は１つです

00:22:47.868 --> 00:22:50.938 align:start position:27% line:-1
どちらの値も同じ型か確認し

00:22:51.038 --> 00:22:54.341 align:start position:32% line:-2
ペイロードが同等かを
チェックします

00:22:54.675 --> 00:23:00.614 align:start position:20% line:-2
Swift 4.2ではコンパイラが
この合成作業を行います

00:22:54.675 --> 00:23:00.614 align:start position:20% line:-2
Swift 4.2ではコンパイラが
この合成作業を行います

00:23:01.148 --> 00:23:03.550 align:start position:27% line:-1
Hashableも同様です

00:23:04.952 --> 00:23:10.124 align:start position:29% line:-2
これで 例えば整数または
文字列のSetが持てます

00:23:11.825 --> 00:23:12.493 align:start position:45% line:-1
さて…

00:23:12.593 --> 00:23:15.996 align:start position:43% line:-1
(拍手)

00:23:16.096 --> 00:23:22.402 align:start position:27% line:-2
時に同値比較とハッシュ化を
手入力で行う場合があります

00:23:23.670 --> 00:23:25.772 align:start position:34% line:-1
例を見てみましょう

00:23:26.507 --> 00:23:29.643 align:start position:32% line:-2
都市を表す
データがあるとします

00:23:29.810 --> 00:23:34.515 align:start position:34% line:-2
都市名と州と人口が
情報としてあります

00:23:34.615 --> 00:23:37.284 align:start position:32% line:-1
この例での目的は１つ

00:23:37.384 --> 00:23:40.687 align:start position:27% line:-1
都市名と州を同値比較します

00:23:40.787 --> 00:23:44.258 align:start position:29% line:-2
同値であれば
人口のチェックは不要です

00:23:44.491 --> 00:23:48.896 align:start position:30% line:-2
もしコンパイラに
同値比較を実行させると

00:23:48.996 --> 00:23:53.433 align:start position:34% line:-2
不要な人口の比較も
してしまいます

00:23:53.767 --> 00:23:57.971 align:start position:29% line:-2
ここは手入力ができますし
簡単な作業です

00:23:58.605 --> 00:24:00.174 align:start position:29% line:-1
でもHashableは？

00:23:58.605 --> 00:24:00.174 align:start position:29% line:-1
でもHashableは？

00:24:01.208 --> 00:24:04.878 align:start position:30% line:-2
都市のハッシュコードを
計算する場合

00:24:04.978 --> 00:24:09.349 align:start position:30% line:-2
都市名と州の
ハッシュコードの計算と

00:24:09.449 --> 00:24:11.418 align:start position:38% line:-1
結合が必要です

00:24:11.552 --> 00:24:12.986 align:start position:38% line:-1
そのやり方は？

00:24:13.220 --> 00:24:16.390 align:start position:30% line:-1
非等価演算も使えますし

00:24:17.324 --> 00:24:22.930 align:start position:29% line:-2
演算式をネットで探したり
自分で考えたりもできます

00:24:23.263 --> 00:24:26.333 align:start position:30% line:-2
しかし
どちらも最善策ではなく

00:24:26.433 --> 00:24:30.704 align:start position:32% line:-2
ハッシュ結合も
分かりにくい機能です

00:24:30.804 --> 00:24:34.074 align:start position:32% line:-2
うまく使えない場合の
損害は大きく

00:24:34.174 --> 00:24:38.312 align:start position:23% line:-2
DictionaryやSetの
動作プロパティには

00:24:38.412 --> 00:24:41.748 align:start position:32% line:-2
高度なハッシュ機能が
求められます

00:24:42.216 --> 00:24:44.451 align:start position:27% line:-1
またセキュリティに関しても

00:24:44.551 --> 00:24:50.257 align:start position:30% line:-2
アタッカーがハッシュを
すべて同値にしてしまい

00:24:50.357 --> 00:24:53.126 align:start position:34% line:-2
アプリケーションに
送るとします

00:24:53.227 --> 00:24:58.332 align:start position:23% line:-2
アプリケーションがDoS攻撃で
使用できなくなります

00:24:58.432 --> 00:25:02.803 align:start position:25% line:-2
Swift 4.2はより良い
APIを導入しました

00:24:58.432 --> 00:25:02.803 align:start position:25% line:-2
Swift 4.2はより良い
APIを導入しました

00:25:03.370 --> 00:25:07.241 align:start position:25% line:-2
Swift 4と4.1の
Hashableプロトコルは

00:25:07.474 --> 00:25:12.079 align:start position:29% line:-2
１つのハッシュ値が
１つの整数値を生成します

00:25:12.346 --> 00:25:16.116 align:start position:32% line:-2
Swift 4.2は
プロトコルを改良し

00:25:16.216 --> 00:25:19.920 align:start position:7% line:-2
hash(into:) requirementを
加えました

00:25:20.020 --> 00:25:22.990 align:start position:34% line:-2
１つの値を
生成するのではなく

00:25:23.090 --> 00:25:25.759 align:start position:30% line:-1
インスタンスを取り出し

00:25:25.859 --> 00:25:31.765 align:start position:21% line:-2
複数の値を与え
ハッシュコードとして１つにします

00:25:32.166 --> 00:25:35.435 align:start position:27% line:-1
都市データの例に戻りますと

00:25:35.602 --> 00:25:40.174 align:start position:18% line:-2
都市名と州のhash(into:)を
再帰的に呼び出し―

00:25:40.274 --> 00:25:45.646 align:start position:27% line:-2
Hasherオブジェクトに
インスタンスを渡します

00:25:46.380 --> 00:25:47.147 align:start position:43% line:-1
すると―

00:25:48.115 --> 00:25:50.851 align:start position:30% line:-1
ハッシュアルゴリズムが

00:25:50.951 --> 00:25:55.289 align:start position:30% line:-2
ハッシュコードの質と
動作を調整してくれます

00:25:55.389 --> 00:25:58.892 align:start position:32% line:-2
DoS攻撃の
さらなる予防策として

00:25:58.992 --> 00:26:03.564 align:start position:27% line:-2
アプリケーション起動時には
乱数が使われます

00:25:58.992 --> 00:26:03.564 align:start position:27% line:-2
アプリケーション起動時には
乱数が使われます

00:26:05.365 --> 00:26:09.002 align:start position:20% line:-2
最新の
Hashableプロトコルを使えば

00:26:09.102 --> 00:26:13.006 align:start position:32% line:-2
コードの移行も
簡単なのでお勧めです

00:26:13.106 --> 00:26:15.609 align:start position:27% line:-1
１つだけ気をつけてください

00:26:15.709 --> 00:26:21.915 align:start position:27% line:-2
アプリケーションの実行間で
ハッシュ値や要素の順序は

00:26:22.015 --> 00:26:27.087 align:start position:30% line:-2
変わらないものと
期待するかもしれません

00:26:27.187 --> 00:26:30.524 align:start position:30% line:-2
しかし 乱数を使うので
そうはならず―

00:26:30.624 --> 00:26:32.426 align:start position:32% line:-1
コード修正が必要です

00:26:32.860 --> 00:26:36.730 align:start position:23% line:-1
そのためビルド設定を加えました

00:26:36.830 --> 00:26:39.500 align:start position:0% line:-2
Swift Deterministic Hashingの
環境変数です

00:26:39.600 --> 00:26:45.606 align:start position:27% line:-2
スキームエディタで選び
乱数を一時的に無効にします

00:26:47.040 --> 00:26:51.278 align:start position:30% line:-2
では乱数の生成について
話しましょう

00:26:52.279 --> 00:26:55.149 align:start position:23% line:-1
現状のSwiftで生成する場合

00:26:55.315 --> 00:26:58.252 align:start position:32% line:-2
インポートされた
C APIを使います

00:26:58.352 --> 00:27:03.357 align:start position:30% line:-2
プラットフォーム間で
名前や特性が異なるため

00:26:58.352 --> 00:27:03.357 align:start position:30% line:-2
プラットフォーム間で
名前や特性が異なるため

00:27:03.457 --> 00:27:05.592 align:start position:32% line:-1
理想的ではありません

00:27:05.692 --> 00:27:08.328 align:start position:25% line:-1
ビルド設定チェックが必要です

00:27:08.562 --> 00:27:14.968 align:start position:27% line:-2
しかし これらは低レベルで
実装が難しいのです

00:27:15.235 --> 00:27:19.306 align:start position:36% line:-2
例えば１から６の
数値を得たい場合

00:27:19.406 --> 00:27:23.644 align:start position:18% line:-2
Darwinのarc4randomが
使えます

00:27:23.744 --> 00:27:26.713 align:start position:23% line:-1
６で割った余りを計算するのです

00:27:26.813 --> 00:27:31.885 align:start position:30% line:-2
しかし１から６で
均等な結果となりません

00:27:32.252 --> 00:27:38.458 align:start position:18% line:-2
Swift 4.2では新しいAPIを
導入し改善しました

00:27:39.126 --> 00:27:43.363 align:start position:30% line:-2
まず数値型は
ランダムメソッドにより

00:27:43.464 --> 00:27:48.068 align:start position:32% line:-2
範囲内で均等な数値を
返すようになりました

00:27:48.168 --> 00:27:51.638 align:start position:36% line:-2
さらに浮動小数も
扱えるのです

00:27:52.773 --> 00:27:58.178 align:start position:43% line:-1
(拍手)

00:27:58.846 --> 00:28:04.551 align:start position:20% line:-2
Collectionプロトコルにも
確率要素を加えました

00:27:58.846 --> 00:28:04.551 align:start position:20% line:-2
Collectionプロトコルにも
確率要素を加えました

00:28:04.685 --> 00:28:11.859 align:start position:16% line:-2
空のCollectionを渡した場合は
null値が返されます

00:28:12.493 --> 00:28:15.729 align:start position:21% line:-1
最後にshuffleメソッドです

00:28:15.829 --> 00:28:21.935 align:start position:21% line:-2
対象のCollection要素の
乱数配列を可能にします

00:28:23.537 --> 00:28:28.008 align:start position:16% line:-2
デフォルトのRandom Number
Generatorを勧めますが

00:28:28.242 --> 00:28:30.210 align:start position:30% line:-1
それ以外でも構いません

00:28:30.611 --> 00:28:36.717 align:start position:30% line:-2
乱数生成プロトコルに
適合する型を書き込めば

00:28:36.817 --> 00:28:39.553 align:start position:30% line:-1
APIに渡すことができ

00:28:39.653 --> 00:28:45.425 align:start position:29% line:-2
乱数を生成する多重定義を
持つことができます

00:28:47.027 --> 00:28:53.200 align:start position:27% line:-2
ビルド設定チェックについて
もう少し詳しくお話しします

00:28:54.468 --> 00:28:56.870 align:start position:32% line:-1
よくあるパターンです

00:28:56.970 --> 00:29:01.875 align:start position:23% line:-2
iOSとmacOSで利用できる
Swiftコードがあります

00:28:56.970 --> 00:29:01.875 align:start position:23% line:-2
iOSとmacOSで利用できる
Swiftコードがあります

00:29:01.975 --> 00:29:05.379 align:start position:21% line:-1
iOSでUIkitを使うとします

00:29:05.479 --> 00:29:08.515 align:start position:18% line:-1
macOSではAppKitを使います

00:29:08.782 --> 00:29:13.854 align:start position:21% line:-2
まずは“#if”でコンパイル時間
チェックを書き込み

00:29:13.954 --> 00:29:18.091 align:start position:34% line:-2
UIkitが使える
OSをリストします

00:29:18.492 --> 00:29:23.297 align:start position:25% line:-2
重要なのは
どのOSで実行するかではなく

00:29:23.397 --> 00:29:25.432 align:start position:27% line:-1
UIkitのインポートです

00:29:25.532 --> 00:29:30.938 align:start position:21% line:-2
Swift 4.2では
importビルド設定命令を加え

00:29:31.572 --> 00:29:33.874 align:start position:30% line:-1
より使いやすくしました

00:29:33.974 --> 00:29:36.143 align:start position:43% line:-1
(拍手)

00:29:36.243 --> 00:29:41.014 align:start position:25% line:-2
Swift 4.2の新機能で
さらにコードを改善できます

00:29:41.115 --> 00:29:45.119 align:start position:32% line:-2
例えばAppKitも
チェックするとします

00:29:45.219 --> 00:29:48.088 align:start position:27% line:-2
UIkitもAppKitも
使えないような―

00:29:48.188 --> 00:29:50.257 align:start position:30% line:-1
例えばLinuxの場合

00:29:50.357 --> 00:29:56.163 align:start position:21% line:-2
“#error”ビルド命令を使い
エラーメッセージを作ります

00:29:57.464 --> 00:30:00.767 align:start position:32% line:-2
この次も
ボイラープレートです

00:29:57.464 --> 00:30:00.767 align:start position:32% line:-2
この次も
ボイラープレートです

00:30:01.535 --> 00:30:06.673 align:start position:27% line:-2
シミュレータで
条件付きコンパイルをする時

00:30:06.773 --> 00:30:13.547 align:start position:20% line:-2
Swift 4では すべてをコピー
ペーストしなければなりません

00:30:14.047 --> 00:30:18.685 align:start position:11% line:-2
Swift 4.2では
targetEnvironmentが使えます

00:30:18.786 --> 00:30:23.423 align:start position:29% line:-2
目的を明確にし
コンパイルしているのが―

00:30:23.524 --> 00:30:26.427 align:start position:23% line:-1
シミュレータなのか確認できます

00:30:26.793 --> 00:30:31.698 align:start position:14% line:-2
同時に FIXMEを“#warning”
ビルド命令に置き換え

00:30:31.832 --> 00:30:36.637 align:start position:29% line:-2
あとでFIXMEの修正を
忘れないようにします

00:30:37.971 --> 00:30:42.876 align:start position:30% line:-2
これで大体 新しい
機能の話は終わりました

00:30:42.976 --> 00:30:45.312 align:start position:30% line:-1
少しだけ別の話をします

00:30:45.913 --> 00:30:49.983 align:start position:0% line:-2
Implicitly Unwrapped Optionalに
関してです

00:30:50.217 --> 00:30:51.151 align:start position:45% line:-1
さて―

00:30:51.785 --> 00:30:55.289 align:start position:0% line:-2
Implicitly Unwrapped Optionalは
複雑です

00:30:55.689 --> 00:31:00.060 align:start position:29% line:-2
まずはメンタルモデルから
見ていきます

00:30:55.689 --> 00:31:00.060 align:start position:29% line:-2
まずはメンタルモデルから
見ていきます

00:31:00.160 --> 00:31:01.595 align:start position:36% line:-1
どういうものか？

00:31:01.895 --> 00:31:06.467 align:start position:32% line:-2
Swift 3より
式の型ではありません

00:31:06.567 --> 00:31:08.202 align:start position:36% line:-1
そうは考えません

00:31:08.302 --> 00:31:13.407 align:start position:30% line:-2
代わりに宣言の属性だと
考えてください

00:31:13.941 --> 00:31:17.678 align:start position:34% line:-2
こういった宣言を
まずコンパイラは―

00:31:17.778 --> 00:31:21.181 align:start position:20% line:-1
Optionalとして型検査します

00:31:21.281 --> 00:31:24.551 align:start position:36% line:-2
そこでつじつまが
合わない場合

00:31:24.651 --> 00:31:29.189 align:start position:29% line:-2
アンラップ後
マークをして型検査します

00:31:30.190 --> 00:31:32.826 align:start position:34% line:-1
例を見てみましょう

00:31:33.160 --> 00:31:34.795 align:start position:34% line:-1
関数が２つあります

00:31:34.895 --> 00:31:38.532 align:start position:14% line:-2
Implicitly Unwrapped
Optionalの整数と

00:31:38.632 --> 00:31:41.568 align:start position:27% line:-1
どんな型にも対応する値です

00:31:41.735 --> 00:31:45.606 align:start position:32% line:-2
１つ目の結果で
２つ目を呼び出します

00:31:45.839 --> 00:31:50.644 align:start position:21% line:-2
AnyにOptional整数値を
格納できるので

00:31:50.744 --> 00:31:53.313 align:start position:29% line:-1
強制アンラップは不要です

00:31:53.413 --> 00:31:56.316 align:start position:23% line:-1
値はOptionalになります

00:31:57.918 --> 00:32:00.320 align:start position:30% line:-1
２つ目の例を見ましょう

00:31:57.918 --> 00:32:00.320 align:start position:30% line:-1
２つ目の例を見ましょう

00:32:00.921 --> 00:32:04.858 align:start position:30% line:-2
ここで１つ目の関数は…
間違えました

00:32:04.958 --> 00:32:07.294 align:start position:30% line:-1
２つ目の関数は整数です

00:32:07.394 --> 00:32:11.865 align:start position:30% line:-2
従って １つ目の結果で
２つ目を呼び出しても

00:32:12.132 --> 00:32:16.403 align:start position:20% line:-2
整数のあるべき所に
Optional整数値を渡せません

00:32:16.503 --> 00:32:19.439 align:start position:34% line:-2
コンパイラが
強制アンラップして

00:32:19.706 --> 00:32:23.744 align:start position:34% line:-2
整数同士になるので
問題ありません

00:32:24.845 --> 00:32:29.883 align:start position:5% line:-2
このメンタルモデルでImplicitly
Unwrapped Optionalが説明できます

00:32:30.217 --> 00:32:35.989 align:start position:27% line:-2
しかし最近までモデルが
機能しない例外もありました

00:32:36.223 --> 00:32:42.029 align:start position:7% line:-2
別の型のImplicitly Unwrapped
Optionalは使えないからです

00:32:42.329 --> 00:32:44.631 align:start position:23% line:-1
Swift 4.2でも同じです

00:32:44.731 --> 00:32:48.635 align:start position:7% line:-2
Implicitly Unwrapped整数値の
配列は置けません

00:32:49.236 --> 00:32:53.774 align:start position:29% line:-2
しかしSwift 4で
こんなケースがありました

00:32:53.874 --> 00:32:59.213 align:start position:5% line:-2
Implicitly Unwrapped整数値でも
型エイリアスを定義でき

00:32:59.313 --> 00:33:02.115 align:start position:27% line:-1
配列を作ることができました

00:32:59.313 --> 00:33:02.115 align:start position:27% line:-1
配列を作ることができました

00:33:02.216 --> 00:33:07.254 align:start position:27% line:-2
しかしコンパイラの生成した
コードは 複雑でした

00:33:07.488 --> 00:33:11.725 align:start position:30% line:-2
Swift 4.2では
この機能を実装し直し

00:33:11.825 --> 00:33:16.130 align:start position:34% line:-2
メンタルモデルに
沿うようにしました

00:33:16.296 --> 00:33:21.135 align:start position:25% line:-2
ご覧のコードが
コンパイル時間の警告を出力し

00:33:21.235 --> 00:33:27.908 align:start position:23% line:-2
Optionalの整数値として
コンパイラが解析します

00:33:28.475 --> 00:33:33.914 align:start position:25% line:-2
極端なケースなので
通常のコードには影響しません

00:33:34.014 --> 00:33:37.084 align:start position:27% line:-1
しかし気になるようであれば

00:33:37.184 --> 00:33:40.487 align:start position:32% line:-2
Swift.orgの
ブログをご覧ください

00:33:40.587 --> 00:33:46.160 align:start position:29% line:-2
変更された点について
詳しい解説が載っています

00:33:47.294 --> 00:33:50.797 align:start position:29% line:-1
では最後の議題に移ります

00:33:50.898 --> 00:33:54.201 align:start position:34% line:-2
メモリへの
排他的チェックです

00:33:55.102 --> 00:34:01.475 align:start position:23% line:-2
Swift 4にもメモリの
排他的チェック機能がありました

00:33:55.102 --> 00:34:01.475 align:start position:23% line:-2
Swift 4にもメモリの
排他的チェック機能がありました

00:34:01.575 --> 00:34:05.312 align:start position:29% line:-2
コンパイル時間と
ランタイムのチェックです

00:34:05.412 --> 00:34:09.149 align:start position:34% line:-2
特定の動作の実行が
制限されました

00:34:09.248 --> 00:34:14.521 align:start position:30% line:-2
同じメモリを使っての
作業ができませんでした

00:34:14.788 --> 00:34:17.424 align:start position:32% line:-1
では例をご覧ください

00:34:18.625 --> 00:34:23.597 align:start position:32% line:-2
OSパスのデータ型を
実装するコードです

00:34:23.697 --> 00:34:27.367 align:start position:32% line:-2
パスコンポーネントの
配列です

00:34:27.534 --> 00:34:29.536 align:start position:20% line:-1
withAppendedメソッドで

00:34:30.204 --> 00:34:32.639 align:start position:32% line:-1
配列に要素を加えます

00:34:32.906 --> 00:34:35.476 align:start position:32% line:-1
クロージャを呼び出し

00:34:35.576 --> 00:34:38.011 align:start position:30% line:-1
配列から要素を除きます

00:34:38.178 --> 00:34:42.049 align:start position:27% line:-2
コードはSwift 4でも
有効です

00:34:42.750 --> 00:34:45.853 align:start position:23% line:-1
しかし パスのデータ型を見ると

00:34:46.420 --> 00:34:49.857 align:start position:36% line:-2
パスが局所変数に
格納されています

00:34:49.956 --> 00:34:52.125 align:start position:20% line:-1
withAppendedを呼び出し

00:34:52.226 --> 00:34:57.364 align:start position:29% line:-2
クロージャ内の局所変数を
再度表示します

00:34:57.464 --> 00:34:59.032 align:start position:38% line:-1
どこに問題が？

00:34:59.333 --> 00:35:03.070 align:start position:30% line:-2
コードが
あいまいになっています

00:34:59.333 --> 00:35:03.070 align:start position:30% line:-2
コードが
あいまいになっています

00:35:03.470 --> 00:35:07.574 align:start position:29% line:-2
クロージャ内の
局所変数にアクセスした時

00:35:07.674 --> 00:35:12.946 align:start position:23% line:-2
withAppendedにより
数値が変更されています

00:35:13.180 --> 00:35:15.549 align:start position:30% line:-1
あいまいな点はこうです

00:35:15.649 --> 00:35:21.388 align:start position:16% line:-2
withAppendedで呼び出す前の
パスの値を指すのか

00:35:21.488 --> 00:35:26.260 align:start position:32% line:-2
変更されたあとの
現在値を指すのかです

00:35:26.660 --> 00:35:32.532 align:start position:25% line:-2
Swift 4ではコンパイル
時間エラーとされていました

00:35:32.633 --> 00:35:37.137 align:start position:29% line:-2
これを解消するには
コンパイラに命令をします

00:35:37.237 --> 00:35:39.506 align:start position:32% line:-1
新しい値が得たいなら

00:35:39.606 --> 00:35:44.711 align:start position:25% line:-2
クロージャにパラメータとして
渡すだけです

00:35:45.846 --> 00:35:48.048 align:start position:34% line:-1
これを見てください

00:35:48.148 --> 00:35:51.852 align:start position:34% line:-2
ほぼ同じ機能ですが
ジェネリックで―

00:35:51.952 --> 00:35:54.988 align:start position:27% line:-1
パラメータが戻り値の型です

00:35:55.255 --> 00:36:02.496 align:start position:27% line:-2
この場合も クロージャ内の
パス値は同じくあいまいです

00:35:55.255 --> 00:36:02.496 align:start position:27% line:-2
この場合も クロージャ内の
パス値は同じくあいまいです

00:36:02.629 --> 00:36:07.234 align:start position:21% line:-2
Swift 4では このエラーを
察知できませんでした

00:36:08.168 --> 00:36:12.139 align:start position:30% line:-2
Swift 4.2では
排他的チェックを改善し

00:36:12.239 --> 00:36:15.609 align:start position:34% line:-2
この あいまいさを
察知します

00:36:16.477 --> 00:36:18.879 align:start position:34% line:-1
別の解決策としては

00:36:19.046 --> 00:36:24.385 align:start position:25% line:-2
パラメータとしてクロージャに
渡しても修正可能です

00:36:25.652 --> 00:36:27.988 align:start position:34% line:-1
この改善点に加えて

00:36:28.088 --> 00:36:33.160 align:start position:25% line:-2
リリースビルドにも
排他的チェックを追加しました

00:36:33.260 --> 00:36:37.197 align:start position:23% line:-1
パフォーマンスが重要でなければ

00:36:37.297 --> 00:36:40.467 align:start position:27% line:-1
永続的な使用をお勧めします

00:36:40.567 --> 00:36:45.672 align:start position:29% line:-2
今後 負荷が削減され
常に使えるレベルになれば

00:36:45.772 --> 00:36:50.043 align:start position:30% line:-2
さらなる保護機能として
役立つでしょう

00:36:50.144 --> 00:36:54.748 align:start position:25% line:-2
配列範囲のチェックや
整数オーバーフローと同じです

00:36:56.149 --> 00:37:00.788 align:start position:25% line:-2
今日お話しできなかったことも
多くあります

00:36:56.149 --> 00:37:00.788 align:start position:25% line:-2
今日お話しできなかったことも
多くあります

00:37:02.022 --> 00:37:05.392 align:start position:34% line:-2
アプリケーションで
試してください

00:37:05.492 --> 00:37:07.628 align:start position:36% line:-1
新たな機能を試し

00:37:07.728 --> 00:37:12.299 align:start position:30% line:-2
質問があれば
いつでも尋ねてください

00:37:12.466 --> 00:37:13.367 align:start position:41% line:-1
ありがとう

00:37:13.700 --> 00:37:19.540 align:start position:43% line:-1
(拍手)
