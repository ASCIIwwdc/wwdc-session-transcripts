WEBVTT

00:00:07.074 --> 00:00:15.649 align:start position:43% line:-1
(音楽)

00:00:18.118 --> 00:00:24.291 align:start position:43% line:-1
（拍手）

00:00:24.958 --> 00:00:28.662 align:start position:32% line:-2
ご参加いただき
ありがとうございます

00:00:28.762 --> 00:00:32.399 align:start position:18% line:-2
今日は新しいCocoa Touchの
紹介をします

00:00:33.400 --> 00:00:36.570 align:start position:34% line:-2
いつもなら
エライザがいますが

00:00:36.670 --> 00:00:39.206 align:start position:30% line:-1
今年は私がお話しします

00:00:39.306 --> 00:00:42.075 align:start position:27% line:-1
彼女のことは心配無用ですよ

00:00:43.010 --> 00:00:47.014 align:start position:30% line:-2
今朝のトピックは
３つの主なカテゴリです

00:00:47.614 --> 00:00:52.753 align:start position:27% line:-2
まずはパフォーマンスを含む
フレームワークの更新

00:00:53.420 --> 00:00:55.856 align:start position:30% line:-1
そしてAPIの機能強化

00:00:55.956 --> 00:00:59.526 align:start position:29% line:-2
SDKには
多くの異なるAPIがあり

00:00:59.626 --> 00:01:01.995 align:start position:34% line:-2
通知やメッセージも
その一部です

00:00:59.626 --> 00:01:01.995 align:start position:34% line:-2
通知やメッセージも
その一部です

00:01:02.563 --> 00:01:05.331 align:start position:14% line:-1
そして最後にSiri Shortcuts

00:01:05.933 --> 00:01:08.168 align:start position:30% line:-1
では最初のトピックから

00:01:08.468 --> 00:01:10.070 align:start position:29% line:-1
パフォーマンスの更新です

00:01:11.705 --> 00:01:15.409 align:start position:30% line:-2
次の３つの領域について
説明します

00:01:15.742 --> 00:01:19.012 align:start position:27% line:-2
スクロール メモリ
Auto Layoutです

00:01:19.746 --> 00:01:21.415 align:start position:38% line:-1
本題に入る前に

00:01:21.515 --> 00:01:25.819 align:start position:32% line:-2
スクロールに関する
背景情報をお話します

00:01:28.088 --> 00:01:32.392 align:start position:32% line:-2
iOSのスクロールは
とても一般的です

00:01:32.860 --> 00:01:38.432 align:start position:29% line:-2
コンテンツを画面に表示し
ただ移動させているだけ

00:01:38.799 --> 00:01:42.703 align:start position:30% line:-2
フレームはとても容易に
生成できます

00:01:42.803 --> 00:01:44.938 align:start position:34% line:-1
負荷がないからです

00:01:45.639 --> 00:01:49.009 align:start position:32% line:-2
今後の新規のビューに
関しては

00:01:49.309 --> 00:01:54.314 align:start position:27% line:-2
最初のフレームの生成が
以前の低負荷なものと比べて

00:01:54.414 --> 00:01:56.250 align:start position:32% line:-1
少し高負荷になります

00:01:57.451 --> 00:02:01.588 align:start position:34% line:-2
一旦 読み込めば
負荷はかかりません

00:01:57.451 --> 00:02:01.588 align:start position:34% line:-2
一旦 読み込めば
負荷はかかりません

00:02:02.022 --> 00:02:07.060 align:start position:32% line:-2
CPU上での作業量も
かなり少なくなります

00:02:09.163 --> 00:02:14.368 align:start position:27% line:-2
高負荷なフレーム生成の際は
何が起きているのか？

00:02:14.768 --> 00:02:17.838 align:start position:29% line:-2
UITableViewの
観点から考えます

00:02:17.938 --> 00:02:21.275 align:start position:18% line:-2
UICollectionViewでも
同様です

00:02:21.375 --> 00:02:25.579 align:start position:30% line:-2
他のビューでも
似たようなものでしょう

00:02:26.813 --> 00:02:32.186 align:start position:25% line:-2
高負荷なフレームの生成は
TableViewの実装から

00:02:32.286 --> 00:02:34.588 align:start position:11% line:-2
cellForRowAt indexPath
メソッドです

00:02:36.056 --> 00:02:39.593 align:start position:32% line:-2
まず表示したいセルを
取得するために

00:02:39.760 --> 00:02:43.230 align:start position:27% line:-2
再利用可能な
キューからデキューを試みる

00:02:44.031 --> 00:02:49.436 align:start position:29% line:-2
利用不可の場合は
メモリの割り当てをします

00:02:51.004 --> 00:02:54.575 align:start position:34% line:-2
セルを取得したら
モデルデータを入力

00:02:54.875 --> 00:02:58.579 align:start position:30% line:-2
アプリケーションにより
費用は異なりますが

00:02:58.679 --> 00:03:02.749 align:start position:32% line:-2
かなり高負荷な操作を
カバーできるでしょう

00:02:58.679 --> 00:03:02.749 align:start position:32% line:-2
かなり高負荷な操作を
カバーできるでしょう

00:03:02.850 --> 00:03:07.788 align:start position:29% line:-2
例えばデータベースからの
データの読み込みなどです

00:03:08.155 --> 00:03:11.391 align:start position:27% line:-1
費用は気になるところですが

00:03:11.492 --> 00:03:16.096 align:start position:32% line:-2
この方法が続いていく
傾向にあると思います

00:03:17.264 --> 00:03:20.934 align:start position:36% line:-2
高負荷な作業は
これでは終わらず

00:03:21.034 --> 00:03:22.736 align:start position:34% line:-1
このメソッドでは―

00:03:22.836 --> 00:03:27.741 align:start position:30% line:-2
セルを表示させるために
さらなる作業が必要です

00:03:28.141 --> 00:03:32.246 align:start position:32% line:-2
次はセルへの
コンテンツの配置です

00:03:32.346 --> 00:03:35.649 align:start position:32% line:-2
ビューのサイズ設定や
正しい位置情報

00:03:36.049 --> 00:03:39.620 align:start position:30% line:-2
これには
相当な時間がかかります

00:03:39.720 --> 00:03:44.324 align:start position:27% line:-2
テキストの測定といった
高負荷な操作を含むからです

00:03:45.626 --> 00:03:48.262 align:start position:29% line:-1
すべてが適切に決まったら

00:03:48.362 --> 00:03:53.567 align:start position:30% line:-2
ドローコールを使い
コンテンツを生成します

00:03:53.700 --> 00:03:58.005 align:start position:21% line:-2
セル内のサブビューに対し
drawRectを呼び出すのです

00:03:58.238 --> 00:04:00.841 align:start position:34% line:-2
この作業も長時間に
わたります

00:03:58.238 --> 00:04:00.841 align:start position:34% line:-2
この作業も長時間に
わたります

00:04:00.941 --> 00:04:04.178 align:start position:32% line:-2
テキスト描画のような
作業だからです

00:04:05.846 --> 00:04:10.551 align:start position:29% line:-2
このコードにより
多くの処理を実行しますが

00:04:11.018 --> 00:04:13.921 align:start position:29% line:-1
作業時間の短縮も必要です

00:04:14.087 --> 00:04:18.392 align:start position:30% line:-2
我々の60ヘルツの
デバイスだと16ミリ秒

00:04:18.492 --> 00:04:22.496 align:start position:30% line:-2
フレームは欠けず
スクロールも滑らかです

00:04:23.030 --> 00:04:26.400 align:start position:30% line:-2
120ヘルツの
iPad Proでは―

00:04:26.767 --> 00:04:30.003 align:start position:34% line:-2
作業完了まで
わずか８ミリ秒です

00:04:30.103 --> 00:04:33.307 align:start position:36% line:-2
迅速な処理が
求められるのです

00:04:34.241 --> 00:04:39.313 align:start position:9% line:-2
助けになるのがiOS 10の
Cell Pre-Fetching APIです

00:04:39.513 --> 00:04:43.083 align:start position:34% line:-2
そのアイデアは
この作業のためです

00:04:43.383 --> 00:04:45.385 align:start position:27% line:-1
セルにモデルデータを入力し

00:04:45.486 --> 00:04:50.424 align:start position:29% line:-2
不可欠な部分を
需要に応じて取り出します

00:04:50.691 --> 00:04:53.393 align:start position:29% line:-2
早い段階の
バックグラウンド処理なら

00:04:53.493 --> 00:04:56.296 align:start position:29% line:-1
他の作業とは重なりません

00:04:56.396 --> 00:04:59.500 align:start position:32% line:-2
特に低負荷な
スクロールフレームの

00:05:00.534 --> 00:05:02.836 align:start position:32% line:-1
導入はとても簡単です

00:05:03.036 --> 00:05:06.773 align:start position:29% line:-2
UITableViewの
先読みプロトコルは

00:05:06.874 --> 00:05:10.744 align:start position:32% line:-2
２つのメソッドがあり
必要なのは１つです

00:05:10.878 --> 00:05:16.316 align:start position:27% line:-2
それがデータ読み込みなどの
高負荷な作業の移動です

00:05:16.416 --> 00:05:19.520 align:start position:29% line:-1
処理を移動することにより

00:05:19.620 --> 00:05:23.524 align:start position:30% line:-2
セルが準備され
必要な時に表示されます

00:05:25.792 --> 00:05:29.596 align:start position:32% line:-2
これは大きな成功だと
言えるでしょう

00:05:30.230 --> 00:05:34.034 align:start position:27% line:-2
ただiOS 12のAppを
見てみると―

00:05:34.134 --> 00:05:38.972 align:start position:30% line:-2
この処理が多くの問題を
起こしていました

00:05:39.072 --> 00:05:41.108 align:start position:32% line:-1
実際に見てみましょう

00:05:43.076 --> 00:05:48.482 align:start position:25% line:-2
iPhone 6 Plusの
スクロール時のトレースです

00:05:49.149 --> 00:05:54.521 align:start position:27% line:-2
表示したいフレームが
垂直のバーで示されています

00:05:54.955 --> 00:05:58.125 align:start position:32% line:-2
交互の明暗は
各フレームを示します

00:05:58.225 --> 00:06:01.428 align:start position:32% line:-2
変更とともに
スワップしたものです

00:05:58.225 --> 00:06:01.428 align:start position:32% line:-2
変更とともに
スワップしたものです

00:06:01.828 --> 00:06:04.331 align:start position:30% line:-1
幅の広い明るい青色部分

00:06:04.431 --> 00:06:09.603 align:start position:25% line:-2
ここでは同一のフレームが
２フレーム分 居座ったのです

00:06:09.903 --> 00:06:12.472 align:start position:30% line:-1
顧客がこの現象を見ると

00:06:12.573 --> 00:06:17.344 align:start position:29% line:-2
フレームの欠落や
スクロール不良と考えます

00:06:18.178 --> 00:06:19.613 align:start position:36% line:-1
さてどうするか？

00:06:20.247 --> 00:06:22.816 align:start position:29% line:-1
ここに赤いバーがあります

00:06:22.916 --> 00:06:26.520 align:start position:32% line:-2
先ほどの高負荷作業に
費やした時間です

00:06:26.720 --> 00:06:29.990 align:start position:29% line:-2
IndexPathや
レイアウトなどすべてです

00:06:30.157 --> 00:06:34.461 align:start position:29% line:-2
明らかに16ミリ秒よりも
長くかかっています

00:06:34.928 --> 00:06:39.066 align:start position:29% line:-2
このデバイスは
新規フレームのみ表示可能

00:06:39.166 --> 00:06:41.368 align:start position:32% line:-1
時間の制限もあります

00:06:41.768 --> 00:06:46.440 align:start position:27% line:-2
その期限を超えると
同じフレームは表示できない

00:06:46.540 --> 00:06:47.908 align:start position:38% line:-1
残念な事態です

00:06:48.175 --> 00:06:49.610 align:start position:39% line:-1
原因は何か？

00:06:49.710 --> 00:06:54.147 align:start position:29% line:-2
Appは先読みメソッドを
実装しており

00:06:54.248 --> 00:06:57.851 align:start position:27% line:-1
迅速に処理できるはずでした

00:06:58.352 --> 00:07:01.288 align:start position:27% line:-1
トレースを詳しく見ましょう

00:06:58.352 --> 00:07:01.288 align:start position:27% line:-1
トレースを詳しく見ましょう

00:07:01.922 --> 00:07:07.694 align:start position:25% line:-2
先読みAPIとカレントセルの
呼び出しが同時です

00:07:08.061 --> 00:07:10.597 align:start position:34% line:-2
ここで呼び出された
セルは―

00:07:10.697 --> 00:07:13.567 align:start position:30% line:-1
将来必要になるセルです

00:07:13.667 --> 00:07:15.836 align:start position:32% line:-1
処理が重なって起こり

00:07:15.969 --> 00:07:20.908 align:start position:32% line:-2
CPU上でフレームの
競合が起こりました

00:07:21.008 --> 00:07:24.778 align:start position:30% line:-2
まだ必要のないデータを
取り込んだのです

00:07:25.679 --> 00:07:30.217 align:start position:27% line:-2
その競合により
時間がかかってしまいました

00:07:30.651 --> 00:07:32.119 align:start position:34% line:-1
iOS 12では―

00:07:32.219 --> 00:07:38.091 align:start position:27% line:-2
バックで実行する先読みの
スケジュールを改善しました

00:07:38.192 --> 00:07:43.997 align:start position:29% line:-2
CPUの競合を起こさず
連続的に実行させるのです

00:07:44.097 --> 00:07:48.168 align:start position:32% line:-2
カレントセルの
読み込み時間も短縮し

00:07:48.268 --> 00:07:50.871 align:start position:29% line:-1
フレームの欠落を防ぎます

00:07:51.772 --> 00:07:56.743 align:start position:43% line:-1
（拍手）

00:07:56.877 --> 00:07:59.513 align:start position:30% line:-1
修正後のAppの分析で

00:07:59.613 --> 00:08:05.219 align:start position:29% line:-2
フレーム欠落の驚くべき
新たな原因を発見しました

00:07:59.613 --> 00:08:05.219 align:start position:29% line:-2
フレーム欠落の驚くべき
新たな原因を発見しました

00:08:05.319 --> 00:08:09.256 align:start position:36% line:-2
それはデバイスに
負荷がない状態で

00:08:09.356 --> 00:08:13.994 align:start position:32% line:-2
バックでの実行もなく
スクロールのみでした

00:08:14.328 --> 00:08:17.998 align:start position:29% line:-2
それでも
フレーム欠落がありました

00:08:18.098 --> 00:08:22.035 align:start position:29% line:-2
バックグランド作業時より
多かったのです

00:08:22.402 --> 00:08:24.238 align:start position:38% line:-1
意味が分からず

00:08:24.338 --> 00:08:26.273 align:start position:36% line:-1
原因を探りました

00:08:26.373 --> 00:08:27.841 align:start position:34% line:-1
レベルを落として―

00:08:27.941 --> 00:08:33.480 align:start position:25% line:-2
予定されていた
CPUの動きを観察したのです

00:08:33.847 --> 00:08:35.649 align:start position:29% line:-1
別のトレースを見ましょう

00:08:36.250 --> 00:08:38.051 align:start position:36% line:-1
先ほどと同じです

00:08:38.150 --> 00:08:41.321 align:start position:38% line:-2
幅の広い部分が
フレームの欠落

00:08:41.421 --> 00:08:42.990 align:start position:38% line:-1
原因は我々です

00:08:43.457 --> 00:08:47.361 align:start position:25% line:-2
ここでCPUパフォーマンスの
時間が分かります

00:08:47.661 --> 00:08:52.065 align:start position:27% line:-2
低負荷なフレームで
パフォーマンスが低いのです

00:08:52.366 --> 00:08:57.604 align:start position:29% line:-2
バックの実行もなく
スクロールのみだからです

00:08:57.704 --> 00:09:00.941 align:start position:36% line:-2
高負荷な作業を
していない時には

00:08:57.704 --> 00:09:00.941 align:start position:36% line:-2
高負荷な作業を
していない時には

00:09:01.041 --> 00:09:05.345 align:start position:34% line:-2
CPUは低くなり
電池も長く持ちます

00:09:05.479 --> 00:09:06.713 align:start position:41% line:-1
それでいい

00:09:06.980 --> 00:09:11.185 align:start position:30% line:-2
問題は立ち上がるまでの
時間でした

00:09:11.385 --> 00:09:13.487 align:start position:23% line:-1
keynoteと同様の現象です

00:09:14.688 --> 00:09:17.257 align:start position:29% line:-1
最終的に立ち上った時には

00:09:17.357 --> 00:09:21.929 align:start position:27% line:-2
必要なセルを表示させるには
遅すぎました

00:09:22.029 --> 00:09:24.264 align:start position:32% line:-1
フレームは欠落します

00:09:24.765 --> 00:09:28.302 align:start position:29% line:-2
我々はフルソフトウエアを
持っているため

00:09:28.402 --> 00:09:33.106 align:start position:20% line:-2
iOS 12では高度なUIKitに
情報を格納し

00:09:33.207 --> 00:09:37.177 align:start position:30% line:-2
スクロールの状態や
危険域の把握に努めます

00:09:37.311 --> 00:09:42.115 align:start position:29% line:-2
その情報を低レベルの
CPUコントローラに移し

00:09:42.216 --> 00:09:46.653 align:start position:29% line:-2
より理知的に
発生した現象を把握します

00:09:46.753 --> 00:09:49.490 align:start position:29% line:-1
問題発生を予測するのです

00:09:49.590 --> 00:09:53.227 align:start position:25% line:-2
さらにCPUパフォーマンスの
デッドラインを―

00:09:53.327 --> 00:09:55.863 align:start position:29% line:-1
過去の要求から把握します

00:09:56.396 --> 00:09:58.298 align:start position:38% line:-1
この変更により

00:09:58.699 --> 00:10:00.968 align:start position:34% line:-1
読み込み開始後に―

00:09:58.699 --> 00:10:00.968 align:start position:34% line:-1
読み込み開始後に―

00:10:01.068 --> 00:10:05.639 align:start position:34% line:-2
CPUがより素早く
立ち上がります

00:10:05.739 --> 00:10:11.311 align:start position:27% line:-2
デッドラインを超えないため
適切な量にするのです

00:10:12.212 --> 00:10:17.518 align:start position:27% line:-2
この事実はiOSの
大きな改善をもたらしました

00:10:20.921 --> 00:10:25.559 align:start position:27% line:-2
すべてのアプリケーションは
拡張機能が利用できます

00:10:25.659 --> 00:10:29.696 align:start position:29% line:-2
しかもコストも
追加作業も必要ありません

00:10:30.197 --> 00:10:34.501 align:start position:29% line:-2
しかしやってほしいことも
あります

00:10:34.968 --> 00:10:40.007 align:start position:11% line:-2
Cell Pre-Fetching APIが
未導入の場合は

00:10:40.240 --> 00:10:41.441 align:start position:38% line:-1
検討を薦めます

00:10:41.542 --> 00:10:47.114 align:start position:27% line:-2
データを準備しておくことで
処理が短縮されるからです

00:10:49.082 --> 00:10:53.720 align:start position:30% line:-2
セル取り込み時の
危険域の観察も大切です

00:10:53.820 --> 00:10:56.423 align:start position:36% line:-2
デマンドの減少を
試みるのです

00:10:56.523 --> 00:11:02.329 align:start position:25% line:-2
iOS 12はニーズに応じて
期限内の処理を目指します

00:10:56.523 --> 00:11:02.329 align:start position:25% line:-2
iOS 12はニーズに応じて
期限内の処理を目指します

00:11:02.529 --> 00:11:06.967 align:start position:32% line:-2
ただ最も大切なことは
作業量の減少でしょう

00:11:07.067 --> 00:11:10.137 align:start position:29% line:-2
大切なのは
円滑なスクロール体験です

00:11:11.605 --> 00:11:13.807 align:start position:29% line:-1
以上がスクロールの話です

00:11:14.374 --> 00:11:17.778 align:start position:27% line:-1
次のトピックに移りましょう

00:11:17.978 --> 00:11:18.545 align:start position:41% line:-1
メモリです

00:11:19.580 --> 00:11:23.984 align:start position:32% line:-2
なぜここでメモリかと
お思いでしょうか

00:11:24.818 --> 00:11:27.855 align:start position:30% line:-1
これには意味があります

00:11:27.955 --> 00:11:32.392 align:start position:29% line:-2
メモリは
パフォーマンスだからです

00:11:32.759 --> 00:11:35.429 align:start position:30% line:-1
Appでメモリを使えば

00:11:35.863 --> 00:11:39.199 align:start position:36% line:-2
パフォーマンスに
影響を与えます

00:11:39.466 --> 00:11:41.301 align:start position:39% line:-1
なぜでしょう

00:11:41.401 --> 00:11:46.406 align:start position:32% line:-2
システム上のメモリを
高水準の概要で見ると

00:11:46.507 --> 00:11:48.575 align:start position:34% line:-1
問題はなさそうです

00:11:49.109 --> 00:11:53.447 align:start position:27% line:-2
システムそのものと
他のアプリケーションによる

00:11:53.547 --> 00:11:55.849 align:start position:30% line:-1
メモリが使用されており

00:11:56.216 --> 00:11:58.519 align:start position:27% line:-1
Appによる使用もあります

00:11:58.652 --> 00:12:04.124 align:start position:27% line:-2
新たな割り当て要求に対する
余地も残されています

00:11:58.652 --> 00:12:04.124 align:start position:27% line:-2
新たな割り当て要求に対する
余地も残されています

00:12:04.525 --> 00:12:09.897 align:start position:30% line:-2
中にはキャッシュを含む
メモリもあるでしょう

00:12:09.997 --> 00:12:12.366 align:start position:29% line:-1
急な要求を満たすために―

00:12:12.466 --> 00:12:16.370 align:start position:32% line:-2
すぐに使えるメモリも
あるはずですが

00:12:17.104 --> 00:12:19.773 align:start position:27% line:-1
大抵 何かに使われています

00:12:19.873 --> 00:12:21.975 align:start position:32% line:-1
ただ 利用は可能です

00:12:22.476 --> 00:12:25.579 align:start position:29% line:-2
アプリケーションの
メモリ要求で起こる事は？

00:12:25.879 --> 00:12:27.648 align:start position:34% line:-1
小さな要求であれば

00:12:27.748 --> 00:12:32.186 align:start position:34% line:-2
空き容量分を使えば
問題ないでしょう

00:12:32.486 --> 00:12:37.724 align:start position:27% line:-2
この場合は引き続き
問題なく作業を継続できます

00:12:39.526 --> 00:12:43.096 align:start position:34% line:-2
大きな要求だったら
どうでしょうか

00:12:43.263 --> 00:12:48.168 align:start position:30% line:-2
長時間は必要ないので
心配無用かもしれません

00:12:48.268 --> 00:12:52.039 align:start position:27% line:-2
ディスクから画像を取り込み
解凍したり

00:12:52.139 --> 00:12:55.742 align:start position:34% line:-2
画像処理の後
捨てるかもしれない

00:12:55.843 --> 00:12:59.112 align:start position:38% line:-2
何てことのない
素早い操作です

00:12:59.479 --> 00:13:01.081 align:start position:36% line:-1
大きい要求では？

00:12:59.479 --> 00:13:01.081 align:start position:36% line:-1
大きい要求では？

00:13:01.748 --> 00:13:06.019 align:start position:29% line:-2
今はシステムに取り込める
メモリが増えており

00:13:06.119 --> 00:13:08.422 align:start position:30% line:-1
満足ができない場合は―

00:13:08.522 --> 00:13:11.625 align:start position:36% line:-2
どこかでメモリを
探したりします

00:13:12.192 --> 00:13:17.631 align:start position:29% line:-2
この要求が収まるのは
グレー部分になるでしょう

00:13:18.832 --> 00:13:24.638 align:start position:29% line:-2
今のところ心配するのは
自分のAppだけでしょう

00:13:25.539 --> 00:13:26.073 align:start position:45% line:-1
しかし

00:13:26.740 --> 00:13:32.379 align:start position:27% line:-2
それぞれの顧客の要求により
影響が出てくるはずです

00:13:32.646 --> 00:13:37.451 align:start position:29% line:-2
もちろんAppへの影響が
現時点では重要です

00:13:37.718 --> 00:13:41.255 align:start position:34% line:-2
システムはメモリを
明け渡す必要があり

00:13:41.355 --> 00:13:45.959 align:start position:29% line:-2
実際 空きを見つけるのは
カーネルなのです

00:13:46.059 --> 00:13:50.430 align:start position:27% line:-2
カーネルがCPU上で操作し
利用可能にします

00:13:50.764 --> 00:13:53.100 align:start position:30% line:-1
メモリに費やす時間は―

00:13:53.200 --> 00:13:56.737 align:start position:29% line:-2
Appが行う本来の作業に
費やされるべきです

00:13:57.070 --> 00:14:02.176 align:start position:29% line:-2
大量の要求を受け入れるか
要求を減らすことで

00:13:57.070 --> 00:14:02.176 align:start position:29% line:-2
大量の要求を受け入れるか
要求を減らすことで

00:14:02.276 --> 00:14:07.080 align:start position:29% line:-2
Appのパフォーマンスに
大きな影響を与えます

00:14:07.181 --> 00:14:11.118 align:start position:34% line:-2
さらに顧客満足にも
つながるでしょう

00:14:12.619 --> 00:14:17.124 align:start position:30% line:-2
メモリ使用量の圧縮には
多くの方法があります

00:14:17.224 --> 00:14:20.527 align:start position:34% line:-2
分析や調査をしても
いいでしょう

00:14:20.727 --> 00:14:24.031 align:start position:29% line:-2
ここで１つのテクニックを
紹介します

00:14:24.131 --> 00:14:28.302 align:start position:25% line:-2
iOS 12でメモリ使用量の
減少を助けるのが

00:14:28.869 --> 00:14:31.138 align:start position:5% line:-1
Automatic Backing Storeです

00:14:31.839 --> 00:14:36.710 align:start position:29% line:-2
ポートレートモードで
プレーリードッグを描くと

00:14:37.244 --> 00:14:39.012 align:start position:39% line:-1
その容量は？

00:14:39.446 --> 00:14:42.616 align:start position:34% line:-2
iPhone Xの
解像度は横375

00:14:42.716 --> 00:14:46.086 align:start position:27% line:-2
アスペクト比を保護するため
縦は250です

00:14:47.621 --> 00:14:49.356 align:start position:36% line:-1
使用メモリ量は？

00:14:49.523 --> 00:14:55.662 align:start position:25% line:-2
375×250の３倍解像度で
ピクセルあたり64ビット

00:14:55.762 --> 00:15:01.735 align:start position:27% line:-2
ディープカラー対応のため
2.2メガバイトが必要です

00:14:55.762 --> 00:15:01.735 align:start position:27% line:-2
ディープカラー対応のため
2.2メガバイトが必要です

00:15:01.969 --> 00:15:07.074 align:start position:32% line:-2
妥当な数字ですが
メモリは消費されます

00:15:07.174 --> 00:15:10.878 align:start position:32% line:-2
完全な忠実性を持った
画像なので

00:15:10.978 --> 00:15:13.914 align:start position:29% line:-1
相当のメモリ量が必要です

00:15:14.014 --> 00:15:15.849 align:start position:32% line:-1
これは予測どおりです

00:15:16.350 --> 00:15:21.522 align:start position:27% line:-2
今度は忠実性のない
プレーリードッグを描きます

00:15:21.622 --> 00:15:25.359 align:start position:20% line:-2
Core Graphicsを使った
モノクロ画像です

00:15:25.459 --> 00:15:28.061 align:start position:18% line:-1
Apple Pencilで描きました

00:15:28.161 --> 00:15:29.797 align:start position:38% line:-1
こんな感じです

00:15:30.497 --> 00:15:34.868 align:start position:30% line:-2
この画に必要な
メモリはどれくらいか？

00:15:35.435 --> 00:15:38.906 align:start position:29% line:-1
実は同じメモリ量なのです

00:15:39.273 --> 00:15:43.577 align:start position:30% line:-2
メモリの使い方としては
良くありません

00:15:43.777 --> 00:15:48.649 align:start position:27% line:-2
特徴であるディープカラーも
使われていません

00:15:49.116 --> 00:15:51.151 align:start position:34% line:-1
改善の余地ありです

00:15:51.251 --> 00:15:54.888 align:start position:7% line:-2
iOS 12の
Automatic Backing Storeは

00:15:54.988 --> 00:15:58.125 align:start position:29% line:-1
このケースにぴったりです

00:15:58.759 --> 00:16:03.831 align:start position:25% line:-2
drawRectの実装により
バッキングストアに保存され

00:15:58.759 --> 00:16:03.831 align:start position:25% line:-2
drawRectの実装により
バッキングストアに保存され

00:16:03.931 --> 00:16:07.234 align:start position:29% line:-2
コンテンツの奥行きごとに
分けられます

00:16:07.334 --> 00:16:11.572 align:start position:32% line:-2
このモノクロの
スケッチの画像ですが

00:16:11.705 --> 00:16:15.275 align:start position:34% line:-2
自動的に８ビットに
定義されるでしょう

00:16:15.375 --> 00:16:17.744 align:start position:29% line:-1
64ビットではありません

00:16:17.911 --> 00:16:22.316 align:start position:30% line:-2
これにより各ビューの
要求メモリが減少します

00:16:22.449 --> 00:16:26.720 align:start position:25% line:-2
2.2メガバイトから
275キロバイトになりました

00:16:27.187 --> 00:16:32.392 align:start position:29% line:-2
異なるアプリケーションに
対応した大きな改善です

00:16:32.526 --> 00:16:36.497 align:start position:43% line:-1
（拍手）

00:16:36.830 --> 00:16:42.069 align:start position:25% line:-2
これはiOS 12 SDKに
デフォルト搭載されています

00:16:43.070 --> 00:16:47.474 align:start position:14% line:-2
UIViewに実装されたdrawRect
では自動で実行されます

00:16:47.574 --> 00:16:49.476 align:start position:7% line:-1
UIGraphicsImageRendererで

00:16:49.576 --> 00:16:52.913 align:start position:25% line:-2
オフスクリーンビットマップに
描画する際も同様です

00:16:53.113 --> 00:16:55.415 align:start position:0% line:-1
UIGraphicsImageRendererに関しては

00:16:55.516 --> 00:17:00.454 align:start position:27% line:-2
画の最終的な使用目的を
決めておく必要はありません

00:16:55.516 --> 00:17:00.454 align:start position:27% line:-2
画の最終的な使用目的を
決めておく必要はありません

00:17:00.554 --> 00:17:04.892 align:start position:27% line:-2
そのため
自動的な操作が必要ない場合

00:17:05.224 --> 00:17:09.863 align:start position:34% line:-2
希望の保存方法を
選ぶことができます

00:17:09.963 --> 00:17:15.536 align:start position:21% line:-2
例えば新しいRange APIで
拡張範囲を指定するのです

00:17:16.103 --> 00:17:21.241 align:start position:30% line:-2
UIImageについて
さらに多くを学ぶには―

00:17:21.340 --> 00:17:24.912 align:start position:30% line:-2
週の後半のセッションに
ご参加ください

00:17:26.079 --> 00:17:28.080 align:start position:32% line:-1
では次のトピックです

00:17:28.415 --> 00:17:30.984 align:start position:18% line:-1
Auto Layoutに移りましょう

00:17:31.718 --> 00:17:36.757 align:start position:16% line:-2
iOS 10のAuto Layoutを
大きく改善させました

00:17:36.857 --> 00:17:42.396 align:start position:21% line:-2
Auto Layoutの最適化は
とても困難だったのです

00:17:42.629 --> 00:17:47.434 align:start position:30% line:-2
iOS 12では標準で
高速になりました

00:17:47.534 --> 00:17:49.503 align:start position:32% line:-1
多くの事例があります

00:17:49.970 --> 00:17:53.173 align:start position:18% line:-1
Auto Layoutを分析しながら

00:17:53.273 --> 00:17:58.679 align:start position:27% line:-2
我々のシステムやAppでの
使用状況も考えました

00:17:58.812 --> 00:18:03.717 align:start position:30% line:-2
そしてたくさんの
欠陥が見つかったのです

00:17:58.812 --> 00:18:03.717 align:start position:30% line:-2
そしてたくさんの
欠陥が見つかったのです

00:18:03.951 --> 00:18:09.723 align:start position:29% line:-2
ここでは最適化のための
最良の方法をお見せします

00:18:10.724 --> 00:18:15.696 align:start position:29% line:-2
Auto Layoutの
速さを実感してください

00:18:16.230 --> 00:18:18.799 align:start position:27% line:-2
一般的なビューを追加して
Auto Layoutの―

00:18:18.899 --> 00:18:20.534 align:start position:36% line:-1
漸近特性を見ます

00:18:20.634 --> 00:18:24.738 align:start position:32% line:-2
一般的なユーザに対し
ビューを追加しました

00:18:25.606 --> 00:18:29.476 align:start position:34% line:-2
ビューの数を
劇的に増やすことで

00:18:29.576 --> 00:18:32.246 align:start position:27% line:-1
何が起きるかを見るためです

00:18:32.346 --> 00:18:34.615 align:start position:30% line:-1
膨大な数のビューにより

00:18:34.715 --> 00:18:38.452 align:start position:27% line:-2
パフォーマンスへの悪影響が
明らかになるのです

00:18:38.852 --> 00:18:41.655 align:start position:36% line:-2
その結果をもとに
最適化を行えば

00:18:41.755 --> 00:18:45.058 align:start position:29% line:-2
ビューの数が少なくても
高速化が実現できるのです

00:18:45.292 --> 00:18:49.162 align:start position:34% line:-2
最も単純なケースを
見てみましょう

00:18:49.263 --> 00:18:52.833 align:start position:32% line:-2
枠の中に
兄弟ビューがあります

00:18:53.000 --> 00:18:56.970 align:start position:30% line:-2
外枠や他のビューからの
制約はありますが

00:18:57.070 --> 00:19:00.240 align:start position:36% line:-2
互いの制約はなく
独立しています

00:18:57.070 --> 00:19:00.240 align:start position:36% line:-2
互いの制約はなく
独立しています

00:19:00.607 --> 00:19:04.044 align:start position:30% line:-2
iOS 11では
ビューの数を増やすほど

00:19:04.144 --> 00:19:07.080 align:start position:29% line:-1
コストは増えていきました

00:19:07.481 --> 00:19:12.186 align:start position:34% line:-2
これは当然のことで
想像しうる事態です

00:19:12.286 --> 00:19:15.722 align:start position:30% line:-2
基本的に
固定負荷がかかりますし

00:19:15.823 --> 00:19:19.026 align:start position:30% line:-2
独立した新たなビューを
追加するたびに

00:19:19.126 --> 00:19:21.662 align:start position:29% line:-1
固定負荷がかかるからです

00:19:22.496 --> 00:19:28.268 align:start position:23% line:-2
予測どおりの状態が
iOS 12でも続くはずでした

00:19:28.535 --> 00:19:32.773 align:start position:32% line:-2
しかし担当チームが
固定負荷の減少を試み

00:19:32.873 --> 00:19:36.343 align:start position:36% line:-2
ビューを低負荷に
追加できたのです

00:19:37.311 --> 00:19:39.880 align:start position:32% line:-1
さらに興味深い例です

00:19:39.980 --> 00:19:43.083 align:start position:36% line:-2
こちらは依存した
兄弟ビューです

00:19:43.283 --> 00:19:46.520 align:start position:36% line:-1
複数の子ビューが

00:19:46.620 --> 00:19:49.156 align:start position:30% line:-1
お互いを制約しています

00:19:49.256 --> 00:19:52.059 align:start position:30% line:-1
依存したレイアウトです

00:19:52.659 --> 00:19:57.664 align:start position:29% line:-2
残念ながらiOS 11の
漸近線は良くありません

00:19:58.131 --> 00:20:00.500 align:start position:34% line:-1
急増しているのです

00:19:58.131 --> 00:20:00.500 align:start position:34% line:-1
急増しているのです

00:20:00.634 --> 00:20:02.703 align:start position:34% line:-1
ビューを追加すると

00:20:02.803 --> 00:20:07.574 align:start position:30% line:-2
驚くほどのコストが
発生するのが分かります

00:20:07.808 --> 00:20:11.578 align:start position:34% line:-2
チームは原因を
必死で追求しました

00:20:11.678 --> 00:20:15.215 align:start position:32% line:-2
そしてアルゴリズムを
修正したのです

00:20:15.349 --> 00:20:19.086 align:start position:29% line:-2
iOS 12では緩やかな
増加になりました

00:20:19.186 --> 00:20:22.756 align:start position:43% line:-1
（拍手）

00:20:23.857 --> 00:20:28.328 align:start position:27% line:-2
チームは多くのケースで
固定負荷削減に努めています

00:20:29.096 --> 00:20:33.734 align:start position:29% line:-2
さて ネストビューという
一般的なビューがあります

00:20:33.834 --> 00:20:38.005 align:start position:34% line:-2
内側が外側から
制約を受けるのです

00:20:38.105 --> 00:20:41.241 align:start position:34% line:-2
Appでは一般的な
パターンで―

00:20:41.341 --> 00:20:45.746 align:start position:27% line:-2
残念ながらiOS 11での
コストは急増しました

00:20:45.913 --> 00:20:50.951 align:start position:23% line:-2
しかしこちらもiOS 12での
改善に成功しました

00:20:51.084 --> 00:20:54.288 align:start position:43% line:-1
（拍手）

00:20:55.022 --> 00:20:59.693 align:start position:14% line:-2
iOS 12のAuto Layoutでの
改善は多数あり

00:20:59.793 --> 00:21:04.398 align:start position:23% line:-2
iOS 12のインストール後に
実感できるでしょう

00:20:59.793 --> 00:21:04.398 align:start position:23% line:-2
iOS 12のインストール後に
実感できるでしょう

00:21:04.898 --> 00:21:08.368 align:start position:18% line:-1
Auto Layoutを習得するには

00:21:08.469 --> 00:21:11.438 align:start position:30% line:-2
さまざまなレイアウトを
実際に試し

00:21:11.538 --> 00:21:14.374 align:start position:32% line:-1
感覚を養ってください

00:21:14.474 --> 00:21:18.779 align:start position:27% line:-1
一般的な落とし穴については

00:21:18.879 --> 00:21:22.549 align:start position:32% line:-2
週後半のセッションを
チェックしてください

00:21:25.052 --> 00:21:29.389 align:start position:21% line:-2
最後のトピックは
Swiftificationです

00:21:30.791 --> 00:21:34.394 align:start position:29% line:-2
iOS 12では
Swift 4.2を導入

00:21:34.561 --> 00:21:37.264 align:start position:32% line:-2
Swift 4.2で
感じてほしいのは

00:21:37.364 --> 00:21:42.736 align:start position:29% line:-2
App全体でSwiftを
使用した時の快適さです

00:21:42.836 --> 00:21:49.076 align:start position:23% line:-2
特に他のSwiftとの間にある
相互作用を感じてほしいです

00:21:49.576 --> 00:21:51.445 align:start position:29% line:-1
我々はUIKitを査定し

00:21:51.545 --> 00:21:55.182 align:start position:29% line:-2
自然にフィットするように
しました

00:21:55.616 --> 00:22:00.854 align:start position:29% line:-2
UIKitに加えた変更も
自動に移行できたのです

00:21:55.616 --> 00:22:00.854 align:start position:29% line:-2
UIKitに加えた変更も
自動に移行できたのです

00:22:00.954 --> 00:22:04.758 align:start position:32% line:-2
この更新による
追加作業はありません

00:22:05.692 --> 00:22:09.897 align:start position:30% line:-2
お話ししている
３つのカテゴリについて

00:22:09.997 --> 00:22:16.303 align:start position:27% line:-2
SDKを確認すれば大幅な
改善と向上に気づくでしょう

00:22:16.603 --> 00:22:19.973 align:start position:32% line:-2
型 定数 関数の
ネスティングの話です

00:22:20.541 --> 00:22:22.876 align:start position:30% line:-1
まずは型のネスティング

00:22:23.510 --> 00:22:25.045 align:start position:30% line:-1
Swift 4において

00:22:25.145 --> 00:22:30.517 align:start position:9% line:-2
グローバル名前空間に
UIApplication.Stateの存在が

00:22:30.651 --> 00:22:36.356 align:start position:29% line:-2
このように他のクラスと
強力に併用されている場合

00:22:36.457 --> 00:22:38.625 align:start position:34% line:-2
クラス内に
ネスティングします

00:22:38.725 --> 00:22:43.297 align:start position:30% line:-2
我々はすべての列挙型や
グローバル型を調査

00:22:43.397 --> 00:22:46.733 align:start position:30% line:-2
そして関連するクラスの
子型へ移動

00:22:46.833 --> 00:22:49.670 align:start position:12% line:-2
これが
UIApplication.Stateです

00:22:49.770 --> 00:22:55.609 align:start position:27% line:-2
より強力なメッセージを送り
互いを見つけやすくなります

00:22:56.076 --> 00:23:00.180 align:start position:30% line:-2
それは理解力の向上にも
つながるうえに

00:22:56.076 --> 00:23:00.180 align:start position:30% line:-2
それは理解力の向上にも
つながるうえに

00:23:00.280 --> 00:23:02.516 align:start position:34% line:-1
混乱を避けられます

00:23:02.616 --> 00:23:05.352 align:start position:7% line:-2
UITabBarItemPositioningを
見ましょう

00:23:05.619 --> 00:23:08.689 align:start position:7% line:-2
UITabBar ItemPositioning
でしょうか？

00:23:08.789 --> 00:23:11.258 align:start position:5% line:-2
それとも
UITabBarItem Positioning？

00:23:11.725 --> 00:23:14.261 align:start position:30% line:-1
どちらでもいいのですが

00:23:15.229 --> 00:23:20.300 align:start position:5% line:-2
UITabBar ItemPositioningが
Swift 4.2では正解です

00:23:21.969 --> 00:23:25.939 align:start position:32% line:-2
型に加え多くの定数も
ネスティングしました

00:23:26.039 --> 00:23:29.276 align:start position:21% line:-2
Swift 4では
NSnotificationで―

00:23:29.376 --> 00:23:33.080 align:start position:11% line:-2
NSNotification.Nameという
名前空間でした

00:23:33.180 --> 00:23:37.784 align:start position:29% line:-2
関連するユーザ情報キーは
グローバル定数だけでした

00:23:38.018 --> 00:23:43.123 align:start position:25% line:-2
AppKitとの一貫性を保ち
型と関連づけるため

00:23:43.390 --> 00:23:46.326 align:start position:30% line:-2
クラスの下で
ネスティングをしました

00:23:46.427 --> 00:23:50.764 align:start position:20% line:-2
そのため変更指示なども
UIApplicationの下です

00:23:50.864 --> 00:23:56.803 align:start position:29% line:-2
ユーザキーも移したため
同じ位置に配置されました

00:23:58.205 --> 00:24:02.309 align:start position:27% line:-2
さらにUIKitの
グローバル定数も調査のうえ

00:23:58.205 --> 00:24:02.309 align:start position:27% line:-2
さらにUIKitの
グローバル定数も調査のうえ

00:24:02.409 --> 00:24:05.179 align:start position:29% line:-2
適切な位置にネスティング
しました

00:24:05.279 --> 00:24:08.649 align:start position:12% line:-2
UIFloatRangeZeroや
UIFloatRangeInfiniteも

00:24:08.749 --> 00:24:11.785 align:start position:25% line:-2
UIFloatRange上で
属性を持つだけでなく

00:24:11.919 --> 00:24:14.988 align:start position:34% line:-2
容易に見つけ
使うことができます

00:24:15.089 --> 00:24:19.927 align:start position:16% line:-2
UIFloatRangeには
.zeroや .infiniteを使い

00:24:20.060 --> 00:24:26.066 align:start position:25% line:-2
Xcodeが自動完了を提案し
意味のある役割を果たせます

00:24:28.035 --> 00:24:31.271 align:start position:30% line:-2
最後にグローバル関数の
調査です

00:24:31.472 --> 00:24:35.008 align:start position:27% line:-2
UIEdgeInsetsや
UIImageなどには

00:24:35.109 --> 00:24:38.445 align:start position:29% line:-2
異なる型の
グローバル関数があります

00:24:38.545 --> 00:24:44.251 align:start position:25% line:-2
Swift 4.2でこれらは
適切な型のメソッドになり

00:24:44.518 --> 00:24:46.854 align:start position:20% line:-1
insetRectが容易になります

00:24:46.954 --> 00:24:51.492 align:start position:25% line:-2
イメージからpngDataも
取得できます

00:24:52.192 --> 00:24:57.498 align:start position:43% line:-1
（拍手）

00:24:57.598 --> 00:25:00.901 align:start position:36% line:-2
さらに重要な
関数を紹介します

00:24:57.598 --> 00:25:00.901 align:start position:36% line:-2
さらに重要な
関数を紹介します

00:25:01.001 --> 00:25:05.606 align:start position:30% line:-2
UIKitの多くの型が
文字列変換関数でした

00:25:05.706 --> 00:25:09.376 align:start position:12% line:-2
CGPoint CGRect CGSize
CGVectorなどが―

00:25:09.476 --> 00:25:12.379 align:start position:30% line:-2
toとfromの文字列
だったのです

00:25:12.479 --> 00:25:15.916 align:start position:27% line:-1
これらの行き先を判断する時

00:25:16.183 --> 00:25:19.253 align:start position:29% line:-1
異なる役割に気づきました

00:25:19.353 --> 00:25:21.555 align:start position:34% line:-2
１つはエンコードと
デコード

00:25:21.655 --> 00:25:26.627 align:start position:23% line:-2
他方はデバッグの記述より
見つけたprintコードでした

00:25:26.860 --> 00:25:29.263 align:start position:32% line:-1
役割は全く違いますが

00:25:29.496 --> 00:25:33.433 align:start position:27% line:-2
Swiftは
どちらのサポートも可能です

00:25:33.600 --> 00:25:38.505 align:start position:27% line:-2
Swiftのおかげで
すべての型が機能しています

00:25:38.739 --> 00:25:42.576 align:start position:30% line:-2
さらにすべてが
コードに準拠しています

00:25:42.676 --> 00:25:48.448 align:start position:29% line:-2
異なる型のエンコードや
デコードが簡単にできます

00:25:48.649 --> 00:25:53.587 align:start position:43% line:-1
（拍手）

00:25:54.121 --> 00:25:57.891 align:start position:21% line:-2
Swiftのデバッグプリントは
Objective-Cより簡単で

00:25:57.991 --> 00:26:01.061 align:start position:27% line:-1
変換を行う必要がありません

00:25:57.991 --> 00:26:01.061 align:start position:27% line:-1
変換を行う必要がありません

00:26:01.261 --> 00:26:05.065 align:start position:34% line:-2
内部の型により
直接入力ができます

00:26:05.165 --> 00:26:07.067 align:start position:34% line:-2
デバッグ用に
プリントする場合や

00:26:07.167 --> 00:26:09.036 align:start position:30% line:-1
ログ記録を取る場合には

00:26:09.136 --> 00:26:12.406 align:start position:29% line:-2
print関数に直接
当てはめればいいだけです

00:26:12.940 --> 00:26:15.676 align:start position:32% line:-1
既に存在するコードは

00:26:15.776 --> 00:26:19.479 align:start position:32% line:-2
古い文字列変換関数を
使っており

00:26:19.580 --> 00:26:23.050 align:start position:36% line:-2
今後のためには
互換性が必要です

00:26:23.350 --> 00:26:28.388 align:start position:23% line:-2
実際に我々はリネームをして
NSCoderに移動させました

00:26:28.489 --> 00:26:33.961 align:start position:27% line:-2
これでこのメソッドの役目が
強調されることになり

00:26:34.094 --> 00:26:36.230 align:start position:29% line:-1
自然にフィットしたのです

00:26:37.898 --> 00:26:43.036 align:start position:20% line:-2
これらはSwift 4.2における
iOS 12 SDK向上の―

00:26:44.371 --> 00:26:48.308 align:start position:32% line:-2
数件の例にすぎず
改善は他にもあります

00:26:49.443 --> 00:26:53.814 align:start position:18% line:-2
次はエンコードとデコード
NSSecureCodingの話です

00:26:55.115 --> 00:27:00.654 align:start position:20% line:-2
iOS 12のAPIはデフォルトで
セキュアな状態です

00:26:55.115 --> 00:27:00.654 align:start position:20% line:-2
iOS 12のAPIはデフォルトで
セキュアな状態です

00:27:01.221 --> 00:27:05.626 align:start position:14% line:-2
エンコードに
NSSecureCodingを採用すると

00:27:05.726 --> 00:27:09.029 align:start position:32% line:-2
悪意あるデータと
破損したデータから―

00:27:09.129 --> 00:27:11.965 align:start position:27% line:-1
顧客を守ることにもなります

00:27:12.566 --> 00:27:16.170 align:start position:34% line:-2
安全でないAPIは
なくなりました

00:27:16.703 --> 00:27:20.040 align:start position:29% line:-1
その詳細を知りたい場合は

00:27:20.140 --> 00:27:23.377 align:start position:32% line:-2
木曜日のセッションに
ご参加ください

00:27:25.012 --> 00:27:26.447 align:start position:43% line:-1
以上です

00:27:27.114 --> 00:27:31.652 align:start position:32% line:-2
次に既存のAPIの
強化に注目しましょう

00:27:31.885 --> 00:27:33.754 align:start position:38% line:-1
まずは通知です

00:27:34.254 --> 00:27:37.991 align:start position:32% line:-2
通知機能は
大きく改善しています

00:27:38.091 --> 00:27:40.661 align:start position:30% line:-1
今朝の注目点は３つです

00:27:41.128 --> 00:27:43.730 align:start position:29% line:-1
カスタム通知内の相互作用

00:27:43.831 --> 00:27:45.566 align:start position:34% line:-1
通知のグルーピング

00:27:45.666 --> 00:27:49.336 align:start position:29% line:-2
そしてApp内の
通知設定へのアクセスです

00:27:50.137 --> 00:27:51.939 align:start position:34% line:-1
まずは相互作用です

00:27:53.240 --> 00:27:56.777 align:start position:34% line:-2
カスタム通知は
個人の定義が可能で

00:27:56.877 --> 00:28:00.848 align:start position:38% line:-2
事前定義された
設定も可能です

00:27:56.877 --> 00:28:00.848 align:start position:38% line:-2
事前定義された
設定も可能です

00:28:01.248 --> 00:28:05.018 align:start position:30% line:-2
さらにiOS 12では
動きが増えました

00:28:05.119 --> 00:28:09.990 align:start position:29% line:-2
プログラム定義はもちろん
実行中の変更も可能です

00:28:10.457 --> 00:28:13.727 align:start position:36% line:-2
これらの機能が
追加されたことで

00:28:13.827 --> 00:28:17.931 align:start position:27% line:-2
通知自体の
相互作用が可能になりました

00:28:18.098 --> 00:28:23.337 align:start position:32% line:-2
例えばメッセージには
すぐに返信が可能で

00:28:23.437 --> 00:28:26.306 align:start position:34% line:-2
通知画面で
直接入力ができます

00:28:28.108 --> 00:28:33.547 align:start position:27% line:-2
さらに通知のグルーピングが
可能になりました

00:28:33.647 --> 00:28:39.119 align:start position:30% line:-2
特定のAppの通知を
１グループにまとめます

00:28:39.219 --> 00:28:43.457 align:start position:25% line:-2
Appによって さらに細かい
グルーピングが必要かも

00:28:43.824 --> 00:28:48.829 align:start position:27% line:-2
例えばiMessageが
特定の会話をグループ化して

00:28:48.929 --> 00:28:52.566 align:start position:29% line:-2
他の通知と
分離するといった感じです

00:28:53.433 --> 00:28:55.469 align:start position:30% line:-1
通知にスレッド識別子の

00:28:55.569 --> 00:28:59.973 align:start position:27% line:-1
タグ付けをすればいいのです

00:29:00.073 --> 00:29:04.945 align:start position:29% line:-2
識別された通知は
１グループで表示されます

00:29:06.313 --> 00:29:10.250 align:start position:27% line:-2
iOS 12の通知における
UIの更新でも

00:29:10.350 --> 00:29:13.921 align:start position:36% line:-2
ユーザにとっての
新機能があります

00:29:14.021 --> 00:29:17.724 align:start position:32% line:-2
通知の配信動作の
カスタマイズ機能です

00:29:18.425 --> 00:29:22.729 align:start position:27% line:-2
しかしながら
各appには通知を管理し―

00:29:22.830 --> 00:29:26.166 align:start position:36% line:-2
制御する機能が
すでにあるのです

00:29:26.400 --> 00:29:28.402 align:start position:23% line:-1
iOS 12の新しいAPIでは

00:29:28.502 --> 00:29:34.308 align:start position:29% line:-2
顧客が通知設定のUIに
より詳細な制御を望めば―

00:29:34.408 --> 00:29:37.211 align:start position:27% line:-1
直接 関わることが可能です

00:29:38.278 --> 00:29:41.215 align:start position:29% line:-1
通知機能の詳細については

00:29:41.315 --> 00:29:45.986 align:start position:30% line:-2
週の後半のセッションに
ご参加ください

00:29:47.054 --> 00:29:48.455 align:start position:38% line:-1
以上が通知です

00:29:49.022 --> 00:29:51.191 align:start position:38% line:-1
次はメッセージ

00:29:52.559 --> 00:29:57.598 align:start position:27% line:-2
iOS 12のメッセージは
カメラに注目してください

00:29:58.131 --> 00:30:02.636 align:start position:23% line:-2
iMessageのステッカーが
カメラで使えます

00:29:58.131 --> 00:30:02.636 align:start position:23% line:-2
iMessageのステッカーが
カメラで使えます

00:30:02.903 --> 00:30:05.005 align:start position:27% line:-1
Xcodeを使っているなら

00:30:05.105 --> 00:30:09.510 align:start position:29% line:-2
自動的に機能して
追加作業は必要ありません

00:30:10.110 --> 00:30:13.847 align:start position:34% line:-2
さらにステッカーを
カスタムしたければ

00:30:13.947 --> 00:30:16.383 align:start position:32% line:-2
ビューコントローラを
使うことにより

00:30:16.750 --> 00:30:19.253 align:start position:32% line:-1
少しの処理で可能です

00:30:19.586 --> 00:30:23.724 align:start position:7% line:-2
新しいMSMessagesApp
PresentationContext APIは

00:30:23.824 --> 00:30:26.493 align:start position:20% line:-1
Info.plistに追加できます

00:30:26.593 --> 00:30:31.832 align:start position:29% line:-2
メッセージとメディアの
両方に表示が可能なのです

00:30:32.032 --> 00:30:35.335 align:start position:25% line:-2
この処理を経ると
appがApp Stripと

00:30:35.435 --> 00:30:38.539 align:start position:32% line:-1
カメラに表示されます

00:30:39.039 --> 00:30:42.476 align:start position:29% line:-2
実行中であれば
コンテキストを確認します

00:30:42.576 --> 00:30:46.346 align:start position:29% line:-2
ステッカーの表示を
カスタマイズしたい場合は

00:30:46.447 --> 00:30:48.382 align:start position:30% line:-1
新たなAPIがあります

00:30:50.284 --> 00:30:54.922 align:start position:29% line:-2
コンテキストの確認で
自分の居場所が分かります

00:30:56.223 --> 00:30:57.891 align:start position:38% line:-1
これらに加えて

00:30:57.991 --> 00:31:02.796 align:start position:25% line:-2
iOS 12はメッセージへの
新たなアクセスがあります

00:30:57.991 --> 00:31:02.796 align:start position:25% line:-2
iOS 12はメッセージへの
新たなアクセスがあります

00:31:02.896 --> 00:31:04.264 align:start position:32% line:-1
コンパクトモードでは

00:31:04.364 --> 00:31:08.435 align:start position:29% line:-2
以前は横にスワイプすると
Appを

00:31:08.535 --> 00:31:10.571 align:start position:27% line:-1
切り替えることができました

00:31:10.737 --> 00:31:12.072 align:start position:36% line:-1
iOS 12では

00:31:12.172 --> 00:31:17.978 align:start position:27% line:-2
水平スワイプと移動の
相互作用が可能になりました

00:31:18.078 --> 00:31:22.049 align:start position:36% line:-2
切り替えの必要が
なくなったのです

00:31:23.450 --> 00:31:24.451 align:start position:43% line:-1
以上です

00:31:25.085 --> 00:31:29.823 align:start position:29% line:-2
次はパスワードと
セキュリティーコードです

00:31:30.591 --> 00:31:34.661 align:start position:27% line:-2
自動パスワード機能は
iOS 11にもありました

00:31:36.163 --> 00:31:38.332 align:start position:30% line:-2
Appへの
パスワードエントリです

00:31:39.133 --> 00:31:42.503 align:start position:32% line:-2
iOS 12はさらに
進化をしています

00:31:43.771 --> 00:31:48.976 align:start position:30% line:-2
まずは少し全体的な
経験に戻るとしましょう

00:31:49.676 --> 00:31:53.814 align:start position:27% line:-2
パスワードをiCloudに
保存している場合

00:31:53.914 --> 00:31:59.720 align:start position:21% line:-2
iOS 11以降ログインフローで
自動的に入力されます

00:32:00.120 --> 00:32:05.058 align:start position:29% line:-2
iOS 12でもAppの
ログインフローから

00:32:05.159 --> 00:32:08.595 align:start position:25% line:-2
iCloudへのパスワードの
保存が可能です

00:32:08.695 --> 00:32:12.766 align:start position:34% line:-2
パスワード変更の
UIからも同様です

00:32:13.267 --> 00:32:17.704 align:start position:30% line:-2
ユーザログインをすると
即座に保存されます

00:32:18.472 --> 00:32:22.376 align:start position:30% line:-2
アカウント登録や
パスワード変更において

00:32:22.476 --> 00:32:26.713 align:start position:27% line:-2
iOS 12はパスワードの
自動生成も行います

00:32:26.813 --> 00:32:28.816 align:start position:38% line:-1
導入は簡単です

00:32:28.916 --> 00:32:34.354 align:start position:32% line:-2
ログイン時もしくは
新規や変更時に応じて

00:32:34.454 --> 00:32:38.192 align:start position:25% line:-2
パスワード入力欄に
パスワードのテキストタイプを

00:32:38.292 --> 00:32:41.128 align:start position:32% line:-1
タグ付けするだけです

00:32:43.497 --> 00:32:46.967 align:start position:32% line:-2
パスワードに関して
特定の要件がある場合

00:32:47.067 --> 00:32:50.504 align:start position:29% line:-2
例えば
不許可の文字がある場合や

00:32:50.604 --> 00:32:56.143 align:start position:32% line:-2
同じ文字の連続入力の
上限がある場合

00:32:56.343 --> 00:33:03.851 align:start position:30% line:-2
その要求を特定して
確認することができます

00:32:56.343 --> 00:33:03.851 align:start position:30% line:-2
その要求を特定して
確認することができます

00:33:05.052 --> 00:33:08.889 align:start position:36% line:-2
ログインの際に
手間がかかるのは

00:33:08.989 --> 00:33:14.828 align:start position:29% line:-2
２段階認証コードの通知を
Appへ取り込むことです

00:33:15.028 --> 00:33:20.334 align:start position:29% line:-2
iOS 12では
その通知を自動的に識別し

00:33:20.500 --> 00:33:22.603 align:start position:32% line:-2
セキュリティコードを
取り込み

00:33:23.036 --> 00:33:25.305 align:start position:27% line:-2
QuickTypeのバーで
表示します

00:33:25.405 --> 00:33:28.208 align:start position:29% line:-1
とても簡単に実行できます

00:33:28.509 --> 00:33:31.311 align:start position:34% line:-2
たった１つ
確認が必要なのは―

00:33:31.411 --> 00:33:35.782 align:start position:29% line:-2
iOS標準テキストを
使用しているかどうかです

00:33:35.883 --> 00:33:38.151 align:start position:29% line:-1
パスコード認証のためです

00:33:40.854 --> 00:33:45.826 align:start position:29% line:-2
iOS 12はより安全な
未来を可能にしています

00:33:46.293 --> 00:33:50.164 align:start position:36% line:-2
特殊で安全な
パスワードを使い

00:33:50.264 --> 00:33:52.933 align:start position:30% line:-1
暗記の必要もありません

00:33:54.001 --> 00:33:59.973 align:start position:29% line:-2
週後半のセッションで
さらに詳しく説明をします

00:34:01.575 --> 00:34:06.613 align:start position:32% line:-2
最後のトピックですが
少し復習になります

00:34:06.713 --> 00:34:08.882 align:start position:32% line:-1
コンテキストの話です

00:34:09.449 --> 00:34:12.585 align:start position:9% line:-2
iOS 11ではsafeAreaInsetsを
導入しました

00:34:12.686 --> 00:34:17.458 align:start position:30% line:-2
これはコンテンツを
確実にする優秀な機能で

00:34:17.558 --> 00:34:22.161 align:start position:30% line:-2
インターフェイスの
重なりを避けるものです

00:34:22.262 --> 00:34:24.998 align:start position:32% line:-1
例えば上下のバーです

00:34:25.899 --> 00:34:29.737 align:start position:32% line:-2
iPhoneのバーは
とても単純ですが

00:34:29.837 --> 00:34:32.406 align:start position:30% line:-1
パワフルな面もあります

00:34:32.505 --> 00:34:35.342 align:start position:23% line:-2
safeAreaInsetsは
アプリケーション内で

00:34:35.442 --> 00:34:39.446 align:start position:32% line:-2
ビューを正しい場所に
配置します

00:34:39.545 --> 00:34:42.815 align:start position:36% line:-2
どんなに複雑でも
機能するのです

00:34:43.083 --> 00:34:44.885 align:start position:18% line:-1
例えばiPadのSplit View

00:34:44.985 --> 00:34:50.424 align:start position:27% line:-2
マスター側とディテール側に
高さの異なるバーがあります

00:34:52.059 --> 00:34:56.295 align:start position:30% line:-2
どんなビューであっても
適切なサイズで

00:34:56.396 --> 00:34:59.666 align:start position:30% line:-2
適度に
重なりあっているのです

00:35:01.101 --> 00:35:04.571 align:start position:34% line:-2
横長のスクリーンは
美しいですね

00:35:04.905 --> 00:35:10.844 align:start position:21% line:-2
しかしiPhone Xにおいても
その能力は変わりません

00:35:11.645 --> 00:35:17.417 align:start position:27% line:-2
ボタンがない分だけ
大きなバーが上下にあります

00:35:17.718 --> 00:35:21.722 align:start position:32% line:-2
大きなサイズに
適用できているのです

00:35:21.922 --> 00:35:25.426 align:start position:27% line:-2
iPhone Xに限っては
バーがなくても

00:35:25.526 --> 00:35:28.028 align:start position:23% line:-2
safeAreaInsetsが
機能しており

00:35:28.695 --> 00:35:31.098 align:start position:29% line:-2
ランドスケープモードにも
対応します

00:35:31.331 --> 00:35:35.436 align:start position:34% line:-2
横長の領域は
必ず存在していて―

00:35:35.536 --> 00:35:38.338 align:start position:29% line:-1
なくなることはありません

00:35:40.974 --> 00:35:45.679 align:start position:18% line:-2
safeAreaInsetsの採用と
iPhone Xへの更新に対し

00:35:45.779 --> 00:35:47.948 align:start position:34% line:-1
お礼を申し上げます

00:35:48.649 --> 00:35:51.018 align:start position:32% line:-1
すばらしい経験でした

00:35:51.118 --> 00:35:56.457 align:start position:29% line:-2
未対応の方がいたら
是非 更新をお願いします

00:35:56.857 --> 00:36:00.661 align:start position:30% line:-2
顧客は常に
アップデートを求めます

00:35:56.857 --> 00:36:00.661 align:start position:30% line:-2
顧客は常に
アップデートを求めます

00:36:00.761 --> 00:36:04.998 align:start position:23% line:-2
iPhone Xへのサポートは
その指標です

00:36:05.098 --> 00:36:07.534 align:start position:29% line:-1
すぐの対応をお薦めします

00:36:07.668 --> 00:36:10.704 align:start position:29% line:-1
もし必要な情報があるなら

00:36:10.804 --> 00:36:15.309 align:start position:29% line:-2
UIKitのセッションに
参加してください

00:36:15.409 --> 00:36:21.815 align:start position:18% line:-2
safeAreaInsetsを含めた
UIKitのAPIについて話します

00:36:21.915 --> 00:36:26.320 align:start position:27% line:-2
すべての形とサイズに合った
Appが作成できます

00:36:27.988 --> 00:36:29.790 align:start position:30% line:-1
以上がフレームワークと

00:36:29.890 --> 00:36:31.925 align:start position:34% line:-1
APIの強化でした

00:36:32.025 --> 00:36:34.795 align:start position:18% line:-1
次はSiri Shortcutsです

00:36:34.895 --> 00:36:39.867 align:start position:11% line:-2
Siri ShortcutsはiOS 12で
新登場したAPIです

00:36:41.435 --> 00:36:45.406 align:start position:29% line:-2
Appから一般的な操作を
簡単に取得し―

00:36:45.506 --> 00:36:48.408 align:start position:23% line:-1
Siri経由でアクセスできます

00:36:49.543 --> 00:36:53.447 align:start position:23% line:-2
Siri Shortcutsは
初期画面にも表示でき

00:36:53.614 --> 00:36:59.253 align:start position:29% line:-2
希望のタイミングと場所で
簡単にアクセスできます

00:37:00.621 --> 00:37:05.426 align:start position:27% line:-2
Apple Watchには
Siriの文字盤です

00:37:06.693 --> 00:37:09.596 align:start position:32% line:-2
Siriのアクション
だけではなく

00:37:09.697 --> 00:37:14.167 align:start position:29% line:-2
カスタムボイスフレーズも
設定可能です

00:37:17.571 --> 00:37:21.208 align:start position:34% line:-2
このサポートは
簡単に追加できます

00:37:21.542 --> 00:37:23.143 align:start position:32% line:-1
使うのは２つのAPI

00:37:23.243 --> 00:37:27.548 align:start position:18% line:-2
１つはNSUserActivityで
ハンドオフや―

00:37:27.648 --> 00:37:30.250 align:start position:27% line:-2
Spotlightの統合に
使用します

00:37:30.350 --> 00:37:34.154 align:start position:30% line:-2
さらに複雑なシナリオを
サポートするために

00:37:34.254 --> 00:37:36.623 align:start position:27% line:-2
カスタムインタラクションが
あります

00:37:36.723 --> 00:37:39.026 align:start position:16% line:-1
まずNSUserActivityですが

00:37:39.359 --> 00:37:43.497 align:start position:21% line:-2
ハンドオフやSpotlightの
統合に使用します

00:37:43.597 --> 00:37:45.532 align:start position:32% line:-1
すばらしいAPIです

00:37:45.632 --> 00:37:50.237 align:start position:27% line:-2
特定のメッセージや
ドキュメントの読み込みなど

00:37:50.337 --> 00:37:53.740 align:start position:34% line:-2
顧客の特別な
要求に対応できます

00:37:53.841 --> 00:37:56.877 align:start position:34% line:-2
他のデバイスへの
受け渡しも同様です

00:37:57.144 --> 00:38:01.415 align:start position:30% line:-2
APIに対応済みの場合
追加はとても簡単です

00:37:57.144 --> 00:38:01.415 align:start position:30% line:-2
APIに対応済みの場合
追加はとても簡単です

00:38:01.515 --> 00:38:04.017 align:start position:30% line:-2
適切な予測を
“true”にするだけ

00:38:04.117 --> 00:38:08.889 align:start position:30% line:-2
未対応の場合は
ぜひ試してみてください

00:38:09.790 --> 00:38:14.561 align:start position:30% line:-2
さらなる顧客のニーズが
存在するのであれば

00:38:14.661 --> 00:38:17.331 align:start position:14% line:-2
SiriKit Intents APIを
採用してください

00:38:17.865 --> 00:38:22.903 align:start position:30% line:-2
独自で導入可能な
計画が提供されています

00:38:23.003 --> 00:38:26.273 align:start position:16% line:-2
前年のSiriKit Intentsと
同じ機能です

00:38:26.540 --> 00:38:29.243 align:start position:29% line:-1
カスタム機能が必要ならば

00:38:29.343 --> 00:38:32.613 align:start position:21% line:-1
iOS 12で独自に定義できます

00:38:34.114 --> 00:38:37.784 align:start position:30% line:-2
カスタムインテントには
柔軟性があります

00:38:37.885 --> 00:38:41.588 align:start position:30% line:-2
これは来年のWWDCの
スライドで

00:38:42.422 --> 00:38:46.093 align:start position:32% line:-2
計画はかなり広範囲に
及んでいます

00:38:46.193 --> 00:38:48.562 align:start position:29% line:-2
使用したのは
Createカテゴリです

00:38:48.729 --> 00:38:51.632 align:start position:27% line:-1
より一般的な要求でいいなら

00:38:51.732 --> 00:38:56.603 align:start position:23% line:-2
単にDo Run Goといった
オプションも可能です

00:38:58.105 --> 00:39:03.544 align:start position:29% line:-2
顧客がショートカットを
作りやすいことも大切です

00:38:58.105 --> 00:39:03.544 align:start position:29% line:-2
顧客がショートカットを
作りやすいことも大切です

00:39:03.977 --> 00:39:09.717 align:start position:27% line:-2
音声ショートカットができる
APIを紹介します

00:39:09.883 --> 00:39:12.286 align:start position:34% line:-1
このボタンを押すと

00:39:12.386 --> 00:39:17.691 align:start position:30% line:-2
新しいショートカットを
作成することができます

00:39:17.891 --> 00:39:20.227 align:start position:27% line:-1
コーヒーの注文と同じように

00:39:20.327 --> 00:39:24.498 align:start position:27% line:-1
何度も繰り返す行動の場合は

00:39:24.598 --> 00:39:29.103 align:start position:27% line:-2
次回のためショートカットを
作成しておけるのは便利です

00:39:29.570 --> 00:39:35.609 align:start position:27% line:-2
別のショートカットAppと
組み合わせることもできます

00:39:35.876 --> 00:39:40.714 align:start position:9% line:-2
Siri Shortcutsの詳細や
Voice Siri Shortcutsの構築

00:39:40.814 --> 00:39:46.487 align:start position:14% line:-2
Siriの文字盤上の
Siri Shortcutsは今週後半に

00:39:47.554 --> 00:39:51.291 align:start position:32% line:-2
iOS 12について
たくさん話しましたが

00:39:51.391 --> 00:39:56.463 align:start position:27% line:-2
まだまだすばらしい
セッションを用意しています

00:39:56.830 --> 00:40:02.169 align:start position:29% line:-2
iOS用のApp開発が
初めての方もぜひご参加を

00:39:56.830 --> 00:40:02.169 align:start position:29% line:-2
iOS用のApp開発が
初めての方もぜひご参加を

00:40:02.269 --> 00:40:05.873 align:start position:32% line:-2
セッションの内容を
チェックしてください

00:40:06.440 --> 00:40:11.278 align:start position:32% line:-2
既に開発済みの方は
一層の向上を目指して

00:40:11.378 --> 00:40:15.682 align:start position:34% line:-2
ご覧のセッションに
ご参加ください

00:40:15.782 --> 00:40:19.286 align:start position:30% line:-2
ご清聴
ありがとうございました

00:40:19.386 --> 00:40:22.790 align:start position:27% line:-1
またラボでお会いしましょう

00:40:23.156 --> 00:40:24.024 align:start position:41% line:-1
ありがとう

00:40:24.124 --> 00:40:25.092 align:start position:43% line:-1
（拍手）
