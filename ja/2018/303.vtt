WEBVTT

00:00:07.174 --> 00:00:15.883 align:start position:43% line:-1
(音楽)

00:00:26.093 --> 00:00:33.300 align:start position:43% line:-1
(拍手)

00:00:34.735 --> 00:00:38.705 align:start position:18% line:-2
App Store Connectの
ジェフ･コフィです

00:00:39.006 --> 00:00:41.942 align:start position:12% line:-2
今日のテーマは
App Store Connectの自動化

00:00:42.276 --> 00:00:45.746 align:start position:30% line:-2
正直 この話題は
テンションが上がります

00:00:46.947 --> 00:00:51.118 align:start position:14% line:-2
まずApp Store Connectの
自動化の現状から

00:00:51.752 --> 00:00:56.156 align:start position:32% line:-2
クラッシュレポートの
ダウンロードなどには

00:00:56.523 --> 00:00:58.292 align:start position:30% line:-1
Xcodeを使いますね

00:00:58.759 --> 00:01:03.497 align:start position:20% line:-2
またTransporterで
metadata.xmlやビルドの

00:00:58.759 --> 00:01:03.497 align:start position:20% line:-2
またTransporterで
metadata.xmlやビルドの

00:01:03.697 --> 00:01:05.699 align:start position:38% line:-2
アップロードが
自動化できます

00:01:06.133 --> 00:01:11.071 align:start position:23% line:-2
財務報告書などの
ダウンロードはReporter

00:01:11.605 --> 00:01:16.276 align:start position:27% line:-2
便利なツールですが
さらなる要望の声があります

00:01:16.376 --> 00:01:19.646 align:start position:18% line:-2
App Store Connectの
アクセス拡大と

00:01:19.746 --> 00:01:22.416 align:start position:30% line:-2
多様なワークフローとの
統合です

00:01:22.883 --> 00:01:26.854 align:start position:9% line:-2
新App Store Connect APIを
ご紹介します

00:01:28.021 --> 00:01:33.460 align:start position:43% line:-1
(拍手)

00:01:34.094 --> 00:01:35.762 align:start position:38% line:-1
我々もうれしい

00:01:36.330 --> 00:01:39.700 align:start position:18% line:-2
App Store Connectの
標準REST APIで

00:01:40.300 --> 00:01:46.039 align:start position:29% line:-2
最大の売りはレスポンスが
JSON形式であること

00:01:46.139 --> 00:01:49.142 align:start position:32% line:-2
皆さんには
扱いやすいと思います

00:01:49.476 --> 00:01:54.114 align:start position:27% line:-2
どんなプログラミング言語や
プラットフォームも

00:01:54.214 --> 00:01:57.317 align:start position:30% line:-1
既存のツールも使えます

00:01:58.352 --> 00:02:00.254 align:start position:30% line:-1
セキュリティも重要です

00:01:58.352 --> 00:02:00.254 align:start position:30% line:-1
セキュリティも重要です

00:02:00.354 --> 00:02:05.025 align:start position:18% line:-2
認証には業界標準のJWT
JSON Web Tokenを採用し

00:02:05.125 --> 00:02:08.228 align:start position:32% line:-2
ユーザネームや
パスワードは不要です

00:02:08.562 --> 00:02:12.766 align:start position:30% line:-2
人物やチームに対応する
コードを使わずに

00:02:12.900 --> 00:02:16.870 align:start position:32% line:-2
アクセス権限を
コントロールできます

00:02:18.639 --> 00:02:23.043 align:start position:30% line:-2
使いやすさの観点から
一貫性を重視しています

00:02:23.243 --> 00:02:26.113 align:start position:29% line:-2
RESTリソースモデルが
一元化されており

00:02:26.346 --> 00:02:32.085 align:start position:29% line:-2
あるパートで学んだことが
他のすべてに適用できます

00:02:32.319 --> 00:02:35.856 align:start position:27% line:-1
見つけやすさも追求しました

00:02:35.956 --> 00:02:40.460 align:start position:23% line:-2
JSONデータはフォーマットも
インデントも完璧です

00:02:40.561 --> 00:02:44.531 align:start position:34% line:-2
そのまま画面で
読むことができます

00:02:44.831 --> 00:02:50.504 align:start position:32% line:-2
リンクや関連情報への
レスポンスも有益です

00:02:51.738 --> 00:02:54.408 align:start position:30% line:-2
もちろん このAPIの
ドキュメントは完璧です

00:02:54.508 --> 00:02:59.813 align:start position:11% line:-2
Apple DeveloperとXcodeで
使用中のプラットフォームは

00:02:59.913 --> 00:03:04.384 align:start position:27% line:-2
今年も継続され
REST APIも対象です

00:02:59.913 --> 00:03:04.384 align:start position:27% line:-2
今年も継続され
REST APIも対象です

00:03:04.484 --> 00:03:07.788 align:start position:36% line:-2
慣れ親しんだ
フレームワークが

00:03:07.888 --> 00:03:10.457 align:start position:9% line:-2
App Store Connect APIでも
利用できるのです

00:03:12.326 --> 00:03:16.029 align:start position:14% line:-2
App Store Connectの中で
頻繁に使うのに

00:03:16.129 --> 00:03:21.168 align:start position:29% line:-2
自動化が進んでいなかった
領域に注目しました

00:03:21.268 --> 00:03:26.640 align:start position:27% line:-2
特に ご覧の４つの領域から
ご紹介しましょう

00:03:27.140 --> 00:03:29.543 align:start position:27% line:-2
まずTestFlightは
全面的にカバーしています

00:03:29.643 --> 00:03:33.447 align:start position:29% line:-2
テスターやグループの管理
ビルドのレビューも可能

00:03:33.580 --> 00:03:36.583 align:start position:34% line:-2
昨日のセッションで
述べたように

00:03:36.683 --> 00:03:40.521 align:start position:32% line:-2
テスター獲得のための
リンクも設けます

00:03:40.854 --> 00:03:45.959 align:start position:32% line:-2
APIと緊密に連携し
リンクを管理できます

00:03:46.093 --> 00:03:51.331 align:start position:29% line:-2
両方使ってベータテストを
実行することもできます

00:03:52.733 --> 00:03:55.602 align:start position:20% line:-2
Users and Rolesでは
ユーザの追加や

00:03:55.702 --> 00:03:59.640 align:start position:30% line:-2
削除ができ
アクセス許可も可能です

00:04:00.073 --> 00:04:03.977 align:start position:18% line:-2
デベロッパウェブサイトと
App Store Connectに

00:04:04.077 --> 00:04:06.980 align:start position:30% line:-2
統合されたユーザ基盤が
できるわけです

00:04:07.080 --> 00:04:09.983 align:start position:27% line:-1
ユーザと役割が共有されます

00:04:10.884 --> 00:04:14.888 align:start position:43% line:-1
(拍手)

00:04:16.089 --> 00:04:19.159 align:start position:25% line:-2
Provisioningでは
開発デバイス追加や

00:04:19.259 --> 00:04:23.130 align:start position:27% line:-2
バンドルID登録や
認証情報などの管理もできる

00:04:23.597 --> 00:04:28.168 align:start position:21% line:-2
Reportsでは財務報告などを
ダウンロードできます

00:04:28.268 --> 00:04:31.471 align:start position:29% line:-1
APIに送るパラメータは

00:04:31.572 --> 00:04:35.676 align:start position:25% line:-2
Reporterに送るものと
ほぼ同じです

00:04:35.776 --> 00:04:37.744 align:start position:30% line:-1
だからスイッチしやすい

00:04:38.846 --> 00:04:42.883 align:start position:32% line:-2
最後の部分は
APIそのものでなく

00:04:42.983 --> 00:04:46.386 align:start position:34% line:-2
自動化に関わるので
取り上げました

00:04:46.620 --> 00:04:50.624 align:start position:21% line:-2
Transporterはいくつか
改良を加えました

00:04:50.791 --> 00:04:54.061 align:start position:30% line:-2
第１にLinuxで
公式にサポートされます

00:04:54.461 --> 00:04:58.832 align:start position:30% line:-2
また新しいAPIで使う
トークンは

00:04:58.932 --> 00:05:02.569 align:start position:21% line:-2
Transporterでも送れて
認証にも使えます

00:04:58.932 --> 00:05:02.569 align:start position:21% line:-2
Transporterでも送れて
認証にも使えます

00:05:02.669 --> 00:05:05.172 align:start position:29% line:-1
プロセスが簡単になります

00:05:07.140 --> 00:05:12.012 align:start position:30% line:-2
話すべきことが多いので
駆け足ですが お許しを

00:05:12.112 --> 00:05:15.249 align:start position:32% line:-2
次はAPIでの
データ取得と変更です

00:05:15.349 --> 00:05:20.487 align:start position:32% line:-2
APIのパーツ間の
関係について述べます

00:05:20.754 --> 00:05:25.092 align:start position:27% line:-2
エラー処理 APIアクセス
リクエスト認証を解説し

00:05:25.192 --> 00:05:27.427 align:start position:32% line:-2
ベストプラクティスを
紹介します

00:05:28.629 --> 00:05:29.830 align:start position:39% line:-1
準備はいい？

00:05:31.632 --> 00:05:33.867 align:start position:43% line:-1
(拍手)

00:05:33.967 --> 00:05:38.105 align:start position:32% line:-2
まずはデータ取得から
始めましょう

00:05:38.205 --> 00:05:41.175 align:start position:14% line:-2
api.appstoreconnect.
apple.com

00:05:41.275 --> 00:05:45.913 align:start position:29% line:-2
このAPIのベースから
URLを構築していきます

00:05:46.280 --> 00:05:48.482 align:start position:27% line:-1
最初に加えるのはバージョン

00:05:48.882 --> 00:05:52.519 align:start position:25% line:-2
どのAPIエンドポイントでも
今はv1です

00:05:52.986 --> 00:05:56.456 align:start position:12% line:-2
しかしApp Store Connectの
成長と変化に伴い

00:05:56.557 --> 00:06:00.460 align:start position:27% line:-2
番号が変わるとコードが
機能しなくなる可能性がある

00:05:56.557 --> 00:06:00.460 align:start position:27% line:-2
番号が変わるとコードが
機能しなくなる可能性がある

00:06:00.561 --> 00:06:05.799 align:start position:27% line:-2
だからバージョンアップ後も
しばらくは旧版も使えるよう

00:06:05.899 --> 00:06:08.168 align:start position:30% line:-1
移行期間を設けています

00:06:08.735 --> 00:06:13.140 align:start position:32% line:-2
バージョンの後は
リソースタイプ名です

00:06:13.340 --> 00:06:16.777 align:start position:32% line:-2
APIにおいて
極めて重要な概念です

00:06:16.877 --> 00:06:19.646 align:start position:32% line:-2
リソースは
APIの基礎ユニット

00:06:19.847 --> 00:06:25.052 align:start position:27% line:-2
概念上 APIはリソースの
集合体と考えられます

00:06:25.519 --> 00:06:28.088 align:start position:29% line:-1
APIのリソースの多くは

00:06:28.322 --> 00:06:32.860 align:start position:18% line:-2
App Store Connectで
なじみ深いものです

00:06:32.960 --> 00:06:34.394 align:start position:36% line:-1
見ていきましょう

00:06:34.495 --> 00:06:36.597 align:start position:36% line:-1
まずはユーザから

00:06:37.030 --> 00:06:39.633 align:start position:29% line:-1
完全なAPIのURLです

00:06:39.733 --> 00:06:44.972 align:start position:4% line:-2
api.appstoreconnect.apple.
com/v1/users

00:06:45.272 --> 00:06:48.242 align:start position:29% line:-1
全ユーザを表わしています

00:06:48.609 --> 00:06:53.146 align:start position:27% line:-2
このURLでJSON
オブジェクトが表示されます

00:06:53.547 --> 00:06:57.451 align:start position:34% line:-2
データプロパティが
まず目に入りますね

00:06:57.784 --> 00:07:02.523 align:start position:27% line:-2
レスポンスには常に
データプロパティが伴います

00:06:57.784 --> 00:07:02.523 align:start position:27% line:-2
レスポンスには常に
データプロパティが伴います

00:07:02.856 --> 00:07:06.360 align:start position:34% line:-2
この場合
ユーザリソースです

00:07:06.727 --> 00:07:10.697 align:start position:34% line:-2
今は１つだけですが
画面が大きければ

00:07:10.797 --> 00:07:13.800 align:start position:36% line:-2
すべてのユーザが
表示されます

00:07:14.434 --> 00:07:19.706 align:start position:29% line:-2
このリソースレスポンスの
データに注目します

00:07:20.040 --> 00:07:23.110 align:start position:29% line:-2
どのリソースも
固有のタイプとIDを持ち

00:07:23.310 --> 00:07:28.248 align:start position:16% line:-2
App Store Connect内で
識別されます

00:07:28.782 --> 00:07:32.786 align:start position:29% line:-2
皆さんが一番気になるのが
属性でしょう

00:07:32.886 --> 00:07:37.157 align:start position:30% line:-2
ユーザにとってはいわば
氏名とEメールアドレス

00:07:37.591 --> 00:07:43.664 align:start position:27% line:-2
これらは通常は文字列 数値
日付など単純な値ですが

00:07:43.764 --> 00:07:47.401 align:start position:27% line:-2
配列やオブジェクトのように
複雑な場合もあります

00:07:48.035 --> 00:07:50.404 align:start position:32% line:-1
属性の次は関係性です

00:07:50.704 --> 00:07:53.273 align:start position:27% line:-1
これについては後で述べます

00:07:53.674 --> 00:07:58.078 align:start position:29% line:-2
次にリンク
特にリソースセルフリンク

00:07:58.579 --> 00:08:02.082 align:start position:34% line:-2
特定のリソースを
識別するURLです

00:07:58.579 --> 00:08:02.082 align:start position:34% line:-2
特定のリソースを
識別するURLです

00:08:02.182 --> 00:08:04.751 align:start position:27% line:-1
この場合 最初のユーザです

00:08:04.852 --> 00:08:08.722 align:start position:27% line:-2
リソースセルフリンクは
どのリソースにも含まれます

00:08:09.756 --> 00:08:13.627 align:start position:0% line:-2
api.appstoreconnect.apple.comに
続けて

00:08:13.727 --> 00:08:17.564 align:start position:30% line:-2
バージョン：v1
リソースタイプ：ユーザ

00:08:17.664 --> 00:08:20.100 align:start position:30% line:-2
そして
リソースの識別子を表示

00:08:20.200 --> 00:08:24.972 align:start position:29% line:-2
これが分かれば
同じデータが取り出せます

00:08:25.105 --> 00:08:30.310 align:start position:32% line:-2
ただ実際にはすべての
ユーザが表示されます

00:08:32.578 --> 00:08:37.618 align:start position:29% line:-2
リソースのリストあるいは
各リソースが見られ―

00:08:37.717 --> 00:08:40.486 align:start position:30% line:-1
データの変更もできます

00:08:40.587 --> 00:08:43.756 align:start position:23% line:-1
一般的なRESTのやり方なので

00:08:43.857 --> 00:08:46.360 align:start position:30% line:-1
皆さんもご存じでしょう

00:08:46.894 --> 00:08:48.929 align:start position:34% line:-1
リソース入手の次は

00:08:49.029 --> 00:08:53.066 align:start position:21% line:-2
HTTP POSTメソッドを使う
新たなリソースの作成です

00:08:53.267 --> 00:08:58.805 align:start position:23% line:-2
リソース変更にはPATCH
削除にはDELETEを使います

00:08:59.339 --> 00:09:03.310 align:start position:36% line:-2
新しいユーザを
加えてみましょう

00:08:59.339 --> 00:09:03.310 align:start position:36% line:-2
新しいユーザを
加えてみましょう

00:09:03.810 --> 00:09:06.680 align:start position:34% line:-2
直接 加えることは
できません

00:09:06.780 --> 00:09:11.018 align:start position:16% line:-2
App Store Connect同様
ユーザを招待し

00:09:11.118 --> 00:09:13.120 align:start position:34% line:-1
承諾を受ける形です

00:09:13.220 --> 00:09:17.357 align:start position:27% line:-2
だからユーザ招待リソースを
作成します

00:09:17.658 --> 00:09:20.861 align:start position:32% line:-1
POSTメソッドです

00:09:21.261 --> 00:09:24.731 align:start position:27% line:-1
URLは固定されているので

00:09:25.032 --> 00:09:28.235 align:start position:32% line:-2
このユーザのデータも
ここで送ります

00:09:28.569 --> 00:09:32.606 align:start position:32% line:-2
ユーザを取得した時の
データに似ています

00:09:32.706 --> 00:09:35.075 align:start position:27% line:-1
しかし重大な違いがあります

00:09:35.275 --> 00:09:39.413 align:start position:34% line:-2
タイプはありますが
IDがありません

00:09:39.913 --> 00:09:43.050 align:start position:29% line:-2
Appleは全リソースに
IDを割り当てるので

00:09:43.150 --> 00:09:45.619 align:start position:27% line:-1
POSTにIDはありません

00:09:45.853 --> 00:09:48.989 align:start position:32% line:-2
作成には必要ないので
リンクもありません

00:09:49.089 --> 00:09:52.926 align:start position:34% line:-2
この場合は関係性も
省略しています

00:09:53.193 --> 00:09:55.863 align:start position:34% line:-2
このリクエストへの
レスポンスは―

00:09:56.096 --> 00:09:59.933 align:start position:18% line:-1
201 CREATEDとなっています

00:10:00.033 --> 00:10:04.338 align:start position:27% line:-2
成功を示す
RESTの一般的コードです

00:10:05.272 --> 00:10:09.576 align:start position:27% line:-2
レスポンスデータには
全リソース情報が含まれます

00:10:09.676 --> 00:10:11.411 align:start position:30% line:-1
これが重要な理由は２つ

00:10:11.512 --> 00:10:17.117 align:start position:27% line:-2
第１に作成されたリソースの
IDとセルフリンクは

00:10:17.217 --> 00:10:21.955 align:start position:32% line:-2
後で必要になった時に
ここで参照できるから

00:10:22.356 --> 00:10:24.725 align:start position:23% line:-1
第２にPOSTになかった属性が

00:10:24.825 --> 00:10:29.129 align:start position:30% line:-2
レスポンスに表示される
場合もあるからです

00:10:29.596 --> 00:10:35.402 align:start position:27% line:-2
例えばユーザ招待では
Appleは期限を設けます

00:10:35.502 --> 00:10:38.572 align:start position:25% line:-1
POSTには含まれていません

00:10:38.672 --> 00:10:43.911 align:start position:23% line:-2
Appleのルールが適用された
レスポンスデータは

00:10:44.011 --> 00:10:47.781 align:start position:27% line:-2
リソースの全容を知るために
極めて重要です

00:10:49.216 --> 00:10:52.386 align:start position:38% line:-2
ユーザの承諾で
招待は完了です

00:10:52.486 --> 00:10:56.223 align:start position:29% line:-2
後に変更を加えたい場合も
あるでしょう

00:10:56.323 --> 00:11:00.260 align:start position:29% line:-2
例えばこのユーザの役割は
デベロッパです

00:10:56.323 --> 00:11:00.260 align:start position:29% line:-2
例えばこのユーザの役割は
デベロッパです

00:11:00.627 --> 00:11:03.931 align:start position:30% line:-2
マーケティングの役割を
加えてみます

00:11:04.665 --> 00:11:08.135 align:start position:23% line:-2
変更には
PATCHリクエストを使います

00:11:08.335 --> 00:11:13.240 align:start position:27% line:-2
この場合のURLはユーザの
リソースセルフリンク

00:11:13.740 --> 00:11:17.711 align:start position:27% line:-1
役割の属性だけを記載します

00:11:17.811 --> 00:11:22.916 align:start position:29% line:-2
このリクエストで
マーケティングを加えます

00:11:23.016 --> 00:11:28.121 align:start position:29% line:-2
他に変更の必要はないので
属性だけ記載します

00:11:28.789 --> 00:11:31.959 align:start position:30% line:-2
このリクエストの
レスポンスが成功すると

00:11:32.459 --> 00:11:37.297 align:start position:32% line:-2
変更後のリソースの
全容が送られてきます

00:11:38.699 --> 00:11:41.201 align:start position:30% line:-1
最後の処理である削除は

00:11:41.301 --> 00:11:45.072 align:start position:21% line:-2
リソースセルフリンクに
DELETEリクエストを出すだけ

00:11:45.172 --> 00:11:49.343 align:start position:20% line:-2
204 NO CONTENTという
レスポンスが返ってきます

00:11:49.810 --> 00:11:54.748 align:start position:21% line:-2
REST通なら200番台の意味は
成功だとご存じですね

00:11:54.848 --> 00:11:58.819 align:start position:29% line:-2
ユーザが削除されたことを
示しています

00:11:58.919 --> 00:12:04.925 align:start position:25% line:-2
他のデータは不要なので
NO CONTENTとします

00:11:58.919 --> 00:12:04.925 align:start position:25% line:-2
他のデータは不要なので
NO CONTENTとします

00:12:07.094 --> 00:12:10.430 align:start position:34% line:-2
次の話題に移る前に
セフンの登場です

00:12:10.531 --> 00:12:14.468 align:start position:34% line:-2
リソースの使い方の
実例をお見せします

00:12:14.568 --> 00:12:15.435 align:start position:45% line:-1
セフン

00:12:16.036 --> 00:12:20.674 align:start position:43% line:-1
(拍手)

00:12:21.909 --> 00:12:22.976 align:start position:34% line:-1
ありがとう ジェフ

00:12:24.311 --> 00:12:29.049 align:start position:23% line:-2
TestFlightチーム
エンジニアのセフン･ションです

00:12:29.149 --> 00:12:32.219 align:start position:9% line:-2
App Source Connect APIの
ライブデモをします

00:12:33.287 --> 00:12:37.624 align:start position:27% line:-2
ユーザリソースへの
API適用例を取り上げます

00:12:38.292 --> 00:12:42.329 align:start position:34% line:-2
チームのメンバーが
退職したとします

00:12:42.429 --> 00:12:46.733 align:start position:16% line:-2
App Source Connectで
このユーザを削除します

00:13:02.249 --> 00:13:06.820 align:start position:27% line:-2
GET v1/usersに
GETリクエストを出して

00:13:06.920 --> 00:13:10.557 align:start position:29% line:-2
チームの
ユーザリストを入手します

00:13:10.991 --> 00:13:14.328 align:start position:30% line:-2
アクセスできる
全ユーザが表示されます

00:13:15.162 --> 00:13:21.068 align:start position:29% line:-2
フィルタパラメータを使い
Eメールで検索します

00:13:21.168 --> 00:13:26.206 align:start position:32% line:-2
フィルタパラメータで
条件を規定します

00:13:26.306 --> 00:13:28.175 align:start position:12% line:-1
JohnAppleseed@mac.com

00:13:28.275 --> 00:13:30.010 align:start position:29% line:-1
このリクエストを送ります

00:13:30.944 --> 00:13:34.648 align:start position:32% line:-2
該当するEメールの
ユーザが表示されます

00:13:36.149 --> 00:13:41.688 align:start position:29% line:-2
ユーザのIDを使って
インスタンスを入手します

00:13:42.456 --> 00:13:45.659 align:start position:32% line:-1
users/IDです

00:13:46.326 --> 00:13:49.997 align:start position:27% line:-2
適合するIDを持つユーザの
インスタンスが返ってきます

00:13:51.498 --> 00:13:54.902 align:start position:23% line:-2
John Appleseedの
レスポンスが戻ります

00:13:55.469 --> 00:13:59.106 align:start position:34% line:-2
探しているユーザが
見つかりました

00:13:59.206 --> 00:14:02.543 align:start position:29% line:-2
DELETEリクエストを
セルフリンクに送ります

00:13:59.206 --> 00:14:02.543 align:start position:29% line:-2
DELETEリクエストを
セルフリンクに送ります

00:14:03.343 --> 00:14:06.313 align:start position:20% line:-1
GETをDELETEに置き換えます

00:14:07.114 --> 00:14:09.817 align:start position:27% line:-2
適合するIDを持つユーザが
削除されます

00:14:13.120 --> 00:14:17.057 align:start position:20% line:-2
削除が成功し
NO CONTENTと表示されます

00:14:17.157 --> 00:14:19.726 align:start position:32% line:-2
ユーザのコンテンツは
もう使えません

00:14:20.227 --> 00:14:25.766 align:start position:25% line:-2
最後にGETリクエストを送り
削除を確認します

00:14:27.234 --> 00:14:31.638 align:start position:25% line:-2
404 NOT FOUNDで
削除が確認されました

00:14:34.508 --> 00:14:39.179 align:start position:34% line:-2
ユーザ情報の入手と
インスタンスの検索

00:14:39.847 --> 00:14:45.486 align:start position:27% line:-2
フィルタによる検索方法と
ユーザ削除をやってみました

00:14:45.752 --> 00:14:50.324 align:start position:29% line:-2
ユーザリソースの使い方の
デモを終わります

00:14:50.424 --> 00:14:52.693 align:start position:29% line:-1
ジェフにマイクを戻します

00:14:53.527 --> 00:14:57.531 align:start position:43% line:-1
(拍手)

00:14:59.500 --> 00:15:00.467 align:start position:34% line:-1
ありがとう セフン

00:14:59.500 --> 00:15:00.467 align:start position:34% line:-1
ありがとう セフン

00:15:02.402 --> 00:15:08.175 align:start position:27% line:-2
リソースの作成 解読 更新
削除の方法が分かりましたね

00:15:08.275 --> 00:15:11.812 align:start position:30% line:-2
基本的にはそれが
必要なことのすべてです

00:15:11.912 --> 00:15:15.883 align:start position:32% line:-2
しかし関係性について
まだ触れていません

00:15:15.983 --> 00:15:21.488 align:start position:27% line:-2
リソースそのものでなく
関係性が知りたいこともある

00:15:21.889 --> 00:15:23.457 align:start position:36% line:-1
例を挙げましょう

00:15:23.824 --> 00:15:28.262 align:start position:20% line:-2
Beta Groupは
TestFlight内の全グループ

00:15:28.395 --> 00:15:33.467 align:start position:27% line:-2
Beta Testerは
アプリケーションのテスター

00:15:33.934 --> 00:15:37.337 align:start position:32% line:-2
テスターはグループに
入れられます

00:15:37.638 --> 00:15:40.908 align:start position:27% line:-2
APIでは
どんなモデルになるでしょう

00:15:41.441 --> 00:15:43.310 align:start position:29% line:-1
まずBeta Group

00:15:43.410 --> 00:15:47.915 align:start position:25% line:-2
v1/betaGroupsで
グループの情報が現れます

00:15:48.048 --> 00:15:51.985 align:start position:36% line:-2
第１グループの
関係性の項目には

00:15:52.286 --> 00:15:57.457 align:start position:29% line:-2
アプリケーション ビルド
ベータテスターの３つ

00:15:57.558 --> 00:16:01.128 align:start position:27% line:-2
今日はベータテスターだけに
注目します

00:15:57.558 --> 00:16:01.128 align:start position:27% line:-2
今日はベータテスターだけに
注目します

00:16:01.728 --> 00:16:04.164 align:start position:30% line:-1
別のリンクの項目には―

00:16:04.531 --> 00:16:09.870 align:start position:29% line:-2
第１グループのテスターの
関係性に関わるリンク

00:16:09.970 --> 00:16:13.006 align:start position:30% line:-2
各グループに
こうした項目があります

00:16:13.540 --> 00:16:17.945 align:start position:29% line:-2
２つのうち最初のリンクは
関係性セルフリンク

00:16:18.045 --> 00:16:21.982 align:start position:30% line:-2
関係性そのものを表わす
URLです

00:16:22.683 --> 00:16:27.221 align:start position:30% line:-2
このURLで
この関係性を操作します

00:16:27.754 --> 00:16:28.989 align:start position:36% line:-1
こういうことです

00:16:29.089 --> 00:16:32.025 align:start position:32% line:-2
このグループに
テスターを加えたいが

00:16:32.125 --> 00:16:36.730 align:start position:23% line:-2
TestFlightにはすでに
テスターもグループもある

00:16:36.830 --> 00:16:41.301 align:start position:30% line:-2
既存のテスターを既存の
グループに加えることは

00:16:42.569 --> 00:16:46.373 align:start position:29% line:-2
これまでに学習したことと
矛盾します

00:16:46.473 --> 00:16:51.445 align:start position:27% line:-2
つまりテスターの作成 編集
削除はしない

00:16:51.645 --> 00:16:53.847 align:start position:27% line:-2
少なくともグループの属性は
編集しないと学んだ

00:16:53.947 --> 00:16:57.184 align:start position:32% line:-2
従って概念的には
グループとテスターの

00:16:57.284 --> 00:17:00.187 align:start position:27% line:-1
新たな関係の構築と考えます

00:16:57.284 --> 00:17:00.187 align:start position:27% line:-1
新たな関係の構築と考えます

00:17:00.287 --> 00:17:03.056 align:start position:27% line:-2
ここに関係性セルフリンクが
登場します

00:17:03.457 --> 00:17:07.528 align:start position:25% line:-2
関係性セルフリンクに
POSTリクエストを出します

00:17:08.127 --> 00:17:12.465 align:start position:29% line:-2
ここでグループに加えたい
２つのテスターの

00:17:12.566 --> 00:17:14.635 align:start position:30% line:-1
タイプとIDを送ります

00:17:15.035 --> 00:17:18.238 align:start position:27% line:-2
２つのテスターをグループに
加えるリクエストです

00:17:18.338 --> 00:17:22.175 align:start position:18% line:-2
すでにTestFlightにあるので
テスターの情報は不要

00:17:22.443 --> 00:17:26.380 align:start position:25% line:-2
レスポンスは
204 NO CONTENT

00:17:26.480 --> 00:17:29.516 align:start position:32% line:-2
テスターがグループに
加えられました

00:17:30.217 --> 00:17:33.887 align:start position:30% line:-2
グループからテスターを
取り出したい場合は？

00:17:33.987 --> 00:17:38.659 align:start position:29% line:-2
同じデータフォーマットと
URLが使えます

00:17:38.759 --> 00:17:41.461 align:start position:29% line:-2
POSTをDELETEに
変えるだけです

00:17:43.564 --> 00:17:47.334 align:start position:30% line:-2
Beta Groupの
第２リンクを見ましょう

00:17:47.901 --> 00:17:51.238 align:start position:30% line:-1
いわゆる関連リンクです

00:17:51.505 --> 00:17:56.376 align:start position:30% line:-2
この場合このグループの
テスターを表わします

00:17:56.476 --> 00:18:00.080 align:start position:27% line:-2
データからベータテスターの
情報が現れます

00:17:56.476 --> 00:18:00.080 align:start position:27% line:-2
データからベータテスターの
情報が現れます

00:18:00.180 --> 00:18:05.786 align:start position:16% line:-2
v1/beta testersの場合と
同じフォーマットですが

00:18:05.886 --> 00:18:11.191 align:start position:23% line:-2
TestFlight全体でなく
このグループのテスターです

00:18:12.359 --> 00:18:15.162 align:start position:29% line:-1
ここで確認させてください

00:18:15.262 --> 00:18:21.001 align:start position:27% line:-2
“このグループ”はURLに
識別子があるグループです

00:18:21.201 --> 00:18:23.470 align:start position:30% line:-2
だから このURLで
テスターを取得できます

00:18:23.570 --> 00:18:29.042 align:start position:27% line:-2
複数のグループが対象なら
複数のリクエストが必要です

00:18:29.376 --> 00:18:31.345 align:start position:36% line:-1
それは不便ですね

00:18:31.445 --> 00:18:35.282 align:start position:27% line:-2
だから関連データを入手する
別の方法もあります

00:18:35.549 --> 00:18:39.419 align:start position:25% line:-1
v1/betaGroupsに

00:18:39.520 --> 00:18:43.657 align:start position:14% line:-2
include=betatestersを
追加します

00:18:43.757 --> 00:18:47.127 align:start position:30% line:-1
ベータグループに加えて

00:18:47.227 --> 00:18:51.231 align:start position:27% line:-2
各グループの関連テスターの
情報表示のリクエストです

00:18:53.200 --> 00:18:54.368 align:start position:39% line:-1
実際にやると

00:18:54.701 --> 00:18:58.005 align:start position:25% line:-2
Beta Groupの情報が
表示されます

00:18:58.105 --> 00:19:01.508 align:start position:29% line:-2
第１グループのテスターの
関係性を見ると

00:18:58.105 --> 00:19:01.508 align:start position:29% line:-2
第１グループのテスターの
関係性を見ると

00:19:01.608 --> 00:19:03.710 align:start position:32% line:-2
データという新項目が
あります

00:19:04.611 --> 00:19:08.649 align:start position:29% line:-2
このグループのテスターの
タイプとIDを示します

00:19:08.749 --> 00:19:14.254 align:start position:29% line:-2
この情報の各グループ内の
ベータテスターの関係性に

00:19:14.354 --> 00:19:18.125 align:start position:30% line:-2
それぞれデータの項目が
あります

00:19:18.225 --> 00:19:22.229 align:start position:34% line:-2
タイプとID以外の
テスター情報は？

00:19:22.329 --> 00:19:27.768 align:start position:23% line:-2
レスポンスの最下部に
新項目includeがあります

00:19:28.168 --> 00:19:31.972 align:start position:34% line:-2
テスターの全情報を
表示しています

00:19:32.072 --> 00:19:36.577 align:start position:23% line:-2
通常 includeの項目には
関係性に基づき

00:19:36.677 --> 00:19:40.681 align:start position:32% line:-2
各リソースの全情報が
記載されます

00:19:41.081 --> 00:19:46.453 align:start position:27% line:-2
タイプとIDでテスターが
どのグループかが分かります

00:19:48.021 --> 00:19:49.523 align:start position:30% line:-1
疑問に思われるでしょう

00:19:49.623 --> 00:19:53.193 align:start position:36% line:-2
なぜ全グループに
データ項目があり

00:19:53.293 --> 00:19:58.565 align:start position:25% line:-2
その中の全テスターに
include項目があるのか

00:19:58.866 --> 00:20:02.803 align:start position:30% line:-2
複数のグループに属する
テスターもいます

00:19:58.866 --> 00:20:02.803 align:start position:30% line:-2
複数のグループに属する
テスターもいます

00:20:03.070 --> 00:20:05.806 align:start position:34% line:-1
この構造であれば―

00:20:05.939 --> 00:20:09.576 align:start position:30% line:-2
グループの数に関わらず
データは１つになります

00:20:11.311 --> 00:20:16.717 align:start position:27% line:-2
再びセフンが関係性について
具体例を見せてくれます

00:20:16.817 --> 00:20:17.551 align:start position:45% line:-1
セフン

00:20:19.620 --> 00:20:23.423 align:start position:43% line:-1
(拍手)

00:20:23.524 --> 00:20:24.391 align:start position:34% line:-1
ありがとう ジェフ

00:20:26.593 --> 00:20:31.165 align:start position:18% line:-2
TestFlightでベータグループ
を作成してテスターを加え

00:20:31.265 --> 00:20:35.769 align:start position:32% line:-2
テスターとグループの
関係性を見てみます

00:20:35.869 --> 00:20:37.137 align:start position:43% line:-1
始めます

00:20:46.480 --> 00:20:51.618 align:start position:27% line:-2
エンドポイントにアクセスし
ベータグループを作成します

00:20:51.718 --> 00:20:53.854 align:start position:27% line:-1
v1/betaGroups

00:20:54.288 --> 00:20:58.258 align:start position:32% line:-2
リソース作成時には
ペイロードも必要です

00:20:58.358 --> 00:21:01.628 align:start position:29% line:-2
ベータグループのタイプと
属性を伴うデータです

00:20:58.358 --> 00:21:01.628 align:start position:29% line:-2
ベータグループのタイプと
属性を伴うデータです

00:21:02.029 --> 00:21:05.165 align:start position:27% line:-2
グループ作成時に必要なのは
名前だけなので

00:21:05.933 --> 00:21:09.903 align:start position:20% line:-1
単純にTest Groupとします

00:21:10.604 --> 00:21:12.172 align:start position:32% line:-1
リクエストを送ります

00:21:13.640 --> 00:21:17.411 align:start position:23% line:-2
409 CONFLICTという
レスポンスの意味は

00:21:18.612 --> 00:21:22.483 align:start position:29% line:-2
関係性アプリケーションの
値が必要ということ

00:21:22.849 --> 00:21:26.887 align:start position:27% line:-2
アプリケーションに属さない
グループは作成できません

00:21:26.987 --> 00:21:30.657 align:start position:34% line:-2
アプリケーションに
関連づけるために

00:21:31.091 --> 00:21:34.695 align:start position:36% line:-2
ペイロードに
関係性を加えます

00:21:36.997 --> 00:21:40.534 align:start position:29% line:-2
ペイロードに関係性を記載
したアプリケーションに

00:21:40.801 --> 00:21:46.306 align:start position:29% line:-2
ベータグループが
リンクすることになります

00:21:46.607 --> 00:21:51.211 align:start position:27% line:-2
Test Group作成の
準備が完了しました

00:21:52.513 --> 00:21:54.414 align:start position:32% line:-1
リクエストを送ります

00:21:54.915 --> 00:21:57.251 align:start position:30% line:-1
201 CREATED

00:21:57.351 --> 00:22:01.255 align:start position:27% line:-2
このレスポンスで生成された
IDをコピーします

00:21:57.351 --> 00:22:01.255 align:start position:27% line:-2
このレスポンスで生成された
IDをコピーします

00:22:04.157 --> 00:22:06.059 align:start position:18% line:-1
Test Groupが作成されました

00:22:06.160 --> 00:22:08.695 align:start position:27% line:-1
この名前が気に入らなければ

00:22:09.463 --> 00:22:14.067 align:start position:30% line:-2
PATCHリクエストで
変更できます

00:22:15.469 --> 00:22:19.773 align:start position:16% line:-2
PATCHに続き
“betaGroups/該当ID”です

00:22:21.875 --> 00:22:25.679 align:start position:30% line:-2
このようにペイロードも
送ります

00:22:25.779 --> 00:22:30.317 align:start position:29% line:-2
修正データが正しいことを
確認するために

00:22:30.617 --> 00:22:32.920 align:start position:29% line:-1
IDも示す必要があります

00:22:34.188 --> 00:22:36.590 align:start position:30% line:-2
ベータグループのIDを
ペーストします

00:22:36.990 --> 00:22:42.329 align:start position:25% line:-2
名前だけ変更して
WWDC Groupとします

00:22:44.464 --> 00:22:49.670 align:start position:30% line:-2
200レスポンスが戻り
名前の変更が完了です

00:22:50.637 --> 00:22:54.842 align:start position:30% line:-2
グループを作成したので
テスターを加えます

00:22:55.209 --> 00:22:59.513 align:start position:25% line:-2
エンドポイント宛てに
POSTリクエストを送ります

00:23:00.747 --> 00:23:04.051 align:start position:25% line:-1
v1/betaTesters

00:23:05.285 --> 00:23:08.722 align:start position:34% line:-2
ペイロードも
送る必要があります

00:23:09.256 --> 00:23:12.159 align:start position:29% line:-2
ベータテスターのタイプと
属性一覧が含まれます

00:23:12.259 --> 00:23:15.162 align:start position:25% line:-2
Kate Bellという名の
テスターを作ります

00:23:15.729 --> 00:23:20.868 align:start position:27% line:-2
ベータグループと関連のある
ベータテスターです

00:23:20.968 --> 00:23:23.504 align:start position:30% line:-2
同時にベータグループに
割り当てられます

00:23:24.004 --> 00:23:30.110 align:start position:27% line:-2
IDをペーストすると
テスターが割り当てられます

00:23:32.346 --> 00:23:34.081 align:start position:20% line:-1
201 CREATEDのレスポンス

00:23:34.181 --> 00:23:38.485 align:start position:32% line:-2
テスターがグループに
割り当てられました

00:23:39.052 --> 00:23:41.522 align:start position:27% line:-1
もう１つテスターを加えます

00:23:41.688 --> 00:23:46.827 align:start position:30% line:-2
この属性の部分の名前を
置き換えるだけで

00:23:48.061 --> 00:23:51.365 align:start position:23% line:-2
John Appleseedも
作成されます

00:23:54.601 --> 00:23:57.771 align:start position:25% line:-2
再び201 CREATEDの
レスポンス

00:23:58.172 --> 00:24:00.507 align:start position:32% line:-2
２つのテスターを
グループに加えました

00:23:58.172 --> 00:24:00.507 align:start position:32% line:-2
２つのテスターを
グループに加えました

00:24:00.841 --> 00:24:06.113 align:start position:30% line:-2
ベータグループとベータ
テスターの関連リンクに

00:24:07.014 --> 00:24:10.884 align:start position:30% line:-2
GETリクエストを送り
確認します

00:24:11.818 --> 00:24:16.723 align:start position:12% line:-2
/the id of the group/
betaTestersです

00:24:17.458 --> 00:24:23.030 align:start position:29% line:-2
このIDで割り当てられる
テスターが表示されます

00:24:24.832 --> 00:24:28.402 align:start position:25% line:-2
先ほど加えたJohn
Appleseedがあります

00:24:29.269 --> 00:24:34.775 align:start position:29% line:-2
このレスポンスには属性や
関係など情報が満載です

00:24:34.875 --> 00:24:38.111 align:start position:36% line:-2
Eメールだけ
知りたい場合は？

00:24:38.846 --> 00:24:42.883 align:start position:29% line:-2
フィールドと呼ばれる
パラメータで限定できます

00:24:42.983 --> 00:24:47.654 align:start position:30% line:-2
知りたい情報だけを
表示することができます

00:24:48.288 --> 00:24:53.460 align:start position:27% line:-2
ベータテスターフィールドを
Eメールと同じにすると

00:24:54.995 --> 00:24:59.633 align:start position:27% line:-2
レスポンスには
Eメールだけが表示されます

00:25:00.334 --> 00:25:03.737 align:start position:27% line:-2
ベータグループに
２つのテスターを加えました

00:25:09.977 --> 00:25:14.114 align:start position:32% line:-2
ベータグループと
ベータテスターの作成

00:25:14.214 --> 00:25:16.850 align:start position:27% line:-2
テスターとグループの関係性
も紹介しました

00:25:17.384 --> 00:25:21.155 align:start position:11% line:-2
App Store Connect APIの
使い方のデモでした

00:25:21.255 --> 00:25:23.423 align:start position:29% line:-1
ジェフにマイクを返します

00:25:23.891 --> 00:25:28.695 align:start position:43% line:-1
(拍手)

00:25:29.930 --> 00:25:31.899 align:start position:34% line:-1
ありがとう セフン

00:25:32.599 --> 00:25:37.905 align:start position:27% line:-2
データ入手と変更 関係性に
ついて述べてもらいました

00:25:38.005 --> 00:25:40.440 align:start position:32% line:-2
APIの基本的機能を
カバーしています

00:25:40.541 --> 00:25:46.113 align:start position:30% line:-2
でもリクエスト処理が
失敗することもあるから

00:25:46.213 --> 00:25:51.351 align:start position:29% line:-2
次はAPIのエラー表示を
見ていきましょう

00:25:52.152 --> 00:25:55.522 align:start position:27% line:-2
リクエストに失敗すると
こういうレスポンスが来ます

00:25:56.523 --> 00:26:01.762 align:start position:29% line:-2
HTTPレスポンスの
ステータスが表示されます

00:25:56.523 --> 00:26:01.762 align:start position:29% line:-2
HTTPレスポンスの
ステータスが表示されます

00:26:01.962 --> 00:26:06.500 align:start position:30% line:-2
通常 400番台の
エラーコードとなります

00:26:06.600 --> 00:26:10.737 align:start position:23% line:-2
RESTクライアントライブラリ
の多くは

00:26:10.838 --> 00:26:15.542 align:start position:23% line:-2
“success”などの関数で
リクエストの成否を伝えます

00:26:15.909 --> 00:26:19.713 align:start position:29% line:-2
詳細が知りたければ
レスポンスを読み込みます

00:26:19.947 --> 00:26:25.419 align:start position:27% line:-2
失敗した場合は
エラープロパティが現れます

00:26:25.519 --> 00:26:27.588 align:start position:32% line:-2
エラーオブジェクトの
情報です

00:26:27.688 --> 00:26:32.726 align:start position:29% line:-2
リクエストに複数の問題が
認められる場合は

00:26:33.460 --> 00:26:38.599 align:start position:29% line:-2
IDで特定のレスポンスの
特定のエラーを識別します

00:26:38.699 --> 00:26:43.937 align:start position:25% line:-2
Apple側に問題がある場合
報告により追跡ができます

00:26:44.471 --> 00:26:47.307 align:start position:34% line:-2
さらに便利なのは
タイトルと詳細です

00:26:47.474 --> 00:26:51.378 align:start position:29% line:-2
何が悪かったか
英語で説明が表示されます

00:26:51.478 --> 00:26:54.681 align:start position:30% line:-2
タイトルから
パラメータに問題があり

00:26:54.948 --> 00:27:01.054 align:start position:29% line:-2
詳細からそれがEメールの
スペルミスだと分かります

00:26:54.948 --> 00:27:01.054 align:start position:29% line:-2
詳細からそれがEメールの
スペルミスだと分かります

00:27:01.255 --> 00:27:06.260 align:start position:29% line:-2
トラブルシューティングと
学習に役立つ記録です

00:27:07.027 --> 00:27:11.064 align:start position:32% line:-2
コードによる解釈は
気が進まないでしょう

00:27:11.165 --> 00:27:16.069 align:start position:29% line:-2
しかしメッセージの文言は
変わる可能性があるので

00:27:17.037 --> 00:27:21.008 align:start position:27% line:-2
プログラムエラーの処理では
コードの利用を勧めます

00:27:21.308 --> 00:27:25.212 align:start position:34% line:-2
これは機械が読める
問題を示す文字列で

00:27:25.379 --> 00:27:29.483 align:start position:32% line:-2
ドットで区切られた
階層構造を持つ値です

00:27:29.583 --> 00:27:32.719 align:start position:32% line:-2
この例の
パラメータエラーでは

00:27:32.820 --> 00:27:36.123 align:start position:27% line:-1
パラメータの１つが無効です

00:27:36.590 --> 00:27:39.193 align:start position:29% line:-1
長く具体的なコードですが

00:27:39.593 --> 00:27:42.930 align:start position:30% line:-2
詳細まで
必要ない時もありますね

00:27:43.030 --> 00:27:47.634 align:start position:30% line:-2
だからコードの
プレフィックスの照合で

00:27:47.734 --> 00:27:51.438 align:start position:30% line:-2
必要に応じた内容を示す
構造にしました

00:27:51.805 --> 00:27:57.044 align:start position:30% line:-2
ユーザに詳細な報告が
必要な場合は申告すれば

00:27:57.144 --> 00:28:00.714 align:start position:34% line:-2
我々が十分な情報を
提供します

00:27:57.144 --> 00:28:00.714 align:start position:34% line:-2
我々が十分な情報を
提供します

00:28:00.814 --> 00:28:03.217 align:start position:27% line:-2
ソースパラメータについても
支援します

00:28:03.884 --> 00:28:08.522 align:start position:27% line:-2
可能ならエラーの原因の
リクエストまで遡及もします

00:28:08.622 --> 00:28:13.460 align:start position:18% line:-2
ここでエラーを起こしたのは
filter[email]パラメータ

00:28:13.961 --> 00:28:17.331 align:start position:32% line:-2
ソースは
こうしたパラメータか

00:28:17.431 --> 00:28:22.002 align:start position:23% line:-2
原因を示すデータで
該当箇所を示すJSONポインタ

00:28:23.570 --> 00:28:26.907 align:start position:11% line:-2
App Store Connect APIの
基本は以上です

00:28:27.007 --> 00:28:30.644 align:start position:29% line:-2
残るはこのAPI入手と
リクエスト送信の方法です

00:28:30.744 --> 00:28:35.015 align:start position:34% line:-2
ジュリーが皆さんの
お手伝いをします

00:28:35.782 --> 00:28:36.350 align:start position:43% line:-1
ジュリー

00:28:36.450 --> 00:28:39.753 align:start position:43% line:-1
(拍手)

00:28:45.392 --> 00:28:49.797 align:start position:14% line:-2
App Store Connectチーム
エンジニアのジュリーです

00:28:50.164 --> 00:28:53.767 align:start position:30% line:-2
アクセスと認証について
お話しします

00:28:54.334 --> 00:29:00.307 align:start position:27% line:-2
利用できるエンドポイントの
さまざまな例を見てきました

00:28:54.334 --> 00:29:00.307 align:start position:27% line:-2
利用できるエンドポイントの
さまざまな例を見てきました

00:29:00.741 --> 00:29:04.111 align:start position:27% line:-1
新機能のテストを始めたい時

00:29:04.344 --> 00:29:08.348 align:start position:25% line:-1
GETリクエストを送りますね

00:29:08.849 --> 00:29:12.586 align:start position:27% line:-2
単純にこのエンドポイントを
入力すると

00:29:12.686 --> 00:29:17.424 align:start position:29% line:-2
このようなレスポンスが
返ってくることになります

00:29:18.258 --> 00:29:23.063 align:start position:30% line:-2
ジェフが言ったように
重要なステップである―

00:29:23.163 --> 00:29:26.133 align:start position:30% line:-1
認証情報が抜けています

00:29:27.568 --> 00:29:31.038 align:start position:30% line:-2
このステップは
２つの理由から必要です

00:29:31.472 --> 00:29:36.076 align:start position:29% line:-2
第１にリクエストに
コンテキストを与えるから

00:29:36.176 --> 00:29:40.347 align:start position:27% line:-2
すべてのアプリケーションが
必要なわけじゃない

00:29:40.514 --> 00:29:44.952 align:start position:32% line:-2
重要なのは認証情報が
APIの安全を守り

00:29:45.185 --> 00:29:49.089 align:start position:29% line:-2
データへの不正アクセスを
防ぐこと

00:29:50.791 --> 00:29:54.094 align:start position:32% line:-2
だからリクエストに
認証情報を加えるため

00:29:54.194 --> 00:29:57.431 align:start position:27% line:-1
まずAPIキーを作成します

00:29:57.798 --> 00:30:01.535 align:start position:34% line:-2
そのキーを使って
生成したトークンが

00:29:57.798 --> 00:30:01.535 align:start position:34% line:-2
そのキーを使って
生成したトークンが

00:30:01.635 --> 00:30:05.305 align:start position:34% line:-2
リクエストの送信に
必要になります

00:30:05.739 --> 00:30:08.308 align:start position:27% line:-1
APIキーから始めましょう

00:30:09.943 --> 00:30:13.781 align:start position:27% line:-2
パブリックとプライベートが
セットになっています

00:30:15.015 --> 00:30:20.487 align:start position:29% line:-2
プライベートキーが
トークンに署名を加えます

00:30:22.256 --> 00:30:26.493 align:start position:25% line:-2
Appleがパブリックキーで
その署名を検証し

00:30:26.593 --> 00:30:30.964 align:start position:27% line:-2
関連するプライベートキーの
署名であることを確認します

00:30:33.600 --> 00:30:37.971 align:start position:18% line:-2
App Store Connectに
ログインし

00:30:38.071 --> 00:30:41.942 align:start position:25% line:-1
新APIキータブを選択します

00:30:42.709 --> 00:30:47.548 align:start position:27% line:-2
チームのAPIキーの管理は
管理ユーザに限られます

00:30:47.915 --> 00:30:52.085 align:start position:27% line:-2
作成したキーは
不要になれば無効化できます

00:30:53.687 --> 00:30:57.057 align:start position:30% line:-2
アクセスレベルをキーに
割り当てることで

00:30:57.357 --> 00:31:02.129 align:start position:32% line:-2
どのAPIサービスに
使えるかが決まります

00:30:57.357 --> 00:31:02.129 align:start position:32% line:-2
どのAPIサービスに
使えるかが決まります

00:31:03.664 --> 00:31:06.467 align:start position:32% line:-2
作成されたキーは
このリストに表示され

00:31:06.567 --> 00:31:12.406 align:start position:27% line:-2
プライベートキーファイルは
ダウンロードできます

00:31:13.707 --> 00:31:19.046 align:start position:25% line:-2
ただし このキーは
Appleに保管されないので

00:31:20.013 --> 00:31:23.016 align:start position:27% line:-1
ダウンロードは１度きりです

00:31:23.283 --> 00:31:26.220 align:start position:30% line:-1
ダウンロードして初めて

00:31:26.320 --> 00:31:29.323 align:start position:34% line:-2
プライベートキーが
生成されます

00:31:30.057 --> 00:31:33.193 align:start position:34% line:-2
本物の鍵と同じだと
考えてください

00:31:33.460 --> 00:31:37.798 align:start position:34% line:-2
所有者本人が管理し
守る必要があります

00:31:39.366 --> 00:31:44.571 align:start position:32% line:-2
本物の鍵と同じく
有効期限はありません

00:31:44.671 --> 00:31:49.643 align:start position:18% line:-2
App Store Connectで
無効にしない限り

00:31:50.110 --> 00:31:53.146 align:start position:34% line:-2
紛失や盗難の場合も
失効しません

00:31:53.413 --> 00:31:57.951 align:start position:32% line:-2
このためキーの保護は
非常に重要です

00:31:59.153 --> 00:32:05.159 align:start position:25% line:-2
プライベートキーファイルを
受け取ったらJWTが作れます

00:31:59.153 --> 00:32:05.159 align:start position:25% line:-2
プライベートキーファイルを
受け取ったらJWTが作れます

00:32:05.893 --> 00:32:09.897 align:start position:29% line:-2
このトークンには
いくつかの情報が必要です

00:32:10.898 --> 00:32:15.869 align:start position:29% line:-2
第１にアカウント識別子の
Issuer ID

00:32:15.969 --> 00:32:19.773 align:start position:30% line:-2
このIDはこのページの
冒頭に表示されます

00:32:21.208 --> 00:32:25.379 align:start position:30% line:-2
このキーのIDが
トークン作成に必要です

00:32:25.779 --> 00:32:30.050 align:start position:36% line:-2
このページにも
表示されています

00:32:30.350 --> 00:32:33.520 align:start position:36% line:-2
それぞれのキーに
固有のIDです

00:32:36.256 --> 00:32:39.359 align:start position:29% line:-2
各トークンには期限を示す
タイムスタンプも必要です

00:32:39.459 --> 00:32:43.130 align:start position:34% line:-2
キーには有効期限は
ありませんが

00:32:43.230 --> 00:32:46.600 align:start position:32% line:-2
トークンは
20分しか使えません

00:32:47.334 --> 00:32:51.505 align:start position:29% line:-2
情報の最後の２つの部分は
常に同じ

00:32:51.872 --> 00:32:56.577 align:start position:9% line:-1
App Store Connect APIでは

00:32:56.677 --> 00:32:59.079 align:start position:29% line:-1
どのトークンでも一律です

00:32:59.179 --> 00:33:04.118 align:start position:16% line:-2
１つ目はオーディエンス
App Store Connectです

00:32:59.179 --> 00:33:04.118 align:start position:16% line:-2
１つ目はオーディエンス
App Store Connectです

00:33:05.452 --> 00:33:08.689 align:start position:36% line:-2
最後にトークンの
署名に使う―

00:33:08.789 --> 00:33:12.793 align:start position:29% line:-2
アルゴリズムを
割り当てる必要があります

00:33:13.126 --> 00:33:16.830 align:start position:23% line:-1
これにはES256を選びました

00:33:17.431 --> 00:33:21.502 align:start position:29% line:-2
JWT支援アルゴリズムに
対応するものが

00:33:21.602 --> 00:33:23.804 align:start position:34% line:-1
適切だと考えました

00:33:23.904 --> 00:33:27.674 align:start position:29% line:-2
でもこのアルゴリズムを
実行する必要はありません

00:33:28.208 --> 00:33:33.180 align:start position:27% line:-2
幸いJWTは多言語で
ライブラリを提供しています

00:33:33.280 --> 00:33:38.151 align:start position:30% line:-2
非常に簡単にトークンの
作成や署名ができます

00:33:39.319 --> 00:33:43.156 align:start position:34% line:-2
この例はRubyで
書かれています

00:33:43.257 --> 00:33:48.629 align:start position:30% line:-2
プライベートキーと共に
情報を提供するだけで

00:33:48.729 --> 00:33:52.666 align:start position:29% line:-2
このエンコードメソッドで
完璧なトークンができます

00:33:54.001 --> 00:33:57.704 align:start position:32% line:-2
このトークンを
リクエストに加えます

00:33:57.805 --> 00:34:01.375 align:start position:36% line:-2
認証ヘッダーに
記載するだけです

00:33:57.805 --> 00:34:01.375 align:start position:36% line:-2
認証ヘッダーに
記載するだけです

00:34:03.777 --> 00:34:08.248 align:start position:34% line:-2
キーの作成方法と
リクエストの仕方が

00:34:08.348 --> 00:34:11.284 align:start position:32% line:-1
これで分かりましたね

00:34:12.252 --> 00:34:13.853 align:start position:36% line:-1
やってみましょう

00:34:23.130 --> 00:34:26.166 align:start position:25% line:-1
新しいAPIキーのページです

00:34:26.266 --> 00:34:28.202 align:start position:32% line:-1
まだキーはありません

00:34:28.435 --> 00:34:32.572 align:start position:30% line:-2
では実際に
キーを作ってみましょう

00:34:32.806 --> 00:34:35.409 align:start position:29% line:-2
名前はDemoとし
アクセスレベルを決めます

00:34:35.509 --> 00:34:38.612 align:start position:30% line:-2
財務を選んで
キーを取得したとします

00:34:38.712 --> 00:34:43.116 align:start position:27% line:-2
このキーは財務報告書などに
アクセスできますが

00:34:43.217 --> 00:34:47.987 align:start position:27% line:-2
ベータテスターやビルドには
アクセスできません

00:34:48.188 --> 00:34:52.326 align:start position:36% line:-2
アクセスレベルは
変更できます

00:34:52.559 --> 00:34:55.429 align:start position:25% line:-2
Adminを選ぶと全APIに
アクセスできるので

00:34:55.529 --> 00:34:58.665 align:start position:32% line:-2
キーを作成する時は
Adminで通します

00:34:59.566 --> 00:35:03.370 align:start position:30% line:-2
プライベートキーで
ダウンロードができます

00:34:59.566 --> 00:35:03.370 align:start position:30% line:-2
プライベートキーで
ダウンロードができます

00:35:04.271 --> 00:35:08.842 align:start position:30% line:-2
プライベートキーの
ダウンロードは１度だけ

00:35:09.109 --> 00:35:13.747 align:start position:27% line:-2
キーを紛失したり削除すると
再ダウンロードはできません

00:35:13.847 --> 00:35:18.452 align:start position:29% line:-2
だからすぐにダウンロード
できるようにします

00:35:19.253 --> 00:35:21.622 align:start position:30% line:-1
ではダウンロードします

00:35:23.257 --> 00:35:26.326 align:start position:27% line:-2
ダウンロードフォルダに
プライベートキーがあります

00:35:26.793 --> 00:35:29.263 align:start position:30% line:-2
先ほど見たスクリプトを
引き出せます

00:35:29.863 --> 00:35:33.333 align:start position:21% line:-1
ISSUER IDをコピーします

00:35:37.871 --> 00:35:40.908 align:start position:25% line:-1
すべてのAPIキーで共通です

00:35:41.041 --> 00:35:45.679 align:start position:29% line:-2
プライベートキーのIDも
コピーします

00:35:49.850 --> 00:35:55.422 align:start position:25% line:-2
ID入力後プライベートキーが
読み込まれます

00:35:55.522 --> 00:35:57.357 align:start position:30% line:-1
新トークンを生成します

00:35:58.292 --> 00:36:01.528 align:start position:34% line:-2
アプリケーションの
エンドポイントを

00:35:58.292 --> 00:36:01.528 align:start position:34% line:-2
アプリケーションの
エンドポイントを

00:36:02.262 --> 00:36:04.665 align:start position:36% line:-2
ターミナルで
リクエストします

00:36:06.133 --> 00:36:10.070 align:start position:32% line:-2
予想どおり401の
レスポンスが来ました

00:36:10.270 --> 00:36:12.306 align:start position:32% line:-1
スクリプトを呼び出し

00:36:18.145 --> 00:36:22.449 align:start position:29% line:-2
取得した新たなトークンを
取り出し

00:36:24.051 --> 00:36:25.786 align:start position:32% line:-1
リクエストに加えます

00:36:29.289 --> 00:36:32.159 align:start position:29% line:-1
認証ヘッダーに記載します

00:36:32.492 --> 00:36:33.861 align:start position:38% line:-1
スペルは正確に

00:36:38.332 --> 00:36:40.367 align:start position:27% line:-2
アプリケーションのリストに
戻ります

00:36:40.901 --> 00:36:45.539 align:start position:43% line:-1
(拍手)

00:36:45.639 --> 00:36:49.009 align:start position:36% line:-2
ご覧のとおり
簡単なステップで

00:36:49.109 --> 00:36:53.614 align:start position:29% line:-2
APIへのアクセスと
データの入手ができました

00:36:54.047 --> 00:36:55.716 align:start position:29% line:-1
ジェフにマイクを返します

00:36:56.083 --> 00:37:00.521 align:start position:43% line:-1
(拍手)

00:36:56.083 --> 00:37:00.521 align:start position:43% line:-1
(拍手)

00:37:02.589 --> 00:37:03.857 align:start position:32% line:-1
ありがとう ジュリー

00:37:04.625 --> 00:37:05.526 align:start position:41% line:-1
すごいよね

00:37:06.427 --> 00:37:08.896 align:start position:27% line:-1
アクセスと認証のデモでした

00:37:08.996 --> 00:37:13.333 align:start position:29% line:-2
残り数分でAPIの
ベストプラクティスの話を

00:37:14.401 --> 00:37:17.204 align:start position:30% line:-2
ジュリーが言ったように
キーは出発点です

00:37:17.304 --> 00:37:20.474 align:start position:27% line:-1
所有者本人の責任で守ります

00:37:20.574 --> 00:37:23.344 align:start position:29% line:-2
キーを持っていれば誰でも
データにアクセスできる

00:37:23.444 --> 00:37:27.281 align:start position:29% line:-2
だからキーは安全な場所に
保管するのが理想です

00:37:27.381 --> 00:37:33.520 align:start position:27% line:-2
コードで確認と記憶をし
データベースなどに入れない

00:37:33.620 --> 00:37:38.926 align:start position:29% line:-2
ディスクに保管する場合は
チェックを強化します

00:37:39.026 --> 00:37:42.796 align:start position:32% line:-2
キーが何らかの理由で
外部に漏れた場合は

00:37:42.896 --> 00:37:46.300 align:start position:18% line:-2
App Store Connectで
キーを無効化します

00:37:47.401 --> 00:37:50.904 align:start position:27% line:-1
キーから生成したトークンは

00:37:51.004 --> 00:37:54.308 align:start position:30% line:-2
リクエストごとに
変える必要はありません

00:37:54.408 --> 00:37:57.544 align:start position:32% line:-2
むしろ同じトークンを
何度も使うほうが

00:37:57.644 --> 00:38:00.414 align:start position:27% line:-2
コードもApple側も
パフォーマンスが上がります

00:37:57.644 --> 00:38:00.414 align:start position:27% line:-2
コードもApple側も
パフォーマンスが上がります

00:38:00.514 --> 00:38:04.551 align:start position:32% line:-2
スクリプトに基づいて
トークンを生成し

00:38:04.751 --> 00:38:07.121 align:start position:32% line:-1
リクエストと共に送る

00:38:07.354 --> 00:38:12.492 align:start position:29% line:-2
皆さんは使用期限を
しっかり把握しているから

00:38:12.593 --> 00:38:16.663 align:start position:34% line:-2
プロセスを
完了させられますね

00:38:17.898 --> 00:38:21.935 align:start position:27% line:-2
プロセスが20分を超えたり
継続する場合は

00:38:22.035 --> 00:38:24.938 align:start position:30% line:-1
構成を変えて対応します

00:38:25.239 --> 00:38:28.642 align:start position:29% line:-2
20分のトークンを生成し
必要に応じて使い

00:38:28.976 --> 00:38:33.447 align:start position:27% line:-2
例えば18分ごとに
新たなトークンを発行します

00:38:33.547 --> 00:38:38.952 align:start position:27% line:-2
トークンを最大限に利用でき
期限切れにならずに済みます

00:38:40.721 --> 00:38:43.957 align:start position:30% line:-2
次の話題はレスポンスに
含まれるリンクです

00:38:44.191 --> 00:38:48.062 align:start position:29% line:-2
今日取り上げたのは一種の
セルフドキュメントで

00:38:48.162 --> 00:38:51.198 align:start position:27% line:-2
データから他に使えるものを
見極める方法です

00:38:51.298 --> 00:38:55.869 align:start position:27% line:-2
しかし本来は
自分のコードで使うものです

00:38:56.303 --> 00:38:59.540 align:start position:32% line:-2
複数のステップがある
プロセスでは

00:38:59.640 --> 00:39:04.177 align:start position:29% line:-2
レスポンスにあるリンクで
次のプロセスに進みます

00:38:59.640 --> 00:39:04.177 align:start position:29% line:-2
レスポンスにあるリンクで
次のプロセスに進みます

00:39:04.278 --> 00:39:10.250 align:start position:25% line:-2
これならAPIの別の部分でも
コードが使えます

00:39:10.350 --> 00:39:13.454 align:start position:30% line:-2
APIが
バージョンアップしても

00:39:13.554 --> 00:39:17.357 align:start position:32% line:-2
変更に対応するための
作業量が軽減されます

00:39:18.425 --> 00:39:20.794 align:start position:27% line:-1
最後にドキュメントの話です

00:39:22.029 --> 00:39:25.866 align:start position:30% line:-2
我々はAPIの一貫性に
注目しています

00:39:25.966 --> 00:39:31.305 align:start position:29% line:-2
リソースが何かできる場合
他と同じ方法を採用します

00:39:31.505 --> 00:39:36.310 align:start position:27% line:-2
リソースが万能ではないのは
もうお分かりですね

00:39:36.410 --> 00:39:39.646 align:start position:34% line:-2
APIは招待なしに
ユーザを作れない

00:39:39.813 --> 00:39:44.084 align:start position:30% line:-2
ドキュメントは
リソースができることや

00:39:44.184 --> 00:39:47.988 align:start position:29% line:-2
使えるオペレーションや
パラメータなどを教えます

00:39:49.256 --> 00:39:53.927 align:start position:12% line:-2
それが一貫した標準REST API
App Store Connect API

00:39:54.027 --> 00:39:55.396 align:start position:39% line:-1
感動ものです

00:39:55.496 --> 00:40:00.200 align:start position:29% line:-2
このAPIは非常に柔軟に
設計されています

00:39:55.496 --> 00:40:00.200 align:start position:29% line:-2
このAPIは非常に柔軟に
設計されています

00:40:00.300 --> 00:40:04.204 align:start position:18% line:-2
App Store Connectを
ワークフローに加えれば

00:40:04.304 --> 00:40:07.774 align:start position:38% line:-2
自分のやり方で
使いこなせます

00:40:07.875 --> 00:40:10.043 align:start position:32% line:-1
是非 試してください

00:40:10.144 --> 00:40:12.813 align:start position:32% line:-2
すべてのデベロッパに
この夏 公開されます

00:40:13.714 --> 00:40:18.218 align:start position:11% line:-2
質問がある方は
App Store Connect Labへ

00:40:18.318 --> 00:40:21.521 align:start position:34% line:-2
スピーチ終了後すぐ
質問に答えます

00:40:21.622 --> 00:40:24.157 align:start position:32% line:-2
明日も午後１時から
セッションを開きます

00:40:24.324 --> 00:40:28.028 align:start position:18% line:-2
App Store Connectの
最新ニュースもチェックを

00:40:28.128 --> 00:40:31.832 align:start position:11% line:-2
APIとApp Store Connectの
情報が得られます

00:40:31.932 --> 00:40:36.136 align:start position:29% line:-2
ドキュメントも上げるので
リンクもどうぞ

00:40:36.470 --> 00:40:38.305 align:start position:36% line:-2
またセッションで
お会いしましょう

00:40:38.405 --> 00:40:40.641 align:start position:43% line:-1
(拍手)
