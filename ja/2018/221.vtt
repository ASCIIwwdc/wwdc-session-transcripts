WEBVTT

00:00:07.241 --> 00:00:15.883 align:start position:43% line:-1
(音楽)

00:00:21.955 --> 00:00:25.526 align:start position:43% line:-1
(拍手)

00:00:25.626 --> 00:00:26.827 align:start position:41% line:-1
こんにちは

00:00:27.327 --> 00:00:30.464 align:start position:21% line:-2
TextKitの
ベストプラクティスをご紹介します

00:00:30.631 --> 00:00:33.267 align:start position:27% line:-2
TextKitエンジニアの
ドナです

00:00:33.500 --> 00:00:36.937 align:start position:30% line:-2
オーサリングツールから
エミリーも参加します

00:00:37.037 --> 00:00:41.542 align:start position:29% line:-2
TextKitの効率的な
使い方を共有しましょう

00:00:41.642 --> 00:00:43.143 align:start position:38% line:-1
では 始めます

00:00:44.545 --> 00:00:47.881 align:start position:23% line:-1
まず TextKitの主な概念

00:00:48.448 --> 00:00:53.287 align:start position:29% line:-2
次に アプリケーションに
それを適用する方法

00:00:53.887 --> 00:00:59.359 align:start position:27% line:-2
最後に 正確性 性能
セキュリティ面についてです

00:01:00.460 --> 00:01:02.029 align:start position:34% line:-1
では 主な概念から

00:01:03.397 --> 00:01:06.934 align:start position:36% line:-2
基本的なことから
始めましょう

00:01:07.467 --> 00:01:08.936 align:start position:32% line:-1
TextKitとは？

00:01:10.504 --> 00:01:12.139 align:start position:34% line:-1
Xcodeを開き―

00:01:12.239 --> 00:01:16.176 align:start position:20% line:-2
“import TextKit”と
入力すれば使える？

00:01:16.844 --> 00:01:20.047 align:start position:27% line:-1
実は これでは作動しません

00:01:22.115 --> 00:01:25.853 align:start position:18% line:-2
TextKitは他のフレームワークと
異なるためです

00:01:26.220 --> 00:01:28.622 align:start position:32% line:-2
何かをインポートする
必要はありません

00:01:29.323 --> 00:01:33.460 align:start position:21% line:-2
テキストコントロールは
TextKit上に構築されており

00:01:33.727 --> 00:01:39.132 align:start position:21% line:-2
ラベルやテキストフィールドや
テキストビューにも使われています

00:01:39.766 --> 00:01:45.172 align:start position:7% line:-2
Core TextやCore Graphicsや
Foundationで

00:01:45.339 --> 00:01:48.208 align:start position:32% line:-2
簡単かつシームレスに
テキスト表示できます

00:01:49.176 --> 00:01:53.113 align:start position:21% line:-2
ビルトインのコントロールでは
TextKitが使用されています

00:01:53.280 --> 00:01:57.317 align:start position:29% line:-2
ローカライズ可能な方法で
表示 編集できるので

00:01:57.518 --> 00:02:02.890 align:start position:29% line:-2
複雑な技術やスクリプトを
理解する必要はありません

00:01:57.518 --> 00:02:02.890 align:start position:29% line:-2
複雑な技術やスクリプトを
理解する必要はありません

00:02:03.557 --> 00:02:07.528 align:start position:32% line:-2
無料で使える
多くの機能があります

00:02:08.895 --> 00:02:12.866 align:start position:25% line:-2
編集ではOSが対応する
全技術サービスにアクセス可能

00:02:13.033 --> 00:02:15.536 align:start position:29% line:-2
例えばアクセシビリティや
スペルチェックなどでは

00:02:15.736 --> 00:02:20.374 align:start position:29% line:-2
コードを書かずに
優れた機能を利用できます

00:02:20.641 --> 00:02:21.875 align:start position:36% line:-1
すばらしいですね

00:02:22.442 --> 00:02:27.247 align:start position:32% line:-2
どの機能をどのように
使ったらよいか？

00:02:28.448 --> 00:02:31.818 align:start position:34% line:-2
適切な選択について
解説します

00:02:32.085 --> 00:02:36.190 align:start position:20% line:-2
UIKitとAppKitのどちらを
使っているかで異なるため

00:02:36.390 --> 00:02:37.824 align:start position:38% line:-1
見てみましょう

00:02:39.026 --> 00:02:40.861 align:start position:32% line:-1
まずはUIKitから

00:02:42.396 --> 00:02:45.032 align:start position:32% line:-2
テキスト入力が必要か
検討します

00:02:46.633 --> 00:02:50.604 align:start position:29% line:-2
不要な場合は
選択やスクロールが必要か

00:02:52.439 --> 00:02:55.275 align:start position:27% line:-2
それも不要なら
UILabelを使用します

00:02:55.576 --> 00:02:59.980 align:start position:21% line:-2
UILabelは少量のテキストを
対象としています

00:03:01.114 --> 00:03:05.185 align:start position:27% line:-2
テキストが多かったり
選択やスクロールが必要なら

00:03:05.285 --> 00:03:08.388 align:start position:27% line:-2
編集を無効にして
UITextViewを使用

00:03:09.756 --> 00:03:14.428 align:start position:30% line:-2
テキスト入力が必要なら
安全な入力方法は？

00:03:14.528 --> 00:03:18.832 align:start position:27% line:-2
パスワードのように隠したり
コピー不可とするかです

00:03:20.467 --> 00:03:26.273 align:start position:20% line:-2
そういったものが必要なら
UITextFieldを使用します

00:03:27.508 --> 00:03:31.111 align:start position:30% line:-2
不要なら
入力テキスト量の考慮を

00:03:32.012 --> 00:03:35.616 align:start position:27% line:-1
１行の入力のみ必要な場合は

00:03:35.716 --> 00:03:40.320 align:start position:25% line:-2
１行の入力だけをサポートする
UITextFieldを使用

00:03:41.855 --> 00:03:44.892 align:start position:29% line:-2
それ以上必要なら
UITextViewです

00:03:46.927 --> 00:03:53.000 align:start position:25% line:-2
AppKitの決定プロセスは
似ていますが少し違います

00:03:54.401 --> 00:03:57.437 align:start position:32% line:-2
まず テキスト入力が
必要かを検討します

00:03:58.939 --> 00:04:00.707 align:start position:32% line:-2
ラベルコントロールが
ないので

00:03:58.939 --> 00:04:00.707 align:start position:32% line:-2
ラベルコントロールが
ないので

00:04:00.807 --> 00:04:02.676 align:start position:32% line:-1
テキスト表示するには

00:04:03.076 --> 00:04:07.347 align:start position:18% line:-2
NSTextFieldで編集と選択を
無効化して ラベルの動作を実現

00:04:09.449 --> 00:04:14.154 align:start position:29% line:-2
次に安全なテキスト入力の
必要性を検討します

00:04:14.555 --> 00:04:17.057 align:start position:14% line:-2
必要なら
NSSecureTextFieldを使用

00:04:18.257 --> 00:04:21.894 align:start position:27% line:-1
不要なら テキストの量は？

00:04:23.497 --> 00:04:27.234 align:start position:25% line:-2
NSTextViewは大量の
テキストに適しているので

00:04:27.334 --> 00:04:30.103 align:start position:21% line:-1
量が多いならNSTextView

00:04:31.438 --> 00:04:33.607 align:start position:18% line:-1
少ないならNSTextFieldです

00:04:33.874 --> 00:04:38.512 align:start position:29% line:-2
UIKitの場合と異なり
複数行も扱えますが

00:04:39.012 --> 00:04:40.914 align:start position:34% line:-1
短い文字列用なので

00:04:41.014 --> 00:04:44.318 align:start position:20% line:-2
量が多いなら
NSTextViewを使うべきです

00:04:45.853 --> 00:04:48.255 align:start position:34% line:-2
TextKitに
慣れている皆さんは

00:04:48.488 --> 00:04:52.159 align:start position:25% line:-2
フローチャートに文字列描画が
ないことに気づくでしょう

00:04:53.026 --> 00:04:55.295 align:start position:29% line:-1
文字列描画を使用するには

00:04:55.395 --> 00:04:58.098 align:start position:16% line:-2
NSStringまたは
NSAttributedStringの

00:04:58.198 --> 00:05:00.434 align:start position:36% line:-2
描画メソッドを
直接呼び出します

00:04:58.198 --> 00:05:00.434 align:start position:36% line:-2
描画メソッドを
直接呼び出します

00:05:01.134 --> 00:05:03.704 align:start position:32% line:-2
キットレベルでの
ビューオブジェクトの

00:05:03.804 --> 00:05:06.440 align:start position:36% line:-2
オーバーヘッドが
避けられます

00:05:07.641 --> 00:05:11.111 align:start position:32% line:-2
文字列描画を
使用する際のヒントを

00:05:11.612 --> 00:05:14.014 align:start position:32% line:-2
少量の静的テキストに
使用します

00:05:14.114 --> 00:05:16.750 align:start position:30% line:-2
描画メソッドを呼び出す
頻度を制限します

00:05:17.150 --> 00:05:21.722 align:start position:30% line:-2
何度も呼び出す場合
キャッシュ効率が上がり

00:05:21.822 --> 00:05:23.724 align:start position:30% line:-1
特に自動レイアウトでは

00:05:23.824 --> 00:05:27.494 align:start position:25% line:-2
ラベルやテキストフィールドの
性能が向上

00:05:28.462 --> 00:05:32.299 align:start position:32% line:-2
カスタム属性付き
文字列を描画する場合

00:05:32.833 --> 00:05:35.936 align:start position:34% line:-2
レンダリング前に
属性を検証するため

00:05:36.036 --> 00:05:38.272 align:start position:27% line:-1
文字列描画が遅くなることも

00:05:38.739 --> 00:05:42.676 align:start position:29% line:-2
最高の性能を得るには
余分な属性を取り除きます

00:05:42.776 --> 00:05:48.715 align:start position:23% line:-2
フォントや色など 外観の決定に
必要なものだけを渡します

00:05:50.350 --> 00:05:52.886 align:start position:30% line:-1
最後に 文字列描画では

00:05:52.986 --> 00:05:56.657 align:start position:30% line:-2
テキストコントロールの
機能は使えません

00:05:56.823 --> 00:05:59.393 align:start position:36% line:-2
可能な時だけ
使用してください

00:06:01.361 --> 00:06:05.399 align:start position:16% line:-2
ビルトインのコントロールを使い
TextKitで何ができるか学びました

00:06:05.499 --> 00:06:08.001 align:start position:29% line:-1
機能以上のことをする場合

00:06:08.101 --> 00:06:11.738 align:start position:21% line:-2
テキストスタック内で適切な
カスタマイズポイントを見つけます

00:06:12.306 --> 00:06:13.507 align:start position:36% line:-1
TextKitは

00:06:13.607 --> 00:06:17.144 align:start position:23% line:-2
モデル/ビュー/コントローラの
設計パターンがベースです

00:06:18.378 --> 00:06:22.749 align:start position:29% line:-2
NBCに直接対応する
３フェーズに分けられます

00:06:22.850 --> 00:06:25.586 align:start position:36% line:-2
ストレージ 表示
レイアウトです

00:06:25.919 --> 00:06:28.722 align:start position:25% line:-2
各フェーズの
TextKitオブジェクトを

00:06:28.822 --> 00:06:30.123 align:start position:36% line:-1
見ていきましょう

00:06:31.024 --> 00:06:33.927 align:start position:29% line:-2
まずは モデルに対応する
ストレージです

00:06:35.429 --> 00:06:38.332 align:start position:25% line:-2
NSTextStorageは
文字列データと属性を保持

00:06:38.632 --> 00:06:40.901 align:start position:32% line:-2
可変属性付き文字列の
サブクラスなので

00:06:41.001 --> 00:06:45.272 align:start position:30% line:-2
属性付き文字列と同様に
作業できます

00:06:46.006 --> 00:06:51.712 align:start position:27% line:-2
あとでテキストストレージの
カスタマイズ法を紹介します

00:06:53.947 --> 00:06:58.051 align:start position:12% line:-2
NSTextContainerはテキストの
配置領域の形状をモデル化

00:06:58.619 --> 00:07:03.757 align:start position:27% line:-2
デフォルトでは長方形ですが
フローや形は変えられます

00:06:58.619 --> 00:07:03.757 align:start position:27% line:-2
デフォルトでは長方形ですが
フローや形は変えられます

00:07:05.392 --> 00:07:08.061 align:start position:29% line:-2
ストレージオブジェクトの
操作の詳細は

00:07:08.195 --> 00:07:11.431 align:start position:30% line:-2
過去のセッションと
資料を参照してください

00:07:11.565 --> 00:07:14.701 align:start position:32% line:-2
詳細情報のリンクから
利用できます

00:07:17.304 --> 00:07:20.541 align:start position:30% line:-2
次は ビューに対応する
表示フェーズ

00:07:21.108 --> 00:07:25.579 align:start position:30% line:-2
これについては
先ほど詳しく話しました

00:07:25.679 --> 00:07:29.483 align:start position:30% line:-2
その他の情報は
資料で確認してください

00:07:29.683 --> 00:07:33.086 align:start position:32% line:-2
詳細情報のリンクから
アクセスできます

00:07:35.322 --> 00:07:38.826 align:start position:23% line:-2
最後は コントローラに対応する
レイアウトフェーズです

00:07:40.127 --> 00:07:45.232 align:start position:21% line:-2
NSLayoutManagerは
このフェーズ唯一のコンポーネント

00:07:45.966 --> 00:07:49.870 align:start position:36% line:-2
そして とても
すばらしいんです

00:07:50.070 --> 00:07:51.972 align:start position:32% line:-1
全操作の中枢部として

00:07:52.072 --> 00:07:56.743 align:start position:27% line:-2
全フェーズ間の変更を調整し
レイアウトプロセスを制御

00:07:58.178 --> 00:08:01.248 align:start position:32% line:-2
レイアウトプロセスの
仕組みを紹介します

00:07:58.178 --> 00:08:01.248 align:start position:32% line:-2
レイアウトプロセスの
仕組みを紹介します

00:08:01.348 --> 00:08:07.221 align:start position:21% line:-2
まず 不整合を除去するため
テキストストレージ内の属性を修正

00:08:07.321 --> 00:08:12.893 align:start position:27% line:-2
文字列内のすべての文字が
フォントにあるか確認します

00:08:12.993 --> 00:08:15.762 align:start position:14% line:-2
この例では
Times New Romanフォントが

00:08:15.863 --> 00:08:17.931 align:start position:30% line:-1
全体に指定されています

00:08:18.031 --> 00:08:22.302 align:start position:27% line:-2
でも このフォントは漢字や
絵文字をサポートしません

00:08:23.070 --> 00:08:26.773 align:start position:32% line:-2
属性を修正すると
テキストストレージは

00:08:26.874 --> 00:08:28.175 align:start position:34% line:-1
このようになります

00:08:28.275 --> 00:08:32.679 align:start position:23% line:-2
適切な日本語･絵文字フォントが
割り当てられます

00:08:34.114 --> 00:08:38.018 align:start position:29% line:-2
属性が修正されると
レイアウトプロセスが開始

00:08:38.385 --> 00:08:43.123 align:start position:23% line:-2
グリフの生成後に
グリフのレイアウトが行われます

00:08:44.191 --> 00:08:46.793 align:start position:32% line:-2
配置されると
表示の準備が整います

00:08:48.095 --> 00:08:49.696 align:start position:32% line:-1
ところでグリフとは？

00:08:50.097 --> 00:08:55.335 align:start position:29% line:-2
１つ以上の文字を視覚的に
表現したものです

00:08:55.435 --> 00:09:00.340 align:start position:25% line:-2
文字とグリフ間のマッピングは
必ずしも１対１ではありません

00:08:55.435 --> 00:09:00.340 align:start position:25% line:-2
文字とグリフ間のマッピングは
必ずしも１対１ではありません

00:09:01.375 --> 00:09:04.545 align:start position:29% line:-2
この“ffi”は
３つの文字から成りますが

00:09:04.645 --> 00:09:07.481 align:start position:29% line:-2
合字として単一のグリフで
表すことができます

00:09:08.415 --> 00:09:10.083 align:start position:30% line:-1
逆のパターンもあります

00:09:10.384 --> 00:09:14.988 align:start position:27% line:-2
複数のグリフで表現できる
単一の文字“ñ”があります

00:09:15.589 --> 00:09:17.658 align:start position:30% line:-2
１つはn用
もう１つはチルダ用です

00:09:18.792 --> 00:09:20.894 align:start position:39% line:-1
図に戻ります

00:09:21.261 --> 00:09:25.299 align:start position:14% line:-2
NSLayoutManagerがグリフの
生成とレイアウトを行います

00:09:25.399 --> 00:09:30.537 align:start position:23% line:-2
まずは文字から
グリフを描画するかどうかを判断

00:09:31.238 --> 00:09:35.843 align:start position:21% line:-1
そしてグリフを配置し 表示します

00:09:37.411 --> 00:09:42.516 align:start position:34% line:-2
過去のセッションや
資料でも学べます

00:09:42.616 --> 00:09:47.221 align:start position:25% line:-2
こちらも詳細情報のリンクから
アクセス可能です

00:09:50.691 --> 00:09:53.227 align:start position:27% line:-1
テキストシステムの各段階と

00:09:53.360 --> 00:09:56.029 align:start position:18% line:-2
TextKitコンポーネントについて
理解できました

00:09:57.164 --> 00:10:02.369 align:start position:25% line:-2
では 正しい設定を選択し
さまざまな効果を作りましょう

00:09:57.164 --> 00:10:02.369 align:start position:25% line:-2
では 正しい設定を選択し
さまざまな効果を作りましょう

00:10:03.904 --> 00:10:05.706 align:start position:34% line:-1
標準的な設定では―

00:10:06.406 --> 00:10:10.310 align:start position:29% line:-2
テキストビューを
ドラッグ＆ドロップすると

00:10:10.410 --> 00:10:12.679 align:start position:27% line:-1
各コンポーネントを自動取得

00:10:13.113 --> 00:10:15.282 align:start position:34% line:-2
大抵の場合
必要なのはこれだけ

00:10:17.417 --> 00:10:20.254 align:start position:25% line:-1
複数ページや複数列が必要なら

00:10:20.354 --> 00:10:23.156 align:start position:34% line:-2
テキストコンテナと
テキストビューを

00:10:23.257 --> 00:10:25.025 align:start position:29% line:-1
ページか列ごとに１組使用

00:10:25.592 --> 00:10:29.096 align:start position:21% line:-2
同じテキストストレージ内の
同じレイアウトマネージャに接続し

00:10:29.196 --> 00:10:32.366 align:start position:27% line:-2
バッキングストアの
レイアウト情報を共有します

00:10:34.234 --> 00:10:38.839 align:start position:21% line:-2
異なるレイアウトが必要な場合
複数のレイアウトマネージャを使用

00:10:38.939 --> 00:10:42.009 align:start position:34% line:-2
バッキングストアを
共有しているため

00:10:42.109 --> 00:10:44.745 align:start position:32% line:-2
テキスト更新で
すべてのビューが更新

00:10:46.547 --> 00:10:51.885 align:start position:27% line:-2
設定については2010年の
セッションをご覧ください

00:10:51.985 --> 00:10:56.290 align:start position:9% line:-2
“Advanced Cocoa
Text Tips and Tricks”です

00:10:56.690 --> 00:10:59.993 align:start position:32% line:-2
詳細情報のリンクから
アクセスできます

00:11:02.596 --> 00:11:05.799 align:start position:30% line:-2
ビルトインの
テキストコントロールと

00:11:06.166 --> 00:11:11.738 align:start position:23% line:-2
TextKitのコンポーネント
そして その設定方法

00:11:11.839 --> 00:11:15.943 align:start position:30% line:-2
これらの知識で
多くのことができますが

00:11:16.043 --> 00:11:18.946 align:start position:32% line:-2
更にTextKitの
カスタマイズも可能

00:11:19.680 --> 00:11:23.283 align:start position:30% line:-2
その正しいアプローチの
選び方は

00:11:25.052 --> 00:11:28.322 align:start position:29% line:-2
テキストツールボックスの
構築と同様です

00:11:28.489 --> 00:11:34.428 align:start position:29% line:-2
例えばハンマーを買う時は
壁一面に並んだ商品から

00:11:34.895 --> 00:11:40.500 align:start position:23% line:-2
できるだけ安くて
使用目的に適した物を選びますね

00:11:42.336 --> 00:11:44.805 align:start position:34% line:-2
さまざまな
ハンマーがあります

00:11:45.272 --> 00:11:48.108 align:start position:30% line:-2
デリゲーションは
ネイルハンマーのように

00:11:48.208 --> 00:11:50.077 align:start position:30% line:-1
複数の作業をこなします

00:11:50.177 --> 00:11:54.748 align:start position:32% line:-2
カスタマイズも可能で
とても便利です

00:11:56.283 --> 00:12:00.654 align:start position:25% line:-2
通知は
丸頭ハンマーのようなものです

00:11:56.283 --> 00:12:00.654 align:start position:25% line:-2
通知は
丸頭ハンマーのようなものです

00:12:01.221 --> 00:12:08.095 align:start position:27% line:-2
特定のタスクに適しており
決して用途は広くありません

00:12:09.763 --> 00:12:12.466 align:start position:36% line:-2
サブクラス化は
大型ハンマーです

00:12:13.367 --> 00:12:18.438 align:start position:27% line:-2
大型ハンマーは非常に強力で
何にでも使えますが

00:12:18.572 --> 00:12:21.041 align:start position:29% line:-1
大抵の場合 大きすぎます

00:12:22.342 --> 00:12:26.013 align:start position:32% line:-2
ハンマーの使い方は
エミリーが説明します

00:12:26.213 --> 00:12:27.014 align:start position:43% line:-1
エミリー

00:12:27.114 --> 00:12:32.553 align:start position:43% line:-1
(拍手)

00:12:32.653 --> 00:12:33.620 align:start position:36% line:-1
ありがとう ドナ

00:12:34.288 --> 00:12:38.091 align:start position:23% line:-2
開発者には多くの
コントロールの選択肢があります

00:12:38.192 --> 00:12:43.430 align:start position:25% line:-2
さまざまな設定と
幅広いカスタマイズオプション

00:12:44.031 --> 00:12:46.066 align:start position:30% line:-1
ツールはいっぱいですが

00:12:46.400 --> 00:12:48.735 align:start position:27% line:-1
どのツールを選べばよいか？

00:12:50.704 --> 00:12:54.675 align:start position:21% line:-2
TextKitの機能を活用する
アプリケーションの例を見ましょう

00:12:55.242 --> 00:13:01.281 align:start position:25% line:-2
ほとんどのアプリケーションが
テキストの表示 編集をします

00:12:55.242 --> 00:13:01.281 align:start position:25% line:-2
ほとんどのアプリケーションが
テキストの表示 編集をします

00:13:03.584 --> 00:13:09.423 align:start position:21% line:-2
２つのアプリケーションを見たあと
独自に構築してみましょう

00:13:10.991 --> 00:13:14.328 align:start position:23% line:-2
最初のアプリケーションは
iOS上のApple News

00:13:14.428 --> 00:13:20.334 align:start position:27% line:-2
パーソナライズされた記事の
テキストを表示します

00:13:21.935 --> 00:13:26.206 align:start position:27% line:-2
Spotlightのタブに
表示される記事の例です

00:13:28.108 --> 00:13:31.311 align:start position:34% line:-2
上部に記事の詳細が
表示されます

00:13:32.012 --> 00:13:35.382 align:start position:25% line:-2
この見た目と操作感を
TextKitでどう作るか？

00:13:38.018 --> 00:13:40.821 align:start position:36% line:-2
ドナが示した
フローチャートで

00:13:40.921 --> 00:13:43.657 align:start position:32% line:-2
最適なコントロールを
選んでみましょう

00:13:45.893 --> 00:13:48.395 align:start position:25% line:-2
使えるテキストコントロールは
たくさんあります

00:13:49.196 --> 00:13:54.001 align:start position:30% line:-2
表示するのは１行のみで
テキストは少量なので

00:13:54.101 --> 00:13:55.302 align:start position:34% line:-1
ラベルを使用します

00:13:57.671 --> 00:14:01.475 align:start position:27% line:-2
インスペクタパネルに
多くのオプションがあります

00:13:57.671 --> 00:14:01.475 align:start position:27% line:-2
インスペクタパネルに
多くのオプションがあります

00:14:02.810 --> 00:14:09.416 align:start position:20% line:-2
テキストをSpotlightに変え
フォントをBodyに変更します

00:14:11.752 --> 00:14:17.157 align:start position:20% line:-2
Dynamic Typeを有効にし
アクセシビリティを設定すれば

00:14:17.257 --> 00:14:20.627 align:start position:30% line:-2
好みのサイズと
スタイルで表示できます

00:14:22.229 --> 00:14:25.098 align:start position:18% line:-2
Interface Builderで
ラベルをカスタマイズでき

00:14:25.199 --> 00:14:27.868 align:start position:29% line:-2
Swiftで
プロパティを見られるので

00:14:28.635 --> 00:14:33.340 align:start position:25% line:-2
テキストと書式のプロパティを
動的に設定できます

00:14:34.875 --> 00:14:39.112 align:start position:14% line:-2
Interface Builderに戻り
ラベルを２つ追加します

00:14:40.047 --> 00:14:44.985 align:start position:32% line:-2
すべて順調ですが
もう１つ必要なのです

00:14:46.086 --> 00:14:50.157 align:start position:18% line:-1
Apple Newsの右のテキストは

00:14:50.257 --> 00:14:54.094 align:start position:36% line:-2
黒と白の２色で
表示されています

00:14:54.828 --> 00:14:57.130 align:start position:29% line:-1
２つのラベルで可能ですが

00:14:57.464 --> 00:14:59.800 align:start position:32% line:-2
１つしか
使用したくない場合は

00:14:59.900 --> 00:15:02.503 align:start position:16% line:-2
Interface Builderでは
できません

00:14:59.900 --> 00:15:02.503 align:start position:16% line:-2
Interface Builderでは
できません

00:15:02.636 --> 00:15:04.638 align:start position:30% line:-1
どうすればよいでしょう

00:15:06.340 --> 00:15:10.210 align:start position:30% line:-2
属性付き文字列の機能と
柔軟性を利用します

00:15:11.678 --> 00:15:17.417 align:start position:25% line:-2
属性付き文字列は文字の特定の
範囲に属性を適用できます

00:15:17.885 --> 00:15:22.723 align:start position:29% line:-2
デフォルトのフォントや
テキストの色などの属性は

00:15:22.823 --> 00:15:25.392 align:start position:27% line:-1
指定した値で上書きできます

00:15:25.726 --> 00:15:29.163 align:start position:34% line:-2
今回は文字列の色を
部分的に白にします

00:15:31.565 --> 00:15:33.500 align:start position:36% line:-1
表示するためには

00:15:33.600 --> 00:15:37.204 align:start position:4% line:-2
NSMutableAttributedStringの
addAttributeメソッドを使用し

00:15:37.304 --> 00:15:40.574 align:start position:27% line:-2
望む範囲だけテキストの色を
白に設定します

00:15:41.508 --> 00:15:45.112 align:start position:18% line:-2
ラベルのattributedText
プロパティを設定します

00:15:47.481 --> 00:15:49.917 align:start position:27% line:-1
非常に整理された見た目です

00:15:51.585 --> 00:15:54.688 align:start position:29% line:-2
この種のテキストには
UILabelが最適です

00:15:55.589 --> 00:15:58.392 align:start position:34% line:-2
画面下部にある
見出しのテキストは

00:15:58.492 --> 00:16:02.462 align:start position:30% line:-2
少し大きめで複数の行に
またがっています

00:15:58.492 --> 00:16:02.462 align:start position:30% line:-2
少し大きめで複数の行に
またがっています

00:16:04.765 --> 00:16:07.868 align:start position:25% line:-1
しかも他と違って選択可能です

00:16:09.236 --> 00:16:11.438 align:start position:32% line:-2
どのコントロールを
使うべきでしょうか？

00:16:12.072 --> 00:16:15.676 align:start position:27% line:-2
テキストフィールドも
テキストビューもいいですが

00:16:15.776 --> 00:16:18.979 align:start position:32% line:-2
テキストフィールドは
通常は１行用です

00:16:20.047 --> 00:16:24.852 align:start position:27% line:-2
見出しは複数行なので
テキストビューを使用します

00:16:26.620 --> 00:16:31.925 align:start position:29% line:-2
デフォルトで
ダミーテキストが入ります

00:16:32.359 --> 00:16:35.829 align:start position:32% line:-2
インスペクタパネルの
テキストを変更します

00:16:37.030 --> 00:16:40.601 align:start position:27% line:-2
Apple Newsらしい
フォントを選び

00:16:42.002 --> 00:16:45.873 align:start position:29% line:-2
見出しを編集できないよう
編集機能を無効にします

00:16:47.207 --> 00:16:52.379 align:start position:20% line:-2
UITextViewはデフォルトで
スクロールが可能ですが

00:16:53.413 --> 00:16:58.252 align:start position:25% line:-2
自動レイアウトを活用するなら
スクロールを無効にします

00:16:58.785 --> 00:17:02.956 align:start position:23% line:-2
テキストビューのサイズが
テキストに合わせて変更されます

00:16:58.785 --> 00:17:02.956 align:start position:23% line:-2
テキストビューのサイズが
テキストに合わせて変更されます

00:17:05.459 --> 00:17:11.665 align:start position:29% line:-2
この白い背景は不要なので
透明に設定します

00:17:12.398 --> 00:17:15.769 align:start position:30% line:-2
テキストビューを簡単に
カスタマイズでき

00:17:15.868 --> 00:17:19.306 align:start position:25% line:-2
ラベルと同様
すべてコード内で設定できます

00:17:19.839 --> 00:17:25.212 align:start position:25% line:-2
Swiftでは実行時に動的に
テキストと書式を設定できます

00:17:26.046 --> 00:17:28.582 align:start position:21% line:-1
次はApple Newsではなく

00:17:29.383 --> 00:17:34.388 align:start position:27% line:-2
別のアプリケーションを例に
見てみましょう

00:17:35.823 --> 00:17:37.357 align:start position:30% line:-1
テキストエディットです

00:17:37.458 --> 00:17:39.960 align:start position:21% line:-1
macOS上のアプリケーションで

00:17:40.194 --> 00:17:43.630 align:start position:32% line:-2
リッチテキストの
表示と編集が可能です

00:17:44.898 --> 00:17:50.604 align:start position:27% line:-2
実はNSTextViewの
シンラッパーです

00:17:51.572 --> 00:17:56.777 align:start position:25% line:-2
TextKitで何ができるか
見ていきましょう

00:17:57.711 --> 00:18:03.150 align:start position:29% line:-2
このインスペクタバーも
その下のルーラービューも

00:17:57.711 --> 00:18:03.150 align:start position:29% line:-2
このインスペクタバーも
その下のルーラービューも

00:18:03.250 --> 00:18:07.888 align:start position:18% line:-2
Interface Builderの
チェックボックスを選択するだけ

00:18:08.722 --> 00:18:11.258 align:start position:30% line:-1
その下はテキストビュー

00:18:12.926 --> 00:18:14.828 align:start position:29% line:-1
そしてテキストコンテナと

00:18:14.928 --> 00:18:18.198 align:start position:30% line:-2
レイアウトマネージャと
テキストストレージです

00:18:18.832 --> 00:18:23.604 align:start position:16% line:-2
NSTextViewと
UITextViewの標準的な設定です

00:18:24.771 --> 00:18:27.274 align:start position:30% line:-1
似ているのは ここまで

00:18:28.308 --> 00:18:32.179 align:start position:18% line:-2
テーブルはNSTextViewでのみ
サポートされています

00:18:32.646 --> 00:18:34.481 align:start position:34% line:-1
すばらしいことに―

00:18:34.581 --> 00:18:38.986 align:start position:20% line:-2
TextKitはテーブルエディタを
提供します

00:18:42.723 --> 00:18:45.959 align:start position:32% line:-2
大量のテキストを
編集する時に便利な―

00:18:46.593 --> 00:18:50.797 align:start position:34% line:-2
スペルチェッカーも
無料で使えます

00:18:51.365 --> 00:18:53.200 align:start position:39% line:-1
そして更に―

00:18:53.300 --> 00:18:59.606 align:start position:27% line:-2
フォーマット機能を使用して
ページのように表示できます

00:18:59.706 --> 00:19:04.845 align:start position:27% line:-2
テキストコンテナのサイズが
用紙に合わせて変更されます

00:18:59.706 --> 00:19:04.845 align:start position:27% line:-2
テキストコンテナのサイズが
用紙に合わせて変更されます

00:19:05.879 --> 00:19:10.217 align:start position:32% line:-2
このようにテキストが
次のページへジャンプ

00:19:10.784 --> 00:19:13.787 align:start position:27% line:-1
標準的な設定では不可能です

00:19:14.755 --> 00:19:18.959 align:start position:25% line:-2
２つのテキストビューと
テキストコンテナを使いました

00:19:19.059 --> 00:19:24.598 align:start position:21% line:-2
同じレイアウトマネージャと
テキストストレージで管理されます

00:19:26.467 --> 00:19:30.704 align:start position:27% line:-2
テキストエディットの
仕組みをもっと知りたいなら

00:19:30.804 --> 00:19:32.873 align:start position:25% line:-1
ライブラリにソースがあります

00:19:35.042 --> 00:19:38.812 align:start position:32% line:-2
適切なコントロールと
設定を選びましたが

00:19:38.912 --> 00:19:42.483 align:start position:32% line:-2
求めるものを得るには
ハンマーが必要です

00:19:43.317 --> 00:19:45.552 align:start position:32% line:-1
使うべきハンマーは？

00:19:47.721 --> 00:19:51.458 align:start position:25% line:-2
ジャーナルアプリケーションを
構築しながら

00:19:51.558 --> 00:19:53.360 align:start position:30% line:-1
ハンマーを選んでみます

00:19:54.495 --> 00:19:57.331 align:start position:36% line:-2
まず今日の日付を
表示しましょう

00:19:58.232 --> 00:20:02.669 align:start position:25% line:-2
テキストフィールドを
ラベルのように動作させるには

00:19:58.232 --> 00:20:02.669 align:start position:25% line:-2
テキストフィールドを
ラベルのように動作させるには

00:20:03.904 --> 00:20:06.173 align:start position:29% line:-1
編集を無効にするだけです

00:20:07.875 --> 00:20:11.245 align:start position:27% line:-2
ジャーナル入力部には
テキストビューを使用します

00:20:11.879 --> 00:20:15.382 align:start position:23% line:-2
インスペクタでは
テキストビューが選択･編集でき

00:20:15.482 --> 00:20:19.086 align:start position:25% line:-2
リッチテキストとUndoが
サポートされていることを確認

00:20:20.921 --> 00:20:25.759 align:start position:23% line:-2
テキストフィールドを２つ追加し
単語数を表示します

00:20:27.594 --> 00:20:31.865 align:start position:29% line:-2
アプリケーション実行時に
単語数が変更されるように

00:20:31.965 --> 00:20:34.067 align:start position:36% line:-2
正しいハンマーを
見つけましょう

00:20:34.902 --> 00:20:39.740 align:start position:21% line:-2
デリゲートに準拠させるか
通知またはサブクラスを処理します

00:20:40.607 --> 00:20:45.445 align:start position:23% line:-2
今回はテキストストレージからの
通知を受けます

00:20:46.680 --> 00:20:49.783 align:start position:30% line:-2
テキストストレージから
単語の数を取得できます

00:20:50.651 --> 00:20:52.152 align:start position:41% line:-1
通知を受け

00:20:52.252 --> 00:20:55.289 align:start position:20% line:-2
stringValueプロパティを
更新します

00:20:56.924 --> 00:21:00.027 align:start position:34% line:-2
入力を開始すると
単語数が変化します

00:20:56.924 --> 00:21:00.027 align:start position:34% line:-2
入力を開始すると
単語数が変化します

00:21:02.062 --> 00:21:04.364 align:start position:36% line:-2
テキストの一部を
強調する場合―

00:21:04.998 --> 00:21:08.936 align:start position:27% line:-2
ショートカットやメニューで
太字などの書式を適用

00:21:10.704 --> 00:21:14.541 align:start position:25% line:-2
最新のテキストフォーマットも
使いたいですよね

00:21:14.641 --> 00:21:18.712 align:start position:27% line:-2
Markdownのように
制御文字で書式を指定したい

00:21:19.046 --> 00:21:23.750 align:start position:23% line:-2
前後にアスタリスクを挿入したら
太字にするには

00:21:24.184 --> 00:21:26.053 align:start position:27% line:-1
どのハンマーを使うべきか？

00:21:28.222 --> 00:21:32.493 align:start position:27% line:-2
変更がいつどこで生じたかを
知る必要がありますが

00:21:32.593 --> 00:21:36.163 align:start position:34% line:-2
通知される情報では
不十分です

00:21:37.297 --> 00:21:38.866 align:start position:30% line:-1
大きなハンマーを使用し

00:21:38.966 --> 00:21:41.135 align:start position:11% line:-2
NSTextStorageDelegateを
実装します

00:21:41.768 --> 00:21:44.605 align:start position:9% line:-2
具体的には
didProcessEditingメソッドです

00:21:44.938 --> 00:21:48.242 align:start position:27% line:-2
既存のものから
太字のフォントを新たに作り

00:21:48.809 --> 00:21:52.913 align:start position:32% line:-2
テキストストレージに
それを直接追加します

00:21:54.047 --> 00:21:57.918 align:start position:32% line:-2
最後のアスタリスクで
太字になりました

00:22:00.120 --> 00:22:05.726 align:start position:27% line:-2
それではコードスニペットを
挿入するとどうなるか？

00:22:06.427 --> 00:22:08.395 align:start position:23% line:-1
Markdownでは こうです

00:22:09.196 --> 00:22:13.133 align:start position:21% line:-2
最後のバッククォートを追加したら
コードブロックのように

00:22:13.934 --> 00:22:16.737 align:start position:30% line:-1
背景とヘッダを付けたい

00:22:17.538 --> 00:22:22.443 align:start position:25% line:-2
これは複雑で
２つの大型ハンマーが必要です

00:22:23.377 --> 00:22:25.812 align:start position:18% line:-2
まずは
サブクラスNSTextStorage

00:22:26.480 --> 00:22:29.249 align:start position:25% line:-2
NSTextStorageの
サブクラス化には

00:22:29.349 --> 00:22:31.084 align:start position:29% line:-1
４つのメソッドが必要です

00:22:31.185 --> 00:22:33.921 align:start position:27% line:-2
可変文字列の
プライベートインスタンスを

00:22:34.021 --> 00:22:35.189 align:start position:38% line:-1
操作しましょう

00:22:36.957 --> 00:22:39.459 align:start position:11% line:-1
replaceCharactersメソッドで

00:22:39.793 --> 00:22:43.263 align:start position:18% line:-2
段落スタイルに
NSTextBlockを追加できます

00:22:45.165 --> 00:22:46.833 align:start position:32% line:-1
そして段落スタイルを

00:22:46.934 --> 00:22:49.937 align:start position:29% line:-2
コードブロックの範囲で
テキストストレージに追加

00:22:50.337 --> 00:22:54.341 align:start position:25% line:-2
NSTextBlock自体は
カスタム描画を行わないので

00:22:54.441 --> 00:22:56.510 align:start position:23% line:-1
サブクラスにする必要があります

00:22:58.145 --> 00:23:04.218 align:start position:18% line:-2
NSTextBlockサブクラスでは
いくつかのパディングが必要です

00:22:58.145 --> 00:23:04.218 align:start position:18% line:-2
NSTextBlockサブクラスでは
いくつかのパディングが必要です

00:23:04.318 --> 00:23:06.153 align:start position:34% line:-1
明るい灰色の背景も

00:23:07.454 --> 00:23:12.993 align:start position:9% line:-2
drawBackgroundをオーバーライドし
ヘッダを描画すれば

00:23:13.494 --> 00:23:17.464 align:start position:21% line:-2
テキストブロックが
コードスニペットのように見えます

00:23:18.932 --> 00:23:21.168 align:start position:21% line:-1
カスタムテキストストレージに戻り

00:23:21.268 --> 00:23:26.306 align:start position:29% line:-2
新しいコードブロックの
インスタンスを作成します

00:23:29.743 --> 00:23:30.978 align:start position:43% line:-1
最後に―

00:23:31.078 --> 00:23:34.248 align:start position:25% line:-2
カスタムテキストストレージが
使用されるよう

00:23:34.348 --> 00:23:37.284 align:start position:29% line:-2
レイアウトマネージャの
テキストストレージを置換

00:23:39.419 --> 00:23:42.756 align:start position:27% line:-2
WYSIWYGなエディタに
なりましたね

00:23:42.956 --> 00:23:47.027 align:start position:27% line:-2
Markdownエディタは
左右に並べて表示できます

00:23:47.127 --> 00:23:50.330 align:start position:30% line:-2
左は編集版
右はレンダリング版です

00:23:51.465 --> 00:23:53.967 align:start position:30% line:-2
２つのテキストビューを
左右に並べ

00:23:56.170 --> 00:23:58.272 align:start position:34% line:-1
右側の編集を無効に

00:23:59.206 --> 00:24:04.545 align:start position:29% line:-2
同じ内容でも 右側は
少し違う外観にしたいので

00:23:59.206 --> 00:24:04.545 align:start position:29% line:-2
同じ内容でも 右側は
少し違う外観にしたいので

00:24:05.579 --> 00:24:11.251 align:start position:27% line:-2
テキストストレージは１つで
それ以外は２つ持たせます

00:24:14.121 --> 00:24:19.359 align:start position:29% line:-2
右のテキストストレージを
左のものに置き換えます

00:24:20.527 --> 00:24:22.162 align:start position:36% line:-1
結果を見ましょう

00:24:23.564 --> 00:24:29.002 align:start position:27% line:-2
左側に文字を追加すると
右側にもすぐに表示されます

00:24:29.670 --> 00:24:34.141 align:start position:20% line:-2
通常は右側にMarkdown文字は
表示されません

00:24:34.241 --> 00:24:37.010 align:start position:27% line:-2
しかしテキストストレージを
共有しているので

00:24:37.578 --> 00:24:40.914 align:start position:29% line:-2
レイアウトプロセス中に
文字を隠す必要があります

00:24:43.116 --> 00:24:46.687 align:start position:30% line:-2
これには１つの方法しか
ありません

00:24:47.554 --> 00:24:53.160 align:start position:5% line:-2
shouldGenerateGlyphsメソッドを
NSLayoutManagerデリゲートに実装

00:24:53.627 --> 00:24:56.897 align:start position:27% line:-2
これでグリフ生成プロセスに
介入できます

00:24:58.131 --> 00:25:00.934 align:start position:29% line:-1
配置対象のグリフを取得し

00:24:58.131 --> 00:25:00.934 align:start position:29% line:-1
配置対象のグリフを取得し

00:25:01.635 --> 00:25:04.605 align:start position:27% line:-2
Markdown制御文字を
表す場合―

00:25:04.705 --> 00:25:07.775 align:start position:25% line:-2
グリフにnullプロパティを
適用します

00:25:07.975 --> 00:25:14.014 align:start position:29% line:-2
これでレイアウト処理中に
グリフが完全に消滅

00:25:17.351 --> 00:25:23.557 align:start position:21% line:-2
新しいグリフを新しいプロパティで
表示するよう指示します

00:25:27.227 --> 00:25:32.833 align:start position:21% line:-2
左側はMarkdown文字を含む
編集可能なバージョン

00:25:32.933 --> 00:25:35.936 align:start position:25% line:-2
右側にMarkdown文字は
ありません

00:25:36.036 --> 00:25:38.005 align:start position:27% line:-2
どちらも
同じテキストストレージです

00:25:39.640 --> 00:25:43.610 align:start position:25% line:-2
左右に並べるエディタの構築は
一般的ではありませんが

00:25:43.844 --> 00:25:47.381 align:start position:32% line:-2
TextKitの
カスタマイズ例として

00:25:47.481 --> 00:25:48.916 align:start position:39% line:-1
紹介しました

00:25:50.617 --> 00:25:55.956 align:start position:16% line:-2
TextKitの使用法とカスタマイズは
プログラミングガイドでご確認を

00:25:56.223 --> 00:25:58.492 align:start position:32% line:-1
では ドナに戻します

00:25:58.759 --> 00:26:05.833 align:start position:43% line:-1
(拍手)

00:25:58.759 --> 00:26:05.833 align:start position:43% line:-1
(拍手)

00:26:06.533 --> 00:26:07.468 align:start position:32% line:-1
エミリー ありがとう

00:26:08.001 --> 00:26:09.636 align:start position:32% line:-1
とてもいい例でしたね

00:26:09.736 --> 00:26:14.007 align:start position:25% line:-2
皆さんのアプリケーションでも
ぜひ お試しください

00:26:14.575 --> 00:26:19.112 align:start position:23% line:-2
次はベストプラクティスについて
お話ししましょう

00:26:21.949 --> 00:26:23.617 align:start position:34% line:-1
まず正確性について

00:26:23.717 --> 00:26:26.053 align:start position:27% line:-2
思うように
レンダリングされない場合は

00:26:26.153 --> 00:26:30.757 align:start position:30% line:-2
属性付き文字列の属性が
不完全または不正です

00:26:31.992 --> 00:26:35.229 align:start position:34% line:-1
例を見てみましょう

00:26:36.096 --> 00:26:37.531 align:start position:34% line:-1
ある属性の付いた―

00:26:37.631 --> 00:26:41.135 align:start position:21% line:-2
“Don't hate.”という
テキストがあります

00:26:41.568 --> 00:26:44.571 align:start position:23% line:-2
フォントはComic Sans
24ポイント

00:26:45.639 --> 00:26:49.877 align:start position:25% line:-2
プログラムで“Don't”に
太字の書体を適用したい

00:26:50.077 --> 00:26:54.715 align:start position:25% line:-2
Comic Sansの太字は
かなり不評ですからね

00:26:54.815 --> 00:26:56.550 align:start position:41% line:-1
(笑い声)

00:26:56.884 --> 00:27:00.220 align:start position:30% line:-2
最初に こんなコードを
思いつくかもしれません

00:26:56.884 --> 00:27:00.220 align:start position:30% line:-2
最初に こんなコードを
思いつくかもしれません

00:27:00.721 --> 00:27:03.023 align:start position:30% line:-1
元のフォントがあります

00:27:04.258 --> 00:27:08.729 align:start position:29% line:-2
フォント記述子を使用して
その太字版を作成し

00:27:09.963 --> 00:27:15.068 align:start position:27% line:-2
元のテキストを使用して
可変属性付き文字列を初期化

00:27:15.769 --> 00:27:19.640 align:start position:27% line:-2
新しい太字フォントを
“Don't”に適用します

00:27:20.073 --> 00:27:21.808 align:start position:34% line:-1
最初の５文字ですね

00:27:21.909 --> 00:27:26.947 align:start position:21% line:-2
この新しい文字列を使用するよう
属性付き文字列のプロパティに設定

00:27:28.081 --> 00:27:34.154 align:start position:21% line:-2
新しい太字のフォントが
“Don't”に適用されましたが

00:27:34.254 --> 00:27:37.324 align:start position:30% line:-2
残りの文字は
フォントが変わりました

00:27:38.525 --> 00:27:41.462 align:start position:14% line:-1
Comic Sans嫌いは喜ぶでしょうが

00:27:42.262 --> 00:27:45.566 align:start position:23% line:-1
結果は間違っているので残念です

00:27:46.433 --> 00:27:48.335 align:start position:29% line:-1
なぜこうなったのでしょう

00:27:49.436 --> 00:27:54.141 align:start position:29% line:-2
属性付き文字列の初期化を
詳しく見ていきましょう

00:27:55.175 --> 00:28:01.849 align:start position:23% line:-2
プレーンテキスト文字列を使用し
属性情報なしで初期化しました

00:27:55.175 --> 00:28:01.849 align:start position:23% line:-2
プレーンテキスト文字列を使用し
属性情報なしで初期化しました

00:28:02.916 --> 00:28:07.588 align:start position:27% line:-2
新しい文字列を作成した際も
属性情報を指定せず

00:28:07.755 --> 00:28:10.657 align:start position:34% line:-2
デフォルトの属性を
使いました

00:28:10.924 --> 00:28:13.527 align:start position:25% line:-2
フォントはHelvetica
12ポイント

00:28:14.761 --> 00:28:18.465 align:start position:30% line:-2
元の属性付き文字列から
見ていきましょう

00:28:18.565 --> 00:28:21.735 align:start position:18% line:-2
Comic Sansの24ポイントを
全範囲に適用し

00:28:23.270 --> 00:28:28.041 align:start position:27% line:-2
新規属性付き文字列を作成し
デフォルトの属性で初期化

00:28:28.809 --> 00:28:31.812 align:start position:27% line:-2
そして
“Don't”に太字を適用

00:28:32.012 --> 00:28:37.151 align:start position:27% line:-2
Comic Sansの太字
24ポイントになりましたが

00:28:37.251 --> 00:28:40.420 align:start position:27% line:-2
残りはHelveticaの
12ポイントに

00:28:42.890 --> 00:28:45.759 align:start position:32% line:-2
これを直すには
２つの方法があります

00:28:45.859 --> 00:28:49.463 align:start position:23% line:-2
１つはプレーンテキストと
属性付きテキストを混在させない

00:28:50.063 --> 00:28:55.135 align:start position:25% line:-2
元の文字列を使用して初期化し
属性を保持すれば

00:28:55.369 --> 00:28:59.373 align:start position:29% line:-2
リセット効果なしに
新しい属性を適用できます

00:29:01.108 --> 00:29:05.245 align:start position:34% line:-2
テキストの混同を
避けられない場合は

00:29:05.345 --> 00:29:08.749 align:start position:30% line:-1
明示的に属性を指定して

00:29:08.849 --> 00:29:12.186 align:start position:25% line:-2
プレーンテキスト文字列から
属性付き文字列を作りましょう

00:29:12.486 --> 00:29:16.657 align:start position:23% line:-2
元のテキストの属性を適用すれば
正しい結果が出ます

00:29:18.559 --> 00:29:24.031 align:start position:21% line:-2
リセット効果はデフォルト値を持つ
他の属性にも及びます

00:29:24.698 --> 00:29:28.068 align:start position:30% line:-2
デフォルト値を持つ
属性はたくさんあります

00:29:30.137 --> 00:29:34.374 align:start position:32% line:-2
特に段落スタイルには
注意が必要です

00:29:34.975 --> 00:29:39.146 align:start position:27% line:-2
先ほどの例で
フォントを変更する代わりに

00:29:39.246 --> 00:29:43.417 align:start position:27% line:-2
段落スタイルを変更し
“hate”を切り詰めます

00:29:44.484 --> 00:29:48.088 align:start position:32% line:-2
しかし このコードを
実行すると

00:29:48.455 --> 00:29:52.659 align:start position:27% line:-2
すべてHelveticaの
12ポイントに

00:29:52.760 --> 00:29:57.297 align:start position:23% line:-2
デフォルトの段落スタイルで
ラッピングの改行モードが使われ

00:29:57.531 --> 00:30:02.736 align:start position:23% line:-2
Comic Sansフォントは
完全に失われました

00:29:57.531 --> 00:30:02.736 align:start position:23% line:-2
Comic Sansフォントは
完全に失われました

00:30:03.470 --> 00:30:06.607 align:start position:32% line:-1
前回とは違う結果です

00:30:07.875 --> 00:30:09.076 align:start position:43% line:-1
なぜか？

00:30:09.176 --> 00:30:12.346 align:start position:34% line:-2
レイアウト前に
属性の修正が行われ

00:30:12.446 --> 00:30:15.549 align:start position:30% line:-2
システムは
一貫性のない属性を修復

00:30:16.150 --> 00:30:17.718 align:start position:34% line:-1
属性付き文字列に―

00:30:17.818 --> 00:30:22.956 align:start position:29% line:-2
複数の段落スタイルを持つ
１つの段落があります

00:30:23.357 --> 00:30:26.160 align:start position:30% line:-2
システムが
この属性を修正する際―

00:30:26.260 --> 00:30:30.464 align:start position:25% line:-2
最初に見つけた段落スタイルを
全体に適用

00:30:31.198 --> 00:30:35.702 align:start position:30% line:-2
その結果 デフォルトの
スタイルで表示されます

00:30:37.171 --> 00:30:43.310 align:start position:27% line:-2
このような場合 重要なのは
属性を明示することです

00:30:43.677 --> 00:30:47.648 align:start position:27% line:-2
それでデフォルト属性での
リセット効果を避けられます

00:30:47.748 --> 00:30:50.884 align:start position:25% line:-2
ダークモード用に
アプリケーションを更新する際

00:30:50.984 --> 00:30:53.053 align:start position:38% line:-1
非常に重要です

00:30:53.153 --> 00:30:57.925 align:start position:12% line:-2
NSColor.textColorのような
動的な色を明示することで

00:30:58.025 --> 00:31:01.395 align:start position:29% line:-2
コンテキストに適した色で
テキストを描画できます

00:30:58.025 --> 00:31:01.395 align:start position:29% line:-2
コンテキストに適した色で
テキストを描画できます

00:31:02.963 --> 00:31:05.766 align:start position:30% line:-1
次のトピックは性能です

00:31:06.300 --> 00:31:12.005 align:start position:27% line:-2
大量のテキストを扱う場合
非連続レイアウトが有効です

00:31:13.040 --> 00:31:17.044 align:start position:32% line:-2
レイアウトプロセスを
もう一度見ましょう

00:31:17.678 --> 00:31:21.648 align:start position:27% line:-2
グリフの生成とレイアウトで
構成されています

00:31:22.583 --> 00:31:24.118 align:start position:34% line:-1
連続レイアウトでは

00:31:24.218 --> 00:31:29.790 align:start position:23% line:-2
テキストストレージの先頭から
グリフの生成とレイアウトを実行

00:31:30.157 --> 00:31:32.760 align:start position:27% line:-1
最後まで順番に処理されます

00:31:33.727 --> 00:31:37.297 align:start position:29% line:-2
テキストビューの途中まで
スクロールすると

00:31:37.397 --> 00:31:40.400 align:start position:30% line:-2
レイアウトマネージャが
手前のグリフを

00:31:40.500 --> 00:31:43.036 align:start position:30% line:-1
すべて生成 レイアウト

00:31:43.136 --> 00:31:44.905 align:start position:29% line:-1
赤く示されている部分です

00:31:45.205 --> 00:31:49.409 align:start position:29% line:-2
スクロールされて
見えないテキストも含む―

00:31:49.510 --> 00:31:51.778 align:start position:32% line:-2
テキストストレージの
先頭からです

00:31:52.446 --> 00:31:54.848 align:start position:36% line:-1
テキストが多いと

00:31:55.616 --> 00:31:58.919 align:start position:32% line:-2
レイアウト完了まで
しばらく待たされます

00:31:59.753 --> 00:32:04.191 align:start position:30% line:-2
非連続レイアウトなら
この状況を回避できます

00:31:59.753 --> 00:32:04.191 align:start position:30% line:-2
非連続レイアウトなら
この状況を回避できます

00:32:04.892 --> 00:32:09.930 align:start position:23% line:-2
非連続レイアウトでは
テキストストレージの先頭からの

00:32:10.030 --> 00:32:13.400 align:start position:29% line:-2
グリフ生成とレイアウトは
行いません

00:32:14.168 --> 00:32:17.971 align:start position:30% line:-2
テキストビューの途中に
スクロールすると

00:32:18.572 --> 00:32:23.010 align:start position:21% line:-2
その中間セクションの
グリフ生成とレイアウトを行います

00:32:24.278 --> 00:32:29.516 align:start position:21% line:-2
非連続レイアウトを使用すると
パフォーマンスが大幅に向上します

00:32:31.151 --> 00:32:32.986 align:start position:32% line:-1
どうすれば使えるか？

00:32:33.887 --> 00:32:37.724 align:start position:9% line:-2
非連続レイアウトは
NSLayoutManagerのプロパティです

00:32:37.825 --> 00:32:43.797 align:start position:27% line:-2
テキストにアクセスして
そのプロパティを設定します

00:32:45.532 --> 00:32:49.436 align:start position:23% line:-2
UITextViewの場合
デフォルトでオンになっています

00:32:49.970 --> 00:32:52.339 align:start position:36% line:-1
大切なことが１つ

00:32:52.740 --> 00:32:56.477 align:start position:7% line:-2
UITextViewはUIScrollViewの
サブクラスなので

00:32:56.977 --> 00:32:58.111 align:start position:32% line:-1
非連続レイアウトでは

00:32:58.212 --> 00:33:00.480 align:start position:29% line:-2
スクロールを
有効にする必要があります

00:32:58.212 --> 00:33:00.480 align:start position:29% line:-2
スクロールを
有効にする必要があります

00:33:01.248 --> 00:33:03.717 align:start position:29% line:-1
スクロールを無効にすると

00:33:03.817 --> 00:33:08.856 align:start position:29% line:-2
すべてのテキストの配置が
必要となり

00:33:08.956 --> 00:33:12.493 align:start position:34% line:-2
非連続レイアウトの
利点が得られません

00:33:14.261 --> 00:33:16.630 align:start position:29% line:-1
ここで重要なポイントです

00:33:17.130 --> 00:33:22.135 align:start position:27% line:-2
一度に大量のテキストの
レイアウトを要求しないこと

00:33:22.369 --> 00:33:25.405 align:start position:30% line:-2
非連続レイアウトを使う
意味がないからです

00:33:26.140 --> 00:33:30.210 align:start position:23% line:-2
テキストコンテナが１つなら
全体のレイアウトを要求しません

00:33:30.711 --> 00:33:34.915 align:start position:27% line:-2
終わりを含む広範囲の
文字やグリフについてもです

00:33:37.317 --> 00:33:42.156 align:start position:27% line:-2
テキスト処理の性能について
詳しくはWWDC2017の

00:33:42.256 --> 00:33:45.792 align:start position:0% line:-2
“Efficient Interactions with
Frameworks”をご覧ください

00:33:46.193 --> 00:33:49.763 align:start position:29% line:-2
詳細情報のリンクから
ビデオにアクセスできます

00:33:51.698 --> 00:33:56.136 align:start position:30% line:-2
次は誰もが好きな
セキュリティの話題です

00:33:58.205 --> 00:34:01.341 align:start position:27% line:-1
最近の事件をご存じでしょう

00:33:58.205 --> 00:34:01.341 align:start position:27% line:-1
最近の事件をご存じでしょう

00:34:01.675 --> 00:34:07.748 align:start position:27% line:-2
ソフトウェアのバグを悪用し
問題を起こす人々がいます

00:34:08.782 --> 00:34:13.754 align:start position:30% line:-2
こうした攻撃を防ぐ策を
私たちは練っています

00:34:14.955 --> 00:34:20.561 align:start position:27% line:-2
強力な防御のために
何をしているか話しましょう

00:34:20.661 --> 00:34:23.630 align:start position:27% line:-1
多層防御をご存じでしょうか

00:34:24.998 --> 00:34:26.867 align:start position:32% line:-1
念のために説明すると

00:34:26.967 --> 00:34:31.772 align:start position:32% line:-2
複数の保護対策を
組み合わせることです

00:34:32.105 --> 00:34:36.577 align:start position:30% line:-2
この概念は何世紀にも
わたって存在しています

00:34:36.810 --> 00:34:40.114 align:start position:30% line:-2
中世の城の周りは
視界確保のため木がなく

00:34:40.647 --> 00:34:44.685 align:start position:32% line:-2
敵を近づけないよう
堀に囲まれていました

00:34:45.351 --> 00:34:49.356 align:start position:27% line:-1
更に壁は高いため登りづらく

00:34:49.922 --> 00:34:56.129 align:start position:25% line:-2
攻撃者に発砲できるよう
上部に穴が設けられていました

00:34:57.031 --> 00:35:01.535 align:start position:32% line:-2
いずれか１つでは
防衛には不十分ですが

00:34:57.031 --> 00:35:01.535 align:start position:32% line:-2
いずれか１つでは
防衛には不十分ですが

00:35:01.635 --> 00:35:04.771 align:start position:38% line:-2
組み合わせれば
力を発揮します

00:35:06.073 --> 00:35:10.510 align:start position:32% line:-2
私たちも城と同様
複数の防御層を提供し

00:35:10.944 --> 00:35:15.349 align:start position:30% line:-2
皆さんも独自の防御策を
実装できます

00:35:15.782 --> 00:35:21.455 align:start position:25% line:-2
これにより更に安全性が向上し
誰もが勝者に

00:35:21.555 --> 00:35:23.624 align:start position:27% line:-1
その方法をお話ししましょう

00:35:25.592 --> 00:35:28.428 align:start position:34% line:-2
アプリケーションや
フレームワークで

00:35:28.529 --> 00:35:31.064 align:start position:30% line:-1
テキスト入力を制限する

00:35:31.431 --> 00:35:34.635 align:start position:32% line:-2
これは常に
使えるとは限りません

00:35:34.735 --> 00:35:39.306 align:start position:25% line:-2
例えばアプリケーションが
オーサリングツールである場合

00:35:39.673 --> 00:35:45.546 align:start position:27% line:-2
テキストの長さを制限しても
意味がありません

00:35:46.580 --> 00:35:51.719 align:start position:23% line:-2
でもアカウントにニックネームを
設定するテキストフィールドなら

00:35:51.852 --> 00:35:54.555 align:start position:29% line:-1
制限を付けられるでしょう

00:35:56.123 --> 00:36:01.261 align:start position:23% line:-2
テキスト入力は信頼できないので
制限の設定を推奨します

00:35:56.123 --> 00:36:01.261 align:start position:23% line:-2
テキスト入力は信頼できないので
制限の設定を推奨します

00:36:01.995 --> 00:36:06.633 align:start position:23% line:-2
テキスト入力を許可すると
コピー＆ペーストも許可されます

00:36:07.101 --> 00:36:09.403 align:start position:34% line:-1
何でも入力可能です

00:36:10.070 --> 00:36:13.574 align:start position:32% line:-2
悪意のある
文字列の場合もあるし

00:36:13.674 --> 00:36:19.513 align:start position:34% line:-2
とんでもなく長い
文字列ということも

00:36:20.514 --> 00:36:23.784 align:start position:32% line:-2
長い文字列は
たとえ悪意がなくても

00:36:23.884 --> 00:36:25.919 align:start position:29% line:-2
フリーズやハングアップの
原因に

00:36:26.153 --> 00:36:28.722 align:start position:25% line:-1
１行用のテキストフィールドに

00:36:28.822 --> 00:36:32.659 align:start position:32% line:-2
“戦争と平和”の
全文をペーストすると

00:36:33.026 --> 00:36:35.662 align:start position:29% line:-2
英語では
約310万文字になります

00:36:36.730 --> 00:36:37.798 align:start position:39% line:-1
妥当ですか？

00:36:39.733 --> 00:36:41.068 align:start position:36% line:-1
おそらく違います

00:36:42.603 --> 00:36:46.573 align:start position:29% line:-2
こうした場合は
制限が理にかなっています

00:36:48.208 --> 00:36:51.145 align:start position:27% line:-1
この種の制限を設定する際は

00:36:51.712 --> 00:36:55.082 align:start position:34% line:-2
入力文字列を
事前に検証すること

00:36:55.182 --> 00:36:59.486 align:start position:9% line:-2
UITextFieldでは
UITextFieldDelegateを使用し

00:36:59.853 --> 00:37:04.691 align:start position:18% line:-2
NSTextFieldでは
カスタムNSFormatterを使用

00:36:59.853 --> 00:37:04.691 align:start position:18% line:-2
NSTextFieldでは
カスタムNSFormatterを使用

00:37:06.593 --> 00:37:09.997 align:start position:32% line:-2
新たな安全性強化策も
準備中です

00:37:10.330 --> 00:37:14.835 align:start position:29% line:-2
質問があれば今週
ラボにお立ち寄りください

00:37:16.870 --> 00:37:19.907 align:start position:38% line:-2
もう時間なので
まとめましょう

00:37:20.374 --> 00:37:23.610 align:start position:30% line:-2
コントロールと
カスタマイズポイントと

00:37:23.710 --> 00:37:25.245 align:start position:29% line:-1
カスタマイズ方法の選び方

00:37:25.345 --> 00:37:30.050 align:start position:23% line:-2
正確性 性能 セキュリティの
ベストプラクティスを学びました

00:37:30.517 --> 00:37:34.588 align:start position:21% line:-2
この知識を活用しTextKitで
よいものを作ってください

00:37:35.522 --> 00:37:38.992 align:start position:27% line:-1
重要な情報リンクがあります

00:37:39.193 --> 00:37:42.963 align:start position:30% line:-2
過去のセッションや
資料をご覧いただけます

00:37:43.063 --> 00:37:45.265 align:start position:32% line:-2
木曜日と金曜日に
ラボを訪ねてください

00:37:46.533 --> 00:37:48.435 align:start position:30% line:-1
ありがとうございました

00:37:48.535 --> 00:37:50.704 align:start position:43% line:-1
(拍手)
