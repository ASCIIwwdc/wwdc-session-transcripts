WEBVTT

00:00:07.074 --> 00:00:16.583 align:start position:43% line:-1
(音楽)

00:00:20.721 --> 00:00:29.496 align:start position:43% line:-1
(拍手)

00:00:29.663 --> 00:00:32.198 align:start position:29% line:-1
アリ･ワインスタインです

00:00:32.299 --> 00:00:35.469 align:start position:29% line:-2
今日は
ウィレム･マテラーと共に

00:00:35.569 --> 00:00:37.871 align:start position:23% line:-2
Siri Shortcutsを
ご紹介します

00:00:39.139 --> 00:00:43.043 align:start position:23% line:-2
２年前 最初のバージョンの
SiriKitを発表しました

00:00:43.143 --> 00:00:48.182 align:start position:25% line:-2
SiriがAppと
連携して支払いをしたり

00:00:48.282 --> 00:00:53.520 align:start position:30% line:-2
メッセージを送信したり
できるようになりました

00:00:53.754 --> 00:00:56.590 align:start position:36% line:-2
しかし 今年は
もっと高性能な―

00:00:56.690 --> 00:01:00.561 align:start position:32% line:-2
Shortcutsを
発表したいと思います

00:00:56.690 --> 00:01:00.561 align:start position:32% line:-2
Shortcutsを
発表したいと思います

00:01:01.562 --> 00:01:04.197 align:start position:23% line:-1
Shortcutsの主な仕事は

00:01:04.298 --> 00:01:08.635 align:start position:27% line:-2
Appの主な機能を
Siriに開示することです

00:01:08.735 --> 00:01:13.273 align:start position:27% line:-2
これによりユーザは
今までと違った方法や場所で

00:01:13.373 --> 00:01:15.409 align:start position:27% line:-1
その機能を使えます

00:01:15.509 --> 00:01:18.779 align:start position:27% line:-2
ユーザエンゲージメントの
向上に効果的です

00:01:19.847 --> 00:01:25.319 align:start position:30% line:-2
ショートカットの開示は
可能性を広げるのです

00:01:25.419 --> 00:01:29.056 align:start position:29% line:-2
ではShortcutsは
どこで使えるのでしょう

00:01:30.824 --> 00:01:34.061 align:start position:18% line:-1
Shortcutsの導入でSiriは

00:01:34.161 --> 00:01:39.366 align:start position:29% line:-2
ユーザの意図を把握し
一歩進んだ提案をします

00:01:39.466 --> 00:01:44.238 align:start position:29% line:-2
検索中にもタイミング良く
提案します

00:01:45.639 --> 00:01:51.845 align:start position:20% line:-2
またSiri Shortcutsは
Apple Watchでも使えます

00:01:53.447 --> 00:01:57.050 align:start position:27% line:-2
Siriが必要と判断した時
ロック画面に

00:01:57.150 --> 00:01:59.353 align:start position:34% line:-1
Siriの提案が表示されます

00:01:59.453 --> 00:02:02.756 align:start position:36% line:-2
ショートカットを
タップすると

00:01:59.453 --> 00:02:02.756 align:start position:36% line:-2
ショートカットを
タップすると

00:02:02.856 --> 00:02:06.193 align:start position:27% line:-2
すぐさまAppを
利用できます

00:02:07.261 --> 00:02:09.295 align:start position:27% line:-1
また Siriに話しかけて

00:02:09.395 --> 00:02:12.499 align:start position:36% line:-2
ショートカットを
追加、実行できます

00:02:12.599 --> 00:02:17.871 align:start position:32% line:-2
この場合も検索と同じ
画面が表示されます

00:02:19.173 --> 00:02:23.277 align:start position:34% line:-2
Appは
Siriを通じて

00:02:23.377 --> 00:02:26.113 align:start position:34% line:-2
音声による
情報提供ができます

00:02:26.213 --> 00:02:29.349 align:start position:29% line:-1
Siriが音声でユーザに

00:02:29.449 --> 00:02:33.453 align:start position:30% line:-2
コーヒーができる時間を
教えてくれます

00:02:35.355 --> 00:02:38.292 align:start position:36% line:-2
ショートカットを
追加する時は

00:02:38.392 --> 00:02:41.161 align:start position:32% line:-1
フレーズを選択します

00:02:41.261 --> 00:02:45.599 align:start position:29% line:-2
ショートカットを起動する
フレーズを選べるのです

00:02:45.766 --> 00:02:48.836 align:start position:32% line:-2
デベロッパがこの
フレーズを提案できます

00:02:48.936 --> 00:02:52.139 align:start position:27% line:-2
この場合は
“コーヒータイム”でしょう

00:02:52.239 --> 00:02:54.741 align:start position:29% line:-1
追加したショートカットは

00:02:54.842 --> 00:02:57.678 align:start position:30% line:-2
全てのiOSデバイスで
使えます

00:02:57.778 --> 00:03:01.348 align:start position:27% line:-2
Apple Watchや
HomePodでも使えます

00:02:57.778 --> 00:03:01.348 align:start position:27% line:-2
Apple Watchや
HomePodでも使えます

00:03:02.616 --> 00:03:05.953 align:start position:21% line:-2
新しいShortcuts app
を使えば

00:03:06.053 --> 00:03:09.423 align:start position:27% line:-2
誰でも独自のショートカット
が作れます

00:03:09.523 --> 00:03:13.694 align:start position:30% line:-2
いくつかのステップを
ドラッグするだけでよく

00:03:13.794 --> 00:03:18.098 align:start position:27% line:-2
Appに特化した
ステップも入れられます

00:03:19.166 --> 00:03:23.337 align:start position:27% line:-2
本日はショートカットの
適用方法と

00:03:23.437 --> 00:03:27.608 align:start position:27% line:-2
優れた提案のための
最適化についてご説明します

00:03:27.741 --> 00:03:31.778 align:start position:32% line:-2
また プライバシーの
考慮についてと

00:03:31.879 --> 00:03:35.349 align:start position:30% line:-2
メディア再生に関しても
お話しします

00:03:36.450 --> 00:03:40.387 align:start position:20% line:-2
まず ShortcutsのAPIの
導入について説明します

00:03:41.421 --> 00:03:44.191 align:start position:32% line:-2
ショートカット作成の
手順は３つ

00:03:44.291 --> 00:03:46.793 align:start position:29% line:-2
まずは
ショートカットの定義です

00:03:46.894 --> 00:03:50.697 align:start position:27% line:-2
開示したいショートカットを
定義して

00:03:50.797 --> 00:03:54.468 align:start position:25% line:-2
SiriにAppを
理解させます

00:03:55.302 --> 00:03:57.905 align:start position:32% line:-2
次にショートカットを
報告します

00:03:58.005 --> 00:04:00.974 align:start position:34% line:-2
Appが
使用される度に

00:03:58.005 --> 00:04:00.974 align:start position:34% line:-2
Appが
使用される度に

00:04:01.074 --> 00:04:04.711 align:start position:36% line:-2
それをシステムに
報告するのです

00:04:04.811 --> 00:04:09.016 align:start position:32% line:-2
Siriはその報告を基に
提案を作ります

00:04:09.116 --> 00:04:12.920 align:start position:29% line:-2
３つ目はショートカットの
処理です

00:04:13.020 --> 00:04:18.492 align:start position:29% line:-2
ユーザがショートカットを
使いたいとします

00:04:18.591 --> 00:04:21.795 align:start position:27% line:-2
その場合Appや
Extensionが

00:04:21.894 --> 00:04:24.832 align:start position:27% line:-2
適切に起動され
処理されなくてはなりません

00:04:25.866 --> 00:04:29.069 align:start position:36% line:-2
ショートカットを
定義する前に

00:04:29.169 --> 00:04:32.873 align:start position:32% line:-2
まず何を開示するかを
決めます

00:04:32.973 --> 00:04:35.375 align:start position:30% line:-1
そのAppで

00:04:35.475 --> 00:04:38.478 align:start position:36% line:-2
最もしたいことを
考えると簡単です

00:04:38.579 --> 00:04:42.216 align:start position:34% line:-2
それに関するものが
候補になります

00:04:42.583 --> 00:04:45.419 align:start position:29% line:-1
開示するショートカットは

00:04:45.519 --> 00:04:49.823 align:start position:27% line:-2
ユーザをAppへ
直行させてくれるのです

00:04:49.990 --> 00:04:53.961 align:start position:30% line:-2
そのAppの
本来の機能を

00:04:54.061 --> 00:04:56.263 align:start position:29% line:-1
もっと迅速に利用できます

00:04:57.097 --> 00:04:59.666 align:start position:29% line:-2
時間短縮は大幅でなくては
なりません

00:04:59.766 --> 00:05:02.269 align:start position:34% line:-1
普通に起動するのと

00:04:59.766 --> 00:05:02.269 align:start position:34% line:-1
普通に起動するのと

00:05:02.369 --> 00:05:05.105 align:start position:36% line:-2
同じ速度では
意味がありません

00:05:05.205 --> 00:05:09.743 align:start position:32% line:-2
時間の短縮にならない
ショートカットだと

00:05:10.077 --> 00:05:12.179 align:start position:32% line:-1
頻繁に提案されません

00:05:12.279 --> 00:05:18.051 align:start position:27% line:-2
またユーザが関心を持ち
何度も使うショートカットを

00:05:18.318 --> 00:05:21.755 align:start position:29% line:-1
開示しなければなりません

00:05:21.855 --> 00:05:24.191 align:start position:32% line:-1
数回しか使われない―

00:05:24.291 --> 00:05:27.928 align:start position:36% line:-2
ショートカットは
意味がありません

00:05:28.962 --> 00:05:33.467 align:start position:29% line:-2
そして いつでも
実行できる必要があります

00:05:33.567 --> 00:05:37.437 align:start position:34% line:-2
特定の環境下でのみ
利用できるものは

00:05:37.538 --> 00:05:39.873 align:start position:36% line:-1
確実性に欠けます

00:05:40.741 --> 00:05:44.111 align:start position:29% line:-2
開示するショートカットを
決定したら

00:05:44.211 --> 00:05:47.047 align:start position:30% line:-1
APIをチェックします

00:05:48.949 --> 00:05:53.020 align:start position:23% line:-2
Shortcuts用のAPIは
２つあります

00:05:53.120 --> 00:05:55.722 align:start position:20% line:-1
１つはNSUserActivity

00:05:55.989 --> 00:06:00.360 align:start position:29% line:-2
Appの機能を
簡単に伝えることができ

00:05:55.989 --> 00:06:00.360 align:start position:29% line:-2
Appの機能を
簡単に伝えることができ

00:06:00.460 --> 00:06:04.464 align:start position:18% line:-2
SpotlightやHandoffと
連動します

00:06:05.365 --> 00:06:07.434 align:start position:29% line:-1
２つ目はIntentです

00:06:07.534 --> 00:06:12.973 align:start position:21% line:-2
IntentはAppの機能を
より詳細に伝えます

00:06:13.073 --> 00:06:17.511 align:start position:23% line:-2
SiriKitにはすでに
ビルトインのIntentがあり

00:06:18.178 --> 00:06:21.949 align:start position:29% line:-2
AppとSiriを
連動できます

00:06:22.049 --> 00:06:24.418 align:start position:25% line:-2
ビルトインのものに加え
今後はShortcuts用の

00:06:24.518 --> 00:06:28.222 align:start position:30% line:-2
カスタムIntentを
自分で定義できます

00:06:29.223 --> 00:06:32.125 align:start position:36% line:-2
ショートカットを
開示する時は

00:06:32.226 --> 00:06:35.062 align:start position:20% line:-2
まずNSUserActivityか
Intentかを選びます

00:06:35.162 --> 00:06:37.297 align:start position:29% line:-1
判断基準を見てみましょう

00:06:40.133 --> 00:06:43.670 align:start position:23% line:-2
NSUserActivityは
何かを開くなど

00:06:43.770 --> 00:06:47.541 align:start position:30% line:-2
単純なショートカットに
向いています

00:06:47.641 --> 00:06:50.911 align:start position:20% line:-1
例えば既にSpotlight検索で

00:06:51.011 --> 00:06:53.747 align:start position:30% line:-2
インデックスしたものへの
ショートカットなどです

00:06:53.847 --> 00:06:58.919 align:start position:14% line:-2
または既にNSUserActivityに
提供しているものなどもです

00:07:00.888 --> 00:07:04.691 align:start position:27% line:-2
しかしShortcutsの
長所を有効利用するには

00:07:04.791 --> 00:07:06.493 align:start position:27% line:-1
Intentを使いましょう

00:07:06.593 --> 00:07:09.496 align:start position:34% line:-2
Appを
起動せずに使え

00:07:10.030 --> 00:07:14.401 align:start position:27% line:-2
カスタマイズした音声と
UIも入れられ

00:07:15.202 --> 00:07:18.138 align:start position:36% line:-2
後ほどウィレムが
説明しますが

00:07:18.238 --> 00:07:20.774 align:start position:29% line:-1
パラメータ予測もできます

00:07:21.642 --> 00:07:24.044 align:start position:36% line:-1
どちらの方法かを決定したら

00:07:24.144 --> 00:07:27.748 align:start position:34% line:-2
あとは実際に
実装してみましょう

00:07:29.783 --> 00:07:32.719 align:start position:18% line:-2
まずはNSUserActivityを
使ったショートカットです

00:07:32.853 --> 00:07:36.723 align:start position:29% line:-2
初めは
ショートカットの定義です

00:07:36.823 --> 00:07:42.162 align:start position:23% line:-2
Appの
Info.plistファイルで

00:07:42.262 --> 00:07:45.032 align:start position:30% line:-2
UserActivityTypeを
登録します

00:07:46.333 --> 00:07:50.170 align:start position:32% line:-2
次にショートカットを
報告します

00:07:50.270 --> 00:07:53.240 align:start position:27% line:-2
対象Appに対し
常に

00:07:53.340 --> 00:07:58.245 align:start position:14% line:-2
NSUserActivityオブジェクト
を準備しておきます

00:07:59.146 --> 00:08:01.448 align:start position:32% line:-1
ここで重要なフラグが

00:07:59.146 --> 00:08:01.448 align:start position:32% line:-1
ここで重要なフラグが

00:08:01.548 --> 00:08:04.318 align:start position:9% line:-2
isEligibleForPrediction
です

00:08:04.418 --> 00:08:08.322 align:start position:30% line:-2
これでアクティビティを
ショートカットにできます

00:08:08.422 --> 00:08:11.725 align:start position:30% line:-2
既存の
アクティビティについて

00:08:11.825 --> 00:08:14.628 align:start position:27% line:-2
このフラグを
“true”にするだけです

00:08:14.728 --> 00:08:17.998 align:start position:30% line:-2
ショートカットが自動で
作成されます

00:08:18.532 --> 00:08:22.236 align:start position:14% line:-2
isEligibleForSearchも
“true”にしてください

00:08:22.336 --> 00:08:25.806 align:start position:7% line:-2
isEligibleForPredictionが
有効になります

00:08:26.340 --> 00:08:31.645 align:start position:12% line:-2
isEligibleForHandoffは
“true”がデフォルトのため

00:08:31.745 --> 00:08:37.484 align:start position:27% line:-2
そのままでアクティビティを
デバイス間で共有できます

00:08:38.852 --> 00:08:43.023 align:start position:29% line:-2
アクティビティを作る時は
あとで使えるように

00:08:43.123 --> 00:08:47.694 align:start position:30% line:-2
userInfo辞書に
情報を入れましょう

00:08:48.762 --> 00:08:51.965 align:start position:16% line:-2
次にUIViewControllerか
UIResponderオブジェクトに

00:08:52.065 --> 00:08:57.004 align:start position:30% line:-2
アクティビティを追加し
カレントにします

00:08:58.605 --> 00:09:02.743 align:start position:30% line:-2
定義と報告が終わったら
処理のステップです

00:08:58.605 --> 00:09:02.743 align:start position:30% line:-2
定義と報告が終わったら
処理のステップです

00:09:02.843 --> 00:09:05.979 align:start position:18% line:-1
NSUserActivityを使うと

00:09:06.079 --> 00:09:09.683 align:start position:29% line:-2
常にAppで
それが開きます

00:09:09.850 --> 00:09:13.120 align:start position:9% line:-2
そのためには
continueUserActivityという

00:09:13.220 --> 00:09:16.857 align:start position:20% line:-2
AppDelegateのメソッドを
実装します

00:09:16.957 --> 00:09:22.229 align:start position:27% line:-2
まずアクティビティタイプが
正しいか確認します

00:09:22.329 --> 00:09:25.165 align:start position:30% line:-2
正しかったら
アクティビティ登録時の

00:09:25.265 --> 00:09:27.734 align:start position:38% line:-1
状態に復元します

00:09:28.936 --> 00:09:32.339 align:start position:36% line:-2
これでSiriが
ショートカットを

00:09:32.439 --> 00:09:35.242 align:start position:27% line:-1
提案できるようになりました

00:09:37.077 --> 00:09:40.247 align:start position:21% line:-1
次はIntentを使った方法です

00:09:41.148 --> 00:09:43.417 align:start position:32% line:-2
まずショートカットを
定義します

00:09:43.517 --> 00:09:49.523 align:start position:21% line:-2
最初にどのタイプのIntentを
使用するか決めます

00:09:50.090 --> 00:09:53.393 align:start position:32% line:-2
SiriKitには
メッセージの送信など

00:09:53.494 --> 00:09:56.864 align:start position:32% line:-2
様々なビルトインの
Intentがあります

00:09:57.364 --> 00:10:02.903 align:start position:25% line:-2
新しいカスタムIntentを
Xcodeで定義もできます

00:09:57.364 --> 00:10:02.903 align:start position:25% line:-2
新しいカスタムIntentを
Xcodeで定義もできます

00:10:03.003 --> 00:10:06.173 align:start position:29% line:-2
既に
作りたいショートカットが

00:10:06.273 --> 00:10:10.277 align:start position:18% line:-2
ビルトインのIntentにあれば
それを使いましょう

00:10:10.377 --> 00:10:13.080 align:start position:27% line:-1
なければ自分で定義しましょう

00:10:13.280 --> 00:10:17.451 align:start position:32% line:-2
自分で定義する場合も
既存のものを使う時も

00:10:17.551 --> 00:10:21.622 align:start position:21% line:-2
まずXcodeで Intentの
定義ファイルを作ります

00:10:21.955 --> 00:10:27.594 align:start position:32% line:-2
私はスープを注文する
Appを

00:10:27.694 --> 00:10:30.797 align:start position:32% line:-1
友人と開発しています

00:10:30.898 --> 00:10:36.303 align:start position:27% line:-2
Siriと連携して
簡単にスープを注文できます

00:10:36.937 --> 00:10:41.909 align:start position:27% line:-2
Intentエディタで
Intentを作りましょう

00:10:42.009 --> 00:10:45.412 align:start position:30% line:-2
Xcodeで
FileからNew > Fileを選び

00:10:45.512 --> 00:10:48.582 align:start position:18% line:-2
“Definition File”を
選択します

00:10:49.249 --> 00:10:51.385 align:start position:25% line:-2
するとIntentエディタが
表示されます

00:10:51.485 --> 00:10:55.322 align:start position:27% line:-2
左下のプラスボタンを押して
開始します

00:10:56.823 --> 00:11:00.060 align:start position:21% line:-1
まずIntentに名前を付けます

00:10:56.823 --> 00:11:00.060 align:start position:21% line:-1
まずIntentに名前を付けます

00:11:00.160 --> 00:11:03.096 align:start position:23% line:-2
今回は
“OrderSoup”とします

00:11:04.798 --> 00:11:07.568 align:start position:23% line:-2
次にIntentのメタデータを
入力します

00:11:07.668 --> 00:11:09.903 align:start position:38% line:-2
ステップごとに
見てみましょう

00:11:10.470 --> 00:11:13.273 align:start position:30% line:-1
最初は“カテゴリ”です

00:11:13.373 --> 00:11:16.710 align:start position:30% line:-1
カテゴリが定義されると

00:11:16.810 --> 00:11:20.480 align:start position:20% line:-2
SiriがIntentと連動し
言葉やUIが決まります

00:11:20.581 --> 00:11:23.684 align:start position:30% line:-2
今回は“Order”を
選びます

00:11:23.784 --> 00:11:28.589 align:start position:27% line:-2
これでSiriは
“注文完了です”と言ったり

00:11:28.689 --> 00:11:31.925 align:start position:27% line:-1
画面に“注文”と表示します

00:11:32.226 --> 00:11:36.096 align:start position:29% line:-2
Intentの目的に合う
カテゴリを

00:11:36.196 --> 00:11:38.499 align:start position:32% line:-1
選ぶのが良いでしょう

00:11:39.399 --> 00:11:42.836 align:start position:29% line:-2
次はIntentの
“タイトル”と“説明”です

00:11:42.936 --> 00:11:48.108 align:start position:30% line:-2
ショートカットの情報として
色々な場面で使用されます

00:11:48.942 --> 00:11:52.679 align:start position:27% line:-2
これは事前にユーザの確認を
必要とするかどうかを

00:11:52.779 --> 00:11:57.284 align:start position:32% line:-2
決定するための
チェックボックスです

00:11:57.384 --> 00:12:01.088 align:start position:32% line:-2
“注文しますか？”と
Siriが尋ねれば

00:11:57.384 --> 00:12:01.088 align:start position:32% line:-2
“注文しますか？”と
Siriが尋ねれば

00:12:01.188 --> 00:12:05.893 align:start position:29% line:-2
間違ってスープを注文する
心配がありません

00:12:07.661 --> 00:12:10.898 align:start position:30% line:-1
次は“パラメータ”です

00:12:10.998 --> 00:12:14.768 align:start position:30% line:-2
ショートカットに渡す
パラメータを定義します

00:12:14.868 --> 00:12:17.437 align:start position:34% line:-1
今回は２つあります

00:12:17.538 --> 00:12:22.042 align:start position:29% line:-2
注文された商品のリストと
配達場所です

00:12:22.142 --> 00:12:26.180 align:start position:30% line:-2
パラメータは 文字 数
人 場所などの情報を

00:12:26.280 --> 00:12:29.850 align:start position:34% line:-2
タイプ別に
リスト化しています

00:12:29.950 --> 00:12:34.955 align:start position:32% line:-2
作りたいパラメータが
リストにない場合は

00:12:35.055 --> 00:12:38.892 align:start position:32% line:-2
“カスタムタイプ”を
選びます

00:12:40.294 --> 00:12:43.597 align:start position:32% line:-2
次はショートカットの
タイプです

00:12:43.697 --> 00:12:48.769 align:start position:30% line:-2
ユーザに提案したい
タイプを全て定義します

00:12:49.469 --> 00:12:53.140 align:start position:29% line:-2
各タイプには 予測される
パラメータが入っています

00:12:53.240 --> 00:12:58.612 align:start position:32% line:-2
タイプを選ぶと
パラメータに値が入り

00:12:58.712 --> 00:13:01.782 align:start position:34% line:-2
タイトルなどの表示が
決まります

00:12:58.712 --> 00:13:01.782 align:start position:34% line:-2
タイトルなどの表示が
決まります

00:13:01.882 --> 00:13:05.586 align:start position:27% line:-2
Shortcutsが
バックグラウンド実行でなく

00:13:05.686 --> 00:13:09.056 align:start position:29% line:-2
Appを
起動する必要がある場合は

00:13:09.156 --> 00:13:12.059 align:start position:27% line:-2
“Background”の
チェックを外してください

00:13:12.159 --> 00:13:15.896 align:start position:32% line:-2
Intentに
複数のタイプが含まれ

00:13:15.996 --> 00:13:19.433 align:start position:29% line:-2
一部だけバックグラウンドで
実行される場合があります

00:13:19.533 --> 00:13:23.303 align:start position:32% line:-2
Soup Chefが
まさにそのケースです

00:13:23.403 --> 00:13:28.842 align:start position:29% line:-2
商品と場所の両方が
予測できた場合は

00:13:28.942 --> 00:13:31.178 align:start position:34% line:-1
バックグラウンドで実行されます

00:13:31.278 --> 00:13:35.782 align:start position:30% line:-2
しかし 配達場所だけが
タイプに入っていると

00:13:36.483 --> 00:13:41.188 align:start position:29% line:-2
Siriは
情報が不十分と予測します

00:13:41.288 --> 00:13:45.292 align:start position:34% line:-2
その場合はバックグラウンドで
実行させずに

00:13:45.392 --> 00:13:50.164 align:start position:30% line:-2
Appを開き
ユーザに場所を尋ねます

00:13:50.964 --> 00:13:55.302 align:start position:27% line:-2
関係する全ての
ショートカットタイプを指定し

00:13:55.402 --> 00:13:58.739 align:start position:29% line:-2
Siriが
予測しやすいようにします

00:13:58.839 --> 00:14:01.308 align:start position:30% line:-2
できれば
全てのショートカットが

00:13:58.839 --> 00:14:01.308 align:start position:30% line:-2
できれば
全てのショートカットが

00:14:01.408 --> 00:14:05.012 align:start position:27% line:-2
バックグラウンドで
作動するのが望ましいですね

00:14:05.112 --> 00:14:09.683 align:start position:36% line:-2
ユーザの利用が
迅速になることで

00:14:09.783 --> 00:14:12.452 align:start position:27% line:-1
より頻繁な提案がなされます

00:14:13.654 --> 00:14:17.891 align:start position:23% line:-2
Intentには16のタイプを
設定できます

00:14:18.725 --> 00:14:23.797 align:start position:23% line:-2
定義が終わると Xcodeは
自動的にIntentのクラスと

00:14:23.931 --> 00:14:27.034 align:start position:21% line:-2
Intent Handlingプロトコルの
コードを生成します

00:14:27.134 --> 00:14:30.571 align:start position:12% line:-2
今回は“OrderSoupIntent”の
クラスと

00:14:30.671 --> 00:14:33.740 align:start position:4% line:-2
“OrderSoupIntentHandling”の
プロトコル

00:14:33.841 --> 00:14:38.979 align:start position:27% line:-2
プロパティはIntentの
定義ファイルのとおりです

00:14:39.713 --> 00:14:43.650 align:start position:30% line:-2
どのターゲットに対して
コードを生成するのかを

00:14:43.750 --> 00:14:46.820 align:start position:30% line:-1
考慮する必要があります

00:14:46.920 --> 00:14:51.959 align:start position:32% line:-2
コンフリクトする同じクラスを
作らないためです

00:14:52.492 --> 00:14:56.396 align:start position:30% line:-1
では私のインスペクタで

00:14:56.497 --> 00:14:59.299 align:start position:27% line:-1
ターゲットを見てみましょう

00:15:00.934 --> 00:15:06.540 align:start position:21% line:-2
全てのターゲットにIntentの
定義ファイルを含めます

00:15:06.640 --> 00:15:10.310 align:start position:16% line:-2
Target Membership配下の
ボックスをチェックします

00:15:10.410 --> 00:15:13.146 align:start position:29% line:-1
フレームワークがある場合

00:15:13.247 --> 00:15:17.084 align:start position:27% line:-2
複数のターゲットでコードを
生成しないでください

00:15:17.217 --> 00:15:21.855 align:start position:27% line:-2
Intentのクラスのみを
作るようにします

00:15:21.955 --> 00:15:24.158 align:start position:16% line:-1
“Intent Classes”を選び

00:15:24.258 --> 00:15:29.463 align:start position:9% line:-2
“No Generated Classes”を
他のターゲットに選びます

00:15:29.563 --> 00:15:35.169 align:start position:29% line:-2
Appに
フレームワークがない場合

00:15:35.269 --> 00:15:38.906 align:start position:32% line:-2
全てのターゲットを
チェックする必要があります

00:15:40.073 --> 00:15:43.510 align:start position:21% line:-2
これがカスタムIntentを
定義する方法です

00:15:44.211 --> 00:15:47.714 align:start position:38% line:-2
定義が終われば
報告は簡単です

00:15:47.815 --> 00:15:50.984 align:start position:27% line:-2
Intentオブジェクトを
インスタンス化し

00:15:51.084 --> 00:15:56.256 align:start position:12% line:-2
パラメータを入れINInteraction
オブジェクトを報告します

00:15:56.757 --> 00:16:02.362 align:start position:29% line:-2
ユーザがショートカットを
使う度この操作を行います

00:15:56.757 --> 00:16:02.362 align:start position:29% line:-2
ユーザがショートカットを
使う度この操作を行います

00:16:02.462 --> 00:16:07.334 align:start position:32% line:-2
つまりユーザが
スープを注文する度に

00:16:07.434 --> 00:16:12.639 align:start position:25% line:-2
Intentを報告し
Siriの予測を助けるのです

00:16:14.041 --> 00:16:18.011 align:start position:32% line:-2
あとは実際に
処理するだけです

00:16:18.111 --> 00:16:20.948 align:start position:18% line:-1
NSUserActivityと同様に

00:16:21.048 --> 00:16:25.919 align:start position:14% line:-2
continueUserActivity
メソッドを使います

00:16:26.019 --> 00:16:31.725 align:start position:11% line:-2
IntentはNSUserActivityの
オブジェクトとして渡され

00:16:31.825 --> 00:16:36.597 align:start position:21% line:-2
アクティビティタイプは
Intentのクラス名になります

00:16:36.697 --> 00:16:39.533 align:start position:16% line:-2
ここでは
“OrderSoupIntent”です

00:16:40.100 --> 00:16:42.970 align:start position:9% line:-2
continueUserActivityだけを
実装すると

00:16:43.070 --> 00:16:45.305 align:start position:27% line:-2
ショートカットは毎回
Appを開きます

00:16:45.405 --> 00:16:48.475 align:start position:30% line:-2
バックグラウンド実行されず
Siriと連動せず

00:16:48.575 --> 00:16:50.844 align:start position:27% line:-1
カスタムボイスも使えません

00:16:50.944 --> 00:16:52.913 align:start position:27% line:-1
Extensionを作ると

00:16:53.013 --> 00:16:56.250 align:start position:29% line:-2
バックグラウンドで
ショートカットが使えます

00:16:57.017 --> 00:17:01.421 align:start position:30% line:-2
それにはXcodeで
新しいターゲットを作り

00:16:57.017 --> 00:17:01.421 align:start position:30% line:-2
それにはXcodeで
新しいターゲットを作り

00:17:01.522 --> 00:17:04.258 align:start position:20% line:-2
Intents Extension
テンプレートを選びます

00:17:05.659 --> 00:17:09.663 align:start position:29% line:-2
そしてハンドラを
プロトコルに対応させます

00:17:09.762 --> 00:17:13.867 align:start position:7% line:-2
ここでは
OrderSoupIntentHandlingに

00:17:13.967 --> 00:17:16.236 align:start position:34% line:-1
合わせて実装します

00:17:16.336 --> 00:17:21.340 align:start position:20% line:-2
従来のSiriKitと違い
Resolveメソッドは要りません

00:17:21.441 --> 00:17:27.381 align:start position:21% line:-2
特別なカスタマイズなしに
使用可能だからです

00:17:27.481 --> 00:17:31.852 align:start position:23% line:-2
Intentのプロパティの値が
全て有効か確認します

00:17:31.952 --> 00:17:35.656 align:start position:30% line:-2
値が無効で
処理できない場合は

00:17:35.756 --> 00:17:38.525 align:start position:30% line:-1
エラーコードを返します

00:17:38.625 --> 00:17:42.829 align:start position:27% line:-2
処理できる場合
ショートカットを実行します

00:17:42.930 --> 00:17:45.933 align:start position:27% line:-1
この場合はスープの注文です

00:17:46.033 --> 00:17:51.805 align:start position:23% line:-2
Responseオブジェクトに
注文の結果を返します

00:17:52.839 --> 00:17:56.310 align:start position:29% line:-2
バックグラウンド実行される
全てのショートカットは

00:17:56.410 --> 00:17:59.112 align:start position:18% line:-2
Intents Extensionを
実装する必要があります

00:17:59.213 --> 00:18:02.983 align:start position:27% line:-2
そうすることで
Appを開かずに

00:17:59.213 --> 00:18:02.983 align:start position:27% line:-2
そうするとApp
を開かずに

00:18:03.083 --> 00:18:07.521 align:start position:25% line:-2
ロック画面や検索画面
Shortcuts appから使えます

00:18:07.621 --> 00:18:11.225 align:start position:32% line:-2
バックグラウンド実行が
最も価値がありますが

00:18:11.325 --> 00:18:13.560 align:start position:29% line:-2
他にも優れたたくさんの
ショートカットが作れます

00:18:13.660 --> 00:18:17.197 align:start position:18% line:-2
Intents Extensionを
実装する場合も

00:18:17.297 --> 00:18:19.933 align:start position:12% line:-2
continueUserActivityは
常に実装してください

00:18:20.033 --> 00:18:24.538 align:start position:30% line:-2
Siri上のカードを
タップしたりすることで

00:18:24.638 --> 00:18:30.277 align:start position:34% line:-2
Siriからショートカットを
App内で起動できるからです

00:18:31.645 --> 00:18:36.150 align:start position:12% line:-2
INRelevantShortcutを
紹介します

00:18:36.250 --> 00:18:40.754 align:start position:27% line:-2
Siriの文字盤で
ショートカットを表示するためです

00:18:40.854 --> 00:18:44.391 align:start position:30% line:-2
これにはIntentか
アクティビティを含む

00:18:44.491 --> 00:18:47.694 align:start position:18% line:-2
INRelevantShortcut
オブジェクトを提供します

00:18:48.095 --> 00:18:52.099 align:start position:30% line:-2
ショートカットに
関連情報も入れられます

00:18:52.199 --> 00:18:54.134 align:start position:34% line:-1
提案のタイミングを

00:18:54.234 --> 00:18:58.405 align:start position:29% line:-2
Siriの文字盤が
判断するヒントになります

00:18:59.273 --> 00:19:04.578 align:start position:25% line:-2
WatchのAppがない場合でも
使えます

00:18:59.273 --> 00:19:04.578 align:start position:25% line:-2
WatchのAppがない場合でも
使えます

00:19:04.678 --> 00:19:08.282 align:start position:29% line:-2
iOSでショートカットを
開示すると

00:19:08.382 --> 00:19:12.052 align:start position:32% line:-2
バックグラウンド実行できる場合
Siriの文字盤に表示されます

00:19:12.152 --> 00:19:17.291 align:start position:25% line:-2
ShortcutsとAPIの
説明が終わったので

00:19:17.391 --> 00:19:19.827 align:start position:32% line:-1
ウィレムと交代します

00:19:19.927 --> 00:19:23.931 align:start position:20% line:-2
XcodeでのShortcutsの
実装を説明します

00:19:24.631 --> 00:19:25.532 align:start position:43% line:-1
ウィレム

00:19:25.699 --> 00:19:34.308 align:start position:43% line:-1
(拍手)

00:19:34.575 --> 00:19:35.776 align:start position:36% line:-1
ありがとう　アリ

00:19:36.410 --> 00:19:42.483 align:start position:27% line:-2
Shortcutsの
最初のデモができて光栄です

00:19:42.649 --> 00:19:47.287 align:start position:27% line:-2
Xcodeに行く前に
まずSoup Chefの―

00:19:47.387 --> 00:19:51.291 align:start position:34% line:-2
Appを
お見せします

00:19:51.391 --> 00:19:52.693 align:start position:38% line:-1
画面に出します

00:19:59.266 --> 00:20:01.502 align:start position:25% line:-1
これがSoup Chefです

00:19:59.266 --> 00:20:01.502 align:start position:25% line:-1
これがSoup Chefです

00:20:01.602 --> 00:20:04.938 align:start position:36% line:-2
開くと注文履歴が
表示されます

00:20:05.038 --> 00:20:07.908 align:start position:30% line:-1
まだ 注文履歴は空です

00:20:08.008 --> 00:20:11.078 align:start position:34% line:-2
プラスボタンを押し
注文します

00:20:11.211 --> 00:20:15.282 align:start position:34% line:-2
スープのメニューが
出てきました

00:20:15.382 --> 00:20:17.117 align:start position:32% line:-1
トマトスープにします

00:20:18.352 --> 00:20:22.756 align:start position:29% line:-2
次に 数量とオプションを
選びます

00:20:22.856 --> 00:20:26.059 align:start position:30% line:-2
赤トウガラシ入り
トマトスープを１つ注文

00:20:26.326 --> 00:20:29.630 align:start position:36% line:-2
“注文実行”
ボタンを押します

00:20:30.330 --> 00:20:34.034 align:start position:32% line:-2
履歴には注文した品が
表示されました

00:20:34.768 --> 00:20:38.305 align:start position:30% line:-2
履歴から
注文の詳細も見られます

00:20:38.672 --> 00:20:41.175 align:start position:30% line:-2
これはユーザアクティビティに
リンクしています

00:20:41.642 --> 00:20:45.312 align:start position:38% line:-2
これをユーザに
提案しましょう

00:20:45.412 --> 00:20:49.449 align:start position:32% line:-2
過去に頼んだおいしい
スープを思い出せます

00:20:51.018 --> 00:20:53.554 align:start position:32% line:-1
ユーザに提案するには

00:20:53.687 --> 00:20:56.156 align:start position:32% line:-1
Xcodeを使います

00:20:58.192 --> 00:21:02.129 align:start position:23% line:-2
viewControllerで
注文の詳細を見ます

00:20:58.192 --> 00:21:02.129 align:start position:23% line:-2
viewControllerで
注文の詳細を見ます

00:21:02.729 --> 00:21:05.199 align:start position:27% line:-1
ユーザアクティビティを作り

00:21:05.332 --> 00:21:07.701 align:start position:12% line:-2
requiredUserInfoKeysを
設定します

00:21:07.868 --> 00:21:10.404 align:start position:14% line:-1
EligibleForSearchも設定

00:21:12.439 --> 00:21:17.077 align:start position:11% line:-2
EligibleForPredictionも
有効にします

00:21:22.082 --> 00:21:24.818 align:start position:32% line:-1
では試してみましょう

00:21:34.194 --> 00:21:38.198 align:start position:29% line:-2
まずアクティビティ情報を
報告するため

00:21:39.566 --> 00:21:40.901 align:start position:38% line:-1
画面に戻ります

00:21:41.568 --> 00:21:43.937 align:start position:30% line:-1
情報の報告を確認します

00:21:44.037 --> 00:21:47.007 align:start position:30% line:-2
デベロッパ向けの設定を
２つ追加しました

00:21:47.107 --> 00:21:51.545 align:start position:29% line:-2
検索中でも
情報の報告を確認できます

00:21:51.745 --> 00:21:56.483 align:start position:27% line:-2
追加には設定から
デベロッパセクションに行き

00:21:57.551 --> 00:21:59.720 align:start position:23% line:-2
“Display Recent
Shortcuts”と

00:21:59.820 --> 00:22:04.925 align:start position:12% line:-2
“Display Donations on
Lock Screen”をオンにします

00:21:59.820 --> 00:22:04.925 align:start position:12% line:-2
“Display Donations on
Lock Screen”をオンにします

00:22:06.126 --> 00:22:10.364 align:start position:30% line:-1
ホームに戻り検索します

00:22:10.464 --> 00:22:14.167 align:start position:36% line:-2
報告した情報が
表示されています

00:22:14.501 --> 00:22:18.672 align:start position:43% line:-1
(拍手)

00:22:18.872 --> 00:22:22.242 align:start position:30% line:-2
タップすると
Appが開き

00:22:22.342 --> 00:22:26.280 align:start position:34% line:-2
報告した注文情報が
再び表示されます

00:22:27.548 --> 00:22:31.218 align:start position:30% line:-2
しかし機能は
これだけではありません

00:22:31.318 --> 00:22:34.521 align:start position:32% line:-2
スープを注文するのが
目的なので

00:22:34.621 --> 00:22:37.891 align:start position:36% line:-2
ユーザにスープを
提案しましょう

00:22:37.991 --> 00:22:41.428 align:start position:34% line:-2
Appを
開かずに行うには

00:22:41.528 --> 00:22:44.131 align:start position:30% line:-1
Intentを使います

00:22:44.965 --> 00:22:48.769 align:start position:29% line:-2
ビルトインのIntentは
ありませんが

00:22:49.036 --> 00:22:54.007 align:start position:23% line:-2
iOS 12では
カスタムIntentが作れます

00:22:56.143 --> 00:22:59.446 align:start position:30% line:-2
まずIntentの
定義ファイルを作ります

00:22:59.546 --> 00:23:03.150 align:start position:32% line:-2
ファイルメニューから
新規ファイルを開き

00:22:59.546 --> 00:23:03.150 align:start position:32% line:-2
Fileメニューから
New > Fileを開き

00:23:04.084 --> 00:23:07.488 align:start position:4% line:-2
“SiriKit Intent Definition
File”を選びます

00:23:08.155 --> 00:23:09.289 align:start position:36% line:-1
“Next”をクリック

00:23:09.756 --> 00:23:12.159 align:start position:29% line:-2
名前は
Intentのままにして

00:23:12.259 --> 00:23:14.394 align:start position:20% line:-2
“Resources”のグループに
入れます

00:23:14.495 --> 00:23:16.430 align:start position:29% line:-1
“Create”を押して完了です

00:23:17.564 --> 00:23:21.568 align:start position:30% line:-2
Intentエディタが
表示されました

00:23:21.802 --> 00:23:26.340 align:start position:27% line:-2
正しいターゲットに
定義ファイルがあるか確認し

00:23:26.507 --> 00:23:30.978 align:start position:27% line:-2
利用する全てのターゲットに
Intentを入れます

00:23:31.078 --> 00:23:33.947 align:start position:32% line:-2
共有フレームワークに
追加するので

00:23:34.248 --> 00:23:38.619 align:start position:32% line:-2
ターゲットに対し
コードは生成しません

00:23:38.719 --> 00:23:44.024 align:start position:9% line:-2
“No Generated Classes”を
ターゲットの隣で選びます

00:23:44.925 --> 00:23:47.461 align:start position:25% line:-1
次にIntentを追加します

00:23:47.995 --> 00:23:53.200 align:start position:20% line:-2
左下のプラスボタンから
“New Intent”を選びます

00:23:53.967 --> 00:23:56.703 align:start position:23% line:-1
OrderSoupと名付けます

00:23:58.772 --> 00:24:02.843 align:start position:23% line:-1
カテゴリは“Order”と入力

00:23:58.772 --> 00:24:02.843 align:start position:23% line:-1
カテゴリは“Order”と入力

00:24:03.477 --> 00:24:06.346 align:start position:20% line:-2
タイトルには
“Order Soup”と書きます

00:24:06.447 --> 00:24:11.118 align:start position:23% line:-2
説明には“Soup Chefの
スープ注文”と記入

00:24:12.186 --> 00:24:16.623 align:start position:32% line:-2
金銭取引が生じるので
注文前に確認します

00:24:16.723 --> 00:24:20.460 align:start position:18% line:-2
“User confirmation
required”を選択します

00:24:21.562 --> 00:24:26.166 align:start position:30% line:-2
次に３つのパラメータを
定義します

00:24:26.266 --> 00:24:28.068 align:start position:38% line:-1
１つ目はスープ

00:24:28.168 --> 00:24:29.903 align:start position:39% line:-1
２つ目は数量

00:24:30.003 --> 00:24:31.939 align:start position:34% line:-1
３つ目はオプション

00:24:32.039 --> 00:24:33.740 align:start position:38% line:-1
まずスープです

00:24:33.841 --> 00:24:38.912 align:start position:27% line:-2
パラメータセクションの
名前に“soup”と入れて

00:24:39.112 --> 00:24:44.017 align:start position:27% line:-2
タイプを“Custom”と
選びます

00:24:45.619 --> 00:24:50.124 align:start position:21% line:-2
次に 再度プラスを押して
名前に“quantity”を追加

00:24:50.390 --> 00:24:52.793 align:start position:25% line:-1
“Integer”を選びます

00:24:54.261 --> 00:24:57.130 align:start position:27% line:-1
次は“options”です

00:24:57.564 --> 00:25:01.368 align:start position:21% line:-2
これもタイプを“Custom”と
選びます

00:24:57.564 --> 00:25:01.368 align:start position:21% line:-2
これもタイプを“Custom”と
選びます

00:25:01.802 --> 00:25:04.738 align:start position:34% line:-2
複数のオプションを
選べるので

00:25:04.838 --> 00:25:06.974 align:start position:23% line:-1
“Array”もチェックします

00:25:08.475 --> 00:25:11.879 align:start position:32% line:-2
最後にショートカット
タイプを定義します

00:25:12.613 --> 00:25:15.382 align:start position:30% line:-2
この時点で
全てのパラメータを含む

00:25:15.482 --> 00:25:17.918 align:start position:30% line:-2
単一のショートカットを
定義します

00:25:18.452 --> 00:25:21.422 align:start position:20% line:-2
“Shortcut Types”で
プラスボタンを押し

00:25:21.955 --> 00:25:24.925 align:start position:32% line:-2
入れたいパラメータを
選びます

00:25:25.025 --> 00:25:27.628 align:start position:18% line:-2
“soup”と“quantity”と
“options”です

00:25:27.728 --> 00:25:30.464 align:start position:36% line:-2
よければボタンを
クリックします

00:25:31.131 --> 00:25:33.400 align:start position:25% line:-1
タイトルに“Order”と入れ

00:25:33.500 --> 00:25:36.637 align:start position:21% line:-1
“quantity”を挿入します

00:25:36.937 --> 00:25:40.774 align:start position:11% line:-1
そして“soup with options”

00:25:41.375 --> 00:25:43.644 align:start position:32% line:-1
サブタイトルは空のままです

00:25:43.744 --> 00:25:46.947 align:start position:32% line:-2
必要な情報はタイトルに
入れましたからね

00:25:47.848 --> 00:25:50.651 align:start position:32% line:-2
バックグラウンドでIntentを
実行したいので

00:25:51.185 --> 00:25:53.954 align:start position:16% line:-2
“Support background
execution”はそのままです

00:25:56.290 --> 00:25:59.126 align:start position:32% line:-2
最初のIntentが
定義できました

00:25:59.226 --> 00:26:00.427 align:start position:36% line:-1
使ってみましょう

00:25:59.226 --> 00:26:00.427 align:start position:36% line:-1
使ってみましょう

00:26:00.794 --> 00:26:05.332 align:start position:29% line:-2
注文オブジェクトに２つの
ヘルパーメソッドを追加し

00:26:05.432 --> 00:26:08.168 align:start position:30% line:-2
Intentとの変換を
容易にします

00:26:09.403 --> 00:26:11.638 align:start position:34% line:-1
注文のクラスに行き

00:26:11.738 --> 00:26:17.211 align:start position:21% line:-2
下に注文のExtensionを
追加します

00:26:18.078 --> 00:26:21.548 align:start position:29% line:-2
Intentを戻す変数が
含まれています

00:26:22.082 --> 00:26:23.717 align:start position:23% line:-1
そこにIntentを作成します

00:26:23.817 --> 00:26:28.322 align:start position:23% line:-2
スープと数量 オプションを
セットしIntentを返します

00:26:28.922 --> 00:26:32.426 align:start position:16% line:-2
ExtensionはIntentを示す
新しいイニシャライザも定義します

00:26:32.526 --> 00:26:36.497 align:start position:34% line:-2
スープと数量
オプションを抽出し

00:26:36.597 --> 00:26:40.434 align:start position:34% line:-2
これらの値で注文を
初期化します

00:26:41.168 --> 00:26:42.903 align:start position:32% line:-1
すごく役立ちそうです

00:26:43.837 --> 00:26:48.609 align:start position:23% line:-2
次に 注文の度にIntentを
報告するようにします

00:26:48.709 --> 00:26:51.311 align:start position:29% line:-2
スープ注文の
データマネージャーを開き

00:26:52.579 --> 00:26:55.682 align:start position:20% line:-2
“placeOrder”メソッドで
報告ロジックを追加します

00:26:57.417 --> 00:27:02.022 align:start position:20% line:-2
注文Intentを含む
INInteractionを作成し

00:26:57.417 --> 00:27:02.022 align:start position:20% line:-2
注文Intentを含む
INInteractionを作成し

00:27:02.122 --> 00:27:04.958 align:start position:36% line:-2
インタラクションを
報告するだけです

00:27:07.294 --> 00:27:09.263 align:start position:21% line:-2
最後にIntentを処理する
必要があります

00:27:09.363 --> 00:27:12.099 align:start position:30% line:-2
まずAppに
サポートを追加します

00:27:12.466 --> 00:27:14.768 align:start position:25% line:-1
AppDelegateに行き

00:27:14.868 --> 00:27:18.038 align:start position:9% line:-2
“continueUserActivity”で
サポートを追加します

00:27:20.707 --> 00:27:22.409 align:start position:16% line:-1
“userActivity”のタイプが

00:27:22.509 --> 00:27:27.147 align:start position:32% line:-2
実行したいクラス名と
同じか確認します

00:27:27.381 --> 00:27:31.318 align:start position:18% line:-2
同じ場合はIntentを
userActivityから取り出し

00:27:31.418 --> 00:27:33.253 align:start position:36% line:-1
注文を生成します

00:27:33.353 --> 00:27:35.522 align:start position:36% line:-2
最後に注文画面を
表示します

00:27:36.156 --> 00:27:37.891 align:start position:29% line:-1
Appを起動していますが

00:27:37.991 --> 00:27:40.494 align:start position:38% line:-2
恐らくユーザは
すぐに注文せず

00:27:40.594 --> 00:27:43.497 align:start position:27% line:-2
先に
カスタマイズしたいはずです

00:27:43.597 --> 00:27:46.400 align:start position:36% line:-2
それで注文画面を
表示しました

00:27:47.701 --> 00:27:48.869 align:start position:43% line:-1
最後です

00:27:48.969 --> 00:27:52.206 align:start position:32% line:-2
Intentをバックグラウンドで
実行できるよう

00:27:52.306 --> 00:27:55.075 align:start position:18% line:-2
Intents Extensionで
サポートを追加します

00:27:55.609 --> 00:27:58.145 align:start position:14% line:-2
まずIntents Extensionを
追加するため

00:27:58.245 --> 00:28:01.415 align:start position:27% line:-2
File > New > Target
と進みます

00:27:58.245 --> 00:28:01.415 align:start position:27% line:-2
File > New > Target
と進みます

00:28:02.349 --> 00:28:04.885 align:start position:5% line:-1
“Intetent Extension”を選びます

00:28:05.619 --> 00:28:09.189 align:start position:18% line:-2
“SoupChefIntents”と
名付け

00:28:09.289 --> 00:28:10.557 align:start position:32% line:-1
Finishをクリックします

00:28:12.793 --> 00:28:17.064 align:start position:29% line:-2
Intentを使う新たな
ターゲットを追加したので

00:28:17.164 --> 00:28:20.601 align:start position:27% line:-2
Intent定義ファイルが
含まれるようにします

00:28:20.701 --> 00:28:23.103 align:start position:34% line:-1
定義ファイルに戻り

00:28:23.203 --> 00:28:25.505 align:start position:30% line:-1
ターゲットに追加します

00:28:25.672 --> 00:28:28.842 align:start position:27% line:-1
コードを生成したくないので

00:28:28.942 --> 00:28:31.044 align:start position:9% line:-2
“No Generated Classes”を
選択します

00:28:34.781 --> 00:28:39.219 align:start position:27% line:-2
Extensionが同じ
データにアクセスできるよう

00:28:39.319 --> 00:28:41.155 align:start position:32% line:-2
同じAppグループに
追加します

00:28:41.622 --> 00:28:46.793 align:start position:25% line:-2
プロジェクト設定で
Intentターゲットを選び

00:28:47.027 --> 00:28:50.364 align:start position:23% line:-2
“Capabilities”で
同じグループに追加します"

00:28:52.499 --> 00:28:55.235 align:start position:34% line:-2
これでターゲットに
作成された―

00:28:55.335 --> 00:28:57.371 align:start position:30% line:-2
Intentハンドラを
実装できます

00:28:59.973 --> 00:29:02.476 align:start position:27% line:-2
最初に共有フレームワークを
インポートします

00:28:59.973 --> 00:29:02.476 align:start position:27% line:-2
最初に共有フレームワークを
インポートします

00:29:04.311 --> 00:29:05.946 align:start position:30% line:-1
“SoupKit”です

00:29:07.047 --> 00:29:09.416 align:start position:21% line:-2
OrderSoupIntentを
実行するため

00:29:09.516 --> 00:29:13.987 align:start position:25% line:-2
Intentハンドラは その
プロトコルに準拠させます

00:29:15.656 --> 00:29:19.726 align:start position:23% line:-2
これはIntentの一部として
生成されました

00:29:21.462 --> 00:29:25.065 align:start position:27% line:-2
このプロトコルには
ハンドルメソッドがあります

00:29:25.532 --> 00:29:27.534 align:start position:38% line:-1
実装しましょう

00:29:30.170 --> 00:29:32.306 align:start position:29% line:-2
ハンドルメソッドで
Intentを取得します

00:29:32.639 --> 00:29:34.741 align:start position:21% line:-1
Intentから注文を作成します

00:29:34.842 --> 00:29:37.444 align:start position:36% line:-1
注文が成功すれば

00:29:37.544 --> 00:29:41.215 align:start position:29% line:-2
成功コードを伴う
Intentの応答で完了

00:29:41.615 --> 00:29:44.384 align:start position:32% line:-1
もし作成できなければ

00:29:44.618 --> 00:29:47.654 align:start position:29% line:-1
失敗コードと共に完了です

00:29:48.522 --> 00:29:49.356 align:start position:43% line:-1
以上です

00:29:49.456 --> 00:29:52.626 align:start position:30% line:-2
新しいIntentの
サポートを追加したので

00:29:52.893 --> 00:29:54.094 align:start position:39% line:-1
試しましょう

00:30:04.972 --> 00:30:08.342 align:start position:23% line:-2
最初にIntentの報告のため
注文します

00:30:08.442 --> 00:30:12.679 align:start position:29% line:-2
プラスボタンを押して
今回はクラムチャウダーに

00:30:13.180 --> 00:30:17.284 align:start position:27% line:-1
クルトンを入れて注文します

00:30:17.985 --> 00:30:19.586 align:start position:38% line:-1
ホーム画面に―

00:30:19.686 --> 00:30:22.389 align:start position:21% line:-1
報告したIntentがありました

00:30:22.489 --> 00:30:23.423 align:start position:41% line:-1
すばらしい

00:30:23.524 --> 00:30:28.495 align:start position:43% line:-1
(拍手)

00:30:28.595 --> 00:30:29.463 align:start position:43% line:-1
タップで

00:30:29.563 --> 00:30:33.066 align:start position:32% line:-2
ショートカット画面と
注文ボタンを表示

00:30:33.167 --> 00:30:36.637 align:start position:34% line:-2
タップすると
バックグラウンド実行され

00:30:37.438 --> 00:30:38.505 align:start position:43% line:-1
注文完了

00:30:38.839 --> 00:30:42.042 align:start position:34% line:-2
Appで
確認すると

00:30:42.142 --> 00:30:43.811 align:start position:32% line:-1
新しい注文があります

00:30:44.011 --> 00:30:45.445 align:start position:38% line:-1
とても簡単です

00:30:46.113 --> 00:30:53.687 align:start position:43% line:-1
(拍手)

00:30:54.121 --> 00:30:56.490 align:start position:32% line:-1
注文ボタンの代わりに

00:30:56.590 --> 00:30:58.492 align:start position:25% line:-1
ショートカットビューも使えます

00:30:58.592 --> 00:31:01.295 align:start position:30% line:-2
Appを
ショートカットから起動し

00:30:58.592 --> 00:31:01.295 align:start position:30% line:-2
Appを
ショートカットから起動し

00:31:01.395 --> 00:31:03.697 align:start position:34% line:-1
注文画面を開きます

00:31:03.797 --> 00:31:08.135 align:start position:30% line:-2
カスタマイズできるので
チーズを追加

00:31:08.235 --> 00:31:09.937 align:start position:41% line:-1
注文します

00:31:10.971 --> 00:31:11.705 align:start position:41% line:-1
できました

00:31:11.805 --> 00:31:15.809 align:start position:29% line:-2
最後に
Siriに追加しましょう

00:31:17.244 --> 00:31:21.682 align:start position:20% line:-2
設定画面の
“Siri & Search”です

00:31:22.149 --> 00:31:25.185 align:start position:27% line:-2
追加したい
ショートカットを選択します

00:31:25.285 --> 00:31:29.056 align:start position:32% line:-2
注文はクルトン入り
クラムチャウダー１つ

00:31:30.090 --> 00:31:34.128 align:start position:32% line:-2
関連付ける
フレーズを録音します

00:31:35.462 --> 00:31:36.630 align:start position:36% line:-1
“スープの時間”

00:31:38.332 --> 00:31:39.433 align:start position:38% line:-1
登録されました

00:31:39.533 --> 00:31:45.606 align:start position:43% line:-1
(拍手)

00:31:48.575 --> 00:31:51.745 align:start position:36% line:-2
ここまでを
振り返りましょう

00:31:51.845 --> 00:31:54.014 align:start position:23% line:-1
NSUserActivityを

00:31:54.114 --> 00:31:57.518 align:start position:30% line:-2
予測に使えるように
することから始めました

00:31:57.785 --> 00:31:59.186 align:start position:38% line:-1
提案を可能にし

00:31:59.286 --> 00:32:02.523 align:start position:34% line:-2
コンテンツの開示を
容易にします

00:31:59.286 --> 00:32:02.523 align:start position:34% line:-2
コンテンツの開示を
容易にします

00:32:04.224 --> 00:32:06.827 align:start position:27% line:-2
次にカスタムIntentを
定義しました

00:32:06.927 --> 00:32:11.665 align:start position:27% line:-2
Appの主機能を
表現する最良の方法です

00:32:11.765 --> 00:32:13.967 align:start position:29% line:-1
事例はスープの注文でした

00:32:14.535 --> 00:32:17.538 align:start position:32% line:-1
ユーザが注文する度に

00:32:17.638 --> 00:32:20.707 align:start position:29% line:-1
Intentを報告します

00:32:21.675 --> 00:32:23.811 align:start position:21% line:-1
最後はIntentのハンドルです

00:32:23.911 --> 00:32:26.747 align:start position:27% line:-2
ExtensionとApp
両方をサポートしたので

00:32:26.847 --> 00:32:31.084 align:start position:29% line:-2
Appの起動が
ショートカットでできます

00:32:34.054 --> 00:32:37.090 align:start position:27% line:-2
Shortcutsの適用は
分かりましたね

00:32:37.291 --> 00:32:40.427 align:start position:36% line:-2
ここからは提案が
どうなされるのか

00:32:40.527 --> 00:32:44.898 align:start position:30% line:-2
提案を最良のものにする
方法を紹介します

00:32:47.067 --> 00:32:51.538 align:start position:27% line:-2
Appは毎回
アクティビティを報告します

00:32:52.306 --> 00:32:57.077 align:start position:29% line:-2
システムは 時間 場所
その他のシグナルを認識します

00:32:58.445 --> 00:33:01.548 align:start position:30% line:-1
時間と言えば１日の時間や

00:32:58.445 --> 00:33:01.548 align:start position:30% line:-1
時間と言えば１日の時間や

00:33:01.648 --> 00:33:03.050 align:start position:36% line:-1
１週間の曜日です

00:33:03.150 --> 00:33:06.520 align:start position:34% line:-2
場所であれば
全ての場所の中から

00:33:06.620 --> 00:33:09.389 align:start position:32% line:-2
ユーザにとって重要な
場所か確認します

00:33:11.258 --> 00:33:14.895 align:start position:27% line:-2
提案のために
どう活用しているのでしょう

00:33:16.497 --> 00:33:18.265 align:start position:29% line:-1
ここでは時間だけを考えます

00:33:19.133 --> 00:33:22.870 align:start position:27% line:-2
月曜のランチはクルトン入り
トマトスープ

00:33:23.737 --> 00:33:27.775 align:start position:30% line:-2
その夜は気分を変え
赤トウガラシ入りを注文

00:33:29.276 --> 00:33:33.113 align:start position:34% line:-2
翌日のランチはまた
クルトン入りです

00:33:33.213 --> 00:33:35.282 align:start position:34% line:-1
これを繰り返します

00:33:35.649 --> 00:33:37.084 align:start position:32% line:-1
すると金曜のランチに

00:33:37.184 --> 00:33:39.720 align:start position:29% line:-1
Siriは提案を試みます

00:33:40.387 --> 00:33:43.724 align:start position:34% line:-2
過去の行動から
パターンを探ります

00:33:43.824 --> 00:33:47.528 align:start position:29% line:-2
ランチにはいつも
クルトン入りなのに気付き

00:33:47.628 --> 00:33:51.298 align:start position:29% line:-1
クルトン入りを提案します

00:33:51.398 --> 00:33:53.467 align:start position:32% line:-1
私が望んだとおりです

00:33:54.468 --> 00:33:59.039 align:start position:30% line:-2
かなり高いレベルですが
どう機能するのでしょう

00:33:59.139 --> 00:34:01.141 align:start position:16% line:-1
最初はNSUserActivityです

00:33:59.139 --> 00:34:01.141 align:start position:16% line:-1
最初はNSUserActivityです

00:34:02.943 --> 00:34:06.613 align:start position:27% line:-2
注文画面でのアクティビティ
を想像してください

00:34:06.847 --> 00:34:09.483 align:start position:30% line:-2
userInfo辞書に
３つのキーがあります

00:34:09.583 --> 00:34:12.219 align:start position:34% line:-2
スープと数量
スクロール位置です

00:34:12.386 --> 00:34:14.922 align:start position:23% line:-1
Handoffを使ってユーザを

00:34:15.022 --> 00:34:17.424 align:start position:29% line:-2
最後に使った正確な位置に
戻せます

00:34:19.059 --> 00:34:22.562 align:start position:27% line:-1
どう提案されるか見ましょう

00:34:24.431 --> 00:34:26.800 align:start position:32% line:-2
まずアクティビティを
報告します

00:34:26.900 --> 00:34:29.436 align:start position:38% line:-2
スープはトマト
数量は１です

00:34:29.536 --> 00:34:31.605 align:start position:25% line:-1
スクロール位置は79ポイント

00:34:31.938 --> 00:34:34.808 align:start position:32% line:-2
次に似たような行動を
報告します

00:34:34.908 --> 00:34:37.377 align:start position:30% line:-2
今回はスクロール位置を
110にします

00:34:38.078 --> 00:34:39.379 align:start position:41% line:-1
続けると―

00:34:39.813 --> 00:34:42.882 align:start position:32% line:-2
ある時点でSiriが
提案しようとします

00:34:44.418 --> 00:34:46.018 align:start position:38% line:-1
過去の行動から

00:34:46.119 --> 00:34:49.089 align:start position:34% line:-2
同じ行動パターンを
見つけます

00:34:49.188 --> 00:34:52.693 align:start position:32% line:-2
でもスクロール位置に
ムラがあるので

00:34:52.826 --> 00:34:55.161 align:start position:30% line:-1
提案を見つけられません

00:34:56.396 --> 00:34:58.565 align:start position:34% line:-1
ではどう解決するか

00:34:59.900 --> 00:35:02.870 align:start position:12% line:-2
requiredUserInfoKeysを
使います

00:34:59.900 --> 00:35:02.870 align:start position:12% line:-2
requiredUserInfoKeysを
使います

00:35:03.804 --> 00:35:07.741 align:start position:30% line:-2
これはアクティビティの
既存プロパティです

00:35:07.841 --> 00:35:11.178 align:start position:27% line:-2
アクティビティが表す状態に
Appを―

00:35:11.278 --> 00:35:14.781 align:start position:32% line:-2
復元する必要最低限の
情報を示します

00:35:15.983 --> 00:35:19.086 align:start position:34% line:-2
パターンを探す際に
比較するのに使う―

00:35:19.186 --> 00:35:23.924 align:start position:25% line:-2
userInfo辞書のキーを
特定するのに使います

00:35:24.792 --> 00:35:26.727 align:start position:34% line:-1
先ほどの例で見ます

00:35:27.895 --> 00:35:32.566 align:start position:12% line:-2
requiredUserInfoKeysを
スープと量に特定します

00:35:32.699 --> 00:35:34.902 align:start position:32% line:-2
再度アクティビティを
報告します

00:35:35.002 --> 00:35:37.938 align:start position:29% line:-1
スープはトマトで数量は１

00:35:38.038 --> 00:35:39.707 align:start position:25% line:-1
スクロール位置は79ポイント

00:35:39.807 --> 00:35:42.109 align:start position:30% line:-2
しかしスクロール位置は
無視されます

00:35:42.976 --> 00:35:44.511 align:start position:34% line:-1
似た報告を行います

00:35:44.611 --> 00:35:47.047 align:start position:32% line:-2
またスクロール位置は
無視されます

00:35:47.147 --> 00:35:48.415 align:start position:38% line:-1
これを続けると

00:35:48.649 --> 00:35:52.019 align:start position:23% line:-1
ある時点でSiriが提案します

00:35:52.986 --> 00:35:56.023 align:start position:29% line:-2
アクティビティの一致する
パターンを探します

00:35:56.123 --> 00:35:59.126 align:start position:36% line:-2
スクロール位置は
考慮されないので

00:35:59.226 --> 00:36:00.427 align:start position:34% line:-1
次のように言えます

00:35:59.226 --> 00:36:00.427 align:start position:34% line:-1
次のように言えます

00:36:00.527 --> 00:36:04.898 align:start position:21% line:-2
“トマトスープ１つの
NSUserActivityは”

00:36:04.998 --> 00:36:07.568 align:start position:27% line:-1
“ユーザに良い提案である”

00:36:08.735 --> 00:36:09.870 align:start position:39% line:-1
今見たように

00:36:09.970 --> 00:36:13.507 align:start position:34% line:-2
正しいキーの特定が
非常に重要です

00:36:13.607 --> 00:36:16.677 align:start position:30% line:-2
でないとユーザは提案を
得られません

00:36:17.511 --> 00:36:19.913 align:start position:12% line:-2
requiredUserInfoKeysの
機能を見ました

00:36:20.714 --> 00:36:24.751 align:start position:29% line:-2
Intentも同じですが
より柔軟性が高いです

00:36:27.221 --> 00:36:30.791 align:start position:21% line:-2
Intentへのメインシグナルは
定義したショートカットタイプです

00:36:31.759 --> 00:36:36.663 align:start position:29% line:-2
提案に有効なパラメータの
組み合わせを定義します

00:36:38.332 --> 00:36:40.267 align:start position:12% line:-2
requiredUserInfoKeysに
似ていますが

00:36:40.367 --> 00:36:43.370 align:start position:34% line:-2
違いは複数の
定義ができる点です

00:36:44.838 --> 00:36:47.107 align:start position:23% line:-1
Soup Chefに適用します

00:36:48.342 --> 00:36:51.712 align:start position:14% line:-2
OrderSoupIntentの定義では
パラメータは３つ

00:36:51.812 --> 00:36:54.047 align:start position:25% line:-1
スープ 数量 オプションです

00:36:54.147 --> 00:36:57.951 align:start position:30% line:-2
ショートカットタイプは
単一でしたが

00:36:58.652 --> 00:37:00.988 align:start position:29% line:-1
理想的にはもっと必要です

00:36:58.652 --> 00:37:00.988 align:start position:29% line:-1
理想的にはもっと必要です

00:37:01.088 --> 00:37:05.259 align:start position:29% line:-2
ユーザの行動パターンを
探すのに選択肢が増えます

00:37:05.526 --> 00:37:07.361 align:start position:34% line:-2
今回は３つの
タイプを定義します

00:37:08.062 --> 00:37:12.299 align:start position:30% line:-2
１つはスープと数量で
次はスープとオプション

00:37:12.399 --> 00:37:15.068 align:start position:30% line:-2
最後は３つのパラメータ
全てです

00:37:16.370 --> 00:37:18.238 align:start position:30% line:-1
別の例に適用しましょう

00:37:19.339 --> 00:37:24.311 align:start position:27% line:-2
月曜のランチにクルトン入り
トマトスープを注文

00:37:24.812 --> 00:37:27.881 align:start position:27% line:-2
Soup Chefがこれを
システムに報告します

00:37:27.981 --> 00:37:30.851 align:start position:27% line:-2
そしてショートカットタイプ
に基づき

00:37:30.951 --> 00:37:33.420 align:start position:27% line:-1
可能な組み合わせに分けます

00:37:35.289 --> 00:37:38.425 align:start position:29% line:-2
その夜は赤トウガラシ入り
を注文

00:37:38.525 --> 00:37:40.160 align:start position:29% line:-1
これも同じように報告され

00:37:40.360 --> 00:37:43.197 align:start position:34% line:-2
可能な組み合わせに
分けられます

00:37:44.131 --> 00:37:46.667 align:start position:34% line:-2
翌日のランチには
クルトン入りを注文

00:37:46.767 --> 00:37:48.769 align:start position:34% line:-1
同様に分けられます

00:37:49.570 --> 00:37:51.338 align:start position:38% line:-1
１週間続けると

00:37:51.438 --> 00:37:54.308 align:start position:32% line:-2
金曜のランチに
Siriが提案します

00:37:55.008 --> 00:37:58.212 align:start position:32% line:-2
トマトスープの注文が
多いと―

00:37:59.713 --> 00:38:01.849 align:start position:36% line:-1
認識するでしょう

00:37:59.713 --> 00:38:01.849 align:start position:36% line:-1
認識するでしょう

00:38:02.816 --> 00:38:05.853 align:start position:32% line:-1
またランチにはいつも

00:38:05.953 --> 00:38:09.089 align:start position:36% line:-2
クルトン入りだと
分かるでしょう

00:38:10.124 --> 00:38:14.294 align:start position:29% line:-2
より詳細なショートカット
なので提案が容易です

00:38:14.695 --> 00:38:19.099 align:start position:27% line:-2
たぶんクルトン入りの注文を
提案するでしょう

00:38:20.067 --> 00:38:22.836 align:start position:27% line:-1
このように提案されるのです

00:38:23.170 --> 00:38:28.342 align:start position:30% line:-2
ここからは良い提案を
させる方法を説明します

00:38:28.442 --> 00:38:31.278 align:start position:30% line:-1
全ては良い報告からです

00:38:33.347 --> 00:38:37.384 align:start position:30% line:-2
良い報告は繰り返される
可能性が高いのです

00:38:37.484 --> 00:38:41.755 align:start position:36% line:-2
ユーザがよく見る
コンテンツや

00:38:41.855 --> 00:38:45.592 align:start position:32% line:-2
Intentでは
定期的に取る行動です

00:38:47.895 --> 00:38:52.699 align:start position:29% line:-2
また報告するペイロードが
一貫してないと

00:38:52.800 --> 00:38:56.003 align:start position:30% line:-2
パターンを見つける際に
比較ができません

00:38:57.871 --> 00:39:01.441 align:start position:27% line:-2
良い報告はタイムスタンプを
含みません

00:38:57.871 --> 00:39:01.441 align:start position:27% line:-2
良い報告はタイムスタンプを
含みません

00:39:01.542 --> 00:39:05.746 align:start position:30% line:-2
提案時点の時間は
関係なさそうだからです

00:39:06.847 --> 00:39:07.915 align:start position:45% line:-1
例えば

00:39:08.015 --> 00:39:12.119 align:start position:27% line:-2
特定の日の予定を教える
ショートカットは無意味です

00:39:12.219 --> 00:39:14.621 align:start position:34% line:-1
翌日にそれを見ても

00:39:14.721 --> 00:39:18.425 align:start position:36% line:-2
終わった会議には
関心がわきません

00:39:19.093 --> 00:39:23.063 align:start position:34% line:-2
しかし相対的時間は
より役立ちます

00:39:25.999 --> 00:39:30.537 align:start position:30% line:-2
ユーザの行動１つにつき
１つの報告をすべきです

00:39:30.637 --> 00:39:34.208 align:start position:29% line:-2
App内での
多様な行動に対してもです

00:39:35.742 --> 00:39:39.479 align:start position:21% line:-2
Intentの正しいパラメータの
選択も重要です

00:39:39.580 --> 00:39:43.217 align:start position:32% line:-2
２つのタイプを見ます
最初はenumです

00:39:44.785 --> 00:39:48.455 align:start position:27% line:-2
Intent定義ファイルに
enumを定義し

00:39:48.555 --> 00:39:51.091 align:start position:29% line:-2
パラメータのタイプとして
使います

00:39:53.560 --> 00:39:56.263 align:start position:36% line:-2
パラメータの値が
制限される場合―

00:39:56.363 --> 00:39:58.098 align:start position:32% line:-1
enumがお薦めです

00:39:58.265 --> 00:40:02.002 align:start position:27% line:-2
スープ注文のIntentで
サイズを追加する場合

00:39:58.265 --> 00:40:02.002 align:start position:27% line:-2
スープ注文のIntentで
サイズを追加する場合

00:40:02.102 --> 00:40:04.104 align:start position:32% line:-1
enumが合理的です

00:40:04.204 --> 00:40:08.308 align:start position:32% line:-2
可能なサイズはＳＭＬ
ぐらいですから

00:40:09.843 --> 00:40:12.279 align:start position:36% line:-2
enumを使うと
より良い提案や

00:40:12.379 --> 00:40:15.148 align:start position:32% line:-2
明解な見出し
補足文につながります

00:40:15.582 --> 00:40:19.386 align:start position:29% line:-2
enumでの見出しなどの
生成法は

00:40:19.486 --> 00:40:22.122 align:start position:27% line:-2
Localizationの
セッションで学べます

00:40:23.824 --> 00:40:26.126 align:start position:34% line:-2
もう１つは
カスタムタイプです

00:40:26.994 --> 00:40:31.498 align:start position:21% line:-2
INObjectと生成された
Intentコードをもたらします

00:40:32.166 --> 00:40:35.836 align:start position:27% line:-2
INObjectは識別子と
表示文字列を結合します

00:40:37.271 --> 00:40:40.808 align:start position:27% line:-2
この識別子でオブジェクトを
参照できますが

00:40:41.341 --> 00:40:45.412 align:start position:29% line:-2
表示文字列には判読可能な
部分が含まれます

00:40:45.979 --> 00:40:47.814 align:start position:27% line:-1
ユーザもAppも

00:40:47.915 --> 00:40:51.218 align:start position:36% line:-2
パラメータの値を
常に把握できます

00:40:52.586 --> 00:40:54.221 align:start position:29% line:-1
INObjectの使用で

00:40:54.321 --> 00:40:57.591 align:start position:38% line:-2
パラメータ間の
依存も防げます

00:40:57.824 --> 00:40:58.992 align:start position:41% line:-1
説明します

00:41:00.127 --> 00:41:03.297 align:start position:32% line:-2
識別子と表示文字列の
組み合わせを表す―

00:41:03.397 --> 00:41:05.365 align:start position:32% line:-1
２つの方法があります

00:41:05.666 --> 00:41:08.469 align:start position:27% line:-2
２つのパラメータを
Intentに追加できます

00:41:08.569 --> 00:41:11.338 align:start position:32% line:-2
識別子と表示文字列に
1つずつです

00:41:11.438 --> 00:41:14.708 align:start position:23% line:-2
INObjectを使えば単一の
パラメータを追加できます

00:41:15.809 --> 00:41:18.278 align:start position:27% line:-1
最初の方法では表示文字列が

00:41:18.378 --> 00:41:23.083 align:start position:29% line:-2
識別子により参照される
オブジェクトに依存します

00:41:23.684 --> 00:41:27.121 align:start position:29% line:-2
Intentの提案の際に
問題が起きないよう

00:41:27.221 --> 00:41:28.989 align:start position:32% line:-1
依存関係をなくします

00:41:32.292 --> 00:41:34.094 align:start position:29% line:-1
優れたショートカットには

00:41:34.194 --> 00:41:37.764 align:start position:32% line:-2
分かりやすい見出しや
画像があります

00:41:37.965 --> 00:41:41.034 align:start position:36% line:-2
体験する前に見る
唯一のものなので

00:41:41.135 --> 00:41:44.838 align:start position:27% line:-2
タップしたとき何が起こるか
表すべきです

00:41:45.472 --> 00:41:47.641 align:start position:27% line:-1
もちろん期待どおりに動くか

00:41:47.741 --> 00:41:50.510 align:start position:27% line:-1
テストした方がいいでしょう

00:41:50.978 --> 00:41:52.679 align:start position:38% line:-1
テスト方法です

00:41:53.814 --> 00:41:56.650 align:start position:29% line:-2
追加した２つの
デベロッパ向けの設定では

00:41:56.750 --> 00:42:00.120 align:start position:34% line:-2
検索とロック画面で
報告を確認できます

00:41:56.750 --> 00:42:00.120 align:start position:34% line:-2
検索とロック画面で
報告を確認できます

00:42:00.220 --> 00:42:02.456 align:start position:20% line:-2
Siri Suggestionsの
代わりです

00:42:03.257 --> 00:42:07.861 align:start position:34% line:-2
これで提案した時の
表示内容が分かり

00:42:07.961 --> 00:42:11.531 align:start position:34% line:-2
期待どおりの動作を
確実にできます

00:42:13.367 --> 00:42:16.703 align:start position:27% line:-2
もう１つの方法はSiriに
ショートカットを追加します

00:42:17.104 --> 00:42:20.073 align:start position:25% line:-1
Xcodeスキームを編集して

00:42:20.174 --> 00:42:24.177 align:start position:27% line:-2
自動的にSiriを呼び出す
簡単なテスト法です

00:42:25.712 --> 00:42:30.317 align:start position:18% line:-2
スキームエディタ内の
Siri Intent Queryで

00:42:30.417 --> 00:42:33.287 align:start position:29% line:-2
Siriを呼び出す言葉を
作成します

00:42:35.088 --> 00:42:37.124 align:start position:27% line:-2
これでShortcutsの
Appに

00:42:37.224 --> 00:42:39.960 align:start position:29% line:-2
カスタムショートカットが
作成できます

00:42:41.228 --> 00:42:43.831 align:start position:32% line:-1
他のショートカットや

00:42:43.931 --> 00:42:47.701 align:start position:30% line:-2
ステップと連鎖した時の
動作確認ができます

00:42:51.205 --> 00:42:54.808 align:start position:30% line:-2
優れたショートカットの
報告とは何か

00:42:54.908 --> 00:42:58.312 align:start position:30% line:-2
ユーザへの提案の仕方を
見てきました

00:42:58.412 --> 00:43:01.048 align:start position:27% line:-1
次にプライバシーの考察です

00:42:58.412 --> 00:43:01.048 align:start position:27% line:-1
次にプライバシーの考察です

00:43:01.148 --> 00:43:05.219 align:start position:29% line:-2
ユーザを
動揺させない提案をします

00:43:07.888 --> 00:43:12.826 align:start position:29% line:-2
削除したものは永遠に
消えるとユーザは考えます

00:43:13.694 --> 00:43:17.297 align:start position:34% line:-2
これは信頼のために
尊重すべきです

00:43:17.397 --> 00:43:22.336 align:start position:30% line:-2
ユーザと無関係になった
提案はしないことです

00:43:22.903 --> 00:43:27.508 align:start position:29% line:-2
ユーザが削除できる情報が
含まれている場合

00:43:27.608 --> 00:43:31.111 align:start position:34% line:-2
適切な時期に確実に
報告を削除します

00:43:32.079 --> 00:43:35.916 align:start position:16% line:-2
NSUserActivityでの報告の
削除方法です

00:43:39.887 --> 00:43:43.090 align:start position:29% line:-1
削除の方法は２つあります

00:43:43.657 --> 00:43:45.626 align:start position:21% line:-2
Spotlightインデックスを
使用し

00:43:45.726 --> 00:43:47.928 align:start position:9% line:-2
relatedUniqueIdentifier
を設定します

00:43:48.028 --> 00:43:50.430 align:start position:20% line:-2
Spotlightからコンテンツを
削除するだけで

00:43:50.531 --> 00:43:52.766 align:start position:29% line:-2
自動的にアクティビティが
削除されます

00:43:53.867 --> 00:43:57.271 align:start position:7% line:-2
contentAttributeSet上の
relatedUniqueIdentifierを

00:43:57.371 --> 00:44:00.774 align:start position:30% line:-2
合致する検索可能項目の
識別子に入れます

00:43:57.371 --> 00:44:00.774 align:start position:30% line:-2
合致する検索可能項目の
識別子に入れます

00:44:01.275 --> 00:44:04.111 align:start position:27% line:-1
検索可能項目が削除されれば

00:44:04.211 --> 00:44:06.914 align:start position:36% line:-2
アクティビティも
削除されます

00:44:08.815 --> 00:44:11.485 align:start position:20% line:-2
Spotlightのインデックスを
使わない場合

00:44:11.585 --> 00:44:15.589 align:start position:21% line:-2
NSUserActivity上の
永久識別子を使います

00:44:16.290 --> 00:44:18.292 align:start position:27% line:-1
これは新しいプロパティです

00:44:18.392 --> 00:44:20.427 align:start position:29% line:-1
アクティビティを追跡でき

00:44:20.527 --> 00:44:23.163 align:start position:30% line:-1
適切な時に削除できます

00:44:26.100 --> 00:44:31.104 align:start position:27% line:-2
使う場合はアクティビティの
報告前に入れます

00:44:31.438 --> 00:44:32.806 align:start position:34% line:-1
削除したい識別子で

00:44:32.906 --> 00:44:37.511 align:start position:5% line:-2
deleteSavedUserActivities
を呼びます

00:44:37.778 --> 00:44:40.714 align:start position:30% line:-2
全てのアクティビティの
削除もできます

00:44:41.381 --> 00:44:43.550 align:start position:34% line:-2
例えばユーザが
ログアウトした時は

00:44:43.650 --> 00:44:46.720 align:start position:0% line:-2
“deleteAllSavedUserActivities”
を呼び出します

00:44:48.455 --> 00:44:50.023 align:start position:25% line:-1
Intentの既存のAPIは

00:44:50.124 --> 00:44:53.060 align:start position:25% line:-2
新しいアクティビティAPIに
似ています

00:44:54.995 --> 00:44:57.498 align:start position:20% line:-1
INInteractionを介して

00:44:57.598 --> 00:45:00.901 align:start position:29% line:-2
主要なIntent報告も
発生します

00:44:57.598 --> 00:45:00.901 align:start position:29% line:-2
主要なIntent報告も
発生します

00:45:02.503 --> 00:45:06.640 align:start position:16% line:-2
INInteractionには識別子と
グループ識別子があり

00:45:06.740 --> 00:45:10.277 align:start position:29% line:-2
報告された相互作用を複数
削除できます

00:45:12.312 --> 00:45:16.884 align:start position:34% line:-2
報告の前に識別子を
設定しておきます

00:45:17.484 --> 00:45:19.186 align:start position:38% line:-1
削除したい時は

00:45:19.286 --> 00:45:23.323 align:start position:23% line:-2
削除する識別子の配列で
“delete”を呼び出します

00:45:23.690 --> 00:45:27.761 align:start position:23% line:-2
共有グループ識別子を持つ
Intentを全て削除するには

00:45:27.861 --> 00:45:30.564 align:start position:23% line:-2
グループ識別子で
“delete”を呼び出します

00:45:31.498 --> 00:45:36.970 align:start position:16% line:-2
最後にNSUserActivity同様
Intentを全て削除するには

00:45:37.071 --> 00:45:39.707 align:start position:20% line:-2
“INInteraction”で
“deletAll”を呼び出します

00:45:41.542 --> 00:45:44.745 align:start position:30% line:-2
適切な時に
報告を削除してください

00:45:45.045 --> 00:45:47.514 align:start position:29% line:-1
それで最適な提案が生まれ

00:45:47.614 --> 00:45:52.252 align:start position:29% line:-2
関係のない提案で
ユーザに疑問を与えません

00:45:55.322 --> 00:46:00.694 align:start position:27% line:-2
ショートカットの作成と
提案に関し検討してきました

00:45:55.322 --> 00:46:00.694 align:start position:27% line:-2
ショートカットの作成と
提案に関し検討してきました

00:46:01.295 --> 00:46:04.531 align:start position:32% line:-2
最後に最良のメディア
ショートカット作成に

00:46:04.631 --> 00:46:07.101 align:start position:29% line:-1
使用するものを見ましょう

00:46:08.735 --> 00:46:12.139 align:start position:27% line:-2
Shortcutsに最適な
Intentを作成しました

00:46:12.372 --> 00:46:15.242 align:start position:18% line:-2
INPlayMediaIntentと
呼ばれ

00:46:15.342 --> 00:46:19.613 align:start position:27% line:-2
AV再生のショートカットを
作成し報告します

00:46:21.381 --> 00:46:24.284 align:start position:20% line:-2
ExtensionでIntentを
実行する時

00:46:24.385 --> 00:46:27.054 align:start position:27% line:-1
バックグラウンドでの実行を選択できます

00:46:27.621 --> 00:46:31.225 align:start position:27% line:-2
これでAppから
直接再生できます

00:46:35.529 --> 00:46:38.565 align:start position:30% line:-2
検索画面やロック画面で
提案されます

00:46:38.665 --> 00:46:42.069 align:start position:27% line:-2
ヘッドフォンを接続したとき
再生コントロールにも

00:46:42.169 --> 00:46:44.805 align:start position:23% line:-2
Intentのショートカットが
表示されます

00:46:45.172 --> 00:46:48.842 align:start position:32% line:-2
コンテンツ再生が更に
簡単です

00:46:50.577 --> 00:46:55.082 align:start position:30% line:-2
そしてHomePodで
うまく機能します

00:46:56.283 --> 00:46:59.653 align:start position:29% line:-2
Siriに再生のメディア
ショートカットを追加し

00:46:59.753 --> 00:47:02.122 align:start position:21% line:-1
HomePodで呼び出すだけです

00:46:59.753 --> 00:47:02.122 align:start position:21% line:-1
HomePodで呼び出すだけです

00:47:02.623 --> 00:47:06.427 align:start position:18% line:-2
HomePod経由でiPhoneから
再生されます

00:47:10.698 --> 00:47:13.967 align:start position:30% line:-2
興味のあるコンテンツを
システムに伝える―

00:47:14.067 --> 00:47:16.637 align:start position:27% line:-1
新しいAPIも作成しました

00:47:18.605 --> 00:47:21.074 align:start position:32% line:-2
定期配信コンテンツに
適しています

00:47:21.175 --> 00:47:23.744 align:start position:30% line:-1
ユーザに提案したいのは

00:47:23.844 --> 00:47:25.879 align:start position:38% line:-2
初めて体験する
コンテンツです

00:47:28.248 --> 00:47:30.684 align:start position:29% line:-2
優れたメディア
ショートカットにするため

00:47:30.784 --> 00:47:32.986 align:start position:27% line:-1
これらの機能を追加しました

00:47:33.454 --> 00:47:36.056 align:start position:32% line:-1
では まとめましょう

00:47:39.059 --> 00:47:43.163 align:start position:18% line:-2
ShortcutsはAppを
パワフルにします

00:47:43.897 --> 00:47:47.167 align:start position:27% line:-1
Appを開示して

00:47:47.267 --> 00:47:51.071 align:start position:30% line:-2
ユーザを巻き込む
新たな方法を提供します

00:47:51.171 --> 00:47:53.574 align:start position:25% line:-1
ロック画面 Siriの文字盤

00:47:53.674 --> 00:47:57.444 align:start position:23% line:-2
Siriの文字盤
Siri自体でも活用しましょう

00:47:57.544 --> 00:47:59.947 align:start position:27% line:-1
新しいAppでも

00:48:01.381 --> 00:48:04.585 align:start position:18% line:-2
Shortcutsは
NSUserActivityによって

00:48:04.685 --> 00:48:07.821 align:start position:34% line:-2
コンテンツを簡単に
開示できます

00:48:08.188 --> 00:48:09.957 align:start position:29% line:-1
またIntentの使用で

00:48:10.057 --> 00:48:13.961 align:start position:36% line:-2
よりシステムと
深く統合できます

00:48:14.061 --> 00:48:17.364 align:start position:34% line:-2
ユーザに全く新しい
体験を提供します

00:48:17.464 --> 00:48:23.036 align:start position:43% line:-1
(拍手)

00:48:23.136 --> 00:48:25.939 align:start position:30% line:-2
詳細はこちらのURLで
ご覧ください

00:48:26.040 --> 00:48:28.475 align:start position:32% line:-1
セッション211です

00:48:28.575 --> 00:48:30.978 align:start position:29% line:-1
今週はずっとラボにいます

00:48:31.478 --> 00:48:33.080 align:start position:41% line:-1
ありがとう

00:48:33.180 --> 00:48:35.616 align:start position:29% line:-2
皆さんのショートカットを
早く見たいです

00:48:35.716 --> 00:48:37.384 align:start position:29% line:-1
引き続き楽しんでください

00:48:37.484 --> 00:48:40.554 align:start position:43% line:-1
(拍手)
