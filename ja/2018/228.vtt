WEBVTT

00:00:07.074 --> 00:00:16.450 align:start position:43% line:-1
(音楽)

00:00:20.754 --> 00:00:21.955 align:start position:43% line:-1
(拍手)

00:00:22.055 --> 00:00:22.990 align:start position:45% line:-1
どうも

00:00:24.791 --> 00:00:25.626 align:start position:41% line:-1
ありがとう

00:00:26.593 --> 00:00:27.794 align:start position:34% line:-1
こんにちは 皆さん

00:00:27.895 --> 00:00:31.331 align:start position:20% line:-2
私はフィル･アザール　Appleの
ソフトウェアエンジニアです

00:00:31.765 --> 00:00:34.034 align:start position:27% line:-1
今日は同僚のデビッドと共に

00:00:34.134 --> 00:00:37.538 align:start position:20% line:-2
Energy Debuggingの
新しい特長をご紹介します

00:00:40.574 --> 00:00:43.243 align:start position:23% line:-1
バッテリー寿命は極めて重要です

00:00:43.343 --> 00:00:44.845 align:start position:21% line:-1
Power Teamが目指すのは

00:00:44.945 --> 00:00:49.816 align:start position:30% line:-2
バッテリーの充電なしに
１日を過ごせることです

00:00:50.884 --> 00:00:55.088 align:start position:34% line:-2
寿命を最適化すべく
デベロッパと協力し

00:00:55.189 --> 00:00:59.026 align:start position:29% line:-2
エネルギー効率の良い
デザインを目指しています

00:01:00.494 --> 00:01:03.330 align:start position:30% line:-2
アプリケーションも
カスタマーには重要です

00:01:03.430 --> 00:01:07.868 align:start position:21% line:-2
デバイスの使用状況は
他社製のアプリケーションの影響を

00:01:07.968 --> 00:01:09.369 align:start position:32% line:-1
ダイレクトに受けます

00:01:09.469 --> 00:01:12.739 align:start position:32% line:-2
アプリケーションの
デザインにあたっては

00:01:12.840 --> 00:01:17.978 align:start position:21% line:-2
これまで以上に エネルギー効率が
重要になります

00:01:18.745 --> 00:01:21.748 align:start position:30% line:-1
今日のテーマは３つです

00:01:22.950 --> 00:01:28.055 align:start position:27% line:-2
１つ目は エネルギー効率を
確実に高めるための

00:01:28.155 --> 00:01:31.091 align:start position:34% line:-2
バッテリー寿命の
コンセプトについて

00:01:31.925 --> 00:01:35.662 align:start position:21% line:-1
次にツールをいくつかご紹介します

00:01:35.929 --> 00:01:39.833 align:start position:27% line:-2
これでエネルギーを定量化し
理解できます

00:01:40.133 --> 00:01:45.205 align:start position:11% line:-2
３つ目は Energy Debuggingを
進化させるための

00:01:45.305 --> 00:01:47.841 align:start position:30% line:-1
新しいツールの説明です

00:01:48.775 --> 00:01:52.412 align:start position:21% line:-1
まずは一般的なコンセプトからです

00:01:53.113 --> 00:01:55.148 align:start position:29% line:-1
バッテリー寿命の向上には

00:01:55.249 --> 00:02:00.587 align:start position:21% line:-2
まずバッテリー寿命とは何たるかを
理解すべきです

00:01:55.249 --> 00:02:00.587 align:start position:21% line:-2
まずバッテリー寿命とは何たるかを
理解すべきです

00:02:01.288 --> 00:02:02.256 align:start position:39% line:-1
始めましょう

00:02:04.258 --> 00:02:05.292 align:start position:36% line:-1
エネルギーとは？

00:02:06.093 --> 00:02:11.165 align:start position:25% line:-2
物理の観点によれば
それは力と時間による産物です

00:02:11.732 --> 00:02:16.970 align:start position:23% line:-2
アプリケーションの実行中
消費されるエネルギーは様々です

00:02:17.604 --> 00:02:21.475 align:start position:34% line:-2
実行する内容で
消費量が異なります

00:02:22.009 --> 00:02:27.481 align:start position:29% line:-2
また 消費の時間が長いと
消費量も増えます

00:02:27.814 --> 00:02:29.416 align:start position:34% line:-1
グラフで見ましょう

00:02:30.117 --> 00:02:35.055 align:start position:29% line:-2
アプリケーションの実行中
電力の消費に波があります

00:02:35.923 --> 00:02:39.092 align:start position:34% line:-2
折線の下のエリアが
エネルギーです

00:02:39.693 --> 00:02:43.363 align:start position:21% line:-1
これは様々なモードに関わる話です

00:02:44.731 --> 00:02:50.237 align:start position:23% line:-2
アクティブかアイドルかによって
消費電力量は異なります

00:02:50.838 --> 00:02:54.675 align:start position:29% line:-2
アクティブな時
電力は山の頂点に達します

00:02:55.175 --> 00:02:59.780 align:start position:25% line:-2
アプリケーション本来の機能が
直接 使われるからです

00:03:00.214 --> 00:03:04.685 align:start position:25% line:-2
アイドル状態かつ起動中の時は
消費量が減ります

00:03:06.119 --> 00:03:10.424 align:start position:32% line:-2
停止中も一定の電力が
消費されています

00:03:11.024 --> 00:03:12.492 align:start position:39% line:-1
興味深いです

00:03:13.560 --> 00:03:16.497 align:start position:34% line:-2
アプリケーションは
処理の実行時―

00:03:16.597 --> 00:03:21.201 align:start position:32% line:-2
必要なハードウェアを
システムに要求します

00:03:21.935 --> 00:03:27.374 align:start position:27% line:-2
その際に生じるエネルギーを
オーバーヘッドと呼びます

00:03:28.075 --> 00:03:30.744 align:start position:29% line:-1
直接は制御できないものの

00:03:30.844 --> 00:03:32.746 align:start position:34% line:-2
アプリケーションは
オーバーヘッドを

00:03:32.913 --> 00:03:34.515 align:start position:36% line:-1
大きく左右します

00:03:35.816 --> 00:03:39.119 align:start position:29% line:-2
ハードウェアの
最初の利用時に生じるのが

00:03:39.219 --> 00:03:40.821 align:start position:29% line:-1
アクティブエネルギーです

00:03:41.121 --> 00:03:44.057 align:start position:29% line:-1
サブシステムを使うことで

00:03:44.158 --> 00:03:48.595 align:start position:25% line:-2
アプリケーションはラジオや
カメラなどにアクセスできます

00:03:49.263 --> 00:03:52.232 align:start position:21% line:-1
これが アクティブエネルギーです

00:03:53.033 --> 00:03:54.701 align:start position:34% line:-1
バッテリー寿命には

00:03:54.968 --> 00:03:58.572 align:start position:32% line:-2
２つの要素の最適化が
重要です

00:03:58.839 --> 00:04:04.011 align:start position:23% line:-2
アクティブエネルギーの効率性や
ハードウェアの要求に伴う―

00:03:58.839 --> 00:04:04.011 align:start position:23% line:-2
アクティブエネルギーの効率性や
ハードウェアの要求に伴う―

00:04:04.111 --> 00:04:08.482 align:start position:29% line:-2
オーバーヘッドについても
考えねばなりません

00:04:11.118 --> 00:04:15.589 align:start position:21% line:-2
ハードウェアや
サブシステムについて触れましたが

00:04:15.923 --> 00:04:18.524 align:start position:30% line:-1
エネルギー消費の肝は？

00:04:18.926 --> 00:04:22.696 align:start position:27% line:-2
皆さんは数多くの
ハードウェアサブシステムと

00:04:22.796 --> 00:04:24.698 align:start position:36% line:-1
向き合うはずです

00:04:25.833 --> 00:04:28.302 align:start position:23% line:-1
効率化に貢献するサブシステムを

00:04:28.402 --> 00:04:31.138 align:start position:18% line:-1
Power Teamは４つ挙げました

00:04:32.639 --> 00:04:34.007 align:start position:41% line:-1
こちらです

00:04:34.741 --> 00:04:38.545 align:start position:21% line:-2
プロセッシング ネットワーキング
ロケーション グラフィックスです

00:04:39.780 --> 00:04:42.149 align:start position:30% line:-1
具体的に見てみましょう

00:04:43.417 --> 00:04:45.486 align:start position:23% line:-1
プロセッシングは想像がつきます

00:04:46.386 --> 00:04:51.625 align:start position:21% line:-2
アプリケーションが CPUなどの
システム資源を利用する時に

00:04:51.725 --> 00:04:54.394 align:start position:23% line:-1
消費されるエネルギーを生みます

00:04:55.162 --> 00:04:57.130 align:start position:32% line:-1
非常に強力な要素です

00:04:57.598 --> 00:05:00.801 align:start position:32% line:-2
ここでのエネルギーは
実行されるコードや―

00:04:57.598 --> 00:05:00.801 align:start position:32% line:-2
ここでのエネルギーは
実行されるコードや―

00:05:00.901 --> 00:05:05.005 align:start position:30% line:-2
要求するワークロードに
強く依存します

00:05:06.006 --> 00:05:10.010 align:start position:29% line:-2
つまり 実行される処理が
増えるほどに

00:05:10.110 --> 00:05:12.913 align:start position:25% line:-1
消費エネルギーも増えるのです

00:05:14.648 --> 00:05:20.420 align:start position:27% line:-2
エネルギー消費を語る上で
ネットワーキングも重要です

00:05:22.322 --> 00:05:24.625 align:start position:29% line:-1
これは想像できるでしょう

00:05:24.858 --> 00:05:27.528 align:start position:27% line:-2
アプリケーションが
セルラーやWi-Fiを通じ

00:05:27.628 --> 00:05:30.130 align:start position:32% line:-1
通信を要求する際には

00:05:30.230 --> 00:05:33.100 align:start position:30% line:-1
エネルギーを消費します

00:05:34.368 --> 00:05:36.236 align:start position:25% line:-1
これはトラフィックに依存し―

00:05:36.436 --> 00:05:40.274 align:start position:29% line:-1
通信量が多ければ多いほど

00:05:40.374 --> 00:05:42.009 align:start position:29% line:-1
消費エネルギーも増えます

00:05:43.544 --> 00:05:47.047 align:start position:21% line:-1
ネットワークリクエストが増えれば

00:05:47.147 --> 00:05:49.383 align:start position:25% line:-1
消費エネルギーも増えるのです

00:05:51.018 --> 00:05:53.287 align:start position:25% line:-1
ロケーションは少し異なります

00:05:54.321 --> 00:05:58.258 align:start position:30% line:-2
アプリケーションは
ロケーションの決定時に

00:05:58.659 --> 00:06:04.198 align:start position:18% line:-2
GPSやWi-Fi セルラーを用いて
エネルギーを消費します

00:05:58.659 --> 00:06:04.198 align:start position:18% line:-2
GPSやWi-Fi セルラーを用いて
エネルギーを消費します

00:06:05.899 --> 00:06:09.436 align:start position:29% line:-2
消費量は
正確性と頻度に依存します

00:06:10.037 --> 00:06:15.242 align:start position:27% line:-2
ロケーションの決定が
正確かつ高頻度に行われれば

00:06:15.542 --> 00:06:18.712 align:start position:29% line:-1
消費エネルギーも増えます

00:06:20.347 --> 00:06:24.418 align:start position:32% line:-2
ロケーションの決定に
時間をかけると

00:06:24.518 --> 00:06:27.387 align:start position:30% line:-1
消費量が増えるわけです

00:06:30.357 --> 00:06:32.593 align:start position:29% line:-1
最後はグラフィックスです

00:06:33.994 --> 00:06:38.966 align:start position:20% line:-2
グラフィックサブシステムでは
GPUやCPUといったプロセッサが

00:06:39.066 --> 00:06:41.902 align:start position:25% line:-1
エネルギーの消費に関わります

00:06:42.636 --> 00:06:45.205 align:start position:36% line:-2
アニメーションや
UIに依存します

00:06:45.772 --> 00:06:50.244 align:start position:30% line:-2
UIのレンダリングや
アニメーション表示には

00:06:50.344 --> 00:06:52.913 align:start position:27% line:-1
エネルギーの消費を伴います

00:06:54.181 --> 00:06:56.183 align:start position:32% line:-1
複雑の度合いが鍵です

00:06:56.750 --> 00:06:59.253 align:start position:23% line:-1
アニメーションやUIが複雑なら

00:06:59.353 --> 00:07:02.222 align:start position:29% line:-1
消費エネルギーも増えます

00:06:59.353 --> 00:07:02.222 align:start position:29% line:-1
消費エネルギーも増えます

00:07:03.957 --> 00:07:08.428 align:start position:30% line:-2
要は レンダリング量が
多ければ多いほど

00:07:08.529 --> 00:07:13.066 align:start position:25% line:-2
グラフィックスの
消費エネルギーは増えるのです

00:07:15.769 --> 00:07:19.706 align:start position:23% line:-1
まとめると 注意すべきなのは？

00:07:19.806 --> 00:07:23.110 align:start position:34% line:-2
これら４つには
共通原則があります

00:07:23.944 --> 00:07:26.680 align:start position:32% line:-2
“処理が増えれば
エネルギーも増える”

00:07:28.248 --> 00:07:32.252 align:start position:29% line:-2
ただ闇雲に処理を減らせば
機能が低下します

00:07:32.819 --> 00:07:38.392 align:start position:27% line:-2
大事なのは処理を最適化し
エネルギー効率を高めること

00:07:40.460 --> 00:07:41.929 align:start position:34% line:-1
簡単ではありません

00:07:42.629 --> 00:07:45.399 align:start position:34% line:-2
エネルギー効率には
プロセスが伴います

00:07:45.899 --> 00:07:49.136 align:start position:36% line:-2
突然 最適化して
効率が上がり―

00:07:49.236 --> 00:07:53.640 align:start position:29% line:-2
バッテリー寿命が
延びるわけではありません

00:07:54.808 --> 00:07:56.977 align:start position:36% line:-1
複数のリソースを

00:07:57.077 --> 00:08:01.048 align:start position:23% line:-1
効率的に使うことが重要なのです

00:07:57.077 --> 00:08:01.048 align:start position:23% line:-1
効率的に使うことが重要なのです

00:08:02.649 --> 00:08:07.287 align:start position:27% line:-2
この点を踏まえ
実際の例を見ていきましょう

00:08:07.387 --> 00:08:11.592 align:start position:29% line:-2
エネルギー効率の
プロセスを実戦してみます

00:08:12.593 --> 00:08:14.628 align:start position:27% line:-1
フォアグラウンドの場合です

00:08:15.529 --> 00:08:19.600 align:start position:32% line:-2
フォアグラウンドでの
ユーザ体験は

00:08:19.700 --> 00:08:23.070 align:start position:34% line:-2
アプリケーションの
最も重要な要素です

00:08:23.437 --> 00:08:24.638 align:start position:38% line:-1
そう考えると―

00:08:25.572 --> 00:08:29.843 align:start position:32% line:-2
フォアグラウンドでは
提供する価値に着目し

00:08:30.143 --> 00:08:35.148 align:start position:30% line:-2
ユーザ体験に
即時に影響するべきです

00:08:35.816 --> 00:08:39.385 align:start position:34% line:-2
実行するのは
求められた処理だけ

00:08:40.053 --> 00:08:41.587 align:start position:38% line:-1
シンプルですね

00:08:42.054 --> 00:08:46.126 align:start position:32% line:-2
実際に その重要性を
見ていきましょう

00:08:47.294 --> 00:08:49.363 align:start position:23% line:-1
メディアアプリケーションの場合

00:08:49.563 --> 00:08:54.968 align:start position:25% line:-2
目的は 一定のペースで
コンテンツを配信することです

00:08:55.469 --> 00:08:58.639 align:start position:30% line:-2
タイマーベースの手法を
取り入れ

00:08:58.739 --> 00:09:01.742 align:start position:21% line:-1
フィードのリフレッシュも可能です

00:08:58.739 --> 00:09:01.742 align:start position:21% line:-1
フィードのリフレッシュも可能です

00:09:02.142 --> 00:09:04.745 align:start position:30% line:-1
ユーザの操作がなくとも

00:09:04.845 --> 00:09:08.081 align:start position:30% line:-2
常に新しいコンテンツを
提供します

00:09:09.216 --> 00:09:13.720 align:start position:32% line:-2
しかし これは
エネルギー非効率です

00:09:14.888 --> 00:09:18.926 align:start position:23% line:-1
ここで電力と時間の関係を見ます

00:09:19.026 --> 00:09:24.231 align:start position:25% line:-2
タイマーが機能時に
エネルギーが消費されています

00:09:25.165 --> 00:09:28.969 align:start position:29% line:-2
注目すべきは
膨大なオーバーヘッドです

00:09:29.503 --> 00:09:32.973 align:start position:29% line:-2
新しいコンテンツの表示が
要求されると

00:09:33.073 --> 00:09:36.143 align:start position:21% line:-1
ネットワーキングやグラフィックス

00:09:36.443 --> 00:09:40.013 align:start position:25% line:-2
プロセッシングなどの
サブシステムが呼び出されます

00:09:40.113 --> 00:09:42.082 align:start position:27% line:-1
ユーザの要望に関わらずです

00:09:42.182 --> 00:09:46.253 align:start position:32% line:-2
実行中 エネルギーは
消費され続けます

00:09:47.321 --> 00:09:48.422 align:start position:39% line:-1
解決できます

00:09:49.690 --> 00:09:52.960 align:start position:27% line:-2
ユーザの求める
フレッシュなコンテンツには

00:09:53.160 --> 00:09:56.263 align:start position:23% line:-2
オンデマンドのソリューションが
有効です

00:09:57.231 --> 00:10:02.269 align:start position:29% line:-2
ユーザの操作あるいは
サーバからの通知を通して

00:09:57.231 --> 00:10:02.269 align:start position:29% line:-2
ユーザの操作あるいは
サーバからの通知を通して

00:10:02.369 --> 00:10:05.806 align:start position:23% line:-1
新しいコンテンツを表示できます

00:10:07.608 --> 00:10:10.878 align:start position:23% line:-1
エネルギー効率の高いこの方法は

00:10:10.978 --> 00:10:14.047 align:start position:34% line:-2
電力と時間の関係を
劇的に変えます

00:10:14.314 --> 00:10:15.616 align:start position:39% line:-1
なぜでしょう

00:10:16.383 --> 00:10:20.454 align:start position:25% line:-1
フォアグラウンドでの操作中に

00:10:20.554 --> 00:10:24.057 align:start position:29% line:-2
フィードを
リフレッシュするとします

00:10:24.358 --> 00:10:28.328 align:start position:27% line:-2
この時 アプリケーションは
アイドル状態です

00:10:28.695 --> 00:10:31.431 align:start position:34% line:-2
スクロールしたり
している時などです

00:10:32.065 --> 00:10:36.503 align:start position:29% line:-2
オーバーヘッドは
かなり小さくなっています

00:10:36.937 --> 00:10:38.572 align:start position:32% line:-1
不要なサブシステムを

00:10:38.672 --> 00:10:42.676 align:start position:27% line:-2
スリープ状態か
アイドル状態にしたからです

00:10:45.512 --> 00:10:49.983 align:start position:23% line:-2
他にもフォアグラウンドにおいて
有効なのは

00:10:50.517 --> 00:10:52.519 align:start position:30% line:-1
複雑なUIの最小化です

00:10:53.287 --> 00:10:58.926 align:start position:21% line:-2
グラフィックスのエネルギー消費は
複雑さに強く依存します

00:10:59.827 --> 00:11:02.196 align:start position:30% line:-1
私たちは魅力的なUIや

00:10:59.827 --> 00:11:02.196 align:start position:30% line:-1
私たちは魅力的なUIや

00:11:02.296 --> 00:11:07.701 align:start position:29% line:-2
アニメーションの構築に
時間を費やそうとしますが

00:11:08.635 --> 00:11:11.004 align:start position:27% line:-1
これは時に副作用を伴います

00:11:11.705 --> 00:11:14.041 align:start position:30% line:-1
理由を見ていきましょう

00:11:15.576 --> 00:11:19.446 align:start position:30% line:-2
動画プレーヤーの目的は
動画を見せること

00:11:19.913 --> 00:11:20.747 align:start position:39% line:-1
シンプルです

00:11:21.148 --> 00:11:25.285 align:start position:32% line:-2
しかし 新しいUIを
付加したくもなります

00:11:25.385 --> 00:11:30.123 align:start position:29% line:-2
関連する動画やスクラバー
コントロールなどです

00:11:30.791 --> 00:11:33.494 align:start position:32% line:-1
動画鑑賞を楽しむ上で

00:11:33.594 --> 00:11:36.430 align:start position:30% line:-1
大きく貢献してくれます

00:11:37.831 --> 00:11:40.500 align:start position:21% line:-1
しかし エネルギー効率は低いです

00:11:41.134 --> 00:11:42.736 align:start position:38% line:-1
なぜでしょうか

00:11:43.570 --> 00:11:46.874 align:start position:27% line:-2
デバイスには
スクリーンにUIがない時に

00:11:46.974 --> 00:11:51.745 align:start position:23% line:-2
ディスプレイを最適化する機能が
備わっています

00:11:52.446 --> 00:11:56.016 align:start position:27% line:-1
開発中は気付きにくいですが

00:11:56.116 --> 00:11:58.385 align:start position:38% line:-1
重要なことです

00:11:59.620 --> 00:12:02.556 align:start position:32% line:-1
この最適化を利用して

00:11:59.620 --> 00:12:02.556 align:start position:32% line:-1
この最適化を利用して

00:12:02.656 --> 00:12:06.393 align:start position:34% line:-2
エネルギー非効率を
解消するために

00:12:07.161 --> 00:12:10.898 align:start position:32% line:-2
UIのコントロールを
自動で無効にします

00:12:12.132 --> 00:12:16.103 align:start position:30% line:-2
これで ユーザが
操作を行っていない時は

00:12:16.203 --> 00:12:19.873 align:start position:34% line:-2
関連のコンテンツは
現れなくなります

00:12:20.674 --> 00:12:24.511 align:start position:30% line:-2
ディスプレイの最適化は
非常に重要です

00:12:24.745 --> 00:12:30.350 align:start position:25% line:-2
動画再生時のエネルギー効率を
大きく高めてくれます

00:12:33.687 --> 00:12:36.957 align:start position:32% line:-2
バックグラウンドでは
どうでしょう

00:12:37.324 --> 00:12:42.930 align:start position:23% line:-2
音楽プレーヤーや
アラームなどの開発では重要です

00:12:43.230 --> 00:12:47.067 align:start position:25% line:-1
ユーザ体験を左右するからです

00:12:49.002 --> 00:12:52.439 align:start position:30% line:-2
注意してほしいのですが
アプリケーションは

00:12:53.207 --> 00:12:58.078 align:start position:27% line:-2
デバイス上の他のシステムと
同時に実行されます

00:12:58.512 --> 00:13:01.882 align:start position:12% line:-1
iMessageやFaceTimeなどです

00:12:58.512 --> 00:13:01.882 align:start position:12% line:-1
iMessageやFaceTimeなどです

00:13:02.482 --> 00:13:05.986 align:start position:25% line:-1
エネルギー効率を高めるために

00:13:06.119 --> 00:13:08.655 align:start position:27% line:-1
ワークロードを最小化します

00:13:10.023 --> 00:13:13.627 align:start position:25% line:-1
もう少し掘り下げてみましょう

00:13:14.461 --> 00:13:15.863 align:start position:32% line:-1
バックグラウンドでは

00:13:15.963 --> 00:13:20.601 align:start position:30% line:-2
使用中のサブシステムの
利用が可能です

00:13:20.801 --> 00:13:24.037 align:start position:27% line:-1
ただし エネルギーの消費は

00:13:24.138 --> 00:13:27.741 align:start position:30% line:-2
フォアグラウンドの方が
優先されます

00:13:28.242 --> 00:13:33.647 align:start position:21% line:-2
ワークロードを最小化し
それらを邪魔しないことが大事です

00:13:34.615 --> 00:13:38.519 align:start position:27% line:-2
全タスクを
まとめて処理するとしたら？

00:13:38.952 --> 00:13:41.989 align:start position:25% line:-2
例えば
ネートワーキング関連の処理を

00:13:42.089 --> 00:13:45.692 align:start position:34% line:-2
バックグラウンドで
多数 抱えていたら

00:13:45.993 --> 00:13:49.696 align:start position:21% line:-1
一括で処理することが最善でしょう

00:13:50.097 --> 00:13:53.734 align:start position:34% line:-2
他の処理への影響は
最小限で済みます

00:13:55.169 --> 00:13:57.337 align:start position:32% line:-1
その分かりやすい例が

00:13:57.437 --> 00:14:00.807 align:start position:34% line:-2
アプリケーションの
アナリティクスです

00:13:57.437 --> 00:14:00.807 align:start position:34% line:-2
アプリケーションの
アナリティクスです

00:14:01.775 --> 00:14:05.746 align:start position:29% line:-2
皆さんはアナリティクスを
すぐに送信するでしょう

00:14:05.846 --> 00:14:09.483 align:start position:23% line:-1
クラッシュしないデータセットを

00:14:09.583 --> 00:14:11.985 align:start position:32% line:-1
ビルドできるからです

00:14:12.953 --> 00:14:15.422 align:start position:27% line:-1
ただ エネルギー非効率です

00:14:15.856 --> 00:14:19.026 align:start position:30% line:-2
都度 アナリティクスを
送っていると

00:14:19.126 --> 00:14:21.528 align:start position:23% line:-1
ハードウェアが過剰に使われます

00:14:22.696 --> 00:14:25.866 align:start position:21% line:-1
電力と時間の関係を見てみましょう

00:14:26.533 --> 00:14:29.970 align:start position:36% line:-2
送信の都度
リソースが使われ

00:14:30.070 --> 00:14:33.073 align:start position:27% line:-1
続いて アイドルとなります

00:14:34.007 --> 00:14:37.110 align:start position:34% line:-2
グラフでは
山は３つだけですが

00:14:37.244 --> 00:14:41.815 align:start position:27% line:-2
実際のアプリケーションでは
影響は かなりのものです

00:14:44.017 --> 00:14:46.653 align:start position:27% line:-1
解決策は至ってシンプルです

00:14:47.888 --> 00:14:50.457 align:start position:30% line:-1
バッチ処理を行うのです

00:14:50.924 --> 00:14:54.795 align:start position:27% line:-2
それをサポートするAPIは
たくさんあり

00:14:54.895 --> 00:14:57.064 align:start position:14% line:-1
主たるものがNSURLSessionです

00:14:57.798 --> 00:15:00.501 align:start position:16% line:-1
discretionaryプロパティや

00:14:57.798 --> 00:15:00.501 align:start position:16% line:-1
discretionaryプロパティや

00:15:00.601 --> 00:15:03.437 align:start position:25% line:-2
バックグラウンドセッションに
利用し

00:15:03.537 --> 00:15:06.340 align:start position:32% line:-1
迅速に最適化できます

00:15:08.342 --> 00:15:09.743 align:start position:38% line:-1
これが正解です

00:15:11.144 --> 00:15:15.516 align:start position:29% line:-2
エネルギーと時間の関係を
見てみましょう

00:15:16.917 --> 00:15:19.820 align:start position:32% line:-2
アナリティクスの
アップロードなどには

00:15:19.920 --> 00:15:22.923 align:start position:25% line:-1
多少 時間がかかるでしょうが

00:15:23.023 --> 00:15:26.627 align:start position:30% line:-2
エネルギー量は
はるかに少なく済みます

00:15:26.760 --> 00:15:29.263 align:start position:29% line:-1
消費するのは一度だけです

00:15:29.563 --> 00:15:34.434 align:start position:27% line:-2
バックグラウンドでの処理を
一括で実行したからです

00:15:35.302 --> 00:15:40.274 align:start position:23% line:-2
タスク完了には
多くのエネルギーを費やしますが

00:15:40.374 --> 00:15:45.012 align:start position:27% line:-2
他のアプリケーションを
邪魔する心配はなくなります

00:15:47.214 --> 00:15:51.785 align:start position:23% line:-2
タスクを素早く完了させることも
いい例です

00:15:52.586 --> 00:15:56.323 align:start position:30% line:-2
バックグラウンドで
有用なAPIがあります

00:15:57.157 --> 00:16:00.727 align:start position:30% line:-2
UIKitやVoIP
PushKitなどです

00:15:57.157 --> 00:16:00.727 align:start position:30% line:-2
UIKitやVoIP
PushKitなどです

00:16:01.995 --> 00:16:06.066 align:start position:30% line:-2
バックグラウンド処理が
必要なくなった場合に

00:16:06.166 --> 00:16:08.235 align:start position:30% line:-1
指示することができます

00:16:10.637 --> 00:16:15.275 align:start position:21% line:-2
バックグラウンドモードでの処理が
終わったことを―

00:16:15.642 --> 00:16:19.513 align:start position:30% line:-2
完了ハンドラを呼び出し
知らせるのです

00:16:20.080 --> 00:16:22.149 align:start position:30% line:-1
タスクの完了を忘れたり

00:16:22.249 --> 00:16:27.287 align:start position:27% line:-2
保留したいと
考えたりすることもあります

00:16:27.821 --> 00:16:29.590 align:start position:29% line:-1
タスクは時間切れになり―

00:16:30.791 --> 00:16:33.427 align:start position:25% line:-1
多大なエネルギーが使われます

00:16:34.561 --> 00:16:39.366 align:start position:29% line:-2
開発時には
気付かないかもしれません

00:16:40.167 --> 00:16:43.670 align:start position:32% line:-2
なぜエネルギー効率が
低いのでしょう

00:16:44.638 --> 00:16:50.043 align:start position:27% line:-2
バックグラウンドのタスクを
完了させずに置いておくと

00:16:50.344 --> 00:16:55.315 align:start position:30% line:-2
タスクが時間切れになり
アイドル状態に入ります

00:16:55.415 --> 00:16:57.985 align:start position:34% line:-2
バックグラウンドの
アプリケーションは

00:16:58.085 --> 00:17:01.021 align:start position:29% line:-1
エネルギーを消費しますが

00:16:58.085 --> 00:17:01.021 align:start position:29% line:-1
エネルギーを消費しますが

00:17:01.255 --> 00:17:03.190 align:start position:29% line:-1
他には何も起きていません

00:17:03.557 --> 00:17:08.328 align:start position:29% line:-2
システムの稼働が続くので
オーバーヘッドも長く続き

00:17:08.428 --> 00:17:10.063 align:start position:36% line:-1
サブシステムは―

00:17:10.164 --> 00:17:13.634 align:start position:27% line:-1
タスクの完了を待っています

00:17:15.335 --> 00:17:16.869 align:start position:39% line:-1
解決するには

00:17:17.204 --> 00:17:21.608 align:start position:27% line:-2
利用可能な時は
完了ハンドラを呼び出します

00:17:22.675 --> 00:17:25.779 align:start position:20% line:-2
代表例は
UIBackgroundTaskで

00:17:25.878 --> 00:17:30.250 align:start position:18% line:-1
このAPIとUIKitを呼び出せます

00:17:30.717 --> 00:17:35.489 align:start position:27% line:-2
実行すべき処理がないことを
システムに伝えれば

00:17:35.589 --> 00:17:37.458 align:start position:34% line:-1
エネルギーを節約し

00:17:37.558 --> 00:17:40.794 align:start position:30% line:-2
ハードウェアを
アイドル状態にできます

00:17:41.428 --> 00:17:44.198 align:start position:30% line:-1
グラフで見てみましょう

00:17:44.898 --> 00:17:48.635 align:start position:27% line:-1
アクティブな時間が短くなり

00:17:48.735 --> 00:17:51.705 align:start position:36% line:-2
オーバーヘッドも
大幅に減りました

00:17:52.973 --> 00:17:57.110 align:start position:25% line:-2
シンプルですが
エネルギーへの影響は絶大です

00:18:01.348 --> 00:18:06.220 align:start position:23% line:-2
エネルギー効率の
プロセスについてお話ししました

00:18:06.553 --> 00:18:10.390 align:start position:25% line:-1
様々な処理を最適化していけば

00:18:10.557 --> 00:18:14.761 align:start position:29% line:-2
エネルギー消費の最適化も
大きく進みます

00:18:16.563 --> 00:18:18.599 align:start position:32% line:-1
より掘り下げるために

00:18:18.699 --> 00:18:23.337 align:start position:29% line:-2
最適化の裏にある
コードの話に移りましょう

00:18:23.437 --> 00:18:28.041 align:start position:29% line:-2
昨年のセッションの視聴を
お勧めします

00:18:28.709 --> 00:18:31.578 align:start position:30% line:-1
高効率なデザインの例や

00:18:31.678 --> 00:18:36.617 align:start position:27% line:-2
興味深いリソースが
たくさん見つかると思います

00:18:40.521 --> 00:18:45.659 align:start position:27% line:-2
エネルギー効率の改善方法を
ご紹介してきました

00:18:46.760 --> 00:18:50.264 align:start position:23% line:-1
アプリケーションの裏側にある―

00:18:50.397 --> 00:18:55.269 align:start position:30% line:-2
ハードウェアに関しても
重点的に説明しました

00:18:55.736 --> 00:18:57.838 align:start position:36% line:-1
これらを定量化し

00:18:57.971 --> 00:19:02.276 align:start position:27% line:-2
アプリケーションでの
実際の影響を理解しましょう

00:18:57.971 --> 00:19:02.276 align:start position:27% line:-2
アプリケーションでの
実際の影響を理解しましょう

00:19:03.177 --> 00:19:07.981 align:start position:29% line:-2
そのために必要なツールを
ご紹介します

00:19:10.050 --> 00:19:14.621 align:start position:25% line:-2
エネルギーの影響の定量化には
２つのツールが有用です

00:19:15.389 --> 00:19:19.760 align:start position:25% line:-2
まずXcodeのデバッガから
アクセスできるゲージです

00:19:20.460 --> 00:19:24.731 align:start position:27% line:-2
このゲージは
高速かつ反復の処理に役立ち

00:19:24.898 --> 00:19:27.100 align:start position:36% line:-1
エネルギー消費を

00:19:27.568 --> 00:19:30.370 align:start position:27% line:-1
理解しやすくするツールです

00:19:31.572 --> 00:19:36.677 align:start position:11% line:-2
ゲージでは不十分なら
Developer Toolkitも使えます

00:19:37.344 --> 00:19:41.515 align:start position:27% line:-2
デバイス上のサブシステムを
深く分析し

00:19:41.615 --> 00:19:47.154 align:start position:27% line:-2
そのパフォーマンスについて
理解することができます

00:19:48.622 --> 00:19:50.557 align:start position:30% line:-1
ゲージから見ていきます

00:19:51.892 --> 00:19:55.162 align:start position:21% line:-1
Xcodeのデバッガから入手でき

00:19:55.262 --> 00:19:57.097 align:start position:36% line:-1
使い方は簡単です

00:19:58.298 --> 00:19:59.800 align:start position:38% line:-1
これがUIです

00:19:59.900 --> 00:20:02.369 align:start position:30% line:-1
エネルギーの影響の列や

00:19:59.900 --> 00:20:02.369 align:start position:30% line:-1
エネルギーの影響の列や

00:20:02.469 --> 00:20:07.007 align:start position:30% line:-2
３つのセクションにより
構成されています

00:20:07.741 --> 00:20:10.744 align:start position:27% line:-1
基準ゲージが左上にあります

00:20:11.345 --> 00:20:15.415 align:start position:29% line:-2
“低い”から
“非常に高い”まで振れて

00:20:15.516 --> 00:20:19.920 align:start position:27% line:-2
その時のエネルギーの影響を
瞬時に表します

00:20:20.888 --> 00:20:26.026 align:start position:25% line:-2
ゲージは消費量を
相対的に示しているだけなので

00:20:26.126 --> 00:20:31.064 align:start position:23% line:-2
“高い”からといって
望ましくない状態とは限りません

00:20:31.765 --> 00:20:33.400 align:start position:34% line:-1
望ましいかどうかは

00:20:33.500 --> 00:20:38.172 align:start position:25% line:-2
デベロッパが
妥当と捉えるかどうか次第です

00:20:39.573 --> 00:20:43.076 align:start position:9% line:-2
右上にあるのは Average
Component Utilizationです

00:20:43.610 --> 00:20:49.116 align:start position:30% line:-2
エネルギー全体における
各要素の使用率が―

00:20:49.216 --> 00:20:53.086 align:start position:25% line:-1
この円グラフから把握できます

00:20:53.921 --> 00:20:57.925 align:start position:27% line:-2
サブシステムの状態が分かり
便利です

00:20:58.025 --> 00:21:01.562 align:start position:30% line:-2
オーバーヘッドや
要素ごとのエネルギーが

00:20:58.025 --> 00:21:01.562 align:start position:30% line:-2
オーバーヘッドや
要素ごとのエネルギーが

00:21:01.662 --> 00:21:05.065 align:start position:29% line:-1
過剰かどうかも分かります

00:21:06.800 --> 00:21:11.438 align:start position:29% line:-2
すぐ下には
時系列のグラフがあります

00:21:11.738 --> 00:21:14.708 align:start position:27% line:-1
アプリケーションの実行中の

00:21:14.808 --> 00:21:18.545 align:start position:27% line:-2
各要素の平均的な使用状況を
表します

00:21:18.879 --> 00:21:20.881 align:start position:29% line:-1
アプリケーション実行が―

00:21:20.981 --> 00:21:24.418 align:start position:34% line:-2
フォアグラウンドか
バックグランドかも

00:21:24.518 --> 00:21:26.153 align:start position:36% line:-1
ここで見られます

00:21:27.120 --> 00:21:31.425 align:start position:27% line:-2
実行状況を
リアルタイムで確認できます

00:21:33.727 --> 00:21:35.996 align:start position:29% line:-1
ゲージは優れたツールで―

00:21:36.797 --> 00:21:41.168 align:start position:27% line:-2
ハイレベルな分析や
プロファイリングに有用です

00:21:41.502 --> 00:21:42.503 align:start position:38% line:-1
それがカギです

00:21:42.703 --> 00:21:47.741 align:start position:25% line:-2
デベロッパとして
何かを実現させようとする際に

00:21:48.108 --> 00:21:53.247 align:start position:23% line:-2
エネルギーについて考えるための
足掛かりとなります

00:21:55.482 --> 00:21:58.652 align:start position:27% line:-1
ゲージだけでは不十分なら？

00:21:59.753 --> 00:22:01.155 align:start position:21% line:-1
Instrumentsの出番です

00:21:59.753 --> 00:22:01.155 align:start position:21% line:-1
Instrumentsの出番です

00:22:01.889 --> 00:22:03.991 align:start position:32% line:-1
ゲージのUIを通じて

00:22:04.091 --> 00:22:06.693 align:start position:34% line:-2
サブシステムと
最も関わりの深い―

00:22:06.793 --> 00:22:09.630 align:start position:23% line:-2
３つのInstrumentsに
アクセスできます

00:22:10.931 --> 00:22:13.400 align:start position:25% line:-2
含まれるのは
Time Profilerと

00:22:13.500 --> 00:22:16.370 align:start position:16% line:-2
Network Profiler
Location Profilerです

00:22:17.171 --> 00:22:20.674 align:start position:27% line:-2
アクセスすると
現在のデバッグセッションを

00:22:20.774 --> 00:22:24.878 align:start position:14% line:-1
それらのInstrumentsに移せます

00:22:26.246 --> 00:22:31.518 align:start position:14% line:-2
Time ProfilerのUIについて
理解していきましょう

00:22:33.487 --> 00:22:36.823 align:start position:20% line:-1
非常に標準的なUIを有していますが

00:22:36.924 --> 00:22:39.827 align:start position:29% line:-1
とても使いやすいものです

00:22:40.194 --> 00:22:41.195 align:start position:39% line:-1
ご覧ください

00:22:42.329 --> 00:22:44.731 align:start position:18% line:-1
Time ProfilerのUIです

00:22:45.132 --> 00:22:51.171 align:start position:18% line:-2
上部のバーはInstrumentsの
様々なコントロールを表します

00:22:51.371 --> 00:22:53.574 align:start position:29% line:-1
左上には再生･停止ボタン

00:22:53.674 --> 00:22:56.443 align:start position:23% line:-2
プロファイリングのターゲットが
あります

00:22:56.777 --> 00:22:58.812 align:start position:36% line:-1
右上の＋ボタンで

00:22:58.912 --> 00:23:01.882 align:start position:25% line:-2
他のInstrumentsを
プロファイリングペインへ

00:22:58.912 --> 00:23:01.882 align:start position:25% line:-2
他のInstrumentsを
プロファイリングペインへ

00:23:01.982 --> 00:23:05.419 align:start position:23% line:-1
ドラッグアンドドロップできます

00:23:06.220 --> 00:23:11.325 align:start position:21% line:-2
実行中のInstrumentsを
確認できます

00:23:11.925 --> 00:23:15.596 align:start position:23% line:-2
Time Profilerでは
CPUの消費状況や

00:23:15.696 --> 00:23:19.800 align:start position:32% line:-2
時間との関係を
グラフで確認できます

00:23:21.602 --> 00:23:24.037 align:start position:21% line:-1
その下の重み付きコールグラフでは

00:23:24.137 --> 00:23:26.874 align:start position:32% line:-1
CPUの使用状況を―

00:23:26.974 --> 00:23:29.243 align:start position:34% line:-1
見ることができます

00:23:30.077 --> 00:23:34.982 align:start position:32% line:-2
何の処理が呼び出され
どの程度の重みが―

00:23:35.082 --> 00:23:38.285 align:start position:21% line:-1
CPU時間にかかっているかもです

00:23:39.486 --> 00:23:44.358 align:start position:27% line:-2
右には スタックトレースが
まとめられています

00:23:44.825 --> 00:23:49.263 align:start position:30% line:-2
プロファイリングの際の
最も重いスタックです

00:23:50.964 --> 00:23:53.567 align:start position:18% line:-1
Instrumentsは実に便利です

00:23:54.601 --> 00:23:56.003 align:start position:36% line:-1
例えば これです

00:23:58.038 --> 00:24:01.842 align:start position:29% line:-2
Instrumentsは
複数の用途に使えます

00:23:58.038 --> 00:24:01.842 align:start position:29% line:-2
Instrumentsは
複数の用途に使えます

00:24:02.242 --> 00:24:06.046 align:start position:21% line:-1
例えば根本原因解析においてもです

00:24:06.146 --> 00:24:10.083 align:start position:32% line:-2
特定のサブシステムで
問題があるとします

00:24:11.018 --> 00:24:14.755 align:start position:14% line:-2
Time Profilerや
Network Profilerを使えば

00:24:14.855 --> 00:24:17.724 align:start position:29% line:-1
問題を素早く特定できます

00:24:18.425 --> 00:24:23.096 align:start position:27% line:-2
緻密なプロファイリングにも
非常に有用です

00:24:23.697 --> 00:24:27.568 align:start position:30% line:-2
アルゴリズムの
実行時間の削減などで―

00:24:27.668 --> 00:24:30.838 align:start position:25% line:-1
CPU効率を改善したとします

00:24:31.505 --> 00:24:35.909 align:start position:25% line:-2
最適化の効果が
サブシステムに浸透しているか

00:24:36.009 --> 00:24:39.046 align:start position:18% line:-1
Instrumentsで確認できます

00:24:40.447 --> 00:24:44.985 align:start position:29% line:-2
Instrumentsは
ある用途にも効果的です

00:24:45.652 --> 00:24:47.354 align:start position:21% line:-1
アンテザードプロファイリングです

00:24:48.322 --> 00:24:51.725 align:start position:23% line:-2
Energy Logという
Instrumentsを使うと

00:24:51.892 --> 00:24:55.162 align:start position:29% line:-2
アプリケーションの使用中
デバイス上で

00:24:55.295 --> 00:24:58.365 align:start position:23% line:-2
アンテザードプロファイリングが
可能です

00:24:58.599 --> 00:25:01.068 align:start position:27% line:-1
デベロッパ設定から使えます

00:24:58.599 --> 00:25:01.068 align:start position:27% line:-1
デベロッパ設定から使えます

00:25:01.301 --> 00:25:02.903 align:start position:43% line:-1
実行中も

00:25:03.003 --> 00:25:07.775 align:start position:27% line:-2
いつもどおりに
アプリケーションが使えます

00:25:08.208 --> 00:25:12.179 align:start position:25% line:-2
完了後はデベロッパツールから
記録を停止し

00:25:12.279 --> 00:25:14.815 align:start position:29% line:-2
Instrumentsで
トレースをアップロード

00:25:15.215 --> 00:25:18.986 align:start position:32% line:-2
環境的要因が
効率を下げていないか

00:25:19.086 --> 00:25:21.121 align:start position:39% line:-1
確認できます

00:25:23.123 --> 00:25:25.893 align:start position:32% line:-2
ツールやコンセプトを
お話ししました

00:25:26.093 --> 00:25:27.928 align:start position:38% line:-1
実践に移ります

00:25:28.228 --> 00:25:31.798 align:start position:27% line:-1
これらをうまく組み合わせて

00:25:31.899 --> 00:25:35.102 align:start position:25% line:-1
エネルギー効率を向上させます

00:25:39.439 --> 00:25:42.609 align:start position:16% line:-1
Energy Gameというゲームでは

00:25:42.709 --> 00:25:47.648 align:start position:29% line:-2
画面にスプライトが描かれ
バグを注入できます

00:25:47.848 --> 00:25:51.685 align:start position:20% line:-2
View Controller内は
AppDelegateだけで

00:25:51.785 --> 00:25:52.986 align:start position:41% line:-1
主な目的は

00:25:53.086 --> 00:25:57.257 align:start position:23% line:-2
コード処理時の
ツールの活用法を伝えることです

00:25:58.592 --> 00:26:03.664 align:start position:12% line:-2
XcodeのUIにて
Energy Gameをビルドし実行します

00:25:58.592 --> 00:26:03.664 align:start position:12% line:-2
XcodeのUIにて
Energy Gameをビルドし実行します

00:26:04.064 --> 00:26:06.533 align:start position:23% line:-1
右側に バッテリースプライトが

00:26:06.633 --> 00:26:10.204 align:start position:27% line:-1
ランダムに描かれていますね

00:26:10.671 --> 00:26:12.539 align:start position:39% line:-1
シンプルです

00:26:12.940 --> 00:26:17.778 align:start position:20% line:-2
Xcodeデバッガに入り
Energy Impactに移ると

00:26:17.878 --> 00:26:19.580 align:start position:32% line:-1
ゲージが表示されます

00:26:21.081 --> 00:26:23.217 align:start position:36% line:-1
先ほどのUIです

00:26:23.317 --> 00:26:26.186 align:start position:23% line:-1
３つのエリアが表示されています

00:26:26.386 --> 00:26:29.022 align:start position:34% line:-2
アプリケーションが
実行しているのは

00:26:29.122 --> 00:26:33.293 align:start position:29% line:-2
スプライトを画面に
いくつか描くことだけです

00:26:33.994 --> 00:26:39.066 align:start position:23% line:-2
オーバーヘッドは
大きくなっているように見えます

00:26:39.433 --> 00:26:41.368 align:start position:29% line:-1
ネットワーキングにおいて

00:26:41.468 --> 00:26:46.106 align:start position:29% line:-2
スプライトが描かれる都度
数が更新されるからです

00:26:46.807 --> 00:26:50.544 align:start position:21% line:-1
ゲージからその影響を確認できます

00:26:51.812 --> 00:26:54.815 align:start position:27% line:-1
この辺りで停止させましょう

00:26:54.915 --> 00:26:58.051 align:start position:34% line:-2
コードを確認し
仕組みを理解します

00:26:59.853 --> 00:27:02.856 align:start position:12% line:-1
View Controllerにある関数は

00:26:59.853 --> 00:27:02.856 align:start position:12% line:-1
View Controllerにある関数は

00:27:02.956 --> 00:27:05.125 align:start position:29% line:-1
スプライト数を出力します

00:27:05.225 --> 00:27:07.461 align:start position:27% line:-2
コネクションオブジェクトを
生成し―

00:27:07.561 --> 00:27:10.430 align:start position:27% line:-1
スプライトの数を更新します

00:27:10.564 --> 00:27:12.399 align:start position:21% line:-1
AppDelegateに入ります

00:27:13.400 --> 00:27:15.636 align:start position:23% line:-1
バックグラウンドにいる時だけ―

00:27:15.936 --> 00:27:19.139 align:start position:27% line:-1
数が更新されるようにします

00:27:20.374 --> 00:27:23.343 align:start position:27% line:-2
“ネットワーキング最適化”
と名付けました

00:27:24.077 --> 00:27:26.246 align:start position:20% line:-1
Energy Gameをリビルドし

00:27:26.713 --> 00:27:29.249 align:start position:25% line:-1
ゲージへの影響をお見せします

00:27:31.818 --> 00:27:33.921 align:start position:20% line:-1
Energy Gameが実行中です

00:27:34.321 --> 00:27:38.926 align:start position:18% line:-2
XcodeデバッガのUIと
Energy Impactに戻ります

00:27:39.693 --> 00:27:45.232 align:start position:25% line:-2
ネットワーキングエネルギーも
オーバーヘッドも見られません

00:27:45.666 --> 00:27:50.571 align:start position:25% line:-2
ネットワーキングリクエストを
別のエリアに移動させ

00:27:50.671 --> 00:27:52.973 align:start position:27% line:-1
頻繁に起こるのを防ぐだけで

00:27:53.407 --> 00:27:58.378 align:start position:27% line:-2
エネルギーの影響を
大幅に減らすことができます

00:28:00.013 --> 00:28:01.849 align:start position:30% line:-1
次に ゲージを使う際に

00:28:01.949 --> 00:28:06.386 align:start position:25% line:-2
注入したバグが
どう見えるかを確認しましょう

00:28:07.221 --> 00:28:10.157 align:start position:30% line:-1
バグ１はシンプルですが

00:28:10.257 --> 00:28:13.126 align:start position:25% line:-1
CPUスピンの原因になります

00:28:13.293 --> 00:28:16.797 align:start position:32% line:-2
開発の現場でも
日常的に起こり得ます

00:28:17.464 --> 00:28:19.266 align:start position:32% line:-1
このバグを注入します

00:28:20.968 --> 00:28:23.637 align:start position:29% line:-2
Energy Gameの
バックグラウンドに入ると

00:28:24.238 --> 00:28:27.775 align:start position:20% line:-1
ゲージのUIにもそれが表れています

00:28:28.442 --> 00:28:32.146 align:start position:25% line:-2
要求が移動し
ネットワーキングが行われます

00:28:32.613 --> 00:28:35.816 align:start position:25% line:-1
CPUが激しく動いていますね

00:28:36.884 --> 00:28:38.819 align:start position:32% line:-1
これがゲージの力です

00:28:38.919 --> 00:28:43.123 align:start position:30% line:-2
注入したバグを
ゲージで見られるのです

00:28:43.957 --> 00:28:47.361 align:start position:21% line:-2
根本原因を探るため
Time Profilerに入り

00:28:47.461 --> 00:28:50.230 align:start position:25% line:-1
デバッグセッションを移します

00:28:53.901 --> 00:28:57.704 align:start position:34% line:-2
移行後は
自動で実行されます

00:28:59.940 --> 00:29:03.944 align:start position:30% line:-2
重み付きコールグラフが
入力されます

00:28:59.940 --> 00:29:03.944 align:start position:30% line:-2
重み付きコールグラフが
入力されます

00:29:07.214 --> 00:29:12.719 align:start position:25% line:-2
ディスパッチされたスレッドが
多くのCPU時間を消費します

00:29:15.455 --> 00:29:16.423 align:start position:39% line:-1
クロージャが

00:29:16.523 --> 00:29:19.426 align:start position:14% line:-2
AppDelegate.Computeに
ありますね

00:29:20.127 --> 00:29:23.931 align:start position:30% line:-2
アプリケーションに戻り
正体を理解しましょう

00:29:29.837 --> 00:29:31.505 align:start position:34% line:-1
バックグラウンドで

00:29:32.139 --> 00:29:35.742 align:start position:30% line:-2
コンピュテーション式を
呼び出しました

00:29:36.877 --> 00:29:40.214 align:start position:30% line:-2
コンピュテーション式は
ひどい関数です

00:29:40.814 --> 00:29:42.816 align:start position:36% line:-1
バグ１の注入時に

00:29:43.016 --> 00:29:47.921 align:start position:21% line:-2
while Trueループと共に
激しく回転し始めます

00:29:48.021 --> 00:29:50.557 align:start position:27% line:-1
デモでは分かりやすいですが

00:29:50.657 --> 00:29:52.960 align:start position:18% line:-1
ゲージとTime Profilerで

00:29:53.060 --> 00:29:55.896 align:start position:34% line:-2
発生場所が
すぐに見つかります

00:29:56.530 --> 00:29:59.566 align:start position:14% line:-1
while Trueループはイマイチです

00:30:00.334 --> 00:30:02.236 align:start position:32% line:-1
コメントアウトします

00:30:04.004 --> 00:30:06.473 align:start position:23% line:-1
私はコメントアウトが大好きです

00:30:07.541 --> 00:30:09.710 align:start position:16% line:-1
Energy Gameをリビルドします

00:30:13.480 --> 00:30:16.583 align:start position:21% line:-1
ゲージに戻り 問題がないかを確認

00:30:16.683 --> 00:30:18.886 align:start position:30% line:-1
再びバグ１を注入します

00:30:22.790 --> 00:30:24.091 align:start position:34% line:-1
バックグラウンドへ

00:30:29.730 --> 00:30:32.866 align:start position:34% line:-2
順調に動きつつ
CPUスピンはなし

00:30:33.500 --> 00:30:35.102 align:start position:43% line:-1
解決です

00:30:35.435 --> 00:30:39.173 align:start position:32% line:-2
使ったツールは２つ
所要時間は１分弱です

00:30:39.606 --> 00:30:41.141 align:start position:38% line:-1
ツールによって

00:30:41.241 --> 00:30:46.046 align:start position:21% line:-2
速い処理や
根本原因の解析が可能になりました

00:30:47.181 --> 00:30:48.782 align:start position:34% line:-1
スライドに戻ります

00:30:54.955 --> 00:30:56.757 align:start position:32% line:-1
ポイントをまとめます

00:30:58.358 --> 00:31:02.029 align:start position:32% line:-2
まず速い反復処理には
ゲージが有用です

00:30:58.358 --> 00:31:02.029 align:start position:32% line:-2
まず速い反復処理には
ゲージが有用です

00:31:02.930 --> 00:31:06.233 align:start position:30% line:-1
問題の迅速な発見を助け

00:31:06.633 --> 00:31:09.536 align:start position:30% line:-1
解決へと導いてくれます

00:31:11.638 --> 00:31:13.407 align:start position:23% line:-1
次に Instrumentsは

00:31:13.874 --> 00:31:16.710 align:start position:29% line:-2
緻密なプロファイリングに
役立ちます

00:31:18.078 --> 00:31:20.247 align:start position:25% line:-1
最後に アプリケーションでは

00:31:20.347 --> 00:31:25.586 align:start position:30% line:-2
エネルギー効率の向上が
極めて重要です

00:31:26.086 --> 00:31:28.956 align:start position:30% line:-2
エネルギーの消費状況や
根本原因は

00:31:29.056 --> 00:31:33.093 align:start position:29% line:-2
ご紹介したツールを使って
把握できます

00:31:34.328 --> 00:31:37.231 align:start position:25% line:-1
すべてが完了したとしましょう

00:31:37.731 --> 00:31:41.335 align:start position:27% line:-1
アプリケーションの配信も―

00:31:41.435 --> 00:31:43.337 align:start position:39% line:-1
予定通り完了

00:31:43.437 --> 00:31:44.438 align:start position:39% line:-1
次の問題は？

00:31:44.972 --> 00:31:48.575 align:start position:29% line:-2
バッテリー寿命への不満が
出たら？

00:31:48.876 --> 00:31:50.644 align:start position:36% line:-1
次に頼る手段は？

00:31:51.345 --> 00:31:54.448 align:start position:27% line:-1
ここからは同僚のデビッドが

00:31:54.548 --> 00:31:59.920 align:start position:29% line:-2
別のツールによる解決策を
お伝えします

00:32:01.221 --> 00:32:05.259 align:start position:43% line:-1
(拍手)

00:32:05.359 --> 00:32:08.195 align:start position:23% line:-1
こんにちは　デビッドと申します

00:32:08.295 --> 00:32:13.133 align:start position:14% line:-2
Energy Debuggingに役立つ
新たなツールをご紹介します

00:32:15.836 --> 00:32:17.337 align:start position:12% line:-1
App StoreやTestFlightで

00:32:17.838 --> 00:32:20.474 align:start position:34% line:-2
アプリケーションを
配信している方は

00:32:20.574 --> 00:32:22.676 align:start position:30% line:-1
ぜひ参考にしてください

00:32:23.744 --> 00:32:25.712 align:start position:29% line:-1
アプリケーションの配信後

00:32:26.413 --> 00:32:30.651 align:start position:29% line:-2
その動作状況を
どうやって確認しますか？

00:32:31.251 --> 00:32:36.924 align:start position:23% line:-2
カスタマーが バッテリー寿命の
悪化につながるような問題を

00:32:37.024 --> 00:32:39.093 align:start position:32% line:-1
抱えていたとしたら？

00:32:40.327 --> 00:32:43.464 align:start position:25% line:-1
こんなレビューを残されたら？

00:32:44.598 --> 00:32:47.334 align:start position:23% line:-2
“このアプリケーションのせいで
バッテリーがすぐ切れる”

00:32:48.368 --> 00:32:51.071 align:start position:30% line:-1
あるいはレビューもなく

00:32:51.705 --> 00:32:55.976 align:start position:27% line:-2
アプリケーションを
削除される可能性もあります

00:32:56.677 --> 00:32:58.045 align:start position:34% line:-1
エネルギーの問題を

00:32:58.145 --> 00:33:01.482 align:start position:25% line:-1
配信後に把握するのは困難です

00:32:58.145 --> 00:33:01.482 align:start position:25% line:-1
配信後に把握するのは困難です

00:33:02.616 --> 00:33:05.185 align:start position:30% line:-1
仮に把握できたとしても

00:33:05.552 --> 00:33:09.323 align:start position:34% line:-2
それをどうやって
デバッグしますか？

00:33:11.058 --> 00:33:15.596 align:start position:29% line:-2
Instrumentsや
ゲージは便利ですが

00:33:16.163 --> 00:33:20.634 align:start position:32% line:-2
事象が分からなければ
再現は困難です

00:33:21.468 --> 00:33:23.437 align:start position:38% line:-1
カスタマー側で

00:33:23.737 --> 00:33:27.374 align:start position:29% line:-2
Wi-Fi環境が不安定な
ケースもあります

00:33:28.375 --> 00:33:30.878 align:start position:30% line:-1
同じ環境とは限りません

00:33:32.846 --> 00:33:35.249 align:start position:32% line:-1
非常に難しい課題です

00:33:37.651 --> 00:33:41.488 align:start position:34% line:-2
こうした問題を
デバッグするために

00:33:41.855 --> 00:33:44.491 align:start position:29% line:-1
新しい方法をご紹介します

00:33:46.160 --> 00:33:49.963 align:start position:7% line:-2
Xcode Energy Logsと
Xcode Energy Organizerです

00:33:50.631 --> 00:33:52.900 align:start position:14% line:-1
まずXcode Energy Logsは

00:33:53.000 --> 00:33:57.070 align:start position:32% line:-2
デバイス上の問題を
報告できるツールです

00:33:57.638 --> 00:34:00.007 align:start position:9% line:-1
Xcode Energy Organizerは

00:33:57.638 --> 00:34:00.007 align:start position:9% line:-1
Xcode Energy Organizerは

00:34:00.107 --> 00:34:02.876 align:start position:30% line:-2
Energy Logを
閲覧するツールです

00:34:04.311 --> 00:34:08.916 align:start position:29% line:-2
問題解決に必要なデータを
入手できる―

00:34:10.050 --> 00:34:13.219 align:start position:29% line:-1
これまでにないツールです

00:34:13.387 --> 00:34:14.554 align:start position:39% line:-1
始めましょう

00:34:16.123 --> 00:34:20.194 align:start position:16% line:-2
Xcode Energy Logsでは
デバイスから問題を報告できます

00:34:21.995 --> 00:34:27.234 align:start position:23% line:-2
まずCPUが多く使われるような
イベントを考えます

00:34:27.900 --> 00:34:31.038 align:start position:30% line:-2
Energy Logの
重み付きコールグラフは

00:34:31.138 --> 00:34:34.074 align:start position:32% line:-2
コード内の問題箇所を
指摘します

00:34:35.007 --> 00:34:38.946 align:start position:23% line:-2
ログはTestFlightや
App Storeから利用でき

00:34:39.045 --> 00:34:43.583 align:start position:32% line:-2
カスタマー側の問題を
データで把握できます

00:34:44.083 --> 00:34:48.088 align:start position:29% line:-2
バッテリーに関わる
ユーザ体験を改善できます

00:34:50.090 --> 00:34:53.726 align:start position:20% line:-2
Xcode Energy Logは
いつ生成されるのでしょう

00:34:54.661 --> 00:34:59.967 align:start position:23% line:-2
CPUに多大な負荷をかける
アプリケーションを例に取ります

00:35:00.801 --> 00:35:03.570 align:start position:27% line:-1
負荷はかかることもあります

00:35:04.705 --> 00:35:08.775 align:start position:30% line:-2
ただ それが
長時間に及ぶとしたら？

00:35:12.179 --> 00:35:15.449 align:start position:20% line:-1
高いCPUエネルギーが検知されます

00:35:17.184 --> 00:35:20.921 align:start position:23% line:-1
エネルギーが高いという判断には

00:35:21.155 --> 00:35:22.856 align:start position:32% line:-1
２つの基準があります

00:35:23.090 --> 00:35:26.727 align:start position:23% line:-2
１つ目は CPUの80％以上が
フォアグラウンドで

00:35:26.827 --> 00:35:29.763 align:start position:27% line:-1
３分以上 回転していること

00:35:30.230 --> 00:35:33.801 align:start position:23% line:-2
２つ目は CPUの80％以上が
バックグラウンドで

00:35:33.901 --> 00:35:36.370 align:start position:27% line:-1
１分以上 回転していること

00:35:37.104 --> 00:35:38.138 align:start position:36% line:-1
後者のケースでは

00:35:38.238 --> 00:35:42.342 align:start position:32% line:-2
アプリケーションの
故障を招きかねません

00:35:45.112 --> 00:35:47.881 align:start position:21% line:-1
それぞれのEnergy Logは

00:35:47.981 --> 00:35:51.852 align:start position:30% line:-2
CPUの使いすぎに対し
警告を出すのです

00:35:52.619 --> 00:35:54.588 align:start position:34% line:-1
分かりやすく言うと

00:35:54.988 --> 00:36:00.561 align:start position:23% line:-2
警告を出すのは １％以下の
バッテリーの低下が起きた時です

00:35:54.988 --> 00:36:00.561 align:start position:23% line:-2
警告を出すのは １％以下の
バッテリーの低下が起きた時です

00:36:01.729 --> 00:36:06.066 align:start position:23% line:-2
１％なら 大した数値じゃないと
思いますか？

00:36:07.000 --> 00:36:08.202 align:start position:34% line:-1
実際はどうでしょう

00:36:09.169 --> 00:36:13.407 align:start position:29% line:-2
iPhone 6sで
バッテリーが１％増えれば

00:36:13.774 --> 00:36:17.511 align:start position:36% line:-2
ユーザは８分長く
通話が可能です

00:36:17.945 --> 00:36:20.414 align:start position:27% line:-1
または６分長くネットを閲覧

00:36:20.914 --> 00:36:23.851 align:start position:36% line:-2
30分長く
音楽を聴くことも

00:36:24.718 --> 00:36:27.121 align:start position:30% line:-1
先ほどのペースが続けば

00:36:28.055 --> 00:36:30.157 align:start position:25% line:-1
バッテリーはさらに低下します

00:36:30.557 --> 00:36:34.328 align:start position:36% line:-2
CPUの効率化は
非常に重要です

00:36:34.428 --> 00:36:36.430 align:start position:29% line:-1
ユーザは ごまかせません

00:36:37.898 --> 00:36:42.135 align:start position:29% line:-2
Energy Logには
便利な機能が３つあります

00:36:42.736 --> 00:36:47.041 align:start position:25% line:-2
まず 報告が起きた原因を示す
コンテキスト

00:36:47.374 --> 00:36:49.109 align:start position:30% line:-1
“CPUの80％が―”

00:36:49.309 --> 00:36:52.913 align:start position:27% line:-2
“３分以上 回転しました”
といった具合です

00:36:53.981 --> 00:36:58.785 align:start position:23% line:-2
２つ目はEnergy Logの
生成場所を示すメタデータです

00:36:59.153 --> 00:37:01.688 align:start position:21% line:-1
iPhoneなのかiPadなのか

00:36:59.153 --> 00:37:01.688 align:start position:21% line:-1
iPhoneなのかiPadなのか

00:37:02.022 --> 00:37:04.491 align:start position:27% line:-1
ビルドナンバーも分かります

00:37:05.492 --> 00:37:08.028 align:start position:29% line:-1
最も重要な３つ目の機能は

00:37:08.128 --> 00:37:12.199 align:start position:29% line:-2
問題箇所を示す
重み付きコールグラフです

00:37:13.100 --> 00:37:15.569 align:start position:29% line:-1
このグラフはどう生成され

00:37:16.036 --> 00:37:20.073 align:start position:32% line:-2
問題のデバッグに
どう役立つのでしょう

00:37:23.477 --> 00:37:26.547 align:start position:32% line:-2
main関数から成る
プログラムを考えます

00:37:26.647 --> 00:37:31.084 align:start position:9% line:-2
method1やmethod2 method3
method4も含まれます

00:37:33.620 --> 00:37:38.125 align:start position:29% line:-2
高消費のイベント発生まで
コードが実行されます

00:37:40.594 --> 00:37:44.298 align:start position:34% line:-2
バックトレースは
１秒に１回の間隔で

00:37:44.465 --> 00:37:47.167 align:start position:25% line:-1
継続的にサンプリングされます

00:37:47.734 --> 00:37:49.403 align:start position:34% line:-1
各バックトレースは

00:37:49.670 --> 00:37:54.375 align:start position:30% line:-2
実行時にアクティブな
フレームのサンプルです

00:37:55.809 --> 00:37:57.778 align:start position:29% line:-1
１つ目のバックトレースは

00:37:57.945 --> 00:38:01.548 align:start position:21% line:-2
method1とmethod2が
アクティブだったことを示します

00:37:57.945 --> 00:38:01.548 align:start position:21% line:-2
method1とmethod2が
アクティブだったことを示します

00:38:04.017 --> 00:38:05.185 align:start position:41% line:-1
２つ目は―

00:38:05.285 --> 00:38:08.922 align:start position:21% line:-2
method3とmethod4が
アクティブだったことを示します

00:38:10.457 --> 00:38:11.425 align:start position:38% line:-1
以下も同じです

00:38:17.464 --> 00:38:22.502 align:start position:27% line:-2
全体像を形成すべく
バックトレースを結合します

00:38:23.370 --> 00:38:28.709 align:start position:27% line:-2
この重み付きコールグラフは
非常に役に立ちます

00:38:29.343 --> 00:38:34.047 align:start position:27% line:-2
６つのサンプルすべてに
mainが含まれていました

00:38:34.982 --> 00:38:37.751 align:start position:27% line:-1
常に実行されていた証拠です

00:38:38.919 --> 00:38:42.489 align:start position:27% line:-2
method1はサンプルが
５つありましたが

00:38:43.223 --> 00:38:45.826 align:start position:23% line:-1
method3の場合は１つです

00:38:47.027 --> 00:38:50.931 align:start position:29% line:-2
method1の中では
method2が３つと―

00:38:51.031 --> 00:38:53.700 align:start position:30% line:-2
method3が１つの
サンプルでした

00:38:54.468 --> 00:38:59.306 align:start position:29% line:-2
これでコードの実行場所や
所要時間についての

00:38:59.406 --> 00:39:01.642 align:start position:32% line:-1
全体像が見えてきます

00:38:59.406 --> 00:39:01.642 align:start position:32% line:-1
全体像が見えてきます

00:39:04.912 --> 00:39:07.014 align:start position:20% line:-1
Energy Logが生成される時

00:39:07.514 --> 00:39:11.819 align:start position:27% line:-2
バックトレースが１秒に１回
サンプリングされます

00:39:12.152 --> 00:39:13.787 align:start position:30% line:-1
各バックトレースには―

00:39:15.122 --> 00:39:18.859 align:start position:23% line:-2
CPUが実行する
アクティブフレームが含まれます

00:39:19.626 --> 00:39:24.231 align:start position:27% line:-2
バックトレースは
サンプル数によって集約され

00:39:24.731 --> 00:39:29.703 align:start position:27% line:-2
サンプル数は
コードの実行頻度を示します

00:39:30.370 --> 00:39:35.509 align:start position:23% line:-2
コールグラフは 予期せぬ
ワークロードの発見にも使えます

00:39:37.578 --> 00:39:41.315 align:start position:29% line:-2
Energy Logへの
アクセス方法は？

00:39:42.783 --> 00:39:45.786 align:start position:29% line:-2
Energy Logは
デバイス上で生成されます

00:39:46.720 --> 00:39:50.524 align:start position:27% line:-2
ベータテスターと
オプトインしたカスタマーが

00:39:50.858 --> 00:39:53.727 align:start position:29% line:-2
Appleに向けて
ログをアップロードします

00:39:54.595 --> 00:39:57.831 align:start position:29% line:-2
ログの数は
数千に上ることがあるので

00:39:58.565 --> 00:40:01.535 align:start position:25% line:-1
私たちが それらを集約します

00:39:58.565 --> 00:40:01.535 align:start position:25% line:-1
私たちが それらを集約します

00:40:01.635 --> 00:40:06.507 align:start position:30% line:-2
ソートし 重大な問題を
リストアップします

00:40:07.307 --> 00:40:12.713 align:start position:5% line:-2
Xcode Energy Organizerを使い
ダウンロードし閲覧できます

00:40:14.281 --> 00:40:17.451 align:start position:9% line:-2
Xcode Energy Organizerは
デバッグする上で

00:40:17.551 --> 00:40:20.420 align:start position:30% line:-1
司令部として機能します

00:40:21.421 --> 00:40:25.325 align:start position:27% line:-2
Energy Logを
非常に見やすくしてくれます

00:40:26.560 --> 00:40:29.930 align:start position:12% line:-2
TestFlightやApp Storeに
接続しており

00:40:30.030 --> 00:40:32.699 align:start position:27% line:-2
iOSのアプリケーションが
確認できます

00:40:35.502 --> 00:40:40.574 align:start position:23% line:-2
配信後の問題発生の頻度について
統計も得られます

00:40:42.009 --> 00:40:46.647 align:start position:27% line:-2
影響したデバイスの数により
問題をソートします

00:40:48.482 --> 00:40:52.252 align:start position:30% line:-2
重み付きコールグラフで
様々なログを

00:40:52.486 --> 00:40:55.422 align:start position:27% line:-1
飛ばしながら見ることも可能

00:40:57.691 --> 00:41:01.295 align:start position:16% line:-2
Open in Projectを使うと
コードベースへ移動し

00:40:57.691 --> 00:41:01.295 align:start position:16% line:-2
Open in Projectを使うと
コードベースへ移動し

00:41:01.395 --> 00:41:03.831 align:start position:30% line:-1
デバッグを始められます

00:41:04.365 --> 00:41:06.533 align:start position:30% line:-1
実際にお見せしましょう

00:41:15.676 --> 00:41:18.845 align:start position:16% line:-1
ログインし Energy Gameを―

00:41:18.946 --> 00:41:23.784 align:start position:11% line:-2
App Store内のTestFlightに
アップロード済みです

00:41:24.952 --> 00:41:28.722 align:start position:14% line:-2
Energy Organizerの起動は
Windowから―

00:41:30.824 --> 00:41:32.092 align:start position:25% line:-1
Organizerをクリック

00:41:35.829 --> 00:41:38.165 align:start position:12% line:-1
Energy OrganizerのUIです

00:41:39.366 --> 00:41:42.402 align:start position:25% line:-1
Energyタブを選択します

00:41:43.370 --> 00:41:48.142 align:start position:25% line:-2
Crashesオーガナイザに
よく似たUIです

00:41:48.942 --> 00:41:51.545 align:start position:23% line:-1
左にはアプリケーションのリスト

00:41:52.479 --> 00:41:55.416 align:start position:21% line:-1
隣には 優先度の高い問題のリスト

00:41:56.116 --> 00:41:58.418 align:start position:30% line:-1
中央はコールグラフです

00:41:59.086 --> 00:42:03.624 align:start position:27% line:-2
右には 問題に関する統計が
見られます

00:41:59.086 --> 00:42:03.624 align:start position:27% line:-2
右には 問題に関する統計が
見られます

00:42:04.658 --> 00:42:07.161 align:start position:32% line:-1
左に注目してください

00:42:07.794 --> 00:42:11.031 align:start position:20% line:-1
Energy Gameを選択します

00:42:12.399 --> 00:42:15.269 align:start position:23% line:-1
ビルドナンバーも確認しましょう

00:42:19.973 --> 00:42:25.279 align:start position:27% line:-2
影響したデバイスの数により
問題がソートされています

00:42:27.281 --> 00:42:29.449 align:start position:32% line:-1
１つ目の問題を見ます

00:42:30.651 --> 00:42:33.053 align:start position:27% line:-1
影響したデバイス数は64個

00:42:36.890 --> 00:42:40.761 align:start position:30% line:-2
右のペインに
詳細が表示されています

00:42:41.495 --> 00:42:45.198 align:start position:27% line:-1
発生頻度の内訳も出ています

00:42:45.399 --> 00:42:50.571 align:start position:11% line:-2
発生したデバイスは
iPadと iPodと iPod touch

00:42:51.371 --> 00:42:55.509 align:start position:21% line:-1
過去２週間の発生分布も分かります

00:42:56.777 --> 00:42:58.645 align:start position:25% line:-1
重み付きコールグラフを見ます

00:43:01.849 --> 00:43:05.886 align:start position:14% line:-2
dispatch call blockで
多くの時間が費やされ

00:43:05.986 --> 00:43:09.323 align:start position:30% line:-2
コンピュテーション式が
呼び出されています

00:43:10.624 --> 00:43:12.726 align:start position:34% line:-1
ボタンをクリックし

00:43:13.360 --> 00:43:16.130 align:start position:25% line:-1
コードベースにジャンプします

00:43:21.869 --> 00:43:24.371 align:start position:30% line:-1
コード画面に戻りました

00:43:25.005 --> 00:43:26.340 align:start position:38% line:-1
左に見えるのは

00:43:26.440 --> 00:43:30.010 align:start position:25% line:-2
コールグラフからの
サンプルのバックトレースです

00:43:32.146 --> 00:43:35.949 align:start position:30% line:-2
コンピュテーション式に
時間が費やされています

00:43:37.417 --> 00:43:42.422 align:start position:27% line:-2
まさに先ほど
フィルが話していた関数です

00:43:49.196 --> 00:43:50.330 align:start position:41% line:-1
フィルが―

00:43:51.932 --> 00:43:56.070 align:start position:32% line:-2
コメントアウトし
問題は解決済みですね

00:43:56.170 --> 00:43:58.105 align:start position:30% line:-1
オーガナイザに戻ります

00:44:04.545 --> 00:44:09.249 align:start position:34% line:-2
ボタンをクリックし
解決済みとします

00:44:10.184 --> 00:44:16.323 align:start position:9% line:-2
次回 Energy Organizerを開くと
解決済みとして表示されます

00:44:17.891 --> 00:44:21.461 align:start position:29% line:-2
次は 42個のデバイスに
影響した問題です

00:44:22.763 --> 00:44:27.701 align:start position:29% line:-2
まず画面下部の
３つの機能を見てください

00:44:29.770 --> 00:44:32.773 align:start position:27% line:-1
まず ページスルーログです

00:44:33.707 --> 00:44:37.044 align:start position:23% line:-1
５つあるログのサンプルの中から

00:44:37.144 --> 00:44:39.279 align:start position:29% line:-1
１つを選ぶことができます

00:44:42.382 --> 00:44:43.784 align:start position:39% line:-1
見てみると―

00:44:44.585 --> 00:44:47.821 align:start position:30% line:-2
重み付きコールグラフが
少し異なります

00:44:48.155 --> 00:44:50.057 align:start position:34% line:-1
これでも構いません

00:44:50.157 --> 00:44:53.594 align:start position:29% line:-2
バックトレースやグラフは
サンプルですからね

00:44:54.528 --> 00:44:57.564 align:start position:23% line:-1
しかし グループ化したからには

00:44:57.664 --> 00:45:00.667 align:start position:32% line:-2
これらのログは
似通っているべきです

00:44:57.664 --> 00:45:00.667 align:start position:32% line:-2
これらのログは
似通っているべきです

00:45:02.903 --> 00:45:06.206 align:start position:27% line:-1
このボタンをクリックすると

00:45:06.306 --> 00:45:11.678 align:start position:23% line:-2
隠れていたライブラリフレームが
姿を現します

00:45:12.913 --> 00:45:15.549 align:start position:34% line:-1
こちらのボタンは―

00:45:15.782 --> 00:45:19.353 align:start position:25% line:-2
サンプル数の少ないフレームが
表示されます

00:45:19.887 --> 00:45:23.657 align:start position:36% line:-2
デフォルトでは
ほとんどが隠され

00:45:23.757 --> 00:45:26.627 align:start position:25% line:-1
重要なものだけが表示されます

00:45:34.435 --> 00:45:36.103 align:start position:36% line:-1
関数を見てみます

00:45:38.639 --> 00:45:42.376 align:start position:27% line:-2
heavyTimer関数で
時間が費やされています

00:45:42.943 --> 00:45:45.846 align:start position:23% line:-1
このバグはフィルが処理するので

00:45:45.946 --> 00:45:49.083 align:start position:30% line:-1
名前を変更しておきます

00:45:50.450 --> 00:45:52.119 align:start position:29% line:-1
“フィルのバグ”としよう

00:45:56.757 --> 00:45:58.258 align:start position:38% line:-1
では次のバグへ

00:45:59.159 --> 00:46:00.894 align:start position:34% line:-1
もう１つ見ましょう

00:45:59.159 --> 00:46:00.894 align:start position:34% line:-1
もう１つ見ましょう

00:46:13.540 --> 00:46:16.076 align:start position:16% line:-2
ここでは
setNextUpdateTimerと

00:46:16.176 --> 00:46:19.379 align:start position:27% line:-2
addNewSpriteで
時間がかかっています

00:46:19.680 --> 00:46:22.583 align:start position:30% line:-1
この関数を調べましょう

00:46:25.686 --> 00:46:27.087 align:start position:38% line:-1
コードを見ます

00:46:37.131 --> 00:46:41.969 align:start position:23% line:-2
addNewSprite関数で
時間がかかっていますね

00:46:42.603 --> 00:46:45.005 align:start position:27% line:-1
この関数は高くつくようです

00:46:46.140 --> 00:46:50.477 align:start position:30% line:-2
このワークロードは
想定どおりでしょうか？

00:46:51.245 --> 00:46:54.147 align:start position:25% line:-1
この場合 そうとは言えません

00:46:54.348 --> 00:46:59.219 align:start position:30% line:-2
スプライトを加えるのは
数秒に一度のはずです

00:46:59.453 --> 00:47:03.223 align:start position:30% line:-2
なぜこんなにも
CPUを食うのでしょう

00:46:59.453 --> 00:47:03.223 align:start position:30% line:-2
なぜこんなにも
CPUを食うのでしょう

00:47:04.258 --> 00:47:06.994 align:start position:23% line:-1
呼び出し元のバックトレースは？

00:47:08.162 --> 00:47:11.431 align:start position:14% line:-1
setNextUpdateTimerです

00:47:12.166 --> 00:47:13.734 align:start position:34% line:-1
この関数の動作は？

00:47:18.005 --> 00:47:22.476 align:start position:12% line:-2
setNextUpdateTimerの中に
addNewSpriteがあります

00:47:23.644 --> 00:47:28.415 align:start position:30% line:-2
この関数を次に呼び出す
タイミングを設定すべく

00:47:28.515 --> 00:47:31.685 align:start position:14% line:-1
updateTimerが生成されています

00:47:33.420 --> 00:47:36.423 align:start position:12% line:-2
このタイマーはnowと
nextUpdateIntervalの間で

00:47:36.857 --> 00:47:38.625 align:start position:41% line:-1
作動します

00:47:40.427 --> 00:47:45.065 align:start position:16% line:-2
nextUpdateIntervalは
ゼロまでデクリメントされ

00:47:46.133 --> 00:47:50.604 align:start position:30% line:-2
こちらのコードに従って
再び初期化されます

00:47:52.539 --> 00:47:54.441 align:start position:36% line:-1
問題は ここです

00:47:55.509 --> 00:47:57.978 align:start position:20% line:-2
timeIntervalSince
lastUpdateDateは

00:47:58.145 --> 00:48:00.414 align:start position:32% line:-1
負の値かも知れません

00:47:58.145 --> 00:48:00.414 align:start position:32% line:-1
負の値かも知れません

00:48:01.315 --> 00:48:03.350 align:start position:32% line:-1
ユーザがシステムを―

00:48:03.450 --> 00:48:06.553 align:start position:23% line:-1
だまそうとする時に起きがちです

00:48:07.087 --> 00:48:11.358 align:start position:32% line:-2
ゲーム中 時間を
リセットしたい場合や

00:48:11.759 --> 00:48:14.528 align:start position:27% line:-1
ゲームオーバーを避けるべく

00:48:14.628 --> 00:48:18.632 align:start position:25% line:-2
システム設定で
時計を24時間前に戻すのです

00:48:19.600 --> 00:48:23.904 align:start position:11% line:-2
するとnextUpdateIntervalは
負の値になります

00:48:24.538 --> 00:48:29.009 align:start position:30% line:-2
タイマーは過去の時間に
設定されると

00:48:29.343 --> 00:48:34.047 align:start position:29% line:-2
すぐに作動し
自身を何度も呼び出します

00:48:34.948 --> 00:48:37.584 align:start position:30% line:-1
つまりは無限ループです

00:48:39.586 --> 00:48:41.922 align:start position:32% line:-1
幸い 修復は簡単です

00:48:42.656 --> 00:48:44.725 align:start position:30% line:-1
この関数を書き換えます

00:48:45.792 --> 00:48:48.195 align:start position:23% line:-1
ゼロもしくはゼロ未満に変えれば

00:48:48.295 --> 00:48:52.966 align:start position:7% line:-2
nextUpdateIntervalが負の値でも
ループから抜け出せます

00:48:54.401 --> 00:48:58.238 align:start position:34% line:-2
エネルギーの問題を
よく表した例です

00:48:58.338 --> 00:49:03.344 align:start position:25% line:-2
通常のテストだけでは
極めて把握しにくい問題ですが

00:48:58.338 --> 00:49:03.344 align:start position:25% line:-2
通常のテストだけでは
極めて把握しにくい問題ですが

00:49:03.744 --> 00:49:07.247 align:start position:29% line:-2
フィールドからのデータで
浮き彫りになります

00:49:08.448 --> 00:49:13.487 align:start position:12% line:-2
それこそがEnergy Logと
Energy Organizerの実力です

00:49:14.521 --> 00:49:17.458 align:start position:25% line:-1
このデモのポイントは３つです

00:49:18.625 --> 00:49:23.497 align:start position:9% line:-2
まずEnergy Organizerで 重大な
エネルギーの問題を発見すること

00:49:24.264 --> 00:49:28.202 align:start position:30% line:-2
どれほど重大か
どのくらい起きているか

00:49:28.469 --> 00:49:31.905 align:start position:25% line:-1
デバイスについても確認します

00:49:33.073 --> 00:49:37.844 align:start position:25% line:-2
次に 重み付きコールグラフで
問題箇所を見つけること

00:49:38.479 --> 00:49:41.615 align:start position:34% line:-2
異常なサンプル数に
注意してください

00:49:42.549 --> 00:49:45.085 align:start position:25% line:-1
想定外のワークロードにもです

00:49:46.220 --> 00:49:50.991 align:start position:14% line:-2
最後に Open in Projectで
コードに直接ジャンプし

00:49:51.091 --> 00:49:55.996 align:start position:21% line:-1
必要に応じて修正を加えることです

00:49:58.332 --> 00:50:00.067 align:start position:41% line:-1
総括します

00:49:58.332 --> 00:50:00.067 align:start position:41% line:-1
総括します

00:50:03.103 --> 00:50:07.774 align:start position:25% line:-2
まずエネルギーを
最優先の課題として捉えること

00:50:07.875 --> 00:50:12.112 align:start position:29% line:-2
デザインや開発 テスト
あらゆる側面においてです

00:50:12.913 --> 00:50:15.549 align:start position:34% line:-1
次に ツールの活用

00:50:16.383 --> 00:50:18.719 align:start position:25% line:-2
エネルギーゲージや
Instrumentsによる

00:50:18.819 --> 00:50:20.187 align:start position:32% line:-1
プロファイリングです

00:50:21.088 --> 00:50:26.093 align:start position:16% line:-2
最後に 新しいXcode Energy
Organizerを使いこなし

00:50:26.193 --> 00:50:29.897 align:start position:29% line:-2
エネルギーの問題の解決に
役立ててください

00:50:31.531 --> 00:50:34.835 align:start position:29% line:-2
詳しい情報は
こちらのURLからどうぞ

00:50:35.536 --> 00:50:40.741 align:start position:25% line:-2
気になる方は
お気軽にラボへお越しください

00:50:41.341 --> 00:50:42.743 align:start position:30% line:-1
ありがとうございました

00:50:42.843 --> 00:50:47.114 align:start position:43% line:-1
(拍手)
