WEBVTT

00:00:07.074 --> 00:00:15.649 align:start position:43% line:-1
(音楽)

00:00:19.720 --> 00:00:22.189 align:start position:27% line:-1
どうも　おはようございます

00:00:22.789 --> 00:00:24.124 align:start position:43% line:-1
ようこそ

00:00:24.224 --> 00:00:26.393 align:start position:43% line:-1
(拍手)

00:00:26.493 --> 00:00:29.496 align:start position:27% line:-2
私の後に
優秀な仲間たちも登場します

00:00:29.596 --> 00:00:32.633 align:start position:27% line:-1
面白い内容を用意しています

00:00:34.334 --> 00:00:37.571 align:start position:32% line:-1
まず言わせてください

00:00:37.671 --> 00:00:40.607 align:start position:30% line:-2
クラッシュするコードを
書かない人には―

00:00:41.041 --> 00:00:43.110 align:start position:29% line:-1
このセッションは不要です

00:00:43.877 --> 00:00:48.348 align:start position:29% line:-2
これからする話は
ミスをする人たち向けです

00:00:49.449 --> 00:00:53.287 align:start position:30% line:-2
今日はユーザに影響する
クラッシュを―

00:00:53.387 --> 00:00:57.991 align:start position:30% line:-2
解決するためのツールや
技術の話をします

00:00:58.759 --> 00:01:01.995 align:start position:29% line:-2
まず私から
クラッシュの基本的な話を

00:00:58.759 --> 00:01:01.995 align:start position:29% line:-2
まず私から
クラッシュの基本的な話を

00:01:02.229 --> 00:01:04.831 align:start position:29% line:-1
原因や症状をお話しします

00:01:05.766 --> 00:01:11.438 align:start position:23% line:-2
それからクラッシュログを
実際に調べるツールを紹介します

00:01:12.472 --> 00:01:13.841 align:start position:30% line:-1
その後 グレッグから―

00:01:13.941 --> 00:01:18.345 align:start position:29% line:-2
クラッシュログの内容の
読み方を詳しく説明します

00:01:18.912 --> 00:01:24.351 align:start position:27% line:-2
そして厄介なメモリ問題の
読み方を掘り下げていきます

00:01:25.085 --> 00:01:28.255 align:start position:34% line:-2
その後 クバが
スレッド競合の話を

00:01:28.355 --> 00:01:32.226 align:start position:29% line:-2
これが原因のクラッシュは
再現が困難です

00:01:33.794 --> 00:01:36.196 align:start position:34% line:-1
まず定義しましょう

00:01:36.496 --> 00:01:37.731 align:start position:36% line:-1
クラッシュとは？

00:01:38.765 --> 00:01:42.336 align:start position:30% line:-2
許可されていない動作を
しようとして―

00:01:42.603 --> 00:01:45.339 align:start position:23% line:-1
突然 Appが停止することです

00:01:46.173 --> 00:01:47.508 align:start position:30% line:-1
許可されないこととは？

00:01:47.741 --> 00:01:53.480 align:start position:23% line:-2
例えば ゼロで割るなど
CPUが実行できないコードです

00:01:54.047 --> 00:01:57.851 align:start position:27% line:-1
あるいはOSのポリシーです

00:01:59.052 --> 00:02:04.658 align:start position:27% line:-2
Appの起動が遅すぎたり
メモリを使いすぎたりすると

00:01:59.052 --> 00:02:04.658 align:start position:27% line:-2
Appの起動が遅すぎたり
メモリを使いすぎたりすると

00:02:04.758 --> 00:02:06.326 align:start position:32% line:-1
Appを停止させます

00:02:08.095 --> 00:02:12.633 align:start position:29% line:-2
プログラミング言語が
エラーを避けようとして―

00:02:12.733 --> 00:02:14.334 align:start position:25% line:-1
クラッシュする場合もあります

00:02:14.434 --> 00:02:19.840 align:start position:12% line:-2
SwiftやNSArrayは配列の範囲から
外れるとプロセスを停止します

00:02:20.941 --> 00:02:24.678 align:start position:21% line:-2
エラーを避けようとした
デベロッパが原因の場合もあります

00:02:24.778 --> 00:02:28.916 align:start position:21% line:-2
パラメータが“nil”ではないと
アサートするAPIがあるとか

00:02:29.082 --> 00:02:30.484 align:start position:38% line:-1
それは悪くない

00:02:32.352 --> 00:02:34.621 align:start position:34% line:-1
これを見たことは？

00:02:34.922 --> 00:02:40.727 align:start position:21% line:-2
これはAppに接続した
Xcode内のデバッガの画像です

00:02:40.894 --> 00:02:44.264 align:start position:29% line:-2
Appが停止される直前の
状態です

00:02:45.299 --> 00:02:47.968 align:start position:32% line:-2
左のバックトレースを
詳しく見ましょう

00:02:48.936 --> 00:02:53.307 align:start position:25% line:-2
ここでOSによって
Appがスタートされています

00:02:54.141 --> 00:02:57.377 align:start position:29% line:-1
メイン関数が呼び出され―

00:02:57.477 --> 00:03:00.180 align:start position:25% line:-1
関数が他の関数を呼び出します

00:02:57.477 --> 00:03:00.180 align:start position:25% line:-1
関数が他の関数を呼び出します

00:03:00.547 --> 00:03:06.753 align:start position:23% line:-2
やがてクラッシュしか
選択肢がないところまで進みます

00:03:06.854 --> 00:03:08.455 align:start position:29% line:-1
何か問題があったようです

00:03:08.989 --> 00:03:13.227 align:start position:23% line:-2
デバッガがクラッシュ寸前という
信号を受け―

00:03:13.327 --> 00:03:14.628 align:start position:32% line:-1
Appが停止されます

00:03:16.330 --> 00:03:21.335 align:start position:27% line:-2
デバッガに接続されていない
場合もあるでしょう

00:03:21.935 --> 00:03:24.004 align:start position:32% line:-1
デバッガがない場合―

00:03:24.104 --> 00:03:28.175 align:start position:21% line:-2
OSがプレーンテキストで
バックトレースをキャプチャします

00:03:28.275 --> 00:03:31.445 align:start position:27% line:-2
そしてクラッシュログとして
ディスクに保存します

00:03:32.746 --> 00:03:36.016 align:start position:29% line:-2
Appのリリースビルドが
クラッシュした場合―

00:03:36.116 --> 00:03:38.318 align:start position:27% line:-1
ログはこんなに整ってません

00:03:38.418 --> 00:03:42.155 align:start position:27% line:-2
バイナリの名前とアドレスが
書き出されます

00:03:42.256 --> 00:03:45.025 align:start position:27% line:-2
これがシンボル化されてない
クラッシュログです

00:03:46.059 --> 00:03:50.330 align:start position:25% line:-2
Xcodeがクラッシュログを
シンボル化してくれるので―

00:03:50.430 --> 00:03:54.368 align:start position:32% line:-2
関数名やファイル名や
行番号が表示されます

00:03:56.904 --> 00:04:00.674 align:start position:23% line:-2
クラッシュログに
アクセスする方法は複数あります

00:03:56.904 --> 00:04:00.674 align:start position:23% line:-2
クラッシュログに
アクセスする方法は複数あります

00:04:00.941 --> 00:04:05.979 align:start position:25% line:-2
まずはTestFlightの
ベータ版テスターや―

00:04:06.079 --> 00:04:08.715 align:start position:30% line:-2
App Storeの
カスタマーを通じてです

00:04:08.815 --> 00:04:14.354 align:start position:7% line:-2
XcodeのCrashes Organizerを
使ってダウンロードできます

00:04:14.454 --> 00:04:15.622 align:start position:41% line:-1
こちらです

00:04:15.822 --> 00:04:17.357 align:start position:27% line:-1
きれいなダークモードですね

00:04:18.225 --> 00:04:20.194 align:start position:29% line:-1
UIのツアーをしましょう

00:04:20.928 --> 00:04:25.933 align:start position:7% line:-2
左側にTestFlightとApp Storeで
配信されているAppが見えます

00:04:26.133 --> 00:04:30.737 align:start position:7% line:-2
watchOSやApp Extensionなどの
プラットフォームをサポートします

00:04:31.939 --> 00:04:36.810 align:start position:21% line:-2
右には各クラッシュポイントで
影響を受けるデバイスが示されます

00:04:37.878 --> 00:04:42.149 align:start position:29% line:-2
そして似た問題で
クラッシュログを分類し―

00:04:42.249 --> 00:04:46.019 align:start position:23% line:-2
ソースリストで
デバイスごとにランク分けします

00:04:46.920 --> 00:04:50.691 align:start position:25% line:-2
そして各ログのサンプリングが
下で見られます

00:04:51.725 --> 00:04:53.527 align:start position:32% line:-1
このボタンを押すと―

00:04:53.794 --> 00:04:58.866 align:start position:29% line:-2
デバッグナビゲータで
クラッシュログが開けます

00:04:58.966 --> 00:05:02.269 align:start position:32% line:-1
後でお見せしましょう

00:04:58.966 --> 00:05:02.269 align:start position:32% line:-1
後でお見せしましょう

00:05:03.237 --> 00:05:07.307 align:start position:21% line:-2
詳細ビューでは
シンボル化されたバックトレースと

00:05:07.441 --> 00:05:08.942 align:start position:23% line:-1
クラッシュポイントが示されます

00:05:09.743 --> 00:05:12.613 align:start position:29% line:-1
では一度 見てみましょう

00:05:13.380 --> 00:05:15.816 align:start position:29% line:-1
Xcodeを開いています

00:05:16.517 --> 00:05:19.453 align:start position:18% line:-1
Organizerウインドウを開いて

00:05:20.821 --> 00:05:22.990 align:start position:23% line:-1
Crashesタブを選択します

00:05:23.090 --> 00:05:24.358 align:start position:34% line:-1
２番目のタブですね

00:05:24.458 --> 00:05:28.495 align:start position:7% line:-2
クバと作った
“ChocolateChip”Appを選択します

00:05:28.829 --> 00:05:32.132 align:start position:21% line:-2
このビルドを
TestFlightに上げました

00:05:32.232 --> 00:05:34.935 align:start position:29% line:-1
今 ビルド５を見ています

00:05:35.035 --> 00:05:38.438 align:start position:29% line:-2
テスターから
クラッシュの報告があり―

00:05:38.539 --> 00:05:41.408 align:start position:32% line:-1
いくつか対処しました

00:05:41.608 --> 00:05:44.845 align:start position:25% line:-1
未対応のものを解決しましょう

00:05:46.146 --> 00:05:48.916 align:start position:21% line:-1
242のデバイスに影響しています

00:05:49.016 --> 00:05:54.388 align:start position:23% line:-2
クラッシュ時のバックトレースと
クラッシュポイントが見られます

00:05:54.988 --> 00:05:56.590 align:start position:30% line:-1
まだ状況は分かりません

00:05:56.690 --> 00:06:02.162 align:start position:27% line:-2
でもクラッシュログを開けば
何が起きたか分かるでしょう

00:05:56.690 --> 00:06:02.162 align:start position:27% line:-2
でもクラッシュログを開けば
何が起きたか分かるでしょう

00:06:02.262 --> 00:06:04.765 align:start position:7% line:-2
“Open in Project...”ボタンを
クリック

00:06:05.032 --> 00:06:08.068 align:start position:27% line:-2
Appのビルド５に適合する
プロジェクトを選択

00:06:08.669 --> 00:06:11.205 align:start position:29% line:-1
これはクラッシュログを―

00:06:11.305 --> 00:06:16.143 align:start position:27% line:-2
デバッグナビゲータで
再現のように開いたものです

00:06:16.844 --> 00:06:19.546 align:start position:27% line:-1
このエラーで停止しています

00:06:20.480 --> 00:06:24.284 align:start position:29% line:-1
妥当なエラーかを考えます

00:06:24.384 --> 00:06:27.321 align:start position:27% line:-1
不要なクラッシュは避けたい

00:06:28.255 --> 00:06:30.858 align:start position:30% line:-1
これはIntにおける―

00:06:30.958 --> 00:06:34.595 align:start position:25% line:-1
enumのイニシャライザです

00:06:35.162 --> 00:06:37.764 align:start position:20% line:-1
enumが“０”か“１”以外なら―

00:06:37.865 --> 00:06:40.100 align:start position:27% line:-1
フェイタルエラーになります

00:06:40.200 --> 00:06:41.468 align:start position:39% line:-1
妥当でしょう

00:06:41.568 --> 00:06:45.472 align:start position:30% line:-2
プログラマの誤用でしか
クラッシュしません

00:06:45.772 --> 00:06:51.812 align:start position:25% line:-2
イニシャライザの呼び出し元を
コールスタックから見てみると

00:06:52.179 --> 00:06:54.781 align:start position:30% line:-2
Table Viewの
デリゲートメソッドです

00:06:54.882 --> 00:06:59.186 align:start position:25% line:-2
指定のセクション番号での
ヘッダのタイトルを求めてます

00:06:59.553 --> 00:07:02.322 align:start position:21% line:-2
セクション番号が
“０”か“１”ではないのでしょう

00:06:59.553 --> 00:07:02.322 align:start position:21% line:-2
セクション番号が
“０”か“１”ではないのでしょう

00:07:02.756 --> 00:07:05.225 align:start position:29% line:-1
かなり状況が分かりました

00:07:05.325 --> 00:07:09.062 align:start position:27% line:-2
Appで再現して
さらに詳しく見てみましょう

00:07:09.163 --> 00:07:10.531 align:start position:34% line:-1
“再生”を押します

00:07:11.732 --> 00:07:15.502 align:start position:9% line:-1
ChocolateChipはレシピのAppです

00:07:15.802 --> 00:07:18.872 align:start position:27% line:-2
ホイップクリームのレシピで
テストすると―

00:07:19.173 --> 00:07:20.174 align:start position:38% line:-1
問題ありません

00:07:20.274 --> 00:07:22.743 align:start position:32% line:-2
“材料”と“手順”が
示されています

00:07:22.843 --> 00:07:24.144 align:start position:25% line:-1
ここがレシピのセクションです

00:07:24.244 --> 00:07:28.182 align:start position:27% line:-2
セクションは材料が“０”で
ステップが“１”です

00:07:28.582 --> 00:07:30.818 align:start position:32% line:-1
他のレシピを選ぶと―

00:07:31.385 --> 00:07:32.686 align:start position:34% line:-1
クラッシュしました

00:07:32.786 --> 00:07:36.590 align:start position:25% line:-1
同じフェイタルエラーで止まり

00:07:36.690 --> 00:07:40.527 align:start position:25% line:-2
バックトレースも
先ほどのログとよく似ています

00:07:40.627 --> 00:07:43.297 align:start position:30% line:-1
同じ問題だと思われます

00:07:43.397 --> 00:07:46.366 align:start position:29% line:-1
クラッシュログを削除し―

00:07:46.633 --> 00:07:49.503 align:start position:23% line:-1
デバッグセッションを見ましょう

00:07:50.103 --> 00:07:55.943 align:start position:21% line:-2
このフェイタルエラーの
セクション番号は“８”とあります

00:07:56.043 --> 00:07:59.012 align:start position:29% line:-2
“０”か“１”以外だから
クラッシュした

00:07:59.546 --> 00:08:02.049 align:start position:25% line:-1
どうやら私が悪かったようです

00:07:59.546 --> 00:08:02.049 align:start position:25% line:-1
どうやら私が悪かったようです

00:08:02.583 --> 00:08:04.751 align:start position:14% line:-1
numberOfSectionsという―

00:08:04.885 --> 00:08:08.622 align:start position:29% line:-2
デリゲートメソッドを
クラスに実装していました

00:08:08.789 --> 00:08:12.826 align:start position:25% line:-1
それがヘッダの数を求めており

00:08:12.926 --> 00:08:15.562 align:start position:23% line:-1
私は“材料”の数を返しています

00:08:15.662 --> 00:08:17.798 align:start position:30% line:-1
その数が“８”なのです

00:08:18.398 --> 00:08:21.001 align:start position:32% line:-1
いい解決法があります

00:08:21.101 --> 00:08:25.873 align:start position:23% line:-2
“レシピ”セクションenumの
ケースの数を返せばいい

00:08:25.973 --> 00:08:28.041 align:start position:29% line:-1
Swift 4.2では―

00:08:28.141 --> 00:08:33.113 align:start position:23% line:-2
オープンソースコミュニティから
新しい機能が追加されました

00:08:33.212 --> 00:08:35.549 align:start position:11% line:-1
CaseIterableというプロトコルです

00:08:35.649 --> 00:08:39.453 align:start position:16% line:-2
“レシピ”セクションを
CaseIterableに準拠させると

00:08:40.287 --> 00:08:43.724 align:start position:32% line:-2
“レシピ”セクション
enumにある―

00:08:43.823 --> 00:08:47.427 align:start position:23% line:-1
ケースの数を返すことができます

00:08:47.528 --> 00:08:48.762 align:start position:39% line:-1
そうすれば―

00:08:49.496 --> 00:08:53.667 align:start position:23% line:-1
正確なセクションの数を返せます

00:08:53.767 --> 00:08:55.435 align:start position:32% line:-1
これでうまくいきます

00:08:56.970 --> 00:09:00.674 align:start position:23% line:-1
ではレシピを確認してみましょう

00:08:56.970 --> 00:09:00.674 align:start position:23% line:-1
ではレシピを確認してみましょう

00:09:00.774 --> 00:09:04.378 align:start position:30% line:-2
クラッシュせず
材料と手順が示されます

00:09:04.478 --> 00:09:07.514 align:start position:25% line:-1
よかった　これで私も満足です

00:09:08.182 --> 00:09:12.820 align:start position:27% line:-2
Organizerに戻って
この問題を解決済みとし―

00:09:12.920 --> 00:09:16.023 align:start position:25% line:-1
クッキーを焼く作業に戻れます

00:09:17.157 --> 00:09:22.296 align:start position:43% line:-1
(拍手)

00:09:23.096 --> 00:09:29.770 align:start position:12% line:-2
Crashes Organizerを使って
TestFlightからログをダウンロード

00:09:30.037 --> 00:09:33.440 align:start position:34% line:-2
ソースコードを開き
解決する方法でした

00:09:34.441 --> 00:09:36.443 align:start position:27% line:-1
次に進めるには何が必要か？

00:09:36.810 --> 00:09:38.812 align:start position:34% line:-1
とてもシンプルです

00:09:39.146 --> 00:09:42.850 align:start position:23% line:-2
カスタマーがサードパーティとの
シェアにオプトインすれば

00:09:42.950 --> 00:09:45.152 align:start position:32% line:-2
ログが自動的に
アップロードされます

00:09:46.253 --> 00:09:49.590 align:start position:21% line:-2
Apple IDで Xcodeに
サインインすればいいのです

00:09:51.124 --> 00:09:52.292 align:start position:34% line:-1
アップロードでは―

00:09:52.392 --> 00:09:56.830 align:start position:23% line:-2
ログがシンボル化されるように
シンボルも含むようにしましょう

00:09:58.165 --> 00:10:02.336 align:start position:20% line:-2
あとはOrganizerで
Crashesタブを開き対処します

00:09:58.165 --> 00:10:02.336 align:start position:20% line:-2
あとはOrganizerで
Crashesタブを開き対処します

00:10:05.005 --> 00:10:08.609 align:start position:27% line:-2
以上がOrganizerで
クラッシュを見る方法です

00:10:09.243 --> 00:10:12.713 align:start position:20% line:-2
TestFlightや
App Storeで配信しない場合

00:10:12.813 --> 00:10:14.715 align:start position:32% line:-1
他の選択肢があります

00:10:15.182 --> 00:10:17.584 align:start position:25% line:-1
Devicesウインドウです

00:10:18.452 --> 00:10:22.222 align:start position:9% line:-2
デバイスをつないでいれば
“View Device Logs”ボタンから

00:10:22.322 --> 00:10:25.092 align:start position:27% line:-1
デバイスのログが見られます

00:10:25.192 --> 00:10:29.263 align:start position:21% line:-2
Macの情報を使って
これらのログがシンボル化されます

00:10:31.064 --> 00:10:36.169 align:start position:16% line:-2
XcodeやXcode Serverや
ビルドでのテストでは

00:10:36.770 --> 00:10:43.911 align:start position:23% line:-2
テスト中に書き出されたAppの
クラッシュログの全結果が出ます

00:10:44.011 --> 00:10:47.681 align:start position:30% line:-2
これらのログも
シンボル化されています

00:10:49.349 --> 00:10:52.886 align:start position:27% line:-2
コンソールAppを使えば
Macやシミュレータから―

00:10:53.353 --> 00:10:54.822 align:start position:27% line:-1
クラッシュログを見られます

00:10:55.789 --> 00:10:58.425 align:start position:27% line:-1
デバイスでは“設定”から―

00:10:58.525 --> 00:11:00.727 align:start position:29% line:-2
“プライバシー”“解析”
“解析データ”と行けば―

00:10:58.525 --> 00:11:00.727 align:start position:29% line:-2
“プライバシー”“解析”
“解析データ”と行けば―

00:11:00.828 --> 00:11:03.030 align:start position:29% line:-1
すべてのログを見られます

00:11:03.130 --> 00:11:06.400 align:start position:27% line:-1
ユーザもログを共有できます

00:11:08.635 --> 00:11:12.706 align:start position:29% line:-2
シンボル化を
確実に機能させるための―

00:11:12.806 --> 00:11:15.309 align:start position:21% line:-1
ベストプラクティスが３つあります

00:11:16.043 --> 00:11:17.110 align:start position:45% line:-1
１つ目

00:11:17.911 --> 00:11:20.180 align:start position:18% line:-2
Crashes Organizerを
使う場合―

00:11:20.280 --> 00:11:21.982 align:start position:20% line:-1
Appでシンボルをアップロードする

00:11:22.082 --> 00:11:23.283 align:start position:32% line:-1
これがデフォルトです

00:11:23.383 --> 00:11:27.487 align:start position:25% line:-2
サーバ側で
シンボル化を保証するためです

00:11:28.655 --> 00:11:29.857 align:start position:45% line:-1
２つ目

00:11:29.957 --> 00:11:32.926 align:start position:25% line:-1
Appのアーカイブを保存する

00:11:33.026 --> 00:11:36.163 align:start position:23% line:-2
アーカイブにデバッグシンボルの
コピーが含まれます

00:11:36.263 --> 00:11:37.464 align:start position:39% line:-1
dSYMです

00:11:37.564 --> 00:11:43.770 align:start position:14% line:-2
XcodeはSpotlightで自動的に
dSYMを見つけシンボル化します

00:11:45.372 --> 00:11:48.942 align:start position:25% line:-2
BitcodeのあるAppを
アップロードするなら―

00:11:49.276 --> 00:11:51.078 align:start position:14% line:-1
Archives Organizerの―

00:11:51.178 --> 00:11:53.180 align:start position:4% line:-2
Download Debug Symbolsボタンを
使いましょう

00:11:53.280 --> 00:11:57.451 align:start position:23% line:-2
ストア側の
dSYMをダウンロードできます

00:11:58.785 --> 00:11:59.920 align:start position:45% line:-1
以上―

00:12:00.354 --> 00:12:04.925 align:start position:27% line:-2
実際にクラッシュログを
調べるツールを紹介しました

00:12:05.325 --> 00:12:09.229 align:start position:23% line:-2
続いて より深く
クラッシュログを読むガイドです

00:12:09.329 --> 00:12:12.466 align:start position:32% line:-2
グレッグ･パーカーを
拍手でお迎えください

00:12:12.566 --> 00:12:17.905 align:start position:43% line:-1
(拍手)

00:12:18.005 --> 00:12:19.139 align:start position:34% line:-1
ありがとう　クリス

00:12:19.239 --> 00:12:23.510 align:start position:21% line:-2
ここまでは
Xcodeでクラッシュを見つけて

00:12:23.610 --> 00:12:27.548 align:start position:30% line:-2
デバッガで調べる方法を
紹介しました

00:12:28.081 --> 00:12:29.917 align:start position:29% line:-1
でもクラッシュログには―

00:12:30.017 --> 00:12:35.022 align:start position:27% line:-2
スタックトレース以外に
多くの情報が含まれています

00:12:35.122 --> 00:12:40.661 align:start position:21% line:-2
問題を解決する上で
その情報が役立つことも多いのです

00:12:41.361 --> 00:12:44.731 align:start position:25% line:-1
ではログの全文をどう得るか？

00:12:44.965 --> 00:12:46.833 align:start position:14% line:-1
これはXcode Organizerです

00:12:46.934 --> 00:12:51.471 align:start position:12% line:-2
コンテキストメニューに
“Show in Finder”があります

00:12:51.872 --> 00:12:54.374 align:start position:25% line:-1
テキストファイルが出るので―

00:12:54.474 --> 00:12:58.545 align:start position:21% line:-2
コンソールAppか
好みのテキストエディタで開けます

00:12:58.645 --> 00:13:00.414 align:start position:38% line:-1
こんな感じです

00:12:58.645 --> 00:13:00.414 align:start position:38% line:-1
こんな感じです

00:13:00.914 --> 00:13:03.517 align:start position:29% line:-1
では中身を見てみましょう

00:13:03.784 --> 00:13:07.554 align:start position:30% line:-1
トップに概要があります

00:13:07.654 --> 00:13:13.427 align:start position:27% line:-2
Appの名前 バージョン
使われていたOSバージョン

00:13:13.527 --> 00:13:15.829 align:start position:29% line:-1
クラッシュの日時などです

00:13:16.630 --> 00:13:19.600 align:start position:27% line:-2
その下に
クラッシュの理由があります

00:13:19.700 --> 00:13:26.306 align:start position:25% line:-2
OSがプロセスを停止するため
送った具体的なシグナルです

00:13:27.341 --> 00:13:30.677 align:start position:27% line:-1
それからログ情報もあります

00:13:30.777 --> 00:13:33.914 align:start position:23% line:-1
App固有の情報セクションです

00:13:34.214 --> 00:13:37.851 align:start position:27% line:-1
ここにはコンソールログや―

00:13:37.951 --> 00:13:42.322 align:start position:27% line:-2
未処理の例外の
バックトレースが含まれます

00:13:42.856 --> 00:13:45.259 align:start position:30% line:-1
必ずあるものではなく―

00:13:45.359 --> 00:13:50.931 align:start position:21% line:-2
iOSデバイスではプライバシーの
都合上 隠されることが多い

00:13:51.098 --> 00:13:56.103 align:start position:25% line:-2
でもシミュレータでは
ここに役立つ情報も含まれます

00:13:57.571 --> 00:13:59.740 align:start position:25% line:-1
その下はスレッドスタックです

00:13:59.840 --> 00:14:04.278 align:start position:25% line:-2
クラッシュ時に動いていた
スレッドのバックトレースです

00:13:59.840 --> 00:14:04.278 align:start position:25% line:-2
クラッシュ時に動いていた
スレッドのバックトレースです

00:14:04.444 --> 00:14:07.114 align:start position:25% line:-1
１つがクラッシュスレッドで―

00:14:07.414 --> 00:14:12.486 align:start position:25% line:-2
その他に動いていたスレッドも
表示されます

00:14:13.820 --> 00:14:16.823 align:start position:27% line:-1
その下は低レベルの情報です

00:14:16.924 --> 00:14:20.861 align:start position:29% line:-2
クラッシュしたスレッドの
レジスタ状態と―

00:14:21.261 --> 00:14:24.865 align:start position:27% line:-2
ロードされた
バイナリイメージがあります

00:14:25.265 --> 00:14:29.903 align:start position:29% line:-2
これは実行可能なAppと
他のライブラリです

00:14:30.270 --> 00:14:33.474 align:start position:27% line:-2
Xcodeは
これをシンボル化に使います

00:14:33.574 --> 00:14:40.080 align:start position:27% line:-2
シンボルやファイルや
行番号の情報を得るためです

00:14:41.081 --> 00:14:43.383 align:start position:32% line:-2
これがクラッシュログ
ファイルの中身です

00:14:43.984 --> 00:14:47.654 align:start position:27% line:-2
では どうデバッグするか？
読み方は？

00:14:48.422 --> 00:14:51.058 align:start position:27% line:-1
まずはクラッシュの理由から

00:14:51.158 --> 00:14:52.860 align:start position:38% line:-1
例外タイプです

00:14:53.093 --> 00:14:57.931 align:start position:11% line:-2
この場合は
EXC BAD INSTRUCTIONですね

00:14:58.031 --> 00:15:02.836 align:start position:18% line:-1
SIGILLは不正命令のシグナルです

00:14:58.031 --> 00:15:02.836 align:start position:18% line:-1
SIGILLは不正命令のシグナルです

00:15:03.270 --> 00:15:10.043 align:start position:25% line:-2
つまりCPUが 存在しないか
無効な命令を実行しようとして

00:15:10.143 --> 00:15:12.312 align:start position:27% line:-1
プロセスが止まったわけです

00:15:14.047 --> 00:15:17.584 align:start position:29% line:-2
クラッシュしたスレッドも
見られます

00:15:17.684 --> 00:15:20.420 align:start position:25% line:-1
クラッシュ時のコードは何か？

00:15:20.754 --> 00:15:25.492 align:start position:7% line:-2
Swiftランタイムに
fatalErrorMessage関数があります

00:15:25.859 --> 00:15:30.164 align:start position:14% line:-2
fatalErrorMessage関数が
何をするかは分かりません

00:15:30.898 --> 00:15:36.203 align:start position:23% line:-2
この場合 エラーメッセージは
App固有情報に含まれています

00:15:36.436 --> 00:15:41.108 align:start position:25% line:-2
プロセスが終了する際に
何が表示されたかが分かります

00:15:45.279 --> 00:15:48.248 align:start position:32% line:-2
スタックトレースを
詳しく見てみましょう

00:15:48.382 --> 00:15:51.285 align:start position:12% line:-1
fatalErrorMessage関数は―

00:15:51.585 --> 00:15:55.088 align:start position:21% line:-1
コード内の関数に呼び出されました

00:15:55.389 --> 00:16:00.727 align:start position:23% line:-2
“レシピ”というクラスの
image関数が呼び出されます

00:15:55.389 --> 00:16:00.727 align:start position:23% line:-2
“レシピ”というクラスの
image関数が呼び出されます

00:16:00.961 --> 00:16:05.799 align:start position:23% line:-2
その関数のエラーでフェイタル
エラーメッセージが呼び出された

00:16:07.000 --> 00:16:11.205 align:start position:27% line:-2
これはシンボル化されて
全デバッグ情報があるため―

00:16:11.305 --> 00:16:15.976 align:start position:27% line:-2
コード内にクラッシュの
ファイルと行番号があります

00:16:16.777 --> 00:16:18.412 align:start position:30% line:-1
その行を見てみましょう

00:16:18.579 --> 00:16:20.180 align:start position:30% line:-1
プロジェクトを開きます

00:16:20.280 --> 00:16:22.749 align:start position:12% line:-1
これは RecipeImage.swift

00:16:22.983 --> 00:16:26.053 align:start position:29% line:-2
26行目がクラッシュ時に
マークされた行です

00:16:26.653 --> 00:16:29.089 align:start position:27% line:-1
Swiftに慣れた方なら―

00:16:29.189 --> 00:16:33.193 align:start position:23% line:-2
この行が クラッシュの原因だと
見当がつくでしょう

00:16:33.894 --> 00:16:37.197 align:start position:23% line:-1
強制アンラップ演算子があります

00:16:37.731 --> 00:16:41.435 align:start position:16% line:-2
それから関数
UIImageコンストラクタがあります

00:16:41.535 --> 00:16:43.070 align:start position:30% line:-1
オプション値を返します

00:16:43.504 --> 00:16:45.472 align:start position:23% line:-1
オプション値が“nil”なら―

00:16:45.572 --> 00:16:49.576 align:start position:30% line:-2
強制アンラップ演算子が
プロセスを停止し

00:16:49.676 --> 00:16:52.746 align:start position:29% line:-2
クラッシュログを生成して
終了させます

00:16:53.747 --> 00:16:57.050 align:start position:25% line:-1
そしてApp固有の情報には―

00:16:57.151 --> 00:17:03.023 align:start position:21% line:-2
Swiftランタイムが表示した
エラーメッセージが含まれています

00:16:57.151 --> 00:17:03.023 align:start position:21% line:-2
Swiftランタイムが表示した
エラーメッセージが含まれています

00:17:03.190 --> 00:17:07.861 align:start position:25% line:-2
オプション値がアンラップ中
“nil”となったとあります

00:17:08.694 --> 00:17:09.695 align:start position:39% line:-1
いいことです

00:17:09.797 --> 00:17:12.733 align:start position:25% line:-1
コードと一致しているからです

00:17:12.833 --> 00:17:16.002 align:start position:23% line:-1
26行目に強制アンラップ演算子

00:17:16.170 --> 00:17:18.271 align:start position:34% line:-1
クラッシュログに―

00:17:18.372 --> 00:17:21.875 align:start position:21% line:-2
オプション値をアンラップしていた
というエラーメッセージがある

00:17:21.974 --> 00:17:25.913 align:start position:30% line:-2
クラッシュの原因として
つじつまが合っています

00:17:28.982 --> 00:17:33.687 align:start position:25% line:-2
強制アンラップのエラーは
コード内の前提条件 または―

00:17:33.787 --> 00:17:35.923 align:start position:32% line:-1
アサーションの例です

00:17:36.323 --> 00:17:38.058 align:start position:27% line:-1
前提条件やアサーションは―

00:17:38.158 --> 00:17:42.596 align:start position:25% line:-2
エラーが起きた際 プロセスを
止めるエラーチェックです

00:17:43.831 --> 00:17:48.368 align:start position:27% line:-2
今見た オプション値の
強制アンラップがその例です

00:17:48.602 --> 00:17:52.673 align:start position:18% line:-2
Swiftランタイムが オプションは
“nil”ではないとアサートし―

00:17:53.273 --> 00:17:54.808 align:start position:23% line:-1
“nil”ならクラッシュします

00:17:55.642 --> 00:17:59.213 align:start position:14% line:-2
Swift.Arrayの範囲外アクセスも
例の１つです

00:17:59.580 --> 00:18:03.550 align:start position:25% line:-2
配列にアクセスして
インデックスが範囲を超えると

00:17:59.580 --> 00:18:03.550 align:start position:25% line:-2
配列にアクセスして
インデックスが範囲を超えると

00:18:03.650 --> 00:18:09.256 align:start position:25% line:-2
Swiftランタイムは
前提条件を満たせず停止します

00:18:09.990 --> 00:18:13.594 align:start position:21% line:-2
Swiftの算術オーバーフローも
アサーションを含みます

00:18:13.760 --> 00:18:18.432 align:start position:25% line:-2
２つの数を足す時 結果が
整数型変数として大きすぎると

00:18:18.532 --> 00:18:21.502 align:start position:21% line:-1
前提条件からプロセスを停止します

00:18:22.836 --> 00:18:28.408 align:start position:23% line:-2
捕捉されない例外も
前提条件により よく発生します

00:18:28.742 --> 00:18:33.947 align:start position:21% line:-2
多くのエラーチェックで
満たされない前提条件が例外を投げ

00:18:34.181 --> 00:18:39.987 align:start position:25% line:-2
それが捕捉されない場合
クラッシュログを発生させます

00:18:40.854 --> 00:18:45.092 align:start position:23% line:-2
自分のコードに
前提条件やアサーションを書けば

00:18:45.192 --> 00:18:50.731 align:start position:21% line:-2
エラーが起きた際
クラッシュログを生成させられます

00:18:52.900 --> 00:18:55.202 align:start position:34% line:-1
また別の例として―

00:18:55.302 --> 00:19:00.440 align:start position:21% line:-2
OSが外から
プロセスを停止する場合があります

00:18:55.302 --> 00:19:00.440 align:start position:21% line:-2
OSが外から
プロセスを停止する場合があります

00:19:01.508 --> 00:19:06.079 align:start position:29% line:-2
タイムアウトなどの
監視イベントがその例です

00:19:06.180 --> 00:19:11.785 align:start position:25% line:-2
Appが何かをするのに時間が
かかりすぎると OSが検知し

00:19:12.019 --> 00:19:16.156 align:start position:27% line:-2
プロセスを停止し
クラッシュログを生成します

00:19:17.157 --> 00:19:22.062 align:start position:25% line:-2
環境条件も OSがプロセスを
停止する原因になります

00:19:22.196 --> 00:19:28.001 align:start position:18% line:-2
デバイスが過熱状態になると CPUを
使いすぎるプロセスを停止します

00:19:28.101 --> 00:19:34.074 align:start position:21% line:-2
メモリが不足してくると メモリを
多く使うプロセスを停止します

00:19:34.875 --> 00:19:37.578 align:start position:27% line:-1
無効なコード署名も一例です

00:19:37.711 --> 00:19:41.415 align:start position:25% line:-1
OSはコードに署名を求めます

00:19:41.515 --> 00:19:46.920 align:start position:21% line:-2
署名が無効であるか存在しない場合
プロセスを停止して

00:19:47.020 --> 00:19:49.556 align:start position:27% line:-1
クラッシュログを生成します

00:19:50.991 --> 00:19:55.662 align:start position:16% line:-2
OSによる停止は Xcodeの
Devicesウインドウで確認できます

00:19:55.762 --> 00:19:58.031 align:start position:21% line:-1
macOSのコンソールにも出ます

00:19:58.131 --> 00:20:01.468 align:start position:20% line:-2
Xcode Organizerには
必ずしも表示されないので

00:19:58.131 --> 00:20:01.468 align:start position:20% line:-2
Xcode Organizerには
必ずしも表示されないので

00:20:01.568 --> 00:20:03.203 align:start position:38% line:-1
ご注意ください

00:20:05.205 --> 00:20:07.941 align:start position:25% line:-2
Appleの
デベロッパドキュメントでは―

00:20:08.041 --> 00:20:13.814 align:start position:23% line:-2
ログの様々なシグネチャや構造が
技術注記に書かれています

00:20:13.914 --> 00:20:18.719 align:start position:29% line:-2
これらの例のように
その見た目や見分け方など

00:20:18.852 --> 00:20:22.122 align:start position:29% line:-1
より詳しい情報があります

00:20:23.290 --> 00:20:25.058 align:start position:34% line:-1
例を１つ見ましょう

00:20:25.392 --> 00:20:27.661 align:start position:25% line:-1
クラッシュログのファイルです

00:20:27.761 --> 00:20:32.466 align:start position:21% line:-2
読み解くには
クラッシュの理由から見ていきます

00:20:32.833 --> 00:20:39.139 align:start position:9% line:-2
この場合は 例外タイプが
“EXC CRASH (SIGKILL)”です

00:20:39.773 --> 00:20:42.543 align:start position:29% line:-2
SIGKILLシグナルが
よく使われるのは―

00:20:42.643 --> 00:20:45.646 align:start position:25% line:-1
OSがプロセスを止める時です

00:20:45.979 --> 00:20:47.881 align:start position:18% line:-1
OSがSIGKILLシグナルを送り―

00:20:47.981 --> 00:20:52.653 align:start position:21% line:-2
そのシグナルが
プロセスによって捕捉されないため

00:20:52.753 --> 00:20:55.255 align:start position:27% line:-1
プロセスが停止するわけです

00:20:56.690 --> 00:21:01.228 align:start position:25% line:-2
OSがシグナルを送った理由も
ログで見られます

00:20:56.690 --> 00:21:01.228 align:start position:25% line:-2
OSがシグナルを送った理由も
ログで見られます

00:21:01.395 --> 00:21:06.366 align:start position:23% line:-2
“8badf00d”のコードと
停止の理由が書かれています

00:21:06.500 --> 00:21:09.703 align:start position:29% line:-1
先ほど言った技術注記に―

00:21:09.803 --> 00:21:12.906 align:start position:18% line:-1
“8badf00d”の意味があります

00:21:13.106 --> 00:21:15.542 align:start position:34% line:-1
そしてテキストで―

00:21:15.642 --> 00:21:20.714 align:start position:27% line:-2
19.95秒の猶予時間を
使い切ったと書かれています

00:21:21.181 --> 00:21:25.686 align:start position:29% line:-2
この情報と
技術注記を合わせて見れば

00:21:25.786 --> 00:21:29.189 align:start position:29% line:-2
起動に時間が
かかりすぎたと分かります

00:21:29.323 --> 00:21:32.960 align:start position:29% line:-1
20秒の間に起動できず―

00:21:33.327 --> 00:21:35.596 align:start position:29% line:-1
OSがプロセスを停止した

00:21:36.663 --> 00:21:41.101 align:start position:27% line:-2
下に停止時の
クラッシュログが出ています

00:21:41.201 --> 00:21:44.938 align:start position:25% line:-2
これらのコードが
長くかかった原因かもしれない

00:21:45.038 --> 00:21:47.174 align:start position:30% line:-1
無限ループになったか―

00:21:47.274 --> 00:21:51.979 align:start position:21% line:-2
それとも
ネットワークのI/Oが長かったか

00:21:52.279 --> 00:21:55.249 align:start position:23% line:-1
あるいは このコードは無実で―

00:21:55.482 --> 00:22:00.854 align:start position:23% line:-2
もっと前のプロセスが遅いために
停止した可能性もあります

00:21:55.482 --> 00:22:00.854 align:start position:23% line:-2
もっと前のプロセスが遅いために
停止した可能性もあります

00:22:04.057 --> 00:22:07.161 align:start position:32% line:-2
起動のタイムアウトを
どう防ぐか？

00:22:07.327 --> 00:22:08.662 align:start position:34% line:-1
ぜひ防いでください

00:22:08.762 --> 00:22:14.835 align:start position:20% line:-2
AppleのApp Reviewで
よく見られる却下の理由です

00:22:16.036 --> 00:22:17.538 align:start position:39% line:-1
どう防ぐか？

00:22:17.638 --> 00:22:19.406 align:start position:32% line:-1
Appをテストします

00:22:19.640 --> 00:22:21.542 align:start position:34% line:-1
ただ問題があります

00:22:22.376 --> 00:22:24.812 align:start position:30% line:-1
タイムアウトの監視は―

00:22:24.912 --> 00:22:29.149 align:start position:27% line:-2
シミュレータやデバッガでは
動作しません

00:22:29.383 --> 00:22:34.588 align:start position:23% line:-2
つまりシミュレータやデバッガで
テストすればタイムアウトはない

00:22:35.289 --> 00:22:40.127 align:start position:27% line:-2
だからデバッガなしで
Appをテストしてください

00:22:40.294 --> 00:22:43.664 align:start position:23% line:-2
macOSのAppなら
Finderで起動してください

00:22:43.764 --> 00:22:47.234 align:start position:20% line:-2
iOSなら
TestFlightで実行するか―

00:22:47.334 --> 00:22:50.938 align:start position:27% line:-2
iOS Appランチャーで
起動してください

00:22:51.038 --> 00:22:57.344 align:start position:25% line:-2
デバッガ外で起動され
タイムアウトが有効になります

00:22:58.412 --> 00:23:02.683 align:start position:25% line:-2
テストは
本物のデバイスで行いましょう

00:22:58.412 --> 00:23:02.683 align:start position:25% line:-2
テストは
本物のデバイスで行いましょう

00:23:02.950 --> 00:23:06.587 align:start position:25% line:-1
より古いハードで試しましょう

00:23:06.687 --> 00:23:10.858 align:start position:25% line:-2
サポートしたい
最も古いハードでテストします

00:23:10.958 --> 00:23:17.764 align:start position:27% line:-2
新しいハードなら十分早く
起動できても 古いものは―

00:23:17.898 --> 00:23:21.034 align:start position:27% line:-1
時間がかかるかもしれません

00:23:24.104 --> 00:23:26.707 align:start position:21% line:-1
別のエラークラスの話をしましょう

00:23:26.807 --> 00:23:31.445 align:start position:23% line:-2
クラッシュログに
メモリエラーがどう現れるのか？

00:23:32.412 --> 00:23:34.147 align:start position:30% line:-1
メモリエラーとは例えば

00:23:34.248 --> 00:23:39.853 align:start position:25% line:-2
二重解放されたオブジェクトの
参照カウントをした場合や

00:23:40.020 --> 00:23:43.590 align:start position:21% line:-1
解放後のオブジェクトを使った場合

00:23:43.690 --> 00:23:45.792 align:start position:25% line:-1
バッファのオーバーフローとか

00:23:45.893 --> 00:23:47.861 align:start position:38% line:-1
バイト配列や―

00:23:47.961 --> 00:23:52.366 align:start position:27% line:-2
Ｃ配列に対して 範囲外の
アクセスをした場合などです

00:23:53.634 --> 00:23:55.802 align:start position:27% line:-1
クラッシュログを見ましょう

00:23:55.969 --> 00:23:59.139 align:start position:25% line:-1
これはメモリエラーのものです

00:23:59.807 --> 00:24:03.010 align:start position:27% line:-1
また例外タイプから始めます

00:23:59.807 --> 00:24:03.010 align:start position:27% line:-1
また例外タイプから始めます

00:24:03.377 --> 00:24:09.883 align:start position:0% line:-1
“EXC BAD ACCESS (SIGSEGV)”です

00:24:10.184 --> 00:24:13.520 align:start position:25% line:-1
メモリエラーによくある形です

00:24:13.654 --> 00:24:16.290 align:start position:14% line:-1
EXC BAD ACCESSの意味は２つ

00:24:16.390 --> 00:24:20.594 align:start position:30% line:-2
読み取り専用のメモリに
書き込んだか

00:24:20.794 --> 00:24:24.198 align:start position:34% line:-2
存在しないメモリを
読み込んだかです

00:24:24.298 --> 00:24:28.936 align:start position:14% line:-2
この２つの場合
EXC BAD ACCESSで停止します

00:24:29.770 --> 00:24:34.942 align:start position:25% line:-2
これはクラッシュ時に
アクセスしていたアドレスです

00:24:36.577 --> 00:24:38.278 align:start position:25% line:-1
スタックトレースも見ましょう

00:24:38.378 --> 00:24:41.648 align:start position:23% line:-2
この関数が
アクセスエラーを起こしています

00:24:41.815 --> 00:24:44.518 align:start position:16% line:-1
これはobjc release関数で―

00:24:44.618 --> 00:24:50.757 align:start position:7% line:-2
Objective-CとSwiftオブジェクトの
参照カウントの実行の一部です

00:24:50.858 --> 00:24:56.029 align:start position:29% line:-2
これもやはり
メモリエラーを匂わせます

00:24:57.397 --> 00:25:00.801 align:start position:11% line:-1
では objc releaseは何が原因か？

00:24:57.397 --> 00:25:00.801 align:start position:11% line:-1
では objc releaseは何が原因か？

00:25:00.901 --> 00:25:03.003 align:start position:25% line:-1
スタックトレースを見ましょう

00:25:03.170 --> 00:25:06.206 align:start position:21% line:-1
オブジェクトの破棄関数があります

00:25:06.373 --> 00:25:11.812 align:start position:14% line:-2
Objective-Cランタイムの関数で
オブジェクトを解放するものです

00:25:12.479 --> 00:25:17.084 align:start position:9% line:-2
破棄関数が
LoginViewControllerクラスで

00:25:17.184 --> 00:25:21.388 align:start position:14% line:-2
ivar destroyerという関数を
呼び出しました

00:25:21.788 --> 00:25:25.826 align:start position:20% line:-2
ivar destroyer関数は
Swiftコードの一部です

00:25:25.926 --> 00:25:30.497 align:start position:27% line:-2
オブジェクトのプロパティや
ivarストレージを―

00:25:30.597 --> 00:25:33.200 align:start position:34% line:-1
解放時に処分します

00:25:34.034 --> 00:25:37.805 align:start position:29% line:-2
ここから クラッシュの
原因の一部が見えてきます

00:25:37.905 --> 00:25:42.876 align:start position:9% line:-2
LoginViewControllerクラスの
オブジェクトを解放していました

00:25:43.544 --> 00:25:49.449 align:start position:18% line:-2
そのdeinitコードのクラスが
プロパティとivarを処分しようとし

00:25:49.550 --> 00:25:53.520 align:start position:29% line:-2
いずれかが解放される間に
クラッシュしています

00:25:54.521 --> 00:25:57.090 align:start position:27% line:-1
問題の詳細が少し見えました

00:25:57.257 --> 00:26:02.196 align:start position:21% line:-2
クラッシュログに
もっと状況が分かる情報はないか？

00:25:57.257 --> 00:26:02.196 align:start position:21% line:-2
クラッシュログに
もっと状況が分かる情報はないか？

00:26:03.464 --> 00:26:06.900 align:start position:27% line:-1
無効なアドレスを見ましょう

00:26:07.234 --> 00:26:13.574 align:start position:21% line:-2
問題のあるアドレス値が
役に立つ情報を含む場合があります

00:26:13.874 --> 00:26:19.980 align:start position:29% line:-2
この問題のあるアドレスは
解放後の使用に見えます

00:26:20.480 --> 00:26:23.584 align:start position:23% line:-1
主に経験から そうと分かります

00:26:23.684 --> 00:26:29.156 align:start position:21% line:-2
クラッシュログを読んでると
少しずつパターンが分かってきます

00:26:29.790 --> 00:26:31.959 align:start position:34% line:-1
このアドレス値は―

00:26:32.593 --> 00:26:38.098 align:start position:23% line:-2
mallocメモリアロケータの
アドレス範囲とよく似ています

00:26:38.198 --> 00:26:41.235 align:start position:25% line:-1
クラッシュログにもありました

00:26:41.902 --> 00:26:45.505 align:start position:27% line:-1
これがそのアドレス範囲です

00:26:45.606 --> 00:26:51.044 align:start position:21% line:-2
無効なアドレスは
mallocの範囲内のようですが

00:26:51.378 --> 00:26:53.146 align:start position:32% line:-1
４ビット移っています

00:26:53.247 --> 00:26:55.649 align:start position:30% line:-1
４ビット回転しています

00:26:55.816 --> 00:27:00.053 align:start position:25% line:-2
有効なmallocアドレスが
回転したと思われます

00:26:55.816 --> 00:27:00.053 align:start position:25% line:-2
有効なmallocアドレスが
回転したと思われます

00:27:01.388 --> 00:27:05.058 align:start position:23% line:-2
以上が メモリアロケータからの
ヒントです

00:27:05.159 --> 00:27:07.127 align:start position:34% line:-1
理由を見せましょう

00:27:07.494 --> 00:27:11.064 align:start position:27% line:-2
こちらは
有効だったオブジェクトです

00:27:11.498 --> 00:27:17.171 align:start position:25% line:-2
isaフィールドから始まり
isaがクラスを指しています

00:27:17.271 --> 00:27:22.743 align:start position:20% line:-2
Obcjective-Cや
Swiftのオブジェクトも同じです

00:27:23.076 --> 00:27:25.913 align:start position:12% line:-1
objc release関数は何をするか？

00:27:26.146 --> 00:27:28.482 align:start position:29% line:-1
isaフィールドを読み―

00:27:28.582 --> 00:27:34.254 align:start position:23% line:-2
isaフィールドを間接参照し
クラスオブジェクトを獲得します

00:27:35.122 --> 00:27:38.826 align:start position:23% line:-1
通常なら これでうまくいきます

00:27:39.326 --> 00:27:42.896 align:start position:21% line:-1
でもオブジェクトが解放済みなら？

00:27:44.298 --> 00:27:47.401 align:start position:29% line:-2
free関数が
削除したオブジェクトは―

00:27:48.402 --> 00:27:53.006 align:start position:27% line:-2
他の削除済みオブジェクトの
リストに入り―

00:27:53.173 --> 00:27:58.145 align:start position:14% line:-2
次のオブジェクトに向け
free listポインタを書き込みます

00:27:58.278 --> 00:28:00.881 align:start position:20% line:-1
isaフィールドがあった場所にです

00:27:58.278 --> 00:28:00.881 align:start position:20% line:-1
isaフィールドがあった場所にです

00:28:01.315 --> 00:28:05.485 align:start position:29% line:-2
ただし
通常のポインタではなく―

00:28:05.586 --> 00:28:09.423 align:start position:23% line:-1
回転したポインタを書き込みます

00:28:09.523 --> 00:28:15.195 align:start position:25% line:-2
書かれた値を 無効な
メモリアドレスにするためです

00:28:15.295 --> 00:28:18.999 align:start position:23% line:-1
誤用するとクラッシュするように

00:28:20.200 --> 00:28:23.570 align:start position:27% line:-2
objc releaseが
isaフィールドを読むと

00:28:23.670 --> 00:28:27.274 align:start position:14% line:-1
回転したfree listポインタを獲得

00:28:27.374 --> 00:28:31.278 align:start position:32% line:-2
それを間接参照すると
クラッシュします

00:28:32.012 --> 00:28:33.447 align:start position:34% line:-1
メモリアロケータが

00:28:33.547 --> 00:28:39.086 align:start position:27% line:-2
ポインタを回転することで
使えなくしてくれたわけです

00:28:40.087 --> 00:28:43.457 align:start position:30% line:-2
それがクラッシュログで
見えるシグネチャです

00:28:43.557 --> 00:28:49.463 align:start position:20% line:-2
無効なアドレスは
mallocのポインタに似てますが

00:28:49.563 --> 00:28:53.967 align:start position:25% line:-2
free listポインタと
同じように回転しています

00:28:54.067 --> 00:28:56.637 align:start position:29% line:-1
つまり ここで起きたのは

00:28:56.937 --> 00:29:02.643 align:start position:23% line:-2
解放しようとしたオブジェクトは
すでに解放されていたという―

00:28:56.937 --> 00:29:02.643 align:start position:23% line:-2
解放しようとしたオブジェクトは
すでに解放されていたという―

00:29:02.743 --> 00:29:04.945 align:start position:34% line:-1
メモリエラーでした

00:29:06.113 --> 00:29:09.416 align:start position:29% line:-1
以上が詳しく見た内容です

00:29:09.516 --> 00:29:13.387 align:start position:23% line:-2
オブジェクトが解放され
ivarを処分しようとしたら―

00:29:13.487 --> 00:29:16.857 align:start position:23% line:-1
ivarの１つが解放済みでした

00:29:16.957 --> 00:29:19.026 align:start position:36% line:-1
そしてクラッシュ

00:29:19.459 --> 00:29:21.161 align:start position:39% line:-1
さらに何か？

00:29:21.562 --> 00:29:26.934 align:start position:27% line:-2
解放しようとしていた
オブジェクトは分かるのか？

00:29:27.601 --> 00:29:33.240 align:start position:20% line:-2
通常ならobjc releaseを
呼び出した関数がヒントになります

00:29:33.440 --> 00:29:36.410 align:start position:14% line:-1
ただivar destroyer関数は―

00:29:36.510 --> 00:29:39.713 align:start position:25% line:-1
コンパイラが生成した関数です

00:29:39.813 --> 00:29:42.449 align:start position:29% line:-1
我々が書いたものではない

00:29:42.549 --> 00:29:47.521 align:start position:27% line:-2
つまりクラッシュ関連の
ファイル名や行番号がなく―

00:29:47.621 --> 00:29:52.726 align:start position:27% line:-2
当時 どのプロパティが
解放されてたか分かりません

00:29:53.260 --> 00:29:54.394 align:start position:36% line:-1
これはクラスです

00:29:54.495 --> 00:29:56.396 align:start position:29% line:-1
プロパティが３つあります

00:29:56.497 --> 00:30:00.567 align:start position:23% line:-2
ユーザ名と
データベースとビューの配列です

00:29:56.497 --> 00:30:00.567 align:start position:23% line:-2
ユーザ名と
データベースとビューの配列です

00:30:00.734 --> 00:30:06.106 align:start position:25% line:-2
現時点では どれが
解放されていたか分かりません

00:30:06.206 --> 00:30:07.574 align:start position:36% line:-1
どれもあり得ます

00:30:08.408 --> 00:30:09.643 align:start position:41% line:-1
まだ何か？

00:30:09.743 --> 00:30:12.312 align:start position:27% line:-1
クラッシュログの情報から―

00:30:12.412 --> 00:30:16.717 align:start position:27% line:-2
解放されていた
オブジェクトは分かるのか？

00:30:16.817 --> 00:30:21.922 align:start position:27% line:-2
デバッガで再現できないなら
ログだけが頼りです

00:30:22.523 --> 00:30:25.092 align:start position:29% line:-1
この場合 まだ分かります

00:30:25.526 --> 00:30:31.498 align:start position:25% line:-2
ファイル名と行番号の箇所に
“+ 42”と書かれています

00:30:31.865 --> 00:30:34.868 align:start position:23% line:-1
この“+ 42”が手がかりです

00:30:34.968 --> 00:30:39.873 align:start position:21% line:-2
“+ 42”はその関数の
アセンブリコードのオフセットです

00:30:40.207 --> 00:30:44.678 align:start position:20% line:-2
ivar destroyer関数を
逆アセンブルし コードを見れば

00:30:44.778 --> 00:30:49.650 align:start position:20% line:-2
オフセット“42”でアクセスされた
プロパティが分かります

00:30:50.484 --> 00:30:51.785 align:start position:39% line:-1
どうやるか？

00:30:51.885 --> 00:30:55.422 align:start position:25% line:-1
デバッガコンソールを使います

00:30:55.722 --> 00:30:58.292 align:start position:21% line:-1
ターミナルでLLDBを実行します

00:30:58.392 --> 00:31:03.397 align:start position:21% line:-2
Xcodeのデバッグターミナルで
LLDBを実行します

00:30:58.392 --> 00:31:03.397 align:start position:21% line:-2
Xcodeのデバッグターミナルで
LLDBを実行します

00:31:04.665 --> 00:31:09.002 align:start position:21% line:-2
デバッガにはクラッシュログを
インポートするコマンドがあります

00:31:09.103 --> 00:31:14.408 align:start position:25% line:-2
デバッガの中で
クラッシュしたように見せます

00:31:14.575 --> 00:31:19.446 align:start position:21% line:-2
まずこのコマンドでクラッシュログ
翻訳コマンドをロードし

00:31:20.047 --> 00:31:24.852 align:start position:25% line:-2
別のコマンドで
クラッシュをインポートします

00:31:25.419 --> 00:31:27.921 align:start position:32% line:-1
必要なものは３つです

00:31:28.021 --> 00:31:31.425 align:start position:27% line:-1
まずクラッシュログのコピー

00:31:31.525 --> 00:31:34.595 align:start position:30% line:-1
それからAppのコピー

00:31:34.695 --> 00:31:38.999 align:start position:20% line:-1
それとdSYMファイルのコピーです

00:31:39.099 --> 00:31:43.737 align:start position:23% line:-2
クラッシュログと
同じバージョンのものが必要です

00:31:43.837 --> 00:31:48.108 align:start position:27% line:-2
だからAppのアーカイブを
保管しておいてほしいんです

00:31:48.242 --> 00:31:52.746 align:start position:23% line:-2
これらのファイルが
Macに用意できたら実行します

00:31:53.213 --> 00:31:54.948 align:start position:14% line:-1
LLDBは Spotlightを使って―

00:31:55.048 --> 00:32:00.187 align:start position:23% line:-2
実行ファイルやシンボルを見つけ
ロードします

00:31:55.048 --> 00:32:00.187 align:start position:23% line:-2
実行ファイルやシンボルを見つけ
ロードします

00:32:00.988 --> 00:32:03.757 align:start position:32% line:-2
クラッシュスレッドの
スタックトレースや―

00:32:03.857 --> 00:32:07.194 align:start position:21% line:-1
ファイルや行番号の情報があります

00:32:07.294 --> 00:32:08.962 align:start position:32% line:-1
これで準備できました

00:32:09.062 --> 00:32:14.501 align:start position:11% line:-2
ivar destroyer関数のアドレスを
見つけ 逆アセンブルしましょう

00:32:15.469 --> 00:32:19.039 align:start position:21% line:-1
これは関数のアセンブリコードです

00:32:20.040 --> 00:32:24.444 align:start position:23% line:-2
アセンブリコードの読み方ですが
幸い―

00:32:24.545 --> 00:32:30.517 align:start position:27% line:-2
アセンブリコードを完璧に
読めなくても問題ありません

00:32:30.617 --> 00:32:36.423 align:start position:29% line:-2
ざっと読んで おおまかな
流れをつかめれば十分です

00:32:36.523 --> 00:32:42.529 align:start position:23% line:-2
クラッシュログの作業では
全部 理解する必要はありません

00:32:44.064 --> 00:32:45.899 align:start position:36% line:-1
この関数を見ると

00:32:45.999 --> 00:32:50.737 align:start position:27% line:-2
呼び出し命令と
ジャンプ命令は分かりますね

00:32:50.838 --> 00:32:53.440 align:start position:30% line:-1
関数を呼び出すものです

00:32:53.640 --> 00:32:56.910 align:start position:29% line:-2
このコードは
３ブロックに分けられます

00:32:57.411 --> 00:33:00.247 align:start position:30% line:-1
一番上のセクションは―

00:32:57.411 --> 00:33:00.247 align:start position:30% line:-1
一番上のセクションは―

00:33:00.347 --> 00:33:05.586 align:start position:30% line:-2
参照カウント解放関数を
関数に呼び出させます

00:33:05.719 --> 00:33:08.989 align:start position:27% line:-2
これはユーザ名の
プロパティを解放しています

00:33:10.357 --> 00:33:13.861 align:start position:23% line:-2
次の領域は
データベースのプロパティを解放

00:33:14.128 --> 00:33:18.332 align:start position:27% line:-2
次は ビューのプロパティを
解放しています

00:33:18.866 --> 00:33:22.469 align:start position:25% line:-1
各命令の意味は分かりませんが

00:33:22.569 --> 00:33:26.173 align:start position:27% line:-2
各領域の
おおまかな働きは分かります

00:33:26.273 --> 00:33:30.944 align:start position:21% line:-2
コードに関連する行番号があるのと
少し似ていますね

00:33:32.012 --> 00:33:35.315 align:start position:23% line:-1
クラッシュログの情報に戻ります

00:33:35.449 --> 00:33:42.256 align:start position:11% line:-2
ivar destroyer関数 + 42が
objc releaseを呼び出している

00:33:43.657 --> 00:33:46.827 align:start position:20% line:-1
だから“+ 42”に命令があります

00:33:47.194 --> 00:33:49.329 align:start position:32% line:-1
ただ注意点がもう１つ

00:33:49.429 --> 00:33:51.999 align:start position:27% line:-1
スタックトレースの中では―

00:33:52.099 --> 00:33:57.137 align:start position:21% line:-2
大半のスタックフレームの
オフセットがリターンアドレスです

00:33:57.237 --> 00:34:00.707 align:start position:29% line:-1
関数呼び出し後の命令です

00:33:57.237 --> 00:34:00.707 align:start position:29% line:-1
関数呼び出し後の命令です

00:34:00.974 --> 00:34:04.845 align:start position:11% line:-2
呼び出されたobjc releaseの命令は
１つ前の命令

00:34:04.945 --> 00:34:06.447 align:start position:39% line:-1
この命令です

00:34:07.381 --> 00:34:11.784 align:start position:16% line:-2
読むと objc releaseなので
問題ありません

00:34:11.885 --> 00:34:15.755 align:start position:25% line:-2
スタックトレースで見たものと
つじつまが合う

00:34:15.856 --> 00:34:19.760 align:start position:11% line:-2
このオフセットでのobjc releaseの
呼び出しでした

00:34:20.094 --> 00:34:23.330 align:start position:30% line:-2
そして この解放関数は
データベースの―

00:34:23.429 --> 00:34:25.364 align:start position:27% line:-1
プロパティを解放しています

00:34:25.866 --> 00:34:29.570 align:start position:21% line:-1
クラッシュの詳細が見えてきました

00:34:29.670 --> 00:34:33.639 align:start position:25% line:-2
ユーザ名のプロパティの解放は
成功しました

00:34:33.739 --> 00:34:36.543 align:start position:27% line:-2
まだビューのプロパティには
行ってません

00:34:36.643 --> 00:34:39.746 align:start position:27% line:-1
無効か有効かは分かりません

00:34:39.847 --> 00:34:45.786 align:start position:23% line:-2
分かったのは データベースの
プロパティを解放しようとしたが

00:34:45.886 --> 00:34:51.458 align:start position:25% line:-2
そのオブジェクトが解放済みの
オブジェクトだったことです

00:34:52.226 --> 00:34:55.629 align:start position:25% line:-1
これでかなり分かってきました

00:34:56.096 --> 00:34:59.767 align:start position:16% line:-2
LoginViewController
オブジェクトを解放していたら

00:34:59.867 --> 00:35:02.469 align:start position:27% line:-2
データベースのプロパティが
無効でした

00:34:59.867 --> 00:35:02.469 align:start position:27% line:-2
データベースのプロパティが
無効でした

00:35:04.405 --> 00:35:07.141 align:start position:25% line:-1
まだバグは見つかっていません

00:35:07.241 --> 00:35:08.575 align:start position:38% line:-1
コードは正しく

00:35:08.675 --> 00:35:11.044 align:start position:20% line:-2
ivar destroyer関数も
間違っていません

00:35:11.145 --> 00:35:14.214 align:start position:30% line:-1
何か他のものがおかしい

00:35:14.381 --> 00:35:18.052 align:start position:30% line:-2
でもクラッシュログから
絞り込めました

00:35:18.152 --> 00:35:19.586 align:start position:38% line:-1
何をテストし―

00:35:19.687 --> 00:35:22.422 align:start position:27% line:-1
どこでバグを再現すべきか？

00:35:22.522 --> 00:35:24.925 align:start position:29% line:-1
このクラスを見るべきです

00:35:25.025 --> 00:35:27.227 align:start position:25% line:-1
データベースフィールドを見て

00:35:27.327 --> 00:35:32.866 align:start position:23% line:-2
データベースオブジェクトを
使うコードからバグを見つけます

00:35:35.102 --> 00:35:36.770 align:start position:32% line:-1
ここまで何をしたか？

00:35:37.004 --> 00:35:38.772 align:start position:27% line:-1
クラッシュログを読みました

00:35:38.872 --> 00:35:40.874 align:start position:29% line:-1
まずクラッシュの理由です

00:35:40.974 --> 00:35:45.145 align:start position:30% line:-2
例外タイプを読み
その意味を理解しました

00:35:45.979 --> 00:35:50.117 align:start position:25% line:-2
次にクラッシュしたスレッドの
スタックトレースを調べ

00:35:50.217 --> 00:35:55.489 align:start position:27% line:-2
何をしていて 何のエラーで
停止したかを理解しました

00:35:55.989 --> 00:35:59.159 align:start position:29% line:-1
他の手がかりも探しました

00:35:59.259 --> 00:36:02.830 align:start position:30% line:-2
今回はメモリエラーの
問題のあるアドレスです

00:35:59.259 --> 00:36:02.830 align:start position:30% line:-2
今回はメモリエラーの
問題のあるアドレスです

00:36:02.930 --> 00:36:06.467 align:start position:27% line:-2
そしてクラッシュした関数の
逆アセンブルをしました

00:36:08.635 --> 00:36:14.141 align:start position:27% line:-2
メモリエラーには
様々なクラッシュがあります

00:36:14.241 --> 00:36:19.313 align:start position:27% line:-2
メモリエラーが原因となる
ログのシグネチャは多様です

00:36:19.880 --> 00:36:22.516 align:start position:32% line:-1
いくつか例があります

00:36:22.750 --> 00:36:26.019 align:start position:14% line:-1
objc msgSend関数のクラッシュ

00:36:26.186 --> 00:36:28.222 align:start position:16% line:-1
SwiftやObjective-Cの―

00:36:28.322 --> 00:36:32.226 align:start position:32% line:-2
参照カウント装置や
解放装置のクラッシュ

00:36:32.326 --> 00:36:35.829 align:start position:25% line:-2
これらの多くは
メモリエラーが原因となります

00:36:37.064 --> 00:36:42.469 align:start position:23% line:-2
もう１つ よくあるエラー症状は
認識されないセレクタ例外です

00:36:43.203 --> 00:36:47.474 align:start position:29% line:-2
状況としては
何かのオブジェクトがあり

00:36:47.574 --> 00:36:50.277 align:start position:30% line:-1
コードがそれを使います

00:36:50.377 --> 00:36:53.847 align:start position:23% line:-1
解放された後 また使用されます

00:36:54.381 --> 00:36:59.853 align:start position:18% line:-2
しかし malloc空きページリスト
シグネチャを得ずに―

00:37:00.087 --> 00:37:06.493 align:start position:21% line:-2
新しいオブジェクトが 古いものと
同じアドレスに割り当てられました

00:37:06.827 --> 00:37:12.499 align:start position:27% line:-2
コードが前のオブジェクトを
使おうとしても―

00:37:12.599 --> 00:37:16.870 align:start position:27% line:-2
同じアドレスに別のタイプの
オブジェクトがあります

00:37:16.970 --> 00:37:22.509 align:start position:27% line:-2
そのため関数が認識できず
認識されないセレクタ例外に

00:37:24.978 --> 00:37:27.781 align:start position:30% line:-2
もう１つ
よくあるエラー症状は―

00:37:27.881 --> 00:37:31.618 align:start position:23% line:-1
メモリアロケータ内での停止です

00:37:31.719 --> 00:37:34.488 align:start position:21% line:-1
malloc/free関数内です

00:37:34.888 --> 00:37:38.292 align:start position:25% line:-1
これも前提条件の例の１つで―

00:37:38.392 --> 00:37:41.695 align:start position:21% line:-1
メモリアロケータ内の前提条件です

00:37:41.962 --> 00:37:45.165 align:start position:30% line:-1
代表的なケースとしては

00:37:45.466 --> 00:37:49.269 align:start position:29% line:-2
mallocメモリ自体の
ヒープデータ構造が―

00:37:49.369 --> 00:37:53.941 align:start position:21% line:-2
メモリエラーで壊れ
プロセスや反応が停止する場合です

00:37:54.041 --> 00:37:59.246 align:start position:23% line:-2
あるいはmalloc APIの
間違った使い方を探知した場合

00:37:59.346 --> 00:38:03.016 align:start position:30% line:-2
例えば オブジェクトを
２回連続で解放すると―

00:37:59.346 --> 00:38:03.016 align:start position:30% line:-2
例えば オブジェクトを
２回連続で解放すると―

00:38:03.116 --> 00:38:09.356 align:start position:21% line:-2
アロケータが二重解放として認識し
停止する場合があります

00:38:11.692 --> 00:38:15.996 align:start position:25% line:-2
最後にクラッシュログや
メモリエラーの分析に関して―

00:38:16.096 --> 00:38:18.699 align:start position:27% line:-1
いくつかコツをお教えします

00:38:20.701 --> 00:38:23.070 align:start position:34% line:-1
ここまでの話では―

00:38:23.170 --> 00:38:29.143 align:start position:23% line:-2
クラッシュした具体的なコードや
スレッドに注目してきました

00:38:29.243 --> 00:38:32.412 align:start position:23% line:-1
でもクラッシュに関係している―

00:38:32.512 --> 00:38:35.883 align:start position:25% line:-1
別のコードを見るのも大事です

00:38:36.083 --> 00:38:38.519 align:start position:25% line:-1
例えば このクラッシュでは―

00:38:38.619 --> 00:38:40.988 align:start position:12% line:-1
ivar destroyer関数は悪くない

00:38:41.088 --> 00:38:42.856 align:start position:29% line:-1
バグの場所ではありません

00:38:42.956 --> 00:38:47.828 align:start position:21% line:-2
バグは別にあり
どこか他のコードが間違っています

00:38:49.263 --> 00:38:55.068 align:start position:23% line:-2
クラッシュしたスレッド以外の
スタックトレースも見るべきです

00:38:55.536 --> 00:38:59.573 align:start position:25% line:-2
クラッシュログには
全スタックトレースが含まれ―

00:38:59.673 --> 00:39:05.812 align:start position:25% line:-2
その中には役立つ情報や
手がかりがあるかもしれません

00:38:59.673 --> 00:39:05.812 align:start position:25% line:-2
その中には役立つ情報や
手がかりがあるかもしれません

00:39:06.046 --> 00:39:11.785 align:start position:21% line:-2
他のスレッドにはAppのどこで
実行されていたかの詳細があるかも

00:39:11.885 --> 00:39:16.990 align:start position:21% line:-2
ネットワークコードを実行していて
別のスレッドで分かるかもしれない

00:39:17.091 --> 00:39:19.793 align:start position:27% line:-2
あるいは
マルチスレッドエラーがあり

00:39:19.893 --> 00:39:25.599 align:start position:21% line:-2
何のスレッド競合だったか 他の
スレッドから分かるかもしれません

00:39:27.434 --> 00:39:33.073 align:start position:29% line:-2
それから１つの原因につき
ログは複数 見るべきです

00:39:33.674 --> 00:39:34.875 align:start position:20% line:-1
Xcode Organizerは―

00:39:34.975 --> 00:39:39.880 align:start position:29% line:-2
クラッシュの箇所により
グループ分けしてくれます

00:39:40.380 --> 00:39:46.420 align:start position:25% line:-2
同じ箇所で複数のクラッシュが
起きることもありますが

00:39:46.520 --> 00:39:50.624 align:start position:25% line:-1
ログにより情報量も変わります

00:39:50.724 --> 00:39:54.661 align:start position:18% line:-2
先ほどのmalloc空きページリスト
シグネチャは―

00:39:54.761 --> 00:39:58.665 align:start position:29% line:-2
ログによって
見られないものもあります

00:39:58.765 --> 00:40:03.904 align:start position:27% line:-2
だから１つのクラッシュでも
複数のログを見て―

00:39:58.765 --> 00:40:03.904 align:start position:27% line:-2
だから１つのクラッシュでも
複数のログを見て―

00:40:04.004 --> 00:40:07.841 align:start position:23% line:-1
役立つ情報を探すといいでしょう

00:40:08.709 --> 00:40:13.313 align:start position:25% line:-2
Organizerは
異なる原因のクラッシュでも―

00:40:13.414 --> 00:40:19.286 align:start position:25% line:-2
場合によっては
同じグループに分けたりします

00:40:19.386 --> 00:40:25.626 align:start position:29% line:-2
クラッシュしたスレッドや
バックトレースを見れば―

00:40:25.726 --> 00:40:31.565 align:start position:23% line:-2
原因の異なるクラッシュが
複数あると分かることもあります

00:40:31.665 --> 00:40:34.501 align:start position:27% line:-1
同じグループにあってもです

00:40:34.802 --> 00:40:40.674 align:start position:25% line:-2
ログを１つ見ただけだと
２つ目のクラッシュを見逃し―

00:40:40.774 --> 00:40:46.313 align:start position:25% line:-2
そのまま気づかずに
出荷してしまうかもしれません

00:40:48.582 --> 00:40:50.551 align:start position:32% line:-1
クラッシュを分析し―

00:40:50.651 --> 00:40:57.357 align:start position:21% line:-2
起きた場所や使ったオブジェクトを
ある程度 絞り込むことができたら

00:40:57.458 --> 00:41:04.064 align:start position:4% line:-2
Address SanitizerやZombiesを
使ってクラッシュを再現してもいい

00:40:57.458 --> 00:41:04.064 align:start position:4% line:-2
Address SanitizerやZombiesを
使ってクラッシュを再現してもいい

00:41:04.298 --> 00:41:10.838 align:start position:23% line:-2
クラッシュログから何が起きたか
絞り込むことができたとしても

00:41:10.938 --> 00:41:16.143 align:start position:23% line:-2
エラーメッセージを伝えてくれる
デバッガやテスト内でのほうが

00:41:16.243 --> 00:41:19.813 align:start position:21% line:-1
デバッグするのは はるかに楽です

00:41:21.715 --> 00:41:25.052 align:start position:30% line:-2
マルチスレッドエラーの
診断には―

00:41:25.152 --> 00:41:29.923 align:start position:25% line:-2
複数のスタックトレースや
スレッドを見るよう言いました

00:41:30.023 --> 00:41:35.496 align:start position:29% line:-2
それについて詳しい話を
クバにしてもらいましょう

00:41:35.596 --> 00:41:41.168 align:start position:43% line:-1
(拍手)

00:41:41.268 --> 00:41:42.269 align:start position:41% line:-1
ありがとう

00:41:43.604 --> 00:41:44.671 align:start position:45% line:-1
どうも

00:41:45.239 --> 00:41:46.640 align:start position:29% line:-1
グレッグが言ったように―

00:41:46.740 --> 00:41:50.677 align:start position:23% line:-2
メモリ破損はマルチスレッドから
生じる場合もあります

00:41:51.111 --> 00:41:56.884 align:start position:23% line:-2
マルチスレッドのバグは
診断と再現が非常に難しいのです

00:41:57.217 --> 00:42:01.355 align:start position:27% line:-1
たまにしか起きないからです

00:41:57.217 --> 00:42:01.355 align:start position:27% line:-1
たまにしか起きないからです

00:42:01.455 --> 00:42:05.859 align:start position:27% line:-2
コードが99％は
うまくいっていたりするので

00:42:05.959 --> 00:42:09.229 align:start position:23% line:-1
長く気づかれないこともあります

00:42:11.265 --> 00:42:14.034 align:start position:30% line:-2
マルチスレッドバグは
メモリ破損を招きがちで

00:42:14.134 --> 00:42:17.871 align:start position:27% line:-2
クラッシュログも
メモリ破損のように見えます

00:42:17.971 --> 00:42:21.175 align:start position:29% line:-1
先ほど 例を紹介しました

00:42:21.275 --> 00:42:26.513 align:start position:21% line:-2
mallocやfree
リテインカウント内のクラッシュは

00:42:26.613 --> 00:42:29.650 align:start position:27% line:-1
メモリ破損の典型的症状です

00:42:30.517 --> 00:42:33.554 align:start position:30% line:-2
マルチスレッドバグの
特徴的な症状もあります

00:42:33.854 --> 00:42:36.657 align:start position:30% line:-1
よくクラッシュログに―

00:42:36.757 --> 00:42:42.296 align:start position:27% line:-2
関連するコードを実行する
複数のスレッドが含まれます

00:42:42.396 --> 00:42:47.501 align:start position:23% line:-2
特定のクラスやメソッドが
複数のスレッドのログにあれば―

00:42:47.601 --> 00:42:50.637 align:start position:21% line:-1
マルチスレッドバグの可能性がある

00:42:51.605 --> 00:42:56.510 align:start position:23% line:-2
マルチスレッドバグが原因の
メモリ破損の多くはランダムです

00:42:56.610 --> 00:43:02.683 align:start position:21% line:-2
だから よく似たコードや
アドレスでクラッシュが見られます

00:42:56.610 --> 00:43:02.683 align:start position:21% line:-2
だから よく似たコードや
アドレスでクラッシュが見られます

00:43:02.783 --> 00:43:07.588 align:start position:20% line:-2
そして同じバグでも
Xcodeではクラッシュポイントが

00:43:07.854 --> 00:43:11.158 align:start position:23% line:-1
別だと判断されることもあります

00:43:12.025 --> 00:43:15.496 align:start position:27% line:-2
クラッシュしたスレッドが
原因ではない場合もあります

00:43:15.596 --> 00:43:20.300 align:start position:21% line:-2
だからログで
他のスレッドも見ることが重要です

00:43:20.734 --> 00:43:24.271 align:start position:25% line:-1
ではバグの例を見てみましょう

00:43:24.371 --> 00:43:27.541 align:start position:20% line:-2
Xcodeに含まれるツール
Thread Sanitizerで

00:43:27.641 --> 00:43:30.778 align:start position:29% line:-1
診断する方法を紹介します

00:43:38.919 --> 00:43:41.421 align:start position:27% line:-1
クッキーレシピのAppで―

00:43:41.521 --> 00:43:46.326 align:start position:23% line:-2
ユーザから入手した
クラッシュログを見てみましょう

00:43:46.994 --> 00:43:50.864 align:start position:25% line:-2
この２つ目のクラッシュログに
注目しましょう

00:43:52.065 --> 00:43:57.604 align:start position:14% line:-2
これを見ると LazyImageView
クラスに何か問題があるようです

00:43:57.704 --> 00:43:59.506 align:start position:32% line:-1
私が書いたクラスです

00:43:59.606 --> 00:44:01.375 align:start position:32% line:-1
この後 お見せします

00:43:59.606 --> 00:44:01.375 align:start position:32% line:-1
この後 お見せします

00:44:01.475 --> 00:44:04.244 align:start position:27% line:-1
その前にログを読みましょう

00:44:05.312 --> 00:44:08.215 align:start position:23% line:-1
スレッドのスタック全体を見ます

00:44:08.315 --> 00:44:09.817 align:start position:32% line:-1
このボタンを押すと―

00:44:09.917 --> 00:44:12.286 align:start position:27% line:-1
他のスレッドが表示されます

00:44:12.986 --> 00:44:15.856 align:start position:34% line:-1
上のほうを見ると―

00:44:15.956 --> 00:44:20.627 align:start position:23% line:-2
free関数が停止を
呼び出していることが分かります

00:44:20.761 --> 00:44:23.664 align:start position:25% line:-1
ヒープの破損だという示唆です

00:44:25.265 --> 00:44:27.468 align:start position:29% line:-1
他のスレッドも見ましょう

00:44:27.568 --> 00:44:29.236 align:start position:34% line:-1
スレッド５を見ると

00:44:29.636 --> 00:44:33.740 align:start position:23% line:-2
LazyImageView内で
やはりコードを実行しています

00:44:35.108 --> 00:44:38.178 align:start position:27% line:-1
別のクラッシュも見ましょう

00:44:39.213 --> 00:44:42.182 align:start position:27% line:-1
どのログでも共通しています

00:44:42.316 --> 00:44:47.221 align:start position:21% line:-2
あるスレッドが
free関数の停止でヒープ破損し

00:44:47.321 --> 00:44:52.526 align:start position:21% line:-2
別のスレッドが
コードの似た箇所で処理しています

00:44:52.626 --> 00:44:55.729 align:start position:16% line:-1
やはりLazyImageView内です

00:44:55.929 --> 00:44:58.031 align:start position:32% line:-1
偶然ではないでしょう

00:44:58.132 --> 00:45:00.768 align:start position:21% line:-1
マルチスレッドバグだと思われます

00:44:58.132 --> 00:45:00.768 align:start position:21% line:-1
マルチスレッドバグだと思われます

00:45:01.969 --> 00:45:05.072 align:start position:11% line:-1
LazyImageViewクラスを見ましょう

00:45:05.172 --> 00:45:11.044 align:start position:27% line:-2
ボタンを押してコードに飛び
プロジェクトで開きます

00:45:11.812 --> 00:45:14.748 align:start position:12% line:-1
LazyImageViewのソースが出ます

00:45:15.282 --> 00:45:17.551 align:start position:16% line:-1
UIImageViewのサブクラスです

00:45:17.651 --> 00:45:22.656 align:start position:23% line:-2
イメージを遅延させ
非同期的にロードする機能がある

00:45:22.756 --> 00:45:25.692 align:start position:34% line:-2
イニシャライザに
ロジックがあります

00:45:25.792 --> 00:45:29.630 align:start position:27% line:-2
バックグラウンドのキューに
ジョブを割り当てて―

00:45:29.730 --> 00:45:32.699 align:start position:27% line:-2
バックグラウンドスレッドに
画像を作成します

00:45:32.800 --> 00:45:38.405 align:start position:25% line:-2
終わればメインキューに戻し
スクリーンに画像を表示します

00:45:39.406 --> 00:45:42.342 align:start position:29% line:-2
クラッシュログは
このコードを示しています

00:45:42.543 --> 00:45:45.579 align:start position:29% line:-2
画像キャッシュに
アクセスしている箇所です

00:45:45.679 --> 00:45:51.185 align:start position:25% line:-2
不必要に同じ画像を何度も
作成しないようにするためです

00:45:51.285 --> 00:45:54.655 align:start position:21% line:-1
ここにバグがあるのかもしれません

00:45:54.888 --> 00:45:56.123 align:start position:38% line:-1
確認しましょう

00:45:56.223 --> 00:46:00.761 align:start position:25% line:-2
シミュレータでAppを実行し
クラッシュを再現しましょう

00:45:56.223 --> 00:46:00.761 align:start position:25% line:-2
シミュレータでAppを実行し
クラッシュを再現しましょう

00:46:00.961 --> 00:46:03.497 align:start position:29% line:-1
クラッシュログを閉じます

00:46:04.798 --> 00:46:06.967 align:start position:21% line:-1
これがクッキーレシピのAppです

00:46:07.067 --> 00:46:12.406 align:start position:27% line:-2
新しいレシピを加えるため
このプラスボタンを押すと―

00:46:13.140 --> 00:46:17.077 align:start position:25% line:-2
新しいレシピの画像を選ぶよう
言われます

00:46:17.177 --> 00:46:20.114 align:start position:30% line:-2
今 スクリーン上にある
コントローラは―

00:46:20.214 --> 00:46:23.517 align:start position:25% line:-2
LazyImageViewで
画像を表示しています

00:46:23.851 --> 00:46:27.521 align:start position:23% line:-1
こうしてスクロールすることで―

00:46:27.621 --> 00:46:31.358 align:start position:23% line:-1
コードは実行されているはずです

00:46:31.458 --> 00:46:33.260 align:start position:29% line:-1
でもクラッシュは起きない

00:46:33.527 --> 00:46:36.497 align:start position:30% line:-2
残念ながら
マルチスレッドバグは―

00:46:36.964 --> 00:46:38.499 align:start position:34% line:-1
再現が難しいんです

00:46:38.599 --> 00:46:42.770 align:start position:29% line:-2
何度もバグのあるコードを
テストしても―

00:46:42.870 --> 00:46:44.838 align:start position:30% line:-1
クラッシュしないことも

00:46:45.439 --> 00:46:50.611 align:start position:27% line:-2
では何度かコントローラを
閉じたり開いたりしましょう

00:46:50.711 --> 00:46:55.949 align:start position:21% line:-2
そのうち運よく
クラッシュが起きるかもしれません

00:47:00.454 --> 00:47:01.822 align:start position:39% line:-1
起きましたね

00:47:01.922 --> 00:47:05.158 align:start position:23% line:-1
クラッシュしたので終了しました

00:47:05.259 --> 00:47:09.930 align:start position:27% line:-2
でもデバッガで再現できても
あまり意味がありません

00:47:10.264 --> 00:47:14.401 align:start position:21% line:-2
EXC BAD ACCESSだと
分かるだけです

00:47:14.501 --> 00:47:16.904 align:start position:30% line:-1
一体 原因は何でしょう

00:47:17.004 --> 00:47:19.640 align:start position:25% line:-1
なぜ起きたか教えてくれません

00:47:19.740 --> 00:47:23.210 align:start position:25% line:-2
でもXcodeに
うってつけのツールがあります

00:47:23.310 --> 00:47:26.447 align:start position:18% line:-2
Thread Sanitizerです
これを使います

00:47:26.613 --> 00:47:28.815 align:start position:23% line:-1
スキームエディタを開きましょう

00:47:28.916 --> 00:47:32.953 align:start position:12% line:-2
ここで このAppを選び
“Edit Scheme...”をクリック

00:47:33.720 --> 00:47:37.291 align:start position:14% line:-1
Diagnosticsタブに切り替えると

00:47:37.391 --> 00:47:41.061 align:start position:25% line:-1
いくつか診断ツールがあります

00:47:41.161 --> 00:47:44.932 align:start position:11% line:-2
Address Sanitizerはバッファ
オーバーフローの発見に便利です

00:47:45.432 --> 00:47:48.902 align:start position:9% line:-2
Thread Sanitizerを選択し
“Pause on issues”も選択します

00:47:49.002 --> 00:47:53.440 align:start position:23% line:-2
バグを検出すると
デバッガが止まるということです

00:47:54.575 --> 00:47:57.844 align:start position:9% line:-1
Thread Sanitizerを有効にして―

00:47:57.945 --> 00:48:01.481 align:start position:21% line:-1
もう一度 Appを操作しましょう

00:47:57.945 --> 00:48:01.481 align:start position:21% line:-1
もう一度 Appを操作しましょう

00:48:03.550 --> 00:48:05.385 align:start position:30% line:-1
プラスボタンを押すと…

00:48:05.886 --> 00:48:07.921 align:start position:27% line:-1
Appがすぐに止まりました

00:48:08.021 --> 00:48:09.490 align:start position:39% line:-1
バグ発見です

00:48:09.590 --> 00:48:12.459 align:start position:30% line:-1
しかも１回で済みました

00:48:12.559 --> 00:48:16.730 align:start position:20% line:-2
Thread Sanitizerは
高確率で再現してくれます

00:48:17.498 --> 00:48:19.566 align:start position:30% line:-1
バグの詳細を見ましょう

00:48:20.000 --> 00:48:22.770 align:start position:7% line:-1
Swift Access Raceだと分かります

00:48:23.470 --> 00:48:26.640 align:start position:23% line:-1
左のデバッグナビゲータを見ると

00:48:26.740 --> 00:48:29.443 align:start position:30% line:-1
さらに詳細が分かります

00:48:29.543 --> 00:48:33.480 align:start position:27% line:-2
２つのスレッドが
２つのアクセスをしています

00:48:33.580 --> 00:48:35.949 align:start position:34% line:-1
スレッド２と４が―

00:48:36.050 --> 00:48:39.987 align:start position:25% line:-2
同じメモリに同時に
アクセスしようとしていますが

00:48:40.087 --> 00:48:41.521 align:start position:34% line:-1
許可されていません

00:48:42.790 --> 00:48:47.161 align:start position:27% line:-2
競合している
この２つのコードを見ると―

00:48:47.261 --> 00:48:50.998 align:start position:34% line:-2
画像キャッシュに
アクセスしています

00:48:51.365 --> 00:48:56.336 align:start position:25% line:-2
このデータは複数のスレッドで
共有されたデータ構造なので―

00:48:56.470 --> 00:48:58.672 align:start position:32% line:-2
スレッドデータ構造で
なくてはなりません

00:48:58.839 --> 00:49:01.341 align:start position:25% line:-1
どう実行されるか見てましょう

00:48:58.839 --> 00:49:01.341 align:start position:25% line:-1
どう実行されるか見てましょう

00:49:01.575 --> 00:49:05.712 align:start position:27% line:-2
ストレージにジャンプして
スレッドセーフか確認します

00:49:06.346 --> 00:49:10.284 align:start position:27% line:-2
画像キャッシュのソースが
ファイルの一番上にあります

00:49:10.384 --> 00:49:12.553 align:start position:30% line:-1
すぐ問題が分かりますね

00:49:12.653 --> 00:49:16.290 align:start position:23% line:-2
これは単なる
Swiftの辞書なのでダメです

00:49:16.390 --> 00:49:19.459 align:start position:25% line:-2
Swiftの辞書は
スレッドセーフじゃありません

00:49:19.560 --> 00:49:24.231 align:start position:21% line:-2
複数のスレッドで
Swiftの辞書を共有するには―

00:49:24.431 --> 00:49:27.201 align:start position:25% line:-1
同期により守る必要があります

00:49:27.434 --> 00:49:31.572 align:start position:27% line:-2
複数のスレッドが同時に
アクセスしないようにします

00:49:31.772 --> 00:49:36.343 align:start position:27% line:-2
ではクラスを
スレッドセーフにしましょう

00:49:36.643 --> 00:49:37.978 align:start position:38% line:-1
ステップは２つ

00:49:38.078 --> 00:49:41.982 align:start position:32% line:-2
まずコードを少し
リファクタリングし―

00:49:42.082 --> 00:49:44.318 align:start position:30% line:-1
ストレージを制御します

00:49:44.418 --> 00:49:49.089 align:start position:23% line:-2
次にディスパッチキューで
クラスをスレッドセーフにします

00:49:50.390 --> 00:49:55.229 align:start position:29% line:-2
まず 問題はストレージが
パブリック変数であること

00:49:55.329 --> 00:49:59.399 align:start position:25% line:-2
どのコードも
アクセス可能だということです

00:49:59.500 --> 00:50:04.004 align:start position:30% line:-2
コードを完璧にするのは
かなり大変なので―

00:49:59.500 --> 00:50:04.004 align:start position:30% line:-2
コードを完璧にするのは
かなり大変なので―

00:50:04.304 --> 00:50:07.041 align:start position:29% line:-1
プライベートに変更します

00:50:07.174 --> 00:50:11.411 align:start position:25% line:-2
画像キャッシュへのアクセスも
変えましょう

00:50:11.545 --> 00:50:14.381 align:start position:18% line:-1
それにはsubscriptを使います

00:50:15.148 --> 00:50:20.554 align:start position:25% line:-2
ブラケットを使い キャッシュ
からのデータをロードできます

00:50:21.521 --> 00:50:24.958 align:start position:16% line:-1
subscriptにはゲッタが必要です

00:50:25.726 --> 00:50:27.528 align:start position:36% line:-1
セッタも必要です

00:50:28.395 --> 00:50:33.434 align:start position:25% line:-2
とりあえず 下層ストレージに
直接アクセスしましょう

00:50:34.535 --> 00:50:39.306 align:start position:27% line:-2
残りのファイルを作るには
ユーザをアップデートします

00:50:39.506 --> 00:50:41.909 align:start position:30% line:-2
ストレージプロパティに
アクセスせず―

00:50:42.009 --> 00:50:46.480 align:start position:23% line:-2
ブラケットやインデックスを
画像キャッシュに直接 使います

00:50:47.448 --> 00:50:52.219 align:start position:23% line:-2
ビルドを押せば
コードは正常にコンパイルします

00:50:52.319 --> 00:50:56.523 align:start position:29% line:-2
まだバグは直してませんが
進展はありました

00:50:56.623 --> 00:51:01.161 align:start position:21% line:-2
ストレージにアクセスするコードに
制限を設けられました

00:50:56.623 --> 00:51:01.161 align:start position:21% line:-2
ストレージにアクセスするコードに
制限を設けられました

00:51:01.261 --> 00:51:04.164 align:start position:25% line:-1
ゲッタかセッタのどちらかです

00:51:04.264 --> 00:51:06.500 align:start position:25% line:-1
他のコードはアクセスできない

00:51:06.600 --> 00:51:11.038 align:start position:7% line:-2
これでSwift Access Raceの修正に
近づきました

00:51:11.839 --> 00:51:13.974 align:start position:25% line:-1
ディスパッチキューで直します

00:51:14.074 --> 00:51:17.277 align:start position:30% line:-2
“queue”という
プライベート変数を作り

00:51:17.377 --> 00:51:20.647 align:start position:21% line:-1
ディスパッチキューを割り当てます

00:51:21.315 --> 00:51:23.550 align:start position:21% line:-1
ディスパッチキューはシリアルです

00:51:23.650 --> 00:51:24.885 align:start position:41% line:-1
これも同様

00:51:24.985 --> 00:51:31.125 align:start position:20% line:-2
つまり このqueueの中で一度に
１つのコードしか実行できません

00:51:31.725 --> 00:51:34.361 align:start position:32% line:-1
これが必要なことです

00:51:34.628 --> 00:51:37.631 align:start position:29% line:-2
ディスパッチキュー内で
コードをどう実行するか？

00:51:37.731 --> 00:51:39.800 align:start position:23% line:-1
queue.syncを使います

00:51:39.900 --> 00:51:43.303 align:start position:14% line:-1
queue.syncに移動したコードは―

00:51:44.838 --> 00:51:48.442 align:start position:20% line:-1
１つずつqueue内で実行されます

00:51:48.609 --> 00:51:52.880 align:start position:21% line:-2
ゲッタから何か返す必要があるので
値を返します

00:51:53.414 --> 00:51:56.150 align:start position:34% line:-1
セッタでも同様です

00:51:57.518 --> 00:52:00.788 align:start position:18% line:-1
コードをqueue.syncに移すと

00:51:57.518 --> 00:52:00.788 align:start position:18% line:-1
コードをqueue.syncに移すと

00:52:00.888 --> 00:52:04.024 align:start position:23% line:-2
ディスパッチキューの一部として
実行されます

00:52:04.324 --> 00:52:06.593 align:start position:29% line:-1
これでスレッドセーフです

00:52:06.693 --> 00:52:10.264 align:start position:27% line:-2
ストレージに
アクセスするコードは常に―

00:52:10.364 --> 00:52:13.400 align:start position:23% line:-2
シリアルディスパッチキュー内で
実行されます

00:52:13.500 --> 00:52:18.205 align:start position:25% line:-2
一度に１つずつ実行されるので
スレッドセーフです

00:52:18.305 --> 00:52:22.943 align:start position:27% line:-2
セッタのみに 同期を
使いたくなるかもしれません

00:52:23.043 --> 00:52:25.446 align:start position:32% line:-1
ストレージを修正し―

00:52:25.546 --> 00:52:28.115 align:start position:27% line:-1
こうしてゲッタでは避けます

00:52:28.515 --> 00:52:29.349 align:start position:39% line:-1
でもダメです

00:52:29.449 --> 00:52:32.453 align:start position:25% line:-1
これでもメモリ破損は起きます

00:52:32.553 --> 00:52:37.257 align:start position:23% line:-2
このバージョンを
シミュレータで試してみましょう

00:52:37.357 --> 00:52:41.428 align:start position:27% line:-2
Sanitizerは
バグを発見できるでしょうか

00:52:43.497 --> 00:52:45.132 align:start position:36% line:-1
やはりできますね

00:52:45.232 --> 00:52:49.870 align:start position:25% line:-2
ゲッタとセッタの両方を
同期で守らなくてはなりません

00:52:49.970 --> 00:52:53.307 align:start position:20% line:-1
最後にもう一度 Appを実行します

00:52:53.407 --> 00:52:56.910 align:start position:27% line:-1
レシピを追加してみましょう

00:52:57.077 --> 00:52:58.779 align:start position:27% line:-1
コントローラは正常にロード

00:52:58.879 --> 00:53:02.716 align:start position:25% line:-2
クラスはスレッドセーフなので
警告も出ません

00:52:58.879 --> 00:53:02.716 align:start position:25% line:-2
クラスはスレッドセーフなので
警告も出ません

00:53:02.816 --> 00:53:08.288 align:start position:18% line:-2
Organizerウインドウに戻って
解決したとマークしましょう

00:53:08.388 --> 00:53:11.725 align:start position:23% line:-1
このバグを発見し修正できました

00:53:12.793 --> 00:53:19.299 align:start position:43% line:-1
(拍手)

00:53:21.235 --> 00:53:24.371 align:start position:32% line:-1
今 お見せしたように

00:53:24.471 --> 00:53:29.276 align:start position:25% line:-2
マルチスレッドバグの症状が
クラッシュログに見られました

00:53:29.376 --> 00:53:34.915 align:start position:14% line:-2
そしてThread Sanitizerで
バグを発見し修正しました

00:53:35.549 --> 00:53:37.351 align:start position:18% line:-1
Thread Sanitizerは―

00:53:37.451 --> 00:53:42.055 align:start position:32% line:-2
マルチスレッドバグを
高確率で再現できます

00:53:42.222 --> 00:53:46.793 align:start position:27% line:-2
何度も操作を繰り返す必要は
ありませんでした

00:53:47.394 --> 00:53:50.497 align:start position:18% line:-1
macOSとシミュレータで動作します

00:53:51.031 --> 00:53:53.600 align:start position:29% line:-1
ただ他の診断ツール同様―

00:53:53.700 --> 00:53:58.372 align:start position:30% line:-2
コードを発動させないと
バグを見つけられません

00:53:58.472 --> 00:54:00.407 align:start position:32% line:-1
覚えておいてください

00:53:58.472 --> 00:54:00.407 align:start position:32% line:-1
覚えておいてください

00:54:00.507 --> 00:54:04.545 align:start position:9% line:-2
テストでは
Thread Sanitizerを使いましょう

00:54:04.645 --> 00:54:08.148 align:start position:23% line:-2
スレッドやGCDを使うコードは
特にです

00:54:09.016 --> 00:54:10.551 align:start position:36% line:-1
さらなる情報は―

00:54:10.651 --> 00:54:15.055 align:start position:25% line:-2
WWDC 2016での
私のセッションの動画をどうぞ

00:54:15.155 --> 00:54:17.658 align:start position:12% line:-2
“Thread Sanitizer and
Static Analysis”です

00:54:17.758 --> 00:54:22.896 align:start position:30% line:-2
このツールを紹介し
その効果を説明しました

00:54:23.831 --> 00:54:27.701 align:start position:25% line:-2
復習すると
スキームエディタのツールです

00:54:27.801 --> 00:54:30.037 align:start position:11% line:-1
“Product”から“Scheme”を選び

00:54:30.137 --> 00:54:32.873 align:start position:20% line:-2
“Edit Scheme...”で
立ち上がります

00:54:32.973 --> 00:54:35.542 align:start position:20% line:-1
Diagnosticsタブを開くと

00:54:35.642 --> 00:54:40.614 align:start position:9% line:-2
診断ツールの中に
Thread Sanitizerが並んでいます

00:54:41.782 --> 00:54:44.485 align:start position:29% line:-1
もう１つデバッグのコツを

00:54:44.585 --> 00:54:47.421 align:start position:25% line:-1
マルチスレッドバグに有効です

00:54:48.021 --> 00:54:53.594 align:start position:21% line:-2
ディスパッチキューを作成する際
イニシャライザでラベルを使えます

00:54:54.528 --> 00:54:57.898 align:start position:29% line:-2
オペレーションキューに
カスタム名をアサインでき

00:54:58.198 --> 00:55:02.436 align:start position:23% line:-2
スレッドにも
カスタム名を使うことができます

00:54:58.198 --> 00:55:02.436 align:start position:23% line:-2
スレッドにも
カスタム名を使うことができます

00:55:03.036 --> 00:55:08.776 align:start position:23% line:-2
名前とラベルはデバッガに
また一部のログにも表示されます

00:55:08.876 --> 00:55:13.447 align:start position:27% line:-2
マルチスレッドバグの原因を
絞り込むのに役立ちます

00:55:15.516 --> 00:55:20.120 align:start position:25% line:-2
クラッシュ対策で
覚えておくべきコツを３つだけ

00:55:20.487 --> 00:55:21.455 align:start position:45% line:-1
１つ目

00:55:21.555 --> 00:55:27.061 align:start position:14% line:-2
App Storeにアップロードする前に
実際のデバイスでテストすること

00:55:27.261 --> 00:55:30.998 align:start position:30% line:-2
App Reviewで
却下されにくくなります

00:55:31.765 --> 00:55:32.599 align:start position:45% line:-1
２つ目

00:55:32.699 --> 00:55:37.271 align:start position:21% line:-2
ユーザから報告されたクラッシュは
再現すること

00:55:37.438 --> 00:55:43.644 align:start position:23% line:-2
Appのどの部分を発動させれば
そのクラッシュが再現できるか

00:55:43.744 --> 00:55:46.647 align:start position:32% line:-2
クラッシュログを見て
考えるのです

00:55:46.914 --> 00:55:48.048 align:start position:43% line:-1
最後に―

00:55:48.148 --> 00:55:52.719 align:start position:27% line:-2
再現が難しいクラッシュには
ツールを使う

00:55:52.820 --> 00:55:55.656 align:start position:14% line:-2
Address Sanitizerや
Thread Sanitizerなどです

00:55:55.856 --> 00:56:00.260 align:start position:23% line:-2
メモリ破損や
マルチスレッドバグに役立ちます

00:55:55.856 --> 00:56:00.260 align:start position:23% line:-2
メモリ破損や
マルチスレッドバグに役立ちます

00:56:02.095 --> 00:56:04.998 align:start position:27% line:-1
今日のおさらいをしましょう

00:56:05.766 --> 00:56:10.304 align:start position:18% line:-2
クリスからは Xcodeの
Organizerウインドウを使って

00:56:10.404 --> 00:56:13.607 align:start position:32% line:-2
クラッシュログを
見る方法を学びました

00:56:14.274 --> 00:56:18.579 align:start position:23% line:-2
グレッグからは
ログの読み方と分析を学びました

00:56:18.679 --> 00:56:20.414 align:start position:27% line:-1
多くの場合 再現が可能です

00:56:20.514 --> 00:56:23.217 align:start position:25% line:-1
Appの起動タイムアウトなど

00:56:24.651 --> 00:56:30.324 align:start position:27% line:-2
それからメモリ破損など
再現が難しいクラッシュと―

00:56:30.424 --> 00:56:34.495 align:start position:21% line:-1
そのログの症状について話しました

00:56:34.728 --> 00:56:38.398 align:start position:20% line:-2
最後に
Sanitizerなどを活用した―

00:56:38.499 --> 00:56:42.870 align:start position:25% line:-2
メモリ破損やスレッドのバグの
再現法を紹介しました

00:56:42.970 --> 00:56:45.639 align:start position:27% line:-1
ぜひ使うことをお勧めします

00:56:46.406 --> 00:56:49.343 align:start position:32% line:-2
さらに詳しい情報は
セッションのページへ

00:56:49.443 --> 00:56:52.379 align:start position:30% line:-1
技術注記へのリンクや―

00:56:52.479 --> 00:56:57.384 align:start position:25% line:-2
クラッシュの際 デバッグに
役立つドキュメントもあります

00:56:57.551 --> 00:57:02.156 align:start position:18% line:-2
この後 12時から
Technology Lab 8で―

00:56:57.551 --> 00:57:02.156 align:start position:18% line:-2
この後 12時から
Technology Lab 8で―

00:57:02.256 --> 00:57:03.824 align:start position:38% line:-1
ラボがあります

00:57:03.924 --> 00:57:07.461 align:start position:27% line:-1
質問がある方は ぜひどうぞ

00:57:07.561 --> 00:57:09.730 align:start position:21% line:-1
残りのWWDCをお楽しみください

00:57:09.830 --> 00:57:10.430 align:start position:45% line:-1
どうも

00:57:10.531 --> 00:57:12.599 align:start position:43% line:-1
(拍手)
