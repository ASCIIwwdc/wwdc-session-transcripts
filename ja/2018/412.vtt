WEBVTT

00:00:07.140 --> 00:00:16.750 align:start position:43% line:-1
(音楽)

00:00:27.961 --> 00:00:29.563 align:start position:43% line:-1
(拍手)

00:00:29.663 --> 00:00:33.767 align:start position:5% line:-2
こんにちは　“Advanced Debugging
with Xcode and LLDB”へようこそ

00:00:33.867 --> 00:00:38.739 align:start position:32% line:-2
Xcodeチームの
クリス･マイルズです

00:00:38.839 --> 00:00:42.242 align:start position:32% line:-2
このセッションの後は
Bashですね

00:00:42.342 --> 00:00:44.745 align:start position:29% line:-1
時間どおりに終わらせます

00:00:44.845 --> 00:00:49.283 align:start position:32% line:-2
盛りだくさんなので
さっそく始めましょう

00:00:49.650 --> 00:00:53.187 align:start position:23% line:-2
まずは
Swiftデバッグの信頼性です

00:00:53.287 --> 00:00:55.923 align:start position:30% line:-1
いいお知らせがあります

00:00:56.023 --> 00:01:00.561 align:start position:27% line:-2
Xcode 10の信頼性を
大幅に向上させました

00:00:56.023 --> 00:01:00.561 align:start position:27% line:-2
Xcode 10の信頼性を
大幅に向上させました

00:01:02.129 --> 00:01:04.331 align:start position:34% line:-1
ええ　そうなんです

00:01:04.431 --> 00:01:08.402 align:start position:43% line:-1
(拍手)

00:01:08.502 --> 00:01:14.641 align:start position:27% line:-2
Swiftデバッグにおける
エッジケースを解消しました

00:01:14.741 --> 00:01:16.777 align:start position:32% line:-1
いくつかお話しします

00:01:17.511 --> 00:01:21.515 align:start position:30% line:-2
複雑なプロジェクトや
ビルド設定のケースです

00:01:21.615 --> 00:01:25.485 align:start position:29% line:-2
コンソールでpoの使用や
式の評価を試みると

00:01:25.586 --> 00:01:28.455 align:start position:34% line:-2
このようなエラーが
発生します

00:01:28.622 --> 00:01:31.191 align:start position:20% line:-1
この“AST context”とは

00:01:31.291 --> 00:01:37.564 align:start position:23% line:-2
コンパイラの状態の再構成のため
必要な式のコンテキストです

00:01:37.664 --> 00:01:40.367 align:start position:29% line:-1
モジュールの衝突などで―

00:01:40.467 --> 00:01:45.873 align:start position:23% line:-2
式のコンテキストが再構成できず
失敗するのです

00:01:46.373 --> 00:01:51.278 align:start position:23% line:-2
Xcode 10ではLLDBが
フォールバックを実装

00:01:51.378 --> 00:01:57.384 align:start position:29% line:-2
より簡単なコンテキストを
現在のフレームに作り

00:01:57.484 --> 00:01:59.920 align:start position:32% line:-1
式の評価に使用します

00:02:00.888 --> 00:02:03.290 align:start position:34% line:-2
また デバッグ中に
変数の型を―

00:02:03.390 --> 00:02:08.328 align:start position:25% line:-2
マテリアライズできないことも
あります

00:02:08.729 --> 00:02:11.832 align:start position:34% line:-2
Xcodeでは
このような表示です

00:02:11.965 --> 00:02:16.270 align:start position:29% line:-2
左側の変数ビューに
変数名が並んでいますが―

00:02:16.370 --> 00:02:19.006 align:start position:32% line:-2
型や値は
表示されていませんね

00:02:19.106 --> 00:02:23.644 align:start position:29% line:-2
このようなエラーでは
変数の値が出力できません

00:02:24.745 --> 00:02:29.283 align:start position:29% line:-2
デバッグ情報が
生成されなかった問題も―

00:02:29.383 --> 00:02:33.720 align:start position:27% line:-2
皆さんのレポートのおかげで
解決できました

00:02:33.820 --> 00:02:39.259 align:start position:27% line:-2
デバッグ中に遭遇したバグを
報告してくださり―

00:02:39.359 --> 00:02:40.928 align:start position:41% line:-1
感謝します

00:02:41.161 --> 00:02:45.299 align:start position:29% line:-2
Xcode 10の問題を
見つけた場合は―

00:02:45.399 --> 00:02:47.568 align:start position:30% line:-1
今後も報告してください

00:02:47.668 --> 00:02:51.738 align:start position:30% line:-2
WWDCにご参加中なら
ラボに お立ち寄りを

00:02:51.839 --> 00:02:57.010 align:start position:30% line:-2
明日の午前９～12時に
ラボを実施します

00:02:57.110 --> 00:03:02.783 align:start position:27% line:-2
皆さんのプロジェクトを
エンジニアに見せてください

00:02:57.110 --> 00:03:02.783 align:start position:27% line:-2
皆さんのプロジェクトを
エンジニアに見せてください

00:03:05.519 --> 00:03:10.357 align:start position:27% line:-2
それでは私が気に入っている
デバッグの秘訣を―

00:03:10.457 --> 00:03:13.293 align:start position:29% line:-1
皆さんにお教えしましょう

00:03:13.393 --> 00:03:17.164 align:start position:32% line:-2
話すだけでなく
デモをご覧に入れます

00:03:18.298 --> 00:03:22.569 align:start position:43% line:-1
(拍手)

00:03:26.373 --> 00:03:31.612 align:start position:14% line:-2
使うのは Solar Systemという
iOSのアプリケーションです

00:03:31.712 --> 00:03:35.716 align:start position:27% line:-2
WWDCでご覧になった方も
いるでしょう

00:03:35.883 --> 00:03:39.853 align:start position:21% line:-2
その中のMoon Jumperの
デバッグです

00:03:40.387 --> 00:03:44.124 align:start position:34% line:-2
まずスマホを持って
ジャンプします

00:03:44.424 --> 00:03:48.328 align:start position:32% line:-2
するとジャンプの力が
月の重力に変換され

00:03:48.529 --> 00:03:53.133 align:start position:27% line:-2
月ならどの高さまで跳べたか
可視化されます

00:03:53.433 --> 00:03:55.702 align:start position:32% line:-1
バーでリミットを選び

00:03:55.802 --> 00:04:00.407 align:start position:27% line:-2
バーの高さまで跳べるように
挑戦します

00:03:55.802 --> 00:04:00.407 align:start position:27% line:-2
バーの高さまで跳べるように
挑戦します

00:04:01.008 --> 00:04:04.144 align:start position:29% line:-2
Moon Jumperに
補正を加えました

00:04:04.344 --> 00:04:09.950 align:start position:30% line:-2
視覚的な補正や
ゲームプレイモードです

00:04:10.083 --> 00:04:11.185 align:start position:38% line:-1
テストを行い―

00:04:11.285 --> 00:04:14.521 align:start position:36% line:-2
バグのリストが
上がってきました

00:04:14.755 --> 00:04:18.291 align:start position:27% line:-2
まず私が
iOSのバグに対処した後に

00:04:18.392 --> 00:04:22.596 align:start position:25% line:-2
セバスチャンが
macOSのバグを担当します

00:04:22.696 --> 00:04:27.434 align:start position:29% line:-2
バグをすべて修正するまで
Bashに行けません

00:04:27.534 --> 00:04:31.738 align:start position:27% line:-2
2000人の前でやるなんて
ワクワクしますね

00:04:33.040 --> 00:04:35.576 align:start position:32% line:-1
まず１番目のバグは―

00:04:35.742 --> 00:04:40.480 align:start position:30% line:-2
“アニメーションが
仕様どおりに動かない”

00:04:40.714 --> 00:04:45.719 align:start position:27% line:-2
迅速にデバッグするため
シミュレータに切り替えます

00:04:45.819 --> 00:04:49.056 align:start position:30% line:-2
タップを検出する設定を
したので―

00:04:49.156 --> 00:04:52.025 align:start position:30% line:-1
バーの高さまで跳びます

00:04:52.392 --> 00:04:57.598 align:start position:30% line:-2
バーまで跳ばないという
バグを再現しましょう

00:04:57.865 --> 00:05:02.836 align:start position:25% line:-2
エディタのジャンプ関数へ
Jump Barから移動し―

00:04:57.865 --> 00:05:02.836 align:start position:25% line:-2
エディタのジャンプ関数へ
Jump Barから移動し―

00:05:02.970 --> 00:05:05.339 align:start position:34% line:-2
ブレークポイントを
設定します

00:05:05.506 --> 00:05:10.143 align:start position:30% line:-2
タップでジャンプさせて
デバッガで停止します

00:05:10.511 --> 00:05:13.580 align:start position:32% line:-2
まず上部のタブバーを
見てください

00:05:13.680 --> 00:05:17.484 align:start position:21% line:-2
Xcodeが“Debug”タブを
生成しました

00:05:17.584 --> 00:05:23.023 align:start position:27% line:-2
タブで作業したい方のために
この動作が定義可能です

00:05:23.123 --> 00:05:26.727 align:start position:43% line:-1
(拍手)

00:05:26.927 --> 00:05:29.930 align:start position:30% line:-2
Xcodeメニューから
環境設定を開き

00:05:30.030 --> 00:05:33.066 align:start position:25% line:-2
“Behaviors”タブで
動作を設定します

00:05:33.167 --> 00:05:35.602 align:start position:36% line:-2
多くの動作を
設定できますが―

00:05:35.702 --> 00:05:40.674 align:start position:27% line:-2
今は 実行セクションの
一時停止の動作を設定します

00:05:40.774 --> 00:05:45.546 align:start position:30% line:-2
Xcodeがデバッガで
停止した際の動作です

00:05:45.646 --> 00:05:48.582 align:start position:27% line:-1
Debugタブが生成され―

00:05:48.682 --> 00:05:52.119 align:start position:34% line:-2
実行が停止した時に
切り替わります

00:05:52.219 --> 00:05:55.422 align:start position:34% line:-2
タブ好きには
うれしい設定ですね

00:05:55.656 --> 00:06:00.561 align:start position:5% line:-2
didReachSelectedHeightという
条件が見えます

00:05:55.656 --> 00:06:00.561 align:start position:5% line:-2
didReachSelectedHeightという
条件が見えます

00:06:00.661 --> 00:06:03.463 align:start position:32% line:-2
このプロパティの値を
確認しましょう

00:06:03.564 --> 00:06:05.632 align:start position:32% line:-2
デバッグコンソールに
切り替え―

00:06:05.732 --> 00:06:10.437 align:start position:27% line:-2
poでプロパティ値を見ると
trueになっています

00:06:11.038 --> 00:06:15.742 align:start position:30% line:-2
タップ検出を設定すると
trueになりますが―

00:06:15.843 --> 00:06:18.545 align:start position:36% line:-2
falseに変え
バグを再現します

00:06:18.645 --> 00:06:22.950 align:start position:25% line:-2
コードを変えて
falseに設定できますが―

00:06:23.050 --> 00:06:27.955 align:start position:27% line:-2
デバッグのためだけに
コードを変えるのは避けたい

00:06:28.055 --> 00:06:31.491 align:start position:27% line:-1
そこでデバッガを使うのです

00:06:31.725 --> 00:06:35.262 align:start position:23% line:-2
expressionコマンドを
使います

00:06:35.362 --> 00:06:39.766 align:start position:0% line:-2
例えば
didReachSelectedHeight = false

00:06:39.867 --> 00:06:42.402 align:start position:34% line:-2
これの評価と実行が
行われると―

00:06:42.503 --> 00:06:46.373 align:start position:29% line:-2
プロパティが
falseに変わりました

00:06:46.473 --> 00:06:51.578 align:start position:23% line:-2
“Step Over”ボタンで
falseのブランチに進みます

00:06:51.678 --> 00:06:57.150 align:start position:30% line:-2
再開すると 飛行士は
バーに到達せず倒れます

00:06:57.251 --> 00:07:00.954 align:start position:36% line:-2
一時停止して
式を入力せずに―

00:06:57.251 --> 00:07:00.954 align:start position:36% line:-2
一時停止して
式を入力せずに―

00:07:01.054 --> 00:07:05.492 align:start position:30% line:-2
タップするたびに
これを再現したいのです

00:07:05.592 --> 00:07:08.962 align:start position:29% line:-2
そこでブレークポイントを
設定します

00:07:09.363 --> 00:07:12.900 align:start position:14% line:-2
右クリックで
“Edit Breakpoint”を選択

00:07:13.000 --> 00:07:14.935 align:start position:34% line:-1
ポップオーバーで―

00:07:15.035 --> 00:07:18.772 align:start position:29% line:-2
ブレークポイントの動作を
カスタマイズできます

00:07:18.872 --> 00:07:21.408 align:start position:12% line:-1
“Debugger Command”を選択

00:07:21.508 --> 00:07:27.214 align:start position:16% line:-2
先ほど使った
expressionコマンドを入力し―

00:07:27.981 --> 00:07:30.317 align:start position:30% line:-1
自動で再開するよう設定

00:07:30.417 --> 00:07:35.355 align:start position:29% line:-2
つまりブレークポイントが
式を実行させて

00:07:35.455 --> 00:07:39.760 align:start position:29% line:-2
プロパティの値を変え
自動的に再開させるのです

00:07:39.960 --> 00:07:44.965 align:start position:29% line:-2
飛行士をタップするたび
ジャンプに失敗し倒れます

00:07:45.165 --> 00:07:47.534 align:start position:29% line:-1
ここで修正すべきなのは？

00:07:47.634 --> 00:07:51.371 align:start position:29% line:-2
倒れた後に
立ち上がらねばなりません

00:07:51.471 --> 00:07:52.973 align:start position:38% line:-1
修正しましょう

00:07:53.607 --> 00:07:57.711 align:start position:7% line:-2
updateUIForJumpFailedという
関数に移動

00:07:57.811 --> 00:08:02.850 align:start position:18% line:-2
UIKit Dynamicsで失敗を
シミュレートしています

00:07:57.811 --> 00:08:02.850 align:start position:18% line:-2
UIKit Dynamicsで失敗を
シミュレートしています

00:08:02.950 --> 00:08:06.153 align:start position:14% line:-2
まずUIDynamicAnimatorを
作成し

00:08:06.253 --> 00:08:09.323 align:start position:34% line:-2
関数で動作を追加し
物理効果を作成

00:08:09.423 --> 00:08:12.926 align:start position:9% line:-2
dynamicAnimatorDidPause
デリゲートコールバックで

00:08:13.026 --> 00:08:17.064 align:start position:34% line:-2
飛行士は向きを変え
中央に戻るはずです

00:08:17.364 --> 00:08:19.666 align:start position:30% line:-1
下にスクロールすると―

00:08:19.766 --> 00:08:22.836 align:start position:29% line:-2
デリゲートコールバックが
実装されてます

00:08:22.970 --> 00:08:26.106 align:start position:30% line:-2
しかし ここは
デリゲートが未設定です

00:08:26.373 --> 00:08:31.512 align:start position:29% line:-2
ここにコードを追加すれば
問題を修正できるでしょう

00:08:31.612 --> 00:08:35.982 align:start position:27% line:-2
再コンパイルと再実行を行い
修正を検証しますが―

00:08:36.082 --> 00:08:38.652 align:start position:32% line:-2
このサイクルを
ショートカットしたい

00:08:38.751 --> 00:08:42.222 align:start position:29% line:-2
そこでブレークポイントで
変更を挿入し

00:08:42.322 --> 00:08:46.527 align:start position:27% line:-2
素早く便利に修正する方法を
お見せします

00:08:46.627 --> 00:08:50.964 align:start position:27% line:-2
ブレークポイントを作るため
ダブルクリックで―

00:08:51.098 --> 00:08:53.367 align:start position:32% line:-2
エディタウインドウを
開きます

00:08:53.467 --> 00:08:57.037 align:start position:16% line:-1
再びDebugger Commandで

00:08:57.137 --> 00:09:01.141 align:start position:32% line:-2
問題を修正するための
コード行を入力します

00:08:57.137 --> 00:09:01.141 align:start position:32% line:-2
問題を修正するための
コード行を入力します

00:09:01.275 --> 00:09:03.410 align:start position:30% line:-1
そして再開するよう設定

00:09:03.510 --> 00:09:07.114 align:start position:29% line:-2
コードを変更しても
再コンパイルは まだです

00:09:07.214 --> 00:09:10.818 align:start position:27% line:-2
カスタムブレークポイントで
変更を挿入すると―

00:09:10.918 --> 00:09:13.954 align:start position:27% line:-2
実行中のアプリケーションで
テストできます

00:09:14.421 --> 00:09:18.125 align:start position:27% line:-2
タップすると
ジャンプに失敗し倒れますが

00:09:18.225 --> 00:09:20.894 align:start position:38% line:-2
立ち上がるので
修正は成功です

00:09:20.994 --> 00:09:22.896 align:start position:30% line:-1
もう１回 やりましょう

00:09:22.996 --> 00:09:28.535 align:start position:43% line:-1
(拍手)

00:09:28.635 --> 00:09:31.071 align:start position:30% line:-1
再びメモを開きましょう

00:09:31.805 --> 00:09:36.410 align:start position:27% line:-2
１番目のバグは修正したので
チェックを入れます

00:09:36.677 --> 00:09:39.413 align:start position:32% line:-1
とてもいい気分ですね

00:09:39.513 --> 00:09:43.250 align:start position:27% line:-2
次の３つは
ゲームプレイモード関係です

00:09:43.350 --> 00:09:45.819 align:start position:29% line:-1
シミュレータで再生します

00:09:45.919 --> 00:09:49.289 align:start position:29% line:-2
バーより高く
10回 跳ぶという挑戦で

00:09:49.389 --> 00:09:52.159 align:start position:36% line:-2
バーの高さは
毎回 上がります

00:09:53.193 --> 00:09:56.396 align:start position:25% line:-2
上部に“Score”ラベルが
表示されます

00:09:56.497 --> 00:10:00.767 align:start position:29% line:-2
まだ飛行士は
ジャンプを失敗しますが―

00:09:56.497 --> 00:10:00.767 align:start position:29% line:-2
まだ飛行士は
ジャンプを失敗しますが―

00:10:00.868 --> 00:10:04.638 align:start position:25% line:-2
“Attempts”の回数が
増えません

00:10:04.738 --> 00:10:08.542 align:start position:29% line:-2
ラベルが変わらないという
２番目のバグです

00:10:08.642 --> 00:10:12.513 align:start position:30% line:-2
さらに ゲーム終了が
正常でないという問題と

00:10:12.613 --> 00:10:16.884 align:start position:32% line:-2
ラベルのレイアウトに
関する問題もあります

00:10:16.984 --> 00:10:20.220 align:start position:34% line:-2
２番目のバグに戻り
タップしましょう

00:10:20.320 --> 00:10:23.056 align:start position:20% line:-1
Attemptsラベルに ご注目を

00:10:23.190 --> 00:10:26.026 align:start position:34% line:-2
フラッシュしますが
変わりません

00:10:26.126 --> 00:10:31.064 align:start position:25% line:-2
アニメーションが遷移するので
値は設定されていますが―

00:10:31.398 --> 00:10:32.699 align:start position:36% line:-1
不正な値なのです

00:10:32.799 --> 00:10:36.236 align:start position:29% line:-2
ラベルを変更するコードを
見つけて―

00:10:36.336 --> 00:10:38.605 align:start position:29% line:-1
ロジックを確認しましょう

00:10:38.805 --> 00:10:41.775 align:start position:29% line:-2
UILabelで
テキストプロパティは変更

00:10:41.875 --> 00:10:44.344 align:start position:30% line:-2
ブレークポイント
ナビゲータに切り替えて

00:10:44.444 --> 00:10:49.750 align:start position:27% line:-2
下のプラスボタンから
ブレークポイントを選びます

00:10:49.850 --> 00:10:53.987 align:start position:30% line:-2
これらの選択肢の中から
私たちが使うのは―

00:10:54.087 --> 00:10:56.723 align:start position:32% line:-2
シンボリック
ブレークポイントです

00:10:57.224 --> 00:11:02.129 align:start position:29% line:-2
新しいブレークポイントの
エディタが開くので

00:10:57.224 --> 00:11:02.129 align:start position:29% line:-2
新しいブレークポイントの
エディタが開くので

00:11:02.429 --> 00:11:08.101 align:start position:11% line:-2
“-[UILabel setText:]”と
この場合は入力します

00:11:08.368 --> 00:11:13.373 align:start position:20% line:-2
UIKitでは
Objective-Cで記述します

00:11:13.540 --> 00:11:17.277 align:start position:29% line:-2
これを消すと
ブレークポイントの下に―

00:11:17.377 --> 00:11:19.279 align:start position:32% line:-1
行が追加されています

00:11:19.379 --> 00:11:23.717 align:start position:20% line:-2
UIKit Coreの１つの場所に
解決したという―

00:11:23.817 --> 00:11:25.986 align:start position:34% line:-1
フィードバックです

00:11:26.086 --> 00:11:29.456 align:start position:30% line:-2
複数の場所になる場合も
あります

00:11:29.556 --> 00:11:31.325 align:start position:36% line:-1
１つもなければ―

00:11:31.425 --> 00:11:36.063 align:start position:27% line:-2
ブレークポイントが
できなかったということです

00:11:36.363 --> 00:11:40.167 align:start position:30% line:-2
ここで もう一度
飛行士をタップすると―

00:11:40.400 --> 00:11:43.737 align:start position:20% line:-2
setTextでブレークポイントに
達します

00:11:43.837 --> 00:11:48.408 align:start position:29% line:-2
表示はソースコードでなく
アセンブリコードです

00:11:48.509 --> 00:11:54.314 align:start position:29% line:-2
システムフレームワークの
アセンブリコードでも―

00:11:54.414 --> 00:11:57.618 align:start position:32% line:-2
関数に渡された引数を
調べられます

00:11:57.718 --> 00:12:02.856 align:start position:27% line:-2
呼び出し規約が分かれば
レジスタを調べられるのです

00:11:57.718 --> 00:12:02.856 align:start position:27% line:-2
呼び出し規約が分かれば
レジスタを調べられるのです

00:12:02.956 --> 00:12:06.894 align:start position:34% line:-2
私もレジスタを
覚えていませんが―

00:12:06.994 --> 00:12:11.298 align:start position:29% line:-2
デバッガが疑似レジスタを
提供してくれます

00:12:11.398 --> 00:12:15.836 align:start position:27% line:-2
$arg1が 第１引数を
保持するレジスタに変換され

00:12:15.936 --> 00:12:21.575 align:start position:20% line:-2
Objective-Cのレシーバが
表示されます

00:12:22.042 --> 00:12:24.912 align:start position:34% line:-2
“17フィート”と
表示されていますね

00:12:25.012 --> 00:12:27.848 align:start position:29% line:-1
この高さラベルのことです

00:12:27.948 --> 00:12:31.818 align:start position:32% line:-2
私たちに必要ないので
他の引数を見ます

00:12:32.119 --> 00:12:37.391 align:start position:27% line:-2
ご存じの方もいるでしょうが
第２引数はセレクタです

00:12:37.591 --> 00:12:42.029 align:start position:21% line:-2
LLDBが暗黙的に認識しないため
表示されません

00:12:42.129 --> 00:12:46.466 align:start position:29% line:-2
型変換して セレクタを
表示させる場合もあります

00:12:46.700 --> 00:12:51.371 align:start position:30% line:-2
第３引数は メソッドに
渡されたパラメータです

00:12:51.471 --> 00:12:55.409 align:start position:32% line:-2
setTextに
渡された文字列なので

00:12:55.509 --> 00:13:00.214 align:start position:27% line:-2
アセンブリフレームで
引数を調べるのに好都合です

00:12:55.509 --> 00:13:00.214 align:start position:27% line:-2
アセンブリフレームで
引数を調べるのに好都合です

00:13:00.914 --> 00:13:05.152 align:start position:27% line:-2
でも目的のものでないので
continueを押すと―

00:13:05.252 --> 00:13:07.754 align:start position:27% line:-1
ブレークポイントに達します

00:13:07.855 --> 00:13:10.824 align:start position:23% line:-1
$arg1でレシーバを調べると

00:13:10.924 --> 00:13:14.261 align:start position:27% line:-2
高さラベルが
“０フィート”になってます

00:13:14.361 --> 00:13:16.430 align:start position:34% line:-1
問題が分かりました

00:13:17.097 --> 00:13:21.201 align:start position:32% line:-2
ジャンプすると同時に
高さラベルが更新され

00:13:21.301 --> 00:13:26.373 align:start position:27% line:-2
かなり頻繁に
ブレークポイントに達します

00:13:26.473 --> 00:13:32.246 align:start position:20% line:-2
setTextのブレークポイントに
達するのは非常に困難です

00:13:32.346 --> 00:13:36.350 align:start position:34% line:-2
そこでシンボリック
ブレークポイントを

00:13:36.450 --> 00:13:40.687 align:start position:32% line:-2
ジャンプ終了後だけに
設定してみましょう

00:13:41.121 --> 00:13:46.059 align:start position:27% line:-2
ナビゲータでインジケータを
ダブルクリックすると

00:13:46.159 --> 00:13:48.095 align:start position:34% line:-1
エディタが開きます

00:13:48.195 --> 00:13:52.733 align:start position:20% line:-2
“Condition”に
trueかfalseになる式を入れ

00:13:52.833 --> 00:13:56.103 align:start position:25% line:-2
trueの時だけ
ブレークポイントを起動します

00:13:56.203 --> 00:13:59.439 align:start position:36% line:-2
もしプロパティが
分かっていれば―

00:13:59.540 --> 00:14:03.744 align:start position:29% line:-2
式を編集して
テストすることができます

00:13:59.540 --> 00:14:03.744 align:start position:29% line:-2
式を編集して
テストすることができます

00:14:03.844 --> 00:14:07.047 align:start position:32% line:-2
プロパティがないので
別の方法を見せます

00:14:07.147 --> 00:14:09.416 align:start position:30% line:-2
シンボリック
ブレークポイントを消し

00:14:09.516 --> 00:14:14.588 align:start position:16% line:-2
jumpCompletedという関数で
ブレークポイントを設定

00:14:14.688 --> 00:14:18.158 align:start position:30% line:-2
アニメーション終了後に
関数が呼び出され

00:14:18.258 --> 00:14:20.894 align:start position:23% line:-1
UIとゲームの状態を更新します

00:14:21.094 --> 00:14:23.997 align:start position:32% line:-1
ここでやりたいのは―

00:14:24.097 --> 00:14:29.536 align:start position:23% line:-2
シンボリックブレークポイントの
setTextへの設定です

00:14:29.636 --> 00:14:32.339 align:start position:14% line:-1
Debugger Commandを加えて

00:14:32.439 --> 00:14:37.010 align:start position:16% line:-2
“breakpoint set”続いて
“one-shot true”と入力

00:14:37.110 --> 00:14:41.014 align:start position:34% line:-2
これは一時的な
ブレークポイントで

00:14:41.114 --> 00:14:43.684 align:start position:25% line:-1
起動後 自動的に削除されます

00:14:44.084 --> 00:14:48.155 align:start position:18% line:-2
UILabel setTextという
名前を与えて

00:14:48.255 --> 00:14:50.357 align:start position:30% line:-1
自動で再開するよう設定

00:14:50.457 --> 00:14:56.663 align:start position:9% line:-2
これで jumpCompletedという関数の
実行が開始されると

00:14:56.763 --> 00:15:01.535 align:start position:27% line:-2
一時的なブレークポイントが
設定され 再開します

00:14:56.763 --> 00:15:01.535 align:start position:27% line:-2
一時的なブレークポイントが
設定され 再開します

00:15:01.635 --> 00:15:06.106 align:start position:29% line:-2
ブレークポイントには
実行開始後に達するのです

00:15:06.206 --> 00:15:10.410 align:start position:29% line:-2
再開を押すと
シミュレータでジャンプし

00:15:10.911 --> 00:15:13.981 align:start position:27% line:-2
setTextで
ブレークポイントに達します

00:15:14.081 --> 00:15:19.219 align:start position:27% line:-2
それではpo $arg1で
レシーバを調べましょう

00:15:19.319 --> 00:15:23.423 align:start position:21% line:-2
別のUILabelインスタンスで
値は“０”です

00:15:23.524 --> 00:15:25.893 align:start position:38% line:-2
上部のラベルの
どちらかですね

00:15:25.993 --> 00:15:31.031 align:start position:29% line:-2
目的のオブジェクトなので
コードを確認しましょう

00:15:31.198 --> 00:15:35.302 align:start position:29% line:-2
スタックの次のフレームを
選択します

00:15:35.402 --> 00:15:38.038 align:start position:34% line:-2
ラベル値を
変更するコードです

00:15:38.138 --> 00:15:42.643 align:start position:25% line:-2
labelText変数を使い
現在は“０”ですね

00:15:42.743 --> 00:15:48.248 align:start position:27% line:-2
上部で ラベルのテキストは
現在の値に設定されています

00:15:48.348 --> 00:15:52.519 align:start position:30% line:-2
値のテキストは
新しい値を含む変数で―

00:15:52.619 --> 00:15:54.922 align:start position:27% line:-1
誤字のようなので修正します

00:15:55.556 --> 00:15:57.457 align:start position:25% line:-1
valueTextに変えます

00:16:00.260 --> 00:16:04.932 align:start position:27% line:-2
再コンパイルと再実行を行い
テストする代わりに

00:16:05.232 --> 00:16:10.904 align:start position:27% line:-2
実行中のアプリケーションで
変更をテストしましょう

00:16:11.004 --> 00:16:15.742 align:start position:25% line:-2
現在の行の下に
ブレークポイントを設定します

00:16:15.843 --> 00:16:17.744 align:start position:29% line:-1
ラベルを設定したままで―

00:16:17.845 --> 00:16:21.381 align:start position:30% line:-2
正しい値に設定する行を
追加します

00:16:21.482 --> 00:16:25.786 align:start position:27% line:-2
カスタムブレークポイントで
コードを挿入し

00:16:25.886 --> 00:16:29.089 align:start position:34% line:-2
自動で再開するよう
設定します

00:16:29.623 --> 00:16:33.827 align:start position:30% line:-2
再開を押すと
コードの実行が再開され

00:16:33.927 --> 00:16:38.665 align:start position:29% line:-2
Attemptsラベルが
更新されました

00:16:38.765 --> 00:16:39.867 align:start position:41% line:-1
ありがとう

00:16:39.967 --> 00:16:44.138 align:start position:43% line:-1
(拍手)

00:16:44.671 --> 00:16:48.809 align:start position:32% line:-2
Scoreラベルでも
確認してみます

00:16:48.909 --> 00:16:51.645 align:start position:32% line:-1
こちらに戻りましょう

00:16:51.745 --> 00:16:57.351 align:start position:27% line:-2
一時的なブレークポイントは
もう不要なので消します

00:16:57.451 --> 00:17:02.623 align:start position:9% line:-2
didReachSelectedHeightは
変更しません

00:16:57.451 --> 00:17:02.623 align:start position:9% line:-2
didReachSelectedHeightは
変更しません

00:17:02.723 --> 00:17:05.626 align:start position:36% line:-2
タップすると
うまくジャンプし

00:17:05.726 --> 00:17:09.762 align:start position:27% line:-2
どのラベルも更新されたので
修正成功です

00:17:11.265 --> 00:17:13.467 align:start position:29% line:-1
バグにチェックを入れます

00:17:14.101 --> 00:17:17.738 align:start position:30% line:-2
次のバグは
ゲーム終了に関してです

00:17:18.806 --> 00:17:22.075 align:start position:34% line:-2
10回の挑戦で
ゲームは終わります

00:17:22.175 --> 00:17:27.481 align:start position:29% line:-2
目的の状態を再現するため
タップして待つ方法では―

00:17:27.580 --> 00:17:33.387 align:start position:27% line:-2
時間がかかるうえに 何度も
繰り返す必要があります

00:17:33.487 --> 00:17:36.657 align:start position:32% line:-2
アニメーションを
スキップする方法を―

00:17:36.823 --> 00:17:38.225 align:start position:36% line:-1
お見せしましょう

00:17:38.826 --> 00:17:42.496 align:start position:5% line:-2
updateUIForJumpSucceededに
移動します

00:17:42.896 --> 00:17:46.166 align:start position:34% line:-2
この関数は
色を変更した後に―

00:17:46.266 --> 00:17:49.036 align:start position:0% line:-2
jumpAstronaut(animated: true)を
呼び出します

00:17:49.136 --> 00:17:52.072 align:start position:25% line:-1
これをfalseにしましょう

00:17:52.172 --> 00:17:57.878 align:start position:23% line:-2
今回も デバッグのために
コードを変えるのは避けたいので

00:17:57.978 --> 00:18:02.015 align:start position:27% line:-2
代わりにブレークポイントを
この行に設定します

00:17:57.978 --> 00:18:02.015 align:start position:27% line:-2
代わりにブレークポイントを
この行に設定します

00:18:02.115 --> 00:18:06.253 align:start position:30% line:-2
コンソールの入力を消し
タップすると

00:18:06.353 --> 00:18:08.021 align:start position:34% line:-1
この行で停止します

00:18:08.155 --> 00:18:13.594 align:start position:23% line:-2
falseに置き換えたいですが
コンパイル済みなので―

00:18:13.694 --> 00:18:15.863 align:start position:30% line:-1
コードを置換できません

00:18:15.963 --> 00:18:20.534 align:start position:29% line:-2
そこで この行を実行せず
スキップさせて

00:18:20.634 --> 00:18:25.005 align:start position:30% line:-2
expressionで
変更を挿入しましょう

00:18:25.105 --> 00:18:26.807 align:start position:32% line:-1
行をスキップさせます

00:18:26.907 --> 00:18:32.513 align:start position:20% line:-2
緑のラベルの“Thread 1”は
命令ポインタと呼ばれ

00:18:32.613 --> 00:18:36.350 align:start position:30% line:-2
次に実行する命令の行を
示しています

00:18:36.450 --> 00:18:42.656 align:start position:21% line:-2
このアイコンをクリックしながら
マウスを動かせば行を移動できます

00:18:42.756 --> 00:18:48.061 align:start position:30% line:-2
停止中は変更できるので
下の行に動かしましょう

00:18:48.161 --> 00:18:50.898 align:start position:29% line:-1
恐ろしげな警告が出ました

00:18:50.998 --> 00:18:55.169 align:start position:38% line:-2
大いなる力には
責任が伴います

00:18:55.269 --> 00:18:59.873 align:start position:29% line:-2
今日 ご紹介する中で
最もリスクが高い方法です

00:18:59.973 --> 00:19:03.610 align:start position:32% line:-2
アプリケーションへの
影響とは関係なく―

00:18:59.973 --> 00:19:03.610 align:start position:32% line:-2
アプリケーションへの
影響とは関係なく―

00:19:03.710 --> 00:19:07.080 align:start position:27% line:-2
ポインタを
どこにでも動かせるからです

00:19:07.181 --> 00:19:12.853 align:start position:27% line:-2
例えば 初期設定していない
オブジェクトを示せば―

00:19:12.953 --> 00:19:15.222 align:start position:27% line:-1
メモリ管理の問題が生じます

00:19:15.322 --> 00:19:18.692 align:start position:36% line:-2
しかし上級者用の
セッションなので

00:19:18.792 --> 00:19:20.327 align:start position:39% line:-1
続けましょう

00:19:21.662 --> 00:19:27.501 align:start position:20% line:-2
expressionコマンドを使い
falseを呼び出します

00:19:29.102 --> 00:19:31.572 align:start position:30% line:-1
再開を押して動かすと―

00:19:31.738 --> 00:19:36.276 align:start position:27% line:-2
アニメーションをスキップし
ゲームの状態を更新

00:19:37.277 --> 00:19:39.813 align:start position:34% line:-2
タップのたびに
実行されるように―

00:19:39.913 --> 00:19:43.116 align:start position:34% line:-2
ブレークポイントを
設定します

00:19:43.684 --> 00:19:47.588 align:start position:27% line:-2
まずは
行を１つスキップさせるので

00:19:47.688 --> 00:19:51.592 align:start position:9% line:-2
“thread jump”続いて“by 1”の
コマンドを入力

00:19:51.692 --> 00:19:56.697 align:start position:29% line:-2
これで現在のスレッドの
コードを１行 飛ばします

00:19:56.797 --> 00:19:59.566 align:start position:29% line:-1
次に式を呼び出すために―

00:19:59.666 --> 00:20:04.304 align:start position:32% line:-2
プラスボタンを押し
コマンドを追加します

00:19:59.666 --> 00:20:04.304 align:start position:32% line:-2
プラスボタンを押し
コマンドを追加します

00:20:04.805 --> 00:20:08.709 align:start position:16% line:-2
jumpAstronaut
(animated: false)です

00:20:08.876 --> 00:20:10.577 align:start position:38% line:-1
自動再開も設定

00:20:10.677 --> 00:20:15.549 align:start position:27% line:-2
そしてブレークポイントまで
実行されれば

00:20:15.649 --> 00:20:19.019 align:start position:30% line:-2
実行前に
ブレークポイントが起動

00:20:19.119 --> 00:20:21.822 align:start position:34% line:-2
コマンドが実行され
１行 スキップ

00:20:21.922 --> 00:20:27.227 align:start position:20% line:-2
そして代わりの関数を
expressionで呼び出します

00:20:27.327 --> 00:20:29.630 align:start position:32% line:-2
これで
飛行士をタップすると

00:20:29.730 --> 00:20:34.968 align:start position:27% line:-2
アニメーションをスキップし
簡単にバグが再現できます

00:20:35.369 --> 00:20:40.541 align:start position:27% line:-2
10回の挑戦で終わるはずが
かなり過ぎていますね

00:20:40.641 --> 00:20:43.844 align:start position:38% line:-2
ゲームの状態を
見てみましょう

00:20:44.177 --> 00:20:47.981 align:start position:20% line:-2
gamePlayというプロパティに
あります

00:20:48.081 --> 00:20:52.219 align:start position:29% line:-2
ブレークポイントを設定し
ジャンプすると

00:20:52.319 --> 00:20:55.389 align:start position:34% line:-2
プロパティの次の
リファレンスで停止

00:20:55.656 --> 00:20:59.092 align:start position:32% line:-2
poでオブジェクトの
現在の状態を出すと

00:20:59.193 --> 00:21:02.896 align:start position:25% line:-1
デバッグの記述が確認できます

00:20:59.193 --> 00:21:02.896 align:start position:25% line:-1
デバッグの記述が確認できます

00:21:03.030 --> 00:21:05.199 align:start position:30% line:-1
これはカスタム記述です

00:21:05.299 --> 00:21:09.937 align:start position:27% line:-2
poはプログラムの
デバッグの記述を要求します

00:21:10.037 --> 00:21:11.638 align:start position:27% line:-1
これはカスタマイズ可能です

00:21:11.738 --> 00:21:16.410 align:start position:30% line:-2
ソースコードに切り替え
下までスクロールします

00:21:16.510 --> 00:21:22.049 align:start position:0% line:-2
CustomDebugStringConvertibleに
GamePlayが拡張

00:21:22.149 --> 00:21:27.788 align:start position:14% line:-2
debugDescriptionを実装し
Stringを返しています

00:21:27.888 --> 00:21:33.894 align:start position:23% line:-2
デバッグのために
どんなStringでも返せます

00:21:34.061 --> 00:21:39.266 align:start position:16% line:-2
Objective-Cオブジェクトでも
同様です

00:21:39.800 --> 00:21:42.402 align:start position:23% line:-2
p gamePlayコマンドと
比較します

00:21:43.036 --> 00:21:46.974 align:start position:25% line:-1
pはLLDBの代替コマンドで

00:21:47.074 --> 00:21:50.811 align:start position:30% line:-2
組み込みフォーマッタを
使います

00:21:50.911 --> 00:21:53.480 align:start position:30% line:-1
２種類の表示が出ました

00:21:53.580 --> 00:21:56.750 align:start position:29% line:-2
デフォルトフォーマッタは
完全修飾型名と―

00:21:56.850 --> 00:22:00.220 align:start position:32% line:-2
メモリアドレスと
プロパティなどを表示

00:21:56.850 --> 00:22:00.220 align:start position:32% line:-2
メモリアドレスと
プロパティなどを表示

00:22:00.320 --> 00:22:04.191 align:start position:30% line:-2
最大の挑戦回数は10で
正しい設定なので

00:22:04.291 --> 00:22:06.927 align:start position:30% line:-1
論理エラーのようですね

00:22:07.027 --> 00:22:12.199 align:start position:29% line:-2
挑戦回数が最大を超えても
判断できないのです

00:22:12.299 --> 00:22:16.203 align:start position:27% line:-2
挑戦回数を変更するコードを
見つけましょう

00:22:16.370 --> 00:22:20.674 align:start position:16% line:-2
変数ビューを開いて
View Controllerを展開し

00:22:20.774 --> 00:22:25.612 align:start position:25% line:-2
下のフィルタに
gamePlayと入力します

00:22:25.712 --> 00:22:29.449 align:start position:30% line:-2
プロパティを展開し
attemptsを選択

00:22:29.550 --> 00:22:35.422 align:start position:16% line:-2
コンテキストメニューを開き
Watch “attempts”を選択

00:22:36.223 --> 00:22:39.526 align:start position:34% line:-2
ウォッチポイントが
生成されます

00:22:39.626 --> 00:22:42.296 align:start position:34% line:-2
ブレークポイント
ナビゲータの下部に

00:22:42.396 --> 00:22:46.733 align:start position:21% line:-2
Watchpointsという名の
グループとができます

00:22:46.833 --> 00:22:48.735 align:start position:32% line:-1
ウォッチポイントは―

00:22:48.836 --> 00:22:52.539 align:start position:29% line:-2
変数の値が変更された時に
停止します

00:22:52.639 --> 00:22:57.144 align:start position:29% line:-2
不要なブレークポイントを
消して 再開を押すと

00:22:57.244 --> 00:22:59.112 align:start position:30% line:-1
ウォッチポイントで停止

00:22:59.213 --> 00:23:02.216 align:start position:34% line:-2
これが挑戦回数を
変更するコードです

00:22:59.213 --> 00:23:02.216 align:start position:34% line:-2
これが挑戦回数を
変更するコードです

00:23:03.116 --> 00:23:05.519 align:start position:34% line:-2
ウォッチポイントは
無効にします

00:23:05.619 --> 00:23:10.591 align:start position:29% line:-2
これらは挑戦回数と
スコアを増やすコードです

00:23:10.691 --> 00:23:14.661 align:start position:30% line:-2
最大回数を超えた時
終了させるロジックは―

00:23:14.761 --> 00:23:17.030 align:start position:38% line:-1
見当たりません

00:23:17.130 --> 00:23:20.901 align:start position:30% line:-2
材料は そろいましたが
コードを変える前に―

00:23:21.001 --> 00:23:23.170 align:start position:34% line:-1
私の仮説を試します

00:23:23.270 --> 00:23:25.339 align:start position:29% line:-1
ブレークポイントを作成し

00:23:25.439 --> 00:23:30.377 align:start position:32% line:-2
問題を修正できるか
変更を挿入してみます

00:23:30.477 --> 00:23:35.115 align:start position:14% line:-2
Debugger Commandを加えて
expressionを使用

00:23:35.215 --> 00:23:40.521 align:start position:23% line:-2
最大回数を超えたら
ゲーム状態は終了するよう設定し

00:23:41.088 --> 00:23:42.856 align:start position:38% line:-1
自動再開も設定

00:23:42.956 --> 00:23:46.760 align:start position:32% line:-2
問題が修正されるか
再開してテストします

00:23:46.860 --> 00:23:52.733 align:start position:27% line:-2
ブレークポイント後も続行し
うまく修正されたようです

00:23:52.833 --> 00:23:54.868 align:start position:34% line:-1
最初から検証します

00:23:54.968 --> 00:23:59.873 align:start position:16% line:-2
“Play Again”をクリックして
挑戦を10回させ

00:23:59.973 --> 00:24:04.745 align:start position:30% line:-2
ゲーム終了となったので
修正は成功です

00:23:59.973 --> 00:24:04.745 align:start position:30% line:-2
ゲーム終了となったので
修正は成功です

00:24:05.212 --> 00:24:11.919 align:start position:43% line:-1
(拍手)

00:24:12.219 --> 00:24:14.188 align:start position:29% line:-1
コードに適用してください

00:24:14.288 --> 00:24:17.558 align:start position:30% line:-2
コピーして
ブレークポイントを消し

00:24:17.658 --> 00:24:20.027 align:start position:32% line:-1
ペーストで挿入します

00:24:20.360 --> 00:24:23.797 align:start position:32% line:-2
３番目をチェックして
残り１つは―

00:24:23.897 --> 00:24:26.633 align:start position:30% line:-1
ラベルのレイアウトです

00:24:26.733 --> 00:24:30.404 align:start position:29% line:-2
レイアウトを
任されたエンジニアたちは

00:24:30.504 --> 00:24:35.409 align:start position:27% line:-2
左右の上端が
効率的な場所だと考えました

00:24:35.509 --> 00:24:40.848 align:start position:32% line:-2
しかしチームの判断で
差し戻されたので

00:24:40.948 --> 00:24:44.618 align:start position:34% line:-2
新しいレイアウトを
試作しましょう

00:24:44.718 --> 00:24:47.321 align:start position:29% line:-2
グラフィック
アプリケーションではなく

00:24:47.421 --> 00:24:49.590 align:start position:34% line:-1
コードで試作します

00:24:49.690 --> 00:24:52.326 align:start position:29% line:-2
私は
デバッガエンジニアなので

00:24:52.426 --> 00:24:55.662 align:start position:34% line:-2
実行しながら
デバッガを使います

00:24:58.432 --> 00:25:03.070 align:start position:29% line:-2
ブレークポイントを
ジャンプ関数に設定します

00:24:58.432 --> 00:25:03.070 align:start position:29% line:-2
ブレークポイントを
ジャンプ関数に設定します

00:25:03.170 --> 00:25:07.574 align:start position:29% line:-2
ビューへのリファレンスを
まず見つけましょう

00:25:07.674 --> 00:25:10.144 align:start position:34% line:-1
入力をすべて消去し

00:25:10.244 --> 00:25:15.883 align:start position:27% line:-2
新たにジャンプさせて
ジャンプ関数で停止させます

00:25:15.983 --> 00:25:20.387 align:start position:30% line:-2
ビューのプロパティや
アウトレットがなければ

00:25:20.487 --> 00:25:22.756 align:start position:29% line:-1
メモリアドレスが必要です

00:25:22.856 --> 00:25:26.126 align:start position:29% line:-2
それを見つけて
ビューを操作する方法を―

00:25:26.226 --> 00:25:28.095 align:start position:39% line:-1
ご紹介します

00:25:28.195 --> 00:25:29.696 align:start position:32% line:-1
デバッグの記述には―

00:25:30.230 --> 00:25:32.866 align:start position:29% line:-1
カスタム記述が含まれます

00:25:32.966 --> 00:25:37.337 align:start position:27% line:-2
UIViewの
デフォルトデバッグの記述に

00:25:37.438 --> 00:25:40.107 align:start position:29% line:-2
クラスとメモリアドレスが
含まれます

00:25:40.207 --> 00:25:45.112 align:start position:29% line:-2
デバッグの記述を得るのが
１つの方法ですが

00:25:45.212 --> 00:25:48.649 align:start position:32% line:-2
プロパティがあるので
簡単です

00:25:48.749 --> 00:25:52.686 align:start position:16% line:-2
View Controllerビューの
下のビューは？

00:25:52.786 --> 00:25:56.957 align:start position:32% line:-2
ビュー階層を見るには
このボタンで―

00:25:57.057 --> 00:25:59.893 align:start position:27% line:-1
ビューデバッガを起動します

00:25:59.993 --> 00:26:03.130 align:start position:29% line:-2
階層のスナップショットが
3Dになり

00:25:59.993 --> 00:26:03.130 align:start position:29% line:-2
階層のスナップショットが
3Dになり

00:26:03.230 --> 00:26:05.532 align:start position:29% line:-1
ビューを調べられるのです

00:26:05.632 --> 00:26:07.601 align:start position:27% line:-1
後でセバスチャンが話します

00:26:07.701 --> 00:26:09.303 align:start position:34% line:-1
私が紹介するのは―

00:26:09.403 --> 00:26:14.374 align:start position:29% line:-2
デバッグコンソールで
単純な階層を見る方法です

00:26:14.741 --> 00:26:19.413 align:start position:9% line:-2
recursiveDescriptionという
デバッグ関数を使います

00:26:20.280 --> 00:26:24.251 align:start position:11% line:-2
po self.view.
recursiveDescriptionです

00:26:24.751 --> 00:26:27.321 align:start position:30% line:-1
うまくいかない場合は？

00:26:27.588 --> 00:26:30.390 align:start position:23% line:-2
この関数は
デバッグのために存在するので―

00:26:30.490 --> 00:26:35.195 align:start position:29% line:-2
パブリックAPIではなく
Swiftで使えません

00:26:35.529 --> 00:26:40.434 align:start position:23% line:-2
定義されていない関数は
Swiftで呼び出せないのです

00:26:40.534 --> 00:26:45.639 align:start position:23% line:-2
しかしObjective-Cは
ダイナミックな言語で

00:26:45.739 --> 00:26:49.076 align:start position:36% line:-2
このような関数も
呼び出せます

00:26:49.176 --> 00:26:53.213 align:start position:21% line:-2
ではデバッガに
Objective-Cの構文で―

00:26:53.313 --> 00:26:55.916 align:start position:29% line:-1
この式を評価させましょう

00:26:56.016 --> 00:27:00.420 align:start position:0% line:-2
“expression option -l objc”と
入力します

00:26:56.016 --> 00:27:00.420 align:start position:0% line:-2
“expression option -l objc”と
入力します

00:27:00.721 --> 00:27:05.592 align:start position:20% line:-2
フレームはSwiftでも
コードはObjective-Cです

00:27:06.827 --> 00:27:11.498 align:start position:27% line:-2
-Oを加え poと同様に
デバッグの記述を確認します

00:27:11.598 --> 00:27:14.635 align:start position:29% line:-2
ダッシュ２つで
オプションの終わりを示し

00:27:14.902 --> 00:27:17.404 align:start position:29% line:-1
あとはローインプットです

00:27:17.504 --> 00:27:22.810 align:start position:18% line:-2
Objective-Cフォーマットを
与えねばなりませんが―

00:27:22.910 --> 00:27:25.212 align:start position:36% line:-1
うまくいきません

00:27:25.312 --> 00:27:28.916 align:start position:27% line:-2
一時的な式のコンテキストが
作成され―

00:27:29.016 --> 00:27:32.486 align:start position:34% line:-2
フレームの変数を
継承しないからです

00:27:32.586 --> 00:27:34.188 align:start position:36% line:-1
でも回避できます

00:27:34.488 --> 00:27:38.325 align:start position:27% line:-2
self.viewを
バッククォートで囲むのです

00:27:38.425 --> 00:27:41.261 align:start position:34% line:-2
まず現フレームの
コンテンツを評価し

00:27:41.361 --> 00:27:45.833 align:start position:30% line:-2
結果を挿入すると
残りを評価してくれます

00:27:45.933 --> 00:27:51.972 align:start position:43% line:-1
(拍手)

00:27:52.072 --> 00:27:54.975 align:start position:34% line:-2
デバッグの記述が
すべて表示されます

00:27:55.075 --> 00:27:58.445 align:start position:21% line:-2
ラベルをホストする
ScoreboardViewの―

00:27:58.545 --> 00:28:00.547 align:start position:34% line:-1
メモリアドレスです

00:27:58.545 --> 00:28:00.547 align:start position:34% line:-1
メモリアドレスです

00:28:00.647 --> 00:28:06.386 align:start position:27% line:-2
ではpoとメモリアドレスを
使ってみましょう

00:28:06.487 --> 00:28:11.225 align:start position:29% line:-2
しかしSwiftは数字を
ポインタとして扱わず

00:28:11.325 --> 00:28:13.093 align:start position:36% line:-1
うまくいきません

00:28:13.193 --> 00:28:16.864 align:start position:21% line:-2
そこで再び
Objective-Cの登場です

00:28:16.964 --> 00:28:20.601 align:start position:30% line:-2
同じことを
繰り返せばいいですが―

00:28:20.701 --> 00:28:25.973 align:start position:27% line:-2
ショートカットして
簡単なコマンドにしましょう

00:28:26.340 --> 00:28:31.078 align:start position:25% line:-2
エイリアスコマンドで
pocコマンドを呼び出します

00:28:31.178 --> 00:28:36.417 align:start position:27% line:-2
pocでメモリアドレスから
デバッグの記述を確認します

00:28:36.850 --> 00:28:40.487 align:start position:34% line:-2
メモリアドレスから
確認する方法を―

00:28:40.587 --> 00:28:42.289 align:start position:32% line:-1
もう１つ 紹介します

00:28:42.389 --> 00:28:46.226 align:start position:14% line:-2
使うのは
unsafeBitCastという関数です

00:28:46.360 --> 00:28:48.028 align:start position:32% line:-1
メモリアドレスを与え

00:28:48.128 --> 00:28:53.600 align:start position:14% line:-2
ScoreboardView.selfに
変更します

00:28:54.067 --> 00:28:58.672 align:start position:23% line:-2
unsafeBitCastでも
記述を確認できました

00:28:59.172 --> 00:29:02.843 align:start position:25% line:-2
unsafeBitCastは
型を返すので―

00:28:59.172 --> 00:29:02.843 align:start position:25% line:-2
unsafeBitCastは
型を返すので―

00:29:02.943 --> 00:29:06.747 align:start position:27% line:-1
.frameなどが使えます

00:29:06.847 --> 00:29:10.884 align:start position:30% line:-2
今回は中央位置を調べて
修正しましょう

00:29:10.984 --> 00:29:12.753 align:start position:34% line:-1
300に修正します

00:29:12.853 --> 00:29:15.622 align:start position:29% line:-1
300に変更されましたね

00:29:15.722 --> 00:29:19.560 align:start position:30% line:-2
しかしシミュレータでは
変わっていません

00:29:19.660 --> 00:29:20.694 align:start position:38% line:-1
停止中なので―

00:29:20.794 --> 00:29:25.499 align:start position:29% line:-2
画面のフレームバッファに
変更が適用されないのです

00:29:25.632 --> 00:29:28.001 align:start position:36% line:-2
アニメーションを
変えるため―

00:29:28.101 --> 00:29:32.005 align:start position:9% line:-2
“expression
CATransaction.flush”と入力

00:29:33.140 --> 00:29:36.376 align:start position:29% line:-2
画面のフレームバッファが
更新されます

00:29:36.477 --> 00:29:41.982 align:start position:43% line:-1
(拍手)

00:29:42.115 --> 00:29:45.519 align:start position:32% line:-2
この２行で
新しい位置を修正して

00:29:45.619 --> 00:29:47.955 align:start position:32% line:-1
フラッシュを続けます

00:29:48.055 --> 00:29:53.160 align:start position:29% line:-2
とても便利なので
１つのコマンドにしました

00:29:53.260 --> 00:29:55.929 align:start position:30% line:-1
その方法をお見せします

00:29:56.263 --> 00:29:59.399 align:start position:21% line:-1
Pythonのファイルを開きます

00:29:59.933 --> 00:30:01.668 align:start position:32% line:-1
なぜPythonか？

00:29:59.933 --> 00:30:01.668 align:start position:32% line:-1
なぜPythonか？

00:30:01.768 --> 00:30:06.807 align:start position:16% line:-2
Pythonを使えばLLDB APIに
フルアクセスできるからです

00:30:06.907 --> 00:30:09.977 align:start position:29% line:-2
Pythonで
LLDBスクリプトを書き

00:30:10.077 --> 00:30:14.281 align:start position:7% line:-2
“nudge x-offset y-offset
[view]”を入力

00:30:14.381 --> 00:30:17.484 align:start position:30% line:-2
これで停止中にビューを
ナッジできます

00:30:17.584 --> 00:30:21.288 align:start position:29% line:-2
長いようですが
ほとんどは停止の引数です

00:30:21.388 --> 00:30:23.023 align:start position:32% line:-1
真ん中の重要な部分は

00:30:23.123 --> 00:30:26.693 align:start position:32% line:-2
手動でやるはずだった
呼び出しです

00:30:26.793 --> 00:30:29.429 align:start position:29% line:-1
時間がなく未完成ですが―

00:30:29.530 --> 00:30:35.335 align:start position:25% line:-2
ダウンロードして
お使いいただけるようにします

00:30:36.370 --> 00:30:40.574 align:start position:29% line:-2
スクリプトを
有効にする方法を見せます

00:30:40.674 --> 00:30:44.878 align:start position:27% line:-2
ホームディレクトリで
.lldbinitと編集し

00:30:44.978 --> 00:30:47.614 align:start position:4% line:-2
command script importという行を
加えます

00:30:47.714 --> 00:30:50.651 align:start position:30% line:-1
便利なエイリアスも追加

00:30:50.751 --> 00:30:53.086 align:start position:23% line:-1
先ほどのpoc aliasや―

00:30:53.187 --> 00:30:56.623 align:start position:25% line:-2
トランザクションを
フラッシュするエイリアスです

00:31:00.160 --> 00:31:03.330 align:start position:11% line:-2
command script importを
コピーして

00:31:03.430 --> 00:31:06.166 align:start position:29% line:-2
デバッグセッションで
ペーストし 再開させます

00:31:06.266 --> 00:31:08.101 align:start position:29% line:-1
ここでナッジコマンドです

00:31:08.202 --> 00:31:12.873 align:start position:21% line:-2
“nudge” 水平位置が“０”
垂直方向が“－５”

00:31:12.973 --> 00:31:15.008 align:start position:29% line:-2
ビューのメモリアドレスも
入力し

00:31:15.109 --> 00:31:18.479 align:start position:38% line:-2
シミュレータで
ナッジさせます

00:31:18.579 --> 00:31:26.687 align:start position:43% line:-1
(拍手)

00:31:26.787 --> 00:31:29.823 align:start position:32% line:-2
LLDBでは空白行で
改行すれば

00:31:29.923 --> 00:31:32.459 align:start position:32% line:-2
前の行を繰り返すので
ナッジに最適

00:31:32.860 --> 00:31:36.497 align:start position:34% line:-2
右方向にナッジして
位置を調整します

00:31:36.597 --> 00:31:40.033 align:start position:27% line:-1
もう１つのビューも調整して

00:31:40.901 --> 00:31:44.338 align:start position:21% line:-1
Attemptsの位置を下げます

00:31:44.438 --> 00:31:49.409 align:start position:30% line:-2
また ナッジで一度
ビューの式を入力すると

00:31:49.510 --> 00:31:54.615 align:start position:27% line:-2
記憶して 前に記述したのと
同じ式を適用します

00:31:54.715 --> 00:31:57.718 align:start position:34% line:-2
マシなレイアウトに
なりました

00:31:57.818 --> 00:32:01.889 align:start position:27% line:-2
ナッジから提供された情報が
あります

00:31:57.818 --> 00:32:01.889 align:start position:27% line:-2
ナッジから提供された情報が
あります

00:32:01.989 --> 00:32:07.327 align:start position:27% line:-2
元の中央位置やフレーム値に
適用したオフセットなどです

00:32:07.427 --> 00:32:11.365 align:start position:32% line:-2
そこからレイアウトの
コードなどを修正し

00:32:11.465 --> 00:32:14.601 align:start position:34% line:-2
新しいレイアウトが
簡単にできました

00:32:16.203 --> 00:32:17.604 align:start position:39% line:-1
では最後に…

00:32:17.704 --> 00:32:21.808 align:start position:29% line:-2
先にバグを
チェックしておきましょう

00:32:22.242 --> 00:32:26.213 align:start position:30% line:-2
再コンパイルと再実行を
行う前に―

00:32:26.313 --> 00:32:30.250 align:start position:32% line:-2
挿入した式を
消去せねばなりません

00:32:30.350 --> 00:32:32.920 align:start position:21% line:-1
２回 実行するのを避けるためです

00:32:33.020 --> 00:32:37.291 align:start position:21% line:-2
選択して
Deleteキーで消すと早いです

00:32:37.624 --> 00:32:42.996 align:start position:29% line:-2
以上が デバッグを迅速に
行うためのテクニックです

00:32:43.096 --> 00:32:45.833 align:start position:36% line:-2
再コンパイルや
再実行をせずに―

00:32:45.933 --> 00:32:51.171 align:start position:27% line:-2
私たちは４つのバグをすべて
診断できました

00:32:51.271 --> 00:32:55.142 align:start position:27% line:-2
複雑なプロジェクトでは特に
時間を節約でき

00:32:55.242 --> 00:32:59.680 align:start position:29% line:-2
再現が難しいバグの解決に
欠かせません

00:32:59.780 --> 00:33:05.052 align:start position:27% line:-2
このテクニックを
ぜひ皆さんもお使いください

00:32:59.780 --> 00:33:05.052 align:start position:27% line:-2
このテクニックを
ぜひ皆さんもお使いください

00:33:05.152 --> 00:33:15.095 align:start position:43% line:-1
(拍手)

00:33:15.796 --> 00:33:20.234 align:start position:32% line:-2
デバッグセッションで
取り上げた秘訣を

00:33:20.334 --> 00:33:22.503 align:start position:32% line:-1
振り返ってみましょう

00:33:22.770 --> 00:33:27.474 align:start position:18% line:-2
まず Xcodeの“ビヘイビア”から
デバッグタブを生成

00:33:27.574 --> 00:33:30.878 align:start position:21% line:-2
LLDBのexpressionで
プログラム状態を変更

00:33:30.978 --> 00:33:35.549 align:start position:23% line:-2
自動再開するブレークポイントで
実行中にコードを挿入

00:33:35.649 --> 00:33:40.254 align:start position:14% line:-2
“breakpoint set”続いて
“one-shot true”を使って―

00:33:40.354 --> 00:33:43.257 align:start position:27% line:-2
独立したブレークポイントを
作成

00:33:43.490 --> 00:33:44.992 align:start position:30% line:-1
アセンブリフレームで―

00:33:45.092 --> 00:33:50.230 align:start position:21% line:-2
$arg1や$arg2などを使い
関数の引数を確認

00:33:50.330 --> 00:33:56.003 align:start position:16% line:-2
命令ポインタかthread jumpで
コードの行をスキップ

00:33:56.336 --> 00:34:00.541 align:start position:34% line:-2
ウォッチポイントで
変数の変更時に停止

00:33:56.336 --> 00:34:00.541 align:start position:34% line:-2
ウォッチポイントで
変数の変更時に停止

00:34:01.241 --> 00:34:04.912 align:start position:27% line:-2
Swiftフレームで
Objective-Cを―

00:34:05.012 --> 00:34:07.481 align:start position:12% line:-1
expression -l objcで評価

00:34:08.348 --> 00:34:09.850 align:start position:34% line:-1
デバッグ停止時に―

00:34:09.949 --> 00:34:15.856 align:start position:14% line:-2
CATransaction.flushで
ビュー変更をフラッシュ

00:34:16.056 --> 00:34:19.025 align:start position:27% line:-2
カスタムLLDBコマンドの
追加については

00:34:19.126 --> 00:34:22.929 align:start position:27% line:-2
エイリアスコマンドで
ショートカットを作成するか

00:34:23.030 --> 00:34:28.735 align:start position:29% line:-2
Pythonでコマンドを
カスタマイズして作成

00:34:28.835 --> 00:34:32.606 align:start position:29% line:-2
ナッジスクリプトを
ウェブサイトに載せるので

00:34:32.706 --> 00:34:36.510 align:start position:36% line:-2
ご覧になって
活用してください

00:34:38.011 --> 00:34:43.384 align:start position:21% line:-2
もう１つ お話ししたいのが
LLDBのprintコマンドです

00:34:43.484 --> 00:34:46.420 align:start position:36% line:-2
おなじみのpoは
デモで使いました

00:34:46.520 --> 00:34:51.358 align:start position:29% line:-2
デバッグの記述を要求し
カスタマイズ可能でしたね

00:34:51.458 --> 00:34:56.196 align:start position:12% line:-2
poは“expression”
“object-description”や

00:34:56.929 --> 00:34:58.999 align:start position:21% line:-2
“expression -O”の
エイリアスです

00:34:59.433 --> 00:35:03.404 align:start position:18% line:-2
一方 pコマンドは
expressionのエイリアスです

00:34:59.433 --> 00:35:03.404 align:start position:18% line:-2
一方 pコマンドは
expressionのエイリアスです

00:35:03.504 --> 00:35:06.540 align:start position:27% line:-2
LLDBの
組み込みフォーマッタを使い

00:35:06.640 --> 00:35:09.343 align:start position:30% line:-1
オブジェクトを表します

00:35:10.144 --> 00:35:13.614 align:start position:21% line:-2
知っておきたい３つ目のコマンドは
frame variableです

00:35:13.714 --> 00:35:14.748 align:start position:36% line:-1
他の２つと違い―

00:35:14.848 --> 00:35:17.851 align:start position:34% line:-2
コンパイルや
式の評価をしません

00:35:17.951 --> 00:35:21.488 align:start position:32% line:-2
変数の値をメモリから
直接 読み取り

00:35:21.588 --> 00:35:24.091 align:start position:23% line:-2
LLDB組み込みフォーマッタを
使います

00:35:24.191 --> 00:35:29.530 align:start position:29% line:-2
コマンドの選択は
好みと目的の情報次第です

00:35:29.630 --> 00:35:32.733 align:start position:29% line:-1
でも覚えておいてください

00:35:32.833 --> 00:35:37.438 align:start position:23% line:-2
expressionコマンドも
poやpも使えない時―

00:35:37.538 --> 00:35:42.109 align:start position:12% line:-2
フレーム内の変数を
frame variableで調べられます

00:35:44.244 --> 00:35:46.747 align:start position:30% line:-1
この後はセバスチャンが

00:35:46.847 --> 00:35:50.417 align:start position:29% line:-2
ビューデバッグの
テクニックをご紹介します

00:35:50.517 --> 00:35:55.422 align:start position:43% line:-1
(拍手)

00:35:55.522 --> 00:35:56.690 align:start position:34% line:-1
ありがとう　クリス

00:35:58.825 --> 00:36:04.031 align:start position:27% line:-2
ビューデバッガを
活用する秘訣をお教えします

00:35:58.825 --> 00:36:04.031 align:start position:27% line:-2
ビューデバッガを
活用する秘訣をお教えします

00:36:04.131 --> 00:36:08.335 align:start position:27% line:-2
また ダークモードの
macOS Mojaveで

00:36:08.435 --> 00:36:14.575 align:start position:23% line:-2
優れたデバッグが体験できるよう
Xcode 10を改良しました

00:36:14.775 --> 00:36:17.177 align:start position:30% line:-1
デモでお見せしましょう

00:36:17.945 --> 00:36:19.980 align:start position:32% line:-1
デモ機に切り替えます

00:36:20.748 --> 00:36:23.784 align:start position:36% line:-2
クリスと同じ
プロジェクトです

00:36:23.884 --> 00:36:27.521 align:start position:36% line:-2
バグが２つ
残っていましたね

00:36:29.790 --> 00:36:34.294 align:start position:27% line:-2
私はMacの
アプリケーションを使います

00:36:34.628 --> 00:36:40.467 align:start position:18% line:-2
Mac版のSolar Systemが
ダークモードに映えますね

00:36:41.235 --> 00:36:43.103 align:start position:30% line:-1
バグを２つ 解決します

00:36:43.737 --> 00:36:47.808 align:start position:30% line:-2
１つ目は“惑星の画像が
水平方向の中央にない”

00:36:47.908 --> 00:36:53.647 align:start position:30% line:-2
この地球の画像は確かに
右側にずれているので

00:36:53.747 --> 00:36:55.883 align:start position:32% line:-1
問題に対処しましょう

00:36:55.983 --> 00:37:01.121 align:start position:23% line:-2
２つ目は“ダークモードで
ポップオーバーの字が読めない”

00:36:55.983 --> 00:37:01.121 align:start position:23% line:-2
２つ目は“ダークモードで
ポップオーバーの字が読めない”

00:37:01.221 --> 00:37:03.590 align:start position:32% line:-1
実際に ご覧ください

00:37:03.690 --> 00:37:09.096 align:start position:29% line:-2
このポップオーバーに
軌道の情報が表示されます

00:37:09.196 --> 00:37:12.232 align:start position:34% line:-2
上部のラベルは
読みやすいですが―

00:37:12.332 --> 00:37:16.336 align:start position:29% line:-2
下部は文字を選択しないと
読めません

00:37:16.703 --> 00:37:19.106 align:start position:30% line:-1
この２つに取り組みます

00:37:19.206 --> 00:37:21.942 align:start position:32% line:-1
さっそく始めましょう

00:37:22.276 --> 00:37:26.613 align:start position:29% line:-2
Xcodeで
ビュー階層を取り込みます

00:37:26.713 --> 00:37:32.252 align:start position:30% line:-2
問題と修正方法を見つけ
ビールを楽しみましょう

00:37:32.820 --> 00:37:37.824 align:start position:23% line:-2
ただ Xcodeに切り替えると
ポップオーバーが消えます

00:37:37.925 --> 00:37:40.427 align:start position:34% line:-2
バックグラウンドに
移るからです

00:37:40.527 --> 00:37:42.963 align:start position:27% line:-1
ビュー階層を取り込めません

00:37:43.230 --> 00:37:46.767 align:start position:30% line:-2
そこでアクティブ状態で
取り込む方法を―

00:37:46.867 --> 00:37:49.136 align:start position:30% line:-1
２つ ご紹介しましょう

00:37:49.870 --> 00:37:53.674 align:start position:29% line:-2
ご覧のとおり
ポップオーバーが消えます

00:37:54.508 --> 00:37:56.109 align:start position:25% line:-1
Touch Barを使うので

00:37:56.210 --> 00:38:00.714 align:start position:29% line:-2
Windowメニューから
シミュレータを出します

00:37:56.210 --> 00:38:00.714 align:start position:29% line:-2
Windowメニューから
シミュレータを出します

00:38:00.814 --> 00:38:04.451 align:start position:32% line:-2
再びポップオーバーを
開きましょう

00:38:04.551 --> 00:38:09.823 align:start position:21% line:-2
Touch Barの
スプレー缶アイコンをタップすると

00:38:09.923 --> 00:38:15.863 align:start position:23% line:-2
Xcodeが提供するデバッグの
オプションが表示されます

00:38:15.963 --> 00:38:19.333 align:start position:30% line:-2
Touch Barから
簡単にアクセス可能です

00:38:19.433 --> 00:38:22.669 align:start position:27% line:-2
Xcodeが
バックグラウンド状態なので

00:38:22.770 --> 00:38:27.074 align:start position:30% line:-2
フルスクリーンモードで
開発中でも使えます

00:38:27.474 --> 00:38:31.979 align:start position:27% line:-2
オプションの１つで
ビュー階層を取り込めますが

00:38:32.079 --> 00:38:36.984 align:start position:23% line:-2
Touch Barのない人には
別の方法があります

00:38:38.152 --> 00:38:42.322 align:start position:30% line:-2
シミュレータを閉じ
デバッグバーのボタンを

00:38:42.422 --> 00:38:45.759 align:start position:23% line:-2
Commandキーを押しながら
クリックします

00:38:46.493 --> 00:38:49.863 align:start position:32% line:-2
アプリケーションを
アクティブにせずに―

00:38:49.963 --> 00:38:53.333 align:start position:30% line:-2
マウスで
クリックできる方法です

00:38:53.867 --> 00:38:58.705 align:start position:29% line:-2
これで ビュー階層の
キャプチャを起動できます

00:38:58.805 --> 00:39:01.975 align:start position:32% line:-2
デバッガは
アクティブ状態で停止

00:38:58.805 --> 00:39:01.975 align:start position:32% line:-2
デバッガは
アクティブ状態で停止

00:39:02.075 --> 00:39:05.412 align:start position:36% line:-1
UIは描画を続け

00:39:05.512 --> 00:39:07.347 align:start position:29% line:-1
ポップオーバーも出てます

00:39:07.448 --> 00:39:09.483 align:start position:29% line:-1
待機カーソルになるのは―

00:39:09.583 --> 00:39:13.620 align:start position:27% line:-2
アプリケーションが停止し
マウスに反応しないからです

00:39:14.822 --> 00:39:19.960 align:start position:27% line:-2
ビューデバッガでは
ポップオーバーが見えません

00:39:20.394 --> 00:39:23.430 align:start position:34% line:-2
でも ちゃんと
取り込んでいるので

00:39:23.530 --> 00:39:25.966 align:start position:36% line:-1
後でお見せします

00:39:26.066 --> 00:39:29.503 align:start position:32% line:-2
まず 画像ビューの
レイアウトの問題です

00:39:29.803 --> 00:39:33.073 align:start position:27% line:-1
画像ビューを少し拡大します

00:39:33.173 --> 00:39:35.542 align:start position:27% line:-1
右側のインスペクタを見ると

00:39:35.642 --> 00:39:39.713 align:start position:0% line:-2
NSImageViewSimpleImageViewと
なっています

00:39:39.813 --> 00:39:42.716 align:start position:30% line:-2
アンダースコアのついた
プレフィックスなので―

00:39:42.816 --> 00:39:46.420 align:start position:29% line:-2
システムフレームワークの
インターナルクラスです

00:39:46.520 --> 00:39:51.759 align:start position:29% line:-2
コードなどで画像ビューを
設定する際には使いません

00:39:51.859 --> 00:39:54.561 align:start position:32% line:-2
ビュー階層で
オブジェクトを見ます

00:39:54.661 --> 00:39:58.899 align:start position:0% line:-2
Navigateメニューから
“Reveal in Debug Navigator”へ

00:39:58.999 --> 00:40:03.937 align:start position:21% line:-2
左側でスーパービューと
サブビューに関連づけられています

00:39:58.999 --> 00:40:03.937 align:start position:21% line:-2
左側でスーパービューと
サブビューに関連づけられています

00:40:04.571 --> 00:40:08.542 align:start position:27% line:-2
スーパービューは
NSImageViewです

00:40:08.642 --> 00:40:11.845 align:start position:21% line:-2
そのスーパービューは
PlanetGlobeViewで

00:40:11.945 --> 00:40:15.883 align:start position:14% line:-2
そのスーパービューは
NSVisualEffectViewです

00:40:16.984 --> 00:40:18.752 align:start position:25% line:-1
ImageViewを選べば―

00:40:19.219 --> 00:40:23.390 align:start position:29% line:-2
右側の画像ビューの
プロパティが確認できます

00:40:23.490 --> 00:40:25.659 align:start position:29% line:-1
レイアウトを調べましょう

00:40:25.759 --> 00:40:30.130 align:start position:18% line:-2
Auto Layoutを使ってるので
その制約を―

00:40:30.230 --> 00:40:32.866 align:start position:29% line:-1
このボタンで表示できます

00:40:33.734 --> 00:40:37.771 align:start position:27% line:-2
レイアウトに影響する制約を
すべて確認できます

00:40:38.539 --> 00:40:41.942 align:start position:27% line:-2
例えば
アスペクト比の制約などです

00:40:42.042 --> 00:40:46.246 align:start position:34% line:-2
また この縦の線は
そろえの制約です

00:40:46.480 --> 00:40:51.185 align:start position:29% line:-2
制約を選択すると右側に
プロパティが表示されます

00:40:51.285 --> 00:40:54.721 align:start position:34% line:-2
表示されている
ワイヤフレームは―

00:40:54.822 --> 00:40:59.993 align:start position:21% line:-2
レイアウトに関与しているビューの
コンテンツです

00:41:00.094 --> 00:41:02.996 align:start position:29% line:-2
コンテンツのないビューも
あるので―

00:41:03.096 --> 00:41:05.232 align:start position:36% line:-1
この表示なのです

00:41:05.799 --> 00:41:10.370 align:start position:29% line:-2
制約を選択したので
インスペクタを見ましょう

00:41:10.470 --> 00:41:14.575 align:start position:29% line:-2
画像ビューと惑星ビューの
それぞれが

00:41:14.675 --> 00:41:18.879 align:start position:29% line:-2
定数０で水平方向の中央で
そろえられています

00:41:18.979 --> 00:41:22.049 align:start position:30% line:-2
だからスーパービューで
そろうのです

00:41:22.583 --> 00:41:26.987 align:start position:21% line:-2
PlanetGlobeViewを
ナビゲータで選択します

00:41:27.087 --> 00:41:30.090 align:start position:34% line:-2
奇妙なことに
左側は大きいのに―

00:41:30.190 --> 00:41:32.426 align:start position:32% line:-1
右側はそろっています

00:41:32.526 --> 00:41:37.464 align:start position:29% line:-2
制約で水平方向で
そろえていたはずなのに―

00:41:37.798 --> 00:41:40.000 align:start position:38% line:-1
矛盾しています

00:41:40.100 --> 00:41:45.272 align:start position:27% line:-2
では惑星ビューの制約を見て
確認しましょう

00:41:45.639 --> 00:41:49.243 align:start position:32% line:-2
前辺の制約を選択し
インスペクタを見ます

00:41:49.343 --> 00:41:54.948 align:start position:11% line:-2
スーパービューで見た
NSVisualEffectViewの前辺と

00:41:55.048 --> 00:41:59.553 align:start position:34% line:-2
惑星ビューの前辺が
そろえられています

00:41:59.653 --> 00:42:03.257 align:start position:29% line:-2
定数30となっているので
納得できます

00:41:59.653 --> 00:42:03.257 align:start position:29% line:-2
定数30となっているので
納得できます

00:42:03.357 --> 00:42:05.392 align:start position:34% line:-1
次は後辺の制約です

00:42:06.493 --> 00:42:10.798 align:start position:30% line:-2
惑星ビューの後辺と
スーパービューの後辺が

00:42:10.898 --> 00:42:13.300 align:start position:29% line:-1
定数30でそろっています

00:42:13.400 --> 00:42:16.770 align:start position:36% line:-2
この制約は右側で
何も接しておらず

00:42:16.870 --> 00:42:20.207 align:start position:29% line:-1
全体像がよくつかめません

00:42:20.307 --> 00:42:24.011 align:start position:32% line:-2
現在 切り抜きされた
コンテンツがないか―

00:42:24.111 --> 00:42:25.913 align:start position:38% line:-1
確認しましょう

00:42:26.013 --> 00:42:29.850 align:start position:25% line:-2
このボタンで
切り抜きしたコンテンツを表示

00:42:30.184 --> 00:42:36.223 align:start position:27% line:-2
すると惑星ビューが右方向へ
境界を越えて広がりました

00:42:36.323 --> 00:42:41.461 align:start position:29% line:-2
スーパービューでは
中央でそろっているので―

00:42:41.562 --> 00:42:43.130 align:start position:38% line:-1
制約どおりです

00:42:43.230 --> 00:42:46.833 align:start position:29% line:-2
ただ ウインドウの境界を
越えています

00:42:46.934 --> 00:42:49.436 align:start position:27% line:-1
コードで制約を設定する時に

00:42:49.536 --> 00:42:53.407 align:start position:29% line:-2
うっかり２つを
入れ替えてしまいがちです

00:42:53.507 --> 00:42:56.910 align:start position:32% line:-2
定数を間違えることも
あります

00:42:57.010 --> 00:43:01.315 align:start position:29% line:-2
この場合はマイナス30を
30にしていました

00:42:57.010 --> 00:43:01.315 align:start position:29% line:-2
この場合はマイナス30を
30にしていました

00:43:01.415 --> 00:43:04.985 align:start position:34% line:-2
修正して
定数を入れますが―

00:43:05.085 --> 00:43:10.758 align:start position:30% line:-2
先ほどのクリスと同じく
LLDBでやりましょう

00:43:11.525 --> 00:43:14.194 align:start position:29% line:-1
こちらの制約を選択します

00:43:16.864 --> 00:43:20.167 align:start position:23% line:-1
そしてEditからコピーを選び

00:43:20.367 --> 00:43:23.704 align:start position:32% line:-2
下にコンソール領域を
開きましょう

00:43:23.971 --> 00:43:29.743 align:start position:27% line:-2
このコピーによって
ポインタがキャストされます

00:43:29.843 --> 00:43:34.114 align:start position:21% line:-2
Memory debuggerで
選択した場合も同様です

00:43:34.214 --> 00:43:37.818 align:start position:36% line:-2
コンソールで
非常に便利ですね

00:43:37.918 --> 00:43:41.989 align:start position:43% line:-1
(拍手)

00:43:42.089 --> 00:43:43.223 align:start position:41% line:-1
ありがとう

00:43:43.323 --> 00:43:48.128 align:start position:25% line:-2
デバッガ記述を出力し
定数がプラス30と確認します

00:43:48.228 --> 00:43:50.664 align:start position:29% line:-1
インスペクタで見ましたね

00:43:50.764 --> 00:43:53.167 align:start position:25% line:-1
マイナス30に設定しましょう

00:43:53.267 --> 00:43:58.772 align:start position:21% line:-2
expressionの省略である
“e”を入力します

00:43:58.872 --> 00:44:03.277 align:start position:23% line:-2
そしてsetConstantを
マイナス30に設定

00:43:58.872 --> 00:44:03.277 align:start position:23% line:-2
そしてsetConstantを
マイナス30に設定

00:44:03.710 --> 00:44:08.448 align:start position:30% line:-2
しかし先ほどと同様
停止中は更新されません

00:44:08.549 --> 00:44:13.620 align:start position:11% line:-2
そこで
CATransaction.flushを使い

00:44:13.720 --> 00:44:19.359 align:start position:27% line:-2
停止したインターフェイスを
更新しましょう

00:44:19.760 --> 00:44:22.462 align:start position:21% line:-1
クリスが加えたコマンドを使います

00:44:23.230 --> 00:44:26.033 align:start position:30% line:-1
コマンドを入れましょう

00:44:26.333 --> 00:44:29.870 align:start position:30% line:-2
惑星が水平方向の中央に
位置しました

00:44:29.970 --> 00:44:32.306 align:start position:32% line:-1
定数を入れて成功です

00:44:32.406 --> 00:44:36.710 align:start position:30% line:-2
この変更を
コードに適用しましょう

00:44:38.011 --> 00:44:42.883 align:start position:23% line:-2
制約を選択すると
右側にバックトレースが表示され

00:44:42.983 --> 00:44:47.854 align:start position:27% line:-2
どのフレームが
割り当てられたか分かります

00:44:47.955 --> 00:44:52.593 align:start position:32% line:-2
制約を作ったコードに
ジャンプできるのです

00:44:52.693 --> 00:44:57.898 align:start position:12% line:-2
Malloc Stack Loggingを
有効にします

00:44:57.998 --> 00:45:00.300 align:start position:34% line:-1
ご覧に入れましょう

00:44:57.998 --> 00:45:00.300 align:start position:34% line:-1
ご覧に入れましょう

00:45:00.400 --> 00:45:03.704 align:start position:20% line:-2
上部で“Edit Scheme”を
選択します

00:45:03.804 --> 00:45:08.475 align:start position:21% line:-2
“Diagnostics”タブの
“Logging”で―

00:45:08.575 --> 00:45:13.280 align:start position:0% line:-2
Malloc Stackを
Allocation and Free Historyに

00:45:13.614 --> 00:45:17.451 align:start position:30% line:-2
これでバックトレースが
生成されます

00:45:17.551 --> 00:45:21.054 align:start position:21% line:-2
Memory debuggerで
選択した場合も同様です

00:45:21.155 --> 00:45:24.224 align:start position:34% line:-2
スタックフレームに
カーソルを重ねると

00:45:24.324 --> 00:45:27.427 align:start position:30% line:-2
フレームのフルネームが
見えます

00:45:27.628 --> 00:45:32.966 align:start position:2% line:-2
setupPlanetGlobeViewLayoutと
なっています

00:45:33.567 --> 00:45:38.605 align:start position:29% line:-2
この矢印でコードの場所へ
ジャンプできます

00:45:39.073 --> 00:45:41.875 align:start position:20% line:-2
ShiftキーとReturnキーと
Optionキーを長押しすると

00:45:41.975 --> 00:45:47.614 align:start position:29% line:-2
このように別ウインドウに
ファイルが開きます

00:45:48.715 --> 00:45:52.786 align:start position:32% line:-2
制約のコード行が
ハイライトされました

00:45:52.886 --> 00:45:56.390 align:start position:29% line:-2
定数30を
マイナス30に変更します

00:45:56.523 --> 00:46:00.227 align:start position:32% line:-2
保存して閉じれば
最初のバグは終了です

00:45:56.523 --> 00:46:00.227 align:start position:32% line:-2
保存して閉じれば
最初のバグは終了です

00:46:01.295 --> 00:46:02.196 align:start position:41% line:-1
いいですね

00:46:02.296 --> 00:46:03.797 align:start position:41% line:-1
２つ目は―

00:46:03.897 --> 00:46:08.168 align:start position:29% line:-2
“ポップオーバーの字が
読めない”というバグです

00:46:08.268 --> 00:46:09.436 align:start position:38% line:-1
見てみましょう

00:46:10.470 --> 00:46:13.307 align:start position:36% line:-2
まず制約モードを
無効にして

00:46:13.707 --> 00:46:16.110 align:start position:30% line:-1
切り抜きを消しましょう

00:46:17.177 --> 00:46:19.446 align:start position:27% line:-1
コンソールの入力も消します

00:46:19.980 --> 00:46:25.519 align:start position:29% line:-2
最初に アクティブ状態で
取り込む方法を見せました

00:46:25.619 --> 00:46:29.389 align:start position:32% line:-2
でもポップオーバーは
見えません

00:46:29.490 --> 00:46:33.126 align:start position:32% line:-2
ウインドウを１つしか
表示できないからです

00:46:33.460 --> 00:46:36.096 align:start position:27% line:-1
他のウインドウも見ましょう

00:46:36.396 --> 00:46:40.367 align:start position:32% line:-2
ビュー階層を
上にスクロールすると

00:46:40.467 --> 00:46:44.972 align:start position:27% line:-2
現在 見ているウインドウが
確認できます

00:46:45.072 --> 00:46:48.275 align:start position:27% line:-1
ルートレベルを折りたたむと

00:46:48.375 --> 00:46:52.446 align:start position:27% line:-1
別のルートレベルが現れます

00:46:52.746 --> 00:46:53.981 align:start position:34% line:-1
ポップオーバーです

00:46:54.248 --> 00:46:58.252 align:start position:29% line:-2
macOSやiOSで
複数のウインドウがあれば

00:46:58.352 --> 00:47:02.623 align:start position:29% line:-2
左側にルートレベルとして
表示されます

00:46:58.352 --> 00:47:02.623 align:start position:29% line:-2
左側にルートレベルとして
表示されます

00:47:02.723 --> 00:47:07.528 align:start position:29% line:-2
取り込むべきウインドウが
複数あるなら―

00:47:07.628 --> 00:47:09.963 align:start position:36% line:-1
確認してください

00:47:10.430 --> 00:47:14.501 align:start position:30% line:-2
3D表示で
このように確認できます

00:47:14.601 --> 00:47:17.938 align:start position:29% line:-1
読みづらくなっていますね

00:47:18.038 --> 00:47:20.908 align:start position:29% line:-1
ラベルを調べてみましょう

00:47:21.008 --> 00:47:25.512 align:start position:21% line:-2
ビューデバッガでは
Commandキーを長押しすれば

00:47:25.612 --> 00:47:29.383 align:start position:29% line:-2
クリックスルーで
青のラベルを選択できます

00:47:29.483 --> 00:47:32.119 align:start position:32% line:-1
まずテキストの色です

00:47:32.219 --> 00:47:36.690 align:start position:30% line:-2
ダークモードに
映えるラベルを見つけて

00:47:36.790 --> 00:47:38.859 align:start position:32% line:-1
問題を解決しましょう

00:47:40.027 --> 00:47:44.798 align:start position:32% line:-2
テキスト色はRGBで
青になっています

00:47:44.965 --> 00:47:48.168 align:start position:36% line:-2
インスペクタには
色の名前も表示

00:47:48.268 --> 00:47:52.873 align:start position:34% line:-2
アセットカタログの
色ということです

00:47:52.973 --> 00:47:57.611 align:start position:21% line:-2
Xcode 10では１つの色から
バリエーションが生まれ

00:47:57.711 --> 00:48:00.748 align:start position:27% line:-1
明るい色や暗い色があります

00:47:57.711 --> 00:48:00.748 align:start position:27% line:-1
明るい色や暗い色があります

00:48:00.848 --> 00:48:05.919 align:start position:32% line:-2
ビューの外観によって
いずれかの色に決まり

00:48:06.020 --> 00:48:09.323 align:start position:27% line:-1
インスペクタに表示されます

00:48:09.423 --> 00:48:12.393 align:start position:23% line:-1
下の“View”セクションには

00:48:12.493 --> 00:48:15.362 align:start position:5% line:-2
“Appearance”と
“Effective Appearance”があり

00:48:15.462 --> 00:48:18.232 align:start position:30% line:-2
Appearanceは
明示されてません

00:48:18.332 --> 00:48:22.002 align:start position:30% line:-2
これは よくあることで
ほとんどのビューは―

00:48:22.102 --> 00:48:26.840 align:start position:30% line:-2
スーパービューなどから
外観を引き継ぎます

00:48:27.174 --> 00:48:31.245 align:start position:7% line:-2
しかしEffective Appearanceは
“VibrantDark”で

00:48:31.445 --> 00:48:35.916 align:start position:29% line:-2
アセットカタログの色から
選ばれた色です

00:48:36.750 --> 00:48:39.787 align:start position:29% line:-1
インスペクタの下部には―

00:48:39.887 --> 00:48:44.057 align:start position:29% line:-2
デバッグの記述である
記述プロパティもあります

00:48:44.157 --> 00:48:47.794 align:start position:36% line:-2
先ほどクリスが
お見せしましたね

00:48:47.895 --> 00:48:49.630 align:start position:34% line:-1
poを使うことで―

00:48:49.730 --> 00:48:54.401 align:start position:25% line:-2
コンソールのデバッグの記述を
提供するだけではなく

00:48:54.501 --> 00:48:58.338 align:start position:32% line:-2
ビューデバッガからも
出せるのです

00:48:59.540 --> 00:49:01.842 align:start position:32% line:-1
テキスト色に戻ります

00:48:59.540 --> 00:49:01.842 align:start position:32% line:-1
テキスト色に戻ります

00:49:01.942 --> 00:49:05.345 align:start position:36% line:-2
２番目のラベルも
よく見えますね

00:49:05.446 --> 00:49:10.184 align:start position:21% line:-2
システムが定めた
labelColorとなっており

00:49:10.284 --> 00:49:13.954 align:start position:29% line:-2
アセットカタログの色では
ありません

00:49:14.054 --> 00:49:17.858 align:start position:29% line:-2
システム色も
外観が変わると対応します

00:49:18.325 --> 00:49:21.361 align:start position:32% line:-1
次は問題のラベルです

00:49:21.461 --> 00:49:25.065 align:start position:34% line:-2
濃いダークグレーで
名前がありませんね

00:49:25.165 --> 00:49:30.604 align:start position:29% line:-2
つまりカスタム色で
外観の変化に対応しません

00:49:30.938 --> 00:49:36.810 align:start position:27% line:-2
それでは このテキスト色を
システム色に変えましょう

00:49:37.911 --> 00:49:40.848 align:start position:34% line:-2
このオブジェクトを
選択しながら

00:49:41.248 --> 00:49:44.151 align:start position:34% line:-2
eを入力して
ポインタをキャスト

00:49:44.251 --> 00:49:50.257 align:start position:11% line:-2
setTextColor:
[NSColor textColor]と入力

00:49:51.491 --> 00:49:53.794 align:start position:34% line:-2
トランザクションを
フラッシュ

00:49:53.994 --> 00:49:58.098 align:start position:27% line:-2
ポップオーバーのフォントが
更新されました

00:49:58.832 --> 00:50:02.369 align:start position:23% line:-2
Storyboardファイルに
適用します

00:49:58.832 --> 00:50:02.369 align:start position:23% line:-2
Storyboardファイルに
適用します

00:50:02.636 --> 00:50:05.506 align:start position:30% line:-1
ここで必ず全体を通して

00:50:05.606 --> 00:50:09.109 align:start position:30% line:-2
外観が整っていることを
確認しましょう

00:50:09.209 --> 00:50:14.014 align:start position:30% line:-2
複数のシステムの外観に
関わるからです

00:50:14.114 --> 00:50:17.151 align:start position:27% line:-1
その方法をお見せしましょう

00:50:18.452 --> 00:50:21.722 align:start position:32% line:-2
システム全体の外観を
明るくして―

00:50:21.822 --> 00:50:24.892 align:start position:29% line:-2
ラベルを
確かめる必要はありません

00:50:24.992 --> 00:50:29.429 align:start position:27% line:-2
Xcode 10では
目的の対象だけ変えられます

00:50:29.530 --> 00:50:33.467 align:start position:30% line:-2
デバッグバーのボタンで
“Light”を選択

00:50:33.934 --> 00:50:37.504 align:start position:29% line:-2
アプリケーションの外観が
明るくなりました

00:50:37.604 --> 00:50:40.507 align:start position:30% line:-1
ポップオーバーを出して

00:50:41.175 --> 00:50:43.377 align:start position:36% line:-1
読みやすさを確認

00:50:43.477 --> 00:50:45.646 align:start position:34% line:-1
修正に成功しました

00:50:45.746 --> 00:50:49.983 align:start position:27% line:-2
外観を変えて確認することは
よくあるため―

00:50:50.083 --> 00:50:54.388 align:start position:21% line:-2
Touch Barにオプションを
追加しました

00:50:54.488 --> 00:50:56.490 align:start position:32% line:-1
再びシミュレータで―

00:50:56.590 --> 00:51:01.228 align:start position:30% line:-2
ポップオーバーを開き
ここのオプションを選択

00:50:56.590 --> 00:51:01.228 align:start position:30% line:-2
ポップオーバーを開き
ここのオプションを選択

00:51:01.762 --> 00:51:04.565 align:start position:29% line:-1
修正オプションが出ました

00:51:04.665 --> 00:51:08.635 align:start position:29% line:-2
フルスクリーンモードでも
アクセスできます

00:51:08.735 --> 00:51:14.708 align:start position:27% line:-2
コントラストを上げると
アクセシビリティだけでなく

00:51:14.808 --> 00:51:17.644 align:start position:29% line:-1
外観を明るく修正できます

00:51:17.744 --> 00:51:22.216 align:start position:27% line:-2
アプリケーションの見た目も
向上します

00:51:22.316 --> 00:51:25.352 align:start position:29% line:-2
もちろん
システムの外観も同様です

00:51:25.786 --> 00:51:28.222 align:start position:32% line:-1
問題は解決しましたね

00:51:28.856 --> 00:51:32.226 align:start position:34% line:-2
バグのリストに
チェックを入れます

00:51:32.326 --> 00:51:35.996 align:start position:30% line:-2
デモを終了して
スライドに戻りましょう

00:51:36.330 --> 00:51:43.670 align:start position:43% line:-1
(拍手)

00:51:43.771 --> 00:51:45.806 align:start position:34% line:-1
では おさらいです

00:51:46.273 --> 00:51:48.809 align:start position:27% line:-1
“Reveal”を使って―

00:51:48.909 --> 00:51:53.380 align:start position:29% line:-2
ビュー階層で現在の選択を
明らかにしました

00:51:53.580 --> 00:51:56.150 align:start position:30% line:-1
さらに 切り抜きを確認

00:51:56.683 --> 00:52:00.988 align:start position:29% line:-2
Auto Layoutで
制約の問題を特定

00:51:56.683 --> 00:52:00.988 align:start position:29% line:-2
Auto Layoutで
制約の問題を特定

00:52:01.321 --> 00:52:05.092 align:start position:29% line:-2
選択されたオブジェクトを
コピーして―

00:52:05.192 --> 00:52:08.762 align:start position:27% line:-1
オブジェクトポインタを使用

00:52:08.896 --> 00:52:14.835 align:start position:18% line:-2
Malloc Stackを有効にして
バックトレースを生成し―

00:52:15.135 --> 00:52:19.740 align:start position:34% line:-2
制約に必要な変更を
コードに適用

00:52:19.840 --> 00:52:25.045 align:start position:23% line:-2
ビューデバッガのインスペクタで
デバッグを記述

00:52:25.479 --> 00:52:30.184 align:start position:34% line:-2
クリックスルーで
背後のビューを選択

00:52:31.051 --> 00:52:34.254 align:start position:38% line:-2
ダークモードの
デバッグでは―

00:52:34.354 --> 00:52:39.293 align:start position:20% line:-2
デバッグバーかTouch Barで
外観を修正

00:52:39.693 --> 00:52:42.329 align:start position:29% line:-1
アクティブ状態で取り込み

00:52:42.429 --> 00:52:45.666 align:start position:32% line:-2
最後に
名前と外観の情報を―

00:52:45.766 --> 00:52:48.869 align:start position:34% line:-2
ビューデバッガの
インスペクタで確認

00:52:49.303 --> 00:52:51.672 align:start position:32% line:-1
ダークモードの詳細は

00:52:51.772 --> 00:52:56.543 align:start position:30% line:-2
この２つのセッションの
ビデオをご覧ください

00:52:57.344 --> 00:52:59.780 align:start position:27% line:-1
これでセッションは終了です

00:52:59.880 --> 00:53:05.219 align:start position:32% line:-2
ナッジスクリプトや
その他の詳しい情報は

00:52:59.880 --> 00:53:05.219 align:start position:32% line:-2
ナッジスクリプトや
その他の詳しい情報は

00:53:05.319 --> 00:53:07.454 align:start position:27% line:-1
ウェブサイトをご覧ください

00:53:07.554 --> 00:53:11.925 align:start position:29% line:-2
今日の内容や
デバッグについての質問は

00:53:12.025 --> 00:53:17.998 align:start position:29% line:-2
明日９時からのラボで
クリスや私がお答えします

00:53:18.098 --> 00:53:20.567 align:start position:29% line:-1
メモリデバッグについては

00:53:20.667 --> 00:53:24.571 align:start position:32% line:-2
明日 iOSメモリの
セッションがあります

00:53:24.938 --> 00:53:29.743 align:start position:27% line:-2
それではBashと
WWDCをお楽しみください

00:53:29.843 --> 00:53:33.814 align:start position:43% line:-1
(拍手)
