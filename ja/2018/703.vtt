WEBVTT

00:00:07.107 --> 00:00:16.350 align:start position:43% line:-1
(音楽)

00:00:21.054 --> 00:00:27.227 align:start position:43% line:-1
(拍手)

00:00:29.530 --> 00:00:31.832 align:start position:34% line:-1
皆さん こんにちは

00:00:32.399 --> 00:00:36.737 align:start position:27% line:-2
私はガウラフ
今日は機械学習の話をします

00:00:38.872 --> 00:00:40.974 align:start position:20% line:-1
昨年 Core MLを発表しました

00:00:41.775 --> 00:00:46.213 align:start position:29% line:-2
デベロッパの皆さんからの
反響は大きく

00:00:46.513 --> 00:00:51.418 align:start position:25% line:-2
すばらしいアプリケーションが
たくさん生まれました

00:00:52.085 --> 00:00:54.454 align:start position:30% line:-1
お礼を言わせてください

00:00:54.588 --> 00:00:56.490 align:start position:32% line:-1
ありがとうございます

00:00:56.590 --> 00:01:00.460 align:start position:21% line:-1
大勢の方がCore MLを活用し

00:00:56.590 --> 00:01:00.460 align:start position:21% line:-1
大勢の方がCore MLを活用し

00:01:00.561 --> 00:01:04.263 align:start position:30% line:-2
ユーザに貢献したことを
うれしく思います

00:01:04.364 --> 00:01:06.567 align:start position:36% line:-1
私たちは仲間です

00:01:07.434 --> 00:01:10.504 align:start position:43% line:-1
(拍手)

00:01:10.604 --> 00:01:12.606 align:start position:34% line:-1
皆さんへの拍手です

00:01:14.274 --> 00:01:15.876 align:start position:30% line:-1
Core MLを使うと

00:01:15.976 --> 00:01:20.247 align:start position:25% line:-2
アプリケーションに
機械学習モデルを組み込めます

00:01:21.281 --> 00:01:22.816 align:start position:32% line:-1
やり方はシンプルです

00:01:22.916 --> 00:01:26.787 align:start position:29% line:-2
機械学習モデルを
Xcodeにドロップして

00:01:26.887 --> 00:01:32.492 align:start position:27% line:-2
たった３行のコードを書けば
リアルタイムで計算を行う―

00:01:32.593 --> 00:01:36.730 align:start position:29% line:-2
最先端の機械学習モデルを
実行できます

00:01:36.830 --> 00:01:38.065 align:start position:36% line:-1
すばらしいですね

00:01:38.999 --> 00:01:42.402 align:start position:29% line:-2
ユーザは
プライバシーに配慮した―

00:01:42.503 --> 00:01:45.038 align:start position:27% line:-1
機械学習を利用できるのです

00:01:46.006 --> 00:01:52.279 align:start position:20% line:-2
モデルをXcodeにドロップすれば
あとはCore MLが処理します

00:01:54.348 --> 00:01:58.385 align:start position:30% line:-2
どこで機械学習モデルを
入手できるのか？

00:02:00.187 --> 00:02:02.923 align:start position:21% line:-1
昨年 ２つの方法をご紹介しました

00:02:03.023 --> 00:02:09.930 align:start position:18% line:-2
１つは AppleのWebサイトから
ダウンロードする方法です

00:02:11.331 --> 00:02:15.002 align:start position:18% line:-2
もう１つは
Core ML Toolsを使う方法

00:02:16.136 --> 00:02:22.476 align:start position:25% line:-2
機械学習コミュニティが作った
既存のモデルを利用できます

00:02:23.644 --> 00:02:25.979 align:start position:29% line:-1
これも手順はシンプルです

00:02:26.380 --> 00:02:31.351 align:start position:27% line:-2
ライブラリを選び
モデルをトレーニングしたら

00:02:31.451 --> 00:02:36.823 align:start position:25% line:-2
変換して アプリケーションに
組み込むだけです

00:02:39.259 --> 00:02:45.232 align:start position:25% line:-2
当初 サポートできる
ライブラリは５つか６つでした

00:02:45.766 --> 00:02:50.571 align:start position:29% line:-2
しかし この１年で
有名なライブラリを全て―

00:02:50.671 --> 00:02:53.240 align:start position:30% line:-1
サポート可能にしました

00:02:53.874 --> 00:02:58.078 align:start position:25% line:-2
Core ML Toolsの
機能も強化中ですが

00:02:58.178 --> 00:03:03.050 align:start position:29% line:-2
詳細は明日のセッションで
お話しします

00:02:58.178 --> 00:03:03.050 align:start position:29% line:-2
詳細は明日のセッションで
お話しします

00:03:05.686 --> 00:03:12.092 align:start position:14% line:-2
また 昨年の年末に
Turi Createをリリースしました

00:03:12.426 --> 00:03:15.829 align:start position:25% line:-1
この詳細も明日 お話しします

00:03:17.231 --> 00:03:19.833 align:start position:34% line:-2
今年の発表は
もっとすごいですよ

00:03:19.967 --> 00:03:21.702 align:start position:29% line:-1
Appleは止まりません

00:03:23.070 --> 00:03:25.072 align:start position:30% line:-1
皆さんに届けたいのは―

00:03:25.739 --> 00:03:30.744 align:start position:16% line:-1
SwiftやXcodeを活用できるもの

00:03:31.178 --> 00:03:34.515 align:start position:25% line:-1
デベロッパに焦点を当てたもの

00:03:34.615 --> 00:03:37.851 align:start position:25% line:-1
機械学習を単純化するものです

00:03:38.218 --> 00:03:41.255 align:start position:25% line:-1
その名は Create ML

00:03:42.456 --> 00:03:47.928 align:start position:43% line:-1
(拍手)

00:03:48.028 --> 00:03:50.364 align:start position:27% line:-1
機械学習フレームワークです

00:03:52.165 --> 00:03:56.870 align:start position:36% line:-2
この図式の左側を
埋めてくれます

00:03:57.538 --> 00:04:02.476 align:start position:21% line:-2
Create MLでモデルを作り
Core MLで実行

00:03:57.538 --> 00:04:02.476 align:start position:21% line:-2
Create MLでモデルを作り
Core MLで実行

00:04:02.676 --> 00:04:08.081 align:start position:29% line:-2
機械学習は全て
Swift内で完結します

00:04:08.182 --> 00:04:11.785 align:start position:27% line:-2
トレーニングで使った言語と
違う言語で―

00:04:11.885 --> 00:04:14.755 align:start position:29% line:-1
実行する必要はありません

00:04:16.523 --> 00:04:18.559 align:start position:23% line:-1
Create MLはシンプルで

00:04:19.259 --> 00:04:20.394 align:start position:38% line:-1
とてもパワフル

00:04:20.494 --> 00:04:25.399 align:start position:27% line:-2
アプリケーションに合わせて
調整でき

00:04:26.466 --> 00:04:29.002 align:start position:25% line:-1
しかも Macで作業可能です

00:04:31.338 --> 00:04:35.209 align:start position:23% line:-1
今年は３つのユースケースに着目

00:04:35.309 --> 00:04:37.411 align:start position:38% line:-1
まずは画像です

00:04:38.145 --> 00:04:42.115 align:start position:30% line:-2
次にテキスト
最後は表形式データです

00:04:42.883 --> 00:04:47.321 align:start position:23% line:-2
この３つは
最も役立つユースケースでしょう

00:04:49.122 --> 00:04:52.226 align:start position:34% line:-1
例えば 画像分類器

00:04:52.559 --> 00:04:55.195 align:start position:30% line:-1
独自の画像分類器を作り

00:04:55.295 --> 00:04:58.599 align:start position:25% line:-2
あなたのカタログにある製品を
認識させます

00:04:59.399 --> 00:05:01.668 align:start position:30% line:-1
テキスト分類器を作れば

00:04:59.399 --> 00:05:01.668 align:start position:30% line:-1
テキスト分類器を作れば

00:05:01.768 --> 00:05:06.273 align:start position:23% line:-2
センチメント分析やトピック分析
ドメイン分析が行えます

00:05:07.908 --> 00:05:13.447 align:start position:34% line:-2
表形式データの
回帰や分類も可能で

00:05:13.547 --> 00:05:19.119 align:start position:27% line:-2
例えば 化学成分から
ワインの品質を予測できます

00:05:19.653 --> 00:05:25.859 align:start position:20% line:-2
可能性を無限に広げる
使い方の詳細を30分でご説明します

00:05:27.895 --> 00:05:32.032 align:start position:25% line:-2
その前に 一般的な
ワークフローを説明しましょう

00:05:34.234 --> 00:05:38.805 align:start position:27% line:-2
あなたのアプリケーションで
考えてみてください

00:05:39.006 --> 00:05:43.844 align:start position:27% line:-2
むやみに機械学習を使わずに
その必要性を確認し―

00:05:43.944 --> 00:05:48.282 align:start position:29% line:-2
機械学習の問題点を
理解してから使いましょう

00:05:49.883 --> 00:05:52.386 align:start position:32% line:-1
次に データ集めです

00:05:53.220 --> 00:05:58.192 align:start position:23% line:-2
アプリケーションの趣旨に合った
データを集めます

00:05:58.392 --> 00:06:06.099 align:start position:21% line:-2
例えばiPhoneユーザのための
画像分類器を作る場合は

00:05:58.392 --> 00:06:06.099 align:start position:21% line:-2
例えばiPhoneユーザのための
画像分類器を作る場合は

00:06:06.200 --> 00:06:08.569 align:start position:23% line:-1
iPhoneから写真を集めます

00:06:08.669 --> 00:06:13.040 align:start position:30% line:-2
スクリーンショットより
写真が必要です

00:06:14.741 --> 00:06:16.944 align:start position:34% line:-1
次は トレーニング

00:06:18.545 --> 00:06:22.916 align:start position:34% line:-2
最後に 学習済みの
モデルを評価します

00:06:23.250 --> 00:06:28.655 align:start position:27% line:-2
評価結果は
サンプルとして出力されます

00:06:29.156 --> 00:06:32.659 align:start position:34% line:-2
結果に満足なら
モデルを出力します

00:06:33.627 --> 00:06:35.996 align:start position:29% line:-1
結果に満足できない場合は

00:06:36.096 --> 00:06:41.335 align:start position:30% line:-2
やり直すか より多くの
データを集めましょう

00:06:43.670 --> 00:06:48.442 align:start position:23% line:-2
Create MLは
４つのステージ全てで役立ちます

00:06:49.877 --> 00:06:55.315 align:start position:21% line:-2
データソースなど
パワフルなデータを内蔵しています

00:06:55.415 --> 00:06:58.352 align:start position:25% line:-1
詳細はこのあと お話しします

00:07:00.187 --> 00:07:03.590 align:start position:32% line:-2
コード１行で
トレーニングできます

00:07:04.324 --> 00:07:07.794 align:start position:30% line:-2
ハードウェアに
適したトレーニングです

00:07:10.464 --> 00:07:17.471 align:start position:25% line:-2
評価基準が内蔵されているので
自分で作る必要はありません

00:07:18.539 --> 00:07:23.010 align:start position:27% line:-2
結果に満足なら
モデルを出力すれば完了です

00:07:24.478 --> 00:07:27.714 align:start position:34% line:-2
ユースケースごとに
見ていきましょう

00:07:27.814 --> 00:07:30.951 align:start position:36% line:-2
画像 テキスト
表形式データです

00:07:32.853 --> 00:07:35.222 align:start position:38% line:-1
まずは画像から

00:07:35.322 --> 00:07:39.560 align:start position:32% line:-2
機械学習チームの
リジーにお願いします

00:07:39.660 --> 00:07:45.265 align:start position:43% line:-1
(拍手)

00:07:45.365 --> 00:07:46.466 align:start position:41% line:-1
ありがとう

00:07:50.003 --> 00:07:52.639 align:start position:32% line:-1
画像に基づいた体験は

00:07:52.739 --> 00:07:57.377 align:start position:29% line:-2
アプリケーションにとって
極めてパワフルな要素です

00:07:57.477 --> 00:08:02.583 align:start position:29% line:-2
今日は 画像分類モデルの
学習方法を説明します

00:07:57.477 --> 00:08:02.583 align:start position:29% line:-2
今日は 画像分類モデルの
学習方法を説明します

00:08:03.217 --> 00:08:06.186 align:start position:27% line:-1
画像分類で識別が難しいのは

00:08:06.286 --> 00:08:10.657 align:start position:32% line:-2
どのラベルを
画像に適用するかです

00:08:11.525 --> 00:08:13.427 align:start position:27% line:-1
学習データのタイプによって

00:08:13.527 --> 00:08:18.065 align:start position:32% line:-2
特定の領域だけを
ターゲットにできます

00:08:19.199 --> 00:08:22.369 align:start position:27% line:-1
まずは学習データを集めます

00:08:23.704 --> 00:08:28.609 align:start position:34% line:-2
果物の分類器を例に
説明しましょう

00:08:29.510 --> 00:08:34.448 align:start position:27% line:-2
正解データを反映する
さまざまな画像を大量に集め

00:08:34.548 --> 00:08:37.083 align:start position:36% line:-1
ラベルを付けます

00:08:37.518 --> 00:08:39.785 align:start position:32% line:-1
ディクショナリとして

00:08:40.020 --> 00:08:43.789 align:start position:32% line:-2
画像に対応する
ラベルを付けるのです

00:08:44.258 --> 00:08:47.327 align:start position:34% line:-2
または 階層のある
ディレクトリで

00:08:47.427 --> 00:08:50.330 align:start position:29% line:-1
データセットを構成します

00:08:50.430 --> 00:08:55.369 align:start position:25% line:-2
つまり ラベルを
フォルダの名前と同じにします

00:08:56.637 --> 00:09:02.075 align:start position:25% line:-2
ラベルをファイル名にして
１つのフォルダに入れる場合も

00:08:56.637 --> 00:09:02.075 align:start position:25% line:-2
ラベルをファイル名にして
１つのフォルダに入れる場合も

00:09:02.176 --> 00:09:07.214 align:start position:25% line:-2
Create MLのAPIで
簡単に構成を抽出できます

00:09:08.982 --> 00:09:12.786 align:start position:23% line:-1
トレーニングは もっと複雑です

00:09:12.886 --> 00:09:16.223 align:start position:36% line:-2
データを集めたら
次に進みましょう

00:09:16.924 --> 00:09:20.961 align:start position:32% line:-2
非常に複雑なモデルの
トレーニングを

00:09:21.061 --> 00:09:23.564 align:start position:38% line:-1
一から始めます

00:09:23.831 --> 00:09:26.733 align:start position:25% line:-1
これには たくさんのデータと

00:09:26.833 --> 00:09:29.937 align:start position:36% line:-2
大量の計算処理と
忍耐が必要です

00:09:30.270 --> 00:09:34.408 align:start position:30% line:-2
ただし 転移学習という
方法があります

00:09:34.841 --> 00:09:39.880 align:start position:21% line:-2
Appleはモデルの学習において
経験豊富なので

00:09:39.980 --> 00:09:44.051 align:start position:29% line:-2
すでにOSに組み込まれた
モデルがあります

00:09:44.151 --> 00:09:49.723 align:start position:27% line:-2
つまり 私たちは転移学習を
既存のモデルに適用させ

00:09:49.823 --> 00:09:54.328 align:start position:25% line:-2
特定のデータだけ
トレーニングすればいいのです

00:09:54.461 --> 00:09:57.264 align:start position:32% line:-1
大量の画像は必要なく

00:09:57.364 --> 00:10:01.668 align:start position:25% line:-2
手持ちの画像で
高度なトレーニングができます

00:09:57.364 --> 00:10:01.668 align:start position:25% line:-2
手持ちの画像で
高度なトレーニングができます

00:10:03.437 --> 00:10:05.973 align:start position:27% line:-1
結果 迅速な学習が可能です

00:10:06.073 --> 00:10:11.845 align:start position:23% line:-2
デベロッパが何時間もかけていた
トレーニングは―

00:10:12.479 --> 00:10:14.848 align:start position:36% line:-1
数分で完了します

00:10:14.948 --> 00:10:17.618 align:start position:29% line:-1
小さいデータなら数秒です

00:10:19.753 --> 00:10:24.458 align:start position:30% line:-2
これにより
数百MBだったモデルが

00:10:24.558 --> 00:10:29.363 align:start position:20% line:-1
数MB さらには数KBに減りました

00:10:31.965 --> 00:10:35.502 align:start position:27% line:-2
Create MLの目的は
機械学習を

00:10:35.602 --> 00:10:37.938 align:start position:30% line:-1
使いやすくすることです

00:10:38.238 --> 00:10:40.741 align:start position:30% line:-1
デモをお見せしましょう

00:10:47.447 --> 00:10:50.751 align:start position:29% line:-2
まず アプリケーションを
起動します

00:10:50.851 --> 00:10:55.489 align:start position:32% line:-2
最先端の分類モデルを
使用しているものです

00:10:56.190 --> 00:11:00.093 align:start position:20% line:-1
サイズが大きく 100MBあります

00:10:56.190 --> 00:11:00.093 align:start position:20% line:-1
サイズが大きく 100MBあります

00:11:00.561 --> 00:11:03.864 align:start position:25% line:-1
起動すると果物の画像が出ます

00:11:05.032 --> 00:11:08.135 align:start position:23% line:-1
でも正しく認識されていませんね

00:11:08.502 --> 00:11:10.537 align:start position:43% line:-1
残念です

00:11:11.605 --> 00:11:13.707 align:start position:30% line:-1
これらを分類しましょう

00:11:14.174 --> 00:11:17.578 align:start position:21% line:-1
新しいPlaygroundを表示

00:11:19.079 --> 00:11:23.050 align:start position:30% line:-2
CreateMLUIを
インポートして―

00:11:23.750 --> 00:11:25.085 align:start position:38% line:-1
UIを使います

00:11:26.019 --> 00:11:27.588 align:start position:32% line:-1
Builderを定義

00:11:28.655 --> 00:11:34.495 align:start position:16% line:-2
liveViewで
Builderを表示することができます

00:11:38.298 --> 00:11:43.570 align:start position:30% line:-2
画像をドラッグすると
トレーニングの開始です

00:11:44.771 --> 00:11:48.008 align:start position:34% line:-2
果物の画像を
用意しておきました

00:11:48.675 --> 00:11:51.111 align:start position:30% line:-1
ブルーベリーの画像です

00:11:51.612 --> 00:11:57.751 align:start position:20% line:-2
ドラッグすると 分類モデルが
Mac上でトレーニングを開始します

00:11:57.851 --> 00:12:00.587 align:start position:27% line:-1
GPUで処理が加速するので

00:11:57.851 --> 00:12:00.587 align:start position:27% line:-1
GPUで処理が加速するので

00:12:00.921 --> 00:12:03.857 align:start position:25% line:-1
カテゴリが多くても完了します

00:12:04.625 --> 00:12:08.395 align:start position:32% line:-2
データセットの精度を
自動で通知

00:12:08.495 --> 00:12:13.700 align:start position:30% line:-2
モデルが見たことのない
未知の画像を試して

00:12:13.800 --> 00:12:17.471 align:start position:30% line:-2
実際の精度を
予測することもできます

00:12:17.638 --> 00:12:21.174 align:start position:29% line:-2
未知の画像が
入ったフォルダをドラッグ

00:12:21.675 --> 00:12:24.978 align:start position:30% line:-2
すると
モデルが評価を行います

00:12:25.145 --> 00:12:29.082 align:start position:34% line:-2
スクロールすれば
画像の正解ラベルと

00:12:29.249 --> 00:12:32.085 align:start position:34% line:-2
予測されたラベルが
分かります

00:12:34.221 --> 00:12:36.890 align:start position:32% line:-1
精度に満足できたら―

00:12:37.357 --> 00:12:40.861 align:start position:27% line:-2
モデルを
アプリケーションにドラッグ

00:12:44.665 --> 00:12:47.034 align:start position:30% line:-1
追加してから見てみると

00:12:47.734 --> 00:12:50.170 align:start position:32% line:-1
モデルは83KBです

00:12:50.270 --> 00:12:53.707 align:start position:25% line:-1
バイト数が大きく減りましたね

00:12:53.807 --> 00:12:59.813 align:start position:43% line:-1
(拍手)

00:13:00.080 --> 00:13:03.116 align:start position:30% line:-1
古いモデルを削除したら

00:13:03.217 --> 00:13:08.121 align:start position:29% line:-1
画像分類器を初期化します

00:13:10.424 --> 00:13:11.959 align:start position:39% line:-1
再起動して―

00:13:13.060 --> 00:13:14.361 align:start position:34% line:-1
シミュレータを起動

00:13:17.464 --> 00:13:19.700 align:start position:29% line:-1
モデルの動きを確認します

00:13:23.904 --> 00:13:26.540 align:start position:27% line:-1
学習したことでラズベリーを

00:13:26.640 --> 00:13:30.244 align:start position:30% line:-2
正しく認識できるように
なりました

00:13:30.577 --> 00:13:34.515 align:start position:30% line:-2
イチゴとブルーベリーの
区別も可能です

00:13:37.851 --> 00:13:39.953 align:start position:25% line:-1
ワークフローは他にもあります

00:13:40.521 --> 00:13:44.358 align:start position:32% line:-2
この流れを
自動化したいですよね

00:13:44.992 --> 00:13:48.428 align:start position:20% line:-1
Create MLを使えば可能です

00:13:51.732 --> 00:13:56.670 align:start position:23% line:-2
まずは
Create MLをインポート

00:13:57.738 --> 00:14:01.708 align:start position:30% line:-2
Foundationも
インポートします

00:13:57.738 --> 00:14:01.708 align:start position:30% line:-2
Foundationも
インポートします

00:14:03.577 --> 00:14:07.548 align:start position:30% line:-2
先ほど使ったフォルダが
まだありますね

00:14:08.882 --> 00:14:10.317 align:start position:34% line:-1
フォルダの場所と―

00:14:12.653 --> 00:14:15.856 align:start position:25% line:-1
テスト画像の場所を明示します

00:14:16.290 --> 00:14:18.959 align:start position:30% line:-1
次は トレーニングです

00:14:19.226 --> 00:14:20.894 align:start position:34% line:-1
モデルを定義して―

00:14:22.129 --> 00:14:24.698 align:start position:29% line:-1
画像分類器を初期化します

00:14:25.065 --> 00:14:28.969 align:start position:27% line:-1
何が使えるか見てみましょう

00:14:29.069 --> 00:14:34.007 align:start position:27% line:-2
画像の配列にラベルが付いた
辞書形式のデータや

00:14:35.142 --> 00:14:40.347 align:start position:23% line:-2
データソースやパラメータなどを
使うことができます

00:14:41.348 --> 00:14:46.253 align:start position:21% line:-2
データソースと
ラベルディレクトリを使いましょう

00:14:46.353 --> 00:14:48.755 align:start position:29% line:-1
次に ディレクトリを明記

00:14:50.390 --> 00:14:55.295 align:start position:29% line:-2
シフトキーと
エンターキーを押すだけで

00:14:55.796 --> 00:14:58.098 align:start position:29% line:-1
トレーニングを開始します

00:14:59.066 --> 00:15:01.168 align:start position:30% line:-1
コンソールを表示すれば

00:14:59.066 --> 00:15:01.168 align:start position:30% line:-1
コンソールを表示すれば

00:15:01.468 --> 00:15:07.608 align:start position:25% line:-2
抽出した特徴量や
処理の回数などを確認できます

00:15:08.442 --> 00:15:11.044 align:start position:29% line:-1
その後 クイックルックで

00:15:11.144 --> 00:15:14.882 align:start position:23% line:-2
モデル名と
使用したデータの数が分かります

00:15:16.083 --> 00:15:19.987 align:start position:32% line:-2
では テストデータを
評価しましょう

00:15:20.420 --> 00:15:21.522 align:start position:39% line:-1
見てください

00:15:22.222 --> 00:15:25.559 align:start position:20% line:-1
evaluationを呼び出します

00:15:25.659 --> 00:15:27.928 align:start position:29% line:-1
フォルダ構成は同じなので

00:15:28.028 --> 00:15:32.232 align:start position:30% line:-2
データのURLを特定し
エンターキーを押下

00:15:32.866 --> 00:15:35.869 align:start position:27% line:-1
すると モデルが評価します

00:15:36.036 --> 00:15:41.241 align:start position:25% line:-2
完了したら クイックルックで
評価した画像の数と

00:15:41.341 --> 00:15:45.646 align:start position:32% line:-2
フォルダのクラス数や
精度を確認できます

00:15:46.747 --> 00:15:49.149 align:start position:29% line:-1
結果に満足なら 出力です

00:15:58.525 --> 00:16:02.963 align:start position:29% line:-2
名前を付けて
デスクトップに保存します

00:15:58.525 --> 00:16:02.963 align:start position:29% line:-2
名前を付けて
デスクトップに保存します

00:16:04.731 --> 00:16:07.935 align:start position:34% line:-2
デスクトップに
モデルが現れました

00:16:08.469 --> 00:16:12.472 align:start position:30% line:-2
ダブルクリックすると
同じものだと分かります

00:16:12.573 --> 00:16:14.708 align:start position:38% line:-1
83KBですね

00:16:16.877 --> 00:16:19.980 align:start position:30% line:-2
さらに 組み込み直しも
可能です

00:16:21.081 --> 00:16:22.015 align:start position:38% line:-1
まとめましょう

00:16:25.886 --> 00:16:30.724 align:start position:43% line:-1
(拍手)

00:16:31.892 --> 00:16:36.063 align:start position:32% line:-2
画像分類の学習方法を
２つ紹介しました

00:16:36.163 --> 00:16:39.533 align:start position:21% line:-1
１つは UIを使った簡単な方法で

00:16:39.633 --> 00:16:44.571 align:start position:32% line:-2
ドラッグ＆ドロップで
モデルを作成できます

00:16:45.305 --> 00:16:48.475 align:start position:32% line:-2
もう１つは
APIを使う方法です

00:16:48.575 --> 00:16:53.914 align:start position:21% line:-2
まず初めに Create MLを
インポートします

00:16:54.348 --> 00:16:58.151 align:start position:29% line:-1
次に データの場所を指定

00:16:58.652 --> 00:17:03.190 align:start position:29% line:-2
その後
トレーニングを開始します

00:16:58.652 --> 00:17:03.190 align:start position:29% line:-2
その後
トレーニングを開始します

00:17:04.090 --> 00:17:08.595 align:start position:34% line:-2
データを評価したら
モデルを保存します

00:17:11.431 --> 00:17:14.835 align:start position:34% line:-2
自動化する場合
スクリプトに書けば

00:17:14.935 --> 00:17:19.540 align:start position:30% line:-2
処理を保存しておいて
いつでも再実行できます

00:17:21.608 --> 00:17:25.412 align:start position:29% line:-2
ファイルの権限を
変更することもできますし

00:17:25.945 --> 00:17:30.584 align:start position:23% line:-2
Swiftのコマンドラインでも
実行可能です

00:17:31.084 --> 00:17:36.723 align:start position:23% line:-2
画像分類のさまざまな学習方法を
紹介しました

00:17:36.823 --> 00:17:42.062 align:start position:27% line:-2
次は タオに自然言語処理を
説明してもらいます

00:17:42.262 --> 00:17:46.900 align:start position:43% line:-1
(拍手)

00:17:50.604 --> 00:17:51.538 align:start position:41% line:-1
ありがとう

00:17:54.541 --> 00:17:56.643 align:start position:32% line:-1
こんにちは　私はタオ

00:17:56.743 --> 00:18:00.414 align:start position:18% line:-1
Core MLチームのエンジニアです

00:17:56.743 --> 00:18:00.414 align:start position:18% line:-1
Core MLチームのエンジニアです

00:18:00.881 --> 00:18:05.519 align:start position:30% line:-2
画像分類の学習が
いかに簡単にできるかを

00:18:05.619 --> 00:18:07.788 align:start position:34% line:-1
ご覧いただきました

00:18:08.121 --> 00:18:12.726 align:start position:30% line:-2
今度は 自然言語処理の
簡単さをお話しします

00:18:14.361 --> 00:18:18.732 align:start position:25% line:-2
今年から 自然言語処理の
２つのタスクをサポートします

00:18:19.366 --> 00:18:22.336 align:start position:27% line:-1
テキスト分類とタグ付けです

00:18:22.970 --> 00:18:26.507 align:start position:27% line:-2
今日は
テキスト分類について説明し

00:18:26.707 --> 00:18:31.812 align:start position:23% line:-2
タグ付けの詳細は
明日のセッションでお話しします

00:18:32.546 --> 00:18:37.050 align:start position:23% line:-2
テキスト分類はいくつかの
アプリケーションで利用可能です

00:18:37.718 --> 00:18:40.287 align:start position:29% line:-1
例えば センチメント分析

00:18:40.654 --> 00:18:43.557 align:start position:32% line:-2
“デベロッパの
行動力は すごい！”

00:18:43.724 --> 00:18:47.060 align:start position:34% line:-2
これは肯定的だと
認識させたい文です

00:18:47.427 --> 00:18:49.830 align:start position:43% line:-1
(拍手)

00:18:50.364 --> 00:18:52.065 align:start position:41% line:-1
スパム分析

00:18:52.199 --> 00:18:57.237 align:start position:30% line:-2
明らかにスパムと分かる
こんなメッセージも―

00:18:57.638 --> 00:18:59.940 align:start position:34% line:-2
アプリケーションに
認識させたいですね

00:19:01.942 --> 00:19:03.510 align:start position:39% line:-1
トピック分析

00:19:03.710 --> 00:19:06.680 align:start position:34% line:-2
“すばらしい
逆転勝利を収めた”

00:19:07.047 --> 00:19:11.452 align:start position:32% line:-2
これがスポーツ関連の
投稿だと認識させたい

00:19:12.286 --> 00:19:17.724 align:start position:23% line:-2
分類器をトレーニングするために
データを集めます

00:19:18.325 --> 00:19:23.964 align:start position:27% line:-2
学習データの構成を
複数の方法でサポートします

00:19:24.231 --> 00:19:27.234 align:start position:27% line:-1
例えば ラベルディレクトリ

00:19:27.367 --> 00:19:32.272 align:start position:21% line:-2
“肯定的”と“否定的”という名の
フォルダがあります

00:19:32.739 --> 00:19:37.678 align:start position:30% line:-2
各フォルダには
多くの記事が入っており

00:19:37.778 --> 00:19:41.849 align:start position:25% line:-1
ラベルはフォルダ名と同じです

00:19:43.283 --> 00:19:47.354 align:start position:30% line:-2
データをCSVで
用意することもできます

00:19:47.521 --> 00:19:52.259 align:start position:29% line:-2
テキストとラベルを
コンマで分けておくのです

00:19:52.926 --> 00:19:55.929 align:start position:23% line:-1
JSON形式のデータも使えます

00:19:56.196 --> 00:19:59.500 align:start position:34% line:-2
これまでに
話したような方法で

00:19:59.600 --> 00:20:03.637 align:start position:30% line:-2
テストデータを
構成することができます

00:19:59.600 --> 00:20:03.637 align:start position:30% line:-2
テストデータを
構成することができます

00:20:06.273 --> 00:20:09.409 align:start position:30% line:-1
データを準備する他に―

00:20:09.643 --> 00:20:13.514 align:start position:29% line:-2
トレーニングに
必要なことは何でしょう？

00:20:16.216 --> 00:20:18.952 align:start position:21% line:-1
典型的なワークフローを説明します

00:20:19.953 --> 00:20:21.755 align:start position:34% line:-1
まず テキストが―

00:20:22.156 --> 00:20:26.193 align:start position:30% line:-2
どの言語を含んでいるか
認識します

00:20:27.161 --> 00:20:29.363 align:start position:36% line:-1
次に トークン化

00:20:30.230 --> 00:20:33.200 align:start position:27% line:-1
その後 特徴量に変換します

00:20:34.268 --> 00:20:36.970 align:start position:32% line:-1
そして モデルに適用

00:20:37.504 --> 00:20:42.376 align:start position:29% line:-2
モデルがラベルに対応する
予想値を出します

00:20:42.843 --> 00:20:47.681 align:start position:29% line:-2
そのラベルと正解ラベルの
比較を繰り返します

00:20:49.383 --> 00:20:54.054 align:start position:23% line:-2
でもCreate MLを使えば
とても簡単

00:20:54.354 --> 00:20:59.827 align:start position:30% line:-2
テキストと正解ラベルを
準備するだけで

00:20:59.993 --> 00:21:02.663 align:start position:30% line:-2
すぐに
トレーニングができます

00:20:59.993 --> 00:21:02.663 align:start position:30% line:-2
すぐに
トレーニングができます

00:21:03.497 --> 00:21:09.102 align:start position:43% line:-1
(拍手)

00:21:09.770 --> 00:21:15.109 align:start position:29% line:-2
では トレーニング方法と
使用例を紹介しましょう

00:21:16.376 --> 00:21:20.414 align:start position:30% line:-2
このアプリケーションで
説明します

00:21:20.848 --> 00:21:24.318 align:start position:32% line:-2
肯定的な投稿を
勧めるためのものです

00:21:25.686 --> 00:21:28.155 align:start position:27% line:-1
“渋滞は嫌い”と入力すれば

00:21:28.355 --> 00:21:32.125 align:start position:29% line:-2
背景を赤くして
投稿ボタンを無効にします

00:21:32.593 --> 00:21:35.162 align:start position:41% line:-1
(笑い声)

00:21:35.262 --> 00:21:40.434 align:start position:29% line:-2
“時速８キロで渋滞の中
運転するのが大好き”なら

00:21:41.535 --> 00:21:44.705 align:start position:27% line:-1
肯定的なので投稿を勧めます

00:21:46.006 --> 00:21:51.612 align:start position:29% line:-2
誰もがこの機能を使ったら
どうなるでしょう？

00:21:51.712 --> 00:21:55.582 align:start position:43% line:-1
(拍手)

00:21:56.783 --> 00:21:59.553 align:start position:29% line:-1
では デモをお見せします

00:22:07.261 --> 00:22:12.633 align:start position:27% line:-2
まずトレーニングするために
データを集めます

00:22:15.335 --> 00:22:19.740 align:start position:25% line:-2
学習フォルダと
テストフォルダを用意しました

00:22:20.007 --> 00:22:24.878 align:start position:21% line:-2
学習フォルダの中には
“肯定的”と“否定的”のフォルダ

00:22:25.312 --> 00:22:28.749 align:start position:25% line:-1
それぞれに記事が入っています

00:22:29.416 --> 00:22:32.686 align:start position:30% line:-2
テストフォルダの構成も
同じです

00:22:33.353 --> 00:22:34.354 align:start position:45% line:-1
では―

00:22:35.989 --> 00:22:39.860 align:start position:32% line:-2
Create MLを
インポートします

00:22:41.328 --> 00:22:46.233 align:start position:29% line:-2
次に 学習データの場所を
明示します

00:22:47.668 --> 00:22:50.904 align:start position:30% line:-1
URLを取得しましょう

00:22:51.205 --> 00:22:54.041 align:start position:29% line:-1
次に トレーニングを開始

00:22:54.141 --> 00:22:57.311 align:start position:25% line:-1
ラベルディレクトリを使います

00:22:59.413 --> 00:23:01.048 align:start position:39% line:-1
始まりました

00:22:59.413 --> 00:23:01.048 align:start position:39% line:-1
始まりました

00:23:02.282 --> 00:23:06.487 align:start position:34% line:-2
下段に 進捗状況が
表示されています

00:23:06.820 --> 00:23:08.422 align:start position:36% line:-1
完了したようです

00:23:10.290 --> 00:23:14.261 align:start position:32% line:-2
モデルが処理した数を
確認しましょう

00:23:14.361 --> 00:23:17.998 align:start position:27% line:-1
インスタンスを呼び出すと―

00:23:18.599 --> 00:23:22.569 align:start position:30% line:-2
2000以上のデータで
学習したと分かります

00:23:22.903 --> 00:23:25.005 align:start position:34% line:-1
精度は100％です

00:23:27.808 --> 00:23:30.878 align:start position:36% line:-2
未知のデータでは
どうでしょう？

00:23:31.311 --> 00:23:34.715 align:start position:32% line:-2
同様にテストデータを
定義します

00:23:36.550 --> 00:23:37.417 align:start position:41% line:-1
それから―

00:23:38.285 --> 00:23:41.755 align:start position:34% line:-2
そのデータで
モデルを評価します

00:23:43.557 --> 00:23:47.661 align:start position:23% line:-1
テストに使ったデータの数は77

00:23:47.928 --> 00:23:51.465 align:start position:32% line:-1
精度は94％以上です

00:23:52.299 --> 00:23:53.567 align:start position:39% line:-1
上出来ですね

00:23:54.468 --> 00:23:59.339 align:start position:32% line:-2
より高い精度を求めて
やり直しもできますが

00:23:59.606 --> 00:24:02.609 align:start position:29% line:-1
私は この精度で十分です

00:23:59.606 --> 00:24:02.609 align:start position:29% line:-1
私は この精度で十分です

00:24:02.876 --> 00:24:04.745 align:start position:30% line:-1
実際に使ってみましょう

00:24:05.212 --> 00:24:06.780 align:start position:30% line:-1
モデルを保存するため―

00:24:07.347 --> 00:24:11.752 align:start position:30% line:-2
保存先のURLを
定義する必要があります

00:24:12.653 --> 00:24:16.457 align:start position:32% line:-2
そしてデスクトップに
出力します

00:24:17.658 --> 00:24:19.960 align:start position:30% line:-1
モデルが保存されました

00:24:22.429 --> 00:24:26.633 align:start position:30% line:-2
アプリケーションに戻り
モデルをドロップ

00:24:28.035 --> 00:24:29.069 align:start position:41% line:-1
これでよし

00:24:33.540 --> 00:24:36.610 align:start position:30% line:-1
これでモデルを使えます

00:24:37.377 --> 00:24:42.816 align:start position:29% line:-2
オートコンプリート機能で
コードを書いたら―

00:24:43.283 --> 00:24:47.488 align:start position:36% line:-2
推論コードを
インサートします

00:24:49.323 --> 00:24:52.526 align:start position:32% line:-2
ご覧のとおり
推論コードの１行目で

00:24:52.626 --> 00:24:55.596 align:start position:18% line:-1
predictionを取得しています

00:24:55.696 --> 00:25:00.767 align:start position:25% line:-2
その後 UIと接続するために
doubleValueに変換

00:24:55.696 --> 00:25:00.767 align:start position:25% line:-2
その後 UIと接続するために
doubleValueに変換

00:25:02.736 --> 00:25:03.871 align:start position:39% line:-1
試してみます

00:25:16.650 --> 00:25:18.886 align:start position:29% line:-1
先ほどの例を使いましょう

00:25:19.586 --> 00:25:21.088 align:start position:38% line:-1
“渋滞は嫌い”

00:25:22.022 --> 00:25:23.090 align:start position:41% line:-1
否定的です

00:25:24.892 --> 00:25:29.630 align:start position:38% line:-2
“時速８キロで
渋滞の中―”

00:25:30.464 --> 00:25:32.366 align:start position:30% line:-1
“運転するのが大好き”

00:25:33.634 --> 00:25:34.601 align:start position:41% line:-1
肯定的です

00:25:35.068 --> 00:25:38.005 align:start position:36% line:-2
別の文章でも
試してみましょう

00:25:38.605 --> 00:25:40.207 align:start position:32% line:-1
“機械学習は難しい”

00:25:41.575 --> 00:25:45.712 align:start position:16% line:-1
“でもCreate MLで簡単になる”

00:25:46.413 --> 00:25:47.381 align:start position:41% line:-1
肯定的です

00:25:47.981 --> 00:25:52.519 align:start position:43% line:-1
(拍手)

00:25:53.487 --> 00:25:57.291 align:start position:32% line:-2
このように 分類器を
トレーニングして

00:25:57.391 --> 00:25:59.493 align:start position:27% line:-1
アプリケーションで使えます

00:26:05.265 --> 00:26:06.066 align:start position:39% line:-1
おさらいです

00:26:08.035 --> 00:26:12.606 align:start position:29% line:-2
トレーニングする場合
まずはデータを明示します

00:26:13.173 --> 00:26:16.777 align:start position:30% line:-2
学習データと
テストデータの両方です

00:26:17.845 --> 00:26:21.148 align:start position:32% line:-1
そして モデルを作成

00:26:22.015 --> 00:26:26.854 align:start position:29% line:-2
テストデータで
モデルの性能を評価します

00:26:27.688 --> 00:26:34.928 align:start position:25% line:-2
最後に アプリケーションで
モデルを使うために保存します

00:26:38.365 --> 00:26:39.533 align:start position:38% line:-1
まとめましょう

00:26:40.434 --> 00:26:42.836 align:start position:32% line:-1
たった数行のコードで

00:26:42.936 --> 00:26:48.809 align:start position:27% line:-2
あなただけの分類器を
簡単にトレーニングできます

00:26:50.611 --> 00:26:55.048 align:start position:30% line:-2
次は 表形式データの
話をしてもらいましょう

00:26:55.249 --> 00:26:55.949 align:start position:41% line:-1
ありがとう

00:26:56.450 --> 00:26:59.753 align:start position:43% line:-1
(拍手)

00:27:01.355 --> 00:27:02.356 align:start position:36% line:-1
ありがとう タオ

00:27:04.758 --> 00:27:06.660 align:start position:34% line:-1
機械学習においては

00:27:06.760 --> 00:27:13.233 align:start position:23% line:-2
画像やテキストに並び
表形式データも頻繁に登場します

00:27:13.867 --> 00:27:19.506 align:start position:29% line:-2
表形式データとは
テーブル形式のデータです

00:27:19.606 --> 00:27:22.009 align:start position:34% line:-1
よくある形式ですね

00:27:22.643 --> 00:27:26.146 align:start position:34% line:-2
例えば 住宅価格を
予測するとします

00:27:26.246 --> 00:27:29.182 align:start position:29% line:-1
寝室や浴室の数 面積は―

00:27:29.716 --> 00:27:32.920 align:start position:27% line:-1
一般的に 表形式で表します

00:27:34.254 --> 00:27:38.091 align:start position:27% line:-2
ワインの品質を
化学成分で予測したい場合も

00:27:38.192 --> 00:27:40.727 align:start position:29% line:-1
データは表形式で表します

00:27:41.061 --> 00:27:44.698 align:start position:32% line:-2
今夜どのバーに行くか
決める場合も

00:27:44.798 --> 00:27:49.703 align:start position:34% line:-2
価格などのデータは
表形式で表します

00:27:51.905 --> 00:27:56.310 align:start position:29% line:-2
表形式データを扱うために
導入したのが

00:27:56.410 --> 00:28:01.982 align:start position:25% line:-2
MLDataTableという
新しいデータ構造です

00:27:56.410 --> 00:28:01.982 align:start position:25% line:-2
MLDataTableという
新しいデータ構造です

00:28:02.382 --> 00:28:06.353 align:start position:29% line:-2
MLDataTableの
技術については

00:28:06.453 --> 00:28:08.822 align:start position:29% line:-1
明日 詳細をお話しします

00:28:10.057 --> 00:28:12.726 align:start position:27% line:-1
このような表は面白いですね

00:28:13.794 --> 00:28:17.164 align:start position:27% line:-1
行に含まれるのは記録や実例

00:28:17.264 --> 00:28:22.102 align:start position:29% line:-2
２番目の家には寝室が４つ
浴室が３つあります

00:28:23.403 --> 00:28:26.039 align:start position:36% line:-1
列は 特徴量です

00:28:26.140 --> 00:28:28.041 align:start position:29% line:-1
つまり 寝室の数は特徴量

00:28:28.542 --> 00:28:32.446 align:start position:32% line:-2
浴室の数や
面積なども特徴量です

00:28:33.113 --> 00:28:36.316 align:start position:36% line:-2
この列の中で
予測したいのは―

00:28:36.750 --> 00:28:38.452 align:start position:43% line:-1
価格です

00:28:39.253 --> 00:28:43.557 align:start position:29% line:-2
応答変数 または
目的変数と呼ばれる列です

00:28:43.957 --> 00:28:48.195 align:start position:32% line:-2
表形式データの目的は
特徴量としての

00:28:48.295 --> 00:28:52.432 align:start position:27% line:-1
目的変数を予測することです

00:28:54.968 --> 00:29:02.543 align:start position:21% line:-2
我々がサポートしているのは
CSVやJSONなどのソースです

00:28:54.968 --> 00:29:02.543 align:start position:21% line:-2
我々がサポートしているのは
CSVやJSONなどのソースです

00:29:02.643 --> 00:29:04.177 align:start position:36% line:-1
では もう少し―

00:29:05.379 --> 00:29:08.182 align:start position:30% line:-1
詳細をお話ししましょう

00:29:09.449 --> 00:29:14.588 align:start position:30% line:-2
初めに CSVデータを
読み込みます

00:29:16.089 --> 00:29:20.761 align:start position:29% line:-2
サブスクリプトでも
列へのアクセスが可能です

00:29:20.861 --> 00:29:25.499 align:start position:32% line:-2
次に 価格の列全体の
情報を取得します

00:29:27.367 --> 00:29:32.439 align:start position:34% line:-2
２つの列で
四則計算もできます

00:29:33.607 --> 00:29:36.543 align:start position:36% line:-2
これは自然な
シンタックスです

00:29:36.643 --> 00:29:38.979 align:start position:34% line:-1
価格を面積で割れば

00:29:39.079 --> 00:29:42.015 align:start position:34% line:-2
面積あたりの価格が
分かります

00:29:43.050 --> 00:29:48.121 align:start position:29% line:-2
この計算に使っているのは
簡単な評価と―

00:29:48.722 --> 00:29:50.724 align:start position:36% line:-1
ベクトル演算です

00:29:51.992 --> 00:29:55.495 align:start position:25% line:-1
他にも面白いことができますよ

00:29:55.596 --> 00:30:00.467 align:start position:30% line:-2
テーブルの分割や
フィルタリングなどです

00:29:55.596 --> 00:30:00.467 align:start position:30% line:-2
テーブルの分割や
フィルタリングなどです

00:30:00.567 --> 00:30:04.071 align:start position:32% line:-2
例えば大きい家にしか
興味がないなら

00:30:04.171 --> 00:30:07.341 align:start position:27% line:-1
大きい家だけを表示できます

00:30:08.041 --> 00:30:10.777 align:start position:29% line:-1
さまざまな機能があるので

00:30:10.878 --> 00:30:14.615 align:start position:30% line:-2
Playgroundで
試してみてください

00:30:14.715 --> 00:30:15.482 align:start position:39% line:-1
楽しいですよ

00:30:18.085 --> 00:30:21.889 align:start position:32% line:-2
データを入力したら
トレーニングをします

00:30:22.790 --> 00:30:27.127 align:start position:29% line:-2
Create MLは
ランダムフォレストなど―

00:30:27.461 --> 00:30:30.464 align:start position:25% line:-1
多くのアルゴリズムをサポート

00:30:31.165 --> 00:30:35.235 align:start position:29% line:-2
アルゴリズムは
クラスによって表されます

00:30:36.537 --> 00:30:40.107 align:start position:32% line:-2
１行のコードで
トレーニング可能です

00:30:40.207 --> 00:30:42.709 align:start position:38% line:-2
ターゲットや
データの場所―

00:30:42.976 --> 00:30:47.047 align:start position:30% line:-2
使用するアルゴリズムを
書きます

00:30:47.347 --> 00:30:51.351 align:start position:30% line:-2
線形回帰アルゴリズムを
実行したいなら

00:30:51.518 --> 00:30:54.454 align:start position:30% line:-1
このように書きましょう

00:30:54.721 --> 00:30:58.225 align:start position:27% line:-1
データと列の情報も必要です

00:31:01.395 --> 00:31:07.167 align:start position:25% line:-2
別のアルゴリズムを使う場合は
冒頭部分を書き換えるだけ

00:31:07.568 --> 00:31:10.337 align:start position:21% line:-1
ランダムフォレストなら こうです

00:31:11.205 --> 00:31:13.106 align:start position:29% line:-1
さらに 利用可能なのが―

00:31:13.607 --> 00:31:16.310 align:start position:27% line:-1
MLRegressorです

00:31:16.410 --> 00:31:20.914 align:start position:32% line:-2
最適なアルゴリズムを
自動で選んでくれます

00:31:21.148 --> 00:31:26.854 align:start position:43% line:-1
(拍手)

00:31:27.654 --> 00:31:30.958 align:start position:32% line:-2
これで 本来の仕事に
集中できます

00:31:31.058 --> 00:31:36.697 align:start position:25% line:-2
アルゴリズムではなく
価格の予想に焦点を絞れますね

00:31:36.964 --> 00:31:43.771 align:start position:27% line:-2
ですが あなたが専門家なら
パラメータの変更もできます

00:31:48.375 --> 00:31:51.512 align:start position:27% line:-1
処理の全体像をお見せします

00:31:51.945 --> 00:31:56.417 align:start position:32% line:-2
画像やテキストの時と
同じパターンです

00:31:56.517 --> 00:31:58.819 align:start position:32% line:-1
まずは データを指定

00:32:00.020 --> 00:32:02.923 align:start position:30% line:-1
次に モデルを作ります

00:32:03.557 --> 00:32:06.160 align:start position:32% line:-1
そして モデルを評価

00:32:07.227 --> 00:32:09.563 align:start position:27% line:-1
結果に満足なら 保存します

00:32:10.364 --> 00:32:13.300 align:start position:29% line:-1
表形式データと画像データ

00:32:13.467 --> 00:32:16.837 align:start position:34% line:-2
テキストデータは
どれも同じ流れです

00:32:20.073 --> 00:32:24.511 align:start position:34% line:-2
このセッションの
まとめをしましょう

00:32:27.881 --> 00:32:31.118 align:start position:29% line:-2
Create MLは
機械学習フレームワークで

00:32:31.218 --> 00:32:34.121 align:start position:36% line:-2
使い方は簡単でも
パワフルです

00:32:34.521 --> 00:32:40.460 align:start position:29% line:-2
Mac上のSwift内で
機械学習を完結できます

00:32:43.497 --> 00:32:45.999 align:start position:25% line:-1
ワークフローも説明しましたね

00:32:47.067 --> 00:32:52.639 align:start position:27% line:-2
どんな体験を実現したいかを
考えることから始まります

00:32:53.640 --> 00:32:57.277 align:start position:30% line:-2
そして問題を明確にして
データを集めます

00:32:57.377 --> 00:33:01.281 align:start position:32% line:-2
必ず データが
実用的であることを―

00:32:57.377 --> 00:33:01.281 align:start position:32% line:-2
必ず データが
実用的であることを―

00:33:01.849 --> 00:33:03.083 align:start position:38% line:-1
確認しましょう

00:33:03.517 --> 00:33:07.621 align:start position:32% line:-2
その後 モデルを
トレーニングして評価

00:33:07.955 --> 00:33:11.158 align:start position:27% line:-1
結果に満足なら 保存します

00:33:14.528 --> 00:33:15.696 align:start position:30% line:-1
Create MLは―

00:33:16.296 --> 00:33:19.800 align:start position:27% line:-2
macOS Mojaveで
入手できます

00:33:22.736 --> 00:33:27.608 align:start position:16% line:-2
Xcode Playgroundなどで
使用可能です

00:33:29.276 --> 00:33:31.044 align:start position:34% line:-1
試してみてください

00:33:32.212 --> 00:33:36.617 align:start position:36% line:-2
フィードバックを
お待ちしています

00:33:36.884 --> 00:33:39.686 align:start position:32% line:-2
気に入ってもらえたら
うれしいですね

00:33:41.722 --> 00:33:47.194 align:start position:29% line:-2
明日は 機械学習の会合と
ラボがありますので

00:33:47.294 --> 00:33:50.664 align:start position:36% line:-2
フィードバックを
聞かせてください

00:33:51.231 --> 00:33:57.237 align:start position:23% line:-2
明朝には Create MLの
セッションがあります

00:33:57.337 --> 00:34:01.141 align:start position:34% line:-2
午後のセッションは
機械学習です

00:33:57.337 --> 00:34:01.141 align:start position:34% line:-2
午後のセッションは
機械学習です

00:34:01.241 --> 00:34:03.076 align:start position:34% line:-1
木曜日にもあります

00:34:05.479 --> 00:34:09.116 align:start position:30% line:-2
ラボは水曜日と金曜日の
予定です

00:34:09.349 --> 00:34:10.050 align:start position:41% line:-1
ありがとう

00:34:10.784 --> 00:34:13.853 align:start position:43% line:-1
(拍手)
