WEBVTT

00:00:07.040 --> 00:00:16.149 align:start position:43% line:-1
(音楽)

00:00:30.631 --> 00:00:36.236 align:start position:43% line:-1
(拍手)

00:00:36.336 --> 00:00:37.704 align:start position:41% line:-1
こんにちは

00:00:38.071 --> 00:00:41.608 align:start position:27% line:-2
今日はXcodeの
ビルドプロセスを解説します

00:00:41.808 --> 00:00:45.712 align:start position:29% line:-2
私はビルドシステム部門の
ジェイクです

00:00:45.846 --> 00:00:49.416 align:start position:36% line:-2
これから交代で
解説していきます

00:00:51.118 --> 00:00:55.689 align:start position:25% line:-2
まずXcode 10の新たな
ビルドシステムを説明します

00:00:55.789 --> 00:00:58.559 align:start position:34% line:-2
全面的に再構築され
進化しました

00:00:58.892 --> 00:01:02.362 align:start position:23% line:-2
Command + Bを押すと
何が起きるのでしょう？

00:00:58.892 --> 00:01:02.362 align:start position:23% line:-2
Command + Bを押すと
何が起きるのでしょう？

00:01:02.462 --> 00:01:06.733 align:start position:27% line:-2
どんな順番で どうやって
プロジェクトの情報を使い―

00:01:06.834 --> 00:01:10.337 align:start position:30% line:-2
ビルドプロセスを
決定するのでしょうか？

00:01:11.371 --> 00:01:14.007 align:start position:29% line:-1
次にコンパイラの領域です

00:01:14.541 --> 00:01:18.879 align:start position:29% line:-2
オブジェクトファイルへと
コンパイルされる過程や―

00:01:19.146 --> 00:01:21.315 align:start position:32% line:-2
ヘッダとモジュールの
動きを説明します

00:01:21.415 --> 00:01:24.151 align:start position:29% line:-2
コンパイラが
宣言を見つける方法とは？

00:01:24.251 --> 00:01:29.523 align:start position:25% line:-2
Swiftのコンパイルは
他の言語とは大きく異なります

00:01:30.557 --> 00:01:36.029 align:start position:29% line:-2
プロセスの最終段階である
リンカーも解説します

00:01:36.296 --> 00:01:39.399 align:start position:36% line:-2
シンボルの役割を
確認しましょう

00:01:39.500 --> 00:01:42.436 align:start position:27% line:-2
また コンパイラで生成した
オブジェクトファイルが―

00:01:42.536 --> 00:01:46.707 align:start position:30% line:-2
実行可能ファイルとなる
過程を説明します

00:01:48.242 --> 00:01:52.880 align:start position:30% line:-2
アプリケーションの
サンプルを用意しました

00:01:52.980 --> 00:01:56.049 align:start position:30% line:-2
ペットの写真を表示する
PetWallです

00:01:59.052 --> 00:02:02.055 align:start position:30% line:-2
では ビルドプロセスの
解説を始めます

00:01:59.052 --> 00:02:02.055 align:start position:30% line:-2
では ビルドプロセスの
解説を始めます

00:02:02.155 --> 00:02:05.592 align:start position:23% line:-2
Xcodeがアプリケーションを
ビルドする方法とは？

00:02:06.093 --> 00:02:11.732 align:start position:23% line:-2
アプリケーションは 多数の
ソースコードで成り立っており―

00:02:11.832 --> 00:02:14.168 align:start position:32% line:-1
記述言語も異なります

00:02:15.536 --> 00:02:16.236 align:start position:45% line:-1
さて…

00:02:17.271 --> 00:02:18.505 align:start position:39% line:-1
ビルドとは―

00:02:19.039 --> 00:02:23.677 align:start position:29% line:-2
ソースコードやリソースを
パッケージ化することです

00:02:23.777 --> 00:02:28.382 align:start position:29% line:-2
ユーザに配信するまでには
多くのステップがあります

00:02:29.016 --> 00:02:31.718 align:start position:34% line:-2
コンパイルや
リンク作業の他に―

00:02:31.818 --> 00:02:37.024 align:start position:29% line:-2
ヘッダを始めとした
リソースの管理も必要です

00:02:37.157 --> 00:02:38.559 align:start position:30% line:-1
そしてコード署名します

00:02:38.659 --> 00:02:41.595 align:start position:32% line:-2
場合によっては
シェルスクリプトや―

00:02:41.795 --> 00:02:47.267 align:start position:23% line:-2
APIドキュメントや
検証ツールの準備もするでしょう

00:02:48.368 --> 00:02:52.406 align:start position:23% line:-2
こうした処理には
コマンドラインツールが必要です

00:02:52.506 --> 00:02:56.944 align:start position:29% line:-2
例えば ClangやLD
ACツールなどです

00:02:57.477 --> 00:03:01.048 align:start position:29% line:-2
正常に実行させるには
プロジェクト内の引数を―

00:02:57.477 --> 00:03:01.048 align:start position:29% line:-2
正常に実行させるには
プロジェクト内の引数を―

00:03:01.148 --> 00:03:05.118 align:start position:30% line:-2
正しい順序で
構成する必要があります

00:03:06.520 --> 00:03:11.225 align:start position:32% line:-2
ビルドシステムは
指示されたタスクを―

00:03:11.325 --> 00:03:12.926 align:start position:34% line:-1
自動的に処理します

00:03:13.427 --> 00:03:16.230 align:start position:29% line:-1
タスクは何万にも及びます

00:03:16.330 --> 00:03:20.467 align:start position:32% line:-2
しかも 互いが複雑に
依存しているのです

00:03:20.567 --> 00:03:24.371 align:start position:27% line:-2
ビルドのたびに
手動で処理していられません

00:03:25.439 --> 00:03:27.641 align:start position:36% line:-2
ビルドシステムに
任せましょう

00:03:29.376 --> 00:03:34.248 align:start position:27% line:-2
ビルドシステムの実行に際し
大事なのは順序です

00:03:34.348 --> 00:03:37.718 align:start position:32% line:-2
順序の決定方法と
その理由を説明します

00:03:38.752 --> 00:03:43.123 align:start position:27% line:-2
タスクの実行順序は
依存関係によって決まります

00:03:43.223 --> 00:03:48.462 align:start position:29% line:-2
タスクはインプットを受け
アウトプットを生成します

00:03:49.263 --> 00:03:55.269 align:start position:7% line:-2
例えば PetViewController.mを
コンパイルすると―

00:03:55.369 --> 00:03:59.439 align:start position:14% line:-2
PetViewController.oが
生成されます

00:04:00.240 --> 00:04:06.246 align:start position:25% line:-2
コンパイラが生成したものを
リンカーにインプットすると―

00:04:06.346 --> 00:04:08.815 align:start position:29% line:-2
実行可能ファイルや
ライブラリが生成されます

00:04:08.916 --> 00:04:11.919 align:start position:27% line:-2
そして 実行可能ファイルは
Appバンドルへ収めます

00:04:12.186 --> 00:04:15.322 align:start position:27% line:-1
パターンが見えてきましたね

00:04:15.956 --> 00:04:19.625 align:start position:34% line:-2
依存関係に従った
流れになっています

00:04:19.726 --> 00:04:22.596 align:start position:34% line:-2
これが実行順序にも
なるわけです

00:04:22.896 --> 00:04:28.435 align:start position:29% line:-2
この図を交通に見立て
コンパイルを考えてみます

00:04:28.535 --> 00:04:32.439 align:start position:34% line:-2
各コンパイル過程は
独立した道路です

00:04:32.539 --> 00:04:34.508 align:start position:34% line:-1
並列処理が可能です

00:04:35.309 --> 00:04:39.713 align:start position:29% line:-2
全インプットの終着点
リンクタスクは最後ですね

00:04:41.215 --> 00:04:46.553 align:start position:25% line:-2
依存関係を定義することで
タスクの実行順序が決まります

00:04:46.653 --> 00:04:49.022 align:start position:36% line:-1
並列化も可能です

00:04:49.122 --> 00:04:51.091 align:start position:32% line:-1
これが依存性順序です

00:04:51.625 --> 00:04:53.861 align:start position:29% line:-2
以上が
ビルドプロセスの概要です

00:04:53.961 --> 00:04:57.097 align:start position:29% line:-1
続いて詳しく見ていきます

00:04:57.364 --> 00:04:59.733 align:start position:34% line:-2
ビルドを開始したら
何が起こるか？

00:05:00.367 --> 00:05:05.105 align:start position:21% line:-2
ビルドシステムは まず
プロジェクトファイルを参照します

00:05:05.205 --> 00:05:08.909 align:start position:27% line:-2
プロジェクトに記述してある
ターゲットや依存関係―

00:05:09.009 --> 00:05:12.446 align:start position:30% line:-2
さらにビルド設定などを
解析します

00:05:12.746 --> 00:05:15.949 align:start position:34% line:-2
続いて その結果を
有向グラフにします

00:05:16.283 --> 00:05:20.754 align:start position:30% line:-2
全ファイルの依存関係を
表しています

00:05:20.854 --> 00:05:24.124 align:start position:34% line:-2
実行すべきタスクも
表示されています

00:05:26.126 --> 00:05:29.496 align:start position:34% line:-2
下層処理エンジンが
グラフを整理します

00:05:29.596 --> 00:05:34.434 align:start position:27% line:-2
タスクの実行順序は
依存関係により決定されます

00:05:34.568 --> 00:05:39.206 align:start position:32% line:-2
並列処理するタスクも
この時に判断されます

00:05:39.339 --> 00:05:41.708 align:start position:32% line:-1
そして実行に移します

00:05:42.543 --> 00:05:46.346 align:start position:20% line:-2
ところで Xcode 10の
下層処理エンジンllbuildは―

00:05:46.446 --> 00:05:48.582 align:start position:34% line:-1
オープンソースです

00:05:48.682 --> 00:05:52.686 align:start position:34% line:-2
興味があれば
実物を確認できます

00:05:52.786 --> 00:05:57.357 align:start position:34% line:-2
セッションの最後に
URLを紹介します

00:05:58.192 --> 00:06:01.328 align:start position:27% line:-2
次に依存関係の発見について
説明します

00:05:58.192 --> 00:06:01.328 align:start position:27% line:-2
次に依存関係の発見について
説明します

00:06:01.461 --> 00:06:04.398 align:start position:34% line:-2
依存関係の定義は
多い方がいいので―

00:06:04.498 --> 00:06:09.369 align:start position:30% line:-2
システムが新情報を
発見することがあります

00:06:09.636 --> 00:06:15.409 align:start position:25% line:-2
すると コンパイル時に
オブジェクトファイルと共に―

00:06:15.576 --> 00:06:17.878 align:start position:27% line:-1
別のファイルも生成されます

00:06:18.445 --> 00:06:22.549 align:start position:30% line:-2
ヘッダファイルの
リストなどが含まれます

00:06:22.649 --> 00:06:26.887 align:start position:27% line:-2
このリストは
再度ビルドする時に使います

00:06:26.987 --> 00:06:32.392 align:start position:27% line:-2
これでヘッダを変更しても
コンパイルが可能になります

00:06:32.492 --> 00:06:35.529 align:start position:20% line:-2
ご覧のとおり
PetController.hから

00:06:35.629 --> 00:06:39.099 align:start position:36% line:-2
.oファイルまで
つながっています

00:06:40.267 --> 00:06:42.936 align:start position:27% line:-1
さて 説明してきたとおり―

00:06:43.103 --> 00:06:47.374 align:start position:27% line:-2
ビルドシステムの主な役割は
タスク処理です

00:06:47.875 --> 00:06:51.778 align:start position:29% line:-2
プロジェクトが大きければ
処理も長くなります

00:06:51.879 --> 00:06:55.549 align:start position:32% line:-2
毎回 全タスクを
実行するのは大変です

00:06:56.016 --> 00:07:01.088 align:start position:29% line:-2
代わりに
サブセットだけ実行します

00:06:56.016 --> 00:07:01.088 align:start position:29% line:-2
代わりに
サブセットだけ実行します

00:07:02.656 --> 00:07:06.627 align:start position:27% line:-2
前回のビルドからの
更新部分だけ処理するのです

00:07:07.127 --> 00:07:09.763 align:start position:32% line:-1
増分ビルドといいます

00:07:09.863 --> 00:07:11.832 align:start position:29% line:-1
正常に処理するためには―

00:07:11.932 --> 00:07:16.069 align:start position:34% line:-2
依存情報の正確性が
非常に重要です

00:07:17.938 --> 00:07:22.009 align:start position:29% line:-2
更新の影響と増分ビルドの
話をしましたが―

00:07:22.142 --> 00:07:24.978 align:start position:23% line:-1
更新部分を検知する仕組みとは？

00:07:25.946 --> 00:07:28.982 align:start position:29% line:-2
各タスクには
関連する情報に基づいて―

00:07:29.082 --> 00:07:33.420 align:start position:29% line:-2
ハッシュ値のような署名が
ひも付いています

00:07:34.721 --> 00:07:37.524 align:start position:27% line:-2
インプットのstat情報が
含まれます

00:07:37.624 --> 00:07:40.394 align:start position:27% line:-2
具体的にはファイルのパスや
更新日時―

00:07:40.494 --> 00:07:43.664 align:start position:32% line:-2
コマンドラインによる
指示などです

00:07:43.764 --> 00:07:48.068 align:start position:29% line:-2
さらに コンパイラの
バージョン情報も入ります

00:07:49.436 --> 00:07:53.874 align:start position:27% line:-2
前回 ビルドした時の署名と
合わせて追跡することで―

00:07:53.974 --> 00:07:58.011 align:start position:30% line:-2
タスクの再実行が必要か
判断します

00:07:59.012 --> 00:08:03.283 align:start position:30% line:-2
現在の署名が
前回と異なる場合には―

00:07:59.012 --> 00:08:03.283 align:start position:30% line:-2
現在の署名が
前回と異なる場合には―

00:08:03.383 --> 00:08:05.719 align:start position:30% line:-1
再びタスクを実行します

00:08:05.953 --> 00:08:08.455 align:start position:38% line:-2
署名が同じなら
スキップします

00:08:08.856 --> 00:08:11.625 align:start position:27% line:-1
これが増分ビルドの基本です

00:08:12.826 --> 00:08:17.297 align:start position:30% line:-2
ビルドの流れと仕組みが
分かってきましたね

00:08:17.397 --> 00:08:19.666 align:start position:32% line:-2
次にシステムの負担を
軽減しましょう

00:08:21.101 --> 00:08:22.769 align:start position:36% line:-1
振り返ってみます

00:08:22.970 --> 00:08:27.441 align:start position:30% line:-2
ビルドとは順序に沿った
一連のタスク処理です

00:08:27.674 --> 00:08:30.944 align:start position:30% line:-2
でも 有向グラフの話を
思い出しましょう

00:08:31.812 --> 00:08:35.249 align:start position:30% line:-2
人間は順序を
考える必要はありません

00:08:35.349 --> 00:08:37.217 align:start position:29% line:-1
ビルドシステムの仕事です

00:08:37.683 --> 00:08:42.256 align:start position:27% line:-2
私たちはタスクの依存関係を
考えればいいのです

00:08:42.356 --> 00:08:46.527 align:start position:30% line:-2
システムに順序良く
正常に処理させましょう

00:08:46.827 --> 00:08:50.764 align:start position:30% line:-2
可能な場合には
並列処理もしてくれます

00:08:50.864 --> 00:08:53.800 align:start position:32% line:-2
マルチコアを
フル活用してください

00:08:54.835 --> 00:08:57.070 align:start position:30% line:-1
依存関係の出どころは？

00:08:57.237 --> 00:09:01.675 align:start position:34% line:-2
ビルドシステムが
作る場合もあります

00:08:57.237 --> 00:09:01.675 align:start position:34% line:-2
ビルドシステムが
作る場合もあります

00:09:01.775 --> 00:09:05.078 align:start position:29% line:-2
コンパイラやリンカー用の
ルールが―

00:09:05.179 --> 00:09:08.382 align:start position:34% line:-2
あらかじめ
備わっているのです

00:09:08.482 --> 00:09:13.854 align:start position:27% line:-2
ルールに従ってインプットや
アウトプットが決定されます

00:09:15.389 --> 00:09:19.826 align:start position:25% line:-2
ターゲットの生成順序を決める
依存関係もあります

00:09:20.160 --> 00:09:24.631 align:start position:29% line:-2
別ターゲットのソースの
並列コンパイルも可能です

00:09:24.731 --> 00:09:26.934 align:start position:30% line:-2
Xcode 9での
ターゲットのビルドは―

00:09:27.034 --> 00:09:31.705 align:start position:29% line:-2
依存する別ターゲットの
処理完了後のみ可能でした

00:09:32.039 --> 00:09:35.642 align:start position:27% line:-2
Xcode 10では
ビルド開始が早くなりました

00:09:35.742 --> 00:09:40.881 align:start position:29% line:-2
コンパイル開始も早くなり
並列処理も可能です

00:09:41.081 --> 00:09:43.984 align:start position:30% line:-2
ただし
並列処理させたい場合―

00:09:44.084 --> 00:09:48.255 align:start position:20% line:-2
Run Script Phaseは
先に終了してください

00:09:49.289 --> 00:09:52.993 align:start position:30% line:-2
ターゲット関連の依存は
暗黙の依存関係です

00:09:53.193 --> 00:09:56.864 align:start position:0% line:-2
例えばLink Binary With Libraryに
ターゲットを入れた時です

00:09:57.231 --> 00:10:01.468 align:start position:2% line:-2
Find Implicit Dependenciesを
有効にしておけば―

00:09:57.231 --> 00:10:01.468 align:start position:2% line:-2
Find Implicit Dependenciesを
有効にしておけば―

00:10:01.568 --> 00:10:06.940 align:start position:11% line:-2
Target Dependenciesにない
依存関係が発見できます

00:10:08.475 --> 00:10:10.744 align:start position:25% line:-2
続いて ビルドフェーズによる
依存関係です

00:10:10.844 --> 00:10:13.814 align:start position:29% line:-2
エディタ内には
多数のフェーズがあります

00:10:13.914 --> 00:10:18.752 align:start position:27% line:-2
内容はヘッダのコピーや
ソースのコンパイルなどです

00:10:19.086 --> 00:10:24.858 align:start position:29% line:-2
タスクは基本的には
リストの順に実行されます

00:10:24.958 --> 00:10:29.029 align:start position:5% line:-2
Link Binary With Libraryが
コンパイルソースの前にあるなど

00:10:29.129 --> 00:10:32.799 align:start position:32% line:-2
場合によっては
順序は入れ替わります

00:10:32.966 --> 00:10:37.004 align:start position:29% line:-2
この順序が不正な場合
ビルドの失敗もあり得ます

00:10:37.104 --> 00:10:41.675 align:start position:27% line:-2
依存関係を理解し
正しい順序で組んでください

00:10:42.876 --> 00:10:45.179 align:start position:32% line:-2
スキームの順序による
依存関係もあります

00:10:45.279 --> 00:10:48.482 align:start position:18% line:-2
Parallelize Buildを
スキーム設定で有効にすると―

00:10:48.582 --> 00:10:52.853 align:start position:30% line:-2
並列処理できるので
順序は関係なくなります

00:10:52.953 --> 00:10:57.724 align:start position:12% line:-2
しかし Prallelize Buildを
無効にすると―

00:10:57.825 --> 00:11:01.461 align:start position:32% line:-2
リスト順に
１つずつ処理されます

00:10:57.825 --> 00:11:01.461 align:start position:32% line:-2
リスト順に
１つずつ処理されます

00:11:01.929 --> 00:11:05.732 align:start position:30% line:-2
ターゲットの依存関係は
優先度が高いですが―

00:11:05.833 --> 00:11:08.268 align:start position:30% line:-2
それ以外は
リスト順が優先されます

00:11:08.535 --> 00:11:12.139 align:start position:32% line:-2
それなら人間が
依存関係を定義せず―

00:11:12.239 --> 00:11:14.575 align:start position:29% line:-1
任せてしまえばいいのか？

00:11:14.675 --> 00:11:18.912 align:start position:32% line:-2
１つずつの処理では
時間が掛かりすぎます

00:11:19.012 --> 00:11:22.015 align:start position:11% line:-2
よって Parallelize Buildは
有効にしつつ―

00:11:22.115 --> 00:11:25.252 align:start position:32% line:-2
自分でも依存関係を
正確に定義しましょう

00:11:27.454 --> 00:11:31.325 align:start position:29% line:-2
依存関係を生み出す
最後の要素は あなたです

00:11:32.693 --> 00:11:35.762 align:start position:25% line:-2
シェルスクリプトのビルドや
ビルドルールを作成する場合―

00:11:35.863 --> 00:11:38.866 align:start position:27% line:-2
インプットとアウトプットを
明確に定義しましょう

00:11:38.966 --> 00:11:42.402 align:start position:30% line:-2
タスクの不要な再実行を
予防でき―

00:11:42.503 --> 00:11:45.539 align:start position:32% line:-2
正しい順序での実行に
役立ちます

00:11:45.706 --> 00:11:48.842 align:start position:14% line:-2
定義はRun Script Phaseの
エディタで行います

00:11:48.942 --> 00:11:53.146 align:start position:27% line:-2
パスを作れば 環境変化にも
対応しやすくなります

00:11:54.681 --> 00:11:58.352 align:start position:30% line:-2
依存関係を自動リンクに
頼ってはいけません

00:11:58.652 --> 00:12:00.587 align:start position:34% line:-1
自動リンク機能は―

00:11:58.652 --> 00:12:00.587 align:start position:34% line:-1
自動リンク機能は―

00:12:00.687 --> 00:12:04.191 align:start position:0% line:-2
Link Frameworks Automaticallyの
設定で有効にできます

00:12:04.491 --> 00:12:09.263 align:start position:5% line:-2
Link Binary With Libraryで
リンクしていなくても―

00:12:09.363 --> 00:12:13.167 align:start position:25% line:-2
モジュールに対応し
フレームワークにリンクします

00:12:13.267 --> 00:12:18.739 align:start position:25% line:-2
ただ ビルドシステムのように
依存関係は定義されず―

00:12:18.839 --> 00:12:24.111 align:start position:21% line:-2
依存するターゲットがリンク前に
ビルドされていない場合があります

00:12:25.212 --> 00:12:29.216 align:start position:20% line:-2
自動リンクに頼っていいのは
SDKフレームワーク使用時だけです

00:12:29.316 --> 00:12:34.555 align:start position:25% line:-2
UIKitなどが 依存関係を
付加してくれるからです

00:12:34.688 --> 00:12:38.759 align:start position:27% line:-2
Xcodeプロジェクトには
依存関係を明示してください

00:12:40.394 --> 00:12:44.298 align:start position:29% line:-2
依存関係を明示したい
別プロジェクトがあれば―

00:12:44.398 --> 00:12:46.333 align:start position:32% line:-2
ファイルナビゲータに
ドロップしてください

00:12:46.633 --> 00:12:49.736 align:start position:27% line:-1
リファレンスを作成できます

00:12:51.738 --> 00:12:56.944 align:start position:27% line:-2
繰り返しますが 重要なのは
正確な依存関係です

00:12:57.044 --> 00:12:59.780 align:start position:29% line:-2
並列処理と安定した結果に
つながります

00:12:59.880 --> 00:13:03.450 align:start position:29% line:-2
ビルドを短縮し
開発に時間を割きましょう

00:12:59.880 --> 00:13:03.450 align:start position:29% line:-2
ビルドを短縮し
開発に時間を割きましょう

00:13:04.184 --> 00:13:08.856 align:start position:18% line:-2
ビルドをより高速化し
iMac Proの性能を生かすには―

00:13:08.956 --> 00:13:12.259 align:start position:5% line:-2
Building Faster in Xcodeを
ご覧ください

00:13:12.492 --> 00:13:17.097 align:start position:30% line:-2
次はユルゲンが
コンパイラを解説します

00:13:17.965 --> 00:13:23.170 align:start position:43% line:-1
(拍手)

00:13:23.270 --> 00:13:24.138 align:start position:41% line:-1
ありがとう

00:13:26.240 --> 00:13:29.576 align:start position:27% line:-1
これから お話しするのは―

00:13:29.676 --> 00:13:32.779 align:start position:29% line:-2
XcodeがClangを
呼び出す時の挙動です

00:13:34.181 --> 00:13:35.148 align:start position:41% line:-1
こんにちは

00:13:35.282 --> 00:13:39.286 align:start position:27% line:-2
私はユルゲン
Clangのエンジニアです

00:13:39.987 --> 00:13:43.924 align:start position:36% line:-2
主に２つの内容を
お話しします

00:13:44.224 --> 00:13:47.127 align:start position:29% line:-1
１つ目はヘッダマップです

00:13:47.394 --> 00:13:53.100 align:start position:25% line:-2
XcodeからClangへの
情報の伝達方法を説明します

00:13:54.034 --> 00:13:57.004 align:start position:16% line:-1
２つ目はClang Modulesです

00:13:57.104 --> 00:13:59.873 align:start position:27% line:-1
ビルドの高速化に関わります

00:14:00.974 --> 00:14:04.244 align:start position:27% line:-2
Swiftしか触らない人も
いるでしょう

00:14:04.645 --> 00:14:08.682 align:start position:25% line:-2
でも実際には
Clangも関わりがあります

00:14:08.815 --> 00:14:11.084 align:start position:32% line:-1
ぜひ お聞きください

00:14:14.521 --> 00:14:15.823 align:start position:36% line:-1
Clangとは？

00:14:16.990 --> 00:14:19.693 align:start position:21% line:-1
AppleのC言語コンパイラです

00:14:19.927 --> 00:14:23.931 align:start position:25% line:-2
Cだけでなく
すべてのC言語ファミリーです

00:14:24.097 --> 00:14:25.799 align:start position:41% line:-1
C++や―

00:14:25.899 --> 00:14:30.871 align:start position:21% line:-2
よく使用される
Objective-Cも含みます

00:14:32.439 --> 00:14:34.174 align:start position:30% line:-1
ジェイクの話の確認です

00:14:35.342 --> 00:14:40.447 align:start position:23% line:-2
１つのインプットファイルごとに
コンパイラが呼び出され―

00:14:40.547 --> 00:14:42.449 align:start position:34% line:-2
アウトプットを
リンカーに渡します

00:14:43.383 --> 00:14:47.654 align:start position:27% line:-2
例えば
OSからAPIへアクセス―

00:14:47.855 --> 00:14:53.293 align:start position:27% line:-2
または自分のコードの実装に
アクセスするとします

00:14:53.393 --> 00:14:56.330 align:start position:25% line:-2
すると通常 ヘッダファイルも
インクルードされます

00:14:57.531 --> 00:14:59.967 align:start position:27% line:-1
ヘッダファイルとは約束です

00:15:00.400 --> 00:15:04.671 align:start position:30% line:-2
つまり 実装ファイルが
存在するとの約束です

00:15:04.771 --> 00:15:06.273 align:start position:32% line:-1
普通は約束どおりです

00:15:07.174 --> 00:15:10.744 align:start position:30% line:-2
実装ファイルだけ更新し
ヘッダを忘れると―

00:15:10.944 --> 00:15:13.647 align:start position:29% line:-1
約束を破ることになります

00:15:14.348 --> 00:15:20.154 align:start position:30% line:-2
コンパイラは約束を信じ
処理を完了しますが―

00:15:20.354 --> 00:15:23.323 align:start position:29% line:-1
リンク時に問題が起きます

00:15:24.758 --> 00:15:29.897 align:start position:21% line:-2
コンパイラは大抵
複数のヘッダをインクルードします

00:15:29.997 --> 00:15:31.865 align:start position:27% line:-1
これを いくつも処理します

00:15:32.232 --> 00:15:36.637 align:start position:34% line:-2
アプリケーションの
サンプルを使って―

00:15:36.737 --> 00:15:38.605 align:start position:29% line:-1
ヘッダの扱いを確認します

00:15:40.507 --> 00:15:44.344 align:start position:25% line:-2
PetWallは複数の言語で
記述されています

00:15:44.878 --> 00:15:47.915 align:start position:27% line:-2
アプリケーション自体は
Swiftで書かれています

00:15:48.549 --> 00:15:52.719 align:start position:27% line:-2
フレームワークの言語は
Objective-Cです

00:15:52.853 --> 00:15:58.458 align:start position:32% line:-2
サポートライブラリは
C++での記述です

00:16:00.127 --> 00:16:03.864 align:start position:32% line:-2
近頃 ファイルが
多くなってきたので―

00:16:03.964 --> 00:16:07.968 align:start position:32% line:-2
探し物を楽にするため
整理してみます

00:16:08.068 --> 00:16:12.906 align:start position:30% line:-2
Catの関連ファイルを
サブフォルダに移します

00:16:16.210 --> 00:16:20.280 align:start position:32% line:-2
実装ファイルを
更新していないのに―

00:16:20.581 --> 00:16:22.583 align:start position:38% line:-1
動作は正常です

00:16:22.950 --> 00:16:25.252 align:start position:32% line:-1
ここで疑問が生じます

00:16:26.253 --> 00:16:29.623 align:start position:30% line:-2
Clangはどうやって
ヘッダを見つけるのか？

00:16:32.492 --> 00:16:34.161 align:start position:38% line:-1
例で確認します

00:16:34.595 --> 00:16:36.830 align:start position:27% line:-1
これが私たちが使っている―

00:16:37.531 --> 00:16:38.899 align:start position:36% line:-1
実装ファイルです

00:16:38.999 --> 00:16:42.002 align:start position:27% line:-2
ヘッダファイルCat.hを
インクルードしています

00:16:43.003 --> 00:16:46.473 align:start position:34% line:-2
Clangの動きを
知る方法とは？

00:16:46.840 --> 00:16:49.710 align:start position:36% line:-2
ビルドログからも
確認できます

00:16:50.677 --> 00:16:56.116 align:start position:27% line:-2
ビルドシステムの
コンパイル時の動作ログです

00:16:56.216 --> 00:16:58.252 align:start position:36% line:-2
呼び出しのログを
コピーします

00:16:59.052 --> 00:17:03.090 align:start position:30% line:-2
ターミナルに貼り付けて
-vを付けます

00:16:59.052 --> 00:17:03.090 align:start position:30% line:-2
ターミナルに貼り付けて
-vを付けます

00:17:03.757 --> 00:17:05.692 align:start position:27% line:-1
詳細を表示するコマンドです

00:17:05.858 --> 00:17:08.896 align:start position:27% line:-1
多くの情報を教えてくれます

00:17:09.363 --> 00:17:13.767 align:start position:32% line:-2
今はパスの検索だけに
しておきましょう

00:17:15.234 --> 00:17:19.873 align:start position:32% line:-2
パスの検索と聞くと
ソースまでのパスが―

00:17:19.973 --> 00:17:23.710 align:start position:29% line:-1
表示されると思うでしょう

00:17:24.877 --> 00:17:26.980 align:start position:29% line:-1
でも そうではありません

00:17:27.314 --> 00:17:30.951 align:start position:32% line:-2
これで表示されるのは
ヘッダマップです

00:17:32.319 --> 00:17:36.557 align:start position:25% line:-2
Xcodeのビルドシステムは
ヘッダマップによって―

00:17:36.657 --> 00:17:39.593 align:start position:27% line:-1
ヘッダファイルを見つけます

00:17:40.360 --> 00:17:41.595 align:start position:39% line:-1
では続きです

00:17:41.728 --> 00:17:45.699 align:start position:23% line:-2
確認するのは
２つのヘッダマップファイルです

00:17:47.834 --> 00:17:50.871 align:start position:32% line:-1
上の２つのヘッダは―

00:17:51.572 --> 00:17:55.909 align:start position:34% line:-2
フレームワーク名と
ヘッダ名だけですね

00:17:56.176 --> 00:17:59.346 align:start position:27% line:-2
これでパブリックヘッダだと
分かります

00:18:02.316 --> 00:18:06.453 align:start position:34% line:-2
ただ この機能に
頼ってはいけません

00:18:07.421 --> 00:18:11.058 align:start position:32% line:-2
動作させ続けるために
必要な機能ですが―

00:18:11.625 --> 00:18:15.329 align:start position:11% line:-2
これに頼るとClangModules使用時に
問題が起こる場合があります

00:18:15.429 --> 00:18:20.834 align:start position:27% line:-2
このようなヘッダファイルを
インクルードする場合は―

00:18:20.934 --> 00:18:25.739 align:start position:32% line:-2
フレームワーク名を
記述しておきましょう

00:18:27.374 --> 00:18:29.943 align:start position:29% line:-2
３つ目は
プロジェクトのヘッダです

00:18:30.110 --> 00:18:32.379 align:start position:36% line:-1
今回は触れません

00:18:32.713 --> 00:18:38.685 align:start position:29% line:-2
ヘッダマップの役割とは
ソースコードへの案内です

00:18:39.853 --> 00:18:43.690 align:start position:29% line:-2
パブリックだけでなく
プライベートヘッダでも―

00:18:44.157 --> 00:18:46.693 align:start position:34% line:-2
必ずソースコードが
見つかります

00:18:46.827 --> 00:18:50.664 align:start position:21% line:-2
Clangはソースディレクトリの
ファイルに関して―

00:18:50.764 --> 00:18:55.802 align:start position:32% line:-2
役立つエラーや警告を
出してくれます

00:18:55.903 --> 00:19:00.240 align:start position:27% line:-2
一方 ビルドディレクトリの
ファイルは対象外です

00:18:55.903 --> 00:19:00.240 align:start position:27% line:-2
一方 ビルドディレクトリの
ファイルは対象外です

00:19:03.143 --> 00:19:06.613 align:start position:32% line:-2
ヘッダマップの存在を
意識しておかないと―

00:19:06.747 --> 00:19:08.182 align:start position:38% line:-1
問題が起きます

00:19:08.282 --> 00:19:14.221 align:start position:27% line:-2
よくあるのがプロジェクトに
ヘッダを付け忘れることです

00:19:15.055 --> 00:19:19.193 align:start position:30% line:-2
ソースディレクトリには
存在するのにです

00:19:19.293 --> 00:19:22.329 align:start position:29% line:-2
プロジェクトには
必ずヘッダを付けましょう

00:19:22.963 --> 00:19:25.099 align:start position:32% line:-1
こんな問題もあります

00:19:26.366 --> 00:19:30.204 align:start position:30% line:-2
同名のヘッダが
影響し合うトラブルです

00:19:31.104 --> 00:19:34.308 align:start position:32% line:-2
必ずユニークな名前を
付けましょう

00:19:34.708 --> 00:19:37.644 align:start position:32% line:-2
システムのヘッダにも
言えることです

00:19:37.744 --> 00:19:42.049 align:start position:29% line:-2
ローカルヘッダと
同じ名前になっていると―

00:19:42.149 --> 00:19:46.320 align:start position:32% line:-2
やはり影響が出るので
避けてください

00:19:46.987 --> 00:19:50.057 align:start position:29% line:-2
ところでシステムヘッダを
見つけるには？

00:19:52.993 --> 00:19:55.162 align:start position:27% line:-1
PetWallで確認します

00:19:55.963 --> 00:20:00.801 align:start position:12% line:-2
SDKのヘッダ Foundation.hを
インクルードしています

00:19:55.963 --> 00:20:00.801 align:start position:12% line:-2
SDKのヘッダ Foundation.hを
インクルードしています

00:20:01.835 --> 00:20:03.904 align:start position:34% line:-1
先ほどの手順では―

00:20:04.338 --> 00:20:08.075 align:start position:36% line:-2
システムヘッダは
見つけられません

00:20:08.776 --> 00:20:13.747 align:start position:30% line:-2
ヘッダマップは
自分のヘッダ用なので―

00:20:13.847 --> 00:20:15.382 align:start position:34% line:-1
今は必要ありません

00:20:16.016 --> 00:20:19.419 align:start position:32% line:-2
インクルードのパスを
見ていきます

00:20:19.853 --> 00:20:23.791 align:start position:30% line:-2
デフォルト状態なら
ディレクトリは２つです

00:20:23.891 --> 00:20:26.260 align:start position:18% line:-1
１つ目は/usr/includeです

00:20:26.427 --> 00:20:29.496 align:start position:0% line:-2
２つ目は
/System/Library/Frameworksです

00:20:30.230 --> 00:20:31.798 align:start position:34% line:-1
１つ目を確認します

00:20:33.400 --> 00:20:35.102 align:start position:32% line:-2
普通のインクルード
ディレクトリなので―

00:20:35.202 --> 00:20:38.605 align:start position:36% line:-2
検索したい対象を
付けるだけです

00:20:38.705 --> 00:20:41.642 align:start position:5% line:-2
この場合は
Foundation/Faoudation.hです

00:20:42.209 --> 00:20:44.845 align:start position:30% line:-1
ヘッダはないようですね

00:20:45.479 --> 00:20:47.714 align:start position:30% line:-1
では２つ目を確認します

00:20:48.515 --> 00:20:51.018 align:start position:0% line:-1
/System/Library/Frameworksです

00:20:52.085 --> 00:20:54.688 align:start position:30% line:-2
こちらはフレームワーク
ディレクトリですから―

00:20:54.788 --> 00:20:57.257 align:start position:25% line:-1
Clangの挙動が異なります

00:20:57.357 --> 00:21:01.762 align:start position:30% line:-2
まずフレームワーク名を
特定し―

00:20:57.357 --> 00:21:01.762 align:start position:30% line:-2
まずフレームワーク名を
特定し―

00:21:01.962 --> 00:21:03.964 align:start position:30% line:-1
存在の有無を確認します

00:21:05.432 --> 00:21:10.170 align:start position:25% line:-2
その後 ヘッダディレクトリを
調べに行きます

00:21:10.537 --> 00:21:12.940 align:start position:25% line:-1
無事にヘッダが見つかりました

00:21:13.607 --> 00:21:16.844 align:start position:27% line:-1
もしもヘッダがない場合は？

00:21:16.944 --> 00:21:20.581 align:start position:32% line:-2
存在しないヘッダ名で
探させてみます

00:21:21.648 --> 00:21:24.551 align:start position:34% line:-2
ディレクトリ内では
見つかりません

00:21:25.786 --> 00:21:29.122 align:start position:27% line:-2
次はプライベートヘッダの
ディレクトリを探しています

00:21:30.490 --> 00:21:34.528 align:start position:29% line:-2
プライベートヘッダは
SDKにはありませんが―

00:21:34.928 --> 00:21:39.600 align:start position:27% line:-2
他のフレームワークには
含まれる場合があるからです

00:21:39.700 --> 00:21:41.702 align:start position:34% line:-1
必ず探しに行きます

00:21:42.369 --> 00:21:45.072 align:start position:38% line:-2
でも やっぱり
見つかりません

00:21:46.673 --> 00:21:50.144 align:start position:27% line:-1
すると検索が中断されました

00:21:50.344 --> 00:21:53.280 align:start position:27% line:-2
延々と
検索するわけではないのです

00:21:53.380 --> 00:21:58.585 align:start position:30% line:-2
すでにフレームワークが
見つかっているからです

00:21:58.952 --> 00:22:03.156 align:start position:29% line:-2
次はフレームワークの
ディレクトリで検索します

00:21:58.952 --> 00:22:03.156 align:start position:29% line:-2
次はフレームワークの
ディレクトリで検索します

00:22:03.423 --> 00:22:05.792 align:start position:29% line:-2
それでも見つからなければ
検索終了です

00:22:07.928 --> 00:22:11.331 align:start position:25% line:-2
ヘッダのインポートと
プリプロセスが終わってから―

00:22:11.632 --> 00:22:14.935 align:start position:29% line:-2
実装ファイルを見る方法を
紹介します

00:22:15.135 --> 00:22:17.070 align:start position:30% line:-1
Xcodeで確認します

00:22:17.204 --> 00:22:22.443 align:start position:25% line:-2
プリプロセス済みの
実装ファイルを出力しましょう

00:22:24.878 --> 00:22:27.347 align:start position:30% line:-1
たくさん表示されました

00:22:28.549 --> 00:22:30.851 align:start position:30% line:-1
どのくらい あるのか？

00:22:32.819 --> 00:22:35.055 align:start position:34% line:-1
分かりやすい例です

00:22:35.889 --> 00:22:38.425 align:start position:25% line:-1
Foundation.hは―

00:22:38.759 --> 00:22:42.396 align:start position:34% line:-2
このシステムの
基本的なヘッダです

00:22:42.629 --> 00:22:45.732 align:start position:30% line:-2
そのため
直接あるいは間接的に―

00:22:45.833 --> 00:22:49.169 align:start position:27% line:-2
他のヘッダに
インポートされやすいのです

00:22:49.436 --> 00:22:54.675 align:start position:27% line:-2
コンパイラの呼び出しごとに
かなりの確率で参照されます

00:22:55.709 --> 00:22:57.177 align:start position:32% line:-1
すると どうなるか？

00:22:57.778 --> 00:23:02.149 align:start position:21% line:-2
一度のインクルードで
約800個ものヘッダファイルを―

00:22:57.778 --> 00:23:02.149 align:start position:21% line:-2
一度のインクルードで
約800個ものヘッダファイルを―

00:23:02.249 --> 00:23:04.451 align:start position:30% line:-1
処理することになります

00:23:05.485 --> 00:23:11.024 align:start position:23% line:-2
実に９MB以上のソースコードを
解析し検証するのです

00:23:11.758 --> 00:23:15.229 align:start position:32% line:-2
コンパイラを
呼び出すたびにですよ

00:23:15.462 --> 00:23:18.298 align:start position:30% line:-1
あまりに冗長な処理です

00:23:18.966 --> 00:23:19.933 align:start position:45% line:-1
では―

00:23:20.868 --> 00:23:21.835 align:start position:41% line:-1
改善策は？

00:23:23.937 --> 00:23:27.908 align:start position:27% line:-2
プリコンパイル済みヘッダも
１つの手です

00:23:28.075 --> 00:23:30.110 align:start position:34% line:-1
改善できるでしょう

00:23:30.510 --> 00:23:31.845 align:start position:36% line:-1
もっといいのは―

00:23:32.079 --> 00:23:35.249 align:start position:23% line:-2
数年前に導入した
Clang Modulesです

00:23:36.250 --> 00:23:38.786 align:start position:30% line:-2
これを使うと
フレームワークごとに―

00:23:39.019 --> 00:23:42.222 align:start position:25% line:-1
１度しかヘッダを参照しません

00:23:42.322 --> 00:23:47.728 align:start position:29% line:-2
ディスク上にキャッシュし
再利用するからです

00:23:48.262 --> 00:23:51.165 align:start position:29% line:-1
ビルド時間が短縮できます

00:23:53.801 --> 00:23:55.202 align:start position:32% line:-1
これを実現するため―

00:23:55.335 --> 00:23:58.238 align:start position:32% line:-2
いくつか必要な要素を
開発しました

00:23:59.339 --> 00:24:02.943 align:start position:30% line:-2
中でも重要なのが
コンテキストフリーです

00:23:59.339 --> 00:24:02.943 align:start position:30% line:-2
中でも重要なのが
コンテキストフリーです

00:24:03.477 --> 00:24:05.145 align:start position:36% line:-1
詳しく説明します

00:24:06.914 --> 00:24:09.049 align:start position:30% line:-1
これはコードの一部です

00:24:09.149 --> 00:24:13.086 align:start position:21% line:-2
どちらもPetKitモジュールを
インポートします

00:24:13.887 --> 00:24:18.258 align:start position:30% line:-2
しかし その前の
マクロ定義が異なります

00:24:19.660 --> 00:24:22.830 align:start position:34% line:-2
従来のやり方で
インポートすると―

00:24:22.930 --> 00:24:25.099 align:start position:32% line:-2
このまま
インクルードされます

00:24:25.265 --> 00:24:30.337 align:start position:27% line:-2
プリプロセッサは定義どおり
ヘッダを処理します

00:24:31.171 --> 00:24:35.642 align:start position:30% line:-2
そのため ヘッダごとに
モジュールが生成され―

00:24:35.742 --> 00:24:37.277 align:start position:36% line:-1
再利用できません

00:24:37.611 --> 00:24:38.445 align:start position:43% line:-1
つまり―

00:24:38.979 --> 00:24:41.648 align:start position:32% line:-2
使い回すには
別の方法が必要でした

00:24:41.782 --> 00:24:46.987 align:start position:32% line:-2
どの実装ファイルにも
再利用できるように―

00:24:47.120 --> 00:24:51.925 align:start position:27% line:-2
コンテキストに関する情報を
無視させるのです

00:24:54.027 --> 00:24:55.629 align:start position:29% line:-1
他にも 必要だったのが―

00:24:56.597 --> 00:24:58.665 align:start position:27% line:-1
モジュールの自己完結力です

00:24:58.899 --> 00:25:03.270 align:start position:30% line:-2
モジュールに依存関係を
記述させるのです

00:24:58.899 --> 00:25:03.270 align:start position:30% line:-2
モジュールに依存関係を
記述させるのです

00:25:04.104 --> 00:25:06.673 align:start position:34% line:-1
便利な機能ですよね

00:25:06.840 --> 00:25:10.110 align:start position:29% line:-2
一度 モジュールを
インポートしてしまえば―

00:25:10.477 --> 00:25:15.983 align:start position:27% line:-2
ヘッダの追加を
意識する必要がなくなります

00:25:19.152 --> 00:25:24.792 align:start position:23% line:-2
モジュールが必要か
どうやって判断するのでしょう？

00:25:25.959 --> 00:25:29.630 align:start position:29% line:-2
サンプルで確認します
NSString.hです

00:25:30.497 --> 00:25:34.735 align:start position:23% line:-2
Clangはフレームワーク内で
このヘッダを探します

00:25:37.037 --> 00:25:38.539 align:start position:36% line:-1
先ほどと同じです

00:25:38.639 --> 00:25:41.408 align:start position:12% line:-2
Foundation.frameworkの
ディレクトリへ

00:25:42.042 --> 00:25:44.278 align:start position:25% line:-1
ここでClangが探すのは―

00:25:44.411 --> 00:25:47.047 align:start position:29% line:-2
モジュールディレクトリの
モジュールマップです

00:25:47.147 --> 00:25:49.149 align:start position:30% line:-2
ひも付き先が
ヘッダディレクトリです

00:25:49.550 --> 00:25:50.284 align:start position:41% line:-1
ありました

00:25:51.485 --> 00:25:53.253 align:start position:30% line:-1
モジュールマップとは？

00:25:53.353 --> 00:25:57.591 align:start position:23% line:-2
一連のヘッダファイルが
モジュールに変換される過程を―

00:25:57.691 --> 00:25:59.860 align:start position:34% line:-1
記述したマップです

00:26:00.894 --> 00:26:02.196 align:start position:39% line:-1
ご覧ください

00:26:03.764 --> 00:26:05.999 align:start position:27% line:-1
モジュールマップは簡単です

00:26:06.099 --> 00:26:09.369 align:start position:23% line:-2
Foundationのマップは
これで全部です

00:26:10.370 --> 00:26:14.241 align:start position:29% line:-2
まずは モジュール名の
Foundationです

00:26:14.875 --> 00:26:19.913 align:start position:30% line:-2
その下に モジュールの
ヘッダ名があります

00:26:20.614 --> 00:26:25.319 align:start position:25% line:-2
これは いつも必ず
Foundation.hです

00:26:25.719 --> 00:26:27.387 align:start position:36% line:-1
特別なヘッダです

00:26:27.488 --> 00:26:31.859 align:start position:21% line:-2
これは
umbrellaヘッダといいます

00:26:32.392 --> 00:26:37.030 align:start position:25% line:-2
Clangは
このヘッダファイルを参照し―

00:26:37.130 --> 00:26:41.101 align:start position:14% line:-1
NSString.hがあるかを確認します

00:26:42.236 --> 00:26:43.971 align:start position:39% line:-1
ありましたね

00:26:44.338 --> 00:26:50.177 align:start position:14% line:-2
NSString.hは
Foundationモジュールの一部です

00:26:50.577 --> 00:26:52.780 align:start position:25% line:-1
Clangは このヘッダを―

00:26:52.880 --> 00:26:55.949 align:start position:29% line:-2
言語からモジュール形式に
変換します

00:26:56.250 --> 00:26:59.353 align:start position:21% line:-2
Foundationモジュールの
ビルドが必要ですね

00:27:01.021 --> 00:27:03.290 align:start position:21% line:-2
Foundationモジュールの
ビルド方法は？

00:27:03.924 --> 00:27:07.661 align:start position:32% line:-2
Clangは まず
別の領域を作成します

00:27:08.495 --> 00:27:13.100 align:start position:21% line:-2
Foundationモジュールの
全ヘッダを収める場所です

00:27:15.135 --> 00:27:18.939 align:start position:25% line:-2
最初のコンパイルで残っている
コンテキストを―

00:27:19.072 --> 00:27:21.375 align:start position:29% line:-1
変更する必要はありません

00:27:21.508 --> 00:27:23.143 align:start position:25% line:-1
コンテキストフリーですからね

00:27:24.011 --> 00:27:28.248 align:start position:21% line:-2
変更するのは Clangに渡した
コマンドライン引数です

00:27:28.348 --> 00:27:29.783 align:start position:29% line:-1
Clangが持っています

00:27:32.119 --> 00:27:34.388 align:start position:21% line:-2
Foundationモジュールを
ビルドしました

00:27:35.422 --> 00:27:39.026 align:start position:30% line:-2
しかし
このフレームワークは―

00:27:39.293 --> 00:27:41.862 align:start position:32% line:-2
別のフレームワークを
インクルードします

00:27:41.962 --> 00:27:45.132 align:start position:29% line:-2
そのモジュールも
ビルドする必要があります

00:27:46.633 --> 00:27:51.672 align:start position:27% line:-2
さらなるインクルードに備え
これを繰り返していきます

00:27:52.239 --> 00:27:54.608 align:start position:27% line:-1
これにはメリットがあります

00:27:55.142 --> 00:27:57.478 align:start position:34% line:-2
同様のインポートが
ある場合に―

00:27:57.578 --> 00:28:00.581 align:start position:34% line:-1
再利用できますよね

00:27:57.578 --> 00:28:00.581 align:start position:34% line:-1
再利用できますよね

00:28:02.783 --> 00:28:07.187 align:start position:27% line:-2
モジュールキャッシュとして
ディスク上に格納されます

00:28:09.323 --> 00:28:10.490 align:start position:34% line:-1
先に言ったとおり―

00:28:11.391 --> 00:28:15.295 align:start position:25% line:-2
コマンドライン引数が
Clangに渡されたままです

00:28:15.696 --> 00:28:16.830 align:start position:38% line:-1
このままでは―

00:28:17.364 --> 00:28:22.236 align:start position:29% line:-2
モジュールの中身にも
引数が影響してしまいます

00:28:22.703 --> 00:28:26.473 align:start position:30% line:-2
そのため 引数は
ハッシュ化しておきます

00:28:26.573 --> 00:28:30.644 align:start position:27% line:-2
また 作成したモジュールは
ハッシュ値と一致する―

00:28:30.744 --> 00:28:33.013 align:start position:29% line:-1
ディレクトリに格納します

00:28:34.481 --> 00:28:37.284 align:start position:34% line:-2
異なる制限の
ファイルのために―

00:28:37.417 --> 00:28:39.019 align:start position:34% line:-1
引数を変更したら？

00:28:39.119 --> 00:28:41.922 align:start position:21% line:-1
ここではENABLE CATです

00:28:42.823 --> 00:28:44.358 align:start position:30% line:-1
ハッシュ値が変わります

00:28:44.458 --> 00:28:48.862 align:start position:27% line:-2
新たなハッシュ値と一致する
ディレクトリに―

00:28:48.962 --> 00:28:52.466 align:start position:27% line:-2
全インプットを
再ビルドする必要があります

00:28:53.267 --> 00:28:57.504 align:start position:29% line:-2
モジュールのキャッシュを
最大限活用したいなら―

00:28:57.604 --> 00:29:02.409 align:start position:29% line:-2
引数の変更は できるだけ
避けた方がいいですね

00:28:57.604 --> 00:29:02.409 align:start position:29% line:-2
引数の変更は できるだけ
避けた方がいいですね

00:29:05.112 --> 00:29:09.783 align:start position:29% line:-2
システムフレームワークの
モジュールの話でしたが―

00:29:10.317 --> 00:29:14.988 align:start position:30% line:-2
自分のフレームワークで
同じことをするには？

00:29:16.924 --> 00:29:21.361 align:start position:34% line:-2
サンプルのCatで
確認しましょう

00:29:23.363 --> 00:29:25.632 align:start position:29% line:-1
再びヘッダマップを使い―

00:29:25.966 --> 00:29:30.204 align:start position:32% line:-2
ソースディレクトリへ
行きます

00:29:31.805 --> 00:29:34.608 align:start position:30% line:-1
ここで問題が発覚します

00:29:35.409 --> 00:29:37.277 align:start position:29% line:-2
モジュールディレクトリが
ありません

00:29:38.111 --> 00:29:40.247 align:start position:23% line:-1
フレームワークらしくないですね

00:29:41.215 --> 00:29:45.018 align:start position:30% line:-2
Clangも
対処に困ってしまいます

00:29:45.419 --> 00:29:48.789 align:start position:27% line:-1
解決手段をご紹介しましょう

00:29:49.289 --> 00:29:52.025 align:start position:29% line:-2
Clangの
仮想ファイルシステムです

00:29:52.526 --> 00:29:56.196 align:start position:32% line:-2
仮想フレームワークを
作成するものです

00:29:56.797 --> 00:29:59.533 align:start position:30% line:-2
Clangは ここで
モジュールを作成します

00:29:59.867 --> 00:30:00.534 align:start position:43% line:-1
ただし―

00:29:59.867 --> 00:30:00.534 align:start position:43% line:-1
ただし―

00:30:00.901 --> 00:30:04.972 align:start position:25% line:-2
対象は自分のディレクトリ内の
ファイルだけです

00:30:05.239 --> 00:30:10.377 align:start position:21% line:-2
Clangが教えてくれるエラーも
自分のソースコードだけでしたね

00:30:11.812 --> 00:30:15.749 align:start position:25% line:-2
以上 自分のフレームワークの
モジュールビルド方法でした

00:30:18.352 --> 00:30:20.521 align:start position:32% line:-1
初めに言ったように―

00:30:20.687 --> 00:30:25.159 align:start position:29% line:-2
フレームワーク名がないと
問題が起こり得ます

00:30:25.893 --> 00:30:28.762 align:start position:30% line:-1
失敗例を見てみましょう

00:30:30.531 --> 00:30:33.834 align:start position:30% line:-2
インポートが２つだけの
簡単な例です

00:30:33.934 --> 00:30:37.738 align:start position:25% line:-2
１行目は
PetKitのモジュールです

00:30:39.139 --> 00:30:44.645 align:start position:29% line:-2
次もモジュールの一部だと
私たちは知っています

00:30:45.012 --> 00:30:47.748 align:start position:25% line:-1
Clangには判断できません

00:30:47.981 --> 00:30:50.417 align:start position:34% line:-2
フレームワーク名が
ないからです

00:30:51.718 --> 00:30:57.658 align:start position:27% line:-2
この場合 定義の重複による
エラーが起こり得ます

00:30:57.758 --> 00:31:01.361 align:start position:30% line:-2
主に 同一のヘッダを
再インポートする時です

00:30:57.758 --> 00:31:01.361 align:start position:30% line:-2
主に 同一のヘッダを
再インポートする時です

00:31:03.130 --> 00:31:09.503 align:start position:23% line:-2
Clangは こうしたエラーを
懸命に修復してくれます

00:31:10.537 --> 00:31:12.406 align:start position:30% line:-1
でも すべては無理です

00:31:13.240 --> 00:31:15.008 align:start position:38% line:-1
例で見てみます

00:31:15.409 --> 00:31:17.077 align:start position:30% line:-1
少しだけ変更しましょう

00:31:18.512 --> 00:31:20.380 align:start position:30% line:-1
コンテキストを変えます

00:31:21.348 --> 00:31:25.385 align:start position:27% line:-2
モジュールのインポートには
影響しません

00:31:25.485 --> 00:31:28.388 align:start position:27% line:-2
先ほど見たとおり
コンテキストは無視されます

00:31:29.556 --> 00:31:33.760 align:start position:23% line:-2
でも Cat.hは
モジュール化されていないのに―

00:31:33.861 --> 00:31:36.029 align:start position:34% line:-1
変更に反応しません

00:31:36.263 --> 00:31:39.800 align:start position:29% line:-2
これでは
定義の重複以前の問題です

00:31:39.900 --> 00:31:44.304 align:start position:34% line:-2
定義の矛盾が
発生してしまいます

00:31:44.671 --> 00:31:46.440 align:start position:32% line:-1
これは修復不可能です

00:31:46.907 --> 00:31:52.379 align:start position:25% line:-2
パブリックやプライベートの
ヘッダをインポートするなら―

00:31:52.479 --> 00:31:55.716 align:start position:30% line:-2
必ずフレームワーク名を
付けましょう

00:31:56.650 --> 00:32:00.387 align:start position:27% line:-2
続いて デヴィンが話すのは
Swiftと―

00:31:56.650 --> 00:32:00.387 align:start position:27% line:-2
続いて デヴィンが話すのは
Swiftと―

00:32:00.621 --> 00:32:02.489 align:start position:18% line:-1
Clang Modulesの関係です

00:32:02.589 --> 00:32:08.962 align:start position:43% line:-1
(拍手)

00:32:09.062 --> 00:32:10.130 align:start position:41% line:-1
ありがとう

00:32:11.331 --> 00:32:13.300 align:start position:27% line:-1
これから ご説明するのは―

00:32:13.634 --> 00:32:19.506 align:start position:18% line:-2
Swiftとビルドシステムが協力して
宣言を見つける方法です

00:32:21.408 --> 00:32:23.710 align:start position:36% line:-2
ユルゲンの話を
振り返りましょう

00:32:23.811 --> 00:32:27.214 align:start position:21% line:-2
Objective-Cファイルは
個別にコンパイルされます

00:32:27.781 --> 00:32:31.919 align:start position:29% line:-2
別のファイルを探すのに
クラスを参照したい場合―

00:32:32.386 --> 00:32:36.256 align:start position:29% line:-2
クラスを宣言したヘッダを
インポートします

00:32:37.424 --> 00:32:41.328 align:start position:25% line:-2
でも Swiftではヘッダを
記述する必要がありません

00:32:41.528 --> 00:32:44.798 align:start position:29% line:-2
初めて開発言語を学ぶ人に
親切ですね

00:32:44.898 --> 00:32:49.036 align:start position:23% line:-2
別々のファイルで
宣言を繰り返す必要もありません

00:32:50.337 --> 00:32:54.541 align:start position:27% line:-2
ただ コンパイラにとっては
記録管理の手間が増えます

00:32:54.942 --> 00:32:57.444 align:start position:30% line:-2
どうやって記録するのか
説明します

00:32:59.713 --> 00:33:02.282 align:start position:23% line:-1
PetWallで見てみましょう

00:32:59.713 --> 00:33:02.282 align:start position:23% line:-1
PetWallで見てみましょう

00:33:02.850 --> 00:33:06.286 align:start position:23% line:-2
ViewControllerに
view変数を持っています

00:33:07.054 --> 00:33:08.889 align:start position:21% line:-2
続いて Objective-Cの
AppDelegateと―

00:33:08.989 --> 00:33:10.791 align:start position:23% line:-1
Swiftのユニットテストです

00:33:11.558 --> 00:33:15.963 align:start position:18% line:-2
PetViewControllerを
コンパイルするだけでも―

00:33:16.396 --> 00:33:19.533 align:start position:27% line:-1
４つの処理が必要になります

00:33:20.367 --> 00:33:23.136 align:start position:32% line:-1
まずは宣言の参照です

00:33:23.303 --> 00:33:25.372 align:start position:25% line:-1
Swiftのターゲット内と―

00:33:25.472 --> 00:33:27.841 align:start position:14% line:-1
Objective-Cからも受け取ります

00:33:29.176 --> 00:33:33.280 align:start position:23% line:-2
次に ファイルの内容を記述する
インターフェイスを生成します

00:33:33.380 --> 00:33:36.183 align:start position:25% line:-2
そのインターフェイスの宣言を
今度は―

00:33:36.283 --> 00:33:39.887 align:start position:27% line:-2
Objective-Cや
別のターゲットが参照します

00:33:40.721 --> 00:33:43.690 align:start position:38% line:-2
このスライドの
例を使って―

00:33:43.791 --> 00:33:47.127 align:start position:36% line:-2
４つのタスクを
説明していきます

00:33:47.694 --> 00:33:51.098 align:start position:29% line:-2
初めに ターゲット自身の
宣言を見つけます

00:33:55.502 --> 00:33:58.305 align:start position:7% line:-2
PetViewController.swiftを
コンパイルするには―

00:33:58.739 --> 00:34:02.543 align:start position:36% line:-2
イニシャライザの
タイプを調べます

00:33:58.739 --> 00:34:02.543 align:start position:36% line:-2
イニシャライザの
タイプを調べます

00:34:02.676 --> 00:34:04.511 align:start position:30% line:-1
呼び出せるかの確認です

00:34:05.412 --> 00:34:09.983 align:start position:16% line:-2
しかし その前に
PetView.swiftを解析します

00:34:10.150 --> 00:34:15.155 align:start position:25% line:-2
イニシャライザの宣言が適切か
検証するためです

00:34:15.755 --> 00:34:21.562 align:start position:29% line:-2
イニシャライザのボディを
確認する必要はありません

00:34:22.029 --> 00:34:26.867 align:start position:27% line:-2
でも インターフェイス用に
情報は必要です

00:34:29.803 --> 00:34:35.141 align:start position:20% line:-2
つまり １つのSwiftファイルを
コンパイルするために―

00:34:35.576 --> 00:34:39.246 align:start position:21% line:-2
ターゲットのSwiftファイルを
すべて解析するのです

00:34:39.346 --> 00:34:42.983 align:start position:23% line:-2
インターフェイスとの関連部分を
検証するためです

00:34:48.222 --> 00:34:51.291 align:start position:30% line:-2
Xcode 9では
増分デバッグビルドが―

00:34:51.391 --> 00:34:53.893 align:start position:29% line:-1
繰り返し行われていました

00:34:53.994 --> 00:34:57.731 align:start position:27% line:-2
ファイルを個別に
コンパイルしていたからです

00:34:58.298 --> 00:35:01.034 align:start position:36% line:-2
これは並列処理を
可能にする一方―

00:34:58.298 --> 00:35:01.034 align:start position:36% line:-2
これは並列処理を
可能にする一方―

00:35:01.135 --> 00:35:04.638 align:start position:30% line:-2
各ファイルを何度も
解析する必要があります

00:35:05.272 --> 00:35:08.108 align:start position:30% line:-2
１つの実装が
.oを生成するごとに―

00:35:08.208 --> 00:35:12.780 align:start position:29% line:-2
インターフェイスは何度も
宣言を参照します

00:35:14.147 --> 00:35:16.984 align:start position:23% line:-2
Xcode 10では
オーバーヘッドが軽減されました

00:35:17.451 --> 00:35:20.688 align:start position:36% line:-2
ファイルは
グループ化され―

00:35:20.788 --> 00:35:23.424 align:start position:34% line:-2
可能な限りの処理を
共有します

00:35:24.591 --> 00:35:27.261 align:start position:29% line:-1
しかも並列処理も可能です

00:35:27.861 --> 00:35:30.497 align:start position:30% line:-2
グループ内で
解析結果を共有すれば―

00:35:31.131 --> 00:35:33.967 align:start position:29% line:-2
繰り返し行うのは
グループ間の処理のみです

00:35:34.501 --> 00:35:38.238 align:start position:30% line:-2
個別コンパイルよりも
処理が少なくて済みます

00:35:38.338 --> 00:35:42.910 align:start position:29% line:-2
増分デバッグビルド時間は
かなり短縮されました

00:35:46.113 --> 00:35:49.950 align:start position:23% line:-2
Swiftコードが呼び出すのは
Swiftコードだけでなく―

00:35:50.050 --> 00:35:51.985 align:start position:18% line:-1
Objective-Cも呼び出します

00:35:53.554 --> 00:35:58.425 align:start position:27% line:-2
PetWallで確認すると
その必要性が分かります

00:35:58.525 --> 00:36:03.063 align:start position:21% line:-2
システムのフレームワークは
Objective-Cだからです

00:35:58.525 --> 00:36:03.063 align:start position:21% line:-2
システムのフレームワークは
Objective-Cだからです

00:36:06.567 --> 00:36:10.137 align:start position:32% line:-2
Swiftは
他の開発言語と違い―

00:36:10.237 --> 00:36:14.341 align:start position:21% line:-2
他言語の関数型インターフェイスを
用意する必要がありません

00:36:15.776 --> 00:36:19.379 align:start position:16% line:-2
つまり
Objective-CのAPIごとに―

00:36:19.479 --> 00:36:22.149 align:start position:30% line:-2
Swiftで
宣言を書かずに済みます

00:36:22.950 --> 00:36:27.988 align:start position:21% line:-2
コンパイラにClangの大部分が
埋め込まれており―

00:36:28.188 --> 00:36:29.923 align:start position:36% line:-2
ライブラリとして
使用されます

00:36:30.457 --> 00:36:34.528 align:start position:29% line:-2
私たちはフレームワークを
インポートするだけです

00:36:37.131 --> 00:36:39.633 align:start position:21% line:-2
続いて
Objective-Cの宣言です

00:36:40.300 --> 00:36:44.505 align:start position:27% line:-2
ターゲットのタイプに基づき
ヘッダを確認します

00:36:45.806 --> 00:36:49.409 align:start position:14% line:-2
Objective-Cのフレームワークを
インポートする場合―

00:36:49.943 --> 00:36:52.346 align:start position:29% line:-2
インポータが
ヘッダの宣言を参照します

00:36:52.446 --> 00:36:55.616 align:start position:34% line:-2
モジュールマップを
使うのです

00:36:56.917 --> 00:37:00.254 align:start position:18% line:-2
SwiftとObjective-Cが
混在するフレームワークでは―

00:36:56.917 --> 00:37:00.254 align:start position:18% line:-2
SwiftとObjective-Cが
混在するフレームワークでは―

00:37:00.420 --> 00:37:03.490 align:start position:27% line:-2
umbrellaヘッダ内で
宣言を見つけます

00:37:04.525 --> 00:37:07.427 align:start position:25% line:-2
パブリックインターフェイスを
定義するヘッダです

00:37:08.228 --> 00:37:10.864 align:start position:29% line:-2
これでフレームワーク内の
Swiftコードが―

00:37:10.964 --> 00:37:14.902 align:start position:12% line:-2
パブリックのObjective-Cコードを
呼び出せます

00:37:16.837 --> 00:37:19.339 align:start position:29% line:-2
最後にアプリケーションと
ユニットテスト内で―

00:37:19.439 --> 00:37:22.042 align:start position:21% line:-2
ターゲットのブリッジングヘッダに
importを付加します

00:37:22.142 --> 00:37:25.812 align:start position:30% line:-2
これで Swiftから
宣言が呼び出せますね

00:37:28.348 --> 00:37:29.016 align:start position:45% line:-1
さて…

00:37:29.616 --> 00:37:31.752 align:start position:34% line:-2
インポータが
取り込んだ宣言は―

00:37:31.852 --> 00:37:35.155 align:start position:29% line:-2
よりSwiftらしい形に
変換されます

00:37:35.556 --> 00:37:39.893 align:start position:18% line:-2
例えば NSErrorを使う
Objective-Cのメソッドが―

00:37:40.027 --> 00:37:44.998 align:start position:16% line:-2
throwを使用した Swiftらしい
エラー処理になります

00:37:47.801 --> 00:37:50.671 align:start position:27% line:-2
Objective-Cでは
タイプ名のパラメータが―

00:37:50.771 --> 00:37:52.906 align:start position:27% line:-1
動詞や前置詞の後に続きます

00:37:53.874 --> 00:37:56.643 align:start position:27% line:-2
例は drawPetと
atPointメソッドです

00:37:56.743 --> 00:37:58.345 align:start position:27% line:-1
Petという単語があります

00:37:58.545 --> 00:38:02.416 align:start position:25% line:-2
タイプのパラメータ Petが
動詞drawの後にあります

00:37:58.545 --> 00:38:02.416 align:start position:25% line:-2
タイプのパラメータ Petが
動詞drawの後にあります

00:38:03.016 --> 00:38:08.555 align:start position:21% line:-2
同じく タイプのパラメータである
CGPointのPointも―

00:38:08.655 --> 00:38:10.457 align:start position:27% line:-1
前置詞atの後にありますね

00:38:11.925 --> 00:38:15.462 align:start position:32% line:-2
しかし Swiftに
インポートされると―

00:38:15.562 --> 00:38:18.098 align:start position:25% line:-1
単にdrawとatになります

00:38:19.333 --> 00:38:23.036 align:start position:29% line:-2
その仕組みは
意外に思うかもしれません

00:38:23.771 --> 00:38:28.142 align:start position:32% line:-2
英語の動詞と前置詞の
リストがあるのです

00:38:29.610 --> 00:38:33.313 align:start position:32% line:-2
しかし 人間の言語は
あまりに複雑です

00:38:33.414 --> 00:38:35.315 align:start position:27% line:-1
リストにない単語もあります

00:38:35.682 --> 00:38:38.819 align:start position:27% line:-2
そして Swiftの慣例に
合わせるために―

00:38:38.919 --> 00:38:44.291 align:start position:27% line:-2
インポータは品詞によって
不要な単語を判断しています

00:38:45.125 --> 00:38:47.828 align:start position:30% line:-2
例えば feedは
単語リストにありません

00:38:47.928 --> 00:38:52.532 align:start position:27% line:-2
このため feedPetは
例外的な形に変換されます

00:38:53.467 --> 00:38:57.237 align:start position:30% line:-2
任意の名前で
インポートさせるには―

00:38:57.337 --> 00:39:01.775 align:start position:20% line:-2
NS SWIFT NAMEの注釈を
使いましょう

00:38:57.337 --> 00:39:01.775 align:start position:20% line:-2
NS SWIFT NAMEの注釈を
使いましょう

00:39:05.746 --> 00:39:10.083 align:start position:29% line:-2
どうインポートされるのか
確認したい場合には―

00:39:10.284 --> 00:39:13.354 align:start position:14% line:-2
XcodeのRelated Itemsを
開いてください

00:39:13.454 --> 00:39:16.190 align:start position:36% line:-2
ソースエディタの
左上にあります

00:39:16.557 --> 00:39:18.659 align:start position:14% line:-2
Generated Interfaceを
選択してください

00:39:18.759 --> 00:39:23.197 align:start position:21% line:-2
インターフェイスが Swiftで
どう表示されるか確認できます

00:39:25.432 --> 00:39:27.901 align:start position:11% line:-2
これが SwiftがObjective-Cを
インポートする場合です

00:39:28.268 --> 00:39:33.140 align:start position:20% line:-2
では逆に Objective-Cが
Swiftをインポートする場合は？

00:39:35.309 --> 00:39:39.513 align:start position:29% line:-2
インポート可能なヘッダを
Swiftが生成します

00:39:39.880 --> 00:39:42.516 align:start position:25% line:-2
つまり
Swiftでクラスを記述し―

00:39:42.616 --> 00:39:44.718 align:start position:27% line:-2
Objective-Cから
呼び出すことが可能です

00:39:45.586 --> 00:39:47.087 align:start position:32% line:-1
挙動を見てみましょう

00:39:48.355 --> 00:39:51.225 align:start position:18% line:-2
コンパイラはObjective-Cの
宣言を生成します

00:39:51.325 --> 00:39:53.994 align:start position:21% line:-2
Swift側のNSObjectと
@objcが付いたメソッドを―

00:39:54.094 --> 00:39:56.296 align:start position:36% line:-1
拡張するためです

00:39:57.364 --> 00:39:58.732 align:start position:38% line:-1
このヘッダは―

00:39:58.832 --> 00:40:02.870 align:start position:23% line:-2
パブリックとインターナル両方の
宣言を含んでいます

00:39:58.832 --> 00:40:02.870 align:start position:23% line:-2
パブリックとインターナル両方の
宣言を含んでいます

00:40:02.970 --> 00:40:05.005 align:start position:25% line:-2
これで
インターナルのSwiftを―

00:40:05.105 --> 00:40:07.441 align:start position:18% line:-1
Objective-Cが使用できます

00:40:08.609 --> 00:40:09.977 align:start position:30% line:-2
ただし
フレームワーク用には―

00:40:10.077 --> 00:40:13.213 align:start position:25% line:-2
ヘッダはパブリックの宣言しか
提供しません

00:40:13.313 --> 00:40:15.449 align:start position:30% line:-2
これ自体が
ビルド結果に含まれる―

00:40:15.549 --> 00:40:18.285 align:start position:25% line:-2
パブリックインターフェイスの
一部だからです

00:40:20.521 --> 00:40:24.758 align:start position:18% line:-2
さて Objective-Cクラスが
ひも付く先は―

00:40:24.858 --> 00:40:27.594 align:start position:29% line:-2
Swiftクラスの
マングル名になっています

00:40:27.694 --> 00:40:30.698 align:start position:30% line:-2
一部はモジュールの名前
PetWallです

00:40:31.865 --> 00:40:34.368 align:start position:34% line:-2
モジュールについて
少し説明した後―

00:40:34.635 --> 00:40:36.703 align:start position:23% line:-1
ルイスが この現象を解説します

00:40:36.870 --> 00:40:41.208 align:start position:29% line:-2
同じ名前で定義すると
実行時に競合が発生します

00:40:41.308 --> 00:40:44.711 align:start position:36% line:-2
それを防ぐための
マングル名です

00:40:46.180 --> 00:40:50.184 align:start position:4% line:-2
Objective-Cの  attribute  に
識別子を持たせれば―

00:40:50.284 --> 00:40:53.821 align:start position:30% line:-2
任意の名前を
指定することも可能です

00:40:54.154 --> 00:40:59.026 align:start position:27% line:-2
ただし 競合が起きないよう
注意してください

00:40:59.893 --> 00:41:05.265 align:start position:25% line:-2
私自身はPWLと付けることで
競合を回避しています

00:40:59.893 --> 00:41:05.265 align:start position:25% line:-2
私自身はPWLと付けることで
競合を回避しています

00:41:05.599 --> 00:41:07.901 align:start position:20% line:-1
これでObjective-C側で―

00:41:08.001 --> 00:41:11.572 align:start position:23% line:-2
PWLPetCollarとして
クラスを参照できます

00:41:14.074 --> 00:41:17.411 align:start position:27% line:-2
他のSwiftターゲットが
参照できるように―

00:41:17.511 --> 00:41:19.413 align:start position:25% line:-2
同様の手法で
インターフェイスを生成します

00:41:21.215 --> 00:41:25.219 align:start position:20% line:-2
Swiftでのビルドは
Clangのモジュールと似ています

00:41:25.319 --> 00:41:27.087 align:start position:29% line:-1
ユルゲンが説明しましたね

00:41:27.287 --> 00:41:29.923 align:start position:34% line:-2
そして より深く
言語に溶け込みます

00:41:30.657 --> 00:41:34.728 align:start position:29% line:-2
Swiftのモジュールは
配信可能な宣言の集合です

00:41:34.828 --> 00:41:37.264 align:start position:32% line:-2
この宣言を
使用可能にするには―

00:41:37.364 --> 00:41:39.633 align:start position:32% line:-2
モジュールの
インポートが必要です

00:41:40.300 --> 00:41:44.771 align:start position:20% line:-2
この例ではObjective-Cの
XCTestをインポートしました

00:41:45.272 --> 00:41:49.810 align:start position:16% line:-2
XcodeではSwiftのターゲットは
独立したモジュールを作ります

00:41:50.043 --> 00:41:51.712 align:start position:30% line:-1
アプリケーションもです

00:41:52.446 --> 00:41:55.048 align:start position:30% line:-2
アプリケーション本体の
モジュールも―

00:41:55.148 --> 00:41:57.851 align:start position:29% line:-2
ユニットテストをするには
インポートが必要です

00:42:00.621 --> 00:42:03.891 align:start position:27% line:-2
インポート時 コンパイラは
Swiftモジュールを―

00:42:03.991 --> 00:42:06.160 align:start position:32% line:-1
デシリアライズします

00:42:06.360 --> 00:42:08.295 align:start position:29% line:-1
タイプを確認するためです

00:42:09.096 --> 00:42:13.667 align:start position:12% line:-2
この例でも コンパイラは
PetWall.swiftmoduleの―

00:42:14.001 --> 00:42:15.969 align:start position:18% line:-2
PetViewControllerを
読み込みます

00:42:16.070 --> 00:42:18.839 align:start position:29% line:-1
整合性を確認するためです

00:42:19.740 --> 00:42:23.610 align:start position:27% line:-2
コンパイラがターゲット内の
宣言を見つける方法と―

00:42:23.710 --> 00:42:25.279 align:start position:38% line:-1
似ていますよね

00:42:25.913 --> 00:42:30.150 align:start position:27% line:-2
今回はSwiftファイルを
直接 解析するのではなく―

00:42:30.350 --> 00:42:33.420 align:start position:34% line:-2
モジュールの要約を
読み込みます

00:42:36.323 --> 00:42:38.825 align:start position:27% line:-2
コンパイラが作る
Swiftのモジュールは―

00:42:38.926 --> 00:42:41.962 align:start position:21% line:-2
Objective-Cのヘッダに
よく似ています

00:42:42.296 --> 00:42:45.499 align:start position:32% line:-2
ただし 言語ではなく
バイナリ形式です

00:42:45.966 --> 00:42:48.368 align:start position:27% line:-2
また インライナブル関数の
ボディをインクルードします

00:42:48.469 --> 00:42:51.104 align:start position:23% line:-2
Objective-Cでの
スタティックインライン関数や―

00:42:51.205 --> 00:42:53.974 align:start position:27% line:-2
C++でのヘッダ内の実装と
似ています

00:42:54.808 --> 00:42:56.810 align:start position:38% line:-1
特徴としては―

00:42:56.910 --> 00:43:01.715 align:start position:21% line:-2
プライベート宣言の名前とタイプも
インクルードすることです

00:42:56.910 --> 00:43:01.715 align:start position:21% line:-2
プライベート宣言の名前とタイプも
インクルードすることです

00:43:02.082 --> 00:43:05.886 align:start position:32% line:-2
デバッガで
参照するのに便利です

00:43:06.186 --> 00:43:08.288 align:start position:38% line:-1
ここで注意です

00:43:08.388 --> 00:43:12.559 align:start position:29% line:-2
見られて恥ずかしい
適当な名前を付けないこと

00:43:15.796 --> 00:43:20.267 align:start position:21% line:-2
増分ビルドを行うため ファイルは
まず部分ごとに生成され―

00:43:20.367 --> 00:43:26.173 align:start position:25% line:-2
その後 モジュール全体を表す
１つのファイルになります

00:43:26.940 --> 00:43:32.946 align:start position:14% line:-2
この時 Objective-Cのヘッダも
１つ生成されます

00:43:34.448 --> 00:43:37.151 align:start position:29% line:-2
似たような働きをするのが
リンカーで―

00:43:37.251 --> 00:43:41.855 align:start position:27% line:-2
オブジェクトファイルを
１つの実行ファイルにします

00:43:42.222 --> 00:43:46.527 align:start position:32% line:-2
次は このリンカーを
ルイスが解説します

00:43:46.827 --> 00:43:47.628 align:start position:45% line:-1
ルイス

00:43:48.295 --> 00:43:49.363 align:start position:41% line:-1
ありがとう

00:43:49.463 --> 00:43:54.735 align:start position:43% line:-1
(拍手)

00:43:54.835 --> 00:43:57.504 align:start position:29% line:-1
リンカー担当のルイスです

00:43:57.838 --> 00:44:00.440 align:start position:27% line:-1
これがビルドの最終段階です

00:43:57.838 --> 00:44:00.440 align:start position:27% line:-1
これがビルドの最終段階です

00:44:00.541 --> 00:44:01.842 align:start position:32% line:-1
さっそく始めましょう

00:44:03.043 --> 00:44:06.046 align:start position:36% line:-2
今から話す内容は
こちらです

00:44:06.713 --> 00:44:09.116 align:start position:27% line:-1
リンカーの役割を説明します

00:44:09.616 --> 00:44:14.121 align:start position:27% line:-2
次にインプットとなる
ファイルの種類を確認します

00:44:14.655 --> 00:44:18.292 align:start position:29% line:-2
その一部であるシンボルも
説明します

00:44:18.859 --> 00:44:23.263 align:start position:29% line:-2
最後に サンプルを使って
話をまとめます

00:44:23.364 --> 00:44:24.598 align:start position:38% line:-1
難解ですからね

00:44:25.065 --> 00:44:29.236 align:start position:32% line:-2
最後まで聞けば
分かってくるはずです

00:44:31.405 --> 00:44:33.740 align:start position:29% line:-1
まず リンカーとは何か？

00:44:33.841 --> 00:44:37.544 align:start position:36% line:-2
ビルドプロセスの
最終段階ですね

00:44:38.078 --> 00:44:41.148 align:start position:34% line:-2
２つのコンパイラが
構築した―

00:44:41.248 --> 00:44:46.086 align:start position:29% line:-2
.oファイルをまとめ上げ
実行可能ファイルにします

00:44:47.054 --> 00:44:50.457 align:start position:32% line:-2
リンカーはコードを
作ることはできません

00:44:50.557 --> 00:44:54.261 align:start position:32% line:-2
重要なポイントなので
サンプルで確認します

00:44:55.629 --> 00:44:58.132 align:start position:32% line:-2
インプットファイルは
２種類です

00:44:58.232 --> 00:45:02.536 align:start position:30% line:-2
.dylibなどは
ライブラリの拡張子です

00:44:58.232 --> 00:45:02.536 align:start position:30% line:-2
.dylibなどは
ライブラリの拡張子です

00:45:03.003 --> 00:45:06.840 align:start position:23% line:-2
オブジェクトファイルは
ビルドの過程で生成されましたね

00:45:06.940 --> 00:45:10.344 align:start position:30% line:-2
ライブラリには
いくつか種類があります

00:45:10.444 --> 00:45:14.882 align:start position:21% line:-2
.dylibや.tbdなどに加え
スタティックライブラリもあります

00:45:15.983 --> 00:45:18.218 align:start position:38% line:-1
シンボルとは？

00:45:18.452 --> 00:45:22.523 align:start position:30% line:-2
コードやデータを
参照するための名前です

00:45:24.625 --> 00:45:27.828 align:start position:29% line:-2
別の関数を呼び出すための
関数を書くと―

00:45:27.928 --> 00:45:31.298 align:start position:29% line:-2
他のシンボルを参照する
フラグメントも出てきます

00:45:33.600 --> 00:45:38.272 align:start position:21% line:-2
シンボルの特性は
リンカーの挙動に大きく影響します

00:45:38.372 --> 00:45:41.975 align:start position:30% line:-2
ウィークシンボルの例を
お話しします

00:45:42.242 --> 00:45:45.279 align:start position:29% line:-2
ウィークシンボルは
別のシンボル上の注釈です

00:45:45.746 --> 00:45:49.750 align:start position:27% line:-2
実行可能ファイルの実行時に
そのシンボルが―

00:45:49.850 --> 00:45:53.120 align:start position:34% line:-2
そこにない方が
いいという注釈です

00:45:53.287 --> 00:45:56.156 align:start position:30% line:-2
これが 可用性の
マークアップの正体です

00:45:56.256 --> 00:46:01.028 align:start position:25% line:-2
特定のAPIがiOS 12で
使用可能かなどを表します

00:45:56.256 --> 00:46:01.028 align:start position:25% line:-2
特定のAPIがiOS 12で
使用可能かなどを表します

00:46:01.562 --> 00:46:05.165 align:start position:27% line:-2
内容はリンカーに着くまでに
固まっています

00:46:05.265 --> 00:46:08.502 align:start position:29% line:-2
リンカーはどのシンボルを
付けるべきで―

00:46:08.602 --> 00:46:13.106 align:start position:27% line:-2
実行に必要なシンボルは何か
決定できます

00:46:14.975 --> 00:46:18.245 align:start position:29% line:-2
言語もマングリングにより
データをエンコードし―

00:46:18.345 --> 00:46:20.114 align:start position:34% line:-1
シンボルを作ります

00:46:21.148 --> 00:46:25.319 align:start position:23% line:-2
それはC++でもSwiftでも
起こります

00:46:27.221 --> 00:46:30.023 align:start position:36% line:-2
今 言ったように
シンボルとは―

00:46:30.357 --> 00:46:32.960 align:start position:29% line:-1
コードやデータの名前です

00:46:33.360 --> 00:46:38.632 align:start position:25% line:-2
そして コンパイラが生成する
オブジェクトファイルは―

00:46:38.765 --> 00:46:41.769 align:start position:29% line:-1
コードやデータの集合です

00:46:42.369 --> 00:46:45.839 align:start position:29% line:-2
コンパイルされただけでは
実行はできません

00:46:45.939 --> 00:46:47.574 align:start position:38% line:-1
不完全なのです

00:46:47.674 --> 00:46:51.779 align:start position:32% line:-2
リンカーが結び付けて
整えていきます

00:46:54.081 --> 00:46:58.152 align:start position:27% line:-2
ファイルの各フラグメントに
シンボルが付きます

00:46:58.318 --> 00:47:00.921 align:start position:25% line:-1
例えば printf関数も―

00:46:58.318 --> 00:47:00.921 align:start position:25% line:-1
例えば printf関数も―

00:47:01.321 --> 00:47:03.323 align:start position:36% line:-2
シンボル付きの
コードになります

00:47:03.424 --> 00:47:08.028 align:start position:23% line:-2
これから見るPetKitの
どの関数でも同じことが起きます

00:47:09.830 --> 00:47:14.935 align:start position:23% line:-2
フラグメントが未定義シンボルを
参照する場合もあります

00:47:15.702 --> 00:47:20.808 align:start position:25% line:-2
未定義の.oファイルの関数を
参照する場合は―

00:47:20.908 --> 00:47:24.144 align:start position:21% line:-2
リンカーが未定義シンボルを見つけ
リンクします

00:47:26.280 --> 00:47:30.484 align:start position:27% line:-2
.oファイルはコンパイルの
アウトプットでしたね

00:47:30.584 --> 00:47:32.052 align:start position:32% line:-1
では ライブラリは？

00:47:32.553 --> 00:47:34.822 align:start position:32% line:-2
シンボルを
定義するファイルで―

00:47:34.922 --> 00:47:37.791 align:start position:32% line:-2
ターゲットの一部では
ありません

00:47:38.425 --> 00:47:41.228 align:start position:27% line:-2
まずは
ダイナミックライブラリです

00:47:41.595 --> 00:47:44.031 align:start position:23% line:-1
これはMach-Oファイルで―

00:47:44.131 --> 00:47:48.869 align:start position:27% line:-2
実行可能ファイルが使用する
フラグメントが入っています

00:47:49.436 --> 00:47:52.473 align:start position:27% line:-2
これは
私たちのシステムの一部です

00:47:52.573 --> 00:47:56.343 align:start position:25% line:-2
他のフレームワークを
併用している人もいるでしょう

00:47:58.178 --> 00:48:00.013 align:start position:34% line:-1
次にTBDファイル

00:47:58.178 --> 00:48:00.013 align:start position:34% line:-1
次にTBDファイル

00:48:00.114 --> 00:48:03.350 align:start position:7% line:-2
つまり
Text Based Dylib Stubsです

00:48:03.951 --> 00:48:04.751 align:start position:43% line:-1
ここで―

00:48:05.953 --> 00:48:09.523 align:start position:32% line:-2
SDKを開発した時の
話をします

00:48:09.623 --> 00:48:12.125 align:start position:20% line:-2
MapKitやWebKitといった
機能と共に―

00:48:12.226 --> 00:48:14.595 align:start position:29% line:-2
ダイナミックライブラリも
開発しました

00:48:14.728 --> 00:48:19.533 align:start position:27% line:-2
しかし サイズが大きく
全部は組み込めませんでした

00:48:19.900 --> 00:48:23.003 align:start position:32% line:-2
しかも 実行時にしか
必要ありません

00:48:23.103 --> 00:48:25.172 align:start position:29% line:-2
そこでシンボルのボディは
省略し―

00:48:25.272 --> 00:48:28.942 align:start position:30% line:-2
シンボル名だけの
スタブを作成したのです

00:48:29.343 --> 00:48:30.677 align:start position:43% line:-1
その後―

00:48:30.778 --> 00:48:33.680 align:start position:30% line:-2
使いやすい言語形式へと
改良しました

00:48:33.781 --> 00:48:35.516 align:start position:30% line:-1
現在 TBDの役割は―

00:48:35.682 --> 00:48:39.286 align:start position:34% line:-2
SDK配信時の
サイズ削減だけです

00:48:40.120 --> 00:48:43.524 align:start position:29% line:-2
プロジェクト内にあっても
気にしないでください

00:48:43.724 --> 00:48:45.292 align:start position:34% line:-2
シンボルが
入っているだけです

00:48:46.093 --> 00:48:49.396 align:start position:27% line:-2
最後は
スタティックライブラリです

00:48:50.030 --> 00:48:52.232 align:start position:25% line:-1
スタティックライブラリには―

00:48:52.466 --> 00:48:55.168 align:start position:32% line:-2
.oファイルばかりが
入っています

00:48:55.269 --> 00:49:00.641 align:start position:25% line:-2
arツールやlibtoolで
ビルドされたものです

00:48:55.269 --> 00:49:00.641 align:start position:25% line:-2
arツールやlibtoolで
ビルドされたものです

00:49:00.908 --> 00:49:03.310 align:start position:25% line:-1
arのmanページに従って―

00:49:03.410 --> 00:49:08.549 align:start position:21% line:-2
arユーティリティが
ファイルを作成し 保守しています

00:49:09.283 --> 00:49:12.820 align:start position:23% line:-1
TARやZIPに似ていますよね

00:49:12.920 --> 00:49:14.822 align:start position:38% line:-1
それもそのはず

00:49:14.922 --> 00:49:18.058 align:start position:27% line:-2
.aはUNIXの初期の
アーカイブフォーマットです

00:49:18.158 --> 00:49:20.561 align:start position:34% line:-2
より強力なツールが
登場した時には―

00:49:21.628 --> 00:49:26.800 align:start position:23% line:-2
コンパイラなどは
すでに.aに適応していたのです

00:49:26.900 --> 00:49:29.136 align:start position:25% line:-1
.aはアーカイブファイルです

00:49:31.839 --> 00:49:35.142 align:start position:30% line:-2
特徴としては
ダイナミックリンクです

00:49:35.242 --> 00:49:39.580 align:start position:27% line:-2
昔は全コードがアーカイブで
配信されていました

00:49:39.747 --> 00:49:41.081 align:start position:41% line:-1
そのため―

00:49:41.181 --> 00:49:45.886 align:start position:21% line:-2
C言語のライブラリ全体を
インクルードしたくなかったのです

00:49:45.986 --> 00:49:47.788 align:start position:38% line:-1
対処はこうです

00:49:48.388 --> 00:49:52.993 align:start position:23% line:-2
シンボル付きの.oファイルだけ
アーカイブから抜き取ります

00:49:53.093 --> 00:49:55.529 align:start position:25% line:-1
他のファイルは そのままです

00:49:55.863 --> 00:49:59.733 align:start position:29% line:-2
参照は可能で
必要なものは手に入ります

00:49:59.833 --> 00:50:03.871 align:start position:21% line:-2
シンボルに関係なく動く
スタティックイニシャライザなどは

00:49:59.833 --> 00:50:03.871 align:start position:21% line:-2
シンボルに関係なく動く
スタティックイニシャライザなどは

00:50:03.971 --> 00:50:08.575 align:start position:27% line:-2
使用や再エクスポートの時に
注意が必要です

00:50:09.076 --> 00:50:13.046 align:start position:11% line:-2
-force loadや-all loadで
対象に入れてください

00:50:13.146 --> 00:50:15.382 align:start position:29% line:-1
リンクを行わなくてもです

00:50:17.217 --> 00:50:21.054 align:start position:30% line:-2
では サンプルを使って
復習します

00:50:23.424 --> 00:50:26.026 align:start position:30% line:-1
スライドをご覧ください

00:50:26.126 --> 00:50:30.964 align:start position:21% line:-2
playSound関数の事例です
音は欠かせませんね

00:50:32.166 --> 00:50:33.300 align:start position:45% line:-1
さて…

00:50:33.667 --> 00:50:37.704 align:start position:20% line:-2
playSoundを呼び出す関数が
Cat内にあります

00:50:37.804 --> 00:50:39.273 align:start position:34% line:-1
シンプルな例ですね

00:50:39.540 --> 00:50:41.708 align:start position:30% line:-2
生成されたアセンブリを
見てみましょう

00:50:42.876 --> 00:50:46.180 align:start position:27% line:-1
Cat.oが生成されました

00:50:46.813 --> 00:50:50.450 align:start position:25% line:-2
こちらにある
purr.aacというのが―

00:50:50.784 --> 00:50:55.155 align:start position:27% line:-2
私たちが用意した
AACサウンドファイルです

00:50:55.656 --> 00:50:57.724 align:start position:23% line:-1
Cat.oにもコピーされました

00:50:57.824 --> 00:51:00.961 align:start position:20% line:-2
でも purrFileという名前は
ありませんね

00:50:57.824 --> 00:51:00.961 align:start position:20% line:-2
でも purrFileという名前は
ありませんね

00:51:01.094 --> 00:51:02.963 align:start position:38% line:-1
静的だからです

00:51:03.063 --> 00:51:07.668 align:start position:30% line:-2
C言語を扱う皆さんなら
もう お分かりですよね

00:51:07.768 --> 00:51:11.171 align:start position:27% line:-2
他者は参照できないものです
必要ありません

00:51:14.208 --> 00:51:15.609 align:start position:41% line:-1
では 次へ

00:51:15.943 --> 00:51:21.648 align:start position:30% line:-2
これがシンボルです
-[Cat purr]

00:51:23.517 --> 00:51:25.085 align:start position:34% line:-1
想像どおりでしょう

00:51:26.286 --> 00:51:31.058 align:start position:20% line:-2
その下の変数を
今からplaySoundに渡します

00:51:31.225 --> 00:51:33.760 align:start position:30% line:-1
命令が２つ付いています

00:51:33.861 --> 00:51:39.199 align:start position:21% line:-2
この文字列が 実行可能ファイルの
どこに入るか不明だからです

00:51:39.299 --> 00:51:41.501 align:start position:29% line:-1
決まった場所はありません

00:51:41.602 --> 00:51:45.138 align:start position:21% line:-1
このアセンブリ arm64には―

00:51:45.472 --> 00:51:49.209 align:start position:32% line:-2
コンパイラは最大で
２つの命令を残せます

00:51:49.343 --> 00:51:53.113 align:start position:16% line:-2
オフセットのPAGEとPAGEOFFが
付いています

00:51:53.213 --> 00:51:55.482 align:start position:29% line:-1
リンカーが後で補完します

00:51:56.083 --> 00:52:00.954 align:start position:30% line:-2
こうして 文字列が
x0に読み込まれました

00:51:56.083 --> 00:52:00.954 align:start position:30% line:-2
こうして 文字列が
x0に読み込まれました

00:52:01.722 --> 00:52:04.591 align:start position:21% line:-2
これで
playSoundを呼び出せます

00:52:04.691 --> 00:52:10.597 align:start position:18% line:-2
ただし その名前は
Z9playSoundPKcです

00:52:11.265 --> 00:52:14.935 align:start position:30% line:-2
これは マングリングで
生成されたシンボルです

00:52:15.035 --> 00:52:18.205 align:start position:23% line:-2
Cat.mmの記述言語は
Objective-C++です

00:52:18.372 --> 00:52:21.642 align:start position:25% line:-2
しかし playSoundは
C++関数なのです

00:52:22.042 --> 00:52:24.511 align:start position:34% line:-1
判断できない場合―

00:52:25.512 --> 00:52:28.615 align:start position:29% line:-2
実際にターミナルで
ツールを使ってみましょう

00:52:28.716 --> 00:52:33.587 align:start position:20% line:-2
swift-demangleの後に
シンボルを付けて実行します

00:52:33.687 --> 00:52:36.090 align:start position:29% line:-2
Swiftのシンボルでは
ありませんね

00:52:36.490 --> 00:52:40.894 align:start position:21% line:-2
では C++のデマングラ
c++filtではどうでしょう？

00:52:41.195 --> 00:52:43.831 align:start position:21% line:-2
playSoundのシンボルだと
分かるだけでなく―

00:52:43.931 --> 00:52:47.501 align:start position:25% line:-2
引数も分かりました
const char *です

00:52:47.601 --> 00:52:52.206 align:start position:27% line:-2
C++はマングル名に情報も
エンコードしているのです

00:52:53.640 --> 00:52:58.011 align:start position:27% line:-2
プロジェクトのビルド時には
.oファイルが多数できます

00:52:58.846 --> 00:53:01.215 align:start position:30% line:-1
これを どうするのか？

00:52:58.846 --> 00:53:01.215 align:start position:30% line:-1
これを どうするのか？

00:53:02.049 --> 00:53:06.587 align:start position:29% line:-2
システムは そのすべてを
リンカーに渡します

00:53:06.687 --> 00:53:09.490 align:start position:30% line:-2
リンカーは受け入れ用の
ファイルを作ります

00:53:09.757 --> 00:53:13.394 align:start position:23% line:-2
PetWallのフレームワーク
PetKitをビルドしてみます

00:53:14.962 --> 00:53:18.899 align:start position:25% line:-2
TEXTセグメントを作り
コピーしていきます

00:53:19.266 --> 00:53:22.135 align:start position:36% line:-2
すべてのコードを
保管する場所です

00:53:22.703 --> 00:53:26.773 align:start position:23% line:-2
まず Cat.oのコピーですが
上下に分かれました

00:53:26.874 --> 00:53:29.610 align:start position:34% line:-2
先ほどの文字列と
実行可能コードです

00:53:30.377 --> 00:53:35.148 align:start position:27% line:-2
絶対アドレスが分かったので
リンカーは参照しに行きます

00:53:35.249 --> 00:53:37.351 align:start position:30% line:-1
Cat.oを書き換え―

00:53:37.518 --> 00:53:40.287 align:start position:27% line:-1
具体的なオフセットにします

00:53:40.688 --> 00:53:43.624 align:start position:27% line:-1
２つ目の命令が消えましたね

00:53:43.724 --> 00:53:47.194 align:start position:23% line:-1
null値の命令に置き換えます

00:53:47.794 --> 00:53:53.300 align:start position:27% line:-2
リンカーはコードを作ったり
消したりはしません

00:53:53.400 --> 00:53:56.336 align:start position:21% line:-1
ファイルのサイズが変わるからです

00:53:56.437 --> 00:53:58.972 align:start position:30% line:-1
だから この場合にも―

00:53:59.239 --> 00:54:02.343 align:start position:34% line:-2
何もしない値に
置き換えるだけです

00:53:59.239 --> 00:54:02.343 align:start position:34% line:-2
何もしない値に
置き換えるだけです

00:54:02.576 --> 00:54:03.944 align:start position:34% line:-1
最後にブランチです

00:54:04.812 --> 00:54:06.613 align:start position:38% line:-1
そう ブランチ

00:54:07.548 --> 00:54:08.615 align:start position:43% line:-1
しかし…

00:54:09.783 --> 00:54:13.020 align:start position:32% line:-2
未定義シンボルは
どうするのでしょう？

00:54:13.120 --> 00:54:17.291 align:start position:29% line:-2
この時点で.oファイルは
全部インクルード済みです

00:54:18.292 --> 00:54:22.663 align:start position:14% line:-2
スタティックライブラリ
PetSupport.aを見てみましょう

00:54:22.963 --> 00:54:24.765 align:start position:20% line:-1
PetSupport.aの中には―

00:54:25.499 --> 00:54:28.702 align:start position:27% line:-2
PetSounds.oなど
いくつかファイルがあります

00:54:29.503 --> 00:54:33.740 align:start position:23% line:-2
playSoundのシンボルも
あります

00:54:34.708 --> 00:54:35.876 align:start position:36% line:-1
取り込みましょう

00:54:38.312 --> 00:54:41.248 align:start position:20% line:-1
PetCare.oは取り込みません

00:54:41.348 --> 00:54:47.254 align:start position:27% line:-2
他から参照されるシンボルが
付いていないからです

00:54:48.522 --> 00:54:50.824 align:start position:29% line:-1
取り込んだはいいものの―

00:54:51.859 --> 00:54:55.262 align:start position:32% line:-2
openとあるのは
未定義のシンボルです

00:54:56.030 --> 00:54:59.633 align:start position:20% line:-2
open$stubはコピーした時に
付いたものです

00:54:59.767 --> 00:55:01.068 align:start position:38% line:-1
なぜでしょう？

00:54:59.767 --> 00:55:01.068 align:start position:38% line:-1
なぜでしょう？

00:55:01.735 --> 00:55:04.705 align:start position:23% line:-1
openがどこにあるか調べます

00:55:05.772 --> 00:55:10.110 align:start position:16% line:-2
ありました
libSystem.tbdファイルです

00:55:11.145 --> 00:55:14.214 align:start position:25% line:-2
これは
システムライブラリの一部で―

00:55:14.314 --> 00:55:17.384 align:start position:32% line:-2
アプリケーションには
含まれません

00:55:17.751 --> 00:55:21.288 align:start position:27% line:-2
呼び出せるように
情報を与える必要があります

00:55:21.388 --> 00:55:23.357 align:start position:29% line:-1
そこで仮の関数を作ります

00:55:23.490 --> 00:55:25.058 align:start position:30% line:-1
これはテンプレートで―

00:55:25.225 --> 00:55:29.363 align:start position:29% line:-2
ライブラリから呼び出す
どの関数にも適用できます

00:55:29.630 --> 00:55:31.298 align:start position:32% line:-1
関数を見てみましょう

00:55:31.632 --> 00:55:35.369 align:start position:25% line:-2
ポインタから読み込むのですね
open$pointerです

00:55:36.036 --> 00:55:37.137 align:start position:38% line:-1
そこへ飛びます

00:55:37.237 --> 00:55:40.941 align:start position:27% line:-2
つまり 他のC言語と同様の
関数ポインタが必要です

00:55:42.576 --> 00:55:45.446 align:start position:29% line:-2
DATAセグメントに
作りましょう

00:55:45.546 --> 00:55:48.649 align:start position:32% line:-2
グローバル変数が入る
セグメントです

00:55:49.316 --> 00:55:51.251 align:start position:34% line:-1
ゼロになっています

00:55:51.351 --> 00:55:54.788 align:start position:29% line:-2
nullに飛ぶと
クラッシュしてしまいます

00:55:55.923 --> 00:56:00.561 align:start position:21% line:-2
LINKEDITを追加します
メタデータのセグメントです

00:55:55.923 --> 00:56:00.561 align:start position:21% line:-2
LINKEDITを追加します
メタデータのセグメントです

00:56:00.661 --> 00:56:06.467 align:start position:25% line:-2
リンカーツールは
ここにOS用の情報を入れます

00:56:06.567 --> 00:56:10.003 align:start position:25% line:-2
これでダイナミックリンカーが
実行時に補完できます

00:56:10.104 --> 00:56:11.772 align:start position:32% line:-1
詳しく知りたい方は―

00:56:11.905 --> 00:56:16.610 align:start position:0% line:-2
Optimizing App Startup Timeを
ご覧ください

00:56:19.279 --> 00:56:20.013 align:start position:45% line:-1
では―

00:56:21.014 --> 00:56:23.417 align:start position:30% line:-1
今日の復習をしましょう

00:56:23.550 --> 00:56:27.554 align:start position:25% line:-2
ジェイクは ビルドシステムと
依存関係を説明しました

00:56:27.654 --> 00:56:30.758 align:start position:32% line:-2
ビルドをマルチコアに
最適化できますね

00:56:32.960 --> 00:56:34.995 align:start position:29% line:-1
ユルゲンはClangや―

00:56:35.095 --> 00:56:39.500 align:start position:29% line:-2
ビルドを最適化する
モジュールを紹介しました

00:56:40.834 --> 00:56:44.905 align:start position:30% line:-2
デヴィンはSwiftの
モジュールを解説し―

00:56:45.005 --> 00:56:49.643 align:start position:27% line:-2
高速処理を実現する新機能を
お見せしました

00:56:49.743 --> 00:56:53.013 align:start position:29% line:-2
そのアウトプットを受けた
リンカーが―

00:56:53.113 --> 00:56:55.149 align:start position:34% line:-2
アプリケーションを
完成させました

00:56:55.249 --> 00:56:59.720 align:start position:30% line:-2
あとはコード署名をし
必要なものを付け加え―

00:57:00.387 --> 00:57:03.056 align:start position:34% line:-2
アプリケーションを
配信するだけです

00:57:03.891 --> 00:57:04.958 align:start position:43% line:-1
そして―

00:57:05.893 --> 00:57:09.062 align:start position:27% line:-1
こちらはオープンソースです

00:57:09.163 --> 00:57:13.667 align:start position:14% line:-2
SwiftやClangやllbuildに
興味があれば―

00:57:14.802 --> 00:57:16.370 align:start position:36% line:-1
こちらのURLへ

00:57:16.904 --> 00:57:18.972 align:start position:34% line:-1
ご参加に感謝します

00:57:19.173 --> 00:57:22.343 align:start position:25% line:-1
WWDCを楽しめたでしょうか

00:57:22.443 --> 00:57:24.144 align:start position:30% line:-1
ありがとうございました

00:57:24.411 --> 00:57:26.813 align:start position:43% line:-1
(拍手)
