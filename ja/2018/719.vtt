WEBVTT

00:00:07.040 --> 00:00:16.283 align:start position:43% line:-1
(音楽)

00:00:23.390 --> 00:00:25.492 align:start position:32% line:-1
ありがとうございます

00:00:25.592 --> 00:00:26.827 align:start position:43% line:-1
(拍手)

00:00:27.361 --> 00:00:31.231 align:start position:20% line:-2
Core Imageのセッションへ
ようこそ

00:00:31.331 --> 00:00:32.566 align:start position:29% line:-1
デビッド･ヘイワードです

00:00:32.665 --> 00:00:35.802 align:start position:20% line:-2
本日は
新しくなったCore Imageと

00:00:35.903 --> 00:00:40.841 align:start position:25% line:-2
プロトタイピング機能について
お話しします

00:00:41.041 --> 00:00:44.011 align:start position:29% line:-1
早速 本題に入りましょう

00:00:44.545 --> 00:00:48.982 align:start position:29% line:-2
まずはアプリケーションの
動作の改善に役立つ―

00:00:49.082 --> 00:00:52.085 align:start position:29% line:-1
新しいAPIを紹介します

00:00:52.319 --> 00:00:56.490 align:start position:29% line:-2
次に新たなアルゴリズムの
開発に向けた―

00:00:56.590 --> 00:00:59.026 align:start position:23% line:-2
Core Imageの使い方を
お伝えします

00:00:59.159 --> 00:01:02.529 align:start position:32% line:-2
機械学習の
アプリケーションでの

00:00:59.159 --> 00:01:02.529 align:start position:32% line:-2
機械学習の
アプリケーションでの

00:01:02.629 --> 00:01:05.933 align:start position:30% line:-2
Core Imageの
活用法も紹介します

00:01:07.568 --> 00:01:11.538 align:start position:25% line:-2
APIによる
パフォーマンス向上については

00:01:11.638 --> 00:01:15.475 align:start position:36% line:-2
主に２つの領域に
取り組みました

00:01:15.576 --> 00:01:21.715 align:start position:21% line:-2
１つは 中間バッファ挿入のための
コントロールの追加

00:01:21.982 --> 00:01:27.955 align:start position:25% line:-2
２つ目は CIカーネル言語の
新機能の追加です

00:01:28.055 --> 00:01:31.658 align:start position:30% line:-2
まずは
中間バッファのお話です

00:01:33.193 --> 00:01:38.131 align:start position:29% line:-2
Core Imageでは
フィルタのシーケンスを

00:01:38.232 --> 00:01:40.033 align:start position:32% line:-1
簡単につなげられます

00:01:40.133 --> 00:01:43.871 align:start position:32% line:-2
フィルタは１つ以上の
カーネルから成ります

00:01:43.971 --> 00:01:49.209 align:start position:29% line:-2
Core Imageでは
カーネルを連結させて

00:01:49.309 --> 00:01:52.012 align:start position:34% line:-2
中間バッファの数を
最小限にします

00:01:52.112 --> 00:01:56.817 align:start position:21% line:-2
多くの場合
それでパフォーマンスが向上します

00:01:57.484 --> 00:02:03.524 align:start position:23% line:-2
しかし できるだけ
連結を避けたいケースもあります

00:01:57.484 --> 00:02:03.524 align:start position:23% line:-2
しかし できるだけ
連結を避けたいケースもあります

00:02:03.857 --> 00:02:08.794 align:start position:25% line:-2
例えばフィルタチェインに
高負荷なフィルタを使っていて

00:02:09.229 --> 00:02:14.768 align:start position:27% line:-2
ユーザがフィルタを調整する
可能性があるケースです

00:02:15.102 --> 00:02:19.439 align:start position:32% line:-2
その場合には
間に中間バッファが―

00:02:20.007 --> 00:02:22.409 align:start position:29% line:-1
あったほうがよいでしょう

00:02:22.809 --> 00:02:26.046 align:start position:34% line:-2
中間バッファが
メリットを生みます

00:02:26.146 --> 00:02:30.551 align:start position:29% line:-2
高負荷なフィルタにかかる
コストを

00:02:30.651 --> 00:02:33.887 align:start position:36% line:-2
再びかける必要が
なくなるのです

00:02:34.121 --> 00:02:35.822 align:start position:34% line:-1
それを実現するのは

00:02:35.923 --> 00:02:40.194 align:start position:7% line:-2
insertingIntermediateという
新しいAPIです

00:02:40.761 --> 00:02:43.597 align:start position:32% line:-1
次のような仕組みです

00:02:43.697 --> 00:02:46.433 align:start position:27% line:-1
単に多く連結するのではなく

00:02:46.533 --> 00:02:52.005 align:start position:29% line:-2
中間バッファの周辺で
できるだけ多く連結します

00:02:53.173 --> 00:02:59.246 align:start position:20% line:-2
デフォルトのCore Imageは
全ての中間バッファのキャッシュで

00:02:59.346 --> 00:03:03.984 align:start position:30% line:-2
後続のレンダリングを
できる限り速く行います

00:02:59.346 --> 00:03:03.984 align:start position:30% line:-2
後続のレンダリングを
できる限り速く行います

00:03:04.151 --> 00:03:09.122 align:start position:23% line:-2
しかしキャッシュを
無効にしたい場合もあるでしょう

00:03:09.423 --> 00:03:14.628 align:start position:27% line:-2
例えば100の画像を
バッチエクスポートする際に

00:03:14.862 --> 00:03:20.300 align:start position:25% line:-2
最初の画像をキャッシュしても
レンダリングでは使いません

00:03:20.667 --> 00:03:25.205 align:start position:12% line:-2
従ってコンテキストオプションの
cacheIntermediatesを使い

00:03:25.305 --> 00:03:27.241 align:start position:23% line:-1
その値をfalseに設定します

00:03:28.475 --> 00:03:32.513 align:start position:21% line:-2
しかし新しいAPIは
コンテキストオプションが無効でも

00:03:32.679 --> 00:03:38.185 align:start position:27% line:-2
中間バッファのキャッシュを
有効にできます

00:03:38.285 --> 00:03:42.956 align:start position:34% line:-2
何を格納するかを
選択しているのです

00:03:45.492 --> 00:03:50.797 align:start position:30% line:-2
次にお話しするテーマは
画像処理を行うための―

00:03:50.898 --> 00:03:53.834 align:start position:38% line:-2
カーネル言語の
新しい機能です

00:03:55.002 --> 00:03:59.973 align:start position:21% line:-2
Core Imageにカーネルを
書き込む方法は２つあります

00:04:00.240 --> 00:04:03.777 align:start position:27% line:-2
従来の方法は
“CIカーネル言語の使用”

00:04:03.877 --> 00:04:09.416 align:start position:27% line:-2
この場合 ソースファイルに
文字列が含まれ

00:04:09.516 --> 00:04:14.021 align:start position:7% line:-2
実行時に“CIKernel(source:)”で
呼び出します

00:04:14.655 --> 00:04:18.358 align:start position:30% line:-2
そのカーネルをベースに
画像を作る時―

00:04:18.458 --> 00:04:21.128 align:start position:21% line:-2
その画像を
CIのコンテキストに書き込みます

00:04:21.228 --> 00:04:25.799 align:start position:25% line:-2
MetalとOpenGLの
いずれのバックアップでもです

00:04:26.867 --> 00:04:30.070 align:start position:27% line:-2
レンダリングには
そのソースの変換が必要です

00:04:30.170 --> 00:04:35.909 align:start position:21% line:-2
MetalかGLSLに変換する際
コストがかかります

00:04:36.343 --> 00:04:41.215 align:start position:25% line:-2
コードがGPUの命令セットに
コンパイルされ 実行されます

00:04:42.583 --> 00:04:48.956 align:start position:23% line:-2
昨年iOS 11を立ち上げた際
新たな手法を追加しました

00:04:49.056 --> 00:04:52.226 align:start position:18% line:-2
Metalシェーディング言語に基づく
CIカーネルです

00:04:52.526 --> 00:04:55.462 align:start position:25% line:-1
プロジェクト内にあるソースが

00:04:55.562 --> 00:05:00.534 align:start position:27% line:-2
実行時ではなく
構築時にコンパイルされます

00:04:55.562 --> 00:05:00.534 align:start position:27% line:-2
実行時ではなく
構築時にコンパイルされます

00:05:01.435 --> 00:05:05.739 align:start position:32% line:-2
Metalの関数名と
バイナリデータを使い

00:05:05.839 --> 00:05:10.511 align:start position:30% line:-2
このコードに基づいて
カーネルを具体化します

00:05:12.012 --> 00:05:16.283 align:start position:25% line:-2
この時
コンパイルの追加コストなしで

00:05:16.383 --> 00:05:19.219 align:start position:32% line:-1
データを適用できます

00:05:19.486 --> 00:05:23.924 align:start position:25% line:-2
Metalバックの
CIコンテキストが必要ですが

00:05:24.224 --> 00:05:26.293 align:start position:34% line:-2
パフォーマンス上の
利点があります

00:05:27.895 --> 00:05:33.534 align:start position:21% line:-2
今回のリリースから
CIカーネル言語を非推奨とします

00:05:33.634 --> 00:05:36.537 align:start position:27% line:-1
今後もサポートは続けますが

00:05:36.870 --> 00:05:42.242 align:start position:25% line:-2
Metalカーネルの新手法が
デベロッパに有利だからです

00:05:42.342 --> 00:05:45.379 align:start position:34% line:-2
パフォーマンス上の
利点だけでなく

00:05:45.479 --> 00:05:50.984 align:start position:25% line:-2
シンタックスカラーリングが
プログラム構築時に得られます

00:05:51.084 --> 00:05:55.756 align:start position:30% line:-2
デバッギングツールを
取得することもできます

00:05:57.858 --> 00:05:59.326 align:start position:36% line:-1
素晴らしいですね

00:05:59.593 --> 00:06:02.362 align:start position:43% line:-1
(拍手)

00:05:59.593 --> 00:06:02.362 align:start position:43% line:-1
(拍手)

00:06:03.630 --> 00:06:09.436 align:start position:25% line:-2
カーネル言語に追加した機能を
ご紹介しましょう

00:06:09.536 --> 00:06:11.939 align:start position:27% line:-2
１つ目は
ハーフフロートサポートです

00:06:12.072 --> 00:06:14.541 align:start position:39% line:-1
多くの場合―

00:06:14.641 --> 00:06:20.614 align:start position:23% line:-2
ハーフフロートがもたらす精度が
CIカーネルに有効に働きます

00:06:20.714 --> 00:06:24.918 align:start position:29% line:-2
RGB値で作業する際には
十分な精度です

00:06:25.452 --> 00:06:29.490 align:start position:21% line:-2
カーネルでハーフフロートを使うと
作業が速くなります

00:06:29.656 --> 00:06:32.759 align:start position:32% line:-2
iPhone Xなど
A11では顕著です

00:06:33.293 --> 00:06:37.598 align:start position:21% line:-1
更には より小さなレジスタで済み

00:06:37.698 --> 00:06:41.802 align:start position:27% line:-2
GPUが有効に活用でき
パフォーマンスが向上します

00:06:42.302 --> 00:06:47.140 align:start position:27% line:-2
もう１つの追加機能は
グループ読み込みのサポート

00:06:47.241 --> 00:06:52.279 align:start position:23% line:-2
これによりシェーダは
１つの入力画像から１回の指示で

00:06:52.379 --> 00:06:55.582 align:start position:32% line:-2
４つの単一チャネルを
読み込めます

00:06:56.483 --> 00:07:00.921 align:start position:27% line:-2
また ピクセルのグループも
書き込めます

00:06:56.483 --> 00:07:00.921 align:start position:27% line:-2
また ピクセルのグループも
書き込めます

00:07:01.021 --> 00:07:03.190 align:start position:30% line:-1
シェーダ内の１コールで

00:07:03.290 --> 00:07:07.060 align:start position:29% line:-2
１つの画像の４ピクセルを
書き込めます

00:07:08.362 --> 00:07:12.366 align:start position:32% line:-2
これらの３つの特性を
シェーダで使用でき

00:07:12.466 --> 00:07:15.235 align:start position:25% line:-1
パフォーマンスが改善されます

00:07:15.335 --> 00:07:18.272 align:start position:30% line:-1
一例をご紹介しましょう

00:07:18.539 --> 00:07:23.277 align:start position:25% line:-2
１つの画像の
１チャネルのみに適用される―

00:07:23.544 --> 00:07:26.513 align:start position:27% line:-2
３ｘ３の畳み込みカーネルを
想定します

00:07:26.613 --> 00:07:31.051 align:start position:25% line:-2
画像の輝度を
シャープにするための作業です

00:07:31.451 --> 00:07:35.756 align:start position:30% line:-2
カーネルを呼び出す度に
アウトプットピクセルを

00:07:35.856 --> 00:07:39.626 align:start position:27% line:-1
１つ生成することになります

00:07:39.827 --> 00:07:42.529 align:start position:30% line:-1
３ｘ３の畳み込みなので

00:07:42.629 --> 00:07:47.134 align:start position:30% line:-2
カーネルは９ピクセルを
読み込む必要があります

00:07:47.234 --> 00:07:50.404 align:start position:21% line:-1
１ピクセルに対し ９ピクセルです

00:07:51.371 --> 00:07:56.143 align:start position:25% line:-2
新規のグループ書き込み機能で
これを改善できます

00:07:56.343 --> 00:08:03.150 align:start position:25% line:-2
２ｘ２ピクセルグループを
一度の呼び出しで書き込めます

00:07:56.343 --> 00:08:03.150 align:start position:25% line:-2
２ｘ２ピクセルグループを
一度の呼び出しで書き込めます

00:08:03.350 --> 00:08:07.955 align:start position:29% line:-2
２ｘ２のグループは
１ピクセルより大きいので

00:08:08.055 --> 00:08:13.927 align:start position:27% line:-2
３ｘ３の代わりに
４ｘ４のピクセルが必要です

00:08:14.328 --> 00:08:19.533 align:start position:27% line:-2
４ピクセルの書き込みに対し
16ピクセルとなります

00:08:19.633 --> 00:08:22.402 align:start position:32% line:-1
これが１つの特長です

00:08:24.905 --> 00:08:28.909 align:start position:36% line:-2
もう１つの特性は
集積能力です

00:08:29.009 --> 00:08:33.480 align:start position:21% line:-2
この例では４ｘ４で
16ピクセルを読み込んでいますが

00:08:33.580 --> 00:08:39.086 align:start position:25% line:-2
この時 ４つの指示で
16ピクセルの作業ができます

00:08:39.720 --> 00:08:45.125 align:start position:27% line:-2
４ピクセルの書き込みに対し
４グループを読み込み

00:08:45.225 --> 00:08:47.628 align:start position:27% line:-1
パフォーマンスが向上します

00:08:47.728 --> 00:08:50.931 align:start position:25% line:-2
このプロセスを
カーネルのコードで見ましょう

00:08:51.865 --> 00:08:57.237 align:start position:23% line:-2
先ほどのような
シンプルな畳み込みのコードです

00:08:57.471 --> 00:09:01.308 align:start position:32% line:-2
入力画像から
９つのサンプルを作り

00:08:57.471 --> 00:09:01.308 align:start position:32% line:-2
入力画像から
９つのサンプルを作り

00:09:01.408 --> 00:09:03.343 align:start position:32% line:-1
赤のチャネルのみ使用

00:09:04.111 --> 00:09:09.183 align:start position:20% line:-2
９つの値を平均化し
vec4のピクセル値を返すという―

00:09:09.283 --> 00:09:12.286 align:start position:34% line:-2
従来の方法で
書き込みを行います

00:09:14.087 --> 00:09:16.924 align:start position:30% line:-2
処理を速くするため
Metalに変換します

00:09:17.024 --> 00:09:18.192 align:start position:36% line:-1
作業はシンプルで

00:09:18.292 --> 00:09:22.396 align:start position:29% line:-2
従来のCIカーネル言語の
コードから始めます

00:09:22.496 --> 00:09:26.233 align:start position:32% line:-2
コードを置き換えて
Metalベースの―

00:09:26.333 --> 00:09:29.169 align:start position:29% line:-2
新しいCIカーネル言語に
更新します

00:09:29.269 --> 00:09:34.708 align:start position:23% line:-2
デスティネーションパラメータを
カーネルに追加しました

00:09:34.808 --> 00:09:40.280 align:start position:25% line:-2
これはカーネルのシェーダ内の
デスティネーション座標を

00:09:40.380 --> 00:09:42.416 align:start position:30% line:-1
確認する場合に重要です

00:09:42.983 --> 00:09:46.386 align:start position:25% line:-2
最新式のシンタックスを用いて
サンプリングするため

00:09:46.487 --> 00:09:50.257 align:start position:20% line:-2
“s.sample”と
“s.transform”とします

00:09:51.058 --> 00:09:56.930 align:start position:20% line:-2
それから従来のvec4とvec2の
パラメータタイプを

00:09:57.030 --> 00:09:59.366 align:start position:21% line:-1
float4とfloat2に変更

00:10:00.634 --> 00:10:04.972 align:start position:30% line:-2
でもカーネルのフローは
変わりません

00:10:06.640 --> 00:10:09.910 align:start position:30% line:-2
続いてハーフフロートを
使ってみます

00:10:10.010 --> 00:10:16.416 align:start position:25% line:-2
これはハーフフロートの精度を
明度以外にも活用できる例です

00:10:16.517 --> 00:10:20.087 align:start position:30% line:-2
再びコードにシンプルな
変更を加えます

00:10:20.220 --> 00:10:23.824 align:start position:34% line:-2
浮動小数点の精度を
利用するコードでは

00:10:23.924 --> 00:10:27.127 align:start position:30% line:-2
ハーフフロートの精度も
利用します

00:10:27.227 --> 00:10:30.364 align:start position:23% line:-2
サンプラのパラメータと
デスティネーションパラメータに

00:10:30.464 --> 00:10:32.900 align:start position:30% line:-1
“ h”が付いています

00:10:33.333 --> 00:10:37.471 align:start position:16% line:-1
そしてfloat4の部分はhalf4に

00:10:38.071 --> 00:10:39.840 align:start position:34% line:-1
非常にシンプルです

00:10:39.940 --> 00:10:42.943 align:start position:30% line:-1
コードに一貫性があれば

00:10:43.043 --> 00:10:47.314 align:start position:29% line:-2
“/ 9.0”のように
末尾に“h”を追加します

00:10:48.815 --> 00:10:50.250 align:start position:38% line:-1
シンプルですね

00:10:51.018 --> 00:10:57.191 align:start position:27% line:-2
最後はグループの読み込みと
書き込みの活用です

00:10:57.291 --> 00:11:00.027 align:start position:30% line:-1
コードを見てみましょう

00:10:57.291 --> 00:11:00.027 align:start position:30% line:-1
コードを見てみましょう

00:11:00.627 --> 00:11:03.630 align:start position:27% line:-2
２ｘ２のピクセルグループを
書き込み

00:11:03.730 --> 00:11:07.434 align:start position:27% line:-2
４ｘ４のピクセルグループを
読み込みます

00:11:08.035 --> 00:11:12.840 align:start position:25% line:-2
グループデスティネーションと
明記します

00:11:12.940 --> 00:11:17.711 align:start position:9% line:-2
“group::destination h”と
ありますね

00:11:18.345 --> 00:11:22.816 align:start position:27% line:-2
そしてデスティネーションの
座標を得ます

00:11:22.916 --> 00:11:29.823 align:start position:21% line:-2
実際には２ｘ２の
ピクセルグループの座標を示します

00:11:30.624 --> 00:11:37.431 align:start position:27% line:-2
ピクセルを埋めるために
画像から多くを読み込みます

00:11:37.898 --> 00:11:43.003 align:start position:25% line:-2
最初の読み込みは
２ｘ２のピクセルグループから

00:11:43.103 --> 00:11:46.707 align:start position:25% line:-2
ここでは
16ピクセルの左下端からです

00:11:47.007 --> 00:11:53.947 align:start position:27% line:-2
これは赤のチャネルの値を
half4の配列で戻します

00:11:54.715 --> 00:12:00.087 align:start position:30% line:-2
４つのパラメータが
x y z wの順番で

00:11:54.715 --> 00:12:00.087 align:start position:30% line:-2
４つのパラメータが
x y z wの順番で

00:12:00.187 --> 00:12:02.523 align:start position:29% line:-1
反時計周りに収められます

00:12:02.623 --> 00:12:09.096 align:start position:23% line:-2
これはMetalにおける集積の
オペレーションと同じ方向です

00:12:10.364 --> 00:12:15.936 align:start position:25% line:-2
このプロセスを
別の３グループで繰り返します

00:12:16.036 --> 00:12:20.307 align:start position:25% line:-1
グループ２ ３ ４と続けます

00:12:20.641 --> 00:12:25.979 align:start position:29% line:-2
次は どの値を
どこに収めるかが問題です

00:12:26.079 --> 00:12:32.019 align:start position:27% line:-2
まず３ｘ３のサブグループの
適切なチャネルを取得して

00:12:32.486 --> 00:12:34.154 align:start position:39% line:-1
平均化します

00:12:34.421 --> 00:12:39.193 align:start position:23% line:-2
それらのチャネルを
変数result1に格納します

00:12:39.560 --> 00:12:43.997 align:start position:32% line:-2
このプロセスを
４つの結果ピクセル―

00:12:44.464 --> 00:12:47.034 align:start position:18% line:-1
r1 r2 r3 r4で繰り返します

00:12:47.467 --> 00:12:54.107 align:start position:21% line:-2
最後は“dest.write”で
４ピクセルを一括処理します

00:12:54.241 --> 00:13:00.581 align:start position:25% line:-2
CIカーネルでの値を
カーネルから戻す手法とは違い

00:12:54.241 --> 00:13:00.581 align:start position:25% line:-2
CIカーネルでの値を
カーネルから戻す手法とは違い

00:13:00.681 --> 00:13:03.684 align:start position:18% line:-1
“dest.write”を使うのです

00:13:05.485 --> 00:13:10.123 align:start position:29% line:-2
わずかな努力で
素晴らしい結果になります

00:13:10.224 --> 00:13:13.627 align:start position:23% line:-2
このシェーダで
倍のパフォーマンスを得られます

00:13:13.727 --> 00:13:17.798 align:start position:34% line:-2
特に畳み込みを行う
他のシェーダでも

00:13:17.898 --> 00:13:20.267 align:start position:27% line:-1
似たような結果が得られます

00:13:20.601 --> 00:13:24.338 align:start position:27% line:-2
カーネルのパフォーマンスが
向上します

00:13:25.105 --> 00:13:31.578 align:start position:18% line:-2
従来のCIカーネル言語と
MetalがベースのCIカーネルの―

00:13:31.678 --> 00:13:36.383 align:start position:32% line:-2
両方について書かれた
新しい資料があります

00:13:36.483 --> 00:13:39.286 align:start position:34% line:-1
ぜひ読んでください

00:13:39.419 --> 00:13:43.257 align:start position:21% line:-2
以上がカーネルのパフォーマンスの
改善についてです

00:13:43.357 --> 00:13:45.726 align:start position:29% line:-1
ここからはエマヌエルに―

00:13:45.826 --> 00:13:51.064 align:start position:21% line:-2
新しいアルゴリズムの開発について
話してもらいます

00:13:51.164 --> 00:13:55.536 align:start position:43% line:-1
(拍手)

00:13:55.636 --> 00:13:56.603 align:start position:45% line:-1
どうも

00:13:59.106 --> 00:14:00.674 align:start position:41% line:-1
こんにちは

00:13:59.106 --> 00:14:00.674 align:start position:41% line:-1
こんにちは

00:14:00.774 --> 00:14:04.344 align:start position:21% line:-2
Core Imageのエンジニア
エマヌエルです

00:14:05.279 --> 00:14:07.648 align:start position:23% line:-1
Core Imageを使った―

00:14:07.748 --> 00:14:14.321 align:start position:23% line:-2
新しいプロトタイピングの
方法について探っていきましょう

00:14:14.755 --> 00:14:19.526 align:start position:14% line:-2
機械学習アプリケーションでの
Core Imageの活用法も紹介します

00:14:19.993 --> 00:14:21.128 align:start position:39% line:-1
始めましょう

00:14:22.396 --> 00:14:28.101 align:start position:27% line:-2
まずは画像のフィルタ処理の
ライフサイクルからです

00:14:30.103 --> 00:14:35.642 align:start position:25% line:-2
それでは前景と背景の区分けを
してみましょう

00:14:35.742 --> 00:14:41.915 align:start position:25% line:-2
前景で1.0 背景で0.0の
マスクを取得して

00:14:42.182 --> 00:14:45.619 align:start position:27% line:-1
合間に継続的な値を設けます

00:14:46.720 --> 00:14:51.425 align:start position:34% line:-2
データの質によって
難しさは変わります

00:14:51.525 --> 00:14:56.163 align:start position:27% line:-1
深度バッファが大きい場合は

00:14:56.263 --> 00:15:00.367 align:start position:34% line:-2
RGB画像に沿って
容易になります

00:14:56.263 --> 00:15:00.367 align:start position:34% line:-2
RGB画像に沿って
容易になります

00:15:00.467 --> 00:15:04.571 align:start position:30% line:-2
深度情報でRGB画像を
結合するなら

00:15:04.838 --> 00:15:09.376 align:start position:29% line:-2
写真やビデオ効果の
セッションをお勧めします

00:15:10.444 --> 00:15:16.550 align:start position:23% line:-2
今日はプロトタイピングの
一般的な事柄にフォーカスします

00:15:18.785 --> 00:15:23.156 align:start position:34% line:-2
よくドラフトされた
このフィルタは

00:15:23.257 --> 00:15:27.928 align:start position:27% line:-2
前景と背景のマスクの効果が
発揮されています

00:15:28.395 --> 00:15:31.365 align:start position:30% line:-1
次のステップはこうです

00:15:31.465 --> 00:15:35.569 align:start position:27% line:-1
好きなプロトタイプを選んで

00:15:35.669 --> 00:15:39.673 align:start position:25% line:-1
異なるフィルタを結合させます

00:15:39.773 --> 00:15:42.709 align:start position:27% line:-1
フィルタ効果を付けるのです

00:15:43.844 --> 00:15:45.412 align:start position:39% line:-1
処理が完了し

00:15:45.512 --> 00:15:50.751 align:start position:30% line:-2
ここに前景と背景の
マスクの例ができました

00:15:51.585 --> 00:15:58.192 align:start position:20% line:-2
iOSもしくはmacOSの環境なら
次はアルゴリズムの展開です

00:15:58.392 --> 00:16:02.429 align:start position:12% line:-1
CPUに留まる場合 Core Imageや

00:15:58.392 --> 00:16:02.429 align:start position:12% line:-1
CPUに留まる場合 Core Imageや

00:16:04.565 --> 00:16:09.403 align:start position:5% line:-2
Metal Performance Shaders
vlmageなどが使えます

00:16:10.304 --> 00:16:14.141 align:start position:23% line:-2
プロトタイプからの初期ポートは
時間がかかるし

00:16:14.241 --> 00:16:18.645 align:start position:29% line:-2
最初のレンダリングが
期待どおりとは限りません

00:16:19.246 --> 00:16:24.418 align:start position:25% line:-2
ピクセルの相違を生むソースは
多くありますが

00:16:24.518 --> 00:16:29.122 align:start position:23% line:-2
フィルタがフレームワークで
実行される方法の違いもその１つ

00:16:29.690 --> 00:16:36.296 align:start position:21% line:-2
左側の例は前景と背景に
いい感じのぼかしが施されています

00:16:36.463 --> 00:16:41.735 align:start position:23% line:-2
このフィルタは
内部のパフォーマンスを最適化し

00:16:41.835 --> 00:16:43.871 align:start position:30% line:-1
処理速度を上げています

00:16:44.271 --> 00:16:47.407 align:start position:34% line:-2
こうした最適化は
数的なエラーを招き

00:16:47.508 --> 00:16:49.576 align:start position:27% line:-1
それがフィルタに伝わります

00:16:49.977 --> 00:16:54.281 align:start position:27% line:-2
フィルタの出力に
影響を与えることがあります

00:16:55.649 --> 00:17:02.322 align:start position:23% line:-2
他の問題は メモリ管理の大半が
代理で行われることです

00:16:55.649 --> 00:17:02.322 align:start position:23% line:-2
他の問題は メモリ管理の大半が
代理で行われることです

00:17:02.422 --> 00:17:08.428 align:start position:25% line:-2
メモリ関連の問題は
気付くのが遅れてしまうことも

00:17:10.230 --> 00:17:15.935 align:start position:29% line:-2
もう１つ考慮すべき
重要なトピックは性能です

00:17:16.036 --> 00:17:19.071 align:start position:25% line:-2
プロトタイプでは
よくCPUコードを使用します

00:17:19.172 --> 00:17:23.277 align:start position:29% line:-2
CPコードから
GPコードに向けた処理は

00:17:23.377 --> 00:17:27.314 align:start position:29% line:-2
リアルタイムで
取得できると思いがちです

00:17:28.415 --> 00:17:34.388 align:start position:21% line:-2
プロトタイピングとワークフローで
問題を早期発見するには？

00:17:35.522 --> 00:17:39.326 align:start position:25% line:-2
PyCoreImageという
解決策があります

00:17:39.426 --> 00:17:41.361 align:start position:25% line:-2
Core Imageのための
Python結合です

00:17:42.262 --> 00:17:46.600 align:start position:30% line:-2
Core Imageの
高性能レンダリングと―

00:17:46.733 --> 00:17:50.571 align:start position:25% line:-2
Pythonプログラム言語の
柔軟性の結合です

00:17:51.038 --> 00:17:55.843 align:start position:23% line:-2
iOSとmacOS両方のための
サポートと

00:17:55.943 --> 00:17:58.378 align:start position:27% line:-2
200以上の内蔵フィルタを
取得できます

00:17:58.879 --> 00:18:02.549 align:start position:18% line:-1
PyCoreImageの内部はこちら

00:17:58.879 --> 00:18:02.549 align:start position:18% line:-1
PyCoreImageの内部はこちら

00:18:04.151 --> 00:18:06.954 align:start position:29% line:-1
主に３つに分かれています

00:18:07.754 --> 00:18:10.390 align:start position:14% line:-1
Core Imageをレンダリングに使い

00:18:10.858 --> 00:18:14.127 align:start position:23% line:-2
プログラミングインターフェイス
としてPythonを使います

00:18:14.828 --> 00:18:17.731 align:start position:29% line:-2
NumPyグルーコードの
薄い層で

00:18:18.065 --> 00:18:21.602 align:start position:32% line:-2
コードベースとの
相互運用性を持ちます

00:18:23.136 --> 00:18:28.442 align:start position:21% line:-2
プロダクト対応コードと
プロトタイプ間の摩擦を軽減します

00:18:29.209 --> 00:18:33.714 align:start position:14% line:-2
Swift中心の環境の場合は
Swift Playgroundの使用や

00:18:33.814 --> 00:18:39.152 align:start position:29% line:-2
その定期購読に関する
セッションをお勧めします

00:18:41.788 --> 00:18:45.659 align:start position:20% line:-2
PyCoreImageの主な要素を
見ていきましょう

00:18:46.126 --> 00:18:50.430 align:start position:23% line:-2
Objective-Cの結合で
Pythonを活用します

00:18:50.697 --> 00:18:55.402 align:start position:9% line:-2
Mac OS X 10.5 Leopard以来
PyObjCの出荷は続いています

00:18:56.703 --> 00:19:00.574 align:start position:16% line:-2
Cocoa開発の流れで
PythonとObjective-Cの

00:18:56.703 --> 00:19:00.574 align:start position:16% line:-2
Cocoa開発の流れで
PythonとObjective-Cの

00:19:00.674 --> 00:19:07.080 align:start position:29% line:-2
双方向のブリッジとして
当初 実施されたものです

00:19:09.316 --> 00:19:12.519 align:start position:25% line:-2
PyObjCをシンタックスで
呼び出すには

00:19:12.619 --> 00:19:15.689 align:start position:23% line:-2
Objective-Cコードで
コラムを配置します

00:19:15.789 --> 00:19:20.427 align:start position:27% line:-2
もっと複雑なので
詳細はAPIをご覧ください

00:19:20.961 --> 00:19:24.097 align:start position:20% line:-2
ここではCIVectorのクラスを
取り上げます

00:19:24.431 --> 00:19:28.969 align:start position:12% line:-2
CIVectorは
Objective-Cコードで作成されます

00:19:29.670 --> 00:19:32.473 align:start position:18% line:-2
呼び出すのは
X Y Z WのCIVectorです

00:19:32.839 --> 00:19:34.541 align:start position:23% line:-1
PyObjCコードを見ましょう

00:19:34.675 --> 00:19:38.512 align:start position:14% line:-2
CIVectorをQuartzアンブレラ
パッケージからインポートし

00:19:39.012 --> 00:19:42.616 align:start position:18% line:-2
X Y Z WのCIVectorと
CIVectorクラスを呼び出します

00:19:44.284 --> 00:19:47.621 align:start position:21% line:-1
コードがPythonとは違います

00:19:47.955 --> 00:19:50.357 align:start position:27% line:-1
これは あとでお話しします

00:19:53.193 --> 00:19:56.029 align:start position:20% line:-1
PyCoreImageを見ましょう

00:19:56.196 --> 00:20:00.567 align:start position:14% line:-2
Core Imageはハードウェアに近く
フィルタしたコールを

00:19:56.196 --> 00:20:00.567 align:start position:14% line:-2
Core Imageはハードウェアに近く
フィルタしたコールを

00:20:00.667 --> 00:20:06.540 align:start position:27% line:-2
最も適切な形で表示するため
多くの作業ができます

00:20:07.374 --> 00:20:13.013 align:start position:20% line:-2
PyObjCは
Quartzアンブレラパッケージで

00:20:13.113 --> 00:20:15.382 align:start position:29% line:-2
Python結合を通して
通信できます

00:20:15.616 --> 00:20:21.688 align:start position:7% line:-2
QuartzはCore Graphicsのような
画像処理用フレームワークや

00:20:21.788 --> 00:20:26.894 align:start position:4% line:-2
CIVector CIImage CIContext
全てのクラスを含むパッケージです

00:20:28.629 --> 00:20:32.733 align:start position:25% line:-2
PyCoreImageは
PyObjCのトップに存在し

00:20:33.433 --> 00:20:37.371 align:start position:18% line:-2
PyObjCがCore Imageと
通信するために活用します

00:20:37.471 --> 00:20:40.541 align:start position:27% line:-1
機械内部で簡素化を行うので

00:20:40.707 --> 00:20:45.946 align:start position:20% line:-2
Core Imageで作業する時は
多くの設定コードを必要としません

00:20:46.914 --> 00:20:49.283 align:start position:25% line:-1
cimgクラスで多くをこなし

00:20:49.383 --> 00:20:53.253 align:start position:23% line:-2
ベンダーコールを介して
NumPyでの解釈にも使えます

00:20:53.754 --> 00:20:58.458 align:start position:21% line:-2
クラスを使い
NumPyのバッファもまとめます

00:21:00.260 --> 00:21:06.467 align:start position:20% line:-2
次はPyCoreImageを使って
フィルタを採用する例です

00:21:07.201 --> 00:21:11.472 align:start position:14% line:-2
cimgクラスをPyCoreImageの
パッケージからインポートします

00:21:12.039 --> 00:21:14.341 align:start position:34% line:-2
ファイルから画像を
ロードするためです

00:21:15.375 --> 00:21:18.912 align:start position:23% line:-2
この時点では
ピクセルのバッファがありません

00:21:19.012 --> 00:21:23.851 align:start position:20% line:-2
Core Imageが画像のための
レシピを作成し

00:21:24.117 --> 00:21:26.553 align:start position:29% line:-1
ロードする指示を出します

00:21:27.754 --> 00:21:32.960 align:start position:27% line:-2
CIフィルタを呼び出して
入力プライマリを送りますが

00:21:33.060 --> 00:21:35.596 align:start position:20% line:-1
このケースではradiusとします

00:21:35.696 --> 00:21:37.965 align:start position:27% line:-1
更に複雑なグラフを作ります

00:21:38.065 --> 00:21:42.302 align:start position:25% line:-2
ズームすると
ぼかしのプロセッサが見えます

00:21:43.637 --> 00:21:48.809 align:start position:27% line:-2
cimgインスタンスで
レンダリングをコールすると

00:21:48.909 --> 00:21:52.246 align:start position:27% line:-2
バッファで適切なユニットを
取得できます

00:21:55.749 --> 00:22:02.189 align:start position:23% line:-2
そのためには簡素化した
コード設定を行う必要があります

00:21:55.749 --> 00:22:02.189 align:start position:23% line:-2
そのためには簡素化した
コード設定を行う必要があります

00:22:02.422 --> 00:22:08.529 align:start position:20% line:-2
Core Imageをご存じの方は
驚かないと思います

00:22:08.629 --> 00:22:12.399 align:start position:27% line:-2
初めての方は
最後までお付き合いください

00:22:12.499 --> 00:22:17.404 align:start position:30% line:-2
簡素化をご覧になれば
明確に分かると思います

00:22:18.705 --> 00:22:24.311 align:start position:14% line:-2
Core ImageはGPU画像処理用の
フレームワークで

00:22:24.411 --> 00:22:26.914 align:start position:16% line:-1
iOSやmacOSなどをサポートします

00:22:27.848 --> 00:22:29.817 align:start position:25% line:-2
大半のピクセルフォーマットが
対象です

00:22:30.450 --> 00:22:35.422 align:start position:20% line:-2
ビットマップデータや
幅広いベンダーからのRAWファイル

00:22:36.523 --> 00:22:39.626 align:start position:30% line:-2
大部分のファイル形式を
サポートしています

00:22:40.627 --> 00:22:46.300 align:start position:30% line:-2
これらのピクセル形式は
大抵 分けられています

00:22:46.400 --> 00:22:50.804 align:start position:30% line:-2
計算やハーフフロートや
32ビットフロートで

00:22:50.904 --> 00:22:55.075 align:start position:29% line:-2
８ビットの符号なし画像を
ロードできます

00:22:56.343 --> 00:23:00.948 align:start position:25% line:-2
Core Imageは画像の
メタデータを抽出します

00:22:56.343 --> 00:23:00.948 align:start position:25% line:-2
Core Imageは画像の
メタデータを抽出します

00:23:01.048 --> 00:23:04.718 align:start position:27% line:-2
キャプチャタイム 既存タグ
ポートレートマップ

00:23:04.818 --> 00:23:07.287 align:start position:23% line:-1
ポートレートの深度情報などです

00:23:09.323 --> 00:23:15.495 align:start position:21% line:-2
多くのフレームワークで扱われない
色彩管理も行います

00:23:16.230 --> 00:23:20.434 align:start position:25% line:-2
バウンダリーコンディションや
無限のイメージもサポートし

00:23:20.534 --> 00:23:24.271 align:start position:27% line:-2
200以上の内蔵フィルタが
すぐに使えます

00:23:25.272 --> 00:23:28.709 align:start position:29% line:-1
かなり盛りだくさんですね

00:23:28.809 --> 00:23:32.713 align:start position:25% line:-2
プロトタイプやワークフローで
Core Imageを試せば

00:23:33.647 --> 00:23:35.182 align:start position:32% line:-1
学習曲線は上昇します

00:23:35.282 --> 00:23:37.918 align:start position:23% line:-1
いくつかの簡素化を行いましたが

00:23:38.018 --> 00:23:42.856 align:start position:23% line:-2
一度でオーバーライドすることが
できます

00:23:42.956 --> 00:23:44.758 align:start position:25% line:-1
重み付きコードを提供するので

00:23:44.858 --> 00:23:48.662 align:start position:30% line:-2
これらの変更事項を
ハードコード化できます

00:23:49.696 --> 00:23:52.432 align:start position:23% line:-1
Core Imageは高性能で

00:23:52.533 --> 00:23:55.969 align:start position:29% line:-2
Metalバックエンドを
レンダリングします

00:23:56.437 --> 00:23:58.906 align:start position:34% line:-2
大半の形式は
サポートされており

00:23:59.106 --> 00:24:05.045 align:start position:25% line:-2
キャプチャタイムや
マット情報などを抽出できます

00:23:59.106 --> 00:24:05.045 align:start position:25% line:-2
キャプチャタイムや
マット情報などを抽出できます

00:24:05.512 --> 00:24:09.049 align:start position:27% line:-2
200以上の内蔵フィルタも
あります

00:24:09.783 --> 00:24:15.222 align:start position:25% line:-2
全てのレンダリングで
32ビットフロートを使えます

00:24:16.857 --> 00:24:20.494 align:start position:29% line:-2
sRGBカラースペースで
全てを行えます

00:24:21.528 --> 00:24:24.898 align:start position:23% line:-2
バウンダリーコンディションには
固定やトリミングで対応

00:24:24.998 --> 00:24:31.939 align:start position:29% line:-2
つまり畳み込みや作成の際
画像が無限にリピートされ

00:24:32.105 --> 00:24:36.577 align:start position:23% line:-2
フィルタによって画像は
入力サイズにトリミングされます

00:24:36.977 --> 00:24:40.714 align:start position:25% line:-2
これも一度でオーバーライドが
可能な設定です

00:24:42.249 --> 00:24:47.721 align:start position:29% line:-2
ピクセルバッファの画像が
取得可能になるように―

00:24:49.590 --> 00:24:53.260 align:start position:23% line:-1
無限のイメージが有限となります

00:24:54.027 --> 00:24:58.832 align:start position:32% line:-2
これらをデモで実際に
見ていただく前に

00:24:58.932 --> 00:25:02.536 align:start position:25% line:-1
手短にお話ししたいと思います

00:24:58.932 --> 00:25:02.536 align:start position:25% line:-1
手短にお話ししたいと思います

00:25:02.636 --> 00:25:04.404 align:start position:30% line:-1
APIを見てみましょう

00:25:04.838 --> 00:25:09.343 align:start position:14% line:-2
cimgクラスをPyCoreImageの
パッケージからインポートします

00:25:10.110 --> 00:25:13.480 align:start position:25% line:-1
画像をロードするのに使います

00:25:14.147 --> 00:25:18.819 align:start position:16% line:-2
Swift対応では
コンテンツ用にCIImageを使えます

00:25:20.821 --> 00:25:25.125 align:start position:29% line:-2
ポートレートマット情報や
ポートレート深度を

00:25:25.225 --> 00:25:28.862 align:start position:27% line:-1
ファイルからロードできます

00:25:31.265 --> 00:25:37.271 align:start position:23% line:-2
CIImageコンストラクタで
NumPyバッファをまとめるか

00:25:37.371 --> 00:25:41.108 align:start position:20% line:-2
CIImageでレンダラを呼び出し
NumPyを解釈します

00:25:43.443 --> 00:25:48.115 align:start position:9% line:-2
Swiftの場合
CIRenderDestinationを作成し

00:25:48.515 --> 00:25:50.984 align:start position:25% line:-1
過去のバッファを割り当てます

00:25:51.752 --> 00:25:58.525 align:start position:9% line:-2
CIContextとqTestのレンダリングの
インスタンスを作成します

00:25:59.660 --> 00:26:01.828 align:start position:34% line:-1
これで全て完了です

00:25:59.660 --> 00:26:01.828 align:start position:34% line:-1
これで全て完了です

00:26:02.830 --> 00:26:07.468 align:start position:30% line:-2
色彩やジェネレータから
作成した画像の

00:26:07.701 --> 00:26:09.670 align:start position:30% line:-1
残像のサポートもします

00:26:11.772 --> 00:26:13.574 align:start position:27% line:-1
次はフィルタの適用方法です

00:26:15.008 --> 00:26:18.212 align:start position:25% line:-2
CIImageインスタンスで
フィルタ名を呼び出し

00:26:18.312 --> 00:26:22.549 align:start position:21% line:-1
入力プライマリのリストを送ります

00:26:22.883 --> 00:26:27.955 align:start position:12% line:-2
各CIImageインスタンスは200以上の
ラムダ式で拡張されており

00:26:28.055 --> 00:26:31.291 align:start position:21% line:-2
Core Imageのフィルタに
直接マップします

00:26:31.859 --> 00:26:35.929 align:start position:32% line:-2
Swiftの場合
これがシンタックスで

00:26:36.029 --> 00:26:41.835 align:start position:23% line:-2
フィルタを適用して
フィルタ名と入力引数を送ります

00:26:43.604 --> 00:26:47.775 align:start position:29% line:-2
applyKernelで
カーネルを適用できます

00:26:47.875 --> 00:26:50.911 align:start position:21% line:-1
カーネルコードと そのカーネルの

00:26:51.278 --> 00:26:56.183 align:start position:21% line:-1
入力パラメータのリストを送ります

00:26:57.417 --> 00:27:00.354 align:start position:21% line:-1
カーネルを適用する度合いを特定し

00:26:57.417 --> 00:27:00.354 align:start position:21% line:-1
カーネルを適用する度合いを特定し

00:27:00.454 --> 00:27:05.092 align:start position:29% line:-2
バッファでサンプリングの
領域を特定します

00:27:07.227 --> 00:27:10.797 align:start position:14% line:-1
PyCoreImageには合成に使える―

00:27:10.898 --> 00:27:14.101 align:start position:30% line:-2
便利なAPIの
セレクションがあります

00:27:14.334 --> 00:27:21.208 align:start position:23% line:-2
他にも移動 スケーリング
回転 トリミングなどができます

00:27:23.410 --> 00:27:28.248 align:start position:30% line:-2
GPUカーネルについて
もう少しお話しします

00:27:28.348 --> 00:27:31.552 align:start position:32% line:-2
プロトタイピングには
とても役に立ちます

00:27:31.685 --> 00:27:36.457 align:start position:25% line:-2
GPUフラグメントシェーダの
コードを含む文字列があります

00:27:36.557 --> 00:27:42.229 align:start position:21% line:-2
効果をリアルタイムで
プロトタイプする方法を紹介します

00:27:43.597 --> 00:27:48.202 align:start position:25% line:-2
５つのタップのラプラシアンを
シャープ加工で使います

00:27:48.302 --> 00:27:51.572 align:start position:32% line:-1
５つのサンプルを作り

00:27:51.805 --> 00:27:55.342 align:start position:25% line:-1
局所微分の計算のため合体させ

00:27:55.442 --> 00:27:58.178 align:start position:27% line:-1
中心ピクセルに組み込みます

00:27:58.812 --> 00:28:01.615 align:start position:27% line:-1
呼び出し方に焦点を当てます

00:27:58.812 --> 00:28:01.615 align:start position:27% line:-1
呼び出し方に焦点を当てます

00:28:02.115 --> 00:28:05.886 align:start position:18% line:-2
cimgインスタンスで
applyKernelを呼び出します

00:28:06.487 --> 00:28:09.223 align:start position:34% line:-2
次のソースコードは
トリプルコードの

00:28:09.323 --> 00:28:11.291 align:start position:25% line:-1
Python文字列を使います

00:28:12.493 --> 00:28:15.495 align:start position:34% line:-2
カーネルを適用する
度合いを決めます

00:28:17.197 --> 00:28:21.301 align:start position:27% line:-2
サンプリングの表現に沿って
領域を定義します

00:28:21.735 --> 00:28:26.707 align:start position:23% line:-2
デスティネーションのドメインの
コンセプトや領域については

00:28:26.874 --> 00:28:31.812 align:start position:21% line:-2
オンライン資料と過去の
WWDCセッションをご覧ください

00:28:32.045 --> 00:28:34.281 align:start position:29% line:-2
ここに畳み込みカーネルが
ありますが

00:28:34.381 --> 00:28:36.984 align:start position:25% line:-1
１つのピクセルを読み込みます

00:28:37.451 --> 00:28:41.822 align:start position:20% line:-2
Core Imageがバウンダリー
コンディションをハンドルします

00:28:43.023 --> 00:28:48.295 align:start position:23% line:-2
たくさん話しましたが
APIを見ること自体は簡潔です

00:28:48.395 --> 00:28:52.032 align:start position:23% line:-1
デモで実際の操作をご覧ください

00:28:54.268 --> 00:28:58.505 align:start position:43% line:-1
(拍手)

00:29:01.775 --> 00:29:04.978 align:start position:12% line:-1
Jupyter Notebookを使います

00:29:05.078 --> 00:29:09.016 align:start position:23% line:-2
ブラウザベースでリアルタイムに
Pythonを変換できます

00:29:09.349 --> 00:29:14.621 align:start position:25% line:-2
Core Imageを使って
リアルタイムのレンダリングを

00:29:14.721 --> 00:29:17.257 align:start position:34% line:-1
今この場で行います

00:29:18.325 --> 00:29:23.597 align:start position:27% line:-2
まずユーティリティクラスを
インポートします

00:29:23.764 --> 00:29:27.334 align:start position:12% line:-2
PyCoreImageのパッケージにとって
cimgクラスで最も重要です

00:29:27.968 --> 00:29:32.539 align:start position:30% line:-2
画像を視覚化するために
コード設定を行います

00:29:32.840 --> 00:29:33.841 align:start position:43% line:-1
始めます

00:29:35.309 --> 00:29:38.178 align:start position:30% line:-1
画像をロードしましょう

00:29:38.479 --> 00:29:41.615 align:start position:27% line:-1
私のオブジェクトのタイプは

00:29:42.449 --> 00:29:45.886 align:start position:18% line:-1
PyCoreImage cimgです

00:29:46.053 --> 00:29:50.891 align:start position:14% line:-2
適切なCore Imageオブジェクトで
バックアップされています

00:29:51.525 --> 00:29:53.727 align:start position:29% line:-1
画像をレンダリングします

00:29:53.827 --> 00:29:59.666 align:start position:29% line:-2
マットを使った
実際のピクセルの画像です

00:30:00.100 --> 00:30:01.535 align:start position:39% line:-1
この画像に―

00:30:02.369 --> 00:30:05.305 align:start position:32% line:-1
フィルタを適用します

00:30:05.405 --> 00:30:09.977 align:start position:20% line:-2
Core Imageは200以上の
フィルタをサポートしています

00:30:13.046 --> 00:30:15.883 align:start position:20% line:-1
GaussianBlurを使います

00:30:15.983 --> 00:30:21.221 align:start position:18% line:-2
サポート確認のため cimgクラスで
インプットを呼び出すと

00:30:21.522 --> 00:30:26.760 align:start position:23% line:-2
入力画像を
サポートしているのが分かります

00:30:27.261 --> 00:30:29.029 align:start position:36% line:-1
やってみましょう

00:30:29.730 --> 00:30:30.998 align:start position:34% line:-1
画像を取り出します

00:30:31.331 --> 00:30:34.902 align:start position:20% line:-2
GaussianBlurフィルタを
100ピクセルで適用し

00:30:35.135 --> 00:30:37.004 align:start position:36% line:-1
適用前と並べます

00:30:38.605 --> 00:30:39.540 align:start position:43% line:-1
非常に―

00:30:40.807 --> 00:30:41.875 align:start position:41% line:-1
簡単ですね

00:30:42.009 --> 00:30:44.178 align:start position:34% line:-1
では 進めましょう

00:30:44.511 --> 00:30:48.015 align:start position:21% line:-2
Core Imageで
プロシージャルイメージも作れます

00:30:48.115 --> 00:30:50.617 align:start position:25% line:-1
ジェネレータを見てみましょう

00:30:51.485 --> 00:30:55.823 align:start position:23% line:-1
ジェネレータの名称を特定します

00:30:56.256 --> 00:30:57.891 align:start position:29% line:-1
ここではCIQRコードを

00:30:58.258 --> 00:31:01.828 align:start position:32% line:-2
メッセージで送り
エンコードを試みます

00:30:58.258 --> 00:31:01.828 align:start position:32% line:-2
メッセージで送り
エンコードを試みます

00:31:02.296 --> 00:31:06.166 align:start position:29% line:-2
リアルタイムでは
メッセージを変更できます

00:31:06.266 --> 00:31:09.736 align:start position:32% line:-2
QRコードへの影響を
見てみましょう

00:31:11.572 --> 00:31:16.310 align:start position:25% line:-2
Core Imageは画像を
標識化するサポートもします

00:31:16.777 --> 00:31:18.345 align:start position:39% line:-1
これが例です

00:31:18.745 --> 00:31:22.082 align:start position:18% line:-2
San Franciscoフォントを
使っています

00:31:23.050 --> 00:31:24.718 align:start position:38% line:-1
進めていきます

00:31:25.419 --> 00:31:29.256 align:start position:29% line:-2
NumPyで相互運用性を
サポートしています

00:31:29.356 --> 00:31:31.258 align:start position:36% line:-1
やってみましょう

00:31:32.192 --> 00:31:37.798 align:start position:27% line:-2
元の画像から始めて
ボルテックス変形を行います

00:31:39.266 --> 00:31:42.035 align:start position:29% line:-1
次にバッファが取得する―

00:31:44.238 --> 00:31:47.608 align:start position:18% line:-1
NumPyエリアをレンダリングします

00:31:47.775 --> 00:31:52.446 align:start position:25% line:-2
タイプと形と深度 ある程度の
統計も確認できます

00:31:52.546 --> 00:31:56.083 align:start position:36% line:-2
最小値 中央値
最大値もあります

00:31:58.685 --> 00:32:02.189 align:start position:16% line:-2
NumPyからCore Imageにも
いけます

00:31:58.685 --> 00:32:02.189 align:start position:16% line:-2
NumPyからCore Imageにも
いけます

00:32:02.890 --> 00:32:06.026 align:start position:29% line:-2
まずはNumPy配列から
始めます

00:32:06.126 --> 00:32:11.965 align:start position:32% line:-2
75％の値が黒の
ランダムバッファです

00:32:13.567 --> 00:32:17.604 align:start position:27% line:-2
cimgコンストラクタに
NumPy配列をまとめると

00:32:17.738 --> 00:32:22.609 align:start position:23% line:-2
cimgクラスのインスタンスと
CIImageが見えます

00:32:24.678 --> 00:32:28.081 align:start position:32% line:-2
さまざまなフィルタを
これに適用できます

00:32:28.182 --> 00:32:33.720 align:start position:30% line:-2
ここでは ぼかしと
光トンネルを適用します

00:32:34.154 --> 00:32:39.126 align:start position:30% line:-2
コントラストの変更と
露出調整とガンマ補正も

00:32:39.827 --> 00:32:42.162 align:start position:36% line:-1
横に並べましょう

00:32:42.863 --> 00:32:46.366 align:start position:32% line:-2
ぼかし 光トンネル
露出調整 ガンマ補正

00:32:46.500 --> 00:32:47.801 align:start position:34% line:-1
これが最終結果です

00:32:48.368 --> 00:32:50.370 align:start position:30% line:-1
楽しく簡単にできました

00:32:52.439 --> 00:32:55.709 align:start position:25% line:-1
今度は別の画像で作業をします

00:32:56.376 --> 00:33:00.747 align:start position:29% line:-2
次のデモでお見せするのは
結合です

00:32:56.376 --> 00:33:00.747 align:start position:29% line:-2
次のデモでお見せするのは
結合です

00:33:01.048 --> 00:33:05.018 align:start position:27% line:-2
Pythonの画像分割を
使っている方もいるでしょう

00:33:05.119 --> 00:33:09.189 align:start position:30% line:-2
ここでは
水平分割した画像にのみ

00:33:09.289 --> 00:33:11.892 align:start position:32% line:-1
フィルタを適用します

00:33:12.459 --> 00:33:14.728 align:start position:29% line:-1
まずはコードを見ましょう

00:33:15.129 --> 00:33:17.264 align:start position:34% line:-1
これが結合機能です

00:33:17.498 --> 00:33:23.504 align:start position:23% line:-2
一番下に２つの構成要素で
レンダリングした様子が見えます

00:33:23.604 --> 00:33:25.906 align:start position:23% line:-1
右側にCIImageがあります

00:33:26.440 --> 00:33:31.912 align:start position:14% line:-2
Core Imageをこの一群の中でのみ
レンダリングしました

00:33:32.012 --> 00:33:35.649 align:start position:29% line:-1
ですから効率がいいのです

00:33:37.484 --> 00:33:42.523 align:start position:29% line:-2
画像を５つに分割し
最終結果を見てみましょう

00:33:45.092 --> 00:33:48.762 align:start position:27% line:-1
ここに書かれているラベルは

00:33:48.962 --> 00:33:51.498 align:start position:34% line:-2
適用したフィルタと
一致しています

00:33:51.899 --> 00:33:54.068 align:start position:29% line:-2
PyCoreImageは
本当にシンプルです

00:33:54.468 --> 00:33:58.739 align:start position:32% line:-2
性能について
手短に説明しましょう

00:33:58.839 --> 00:34:03.544 align:start position:25% line:-2
CIImageインスタンスで
レンダリングを呼び出すたび

00:33:58.839 --> 00:34:03.544 align:start position:25% line:-2
CIImageインスタンスで
レンダリングを呼び出すたび

00:34:03.644 --> 00:34:06.813 align:start position:30% line:-2
NumPyがベイクされ
格納されます

00:34:07.047 --> 00:34:11.451 align:start position:14% line:-2
例えばGaussianBlurを適用した
画像を作成します

00:34:11.552 --> 00:34:15.188 align:start position:25% line:-2
最初の呼び出しに56ミリ秒
２回目は２ミリ秒かかりました

00:34:15.956 --> 00:34:18.692 align:start position:36% line:-2
大きな畳み込みも
見てみましょう

00:34:18.792 --> 00:34:20.793 align:start position:18% line:-1
Core Imageはスピードが速く

00:34:20.928 --> 00:34:24.398 align:start position:36% line:-2
大きな畳み込みを
簡単にこなします

00:34:24.498 --> 00:34:31.972 align:start position:16% line:-2
ここではCIGaussianBlurを
200のシグマで適用

00:34:32.072 --> 00:34:33.139 align:start position:34% line:-1
かなりの大きさです

00:34:33.239 --> 00:34:36.810 align:start position:30% line:-1
画像をお見せしましょう

00:34:36.909 --> 00:34:40.347 align:start position:21% line:-2
scikit-imageを使って
同じ作業をすると

00:34:40.447 --> 00:34:42.783 align:start position:32% line:-1
約16秒かかりました

00:34:42.882 --> 00:34:47.087 align:start position:16% line:-2
同じことをCore Imageで行うと
130ミリ秒です

00:34:47.187 --> 00:34:49.822 align:start position:36% line:-1
かなり速いですね

00:34:50.023 --> 00:34:50.824 align:start position:45% line:-1
どうも

00:34:50.924 --> 00:34:52.458 align:start position:43% line:-1
(拍手)

00:34:52.559 --> 00:34:53.327 align:start position:43% line:-1
続けます

00:34:53.427 --> 00:34:56.597 align:start position:29% line:-2
PyCoreImageは
カスタムGPカーネルを

00:34:56.697 --> 00:35:01.268 align:start position:25% line:-2
インラインで作成して
複数の処理をまとめて行います

00:34:56.697 --> 00:35:01.268 align:start position:25% line:-2
インラインで作成して
複数の処理をまとめて行います

00:35:01.368 --> 00:35:03.136 align:start position:38% line:-1
修正も同様です

00:35:03.237 --> 00:35:04.638 align:start position:36% line:-1
お見せしましょう

00:35:08.775 --> 00:35:09.443 align:start position:45% line:-1
さて―

00:35:10.510 --> 00:35:13.247 align:start position:23% line:-1
まずは色彩カーネルの使い方です

00:35:13.347 --> 00:35:17.718 align:start position:23% line:-2
色彩カーネルは１つのピクセルを
取り入れて排出し

00:35:17.818 --> 00:35:21.088 align:start position:27% line:-1
他のサンプルは作成しません

00:35:21.421 --> 00:35:23.590 align:start position:30% line:-1
入力画像とカーネルです

00:35:23.690 --> 00:35:27.761 align:start position:23% line:-1
ここで取得した色をオフにします

00:35:28.195 --> 00:35:34.635 align:start position:25% line:-2
赤と青のチャネルを
青と赤のチャネルと入れ替えて

00:35:34.735 --> 00:35:36.169 align:start position:39% line:-1
反転させます

00:35:36.670 --> 00:35:41.775 align:start position:25% line:-2
画期的な効果とは言えませんが
ご覧ください

00:35:42.542 --> 00:35:47.014 align:start position:25% line:-2
赤のチャネルを
青のチャネルでレベルを変えて

00:35:47.347 --> 00:35:51.251 align:start position:30% line:-1
レベルを少しいじります

00:35:51.351 --> 00:35:56.123 align:start position:29% line:-2
0.25から
かなり高い値まで上げると

00:35:56.356 --> 00:35:58.392 align:start position:30% line:-1
面白い効果が得られます

00:35:59.026 --> 00:36:03.330 align:start position:34% line:-2
リアルタイムで
非常にパワフルです

00:35:59.026 --> 00:36:03.330 align:start position:34% line:-2
リアルタイムで
非常にパワフルです

00:36:03.430 --> 00:36:06.533 align:start position:30% line:-1
望んだ効果を得られます

00:36:08.302 --> 00:36:11.638 align:start position:23% line:-1
続いて 更に複雑なカーネルです

00:36:11.739 --> 00:36:15.542 align:start position:29% line:-2
先にお見せしたカーネルに
少し似ています

00:36:15.642 --> 00:36:18.779 align:start position:36% line:-2
各ピクセル付近で
タップをします

00:36:19.413 --> 00:36:22.950 align:start position:25% line:-1
ファイルから画像を起動すると

00:36:23.050 --> 00:36:25.152 align:start position:29% line:-1
カーネルコードがあります

00:36:25.252 --> 00:36:29.890 align:start position:29% line:-2
エッジ以外をぼかす
バイラテラルフィルタです

00:36:30.891 --> 00:36:35.396 align:start position:32% line:-2
パラメータで
カーネルを適用します

00:36:36.864 --> 00:36:37.664 align:start position:43% line:-1
非常に―

00:36:38.665 --> 00:36:42.169 align:start position:30% line:-1
優れた効果が得られます

00:36:42.269 --> 00:36:48.142 align:start position:21% line:-2
ここで行ったのは
非冗長の高周波成分の切り取りです

00:36:48.242 --> 00:36:51.812 align:start position:29% line:-1
更に よく見てみましょう

00:36:53.180 --> 00:36:54.948 align:start position:32% line:-1
この花をご覧ください

00:36:55.048 --> 00:37:00.087 align:start position:29% line:-2
エッジは残っていますが
高周波成分が消えています

00:36:55.048 --> 00:37:00.087 align:start position:29% line:-2
エッジは残っていますが
高周波成分が消えています

00:37:00.654 --> 00:37:03.991 align:start position:29% line:-2
このフィルタは
さまざまな目的で使えます

00:37:04.091 --> 00:37:06.560 align:start position:27% line:-1
ここでは鮮明化に使いました

00:37:06.927 --> 00:37:11.098 align:start position:36% line:-2
左側の画像を元に
右側の画像を減じ

00:37:11.198 --> 00:37:15.669 align:start position:30% line:-2
高周波のマップか
画像の詳細を取得します

00:37:15.836 --> 00:37:17.037 align:start position:39% line:-1
やってみます

00:37:17.905 --> 00:37:21.542 align:start position:27% line:-2
これは画像のレンダリングで
NumPyバッファです

00:37:21.642 --> 00:37:26.380 align:start position:29% line:-2
フィルタを適用した画像を
レンダリングして

00:37:26.747 --> 00:37:31.285 align:start position:25% line:-2
NumPyからのオペレータ
オーバーロードで差し引きます

00:37:31.685 --> 00:37:33.320 align:start position:34% line:-1
レイヤーの詳細です

00:37:34.922 --> 00:37:39.827 align:start position:34% line:-2
左は画像全体の詳細
右は中央の部分です

00:37:40.694 --> 00:37:45.132 align:start position:32% line:-2
これを元の画像の上に
追加します

00:37:45.866 --> 00:37:52.072 align:start position:29% line:-2
この追加を二度行うことで
鮮明になります

00:37:52.906 --> 00:37:54.074 align:start position:38% line:-1
シンプルですね

00:37:54.408 --> 00:37:57.711 align:start position:34% line:-2
フィルタカーネルの
文字列に戻って

00:37:58.045 --> 00:38:01.281 align:start position:25% line:-1
リアルタイムで変更を行えます

00:37:58.045 --> 00:38:01.281 align:start position:25% line:-1
リアルタイムで変更を行えます

00:38:03.217 --> 00:38:07.387 align:start position:29% line:-2
次は画像からメタデータを
ロードする方法です

00:38:07.754 --> 00:38:13.160 align:start position:23% line:-2
ポートレート効果を施した画像と
深度データがあります

00:38:14.061 --> 00:38:16.029 align:start position:32% line:-1
画像を横に並べました

00:38:16.296 --> 00:38:20.000 align:start position:32% line:-2
左側の画像はRGBで
中央が深度データ

00:38:20.100 --> 00:38:24.938 align:start position:25% line:-2
右側は高品質の
ポートレート効果のマットです

00:38:25.973 --> 00:38:30.444 align:start position:30% line:-2
cimgインスタンスと
プロパティの呼び出しで

00:38:30.544 --> 00:38:34.314 align:start position:23% line:-2
CIImageから既存のタグを
見ることができます

00:38:34.882 --> 00:38:38.185 align:start position:29% line:-2
キャプチャに関する情報を
取得できます

00:38:39.920 --> 00:38:42.356 align:start position:34% line:-2
ポートレート効果の
マットについては

00:38:42.456 --> 00:38:46.160 align:start position:25% line:-1
セッション503で紹介します

00:38:46.326 --> 00:38:49.997 align:start position:29% line:-2
ここでは
このフィルタを選択します

00:38:50.097 --> 00:38:56.069 align:start position:25% line:-2
工程について興味があれば
そのセッションをお勧めします

00:38:57.104 --> 00:38:58.105 align:start position:36% line:-1
非常に楽しめます

00:38:59.707 --> 00:39:00.440 align:start position:43% line:-1
(拍手)

00:38:59.707 --> 00:39:00.440 align:start position:43% line:-1
(拍手)

00:39:00.541 --> 00:39:01.408 align:start position:41% line:-1
ありがとう

00:39:01.508 --> 00:39:04.678 align:start position:43% line:-1
(拍手)

00:39:05.879 --> 00:39:08.482 align:start position:27% line:-2
では プレゼンテーションに
戻ります

00:39:08.582 --> 00:39:11.218 align:start position:30% line:-1
少しギアチェンジをして

00:39:11.318 --> 00:39:16.490 align:start position:27% line:-2
Core Imageと
Core MLを合わせます

00:39:23.330 --> 00:39:29.636 align:start position:23% line:-2
ポートレートマットと
ポートレート深度情報については

00:39:29.737 --> 00:39:33.607 align:start position:30% line:-2
写真とビデオ効果の
セッションがお勧めです

00:39:35.042 --> 00:39:37.744 align:start position:16% line:-2
Core ImageとCore MLを
合わせましょう

00:39:38.812 --> 00:39:45.419 align:start position:16% line:-2
CI Core MLモデルのフィルタを
紹介できて光栄です

00:39:45.719 --> 00:39:49.256 align:start position:25% line:-1
２つの入力だけで使用できます

00:39:49.923 --> 00:39:53.594 align:start position:29% line:-2
１つ目はフィルタを用いた
画像自体です

00:39:54.294 --> 00:39:55.929 align:start position:23% line:-1
Core MLモデルを入出力し

00:39:58.432 --> 00:40:01.635 align:start position:29% line:-2
ニューラルネットワークで
稼働します

00:39:58.432 --> 00:40:01.635 align:start position:29% line:-2
ニューラルネットワークで
稼働します

00:40:01.735 --> 00:40:04.271 align:start position:25% line:-1
本当にシンプルでパワフルです

00:40:04.438 --> 00:40:07.841 align:start position:27% line:-1
Swiftを見てみましょう

00:40:09.109 --> 00:40:12.980 align:start position:36% line:-2
フィルタの適用を
呼び出すだけです

00:40:13.380 --> 00:40:18.318 align:start position:36% line:-2
今年 発表した
新しいフィルタで

00:40:18.418 --> 00:40:19.753 align:start position:34% line:-1
とてもシンプルです

00:40:19.987 --> 00:40:24.491 align:start position:25% line:-2
他の手法については
別のセッションをお勧めします

00:40:24.591 --> 00:40:30.864 align:start position:5% line:-2
“A Guide to Turi Create”と
“Vision with Core ML”です

00:40:32.966 --> 00:40:38.639 align:start position:27% line:-2
機械学習のトレーニング用
データベースで共通の仕様は

00:40:38.739 --> 00:40:39.873 align:start position:38% line:-1
データ拡張です

00:40:40.474 --> 00:40:46.013 align:start position:29% line:-2
ニューラルネットワークを
増大することができます

00:40:46.113 --> 00:40:50.083 align:start position:34% line:-2
オブジェクト分類で
画像が橋なのかや

00:40:50.217 --> 00:40:54.555 align:start position:29% line:-1
海があるのかを見極めます

00:40:56.857 --> 00:41:01.228 align:start position:30% line:-2
元のトレンドの
データセットが拡張して

00:40:56.857 --> 00:41:01.228 align:start position:30% line:-2
元のトレンドの
データセットが拡張して

00:41:01.328 --> 00:41:07.067 align:start position:27% line:-2
新しい画像を集める必要なく
数を増やせます

00:41:07.301 --> 00:41:08.869 align:start position:38% line:-1
これは無料です

00:41:09.403 --> 00:41:12.873 align:start position:27% line:-1
外見を変えることもできます

00:41:12.973 --> 00:41:16.410 align:start position:21% line:-1
例えば色温度や白色点を調整したり

00:41:17.077 --> 00:41:20.247 align:start position:27% line:-2
ノイズを追加し
光のプロパティを変更したり

00:41:21.448 --> 00:41:24.084 align:start position:29% line:-1
形状を変えたりもできます

00:41:24.952 --> 00:41:28.422 align:start position:25% line:-2
どれもCore Imageで
簡単に行えます

00:41:28.855 --> 00:41:33.460 align:start position:34% line:-2
データ拡張の方法を
見ていきましょう

00:41:34.628 --> 00:41:36.597 align:start position:32% line:-1
左側に画像があります

00:41:37.764 --> 00:41:41.101 align:start position:12% line:-2
CITemperatureAndTintで
色温度と色合いを変え

00:41:41.668 --> 00:41:48.175 align:start position:14% line:-2
CIColorControlsで明るさと
コントラストと彩度を調整し

00:41:48.909 --> 00:41:53.280 align:start position:7% line:-2
CIDitherとCIGaussianBlurで
周波数スペクトルを変更

00:41:54.615 --> 00:41:57.985 align:start position:21% line:-2
AffineTransformで
形を変えました

00:41:59.186 --> 00:42:00.754 align:start position:39% line:-1
ご覧ください

00:41:59.186 --> 00:42:00.754 align:start position:39% line:-1
ご覧ください

00:42:09.029 --> 00:42:13.300 align:start position:20% line:-2
Jupyter Notebookで
さっきと同様の設定です

00:42:13.467 --> 00:42:16.703 align:start position:25% line:-2
Core Imageを使った
拡張から始めます

00:42:17.004 --> 00:42:21.675 align:start position:32% line:-2
画像をロードし
拡張機能を定義します

00:42:21.775 --> 00:42:24.812 align:start position:32% line:-1
定義した各フィルタに

00:42:24.912 --> 00:42:26.947 align:start position:32% line:-2
ランダムスペースから
サンプリング

00:42:27.081 --> 00:42:31.084 align:start position:16% line:-2
適用するのはGaussianBlurと
スケーリングと回転

00:42:31.185 --> 00:42:36.123 align:start position:32% line:-2
色相･露出･彩度調整
そしてディザリング

00:42:37.724 --> 00:42:39.827 align:start position:34% line:-1
この機能を格納して

00:42:40.460 --> 00:42:45.032 align:start position:27% line:-1
どうなるかを見てみましょう

00:42:46.467 --> 00:42:50.470 align:start position:29% line:-2
このスライダーがシードを
コントロールしています

00:42:52.606 --> 00:42:53.607 align:start position:41% line:-1
いいですね

00:42:53.807 --> 00:42:58.779 align:start position:30% line:-2
200のフィルタが
リアルタイムで処理され

00:42:58.912 --> 00:43:03.116 align:start position:25% line:-1
実際にディスクに保存されます

00:42:58.912 --> 00:43:03.116 align:start position:25% line:-1
実際にディスクに保存されます

00:43:03.217 --> 00:43:04.251 align:start position:39% line:-1
続けましょう

00:43:04.585 --> 00:43:06.487 align:start position:38% line:-1
速さに注目です

00:43:10.324 --> 00:43:11.558 align:start position:38% line:-1
パワフルですね

00:43:15.095 --> 00:43:15.996 align:start position:45% line:-1
さて―

00:43:16.763 --> 00:43:21.101 align:start position:25% line:-2
次はCore Imageで
Core MLを使う方法です

00:43:21.869 --> 00:43:26.340 align:start position:25% line:-2
まずはCore MLモデルを
ロードします

00:43:27.341 --> 00:43:31.912 align:start position:27% line:-2
ガラスのモデルで
興味深い効果を生み出します

00:43:32.012 --> 00:43:35.582 align:start position:29% line:-1
前にも登場した元の画像に

00:43:36.850 --> 00:43:39.653 align:start position:32% line:-1
質感を加えていきます

00:43:40.754 --> 00:43:43.156 align:start position:29% line:-1
マルチバンドのノイズと―

00:43:45.359 --> 00:43:48.795 align:start position:36% line:-1
ぼかしを加えます

00:43:50.664 --> 00:43:53.267 align:start position:27% line:-1
他の学習済みモデルと同様に

00:43:53.367 --> 00:43:57.871 align:start position:29% line:-2
ニューラルネットワークに
フィードさせる画像です

00:43:59.106 --> 00:44:01.074 align:start position:36% line:-1
やってみましょう

00:43:59.106 --> 00:44:01.074 align:start position:36% line:-1
やってみましょう

00:44:09.650 --> 00:44:12.820 align:start position:29% line:-1
皆さんのために作りました

00:44:13.687 --> 00:44:19.326 align:start position:30% line:-2
本日はお越しいただき
ありがとうございました

00:44:19.660 --> 00:44:23.530 align:start position:25% line:-1
楽しんでいただけたでしょうか

00:44:23.730 --> 00:44:29.169 align:start position:18% line:-2
明日午後３時のCore Imageの
技術ラボにも参加してください

00:44:30.070 --> 00:44:31.805 align:start position:30% line:-1
ありがとうございました

00:44:31.905 --> 00:44:37.277 align:start position:43% line:-1
(拍手)
