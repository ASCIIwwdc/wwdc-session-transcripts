WEBVTT

00:00:07.074 --> 00:00:16.550 align:start position:43% line:-1
(音楽)

00:00:23.123 --> 00:00:28.228 align:start position:43% line:-1
(拍手)

00:00:28.328 --> 00:00:29.630 align:start position:34% line:-1
おはようございます

00:00:29.963 --> 00:00:33.033 align:start position:27% line:-1
お集まりいただき感謝します

00:00:33.167 --> 00:00:35.869 align:start position:16% line:-1
Foundationチームのイタイです

00:00:36.570 --> 00:00:41.041 align:start position:29% line:-2
アプリケーションを流れる
データが及ぼす影響と

00:00:41.308 --> 00:00:45.212 align:start position:27% line:-2
信頼できるデータで
顧客を守る方法を説明します

00:00:45.846 --> 00:00:47.014 align:start position:39% line:-1
始めましょう

00:00:48.482 --> 00:00:52.519 align:start position:21% line:-1
アプリケーションを便利にするのは

00:00:52.619 --> 00:00:57.791 align:start position:21% line:-2
ディスク ネットワーク 顧客など
外部ソースです

00:00:57.925 --> 00:01:01.962 align:start position:21% line:-1
データを活用してサービスにします

00:00:57.925 --> 00:01:01.962 align:start position:21% line:-1
データを活用してサービスにします

00:01:02.796 --> 00:01:07.968 align:start position:27% line:-2
データは既知の形式でないと
使用できません

00:01:08.669 --> 00:01:10.404 align:start position:34% line:-1
形式が違う場合は？

00:01:11.805 --> 00:01:16.643 align:start position:30% line:-2
通常は破損や無効として
データは無視されます

00:01:17.477 --> 00:01:22.416 align:start position:27% line:-2
しかし アプリケーションに
影響する時があり

00:01:22.516 --> 00:01:26.253 align:start position:32% line:-2
誤作動やクラッシュの
原因となります

00:01:27.921 --> 00:01:33.093 align:start position:32% line:-2
顧客はアップデートを
待つしかありません

00:01:33.760 --> 00:01:38.498 align:start position:30% line:-2
起動時にクラッシュして
使用できないと最悪です

00:01:38.599 --> 00:01:42.836 align:start position:32% line:-2
復旧を待つ間に
評価は落ちていきます

00:01:43.070 --> 00:01:44.872 align:start position:39% line:-1
嫌な経験です

00:01:46.340 --> 00:01:49.877 align:start position:23% line:-2
フレームワーク開発者にとっては
深刻な問題です

00:01:49.977 --> 00:01:54.515 align:start position:27% line:-2
多数のアプリケーションに
影響する場合があるためです

00:01:56.650 --> 00:01:58.752 align:start position:36% line:-1
今日の主な内容は

00:01:59.119 --> 00:02:03.056 align:start position:23% line:-1
信頼できるデータの構築方法です

00:01:59.119 --> 00:02:03.056 align:start position:23% line:-1
信頼できるデータの構築方法です

00:02:03.156 --> 00:02:04.858 align:start position:41% line:-1
要点は２つ

00:02:05.692 --> 00:02:09.863 align:start position:25% line:-2
１つ目は データが
使用前に変更されていないこと

00:02:10.430 --> 00:02:15.469 align:start position:23% line:-2
２つ目は データが
望んだ形式や構造であることです

00:02:17.271 --> 00:02:21.642 align:start position:21% line:-1
データのライフサイクルを見ながら

00:02:21.742 --> 00:02:25.612 align:start position:29% line:-2
各段階で検証すべきことを
説明しましょう

00:02:26.613 --> 00:02:32.452 align:start position:12% line:-2
NSSecureCodingプロトコルでの
検証方法に触れ

00:02:32.953 --> 00:02:36.123 align:start position:20% line:-1
同じ概念をCodableで使います

00:02:37.024 --> 00:02:38.192 align:start position:43% line:-1
始めます

00:02:40.260 --> 00:02:46.200 align:start position:27% line:-2
データの説明のために
メンタルモデルを構築します

00:02:47.835 --> 00:02:53.173 align:start position:30% line:-2
最も基本的なデータは
バイトのストリームです

00:02:54.241 --> 00:02:59.847 align:start position:27% line:-2
よく見ないと分かりませんが
これがRAWデータです

00:03:01.548 --> 00:03:07.187 align:start position:23% line:-2
作業を進めるにあたり
既知の形式や構造に準拠させます

00:03:07.354 --> 00:03:12.259 align:start position:27% line:-2
今回はコードポイントが
UTF-8に対応しています

00:03:12.359 --> 00:03:15.229 align:start position:32% line:-1
読みやすくしましょう

00:03:15.329 --> 00:03:16.930 align:start position:34% line:-1
JSONのようです

00:03:17.664 --> 00:03:23.604 align:start position:21% line:-2
このようなデータを
フォーマット済みデータといいます

00:03:24.872 --> 00:03:29.877 align:start position:25% line:-2
このデータから
プリミティブ値を作り出します

00:03:29.977 --> 00:03:35.382 align:start position:29% line:-2
文字列 配列 辞書など
アルゴリズムに使う要素が

00:03:35.816 --> 00:03:37.818 align:start position:30% line:-1
プリミティブデータです

00:03:39.553 --> 00:03:45.726 align:start position:21% line:-2
最もよく使われる要素は
プリミティブ値ではなくモデル型で

00:03:46.426 --> 00:03:51.231 align:start position:27% line:-2
これを構造化データと呼んで
使用しています

00:03:52.566 --> 00:03:58.238 align:start position:25% line:-2
これらのデータ形式は
抽象化の順で時間軸に並びます

00:03:59.006 --> 00:04:02.242 align:start position:36% line:-2
RAWデータが
最も抽象的でなく

00:03:59.006 --> 00:04:02.242 align:start position:36% line:-2
RAWデータが
最も抽象的でなく

00:04:02.342 --> 00:04:05.279 align:start position:32% line:-2
構造化したモデル型は
最も抽象的

00:04:05.379 --> 00:04:10.317 align:start position:32% line:-2
今日は可能な限り
この図の先へ進みます

00:04:10.450 --> 00:04:14.388 align:start position:32% line:-2
アプリケーションは
どこでも止まれますが

00:04:14.488 --> 00:04:17.690 align:start position:34% line:-2
重要なのは
独自のモデル型です

00:04:18.625 --> 00:04:23.096 align:start position:30% line:-2
ただし今日の目標は
図の先に進むだけでなく

00:04:23.197 --> 00:04:25.933 align:start position:32% line:-1
信頼性を築くことです

00:04:26.366 --> 00:04:31.772 align:start position:29% line:-2
各段階でデータが複雑化し
検証内容も増えますが

00:04:31.872 --> 00:04:34.875 align:start position:30% line:-1
それで信頼性が増します

00:04:36.210 --> 00:04:39.847 align:start position:21% line:-1
フォーマット済みデータは省きます

00:04:39.947 --> 00:04:44.718 align:start position:27% line:-2
プリミティブへの
足がかりに過ぎないからです

00:04:45.619 --> 00:04:50.691 align:start position:12% line:-2
例えばJSONSerializationが
ありますが

00:04:50.791 --> 00:04:54.127 align:start position:23% line:-1
見ることも使うこともありません

00:04:54.895 --> 00:04:58.632 align:start position:23% line:-2
RAW プリミティブ 構造化に
着目します

00:05:00.100 --> 00:05:02.169 align:start position:30% line:-1
まずはRAWデータです

00:05:02.769 --> 00:05:07.841 align:start position:30% line:-2
先ほども言いましたが
バイトのストリームです

00:05:08.375 --> 00:05:12.713 align:start position:30% line:-2
調べて意味を与えないと
役に立ちません

00:05:13.680 --> 00:05:19.152 align:start position:25% line:-2
これを読み解く前に
見方を知った方がいいでしょう

00:05:19.253 --> 00:05:20.921 align:start position:36% line:-1
安全でしょうか？

00:05:21.922 --> 00:05:25.626 align:start position:25% line:-1
データの長さで検証ができます

00:05:26.226 --> 00:05:31.532 align:start position:27% line:-2
１キロバイトのはずが
１ギガバイトだったとします

00:05:32.132 --> 00:05:35.569 align:start position:23% line:-1
そんなデータを読み込みますか？

00:05:35.969 --> 00:05:37.237 align:start position:39% line:-1
やめますよね

00:05:38.572 --> 00:05:42.075 align:start position:27% line:-1
長さの予測ができない場合は

00:05:42.176 --> 00:05:45.846 align:start position:23% line:-1
おそらく外部データなのでしょう

00:05:46.813 --> 00:05:51.485 align:start position:27% line:-2
チェックサムや電子署名でも
検証が可能です

00:05:51.585 --> 00:05:55.455 align:start position:25% line:-1
中身が不明でも性質が表れます

00:05:56.023 --> 00:05:58.392 align:start position:23% line:-1
チェックサムはハッシュ化します

00:05:58.492 --> 00:06:02.963 align:start position:21% line:-1
原因が何であれ小さな変化があると

00:05:58.492 --> 00:06:02.963 align:start position:21% line:-1
原因が何であれ小さな変化があると

00:06:03.063 --> 00:06:07.334 align:start position:21% line:-1
ブロックや接続に不具合が生じます

00:06:07.534 --> 00:06:12.439 align:start position:29% line:-2
チェックサムや電子署名が
無効になるので

00:06:12.539 --> 00:06:17.544 align:start position:29% line:-2
読み込む前に
信頼できないと分かります

00:06:19.279 --> 00:06:24.418 align:start position:29% line:-2
しかし チェックサムが
常に働くとは限らないので

00:06:24.518 --> 00:06:29.523 align:start position:29% line:-2
この段階でできるのは
読んで検証するくらいです

00:06:30.557 --> 00:06:33.594 align:start position:27% line:-1
次はプリミティブデータです

00:06:34.661 --> 00:06:37.331 align:start position:30% line:-1
RAWデータから生成し

00:06:37.431 --> 00:06:41.735 align:start position:14% line:-2
JSONSerializationなどを
通過させます

00:06:42.769 --> 00:06:47.741 align:start position:29% line:-2
これで使える文字列と辞書
数字の配列を得て

00:06:48.008 --> 00:06:50.978 align:start position:30% line:-1
２つのことが分かります

00:06:52.212 --> 00:06:55.182 align:start position:27% line:-1
１つ目はデータ形式の適切性

00:06:55.282 --> 00:06:58.585 align:start position:11% line:-2
XMLはJSONSerializationを
通りません

00:06:59.620 --> 00:07:02.222 align:start position:23% line:-1
２つ目はデシリアライザの信頼性

00:06:59.620 --> 00:07:02.222 align:start position:23% line:-1
２つ目はデシリアライザの信頼性

00:07:02.322 --> 00:07:06.260 align:start position:18% line:-1
Runtimeオブジェクトは有効です

00:07:06.393 --> 00:07:11.832 align:start position:18% line:-2
JSONSerializationで
文字列 数字 配列を得られます

00:07:12.332 --> 00:07:14.434 align:start position:32% line:-1
この値は信頼できます

00:07:15.802 --> 00:07:17.771 align:start position:34% line:-1
ここで知りたいのは

00:07:17.871 --> 00:07:22.776 align:start position:30% line:-2
データの使用法や信頼性
他に必要な検証です

00:07:24.645 --> 00:07:30.083 align:start position:30% line:-2
このデータの内容は
調べないと分かりません

00:07:30.417 --> 00:07:34.955 align:start position:32% line:-2
データの構造も
まったく不明でしょう

00:07:35.255 --> 00:07:40.127 align:start position:23% line:-2
動的なデシリアライゼーションは
ダウンキャストを生みます

00:07:40.360 --> 00:07:44.064 align:start position:23% line:-1
データの行く末を予測できません

00:07:44.398 --> 00:07:48.268 align:start position:25% line:-1
データの中身の確認が必要です

00:07:49.503 --> 00:07:54.675 align:start position:9% line:-2
開発中の「Sell My Old Junk」を
例に挙げましょう

00:07:54.775 --> 00:07:58.312 align:start position:32% line:-2
不用品を売るための
アプリケーションです

00:07:58.712 --> 00:08:03.584 align:start position:29% line:-2
アプリケーションを開くと
サーバに要求が出ます

00:07:58.712 --> 00:08:03.584 align:start position:29% line:-2
アプリケーションを開くと
サーバに要求が出ます

00:08:03.851 --> 00:08:08.989 align:start position:27% line:-2
販売中の商品リストを求める
リクエストです

00:08:10.123 --> 00:08:15.596 align:start position:30% line:-2
サーバはJSONを使い
商品リストを返します

00:08:17.197 --> 00:08:20.968 align:start position:23% line:-1
こちらがAPIのレスポンスです

00:08:21.502 --> 00:08:25.906 align:start position:27% line:-2
リストの配列に
面白いフィールドがあります

00:08:27.241 --> 00:08:32.913 align:start position:25% line:-2
例えば“製品ID”です
自然数で製品を識別しています

00:08:33.013 --> 00:08:36.383 align:start position:27% line:-1
ここでは連続した整数ですね

00:08:37.317 --> 00:08:40.220 align:start position:23% line:-1
“名前”と“説明”は文字列です

00:08:40.320 --> 00:08:43.123 align:start position:30% line:-1
他にも注目点があります

00:08:43.991 --> 00:08:48.695 align:start position:27% line:-2
例えば在庫を
ブーリアン型で示しています

00:08:49.930 --> 00:08:54.535 align:start position:34% line:-2
構造タグのリストは
文字列で記されます

00:08:55.969 --> 00:08:58.639 align:start position:29% line:-1
文字列は他にもありますが

00:08:58.739 --> 00:09:04.111 align:start position:23% line:-2
URLや日付など
形式の異なるデータは要注意です

00:08:58.739 --> 00:09:04.111 align:start position:23% line:-2
URLや日付など
形式の異なるデータは要注意です

00:09:05.612 --> 00:09:07.181 align:start position:36% line:-1
これらを使います

00:09:07.781 --> 00:09:11.718 align:start position:14% line:-1
URLSessionでデータをフェッチし

00:09:11.818 --> 00:09:13.520 align:start position:36% line:-1
長さを検証します

00:09:13.620 --> 00:09:17.825 align:start position:30% line:-2
サーバがチェックサムを
生成するかもしれません

00:09:19.960 --> 00:09:23.964 align:start position:14% line:-2
次にJSONSerializationに
データを渡します

00:09:24.531 --> 00:09:29.836 align:start position:21% line:-2
デシリアライズするのに失敗すると
エラーが投げられ

00:09:29.937 --> 00:09:32.072 align:start position:36% line:-1
顧客に知らせます

00:09:33.640 --> 00:09:40.447 align:start position:23% line:-2
これで RAWデータから
プリミティブデータができました

00:09:40.681 --> 00:09:43.116 align:start position:30% line:-1
失敗しても修正できます

00:09:44.484 --> 00:09:47.487 align:start position:30% line:-1
このデータの使い方は？

00:09:47.688 --> 00:09:51.658 align:start position:29% line:-2
JSONは
実際の値を持つ変数なので

00:09:51.892 --> 00:09:55.729 align:start position:30% line:-2
辞書の配列に
ダウンキャストできます

00:09:56.663 --> 00:10:00.100 align:start position:23% line:-1
ここでは音楽関連のリストに絞り

00:09:56.663 --> 00:10:00.100 align:start position:23% line:-1
ここでは音楽関連のリストに絞り

00:10:00.334 --> 00:10:04.071 align:start position:20% line:-1
musicタグのない製品を外します

00:10:04.171 --> 00:10:09.776 align:start position:27% line:-2
タグリストが文字列の配列を
ダウンキャストします

00:10:11.478 --> 00:10:12.479 align:start position:43% line:-1
大変です

00:10:13.780 --> 00:10:17.618 align:start position:34% line:-2
ダウンキャストに
致命的なエラーです

00:10:18.151 --> 00:10:19.853 align:start position:34% line:-1
片方が失敗するのは

00:10:19.953 --> 00:10:25.025 align:start position:21% line:-2
APIやデータが
組み込まれる前に変わったからです

00:10:25.125 --> 00:10:27.594 align:start position:25% line:-1
データの破損や悪意ある変更で

00:10:28.228 --> 00:10:29.630 align:start position:36% line:-1
両方 失敗します

00:10:29.730 --> 00:10:35.536 align:start position:23% line:-2
アプリケーションがクラッシュし
顧客に悪い印象を与えます

00:10:36.670 --> 00:10:38.405 align:start position:38% line:-1
原因を探ります

00:10:39.006 --> 00:10:41.742 align:start position:25% line:-1
これはAPIのレスポンスです

00:10:42.509 --> 00:10:44.878 align:start position:30% line:-1
タグリストに注目します

00:10:45.512 --> 00:10:49.216 align:start position:25% line:-1
２つ目のタグが文字列ではなく

00:10:49.483 --> 00:10:51.451 align:start position:32% line:-1
数字に変わっています

00:10:51.552 --> 00:10:56.323 align:start position:25% line:-2
第三者の仕業か通常の破損かは
分かりません

00:10:57.791 --> 00:11:02.229 align:start position:27% line:-2
この変更でダウンキャストが
失敗するのです

00:10:57.791 --> 00:11:02.229 align:start position:27% line:-2
この変更でダウンキャストが
失敗するのです

00:11:02.329 --> 00:11:05.332 align:start position:27% line:-1
事前の確認はしませんでした

00:11:06.867 --> 00:11:12.072 align:start position:30% line:-2
常に検証して実行すれば
失敗は避けられます

00:11:13.073 --> 00:11:17.244 align:start position:30% line:-2
分かっていると言う前に
確認しましょう

00:11:17.344 --> 00:11:18.879 align:start position:38% line:-1
過信は危険です

00:11:19.313 --> 00:11:20.848 align:start position:38% line:-1
対策を考えます

00:11:21.548 --> 00:11:24.117 align:start position:25% line:-1
再び最初のダウンキャストです

00:11:24.218 --> 00:11:29.122 align:start position:23% line:-2
値を強制的ではなく
条件付きでダウンキャストします

00:11:32.559 --> 00:11:34.995 align:start position:32% line:-1
これで検証が可能です

00:11:35.529 --> 00:11:38.098 align:start position:29% line:-1
必要な内容を含んでいます

00:11:38.198 --> 00:11:40.167 align:start position:38% line:-1
もし失敗しても

00:11:40.634 --> 00:11:43.370 align:start position:32% line:-1
致命的にはなりません

00:11:44.438 --> 00:11:48.041 align:start position:32% line:-2
２つ目も同様に
ダウンキャストします

00:11:48.141 --> 00:11:52.412 align:start position:32% line:-2
強制的ではなく
条件付きで行うのです

00:11:52.513 --> 00:11:58.018 align:start position:30% line:-2
これだとエラーを投げず
デフォルト値で実行でき

00:11:58.118 --> 00:12:02.789 align:start position:29% line:-2
有効なタグリストがないと
無視できます

00:11:58.118 --> 00:12:02.789 align:start position:29% line:-2
有効なタグリストがないと
無視できます

00:12:03.123 --> 00:12:06.059 align:start position:29% line:-1
エラーを投げない選択です

00:12:07.794 --> 00:12:12.966 align:start position:25% line:-2
この段階では
型以外の検証も行いたいですね

00:12:13.367 --> 00:12:17.738 align:start position:18% line:-1
nullに換えるとJSONで有効です

00:12:19.006 --> 00:12:20.974 align:start position:34% line:-1
クラッシュしません

00:12:22.109 --> 00:12:25.746 align:start position:23% line:-2
Swiftでnull化可能性は
型の一部です

00:12:25.846 --> 00:12:30.851 align:start position:29% line:-2
nullは文字列に
ダウンキャストできません

00:12:32.820 --> 00:12:36.223 align:start position:20% line:-1
すべて正しい型のnull化可能でも

00:12:36.323 --> 00:12:39.193 align:start position:27% line:-1
要注意の検証事項があります

00:12:39.827 --> 00:12:45.666 align:start position:23% line:-2
製品リストには連続した自然数の
IDが付いていますが

00:12:45.933 --> 00:12:48.635 align:start position:27% line:-1
負の数でも平気でしょうか？

00:12:49.102 --> 00:12:50.103 align:start position:43% line:-1
ダメです

00:12:50.204 --> 00:12:55.542 align:start position:23% line:-2
正の数だとしても
非常に大きな値はどうでしょう？

00:12:55.943 --> 00:12:57.845 align:start position:36% line:-1
商品が多すぎます

00:12:57.945 --> 00:13:03.083 align:start position:29% line:-2
誰かがオーバーフローを
狙っているかもしれません

00:12:57.945 --> 00:13:03.083 align:start position:29% line:-2
誰かがオーバーフローを
狙っているかもしれません

00:13:03.517 --> 00:13:05.452 align:start position:38% line:-1
警戒が必要です

00:13:06.920 --> 00:13:09.823 align:start position:25% line:-1
値域と長さの検証は似ています

00:13:10.057 --> 00:13:13.193 align:start position:29% line:-1
各商品に説明がありますが

00:13:13.560 --> 00:13:15.896 align:start position:27% line:-1
空白でも大丈夫でしょうか？

00:13:16.797 --> 00:13:20.100 align:start position:27% line:-1
私は製品をアップするたびに

00:13:20.300 --> 00:13:24.738 align:start position:30% line:-2
説明を書くので
空白だと間違っています

00:13:26.206 --> 00:13:31.111 align:start position:27% line:-2
説明があっても
長い戯曲が書かれていたら？

00:13:31.211 --> 00:13:35.516 align:start position:32% line:-2
これも変です
何かが間違っています

00:13:37.951 --> 00:13:40.787 align:start position:27% line:-1
さて 追加の検証があります

00:13:40.888 --> 00:13:46.226 align:start position:25% line:-2
型が正しく null化可能で
値域と長さが適切なら

00:13:46.326 --> 00:13:49.329 align:start position:27% line:-1
その値も内容も重要でしょう

00:13:50.197 --> 00:13:55.402 align:start position:21% line:-2
各製品には詳細を見られるURLも
付いています

00:13:55.936 --> 00:13:59.439 align:start position:29% line:-2
これは文字列のようですが
実際はURLです

00:13:59.540 --> 00:14:03.577 align:start position:32% line:-2
任意の文字列は
ふさわしくありません

00:13:59.540 --> 00:14:03.577 align:start position:32% line:-2
任意の文字列は
ふさわしくありません

00:14:03.877 --> 00:14:07.047 align:start position:25% line:-1
URLだという確認が要ります

00:14:07.548 --> 00:14:12.820 align:start position:27% line:-2
たとえURLでも
私のドメインとは限りません

00:14:12.920 --> 00:14:15.355 align:start position:32% line:-1
細心の注意が必要です

00:14:15.456 --> 00:14:17.524 align:start position:32% line:-1
顧客の安全は重要です

00:14:17.624 --> 00:14:19.760 align:start position:34% line:-1
私が送ったURLで

00:14:19.860 --> 00:14:24.398 align:start position:32% line:-2
フィッシングサイトに
誘導してはいけません

00:14:25.332 --> 00:14:27.935 align:start position:32% line:-1
ここは用心が必要です

00:14:29.436 --> 00:14:31.705 align:start position:30% line:-1
各フィールドが有効でも

00:14:31.805 --> 00:14:35.809 align:start position:21% line:-1
関係性が問題となる場合もあります

00:14:36.910 --> 00:14:41.548 align:start position:29% line:-2
リストの作成日と更新日を
書くとします

00:14:42.115 --> 00:14:43.750 align:start position:36% line:-1
それぞれ有効でも

00:14:43.851 --> 00:14:48.455 align:start position:32% line:-2
最後の更新日が
作成日の前では変です

00:14:48.989 --> 00:14:53.060 align:start position:23% line:-1
この例では安全性に関わりません

00:14:53.160 --> 00:14:59.366 align:start position:27% line:-2
しかし注意は必要です
変なデータは信頼できません

00:15:00.767 --> 00:15:02.903 align:start position:32% line:-1
何から始めましょう？

00:15:03.604 --> 00:15:08.775 align:start position:30% line:-2
あるリストの全内容を
検証する関数を書きます

00:15:09.710 --> 00:15:13.080 align:start position:23% line:-1
まずリストの製品IDを出します

00:15:13.614 --> 00:15:19.253 align:start position:29% line:-2
強制的ではなく条件付きで
ダウンキャストしましょう

00:15:19.453 --> 00:15:22.589 align:start position:27% line:-1
失敗するとエラーを投げます

00:15:23.524 --> 00:15:28.795 align:start position:27% line:-2
ここでは止まらず
製品IDを値域で検証します

00:15:28.896 --> 00:15:30.564 align:start position:41% line:-1
適切でした

00:15:30.664 --> 00:15:33.167 align:start position:32% line:-1
変だとエラーが出ます

00:15:36.904 --> 00:15:39.606 align:start position:29% line:-1
次にURLを確認しますが

00:15:39.706 --> 00:15:43.844 align:start position:21% line:-1
強制的なダウンキャストは避けます

00:15:44.211 --> 00:15:45.412 align:start position:41% line:-1
リンクです

00:15:45.512 --> 00:15:48.982 align:start position:30% line:-2
私のサーバは
長いURLを作りません

00:15:49.082 --> 00:15:52.753 align:start position:25% line:-1
とても長いURLなら無効です

00:15:54.021 --> 00:15:58.592 align:start position:29% line:-2
有効ならばURL型へ送り
ドメイン用の検証を行い

00:15:58.692 --> 00:16:01.662 align:start position:29% line:-1
本当にURLか確認します

00:15:58.692 --> 00:16:01.662 align:start position:29% line:-1
本当にURLか確認します

00:16:01.762 --> 00:16:04.431 align:start position:30% line:-1
変ならエラーを投げます

00:16:05.699 --> 00:16:09.002 align:start position:27% line:-1
本当のURLだと分かったら

00:16:09.102 --> 00:16:13.974 align:start position:32% line:-2
私のドメインかどうか
続けて検証します

00:16:15.309 --> 00:16:18.812 align:start position:23% line:-1
同種の検証を別項目でも使えます

00:16:18.912 --> 00:16:21.415 align:start position:30% line:-1
変ならエラーを投げます

00:16:21.682 --> 00:16:26.620 align:start position:30% line:-2
関数はダウンロードした
全リストに適用します

00:16:27.387 --> 00:16:31.024 align:start position:23% line:-1
変な場所があれば実行を止めます

00:16:33.827 --> 00:16:39.800 align:start position:23% line:-2
このように検証しましたが
プリミティブデータは総体的です

00:16:40.601 --> 00:16:45.906 align:start position:27% line:-2
文字列は 場合により
日付にもなることが可能です

00:16:46.406 --> 00:16:48.809 align:start position:32% line:-1
URLにもなり得ます

00:16:50.244 --> 00:16:54.581 align:start position:32% line:-2
セマンティクスが
気になる時もあります

00:16:54.681 --> 00:17:00.220 align:start position:25% line:-2
通常の文字列ではなく
自分のURLか確認を要します

00:16:54.681 --> 00:17:00.220 align:start position:25% line:-2
通常の文字列ではなく
自分のURLか確認を要します

00:17:01.388 --> 00:17:05.459 align:start position:21% line:-1
辞書はリストなどモデルを示します

00:17:05.559 --> 00:17:09.195 align:start position:21% line:-1
または未知の顧客データを示します

00:17:10.097 --> 00:17:14.768 align:start position:27% line:-2
同じ検証で
すべてを確認するのではなく

00:17:14.867 --> 00:17:19.406 align:start position:27% line:-2
保証された独自のモデル型を
使いたいですよね

00:17:21.108 --> 00:17:25.679 align:start position:29% line:-2
できれば 構造化データに
したいと思いました

00:17:25.779 --> 00:17:30.484 align:start position:29% line:-2
プリミティブデータよりも
魅力を感じます

00:17:31.251 --> 00:17:32.853 align:start position:36% line:-1
どうしましょう？

00:17:35.422 --> 00:17:39.560 align:start position:25% line:-2
アプリケーションに
Purchase型があります

00:17:40.460 --> 00:17:43.931 align:start position:27% line:-1
データがディスクに保存され

00:17:44.031 --> 00:17:49.169 align:start position:27% line:-2
ネットワークに繋がなくても
購入履歴が分かります

00:17:50.003 --> 00:17:53.273 align:start position:27% line:-1
関連する商品リストを追跡し

00:17:53.373 --> 00:17:56.810 align:start position:27% line:-1
購入するとレシートが出ます

00:17:58.245 --> 00:18:03.417 align:start position:20% line:-2
NSCodingとNSKeyを使い
データを保存します

00:17:58.245 --> 00:18:03.417 align:start position:20% line:-2
NSCodingとNSKeyを使い
データを保存します

00:18:04.051 --> 00:18:09.957 align:start position:23% line:-2
解凍したRAWデータと
プリミティブデータは検証します

00:18:10.624 --> 00:18:14.194 align:start position:25% line:-1
符号化の働きを見てみましょう

00:18:14.495 --> 00:18:17.364 align:start position:25% line:-1
これに見覚えはありませんか？

00:18:17.698 --> 00:18:20.334 align:start position:29% line:-1
まずリストを復号化します

00:18:20.434 --> 00:18:24.638 align:start position:29% line:-2
条件付きダウンキャストを
行ってください

00:18:25.072 --> 00:18:29.543 align:start position:27% line:-2
初期化子なので
変でもnilを返すだけです

00:18:30.978 --> 00:18:35.282 align:start position:25% line:-2
復号されると
プロパティに割り当てられます

00:18:35.649 --> 00:18:39.286 align:start position:32% line:-2
購入データも日付に
ダウンキャストします

00:18:39.386 --> 00:18:41.922 align:start position:32% line:-1
何か変だと失敗します

00:18:42.022 --> 00:18:44.324 align:start position:34% line:-1
これを繰り返します

00:18:45.859 --> 00:18:50.697 align:start position:30% line:-2
購入履歴を残したい時は
関数を使うことで

00:18:50.797 --> 00:18:54.501 align:start position:25% line:-1
バイナリデータに保存できます

00:18:55.169 --> 00:18:59.506 align:start position:27% line:-2
ディスクやデータベースにも
残せます

00:19:01.041 --> 00:19:05.612 align:start position:29% line:-2
ロードして戻したいなら
同様にRAWデータを得て

00:19:05.846 --> 00:19:09.650 align:start position:16% line:-2
KeyedUnarchiverに渡すと
オブジェクトが戻ります

00:19:11.318 --> 00:19:15.122 align:start position:25% line:-1
データは複雑になっていきます

00:19:15.222 --> 00:19:18.826 align:start position:21% line:-1
信頼するために行う検証も増えます

00:19:19.359 --> 00:19:21.562 align:start position:34% line:-1
問題は何でしょう？

00:19:21.662 --> 00:19:23.430 align:start position:34% line:-1
検証がまだなのは？

00:19:23.831 --> 00:19:26.533 align:start position:23% line:-1
このダウンキャストがヒントです

00:19:27.901 --> 00:19:31.972 align:start position:30% line:-2
オブジェクトの解凍後に
ダウンキャストしました

00:19:32.606 --> 00:19:34.341 align:start position:34% line:-1
失敗はあり得ません

00:19:35.142 --> 00:19:37.444 align:start position:34% line:-1
何かが起きています

00:19:37.544 --> 00:19:39.046 align:start position:38% line:-1
説明しましょう

00:19:40.614 --> 00:19:45.285 align:start position:30% line:-2
これはアーカイブ内の
モデルオブジェクトです

00:19:46.153 --> 00:19:48.889 align:start position:29% line:-1
全項目がコーディングされ

00:19:48.989 --> 00:19:53.093 align:start position:27% line:-2
それぞれが
構造やコンテンツを持ちます

00:19:53.727 --> 00:19:55.329 align:start position:38% line:-1
興味深いことに

00:19:55.596 --> 00:20:00.434 align:start position:29% line:-2
オブジェクトのクラス名も
含んでいます

00:19:55.596 --> 00:20:00.434 align:start position:29% line:-2
オブジェクトのクラス名も
含んでいます

00:20:01.401 --> 00:20:04.671 align:start position:11% line:-1
KeyedUnarchiverの働きを見ます

00:20:05.239 --> 00:20:08.275 align:start position:34% line:-1
先ほど復号コールで

00:20:08.375 --> 00:20:13.046 align:start position:16% line:-2
KeyedUnarchiverを生成し
オブジェクトを復号化します

00:20:14.681 --> 00:20:20.020 align:start position:21% line:-2
KeyedUnarchiverは
オブジェクトのクラス名を見つけ

00:20:20.120 --> 00:20:21.321 align:start position:39% line:-1
取り出します

00:20:21.555 --> 00:20:25.125 align:start position:25% line:-1
同時に同名のクラスを探します

00:20:26.560 --> 00:20:29.696 align:start position:23% line:-1
クラスのインスタンスを割り当て

00:20:29.797 --> 00:20:33.567 align:start position:29% line:-2
コンテンツを復号するため
初期化します

00:20:34.635 --> 00:20:38.472 align:start position:30% line:-2
そのあとオブジェクトを
呼び起こします

00:20:40.807 --> 00:20:43.243 align:start position:36% line:-1
これは効果的です

00:20:43.343 --> 00:20:47.047 align:start position:25% line:-1
しかし想定外のクラスを含むと

00:20:47.147 --> 00:20:50.017 align:start position:32% line:-1
どうなるのでしょう？

00:20:51.452 --> 00:20:55.656 align:start position:34% line:-2
こちらの全過程が
別の型で行われます

00:20:56.390 --> 00:21:02.029 align:start position:29% line:-2
想定外のクラスを割り当て
初期化して呼び起こします

00:20:56.390 --> 00:21:02.029 align:start position:29% line:-2
想定外のクラスを割り当て
初期化して呼び起こします

00:21:02.796 --> 00:21:04.364 align:start position:39% line:-1
その影響は？

00:21:06.033 --> 00:21:08.702 align:start position:29% line:-2
先ほどの
条件付きダウンキャストが

00:21:08.802 --> 00:21:12.639 align:start position:23% line:-1
想定外のクラスを避けてくれます

00:21:12.739 --> 00:21:15.776 align:start position:27% line:-1
想定した型のみ使えるのです

00:21:15.876 --> 00:21:18.345 align:start position:21% line:-1
ダウンキャストが失敗なら失敗です

00:21:20.714 --> 00:21:24.484 align:start position:29% line:-2
復号はアプリケーションに
影響を与えます

00:21:24.585 --> 00:21:28.522 align:start position:32% line:-2
allocメソッドは
大域状態を変えます

00:21:28.622 --> 00:21:31.959 align:start position:16% line:-1
Singletonを割り当てるでしょう

00:21:33.393 --> 00:21:37.764 align:start position:32% line:-2
オブジェクトを投げて
失敗すると衝撃が続き

00:21:37.865 --> 00:21:40.334 align:start position:32% line:-1
誤作動につながります

00:21:40.434 --> 00:21:45.806 align:start position:27% line:-2
悪影響を与えるアーカイブが
構築される可能性も

00:21:46.640 --> 00:21:49.209 align:start position:30% line:-1
これを防ぐ検証方法は？

00:21:50.177 --> 00:21:52.913 align:start position:16% line:-1
NSSecureCodingの出番です

00:21:53.781 --> 00:21:57.551 align:start position:21% line:-2
これはNSCodingを継承する
プロトコルで

00:21:57.851 --> 00:22:01.655 align:start position:29% line:-2
この種の攻撃を防ぐ目的で
作られました

00:21:57.851 --> 00:22:01.655 align:start position:29% line:-2
この種の攻撃を防ぐ目的で
作られました

00:22:02.890 --> 00:22:08.629 align:start position:23% line:-2
任意のコードの実行を防ぐために
型の情報を事前に渡し

00:22:08.729 --> 00:22:14.001 align:start position:25% line:-2
アーカイブを検証して
想定内の型のみだと確認します

00:22:15.903 --> 00:22:21.208 align:start position:27% line:-2
オブジェクトを復号化する
代替メソッドが２つあるため

00:22:21.308 --> 00:22:24.177 align:start position:30% line:-1
先に型の情報を渡せます

00:22:24.645 --> 00:22:28.015 align:start position:12% line:-2
これでNSKeyedUnarchiverが
安全を守ります

00:22:28.949 --> 00:22:33.687 align:start position:23% line:-2
主要なコールの
復号化オブジェクトを見ましょう

00:22:34.655 --> 00:22:38.659 align:start position:29% line:-2
Variant型を使うと
先にクラスを渡すので

00:22:38.792 --> 00:22:40.928 align:start position:25% line:-1
Purchaseを復号します

00:22:41.428 --> 00:22:45.099 align:start position:27% line:-1
アーカイブの内容に関わらず

00:22:45.599 --> 00:22:48.168 align:start position:30% line:-1
まずクラスを確認します

00:22:49.102 --> 00:22:51.205 align:start position:36% line:-1
この説明をします

00:22:52.839 --> 00:22:55.475 align:start position:25% line:-1
セキュアコーディングがあると

00:22:55.576 --> 00:22:59.646 align:start position:18% line:-2
NSKeyedUnarchiverは
クラスリストを維持します

00:23:01.048 --> 00:23:06.854 align:start position:25% line:-2
このようなコールで
使ったオブジェクトを取り出し

00:23:06.954 --> 00:23:09.456 align:start position:27% line:-1
許容クラスリストを作ります

00:23:10.858 --> 00:23:13.927 align:start position:27% line:-2
アーカイブのオブジェクトを
復号化すると

00:23:14.027 --> 00:23:17.264 align:start position:25% line:-1
そのクラスがチェックされます

00:23:17.364 --> 00:23:21.301 align:start position:32% line:-2
リストにないと
コールは却下されます

00:23:22.769 --> 00:23:27.407 align:start position:30% line:-2
オブジェクトのクラスが
リストにある場合は

00:23:27.508 --> 00:23:29.643 align:start position:34% line:-1
いくつか確認します

00:23:30.510 --> 00:23:35.082 align:start position:20% line:-2
NSSecureCodingに合う
クラスでないとダメです

00:23:35.816 --> 00:23:41.321 align:start position:30% line:-2
違うと 自身の復号化を
続けるのも安全と言えず

00:23:41.422 --> 00:23:44.424 align:start position:23% line:-1
オブジェクトを復号化できません

00:23:44.892 --> 00:23:48.862 align:start position:16% line:-1
このPurchaseクラスは大丈夫です

00:23:49.997 --> 00:23:54.368 align:start position:30% line:-2
親と子のクラスに関する
確認もあります

00:23:55.602 --> 00:24:00.307 align:start position:30% line:-2
親と子の両クラスが
NSCodingに従い

00:23:55.602 --> 00:24:00.307 align:start position:30% line:-2
親と子の両クラスが
NSCodingに従い

00:24:00.407 --> 00:24:03.710 align:start position:18% line:-2
親はNSSecureCodingにも
適合します

00:24:03.911 --> 00:24:06.580 align:start position:27% line:-1
子はその適合性を継承します

00:24:07.748 --> 00:24:13.420 align:start position:23% line:-2
子クラスがinitを
書き換えられない場合があるので

00:24:13.687 --> 00:24:15.455 align:start position:34% line:-1
対策を用意しました

00:24:17.024 --> 00:24:19.593 align:start position:30% line:-1
セキュアコーディングは

00:24:19.693 --> 00:24:22.196 align:start position:32% line:-1
使わなくても平気です

00:24:22.296 --> 00:24:25.599 align:start position:25% line:-1
まだ自分には早いと言えばいい

00:24:26.733 --> 00:24:29.303 align:start position:36% line:-1
それでも必要なら

00:24:29.403 --> 00:24:35.542 align:start position:14% line:-2
NSSecureCodingへの適合性を
親クラスから継承してください

00:24:35.642 --> 00:24:40.781 align:start position:30% line:-2
または両方のメソッドを
オーバーライドしても

00:24:40.881 --> 00:24:42.483 align:start position:41% line:-1
適合します

00:24:44.084 --> 00:24:49.022 align:start position:27% line:-2
このPurchaseは
両方の要求を満たしています

00:24:51.492 --> 00:24:55.462 align:start position:16% line:-1
Purchaseとリストを復号化すると

00:24:55.562 --> 00:24:59.333 align:start position:32% line:-2
同型のコールで
リストを要求できます

00:25:01.001 --> 00:25:06.140 align:start position:14% line:-2
NSKeyedUnarchiverが作る
新しい許容リストが

00:25:06.240 --> 00:25:09.009 align:start position:29% line:-1
すべての照合先となります

00:25:09.810 --> 00:25:15.282 align:start position:23% line:-2
復号化すると同じ確認をしますが
これは有効です

00:25:17.751 --> 00:25:23.624 align:start position:25% line:-2
想定外のクラスオブジェクトは
リストになく却下されます

00:25:25.659 --> 00:25:28.762 align:start position:23% line:-1
どのように却下するのでしょう？

00:25:28.862 --> 00:25:33.500 align:start position:25% line:-2
“復号化の失敗”は
他にも注意すべき点があります

00:25:33.634 --> 00:25:38.038 align:start position:25% line:-2
セキュアコーディングの違反も
見られますが

00:25:38.138 --> 00:25:40.140 align:start position:34% line:-1
他の原因もあります

00:25:41.275 --> 00:25:43.477 align:start position:32% line:-1
例えば型の不一致です

00:25:43.577 --> 00:25:48.649 align:start position:29% line:-2
オブジェクトの場所に
プリミティブ値があるかも

00:25:48.982 --> 00:25:52.052 align:start position:23% line:-1
プリミティブを復号化したいのに

00:25:52.152 --> 00:25:56.523 align:start position:30% line:-2
オブジェクトなどを
見つけるかもしれません

00:25:56.957 --> 00:25:58.792 align:start position:38% line:-1
失敗の原因です

00:26:00.460 --> 00:26:02.763 align:start position:32% line:-1
他の失敗もあり得ます

00:26:02.863 --> 00:26:09.269 align:start position:9% line:-2
アーカイブが激しく破損し
NSKeyedUnarchiverに合わないと

00:26:09.369 --> 00:26:10.971 align:start position:36% line:-1
復号化できません

00:26:11.071 --> 00:26:12.940 align:start position:38% line:-1
同様の失敗です

00:26:14.808 --> 00:26:20.681 align:start position:11% line:-2
decodingFailurePolicyが
失敗への対処を決定します

00:26:20.781 --> 00:26:22.015 align:start position:39% line:-1
選択肢は２つ

00:26:22.750 --> 00:26:24.918 align:start position:34% line:-1
例外を発生させるか

00:26:25.686 --> 00:26:29.356 align:start position:32% line:-2
情報を保存できるなら
実行を続けます

00:26:29.823 --> 00:26:32.259 align:start position:29% line:-1
今の設定は例外の発生です

00:26:33.927 --> 00:26:38.265 align:start position:29% line:-2
これはリストを復号化する
コールです

00:26:38.365 --> 00:26:41.668 align:start position:27% line:-1
想定外のクラスを見つけると

00:26:42.069 --> 00:26:45.772 align:start position:12% line:-1
failWithErrorメソッドが呼ばれ

00:26:46.039 --> 00:26:49.476 align:start position:29% line:-2
事象や場所を示すエラーが
渡されます

00:26:50.477 --> 00:26:53.614 align:start position:16% line:-1
failWithErrorは決定します

00:26:54.047 --> 00:26:58.819 align:start position:11% line:-2
decodingFailurePolicyが
例外を発生させます

00:26:59.253 --> 00:27:02.022 align:start position:27% line:-1
Swiftだと心配でしょう

00:26:59.253 --> 00:27:02.022 align:start position:27% line:-1
Swiftだと心配でしょう

00:27:02.289 --> 00:27:07.728 align:start position:16% line:-2
Objective-CやC++の例外を
認知できないためです

00:27:08.061 --> 00:27:11.832 align:start position:29% line:-2
クラッシュや満足度低下の
原因となります

00:27:13.267 --> 00:27:16.236 align:start position:11% line:-2
decodingFailurePolicyが
エラーを設定すると

00:27:16.336 --> 00:27:21.375 align:start position:12% line:-2
エラーはUnarchiverに割り当てられ
実行は継続します

00:27:21.642 --> 00:27:26.480 align:start position:23% line:-2
この例では
復号化のコールが何かを返します

00:27:26.580 --> 00:27:30.150 align:start position:23% line:-1
何も復号できない時はnilです

00:27:31.752 --> 00:27:38.025 align:start position:25% line:-2
プリミティブ型を復号するのに
不適切な型がある場合も

00:27:38.125 --> 00:27:39.760 align:start position:39% line:-1
同じ流れです

00:27:39.860 --> 00:27:43.997 align:start position:29% line:-2
この場合 nilではなく
ゼロが返されます

00:27:47.568 --> 00:27:50.104 align:start position:9% line:-2
failWithErrorは
NSKeyedUnarchiverのAPIです

00:27:50.204 --> 00:27:55.175 align:start position:23% line:-2
独自のコードで
失敗の日時や原因を示しましょう

00:27:55.542 --> 00:28:00.013 align:start position:12% line:-2
failWithErrorはnilを返さず
情報を記録します

00:27:55.542 --> 00:28:00.013 align:start position:12% line:-2
failWithErrorはnilを返さず
情報を記録します

00:28:01.315 --> 00:28:03.484 align:start position:34% line:-1
注意事項があります

00:28:04.384 --> 00:28:07.421 align:start position:11% line:-2
decodingFailurePolicyが
エラーを設定する際

00:28:07.521 --> 00:28:12.025 align:start position:27% line:-2
Unarchiver上だと
あとで変更できません

00:28:12.726 --> 00:28:17.564 align:start position:27% line:-2
復号化の失敗は
連鎖することが多いからです

00:28:17.664 --> 00:28:20.134 align:start position:32% line:-1
最初の情報が重要です

00:28:22.269 --> 00:28:25.205 align:start position:14% line:-1
所定のfailWithErrorコールは

00:28:25.305 --> 00:28:30.477 align:start position:23% line:-2
例外を投げるか 実行を続けると
覚えていてください

00:28:30.577 --> 00:28:34.047 align:start position:25% line:-2
特にObjective-Cは
例外が見つけやすく

00:28:34.181 --> 00:28:35.716 align:start position:39% line:-1
対処できます

00:28:37.017 --> 00:28:39.887 align:start position:30% line:-1
nilやゼロの戻り値は

00:28:40.354 --> 00:28:45.826 align:start position:29% line:-2
エラーを設定し戻す場合に
復号化の失敗で生じます

00:28:45.926 --> 00:28:50.731 align:start position:29% line:-2
またはデータが消えたか
nilで符号化したかです

00:28:50.964 --> 00:28:55.335 align:start position:32% line:-2
エラーのプロパティで
原因が分かります

00:28:57.604 --> 00:28:59.640 align:start position:34% line:-1
盛りだくさんですね

00:28:59.807 --> 00:29:04.645 align:start position:16% line:-2
NSSecureCodingを導入する
方法を確認しましょう

00:28:59.807 --> 00:29:04.645 align:start position:16% line:-2
NSSecureCodingを導入する
方法を確認しましょう

00:29:05.345 --> 00:29:11.552 align:start position:27% line:-2
まずオブジェクトを変換して
先に型の情報を渡します

00:29:12.586 --> 00:29:17.424 align:start position:14% line:-2
問題があればfailWithErrorで
事象を記録します

00:29:18.559 --> 00:29:24.364 align:start position:21% line:-2
これは未検証の場所の失敗を調べる
すばらしい機会です

00:29:24.698 --> 00:29:26.033 align:start position:36% line:-1
ぜひ行いましょう

00:29:27.134 --> 00:29:30.304 align:start position:25% line:-1
リストを復号化するコールです

00:29:30.404 --> 00:29:35.976 align:start position:21% line:-2
型の情報を渡すと
条件付きダウンキャストが消えます

00:29:36.844 --> 00:29:41.014 align:start position:23% line:-2
ジェネリックのオーバーロードに
型情報を渡すと

00:29:41.115 --> 00:29:46.286 align:start position:29% line:-2
条件付きダウンキャストが
不要になるのです

00:29:47.488 --> 00:29:52.326 align:start position:25% line:-2
失敗はnilを返すだけでなく
有意義にしたいので

00:29:52.426 --> 00:29:56.497 align:start position:21% line:-1
事象と場所の分かるエラーにします

00:29:57.064 --> 00:30:00.534 align:start position:18% line:-1
CocoaErrorの機能を使用して

00:29:57.064 --> 00:30:00.534 align:start position:18% line:-1
CocoaErrorの機能を使用して

00:30:00.634 --> 00:30:05.539 align:start position:30% line:-2
問題の場所と事象を示す
エラーを返します

00:30:06.740 --> 00:30:10.911 align:start position:34% line:-2
デバッグの記録を
残すこともできます

00:30:11.011 --> 00:30:14.581 align:start position:18% line:-2
しかし nilの前に
failWithErrorが必要です

00:30:16.950 --> 00:30:20.320 align:start position:23% line:-1
ここで購入日を復号化しています

00:30:20.787 --> 00:30:25.626 align:start position:27% line:-2
初めての場所で
さらなる検証を加えています

00:30:26.527 --> 00:30:30.164 align:start position:25% line:-1
日付を復号化できても保存せず

00:30:30.430 --> 00:30:33.300 align:start position:30% line:-1
有効な日付か確認します

00:30:33.400 --> 00:30:39.072 align:start position:27% line:-2
アプリケーションの配信前は
購入できないはずです

00:30:39.173 --> 00:30:43.510 align:start position:32% line:-2
ここでも問題があれば
有意義な失敗にします

00:30:44.211 --> 00:30:45.979 align:start position:34% line:-1
データはありますが

00:30:46.079 --> 00:30:50.384 align:start position:30% line:-2
破損しているか
無効のデータのようです

00:30:53.220 --> 00:30:56.590 align:start position:21% line:-1
同じことを私たちの型で行いました

00:30:56.690 --> 00:31:00.260 align:start position:30% line:-2
セキュアコーディングが
要求できます

00:30:56.690 --> 00:31:00.260 align:start position:30% line:-2
セキュアコーディングが
要求できます

00:31:00.661 --> 00:31:05.199 align:start position:14% line:-2
ランタイムに示さず
NSSecureCodingに適合させる

00:31:05.299 --> 00:31:08.535 align:start position:29% line:-1
これが私たちの目的でした

00:31:10.404 --> 00:31:14.875 align:start position:12% line:-2
そしてNSSecureCodingバッジを
獲得しました

00:31:14.975 --> 00:31:16.710 align:start position:38% line:-1
実物は別売です

00:31:19.346 --> 00:31:23.884 align:start position:12% line:-2
NSSecureCodingバッジの獲得は
重要だと思います

00:31:23.984 --> 00:31:26.653 align:start position:14% line:-2
今年は新APIと
NSKeyedUnarchiverを加え

00:31:26.753 --> 00:31:29.957 align:start position:16% line:-1
NSSecureCodingを使います

00:31:31.191 --> 00:31:35.362 align:start position:23% line:-2
これらはセキュアコーディングが
デフォルトで

00:31:35.462 --> 00:31:39.133 align:start position:16% line:-2
指針のデフォルトは
setErrorAndReturnです

00:31:39.233 --> 00:31:44.071 align:start position:30% line:-2
指針を変えなければ
例外の心配も要りません

00:31:45.539 --> 00:31:50.744 align:start position:29% line:-2
古い初期化子やメソッドは
非推奨となります

00:31:50.844 --> 00:31:52.579 align:start position:34% line:-1
新しくしてください

00:31:53.680 --> 00:31:57.351 align:start position:14% line:-2
NSKeyedArchiverのAPIも
紹介しました

00:31:57.451 --> 00:32:01.889 align:start position:30% line:-2
セキュアコーディングが
簡単に使えます

00:31:57.451 --> 00:32:01.889 align:start position:30% line:-2
セキュアコーディングが
簡単に使えます

00:32:01.989 --> 00:32:07.361 align:start position:16% line:-2
NSSecureCodingに合わない
オブジェクトの保存を防ぎ

00:32:07.461 --> 00:32:09.463 align:start position:32% line:-1
あとで復号できません

00:32:10.464 --> 00:32:13.734 align:start position:29% line:-2
古い初期化子とメソッドは
非推奨です

00:32:13.867 --> 00:32:16.803 align:start position:29% line:-1
古いコードはこうなります

00:32:17.171 --> 00:32:20.140 align:start position:14% line:-1
保存にSecureCodingを使います

00:32:20.440 --> 00:32:24.812 align:start position:25% line:-2
これを型情報を渡すメソッドに
換えます

00:32:25.512 --> 00:32:29.850 align:start position:16% line:-2
ここでSecureCodingバッジが
使えます

00:32:31.018 --> 00:32:35.055 align:start position:23% line:-2
自分の型が合わないか
または 合わない型に依存して―

00:32:35.155 --> 00:32:40.394 align:start position:30% line:-2
セキュアコーディングを
使えなくても大丈夫です

00:32:40.661 --> 00:32:44.231 align:start position:29% line:-1
Nコードでは要求が止まり

00:32:44.331 --> 00:32:48.001 align:start position:16% line:-2
デコードではSecureCodingが
常に使用可能に

00:32:48.735 --> 00:32:52.172 align:start position:14% line:-2
新しい初期化子で
KeyedUnarchiverを作ります

00:32:52.272 --> 00:32:54.975 align:start position:27% line:-2
SecureCodingは
手動で止めます

00:32:55.876 --> 00:33:01.381 align:start position:11% line:-2
decodingFailurePolicyは
必要ならデフォルトに戻せます

00:32:55.876 --> 00:33:01.381 align:start position:11% line:-2
decodingFailurePolicyは
必要ならデフォルトに戻せます

00:33:02.883 --> 00:33:06.520 align:start position:25% line:-2
Unarchiverがあれば
復号ができます

00:33:08.889 --> 00:33:10.591 align:start position:34% line:-1
Swiftを使えば

00:33:10.691 --> 00:33:16.430 align:start position:18% line:-2
NSSecureCoding以外でも
モデル型を変換できます

00:33:17.631 --> 00:33:22.269 align:start position:16% line:-2
昨年はSwift 4で
Codableプロトコルを紹介しました

00:33:22.870 --> 00:33:27.541 align:start position:16% line:-2
NSSecureCodingで下された
設計の決定を

00:33:27.641 --> 00:33:30.177 align:start position:20% line:-1
Codableは初日から示しました

00:33:31.011 --> 00:33:34.915 align:start position:16% line:-1
Codableは型の情報を書かないので

00:33:35.015 --> 00:33:37.017 align:start position:34% line:-1
何も信頼できません

00:33:37.117 --> 00:33:42.189 align:start position:27% line:-2
復号したい静的な型の情報を
先に要求することで

00:33:42.289 --> 00:33:44.792 align:start position:30% line:-1
この種の攻撃を防げます

00:33:46.260 --> 00:33:50.998 align:start position:21% line:-2
フィールドの中が
すべてCodableな型があると

00:33:51.098 --> 00:33:55.302 align:start position:29% line:-2
initの実装を統合して
要求を符号化します

00:33:55.936 --> 00:34:00.040 align:start position:21% line:-2
統合された実装は型と
null化可能性をチェックします

00:33:55.936 --> 00:34:00.040 align:start position:21% line:-2
統合された実装は型と
null化可能性をチェックします

00:34:00.140 --> 00:34:05.846 align:start position:27% line:-2
しかし 外部ソースの型は
多くが追加の検証を要します

00:34:06.680 --> 00:34:08.549 align:start position:36% line:-1
さらに検証します

00:34:09.750 --> 00:34:14.353 align:start position:21% line:-2
デコーダのinitで上書きすると
可能になります

00:34:14.455 --> 00:34:17.491 align:start position:21% line:-1
やはりJSONはレスポンスが早く

00:34:17.591 --> 00:34:22.728 align:start position:27% line:-2
同名のフィールドで型を作り
Codable型に変えます

00:34:23.630 --> 00:34:28.469 align:start position:21% line:-2
すべてCodableなので
initの実装を得て符号化します

00:34:28.802 --> 00:34:34.341 align:start position:23% line:-2
プリミティブ値の時と同じ検証を
行いたいと思います

00:34:34.908 --> 00:34:37.344 align:start position:36% line:-1
やり方は同じです

00:34:38.478 --> 00:34:43.784 align:start position:27% line:-2
ペイロードのIDを
古いコードが復号した場所で

00:34:43.884 --> 00:34:47.387 align:start position:27% line:-1
デコーダの整数を復号します

00:34:48.422 --> 00:34:51.692 align:start position:21% line:-1
ペイロードの型が異なったりすると

00:34:51.792 --> 00:34:55.094 align:start position:27% line:-1
事象を示すエラーを投げます

00:34:56.330 --> 00:35:01.568 align:start position:23% line:-2
さらに重要なのは
メソッドのために加えた検証です

00:34:56.330 --> 00:35:01.568 align:start position:23% line:-2
さらに重要なのは
メソッドのために加えた検証です

00:35:02.002 --> 00:35:06.406 align:start position:29% line:-2
同じ検証を続けて
IDの有効性を確認します

00:35:06.507 --> 00:35:11.044 align:start position:21% line:-2
ここでは
エラーを投げるメソッドが使えます

00:35:13.380 --> 00:35:18.052 align:start position:27% line:-2
文字列として日付を生成する
関数を検証し

00:35:18.152 --> 00:35:23.624 align:start position:27% line:-2
それをフォーマッタに渡して
有効な日付を戻します

00:35:25.359 --> 00:35:27.394 align:start position:27% line:-1
JSONデコーダがあるので

00:35:27.494 --> 00:35:32.299 align:start position:34% line:-2
型の変更を気にせず
日付を復号できます

00:35:32.666 --> 00:35:38.305 align:start position:29% line:-2
JSONデコーダの指針で
変更の種類も分かります

00:35:38.672 --> 00:35:42.109 align:start position:25% line:-1
この変更は１行なので便利です

00:35:42.709 --> 00:35:45.512 align:start position:29% line:-1
別の復号コールも１行です

00:35:45.612 --> 00:35:49.483 align:start position:32% line:-2
そのため検証に
着目しやすくなります

00:35:51.585 --> 00:35:57.558 align:start position:23% line:-2
それからタグの下部構造を
文字列の配列として取り出します

00:35:57.658 --> 00:36:02.562 align:start position:29% line:-2
文字列をマッピングし
あとで さらに検証します

00:35:57.658 --> 00:36:02.562 align:start position:29% line:-2
文字列をマッピングし
あとで さらに検証します

00:36:03.931 --> 00:36:07.935 align:start position:16% line:-1
タグがCodableに適合するおかげで

00:36:08.035 --> 00:36:11.338 align:start position:21% line:-1
直接 タグの配列を復号化できます

00:36:11.605 --> 00:36:13.073 align:start position:38% line:-1
これは自動です

00:36:13.173 --> 00:36:17.811 align:start position:25% line:-2
型の変更ではなく
データの検証に集中できるので

00:36:18.145 --> 00:36:21.148 align:start position:30% line:-1
信頼性に確信を持てます

00:36:24.385 --> 00:36:26.453 align:start position:34% line:-1
多くを説明しました

00:36:27.087 --> 00:36:32.860 align:start position:23% line:-2
RAWデータからモデル型に至る
抽象化の過程を説明し

00:36:33.327 --> 00:36:36.497 align:start position:23% line:-1
信頼できるデータを構築しました

00:36:38.599 --> 00:36:44.471 align:start position:23% line:-2
チェックサムやデータの長さから
有効に働くかを検証し

00:36:44.571 --> 00:36:47.174 align:start position:29% line:-1
形式に合うか確認しました

00:36:47.274 --> 00:36:50.210 align:start position:30% line:-1
既知の形式に適合すれば

00:36:50.544 --> 00:36:55.883 align:start position:27% line:-2
フォーマット済みデータから
プリミティブ値が生じます

00:36:57.117 --> 00:37:00.921 align:start position:34% line:-2
プリミティブ値の
コンテンツや構造で

00:36:57.117 --> 00:37:00.921 align:start position:34% line:-2
プリミティブ値の
コンテンツや構造で

00:37:01.021 --> 00:37:05.426 align:start position:29% line:-2
独自のモデル型ができるか
分かりました

00:37:06.393 --> 00:37:09.930 align:start position:21% line:-1
セマンティックとモデル型の関係で

00:37:10.030 --> 00:37:13.734 align:start position:23% line:-1
信頼できるデータか検証しました

00:37:15.802 --> 00:37:17.137 align:start position:36% line:-1
次はどうします？

00:37:18.105 --> 00:37:22.676 align:start position:32% line:-2
自分のコードを見て
検証を始めてください

00:37:23.310 --> 00:37:27.848 align:start position:29% line:-2
データが変化する各段階で
検証を行います

00:37:27.948 --> 00:37:33.320 align:start position:29% line:-2
型やnull化可能性より
値域や長さなどが重要です

00:37:34.755 --> 00:37:36.023 align:start position:27% line:-1
NSCoding型があれば

00:37:36.123 --> 00:37:38.792 align:start position:18% line:-2
NSSecureCodingバッジを
得られます

00:37:38.892 --> 00:37:42.629 align:start position:30% line:-2
セキュアコーディングを
利用しましょう

00:37:43.564 --> 00:37:45.499 align:start position:34% line:-1
新しいデータ型では

00:37:45.599 --> 00:37:49.803 align:start position:29% line:-2
Codableを導入して
検証してください

00:37:50.170 --> 00:37:53.574 align:start position:23% line:-1
信頼できるデータだけ使うのです

00:37:55.175 --> 00:37:59.947 align:start position:2% line:-2
Codableの詳細は
“What's New in Foundation”で

00:38:00.047 --> 00:38:05.152 align:start position:27% line:-2
質問がある方や
適用方法で助言が欲しい方は

00:38:05.252 --> 00:38:09.156 align:start position:25% line:-2
Foundationラボまで
お越しください

00:38:10.324 --> 00:38:12.626 align:start position:34% line:-1
ご清聴に感謝します

00:38:13.160 --> 00:38:14.161 align:start position:41% line:-1
よい１日を

00:38:14.261 --> 00:38:17.431 align:start position:43% line:-1
(拍手)
