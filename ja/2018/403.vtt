WEBVTT

00:00:07.007 --> 00:00:15.582 align:start position:43% line:-1
(音楽)

00:00:25.592 --> 00:00:26.660 align:start position:34% line:-1
おはようございます

00:00:26.760 --> 00:00:32.665 align:start position:43% line:-1
(拍手)

00:00:32.766 --> 00:00:34.434 align:start position:27% line:-1
セッション403へようこそ

00:00:34.535 --> 00:00:36.170 align:start position:32% line:-1
テストの最新情報です

00:00:36.370 --> 00:00:38.138 align:start position:25% line:-1
私はホンザ･ドボルスキーです

00:00:38.238 --> 00:00:41.842 align:start position:29% line:-2
同僚のイーサン･ボーンと
進めていきます

00:00:43.710 --> 00:00:46.680 align:start position:34% line:-2
コードカバレッジの
改良点から始めます

00:00:46.780 --> 00:00:48.782 align:start position:25% line:-1
Xcode 9.3の内容です

00:00:49.483 --> 00:00:54.321 align:start position:21% line:-2
次はXcode 10で改善された
テストの選択と順序化です

00:00:54.655 --> 00:00:57.824 align:start position:29% line:-1
最後にイーサンが登壇して

00:00:57.925 --> 00:01:01.328 align:start position:27% line:-1
並列テストについて話します

00:00:57.925 --> 00:01:01.328 align:start position:27% line:-1
並列テストについて話します

00:01:02.930 --> 00:01:04.998 align:start position:27% line:-1
まずはコードカバレッジです

00:01:06.700 --> 00:01:10.103 align:start position:27% line:-2
Xcode 9.3の改良を
全面的に行い

00:01:10.437 --> 00:01:14.541 align:start position:23% line:-1
動作や精度が大きく向上しました

00:01:14.875 --> 00:01:17.177 align:start position:30% line:-1
新機能も追加されました

00:01:17.277 --> 00:01:22.349 align:start position:23% line:-2
コードカバレッジを左右する
ターゲットを細かく指定できます

00:01:23.951 --> 00:01:27.321 align:start position:30% line:-2
xccovという
コマンドラインを作成し

00:01:28.121 --> 00:01:33.227 align:start position:25% line:-2
Source Editorで
ビジュアルを刷新しました

00:01:33.961 --> 00:01:36.063 align:start position:30% line:-1
細かく見ていきましょう

00:01:36.997 --> 00:01:41.034 align:start position:27% line:-2
まずは コードカバレッジの
改善について

00:01:41.134 --> 00:01:44.571 align:start position:23% line:-2
Appleの内部プロジェクトで
測定しました

00:01:46.173 --> 00:01:49.476 align:start position:30% line:-2
Xcodeでロードして
表示するまでに

00:01:49.576 --> 00:01:52.646 align:start position:27% line:-1
どれくらいの時間を要するか

00:01:54.348 --> 00:01:58.352 align:start position:30% line:-2
Xcode 9では
約6.5秒かかりました

00:01:59.853 --> 00:02:03.156 align:start position:30% line:-2
Xcode 9.3では
0.5秒弱になりました

00:01:59.853 --> 00:02:03.156 align:start position:30% line:-2
Xcode 9.3では
0.5秒弱になりました

00:02:03.257 --> 00:02:05.659 align:start position:34% line:-1
95％以上速いです

00:02:06.727 --> 00:02:11.198 align:start position:43% line:-1
(拍手)

00:02:12.065 --> 00:02:15.335 align:start position:32% line:-2
カバレッジファイルの
縮小も行いました

00:02:15.435 --> 00:02:18.071 align:start position:32% line:-2
テストが頻繁になれば
Xcodeからの―

00:02:18.172 --> 00:02:20.807 align:start position:38% line:-2
書き出しの量も
増えるからです

00:02:21.175 --> 00:02:24.978 align:start position:34% line:-2
大幅な改善ができて
うれしく思います

00:02:26.146 --> 00:02:29.883 align:start position:16% line:-1
Xcode 9では200MB以上でした

00:02:29.983 --> 00:02:31.652 align:start position:34% line:-1
かなりの容量ですが

00:02:31.752 --> 00:02:35.589 align:start position:29% line:-2
何千ものソースファイルが
あってのことです

00:02:37.758 --> 00:02:41.728 align:start position:23% line:-2
Xcode 9.3のファイルは
10分の1以下になりました

00:02:42.863 --> 00:02:46.934 align:start position:43% line:-1
(拍手)

00:02:47.067 --> 00:02:49.770 align:start position:25% line:-1
継続的インテグレーション時や

00:02:49.870 --> 00:02:53.740 align:start position:27% line:-2
ディスク領域が少ない時には
助かります

00:02:54.441 --> 00:02:59.913 align:start position:25% line:-2
カバレッジファイルが
縮小され速くなっただけでなく

00:03:00.013 --> 00:03:02.282 align:start position:29% line:-1
以前より正確になりました

00:03:03.717 --> 00:03:05.819 align:start position:25% line:-1
ヘッダファイルが１つの例です

00:03:05.919 --> 00:03:10.090 align:start position:30% line:-2
Xcode 9では
正確に収集し表示できず

00:03:10.190 --> 00:03:13.594 align:start position:32% line:-2
C++のコードで
問題になっていました

00:03:13.694 --> 00:03:18.866 align:start position:27% line:-2
ヘッダに多量の実行コードが
含まれることになるからです

00:03:19.666 --> 00:03:22.503 align:start position:21% line:-1
問題を抱えていた人もいるでしょう

00:03:22.603 --> 00:03:25.806 align:start position:27% line:-1
これで実装とヘッダの両方で

00:03:25.906 --> 00:03:28.575 align:start position:34% line:-2
コードカバレッジを
正しく示せます

00:03:29.476 --> 00:03:32.346 align:start position:23% line:-1
次はコードカバレッジの機能です

00:03:33.313 --> 00:03:35.749 align:start position:27% line:-1
まずターゲットを選択します

00:03:36.483 --> 00:03:41.622 align:start position:23% line:-2
コードカバレッジを有効にするか
無効にするかだけでなく

00:03:41.722 --> 00:03:43.023 align:start position:39% line:-1
有効にすれば

00:03:43.123 --> 00:03:47.294 align:start position:34% line:-2
実行する対象を
選ぶことが可能です

00:03:47.961 --> 00:03:51.865 align:start position:29% line:-2
サードパーティが関係する
プロジェクトで―

00:03:51.965 --> 00:03:54.368 align:start position:36% line:-2
テスト不要な
対象がある場合や

00:03:54.468 --> 00:03:56.103 align:start position:36% line:-1
自社内の作業でも

00:03:56.203 --> 00:04:00.340 align:start position:25% line:-2
テスト済みの箇所がある場合に
重要です

00:03:56.203 --> 00:04:00.340 align:start position:25% line:-2
テスト済みの箇所がある場合に
重要です

00:04:02.242 --> 00:04:04.545 align:start position:27% line:-1
ターゲットのカスタマイズは

00:04:04.645 --> 00:04:08.015 align:start position:18% line:-1
スキームのOptionsから可能です

00:04:08.682 --> 00:04:11.818 align:start position:30% line:-2
すべての対象を
含めることも可能ですし

00:04:11.919 --> 00:04:15.055 align:start position:23% line:-1
いくつかピックアップも可能です

00:04:17.190 --> 00:04:19.827 align:start position:25% line:-1
更に力強いワークフローとして

00:04:19.927 --> 00:04:22.763 align:start position:30% line:-1
xccovを作りました

00:04:24.198 --> 00:04:27.534 align:start position:30% line:-2
これで自動スクリプトを
簡単に統合でき

00:04:27.634 --> 00:04:31.538 align:start position:25% line:-2
人間と機械の
両方に向けた出力を生成します

00:04:32.306 --> 00:04:37.211 align:start position:29% line:-2
カバレッジデータの詳細を
見ることもできます

00:04:37.811 --> 00:04:40.380 align:start position:34% line:-1
そのデータについて

00:04:40.480 --> 00:04:42.716 align:start position:32% line:-1
実際に見てみましょう

00:04:43.851 --> 00:04:46.620 align:start position:34% line:-2
コードカバレッジを
有効にした場合

00:04:46.720 --> 00:04:49.089 align:start position:29% line:-2
Xcodeは
ファイルを２つ生成します

00:04:49.656 --> 00:04:51.892 align:start position:29% line:-1
１つはカバレッジレポート

00:04:51.992 --> 00:04:54.061 align:start position:21% line:-1
xccovreportの拡張子で

00:04:54.161 --> 00:04:58.398 align:start position:29% line:-2
ラインカバレッジの割合が
含まれています

00:04:58.499 --> 00:05:01.935 align:start position:25% line:-2
各ターゲットやソースファイル
などについてです

00:04:58.499 --> 00:05:01.935 align:start position:25% line:-2
各ターゲットやソースファイル
などについてです

00:05:03.337 --> 00:05:05.639 align:start position:21% line:-1
２つ目はカバレッジアーカイブです

00:05:05.739 --> 00:05:10.577 align:start position:30% line:-2
これは各ファイルの
実行カウントを含みます

00:05:13.280 --> 00:05:18.719 align:start position:21% line:-2
これらファイルは配信済みデータの
ディレクトリに保存され

00:05:18.819 --> 00:05:22.856 align:start position:20% line:-2
resultBundlePathを
xcodebuildに送ると

00:05:22.956 --> 00:05:26.493 align:start position:34% line:-2
結果のバンドルにも
配置されます

00:05:28.195 --> 00:05:29.897 align:start position:34% line:-1
例を見てみましょう

00:05:29.997 --> 00:05:35.002 align:start position:29% line:-2
カバレッジデータを
xccovで見た画面です

00:05:36.103 --> 00:05:39.072 align:start position:21% line:-1
各対象のカバレッジ全体が見えます

00:05:39.840 --> 00:05:42.543 align:start position:29% line:-1
しかし各ファイルの詳細や

00:05:43.110 --> 00:05:44.745 align:start position:32% line:-1
各メソッドも見えます

00:05:45.646 --> 00:05:50.517 align:start position:27% line:-2
また もちろん
フラグ識別をパスすることで

00:05:50.818 --> 00:05:54.621 align:start position:21% line:-1
JSONと同じデータを得られます

00:05:55.956 --> 00:05:58.926 align:start position:34% line:-2
これで統合が
より簡単になります

00:06:00.027 --> 00:06:02.262 align:start position:25% line:-1
xccovはフレキシブルです

00:06:02.362 --> 00:06:05.365 align:start position:30% line:-2
ドキュメンテーションも
ご覧ください

00:06:06.800 --> 00:06:12.406 align:start position:21% line:-2
コマンドラインでの
カバレッジの見方を説明しましたが

00:06:12.506 --> 00:06:16.944 align:start position:27% line:-2
最も便利な見方は
ソースコードの横にあります

00:06:18.445 --> 00:06:22.783 align:start position:23% line:-1
コードカバレッジの編集を選んで

00:06:22.883 --> 00:06:25.285 align:start position:30% line:-1
表示 非表示を選びます

00:06:28.555 --> 00:06:32.726 align:start position:27% line:-2
更新された
コードカバレッジがあります

00:06:33.193 --> 00:06:38.098 align:start position:21% line:-2
右の実行カウントにカーソルを重ね
ライン全体をハイライト

00:06:38.699 --> 00:06:41.134 align:start position:29% line:-1
これは とてもいい方法で

00:06:41.235 --> 00:06:46.173 align:start position:25% line:-2
テスト済みの箇所と
まだ作業中の箇所が分かります

00:06:47.608 --> 00:06:50.911 align:start position:29% line:-1
実際に見てもらいましょう

00:07:01.188 --> 00:07:03.957 align:start position:30% line:-2
Dev Castという
プロジェクトです

00:07:04.258 --> 00:07:08.795 align:start position:27% line:-2
去年iOS版を作った
単純なメッセージAppです

00:07:08.896 --> 00:07:11.465 align:start position:25% line:-1
今年はMac版を作成しました

00:07:12.099 --> 00:07:15.602 align:start position:23% line:-2
iOSとMacの
ビジネスロジックを共有するため

00:07:15.702 --> 00:07:19.006 align:start position:27% line:-2
DevCastKitという
フレームワークに入れました

00:07:19.306 --> 00:07:20.774 align:start position:38% line:-1
今日のゴールは

00:07:20.874 --> 00:07:24.912 align:start position:34% line:-2
コードカバレッジを
改善することです

00:07:25.612 --> 00:07:29.650 align:start position:30% line:-2
まだ収集していないので
オンにします

00:07:30.417 --> 00:07:35.022 align:start position:23% line:-2
そしてスキームの中の
Edit Schemeを選択し

00:07:35.355 --> 00:07:36.990 align:start position:36% line:-1
テストに入ります

00:07:37.758 --> 00:07:39.293 align:start position:30% line:-1
次にOptionsです

00:07:40.694 --> 00:07:43.597 align:start position:23% line:-1
コードカバレッジを有効にします

00:07:47.534 --> 00:07:50.737 align:start position:25% line:-2
ProductからTestで
テスト開始です

00:07:51.305 --> 00:07:56.477 align:start position:29% line:-2
テストバンドルと
Mac Appが構築され

00:07:56.577 --> 00:07:58.312 align:start position:30% line:-1
テストが行われています

00:07:59.880 --> 00:08:02.149 align:start position:27% line:-1
テスト結果を見てみましょう

00:07:59.880 --> 00:08:02.149 align:start position:27% line:-1
テスト結果を見てみましょう

00:08:02.249 --> 00:08:04.318 align:start position:32% line:-1
レポートナビゲータで

00:08:04.852 --> 00:08:07.421 align:start position:29% line:-1
最新のレポートを開きます

00:08:08.722 --> 00:08:12.659 align:start position:21% line:-1
ここに両方のターゲットが見えます

00:08:12.759 --> 00:08:15.596 align:start position:34% line:-2
Mac Appと
フレームワークです

00:08:15.896 --> 00:08:20.467 align:start position:30% line:-2
コードカバレッジですが
これはテストなので

00:08:20.567 --> 00:08:23.437 align:start position:30% line:-1
低くても問題ありません

00:08:23.537 --> 00:08:27.574 align:start position:23% line:-1
見たいのは そこではありません

00:08:28.675 --> 00:08:31.378 align:start position:29% line:-1
再びスキームを編集します

00:08:33.580 --> 00:08:35.182 align:start position:36% line:-1
テストを始めます

00:08:36.616 --> 00:08:39.586 align:start position:21% line:-1
全ターゲットを収集するのではなく

00:08:39.919 --> 00:08:42.022 align:start position:29% line:-1
いくつかの対象に絞ります

00:08:42.890 --> 00:08:45.626 align:start position:32% line:-1
リストが出てくるので

00:08:45.726 --> 00:08:49.663 align:start position:23% line:-2
調査対象のフレームワークのみを
追加します

00:08:53.734 --> 00:08:55.736 align:start position:36% line:-1
テストに戻ります

00:08:59.506 --> 00:09:01.875 align:start position:27% line:-1
新しいレポートを見ましょう

00:08:59.506 --> 00:09:01.875 align:start position:27% line:-1
新しいレポートを見ましょう

00:09:02.976 --> 00:09:06.613 align:start position:27% line:-2
これがフレームワークのみの
レポートです

00:09:06.713 --> 00:09:08.015 align:start position:32% line:-1
見たかったデータです

00:09:08.115 --> 00:09:10.984 align:start position:29% line:-1
１つの対象に集中できます

00:09:11.585 --> 00:09:14.655 align:start position:25% line:-1
カバレッジの割合は84％です

00:09:14.755 --> 00:09:17.591 align:start position:25% line:-1
悪くはないですが改善できます

00:09:17.691 --> 00:09:20.928 align:start position:32% line:-2
どのファイルに
集中すべきか知るため

00:09:21.028 --> 00:09:22.896 align:start position:34% line:-1
対象を調べましょう

00:09:23.630 --> 00:09:27.768 align:start position:27% line:-2
１つ目のファイルが66％と
低いですね

00:09:28.368 --> 00:09:31.505 align:start position:23% line:-1
この矢印をクリックして開きます

00:09:33.841 --> 00:09:37.578 align:start position:23% line:-1
ローカルサーバのクラスを見ます

00:09:38.245 --> 00:09:42.549 align:start position:32% line:-2
右側で実行カウントを
見ることができます

00:09:42.649 --> 00:09:47.788 align:start position:29% line:-2
実行可能な部分は
カバーされたと分かります

00:09:47.888 --> 00:09:49.022 align:start position:41% line:-1
いいですね

00:09:49.323 --> 00:09:52.726 align:start position:18% line:-2
残念ながら 簡易関数
getRecentMessagesが

00:09:52.826 --> 00:09:54.595 align:start position:34% line:-1
呼び出されておらず

00:09:54.695 --> 00:09:56.730 align:start position:29% line:-1
動作が正確か分かりません

00:09:57.731 --> 00:10:01.502 align:start position:27% line:-2
修復するため
関連テストファイルを見ます

00:09:57.731 --> 00:10:01.502 align:start position:27% line:-2
修復するため
関連テストファイルを見ます

00:10:03.637 --> 00:10:05.239 align:start position:34% line:-1
新しいテストを追加

00:10:07.641 --> 00:10:11.512 align:start position:29% line:-2
ローカルサーバに
メッセージをいくつか送り

00:10:11.612 --> 00:10:16.149 align:start position:18% line:-2
getRecentMessagesで
返答を検証します

00:10:17.251 --> 00:10:19.219 align:start position:30% line:-1
新しいテストを追加して

00:10:19.520 --> 00:10:21.822 align:start position:30% line:-1
もう一度 行いましょう

00:10:25.926 --> 00:10:27.161 align:start position:39% line:-1
完了しました

00:10:27.261 --> 00:10:30.130 align:start position:27% line:-1
カバレッジレポートを見ます

00:10:30.430 --> 00:10:33.100 align:start position:23% line:-1
フレームワークに集中してみると

00:10:33.200 --> 00:10:35.269 align:start position:27% line:-1
100％カバーできています

00:10:35.369 --> 00:10:37.204 align:start position:34% line:-1
求めていた結果です

00:10:38.205 --> 00:10:41.475 align:start position:27% line:-1
対象をフォーカスするための

00:10:41.575 --> 00:10:43.944 align:start position:30% line:-1
選択機能を紹介しました

00:10:44.411 --> 00:10:48.482 align:start position:27% line:-2
そしてカバレッジレポートも
見てもらいました

00:10:48.715 --> 00:10:52.152 align:start position:29% line:-2
コードカバレッジの統合も
行いました

00:10:52.252 --> 00:10:55.789 align:start position:27% line:-2
どのコードをカバーすべきか
知るためです

00:10:56.690 --> 00:10:59.026 align:start position:25% line:-1
これがXcodeの改善点です

00:11:06.433 --> 00:11:08.869 align:start position:30% line:-1
コードカバレッジの次は

00:11:09.670 --> 00:11:12.339 align:start position:20% line:-1
Xcode 10の新機能の説明です

00:11:12.973 --> 00:11:18.011 align:start position:27% line:-2
まず テストを適切な順番で
行う方法を見ます

00:11:19.279 --> 00:11:20.881 align:start position:36% line:-1
なぜ重要なのか？

00:11:21.014 --> 00:11:26.286 align:start position:30% line:-2
すべてのテストが
同じ目的ではありません

00:11:26.553 --> 00:11:32.059 align:start position:21% line:-2
1000の急ぎのユニットテストを
行う一方で―

00:11:32.159 --> 00:11:36.096 align:start position:23% line:-2
夜間は10だけ
長いUIテストを行ったりします

00:11:36.830 --> 00:11:40.868 align:start position:27% line:-2
スキーム内の特定のテストを
無効にすれば可能です

00:11:42.436 --> 00:11:45.839 align:start position:30% line:-2
無効なテストのリストを
エンコード

00:11:45.939 --> 00:11:49.143 align:start position:27% line:-1
XEテストでスキップします

00:11:49.843 --> 00:11:52.179 align:start position:30% line:-1
面白い副作用があります

00:11:52.279 --> 00:11:53.947 align:start position:29% line:-1
新しいテストを書くたびに

00:11:54.047 --> 00:11:58.819 align:start position:30% line:-2
対象を含む全スキームに
自動的に追加されます

00:11:59.153 --> 00:12:00.521 align:start position:38% line:-1
必要ない場合は

00:11:59.153 --> 00:12:00.521 align:start position:38% line:-1
必要ない場合は

00:12:00.621 --> 00:12:04.691 align:start position:30% line:-2
全スキームを見て
手動で無効にすることに

00:12:05.759 --> 00:12:06.727 align:start position:32% line:-1
Xcode 10では

00:12:06.827 --> 00:12:10.898 align:start position:30% line:-2
逆に 実行するテストを
エンコードします

00:12:12.599 --> 00:12:14.568 align:start position:29% line:-1
そのモードに切り替えると

00:12:14.668 --> 00:12:17.971 align:start position:25% line:-1
指定したテストのみ動作します

00:12:21.141 --> 00:12:24.444 align:start position:27% line:-2
これは
スキームエディタで操作でき

00:12:25.212 --> 00:12:28.415 align:start position:21% line:-1
新しいポップアップが表示されます

00:12:28.515 --> 00:12:32.586 align:start position:30% line:-2
新規テストの自動追加を
選択できます

00:12:33.487 --> 00:12:37.591 align:start position:25% line:-2
これで あらゆる新規テストを
実行するスキームと―

00:12:37.691 --> 00:12:41.328 align:start position:30% line:-2
選択したテストのみ行う
スキームを分けます

00:12:43.464 --> 00:12:48.202 align:start position:29% line:-2
どのテストをいつ行うかを
説明してきましたが

00:12:48.302 --> 00:12:51.672 align:start position:25% line:-1
テストの順序も重要な事項です

00:12:53.073 --> 00:12:56.777 align:start position:20% line:-1
デフォルトでは名前順で実行されます

00:12:57.477 --> 00:12:59.880 align:start position:34% line:-1
名称を変更しないと

00:12:59.980 --> 00:13:02.049 align:start position:29% line:-1
いつも同じ順番となります

00:12:59.980 --> 00:13:02.049 align:start position:29% line:-1
いつも同じ順番となります

00:13:02.783 --> 00:13:05.285 align:start position:25% line:-1
これはもろ刃の剣になり得ます

00:13:05.686 --> 00:13:08.789 align:start position:34% line:-2
テストの順序に
左右される状況では

00:13:08.889 --> 00:13:12.025 align:start position:25% line:-1
バグを見落としがちになります

00:13:13.393 --> 00:13:15.896 align:start position:30% line:-1
この例を見てみましょう

00:13:16.630 --> 00:13:19.099 align:start position:23% line:-1
テストＡ Ｂ Ｃがあるとします

00:13:19.299 --> 00:13:22.402 align:start position:30% line:-2
常にこの順番で実施され
パスします

00:13:22.536 --> 00:13:24.905 align:start position:30% line:-1
しかし詳しく見ていくと

00:13:25.005 --> 00:13:28.108 align:start position:25% line:-1
テストＡはデータベースを生成

00:13:29.176 --> 00:13:32.846 align:start position:23% line:-1
Ｂはデータの書き込みを行います

00:13:33.614 --> 00:13:37.151 align:start position:27% line:-1
Ｃは それを消去しています

00:13:40.687 --> 00:13:44.658 align:start position:29% line:-2
これらのテストは
この順序のみでパスします

00:13:44.758 --> 00:13:49.096 align:start position:27% line:-2
では 名前を変えるなどして
順番を入れ替えて

00:13:49.696 --> 00:13:51.265 align:start position:32% line:-1
テストすればどうか？

00:13:51.365 --> 00:13:54.701 align:start position:27% line:-1
Ｂはデータベースがないので

00:13:54.802 --> 00:13:56.803 align:start position:34% line:-1
テストは失敗します

00:13:57.671 --> 00:14:00.507 align:start position:29% line:-1
このような問題を防ぐには

00:13:57.671 --> 00:14:00.507 align:start position:29% line:-1
このような問題を防ぐには

00:14:00.607 --> 00:14:05.212 align:start position:29% line:-2
常に正しく設定･解除する
必要があります

00:14:06.280 --> 00:14:08.382 align:start position:30% line:-1
信頼性が増すだけでなく

00:14:08.482 --> 00:14:12.986 align:start position:27% line:-2
各テストは
独立して実行可能になります

00:14:13.854 --> 00:14:17.024 align:start position:25% line:-1
開発やデバッグ時に効果的です

00:14:18.492 --> 00:14:23.063 align:start position:25% line:-1
テスト同士の依存をなくすため

00:14:23.230 --> 00:14:27.267 align:start position:27% line:-2
Xcode 10はテストの
ランダム化ができます

00:14:28.235 --> 00:14:29.436 align:start position:39% line:-1
これを使えば

00:14:29.536 --> 00:14:33.273 align:start position:32% line:-2
テスト前にランダムで
シャッフルされます

00:14:34.241 --> 00:14:37.077 align:start position:27% line:-1
これを使ってもパスした場合

00:14:37.177 --> 00:14:40.714 align:start position:30% line:-2
各テストの安定と独立が
より信頼できます

00:14:42.616 --> 00:14:45.686 align:start position:21% line:-1
スキームエディタから設定可能です

00:14:45.786 --> 00:14:48.222 align:start position:27% line:-1
先ほど見せたものと同じです

00:14:50.290 --> 00:14:53.794 align:start position:29% line:-2
以上が
選択と順序化の新機能です

00:14:55.829 --> 00:14:58.232 align:start position:36% line:-1
次に紹介するのは

00:14:59.299 --> 00:15:02.536 align:start position:30% line:-1
並列テストの新機能です

00:14:59.299 --> 00:15:02.536 align:start position:30% line:-1
並列テストの新機能です

00:15:02.636 --> 00:15:05.239 align:start position:34% line:-2
イーサンを
呼びたいと思います

00:15:05.739 --> 00:15:11.712 align:start position:43% line:-1
(拍手)

00:15:12.279 --> 00:15:13.380 align:start position:36% line:-1
ありがとうホンザ

00:15:15.048 --> 00:15:19.453 align:start position:23% line:-2
多くの皆さんが
このような開発サイクルですよね

00:15:19.586 --> 00:15:22.156 align:start position:27% line:-1
コードを書いてデバッグして

00:15:22.256 --> 00:15:27.261 align:start position:29% line:-2
変更点をコミットする前に
テストを実行する

00:15:27.861 --> 00:15:29.963 align:start position:25% line:-1
プッシュ前にテストすることで

00:15:30.063 --> 00:15:33.534 align:start position:23% line:-1
ビルド前に不具合を発見できます

00:15:35.869 --> 00:15:38.505 align:start position:25% line:-1
しかしプロセスの障害の１つが

00:15:38.605 --> 00:15:41.675 align:start position:29% line:-1
テスト実行時間の長さです

00:15:42.075 --> 00:15:47.447 align:start position:23% line:-2
30分から数時間かけて実行する
テストスイートもあります

00:15:47.948 --> 00:15:51.852 align:start position:34% line:-2
作業を終えるまでに
時間がかかる場合

00:15:51.952 --> 00:15:54.955 align:start position:25% line:-1
ワークフローに問題があります

00:15:55.789 --> 00:15:59.426 align:start position:30% line:-2
なるべく速く
テストを実行することで

00:15:59.526 --> 00:16:02.963 align:start position:36% line:-2
この重要な作業を
短縮しましょう

00:15:59.526 --> 00:16:02.963 align:start position:36% line:-2
この重要な作業を
短縮しましょう

00:16:03.330 --> 00:16:07.568 align:start position:21% line:-2
そのために昨年
Xcode 9に機能を加えました

00:16:07.668 --> 00:16:11.972 align:start position:0% line:-1
Parallel Destination Testingです

00:16:12.272 --> 00:16:17.611 align:start position:27% line:-2
複数のデスティネーションを
同時にテストできます

00:16:18.078 --> 00:16:23.784 align:start position:21% line:-2
コマンドラインから指定子を
xcodebuildにパスします

00:16:25.552 --> 00:16:27.888 align:start position:30% line:-1
これまでのテストでは…

00:16:27.988 --> 00:16:30.924 align:start position:25% line:-2
iPhone XやiPadで
説明します

00:16:31.024 --> 00:16:34.428 align:start position:32% line:-2
iPhone Xで
すべてのテストを行い

00:16:34.528 --> 00:16:37.030 align:start position:25% line:-1
次にiPadで行う手順でした

00:16:37.264 --> 00:16:40.367 align:start position:29% line:-1
同時にはできませんでした

00:16:42.135 --> 00:16:44.705 align:start position:27% line:-1
Xcode 9では違います

00:16:44.805 --> 00:16:48.775 align:start position:25% line:-2
デフォルトで同時に
テストを行えるようにしました

00:16:49.009 --> 00:16:53.046 align:start position:30% line:-2
これで全体の実行時間を
大幅に短縮できます

00:16:54.481 --> 00:16:57.351 align:start position:23% line:-1
しかし これにも限界があります

00:16:58.785 --> 00:17:02.856 align:start position:23% line:-2
まず複数の
デスティネーションに限られます

00:16:58.785 --> 00:17:02.856 align:start position:23% line:-2
まず複数の
デスティネーションに限られます

00:17:03.390 --> 00:17:07.094 align:start position:29% line:-2
Mac Appで
ユニットテストを行う場合

00:17:07.194 --> 00:17:08.494 align:start position:36% line:-1
うまくいきません

00:17:09.762 --> 00:17:12.665 align:start position:23% line:-1
xcodebuildのみ可能で

00:17:12.766 --> 00:17:16.837 align:start position:21% line:-2
継続的インテグレーションの場合に
限られます

00:17:16.936 --> 00:17:19.373 align:start position:11% line:-1
Xcode ServerやJenkinsです

00:17:21.208 --> 00:17:24.645 align:start position:25% line:-1
しかし皆さんに朗報があります

00:17:24.744 --> 00:17:27.079 align:start position:14% line:-2
Parallel Distributed
Testingです

00:17:28.482 --> 00:17:33.921 align:start position:21% line:-2
これで１つのデスティネーションで
並列テストが可能になります

00:17:34.688 --> 00:17:38.158 align:start position:29% line:-1
以前のテストはこうでした

00:17:38.258 --> 00:17:42.596 align:start position:21% line:-1
１つのテストに対して１つの線です

00:17:44.231 --> 00:17:47.734 align:start position:21% line:-1
新機能は同時にテストが行えるので

00:17:47.834 --> 00:17:50.037 align:start position:32% line:-1
見え方はこうなります

00:17:50.971 --> 00:17:54.575 align:start position:20% line:-2
Xcodeとxcodebuildが
サポートしているので

00:17:54.675 --> 00:17:58.445 align:start position:30% line:-2
どこで実行しても
最善の効果が得られます

00:18:00.214 --> 00:18:03.817 align:start position:34% line:-2
では並列テストの
実行方法を話します

00:18:03.917 --> 00:18:07.087 align:start position:21% line:-1
まず どのように実行されるのかと

00:18:07.187 --> 00:18:08.922 align:start position:34% line:-1
ランタイムについて

00:18:10.591 --> 00:18:12.526 align:start position:30% line:-1
まずユニットテストです

00:18:12.926 --> 00:18:16.697 align:start position:32% line:-2
まずテストバンドルに
コンパイルされます

00:18:17.698 --> 00:18:21.235 align:start position:32% line:-2
ランタイム時に
テストランナーとして

00:18:21.335 --> 00:18:23.737 align:start position:23% line:-1
XcodeがAppを起動します

00:18:24.638 --> 00:18:28.475 align:start position:32% line:-2
ランナーはバンドルを
ロードして実行します

00:18:29.810 --> 00:18:31.745 align:start position:29% line:-1
これがユニットテストです

00:18:32.246 --> 00:18:33.747 align:start position:34% line:-1
次にUIテストです

00:18:34.181 --> 00:18:36.283 align:start position:38% line:-1
こちらも同様で

00:18:36.383 --> 00:18:39.152 align:start position:32% line:-2
バンドルに
コンパイルされますが

00:18:39.253 --> 00:18:42.990 align:start position:27% line:-2
バンドルがカスタムAppで
ロードされるので

00:18:43.290 --> 00:18:45.759 align:start position:27% line:-1
App自体はテストしません

00:18:46.560 --> 00:18:50.931 align:start position:20% line:-2
その代わり テストが
Appを起動し 各UIに作用して―

00:18:51.031 --> 00:18:53.700 align:start position:30% line:-1
自動的に処理を進めます

00:18:55.102 --> 00:18:57.604 align:start position:27% line:-1
この過程を更に学びたい人は

00:18:57.704 --> 00:19:02.643 align:start position:29% line:-2
2016年の我々の
セッションをご覧ください

00:18:57.704 --> 00:19:02.643 align:start position:29% line:-2
2016年の我々の
セッションをご覧ください

00:19:03.977 --> 00:19:06.914 align:start position:32% line:-2
テストの実行について
見てきましたが

00:19:07.014 --> 00:19:10.517 align:start position:27% line:-2
Xcodeの
並列テストについて話します

00:19:11.318 --> 00:19:12.619 align:start position:36% line:-1
以前と同じように

00:19:12.719 --> 00:19:16.256 align:start position:27% line:-1
テストランナーを使用します

00:19:17.124 --> 00:19:19.593 align:start position:25% line:-1
ですが１つのランナーではなく

00:19:19.693 --> 00:19:22.196 align:start position:27% line:-1
複数のランナーを起動します

00:19:22.329 --> 00:19:25.265 align:start position:29% line:-2
そして各々が
サブセットをテストします

00:19:26.266 --> 00:19:30.137 align:start position:30% line:-2
Xcodeはランナーに
テストを分配し

00:19:30.237 --> 00:19:33.674 align:start position:30% line:-2
その機器での作業効率を
高めます

00:19:35.242 --> 00:19:36.944 align:start position:32% line:-1
詳しく見てみましょう

00:19:37.978 --> 00:19:40.747 align:start position:30% line:-1
ランナーに分配する時は

00:19:40.848 --> 00:19:42.816 align:start position:32% line:-1
クラス単位で渡します

00:19:43.383 --> 00:19:46.286 align:start position:25% line:-1
各ランナーはテストを受け取り

00:19:46.520 --> 00:19:50.624 align:start position:30% line:-2
別クラスに移る前に
そのテストを実行します

00:19:51.225 --> 00:19:54.795 align:start position:34% line:-2
すべてのクラスを
実行すると完了です

00:19:56.430 --> 00:20:00.334 align:start position:29% line:-2
なぜクラスごとに
送るか疑問に思うでしょう

00:19:56.430 --> 00:20:00.334 align:start position:29% line:-2
なぜクラスごとに
送るか疑問に思うでしょう

00:20:00.434 --> 00:20:03.804 align:start position:27% line:-2
なぜ個々のテストメソッドを
送らないのか？

00:20:04.505 --> 00:20:06.406 align:start position:30% line:-1
いくつか理由があります

00:20:07.574 --> 00:20:11.445 align:start position:34% line:-2
１つ目はテスト間の
隠れた依存性です

00:20:11.545 --> 00:20:13.247 align:start position:32% line:-1
ホンザも言及しました

00:20:13.781 --> 00:20:16.417 align:start position:23% line:-1
Xcodeが同クラスのテストを

00:20:16.517 --> 00:20:18.719 align:start position:32% line:-1
違うランナーに送ると

00:20:18.819 --> 00:20:21.622 align:start position:38% line:-2
エラーの診断が
難しくなります

00:20:23.323 --> 00:20:24.358 align:start position:41% line:-1
２つ目です

00:20:24.458 --> 00:20:28.195 align:start position:29% line:-2
各テストクラスには
設定と解除メソッドがあり

00:20:28.295 --> 00:20:31.064 align:start position:23% line:-1
高度な計算を行うかもしれません

00:20:31.432 --> 00:20:34.668 align:start position:23% line:-1
ランナーを１つに制限することで

00:20:34.768 --> 00:20:37.905 align:start position:30% line:-2
XEテストは
一度の設定･解除で済み

00:20:38.005 --> 00:20:39.740 align:start position:32% line:-1
貴重な時間の節約です

00:20:42.376 --> 00:20:46.980 align:start position:27% line:-2
次にシミュレータ上の
並列テストについて話します

00:20:48.282 --> 00:20:50.951 align:start position:34% line:-1
並列テストを行うと

00:20:51.051 --> 00:20:54.188 align:start position:27% line:-1
指定のシミュレータが起動し

00:20:54.288 --> 00:20:58.091 align:start position:32% line:-2
複数のコピーや
クローンを生成します

00:20:58.892 --> 00:21:03.664 align:start position:27% line:-2
これらのクローンは
元のシミュレータと同じです

00:20:58.892 --> 00:21:03.664 align:start position:27% line:-2
これらのクローンは
元のシミュレータと同じです

00:21:04.665 --> 00:21:09.069 align:start position:25% line:-2
クローンは自動的に
作られたり削除されたりします

00:21:10.037 --> 00:21:12.439 align:start position:25% line:-1
何度かクローンを生成したあと

00:21:12.539 --> 00:21:16.009 align:start position:25% line:-2
Xcodeが 各クローン上で
ランナーを起動

00:21:16.109 --> 00:21:20.781 align:start position:29% line:-2
そのランナーが
テストクラスを実行します

00:21:22.483 --> 00:21:26.487 align:start position:32% line:-2
異なるクローンで
テストを実行する際に

00:21:26.587 --> 00:21:29.189 align:start position:25% line:-1
気を付けるポイントがあります

00:21:31.024 --> 00:21:35.295 align:start position:30% line:-2
元のシミュレータが
使われていないことです

00:21:35.796 --> 00:21:38.699 align:start position:23% line:-1
代わりにテンプレートとなります

00:21:39.066 --> 00:21:42.302 align:start position:29% line:-2
希望の設定とコンテンツを
適用すると

00:21:42.402 --> 00:21:46.006 align:start position:30% line:-2
そのコンテンツは
クローンに複製されます

00:21:47.608 --> 00:21:50.777 align:start position:25% line:-1
次にAppのコピーが複数でき

00:21:51.044 --> 00:21:55.382 align:start position:29% line:-2
各クローンと複製が
データコンテナを持ちます

00:21:55.949 --> 00:21:59.987 align:start position:32% line:-2
ファイルを修正する
テストクラスがあれば

00:22:00.087 --> 00:22:04.224 align:start position:32% line:-2
他のテストクラスでは
修正内容が見えません

00:22:04.324 --> 00:22:07.728 align:start position:29% line:-2
完全に別の
データコンテナだからです

00:22:08.896 --> 00:22:12.533 align:start position:30% line:-2
異なるクローンで
実行されるという事実は

00:22:12.633 --> 00:22:14.935 align:start position:30% line:-1
テストからは見えません

00:22:15.402 --> 00:22:16.970 align:start position:32% line:-1
しかし認識すべきです

00:22:18.939 --> 00:22:21.475 align:start position:25% line:-1
ではどこで並列テストが可能か

00:22:21.675 --> 00:22:24.511 align:start position:23% line:-1
macOSではユニットテストが

00:22:24.611 --> 00:22:27.114 align:start position:21% line:-1
iOSとtvOSシミュレータでは

00:22:27.214 --> 00:22:29.283 align:start position:27% line:-1
UIテストも同様に可能です

00:22:30.884 --> 00:22:35.422 align:start position:29% line:-2
では実際にテストのデモを
ご覧いただきます

00:22:48.135 --> 00:22:50.537 align:start position:14% line:-1
これはSolar SystemのAppで

00:22:50.637 --> 00:22:53.874 align:start position:25% line:-2
Dub-Dubのセッションで
見た人もいますね

00:22:54.241 --> 00:22:56.009 align:start position:32% line:-1
このデベロッパとして

00:22:56.109 --> 00:23:00.914 align:start position:30% line:-2
変更を確定する前に
全テストを行いましょう

00:22:56.109 --> 00:23:00.914 align:start position:30% line:-2
変更を確定する前に
全テストを行いましょう

00:23:01.548 --> 00:23:03.650 align:start position:30% line:-1
しかしテストが増えれば

00:23:03.750 --> 00:23:07.955 align:start position:30% line:-2
その分 時間がかかり
ワークフローに支障が…

00:23:08.388 --> 00:23:10.490 align:start position:32% line:-1
ここで並列テストです

00:23:11.558 --> 00:23:14.061 align:start position:21% line:-1
Xcodeプロジェクトに切り替え

00:23:14.461 --> 00:23:18.398 align:start position:32% line:-2
テストを実行し
所要時間を見てみます

00:23:21.535 --> 00:23:24.705 align:start position:29% line:-1
テストレポートを開きます

00:23:25.205 --> 00:23:27.174 align:start position:29% line:-1
ここで各メソッドを見ると

00:23:27.274 --> 00:23:30.644 align:start position:30% line:-2
それぞれに要した時間が
分かります

00:23:31.211 --> 00:23:32.980 align:start position:34% line:-1
各テストクラスでは

00:23:33.080 --> 00:23:36.283 align:start position:30% line:-1
合否の割合が分かります

00:23:36.550 --> 00:23:39.686 align:start position:27% line:-1
実行に要した時間も見れます

00:23:40.487 --> 00:23:42.022 align:start position:39% line:-1
最後に右側に

00:23:42.122 --> 00:23:45.826 align:start position:32% line:-2
すべてのテストに
要した時間があります

00:23:46.160 --> 00:23:48.829 align:start position:30% line:-1
14秒と書かれています

00:23:49.563 --> 00:23:51.865 align:start position:30% line:-1
次は並列テストを可能に

00:23:51.965 --> 00:23:54.034 align:start position:34% line:-1
スキームへ行きます

00:23:54.134 --> 00:23:57.271 align:start position:21% line:-1
Edit Schemeを選びます

00:23:57.738 --> 00:23:59.973 align:start position:32% line:-1
Testをクリックし

00:24:00.140 --> 00:24:03.710 align:start position:29% line:-2
ターゲット横の
Optionsをクリック

00:24:04.545 --> 00:24:07.948 align:start position:11% line:-2
“Execute in parallel”に
チェックを入れると

00:24:08.415 --> 00:24:11.185 align:start position:32% line:-1
実行が可能になります

00:24:11.985 --> 00:24:16.323 align:start position:27% line:-2
それでは
テストを実行してみましょう

00:24:19.560 --> 00:24:21.628 align:start position:36% line:-1
文書を見てみます

00:24:21.862 --> 00:24:24.832 align:start position:20% line:-1
Mac Appが複数のコピーを作り

00:24:24.932 --> 00:24:27.201 align:start position:23% line:-1
ユニットテストを並列で行います

00:24:27.668 --> 00:24:29.603 align:start position:36% line:-1
終わったようです

00:24:29.703 --> 00:24:31.939 align:start position:32% line:-1
レポートを見てみます

00:24:32.272 --> 00:24:34.441 align:start position:32% line:-1
最新のものを選びます

00:24:35.943 --> 00:24:39.279 align:start position:25% line:-1
先ほど14秒かかったテストが

00:24:39.379 --> 00:24:41.115 align:start position:34% line:-1
５秒で終わりました

00:24:41.215 --> 00:24:43.016 align:start position:38% line:-1
並列化によって

00:24:43.116 --> 00:24:46.753 align:start position:32% line:-2
50％以上の効率化を
実現できました

00:24:47.387 --> 00:24:53.393 align:start position:43% line:-1
(拍手)

00:24:53.727 --> 00:24:57.498 align:start position:27% line:-2
Solar Systemは
Macだけでなく

00:24:57.598 --> 00:24:59.833 align:start position:34% line:-1
iOSにもあります

00:25:00.134 --> 00:25:03.203 align:start position:29% line:-2
私はUIテストスイートを
書いていました

00:25:03.303 --> 00:25:06.874 align:start position:25% line:-2
iOS Appの様々な画面で
実行するためです

00:25:06.974 --> 00:25:10.878 align:start position:21% line:-1
iOSでの並列化も可能にしたので

00:25:10.978 --> 00:25:13.514 align:start position:25% line:-1
これから切り替えてみましょう

00:25:16.683 --> 00:25:19.353 align:start position:25% line:-1
プロダクトを選んで実行します

00:25:19.453 --> 00:25:20.387 align:start position:41% line:-1
Testへ

00:25:22.923 --> 00:25:25.759 align:start position:21% line:-1
今度はシミュレータに切り替えます

00:25:26.393 --> 00:25:28.128 align:start position:34% line:-1
ここにXcodeが

00:25:28.228 --> 00:25:31.999 align:start position:29% line:-2
クローンを
複数生成したのが見えます

00:25:32.299 --> 00:25:36.136 align:start position:27% line:-2
元のシミュレータにちなんで
名付けられているので

00:25:36.236 --> 00:25:38.472 align:start position:38% line:-1
識別は簡単です

00:25:39.206 --> 00:25:43.477 align:start position:27% line:-2
各シミュレータ上で
Xcodeはランナーを起動

00:25:43.744 --> 00:25:47.314 align:start position:23% line:-2
ランナーは
異なるテストクラスを実行します

00:25:59.927 --> 00:26:02.062 align:start position:36% line:-1
テストの実行中に

00:25:59.927 --> 00:26:02.062 align:start position:36% line:-1
テストの実行中に

00:26:02.162 --> 00:26:06.200 align:start position:29% line:-2
Xcodeに戻り
テストログをお見せします

00:26:06.500 --> 00:26:08.268 align:start position:39% line:-1
テストログは

00:26:08.368 --> 00:26:10.637 align:start position:32% line:-2
テストレポートに
関連付けられています

00:26:11.371 --> 00:26:13.207 align:start position:36% line:-1
ログを見ることで

00:26:13.307 --> 00:26:16.743 align:start position:25% line:-1
クラスの分配状況が分かります

00:26:18.212 --> 00:26:21.482 align:start position:29% line:-2
各ランナーのエントリーを
見ることができ

00:26:21.915 --> 00:26:26.887 align:start position:23% line:-2
ランナーの下で
実行中のテストクラスが見えます

00:26:28.021 --> 00:26:30.124 align:start position:27% line:-1
なので テストが完了後に―

00:26:30.224 --> 00:26:33.327 align:start position:27% line:-2
クラスの分配を確認するには
最適です

00:26:33.427 --> 00:26:36.330 align:start position:25% line:-1
並列テストの概要が分かります

00:26:37.331 --> 00:26:39.633 align:start position:30% line:-1
ではスライドに戻ります

00:26:42.436 --> 00:26:47.775 align:start position:43% line:-1
(拍手)

00:26:48.408 --> 00:26:51.178 align:start position:23% line:-1
ここでデモ内容をおさらいします

00:26:52.146 --> 00:26:56.417 align:start position:21% line:-2
１つはスキームエディタで並列化を
有効にする方法

00:26:57.351 --> 00:27:00.454 align:start position:32% line:-2
次にテストレポートの
見方を話しました

00:26:57.351 --> 00:27:00.454 align:start position:32% line:-2
次にテストレポートの
見方を話しました

00:27:00.554 --> 00:27:03.991 align:start position:27% line:-2
テストログで
クラス分配の様子も見ました

00:27:05.559 --> 00:27:09.563 align:start position:25% line:-2
XcodeがMac Appで
複数のクローンを作り

00:27:09.663 --> 00:27:11.865 align:start position:30% line:-1
並列でユニットテストを

00:27:12.966 --> 00:27:16.203 align:start position:23% line:-1
最後にシミュレータのクローンが

00:27:16.303 --> 00:27:18.639 align:start position:27% line:-1
並列でUIテストをしました

00:27:20.574 --> 00:27:22.276 align:start position:36% line:-1
先に述べたように

00:27:22.376 --> 00:27:25.846 align:start position:20% line:-1
xcodebuildも優れています

00:27:26.413 --> 00:27:28.415 align:start position:25% line:-1
新しいコマンドラインを追加し

00:27:28.515 --> 00:27:30.417 align:start position:27% line:-1
動作が制御可能になりました

00:27:30.517 --> 00:27:32.686 align:start position:29% line:-1
ここで２つお知らせします

00:27:34.087 --> 00:27:37.090 align:start position:12% line:-2
１つは“parallel-testing-
worker-count”で

00:27:37.191 --> 00:27:40.727 align:start position:32% line:-2
ワーカーやランナーの
数を調整します

00:27:40.828 --> 00:27:43.630 align:start position:25% line:-1
並列テスト中に行ってくれます

00:27:44.698 --> 00:27:48.402 align:start position:21% line:-1
通常 Xcodeはランナーの数を

00:27:48.502 --> 00:27:52.239 align:start position:34% line:-2
マシンのリソースや
作業量で決定します

00:27:52.840 --> 00:27:57.044 align:start position:27% line:-2
高度なマシンほど
多くのランナーが使われます

00:27:58.078 --> 00:28:01.181 align:start position:30% line:-2
しかしデフォルトの数が
機能しない時に

00:27:58.078 --> 00:28:01.181 align:start position:30% line:-2
しかしデフォルトの数が
機能しない時に

00:28:01.281 --> 00:28:03.851 align:start position:30% line:-2
コマンドラインから
オーバーライドできます

00:28:05.953 --> 00:28:08.121 align:start position:0% line:-1
次は“parallel-testing-enabled”

00:28:08.222 --> 00:28:10.657 align:start position:29% line:-1
オンオフを明確に切り替え

00:28:10.757 --> 00:28:13.894 align:start position:32% line:-2
設定をスキーム内で
オーバーライドします

00:28:16.797 --> 00:28:20.334 align:start position:25% line:-1
並列テストを実行したい場合は

00:28:20.434 --> 00:28:22.135 align:start position:34% line:-1
オンにするだけです

00:28:22.503 --> 00:28:24.271 align:start position:34% line:-1
しかし少しのコツで

00:28:24.371 --> 00:28:26.874 align:start position:25% line:-1
最大限に生かすことができます

00:28:28.041 --> 00:28:32.980 align:start position:30% line:-2
まず長時間のテストを
２つのクラスに分けます

00:28:34.214 --> 00:28:37.251 align:start position:32% line:-2
テストクラスは
並列で実行されるので

00:28:37.351 --> 00:28:40.854 align:start position:21% line:-1
最長のクラスより速くはなりません

00:28:41.822 --> 00:28:45.592 align:start position:27% line:-2
並列テストで
このような状況に気付きます

00:28:45.692 --> 00:28:49.730 align:start position:27% line:-2
１つのクラスが
全体の時間に影響するのです

00:28:50.330 --> 00:28:52.933 align:start position:29% line:-1
このクラスを２つに分けて

00:28:53.233 --> 00:28:58.539 align:start position:25% line:-2
各ランナーに
より均等に分配してみましょう

00:28:58.705 --> 00:29:01.308 align:start position:29% line:-1
大幅な時間短縮が可能です

00:28:58.705 --> 00:29:01.308 align:start position:29% line:-1
大幅な時間短縮が可能です

00:29:02.176 --> 00:29:06.046 align:start position:30% line:-2
すべてのクラスを
分配する必要はないです

00:29:06.313 --> 00:29:11.485 align:start position:23% line:-2
支障があれば
一度 試してみる価値はあります

00:29:13.854 --> 00:29:16.256 align:start position:30% line:-1
次は並列化を無効にして

00:29:16.356 --> 00:29:19.993 align:start position:30% line:-2
パフォーマンステストを
バンドルに入れます

00:29:20.627 --> 00:29:22.262 align:start position:34% line:-1
疑問に思うでしょう

00:29:22.362 --> 00:29:26.567 align:start position:25% line:-2
しかしパフォーマンステストは
システムに影響されやすく

00:29:26.667 --> 00:29:31.338 align:start position:25% line:-2
並行テストでは
ベースラインを下回りがちです

00:29:33.440 --> 00:29:37.845 align:start position:29% line:-2
最後に並列テストに
向かないものを紹介します

00:29:38.445 --> 00:29:41.315 align:start position:23% line:-1
ほとんどのテストは適しています

00:29:41.415 --> 00:29:45.919 align:start position:27% line:-2
しかしアクセス先が
共有のシステムリソースだと

00:29:46.220 --> 00:29:50.858 align:start position:30% line:-2
並列テストのために
明確な同期化が必要です

00:29:52.226 --> 00:29:57.197 align:start position:23% line:-2
詳しく知りたい人は
コードのテスト方法も聞けるので

00:29:57.297 --> 00:29:59.633 align:start position:27% line:-1
金曜のセッションを勧めます

00:29:59.733 --> 00:30:03.136 align:start position:27% line:-2
スチュアートとブライアンが
話します

00:29:59.733 --> 00:30:03.136 align:start position:27% line:-2
スチュアートとブライアンが
話します

00:30:05.372 --> 00:30:06.473 align:start position:34% line:-1
このセッションでは

00:30:06.573 --> 00:30:09.276 align:start position:23% line:-1
コードカバレッジを紹介しました

00:30:09.376 --> 00:30:12.479 align:start position:23% line:-1
動作や精度の向上についてもです

00:30:13.247 --> 00:30:17.351 align:start position:29% line:-2
そしてテストの
順序化について話しました

00:30:17.451 --> 00:30:20.521 align:start position:32% line:-1
どのテストを実行して

00:30:20.621 --> 00:30:22.923 align:start position:27% line:-1
どの順番で行うかの設定です

00:30:23.791 --> 00:30:26.827 align:start position:0% line:-1
Parallel Distributed Testingでは

00:30:26.927 --> 00:30:30.364 align:start position:32% line:-2
異なるランナーに
テストクラスを分配し

00:30:30.464 --> 00:30:32.232 align:start position:38% line:-1
並列化しました

00:30:33.433 --> 00:30:37.805 align:start position:14% line:-2
developer.apple.comで
スライドをダウンロードできます

00:30:37.905 --> 00:30:40.541 align:start position:25% line:-1
午後のラボにもお越しください

00:30:41.241 --> 00:30:43.110 align:start position:34% line:-1
皆さん 良い時間を

00:30:43.210 --> 00:30:46.747 align:start position:43% line:-1
(拍手)
