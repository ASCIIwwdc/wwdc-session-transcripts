WEBVTT

00:00:07.074 --> 00:00:16.283 align:start position:43% line:-1
(音楽)

00:00:21.722 --> 00:00:23.323 align:start position:36% line:-1
私はデビッドです

00:00:23.423 --> 00:00:27.694 align:start position:30% line:-2
後ほど同僚のタイラーと
ラッセルも登場します

00:00:27.794 --> 00:00:30.864 align:start position:23% line:-1
今回はサイズや形状を問わない―

00:00:30.964 --> 00:00:32.966 align:start position:34% line:-2
アプリケーションの
構築についてです

00:00:34.568 --> 00:00:40.107 align:start position:12% line:-2
初期iPhoneのiOS 2をご存知の方が
ここにいるかは分かりませんが

00:00:40.207 --> 00:00:42.809 align:start position:25% line:-1
当時 画面サイズは１つでした

00:00:43.310 --> 00:00:49.349 align:start position:18% line:-2
しかし今日では各種iPhoneや
iPadなどがあり サイズも様々です

00:00:49.449 --> 00:00:54.721 align:start position:16% line:-2
新たな画面と形状を持つ
iPhone Xへの対応も求められます

00:00:55.689 --> 00:01:00.561 align:start position:16% line:-2
今回は“Bagel Times”という
アプリケーションを例にしながら

00:00:55.689 --> 00:01:00.561 align:start position:16% line:-2
今回は“Bagel Times”という
アプリケーションを例にしながら

00:01:00.661 --> 00:01:04.864 align:start position:11% line:-2
iPhone XとiPhone 8に対応する
デザインを作ります

00:01:06.433 --> 00:01:10.604 align:start position:29% line:-2
今回のセッションの要点は
次の３点です

00:01:11.104 --> 00:01:13.707 align:start position:25% line:-2
１つ目はSafe Areaと
レイアウトマージン

00:01:13.807 --> 00:01:18.278 align:start position:25% line:-2
様々な画面に対応させるための
方法を取り上げます

00:01:19.346 --> 00:01:22.549 align:start position:29% line:-1
２つ目はスクロールビュー

00:01:22.649 --> 00:01:27.221 align:start position:18% line:-2
Safe Areaやマージン
UIKitの機能との関係を紹介します

00:01:28.655 --> 00:01:33.093 align:start position:21% line:-2
３つ目は アダプティブな
アプリケーションを構築するための

00:01:33.193 --> 00:01:35.295 align:start position:25% line:-1
UIKitツールについてです

00:01:35.996 --> 00:01:40.868 align:start position:23% line:-2
ではまず Safe Areaと
レイアウトマージンのお話です

00:01:42.236 --> 00:01:47.674 align:start position:16% line:-2
Safe Areaとはどのようなもので
デバイスではどう見えるのでしょう

00:01:48.275 --> 00:01:54.014 align:start position:21% line:-2
iPhone 8の矩形の画面では
全体がSafe Areaです

00:01:54.114 --> 00:01:57.518 align:start position:30% line:-2
コンテンツが
隠れる部分はありません

00:01:58.852 --> 00:02:00.454 align:start position:29% line:-1
iPhone Xの場合―

00:01:58.852 --> 00:02:00.454 align:start position:29% line:-1
iPhone Xの場合―

00:02:00.721 --> 00:02:05.025 align:start position:27% line:-2
ハードウェアが上部と下部に
スペースを有しています

00:02:05.125 --> 00:02:09.896 align:start position:23% line:-2
これらはアプリケーションの
Safe Area外となります

00:02:10.497 --> 00:02:13.534 align:start position:25% line:-1
横向きの場合も ほぼ同様です

00:02:13.634 --> 00:02:20.374 align:start position:21% line:-2
下部のホームインジケータを避けて
レイアウトする必要があります

00:02:21.308 --> 00:02:25.312 align:start position:20% line:-2
画面全体がSafe Areaでない
デバイスは他にもあります

00:02:26.880 --> 00:02:30.551 align:start position:29% line:-2
実はApple TVでも
同様の考慮が必要です

00:02:30.651 --> 00:02:32.886 align:start position:29% line:-1
一部のテレビにおいては―

00:02:32.986 --> 00:02:37.024 align:start position:25% line:-2
映像の端が画面に表示されない
ケースがあります

00:02:37.257 --> 00:02:42.029 align:start position:21% line:-2
その場合“オーバースキャン補償”
という設定で表示できます

00:02:42.496 --> 00:02:47.534 align:start position:14% line:-2
オーバースキャンで映される範囲が
アプリケーションのSafe Areaです

00:02:48.735 --> 00:02:54.074 align:start position:18% line:-2
いくつかのデバイスにおける
Safe Areaをご紹介しましたが

00:02:54.174 --> 00:03:01.215 align:start position:21% line:-2
どう使えばアダプティブな
アプリケーションが作れるでしょう

00:02:54.174 --> 00:03:01.215 align:start position:21% line:-2
どう使えばアダプティブな
アプリケーションが作れるでしょう

00:03:03.450 --> 00:03:07.621 align:start position:30% line:-2
では 任意視点について
見ていきましょう

00:03:08.055 --> 00:03:12.392 align:start position:23% line:-1
上下左右の４辺に余白があります

00:03:12.492 --> 00:03:17.064 align:start position:30% line:-2
これらの部分に
コンテンツを表示すると

00:03:17.164 --> 00:03:21.068 align:start position:30% line:-2
何らかの要素で覆われる
可能性があります

00:03:21.735 --> 00:03:24.204 align:start position:21% line:-1
UIViewでの取得に使うのは―

00:03:24.304 --> 00:03:26.673 align:start position:12% line:-1
safeAreaInsetsプロパティです

00:03:26.773 --> 00:03:30.043 align:start position:25% line:-2
UIEdgeInsets型で
上下左右の値を取得できます

00:03:31.011 --> 00:03:32.913 align:start position:18% line:-1
Auto Layoutをお使いの方は

00:03:33.013 --> 00:03:37.017 align:start position:29% line:-2
単に 安全な矩形の領域を
見たいかもしれません

00:03:37.351 --> 00:03:41.355 align:start position:7% line:-2
それは safeAreaLayoutGuideを
使えば可能です

00:03:41.455 --> 00:03:45.792 align:start position:32% line:-2
レイアウトアンカーを
扱えるようになる―

00:03:45.893 --> 00:03:48.228 align:start position:23% line:-1
UILayoutGuideです

00:03:48.328 --> 00:03:51.231 align:start position:21% line:-2
矩形を見るだけなら
layoutFrameも使えます

00:03:53.100 --> 00:04:00.607 align:start position:14% line:-2
それではSafe Areaの見え方に続き
画面遷移についてお話ししましょう

00:03:53.100 --> 00:04:00.607 align:start position:14% line:-2
それではSafe Areaの見え方に続き
画面遷移についてお話ししましょう

00:04:01.642 --> 00:04:05.679 align:start position:30% line:-2
テキストを消し
サブビューを追加します

00:04:05.779 --> 00:04:08.949 align:start position:25% line:-1
ビューの下半分が隠れましたね

00:04:10.484 --> 00:04:14.922 align:start position:27% line:-2
Safe Areaは
どう計算されるのでしょう？

00:04:15.389 --> 00:04:21.060 align:start position:21% line:-2
このサブビューは
安全な領域の外に入り込んでいます

00:04:21.161 --> 00:04:25.966 align:start position:27% line:-2
スーパービューの
左右と下部に被っていますね

00:04:26.366 --> 00:04:30.237 align:start position:27% line:-2
これらはサブビューの
UIEdgeInsetsで

00:04:30.337 --> 00:04:33.373 align:start position:16% line:-2
safeAreaInsetsの値として
示されます

00:04:33.774 --> 00:04:39.379 align:start position:5% line:-2
layoutFrameが似ている
safeAreaLayoutGuideも示されます

00:04:40.480 --> 00:04:45.252 align:start position:29% line:-2
これらのことを目にすると
ご自身のUIに―

00:04:45.352 --> 00:04:48.555 align:start position:25% line:-1
余白を追加したくなるでしょう

00:04:48.655 --> 00:04:52.693 align:start position:16% line:-2
View Controllerを使って
コントロールを追加し

00:04:52.793 --> 00:04:57.698 align:start position:21% line:-2
サブビューのSafe Areaで
追加や削除をしたいかもしれません

00:04:58.265 --> 00:05:00.300 align:start position:21% line:-1
ここで別のサブビューを追加します

00:04:58.265 --> 00:05:00.300 align:start position:21% line:-1
ここで別のサブビューを追加します

00:05:01.802 --> 00:05:05.038 align:start position:12% line:-1
View Controllerも追加します

00:05:05.172 --> 00:05:09.943 align:start position:14% line:-2
View Controllerには余白を
追加するプロパティがあるからです

00:05:10.110 --> 00:05:14.982 align:start position:2% line:-2
additionalSafeAreaInsetsという
プロパティです

00:05:15.382 --> 00:05:18.652 align:start position:21% line:-1
これから親の余白を継承してみます

00:05:19.319 --> 00:05:22.723 align:start position:5% line:-2
additionalSafeAreaInsetsを
このビューに追加し

00:05:22.923 --> 00:05:27.160 align:start position:16% line:-1
最終的なSafe Areaを取得します

00:05:28.395 --> 00:05:32.165 align:start position:27% line:-2
Safe Areaについて
他に知っておくべきことは？

00:05:32.499 --> 00:05:34.935 align:start position:30% line:-1
別の例も見てみましょう

00:05:35.035 --> 00:05:39.106 align:start position:14% line:-2
１つのビューが
親のSafe Area内に収まっています

00:05:39.273 --> 00:05:43.443 align:start position:12% line:-2
このビューのSafe Areaは ビューの
全領域をカプセル化しています

00:05:43.911 --> 00:05:48.015 align:start position:21% line:-2
１辺に近づけても
Safe Areaは広がりません

00:05:48.115 --> 00:05:51.218 align:start position:29% line:-2
親のSafe Areaを
出ていないからです

00:05:52.119 --> 00:05:58.025 align:start position:16% line:-2
もう少し動かすと Safe Areaの
下部の余白が少し大きくなります

00:05:58.125 --> 00:06:03.897 align:start position:21% line:-2
親のSafe Areaの外に出て
重なった部分が現れました

00:05:58.125 --> 00:06:03.897 align:start position:21% line:-2
親のSafe Areaの外に出て
重なった部分が現れました

00:06:04.565 --> 00:06:07.901 align:start position:32% line:-2
続けて動かすと
さらに大きくなります

00:06:08.569 --> 00:06:13.006 align:start position:30% line:-2
これを さらに動かすと
どうなると思いますか？

00:06:14.875 --> 00:06:15.976 align:start position:39% line:-1
どうでしょう

00:06:16.376 --> 00:06:21.114 align:start position:18% line:-2
ビューが親の外に出ると
Safe Areaは大きくなりません

00:06:21.582 --> 00:06:25.352 align:start position:30% line:-2
どれだけ親から離れても
変わりません

00:06:25.686 --> 00:06:30.324 align:start position:29% line:-2
“その理由と目的は？”と
お思いでしょう

00:06:30.824 --> 00:06:32.893 align:start position:25% line:-1
答えは“アニメーション”です

00:06:33.160 --> 00:06:36.597 align:start position:32% line:-2
今回はサブビューを
親の外に動かしました

00:06:36.797 --> 00:06:42.035 align:start position:16% line:-2
親と一緒に動かすためには
Safe Areaの中に置けないのです

00:06:42.369 --> 00:06:44.838 align:start position:30% line:-2
このアプリケーションを
見てください

00:06:45.138 --> 00:06:48.575 align:start position:29% line:-1
下部からビューが開きます

00:06:49.510 --> 00:06:53.447 align:start position:20% line:-2
このビューが
親のSafe Areaに接していて

00:06:53.547 --> 00:06:58.719 align:start position:23% line:-2
そして親のSafe Areaは
下部に広がるとしましょう

00:06:59.086 --> 00:07:04.558 align:start position:23% line:-2
そうなると その間このビューは
画面に留まることになり

00:06:59.086 --> 00:07:04.558 align:start position:23% line:-2
そうなると その間このビューは
画面に留まることになり

00:07:04.992 --> 00:07:08.762 align:start position:30% line:-2
後ろに表示されるものが
見えなくなります

00:07:09.062 --> 00:07:13.200 align:start position:29% line:-2
子のSafe Areaは
親から与えられる以上は

00:07:13.300 --> 00:07:15.002 align:start position:36% line:-1
広がらないのです

00:07:16.236 --> 00:07:21.942 align:start position:14% line:-2
それではSafe Areaについての話を
まとめていきます

00:07:22.209 --> 00:07:25.612 align:start position:14% line:-2
safeAreaInsetsと
safeAreaLayoutGuideは

00:07:25.712 --> 00:07:27.581 align:start position:36% line:-1
ご説明しましたね

00:07:28.015 --> 00:07:32.052 align:start position:18% line:-2
safeAreaInsetsの変更を
感知すべき時は

00:07:32.152 --> 00:07:36.190 align:start position:4% line:-2
safeAreaInsetsDidChange()を
オーバーライドします

00:07:37.491 --> 00:07:39.827 align:start position:12% line:-2
setNeedsLayout()を呼ぶのが
典型的ですが

00:07:39.927 --> 00:07:42.829 align:start position:29% line:-2
他のロジックを走らせても
構いません

00:07:43.664 --> 00:07:48.035 align:start position:14% line:-2
View Controllerが
Safe Areaの変更に対応すべき時は

00:07:48.135 --> 00:07:52.973 align:start position:0% line:-2
viewSafeAreaInsetsDidChange()を
オーバーライドします

00:07:53.607 --> 00:07:56.877 align:start position:18% line:-2
Interface Builderで
インターフェイスを作っている場合

00:07:56.977 --> 00:07:59.346 align:start position:14% line:-1
Safe Areaのプロパティが使えます

00:07:59.446 --> 00:08:05.052 align:start position:14% line:-2
Safe Areaの制約を構築するための
ビューの一覧で確認できます

00:07:59.446 --> 00:08:05.052 align:start position:14% line:-2
Safe Areaの制約を構築するための
ビューの一覧で確認できます

00:08:06.353 --> 00:08:10.390 align:start position:23% line:-2
次はレイアウトマージンについて
お話しします

00:08:13.260 --> 00:08:17.664 align:start position:30% line:-2
レイアウトマージンとは
つまり余白です

00:08:17.931 --> 00:08:21.068 align:start position:29% line:-2
通常 これらは制御可能な
プロパティで

00:08:21.168 --> 00:08:25.873 align:start position:27% line:-2
ビューの縁からのスペースを
指定できます

00:08:26.707 --> 00:08:28.175 align:start position:27% line:-1
Safe Areaと同様―

00:08:28.275 --> 00:08:33.212 align:start position:2% line:-2
UIEdgeInsets型のlayoutMargins
プロパティで参照できます

00:08:33.881 --> 00:08:38.885 align:start position:2% line:-2
昨年はdirectionalLayoutMargins
プロパティが新たに追加されました

00:08:39.153 --> 00:08:44.892 align:start position:16% line:-2
layoutMarginsは
UIEdgeInsetsの値を使います

00:08:45.125 --> 00:08:46.860 align:start position:5% line:-2
しかし
directionalLayoutMarginsは

00:08:46.960 --> 00:08:49.062 align:start position:7% line:-2
NSDirectionalEdgeInsetsを
使います

00:08:49.496 --> 00:08:51.732 align:start position:27% line:-1
２つの構造体の最大の違いは

00:08:51.832 --> 00:08:55.969 align:start position:30% line:-2
後者は 左右ではなく
前辺と後辺を扱う点です

00:08:56.069 --> 00:09:01.842 align:start position:25% line:-2
RTLレイアウトに対応する
マージンを作るのに役立ちます

00:08:56.069 --> 00:09:01.842 align:start position:25% line:-2
RTLレイアウトに対応する
マージンを作るのに役立ちます

00:09:01.942 --> 00:09:06.180 align:start position:5% line:-2
directionalLayoutMarginsを
使えば 左右の入れ替えは不要です

00:09:07.314 --> 00:09:13.020 align:start position:12% line:-2
Safe Areaだけでなくマージンにも
layoutMarginsGuideがあり

00:09:13.453 --> 00:09:17.891 align:start position:25% line:-2
マージンに対するコンテンツを
レイアウトできます

00:09:18.292 --> 00:09:22.629 align:start position:29% line:-2
ではコンテンツを
ビューの中に入れましょう

00:09:24.064 --> 00:09:29.670 align:start position:14% line:-2
レイアウトマージンとSafe Areaを
併せてお話ししましたが

00:09:30.571 --> 00:09:33.407 align:start position:25% line:-1
２つは どう関わるのでしょう

00:09:34.208 --> 00:09:36.743 align:start position:27% line:-1
再度 マーカーで説明します

00:09:37.077 --> 00:09:40.814 align:start position:32% line:-2
おっと その前に
この話をしておきます

00:09:41.949 --> 00:09:44.685 align:start position:25% line:-2
デフォルトでは
Safe Areaを構築し―

00:09:45.452 --> 00:09:52.559 align:start position:14% line:-2
その後 そのSafe Areaを考慮して
レイアウトマージンを構築します

00:09:52.693 --> 00:09:58.465 align:start position:21% line:-2
デフォルトでは この方法が
ベストであることは明らかでしょう

00:09:58.565 --> 00:10:01.168 align:start position:29% line:-2
Safe Areaの中の
レイアウトマージンは

00:09:58.565 --> 00:10:01.168 align:start position:29% line:-2
Safe Areaの中の
レイアウトマージンは

00:10:01.268 --> 00:10:04.972 align:start position:27% line:-2
レイアウトに対する
付加的な余白を示すからです

00:10:05.906 --> 00:10:11.178 align:start position:25% line:-2
“それがベストではない
場合もある”とお思いでしょう

00:10:11.378 --> 00:10:14.114 align:start position:27% line:-1
ですので別の方法もあります

00:10:14.248 --> 00:10:20.487 align:start position:2% line:-2
insetsLayoutMarginsFromSafe
Areaをtrueからfalseにすれば

00:10:20.954 --> 00:10:24.491 align:start position:30% line:-2
レイアウトマージンは
ビューの範囲に戻ります

00:10:24.591 --> 00:10:28.028 align:start position:14% line:-1
Safe Areaにカプセル化されません

00:10:28.529 --> 00:10:30.297 align:start position:34% line:-1
他にできることは？

00:10:30.898 --> 00:10:36.637 align:start position:9% line:-2
デフォルトではsafeAreaMarginsは
下位階層に伝播しますが

00:10:37.638 --> 00:10:40.140 align:start position:18% line:-1
layoutMarginsは違います

00:10:40.240 --> 00:10:44.811 align:start position:21% line:-2
デフォルトでは全ビュー階層を示す
Safe Areaを考慮せず

00:10:44.912 --> 00:10:48.982 align:start position:32% line:-2
独立したレイアウトが
必要かもしれません

00:10:50.284 --> 00:10:54.188 align:start position:32% line:-2
しかし伝播が必要なら
ビューごとに―

00:10:54.521 --> 00:10:59.426 align:start position:7% line:-2
preservesSuperviewLayout
Marginsをfalseからtrueにします

00:11:00.027 --> 00:11:04.798 align:start position:29% line:-2
親と子のビューの間で
すべてが自然に並ぶよう―

00:11:04.898 --> 00:11:09.336 align:start position:29% line:-2
親よりも小さいマージンを
設置します

00:11:11.271 --> 00:11:17.711 align:start position:11% line:-2
View Controllerのビューの
layoutMarginsを変えたいとします

00:11:18.212 --> 00:11:19.646 align:start position:38% line:-1
デフォルトでは

00:11:19.746 --> 00:11:24.518 align:start position:29% line:-2
ビューに対するマージンは
このようになります

00:11:25.085 --> 00:11:31.558 align:start position:0% line:-2
昨年 systemMinimumLayoutMargins
というプロパティが追加されました

00:11:31.792 --> 00:11:32.993 align:start position:34% line:-1
これらのマージンは

00:11:33.093 --> 00:11:40.033 align:start position:21% line:-2
現在 与えているマージンに対して
統合された最小のものです

00:11:40.133 --> 00:11:47.007 align:start position:20% line:-2
UIKitが与える左右のマージンを
邪魔せずに 上下にも追加できます

00:11:47.441 --> 00:11:50.177 align:start position:30% line:-2
さらなるコントロールが
欲しい場合は

00:11:50.344 --> 00:11:56.250 align:start position:5% line:-2
viewRespectsSystemMinimum
LayoutMarginsが使えます

00:11:56.650 --> 00:12:00.721 align:start position:29% line:-2
マージンを完全に
コントロールしたい場合は

00:11:56.650 --> 00:12:00.721 align:start position:29% line:-2
マージンを完全に
コントロールしたい場合は

00:12:00.821 --> 00:12:06.827 align:start position:20% line:-2
このプロパティをfalseにすれば
マージンは記述のとおりになります

00:12:07.995 --> 00:12:13.333 align:start position:18% line:-2
それでは UIViewのプロパティを
まとめましょう

00:12:13.433 --> 00:12:17.905 align:start position:16% line:-2
layoutMarginsは上下左右の
EdgeInsetsを設定します

00:12:18.305 --> 00:12:23.810 align:start position:5% line:-2
directionalLayoutMarginsは
RTLレイアウトに適しています

00:12:24.411 --> 00:12:29.082 align:start position:16% line:-2
layoutMarginsGuideは
Auto Layoutと使えます

00:12:29.750 --> 00:12:33.787 align:start position:20% line:-2
そしてlayoutMarginsに
変更があった際は

00:12:33.887 --> 00:12:38.559 align:start position:5% line:-2
layoutMarginsDidChange()を
オーバーライドしてください

00:12:39.293 --> 00:12:43.230 align:start position:18% line:-2
Interface Builderで
マージンの制約を作る際は

00:12:43.330 --> 00:12:46.033 align:start position:9% line:-2
“Constrain to margins”に
チェックを入れます

00:12:46.400 --> 00:12:50.571 align:start position:27% line:-2
次はタイラーから
スクロールビューのお話です

00:12:50.671 --> 00:12:57.077 align:start position:43% line:-1
(拍手)

00:12:58.679 --> 00:12:59.847 align:start position:41% line:-1
ありがとう

00:13:00.113 --> 00:13:01.181 align:start position:41% line:-1
こんにちは

00:13:01.415 --> 00:13:05.586 align:start position:21% line:-2
私からはスクロールビューについて
お話しします

00:13:05.686 --> 00:13:09.389 align:start position:30% line:-2
スクロールビューは
iOSの大事な要素です

00:13:09.523 --> 00:13:14.895 align:start position:23% line:-2
テーブルビューやテキストビュー
コレクションビューに加え

00:13:14.995 --> 00:13:18.499 align:start position:25% line:-2
カスタムアプリケーションにも
使われています

00:13:18.966 --> 00:13:24.204 align:start position:14% line:-2
私たちは今 Bagel Timesという
アプリケーションに注力しています

00:13:24.972 --> 00:13:26.940 align:start position:30% line:-1
こちらが記事の画面です

00:13:27.040 --> 00:13:30.444 align:start position:29% line:-2
スクロールビューの中央に
記事が配置されています

00:13:30.544 --> 00:13:34.715 align:start position:27% line:-2
これは当社のライターによる
ハイクオリティな記事です

00:13:34.815 --> 00:13:39.353 align:start position:21% line:-2
Apple Parkから得られる
インスピレーションを探っています

00:13:39.753 --> 00:13:45.759 align:start position:23% line:-2
異なる形状やサイズのデバイスに
コンテンツを対応させるために

00:13:45.859 --> 00:13:50.998 align:start position:21% line:-2
まずはスクロールビューの使い方を
おさらいしましょう

00:13:51.999 --> 00:13:57.437 align:start position:27% line:-2
全画面のスクロールビューを
例として進めていきます

00:13:57.805 --> 00:14:01.575 align:start position:29% line:-2
左側は 一般的と思われる
デバイスです

00:13:57.805 --> 00:14:01.575 align:start position:29% line:-2
左側は 一般的と思われる
デバイスです

00:14:01.675 --> 00:14:07.481 align:start position:25% line:-2
右側は ダイアグラムの中で
何が起きているのかを示します

00:14:07.948 --> 00:14:13.720 align:start position:25% line:-2
今回のお話は すべてy軸の
縦のスクロールについてですが

00:14:13.820 --> 00:14:16.924 align:start position:27% line:-1
x軸にも同様に応用できます

00:14:17.124 --> 00:14:20.360 align:start position:25% line:-1
説明のために単純値を使うので

00:14:20.461 --> 00:14:23.897 align:start position:29% line:-2
スクロールビューの高さは
400ptとします

00:14:25.666 --> 00:14:29.269 align:start position:30% line:-2
スクロールビューの中に
コンテンツがあります

00:14:29.837 --> 00:14:33.674 align:start position:29% line:-2
例えて言うなら
スクロールビューは額縁で

00:14:33.807 --> 00:14:37.945 align:start position:27% line:-2
スクロールビューのサイズが
額縁のサイズです

00:14:38.045 --> 00:14:40.647 align:start position:25% line:-1
コンテンツは額縁の中の絵です

00:14:40.747 --> 00:14:44.751 align:start position:27% line:-2
そしてそのコンテンツは
スライドすることができます

00:14:45.018 --> 00:14:48.121 align:start position:30% line:-2
今回の例でも
縦にスクロールできます

00:14:48.222 --> 00:14:55.329 align:start position:21% line:-2
これはスクロールビューの高さより
コンテンツの方が縦に長いからです

00:14:56.029 --> 00:14:58.465 align:start position:25% line:-1
クリッピングをオフにしたので

00:14:58.565 --> 00:15:01.268 align:start position:29% line:-1
右側で舞台裏をのぞけます

00:14:58.565 --> 00:15:01.268 align:start position:29% line:-1
右側で舞台裏をのぞけます

00:15:02.202 --> 00:15:03.837 align:start position:34% line:-1
スクロールビューは

00:15:03.937 --> 00:15:08.442 align:start position:18% line:-2
スクロール位置を示すために
contentOffsetを使います

00:15:09.243 --> 00:15:12.880 align:start position:20% line:-2
現在の位置は一番上なので
contentOffsetは0です

00:15:12.980 --> 00:15:17.818 align:start position:23% line:-2
コンテンツとスクロールビューの
上辺がそろっています

00:15:18.819 --> 00:15:23.090 align:start position:29% line:-2
では スクロールビューを
一番下まで下げ

00:15:23.190 --> 00:15:25.859 align:start position:29% line:-1
コンテンツを上げましょう

00:15:26.226 --> 00:15:33.000 align:start position:9% line:-2
ご覧のとおり 下辺まで下がると
contentOffsetは100に増えました

00:15:33.100 --> 00:15:36.103 align:start position:29% line:-2
これはスクロールビューの
上辺が―

00:15:36.203 --> 00:15:39.706 align:start position:25% line:-2
コンテンツの上辺より
100pt低いということです

00:15:40.407 --> 00:15:45.946 align:start position:16% line:-2
contentOffsetを0にすると
スクロールビューは上に戻ります

00:15:46.280 --> 00:15:47.648 align:start position:38% line:-1
最初の形ですね

00:15:48.582 --> 00:15:52.119 align:start position:21% line:-1
これがスクロールビューの基本です

00:15:52.286 --> 00:15:54.988 align:start position:34% line:-2
次は 非常に大事な
コンセプトである―

00:15:55.088 --> 00:15:58.492 align:start position:30% line:-2
スクロール可能な領域の
拡大についてです

00:15:58.592 --> 00:16:01.662 align:start position:23% line:-2
contentInsetという
プロパティを使います

00:15:58.592 --> 00:16:01.662 align:start position:23% line:-2
contentInsetという
プロパティを使います

00:16:02.596 --> 00:16:04.331 align:start position:27% line:-1
contentInsetは

00:16:04.431 --> 00:16:11.839 align:start position:25% line:-2
スクロール可能な領域の縁から
コンテンツ内へ余白を与えます

00:16:12.306 --> 00:16:13.774 align:start position:36% line:-1
これを追加すれば

00:16:13.874 --> 00:16:19.379 align:start position:21% line:-2
スクロールビューがより広い領域を
スクロールできるようになるのです

00:16:19.580 --> 00:16:23.584 align:start position:18% line:-2
それでは contentInsetを
上辺に設定してみます

00:16:24.318 --> 00:16:26.687 align:start position:12% line:-1
contentInsetを20に設定すると

00:16:27.020 --> 00:16:32.426 align:start position:21% line:-2
スクロールビューの上辺が広がり
スクロール可能な領域が増えました

00:16:33.093 --> 00:16:36.697 align:start position:12% line:-2
現在 contentOffsetは0なので
コンテンツは―

00:16:36.797 --> 00:16:39.633 align:start position:29% line:-2
スクロールビューの上辺と
そろったままです

00:16:39.733 --> 00:16:43.804 align:start position:29% line:-2
ですがスクロールビューは
もう少し上に行けます

00:16:44.304 --> 00:16:48.242 align:start position:32% line:-2
スクロールして
変化を見てみましょう

00:16:48.809 --> 00:16:54.515 align:start position:11% line:-2
先ほどと同じく 下辺まで下がると
contentOffsetは100に増えます

00:16:54.815 --> 00:17:00.254 align:start position:14% line:-2
下辺のcontentInsetは変わらず
0だからです

00:16:54.815 --> 00:17:00.254 align:start position:14% line:-2
下辺のcontentInsetは変わらず
0だからです

00:17:00.888 --> 00:17:05.291 align:start position:30% line:-2
ですが 一番上まで
スクロールして戻すと―

00:17:05.392 --> 00:17:08.762 align:start position:12% line:-1
contentOffsetが負数になります

00:17:09.630 --> 00:17:14.067 align:start position:23% line:-2
コンテンツの上辺を超えて
スクロール可能となったからです

00:17:14.166 --> 00:17:18.906 align:start position:21% line:-2
負数の分だけ より
スクロールできるようになりました

00:17:20.307 --> 00:17:24.912 align:start position:7% line:-2
iOS 7以降は このcontentInsetが
非常に重要です

00:17:25.012 --> 00:17:30.150 align:start position:18% line:-2
iOS 7では システム全体にわたり
各種バーが半透明になったからです

00:17:30.250 --> 00:17:33.654 align:start position:29% line:-2
コンテンツは端から端まで
表示できます

00:17:33.754 --> 00:17:39.593 align:start position:23% line:-2
バーの下に入ったコンテンツは
美しくカラフルに ぼやけますね

00:17:39.693 --> 00:17:42.162 align:start position:27% line:-2
ツールバーや
ナビゲーションバーなどです

00:17:42.496 --> 00:17:45.299 align:start position:25% line:-1
様々な箇所で使われているので

00:17:45.399 --> 00:17:50.370 align:start position:11% line:-2
スクロールビューにcontentInsetを
自動で設定したいところです

00:17:50.604 --> 00:17:53.674 align:start position:11% line:-2
以前 便利なプロパティが
UIViewControllerにありました

00:17:54.174 --> 00:17:57.644 align:start position:14% line:-2
automaticallyAdjusts
ScrollViewInsetsです

00:17:57.744 --> 00:18:03.250 align:start position:25% line:-2
ナビゲーションバーや
ツールバーなどと重なる場合に

00:17:57.744 --> 00:18:03.250 align:start position:25% line:-2
ナビゲーションバーや
ツールバーなどと重なる場合に

00:18:03.350 --> 00:18:08.288 align:start position:11% line:-2
スクロールビューにcontentInsetを
自動で設定できるものでした

00:18:08.589 --> 00:18:11.425 align:start position:7% line:-1
Navigation Controllerの中に

00:18:11.525 --> 00:18:14.528 align:start position:32% line:-2
スクロールビューが
含まれる場合にもです

00:18:15.562 --> 00:18:17.931 align:start position:29% line:-1
大抵はうまくいきましたが

00:18:18.031 --> 00:18:23.136 align:start position:25% line:-2
UIScrollViewに
手を加えている場合は別でした

00:18:23.237 --> 00:18:29.476 align:start position:14% line:-2
もし コードとUIKitの両方が
contentInsetを設定していると

00:18:29.576 --> 00:18:30.744 align:start position:36% line:-1
複雑だったのです

00:18:31.578 --> 00:18:33.781 align:start position:29% line:-1
そこでiOS 11以降は

00:18:33.881 --> 00:18:39.319 align:start position:25% line:-2
より明確でパワフルな方法で
自動化できるようになりました

00:18:39.620 --> 00:18:46.894 align:start position:9% line:-2
adjustedContentInsetという
UIScrollViewのプロパティです

00:18:48.228 --> 00:18:54.234 align:start position:21% line:-2
iOS 11から新たに導入された
このプロパティは読み取り専用で

00:18:54.334 --> 00:18:59.072 align:start position:29% line:-2
スクロールビューの動作を
記述するものです

00:18:59.573 --> 00:19:05.679 align:start position:11% line:-2
“contentInsetとの違いは何だ？”
と疑問に思うかもしれません

00:18:59.573 --> 00:19:05.679 align:start position:11% line:-2
“contentInsetとの違いは何だ？”
と疑問に思うかもしれません

00:19:05.779 --> 00:19:08.448 align:start position:30% line:-1
早速 見ていきましょう

00:19:09.149 --> 00:19:14.755 align:start position:11% line:-2
adjustedContentInsetは
アプリケーションのcontentInsetと

00:19:14.855 --> 00:19:18.959 align:start position:23% line:-2
自動でシステムやUIKitから
与えられる余白を併せたものです

00:19:19.626 --> 00:19:24.731 align:start position:25% line:-2
これらを別々に認識することで
状況を判断しやすくなります

00:19:25.299 --> 00:19:30.070 align:start position:27% line:-2
いつどこでシステムの余白を
得るのか疑問でしょう

00:19:30.971 --> 00:19:34.775 align:start position:21% line:-2
最も一般的なケースは
safeAreaInsetsです

00:19:35.008 --> 00:19:36.677 align:start position:38% line:-1
見てみましょう

00:19:36.977 --> 00:19:41.782 align:start position:16% line:-2
ベーシックなダイアグラムに戻し
safeAreaInsetsを加えます

00:19:42.616 --> 00:19:47.187 align:start position:14% line:-2
現状では safeAreaInsetsは
どちらの辺にもありませんが

00:19:47.287 --> 00:19:51.391 align:start position:16% line:-2
これから上辺に
safeAreaInsetsを加えます

00:19:52.326 --> 00:19:58.732 align:start position:11% line:-2
デフォルトではスクロールビューは
自動でこれらのsafeAreaInsetsを

00:19:58.832 --> 00:20:02.769 align:start position:12% line:-2
adjustedContentInsetに
取り込みます

00:19:58.832 --> 00:20:02.769 align:start position:12% line:-2
adjustedContentInsetに
取り込みます

00:20:02.870 --> 00:20:05.505 align:start position:32% line:-2
これは縦スクロールが
できるからです

00:20:05.706 --> 00:20:09.977 align:start position:30% line:-2
スクロール可能な領域が
自動で増えたことで

00:20:10.077 --> 00:20:17.484 align:start position:21% line:-2
上辺のバーやディスプレイの縁に
コンテンツが隠れなくなったのです

00:20:19.052 --> 00:20:23.590 align:start position:25% line:-2
同じスクロールビューを
異なるデバイスに表示しました

00:20:23.690 --> 00:20:26.994 align:start position:7% line:-1
左がiPhone Xで 右がiPhone 8です

00:20:27.094 --> 00:20:32.633 align:start position:25% line:-2
より高いステータスバーや
センサーハウジングがあるため

00:20:32.733 --> 00:20:36.403 align:start position:16% line:-2
上辺のSafe area insetは
iPhone Xの方が大きいです

00:20:36.537 --> 00:20:41.775 align:start position:23% line:-2
灰色に見えるスクロールビューの
上辺の余白も より広いです

00:20:42.543 --> 00:20:47.781 align:start position:21% line:-2
これが スクロールビューが自動で
デバイスに対応する方法の１つです

00:20:48.248 --> 00:20:51.919 align:start position:30% line:-2
ではダイアグラムに戻り
別のお話をしましょう

00:20:52.753 --> 00:20:56.890 align:start position:14% line:-2
上辺にsafeAreaInsetsがある
スクロールビューに

00:20:56.990 --> 00:20:59.726 align:start position:30% line:-1
サブビューを追加します

00:20:59.827 --> 00:21:02.095 align:start position:27% line:-1
コンテンツ領域に入りました

00:20:59.827 --> 00:21:02.095 align:start position:27% line:-1
コンテンツ領域に入りました

00:21:02.196 --> 00:21:07.100 align:start position:14% line:-2
スクロールビューのSafe Area内に
完全に収まっています

00:21:08.035 --> 00:21:12.473 align:start position:27% line:-2
ですが スクロールビューを
下にスクロールすると

00:21:12.639 --> 00:21:18.912 align:start position:16% line:-2
サブビューがスクロールビューの
Safe Area外に出てしまいました

00:21:19.546 --> 00:21:23.684 align:start position:14% line:-2
safeAreaInsetsの伝播の話に
基づけば サブビューは

00:21:23.784 --> 00:21:29.690 align:start position:12% line:-2
自身の上辺のsafeAreaInsetsを
見るのだと思うかもしれませんね

00:21:30.390 --> 00:21:32.159 align:start position:39% line:-1
実は違います

00:21:32.593 --> 00:21:35.062 align:start position:27% line:-1
スクロールビューは自動で―

00:21:35.162 --> 00:21:39.833 align:start position:12% line:-2
adjustedContentInsetに
safeAreaInsetsを取り込みます

00:21:39.933 --> 00:21:45.205 align:start position:23% line:-2
そうすると これらの辺の余白は
サブビューに伝播されないのです

00:21:46.240 --> 00:21:47.674 align:start position:39% line:-1
重要な点です

00:21:48.141 --> 00:21:53.881 align:start position:14% line:-2
スクロールビューはSafe Area内で
コンテンツをスクロールさせます

00:21:54.448 --> 00:22:01.488 align:start position:12% line:-2
もしスクロール領域を広げるための
safeAreaInsetsまで伝播したら

00:21:54.448 --> 00:22:01.488 align:start position:12% line:-2
もしスクロール領域を広げるための
safeAreaInsetsまで伝播したら

00:22:01.588 --> 00:22:06.460 align:start position:25% line:-2
異なる場所に同じ余白が
重複するような状態になります

00:22:06.560 --> 00:22:11.765 align:start position:12% line:-2
adjustedContentInsetに
取り込まれたsafeAreaInsetsを

00:22:11.865 --> 00:22:17.304 align:start position:23% line:-2
スクロールの軸上のサブビューは
まったく認識しないのです

00:22:18.438 --> 00:22:19.773 align:start position:41% line:-1
では次に―

00:22:19.873 --> 00:22:25.179 align:start position:16% line:-2
スクロールビューとSafe Areaの
連携を操るオプションを紹介します

00:22:26.847 --> 00:22:31.919 align:start position:5% line:-2
UIScrollViewのcontentInset
AdjustmentBehaviorです

00:22:32.019 --> 00:22:36.023 align:start position:9% line:-2
ご覧のとおり
Interface Builderでも使えます

00:22:36.557 --> 00:22:39.126 align:start position:16% line:-1
デフォルトの値はAutomaticです

00:22:39.226 --> 00:22:44.932 align:start position:21% line:-2
ほとんどの場合は
デフォルトの値で問題ありませんが

00:22:45.165 --> 00:22:50.437 align:start position:25% line:-2
何ができるのかを理解するため
オプションを見ていきましょう

00:22:50.537 --> 00:22:52.973 align:start position:32% line:-1
選択肢を広げられます

00:22:53.340 --> 00:22:58.378 align:start position:23% line:-2
まずはこの中から
alwaysの挙動についてです

00:22:58.479 --> 00:23:00.647 align:start position:27% line:-1
これは分かりやすいはずです

00:22:58.479 --> 00:23:00.647 align:start position:27% line:-1
これは分かりやすいはずです

00:23:00.747 --> 00:23:05.886 align:start position:21% line:-2
safeAreaInsetsなど
あらゆるシステムの余白をいつでも

00:23:05.986 --> 00:23:09.289 align:start position:12% line:-2
adjustedContentInsetに
取り込みます

00:23:09.389 --> 00:23:11.458 align:start position:34% line:-1
この例でもそうです

00:23:11.558 --> 00:23:14.695 align:start position:16% line:-2
上部と下部にのみ
safeAreaInsetsがあります

00:23:14.795 --> 00:23:19.032 align:start position:25% line:-2
これらが取り込まれるので
コンテンツはバーに隠れません

00:23:19.132 --> 00:23:23.070 align:start position:23% line:-2
水平方向の左右には
余白はないので問題ありませんが

00:23:23.170 --> 00:23:29.576 align:start position:14% line:-2
例えばiPhone Xでテーブルビューを
横向きで表示する際は要注意です

00:23:29.743 --> 00:23:31.678 align:start position:11% line:-1
左右にsafeAreaInsetsがあります

00:23:31.778 --> 00:23:36.717 align:start position:21% line:-2
alwaysの挙動を使えば
テーブルビューはそれらを取り込み

00:23:36.817 --> 00:23:41.188 align:start position:21% line:-2
スクロール領域が増え 水平方向に
スクロール可能となります

00:23:41.588 --> 00:23:42.923 align:start position:39% line:-1
困りますよね

00:23:43.757 --> 00:23:47.227 align:start position:12% line:-2
それを解決するのが
次のscrollableAxesの挙動です

00:23:47.828 --> 00:23:53.734 align:start position:23% line:-2
縦軸と横軸にあるものが
別々に考慮されるようになります

00:23:53.834 --> 00:23:59.139 align:start position:21% line:-2
例えばコンテンツサイズが
場合に応じて幅や高さを上回ったり

00:23:59.239 --> 00:24:01.942 align:start position:9% line:-1
alwaysBounceHorizontalや

00:23:59.239 --> 00:24:01.942 align:start position:9% line:-1
alwaysBounceHorizontalや

00:24:02.009 --> 00:24:04.511 align:start position:12% line:-2
alwaysBounceVerticalを
trueにしたりする時です

00:24:04.745 --> 00:24:07.514 align:start position:27% line:-2
このような時に
スクロール可能な軸を考慮し

00:24:07.614 --> 00:24:11.785 align:start position:12% line:-2
adjustedContentInsetに
システムの余白を取り込みます

00:24:11.885 --> 00:24:15.055 align:start position:25% line:-2
後ろの例では
長い記事がスクロールできます

00:24:15.489 --> 00:24:18.292 align:start position:23% line:-1
自動で余白が取り込まれたのです

00:24:18.392 --> 00:24:20.861 align:start position:29% line:-1
短い記事も見てみましょう

00:24:21.328 --> 00:24:23.163 align:start position:32% line:-1
こちらが短い記事です

00:24:23.363 --> 00:24:26.733 align:start position:29% line:-2
ナビゲーションバーの下を
見てみましょう

00:24:26.833 --> 00:24:27.534 align:start position:45% line:-1
おっと

00:24:27.968 --> 00:24:30.971 align:start position:30% line:-2
スクロールできないため
システムの余白を失い―

00:24:31.071 --> 00:24:34.074 align:start position:32% line:-2
記事タイトルが
バーの下に隠れました

00:24:34.274 --> 00:24:37.811 align:start position:34% line:-2
それでは解決方法を
ご紹介しましょう

00:24:37.911 --> 00:24:42.683 align:start position:12% line:-2
alwaysBounceVerticalを
設定するのも ひとつの手でしょう

00:24:42.783 --> 00:24:45.652 align:start position:21% line:-1
常に縦スクロールが可能になります

00:24:45.752 --> 00:24:49.189 align:start position:14% line:-1
またはautomaticの挙動も使えます

00:24:49.556 --> 00:24:54.261 align:start position:16% line:-2
先ほどのscrollableAxesと
似た働きをしますが

00:24:54.361 --> 00:24:58.198 align:start position:21% line:-1
さらに別の挙動も可能となるのです

00:24:58.298 --> 00:25:02.503 align:start position:7% line:-2
Navigation Controllerの中に
スクロールビューが含まれる場合

00:24:58.298 --> 00:25:02.503 align:start position:7% line:-2
Navigation Controllerの中に
スクロールビューが含まれる場合

00:25:02.603 --> 00:25:05.772 align:start position:18% line:-2
上部と下部の
contentInsetを調節します

00:25:05.873 --> 00:25:10.210 align:start position:30% line:-2
これは縦スクロールが
できない場合も同じです

00:25:10.310 --> 00:25:15.249 align:start position:29% line:-2
今回のような短い記事でも
適切な余白を得られます

00:25:15.349 --> 00:25:19.286 align:start position:25% line:-2
一般的に要求される挙動なので
これがデフォルトです

00:25:19.386 --> 00:25:25.592 align:start position:0% line:-2
しかしautomaticallyAdjustsScroll
ViewInsetsをfalseにしていると

00:25:25.692 --> 00:25:30.531 align:start position:11% line:-2
この挙動は無効となり
scrollableAxesと同様になります

00:25:31.131 --> 00:25:34.668 align:start position:27% line:-2
そこで登場するのが
最後の挙動 neverです

00:25:35.435 --> 00:25:41.308 align:start position:16% line:-2
これを使えば スクロールビューは
contentInsetを調節しません

00:25:42.009 --> 00:25:44.912 align:start position:21% line:-1
しかし そうすると弊害があります

00:25:45.712 --> 00:25:47.915 align:start position:27% line:-1
第一に スクロールビューが

00:25:48.015 --> 00:25:52.920 align:start position:20% line:-2
すべての辺においてsafeArea
Insetsを伝播してしまいます

00:25:53.020 --> 00:25:57.758 align:start position:27% line:-2
これは 先ほど述べたような
厄介な挙動を招きます

00:25:57.858 --> 00:26:01.562 align:start position:20% line:-2
例えばSafe Areaと関連する
レイアウトマージンが

00:25:57.858 --> 00:26:01.562 align:start position:20% line:-2
例えばSafe Areaと関連する
レイアウトマージンが

00:26:01.662 --> 00:26:05.632 align:start position:32% line:-2
この挙動により
変わったりするのです

00:26:06.400 --> 00:26:13.307 align:start position:7% line:-2
scrollIndicatorInsetsなどの
便利な自動の挙動も無効になります

00:26:13.640 --> 00:26:17.678 align:start position:23% line:-1
オンラインでQ&Aを確認したら

00:26:17.778 --> 00:26:22.816 align:start position:18% line:-2
このプロパティはneverにすべきと
勧められたとします

00:26:22.916 --> 00:26:27.921 align:start position:29% line:-2
オーバーレイの追加を
システムに知らせたければ

00:26:28.021 --> 00:26:33.794 align:start position:18% line:-2
追加でsafeAreaInsetsを
使うことを検討してみてください

00:26:33.894 --> 00:26:40.968 align:start position:11% line:-2
もしくはcontentInsetプロパティを
直接 修正してもいいでしょう

00:26:41.068 --> 00:26:47.107 align:start position:5% line:-2
効果的なadjustedContentInsetの
ために追加や削除を行うのです

00:26:47.574 --> 00:26:52.746 align:start position:27% line:-2
それでは最後の総括を
ラッセルにお願いしましょう

00:26:53.213 --> 00:26:57.184 align:start position:43% line:-1
(拍手)

00:26:58.252 --> 00:26:59.286 align:start position:41% line:-1
ありがとう

00:27:00.420 --> 00:27:06.493 align:start position:20% line:-2
当社は異なる環境に対応するAPIを
これまで多数 提供してきました

00:27:06.593 --> 00:27:09.463 align:start position:14% line:-1
中でもSafe Areaは新しいものです

00:27:09.563 --> 00:27:14.234 align:start position:16% line:-2
各種コンセプトとSafe Areaとの
関連をご紹介します

00:27:15.836 --> 00:27:19.139 align:start position:29% line:-2
これはアプリケーションの
最初の画面です

00:27:19.239 --> 00:27:23.677 align:start position:12% line:-2
Tab Bar Controllerや
Navigation Controller

00:27:23.777 --> 00:27:26.547 align:start position:23% line:-2
そしてContent View
Controllerがあります

00:27:27.414 --> 00:27:31.919 align:start position:9% line:-2
３つのView Controllerのビューは
どれもフルスクリーンです

00:27:32.085 --> 00:27:35.889 align:start position:21% line:-2
これにより ホームインジケータや
ステータスバーの下で

00:27:35.989 --> 00:27:38.625 align:start position:23% line:-2
タブバーやナビゲーションバーが
拡大します

00:27:38.725 --> 00:27:42.095 align:start position:34% line:-2
コンテンツも拡大し
スクロールします

00:27:43.630 --> 00:27:49.036 align:start position:23% line:-2
ですがこれらのオーバーラップは
避けなければなりません

00:27:50.204 --> 00:27:53.974 align:start position:11% line:-2
safeAreaInsetsはTab Bar
Controllerを介してスタートします

00:27:54.074 --> 00:27:56.109 align:start position:16% line:-1
Tab Bar Controllerは

00:27:56.210 --> 00:27:59.780 align:start position:23% line:-2
ホームインジケータとステータス
バーの余白のみを受け取ります

00:28:00.647 --> 00:28:03.851 align:start position:11% line:-2
Navigation Controllerは
その内側にあるので

00:28:03.951 --> 00:28:07.821 align:start position:16% line:-2
タブバーを構成する
下部のSafe Areaも受け取ります

00:28:08.388 --> 00:28:13.293 align:start position:2% line:-2
Content View Controllerは上下の
safeAreaInsetsを受け取ります

00:28:14.795 --> 00:28:20.500 align:start position:9% line:-2
横向きになってもsafeAreaInsetsが
上部と下部に確認できます

00:28:20.601 --> 00:28:26.273 align:start position:27% line:-2
しかし画面サイズに合わせて
左右にも余白があります

00:28:26.373 --> 00:28:30.978 align:start position:9% line:-2
View Controllerの階層上位にある
画面から伝播されたものです

00:28:32.146 --> 00:28:34.515 align:start position:30% line:-1
今から この例を使って

00:28:34.615 --> 00:28:40.220 align:start position:14% line:-2
独自のビューを実装する場合の
Safe Areaの使い方を考えましょう

00:28:40.721 --> 00:28:45.392 align:start position:14% line:-2
このカスタムビューは iPhone Xで
実行されているとは知らず

00:28:45.492 --> 00:28:49.730 align:start position:4% line:-2
Container View Controllerの
中にあることも知りません

00:28:50.531 --> 00:28:53.033 align:start position:25% line:-1
これはカプセル化の考え方です

00:28:53.133 --> 00:28:59.006 align:start position:16% line:-2
もしビューが４辺で与えられた
safeAreaInsetsだけを読み

00:28:59.106 --> 00:29:04.678 align:start position:12% line:-2
異なる任意のsafeAreaInsetsに
適応できるとしましょう

00:28:59.106 --> 00:29:04.678 align:start position:12% line:-2
異なる任意のsafeAreaInsetsに
適応できるとしましょう

00:29:04.812 --> 00:29:07.514 align:start position:25% line:-1
そうすると それらのビューは

00:29:07.614 --> 00:29:14.154 align:start position:21% line:-2
アプリケーション全体で動かせ
環境によって異なる実行も可能です

00:29:16.523 --> 00:29:20.794 align:start position:30% line:-2
次は ステータスバーを
隠す方法についてです

00:29:22.095 --> 00:29:24.364 align:start position:29% line:-1
ステータスバーを隠すには

00:29:24.464 --> 00:29:29.736 align:start position:25% line:-2
矩形画面の縦スクリーンで
20ptの範囲が要求されます

00:29:30.737 --> 00:29:35.042 align:start position:2% line:-2
方法は prefersStatusBarHiddenを
オーバーライドし

00:29:35.142 --> 00:29:37.344 align:start position:30% line:-1
trueとするだけです

00:29:37.444 --> 00:29:41.615 align:start position:9% line:-2
これは内包するView Controllerの
階層にも伝播され

00:29:41.715 --> 00:29:45.385 align:start position:21% line:-1
システムのルートにも尊重されます

00:29:46.587 --> 00:29:52.993 align:start position:14% line:-2
しかしiPhone Xでは 同じ方法では
センサーハウジングが隠れません

00:29:53.160 --> 00:29:55.662 align:start position:21% line:-1
この下にコンテンツは入りませんね

00:29:55.762 --> 00:29:57.765 align:start position:43% line:-1
(笑い)

00:29:57.865 --> 00:30:01.768 align:start position:23% line:-2
UIKitは そのようなUIを
作らせないようにしています

00:29:57.865 --> 00:30:01.768 align:start position:23% line:-2
UIKitは そのようなUIを
作らせないようにしています

00:30:01.869 --> 00:30:05.772 align:start position:11% line:-2
その代わりiPhone Xの
Navigation Controllerは

00:30:05.939 --> 00:30:10.711 align:start position:23% line:-2
ナビゲーションバーが見える時は
常にステータスバーを表示します

00:30:11.812 --> 00:30:15.415 align:start position:29% line:-2
ですのでステータスバーを
隠したい時は

00:30:15.516 --> 00:30:20.287 align:start position:27% line:-2
ナビゲーションバーと併せて
隠すことをお勧めします

00:30:21.755 --> 00:30:26.026 align:start position:34% line:-2
また 没入感のある
体験を作りたい時は

00:30:26.126 --> 00:30:30.364 align:start position:27% line:-2
すべてのオーバーレイと
コントロールを隠しましょう

00:30:30.831 --> 00:30:34.701 align:start position:32% line:-2
ユーザをコンテンツに
集中させるだけでなく

00:30:34.802 --> 00:30:39.606 align:start position:23% line:-2
全デバイスへの適応を後押しする
デザインテクニックです

00:30:41.608 --> 00:30:44.545 align:start position:27% line:-1
没入感のある体験に関連して

00:30:44.845 --> 00:30:49.917 align:start position:23% line:-2
幅が広い環境での
テキストの表示について話します

00:30:51.318 --> 00:30:57.458 align:start position:21% line:-2
テキストが表示されていますが
縁いっぱいには広がっていませんね

00:30:58.492 --> 00:31:02.663 align:start position:32% line:-2
これを広げてしまうと
ある問題が起きます

00:30:58.492 --> 00:31:02.663 align:start position:32% line:-2
これを広げてしまうと
ある問題が起きます

00:31:02.763 --> 00:31:07.901 align:start position:25% line:-2
広い範囲を１行１行 読むのは
目にとって負担なのです

00:31:08.001 --> 00:31:11.104 align:start position:29% line:-2
フォントサイズによっては
特に顕著です

00:31:11.638 --> 00:31:17.544 align:start position:21% line:-2
それを避けるには可読領域に収めて
テキストを表示します

00:31:17.644 --> 00:31:20.314 align:start position:25% line:-1
システムが推奨する可読領域は

00:31:20.414 --> 00:31:24.918 align:start position:27% line:-2
ダイナミックタイプの
フォントサイズに基づきます

00:31:25.018 --> 00:31:29.923 align:start position:23% line:-2
ダイナミックタイプは iOSの
アダプティブな要素のひとつです

00:31:31.225 --> 00:31:34.495 align:start position:27% line:-1
可読領域の設定に役立つのが

00:31:34.595 --> 00:31:37.664 align:start position:11% line:-2
UIViewのAPI
readableContentGuideです

00:31:37.765 --> 00:31:44.471 align:start position:18% line:-2
これはマージンやSafe Areaの
レイアウトガイドと ほぼ同じです

00:31:46.673 --> 00:31:52.679 align:start position:23% line:-2
可読領域はダイナミックタイプの
フォントサイズに基づきます

00:31:52.780 --> 00:31:57.384 align:start position:29% line:-2
ですからユーザが
フォントサイズを変えると

00:31:57.484 --> 00:32:00.687 align:start position:29% line:-1
可読領域も拡大縮小します

00:31:57.484 --> 00:32:00.687 align:start position:29% line:-1
可読領域も拡大縮小します

00:32:03.257 --> 00:32:08.228 align:start position:30% line:-2
では 縦向きにして
サイドバーを表示します

00:32:08.695 --> 00:32:11.899 align:start position:27% line:-1
記事の表示は狭くなりました

00:32:11.999 --> 00:32:15.769 align:start position:30% line:-1
ここでの最大可読領域は

00:32:15.869 --> 00:32:19.573 align:start position:32% line:-2
実際はこの領域よりも
広くなっています

00:32:20.174 --> 00:32:27.181 align:start position:5% line:-2
readableContentGuideは必ずしも
最大可読領域を報告しません

00:32:27.281 --> 00:32:29.983 align:start position:32% line:-2
レイアウトマージンに
固定されるので

00:32:30.083 --> 00:32:33.921 align:start position:12% line:-2
readableContentGuideに
とらわれません

00:32:34.021 --> 00:32:37.024 align:start position:27% line:-2
レイアウトマージンの外にも
出ません

00:32:39.560 --> 00:32:43.597 align:start position:18% line:-2
では Safe Areaがある場合を
見ていきましょう

00:32:43.697 --> 00:32:47.167 align:start position:12% line:-2
readableContentGuideは
layoutMarginsと同様に

00:32:47.267 --> 00:32:51.839 align:start position:14% line:-2
その余白はsafeAreaInsetsの
値を含みます

00:32:53.474 --> 00:32:58.979 align:start position:21% line:-2
デフォルトのダイナミックタイプの
フォントサイズにおいては通常―

00:32:59.079 --> 00:33:05.119 align:start position:16% line:-2
可読領域はどの向きでも
iPhoneデバイスより幅広になります

00:32:59.079 --> 00:33:05.119 align:start position:16% line:-2
可読領域はどの向きでも
iPhoneデバイスより幅広になります

00:33:05.219 --> 00:33:07.421 align:start position:34% line:-1
つまり作用しません

00:33:07.521 --> 00:33:14.094 align:start position:21% line:-2
しかしユーザがデフォルトより
小さいフォントを選ぶと作用します

00:33:14.194 --> 00:33:16.730 align:start position:32% line:-1
ぜひ導入してください

00:33:18.866 --> 00:33:24.671 align:start position:27% line:-2
ではテーブルビューに戻り
可読領域を見ていきましょう

00:33:25.405 --> 00:33:32.045 align:start position:20% line:-2
テーブルビューは
多くのUI要素をレイアウトする際に

00:33:32.146 --> 00:33:35.082 align:start position:25% line:-1
レイアウトマージンを使います

00:33:35.182 --> 00:33:40.287 align:start position:23% line:-2
多くのUI要素とは
分割線やシステムのアクセサリや

00:33:40.387 --> 00:33:43.791 align:start position:29% line:-2
システムのセルスタイルの
ラベルなどです

00:33:43.891 --> 00:33:50.364 align:start position:25% line:-2
セルの中でビューをマージンに
接するようにレイアウトすると

00:33:51.064 --> 00:33:58.238 align:start position:21% line:-2
テーブルビューのマージンを
調節すれば要素を同時に動かせます

00:33:58.739 --> 00:34:05.379 align:start position:21% line:-2
テキストが複数行ある場合は
テーブルビューのマージンを調節し

00:33:58.739 --> 00:34:05.379 align:start position:21% line:-2
テキストが複数行ある場合は
テーブルビューのマージンを調節し

00:34:05.479 --> 00:34:10.250 align:start position:30% line:-2
可読領域の中で各要素を
並べるといいでしょう

00:34:10.617 --> 00:34:16.690 align:start position:0% line:-2
それを行えるAPIが cellLayout
MarginsFollowReadableWidthです

00:34:16.790 --> 00:34:20.594 align:start position:20% line:-2
falseの場合 テーブルビューは
システムのマージンを使い

00:34:20.694 --> 00:34:24.164 align:start position:23% line:-1
trueにすると余白が入ります

00:34:24.965 --> 00:34:31.505 align:start position:23% line:-2
このプロパティのデフォルト値は
iOS 12で変更されました

00:34:31.772 --> 00:34:37.210 align:start position:20% line:-2
以前はデフォルトでtrueでしたが
現在はfalseです

00:34:37.744 --> 00:34:42.382 align:start position:25% line:-2
特にスマートフォンにおいては
影響はないはずです

00:34:42.482 --> 00:34:46.687 align:start position:27% line:-2
通常はデフォルト値のままを
お勧めします

00:34:46.786 --> 00:34:53.126 align:start position:20% line:-2
テーブルビューが多くの行を
含みそうならtrueとしてください

00:34:54.695 --> 00:34:56.228 align:start position:16% line:-1
Interface Builderでは

00:34:56.330 --> 00:35:00.167 align:start position:7% line:-2
“Follow Readable Width”に
チェックを入れてください

00:34:56.330 --> 00:35:00.167 align:start position:7% line:-2
“Follow Readable Width”に
チェックを入れてください

00:35:02.903 --> 00:35:07.441 align:start position:29% line:-2
可読領域に関連する話題は
ここまでにして

00:35:08.242 --> 00:35:13.580 align:start position:18% line:-2
テーブルビューとSafe Areaの
関連についてお話しします

00:35:13.680 --> 00:35:17.384 align:start position:29% line:-2
テーブルビューのセル内の
コンテンツビューは

00:35:17.484 --> 00:35:20.654 align:start position:14% line:-1
Safe Areaを超えては広がりません

00:35:21.955 --> 00:35:26.159 align:start position:23% line:-2
しかしデフォルトでは背景および
選択された背景ビューが

00:35:26.260 --> 00:35:30.164 align:start position:18% line:-1
Safe Areaを超えて広がります

00:35:30.998 --> 00:35:34.768 align:start position:21% line:-2
例えば カスタムテーブルビューの
セルに置くコンテンツを

00:35:34.868 --> 00:35:39.406 align:start position:23% line:-2
Safe Areaの外に広げ
画面の縁まで表示したいとします

00:35:39.506 --> 00:35:45.212 align:start position:23% line:-2
その場合は背景または選択された
背景ビューに置いてください

00:35:45.345 --> 00:35:51.985 align:start position:2% line:-2
もしくはUITableviewのinsets
ContentViewsToSafeAreaを使います

00:35:52.319 --> 00:35:54.321 align:start position:25% line:-1
デフォルトではtrueですが

00:35:54.421 --> 00:35:59.059 align:start position:18% line:-2
falseにするとコンテンツビューも
縁まで広げられます

00:36:00.494 --> 00:36:03.931 align:start position:14% line:-2
Interface Builderからも
使用が可能です

00:36:06.700 --> 00:36:09.002 align:start position:36% line:-1
縦向きに戻します

00:36:09.103 --> 00:36:14.875 align:start position:23% line:-2
このアプリケーションは下部から
ピッカービューが表示されます

00:36:15.509 --> 00:36:22.182 align:start position:18% line:-2
この画面のSafe Areaについて
考えてみましょう

00:36:22.282 --> 00:36:26.487 align:start position:25% line:-2
ピッカービューのレイアウトは
Safe Area内に

00:36:26.587 --> 00:36:28.922 align:start position:30% line:-1
合わせる必要があります

00:36:30.924 --> 00:36:36.997 align:start position:21% line:-2
UIPickerViewをはじめ
大抵のシステムコントロールは

00:36:37.097 --> 00:36:40.868 align:start position:27% line:-2
Safe Areaについて
何も認識しません

00:36:40.968 --> 00:36:45.806 align:start position:25% line:-2
内的にどう再レイアウト
されるかなどが不明だからです

00:36:46.406 --> 00:36:50.410 align:start position:23% line:-2
こういったビューのレイアウトに
お勧めなのが

00:36:50.510 --> 00:36:54.147 align:start position:30% line:-2
コンテナビューの内側に
置く方法です

00:36:54.815 --> 00:37:01.355 align:start position:18% line:-2
コンテナビューはSafe Areaを
認識していないコンテンツを

00:36:54.815 --> 00:37:01.355 align:start position:18% line:-2
コンテナビューはSafe Areaを
認識していないコンテンツを

00:37:01.455 --> 00:37:06.193 align:start position:11% line:-2
safeAreaInsetsを分析することで
Safe Area内に置きます

00:37:06.293 --> 00:37:10.330 align:start position:30% line:-2
また 背景を
与えることもできるので

00:37:10.998 --> 00:37:16.236 align:start position:14% line:-2
Safe Areaの外にある画面の縁まで
拡大することもできます

00:37:18.272 --> 00:37:23.577 align:start position:12% line:-2
Safe Areaと 画面の縁に近い要素に
関連したテクニックはまだあります

00:37:23.677 --> 00:37:28.048 align:start position:21% line:-2
コントロールやボタンがある場合を
考えてください

00:37:28.148 --> 00:37:32.653 align:start position:14% line:-2
あるデバイスでは
Safe Areaの辺に沿って置きますが

00:37:32.753 --> 00:37:37.424 align:start position:9% line:-2
safeAreaInsetsが0のデバイスでは
余白が欲しいかもしれません

00:37:37.524 --> 00:37:43.897 align:start position:11% line:-2
safeAreaInsetsは見えない空白を
取り込んでいる場合があるからです

00:37:43.997 --> 00:37:50.804 align:start position:21% line:-2
そこで どちらのケースにおいても
使える１つの解決法をご紹介します

00:37:51.205 --> 00:37:56.343 align:start position:21% line:-2
ダイアグラムを使って
レイアウト制約を２つお見せします

00:37:56.443 --> 00:37:59.513 align:start position:25% line:-1
生まれる結果は次のとおりです

00:37:59.847 --> 00:38:06.687 align:start position:21% line:-2
１つ目の制約が表しているのは
一般的に加えられるような余白です

00:37:59.847 --> 00:38:06.687 align:start position:21% line:-2
１つ目の制約が表しているのは
一般的に加えられるような余白です

00:38:06.787 --> 00:38:12.226 align:start position:21% line:-2
スーパービューの下辺から
コントロールの下辺までの制約です

00:38:12.326 --> 00:38:14.595 align:start position:29% line:-1
ですが今回は要求しません

00:38:14.695 --> 00:38:18.699 align:start position:11% line:-2
safeAreaInsetsが0でない場合に
この制約を破るためです

00:38:20.167 --> 00:38:23.203 align:start position:30% line:-1
２つ目は不等式制約で―

00:38:23.303 --> 00:38:26.807 align:start position:16% line:-2
コントロールの下辺から
Safe Areaの下辺までの制約です

00:38:27.107 --> 00:38:31.779 align:start position:21% line:-2
これにより コントロールは常に
Safe Area内に留まります

00:38:33.247 --> 00:38:37.818 align:start position:23% line:-2
safeAreaInsetsを
0から変更してみましょう

00:38:37.918 --> 00:38:41.855 align:start position:34% line:-2
不等式制約を使えば
コンテンツは切れず

00:38:41.955 --> 00:38:44.858 align:start position:32% line:-1
余白は残ったままです

00:38:47.794 --> 00:38:55.035 align:start position:25% line:-2
今回はアダプティブなAPIを
たくさんご紹介しました

00:38:55.135 --> 00:38:58.438 align:start position:11% line:-1
layoutMarginsは要素の位置を保ち

00:38:58.705 --> 00:39:02.476 align:start position:21% line:-2
safeAreaInsetsは
ビューが見えなくなるのを防ぎます

00:38:58.705 --> 00:39:02.476 align:start position:21% line:-2
safeAreaInsetsは
ビューが見えなくなるのを防ぎます

00:39:03.377 --> 00:39:07.481 align:start position:21% line:-1
可読領域はテキストを読みやすくし

00:39:07.648 --> 00:39:13.821 align:start position:21% line:-2
サイズのクラスはより大きな構造を
実装すべき時を教えてくれます

00:39:15.122 --> 00:39:17.524 align:start position:21% line:-1
これらのAPIはフレームワークに

00:39:17.624 --> 00:39:22.062 align:start position:21% line:-2
よりハイレベルなコンポーネントを
実装するために使います

00:39:22.162 --> 00:39:24.498 align:start position:21% line:-1
スクロールビューやテーブルビュー

00:39:24.598 --> 00:39:26.967 align:start position:27% line:-2
コンテナビューコントローラ
などです

00:39:27.067 --> 00:39:31.238 align:start position:23% line:-2
他にご紹介したことも
ハイレベルなコンポーネントを―

00:39:31.338 --> 00:39:37.311 align:start position:23% line:-2
単純な方法ですべてのデバイスに
適応させることに役立つでしょう

00:39:37.978 --> 00:39:41.915 align:start position:21% line:-2
これで きっと皆さんは
“アダプティブ”という原点に返り

00:39:42.015 --> 00:39:45.219 align:start position:30% line:-2
アプリケーションを
デザインできるはずです

00:39:45.853 --> 00:39:50.290 align:start position:25% line:-2
デバイスごとのコーディングは
不要になります

00:39:50.691 --> 00:39:53.260 align:start position:34% line:-2
コードはシンプルで
フレキシブルになり

00:39:53.360 --> 00:39:58.765 align:start position:23% line:-2
異なる環境でも長く使える
アプリケーションになるでしょう

00:40:00.434 --> 00:40:04.605 align:start position:23% line:-2
さらなる情報や本日のスライドは
オンラインでどうぞ

00:40:05.272 --> 00:40:08.509 align:start position:30% line:-2
ご来場いただき
ありがとうございました

00:40:08.609 --> 00:40:12.579 align:start position:43% line:-1
(拍手)
