WEBVTT

00:00:07.040 --> 00:00:15.949 align:start position:43% line:-1
(音楽)

00:00:19.386 --> 00:00:23.657 align:start position:23% line:-2
こんにちは
tvOSチームのジェレミーです

00:00:23.790 --> 00:00:29.630 align:start position:21% line:-2
tvOS 12に追加した
最新のTVMLKitを紹介します

00:00:30.163 --> 00:00:34.034 align:start position:25% line:-2
TVMLKitは
ハイレベルなフレームワークで

00:00:34.134 --> 00:00:37.838 align:start position:27% line:-2
tvOSアプリケーションを
素早く構築できます

00:00:38.105 --> 00:00:41.542 align:start position:0% line:-2
Human Interface Guidelinesにも
準拠し

00:00:41.642 --> 00:00:45.112 align:start position:29% line:-2
快適なアプリケーションを
実現します

00:00:45.646 --> 00:00:48.582 align:start position:27% line:-2
アプリケーションロジックは
JavaScript

00:00:48.682 --> 00:00:52.152 align:start position:29% line:-2
ユーザインターフェイスの
レンダリングは

00:00:52.986 --> 00:00:55.622 align:start position:27% line:-1
独自のマークアップ言語です

00:00:57.124 --> 00:01:00.427 align:start position:23% line:-1
おなじみのアプリケーションにも

00:00:57.124 --> 00:01:00.427 align:start position:23% line:-1
おなじみのアプリケーションにも

00:01:00.827 --> 00:01:03.497 align:start position:23% line:-1
TVMLKitが使われています

00:01:04.096 --> 00:01:07.401 align:start position:30% line:-2
App Storeにも
数千とあるでしょう

00:01:08.902 --> 00:01:12.773 align:start position:20% line:-1
早速 TVMLKitの強化点から―

00:01:13.106 --> 00:01:15.976 align:start position:29% line:-1
３つのことをお話しします

00:01:16.376 --> 00:01:19.279 align:start position:20% line:-1
まず 強化されたWebインスペクタ

00:01:19.379 --> 00:01:24.785 align:start position:21% line:-2
より高度なデバッグと
イントロスペクションを提供します

00:01:25.986 --> 00:01:30.023 align:start position:30% line:-2
追加した機能や強化点は
数多くありますが

00:01:30.123 --> 00:01:33.060 align:start position:29% line:-1
今回は その中の３つです

00:01:33.927 --> 00:01:38.298 align:start position:27% line:-2
高度なデバックを可能にした
Webインスペクタ

00:01:38.799 --> 00:01:42.736 align:start position:32% line:-2
強化された
データバインディング

00:01:43.070 --> 00:01:47.508 align:start position:27% line:-2
再生エクスペリエンスの
新しいカスタマイズ方法です

00:01:48.742 --> 00:01:50.878 align:start position:27% line:-1
まずWebインスペクタから

00:01:51.078 --> 00:01:53.881 align:start position:18% line:-1
tvOS 11のWebインスペクタも

00:01:53.981 --> 00:01:57.584 align:start position:30% line:-2
イントロスペクションに
優れていました

00:01:57.885 --> 00:02:00.888 align:start position:29% line:-1
そこから更に強化しました

00:01:57.885 --> 00:02:00.888 align:start position:29% line:-1
そこから更に強化しました

00:02:02.389 --> 00:02:07.995 align:start position:25% line:-2
tvOS 11.3では
イベントリスナーの表示に加え

00:02:08.095 --> 00:02:10.297 align:start position:29% line:-1
一時的に無効にもできます

00:02:10.864 --> 00:02:16.470 align:start position:21% line:-2
この切り替えで デバックの効率が
大きく上昇します

00:02:20.340 --> 00:02:25.846 align:start position:21% line:-2
こちらはNetworkタブ内
XHRで通信中の画像リソースです

00:02:26.046 --> 00:02:28.949 align:start position:29% line:-1
画像がロード中であること

00:02:29.049 --> 00:02:32.886 align:start position:30% line:-2
そして その所要時間が
確認できます

00:02:34.454 --> 00:02:37.658 align:start position:27% line:-1
ロード中の画像を見ることも

00:02:37.758 --> 00:02:40.594 align:start position:25% line:-1
オプションで可能になりました

00:02:40.827 --> 00:02:45.566 align:start position:27% line:-2
これはWebインスペクタに
接続時の機能であり

00:02:45.732 --> 00:02:48.335 align:start position:25% line:-1
ロード済みの画像は対象外です

00:02:49.837 --> 00:02:53.774 align:start position:30% line:-2
お勧めは
インスペクタボタンです

00:02:54.107 --> 00:02:59.513 align:start position:23% line:-2
クリックすると
フォーカス中の要素を表示します

00:03:00.814 --> 00:03:04.751 align:start position:27% line:-2
要素が折りたたまれていれば
展開し

00:03:04.918 --> 00:03:07.321 align:start position:30% line:-1
ハイライトで表示します

00:03:09.790 --> 00:03:11.358 align:start position:32% line:-1
Webインスペクタは

00:03:11.525 --> 00:03:17.331 align:start position:5% line:-2
Safari Technology Preview
または最新のmacOSで利用できます

00:03:17.798 --> 00:03:20.467 align:start position:36% line:-1
詳しい利用方法は

00:03:20.567 --> 00:03:25.272 align:start position:7% line:-2
Using Web Inspector with
tvOS Appsをご覧ください

00:03:28.709 --> 00:03:31.011 align:start position:27% line:-1
続いてデータバインディング

00:03:33.580 --> 00:03:38.986 align:start position:30% line:-2
新しい機能の説明の前に
概要をお話しします

00:03:39.152 --> 00:03:43.891 align:start position:25% line:-2
これはデータを
ユーザインターフェイス要素へ

00:03:43.991 --> 00:03:46.426 align:start position:30% line:-1
簡単に変換する機構です

00:03:47.561 --> 00:03:52.766 align:start position:29% line:-2
利点はアプリケーションや
レイアウトのロジックと

00:03:52.866 --> 00:03:55.469 align:start position:27% line:-1
データを分離できることです

00:03:57.538 --> 00:04:01.808 align:start position:18% line:-2
テンプレートにより
JavaScriptの記述を軽減でき

00:03:57.538 --> 00:04:01.808 align:start position:18% line:-2
テンプレートにより
JavaScriptの記述を軽減でき

00:04:01.909 --> 00:04:06.513 align:start position:29% line:-2
データの変換は
フレームワークが行います

00:04:06.914 --> 00:04:10.150 align:start position:29% line:-1
最適な形で変換を行うため

00:04:10.317 --> 00:04:15.389 align:start position:29% line:-2
APIの種類を
気にする必要がありません

00:04:16.822 --> 00:04:19.660 align:start position:29% line:-1
実例を見ながら説明します

00:04:19.793 --> 00:04:23.964 align:start position:30% line:-2
タイトルと説明を載せた
バナーの生成を

00:04:24.298 --> 00:04:28.769 align:start position:27% line:-2
データバインディングなしで
行ってみます

00:04:30.971 --> 00:04:34.675 align:start position:30% line:-2
まず ユーザに表示する
データをフェッチ

00:04:34.775 --> 00:04:37.177 align:start position:29% line:-1
今回はタイトルと説明です

00:04:38.579 --> 00:04:43.250 align:start position:20% line:-2
このデータを
JavaScriptコードへ渡すと

00:04:43.350 --> 00:04:48.021 align:start position:27% line:-2
データが処理され
ドキュメントが生成されます

00:04:49.223 --> 00:04:54.194 align:start position:18% line:-2
データバインディングでは
JavaScriptの処理が不要です

00:04:54.328 --> 00:04:57.831 align:start position:30% line:-2
バインディングの仕様を
提供すれば

00:04:57.931 --> 00:05:02.169 align:start position:25% line:-2
TVMLKitが指示どおりに
ドキュメントを追加します

00:04:57.931 --> 00:05:02.169 align:start position:25% line:-2
TVMLKitが指示どおりに
ドキュメントを追加します

00:05:02.703 --> 00:05:07.908 align:start position:27% line:-2
必要なのは
データのフェッチと操作のみ

00:05:08.008 --> 00:05:10.210 align:start position:30% line:-1
DOMの編集は不要です

00:05:10.911 --> 00:05:15.215 align:start position:27% line:-2
こうして
コードの記述が軽減されます

00:05:17.384 --> 00:05:22.489 align:start position:25% line:-2
既存のデータバインディングの
主な概念はこちらです

00:05:22.589 --> 00:05:27.427 align:start position:29% line:-2
要素の属性に
要素のテキストコンテンツ

00:05:27.928 --> 00:05:32.833 align:start position:27% line:-2
シェルフ グリッド リスト
各セクションのアイテムです

00:05:33.433 --> 00:05:37.137 align:start position:36% line:-2
他の例を見ながら
要点をまとめます

00:05:39.673 --> 00:05:42.910 align:start position:30% line:-2
画像要素をバインドする
テンプレートは

00:05:43.010 --> 00:05:45.579 align:start position:36% line:-1
式にが含まれます

00:05:45.679 --> 00:05:49.016 align:start position:32% line:-2
次に属性名と
プロパティが続きます

00:05:50.150 --> 00:05:54.755 align:start position:23% line:-2
次は要素のテキストコンテンツの
生成例です

00:05:55.823 --> 00:06:01.461 align:start position:25% line:-2
今回は実際に充てんされる
データを持つタイトル要素です

00:05:55.823 --> 00:06:01.461 align:start position:25% line:-2
今回は実際に充てんされる
データを持つタイトル要素です

00:06:03.564 --> 00:06:06.200 align:start position:23% line:-1
このテンプレートに含まれるのは

00:06:06.300 --> 00:06:10.170 align:start position:29% line:-2
textContentと
マップするプロパティです

00:06:13.106 --> 00:06:15.642 align:start position:21% line:-1
次はアイテムのバインディングです

00:06:15.742 --> 00:06:21.181 align:start position:27% line:-2
前のケースと少し異なり
表示データはグループであり

00:06:21.481 --> 00:06:25.085 align:start position:25% line:-1
各セクション単位で機能します

00:06:26.553 --> 00:06:31.124 align:start position:27% line:-2
例えば ツリー状の
リストアイテムの最終表現は

00:06:31.258 --> 00:06:35.996 align:start position:14% line:-2
ツリー状のlistItemLockupの
セクションとなります

00:06:37.130 --> 00:06:40.968 align:start position:23% line:-1
今回テンプレートに含まれるのは

00:06:41.101 --> 00:06:43.904 align:start position:18% line:-1
itemsとマップするプロパティです

00:06:44.471 --> 00:06:49.376 align:start position:30% line:-2
更に配列内の各データを
変換するプロトタイプ―

00:06:49.543 --> 00:06:54.114 align:start position:14% line:-1
listItemLockupが含まれます

00:06:55.883 --> 00:06:59.586 align:start position:30% line:-2
以上はtvOS 11の
バインディング機構です

00:06:59.686 --> 00:07:05.392 align:start position:9% line:-2
詳細はAdvances in TVMLKitで
ご確認ください

00:06:59.686 --> 00:07:05.392 align:start position:9% line:-2
詳細はAdvances in TVMLKitで
ご確認ください

00:07:08.128 --> 00:07:11.832 align:start position:29% line:-1
今年は語彙を拡張しました

00:07:11.999 --> 00:07:16.136 align:start position:27% line:-2
まず 子要素をバインドする
包括的な方式

00:07:16.236 --> 00:07:18.172 align:start position:25% line:-1
子要素のバインディングを追加

00:07:19.673 --> 00:07:23.377 align:start position:29% line:-2
更にDOMの構成を助ける
要素を追加

00:07:23.477 --> 00:07:25.612 align:start position:21% line:-1
fragmentとrulesです

00:07:25.812 --> 00:07:29.416 align:start position:21% line:-1
まず 子要素のバインディングから

00:07:32.152 --> 00:07:35.455 align:start position:32% line:-2
これは より包括的な
バインド方式です

00:07:35.989 --> 00:07:39.393 align:start position:27% line:-1
アイテムのバインディングは

00:07:39.493 --> 00:07:43.130 align:start position:32% line:-2
シェルフなどの
セクションに最適です

00:07:43.497 --> 00:07:46.266 align:start position:21% line:-1
大きなデータセットに効果的ですが

00:07:46.867 --> 00:07:49.136 align:start position:32% line:-1
他の要素にも使えます

00:07:49.603 --> 00:07:52.139 align:start position:29% line:-2
子要素のバインディングは
さらに包括的

00:07:54.007 --> 00:07:55.976 align:start position:38% line:-1
理由は簡単です

00:07:56.076 --> 00:08:00.013 align:start position:30% line:-2
要素の子要素を
生成し機能するからです

00:07:56.076 --> 00:08:00.013 align:start position:30% line:-2
要素の子要素を
生成し機能するからです

00:08:02.616 --> 00:08:05.319 align:start position:23% line:-1
挙動はアイテムの場合と同じです

00:08:05.486 --> 00:08:11.458 align:start position:25% line:-2
まずプロトタイプで
データが変換される要素を定義

00:08:12.826 --> 00:08:17.364 align:start position:30% line:-2
それをテンプレートとし
最終DOMを生成します

00:08:20.300 --> 00:08:22.636 align:start position:36% line:-1
実例を見てみます

00:08:23.470 --> 00:08:27.274 align:start position:27% line:-1
再びツリー状のアイテムです

00:08:27.474 --> 00:08:29.109 align:start position:30% line:-1
データ構成は同じですが

00:08:29.209 --> 00:08:33.914 align:start position:32% line:-2
今回は異なる３つの
メニューアイテムです

00:08:34.847 --> 00:08:36.717 align:start position:29% line:-1
メニューバーで使われます

00:08:37.851 --> 00:08:39.553 align:start position:41% line:-1
最終表現は

00:08:39.653 --> 00:08:43.957 align:start position:27% line:-2
メニューバーツリーの
menuBarItemです

00:08:45.893 --> 00:08:50.030 align:start position:32% line:-2
テンプレートの記述は
とても簡単です

00:08:50.731 --> 00:08:54.568 align:start position:27% line:-2
アイテムのバインディングと
似ています

00:08:54.801 --> 00:08:57.704 align:start position:21% line:-1
データをマップするプロトタイプと

00:08:57.805 --> 00:08:59.840 align:start position:30% line:-1
バインディングの式です

00:09:00.440 --> 00:09:04.778 align:start position:30% line:-2
違いは要素が
セクション上にないこと

00:09:04.945 --> 00:09:07.347 align:start position:29% line:-2
子要素のバインディングは
要素を問いません

00:09:10.083 --> 00:09:14.988 align:start position:25% line:-2
すべての子要素を生成するのに
適していますが

00:09:15.455 --> 00:09:19.293 align:start position:30% line:-2
一部を生成したい場合も
あるでしょう

00:09:19.793 --> 00:09:23.730 align:start position:21% line:-2
ストリーミングアプリケーションを
例に考えます

00:09:24.064 --> 00:09:29.002 align:start position:16% line:-2
nowPlayingMenuItemは
メニューバーの必須アイテムですが

00:09:29.369 --> 00:09:34.241 align:start position:21% line:-2
バックグラウンドで再生中の時のみ
表示されます

00:09:36.610 --> 00:09:40.547 align:start position:21% line:-2
しかし menuBarItemの
バインドは必要です

00:09:40.881 --> 00:09:44.618 align:start position:21% line:-1
そのため データを動作中か否かで

00:09:44.718 --> 00:09:47.387 align:start position:30% line:-1
区分する必要があります

00:09:47.554 --> 00:09:49.957 align:start position:21% line:-1
ここでfragmentが使えます

00:09:51.859 --> 00:09:53.293 align:start position:30% line:-1
fragmentとは？

00:09:54.294 --> 00:09:57.898 align:start position:23% line:-1
レンダラに見えない非表示要素で

00:09:58.098 --> 00:10:00.400 align:start position:30% line:-1
DOMの構成を助けます

00:09:58.098 --> 00:10:00.400 align:start position:30% line:-1
DOMの構成を助けます

00:10:01.568 --> 00:10:05.672 align:start position:32% line:-2
しかし その子要素は
表示要素です

00:10:08.141 --> 00:10:12.813 align:start position:29% line:-2
子要素のバインディングは
要素を問わないため

00:10:13.313 --> 00:10:16.116 align:start position:23% line:-1
fragmentにも作用します

00:10:18.519 --> 00:10:23.090 align:start position:21% line:-1
まずはデータの最終形を確認します

00:10:23.290 --> 00:10:27.828 align:start position:21% line:-2
menuBarItemが
fragmentにカプセル化され

00:10:28.495 --> 00:10:32.032 align:start position:29% line:-2
子要素のバインディングが
行われています

00:10:34.701 --> 00:10:39.006 align:start position:27% line:-2
これはバインドしたデータを
fragment内に移動し

00:10:39.106 --> 00:10:42.643 align:start position:16% line:-2
nowPlayingMenuItemを
残すという処理です

00:10:42.943 --> 00:10:46.580 align:start position:25% line:-2
レンダラはfragmentの
子要素だけを見て

00:10:46.914 --> 00:10:49.917 align:start position:23% line:-1
適切にメニューバーを生成します

00:10:52.486 --> 00:10:58.125 align:start position:25% line:-2
ユーザインターフェイス要素へ
マップするデータにも

00:10:58.258 --> 00:11:00.027 align:start position:32% line:-1
似たケースがあります

00:10:58.258 --> 00:11:00.027 align:start position:32% line:-1
似たケースがあります

00:11:00.127 --> 00:11:04.865 align:start position:25% line:-2
静的なデータと動的なデータが
混在するからです

00:11:05.532 --> 00:11:09.169 align:start position:25% line:-1
例えば 次のようなデータです

00:11:09.536 --> 00:11:13.373 align:start position:29% line:-2
ビデオの
ポスター画像とタイトル―

00:11:13.807 --> 00:11:15.843 align:start position:34% line:-1
そして再生状況です

00:11:17.644 --> 00:11:22.950 align:start position:23% line:-2
ユーザインターフェイスの表示は
情報により異なります

00:11:24.184 --> 00:11:28.755 align:start position:29% line:-2
再生開始前
すなわちゼロの状況では―

00:11:29.356 --> 00:11:34.862 align:start position:21% line:-2
ビデオのポスター画像とタイトルを
表示します

00:11:36.330 --> 00:11:40.567 align:start position:25% line:-2
再生開始で
再生状況はゼロ以上になります

00:11:41.034 --> 00:11:43.937 align:start position:29% line:-1
ポスター画像とタイトルは

00:11:44.438 --> 00:11:46.206 align:start position:34% line:-1
引き続き表示します

00:11:47.040 --> 00:11:51.111 align:start position:23% line:-1
しかし 再生中を明確に示すため

00:11:51.311 --> 00:11:55.916 align:start position:32% line:-2
プログレスバーに
再生状況を表示します

00:11:57.684 --> 00:12:01.188 align:start position:23% line:-1
このようにデータの異なる事例は

00:11:57.684 --> 00:12:01.188 align:start position:23% line:-1
このようにデータの異なる事例は

00:12:01.822 --> 00:12:04.792 align:start position:29% line:-1
異なる表示となるべきです

00:12:05.058 --> 00:12:09.096 align:start position:27% line:-2
最初の例はlockup内に
画像とタイトルがあり

00:12:09.863 --> 00:12:14.301 align:start position:14% line:-2
次の例はoverlayと
progressBarが付加されています

00:12:16.937 --> 00:12:22.209 align:start position:29% line:-2
アプリケーションの
アウトプット数は様々です

00:12:22.676 --> 00:12:26.413 align:start position:27% line:-2
rulesで
１つの静的テンプレートから

00:12:26.513 --> 00:12:29.817 align:start position:32% line:-2
異なるドキュメントが
生成できます

00:12:31.118 --> 00:12:32.953 align:start position:32% line:-1
ではrulesとは？

00:12:33.921 --> 00:12:36.623 align:start position:25% line:-1
rulesはデータ状態に応じ

00:12:36.723 --> 00:12:40.527 align:start position:30% line:-2
UI用のドキュメントを
再定義します

00:12:42.062 --> 00:12:45.032 align:start position:32% line:-2
レンダラには見えない
要素ですが

00:12:45.232 --> 00:12:47.601 align:start position:27% line:-1
どう記述するかに作用します

00:12:49.169 --> 00:12:51.471 align:start position:23% line:-1
rules内のオペレーションは

00:12:51.705 --> 00:12:55.809 align:start position:29% line:-2
いずれも
その兄弟要素に作用します

00:12:56.510 --> 00:13:00.581 align:start position:21% line:-1
セットアップ方法を例に説明します

00:12:56.510 --> 00:13:00.581 align:start position:21% line:-1
セットアップ方法を例に説明します

00:13:02.716 --> 00:13:06.253 align:start position:34% line:-2
先ほどの例のとおり
プロトタイプを

00:13:06.587 --> 00:13:10.357 align:start position:23% line:-1
rulesを使い構成してみます

00:13:10.724 --> 00:13:13.961 align:start position:23% line:-2
まず ユーザインターフェイスの
共通項目で

00:13:14.061 --> 00:13:16.697 align:start position:29% line:-1
プロトタイプを定義します

00:13:17.531 --> 00:13:20.334 align:start position:29% line:-1
今回は画像とタイトルです

00:13:21.935 --> 00:13:26.240 align:start position:21% line:-2
プログレスバーの
placeholderもあります

00:13:26.573 --> 00:13:30.077 align:start position:29% line:-2
placeholderも
特別な非表示要素で

00:13:30.177 --> 00:13:35.749 align:start position:29% line:-2
データ状態が一致した際
代替ターゲットになります

00:13:37.718 --> 00:13:39.386 align:start position:36% line:-1
早速 記述します

00:13:40.020 --> 00:13:44.558 align:start position:18% line:-2
兄弟要素に働くrulesのグループは
rulesタグでカプセル化

00:13:47.494 --> 00:13:53.100 align:start position:12% line:-2
そして 個別のrulesは
specializeの要素としてカプセル化

00:13:54.535 --> 00:13:59.473 align:start position:23% line:-2
specializeの要素は
状態に応じアクティブになります

00:14:00.307 --> 00:14:04.812 align:start position:23% line:-2
状態の判断は
状態の属性のクエリに基づきます

00:14:07.214 --> 00:14:11.985 align:start position:23% line:-2
データ状態が一致した場合
specializeの子要素が

00:14:12.319 --> 00:14:16.456 align:start position:23% line:-2
rulesの兄弟要素に作用する
オペレーションリストです

00:14:17.124 --> 00:14:22.196 align:start position:16% line:-2
今回はplaceholderを
overlayとその子要素に置換します

00:14:25.866 --> 00:14:31.205 align:start position:20% line:-2
TVMLKitは要素のタグの属性で
置換する要素を見つけます

00:14:31.538 --> 00:14:35.576 align:start position:32% line:-2
タグを確認してから
要素名を比べることで

00:14:35.676 --> 00:14:37.678 align:start position:34% line:-1
効果的に置換します

00:14:38.245 --> 00:14:41.715 align:start position:34% line:-2
要素名が不一致なら
要素のホールを置換

00:14:41.815 --> 00:14:45.152 align:start position:23% line:-2
今回はplaceholderが
overlayになります

00:14:45.652 --> 00:14:47.955 align:start position:30% line:-1
要素名が一致した場合は

00:14:48.055 --> 00:14:51.792 align:start position:29% line:-2
新しいものが
既存の要素へ追加されます

00:14:53.360 --> 00:14:56.029 align:start position:20% line:-1
rulesは１つのテンプレートから

00:14:56.129 --> 00:15:00.701 align:start position:27% line:-2
異なる２つのアウトプットを
生成してくれます

00:14:56.129 --> 00:15:00.701 align:start position:27% line:-2
異なる２つのアウトプットを
生成してくれます

00:15:02.002 --> 00:15:06.740 align:start position:25% line:-2
実際の表示は
アプリケーションで処理します

00:15:06.840 --> 00:15:11.411 align:start position:25% line:-2
ユーザインターフェイス要素の
コンテキスト内の

00:15:11.512 --> 00:15:14.548 align:start position:25% line:-1
静的テンプレートへの表示です

00:15:15.449 --> 00:15:18.785 align:start position:18% line:-1
続いてはTVMLKitの再生について

00:15:19.286 --> 00:15:21.788 align:start position:23% line:-1
TVMLKitの拡張ポイントで

00:15:21.889 --> 00:15:25.192 align:start position:32% line:-2
インターフェイスを
カスタマイズできます

00:15:25.392 --> 00:15:28.529 align:start position:27% line:-2
ビューや
テンプレートにも対応します

00:15:29.029 --> 00:15:32.866 align:start position:30% line:-2
今回 拡張ポイントを
再生パイプラインへ広げ

00:15:32.966 --> 00:15:37.771 align:start position:27% line:-2
ユーザ体験につながる
再生の管理を可能にしました

00:15:40.974 --> 00:15:43.343 align:start position:27% line:-1
様々な再生スタイルに対応し

00:15:43.544 --> 00:15:48.982 align:start position:25% line:-2
埋め込み画面か
フルスクリーンかは問いません

00:15:51.552 --> 00:15:54.454 align:start position:29% line:-1
カスタマイズに必要なのが

00:15:54.555 --> 00:15:58.292 align:start position:2% line:-1
TVPlayerとUIViewControllerです

00:16:01.061 --> 00:16:04.431 align:start position:18% line:-1
TVMLKit JSのAPIに酷似し

00:16:04.531 --> 00:16:08.569 align:start position:23% line:-2
JavaScript開発者には
混乱が少ないでしょう

00:16:09.803 --> 00:16:13.507 align:start position:14% line:-1
更に限定のJavaScriptブリッジで

00:16:13.607 --> 00:16:18.212 align:start position:14% line:-2
ネイティブコードとJavaScriptの
対話が可能です

00:16:20.614 --> 00:16:23.183 align:start position:23% line:-1
TVPlayerの説明をします

00:16:23.784 --> 00:16:28.121 align:start position:20% line:-2
TVPlayerはカスタマイズした
再生動作に必要です

00:16:28.989 --> 00:16:34.695 align:start position:23% line:-2
そして 再生パイプラインへの
AVPlayerのアダプタです

00:16:35.295 --> 00:16:39.867 align:start position:14% line:-1
AVPlayerのコールバックを効果的に

00:16:39.967 --> 00:16:42.035 align:start position:20% line:-1
JavaScript用に変換します

00:16:45.239 --> 00:16:49.910 align:start position:30% line:-2
カスタムイベントの
ディスパッチも可能です

00:16:50.878 --> 00:16:55.449 align:start position:21% line:-2
AVPlayerの再生イベントは
デフォルトで処理します

00:16:55.549 --> 00:16:58.452 align:start position:27% line:-1
必要なのはディスパッチのみ

00:17:01.889 --> 00:17:05.425 align:start position:21% line:-2
JavaScriptによる変更は
KVOが監視するので

00:17:05.526 --> 00:17:08.628 align:start position:23% line:-1
いつ変更されたかを把握できます

00:17:09.730 --> 00:17:14.166 align:start position:14% line:-1
更に TVPlayerはプレイリスト順に

00:17:14.268 --> 00:17:18.505 align:start position:29% line:-1
メディアを連続再生します

00:17:20.874 --> 00:17:25.646 align:start position:9% line:-2
TVApplicationController
DelegateによるTVPlayerの要求に

00:17:25.746 --> 00:17:30.851 align:start position:25% line:-2
インスタンスを返し
再生パイプラインへ参加します

00:17:33.954 --> 00:17:39.526 align:start position:23% line:-2
次はユーザインターフェイス上の
再生表示についてです

00:17:39.626 --> 00:17:45.232 align:start position:25% line:-2
再生はフルスクリーンか
埋め込み画面で随時行われます

00:17:45.666 --> 00:17:48.769 align:start position:29% line:-2
ユーザインターフェイスの
仕様も様々です

00:17:50.070 --> 00:17:52.339 align:start position:29% line:-1
TVMLKitは再生の際

00:17:52.439 --> 00:17:55.976 align:start position:12% line:-2
TVInterfaceFactoryで
View Controllerを要求します

00:17:56.210 --> 00:18:02.149 align:start position:23% line:-2
そして 再生用のリファレンスを
TVPlayerへ渡します

00:17:56.210 --> 00:18:02.149 align:start position:23% line:-2
そして 再生用のリファレンスを
TVPlayerへ渡します

00:18:04.618 --> 00:18:10.924 align:start position:20% line:-2
ここで TVPlayerの注意点を
いくつかお伝えします

00:18:12.159 --> 00:18:15.495 align:start position:21% line:-2
まず“should”イベントへの
対応が必要です

00:18:15.996 --> 00:18:20.434 align:start position:23% line:-2
インタースティシャルのケースが
多いため

00:18:20.534 --> 00:18:23.704 align:start position:25% line:-1
ネイティブコードで処理します

00:18:25.806 --> 00:18:29.276 align:start position:14% line:-1
再生にFairPlayの暗号化を使う場合

00:18:29.643 --> 00:18:33.814 align:start position:7% line:-1
AVContentKeySessionが必要です

00:18:34.948 --> 00:18:37.584 align:start position:25% line:-1
関連セッションは次の２つです

00:18:37.684 --> 00:18:41.555 align:start position:0% line:-1
Advances in HTTP Live Streaming

00:18:41.655 --> 00:18:45.526 align:start position:11% line:-2
そしてAVContentKeySession
Best Practicesです

00:18:47.661 --> 00:18:52.966 align:start position:14% line:-2
最後に overlayと
interactiveOverlayには

00:18:53.066 --> 00:18:55.135 align:start position:36% line:-1
対応していません

00:18:55.502 --> 00:19:00.274 align:start position:30% line:-2
インターフェイスのため
個別の対応が必要です

00:18:55.502 --> 00:19:00.274 align:start position:30% line:-2
インターフェイスのため
個別の対応が必要です

00:19:04.111 --> 00:19:05.212 align:start position:41% line:-1
まとめです

00:19:05.379 --> 00:19:11.185 align:start position:21% line:-2
TVMLKitおよび
tvOS 12の変更点は次の２つ

00:19:11.285 --> 00:19:14.054 align:start position:25% line:-2
まず データバインディングが
強化され

00:19:14.188 --> 00:19:20.260 align:start position:21% line:-2
データ駆動型テンプレートの構成が
可能になったこと

00:19:21.395 --> 00:19:25.899 align:start position:25% line:-2
そして ネイティブの
再生エクスペリエンスを実装し

00:19:26.033 --> 00:19:29.770 align:start position:32% line:-2
カスタマイズが
可能になったことです

00:19:31.238 --> 00:19:35.576 align:start position:20% line:-1
詳細はこちらのURLをご覧ください

00:19:37.211 --> 00:19:41.815 align:start position:25% line:-2
WWDC 2018へのご参加
ありがとうございました
