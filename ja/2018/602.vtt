WEBVTT

00:00:07.040 --> 00:00:16.416 align:start position:43% line:-1
(音楽)

00:00:21.688 --> 00:00:26.360 align:start position:43% line:-1
(拍手)

00:00:26.460 --> 00:00:28.228 align:start position:34% line:-1
おはようございます

00:00:29.863 --> 00:00:33.066 align:start position:11% line:-2
What's New in ARKit 2の
セッションへようこそ

00:00:34.701 --> 00:00:38.138 align:start position:21% line:-2
私はアルサラン
ARKitチームのエンジニアです

00:00:41.375 --> 00:00:46.446 align:start position:18% line:-2
iOS 11アップデートの一部として
ARKitを提供できて

00:00:47.247 --> 00:00:49.383 align:start position:32% line:-1
非常に胸が躍りました

00:00:51.051 --> 00:00:55.856 align:start position:25% line:-2
ARKitは無数のデバイスに
導入されています

00:00:55.956 --> 00:01:00.294 align:start position:21% line:-2
iOSは最大かつ最先端の
ARプラットフォームになりました

00:00:55.956 --> 00:01:00.294 align:start position:21% line:-2
iOSは最大かつ最先端の
ARプラットフォームになりました

00:01:03.163 --> 00:01:05.833 align:start position:25% line:-2
ARKitは簡単に操作可能な
インターフェイスを提供し

00:01:05.933 --> 00:01:07.868 align:start position:30% line:-1
優れた機能を備えてます

00:01:10.003 --> 00:01:15.242 align:start position:23% line:-2
皆さんのARKitでの製品には
本当に驚かされます

00:01:15.342 --> 00:01:18.312 align:start position:30% line:-2
App Storeから
いくつか紹介します

00:01:20.113 --> 00:01:22.816 align:start position:20% line:-2
ARアプリケーションの
Civilisations ARは

00:01:23.016 --> 00:01:25.986 align:start position:32% line:-2
歴史的遺物を
目の前に映し出します

00:01:26.153 --> 00:01:28.589 align:start position:27% line:-1
あらゆる角度から見られます

00:01:28.689 --> 00:01:34.194 align:start position:27% line:-2
Ｘ線モードにすれば
さらに色々なことができます

00:01:35.062 --> 00:01:38.232 align:start position:36% line:-2
裏庭に文化財を
持ってくることも

00:01:39.366 --> 00:01:44.071 align:start position:25% line:-2
数百年前の姿を
よみがえらせることも可能です

00:01:44.938 --> 00:01:48.475 align:start position:32% line:-2
歴史的遺物を見るには
絶好のツールです

00:01:50.577 --> 00:01:53.914 align:start position:25% line:-2
ARアプリケーションの
Boulevard ARでは

00:01:54.014 --> 00:01:58.585 align:start position:27% line:-2
芸術作品を今までにない形で
鑑賞できます

00:01:58.685 --> 00:02:01.221 align:start position:38% line:-2
地面に置いたり
壁にかけたり

00:01:58.685 --> 00:02:01.221 align:start position:38% line:-2
地面に置いたり
壁にかけたり

00:02:01.321 --> 00:02:03.724 align:start position:29% line:-1
近くに寄ったりもできます

00:02:03.824 --> 00:02:05.826 align:start position:32% line:-1
細部の鑑賞が可能です

00:02:05.959 --> 00:02:10.062 align:start position:36% line:-2
芸術について
学ぶには最適です

00:02:16.270 --> 00:02:19.706 align:start position:29% line:-2
ARKitを使えば
誰でも楽しく学習できます

00:02:20.040 --> 00:02:22.776 align:start position:21% line:-2
WWF Free Riversは
実物のような風景を

00:02:22.876 --> 00:02:25.078 align:start position:32% line:-2
目の前に映し出す
アプリケーションです

00:02:25.445 --> 00:02:29.049 align:start position:32% line:-2
風景を縫う川の流れを
たどることができ

00:02:29.149 --> 00:02:31.818 align:start position:29% line:-1
村や野生動物を見られます

00:02:32.019 --> 00:02:34.488 align:start position:36% line:-1
人間の活動により

00:02:34.888 --> 00:02:38.559 align:start position:29% line:-2
村や野生環境が
どんな影響を受けるのかを

00:02:38.659 --> 00:02:40.594 align:start position:34% line:-1
見ることができます

00:02:42.262 --> 00:02:46.867 align:start position:32% line:-2
環境保全や持続可能な
開発について学ぶには

00:02:46.967 --> 00:02:49.369 align:start position:32% line:-1
最高の教育ツールです

00:02:49.970 --> 00:02:55.275 align:start position:21% line:-2
他にも例は数多くあるので
App Storeを見てください

00:02:57.578 --> 00:03:00.113 align:start position:34% line:-2
ARKitを
ご存じない方のため

00:02:57.578 --> 00:03:00.113 align:start position:34% line:-2
ARKitを
ご存じない方のため

00:03:00.214 --> 00:03:04.117 align:start position:32% line:-2
ARKitが何なのか
手短にご説明します

00:03:08.388 --> 00:03:11.291 align:start position:21% line:-2
ARKitの主要コンポーネントは
トラッキングです

00:03:11.558 --> 00:03:15.796 align:start position:30% line:-2
現実世界でのデバイスの
位置と向きを算出します

00:03:18.899 --> 00:03:21.668 align:start position:38% line:-2
オブジェクトの
追跡もできます

00:03:21.768 --> 00:03:23.670 align:start position:36% line:-1
たとえば人間の顔

00:03:26.073 --> 00:03:27.808 align:start position:34% line:-1
シーンの理解により

00:03:28.375 --> 00:03:32.012 align:start position:25% line:-2
環境の特徴を学習し
トラッキングの精度を高めます

00:03:33.013 --> 00:03:34.448 align:start position:36% line:-1
検出できる対象は

00:03:34.982 --> 00:03:39.152 align:start position:29% line:-2
地面やテーブルの上などの
水平面です

00:03:39.586 --> 00:03:41.522 align:start position:32% line:-1
垂直面も検出できます

00:03:41.622 --> 00:03:45.292 align:start position:25% line:-2
これにより仮想オブジェクトを
シーンに出せます

00:03:50.998 --> 00:03:54.768 align:start position:34% line:-2
シーンの理解は
その環境下における

00:03:54.868 --> 00:03:57.104 align:start position:30% line:-1
照明の条件も学習します

00:03:57.938 --> 00:03:59.806 align:start position:30% line:-1
そのため 照明を用いて

00:03:59.907 --> 00:04:03.877 align:start position:23% line:-2
バーチャルなシーンに
実際の環境を正確に反映できます

00:03:59.907 --> 00:04:03.877 align:start position:23% line:-2
バーチャルなシーンに
実際の環境を正確に反映できます

00:04:03.977 --> 00:04:07.314 align:start position:29% line:-2
オブジェクトを
正しい明るさで表示します

00:04:09.917 --> 00:04:12.452 align:start position:27% line:-2
レンダリングはユーザが
デバイス上で目にするもので

00:04:12.553 --> 00:04:15.222 align:start position:34% line:-2
拡張現実のシーンと
連動します

00:04:16.223 --> 00:04:19.226 align:start position:34% line:-2
ARKitを使えば
とても手軽に

00:04:19.326 --> 00:04:22.729 align:start position:25% line:-2
好きなレンダリングエンジンと
統合できます

00:04:26.767 --> 00:04:31.205 align:start position:5% line:-2
ARKitはSceneKitとSpriteKitの
ビルトインビューを提供します

00:04:32.506 --> 00:04:35.809 align:start position:34% line:-2
Xcodeには
テンプレートがあり

00:04:35.909 --> 00:04:40.280 align:start position:32% line:-2
拡張現実体験を
すばやく作成できます

00:04:41.515 --> 00:04:46.453 align:start position:14% line:-2
UnityとUnreal Engineは
ARKitの全機能を統合した―

00:04:46.553 --> 00:04:49.156 align:start position:29% line:-1
人気のゲームエンジンです

00:04:49.256 --> 00:04:52.693 align:start position:34% line:-2
これらすべての
レンダリング技術が

00:04:52.793 --> 00:04:55.329 align:start position:29% line:-1
ARKitで利用できます

00:04:58.899 --> 00:05:02.069 align:start position:23% line:-2
今年のARKit 2の新機能を
見てみましょう

00:04:58.899 --> 00:05:02.069 align:start position:23% line:-2
今年のARKit 2の新機能を
見てみましょう

00:05:07.774 --> 00:05:10.043 align:start position:27% line:-1
まずはマップの保存とロード

00:05:10.143 --> 00:05:14.081 align:start position:34% line:-2
強力な新機能である
永続性を備え

00:05:14.181 --> 00:05:16.717 align:start position:34% line:-2
複数ユーザでの
体験も可能にします

00:05:19.653 --> 00:05:22.089 align:start position:32% line:-2
続いて
環境テクスチャリング

00:05:22.189 --> 00:05:25.993 align:start position:23% line:-2
拡張現実シーンの
リアルなレンダリングができます

00:05:27.628 --> 00:05:31.298 align:start position:27% line:-2
2D画像のリアルタイムでの
トラックが可能になりました

00:05:33.267 --> 00:05:37.871 align:start position:23% line:-2
2Dだけでなくシーン内の
3Dオブジェクトも検出できます

00:05:41.375 --> 00:05:45.245 align:start position:25% line:-2
そしてフェイストラッキングも
改良しました

00:05:48.081 --> 00:05:50.851 align:start position:29% line:-2
マップの保存とロードから
解説します

00:05:56.490 --> 00:06:00.194 align:start position:21% line:-2
マップの保存とロードは
ワールドトラッキングの一機能です

00:05:56.490 --> 00:06:00.194 align:start position:21% line:-2
マップの保存とロードは
ワールドトラッキングの一機能です

00:06:00.294 --> 00:06:04.231 align:start position:27% line:-2
ワールドトラッキングは
デバイスの位置と向きを定め

00:06:04.531 --> 00:06:07.935 align:start position:32% line:-2
現実世界の6DoFで
提示します

00:06:08.035 --> 00:06:10.604 align:start position:30% line:-2
これにより
オブジェクトをシーンに

00:06:11.138 --> 00:06:12.239 align:start position:39% line:-1
配置できます

00:06:12.506 --> 00:06:16.677 align:start position:30% line:-2
ご覧のテーブルとイスが
その例です

00:06:18.478 --> 00:06:21.381 align:start position:27% line:-2
ワールドトラッキングは
物理的スケールを正確に示し

00:06:21.481 --> 00:06:25.886 align:start position:27% line:-2
正しいスケールで
オブジェクトを配置できます

00:06:25.986 --> 00:06:29.389 align:start position:27% line:-2
不自然なサイズになることを
避けられます

00:06:33.927 --> 00:06:39.099 align:start position:25% line:-2
以前 紹介したMeasure
アプリケーションと同様に

00:06:39.199 --> 00:06:41.635 align:start position:32% line:-1
正確な計測が可能です

00:06:44.505 --> 00:06:47.107 align:start position:30% line:-2
ワールドトラッキングは
3D特徴点をとらえます

00:06:47.207 --> 00:06:51.845 align:start position:32% line:-2
環境の物理的な構造を
把握できます

00:06:51.945 --> 00:06:56.917 align:start position:27% line:-2
これを用いてシーンに
オブジェクトを配置できます

00:07:00.287 --> 00:07:04.391 align:start position:21% line:-2
リローカリゼーション機能は
iOS 11.3で導入されました

00:07:04.625 --> 00:07:09.296 align:start position:27% line:-2
この機能は
ARSessionの中断後

00:07:09.396 --> 00:07:11.798 align:start position:32% line:-2
トラッキングの状態を
復元します

00:07:12.733 --> 00:07:15.869 align:start position:21% line:-2
アプリケーションが
バックグラウンドで実行中の場合や

00:07:16.003 --> 00:07:19.406 align:start position:18% line:-2
iPadのピクチャ･イン･ピクチャを
使用中に作動します

00:07:23.944 --> 00:07:28.215 align:start position:30% line:-2
リローカリゼーションと
一緒に使えるのは

00:07:28.982 --> 00:07:32.686 align:start position:29% line:-2
ワールドトラッキングで
更新され続けるマップです

00:07:33.921 --> 00:07:36.924 align:start position:36% line:-2
環境を動き回れば
動き回るほど

00:07:37.024 --> 00:07:41.128 align:start position:30% line:-2
マップは拡大し
環境のさまざまな特徴を

00:07:41.228 --> 00:07:43.764 align:start position:29% line:-1
学習できるようになります

00:07:48.035 --> 00:07:51.471 align:start position:32% line:-2
このマップを
見ることができるのは

00:07:51.572 --> 00:07:54.174 align:start position:32% line:-2
ARSessionの
起動中だけでした

00:07:54.775 --> 00:07:58.345 align:start position:32% line:-2
このマップが
利用可能になりました

00:08:00.080 --> 00:08:01.815 align:start position:30% line:-1
ARKit APIにて

00:08:01.915 --> 00:08:05.919 align:start position:16% line:-2
ARWorldMapオブジェクトとして
マップを提供しています

00:08:14.127 --> 00:08:18.232 align:start position:14% line:-2
ARWorldMapは物理的な3D空間の
マッピングを表します

00:08:18.365 --> 00:08:23.871 align:start position:27% line:-2
右側のビジュアルにある図と
よく似たものです

00:08:25.739 --> 00:08:29.910 align:start position:30% line:-2
物理空間ではアンカーが
重要な地点となります

00:08:30.010 --> 00:08:34.214 align:start position:34% line:-2
仮想オブジェクトを
配置する場所です

00:08:34.381 --> 00:08:39.686 align:start position:14% line:-2
ARWorldMapでは通常のアンカーを
デフォルトで用意

00:08:40.854 --> 00:08:44.925 align:start position:29% line:-2
さらにカスタムアンカーを
リストに追加できます

00:08:45.025 --> 00:08:46.927 align:start position:32% line:-1
リストは変更可能です

00:08:47.027 --> 00:08:51.698 align:start position:21% line:-2
シーンにカスタムアンカーを作り
World Mapに追加できます

00:08:57.371 --> 00:09:00.240 align:start position:32% line:-1
視覚化とデバッグ用に

00:08:57.371 --> 00:09:00.240 align:start position:32% line:-1
視覚化とデバッグ用に

00:09:00.340 --> 00:09:03.877 align:start position:25% line:-1
原特徴点と範囲も提供しており

00:09:04.011 --> 00:09:09.383 align:start position:30% line:-2
スキャンした実際の
物理空間を把握できます

00:09:12.686 --> 00:09:16.690 align:start position:18% line:-2
さらに重要なことに
World Mapはシリアル化が可能

00:09:17.257 --> 00:09:21.028 align:start position:27% line:-2
どんなデータストリームにも
シリアル化できます

00:09:21.128 --> 00:09:23.330 align:start position:32% line:-2
ローカルシステム上の
ファイルや

00:09:23.430 --> 00:09:26.934 align:start position:27% line:-2
共有ネットワークの場所にも
シリアル化できます

00:09:29.536 --> 00:09:31.805 align:start position:27% line:-2
このARWorldMapの
オブジェクトは

00:09:31.905 --> 00:09:37.744 align:start position:27% line:-2
２種類の優れた体験を
ARKit上で可能にします

00:09:39.746 --> 00:09:42.149 align:start position:34% line:-1
１つ目は永続性です

00:09:44.151 --> 00:09:47.120 align:start position:27% line:-1
機能の実例を紹介しましょう

00:09:48.155 --> 00:09:51.792 align:start position:30% line:-2
ワールドトラッキングを
始めるユーザがいます

00:09:51.892 --> 00:09:54.361 align:start position:27% line:-2
彼はシーンに
オブジェクトを配置するため

00:09:54.461 --> 00:09:56.530 align:start position:32% line:-2
ARKitの
ヒットテストをします

00:09:57.531 --> 00:10:01.468 align:start position:32% line:-2
彼はその場を去る前に
World Mapを

00:09:57.531 --> 00:10:01.468 align:start position:32% line:-2
彼はその場を去る前に
World Mapを

00:10:01.702 --> 00:10:04.505 align:start position:32% line:-1
デバイスに保存します

00:10:08.876 --> 00:10:12.679 align:start position:27% line:-1
そして しばらく経ったあと

00:10:12.813 --> 00:10:14.515 align:start position:32% line:-1
ユーザが戻ってきます

00:10:15.015 --> 00:10:18.185 align:start position:25% line:-2
彼は同じWorld Mapを
ロードして

00:10:18.352 --> 00:10:22.389 align:start position:27% line:-1
同じ拡張現実を体験できます

00:10:22.523 --> 00:10:25.959 align:start position:32% line:-2
同じ体験を
何度でも繰り返せます

00:10:26.059 --> 00:10:31.298 align:start position:25% line:-2
毎回 テーブルの上に
同じオブジェクトが出てきます

00:10:31.398 --> 00:10:35.135 align:start position:25% line:-2
これがワールドトラッキングの
永続性です

00:10:35.802 --> 00:10:37.404 align:start position:43% line:-1
(拍手)

00:10:37.504 --> 00:10:39.072 align:start position:32% line:-1
ありがとうございます

00:10:39.173 --> 00:10:41.642 align:start position:43% line:-1
(拍手)

00:10:44.244 --> 00:10:48.015 align:start position:27% line:-2
ARWorldMapでは
複数ユーザの体験もできます

00:10:49.183 --> 00:10:54.188 align:start position:29% line:-2
単一のデバイスやユーザに
限定されず―

00:10:54.788 --> 00:10:57.858 align:start position:30% line:-2
拡張現実の体験は
多くのユーザと共有可能

00:11:00.160 --> 00:11:01.762 align:start position:38% line:-1
１人のユーザが

00:11:02.529 --> 00:11:07.167 align:start position:27% line:-2
World Mapを作成し
複数のユーザと共有します

00:11:08.302 --> 00:11:10.470 align:start position:25% line:-1
World Mapが表すのは

00:11:10.571 --> 00:11:14.474 align:start position:27% line:-1
現実世界の単一の座標系です

00:11:14.875 --> 00:11:19.880 align:start position:29% line:-2
つまりユーザ全員が
同じ座標空間を共有します

00:11:20.280 --> 00:11:25.853 align:start position:27% line:-2
同じ拡張現実を
違った角度から体験できます

00:11:27.487 --> 00:11:29.556 align:start position:30% line:-1
これは優れた新機能です

00:11:29.656 --> 00:11:31.258 align:start position:27% line:-1
World Mapを使って

00:11:31.859 --> 00:11:35.596 align:start position:36% line:-2
複数ユーザの
ゲームもできます

00:11:35.696 --> 00:11:37.898 align:start position:27% line:-1
昨日紹介したゲームなどです

00:11:39.700 --> 00:11:41.502 align:start position:25% line:-1
ARWorldMapを用いて

00:11:41.602 --> 00:11:46.306 align:start position:29% line:-2
複数ユーザでの共有体験を
教育にも生かせます

00:11:50.043 --> 00:11:53.647 align:start position:32% line:-2
ARWorldMap
オブジェクトを使って

00:11:53.747 --> 00:11:56.316 align:start position:29% line:-1
テクノロジーを自由に選び

00:11:57.518 --> 00:12:00.854 align:start position:36% line:-2
すべてのユーザと
共有できます

00:11:57.518 --> 00:12:00.854 align:start position:36% line:-2
すべてのユーザと
共有できます

00:12:02.289 --> 00:12:05.425 align:start position:25% line:-2
たとえば
共有手段にはAirDropや

00:12:05.526 --> 00:12:08.028 align:start position:36% line:-2
マルチピア接続が
利用できます

00:12:08.128 --> 00:12:11.064 align:start position:18% line:-2
Wi-FiやBluetoothによる
ローカルな通信です

00:12:11.932 --> 00:12:16.803 align:start position:27% line:-2
インターネット接続をせずに
この機能を使用できます

00:12:22.476 --> 00:12:26.180 align:start position:20% line:-2
ARKit APIが
World Mapの検索とロードに

00:12:26.280 --> 00:12:28.482 align:start position:30% line:-1
どう役立つか見てみます

00:12:30.918 --> 00:12:33.020 align:start position:20% line:-1
ARSessionのオブジェクトで

00:12:33.120 --> 00:12:36.156 align:start position:16% line:-2
getCurrentWorldMapを
呼び出します

00:12:36.256 --> 00:12:38.425 align:start position:30% line:-1
どの時点でも大丈夫です

00:12:39.693 --> 00:12:42.563 align:start position:34% line:-2
このメソッドには
完了ハンドラがあり

00:12:42.663 --> 00:12:46.400 align:start position:30% line:-2
ARWorldMapの
オブジェクトを返します

00:12:48.836 --> 00:12:53.941 align:start position:21% line:-2
worldMapが利用不可の場合
エラーを返します

00:12:54.041 --> 00:12:57.911 align:start position:27% line:-2
アプリケーションコード上で
このエラーの処理が必要です

00:12:59.613 --> 00:13:01.949 align:start position:21% line:-1
ARWorldMapを取得したら

00:12:59.613 --> 00:13:01.949 align:start position:21% line:-1
ARWorldMapを取得したら

00:13:02.850 --> 00:13:04.384 align:start position:34% line:-1
あとはシンプルです

00:13:07.254 --> 00:13:11.825 align:start position:12% line:-2
initialWorldMapプロパティを
設定し

00:13:12.025 --> 00:13:14.461 align:start position:30% line:-1
セッションを起動します

00:13:15.863 --> 00:13:18.632 align:start position:32% line:-2
動的に変更することも
可能です

00:13:18.732 --> 00:13:23.504 align:start position:20% line:-2
新しい構成で
ARSessionを再構成できます

00:13:25.472 --> 00:13:29.143 align:start position:23% line:-2
ARWorldMapとともに
ARSessionを起動したら

00:13:30.110 --> 00:13:32.880 align:start position:27% line:-2
iOS 11.3で導入した
リローカリゼーションと

00:13:32.980 --> 00:13:36.817 align:start position:27% line:-1
まったく同じように動きます

00:13:44.291 --> 00:13:48.128 align:start position:30% line:-1
ユーザ体験で重要なのは

00:13:48.228 --> 00:13:51.265 align:start position:30% line:-2
リローカリゼーションが
確実に機能することです

00:13:52.366 --> 00:13:56.136 align:start position:21% line:-2
優れたWorld Mapの入手が
必要です

00:13:56.236 --> 00:14:00.541 align:start position:16% line:-2
getCurrentWorldMapは
いつでも呼び出せます

00:13:56.236 --> 00:14:00.541 align:start position:16% line:-2
getCurrentWorldMapは
いつでも呼び出せます

00:14:02.376 --> 00:14:06.446 align:start position:29% line:-2
肝心なのは
物理空間を複数の視点から

00:14:06.680 --> 00:14:08.315 align:start position:32% line:-1
スキャンすることです

00:14:08.415 --> 00:14:13.820 align:start position:25% line:-2
トラッキングシステムに環境の
物理的な構造を学習させます

00:14:16.190 --> 00:14:19.126 align:start position:36% line:-2
環境は静的で
きめ細かいほうが

00:14:19.226 --> 00:14:22.329 align:start position:27% line:-1
より多くの特徴が抽出可能で

00:14:22.429 --> 00:14:24.765 align:start position:25% line:-1
環境をより細かく把握できます

00:14:27.768 --> 00:14:31.972 align:start position:29% line:-2
マップ上に特徴点を
密集させることも重要です

00:14:32.072 --> 00:14:35.509 align:start position:30% line:-2
確実なリローカライズに
必要です

00:14:37.244 --> 00:14:40.848 align:start position:27% line:-2
しかし これらの点について
心配は無用です

00:14:41.515 --> 00:14:45.419 align:start position:30% line:-2
ARKit APIでは
操作を簡単にするため

00:14:45.519 --> 00:14:48.422 align:start position:16% line:-2
WorldMappingStatusを
ARFrameで提供してます

00:14:49.223 --> 00:14:52.960 align:start position:16% line:-2
WorldMappingStatusは
すべてのARFrameで更新され

00:14:53.060 --> 00:14:56.830 align:start position:18% line:-2
WorldMappingStatus
プロパティで取得できます

00:14:56.964 --> 00:14:58.999 align:start position:32% line:-1
手順を見てみましょう

00:15:01.468 --> 00:15:04.805 align:start position:12% line:-2
ワールドトラッキングの
開始時での表示はNot Available

00:15:04.905 --> 00:15:09.209 align:start position:29% line:-2
物理空間のスキャン開始で
Limitedになります

00:15:10.511 --> 00:15:13.547 align:start position:27% line:-1
物理空間を動き回るにつれて

00:15:13.981 --> 00:15:17.084 align:start position:25% line:-2
マップが拡張されて
Extendingとなります

00:15:19.386 --> 00:15:22.222 align:start position:32% line:-2
現在の視点で
十分にスキャンしたら

00:15:22.322 --> 00:15:26.593 align:start position:16% line:-2
WorldMappingStatusが
Mappedになります

00:15:34.434 --> 00:15:39.506 align:start position:29% line:-2
マップにある物理空間から
別の方向へ向けると

00:15:39.773 --> 00:15:42.876 align:start position:16% line:-2
WorldMappingStatusが
Limitedに戻ります

00:15:42.976 --> 00:15:48.749 align:start position:30% line:-2
見えている新しい環境を
学習し始めます

00:15:51.151 --> 00:15:54.555 align:start position:11% line:-2
アプリケーションコード上での
WorldMappingStatusの使用法

00:15:56.390 --> 00:16:01.361 align:start position:14% line:-2
World Mapを他のユーザと共有する
アプリケーションがあるとします

00:15:56.390 --> 00:16:01.361 align:start position:14% line:-2
World Mapを他のユーザと共有する
アプリケーションがあるとします

00:16:01.695 --> 00:16:05.766 align:start position:27% line:-2
インターフェイスのボタンで
マップの共有が可能

00:16:07.301 --> 00:16:11.572 align:start position:5% line:-2
WorldMappingStatusが
notAvailableまたはlimitedの時は

00:16:11.672 --> 00:16:12.940 align:start position:32% line:-1
ボタンを無効にします

00:16:14.441 --> 00:16:17.311 align:start position:16% line:-2
WorldMappingStatusが
extendingの時は

00:16:18.178 --> 00:16:21.715 align:start position:25% line:-2
アクティビティインジケータを
UIに表示します

00:16:21.815 --> 00:16:24.184 align:start position:29% line:-1
これによりエンドユーザに

00:16:24.284 --> 00:16:30.224 align:start position:21% line:-2
物理的な世界の移動と
スキャンとマップの拡張を促します

00:16:30.390 --> 00:16:32.559 align:start position:30% line:-2
リローカリゼーションに
必要なことです

00:16:36.430 --> 00:16:39.500 align:start position:16% line:-2
WorldMappingStatusが
mappedになったら

00:16:40.167 --> 00:16:45.472 align:start position:18% line:-2
Share Mapボタンを有効にして
アクティビティインジケータを隠す

00:16:45.906 --> 00:16:48.942 align:start position:30% line:-2
これでユーザは
マップの共有ができます

00:16:53.547 --> 00:16:56.984 align:start position:30% line:-2
マップの保存とロードを
実演します

00:16:58.552 --> 00:17:04.424 align:start position:43% line:-1
(拍手)

00:16:58.552 --> 00:17:04.424 align:start position:43% line:-1
(拍手)

00:17:06.560 --> 00:17:07.627 align:start position:43% line:-1
オーケイ

00:17:09.396 --> 00:17:11.498 align:start position:32% line:-1
AR1に切り替えます

00:17:13.166 --> 00:17:13.967 align:start position:43% line:-1
オーケイ

00:17:14.535 --> 00:17:17.438 align:start position:29% line:-2
２つのアプリケーションを
見ていきます

00:17:17.538 --> 00:17:19.239 align:start position:34% line:-1
そのうち１つ目では

00:17:19.339 --> 00:17:23.010 align:start position:27% line:-2
World Mapを取得し
ローカルファイルに保存

00:17:23.210 --> 00:17:27.614 align:start position:21% line:-2
２つ目では
同じWorld Mapをロードし

00:17:27.981 --> 00:17:31.285 align:start position:32% line:-2
同じ拡張現実の体験を
復元します

00:17:31.385 --> 00:17:32.719 align:start position:39% line:-1
始めましょう

00:17:35.956 --> 00:17:39.626 align:start position:16% line:-2
WorldMappingStatusが
右上の隅に示されます

00:17:39.726 --> 00:17:41.495 align:start position:23% line:-1
Not Availableです

00:17:41.662 --> 00:17:44.832 align:start position:32% line:-1
環境内を動き始めると

00:17:44.965 --> 00:17:48.202 align:start position:21% line:-1
World Mapが拡張されます

00:17:48.302 --> 00:17:52.339 align:start position:30% line:-2
この環境のマッピングと
移動を続けると

00:17:53.240 --> 00:17:56.476 align:start position:16% line:-2
WorldMappingStatusが
Mappedに変わります

00:17:57.044 --> 00:18:00.414 align:start position:29% line:-2
この視点からは
十分に特徴を把握したので

00:17:57.044 --> 00:18:00.414 align:start position:29% line:-2
この視点からは
十分に特徴を把握したので

00:18:00.514 --> 00:18:03.517 align:start position:30% line:-2
リローカリゼーションが
可能ということです

00:18:03.617 --> 00:18:08.722 align:start position:14% line:-2
World Mapのオブジェクトを取得し
シリアル化していきます

00:18:10.124 --> 00:18:12.526 align:start position:27% line:-2
その前に
カスタムアンカーを配置して

00:18:12.626 --> 00:18:16.597 align:start position:30% line:-2
拡張現実のシーンを
もっと面白くしましょう

00:18:16.964 --> 00:18:18.899 align:start position:34% line:-1
ヒットテストにより

00:18:19.099 --> 00:18:21.101 align:start position:34% line:-2
カスタムアンカーを
作りました

00:18:21.201 --> 00:18:22.936 align:start position:34% line:-1
このオブジェクトを

00:18:23.737 --> 00:18:25.038 align:start position:34% line:-1
オーバーレイします

00:18:25.139 --> 00:18:27.674 align:start position:36% line:-1
旧式のテレビです

00:18:27.808 --> 00:18:30.510 align:start position:27% line:-1
昔 見たことがあるでしょう

00:18:33.347 --> 00:18:37.451 align:start position:29% line:-2
もちろん
マッピングも続けられます

00:18:37.718 --> 00:18:40.721 align:start position:20% line:-1
World Mapを保存しましょう

00:18:41.255 --> 00:18:43.724 align:start position:23% line:-1
World Mapを保存した際

00:18:43.957 --> 00:18:47.561 align:start position:23% line:-2
このWorld Mapに属する
特徴点を表示できます

00:18:47.928 --> 00:18:52.666 align:start position:21% line:-2
青い点はすべて
私のWorld Mapの一部です

00:18:55.402 --> 00:18:57.271 align:start position:36% line:-1
よい方法として―

00:18:58.605 --> 00:19:01.275 align:start position:21% line:-1
World Map保存時の視点を

00:18:58.605 --> 00:19:01.275 align:start position:21% line:-1
World Map保存時の視点を

00:19:01.642 --> 00:19:04.211 align:start position:25% line:-1
スクリーンショットで残します

00:19:07.247 --> 00:19:11.718 align:start position:23% line:-2
World Mapをファイルに
シリアル化しました

00:19:12.052 --> 00:19:16.457 align:start position:29% line:-2
別のアプリケーションで
同じ拡張現実を復元します

00:19:16.924 --> 00:19:18.559 align:start position:36% line:-1
やってみましょう

00:19:18.792 --> 00:19:21.895 align:start position:32% line:-2
アプリケーションを
違う位置で起動します

00:19:24.231 --> 00:19:26.567 align:start position:34% line:-2
これが私の
ワールドの起点です

00:19:26.667 --> 00:19:29.303 align:start position:32% line:-2
テーブルのこちら側で
定義されてます

00:19:29.403 --> 00:19:32.873 align:start position:30% line:-2
ワールドトラッキングは
リローカライズ状態です

00:19:33.040 --> 00:19:37.911 align:start position:21% line:-2
開始時の動作はiOS 11.3で
導入したものと同じです

00:19:38.445 --> 00:19:41.815 align:start position:30% line:-1
今度はデバイスの方向を

00:19:42.082 --> 00:19:47.354 align:start position:25% line:-2
World Mapを作成した
物理空間に向けてみます

00:19:48.589 --> 00:19:51.658 align:start position:30% line:-1
同じ空間に向いたとたん

00:19:51.758 --> 00:19:56.230 align:start position:30% line:-2
ワールドの起点が
元の位置に復元されます

00:19:56.396 --> 00:20:00.701 align:start position:29% line:-2
同時にカスタムアンカーも
復元されました

00:19:56.396 --> 00:20:00.701 align:start position:29% line:-2
同時にカスタムアンカーも
復元されました

00:20:00.801 --> 00:20:03.403 align:start position:30% line:-1
完全に同じAR体験です

00:20:03.504 --> 00:20:09.142 align:start position:43% line:-1
(拍手)

00:20:09.243 --> 00:20:10.310 align:start position:32% line:-1
ありがとうございます

00:20:11.411 --> 00:20:15.516 align:start position:30% line:-2
このアプリケーションは
何度でも起動でき

00:20:15.616 --> 00:20:19.286 align:start position:32% line:-2
起動時には毎回
同じ体験を提供します

00:20:19.386 --> 00:20:21.255 align:start position:36% line:-1
これが永続性です

00:20:22.289 --> 00:20:25.726 align:start position:32% line:-2
当然 他のデバイスと
共有もできます

00:20:27.528 --> 00:20:29.229 align:start position:34% line:-1
スライドに戻ります

00:20:34.401 --> 00:20:37.504 align:start position:34% line:-2
以上がマップの
保存とロードでした

00:20:37.871 --> 00:20:40.574 align:start position:23% line:-1
ARKit 2の優れた新機能で

00:20:40.674 --> 00:20:43.277 align:start position:36% line:-1
永続性を可能にし

00:20:43.377 --> 00:20:45.879 align:start position:34% line:-2
複数ユーザで
体験を共有できます

00:20:49.583 --> 00:20:54.288 align:start position:25% line:-2
ARKit 2では より速い
初期化と平面検出を実現

00:20:56.723 --> 00:20:59.026 align:start position:30% line:-2
ワールドトラッキングは
より強力になり

00:20:59.126 --> 00:21:02.729 align:start position:34% line:-2
難しい環境でも
平面を検出できます

00:20:59.126 --> 00:21:02.729 align:start position:34% line:-2
難しい環境でも
平面を検出できます

00:21:07.568 --> 00:21:12.439 align:start position:25% line:-2
水平面と垂直面の範囲と境界が
より正確になりました

00:21:12.539 --> 00:21:16.310 align:start position:30% line:-2
オブジェクトをシーンに
正確に配置できます

00:21:20.114 --> 00:21:22.849 align:start position:25% line:-2
iOS 11.3で導入された
機能の１つ

00:21:22.950 --> 00:21:27.287 align:start position:32% line:-2
拡張現実体験での
連続オートフォーカス

00:21:28.489 --> 00:21:32.426 align:start position:32% line:-2
iOS 12では
拡張現実体験に特化し

00:21:32.526 --> 00:21:35.562 align:start position:29% line:-1
さらに最適化されています

00:21:38.999 --> 00:21:44.505 align:start position:25% line:-2
4:3のビデオフォーマットを
ARKitに導入します

00:21:47.141 --> 00:21:50.043 align:start position:21% line:-1
4:3は広角ビデオフォーマットで

00:21:50.144 --> 00:21:54.481 align:start position:25% line:-2
iPadの画面アスペクト比も
4:3なので

00:21:54.581 --> 00:21:58.285 align:start position:30% line:-2
iPad上での視覚化を
大きく向上させます

00:21:59.653 --> 00:22:04.792 align:start position:18% line:-2
ARKit 2のビデオフォーマットは
4:3がデフォルトになります

00:21:59.653 --> 00:22:04.792 align:start position:18% line:-2
ARKit 2のビデオフォーマットは
4:3がデフォルトになります

00:22:06.660 --> 00:22:08.729 align:start position:36% line:-1
すべての改良点は

00:22:08.829 --> 00:22:12.933 align:start position:21% line:-2
App Storeにある
全アプリケーションに反映されます

00:22:13.033 --> 00:22:15.302 align:start position:25% line:-2
4:3のビデオフォーマットは
例外で

00:22:15.402 --> 00:22:19.873 align:start position:21% line:-2
新規のSTKでアプリケーションを
構築する必要があります

00:22:23.243 --> 00:22:25.045 align:start position:36% line:-1
話を戻しましょう

00:22:25.779 --> 00:22:28.715 align:start position:38% line:-2
エンドユーザの
体験の向上です

00:22:30.751 --> 00:22:33.220 align:start position:30% line:-2
環境テクスチャリングを
導入します

00:22:34.021 --> 00:22:37.391 align:start position:32% line:-2
これでレンダリングが
大幅に改善され

00:22:37.491 --> 00:22:39.326 align:start position:32% line:-2
エンドユーザの体験が
向上します

00:22:41.161 --> 00:22:43.764 align:start position:27% line:-1
デザイナーが懸命に努力して

00:22:43.864 --> 00:22:47.601 align:start position:27% line:-2
これらの仮想オブジェクトを
作ったとします

00:22:47.701 --> 00:22:49.603 align:start position:32% line:-1
拡張現実用のものです

00:22:50.804 --> 00:22:52.539 align:start position:36% line:-1
よくできてますが

00:22:52.673 --> 00:22:54.675 align:start position:34% line:-1
拡張現実に使うには

00:22:54.942 --> 00:22:57.744 align:start position:30% line:-1
もうひと工夫 必要です

00:22:59.546 --> 00:23:02.049 align:start position:38% line:-1
やるべきことは

00:22:59.546 --> 00:23:02.049 align:start position:38% line:-1
やるべきことは

00:23:02.149 --> 00:23:06.420 align:start position:23% line:-2
ARのシーン上で
位置と向きを正しくすることです

00:23:06.520 --> 00:23:11.558 align:start position:21% line:-2
実際に 現実世界に
オブジェクトがあるように見せます

00:23:13.560 --> 00:23:15.929 align:start position:30% line:-1
正しい大きさも重要です

00:23:16.029 --> 00:23:18.899 align:start position:34% line:-2
大きすぎも
小さすぎもダメです

00:23:18.999 --> 00:23:22.970 align:start position:25% line:-2
ARKitは
ワールドトラッキングにおいて

00:23:23.070 --> 00:23:25.038 align:start position:29% line:-1
正しい変換をしてくれます

00:23:28.642 --> 00:23:31.945 align:start position:30% line:-2
リアルなレンダリングに
大切なのは

00:23:32.045 --> 00:23:33.947 align:start position:38% line:-1
環境の照明です

00:23:37.151 --> 00:23:41.555 align:start position:27% line:-2
ARKitでは環境光推定を
レンダリングに使い

00:23:41.755 --> 00:23:45.058 align:start position:34% line:-2
オブジェクトの
明るさを修正します

00:23:45.192 --> 00:23:49.096 align:start position:30% line:-2
明るすぎたり
暗すぎたりすることなく

00:23:49.229 --> 00:23:51.565 align:start position:36% line:-1
環境になじみます

00:23:54.835 --> 00:24:00.174 align:start position:27% line:-2
オブジェクトを水平面など
物理的な表面に配置する場合

00:23:54.835 --> 00:24:00.174 align:start position:27% line:-2
オブジェクトを水平面など
物理的な表面に配置する場合

00:24:00.407 --> 00:24:04.211 align:start position:29% line:-2
オブジェクトに
影をつけることも大切です

00:24:04.311 --> 00:24:07.781 align:start position:36% line:-2
影は人の視覚に
大きく影響します

00:24:07.881 --> 00:24:11.018 align:start position:27% line:-2
オブジェクトが本当に
表面上にあると認識されます

00:24:13.253 --> 00:24:14.922 align:start position:39% line:-1
最後の項目は

00:24:16.023 --> 00:24:17.858 align:start position:29% line:-1
反射するオブジェクトです

00:24:18.692 --> 00:24:20.561 align:start position:39% line:-1
人間の目は―

00:24:20.928 --> 00:24:24.832 align:start position:29% line:-2
仮想オブジェクトの表面に
環境の反射を期待します

00:24:25.632 --> 00:24:29.469 align:start position:27% line:-2
環境テクスチャリングにより
これが可能になります

00:24:31.405 --> 00:24:35.976 align:start position:27% line:-2
拡張現実のシーンで
どう見えるか確認しましょう

00:24:38.045 --> 00:24:43.116 align:start position:25% line:-2
昨晩 本セッションの準備中に
このシーンを作りました

00:24:44.618 --> 00:24:50.157 align:start position:21% line:-2
果物を食べながら
仮想オブジェクトを配置したのです

00:24:51.692 --> 00:24:55.762 align:start position:36% line:-2
ご覧のとおり
大きさは正確です

00:24:55.996 --> 00:24:58.432 align:start position:34% line:-1
さらに重要なことに

00:24:58.532 --> 00:25:01.368 align:start position:32% line:-2
環境がオブジェクトに
反射してます

00:24:58.532 --> 00:25:01.368 align:start position:32% line:-2
環境がオブジェクトに
反射してます

00:25:02.336 --> 00:25:05.038 align:start position:30% line:-1
オブジェクトの右側には

00:25:05.139 --> 00:25:10.577 align:start position:29% line:-2
黄色とオレンジ色の
果物の反射が映っています

00:25:10.844 --> 00:25:15.182 align:start position:34% line:-2
左側には
葉の緑色が見えます

00:25:15.949 --> 00:25:20.053 align:start position:30% line:-2
中央にはベンチの表面が
反射しています

00:25:21.422 --> 00:25:25.792 align:start position:16% line:-2
ARKit 2の環境テクスチャリングで
これが可能になりました

00:25:27.661 --> 00:25:29.129 align:start position:43% line:-1
(拍手)

00:25:29.229 --> 00:25:30.097 align:start position:41% line:-1
ありがとう

00:25:34.167 --> 00:25:37.871 align:start position:27% line:-2
シーンのテクスチャ情報を
環境テクスチャリングが収集

00:25:40.774 --> 00:25:46.346 align:start position:25% line:-2
通常 キューブマップで表され
他の形式もあります

00:25:49.049 --> 00:25:51.985 align:start position:30% line:-2
環境テクスチャ
またはキューブマップは

00:25:52.085 --> 00:25:55.956 align:start position:27% line:-2
レンダリングエンジンで
反射プローブとして使えます

00:25:58.826 --> 00:26:04.565 align:start position:23% line:-2
テクスチャ情報は
仮想オブジェクトに適用されます

00:25:58.826 --> 00:26:04.565 align:start position:23% line:-2
テクスチャ情報は
仮想オブジェクトに適用されます

00:26:04.665 --> 00:26:06.867 align:start position:27% line:-1
前のスライドが その例です

00:26:07.668 --> 00:26:09.770 align:start position:27% line:-1
反射オブジェクトの視覚化が

00:26:11.505 --> 00:26:14.041 align:start position:34% line:-1
大幅に向上しました

00:26:14.908 --> 00:26:19.847 align:start position:30% line:-2
それでは この仕組みを
ビデオでお見せします

00:26:22.249 --> 00:26:26.687 align:start position:20% line:-2
ARKitはワールドトラッキングと
シーン理解を作動させ

00:26:26.787 --> 00:26:29.456 align:start position:32% line:-1
環境の学習を続けます

00:26:30.090 --> 00:26:33.126 align:start position:30% line:-2
コンピュータビジョンを
用いて

00:26:33.393 --> 00:26:38.031 align:start position:29% line:-2
テクスチャ情報を抽出し
キューブマップを埋めます

00:26:39.500 --> 00:26:42.870 align:start position:29% line:-2
キューブマップはシーンに
正確に配置されてます

00:26:44.671 --> 00:26:47.741 align:start position:32% line:-2
キューブマップは
一部だけ埋まってます

00:26:48.976 --> 00:26:54.314 align:start position:27% line:-2
反射プローブの設定には
完全に埋まったマップが必要

00:26:57.451 --> 00:26:59.186 align:start position:36% line:-2
キューブマップを
完全に埋めるには

00:26:59.286 --> 00:27:03.323 align:start position:27% line:-2
物理空間全体を
スキャンする必要があります

00:26:59.286 --> 00:27:03.323 align:start position:27% line:-2
物理空間全体を
スキャンする必要があります

00:27:03.423 --> 00:27:05.626 align:start position:36% line:-1
パノラマと同様の

00:27:05.726 --> 00:27:07.594 align:start position:32% line:-1
360度スキャンです

00:27:08.428 --> 00:27:12.065 align:start position:27% line:-2
それはエンドユーザにとって
実用的ではありません

00:27:13.467 --> 00:27:16.303 align:start position:34% line:-2
ARKitは作業を
簡単にするため

00:27:16.870 --> 00:27:19.540 align:start position:34% line:-2
機械学習の
アルゴリズムを使い

00:27:19.640 --> 00:27:22.476 align:start position:36% line:-2
キューブマップを
自動で埋めます

00:27:23.277 --> 00:27:29.383 align:start position:43% line:-1
(拍手)

00:27:31.385 --> 00:27:37.224 align:start position:29% line:-2
処理はすべてデバイス上で
リアルタイムに行われます

00:27:39.927 --> 00:27:43.564 align:start position:27% line:-2
キューブマップが完成したら
反射プローブを設定します

00:27:43.764 --> 00:27:47.100 align:start position:29% line:-2
仮想オブジェクトを
シーンに配置すると同時に

00:27:47.234 --> 00:27:49.970 align:start position:30% line:-1
環境の反射が開始します

00:27:51.104 --> 00:27:55.409 align:start position:25% line:-2
以上が環境テクスチャリングの
概要です

00:27:57.511 --> 00:28:03.217 align:start position:23% line:-2
ARKit APIはどのように
この機能を有効にしていくか

00:27:57.511 --> 00:28:03.217 align:start position:23% line:-2
ARKit APIはどのように
この機能を有効にしていくか

00:28:07.688 --> 00:28:12.092 align:start position:30% line:-2
ワールドトラッキングの
構成でやるべきことは

00:28:12.259 --> 00:28:15.996 align:start position:14% line:-2
environmentTexturing
プロパティをautomaticにして

00:28:17.030 --> 00:28:18.665 align:start position:36% line:-1
セッションを起動

00:28:19.032 --> 00:28:21.034 align:start position:36% line:-1
こんなに簡単です

00:28:21.835 --> 00:28:27.841 align:start position:43% line:-1
(拍手)

00:28:29.543 --> 00:28:34.548 align:start position:16% line:-2
ARSessionはバックグラウンドで
環境テクスチャリングを行い

00:28:34.648 --> 00:28:37.484 align:start position:27% line:-1
環境プローブアンカーとして

00:28:37.885 --> 00:28:40.020 align:start position:27% line:-1
環境テクスチャを提供します

00:28:41.155 --> 00:28:44.725 align:start position:5% line:-2
AREnvironmentProbeAnchorは
ARAnchorのExtensionです

00:28:44.825 --> 00:28:49.429 align:start position:25% line:-2
6DoF･位置･向きを示す
transformを持ちます

00:28:50.898 --> 00:28:55.002 align:start position:20% line:-2
さらにMTLTextureの形式の
キューブマップがあります

00:28:58.272 --> 00:29:02.543 align:start position:25% line:-2
ARKitはキューブマップの
物理的な範囲も示します

00:28:58.272 --> 00:29:02.543 align:start position:25% line:-2
ARKitはキューブマップの
物理的な範囲も示します

00:29:02.643 --> 00:29:05.078 align:start position:32% line:-1
これが反射プローブの

00:29:05.179 --> 00:29:07.648 align:start position:34% line:-1
影響が及ぶ範囲です

00:29:07.781 --> 00:29:12.486 align:start position:29% line:-2
レンダリングの主体により
平行の修正に用いられます

00:29:12.619 --> 00:29:15.455 align:start position:27% line:-2
たとえば
オブジェクトが移動する場合

00:29:15.556 --> 00:29:18.058 align:start position:29% line:-1
自動で新しい位置に対応し

00:29:18.158 --> 00:29:22.529 align:start position:34% line:-2
新たなテクスチャが
環境に反映されます

00:29:24.665 --> 00:29:28.702 align:start position:27% line:-2
他のアンカーと同じ
ライフサイクルをたどります

00:29:28.802 --> 00:29:32.105 align:start position:18% line:-2
ARPlaneAnchorや
ARImageAnchorと同様です

00:29:36.777 --> 00:29:40.714 align:start position:27% line:-2
さらにARSCNViewに
統合されています

00:29:40.814 --> 00:29:45.252 align:start position:23% line:-2
レンダリングに
SceneKitを使用する場合

00:29:45.619 --> 00:29:50.791 align:start position:27% line:-2
ワールドトラッキング構成で
この機能を有効にします

00:29:50.891 --> 00:29:54.495 align:start position:27% line:-2
あとはARSCNViewが
自動的に処理します

00:30:00.367 --> 00:30:02.870 align:start position:34% line:-1
高度な使い方として

00:30:02.970 --> 00:30:07.641 align:start position:27% line:-2
環境プローブアンカーを
手動でシーンに配置できます

00:30:11.445 --> 00:30:15.949 align:start position:5% line:-2
これにはenvironmentTexturingを
manualにします

00:30:16.417 --> 00:30:17.518 align:start position:41% line:-1
そのあとは

00:30:18.151 --> 00:30:22.089 align:start position:29% line:-2
環境プローブアンカーを
好きな位置や向きに作成し

00:30:22.189 --> 00:30:25.993 align:start position:29% line:-2
ARSessionの
オブジェクトに追加します

00:30:28.862 --> 00:30:33.300 align:start position:23% line:-2
この方法でシーンに
プローブアンカーを配置できます

00:30:33.667 --> 00:30:38.272 align:start position:25% line:-2
環境のさらなる情報を得ると
ARSessionは自動的に

00:30:38.372 --> 00:30:40.407 align:start position:30% line:-1
テクスチャを更新します

00:30:42.176 --> 00:30:45.479 align:start position:30% line:-1
手動モードが使えるのは

00:30:45.579 --> 00:30:49.016 align:start position:29% line:-2
拡張現実のオブジェクトが
１つの場合です

00:30:49.116 --> 00:30:53.854 align:start position:21% line:-2
大量の環境プローブアンカーで
システムに負担をかけずに済みます

00:30:57.090 --> 00:31:01.161 align:start position:30% line:-2
環境テクスチャリングの
実演を行い

00:30:57.090 --> 00:31:01.161 align:start position:30% line:-2
環境テクスチャリングの
実演を行い

00:31:01.261 --> 00:31:05.299 align:start position:25% line:-2
拡張現実をリアルに
レンダリングしてお見せします

00:31:06.033 --> 00:31:11.004 align:start position:43% line:-1
(拍手)

00:31:16.176 --> 00:31:19.113 align:start position:32% line:-1
AR1に切り替えます

00:31:23.517 --> 00:31:25.719 align:start position:30% line:-1
オーケイ　この実演では

00:31:26.086 --> 00:31:28.856 align:start position:27% line:-2
ワールドトラッキング構成を
作動させます

00:31:28.956 --> 00:31:32.459 align:start position:27% line:-2
環境テクスチャリング機能は
無効にします

00:31:33.393 --> 00:31:34.394 align:start position:43% line:-1
それでは

00:31:35.062 --> 00:31:38.565 align:start position:23% line:-2
画面下に
スイッチコントローラがあります

00:31:38.665 --> 00:31:41.468 align:start position:27% line:-1
環境光の推定を用いています

00:31:41.635 --> 00:31:46.206 align:start position:30% line:-2
前に見たオブジェクトを
配置しましょう

00:31:46.940 --> 00:31:49.309 align:start position:39% line:-1
ご覧のとおり

00:31:50.477 --> 00:31:52.479 align:start position:34% line:-1
問題はないようです

00:31:52.579 --> 00:31:55.582 align:start position:32% line:-2
テーブルに載っていて
影もあります

00:31:55.916 --> 00:31:58.685 align:start position:30% line:-1
上出来のARシーンです

00:31:59.520 --> 00:32:02.890 align:start position:32% line:-2
足りないのは
テーブルの木の表面が

00:31:59.520 --> 00:32:02.890 align:start position:32% line:-2
足りないのは
テーブルの木の表面が

00:32:02.990 --> 00:32:05.058 align:start position:29% line:-1
反映されていないことです

00:32:06.693 --> 00:32:10.063 align:start position:27% line:-2
このシーンに さらに何かを
置いてみましょう

00:32:10.964 --> 00:32:12.733 align:start position:34% line:-1
たとえば本物の果物

00:32:16.036 --> 00:32:21.108 align:start position:32% line:-2
仮想オブジェクトには
それが映りません

00:32:21.808 --> 00:32:25.579 align:start position:25% line:-2
環境テクスチャリングを
有効にして このテクスチャが

00:32:27.014 --> 00:32:29.850 align:start position:34% line:-2
どうリアルに
表されるか試します

00:32:31.118 --> 00:32:34.154 align:start position:30% line:-2
環境テクスチャリングを
有効にすると同時に

00:32:34.388 --> 00:32:38.759 align:start position:30% line:-2
オブジェクトで
木の表面が反射されます

00:32:38.859 --> 00:32:42.663 align:start position:32% line:-2
バナナのテクスチャも
映っています

00:32:42.896 --> 00:32:48.902 align:start position:43% line:-1
(拍手)

00:32:50.671 --> 00:32:51.438 align:start position:41% line:-1
ありがとう

00:32:52.439 --> 00:32:57.010 align:start position:29% line:-2
これは拡張現実のシーンを
大幅に改善します

00:32:57.110 --> 00:33:00.013 align:start position:36% line:-2
可能な限り
リアルになります

00:32:57.110 --> 00:33:00.013 align:start position:36% line:-2
可能な限り
リアルになります

00:33:00.614 --> 00:33:02.816 align:start position:34% line:-2
本当にテーブル上に
あるようです

00:33:04.418 --> 00:33:06.620 align:start position:34% line:-1
スライドに戻します

00:33:12.593 --> 00:33:14.628 align:start position:29% line:-2
以上が
環境テクスチャリングです

00:33:14.728 --> 00:33:18.065 align:start position:34% line:-2
ARKit 2の
優れた新機能であり

00:33:18.165 --> 00:33:24.171 align:start position:23% line:-2
可能な限り リアルな
拡張現実のシーンを作り出します

00:33:25.405 --> 00:33:29.877 align:start position:27% line:-2
続いて すばらしい新機能を
説明するのは

00:33:29.977 --> 00:33:32.780 align:start position:36% line:-2
これから登壇する
ラインハルトです

00:33:33.146 --> 00:33:38.919 align:start position:43% line:-1
(拍手)

00:33:42.222 --> 00:33:42.956 align:start position:41% line:-1
入ってる？

00:33:43.056 --> 00:33:44.258 align:start position:38% line:-1
オーケイ　よし

00:33:45.659 --> 00:33:46.427 align:start position:34% line:-1
おはようございます

00:33:47.227 --> 00:33:48.395 align:start position:36% line:-1
私はラインハルト

00:33:48.495 --> 00:33:50.464 align:start position:34% line:-2
ARKitチームの
エンジニアです

00:33:50.564 --> 00:33:53.300 align:start position:27% line:-2
次はイメージトラッキングの
話をします

00:33:54.034 --> 00:33:55.469 align:start position:32% line:-1
iOS 11.3では

00:33:55.569 --> 00:33:58.906 align:start position:27% line:-2
ワールドトラッキングに
イメージ検出を導入しました

00:33:59.573 --> 00:34:03.477 align:start position:21% line:-2
イメージ検出は
シーン上の2Dイメージを探します

00:33:59.573 --> 00:34:03.477 align:start position:21% line:-2
イメージ検出は
シーン上の2Dイメージを探します

00:34:04.311 --> 00:34:07.614 align:start position:32% line:-2
検出されるイメージは
静止画です

00:34:07.714 --> 00:34:09.917 align:start position:34% line:-1
動きのないものです

00:34:10.184 --> 00:34:15.188 align:start position:27% line:-2
映画のポスターや
美術館の絵画がその好例です

00:34:16.255 --> 00:34:20.194 align:start position:30% line:-2
ARKitは
イメージが検出されると

00:34:20.293 --> 00:34:23.864 align:start position:30% line:-2
6DoFで位置と向きを
推定します

00:34:24.364 --> 00:34:28.402 align:start position:23% line:-2
これを用いて
シーンにコンテンツを表示します

00:34:29.469 --> 00:34:33.774 align:start position:21% line:-2
この機能はワールドトラッキングに
統合されています

00:34:33.873 --> 00:34:37.478 align:start position:30% line:-2
プロパティで
１回 設定するだけです

00:34:38.879 --> 00:34:42.014 align:start position:29% line:-2
イメージ検出に用いる
イメージをロードするには

00:34:42.114 --> 00:34:45.786 align:start position:20% line:-2
ファイルからのロードか
Xcodeのアセットカタログを使用

00:34:45.886 --> 00:34:49.456 align:start position:29% line:-2
これでイメージを検出する
クオリティが高まります

00:34:50.224 --> 00:34:52.125 align:start position:30% line:-1
イメージ検出は有能です

00:34:52.226 --> 00:34:54.695 align:start position:34% line:-2
iOS 12では
さらに改良しました

00:34:54.795 --> 00:34:57.364 align:start position:25% line:-2
イメージトラッキングについて
話しましょう

00:34:57.664 --> 00:35:00.768 align:start position:18% line:-2
イメージトラッキングは
イメージ検出のExtensionです

00:34:57.664 --> 00:35:00.768 align:start position:18% line:-2
イメージトラッキングは
イメージ検出のExtensionです

00:35:00.868 --> 00:35:06.006 align:start position:27% line:-2
長所はイメージが
静止画でなくてもいい点です

00:35:07.474 --> 00:35:11.411 align:start position:29% line:-2
ARKitが位置と向きを
フレームごとに推定します

00:35:11.511 --> 00:35:13.213 align:start position:30% line:-1
１秒に60フレームです

00:35:13.547 --> 00:35:16.483 align:start position:29% line:-1
これにより2Dイメージを

00:35:16.650 --> 00:35:18.485 align:start position:34% line:-1
正確に取り込めます

00:35:18.585 --> 00:35:23.824 align:start position:23% line:-2
雑誌やボードゲーム
実像があれば何でも取り込めます

00:35:25.025 --> 00:35:29.463 align:start position:25% line:-2
ARKitは複数のイメージを
同時に追跡できます

00:35:30.731 --> 00:35:32.866 align:start position:30% line:-2
デフォルトでは
イメージを１つだけ選択

00:35:32.966 --> 00:35:35.669 align:start position:30% line:-1
雑誌の表紙などの場合は

00:35:35.769 --> 00:35:38.739 align:start position:32% line:-1
設定は１を推奨します

00:35:38.839 --> 00:35:42.609 align:start position:27% line:-1
雑誌の見開きページの場合は

00:35:42.709 --> 00:35:44.144 align:start position:38% line:-1
２に設定します

00:35:45.245 --> 00:35:49.483 align:start position:32% line:-2
そしてiOS 12の
ARKit 2には

00:35:49.583 --> 00:35:53.387 align:start position:0% line:-2
ARImageTrackingConfiguration
という最新の構成があり

00:35:53.487 --> 00:35:56.957 align:start position:23% line:-2
単独でのイメージトラッキングを
可能にします

00:35:57.191 --> 00:35:58.992 align:start position:32% line:-1
設定方法を説明します

00:35:59.860 --> 00:36:02.062 align:start position:29% line:-1
まず 参照するイメージを

00:35:59.860 --> 00:36:02.062 align:start position:29% line:-1
まず 参照するイメージを

00:36:02.162 --> 00:36:04.865 align:start position:27% line:-2
ファイルか
アセットカタログからロード

00:36:05.599 --> 00:36:08.435 align:start position:34% line:-2
参照するイメージを
ロードし終えたら

00:36:08.569 --> 00:36:12.306 align:start position:27% line:-2
次の２種類の
セッションの設定に用います

00:36:12.406 --> 00:36:16.176 align:start position:0% line:-2
ARWorldTrackingConfigurationに
detectionImagesを指定するか

00:36:16.276 --> 00:36:21.281 align:start position:0% line:-2
ARImageTrackingConfigurationに
trackingImagesを指定します

00:36:22.249 --> 00:36:27.254 align:start position:30% line:-2
設定が完了したら
セッションを起動します

00:36:28.222 --> 00:36:29.456 align:start position:36% line:-1
いつものとおり―

00:36:29.823 --> 00:36:33.894 align:start position:23% line:-2
セッションが起動すると
更新ごとにARFrameを取得

00:36:34.328 --> 00:36:38.832 align:start position:9% line:-2
ARFrameにはARImageAnchorの
オブジェクトが含まれます

00:36:38.932 --> 00:36:41.034 align:start position:29% line:-1
イメージ検出後のことです

00:36:42.369 --> 00:36:45.138 align:start position:21% line:-2
このARImageAnchorは
追跡可能です

00:36:45.239 --> 00:36:48.509 align:start position:18% line:-2
ARTrackableのプロトコルで
確認できます

00:36:48.675 --> 00:36:50.577 align:start position:29% line:-1
ここにはBooleanの

00:36:51.445 --> 00:36:52.913 align:start position:25% line:-1
isTrackedがあります

00:36:53.013 --> 00:36:56.717 align:start position:27% line:-2
イメージの
トラッキング状態を示します

00:36:56.817 --> 00:36:59.753 align:start position:25% line:-1
trueだと追跡されています

00:37:00.354 --> 00:37:04.425 align:start position:30% line:-2
どのイメージが どこで
検出されたかも分かり

00:37:04.525 --> 00:37:09.730 align:start position:21% line:-2
イメージの位置と向きが
４行４列のマトリクスで示されます

00:37:11.665 --> 00:37:15.769 align:start position:27% line:-2
イメージアンカーを得るため
まずはイメージをロード

00:37:15.869 --> 00:37:19.439 align:start position:32% line:-2
よいイメージとは何か
見てみましょう

00:37:19.707 --> 00:37:23.043 align:start position:23% line:-1
これは児童書にあるイメージです

00:37:23.143 --> 00:37:26.413 align:start position:30% line:-2
イメージトラッキングに
適しています

00:37:26.680 --> 00:37:28.515 align:start position:34% line:-1
視覚的特徴が顕著で

00:37:28.615 --> 00:37:31.618 align:start position:30% line:-2
細かく描かれ
コントラストが明確です

00:37:32.552 --> 00:37:34.655 align:start position:29% line:-1
一方 こちらのイメージは

00:37:34.755 --> 00:37:38.225 align:start position:34% line:-2
同じく子どもの
教科書にありますが

00:37:38.692 --> 00:37:40.394 align:start position:36% line:-1
お薦めできません

00:37:40.594 --> 00:37:43.897 align:start position:29% line:-1
反復が多く 色領域は単調

00:37:43.997 --> 00:37:47.334 align:start position:27% line:-2
グレースケールに変換すると
ヒストグラムが狭いです

00:37:48.302 --> 00:37:52.439 align:start position:25% line:-2
こういうデータを調べなくても
Xcodeが役に立ちます

00:37:52.773 --> 00:37:55.075 align:start position:25% line:-2
２つのイメージをXcodeに
インポートすると

00:37:55.943 --> 00:38:00.280 align:start position:27% line:-2
推奨される海のイメージには
警告が表示されず

00:37:55.943 --> 00:38:00.280 align:start position:27% line:-2
推奨される海のイメージには
警告が表示されず

00:38:00.514 --> 00:38:05.152 align:start position:29% line:-2
子ども３人のイメージには
警告アイコンが出ます

00:38:05.919 --> 00:38:09.089 align:start position:29% line:-2
アイコンをクリックすると
詳細が出て

00:38:09.189 --> 00:38:12.059 align:start position:30% line:-2
なぜ このイメージが
イメージトラッキングに

00:38:12.159 --> 00:38:13.994 align:start position:32% line:-1
向かないか分かります

00:38:14.161 --> 00:38:17.798 align:start position:32% line:-2
ヒストグラムや
単調な色領域について

00:38:17.898 --> 00:38:19.767 align:start position:36% line:-1
情報が出てきます

00:38:21.335 --> 00:38:26.507 align:start position:27% line:-2
イメージのロードが終わると
２種類の構成から選べます

00:38:26.607 --> 00:38:29.343 align:start position:0% line:-2
１つは
ARWorldTrackingConfiguration

00:38:29.443 --> 00:38:30.778 align:start position:30% line:-1
これについて解説します

00:38:33.213 --> 00:38:35.749 align:start position:25% line:-2
ワールドトラッキングで
イメージトラッキングを使うと

00:38:35.849 --> 00:38:39.086 align:start position:25% line:-2
イメージアンカーは
ワールド座標系上に表されます

00:38:39.186 --> 00:38:43.457 align:start position:23% line:-2
イメージアンカー
またはオプションで平面アンカー

00:38:44.224 --> 00:38:49.596 align:start position:23% line:-2
そしてカメラやワールドの起点も
すべて同じ座標に出ます

00:38:49.697 --> 00:38:52.933 align:start position:25% line:-2
それぞれのインタラクションは
これで簡単に

00:38:54.001 --> 00:38:56.236 align:start position:30% line:-1
iOS 12の新機能は

00:38:56.336 --> 00:39:00.741 align:start position:29% line:-2
イメージの検出だけでなく
追跡もできます

00:38:56.336 --> 00:39:00.741 align:start position:29% line:-2
イメージの検出だけでなく
追跡もできます

00:39:02.209 --> 00:39:05.546 align:start position:0% line:-2
ARImageTrackingConfigurationは
新しい構成です

00:39:05.646 --> 00:39:08.315 align:start position:25% line:-2
単独でイメージトラッキングを
行います

00:39:08.916 --> 00:39:11.251 align:start position:29% line:-2
ワールドトラッキングから
独立し

00:39:11.351 --> 00:39:15.823 align:start position:23% line:-2
トラッキング時に
モーションセンサーを用いません

00:39:16.056 --> 00:39:17.124 align:start position:45% line:-1
つまり

00:39:17.458 --> 00:39:22.663 align:start position:27% line:-2
イメージの特定を始める前に
初期化されることがなく

00:39:23.096 --> 00:39:26.433 align:start position:32% line:-2
エレベータや列車など
地面が動く時に

00:39:26.533 --> 00:39:30.470 align:start position:27% line:-2
ワールドトラッキングが
失敗した場合でも機能します

00:39:31.338 --> 00:39:33.040 align:start position:39% line:-1
こういう場合

00:39:33.140 --> 00:39:36.610 align:start position:29% line:-2
ARKitは全フレームの
位置と向きを

00:39:36.710 --> 00:39:38.345 align:start position:30% line:-1
１秒60フレームで推定

00:39:39.246 --> 00:39:42.816 align:start position:30% line:-2
これは４行のシンプルな
コードで実行できます

00:39:43.884 --> 00:39:49.223 align:start position:0% line:-2
ARImageTrackingConfiguration
を作成し

00:39:49.323 --> 00:39:52.826 align:start position:32% line:-2
追跡したいイメージを
指定します

00:39:52.993 --> 00:39:57.464 align:start position:32% line:-2
ここではネコとイヌ
鳥の写真を指定します

00:39:59.433 --> 00:40:02.770 align:start position:29% line:-2
イメージを
いくつ追跡したいかを設定

00:39:59.433 --> 00:40:02.770 align:start position:29% line:-2
イメージを
いくつ追跡したいかを設定

00:40:02.903 --> 00:40:05.239 align:start position:32% line:-1
ここでは２つにします

00:40:05.973 --> 00:40:09.777 align:start position:32% line:-2
２つのイメージまでは
同時に追えますが

00:40:09.877 --> 00:40:11.945 align:start position:34% line:-1
３つ同時は不可です

00:40:12.379 --> 00:40:17.217 align:start position:25% line:-2
２つのイメージを追跡していて
３つ目が出てきても

00:40:17.518 --> 00:40:22.156 align:start position:30% line:-2
追跡はされませんが
検出情報が更新されます

00:40:23.056 --> 00:40:26.427 align:start position:30% line:-2
この構成でセッションを
起動します

00:40:27.594 --> 00:40:31.565 align:start position:21% line:-2
ワールドトラッキングを使用しても
同じことが可能です

00:40:31.665 --> 00:40:34.368 align:start position:30% line:-1
この２行を書き換えます

00:40:35.068 --> 00:40:37.871 align:start position:32% line:-2
イメージ検出と
トラッキングの違いは

00:40:37.971 --> 00:40:40.274 align:start position:25% line:-2
トラッキングできるイメージの
最大数です

00:40:40.574 --> 00:40:45.646 align:start position:27% line:-2
イメージ検出をする
アプリケーションがある場合

00:40:45.746 --> 00:40:50.117 align:start position:21% line:-2
これを追加し リコンパイルすれば
トラッキングも可能になります

00:40:50.818 --> 00:40:53.520 align:start position:29% line:-1
どれだけ簡単か見せるため

00:40:53.620 --> 00:40:55.456 align:start position:29% line:-1
Xcodeの実演をします

00:40:56.723 --> 00:41:01.628 align:start position:43% line:-1
(拍手)

00:40:56.723 --> 00:41:01.628 align:start position:43% line:-1
(拍手)

00:41:02.696 --> 00:41:05.065 align:start position:30% line:-1
AR2に行ける？　よし

00:41:05.365 --> 00:41:08.102 align:start position:30% line:-1
この実演で作成するのは

00:41:08.202 --> 00:41:10.270 align:start position:36% line:-1
AR写真フレーム

00:41:10.370 --> 00:41:13.440 align:start position:34% line:-2
うちのネコの写真を
用意しました

00:41:13.674 --> 00:41:15.742 align:start position:27% line:-1
Xcodeを使って作ります

00:41:16.477 --> 00:41:18.779 align:start position:36% line:-1
まず作成したのは

00:41:18.879 --> 00:41:22.816 align:start position:27% line:-2
iOSのアプリケーションの
テンプレート

00:41:22.916 --> 00:41:25.786 align:start position:29% line:-1
今のところ ほぼ空白です

00:41:26.620 --> 00:41:30.157 align:start position:25% line:-1
次は添付したいイメージを指定

00:41:30.424 --> 00:41:34.728 align:start position:25% line:-2
うちのネコ デイジーの写真を
インポートしました

00:41:36.897 --> 00:41:38.065 align:start position:39% line:-1
私のネコです

00:41:39.900 --> 00:41:42.202 align:start position:32% line:-1
名前の指定が必要です

00:41:42.402 --> 00:41:44.805 align:start position:29% line:-1
デイジーと名前をつけます

00:41:44.905 --> 00:41:47.941 align:start position:34% line:-2
次は 現実世界での
写真の幅を指定

00:41:48.042 --> 00:41:51.145 align:start position:29% line:-1
私の写真フレームの幅です

00:41:52.146 --> 00:41:55.749 align:start position:27% line:-1
ネコの動画もロードしました

00:41:56.250 --> 00:41:57.818 align:start position:36% line:-1
全部 まとめます

00:41:58.585 --> 00:42:02.790 align:start position:30% line:-2
まずは構成を作成します
構成のタイプは

00:41:58.585 --> 00:42:02.790 align:start position:30% line:-2
まずは構成を作成します
構成のタイプは

00:42:02.956 --> 00:42:06.793 align:start position:0% line:-1
ARImageTrackingConfiguration

00:42:07.427 --> 00:42:10.330 align:start position:29% line:-2
アセットカタログから
追跡するイメージをロード

00:42:10.430 --> 00:42:13.567 align:start position:18% line:-1
グループ名“Photos”を使います

00:42:13.667 --> 00:42:16.070 align:start position:27% line:-1
含まれるイメージは１つだけ

00:42:16.170 --> 00:42:18.138 align:start position:29% line:-1
ネコのデイジーの写真です

00:42:18.839 --> 00:42:21.175 align:start position:38% line:-1
次に行う設定は

00:42:21.275 --> 00:42:24.845 align:start position:14% line:-2
trackingImagesプロパティに
追跡するイメージを構成

00:42:24.945 --> 00:42:25.812 align:start position:43% line:-1
ここです

00:42:26.080 --> 00:42:29.483 align:start position:34% line:-2
追跡するイメージの
最大数を指定します

00:42:30.350 --> 00:42:33.787 align:start position:25% line:-2
この時点でアプリケーションは
ARSessionを開始

00:42:33.887 --> 00:42:36.823 align:start position:25% line:-2
イメージ検出後に
イメージアンカーが得られます

00:42:36.990 --> 00:42:38.458 align:start position:30% line:-1
コンテンツを追加します

00:42:38.892 --> 00:42:41.228 align:start position:34% line:-1
動画をロードします

00:42:42.062 --> 00:42:48.068 align:start position:25% line:-2
リソースパネルから
AVプレーヤーをロードします

00:42:48.969 --> 00:42:52.439 align:start position:29% line:-2
それを実際のイメージ上に
追加します

00:42:55.008 --> 00:42:58.779 align:start position:25% line:-2
アンカーが
イメージアンカーであるか確認

00:42:59.279 --> 00:43:05.285 align:start position:20% line:-2
シーンのイメージと物理的寸法が
同一のSCNPlaneを作成します

00:42:59.279 --> 00:43:05.285 align:start position:20% line:-2
シーンのイメージと物理的寸法が
同一のSCNPlaneを作成します

00:43:06.186 --> 00:43:09.757 align:start position:25% line:-2
ビデオプレーヤーを
Planeのテクスチャに指定

00:43:09.857 --> 00:43:12.159 align:start position:34% line:-2
ビデオプレーヤーの
再生を始めます

00:43:13.160 --> 00:43:17.397 align:start position:14% line:-2
geometryからSCNNodeを作り
逆方向に回転させて

00:43:17.498 --> 00:43:21.368 align:start position:27% line:-1
アンカーの座標に合わせます

00:43:22.302 --> 00:43:24.171 align:start position:36% line:-1
以上で作動します

00:43:24.271 --> 00:43:26.707 align:start position:30% line:-1
ライブで見てみましょう

00:43:27.508 --> 00:43:28.709 align:start position:41% line:-1
それでは―

00:43:30.043 --> 00:43:33.647 align:start position:34% line:-2
写真のフレームを
カメラの前に出すと

00:43:34.014 --> 00:43:37.151 align:start position:30% line:-2
ビデオが再生
ネコの反応が見られます

00:43:37.251 --> 00:43:43.257 align:start position:43% line:-1
(拍手)

00:43:44.291 --> 00:43:47.261 align:start position:27% line:-2
ARKitはリアルタイムで
位置を推定するため

00:43:47.361 --> 00:43:49.296 align:start position:27% line:-1
デバイスを自由に動かせます

00:43:49.396 --> 00:43:51.064 align:start position:29% line:-1
オブジェクトも動かせます

00:43:51.165 --> 00:43:54.601 align:start position:27% line:-1
フレームごとに更新されます

00:43:55.636 --> 00:43:56.970 align:start position:36% line:-1
ネコが逃げました

00:43:57.971 --> 00:44:00.841 align:start position:34% line:-2
実演は以上
スライドに戻ります

00:43:57.971 --> 00:44:00.841 align:start position:34% line:-2
実演は以上
スライドに戻ります

00:44:00.941 --> 00:44:06.947 align:start position:43% line:-1
(拍手)

00:44:08.248 --> 00:44:12.953 align:start position:20% line:-2
ARKitでイメージトラッキングを
使うのはすごく簡単です

00:44:13.053 --> 00:44:16.190 align:start position:34% line:-2
ネコの動画を
撮るよりもラクです

00:44:16.323 --> 00:44:17.858 align:start position:41% line:-1
(笑い声)

00:44:17.958 --> 00:44:22.129 align:start position:23% line:-2
イメージトラッキングは
2Dのオブジェクトに向いてます

00:44:22.229 --> 00:44:25.198 align:start position:32% line:-2
扱う対象は
2D以外にもあります

00:44:25.299 --> 00:44:28.735 align:start position:25% line:-2
次はオブジェクト検出について
説明します

00:44:33.607 --> 00:44:39.012 align:start position:21% line:-2
オブジェクト検出は
3Dオブジェクトの検出に使います

00:44:39.780 --> 00:44:44.685 align:start position:21% line:-2
イメージ検出と同様
静止したオブジェクトが対象であり

00:44:44.785 --> 00:44:47.688 align:start position:27% line:-2
オブジェクトは動いていては
いけません

00:44:48.222 --> 00:44:51.925 align:start position:32% line:-2
オブジェクトの好例は
美術品の展示品

00:44:52.025 --> 00:44:54.395 align:start position:30% line:-1
玩具や家庭用品などです

00:44:56.430 --> 00:44:57.831 align:start position:34% line:-1
イメージ検出と同様

00:44:57.931 --> 00:45:02.236 align:start position:27% line:-2
iOSのアプリケーションで
まずスキャンします

00:44:57.931 --> 00:45:02.236 align:start position:27% line:-2
iOSのアプリケーションで
まずスキャンします

00:45:03.303 --> 00:45:07.941 align:start position:20% line:-2
ソースコードを提供している
フル機能のiOSアプリケーションで

00:45:08.042 --> 00:45:10.911 align:start position:34% line:-2
3Dオブジェクトを
スキャンできます

00:45:11.245 --> 00:45:14.615 align:start position:30% line:-2
オブジェクトには
いくつか要件があります

00:45:14.948 --> 00:45:18.452 align:start position:36% line:-2
質感があり硬質で
反射しないこと

00:45:18.552 --> 00:45:22.022 align:start position:30% line:-2
テーブルに載るくらいの
サイズが必要です

00:45:23.657 --> 00:45:27.027 align:start position:27% line:-2
ARKitはオブジェクトの
位置と向きを

00:45:27.127 --> 00:45:29.563 align:start position:27% line:-1
6DoFに基づき推定します

00:45:31.665 --> 00:45:35.135 align:start position:23% line:-2
全機能はワールドトラッキングに
統合されています

00:45:35.235 --> 00:45:39.807 align:start position:21% line:-2
オブジェクト検出開始には
プロパティを１つ設定するだけです

00:45:40.574 --> 00:45:42.810 align:start position:32% line:-1
手順を見てみましょう

00:45:43.977 --> 00:45:45.679 align:start position:20% line:-1
ARReferenceImageを

00:45:45.779 --> 00:45:48.549 align:start position:21% line:-2
ファイルかXcodeの
アセットカタログからロードします

00:45:49.316 --> 00:45:51.919 align:start position:12% line:-2
ARReferenceObjectについて
すぐに説明します

00:45:52.319 --> 00:45:56.590 align:start position:18% line:-2
ARReferenceObjectの
ロードが終わったら

00:45:58.025 --> 00:46:01.762 align:start position:0% line:-2
ARWorldTrackingConfiguration
の設定をします

00:45:58.025 --> 00:46:01.762 align:start position:0% line:-2
ARWorldTrackingConfiguration
の設定をします

00:46:01.862 --> 00:46:04.598 align:start position:20% line:-2
detectionObjectsの
プロパティを指定

00:46:05.599 --> 00:46:10.738 align:start position:30% line:-2
構成の設定が済んだら
セッションを開始します

00:46:11.271 --> 00:46:13.040 align:start position:34% line:-1
イメージ検出と同様

00:46:13.140 --> 00:46:16.243 align:start position:18% line:-2
ARSessionの作動中は
更新ごとにARFrameが得られます

00:46:16.510 --> 00:46:17.978 align:start position:41% line:-1
この場合―

00:46:18.479 --> 00:46:21.014 align:start position:30% line:-2
シーンにオブジェクトが
検出されると

00:46:21.115 --> 00:46:26.720 align:start position:14% line:-2
ARFrameの一部として
ARObjectAnchorが得られます

00:46:28.722 --> 00:46:32.860 align:start position:21% line:-2
このようなARオブジェクトは
ARAnchorのサブクラスです

00:46:32.960 --> 00:46:37.865 align:start position:20% line:-2
従って 位置･向き･6DoFを表す
transformを持ちます

00:46:38.098 --> 00:46:42.336 align:start position:16% line:-2
ARReferenceObjectへの
参照点が提示されるため

00:46:42.436 --> 00:46:45.205 align:start position:30% line:-2
どのオブジェクトを
検出したかが分かります

00:46:46.173 --> 00:46:48.108 align:start position:41% line:-1
この機能は

00:46:49.209 --> 00:46:52.579 align:start position:32% line:-2
３行の簡単なコードで
実装できます

00:46:52.913 --> 00:46:56.483 align:start position:0% line:-2
ARWorldTrackingConfiguration
の構成を作成

00:46:56.617 --> 00:47:00.120 align:start position:29% line:-2
検出したいオブジェクトを
指定します

00:46:56.617 --> 00:47:00.120 align:start position:29% line:-2
検出したいオブジェクトを
指定します

00:47:00.420 --> 00:47:04.425 align:start position:25% line:-2
ここではARの
博物館アプリケーションを作り

00:47:04.525 --> 00:47:07.928 align:start position:25% line:-1
古代の胸像や土器を検出します

00:47:08.829 --> 00:47:11.531 align:start position:30% line:-2
これを使い
セッションを起動します

00:47:12.299 --> 00:47:17.171 align:start position:23% line:-2
簡単な博物館アプリケーションを
オフィスで作ってきました

00:47:17.271 --> 00:47:18.739 align:start position:38% line:-1
見てみましょう

00:47:18.906 --> 00:47:24.378 align:start position:29% line:-2
iOSアプリケーションで
この胸像が見えてくると

00:47:24.478 --> 00:47:28.849 align:start position:30% line:-2
6DoFの姿勢が得られ
シーンが提示されます

00:47:28.949 --> 00:47:32.453 align:start position:30% line:-2
像の上には
簡単な説明が浮かびます

00:47:32.753 --> 00:47:34.655 align:start position:30% line:-1
今回 説明に加えたのは

00:47:34.988 --> 00:47:38.492 align:start position:21% line:-2
エジプト王妃 ネフェルティティの
名前と生年月日

00:47:38.592 --> 00:47:42.696 align:start position:21% line:-2
レンダリングエンジンで使える
あらゆるコンテンツを追加できます

00:47:43.797 --> 00:47:47.768 align:start position:21% line:-2
アプリケーションの構築には
オブジェクトのスキャンが必要です

00:47:47.935 --> 00:47:50.170 align:start position:27% line:-1
スキャンについて説明します

00:47:51.739 --> 00:47:56.210 align:start position:27% line:-2
オブジェクトのスキャンでは
蓄積シーン情報を抽出します

00:47:57.010 --> 00:48:00.247 align:start position:34% line:-2
平面の推定と
深い関係があります

00:47:57.010 --> 00:48:00.247 align:start position:34% line:-2
平面の推定と
深い関係があります

00:48:00.347 --> 00:48:05.519 align:start position:29% line:-2
蓄積シーン情報は水平面と
垂直面の推定に使われます

00:48:05.953 --> 00:48:08.122 align:start position:38% line:-1
今回 私たちは

00:48:08.222 --> 00:48:10.724 align:start position:36% line:-1
この情報を用いて

00:48:11.058 --> 00:48:13.861 align:start position:34% line:-2
3Dオブジェクトの
情報を集めました

00:48:14.995 --> 00:48:18.699 align:start position:29% line:-2
オブジェクトを探す領域を
指定するために

00:48:18.799 --> 00:48:22.403 align:start position:7% line:-2
transformとextentとcenterを
指定します

00:48:22.636 --> 00:48:25.205 align:start position:29% line:-2
これはオブジェクトを囲む
境界ボックスであり

00:48:25.305 --> 00:48:28.442 align:start position:27% line:-1
シーン内の位置を定義します

00:48:29.777 --> 00:48:33.781 align:start position:29% line:-2
抽出されたオブジェクトは
アセットカタログに対応

00:48:33.881 --> 00:48:36.450 align:start position:34% line:-1
これにより手軽に―

00:48:37.151 --> 00:48:41.488 align:start position:21% line:-2
新しいアプリケーションに組み込め
何度でも使えるようになります

00:48:42.456 --> 00:48:47.061 align:start position:0% line:-2
ARObjectScanningConfiguration
をスキャン用に追加しました

00:48:48.028 --> 00:48:51.865 align:start position:21% line:-2
自らスキャン用アプリケーションを
実装する必要はありません

00:48:51.965 --> 00:48:56.136 align:start position:25% line:-2
フル機能のアプリケーションの
サンプルコードが使えます

00:48:56.236 --> 00:48:59.073 align:start position:9% line:-2
“Scanning and detecting
3D objects”です

00:49:00.007 --> 00:49:02.609 align:start position:30% line:-1
使い方を見てみましょう

00:49:02.943 --> 00:49:06.280 align:start position:29% line:-2
興味のあるオブジェクトを
境界ボックスで囲みます

00:49:06.380 --> 00:49:08.515 align:start position:30% line:-1
ネフェルティティ像です

00:49:09.183 --> 00:49:12.786 align:start position:30% line:-2
オブジェクトを
ぴったり囲む必要はなく

00:49:12.886 --> 00:49:18.258 align:start position:23% line:-2
重要な特徴点が
内側に収まっていれば大丈夫です

00:49:19.059 --> 00:49:21.295 align:start position:30% line:-1
境界ボックスができたら

00:49:21.695 --> 00:49:24.731 align:start position:30% line:-1
“Scan”を押します

00:49:24.832 --> 00:49:26.934 align:start position:32% line:-1
スキャンが開始します

00:49:27.034 --> 00:49:30.637 align:start position:34% line:-2
進行状態を画面上で
見ることができます

00:49:30.738 --> 00:49:33.540 align:start position:36% line:-2
オブジェクトの
スキャンの状況が

00:49:33.640 --> 00:49:35.142 align:start position:32% line:-1
空間的に表示されます

00:49:35.843 --> 00:49:39.179 align:start position:34% line:-2
すべての角度からの
スキャンは不要です

00:49:39.413 --> 00:49:44.151 align:start position:34% line:-2
たとえば 博物館で
像が壁に向いていて

00:49:44.251 --> 00:49:49.022 align:start position:30% line:-2
特定の角度から
検出できないのであれば

00:49:49.123 --> 00:49:51.391 align:start position:27% line:-1
その面のスキャンは無用です

00:49:53.260 --> 00:49:56.030 align:start position:34% line:-2
満足のいく
スキャンができたら

00:49:56.864 --> 00:49:58.031 align:start position:39% line:-1
範囲の中心を

00:49:59.433 --> 00:50:01.401 align:start position:39% line:-1
調整できます

00:49:59.433 --> 00:50:01.401 align:start position:39% line:-1
調整できます

00:50:01.568 --> 00:50:03.771 align:start position:32% line:-2
オブジェクトの起点に
相当します

00:50:04.204 --> 00:50:08.809 align:start position:27% line:-2
中心はオブジェクトの
範囲内にある必要があります

00:50:09.843 --> 00:50:14.681 align:start position:29% line:-2
最後にアプリケーションで
検出テストを実行します

00:50:15.215 --> 00:50:19.520 align:start position:23% line:-2
今回の場合 さまざまな視点から
検出ができており

00:50:19.620 --> 00:50:20.788 align:start position:36% line:-1
いいスキャンです

00:50:21.789 --> 00:50:24.425 align:start position:34% line:-2
オブジェクトを
動かしてみましょう

00:50:24.525 --> 00:50:28.529 align:start position:25% line:-2
違う場所で
テクスチャや照明が変わっても

00:50:29.363 --> 00:50:32.599 align:start position:25% line:-1
検出できるかどうか試すのです

00:50:34.301 --> 00:50:39.006 align:start position:9% line:-2
スキャンのあとは
ARReferenceObjectが得られます

00:50:39.406 --> 00:50:41.708 align:start position:29% line:-1
先ほど図で見せたものです

00:50:42.109 --> 00:50:44.344 align:start position:27% line:-2
ARオブジェクトファイルの
拡張タイプに

00:50:44.445 --> 00:50:47.381 align:start position:34% line:-2
オブジェクトを
シリアル化できます

00:50:47.481 --> 00:50:52.152 align:start position:23% line:-2
名前がつけられ
アセットカタログに表示されます

00:50:52.252 --> 00:50:55.689 align:start position:30% line:-2
スキャンに用いた
中心と範囲も含まれます

00:50:56.390 --> 00:50:58.892 align:start position:30% line:-1
スキャンを行った領域の

00:50:58.992 --> 00:51:02.863 align:start position:36% line:-2
特徴点も
すべて取得します

00:50:58.992 --> 00:51:02.863 align:start position:36% line:-2
特徴点も
すべて取得します

00:51:05.232 --> 00:51:06.900 align:start position:27% line:-1
以上がオブジェクト検出です

00:51:07.101 --> 00:51:10.838 align:start position:25% line:-2
オブジェクトを検出する前には
スキャンが必要です

00:51:10.938 --> 00:51:14.274 align:start position:27% line:-2
完全なソースコードは
現在 ダウンロード可能です

00:51:16.210 --> 00:51:19.713 align:start position:21% line:-2
次はフェイストラッキングについて
解説します

00:51:24.284 --> 00:51:26.687 align:start position:29% line:-2
昨年 iPhone Xを
リリースした際

00:51:26.787 --> 00:51:30.224 align:start position:29% line:-2
強力な顔検出と追跡を
ARKitに追加しました

00:51:30.591 --> 00:51:34.395 align:start position:29% line:-2
ARKitは
１秒あたり60フレームで

00:51:34.495 --> 00:51:37.297 align:start position:36% line:-2
顔の位置と
向きを推定します

00:51:37.664 --> 00:51:40.200 align:start position:32% line:-1
このポーズを利用して

00:51:40.300 --> 00:51:43.771 align:start position:32% line:-2
ユーザの顔に
仮面や帽子を被せたり

00:51:43.871 --> 00:51:46.373 align:start position:32% line:-2
顔全体のテクスチャを
取り替えたりできます

00:51:47.641 --> 00:51:52.446 align:start position:18% line:-2
ARFaceGeometryの形式の
三角形メッシュもあります

00:51:54.781 --> 00:51:58.018 align:start position:27% line:-2
顔面メッシュの
レンダリングに必要な情報が

00:51:58.152 --> 00:52:00.220 align:start position:23% line:-2
ARFaceGeometryに
すべて含まれています

00:51:58.152 --> 00:52:00.220 align:start position:23% line:-2
ARFaceGeometryに
すべて含まれています

00:52:00.387 --> 00:52:02.456 align:start position:39% line:-1
表示形式には

00:52:02.823 --> 00:52:07.061 align:start position:29% line:-2
頂点･三角形･検出座標が
用いられます

00:52:08.729 --> 00:52:11.765 align:start position:25% line:-2
主要なアンカーのタイプは
ARFaceAnchorです

00:52:11.865 --> 00:52:15.602 align:start position:25% line:-2
フェイストラッキングに
必要な情報がすべて含まれます

00:52:16.970 --> 00:52:20.040 align:start position:29% line:-2
幾何学イメージをリアルに
レンダリングするために

00:52:20.274 --> 00:52:22.910 align:start position:36% line:-2
指向性照明推定を
追加しました

00:52:23.577 --> 00:52:26.213 align:start position:29% line:-2
ARKitは照明を
ライトプローブとして使い

00:52:26.313 --> 00:52:31.118 align:start position:0% line:-1
ARDirectionalLightEstimateを推定

00:52:31.218 --> 00:52:35.522 align:start position:27% line:-2
照明の強度･方向･色温度が
推定に含まれます

00:52:36.490 --> 00:52:38.192 align:start position:38% line:-1
この推定により

00:52:38.292 --> 00:52:42.229 align:start position:27% line:-2
アプリケーションの見ばえを
十分 よくできます

00:52:42.329 --> 00:52:44.932 align:start position:29% line:-2
アプリケーションを
凝ったものにしたい場合は

00:52:45.332 --> 00:52:49.203 align:start position:27% line:-2
２次の球面調和関数の係数も
提供しています

00:52:49.303 --> 00:52:52.339 align:start position:32% line:-2
シーン全体の
照明の状態を収集でき

00:52:52.439 --> 00:52:56.076 align:start position:32% line:-2
コンテンツの見ばえを
さらに よくできます

00:52:57.778 --> 00:53:00.848 align:start position:27% line:-2
ARKitはリアルタイムで
表情の追跡もできます

00:52:57.778 --> 00:53:00.848 align:start position:27% line:-2
ARKitはリアルタイムで
表情の追跡もできます

00:53:01.014 --> 00:53:07.021 align:start position:25% line:-2
ブレンドシェイプと呼ばれる
50種類以上の表情があります

00:53:08.055 --> 00:53:10.958 align:start position:27% line:-2
ブレンドシェイプは
０と１の間の値からなります

00:53:11.058 --> 00:53:14.127 align:start position:25% line:-2
１はアクティブな状態を意味し
０はその逆です

00:53:14.228 --> 00:53:16.697 align:start position:27% line:-1
たとえば あごの開放係数は

00:53:16.897 --> 00:53:21.635 align:start position:30% line:-2
口を開けると値が１
閉じると０に近づきます

00:53:22.636 --> 00:53:25.873 align:start position:27% line:-2
バーチャルなキャラクターを
動かす時に使えます

00:53:26.040 --> 00:53:30.344 align:start position:27% line:-2
この例では
口と左右の目の開閉を用いて

00:53:30.444 --> 00:53:33.146 align:start position:25% line:-2
シンプルな顔のキャラクターを
動かしています

00:53:34.081 --> 00:53:35.749 align:start position:30% line:-1
もっと うまくできます

00:53:36.150 --> 00:53:38.452 align:start position:27% line:-1
実際 アニ文字を作る際には

00:53:38.552 --> 00:53:40.888 align:start position:29% line:-2
ブレンドシェイプを
もっと多く使っていました

00:53:40.988 --> 00:53:45.125 align:start position:29% line:-2
これら動く青いバーを使い
頭部の姿勢を取得

00:53:45.225 --> 00:53:48.495 align:start position:25% line:-2
私の表情を
パンダの顔にマッピングします

00:53:49.596 --> 00:53:54.501 align:start position:21% line:-2
キャラクターを動かすのに
必要なものをすべて提供しています

00:53:54.601 --> 00:53:56.537 align:start position:34% line:-1
アニ文字と同様です

00:53:58.872 --> 00:54:00.474 align:start position:32% line:-1
ありがとうございます

00:53:58.872 --> 00:54:00.474 align:start position:32% line:-1
ありがとうございます

00:54:00.574 --> 00:54:04.611 align:start position:43% line:-1
(拍手)

00:54:04.812 --> 00:54:08.182 align:start position:16% line:-2
ARKit 2のフェイストラッキングの
新機能を見てみます

00:54:08.582 --> 00:54:10.284 align:start position:38% line:-1
視線追跡の追加

00:54:10.384 --> 00:54:14.621 align:start position:23% line:-1
左右の目を6DoFで追跡します

00:54:16.990 --> 00:54:18.125 align:start position:39% line:-1
ご覧のとおり

00:54:18.225 --> 00:54:21.295 align:start position:43% line:-1
(拍手)

00:54:21.395 --> 00:54:24.531 align:start position:20% line:-2
これらのプロパティは
ARFaceAnchorの一部です

00:54:24.631 --> 00:54:29.870 align:start position:27% line:-2
２つの視線が
交差する注視点も含まれます

00:54:30.170 --> 00:54:34.241 align:start position:27% line:-2
この情報は
キャラクターを動かすことや

00:54:34.341 --> 00:54:37.244 align:start position:27% line:-2
アプリケーションへの
他のインプットにも使えます

00:54:37.678 --> 00:54:38.846 align:start position:38% line:-1
他にもあります

00:54:39.546 --> 00:54:41.281 align:start position:34% line:-1
舌のサポートを追加

00:54:42.015 --> 00:54:44.184 align:start position:29% line:-2
新しいブレンドシェイプで
表されます

00:54:44.485 --> 00:54:46.987 align:start position:32% line:-1
舌が出ていると値は１

00:54:47.087 --> 00:54:49.056 align:start position:34% line:-1
出ていないと０です

00:54:49.389 --> 00:54:52.726 align:start position:27% line:-1
これもキャラクターの動きや

00:54:52.826 --> 00:54:56.730 align:start position:32% line:-2
アプリケーションへの
インプットに使えます

00:55:00.067 --> 00:55:01.535 align:start position:32% line:-1
ありがとうございます

00:55:01.635 --> 00:55:03.470 align:start position:43% line:-1
(拍手)

00:55:03.570 --> 00:55:06.440 align:start position:32% line:-2
何度も舌を出す自分を
見ながら

00:55:06.540 --> 00:55:08.375 align:start position:39% line:-1
要約をします

00:55:08.842 --> 00:55:09.877 align:start position:43% line:-1
それでは

00:55:10.277 --> 00:55:12.946 align:start position:29% line:-2
ARKit 2の新機能を
確認しましょう

00:55:13.647 --> 00:55:17.951 align:start position:29% line:-2
マップの保存とロードは
永続性を提供する新機能で

00:55:18.052 --> 00:55:20.854 align:start position:32% line:-2
複数ユーザの
コラボを可能にします

00:55:21.688 --> 00:55:26.126 align:start position:25% line:-2
ワールドトラッキングの改良で
平面検出が正確かつ迅速になり

00:55:26.226 --> 00:55:28.595 align:start position:27% line:-2
新しいビデオフォーマットも
使えます

00:55:29.396 --> 00:55:31.465 align:start position:30% line:-1
環境テクスチャリングは

00:55:31.565 --> 00:55:36.437 align:start position:23% line:-2
コンテンツを まるで本当に
シーンに存在するように見せます

00:55:36.537 --> 00:55:41.041 align:start position:23% line:-2
シーンのテクスチャを収集し
オブジェクトの細部に利用します

00:55:41.775 --> 00:55:43.811 align:start position:30% line:-1
イメージトラッキングは

00:55:46.280 --> 00:55:51.318 align:start position:27% line:-2
2Dオブジェクトを
イメージとして追跡できます

00:55:51.418 --> 00:55:54.154 align:start position:23% line:-2
ARKitは3Dオブジェクトの
検出も可能です

00:55:54.488 --> 00:55:58.025 align:start position:29% line:-2
フェイストラッキングでは
視線や舌にも対応

00:55:59.760 --> 00:56:04.665 align:start position:27% line:-2
以上はすべてARKitの
基本機能として利用可能です

00:55:59.760 --> 00:56:04.665 align:start position:27% line:-2
以上はすべてARKitの
基本機能として利用可能です

00:56:06.133 --> 00:56:09.069 align:start position:25% line:-2
iOS 12のARKitには
５つの異なる構成があり

00:56:09.169 --> 00:56:10.504 align:start position:36% line:-1
２つは新登場です

00:56:10.604 --> 00:56:14.675 align:start position:0% line:-2
単独でのイメージトラッキング用の
ARImageTrackingConfiguration

00:56:14.775 --> 00:56:17.211 align:start position:0% line:-2
そして
ARObjectScanningConfiguration

00:56:17.945 --> 00:56:23.150 align:start position:25% line:-2
ARSessionと連動する
一連の補助タイプには

00:56:23.384 --> 00:56:25.919 align:start position:27% line:-2
ARFrameや
ARCameraがあります

00:56:26.620 --> 00:56:27.821 align:start position:29% line:-1
これには新たに２つが追加

00:56:27.921 --> 00:56:30.190 align:start position:20% line:-2
オブジェクト検出用の
ARReferenceObject

00:56:30.290 --> 00:56:33.794 align:start position:16% line:-2
永続性を有し
複数ユーザで使えるARWorldMap

00:56:34.795 --> 00:56:38.365 align:start position:27% line:-2
そして現実世界での
位置を表すARAnchor

00:56:38.465 --> 00:56:40.834 align:start position:41% line:-1
追加が２つ

00:56:40.934 --> 00:56:42.369 align:start position:23% line:-1
ARObjectAnchorと

00:56:42.469 --> 00:56:44.371 align:start position:4% line:-1
AREnvironmentProbeAnchorです

00:56:45.606 --> 00:56:49.810 align:start position:30% line:-2
iOSで現在利用可能な
ARKitの機能を使い

00:56:49.910 --> 00:56:52.579 align:start position:25% line:-1
皆さんが何を作るか楽しみです

00:56:53.981 --> 00:56:59.987 align:start position:43% line:-1
(拍手)

00:57:00.788 --> 00:57:03.857 align:start position:20% line:-2
別のセッションでは
AR Quick Lookを統合し

00:57:03.957 --> 00:57:07.861 align:start position:30% line:-2
コンテンツをカッコよく
見せる方法を紹介します

00:57:08.862 --> 00:57:10.898 align:start position:32% line:-2
以上です
ありがとうございます

00:57:10.998 --> 00:57:12.399 align:start position:27% line:-1
WWDCを楽しんでください

00:57:12.499 --> 00:57:13.700 align:start position:43% line:-1
(拍手)
