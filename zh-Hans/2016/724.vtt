WEBVTT

00:00:20.167 --> 00:00:21.467 align:middle
Apple Push Notification Service的
新功能

00:00:21.533 --> 00:00:23.900 align:middle
欢迎来到724号会议

00:00:24.433 --> 00:00:27.867 align:middle
关于Apple Push Notification Service的
新功能

00:00:28.067 --> 00:00:29.900 align:middle
我是Mayur Mahajan

00:00:30.433 --> 00:00:35.000 align:middle
我从事于Apple Push
Notification Service 即APNS

00:00:35.433 --> 00:00:39.833 align:middle
我迫不及待跟你们分享
APNS中即将上线的功能

00:00:41.867 --> 00:00:45.600 align:middle
首先让我们回顾一些
过去已经增强的功能

00:00:45.667 --> 00:00:47.033 align:middle
这些功能是在去年发布的

00:00:48.067 --> 00:00:51.833 align:middle
首先我们提供了一种新的服务端协议

00:00:51.900 --> 00:00:55.233 align:middle
基于HTTP/2来进行
持续的推送

00:00:56.000 --> 00:00:58.967 align:middle
HTTP/2协议传输采用二进制编码

00:00:59.233 --> 00:01:02.833 align:middle
支持在一个连接中使用多种数据流

00:00:59.233 --> 00:01:02.833 align:middle
支持在一个连接中使用多种数据流

00:01:03.100 --> 00:01:04.833 align:middle
并且十分快速

00:01:05.567 --> 00:01:11.433 align:middle
这种新的协议让推送一则消息
变得很容易

00:01:13.000 --> 00:01:16.500 align:middle
这种新的协议支持即时的反馈

00:01:17.000 --> 00:01:20.833 align:middle
从而可以立即获知设备的token
是否处于激活状态

00:01:22.033 --> 00:01:25.467 align:middle
这种协议还允许发送
更多字节的有效载荷

00:01:26.000 --> 00:01:27.500 align:middle
最多可以发送4000字节

00:01:27.567 --> 00:01:31.633 align:middle
你可以利用这一点
来创建更加丰富的应用

00:01:33.367 --> 00:01:36.633 align:middle
此外 我们还简化了证书的处理

00:01:37.467 --> 00:01:41.367 align:middle
所以你们现在只需要维护更少的证书

00:01:41.600 --> 00:01:43.833 align:middle
这些证书被用来与APNS进行连接

00:01:45.300 --> 00:01:49.400 align:middle
我们获得了很多积极的反馈
这些反馈来自开发者社区

00:01:50.600 --> 00:01:54.400 align:middle
我们现在每秒推送着数十万条通知

00:01:54.467 --> 00:01:55.900 align:middle
归功于使用了这种新的协议

00:01:56.667 --> 00:02:00.267 align:middle
如果你还没有试用过新的推送服务
那么你真的应该去尝试一下了

00:01:56.667 --> 00:02:00.267 align:middle
如果你还没有试用过新的推送服务
那么你真的应该去尝试一下了

00:02:03.367 --> 00:02:09.067 align:middle
让我们重新来看一下那些关键的步骤
关于发送一则Push Notification

00:02:09.767 --> 00:02:12.967 align:middle
右下角是客户端应用

00:02:13.333 --> 00:02:16.767 align:middle
右上角是供应商

00:02:17.033 --> 00:02:20.767 align:middle
它是一个服务端组件用来连接APNS

00:02:21.333 --> 00:02:23.467 align:middle
并且发送
Push Notification

00:02:24.667 --> 00:02:27.100 align:middle
目前在你开始发送通知之前

00:02:27.800 --> 00:02:30.367 align:middle
你应该注册
Push Notification

00:02:30.433 --> 00:02:31.767 align:middle
通过你的开发者帐号来完成

00:02:33.600 --> 00:02:37.200 align:middle
这样你的应用就可以
向操作系统来注册推送服务

00:02:37.700 --> 00:02:39.867 align:middle
当它在设备上运行的时候
左下角

00:02:41.100 --> 00:02:44.967 align:middle
设备会向APNS请求一个token

00:02:45.033 --> 00:02:47.100 align:middle
这个token用来代表这个应用

00:02:47.633 --> 00:02:49.800 align:middle
设备会将该token传递给你的应用

00:02:51.433 --> 00:02:53.700 align:middle
这个token具有唯一的标识性

00:02:53.767 --> 00:02:56.600 align:middle
代表了你的应用运行在了相应的设备上

00:02:58.200 --> 00:03:02.100 align:middle
你的应用应该将
该token转发给供应商

00:02:58.200 --> 00:03:02.100 align:middle
你的应用应该将
该token转发给供应商

00:03:03.167 --> 00:03:05.400 align:middle
现在供应商服务

00:03:05.467 --> 00:03:09.500 align:middle
就可通过客户端的证书连接到APNS

00:03:09.833 --> 00:03:14.100 align:middle
然后发送一个标准的
HTTP/2的POST请求

00:03:14.967 --> 00:03:17.100 align:middle
从而向那个token
发送一次推送

00:03:20.133 --> 00:03:25.867 align:middle
HTTP/2供应商接口将
提供一个即时回应

00:03:25.933 --> 00:03:29.033 align:middle
来表示是否能成功发送

00:03:29.700 --> 00:03:31.600 align:middle
同时 APNS收到

00:03:31.667 --> 00:03:35.333 align:middle
并且会验证这个推送请求是否有效

00:03:36.467 --> 00:03:41.233 align:middle
如果发生错误
就会报告这个token无效

00:03:41.967 --> 00:03:45.200 align:middle
APNS会返回
一个状态码为400的错误信息

00:03:45.900 --> 00:03:51.067 align:middle
或者“无效请求”
以及相关的错误指示

00:03:51.600 --> 00:03:54.467 align:middle
举例来说 设备token无效

00:03:56.400 --> 00:04:00.400 align:middle
新的供应商协议会提供即时的反馈

00:03:56.400 --> 00:04:00.400 align:middle
新的供应商协议会提供即时的反馈

00:04:00.967 --> 00:04:03.867 align:middle
如果设备token被移除了

00:04:04.467 --> 00:04:10.333 align:middle
那么你会得到一个HTTP/2的回应
其状态码410或代表移除的文字描述

00:04:11.800 --> 00:04:15.467 align:middle
并且该回应中
还提供了一个时间戳来标识

00:04:15.533 --> 00:04:20.533 align:middle
APNS何时知道
该设备token被移除了

00:04:24.067 --> 00:04:26.300 align:middle
我们还简化了证书的相关处理

00:04:26.700 --> 00:04:28.933 align:middle
作为新的供应商协议的一部分

00:04:30.167 --> 00:04:33.267 align:middle
你现在只需要规定一次证书

00:04:33.500 --> 00:04:38.600 align:middle
来覆盖你的应用
complication以及Voip Push

00:04:39.900 --> 00:04:44.300 align:middle
这个证书既可以在开发环境

00:04:44.367 --> 00:04:46.067 align:middle
又可以在生产环境中使用

00:04:47.200 --> 00:04:51.267 align:middle
这样可以减少很多麻烦
在管理 新建

00:04:51.333 --> 00:04:55.333 align:middle
以及撤回证书的过程中
开发者可以避免一些过去出现的麻烦

00:04:57.267 --> 00:05:00.633 align:middle
现在 让我们来听一下
像你们开发者的反馈

00:04:57.267 --> 00:05:00.633 align:middle
现在 让我们来听一下
像你们开发者的反馈

00:05:01.033 --> 00:05:02.900 align:middle
并且我们已经认识到了

00:05:02.967 --> 00:05:04.900 align:middle
简化工作流程的重要性

00:05:04.967 --> 00:05:07.800 align:middle
那些在发送推送通知中涉及到的流程

00:05:08.967 --> 00:05:12.700 align:middle
我们意识到管理证书实在是太复杂了

00:05:12.767 --> 00:05:14.100 align:middle
对于很多应用来说

00:05:15.867 --> 00:05:20.433 align:middle
所以今天我们非常激动的通知
一个新的

00:05:20.500 --> 00:05:24.767 align:middle
简洁的认证机制会引入到APNS中

00:05:25.933 --> 00:05:28.800 align:middle
token认证机制介绍

00:05:28.867 --> 00:05:31.600 align:middle
在APNS中的应用

00:05:34.500 --> 00:05:39.767 align:middle
Token认证机制通过
用供应商的token

00:05:40.167 --> 00:05:44.267 align:middle
在发送通知的过程中
替代了客户端的证书

00:05:47.467 --> 00:05:50.300 align:middle
这种认证token是用来

00:05:50.367 --> 00:05:54.000 align:middle
简化服务端与APNS之间的连接方式

00:05:55.133 --> 00:05:59.733 align:middle
此外 这些token非常容易
通过程序生成

00:06:00.400 --> 00:06:05.533 align:middle
所以再也不用担心
需要去处理那些证书过期的问题了

00:06:06.833 --> 00:06:11.033 align:middle
这一切能实现依赖于
JSON Web token

00:06:11.600 --> 00:06:15.467 align:middle
作为一种生成认证证书的机制

00:06:16.900 --> 00:06:23.600 align:middle
有很有多种程序语言
选项的库可以用

00:06:23.667 --> 00:06:25.033 align:middle
来生成这些token

00:06:27.800 --> 00:06:29.900 align:middle
现在 在我们讨论一些细节之前

00:06:30.267 --> 00:06:32.400 align:middle
关于token认证机制的细节

00:06:33.267 --> 00:06:34.667 align:middle
让我们首先了解

00:06:34.733 --> 00:06:36.867 align:middle
证书认证机制是如何工作的

00:06:39.533 --> 00:06:40.733 align:middle
你们可以选择参加

00:06:42.667 --> 00:06:46.667 align:middle
通过开发者账号获得一个客户端证书

00:06:48.000 --> 00:06:52.167 align:middle
当使用同一种认证连接APNS的时候

00:06:52.900 --> 00:06:56.067 align:middle
APNS会提供一个服务端的证书

00:06:56.600 --> 00:06:58.733 align:middle
用来让你信任和效验

00:07:00.233 --> 00:07:01.833 align:middle
就像握手一样

00:07:02.200 --> 00:07:05.767 align:middle
你的供应商会为客户端证书签名

00:07:06.233 --> 00:07:11.233 align:middle
从而APNS会进行效验并且建立证书

00:07:12.100 --> 00:07:16.067 align:middle
此时一个彼此信任的连接就建立了

00:07:16.133 --> 00:07:19.200 align:middle
在APNS与供应商之间

00:07:20.500 --> 00:07:24.100 align:middle
任何通过这个连接发送的
推送都会附加

00:07:24.167 --> 00:07:27.600 align:middle
一个客户端证书中的应用标示

00:07:32.333 --> 00:07:34.367 align:middle
当使用token认证机制的时候

00:07:35.100 --> 00:07:38.667 align:middle
你应通过账户选择一个token
的签名键值

00:07:40.200 --> 00:07:43.700 align:middle
然后你的供应商建立一个PLS连接

00:07:44.233 --> 00:07:45.967 align:middle
并不需要包含一个客户端证书

00:07:46.733 --> 00:07:50.500 align:middle
但是 在通过这个连接发送通知之前

00:07:51.033 --> 00:07:54.733 align:middle
供应商需要创建一个认证的token

00:07:55.100 --> 00:07:57.433 align:middle
包含你的团队ID

00:07:58.000 --> 00:08:02.133 align:middle
然后为它签名

00:07:58.000 --> 00:08:02.133 align:middle
然后为它签名

00:08:06.967 --> 00:08:11.000 align:middle
现在就可以通过这个连接发送通知了

00:08:12.100 --> 00:08:13.867 align:middle
每一个通知消息

00:08:14.567 --> 00:08:18.133 align:middle
在签名后都需要
包含这个认证token

00:08:19.167 --> 00:08:23.767 align:middle
这个请求还需要包含应用相关的信息

00:08:25.200 --> 00:08:29.900 align:middle
APNS首先验证
来自服务端的token

00:08:30.500 --> 00:08:32.500 align:middle
然后再处理请求

00:08:35.033 --> 00:08:37.799 align:middle
如果请求被成功的处理了

00:08:38.767 --> 00:08:43.600 align:middle
APNS就会返回一个
包含成功信息的回应

00:08:45.233 --> 00:08:47.900 align:middle
如果请求中没有token信息

00:08:47.967 --> 00:08:50.267 align:middle
或者token信息无效

00:08:51.200 --> 00:08:54.667 align:middle
返回的回应会包含一个错误指示信息

00:08:56.233 --> 00:09:01.233 align:middle
作为一个提醒类型的服务
APNS不会在有错误发生时关闭连接

00:08:56.233 --> 00:09:01.233 align:middle
作为一个提醒类型的服务
APNS不会在有错误发生时关闭连接

00:09:03.267 --> 00:09:06.933 align:middle
现在让我们来看一下
如何生成一个供应商token

00:09:08.533 --> 00:09:12.000 align:middle
你首先需要配置一个签名键值

00:09:12.567 --> 00:09:15.800 align:middle
在证书、身份

00:09:15.867 --> 00:09:18.067 align:middle
配置下设置(开发者账户中)

00:09:20.867 --> 00:09:23.900 align:middle
这样产生了一个公共-私有的键值面板

00:09:24.267 --> 00:09:27.633 align:middle
然后这个私有的键就可以使用了

00:09:27.700 --> 00:09:31.000 align:middle
用来当作密码为token数据签名

00:09:32.600 --> 00:09:35.267 align:middle
Apple会使用对应的公匙

00:09:35.900 --> 00:09:37.733 align:middle
来对token进行效验

00:09:39.267 --> 00:09:42.400 align:middle
下面让我们来关注下
如何生成token

00:09:45.800 --> 00:09:48.867 align:middle
上面是一个例子 用来说明

00:09:48.933 --> 00:09:53.600 align:middle
一个JSON Web Token
在参与请求中是什么样子的

00:09:55.367 --> 00:09:58.733 align:middle
让我们看一下
该JSON Web token结构

00:10:01.033 --> 00:10:02.933 align:middle
你可以看到它有三个部分

00:10:03.300 --> 00:10:09.133 align:middle
每一个部分都是被
base-64编码过的URL的形式

00:10:09.200 --> 00:10:11.433 align:middle
一段时期内这种形式都不会改变

00:10:13.033 --> 00:10:16.767 align:middle
下面被解码的部分
代表着该Web token

00:10:18.633 --> 00:10:20.867 align:middle
第一个部分是header

00:10:21.767 --> 00:10:23.867 align:middle
它包括了一些属性

00:10:23.933 --> 00:10:28.000 align:middle
用来描述了token签名使用的算法

00:10:28.633 --> 00:10:32.067 align:middle
在我们的例子中 使用的是ES256

00:10:34.300 --> 00:10:38.400 align:middle
它还描述了键的标识符

00:10:38.467 --> 00:10:40.367 align:middle
这个键是用来给token签名的

00:10:43.067 --> 00:10:47.167 align:middle
claim部分包含了用于效验的数据

00:10:47.467 --> 00:10:50.633 align:middle
那就是你的开发者的团队ID

00:10:51.067 --> 00:10:53.333 align:middle
可以通过你的开发者账户获得

00:10:55.400 --> 00:10:59.233 align:middle
claim部分中的下一个属性
是一个初始化的时间戳

00:10:59.633 --> 00:11:02.633 align:middle
用来表示时间点

00:10:59.633 --> 00:11:02.633 align:middle
用来表示时间点

00:11:04.467 --> 00:11:07.767 align:middle
token的最后一个部分一个签名

00:11:07.833 --> 00:11:11.767 align:middle
通过对一些数据使用了加密算法后
再进行了base-64的编码

00:11:12.200 --> 00:11:14.467 align:middle
这些数据来源于
header以及claim部分

00:11:15.367 --> 00:11:20.533 align:middle
这样避免了任何未授权的干预
来自token

00:11:25.267 --> 00:11:31.900 align:middle
这里是一个HTTP/2创建的
一个使用token认证的请求

00:11:33.100 --> 00:11:34.100 align:middle
就像你看到的那样

00:11:34.933 --> 00:11:38.133 align:middle
这个请求包括了一个header区
以及一个数据区

00:11:39.067 --> 00:11:44.533 align:middle
header区由很多
APNS相关的变量组成

00:11:45.500 --> 00:11:48.800 align:middle
现在你可以看到header区了

00:11:49.267 --> 00:11:51.400 align:middle
包含了一个认证header

00:11:52.367 --> 00:11:56.667 align:middle
在“bearer”值
后面是带签名的供应商token

00:11:59.000 --> 00:12:03.233 align:middle
如果这个带token认证的
请求是有效的

00:11:59.000 --> 00:12:03.233 align:middle
如果这个带token认证的
请求是有效的

00:12:03.733 --> 00:12:07.500 align:middle
那么回应就会返回一个
200的状态码或者“OK”的信息

00:12:11.367 --> 00:12:13.733 align:middle
这里可以看到这种回应的结构

00:12:13.800 --> 00:12:16.467 align:middle
如果供应商token是无效的

00:12:17.500 --> 00:12:22.000 align:middle
会返回403的状态码
或者“禁用”的信息

00:12:23.267 --> 00:12:29.567 align:middle
现在APNS会要求
周期性的产生新的token

00:12:32.000 --> 00:12:34.000 align:middle
如果token存在的时间太长

00:12:34.633 --> 00:12:39.267 align:middle
回应同样会
返回403或者“禁用”的信息

00:12:39.900 --> 00:12:44.167 align:middle
并且会指示出token过期了

00:12:46.400 --> 00:12:50.500 align:middle
APNS会要求token的创建时间

00:12:50.900 --> 00:12:52.967 align:middle
必须在一个小时以内

00:12:54.300 --> 00:12:59.233 align:middle
但并不是每一个连接都需要
产生一个新的token

00:13:00.067 --> 00:13:03.400 align:middle
实际上处于性能的考虑 我们建议

00:13:03.467 --> 00:13:07.167 align:middle
在token有效的时候
就一直使用它

00:13:11.433 --> 00:13:15.333 align:middle
所以这里还有一些更多的
关于token认证的细节

00:13:16.533 --> 00:13:19.867 align:middle
就如之前提到的供应商token

00:13:20.267 --> 00:13:22.433 align:middle
需要周期性的被创建

00:13:23.267 --> 00:13:27.333 align:middle
但是 需要注意
键值“签名”不会失效

00:13:28.567 --> 00:13:33.333 align:middle
如果你觉得“签名”键值
需要变化

00:13:33.933 --> 00:13:36.667 align:middle
那么可以在开发者账户中撤销它

00:13:37.000 --> 00:13:38.867 align:middle
然后部署一个新的键

00:13:41.100 --> 00:13:46.433 align:middle
作为一个提醒类型的服务
APNS会长久支持证书认证方式

00:13:47.867 --> 00:13:50.800 align:middle
并且也会长久支持token认证方式

00:13:51.733 --> 00:13:54.400 align:middle
并且这种token认证方式会
在今年内晚些时候出现

00:13:57.367 --> 00:14:02.333 align:middle
本次会议的更多的信息请访问页面

00:13:57.367 --> 00:14:02.333 align:middle
本次会议的更多的信息请访问页面

00:14:02.667 --> 00:14:09.667 align:middle
developer.apple.com/wwdc16/724

00:14:12.867 --> 00:14:15.633 align:middle
下面是一些关于
Notification的相关会议

00:14:15.700 --> 00:14:17.233 align:middle
你可能会感兴趣：

00:14:18.333 --> 00:14:20.500 align:middle
主题为Introduction
to Notifications的会议

00:14:20.567 --> 00:14:24.967 align:middle
在周三的上午9点
于Pacific Heights召开

00:14:25.700 --> 00:14:29.033 align:middle
接下来
主题为Advanced Notifications的会议

00:14:29.233 --> 00:14:32.533 align:middle
会在周三的上午10点
于Pacific Heights召开

00:14:32.867 --> 00:14:34.633 align:middle
我们希望到时候还再能看到你们

00:14:35.033 --> 00:14:36.233 align:middle
谢谢大家
