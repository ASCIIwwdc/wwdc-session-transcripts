WEBVTT

00:00:19.653 --> 00:00:26.093 align:middle
iOS安全的工作原理

00:00:29.096 --> 00:00:29.930 align:middle
谢谢

00:00:32.900 --> 00:00:35.802 align:middle
非常感谢大家参加
下午4点关于安全的演讲

00:00:35.869 --> 00:00:39.039 align:middle
我知道大家一天辛苦了
不过真的要感谢各位的到来

00:00:39.506 --> 00:00:40.641 align:middle
我叫Ivan Krstic

00:00:40.707 --> 00:00:43.377 align:middle
我管理Apple的安全工程架构

00:00:43.443 --> 00:00:44.912 align:middle
这个团队从基础将安全

00:00:44.978 --> 00:00:48.248 align:middle
构建给所有用户手中的产品

00:00:49.650 --> 00:00:50.751 align:middle
今天的重点是iOS

00:00:50.817 --> 00:00:54.321 align:middle
我非常自豪地告诉大家
安全的作用在

00:00:54.388 --> 00:00:56.990 align:middle
这一平台上扮演着
关键设计理念的角色

00:00:58.525 --> 00:01:01.028 align:middle
在我们开始之前
我们要先讲一下背景

00:00:58.525 --> 00:01:01.028 align:middle
在我们开始之前
我们要先讲一下背景

00:01:01.595 --> 00:01:03.830 align:middle
为什么安全对Apple如此重要

00:01:03.897 --> 00:01:06.834 align:middle
为什么我们相信
这对用户至关重要？

00:01:08.468 --> 00:01:13.207 align:middle
这是因为我们的移动设备
前所未有地记录着我们的生活

00:01:13.907 --> 00:01:18.912 align:middle
有史以来从未有过一种
东西会对我们如此了解

00:01:20.647 --> 00:01:22.349 align:middle
了解我们的消费方式

00:01:23.383 --> 00:01:26.320 align:middle
了解我们发送的邮件
我们拍下的照片

00:01:26.787 --> 00:01:28.121 align:middle
了解我们的消息

00:01:28.188 --> 00:01:31.692 align:middle
从最简单的问好
到最亲密的对话

00:01:31.758 --> 00:01:34.261 align:middle
当今的移动设备
前所未有地记录着我们的生活

00:01:34.328 --> 00:01:35.729 align:middle
当你这样考虑 你会发现

00:01:35.796 --> 00:01:37.764 align:middle
保护所有这些信息的安全

00:01:37.831 --> 00:01:39.867 align:middle
这不仅仅是技术上的问题

00:01:40.534 --> 00:01:42.002 align:middle
对我们来说是一项任务

00:01:42.069 --> 00:01:44.605 align:middle
这项任务的中心在于保护

00:01:44.671 --> 00:01:47.241 align:middle
我们用户的个人数字主权

00:01:49.142 --> 00:01:51.311 align:middle
而且当你这样考虑
你还会发现

00:01:51.378 --> 00:01:54.047 align:middle
攻击者的定义也发生了改变

00:01:56.283 --> 00:02:00.153 align:middle
现今的攻击者可能会想要
持有你的数据并进行勒索

00:01:56.283 --> 00:02:00.153 align:middle
现今的攻击者可能会想要
持有你的数据并进行勒索

00:02:00.821 --> 00:02:04.625 align:middle
他们可能是不良的商业
竞争对手 想要占得优势

00:02:05.259 --> 00:02:07.094 align:middle
他们可能是网络服务提供商

00:02:07.160 --> 00:02:10.330 align:middle
想要不可磨灭地
标记出你的在线活动

00:02:10.396 --> 00:02:13.200 align:middle
在未征求你同意的情况下
进行跟踪和广告宣传

00:02:14.434 --> 00:02:15.903 align:middle
这可能是国家

00:02:15.969 --> 00:02:18.872 align:middle
像是2014年Sony
Pictures的黑客入侵

00:02:20.374 --> 00:02:24.011 align:middle
有时候好奇心也会让
和我们亲近的人受到侵害

00:02:24.077 --> 00:02:26.413 align:middle
攻击者会是谁

00:02:26.480 --> 00:02:28.682 align:middle
当然 还有
我们一定不能低估

00:02:28.749 --> 00:02:31.218 align:middle
高等猫科动物
所带来的威胁

00:02:37.524 --> 00:02:38.425 align:middle
谢谢

00:02:40.360 --> 00:02:42.362 align:middle
所以当你想想这些攻击者

00:02:42.429 --> 00:02:43.597 align:middle
他们想要什么？

00:02:44.198 --> 00:02:47.835 align:middle
我们发现这些动机
通常会在这三个组中

00:02:47.901 --> 00:02:50.204 align:middle
有个人跟踪和监视

00:02:50.838 --> 00:02:54.107 align:middle
尝试获取你的照片和消息

00:02:54.174 --> 00:02:56.743 align:middle
使用你的相机和麦克风

00:02:57.377 --> 00:02:59.079 align:middle
还有商业间谍

00:02:59.379 --> 00:03:02.850 align:middle
获取你的商业邮件和文件

00:02:59.379 --> 00:03:02.850 align:middle
获取你的商业邮件和文件

00:03:02.916 --> 00:03:04.885 align:middle
还有你的知识产权

00:03:04.952 --> 00:03:06.220 align:middle
攻击者想要什么？

00:03:06.286 --> 00:03:10.858 align:middle
最后这里有直接经济好处
将金钱直接

00:03:10.924 --> 00:03:13.427 align:middle
从你的网上银行业务交易中盗走
或者植入广告

00:03:13.493 --> 00:03:15.562 align:middle
以及在你浏览网页的时候
进行点击欺诈

00:03:17.164 --> 00:03:20.133 align:middle
为了做到这些事
攻击者创建了

00:03:20.701 --> 00:03:23.837 align:middle
广告软件 间谍软件 勒索软件

00:03:23.904 --> 00:03:27.274 align:middle
远程访问木马
以及多种多样的恶意软件

00:03:29.643 --> 00:03:30.477 align:middle
我们怎么会知道？

00:03:30.544 --> 00:03:32.446 align:middle
因为我们在其他
平台上见到过

00:03:41.455 --> 00:03:42.923 align:middle
但iOS上面没有

00:03:43.924 --> 00:03:47.127 align:middle
iOS上市将近10年之久

00:03:47.194 --> 00:03:49.830 align:middle
还没有出现
一种iOS的恶意软件

00:03:49.897 --> 00:03:51.765 align:middle
大范围地影响我们的用户

00:03:56.570 --> 00:03:59.806 align:middle
这是因为大约在10年前
Apple就意识到

00:03:59.873 --> 00:04:03.844 align:middle
移动设备会在用户的生活
中发挥着何种作用

00:03:59.873 --> 00:04:03.844 align:middle
移动设备会在用户的生活
中发挥着何种作用

00:04:04.545 --> 00:04:06.580 align:middle
我们意识到
现存的安全技术

00:04:06.647 --> 00:04:10.284 align:middle
是远远不够的
并且无法胜任这些挑战

00:04:10.951 --> 00:04:16.723 align:middle
所以我们决定构建出我们
所能设想的最佳安全技术

00:04:18.257 --> 00:04:21.327 align:middle
来保护我们的客户
并且规模大得惊人

00:04:21.394 --> 00:04:22.763 align:middle
我们所保护的用户

00:04:22.829 --> 00:04:26.333 align:middle
在全球范围内
拥有10亿多激活的iOS设备

00:04:28.735 --> 00:04:31.238 align:middle
而且我们的每一项安全功能

00:04:31.305 --> 00:04:33.373 align:middle
都会真正地保护用户免遭威胁

00:04:34.842 --> 00:04:36.977 align:middle
IOS安全支柱

00:04:37.044 --> 00:04:38.345 align:middle
但我们并不孤单

00:04:38.745 --> 00:04:41.348 align:middle
在iOS安全中
有三个关键支柱

00:04:43.417 --> 00:04:45.385 align:middle
有平台安全
我们将这类技术

00:04:45.452 --> 00:04:47.487 align:middle
构建于我们的
软件和硬件之中

00:04:48.088 --> 00:04:52.226 align:middle
有用户将他们的软件
升级到最新最安全的版本

00:04:52.292 --> 00:04:54.061 align:middle
然后有像各位这样的开发者

00:04:54.127 --> 00:04:56.964 align:middle
使用我们的安全技术
构建安全的应用

00:04:57.698 --> 00:04:59.666 align:middle
我们今天要谈谈这三个支柱

00:05:00.400 --> 00:05:02.069 align:middle
我们从平台安全开始

00:05:04.404 --> 00:05:07.975 align:middle
当你想想之前安全的运作方式
尤其在企业设置中

00:05:09.376 --> 00:05:12.479 align:middle
那是一长串的复杂内容

00:05:12.546 --> 00:05:14.915 align:middle
用户必须要遵守
才能保证安全

00:05:14.982 --> 00:05:17.851 align:middle
在设备上加载安全配置

00:05:18.085 --> 00:05:21.989 align:middle
复杂的批量管理方案
复杂的密码策略

00:05:22.523 --> 00:05:26.193 align:middle
非常困难 非常笨重
用户根本无法成功

00:05:26.260 --> 00:05:27.794 align:middle
而且很难实现安全

00:05:29.129 --> 00:05:32.199 align:middle
但因为Apple拥有
所有的硬件和软件

00:05:32.266 --> 00:05:35.936 align:middle
我们能够以一种独特又
创新的方式解决这一问题

00:05:37.137 --> 00:05:38.238 align:middle
当你审视iOS安全

00:05:38.305 --> 00:05:40.707 align:middle
我们将安全直接构建在硅片上

00:05:41.108 --> 00:05:44.511 align:middle
在默认情况下 我们让设备
在出厂时就是安全的

00:05:44.978 --> 00:05:47.447 align:middle
我们让用户非常容易地升级

00:05:47.514 --> 00:05:49.316 align:middle
并运行最新最安全的版本

00:05:50.684 --> 00:05:54.221 align:middle
我们让用户非常容易地使用
Touch ID来安全登入设备

00:05:54.888 --> 00:05:58.992 align:middle
我们监管App Store
而且我们让安全易于使用

00:06:01.495 --> 00:06:04.097 align:middle
iOS平台安全
包括大量的功能

00:06:04.164 --> 00:06:06.567 align:middle
而今天
我只有时间强调五项功能

00:06:07.100 --> 00:06:08.569 align:middle
我们从安全引导开始

00:06:09.603 --> 00:06:11.104 align:middle
安全引导

00:06:11.905 --> 00:06:13.774 align:middle
能够信任一个设备的最重要

00:06:13.841 --> 00:06:16.543 align:middle
方式之一就是
信任上面运行的软件

00:06:17.511 --> 00:06:18.946 align:middle
我们的做法是

00:06:21.481 --> 00:06:23.383 align:middle
在硅片内部构建信任

00:06:26.587 --> 00:06:31.491 align:middle
每个iOS设备内部的
Apple设计系统芯片都持有

00:06:31.992 --> 00:06:36.597 align:middle
Apple公开密钥 位于一个叫做
Boot ROM的只读存储区域中

00:06:36.663 --> 00:06:39.366 align:middle
在出厂前就已写上
并且之后无法改变

00:06:40.100 --> 00:06:41.835 align:middle
当你的iOS设备启动时

00:06:43.036 --> 00:06:44.271 align:middle
我们会用那个公开密钥

00:06:44.838 --> 00:06:48.442 align:middle line:1
然后Boot ROM会在
引导链中验证下一步

00:06:48.509 --> 00:06:50.110 align:middle line:1
也就是低级引导加载程序

00:06:50.477 --> 00:06:54.848 align:middle line:1
而且只有通过了那个验证
我们才会进入到链中的下一步

00:06:55.582 --> 00:06:59.419 align:middle line:1
我们会重复该过程
直到iOS设备完全开启

00:07:00.487 --> 00:07:02.623 align:middle line:1
这让我们确定
引导中使用的软件

00:07:02.689 --> 00:07:05.959 align:middle line:1
的每一部分都签有
Apple的私人密钥

00:07:10.731 --> 00:07:12.199 align:middle
信任安全引导

00:07:12.266 --> 00:07:13.767 align:middle
当你想想安全引导

00:07:14.134 --> 00:07:16.270 align:middle
非常有趣的是
我们不依靠

00:07:16.336 --> 00:07:19.806 align:middle
任何第三方来实现
安全引导信任

00:07:19.873 --> 00:07:24.044 align:middle
我们不依赖我们控制
之外的证书权威机构

00:07:24.545 --> 00:07:28.749 align:middle
用于安全引导的密钥
是由Apple生成 管理和提供的

00:07:28.815 --> 00:07:30.384 align:middle
用于验证的代码

00:07:30.450 --> 00:07:32.686 align:middle
刚才给你们展示了
也是Apple编写的

00:07:32.753 --> 00:07:36.757 align:middle
只有Apple拥有给所有软件
签名所需的私人密钥

00:07:38.358 --> 00:07:41.395 align:middle
但这里还有另一件
有趣的事 那就是

00:07:41.461 --> 00:07:45.399 align:middle
当iOS设备去升级
软件版本时

00:07:45.465 --> 00:07:48.836 align:middle
它必须联系我们的
安装授权服务器

00:07:48.902 --> 00:07:52.005 align:middle
并请求许可
来升级到指定的版本

00:07:52.172 --> 00:07:55.742 align:middle
做法是将升级版本的加密测量

00:07:55.809 --> 00:07:58.912 align:middle
发送给服务器
然后询问是否可以升级

00:08:00.047 --> 00:08:03.016 align:middle
我们这么做是因为
现在服务器能够

00:08:03.116 --> 00:08:09.423 align:middle
防止iOS设备迁移到
更旧更不安全的iOS版本

00:08:10.858 --> 00:08:15.963 align:middle
所以当你将这两者放在一起
你会得到一个强大可靠的机制

00:08:16.330 --> 00:08:19.266 align:middle
依靠每个iOS设备上
所运行的软件

00:08:20.567 --> 00:08:24.605 align:middle
旧版iOS无法从一个设备
复制到另一个设备上

00:08:24.838 --> 00:08:27.875 align:middle
该过程的软件完整性
是无法篡改的

00:08:30.644 --> 00:08:33.746 align:middle
现在我们谈谈保护
用户的静态数据

00:08:34.181 --> 00:08:35.482 align:middle
数据保护

00:08:35.749 --> 00:08:37.885 align:middle
如果你非常认真对待这件事

00:08:38.652 --> 00:08:41.522 align:middle
你不要将保护
用户数据的加密密钥

00:08:41.587 --> 00:08:44.057 align:middle
用在应用处理器中

00:08:44.124 --> 00:08:46.426 align:middle
或是设备中的普通处理器

00:08:46.793 --> 00:08:49.696 align:middle
这是因为那里的攻击面
实在是太大了

00:08:49.997 --> 00:08:52.165 align:middle
如果真的想保护
用户的静态数据

00:08:52.232 --> 00:08:55.636 align:middle
你要构建专门的硅片
来持有这些加密密钥

00:08:55.936 --> 00:08:56.803 align:middle
我们就这样做的

00:08:57.104 --> 00:08:58.872 align:middle
我们称之为
Secure Enclave

00:09:00.240 --> 00:09:02.476 align:middle
当你在想密码的时候

00:09:02.543 --> 00:09:04.811 align:middle
通常它们很短
4到6位数

00:09:05.112 --> 00:09:10.284 align:middle
如果攻击者设法将
加密的数据从手机中取走

00:09:10.350 --> 00:09:11.818 align:middle
从iOS设备中取走

00:09:12.352 --> 00:09:14.821 align:middle
并尝试所有可能的密码

00:09:15.222 --> 00:09:16.790 align:middle
这不会花多长时间

00:09:18.392 --> 00:09:23.497 align:middle
所以取而代之
我们从用户的密码中衍生出一个密钥

00:09:23.564 --> 00:09:28.302 align:middle
仅用于Secure Enclave
的硬件密钥相挂钩

00:09:28.869 --> 00:09:33.273 align:middle
这意味着无法在
离线状态下猜测出密码

00:09:33.340 --> 00:09:35.976 align:middle
密码猜测必须要在设备上进行

00:09:36.410 --> 00:09:39.379 align:middle
而且设备可以自由
限制尝试的次数

00:09:41.181 --> 00:09:44.551 align:middle
事实上 这就是你
iOS设备的工作原理

00:09:46.820 --> 00:09:51.391 align:middle
在几次错误密码尝试之后
我们会实行时间延迟

00:09:52.392 --> 00:09:54.428 align:middle
但在10次错误密码尝试之后

00:09:54.494 --> 00:09:58.131 align:middle
Secure Enclave将不会
再次解锁那个设备

00:09:59.967 --> 00:10:02.369 align:middle
这与清除数据功能
没有任何关系

00:09:59.967 --> 00:10:02.369 align:middle
这与清除数据功能
没有任何关系

00:10:02.836 --> 00:10:04.271 align:middle
当启用时

00:10:04.571 --> 00:10:08.008 align:middle
数据会在10次错误密码
尝试之后被清除掉

00:10:08.075 --> 00:10:09.877 align:middle
即使你没开这项功能

00:10:11.812 --> 00:10:13.914 align:middle
一旦出现10次
错误密码尝试

00:10:14.214 --> 00:10:17.284 align:middle
Secure Enclave
将不会再解锁那个设备

00:10:17.351 --> 00:10:19.152 align:middle
无论你等多长时间

00:10:21.555 --> 00:10:25.192 align:middle
所以我们使用行业标准
算法来构建系统

00:10:25.726 --> 00:10:28.428 align:middle
我们对其进行
严格的内部安全审查

00:10:29.096 --> 00:10:30.430 align:middle
以及第三方代码审核

00:10:31.198 --> 00:10:32.599 align:middle
之后我们还会再进一步

00:10:32.666 --> 00:10:35.035 align:middle
我们将我们核心加密库

00:10:35.102 --> 00:10:38.972 align:middle
用于支持数据保护
而且我们将它们发布到网上

00:10:39.039 --> 00:10:41.408 align:middle
供所有人下载检查

00:10:42.042 --> 00:10:43.443 align:middle
我们谈谈沙盒

00:10:43.510 --> 00:10:44.578 align:middle
沙盒

00:10:44.645 --> 00:10:48.815 align:middle
沙盒是一种在应用之间
隔离数据的方法

00:10:50.317 --> 00:10:52.786 align:middle
这是因为
即使意图是好的

00:10:52.853 --> 00:10:54.555 align:middle
开发者有时还是会犯错

00:10:55.155 --> 00:11:00.227 align:middle
沙盒这种方法可以减轻
由那些错误带来的潜在危害

00:10:55.155 --> 00:11:00.227 align:middle
沙盒这种方法可以减轻
由那些错误带来的潜在危害

00:11:00.527 --> 00:11:03.864 align:middle
这有点像汽车中的
气囊或安全带

00:11:03.931 --> 00:11:06.500 align:middle
能够减轻事故中受伤的风险

00:11:08.435 --> 00:11:11.805 align:middle
我们还使用沙盒
来将一些有关安全的

00:11:11.872 --> 00:11:14.174 align:middle
选择直接交到
用户的手里

00:11:14.608 --> 00:11:18.912 align:middle
我们有一个叫做TCC的机制
透明 同意 控制

00:11:18.979 --> 00:11:22.416 align:middle
我们可以询问用户
问他们是否信任指定的应用

00:11:22.482 --> 00:11:25.986 align:middle
并将一些敏感数据交给它们
例如地点 照片和联系人

00:11:26.453 --> 00:11:29.189 align:middle
一旦用户在这样的
对话中下了决定

00:11:29.556 --> 00:11:32.860 align:middle
沙盒机制和内核
就会执行那个决定

00:11:34.962 --> 00:11:35.896 align:middle
代码签名

00:11:35.963 --> 00:11:39.766 align:middle
我们平台安全的另一个
关键因素就是代码签名

00:11:42.469 --> 00:11:44.538 align:middle
当攻击者尝试攻击设备时

00:11:44.605 --> 00:11:48.141 align:middle
第一步就是尝试
让他们的恶意代码运行起来

00:11:50.277 --> 00:11:54.815 align:middle
因此 iOS代码签名
不仅是涵盖操作系统

00:11:55.215 --> 00:11:57.384 align:middle
它还涵盖设备上
运行的每个应用

00:11:58.185 --> 00:12:01.522 align:middle
事实上 当你将应用上传到
App Store上面的时候

00:11:58.185 --> 00:12:01.522 align:middle
事实上 当你将应用上传到
App Store上面的时候

00:12:02.022 --> 00:12:06.393 align:middle
Xcode会计算每个
可执行文件的密码散列

00:12:06.460 --> 00:12:08.095 align:middle
和应用捆绑包中
资源的密码散列

00:12:08.562 --> 00:12:11.665 align:middle
并且会将它们和应用
一同写入代码目录

00:12:11.732 --> 00:12:13.367 align:middle
之后再送到App Store

00:12:14.368 --> 00:12:16.803 align:middle
当用户下载应用并运行它

00:12:17.771 --> 00:12:21.508 align:middle
我们的内核会查看
每个可执行的存储页面

00:12:21.575 --> 00:12:23.744 align:middle
然后和代码目录
进行对比 来确保

00:12:23.810 --> 00:12:25.212 align:middle
其未被篡改过

00:12:26.947 --> 00:12:30.851 align:middle
结果 攻击者无法将
一些恶意代码

00:12:30.918 --> 00:12:33.854 align:middle
植入到存储中
并将控制流转移过去

00:12:34.188 --> 00:12:36.690 align:middle
反而 他们必须
依靠于更加复杂的

00:12:37.057 --> 00:12:39.860 align:middle
更加困难的方案
来运行他们的恶意代码

00:12:42.829 --> 00:12:45.599 align:middle
Touch ID

00:12:45.999 --> 00:12:47.401 align:middle
我们谈谈Touch ID

00:12:48.035 --> 00:12:48.869 align:middle
每天平均80次用户解锁

00:12:48.936 --> 00:12:53.440 align:middle
我们知道我们的iPhone用户
每天平均解锁手机80次

00:12:55.509 --> 00:13:01.515 align:middle
如果你设置了密码
这就会给那80次解锁带来麻烦

00:12:55.509 --> 00:13:01.515 align:middle
如果你设置了密码
这就会给那80次解锁带来麻烦

00:13:04.918 --> 00:13:05.786 align:middle
结果

00:13:06.186 --> 00:13:09.990 align:middle
几乎过半的用户
没有设置密码

00:13:10.457 --> 00:13:15.195 align:middle
我们知道因为密码
可以说是用于保护

00:13:15.262 --> 00:13:19.366 align:middle
用户静态数据的关键部分
所以这个问题我们必须要解决

00:13:20.634 --> 00:13:21.635 align:middle
我们需一个解决方案

00:13:21.702 --> 00:13:24.505 align:middle
要简单

00:13:25.205 --> 00:13:26.473 align:middle
要快速

00:13:26.540 --> 00:13:29.977 align:middle
并能为用户的数据
提供极好的保护

00:13:32.546 --> 00:13:34.281 align:middle
我们解决方案是Touch ID

00:13:35.549 --> 00:13:39.786 align:middle
不过我们不仅是将
指纹传感器放入手机中

00:13:41.655 --> 00:13:43.123 align:middle
你可以更改密码

00:13:43.190 --> 00:13:45.626 align:middle
但你无法更改
你的生物特征属性

00:13:45.692 --> 00:13:47.094 align:middle
你无法改变你的指纹

00:13:47.594 --> 00:13:48.829 align:middle
所以我们知道

00:13:48.896 --> 00:13:52.399 align:middle
我们必须提供生物特征数据
这是我们能构建的

00:13:52.633 --> 00:13:53.567 align:middle
最高级别保护

00:13:54.535 --> 00:13:57.304 align:middle
所以我们做的是
将指纹传感器直接连接

00:13:57.871 --> 00:14:01.041 align:middle
到Secure Enclave
通过一个加密链接

00:13:57.871 --> 00:14:01.041 align:middle
到Secure Enclave
通过一个加密链接

00:14:01.875 --> 00:14:05.245 align:middle
而且我们使得
当你的手指触摸到传感器时

00:14:06.280 --> 00:14:09.783 align:middle
指纹会直接传输到
Secure Enclave

00:14:09.850 --> 00:14:12.219 align:middle
在那里进行处理
然后加密

00:14:14.021 --> 00:14:16.657 align:middle
而应用处理器无法获取指纹

00:14:16.723 --> 00:14:19.293 align:middle
应用处理器运行
手机上的正常应用

00:14:21.962 --> 00:14:24.164 align:middle
我刚才提过
在Touch ID推出之前

00:14:24.231 --> 00:14:27.701 align:middle
大约一半的用户设置了密码

00:14:27.768 --> 00:14:29.403 align:middle
Touch ID之前的密码使用率

00:14:29.469 --> 00:14:31.238 align:middle
现在九成人用密码

00:14:31.305 --> 00:14:32.940 align:middle
Touch ID之后的密码使用率

00:14:33.006 --> 00:14:35.843 align:middle
这精彩地示范了
Apple的惊人之处

00:14:36.176 --> 00:14:38.846 align:middle
我们将硬件工程专业技术

00:14:38.912 --> 00:14:40.914 align:middle
软件工程专业技术

00:14:40.981 --> 00:14:42.850 align:middle
对易于使用的投入

00:14:42.916 --> 00:14:46.720 align:middle
将它们组合在一起
使得普通用户

00:14:46.787 --> 00:14:48.722 align:middle
不关心指纹传感器

00:14:49.056 --> 00:14:51.625 align:middle
不关心Secure Enclave
或是散列函数

00:14:52.759 --> 00:14:56.897 align:middle
他们得到的是
数据安全的惊人提升

00:14:59.700 --> 00:15:01.268 align:middle
用户升级软件

00:14:59.700 --> 00:15:01.268 align:middle
用户升级软件

00:15:01.335 --> 00:15:04.071 align:middle
iOS安全的第二个支柱

00:15:05.873 --> 00:15:08.008 align:middle
是用户升级软件

00:15:10.878 --> 00:15:13.847 align:middle
最新版的iOS
总会是最安全的

00:15:14.314 --> 00:15:16.884 align:middle
并且我们持续让
iOS变得更加安全

00:15:17.284 --> 00:15:20.120 align:middle
基于现在见过的威胁
和未来预见到的威胁

00:15:21.488 --> 00:15:23.223 align:middle
而且我们构建所有深层的技术

00:15:23.290 --> 00:15:27.094 align:middle
来信任在我们
硬件上运行的软件

00:15:28.395 --> 00:15:30.030 align:middle
但iOS版本无论多么安全

00:15:31.398 --> 00:15:34.835 align:middle
如果人们不去安装
最新的版本 这都是没意义的

00:15:34.902 --> 00:15:36.036 align:middle
最安全的那个版本

00:15:37.271 --> 00:15:38.772 align:middle
所以当我们考虑软件升级时

00:15:38.839 --> 00:15:41.341 align:middle
这不仅有关于
那个设备和其运行的软件

00:15:41.408 --> 00:15:44.411 align:middle
这还关于我们与运营商的关系

00:15:44.478 --> 00:15:46.480 align:middle
以及我们快速发布升级的能力

00:15:47.181 --> 00:15:48.782 align:middle
还有用户体验

00:15:49.082 --> 00:15:52.352 align:middle
用户如何看待设备上的升级

00:15:55.455 --> 00:15:58.392 align:middle
我们在iOS 9中做的一件事是
我们极大缩小了

00:15:58.458 --> 00:16:00.894 align:middle
安装升级所占用的空间量

00:15:58.458 --> 00:16:00.894 align:middle
安装升级所占用的空间量

00:16:01.161 --> 00:16:04.932 align:middle
这样拥有较小剩余空间的
用户还是可以获取最新

00:16:04.998 --> 00:16:07.568 align:middle
最安全的软件版本

00:16:07.634 --> 00:16:09.169 align:middle
更小的安装占用空间

00:16:09.236 --> 00:16:11.638 align:middle
之后我们着眼于用户体验

00:16:12.372 --> 00:16:16.810 align:middle
然后说 有时候用户
不想因为升级而被中断

00:16:16.877 --> 00:16:19.446 align:middle
所以我们让他们选择
是立刻安装升级

00:16:19.980 --> 00:16:21.315 align:middle
或是在晚上安装

00:16:21.381 --> 00:16:23.283 align:middle
当他们可能没在
使用手机的时候

00:16:23.350 --> 00:16:25.085 align:middle
或者第二天提醒

00:16:27.287 --> 00:16:29.156 align:middle
得出的结果很惊人

00:16:30.157 --> 00:16:34.928 align:middle
将近85%的客户
在运行最新的iOS版本

00:16:34.995 --> 00:16:36.663 align:middle
我们最安全的版本

00:16:38.198 --> 00:16:41.435 align:middle
如果你认为这很简单
没什么大不了的

00:16:41.635 --> 00:16:43.904 align:middle
你只需去看看其他的平台

00:16:44.304 --> 00:16:47.741 align:middle
Android安装基数

00:16:47.808 --> 00:16:49.843 align:middle
顺便一说
这个比较很公平

00:16:49.910 --> 00:16:54.014 align:middle
因为Android 6和iOS 9
的发布时间只相差几个周

00:16:54.915 --> 00:16:57.551 align:middle
准确来说一下

00:16:57.918 --> 00:17:01.288 align:middle
在Android 5.1.1版之前
每个版本都有一个漏洞

00:16:57.918 --> 00:17:01.288 align:middle
在Android 5.1.1版之前
每个版本都有一个漏洞

00:17:01.355 --> 00:17:04.258 align:middle
叫做Stagefright
这会被远程利用

00:17:04.324 --> 00:17:07.027 align:middle
你利用它的方法可以是
将一个专门制作的消息发送给

00:17:07.426 --> 00:17:10.864 align:middle
一个有漏洞的设备
然后获得对那个设备的完全控制

00:17:11.431 --> 00:17:13.733 align:middle
Google很快修复了这个错误

00:17:15.335 --> 00:17:19.339 align:middle
但这没有任何意义 因为他们的
大多数用户没有安装补丁

00:17:20.240 --> 00:17:23.010 align:middle
而没有安装补丁
是没有任何作用的

00:17:23.076 --> 00:17:28.348 align:middle
这就是为何我们投入如此多精力
不仅是构建安全的iOS版本

00:17:28.782 --> 00:17:33.086 align:middle
而且还让用户能容易
获取最新最安全的版本

00:17:36.523 --> 00:17:39.193 align:middle
iOS安全中的第三个支柱

00:17:39.259 --> 00:17:40.594 align:middle
就是各位开发者

00:17:41.061 --> 00:17:44.431 align:middle
使用我们提供的安全技术
来打造安全的应用

00:17:44.498 --> 00:17:45.966 align:middle
开发者打造安全应用

00:17:46.033 --> 00:17:48.035 align:middle
遵循最佳做法

00:17:48.101 --> 00:17:50.537 align:middle
这意味着遵循
平台上的最佳做法

00:17:50.604 --> 00:17:54.942 align:middle
我们有数量惊人的应用
使用Touch ID API

00:17:55.475 --> 00:17:59.379 align:middle
让用户免于记住复杂的密码

00:17:59.446 --> 00:18:01.181 align:middle
然后再直接输入到应用中

00:17:59.446 --> 00:18:01.181 align:middle
然后再直接输入到应用中

00:18:01.915 --> 00:18:05.352 align:middle
去年 我们推出了一项新功能
叫做App Transport Security

00:18:06.153 --> 00:18:09.556 align:middle
为应用的信息提供强大的保护

00:18:09.623 --> 00:18:12.993 align:middle
随着信息通过网络
传输到应用的服务器上

00:18:15.696 --> 00:18:18.866 align:middle
今天我很自豪地说
在2016年的年底

00:18:18.932 --> 00:18:22.669 align:middle
App Transport Security将成为
App Store应用的一个必要条件

00:18:24.071 --> 00:18:27.040 align:middle
这意味着到了2016年底

00:18:27.107 --> 00:18:30.110 align:middle
当你的应用和你自己
服务器的后端进行通信时

00:18:30.177 --> 00:18:34.681 align:middle
它们必须使用安全的TLS信道
使用TLS 1.2

00:18:35.883 --> 00:18:39.386 align:middle
除非通信中的数据是批量数据

00:18:39.453 --> 00:18:42.256 align:middle
例如流媒体和已加密的数据

00:18:43.190 --> 00:18:47.294 align:middle
这会将真真正正的安全
提供给我们的用户

00:18:48.428 --> 00:18:51.265 align:middle
以及你应用在网络上的通信

00:18:53.934 --> 00:18:58.172 align:middle
各位开发者还要承担
另一部分责任

00:18:58.238 --> 00:18:59.173 align:middle
当你构建应用的时候

00:18:59.239 --> 00:19:01.842 align:middle
这就是要清楚你的代码
这不仅是你编写的代码

00:18:59.239 --> 00:19:01.842 align:middle
这就是要清楚你的代码
这不仅是你编写的代码

00:19:02.075 --> 00:19:05.345 align:middle
还有你在应用中加入的
任何第三方代码

00:19:05.412 --> 00:19:06.547 align:middle
清楚你的代码

00:19:06.747 --> 00:19:11.451 align:middle
这是因为你使用的库
可能会破坏你应用的安全

00:19:12.152 --> 00:19:15.489 align:middle
可能因为他们在背地里
做一些你不知情的事

00:19:16.056 --> 00:19:17.491 align:middle
但可能

00:19:19.359 --> 00:19:22.262 align:middle
因为这里有一个
更新更安全的版本

00:19:23.697 --> 00:19:25.432 align:middle
这里有一个很好的例子

00:19:25.499 --> 00:19:29.203 align:middle
有一个非常知名的
第三方网络库

00:19:29.803 --> 00:19:36.009 align:middle
在TLS连接的安全验证上
出现了重大漏洞

00:19:36.076 --> 00:19:39.746 align:middle
这个漏洞很快就被修复了

00:19:39.813 --> 00:19:44.084 align:middle
但在一段时间里 App Store
中有多达25,000个应用

00:19:44.151 --> 00:19:46.854 align:middle
不是最新最安全的版本

00:19:48.422 --> 00:19:52.659 align:middle
所以从可靠位置获取
第三方代码是十分重要的

00:19:53.227 --> 00:19:55.896 align:middle
你要清楚它的功能
并且要保持更新

00:19:57.497 --> 00:20:00.234 align:middle
所以这些就是我们
iOS安全中的三个关键支柱

00:19:57.497 --> 00:20:00.234 align:middle
所以这些就是我们
iOS安全中的三个关键支柱

00:20:00.601 --> 00:20:01.869 align:middle
平台安全

00:20:01.935 --> 00:20:04.438 align:middle
这是最佳的安全技术机制

00:20:04.505 --> 00:20:06.740 align:middle
我们可以将其构建在
我们的硬件和软件之中

00:20:07.107 --> 00:20:10.944 align:middle
我们的用户下载
最新最安全的iOS版本

00:20:11.011 --> 00:20:14.014 align:middle
以及各位开发者
使用我们的安全技术

00:20:14.081 --> 00:20:15.182 align:middle
来打造安全应用

00:20:17.150 --> 00:20:18.385 align:middle
我们的成果如何？

00:20:18.452 --> 00:20:20.654 align:middle
这个问题问得非常好
那我们的成果如何？

00:20:21.822 --> 00:20:23.490 align:middle
iOS安全有多好？

00:20:24.958 --> 00:20:27.694 align:middle
安全的有趣之处在于
因为和性能不同

00:20:28.028 --> 00:20:29.062 align:middle
你无法直接测量

00:20:29.129 --> 00:20:32.900 align:middle
你无法进行测试 看看得出
一个客观的答案会花多长时间

00:20:33.834 --> 00:20:38.272 align:middle
所以剩下的就是间接指标

00:20:39.273 --> 00:20:42.676 align:middle
今天我会和大家分享三点

00:20:45.179 --> 00:20:46.213 align:middle
没大范围iOS恶意软件

00:20:46.280 --> 00:20:50.083 align:middle
第一个是
自推出后的十年时间里

00:20:50.317 --> 00:20:54.988 align:middle
还没有任何一种iOS恶意软件
大范围影响我们的用户

00:20:56.190 --> 00:20:58.525 align:middle
这一点对我们最为重要

00:20:59.226 --> 00:21:03.330 align:middle
我们的用户在将近10年时间里
得到了无微不至的保护

00:20:59.226 --> 00:21:03.330 align:middle
我们的用户在将近10年时间里
得到了无微不至的保护

00:21:06.800 --> 00:21:08.468 align:middle
下一个间接指标很有意思

00:21:08.535 --> 00:21:12.206 align:middle
就是看看一些放出的
不受限的越狱工具

00:21:13.006 --> 00:21:15.676 align:middle
这些越狱工具
击败了iOS安全机制

00:21:16.743 --> 00:21:22.149 align:middle
有意思的地方是
我们看到的最新版本

00:21:22.216 --> 00:21:24.451 align:middle
经常需要找到并链接起

00:21:24.518 --> 00:21:28.322 align:middle
5到10个截然不同的漏洞才能够

00:21:28.388 --> 00:21:30.691 align:middle
击败平台安全机制

00:21:31.825 --> 00:21:33.994 align:middle
这比其他任何平台都要高得多

00:21:35.329 --> 00:21:39.733 align:middle
原因是iOS安全措施是
步调紧密地共同发挥作用

00:21:40.367 --> 00:21:44.938 align:middle
这样击败所有的措施
会花上很长时间和大量工夫

00:21:48.141 --> 00:21:50.210 align:middle
我的最后一个间接指标

00:21:50.711 --> 00:21:52.479 align:middle
我希望各位半信半疑地听一下

00:21:54.648 --> 00:21:58.952 align:middle
可能在座的大多数人已经知道
那就是软件漏洞黑市

00:22:00.187 --> 00:22:02.789 align:middle
时不时地 一些价格

00:22:03.190 --> 00:22:05.325 align:middle
会在黑市上变得透明

00:22:06.793 --> 00:22:10.264 align:middle
通常这些价格是几万美元

00:22:10.330 --> 00:22:11.532 align:middle
有时候是十万美元

00:22:13.300 --> 00:22:15.736 align:middle
但在2013年
纽约时报获悉

00:22:15.802 --> 00:22:19.006 align:middle
一个iOS漏洞价值五十万美元

00:22:20.307 --> 00:22:24.811 align:middle
去年 福布斯采访了
一名越狱工具开发者

00:22:24.878 --> 00:22:28.382 align:middle
那个人说大多数专家一致
认为一款无限制的iOS越狱工具

00:22:28.916 --> 00:22:33.187 align:middle
的黑市价格是一百万美元

00:22:33.253 --> 00:22:36.356 align:middle
一百万美元

00:22:37.791 --> 00:22:40.761 align:middle
各位半信半疑地听
不过这个数字真的非常惊人

00:22:43.630 --> 00:22:44.998 align:middle
接下来我们应该怎么做？

00:22:50.871 --> 00:22:53.574 align:middle
很明显安全是过程
而并非终点

00:22:54.441 --> 00:22:57.077 align:middle
在iOS安全上我们还会
继续努力 永远不会停歇

00:22:58.979 --> 00:23:01.648 align:middle
这也不是我们最近才感兴趣的事

00:22:58.979 --> 00:23:01.648 align:middle
这也不是我们最近才感兴趣的事

00:23:01.715 --> 00:23:04.852 align:middle
你现在看到的是
我们10年的结晶

00:23:04.918 --> 00:23:07.120 align:middle
为保护用户
所做出的最杰出工作

00:23:08.889 --> 00:23:11.625 align:middle
但是坏人不会善罢甘休

00:23:11.692 --> 00:23:14.027 align:middle
而我们会不断发展我们的安全

00:23:14.928 --> 00:23:18.332 align:middle
来击败现在以及将来的威胁

00:23:19.867 --> 00:23:23.036 align:middle
我们会利用我们
硬件和软件的专业技术

00:23:23.170 --> 00:23:26.573 align:middle
我们会构建出我们
所能设想的最好安全技术

00:23:27.174 --> 00:23:31.044 align:middle
来保护我们的客户 和他们
现在使用移动设备的方式

00:23:31.111 --> 00:23:32.846 align:middle
以及将来使用的方式

00:23:34.114 --> 00:23:39.152 align:middle
并保护我们的客户不受
现在和将来的攻击者的侵害

00:23:40.354 --> 00:23:41.555 align:middle
哪怕是猫

00:23:44.658 --> 00:23:45.592 align:middle
非常感谢

00:23:54.868 --> 00:23:56.136 align:middle
如果你想了解更多信息

00:23:56.203 --> 00:23:59.173 align:middle
我邀请你去阅读
iOS安全指南

00:23:59.239 --> 00:24:02.676 align:middle
其中有关于这些强大
功能的大量技术细节

00:23:59.239 --> 00:24:02.676 align:middle
其中有关于这些强大
功能的大量技术细节

00:24:02.743 --> 00:24:05.779 align:middle
我刚才讲过的
还包括我没时间讲的

00:24:05.846 --> 00:24:08.515 align:middle
例如iCloud Keychain
和双因素认证

00:24:08.815 --> 00:24:11.718 align:middle
在此次会议的网站上
会有一个链接

00:24:12.452 --> 00:24:13.353 align:middle
再次感谢大家
