WEBVTT

00:00:20.367 --> 00:00:22.767 align:middle
大家好 欢迎来到511会话

00:00:22.833 --> 00:00:25.833 align:middle
AVCapturePhotoOutput的基础功能拓展

00:00:26.400 --> 00:00:29.333 align:middle
本期节目是第501期的补充

00:00:29.533 --> 00:00:31.500 align:middle
即对iOS Photography新进展的演示及说明

00:00:32.033 --> 00:00:32.967 align:middle
我是Brad Ford

00:00:33.033 --> 00:00:35.700 align:middle
Apple核心多媒体撷取团队工程师

00:00:37.933 --> 00:00:42.533 align:middle
501会话重点讲解了
AV foundations的摄影捕获API

00:00:42.600 --> 00:00:45.600 align:middle
特别是AVCapturePhotoOutput

00:00:46.133 --> 00:00:49.667 align:middle
它是iOS 10下新的拍照接口

00:00:50.667 --> 00:00:53.400 align:middle
该输出端支持实时图象捕获

00:00:54.167 --> 00:00:55.667 align:middle
RAW + DNG

00:00:56.733 --> 00:00:58.233 align:middle
宽色域内容

00:00:58.800 --> 00:01:01.333 align:middle
图片预览或缩略图

00:00:58.800 --> 00:01:01.333 align:middle
图片预览或缩略图

00:01:01.967 --> 00:01:04.167 align:middle
如果你还未看过501会话

00:01:04.300 --> 00:01:07.700 align:middle
建议你暂停一下 先去收看501会话

00:01:08.067 --> 00:01:10.100 align:middle
以便你能从本期节目中获得更多知识

00:01:12.533 --> 00:01:16.467 align:middle
在本期中 我们将会拓展
AVCapturePhotoOutput基础

00:01:16.533 --> 00:01:21.067 align:middle
并讨论501会话中未讲解的两个重点

00:01:21.133 --> 00:01:23.233 align:middle
即 场景监控

00:01:23.833 --> 00:01:26.833 align:middle
以及资源分配与回收

00:01:27.533 --> 00:01:29.267 align:middle
最后 我们将花几分钟

00:01:29.333 --> 00:01:31.900 align:middle
讲解一个不相关 但很重要的东西

00:01:32.300 --> 00:01:35.367 align:middle
iOS 10下的相机隐私策略变化

00:01:37.567 --> 00:01:39.000 align:middle
简要的回顾一下

00:01:39.533 --> 00:01:43.400 align:middle
新的AVCapturePhotoOutput拥有增强型接口

00:01:43.467 --> 00:01:47.433 align:middle
可应对AVCaptureStillImangeOutput的一些设计挑战

00:01:48.467 --> 00:01:51.900 align:middle
使用一种功能化的程序模型

00:01:52.100 --> 00:01:55.867 align:middle
在可变数据与不可变数据
之间有明确的界线

00:01:56.733 --> 00:02:00.267 align:middle
它使用独立的对象封装各相片设置

00:01:56.733 --> 00:02:00.267 align:middle
它使用独立的对象封装各相片设置

00:02:00.333 --> 00:02:02.433 align:middle
这些设置称为AVCapturePhotoSettings

00:02:02.800 --> 00:02:05.767 align:middle
当发出照片捕获请求时就需要调用它.

00:02:06.600 --> 00:02:08.300 align:middle
该设置使用委托式的接口

00:02:08.366 --> 00:02:11.367 align:middle
以跟踪照片捕获请求

00:02:11.433 --> 00:02:15.100 align:middle
这称为AVCapturePhoto的捕获委托协议

00:02:16.967 --> 00:02:18.767 align:middle
委托协议中的所有回调函数

00:02:18.833 --> 00:02:22.700 align:middle
将返回AVCaptureResolvedPhoto设置的一个实例

00:02:23.067 --> 00:02:25.900 align:middle
这是个不可变对象 其中所有相片设置

00:02:25.967 --> 00:02:27.133 align:middle
都已确定

00:02:29.567 --> 00:02:32.700 align:middle
AVCapturePhotoOutput还支持场景监控功能

00:02:32.933 --> 00:02:36.133 align:middle
运用刚才说过的那些捕获对象的子集

00:02:38.533 --> 00:02:41.000 align:middle
场景监控可让你呈现UI

00:02:41.067 --> 00:02:43.833 align:middle
该界面将场景特征告知用户

00:02:43.900 --> 00:02:45.200 align:middle
这些场景都是当前活动的场景

00:02:45.667 --> 00:02:47.867 align:middle
在这个Apple相机应用的截图中

00:02:48.100 --> 00:02:50.733 align:middle
用户明显处于光度低的环境

00:02:51.967 --> 00:02:54.600 align:middle
屏幕下方闪光灯图标

00:02:54.867 --> 00:02:58.133 align:middle
显示用户处于自动闪光模式下

00:02:58.200 --> 00:03:01.833 align:middle
意味着只有在情景需要时才能使用闪光功能

00:02:58.200 --> 00:03:01.833 align:middle
意味着只有在情景需要时才能使用闪光功能

00:03:02.767 --> 00:03:06.200 align:middle
Apple相机应用是
AVCapturePhotoOutput的客户端

00:03:06.267 --> 00:03:07.833 align:middle
进行场景监控

00:03:07.900 --> 00:03:11.200 align:middle
以驱动闪光灯激活为黄色闪光图标

00:03:11.267 --> 00:03:12.833 align:middle
你在屏幕正上方看见的

00:03:14.567 --> 00:03:17.133 align:middle
黄色的闪光图标表示

00:03:17.200 --> 00:03:20.367 align:middle
如果用户现在拍照的话
闪光灯就会启动

00:03:22.033 --> 00:03:24.500 align:middle
AVCapturePhotoOutput执行场景监控功能

00:03:24.567 --> 00:03:26.067 align:middle
在两种情况下

00:03:26.133 --> 00:03:27.667 align:middle
第一种是闪光灯

00:03:29.967 --> 00:03:31.833 align:middle
当前Apple所有的iPhone型号

00:03:31.900 --> 00:03:34.700 align:middle
以及9.7英寸的iPad Pro

00:03:34.767 --> 00:03:37.900 align:middle
都配备了双色闪光灯以照亮黑暗的场景

00:03:37.967 --> 00:03:39.967 align:middle
通过后置视力相机

00:03:41.067 --> 00:03:44.233 align:middle
和retina闪光技术将
你的视网膜显示器

00:03:44.300 --> 00:03:46.033 align:middle
变成双色闪光灯

00:03:46.100 --> 00:03:48.800 align:middle
将亮度提高到正常情况的三倍

00:03:48.867 --> 00:03:51.333 align:middle
以便将低亮度的自拍照变亮

00:03:52.833 --> 00:03:55.733 align:middle
支持场景监控的第二种类型是

00:03:55.800 --> 00:03:57.533 align:middle
静态图象稳定技术

00:03:58.667 --> 00:04:02.267 align:middle
静态图象稳定是一种
多重图象融合的捕获技术

00:03:58.667 --> 00:04:02.267 align:middle
静态图象稳定是一种
多重图象融合的捕获技术

00:04:02.333 --> 00:04:07.533 align:middle
通过不同方式融合曝光图片
以减少低亮度下的图片模糊

00:04:08.033 --> 00:04:10.733 align:middle
有一点可能还不是很清楚
为什么静态图象稳定技术

00:04:10.800 --> 00:04:12.033 align:middle
具有低光度特点

00:04:12.433 --> 00:04:14.900 align:middle
这并是说你的手在黑暗中抖得更厉害

00:04:15.467 --> 00:04:17.700 align:middle
而仅仅是因为相机需要更长的曝光时间

00:04:17.767 --> 00:04:19.867 align:middle line:1
以获取相同的光子数量

00:04:20.033 --> 00:04:22.767 align:middle line:1
这要求摄影者得非常非常稳定才行

00:04:23.367 --> 00:04:25.800 align:middle line:1
而静态图象稳定技术能解决这个问题

00:04:25.867 --> 00:04:28.733 align:middle line:1
通过捕获不同曝光水平的多重图象

00:04:28.800 --> 00:04:32.700 align:middle line:1
并将它们融合在一起
以消除干扰与运动伪影

00:04:33.300 --> 00:04:38.233 align:middle line:1
所以乍看起来 闪光灯的作用
或静态图象稳定技术的作用

00:04:38.300 --> 00:04:42.400 align:middle line:1
似乎是无关的,
但事实上 它们密切相关

00:04:42.633 --> 00:04:44.967 align:middle line:1
而这会造成接口冲突

00:04:46.867 --> 00:04:50.267 align:middle line:1
从这张图上可以看到适用的光亮范围

00:04:50.333 --> 00:04:53.967 align:middle line:1
在Flash Capture
是否带有静态图象稳定时的对比情况

00:04:54.433 --> 00:04:58.067 align:middle line:1
我将静态图象稳定技术简称为SIS

00:04:58.667 --> 00:05:01.000 align:middle line:1
蓝条表示亮度级别

00:04:58.667 --> 00:05:01.000 align:middle line:1
蓝条表示亮度级别

00:05:01.067 --> 00:05:03.300 align:middle line:1
即照片输出使用闪关灯的亮度

00:05:03.367 --> 00:05:05.733 align:middle line:1
如果你选择开启SIS的话

00:05:06.333 --> 00:05:09.567 align:middle line:1
绿条表示适于闪光灯启动的光照强度

00:05:09.633 --> 00:05:11.800 align:middle line:1
如果你选择关闭SIS的话

00:05:12.633 --> 00:05:14.233 align:middle line:1
注意到 在开启SIS时

00:05:14.300 --> 00:05:17.233 align:middle line:1
在相对黑暗的环境下能够
不通过闪光灯来进行照片输出

00:05:18.033 --> 00:05:22.000 align:middle line:1
这是因为SIS一定程度上
降低了图象中的干扰

00:05:22.067 --> 00:05:23.533 align:middle line:1
因此不需要闪光灯介入

00:05:24.800 --> 00:05:29.033 align:middle line:1
如果你当前所处环境的光强度在此
那么问题的答案是

00:05:29.100 --> 00:05:32.000 align:middle line:1
闪光灯一定会介入

00:05:33.000 --> 00:05:34.733 align:middle line:1
但如果光强度在此

00:05:35.267 --> 00:05:39.233 align:middle line:1
那完全取决于
你是否想开启静态图象稳定技术

00:05:39.300 --> 00:05:40.800 align:middle line:1
反之亦然

00:05:41.367 --> 00:05:42.800 align:middle line:1
那么 具体该怎么做呢？

00:05:43.433 --> 00:05:47.000 align:middle line:1
AVCapturePhotoOutput
并不知道你希望抓拍的类型

00:05:47.233 --> 00:05:48.367 align:middle line:1
除非你向它提出要求

00:05:49.067 --> 00:05:52.700 align:middle line:1
可如果开启场景监控就得不停运行

00:05:53.067 --> 00:05:55.967 align:middle line:1
当前是SIS场景还是flash场景呢？

00:05:58.633 --> 00:06:01.300 align:middle
在AVCapturePhotoOutput中
我们解决了这个问题

00:05:58.633 --> 00:06:01.300 align:middle
在AVCapturePhotoOutput中
我们解决了这个问题

00:06:01.367 --> 00:06:03.900 align:middle
通过使用特定的场景监控端口

00:06:03.967 --> 00:06:06.733 align:middle
该端口叫做 关于场景监控的照片设置

00:06:07.967 --> 00:06:11.000 align:middle
并且我们提供了两项键值观察属性

00:06:11.067 --> 00:06:13.233 align:middle
该属性可对你进行非同步通知

00:06:13.300 --> 00:06:15.333 align:middle
当场景的适合性发生改变时

00:06:15.400 --> 00:06:18.433 align:middle
关于使用静态图像稳定技术还是闪光灯

00:06:21.367 --> 00:06:23.900 align:middle
你创建一个AVCapturePhotoSettings实例

00:06:23.967 --> 00:06:26.400 align:middle
具体来说是关于场景监控的实例

00:06:26.467 --> 00:06:30.400 align:middle
并明确你希望AVCapturePhotoOutput具备的功能

00:06:31.200 --> 00:06:33.967 align:middle
现在我将闪光灯设置为自动模式

00:06:35.000 --> 00:06:38.433 align:middle
这说明我希望在使用闪光灯时

00:06:38.500 --> 00:06:39.733 align:middle
它已处于适用状态

00:06:39.800 --> 00:06:42.967 align:middle
并且我还将AutoStillImageStabilization的Enabled属性

00:06:43.033 --> 00:06:43.867 align:middle
设置为true

00:06:44.133 --> 00:06:46.300 align:middle
那么 对SIS也应该进行同样设置

00:06:47.033 --> 00:06:50.167 align:middle
SIS会一贯地输出比flash质量更高的图片

00:06:50.567 --> 00:06:52.733 align:middle
那么当场景陷入一种交叉范围

00:06:52.800 --> 00:06:54.367 align:middle
该范围处于SIS与flash之间

00:06:54.733 --> 00:06:57.400 align:middle
photoOutput报告
此种情况属于SIS场景

00:06:58.133 --> 00:07:01.033 align:middle
接下来我将该对象指定为照片设置

00:06:58.133 --> 00:07:01.033 align:middle
接下来我将该对象指定为照片设置

00:07:01.100 --> 00:07:02.967 align:middle
在SceneMonitoring属性中

00:07:03.567 --> 00:07:05.300 align:middle
该属性可在任何时候进行设置

00:07:05.367 --> 00:07:08.567 align:middle
甚至包括在你运行
AVCaptureSession前

00:07:10.333 --> 00:07:12.100 align:middle
为获知闪光灯的变化情况

00:07:12.167 --> 00:07:14.633 align:middle
及静态图象稳定技术的价值

00:07:14.867 --> 00:07:18.933 align:middle
我对之前提及的
isFlashScene添加了键值监测

00:07:19.000 --> 00:07:21.867 align:middle
并对isStillImageStabliziationScene
也进行了该操作

00:07:22.333 --> 00:07:25.133 align:middle
然后随着场景值变化
我进行了回调操作

00:07:25.200 --> 00:07:26.600 align:middle
对于那两个属性

00:07:29.400 --> 00:07:31.733 align:middle
现在我们来讨论场景监控的默认配置

00:07:33.100 --> 00:07:36.567 align:middle
photoSettingsforSceneMonitoring
的属性是可空

00:07:36.633 --> 00:07:38.767 align:middle
并且该默认值为nil,

00:07:38.833 --> 00:07:41.267 align:middle
这意味着没有对场景进行监控

00:07:42.367 --> 00:07:45.133 align:middle
如果你在查询
isStillImageStabilization

00:07:45.200 --> 00:07:50.033 align:middle
或isFlashScene时
若没对场景监控功能进行相片设置配置

00:07:50.100 --> 00:07:52.867 align:middle
那么它们将会一直报告错误

00:07:53.600 --> 00:07:56.267 align:middle
一旦你为场景监控成功配置相片设定后

00:07:56.333 --> 00:08:00.567 align:middle
你可以查询或通过键值观察
两种isScene的属性

00:07:56.333 --> 00:08:00.567 align:middle
你可以查询或通过键值观察
两种isScene的属性

00:08:00.633 --> 00:08:02.100 align:middle
并得到恰当的回复

00:08:03.467 --> 00:08:06.467 align:middle
但请注意
如果你对场景监控进行的照片设置中

00:08:06.533 --> 00:08:08.733 align:middle
包含关闭的flash模式的话

00:08:09.167 --> 00:08:11.900 align:middle
isFlashScene
将依旧报告错误

00:08:12.333 --> 00:08:15.100 align:middle
对于AutoStillImageStabilization
的Enabled属性来说也一样

00:08:18.233 --> 00:08:20.867 align:middle
对于场景监控 我的建议很简单

00:08:21.400 --> 00:08:23.433 align:middle
如果你的应用不显示任何用户界面

00:08:23.500 --> 00:08:26.067 align:middle
仅显示用户正看到的场景

00:08:26.133 --> 00:08:28.233 align:middle
那么你没有必要启动场景监控功能.

00:08:28.567 --> 00:08:31.800 align:middle
但如果启动了该功能
它将会监控你希望捕获的画面

00:08:31.867 --> 00:08:36.332 align:middle
比如你希望使用Auto Flash
来拍摄而非SIS

00:08:36.633 --> 00:08:40.967 align:middle
那么带闪光模式的监控器
设为自动或者自动SIS关闭

00:08:41.400 --> 00:08:44.000 align:middle
如果不这样做 将会使用户混淆

00:08:44.067 --> 00:08:46.933 align:middle
因为你的用户界面可能会报告
目前不处于闪光灯场景

00:08:47.000 --> 00:08:50.100 align:middle
尽管在实际拍照时 闪光灯会被启动

00:08:52.600 --> 00:08:54.233 align:middle
以上为场景监控功能的内容

00:08:54.500 --> 00:08:56.533 align:middle
在接下来的课程中 将介绍

00:08:56.600 --> 00:08:59.100 align:middle
资源调配与回收功能

00:09:01.133 --> 00:09:04.167 align:middle line:1
为了解按需资源调配功能的需要

00:09:04.233 --> 00:09:07.167 align:middle line:1
我们来看看AVCaptureSession的
正常数据流程图

00:09:08.833 --> 00:09:11.400 align:middle line:1
当AVCaptureSession
开始运行

00:09:12.133 --> 00:09:15.100 align:middle line:1
数据即开始从各个
AVCapture输入端

00:09:15.167 --> 00:09:17.200 align:middle line:1
流向各个 AVCapture输出端

00:09:17.867 --> 00:09:21.233 align:middle line:1
大部分输出端口对数据流形式的数据
进行接收与处理

00:09:21.300 --> 00:09:23.067 align:middle line:1
比如VideoPreviewLayer

00:09:23.133 --> 00:09:26.067 align:middle line:1
该输出口将输入的数据
不断地显示在屏幕上

00:09:26.533 --> 00:09:30.767 align:middle line:1
或VideoDataOutput
该输出口通过委托回调来缓存至应用

00:09:31.500 --> 00:09:33.033 align:middle line:1
此类流输出

00:09:33.100 --> 00:09:36.433 align:middle line:1
需要分裂性的捕获渲染管道重建

00:09:36.500 --> 00:09:38.433 align:middle line:1
如果改变它们的结构

00:09:38.500 --> 00:09:41.367 align:middle line:1
你就不得不为一种输出模式进行配置

00:09:41.433 --> 00:09:43.067 align:middle line:1
在运行程序之前

00:09:44.367 --> 00:09:46.433 align:middle line:1
而AVCapturePhotoOutput不同

00:09:46.500 --> 00:09:50.333 align:middle line:1
因为它仅根据需要来从输入接受数据

00:09:51.367 --> 00:09:54.567 align:middle line:1
当你通过CapturePhoto
请求一张照片

00:09:54.633 --> 00:09:56.333 align:middle line:1
并进行设置与代理

00:09:56.767 --> 00:10:00.467 align:middle line:1
照片输出端仅
输出一个结果或结果的集合

00:09:56.767 --> 00:10:00.467 align:middle line:1
照片输出端仅
输出一个结果或结果的集合

00:10:01.967 --> 00:10:03.467 align:middle line:1
不像流输出口

00:10:03.633 --> 00:10:05.733 align:middle line:1
照片输出具有充分的等待时间

00:10:06.200 --> 00:10:11.233 align:middle line:1
因此能够在完美的位置上 按要求
进行资源调配或回收

00:10:11.300 --> 00:10:15.367 align:middle line:1
而不会造成扰乱性的渲染模式重组

00:10:15.433 --> 00:10:18.533 align:middle line:1
虽然看不见 但整个调配过程
却十分华丽

00:10:20.533 --> 00:10:22.867 align:middle
当然 资源调配过程并非免费的

00:10:23.233 --> 00:10:26.433 align:middle
AVCapturePhotoOutput的功能集很广

00:10:27.867 --> 00:10:30.300 align:middle
拍摄420像素的未压缩照片

00:10:30.367 --> 00:10:32.900 align:middle
这些照片都为
AVCapture设备的原始格式

00:10:32.967 --> 00:10:34.933 align:middle
仅需要极少的一部分资源

00:10:36.267 --> 00:10:39.767 align:middle
像EGRA或JPEG这类
经处理过后的输出格式

00:10:39.833 --> 00:10:41.767 align:middle
则需要另外一些资源

00:10:41.833 --> 00:10:43.967 align:middle
因为有格式转换功能介入

00:10:45.033 --> 00:10:48.167 align:middle
闪光拍摄则需要它们自己的硬件资源集

00:10:48.233 --> 00:10:52.400 align:middle
以传递与预闪光序列及频闪同图像

00:10:53.800 --> 00:10:57.567 align:middle line:1
静态图象稳定功能需要对
多个缓冲进行融合

00:10:58.967 --> 00:11:01.467 align:middle line:1
拍摄RAW格式图片则需要
十分大量的缓冲

00:10:58.967 --> 00:11:01.467 align:middle line:1
拍摄RAW格式图片则需要
十分大量的缓冲

00:11:02.567 --> 00:11:06.533 align:middle line:1
RAW加JPEG格式的图片则需要
大小资源的组合

00:11:07.667 --> 00:11:10.300 align:middle line:1
Bracketed捕捉
需要大量的缓冲

00:11:10.367 --> 00:11:12.633 align:middle line:1
以便将多个图片返回到客户端

00:11:13.833 --> 00:11:16.933 align:middle line:1
当然 许多这样的特征
都能被混合并匹配

00:11:17.000 --> 00:11:19.067 align:middle line:1
并需要资源超集

00:11:21.467 --> 00:11:23.367 align:middle
由于那么多适用的捕获特征

00:11:23.433 --> 00:11:25.567 align:middle
AVCapturePhotoOutput很难

00:11:25.633 --> 00:11:28.667 align:middle
估计需要预先准备多少资源

00:11:29.233 --> 00:11:32.600 align:middle
过度准备及准备不足都是不好的

00:11:33.467 --> 00:11:36.133 align:middle
我们将过度准备比喻成烤蛋糕

00:11:36.200 --> 00:11:39.100 align:middle
一年中的每天都在烤蛋糕
以防止这一天就是你的生日

00:11:39.633 --> 00:11:41.133 align:middle
对我门而言 这需要付出很大努力

00:11:41.200 --> 00:11:43.033 align:middle
需要投入很多材料

00:11:43.100 --> 00:11:45.300 align:middle
扔掉很多没有吃过的蛋糕

00:11:46.233 --> 00:11:48.767 align:middle
造成视频预览可能每次来的更慢

00:11:49.367 --> 00:11:51.800 align:middle
而内存消耗则可能高得毫无必要

00:11:53.233 --> 00:11:55.900 align:middle
没作充分准备就算不比前者糟糕
也不是件好事

00:11:56.400 --> 00:11:58.267 align:middle
如果我们没有准备好

00:11:58.333 --> 00:12:01.367 align:middle
使用所要求的特征集进行照片捕捉
我们可能会错过这次拍摄

00:11:58.333 --> 00:12:01.367 align:middle
使用所要求的特征集进行照片捕捉
我们可能会错过这次拍摄

00:12:01.433 --> 00:12:03.567 align:middle
直到按要求分配资源

00:12:04.667 --> 00:12:06.700 align:middle
幸运的是, 我们提供了解决方案

00:12:08.133 --> 00:12:11.200 align:middle
AVCapturePhotoOutput会让你事先告知

00:12:11.267 --> 00:12:13.600 align:middle
你希望捕捉的类型

00:12:13.667 --> 00:12:17.533 align:middle
只需要启动
setPreparedPhotoSettingsArray功能

00:12:18.400 --> 00:12:21.400 align:middle
传递AVCapturePhotoSettings的数组

00:12:21.467 --> 00:12:24.167 align:middle
包括各个代表不同捕捉类型的数据

00:12:24.233 --> 00:12:26.133 align:middle
你希望为之准备的

00:12:27.167 --> 00:12:29.300 align:middle
你可以选择性地传递完成处理程序

00:12:29.367 --> 00:12:31.767 align:middle
待准备完成时 即可调用该程序

00:12:33.433 --> 00:12:34.900 align:middle
照片输出端口还提供

00:12:34.967 --> 00:12:38.633 align:middle
一种只读属性的
preparedPhotoSettingsArray

00:12:38.700 --> 00:12:41.467 align:middle
因此你可以查询最终设定的
设置数组

00:12:44.567 --> 00:12:48.033 align:middle
setPreparedPhotoSettingsArray功能
可以做很多事

00:12:49.500 --> 00:12:52.000 align:middle
它可以为所有的捕捉类型准备资源

00:12:52.067 --> 00:12:53.667 align:middle
在你的设置数组中

00:12:54.200 --> 00:12:57.867 align:middle
另外 如果存在不需要的资源
该功能会对其进行回收

00:12:59.433 --> 00:13:03.000 align:middle
并且你还可以通过传递一个空数组
来回收所有的资源

00:12:59.433 --> 00:13:03.000 align:middle
并且你还可以通过传递一个空数组
来回收所有的资源

00:13:05.133 --> 00:13:08.067 align:middle
当所有资源准备完毕
该功能会通知你

00:13:08.867 --> 00:13:12.633 align:middle
如果资源无法准备
该功能会返回错误

00:13:12.933 --> 00:13:15.867 align:middle
整个数据传递都通过完成回调进行

00:13:17.700 --> 00:13:20.133 align:middle
preparedPhotoSettingsArray的默认值

00:13:20.200 --> 00:13:24.200 align:middle
是一种关于AVCapturePhotoSettings
的默认函数

00:13:24.267 --> 00:13:27.433 align:middle
该函数将JPEG设置为输出格式

00:13:27.500 --> 00:13:30.267 align:middle
和AutoStillImageStabilization
的enabled属性

00:13:33.267 --> 00:13:36.200 align:middle
preparedPhotoSettingsArray
具备sticky属性

00:13:36.567 --> 00:13:40.833 align:middle
它会在AVCaptureSession
的启动及结束之间

00:13:41.700 --> 00:13:45.600 align:middle
配置开始或确认期间持续存在
并且你可以对其进行设置或忽略

00:13:45.667 --> 00:13:48.433 align:middle
如果你总是通过你的应用
拍摄同种类型的照片

00:13:49.533 --> 00:13:52.600 align:middle
setpreparedPhotoSettingsArray
的另一好处是

00:13:52.933 --> 00:13:55.567 align:middle
它能加入AVCaptureSession的

00:13:55.633 --> 00:13:59.267 align:middle
begin/commitConfiguration延期工作语义

00:13:59.700 --> 00:14:02.467 align:middle
也就是说如果你调用
beginConfiguration

00:13:59.700 --> 00:14:02.467 align:middle
也就是说如果你调用
beginConfiguration

00:14:02.533 --> 00:14:04.733 align:middle
之后改变会话的拓扑模型

00:14:04.800 --> 00:14:07.467 align:middle
通过添加或移除输出端口或输入端口

00:14:07.533 --> 00:14:10.333 align:middle
之后设置新的
preparedPhotoSettingsArray

00:14:10.900 --> 00:14:12.667 align:middle
然后确认配置

00:14:13.000 --> 00:14:17.367 align:middle
除非配置确认被调用
否则不会进行准备程序

00:14:17.833 --> 00:14:20.233 align:middle
你可以按照原子的方式来
对会话配置进行变更

00:14:20.300 --> 00:14:21.933 align:middle
并同时准备照片输出

00:14:22.000 --> 00:14:24.733 align:middle
为新的配置

00:14:28.200 --> 00:14:31.167 align:middle
你可以在运行AVCaptureSession前进行准备

00:14:31.233 --> 00:14:33.700 align:middle
以确保app处于准备捕捉相片的状态

00:14:33.767 --> 00:14:35.800 align:middle
只要视频预览开始运行

00:14:37.000 --> 00:14:40.767 align:middle
在会话停止时 如果你调用
setPreparedPhotoSettingsArray

00:14:41.067 --> 00:14:43.900 align:middle
它不会立即回调完成处理程序

00:14:43.967 --> 00:14:47.700 align:middle
相反 完成处理程序会在
准备完成时被调用

00:14:47.767 --> 00:14:51.000 align:middle
在你调用会话启动程序之后

00:14:51.833 --> 00:14:54.967 align:middle
如果你的会话被终止并且
你已经准备了一组设定参数

00:14:55.033 --> 00:14:56.333 align:middle
之后 你改变了注意

00:14:56.400 --> 00:14:58.767 align:middle
使用另一组设定参数重新调用该程序

00:14:58.833 --> 00:15:01.367 align:middle
你最初的完成处理程序将即刻启动

00:14:58.833 --> 00:15:01.367 align:middle
你最初的完成处理程序将即刻启动

00:15:01.433 --> 00:15:03.533 align:middle
通过设置为false的准备数据

00:15:03.600 --> 00:15:07.800 align:middle
实际上 这是对最初准备数据的注销

00:15:09.833 --> 00:15:11.533 align:middle
我们提三个简单的建议

00:15:11.600 --> 00:15:13.933 align:middle
关于如何使用我们准备的API

00:15:14.400 --> 00:15:16.467 align:middle
首先 准备

00:15:17.367 --> 00:15:20.600 align:middle
你可在不进行最初准备的情况下
发出捕捉请求

00:15:20.933 --> 00:15:23.533 align:middle
但 如果未对照片输出

00:15:23.600 --> 00:15:26.033 align:middle
准备你希望捕捉的精确类型

00:15:26.100 --> 00:15:28.567 align:middle
则你可能会很慢地获取的第一张照片

00:15:30.333 --> 00:15:34.467 align:middle
第二 在启动你的会话程序之前
进行准备

00:15:34.967 --> 00:15:37.433 align:middle
知道你感兴趣的捕捉类型

00:15:37.500 --> 00:15:40.100 align:middle
让会话程序为你分配最佳数量

00:15:40.167 --> 00:15:41.133 align:middle
在启动时

00:15:42.733 --> 00:15:46.533 align:middle
第三 仅在你的UI界面发生变更时
重新进行准备

00:15:46.733 --> 00:15:49.767 align:middle
你不必在捕捉图片的各时刻
重新进行准备

00:15:49.833 --> 00:15:53.033 align:middle
仅在你改变了将要捕捉的类型时

00:15:53.100 --> 00:15:56.667 align:middle
例如当你的用户将
RAW Capture或Bracketed Capture

00:15:56.733 --> 00:15:58.200 align:middle
在应用中切换成打开或关闭

00:16:01.100 --> 00:16:03.333 align:middle
不是所有AVCapturePhotoOutput特征

00:16:03.400 --> 00:16:06.200 align:middle
都具有按需资源准备的资格

00:16:07.133 --> 00:16:11.033 align:middle
首当其冲的isHighResolutionCaptureEnabled

00:16:11.800 --> 00:16:15.400 align:middle
一些照相格式可以让你
捕捉高清晰的静态图像

00:16:15.467 --> 00:16:19.567 align:middle
比该格式可支持的流分辨率还要大

00:16:19.633 --> 00:16:22.567 align:middle
比如 前置相机的照片格式

00:16:22.633 --> 00:16:25.333 align:middle
在iPhone 6s
及6s Plus上的

00:16:25.400 --> 00:16:27.767 align:middle
支持五百万像素的静态图像

00:16:27.833 --> 00:16:30.400 align:middle
但仅能传输1280x960的图片

00:16:30.833 --> 00:16:33.267 align:middle
当相机配置该种格式

00:16:33.333 --> 00:16:36.367 align:middle
要么传输1280x960的静态图像

00:16:36.433 --> 00:16:38.533 align:middle
要么传输五百万像素的静态图像

00:16:38.600 --> 00:16:42.600 align:middle
根据你的照片设置是否规定了
高分辨率捕捉

00:16:43.167 --> 00:16:47.200 align:middle
但事先必须对相机配置为
五百万像素的静态图像

00:16:47.567 --> 00:16:51.600 align:middle
所以AVCapturePhotoOutput
要求你选择其特征

00:16:51.667 --> 00:16:53.100 align:middle
在你准备启动程序前

00:16:53.167 --> 00:16:56.367 align:middle
通过设定isHighResolutionCaptureEnabled
为true

00:16:57.167 --> 00:17:01.700 align:middle
一旦你选定 就可以在启动或未启动
高分辨率捕捉功能的情况下 拍摄静态图

00:16:57.167 --> 00:17:01.700 align:middle
一旦你选定 就可以在启动或未启动
高分辨率捕捉功能的情况下 拍摄静态图

00:17:01.767 --> 00:17:04.500 align:middle
而不会造成复杂的图形重建

00:17:06.099 --> 00:17:09.800 align:middle
类似地  LivePhotoCapture涉及动态影片

00:17:09.867 --> 00:17:11.400 align:middle
及静态图像的拍摄

00:17:11.867 --> 00:17:14.032 align:middle
电影包含的样本来自过去

00:17:14.567 --> 00:17:17.599 align:middle
在你发出捕捉请求之前1.5秒

00:17:17.666 --> 00:17:20.867 align:middle
因此 对捕捉渲染模式的配置操作

00:17:20.933 --> 00:17:22.599 align:middle
必须在进行该项捕捉程序之前

00:17:23.599 --> 00:17:29.033 align:middle
最后 动态图像能够以智能及自动的方式
在捕捉时间进行调整

00:17:29.100 --> 00:17:31.367 align:middle
如果检测到大幅度的目的性运动

00:17:31.433 --> 00:17:35.367 align:middle
比如某人将手臂放下 把设备装进口袋

00:17:36.033 --> 00:17:39.667 align:middle
如果你想捕获
原始动态照片的整个过程

00:17:39.733 --> 00:17:43.433 align:middle
你必须在启动程序前
退出自动调整功能

00:17:43.500 --> 00:17:44.967 align:middle
在你的AVCaptureSession上

00:17:47.233 --> 00:17:48.567 align:middle
今天最后要讨论的是

00:17:48.633 --> 00:17:52.433 align:middle
iOS 10中的相机隐私策略变更

00:17:54.467 --> 00:17:57.533 align:middle
让我们回顾一下Apple关于
媒体的隐私策略

00:17:58.267 --> 00:18:01.933 align:middle
用户iOS设备上的照片
与视频是个人的

00:17:58.267 --> 00:18:01.933 align:middle
用户iOS设备上的照片
与视频是个人的

00:18:02.000 --> 00:18:04.000 align:middle
私人的以及敏感的数据

00:18:04.533 --> 00:18:07.633 align:middle
照相机与麦克风的使用需要特别授权

00:18:07.700 --> 00:18:10.467 align:middle
必须经用户的明确授权

00:18:11.300 --> 00:18:13.267 align:middle
因此从iOS 7开始

00:18:13.333 --> 00:18:16.133 align:middle
用户被告知 首次使用的应用

00:18:16.200 --> 00:18:20.500 align:middle
照相机或麦克风
都有一次被禁止使用的机会

00:18:21.100 --> 00:18:22.367 align:middle
这件事非常好

00:18:22.867 --> 00:18:24.300 align:middle line:1
为了透明与信任

00:18:24.367 --> 00:18:27.633 align:middle line:1
别为点击一次OK而恼怒 这是值得的

00:18:29.433 --> 00:18:34.267 align:middle line:1
在iOS 10 我们要求应用
在透明度方面多一步确认

00:18:34.333 --> 00:18:38.367 align:middle line:1
通知用户
为什么它们要访问敏感数据

00:18:38.933 --> 00:18:42.267 align:middle line:1
有时 你的UI会做得很明显
但有时却不会

00:18:42.900 --> 00:18:45.733 align:middle line:1
你的原因字符串
应没有任何歧义

00:18:45.800 --> 00:18:48.767 align:middle line:1
例如：
此处 AVCam告诉用户

00:18:48.833 --> 00:18:52.200 align:middle line:1
它想要使用相机
拍摄照片和视频

00:18:52.267 --> 00:18:55.800 align:middle line:1
这非常明确的交代了
它将用相机做什么

00:18:57.467 --> 00:19:00.600 align:middle line:1
同样 iOS 10中的应用

00:18:57.467 --> 00:19:00.600 align:middle line:1
同样 iOS 10中的应用

00:19:00.667 --> 00:19:03.633 align:middle line:1
必须提供原因字符串
以使用麦克风

00:19:06.400 --> 00:19:08.867 align:middle line:1
最后是Photos Library

00:19:08.933 --> 00:19:12.600 align:middle line:1
你该在Photos Library
的原因字符串中明确交代

00:19:13.067 --> 00:19:16.333 align:middle line:1
你是把它用来
读或写 还是两者兼而有之？

00:19:18.900 --> 00:19:20.600 align:middle line:1
在Xcode的最新版本中

00:19:20.667 --> 00:19:23.700 align:middle line:1
你会发现一连串的
可能的隐私描述说明

00:19:23.967 --> 00:19:26.500 align:middle line:1
不仅局限于摄像头、麦克风和照片

00:19:26.700 --> 00:19:29.000 align:middle line:1
而是针对所有敏感数据的访问

00:19:29.533 --> 00:19:33.633 align:middle line:1
为了使用这些服务
你必须提供原因字符串

00:19:33.933 --> 00:19:34.867 align:middle line:1
如果没有

00:19:34.933 --> 00:19:38.100 align:middle line:1
你的应用将无法
获得所需服务的访问权限

00:19:40.467 --> 00:19:43.633 align:middle
Capture的三个特殊关键要点是

00:19:43.700 --> 00:19:46.600 align:middle
NSCameraUsageDescription

00:19:46.667 --> 00:19:48.933 align:middle
NSMicrophone3UsageDescription

00:19:49.000 --> 00:19:51.733 align:middle
以及NSPhotoLibraryUsageDescription

00:19:54.700 --> 00:19:56.567 align:middle
下面让我们总结一下刚学习的内容

00:19:57.267 --> 00:20:01.233 align:middle
AVCapturePhotoOutput允许
对场景监控行为进行精准控制

00:19:57.267 --> 00:20:01.233 align:middle
AVCapturePhotoOutput允许
对场景监控行为进行精准控制

00:20:02.167 --> 00:20:05.767 align:middle
它还可以按需
进行资源分配和回收

00:20:06.633 --> 00:20:10.500 align:middle
Capture客户端必须提供
原因才能使用摄像头、麦克风

00:20:10.567 --> 00:20:12.933 align:middle
以及照片这些iOS 10
功能组件的原因

00:20:14.467 --> 00:20:16.400 align:middle
想要了解更多详情 请访问URL

00:20:16.467 --> 00:20:19.700 align:middle
了解iOS Photography
的新进展这期节目

00:20:19.767 --> 00:20:21.100 align:middle
也就是501会话

00:20:22.867 --> 00:20:26.000 align:middle
如果你还在观看节目
我们邀请你访问

00:20:26.067 --> 00:20:27.800 align:middle
所有相关的三期节目

00:20:27.867 --> 00:20:32.000 align:middle
与摄影、
RAW以及Wide Color相关

00:20:32.067 --> 00:20:34.633 align:middle
谢谢收看
祝你捕获快乐瞬间

00:20:34.700 --> 00:20:36.167 align:middle
请继续享受其余会话
