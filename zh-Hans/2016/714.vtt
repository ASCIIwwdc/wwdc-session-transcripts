WEBVTT

00:00:19.386 --> 00:00:20.821
现代互联网的网络系统

00:00:28.896 --> 00:00:30.297
下午好
女士们和先生们

00:00:30.731 --> 00:00:32.566
看到这么多人在场我感到非常高兴

00:00:33.133 --> 00:00:35.936
有多少人是第一次来WWDC？

00:00:37.571 --> 00:00:38.906
哇！这令人难以置信

00:00:38.972 --> 00:00:40.073
欢迎

00:00:40.507 --> 00:00:42.743
我希望你们在WWDC一切顺利

00:00:44.344 --> 00:00:46.813
现在我们要来谈一些
网络系统的话题

00:00:47.681 --> 00:00:49.316
我今天有五个内容要讲

00:00:49.883 --> 00:00:54.521
我们将向你们介绍显式拥塞通知的最新进展

00:00:54.588 --> 00:00:55.989
我们去年谈论过（显式拥塞通知）

00:00:56.590 --> 00:00:59.860
我们要告诉你关于IPv6
进展的最新动态

00:01:00.561 --> 00:01:04.298
我们要谈论一点点国际化文本

00:01:04.364 --> 00:01:06.366
它正变得日益重要

00:01:08.302 --> 00:01:12.806
我们要来探索下你如何控制
网络接口的访问权

00:01:12.873 --> 00:01:15.642
来避免你的用户收到天价流量账单

00:01:16.343 --> 00:01:20.714
我们会以一些关于
网络服务质量探讨进行收尾

00:01:21.548 --> 00:01:26.053
你可能听说过Apple
Cisco Fastlane声明

00:01:26.620 --> 00:01:30.224
我们就它将如何适用于你的应用
这一话题加以谈论

00:01:32.993 --> 00:01:34.261
我们先从ECN说起

00:01:36.496 --> 00:01:38.265
简单地回顾下去年讲的内容

00:01:39.233 --> 00:01:44.738
我们展示了Smart Queue
Management和标记而非丢弃数据包

00:01:44.805 --> 00:01:50.844
如何在重新发送过程中
降低延迟 减少延时

00:01:50.911 --> 00:01:55.148
来提高所有应用程序的用户体验

00:01:55.215 --> 00:01:57.384
特别是对串流影像这类情况

00:02:00.254 --> 00:02:06.793
在iOS 9上面
我们对TCP连接没有启用ECN

00:02:06.860 --> 00:02:08.228
但是在一个不相关的改动里

00:02:08.294 --> 00:02:11.732
VPN软件会关注ECN标记

00:02:11.798 --> 00:02:16.036
我们发现德国的一个ISP
把所有的数据包都标记了

00:02:16.103 --> 00:02:20.040
“经历了拥塞”
这对VPN是不好的

00:02:20.374 --> 00:02:24.044
好消息是他们在几个星期内修好了网络

00:02:24.111 --> 00:02:27.748
我们没接到世界其他地方发来的
任何错误报告

00:02:27.814 --> 00:02:33.020
这告诉我们的是
我们在世界各地推出了iOS

00:02:33.086 --> 00:02:34.855
发现了一个问题并修好了

00:02:35.522 --> 00:02:37.658
现在互联网对ECN来说安全了

00:02:40.527 --> 00:02:46.300
也正因为这样 在iOS 9.3
和OS X El Capitan上

00:02:47.034 --> 00:02:51.138
随机5%的TCP连接使用了ECN

00:02:51.205 --> 00:02:54.107
我们用这个来收集性能数据

00:02:54.174 --> 00:02:57.945
然后检查确认互联网
对ECN来说是持续安全的

00:02:58.478 --> 00:03:01.582
在你已有的
Developer Seed中

00:02:58.478 --> 00:03:01.582
在你已有的
Developer Seed中

00:03:02.149 --> 00:03:06.153
100%的Wi-Fi连接
和100%的

00:03:06.220 --> 00:03:08.889
这三个网络运营商的连接
现在都在用ECN

00:03:10.524 --> 00:03:16.363
去年 我报告说Alexa上56%

00:03:16.897 --> 00:03:20.767
排名前百万的网站支持ECN

00:03:21.168 --> 00:03:24.271
这是一个还挺令人惊讶的支持数

00:03:24.338 --> 00:03:26.039
对于一个没人用的技术来说

00:03:27.941 --> 00:03:33.881
我和我在ETH的好朋友
Zurich和Brian谈了下

00:03:35.182 --> 00:03:38.085
Brian Trammell和
Mira Coolwind还有他们的同事

00:03:38.151 --> 00:03:39.786
为我们重新跑了下测试

00:03:40.420 --> 00:03:43.056
今年的百分比上升到了70%

00:03:43.357 --> 00:03:46.994
而且如果你只看IPv6的网站
都到了83%

00:03:47.861 --> 00:03:48.962
所以

00:03:49.997 --> 00:03:55.969
这是在号召ISP、网络运营商

00:03:56.036 --> 00:03:58.272
和卖给他们设备的供应商们行动起来

00:03:58.705 --> 00:04:00.407
客户端在使用ECN

00:03:58.705 --> 00:04:00.407
客户端在使用ECN

00:04:00.741 --> 00:04:02.342
网络服务在支持ECN

00:04:02.676 --> 00:04:06.180
是时候让中间的网络开始标记数据包

00:04:06.246 --> 00:04:07.648
而不是丢弃他们

00:04:07.714 --> 00:04:13.320
它给你更好的用户体验
它减少了因为重新传输而产生的延时

00:04:13.387 --> 00:04:15.355
而且它更有效的利用了网络

00:04:15.422 --> 00:04:18.959
因为你避免了重新传输包裹而浪费带宽

00:04:20.761 --> 00:04:24.064
我们的下一个话题是IPv6

00:04:26.500 --> 00:04:31.438
全球启用IPv6计划
是四年前的上个星期

00:04:31.505 --> 00:04:34.842
它现在还在增长

00:04:36.076 --> 00:04:39.012
我看了各种各样的数据统计

00:04:39.079 --> 00:04:42.516
现在来给大家展示其中的一小部分样本

00:04:42.583 --> 00:04:49.523
我看了通过IPv6
访问Apple主页的比例

00:04:49.590 --> 00:04:53.727
在比利时 这个比例现在到了39%

00:04:54.561 --> 00:04:57.664
在美国T-Mobile
这个比例到了54%

00:04:58.599 --> 00:05:01.835
在Verizon上 这个比例到了74%

00:04:58.599 --> 00:05:01.835
在Verizon上 这个比例到了74%

00:05:02.269 --> 00:05:08.675
很清楚的一点是 在这些运营商上
IPv6的通信是主流

00:05:11.311 --> 00:05:12.880
原因很简单

00:05:13.514 --> 00:05:18.252
IPv6更简单、更可靠
操作起来也更便宜

00:05:18.318 --> 00:05:22.489
所以运营商想转用IPv6原因很清楚

00:05:23.190 --> 00:05:26.560
但对于开发者和用户来说代价是什么？

00:05:27.027 --> 00:05:28.795
IPv6欠成熟吗？

00:05:29.029 --> 00:05:30.130
它更慢吗？

00:05:30.364 --> 00:05:33.800
分给IPv6的容量更少吗？

00:05:33.867 --> 00:05:35.836
这些是很重要的问题

00:05:35.903 --> 00:05:41.308
内容提供商和开发者密切关注着这个

00:05:42.042 --> 00:05:45.779
他们用收集自网页浏览器的数据

00:05:45.846 --> 00:05:49.950
测量一些东西
像其用户每人浏览网页时的加载时间

00:05:50.017 --> 00:05:52.586
然后把这个信息发送回来

00:05:52.653 --> 00:05:56.223
这样他们就能知道自己的产品

00:05:56.290 --> 00:05:58.058
在世界各国

00:05:58.125 --> 00:06:00.861
不同的ISP
不同的运营网络上运行如何

00:05:58.125 --> 00:06:00.861
不同的ISP
不同的运营网络上运行如何

00:06:02.796 --> 00:06:08.135
LinkedIn报告他们现10%的
通信是通过IPv6

00:06:08.202 --> 00:06:14.141
他们发现页面平均加载时间
比通过IPv4快10%到40%

00:06:15.409 --> 00:06:18.812
他们推理这可能是因为较少的额外开销

00:06:19.513 --> 00:06:22.850
通过大规模超载的NAT建立连接

00:06:23.750 --> 00:06:25.953
Facebook发现了相似的结果

00:06:26.019 --> 00:06:29.256
他们现在通信的45%是IPv6通信

00:06:29.690 --> 00:06:33.260
这是他们最近根据数据的平均情况
做出的报告

00:06:33.327 --> 00:06:38.198
ATP通过IPv6的
GET请求要快15%

00:06:39.032 --> 00:06:42.903
若你只看数据集合中iPhone部分

00:06:42.970 --> 00:06:45.973
结果发现其中30%通过IPv6

00:06:47.975 --> 00:06:53.780
所以IPv6对网络操作者来说更好

00:06:54.314 --> 00:06:56.350
他对用户和内容提供商也更好

00:06:56.717 --> 00:07:03.023
这也是为什么Apple
100%支持IPv6

00:06:56.717 --> 00:07:03.023
这也是为什么Apple
100%支持IPv6

00:07:03.357 --> 00:07:07.194
你们上个月肯定都已经看到了这个声明

00:07:07.928 --> 00:07:11.231
我们去年宣布了
我们将要求所有的应用

00:07:12.065 --> 00:07:14.968
兼容IPv6网络

00:07:15.035 --> 00:07:21.141
我们还说将在自己的IPv6网络上
用NAT64 Gateway测试所有应用

00:07:22.309 --> 00:07:25.312
从这个月起
我们开始强制执行那个要求

00:07:26.046 --> 00:07:29.349
还仔细的寻找任何

00:07:29.416 --> 00:07:33.754
这个行为会导致应用程序
拒绝率升高的证据

00:07:33.820 --> 00:07:35.789
因为如果是这种情况的话

00:07:35.856 --> 00:07:38.292
我们将不得不研究并找到解决的办法

00:07:38.759 --> 00:07:41.895
但是好消息是
我们尽全力监测

00:07:42.596 --> 00:07:46.033
没有发现应用程序拒绝率的任何变化

00:07:46.433 --> 00:07:51.638
这个真正告诉你的是
你们中99%有应用

00:07:51.738 --> 00:07:53.874
在IPv6支持下能正常工作

00:07:54.208 --> 00:07:56.109
这是我们意料之中的

00:07:56.176 --> 00:07:58.445
但是最好还是能确认下

00:07:59.379 --> 00:08:05.219
若你已有一个应用被拒绝了
而且你认为可能和IPv6有关系

00:07:59.379 --> 00:08:05.219
若你已有一个应用被拒绝了
而且你认为可能和IPv6有关系

00:08:05.285 --> 00:08:08.589
那么今天或者明天来一下实验室吧

00:08:09.156 --> 00:08:13.493
你可以在WWDC这里
用NAT64网络测试你的应用

00:08:13.560 --> 00:08:17.397
我们可以帮助你检测下
哪里可能出问题了

00:08:19.299 --> 00:08:22.236
我们的建议仍然是
也一直会是

00:08:22.970 --> 00:08:28.008
使用高层级兼容地址族的API

00:08:30.978 --> 00:08:35.115
如果你非得使用
低层级的BSD API

00:08:35.948 --> 00:08:38.751
那么你将会有额外的工作要去做

00:08:39.285 --> 00:08:42.890
这就是为什么我们诚挚建议使用
高层级API来为你做那些额外工作

00:08:44.024 --> 00:08:50.197
另一条重要建议是使用主机名
而不是IPv4地址

00:08:50.664 --> 00:08:54.501
因为IPv4地址
是IPv4内置的一部分

00:08:54.902 --> 00:08:57.304
让我给你看个小图片告诉你为什么

00:08:58.639 --> 00:09:01.275
这是几年前的一个典型情况

00:08:58.639 --> 00:09:01.275
这是几年前的一个典型情况

00:09:01.341 --> 00:09:05.078
你有一个客户端在用IPv4
你有一个服务器在用IPv4

00:09:05.546 --> 00:09:08.415
数据包在NAT Gateway
绕了点圈子

00:09:08.482 --> 00:09:10.350
这就是你如何连接到服务器

00:09:12.920 --> 00:09:18.725
现如今 很多运营商开始使用
带NAT64 Gateway的IPv6网络

00:09:18.792 --> 00:09:21.862
数据包仍然在
NAT Gateway绕点路

00:09:21.929 --> 00:09:25.899
然后连接到互联网上
那个老的过时的IPv4服务

00:09:28.869 --> 00:09:34.474
如果你们数据中心的人提出双栈服务

00:09:34.975 --> 00:09:38.378
但是你的应用还在用v4字面值

00:09:38.946 --> 00:09:41.615
那么数据包还是会绕同样的路

00:09:41.682 --> 00:09:44.585
通过NAT到达服务的v4接口

00:09:45.419 --> 00:09:47.354
但是如果你通过主机名查找

00:09:47.421 --> 00:09:51.358
并且他们把IPv6的
配额记录放入DNS

00:09:51.792 --> 00:09:55.162
那就是你如何直达数据路径

00:09:56.463 --> 00:09:58.265
不用通过NAT Gateway

00:10:02.369 --> 00:10:04.171
我谈了字面值地址

00:10:05.339 --> 00:10:10.677
我们现对选定的API
支持IPv4字面值地址

00:10:11.545 --> 00:10:13.380
如果你使用其中的一个地址

00:10:13.780 --> 00:10:19.486
我们实际会为你在本地设备上
做DNS64综合体

00:10:20.087 --> 00:10:22.789
创建一个临时IPv6地址

00:10:22.856 --> 00:10:25.559
与你因特网上v4服务相对应

00:10:25.626 --> 00:10:27.961
然后通过NAT64 Gateway
进行连接

00:10:29.029 --> 00:10:32.466
请记住 使用字面值v4地址

00:10:32.533 --> 00:10:36.069
一定会阻止你的应用
连接到一个ATV6服务器

00:10:36.136 --> 00:10:39.506
但话又说回来
如果那是你应用程序的需要

00:10:40.807 --> 00:10:43.277
这里是一个例子教你如何去做

00:10:44.745 --> 00:10:50.684
如果你编程语言用的是Swift
和高层Cocoa API

00:10:50.751 --> 00:10:52.586
这些会为你自动生成

00:10:52.653 --> 00:10:57.391
但是如果现在你用的是UDP代码
而且你用的是BSD socket

00:10:57.457 --> 00:11:00.093
你需要用到的API是
getaddrinfo

00:10:57.457 --> 00:11:00.093
你需要用到的API是
getaddrinfo

00:11:00.894 --> 00:11:04.865
你把要连接的地址用字面值传进去

00:11:06.099 --> 00:11:07.434
传入你想要的端口号

00:11:07.501 --> 00:11:10.871
这里https是443端口的同义词

00:11:12.172 --> 00:11:14.608
你对得到的地址进行循环

00:11:14.675 --> 00:11:16.410
记住 不要只用第一个

00:11:16.476 --> 00:11:19.012
你会得到一个数组包含
多个地址你需要去试

00:11:19.680 --> 00:11:21.915
当然 在你结束时释放内存

00:11:22.316 --> 00:11:23.784
连接在Local Link的设备

00:11:23.851 --> 00:11:29.590
我们从开发者那里收到的另一个问题
是关于物联网的

00:11:30.357 --> 00:11:32.159
有的开发者写的应用

00:11:32.226 --> 00:11:35.062
和不是他们制造的设备进行互动

00:11:35.362 --> 00:11:39.700
其中一些设备还不是很先进

00:11:40.567 --> 00:11:43.937
我们希望那些设备去支持IPv6

00:11:44.638 --> 00:11:46.406
如果不行的话

00:11:46.473 --> 00:11:50.143
我们建议他们起码支持
IPv4 link-local地址

00:11:50.811 --> 00:11:52.880
所以即便在一个只支持v6的网络上

00:11:53.580 --> 00:11:58.051
那些设备间可使用v4
与link-local地址互相交流

00:11:59.219 --> 00:12:02.890
如果这个设备两样都做不了 也可以

00:11:59.219 --> 00:12:02.890
如果这个设备两样都做不了 也可以

00:12:03.490 --> 00:12:06.460
当你提交应用时 通知应用审查

00:12:07.060 --> 00:12:09.696
那不能成为拒绝你应用的理由

00:12:10.764 --> 00:12:14.234
但很可能是在这个设备上
贴上这个标签的理由

00:12:16.170 --> 00:12:19.273
要记住
所有的线下链路通信

00:12:19.606 --> 00:12:23.544
仍然要兼容IPv6和NAT64

00:12:26.280 --> 00:12:32.986
总结一下
我们推荐你支持IPv4和IPv6

00:12:33.053 --> 00:12:35.455
在两端都要支持
即在客户端和服务器

00:12:36.323 --> 00:12:38.358
我们推荐你使用主机名、

00:12:38.692 --> 00:12:41.662
这样你可在v4的网络上
获得一个v4地址

00:12:41.728 --> 00:12:43.997
在v6网络上获得v6地址

00:12:45.532 --> 00:12:50.204
如果你确实需要使用字面值地址
一些选定的API现在支持他们

00:12:50.537 --> 00:12:51.438
只要你设置合适

00:12:51.672 --> 00:12:52.673
但是记住

00:12:52.739 --> 00:12:58.045
插入v4字面值以后
会阻碍和v6服务器的通信

00:13:00.080 --> 00:13:03.450
这就引入了我们要讲的下一个部分
国际文本

00:13:06.386 --> 00:13:08.522
你可能已经开始见到像这样的东西

00:13:09.056 --> 00:13:14.061
如果你的母语是英语
这可能看起来挺难懂也挺吓人的

00:13:15.195 --> 00:13:20.133
但我今天想谈的是 它到底有多简单

00:13:20.834 --> 00:13:25.372
国际支持在你的应用中
不需要成为一个艰巨的任务

00:13:25.873 --> 00:13:28.775
事实上 其实它不比支持ASCII难

00:13:29.476 --> 00:13:34.014
所以尽管这部分标题是国际文本和网络

00:13:34.081 --> 00:13:35.983
我们其实可以把网络划去

00:13:37.050 --> 00:13:41.321
眼下 我只想谈谈通常来说
你如何支持国际文本

00:13:43.957 --> 00:13:45.826
我要从一些背景知识说起

00:13:46.093 --> 00:13:50.531
并不是因为你们中
很多人每天可能会遇见它

00:13:51.164 --> 00:13:56.570
而是我想揭开它一部分神秘的面纱
让它不那么可怕

00:13:56.637 --> 00:13:59.273
因为它真的不再比ASCII复杂了

00:14:00.140 --> 00:14:02.075
我们的第一个概念是Unicode

00:14:03.443 --> 00:14:06.613
Unicode是一大串数字

00:14:06.680 --> 00:14:11.218
与之相对应的是人们能看懂的字符

00:14:11.885 --> 00:14:17.090
它就像一个大电话本
事实上 它可以书的形式出现

00:14:17.157 --> 00:14:20.360
它是一本又大又厚
一页一页写满了数字和字符的书、

00:14:21.128 --> 00:14:23.497
那就是个抽象概念

00:14:23.564 --> 00:14:26.400
你有整数和它代表的字符

00:14:26.967 --> 00:14:30.337
想在我们的电脑里用这些整数

00:14:30.404 --> 00:14:32.739
我们需要代表这些数字的方法

00:14:33.473 --> 00:14:35.976
在内存里 在硬盘上
在网络上

00:14:37.845 --> 00:14:43.550
代表他们的一种方法是UTF-32
就是一个32位的数字

00:14:43.617 --> 00:14:45.552
像其他32位的数字一样

00:14:45.619 --> 00:14:48.322
你需要关心它到底是大尾数还是小尾数

00:14:48.989 --> 00:14:52.192
它需要占用的空间是ASCII的四倍

00:14:54.161 --> 00:14:58.031
UTF-16就更简洁些
它用的是16位的数字

00:14:58.098 --> 00:15:01.401
它仍有同样的问题
小尾数还是大尾数

00:14:58.098 --> 00:15:01.401
它仍有同样的问题
小尾数还是大尾数

00:15:02.402 --> 00:15:06.807
因为它是16位
它只能代表65000个值

00:15:07.274 --> 00:15:11.645
所以你得用代理对来代表超出范围的值

00:15:11.712 --> 00:15:13.046
因此那就有点累赘

00:15:14.448 --> 00:15:18.619
UTF-8是一个8位面向字节的编码

00:15:19.253 --> 00:15:21.722
因此
不存在字节的顺序问题

00:15:22.322 --> 00:15:28.562
这也正是用它来编码很理想的原因

00:15:28.629 --> 00:15:31.298
那就让我们深入研究下UTF-8

00:15:33.467 --> 00:15:37.671
它发明于1992年新泽西的一个深夜

00:15:37.738 --> 00:15:42.142
它是计算机科学天才的罕见作品之一

00:15:42.209 --> 00:15:46.480
当我第一次听说它的时候
我立马知道了 这就是答案

00:15:46.547 --> 00:15:48.549
这解决了国际文本的问题

00:15:49.049 --> 00:15:52.152
所以我想告诉你们
一些关于它是如何工作的

00:15:52.219 --> 00:15:54.788
那样你就理解他到底有多简单了

00:15:54.855 --> 00:15:57.191
UTF-8的语法

00:15:57.257 --> 00:16:02.663
Unicode的代码点 从0到7F
和ASCII的值是完全一样的

00:15:57.257 --> 00:16:02.663
Unicode的代码点 从0到7F
和ASCII的值是完全一样的

00:16:02.729 --> 00:16:06.099
UTF在内存中
用完全一样的字节代表他们

00:16:06.700 --> 00:16:10.671
它的意思是如果你有一个硬盘里
装满了明文ASCII文件

00:16:10.737 --> 00:16:15.676
我就能魔杖一挥 然后说
我宣布你现在是UTF-8

00:16:16.376 --> 00:16:18.412
硬盘里没有任何一个字节需要改变

00:16:19.079 --> 00:16:21.281
文件的意义也没有改变

00:16:21.849 --> 00:16:26.086
你对那些传统的ASCII
有自动的向后兼容性

00:16:26.587 --> 00:16:28.021
这个东西好极了

00:16:28.088 --> 00:16:31.725
UTF-16和UTF-32
以及其他编码没有这样的属性

00:16:33.327 --> 00:16:36.530
对于ASCII范围以外的值

00:16:36.597 --> 00:16:39.399
他们会表示成多字节序列

00:16:39.600 --> 00:16:45.739
但所有那些多字节序列
只用字节值大于128的

00:16:46.340 --> 00:16:50.277
所以在ASCII字符和

00:16:50.344 --> 00:16:54.748
大数值Unicode代码点的
多字节编码之间是没有重叠的

00:16:55.382 --> 00:16:58.051
这个属性不适用于其他

00:16:58.118 --> 00:17:01.288
那些重新使用
高码字节代表其他东西的编码

00:16:58.118 --> 00:17:01.288
那些重新使用
高码字节代表其他东西的编码

00:17:03.290 --> 00:17:06.126
UTF-8有3种类型的字节

00:17:06.560 --> 00:17:09.796
它有明文ASCII字节

00:17:10.030 --> 00:17:11.164
UTF-8多八位序列

00:17:11.231 --> 00:17:14.501
如果一个字节从最显眼的0开始

00:17:14.568 --> 00:17:16.303
那就告诉你它是明文ASCII

00:17:17.971 --> 00:17:20.773
如果前2、3或者4位是1

00:17:20.840 --> 00:17:23.644
那就告诉你它是一个两、
三或者四字节序列

00:17:24.278 --> 00:17:25.913
如果前两位是10

00:17:25.979 --> 00:17:29.449
那就告诉你它是多字节序列

00:17:29.516 --> 00:17:31.018
我来联系语境展示一下

00:17:32.052 --> 00:17:34.021
独立的ASCII字符

00:17:35.622 --> 00:17:41.161
前两位是1的字节
意味着它是两字节序列

00:17:41.595 --> 00:17:43.564
开头3个1的是三字节序列

00:17:44.064 --> 00:17:46.200
开头4个1的是四字节序列

00:17:48.569 --> 00:17:50.270
这个赋予了它一个绝妙的属性

00:17:50.337 --> 00:17:55.642
你可跳到UTF-8文件中间任何地方

00:17:55.709 --> 00:17:58.679
通过看任何老字节
你能分辨出来你看到的是什么

00:17:59.146 --> 00:18:00.647
这个是独立的ASCII吗？

00:17:59.146 --> 00:18:00.647
这个是独立的ASCII吗？

00:18:00.714 --> 00:18:02.983
这是一个多字节序列的开始吗

00:18:03.050 --> 00:18:04.952
我处在一个多字节序列的中间

00:18:05.018 --> 00:18:08.088
是向前还是向后跳几位
才能找到字符的边界？

00:18:08.388 --> 00:18:12.426
所以这对于插入和删除错误来说
是非常非常鲁棒的

00:18:12.893 --> 00:18:18.498
这是个效率高到精简的编码

00:18:18.565 --> 00:18:21.401
但它又恰有足够的多余度使自身可靠

00:18:23.737 --> 00:18:28.809
它另外一个有用的属性是
在一个字符串的UTF编码里

00:18:28.876 --> 00:18:30.110
是没有0字节的

00:18:30.344 --> 00:18:34.781
而C语言把0看成是一个字符串的结尾
所以这个属性非常有用

00:18:34.848 --> 00:18:37.317
UTF-16字符串
到处都是0

00:18:37.384 --> 00:18:39.853
UTF-8的属性

00:18:39.920 --> 00:18:41.221
另外一个不错的属性

00:18:41.288 --> 00:18:47.027
是若你在UTF字符串上做一个
无脑简单的字节检验码的字符串排序

00:18:47.094 --> 00:18:51.665
他们的排序和你直接对Unicode
代码点排序的结果是一样的

00:18:52.266 --> 00:18:55.335
这真是一堆绝妙的属性

00:18:55.936 --> 00:18:59.573
这就是为何Ken Thompson
发明它之后 仅仅时隔六年

00:19:00.107 --> 00:19:03.944
IETF发布文档 要求从那时起

00:19:04.378 --> 00:19:08.782
所有新互联网标准协议
必须能使用UTF-8

00:19:10.050 --> 00:19:13.787
这个理念也在网路被接受了

00:19:15.255 --> 00:19:17.591
四年前 Google做了个问卷调查

00:19:17.658 --> 00:19:20.961
发现80%的网页都是UTF-8

00:19:21.028 --> 00:19:24.731
包括了一小部分老式的明文ASCII

00:19:24.798 --> 00:19:27.267
当然也是UTF-8的兼容子集

00:19:27.334 --> 00:19:30.070
UTF-8网页的百分比

00:19:30.137 --> 00:19:33.340
上个月那个数字增长到了87%

00:19:34.842 --> 00:19:39.146
正因为这样 W3C和IETF一样

00:19:39.213 --> 00:19:43.150
同样推荐我们只用UTF-8

00:19:43.684 --> 00:19:44.852
这相当棒

00:19:46.220 --> 00:19:47.888
但是有一个问题

00:19:48.488 --> 00:19:53.861
出于某种历史发展中遗失了的原因
DNS界决定不这么做

00:19:53.927 --> 00:19:57.197
他们发明了一个不同的编码方法
被叫做Punycode

00:19:58.632 --> 00:20:05.572
Punycode重新使用已有
ASCII字节值来代表不同的东西

00:19:58.632 --> 00:20:05.572
Punycode重新使用已有
ASCII字节值来代表不同的东西

00:20:06.306 --> 00:20:10.911
那些字节值对应的是
字母、数字和连字符

00:20:12.513 --> 00:20:17.451
这个的结果是
如果我们有一段字节

00:20:18.252 --> 00:20:21.421
我可把这些字节当成ASCII值处理

00:20:21.889 --> 00:20:23.790
然后得到这样的东西

00:20:25.125 --> 00:20:28.195
或者我可以把它们
当成Punycode编码来处理

00:20:28.562 --> 00:20:30.030
然后得到他们真实的内容

00:20:30.731 --> 00:20:36.436
那个对于相同字节的双重解释
可能会出现问题

00:20:36.503 --> 00:20:41.141
因为你想给用户看的内容并不明确

00:20:41.208 --> 00:20:42.376
或者不是用户想要的

00:20:42.442 --> 00:20:44.511
如果用UTF-8来做对比

00:20:44.845 --> 00:20:47.214
你注意到的第一件事
是编码变得简洁

00:20:47.281 --> 00:20:48.515
它用了更少的字节

00:20:48.982 --> 00:20:51.285
而且只有一个有效的解释

00:20:51.818 --> 00:20:54.588
所以不会出现模棱两可的情况

00:20:55.856 --> 00:20:59.960
对你们来说好消息
是你们不需要关心这些

00:21:00.027 --> 00:21:01.495
因为我们会为你处理

00:21:02.963 --> 00:21:06.800
在iOS 9和
OS X El Capitan上

00:21:06.867 --> 00:21:12.072
如果你试图在命令行ping一个
UTF-8的主机名 那会失败的

00:21:12.673 --> 00:21:14.508
你输的是UTF-8

00:21:15.175 --> 00:21:20.848
那些字符通过了工具检测
被API接受并到了网络上

00:21:20.914 --> 00:21:26.019
但那名字没以UTF-8
输入到DNS中 所以失败了

00:21:26.887 --> 00:21:30.157
从现在开始的iOS 10
和macOS Sierra

00:21:30.791 --> 00:21:36.363
同样的ping指令
在命令行输入同样的UTF-8字符

00:21:37.164 --> 00:21:41.502
我们现会把它翻译成Punycode

00:21:42.636 --> 00:21:45.305
运行查询
它将会成功

00:21:46.073 --> 00:21:50.377
这里ping指令
会使用Punycode

00:21:50.711 --> 00:21:53.247
把它以ASCII形式展示

00:21:53.313 --> 00:21:57.451
所以你看到的是屏幕上这些乱码
而不是你原本输入的实际名字

00:21:57.985 --> 00:22:01.522
这也是对同一字符
有双重翻译问题的一部分

00:21:57.985 --> 00:22:01.522
这也是对同一字符
有双重翻译问题的一部分

00:22:01.788 --> 00:22:05.692
但是好消息是所有的
Bonjour和DSA API

00:22:05.759 --> 00:22:09.663
现在会接受以UTF-8格式输入
的国际文本

00:22:17.337 --> 00:22:18.238
谢谢

00:22:18.906 --> 00:22:21.375
因为Punycode格式
有非常严格的限制

00:22:21.441 --> 00:22:25.012
它甚至不支持
像名字中有空格这样简单的东西

00:22:25.078 --> 00:22:28.315
对于Bonjour搜索发现
我们用的是DNS

00:22:28.382 --> 00:22:29.750
我们不想有那么严格的限制

00:22:30.184 --> 00:22:37.090
因此 运算法则的工作方式
是RFC 6763里记录的

00:22:37.157 --> 00:22:39.660
我们首先尝试UTF-8

00:22:40.060 --> 00:22:43.864
如果DNS管理员把UTF-8
放在他们的区域文件里

00:22:43.931 --> 00:22:47.234
这做起来很简单
人们在90年代在做的

00:22:47.301 --> 00:22:50.571
我们运行查询 我们成功了
我们得到了结果 一切都很正常

00:22:51.004 --> 00:22:54.274
现在不同之处在于
若我们失败了 我们没有放弃尝试

00:22:55.075 --> 00:22:57.878
而是用Punycode进行再次尝试
看看是否奏效

00:22:57.945 --> 00:23:00.013
所以我们在同一个API中支持这两种

00:22:57.945 --> 00:23:00.013
所以我们在同一个API中支持这两种

00:23:00.848 --> 00:23:03.483
Email地址

00:23:03.550 --> 00:23:07.054
Email地址当今也变得国际化

00:23:07.688 --> 00:23:10.657
这个做起来也不难

00:23:11.925 --> 00:23:14.962
但是用户却碰到问题了
因为一个愚蠢的小原因

00:23:15.696 --> 00:23:18.232
很多app 当你注册一个账户时

00:23:18.298 --> 00:23:20.801
或者你去网页上注册一个账户时

00:23:20.868 --> 00:23:24.371
他们试着验证
这个email地址是否有效

00:23:24.438 --> 00:23:29.243
他们检查它是否
以.com结尾或者类似的格式

00:23:30.043 --> 00:23:33.146
但有着绝对有效email地址的用户

00:23:33.213 --> 00:23:36.049
却不让注册账户

00:23:36.116 --> 00:23:37.985
因为他们的email地址被拒绝了

00:23:38.352 --> 00:23:43.724
所以我们需要移除
那些出问题的验证器

00:23:43.790 --> 00:23:46.426
说实在的 对于email地址
唯一你能检验的东西

00:23:46.493 --> 00:23:47.895
是它是否有一个@字符

00:23:48.262 --> 00:23:51.265
如果有的话
它就可能是个有效的email地址

00:23:51.331 --> 00:23:55.068
如果你想知道它是否有效
发送一封确认邮件

00:23:55.135 --> 00:23:58.005
让用户回应以确认它是有效的

00:23:59.573 --> 00:24:03.677
如果你在写一个email客户端
或者email服务器

00:23:59.573 --> 00:24:03.677
如果你在写一个email客户端
或者email服务器

00:24:04.044 --> 00:24:06.480
会有一堆RFC你需要去看一下

00:24:06.847 --> 00:24:10.017
但是对于剩下的人来说
你不需要去担心它

00:24:10.484 --> 00:24:13.420
让用户以UTF-8格式
输入email地址

00:24:13.954 --> 00:24:18.792
把它存在你客户端的数据库中
让邮件服务器把它

00:24:18.859 --> 00:24:20.961
以email标准编码正确发出去

00:24:22.162 --> 00:24:24.198
国际文本的范例

00:24:24.264 --> 00:24:28.602
来对这个部分进行一下收尾
我们推荐你把UTF-8用到每个地方

00:24:29.269 --> 00:24:31.071
让一切变得那么简单

00:24:31.538 --> 00:24:33.807
不要担心Punycode
我们来为你处理

00:24:34.474 --> 00:24:38.946
对于接受用户的输入要自由灵活

00:24:39.012 --> 00:24:41.481
这是个新的多语言国际世界

00:24:43.917 --> 00:24:46.820
下面到了接口部分

00:24:48.322 --> 00:24:53.293
Wi-Fi Assist是
我们去年引入的

00:24:55.462 --> 00:24:56.864
说真的 这不新

00:24:57.397 --> 00:25:01.401
自第一个iPhone起就一直这样

00:24:57.397 --> 00:25:01.401
自第一个iPhone起就一直这样

00:25:02.469 --> 00:25:05.172
如果我有Wi-Fi
我希望我的手机使用它

00:25:06.006 --> 00:25:09.910
如果我没有Wi-Fi
那就是我为什么得花钱买蜂窝数据流量

00:25:09.977 --> 00:25:12.646
这样出门在外我也有网络

00:25:13.580 --> 00:25:15.816
第一个iPhone就这样做了

00:25:16.617 --> 00:25:19.553
我们去年做的改变
是我们做的更好了

00:25:20.387 --> 00:25:23.090
我们对于做的那个决定更明智了

00:25:24.091 --> 00:25:27.861
因为在Wi-Fi网络的前沿
总是会有这样的一个灰色区域

00:25:28.962 --> 00:25:31.798
移动因素也在此之内

00:25:31.865 --> 00:25:34.835
我们有个情况
我们称之为停车场问题

00:25:34.902 --> 00:25:38.005
它发生于一天的结束
当你要下班的时候

00:25:38.071 --> 00:25:41.074
你离开了办公室
你拿出了手机 你有Wi-Fi

00:25:41.175 --> 00:25:44.011
你走出大楼去开车
然后你要查看地图

00:25:44.077 --> 00:25:46.847
或者天气预报
或查找电影什么的

00:25:47.481 --> 00:25:49.449
你的手机以为它有Wi-Fi

00:25:49.516 --> 00:25:51.852
它一小会儿前是有Wi-Fi

00:25:51.919 --> 00:25:55.556
但是你刚好走出了Wi-Fi的范围
它还没意识到

00:25:56.657 --> 00:25:58.926
有了Wi-Fi Assist
我们会去做这个决定

00:25:59.426 --> 00:26:00.694
我们尝试使用Wi-Fi

00:25:59.426 --> 00:26:00.694
我们尝试使用Wi-Fi

00:26:00.761 --> 00:26:02.996
如果不管用
我们就会转而使用蜂窝数据

00:26:04.765 --> 00:26:09.203
但就像任何新功能
有时候会存在倾向性

00:26:09.670 --> 00:26:13.440
让新事物成为人们问题的替罪羊
来遭受责备

00:26:13.807 --> 00:26:17.511
所有人会恨它
当有些app使用了大量的流量

00:26:17.578 --> 00:26:19.413
然后出乎意料地收到了天价账单

00:26:20.080 --> 00:26:23.050
人们的本性就是责怪新功能

00:26:23.317 --> 00:26:25.853
但其实若你去看
Wi-Fi Assist的流量

00:26:25.919 --> 00:26:27.955
你很可能会发现
那部分非常少

00:26:28.555 --> 00:26:30.991
Wi-Fi Assist通常
不是问题所在

00:26:31.491 --> 00:26:33.794
应用有那个开关

00:26:33.961 --> 00:26:37.431
如果你不想那个应用使用太多流量
你可以把它关掉

00:26:38.165 --> 00:26:41.001
但那非常残忍 更像是一种
要么全要 要么全不要的开关

00:26:41.768 --> 00:26:44.505
很多应用想做一些有点狡猾的事情

00:26:45.305 --> 00:26:47.374
比如你有个视频流应用

00:26:48.775 --> 00:26:52.913
你可能想让用户能浏览目录

00:26:52.980 --> 00:26:57.718
看到指甲盖大小的小图片
读简介 而这些全通过移动数据

00:26:57.985 --> 00:26:59.152
不会花费太多

00:26:59.853 --> 00:27:05.058
但是你可能想要应用程序的设置
不让使用移动流量来缓冲视频

00:26:59.853 --> 00:27:05.058
但是你可能想要应用程序的设置
不让使用移动流量来缓冲视频

00:27:06.093 --> 00:27:09.296
因为用户可能不想花费
太多钱到移动流量上

00:27:09.997 --> 00:27:14.334
如果你有那个设置的话
你会想要能够辨别

00:27:14.401 --> 00:27:17.404
接收指甲盖大小的图片是允许的

00:27:17.471 --> 00:27:19.273
而缓冲视频是不允许的

00:27:21.041 --> 00:27:24.244
很多开发者做过这样的事情

00:27:25.312 --> 00:27:28.882
他们用可达性API来问
我在用手机流量？

00:27:29.016 --> 00:27:29.983
是还是否？

00:27:30.217 --> 00:27:32.819
如果没在用手机流量
那就开始去下载吧

00:27:33.220 --> 00:27:36.023
但是 网络的事情不是一直不变的

00:27:36.089 --> 00:27:37.958
事情每一秒都可能发生变化

00:27:38.325 --> 00:27:40.194
在你检查

00:27:40.260 --> 00:27:43.030
是否在用手机流量
和实际上去连接之间

00:27:43.330 --> 00:27:45.432
用户可能正穿过停车场

00:27:46.166 --> 00:27:49.002
所以这不是做检查的正确方法

00:27:49.636 --> 00:27:54.241
正确方法是把你的意图在网络层表达

00:27:54.308 --> 00:27:56.777
我们会尊重你告诉我们的内容

00:27:58.278 --> 00:28:02.416
第一步是不要管那个“飞行前检查”

00:27:58.278 --> 00:28:02.416
第一步是不要管那个“飞行前检查”

00:28:02.850 --> 00:28:05.352
如果你想做个网络传输
就去试一下

00:28:06.220 --> 00:28:09.990
如果那是一个你不想用蜂窝流量的传输

00:28:10.457 --> 00:28:12.960
那么你可以把它在网络层表达

00:28:13.460 --> 00:28:15.262
CoreMedia API的使用

00:28:15.629 --> 00:28:21.101
你使用NSURLSession来设置
allowsCellularAccess关键字

00:28:21.535 --> 00:28:24.371
若把allowsCellularAccess设为假

00:28:24.671 --> 00:28:27.074
那么我们就不会使用蜂窝数据进行连接

00:28:27.741 --> 00:28:28.675
简单又好用

00:28:36.116 --> 00:28:39.152
如果连接失败
你可以询问用户

00:28:39.219 --> 00:28:41.388
你想用移动流量还缓冲视频吗

00:28:42.289 --> 00:28:46.793
或者你可以等 订阅更好途径的提示

00:28:47.060 --> 00:28:50.531
当手机恢复Wi-Fi连接时
你就会被告知

00:28:50.764 --> 00:28:54.935
然后你就可在Wi-Fi再次可用时
重试你的连接

00:28:58.872 --> 00:29:04.178
总结一下
不要假设因为你现在有Wi-Fi

00:28:58.872 --> 00:29:04.178
总结一下
不要假设因为你现在有Wi-Fi

00:29:04.244 --> 00:29:08.015
你在一秒以后仍然有Wi-Fi
甚至半秒以后

00:29:08.815 --> 00:29:09.816
情况一直在变

00:29:10.851 --> 00:29:14.688
把你想要的在网络层表达
我们会遵从的

00:29:15.389 --> 00:29:16.757
网络服务质量（QoS）

00:29:16.823 --> 00:29:20.661
我们最后一个话题是网络服务质量

00:29:23.197 --> 00:29:27.634
去年夏天 我们宣布了
Apple和Cisco的合作关系

00:29:27.701 --> 00:29:31.305
我来告诉你们一些关于新API的内容

00:29:31.371 --> 00:29:36.410
你就可以在网络层来表达你的需求了

00:29:38.579 --> 00:29:40.547
实际中存在不同种类的网络通信

00:29:41.915 --> 00:29:48.055
我们所做99%的事情是好的
标准的因特网尽力而为流量

00:29:48.388 --> 00:29:53.493
我们想要能得到的最大吞吐量
并且我们最好能降低延时

00:29:54.695 --> 00:29:57.130
但是我们一定想要吞吐量越大越好

00:29:57.364 --> 00:29:59.967
用来满足浏览网页、发送email

00:30:02.169 --> 00:30:07.541
我们做的另外一件事是联机备份
把图片上传到iCloud

00:30:08.308 --> 00:30:11.678
这也想要好一些的吞吐量

00:30:12.379 --> 00:30:14.648
但不像高优先级的东西需要的那么大

00:30:15.249 --> 00:30:18.986
我们想把所有图片上传到iCloud

00:30:19.052 --> 00:30:24.691
让这个过程在后台完成
还不打扰看Netflix TV兴致

00:30:25.559 --> 00:30:28.629
图片上传应该在我们睡觉时进行

00:30:29.162 --> 00:30:31.431
俗称清道夫级别的流量

00:30:31.498 --> 00:30:34.535
它用的是网络其他时候空闲的流量

00:30:34.601 --> 00:30:36.770
不然那些就被浪费了

00:30:36.837 --> 00:30:40.541
但第二类通信是
发送email 浏览网页

00:30:40.607 --> 00:30:42.743
以及任何人们频繁参与的活动

00:30:44.411 --> 00:30:50.317
第三类通信是电话语音
交互式语音和视频

00:30:50.751 --> 00:30:53.220
我说交互式
是因为它是关键部分

00:30:53.587 --> 00:30:55.322
当我们在谈话时

00:30:55.522 --> 00:30:59.860
我说一句话 你听到了 你要做回答
你回了我一句话 我也听到了

00:31:00.093 --> 00:31:03.163
如果这个来回需要几百毫秒

00:31:03.497 --> 00:31:05.432
人们的通信就被打断了

00:31:08.335 --> 00:31:10.604
当人们谈到语音和视频时

00:31:10.671 --> 00:31:15.609
意识到一点很重要 就是看的
YouTube视频可能是个视频

00:31:16.043 --> 00:31:17.344
但它不是交互的

00:31:17.411 --> 00:31:20.547
它不需要那200毫秒
往返时间的附属条件

00:31:21.815 --> 00:31:25.886
听的播客节目可能是语音
但是它不意味着播客服务是声音通信

00:31:25.953 --> 00:31:26.987
它不是互动的

00:31:28.488 --> 00:31:31.325
这就是为何我把图表这部分
标注为电话语音

00:31:31.391 --> 00:31:33.460
因为这是交互式语音和视频

00:31:34.294 --> 00:31:37.197
对这类通信
你想要尽可能低的往返时间

00:31:38.632 --> 00:31:39.967
而且它的吞吐量非常小

00:31:40.033 --> 00:31:43.337
每秒只有几千比特
你不需要50兆比特的语音

00:31:43.971 --> 00:31:49.810
所以把你的通信标记为电话语音
会告诉网络保持低延迟

00:31:50.577 --> 00:31:52.145
但是你也不要把队列弄大

00:31:52.446 --> 00:31:56.049
若你试图把语音类
做任何形式的批量传输

00:31:56.216 --> 00:31:59.119
你将会丢掉大部分的数据包

00:31:59.186 --> 00:32:02.022
因为只有很少的网络流量

00:31:59.186 --> 00:32:02.022
因为只有很少的网络流量

00:32:02.089 --> 00:32:03.590
被分给了这类通信

00:32:03.891 --> 00:32:09.096
人们问的一个常见问题是
Fastlane会让我的应用变快吗？

00:32:09.162 --> 00:32:11.598
答案是 不会的
它不会让你的应用变快

00:32:11.899 --> 00:32:13.867
它会减低语音通信的延时

00:32:17.404 --> 00:32:19.706
你可能会好奇 这个和

00:32:19.773 --> 00:32:23.177
Smart Queue Management
还有Explicit Congestion Notification

00:32:23.477 --> 00:32:25.179
就是之前谈过的那两个有什么关联

00:32:25.245 --> 00:32:30.050
答案是 那些技术全面改善了

00:32:30.717 --> 00:32:33.754
所有通信的延时

00:32:34.421 --> 00:32:38.158
但是电话语音可能还会是个极端个例

00:32:38.358 --> 00:32:40.694
它想要非常非常低的延迟

00:32:40.761 --> 00:32:44.231
不惜牺牲吞吐量来达到

00:32:45.399 --> 00:32:47.568
网络服务类型API

00:32:47.634 --> 00:32:52.239
从iOS 5开始
我们就有了网络服务类型API

00:32:52.706 --> 00:32:55.375
它让你能向网络表达你的一些需求

00:32:56.043 --> 00:33:00.214
但很多开发者写的
诸如Skype和Facetime

00:32:56.043 --> 00:33:00.214
但很多开发者写的
诸如Skype和Facetime

00:33:00.280 --> 00:33:04.751
是通过UDP来做这类电话语音通信的

00:33:05.352 --> 00:33:09.590
在现在的iOS上要使用UDP
你需要使用BSD套接字

00:33:09.990 --> 00:33:15.629
所以我们现在有一个套接口选项
用来公开相同的功能

00:33:15.929 --> 00:33:19.166
这样你的UDP客户端可以从中受益

00:33:20.100 --> 00:33:24.104
我们知道一些开发者
过去一直在一次尝试中设置

00:33:24.171 --> 00:33:27.574
服务的IP类型位系统
来达到同样的效果

00:33:28.876 --> 00:33:32.746
问题是那些服务类型位系统
没被很好地定义

00:33:32.813 --> 00:33:34.281
他们没在任何地方被详细说明

00:33:34.648 --> 00:33:38.452
一些Wi-Fi芯片供货商会看
服务类型位系统

00:33:38.519 --> 00:33:41.321
然后把它当作设置

00:33:41.388 --> 00:33:45.759
Wi-Fi通信类型为语音、
视频或后台的提示

00:33:46.994 --> 00:33:50.063
但是问题是
没有对这些位系统进行标准定义

00:33:50.130 --> 00:33:52.533
诠释起来就会不一致

00:33:52.766 --> 00:33:56.737
所以你可能在你办公室测试过了
认为一切正常

00:33:56.803 --> 00:33:58.572
但是对于一个客户
却是另外一回事

00:33:59.039 --> 00:34:00.707
这就是为何我们有了新的套接口选项

00:33:59.039 --> 00:34:00.707
这就是为何我们有了新的套接口选项

00:34:00.774 --> 00:34:04.077
会在任何设备上
给你提供可靠的、一致的行为

00:34:06.413 --> 00:34:07.948
如果你在用Swift编程

00:34:08.482 --> 00:34:12.386
你可以设置网络服务类型属性为
语音、视频或后台

00:34:12.686 --> 00:34:16.790
或者你根本不去设置
那么它就是传统的尽最大努力传输

00:34:17.658 --> 00:34:21.228
如果你在使用套接口选项
我们有同样的选项

00:34:21.862 --> 00:34:24.965
我们有其他大概多于七个的选项

00:34:25.199 --> 00:34:27.167
多于你们中大部分人需要的

00:34:27.234 --> 00:34:29.036
这些是四个有意思的

00:34:29.203 --> 00:34:31.737
链路层QoS标记

00:34:31.804 --> 00:34:35.141
当你设置这些选项时
会发生一些事

00:34:36.643 --> 00:34:39.679
在设备自身
有一些带外队列

00:34:40.347 --> 00:34:46.053
你为通信设置的服务类型
控制它使用哪个队列

00:34:47.621 --> 00:34:52.993
在Wi-Fi接口
它也会设置无线多媒体访问类

00:34:54.360 --> 00:34:57.698
在iOS和OS X上
所有的设备都支持这个

00:34:58.332 --> 00:35:01.935
而且带外队列选择同样适用于
Ethernet和Wi-Fi

00:34:58.332 --> 00:35:01.935
而且带外队列选择同样适用于
Ethernet和Wi-Fi

00:35:03.704 --> 00:35:10.177
现在 若你的设备在这些新的
Cisco Fastlane网络上

00:35:10.777 --> 00:35:13.380
我们会识别也会设置

00:35:13.447 --> 00:35:17.317
IP层区分服务代码点

00:35:17.384 --> 00:35:20.621
这样你就能得到想要的处理方式

00:35:20.787 --> 00:35:23.757
不只是在它离开设备的第一跳

00:35:23.824 --> 00:35:26.193
而是在企业网络上并发跳越

00:35:27.995 --> 00:35:31.765
我想强调的是
这不是你们所有人都需要的

00:35:31.832 --> 00:35:34.268
不必感觉你得走开
对代码进行改动

00:35:34.801 --> 00:35:39.306
如果你在写一个在线备份的应用
一定设置后台通信类

00:35:39.907 --> 00:35:44.678
如果你在写下一代的Skype
那就设置成语音类

00:35:45.078 --> 00:35:46.613
但是对于剩下的人来说

00:35:47.414 --> 00:35:50.317
标准的尽最大努力传输
几乎可以确定就是你需要的

00:35:51.652 --> 00:35:53.487
还有一些其他事情你们应该记住

00:35:55.055 --> 00:35:58.825
带外队列选择和Wi-Fi层

00:35:58.892 --> 00:36:01.762
服务质量标记被所有设备支持

00:35:58.892 --> 00:36:01.762
服务质量标记被所有设备支持

00:36:01.929 --> 00:36:04.031
但是记住只适用带外数据包

00:36:04.097 --> 00:36:07.801
进来的数据包
必须被另一端的发送者标记

00:36:08.435 --> 00:36:14.107
IP层的标记也只针对带外数据包

00:36:14.775 --> 00:36:20.113
现只被Cisco网络的兼容设备支持

00:36:20.814 --> 00:36:21.982
只被iOS支持

00:36:22.049 --> 00:36:25.419
不被Mac和Apple TV
或其他设备支持

00:36:26.119 --> 00:36:28.222
而且目前 只被Wi-Fi支持

00:36:28.288 --> 00:36:30.691
绝大多数人
在iPad上不用Ethernet

00:36:30.891 --> 00:36:32.793
但若你插入了Ethernet适配器

00:36:33.327 --> 00:36:35.662
服务质量不被Ethernet支持

00:36:36.363 --> 00:36:40.834
最后一点 如果管理员选择安装

00:36:40.901 --> 00:36:43.270
一个管理配置文件在设备上

00:36:43.337 --> 00:36:45.973
那么管理配置文件可以限制

00:36:46.039 --> 00:36:49.977
那个应用可以使用这类服务选项

00:36:50.043 --> 00:36:53.814
只有在配置文件列表的应用
才能够设置服务类型

00:36:53.881 --> 00:36:56.049
对于其他应用来说将是个无操作

00:36:59.920 --> 00:37:01.488
概况来说这个部分

00:36:59.920 --> 00:37:01.488
概况来说这个部分

00:37:03.590 --> 00:37:06.193
你们大多数人的通信
应该继续是尽最大努力

00:37:06.260 --> 00:37:07.494
网络服务类型的最佳实践

00:37:07.561 --> 00:37:11.265
如果你要做大型的批量传输
且时间并不那么重要

00:37:11.331 --> 00:37:13.967
后台通信是一个让你少受打扰的方法

00:37:14.034 --> 00:37:15.969
让你在网络上成为一个更好的公民

00:37:16.603 --> 00:37:18.772
记住 它没有优先级这一说

00:37:19.173 --> 00:37:22.543
没有所谓的高优先级到低优先级的排序

00:37:22.976 --> 00:37:27.247
它是一个web表达
你是否想要小吞吐量和低延迟

00:37:27.314 --> 00:37:30.284
还是大吞吐量和中等延迟

00:37:34.655 --> 00:37:35.822
今天的演讲就到这里

00:37:36.223 --> 00:37:37.257
谢谢你们的到来

00:37:37.658 --> 00:37:41.495
我们谈了Smart
Queue Management

00:37:41.562 --> 00:37:46.667
这对所有ISP和运营商
以及网络供货商是一个号召行为

00:37:47.434 --> 00:37:49.002
客户端开始支持ECN

00:37:49.069 --> 00:37:50.637
服务器开始支持ECN

00:37:51.038 --> 00:37:53.340
如果你开始在你的网络上标记数据包

00:37:53.407 --> 00:37:56.410
而不是丢弃他们
你会让你的用户更开心

00:37:57.077 --> 00:37:59.646
对在做的开发者的一句话

00:37:59.713 --> 00:38:05.285
是IPv6现在对于很多网络运营商
在很多网络上是主流的通信方式

00:37:59.713 --> 00:38:05.285
是IPv6现在对于很多网络运营商
在很多网络上是主流的通信方式

00:38:06.086 --> 00:38:09.323
在你的应用程序中支持IPv6

00:38:09.756 --> 00:38:13.660
在你的服务器上
支持IPv6和IPv4

00:38:15.062 --> 00:38:18.031
对于你的文本
UTF-8是新的ASCII

00:38:18.365 --> 00:38:19.867
不比ASCII难

00:38:20.701 --> 00:38:22.369
用起来实在非常简单

00:38:22.703 --> 00:38:26.106
我们现在所有的设备都良好地支持

00:38:26.306 --> 00:38:28.442
所有的Unicode字符的文字

00:38:28.509 --> 00:38:32.246
这样那就没任何疑虑支持UTF-8了

00:38:33.180 --> 00:38:38.085
最后 我们有新方法
让你在网络层表达意愿

00:38:39.052 --> 00:38:41.922
你可以控制
什么时候你不想使用蜂窝流量

00:38:42.723 --> 00:38:46.159
你现在也可以更好地控制

00:38:46.226 --> 00:38:49.029
数据吞吐量延迟的特性

00:38:50.531 --> 00:38:51.798
就是这些了

00:38:52.399 --> 00:38:54.835
这里有个链接 你可以找到更多信息

00:38:55.636 --> 00:38:58.605
我们有其他讲座
你可以观看它的视频

00:38:59.206 --> 00:39:00.307
你可能会感兴趣

00:38:59.206 --> 00:39:00.307
你可能会感兴趣

00:39:00.374 --> 00:39:04.278
我们有关于网络和安全的讲座 很重要

00:39:04.344 --> 00:39:07.114
我们还有几个其他讲座
是关于国际化的

00:39:07.714 --> 00:39:12.219
我们有一些讲座关于高层级
网络应用程序的 像HomeKit

00:39:12.519 --> 00:39:15.622
那就这样吧
感谢来到WWDC
