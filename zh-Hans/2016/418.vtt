WEBVTT

00:00:19.386 --> 00:00:22.055
<c.magenta>在Instruments中</c>
<c.magenta>使用时间分析器</c>

00:00:22.122 --> 00:00:24.925
<c.magenta>早点分析 经常分析</c>

00:00:26.627 --> 00:00:27.794
<c.magenta>下午好</c>

00:00:28.762 --> 00:00:29.963
<c.magenta>我叫Kris Markel</c>

00:00:30.030 --> 00:00:32.198
<c.magenta>我是Apple性能工具团队的工程师</c>

00:00:32.266 --> 00:00:35.903
<c.magenta>今天我们谈谈</c>
<c.magenta>在Instruments中使用时间分析器</c>

00:00:36.803 --> 00:00:37.938
<c.magenta>这是我们的议题</c>

00:00:38.005 --> 00:00:40.507
<c.magenta>我们要从分析开始讲</c>

00:00:40.574 --> 00:00:41.875
<c.magenta>分析是什么及如何使用它</c>

00:00:41.942 --> 00:00:43.177
<c.magenta>然后我要演示一个示例</c>

00:00:43.243 --> 00:00:46.647
<c.magenta>使应用的速度更快 工作量更少</c>

00:00:46.713 --> 00:00:51.919
<c.magenta>最后 确保应用有非常棒的用户响应</c>

00:00:52.452 --> 00:00:55.822
<c.magenta>在我们开始讲正题之前</c>
<c.magenta>让我们谈谈为什么要这样做</c>

00:00:56.089 --> 00:01:01.261
<c.magenta>原因就是我们想提供一种</c>
<c.magenta>优秀的用户体验</c>

00:00:56.089 --> 00:01:01.261
<c.magenta>原因就是我们想提供一种</c>
<c.magenta>优秀的用户体验</c>

00:01:01.562 --> 00:01:04.598
<c.magenta>我们想让用户喜欢用我们的应用</c>

00:01:04.932 --> 00:01:08.435
<c.magenta>我们想让他们喜欢用我们应用</c>
<c.magenta>是因为应用的速度很快</c>

00:01:08.735 --> 00:01:09.803
<c.magenta>速度像猎豹一样快</c>

00:01:10.370 --> 00:01:12.606
<c.magenta>可以节省他们的时间来做更多的事</c>

00:01:13.173 --> 00:01:16.143
<c.magenta>我们想确保用户的设备</c>
<c.magenta>一整天都有电</c>

00:01:16.810 --> 00:01:19.513
<c.magenta>这样他们一整天都能使用设备</c>

00:01:19.580 --> 00:01:21.448
<c.magenta>而你的应用一定不想成为那个</c>

00:01:21.515 --> 00:01:23.750
<c.magenta>在电量消耗表上排名第一的应用</c>

00:01:24.551 --> 00:01:27.721
<c.magenta>最后 我们想确保流畅的滚动</c>

00:01:28.021 --> 00:01:33.026
<c.magenta>在我们的应用中有迅速响应的UI</c>
<c.magenta>这样用户就会喜欢用它</c>

00:01:33.794 --> 00:01:35.162
<c.magenta>我们该如何实现呢？</c>

00:01:35.229 --> 00:01:37.130
<c.magenta>我们要用一种叫做分析的技术</c>

00:01:37.664 --> 00:01:40.567
<c.magenta>这种分析技术回答了</c>
<c.magenta>关于应用的两个问题</c>

00:01:40.801 --> 00:01:42.236
<c.magenta>做了多少工作？</c>

00:01:42.603 --> 00:01:44.304
<c.magenta>做了什么工作？</c>

00:01:44.838 --> 00:01:46.907
<c.magenta>若你尚未注意到标题</c>

00:01:46.974 --> 00:01:50.310
<c.magenta>我们要使用一种叫做</c>
<c.magenta>时间分析器的工具来实现</c>

00:01:50.611 --> 00:01:53.113
<c.magenta>时间分析器回答了另一个问题</c>

00:01:53.347 --> 00:01:55.415
<c.magenta>应用什么时候做那个工作？</c>

00:01:56.617 --> 00:01:59.586
<c.magenta>时间分析器是应用中</c>
<c.magenta>Instruments的一部分</c>

00:01:59.786 --> 00:02:02.523
<c.magenta>Instruments</c>
<c.magenta>是很多工具的集合</c>

00:01:59.786 --> 00:02:02.523
<c.magenta>Instruments</c>
<c.magenta>是很多工具的集合</c>

00:02:02.756 --> 00:02:05.759
<c.magenta>这些工具都是用来</c>
<c.magenta>测定应用的各个方面的</c>

00:02:06.660 --> 00:02:07.861
<c.magenta>怎么用呢？</c>

00:02:07.928 --> 00:02:09.029
<c.magenta>嗯 非常简单</c>

00:02:09.096 --> 00:02:12.533
<c.magenta>从Xcode产品菜单中</c>
<c.magenta>选择Profile</c>

00:02:13.333 --> 00:02:14.902
<c.magenta>让我们现在来操作一下</c>

00:02:16.270 --> 00:02:19.106
<c.magenta>好的 首先 我要给你们</c>
<c.magenta>演示一下我的应用</c>

00:02:19.473 --> 00:02:20.974
<c.magenta>让你们了解它的功能</c>

00:02:21.675 --> 00:02:24.945
<c.magenta>我的应用使用了照片框架来查找</c>

00:02:25.012 --> 00:02:27.714
<c.magenta>用户的图库</c>
<c.magenta>检测是否有图片副本</c>

00:02:28.515 --> 00:02:30.117
<c.magenta>我现在要操作一下</c>

00:02:30.484 --> 00:02:34.321
<c.magenta>如果我的测试数据中有很多副本</c>
<c.magenta>就得等一会儿了</c>

00:02:34.388 --> 00:02:36.256
<c.magenta>那么 它给出了一个很大的数</c>

00:02:36.423 --> 00:02:37.257
<c.magenta>好的 完成了</c>

00:02:37.925 --> 00:02:40.027
<c.magenta>现在 我要选择一些照片</c>

00:02:41.795 --> 00:02:44.298
<c.magenta>找一张好点儿的图 这张吧</c>

00:02:44.531 --> 00:02:47.134
<c.magenta>然后应用就会使用核心图像</c>
<c.magenta>面部识别功能</c>

00:02:47.201 --> 00:02:49.469
<c.magenta>这样我可以给人脸上添加</c>
<c.magenta>一双金鱼眼</c>

00:02:49.870 --> 00:02:52.873
<c.magenta>然后应用就使用</c>
<c.magenta>CoreMotion中的力学UI</c>

00:02:53.407 --> 00:02:56.577
<c.magenta>当你摇动设备时</c>
<c.magenta>金鱼眼会跟着一起晃动</c>

00:02:57.544 --> 00:03:00.113
<c.magenta>好的 这就是应用</c>

00:02:57.544 --> 00:03:00.113
<c.magenta>好的 这就是应用</c>

00:03:01.148 --> 00:03:03.350
<c.magenta>让我们继续分析它正在做什么</c>

00:03:04.117 --> 00:03:09.690
<c.magenta>那么从Xcode产品菜单中</c>
<c.magenta>正如我刚说过的 选择Profile</c>

00:03:10.524 --> 00:03:13.093
<c.magenta>这将生成应用的一个发布版本</c>

00:03:13.427 --> 00:03:17.297
<c.magenta>然后开启Instruments</c>
<c.magenta>开始测定</c>

00:03:17.865 --> 00:03:20.234
<c.magenta>生成分析用的一个</c>
<c.magenta>发布版本很重要</c>

00:03:20.300 --> 00:03:23.504
<c.magenta>因为你希望能从编译器中</c>
<c.magenta>获得最优结果</c>

00:03:24.905 --> 00:03:26.306
<c.magenta>这得等会儿</c>

00:03:26.573 --> 00:03:29.209
<c.magenta>它正在把应用复制到设备上</c>

00:03:33.981 --> 00:03:34.882
<c.magenta>好了</c>

00:03:35.816 --> 00:03:37.351
<c.magenta>现在 Instruments开启了</c>

00:03:37.551 --> 00:03:40.120
<c.magenta>它会显示模板选择器</c>

00:03:40.854 --> 00:03:45.492
<c.magenta>你可以了解Instruments</c>
<c.magenta>都提供了哪些工具</c>

00:03:45.926 --> 00:03:47.928
<c.magenta>今天 当然了</c>
<c.magenta>我们要用时间分析器</c>

00:03:48.095 --> 00:03:49.897
<c.magenta>我要点击选择按钮</c>

00:03:52.032 --> 00:03:54.501
<c.magenta>若你从未用过Instruments</c>

00:03:54.568 --> 00:03:56.803
<c.magenta>这个用户界面看起来</c>
<c.magenta>可能有点儿吓人</c>

00:03:57.137 --> 00:03:59.106
<c.magenta>但是很容易上手</c>

00:04:00.374 --> 00:04:04.444
<c.magenta>我要做的就是点击</c>
<c.magenta>左上角的这个记录按钮</c>

00:04:05.245 --> 00:04:08.215
<c.magenta>开启应用 并开始测定</c>

00:04:08.482 --> 00:04:10.017
<c.magenta>让我们实际操作一下</c>

00:04:10.884 --> 00:04:13.120
<c.magenta>好的 那么现在 应用开启了</c>

00:04:15.656 --> 00:04:17.491
<c.magenta>正在启动 好了</c>

00:04:17.891 --> 00:04:19.959
<c.magenta>对吧？我要做副本检测</c>

00:04:21.595 --> 00:04:22.462
<c.magenta>等一下</c>

00:04:25.065 --> 00:04:25.899
<c.magenta>好的</c>

00:04:26.233 --> 00:04:28.936
<c.magenta>然后 我要做副本检测了</c>

00:04:29.870 --> 00:04:31.438
<c.magenta>让我们看看是否开始获得数据了</c>

00:04:32.206 --> 00:04:33.273
<c.magenta>好了</c>

00:04:35.242 --> 00:04:36.243
<c.magenta>好的 完成了</c>

00:04:36.844 --> 00:04:38.579
<c.magenta>现在 我要选择照片</c>

00:04:40.747 --> 00:04:42.749
<c.magenta>然后我要挑出一张照片</c>

00:04:43.417 --> 00:04:44.918
<c.magenta>添加一双金鱼眼</c>

00:04:45.886 --> 00:04:47.287
<c.magenta>摇动一下</c>

00:04:48.055 --> 00:04:49.923
<c.magenta>现在不管那张图了</c>

00:04:51.258 --> 00:04:55.596
<c.magenta>然后停止记录</c>

00:04:55.863 --> 00:04:57.164
<c.magenta>点击停止按钮</c>

00:04:59.566 --> 00:05:01.068
<c.magenta>现在我们可以看到</c>

00:04:59.566 --> 00:05:01.068
<c.magenta>现在我们可以看到</c>

00:05:01.134 --> 00:05:06.406
<c.magenta>有一个应用正在做什么的高级概览</c>

00:05:06.807 --> 00:05:08.509
<c.magenta>时间分析器给出了两张图表</c>

00:05:08.575 --> 00:05:11.178
<c.magenta>Instruments</c>
<c.magenta>的顶部是时间线视图</c>

00:05:12.246 --> 00:05:14.715
<c.magenta>第一张图表是CPU的使用情况</c>

00:05:14.781 --> 00:05:16.450
<c.magenta>就是应用使用了多少CPU</c>

00:05:17.184 --> 00:05:19.887
<c.magenta>我可以把鼠标悬停在图表上</c>
<c.magenta>查看精确数值</c>

00:05:20.454 --> 00:05:25.993
<c.magenta>第二张图表</c>
<c.magenta>是应用所处的生命周期</c>

00:05:26.059 --> 00:05:28.061
<c.magenta>以及所延续的时间</c>

00:05:31.265 --> 00:05:35.736
<c.magenta>这让我有了一个很好的概念</c>
<c.magenta>关于应用做了多少工作</c>

00:05:36.003 --> 00:05:37.137
<c.magenta>以及是什么时候做的</c>

00:05:37.771 --> 00:05:40.340
<c.magenta>但是 我如何了解应用</c>
<c.magenta>正在做什么呢？</c>

00:05:40.874 --> 00:05:44.077
<c.magenta>要了解该信息 我们要往下看</c>
<c.magenta>Instruments的调用树视图</c>

00:05:44.244 --> 00:05:46.013
<c.magenta>就是这个详细视图中的一部分</c>

00:05:46.713 --> 00:05:51.151
<c.magenta>调用树视图呈现了所收集的</c>
<c.magenta>通过比重合计的</c>

00:05:51.218 --> 00:05:55.889
<c.magenta>调用栈样本</c>
<c.magenta>并显示在详细视图中</c>

00:05:56.523 --> 00:05:58.625
<c.magenta>这是什么意思呢？</c>

00:05:59.126 --> 00:06:03.797
<c.magenta>嗯 以图形显示比文字说明</c>
<c.magenta>更显而易见</c>

00:05:59.126 --> 00:06:03.797
<c.magenta>嗯 以图形显示比文字说明</c>
<c.magenta>更显而易见</c>

00:06:03.864 --> 00:06:05.599
<c.magenta>让我们来看一个图表</c>

00:06:06.500 --> 00:06:09.203
<c.magenta>在这里 时间向右运动</c>

00:06:09.269 --> 00:06:11.271
<c.magenta>这是我们那个非常简单的应用</c>

00:06:11.772 --> 00:06:14.308
<c.magenta>我们有一个主方法</c>
<c.magenta>这是调用method1</c>

00:06:14.641 --> 00:06:15.943
<c.magenta>这是调用method2</c>

00:06:16.643 --> 00:06:17.611
<c.magenta>在这个时间点</c>

00:06:17.678 --> 00:06:20.914
<c.magenta>时间分析器要从应用中</c>
<c.magenta>获得一个调用栈</c>

00:06:21.415 --> 00:06:22.449
<c.magenta>看起来是这样的</c>

00:06:23.016 --> 00:06:26.687
<c.magenta>就跟你在Xcode中的调试器中</c>
<c.magenta>看到的调用栈是一样的</c>

00:06:27.187 --> 00:06:30.858
<c.magenta>但在Instruments或</c>
<c.magenta>时间分析器中 后续的每一行都会缩进</c>

00:06:30.924 --> 00:06:33.994
<c.magenta>正因为如此 才能创建一个树结构</c>
<c.magenta>我们一会儿就会看到了</c>

00:06:34.962 --> 00:06:36.330
<c.magenta>时间在继续</c>

00:06:36.396 --> 00:06:38.465
<c.magenta>哦 然后它记录了那个调用栈</c>

00:06:38.765 --> 00:06:42.336
<c.magenta>然后记录了</c>
<c.magenta>在那个调用栈内</c>

00:06:42.402 --> 00:06:43.570
<c.magenta>出现每个方法或函数的次数</c>

00:06:44.671 --> 00:06:47.374
<c.magenta>时间继续</c>
<c.magenta>我们可以看到method2结束了</c>

00:06:47.441 --> 00:06:50.544
<c.magenta>method1调用结束了的method3</c>
<c.magenta>然后又调用了method2</c>

00:06:51.211 --> 00:06:53.480
<c.magenta>然后我们继续 已经过了一毫秒</c>

00:06:53.947 --> 00:06:56.049
<c.magenta>时间分析器要取第二个样本</c>

00:06:56.116 --> 00:06:58.785
<c.magenta>在这个示例中 第二个样本看起来</c>
<c.magenta>跟第一个样本一样</c>

00:06:58.852 --> 00:07:00.587
<c.magenta>我们要继续 更新表</c>

00:06:58.852 --> 00:07:00.587
<c.magenta>我们要继续 更新表</c>

00:07:00.854 --> 00:07:03.056
<c.magenta>只是为每个数增加了增量</c>

00:07:04.124 --> 00:07:06.226
<c.magenta>时间还在继续</c>

00:07:06.293 --> 00:07:08.896
<c.magenta>现在我们看到应用正在做不同的事</c>

00:07:09.429 --> 00:07:12.733
<c.magenta>主方法直接调用了method2</c>
<c.magenta>然后调用了method3</c>

00:07:13.367 --> 00:07:16.069
<c.magenta>时间分析器就在这儿</c>
<c.magenta>取了另一个样本</c>

00:07:16.136 --> 00:07:18.038
<c.magenta>现在 我们看到了一个</c>
<c.magenta>不同的调用栈</c>

00:07:18.672 --> 00:07:20.841
<c.magenta>在这个示例中 只有两个方法</c>

00:07:21.375 --> 00:07:24.811
<c.magenta>然后 我们更新表</c>
<c.magenta>这是一个树的分支</c>

00:07:24.878 --> 00:07:30.083
<c.magenta>现在我们了解了 主方法有时调用</c>
<c.magenta>method1 有时调用method2</c>

00:07:30.417 --> 00:07:33.353
<c.magenta>我们知道每种方法被调用了多少次</c>

00:07:34.655 --> 00:07:37.891
<c.magenta>那么 时间继续 我们收集更多的样本</c>

00:07:37.958 --> 00:07:40.260
<c.magenta>这些样本恰巧跟第一次的样本</c>
<c.magenta>完全一样</c>

00:07:40.561 --> 00:07:42.996
<c.magenta>我们要适当地更新表</c>

00:07:43.730 --> 00:07:47.301
<c.magenta>现在 让我们看看这个表说明了什么</c>

00:07:48.635 --> 00:07:53.006
<c.magenta>要注意一点 时间分析器实际上</c>
<c.magenta>并不是在测定持续的时间</c>

00:07:53.273 --> 00:07:55.342
<c.magenta>它并不是记录哪个方法</c>
<c.magenta>什么时候开始</c>

00:07:55.609 --> 00:07:58.312
<c.magenta>什么时候结束 然后做个减法</c>

00:07:58.612 --> 00:08:02.049
<c.magenta>而是把这些样本集合到一个</c>
<c.magenta>有用的汇总中</c>

00:07:58.612 --> 00:08:02.049
<c.magenta>而是把这些样本集合到一个</c>
<c.magenta>有用的汇总中</c>

00:08:02.382 --> 00:08:05.052
<c.magenta>当你在时间分析器中查看时间值时</c>

00:08:05.118 --> 00:08:07.187
<c.magenta>实际上不是一个持续时间的测定</c>

00:08:07.454 --> 00:08:12.125
<c.magenta>而是样本时间乘以样本个数</c>

00:08:12.192 --> 00:08:14.161
<c.magenta>在绝大部分情况下 是1毫秒</c>

00:08:14.828 --> 00:08:17.197
<c.magenta>这的确有一些副作用</c>

00:08:17.464 --> 00:08:20.067
<c.magenta>其中一个就是时间分析器</c>
<c.magenta>并不会区分</c>

00:08:20.133 --> 00:08:23.904
<c.magenta>被重复调用的</c>
<c.magenta>是连续运行的方法</c>

00:08:23.971 --> 00:08:25.439
<c.magenta>还是稍纵即逝的方法</c>

00:08:25.739 --> 00:08:28.442
<c.magenta>我们实际上可以看到在调用树中</c>

00:08:28.509 --> 00:08:32.111
<c.magenta>method1和method2</c>
<c.magenta>出现的样本个数相同</c>

00:08:32.179 --> 00:08:37.618
<c.magenta>从时间分析器的角度来说</c>
<c.magenta>它们做了同样多的工作</c>

00:08:38.118 --> 00:08:41.955
<c.magenta>但我们知道 实际上method1</c>
<c.magenta>被调用了两次 运行时间很长</c>

00:08:42.022 --> 00:08:45.125
<c.magenta>而method2被调用了四次</c>
<c.magenta>运行时间很短</c>

00:08:46.226 --> 00:08:49.630
<c.magenta>时间分析器还集中分析</c>
<c.magenta>CPU的使用情况 对吧？</c>

00:08:49.696 --> 00:08:53.567
<c.magenta>它回答了这个问题</c>
<c.magenta>应用正在做什么工作？</c>

00:08:53.867 --> 00:08:57.471
<c.magenta>另一个结果是</c>
<c.magenta>它不一定会捕捉一切</c>

00:08:57.871 --> 00:09:00.240
<c.magenta>事实上 表中遗失了什么？</c>

00:08:57.871 --> 00:09:00.240
<c.magenta>事实上 表中遗失了什么？</c>

00:09:01.942 --> 00:09:03.677
<c.magenta>没有method3 对吗？</c>

00:09:03.977 --> 00:09:05.812
<c.magenta>如果你有执行起来非常快的函数</c>

00:09:05.879 --> 00:09:08.415
<c.magenta>或执行起来很快而且非常</c>
<c.magenta>频繁地调用的方法</c>

00:09:08.782 --> 00:09:10.317
<c.magenta>这些方法将不会</c>
<c.magenta>出现在调用树中</c>

00:09:10.918 --> 00:09:12.619
<c.magenta>实际上没问题</c>
<c.magenta>这就是我们想要的</c>

00:09:12.686 --> 00:09:14.488
<c.magenta>因为那并不会影响</c>

00:09:14.555 --> 00:09:16.857
<c.magenta>所产生的工作量</c>

00:09:18.192 --> 00:09:20.260
<c.magenta>那么现在 我们对调用树</c>
<c.magenta>有了更好的理解</c>

00:09:20.360 --> 00:09:23.430
<c.magenta>让我们看看如何通过它使应用的</c>
<c.magenta>速度更快 工作量更少</c>

00:09:31.572 --> 00:09:34.875
<c.magenta>好的 让我们回去看时间线</c>

00:09:36.410 --> 00:09:40.714
<c.magenta>我想看一下第一大块</c>
<c.magenta>CPU的使用情况</c>

00:09:40.781 --> 00:09:45.385
<c.magenta>可以看到 在大量时间内</c>
<c.magenta>CPU的占用是100%</c>

00:09:46.753 --> 00:09:49.489
<c.magenta>那么 我想确切了解那时</c>
<c.magenta>应用正在做什么</c>

00:09:49.556 --> 00:09:52.159
<c.magenta>我恰巧知道</c>
<c.magenta>那时我正在做副本检测</c>

00:09:52.459 --> 00:09:55.896
<c.magenta>预计那个工作量会很大</c>
<c.magenta>所以我一点儿都不吃惊</c>

00:09:56.196 --> 00:09:57.831
<c.magenta>但无论在哪儿</c>
<c.magenta>你占用了大量CPU资源</c>

00:09:57.898 --> 00:10:00.567
<c.magenta>通常总是能让它更快一些</c>

00:09:57.898 --> 00:10:00.567
<c.magenta>通常总是能让它更快一些</c>

00:10:01.668 --> 00:10:04.104
<c.magenta>所以 为了更好地了解</c>
<c.magenta>这里正在发生什么</c>

00:10:04.371 --> 00:10:10.511
<c.magenta>我要用触控板 放大 然后松开</c>

00:10:10.911 --> 00:10:15.916
<c.magenta>我可以更好地了解在这个时间段</c>
<c.magenta>到底发生了什么</c>

00:10:16.650 --> 00:10:21.021
<c.magenta>然后我要点击并拖拽时间线视图</c>

00:10:22.089 --> 00:10:23.957
<c.magenta>这样可以应用一个筛选器</c>

00:10:24.024 --> 00:10:27.361
<c.magenta>现在调用树只能显示在那个</c>

00:10:27.427 --> 00:10:30.130
<c.magenta>时间框架内所收集样本的数据</c>

00:10:30.330 --> 00:10:32.065
<c.magenta>如果你注意看 你会看到</c>

00:10:32.132 --> 00:10:34.868
<c.magenta>调用树实际上显示的数据变少了</c>

00:10:34.935 --> 00:10:37.371
<c.magenta>只显示了这个时间段的数据</c>

00:10:38.505 --> 00:10:40.841
<c.magenta>现在 让我们更详细地</c>
<c.magenta>看一下调用树</c>

00:10:42.342 --> 00:10:43.677
<c.magenta>你将在这儿看到几个栏</c>

00:10:43.744 --> 00:10:46.580
<c.magenta>有比重和自比重 然后是标识名</c>

00:10:47.414 --> 00:10:50.784
<c.magenta>比重代表调用树出现的</c>

00:10:51.084 --> 00:10:53.854
<c.magenta>指定部分的样本百分比</c>

00:10:54.221 --> 00:10:56.390
<c.magenta>你将看到比重旁边还有个时间</c>

00:10:56.456 --> 00:10:58.792
<c.magenta>正如我之前讲过的</c>
<c.magenta>那不是持续时间</c>

00:10:59.059 --> 00:11:03.497
<c.magenta>而是样本时间乘以样本个数</c>

00:10:59.059 --> 00:11:03.497
<c.magenta>而是样本时间乘以样本个数</c>

00:11:04.131 --> 00:11:05.866
<c.magenta>然后还有自比重</c>

00:11:06.300 --> 00:11:10.904
<c.magenta>实际上是在那个方法内</c>
<c.magenta>所花费的时间</c>

00:11:10.971 --> 00:11:12.906
<c.magenta>而非在它调用的其他方法内</c>
<c.magenta>所花费的时间</c>

00:11:13.273 --> 00:11:15.475
<c.magenta>你在这里可以看到 这些是0</c>

00:11:15.542 --> 00:11:18.679
<c.magenta>如果你关闭这个 还是0</c>

00:11:18.779 --> 00:11:19.780
<c.magenta>仍然是0</c>

00:11:20.113 --> 00:11:24.651
<c.magenta>这就告诉我们 你知道的</c>
<c.magenta>在样本中主方法的比重是99%</c>

00:11:25.752 --> 00:11:29.289
<c.magenta>但其实这些全部也是在</c>
<c.magenta>UIApplication主方法中</c>

00:11:29.590 --> 00:11:33.227
<c.magenta>无论是什么方法都要调用</c>
<c.magenta>UIApplication的主方法</c>

00:11:33.493 --> 00:11:35.329
<c.magenta>我们不会一个接一个地显示这些</c>

00:11:35.395 --> 00:11:37.965
<c.magenta>我要使用Instruments 8</c>
<c.magenta>中的新功能</c>

00:11:38.632 --> 00:11:41.702
<c.magenta>我按下选项键</c>
<c.magenta>并点击显示三角按钮</c>

00:11:41.969 --> 00:11:44.104
<c.magenta>这样能得到一个更好的显示</c>

00:11:44.238 --> 00:11:46.206
<c.magenta>这将会关闭调用树</c>

00:11:46.273 --> 00:11:48.141
<c.magenta>除非调用树中有真正令人</c>
<c.magenta>关注的数据</c>

00:11:49.443 --> 00:11:51.578
<c.magenta>如果我们继续往下滚动</c>

00:11:51.645 --> 00:11:54.014
<c.magenta>我们可以看到</c>
<c.magenta>我们实际上有一些方法</c>

00:11:54.281 --> 00:11:55.916
<c.magenta>有自比重</c>

00:11:56.216 --> 00:11:58.585
<c.magenta>其实若我查看这个</c>
<c.magenta>特定的release调用</c>

00:11:58.652 --> 00:12:03.757
<c.magenta>我可以看到 它的比重是117毫秒</c>
<c.magenta>跟它的自比重一样</c>

00:11:58.652 --> 00:12:03.757
<c.magenta>我可以看到 它的比重是117毫秒</c>
<c.magenta>跟它的自比重一样</c>

00:12:04.024 --> 00:12:05.759
<c.magenta>那么它所有的时间都花在它自己身上了</c>

00:12:05.826 --> 00:12:09.162
<c.magenta>没有调用任何后续的函数或方法</c>

00:12:09.863 --> 00:12:11.265
<c.magenta>其实 你知道的 通过查看这些</c>

00:12:11.331 --> 00:12:14.601
<c.magenta>我看到这里调用了很多</c>
<c.magenta>Objective-C执行时间</c>

00:12:14.935 --> 00:12:18.372
<c.magenta>实际上它们的自重都很大</c>

00:12:19.673 --> 00:12:23.844
<c.magenta>这些运行时间方法已经被无限</c>
<c.magenta>高度优化 运行起来非常快</c>

00:12:24.211 --> 00:12:27.581
<c.magenta>通常是时间分析器不会</c>
<c.magenta>捕捉的那类东西</c>

00:12:27.648 --> 00:12:29.016
<c.magenta>因为运行速度太快了</c>

00:12:29.950 --> 00:12:34.621
<c.magenta>但是它们已经被显示出来了</c>
<c.magenta>于是我知道通常它们会被频繁调用</c>

00:12:35.055 --> 00:12:36.523
<c.magenta>所以才在样本中出现</c>

00:12:36.823 --> 00:12:40.694
<c.magenta>这通常是循环很多</c>
<c.magenta>Objective-C对象的情况</c>

00:12:40.761 --> 00:12:42.462
<c.magenta>你将看到这会在轨迹中显示出来</c>

00:12:42.963 --> 00:12:46.767
<c.magenta>调用树体现的第二点是</c>
<c.magenta>看右边</c>

00:12:47.067 --> 00:12:52.105
<c.magenta>我们可以看到调用树的哪部分</c>
<c.magenta>来自哪个库</c>

00:12:52.172 --> 00:12:53.273
<c.magenta>特定的方法调用</c>

00:12:53.340 --> 00:12:55.843
<c.magenta>并且在这里 我们能看到这是</c>
<c.magenta>随着照片框架出现的</c>

00:12:56.109 --> 00:12:57.444
<c.magenta>实际上是按照层级排列的</c>

00:12:58.011 --> 00:12:59.346
<c.magenta>滚动到右边</c>

00:12:59.646 --> 00:13:03.450
<c.magenta>我们可以看到</c>
<c.magenta>这里有一行来自应用的代码</c>

00:12:59.646 --> 00:13:03.450
<c.magenta>我们可以看到</c>
<c.magenta>这里有一行来自应用的代码</c>

00:13:03.517 --> 00:13:05.819
<c.magenta>这行代码导致了工作量的产生</c>

00:13:08.021 --> 00:13:11.592
<c.magenta>你知道的 这行的比重是0</c>

00:13:11.658 --> 00:13:13.460
<c.magenta>它自己没做任何工作</c>

00:13:13.527 --> 00:13:15.696
<c.magenta>但是它却触发了所有工作</c>

00:13:16.196 --> 00:13:19.700
<c.magenta>我不能再加快Objective-C</c>
<c.magenta>发布调用的速度了</c>

00:13:19.766 --> 00:13:23.937
<c.magenta>但我能看到是否可以少调用几次</c>

00:13:24.505 --> 00:13:26.240
<c.magenta>所以 我要双击这行</c>

00:13:26.507 --> 00:13:28.041
<c.magenta>把我带入代码中</c>

00:13:29.109 --> 00:13:33.180
<c.magenta>Instruments给每行</c>
<c.magenta>添加了一个样本个数的注释</c>

00:13:33.247 --> 00:13:36.416
<c.magenta>那么 看这个方法</c>
<c.magenta>我能看到大部分时间</c>

00:13:36.483 --> 00:13:38.151
<c.magenta>都花在红色背景行那儿</c>

00:13:38.986 --> 00:13:41.955
<c.magenta>但是如果我再仔细看一下</c>
<c.magenta>我实际上能看到其他东西</c>

00:13:42.022 --> 00:13:43.657
<c.magenta>我嵌套了四个循环</c>

00:13:44.157 --> 00:13:50.831
<c.magenta>事实上 每个循环重复整个</c>
<c.magenta>照片采集的过程</c>

00:13:51.431 --> 00:13:53.500
<c.magenta>这是很典型的一个</c>

00:13:53.567 --> 00:13:55.502
<c.magenta>叫做N次方行为的例子</c>

00:13:55.936 --> 00:13:58.572
<c.magenta>如果我向这行代码中代入</c>
<c.magenta>更多数据</c>

00:13:58.639 --> 00:14:01.341
<c.magenta>速度会变慢 越来越慢</c>

00:13:58.639 --> 00:14:01.341
<c.magenta>速度会变慢 越来越慢</c>

00:14:01.408 --> 00:14:05.712
<c.magenta>因为我知道会运行大量数据</c>
<c.magenta>这很不好</c>

00:14:06.346 --> 00:14:08.215
<c.magenta>所以我想改变这种情况</c>

00:14:08.649 --> 00:14:09.850
<c.magenta>我要进入Xcode</c>

00:14:10.450 --> 00:14:11.585
<c.magenta>这是我的代码</c>

00:14:12.619 --> 00:14:17.891
<c.magenta>避免嵌套四个循环的典型方法是</c>
<c.magenta>使用基于集合的实现</c>

00:14:18.358 --> 00:14:21.195
<c.magenta>我不再赘述了 我要继续</c>

00:14:22.362 --> 00:14:28.702
<c.magenta>创建一个新算法</c>
<c.magenta>用来执行副本检测 使用...</c>

00:14:33.440 --> 00:14:35.709
<c.magenta>使用一个计数集合和另一个</c>
<c.magenta>查找副本的</c>

00:14:40.514 --> 00:14:41.748
<c.magenta>集合</c>

00:14:42.416 --> 00:14:45.319
<c.magenta>现在 让我们看看</c>
<c.magenta>我实际上做了点儿改变</c>

00:14:45.452 --> 00:14:47.287
<c.magenta>再一次 我要进入产品菜单</c>

00:14:47.988 --> 00:14:49.456
<c.magenta>我要选择分析</c>

00:14:50.190 --> 00:14:54.061
<c.magenta>它会重新创建我的应用</c>
<c.magenta>并把它安装在设备上</c>

00:14:55.729 --> 00:14:57.831
<c.magenta>因为Instruments已运行了</c>

00:14:57.998 --> 00:15:00.434
<c.magenta>它会立即开始记录</c>

00:14:57.998 --> 00:15:00.434
<c.magenta>它会立即开始记录</c>

00:15:01.268 --> 00:15:04.905
<c.magenta>那么 当它把应用复制到设备上时</c>
<c.magenta>让我们看一下 已经开始分析了</c>

00:15:07.941 --> 00:15:09.009
<c.magenta>这是Instruments</c>

00:15:10.711 --> 00:15:12.346
<c.magenta>我的应用已经开启了</c>

00:15:14.581 --> 00:15:17.251
<c.magenta>好的 它开始记录了 我要缩小</c>

00:15:19.219 --> 00:15:21.588
<c.magenta>好的 我要缩小</c>
<c.magenta>这样我们就能看到数据了</c>

00:15:23.156 --> 00:15:25.392
<c.magenta>我要执行副本检测</c>

00:15:27.528 --> 00:15:29.530
<c.magenta>副本 所有照片</c>

00:15:30.998 --> 00:15:32.399
<c.magenta>我可以看到数据进来了</c>

00:15:32.599 --> 00:15:34.668
<c.magenta>实际上是以分钟为单位记录的</c>
<c.magenta>我还以为是秒</c>

00:15:35.269 --> 00:15:38.705
<c.magenta>好的 那么副本检测</c>
<c.magenta>实际上速度更快了</c>

00:15:39.339 --> 00:15:44.545
<c.magenta>事实上 我们再也不会看到贯穿</c>
<c.magenta>时间线的那个长条了</c>

00:15:44.611 --> 00:15:45.712
<c.magenta>这是个不错的变化</c>

00:15:46.079 --> 00:15:49.116
<c.magenta>我想继续</c>
<c.magenta>重新测定应用剩余的部分</c>

00:15:49.183 --> 00:15:50.551
<c.magenta>选择一些照片</c>

00:15:51.185 --> 00:15:52.886
<c.magenta>添加一双金鱼眼</c>

00:15:53.420 --> 00:15:54.621
<c.magenta>摇动一下</c>

00:15:55.189 --> 00:15:56.790
<c.magenta>然后就不用管那张照片了</c>

00:15:56.857 --> 00:16:00.827
<c.magenta>现在应用是静态的</c>
<c.magenta>不应该做任何工作</c>

00:15:56.857 --> 00:16:00.827
<c.magenta>现在应用是静态的</c>
<c.magenta>不应该做任何工作</c>

00:16:01.295 --> 00:16:05.132
<c.magenta>但是让我们看看</c>
<c.magenta>时间分析器怎么说</c>

00:16:05.232 --> 00:16:06.533
<c.magenta>停止记录</c>

00:16:09.703 --> 00:16:11.205
<c.magenta>加载一分钟才有数据</c>

00:16:11.305 --> 00:16:12.139
<c.magenta>哇哦</c>

00:16:14.174 --> 00:16:19.580
<c.magenta>好的 我可以看到在调用的末端</c>

00:16:19.646 --> 00:16:21.415
<c.magenta>占用了一些CPU资源</c>

00:16:21.982 --> 00:16:24.651
<c.magenta>并不多 但我希望是0</c>

00:16:25.052 --> 00:16:26.954
<c.magenta>所以我要继续 看看它做了什么</c>

00:16:27.721 --> 00:16:30.591
<c.magenta>我再次通过触摸板进行放大</c>

00:16:32.192 --> 00:16:36.129
<c.magenta>拖拽并选择</c>
<c.magenta>看看这里发生了什么</c>

00:16:37.264 --> 00:16:43.003
<c.magenta>然后继续</c>
<c.magenta>点开查看正在发生什么</c>

00:16:43.470 --> 00:16:45.539
<c.magenta>查看调用树</c>

00:16:45.806 --> 00:16:48.775
<c.magenta>这次我看到在CoreMotion中</c>
<c.magenta>有大量的调用 对吧？</c>

00:16:48.842 --> 00:16:50.344
<c.magenta>且我知道我的应用正在此做什么</c>

00:16:50.410 --> 00:16:54.381
<c.magenta>它正在使用CoreMotion进行</c>
<c.magenta>检测并移动眼睛</c>

00:16:54.982 --> 00:16:57.518
<c.magenta>但如果查看上边的调用树</c>

00:16:57.584 --> 00:17:01.421
<c.magenta>实际上这个调用树中没有</c>
<c.magenta>我的任何代码</c>

00:16:57.584 --> 00:17:01.421
<c.magenta>实际上这个调用树中没有</c>
<c.magenta>我的任何代码</c>

00:17:01.989 --> 00:17:04.825
<c.magenta>我并没有执行任何可以直接引起</c>
<c.magenta>使用CPU的操作</c>

00:17:05.092 --> 00:17:08.328
<c.magenta>但我应用中的某些东西使</c>
<c.magenta>CoreMotion做了不该做的</c>

00:17:08.729 --> 00:17:10.097
<c.magenta>关于应用 我知道的是</c>

00:17:10.163 --> 00:17:14.034
<c.magenta>我发现</c>
<c.magenta>当不看屏幕的时候</c>

00:17:14.101 --> 00:17:16.002
<c.magenta>我不能关闭CoreMotion监控</c>

00:17:16.603 --> 00:17:18.438
<c.magenta>让我们继续改一下</c>

00:17:19.406 --> 00:17:20.540
<c.magenta>返回Xcode</c>

00:17:21.942 --> 00:17:26.847
<c.magenta>实际上我已经写好了所有方法</c>

00:17:27.047 --> 00:17:30.184
<c.magenta>只需要调用即可</c>
<c.magenta>让我们把它们添加到这里来</c>

00:17:32.186 --> 00:17:35.055
<c.magenta>然后我们停止观察这儿</c>

00:17:39.626 --> 00:17:41.195
<c.magenta>好的 现在让我们测定这个</c>

00:17:41.261 --> 00:17:44.464
<c.magenta>并确保会发生我们所期待的改变</c>

00:17:45.399 --> 00:17:48.769
<c.magenta>再次</c>
<c.magenta>Instruments会重建应用</c>

00:17:49.036 --> 00:17:50.103
<c.magenta>并把它放在设备上</c>

00:17:50.971 --> 00:17:55.042
<c.magenta>因为Instruments已经开启</c>
<c.magenta>并正在运行 它会再次开始记录</c>

00:17:55.475 --> 00:17:58.312
<c.magenta>这一次 我要提前放大</c>

00:17:58.712 --> 00:18:02.616
<c.magenta>我点击筛选器外面 移除它</c>

00:17:58.712 --> 00:18:02.616
<c.magenta>我点击筛选器外面 移除它</c>

00:18:04.518 --> 00:18:07.120
<c.magenta>好的 一旦应用在设备上安装</c>

00:18:08.322 --> 00:18:10.390
<c.magenta>Instruments就会再次</c>
<c.magenta>开启对它的记录</c>

00:18:18.065 --> 00:18:19.399
<c.magenta>好的 就是这样</c>

00:18:23.704 --> 00:18:29.109
<c.magenta>好的 这一次 我要继续</c>
<c.magenta>只添加照片</c>

00:18:33.113 --> 00:18:35.048
<c.magenta>然后我要滚动到一张照片那儿</c>

00:18:35.816 --> 00:18:36.783
<c.magenta>选择它</c>

00:18:37.084 --> 00:18:38.118
<c.magenta>添加眼睛</c>

00:18:39.553 --> 00:18:40.821
<c.magenta>摇动一下</c>

00:18:40.888 --> 00:18:42.456
<c.magenta>让我们再稍微放大点儿</c>

00:18:45.192 --> 00:18:48.328
<c.magenta>选择一张新照片</c>
<c.magenta>这样屏幕上就没有眼睛了</c>

00:18:49.196 --> 00:18:51.498
<c.magenta>然后停止记录</c>

00:18:51.565 --> 00:18:53.400
<c.magenta>看看是否发生了我们</c>
<c.magenta>所期待的变化</c>

00:18:54.034 --> 00:18:59.306
<c.magenta>一旦Instruments</c>
<c.magenta>完成数据处理 我就放大这个末端部分</c>

00:18:59.373 --> 00:19:03.177
<c.magenta>我可以看到在末端</c>
<c.magenta>CPU的占用率为0</c>

00:18:59.373 --> 00:19:03.177
<c.magenta>我可以看到在末端</c>
<c.magenta>CPU的占用率为0</c>

00:19:03.577 --> 00:19:07.281
<c.magenta>所以应用不再做它不需要做</c>
<c.magenta>的工作了</c>

00:19:08.782 --> 00:19:10.918
<c.magenta>那么 让我们回顾一下</c>
<c.magenta>我们做了什么</c>

00:19:11.885 --> 00:19:15.355
<c.magenta>第一件事是用轨迹面板计算</c>

00:19:15.422 --> 00:19:17.958
<c.magenta>应用做了多少工作</c>
<c.magenta>以及什么时候做的</c>

00:19:18.025 --> 00:19:21.361
<c.magenta>这样就很容易找到想要关注的区域</c>

00:19:21.762 --> 00:19:25.132
<c.magenta>并且触控板很容易操作</c>
<c.magenta>轨迹面板或时间线</c>

00:19:25.199 --> 00:19:27.067
<c.magenta>但用鼠标控制也不错</c>

00:19:27.134 --> 00:19:30.537
<c.magenta>使用option键-拖拽</c>
<c.magenta>和control键-拖拽放大和缩小</c>

00:19:31.705 --> 00:19:35.642
<c.magenta>我们在轨迹视图上找到了一个</c>
<c.magenta>占用许多CPU资源的区域</c>

00:19:35.709 --> 00:19:37.177
<c.magenta>我们想让它速度更快</c>

00:19:37.344 --> 00:19:42.149
<c.magenta>所以我们继续 放大</c>
<c.magenta>对那个区域进行筛选</c>

00:19:43.250 --> 00:19:45.452
<c.magenta>我们查看了调用树 我们发现</c>

00:19:45.519 --> 00:19:48.488
<c.magenta>产生工作量的地方</c>
<c.magenta>是应用中的那个部分</c>

00:19:49.323 --> 00:19:53.794
<c.magenta>然后我们往回看调用树</c>
<c.magenta>直到看到我们的代码</c>

00:19:53.861 --> 00:19:57.097
<c.magenta>应用中的哪个部分产生了</c>
<c.magenta>这样的工作量</c>

00:19:57.397 --> 00:19:59.433
<c.magenta>即使不是应用自己产生的？</c>

00:20:00.734 --> 00:20:03.504
<c.magenta>我们看一下代码 考虑一下</c>

00:20:03.570 --> 00:20:05.606
<c.magenta>挠挠头 吃一个三明治</c>

00:20:05.672 --> 00:20:07.441
<c.magenta>我们发现了可使它速度更快的方式</c>

00:20:07.941 --> 00:20:10.677
<c.magenta>所以我们实现了那些变更</c>

00:20:10.744 --> 00:20:13.914
<c.magenta>并证实了实际上会让它的速度变得更快</c>

00:20:13.981 --> 00:20:16.083
<c.magenta>在这个例子中</c>
<c.magenta>这是个意义重大的改进</c>

00:20:16.149 --> 00:20:19.253
<c.magenta>结果是我们节省了用户的时间</c>

00:20:19.419 --> 00:20:21.355
<c.magenta>当用户使用我的应用</c>
<c.magenta>来查找副本时</c>

00:20:21.421 --> 00:20:23.524
<c.magenta>他们再也不用看那个</c>
<c.magenta>旋转的加载图标了</c>

00:20:24.324 --> 00:20:25.792
<c.magenta>会很快地完成</c>

00:20:27.160 --> 00:20:29.329
<c.magenta>关于减少工作量</c>
<c.magenta>我们能做什么呢？</c>

00:20:29.696 --> 00:20:32.833
<c.magenta>我们再关注一下轨道视图</c>
<c.magenta>上的一个区域</c>

00:20:33.901 --> 00:20:35.936
<c.magenta>这一次并没有占用</c>
<c.magenta>很多CPU资源</c>

00:20:36.003 --> 00:20:38.639
<c.magenta>而CPU的占用量</c>
<c.magenta>出人意料</c>

00:20:39.139 --> 00:20:41.308
<c.magenta>我们放大 加上一个筛选器</c>

00:20:41.909 --> 00:20:43.577
<c.magenta>我们看一下调用树</c>

00:20:43.644 --> 00:20:47.714
<c.magenta>这一次 我们再看一下框架</c>
<c.magenta>我们看到的是CoreMotion</c>

00:20:47.781 --> 00:20:49.917
<c.magenta>但没有诱发我们的代码</c>

00:20:50.551 --> 00:20:53.020
<c.magenta>所以这次 我们得用另一种方式</c>
<c.magenta>来思考我们的应用</c>

00:20:53.086 --> 00:20:56.123
<c.magenta>是应用的哪个部分</c>
<c.magenta>导致了这个工作量？</c>

00:20:56.857 --> 00:21:01.662
<c.magenta>我们又一次 也许休息一小会儿</c>
<c.magenta>再吃个三明治</c>

00:20:56.857 --> 00:21:01.662
<c.magenta>我们又一次 也许休息一小会儿</c>
<c.magenta>再吃个三明治</c>

00:21:01.895 --> 00:21:04.631
<c.magenta>想想如何使应用停止产生</c>
<c.magenta>那个工作量</c>

00:21:05.199 --> 00:21:06.700
<c.magenta>让它不再出现</c>

00:21:07.334 --> 00:21:09.436
<c.magenta>我们继续 重新分析应用</c>

00:21:09.503 --> 00:21:12.906
<c.magenta>验证了我们所期望的修改</c>

00:21:13.473 --> 00:21:17.778
<c.magenta>事实上 结果是</c>
<c.magenta>我们显著提高了</c>

00:21:18.579 --> 00:21:21.114
<c.magenta>应用运行时的电池续航能力</c>

00:21:21.181 --> 00:21:24.284
<c.magenta>无论任何时候 CPU都可以归0</c>
<c.magenta>并进入休眠</c>

00:21:24.585 --> 00:21:26.520
<c.magenta>这就意味着有效地节省了用电量</c>

00:21:26.753 --> 00:21:31.825
<c.magenta>即使我们的CPU占用量很低</c>
<c.magenta>仍然会有电量消耗</c>

00:21:32.759 --> 00:21:35.929
<c.magenta>那么现在 我们变快了</c>
<c.magenta>工作量变少了</c>

00:21:36.263 --> 00:21:38.732
<c.magenta>让我们使应用的响应</c>
<c.magenta>更积极一些吧</c>

00:21:40.934 --> 00:21:43.403
<c.magenta>应用的工作方式</c>

00:21:43.470 --> 00:21:46.340
<c.magenta>是主线程完成所有</c>
<c.magenta>用户界面的工作</c>

00:21:46.406 --> 00:21:51.178
<c.magenta>承担了响应用户输入并更新</c>
<c.magenta>视图的任务</c>

00:21:51.545 --> 00:21:56.116
<c.magenta>无论如何处理用户输入</c>
<c.magenta>都有一个主线程</c>

00:21:56.183 --> 00:22:00.420
<c.magenta>主线程有一个运行循环</c>
<c.magenta>只是监听一个队列</c>

00:21:56.183 --> 00:22:00.420
<c.magenta>主线程有一个运行循环</c>
<c.magenta>只是监听一个队列</c>

00:22:00.487 --> 00:22:01.855
<c.magenta>叫做事件队列</c>

00:22:01.922 --> 00:22:04.157
<c.magenta>并等待事件在事件队列中出现</c>

00:22:04.758 --> 00:22:10.764
<c.magenta>事件出现时 它把事件发送到</c>
<c.magenta>UIApplication或NS应用实例</c>

00:22:11.164 --> 00:22:15.169
<c.magenta>然后把事件传递到</c>
<c.magenta>应用的响应链中</c>

00:22:15.802 --> 00:22:18.739
<c.magenta>如果应用想响应那个事件</c>

00:22:19.039 --> 00:22:21.208
<c.magenta>那么它会继续并诱发你的代码</c>

00:22:21.775 --> 00:22:25.012
<c.magenta>然后你可以在这里的调用栈中</c>
<c.magenta>看到这个</c>

00:22:25.345 --> 00:22:27.281
<c.magenta>这是我应用中的调用栈</c>

00:22:27.781 --> 00:22:30.050
<c.magenta>我们可以看到 有主线程</c>

00:22:30.817 --> 00:22:35.389
<c.magenta>所有应用的主线程都是</c>
<c.magenta>以调用主函数开始的</c>

00:22:35.923 --> 00:22:38.759
<c.magenta>在这里 我不清楚这些函数</c>
<c.magenta>具体有什么作用</c>

00:22:38.825 --> 00:22:41.161
<c.magenta>但是显而易见</c>
<c.magenta>都跟运行循环相关</c>

00:22:41.995 --> 00:22:44.631
<c.magenta>我看到有函数</c>
<c.magenta>handleEventQueue</c>

00:22:44.698 --> 00:22:47.968
<c.magenta>很显然 这个函数是从事件队列中</c>
<c.magenta>把一个事件取出来 并进行处理</c>

00:22:48.468 --> 00:22:51.572
<c.magenta>我可以看到它把事件</c>
<c.magenta>传给了UIApplication</c>

00:22:51.638 --> 00:22:55.008
<c.magenta>然后传到响应链</c>
<c.magenta>最后传给了我的代码</c>

00:22:55.242 --> 00:22:58.512
<c.magenta>在这个例子中</c>
<c.magenta>这是一个按钮的IB动作</c>

00:22:59.479 --> 00:23:01.215
<c.magenta>然后我的代码就执行了操作</c>

00:22:59.479 --> 00:23:01.215
<c.magenta>然后我的代码就执行了操作</c>

00:23:02.249 --> 00:23:05.185
<c.magenta>那么 这对于保持应用积极响应</c>
<c.magenta>来说有什么意义呢？</c>

00:23:05.786 --> 00:23:10.224
<c.magenta>嗯 忙时 主线程不能处理队列</c>

00:23:10.624 --> 00:23:13.627
<c.magenta>因为它会开始备份</c>
<c.magenta>备份你的用户事件</c>

00:23:14.094 --> 00:23:17.664
<c.magenta>然后结果是 变得磕磕绊绊</c>
<c.magenta>不顺畅</c>

00:23:18.031 --> 00:23:21.301
<c.magenta>最糟糕的情况是</c>
<c.magenta>你的应用变得完全没有响应</c>

00:23:21.635 --> 00:23:24.571
<c.magenta>此时用户会关闭应用</c>
<c.magenta>也许会从设备上删除应用</c>

00:23:25.506 --> 00:23:29.109
<c.magenta>因此 释放主线程很重要</c>

00:23:29.877 --> 00:23:35.716
<c.magenta>这样就能很快地响应用户输入</c>

00:23:36.984 --> 00:23:38.519
<c.magenta>现在 有了这种方案</c>

00:23:38.585 --> 00:23:42.155
<c.magenta>让我们看看可以对应用做出哪些改进</c>
<c.magenta>使它能更积极地做出响应</c>

00:23:43.624 --> 00:23:46.960
<c.magenta>好了 这次我要缩小轨迹视图</c>

00:23:47.528 --> 00:23:50.898
<c.magenta>现在我想要关注的是这个</c>
<c.magenta>CPU占用比较多的区域</c>

00:23:51.164 --> 00:23:53.934
<c.magenta>在这里 我看到CPU的占用率</c>
<c.magenta>远远超过100%</c>

00:23:54.168 --> 00:23:56.870
<c.magenta>也许可以对这里进行优化</c>

00:23:57.404 --> 00:24:00.908
<c.magenta>而我恰巧知道 这是我给图片</c>
<c.magenta>添加眼睛的时候</c>

00:23:57.404 --> 00:24:00.908
<c.magenta>而我恰巧知道 这是我给图片</c>
<c.magenta>添加眼睛的时候</c>

00:24:01.441 --> 00:24:04.611
<c.magenta>那么我再一次使用触控板</c>
<c.magenta>进行放大</c>

00:24:05.412 --> 00:24:08.315
<c.magenta>点击并拖拽 加上一个过滤器</c>

00:24:09.483 --> 00:24:11.251
<c.magenta>现在看一下调用树</c>

00:24:12.519 --> 00:24:15.989
<c.magenta>这次 我想特别关注</c>
<c.magenta>主线程做了什么</c>

00:24:16.456 --> 00:24:19.259
<c.magenta>我可以看到 实际上主线程</c>

00:24:19.326 --> 00:24:22.663
<c.magenta>在样本中的出现频率为</c>
<c.magenta>63% 64%</c>

00:24:23.931 --> 00:24:28.101
<c.magenta>因此我就明白了 在这个时间段</c>
<c.magenta>正在进行一些工作</c>

00:24:28.502 --> 00:24:30.771
<c.magenta>但我想确切地知道做了多少工作</c>

00:24:31.572 --> 00:24:35.709
<c.magenta>为此 我要继续 看右上角</c>

00:24:35.976 --> 00:24:38.779
<c.magenta>我们可以使用不同的</c>
<c.magenta>策略和Instruments</c>

00:24:38.846 --> 00:24:42.316
<c.magenta>因此 你可以按照CPU</c>
<c.magenta>或线程浏览数据</c>

00:24:42.683 --> 00:24:44.418
<c.magenta>这一次 我想按照线程来看数据</c>

00:24:44.885 --> 00:24:47.521
<c.magenta>实际上我可以让它变大点儿</c>
<c.magenta>以便查看</c>

00:24:48.088 --> 00:24:52.125
<c.magenta>在左侧的这里 你可以看到</c>
<c.magenta>应用中的所有线程</c>

00:24:52.559 --> 00:24:54.094
<c.magenta>主线程在顶部</c>

00:24:54.595 --> 00:24:58.632
<c.magenta>所以我可以看到主线程的CPU</c>
<c.magenta>使用情况</c>

00:24:58.866 --> 00:25:01.902
<c.magenta>在这里 很明显 达到了100%</c>

00:24:58.866 --> 00:25:01.902
<c.magenta>在这里 很明显 达到了100%</c>

00:25:02.302 --> 00:25:05.906
<c.magenta>在这种状态下</c>
<c.magenta>它绝不会响应用户事件了</c>

00:25:05.973 --> 00:25:09.142
<c.magenta>也不能处理队列了</c>

00:25:09.209 --> 00:25:11.044
<c.magenta>如果它正忙于处理应用中的工作</c>

00:25:11.745 --> 00:25:14.381
<c.magenta>那么 主线程到底在做什么？</c>

00:25:14.915 --> 00:25:19.386
<c.magenta>这一次 我要点击右侧的扩展</c>
<c.magenta>详细视图</c>

00:25:19.753 --> 00:25:24.258
<c.magenta>这将显示在主线程上做了</c>
<c.magenta>大部分工作的调用栈</c>

00:25:24.391 --> 00:25:26.960
<c.magenta>因为我的主线程是从左侧</c>
<c.magenta>选出来的</c>

00:25:27.294 --> 00:25:30.898
<c.magenta>所以我在这里滚动</c>
<c.magenta>我可以看到这是运行循环</c>

00:25:30.964 --> 00:25:32.733
<c.magenta>然后在这里</c>
<c.magenta>我看到了我的代码</c>

00:25:33.066 --> 00:25:35.369
<c.magenta>这是添加眼睛的代码</c>

00:25:35.769 --> 00:25:38.172
<c.magenta>然后正在做更多的添加</c>
<c.magenta>眼睛的工作</c>

00:25:38.238 --> 00:25:39.940
<c.magenta>然后这里</c>
<c.magenta>正在调用查找面部</c>

00:25:40.007 --> 00:25:42.676
<c.magenta>所以这是应用中的</c>
<c.magenta>面部检测代码</c>

00:25:42.743 --> 00:25:46.113
<c.magenta>然后我们可以看到下一行</c>
<c.magenta>调用了图形核心</c>

00:25:46.180 --> 00:25:52.019
<c.magenta>如果我在详细视图中点击这个</c>
<c.magenta>它将展开那行的调用树</c>

00:25:53.220 --> 00:25:55.489
<c.magenta>再一次推导出我的代码</c>

00:25:55.556 --> 00:26:00.294
<c.magenta>我没必要在主线程上做面部检测</c>

00:25:55.556 --> 00:26:00.294
<c.magenta>我没必要在主线程上做面部检测</c>

00:26:00.360 --> 00:26:04.731
<c.magenta>这并不是响应用户输入</c>
<c.magenta>也不是更新视图</c>

00:26:05.065 --> 00:26:07.167
<c.magenta>因此可以挪到后台线程上去实现</c>

00:26:07.601 --> 00:26:11.572
<c.magenta>那么 这是执行面部检测的代码</c>

00:26:11.638 --> 00:26:14.007
<c.magenta>我可以看到面部检测完成后</c>

00:26:14.208 --> 00:26:16.443
<c.magenta>它会继续调用</c>
<c.magenta>displayEyes方法</c>

00:26:16.877 --> 00:26:21.548
<c.magenta>这里要注意一个重点</c>
<c.magenta>displayEyes会更新UI</c>

00:26:21.615 --> 00:26:24.218
<c.magenta>因此这是主线程上的工作</c>

00:26:24.751 --> 00:26:28.655
<c.magenta>所以 我需要做的是在后台</c>
<c.magenta>线程上执行面部检测</c>

00:26:28.989 --> 00:26:33.794
<c.magenta>切回主线程 更新UI</c>

00:26:35.028 --> 00:26:36.630
<c.magenta>哦 好了</c>

00:26:36.697 --> 00:26:38.832
<c.magenta>好的 谢谢</c>

00:26:41.101 --> 00:26:43.604
<c.magenta>此处不应有掌声</c>

00:26:43.871 --> 00:26:44.905
<c.magenta>但我接受你们的夸奖</c>

00:26:45.839 --> 00:26:48.375
<c.magenta>好了 这是在后台实现这个</c>
<c.magenta>功能的代码</c>

00:26:48.442 --> 00:26:51.178
<c.magenta>我要快速讲一下</c>

00:26:51.612 --> 00:26:54.147
<c.magenta>进入后台的一个队列</c>

00:26:54.214 --> 00:26:57.117
<c.magenta>然后调度查找面部代码</c>

00:26:57.451 --> 00:27:00.654
<c.magenta>正如我刚说过的</c>
<c.magenta>我们要调回主队列</c>

00:26:57.451 --> 00:27:00.654
<c.magenta>正如我刚说过的</c>
<c.magenta>我们要调回主队列</c>

00:27:00.721 --> 00:27:02.222
<c.magenta>更新我们的UI</c>

00:27:02.589 --> 00:27:04.424
<c.magenta>这一次在做分析时</c>

00:27:04.491 --> 00:27:08.395
<c.magenta>我会按住运行按钮 选择分析</c>

00:27:09.062 --> 00:27:10.397
<c.magenta>可以实现同样的功能</c>

00:27:10.731 --> 00:27:13.100
<c.magenta>很可能会相当快</c>

00:27:13.200 --> 00:27:15.102
<c.magenta>哦 我删除了代码</c>

00:27:16.069 --> 00:27:17.304
<c.magenta>让我们再做一次</c>

00:27:17.571 --> 00:27:19.907
<c.magenta>那么因为我已经实现了</c>
<c.magenta>我只需要继续并...</c>

00:27:20.774 --> 00:27:22.142
<c.magenta>这个结果满意吗...</c>

00:27:22.209 --> 00:27:24.845
<c.magenta>点击分析按钮 好了</c>

00:27:25.112 --> 00:27:26.780
<c.magenta>它会创建我的应用</c>

00:27:28.081 --> 00:27:29.550
<c.magenta>并在设备上安装应用</c>

00:27:30.417 --> 00:27:33.187
<c.magenta>好的 Instruments应显示</c>

00:27:33.587 --> 00:27:38.992
<c.magenta>并开始记录我的应用了</c>

00:27:41.195 --> 00:27:44.298
<c.magenta>哦 我要切回</c>
<c.magenta>Instruments视图</c>

00:27:48.435 --> 00:27:52.339
<c.magenta>然后 让我们缩小一下</c>
<c.magenta>看看进来的数据</c>

00:27:53.974 --> 00:27:58.946
<c.magenta>好的 很快</c>
<c.magenta>让我们给应用添加一些照片</c>

00:28:02.049 --> 00:28:04.184
<c.magenta>然后执行眼睛检测</c>

00:28:04.585 --> 00:28:07.354
<c.magenta>好了 那么在这里</c>
<c.magenta>我们能看到那个大的CPU峰值</c>

00:28:08.055 --> 00:28:09.857
<c.magenta>停止记录</c>

00:28:10.657 --> 00:28:13.026
<c.magenta>现在 让我们看看是否实现了</c>
<c.magenta>我们所期待的变更</c>

00:28:13.293 --> 00:28:19.032
<c.magenta>我要再次使用触控板放大</c>
<c.magenta>图表的这个区域</c>

00:28:19.900 --> 00:28:24.404
<c.magenta>点击并拖拽时间线视图</c>
<c.magenta>加一个过滤器</c>

00:28:25.272 --> 00:28:27.674
<c.magenta>现在 如果我们查看一下调用树</c>

00:28:27.741 --> 00:28:32.679
<c.magenta>实际上我在这里看到主线程</c>
<c.magenta>在样本中的比重只有4.8%</c>

00:28:32.746 --> 00:28:33.747
<c.magenta>这是个好迹象</c>

00:28:33.814 --> 00:28:35.983
<c.magenta>我已经知道主线程的工作量</c>
<c.magenta>正在减少</c>

00:28:36.049 --> 00:28:38.418
<c.magenta>两个辅助线程分担了</c>
<c.magenta>更多的工作量</c>

00:28:39.319 --> 00:28:41.855
<c.magenta>那么让我们切到线程策略</c>

00:28:42.322 --> 00:28:43.357
<c.magenta>在这里 我可以看到</c>

00:28:43.423 --> 00:28:48.395
<c.magenta>实际上 主线程在绝大部分</c>
<c.magenta>时间里是完全被释放的</c>

00:28:50.998 --> 00:28:51.865
<c.magenta>谢谢大家</c>

00:28:55.702 --> 00:28:57.604
<c.magenta>让我们返回幻灯片</c>

00:28:58.705 --> 00:29:00.374
<c.magenta>谈谈我们刚才做了什么</c>

00:28:58.705 --> 00:29:00.374
<c.magenta>谈谈我们刚才做了什么</c>

00:29:01.241 --> 00:29:03.977
<c.magenta>为了使应用更积极地做出响应</c>

00:29:04.678 --> 00:29:08.649
<c.magenta>我们发现了一个区域</c>
<c.magenta>在这个区域中CPU占用率很高</c>

00:29:08.715 --> 00:29:12.419
<c.magenta>我就放大那个区域 添加了一个</c>
<c.magenta>过滤器 这是很常见的操作</c>

00:29:12.486 --> 00:29:14.154
<c.magenta>我们做的就是</c>

00:29:14.221 --> 00:29:16.123
<c.magenta>关注主线程</c>

00:29:16.190 --> 00:29:21.228
<c.magenta>因为我想确保我的应用</c>
<c.magenta>持续地做出积极响应</c>

00:29:21.762 --> 00:29:25.933
<c.magenta>我摘出主线程上的一些</c>
<c.magenta>非UI类的工作</c>

00:29:26.166 --> 00:29:28.802
<c.magenta>然后把那些工作挪到</c>
<c.magenta>后台线程上去实现</c>

00:29:29.536 --> 00:29:31.638
<c.magenta>你很可能猜到了下一个步骤</c>

00:29:31.939 --> 00:29:33.540
<c.magenta>我验证了我所做的变更</c>

00:29:33.941 --> 00:29:37.945
<c.magenta>确保应用正如我所期待的那样</c>

00:29:38.645 --> 00:29:41.715
<c.magenta>结果是我得到了更好的用户体验</c>

00:29:41.782 --> 00:29:45.819
<c.magenta>当执行面部检测时</c>
<c.magenta>我的用户界面将持续做出响应</c>

00:29:46.220 --> 00:29:47.354
<c.magenta>这很棒</c>

00:29:48.322 --> 00:29:50.624
<c.magenta>关于优化 有几点建议</c>

00:29:50.824 --> 00:29:53.126
<c.magenta>我们今天所做的修改相对简单</c>

00:29:53.193 --> 00:29:55.162
<c.magenta>但确实增加了应用的复杂程度</c>

00:29:55.629 --> 00:29:56.864
<c.magenta>一般来说</c>

00:29:56.930 --> 00:30:01.268
<c.magenta>优化范例是用简化换取性能</c>

00:29:56.930 --> 00:30:01.268
<c.magenta>优化范例是用简化换取性能</c>

00:30:01.335 --> 00:30:03.136
<c.magenta>关于优化</c>

00:30:03.203 --> 00:30:07.941
<c.magenta>但很幸运 因为我早在开发阶段</c>
<c.magenta>就做了分析</c>

00:30:08.008 --> 00:30:09.209
<c.magenta>我并没有等到最后才做</c>

00:30:09.276 --> 00:30:14.781
<c.magenta>我现在有时间验证</c>
<c.magenta>应用是否运转正常</c>

00:30:15.215 --> 00:30:18.852
<c.magenta>如果我觉得必要 我可以添加</c>
<c.magenta>额外的单元测试或UI测试</c>

00:30:19.152 --> 00:30:22.356
<c.magenta>关注比较复杂的地方</c>
<c.magenta>仍然能正常运行</c>

00:30:23.490 --> 00:30:25.726
<c.magenta>在你发布应用之前</c>

00:30:25.792 --> 00:30:29.263
<c.magenta>是你能做出修改的最后机会</c>

00:30:29.730 --> 00:30:34.535
<c.magenta>所以真正的收获是它会</c>
<c.magenta>持续地分析你的应用</c>

00:30:34.601 --> 00:30:36.870
<c.magenta>尤其在你添加新功能之后</c>

00:30:37.137 --> 00:30:38.839
<c.magenta>要早做分析</c>

00:30:38.906 --> 00:30:41.608
<c.magenta>要不间断地做分析</c>

00:30:42.142 --> 00:30:45.112
<c.magenta>有时候可以只分析运行时间</c>
<c.magenta>看能发现什么</c>

00:30:45.179 --> 00:30:47.347
<c.magenta>你很快就会取得重大进展</c>

00:30:48.182 --> 00:30:51.652
<c.magenta>因此运行分析还是有好处的</c>
<c.magenta>可以了解是否正在发生有趣的事</c>

00:30:52.619 --> 00:30:55.422
<c.magenta>关于时间分析器的一些最佳范例</c>

00:30:55.656 --> 00:30:59.326
<c.magenta>总的来说 你的分析</c>

00:30:59.393 --> 00:31:02.162
<c.magenta>要尽可能地接近客户</c>
<c.magenta>要运行的东西</c>

00:30:59.393 --> 00:31:02.162
<c.magenta>要尽可能地接近客户</c>
<c.magenta>要运行的东西</c>

00:31:02.563 --> 00:31:05.199
<c.magenta>因此你要一直分析发布版本</c>

00:31:05.265 --> 00:31:06.500
<c.magenta>最佳范例</c>

00:31:06.567 --> 00:31:09.036
<c.magenta>你不仅需要在编译阶段进行优化</c>

00:31:09.102 --> 00:31:11.371
<c.magenta>还需要在你客户要使用的发布</c>
<c.magenta>版本上进行优化</c>

00:31:12.239 --> 00:31:14.608
<c.magenta>你要一直在设备上做分析</c>

00:31:14.675 --> 00:31:18.245
<c.magenta>模拟器不能给你提供有用的数据</c>

00:31:20.447 --> 00:31:24.785
<c.magenta>要在能支持的最老、</c>
<c.magenta>最慢的设备上做分析</c>

00:31:25.185 --> 00:31:26.553
<c.magenta>有一条很好的规则</c>

00:31:26.620 --> 00:31:29.022
<c.magenta>如果能在较慢的设备上</c>
<c.magenta>很好地运行</c>

00:31:29.089 --> 00:31:31.491
<c.magenta>那么 在较快的设备上一定</c>
<c.magenta>能更好地运行</c>

00:31:31.892 --> 00:31:35.395
<c.magenta>你想让所有用户在使用你的</c>
<c.magenta>应用时都有非常棒的体验</c>

00:31:35.696 --> 00:31:37.297
<c.magenta>就算用的是较慢的设备也一样</c>

00:31:38.131 --> 00:31:40.801
<c.magenta>要尽可能使用大数据集合</c>

00:31:40.934 --> 00:31:46.773
<c.magenta>在我的示例中 有时候用户的相册中</c>
<c.magenta>有成百上千</c>

00:31:46.840 --> 00:31:48.141
<c.magenta>或成千上万张照片</c>

00:31:48.375 --> 00:31:52.312
<c.magenta>分析应用如何在那种环境下</c>
<c.magenta>运行非常重要</c>

00:31:52.746 --> 00:31:56.483
<c.magenta>因此我可以确保客户在打开</c>
<c.magenta>应用时应用能顺畅运行</c>

00:31:58.018 --> 00:32:00.287
<c.magenta>那么 总结一下</c>

00:31:58.018 --> 00:32:00.287
<c.magenta>那么 总结一下</c>

00:32:00.821 --> 00:32:06.426
<c.magenta>如果你希望客户因为应用能节约</c>
<c.magenta>时间而爱上你的应用</c>

00:32:07.294 --> 00:32:09.863
<c.magenta>有助于他们实现全天电量充沛</c>

00:32:10.264 --> 00:32:13.333
<c.magenta>并且你的UI响应顺畅</c>

00:32:13.400 --> 00:32:18.539
<c.magenta>然后 你要做的是早做分析</c>
<c.magenta>并经常分析</c>

00:32:20.274 --> 00:32:23.310
<c.magenta>如果你想了解更多信息</c>
<c.magenta>请看这个URL</c>

00:32:24.111 --> 00:32:27.247
<c.magenta>这里有一些相关的演讲</c>

00:32:27.514 --> 00:32:29.917
<c.magenta>去年我们做了一场</c>
<c.magenta>“深度分析”的演讲</c>

00:32:29.983 --> 00:32:33.353
<c.magenta>有关于时间分析器的更多</c>
<c.magenta>详细信息 你可以了解一下</c>

00:32:33.420 --> 00:32:36.256
<c.magenta>今年 我们做了一个名为深度解析</c>
<c.magenta>系统跟踪的系列演讲</c>

00:32:36.323 --> 00:32:38.225
<c.magenta>讲的是当时间分析器力不从心时</c>

00:32:38.292 --> 00:32:41.361
<c.magenta>如何使用系统跟踪工具</c>

00:32:41.628 --> 00:32:43.664
<c.magenta>谢谢大家</c>
<c.magenta>祝你们度过一个美好的下午</c>
