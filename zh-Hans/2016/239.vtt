WEBVTT

00:00:19.419 --> 00:00:24.925
<c.magenta>制作现代化Cocoa应用</c>

00:00:35.235 --> 00:00:38.071
<c.magenta>大家好 欢迎来到</c>
<c.magenta>“制作现代化Cocoa应用”</c>

00:00:38.438 --> 00:00:39.473
<c.magenta>我是Corbin Dunn</c>

00:00:39.540 --> 00:00:41.975
<c.magenta>我将和同事Jeff一起来做本次演讲</c>

00:00:42.042 --> 00:00:43.977
<c.magenta>我们都是AppKit的软件工程师</c>

00:00:44.545 --> 00:00:47.080
<c.magenta>让我们直入正题</c>
<c.magenta>今天我们将会讨论什么呢？</c>

00:00:47.147 --> 00:00:49.082
<c.magenta>我们将涉及一大捆的话题</c>

00:00:49.149 --> 00:00:51.251
<c.magenta>我们来谈论下</c>
<c.magenta>创建一个现代化外观</c>

00:00:51.318 --> 00:00:55.455
<c.magenta>如何正确拖放</c>
<c.magenta>容器视图控制 表视图</c>

00:00:55.989 --> 00:00:59.293
<c.magenta>使用系统外观</c>
<c.magenta>storyboard设计</c>

00:00:59.359 --> 00:01:01.161
<c.magenta>和其他一些酷酷的Mac特性</c>

00:00:59.359 --> 00:01:01.161
<c.magenta>和其他一些酷酷的Mac特性</c>

00:01:01.361 --> 00:01:02.429
<c.magenta>非常多的东西</c>

00:01:02.796 --> 00:01:05.232
<c.magenta>我们快速通过一个演示应用来强调</c>

00:01:05.299 --> 00:01:06.800
<c.magenta>就像我们看到的这个截图</c>

00:01:07.267 --> 00:01:10.337
<c.magenta>它如何使用新特性或者</c>
<c.magenta>如何使用已存在的特性</c>

00:01:11.772 --> 00:01:13.874
<c.magenta>所有的这些技术</c>

00:01:14.107 --> 00:01:18.345
<c.magenta>大多数你早已可在MacOSX 10.10</c>
<c.magenta>或10.11使用了</c>

00:01:18.612 --> 00:01:22.749
<c.magenta>10.12中的</c>
<c.magenta>任何新技术我们都会重点指出</c>

00:01:23.217 --> 00:01:25.619
<c.magenta>关于这个演示应用</c>
<c.magenta>我们希望你能下载</c>

00:01:25.686 --> 00:01:27.988
<c.magenta>尽管这个应用还不能下载</c>
<c.magenta>不过很快就可以</c>

00:01:28.055 --> 00:01:29.723
<c.magenta>并且该应用和这次演讲有关联</c>

00:01:31.058 --> 00:01:32.626
<c.magenta>让我们进入正题</c>

00:01:32.693 --> 00:01:35.829
<c.magenta>讨论一下如何用现代化视图</c>

00:01:35.896 --> 00:01:38.232
<c.magenta>构建一个现代化外观并且你可以做什么</c>

00:01:39.733 --> 00:01:43.504
<c.magenta>现代化外观意味着现代化窗口</c>
<c.magenta>和现代化工具栏</c>

00:01:43.737 --> 00:01:45.606
<c.magenta>就像这里展示的演示应用</c>

00:01:46.640 --> 00:01:50.777
<c.magenta>其中一个你需要做的是</c>
<c.magenta>使用全尺寸内容视图</c>

00:01:51.345 --> 00:01:53.046
<c.magenta>这个全尺寸内容视图</c>

00:01:53.514 --> 00:01:55.482
<c.magenta>允许你的内容视图进行延伸</c>

00:01:55.749 --> 00:01:59.286
<c.magenta>在工具栏下面的区域</c>
<c.magenta>这里我用白色标记强调</c>

00:01:59.686 --> 00:02:03.257
<c.magenta>这意味着全尺寸内容视图</c>

00:01:59.686 --> 00:02:03.257
<c.magenta>这意味着全尺寸内容视图</c>

00:02:03.323 --> 00:02:06.093
<c.magenta>自动地在工具栏和标题栏旁模糊</c>

00:02:06.226 --> 00:02:07.928
<c.magenta>不需要你做任何事</c>

00:02:09.463 --> 00:02:11.832
<c.magenta>使用全尺寸内容视图非常简单</c>

00:02:12.032 --> 00:02:13.600
<c.magenta>只是一个窗口样式的掩码</c>

00:02:13.667 --> 00:02:17.137
<c.magenta>你可以使用.fullSizeContentView位</c>
<c.magenta>设置它</c>

00:02:18.005 --> 00:02:19.806
<c.magenta>或若你使用</c>
<c.magenta>Interface Builder</c>

00:02:19.873 --> 00:02:23.210
<c.magenta>你可直接在勾选框中的</c>
<c.magenta>全尺寸内容视图上打勾 就可应用它了</c>

00:02:24.912 --> 00:02:27.181
<c.magenta>所以如果你要使用全尺寸内容视图</c>

00:02:27.681 --> 00:02:31.552
<c.magenta>你可能需要抵消在它下面的内容</c>

00:02:32.286 --> 00:02:33.954
<c.magenta>例如 假如说</c>

00:02:34.655 --> 00:02:37.524
<c.magenta>我们想让一些东西在工具栏</c>
<c.magenta>或者标题栏下面</c>

00:02:38.392 --> 00:02:40.394
<c.magenta>我们可能会</c>

00:02:41.195 --> 00:02:42.429
<c.magenta>在那里放一个标签或什么</c>

00:02:43.797 --> 00:02:45.666
<c.magenta>若我们想把标签放那里</c>
<c.magenta>如何来完成</c>

00:02:45.866 --> 00:02:47.734
<c.magenta>在工具栏或标题栏下面</c>

00:02:47.801 --> 00:02:50.737
<c.magenta>如果有 比如</c>
<c.magenta>动态高度改变</c>

00:02:51.572 --> 00:02:55.309
<c.magenta>并且我们不想让这个标签拥有</c>
<c.magenta>一个写死的Y位移</c>

00:02:55.375 --> 00:02:57.544
<c.magenta>因为写死的位移</c>
<c.magenta>实在是太糟糕了</c>

00:02:58.612 --> 00:03:00.247
<c.magenta>所以我们要的是</c>

00:02:58.612 --> 00:03:00.247
<c.magenta>所以我们要的是</c>

00:03:00.447 --> 00:03:02.616
<c.magenta>NSWindow的</c>
<c.magenta>contentLayoutRect属性</c>

00:03:03.116 --> 00:03:06.553
<c.magenta>这是一个可观测的键值</c>
<c.magenta>一个可观测的KVO属性</c>

00:03:07.020 --> 00:03:09.756
<c.magenta>任何时候你可用它发现</c>
<c.magenta>contentLayoutRect</c>

00:03:09.823 --> 00:03:11.658
<c.magenta>蓝绿色的区域改变</c>

00:03:12.192 --> 00:03:14.228
<c.magenta>在这基础上 你可以把你的视图</c>

00:03:14.294 --> 00:03:16.129
<c.magenta>直接放到标题栏或工具栏下面</c>

00:03:18.165 --> 00:03:20.734
<c.magenta>但是我们也鼓励使用自动布局</c>

00:03:20.801 --> 00:03:22.236
<c.magenta>并且如果你使用自动布局</c>

00:03:22.736 --> 00:03:26.507
<c.magenta>你可以使用contentLayoutGuide</c>
<c.magenta>一个NSWindow上的属性</c>

00:03:27.574 --> 00:03:30.844
<c.magenta>例如 在NSViewController子类里</c>

00:03:30.911 --> 00:03:33.680
<c.magenta>你可能重写updateViewConstraints</c>

00:03:34.281 --> 00:03:35.883
<c.magenta>并且你想创建一个约束</c>

00:03:36.049 --> 00:03:38.318
<c.magenta>你得到window的</c>
<c.magenta>contentLayoutGuide</c>

00:03:39.219 --> 00:03:42.289
<c.magenta>为它标记上锚点</c>
<c.magenta>并且你会得到一个文本区域</c>

00:03:42.756 --> 00:03:45.425
<c.magenta>然后应该创建了一个约束</c>

00:03:45.592 --> 00:03:49.229
<c.magenta>在这个文本区域的顶部锚点</c>
<c.magenta>并且激活它</c>

00:03:49.796 --> 00:03:50.964
<c.magenta>如果你这样做</c>

00:03:51.031 --> 00:03:54.635
<c.magenta>在文本视图会自动</c>
<c.magenta>在标题栏或者工具栏下面的区域</c>

00:03:54.902 --> 00:03:56.436
<c.magenta>不用你做任何事</c>

00:03:56.837 --> 00:03:58.005
<c.magenta>十分容易</c>

00:03:59.773 --> 00:04:04.611
<c.magenta>接下来 关于现代化的应用</c>
<c.magenta>你该用一个流线型工具栏</c>

00:03:59.773 --> 00:04:04.611
<c.magenta>接下来 关于现代化的应用</c>
<c.magenta>你该用一个流线型工具栏</c>

00:04:05.145 --> 00:04:07.648
<c.magenta>这是一个常规应用的截图</c>

00:04:08.182 --> 00:04:11.451
<c.magenta>值得注意的是这里有一个明显标题栏</c>

00:04:11.652 --> 00:04:14.388
<c.magenta>或者 抱歉</c>
<c.magenta>它在顶部有一个明显的标题</c>

00:04:14.855 --> 00:04:16.490
<c.magenta>并且在那应该有一个图标</c>

00:04:16.557 --> 00:04:18.725
<c.magenta>若这个应用确实有一个</c>
<c.magenta>关于这个文档的图标</c>

00:04:19.593 --> 00:04:23.530
<c.magenta>如果使用一个流线型的工具栏</c>
<c.magenta>那个标题会消失</c>

00:04:24.464 --> 00:04:26.500
<c.magenta>这个工具栏将会向上移动一点</c>

00:04:27.201 --> 00:04:30.003
<c.magenta>并且窗口按钮 关闭按钮等等</c>

00:04:30.737 --> 00:04:33.373
<c.magenta>会和标题栏或者工具栏区域</c>
<c.magenta>在一条直线上</c>

00:04:34.675 --> 00:04:37.010
<c.magenta>做到这些十分容易</c>

00:04:37.277 --> 00:04:40.714
<c.magenta>你需要做的仅仅是设置一下标题的</c>
<c.magenta>visibility属性</c>

00:04:40.981 --> 00:04:41.915
<c.magenta>为.hidden</c>

00:04:42.349 --> 00:04:43.717
<c.magenta>那么标题将会被隐藏</c>

00:04:43.984 --> 00:04:46.687
<c.magenta>工具栏将会被向上推</c>
<c.magenta>并且所有的东西都会在一条线上</c>

00:04:47.054 --> 00:04:47.888
<c.magenta>你何时想做这些？</c>

00:04:47.955 --> 00:04:51.325
<c.magenta>你可能想为应用做这些</c>
<c.magenta>例如shoebox应用</c>

00:04:51.391 --> 00:04:53.760
<c.magenta>例如地图 日历</c>

00:04:53.961 --> 00:04:56.864
<c.magenta>系统设置 具有这类属性</c>

00:04:56.930 --> 00:05:00.934
<c.magenta>像是这些一个窗口的应用</c>
<c.magenta>都非常适用这种风格</c>

00:04:56.930 --> 00:05:00.934
<c.magenta>像是这些一个窗口的应用</c>
<c.magenta>都非常适用这种风格</c>

00:05:03.670 --> 00:05:08.742
<c.magenta>还有其他的事可以做吗？</c>
<c.magenta>好吧 你也许想完善</c>

00:05:08.909 --> 00:05:10.644
<c.magenta>标题栏或工具栏的区域</c>

00:05:10.711 --> 00:05:12.679
<c.magenta>用辅助视图控制器</c>

00:05:13.347 --> 00:05:14.214
<c.magenta>例如</c>

00:05:14.748 --> 00:05:17.084
<c.magenta>你可能想有一个辅助视图控制器</c>

00:05:17.150 --> 00:05:18.952
<c.magenta>就在标题栏下面</c>

00:05:19.586 --> 00:05:22.623
<c.magenta>通过这样做你想让它自动变模糊</c>

00:05:22.689 --> 00:05:24.224
<c.magenta>你不用做任何事</c>

00:05:24.725 --> 00:05:27.861
<c.magenta>尺寸将会跟随窗口的尺寸自动改变</c>

00:05:28.629 --> 00:05:31.064
<c.magenta>不需要你做任何事</c>
<c.magenta>如何做到这些？</c>

00:05:32.132 --> 00:05:35.002
<c.magenta>这十分简单</c>
<c.magenta>我们有一个视图控制器子类</c>

00:05:35.169 --> 00:05:37.871
<c.magenta>叫做NSTitlebar</c>
<c.magenta>AccessoryViewController</c>

00:05:38.472 --> 00:05:40.440
<c.magenta>你可以给这个视图控制器</c>
<c.magenta>设置视图</c>

00:05:40.807 --> 00:05:43.076
<c.magenta>除此之外</c>
<c.magenta>它还暴露了一个布局属性</c>

00:05:43.577 --> 00:05:46.780
<c.magenta>所以布局属性可被</c>
<c.magenta>设置为.bottom 意思是</c>

00:05:46.847 --> 00:05:50.317
<c.magenta>这个辅助将会在标题区域的底部</c>

00:05:51.084 --> 00:05:53.620
<c.magenta>注意出现在它下面的文本因为</c>

00:05:53.687 --> 00:05:57.191
<c.magenta>我们使用符合内容布局指导的</c>
<c.magenta>合适的内容布局</c>

00:05:57.424 --> 00:05:58.792
<c.magenta>不需要做任何事</c>

00:06:00.427 --> 00:06:01.662
<c.magenta>除了设置在底部</c>

00:06:02.429 --> 00:06:05.666
<c.magenta>布局属性还可以设置在leading</c>
<c.magenta>或者trailing</c>

00:06:06.166 --> 00:06:10.637
<c.magenta>意思是你可以有一个</c>
<c.magenta>辅助视图控制器在标题区域上面</c>

00:06:10.971 --> 00:06:13.140
<c.magenta>例如一个注册按钮</c>

00:06:13.207 --> 00:06:15.275
<c.magenta>或者其它你想添加的</c>

00:06:15.976 --> 00:06:19.780
<c.magenta>macOS X 10.12上的新特性是</c>
<c.magenta>使用leading和trailing的能力</c>

00:06:20.180 --> 00:06:23.317
<c.magenta>和之前发布的</c>
<c.magenta>left和right相反</c>

00:06:24.017 --> 00:06:27.921
<c.magenta>我们更推荐你使用leading和trailing</c>
<c.magenta>因为它让你窗口运作得更好</c>

00:06:28.155 --> 00:06:30.757
<c.magenta>当你使用从右到左的本地化</c>

00:06:31.191 --> 00:06:32.059
<c.magenta>这样 例如</c>

00:06:32.125 --> 00:06:34.828
<c.magenta>如果我仅仅</c>
<c.magenta>在从右向左的模式下运行</c>

00:06:35.262 --> 00:06:38.832
<c.magenta>你可以看到辅助视图控制器自动反转</c>

00:06:38.899 --> 00:06:41.134
<c.magenta>到另一边</c>
<c.magenta>什么都不用做的情况下</c>

00:06:43.737 --> 00:06:45.739
<c.magenta>接下来我们 系统</c>

00:06:45.806 --> 00:06:49.409
<c.magenta>可能添加我们的</c>
<c.magenta>辅助视图控制器到你的窗口</c>

00:06:49.676 --> 00:06:53.180
<c.magenta>例如 我们可能为了</c>
<c.magenta>创造标签窗口而使用它</c>

00:06:53.247 --> 00:06:54.882
<c.magenta>我们聚集多个窗口</c>

00:06:55.182 --> 00:06:56.984
<c.magenta>到一个类似虚拟窗口</c>

00:06:58.318 --> 00:07:01.555
<c.magenta>我们如何实现窗口分页</c>
<c.magenta>并且你作为一个开发者应做什么？</c>

00:06:58.318 --> 00:07:01.555
<c.magenta>我们如何实现窗口分页</c>
<c.magenta>并且你作为一个开发者应做什么？</c>

00:07:01.989 --> 00:07:03.423
<c.magenta>你不需要做任何事情</c>

00:07:03.490 --> 00:07:05.158
<c.magenta>若你命令一个窗口前</c>

00:07:05.626 --> 00:07:08.862
<c.magenta>我们做的是寻找和那个窗口</c>
<c.magenta>相似的窗口</c>

00:07:09.429 --> 00:07:12.999
<c.magenta>相似是说寻找</c>
<c.magenta>tabbing identifier属性</c>

00:07:13.500 --> 00:07:15.335
<c.magenta>如果它有相同的</c>
<c.magenta>tabbing identifier</c>

00:07:15.502 --> 00:07:17.504
<c.magenta>我们优先聚集起这些窗口</c>

00:07:17.571 --> 00:07:19.273
<c.magenta>到一个单独被做了标签的窗口</c>

00:07:20.374 --> 00:07:22.209
<c.magenta>这些窗口都被认为是可视的</c>

00:07:22.276 --> 00:07:23.977
<c.magenta>即使它可能是一个隐藏的标签</c>

00:07:24.378 --> 00:07:26.880
<c.magenta>但我们实际将它们隐藏</c>
<c.magenta>在核心图像中</c>

00:07:27.614 --> 00:07:30.684
<c.magenta>若你使用NSDocument</c>
<c.magenta>大量的东西 如plus按钮</c>

00:07:30.817 --> 00:07:34.321
<c.magenta>在标签栏里面的将会自动工作</c>
<c.magenta>不需要你的任何支持</c>

00:07:34.922 --> 00:07:38.392
<c.magenta>但若你不使用NSDocument</c>
<c.magenta>你可以实现一个响应链方法</c>

00:07:38.458 --> 00:07:40.961
<c.magenta>新标签窗口来创建一个新文档</c>

00:07:41.028 --> 00:07:42.596
<c.magenta>或在plus按钮上的新窗口</c>

00:07:43.664 --> 00:07:46.433
<c.magenta>欲知更多信息</c>
<c.magenta>请观看“Cocoa的新特性”</c>

00:07:46.967 --> 00:07:48.569
<c.magenta>来了解更多的细节</c>

00:07:51.939 --> 00:07:53.674
<c.magenta>关于标题栏的更多信息</c>

00:07:53.807 --> 00:07:57.411
<c.magenta>关于辅助视图控制器</c>
<c.magenta>及它们怎么和全屏幕交互的</c>

00:07:57.644 --> 00:08:00.080
<c.magenta>我强烈推荐你们去</c>
<c.magenta>看一下2015年的演讲</c>

00:07:57.644 --> 00:08:00.080
<c.magenta>我强烈推荐你们去</c>
<c.magenta>看一下2015年的演讲</c>

00:08:00.380 --> 00:08:02.549
<c.magenta>“改善全屏幕窗口体验”</c>

00:08:05.118 --> 00:08:08.488
<c.magenta>接下来我们会谈论下</c>
<c.magenta>核心动画</c>

00:08:09.256 --> 00:08:10.624
<c.magenta>什么是核心动画？</c>

00:08:10.724 --> 00:08:14.695
<c.magenta>它是一个图形渲染引擎</c>

00:08:14.761 --> 00:08:17.431
<c.magenta>在GPU上做大量工作</c>
<c.magenta>而不是在CPU上</c>

00:08:17.831 --> 00:08:21.568
<c.magenta>所以任何东西都可以非常快地</c>
<c.magenta>滚动</c>

00:08:22.269 --> 00:08:24.404
<c.magenta>所以我们可以很快并且很流畅的动画</c>

00:08:25.506 --> 00:08:27.875
<c.magenta>它的一个基础结构</c>
<c.magenta>是一个CA layer</c>

00:08:29.510 --> 00:08:34.280
<c.magenta>我们实际上是怎么</c>
<c.magenta>使用图层创建布局和视图的</c>

00:08:34.581 --> 00:08:35.749
<c.magenta>或者视图本身呢</c>

00:08:36.216 --> 00:08:40.621
<c.magenta>这是一个你可能用到背景图层的</c>
<c.magenta>动画实例</c>

00:08:40.687 --> 00:08:43.690
<c.magenta>一个中间的图层 再来一个前面的图层</c>
<c.magenta>做一个动画</c>

00:08:44.424 --> 00:08:47.160
<c.magenta>你想用多个子视图中合成你的视图</c>

00:08:47.661 --> 00:08:48.829
<c.magenta>来创造一个最终的画面</c>

00:08:50.931 --> 00:08:53.400
<c.magenta>让我们看一下核心动画的属性</c>

00:08:53.467 --> 00:08:58.138
<c.magenta>CALayer允许你创建</c>
<c.magenta>你可以在屏幕上看到的内容</c>

00:08:59.506 --> 00:09:02.009
<c.magenta>说到内容 CALayer</c>
<c.magenta>有一个contents属性</c>

00:08:59.506 --> 00:09:02.009
<c.magenta>说到内容 CALayer</c>
<c.magenta>有一个contents属性</c>

00:09:02.376 --> 00:09:05.812
<c.magenta>这个contents属性可以是NSImage</c>
<c.magenta>或CGImageRef</c>

00:09:06.213 --> 00:09:07.915
<c.magenta>恰好呈现出你所看到的</c>

00:09:08.515 --> 00:09:09.917
<c.magenta>在那个层的contents里</c>

00:09:10.350 --> 00:09:12.619
<c.magenta>但你也可以</c>
<c.magenta>在CALayer上设置其它属性</c>

00:09:12.686 --> 00:09:14.721
<c.magenta>比如背景颜色</c>

00:09:14.788 --> 00:09:16.456
<c.magenta>比如边框的颜色 边框的宽度</c>

00:09:16.623 --> 00:09:18.125
<c.magenta>比如圆角弧度</c>

00:09:18.458 --> 00:09:20.827
<c.magenta>你还可以在CALayer上</c>
<c.magenta>发现更多的属性</c>

00:09:20.894 --> 00:09:23.697
<c.magenta>看到其他可操作东西</c>
<c.magenta>并且学会如何来操作</c>

00:09:24.231 --> 00:09:26.200
<c.magenta>这有些基础的方式</c>

00:09:26.567 --> 00:09:29.536
<c.magenta>用来创建一个CALayer的外观</c>

00:09:29.903 --> 00:09:32.673
<c.magenta>对此 我们稍后再谈</c>

00:09:34.474 --> 00:09:37.878
<c.magenta>你应该使用一个置为底层的视图</c>

00:09:38.579 --> 00:09:40.347
<c.magenta>所以你将会用NSViews</c>

00:09:41.148 --> 00:09:42.616
<c.magenta>仅需设置层为“是”</c>

00:09:43.016 --> 00:09:44.785
<c.magenta>接下来我将为你们演示如何操作</c>

00:09:45.385 --> 00:09:47.554
<c.magenta>它将会为你隐式创建一个层</c>

00:09:48.422 --> 00:09:51.758
<c.magenta>意思是你可以通过draw方法</c>
<c.magenta>提供层的内容</c>

00:09:52.759 --> 00:09:56.163
<c.magenta>但如果你要使用层</c>
<c.magenta>我们有两个更重要的方法</c>

00:09:56.230 --> 00:09:58.365
<c.magenta>updateLayer和</c>
<c.magenta>wantsUpdateLayer</c>

00:09:58.932 --> 00:10:01.268
<c.magenta>接下来我将告诉你这些如何实现</c>

00:09:58.932 --> 00:10:01.268
<c.magenta>接下来我将告诉你这些如何实现</c>

00:10:01.335 --> 00:10:02.836
<c.magenta>何时你想使用它们</c>

00:10:04.137 --> 00:10:07.040
<c.magenta>我们用核心动画来做什么</c>

00:10:07.107 --> 00:10:09.576
<c.magenta>该何时用核心动画</c>
<c.magenta>和置为底层？</c>

00:10:09.776 --> 00:10:13.013
<c.magenta>我们建议你将</c>
<c.magenta>窗口内容视图置为底层</c>

00:10:13.881 --> 00:10:15.983
<c.magenta>当你将某特定视图置为底层时</c>

00:10:16.049 --> 00:10:19.486
<c.magenta>所有子层也将自动变为底层</c>

00:10:19.753 --> 00:10:23.790
<c.magenta>不用你为每一个子视图选择一个层</c>

00:10:25.392 --> 00:10:27.094
<c.magenta>我们推荐你将视图置为底层</c>

00:10:27.561 --> 00:10:30.898
<c.magenta>并且不要直接把CALayer</c>
<c.magenta>作为子层添加</c>

00:10:31.265 --> 00:10:34.034
<c.magenta>因为它自动为你做事</c>

00:10:34.568 --> 00:10:38.472
<c.magenta>例如当在一个层</c>
<c.magenta>在视网膜显示屏上显示时</c>

00:10:38.772 --> 00:10:41.408
<c.magenta>我们将会做更多的设置</c>
<c.magenta>来完成这个工作</c>

00:10:44.478 --> 00:10:46.380
<c.magenta>打开“置为底层”非常简单</c>

00:10:46.880 --> 00:10:50.350
<c.magenta>在窗口的内容视图 可将</c>
<c.magenta>wants layer设为真并编码</c>

00:10:51.151 --> 00:10:54.021
<c.magenta>或者 当然你可以在界面文件夹里</c>

00:10:54.087 --> 00:10:56.456
<c.magenta>勾选CoreAnimationLayer</c>

00:10:56.723 --> 00:10:57.591
<c.magenta>在最顶部的视图上</c>

00:11:00.460 --> 00:11:02.496
<c.magenta>所以 一个重要的属性</c>

00:11:02.796 --> 00:11:07.201
<c.magenta>置底层视图属性是</c>
<c.magenta>layerContentsRedrawPolicy</c>

00:11:07.835 --> 00:11:11.238
<c.magenta>你可以设置值为.onSetNeedsDisplay</c>

00:11:11.805 --> 00:11:14.208
<c.magenta>它并不是NSView的默认值</c>

00:11:15.075 --> 00:11:17.978
<c.magenta>意思是 作为一个开发者的你无论何时</c>

00:11:18.045 --> 00:11:21.114
<c.magenta>想改变层中的</c>
<c.magenta>内容或改变视图</c>

00:11:21.748 --> 00:11:23.283
<c.magenta>你都得调用</c>
<c.magenta>SetNeedsDisplay</c>

00:11:24.151 --> 00:11:27.421
<c.magenta>这与普通的视图工作方式在语意上</c>
<c.magenta>稍微不同</c>

00:11:27.654 --> 00:11:30.524
<c.magenta>当它们移动时它们可能会重新显示</c>
<c.magenta>在那里</c>

00:11:31.925 --> 00:11:33.026
<c.magenta>改变框架的原点</c>

00:11:34.261 --> 00:11:36.463
<c.magenta>这是一些你需要明确选择的</c>

00:11:36.530 --> 00:11:39.266
<c.magenta>这尤其可以让动画效果更出色</c>

00:11:41.635 --> 00:11:44.037
<c.magenta>所以如何使内容放到层呢？</c>

00:11:44.872 --> 00:11:46.240
<c.magenta>你的视图是需要刷新的</c>

00:11:46.373 --> 00:11:47.574
<c.magenta>你标记为</c>
<c.magenta>setNeedsDisplay</c>

00:11:48.242 --> 00:11:49.076
<c.magenta>并且</c>

00:11:49.409 --> 00:11:52.112
<c.magenta>我们问你的视图 嘿</c>

00:11:52.479 --> 00:11:54.248
<c.magenta>你为wantsUpdateLayer</c>
<c.magenta>做了什么？</c>

00:11:54.314 --> 00:11:56.517
<c.magenta>给wantsUpdateLayer</c>
<c.magenta>的答案是什么？</c>

00:11:56.850 --> 00:11:57.851
<c.magenta>在这里出现分支</c>

00:11:57.918 --> 00:12:00.020
<c.magenta>若wantsUpdateLayer为是</c>

00:11:57.918 --> 00:12:00.020
<c.magenta>若wantsUpdateLayer为是</c>

00:12:00.187 --> 00:12:02.289
<c.magenta>我们会调用</c>
<c.magenta>wantsUpdateLayer</c>

00:12:03.257 --> 00:12:05.792
<c.magenta>若回答否</c>
<c.magenta>我们会调用drawRect</c>

00:12:06.059 --> 00:12:07.427
<c.magenta>所以这是一个完整的分支</c>

00:12:07.661 --> 00:12:08.595
<c.magenta>必须要二选一</c>

00:12:10.497 --> 00:12:12.232
<c.magenta>然后你可能会奇怪</c>

00:12:12.633 --> 00:12:16.136
<c.magenta>“好吧 何时该选择updateLayer</c>
<c.magenta>或drawRect呢”</c>

00:12:17.304 --> 00:12:21.375
<c.magenta>这回到我给你们演示核心动画</c>
<c.magenta>和NSLayer属性的位置</c>

00:12:21.942 --> 00:12:25.879
<c.magenta>所以如果你可以代表你视图的表现</c>

00:12:26.246 --> 00:12:28.715
<c.magenta>直接通过设置CALayer属性</c>

00:12:29.116 --> 00:12:31.218
<c.magenta>这时你该使用updateLayer</c>

00:12:31.485 --> 00:12:33.053
<c.magenta>这将会更高效</c>

00:12:33.353 --> 00:12:35.222
<c.magenta>若你可以设置分层内容</c>

00:12:35.489 --> 00:12:37.591
<c.magenta>层背景颜色 更倾向于做这些</c>

00:12:38.325 --> 00:12:39.293
<c.magenta>如果不可以</c>

00:12:39.359 --> 00:12:43.030
<c.magenta>这里你该重写draw</c>
<c.magenta>或者drawRect</c>

00:12:43.697 --> 00:12:47.734
<c.magenta>在子类里做手动绘制</c>

00:12:48.335 --> 00:12:51.438
<c.magenta>每一个实现drawRect的事件</c>

00:12:51.505 --> 00:12:55.442
<c.magenta>将有它们自己特有的backing score</c>
<c.magenta>你可把其看作图片</c>

00:12:55.676 --> 00:12:58.345
<c.magenta>因此如果这种东西太多</c>

00:12:58.412 --> 00:12:59.680
<c.magenta>它将会占用太多内存</c>

00:13:02.983 --> 00:13:04.685
<c.magenta>让我们快速看一个例子</c>

00:13:04.751 --> 00:13:06.820
<c.magenta>用updateLayer</c>
<c.magenta>你如何使用它</c>

00:13:07.754 --> 00:13:10.023
<c.magenta>首先 你将重写</c>
<c.magenta>wantsUpdateLayer</c>

00:13:10.257 --> 00:13:11.291
<c.magenta>你会有一个</c>

00:13:11.625 --> 00:13:14.528
<c.magenta>updateLayer回调</c>
<c.magenta>通过返回真</c>

00:13:15.295 --> 00:13:17.297
<c.magenta>然后将得到一个</c>
<c.magenta>updateLayer回调</c>

00:13:17.364 --> 00:13:19.166
<c.magenta>你可以设置层属性</c>

00:13:19.233 --> 00:13:22.302
<c.magenta>所以我们得到视图的属性</c>
<c.magenta>self.layer内容</c>

00:13:22.703 --> 00:13:24.171
<c.magenta>还有self.layer</c>
<c.magenta>backgroundColor</c>

00:13:24.238 --> 00:13:27.374
<c.magenta>或者任何其他的你想设置的东西</c>
<c.magenta>这次你可以设置</c>

00:13:31.178 --> 00:13:33.247
<c.magenta>我们再谈论一下现代视图</c>

00:13:33.313 --> 00:13:35.849
<c.magenta>和如何为标题栏和工具栏</c>
<c.magenta>创建一个现代化的外观</c>

00:13:36.183 --> 00:13:39.419
<c.magenta>来说一下拖放和</c>
<c.magenta>来做一些事件跟踪</c>

00:13:40.888 --> 00:13:42.422
<c.magenta>对于现代化的拖放</c>

00:13:43.357 --> 00:13:46.260
<c.magenta>你需要采用的是</c>
<c.magenta>drag flocking</c>

00:13:46.326 --> 00:13:47.794
<c.magenta>像视频中展示的这样</c>

00:13:48.262 --> 00:13:50.664
<c.magenta>Drag flocking</c>
<c.magenta>是每一个独立的项目</c>

00:13:50.998 --> 00:13:55.002
<c.magenta>独立的移动</c>
<c.magenta>但是会聚集在一起或同时散开</c>

00:13:55.702 --> 00:13:57.004
<c.magenta>当你将鼠标放开以后</c>

00:13:57.070 --> 00:14:00.207
<c.magenta>它们将会散回到初始的位置</c>

00:13:57.070 --> 00:14:00.207
<c.magenta>它们将会散回到初始的位置</c>

00:14:01.708 --> 00:14:05.145
<c.magenta>你只需要使用NSView的方法</c>
<c.magenta>来用drag flocking</c>

00:14:05.512 --> 00:14:06.747
<c.magenta>beginDraggingSession</c>

00:14:07.147 --> 00:14:08.382
<c.magenta>当传递一个数组</c>

00:14:08.715 --> 00:14:11.818
<c.magenta>包含实际你想拖拽的项目</c>

00:14:12.786 --> 00:14:13.854
<c.magenta>这十分简单</c>

00:14:15.822 --> 00:14:18.458
<c.magenta>关于更多的复合控制</c>
<c.magenta>像一个表视图</c>

00:14:18.959 --> 00:14:22.429
<c.magenta>对集合视图</c>
<c.magenta>我们提供代理方法供你使用</c>

00:14:22.829 --> 00:14:25.966
<c.magenta>对于表视图你应该优先使用代理方法</c>

00:14:26.400 --> 00:14:28.468
<c.magenta>tableView pasteboardWriterForRow</c>

00:14:28.969 --> 00:14:32.539
<c.magenta>可提供一独立</c>
<c.magenta>NSPasteboard编辑项目</c>

00:14:32.906 --> 00:14:35.209
<c.magenta>为表视图的每一个被拖动的项目</c>

00:14:35.676 --> 00:14:39.279
<c.magenta>与老方法相反</c>
<c.magenta>tableView writeRowsWith</c>

00:14:39.646 --> 00:14:40.480
<c.magenta>到一粘贴板</c>

00:14:40.714 --> 00:14:43.717
<c.magenta>你编辑的所有东西将会在一块到</c>
<c.magenta>粘贴板上</c>

00:14:45.953 --> 00:14:48.021
<c.magenta>同样 集合视图</c>

00:14:49.356 --> 00:14:51.859
<c.magenta>有两个代理方法和这个非常相似</c>

00:14:51.992 --> 00:14:53.894
<c.magenta>对于集合视图</c>
<c.magenta>你该优先使用</c>

00:14:53.961 --> 00:14:57.965
<c.magenta>pasteboardWriter ForItemAt版本</c>
<c.magenta>而非其它版本</c>

00:15:00.300 --> 00:15:01.702
<c.magenta>对于drag flocking</c>

00:15:01.869 --> 00:15:05.606
<c.magenta>macOS X 10.12上的新功能是</c>
<c.magenta>对drag file promises的支持</c>

00:15:06.106 --> 00:15:09.443
<c.magenta>这就是你现在才用</c>
<c.magenta>drag flocking的原因</c>

00:15:10.010 --> 00:15:13.881
<c.magenta>并且你可以用NSFile PromiseReceiver</c>
<c.magenta>和NSFile PromiseProvider</c>

00:15:13.947 --> 00:15:15.983
<c.magenta>来读和写文件promises</c>

00:15:16.717 --> 00:15:17.718
<c.magenta>看下这次的演讲</c>

00:15:17.784 --> 00:15:20.821
<c.magenta>“Cocoa的新特性”</c>
<c.magenta>了解更多信息和细节</c>

00:15:23.624 --> 00:15:25.826
<c.magenta>让我们看一下事件跟踪</c>

00:15:25.926 --> 00:15:27.661
<c.magenta>假如你有一个窗口</c>

00:15:28.061 --> 00:15:30.130
<c.magenta>并且顶部有一个按钮</c>

00:15:30.864 --> 00:15:31.932
<c.magenta>所以你有这个按钮</c>

00:15:32.332 --> 00:15:33.600
<c.magenta>你想让它发生的是</c>

00:15:33.901 --> 00:15:36.370
<c.magenta>当你点击这个按钮时</c>

00:15:36.970 --> 00:15:38.939
<c.magenta>从上到下它都像常规按钮一样工作</c>

00:15:39.006 --> 00:15:41.375
<c.magenta>你将做什么来表现一个弹出</c>

00:15:42.743 --> 00:15:45.879
<c.magenta>但是你也想弄清楚你点击的按钮</c>

00:15:46.146 --> 00:15:49.349
<c.magenta>并且如果你拖动鼠标拖拽一个窗口</c>

00:15:50.017 --> 00:15:52.019
<c.magenta>所以怎样使这些行为聚到一块呢</c>

00:15:52.286 --> 00:15:55.989
<c.magenta>在现代系统上新特性中</c>
<c.magenta>以恰当现代的方法？</c>

00:15:57.724 --> 00:15:59.493
<c.magenta>好吧 让我们讨论一下</c>
<c.magenta>事件追踪</c>

00:15:59.560 --> 00:16:01.261
<c.magenta>和如何追踪事件来做到这个</c>

00:15:59.560 --> 00:16:01.261
<c.magenta>和如何追踪事件来做到这个</c>

00:16:02.062 --> 00:16:04.998
<c.magenta>这个窗口有个方法</c>
<c.magenta>跟踪事件匹配掩码</c>

00:16:05.065 --> 00:16:06.633
<c.magenta>用一个超时模式处理器</c>

00:16:07.167 --> 00:16:09.102
<c.magenta>并且这个处理器是一个块回调</c>

00:16:10.070 --> 00:16:12.806
<c.magenta>我们更希望你用这个方法</c>
<c.magenta>而不是用老方法</c>

00:16:12.873 --> 00:16:13.874
<c.magenta>在NSApplication</c>

00:16:14.641 --> 00:16:16.944
<c.magenta>它是nextEvent</c>
<c.magenta>matchingMask</c>

00:16:17.578 --> 00:16:19.913
<c.magenta>用过去的方法你创建自己的循环</c>

00:16:20.380 --> 00:16:23.650
<c.magenta>在新的方法中你仅需使用一个块</c>
<c.magenta>回调就可以完成工作了</c>

00:16:26.220 --> 00:16:29.022
<c.magenta>看下这块回调</c>
<c.magenta>比如在那个按钮中</c>

00:16:29.223 --> 00:16:31.525
<c.magenta>我们将mouseDown</c>
<c.magenta>分成子类并重写</c>

00:16:33.393 --> 00:16:35.829
<c.magenta>首先我们应在mouseDown做的</c>

00:16:35.963 --> 00:16:38.031
<c.magenta>是调用窗口跟踪事件</c>

00:16:38.265 --> 00:16:41.902
<c.magenta>我们想为drag和</c>
<c.magenta>leftMouseUp追踪所有事件</c>

00:16:44.271 --> 00:16:46.740
<c.magenta>如果用户点击 然后后退</c>

00:16:47.174 --> 00:16:49.610
<c.magenta>我们需要停止</c>

00:16:49.877 --> 00:16:51.078
<c.magenta>我们会说</c>

00:16:51.311 --> 00:16:53.180
<c.magenta>我们需要调用super</c>

00:16:53.380 --> 00:16:56.183
<c.magenta>因为通过那方式 每件事都会像</c>
<c.magenta>NSButton一样正常工作</c>

00:16:56.917 --> 00:16:58.218
<c.magenta>但这有额外的部分</c>

00:16:58.519 --> 00:17:00.554
<c.magenta>比如 你点击并拖拽</c>

00:16:58.519 --> 00:17:00.554
<c.magenta>比如 你点击并拖拽</c>

00:17:00.888 --> 00:17:02.823
<c.magenta>并且如果在按钮里点击和拖拽</c>

00:17:03.156 --> 00:17:05.259
<c.magenta>我们会判断你是否拖拽得足够远</c>

00:17:05.492 --> 00:17:06.560
<c.magenta>如果拖拽得足够远</c>

00:17:07.261 --> 00:17:10.830
<c.magenta>将不再只作为一个窗口而是去</c>
<c.magenta>完成一个performDrag</c>

00:17:12.366 --> 00:17:13.967
<c.magenta>意思是</c>

00:17:14.268 --> 00:17:17.069
<c.magenta>当你传递窗口</c>
<c.magenta>performDrag时</c>

00:17:17.471 --> 00:17:21.040
<c.magenta>窗口和系统将会在那一点</c>
<c.magenta>接替这个拖拽窗口</c>

00:17:21.974 --> 00:17:24.211
<c.magenta>不能拖拽和移动窗口</c>

00:17:24.278 --> 00:17:26.547
<c.magenta>通过在窗口一次次</c>
<c.magenta>调用set frame</c>

00:17:27.681 --> 00:17:29.016
<c.magenta>如果你传递给系统</c>

00:17:29.349 --> 00:17:30.684
<c.magenta>一旦你传递</c>

00:17:30.951 --> 00:17:32.219
<c.magenta>如果你的应用卡住了</c>

00:17:32.719 --> 00:17:33.554
<c.magenta>然后</c>

00:17:33.620 --> 00:17:35.956
<c.magenta>这个窗口将继续可被移动</c>

00:17:36.523 --> 00:17:38.225
<c.magenta>即使应用正在运行</c>

00:17:38.892 --> 00:17:40.894
<c.magenta>除此之外 其它系统特性将运行</c>

00:17:41.428 --> 00:17:42.963
<c.magenta>像空间切换</c>

00:17:43.297 --> 00:17:46.200
<c.magenta>当你移动到窗口顶端</c>
<c.magenta>空白栏将会向下移动</c>

00:17:46.500 --> 00:17:48.135
<c.magenta>窗口捕捉 窗口对齐</c>

00:17:48.702 --> 00:17:50.304
<c.magenta>任何其它新加入的系统特性</c>

00:17:50.370 --> 00:17:53.974
<c.magenta>在窗口的移动下会自动工作</c>
<c.magenta>不需要你做任何事</c>

00:17:54.374 --> 00:17:55.943
<c.magenta>所以我们希望你向下传给系统</c>

00:17:56.510 --> 00:17:58.512
<c.magenta>通过调用performDrag</c>

00:18:01.715 --> 00:18:04.751
<c.magenta>刚才讨论了拖拽和事件处理</c>

00:18:04.818 --> 00:18:07.187
<c.magenta>让我们谈论一下</c>
<c.magenta>容器试图控制</c>

00:18:07.588 --> 00:18:09.056
<c.magenta>和如何适当的使用这些</c>

00:18:10.057 --> 00:18:11.959
<c.magenta>容器视图控制</c>
<c.magenta>我们应该使用</c>

00:18:12.025 --> 00:18:13.760
<c.magenta>基于表视图的视图</c>

00:18:14.061 --> 00:18:17.197
<c.magenta>你通过使用代理方法tableView</c>
<c.magenta>viewFor: row: 来做这些</c>

00:18:17.598 --> 00:18:21.001
<c.magenta>或者你可以在Interface</c>
<c.magenta>Builder里设置一些东西</c>

00:18:21.535 --> 00:18:23.270
<c.magenta>直接通过Interface</c>
<c.magenta>Builder本身</c>

00:18:25.405 --> 00:18:28.175
<c.magenta>这样做的原因是你可以像视频中</c>
<c.magenta>我们看到的那样</c>

00:18:28.275 --> 00:18:30.344
<c.magenta>新特性 例如滑动删除</c>

00:18:30.577 --> 00:18:32.779
<c.magenta>这仅仅存在于基于表视图的视图里</c>

00:18:34.348 --> 00:18:36.183
<c.magenta>通过滑动来删除非常简单的</c>

00:18:36.583 --> 00:18:37.918
<c.magenta>这有一个表视图方法</c>

00:18:38.418 --> 00:18:39.520
<c.magenta>rowActionsForRow</c>

00:18:40.020 --> 00:18:40.988
<c.magenta>在一个特殊的边缘</c>

00:18:41.054 --> 00:18:43.824
<c.magenta>在左边或右边的边缘 抱歉</c>
<c.magenta>应该是在顶部和底部的边缘</c>

00:18:44.758 --> 00:18:48.495
<c.magenta>并且你可以返回一个数组一个或多个</c>
<c.magenta>或没有或更多行的操作</c>

00:18:49.062 --> 00:18:51.231
<c.magenta>在NSTableView的行操作中</c>

00:18:52.032 --> 00:18:56.637
<c.magenta>允许你给按钮的标题创造一个字符串值</c>

00:18:57.237 --> 00:18:59.606
<c.magenta>和一个处理方法</c>

00:19:00.073 --> 00:19:02.342
<c.magenta>当用户点击时才触发的代码</c>

00:19:02.476 --> 00:19:04.411
<c.magenta>或者滑动屏幕足够远才触发的代码</c>

00:19:07.714 --> 00:19:11.585
<c.magenta>接着我们谈论下滚动视图</c>
<c.magenta>和它的复合控制</c>

00:19:11.985 --> 00:19:14.454
<c.magenta>到目前为止我们谈论的技术</c>

00:19:15.055 --> 00:19:18.759
<c.magenta>例如滚动视图...</c>
<c.magenta>比如我们获取窗口</c>

00:19:19.259 --> 00:19:22.930
<c.magenta>和设置窗口</c>
<c.magenta>标题栏显示透明</c>

00:19:23.263 --> 00:19:25.332
<c.magenta>它使标题栏看上去透明</c>

00:19:25.432 --> 00:19:27.701
<c.magenta>如Messages这类应用</c>
<c.magenta>充分利用该特性</c>

00:19:28.435 --> 00:19:30.304
<c.magenta>允许内容在下部显示</c>

00:19:30.370 --> 00:19:32.306
<c.magenta>我们来看一下发生了什么</c>

00:19:32.372 --> 00:19:37.477
<c.magenta>在一边的滚动视图显示</c>

00:19:37.544 --> 00:19:40.914
<c.magenta>在标题栏/工具栏下部区域的内容</c>
<c.magenta>并会自动将其变模糊</c>

00:19:41.348 --> 00:19:42.816
<c.magenta>但是这呈现出两难处境</c>

00:19:43.550 --> 00:19:46.887
<c.magenta>如何使滚动视图被自动插入</c>

00:19:47.287 --> 00:19:49.590
<c.magenta>以致你不需要添加一个空行</c>

00:19:49.656 --> 00:19:50.924
<c.magenta>或其他什么奇怪东西？</c>

00:19:52.292 --> 00:19:54.194
<c.magenta>做这些十分方便和简单</c>

00:19:54.261 --> 00:19:55.662
<c.magenta>滚动视图有个方法</c>

00:19:55.896 --> 00:19:57.965
<c.magenta>或属性</c>
<c.magenta>叫contentInsets</c>

00:19:58.365 --> 00:20:01.168
<c.magenta>允许你将内容稍微向下移动一点</c>

00:19:58.365 --> 00:20:01.168
<c.magenta>允许你将内容稍微向下移动一点</c>

00:20:01.969 --> 00:20:03.737
<c.magenta>实际上 我们让它自动实现</c>

00:20:04.071 --> 00:20:06.707
<c.magenta>我们有个属性</c>
<c.magenta>automaticallyAdjust ContentInsets</c>

00:20:07.241 --> 00:20:08.642
<c.magenta>如果你设置它为真</c>

00:20:08.876 --> 00:20:11.411
<c.magenta>然后我们</c>
<c.magenta>让滚动视图使用KVO</c>

00:20:11.478 --> 00:20:14.381
<c.magenta>之前说的跟踪</c>
<c.magenta>contentLayoutRect</c>

00:20:14.848 --> 00:20:16.750
<c.magenta>自动设置</c>
<c.magenta>内容插图</c>

00:20:16.950 --> 00:20:18.552
<c.magenta>为一个合适的值</c>

00:20:20.554 --> 00:20:24.224
<c.magenta>但作为开发者 你可能想更自由控制</c>
<c.magenta>内容插图</c>

00:20:24.691 --> 00:20:26.560
<c.magenta>你可能想让它更向下</c>

00:20:26.827 --> 00:20:28.462
<c.magenta>来添加一切其他的帮助控件</c>

00:20:28.529 --> 00:20:30.731
<c.magenta>比如一个搜索区域或者其它东西</c>

00:20:31.632 --> 00:20:34.134
<c.magenta>在我们的系统中的一个例子是</c>

00:20:34.401 --> 00:20:37.671
<c.magenta>Mail向下了一点</c>
<c.magenta>添加了排序指示器</c>

00:20:38.772 --> 00:20:41.909
<c.magenta>这就是我们在系统应用中的使用方式</c>

00:20:43.977 --> 00:20:45.979
<c.magenta>下面说说自动布局</c>

00:20:46.813 --> 00:20:48.248
<c.magenta>你应该使用自动布局</c>

00:20:48.582 --> 00:20:50.551
<c.magenta>你也应该使用</c>
<c.magenta>base localization</c>

00:20:51.385 --> 00:20:54.288
<c.magenta>你所有的nymphs都</c>
<c.magenta>该在base.lproj中</c>

00:20:54.354 --> 00:20:58.325
<c.magenta>除了使用多个不同文件夹和本地化副本</c>

00:20:58.959 --> 00:21:00.994
<c.magenta>你不应该使用固定写法</c>

00:20:58.959 --> 00:21:00.994
<c.magenta>你不应该使用固定写法</c>

00:21:01.395 --> 00:21:05.032
<c.magenta>你想用控制去得到内在的内容大小</c>

00:21:05.532 --> 00:21:06.867
<c.magenta>而不是写死大小</c>

00:21:07.601 --> 00:21:08.902
<c.magenta>优先使用堆视图</c>

00:21:09.303 --> 00:21:12.306
<c.magenta>使用leading和</c>
<c.magenta>trailing属性 这些都正确</c>

00:21:12.372 --> 00:21:14.441
<c.magenta>对于创建一个合理的本地化应用</c>

00:21:15.709 --> 00:21:18.579
<c.magenta>我们看一下IB中的本地化选项</c>

00:21:19.313 --> 00:21:22.716
<c.magenta>尤其文本方向、</c>
<c.magenta>布局和镜像部分</c>

00:21:23.784 --> 00:21:26.286
<c.magenta>文本方向有三个值</c>

00:21:26.687 --> 00:21:29.389
<c.magenta>自然的 从左到右 从右到左</c>

00:21:30.057 --> 00:21:31.425
<c.magenta>自然的意思是</c>

00:21:31.959 --> 00:21:34.862
<c.magenta>实际的控制器将根据字符串值</c>

00:21:34.928 --> 00:21:38.131
<c.magenta>你给你这个控制器设置的 如文本域</c>
<c.magenta>根据字符串值</c>

00:21:38.732 --> 00:21:41.435
<c.magenta>如果字符串是从右向左的</c>

00:21:42.236 --> 00:21:45.205
<c.magenta>我们将实际把方向设置为从右向左</c>

00:21:45.639 --> 00:21:48.175
<c.magenta>如果是从左到右的字符串</c>
<c.magenta>我们将设置为从左到右</c>

00:21:49.276 --> 00:21:52.880
<c.magenta>或者你可以手动设置为</c>
<c.magenta>从左到右或者从右到左</c>

00:21:54.147 --> 00:21:57.150
<c.magenta>下一个属性是</c>
<c.magenta>userInterface LayoutDirection</c>

00:21:58.085 --> 00:21:59.453
<c.magenta>对于布局非常重要</c>

00:22:00.354 --> 00:22:02.422
<c.magenta>它可以从左到右或者从右到左</c>

00:22:03.757 --> 00:22:06.326
<c.magenta>系统控制如表视图要参考这个属性</c>

00:22:06.393 --> 00:22:09.263
<c.magenta>还可能做自动反转表的列之类的事</c>

00:22:09.329 --> 00:22:10.664
<c.magenta>当设置为从右向左时</c>

00:22:11.865 --> 00:22:13.867
<c.magenta>默认值根据应用值来定</c>

00:22:14.902 --> 00:22:18.138
<c.magenta>有趣的是镜像属性</c>

00:22:18.205 --> 00:22:19.673
<c.magenta>因为它有点迷惑</c>

00:22:19.973 --> 00:22:21.975
<c.magenta>若一个镜像被设为自动</c>

00:22:22.276 --> 00:22:24.244
<c.magenta>然后userInterface</c>
<c.magenta>LayoutDirection</c>

00:22:24.311 --> 00:22:25.979
<c.magenta>刚才我们看的最后一个属性</c>

00:22:26.513 --> 00:22:29.183
<c.magenta>会自动由从左到右变为从右到左</c>

00:22:29.650 --> 00:22:31.518
<c.magenta>当它是从右到左的本地化</c>

00:22:32.219 --> 00:22:33.053
<c.magenta>反之亦然</c>

00:22:34.855 --> 00:22:37.457
<c.magenta>它还会反转自动其他属性</c>

00:22:37.591 --> 00:22:39.793
<c.magenta>像按钮单元图像的位置</c>

00:22:40.093 --> 00:22:42.829
<c.magenta>按钮的图像在左面 我们会反转它</c>

00:22:42.896 --> 00:22:44.898
<c.magenta>会自动放到右面</c>

00:22:45.999 --> 00:22:49.136
<c.magenta>我们不会反转的一个属性是文本对齐</c>

00:22:49.469 --> 00:22:51.471
<c.magenta>若你设为居中</c>
<c.magenta>两端对齐或自然</c>

00:22:51.538 --> 00:22:54.541
<c.magenta>反转它们没有意义所以我们不会反转</c>

00:22:55.375 --> 00:22:57.211
<c.magenta>你可能会想</c>

00:22:57.277 --> 00:22:59.880
<c.magenta>“我什么时候不需要设置镜像？”</c>

00:23:00.013 --> 00:23:03.050
<c.magenta>你可能想设置镜像为否</c>

00:23:03.116 --> 00:23:06.353
<c.magenta>在你想要一个控制器</c>
<c.magenta>有一个非常实际的代表</c>

00:23:06.420 --> 00:23:09.356
<c.magenta>像一个播放按钮 快进按钮或快退按钮</c>

00:23:11.225 --> 00:23:12.059
<c.magenta>然后</c>

00:23:12.392 --> 00:23:15.996
<c.magenta>这些是关于Interface Builder的</c>
<c.magenta>那么在代码里你该怎么做？</c>

00:23:16.430 --> 00:23:19.533
<c.magenta>在代码里你必须参考控制器值</c>

00:23:19.600 --> 00:23:22.936
<c.magenta>关于userInterfaceLayoutDirection</c>
<c.magenta>如果它设置为从左向右</c>

00:23:23.237 --> 00:23:25.038
<c.magenta>你必须说“嘿 按钮</c>

00:23:25.205 --> 00:23:29.276
<c.magenta>我想让图片在左面</c>
<c.magenta>当从左到右本地化时</c>

00:23:29.476 --> 00:23:32.846
<c.magenta>我想设置图像在右面</c>
<c.magenta>当从右向左本地化”</c>

00:23:32.913 --> 00:23:34.615
<c.magenta>你必须手动完成设置它</c>

00:23:36.517 --> 00:23:38.652
<c.magenta>在10.12中 这个更容易了些</c>

00:23:39.086 --> 00:23:41.021
<c.magenta>我们给按钮添加了一个快捷方法</c>

00:23:41.088 --> 00:23:44.291
<c.magenta>一个初始化方法可以传入一个字符串</c>

00:23:44.358 --> 00:23:46.860
<c.magenta>一个图片 一个目标和一个动作</c>

00:23:46.927 --> 00:23:49.530
<c.magenta>还有自动反转</c>

00:23:52.432 --> 00:23:54.968
<c.magenta>这是我讲的第一部分</c>

00:23:55.035 --> 00:23:56.870
<c.magenta>下面让Jeff讲讲外观</c>

00:23:56.937 --> 00:23:59.039
<c.magenta>storyboards和</c>
<c.magenta>其他一些Mac特性</c>

00:23:59.106 --> 00:23:59.940
<c.magenta>谢谢大家</c>

00:24:05.279 --> 00:24:06.480
<c.magenta>好的 谢谢 Corbin</c>

00:24:06.780 --> 00:24:09.183
<c.magenta>在这个课程我们有大量的内容去讲</c>

00:24:09.249 --> 00:24:11.618
<c.magenta>所以现在我说说系统外观</c>

00:24:12.986 --> 00:24:13.987
<c.magenta>这里是我们的应用</c>

00:24:14.421 --> 00:24:16.256
<c.magenta>我们刚才已经看了一会儿</c>

00:24:16.323 --> 00:24:19.560
<c.magenta>我们想提升下我们的UI</c>

00:24:20.227 --> 00:24:23.797
<c.magenta>我们已经决定采用这个花哨的黑色外观</c>

00:24:25.065 --> 00:24:27.401
<c.magenta>这通常是高级应用的外观</c>

00:24:27.734 --> 00:24:30.737
<c.magenta>我们要对我们这个小演示程序有点野心</c>

00:24:32.172 --> 00:24:34.374
<c.magenta>但看看这个</c>
<c.magenta>这个看起来确实很复杂</c>

00:24:34.441 --> 00:24:37.811
<c.magenta>我们有一个完全不同的系统</c>
<c.magenta>Window Chrome</c>

00:24:38.178 --> 00:24:42.549
<c.magenta>我们要所有控制器artwork改变</c>
<c.magenta>片段控制器 按钮 滑块</c>

00:24:43.116 --> 00:24:44.885
<c.magenta>所有的文本标签</c>

00:24:45.185 --> 00:24:47.921
<c.magenta>需要从黑色字体变为浅色字体</c>

00:24:49.089 --> 00:24:50.591
<c.magenta>看起来有很多工作</c>

00:24:50.657 --> 00:24:54.294
<c.magenta>但实际上饿哦们可以用一行代码实现</c>
<c.magenta>通过使用NSAppearance</c>

00:24:55.095 --> 00:24:58.098
<c.magenta>我们需要做的是创建一个系统外观</c>

00:24:58.165 --> 00:24:59.099
<c.magenta>赋值给窗口</c>

00:24:59.166 --> 00:25:01.568
<c.magenta>会自动的应用所有的工作</c>

00:24:59.166 --> 00:25:01.568
<c.magenta>会自动的应用所有的工作</c>

00:25:01.969 --> 00:25:05.472
<c.magenta>你可以认为外观是一种颜色调节盘</c>

00:25:05.839 --> 00:25:07.074
<c.magenta>我们用来解决</c>

00:25:07.140 --> 00:25:09.977
<c.magenta>绘制所有的标准系统控制器</c>

00:25:10.043 --> 00:25:12.179
<c.magenta>还包括所有我们命名的颜色</c>

00:25:12.246 --> 00:25:14.748
<c.magenta>像标签颜色 控制器颜色</c>

00:25:15.382 --> 00:25:19.086
<c.magenta>由于这个原因</c>
<c.magenta>适时使用这些颜色很重要</c>

00:25:19.152 --> 00:25:22.289
<c.magenta>不仅更适合整个系统主题</c>

00:25:22.656 --> 00:25:25.259
<c.magenta>同时 如果以后主题变了</c>
<c.magenta>仍然适合</c>

00:25:25.325 --> 00:25:27.394
<c.magenta>或者以后你改变了你的外观</c>

00:25:28.428 --> 00:25:29.630
<c.magenta>我们仔细的看看</c>

00:25:30.097 --> 00:25:30.964
<c.magenta>这里有个面板</c>

00:25:31.031 --> 00:25:33.667
<c.magenta>有许多很棒的标签</c>
<c.magenta>控制器等等在上面</c>

00:25:34.635 --> 00:25:36.870
<c.magenta>我们只需应用暗色外观</c>

00:25:36.937 --> 00:25:38.605
<c.magenta>我们看到了相当戏剧性的变化</c>

00:25:38.972 --> 00:25:40.507
<c.magenta>控制器artwork变了</c>

00:25:40.574 --> 00:25:43.477
<c.magenta>当然其他所有的标签由深色到浅色转变</c>

00:25:44.478 --> 00:25:46.213
<c.magenta>我们可以再进一步</c>

00:25:46.280 --> 00:25:48.348
<c.magenta>应用这些很酷的活力效果</c>

00:25:48.982 --> 00:25:50.450
<c.magenta>你刚可能已注意到一个幻灯片</c>

00:25:50.517 --> 00:25:53.053
<c.magenta>那个我们应用过的外观叫做活力黑</c>

00:25:53.120 --> 00:25:55.422
<c.magenta>不是说你有义务使用“活力”</c>

00:25:55.489 --> 00:25:58.692
<c.magenta>而是说artwork在充满活力的</c>
<c.magenta>上下文中看起来很棒</c>

00:25:59.126 --> 00:26:00.994
<c.magenta>想要这种外观 你只需要</c>

00:25:59.126 --> 00:26:00.994
<c.magenta>想要这种外观 你只需要</c>

00:26:01.195 --> 00:26:04.798
<c.magenta>添加你所有控制器</c>
<c.magenta>作为NSVisualEffectView的子视图</c>

00:26:05.299 --> 00:26:07.467
<c.magenta>你会自动获得这个</c>
<c.magenta>很棒的窗口后模糊</c>

00:26:07.534 --> 00:26:10.237
<c.magenta>还有在这上面所有的</c>
<c.magenta>很酷的渲染效果</c>

00:26:11.471 --> 00:26:13.574
<c.magenta>现在 你可能认为这很棒</c>

00:26:13.674 --> 00:26:16.210
<c.magenta>但我的设计师有很酷的</c>

00:26:16.276 --> 00:26:18.679
<c.magenta>特定颜色针对我们的文本标签</c>

00:26:19.012 --> 00:26:20.714
<c.magenta>所以我不会使用标签颜色</c>

00:26:21.248 --> 00:26:24.818
<c.magenta>我也不会把其从暗变浅或者反过来</c>

00:26:24.885 --> 00:26:26.119
<c.magenta>我很好 是的 我很安全</c>

00:26:27.154 --> 00:26:29.056
<c.magenta>我们加点东西</c>

00:26:30.123 --> 00:26:33.594
<c.magenta>我们检查下</c>
<c.magenta>可访性面板</c>

00:26:33.660 --> 00:26:36.597
<c.magenta>我们会打开中间叫做</c>
<c.magenta>增加对比度的设置</c>

00:26:36.663 --> 00:26:38.565
<c.magenta>看看会对UI带来什么影响</c>

00:26:39.733 --> 00:26:42.069
<c.magenta>在左面我们有标准的面板</c>

00:26:42.636 --> 00:26:43.637
<c.magenta>但是右面我们有</c>

00:26:44.071 --> 00:26:46.139
<c.magenta>增加对比度开启的面板</c>

00:26:46.740 --> 00:26:49.309
<c.magenta>虽然我们没有反转所有颜色</c>

00:26:49.376 --> 00:26:51.512
<c.magenta>这个转换很像</c>

00:26:51.879 --> 00:26:53.780
<c.magenta>有浅变深的转换</c>

00:26:54.281 --> 00:26:57.150
<c.magenta>你可以看到窗口背景色变浅了</c>

00:26:57.317 --> 00:26:58.986
<c.magenta>在每一个层级文本都变暗了</c>

00:26:59.286 --> 00:27:01.788
<c.magenta>我们的控制器有很棒的加粗轮廓</c>

00:26:59.286 --> 00:27:01.788
<c.magenta>我们的控制器有很棒的加粗轮廓</c>

00:27:02.356 --> 00:27:04.424
<c.magenta>让它和背景区分更明显 更立体</c>

00:27:04.958 --> 00:27:07.227
<c.magenta>现在 当你用一个写死的颜色值</c>

00:27:07.628 --> 00:27:10.964
<c.magenta>我们就不能猜测</c>
<c.magenta>我们不能像这样调整设置</c>

00:27:11.498 --> 00:27:12.332
<c.magenta>所以</c>

00:27:13.133 --> 00:27:16.003
<c.magenta>如果你没有像标签颜色</c>

00:27:16.069 --> 00:27:18.772
<c.magenta>第二选择标签颜色</c>
<c.magenta>你可能在帮倒忙</c>

00:27:18.839 --> 00:27:22.543
<c.magenta>对想要在他们Mac上设置</c>
<c.magenta>像增加对比度的用户</c>

00:27:24.144 --> 00:27:27.347
<c.magenta>现在说我刚暗示的视觉效果和活力</c>

00:27:27.814 --> 00:27:30.417
<c.magenta>我们现在不会深入那个API</c>

00:27:30.484 --> 00:27:32.819
<c.magenta>但是你可以参考我们2014年的演讲</c>

00:27:33.120 --> 00:27:36.390
<c.magenta>“采用OS X Yosemite</c>
<c.magenta>新UI的高级特性”</c>

00:27:37.558 --> 00:27:38.659
<c.magenta>那是外观</c>

00:27:38.725 --> 00:27:40.827
<c.magenta>是设置你应用主题的简单方式</c>

00:27:41.128 --> 00:27:44.464
<c.magenta>同时能和整个运作系统的外观保持和谐</c>

00:27:45.465 --> 00:27:46.500
<c.magenta>下一个话题storyboards</c>

00:27:48.268 --> 00:27:50.871
<c.magenta>Storyboards</c>
<c.magenta>是一种可以让你设计</c>

00:27:50.971 --> 00:27:52.639
<c.magenta>不仅是单个组件的技术</c>

00:27:52.706 --> 00:27:54.975
<c.magenta>和构成你应用的其他视图</c>

00:27:55.042 --> 00:27:58.278
<c.magenta>并且在视觉上设计这些组件间的关系</c>

00:27:59.146 --> 00:28:00.781
<c.magenta>在这个例子中 当我说部件时</c>

00:27:59.146 --> 00:28:00.781
<c.magenta>在这个例子中 当我说部件时</c>

00:28:00.848 --> 00:28:02.683
<c.magenta>storyboards操作的控制器</c>

00:28:02.749 --> 00:28:05.285
<c.magenta>是我们的窗口控制器和视图控制器</c>

00:28:05.586 --> 00:28:07.921
<c.magenta>我们用这些segues把它们连起来</c>

00:28:07.988 --> 00:28:10.057
<c.magenta>在我的截图上的那些箭头</c>

00:28:10.524 --> 00:28:12.993
<c.magenta>segues抽象所有的胶水代码</c>

00:28:13.493 --> 00:28:15.229
<c.magenta>让这些部件放在一起</c>

00:28:15.295 --> 00:28:18.031
<c.magenta>就像添加子视图 添加约束</c>

00:28:18.398 --> 00:28:20.901
<c.magenta>创建弹出框一样方便</c>

00:28:24.571 --> 00:28:25.405
<c.magenta>现在</c>

00:28:25.873 --> 00:28:29.510
<c.magenta>一个我们需要考虑的</c>
<c.magenta>关于storyboards的是</c>

00:28:30.143 --> 00:28:31.979
<c.magenta>当我们有可分离的组件时</c>
<c.magenta>如这些</c>

00:28:32.045 --> 00:28:35.115
<c.magenta>我有一个拆分视图</c>
<c.magenta>storyboard创建的</c>

00:28:35.182 --> 00:28:37.384
<c.magenta>所有这些小组件做它们自己的事</c>

00:28:38.352 --> 00:28:42.022
<c.magenta>每一部分UI都有些数据需要用</c>

00:28:42.256 --> 00:28:43.490
<c.magenta>或者修改</c>

00:28:43.824 --> 00:28:48.529
<c.magenta>我们不能仅从一个到另一个场景</c>
<c.magenta>拖拽outlets或actions</c>

00:28:48.595 --> 00:28:49.863
<c.magenta>当然 如果我们这么做了</c>

00:28:50.130 --> 00:28:51.765
<c.magenta>它们就不是可分离的组件了</c>

00:28:51.832 --> 00:28:54.635
<c.magenta>然后我们就破坏这件事的本来目的</c>

00:28:56.136 --> 00:28:57.671
<c.magenta>有时 我们用的数据</c>

00:28:57.738 --> 00:29:00.307
<c.magenta>不是呈锥形存在于场景中</c>

00:28:57.738 --> 00:29:00.307
<c.magenta>不是呈锥形存在于场景中</c>

00:29:00.374 --> 00:29:02.176
<c.magenta>在下面的叶子节点</c>

00:29:02.376 --> 00:29:05.445
<c.magenta>有时它可能存在在窗口或者文档中</c>

00:29:05.779 --> 00:29:07.247
<c.magenta>所以我们如何传递数据</c>

00:29:07.481 --> 00:29:10.584
<c.magenta>从上直到叶子节点？</c>

00:29:12.319 --> 00:29:14.054
<c.magenta>好的 我们有几个经验法则</c>

00:29:14.288 --> 00:29:15.489
<c.magenta>不是硬性的规则</c>

00:29:15.856 --> 00:29:19.159
<c.magenta>仅是几个主意</c>
<c.magenta>我们认为对处理这个有帮助</c>

00:29:20.260 --> 00:29:21.094
<c.magenta>第一个</c>

00:29:21.395 --> 00:29:23.830
<c.magenta>依赖应该大体级联向下</c>

00:29:24.231 --> 00:29:25.332
<c.magenta>如果你想</c>

00:29:25.399 --> 00:29:27.134
<c.magenta>如果你需要某些法则</c>

00:29:27.201 --> 00:29:29.469
<c.magenta>在segues中跟随箭头</c>

00:29:30.470 --> 00:29:31.805
<c.magenta>如果没有其它</c>
<c.magenta>这让你</c>

00:29:31.872 --> 00:29:34.641
<c.magenta>在应用中有很好的单向信息流</c>

00:29:34.875 --> 00:29:36.877
<c.magenta>这让人很容易理解</c>

00:29:38.312 --> 00:29:41.515
<c.magenta>另一个是尽量减少UI结构的假设</c>

00:29:41.582 --> 00:29:43.917
<c.magenta>你写死到代码里的</c>

00:29:44.751 --> 00:29:47.955
<c.magenta>你设计完UI和storyboard</c>

00:29:48.589 --> 00:29:49.957
<c.magenta>若你在代码里写死了一些假设</c>

00:29:50.023 --> 00:29:52.426
<c.magenta>关于结构是如何放到一起的</c>

00:29:52.559 --> 00:29:54.895
<c.magenta>当你想要改变storyboard时</c>

00:29:54.962 --> 00:29:55.863
<c.magenta>你得来来回回</c>

00:29:55.929 --> 00:29:57.531
<c.magenta>修改代码和storyboard</c>

00:29:57.598 --> 00:29:59.266
<c.magenta>现在你和自己过不去</c>

00:29:59.333 --> 00:30:00.234
<c.magenta>我们不要那么做</c>

00:29:59.333 --> 00:30:00.234
<c.magenta>我们不要那么做</c>

00:30:00.400 --> 00:30:02.469
<c.magenta>让我们把代码集中在数据上</c>

00:30:02.936 --> 00:30:05.639
<c.magenta>集中在设计界面和Interface Builder上</c>

00:30:06.507 --> 00:30:08.909
<c.magenta>一个我们可以用来解决该问题的技巧是</c>

00:30:09.109 --> 00:30:12.913
<c.magenta>使用符合协议贯穿UI</c>

00:30:14.414 --> 00:30:15.415
<c.magenta>这里有个例子</c>

00:30:15.716 --> 00:30:18.619
<c.magenta>假设有一个属性</c>
<c.magenta>在窗口控制器上</c>

00:30:18.685 --> 00:30:20.954
<c.magenta>我们想自动提供那个属性</c>

00:30:21.121 --> 00:30:23.557
<c.magenta>给我们视图阶梯中理解它的任何东西</c>

00:30:24.024 --> 00:30:24.858
<c.magenta>在didSet中</c>

00:30:25.425 --> 00:30:27.528
<c.magenta>我们会调用propagate方法</c>

00:30:27.995 --> 00:30:29.930
<c.magenta>我们得到了在屏幕外</c>
<c.magenta>定义的协议</c>

00:30:29.997 --> 00:30:31.698
<c.magenta>叫作photoControllerConsumer</c>

00:30:32.266 --> 00:30:35.335
<c.magenta>这代表我知道如何使用</c>
<c.magenta>photoController</c>

00:30:36.603 --> 00:30:39.006
<c.magenta>且若我们看看</c>
<c.magenta>childViewController</c>

00:30:39.072 --> 00:30:41.942
<c.magenta>会发现它遵守了</c>
<c.magenta>我们可以设置属性的协议</c>

00:30:42.442 --> 00:30:46.513
<c.magenta>同时我们自动递归传递给其所有子项</c>

00:30:49.616 --> 00:30:50.651
<c.magenta>但是像</c>

00:30:51.685 --> 00:30:54.621
<c.magenta>弹出或者表单展示</c>

00:30:54.688 --> 00:30:56.156
<c.magenta>这些必须吗？</c>

00:30:56.657 --> 00:30:59.726
<c.magenta>当你设置这样的属性的时候</c>
<c.magenta>这些可能不存在</c>

00:31:00.160 --> 00:31:02.563
<c.magenta>我们根据需要来给</c>
<c.magenta>他们提供数据</c>

00:31:03.130 --> 00:31:04.498
<c.magenta>在他们出现在屏幕之前</c>

00:31:05.132 --> 00:31:07.768
<c.magenta>即prepare for</c>
<c.magenta>segue方法的作用</c>

00:31:08.435 --> 00:31:11.738
<c.magenta>它会在展示视图控制器或</c>
<c.magenta>窗口控制器的时候被调用</c>

00:31:11.805 --> 00:31:13.674
<c.magenta>当展示发生时</c>

00:31:14.174 --> 00:31:15.008
<c.magenta>在这个例子中</c>

00:31:15.409 --> 00:31:19.413
<c.magenta>除了做像检查或者segue标识符</c>

00:31:19.479 --> 00:31:22.816
<c.magenta>强制转换成我们希望的控制器类</c>

00:31:22.883 --> 00:31:24.785
<c.magenta>然后做些特定的设置</c>

00:31:25.052 --> 00:31:26.954
<c.magenta>这里我们做相同的事情</c>

00:31:27.387 --> 00:31:29.556
<c.magenta>我们检查什么协议被遵守</c>

00:31:29.723 --> 00:31:31.792
<c.magenta>然后设置合适的属性</c>

00:31:32.159 --> 00:31:33.694
<c.magenta>此举是</c>

00:31:33.760 --> 00:31:36.096
<c.magenta>它改变我们的逻辑从严格聚焦</c>

00:31:36.163 --> 00:31:39.466
<c.magenta>身份变为能力</c>

00:31:39.533 --> 00:31:41.134
<c.magenta>我们说我有这方面的知识</c>

00:31:41.301 --> 00:31:43.003
<c.magenta>任何展现给我的</c>

00:31:43.070 --> 00:31:45.405
<c.magenta>可以潜在自动获得那个知识</c>

00:31:45.472 --> 00:31:46.974
<c.magenta>通过一个一致的协议</c>

00:31:47.040 --> 00:31:47.975
<c.magenta>这真的很方便</c>

00:31:49.610 --> 00:31:50.577
<c.magenta>再讲讲“动作”</c>

00:31:51.311 --> 00:31:52.513
<c.magenta>那很常见</c>

00:31:52.913 --> 00:31:56.083
<c.magenta>UI中触发的处理动作的最佳对象</c>

00:31:56.350 --> 00:31:58.285
<c.magenta>实际上并没有在同一个场景</c>

00:31:58.785 --> 00:32:00.654
<c.magenta>那个控制器定义的地方</c>

00:31:58.785 --> 00:32:00.654
<c.magenta>那个控制器定义的地方</c>

00:32:01.154 --> 00:32:04.458
<c.magenta>这被它们自己的小场景中</c>
<c.magenta>菜单单元证明了</c>

00:32:05.158 --> 00:32:06.894
<c.magenta>完全从你的UI断开</c>

00:32:07.895 --> 00:32:08.729
<c.magenta>同时</c>

00:32:08.862 --> 00:32:11.732
<c.magenta>幸运的是我们有一个很棒的机制</c>
<c.magenta>来处理这种情况</c>

00:32:11.798 --> 00:32:13.300
<c.magenta>就是事件响应链</c>

00:32:13.667 --> 00:32:15.569
<c.magenta>如果你来自iOS平台</c>

00:32:15.636 --> 00:32:18.906
<c.magenta>你可能不会使用太多的事件响应链</c>

00:32:18.972 --> 00:32:21.008
<c.magenta>就是那个小的橘黄色立方体</c>

00:32:21.074 --> 00:32:23.177
<c.magenta>在每个storyboard场景上面</c>

00:32:23.243 --> 00:32:25.012
<c.magenta>它是第一个相应者的代理</c>

00:32:25.612 --> 00:32:29.616
<c.magenta>如果你关联了一个</c>
<c.magenta>控制器的动作到代理上</c>

00:32:29.850 --> 00:32:32.186
<c.magenta>它会自动的发送给响应链</c>

00:32:32.252 --> 00:32:33.520
<c.magenta>当控制器被触发</c>

00:32:34.788 --> 00:32:37.624
<c.magenta>如果在响应链中没有对象处理方法</c>
<c.magenta>怎么办？</c>

00:32:38.325 --> 00:32:40.694
<c.magenta>或者在放大的情况下</c>

00:32:41.061 --> 00:32:43.230
<c.magenta>发送动作不总是很恰当怎么办？</c>

00:32:43.697 --> 00:32:46.066
<c.magenta>例如</c>
<c.magenta>我们在最大化缩放层级</c>

00:32:46.133 --> 00:32:49.002
<c.magenta>我们不想让放大按钮不起作用</c>

00:32:49.369 --> 00:32:51.972
<c.magenta>在我们动作之前我们可以看到</c>

00:32:52.639 --> 00:32:54.274
<c.magenta>这就是UI验证的作用</c>

00:32:56.210 --> 00:33:00.047
<c.magenta>我们看看一段代码</c>
<c.magenta>会自己审查验证UI</c>

00:32:56.210 --> 00:33:00.047
<c.magenta>我们看看一段代码</c>
<c.magenta>会自己审查验证UI</c>

00:33:00.147 --> 00:33:02.149
<c.magenta>来判断一个控制器是否是可操作的</c>

00:33:02.916 --> 00:33:05.352
<c.magenta>第一步我们需要做的是</c>
<c.magenta>请求NSApp</c>

00:33:05.419 --> 00:33:08.522
<c.magenta>获得一个控制器的目标动作</c>

00:33:09.389 --> 00:33:12.059
<c.magenta>这会自动遍历响应链</c>

00:33:12.125 --> 00:33:14.962
<c.magenta>寻找实现那个动作的某个对象</c>

00:33:15.295 --> 00:33:18.665
<c.magenta>或者可能没有发现任何动作</c>
<c.magenta>甚至没有发现任何对象</c>

00:33:20.834 --> 00:33:23.237
<c.magenta>我们想要看的第一个例子的结果</c>

00:33:23.303 --> 00:33:27.374
<c.magenta>是实现NSUserInterface</c>
<c.magenta>验证协议的任何对象</c>

00:33:27.875 --> 00:33:30.277
<c.magenta>这意味着你可以主动请求</c>

00:33:30.344 --> 00:33:31.478
<c.magenta>一个控制器是否有效</c>

00:33:31.979 --> 00:33:33.847
<c.magenta>如果你在等式的另一边</c>

00:33:33.914 --> 00:33:37.184
<c.magenta>并且你有一个控制器某些条件下有效</c>

00:33:37.251 --> 00:33:38.752
<c.magenta>你可以实现这个方法</c>

00:33:38.952 --> 00:33:41.288
<c.magenta>像NSMenuItem控制器</c>
<c.magenta>和工具条单元</c>

00:33:41.355 --> 00:33:43.724
<c.magenta>会自动验证那个方法</c>

00:33:43.824 --> 00:33:45.392
<c.magenta>所以我们可以请求那个方法</c>

00:33:46.026 --> 00:33:48.595
<c.magenta>然后 当然 有些情况下</c>
<c.magenta>某个对象</c>

00:33:48.662 --> 00:33:50.831
<c.magenta>无条件处理了那个方法</c>

00:33:50.998 --> 00:33:54.935
<c.magenta>或者一个对象也没有</c>
<c.magenta>意味着我们没有准备好处理那个动作</c>

00:33:56.570 --> 00:33:58.639
<c.magenta>这是些专门应对</c>
<c.magenta>storyboards的技巧</c>

00:33:59.273 --> 00:34:01.041
<c.magenta>现在我们已经讨论了很多关于</c>

00:33:59.273 --> 00:34:01.041
<c.magenta>现在我们已经讨论了很多关于</c>

00:34:01.341 --> 00:34:05.812
<c.magenta>创建应用程序设计时间方面的事情</c>

00:34:06.046 --> 00:34:07.848
<c.magenta>我们看看一些面向用户的特性</c>

00:34:07.915 --> 00:34:10.449
<c.magenta>可以帮助你充分利用我们的平台</c>

00:34:11.217 --> 00:34:13.587
<c.magenta>首先是用户活动</c>

00:34:14.955 --> 00:34:16.889
<c.magenta>NSUserActivity</c>
<c.magenta>是这个对象</c>

00:34:17.123 --> 00:34:20.594
<c.magenta>描述了你的应用现正在做什么</c>

00:34:20.928 --> 00:34:22.728
<c.magenta>在看什么 在编辑什么</c>

00:34:23.130 --> 00:34:23.964
<c.magenta>等等</c>

00:34:24.565 --> 00:34:25.399
<c.magenta>并且</c>

00:34:25.465 --> 00:34:29.436
<c.magenta>Handoff使用这个对象使</c>
<c.magenta>这些活动在各设备间移动</c>

00:34:29.503 --> 00:34:32.239
<c.magenta>有点类似把你的整个上下文</c>
<c.magenta>在它们之间移动</c>

00:34:34.608 --> 00:34:37.610
<c.magenta>我没时间来深入看整个的API</c>

00:34:37.678 --> 00:34:40.480
<c.magenta>我想说这个对象确实比较简单</c>

00:34:41.348 --> 00:34:43.150
<c.magenta>你可用activityType</c>
<c.magenta>构造它</c>

00:34:43.250 --> 00:34:46.753
<c.magenta>它是描述你正做的</c>
<c.magenta>活动的唯一标识符</c>

00:34:46.853 --> 00:34:49.790
<c.magenta>同时也有一个密钥需要</c>
<c.magenta>放到info plist中</c>

00:34:49.857 --> 00:34:53.393
<c.magenta>声明我是个好应用</c>
<c.magenta>在其他设备上选择该活动</c>

00:34:54.561 --> 00:34:57.397
<c.magenta>然后你填充一些基本的配置信息</c>

00:34:57.464 --> 00:34:58.999
<c.magenta>来描述你的活动</c>

00:34:59.633 --> 00:35:02.636
<c.magenta>一个好的面向用户的标题</c>
<c.magenta>或者一些用户信息</c>

00:34:59.633 --> 00:35:02.636
<c.magenta>一个好的面向用户的标题</c>
<c.magenta>或者一些用户信息</c>

00:35:03.504 --> 00:35:07.007
<c.magenta>基本上只是基本的必需数据</c>

00:35:07.174 --> 00:35:09.643
<c.magenta>稍后跳回到那个任务</c>

00:35:10.244 --> 00:35:13.647
<c.magenta>我们想让这个字典一直保持较小</c>
<c.magenta>因为它需要频繁无线传送</c>

00:35:13.714 --> 00:35:16.316
<c.magenta>我们也想让handoff交互快一点</c>

00:35:17.885 --> 00:35:19.753
<c.magenta>我们也需要在代理中</c>

00:35:20.087 --> 00:35:23.657
<c.magenta>添加关于上下文的绝对最新信息</c>

00:35:23.891 --> 00:35:27.127
<c.magenta>在我们执行handoff之前</c>
<c.magenta>或前一刻</c>

00:35:27.694 --> 00:35:29.630
<c.magenta>它会被调用</c>

00:35:29.696 --> 00:35:31.532
<c.magenta>在你标记一个活动来保存后</c>

00:35:31.598 --> 00:35:34.701
<c.magenta>我们替你调用这个方法</c>
<c.magenta>这样你可以填上最新数据</c>

00:35:37.471 --> 00:35:40.274
<c.magenta>我们如何确定哪个活动</c>
<c.magenta>是当前活动？</c>

00:35:40.340 --> 00:35:42.709
<c.magenta>因为 当然 我们当然需要决定</c>

00:35:42.776 --> 00:35:44.545
<c.magenta>现在我们在看什么</c>

00:35:45.078 --> 00:35:47.548
<c.magenta>你可通过becomeCurrent</c>
<c.magenta>手动管理</c>

00:35:47.614 --> 00:35:49.950
<c.magenta>和NSUserActivity上的</c>
<c.magenta>resignCurrent方法</c>

00:35:50.551 --> 00:35:53.220
<c.magenta>就是说你可能需要跟踪你的用户</c>

00:35:53.287 --> 00:35:56.256
<c.magenta>在你的应用上</c>
<c.magenta>搞清楚他们点击了什么</c>

00:35:56.323 --> 00:35:58.125
<c.magenta>并尝试搞清楚他们在做什么</c>

00:35:58.325 --> 00:35:59.826
<c.magenta>AppKit让这些变更简单</c>

00:36:00.661 --> 00:36:02.729
<c.magenta>通过让你附上活动</c>

00:36:02.796 --> 00:36:05.032
<c.magenta>到响应链可以自动管理</c>

00:36:06.466 --> 00:36:07.367
<c.magenta>比如</c>

00:36:07.434 --> 00:36:11.171
<c.magenta>假如我们创建了一个日历应用</c>
<c.magenta>看起来就像我们的日历应用</c>

00:36:11.805 --> 00:36:15.342
<c.magenta>我们有两个活动</c>
<c.magenta>想要放到响应链</c>

00:36:15.776 --> 00:36:19.479
<c.magenta>我们有该视图更高级</c>
<c.magenta>的活动</c>

00:36:19.546 --> 00:36:21.448
<c.magenta>这整个</c>
<c.magenta>这里的这个日视图</c>

00:36:21.515 --> 00:36:24.818
<c.magenta>然后我们有一个更具体的</c>
<c.magenta>活动对这个具体的事件</c>

00:36:24.952 --> 00:36:27.754
<c.magenta>我们在这里看到</c>

00:36:29.256 --> 00:36:31.258
<c.magenta>通过添加这个到响应链</c>

00:36:31.325 --> 00:36:33.861
<c.magenta>当我们点击的那个事件</c>
<c.magenta>让它成为第一个响应者</c>

00:36:34.127 --> 00:36:36.029
<c.magenta>那个活动变成了最近的一个</c>

00:36:36.196 --> 00:36:38.665
<c.magenta>在响应链中通过第一响应者</c>

00:36:38.966 --> 00:36:40.701
<c.magenta>它自动变成了当前的</c>

00:36:42.135 --> 00:36:42.970
<c.magenta>现在</c>

00:36:43.537 --> 00:36:47.708
<c.magenta>你之前可能没考虑使用Handoff</c>
<c.magenta>或NSUserActivity API</c>

00:36:48.008 --> 00:36:50.177
<c.magenta>你可能没有iOS配套应用</c>

00:36:50.244 --> 00:36:53.514
<c.magenta>或者你不认为</c>
<c.magenta>Handoff特别引人注目</c>

00:36:53.714 --> 00:36:55.782
<c.magenta>对你的应用和你的特定的需求</c>

00:36:56.216 --> 00:36:58.652
<c.magenta>但活动不仅</c>
<c.magenta>Handoff使用</c>

00:36:59.353 --> 00:37:01.288
<c.magenta>Sierra新特性中</c>
<c.magenta>我们在Mac上引入了Siri</c>

00:36:59.353 --> 00:37:01.288
<c.magenta>Sierra新特性中</c>
<c.magenta>我们在Mac上引入了Siri</c>

00:37:01.655 --> 00:37:05.325
<c.magenta>Siri使用当前活动</c>
<c.magenta>提供上下文命令</c>

00:37:06.093 --> 00:37:09.429
<c.magenta>例如 若你说</c>
<c.magenta>在某个日期提醒我这事</c>

00:37:10.197 --> 00:37:12.733
<c.magenta>Siri会推断这个</c>
<c.magenta>是指当前活动</c>

00:37:13.033 --> 00:37:15.536
<c.magenta>其实它甚至会用</c>
<c.magenta>这个活动并把它嵌入</c>

00:37:15.769 --> 00:37:18.705
<c.magenta>到你的提醒里</c>
<c.magenta>然后你可以在未来找到它</c>

00:37:19.206 --> 00:37:21.408
<c.magenta>所以我们认为</c>
<c.magenta>活动是一种通用机制</c>

00:37:21.475 --> 00:37:24.478
<c.magenta>为了描述这一类信息</c>
<c.magenta>不仅仅是为了Handoff</c>

00:37:26.079 --> 00:37:28.081
<c.magenta>现在</c>
<c.magenta>关于Handoff API的信息</c>

00:37:28.148 --> 00:37:30.217
<c.magenta>我推荐大家看看2014的讲座</c>

00:37:30.484 --> 00:37:32.586
<c.magenta>“在OS X与iOS中</c>
<c.magenta>采用Handoff”</c>

00:37:33.820 --> 00:37:35.856
<c.magenta>它涉及到许多高级话题</c>

00:37:35.923 --> 00:37:39.560
<c.magenta>像持续流可以让你在设备间</c>
<c.magenta>传递更多数据</c>

00:37:42.696 --> 00:37:44.231
<c.magenta>下一个特性 恢复</c>

00:37:44.531 --> 00:37:46.500
<c.magenta>我们有时叫状态恢复</c>

00:37:46.934 --> 00:37:50.070
<c.magenta>它是Mac最棒的特性之一</c>
<c.magenta>当你退出一个应用</c>

00:37:50.137 --> 00:37:53.407
<c.magenta>然后重新启动它</c>
<c.magenta>它会回到你离开它时候的样子</c>

00:37:54.041 --> 00:37:55.342
<c.magenta>实际上 这个也会恢复</c>

00:37:55.676 --> 00:37:57.678
<c.magenta>如果你的应用崩溃或者重启了机器</c>

00:37:57.744 --> 00:38:00.180
<c.magenta>所有的东西恢复到之前的样子</c>

00:37:57.744 --> 00:38:00.180
<c.magenta>所有的东西恢复到之前的样子</c>

00:38:00.948 --> 00:38:02.683
<c.magenta>现在 实现这个效果</c>

00:38:04.184 --> 00:38:05.018
<c.magenta>我们需要</c>

00:38:06.286 --> 00:38:07.721
<c.magenta>保存所有的UI状态</c>

00:38:08.088 --> 00:38:09.156
<c.magenta>随着时间的推移积累</c>

00:38:09.756 --> 00:38:11.758
<c.magenta>然后恢复它</c>
<c.magenta>当应用重新启动时</c>

00:38:12.759 --> 00:38:14.895
<c.magenta>明确说我们不想在模型里保存状态</c>

00:38:14.962 --> 00:38:16.530
<c.magenta>它并不真正属于那里</c>

00:38:17.564 --> 00:38:20.067
<c.magenta>所以一个状态恢复API给你</c>

00:38:20.133 --> 00:38:22.903
<c.magenta>一个明确的地方单独保存UI状态</c>

00:38:22.970 --> 00:38:26.373
<c.magenta>它给你一个好的地方恢复那个状态</c>
<c.magenta>当你启动应用时</c>

00:38:26.673 --> 00:38:28.675
<c.magenta>但是在你的UI在屏幕上展示出来之前</c>

00:38:29.776 --> 00:38:31.311
<c.magenta>基本上你可在每个窗口启用它</c>

00:38:31.645 --> 00:38:34.081
<c.magenta>那相当简单</c>
<c.magenta>设置isRestorable为真</c>

00:38:34.715 --> 00:38:36.683
<c.magenta>然后你提供一个恢复类</c>

00:38:37.050 --> 00:38:40.888
<c.magenta>处理创建你窗口的事件</c>

00:38:41.255 --> 00:38:42.489
<c.magenta>从编码的数据中</c>

00:38:42.956 --> 00:38:46.426
<c.magenta>好消息是若你用NSDocument</c>
<c.magenta>NSDocument会处理这些</c>

00:38:48.262 --> 00:38:49.997
<c.magenta>我们想要恢复什么样的状态？</c>

00:38:50.597 --> 00:38:52.666
<c.magenta>我们可能选择保存</c>

00:38:53.066 --> 00:38:55.536
<c.magenta>当前应用中激活的工具</c>

00:38:56.436 --> 00:38:59.439
<c.magenta>我们还可能想保存侧边栏的状态</c>

00:38:59.506 --> 00:39:01.942
<c.magenta>我们选择了什么 我们滑动了多少位移</c>

00:38:59.506 --> 00:39:01.942
<c.magenta>我们选择了什么 我们滑动了多少位移</c>

00:39:03.410 --> 00:39:04.244
<c.magenta>我们如何来做？</c>

00:39:04.978 --> 00:39:08.382
<c.magenta>好吧 若你之前用过NSCoding</c>
<c.magenta>那是非常非常简单</c>

00:39:09.550 --> 00:39:13.387
<c.magenta>第一个方法</c>
<c.magenta>带有编码器的encodeRestorableState</c>

00:39:14.221 --> 00:39:16.423
<c.magenta>你可以在任何</c>
<c.magenta>NSResponder方法上实现</c>

00:39:16.490 --> 00:39:19.927
<c.magenta>并且就像使用NSCoding一样</c>
<c.magenta>但是这是为了控制器的高效率</c>

00:39:22.629 --> 00:39:25.666
<c.magenta>另一个重要的调用是</c>
<c.magenta>invalidateRestorableState</c>

00:39:26.466 --> 00:39:29.136
<c.magenta>这就是说无论如何我的</c>
<c.magenta>支持数据是什么</c>

00:39:29.570 --> 00:39:32.406
<c.magenta>对encodeRestorableState</c>
<c.magenta>已经在某种程度上改变了</c>

00:39:33.040 --> 00:39:35.442
<c.magenta>我们将安排确保再一次保存状态</c>

00:39:35.509 --> 00:39:36.610
<c.magenta>在未来的某时</c>

00:39:38.512 --> 00:39:40.214
<c.magenta>并且最终简单的恢复</c>

00:39:40.280 --> 00:39:43.183
<c.magenta>这确实像你想的一样</c>
<c.magenta>非常像initWithCoder</c>

00:39:43.951 --> 00:39:45.352
<c.magenta>你只需调用super</c>

00:39:45.686 --> 00:39:48.422
<c.magenta>解码您已编码的所有已编码的数据</c>

00:39:48.856 --> 00:39:52.025
<c.magenta>然后根据你已编码的信息</c>
<c.magenta>设置你的UI</c>

00:39:54.328 --> 00:39:57.397
<c.magenta>现在 这太容易了</c>
<c.magenta>但是可以使它变得更容易</c>

00:39:57.998 --> 00:40:01.635
<c.magenta>你只需实现一个类方法</c>
<c.magenta>restorableState KeyPaths</c>

00:39:57.998 --> 00:40:01.635
<c.magenta>你只需实现一个类方法</c>
<c.magenta>restorableState KeyPaths</c>

00:40:02.169 --> 00:40:04.671
<c.magenta>请求一下super</c>
<c.magenta>因为这是有礼貌的行为</c>

00:40:04.738 --> 00:40:06.974
<c.magenta>但接着</c>
<c.magenta>也得添加我们的关键路径</c>

00:40:07.441 --> 00:40:10.410
<c.magenta>并且这是你希望的可以自动恢复的属性</c>

00:40:10.677 --> 00:40:13.180
<c.magenta>或者通过系统存储和恢复</c>

00:40:13.714 --> 00:40:15.182
<c.magenta>这些属性需为KVC</c>

00:40:15.415 --> 00:40:18.452
<c.magenta>这些键值编码可以访问</c>
<c.magenta>就像我们通过关键路径访问</c>

00:40:18.519 --> 00:40:21.421
<c.magenta>并且它们也需要有可观察性</c>
<c.magenta>以便于我们可以随时观察它们</c>

00:40:21.855 --> 00:40:23.824
<c.magenta>当它们变得无效或者状态改变时</c>

00:40:25.692 --> 00:40:27.060
<c.magenta>这是状态恢复</c>

00:40:27.928 --> 00:40:31.131
<c.magenta>我们接下来看第三个和最后一个技术</c>
<c.magenta>在云端的文件</c>

00:40:32.165 --> 00:40:33.667
<c.magenta>很久以前</c>

00:40:34.168 --> 00:40:35.769
<c.magenta>在云端选择文件</c>

00:40:35.836 --> 00:40:38.605
<c.magenta>不得不主动选择并创建一个容器</c>

00:40:39.106 --> 00:40:42.342
<c.magenta>但伴随着iCloud Drive</c>
<c.magenta>尤其现iCloud Desktop</c>

00:40:42.409 --> 00:40:43.777
<c.magenta>和文档的发展</c>

00:40:44.111 --> 00:40:46.613
<c.magenta>很可能你的应用正使用文档</c>

00:40:46.680 --> 00:40:47.648
<c.magenta>存于云端</c>

00:40:48.515 --> 00:40:50.617
<c.magenta>这很重要</c>
<c.magenta>因为10.12版本新特性中</c>

00:40:51.151 --> 00:40:54.188
<c.magenta>本地的文件可能因为要腾出空间</c>
<c.magenta>而被移除</c>

00:40:54.555 --> 00:40:57.257
<c.magenta>这意味着你可能会正在使用一些</c>

00:40:57.558 --> 00:40:59.359
<c.magenta>并不是真的在本地硬盘上的文件</c>

00:41:00.761 --> 00:41:02.930
<c.magenta>我们如何处理这问题呢？</c>
<c.magenta>这看起来非常可怕</c>

00:41:04.331 --> 00:41:06.400
<c.magenta>幸运的是</c>
<c.magenta>若你使用NSDocument</c>

00:41:06.466 --> 00:41:08.902
<c.magenta>它将为你处理一切因此</c>
<c.magenta>你无需担心</c>

00:41:09.736 --> 00:41:12.739
<c.magenta>如果你没有使用</c>
<c.magenta>你需要确定你正使用文件协调器</c>

00:41:13.240 --> 00:41:15.709
<c.magenta>若你将自己注册为</c>
<c.magenta>文件演示者</c>

00:41:15.776 --> 00:41:17.144
<c.magenta>通过文件协调器API</c>

00:41:17.511 --> 00:41:20.514
<c.magenta>我们将确认文件没有被程序移除</c>

00:41:20.914 --> 00:41:21.882
<c.magenta>这是一件好事</c>

00:41:22.583 --> 00:41:24.484
<c.magenta>接下来如果你使用文件协调器</c>

00:41:24.785 --> 00:41:27.421
<c.magenta>来协调文件IO</c>

00:41:27.821 --> 00:41:31.525
<c.magenta>我们将会确保方便安排你的IO</c>

00:41:31.658 --> 00:41:33.827
<c.magenta>当这个文件被完全下载以后</c>

00:41:35.729 --> 00:41:37.264
<c.magenta>这些在云里的文件</c>

00:41:37.664 --> 00:41:40.400
<c.magenta>这有一些技术我们没有时间详细论述</c>

00:41:40.467 --> 00:41:42.436
<c.magenta>但是我确实想要给你们一个提示</c>

00:41:42.669 --> 00:41:44.271
<c.magenta>首先是资源目录</c>

00:41:44.705 --> 00:41:47.608
<c.magenta>比在你包里松散资源更快更小</c>

00:41:47.908 --> 00:41:51.044
<c.magenta>它们也可以帮助你</c>
<c.magenta>比如广色域和从右向左</c>

00:41:51.745 --> 00:41:54.147
<c.magenta>可访问性 十分重要</c>

00:41:54.515 --> 00:41:57.184
<c.magenta>Cocoa搭载了功能确实强大的</c>
<c.magenta>可访问性技术</c>

00:41:57.251 --> 00:41:59.353
<c.magenta>你的应用轻松拥有的技术</c>

00:41:59.586 --> 00:42:02.389
<c.magenta>你得确保</c>

00:41:59.586 --> 00:42:02.389
<c.magenta>你得确保</c>

00:42:02.456 --> 00:42:05.559
<c.magenta>学着使用voice over和</c>
<c.magenta>所有这些可访问技术十分重要</c>

00:42:05.626 --> 00:42:07.661
<c.magenta>确保你的应用做正确的事情</c>

00:42:07.794 --> 00:42:11.098
<c.magenta>你永远不应该发布一个</c>
<c.magenta>用户界面有问题的应用</c>

00:42:11.164 --> 00:42:15.002
<c.magenta>所以不要让一个UI有问题的应用上市</c>

00:42:16.670 --> 00:42:19.439
<c.magenta>沙盒和XPC服务</c>

00:42:20.007 --> 00:42:22.476
<c.magenta>两个不同的但有关连的技术</c>

00:42:22.676 --> 00:42:24.444
<c.magenta>这两个技术可以帮你隔离代码</c>

00:42:24.511 --> 00:42:26.947
<c.magenta>从系统的其他部分和其他进程中</c>

00:42:27.047 --> 00:42:29.816
<c.magenta>沙盒对于Mac</c>
<c.magenta>App Store是强制性的</c>

00:42:29.883 --> 00:42:31.818
<c.magenta>但它对每一个应用都是合适的</c>

00:42:32.786 --> 00:42:35.489
<c.magenta>XPC服务 可以帮助你分离出代码</c>

00:42:35.556 --> 00:42:36.990
<c.magenta>到分离的进程中</c>

00:42:38.158 --> 00:42:39.993
<c.magenta>这是非常棒的对一些事 如</c>

00:42:40.060 --> 00:42:43.363
<c.magenta>处理一些不可信网络的数据</c>

00:42:43.430 --> 00:42:45.465
<c.magenta>或者做一些分析工作</c>

00:42:46.667 --> 00:42:49.136
<c.magenta>我们都认为我们的代码是最棒的</c>

00:42:49.369 --> 00:42:51.271
<c.magenta>但是如我们开车时系安全带</c>

00:42:51.572 --> 00:42:54.541
<c.magenta>这样在发生问题时我们会有保障</c>

00:42:56.844 --> 00:43:01.114
<c.magenta>我们在短短的时间内讲了大量的内容</c>

00:42:56.844 --> 00:43:01.114
<c.magenta>我们在短短的时间内讲了大量的内容</c>

00:43:01.181 --> 00:43:04.151
<c.magenta>所以我想带你们重温一下重点内容</c>
<c.magenta>确保你们都还记得</c>

00:43:04.418 --> 00:43:05.686
<c.magenta>就像我们刚刚谈论的</c>

00:43:06.353 --> 00:43:09.623
<c.magenta>我们以创造一个“现代化外观”开始</c>

00:43:10.224 --> 00:43:12.359
<c.magenta>通过我们的现代化视图与窗口管道</c>

00:43:12.426 --> 00:43:14.828
<c.magenta>确保你可以做出流畅的动画</c>

00:43:15.095 --> 00:43:17.698
<c.magenta>接下来我们讲了拖放与事件追踪</c>

00:43:17.764 --> 00:43:20.901
<c.magenta>确保你得到一个非常酷的拖动群集效果</c>

00:43:20.968 --> 00:43:22.669
<c.magenta>现代化拖动</c>
<c.magenta>file promises</c>

00:43:23.370 --> 00:43:26.340
<c.magenta>接着我们讲了容器视图</c>
<c.magenta>像是滚动视图和表视图</c>

00:43:26.406 --> 00:43:28.509
<c.magenta>并且确保可以正确将其本地化</c>

00:43:29.910 --> 00:43:32.813
<c.magenta>然后我们讲了系统的外观</c>
<c.magenta>storyboards</c>

00:43:33.013 --> 00:43:35.616
<c.magenta>还有一些现代的Mac特性</c>

00:43:35.682 --> 00:43:38.519
<c.magenta>使Mac平台炫目 并且确实有益</c>

00:43:39.219 --> 00:43:42.923
<c.magenta>这有我们演讲的永久链接</c>
<c.magenta>你应该可以从这里找到相关资源</c>

00:43:42.990 --> 00:43:45.692
<c.magenta>包括我们的演示应用下载</c>

00:43:45.759 --> 00:43:47.327
<c.magenta>一旦该应用就绪</c>

00:43:48.462 --> 00:43:50.030
<c.magenta>所有相关演讲已结束</c>

00:43:50.097 --> 00:43:51.431
<c.magenta>我希望你出席了那些演讲</c>

00:43:51.498 --> 00:43:54.601
<c.magenta>如果没有</c>
<c.magenta>希望你一定要在线观看视频</c>

00:43:55.802 --> 00:43:57.404
<c.magenta>就这样</c>
<c.magenta>谢谢大家的参与</c>
