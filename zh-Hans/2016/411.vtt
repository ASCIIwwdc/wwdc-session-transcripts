WEBVTT

00:00:19.353 --> 00:00:21.755
<c.magenta>深入系统追溯</c>

00:00:29.963 --> 00:00:33.200
<c.magenta>早安 这是演讲411</c>
<c.magenta>“深入系统追溯”</c>

00:00:33.267 --> 00:00:34.301
<c.magenta>我的名字是Chad Woolf</c>

00:00:34.368 --> 00:00:35.669
<c.magenta>我是Joe Grzywacz</c>

00:00:36.036 --> 00:00:38.505
<c.magenta>我们是Apple的性能工具工程师</c>

00:00:39.273 --> 00:00:42.442
<c.magenta>去年的“深入”演讲中</c>
<c.magenta>我们谈了时间分析器</c>

00:00:42.709 --> 00:00:46.280
<c.magenta>我们向你展示了如何分析你的应用</c>
<c.magenta>直到反汇编水平</c>

00:00:46.346 --> 00:00:49.583
<c.magenta>我们的目标是向你展示</c>
<c.magenta>如何使你的代码变得尽量迅速</c>

00:00:50.250 --> 00:00:54.321
<c.magenta>有时你也许想让你的优化代码</c>
<c.magenta>运行在多个CPU上</c>

00:00:54.388 --> 00:00:56.256
<c.magenta>以完成更多工作</c>

00:00:56.890 --> 00:00:59.626
<c.magenta>但这么做的同时会增加系统负荷</c>

00:01:00.160 --> 00:01:01.962
<c.magenta>随着系统负荷增加</c>

00:01:02.296 --> 00:01:05.832
<c.magenta>一些次级反应开始显现</c>
<c.magenta>例如抢占的增加</c>

00:01:05.899 --> 00:01:08.235
<c.magenta>锁竞争和虚拟内存活动</c>

00:01:08.602 --> 00:01:11.271
<c.magenta>这三者任何一个都足以抵消</c>

00:01:11.338 --> 00:01:13.907
<c.magenta>你通过时间分析</c>
<c.magenta>获得的优化</c>

00:01:14.775 --> 00:01:17.377
<c.magenta>在今天的演讲</c>
<c.magenta>我们展示如何通过系统追溯</c>

00:01:17.444 --> 00:01:19.980
<c.magenta>分析次级反应</c>

00:01:20.414 --> 00:01:22.549
<c.magenta>我们也会展示如何有效地加载系统</c>

00:01:22.616 --> 00:01:24.952
<c.magenta>同时维持最佳性能</c>

00:01:26.053 --> 00:01:29.022
<c.magenta>我们今天的演讲是这样的</c>
<c.magenta>我们会谈到一些关于系统追溯的内容</c>

00:01:29.089 --> 00:01:31.291
<c.magenta>以及为什么它适用于应用开发者</c>

00:01:31.525 --> 00:01:33.560
<c.magenta>之后我和Joe会带你了解系统追溯</c>

00:01:33.627 --> 00:01:36.363
<c.magenta>我们会谈到线程 指示</c>

00:01:36.430 --> 00:01:37.931
<c.magenta>一点关于虚拟内存的内容</c>

00:01:38.398 --> 00:01:41.335
<c.magenta>以及展示一些最佳实例</c>
<c.magenta>告诉你如何尽可能利用工具</c>

00:01:42.636 --> 00:01:45.038
<c.magenta>为何应用开发者需要系统追溯？</c>

00:01:45.472 --> 00:01:48.642
<c.magenta>当你的应用成为设备的焦点</c>

00:01:48.942 --> 00:01:51.478
<c.magenta>从用户的角度 它就是系统</c>

00:01:52.112 --> 00:01:55.616
<c.magenta>他们不把你的应用</c>
<c.magenta>与全部这些系统服务和守护进程相等同</c>

00:01:55.682 --> 00:01:58.952
<c.magenta>共同争夺共享资源</c>
<c.magenta>如CPU时间和内存</c>

00:01:59.453 --> 00:02:00.554
<c.magenta>他们只会看到你的应用</c>

00:01:59.453 --> 00:02:00.554
<c.magenta>他们只会看到你的应用</c>

00:02:00.654 --> 00:02:04.157
<c.magenta>如果你的应用出现卡顿</c>
<c.magenta>因为紧张的虚拟内存活动</c>

00:02:04.224 --> 00:02:06.593
<c.magenta>或是因为错误优先的线程</c>

00:02:06.827 --> 00:02:09.096
<c.magenta>他们会找你以寻找解决方案</c>

00:02:09.596 --> 00:02:10.697
<c.magenta>这就是坏消息</c>

00:02:11.698 --> 00:02:12.799
<c.magenta>好消息是</c>

00:02:12.866 --> 00:02:15.269
<c.magenta>当你的应用成为设备的焦点</c>

00:02:15.335 --> 00:02:17.504
<c.magenta>它是整个设备最重要的</c>

00:02:17.804 --> 00:02:19.206
<c.magenta>操作系统知道这一点</c>

00:02:19.273 --> 00:02:22.509
<c.magenta>它会毫无保留尽可能多地分配给你</c>
<c.magenta>CPU时间和内存</c>

00:02:22.876 --> 00:02:24.845
<c.magenta>当我们谈到通过系统追溯优化</c>

00:02:25.012 --> 00:02:28.715
<c.magenta>我们不是指优化系统</c>
<c.magenta>而是优化你的应用</c>

00:02:28.782 --> 00:02:30.617
<c.magenta>使用分配所得的资源</c>

00:02:31.752 --> 00:02:33.554
<c.magenta>系统追溯</c>
<c.magenta>是Instruments的模板之一</c>

00:02:33.620 --> 00:02:35.722
<c.magenta>它可以在我们全部四个平台完美运行</c>

00:02:36.557 --> 00:02:37.724
<c.magenta>当你使用它记录</c>

00:02:37.791 --> 00:02:39.993
<c.magenta>它把内核设置成特别的追踪模式</c>

00:02:40.527 --> 00:02:43.964
<c.magenta>记录全部调度活动 系统调用</c>

00:02:44.398 --> 00:02:46.633
<c.magenta>以及发生的虚拟内存操作</c>

00:02:46.900 --> 00:02:50.070
<c.magenta>它会随时间累积</c>
<c.magenta>产生大量数据</c>

00:02:50.137 --> 00:02:52.439
<c.magenta>所以我们对Instruments 8</c>
<c.magenta>的改进之一</c>

00:02:52.506 --> 00:02:55.275
<c.magenta>是我们把模板默认地设置成</c>
<c.magenta>Windowed Mode</c>

00:02:55.843 --> 00:02:59.012
<c.magenta>这代表我们只保留前五秒左右的数据</c>

00:02:59.746 --> 00:03:02.216
<c.magenta>优势是</c>

00:02:59.746 --> 00:03:02.216
<c.magenta>优势是</c>

00:03:02.282 --> 00:03:04.785
<c.magenta>你可以开始记录 设置你的应用</c>

00:03:04.852 --> 00:03:07.888
<c.magenta>随便花多久时间来复现性能问题</c>

00:03:08.021 --> 00:03:10.257
<c.magenta>当它复现 按停止键</c>

00:03:10.324 --> 00:03:13.393
<c.magenta>然后你得到了前五秒的可行动数据</c>

00:03:14.294 --> 00:03:16.330
<c.magenta>这是这五秒数据可能的样子</c>

00:03:16.396 --> 00:03:18.098
<c.magenta>追溯记录会很密集</c>

00:03:18.498 --> 00:03:22.569
<c.magenta>我们发现它会很有用</c>
<c.magenta>如果你可以把这数据</c>

00:03:22.636 --> 00:03:25.372
<c.magenta>和你的应用里的高级活动相关联</c>

00:03:25.439 --> 00:03:27.441
<c.magenta>比如我是否在更新表视图</c>

00:03:27.508 --> 00:03:29.443
<c.magenta>后台是否在进行下载</c>

00:03:29.510 --> 00:03:31.979
<c.magenta>我是否在更新图表</c>
<c.magenta>这类高级活动</c>

00:03:32.713 --> 00:03:35.115
<c.magenta>今年在Instruments 8</c>
<c.magenta>我们新增了</c>

00:03:35.182 --> 00:03:36.783
<c.magenta>兴趣点工具</c>

00:03:37.584 --> 00:03:40.954
<c.magenta>兴趣点工具其实是一个空白的画布</c>

00:03:41.021 --> 00:03:43.757
<c.magenta>你可以告诉Instruments</c>
<c.magenta>你感兴趣的地方</c>

00:03:43.824 --> 00:03:45.592
<c.magenta>然后我们会为你把它放进图表中</c>

00:03:46.226 --> 00:03:48.862
<c.magenta>通过你的代码中使用Signpost</c>
<c.magenta>来实现这一功能</c>

00:03:50.130 --> 00:03:52.065
<c.magenta>Signposts已经发布一段时间了</c>

00:03:52.132 --> 00:03:56.370
<c.magenta>不过以往的使用方法是</c>
<c.magenta>调用这个直接系统调用</c>

00:03:56.436 --> 00:03:58.472
<c.magenta>从头文件提取这些宏</c>

00:03:58.539 --> 00:04:01.108
<c.magenta>然后把它们放在一起 这有点臃肿</c>

00:03:58.539 --> 00:04:01.108
<c.magenta>然后把它们放在一起 这有点臃肿</c>

00:04:01.708 --> 00:04:03.744
<c.magenta>不仅臃肿</c>

00:04:03.810 --> 00:04:06.680
<c.magenta>在今天的Swift世界里</c>
<c.magenta>它甚至无法运行</c>

00:04:06.747 --> 00:04:09.082
<c.magenta>我们会抛弃这个方法</c>

00:04:09.850 --> 00:04:12.619
<c.magenta>不过在新的操作系统里</c>
<c.magenta>我们增加了这些新的函数</c>

00:04:12.686 --> 00:04:15.856
<c.magenta>它们的功能完全一样</c>
<c.magenta>kdebug_signpost</c>

00:04:15.923 --> 00:04:18.591
<c.magenta>它们可以在C</c>
<c.magenta>Objective-C C++运行</c>

00:04:18.659 --> 00:04:19.860
<c.magenta>现在还可以在Swift里运行</c>

00:04:21.261 --> 00:04:24.665
<c.magenta>首先 最简单的方法是</c>
<c.magenta>把一个点事件放入时间轴</c>

00:04:24.731 --> 00:04:26.433
<c.magenta>就是这里的红色标志</c>

00:04:26.500 --> 00:04:30.437
<c.magenta>你要做的仅仅是</c>
<c.magenta>调用kdebug_signpost</c>

00:04:31.104 --> 00:04:33.140
<c.magenta>在我们的Mouse Down事件中</c>
<c.magenta>每当我们点击Mouse Down</c>

00:04:33.207 --> 00:04:35.442
<c.magenta>你会看到时间轴上出现一个标志</c>

00:04:36.043 --> 00:04:38.712
<c.magenta>它接受一些参数</c>
<c.magenta>第一个是代码</c>

00:04:39.079 --> 00:04:42.683
<c.magenta>它只是一个0到16383之间的整数</c>

00:04:42.883 --> 00:04:44.885
<c.magenta>用来帮你确定Signpost</c>

00:04:45.419 --> 00:04:48.388
<c.magenta>另外四个参数也是整数</c>
<c.magenta>可以是你想要的任何数值</c>

00:04:48.455 --> 00:04:51.225
<c.magenta>默认情况下 Instruments</c>
<c.magenta>会把它带到UI</c>

00:04:52.392 --> 00:04:53.594
<c.magenta>现你可命名这些东西</c>

00:04:53.660 --> 00:04:56.830
<c.magenta>切换到Instruments</c>
<c.magenta>的配置部分</c>

00:04:57.331 --> 00:04:58.465
<c.magenta>然后加入到表视图</c>

00:04:58.532 --> 00:05:01.535
<c.magenta>现在代码5代表Mouse Down</c>

00:04:58.532 --> 00:05:01.535
<c.magenta>现在代码5代表Mouse Down</c>

00:05:01.602 --> 00:05:03.170
<c.magenta>下次当我记录时</c>

00:05:03.237 --> 00:05:06.273
<c.magenta>我可以看到那些兴趣点</c>
<c.magenta>变成了Mouse Downs</c>

00:05:07.407 --> 00:05:09.910
<c.magenta>如果你喜欢兴趣点工具</c>
<c.magenta>你也会喜欢兴趣区域工具</c>

00:05:09.977 --> 00:05:13.280
<c.magenta>它们基本上是一样的</c>
<c.magenta>只不过它们用来记录状态和动作</c>

00:05:13.347 --> 00:05:15.382
<c.magenta>或是发生在一段时间里的事件</c>

00:05:16.016 --> 00:05:19.152
<c.magenta>它稍微复杂些</c>
<c.magenta>因为你需要两次调用而非一次</c>

00:05:19.219 --> 00:05:20.454
<c.magenta>你有一个开始和一个结束</c>

00:05:20.821 --> 00:05:23.590
<c.magenta>在Instruments里</c>
<c.magenta>还有一个配对规则</c>

00:05:23.991 --> 00:05:26.994
<c.magenta>默认情况下规则很简单</c>
<c.magenta>只是使用代码</c>

00:05:27.060 --> 00:05:28.462
<c.magenta>你只需要</c>

00:05:28.729 --> 00:05:30.831
<c.magenta>在开始和结束提供相同的代码</c>

00:05:31.899 --> 00:05:34.268
<c.magenta>我们知道这不适用于所有应用</c>

00:05:34.334 --> 00:05:36.970
<c.magenta>因为有些应用会产生一堆开始事件</c>

00:05:37.037 --> 00:05:38.539
<c.magenta>紧接着一堆结束事件</c>

00:05:38.839 --> 00:05:42.109
<c.magenta>这会导致...</c>
<c.magenta>在Instruments内</c>

00:05:42.176 --> 00:05:44.845
<c.magenta>如何把它们配对会模糊不清</c>

00:05:44.945 --> 00:05:46.780
<c.magenta>所以我们允许你改变配对规则</c>

00:05:46.847 --> 00:05:48.482
<c.magenta>来到设置页</c>

00:05:48.916 --> 00:05:52.419
<c.magenta>你可以选择代码和第一参数</c>
<c.magenta>或是代码和线程</c>

00:05:53.654 --> 00:05:56.924
<c.magenta>代码和第一参数</c>
<c.magenta>代表你的开始和结束</c>

00:05:56.990 --> 00:05:59.726
<c.magenta>需要有一样的代码和第一个参数</c>

00:06:00.294 --> 00:06:03.964
<c.magenta>在这个例子中我们并行开始了</c>
<c.magenta>一堆URL下载</c>

00:06:04.331 --> 00:06:07.401
<c.magenta>我们用了URL下载任务指针</c>

00:06:07.467 --> 00:06:09.570
<c.magenta>作为第一个参数</c>
<c.magenta>你可以看到</c>

00:06:09.636 --> 00:06:12.372
<c.magenta>Instruments时间轴上的</c>
<c.magenta>这些并行下载</c>

00:06:13.807 --> 00:06:15.075
<c.magenta>如果你使用</c>
<c.magenta>代码和线程</c>

00:06:15.742 --> 00:06:17.678
<c.magenta>你必须让</c>

00:06:17.744 --> 00:06:20.614
<c.magenta>相同代码的开始和结束</c>
<c.magenta>在同一个线程上产生</c>

00:06:21.048 --> 00:06:22.749
<c.magenta>这是一个例子</c>

00:06:23.116 --> 00:06:25.752
<c.magenta>不过你可看到它发生在</c>
<c.magenta>dispatch_apply块内</c>

00:06:25.819 --> 00:06:30.490
<c.magenta>现在我们的图表里有四个兴趣区域</c>

00:06:30.557 --> 00:06:32.893
<c.magenta>每个线程或工作线程一个</c>

00:06:34.394 --> 00:06:37.431
<c.magenta>目前你看到的兴趣区域都是红色的</c>

00:06:37.497 --> 00:06:38.565
<c.magenta>非常单调</c>

00:06:38.632 --> 00:06:40.467
<c.magenta>如果你愿意牺牲最后一个参数</c>

00:06:40.534 --> 00:06:41.668
<c.magenta>你可以来到这里</c>

00:06:42.069 --> 00:06:45.038
<c.magenta>勾选这个方格</c>
<c.magenta>用最后的参数代表颜色</c>

00:06:46.473 --> 00:06:48.509
<c.magenta>在你的第四个参数</c>
<c.magenta>你只需提供</c>

00:06:48.575 --> 00:06:51.211
<c.magenta>0到4之间的数字</c>

00:06:51.278 --> 00:06:53.413
<c.magenta>代表Instruments里的</c>
<c.magenta>五个基本颜色</c>

00:06:53.614 --> 00:06:54.715
<c.magenta>在这例子中</c>

00:06:54.781 --> 00:06:56.884
<c.magenta>当我的下载任务成功</c>

00:06:56.950 --> 00:06:58.051
<c.magenta>我把它设置为绿色</c>

00:06:58.352 --> 00:07:01.321
<c.magenta>如果完成时产生了错误</c>
<c.magenta>我把它设置为红色</c>

00:06:58.352 --> 00:07:01.321
<c.magenta>如果完成时产生了错误</c>
<c.magenta>我把它设置为红色</c>

00:07:01.388 --> 00:07:04.191
<c.magenta>这样可以清楚地区分成功和失败</c>

00:07:05.826 --> 00:07:07.060
<c.magenta>我们把这全部放在一起</c>

00:07:07.127 --> 00:07:09.496
<c.magenta>你可以看到这是多么简单</c>

00:07:09.563 --> 00:07:14.368
<c.magenta>把我之前展示的巨大复杂的追溯数据</c>
<c.magenta>和你应用中的高级活动关联起来</c>

00:07:15.068 --> 00:07:18.472
<c.magenta>比如 你可以看到</c>
<c.magenta>这一堆活动其实是</c>

00:07:18.739 --> 00:07:20.574
<c.magenta>我们的下载任务创建的</c>

00:07:21.975 --> 00:07:23.944
<c.magenta>我们来说说今天的演示应用</c>

00:07:24.244 --> 00:07:27.681
<c.magenta>今天研究的是我们给你们写好的一款</c>
<c.magenta>叫做Graphasaurus 2的应用</c>

00:07:27.748 --> 00:07:31.485
<c.magenta>它是去年演讲中</c>
<c.magenta>Graphasaurus的灵魂继承者</c>

00:07:31.852 --> 00:07:35.022
<c.magenta>和去年的演讲一样</c>
<c.magenta>我们会研究现实的问题</c>

00:07:35.088 --> 00:07:38.425
<c.magenta>这是我们优化</c>
<c.magenta>Instruments 8时遇到的问题</c>

00:07:38.625 --> 00:07:41.828
<c.magenta>我们决定把它们放进一个</c>
<c.magenta>iOS应用进行演示</c>

00:07:42.596 --> 00:07:43.797
<c.magenta>这是一个新的图形风格</c>

00:07:43.864 --> 00:07:46.600
<c.magenta>更像你在Instruments</c>
<c.magenta>所看到的状态界面的风格</c>

00:07:46.667 --> 00:07:49.303
<c.magenta>因为这是我们今年优化的东西</c>

00:07:49.870 --> 00:07:51.305
<c.magenta>另一个和去年不一样的是</c>

00:07:51.371 --> 00:07:55.142
<c.magenta>我们会假设我们的代码</c>
<c.magenta>已被时间分析了</c>

00:07:55.209 --> 00:07:57.611
<c.magenta>它已经是在目前条件约束下最优的了</c>

00:07:57.678 --> 00:07:59.980
<c.magenta>和去年一样 图表的生成</c>

00:08:00.047 --> 00:08:01.748
<c.magenta>通过Core Graphics</c>
<c.magenta>在CPU上进行</c>

00:08:03.217 --> 00:08:06.687
<c.magenta>我们首先要做的是初始计时</c>

00:08:07.254 --> 00:08:09.423
<c.magenta>我们发现生成全部四个图表</c>

00:08:09.489 --> 00:08:11.825
<c.magenta>总共会花费20毫秒</c>

00:08:12.059 --> 00:08:14.127
<c.magenta>这是在全部放大的最坏情况下的</c>

00:08:14.661 --> 00:08:17.331
<c.magenta>它超过了16毫秒的限制</c>

00:08:17.397 --> 00:08:19.166
<c.magenta>如果我们想达到每秒60帧</c>

00:08:19.233 --> 00:08:22.769
<c.magenta>我们决定需要引入些并行运行</c>

00:08:23.270 --> 00:08:24.471
<c.magenta>因为我们知道</c>

00:08:24.538 --> 00:08:27.474
<c.magenta>四个图表可以各自独立生成</c>

00:08:27.541 --> 00:08:29.843
<c.magenta>最坏情况下需要5毫秒</c>

00:08:29.910 --> 00:08:32.880
<c.magenta>如果我们把所有任务放到dispatch里</c>

00:08:32.946 --> 00:08:35.015
<c.magenta>我们有完美的扩展性</c>

00:08:35.082 --> 00:08:36.750
<c.magenta>那么在我们的双核iPad上</c>

00:08:36.817 --> 00:08:38.919
<c.magenta>应该可以把任务时间缩短一半</c>

00:08:39.686 --> 00:08:40.654
<c.magenta>为了看看效果如何</c>

00:08:40.721 --> 00:08:43.155
<c.magenta>向你展示如何使用系统追溯</c>
<c.magenta>我会交给Joe</c>

00:08:43.222 --> 00:08:44.224
<c.magenta>好的 谢谢你Chad</c>

00:08:49.997 --> 00:08:51.431
<c.magenta>你现在看到的是</c>

00:08:51.498 --> 00:08:54.835
<c.magenta>Quick Time上的镜像</c>
<c.magenta>显示的是我使用的iPad Pro</c>

00:08:54.902 --> 00:08:58.772
<c.magenta>你看到就像在Instruments里</c>
<c.magenta>你可以顺畅地滑动</c>

00:08:58.972 --> 00:09:01.108
<c.magenta>不过当我放大的时候</c>

00:08:58.972 --> 00:09:01.108
<c.magenta>不过当我放大的时候</c>

00:09:01.175 --> 00:09:04.144
<c.magenta>动画变得有些延迟</c>

00:09:04.211 --> 00:09:06.847
<c.magenta>不算糟糕 不过可以更好</c>

00:09:07.247 --> 00:09:09.917
<c.magenta>我要做的是找出为何如此</c>

00:09:09.983 --> 00:09:11.652
<c.magenta>现在打开Xcode</c>

00:09:12.686 --> 00:09:15.889
<c.magenta>按下并长按Run按钮</c>
<c.magenta>并选择Profile</c>

00:09:16.857 --> 00:09:18.792
<c.magenta>那会编译发布版本的应用</c>

00:09:19.092 --> 00:09:20.394
<c.magenta>在设备上安装</c>

00:09:20.861 --> 00:09:22.462
<c.magenta>然后Instruments会出现</c>

00:09:22.529 --> 00:09:25.332
<c.magenta>同时还有模板选择器</c>
<c.magenta>你可以选择想要使用的工具</c>

00:09:25.699 --> 00:09:28.335
<c.magenta>我们继续 双击选择</c>
<c.magenta>System Trace模板</c>

00:09:29.803 --> 00:09:32.005
<c.magenta>在这里我开始记录前</c>

00:09:32.506 --> 00:09:35.809
<c.magenta>我增加了一些</c>
<c.magenta>kdebug_signpost的起止点</c>

00:09:35.876 --> 00:09:37.044
<c.magenta>到我的代码里</c>

00:09:37.311 --> 00:09:40.247
<c.magenta>我要设置它们</c>
<c.magenta>在Instruments里出现的方式</c>

00:09:40.314 --> 00:09:42.482
<c.magenta>你需要到右下角</c>

00:09:43.083 --> 00:09:44.151
<c.magenta>在Record设置里</c>

00:09:44.218 --> 00:09:47.521
<c.magenta>开始时 我要用第一个参数设置颜色</c>

00:09:47.588 --> 00:09:50.524
<c.magenta>我在kdebug_signpost</c>
<c.magenta>添加了一些不同的数字</c>

00:09:51.024 --> 00:09:53.627
<c.magenta>并添加了三个不同的代码</c>

00:09:54.294 --> 00:09:58.365
<c.magenta>代码0是CADisplayLink</c>

00:09:58.632 --> 00:10:01.768
<c.magenta>它是用于驱动动画的60Hz计时器</c>

00:09:58.632 --> 00:10:01.768
<c.magenta>它是用于驱动动画的60Hz计时器</c>

00:10:01.835 --> 00:10:04.404
<c.magenta>基本上这个区域</c>
<c.magenta>符合我的帧时间</c>

00:10:04.471 --> 00:10:06.440
<c.magenta>因为这是我做所有渲染的地方</c>

00:10:07.274 --> 00:10:11.411
<c.magenta>下一个是代码1 它是...</c>
<c.magenta>我称之为CreatePath</c>

00:10:11.478 --> 00:10:13.247
<c.magenta>这是我实际创建CGPath的地方</c>

00:10:13.313 --> 00:10:16.683
<c.magenta>屏幕上出现的长方形和标签</c>

00:10:17.518 --> 00:10:21.321
<c.magenta>最后代码2叫做</c>
<c.magenta>RenderGraph</c>

00:10:21.555 --> 00:10:22.956
<c.magenta>指的是我把那些CGPath</c>

00:10:23.023 --> 00:10:25.559
<c.magenta>实际渲染成CGBitmapContext</c>

00:10:25.626 --> 00:10:27.227
<c.magenta>然后在屏幕上显示</c>

00:10:28.095 --> 00:10:30.564
<c.magenta>最后因为我的代码会并行运行</c>

00:10:30.631 --> 00:10:32.999
<c.magenta>它们会产生同样的代码</c>

00:10:33.200 --> 00:10:35.402
<c.magenta>我必须告诉Instruments</c>
<c.magenta>如何分辨它们</c>

00:10:35.469 --> 00:10:38.839
<c.magenta>这个情况 线程足够了</c>
<c.magenta>因为它们会运行在不同的线程</c>

00:10:39.373 --> 00:10:41.208
<c.magenta>好的 我完成了全部的配置</c>

00:10:41.275 --> 00:10:44.645
<c.magenta>我不想每次打开Instruments</c>
<c.magenta>重复做这个</c>

00:10:44.711 --> 00:10:47.414
<c.magenta>所以点击文件目录</c>
<c.magenta>然后选择保存为模板</c>

00:10:47.848 --> 00:10:49.583
<c.magenta>设置一个具有描述性的名字</c>

00:10:51.718 --> 00:10:54.254
<c.magenta>Graphasaurus System Trace</c>
<c.magenta>按下Save</c>

00:10:54.521 --> 00:10:56.924
<c.magenta>比如你关闭了这个文件</c>
<c.magenta>关闭了Instruments</c>

00:10:56.990 --> 00:11:00.294
<c.magenta>一星期后 你来到模板选择器</c>

00:10:56.990 --> 00:11:00.294
<c.magenta>一星期后 你来到模板选择器</c>

00:11:00.727 --> 00:11:02.496
<c.magenta>选择Custom标签</c>

00:11:03.297 --> 00:11:04.998
<c.magenta>你的模板就在那里可供使用</c>

00:11:05.465 --> 00:11:08.402
<c.magenta>你不用重新设置</c>
<c.magenta>直接点击Record即可</c>

00:11:09.736 --> 00:11:12.105
<c.magenta>Instruments会等我复现问题</c>

00:11:12.172 --> 00:11:14.908
<c.magenta>所以我会双指张开 就像你之前看的</c>

00:11:15.475 --> 00:11:17.177
<c.magenta>张开到产生问题为止</c>

00:11:17.244 --> 00:11:20.347
<c.magenta>我只需复现问题几秒钟</c>

00:11:20.414 --> 00:11:23.617
<c.magenta>这样它可以在视窗缓冲区</c>
<c.magenta>填充我感兴趣的数据</c>

00:11:23.684 --> 00:11:25.619
<c.magenta>做完后我停止记录</c>

00:11:25.953 --> 00:11:29.656
<c.magenta>现在Instruments</c>
<c.magenta>会从设备下载全部数据</c>

00:11:29.723 --> 00:11:31.124
<c.magenta>然后开始分析它</c>

00:11:31.291 --> 00:11:34.428
<c.magenta>因为这是窗口模式录制</c>
<c.magenta>你只会得到最后几秒的数据</c>

00:11:34.494 --> 00:11:36.763
<c.magenta>确保在你复现问题后</c>

00:11:36.830 --> 00:11:38.599
<c.magenta>立即停止记录</c>

00:11:38.665 --> 00:11:40.100
<c.magenta>不然 新的事件会出现</c>

00:11:40.167 --> 00:11:42.669
<c.magenta>挤掉你感兴趣的事件</c>

00:11:43.737 --> 00:11:46.707
<c.magenta>我们等待Instruments完成分析</c>

00:11:53.514 --> 00:11:54.348
<c.magenta>好了</c>

00:11:54.581 --> 00:11:56.650
<c.magenta>我们看到有很多东西</c>

00:11:56.783 --> 00:12:00.020
<c.magenta>我们放大一些</c>
<c.magenta>这样就能看到发生了什么</c>

00:11:56.783 --> 00:12:00.020
<c.magenta>我们放大一些</c>
<c.magenta>这样就能看到发生了什么</c>

00:12:01.021 --> 00:12:04.858
<c.magenta>好的 第一个选择的工具</c>
<c.magenta>是新的兴趣点工具</c>

00:12:04.925 --> 00:12:08.428
<c.magenta>随便放大这里的一个区域</c>

00:12:09.963 --> 00:12:13.033
<c.magenta>我们可以看到那些都是我创建的代码</c>

00:12:13.100 --> 00:12:15.869
<c.magenta>我看到DisplayLink</c>
<c.magenta>CreatePath RenderGraph</c>

00:12:15.936 --> 00:12:17.004
<c.magenta>如我想的一样</c>

00:12:17.070 --> 00:12:20.874
<c.magenta>这有一个大的蓝色的</c>
<c.magenta>CADisplayLink时间</c>

00:12:20.941 --> 00:12:24.511
<c.magenta>以及四对绿色和紫色的</c>
<c.magenta>CreatePath和RenderGraph</c>

00:12:24.778 --> 00:12:25.879
<c.magenta>看起来很好</c>

00:12:26.246 --> 00:12:28.949
<c.magenta>不过当我移动鼠标到这个部分</c>

00:12:29.016 --> 00:12:30.717
<c.magenta>你看到一个小工具提示显示你</c>

00:12:30.784 --> 00:12:33.487
<c.magenta>你提供的参数和时段</c>

00:12:33.787 --> 00:12:36.523
<c.magenta>这里我实际运行了接近30毫秒</c>

00:12:36.590 --> 00:12:38.992
<c.magenta>是我希望的速度的一半</c>

00:12:39.059 --> 00:12:39.993
<c.magenta>这可不太好</c>

00:12:40.894 --> 00:12:42.529
<c.magenta>这还只是一帧</c>
<c.magenta>我渲染了很多很多</c>

00:12:42.963 --> 00:12:44.765
<c.magenta>累积起来会是什么样子的？</c>

00:12:44.831 --> 00:12:48.101
<c.magenta>我们看这个详表</c>

00:12:48.168 --> 00:12:51.371
<c.magenta>现在显示的是按时间排序的所有区域的列表</c>

00:12:51.438 --> 00:12:54.975
<c.magenta>你可以浏览这个巨大的列表</c>
<c.magenta>看看参数等等</c>

00:12:55.576 --> 00:12:59.079
<c.magenta>我们做了一个表为你汇总</c>

00:12:59.146 --> 00:13:02.082
<c.magenta>叫做KDebug Interval</c>
<c.magenta>Signposts by Code列表</c>

00:12:59.146 --> 00:13:02.082
<c.magenta>叫做KDebug Interval</c>
<c.magenta>Signposts by Code列表</c>

00:13:02.950 --> 00:13:04.017
<c.magenta>当我选择它</c>

00:13:04.084 --> 00:13:06.553
<c.magenta>这是所有Graphasaurus 2产生的代码</c>

00:13:06.954 --> 00:13:09.022
<c.magenta>可以看到这是我的</c>
<c.magenta>CADisplayLink</c>

00:13:09.089 --> 00:13:11.358
<c.magenta>我渲染了152帧</c>

00:13:11.692 --> 00:13:14.261
<c.magenta>它们平均花费28毫秒</c>

00:13:14.328 --> 00:13:16.263
<c.magenta>所以平均运行并不好</c>

00:13:16.330 --> 00:13:19.533
<c.magenta>你可以看到最小值最大值</c>
<c.magenta>标准差之类的</c>

00:13:19.800 --> 00:13:22.436
<c.magenta>你可以通过代码旁边的聚焦按钮查看详情</c>

00:13:22.870 --> 00:13:25.405
<c.magenta>它会给你全部数据的表</c>

00:13:25.472 --> 00:13:28.809
<c.magenta>这些事件都是我的</c>
<c.magenta>CADisplayLink事件</c>

00:13:29.376 --> 00:13:32.212
<c.magenta>在这里你可以随意排序</c>

00:13:32.279 --> 00:13:35.249
<c.magenta>不同参数 任何对你的应用重要的</c>

00:13:35.315 --> 00:13:37.050
<c.magenta>这里我根据持续时间排序</c>

00:13:38.418 --> 00:13:40.354
<c.magenta>我要做的是</c>

00:13:40.420 --> 00:13:43.590
<c.magenta>选择中间某个地方的一条数据</c>

00:13:44.157 --> 00:13:47.327
<c.magenta>我想指出的是当我点击其中一行</c>

00:13:47.394 --> 00:13:49.029
<c.magenta>上面的图表会移动</c>

00:13:49.596 --> 00:13:55.802
<c.magenta>它会显示我感兴趣的区域</c>

00:13:55.869 --> 00:13:56.703
<c.magenta>就是这里</c>

00:13:56.904 --> 00:13:59.940
<c.magenta>我把蓝色视察头标放在那区域的开端</c>

00:14:00.007 --> 00:14:02.242
<c.magenta>你把下面点击的项目</c>

00:14:02.309 --> 00:14:04.111
<c.magenta>和上面追踪视图中</c>
<c.magenta>它出现的位置关联了起来</c>

00:14:04.745 --> 00:14:06.280
<c.magenta>我正在看这一帧</c>

00:14:06.380 --> 00:14:11.351
<c.magenta>你也可以按住Ctrl点击那一行</c>
<c.magenta>并选择设置时间过滤器</c>

00:14:11.885 --> 00:14:15.355
<c.magenta>它会把所有详细视图中在时间范围之外</c>
<c.magenta>的事件变成灰色</c>

00:14:15.422 --> 00:14:17.858
<c.magenta>上面的跟踪视图同样如此</c>

00:14:17.925 --> 00:14:20.627
<c.magenta>你可以用它过滤出你要的数据</c>

00:14:20.694 --> 00:14:24.031
<c.magenta>或者作为视觉上的提示</c>

00:14:24.698 --> 00:14:25.966
<c.magenta>现在完成了</c>

00:14:26.333 --> 00:14:27.601
<c.magenta>我正在看这一帧</c>

00:14:27.668 --> 00:14:30.070
<c.magenta>我可以看到我的</c>
<c.magenta>CADisplayLink在此开始</c>

00:14:30.137 --> 00:14:32.840
<c.magenta>在这里结束</c>
<c.magenta>我不知道为什么会这样</c>

00:14:32.906 --> 00:14:35.409
<c.magenta>它只会告诉你何时开始 何时结束</c>

00:14:35.475 --> 00:14:38.178
<c.magenta>你不知道你的应用是在运行</c>
<c.magenta>还是进入了睡眠状态</c>

00:14:38.245 --> 00:14:39.746
<c.magenta>从图表你无法得知</c>

00:14:39.947 --> 00:14:41.281
<c.magenta>我们必须更深入</c>

00:14:42.416 --> 00:14:44.918
<c.magenta>在Instruments工具栏的右上角</c>

00:14:45.185 --> 00:14:47.254
<c.magenta>我们目前在</c>
<c.magenta>Instruments策略</c>

00:14:47.321 --> 00:14:50.257
<c.magenta>也就是这个模板里全部的工具列表</c>

00:14:50.490 --> 00:14:54.561
<c.magenta>你可以点击这个线程数据</c>
<c.magenta>查看你应用中的全部线程</c>

00:14:55.195 --> 00:14:56.230
<c.magenta>另外</c>

00:14:56.296 --> 00:14:59.666
<c.magenta>假设我们已经在详细视图里深入查看线程</c>

00:14:59.733 --> 00:15:01.268
<c.magenta>如果你按着选项并点击</c>

00:14:59.733 --> 00:15:01.268
<c.magenta>如果你按着选项并点击</c>

00:15:01.335 --> 00:15:04.538
<c.magenta>你会看到这些可以按下的超链接</c>

00:15:04.805 --> 00:15:06.773
<c.magenta>选择线程策略显示</c>

00:15:07.107 --> 00:15:11.545
<c.magenta>它会把你带到线程策略</c>
<c.magenta>并为你预先选择那个线程</c>

00:15:11.945 --> 00:15:14.548
<c.magenta>我们可以看到这里</c>
<c.magenta>放大它一点</c>

00:15:16.049 --> 00:15:17.751
<c.magenta>它为我们选择了主线程</c>

00:15:18.118 --> 00:15:21.255
<c.magenta>如果我看这里</c>
<c.magenta>还有许多其它的dispatch工作线程</c>

00:15:21.321 --> 00:15:23.724
<c.magenta>它们正在运行 特别是这两个</c>

00:15:24.458 --> 00:15:27.494
<c.magenta>这个和它下面的这个 正在运行很多工作</c>

00:15:27.794 --> 00:15:31.198
<c.magenta>这些都是那些出现的红点</c>

00:15:32.099 --> 00:15:36.003
<c.magenta>如果我按住选项并拖拽</c>
<c.magenta>以放大其中一个区域</c>

00:15:36.503 --> 00:15:38.505
<c.magenta>我们其实可以开始看到它们是什么</c>

00:15:38.572 --> 00:15:39.673
<c.magenta>通过把鼠标停留在它们上面</c>

00:15:40.474 --> 00:15:44.278
<c.magenta>这是一个ulock_wake系统调用</c>
<c.magenta>它从某种锁被唤醒</c>

00:15:44.411 --> 00:15:47.915
<c.magenta>这是ulock_wait系统调用</c>
<c.magenta>它正在某个锁上等待</c>

00:15:48.148 --> 00:15:51.018
<c.magenta>如果你一直把鼠标放在它们上面</c>
<c.magenta>你会看到这个模式一直重复</c>

00:15:51.084 --> 00:15:53.620
<c.magenta>有很多ulock_wait</c>
<c.magenta>和waking正发生</c>

00:15:54.254 --> 00:15:57.357
<c.magenta>如果你点击鼠标</c>
<c.magenta>你可以把视察头标定在那点</c>

00:15:57.824 --> 00:16:01.228
<c.magenta>如果你来到</c>
<c.magenta>我们称为线程和描述视图的地方</c>

00:15:57.824 --> 00:16:01.228
<c.magenta>如果你来到</c>
<c.magenta>我们称为线程和描述视图的地方</c>

00:16:02.296 --> 00:16:04.698
<c.magenta>在这张表的下面 它会给你展示</c>

00:16:04.765 --> 00:16:06.967
<c.magenta>在我点击的上面那张图里</c>

00:16:07.034 --> 00:16:08.969
<c.magenta>在这个时刻线程在做些什么</c>

00:16:09.036 --> 00:16:11.138
<c.magenta>这是一个显示了线程做的所有事的列表</c>

00:16:11.205 --> 00:16:12.840
<c.magenta>线程生命周期的故事</c>

00:16:13.173 --> 00:16:16.944
<c.magenta>这里我们可以看到wait调用之一</c>
<c.magenta>好的 那它是在哪里产生的？</c>

00:16:17.477 --> 00:16:20.180
<c.magenta>如果可能 Instruments</c>
<c.magenta>会生成一个回溯表</c>

00:16:20.247 --> 00:16:22.015
<c.magenta>串联这些系统事件</c>

00:16:22.449 --> 00:16:23.584
<c.magenta>你可以在这里找到它们</c>

00:16:24.084 --> 00:16:26.954
<c.magenta>这边右侧的扩展详情视图</c>

00:16:27.988 --> 00:16:31.792
<c.magenta>我们可以看到一些Swift代码</c>
<c.magenta>用于创建路径</c>

00:16:32.025 --> 00:16:35.529
<c.magenta>这里其实它是在创建</c>
<c.magenta>NSAttributedString</c>

00:16:36.029 --> 00:16:40.501
<c.magenta>好的 在它下面的几帧里</c>
<c.magenta>它在获取锁</c>

00:16:40.901 --> 00:16:44.137
<c.magenta>我没想到在NSAttributedString</c>
<c.magenta>里面会出现锁</c>

00:16:44.204 --> 00:16:45.305
<c.magenta>不过确实有</c>

00:16:45.639 --> 00:16:47.741
<c.magenta>那么后果是什么？</c>

00:16:48.175 --> 00:16:50.277
<c.magenta>回到线程描述视图</c>

00:16:50.344 --> 00:16:51.378
<c.magenta>看看发生了什么</c>

00:16:51.512 --> 00:16:54.615
<c.magenta>仅仅获取锁就花了109微秒</c>

00:16:54.848 --> 00:16:57.951
<c.magenta>然后我们又被阻塞了6微秒</c>

00:16:58.385 --> 00:17:00.954
<c.magenta>今年很酷的是 它会给你展示</c>

00:16:58.385 --> 00:17:00.954
<c.magenta>今年很酷的是 它会给你展示</c>

00:17:01.021 --> 00:17:03.123
<c.magenta>哪个线程使你的线程可执行</c>

00:17:03.190 --> 00:17:05.826
<c.magenta>基本上就是释放锁的线程</c>
<c.magenta>以便你可以获取它</c>

00:17:05.959 --> 00:17:12.432
<c.magenta>可以看到 一个Graphasarus线程</c>
<c.magenta>0x8468b让它进入可执行状态</c>

00:17:12.499 --> 00:17:16.236
<c.magenta>好的 我们可以看见就算锁被释放了</c>

00:17:16.569 --> 00:17:20.307
<c.magenta>在我们实际切换回CPU之前</c>
<c.magenta>还等待了98微秒</c>

00:17:21.308 --> 00:17:23.343
<c.magenta>我们看看其它线程在做什么</c>

00:17:23.410 --> 00:17:25.045
<c.magenta>为什么它释放了锁？</c>

00:17:25.345 --> 00:17:28.048
<c.magenta>按下选项点击它</c>
<c.magenta>选择在线程策略中显示</c>

00:17:28.882 --> 00:17:31.185
<c.magenta>这会选中上面的那个线程</c>

00:17:31.518 --> 00:17:33.420
<c.magenta>然后在描述视图的下面</c>

00:17:33.487 --> 00:17:35.622
<c.magenta>我们会看到线程那时在做什么</c>

00:17:35.689 --> 00:17:37.791
<c.magenta>我们看见</c>
<c.magenta>它正调用ulock_wake</c>

00:17:37.858 --> 00:17:39.526
<c.magenta>它正在释放锁</c>

00:17:39.726 --> 00:17:40.761
<c.magenta>合情合理</c>

00:17:40.827 --> 00:17:43.931
<c.magenta>我们可以看见这两个线程在并行执行</c>

00:17:43.997 --> 00:17:45.832
<c.magenta>除了它们正在这个锁上竞争</c>

00:17:45.899 --> 00:17:49.236
<c.magenta>它们实际做了很多事情 而不是只在运行</c>

00:17:49.837 --> 00:17:53.974
<c.magenta>另一个查看方式是</c>
<c.magenta>在上面的跟踪视图里</c>

00:17:54.842 --> 00:17:57.444
<c.magenta>这里可以看到线程的状态</c>

00:17:57.511 --> 00:18:00.681
<c.magenta>我把它放大一点</c>
<c.magenta>如果你悬停在这个线程状态</c>

00:17:57.511 --> 00:18:00.681
<c.magenta>我把它放大一点</c>
<c.magenta>如果你悬停在这个线程状态</c>

00:18:00.747 --> 00:18:04.017
<c.magenta>你看见它运行了这段时间 64微秒</c>

00:18:04.184 --> 00:18:06.053
<c.magenta>然后它被阻塞了一会儿</c>

00:18:06.286 --> 00:18:09.990
<c.magenta>然后很长时间它处于可运行状态</c>
<c.magenta>这代表它其实没有在运作</c>

00:18:10.057 --> 00:18:11.525
<c.magenta>最终它得以运行</c>

00:18:11.592 --> 00:18:13.060
<c.magenta>如果我们继续查看</c>

00:18:13.126 --> 00:18:15.629
<c.magenta>我们会看到这个模式不停重复</c>

00:18:15.796 --> 00:18:17.497
<c.magenta>很清楚的是</c>

00:18:17.564 --> 00:18:19.466
<c.magenta>这两个线程正在这个锁上竞争</c>

00:18:19.533 --> 00:18:22.035
<c.magenta>在这期间 我创建了很多字符串</c>

00:18:22.469 --> 00:18:24.972
<c.magenta>如果这占用了这么多时间</c>
<c.magenta>并且这么重要</c>

00:18:25.038 --> 00:18:27.341
<c.magenta>为何我不能在时间分析器</c>
<c.magenta>里看到它们</c>

00:18:27.474 --> 00:18:30.878
<c.magenta>说实话若你回去查看时间分析器</c>
<c.magenta>它确实出现了</c>

00:18:30.944 --> 00:18:35.015
<c.magenta>不过仅仅是百分之四或五左右</c>
<c.magenta>没有以红色大旗标的形式突出</c>

00:18:35.082 --> 00:18:37.484
<c.magenta>一个主要原因是这些线程</c>

00:18:37.551 --> 00:18:40.053
<c.magenta>很长时间处于被阻塞和可执行的状态</c>

00:18:40.120 --> 00:18:43.290
<c.magenta>时间分析器只是采样</c>
<c.magenta>真正在CPU上运行的东西</c>

00:18:43.690 --> 00:18:45.325
<c.magenta>所以它不会在那里出现</c>

00:18:45.592 --> 00:18:48.762
<c.magenta>为了解决问题 我需要意识到</c>

00:18:48.829 --> 00:18:52.332
<c.magenta>我只是在状态图上放了一些属性字符串</c>

00:18:52.399 --> 00:18:54.768
<c.magenta>其实没有那么多需要显示的状态</c>

00:18:54.835 --> 00:18:56.303
<c.magenta>我应该提前缓存它们</c>

00:18:56.370 --> 00:18:58.305
<c.magenta>然后在字典上查找它</c>
<c.magenta>不需要用到锁</c>

00:18:58.372 --> 00:19:00.641
<c.magenta>一切都会运行的更加顺畅</c>

00:18:58.372 --> 00:19:00.641
<c.magenta>一切都会运行的更加顺畅</c>

00:19:00.874 --> 00:19:02.142
<c.magenta>为了展示它看起来是什么样的</c>

00:19:02.409 --> 00:19:03.277
<c.magenta>我交回给Chad</c>

00:19:10.717 --> 00:19:14.154
<c.magenta>好的</c>
<c.magenta>Joe看到是一个标准的锁竞争</c>

00:19:14.221 --> 00:19:17.090
<c.magenta>我们有两个线程正在执行</c>

00:19:17.157 --> 00:19:18.992
<c.magenta>它们正在争夺共享资源</c>

00:19:19.059 --> 00:19:21.962
<c.magenta>在属性字符串创建锁的代码附近</c>

00:19:22.296 --> 00:19:25.432
<c.magenta>就算我们只持有那个锁几毫秒</c>

00:19:25.499 --> 00:19:28.602
<c.magenta>性能的折损也远比那大得多</c>

00:19:28.669 --> 00:19:32.172
<c.magenta>Joe向你展示了一些</c>
<c.magenta>不过我还要多说几句</c>

00:19:33.273 --> 00:19:37.678
<c.magenta>当你的线程处于执行状态</c>
<c.magenta>代表线程在CPU上</c>

00:19:37.744 --> 00:19:38.979
<c.magenta>它正在全速执运行</c>

00:19:39.046 --> 00:19:41.915
<c.magenta>你使用时间分析器</c>
<c.magenta>所做的所有性能优化</c>

00:19:41.982 --> 00:19:42.983
<c.magenta>现在有回报了</c>

00:19:43.684 --> 00:19:45.786
<c.magenta>在某些时刻</c>
<c.magenta>你调用ulock_wake</c>

00:19:45.853 --> 00:19:49.590
<c.magenta>在一小时段后</c>
<c.magenta>它把线程变成了阻塞状态</c>

00:19:49.923 --> 00:19:52.492
<c.magenta>这里发生的是</c>
<c.magenta>ulock_wait系统调用</c>

00:19:52.559 --> 00:19:56.430
<c.magenta>发觉那个锁正被另一个线程持有</c>

00:19:56.496 --> 00:19:59.199
<c.magenta>所以它请求内核把它移出CPU</c>

00:19:59.399 --> 00:20:03.237
<c.magenta>当它实际获得到了锁时</c>
<c.magenta>再放回CPU</c>

00:19:59.399 --> 00:20:03.237
<c.magenta>当它实际获得到了锁时</c>
<c.magenta>再放回CPU</c>

00:20:03.670 --> 00:20:07.841
<c.magenta>3.42微秒之后这确实发生了</c>
<c.magenta>我们进入了可运行状态</c>

00:20:08.675 --> 00:20:09.910
<c.magenta>但现在在可运行状态中</c>

00:20:09.977 --> 00:20:13.013
<c.magenta>这是回到CPU所消耗的时间</c>

00:20:13.714 --> 00:20:16.416
<c.magenta>你看我们在可运行状态</c>
<c.magenta>持续了约7微秒</c>

00:20:16.483 --> 00:20:20.320
<c.magenta>这是竞争锁的时间的两倍左右</c>

00:20:20.721 --> 00:20:22.756
<c.magenta>这里的额外开销太大</c>

00:20:23.123 --> 00:20:27.160
<c.magenta>另一种定量查看的方式是</c>
<c.magenta>你可以进入线程策略视图</c>

00:20:27.227 --> 00:20:28.161
<c.magenta>选择线程</c>

00:20:28.462 --> 00:20:31.298
<c.magenta>像Joe展示的一样</c>
<c.magenta>创建一个时间过滤器</c>

00:20:31.598 --> 00:20:35.335
<c.magenta>接着把详细视图部分</c>
<c.magenta>从描述切换成线程概述</c>

00:20:35.669 --> 00:20:39.373
<c.magenta>它会展示给你</c>
<c.magenta>每个线程状态所花费的时间总和</c>

00:20:39.773 --> 00:20:42.509
<c.magenta>在这个例子里</c>
<c.magenta>我们可以看到我们的线程</c>

00:20:42.576 --> 00:20:44.244
<c.magenta>只有82%的时间在运行</c>

00:20:45.045 --> 00:20:48.048
<c.magenta>这意味我们从多核还是有所收益</c>

00:20:48.115 --> 00:20:49.616
<c.magenta>我们做到了一些改进</c>

00:20:49.683 --> 00:20:51.318
<c.magenta>但这个扩展仍然不是</c>

00:20:51.385 --> 00:20:53.954
<c.magenta>我们所期待的完美的线性扩展</c>

00:20:54.087 --> 00:20:55.722
<c.magenta>还是浪费了一些时间</c>

00:20:56.857 --> 00:21:00.594
<c.magenta>当Joe采取他说的解决措施时</c>

00:20:56.857 --> 00:21:00.594
<c.magenta>当Joe采取他说的解决措施时</c>

00:21:00.661 --> 00:21:02.162
<c.magenta>会发生两件事情</c>

00:21:02.229 --> 00:21:05.065
<c.magenta>第一是UpdateGraph区域</c>

00:21:05.132 --> 00:21:07.434
<c.magenta>会变短一些</c>
<c.magenta>因为我们需要做的工作变少了</c>

00:21:07.501 --> 00:21:09.136
<c.magenta>我们对这些字符串进行了缓存</c>

00:21:09.203 --> 00:21:10.304
<c.magenta>但更重要的是</c>

00:21:10.370 --> 00:21:12.840
<c.magenta>线程没有占用100%的时间运行</c>

00:21:12.906 --> 00:21:14.708
<c.magenta>所以你可以获得完美的扩展性</c>

00:21:14.775 --> 00:21:17.077
<c.magenta>所以 当你把CPU的数量增加一倍</c>

00:21:17.144 --> 00:21:19.046
<c.magenta>那段代码的运行时间</c>
<c.magenta>会变成一半</c>

00:21:19.112 --> 00:21:19.947
<c.magenta>这非常棒</c>

00:21:20.013 --> 00:21:23.217
<c.magenta>所以 如果你有这样的一个解决方案</c>
<c.magenta>一定要设法用上它</c>

00:21:24.451 --> 00:21:25.919
<c.magenta>我们再来讲讲抢占</c>

00:21:26.186 --> 00:21:28.288
<c.magenta>在我们的例子中没有看到任何抢占</c>

00:21:28.355 --> 00:21:31.892
<c.magenta>但它在系统追踪里也十分常见</c>

00:21:32.426 --> 00:21:38.398
<c.magenta>抢占指的是</c>
<c.magenta>非自愿地把你的线程挪出CPU</c>

00:21:38.832 --> 00:21:42.836
<c.magenta>也就是说 有些其他的</c>
<c.magenta>更高优先级的工作需要CPU</c>

00:21:42.903 --> 00:21:45.806
<c.magenta>但现在没有可用的</c>
<c.magenta>于是你的线程不得不让步</c>

00:21:46.406 --> 00:21:47.975
<c.magenta>有一个例外情况</c>

00:21:48.041 --> 00:21:51.512
<c.magenta>你可能会看到</c>
<c.magenta>自愿性的抢占</c>

00:21:51.678 --> 00:21:53.347
<c.magenta>它出现在自旋锁的内部</c>

00:21:53.413 --> 00:21:56.517
<c.magenta>当一个自旋锁发现</c>
<c.magenta>它的工作没有任何推进</c>

00:21:56.583 --> 00:21:58.785
<c.magenta>它可以产生线程切换系统调用</c>

00:21:59.119 --> 00:22:02.589
<c.magenta>最终放弃它占用的</c>
<c.magenta>锁持有者的时间片</c>

00:21:59.119 --> 00:22:02.589
<c.magenta>最终放弃它占用的</c>
<c.magenta>锁持有者的时间片</c>

00:22:03.423 --> 00:22:06.627
<c.magenta>在系统追踪的线程描述里</c>

00:22:06.693 --> 00:22:08.795
<c.magenta>你会看到它调用了</c>
<c.magenta>thread_switch</c>

00:22:08.862 --> 00:22:13.233
<c.magenta>抢占的描述会说</c>
<c.magenta>它主动放弃了CPU</c>

00:22:13.300 --> 00:22:16.003
<c.magenta>而不是被移出CPU</c>

00:22:17.938 --> 00:22:21.675
<c.magenta>另一种更轻量级的抢占</c>
<c.magenta>叫做中断状态</c>

00:22:22.042 --> 00:22:25.045
<c.magenta>中断状态指的是</c>
<c.magenta>当你的线程在CPU上执行时</c>

00:22:25.112 --> 00:22:28.549
<c.magenta>CPU必须处理一个硬件中断</c>

00:22:28.882 --> 00:22:30.350
<c.magenta>所以你的线程被挂起</c>

00:22:30.417 --> 00:22:33.253
<c.magenta>中断处理程序运行</c>
<c.magenta>然后你的线程重新开始</c>

00:22:33.453 --> 00:22:35.355
<c.magenta>此时 你线程的优先级</c>
<c.magenta>起不到任何作用</c>

00:22:35.422 --> 00:22:38.025
<c.magenta>你可以具有最高优先级</c>
<c.magenta>但这也没有用</c>

00:22:38.091 --> 00:22:40.561
<c.magenta>中断始终更加优先</c>

00:22:40.727 --> 00:22:41.562
<c.magenta>好消息是</c>

00:22:41.628 --> 00:22:44.097
<c.magenta>这些通常是短暂的 几微秒而已</c>

00:22:44.164 --> 00:22:46.400
<c.magenta>通常它们不会给你的应用</c>

00:22:46.466 --> 00:22:48.802
<c.magenta>带来任何内部的性能问题</c>

00:22:48.869 --> 00:22:51.405
<c.magenta>但它们的确会出现</c>
<c.magenta>这就是为什么我想提一下</c>

00:22:51.872 --> 00:22:55.909
<c.magenta>Instruments 8的另一功能是</c>
<c.magenta>全新的系统负载工具</c>

00:22:56.743 --> 00:23:01.114
<c.magenta>这个工具可以帮助你找到系统追踪中的</c>
<c.magenta>一些高负载事件</c>

00:22:56.743 --> 00:23:01.114
<c.magenta>这个工具可以帮助你找到系统追踪中的</c>
<c.magenta>一些高负载事件</c>

00:23:01.181 --> 00:23:04.284
<c.magenta>比如会导致丢帧的事件</c>

00:23:04.885 --> 00:23:07.988
<c.magenta>它通过两种方式显示</c>
<c.magenta>第一种是下面的表视图</c>

00:23:08.222 --> 00:23:12.292
<c.magenta>它会给你展示一张图表</c>
<c.magenta>显示了调度状态的样子</c>

00:23:12.359 --> 00:23:16.463
<c.magenta>在蓝色审视线的下方</c>
<c.magenta>列出了所有可执行的线程</c>

00:23:17.431 --> 00:23:20.601
<c.magenta>你可以知道在这个时间点</c>
<c.magenta>有三个线程</c>

00:23:20.667 --> 00:23:23.170
<c.magenta>一个是内核线程 另两个是</c>
<c.magenta>Graphasaurus线程</c>

00:23:23.237 --> 00:23:26.006
<c.magenta>它们是未被阻塞的线程</c>
<c.magenta>正在尝试运行</c>

00:23:26.073 --> 00:23:28.542
<c.magenta>你可以看到它们的核心任务</c>

00:23:29.610 --> 00:23:31.345
<c.magenta>这个工具的另一个功能</c>

00:23:31.411 --> 00:23:33.680
<c.magenta>称为可交互负载平均图</c>

00:23:34.314 --> 00:23:38.886
<c.magenta>这里每一个竖条</c>
<c.magenta>代表一个时间10毫秒的窗口</c>

00:23:39.086 --> 00:23:40.287
<c.magenta>竖条的高度</c>

00:23:40.354 --> 00:23:44.157
<c.magenta>是在10毫秒期间的活动线程的平均数</c>

00:23:44.458 --> 00:23:49.062
<c.magenta>这些线程处于执行 可执行</c>
<c.magenta>被抢占或者被中断状态</c>

00:23:49.129 --> 00:23:50.898
<c.magenta>就是所有没有被阻塞的线程</c>

00:23:51.265 --> 00:23:53.667
<c.magenta>由于它是可交互负载平均</c>

00:23:53.734 --> 00:23:57.604
<c.magenta>我们只包括</c>
<c.magenta>优先级大于或等于33的线程</c>

00:23:57.905 --> 00:24:01.675
<c.magenta>因为这些线程的优先级</c>

00:23:57.905 --> 00:24:01.675
<c.magenta>因为这些线程的优先级</c>

00:24:01.742 --> 00:24:04.311
<c.magenta>足以对服务类的</c>
<c.magenta>用户交互的质量产生影响</c>

00:24:04.745 --> 00:24:06.680
<c.magenta>更明白的说</c>

00:24:06.747 --> 00:24:09.850
<c.magenta>当线程变成橘色</c>
<c.magenta>这说明你的平均负载</c>

00:24:09.917 --> 00:24:12.819
<c.magenta>已经超过了该设备上的核心数</c>

00:24:13.187 --> 00:24:15.289
<c.magenta>所以当你看到一片橘色</c>

00:24:15.355 --> 00:24:17.724
<c.magenta>你可以预测会有个丢帧发生</c>

00:24:17.791 --> 00:24:19.560
<c.magenta>你可能想放大</c>

00:24:19.860 --> 00:24:21.929
<c.magenta>这些橘色的区域</c>

00:24:21.995 --> 00:24:24.097
<c.magenta>确保正在执行的线程</c>

00:24:24.164 --> 00:24:26.466
<c.magenta>在服务质量水平上相互平衡</c>

00:24:27.968 --> 00:24:29.336
<c.magenta>当Joe修改时</c>

00:24:29.403 --> 00:24:32.206
<c.magenta>最终给负载留有了一些空间</c>
<c.magenta>我们可以添加一项新的功能</c>

00:24:32.272 --> 00:24:34.541
<c.magenta>这个新功能是悬浮标签</c>

00:24:34.608 --> 00:24:36.944
<c.magenta>类似你在Instrument</c>
<c.magenta>看到的悬浮标签</c>

00:24:37.010 --> 00:24:39.346
<c.magenta>除了Graphasaurus</c>
<c.magenta>你进行长按</c>

00:24:39.413 --> 00:24:41.515
<c.magenta>悬浮标签会跟随你的手指</c>

00:24:41.582 --> 00:24:44.785
<c.magenta>为了展示这个特性</c>
<c.magenta>我把演讲交换给Joe</c>

00:24:50.157 --> 00:24:50.991
<c.magenta>谢谢 Chad</c>

00:24:51.124 --> 00:24:53.460
<c.magenta>所以我添加了</c>
<c.magenta>NSAttributedString的解决方案</c>

00:24:53.527 --> 00:24:55.762
<c.magenta>回到了每秒60帧 看起来不错</c>

00:24:55.863 --> 00:24:57.898
<c.magenta>增加了新一代的Tool Tips事件</c>

00:24:57.965 --> 00:24:59.433
<c.magenta>再次慢了下来</c>

00:24:59.499 --> 00:25:02.536
<c.magenta>你可以看到这里和那里掉了几帧</c>

00:24:59.499 --> 00:25:02.536
<c.magenta>你可以看到这里和那里掉了几帧</c>

00:25:02.603 --> 00:25:04.071
<c.magenta>查看时间分析器</c>

00:25:04.204 --> 00:25:07.875
<c.magenta>没有什么是明显我能删除的</c>
<c.magenta>我也没有做什么额外的工作</c>

00:25:07.941 --> 00:25:10.711
<c.magenta>于是我回去 检查系统追溯</c>
<c.magenta>也就是你们现在正看到的</c>

00:25:11.078 --> 00:25:12.045
<c.magenta>在我查看追溯之前</c>

00:25:12.346 --> 00:25:14.882
<c.magenta>我新添加了一个Signpost代码</c>
<c.magenta>代码为3</c>

00:25:14.948 --> 00:25:17.084
<c.magenta>它代表GenToolTips事件</c>

00:25:17.150 --> 00:25:19.186
<c.magenta>你可以看到上面以红色显示</c>

00:25:19.753 --> 00:25:22.256
<c.magenta>我们来放大其中的一个区域</c>

00:25:26.994 --> 00:25:30.697
<c.magenta>好的 现在我们可以看到</c>
<c.magenta>这是我们新的红色柱状图</c>

00:25:30.764 --> 00:25:32.065
<c.magenta>这些GenToolTips</c>

00:25:32.266 --> 00:25:35.369
<c.magenta>我必须介绍一下我的算法的原理</c>
<c.magenta>这非常重要</c>

00:25:35.435 --> 00:25:38.172
<c.magenta>基本上每当这个</c>
<c.magenta>CADisplayLink区域开始</c>

00:25:38.338 --> 00:25:39.773
<c.magenta>对于界面上每一个图</c>

00:25:39.840 --> 00:25:43.510
<c.magenta>我对它调用异步渲染</c>

00:25:43.577 --> 00:25:47.214
<c.magenta>同时我异步生成Tool Tip字典</c>
<c.magenta>用于查询</c>

00:25:47.814 --> 00:25:50.517
<c.magenta>对于界面里的每一张图</c>
<c.magenta>我都做同样的事情</c>

00:25:50.751 --> 00:25:53.187
<c.magenta>但后来我做了一个巧妙的实现</c>

00:25:54.254 --> 00:25:56.123
<c.magenta>为了调用我的渲染</c>

00:25:56.190 --> 00:25:59.159
<c.magenta>我实际上并不需要</c>
<c.magenta>等待Tool Tip完成</c>

00:25:59.326 --> 00:26:02.429
<c.magenta>所以我创建了调度组</c>
<c.magenta>让它们只等待渲染工作</c>

00:25:59.326 --> 00:26:02.429
<c.magenta>所以我创建了调度组</c>
<c.magenta>让它们只等待渲染工作</c>

00:26:02.729 --> 00:26:05.199
<c.magenta>我们可以看到</c>
<c.magenta>它实际在这里运行地非常好</c>

00:26:05.265 --> 00:26:07.835
<c.magenta>这是我的帧的起点</c>
<c.magenta>CADisplayLink时间</c>

00:26:07.935 --> 00:26:10.204
<c.magenta>我们可以看到一些</c>
<c.magenta>Tool Tip在这工作</c>

00:26:10.404 --> 00:26:11.705
<c.magenta>我向右滑动一些</c>

00:26:11.772 --> 00:26:13.373
<c.magenta>你可以看到</c>
<c.magenta>实际上它们中有一个</c>

00:26:13.440 --> 00:26:15.676
<c.magenta>直到我的渲染帧完成</c>
<c.magenta>才刚刚开始启动</c>

00:26:15.742 --> 00:26:18.111
<c.magenta>看起来我的工作做得很好</c>
<c.magenta>我拍拍我的背</c>

00:26:18.178 --> 00:26:19.146
<c.magenta>这看起来不错</c>

00:26:20.314 --> 00:26:24.218
<c.magenta>然而当我看这里的</c>
<c.magenta>CADisplayLink时间</c>

00:26:25.652 --> 00:26:28.422
<c.magenta>它花费了17.4毫秒</c>

00:26:28.522 --> 00:26:31.725
<c.magenta>非常接近了</c>
<c.magenta>但还不是我想要的16.6毫秒</c>

00:26:32.292 --> 00:26:34.361
<c.magenta>同样 这只是一个区域</c>

00:26:34.428 --> 00:26:36.897
<c.magenta>我们来看看汇总起来怎么样</c>

00:26:37.164 --> 00:26:40.033
<c.magenta>我们回到</c>
<c.magenta>KDebug Interval Signpost by Code表</c>

00:26:40.567 --> 00:26:44.171
<c.magenta>这里可以看到我们的</c>
<c.magenta>CADisplayLinks执行了大概260次</c>

00:26:44.238 --> 00:26:47.274
<c.magenta>比我们之前要多</c>
<c.magenta>听起来不错</c>

00:26:48.242 --> 00:26:51.478
<c.magenta>16毫秒的平均水平</c>
<c.magenta>比我的16.6还要少</c>

00:26:51.545 --> 00:26:53.480
<c.magenta>这听起来相当不错</c>

00:26:53.814 --> 00:26:57.117
<c.magenta>但是 这个最大值</c>
<c.magenta>仍然是19.27左右</c>

00:26:57.584 --> 00:26:59.920
<c.magenta>如果我们看所有的单个事件</c>

00:27:01.288 --> 00:27:03.957
<c.magenta>按花费时间从长到短排列</c>

00:27:04.324 --> 00:27:05.993
<c.magenta>我们可以看到这个19毫秒的</c>

00:27:06.059 --> 00:27:07.728
<c.magenta>一堆18毫秒的</c>

00:27:07.794 --> 00:27:09.396
<c.magenta>这里是一些17毫秒的</c>

00:27:09.463 --> 00:27:10.831
<c.magenta>很多17毫秒的</c>

00:27:10.898 --> 00:27:12.165
<c.magenta>更多的是16毫秒（近17毫秒）的</c>

00:27:12.232 --> 00:27:15.335
<c.magenta>所以我们还有一些帧</c>
<c.magenta>实际渲染得太慢</c>

00:27:15.402 --> 00:27:17.504
<c.magenta>慢的不多 但还是慢了</c>

00:27:17.571 --> 00:27:19.373
<c.magenta>这意味着我们会丢帧</c>

00:27:20.073 --> 00:27:22.142
<c.magenta>这次我们该何去何从？</c>

00:27:22.609 --> 00:27:25.179
<c.magenta>我们重新深入线程策略</c>

00:27:25.245 --> 00:27:27.781
<c.magenta>观察我们所有的线程 系统调用</c>
<c.magenta>VM事件</c>

00:27:27.848 --> 00:27:29.716
<c.magenta>线程事件之类的</c>

00:27:30.350 --> 00:27:31.552
<c.magenta>但只要有可能</c>

00:27:32.119 --> 00:27:33.987
<c.magenta>这个系统跟踪模板</c>

00:27:34.054 --> 00:27:36.557
<c.magenta>有一堆工具</c>
<c.magenta>它们可以给你提供</c>

00:27:36.623 --> 00:27:40.694
<c.magenta>更高级别的汇总信息</c>
<c.magenta>一开始看看它们会很有帮助</c>

00:27:40.761 --> 00:27:44.064
<c.magenta>所以在你深入到那</c>
<c.magenta>100,000多个事件之前</c>

00:27:44.331 --> 00:27:46.533
<c.magenta>看看这些更高层次的聚合信息</c>

00:27:46.700 --> 00:27:50.504
<c.magenta>我要做的是看看这个</c>
<c.magenta>用户交互负载图</c>

00:27:50.571 --> 00:27:52.739
<c.magenta>这是该系统负载工具之一</c>

00:27:53.707 --> 00:27:57.644
<c.magenta>我们继续</c>
<c.magenta>缩小一点至合适大小</c>

00:27:57.711 --> 00:28:00.113
<c.magenta>现在我们又可以在屏幕上</c>
<c.magenta>看到所有数据</c>

00:27:57.711 --> 00:28:00.113
<c.magenta>现在我们又可以在屏幕上</c>
<c.magenta>看到所有数据</c>

00:28:01.114 --> 00:28:04.218
<c.magenta>做好这些后</c>
<c.magenta>我放大这里</c>

00:28:05.085 --> 00:28:07.855
<c.magenta>你可以看到</c>
<c.magenta>这个图里有非常多的橘色</c>

00:28:07.921 --> 00:28:09.156
<c.magenta>再放大一点</c>

00:28:09.223 --> 00:28:11.725
<c.magenta>你可以看到</c>
<c.magenta>这里有非常多的橘色</c>

00:28:11.792 --> 00:28:15.262
<c.magenta>这表示正在运行的用户交互线程</c>
<c.magenta>要比核心数多</c>

00:28:15.329 --> 00:28:18.098
<c.magenta>这些线程说</c>
<c.magenta>我有很多活 现在就要做</c>

00:28:18.165 --> 00:28:18.999
<c.magenta>给我一个CPU</c>

00:28:19.867 --> 00:28:25.138
<c.magenta>可是我们没有CPU了</c>
<c.magenta>所以这里才会是橘色</c>

00:28:25.205 --> 00:28:26.306
<c.magenta>我们放大这里</c>

00:28:26.373 --> 00:28:29.042
<c.magenta>一大片橘色的地方</c>

00:28:29.843 --> 00:28:32.779
<c.magenta>你可以看到数值</c>
<c.magenta>只需悬停在一个区域上</c>

00:28:33.280 --> 00:28:34.281
<c.magenta>放大一点点</c>

00:28:35.249 --> 00:28:37.951
<c.magenta>在这个10毫秒块里</c>

00:28:38.018 --> 00:28:41.088
<c.magenta>平均有2.84个用户交互线程</c>
<c.magenta>在尝试运行</c>

00:28:41.154 --> 00:28:42.589
<c.magenta>再次 在双核的机器上</c>

00:28:42.656 --> 00:28:46.393
<c.magenta>有0.8个线程</c>
<c.magenta>缺乏CPU时间</c>

00:28:46.460 --> 00:28:47.861
<c.magenta>这就是为什么这是橙色的</c>

00:28:47.928 --> 00:28:52.032
<c.magenta>平均来看</c>
<c.magenta>有很多区域太大</c>

00:28:52.099 --> 00:28:53.033
<c.magenta>这里实际上是四</c>

00:28:53.100 --> 00:28:55.903
<c.magenta>我们在尝试运行</c>
<c.magenta>两倍于核心数量的线程</c>

00:28:56.203 --> 00:28:58.639
<c.magenta>我们来看看</c>
<c.magenta>该区域的更多细节</c>

00:28:58.705 --> 00:29:01.542
<c.magenta>我把它挪过来一点</c>
<c.magenta>这样你就能看到了</c>

00:28:58.705 --> 00:29:01.542
<c.magenta>我把它挪过来一点</c>
<c.magenta>这样你就能看到了</c>

00:29:02.142 --> 00:29:03.610
<c.magenta>正如Chad所说</c>

00:29:03.677 --> 00:29:07.281
<c.magenta>你可以看到</c>
<c.magenta>这段时间里哪些线程在尝试运行</c>

00:29:07.347 --> 00:29:09.449
<c.magenta>点击并按住上面这里的尺标视图</c>

00:29:09.516 --> 00:29:11.618
<c.magenta>你可以来回移动这个蓝色标志头</c>

00:29:11.685 --> 00:29:13.020
<c.magenta>Instruments会告诉你</c>

00:29:13.086 --> 00:29:16.690
<c.magenta>那个时间点我们在尝试运行</c>
<c.magenta>哪些线程</c>

00:29:17.558 --> 00:29:18.959
<c.magenta>如果我们看看下面这张表</c>

00:29:19.526 --> 00:29:20.994
<c.magenta>我按照优先级排序</c>

00:29:21.461 --> 00:29:23.063
<c.magenta>我们可以看到 在这里</c>

00:29:23.130 --> 00:29:26.466
<c.magenta>有两个Graphasaurus线程</c>
<c.magenta>正在运行 不错</c>

00:29:28.001 --> 00:29:32.105
<c.magenta>有两个location D线程</c>
<c.magenta>在尝试运行 它们优先级稍低</c>

00:29:32.172 --> 00:29:33.640
<c.magenta>这是真实系统的一部分</c>

00:29:33.707 --> 00:29:36.543
<c.magenta>你会看到系统守护进程进来</c>
<c.magenta>并试图做好自己的工作</c>

00:29:36.610 --> 00:29:39.213
<c.magenta>但没关系</c>
<c.magenta>它们的优先级比我们的稍低</c>

00:29:39.279 --> 00:29:40.981
<c.magenta>所以我仍然持有CPU</c>
<c.magenta>看起来不错</c>

00:29:41.315 --> 00:29:45.052
<c.magenta>我还有第三个线程在同时运行</c>

00:29:45.319 --> 00:29:46.887
<c.magenta>尝试在同一时间运行</c>

00:29:46.954 --> 00:29:48.989
<c.magenta>但它没有得到任何CPU资源</c>

00:29:49.756 --> 00:29:53.327
<c.magenta>我知道这些线程是什么了</c>
<c.magenta>其中两个是我的渲染工作</c>

00:29:53.393 --> 00:29:56.663
<c.magenta>然后我让这第三个线程尝试</c>
<c.magenta>完成我的Tool Tip生成工作</c>

00:29:56.730 --> 00:30:00.234
<c.magenta>所以发生的是</c>
<c.magenta>它们其中之一没能获得CPU</c>

00:29:56.730 --> 00:30:00.234
<c.magenta>所以发生的是</c>
<c.magenta>它们其中之一没能获得CPU</c>

00:30:01.101 --> 00:30:04.605
<c.magenta>我们又能看到这个了</c>
<c.magenta>如果我们查看 比如 我们的一帧</c>

00:30:04.872 --> 00:30:06.974
<c.magenta>让我们回到那个兴趣点区域</c>

00:30:07.975 --> 00:30:11.278
<c.magenta>我们可以看到</c>
<c.magenta>我们在帧内进行渲染</c>

00:30:11.345 --> 00:30:15.148
<c.magenta>ToolTips的产生也是在这里</c>
<c.magenta>所以它得到了一点CPU时间</c>

00:30:15.983 --> 00:30:19.653
<c.magenta>但当它获得的CPU时间时</c>
<c.magenta>是从我的渲染这里分走的</c>

00:30:20.153 --> 00:30:24.791
<c.magenta>所以基本上我错误调度了我的工作</c>
<c.magenta>因为当我停下来想想</c>

00:30:25.225 --> 00:30:27.694
<c.magenta>我需要渲染现在就进行</c>

00:30:27.761 --> 00:30:29.763
<c.magenta>站在用户交互的级别非常有意义</c>

00:30:29.830 --> 00:30:32.833
<c.magenta>因为我希望它完美而流畅</c>
<c.magenta>60帧每秒</c>

00:30:33.033 --> 00:30:35.736
<c.magenta>但这些Tool Tip</c>
<c.magenta>它们的优先级不够高</c>

00:30:35.802 --> 00:30:37.037
<c.magenta>我确实很希望它们能尽快完成</c>

00:30:37.104 --> 00:30:39.006
<c.magenta>因为我希望</c>
<c.magenta>当用户长按屏幕的时候</c>

00:30:39.072 --> 00:30:40.107
<c.magenta>它们能立即出现</c>

00:30:40.607 --> 00:30:43.010
<c.magenta>但它们其实</c>
<c.magenta>并没有渲染工作重要</c>

00:30:43.076 --> 00:30:46.580
<c.magenta>你可以清楚的看到</c>
<c.magenta>它们拿走了一部分时间</c>

00:30:46.647 --> 00:30:50.317
<c.magenta>从CPU的给渲染分配的资源</c>
<c.magenta>现在渲染被延迟了</c>

00:30:50.384 --> 00:30:53.287
<c.magenta>就是拖慢CADisplayLink</c>
<c.magenta>时间的原因</c>

00:30:54.021 --> 00:30:57.491
<c.magenta>对于此的解决方案</c>
<c.magenta>其实非常简单</c>

00:30:57.558 --> 00:30:58.692
<c.magenta>我们回到Xcode</c>

00:30:58.926 --> 00:31:00.527
<c.magenta>这里我有个</c>
<c.magenta>ViewController类</c>

00:30:58.926 --> 00:31:00.527
<c.magenta>这里我有个</c>
<c.magenta>ViewController类</c>

00:31:00.594 --> 00:31:03.363
<c.magenta>它做的事情之一是</c>
<c.magenta>创建一个Tool Tip队列</c>

00:31:03.430 --> 00:31:05.899
<c.magenta>我们可以看到它就创建在下面这里</c>

00:31:06.600 --> 00:31:09.903
<c.magenta>这是我处理所有Tool Tip工作的地方</c>
<c.magenta>创建它的同时还包含了些属性</c>

00:31:09.970 --> 00:31:11.738
<c.magenta>其中之一是</c>
<c.magenta>它是并行的 很不错</c>

00:31:11.805 --> 00:31:14.107
<c.magenta>所以它们能在多个CPU上执行</c>
<c.magenta>如果存在的话</c>

00:31:14.174 --> 00:31:17.110
<c.magenta>它被设置为用户交互的QOS类</c>

00:31:17.177 --> 00:31:18.912
<c.magenta>这个QOS类</c>

00:31:18.979 --> 00:31:22.015
<c.magenta>和我正在进行的渲染工作相同</c>
<c.magenta>所以它们互相竞争资源</c>

00:31:22.382 --> 00:31:24.985
<c.magenta>如我所说的</c>
<c.magenta>它实际上不是那么重要</c>

00:31:25.052 --> 00:31:26.687
<c.magenta>所以我要改变这个类</c>

00:31:26.920 --> 00:31:29.590
<c.magenta>你可以在头文件中读到不同的类</c>

00:31:30.090 --> 00:31:33.760
<c.magenta>我把它降低几个级别</c>
<c.magenta>使用Utility级别的类</c>

00:31:33.827 --> 00:31:37.231
<c.magenta>这会让CPU优先做我的渲染工作</c>

00:31:37.531 --> 00:31:41.068
<c.magenta>然后当CPU有一点空闲时间</c>
<c.magenta>比如每一帧的结尾或者其它时间</c>

00:31:41.134 --> 00:31:42.436
<c.magenta>Tool Tip就会开始工作</c>

00:31:42.503 --> 00:31:45.539
<c.magenta>它们仍然处于足够高的优先级</c>
<c.magenta>当用户点击屏幕</c>

00:31:45.606 --> 00:31:46.840
<c.magenta>它们应该准备好随时运行</c>

00:31:47.007 --> 00:31:49.042
<c.magenta>为了给你们展示这是什么样子的</c>
<c.magenta>我们交还给Chad</c>

00:31:56.283 --> 00:31:59.486
<c.magenta>好的 当Joe做了这个修改</c>
<c.magenta>图表会是这个样子</c>

00:31:59.553 --> 00:32:02.155
<c.magenta>我们会发现我们的</c>
<c.magenta>CADisplayLink时间</c>

00:31:59.553 --> 00:32:02.155
<c.magenta>我们会发现我们的</c>
<c.magenta>CADisplayLink时间</c>

00:32:02.222 --> 00:32:05.559
<c.magenta>降低到了平均12.7毫秒</c>

00:32:05.626 --> 00:32:07.094
<c.magenta>是比以前好多了</c>

00:32:07.160 --> 00:32:13.133
<c.magenta>但更好的是</c>
<c.magenta>我们的最大持续时间仅为14.6毫秒</c>

00:32:13.200 --> 00:32:17.804
<c.magenta>所以我们不会丢失任何帧</c>
<c.magenta>同时我们达到了16毫秒的限制</c>

00:32:18.739 --> 00:32:23.210
<c.magenta>即使系统仍然处于过载状态</c>
<c.magenta>我们仍然能够达成</c>

00:32:23.277 --> 00:32:26.647
<c.magenta>如果你想想看</c>
<c.magenta>我们仍然在运行三个不同的线程</c>

00:32:27.147 --> 00:32:29.850
<c.magenta>但是因为我们已经</c>
<c.magenta>正确地安排了工作的优先级</c>

00:32:29.917 --> 00:32:33.387
<c.magenta>我们的GenToolTips代码</c>
<c.magenta>在下面这里 以优先级四运行</c>

00:32:33.453 --> 00:32:36.690
<c.magenta>它不会阻挡用户交互代码</c>

00:32:37.024 --> 00:32:39.793
<c.magenta>我们仍然在CPU上做了很多事情</c>

00:32:39.860 --> 00:32:41.962
<c.magenta>我们仍然有一个非常高的系统负载</c>

00:32:42.329 --> 00:32:46.900
<c.magenta>但与此同时</c>
<c.magenta>我们仍然得到了完美流畅的用户体验</c>

00:32:48.569 --> 00:32:50.137
<c.magenta>什么是服务质量真正的意义</c>

00:32:50.204 --> 00:32:52.105
<c.magenta>服务质量</c>
<c.magenta>如果你还没有看到它</c>

00:32:52.172 --> 00:32:56.109
<c.magenta>是你附加到块 队列以及线程上的属性</c>

00:32:56.577 --> 00:32:58.946
<c.magenta>基本上它用于告诉内核</c>

00:32:59.012 --> 00:33:01.815
<c.magenta>你愿意献出多少系统资源</c>

00:32:59.012 --> 00:33:01.815
<c.magenta>你愿意献出多少系统资源</c>

00:33:01.882 --> 00:33:04.585
<c.magenta>以便让某一工作快速完成</c>

00:33:05.319 --> 00:33:09.523
<c.magenta>不同的QOS类</c>
<c.magenta>会限制优先级的范围</c>

00:33:09.590 --> 00:33:13.093
<c.magenta>所以你可看到我们的Utility类</c>
<c.magenta>把它的优先级降到了四</c>

00:33:13.160 --> 00:33:16.864
<c.magenta>所以我们的用户交互代码</c>
<c.magenta>在三十多四十多的高优先级运行</c>

00:33:17.464 --> 00:33:21.468
<c.magenta>但QOS类还是可以</c>
<c.magenta>限制类似IO这类工作</c>

00:33:21.535 --> 00:33:24.271
<c.magenta>以及代码运行的CPU频率</c>

00:33:24.872 --> 00:33:27.307
<c.magenta>所以当你为你的代码</c>
<c.magenta>选择QOS时</c>

00:33:27.374 --> 00:33:29.409
<c.magenta>请非常详细地阅读文档</c>

00:33:29.476 --> 00:33:32.579
<c.magenta>并确保它</c>
<c.magenta>与你正在做的工作种类相匹配</c>

00:33:33.847 --> 00:33:36.083
<c.magenta>另一件能影响你应用性能的是</c>

00:33:36.149 --> 00:33:37.518
<c.magenta>虚拟内存错误</c>

00:33:38.051 --> 00:33:42.289
<c.magenta>随着内存压力的增加</c>
<c.magenta>它们的负载表现会变差</c>

00:33:42.689 --> 00:33:44.791
<c.magenta>但好消息是 它们是可控的</c>

00:33:45.926 --> 00:33:50.297
<c.magenta>系统跟踪拥有所有</c>
<c.magenta>为了分析虚拟内存故障所需的工具</c>

00:33:50.364 --> 00:33:51.732
<c.magenta>在线程策略里</c>

00:33:51.798 --> 00:33:54.268
<c.magenta>虚拟内存错误以这种</c>
<c.magenta>蓝色小胶囊的形式出现</c>

00:33:54.768 --> 00:33:58.238
<c.magenta>在线程描述里面</c>
<c.magenta>它会报告虚拟内存错误</c>

00:33:58.305 --> 00:34:01.208
<c.magenta>甚至附上一个回溯表</c>
<c.magenta>表明产生错误的位置</c>

00:33:58.305 --> 00:34:01.208
<c.magenta>甚至附上一个回溯表</c>
<c.magenta>表明产生错误的位置</c>

00:34:01.275 --> 00:34:02.176
<c.magenta>在代码内的什么地方</c>

00:34:03.710 --> 00:34:07.314
<c.magenta>我们也有一个工具</c>
<c.magenta>专门用来分析虚拟内存错误</c>

00:34:07.381 --> 00:34:09.550
<c.magenta>举个例子 你可以看到</c>

00:34:09.616 --> 00:34:13.620
<c.magenta>你的代码的哪些部分</c>
<c.magenta>容易产生特定的错误而不是其它错误</c>

00:34:13.687 --> 00:34:15.621
<c.magenta>比如你有一段代码</c>

00:34:15.688 --> 00:34:19.326
<c.magenta>需要进行更多的零填充</c>
<c.magenta>或者写时复制</c>

00:34:20.893 --> 00:34:23.297
<c.magenta>下一个你需要知道的</c>
<c.magenta>关于虚拟内存错误的事情是</c>

00:34:23.362 --> 00:34:26.867
<c.magenta>错误是在访问时发生的</c>
<c.magenta>而不是分配时</c>

00:34:27.501 --> 00:34:29.703
<c.magenta>所以你可以向内核</c>
<c.magenta>请求一大片内存</c>

00:34:29.770 --> 00:34:31.205
<c.magenta>比方说500M</c>

00:34:31.438 --> 00:34:34.341
<c.magenta>但实际上你并不需要</c>
<c.magenta>把它转化成物理内存</c>

00:34:34.408 --> 00:34:35.775
<c.magenta>直到你开始修改或访问</c>

00:34:35.842 --> 00:34:38.545
<c.magenta>进程中分配的相关页面</c>

00:34:38.612 --> 00:34:41.782
<c.magenta>这是你分配内存时</c>
<c.magenta>需要想到的</c>

00:34:43.250 --> 00:34:45.686
<c.magenta>另一需要知道的重要的事情是</c>
<c.magenta>虚拟内存错误</c>

00:34:45.752 --> 00:34:47.454
<c.magenta>可以通过代码内联解决</c>

00:34:47.521 --> 00:34:50.257
<c.magenta>所以你不需要进行显式调用</c>

00:34:50.324 --> 00:34:51.824
<c.magenta>来解决一个虚拟内存错误</c>

00:34:52.226 --> 00:34:55.228
<c.magenta>你需要做的是修改页面内</c>

00:34:55.295 --> 00:34:57.464
<c.magenta>任何被标需要错误处理的字节</c>

00:34:57.898 --> 00:35:00.133
<c.magenta>内核会获得你的线程控制权</c>

00:34:57.898 --> 00:35:00.133
<c.magenta>内核会获得你的线程控制权</c>

00:35:00.200 --> 00:35:03.437
<c.magenta>解决​​故障</c>
<c.magenta>然后把控制权交还给你</c>

00:35:03.704 --> 00:35:05.205
<c.magenta>当你看到这些蓝色胶囊</c>

00:35:05.272 --> 00:35:07.608
<c.magenta>在你线程策略的系统追踪里</c>

00:35:07.674 --> 00:35:08.775
<c.magenta>这就是会发生的事情</c>

00:35:10.244 --> 00:35:13.614
<c.magenta>如何处理你的应用内的</c>
<c.magenta>虚拟内存错误？</c>

00:35:14.481 --> 00:35:16.583
<c.magenta>最简单的是</c>
<c.magenta>不好意思</c>

00:35:16.917 --> 00:35:19.419
<c.magenta>最简单的是消化掉它们</c>

00:35:20.020 --> 00:35:23.457
<c.magenta>我的意思是</c>
<c.magenta>在性能预算上留足够的空间</c>

00:35:23.824 --> 00:35:27.694
<c.magenta>便于你处理一定数量的</c>
<c.magenta>虚拟内存错误</c>

00:35:27.761 --> 00:35:29.329
<c.magenta>在你达到限制之前</c>

00:35:29.730 --> 00:35:31.698
<c.magenta>这会使你的负荷更有弹性</c>

00:35:31.765 --> 00:35:33.433
<c.magenta>随着内存压力的增大</c>

00:35:33.500 --> 00:35:35.636
<c.magenta>如果你的预算足够大</c>
<c.magenta>你有足够的空间</c>

00:35:35.769 --> 00:35:38.172
<c.magenta>你不会发现性能上的差别</c>

00:35:38.238 --> 00:35:39.473
<c.magenta>现在我们发现</c>

00:35:39.540 --> 00:35:41.975
<c.magenta>有些人不设置这种松散的限制</c>

00:35:42.042 --> 00:35:43.777
<c.magenta>在其UI生成方面</c>

00:35:44.545 --> 00:35:48.682
<c.magenta>所以另一种选择是</c>
<c.magenta>尝试在后台线程解决错误</c>

00:35:49.049 --> 00:35:51.151
<c.magenta>比如说你有个游戏</c>

00:35:51.451 --> 00:35:53.754
<c.magenta>你的玩家玩到了第一关的结尾</c>

00:35:53.820 --> 00:35:55.556
<c.magenta>他们马上就要进入第二关</c>

00:35:56.123 --> 00:36:00.260
<c.magenta>你可以做的是</c>
<c.magenta>异步分配到后台队列</c>

00:35:56.123 --> 00:36:00.260
<c.magenta>你可以做的是</c>
<c.magenta>异步分配到后台队列</c>

00:36:00.861 --> 00:36:04.665
<c.magenta>然后在后台队列里</c>
<c.magenta>创建与第二关内容相关的页面</c>

00:36:04.965 --> 00:36:09.102
<c.magenta>这样当你的渲染线程</c>
<c.magenta>开始获取这些新内容时</c>

00:36:09.169 --> 00:36:10.704
<c.magenta>不会有延迟</c>

00:36:11.305 --> 00:36:14.708
<c.magenta>关于使用这种方法</c>
<c.magenta>我们在这里要给你一个警告</c>

00:36:14.775 --> 00:36:17.711
<c.magenta>确保只创建一定会用到的页</c>

00:36:17.778 --> 00:36:20.414
<c.magenta>因为如果你开始创建比所需更多的页面</c>

00:36:20.480 --> 00:36:22.683
<c.magenta>实际上会使问题变得更糟</c>

00:36:24.384 --> 00:36:26.086
<c.magenta>这就是今天的会谈内容了</c>

00:36:26.720 --> 00:36:30.424
<c.magenta>我们相信系统跟踪器</c>
<c.magenta>是时间分析器的绝佳搭档</c>

00:36:30.791 --> 00:36:32.626
<c.magenta>时间分析器可以让你的代码更快</c>

00:36:32.693 --> 00:36:36.830
<c.magenta>但系统跟踪可以让你的应用</c>
<c.magenta>更易扩展到更高的负载</c>

00:36:37.231 --> 00:36:40.033
<c.magenta>我们鼓励你在自己的应用中</c>
<c.magenta>尝试使用系统跟踪</c>

00:36:40.100 --> 00:36:42.236
<c.magenta>我们知道当使用</c>
<c.magenta>Instrument检测我们的应用时</c>

00:36:42.302 --> 00:36:44.671
<c.magenta>总能找到值得修补的地方</c>

00:36:45.038 --> 00:36:47.140
<c.magenta>如果过去你用过系统跟踪</c>

00:36:47.207 --> 00:36:50.244
<c.magenta>请你到Instruments 8</c>
<c.magenta>重新看看它</c>

00:36:50.310 --> 00:36:52.079
<c.magenta>因为我们做了一些重要的改进</c>

00:36:52.145 --> 00:36:54.581
<c.magenta>包括易用性和功能性</c>

00:36:54.648 --> 00:36:57.217
<c.magenta>我们相信它会是你的工具箱中</c>
<c.magenta>又一新的利器</c>

00:36:58.385 --> 00:37:01.321
<c.magenta>欲了解更多信息</c>
<c.magenta>这是我们411号演讲的链接</c>

00:36:58.385 --> 00:37:01.321
<c.magenta>欲了解更多信息</c>
<c.magenta>这是我们411号演讲的链接</c>

00:37:02.222 --> 00:37:03.590
<c.magenta>我们今天有一些相关演讲</c>

00:37:03.657 --> 00:37:06.393
<c.magenta>在这一周以及周五也同样有</c>

00:37:07.127 --> 00:37:08.295
<c.magenta>剩下的上午时光过得愉快</c>
