WEBVTT

00:00:20.787 --> 00:00:27.728
<c.magenta>Swift 3中使用GCD并发编程</c>

00:00:32.866 --> 00:00:33.700
<c.magenta>下午好</c>

00:00:35.035 --> 00:00:39.706
<c.magenta>今天下午 我将要和大家聊一下</c>
<c.magenta>如何结构化你的程序</c>

00:00:39.773 --> 00:00:42.910
<c.magenta>使用并发编程</c>
<c.magenta>以及我们在这一年中做了哪些东西</c>

00:00:42.976 --> 00:00:44.811
<c.magenta>在Swift 3的GCD的新特性</c>

00:00:45.546 --> 00:00:48.615
<c.magenta>我叫Matt</c>
<c.magenta>稍后Pierre会和我一起</c>

00:00:49.416 --> 00:00:51.885
<c.magenta>我们都在Apple达尔文运行时团队</c>

00:00:54.121 --> 00:00:55.822
<c.magenta>当你创建一个新的工程</c>

00:00:56.523 --> 00:00:59.026
<c.magenta>你会得到一些类似于这个的东西</c>

00:00:59.593 --> 00:01:03.363
<c.magenta>你们都有应用 那个应用有它的主线程</c>

00:00:59.593 --> 00:01:03.363
<c.magenta>你们都有应用 那个应用有它的主线程</c>

00:01:04.631 --> 00:01:07.000
<c.magenta>这个主线程用来</c>

00:01:07.067 --> 00:01:09.803
<c.magenta>运行所有生成用户界面的代码</c>

00:01:11.738 --> 00:01:15.609
<c.magenta>当你开始往应用中添加代码的时候</c>

00:01:16.043 --> 00:01:20.147
<c.magenta>你会发现应用的性能</c>
<c.magenta>会大幅度地变化</c>

00:01:20.848 --> 00:01:24.218
<c.magenta>比如 你开始引入很多工作</c>

00:01:24.284 --> 00:01:29.790
<c.magenta>像数据转换或图片处理</c>
<c.magenta>在你的主线程上</c>

00:01:30.357 --> 00:01:33.961
<c.magenta>你会发现你的用户界面变糟糕很多</c>

00:01:34.695 --> 00:01:38.899
<c.magenta>在macOS上</c>
<c.magenta>这可能会是出现不停转动的圆圈</c>

00:01:39.066 --> 00:01:41.335
<c.magenta>在iOS上</c>
<c.magenta>这可能是一些更微妙的东西</c>

00:01:41.401 --> 00:01:44.438
<c.magenta>你的用户界面会慢下来</c>
<c.magenta>或者甚至是完全停了</c>

00:01:46.707 --> 00:01:48.242
<c.magenta>我会带大家看一些基本的内容</c>

00:01:48.308 --> 00:01:51.411
<c.magenta>关于如何结构还你的应用</c>
<c.magenta>以此避免这类问题</c>

00:01:51.612 --> 00:01:56.450
<c.magenta>稍后 Pierre会上台</c>
<c.magenta>给大家谈一些更高级的话题</c>

00:01:59.019 --> 00:02:01.221
<c.magenta>那么我们应该如何处理这类问题呢？</c>

00:01:59.019 --> 00:02:01.221
<c.magenta>那么我们应该如何处理这类问题呢？</c>

00:02:05.459 --> 00:02:08.996
<c.magenta>我们要从介绍程序的多线程概念开始</c>

00:02:09.128 --> 00:02:12.232
<c.magenta>多线程允许应用中的多个部分</c>

00:02:12.299 --> 00:02:13.634
<c.magenta>在同一时刻运行</c>

00:02:14.134 --> 00:02:17.104
<c.magenta>在我们的系统中</c>
<c.magenta>你通过创建线程来实现多线程</c>

00:02:17.838 --> 00:02:20.941
<c.magenta>一个中央处理器核心</c>
<c.magenta>可以在任意时刻处理一个线程</c>

00:02:21.408 --> 00:02:23.944
<c.magenta>但是引入多线程的好处</c>

00:02:24.011 --> 00:02:26.813
<c.magenta>引入多线程的坏处</c>

00:02:26.880 --> 00:02:29.917
<c.magenta>是它会使得很难维护线程的安全性</c>

00:02:30.417 --> 00:02:32.052
<c.magenta>你新引入的其它线程</c>

00:02:32.119 --> 00:02:35.222
<c.magenta>可以观察破坏代码不变量的效果</c>

00:02:35.289 --> 00:02:37.524
<c.magenta>当你在其它线程执行操作的时候</c>

00:02:38.692 --> 00:02:40.060
<c.magenta>这变成有点问题了</c>

00:02:41.395 --> 00:02:42.329
<c.magenta>那我们如何处理呢？</c>

00:02:42.462 --> 00:02:45.933
<c.magenta>GCD是我们平台上的多线程库</c>

00:02:46.533 --> 00:02:49.536
<c.magenta>它帮你写多线程代码</c>

00:02:49.603 --> 00:02:51.872
<c.magenta>工作于所有平台</c>
<c.magenta>从Apple Watch</c>

00:02:52.239 --> 00:02:56.643
<c.magenta>到所有的iOS设备</c>
<c.magenta>Apple TV以及Mac</c>

00:02:57.911 --> 00:03:00.547
<c.magenta>所以为了帮助你 使用多线程</c>

00:02:57.911 --> 00:03:00.547
<c.magenta>所以为了帮助你 使用多线程</c>

00:03:00.614 --> 00:03:04.051
<c.magenta>我们在线程上引进了一些抽象</c>

00:03:05.052 --> 00:03:08.222
<c.magenta>那是调度队列和运行循环</c>

00:03:08.755 --> 00:03:12.259
<c.magenta>调度队列是是一个结构 允许你提交</c>

00:03:12.526 --> 00:03:15.896
<c.magenta>工作项目给队列</c>
<c.magenta>在Swift中 这是闭包</c>

00:03:17.598 --> 00:03:21.635
<c.magenta>调度会带来一个线程和一个服务</c>

00:03:22.436 --> 00:03:25.405
<c.magenta>当调度结束在那个线程上</c>
<c.magenta>所有工作的运行</c>

00:03:25.472 --> 00:03:28.041
<c.magenta>它会拆毁工作线程</c>

00:03:29.009 --> 00:03:32.212
<c.magenta>正如我前面说过的</c>
<c.magenta>你也可以创建你自己的线程</c>

00:03:33.180 --> 00:03:35.215
<c.magenta>在那些线程上 你可以运行运行循环</c>

00:03:35.816 --> 00:03:40.153
<c.magenta>最后 在第一张幻灯片</c>
<c.magenta>你们有了主线程</c>

00:03:40.220 --> 00:03:41.388
<c.magenta>它是特殊的</c>

00:03:41.455 --> 00:03:44.625
<c.magenta>它同时有主运行循环和主队列</c>

00:03:46.460 --> 00:03:50.731
<c.magenta>所以调度队列有两个主要方法</c>
<c.magenta>你可以给它们提交工作</c>

00:03:51.064 --> 00:03:53.634
<c.magenta>第一个是异步执行</c>

00:03:54.368 --> 00:03:57.504
<c.magenta>你可以给多个工作项目进行排队</c>

00:03:57.571 --> 00:04:00.641
<c.magenta>给你的调度队列 然后调度</c>

00:03:57.571 --> 00:04:00.641
<c.magenta>给你的调度队列 然后调度</c>

00:04:00.941 --> 00:04:03.477
<c.magenta>会引入一个线程来执行那个工作</c>

00:04:04.878 --> 00:04:08.048
<c.magenta>调度会一个个从队列中</c>
<c.magenta>拿到项目并执行它们</c>

00:04:12.352 --> 00:04:14.454
<c.magenta>当它完成了队列中的所有项目</c>

00:04:14.521 --> 00:04:16.822
<c.magenta>系统会回收那个线程</c>

00:04:17.958 --> 00:04:21.295
<c.magenta>第二个执行模式是异步执行</c>

00:04:22.462 --> 00:04:26.500
<c.magenta>这是 比如</c>
<c.magenta>如果我们的设置和前面的一下</c>

00:04:26.567 --> 00:04:28.802
<c.magenta>调度队列有一些异步的工作</c>

00:04:29.102 --> 00:04:30.704
<c.magenta>但是你有你自己的线程</c>

00:04:30.771 --> 00:04:34.741
<c.magenta>那个线程想要在队列上运行代码</c>
<c.magenta>等待它的发生</c>

00:04:34.942 --> 00:04:38.779
<c.magenta>你可以向调度队列提交那个工作</c>

00:04:39.379 --> 00:04:40.981
<c.magenta>然后它会在那里被卡住</c>

00:04:41.348 --> 00:04:44.985
<c.magenta>它会一直等待</c>
<c.magenta>直到你要执行的那个项目完成之后</c>

00:04:45.552 --> 00:04:48.088
<c.magenta>我们可能给那个队列增加更多异步工作</c>

00:04:48.155 --> 00:04:50.190
<c.magenta>然后调度会带来一个线程</c>

00:04:50.257 --> 00:04:52.226
<c.magenta>为了服务那个队列中的项目</c>

00:04:52.826 --> 00:04:55.295
<c.magenta>同样 异步项目会被执行</c>

00:04:55.629 --> 00:04:59.132
<c.magenta>当运行你要运行的同步项目</c>

00:04:59.399 --> 00:05:03.403
<c.magenta>调度队列会对取消那个等待线程的控制</c>

00:04:59.399 --> 00:05:03.403
<c.magenta>调度队列会对取消那个等待线程的控制</c>

00:05:03.904 --> 00:05:05.138
<c.magenta>执行那个项目</c>

00:05:05.806 --> 00:05:09.510
<c.magenta>调度队列的控制会返回给一个工作线程</c>

00:05:09.576 --> 00:05:10.677
<c.magenta>通过调度来控制</c>

00:05:11.478 --> 00:05:14.248
<c.magenta>它会继续排出那个队列中的其它项目</c>

00:05:15.082 --> 00:05:17.918
<c.magenta>然后回收使用过的线程</c>

00:05:18.685 --> 00:05:21.722
<c.magenta>那么现在我已告诉你</c>
<c.magenta>如何向调度提交工作</c>

00:05:21.922 --> 00:05:25.158
<c.magenta>那么我们如何使用它</c>
<c.magenta>帮助我们解决我们前面遇到的问题呢？</c>

00:05:26.159 --> 00:05:29.596
<c.magenta>我们要做的是把工作从你的主线程拿开</c>

00:05:29.663 --> 00:05:32.266
<c.magenta>那会阻碍用户界面</c>

00:05:32.766 --> 00:05:37.037
<c.magenta>我们通过拿开主线程的转化来实现它</c>

00:05:37.337 --> 00:05:38.939
<c.magenta>把它放在不同的队列中运行</c>

00:05:41.175 --> 00:05:44.011
<c.magenta>所有你可以拿掉转化</c>
<c.magenta>把它放回到一个调度队列</c>

00:05:44.611 --> 00:05:46.780
<c.magenta>当你想要转化数据</c>

00:05:47.047 --> 00:05:52.753
<c.magenta>你可以把那个数据的数值转移到</c>
<c.magenta>你在另外队列的转化代码中</c>

00:05:53.687 --> 00:05:56.957
<c.magenta>转化它 然后返回给你的主线程</c>

00:05:57.925 --> 00:05:59.726
<c.magenta>这就允许你执行那个工作</c>

00:05:59.793 --> 00:06:02.529
<c.magenta>当主线程空闲和服务事件</c>

00:05:59.793 --> 00:06:02.529
<c.magenta>当主线程空闲和服务事件</c>

00:06:03.797 --> 00:06:05.532
<c.magenta>那么在真实代码中</c>
<c.magenta>这是什么样呢？</c>

00:06:06.633 --> 00:06:07.868
<c.magenta>好吧 这是非常简单的</c>

00:06:08.435 --> 00:06:10.871
<c.magenta>首先 你可以创建调度队列</c>

00:06:11.071 --> 00:06:13.941
<c.magenta>通过创建一个</c>
<c.magenta>DispatchQueue对象来提交你的工作</c>

00:06:14.007 --> 00:06:15.242
<c.magenta>它有一个标签</c>

00:06:15.676 --> 00:06:18.946
<c.magenta>那个标签在调试器中是可见的</c>
<c.magenta>当你写应用的时候</c>

00:06:20.447 --> 00:06:23.617
<c.magenta>调度队列执行你提交的工作</c>

00:06:23.684 --> 00:06:25.252
<c.magenta>安装先进先出的顺序</c>

00:06:25.385 --> 00:06:28.155
<c.magenta>也就是 你提交给队列的顺序</c>

00:06:28.222 --> 00:06:30.123
<c.magenta>就是调度运行它们的顺序</c>

00:06:31.558 --> 00:06:34.361
<c.magenta>然后你可以在调度队列中使用异步方法</c>

00:06:34.561 --> 00:06:36.396
<c.magenta>来给队列提交工作</c>

00:06:37.998 --> 00:06:41.368
<c.magenta>所以既然我们已经提交了</c>
<c.magenta>我们的调整大小操作</c>

00:06:41.435 --> 00:06:44.438
<c.magenta>给一个不同的队列</c>
<c.magenta>那我们如何把它返回给主线程呢</c>

00:06:45.372 --> 00:06:46.840
<c.magenta>那也是非常简单的</c>

00:06:47.107 --> 00:06:48.675
<c.magenta>调度主队列</c>

00:06:49.076 --> 00:06:52.880
<c.magenta>服务于所有执行在主线程上的项目</c>

00:06:54.982 --> 00:06:58.018
<c.magenta>这意味着你可以只调用</c>
<c.magenta>DispatchQueue main方法</c>

00:06:58.151 --> 00:07:00.654
<c.magenta>然后在那个主队列中调用</c>
<c.magenta>async方法</c>

00:06:58.151 --> 00:07:00.654
<c.magenta>然后在那个主队列中调用</c>
<c.magenta>async方法</c>

00:07:00.888 --> 00:07:04.258
<c.magenta>那样代码会执行</c>
<c.magenta>你可以更新你的用户界面</c>

00:07:05.425 --> 00:07:07.861
<c.magenta>正如你所看到的那样</c>
<c.magenta>链接工作是非常简单的</c>

00:07:07.928 --> 00:07:10.664
<c.magenta>从一个队列到另一个队列</c>
<c.magenta>和返回到你的主队列</c>

00:07:11.098 --> 00:07:14.735
<c.magenta>那么我已经看到了如何控制你的代码</c>

00:07:14.801 --> 00:07:16.270
<c.magenta>和将它放在不同的线程</c>

00:07:17.371 --> 00:07:18.972
<c.magenta>这是要有一些代价的</c>

00:07:20.107 --> 00:07:23.644
<c.magenta>你必须控制你的应用中的一个并发</c>

00:07:24.344 --> 00:07:26.346
<c.magenta>调度使用的线程池</c>

00:07:27.414 --> 00:07:29.683
<c.magenta>会限制你能得到的并发数</c>

00:07:30.017 --> 00:07:33.220
<c.magenta>为了使用设备上所有的调用</c>

00:07:34.721 --> 00:07:37.224
<c.magenta>然而 当你阻碍那些线程的时候</c>

00:07:37.291 --> 00:07:40.794
<c.magenta>如果你等待你的程序中的另外部分</c>
<c.magenta>或者你等待系统调用</c>

00:07:42.062 --> 00:07:45.399
<c.magenta>那些被阻碍的工作线程</c>
<c.magenta>会导致更多的工作线程</c>

00:07:45.465 --> 00:07:48.268
<c.magenta>调度是尝试给你你应得的并发数</c>

00:07:48.502 --> 00:07:51.705
<c.magenta>通过给你一个新的线程来继续执政代码</c>

00:07:52.606 --> 00:07:56.243
<c.magenta>这意味着选择正确的调度队列数量</c>
<c.magenta>是非常重要的</c>

00:07:56.310 --> 00:07:57.344
<c.magenta>来执行代码</c>

00:07:58.245 --> 00:08:01.548
<c.magenta>否则的话 你可能会阻碍一个线程</c>
<c.magenta>另外一个线程会产生</c>

00:07:58.245 --> 00:08:01.548
<c.magenta>否则的话 你可能会阻碍一个线程</c>
<c.magenta>另外一个线程会产生</c>

00:08:01.615 --> 00:08:03.851
<c.magenta>然后你阻碍了另一个 以此类推</c>

00:08:03.917 --> 00:08:06.620
<c.magenta>这个模式就是我们称为线程爆炸的东西</c>

00:08:07.154 --> 00:08:10.891
<c.magenta>我们在去年的演讲中</c>
<c.magenta>讲了线程爆炸和它的问题</c>

00:08:10.958 --> 00:08:13.293
<c.magenta>使用GCD建立响应式和高效应用</c>

00:08:13.727 --> 00:08:16.930
<c.magenta>所以我建议大家回去看看</c>
<c.magenta>去年的那个演讲</c>

00:08:20.367 --> 00:08:22.436
<c.magenta>现在我们已看到了</c>
<c.magenta>如何做这个简单的事情</c>

00:08:22.503 --> 00:08:25.572
<c.magenta>就是把工作从主线程搬到其它队列中</c>

00:08:25.772 --> 00:08:28.175
<c.magenta>但是我们如何真的把</c>
<c.magenta>这个应用于你的应用呢？</c>

00:08:29.710 --> 00:08:32.312
<c.magenta>如果我们回到前面的系统</c>

00:08:32.513 --> 00:08:35.582
<c.magenta>你想要做的就是确定你的应用的面积</c>

00:08:35.682 --> 00:08:37.049
<c.magenta>使用独立的数据流</c>

00:08:37.384 --> 00:08:39.586
<c.magenta>正如我们看到过的那样</c>
<c.magenta>这可能是图像转化</c>

00:08:39.919 --> 00:08:41.221
<c.magenta>或者你可能有一个数据库</c>

00:08:42.688 --> 00:08:46.760
<c.magenta>你想要计算那些面积</c>
<c.magenta>把它们分割成独立的子系统</c>

00:08:47.561 --> 00:08:51.431
<c.magenta>然后你想要把那些每一个子系统</c>
<c.magenta>返回给一个调度队列</c>

00:08:52.366 --> 00:08:55.769
<c.magenta>这会给每一个子系统一个队列</c>
<c.magenta>来独立地执行工作</c>

00:08:55.836 --> 00:08:59.806
<c.magenta>这样就不会有太多队列和进程的问题</c>

00:09:00.741 --> 00:09:02.109
<c.magenta>我们在前几张幻灯片看到了</c>

00:09:02.442 --> 00:09:04.144
<c.magenta>把工作串联在一起是很简单的</c>

00:09:04.945 --> 00:09:08.348
<c.magenta>你可以异步处理一个一个的模块</c>

00:09:08.415 --> 00:09:11.285
<c.magenta>然后到另一个队列 然后回到主队列</c>

00:09:12.119 --> 00:09:15.956
<c.magenta>但是我还想给大家展示第二种模式</c>
<c.magenta>也是同样的有用</c>

00:09:16.023 --> 00:09:19.092
<c.magenta>那就是组合工作和等待工作结束</c>

00:09:20.360 --> 00:09:24.831
<c.magenta>如果你有单独的一件事</c>
<c.magenta>想要产生多个不同的工作项目</c>

00:09:24.898 --> 00:09:27.367
<c.magenta>而你想往前进 如果那些工作项目</c>

00:09:27.434 --> 00:09:30.404
<c.magenta>当那些工作项目完成后 你可以做那个</c>

00:09:31.772 --> 00:09:34.408
<c.magenta>为了实现它 调度可以帮助你</c>

00:09:35.375 --> 00:09:38.145
<c.magenta>所以如果我们回到刚才的示意图</c>

00:09:38.278 --> 00:09:42.349
<c.magenta>如果用户界面产生三个不同的工作条目</c>

00:09:43.350 --> 00:09:45.485
<c.magenta>你可以创建一个调度组</c>

00:09:46.486 --> 00:09:49.122
<c.magenta>调度组是帮助你追踪工作的</c>

00:09:50.357 --> 00:09:53.026
<c.magenta>它们在Swift中是非常容易创建的</c>

00:09:53.160 --> 00:09:55.429
<c.magenta>你只要创建一个</c>
<c.magenta>DispatchGroup对象</c>

00:09:56.830 --> 00:10:00.133
<c.magenta>现在当你向调度提交工作</c>

00:09:56.830 --> 00:10:00.133
<c.magenta>现在当你向调度提交工作</c>

00:10:00.467 --> 00:10:03.871
<c.magenta>你可以向你的异步调用增加这个组</c>
<c.magenta>作为一个可选的参数</c>

00:10:04.872 --> 00:10:08.542
<c.magenta>你可以向那个组添加更多的工作</c>
<c.magenta>你可以向不同的队列添加</c>

00:10:08.775 --> 00:10:10.410
<c.magenta>但是用同一个组联系起来</c>

00:10:11.845 --> 00:10:14.348
<c.magenta>每次你向组提交工作</c>

00:10:14.414 --> 00:10:17.684
<c.magenta>它都会增加需要完成的项目的数量</c>

00:10:20.087 --> 00:10:22.356
<c.magenta>最后 当你提交了所有的工作</c>

00:10:22.623 --> 00:10:26.159
<c.magenta>你可以让组在所有工作被完成时通知你</c>

00:10:26.226 --> 00:10:29.296
<c.magenta>你可让它在一个你选择的队列中这么做</c>

00:10:30.898 --> 00:10:34.101
<c.magenta>现在一个接着一个</c>
<c.magenta>这些项目会开始执行</c>

00:10:35.702 --> 00:10:38.338
<c.magenta>当它们执行的时候 组中的数量</c>

00:10:38.405 --> 00:10:41.041
<c.magenta>会在每一个工作项目完成的时候减少</c>

00:10:41.642 --> 00:10:44.645
<c.magenta>最终 当最后一个工作项目完成的时候</c>

00:10:45.145 --> 00:10:48.115
<c.magenta>组就会继续 然后提交你的通知阻碍</c>

00:10:48.315 --> 00:10:50.083
<c.magenta>给你请求的队列</c>

00:10:51.718 --> 00:10:56.356
<c.magenta>这样 我们返回组 阻碍给主进程</c>

00:10:56.423 --> 00:10:57.891
<c.magenta>它会在主线程上运行</c>

00:10:59.860 --> 00:11:03.764
<c.magenta>现在还有第三个模式</c>
<c.magenta>我觉得我们需要展示的</c>

00:10:59.860 --> 00:11:03.764
<c.magenta>现在还有第三个模式</c>
<c.magenta>我觉得我们需要展示的</c>

00:11:04.932 --> 00:11:07.167
<c.magenta>前面说的两个是异步执行</c>

00:11:07.234 --> 00:11:09.770
<c.magenta>第三个是关于处理同步执行</c>

00:11:11.305 --> 00:11:12.940
<c.magenta>你可以使用同步执行</c>

00:11:13.207 --> 00:11:16.510
<c.magenta>来帮助你序列化子系统间的状态</c>

00:11:17.911 --> 00:11:20.614
<c.magenta>串行队列、调度队列</c>
<c.magenta>是本质的序列</c>

00:11:21.515 --> 00:11:24.618
<c.magenta>你可以使用它 为了它的相互排斥属性</c>

00:11:24.885 --> 00:11:28.188
<c.magenta>那就是</c>
<c.magenta>当你向那个队列同步地提交工作</c>

00:11:28.355 --> 00:11:30.824
<c.magenta>你知道运行在那个队列中的</c>
<c.magenta>子系统的工作</c>

00:11:30.891 --> 00:11:32.426
<c.magenta>不是同时运行的</c>

00:11:33.694 --> 00:11:36.463
<c.magenta>你可以利用它来建立非常简单的路径</c>

00:11:36.530 --> 00:11:40.567
<c.magenta>从其它地方的子系统中读取属性</c>

00:11:41.101 --> 00:11:43.537
<c.magenta>比如 这里你可以调用队列同步</c>

00:11:43.937 --> 00:11:45.973
<c.magenta>你可以返回一个值到队列同步的外面</c>

00:11:46.406 --> 00:11:48.475
<c.magenta>我们会在队列中捕捉到那个值</c>

00:11:48.542 --> 00:11:51.912
<c.magenta>然后在工作项目结束时返回给你</c>

00:11:54.581 --> 00:11:57.885
<c.magenta>但是 当你引入这个模式的时候</c>
<c.magenta>你必须十分小心</c>

00:11:57.951 --> 00:12:01.755
<c.magenta>因为你开始在你的子系统之间</c>
<c.magenta>引入一个锁顺序图</c>

00:11:57.951 --> 00:12:01.755
<c.magenta>因为你开始在你的子系统之间</c>
<c.magenta>引入一个锁顺序图</c>

00:12:03.090 --> 00:12:03.991
<c.magenta>那是什么意思呢？</c>

00:12:04.057 --> 00:12:06.960
<c.magenta>如果你有我们曾经有过的子系统</c>

00:12:07.027 --> 00:12:10.097
<c.magenta>而且你从一个地方同步到另一个地方</c>
<c.magenta>然后又同步到另一个地方</c>

00:12:10.564 --> 00:12:13.500
<c.magenta>最后 你同步回第一个</c>

00:12:13.834 --> 00:12:15.202
<c.magenta>好了 现我们有了一个死锁</c>

00:12:16.403 --> 00:12:19.873
<c.magenta>这个演讲的后面部分</c>
<c.magenta>Pierre会上来谈一下死锁</c>

00:12:26.847 --> 00:12:29.983
<c.magenta>所以现在我们看到了</c>
<c.magenta>如何结构化调度使用</c>

00:12:30.284 --> 00:12:31.752
<c.magenta>在你的应用中</c>

00:12:31.852 --> 00:12:35.722
<c.magenta>我们如何将其应用于</c>
<c.magenta>你的子系统中的使用</c>

00:12:36.490 --> 00:12:40.060
<c.magenta>你可以使用调度</c>
<c.magenta>来对你提交的工作进行分类</c>

00:12:40.494 --> 00:12:43.697
<c.magenta>为了实现它 我们需要引入很多服务类</c>

00:12:44.998 --> 00:12:47.968
<c.magenta>这些类用来提供一个明确的分类</c>

00:12:48.035 --> 00:12:50.204
<c.magenta>你提交给调度的工作</c>

00:12:51.438 --> 00:12:52.906
<c.magenta>所以它允许你作为一个开发者</c>

00:12:52.973 --> 00:12:56.143
<c.magenta>来表示你提交给调度的代码的意图</c>

00:12:56.476 --> 00:13:00.247
<c.magenta>调度可使用它来影响它执行代码的方式</c>

00:12:56.476 --> 00:13:00.247
<c.magenta>调度可使用它来影响它执行代码的方式</c>

00:13:00.314 --> 00:13:01.648
<c.magenta>你给我们的</c>

00:13:02.049 --> 00:13:05.219
<c.magenta>代码可以不同中央处理器优先级</c>
<c.magenta>进行执行</c>

00:13:05.319 --> 00:13:07.721
<c.magenta>不同的输入输出安排优先级</c>

00:13:08.522 --> 00:13:12.159
<c.magenta>我们在去年同一个演讲中</c>
<c.magenta>详细地讲了QoS</c>

00:13:12.226 --> 00:13:14.494
<c.magenta>使用GCD创建响应式和高效的应用</c>

00:13:15.229 --> 00:13:17.564
<c.magenta>那么我们如何使用QoS类呢？</c>

00:13:18.799 --> 00:13:20.801
<c.magenta>这和以前一样简单</c>

00:13:21.201 --> 00:13:25.138
<c.magenta>你可以将QoS类</c>
<c.magenta>作为一个可选参数传给异步</c>

00:13:25.205 --> 00:13:28.008
<c.magenta>我们给队列提交后台工作</c>

00:13:30.177 --> 00:13:34.114
<c.magenta>如果你等会儿出现和</c>
<c.magenta>在一个更高的QoS上提交队列</c>

00:13:34.181 --> 00:13:37.384
<c.magenta>调度会帮你解决创建的优先级颠倒</c>

00:13:37.618 --> 00:13:41.121
<c.magenta>它会在你的工作之前提升项目</c>

00:13:41.188 --> 00:13:43.624
<c.magenta>在调度队列 给更高的QoS</c>

00:13:44.992 --> 00:13:47.928
<c.magenta>那样它们更快地执行 让你的项目</c>

00:13:47.995 --> 00:13:50.197
<c.magenta>以你期待的速度执行</c>

00:13:51.131 --> 00:13:53.066
<c.magenta>然而 对这一点需要重点指出的是</c>

00:13:53.500 --> 00:13:55.536
<c.magenta>它不会帮助你的工作跳行</c>

00:13:55.702 --> 00:13:58.405
<c.magenta>它所做的一切就是</c>
<c.magenta>在你之前提升所有的工作</c>

00:13:58.472 --> 00:14:01.408
<c.magenta>所以你一提交工作 它就会执行</c>

00:13:58.472 --> 00:14:01.408
<c.magenta>所以你一提交工作 它就会执行</c>

00:14:04.111 --> 00:14:06.113
<c.magenta>你也可以创建调度队列</c>

00:14:06.280 --> 00:14:09.850
<c.magenta>它有特定的QoS类</c>
<c.magenta>这是非常有帮助的 比如</c>

00:14:10.050 --> 00:14:13.654
<c.magenta>如果你想要始终在后台执行的后台工作</c>

00:14:13.720 --> 00:14:16.657
<c.magenta>你可以创建一个队列 在后台执行所有</c>

00:14:16.723 --> 00:14:20.594
<c.magenta>当你向那个队列提交工作的时候</c>
<c.magenta>那就是我们得到的QoS</c>

00:14:22.963 --> 00:14:28.769
<c.magenta>所以在更微观的级别上</c>
<c.magenta>当你于一个调度队列进行同步</c>

00:14:28.836 --> 00:14:31.939
<c.magenta>它获取执行内容 在你同步的那一刻</c>

00:14:32.906 --> 00:14:35.142
<c.magenta>执行环境意味着类似于QoS的东西</c>

00:14:35.576 --> 00:14:38.078
<c.magenta>它也意味着你现在拥有的登入环境</c>

00:14:39.279 --> 00:14:41.348
<c.magenta>但是如果你想要更多的控制</c>

00:14:41.448 --> 00:14:45.352
<c.magenta>你可以使用</c>
<c.magenta>DispatchWorkItem来创建项目</c>

00:14:45.485 --> 00:14:47.821
<c.magenta>你对它们如何执行有更多的控制</c>

00:14:49.923 --> 00:14:50.791
<c.magenta>比如</c>

00:14:50.858 --> 00:14:54.728
<c.magenta>我们使用assignCurrentContext</c>
<c.magenta>创建一个工作项目</c>

00:14:55.262 --> 00:14:58.699
<c.magenta>它使用执行内容的QoS</c>

00:14:58.765 --> 00:15:00.734
<c.magenta>在你创建工作项目的时候</c>

00:14:58.765 --> 00:15:00.734
<c.magenta>在你创建工作项目的时候</c>

00:15:00.801 --> 00:15:03.604
<c.magenta>而不是你向调度队列提交它的时候</c>

00:15:04.905 --> 00:15:07.508
<c.magenta>这意味着你可以创建那个项目 保存它</c>

00:15:07.574 --> 00:15:09.276
<c.magenta>当你最后真的执行它</c>

00:15:09.343 --> 00:15:12.613
<c.magenta>我们会想调度提交它</c>
<c.magenta>并带着你创建时的属性</c>

00:15:13.280 --> 00:15:15.048
<c.magenta>当我们谈论工作项目的时候</c>

00:15:15.115 --> 00:15:18.085
<c.magenta>DispatchWorkItem</c>
<c.magenta>有另外非常有用的部分</c>

00:15:18.185 --> 00:15:20.420
<c.magenta>那就是等待它们的完成</c>

00:15:21.088 --> 00:15:23.991
<c.magenta>你可以使用</c>
<c.magenta>DispatchWorkItem wait方法</c>

00:15:24.057 --> 00:15:26.994
<c.magenta>来向调度表示你需要那个工作项目完成</c>

00:15:27.060 --> 00:15:28.428
<c.magenta>在你继续之前</c>

00:15:30.864 --> 00:15:34.501
<c.magenta>调度会响应</c>
<c.magenta>通过提升它前面工作的优先级</c>

00:15:34.568 --> 00:15:38.038
<c.magenta>到那个QoS 就像</c>
<c.magenta>通过优先级翻转所做的</c>

00:15:39.940 --> 00:15:43.377
<c.magenta>它可以这么做是因为</c>
<c.magenta>DispatchWorkItem</c>

00:15:43.443 --> 00:15:46.313
<c.magenta>知道它在那里被提交</c>
<c.magenta>你想要在那个线程运行它</c>

00:15:46.513 --> 00:15:49.716
<c.magenta>因为 调度知道它要提升那个队列</c>

00:15:49.783 --> 00:15:51.685
<c.magenta>使得完成你的工作条目</c>

00:15:53.687 --> 00:15:55.355
<c.magenta>需要重点指出的是</c>

00:15:55.422 --> 00:15:57.791
<c.magenta>因为等待旗语和小组</c>

00:15:57.858 --> 00:15:59.760
<c.magenta>不会存储这个所有者信息</c>

00:16:00.093 --> 00:16:01.995
<c.magenta>这意味着如果你等待一个旗语</c>

00:16:02.062 --> 00:16:05.499
<c.magenta>它不会在你的旗语信号前产生东西</c>

00:16:05.566 --> 00:16:06.800
<c.magenta>来更快地执行</c>

00:16:07.434 --> 00:16:09.703
<c.magenta>现在我要邀请Pierre来到台上</c>

00:16:09.770 --> 00:16:12.439
<c.magenta>他会给大家讲一下同步</c>

00:16:20.013 --> 00:16:20.848
<c.magenta>谢谢Matt</c>

00:16:22.516 --> 00:16:27.387
<c.magenta>和Matt一起</c>
<c.magenta>我们看到了如何从应用的角度使用调度</c>

00:16:28.222 --> 00:16:30.924
<c.magenta>我会和大家讲一下它的具体意义</c>

00:16:30.991 --> 00:16:32.960
<c.magenta>从你们的对象的角度</c>

00:16:34.328 --> 00:16:36.063
<c.magenta>首先 关于Swift的一点</c>

00:16:39.199 --> 00:16:42.703
<c.magenta>同步不是Swift 3语言的一部分</c>

00:16:44.137 --> 00:16:47.641
<c.magenta>你今天只有这个语言的一个重点</c>

00:16:47.708 --> 00:16:51.578
<c.magenta>那就是你的全局变量是被</c>
<c.magenta>原子化地初始化的</c>

00:16:52.746 --> 00:16:57.384
<c.magenta>但你没有的是你的类属性不是原子化的</c>

00:16:58.151 --> 00:17:01.421
<c.magenta>你的类中的惰性属性也不是原子化的</c>

00:16:58.151 --> 00:17:01.421
<c.magenta>你的类中的惰性属性也不是原子化的</c>

00:17:01.722 --> 00:17:04.825
<c.magenta>那意味着如果你调用这些属性</c>

00:17:04.892 --> 00:17:07.661
<c.magenta>而它们同时在两个环境中被初始化</c>

00:17:07.728 --> 00:17:10.531
<c.magenta>你的惰性初始化器</c>
<c.magenta>可能实际上运行了两次</c>

00:17:11.632 --> 00:17:13.099
<c.magenta>所有你必须同步</c>

00:17:14.268 --> 00:17:17.905
<c.magenta>这个语言现在不会给我们很多的工具</c>

00:17:18.137 --> 00:17:21.241
<c.magenta>但是那不意味着竞争不是一个问题</c>

00:17:23.310 --> 00:17:26.880
<c.magenta>不存在良性竞争这种事情</c>

00:17:29.983 --> 00:17:34.321
<c.magenta>对你来说 那意味着</c>
<c.magenta>如果你忘记了同步这一点</c>

00:17:34.521 --> 00:17:36.356
<c.magenta>你会得到奔溃</c>

00:17:36.657 --> 00:17:39.560
<c.magenta>或者破坏应用中用户数据</c>

00:17:41.728 --> 00:17:45.799
<c.magenta>我建议大家看一下本周稍早时候的演讲</c>

00:17:45.866 --> 00:17:50.304
<c.magenta>关于T San的 那是个消毒剂</c>

00:17:50.637 --> 00:17:53.307
<c.magenta>是一个工具 帮助你找出</c>

00:17:53.373 --> 00:17:56.610
<c.magenta>在程序中你缺少了哪些正确的异步处理</c>

00:17:59.847 --> 00:18:02.015
<c.magenta>那我们拿什么来做同步处理呢？</c>

00:17:59.847 --> 00:18:02.015
<c.magenta>那我们拿什么来做同步处理呢？</c>

00:18:02.783 --> 00:18:05.352
<c.magenta>传统上你会使用一个锁</c>

00:18:06.153 --> 00:18:11.225
<c.magenta>在Swift里</c>
<c.magenta>因为你有一整个达尔文模块在部署中</c>

00:18:11.291 --> 00:18:15.529
<c.magenta>你实际上会看到这个结构</c>
<c.magenta>是基于传统的C语言锁</c>

00:18:15.929 --> 00:18:20.701
<c.magenta>然而 Swift假设所有被训练东西</c>
<c.magenta>都是可以被移动的</c>

00:18:20.767 --> 00:18:24.271
<c.magenta>那不会和一个互斥体</c>
<c.magenta>或者一个锁一起工作</c>

00:18:24.571 --> 00:18:28.675
<c.magenta>所有我们非常不建议</c>
<c.magenta>你在Swift中使用这一类的锁</c>

00:18:34.014 --> 00:18:37.317
<c.magenta>你若你想要一个传统的锁</c>
<c.magenta>你可以使用的是</c>

00:18:37.384 --> 00:18:41.989
<c.magenta>Foundation.Lock</c>
<c.magenta>因为不同于传统的基于C语言锁的结构</c>

00:18:42.055 --> 00:18:47.060
<c.magenta>它是一个类</c>
<c.magenta>它不容易产生我前面提到过的问题</c>

00:18:48.729 --> 00:18:51.565
<c.magenta>然而 那意味着</c>
<c.magenta>你确定了你的下一个对象</c>

00:18:51.632 --> 00:18:53.467
<c.magenta>对你来说 它可能会不是所想要的</c>

00:18:54.101 --> 00:18:55.969
<c.magenta>如果你想要一些小一点的东西</c>

00:18:56.036 --> 00:18:58.939
<c.magenta>那看起来就像是你在C语言中的锁</c>

00:18:59.006 --> 00:19:04.044
<c.magenta>然后你必须引Objective-C</c>
<c.magenta>引入Objective-C中的基本类</c>

00:18:59.006 --> 00:19:04.044
<c.magenta>然后你必须引Objective-C</c>
<c.magenta>引入Objective-C中的基本类</c>

00:19:04.111 --> 00:19:06.146
<c.magenta>把你的锁作为一个不变量</c>

00:19:07.848 --> 00:19:10.484
<c.magenta>然后你会暴露一个锁和解锁方法</c>

00:19:10.551 --> 00:19:12.753
<c.magenta>一个尝试锁 如果你也需要它</c>

00:19:13.353 --> 00:19:18.859
<c.magenta>你可以从Swift中调用</c>
<c.magenta>当你将该类分成子类</c>

00:19:20.794 --> 00:19:24.565
<c.magenta>你会在那张幻灯片中</c>
<c.magenta>发现我们使用不公平的锁</c>

00:19:24.698 --> 00:19:27.301
<c.magenta>这是一个新的API</c>
<c.magenta>我们在这些更新中引入的</c>

00:19:27.734 --> 00:19:29.670
<c.magenta>它不易于盗版入侵</c>

00:19:29.903 --> 00:19:33.674
<c.magenta>它不会旋转 不像我们复制的旋转锁</c>

00:19:34.441 --> 00:19:36.343
<c.magenta>这是真实生活中最重要的</c>

00:19:38.579 --> 00:19:43.550
<c.magenta>这是一个GCD的演讲</c>
<c.magenta>所有我们鼓励大家</c>

00:19:43.750 --> 00:19:46.820
<c.magenta>使用调度队列 为了同步处理</c>

00:19:47.888 --> 00:19:52.192
<c.magenta>要这么做的的第一个原因</c>
<c.magenta>是这些非常容易被误用</c>

00:19:52.559 --> 00:19:54.461
<c.magenta>相比于传统的锁</c>

00:19:54.928 --> 00:19:57.598
<c.magenta>你的代码会在可观测的方式下运行</c>

00:19:57.664 --> 00:19:59.833
<c.magenta>这意味着你不能忘记解锁</c>

00:20:01.068 --> 00:20:04.371
<c.magenta>另外一件事是队列事实上更好地集成到</c>

00:20:04.438 --> 00:20:07.107
<c.magenta>Xcode中调试工具中的运行时</c>

00:20:08.742 --> 00:20:12.246
<c.magenta>所以我们如何使用队列来同步呢</c>

00:20:13.313 --> 00:20:18.085
<c.magenta>我会和大家一起讲一下</c>
<c.magenta>实现原子化属性的问题</c>

00:20:19.119 --> 00:20:24.091
<c.magenta>这里我们有这个对象</c>
<c.magenta>它有一个内部的状态</c>

00:20:24.324 --> 00:20:29.830
<c.magenta>我们想要以一种安全方式来访问它</c>
<c.magenta>我们会使用一个队列来同步</c>

00:20:30.964 --> 00:20:33.600
<c.magenta>我们如何写我们的getter</c>
<c.magenta>和setter呢？</c>

00:20:34.601 --> 00:20:39.106
<c.magenta>getter是关于返回它的内部状态</c>

00:20:39.973 --> 00:20:43.343
<c.magenta>它给我们相互的排斥</c>
<c.magenta>Matt前面已经讲过了</c>

00:20:43.877 --> 00:20:48.015
<c.magenta>setter也是那么简单</c>
<c.magenta>你只要设置你的新状态</c>

00:20:48.081 --> 00:20:50.684
<c.magenta>和同步的其他保护和你的队列</c>

00:20:51.718 --> 00:20:55.022
<c.magenta>这个模式是非常简单的</c>
<c.magenta>你实际上可以拓展它</c>

00:20:55.088 --> 00:20:57.991
<c.magenta>对于各种更加复杂的产品</c>

00:21:00.127 --> 00:21:04.731
<c.magenta>我告诉过你队列更好地</c>
<c.magenta>与你的调试工具整合在一起</c>

00:21:04.798 --> 00:21:06.600
<c.magenta>它们也有更多的功能</c>

00:21:07.067 --> 00:21:10.237
<c.magenta>在这个更新中的新东西</c>
<c.magenta>我们让你表达预设条件</c>

00:21:11.405 --> 00:21:14.308
<c.magenta>它让你表达你在代码中有不变量</c>

00:21:14.508 --> 00:21:17.945
<c.magenta>非常需要在指定的队列中运行</c>

00:21:18.378 --> 00:21:20.581
<c.magenta>你以这种方式拥有</c>

00:21:22.049 --> 00:21:24.551
<c.magenta>调度预设条件 你在那个队列上</c>

00:21:25.552 --> 00:21:27.554
<c.magenta>有时对面是非常有用的</c>

00:21:27.621 --> 00:21:32.359
<c.magenta>你想保证代码中特定片段</c>
<c.magenta>永远不会在那个队列中运行</c>

00:21:32.759 --> 00:21:35.162
<c.magenta>因为你知道你可能与那个队列同步</c>

00:21:35.395 --> 00:21:37.297
<c.magenta>你表以这种方式示这个</c>

00:21:37.664 --> 00:21:40.601
<c.magenta>一个预设条件你不在那个队列中</c>

00:21:41.602 --> 00:21:45.839
<c.magenta>所以那就是关于同步处理</c>
<c.magenta>同步你的状态</c>

00:21:47.107 --> 00:21:52.045
<c.magenta>正如Matt前面所说的 这会更加好</c>
<c.magenta>如果你仅组织你的应用</c>

00:21:52.112 --> 00:21:56.383
<c.magenta>以你的传输值不需要同步被挂起的方式</c>

00:21:56.984 --> 00:21:58.418
<c.magenta>然而 在真实的代码中</c>

00:21:58.485 --> 00:22:02.089
<c.magenta>你需要一些对象来访问</c>
<c.magenta>从简单明显的子系统</c>

00:21:58.485 --> 00:22:02.089
<c.magenta>你需要一些对象来访问</c>
<c.magenta>从简单明显的子系统</c>

00:22:03.390 --> 00:22:05.893
<c.magenta>那意味着所有这些子系统</c>

00:22:05.959 --> 00:22:07.961
<c.magenta>有一个引用在这些对象中</c>

00:22:08.028 --> 00:22:10.898
<c.magenta>摆脱它们会是一个挑战</c>

00:22:14.101 --> 00:22:18.539
<c.magenta>我现在会带你们看一下</c>
<c.magenta>一个四步状态任务</c>

00:22:19.006 --> 00:22:21.041
<c.magenta>那会帮你得到这个高度</c>

00:22:21.108 --> 00:22:25.646
<c.magenta>不会产生奇怪的难以重现的奔溃</c>

00:22:27.314 --> 00:22:31.652
<c.magenta>你的状态机开始于第一件事 设置</c>

00:22:31.919 --> 00:22:34.021
<c.magenta>设置是关于创建你的对象</c>

00:22:34.087 --> 00:22:38.325
<c.magenta>给它你需要的属性 为了它的目的</c>

00:22:41.595 --> 00:22:45.065
<c.magenta>第二 你会想要激活这个对象</c>

00:22:45.432 --> 00:22:49.837
<c.magenta>那意味着你实际上让这个对象</c>
<c.magenta>对于其它子系统是可知的</c>

00:22:49.970 --> 00:22:55.142
<c.magenta>你开始使用它以一种更加同步的世界</c>
<c.magenta>在性能任务方面</c>

00:22:56.176 --> 00:22:59.179
<c.magenta>然后开始了难的部分</c>
<c.magenta>你想要摆脱那个对象</c>

00:22:59.446 --> 00:23:02.349
<c.magenta>所有第三步是作废</c>

00:22:59.446 --> 00:23:02.349
<c.magenta>所有第三步是作废</c>

00:23:05.219 --> 00:23:09.456
<c.magenta>作废是关于确保所有部分</c>

00:23:09.523 --> 00:23:12.492
<c.magenta>所有你的子系统知道这个对象会消失</c>

00:23:12.893 --> 00:23:15.629
<c.magenta>所以 第四 它被取消分配</c>

00:23:16.196 --> 00:23:17.497
<c.magenta>那么让我们让它保持那样</c>

00:23:17.731 --> 00:23:21.735
<c.magenta>设置 激活 作废 取消分配</c>

00:23:25.672 --> 00:23:28.942
<c.magenta>这是非常抽象的 所以我们会讲一下</c>

00:23:29.009 --> 00:23:32.012
<c.magenta>一个更加具体的例子</c>
<c.magenta>我希望你会关联上</c>

00:23:32.513 --> 00:23:36.149
<c.magenta>让我们回到Matt前面介绍的应用</c>

00:23:36.517 --> 00:23:39.520
<c.magenta>关注于两个子系统</c>

00:23:40.454 --> 00:23:42.923
<c.magenta>第一 我们有我们的用户界面</c>

00:23:43.156 --> 00:23:46.994
<c.magenta>它会处理事物类似于应用中的标题栏</c>

00:23:48.295 --> 00:23:53.066
<c.magenta>我会假设你可以观察一些状态改变</c>

00:23:53.133 --> 00:23:54.535
<c.magenta>在你的子系统中</c>

00:23:55.068 --> 00:23:58.305
<c.magenta>所以那样 举个例子</c>
<c.magenta>对于我们的数据转换子系统</c>

00:23:58.605 --> 00:24:00.574
<c.magenta>当它开始执行一些工作</c>

00:23:58.605 --> 00:24:00.574
<c.magenta>当它开始执行一些工作</c>

00:24:00.641 --> 00:24:03.977
<c.magenta>我们给用户展示了一个视觉上的迹象</c>

00:24:04.545 --> 00:24:08.782
<c.magenta>当数据转化子系统停止做任何工作时</c>

00:24:08.849 --> 00:24:10.617
<c.magenta>视觉迹象消失了</c>

00:24:11.718 --> 00:24:14.621
<c.magenta>所以我们如何实现</c>
<c.magenta>BusyController呢？</c>

00:24:16.990 --> 00:24:19.426
<c.magenta>所以我们记得第一步是设置</c>

00:24:19.526 --> 00:24:24.064
<c.magenta>设置是关于为你的代码挑选属性</c>

00:24:24.131 --> 00:24:27.801
<c.magenta>和动画之类的 这都取决于你</c>

00:24:28.869 --> 00:24:31.538
<c.magenta>然后我们想要开始使用那个对象</c>

00:24:32.139 --> 00:24:35.042
<c.magenta>那是激活 我们激活它</c>

00:24:35.409 --> 00:24:37.211
<c.magenta>那对我们的控制器意味着什么呢</c>

00:24:37.611 --> 00:24:41.548
<c.magenta>那意味着我们想要开始接受</c>
<c.magenta>这些状态通知</c>

00:24:41.615 --> 00:24:45.586
<c.magenta>状态变化的通知</c>
<c.magenta>所以我们会向子系统注册</c>

00:24:45.652 --> 00:24:49.890
<c.magenta>并要求在主队列上接受通知</c>

00:24:49.957 --> 00:24:52.793
<c.magenta>我们想在用户界面进行逻辑的处理</c>

00:24:54.962 --> 00:24:56.230
<c.magenta>鉴于它非常灵活</c>

00:24:57.531 --> 00:24:59.867
<c.magenta>那就是你的代码 那就是你想做的</c>

00:24:59.933 --> 00:25:04.872
<c.magenta>你的应用有动画以及非常好的用户界面</c>

00:24:59.933 --> 00:25:04.872
<c.magenta>你的应用有动画以及非常好的用户界面</c>

00:25:06.273 --> 00:25:10.310
<c.magenta>但你的应用有些部分不需要可视指示</c>

00:25:10.377 --> 00:25:13.480
<c.magenta>或可能不使用数据转换子系统</c>

00:25:13.547 --> 00:25:17.284
<c.magenta>而且你想回收控制器的资源</c>

00:25:17.351 --> 00:25:18.819
<c.magenta>当你不想要它了</c>

00:25:20.153 --> 00:25:23.557
<c.magenta>我很想说 主线程</c>

00:25:23.624 --> 00:25:27.461
<c.magenta>是唯一真正拥有</c>
<c.magenta>BusyController的子系统</c>

00:25:27.528 --> 00:25:30.297
<c.magenta>我将会像这样去掉它</c>

00:25:30.364 --> 00:25:33.934
<c.magenta>在初始化过程中从子系统中注册控制器</c>

00:25:34.001 --> 00:25:35.135
<c.magenta>从好的方面想</c>

00:25:36.170 --> 00:25:37.070
<c.magenta>这种方法不起作用</c>

00:25:37.137 --> 00:25:40.174
<c.magenta>我将会用两个例子告诉你为什么</c>

00:25:42.609 --> 00:25:44.077
<c.magenta>让我们回退一步</c>

00:25:44.278 --> 00:25:47.114
<c.magenta>我们的BusyController</c>
<c.magenta>是参考UI</c>

00:25:47.181 --> 00:25:49.516
<c.magenta>主队列和用户界面</c>

00:25:50.384 --> 00:25:54.555
<c.magenta>然而 当我们用数据转换子系统注册时</c>

00:25:54.621 --> 00:26:00.561
<c.magenta>很可能引用从数据结构转到这个对象</c>

00:25:54.621 --> 00:26:00.561
<c.magenta>很可能引用从数据结构转到这个对象</c>

00:26:00.961 --> 00:26:03.797
<c.magenta>这意味着当我们去除这些引用</c>

00:26:03.864 --> 00:26:05.499
<c.magenta>主线程有的参考</c>

00:26:06.600 --> 00:26:10.704
<c.magenta>仍然会遗留一个</c>
<c.magenta>这意味着deinit 无法运行</c>

00:26:10.771 --> 00:26:13.707
<c.magenta>这意味着它会被注册 被收集</c>

00:26:13.774 --> 00:26:16.910
<c.magenta>接着因为被遗弃的内存你放弃了</c>

00:26:19.146 --> 00:26:22.950
<c.magenta>然而 你们是技术熟练的开发人员</c>
<c.magenta>知道怎么来修复那个</c>

00:26:23.016 --> 00:26:26.286
<c.magenta>弱引用 我会说 你们是对的</c>

00:26:26.887 --> 00:26:28.755
<c.magenta>但是 这并不是故事的结局</c>

00:26:29.122 --> 00:26:33.126
<c.magenta>因为这看起来并不像个真正的应用</c>

00:26:33.460 --> 00:26:36.196
<c.magenta>图形对象复杂得多</c>

00:26:36.797 --> 00:26:39.466
<c.magenta>使用有引用的对象是不常见的</c>

00:26:39.533 --> 00:26:45.739
<c.magenta>还有一大堆其他对象</c>
<c.magenta>比如说octopus对象</c>

00:26:48.609 --> 00:26:52.546
<c.magenta>我将继续从主线程中去除引用</c>

00:26:52.946 --> 00:26:55.015
<c.magenta>不像之前 这不是废弃的内存</c>

00:26:55.082 --> 00:26:58.151
<c.magenta>因为octopus对象知道它有引用</c>

00:26:59.419 --> 00:27:02.589
<c.magenta>但若我们从上下文中</c>
<c.magenta>去除octopus对象时</c>

00:26:59.419 --> 00:27:02.589
<c.magenta>但若我们从上下文中</c>
<c.magenta>去除octopus对象时</c>

00:27:02.656 --> 00:27:06.760
<c.magenta>数据转换系统 将会发生什么</c>

00:27:06.827 --> 00:27:10.797
<c.magenta>它将去除</c>
<c.magenta>BusyController的引用</c>

00:27:11.565 --> 00:27:14.301
<c.magenta>记住 这将在 运行的</c>

00:27:14.368 --> 00:27:16.236
<c.magenta>因为那是deinit所做的</c>

00:27:17.404 --> 00:27:21.141
<c.magenta>然后你有了一个问题</c>
<c.magenta>因为非常可能做到的</c>

00:27:21.208 --> 00:27:23.644
<c.magenta>你需要同步一个调度队列</c>

00:27:23.710 --> 00:27:25.379
<c.magenta>它拥有那个数据结构</c>

00:27:25.913 --> 00:27:29.216
<c.magenta>你猜到了 我们最后会得到一个死锁</c>

00:27:33.754 --> 00:27:36.723
<c.magenta>实际上 那个漏洞是非常普遍的</c>

00:27:37.191 --> 00:27:40.827
<c.magenta>以致于我们为它写了一个断言</c>
<c.magenta>在这个新版本中</c>

00:27:42.062 --> 00:27:46.500
<c.magenta>如果你在上一个发布版本中</c>
<c.magenta>运行那个代码</c>

00:27:47.267 --> 00:27:52.072
<c.magenta>它会断言 在OS X或者模拟器上</c>

00:27:52.306 --> 00:27:57.511
<c.magenta>你得到的奔溃报告有一个特定应用信息</c>

00:27:57.678 --> 00:28:00.647
<c.magenta>指向你有的实际问题</c>

00:27:57.678 --> 00:28:00.647
<c.magenta>指向你有的实际问题</c>

00:28:00.747 --> 00:28:02.115
<c.magenta>所以你可以很简单地修好它</c>

00:28:03.050 --> 00:28:06.653
<c.magenta>好了 现在我们知道</c>
<c.magenta>我们真的不想从deinit注销</c>

00:28:06.720 --> 00:28:07.955
<c.magenta>我们如何修理它呢</c>

00:28:09.957 --> 00:28:12.960
<c.magenta>我们通过我们的第三步来修理</c>

00:28:13.026 --> 00:28:15.829
<c.magenta>作废 一个显示函数调用</c>

00:28:16.263 --> 00:28:20.634
<c.magenta>在这个作废下 我们通过注册实现它</c>

00:28:23.770 --> 00:28:27.975
<c.magenta>同样 因为我们有预设条件</c>
<c.magenta>让我们使用它们</c>

00:28:28.041 --> 00:28:29.943
<c.magenta>因为这个对象</c>
<c.magenta>BusyController</c>

00:28:30.010 --> 00:28:32.079
<c.magenta>确实应该在主进程中被管理</c>

00:28:32.145 --> 00:28:35.616
<c.magenta>你想确保API的用户正确地使用它</c>

00:28:35.916 --> 00:28:37.818
<c.magenta>所以你会想要一个预设条件</c>

00:28:37.885 --> 00:28:40.254
<c.magenta>那只发生在主进程上</c>

00:28:41.021 --> 00:28:42.256
<c.magenta>或者主队列上</c>

00:28:44.558 --> 00:28:46.093
<c.magenta>但是那不是那样子的</c>

00:28:47.394 --> 00:28:49.096
<c.magenta>我们还有最后一个问题</c>

00:28:49.429 --> 00:28:52.766
<c.magenta>记住 这都是发生在主进程上的</c>

00:28:53.433 --> 00:28:56.637
<c.magenta>你有这个子系统 数据转化子系统</c>

00:28:56.803 --> 00:29:00.007
<c.magenta>它会告诉你状态变化</c>

00:28:56.803 --> 00:29:00.007
<c.magenta>它会告诉你状态变化</c>

00:29:00.674 --> 00:29:04.244
<c.magenta>你可能有一些当你作废的时候发生</c>

00:29:04.478 --> 00:29:05.646
<c.magenta>我们如何解决那个呢</c>

00:29:06.180 --> 00:29:10.484
<c.magenta>我们想要追踪作废作为一个真的状态</c>

00:29:11.084 --> 00:29:14.188
<c.magenta>那是什么意思呢 就是这个意思</c>

00:29:14.821 --> 00:29:17.824
<c.magenta>你想要追踪作废 比如</c>

00:29:17.891 --> 00:29:21.261
<c.magenta>作为你的对象中的一个布尔值</c>
<c.magenta>你记住当你做这个的时候</c>

00:29:23.030 --> 00:29:26.733
<c.magenta>同时 让我们说一下更多的预设条件</c>

00:29:27.067 --> 00:29:30.771
<c.magenta>确保加强 在你的对象被取消分配之前</c>

00:29:30.838 --> 00:29:33.974
<c.magenta>它已经被正确地作废</c>
<c.magenta>它会帮助你找到漏洞</c>

00:29:35.642 --> 00:29:38.145
<c.magenta>为什么这很有趣呢？因为现在</c>

00:29:39.413 --> 00:29:43.283
<c.magenta>在你处理状态转化通知的代码中</c>

00:29:43.350 --> 00:29:46.453
<c.magenta>我们可以观察对象被作废</c>

00:29:46.520 --> 00:29:48.722
<c.magenta>实际把通知扔在地上</c>

00:29:48.789 --> 00:29:51.658
<c.magenta>不是以令人尴尬的方式更新用户界面</c>

00:29:54.161 --> 00:29:56.864
<c.magenta>好了 这大致就是这个复杂的例子</c>

00:29:57.464 --> 00:30:02.069
<c.magenta>我希望你会回去看一下</c>
<c.magenta>你的应用和你的代码</c>

00:29:57.464 --> 00:30:02.069
<c.magenta>我希望你会回去看一下</c>
<c.magenta>你的应用和你的代码</c>

00:30:02.135 --> 00:30:05.172
<c.magenta>尝试去发现这个模式能帮助你的地方</c>

00:30:05.239 --> 00:30:08.308
<c.magenta>减少代码的复杂性和可能清除漏洞</c>

00:30:10.143 --> 00:30:15.082
<c.magenta>这也应该不会让你感到惊讶</c>
<c.magenta>我们给你这个建议</c>

00:30:16.350 --> 00:30:21.388
<c.magenta>GCD对象</c>
<c.magenta>它的真实目的是被同步地使用</c>

00:30:21.455 --> 00:30:23.624
<c.magenta>遵循完全相同的模式</c>

00:30:25.392 --> 00:30:30.030
<c.magenta>让我们以那种方式看待GCD对象</c>

00:30:34.835 --> 00:30:37.437
<c.magenta>所以我们要记住第一步是设置</c>

00:30:37.804 --> 00:30:40.440
<c.magenta>给调度对象设置是你可以做的所有事情</c>

00:30:40.507 --> 00:30:43.310
<c.magenta>当你创建对象 所有你可以传递的属性</c>

00:30:43.477 --> 00:30:46.647
<c.magenta>Matt前面已展示过标签和队列属性</c>

00:30:48.081 --> 00:30:50.717
<c.magenta>在这里 我们也有一个调度资源</c>

00:30:50.951 --> 00:30:53.954
<c.magenta>我们观察文件描述器 它获得一些属性</c>

00:30:54.922 --> 00:30:56.890
<c.magenta>资源也有句柄</c>

00:30:57.424 --> 00:30:59.560
<c.magenta>特别是代码中的事件句柄</c>

00:30:59.626 --> 00:31:03.463
<c.magenta>当你在你的观察中发起的资源时</c>
<c.magenta>它会运行</c>

00:30:59.626 --> 00:31:03.463
<c.magenta>当你在你的观察中发起的资源时</c>
<c.magenta>它会运行</c>

00:31:03.530 --> 00:31:04.865
<c.magenta>那是事件等待</c>

00:31:05.699 --> 00:31:10.537
<c.magenta>对于我们这里拥有的资源</c>
<c.magenta>那是当有可用的数据的时候</c>

00:31:12.573 --> 00:31:14.641
<c.magenta>一旦你设置好了你的对象</c>
<c.magenta>它已经准备好了</c>

00:31:14.708 --> 00:31:17.244
<c.magenta>你想要试用它和激活它</c>

00:31:20.781 --> 00:31:23.183
<c.magenta>在这个新版本中 我们做了改进</c>

00:31:23.250 --> 00:31:27.087
<c.magenta>对于API调用 调用激活</c>

00:31:27.721 --> 00:31:29.923
<c.magenta>它曾经是用于调度资源</c>

00:31:29.990 --> 00:31:32.993
<c.magenta>初始摘要就是那个意思</c>

00:31:33.227 --> 00:31:38.832
<c.magenta>我们实际上暂停和激活</c>
<c.magenta>作为两个不同的概念</c>

00:31:39.499 --> 00:31:43.170
<c.magenta>在重启激活中可以被多次调用</c>

00:31:43.237 --> 00:31:44.905
<c.magenta>它只会执行一次</c>

00:31:46.573 --> 00:31:48.876
<c.magenta>协议是当你已经调用了激活</c>

00:31:48.942 --> 00:31:51.879
<c.magenta>你再也不会改变你的对象的属性</c>

00:31:54.114 --> 00:32:00.020
<c.magenta>我们也发现以你使用资源的方式</c>
<c.magenta>创建队列</c>

00:31:54.114 --> 00:32:00.020
<c.magenta>我们也发现以你使用资源的方式</c>
<c.magenta>创建队列</c>

00:32:00.087 --> 00:32:02.589
<c.magenta>创建时让它们在初始化</c>
<c.magenta>处于非激活状态是很有用的</c>

00:32:02.923 --> 00:32:06.627
<c.magenta>我们一家增加了一个新的属性</c>
<c.magenta>让你这么做</c>

00:32:06.693 --> 00:32:09.463
<c.magenta>这被命名为initiallyInactive</c>

00:32:10.230 --> 00:32:13.166
<c.magenta>一旦这个队列被创建了</c>
<c.magenta>你可以传递它 结束</c>

00:32:13.267 --> 00:32:16.136
<c.magenta>以你喜欢的方式配置它 最后激活它</c>

00:32:19.006 --> 00:32:23.544
<c.magenta>调度对象中的很多都不需要显式的作废</c>

00:32:23.610 --> 00:32:25.078
<c.magenta>比如组或者队列</c>

00:32:25.312 --> 00:32:29.216
<c.magenta>因为你停止使用它们的时候</c>
<c.magenta>它们就会变成非激活状态</c>

00:32:30.217 --> 00:32:35.722
<c.magenta>这是非常不同于资源的</c>
<c.magenta>资源有显示的作废</c>

00:32:35.789 --> 00:32:36.823
<c.magenta>它叫做Cancel</c>

00:32:38.258 --> 00:32:41.662
<c.magenta>资源的取消就是做了你期望的事情</c>

00:32:41.728 --> 00:32:44.998
<c.magenta>那就是你停止从你检测的东西中</c>
<c.magenta>获取事件</c>

00:32:45.866 --> 00:32:48.101
<c.magenta>但这不是它所做的唯一的事情</c>

00:32:48.368 --> 00:32:49.837
<c.magenta>它所做的第二件事是</c>

00:32:49.903 --> 00:32:53.073
<c.magenta>如果你在你的资源中</c>
<c.magenta>设立了一个取消句柄</c>

00:32:53.807 --> 00:32:55.008
<c.magenta>比如这里</c>

00:32:55.776 --> 00:32:58.745
<c.magenta>它会在取消时运行在一个队列目标上</c>

00:33:00.480 --> 00:33:04.384
<c.magenta>这实际上就是你想要摆脱的资源</c>

00:33:04.451 --> 00:33:07.254
<c.magenta>你在监测它 比如关闭文件脚步</c>

00:33:07.321 --> 00:33:08.155
<c.magenta>帧内存</c>

00:33:10.490 --> 00:33:12.259
<c.magenta>最后但不是最不重要的一个</c>

00:33:12.826 --> 00:33:16.697
<c.magenta>对资源的取消时当你的句柄被销毁</c>

00:33:17.464 --> 00:33:19.199
<c.magenta>句柄就是关闭</c>

00:33:19.466 --> 00:33:22.369
<c.magenta>它们获取对象甚至是资源自己</c>

00:33:22.936 --> 00:33:24.771
<c.magenta>它们可以是读取过程的一部分</c>

00:33:27.040 --> 00:33:31.111
<c.magenta>调用取消是你们破坏那读取循环的方式</c>

00:33:31.578 --> 00:33:36.383
<c.magenta>这是为什么始终取消你的资源</c>
<c.magenta>是那么的重要</c>

00:33:42.189 --> 00:33:46.360
<c.magenta>所以你记住前面所说的一点</c>
<c.magenta>我们增加了很多预设条件</c>

00:33:46.426 --> 00:33:49.062
<c.magenta>在我们的代码中 因为我们想要确保</c>

00:33:49.530 --> 00:33:54.601
<c.magenta>同步使用的对象永远是</c>
<c.magenta>以你可以期待的方式被使用</c>

00:33:56.003 --> 00:33:57.538
<c.magenta>调度也是一样的</c>

00:33:57.704 --> 00:34:00.440
<c.magenta>期待当你的对象被取消分配了</c>

00:33:57.704 --> 00:34:00.440
<c.magenta>期待当你的对象被取消分配了</c>

00:34:00.507 --> 00:34:01.942
<c.magenta>它是在一个不同的状态</c>

00:34:02.743 --> 00:34:05.579
<c.magenta>调度期望你做两个事情</c>

00:34:05.846 --> 00:34:11.217
<c.magenta>第一 你的对象是激活的</c>
<c.magenta>第二 它们不是被暂停的</c>

00:34:13.954 --> 00:34:16.924
<c.magenta>为什么它是暂停或者是非激活的原因是</c>

00:34:16.989 --> 00:34:19.193
<c.magenta>意味着你作为一个开发者</c>

00:34:19.259 --> 00:34:22.329
<c.magenta>不要认为运行与其相关的代码是安全的</c>

00:34:22.396 --> 00:34:24.998
<c.magenta>但是我们需要运行代码来摆脱这个对象</c>

00:34:30.871 --> 00:34:31.772
<c.magenta>好了</c>

00:34:32.472 --> 00:34:39.279
<c.magenta>今天我们看到了你可以如何</c>
<c.magenta>以数据流的方式思考你的应用</c>

00:34:39.513 --> 00:34:44.217
<c.magenta>和你应该如何使用它</c>
<c.magenta>来将其划分为相当独立的子系统</c>

00:34:44.284 --> 00:34:49.056
<c.magenta>使用值类型达到交流的目的</c>

00:34:51.324 --> 00:34:53.226
<c.magenta>如果你需要同步状态</c>

00:34:53.493 --> 00:34:57.331
<c.magenta>我们也向你展示了你可以怎么使用</c>
<c.magenta>调度队列来做这个</c>

00:34:58.131 --> 00:35:03.437
<c.magenta>最后 当你有对象 它们是被使用过的</c>
<c.magenta>在一个同步性非常强的世界</c>

00:34:58.131 --> 00:35:03.437
<c.magenta>最后 当你有对象 它们是被使用过的</c>
<c.magenta>在一个同步性非常强的世界</c>

00:35:03.737 --> 00:35:07.708
<c.magenta>如何使用激活和作废</c>
<c.magenta>来使得这个模式正确</c>

00:35:09.743 --> 00:35:15.282
<c.magenta>这是一个链接</c>
<c.magenta>它向你们展示更多与这个演讲相关资源</c>

00:35:16.016 --> 00:35:21.088
<c.magenta>一些相关演讲 若你对调度感兴趣</c>

00:35:21.154 --> 00:35:24.825
<c.magenta>你们应该看看 因为它们非常的有趣</c>

00:35:25.726 --> 00:35:29.696
<c.magenta>就是这样</c>
<c.magenta>这就是使用GCD进行同步编程</c>
