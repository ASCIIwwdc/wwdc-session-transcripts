WEBVTT

00:00:19.620 --> 00:00:23.891 align:middle
<c.magenta>使用TVMLKit开发应用</c>

00:00:28.362 --> 00:00:30.230 align:middle
<c.magenta>下午好 欢迎大家</c>

00:00:30.764 --> 00:00:33.667 align:middle
<c.magenta>我是Nurinder Manj</c>
<c.magenta>目前是一名TVMLKit团队</c>

00:00:33.734 --> 00:00:34.701 align:middle
<c.magenta>软件开发经理</c>

00:00:35.469 --> 00:00:40.774 align:middle
<c.magenta>在此我和Parry Panesar一起</c>
<c.magenta>谈论如何使用TVMLKit构建大型应用</c>

00:00:42.109 --> 00:00:46.313 align:middle
<c.magenta>你们中的大多数都开发过一个</c>
<c.magenta>或者多个原生应用</c>

00:00:46.813 --> 00:00:50.350 align:middle
<c.magenta>在此过程中你们要</c>
<c.magenta>痛苦的调试性能</c>

00:00:50.417 --> 00:00:52.052 align:middle
<c.magenta>并且不断优化用户界面</c>

00:00:54.121 --> 00:00:57.891 align:middle
<c.magenta>通常这些过程牺牲了新特性开发</c>
<c.magenta>或者会导致延迟交付</c>

00:00:58.959 --> 00:01:00.694 align:middle
<c.magenta>你们中有人可能开发过web应用</c>

00:00:58.959 --> 00:01:00.694 align:middle
<c.magenta>你们中有人可能开发过web应用</c>

00:01:01.662 --> 00:01:03.197 align:middle
<c.magenta>web应用通常有很强可塑性</c>

00:01:03.263 --> 00:01:07.034 align:middle
<c.magenta>而且要不断的更新</c>
<c.magenta>但是用户体验却不是很好</c>

00:01:08.535 --> 00:01:13.173 align:middle
<c.magenta>TVMLKit作为一个新的框架</c>
<c.magenta>已经引入到tvOS中</c>

00:01:13.574 --> 00:01:16.410 align:middle
<c.magenta>作为桥梁连接web和原生应用</c>

00:01:17.778 --> 00:01:22.249 align:middle
<c.magenta>当你使用TVMLKit构建应用时</c>
<c.magenta>应用将看起来</c>

00:01:22.716 --> 00:01:25.819 align:middle
<c.magenta>感觉起来和使用起来</c>
<c.magenta>就和Apple应用一模一样</c>

00:01:26.954 --> 00:01:27.855 align:middle
<c.magenta>我们开始吧</c>

00:01:29.623 --> 00:01:34.194 align:middle
<c.magenta>今天 首先我准备讲一下</c>
<c.magenta>这个框架可以为大家提供哪些东西</c>

00:01:35.896 --> 00:01:40.133 align:middle
<c.magenta>然后 我们为大家准备了一些应用</c>

00:01:40.200 --> 00:01:43.904 align:middle
<c.magenta>这些应用将为大家展示</c>
<c.magenta>一个TVMLKit应用的全部特性</c>

00:01:44.805 --> 00:01:49.109 align:middle
<c.magenta>但是在此之前 我要先大致介绍下</c>
<c.magenta>这个框架的信息</c>

00:01:51.044 --> 00:01:54.915 align:middle
<c.magenta>在这段视频的后半段</c>
<c.magenta>我会讲一下</c>

00:01:54.982 --> 00:01:59.319 align:middle
<c.magenta>新的令人兴奋的新特性</c>
<c.magenta>该特性将在tvOS 10中引入进来</c>

00:02:01.522 --> 00:02:04.324 align:middle
<c.magenta>我带大家</c>
<c.magenta>看一下一些用户交互界面</c>

00:02:06.593 --> 00:02:08.794 align:middle
<c.magenta>这app store应用</c>
<c.magenta>且是专门 为Apple TV定制</c>

00:02:11.565 --> 00:02:13.333 align:middle
<c.magenta>一款常规的iTunes 电影应用</c>

00:02:16.036 --> 00:02:17.905 align:middle
<c.magenta>借鉴了Search应用的特性</c>

00:02:20.307 --> 00:02:22.075 align:middle
<c.magenta>另一款应用是Apple Music</c>

00:02:25.045 --> 00:02:31.385 align:middle
<c.magenta>所有这些移植到Apple TV</c>
<c.magenta>的应用都是基于TVMLKit开发的</c>

00:02:33.554 --> 00:02:38.258 align:middle
<c.magenta>并且如果你回过头来思考</c>
<c.magenta>这些应用都有什么特点的时候</c>

00:02:39.126 --> 00:02:40.527 align:middle
<c.magenta>会发现他们都有同一个目的</c>

00:02:41.862 --> 00:02:45.098 align:middle
<c.magenta>他们可以让人们浏览 交互</c>

00:02:45.165 --> 00:02:47.301 align:middle
<c.magenta>并且都包含内容分类信息</c>

00:02:48.635 --> 00:02:52.105 align:middle
<c.magenta>这些内容都将以一种简单而独特的方式</c>
<c.magenta>被呈现出来</c>

00:02:54.474 --> 00:02:56.076 align:middle
<c.magenta>那这个框架究竟带来了什么？</c>

00:02:58.045 --> 00:03:02.349 align:middle
<c.magenta>这个框架为开发者提供</c>
<c.magenta>基于模板的原生交互界面</c>

00:02:58.045 --> 00:03:02.349 align:middle
<c.magenta>这个框架为开发者提供</c>
<c.magenta>基于模板的原生交互界面</c>

00:03:03.350 --> 00:03:06.286 align:middle
<c.magenta>而且性能方面都已经过了优化和改善</c>

00:03:07.087 --> 00:03:10.157 align:middle
<c.magenta>为开发者节省了大量的</c>
<c.magenta>时间和精力</c>

00:03:12.960 --> 00:03:16.063 align:middle
<c.magenta>这些复杂而丰富的交互界面正</c>
<c.magenta>如大家刚才所见</c>

00:03:17.030 --> 00:03:20.033 align:middle
<c.magenta>是通过</c>
<c.magenta>是用一个标记性的API来定义实现的</c>

00:03:21.368 --> 00:03:23.704 align:middle
<c.magenta>并且使用JavaScript</c>
<c.magenta>驱动这些应用</c>

00:03:26.773 --> 00:03:28.342 align:middle
<c.magenta>这些模板的可定制性很强</c>

00:03:29.142 --> 00:03:33.213 align:middle
<c.magenta>你可以改变它的外观、</c>
<c.magenta>它的行为和样式</c>

00:03:37.184 --> 00:03:41.421 align:middle
<c.magenta>而且 这个框架没有局限于</c>
<c.magenta>我们提供的既有模板</c>

00:03:42.623 --> 00:03:45.158 align:middle
<c.magenta>你可根据现有的</c>
<c.magenta>Apple模板进行改造</c>

00:03:45.225 --> 00:03:47.961 align:middle
<c.magenta>只要添加自己的视图</c>
<c.magenta>和这些视图的控制器就可以了</c>

00:03:49.129 --> 00:03:51.365 align:middle
<c.magenta>甚至 你可以从头创建自己的模板</c>

00:03:53.166 --> 00:03:55.669 align:middle
<c.magenta>你也可以扩展</c>
<c.magenta>JavaScript的功能性</c>

00:03:55.736 --> 00:03:57.304 align:middle
<c.magenta>当然是根据你的应用场景来定制</c>

00:04:00.107 --> 00:04:02.776 align:middle
<c.magenta>我可以向你保证</c>
<c.magenta>这不是一个web浏览器</c>

00:04:03.944 --> 00:04:08.749 align:middle
<c.magenta>它是一个优化了的</c>
<c.magenta>为tvOS定制的原生交互体验</c>

00:04:11.585 --> 00:04:12.986 align:middle
<c.magenta>我们开始构建应用吧</c>

00:04:14.555 --> 00:04:17.958 align:middle
<c.magenta>这些是主要的控件</c>
<c.magenta>待会儿我会详细介绍</c>

00:04:18.392 --> 00:04:20.994 align:middle
<c.magenta>我们需要</c>
<c.magenta>构建我们自己的应用</c>

00:04:22.529 --> 00:04:27.000 align:middle
<c.magenta>首先在Xcode里创建</c>
<c.magenta>并配置客户端项目</c>

00:04:29.236 --> 00:04:31.872 align:middle
<c.magenta>接下来我会讲关于标记</c>

00:04:32.539 --> 00:04:35.642 align:middle
<c.magenta>和样式来配置项目</c>

00:04:37.578 --> 00:04:40.547 align:middle
<c.magenta>最后 我会讲下</c>
<c.magenta>JavaScript API</c>

00:04:40.848 --> 00:04:42.549 align:middle
<c.magenta>是如何驱动这个应用的</c>

00:04:44.418 --> 00:04:46.253 align:middle
<c.magenta>现在在我们研究细节之前</c>

00:04:46.486 --> 00:04:49.656 align:middle
<c.magenta>我来给大家展示下</c>
<c.magenta>从架构的角度来分析这个项目</c>

00:04:51.158 --> 00:04:55.162 align:middle
<c.magenta>典型的TVMLKit应用是基于</c>
<c.magenta>client server架构模型</c>

00:04:56.864 --> 00:04:59.867 align:middle
<c.magenta>客户端应用是基于UIKit的应用</c>

00:04:59.933 --> 00:05:01.702 align:middle
<c.magenta>它可以运行在tvOS设备上</c>

00:04:59.933 --> 00:05:01.702 align:middle
<c.magenta>它可以运行在tvOS设备上</c>

00:05:01.768 --> 00:05:06.206 align:middle
<c.magenta>而server端保存有媒体文件</c>
<c.magenta>和JavaScript文件</c>

00:05:08.375 --> 00:05:11.445 align:middle
<c.magenta>这框架提供了application</c>
<c.magenta>controller API</c>

00:05:12.212 --> 00:05:15.215 align:middle
<c.magenta>它可以下载</c>
<c.magenta>关键的JavaScript文件</c>

00:05:15.282 --> 00:05:17.284 align:middle
<c.magenta>还会搭建一个JavaScript环境</c>

00:05:17.351 --> 00:05:20.120 align:middle
<c.magenta>且负责控制JavaScript行为</c>

00:05:21.722 --> 00:05:23.490 align:middle
<c.magenta>一旦行为可控</c>

00:05:24.124 --> 00:05:30.797 align:middle
<c.magenta>JavaScript就负责下载</c>
<c.magenta>任何需要的文件</c>

00:05:31.665 --> 00:05:33.600 align:middle
<c.magenta>来展示用户看的模板</c>

00:05:35.769 --> 00:05:39.473 align:middle
<c.magenta>并且JavaScript还负责</c>
<c.magenta>处理用户所有的事件</c>

00:05:39.540 --> 00:05:41.275 align:middle
<c.magenta>并且正确的响应事件</c>

00:05:46.480 --> 00:05:49.349 align:middle
<c.magenta>第一步</c>
<c.magenta>打开Xcode</c>

00:05:50.751 --> 00:05:53.654 align:middle
<c.magenta>Xcode提供了TVML</c>
<c.magenta>类型的应用模板</c>

00:05:53.720 --> 00:05:56.089 align:middle
<c.magenta>这是你</c>
<c.magenta>开发的应用的起点</c>

00:05:59.026 --> 00:06:01.929 align:middle
<c.magenta>这是部分代码</c>
<c.magenta>由模板生成</c>

00:05:59.026 --> 00:06:01.929 align:middle
<c.magenta>这是部分代码</c>
<c.magenta>由模板生成</c>

00:06:04.364 --> 00:06:08.135 align:middle
<c.magenta>这里的第一步骤是</c>
<c.magenta>修改JavaScript URL</c>

00:06:08.202 --> 00:06:10.137 align:middle
<c.magenta>指向主要的JavaScript文件</c>

00:06:12.773 --> 00:06:16.310 align:middle
<c.magenta>下一步是创建application</c>
<c.magenta>controller上下文</c>

00:06:16.810 --> 00:06:18.712 align:middle
<c.magenta>关联javaScript URL</c>

00:06:19.713 --> 00:06:23.083 align:middle
<c.magenta>你也可以指定启动选项</c>

00:06:23.150 --> 00:06:26.019 align:middle
<c.magenta>这些选项会在启动时</c>
<c.magenta>传递给JavaScript</c>

00:06:28.255 --> 00:06:30.958 align:middle
<c.magenta>最后一个步骤是创建一个</c>
<c.magenta>application controller实例</c>

00:06:31.024 --> 00:06:32.726 align:middle
<c.magenta>基于之前的上下文和窗口</c>

00:06:33.760 --> 00:06:37.464 align:middle
<c.magenta>下载你的关键JavaScript</c>
<c.magenta>文件并执行该文件</c>

00:06:37.865 --> 00:06:40.133 align:middle
<c.magenta>然后控制权交给JavaScript</c>

00:06:41.768 --> 00:06:44.638 align:middle
<c.magenta>你也可以指定一个代表...</c>

00:06:46.206 --> 00:06:48.175 align:middle
<c.magenta>来监控你的controller状态</c>

00:06:49.977 --> 00:06:53.146 align:middle
<c.magenta>比如</c>
<c.magenta>启动项目的时候提示是成功还是失败了</c>

00:06:57.084 --> 00:06:58.886 align:middle
<c.magenta>接下来我们讨论下模板</c>

00:07:04.525 --> 00:07:06.894 align:middle
<c.magenta>TVML是一个Markup规范</c>

00:07:07.427 --> 00:07:09.897 align:middle
<c.magenta>用于定义符合Apple-TV</c>
<c.magenta>规范的模板</c>

00:07:12.266 --> 00:07:16.036 align:middle
<c.magenta>当Markup展示在导航栏的时候</c>

00:07:16.103 --> 00:07:19.039 align:middle
<c.magenta>从JavaScript编译成UI</c>

00:07:20.374 --> 00:07:24.178 align:middle
<c.magenta>一旦展示完成</c>
<c.magenta>你可以继续更改XML</c>

00:07:25.379 --> 00:07:29.383 align:middle
<c.magenta>这些更改也会动态渲染到用户界面</c>

00:07:31.885 --> 00:07:34.755 align:middle
<c.magenta>外面的模板看上去还是正常的</c>

00:07:35.656 --> 00:07:38.025 align:middle
<c.magenta>你不必做额外的样式化工作</c>

00:07:38.792 --> 00:07:41.295 align:middle
<c.magenta>只需要填充内容就行</c>
<c.magenta>然后就可以继续往下操作</c>

00:07:43.363 --> 00:07:46.433 align:middle
<c.magenta>但是你可以更改外观</c>

00:07:46.500 --> 00:07:50.871 align:middle
<c.magenta>和行为 通过使用样式化工具</c>
<c.magenta>来适配 [inaudible]</c>

00:07:53.674 --> 00:07:55.075 align:middle
<c.magenta>关于标记Markup</c>

00:07:55.809 --> 00:07:59.213 align:middle
<c.magenta>文档是一个实体</c>
<c.magenta>用来包装模板</c>

00:08:00.747 --> 00:08:03.317 align:middle
<c.magenta>这是XML结构树</c>
<c.magenta>展示了文档结构</c>

00:08:04.151 --> 00:08:05.752 align:middle
<c.magenta>它有两个子元素</c>

00:08:06.386 --> 00:08:09.723 align:middle
<c.magenta>第一个是head元素</c>
<c.magenta>具有自己的样式</c>

00:08:09.790 --> 00:08:13.160 align:middle
<c.magenta>封装了</c>
<c.magenta>所有你定义的样式</c>

00:08:15.028 --> 00:08:17.664 align:middle
<c.magenta>第二个元素是</c>
<c.magenta>templateName</c>

00:08:18.866 --> 00:08:20.167 align:middle
<c.magenta>以及它的内容</c>

00:08:22.669 --> 00:08:26.440 align:middle
<c.magenta>每个模板的名字唯一</c>
<c.magenta>并且具有功能性</c>

00:08:28.709 --> 00:08:30.744 align:middle
<c.magenta>我们来看一下其中的一个</c>
<c.magenta>模板</c>

00:08:33.447 --> 00:08:36.683 align:middle
<c.magenta>这是iTunes Movies应用</c>
<c.magenta>的Top Movies页面</c>

00:08:39.785 --> 00:08:42.688 align:middle
<c.magenta>这个模板允许你滚动</c>
<c.magenta>所有的内容栈</c>

00:08:44.191 --> 00:08:46.793 align:middle
<c.magenta>在Markup面板</c>
<c.magenta>称之为stackTemplate</c>

00:08:48.629 --> 00:08:50.030 align:middle
<c.magenta>在这个例子里</c>

00:08:51.431 --> 00:08:54.301 align:middle
<c.magenta>它的模板</c>
<c.magenta>使用XML展示</c>

00:08:55.602 --> 00:08:58.438 align:middle
<c.magenta>在模板的根节点是一个</c>
<c.magenta>collectionList元素</c>

00:08:58.505 --> 00:09:02.009 align:middle
<c.magenta>封装了各种</c>
<c.magenta>集合类型 比如carousel</c>

00:08:58.505 --> 00:09:02.009 align:middle
<c.magenta>封装了各种</c>
<c.magenta>集合类型 比如carousel</c>

00:09:02.075 --> 00:09:04.811 align:middle
<c.magenta>shelves grids</c>
<c.magenta>以及其他支持的类型</c>

00:09:09.750 --> 00:09:12.286 align:middle
<c.magenta>现在这里的top的控制器是</c>
<c.magenta>carousel control</c>

00:09:13.153 --> 00:09:15.556 align:middle
<c.magenta>这支持水平的内容浏览</c>

00:09:16.490 --> 00:09:18.258 align:middle
<c.magenta>基于中间内容的浏览</c>

00:09:22.496 --> 00:09:26.567 align:middle
<c.magenta>这种控制器类型在空白状态下</c>
<c.magenta>会自动滚动内容</c>

00:09:28.836 --> 00:09:33.841 align:middle
<c.magenta>而创建这个控制器Markup很简单</c>

00:09:35.576 --> 00:09:40.547 align:middle
<c.magenta>你只要定义一个section并且</c>
<c.magenta>列出list可预见lockup情况</c>

00:09:41.248 --> 00:09:43.584 align:middle
<c.magenta>不需要进行额外的配置</c>

00:09:46.620 --> 00:09:49.456 align:middle
<c.magenta>在这个carousel下面是</c>
<c.magenta>一个shelf</c>

00:09:50.424 --> 00:09:53.193 align:middle
<c.magenta>它也可控制</c>
<c.magenta>水平滚动内容</c>

00:09:55.395 --> 00:09:58.832 align:middle
<c.magenta>而展示这个的Markup</c>
<c.magenta>和carousel很相似</c>

00:10:00.534 --> 00:10:03.337 align:middle
<c.magenta>但是shelf允许你指定一个标头</c>

00:10:04.037 --> 00:10:06.073 align:middle
<c.magenta>且可以包含一个或多个section</c>

00:10:06.874 --> 00:10:09.309 align:middle
<c.magenta>每个section也可以自带</c>
<c.magenta>一个标头</c>

00:10:09.676 --> 00:10:11.645 align:middle
<c.magenta>而且必须包含一个或多个lockup</c>

00:10:13.814 --> 00:10:14.882 align:middle
<c.magenta>那么lockup又是什么呢？</c>

00:10:16.083 --> 00:10:17.918 align:middle
<c.magenta>lockup是一个UI控制器</c>

00:10:19.486 --> 00:10:22.523 align:middle
<c.magenta>封装了图片</c>
<c.magenta>和文字元素</c>

00:10:26.193 --> 00:10:27.728 align:middle
<c.magenta>这是一个[inaudible]</c>

00:10:30.597 --> 00:10:32.299 align:middle
<c.magenta>回到我们的例子应用</c>

00:10:32.999 --> 00:10:36.236 align:middle
<c.magenta>若你留意</c>
<c.magenta>只有当前聚焦的lockup</c>

00:10:36.303 --> 00:10:38.038 align:middle
<c.magenta>的文档元素是可见的</c>

00:10:39.273 --> 00:10:41.375 align:middle
<c.magenta>这不是默认的</c>
<c.magenta>框架行为</c>

00:10:43.076 --> 00:10:47.314 align:middle
<c.magenta>这是一个例子告诉你</c>
<c.magenta>如何定制样式</c>

00:10:48.215 --> 00:10:49.683 align:middle
<c.magenta>我来演示下具体怎么做</c>

00:10:51.785 --> 00:10:53.587 align:middle
<c.magenta>我在这定义了一个类</c>

00:10:54.188 --> 00:10:56.190 align:middle
<c.magenta>我把它的高亮属性设置为</c>

00:10:56.823 --> 00:11:00.394 align:middle
<c.magenta>为选取框的值</c>
<c.magenta>并且在高亮的时候才显示</c>

00:10:56.823 --> 00:11:00.394 align:middle
<c.magenta>为选取框的值</c>
<c.magenta>并且在高亮的时候才显示</c>

00:11:01.328 --> 00:11:02.563 align:middle
<c.magenta>然后设置这个类</c>

00:11:02.629 --> 00:11:04.765 align:middle
<c.magenta>的文字元素</c>
<c.magenta>和lockup不匹配</c>

00:11:05.599 --> 00:11:07.167 align:middle
<c.magenta>然后你就可以看到这个行为了</c>

00:11:09.169 --> 00:11:12.840 align:middle
<c.magenta>但是 这只是一个简单</c>
<c.magenta>的定制化例子</c>

00:11:13.140 --> 00:11:14.975 align:middle
<c.magenta>我再给大家</c>
<c.magenta>演示一些其他例子</c>

00:11:16.910 --> 00:11:18.312 align:middle
<c.magenta>这又是一个</c>
<c.magenta>stackTemplate</c>

00:11:20.047 --> 00:11:23.750 align:middle
<c.magenta>我们现在有一个banner</c>
<c.magenta>并且指定了它的背景图片</c>

00:11:23.817 --> 00:11:25.919 align:middle
<c.magenta>banner就在collectionList的相邻位置</c>

00:11:27.221 --> 00:11:29.957 align:middle
<c.magenta>这是背景颜色</c>
<c.magenta>为模板而设定</c>

00:11:30.023 --> 00:11:32.559 align:middle
<c.magenta>这个模板无缝隙的</c>
<c.magenta>协调了背景颜色</c>

00:11:32.626 --> 00:11:34.895 align:middle
<c.magenta>和banner的背景图片颜色</c>
<c.magenta>我们可以看到是这个效果</c>

00:11:36.330 --> 00:11:39.032 align:middle
<c.magenta>banner标题的结构</c>

00:11:39.099 --> 00:11:42.035 align:middle
<c.magenta>以及按钮的结构</c>
<c.magenta>都是可以定制和配置的</c>

00:11:45.305 --> 00:11:48.542 align:middle
<c.magenta>另一个熟悉的例子</c>
<c.magenta>是一个movie bundle例子</c>

00:11:49.009 --> 00:11:50.544 align:middle
<c.magenta>这也是一个</c>
<c.magenta>stackTemplate</c>

00:11:54.715 --> 00:11:56.850 align:middle
<c.magenta>这个模板的背景图片是</c>

00:11:57.117 --> 00:12:01.154 align:middle
<c.magenta>有框架生成的</c>
<c.magenta>你只要指定一个图片</c>

00:11:57.117 --> 00:12:01.154 align:middle
<c.magenta>有框架生成的</c>
<c.magenta>你只要指定一个图片</c>

00:12:01.221 --> 00:12:02.523 align:middle
<c.magenta>设置为英雄形象图片元素</c>

00:12:04.458 --> 00:12:08.962 align:middle
<c.magenta>再一次的</c>
<c.magenta>标题 shelf</c>

00:12:09.029 --> 00:12:11.532 align:middle
<c.magenta>以及按钮的布局也定制化了</c>

00:12:14.601 --> 00:12:18.405 align:middle
<c.magenta>而且还有丰富的模板</c>
<c.magenta>可供大家选择</c>

00:12:19.840 --> 00:12:21.241 align:middle
<c.magenta>使用样式工具</c>

00:12:22.009 --> 00:12:24.578 align:middle
<c.magenta>可以创建独特的用户体验</c>

00:12:24.645 --> 00:12:26.046 align:middle
<c.magenta>符合大家品牌的特色</c>

00:12:28.715 --> 00:12:34.087 align:middle
<c.magenta>TVML Catalogue是一个</c>
<c.magenta>资源库可以浏览模板和与模板交互</c>

00:12:35.222 --> 00:12:36.190 align:middle
<c.magenta>请检查一下</c>

00:12:39.660 --> 00:12:41.528 align:middle
<c.magenta>就像我之前所说</c>

00:12:42.429 --> 00:12:46.033 align:middle
<c.magenta>TVMLKit搭建了</c>
<c.magenta>原生和web应用的关联</c>

00:12:47.434 --> 00:12:50.971 align:middle
<c.magenta>你会发现可以很简单的创建</c>

00:12:51.038 --> 00:12:54.942 align:middle
<c.magenta>丰富和复杂的用户界面</c>
<c.magenta>只要使用简单的Markup就可以了</c>

00:12:56.310 --> 00:12:59.580 align:middle
<c.magenta>我给大家演示下JavaScript</c>
<c.magenta>驱动应用的原理</c>

00:13:02.883 --> 00:13:07.888 align:middle
<c.magenta>它所提供的JavaScript引擎</c>

00:13:08.188 --> 00:13:10.691 align:middle
<c.magenta>由框架的</c>
<c.magenta>JavaScriptCore驱动</c>

00:13:12.292 --> 00:13:14.728 align:middle
<c.magenta>而内置的Web Inspector</c>

00:13:14.795 --> 00:13:17.831 align:middle
<c.magenta>也提供给了打击调试和优化</c>

00:13:21.001 --> 00:13:22.803 align:middle
<c.magenta>并且从tvOS 10开始</c>

00:13:22.870 --> 00:13:25.672 align:middle
<c.magenta>JavaScriptCore</c>
<c.magenta>对ES6有很好的兼容了</c>

00:13:32.212 --> 00:13:35.182 align:middle
<c.magenta>TVMLKit添加了</c>
<c.magenta>基于平台的API</c>

00:13:35.249 --> 00:13:37.084 align:middle
<c.magenta>辅助驱动应用</c>

00:13:39.052 --> 00:13:42.623 align:middle
<c.magenta>现在标准的web API</c>
<c.magenta>像XMLHttpRequest</c>

00:13:42.689 --> 00:13:44.892 align:middle
<c.magenta>是传输</c>
<c.magenta>客户端和服务器端的数据</c>

00:13:45.959 --> 00:13:49.396 align:middle
<c.magenta>DOM是分析</c>
<c.magenta>转换和操作[inaudible]</c>

00:13:49.463 --> 00:13:52.466 align:middle
<c.magenta>监听用户时间 本地存储</c>

00:13:52.533 --> 00:13:55.269 align:middle
<c.magenta>会话存储</c>
<c.magenta>都是由框架提供的</c>

00:13:57.237 --> 00:14:01.942 align:middle
<c.magenta>另外TVMLKit</c>
<c.magenta>也是提供了平台相关的API</c>

00:13:57.237 --> 00:14:01.942 align:middle
<c.magenta>另外TVMLKit</c>
<c.magenta>也是提供了平台相关的API</c>

00:14:02.409 --> 00:14:04.578 align:middle
<c.magenta>比如管理</c>
<c.magenta>导航栈</c>

00:14:05.812 --> 00:14:07.147 align:middle
<c.magenta>获取系统信息</c>

00:14:09.449 --> 00:14:13.353 align:middle
<c.magenta>播放[inaudible]</c>
<c.magenta>图片轮播还有其他功能</c>

00:14:15.255 --> 00:14:16.423 align:middle
<c.magenta>除此之外</c>

00:14:17.491 --> 00:14:21.228 align:middle
<c.magenta>框架也为大家提供了简单的API</c>

00:14:21.295 --> 00:14:22.629 align:middle
<c.magenta>处理媒体文件的播放功能</c>

00:14:25.766 --> 00:14:28.602 align:middle
<c.magenta>现在有个重要的事情</c>
<c.magenta>我要指出来</c>

00:14:28.669 --> 00:14:31.772 align:middle
<c.magenta>有一个单独的</c>
<c.magenta>JavaScript上下文</c>

00:14:31.839 --> 00:14:33.340 align:middle
<c.magenta>针对每个controller</c>
<c.magenta>都有一个</c>

00:14:33.774 --> 00:14:36.310 align:middle
<c.magenta>你可以你管理所有的document</c>

00:14:36.376 --> 00:14:37.845 align:middle
<c.magenta>这个单独的上下文中</c>

00:14:40.948 --> 00:14:44.418 align:middle
<c.magenta>我来讲解下</c>
<c.magenta>一些关键类</c>

00:14:47.621 --> 00:14:49.456 align:middle
<c.magenta>第一个是应用对象</c>

00:14:50.057 --> 00:14:53.060 align:middle
<c.magenta>应用对象提供了回调方法</c>
<c.magenta>而且是必须注册的方法</c>

00:14:53.560 --> 00:14:55.829 align:middle
<c.magenta>最重要的调用是onLaunch方法</c>

00:14:56.997 --> 00:14:59.766 align:middle
<c.magenta>指示你所有</c>
<c.magenta>JavaScript应用的起点</c>

00:15:02.703 --> 00:15:06.273 align:middle
<c.magenta>另一个 API 我要提到的是</c>
<c.magenta>关于处理错误的方法</c>

00:15:08.242 --> 00:15:09.276 align:middle
<c.magenta>叫做onError</c>

00:15:09.343 --> 00:15:11.378 align:middle
<c.magenta>你必须提供良好的回调函数</c>

00:15:11.445 --> 00:15:13.680 align:middle
<c.magenta>处理那些异常</c>
<c.magenta>和失败的情况</c>

00:15:15.449 --> 00:15:18.585 align:middle
<c.magenta>一旦控制</c>
<c.magenta>交给JavaScript</c>

00:15:19.686 --> 00:15:22.689 align:middle
<c.magenta>你第一个要做的事情是</c>
<c.magenta>展示一个文档</c>

00:15:24.191 --> 00:15:25.192 align:middle
<c.magenta>为了实现这个</c>

00:15:25.559 --> 00:15:28.829 align:middle
<c.magenta>NavigationDocument类</c>
<c.magenta>就需要大家好好处理了</c>

00:15:29.897 --> 00:15:33.934 align:middle
<c.magenta>这个类等同于和UINavigationController</c>
<c.magenta>在TVMLKit这个框架里</c>

00:15:35.502 --> 00:15:38.005 align:middle
<c.magenta>里面有一个全局的</c>
<c.magenta>预置的实例</c>

00:15:38.071 --> 00:15:40.007 align:middle
<c.magenta>你现在可以创建更多的实例了</c>

00:15:41.341 --> 00:15:44.344 align:middle
<c.magenta>现在你只要负责</c>
<c.magenta>添加document</c>

00:15:44.945 --> 00:15:46.647 align:middle
<c.magenta>把他们弹出</c>

00:15:46.713 --> 00:15:49.283 align:middle
<c.magenta>是由Menu手势操作负责</c>
<c.magenta>也是属于框架处理的情形</c>

00:15:52.419 --> 00:15:56.156 align:middle
<c.magenta>还有三个主要的API</c>
<c.magenta>你们会经常用到</c>

00:15:57.257 --> 00:16:01.328 align:middle
<c.magenta>头两个是pushDocument</c>
<c.magenta>和replaceDocument</c>

00:15:57.257 --> 00:16:01.328 align:middle
<c.magenta>头两个是pushDocument</c>
<c.magenta>和replaceDocument</c>

00:16:02.930 --> 00:16:04.131 align:middle
<c.magenta>他们是一起出现的</c>

00:16:05.065 --> 00:16:08.035 align:middle
<c.magenta>我来演示下推荐的</c>
<c.magenta>操作方法</c>

00:16:11.104 --> 00:16:13.607 align:middle
<c.magenta>只是一个代码段</c>
<c.magenta>创建一个模板</c>

00:16:16.310 --> 00:16:19.646 align:middle
<c.magenta>通常当你处理</c>
<c.magenta>处理用户请求或者启动应用的时候</c>

00:16:20.314 --> 00:16:22.249 align:middle
<c.magenta>你会展现一个Spinner</c>

00:16:23.217 --> 00:16:25.752 align:middle
<c.magenta>以便于用户知道</c>
<c.magenta>当前是什么情况</c>

00:16:27.621 --> 00:16:30.490 align:middle
<c.magenta>一旦你创建了</c>
<c.magenta>这个loading文档</c>

00:16:30.557 --> 00:16:33.327 align:middle
<c.magenta>你应该使用pushDocument</c>
<c.magenta>把它放到栈顶</c>

00:16:35.128 --> 00:16:37.798 align:middle
<c.magenta>当你等待</c>
<c.magenta>获取到远程数据的时候</c>

00:16:38.899 --> 00:16:39.967 align:middle
<c.magenta>并且已经准备好</c>

00:16:40.434 --> 00:16:44.037 align:middle
<c.magenta>之后你会替换</c>
<c.magenta>掉当前的loading文档</c>

00:16:44.104 --> 00:16:45.439 align:middle
<c.magenta>成期望的新内容</c>

00:16:46.807 --> 00:16:49.643 align:middle
<c.magenta>为做到这个 要用</c>
<c.magenta>replaceDocument方法</c>

00:16:51.144 --> 00:16:52.846 align:middle
<c.magenta>这是一个常见的模式</c>

00:16:53.780 --> 00:16:56.817 align:middle
<c.magenta>我们鼓励</c>
<c.magenta>你用正确的方式展示Spinner</c>

00:16:56.884 --> 00:16:59.086 align:middle
<c.magenta>当你准备从</c>
<c.magenta>远端获取数据的时候</c>

00:17:04.858 --> 00:17:06.827 align:middle
<c.magenta>最后一个API</c>
<c.magenta>是presentModal</c>

00:17:07.461 --> 00:17:10.329 align:middle
<c.magenta>是用来展示警告和错误信息的</c>

00:17:10.396 --> 00:17:12.699 align:middle
<c.magenta>或者以不覆盖的形式</c>
<c.magenta>展示其他的模板</c>

00:17:15.469 --> 00:17:19.006 align:middle
<c.magenta>现在影响TV观看体验的关键</c>
<c.magenta>是视频播放器功能</c>

00:17:19.740 --> 00:17:21.642 align:middle
<c.magenta>我们对此进行了简化</c>

00:17:22.576 --> 00:17:24.011 align:middle
<c.magenta>让我来演示给大家</c>

00:17:25.579 --> 00:17:27.481 align:middle
<c.magenta>只需要10行不到的代码</c>

00:17:27.948 --> 00:17:32.252 align:middle
<c.magenta>你就可以配置完成具有全部特性的</c>
<c.magenta>视频播放器模块</c>

00:17:33.620 --> 00:17:35.255 align:middle
<c.magenta>我带大家看下</c>
<c.magenta>这段代码</c>

00:17:36.390 --> 00:17:39.826 align:middle
<c.magenta>首先 创建一个MediaItem</c>
<c.magenta>它的类型是video</c>

00:17:39.893 --> 00:17:41.662 align:middle
<c.magenta>并且设置视频流的URL</c>

00:17:43.664 --> 00:17:47.968 align:middle
<c.magenta>你也可以指定标题</c>
<c.magenta>艺术家URL描述</c>

00:17:48.035 --> 00:17:49.770 align:middle
<c.magenta>使得其信息完整些</c>

00:17:49.837 --> 00:17:52.239 align:middle
<c.magenta>我们可在信息面板里</c>
<c.magenta>看到视频播放器模块体验信息</c>

00:17:54.875 --> 00:17:58.946 align:middle
<c.magenta>接下来 创界一个播放列表</c>
<c.magenta>添加一个或多个视频</c>

00:18:00.314 --> 00:18:02.950 align:middle
<c.magenta>最后一步是创建</c>
<c.magenta>一个player实例</c>

00:18:03.350 --> 00:18:06.053 align:middle
<c.magenta>用于操作播放列表</c>
<c.magenta>和展示播放器</c>

00:18:07.621 --> 00:18:11.325 align:middle
<c.magenta>完成之后 我们就实现了一个完整的</c>
<c.magenta>视频播放器提供丰富的用户体验</c>

00:18:15.028 --> 00:18:16.396 align:middle
<c.magenta>另外</c>

00:18:19.333 --> 00:18:24.404 align:middle
<c.magenta>所有特性像 处理</c>
<c.magenta>空隙 内容保护</c>

00:18:25.105 --> 00:18:27.608 align:middle
<c.magenta>章节分组 时间</c>
<c.magenta>[inaudible]</c>

00:18:28.375 --> 00:18:30.611 align:middle
<c.magenta>以及其他很多API</c>
<c.magenta>都已经提供了</c>

00:18:30.677 --> 00:18:32.379 align:middle
<c.magenta>在该JavaScript环境里</c>

00:18:33.881 --> 00:18:35.282 align:middle
<c.magenta>和之前视频播放器模块一样</c>

00:18:36.283 --> 00:18:39.086 align:middle
<c.magenta>我们扩展了音频播放功能</c>

00:18:40.654 --> 00:18:43.123 align:middle
<c.magenta>并且使用起来一样很方便</c>

00:18:44.658 --> 00:18:47.728 align:middle
<c.magenta>唯一变化的是需要绑定的是音频</c>

00:18:47.794 --> 00:18:49.296 align:middle
<c.magenta>以及音频文件的URL</c>

00:18:51.965 --> 00:18:53.200 align:middle
<c.magenta>这个可以提供</c>

00:18:53.767 --> 00:18:56.970 align:middle
<c.magenta>漂亮而功能完整的Audio</c>
<c.magenta>Now Playing体验</c>

00:18:57.638 --> 00:18:59.406 align:middle
<c.magenta>就和Apple Music一样</c>

00:19:01.074 --> 00:19:03.577 align:middle
<c.magenta>如果你正在构建一个音乐应用程序</c>

00:19:05.345 --> 00:19:07.347 align:middle
<c.magenta>你还需要做一件事情</c>

00:19:07.848 --> 00:19:09.716 align:middle
<c.magenta>就是配置你的应用</c>

00:19:10.184 --> 00:19:12.986 align:middle
<c.magenta>这样你的音频文件就可以支持倒带</c>

00:19:13.053 --> 00:19:14.888 align:middle
<c.magenta>现在是处于休眠状态</c>

00:19:16.156 --> 00:19:19.259 align:middle
<c.magenta>这样很类似</c>
<c.magenta>就和在iOS上操作一样</c>

00:19:20.661 --> 00:19:25.499 align:middle
<c.magenta>设置一个支持倒带的category</c>
<c.magenta>在AV会话面板上</c>

00:19:26.433 --> 00:19:29.269 align:middle
<c.magenta>并且添加背景</c>
<c.magenta>模式到info.plist</c>

00:19:29.970 --> 00:19:31.772 align:middle
<c.magenta>剩下的事情就由框架去完成</c>

00:19:33.607 --> 00:19:37.010 align:middle
<c.magenta>这样之后 我想邀请</c>
<c.magenta>Jeff上台</c>

00:19:37.077 --> 00:19:39.413 align:middle
<c.magenta>来演示构建</c>
<c.magenta>TVMLKit应用</c>

00:19:40.013 --> 00:19:40.848 align:middle
<c.magenta>谢谢大家</c>

00:19:46.820 --> 00:19:47.888 align:middle
<c.magenta>谢谢你Nurinder</c>

00:19:47.955 --> 00:19:48.789 align:middle
<c.magenta>大家好</c>

00:19:48.856 --> 00:19:49.857 align:middle
<c.magenta>我是Jeff</c>

00:19:49.923 --> 00:19:52.659 align:middle
<c.magenta>我在这为大家演示TVML应用</c>

00:19:52.726 --> 00:19:55.495 align:middle
<c.magenta>我要先强调下</c>
<c.magenta>我们目前已经讨论的内容</c>

00:19:56.763 --> 00:20:01.235 align:middle
<c.magenta>你就会发现</c>
<c.magenta>构建一个原生应用是多么简单</c>

00:19:56.763 --> 00:20:01.235 align:middle
<c.magenta>你就会发现</c>
<c.magenta>构建一个原生应用是多么简单</c>

00:20:01.301 --> 00:20:03.804 align:middle
<c.magenta>只要使用TVMLKit构建</c>
<c.magenta>支持Apple TV的应用</c>

00:20:05.305 --> 00:20:09.576 align:middle
<c.magenta>为了这次演示 我们会演示</c>
<c.magenta>WWDC 的一个简单版本</c>

00:20:10.811 --> 00:20:12.346 align:middle
<c.magenta>关于用户界面</c>

00:20:12.412 --> 00:20:14.414 align:middle
<c.magenta>我们有多个shelf内</c>

00:20:15.182 --> 00:20:17.184 align:middle
<c.magenta>每个shelf</c>
<c.magenta>会包含会话视频</c>

00:20:17.251 --> 00:20:18.886 align:middle
<c.magenta>跟踪会议</c>

00:20:20.320 --> 00:20:23.490 align:middle
<c.magenta>所以想象下你可为每一个</c>
<c.magenta>开发者工具提供一个shelf</c>

00:20:23.557 --> 00:20:26.360 align:middle
<c.magenta>还可以提供给应用框架 设计等等</c>

00:20:26.727 --> 00:20:27.761 align:middle
<c.magenta>我们开始吧</c>

00:20:35.636 --> 00:20:38.238 align:middle
<c.magenta>这是一个Xcode项目</c>
<c.magenta>我们之前就已经准备好了</c>

00:20:39.072 --> 00:20:42.242 align:middle
<c.magenta>我们先从AppDelegate开始</c>
<c.magenta>这也是我们应用的入口</c>

00:20:45.646 --> 00:20:48.081 align:middle
<c.magenta>在应用里</c>
<c.magenta>didFinishLaunchingWithOptions</c>

00:20:49.249 --> 00:20:51.852 align:middle
<c.magenta>正如你看到的</c>
<c.magenta>这几行代码</c>

00:20:52.953 --> 00:20:56.089 align:middle
<c.magenta>我们已经启动了</c>
<c.magenta>运行这个TVML应用</c>

00:20:59.026 --> 00:21:01.962 align:middle
<c.magenta>我们有在这指定了</c>
<c.magenta>JavaScriptApplicationURL</c>

00:20:59.026 --> 00:21:01.962 align:middle
<c.magenta>我们有在这指定了</c>
<c.magenta>JavaScriptApplicationURL</c>

00:21:02.029 --> 00:21:04.998 align:middle
<c.magenta>指向一个server</c>
<c.magenta>已经运行在这个Mac上</c>

00:21:06.967 --> 00:21:08.869 align:middle
<c.magenta>所以如果你看下</c>
<c.magenta>这里的目录</c>

00:21:09.636 --> 00:21:12.506 align:middle
<c.magenta>这就是我配置</c>
<c.magenta>提供文件服务的服务器位置</c>

00:21:14.408 --> 00:21:17.110 align:middle
<c.magenta>你也看到 这里有个文件</c>
<c.magenta>名为application.js</c>

00:21:17.644 --> 00:21:20.881 align:middle
<c.magenta>这个JavaScript文件</c>
<c.magenta>驱动TVML应用</c>

00:21:23.217 --> 00:21:26.753 align:middle
<c.magenta>这里有一个JSON文件</c>
<c.magenta>包含了所有数据</c>

00:21:26.820 --> 00:21:28.121 align:middle
<c.magenta>这次演示需要的数据</c>

00:21:29.489 --> 00:21:31.692 align:middle
<c.magenta>我们来看看这个</c>
<c.magenta>application.js文件</c>

00:21:34.695 --> 00:21:38.365 align:middle
<c.magenta>在这个文件的顶部</c>
<c.magenta>我们声明了一些变量</c>

00:21:38.432 --> 00:21:39.800 align:middle
<c.magenta>来保存我们的数据</c>

00:21:42.603 --> 00:21:46.640 align:middle
<c.magenta>在App.onLaunch</c>
<c.magenta>这个方法里我们调用一个方法</c>

00:21:46.707 --> 00:21:48.909 align:middle
<c.magenta>当TVML启动的时候</c>

00:21:50.677 --> 00:21:54.314 align:middle
<c.magenta>所以我们在这主要做的事情是</c>
<c.magenta>获取我们的JSON文件</c>

00:21:54.381 --> 00:21:56.950 align:middle
<c.magenta>然后创建一个用户界面</c>
<c.magenta>并使用我们之前提到的数据</c>

00:21:58.252 --> 00:21:59.920 align:middle
<c.magenta>在我们继续往下之前</c>

00:21:59.987 --> 00:22:02.823 align:middle
<c.magenta>我们应该展示一个</c>
<c.magenta>loading提示在屏幕上</c>

00:21:59.987 --> 00:22:02.823 align:middle
<c.magenta>我们应该展示一个</c>
<c.magenta>loading提示在屏幕上</c>

00:22:03.323 --> 00:22:05.893 align:middle
<c.magenta>在通过网络平台获取想要的信息时</c>
<c.magenta>这种方法通常会被推荐</c>

00:22:05.959 --> 00:22:08.128 align:middle
<c.magenta>可以为用户带来更好的用户体验</c>

00:22:09.196 --> 00:22:10.797 align:middle
<c.magenta>所以我在这添加了一些代码</c>

00:22:14.101 --> 00:22:19.039 align:middle
<c.magenta>在TVMLKit做这些操作时是为了</c>
<c.magenta>展示一个loading模板文档</c>

00:22:19.573 --> 00:22:22.843 align:middle
<c.magenta>这些都是在这个方法里完成的</c>
<c.magenta>叫做createLoadingDocument</c>

00:22:24.244 --> 00:22:25.979 align:middle
<c.magenta>我们调到这个方法</c>

00:22:29.316 --> 00:22:33.253 align:middle
<c.magenta>你会看到我们基本上给loading</c>
<c.magenta>模板创建了Markup</c>

00:22:34.288 --> 00:22:38.492 align:middle
<c.magenta>然后创建一个DOM文档对象</c>
<c.magenta>使用的是DOMParser</c>

00:22:40.894 --> 00:22:42.596 align:middle
<c.magenta>现在回到launch方法</c>

00:22:44.231 --> 00:22:46.066 align:middle
<c.magenta>在创建loading文档后</c>

00:22:46.133 --> 00:22:48.502 align:middle
<c.magenta>我们现在使用</c>
<c.magenta>navigationDocument对象</c>

00:22:48.569 --> 00:22:50.037 align:middle
<c.magenta>把文档推送到屏幕上</c>

00:22:50.804 --> 00:22:53.907 align:middle
<c.magenta>这就好像在UIKit里使用</c>
<c.magenta>UINavigationController一样</c>

00:22:56.410 --> 00:22:59.213 align:middle
<c.magenta>现在我们有了loading</c>
<c.magenta>Spinner显示在屏幕上</c>

00:22:59.746 --> 00:23:02.449 align:middle
<c.magenta>我们现在回调用一个方法</c>
<c.magenta>我创建的叫做...</c>

00:22:59.746 --> 00:23:02.449 align:middle
<c.magenta>我们现在回调用一个方法</c>
<c.magenta>我创建的叫做...</c>

00:23:04.985 --> 00:23:05.986 align:middle
<c.magenta>request JSON</c>

00:23:06.386 --> 00:23:09.857 align:middle
<c.magenta>它会使用内置的</c>
<c.magenta>XMLHttpRequest对象</c>

00:23:09.923 --> 00:23:14.361 align:middle
<c.magenta>为了获取JSON文件 然后</c>
<c.magenta>在回调函数里响应</c>

00:23:17.965 --> 00:23:18.832 align:middle
<c.magenta>接下来</c>

00:23:19.833 --> 00:23:22.236 align:middle
<c.magenta>我们要转换JSON文本</c>
<c.magenta>就是我们刚刚获得的</c>

00:23:22.302 --> 00:23:24.338 align:middle
<c.magenta>到我们的JavaScript</c>
<c.magenta>数据结构里</c>

00:23:26.673 --> 00:23:29.209 align:middle
<c.magenta>现在我们的UI调用</c>
<c.magenta>一个shelves栈</c>

00:23:29.276 --> 00:23:31.945 align:middle
<c.magenta>我们会创建</c>
<c.magenta>一个stackTemplate文档</c>

00:23:33.780 --> 00:23:35.349 align:middle
<c.magenta>现在让我在这里贴一段代码</c>

00:23:39.520 --> 00:23:42.489 align:middle
<c.magenta>然后跳到</c>
<c.magenta>我们的createStackDocument方法</c>

00:23:45.158 --> 00:23:46.226 align:middle
<c.magenta>现在你可以看到</c>

00:23:46.827 --> 00:23:50.163 align:middle
<c.magenta>和我们创建Markup类似</c>
<c.magenta>为了早些创建loading模板</c>

00:23:50.664 --> 00:23:53.333 align:middle
<c.magenta>我们在创建Markup</c>
<c.magenta>为这里的stackTemplate</c>

00:23:54.868 --> 00:23:57.237 align:middle
<c.magenta>在这个stackTemplate</c>
<c.magenta>的Markup里</c>

00:23:57.571 --> 00:23:59.540 align:middle
<c.magenta>我们已在此</c>
<c.magenta>添加了顶部banner图片</c>

00:24:01.275 --> 00:24:03.110 align:middle
<c.magenta>在collectionList里</c>

00:24:03.577 --> 00:24:06.980 align:middle
<c.magenta>我们实际上在浏览</c>
<c.magenta>会议里的每一个触控项目</c>

00:24:07.047 --> 00:24:09.449 align:middle
<c.magenta>并且创建一个shelf元素</c>
<c.magenta>每一个都创建一个</c>

00:24:09.983 --> 00:24:12.586 align:middle
<c.magenta>这些都通过使用</c>
<c.magenta>createShelfElement方法</c>

00:24:12.653 --> 00:24:13.620 align:middle
<c.magenta>我们现在看到了</c>

00:24:16.456 --> 00:24:18.025 align:middle
<c.magenta>现在我进入这个方法里面</c>

00:24:19.593 --> 00:24:23.363 align:middle
<c.magenta>我们再一次为单独一个shelf</c>
<c.magenta>创建Markup</c>

00:24:25.065 --> 00:24:30.070 align:middle
<c.magenta>在这个方法体里面 为每个会话视频</c>
<c.magenta>创建一个lockup元素</c>

00:24:33.006 --> 00:24:35.742 align:middle
<c.magenta>我们跳到</c>
<c.magenta>createLockupElement方法</c>

00:24:38.278 --> 00:24:40.447 align:middle
<c.magenta>你会发现</c>
<c.magenta>我们正在创建的Markup</c>

00:24:40.514 --> 00:24:43.083 align:middle
<c.magenta>给这个单独的lockup元素</c>
<c.magenta>描述了会话的信息</c>

00:24:43.851 --> 00:24:48.188 align:middle
<c.magenta>在这个处理情形里 我们捕获</c>
<c.magenta>sessionId作为定制的属性</c>

00:24:49.256 --> 00:24:53.427 align:middle
<c.magenta>我们也在添加图片 设置</c>
<c.magenta>宽体 高度 和 标题</c>

00:24:55.128 --> 00:24:58.732 align:middle
<c.magenta>我们回顾下 我们创建了</c>
<c.magenta>一个stackTemplate文档</c>

00:24:58.799 --> 00:25:02.469 align:middle
<c.magenta>包含了多个shelf元素</c>
<c.magenta>在美国shelf元素里</c>

00:24:58.799 --> 00:25:02.469 align:middle
<c.magenta>包含了多个shelf元素</c>
<c.magenta>在美国shelf元素里</c>

00:25:02.536 --> 00:25:04.304 align:middle
<c.magenta>我们有多个lockup元素</c>

00:25:04.905 --> 00:25:06.974 align:middle
<c.magenta>我们再回到刚才那个launch方法</c>

00:25:12.246 --> 00:25:14.214 align:middle
<c.magenta>在我们创建</c>
<c.magenta>stackDocument后</c>

00:25:14.281 --> 00:25:16.817 align:middle
<c.magenta>我们会使用</c>
<c.magenta>navigationDocument对象</c>

00:25:16.884 --> 00:25:19.853 align:middle
<c.magenta>来替换loading文档</c>
<c.magenta>目前这个文档是可见的</c>

00:25:19.920 --> 00:25:21.922 align:middle
<c.magenta>使用我们的</c>
<c.magenta>stackDocument</c>

00:25:27.661 --> 00:25:29.663 align:middle
<c.magenta>这样之后我们已经准备好运行</c>

00:25:30.264 --> 00:25:31.698 align:middle
<c.magenta>我们再切换到Apple TV</c>

00:25:42.776 --> 00:25:43.844 align:middle
<c.magenta>然后继续</c>

00:25:43.911 --> 00:25:46.914 align:middle
<c.magenta>我们现在拥有一个漂亮的UI</c>
<c.magenta>供shelve栈使用</c>

00:25:52.619 --> 00:25:55.489 align:middle
<c.magenta>美国shelf包含图片</c>
<c.magenta>lockup或会话视频</c>

00:25:57.090 --> 00:25:59.526 align:middle
<c.magenta>如你所见 只要少量代码</c>

00:25:59.593 --> 00:26:02.062 align:middle
<c.magenta>我们就可以创建一个应用</c>
<c.magenta>一个非常棒的应用</c>

00:25:59.593 --> 00:26:02.062 align:middle
<c.magenta>我们就可以创建一个应用</c>
<c.magenta>一个非常棒的应用</c>

00:26:02.129 --> 00:26:04.031 align:middle
<c.magenta>在家里的Apple TV上看棒极了</c>

00:26:05.799 --> 00:26:08.335 align:middle
<c.magenta>下一件需要做的事情</c>

00:26:08.402 --> 00:26:10.871 align:middle
<c.magenta>是在我们点击lockup时</c>
<c.magenta>能够播放视频</c>

00:26:11.405 --> 00:26:12.940 align:middle
<c.magenta>现在什么都没做</c>

00:26:13.874 --> 00:26:16.443 align:middle
<c.magenta>所以我们回到Xcode</c>
<c.magenta>然后添加这个功能</c>

00:26:22.916 --> 00:26:24.418 align:middle
<c.magenta>回到我们的launch方法</c>

00:26:26.653 --> 00:26:28.422 align:middle
<c.magenta>我会添加这两行代码</c>

00:26:35.996 --> 00:26:38.799 align:middle
<c.magenta>这会注册选择和播放事件</c>

00:26:39.266 --> 00:26:41.502 align:middle
<c.magenta>选择事件在</c>
<c.magenta>你按住触控板的时候触发</c>

00:26:41.568 --> 00:26:44.104 align:middle
<c.magenta>Siri Remote触控板</c>
<c.magenta>播放事件触发的是</c>

00:26:44.171 --> 00:26:45.639 align:middle
<c.magenta>在你按住</c>
<c.magenta>Play按钮的时候</c>

00:26:46.106 --> 00:26:47.241 align:middle
<c.magenta>在这两种情形下</c>

00:26:48.075 --> 00:26:50.444 align:middle
<c.magenta>我的playSelectedLockup</c>
<c.magenta>方法会被调用</c>

00:26:51.845 --> 00:26:53.380 align:middle
<c.magenta>我们进入这个方法</c>

00:26:54.581 --> 00:26:55.516 align:middle
<c.magenta>然后实现它</c>

00:26:57.451 --> 00:26:59.520 align:middle
<c.magenta>所以我们第一个要做的是...</c>

00:27:02.856 --> 00:27:04.958 align:middle
<c.magenta>获取lockup元素</c>
<c.magenta>在这个时间里获取</c>

00:27:07.027 --> 00:27:10.998 align:middle
<c.magenta>我们可以获取会话信息通过</c>
<c.magenta>定制属性里的sessionId</c>

00:27:14.001 --> 00:27:16.904 align:middle
<c.magenta>下一步 我们会创建一个</c>
<c.magenta>新的mediaItem对象</c>

00:27:22.910 --> 00:27:27.281 align:middle
<c.magenta>给嵌入的视频创建并且初始化它</c>
<c.magenta>使用视频的URL</c>

00:27:28.182 --> 00:27:29.149 align:middle
<c.magenta>就像这里一样</c>

00:27:31.318 --> 00:27:34.454 align:middle
<c.magenta>我们也会提取其他的</c>
<c.magenta>关于会话的信息</c>

00:27:34.521 --> 00:27:38.125 align:middle
<c.magenta>比如标题 描述</c>
<c.magenta>轨道和艺术品</c>

00:27:41.061 --> 00:27:44.164 align:middle
<c.magenta>接着我们会创建一个播放列表对象</c>

00:27:45.999 --> 00:27:48.001 align:middle
<c.magenta>并且把mediaItem</c>
<c.magenta>对象推送进去</c>

00:27:49.903 --> 00:27:52.973 align:middle
<c.magenta>最后 我们</c>
<c.magenta>会创建一个新的player对象</c>

00:27:54.842 --> 00:27:56.009 align:middle
<c.magenta>设置播放列表</c>

00:27:56.810 --> 00:28:00.480 align:middle
<c.magenta>只要简单的调用play方法</c>
<c.magenta>就可以全屏播放了</c>

00:27:56.810 --> 00:28:00.480 align:middle
<c.magenta>只要简单的调用play方法</c>
<c.magenta>就可以全屏播放了</c>

00:28:02.082 --> 00:28:04.484 align:middle
<c.magenta>回顾下 我们现在</c>
<c.magenta>创建了一个player对象</c>

00:28:05.185 --> 00:28:07.888 align:middle
<c.magenta>这个对象有一个播放列表</c>
<c.magenta>包含有一个视频对象</c>

00:28:09.389 --> 00:28:11.124 align:middle
<c.magenta>有了这些 我们来试试这个</c>

00:28:14.761 --> 00:28:15.963 align:middle
<c.magenta>回到UI</c>

00:28:16.029 --> 00:28:18.866 align:middle
<c.magenta>我们会使用 Siri Remote</c>
<c.magenta>并且点击这个锁</c>

00:28:18.932 --> 00:28:21.335 align:middle
<c.magenta>然后播放器就开始播放了</c>
<c.magenta>而且是在全屏模式下</c>

00:28:31.812 --> 00:28:32.646 align:middle
<c.magenta>谢谢</c>

00:28:32.713 --> 00:28:35.349 align:middle
<c.magenta>你可以点击Menu按钮</c>
<c.magenta>然后退出视频</c>

00:28:37.184 --> 00:28:39.520 align:middle
<c.magenta>所以这就是</c>
<c.magenta>TVMLKit产生的播放器</c>

00:28:40.220 --> 00:28:41.989 align:middle
<c.magenta>谢谢大家的宝贵时间</c>
<c.magenta>接下来交给你了Nurinder</c>

00:28:50.097 --> 00:28:51.865 align:middle
<c.magenta>谢谢Jeff精彩的演示</c>

00:28:54.034 --> 00:28:56.270 align:middle
<c.magenta>只要少量的代码</c>

00:28:57.504 --> 00:29:01.742 align:middle
<c.magenta>你就能创建一个功能完整的应用</c>
<c.magenta>并且有良好性能和外观</c>

00:28:57.504 --> 00:29:01.742 align:middle
<c.magenta>你就能创建一个功能完整的应用</c>
<c.magenta>并且有良好性能和外观</c>

00:29:05.879 --> 00:29:08.615 align:middle
<c.magenta>这个空白在lockup行</c>

00:29:09.683 --> 00:29:12.152 align:middle
<c.magenta>阴影处理 文字处理</c>

00:29:12.719 --> 00:29:14.154 align:middle
<c.magenta>看起来合适</c>

00:29:15.789 --> 00:29:19.193 align:middle
<c.magenta>在我们继续之前</c>
<c.magenta>概括一下你们刚才所看到的</c>

00:29:20.093 --> 00:29:24.064 align:middle
<c.magenta>用Xcode里面的TVML应用模版</c>

00:29:24.364 --> 00:29:26.366 align:middle
<c.magenta>创建并配置你的客户端项目</c>

00:29:28.902 --> 00:29:31.538 align:middle
<c.magenta>你们学习了如何以JSON</c>
<c.magenta>创建一个简单的加载文件</c>

00:29:31.605 --> 00:29:35.275 align:middle
<c.magenta>和一个复杂堆文件</c>

00:29:36.243 --> 00:29:39.213 align:middle
<c.magenta>且你们也学习了如何使用</c>
<c.magenta>NavigationDocument</c>

00:29:39.279 --> 00:29:41.582 align:middle
<c.magenta>来推送或者替换堆栈里的文件</c>

00:29:43.784 --> 00:29:46.820 align:middle
<c.magenta>JavaScript</c>
<c.magenta>用来处理用户事件</c>

00:29:48.188 --> 00:29:53.160 align:middle
<c.magenta>在这个例子中</c>
<c.magenta>我们处理选择和播放事件</c>

00:29:54.361 --> 00:29:58.899 align:middle
<c.magenta>并且根据对应的</c>
<c.magenta>lockup来配置视频播放</c>

00:30:03.804 --> 00:30:06.139 align:middle
<c.magenta>当我们介绍完了TVMLKit</c>

00:30:06.206 --> 00:30:07.941 align:middle
<c.magenta>你已经可以创建强大的应用</c>

00:30:10.611 --> 00:30:12.012 align:middle
<c.magenta>你们中很多人已经这么做了</c>

00:30:12.079 --> 00:30:13.080 align:middle
<c.magenta>谢谢</c>

00:30:17.918 --> 00:30:21.555 align:middle
<c.magenta>你们已提供了一些很好的反馈</c>
<c.magenta>而且我们想做的更好</c>

00:30:23.624 --> 00:30:25.292 align:middle
<c.magenta>我们已经在这方面做了很多的努力</c>

00:30:26.026 --> 00:30:28.829 align:middle
<c.magenta>并且正在加入一些令人激动的新功能</c>

00:30:29.530 --> 00:30:31.565 align:middle
<c.magenta>它们是非常容易使用的</c>

00:30:31.632 --> 00:30:34.034 align:middle
<c.magenta>能使你的应用提高到更高的水准</c>

00:30:35.435 --> 00:30:38.505 align:middle
<c.magenta>为了更好地阐述这些</c>
<c.magenta>现在我想邀请Parry上台</c>

00:30:39.373 --> 00:30:40.207 align:middle
<c.magenta>谢谢</c>

00:30:46.079 --> 00:30:46.947 align:middle
<c.magenta>下午好</c>

00:30:47.748 --> 00:30:50.817 align:middle
<c.magenta>我叫Parry</c>
<c.magenta>我将带你们一起来体验一些新功能</c>

00:30:50.884 --> 00:30:54.521 align:middle
<c.magenta>这些功能是在tvOS 10</c>
<c.magenta>的TVMLKit中引进的</c>

00:30:55.923 --> 00:31:00.794 align:middle
<c.magenta>TVMLKit提供了非常适宜的</c>
<c.magenta>应用级别的功能</c>

00:30:55.923 --> 00:31:00.794 align:middle
<c.magenta>TVMLKit提供了非常适宜的</c>
<c.magenta>应用级别的功能</c>

00:31:01.495 --> 00:31:04.198 align:middle
<c.magenta>通过简单而灵活的界面</c>

00:31:05.999 --> 00:31:10.270 align:middle
<c.magenta>我们在tvOS 10中的</c>
<c.magenta>新功能也是一样的</c>

00:31:11.071 --> 00:31:12.072 align:middle
<c.magenta>比如</c>

00:31:12.739 --> 00:31:14.842 align:middle
<c.magenta>只要增加一个属性</c>

00:31:14.908 --> 00:31:17.144 align:middle
<c.magenta>在搜索文件的搜索结果中</c>

00:31:17.611 --> 00:31:20.380 align:middle
<c.magenta>你就能让结果有淡入淡出的动画效果</c>

00:31:20.447 --> 00:31:21.715 align:middle
<c.magenta>在用户输入的时候</c>

00:31:28.889 --> 00:31:32.426 align:middle
<c.magenta>这给用户提供了着迷的体验</c>

00:31:33.327 --> 00:31:35.462 align:middle
<c.magenta>当他们试着去缩小结果范围</c>

00:31:39.166 --> 00:31:40.701 align:middle
<c.magenta>或者如果你有一个音乐应用</c>

00:31:42.202 --> 00:31:46.173 align:middle
<c.magenta>只要在菜单栏顶层增加一个菜单项</c>

00:31:46.940 --> 00:31:51.478 align:middle
<c.magenta>你就能在那里展示</c>
<c.magenta>Now Playing的音频体验</c>

00:31:52.980 --> 00:31:54.915 align:middle
<c.magenta>这些都是由TVMLKit来管理的</c>

00:31:54.982 --> 00:31:58.418 align:middle
<c.magenta>所以它就会随着播放</c>
<c.magenta>开始和停止而进来和出去</c>

00:32:01.054 --> 00:32:04.191 align:middle
<c.magenta>这给你们的用户提供了一种方便的办法</c>

00:32:04.992 --> 00:32:08.595 align:middle
<c.magenta>来返回到播放列表和继续听音乐</c>

00:32:11.465 --> 00:32:15.068 align:middle
<c.magenta>所有这些功能是非常强大的</c>

00:32:16.403 --> 00:32:18.972 align:middle
<c.magenta>但同时它们又是非常容易实现的</c>

00:32:20.908 --> 00:32:22.075 align:middle
<c.magenta>为了向你们展示这个</c>

00:32:24.011 --> 00:32:25.746 align:middle
<c.magenta>我想选择其中的三个</c>

00:32:27.814 --> 00:32:28.949 align:middle
<c.magenta>来聊聊它们</c>

00:32:30.417 --> 00:32:33.754 align:middle
<c.magenta>在最后</c>
<c.magenta>实现你们在演示中所看到的功能</c>

00:32:38.592 --> 00:32:39.793 align:middle
<c.magenta>让我们开始吧</c>

00:32:41.395 --> 00:32:43.297 align:middle
<c.magenta>我想讲的第一个功能</c>

00:32:43.864 --> 00:32:46.200 align:middle
<c.magenta>亮色和暗色外观</c>

00:32:48.235 --> 00:32:53.907 align:middle
<c.magenta>在tvOS 10中有一个</c>
<c.magenta>新的系统级别的暗色外观</c>

00:32:54.541 --> 00:32:56.210 align:middle
<c.magenta>所有的应用都要采用它</c>

00:32:58.879 --> 00:33:02.382 align:middle
<c.magenta>你的TVMLKit应用也要应用它</c>

00:32:58.879 --> 00:33:02.382 align:middle
<c.magenta>你的TVMLKit应用也要应用它</c>

00:33:02.916 --> 00:33:05.853 align:middle
<c.magenta>通过设置应用的</c>
<c.magenta>info.plist文件</c>

00:33:06.520 --> 00:33:07.888 align:middle
<c.magenta>这是一件同样你需要做的事</c>

00:33:07.955 --> 00:33:10.123 align:middle
<c.magenta>在你用UIKit写应用的时候</c>

00:33:12.125 --> 00:33:15.529 align:middle
<c.magenta>所以你可以指定你的应用的外观</c>

00:33:16.964 --> 00:33:18.665 align:middle
<c.magenta>你可以选择亮色</c>

00:33:19.833 --> 00:33:22.169 align:middle
<c.magenta>暗色或者自动</c>

00:33:22.569 --> 00:33:24.771 align:middle
<c.magenta>这种情况下它会选择系统的设置</c>

00:33:28.575 --> 00:33:30.744 align:middle
<c.magenta>但是无论你选了哪种</c>

00:33:31.178 --> 00:33:35.382 align:middle
<c.magenta>你的标准TVMLKit应用</c>
<c.magenta>会运行地非常好</c>

00:33:35.716 --> 00:33:37.484 align:middle
<c.magenta>而不需要更多的改动</c>

00:33:40.454 --> 00:33:43.357 align:middle
<c.magenta>我们所有的模版都配置了样式</c>

00:33:43.423 --> 00:33:45.425 align:middle
<c.magenta>对亮色和暗色两种外观</c>

00:33:46.793 --> 00:33:49.997 align:middle
<c.magenta>需要时TVMLKit</c>
<c.magenta>会在两者之间切换</c>

00:33:50.397 --> 00:33:51.665 align:middle
<c.magenta>所以你能方便地得到这个效果</c>

00:33:56.637 --> 00:33:57.504 align:middle
<c.magenta>但是</c>

00:33:59.006 --> 00:34:02.809 align:middle
<c.magenta>如果你在你的文件中有明确的样式</c>

00:33:59.006 --> 00:34:02.809 align:middle
<c.magenta>如果你在你的文件中有明确的样式</c>

00:34:04.745 --> 00:34:08.982 align:middle
<c.magenta>那么你需要选择两种外观的样式</c>

00:34:09.882 --> 00:34:10.984 align:middle
<c.magenta>举个例子</c>

00:34:12.418 --> 00:34:15.755 align:middle
<c.magenta>这是一个含有标题的模版</c>

00:34:16.690 --> 00:34:18.659 align:middle
<c.magenta>它的颜色被设置成黑色</c>

00:34:19.560 --> 00:34:22.094 align:middle
<c.magenta>使用一个明确样式</c>

00:34:24.630 --> 00:34:26.867 align:middle
<c.magenta>这个可能在暗色主题下不起作用</c>

00:34:28.034 --> 00:34:29.136 align:middle
<c.magenta>为了能让它工作</c>

00:34:29.203 --> 00:34:32.206 align:middle
<c.magenta>你需要定义类</c>

00:34:32.739 --> 00:34:35.342 align:middle
<c.magenta>对于这样的外观</c>

00:34:38.178 --> 00:34:41.447 align:middle
<c.magenta>为了在tvOS 10中实现这个</c>

00:34:41.949 --> 00:34:45.886 align:middle
<c.magenta>我们新增了一个名为</c>
<c.magenta>tv-template的多媒体功能</c>

00:34:47.554 --> 00:34:49.556 align:middle
<c.magenta>它有个功能称为tv-theme</c>

00:34:51.891 --> 00:34:54.761 align:middle
<c.magenta>你可以用它来创建一个多媒体查询</c>

00:34:55.228 --> 00:34:57.631 align:middle
<c.magenta>对应于一种外观</c>

00:34:59.733 --> 00:35:03.370 align:middle
<c.magenta>只要将你所有的样式合在一起</c>

00:34:59.733 --> 00:35:03.370 align:middle
<c.magenta>只要将你所有的样式合在一起</c>

00:35:04.171 --> 00:35:06.707 align:middle
<c.magenta>按照它们的多媒体查询分组</c>

00:35:07.875 --> 00:35:09.209 align:middle
<c.magenta>将它们放在文件中</c>

00:35:09.977 --> 00:35:13.614 align:middle
<c.magenta>TVMLKit将会为你</c>
<c.magenta>挑选正确的样式</c>

00:35:16.817 --> 00:35:20.153 align:middle
<c.magenta>所以只需要一丁点的样式配置</c>

00:35:21.054 --> 00:35:22.589 align:middle
<c.magenta>和零行代码</c>

00:35:23.657 --> 00:35:27.828 align:middle
<c.magenta>你的应用就实现了暗色主题</c>

00:35:32.833 --> 00:35:37.938 align:middle
<c.magenta>现在让我继续谈</c>
<c.magenta>另外一些能提高用户体验的东西</c>

00:35:38.539 --> 00:35:39.706 align:middle
<c.magenta>但是要通过一种不同的方</c>

00:35:40.707 --> 00:35:43.443 align:middle
<c.magenta>让我们聊聊内嵌式视频</c>

00:35:48.549 --> 00:35:49.883 align:middle
<c.magenta>公平地讲</c>

00:35:50.450 --> 00:35:55.556 align:middle
<c.magenta>视频是电视观看体验中很重要的一部分</c>

00:35:56.990 --> 00:36:00.027 align:middle
<c.magenta>如果你有丰富的视频资源</c>

00:35:56.990 --> 00:36:00.027 align:middle
<c.magenta>如果你有丰富的视频资源</c>

00:36:01.128 --> 00:36:04.765 align:middle
<c.magenta>你就会想让你的用户感受到它</c>

00:36:05.098 --> 00:36:06.466 align:middle
<c.magenta>当他们一打开你的应用时</c>

00:36:09.002 --> 00:36:11.004 align:middle
<c.magenta>你的应用当中的内嵌式视频</c>

00:36:12.005 --> 00:36:13.407 align:middle
<c.magenta>发挥了重要的作用</c>

00:36:14.308 --> 00:36:18.111 align:middle
<c.magenta>为了给大家展示</c>
<c.magenta>这会给你们的应用带来什么不同</c>

00:36:19.713 --> 00:36:23.050 align:middle
<c.magenta>我们创建了</c>
<c.magenta>你们刚刚看到的那个预览演示</c>

00:36:23.917 --> 00:36:25.485 align:middle
<c.magenta>但是有内嵌式视频在里面</c>

00:36:27.087 --> 00:36:27.988 align:middle
<c.magenta>让我们来看一下</c>

00:36:43.237 --> 00:36:44.404 align:middle
<c.magenta>这是流畅的</c>

00:36:44.838 --> 00:36:48.242 align:middle
<c.magenta>不但浏览体验毫不突兀</c>

00:36:48.609 --> 00:36:49.776 align:middle
<c.magenta>而且迎合的非常好</c>

00:36:50.444 --> 00:36:51.845 align:middle
<c.magenta>这使人身临其境</c>

00:36:55.015 --> 00:36:59.520 align:middle
<c.magenta>正如你所料</c>
<c.magenta>TVMLKit帮你做了大部分的工作</c>

00:37:00.287 --> 00:37:04.258 align:middle
<c.magenta>你只需要与这个上层接口打交道</c>

00:37:05.225 --> 00:37:06.493 align:middle
<c.magenta>让我们来看一下</c>

00:37:11.698 --> 00:37:15.202 align:middle
<c.magenta>在TVMLKit中</c>

00:37:15.569 --> 00:37:18.071 align:middle
<c.magenta>你要嵌入一个播放器</c>

00:37:18.672 --> 00:37:21.208 align:middle
<c.magenta>和一个播放区域在你的文件中</c>

00:37:21.875 --> 00:37:24.811 align:middle
<c.magenta>很可能 它会在一个lockup里面</c>

00:37:30.184 --> 00:37:32.719 align:middle
<c.magenta>TVMLKit会帮你处理播放</c>

00:37:33.387 --> 00:37:34.922 align:middle
<c.magenta>你所需要做的所有事情就是</c>

00:37:35.656 --> 00:37:38.492 align:middle
<c.magenta>指定你希望的开始时间</c>

00:37:39.860 --> 00:37:43.497 align:middle
<c.magenta>所以你可以说它应该开始 或者</c>

00:37:44.031 --> 00:37:46.400 align:middle
<c.magenta>当包含的lockup得到关注的时候</c>

00:37:47.901 --> 00:37:49.970 align:middle
<c.magenta>抑或是一旦它出现在屏幕上的时候</c>

00:37:53.040 --> 00:37:57.477 align:middle
<c.magenta>你可以控制让内嵌式视频变成全屏播放</c>

00:38:00.180 --> 00:38:03.350 align:middle
<c.magenta>如果你有高级用户案例</c>

00:38:04.218 --> 00:38:06.353 align:middle
<c.magenta>比如要用FairPlay进行加密</c>

00:38:07.955 --> 00:38:11.291 align:middle
<c.magenta>那么你可以用</c>
<c.magenta>JavaScript控制嵌入播放器</c>

00:38:12.326 --> 00:38:13.961 align:middle
<c.magenta>通过它的API</c>

00:38:14.862 --> 00:38:16.430 align:middle
<c.magenta>你可以实现这个</c>

00:38:20.701 --> 00:38:26.974 align:middle
<c.magenta>现在你可用TVMLKit内嵌式视频</c>
<c.magenta>只需要简单的三个步骤</c>

00:38:28.408 --> 00:38:30.844 align:middle
<c.magenta>第一 配置模版</c>

00:38:33.847 --> 00:38:37.618 align:middle
<c.magenta>第二 设置</c>

00:38:40.821 --> 00:38:45.692 align:middle
<c.magenta>第三 你想要处理触发切换全屏模式</c>

00:38:46.593 --> 00:38:49.363 align:middle
<c.magenta>让我们再深入地看一下这些</c>

00:38:53.467 --> 00:38:56.637 align:middle
<c.magenta>我们已经将模版配置的非常直观</c>

00:38:57.471 --> 00:39:02.209 align:middle
<c.magenta>我们在TVML中增加了一个新的元素</c>
<c.magenta>称为mediaContent</c>

00:38:57.471 --> 00:39:02.209 align:middle
<c.magenta>我们在TVML中增加了一个新的元素</c>
<c.magenta>称为mediaContent</c>

00:39:03.443 --> 00:39:08.248 align:middle
<c.magenta>你可以用它在lockup中包裹图片</c>

00:39:08.315 --> 00:39:10.150 align:middle
<c.magenta>如果你想嵌入视频的话</c>

00:39:13.120 --> 00:39:16.390 align:middle
<c.magenta>这会使lockup</c>
<c.magenta>拥有一致的功能和外观</c>

00:39:17.291 --> 00:39:18.825 align:middle
<c.magenta>在视频播放开始之前</c>

00:39:23.130 --> 00:39:26.867 align:middle
<c.magenta>lockup里面的图片提供了边界</c>

00:39:26.934 --> 00:39:28.468 align:middle
<c.magenta>视频在其中播放</c>

00:39:31.805 --> 00:39:36.443 align:middle
<c.magenta>也可通过mediaContent的</c>
<c.magenta>属性来指定播放模式</c>

00:39:36.510 --> 00:39:40.180 align:middle
<c.magenta>一旦lockup得到了焦点</c>
<c.magenta>或者当它出现在屏幕上时</c>

00:39:40.581 --> 00:39:41.882 align:middle
<c.magenta>或者是当它出现在屏幕</c>

00:39:43.383 --> 00:39:44.484 align:middle
<c.magenta>举个例子</c>

00:39:46.086 --> 00:39:47.321 align:middle
<c.magenta>这是lockup</c>

00:39:49.122 --> 00:39:50.791 align:middle
<c.magenta>这是mediaContent</c>

00:39:52.826 --> 00:39:54.862 align:middle
<c.magenta>包含了lockup的图片</c>

00:39:58.332 --> 00:40:01.068 align:middle
<c.magenta>图片的宽度和高度</c>

00:39:58.332 --> 00:40:01.068 align:middle
<c.magenta>图片的宽度和高度</c>

00:40:04.137 --> 00:40:06.707 align:middle
<c.magenta>设置了视频播放的边界</c>

00:40:11.044 --> 00:40:14.081 align:middle
<c.magenta>第二步 配置播放器</c>

00:40:15.215 --> 00:40:18.585 align:middle
<c.magenta>现在mediaContent中的</c>
<c.magenta>每一个元素</c>

00:40:19.286 --> 00:40:21.221 align:middle
<c.magenta>有着它自己的播放器</c>

00:40:23.423 --> 00:40:26.360 align:middle
<c.magenta>而且你可以用JavaScript</c>
<c.magenta>控制播放器</c>

00:40:29.596 --> 00:40:32.299 align:middle
<c.magenta>只要查询播放器功能</c>

00:40:32.399 --> 00:40:34.701 align:middle
<c.magenta>从mediaContent</c>
<c.magenta>的DOMElement</c>

00:40:36.370 --> 00:40:39.840 align:middle
<c.magenta>在播放列表中</c>
<c.magenta>配置你想嵌入的多媒体项目</c>

00:40:42.142 --> 00:40:43.477 align:middle
<c.magenta>这是一小段对应的代码</c>

00:40:47.414 --> 00:40:48.849 align:middle
<c.magenta>请仔细注意</c>

00:40:50.083 --> 00:40:51.652 align:middle
<c.magenta>播放器的配置</c>

00:40:51.718 --> 00:40:54.021 align:middle
<c.magenta>和你们刚才在演示中</c>
<c.magenta>看到的没什么太大的区别</c>

00:40:54.955 --> 00:40:56.089 align:middle
<c.magenta>你创建了一个播放列表</c>

00:40:56.323 --> 00:40:58.325 align:middle
<c.magenta>添加了多媒体条目</c>
<c.magenta>并在播放器中设置它</c>

00:41:00.460 --> 00:41:01.929 align:middle
<c.magenta>但是有两点不同之处</c>

00:41:02.963 --> 00:41:03.864 align:middle
<c.magenta>第一</c>

00:41:05.098 --> 00:41:07.100 align:middle
<c.magenta>你不需要创建一个新的播放器</c>

00:41:08.335 --> 00:41:09.970 align:middle
<c.magenta>你只要使用内嵌播放器</c>

00:41:12.206 --> 00:41:13.040 align:middle
<c.magenta>第二</c>

00:41:14.107 --> 00:41:17.511 align:middle
<c.magenta>你需要提前就将它设置好而非等到</c>
<c.magenta>用户选择lockup时才去处理它</c>

00:41:19.112 --> 00:41:20.848 align:middle
<c.magenta>你在提前做了</c>

00:41:22.216 --> 00:41:26.119 align:middle
<c.magenta>实际上 在推送文件之前你就做了</c>

00:41:28.889 --> 00:41:30.757 align:middle
<c.magenta>这让我想起了一个重点</c>

00:41:32.893 --> 00:41:34.695 align:middle
<c.magenta>为了更好的用户体验</c>

00:41:35.062 --> 00:41:39.600 align:middle
<c.magenta>在推送文件之前 你必须设置好播放器</c>

00:41:41.435 --> 00:41:43.170 align:middle
<c.magenta>一旦文件被加载</c>

00:41:43.237 --> 00:41:45.906 align:middle
<c.magenta>你可以在任意时间改变播放列表</c>

00:41:51.812 --> 00:41:53.380 align:middle
<c.magenta>最后一步</c>

00:41:54.548 --> 00:41:56.149 align:middle
<c.magenta>转换到全屏</c>

00:41:59.353 --> 00:42:00.988 align:middle
<c.magenta>值得注意的是</c>

00:41:59.353 --> 00:42:00.988 align:middle
<c.magenta>值得注意的是</c>

00:42:01.054 --> 00:42:04.992 align:middle
<c.magenta>TVMLKit不会为你触发转换</c>

00:42:06.360 --> 00:42:09.663 align:middle
<c.magenta>这是期望你们实现的灵活性之一</c>

00:42:12.199 --> 00:42:16.270 align:middle
<c.magenta>所以你需增加</c>
<c.magenta>一个事件监听器来选择和播放</c>

00:42:17.204 --> 00:42:18.472 align:middle
<c.magenta>为lockup</c>

00:42:20.407 --> 00:42:22.509 align:middle
<c.magenta>并且使用嵌入式播放器</c>

00:42:22.576 --> 00:42:25.312 align:middle
<c.magenta>来触发转换到全屏</c>

00:42:27.447 --> 00:42:28.715 align:middle
<c.magenta>举个简单的例子</c>

00:42:30.017 --> 00:42:33.987 align:middle
<c.magenta>这儿 我在选择事件中</c>
<c.magenta>已经增加了一个事件监听器...</c>

00:42:35.756 --> 00:42:36.757 align:middle
<c.magenta>在文件中</c>

00:42:40.661 --> 00:42:45.632 align:middle
<c.magenta>我将从事件目标子树获取</c>
<c.magenta>mediaContentElement</c>

00:42:45.699 --> 00:42:46.900 align:middle
<c.magenta>这将成为lockup</c>

00:42:46.967 --> 00:42:49.303 align:middle
<c.magenta>因为所有事件在lockup里被分配</c>

00:42:51.638 --> 00:42:53.874 align:middle
<c.magenta>最后调用现有的</c>

00:42:54.741 --> 00:42:57.444 align:middle
<c.magenta>嵌入式播放器来触发转换</c>

00:43:00.514 --> 00:43:03.617 align:middle
<c.magenta>现在当你想做这件事情时</c>
<c.magenta>你已经能完全胜任</c>

00:43:05.385 --> 00:43:10.691 align:middle
<c.magenta>但是通过菜单动作</c>
<c.magenta>可以自动转换回嵌入模式</c>

00:43:15.462 --> 00:43:16.363 align:middle
<c.magenta>就是那样</c>

00:43:17.064 --> 00:43:19.299 align:middle
<c.magenta>通过这三个简单的步骤</c>

00:43:20.300 --> 00:43:23.370 align:middle
<c.magenta>可以使你的应用的用户界面</c>

00:43:23.437 --> 00:43:26.340 align:middle
<c.magenta>更逼真</c>

00:43:29.343 --> 00:43:30.410 align:middle
<c.magenta>但下一步会发生什么？</c>

00:43:34.047 --> 00:43:37.885 align:middle
<c.magenta>当用户已经在全屏模式会发生什么呢？</c>

00:43:38.285 --> 00:43:39.720 align:middle
<c.magenta>他们在看你的内容</c>

00:43:42.222 --> 00:43:45.526 align:middle
<c.magenta>怎样能使这个过程更有趣呢？</c>

00:43:48.262 --> 00:43:51.398 align:middle
<c.magenta>这引出了今天我想谈论的第三个功能</c>

00:43:51.465 --> 00:43:53.367 align:middle
<c.magenta>让你能完全地实现它</c>

00:43:55.002 --> 00:43:57.771 align:middle
<c.magenta>交互式视频叠加层</c>

00:44:00.541 --> 00:44:04.378 align:middle
<c.magenta>在某种意义上 这和内嵌式视频很相似</c>

00:44:04.978 --> 00:44:08.549 align:middle
<c.magenta>它让你丰富你的内容</c>

00:44:08.615 --> 00:44:10.384 align:middle
<c.magenta>通过在顶层使用一个用户界面</c>

00:44:12.519 --> 00:44:14.354 align:middle
<c.magenta>你可以用它来做很多事情</c>

00:44:15.389 --> 00:44:16.290 align:middle
<c.magenta>比如</c>

00:44:17.724 --> 00:44:20.761 align:middle
<c.magenta>你可以推荐更多的选项给用户</c>

00:44:21.028 --> 00:44:24.231 align:middle
<c.magenta>使得他们能选择选项 并且继续观看</c>

00:44:25.666 --> 00:44:29.069 align:middle
<c.magenta>你能让他们浏览之前的广告和片尾</c>

00:44:29.870 --> 00:44:32.673 align:middle
<c.magenta>给他们带来完美的一口气看完的体验</c>

00:44:37.644 --> 00:44:41.982 align:middle
<c.magenta>或者你可以在</c>
<c.magenta>内容的顶部实现应用内购买</c>

00:44:43.417 --> 00:44:46.620 align:middle
<c.magenta>当用户沉浸在这个体验中时</c>

00:44:50.390 --> 00:44:51.658 align:middle
<c.magenta>甚至当你实现</c>

00:44:52.960 --> 00:44:54.895 align:middle
<c.magenta>一些东西简单的像</c>

00:44:55.295 --> 00:44:58.232 align:middle
<c.magenta>互动元数据 比如投影</c>

00:45:00.434 --> 00:45:05.572 align:middle
<c.magenta>让你的内容变得</c>
<c.magenta>更加引人入胜和具有互动性</c>

00:45:10.811 --> 00:45:14.381 align:middle
<c.magenta>与你已经看到的其它功能一样</c>
<c.magenta>实现起来是非常简单的</c>

00:45:18.051 --> 00:45:22.689 align:middle
<c.magenta>你只需要使用任意一个模版来创建文件</c>

00:45:23.957 --> 00:45:25.092 align:middle
<c.magenta>将它设定在播放器中</c>

00:45:27.027 --> 00:45:30.364 align:middle
<c.magenta>TVMLKit会展示这个文件</c>

00:45:32.266 --> 00:45:34.034 align:middle
<c.magenta>当视频全屏播放时</c>

00:45:36.436 --> 00:45:37.571 align:middle
<c.magenta>这是对应的代码</c>

00:45:38.272 --> 00:45:41.508 align:middle
<c.magenta>在tvOS 10中</c>
<c.magenta>我们给播放器添加了一个新的属性</c>

00:45:42.042 --> 00:45:43.810 align:middle
<c.magenta>称为modalOverlayDocument</c>

00:45:45.279 --> 00:45:48.215 align:middle
<c.magenta>所以当你设置了文件的这个属性</c>

00:45:49.683 --> 00:45:53.654 align:middle
<c.magenta>我们会在全屏视频的顶部展现它</c>

00:45:57.691 --> 00:45:59.993 align:middle
<c.magenta>如果播放器已经在全屏模式下播放了</c>

00:46:00.060 --> 00:46:02.296 align:middle
<c.magenta>你的文件立即就会被展示了</c>

00:46:04.932 --> 00:46:06.700 align:middle
<c.magenta>但是如果播放器没有在播放</c>

00:46:07.467 --> 00:46:09.203 align:middle
<c.magenta>或者说它是在嵌入模式下播放的</c>

00:46:11.104 --> 00:46:14.842 align:middle
<c.magenta>当视频被全屏的时候它们就会被展示</c>

00:46:15.242 --> 00:46:19.012 align:middle
<c.magenta>所以这对你来说是非常方便的</c>
<c.magenta>只要在任意你想要的时间设置它</c>

00:46:24.051 --> 00:46:26.920 align:middle
<c.magenta>好了 让我们看一下演示</c>

00:46:27.754 --> 00:46:33.193 align:middle
<c.magenta>让我们来实现你们刚才</c>
<c.magenta>在演示中看到的这些功能</c>

00:46:33.794 --> 00:46:34.795 align:middle
<c.magenta>为了做它</c>

00:46:35.162 --> 00:46:37.097 align:middle
<c.magenta>让我们欢迎Jeff上台</c>

00:46:37.598 --> 00:46:38.465 align:middle
<c.magenta>Jeff</c>

00:46:43.604 --> 00:46:45.172 align:middle
<c.magenta>谢谢 Parry</c>
<c.magenta>大家好 又见面了</c>

00:46:45.239 --> 00:46:46.640 align:middle
<c.magenta>我来给大家展示一下新东西</c>

00:46:48.909 --> 00:46:50.110 align:middle
<c.magenta>所以回到Apple TV</c>

00:46:52.079 --> 00:46:53.914 align:middle
<c.magenta>这就是我们刚才给你们看的演示</c>

00:46:55.716 --> 00:46:56.750 align:middle
<c.magenta>现在让我们回到主页</c>

00:46:58.485 --> 00:46:59.820 align:middle
<c.magenta>进入到设置应用</c>

00:47:02.422 --> 00:47:05.225 align:middle
<c.magenta>进入外观设置</c>

00:47:06.260 --> 00:47:08.195 align:middle
<c.magenta>将外观设为暗色</c>

00:47:10.230 --> 00:47:11.298 align:middle
<c.magenta>回到主页</c>

00:47:12.332 --> 00:47:15.636 align:middle
<c.magenta>因为我们是用Xcode 8创建的</c>
<c.magenta>这个演示应用</c>

00:47:16.036 --> 00:47:18.372 align:middle
<c.magenta>我们在info.plist文件中</c>
<c.magenta>可以设置</c>

00:47:18.438 --> 00:47:21.008 align:middle
<c.magenta>来支持自动的用户界面工具栏</c>

00:47:21.575 --> 00:47:23.343 align:middle
<c.magenta>这意味着我们的演示应用</c>

00:47:23.410 --> 00:47:25.746 align:middle
<c.magenta>就会自动地支持工具栏的外观</c>

00:47:26.780 --> 00:47:27.881 align:middle
<c.magenta>让我们来看看这会长什么样子</c>

00:47:31.218 --> 00:47:32.286 align:middle
<c.magenta>看吧</c>

00:47:36.957 --> 00:47:39.660 align:middle
<c.magenta>我们的UI看起来是多么漂亮</c>

00:47:40.627 --> 00:47:42.896 align:middle
<c.magenta>而且 不需要一行代码就能实现</c>

00:47:44.898 --> 00:47:46.934 align:middle
<c.magenta>现在让我们聊聊嵌入视频</c>

00:47:49.002 --> 00:47:50.537 align:middle
<c.magenta>对于我们的演示</c>
<c.magenta>我们想让视频</c>

00:47:50.604 --> 00:47:53.440 align:middle
<c.magenta>在lockup中自动地开始播放</c>

00:47:54.474 --> 00:47:55.442 align:middle
<c.magenta>正如Parry刚刚提过的那样</c>

00:47:55.509 --> 00:47:57.277 align:middle
<c.magenta>需要三个步骤来实现这个</c>

00:47:57.444 --> 00:48:00.380 align:middle
<c.magenta>第一步是使用mediaContentElement</c>
<c.magenta>这个标志</c>

00:47:57.444 --> 00:48:00.380 align:middle
<c.magenta>第一步是使用mediaContentElement</c>
<c.magenta>这个标志</c>

00:48:01.148 --> 00:48:03.917 align:middle
<c.magenta>第二步是配置内嵌式播放器</c>

00:48:04.518 --> 00:48:06.753 align:middle
<c.magenta>第三步是处理全屏播放</c>

00:48:07.321 --> 00:48:08.589 align:middle
<c.magenta>让我们回到Xcode</c>

00:48:15.028 --> 00:48:17.264 align:middle
<c.magenta>进入到createLockup函数</c>

00:48:24.071 --> 00:48:27.040 align:middle
<c.magenta>不同于创建标准的图片lockup</c>

00:48:28.575 --> 00:48:32.045 align:middle
<c.magenta>我现在要添加一个新的</c>
<c.magenta>mediaContent元素标志</c>

00:48:36.850 --> 00:48:38.318 align:middle
<c.magenta>用它来包裹我们的图片</c>

00:48:39.019 --> 00:48:40.521 align:middle
<c.magenta>就是这样</c>
<c.magenta>这就是第一步</c>

00:48:40.854 --> 00:48:41.688 align:middle
<c.magenta>非常简单</c>

00:48:42.823 --> 00:48:43.957 align:middle
<c.magenta>然后来到第二步</c>

00:48:45.559 --> 00:48:47.327 align:middle
<c.magenta>Parry刚才也提到了</c>

00:48:47.394 --> 00:48:50.264 align:middle
<c.magenta>每一个mediaContent</c>
<c.magenta>元素会内置</c>

00:48:50.330 --> 00:48:51.431 align:middle
<c.magenta>一个内嵌式播放器</c>

00:48:51.965 --> 00:48:55.903 align:middle
<c.magenta>所以我们要做的就是</c>
<c.magenta>配置这些内嵌式播放器</c>

00:48:55.969 --> 00:48:59.139 align:middle
<c.magenta>配置对应的播放列表</c>
<c.magenta>在我们展示文件之前</c>

00:49:00.274 --> 00:49:02.242 align:middle
<c.magenta>回到启动功能</c>

00:49:05.512 --> 00:49:07.147 align:middle
<c.magenta>在我们展示这个文件之前</c>

00:49:07.214 --> 00:49:09.616 align:middle
<c.magenta>我需要调用一个我创建的函数 称为</c>

00:49:11.218 --> 00:49:12.920 align:middle
<c.magenta>configureMediaLockupElements</c>

00:49:15.556 --> 00:49:16.790 align:middle
<c.magenta>在这个函数内部</c>

00:49:19.927 --> 00:49:22.429 align:middle
<c.magenta>我们首先取出所有的</c>
<c.magenta>mediaContent元素</c>

00:49:22.496 --> 00:49:23.497 align:middle
<c.magenta>从这个文件中</c>

00:49:25.999 --> 00:49:27.668 align:middle
<c.magenta>对于每一个mediaContentElement</c>

00:49:28.435 --> 00:49:30.037 align:middle
<c.magenta>和前面的演示类似</c>

00:49:30.103 --> 00:49:32.573 align:middle
<c.magenta>我们要创建一个新的</c>
<c.magenta>mediaItem对象</c>

00:49:34.308 --> 00:49:37.978 align:middle
<c.magenta>一个新的播放列表对象包含</c>
<c.magenta>我们的mediaItem对象</c>

00:49:39.479 --> 00:49:41.982 align:middle
<c.magenta>但是我们在这里不创建一个新的播放器</c>

00:49:42.416 --> 00:49:44.484 align:middle
<c.magenta>我们使用getFeature函数</c>

00:49:45.586 --> 00:49:47.020 align:middle
<c.magenta>来获取内嵌式播放器</c>

00:49:47.654 --> 00:49:49.389 align:middle
<c.magenta>然后在播放列表中设置好它</c>

00:49:51.358 --> 00:49:52.359 align:middle
<c.magenta>这就是第二步了</c>

00:49:53.460 --> 00:49:55.929 align:middle
<c.magenta>最后一步是处理全屏播放</c>

00:49:57.097 --> 00:49:59.466 align:middle
<c.magenta>我们来看一下playSelectedLockup</c>
<c.magenta>这个函数</c>

00:50:01.635 --> 00:50:04.671 align:middle
<c.magenta>你应该记得它是从选择和</c>
<c.magenta>播放事件中触发的</c>

00:50:09.343 --> 00:50:13.480 align:middle
<c.magenta>这些代码我们都不需要把它们替换掉</c>

00:50:17.384 --> 00:50:19.987 align:middle
<c.magenta>首先从事件中提取lockup元素</c>

00:50:21.855 --> 00:50:24.925 align:middle
<c.magenta>再从lockup元素中</c>
<c.magenta>提取mediaContent元素</c>

00:50:26.159 --> 00:50:29.997 align:middle
<c.magenta>使用getFeature函数</c>
<c.magenta>来访问内嵌式播放器</c>

00:50:31.498 --> 00:50:34.968 align:middle
<c.magenta>我们只要调用播放让它变成全屏</c>

00:50:37.738 --> 00:50:39.039 align:middle
<c.magenta>看一下它的样子</c>

00:50:54.688 --> 00:50:57.324 align:middle
<c.magenta>正如你看到的一样 视频现在会开始</c>

00:50:57.391 --> 00:50:59.593 align:middle
<c.magenta>在lockup里面自动地播放</c>

00:51:01.728 --> 00:51:04.331 align:middle
<c.magenta>当我点击lockup 你会切换</c>

00:51:04.398 --> 00:51:06.233 align:middle
<c.magenta>视频到全屏模式</c>

00:51:06.300 --> 00:51:09.369 align:middle
<c.magenta>欢迎来到2015年</c>
<c.magenta>Apple设计大奖</c>

00:51:10.003 --> 00:51:11.905 align:middle
<c.magenta>欢迎今晚大家的到来</c>

00:51:11.972 --> 00:51:12.840 align:middle
<c.magenta>非常酷的东西</c>

00:51:12.906 --> 00:51:16.143 align:middle
<c.magenta>你也可以按菜单键来退出全屏模式</c>

00:51:20.414 --> 00:51:21.682 align:middle
<c.magenta>这就是内嵌式视频</c>

00:51:22.382 --> 00:51:25.853 align:middle
<c.magenta>我们想展示的下一个</c>
<c.magenta>新功能是互动的视频叠加</c>

00:51:26.420 --> 00:51:30.157 align:middle
<c.magenta>这个新功能能让你把一个UI</c>

00:51:30.224 --> 00:51:31.859 align:middle
<c.magenta>置于视频上 当视频在播放时</c>

00:51:32.659 --> 00:51:36.330 align:middle
<c.magenta>在我们的演示中</c>
<c.magenta>我们会展示一个列表包含</c>

00:51:36.396 --> 00:51:39.099 align:middle
<c.magenta>相关的视频在播放视频的顶部</c>

00:51:40.267 --> 00:51:41.768 align:middle
<c.magenta>回到Xcode</c>

00:51:42.636 --> 00:51:44.505 align:middle
<c.magenta>在playSelectedLockup函数中</c>

00:51:46.106 --> 00:51:48.275 align:middle
<c.magenta>调用我刚才创建的一个函数</c>

00:51:48.342 --> 00:51:52.679 align:middle
<c.magenta>来创建一个叠加 函数名为</c>
<c.magenta>createInteractiveVideoOverlay</c>

00:51:54.615 --> 00:51:55.782 align:middle
<c.magenta>在这个函数内部</c>

00:52:00.287 --> 00:52:03.991 align:middle
<c.magenta>我们创建了另一个</c>
<c.magenta>stackTemplate</c>

00:52:06.894 --> 00:52:07.995 align:middle
<c.magenta>只有一个shelf</c>

00:52:09.730 --> 00:52:12.733 align:middle
<c.magenta>在shelt里面</c>
<c.magenta>有多个lockup元素</c>

00:52:15.135 --> 00:52:17.604 align:middle
<c.magenta>我们改变一下</c>
<c.magenta>stackTemplate的样式</c>

00:52:18.872 --> 00:52:20.674 align:middle
<c.magenta>我们添加一个模糊的背景</c>

00:52:22.643 --> 00:52:24.845 align:middle
<c.magenta>顶部增加一些空白</c>

00:52:24.912 --> 00:52:27.681 align:middle
<c.magenta>这样shelf会在播放器的底部</c>

00:52:30.417 --> 00:52:32.920 align:middle
<c.magenta>回到playSelectedLockup函数</c>

00:52:34.555 --> 00:52:36.623 align:middle
<c.magenta>创建了叠加文件之后</c>

00:52:37.057 --> 00:52:41.428 align:middle
<c.magenta>我们将它设置在播放器的</c>
<c.magenta>新模态叠加文件属性</c>

00:52:41.495 --> 00:52:43.230 align:middle
<c.magenta>这样播放器就能对它进行展示</c>

00:52:43.764 --> 00:52:47.768 align:middle
<c.magenta>实际上 播放器会展示任意一个</c>
<c.magenta>使用了这个属性的TVMLKit文件</c>

00:52:49.536 --> 00:52:51.138 align:middle
<c.magenta>现在我们也能展示这个叠加了</c>

00:52:51.205 --> 00:52:53.841 align:middle
<c.magenta>当视频处于全屏模式时</c>

00:52:54.474 --> 00:52:55.943 align:middle
<c.magenta>比如 我们可能会想展示</c>

00:52:56.009 --> 00:52:58.912 align:middle
<c.magenta>这个叠加 在视频结束前30秒的时候</c>

00:52:59.746 --> 00:53:02.850 align:middle
<c.magenta>但是为了这个演示 我们展示这个叠加</c>

00:52:59.746 --> 00:53:02.850 align:middle
<c.magenta>但是为了这个演示 我们展示这个叠加</c>

00:53:02.916 --> 00:53:06.153 align:middle
<c.magenta>一旦视频进入全屏模式</c>
<c.magenta>所以我们在这里调用它</c>

00:53:07.254 --> 00:53:08.322 align:middle
<c.magenta>让我们运行一下</c>

00:53:10.791 --> 00:53:13.727 align:middle
<c.magenta>同样 视频会在lockup里</c>
<c.magenta>自动开始播放</c>

00:53:16.630 --> 00:53:20.634 align:middle
<c.magenta>当我把视频切换到全屏模式</c>
<c.magenta>你能在屏幕上看到叠加层</c>

00:53:23.136 --> 00:53:24.071 align:middle
<c.magenta>掌声</c>

00:53:29.877 --> 00:53:32.713 align:middle
<c.magenta>而且这个叠加层还是能互动的</c>
<c.magenta>所以你可以随便移动它</c>

00:53:32.779 --> 00:53:34.381 align:middle
<c.magenta>在这个lockup里面</c>

00:53:36.950 --> 00:53:38.852 align:middle
<c.magenta>这就是交互式的视频叠加层</c>

00:53:39.720 --> 00:53:41.688 align:middle
<c.magenta>希望这个演示对大家有所帮助</c>

00:53:41.889 --> 00:53:43.156 align:middle
<c.magenta>谢谢大家</c>

00:53:43.390 --> 00:53:44.391 align:middle
<c.magenta>还给你 Parry</c>

00:53:44.791 --> 00:53:46.693 align:middle
<c.magenta>谢谢Jeff 多么精彩的一个演示</c>

00:53:47.094 --> 00:53:50.030 align:middle
<c.magenta>让我们快速回顾一下</c>
<c.magenta>我们在演示中看到的内容</c>

00:53:50.797 --> 00:53:54.134 align:middle
<c.magenta>你们看到了亮色和暗色的外观</c>

00:53:54.601 --> 00:53:57.838 align:middle
<c.magenta>能直接应用于TVMLKit应用</c>

00:53:59.606 --> 00:54:04.845 align:middle
<c.magenta>你们看到了利用三个简单的步骤</c>
<c.magenta>就能非常方便地嵌入视频</c>

00:53:59.606 --> 00:54:04.845 align:middle
<c.magenta>你们看到了利用三个简单的步骤</c>
<c.magenta>就能非常方便地嵌入视频</c>

00:54:07.414 --> 00:54:11.518 align:middle
<c.magenta>最后 你们看到了</c>
<c.magenta>一个长时间观看体验的例子</c>

00:54:12.186 --> 00:54:16.390 align:middle
<c.magenta>通过交互式视频叠加层实现</c>

00:54:18.458 --> 00:54:19.359 align:middle
<c.magenta>到这里</c>

00:54:20.894 --> 00:54:23.797 align:middle
<c.magenta>我想要总结一下我们今天学到的内容</c>

00:54:27.668 --> 00:54:29.002 align:middle
<c.magenta>有一件事情</c>

00:54:29.703 --> 00:54:32.673 align:middle
<c.magenta>我请大家离开一下这个演示文稿</c>

00:54:34.541 --> 00:54:35.409 align:middle
<c.magenta>就是这个</c>

00:54:37.444 --> 00:54:42.916 align:middle
<c.magenta>TVMLKit是一种非常简单的</c>
<c.magenta>创建TV上应用的方法</c>

00:54:44.351 --> 00:54:46.320 align:middle
<c.magenta>它给了你们本地化的体验</c>

00:54:48.121 --> 00:54:52.226 align:middle
<c.magenta>看上去和用起来都像Apple应用</c>

00:54:56.363 --> 00:55:01.134 align:middle
<c.magenta>类似于Markup和</c>
<c.magenta>JavaScript这样的网页技术</c>

00:54:56.363 --> 00:55:01.134 align:middle
<c.magenta>类似于Markup和</c>
<c.magenta>JavaScript这样的网页技术</c>

00:55:02.603 --> 00:55:04.905 align:middle
<c.magenta>能让你们快速开发应用</c>

00:55:06.540 --> 00:55:08.208 align:middle
<c.magenta>减少投放到市场的时间</c>

00:55:12.846 --> 00:55:14.414 align:middle
<c.magenta>利用这些新功能</c>

00:55:15.516 --> 00:55:17.985 align:middle
<c.magenta>和你们看到的TVMLKit</c>

00:55:18.986 --> 00:55:20.521 align:middle
<c.magenta>的例子</c>

00:55:21.188 --> 00:55:22.723 align:middle
<c.magenta>来编辑用户界面</c>

00:55:25.125 --> 00:55:29.663 align:middle
<c.magenta>你可以把你的时间 金钱</c>

00:55:30.430 --> 00:55:31.999 align:middle
<c.magenta>和聪明的精力</c>

00:55:33.934 --> 00:55:36.136 align:middle
<c.magenta>放在功能和内容上</c>

00:55:37.371 --> 00:55:41.275 align:middle
<c.magenta>让你的应用独一无二和功能强大</c>

00:55:45.379 --> 00:55:49.149 align:middle
<c.magenta>我强烈建议大家去看一下开发者网站</c>

00:55:49.216 --> 00:55:52.586 align:middle
<c.magenta>浏览一下文档和下载一些例子的代码</c>

00:55:52.653 --> 00:55:55.656 align:middle
<c.magenta>那里有大量的信息</c>

00:55:58.058 --> 00:56:00.827 align:middle
<c.magenta>我也推荐一些相关的会议</c>

00:55:58.058 --> 00:56:00.827 align:middle
<c.magenta>我也推荐一些相关的会议</c>

00:56:01.128 --> 00:56:03.130 align:middle
<c.magenta>包括tvOS的新特性</c>

00:56:04.031 --> 00:56:06.767 align:middle
<c.magenta>特别是明天将要开的</c>

00:56:06.834 --> 00:56:08.769 align:middle
<c.magenta>是TVMLKit第二部分</c>

00:56:09.970 --> 00:56:13.574 align:middle
<c.magenta>我们会介绍如何混合你们自己的视图</c>

00:56:13.640 --> 00:56:17.644 align:middle
<c.magenta>视图控制器和TVMLKit中的</c>
<c.magenta>JavaScript API</c>

00:56:19.313 --> 00:56:20.414 align:middle
<c.magenta>最后</c>

00:56:21.348 --> 00:56:22.950 align:middle
<c.magenta>我想要感谢大家</c>

00:56:23.917 --> 00:56:25.118 align:middle
<c.magenta>前来</c>

00:56:26.153 --> 00:56:31.859 align:middle
<c.magenta>希望大家在接下来的</c>
<c.magenta>WWDC16 上有着很好的体验</c>

00:56:32.226 --> 00:56:33.060 align:middle
<c.magenta>谢谢大家</c>
