WEBVTT

00:00:20.020 --> 00:00:23.790 align:middle
<c.magenta>tvOS平台上的AVKit框架</c>

00:00:28.629 --> 00:00:29.463 align:middle
<c.magenta>早上好</c>

00:00:32.198 --> 00:00:36.236 align:middle
<c.magenta>有多少人在App Store上有</c>
<c.magenta>应用或在开发播放视频的应用？</c>

00:00:37.104 --> 00:00:39.473 align:middle
<c.magenta>有不少人 不错</c>

00:00:39.773 --> 00:00:44.444 align:middle
<c.magenta>不管是为运动、新闻、娱乐、还是教育</c>

00:00:47.648 --> 00:00:50.484 align:middle
<c.magenta>视频播放系统中最重要的部分是什么？</c>

00:00:51.118 --> 00:00:54.021 align:middle
<c.magenta>是播放 暂停控制？快移？</c>

00:00:55.122 --> 00:00:57.891 align:middle
<c.magenta>也许是音频 字幕设置？</c>

00:01:00.394 --> 00:01:03.630 align:middle
<c.magenta>不 当然不是</c>
<c.magenta>当然是视频呈现</c>

00:01:04.998 --> 00:01:06.200 align:middle
<c.magenta>所以重要的是</c>

00:01:06.266 --> 00:01:10.103 align:middle
<c.magenta>当用户在用你的应用看视频时</c>

00:01:10.270 --> 00:01:13.607 align:middle
<c.magenta>他们完全关注在视频表现上</c>

00:01:14.174 --> 00:01:18.045 align:middle
<c.magenta>不会为了搞清用户界面而分心</c>

00:01:20.647 --> 00:01:23.550 align:middle
<c.magenta>所以很重要的是 视频播放系统</c>

00:01:23.617 --> 00:01:27.354 align:middle
<c.magenta>对观众来说要是简单 一致 可预计的</c>

00:01:27.554 --> 00:01:30.157 align:middle
<c.magenta>当他们在Apple TV上</c>
<c.magenta>往返于不同应用时</c>

00:01:32.593 --> 00:01:35.395 align:middle
<c.magenta>视频播放在Apple TV上</c>
<c.magenta>看似简单</c>

00:01:35.462 --> 00:01:36.997 align:middle
<c.magenta>却不是什么简单的任务</c>

00:01:37.064 --> 00:01:39.433 align:middle
<c.magenta>市面上有很多不同的用户交互工具</c>

00:01:40.000 --> 00:01:44.605 align:middle
<c.magenta>包括Siri remote上的</c>
<c.magenta>按钮和触控表面</c>

00:01:44.972 --> 00:01:48.675 align:middle
<c.magenta>Siri声控前几代的</c>
<c.magenta>Apple TV remote</c>

00:01:49.776 --> 00:01:51.311 align:middle
<c.magenta>iOS Remote应用</c>

00:01:51.578 --> 00:01:54.181 align:middle
<c.magenta>蓝牙键盘 游戏遥控器</c>

00:01:55.048 --> 00:01:57.417 align:middle
<c.magenta>当然还有红外线通用遥控器</c>

00:02:00.754 --> 00:02:03.490 align:middle
<c.magenta>如果你不需要对付这些不同的</c>
<c.magenta>控制方式不会很棒么？</c>

00:02:04.691 --> 00:02:07.027 align:middle
<c.magenta>我是Dan Wright</c>
<c.magenta>今天我要讲讲</c>

00:02:07.094 --> 00:02:10.330 align:middle
<c.magenta>怎样用AVKit框架</c>
<c.magenta>轻易达到这个目的</c>

00:02:11.899 --> 00:02:15.903 align:middle
<c.magenta>AVKit提供先进的回放控制</c>
<c.magenta>和一致的用户界面</c>

00:02:16.537 --> 00:02:20.174 align:middle
<c.magenta>让我们快速看一下AVKit</c>
<c.magenta>提供的一些功能</c>

00:02:22.276 --> 00:02:24.344 align:middle
<c.magenta>这是用AVKit播放视频</c>

00:02:24.745 --> 00:02:27.548 align:middle
<c.magenta>可见一条透明的运输条显示播放时间</c>

00:02:27.614 --> 00:02:30.317 align:middle
<c.magenta>在视频中的位置以及所剩时间</c>

00:02:31.418 --> 00:02:34.288 align:middle
<c.magenta>触摸遥控器上的触控表面显示提示</c>

00:02:35.088 --> 00:02:38.358 align:middle
<c.magenta>点击边缘会往前或往后跳</c>

00:02:39.092 --> 00:02:43.330 align:middle
<c.magenta>或者向下按住触摸面</c>
<c.magenta>观众可以快进或快退</c>

00:02:44.998 --> 00:02:49.269 align:middle
<c.magenta>暂停时 在遥控器上从一边刷到另一边</c>

00:02:49.336 --> 00:02:51.672 align:middle
<c.magenta>可以迅速快进快退整个视频</c>

00:02:52.840 --> 00:02:55.209 align:middle
<c.magenta>向下划会显示信息面板 包括</c>

00:02:55.275 --> 00:02:58.345 align:middle
<c.magenta>关于该视频和导航标记的信息</c>

00:02:59.513 --> 00:03:03.350 align:middle
<c.magenta>还可以进入音频和字幕的设置</c>

00:02:59.513 --> 00:03:03.350 align:middle
<c.magenta>还可以进入音频和字幕的设置</c>

00:03:05.152 --> 00:03:08.789 align:middle
<c.magenta>最后AVKit自动支持Siri声控</c>

00:03:08.856 --> 00:03:11.892 align:middle
<c.magenta>像“回到开头” “她说了什么？”</c>

00:03:11.959 --> 00:03:13.560 align:middle
<c.magenta>“向前跳30秒”</c>

00:03:13.627 --> 00:03:16.463 align:middle
<c.magenta>暂时开着字幕重播</c>

00:03:17.965 --> 00:03:22.603 align:middle
<c.magenta>AVKit使用先进的媒体栈</c>
<c.magenta>iOS macOS也有该框架</c>

00:03:24.304 --> 00:03:26.507 align:middle
<c.magenta>AVKit负责提供用户体验</c>

00:03:27.674 --> 00:03:31.411 align:middle
<c.magenta>AVFoundation和</c>
<c.magenta>CoreMedia提供核心播放工具</c>

00:03:32.446 --> 00:03:37.518 align:middle
<c.magenta>UIKit或者</c>
<c.magenta>在macOS上是AppKit</c>

00:03:37.584 --> 00:03:39.419 align:middle
<c.magenta>提供界面元素</c>

00:03:40.587 --> 00:03:43.557 align:middle
<c.magenta>今天我们要讲三点</c>

00:03:44.525 --> 00:03:48.128 align:middle
<c.magenta>第一 我们要展示</c>
<c.magenta>用AVKit如何简单开始</c>

00:03:48.996 --> 00:03:51.031 align:middle
<c.magenta>第二 我们看看几种方式</c>

00:03:51.098 --> 00:03:55.402 align:middle
<c.magenta>用tvOS的特点扩展播放体验</c>

00:03:56.136 --> 00:03:58.205 align:middle
<c.magenta>第三 我们要讲怎样最好地实践</c>

00:03:59.406 --> 00:04:00.741 align:middle
<c.magenta>好了开始吧</c>

00:03:59.406 --> 00:04:00.741 align:middle
<c.magenta>好了开始吧</c>

00:04:02.075 --> 00:04:04.545 align:middle
<c.magenta>让我们讲讲AVPlayerViewController</c>

00:04:05.746 --> 00:04:09.616 align:middle
<c.magenta>AVPlayerViewController</c>
<c.magenta>用AVPlayer AVPlayerItem</c>

00:04:09.683 --> 00:04:12.252 align:middle
<c.magenta>和AVAsset 由你的应用提供</c>

00:04:13.253 --> 00:04:16.690 align:middle
<c.magenta>AVAsset代表音频视频媒体</c>

00:04:16.757 --> 00:04:20.627 align:middle
<c.magenta>AVPlayerItem</c>
<c.magenta>代表媒体资源状态</c>

00:04:21.060 --> 00:04:23.030 align:middle
<c.magenta>AVPlayer控制播放</c>

00:04:23.764 --> 00:04:27.134 align:middle
<c.magenta>AVPlayerViewController</c>
<c.magenta>在最顶端 负责UI</c>

00:04:29.269 --> 00:04:32.573 align:middle
<c.magenta>让我们看看</c>
<c.magenta>怎样把媒体提供给AVKit</c>

00:04:35.108 --> 00:04:36.443 align:middle
<c.magenta>有四个步骤</c>

00:04:37.311 --> 00:04:39.646 align:middle
<c.magenta>第一 从URL创建媒体资源</c>

00:04:40.914 --> 00:04:43.183 align:middle
<c.magenta>第二 创建一个该资源的播放项</c>

00:04:44.384 --> 00:04:46.987 align:middle
<c.magenta>第三 用播放项创建播放器</c>

00:04:47.054 --> 00:04:50.791 align:middle
<c.magenta>第四 把播放器视图控制器</c>
<c.magenta>和创建的播放器相关联</c>

00:04:52.292 --> 00:04:55.095 align:middle
<c.magenta>现在 你可以简化所有步骤到一行</c>

00:04:55.662 --> 00:04:57.731 align:middle
<c.magenta>只要直接用URL创建播放器</c>

00:04:57.798 --> 00:05:01.502 align:middle
<c.magenta>并指定它为播放器视图控制器的</c>
<c.magenta>播放器属性就行</c>

00:04:57.798 --> 00:05:01.502 align:middle
<c.magenta>并指定它为播放器视图控制器的</c>
<c.magenta>播放器属性就行</c>

00:05:03.937 --> 00:05:07.140 align:middle
<c.magenta>接下来让我们看看你</c>
<c.magenta>怎样嵌入内联播放器视图</c>

00:05:09.710 --> 00:05:11.945 align:middle
<c.magenta>首先 构建播放器视图控制器</c>

00:05:13.113 --> 00:05:16.149 align:middle
<c.magenta>然后 设置画面为内联视图</c>

00:05:17.084 --> 00:05:20.721 align:middle
<c.magenta>这儿我们直接设置画面了</c>
<c.magenta>但你应当用约束</c>

00:05:22.356 --> 00:05:26.393 align:middle
<c.magenta>第三 把播放视图控制器的视图</c>
<c.magenta>加入你的视图</c>

00:05:26.860 --> 00:05:28.328 align:middle
<c.magenta>把播放视图控制器自己加到</c>

00:05:28.395 --> 00:05:31.198 align:middle
<c.magenta>你视图控制器的子视图控制器</c>

00:05:33.267 --> 00:05:35.969 align:middle
<c.magenta>现在 一旦你做好交互全屏展示的准备</c>

00:05:36.036 --> 00:05:40.407 align:middle
<c.magenta>就可以呈现这个视图控制器</c>
<c.magenta>它会自动实现动画效果</c>

00:05:40.474 --> 00:05:42.776 align:middle
<c.magenta>从内联播放器到全屏</c>

00:05:46.780 --> 00:05:50.484 align:middle
<c.magenta>好 让我们谈谈延伸播放体验</c>

00:05:52.719 --> 00:05:59.159 align:middle
<c.magenta>去年秋天tvOS 9引入</c>
<c.magenta>AVKit附带一些增强功能</c>

00:05:59.860 --> 00:06:04.831 align:middle
<c.magenta>也就是 可以添加无交互覆盖</c>

00:05:59.860 --> 00:06:04.831 align:middle
<c.magenta>也就是 可以添加无交互覆盖</c>

00:06:05.399 --> 00:06:07.100 align:middle
<c.magenta>限制播放时的交互</c>

00:06:08.235 --> 00:06:09.937 align:middle
<c.magenta>提供元数据</c>

00:06:11.205 --> 00:06:12.539 align:middle
<c.magenta>导航标记</c>

00:06:13.740 --> 00:06:16.210 align:middle
<c.magenta>识别插播广告内容</c>

00:06:19.279 --> 00:06:22.816 align:middle
<c.magenta>tvOS 10中</c>
<c.magenta>我们将引入一些新的增强功能</c>

00:06:23.483 --> 00:06:26.386 align:middle
<c.magenta>可以修改如何跳着播放</c>

00:06:30.290 --> 00:06:32.192 align:middle
<c.magenta>可以展示播放内容建议</c>

00:06:35.229 --> 00:06:37.197 align:middle
<c.magenta>现在我们依个说说</c>

00:06:39.433 --> 00:06:43.403 align:middle
<c.magenta>覆盖层用来放图标和其他覆盖着的图形</c>

00:06:44.204 --> 00:06:47.107 align:middle
<c.magenta>播放覆盖视图在视频本身的上面</c>

00:06:47.908 --> 00:06:49.276 align:middle
<c.magenta>但在控制层的下面</c>

00:06:53.680 --> 00:06:56.583 align:middle
<c.magenta>视图可能是静止的 或活动的</c>

00:06:56.984 --> 00:06:59.820 align:middle
<c.magenta>但是视图接收不到聚焦或事件</c>

00:07:02.589 --> 00:07:04.391 align:middle
<c.magenta>现在继续讨论限制播放控制</c>

00:07:05.359 --> 00:07:08.795 align:middle
<c.magenta>播放器视图控制器的</c>
<c.magenta>requiresLinearPlayback属性</c>

00:07:09.263 --> 00:07:13.200 align:middle
<c.magenta>限制用户交互到仅剩播放和暂停</c>

00:07:13.734 --> 00:07:16.403 align:middle
<c.magenta>功能如快进 快移 跳播</c>

00:07:16.470 --> 00:07:20.474 align:middle
<c.magenta>章节导航等都在设定这个属性时被禁止</c>

00:07:20.841 --> 00:07:24.178 align:middle
<c.magenta>一般来说 你会把它设为真</c>
<c.magenta>当你想强制播放</c>

00:07:24.244 --> 00:07:29.149 align:middle
<c.magenta>一段视频比如广告 或法律注意事项时</c>

00:07:32.853 --> 00:07:34.454 align:middle
<c.magenta>外部元数据属性</c>

00:07:35.322 --> 00:07:39.259 align:middle
<c.magenta>补充替代了你媒体资源内置信息</c>

00:07:39.459 --> 00:07:43.964 align:middle
<c.magenta>像标题 描述 流派 媒体内容评级</c>

00:07:44.031 --> 00:07:46.800 align:middle
<c.magenta>PG-13还是R级这些或者海报封面</c>

00:07:51.138 --> 00:07:54.408 align:middle
<c.magenta>现在让我们回到之前看到的</c>
<c.magenta>显示信息面板的截屏</c>

00:07:55.242 --> 00:07:58.812 align:middle
<c.magenta>我想让你们注意这里顶部的部分</c>

00:07:59.279 --> 00:08:03.517 align:middle
<c.magenta>这是tvOS中信息元数据显示的地方</c>

00:07:59.279 --> 00:08:03.517 align:middle
<c.magenta>这是tvOS中信息元数据显示的地方</c>

00:08:03.851 --> 00:08:07.521 align:middle
<c.magenta>现在 不仅如此</c>
<c.magenta>还显示在iOS Remote应用上</c>

00:08:08.722 --> 00:08:10.791 align:middle
<c.magenta>这儿我们看到这个封面</c>

00:08:10.858 --> 00:08:12.926 align:middle
<c.magenta>看上去像是从视频中</c>
<c.magenta>一帧静止画面</c>

00:08:13.927 --> 00:08:14.862 align:middle
<c.magenta>看到标题</c>

00:08:14.928 --> 00:08:17.865 align:middle
<c.magenta>还能直接从资源信息上看到时长</c>

00:08:17.931 --> 00:08:20.767 align:middle
<c.magenta>媒体内容评级和描述</c>

00:08:23.036 --> 00:08:26.874 align:middle
<c.magenta>现在看看如何创建外部元数据条目</c>

00:08:27.241 --> 00:08:31.178 align:middle
<c.magenta>我们将创建一些辅助函数</c>

00:08:31.245 --> 00:08:32.779 align:middle
<c.magenta>来让它变得简单</c>

00:08:33.947 --> 00:08:37.384 align:middle
<c.magenta>第一个函数 叫做元数据条目</c>
<c.magenta>需要一个标识符和一个值</c>

00:08:37.451 --> 00:08:39.820 align:middle
<c.magenta>将返回AVMetadataItem</c>

00:08:40.621 --> 00:08:44.157 align:middle
<c.magenta>那么元数据条目有很多属性</c>

00:08:44.224 --> 00:08:49.363 align:middle
<c.magenta>你需要设置这三个属性：</c>
<c.magenta>值 识别符</c>

00:08:50.397 --> 00:08:53.033 align:middle
<c.magenta>和经常被忽略的扩展性语言标签</c>

00:08:54.268 --> 00:08:57.538 align:middle
<c.magenta>现在你们看到的</c>
<c.magenta>我把它设为字符串“und”</c>

00:08:57.604 --> 00:09:01.675 align:middle
<c.magenta>作为“未定义的”简称</c>
<c.magenta>所以它有通配符的作用</c>

00:08:57.604 --> 00:09:01.675 align:middle
<c.magenta>作为“未定义的”简称</c>
<c.magenta>所以它有通配符的作用</c>

00:09:02.142 --> 00:09:06.380 align:middle
<c.magenta>如果你没有非常特别的语言版本的话</c>

00:09:06.914 --> 00:09:10.717 align:middle
<c.magenta>这就是AVKit会展现的</c>

00:09:11.552 --> 00:09:13.353 align:middle
<c.magenta>如果你没有任何语言翻译</c>

00:09:13.420 --> 00:09:16.590 align:middle
<c.magenta>如果所有内容都是</c>
<c.magenta>比如说 英语的 或者法语的</c>

00:09:16.957 --> 00:09:20.060 align:middle
<c.magenta>那就用“未定义的”这样用户</c>

00:09:20.127 --> 00:09:22.396 align:middle
<c.magenta>不管他们用什么语言都可以看到些什么</c>

00:09:24.765 --> 00:09:26.934 align:middle
<c.magenta>封面就有点不一样了</c>

00:09:29.102 --> 00:09:33.841 align:middle
<c.magenta>封面的元数据项的值属性是图像</c>

00:09:33.907 --> 00:09:36.877 align:middle
<c.magenta>它是原始数据</c>
<c.magenta>你可以用PNG或者JPEG格式的</c>

00:09:37.945 --> 00:09:39.780 align:middle
<c.magenta>你还需要设置数据类型字段</c>

00:09:39.847 --> 00:09:42.149 align:middle
<c.magenta>来确定你提供的是什么类型的数据</c>

00:09:44.284 --> 00:09:47.521 align:middle
<c.magenta>还有一样的 你要设置识别符</c>
<c.magenta>和扩展性语言标签</c>

00:09:50.057 --> 00:09:51.291 align:middle
<c.magenta>我们要把这些放到一起</c>

00:09:51.358 --> 00:09:53.894 align:middle
<c.magenta>创建几个外部元数据条目</c>

00:09:53.961 --> 00:09:55.028 align:middle
<c.magenta>创建一个数组</c>

00:09:55.229 --> 00:09:57.931 align:middle
<c.magenta>用辅助函数添加标题</c>

00:09:58.298 --> 00:10:01.435 align:middle
<c.magenta>描述 和海报封面到这个数组</c>

00:09:58.298 --> 00:10:01.435 align:middle
<c.magenta>描述 和海报封面到这个数组</c>

00:10:01.969 --> 00:10:03.737 align:middle
<c.magenta>抱歉 还有流派</c>

00:10:03.904 --> 00:10:05.572 align:middle
<c.magenta>最后把数组指定为</c>

00:10:05.639 --> 00:10:08.775 align:middle
<c.magenta>当前播放项的外部元数据属性</c>

00:10:11.712 --> 00:10:13.547 align:middle
<c.magenta>好了 回到信息面板</c>

00:10:15.249 --> 00:10:18.185 align:middle
<c.magenta>向下看看底部</c>

00:10:18.285 --> 00:10:19.753 align:middle
<c.magenta>这是导航部分</c>

00:10:19.820 --> 00:10:22.823 align:middle
<c.magenta>这里展示一组导航标识</c>

00:10:24.024 --> 00:10:27.661 align:middle
<c.magenta>导航标记常用来标记章节</c>

00:10:27.728 --> 00:10:30.831 align:middle
<c.magenta>但也用来方便进入视频中不同部分</c>

00:10:32.566 --> 00:10:35.536 align:middle
<c.magenta>导航标识组标记章节或事件</c>

00:10:35.602 --> 00:10:37.938 align:middle
<c.magenta>举例说 事件会是在一个运动视频中</c>

00:10:38.005 --> 00:10:40.107 align:middle
<c.magenta>你会想标记的比赛精彩部分</c>

00:10:44.878 --> 00:10:47.548 align:middle
<c.magenta>一组导航标识被定义为</c>

00:10:47.614 --> 00:10:51.552 align:middle
<c.magenta>AVNavigationMarkersGroup</c>
<c.magenta>类的一个对象</c>

00:10:52.419 --> 00:10:56.056 align:middle
<c.magenta>它包含一个数组的导航标记</c>
<c.magenta>这里是章节标记</c>

00:11:00.861 --> 00:11:02.396 align:middle
<c.magenta>每个标记有一个标题</c>

00:11:03.664 --> 00:11:04.898 align:middle
<c.magenta>大部分情况下还有</c>

00:11:04.965 --> 00:11:07.601 align:middle
<c.magenta>一个图像 往往是视频缩略图</c>

00:11:07.668 --> 00:11:08.802 align:middle
<c.magenta>但那是可选的</c>

00:11:11.438 --> 00:11:14.608 align:middle
<c.magenta>一个事件组本身也有标题</c>

00:11:14.675 --> 00:11:16.610 align:middle
<c.magenta>章节组则没有</c>

00:11:19.580 --> 00:11:22.916 align:middle
<c.magenta>好 还有一个小小的辅助函数用来</c>
<c.magenta>创建导航标记</c>

00:11:22.983 --> 00:11:27.087 align:middle
<c.magenta>它需要标题 描述 和时间范围</c>

00:11:27.588 --> 00:11:31.458 align:middle
<c.magenta>定时范围是你要定位到的</c>
<c.magenta>视频片段的时间</c>

00:11:31.525 --> 00:11:33.827 align:middle
<c.magenta>然而持续时间是随意的</c>

00:11:35.062 --> 00:11:37.731 align:middle
<c.magenta>如果你不是非要设置 可以随它设为0</c>

00:11:39.499 --> 00:11:43.504 align:middle
<c.magenta>这里又一次 我们要为标题</c>
<c.magenta>和描述创建元数据条目</c>

00:11:43.871 --> 00:11:46.340 align:middle
<c.magenta>最后创建定时的元数据组</c>

00:11:46.406 --> 00:11:49.710 align:middle
<c.magenta>用元数据和定时范围</c>

00:11:53.981 --> 00:11:56.316 align:middle
<c.magenta>好 讲讲插播内容</c>

00:11:58.719 --> 00:12:02.322 align:middle
<c.magenta>这里我们看到有几个插播内容的视频</c>

00:11:58.719 --> 00:12:02.322 align:middle
<c.magenta>这里我们看到有几个插播内容的视频</c>

00:12:03.490 --> 00:12:06.693 align:middle
<c.magenta>以运输条上的点来指明</c>

00:12:08.362 --> 00:12:10.731 align:middle
<c.magenta>用户在看一条插播内容</c>

00:12:10.797 --> 00:12:15.536 align:middle
<c.magenta>运输条上方的时间在倒数剩余时间</c>

00:12:16.470 --> 00:12:21.175 align:middle
<c.magenta>下方时间表示已播放时间</c>

00:12:25.345 --> 00:12:29.049 align:middle
<c.magenta>插播内容是与正播放视频无关的内容</c>

00:12:29.116 --> 00:12:33.754 align:middle
<c.magenta>所以是像广告 法律声明 之类的</c>

00:12:36.790 --> 00:12:38.759 align:middle
<c.magenta>插播时间范围仅表示</c>

00:12:38.825 --> 00:12:42.029 align:middle
<c.magenta>在含有插播内容的资源中的一个部分</c>

00:12:44.064 --> 00:12:45.599 align:middle
<c.magenta>插播时间范围会折叠起来</c>

00:12:45.666 --> 00:12:48.535 align:middle
<c.magenta>运输条上的点像缺口</c>

00:12:48.602 --> 00:12:50.404 align:middle
<c.magenta>如前一页幻灯片上看到的</c>

00:12:51.305 --> 00:12:55.475 align:middle
<c.magenta>最后 在快移时 插播内容是隐藏的</c>

00:12:55.542 --> 00:12:58.478 align:middle
<c.magenta>所以用户在从这个视频定位</c>

00:12:58.545 --> 00:13:01.782 align:middle
<c.magenta>用快移时 不会被弹出的广告干扰</c>

00:12:58.545 --> 00:13:01.782 align:middle
<c.magenta>用快移时 不会被弹出的广告干扰</c>

00:13:05.185 --> 00:13:06.854 align:middle
<c.magenta>这里有一张简图</c>

00:13:07.955 --> 00:13:11.124 align:middle
<c.magenta>比较上面的视频文件时间线</c>

00:13:11.325 --> 00:13:14.561 align:middle
<c.magenta>和底部用户看到的运输条</c>

00:13:14.862 --> 00:13:17.731 align:middle
<c.magenta>九分钟的视频中有几个插播内容</c>

00:13:18.999 --> 00:13:21.435 align:middle
<c.magenta>都被折叠成点</c>

00:13:21.768 --> 00:13:25.672 align:middle
<c.magenta>注意到运输条上的插播内容持续时间</c>

00:13:25.739 --> 00:13:27.407 align:middle
<c.magenta>长度减少了</c>

00:13:27.474 --> 00:13:29.977 align:middle
<c.magenta>或者说这些插播内容的</c>
<c.magenta>持续长度看上去减少了</c>

00:13:34.147 --> 00:13:37.551 align:middle
<c.magenta>现在看看如何创建并声明插播内容</c>

00:13:38.952 --> 00:13:43.891 align:middle
<c.magenta>首先在你的服务器上应该链接插播内容</c>

00:13:43.957 --> 00:13:46.226 align:middle
<c.magenta>直接到HLS流媒体库</c>

00:13:47.961 --> 00:13:49.663 align:middle
<c.magenta>接下来 在用户应用上</c>

00:13:50.864 --> 00:13:53.567 align:middle
<c.magenta>声明插播内容时间范围</c>

00:13:54.768 --> 00:13:58.639 align:middle
<c.magenta>实现一些委托代理方法来执行播放规则</c>

00:14:00.274 --> 00:14:01.508 align:middle
<c.magenta>这里一小段代码</c>

00:14:01.942 --> 00:14:05.112 align:middle
<c.magenta>表现如何声明插播内容时间范围</c>

00:14:05.579 --> 00:14:09.316 align:middle
<c.magenta>每个插播内容 创建一个</c>
<c.magenta>AVInterstitialTimeRange</c>

00:14:10.184 --> 00:14:12.486 align:middle
<c.magenta>然后设置插播内容时间范围属性为</c>

00:14:12.553 --> 00:14:14.788 align:middle
<c.magenta>播放项的该属性</c>

00:14:18.492 --> 00:14:22.296 align:middle
<c.magenta>这里我们之创建了单个</c>
<c.magenta>插播内容时间范围</c>

00:14:25.766 --> 00:14:27.434 align:middle
<c.magenta>接下来 委托代理方法</c>

00:14:30.704 --> 00:14:33.473 align:middle
<c.magenta>讲三个重要的方法</c>

00:14:33.540 --> 00:14:36.710 align:middle
<c.magenta>第一是willPresent</c>
<c.magenta>willPresent被调用</c>

00:14:37.544 --> 00:14:40.314 align:middle
<c.magenta>当其中一个插播内容开始播放</c>

00:14:41.748 --> 00:14:46.053 align:middle
<c.magenta>一般这时你需要修改</c>
<c.magenta>requiresLinearPlayback属性</c>

00:14:46.119 --> 00:14:47.588 align:middle
<c.magenta>来限制导航</c>

00:14:48.121 --> 00:14:49.957 align:middle
<c.magenta>比如这是一则广告</c>

00:14:50.023 --> 00:14:52.693 align:middle
<c.magenta>也许你有合同上的原因</c>

00:14:52.759 --> 00:14:55.796 align:middle
<c.magenta>要求用户一旦开始必须看完整广告</c>

00:14:56.430 --> 00:14:57.364 align:middle
<c.magenta>你把它设为真</c>

00:14:57.431 --> 00:15:00.334 align:middle
<c.magenta>那么用户不能跳过</c>
<c.magenta>但他们还是可以暂停</c>

00:14:57.431 --> 00:15:00.334 align:middle
<c.magenta>那么用户不能跳过</c>
<c.magenta>但他们还是可以暂停</c>

00:15:00.901 --> 00:15:02.936 align:middle
<c.magenta>去厨房什么的再回来</c>

00:15:03.704 --> 00:15:05.706 align:middle
<c.magenta>但他们不能导航</c>

00:15:05.772 --> 00:15:08.575 align:middle
<c.magenta>在插播内容里就不能跳过</c>

00:15:10.310 --> 00:15:13.080 align:middle
<c.magenta>didPresent方法</c>
<c.magenta>在插播结束时被调用</c>

00:15:13.380 --> 00:15:16.216 align:middle
<c.magenta>你常常需要把</c>
<c.magenta>requiresLinearPlayback设回到假</c>

00:15:16.283 --> 00:15:18.252 align:middle
<c.magenta>这样用户又能导航了</c>

00:15:20.220 --> 00:15:21.188 align:middle
<c.magenta>最后</c>

00:15:22.422 --> 00:15:27.861 align:middle
<c.magenta>timeToSeekAfterUserNavigatedFrom</c>
<c.magenta>从一个时间到某个目标时间点</c>

00:15:28.529 --> 00:15:31.431 align:middle
<c.magenta>这个方法被调用 当用户导航时</c>

00:15:31.498 --> 00:15:34.635 align:middle
<c.magenta>或表示他们想要移动到视频别的部分</c>

00:15:34.701 --> 00:15:37.404 align:middle
<c.magenta>比如快进或快退</c>

00:15:38.605 --> 00:15:40.641 align:middle
<c.magenta>快移 点击播放</c>

00:15:40.707 --> 00:15:44.645 align:middle
<c.magenta>或者用导航标记跳到视频的另一部分</c>

00:15:45.913 --> 00:15:48.115 align:middle
<c.magenta>oldTime表示播放时间点</c>

00:15:48.182 --> 00:15:49.449 align:middle
<c.magenta>在快进之前</c>

00:15:49.516 --> 00:15:52.486 align:middle
<c.magenta>targetTime表示</c>
<c.magenta>接下来开始播放的时间</c>

00:15:53.287 --> 00:15:58.892 align:middle
<c.magenta>代理方法返回的时间是你想播放器</c>
<c.magenta>恢复播放的时间点</c>

00:16:00.027 --> 00:16:02.696 align:middle
<c.magenta>所以默认下 如果不实现这个方法</c>

00:16:02.763 --> 00:16:04.798 align:middle
<c.magenta>它恢复在</c>
<c.magenta>targetTime目标时间</c>

00:16:04.865 --> 00:16:07.634 align:middle
<c.magenta>AVKit会找到目标时间点开始播放</c>

00:16:07.901 --> 00:16:11.004 align:middle
<c.magenta>不然 如果你提供插播开始时间</c>

00:16:11.672 --> 00:16:14.541 align:middle
<c.magenta>AVKit会自动重定向到</c>
<c.magenta>插播开始时间</c>

00:16:15.676 --> 00:16:17.811 align:middle
<c.magenta>那么如果你重定向了插播开始时间</c>

00:16:18.345 --> 00:16:20.747 align:middle
<c.magenta>不像这里的简单示例</c>

00:16:20.814 --> 00:16:22.850 align:middle
<c.magenta>你就会需要记录目标时间</c>

00:16:23.784 --> 00:16:27.487 align:middle
<c.magenta>当插播完毕后 找到目标时间</c>

00:16:27.554 --> 00:16:29.489 align:middle
<c.magenta>那么用户可以再开始看</c>

00:16:29.890 --> 00:16:33.026 align:middle
<c.magenta>他们想看的时间点</c>

00:16:34.661 --> 00:16:36.463 align:middle
<c.magenta>现在看看跳过播放</c>

00:16:38.932 --> 00:16:40.234 align:middle
<c.magenta>这是跳过的指示符</c>

00:16:40.300 --> 00:16:43.203 align:middle
<c.magenta>tvOS 10新的跳过指示符</c>

00:16:43.337 --> 00:16:44.805 align:middle
<c.magenta>逐条跳过指示符</c>

00:16:48.642 --> 00:16:51.879 align:middle
<c.magenta>取代之前 跳过指示符是</c>

00:16:51.945 --> 00:16:54.715 align:middle
<c.magenta>10秒向前向后跳跃播放的</c>

00:16:57.351 --> 00:17:00.587 align:middle
<c.magenta>tvOS 10系统中你可以</c>
<c.magenta>选择这两种跳过方式</c>

00:16:57.351 --> 00:17:00.587 align:middle
<c.magenta>tvOS 10系统中你可以</c>
<c.magenta>选择这两种跳过方式</c>

00:17:01.889 --> 00:17:06.026 align:middle
<c.magenta>如果你的应用展示的是电影或电视节目</c>

00:17:06.693 --> 00:17:08.694 align:middle
<c.magenta>用户就可以用来</c>

00:17:08.762 --> 00:17:12.366 align:middle
<c.magenta>定位向前或向后10秒</c>

00:17:12.432 --> 00:17:16.236 align:middle
<c.magenta>每次 更方便的找到他们想看的场面</c>

00:17:17.204 --> 00:17:21.141 align:middle
<c.magenta>如果放的是一系列短视频</c>
<c.magenta>比如锻炼视频</c>

00:17:21.775 --> 00:17:24.845 align:middle
<c.magenta>用户更可能使用 可以轻松跳到</c>

00:17:24.912 --> 00:17:29.683 align:middle
<c.magenta>下一个视频 下一项锻炼</c>
<c.magenta>或者前一个视频 前一项锻炼的功能</c>

00:17:29.750 --> 00:17:32.352 align:middle
<c.magenta>而不是在一个锻炼视频里前后跳一点</c>

00:17:33.220 --> 00:17:36.123 align:middle
<c.magenta>所以为了适应这些情景</c>
<c.magenta>你可以改变跳跃播放方式</c>

00:17:36.190 --> 00:17:38.458 align:middle
<c.magenta>今天定义了两种：</c>

00:17:38.525 --> 00:17:42.429 align:middle
<c.magenta>默认方式是加减10秒</c>
<c.magenta>还有逐条跳跃的方式</c>

00:17:43.330 --> 00:17:46.033 align:middle
<c.magenta>播放器视图控制器有三个属性</c>

00:17:46.099 --> 00:17:48.101 align:middle
<c.magenta>与此相关：跳跃方式属性</c>

00:17:48.168 --> 00:17:50.871 align:middle
<c.magenta>和其他属性来启用或禁用</c>

00:17:50.938 --> 00:17:54.408 align:middle
<c.magenta>跳跃指示符</c>

00:17:57.044 --> 00:18:02.115 align:middle
<c.magenta>那么来看看逐条跳跃播放</c>
<c.magenta>而不是跳几秒的</c>

00:17:57.044 --> 00:18:02.115 align:middle
<c.magenta>那么来看看逐条跳跃播放</c>
<c.magenta>而不是跳几秒的</c>

00:18:03.150 --> 00:18:05.853 align:middle
<c.magenta>第一件事要做的是</c>

00:18:06.520 --> 00:18:08.121 align:middle
<c.magenta>选择新的跳跃播放方式</c>

00:18:08.188 --> 00:18:09.957 align:middle
<c.magenta>这里就一路设置启用</c>

00:18:10.023 --> 00:18:12.426 align:middle
<c.magenta>向前向后跳跃</c>
<c.magenta>我有点儿偷懒</c>

00:18:13.227 --> 00:18:16.697 align:middle
<c.magenta>然后实现两个代理方法</c>

00:18:17.331 --> 00:18:18.632 align:middle
<c.magenta>跳到下一项的方法中</c>

00:18:18.732 --> 00:18:23.270 align:middle
<c.magenta>我们要做的是替代当前项为新的视频</c>

00:18:24.738 --> 00:18:27.541 align:middle
<c.magenta>然后跳到前一项方法也一样</c>
<c.magenta>只不过是向后退一个视频</c>

00:18:30.611 --> 00:18:34.515 align:middle
<c.magenta>好作为所有这些功能的演示</c>

00:18:34.581 --> 00:18:37.251 align:middle
<c.magenta>我要欢迎</c>
<c.magenta>Jonathan Long上台</c>

00:18:37.384 --> 00:18:38.252 align:middle
<c.magenta>Jonathan</c>

00:18:45.092 --> 00:18:46.093 align:middle
<c.magenta>早上好</c>

00:18:46.159 --> 00:18:50.063 align:middle
<c.magenta>我是Jonathan Long</c>
<c.magenta>和Dan一起从事tvOS的AVKit框架</c>

00:18:50.564 --> 00:18:55.736 align:middle
<c.magenta>今天 我们要演示一个应用</c>
<c.magenta>叫做AVKit Player</c>

00:18:56.403 --> 00:18:58.605 align:middle
<c.magenta>在Xcode打开这个项目</c>

00:18:59.273 --> 00:19:01.508 align:middle
<c.magenta>这是主视图控制器</c>

00:18:59.273 --> 00:19:01.508 align:middle
<c.magenta>这是主视图控制器</c>

00:19:01.975 --> 00:19:04.311 align:middle
<c.magenta>是UIViewController</c>
<c.magenta>的子类</c>

00:19:04.611 --> 00:19:07.614 align:middle
<c.magenta>其中有一个变量引用</c>
<c.magenta>AVPlayerViewController</c>

00:19:08.248 --> 00:19:11.952 align:middle
<c.magenta>我们在prepare函数中获取</c>
<c.magenta>该引用为了回调转场</c>

00:19:12.753 --> 00:19:15.088 align:middle
<c.magenta>并且 我们创建AVAsset</c>

00:19:15.589 --> 00:19:18.992 align:middle
<c.magenta>AVPlayerItem</c>
<c.magenta>和AVPlayer 指定为</c>

00:19:19.059 --> 00:19:20.961 align:middle
<c.magenta>播放器视图控制器的播放器属性</c>

00:19:21.461 --> 00:19:24.164 align:middle
<c.magenta>接下来打包运行这个项目看它怎么样</c>

00:19:27.534 --> 00:19:29.603 align:middle
<c.magenta>这是我们全屏下的播放器视图控制器</c>

00:19:29.670 --> 00:19:31.672 align:middle
<c.magenta>附带所有常见的用户交互功能</c>

00:19:32.005 --> 00:19:34.908 align:middle
<c.magenta>如果我向下划会显示信息面板</c>

00:19:35.242 --> 00:19:38.312 align:middle
<c.magenta>你可以看到这儿并没有很多有趣的信息</c>

00:19:38.378 --> 00:19:40.981 align:middle
<c.magenta>最明显的是这儿缺了信息标签</c>

00:19:41.682 --> 00:19:43.851 align:middle
<c.magenta>所以第一件事要做的是加入</c>

00:19:43.917 --> 00:19:46.119 align:middle
<c.magenta>一些外部元数据和导航标记</c>

00:19:46.186 --> 00:19:47.754 align:middle
<c.magenta>这样信息标签页就会出现了</c>

00:19:49.156 --> 00:19:52.826 align:middle
<c.magenta>回到Xcode 第一件事要做的是</c>

00:19:52.893 --> 00:19:54.995 align:middle
<c.magenta>加入外部元数据</c>

00:19:55.229 --> 00:19:58.165 align:middle
<c.magenta>那么创建一些</c>
<c.magenta>AVMetadataItems</c>

00:19:58.232 --> 00:20:00.567 align:middle
<c.magenta>把它们加入一个数组 然后指定该数组</c>

00:19:58.232 --> 00:20:00.567 align:middle
<c.magenta>把它们加入一个数组 然后指定该数组</c>

00:20:00.634 --> 00:20:03.203 align:middle
<c.magenta>为播放项外部元数据的属性</c>

00:20:04.638 --> 00:20:07.474 align:middle
<c.magenta>这里我直接加入了一些辅助函数</c>

00:20:07.941 --> 00:20:10.777 align:middle
<c.magenta>它们可能非常眼熟 因为与</c>

00:20:10.844 --> 00:20:12.646 align:middle
<c.magenta>Dan在幻灯片上演示给你们的相同</c>

00:20:13.247 --> 00:20:16.016 align:middle
<c.magenta>第一个函数创建封面的</c>
<c.magenta>AVMetadataItem</c>

00:20:16.149 --> 00:20:18.619 align:middle
<c.magenta>设置数据类型为JPEG</c>

00:20:19.520 --> 00:20:23.390 align:middle
<c.magenta>第二个函数为其他值类型创建</c>
<c.magenta>AVMetadataItem</c>

00:20:23.457 --> 00:20:26.460 align:middle
<c.magenta>设置扩展性语言标签为“未定义的”</c>

00:20:28.962 --> 00:20:34.902 align:middle
<c.magenta>现在 这里还有一个辅助函数</c>
<c.magenta>拿字典为参数</c>

00:20:35.269 --> 00:20:38.939 align:middle
<c.magenta>映射字典的键值对</c>

00:20:39.006 --> 00:20:43.410 align:middle
<c.magenta>来创建AVMetadataItems</c>
<c.magenta>返回一个数组的AVMetadataItems</c>

00:20:44.878 --> 00:20:47.481 align:middle
<c.magenta>现在用辅助函数</c>

00:20:47.915 --> 00:20:52.419 align:middle
<c.magenta>我们可以设置播放项的外部元数据属性</c>

00:20:52.953 --> 00:20:57.491 align:middle
<c.magenta>为刚才得到的</c>
<c.magenta>AVMetadataItems数组</c>

00:20:58.392 --> 00:21:00.527 align:middle
<c.magenta>好 我们创建了</c>
<c.magenta>AVMetadataItems</c>

00:20:58.392 --> 00:21:00.527 align:middle
<c.magenta>好 我们创建了</c>
<c.magenta>AVMetadataItems</c>

00:21:00.594 --> 00:21:02.996 align:middle
<c.magenta>把它们加到数组中 并指定该数组</c>

00:21:03.063 --> 00:21:05.432 align:middle
<c.magenta>到播放项的外部元数据属性</c>

00:21:06.934 --> 00:21:09.269 align:middle
<c.magenta>现在继续加入一些导航标记</c>

00:21:10.537 --> 00:21:12.806 align:middle
<c.magenta>这儿有一些辅助函数来帮助实现</c>

00:21:14.474 --> 00:21:17.711 align:middle
<c.magenta>第一个函数创建一个</c>
<c.magenta>AVTimedMetadataGroup</c>

00:21:17.778 --> 00:21:22.382 align:middle
<c.magenta>用标题 描述 和时间范围作参数</c>

00:21:23.817 --> 00:21:29.990 align:middle
<c.magenta>第二个用名字创建</c>
<c.magenta>AVNavigationMarkersGroup</c>

00:21:30.624 --> 00:21:33.093 align:middle
<c.magenta>和四个时间元数据组</c>

00:21:33.160 --> 00:21:35.796 align:middle
<c.magenta>代表视频内容中不同时间范围</c>

00:21:37.097 --> 00:21:39.867 align:middle
<c.magenta>现在用这些函数</c>

00:21:39.933 --> 00:21:43.237 align:middle
<c.magenta>我们可以设置导航标记组属性</c>

00:21:43.303 --> 00:21:44.471 align:middle
<c.magenta>在播放项上</c>

00:21:44.705 --> 00:21:49.576 align:middle
<c.magenta>设为一个</c>
<c.magenta>AVNavigationMarkerGroups的数组</c>

00:21:49.977 --> 00:21:52.079 align:middle
<c.magenta>命名为“附加组”</c>

00:21:53.814 --> 00:21:57.017 align:middle
<c.magenta>好 所以我们创建了</c>
<c.magenta>AVNavigationMarkersGroup</c>

00:21:57.084 --> 00:21:59.686 align:middle
<c.magenta>用一些时间元数据组和名字</c>

00:22:00.320 --> 00:22:03.090 align:middle
<c.magenta>把它加入一个数组</c>
<c.magenta>指定该数组</c>

00:22:03.156 --> 00:22:06.360 align:middle
<c.magenta>为播放项的导航标记组属性</c>

00:22:06.927 --> 00:22:09.463 align:middle
<c.magenta>让我们打包运行一下看会发生什么</c>

00:22:13.934 --> 00:22:16.236 align:middle
<c.magenta>这还是我们的播放器视图控制器</c>

00:22:16.637 --> 00:22:19.673 align:middle
<c.magenta>下划看信息标签</c>

00:22:19.873 --> 00:22:22.743 align:middle
<c.magenta>现在我们看到在元数据区域</c>
<c.magenta>所有的元数据</c>

00:22:22.809 --> 00:22:26.280 align:middle
<c.magenta>我们指定了封面和标题</c>

00:22:27.080 --> 00:22:29.116 align:middle
<c.magenta>现在如果我在底部选择</c>

00:22:29.183 --> 00:22:31.151 align:middle
<c.magenta>其中一个我们加入的导航标记</c>

00:22:31.218 --> 00:22:33.987 align:middle
<c.magenta>就可以跳到视频内容中的那个点了</c>

00:22:36.523 --> 00:22:37.925 align:middle
<c.magenta>所以只需要一点点代码</c>

00:22:37.991 --> 00:22:40.861 align:middle
<c.magenta>非常容易的就能加入</c>
<c.magenta>外部元数据和导航标记</c>

00:22:40.961 --> 00:22:43.764 align:middle
<c.magenta>为信息面板提供丰富的用户体验</c>

00:22:44.665 --> 00:22:49.803 align:middle
<c.magenta>现在我要请Dan回来讲讲tvOS中</c>
<c.magenta>AVKit框架的新API了</c>

00:22:50.437 --> 00:22:51.438 align:middle
<c.magenta>Dan</c>

00:22:55.342 --> 00:22:56.510 align:middle
<c.magenta>谢谢你 Jonathan</c>

00:23:00.814 --> 00:23:02.716 align:middle
<c.magenta>好 播放内容建议</c>

00:23:04.484 --> 00:23:08.188 align:middle
<c.magenta>播放内容建议就是</c>
<c.magenta>对接下来看什么的建议</c>

00:23:09.489 --> 00:23:12.893 align:middle
<c.magenta>你也许在最喜欢的应用里看到过</c>
<c.magenta>接下来的提示</c>

00:23:13.427 --> 00:23:16.597 align:middle
<c.magenta>比如Netflix、</c>
<c.magenta>Hulu、HBO</c>

00:23:18.432 --> 00:23:21.502 align:middle
<c.magenta>当你看到每集最后时 比如白宫风云</c>

00:23:21.935 --> 00:23:25.072 align:middle
<c.magenta>你会看到一个提示跳出来说看下一集</c>

00:23:26.240 --> 00:23:28.876 align:middle
<c.magenta>然后一直看一直看直到凌晨三点</c>

00:23:30.944 --> 00:23:34.481 align:middle
<c.magenta>许多应用在它们tvOS 9版本</c>
<c.magenta>实现了这个功能</c>

00:23:34.548 --> 00:23:37.684 align:middle
<c.magenta>这有点难搞 没别的</c>

00:23:39.620 --> 00:23:42.356 align:middle
<c.magenta>在tvOS 10</c>
<c.magenta>AVKit提供一种标准方法</c>

00:23:42.422 --> 00:23:45.993 align:middle
<c.magenta>来呈现可定制的 接下来 体验</c>

00:23:46.059 --> 00:23:48.028 align:middle
<c.magenta>我们称之为播放内容建议</c>

00:23:49.263 --> 00:23:50.731 align:middle
<c.magenta>这里有个例子</c>

00:23:52.833 --> 00:23:53.834 align:middle
<c.magenta>谢谢</c>

00:23:55.869 --> 00:23:58.539 align:middle
<c.magenta>现在你有一整个屏幕工作</c>

00:23:58.672 --> 00:24:01.341 align:middle
<c.magenta>你不受限于任何</c>

00:23:58.672 --> 00:24:01.341 align:middle
<c.magenta>你不受限于任何</c>

00:24:01.408 --> 00:24:02.776 align:middle
<c.magenta>这只是一个示例</c>

00:24:04.578 --> 00:24:06.580 align:middle
<c.magenta>在右下方 有一些元数据</c>

00:24:06.647 --> 00:24:08.382 align:middle
<c.magenta>和一些可以点击的大按钮</c>

00:24:10.217 --> 00:24:12.719 align:middle
<c.magenta>上面正播放着视频</c>

00:24:14.354 --> 00:24:18.091 align:middle
<c.magenta>这里是提议视频的缩略图</c>

00:24:21.094 --> 00:24:23.463 align:middle
<c.magenta>现在 一个播放内容建议出现了</c>

00:24:23.530 --> 00:24:26.433 align:middle
<c.magenta>通过AVContentProposal</c>
<c.magenta>类的一个对象</c>

00:24:27.034 --> 00:24:28.902 align:middle
<c.magenta>这基本上是个模范对象</c>

00:24:29.903 --> 00:24:32.272 align:middle
<c.magenta>这里有一些属性</c>

00:24:32.339 --> 00:24:34.174 align:middle
<c.magenta>我不会花很多时间在所有这些属性上</c>

00:24:34.241 --> 00:24:36.510 align:middle
<c.magenta>但我想重点讲一些重要的</c>

00:24:37.711 --> 00:24:40.013 align:middle
<c.magenta>第一个是contentTimeForTransition</c>

00:24:41.114 --> 00:24:44.484 align:middle
<c.magenta>这是在当前播放视频的时间中</c>

00:24:45.452 --> 00:24:49.289 align:middle
<c.magenta>你想让播放建议呈现给用户的时间点</c>

00:24:50.757 --> 00:24:53.126 align:middle
<c.magenta>所以如果你指定视频持续时间</c>

00:24:53.193 --> 00:24:54.695 align:middle
<c.magenta>或者0作为捷径</c>

00:24:55.963 --> 00:25:00.033 align:middle
<c.magenta>这就意味着你想让建议出现在视频的</c>
<c.magenta>最后</c>

00:24:55.963 --> 00:25:00.033 align:middle
<c.magenta>这就意味着你想让建议出现在视频的</c>
<c.magenta>最后</c>

00:25:00.701 --> 00:25:04.204 align:middle
<c.magenta>然而 如果你想呈现一个电视节目</c>
<c.magenta>或者电影之类的</c>

00:25:04.271 --> 00:25:07.307 align:middle
<c.magenta>有很长的片尾摄制人员名单</c>
<c.magenta>用户不想坐着看完</c>

00:25:07.474 --> 00:25:10.744 align:middle
<c.magenta>也许你会想要在片尾致谢名单开头</c>
<c.magenta>呈现播放建议</c>

00:25:10.811 --> 00:25:12.980 align:middle
<c.magenta>可以对应这种情况 设置属性</c>

00:25:15.048 --> 00:25:17.150 align:middle
<c.magenta>接下来 automaticAcceptanceInterval</c>
<c.magenta>属性</c>

00:25:17.851 --> 00:25:21.855 align:middle
<c.magenta>允许你设定建议超时时间</c>

00:25:23.390 --> 00:25:25.225 align:middle
<c.magenta>你可以设置比如30秒</c>

00:25:25.292 --> 00:25:28.462 align:middle
<c.magenta>这表示 如果用户什么都没做</c>

00:25:28.529 --> 00:25:32.165 align:middle
<c.magenta>不采取行为30秒 那么建议</c>

00:25:32.232 --> 00:25:35.068 align:middle
<c.magenta>就会自动被接受执行</c>

00:25:37.471 --> 00:25:38.739 align:middle
<c.magenta>如果不设置这个属性</c>

00:25:39.606 --> 00:25:43.977 align:middle
<c.magenta>那么建议会留在屏幕上直到用户采取</c>
<c.magenta>某种行动</c>

00:25:45.245 --> 00:25:49.917 align:middle
<c.magenta>标题和预览图像会成为仅有的一些信息</c>

00:25:49.983 --> 00:25:53.587 align:middle
<c.magenta>你可以提供给用户的</c>
<c.magenta>你可以 当然 也提供</c>

00:25:53.654 --> 00:25:56.523 align:middle
<c.magenta>一些多余的信息 比如：描述</c>

00:25:57.391 --> 00:26:01.562 align:middle
<c.magenta>也许是一个小工具可以设置用户评分的</c>

00:25:57.391 --> 00:26:01.562 align:middle
<c.magenta>也许是一个小工具可以设置用户评分的</c>

00:26:02.229 --> 00:26:04.831 align:middle
<c.magenta>也许是一些其他视频的建议</c>

00:26:07.434 --> 00:26:10.304 align:middle
<c.magenta>最后 用来指定建议内容的</c>

00:26:10.370 --> 00:26:12.673 align:middle
<c.magenta>是设置下条建议属性</c>

00:26:13.140 --> 00:26:15.242 align:middle
<c.magenta>在当前播放项上</c>

00:26:17.511 --> 00:26:19.680 align:middle
<c.magenta>让我们看看创建一个播放内容建议</c>

00:26:22.015 --> 00:26:23.417 align:middle
<c.magenta>好吧 这挺简单</c>

00:26:23.483 --> 00:26:25.719 align:middle
<c.magenta>先创建一个AVContentProposal的实例</c>

00:26:26.119 --> 00:26:29.590 align:middle
<c.magenta>我们要指定过渡时间属性为0</c>

00:26:30.390 --> 00:26:32.693 align:middle
<c.magenta>这意味着我们想要它在视频最后出现</c>

00:26:32.759 --> 00:26:35.495 align:middle
<c.magenta>这是个捷径 如果不知道视频时长的话</c>

00:26:35.562 --> 00:26:38.298 align:middle
<c.magenta>比如 播放项还没有载入</c>

00:26:40.200 --> 00:26:43.670 align:middle
<c.magenta>我们要设置标题和预览图</c>

00:26:43.904 --> 00:26:47.374 align:middle
<c.magenta>这个情况下 播放建议第九季第二集</c>

00:26:47.441 --> 00:26:50.577 align:middle
<c.magenta>的一部虚构电视剧集</c>
<c.magenta>叫做"狂欢万岁"</c>

00:26:54.147 --> 00:26:56.850 align:middle
<c.magenta>这个情况下我们要设置一个可选属性</c>

00:26:56.917 --> 00:26:58.418 align:middle
<c.magenta>播放建议的URL属性</c>

00:26:58.485 --> 00:27:01.255 align:middle
<c.magenta>设为这个剧集的URL</c>

00:26:58.485 --> 00:27:01.255 align:middle
<c.magenta>设为这个剧集的URL</c>

00:27:02.356 --> 00:27:03.824 align:middle
<c.magenta>为我们之后所用</c>

00:27:05.225 --> 00:27:07.361 align:middle
<c.magenta>现在把建议指派给播放项</c>

00:27:07.427 --> 00:27:08.795 align:middle
<c.magenta>就会显示这个建议了</c>

00:27:09.763 --> 00:27:12.999 align:middle
<c.magenta>当然当前播放项是第九季第一集的</c>

00:27:17.905 --> 00:27:21.341 align:middle
<c.magenta>那么 再一次 我们有三个有趣的</c>
<c.magenta>代理方法</c>

00:27:22.709 --> 00:27:24.578 align:middle
<c.magenta>ShouldPresent</c>
<c.magenta>被调用</c>

00:27:24.645 --> 00:27:28.315 align:middle
<c.magenta>在建议马上呈现给用户之前</c>

00:27:29.082 --> 00:27:31.952 align:middle
<c.magenta>现在你可以有机会返回假</c>

00:27:32.019 --> 00:27:34.588 align:middle
<c.magenta>来禁止呈现建议</c>

00:27:35.522 --> 00:27:38.225 align:middle
<c.magenta>但你也可以把它用作最后一次机会</c>

00:27:38.292 --> 00:27:40.994 align:middle
<c.magenta>再重新设置 准备呈现</c>

00:27:42.029 --> 00:27:44.231 align:middle
<c.magenta>我们马上会举个例子</c>

00:27:45.299 --> 00:27:49.636 align:middle
<c.magenta>当用户接受建议</c>
<c.magenta>就会调用didAccept方法</c>

00:27:49.703 --> 00:27:52.673 align:middle
<c.magenta>这意味着他们想要看你提议的视频</c>

00:27:53.006 --> 00:27:55.609 align:middle
<c.magenta>当超时发生时也会调用这个方法</c>

00:27:57.945 --> 00:28:01.181 align:middle
<c.magenta>didReject方法会被调用</c>
<c.magenta>当用户表示</c>

00:27:57.945 --> 00:28:01.181 align:middle
<c.magenta>didReject方法会被调用</c>
<c.magenta>当用户表示</c>

00:28:01.248 --> 00:28:03.984 align:middle
<c.magenta>他们不想看你的提议 不想看视频</c>

00:28:04.051 --> 00:28:07.421 align:middle
<c.magenta>他们想回到菜单</c>

00:28:12.259 --> 00:28:15.762 align:middle
<c.magenta>最后 你要实现展示就要</c>

00:28:15.829 --> 00:28:19.633 align:middle
<c.magenta>通过创建自定义的</c>
<c.magenta>AVContentProposalViewController子类</c>

00:28:21.435 --> 00:28:23.704 align:middle
<c.magenta>这个子类中有一些有趣的东西</c>

00:28:23.770 --> 00:28:25.772 align:middle
<c.magenta>让我们看看...两样</c>

00:28:26.373 --> 00:28:31.211 align:middle
<c.magenta>preferredPlayerViewFrame是</c>
<c.magenta>屏幕上的画面</c>

00:28:31.278 --> 00:28:34.615 align:middle
<c.magenta>你想要建议视频出现的画面位置</c>

00:28:35.749 --> 00:28:40.721 align:middle
<c.magenta>现在 基类仅返回整个屏幕的画面</c>

00:28:41.121 --> 00:28:44.191 align:middle
<c.magenta>这种情况下视频会继续填满屏幕</c>

00:28:44.925 --> 00:28:47.728 align:middle
<c.magenta>而你的建议会覆盖在那上面</c>

00:28:48.395 --> 00:28:50.531 align:middle
<c.magenta>不然你可以指定一个小点的长方形</c>

00:28:50.597 --> 00:28:52.733 align:middle
<c.magenta>也许偏移在角落之类的</c>

00:28:53.267 --> 00:28:54.968 align:middle
<c.magenta>来空出很多空间</c>

00:28:55.035 --> 00:28:57.571 align:middle
<c.magenta>控制屏幕其余部分</c>

00:29:00.841 --> 00:29:05.345 align:middle
<c.magenta>还有dismissContentProposal函数</c>
<c.magenta>指定如何打发播放内容建议</c>

00:29:05.412 --> 00:29:07.381 align:middle
<c.magenta>你可以指定三个中的一个动作：</c>

00:29:08.081 --> 00:29:12.920 align:middle
<c.magenta>接受 拒绝 和推迟</c>

00:29:12.986 --> 00:29:17.758 align:middle
<c.magenta>推迟是指用户想要隐藏建议</c>

00:29:17.858 --> 00:29:20.861 align:middle
<c.magenta>继续看片尾致谢名单这样他们能</c>

00:29:20.928 --> 00:29:22.896 align:middle
<c.magenta>我不知道</c>
<c.magenta>也许想看到自己名字</c>

00:29:22.963 --> 00:29:24.831 align:middle
<c.magenta>在名单上</c>
<c.magenta>若他们为摄制那视频工作了</c>

00:29:25.399 --> 00:29:29.970 align:middle
<c.magenta>然后正如其名 推迟 会重新出现在</c>
<c.magenta>视频结尾</c>

00:29:33.140 --> 00:29:36.276 align:middle
<c.magenta>现在让我们看看如何回应代理提醒</c>

00:29:37.711 --> 00:29:38.712 align:middle
<c.magenta>shouldPresent方法</c>

00:29:38.779 --> 00:29:41.615 align:middle
<c.magenta>在这里 我们要创建一个实例属于</c>

00:29:41.949 --> 00:29:46.119 align:middle
<c.magenta>播放建议视图控制器的自定义子类</c>

00:29:46.186 --> 00:29:49.456 align:middle
<c.magenta>且指定它为</c>
<c.magenta>播放建议视图控制器下的属性</c>

00:29:49.523 --> 00:29:51.758 align:middle
<c.magenta>在播放器视图控制器函数中</c>
<c.magenta>并且最后返回真</c>

00:29:53.594 --> 00:29:55.963 align:middle
<c.magenta>这让我们最后设置了一下</c>

00:29:56.029 --> 00:29:57.965 align:middle
<c.magenta>当我们知道确实需要它的时候</c>

00:29:58.031 --> 00:30:02.102 align:middle
<c.magenta>这么做也没有分配</c>
<c.magenta>一堆用户用不到的记忆容量</c>

00:29:58.031 --> 00:30:02.102 align:middle
<c.magenta>这么做也没有分配</c>
<c.magenta>一堆用户用不到的记忆容量</c>

00:30:04.071 --> 00:30:05.072 align:middle
<c.magenta>didAccept方法</c>

00:30:05.906 --> 00:30:08.909 align:middle
<c.magenta>这里我们要做的是替代当前播放项</c>

00:30:09.376 --> 00:30:11.178 align:middle
<c.magenta>以一个建议内容的播放项</c>

00:30:12.079 --> 00:30:14.681 align:middle
<c.magenta>非常直观</c>
<c.magenta>我们已经见过这段代码几次了</c>

00:30:15.883 --> 00:30:18.785 align:middle
<c.magenta>你会注意到这里</c>
<c.magenta>我用了URL属性</c>

00:30:18.852 --> 00:30:21.822 align:middle
<c.magenta>当我创建播放建议时设置的</c>

00:30:22.789 --> 00:30:25.359 align:middle
<c.magenta>现在 不夸张的说</c>

00:30:25.792 --> 00:30:27.761 align:middle
<c.magenta>你不需要实现这些</c>

00:30:27.828 --> 00:30:31.265 align:middle
<c.magenta>因为AVKit</c>
<c.magenta>若你在创建播放建议时提供了URL</c>

00:30:31.899 --> 00:30:33.867 align:middle
<c.magenta>AVKit会自动做完剩下的</c>

00:30:33.934 --> 00:30:36.003 align:middle
<c.magenta>如果你不实现这个代理方法</c>

00:30:39.006 --> 00:30:41.909 align:middle
<c.magenta>好 现在演示播放内容建议</c>

00:30:41.975 --> 00:30:42.809 align:middle
<c.magenta>Jonathan</c>

00:30:49.616 --> 00:30:50.484 align:middle
<c.magenta>大家好</c>

00:30:53.253 --> 00:30:54.154 align:middle
<c.magenta>好</c>

00:30:54.788 --> 00:30:57.090 align:middle
<c.magenta>我们继续讲讲AVKitPlayer</c>

00:30:57.157 --> 00:30:59.493 align:middle
<c.magenta>加入“接下来”体验</c>

00:30:59.560 --> 00:31:02.496 align:middle
<c.magenta>通过添加AVContentProposal</c>
<c.magenta>ViewController 的子类</c>

00:30:59.560 --> 00:31:02.496 align:middle
<c.magenta>通过添加AVContentProposal</c>
<c.magenta>ViewController 的子类</c>

00:31:03.730 --> 00:31:04.998 align:middle
<c.magenta>所以我们要做的第一件事</c>

00:31:05.065 --> 00:31:08.869 align:middle
<c.magenta>是创建AVContentProposal</c>
<c.magenta>ViewController 的自定义子类</c>

00:31:09.636 --> 00:31:13.140 align:middle
<c.magenta>我这里已经有一个了</c>
<c.magenta>那么我直接加到项目中</c>

00:31:20.147 --> 00:31:23.283 align:middle
<c.magenta>这是UpNextContentViewController</c>

00:31:23.750 --> 00:31:27.187 align:middle
<c.magenta>AVContentProposalViewController</c>
<c.magenta>的子类</c>

00:31:27.554 --> 00:31:30.057 align:middle
<c.magenta>这儿有一些UI属性</c>

00:31:30.123 --> 00:31:33.594 align:middle
<c.magenta>比如UIImageView</c>
<c.magenta>UILabel以及其他</c>

00:31:35.095 --> 00:31:39.766 align:middle
<c.magenta>我们覆盖了父类中preferredPlayer</c>
<c.magenta>ViewFrame 来返回所需的CGRect</c>

00:31:40.400 --> 00:31:42.536 align:middle
<c.magenta>让播放视图控制器的视图</c>

00:31:42.603 --> 00:31:45.973 align:middle
<c.magenta>活动起来的 当呈现播放建议时</c>

00:31:47.608 --> 00:31:50.010 align:middle
<c.magenta>现在 其他视图控制器仅处理</c>

00:31:50.077 --> 00:31:52.279 align:middle
<c.magenta>视图和子视图的布局</c>

00:31:52.779 --> 00:31:55.015 align:middle
<c.magenta>所以我们回到主视图控制器</c>

00:31:56.350 --> 00:31:58.352 align:middle
<c.magenta>还有两件事需要做</c>

00:31:58.452 --> 00:32:02.022 align:middle
<c.magenta>第一 创建AVContentProposal的实例</c>

00:31:58.452 --> 00:32:02.022 align:middle
<c.magenta>第一 创建AVContentProposal的实例</c>

00:32:02.322 --> 00:32:06.593 align:middle
<c.magenta>并指定它为播放项的</c>
<c.magenta>下一个播放建议属性值</c>

00:32:13.033 --> 00:32:18.205 align:middle
<c.magenta>所以 这里创建</c>
<c.magenta>AVContentProposal的实例</c>

00:32:19.072 --> 00:32:23.076 align:middle
<c.magenta>这儿有过渡时间 标题和预览图</c>

00:32:24.311 --> 00:32:26.547 align:middle
<c.magenta>我们还设置了自动接收超时时间</c>

00:32:26.613 --> 00:32:27.948 align:middle
<c.magenta>为15秒</c>

00:32:29.416 --> 00:32:33.854 align:middle
<c.magenta>另外 还设置了URL</c>
<c.magenta>和播放建议的元数据</c>

00:32:33.921 --> 00:32:36.790 align:middle
<c.magenta>和下一个播放内容的信息相吻合</c>

00:32:36.857 --> 00:32:39.359 align:middle
<c.magenta>如果用户选择接受建议的话</c>

00:32:41.094 --> 00:32:44.464 align:middle
<c.magenta>最后 我们把刚刚创建的</c>
<c.magenta>播放建议设置为</c>

00:32:44.531 --> 00:32:49.002 align:middle
<c.magenta>AVPlayerItem上的</c>
<c.magenta>下一个播放内容属性</c>

00:32:50.737 --> 00:32:53.340 align:middle
<c.magenta>这样接下来要做的</c>
<c.magenta>也是最后要做的</c>

00:32:53.407 --> 00:32:56.643 align:middle
<c.magenta>就是实现两个</c>
<c.magenta>playerViewController的代理方法</c>

00:32:57.511 --> 00:33:01.381 align:middle
<c.magenta>你可以看到这里我们把播放视图控制器</c>
<c.magenta>代理设为自己</c>

00:32:57.511 --> 00:33:01.381 align:middle
<c.magenta>你可以看到这里我们把播放视图控制器</c>
<c.magenta>代理设为自己</c>

00:33:02.616 --> 00:33:04.718 align:middle
<c.magenta>我们要实现的两个方法为</c>

00:33:04.785 --> 00:33:10.457 align:middle
<c.magenta>shouldPresentProposal和</c>
<c.magenta>didAccept</c>

00:33:12.426 --> 00:33:15.662 align:middle
<c.magenta>所以在shouldPresentProposal中</c>
<c.magenta>我们创建了一个实例</c>

00:33:15.729 --> 00:33:18.899 align:middle
<c.magenta>AVContentProposalViewController</c>
<c.magenta>的子类的实例</c>

00:33:19.566 --> 00:33:20.834 align:middle
<c.magenta>并指定该实例为</c>

00:33:20.901 --> 00:33:24.538 align:middle
<c.magenta>playerViewController下的</c>
<c.magenta>contentProposalViewController</c>

00:33:25.639 --> 00:33:27.140 align:middle
<c.magenta>另外 我们返回真</c>

00:33:27.207 --> 00:33:30.277 align:middle
<c.magenta>来表明是否要呈现播放建议</c>

00:33:32.112 --> 00:33:34.314 align:middle
<c.magenta>最后 在didAccept中</c>

00:33:34.781 --> 00:33:38.151 align:middle
<c.magenta>我们需要处理从当前播放项</c>
<c.magenta>到下一个的过渡</c>

00:33:38.919 --> 00:33:39.920 align:middle
<c.magenta>为了完成这个</c>

00:33:40.120 --> 00:33:44.224 align:middle
<c.magenta>我们从播放建议中获取URL</c>

00:33:45.058 --> 00:33:47.794 align:middle
<c.magenta>从URL创建</c>
<c.magenta>AVPlayerItem</c>

00:33:48.395 --> 00:33:51.732 align:middle
<c.magenta>然后仅仅用我们的播放项替代当前项</c>

00:33:52.799 --> 00:33:53.700 align:middle
<c.magenta>就完成了</c>

00:33:54.168 --> 00:33:56.069 align:middle
<c.magenta>让我们打包运行看看怎么样</c>

00:34:04.011 --> 00:34:07.047 align:middle
<c.magenta>那么我直接跳到接近结尾的地方</c>

00:34:15.054 --> 00:34:17.524 align:middle
<c.magenta>这是我们的播放建议</c>

00:34:17.958 --> 00:34:20.527 align:middle
<c.magenta>正如你看到的</c>
<c.magenta>元数据正如我们规定的</c>

00:34:20.594 --> 00:34:22.629 align:middle
<c.magenta>有预览图还有标题</c>

00:34:23.163 --> 00:34:24.598 align:middle
<c.magenta>如果这里我选择播放下一个</c>

00:34:26.867 --> 00:34:28.869 align:middle
<c.magenta>就会过渡到下个播放项</c>

00:34:32.739 --> 00:34:35.576 align:middle
<c.magenta>所以我认为 如果你在tvOS 9上</c>
<c.magenta>实现了这些功能</c>

00:34:35.641 --> 00:34:37.311 align:middle
<c.magenta>你会很高兴使用这个API</c>

00:34:37.377 --> 00:34:39.545 align:middle
<c.magenta>你会发现这个很好用</c>

00:34:40.347 --> 00:34:41.715 align:middle
<c.magenta>我要邀请Dan回来上台</c>

00:34:41.782 --> 00:34:43.984 align:middle
<c.magenta>讲讲AVKit怎样最好地实践</c>

00:34:52.525 --> 00:34:55.027 align:middle
<c.magenta>好 最好的实践</c>

00:34:58.866 --> 00:35:02.269 align:middle
<c.magenta>我要讲一些事：该做的 和该避免的事</c>

00:34:58.866 --> 00:35:02.269 align:middle
<c.magenta>我要讲一些事：该做的 和该避免的事</c>

00:35:04.638 --> 00:35:07.708 align:middle
<c.magenta>第一 我们推荐你做的一些事</c>

00:35:09.309 --> 00:35:13.380 align:middle
<c.magenta>再说一次表现方法</c>
<c.magenta>或者表现播放控制器</c>

00:35:13.447 --> 00:35:15.749 align:middle
<c.magenta>可以处理从内联视图自动放大的动画</c>

00:35:15.816 --> 00:35:18.418 align:middle
<c.magenta>所以没有理由实现你自己的动画</c>

00:35:21.088 --> 00:35:24.157 align:middle
<c.magenta>第二 记得播放控制只有在全屏时</c>
<c.magenta>才可交互</c>

00:35:25.559 --> 00:35:28.362 align:middle
<c.magenta>第三 用新的播放建议API</c>

00:35:28.996 --> 00:35:31.965 align:middle
<c.magenta>你们中的一些人之前编写过更难的方式</c>

00:35:32.032 --> 00:35:34.868 align:middle
<c.magenta>我们鼓励你换到新的方式</c>

00:35:35.068 --> 00:35:37.104 align:middle
<c.magenta>我认为你会发现代码简单很多</c>

00:35:37.171 --> 00:35:38.639 align:middle
<c.magenta>很容易理解代码思路</c>

00:35:38.705 --> 00:35:42.976 align:middle
<c.magenta>而且你可以避免一些故障或者</c>
<c.magenta>其他碰到的问题</c>

00:35:43.043 --> 00:35:45.179 align:middle
<c.magenta>当你们之前试图让它完美运作时</c>

00:35:48.415 --> 00:35:53.287 align:middle
<c.magenta>还有注意到playerItem中</c>
<c.magenta>播放器的error属性</c>

00:35:53.587 --> 00:35:56.456 align:middle
<c.magenta>这就是你怎样在播放控制中发现错误的</c>

00:35:58.258 --> 00:36:00.928 align:middle
<c.magenta>我马上要讲一个特别的错误</c>

00:35:58.258 --> 00:36:00.928 align:middle
<c.magenta>我马上要讲一个特别的错误</c>

00:36:00.994 --> 00:36:03.130 align:middle
<c.magenta>需要处理</c>
<c.magenta>但你们应该还要注意任何错误</c>

00:36:03.197 --> 00:36:06.333 align:middle
<c.magenta>发生以及用户反馈的</c>

00:36:09.336 --> 00:36:11.104 align:middle
<c.magenta>好 现在有一些要避免的</c>

00:36:12.005 --> 00:36:14.374 align:middle
<c.magenta>避免开关</c>
<c.magenta>showsPlaybackControls</c>

00:36:15.242 --> 00:36:19.179 align:middle
<c.magenta>这个属性不是用来暂时显示或隐藏</c>
<c.magenta>播放控制的</c>

00:36:19.246 --> 00:36:22.516 align:middle
<c.magenta>这是用来表示你永久的意愿</c>

00:36:22.583 --> 00:36:25.052 align:middle
<c.magenta>如果把它设为假 就是在说</c>

00:36:25.586 --> 00:36:28.488 align:middle
<c.magenta>我们一点儿都不需要播放控制</c>

00:36:29.056 --> 00:36:32.259 align:middle
<c.magenta>所以如果你来回开关这个属性就是在</c>
<c.magenta>告诉AVKit</c>

00:36:32.326 --> 00:36:33.961 align:middle
<c.magenta>来毁灭所有控制 重新创造它们</c>

00:36:34.027 --> 00:36:35.529 align:middle
<c.magenta>毁灭它们 再造它们</c>

00:36:35.629 --> 00:36:38.632 align:middle
<c.magenta>你可以想象这不太有效率</c>

00:36:39.766 --> 00:36:42.903 align:middle
<c.magenta>第二 有些人讨厌这点</c>

00:36:42.970 --> 00:36:45.305 align:middle
<c.magenta>但避免加入补充手势来操控</c>

00:36:45.372 --> 00:36:48.775 align:middle
<c.magenta>因为这会混淆用户</c>
<c.magenta>人们不会发现这些手势的</c>

00:36:49.643 --> 00:36:50.644 align:middle
<c.magenta>同样的</c>

00:36:50.711 --> 00:36:54.848 align:middle
<c.magenta>不要过份超载选择键和触摸服务手势</c>

00:36:55.616 --> 00:36:59.386 align:middle
<c.magenta>不仅因为这会混淆用户</c>
<c.magenta>也有可能会在未来弄坏它</c>

00:37:03.056 --> 00:37:06.193 align:middle
<c.magenta>现在讲些一般的建议</c>

00:37:06.260 --> 00:37:08.795 align:middle
<c.magenta>替换资源</c>
<c.magenta>如果你看到这个错误：</c>

00:37:08.862 --> 00:37:11.431 align:middle
<c.magenta>AVErrorMediaServicesWereReset</c>

00:37:12.699 --> 00:37:14.034 align:middle
<c.magenta>如果你没有作出回应</c>

00:37:14.101 --> 00:37:16.904 align:middle
<c.magenta>媒体服务会在播放时重置</c>

00:37:18.172 --> 00:37:19.606 align:middle
<c.magenta>视频播放会失败</c>

00:37:20.541 --> 00:37:24.344 align:middle
<c.magenta>用户也做不了任何事除了</c>
<c.magenta>希望是 退出</c>

00:37:24.444 --> 00:37:27.748 align:middle
<c.magenta>所以他们必须做的是退出</c>
<c.magenta>回到菜单再点进视频</c>

00:37:27.915 --> 00:37:31.485 align:middle
<c.magenta>如果你捕获这个错误</c>
<c.magenta>自动替换资源</c>

00:37:31.552 --> 00:37:34.888 align:middle
<c.magenta>播放项和播放器基本上是你</c>
<c.magenta>AVFoundation的所有对象</c>

00:37:35.389 --> 00:37:38.258 align:middle
<c.magenta>然后你就能更天衣无缝的处理这个情况</c>

00:37:38.325 --> 00:37:40.994 align:middle
<c.magenta>用户根本不会发现发生了什么</c>

00:37:42.829 --> 00:37:45.599 align:middle
<c.magenta>现在 其他一些演讲讲的播放控制</c>
<c.magenta>最好的实践</c>

00:37:45.666 --> 00:37:49.136 align:middle
<c.magenta>包括今年的AVFoundation</c>
<c.magenta>播放系统的发展</c>

00:37:49.503 --> 00:37:53.273 align:middle
<c.magenta>那个演讲在这周早些时候</c>
<c.magenta>你们可在 WWDC 应用里看到视频</c>

00:37:54.374 --> 00:37:57.110 align:middle
<c.magenta>两年前曾有一个杰出的演讲</c>

00:37:57.311 --> 00:37:59.112 align:middle
<c.magenta>精通现代媒体播放</c>

00:37:59.179 --> 00:38:02.349 align:middle
<c.magenta>演讲包括了AVKit和</c>
<c.magenta>AVFoundation的窍门</c>

00:37:59.179 --> 00:38:02.349 align:middle
<c.magenta>演讲包括了AVKit和</c>
<c.magenta>AVFoundation的窍门</c>

00:38:02.416 --> 00:38:04.251 align:middle
<c.magenta>让它们很好地合作</c>

00:38:06.653 --> 00:38:12.326 align:middle
<c.magenta>所以总的来说</c>
<c.magenta>AVKit提供优秀的播放控制</c>

00:38:12.392 --> 00:38:15.696 align:middle
<c.magenta>来支持遥控器 游戏控制器和Siri</c>

00:38:16.530 --> 00:38:20.567 align:middle
<c.magenta>能完全控制媒体栈</c>
<c.magenta>强大的API</c>

00:38:21.101 --> 00:38:22.769 align:middle
<c.magenta>而且非常容易上手</c>

00:38:23.504 --> 00:38:26.874 align:middle
<c.magenta>确保查看示例代码看一些更深入的例子</c>

00:38:27.274 --> 00:38:28.809 align:middle
<c.magenta>我们期待看到你们的应用</c>

00:38:29.610 --> 00:38:31.912 align:middle
<c.magenta>要看更多信息 可以去屏幕上的URL</c>

00:38:31.979 --> 00:38:35.382 align:middle
<c.magenta>我们会有指向示例代码</c>
<c.magenta>和其他资源的链接</c>

00:38:37.317 --> 00:38:39.186 align:middle
<c.magenta>还有看看其他相关的演讲</c>

00:38:39.253 --> 00:38:43.156 align:middle
<c.magenta>我们还有HTTP流媒体传输的会话</c>

00:38:43.223 --> 00:38:44.691 align:middle
<c.magenta>在这周早些时候</c>

00:38:44.758 --> 00:38:47.127 align:middle
<c.magenta>还有两个演讲关于使用TVMLKit</c>

00:38:47.194 --> 00:38:51.465 align:middle
<c.magenta>这也是一种直接使用</c>
<c.magenta>AVKit的替代方法</c>

00:38:53.367 --> 00:38:54.268 align:middle
<c.magenta>那么 谢谢各位</c>
