WEBVTT

00:00:19.319 --> 00:00:25.559
介绍通知

00:00:26.293 --> 00:00:27.361
大家早上好

00:00:27.427 --> 00:00:30.464
欢迎来到我们的演讲
介绍通知

00:00:30.831 --> 00:00:34.101
我是Kritarth Jain
iOS通知组的工程师

00:00:34.168 --> 00:00:37.905
今天我的同事Julien会在
这个演讲的下半部分加入我

00:00:38.238 --> 00:00:41.241
这个组在去年工作得很努力

00:00:41.308 --> 00:00:45.012
来给你们一个优秀的iOS 10通知

00:00:45.212 --> 00:00:47.714
我们很高兴今天可以和你分享这些

00:00:49.082 --> 00:00:52.753
我们会从对通知做一个概览开始

00:00:53.387 --> 00:00:57.925
今天我们有一个全新的框架用来
进行用户通知

00:00:58.525 --> 00:01:01.662
作为它的一部分 我们会覆盖注册

00:00:58.525 --> 00:01:01.662
作为它的一部分 我们会覆盖注册

00:01:01.895 --> 00:01:05.132
创建内容 为通知排期

00:01:05.399 --> 00:01:09.036
管理它们 和通知上的行动处理

00:01:10.103 --> 00:01:13.473
最后 我们要介绍一个新的功能

00:01:13.540 --> 00:01:17.010
叫做服务扩展
我们认为你会很喜欢它

00:01:18.178 --> 00:01:21.849
但有更多关于iOS 10的通知要谈

00:01:22.149 --> 00:01:24.284
我们不会在这次演讲中涉及到所有

00:01:24.551 --> 00:01:26.687
将有一个高级通知演讲

00:01:26.753 --> 00:01:29.223
在这个之后
就在这间屋子里

00:01:29.389 --> 00:01:30.858
所以请一定要观看

00:01:31.959 --> 00:01:34.962
我们从谈谈用户通知开始

00:01:35.762 --> 00:01:39.132
现在我很确定你们都对通知是什么
样子的很熟悉

00:01:39.399 --> 00:01:42.603
这是你的应用如何发送信息

00:01:42.669 --> 00:01:45.506
给你的用户
当你的应用不在前台时

00:01:46.340 --> 00:01:48.775
这是一个发送信息的push机制

00:01:48.842 --> 00:01:50.210
相比pull机制

00:01:50.277 --> 00:01:53.714
你的用户主动进入应用

00:01:53.780 --> 00:01:55.649
来获得内容或信息

00:01:57.451 --> 00:01:58.552
你做为应用开发者

00:01:58.919 --> 00:02:02.155
有不同的方式来将这些通知发送给用户

00:01:58.919 --> 00:02:02.155
有不同的方式来将这些通知发送给用户

00:02:03.257 --> 00:02:04.791
他们可以是视觉警告

00:02:04.858 --> 00:02:07.694
通知作为一个横幅从顶部滚下来

00:02:08.195 --> 00:02:11.665
你可以给通知关联声音和震动警告

00:02:11.832 --> 00:02:13.700
以及给应用图标加角标

00:02:13.767 --> 00:02:17.337
这样用户知道哪个应用有可用数据

00:02:18.939 --> 00:02:20.874
根据用户的语境

00:02:20.941 --> 00:02:23.477
他们如何看到通知有不同的方法

00:02:24.144 --> 00:02:27.948
如果设备解锁了
通知作为一个横幅从顶部滚下来

00:02:28.949 --> 00:02:30.884
当设备锁定时
通知

00:02:30.951 --> 00:02:32.986
在用户的锁屏上显示

00:02:33.820 --> 00:02:36.123
如果用户错过了这些通知

00:02:36.190 --> 00:02:38.158
他们可以进入Notification Center

00:02:38.225 --> 00:02:41.261
并且看到所有未读通知
在那里等待他们

00:02:42.296 --> 00:02:44.831
所以有哪些不同种类的通知

00:02:44.898 --> 00:02:48.635
作为一个应用开发者你可以用来
发送通知？

00:02:48.902 --> 00:02:50.470
主要有两种

00:02:50.537 --> 00:02:53.073
本地通知和远程通知

00:02:53.140 --> 00:02:55.175
根据它们的来源

00:02:55.375 --> 00:02:57.544
让我们分别看看它们

00:02:58.245 --> 00:02:59.913
现在是本地通知

00:02:59.980 --> 00:03:03.350
这些被设备上的应用使用

00:02:59.980 --> 00:03:03.350
这些被设备上的应用使用

00:03:04.084 --> 00:03:06.053
本地通知的使用例子

00:03:06.119 --> 00:03:08.622
基于时间或位置的触发器

00:03:08.689 --> 00:03:11.992
你的应用和系统排期这些通知

00:03:12.059 --> 00:03:14.228
在用户的设备上显示通知

00:03:14.461 --> 00:03:16.763
当用户处理这些通知时

00:03:16.830 --> 00:03:18.832
你的应用被回调

00:03:20.100 --> 00:03:23.670
我提到过 例子可以包括
任务提醒警告

00:03:23.737 --> 00:03:26.273
日历警告 或者基于位置的触发器

00:03:27.508 --> 00:03:31.745
现在不是你的所有应用都包括在
用户的设备上

00:03:32.145 --> 00:03:34.848
很多还有服务器端的部分

00:03:34.915 --> 00:03:39.386
你的服务器端应用位于穿过网络
的你的服务器上

00:03:39.786 --> 00:03:44.224
要方便这样的通知我们有远程通知

00:03:44.324 --> 00:03:46.860
让我们看看远程通知是怎么工作的

00:03:47.661 --> 00:03:51.999
本次交换中包括的主要部分
是Apple Push通知服务

00:03:52.065 --> 00:03:53.534
或者简写为APNs

00:03:54.201 --> 00:03:56.003
这是远程通知的一部分

00:03:56.303 --> 00:04:00.140
你的远程应用发送通知负载给APNs

00:03:56.303 --> 00:04:00.140
你的远程应用发送通知负载给APNs

00:04:00.207 --> 00:04:04.711
接下来APNs尽最大努力把通知
发送到用户设备上

00:04:04.778 --> 00:04:08.515
向他们显示通知并且转发给用来
处理的应用

00:04:08.582 --> 00:04:10.150
当用户操作它时

00:04:11.418 --> 00:04:14.621
远程通知的例子是news警告

00:04:14.688 --> 00:04:17.591
当你的服务器端获得了最新的

00:04:17.658 --> 00:04:20.861
爆炸新闻并转发这些通知

00:04:20.928 --> 00:04:23.463
给不同设备
向所有客户

00:04:23.530 --> 00:04:26.733
安装了你的应用在他们的设备上
的客户

00:04:27.334 --> 00:04:31.104
即时消息警告也是 数据库被管理
在你自己的服务器上

00:04:31.171 --> 00:04:34.208
当一条新消息到达时
你传递通知

00:04:34.274 --> 00:04:35.509
到用户设备上

00:04:37.010 --> 00:04:41.014
现在远程通知有两个不同的部分

00:04:41.081 --> 00:04:43.951
可以是面向用户的或静默更新

00:04:44.017 --> 00:04:47.020
面向用户通知就像它的名字所暗示的

00:04:47.087 --> 00:04:50.023
在设备上显示给用户

00:04:50.190 --> 00:04:53.627
通过正确的设定通知负载

00:04:53.694 --> 00:04:56.663
你可以添加显示给用户的内容

00:04:57.464 --> 00:05:02.369
与面向用户的通知相对照
我们还提供静默更新通知

00:04:57.464 --> 00:05:02.369
与面向用户的通知相对照
我们还提供静默更新通知

00:05:04.204 --> 00:05:06.940
这个静默更新通知工作

00:05:07.007 --> 00:05:10.844
当你的通知负载包括内容可用标志

00:05:11.378 --> 00:05:13.881
当设备收到这条通知时

00:05:13.947 --> 00:05:17.251
系统知道在后台唤醒你的应用

00:05:17.317 --> 00:05:19.253
来进行后台应用刷新

00:05:19.319 --> 00:05:22.990
你的客户端应用会联系

00:05:23.056 --> 00:05:24.992
你的远程服务器应用

00:05:25.058 --> 00:05:27.327
来获得最新的可用内容

00:05:27.394 --> 00:05:30.497
下一次用户来到设备

00:05:30.564 --> 00:05:33.934
他们将看到最新的信息

00:05:34.001 --> 00:05:36.303
给他们一个很好的用户体验

00:05:38.272 --> 00:05:41.008
这就是对这两种不同通知的概括

00:05:41.074 --> 00:05:43.243
你可以使用的通知的种类

00:05:43.410 --> 00:05:46.246
现在在我们往下之前
让我们做一个快速回顾

00:05:46.313 --> 00:05:49.883
iOS上已有的通知API

00:05:51.185 --> 00:05:55.155
你用UI应用来注册你的应用

00:05:55.222 --> 00:05:58.792
然后排期你的应用想要发送的通知

00:05:58.959 --> 00:06:02.963
这是UIKit框架的一部分
我确定你们大部分都很熟悉

00:05:58.959 --> 00:06:02.963
这是UIKit框架的一部分
我确定你们大部分都很熟悉

00:06:03.430 --> 00:06:06.834
然而现在已有的API有一些问题

00:06:06.900 --> 00:06:09.736
比如对本地

00:06:09.803 --> 00:06:13.273
和远程通知有不同的回调
这有可能造成重复代码

00:06:14.741 --> 00:06:16.343
并且只有有限的控制

00:06:16.410 --> 00:06:20.180
当你的应用已经发送通知给用户之后

00:06:21.281 --> 00:06:22.983
并且有不同的支持

00:06:23.050 --> 00:06:26.720
针对Apple目前支持的
不同平台上的通知

00:06:27.955 --> 00:06:31.325
所以我们很想解决这个问题
并且

00:06:31.391 --> 00:06:34.795
除此之外给你们提供一些很棒的
新功能

00:06:34.862 --> 00:06:38.498
来提升你的应用用户的通知体验

00:06:38.866 --> 00:06:42.769
今天我们很高兴地宣布一个新的
框架

00:06:42.836 --> 00:06:44.571
来进行用户通知

00:06:45.072 --> 00:06:47.808
让我们看看这个新的框架包括什么

00:06:48.475 --> 00:06:51.512
首先它有一个熟悉的API

00:06:51.578 --> 00:06:54.014
和目前已经存在的API有同样的功能

00:06:54.181 --> 00:06:56.683
所以把你的代码从已有API转移到

00:06:56.750 --> 00:06:58.986
新的框架很容易

00:07:00.220 --> 00:07:04.358
我们还扩展了你可以在通知上设置
的内容选项

00:07:04.424 --> 00:07:07.261
来发送更丰富的通知给你的用户

00:07:08.328 --> 00:07:11.999
我们把处理本地和远程通知的代码
整合在了一起

00:07:12.065 --> 00:07:15.102
所以你只需要更少的代码来处理通知

00:07:21.108 --> 00:07:23.377
我们还简化了委托方法

00:07:23.443 --> 00:07:26.079
这是你的应用

00:07:26.146 --> 00:07:28.348
当用户在通知上与动作互动时获得的

00:07:29.917 --> 00:07:32.553
我们还包括了更好的通知管理

00:07:32.619 --> 00:07:36.290
这表明你的应用现在可以访问通知

00:07:36.356 --> 00:07:39.960
不论是将要发送还是已经发送给
用户

00:07:40.027 --> 00:07:43.130
允许你删除和更新通知

00:07:43.197 --> 00:07:46.133
我们会在这次演讲中看看所有
这些方面的更多细节

00:07:47.401 --> 00:07:50.404
从iOS 10开始我们允许你的应用

00:07:50.470 --> 00:07:53.140
来对通知进行应用内的展示

00:07:56.677 --> 00:08:00.447
现在你的应用获得了完全相同的
外观和感受

00:07:56.677 --> 00:08:00.447
现在你的应用获得了完全相同的
外观和感受

00:08:00.514 --> 00:08:03.283
因为系统对你的应用提供支持

00:08:05.819 --> 00:08:09.723
你现在可以对扩展排期和处理通知

00:08:13.560 --> 00:08:15.729
最后我们添加了扩展指向

00:08:15.796 --> 00:08:18.966
通知它本身
但是我会在稍后介绍更多

00:08:20.300 --> 00:08:22.469
这个新框架还允许我们

00:08:22.536 --> 00:08:26.373
在不同平台上都有单一的通知API

00:08:26.440 --> 00:08:30.878
Apple支持的平台 包括iOS
watchOS和tvOS

00:08:31.712 --> 00:08:35.414
让我们看看这对不同平台都意味着
什么

00:08:37.116 --> 00:08:40.220
在iOS上我们完整的支持管理

00:08:40.287 --> 00:08:43.390
排期新框架支持的通知

00:08:43.957 --> 00:08:48.028
在watchOS上我们继续已有的
对转发通知的支持

00:08:48.095 --> 00:08:50.664
从用户的设备到他们的Watch

00:08:50.931 --> 00:08:54.735
但是从watchOS 3开始
我们让你的WatchOS应用

00:08:54.801 --> 00:08:57.604
在Watch本身上进行本地通知

00:08:57.971 --> 00:08:59.373
这表示

00:09:01.775 --> 00:09:05.579
你的Watch不需要连接你的设备

00:09:05.646 --> 00:09:08.148
而你的应用还是可以进行通知

00:09:08.315 --> 00:09:11.185
比如你有健身应用

00:09:11.251 --> 00:09:12.920
你的应用的用户

00:09:12.986 --> 00:09:16.156
出去健身 忘记了带设备

00:09:16.223 --> 00:09:18.125
你仍然可以发送通知给他们

00:09:18.192 --> 00:09:20.961
当他们达到目标或者健身时间时

00:09:21.028 --> 00:09:22.496
就在Watch自己上

00:09:23.397 --> 00:09:26.633
关于更多在WatchOS进行通知

00:09:26.700 --> 00:09:29.403
我们有“WatchOS
快速互动技巧”的演讲

00:09:30.804 --> 00:09:33.040
继续 对tvOS

00:09:33.674 --> 00:09:39.413
我们现在支持给应用图标加角标
为本地和远程通知

00:09:40.047 --> 00:09:42.316
这可以被不同方式利用
比如

00:09:42.382 --> 00:09:44.685
如果你的应用想让用户知道

00:09:44.751 --> 00:09:46.787
他们没看的集数

00:09:46.854 --> 00:09:49.189
你可以在应用图标上加角标显示
这个数字

00:09:49.590 --> 00:09:51.291
或者对一个回合制的游戏

00:09:51.425 --> 00:09:53.493
如果用户有一个在等待的回合

00:09:53.560 --> 00:09:56.964
给应用图标加角标让用户知道
有一个回合在等待他们

00:10:01.468 --> 00:10:05.272
这是这个新框架允许你干什么的概览

00:10:05.439 --> 00:10:08.208
在Apple的所有不同平台上

00:10:09.743 --> 00:10:13.514
让我们继续深入iOS上的通知

00:10:14.848 --> 00:10:18.185
你的应用是如何发送这些通知

00:10:18.252 --> 00:10:20.287
给用户的设备使他们能够看到？

00:10:20.954 --> 00:10:23.056
在你能够这样做之前

00:10:23.257 --> 00:10:27.060
第一步是你的应用需要注册

00:10:27.661 --> 00:10:29.897
让我们看看注册是什么意思

00:10:31.365 --> 00:10:34.501
通知是对用户的打断

00:10:34.568 --> 00:10:37.237
所以很重要的事是你获得用户的
授权

00:10:37.304 --> 00:10:40.174
和许可
在你发送通知给他们之前

00:10:40.240 --> 00:10:44.144
所以你可以要求许可来进行
横幅 声音警告

00:10:44.211 --> 00:10:47.147
或者给应用图标加角标
你第一次这么做时

00:10:47.214 --> 00:10:49.449
你的用户收到有这样消息的提示

00:10:50.317 --> 00:10:54.388
你需要为本地和远程通知进行注册

00:10:55.589 --> 00:10:58.692
在代码里进行注册容易得只要

00:10:58.759 --> 00:11:00.561
调用requestAuthorization

00:10:58.759 --> 00:11:00.561
调用requestAuthorization

00:11:00.627 --> 00:11:04.498
在和你的应用关联的
UNUserNotificationCenter对象上

00:11:04.565 --> 00:11:06.200
传递给它正确的参数

00:11:06.266 --> 00:11:07.968
你想要为什么注册

00:11:10.003 --> 00:11:13.173
然而请注意现在用户允许的设置

00:11:13.240 --> 00:11:16.343
是在设置菜单里对每个应用高度
可配置的

00:11:16.410 --> 00:11:18.846
所以你的应用用户总是可以回去

00:11:19.079 --> 00:11:21.715
将它们打开或关闭
取决于他们的偏好

00:11:22.916 --> 00:11:24.718
在iOS 10我们给你能力

00:11:24.785 --> 00:11:27.521
在你的应用中访问用户设置

00:11:27.588 --> 00:11:29.690
所以你可以在通知上更聪明

00:11:29.756 --> 00:11:32.659
根据他们的偏好
在你想要发送给用户的通知上

00:11:37.965 --> 00:11:40.067
但是注册并不就此结束

00:11:40.133 --> 00:11:43.804
对于远程通知还有一步令牌注册

00:11:43.871 --> 00:11:47.341
用UIApplication
已有的API

00:11:47.608 --> 00:11:49.910
你要注册远程通知

00:11:50.344 --> 00:11:54.515
你需要网络连接这样系统可以和
APNs联系

00:11:54.581 --> 00:11:57.584
为这次注册 为你的设备和你的应用

00:11:58.085 --> 00:12:00.921
这个令牌返回给你的客户端应用

00:11:58.085 --> 00:12:00.921
这个令牌返回给你的客户端应用

00:12:00.988 --> 00:12:04.057
然后你需要把它转发给你的
服务器端应用

00:12:04.124 --> 00:12:07.194
这很重要因为这个令牌需要被
包括

00:12:07.261 --> 00:12:09.229
做为通知负载的一部分

00:12:09.296 --> 00:12:12.466
你的远程应用发送给你的APNs

00:12:12.533 --> 00:12:16.537
因为令牌的作用是作为键
识别你的设备

00:12:16.603 --> 00:12:19.706
和想要发送通知到的应用

00:12:21.375 --> 00:12:22.709
这就是注册

00:12:22.776 --> 00:12:26.747
现在你的应用已经准备好开始
发送通知给用户

00:12:26.813 --> 00:12:28.715
这之后你要做的第一件事

00:12:28.782 --> 00:12:31.451
是创建这个通知的内容

00:12:33.253 --> 00:12:36.423
我确信你们都看过了全新的通知
的外观

00:12:36.490 --> 00:12:38.425
我们在iOS 10中引入的通知

00:12:38.492 --> 00:12:41.528
我们对它们允许你们做的事感到
很兴奋

00:12:42.296 --> 00:12:45.299
我们从显示你的通知的标题开始

00:12:45.399 --> 00:12:47.100
在所有iOS通知中

00:12:51.338 --> 00:12:53.841
我们还为副标题包括了另一个域

00:12:53.907 --> 00:12:57.778
所以你可以更灵活地
发送不同信息给用户

00:12:57.845 --> 00:13:00.280
当然 有内容主体

00:12:57.845 --> 00:13:00.280
当然 有内容主体

00:13:01.281 --> 00:13:03.917
让我们看看怎么在代码中设置这些

00:13:05.152 --> 00:13:09.189
只要简单地创建
UNmutableNotificationContent对象

00:13:09.256 --> 00:13:12.059
并设置它的不同属性
就是这些

00:13:13.060 --> 00:13:15.429
对远程通知 这很相似

00:13:15.596 --> 00:13:18.131
你的通知负载的结构是像这样的

00:13:18.198 --> 00:13:21.001
再一次你设置负载的不同属性

00:13:21.068 --> 00:13:23.971
在发送给APNs前

00:13:25.372 --> 00:13:27.074
但是对于内容还没有完

00:13:27.140 --> 00:13:30.477
我们决定再进行一步
从iOS 10开始

00:13:30.544 --> 00:13:35.315
我们允许所有应用在通知中附加
媒体

00:13:39.720 --> 00:13:41.522
所以你可以有更丰富的

00:13:41.588 --> 00:13:44.024
更五彩缤纷的通知使你的用户看到

00:13:44.992 --> 00:13:47.928
关于更多媒体附件
我们会进行介绍

00:13:47.995 --> 00:13:50.731
在怎样在高级通知中设置这些
的演讲中

00:13:52.599 --> 00:13:54.234
这样你的内容就已经准备好了

00:13:54.768 --> 00:13:58.839
你的应用要做的下件事是判断它
什么时候想要发送这条通知

00:13:58.906 --> 00:14:00.941
因此有触发器

00:13:58.906 --> 00:14:00.941
因此有触发器

00:14:02.342 --> 00:14:05.746
在iOS 10中我们支持不同的触发器
主要是push

00:14:05.812 --> 00:14:08.949
时间间隔 日历和基于位置的触发器

00:14:10.217 --> 00:14:14.421
push触发器是远程通知独有的

00:14:14.488 --> 00:14:17.758
当你的远端通知发送通知给APNs

00:14:17.824 --> 00:14:20.727
它和关联的push触发器一起到达
设备

00:14:21.128 --> 00:14:24.865
其他的触发器都是和本地通知
关联的

00:14:27.334 --> 00:14:30.003
基于时间间隔的触发器允许你安排

00:14:30.070 --> 00:14:33.073
一个离现在特定时间的通知

00:14:33.140 --> 00:14:36.777
比如 如果你想要从现在起2分钟
后发送通知

00:14:36.844 --> 00:14:39.980
或者从现在开始每小时发送一次

00:14:40.480 --> 00:14:42.816
这还允许你马上发送通知

00:14:42.883 --> 00:14:44.651
通过把时间间隔设置成0

00:14:46.486 --> 00:14:49.723
与基于时间间隔的触发器对照的是
基于日历的触发器

00:14:49.790 --> 00:14:53.961
它允许你设定
一个未来特定的日期和时间发送通知

00:14:54.061 --> 00:14:57.531
这样你就有更多控制来设定
通知发送的准确时间

00:14:58.098 --> 00:15:01.201
这个的例子是在明早的特定时间

00:14:58.098 --> 00:15:01.201
这个的例子是在明早的特定时间

00:15:01.268 --> 00:15:04.471
或者在每个星期某天的某个时刻
重复

00:15:06.106 --> 00:15:08.909
最后一种触发器
我们有基于位置的触发器

00:15:08.976 --> 00:15:11.411
使用你设备的绝对位置

00:15:11.478 --> 00:15:14.314
或者和蓝牙灯塔的相对位置

00:15:14.414 --> 00:15:17.584
来判断你的设备是否正在进入
或离开一个区域

00:15:17.651 --> 00:15:19.520
你可以发送通知给用户

00:15:19.953 --> 00:15:23.290
一个例子是当用户离开家时

00:15:23.357 --> 00:15:25.459
设备离开邻近区域

00:15:25.526 --> 00:15:27.528
或者说用户在杂货店

00:15:27.594 --> 00:15:30.464
你的应用想发送一个打折的优惠券

00:15:31.765 --> 00:15:35.569
这就是不同的触发器
做为新框架的一部分

00:15:36.069 --> 00:15:37.704
现在你的内容已经准备好了

00:15:37.771 --> 00:15:39.973
你知道你什么时候想要发送通知

00:15:40.040 --> 00:15:43.510
剩下的下一步是和系统为这个通知
排期

00:15:44.945 --> 00:15:49.216
对本地通知只需简单地调用增加
请求

00:15:49.283 --> 00:15:51.552
在UNUserNotificationCenter对象上

00:15:51.919 --> 00:15:53.353
然后在触发器上

00:15:53.420 --> 00:15:56.123
系统向用户显示通知

00:15:56.790 --> 00:15:58.625
对远程通知

00:16:00.127 --> 00:16:03.363
你服务器端的应用传送负载给APNs

00:16:03.430 --> 00:16:05.966
APNs尽力把通知发送到

00:16:06.033 --> 00:16:07.434
用户的设备上

00:16:08.368 --> 00:16:11.939
让我们归纳一下目前为止我们
讨论过的发送机制

00:16:12.873 --> 00:16:15.876
你的应用在最开始和系统进行注册

00:16:16.643 --> 00:16:18.445
然后创建内容

00:16:19.012 --> 00:16:21.548
判断什么时候发送通知

00:16:21.849 --> 00:16:24.251
最后和系统为通知排期

00:16:24.318 --> 00:16:27.421
导致通知显示在用户的设备上

00:16:27.487 --> 00:16:28.589
就是这么简单

00:16:29.389 --> 00:16:31.325
让我们对代码进行一下总结

00:16:32.326 --> 00:16:36.263
从调用requestAuthorization
来注册开始

00:16:37.030 --> 00:16:39.199
你创建通知的内容

00:16:40.734 --> 00:16:44.371
你创建触发器 在这个情况下
一个简单的基于时间间隔的触发器

00:16:44.972 --> 00:16:47.107
然后你把所有的一切打包到

00:16:47.174 --> 00:16:49.510
一个UNNotificationRequest对象

00:16:49.576 --> 00:16:52.713
传递一个重要的独特的识别符

00:16:52.779 --> 00:16:54.381
将在这次演讲晚些时候谈到它

00:16:54.715 --> 00:16:57.684
然后你和系统对这个通知排期

00:16:58.085 --> 00:17:00.187
完成通知的传送

00:16:58.085 --> 00:17:00.187
完成通知的传送

00:17:02.489 --> 00:17:05.626
目前为止我们谈论了对通知发生了什么

00:17:05.692 --> 00:17:08.896
当你的应用在后台并且并没有
操作它时

00:17:08.962 --> 00:17:13.165
但是如果你的程序在前台时收到
通知会发生什么呢？

00:17:13.567 --> 00:17:16.369
为此我们提供通知处理

00:17:16.435 --> 00:17:18.038
当你的应用在前台时

00:17:18.906 --> 00:17:22.843
你的应用需要实现
UNUserNotificationCenter委托

00:17:22.976 --> 00:17:25.712
它有一个方法是
willPresent通知

00:17:25.779 --> 00:17:28.115
让你获得通知的内容

00:17:28.182 --> 00:17:32.219
作为传递给这个方法的
UNNotification对象的一部分

00:17:32.653 --> 00:17:34.922
现在这个方法还有
CompletionHandler

00:17:34.988 --> 00:17:37.324
它必须在这个函数的最后被调用

00:17:37.925 --> 00:17:40.561
需要注意的一件事是
CompletionHandler接受

00:17:40.627 --> 00:17:42.396
显示选项参数

00:17:43.230 --> 00:17:45.999
现在这允许你做的事是应用内
显示

00:17:46.066 --> 00:17:47.534
我们早先谈到的

00:17:47.801 --> 00:17:50.671
让我们看看如何配置它的一个例子

00:17:51.305 --> 00:17:55.609
假设你的应用仍然希望向用户
显示这个视图

00:17:55.676 --> 00:17:58.679
和你的声音警告
当你的应用在前台时

00:17:58.745 --> 00:18:01.114
这只需要简单的调用
handlerBlock

00:17:58.745 --> 00:18:01.114
这只需要简单的调用
handlerBlock

00:18:01.181 --> 00:18:02.916
使用不同的参数

00:18:03.317 --> 00:18:06.987
如果你不想要应用内显示
你只需不传递任何参数

00:18:07.454 --> 00:18:11.191
这就是你的应用在前台时的通知处理

00:18:12.159 --> 00:18:14.862
让我们继续谈谈通知管理

00:18:15.629 --> 00:18:18.298
通知管理是这个框架新加的功能

00:18:18.365 --> 00:18:22.369
它允许你访问通知

00:18:22.436 --> 00:18:26.006
你本地已经排期的通知中等待发送的

00:18:26.273 --> 00:18:28.542
以及访问已经发送的通知

00:18:28.609 --> 00:18:32.346
用户可能已经收到了
包括本地和远程通知

00:18:32.746 --> 00:18:37.117
现在你还可以删除已经发送给用户
的通知

00:18:37.184 --> 00:18:39.720
并且可以更新或者提升这些通知

00:18:41.121 --> 00:18:44.925
通知的重要部分是请求识别符

00:18:45.492 --> 00:18:49.029
在摘要中你看到请求识别符

00:18:49.096 --> 00:18:51.498
被设置在通知的请求对象上

00:18:51.632 --> 00:18:54.735
对远程通知
有一个新的请求数据头

00:18:54.801 --> 00:18:57.905
apns-collapse-id
你需要在负载中设置它

00:18:58.872 --> 00:19:02.476
系统用这个请求识别符来知道
哪个通知

00:18:58.872 --> 00:19:02.476
系统用这个请求识别符来知道
哪个通知

00:19:02.676 --> 00:19:04.845
是你请求删除或更新的

00:19:05.679 --> 00:19:08.515
让我们用例子来看看通知管理

00:19:09.249 --> 00:19:12.553
假设你的应用想要给一个游戏
发送通知

00:19:12.686 --> 00:19:15.322
它想要在游戏开始时这么做

00:19:15.789 --> 00:19:19.326
你从创建UNNotificationRequest
开始

00:19:20.260 --> 00:19:23.564
和系统为它排期
但是如果游戏取消了

00:19:24.097 --> 00:19:28.101
只需要简单地调用
removePendingNotificationRequest

00:19:28.168 --> 00:19:30.804
传递给它相同的游戏识别符

00:19:30.871 --> 00:19:33.006
你为初始通知创建的识别符

00:19:33.841 --> 00:19:35.976
但是如果游戏时间更新了要怎么办？

00:19:36.243 --> 00:19:38.912
你创建一个新的请求

00:19:39.112 --> 00:19:42.182
给它和给初始请求相同的识别符

00:19:42.916 --> 00:19:44.985
设置新的触发器时间

00:19:45.152 --> 00:19:47.120
和系统一起给它排期

00:19:47.187 --> 00:19:49.923
这转而导致更新通知

00:19:51.325 --> 00:19:54.261
让我们继续看看已经发送的通知

00:19:54.328 --> 00:19:56.263
并谈谈分数更新

00:19:57.397 --> 00:20:00.734
你通过创建通知请求开始

00:19:57.397 --> 00:20:00.734
你通过创建通知请求开始

00:20:01.235 --> 00:20:02.836
把它发送给系统

00:20:03.303 --> 00:20:05.439
但是假设错误的分数被发送了

00:20:06.340 --> 00:20:08.742
你可以简单地删除通知

00:20:08.809 --> 00:20:10.911
通过调用
removeDeliveredNotification

00:20:10.978 --> 00:20:13.013
给予相同的识别符

00:20:14.715 --> 00:20:16.583
如果分数更新了

00:20:16.650 --> 00:20:18.919
这是游戏中常见的情况

00:20:19.052 --> 00:20:23.156
你在这种情况下能做的就是创建
一个通知请求

00:20:23.223 --> 00:20:25.425
给它相同的识别符

00:20:25.759 --> 00:20:27.794
把新的分数内容传递给它

00:20:27.861 --> 00:20:30.430
并简单地和系统为它排期

00:20:31.298 --> 00:20:34.101
这是什么意思
让我们把这当成例子来看看

00:20:34.168 --> 00:20:38.005
那个通知已经在那为初始的
分数更新

00:20:38.238 --> 00:20:42.376
通过调用更新
像我在代码里显示的 这导致

00:20:42.442 --> 00:20:46.446
通知在通知列表里获得了更新

00:20:46.513 --> 00:20:48.448
取代开始的通知

00:20:48.515 --> 00:20:51.785
这样你不会使用户的通知列表
变得凌乱

00:20:58.358 --> 00:21:01.728
你可以在多种方法中使用它来
汇集信息

00:20:58.358 --> 00:21:01.728
你可以在多种方法中使用它来
汇集信息

00:21:01.795 --> 00:21:03.463
这对你的应用是合适的

00:21:04.031 --> 00:21:05.799
这就是通知管理

00:21:05.866 --> 00:21:08.535
它给你的应用很多控制

00:21:08.602 --> 00:21:11.171
在已经发送给用户的通知上

00:21:11.939 --> 00:21:14.007
目前为止在这次演讲中我们谈了

00:21:14.074 --> 00:21:17.110
你的应用怎么发送通知给用户

00:21:17.177 --> 00:21:19.580
那exchange的另一面呢？

00:21:19.646 --> 00:21:23.250
通知是很有互动性的
不管是默认的行动

00:21:23.317 --> 00:21:26.920
还是你的应用对它们设置的
定制的行动

00:21:27.154 --> 00:21:30.390
要谈谈通知行动让我邀请

00:21:30.457 --> 00:21:32.793
我的同事Julien来继续这次演讲

00:21:32.960 --> 00:21:33.794
谢谢

00:21:41.401 --> 00:21:42.336
嘿大家

00:21:42.469 --> 00:21:43.403
我是Julien

00:21:43.470 --> 00:21:46.173
我是框架测试组的软件工程师

00:21:46.573 --> 00:21:48.942
Kritarth向你们
展示了网络流程

00:21:49.009 --> 00:21:51.345
和当前的用户通知框架

00:21:51.411 --> 00:21:52.946
从注册

00:21:53.013 --> 00:21:56.316
到通知被发送到设备上的时候

00:21:57.150 --> 00:21:59.219
现在让我们谈谈行动

00:21:59.286 --> 00:22:01.788
用户可以在通知上进行的行动

00:21:59.286 --> 00:22:01.788
用户可以在通知上进行的行动

00:22:02.389 --> 00:22:06.093
你的应用可以知道三种行动

00:22:08.829 --> 00:22:11.298
第一个是默认行动

00:22:11.532 --> 00:22:14.968
这是用户从通知中打开你的应用

00:22:15.969 --> 00:22:18.238
当设备解锁时可以这么做

00:22:18.305 --> 00:22:20.407
并且用户收到一个通知

00:22:20.474 --> 00:22:23.243
他们可以点击横幅
这会打开你的应用

00:22:24.678 --> 00:22:26.547
这可以在锁屏上进行

00:22:26.613 --> 00:22:28.949
当用户从左向右滑动

00:22:30.617 --> 00:22:32.586
也可以在Notification Center中

00:22:32.653 --> 00:22:35.889
当用户向下滑动来
显示Notification Center

00:22:35.956 --> 00:22:38.292
他们可以点击任意你的通知

00:22:38.358 --> 00:22:39.893
来打开你的应用

00:22:42.262 --> 00:22:45.199
现在第二类行动是定制行动

00:22:45.332 --> 00:22:47.935
它们在可行动通知中

00:22:48.202 --> 00:22:51.672
我们在iOS 8中引入了可行动通知

00:22:51.939 --> 00:22:55.342
它们提供给用户一个快速运行
行动的方式

00:22:55.409 --> 00:22:57.311
直接从通知中

00:22:57.444 --> 00:22:59.413
而不需要启动你的应用

00:23:01.215 --> 00:23:04.284
现在这些定制行动
它们显示为按钮

00:23:04.351 --> 00:23:07.588
在通知内容的下面
有可定制的标题

00:23:09.156 --> 00:23:12.759
在iOS 9中
我们引入了文本输入行动

00:23:12.826 --> 00:23:16.830
这样用户可以快速回复消息

00:23:16.897 --> 00:23:18.966
直接在通知中

00:23:20.934 --> 00:23:25.439
这种定制行动可以是后台的或前台的

00:23:26.006 --> 00:23:29.176
一个后台行动会关闭通知

00:23:29.376 --> 00:23:31.745
并且在后台给你少量时间

00:23:31.812 --> 00:23:34.815
来处理用户选择的定制行动

00:23:35.516 --> 00:23:37.484
另一方面 一个前台行动

00:23:37.951 --> 00:23:41.955
会关闭通知并且前台启动你的应用

00:23:42.022 --> 00:23:44.157
这样你可以处理那个定制行动

00:23:46.059 --> 00:23:50.330
现在这些定制行动在iOS
和watchOS上都可用

00:23:52.065 --> 00:23:55.602
首先让我们看看在iOS它看起来是
什么样子

00:23:56.837 --> 00:23:59.339
我们以iPhone 6S为例

00:23:59.606 --> 00:24:04.311
在这台设备上用户可以
使用3D touch来展开一个通知

00:23:59.606 --> 00:24:04.311
在这台设备上用户可以
使用3D touch来展开一个通知

00:24:05.546 --> 00:24:10.117
当他们这么做时 定制行动会出现
在通知内容下面

00:24:10.384 --> 00:24:13.554
有一些行动
像你看到的 可以是文本输入

00:24:13.620 --> 00:24:16.590
这样用户可以快速回复消息

00:24:19.259 --> 00:24:20.761
现在在watchOS上

00:24:21.762 --> 00:24:25.832
一样的 定制行动出现在通知内容
的下面

00:24:27.467 --> 00:24:30.404
一些行动也可以是文本输入行动

00:24:30.470 --> 00:24:32.806
在watchOS上你有机会

00:24:32.873 --> 00:24:34.575
提供一些建议

00:24:34.641 --> 00:24:36.543
是用户可能选择的

00:24:36.944 --> 00:24:38.478
为你的文本输入行动

00:24:40.214 --> 00:24:43.851
关于更多关于
watchOS通知的信息

00:24:43.917 --> 00:24:46.320
你可以参加快速交互技术

00:24:46.386 --> 00:24:48.522
针对watchOS
今天晚些时候的演讲

00:24:50.858 --> 00:24:54.528
现在我们谈过了定制行动看起来
像什么

00:24:54.595 --> 00:24:57.698
让我们首先谈谈你可以怎样注册
你的定制行动

00:24:57.764 --> 00:24:59.633
并把它们显示给用户

00:25:01.835 --> 00:25:04.638
要注册 你首先要做的是

00:25:04.705 --> 00:25:06.607
创建一个行动对象

00:25:06.740 --> 00:25:10.344
你给它一个独特的识别符
还给它一个标题

00:25:10.444 --> 00:25:14.448
标题会出现在我们之前看到的
可定制按钮上

00:25:16.016 --> 00:25:18.519
行动默认是后台行动

00:25:18.719 --> 00:25:19.987
但你还可以提供一些选项

00:25:20.053 --> 00:25:22.322
比如如果你想要它是前台行动

00:25:23.924 --> 00:25:27.794
现在你的所有行动需要和种类
关联

00:25:28.428 --> 00:25:31.098
种类需要一个独特的识别符

00:25:31.565 --> 00:25:33.600
你把它给你所有的行动

00:25:34.134 --> 00:25:37.538
你现在还可以提供一些目的识别符

00:25:38.872 --> 00:25:40.974
关于目的的更多信息

00:25:41.275 --> 00:25:43.777
你可以参加介绍SiriKit演讲

00:25:44.711 --> 00:25:47.714
你还可以向种类提供一些选项

00:25:47.781 --> 00:25:50.450
我们稍后会讨论其中的一个

00:25:52.252 --> 00:25:55.322
一旦你创建了所有的行动和种类

00:25:55.389 --> 00:25:58.025
你唯一需要做的就是注册它们

00:25:58.091 --> 00:26:02.529
向你的应用关联的
UNUserNotificationCenter对象注册

00:25:58.091 --> 00:26:02.529
向你的应用关联的
UNUserNotificationCenter对象注册

00:26:04.665 --> 00:26:08.302
现在让我们谈谈你可以如何向
用户呈现这些定制行动

00:26:08.902 --> 00:26:12.773
你可以在本地和远程通知中这么做

00:26:14.575 --> 00:26:17.010
首先是远程通知

00:26:17.077 --> 00:26:21.048
你唯一要做的事是设置种类识别符

00:26:21.114 --> 00:26:24.551
在远程通知负载的APS字典中

00:26:25.118 --> 00:26:28.589
现在这个识别符需要匹配
识别符中的一个

00:26:28.655 --> 00:26:31.058
你之前注册的种类识别符

00:26:33.927 --> 00:26:38.165
对本地通知你只需要设置种类识别符

00:26:38.232 --> 00:26:41.068
在你创建的可修改内容中

00:26:41.134 --> 00:26:43.337
同样的识别符需要匹配

00:26:43.403 --> 00:26:45.806
你之前注册的识别符

00:26:49.376 --> 00:26:52.312
让我们谈谈你的应用知道的第三种
行动

00:26:52.379 --> 00:26:53.614
它是删除行动

00:26:54.715 --> 00:26:57.417
删除行动是iOS 10新加入的

00:26:57.684 --> 00:27:00.921
它发生在用户删除一条特定通知时

00:26:57.684 --> 00:27:00.921
它发生在用户删除一条特定通知时

00:27:02.489 --> 00:27:06.126
你可以使用它
比如你有一个日历应用

00:27:06.560 --> 00:27:10.063
并且假设你发送了一条远程通知
给你的用户关于

00:27:10.130 --> 00:27:11.431
即将到来的会议

00:27:11.899 --> 00:27:15.402
用户看到了这条通知并且决定
删除它

00:27:16.904 --> 00:27:19.439
在这种情况下你可能想要停止发送

00:27:19.506 --> 00:27:22.309
其他远程通知到这个用户的其他设备

00:27:22.376 --> 00:27:24.545
因为他们已经看过这条通知了

00:27:26.213 --> 00:27:29.216
用户可以怎样实际上删除通知？

00:27:29.883 --> 00:27:31.752
他们可以在锁屏上这么做

00:27:32.319 --> 00:27:33.954
通过从右向左滑动

00:27:34.821 --> 00:27:36.323
并且点击清除按钮

00:27:39.026 --> 00:27:41.495
他们也可在Notification
Center这么做

00:27:41.662 --> 00:27:43.697
也是从右向左滑动

00:27:43.864 --> 00:27:47.034
然后点击清除按钮
这会删除这条通知

00:27:50.337 --> 00:27:53.941
因为这不是你通常要更新的情况

00:27:56.243 --> 00:27:59.980
请记得早前当我们谈论你可以注册
的种类

00:28:00.314 --> 00:28:02.783
我们谈到了一些选项
这是其中一个

00:28:02.850 --> 00:28:04.551
customDismissAction选项

00:28:07.321 --> 00:28:10.991
让我们看看早前我们用来注册
种类的代码

00:28:11.658 --> 00:28:13.227
你在这需要做的唯一一件事

00:28:14.061 --> 00:28:16.029
就是简单地
添加customDismissAction

00:28:16.296 --> 00:28:18.065
给这个种类的选项

00:28:18.131 --> 00:28:20.300
你的应用会收到这个行动

00:28:20.367 --> 00:28:24.004
当删除这个种类的通知时

00:28:27.341 --> 00:28:29.843
让我们总结今天提到的行动

00:28:30.711 --> 00:28:32.646
首先是默认行动

00:28:32.713 --> 00:28:36.016
用户从通知中打开你的应用

00:28:37.918 --> 00:28:41.421
第二种是可行动通知中的定制行动

00:28:41.488 --> 00:28:43.390
提供给用户快速的方法

00:28:43.457 --> 00:28:46.326
直接从通知中
执行一个行动

00:28:48.128 --> 00:28:50.330
最后第三个是删除行动

00:28:50.898 --> 00:28:53.400
这是iOS 10中新加入的
它允许你知道

00:28:53.467 --> 00:28:56.270
什么时候用户删除了特定通知

00:29:04.711 --> 00:29:07.414
现在让我们谈谈你可以怎样处理
回应

00:29:07.481 --> 00:29:10.551
来自这些行动 在你的应用中

00:29:11.485 --> 00:29:14.087
到目前为止我们有多种方法基于

00:29:14.154 --> 00:29:16.657
用户是否从通知打开应用

00:29:16.723 --> 00:29:20.727
或者我们有定制行动
或者文本输入行动

00:29:20.794 --> 00:29:23.664
或者这是来自远程或本地通知

00:29:24.298 --> 00:29:27.234
现在有了我们新的通知框架

00:29:28.001 --> 00:29:29.970
我们可以用单一方法来做这些

00:29:30.971 --> 00:29:35.042
它是UNUserNotificationCenter
委托协议的一部分

00:29:36.977 --> 00:29:38.912
你需要实现的方法

00:29:38.979 --> 00:29:41.949
是didReceive回应
有CompletionHandler

00:29:43.717 --> 00:29:46.520
现在让我们仔细看看回应对象

00:29:46.587 --> 00:29:48.856
和你能在应用中用它做什么

00:29:50.958 --> 00:29:53.627
你的回应对象有一个行动识别符

00:29:53.694 --> 00:29:57.364
可以是默认 删除行动

00:29:57.431 --> 00:30:00.000
或者任何你创建的定制行动

00:30:01.268 --> 00:30:05.572
它可以有一个用户文本属性
如果它是一个文本输入行动

00:30:06.507 --> 00:30:08.909
它还可以有一个通知对象

00:30:09.743 --> 00:30:13.180
有请求对象和通知的识别符

00:30:13.514 --> 00:30:15.349
以及触发器和内容

00:30:15.983 --> 00:30:18.952
根据触发器的种类你可以知道
是否它是

00:30:19.019 --> 00:30:21.455
来自本地或远程通知

00:30:22.422 --> 00:30:25.158
这就是新的用户通知框架的
全部内容

00:30:25.225 --> 00:30:27.761
你可以处理行动的回应

00:30:30.631 --> 00:30:32.833
现在让我们谈谈远程通知

00:30:35.903 --> 00:30:38.605
这是目前远程通知的流程

00:30:38.672 --> 00:30:40.440
我们在演讲的前些时候看过

00:30:41.074 --> 00:30:42.943
你有你的服务识别

00:30:43.010 --> 00:30:45.345
它会发送远程通知到负载

00:30:45.412 --> 00:30:47.347
给APNs

00:30:47.548 --> 00:30:50.717
然后它被发送给设备并显示给用户

00:30:52.186 --> 00:30:55.522
可能你们有些人在一种情况中

00:30:55.589 --> 00:30:58.559
你有服务器端应用并且你通信

00:30:58.625 --> 00:31:00.627
到你的iOS应用可能使用一些

00:30:58.625 --> 00:31:00.627
到你的iOS应用可能使用一些

00:31:00.694 --> 00:31:02.963
端到端加密

00:31:04.464 --> 00:31:08.669
如果你可以使用相同的端到端加密
岂不更好吗？

00:31:09.136 --> 00:31:11.104
也为你的远程通知使用
相同的端到端加密

00:31:13.440 --> 00:31:17.144
为此在iOS 10中我们引入了服务
扩展

00:31:18.212 --> 00:31:21.448
现在我们要谈谈什么是服务扩展

00:31:21.815 --> 00:31:24.651
以及你可以怎样在应用中实现它

00:31:28.422 --> 00:31:33.160
现在服务扩展是一个非UI iOS
扩展在iOS 10中可用

00:31:33.627 --> 00:31:35.596
也就是说它运行在后台

00:31:36.330 --> 00:31:41.368
它的主要目的是增加或替换内容

00:31:41.435 --> 00:31:45.205
属于可见的或者远程通知
在他们显示给用户前

00:31:46.907 --> 00:31:50.711
让我们再看看目前的通知工作流程

00:31:51.778 --> 00:31:53.881
你有你的服务器端应用

00:31:53.947 --> 00:31:56.917
你发送负载给APNs

00:31:56.984 --> 00:31:58.719
然后它被发送给设备

00:32:00.220 --> 00:32:02.222
现在有了这个扩展

00:32:02.489 --> 00:32:04.391
你可以修改内容

00:32:04.458 --> 00:32:07.928
在你从服务器端应用发送它

00:32:07.995 --> 00:32:10.664
和它在设备上显示给用户之间的
时间

00:32:11.098 --> 00:32:12.966
你在这个例子中可以看到

00:32:13.033 --> 00:32:16.036
我有一个标题和副标题

00:32:16.103 --> 00:32:18.605
然后我修改了通知的主体

00:32:20.874 --> 00:32:23.911
关于服务扩展的一些更多细节

00:32:23.977 --> 00:32:26.780
你会获得一个短的运行时间
也就是说这不是

00:32:26.847 --> 00:32:28.949
为了长时间在后台运行的任务

00:32:30.484 --> 00:32:34.888
而且如果你没有及时提供
一些更新了的内容

00:32:34.955 --> 00:32:37.691
你会获得一个回退方法

00:32:38.392 --> 00:32:40.961
万一你仍然没法提供一些更新了
的内容

00:32:41.028 --> 00:32:45.666
我们会显示你发送给用户的
原本的远程通知

00:32:47.501 --> 00:32:49.269
一些潜在的使用方法

00:32:49.336 --> 00:32:52.673
你可以为你的远程通知
使用端到端加密

00:32:54.074 --> 00:32:57.811
你也可以添加一些附件到你的
远程通知

00:32:57.878 --> 00:32:59.446
使它们更丰富

00:33:00.380 --> 00:33:03.116
现在有一个详细的例子关于如何
这么做

00:33:03.183 --> 00:33:05.285
在高级通知演讲中

00:33:07.688 --> 00:33:10.123
现在让我们谈谈如何

00:33:10.190 --> 00:33:12.693
在你的应用中
实现这个新的服务扩展

00:33:14.661 --> 00:33:17.831
首先你需要在Xcode项目中

00:33:17.898 --> 00:33:19.366
添加新的目标

00:33:19.800 --> 00:33:25.172
你可以用模板 它在应用扩展部分
的下面

00:33:25.739 --> 00:33:28.108
它叫通知服务

00:33:28.575 --> 00:33:31.812
现在这个模板有一个主类

00:33:32.379 --> 00:33:35.249
我们要看看它的一个简化版本

00:33:38.151 --> 00:33:43.657
这类是UNNotification
服务扩展的一个子类

00:33:44.391 --> 00:33:45.993
它有两个主要的方法

00:33:48.529 --> 00:33:52.299
第一个方法是didReceive
有ContentHandler

00:33:53.500 --> 00:33:56.270
现在这个方法会给你当前的请求

00:33:56.336 --> 00:33:59.907
有通知的识别符和内容

00:34:00.974 --> 00:34:02.743
然后我们有
ContentHandler

00:34:02.809 --> 00:34:05.145
你需要调用
ContentHandler

00:34:05.212 --> 00:34:07.915
当你想要显示通知给用户时

00:34:07.981 --> 00:34:10.317
你需要提供一些内容给它

00:34:12.485 --> 00:34:16.657
第二种方法是服务扩展时间会过期

00:34:16.723 --> 00:34:19.659
这会被调用

00:34:19.726 --> 00:34:20.960
如果你无法及时提供更新了的内容

00:34:21.995 --> 00:34:26.199
请记住如果你没能在这个方法中
调用ContentHandler

00:34:26.266 --> 00:34:30.337
我们会显示你发送的原始远程
通知内容

00:34:33.574 --> 00:34:36.643
现在让我们谈谈你能怎么触发
这个代码

00:34:36.710 --> 00:34:38.411
从远程通知触发

00:34:41.715 --> 00:34:46.320
我们有一个很简单的例子
关于远程通知的有警告的负载

00:34:47.120 --> 00:34:50.991
如你所见我们有一个新的键
可修改内容键

00:34:51.491 --> 00:34:54.194
我们需要利用这个键让系统知道

00:34:54.261 --> 00:34:56.730
你希望服务扩展被启动

00:34:56.797 --> 00:34:59.032
来更新远程通知的内容

00:35:00.567 --> 00:35:02.836
你不需要每次都用这个键

00:35:02.903 --> 00:35:06.840
只有你想要替换通知内容时使用它

00:35:09.810 --> 00:35:13.580
现在你可以看到我还添加了
我自己的一些加密过的内容

00:35:13.847 --> 00:35:15.449
让我们看看一些代码

00:35:15.516 --> 00:35:18.952
可以处理这个远程通知的负载

00:35:22.422 --> 00:35:26.260
你可看到我们有didReceive
请求方法

00:35:26.393 --> 00:35:30.364
我做的第一件事是我把加密过的
内容解密

00:35:30.430 --> 00:35:32.099
在远程通知负载中

00:35:35.202 --> 00:35:38.906
然后我创造一个
MutableNotificationContent对象

00:35:40.807 --> 00:35:43.076
然后我赋值通知的主体

00:35:43.544 --> 00:35:46.446
和我们之前得到的解密过的内容

00:35:51.652 --> 00:35:54.855
最后我们调用ContentHandler

00:35:55.022 --> 00:35:57.558
显示通知内容给用户

00:35:59.893 --> 00:36:03.530
实现新的服务扩展就是这么简单

00:35:59.893 --> 00:36:03.530
实现新的服务扩展就是这么简单

00:36:03.864 --> 00:36:04.898
在你的应用中实现

00:36:14.608 --> 00:36:16.777
现在让我们回顾一下我们今天
讨论过的内容

00:36:19.046 --> 00:36:23.217
我们看了通知的概览
有本地和远程通知

00:36:25.419 --> 00:36:28.422
我们展示给你新的用户通知框架

00:36:28.989 --> 00:36:32.526
在iOS  watchOS
和tvOS上都可用

00:36:35.996 --> 00:36:38.932
我们说了如何注册通知

00:36:40.000 --> 00:36:42.269
以及如何创建你的内容

00:36:43.904 --> 00:36:47.307
如何为你的通知排期
本地的或远程的

00:36:49.009 --> 00:36:50.944
我们还说了新的管理

00:36:51.011 --> 00:36:54.114
你可以对待发和已发的通知进行

00:36:56.817 --> 00:36:58.619
然后我们说了不同的行动

00:36:58.685 --> 00:37:01.021
用户可以在你的通知上触发

00:36:58.685 --> 00:37:01.021
用户可以在你的通知上触发

00:37:01.221 --> 00:37:05.192
如何在应用内处理这些行动的回应

00:37:07.594 --> 00:37:10.397
最后我们展示了全新的服务扩展

00:37:10.797 --> 00:37:13.433
允许你增加或替换内容

00:37:13.500 --> 00:37:18.305
可视的远程通知的内容
在它们显示给用户前

00:37:21.508 --> 00:37:26.113
关于更多信息 你可以访问这个网址

00:37:29.816 --> 00:37:31.518
我们会有一些相关的演讲

00:37:31.585 --> 00:37:34.888
这之后紧接着的是高级通知演讲

00:37:35.289 --> 00:37:37.791
我们强烈建议你参加它

00:37:37.958 --> 00:37:39.927
如果你对通知感兴趣

00:37:41.094 --> 00:37:44.665
如果你想知道更多Watch上的
通知的信息

00:37:44.731 --> 00:37:47.935
你可以参加“watchOS
快速互动技巧”的演讲

00:37:48.936 --> 00:37:49.770
谢谢大家
