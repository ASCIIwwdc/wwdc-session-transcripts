WEBVTT

00:00:19.953 --> 00:00:23.023
<c.magenta>使用TVMLKit开发应用</c>

00:00:23.090 --> 00:00:24.024
<c.magenta>好的</c>

00:00:27.261 --> 00:00:31.932
<c.magenta>大家下午好 欢迎来到</c>
<c.magenta>TVMLKit应用开发的第二部分</c>

00:00:33.300 --> 00:00:35.235
<c.magenta>有许多优秀的应用</c>

00:00:35.335 --> 00:00:37.938
<c.magenta>使用TVMLKit开发出来</c>
<c.magenta>放在App Store上</c>

00:00:38.805 --> 00:00:41.241
<c.magenta>一些应用使用自定义样式</c>

00:00:41.341 --> 00:00:44.745
<c.magenta>带给用户与众不同的体验</c>
<c.magenta>同时扩大了应用的知名度</c>

00:00:46.046 --> 00:00:49.016
<c.magenta>今天我格外的高兴</c>

00:00:49.416 --> 00:00:52.553
<c.magenta>同你们进行交谈 并且告诉你们如何</c>

00:00:52.719 --> 00:00:54.888
<c.magenta>提升应用到另一个水平</c>

00:00:55.989 --> 00:00:58.792
<c.magenta>这需要通过扩展TVMLKit</c>

00:00:59.259 --> 00:01:00.694
<c.magenta>扩展接口</c>

00:00:59.259 --> 00:01:00.694
<c.magenta>扩展接口</c>

00:01:01.094 --> 00:01:04.197
<c.magenta>同时也需要JavaScript</c>
<c.magenta>中提供的功能来实现</c>

00:01:05.199 --> 00:01:08.435
<c.magenta>通过上述方式</c>
<c.magenta>基本上能让你的应用脱颖而出</c>

00:01:08.802 --> 00:01:10.737
<c.magenta>甚至会有属于自己的品牌</c>

00:01:13.373 --> 00:01:17.511
<c.magenta>TVMLKit是一个功能完备的框架</c>

00:01:18.445 --> 00:01:20.013
<c.magenta>我们也试图确保</c>

00:01:20.080 --> 00:01:23.483
<c.magenta>你在思考如何构建你的想法时</c>

00:01:23.884 --> 00:01:27.187
<c.magenta>你只需要考虑两个扩展点即可</c>

00:01:28.121 --> 00:01:29.456
<c.magenta>在上半场演讲中</c>

00:01:29.957 --> 00:01:32.326
<c.magenta>我将告诉大家如何</c>

00:01:32.392 --> 00:01:35.596
<c.magenta>在TVMLKit中通过扩展模板的方式</c>
<c.magenta>来扩展用户界面</c>

00:01:37.130 --> 00:01:38.265
<c.magenta>下半场演讲</c>

00:01:38.799 --> 00:01:40.801
<c.magenta>我的同事Christopher将会讲解</c>

00:01:40.868 --> 00:01:44.638
<c.magenta>如何增强你的应用通过添加程序功能</c>

00:01:45.172 --> 00:01:47.474
<c.magenta>到JavaScript引擎</c>
<c.magenta>支持TVMLKit的JavaScript引擎</c>

00:01:50.444 --> 00:01:52.679
<c.magenta>让我们谈论扩展模板的内容</c>

00:01:54.748 --> 00:01:56.984
<c.magenta>首先第一件事情每一个人都会遇到的是</c>

00:01:57.050 --> 00:01:59.820
<c.magenta>他们使用的TVMLKit就是模板的概念</c>

00:02:00.254 --> 00:02:03.557
<c.magenta>模板在TVML中定义 就是TV标记语言</c>

00:02:04.925 --> 00:02:08.829
<c.magenta>他们使用XML描述屏幕上显示的内容</c>

00:02:09.496 --> 00:02:11.031
<c.magenta>当人们看到了这里</c>

00:02:11.431 --> 00:02:12.733
<c.magenta>他们会说嘿</c>

00:02:12.866 --> 00:02:15.435
<c.magenta>我知道它 它是浏览器</c>

00:02:16.136 --> 00:02:19.339
<c.magenta>我敢向你保证那绝对不是浏览器</c>

00:02:20.107 --> 00:02:23.677
<c.magenta>TVMLKit是一个功能强大的模板引擎</c>

00:02:24.478 --> 00:02:27.648
<c.magenta>但那并不意味着你只能使用</c>
<c.magenta>我们提供的模板</c>

00:02:28.782 --> 00:02:33.353
<c.magenta>实际上 Apple自家的应用</c>
<c.magenta>同样使用TVMLKit</c>

00:02:33.420 --> 00:02:34.655
<c.magenta>但是以巧妙的方式扩展</c>

00:02:35.055 --> 00:02:36.890
<c.magenta>使它可以和原先的</c>

00:02:36.957 --> 00:02:40.794
<c.magenta>框架共存仍能良好的运行在tvOS上</c>

00:02:42.462 --> 00:02:45.399
<c.magenta>让我们看一个例子</c>

00:02:46.033 --> 00:02:47.434
<c.magenta>这是App Store上的应用</c>

00:02:48.368 --> 00:02:50.437
<c.magenta>App Store的主题有一个要求</c>

00:02:50.504 --> 00:02:52.706
<c.magenta>一个shelf中</c>
<c.magenta>只能存在一个cell</c>

00:02:53.874 --> 00:02:57.277
<c.magenta>你能看到他们复用了</c>
<c.magenta>TVMLKit提供的</c>

00:02:57.344 --> 00:02:58.846
<c.magenta>一个图片控件和三个文本控件</c>

00:02:59.513 --> 00:03:01.448
<c.magenta>除了这些他们还有自定义布局</c>

00:02:59.513 --> 00:03:01.448
<c.magenta>除了这些他们还有自定义布局</c>

00:03:01.615 --> 00:03:03.483
<c.magenta>使用了自定义的聚焦动作</c>

00:03:05.819 --> 00:03:07.988
<c.magenta>另一个例子是我们非常熟悉的</c>

00:03:08.055 --> 00:03:09.857
<c.magenta>是对于购买按钮的印象</c>

00:03:10.524 --> 00:03:12.459
<c.magenta>App Store的主题要求</c>

00:03:12.526 --> 00:03:16.797
<c.magenta>购买按钮必须反映出</c>
<c.magenta>应用程序的不同安装状态</c>

00:03:17.698 --> 00:03:19.433
<c.magenta>你是否正在购买应用</c>

00:03:19.499 --> 00:03:21.902
<c.magenta>应用是否被安装或者已经下载</c>

00:03:22.569 --> 00:03:25.706
<c.magenta>所有的这些都通过复用</c>
<c.magenta>TVMLKit提供的模板来实现</c>

00:03:26.273 --> 00:03:28.475
<c.magenta>这些主题就是</c>
<c.magenta>今天我想特意展示给你们的</c>

00:03:29.476 --> 00:03:31.879
<c.magenta>尽可能复用TVMLKit</c>

00:03:32.312 --> 00:03:35.082
<c.magenta>并且尽可能的扩展</c>
<c.magenta>我们没有在模板中提供给你的样式</c>

00:03:36.884 --> 00:03:38.619
<c.magenta>这就是模板</c>

00:03:40.020 --> 00:03:45.959
<c.magenta>如果你已经使用了TVMLKit</c>
<c.magenta>它遵循一系列的路径</c>

00:03:46.627 --> 00:03:49.463
<c.magenta>当你把TVMLKit注入到框架中</c>
<c.magenta>最后会在屏幕上显示</c>

00:03:50.163 --> 00:03:53.066
<c.magenta>TV标记语言由许多元素组成</c>

00:03:53.333 --> 00:03:54.701
<c.magenta>命名各不相同</c>

00:03:55.402 --> 00:03:58.539
<c.magenta>当它进入到框架中后会被传递到</c>
<c.magenta>TVElementFactory</c>

00:03:58.906 --> 00:04:00.507
<c.magenta>TVElementFactory</c>
<c.magenta>是注册中心</c>

00:03:58.906 --> 00:04:00.507
<c.magenta>TVElementFactory</c>
<c.magenta>是注册中心</c>

00:04:01.141 --> 00:04:02.676
<c.magenta>它记录着所有的元素</c>

00:04:02.743 --> 00:04:05.012
<c.magenta>它能够将元素翻译为相应的数据结构</c>

00:04:05.112 --> 00:04:07.147
<c.magenta>框架能够识别的数据结构</c>

00:04:08.382 --> 00:04:11.351
<c.magenta>我们使用TVInterfaceFactory类</c>

00:04:11.451 --> 00:04:13.153
<c.magenta>生成用户界面</c>

00:04:13.687 --> 00:04:15.322
<c.magenta>然后将他们显示在屏幕上</c>

00:04:16.255 --> 00:04:19.660
<c.magenta>这就是TVML如何显示到屏幕的过程</c>

00:04:20.627 --> 00:04:24.231
<c.magenta>让我们看一下扩展模板的过程中会发生什么</c>

00:04:27.367 --> 00:04:31.805
<c.magenta>当提到模板的扩展</c>
<c.magenta>就像添加你自己的标记那样简单</c>

00:04:31.872 --> 00:04:33.841
<c.magenta>在TVML中将标记发送给框架</c>

00:04:34.441 --> 00:04:35.843
<c.magenta>它会经历相同的处理过程</c>

00:04:35.909 --> 00:04:38.712
<c.magenta>它会进入到TVElementFactory</c>
<c.magenta>紧接着被转译</c>

00:04:39.413 --> 00:04:41.949
<c.magenta>但是当自定义的元素碰到</c>
<c.magenta>TVInterfaceFactory</c>

00:04:42.015 --> 00:04:44.585
<c.magenta>因为框架不了解你的用户界面</c>

00:04:44.651 --> 00:04:45.953
<c.magenta>框架会针对自定义元素询问你</c>

00:04:46.887 --> 00:04:48.989
<c.magenta>当你将界面给框架后</c>

00:04:49.056 --> 00:04:51.925
<c.magenta>TVInterfaceFactory</c>
<c.magenta>将把自定义的元素显示在屏幕上</c>

00:04:53.093 --> 00:04:53.927
<c.magenta>就是如此的简单</c>

00:04:55.028 --> 00:04:57.731
<c.magenta>现在你知道每个过程是如何工作的</c>

00:04:58.165 --> 00:04:59.700
<c.magenta>让我们来看一下它们的具体实现</c>

00:05:00.300 --> 00:05:02.169
<c.magenta>你需要考虑三个步骤</c>

00:05:02.236 --> 00:05:03.770
<c.magenta>当你想扩展模板的时候</c>

00:05:03.837 --> 00:05:06.273
<c.magenta>首先是定义标记符号</c>

00:05:07.841 --> 00:05:10.210
<c.magenta>标记在TVML中</c>
<c.magenta>基本上就是XML</c>

00:05:11.245 --> 00:05:12.980
<c.magenta>你有一个想法</c>

00:05:13.046 --> 00:05:15.249
<c.magenta>就是你的用户界面在屏幕上会怎样显示</c>

00:05:16.283 --> 00:05:18.352
<c.magenta>你必须将它转译为一种结构</c>

00:05:18.452 --> 00:05:19.686
<c.magenta>一些类似于</c>

00:05:19.753 --> 00:05:22.823
<c.magenta>使用标记本身就可以标识什么应该显示在屏幕上</c>

00:05:23.824 --> 00:05:27.427
<c.magenta>在我们的例子中 我们想在</c>
<c.magenta>stackTemplate上显示一个banner</c>

00:05:29.196 --> 00:05:31.798
<c.magenta>banner会有一个动画背景</c>

00:05:31.865 --> 00:05:35.536
<c.magenta>假如你想有能力控制动画你可以在TVML中</c>
<c.magenta>使用一个开关</c>

00:05:36.436 --> 00:05:41.041
<c.magenta>因此 myBanner这个元素会有</c>
<c.magenta>一个animated属性</c>

00:05:42.276 --> 00:05:44.811
<c.magenta>除此之外 我们再添加一个按钮</c>

00:05:45.312 --> 00:05:48.515
<c.magenta>但是因为不需要额外的功能</c>

00:05:48.582 --> 00:05:50.417
<c.magenta>我们可以使用TVML提供的按钮</c>

00:05:50.918 --> 00:05:52.853
<c.magenta>这就是按钮的一种形式</c>

00:05:54.688 --> 00:05:58.559
<c.magenta>现在你会构想自己的用户界面</c>

00:05:58.625 --> 00:06:00.160
<c.magenta>在标记中会如何显示</c>

00:05:58.625 --> 00:06:00.160
<c.magenta>在标记中会如何显示</c>

00:06:00.227 --> 00:06:02.462
<c.magenta>你需要告诉框架</c>

00:06:02.930 --> 00:06:06.900
<c.magenta>这就像将你元素的唯一标识</c>
<c.magenta>注册到框架中那样简单</c>

00:06:08.168 --> 00:06:11.872
<c.magenta>在应用控制器启动之前注册操作需要执行一次</c>

00:06:11.939 --> 00:06:13.674
<c.magenta>以便框架能够意识到</c>

00:06:13.740 --> 00:06:15.008
<c.magenta>所有的元素需要特别处理</c>

00:06:16.410 --> 00:06:18.812
<c.magenta>上面的过程很简单就像告知</c>
<c.magenta>TVElementFactory</c>

00:06:18.879 --> 00:06:22.115
<c.magenta>你想要关联一个</c>
<c.magenta>TVViewElement类到</c>

00:06:22.983 --> 00:06:25.519
<c.magenta>你自定义的元素上</c>

00:06:26.587 --> 00:06:30.591
<c.magenta>TVViewElement</c>
<c.magenta>是基础的数据结构</c>

00:06:30.657 --> 00:06:32.659
<c.magenta>用来转译你的标记</c>

00:06:32.726 --> 00:06:34.828
<c.magenta>让框架能识别这些标记</c>

00:06:35.262 --> 00:06:36.964
<c.magenta>除TVViewElement外</c>

00:06:37.030 --> 00:06:39.266
<c.magenta>我们还可以使用它的两个子类</c>

00:06:39.833 --> 00:06:42.269
<c.magenta>TVImageElement</c>
<c.magenta>用于处理图像</c>

00:06:42.336 --> 00:06:45.272
<c.magenta>TVTextElement</c>
<c.magenta>用来处理文本</c>

00:06:47.708 --> 00:06:50.611
<c.magenta>既然我们已经注册了这些元素</c>

00:06:51.345 --> 00:06:54.815
<c.magenta>现在处理第二步 第三步时</c>
<c.magenta>你那边会有小部分工作</c>

00:06:55.449 --> 00:06:58.585
<c.magenta>但是我们试图让事情保持简单</c>
<c.magenta>接下来只有两个步骤</c>

00:06:59.553 --> 00:07:03.123
<c.magenta>你要做的第一件事是</c>
<c.magenta>创建一个建造者接口</c>

00:06:59.553 --> 00:07:03.123
<c.magenta>你要做的第一件事是</c>
<c.magenta>创建一个建造者接口</c>

00:07:03.423 --> 00:07:06.426
<c.magenta>创建的接口必须遵循</c>
<c.magenta>TVInterfaceCreating协议</c>

00:07:06.860 --> 00:07:08.328
<c.magenta>这个特别的对象会</c>

00:07:08.395 --> 00:07:10.998
<c.magenta>提供你的用户界面</c>
<c.magenta>当框架需要的时候</c>

00:07:11.465 --> 00:07:14.268
<c.magenta>有一些回调函数你需要实现</c>

00:07:14.334 --> 00:07:16.203
<c.magenta>这些函数需要遵循</c>
<c.magenta>TVInterfaceCreating</c>

00:07:16.270 --> 00:07:20.140
<c.magenta>协议声明返回你想要的UI类型</c>

00:07:22.643 --> 00:07:26.313
<c.magenta>下一步是当你调用你建造类的接口时</c>

00:07:26.813 --> 00:07:29.816
<c.magenta>框架会对你的界面进行配置</c>
<c.magenta>然后将界面返回给我们</c>

00:07:31.018 --> 00:07:34.888
<c.magenta>像我之前强调的</c>
<c.magenta>尽可能复用TVMLKit</c>

00:07:34.955 --> 00:07:36.823
<c.magenta>我们已经做了很多工作去保证</c>

00:07:36.890 --> 00:07:41.128
<c.magenta>在tvOS上运行时</c>
<c.magenta>内置元素在性能、外观和体验上的表现是良好的</c>

00:07:41.728 --> 00:07:43.263
<c.magenta>让我们来看一个例子</c>

00:07:43.330 --> 00:07:45.299
<c.magenta>建造者的接口是什么样子</c>

00:07:47.000 --> 00:07:49.069
<c.magenta>在这里我们有一个</c>
<c.magenta>MyInterfaceCreator类</c>

00:07:49.136 --> 00:07:51.205
<c.magenta>这个类遵循</c>
<c.magenta>TVInterfaceCreating协议</c>

00:07:52.472 --> 00:07:55.108
<c.magenta>因为我们仅对特定的视图更感兴趣</c>

00:07:55.175 --> 00:07:57.845
<c.magenta>我们可以去实现makeView元素</c>

00:07:57.911 --> 00:08:00.113
<c.magenta>还需要实现</c>
<c.magenta>existingView的回调方法</c>

00:07:57.911 --> 00:08:00.113
<c.magenta>还需要实现</c>
<c.magenta>existingView的回调方法</c>

00:08:01.315 --> 00:08:04.318
<c.magenta>一旦实现这个类后 你需要做的是</c>

00:08:04.384 --> 00:08:07.554
<c.magenta>使用TVInterfaceFactory</c>
<c.magenta>注册这个类的实例</c>

00:08:10.324 --> 00:08:12.426
<c.magenta>让我们具体看一下makeView</c>
<c.magenta>这个元素</c>

00:08:13.093 --> 00:08:15.562
<c.magenta>我们可以看到TVMLKit</c>

00:08:15.629 --> 00:08:18.866
<c.magenta>给你提供了一个元素和</c>
<c.magenta>一个可选的existingView</c>

00:08:19.366 --> 00:08:20.901
<c.magenta>在这个例子的banner中</c>

00:08:21.301 --> 00:08:23.637
<c.magenta>我们只需要检查这个元素自身的名字</c>

00:08:25.506 --> 00:08:27.708
<c.magenta>我们需特别注意</c>
<c.magenta>myBanner这个元素</c>

00:08:27.774 --> 00:08:29.510
<c.magenta>当我们发现和它类似的元素时</c>

00:08:30.143 --> 00:08:31.745
<c.magenta>我们要创建这个视图的实例</c>

00:08:33.113 --> 00:08:35.381
<c.magenta>因为myBanner有一个元素属性</c>

00:08:35.916 --> 00:08:38.018
<c.magenta>我们可以很容易的筛选到这个元素</c>

00:08:38.085 --> 00:08:40.020
<c.magenta>利用这个元素提供的回调函数</c>

00:08:40.787 --> 00:08:42.688
<c.magenta>然后将这个元素转换到视图上</c>

00:08:44.024 --> 00:08:46.226
<c.magenta>我们在这个视图上还有一个按钮</c>

00:08:46.760 --> 00:08:49.229
<c.magenta>因为它是一个TVMLKit按钮</c>

00:08:49.630 --> 00:08:51.098
<c.magenta>这样做是简单的就像</c>

00:08:51.164 --> 00:08:53.767
<c.magenta>为特定的元素调用</c>
<c.magenta>TVInterfaceFactory</c>

00:08:54.134 --> 00:08:56.770
<c.magenta>然后会为myBanner元素</c>
<c.magenta>返回它所需要的视图</c>

00:08:57.638 --> 00:08:59.773
<c.magenta>最后当然也会返回你需要的视图</c>

00:09:01.375 --> 00:09:03.744
<c.magenta>在框架默认方法中</c>

00:09:03.810 --> 00:09:05.512
<c.magenta>必须返回nil</c>

00:09:07.114 --> 00:09:10.284
<c.magenta>我们已经谈论了很多视图的内容</c>
<c.magenta>视图控制器的内容呢？</c>

00:09:11.685 --> 00:09:15.022
<c.magenta>TVMLKit提供视图控制器样式是</c>

00:09:15.088 --> 00:09:16.723
<c.magenta>一个shelf有很多lockup</c>

00:09:16.790 --> 00:09:18.592
<c.magenta>用这种样式进行水平方向扩展</c>

00:09:18.992 --> 00:09:20.661
<c.magenta>或者是网格垂直方向上的扩展</c>

00:09:21.962 --> 00:09:24.331
<c.magenta>使用TVMLKit的回调函数</c>

00:09:24.398 --> 00:09:27.367
<c.magenta>返回这些视图控制器</c>

00:09:27.434 --> 00:09:29.236
<c.magenta>你可以使用你自己的视图控制器</c>
<c.magenta>替换默认的视图控制器</c>

00:09:30.804 --> 00:09:34.641
<c.magenta>这种用法类似于makeView</c>

00:09:34.708 --> 00:09:38.345
<c.magenta>在这个实例中我们仍然提供相应元素的</c>
<c.magenta>existingViewController</c>

00:09:38.412 --> 00:09:41.682
<c.magenta>我们希望最终返回的是</c>
<c.magenta>existingViewController</c>

00:09:43.483 --> 00:09:45.185
<c.magenta>现在你会想原来如此</c>

00:09:46.520 --> 00:09:47.754
<c.magenta>本质上就是视图的集合</c>

00:09:48.355 --> 00:09:51.225
<c.magenta>视图的集合是许多带有cell的视图</c>

00:09:51.925 --> 00:09:54.761
<c.magenta>这就是如何对自己的</c>
<c.magenta>lockup进行定义</c>

00:09:56.730 --> 00:09:57.998
<c.magenta>这个例子够深刻吗？</c>

00:09:59.333 --> 00:10:02.536
<c.magenta>App Store有一个特殊的要求</c>

00:09:59.333 --> 00:10:02.536
<c.magenta>App Store有一个特殊的要求</c>

00:10:03.103 --> 00:10:07.941
<c.magenta>一个布局仅有一个cell</c>
<c.magenta>和特定的行为</c>

00:10:08.575 --> 00:10:11.512
<c.magenta>就像你看到的</c>
<c.magenta>其他的东西是UMLKit的扩展</c>

00:10:12.145 --> 00:10:13.580
<c.magenta>标题的上下浮动依赖于</c>

00:10:13.647 --> 00:10:16.350
<c.magenta>焦点是否位于元素的范围内</c>

00:10:17.618 --> 00:10:21.121
<c.magenta>在将要推出的tvOS 10中</c>

00:10:21.188 --> 00:10:23.924
<c.magenta>我们允许你指定</c>
<c.magenta>自定义视图集合的cell</c>

00:10:24.858 --> 00:10:27.094
<c.magenta>允许你为cell自定义布局</c>

00:10:27.160 --> 00:10:29.930
<c.magenta>最重要的是你可以拦截焦点事件</c>

00:10:29.997 --> 00:10:31.465
<c.magenta>当cell获得焦点的时候</c>

00:10:32.299 --> 00:10:34.334
<c.magenta>为了达到这种效果你需要做两件事情</c>

00:10:34.868 --> 00:10:37.738
<c.magenta>首先是用我们最新的API</c>

00:10:37.804 --> 00:10:40.941
<c.magenta>它允许你对我们视图集合的</c>
<c.magenta>CellClass进行设置</c>

00:10:41.008 --> 00:10:43.076
<c.magenta>当我们使用特定元素的时候</c>

00:10:44.178 --> 00:10:46.413
<c.magenta>我们在屏幕上构建用户界面</c>

00:10:46.947 --> 00:10:49.616
<c.magenta>框架通过使用makeView</c>
<c.magenta>来允许你进行自定义</c>

00:10:49.883 --> 00:10:52.819
<c.magenta>对相关的cell进行配置</c>
<c.magenta>返回界面给我们</c>

00:10:53.520 --> 00:10:57.791
<c.magenta>我们提供可自定义的视图集合cell</c>

00:10:57.925 --> 00:10:59.459
<c.magenta>将视图集合的条目加入队列中</c>

00:10:59.526 --> 00:11:03.463
<c.magenta>使用已有视图自身的参数</c>

00:10:59.526 --> 00:11:03.463
<c.magenta>使用已有视图自身的参数</c>

00:11:05.432 --> 00:11:07.668
<c.magenta>接下来我将请Parry上台</c>

00:11:07.734 --> 00:11:10.504
<c.magenta>为你们展示上面提到的界面</c>
<c.magenta>是如何工作的 Parry</c>

00:11:10.904 --> 00:11:14.007
<c.magenta>视图集合条目的自定义展示</c>

00:11:16.009 --> 00:11:16.910
<c.magenta>谢谢你Jeremy</c>

00:11:17.277 --> 00:11:20.914
<c.magenta>大家好 我是Parry</c>
<c.magenta>我将给大家展示</c>

00:11:21.114 --> 00:11:23.283
<c.magenta>如何在TVMLKit自定义cell</c>

00:11:24.451 --> 00:11:26.086
<c.magenta>自定义cell是简单的</c>

00:11:26.153 --> 00:11:29.690
<c.magenta>如果你想像多个shelf那样</c>
<c.magenta>使用TVMLKit集合</c>

00:11:29.756 --> 00:11:32.492
<c.magenta>还有网格 但你想添加自己的cell</c>

00:11:32.893 --> 00:11:37.397
<c.magenta>通过自定义布局和</c>
<c.magenta>聚焦机制来展示你的内容</c>

00:11:38.665 --> 00:11:42.336
<c.magenta>我将向你展示一个基于</c>
<c.magenta>TVMLKit制作的简单应用</c>

00:11:43.270 --> 00:11:44.404
<c.magenta>稍后</c>

00:11:44.638 --> 00:11:47.374
<c.magenta>我将使用自定义cell对它进行扩展</c>

00:11:48.375 --> 00:11:50.177
<c.magenta>使得应用的显示效果更好</c>

00:11:52.312 --> 00:11:53.347
<c.magenta>让我们开始吧</c>

00:11:55.949 --> 00:11:58.352
<c.magenta>我把屏幕转接到我的电脑上</c>

00:12:02.055 --> 00:12:05.893
<c.magenta>我使用Xcode打开我的应用</c>

00:12:06.360 --> 00:12:08.228
<c.magenta>我会基于TVMLKit进行编码</c>

00:12:08.695 --> 00:12:10.531
<c.magenta>让我们看看这个应用</c>

00:12:11.265 --> 00:12:15.502
<c.magenta>这个应用可以使用户浏览他们的相册</c>

00:12:18.305 --> 00:12:23.610
<c.magenta>应用中使用到的JavaScript</c>
<c.magenta>和同XML相关的文件</c>

00:12:23.877 --> 00:12:25.746
<c.magenta>都存储在我的电脑上</c>

00:12:26.046 --> 00:12:28.348
<c.magenta>我们可以大体浏览下这些文件</c>

00:12:29.650 --> 00:12:32.753
<c.magenta>现在显示的是应用的一个页面</c>

00:12:33.687 --> 00:12:36.156
<c.magenta>这个页面会把用户的相册展示出来</c>

00:12:37.224 --> 00:12:39.259
<c.magenta>你可以看到</c>
<c.magenta>stackedtemplate</c>

00:12:40.994 --> 00:12:43.163
<c.magenta>还有一个不错的banner</c>

00:12:43.430 --> 00:12:44.765
<c.magenta>背景图</c>

00:12:46.133 --> 00:12:49.503
<c.magenta>它有一个shelf是用来展示相册的</c>

00:12:51.438 --> 00:12:54.842
<c.magenta>每个相册其实通过lockup呈现</c>

00:12:55.809 --> 00:13:01.448
<c.magenta>每一个lockup嵌入了</c>
<c.magenta>来自相册的图片</c>

00:12:55.809 --> 00:13:01.448
<c.magenta>每一个lockup嵌入了</c>
<c.magenta>来自相册的图片</c>

00:13:02.516 --> 00:13:03.717
<c.magenta>最后相册展示出来</c>

00:13:05.519 --> 00:13:09.223
<c.magenta>除了使用一些自定义样式</c>
<c.magenta>使得lockup变得大一点</c>

00:13:09.356 --> 00:13:11.491
<c.magenta>我没有自定义TVMLKit</c>

00:13:12.226 --> 00:13:16.864
<c.magenta>现在它是没有TVMLKit的应用</c>

00:13:18.332 --> 00:13:22.202
<c.magenta>运行程序看一下它的展示效果</c>

00:13:25.239 --> 00:13:27.841
<c.magenta>接下来我将在Apple TV上运行</c>

00:13:32.246 --> 00:13:36.783
<c.magenta>这就是我在stackedtemplate</c>
<c.magenta>文件中提到过的应用</c>

00:13:37.084 --> 00:13:39.052
<c.magenta>别致的banner在顶端</c>

00:13:39.920 --> 00:13:41.355
<c.magenta>它的shelf在底部</c>

00:13:41.788 --> 00:13:46.293
<c.magenta>我觉得超出范围的那部分还是挺不错的</c>

00:13:47.060 --> 00:13:50.797
<c.magenta>这是奏效的较大的lockup</c>
<c.magenta>能使得它看起来不一样</c>

00:13:52.533 --> 00:13:55.068
<c.magenta>我觉得还能做得更好一点</c>

00:13:59.373 --> 00:14:01.675
<c.magenta>考虑这种情况</c>

00:13:59.373 --> 00:14:01.675
<c.magenta>考虑这种情况</c>

00:14:02.509 --> 00:14:05.546
<c.magenta>除了从相册中取一张照片</c>

00:14:05.979 --> 00:14:08.215
<c.magenta>显示在当前的页面上</c>

00:14:09.650 --> 00:14:12.419
<c.magenta>要是我们选择多张相片</c>

00:14:12.719 --> 00:14:14.621
<c.magenta>选中的照片来自于相册</c>

00:14:14.888 --> 00:14:18.892
<c.magenta>使用那种方式将</c>
<c.magenta>相册放到文档上会怎样？</c>

00:14:19.927 --> 00:14:23.363
<c.magenta>让我们想一下</c>

00:14:23.463 --> 00:14:27.134
<c.magenta>如何构建图像的拼图</c>

00:14:27.601 --> 00:14:29.069
<c.magenta>当相册没有被选中</c>

00:14:30.804 --> 00:14:34.975
<c.magenta>或者当相册没有获得焦点时</c>
<c.magenta>将图片加入到九宫格中</c>

00:14:35.909 --> 00:14:36.810
<c.magenta>那听起来挺酷</c>

00:14:37.911 --> 00:14:39.012
<c.magenta>但不止于此</c>

00:14:39.580 --> 00:14:44.084
<c.magenta>它将关于相册的上下文信息传递给用户</c>

00:14:44.885 --> 00:14:48.388
<c.magenta>用户可以看到相册中的许多图片</c>

00:14:51.258 --> 00:14:56.330
<c.magenta>真是一个使用TVMLKit</c>
<c.magenta>自定义cell的不错例子</c>

00:14:57.497 --> 00:14:58.765
<c.magenta>让我展示如何使用它</c>

00:15:00.434 --> 00:15:04.605
<c.magenta>我将切回我的电脑</c>

00:15:05.639 --> 00:15:07.574
<c.magenta>我想做的第一件事情是</c>

00:15:07.641 --> 00:15:11.144
<c.magenta>像我刚才所说的创建一个特定的标记</c>

00:15:12.279 --> 00:15:16.049
<c.magenta>它是视觉表现的呈现形式</c>

00:15:16.116 --> 00:15:17.718
<c.magenta>对你的用户界面来说</c>

00:15:18.085 --> 00:15:21.321
<c.magenta>根据XML的规则使得</c>
<c.magenta>TVMLKit可以被理解</c>

00:15:22.322 --> 00:15:24.391
<c.magenta>所以我将在这里</c>

00:15:25.559 --> 00:15:29.363
<c.magenta>就像你看到的 它也是一个带有shelf</c>
<c.magenta>的stackedtemplate</c>

00:15:30.464 --> 00:15:36.069
<c.magenta>但是除了lockup之外</c>
<c.magenta>它还有有一个新的元素</c>

00:15:36.136 --> 00:15:38.138
<c.magenta>就是我刚才创建的</c>
<c.magenta>叫做FlyoutCell</c>

00:15:38.539 --> 00:15:40.340
<c.magenta>展示的就是我刚才创建的那个条目</c>

00:15:40.774 --> 00:15:43.911
<c.magenta>我称它为flyout</c>
<c.magenta>因为图片看着像从里面飞出了一样</c>

00:15:46.013 --> 00:15:48.248
<c.magenta>就像描述中提及的</c>

00:15:48.549 --> 00:15:52.019
<c.magenta>我想在cell里放多张图片</c>

00:15:52.819 --> 00:15:53.687
<c.magenta>因此</c>

00:15:53.754 --> 00:15:57.758
<c.magenta>cell里面有多个图片子元素</c>

00:16:00.294 --> 00:16:02.296
<c.magenta>有一点需要注意</c>

00:16:02.596 --> 00:16:04.765
<c.magenta>对所有自定义的cell来说</c>

00:16:05.365 --> 00:16:09.303
<c.magenta>它们需要有三种样式</c>

00:16:10.637 --> 00:16:15.375
<c.magenta>它们是宽和高</c>

00:16:16.543 --> 00:16:19.379
<c.magenta>在tvOS 10中添加新的样式</c>

00:16:19.446 --> 00:16:21.215
<c.magenta>是TV focus margin</c>

00:16:22.883 --> 00:16:27.487
<c.magenta>TVMLKit使用宽和高</c>

00:16:27.888 --> 00:16:31.625
<c.magenta>在集合视图中给cell适合的边框</c>

00:16:32.860 --> 00:16:35.128
<c.magenta>使用TV focus margin</c>
<c.magenta>作为默认大小</c>

00:16:36.129 --> 00:16:39.399
<c.magenta>当元素获得焦点时</c>
<c.magenta>便可以知道将边缘扩大多少</c>

00:16:40.601 --> 00:16:42.736
<c.magenta>它使用这个信息创建</c>

00:16:43.370 --> 00:16:45.172
<c.magenta>适合的间隔在两个shelf之间</c>

00:16:46.340 --> 00:16:48.542
<c.magenta>也会去重新调整</c>
<c.magenta>shelf header</c>

00:16:49.910 --> 00:16:52.079
<c.magenta>当移动到cell下它便获得焦点</c>

00:16:54.681 --> 00:16:57.818
<c.magenta>现在我们有了规格</c>
<c.magenta>那下一步该做什么？</c>

00:17:00.454 --> 00:17:05.025
<c.magenta>需要将新元素加入到TVMLKit中</c>

00:17:05.192 --> 00:17:06.527
<c.magenta>让我们快点做</c>

00:17:07.261 --> 00:17:09.829
<c.magenta>让我们看一下AppDelegate</c>

00:17:10.897 --> 00:17:14.501
<c.magenta>在应用中有</c>
<c.magenta>didFinishLaunchingWithOptions方法</c>

00:17:16.502 --> 00:17:19.106
<c.magenta>我将删除这些代码</c>

00:17:19.173 --> 00:17:22.910
<c.magenta>我之前写的 就像上面那样</c>

00:17:26.012 --> 00:17:29.783
<c.magenta>使用我刚添加的</c>
<c.magenta>FlyoutCell元素</c>

00:17:31.385 --> 00:17:34.821
<c.magenta>使用TVMLKit中的</c>
<c.magenta>TVElementFactory</c>

00:17:37.324 --> 00:17:41.395
<c.magenta>TVMLKit希望我们对</c>
<c.magenta>建造者的接口做出提升</c>

00:17:42.062 --> 00:17:46.800
<c.magenta>通过对它进行扩展</c>
<c.magenta>以便我可以对cell进行配置</c>

00:17:47.734 --> 00:17:50.370
<c.magenta>对吧？所以让我们快点完成它</c>

00:17:57.778 --> 00:18:00.380
<c.magenta>这就是TVMLKit要求的全部配置</c>

00:17:57.778 --> 00:18:00.380
<c.magenta>这就是TVMLKit要求的全部配置</c>

00:18:00.447 --> 00:18:03.650
<c.magenta>让我们看一下这些类的实现</c>

00:18:04.084 --> 00:18:07.688
<c.magenta>从ExtendedInterfaceCreator开始</c>

00:18:09.990 --> 00:18:13.527
<c.magenta>对于自定义的cell</c>
<c.magenta>你需要实现两个API</c>

00:18:15.095 --> 00:18:15.929
<c.magenta>首先</c>

00:18:17.531 --> 00:18:19.633
<c.magenta>collectionViewCellClass类</c>

00:18:21.235 --> 00:18:24.004
<c.magenta>要求用它映射你的自定义元素</c>

00:18:24.071 --> 00:18:27.608
<c.magenta>到你使用的</c>
<c.magenta>collectionViewCellClass类</c>

00:18:29.977 --> 00:18:34.882
<c.magenta>第二个是makeView要求</c>

00:18:34.982 --> 00:18:37.918
<c.magenta>使用你的元素配置你的cell</c>

00:18:40.020 --> 00:18:41.889
<c.magenta>让我们快速填充空白的地方</c>

00:18:43.690 --> 00:18:46.426
<c.magenta>用我以前写过的一部分代码</c>

00:18:46.860 --> 00:18:50.330
<c.magenta>对自定义的cell进行映射</c>

00:18:51.832 --> 00:18:55.636
<c.magenta>利用collectionViewCellClass类</c>

00:18:58.605 --> 00:18:59.773
<c.magenta>同样的</c>

00:19:04.645 --> 00:19:09.516
<c.magenta>利用映射去配置</c>
<c.magenta>collectionViewCell类</c>

00:19:10.250 --> 00:19:14.588
<c.magenta>特别注意的是已存在视图的参数</c>

00:19:14.655 --> 00:19:15.989
<c.magenta>总是有效的</c>

00:19:16.190 --> 00:19:18.759
<c.magenta>因为TVMLKit将它加入队列</c>

00:19:18.825 --> 00:19:21.962
<c.magenta>从视图集合中为了使它显示出来</c>

00:19:22.029 --> 00:19:26.300
<c.magenta>对于自定义的cell</c>
<c.magenta>它将会出现在这里</c>

00:19:28.068 --> 00:19:31.405
<c.magenta>在跳转到flyoutcell配置前</c>

00:19:31.772 --> 00:19:35.075
<c.magenta>让我们看一下</c>
<c.magenta>Flyoutcell类本身</c>

00:19:38.278 --> 00:19:41.081
<c.magenta>这就是</c>
<c.magenta>FlyoutCollectionViewCell类</c>

00:19:41.148 --> 00:19:44.284
<c.magenta>我使用它展现flyoutCell</c>

00:19:44.551 --> 00:19:46.954
<c.magenta>你可以看到 它就是</c>

00:19:47.020 --> 00:19:48.355
<c.magenta>UICollectionViewCell的子类</c>

00:19:49.389 --> 00:19:53.126
<c.magenta>在类内部</c>
<c.magenta>没有使用TVMLKit做任何事情</c>

00:19:54.127 --> 00:19:55.429
<c.magenta>它仅仅是cell的类</c>

00:19:55.495 --> 00:19:58.498
<c.magenta>我可以在原生应用或其它应用中使用它</c>

00:20:00.167 --> 00:20:03.337
<c.magenta>需要指出的是它接受</c>

00:20:03.971 --> 00:20:07.541
<c.magenta>图片视图的数组</c>

00:20:07.608 --> 00:20:10.777
<c.magenta>那些数组用来显示视图的内容</c>

00:20:12.679 --> 00:20:15.749
<c.magenta>这些图片是我们想要展示的</c>

00:20:15.816 --> 00:20:20.487
<c.magenta>在我们扩展TV视图元素的接口中</c>

00:20:23.557 --> 00:20:28.095
<c.magenta>让我们回到要扩展接口的地方</c>
<c.magenta>补全这些代码</c>

00:20:36.570 --> 00:20:39.540
<c.magenta>这就是需要展示的内容 不是太多</c>

00:20:40.974 --> 00:20:43.944
<c.magenta>但是挺重要的</c>

00:20:45.979 --> 00:20:50.250
<c.magenta>我遍历所有的子元素</c>

00:20:51.785 --> 00:20:54.588
<c.magenta>提取出图像元素</c>

00:20:55.489 --> 00:21:00.661
<c.magenta>简单的重复使用TVMLKit</c>
<c.magenta>为我们创建图像</c>

00:20:55.489 --> 00:21:00.661
<c.magenta>简单的重复使用TVMLKit</c>
<c.magenta>为我们创建图像</c>

00:21:00.761 --> 00:21:03.597
<c.magenta>现在除了没有显示图像之外</c>
<c.magenta>它是相当棒的</c>

00:21:03.664 --> 00:21:08.068
<c.magenta>因为我们使用的是网络图片</c>

00:21:09.136 --> 00:21:13.106
<c.magenta>它允许我们对图像进行缩放裁剪</c>
<c.magenta>来使用给出的范围</c>

00:21:13.173 --> 00:21:15.209
<c.magenta>以便用户界面可以更好的展示</c>

00:21:16.276 --> 00:21:20.380
<c.magenta>它同样做了缓存以便我可以在</c>
<c.magenta>其他地方重复使用这些图片</c>

00:21:21.448 --> 00:21:27.154
<c.magenta>因此复用TVMLKit的视图</c>
<c.magenta>和其他的功能是很有好处的</c>

00:21:27.855 --> 00:21:29.122
<c.magenta>我建议你们使用它</c>

00:21:30.624 --> 00:21:33.994
<c.magenta>我们已经对代码进行了完善</c>

00:21:34.061 --> 00:21:36.530
<c.magenta>并且和TVMLKit相关的类</c>
<c.magenta>能理解我们的元素</c>

00:21:36.830 --> 00:21:39.132
<c.magenta>还有一件事情需要去做</c>

00:21:39.333 --> 00:21:42.803
<c.magenta>回到我刚才展示的</c>
<c.magenta>stacked文本中</c>

00:21:43.470 --> 00:21:47.407
<c.magenta>将所有的lockup替换为</c>
<c.magenta>我们刚添加的FlyoutCell</c>

00:21:48.809 --> 00:21:50.177
<c.magenta>我现在回到了那个地方</c>

00:21:51.512 --> 00:21:53.714
<c.magenta>移除掉这些lockup</c>

00:21:59.152 --> 00:22:01.355
<c.magenta>添加FlyoutCell</c>

00:21:59.152 --> 00:22:01.355
<c.magenta>添加FlyoutCell</c>

00:22:07.027 --> 00:22:10.631
<c.magenta>现在有三个相册</c>
<c.magenta>有三个FlyoutCell进行填充</c>

00:22:10.697 --> 00:22:13.233
<c.magenta>每一个FlyoutCell有...</c>

00:22:15.202 --> 00:22:16.336
<c.magenta>四张图片在它里面</c>

00:22:17.704 --> 00:22:21.241
<c.magenta>当你添加这些cell的时候</c>
<c.magenta>不要忘记添加样式</c>

00:22:21.308 --> 00:22:24.011
<c.magenta>那是强制的要求</c>

00:22:30.083 --> 00:22:34.288
<c.magenta>我们添加了所有的东西然后回到应用中</c>

00:22:34.721 --> 00:22:36.523
<c.magenta>看一下修改之后的样子</c>

00:22:38.425 --> 00:22:40.561
<c.magenta>我将切换到Apple TV</c>

00:22:46.733 --> 00:22:48.268
<c.magenta>上面是flyoutcell</c>

00:22:55.709 --> 00:23:01.515
<c.magenta>你可以看到现在比</c>
<c.magenta>展示一张图片的效果更好了</c>

00:22:55.709 --> 00:23:01.515
<c.magenta>你可以看到现在比</c>
<c.magenta>展示一张图片的效果更好了</c>

00:23:01.915 --> 00:23:04.785
<c.magenta>它看起来更生动</c>

00:23:05.752 --> 00:23:10.023
<c.magenta>特别注意cell</c>
<c.magenta>只是适用于TVMLKit</c>

00:23:10.090 --> 00:23:13.927
<c.magenta>间隔是合适的 甚至相册的封面</c>

00:23:15.529 --> 00:23:19.533
<c.magenta>随着cell获得焦点视图</c>
<c.magenta>会进行上下移动</c>

00:23:22.469 --> 00:23:26.907
<c.magenta>感觉像是TVMLKit内置的控件</c>
<c.magenta>然而它的确是你添加的</c>

00:23:28.775 --> 00:23:29.977
<c.magenta>你的界面实现了</c>

00:23:31.178 --> 00:23:33.347
<c.magenta>自定义cell的确是非常容易实现</c>

00:23:34.648 --> 00:23:39.520
<c.magenta>它允许你添加许多数值到你的应用中</c>

00:23:39.586 --> 00:23:42.155
<c.magenta>通过复用TVMLKit提供的</c>

00:23:42.656 --> 00:23:47.127
<c.magenta>同时会允许你使用你的方法进行展示</c>

00:23:48.262 --> 00:23:49.129
<c.magenta>谢谢</c>

00:23:54.701 --> 00:23:56.136
<c.magenta>谢谢你Parry</c>

00:23:56.803 --> 00:23:59.473
<c.magenta>我认为Parry花了很多时间</c>
<c.magenta>构建FlyoutCell</c>

00:23:59.540 --> 00:24:02.209
<c.magenta>比实际中利用TVMLKit进行显示</c>

00:23:59.540 --> 00:24:02.209
<c.magenta>比实际中利用TVMLKit进行显示</c>

00:24:03.210 --> 00:24:07.414
<c.magenta>在继续进行之前</c>
<c.magenta>让我们快速回顾下前面的内容</c>

00:24:07.981 --> 00:24:11.051
<c.magenta>最开始提到了扩展模板</c>

00:24:11.118 --> 00:24:13.987
<c.magenta>定义一个标记去描述你的用户接口</c>

00:24:15.155 --> 00:24:18.592
<c.magenta>用TVElementFactory</c>
<c.magenta>注册上面的接口</c>

00:24:18.659 --> 00:24:21.762
<c.magenta>然后将它转译成视图元素</c>

00:24:23.163 --> 00:24:27.334
<c.magenta>提供可扩展建造者的接口</c>
<c.magenta>以便你能声明自己的用户接口</c>

00:24:27.401 --> 00:24:30.204
<c.magenta>可以随时停止在屏幕上构建的UI</c>

00:24:32.072 --> 00:24:33.407
<c.magenta>更重要的是</c>

00:24:33.473 --> 00:24:37.711
<c.magenta>使用TVViewElement</c>
<c.magenta>的属性和特性</c>

00:24:37.778 --> 00:24:41.348
<c.magenta>去配置你的用户界面在显示到屏幕之前</c>

00:24:43.417 --> 00:24:45.819
<c.magenta>这就是关于扩展模板的全部内容</c>

00:24:45.886 --> 00:24:47.321
<c.magenta>挺简单的</c>

00:24:48.322 --> 00:24:52.192
<c.magenta>我们看到你们用它</c>
<c.magenta>构建自己的应用挺兴奋的</c>

00:24:53.427 --> 00:24:58.599
<c.magenta>在继续之前</c>
<c.magenta>我们要告诉你一些需要注意的事情</c>

00:25:02.536 --> 00:25:07.140
<c.magenta>你的用户界面通过TVML中的</c>
<c.magenta>元素展示出来</c>

00:25:08.008 --> 00:25:10.511
<c.magenta>这个文件可以在任意时间更新</c>

00:25:11.144 --> 00:25:16.316
<c.magenta>举个例子 带有lockup的</c>
<c.magenta>shelf在搜索模板里</c>

00:25:16.917 --> 00:25:21.922
<c.magenta>当你进行搜索时 shelf会使用</c>
<c.magenta>JavaScript进行更新</c>

00:25:22.189 --> 00:25:23.790
<c.magenta>显示的内容会改变</c>

00:25:24.157 --> 00:25:26.293
<c.magenta>这就是内容的更新</c>

00:25:27.427 --> 00:25:28.428
<c.magenta>现在</c>

00:25:28.896 --> 00:25:33.433
<c.magenta>当我们重新构建用户界面</c>
<c.magenta>文档的更新就会发生</c>

00:25:33.800 --> 00:25:36.803
<c.magenta>我们需要调用接口的建造者</c>

00:25:37.471 --> 00:25:42.009
<c.magenta>你需要在元素中查看更新的类型</c>

00:25:42.276 --> 00:25:44.044
<c.magenta>并且能看出什么地方进行了更新</c>

00:25:45.412 --> 00:25:47.714
<c.magenta>举例来说 孩子有可能会变得淘气</c>

00:25:47.981 --> 00:25:49.183
<c.magenta>作为称职的父母</c>

00:25:49.249 --> 00:25:51.318
<c.magenta>你不想放弃你的孩子</c>

00:25:51.385 --> 00:25:52.886
<c.magenta>因为那样做不太好</c>

00:25:54.054 --> 00:25:58.358
<c.magenta>相应的</c>
<c.magenta>尽可能复用cell 复用视图</c>

00:26:01.028 --> 00:26:04.364
<c.magenta>在我们返回banner的那个例子中</c>

00:26:04.932 --> 00:26:08.035
<c.magenta>在TVMLKit生态系统中</c>
<c.magenta>我们不是好公民</c>

00:26:08.101 --> 00:26:09.703
<c.magenta>我们没有复用所有视图</c>

00:26:10.571 --> 00:26:12.206
<c.magenta>让我们看看能否改变这种局面</c>

00:26:13.640 --> 00:26:16.043
<c.magenta>挺简单的就更改两行代码</c>

00:26:17.544 --> 00:26:22.382
<c.magenta>在这个例子中我们把</c>
<c.magenta>existingView看作回调的一部分</c>

00:26:22.749 --> 00:26:26.620
<c.magenta>我们尽力做出我们期望的视图</c>

00:26:26.687 --> 00:26:28.589
<c.magenta>在MyBanner视图中</c>

00:26:29.423 --> 00:26:33.126
<c.magenta>如果不是我们期望的</c>
<c.magenta>实例化一份新的拷贝</c>

00:26:34.361 --> 00:26:38.866
<c.magenta>因为我们有TVMLKit按钮</c>
<c.magenta>基于TVMLKit</c>

00:26:39.433 --> 00:26:41.435
<c.magenta>我们也必须做正确的事情</c>

00:26:41.502 --> 00:26:47.641
<c.magenta>通过传递到</c>
<c.magenta>TVInterfaceFactory进行复用</c>

00:26:47.975 --> 00:26:49.977
<c.magenta>现有视图参数</c>

00:26:51.278 --> 00:26:52.846
<c.magenta>在特殊的例子中</c>

00:26:52.913 --> 00:26:55.415
<c.magenta>因为MyBanner</c>
<c.magenta>是一个比较简单的视图</c>

00:26:55.482 --> 00:26:57.918
<c.magenta>在任何时间更新它都是没问题的</c>

00:26:58.218 --> 00:27:00.020
<c.magenta>我们不需要去看更新的类型</c>

00:26:58.218 --> 00:27:00.020
<c.magenta>我们不需要去看更新的类型</c>

00:27:00.854 --> 00:27:03.824
<c.magenta>除非你的视图 结构是相当复杂的</c>

00:27:04.191 --> 00:27:06.593
<c.magenta>出于性能的原因 我们建议你</c>

00:27:06.660 --> 00:27:09.696
<c.magenta>看一下更新的类型找出更新的部分</c>

00:27:12.633 --> 00:27:13.667
<c.magenta>这是...</c>

00:27:15.002 --> 00:27:18.071
<c.magenta>你需要改变的第一行</c>

00:27:19.806 --> 00:27:20.774
<c.magenta>现在</c>

00:27:21.241 --> 00:27:25.679
<c.magenta>在tvOS 10的新特性</c>
<c.magenta>就是明暗的视觉表现</c>

00:27:26.113 --> 00:27:28.916
<c.magenta>若你使用TVMLKit自定义的视图</c>

00:27:29.550 --> 00:27:34.221
<c.magenta>你可以去监听这些特征</c>
<c.magenta>来做出或明或暗的变化</c>

00:27:36.456 --> 00:27:40.994
<c.magenta>我们有阐述tvOS新特性的演讲</c>
<c.magenta>还会告诉你需要做的</c>

00:27:41.128 --> 00:27:43.096
<c.magenta>我建议你们仔细看看</c>

00:27:43.664 --> 00:27:44.932
<c.magenta>外观的适配</c>

00:27:45.365 --> 00:27:48.902
<c.magenta>在这个例子中</c>
<c.magenta>你需要了解TVMLKit的规则</c>

00:27:49.069 --> 00:27:52.372
<c.magenta>复用我们的组件 谢谢你</c>

00:27:53.207 --> 00:27:56.777
<c.magenta>我建议你检核样式更新的提示</c>

00:27:56.844 --> 00:27:58.345
<c.magenta>从元素更新类型过程中</c>

00:27:59.112 --> 00:28:01.682
<c.magenta>它会告诉你视图</c>

00:27:59.112 --> 00:28:01.682
<c.magenta>它会告诉你视图</c>

00:28:01.748 --> 00:28:03.650
<c.magenta>是明或是暗的表现形式</c>

00:28:04.351 --> 00:28:06.386
<c.magenta>复用文档灵活更新</c>

00:28:06.453 --> 00:28:09.356
<c.magenta>对你来说是仅有的方法</c>

00:28:09.423 --> 00:28:12.526
<c.magenta>来更新你的视图展示或明或暗的效果</c>

00:28:13.760 --> 00:28:16.630
<c.magenta>因为他们是你需要</c>
<c.magenta>复用的TVMLKit组件</c>

00:28:17.531 --> 00:28:21.001
<c.magenta>更重要的是我们需要转到</c>
<c.magenta>TVInterfaceFactory</c>

00:28:21.068 --> 00:28:22.603
<c.magenta>这样才能完成这些显示工作</c>

00:28:25.806 --> 00:28:31.445
<c.magenta>如果你有原生的应用</c>
<c.magenta>又或者你有自己的视图控制器</c>

00:28:32.246 --> 00:28:34.314
<c.magenta>你在应用中使用了TVMLKit</c>

00:28:34.848 --> 00:28:37.184
<c.magenta>你可以让框架混合使用它们</c>

00:28:38.085 --> 00:28:40.988
<c.magenta>这就像定义一个模板元素那样简单</c>

00:28:43.023 --> 00:28:46.293
<c.magenta>再次强调 通过元素工厂注册它</c>

00:28:47.327 --> 00:28:52.032
<c.magenta>通过加载特定的模板</c>
<c.magenta>构建我们的用户界面</c>

00:28:52.232 --> 00:28:55.502
<c.magenta>返回你的视图控制器</c>
<c.magenta>所有的设置就完成了</c>

00:28:58.672 --> 00:29:02.976
<c.magenta>另一种方法在你已存在的</c>
<c.magenta>原生应用使用TVMLKit</c>

00:28:58.672 --> 00:29:02.976
<c.magenta>另一种方法在你已存在的</c>
<c.magenta>原生应用使用TVMLKit</c>

00:29:03.410 --> 00:29:07.981
<c.magenta>是获得我们提供子应用的导航控制器</c>

00:29:09.950 --> 00:29:12.920
<c.magenta>你已经学习了</c>
<c.magenta>如何创建TV应用的控制器</c>

00:29:13.187 --> 00:29:17.658
<c.magenta>我要强调的是</c>
<c.magenta>在这个例子中你不用指定一个窗口</c>

00:29:17.858 --> 00:29:19.526
<c.magenta>因为我们已经有一个窗口了</c>

00:29:20.127 --> 00:29:24.031
<c.magenta>选择你要在导航控制器中</c>
<c.magenta>显示的视图控制器</c>

00:29:25.032 --> 00:29:27.301
<c.magenta>一旦你有了TV应用的控制器</c>

00:29:27.801 --> 00:29:30.470
<c.magenta>获得它的导航控制器并且展示它</c>

00:29:32.706 --> 00:29:37.144
<c.magenta>另一种方法是</c>
<c.magenta>使用UIWindow的实例</c>

00:29:37.978 --> 00:29:42.850
<c.magenta>在这个例子中你需要指定窗口参数</c>

00:29:43.917 --> 00:29:47.487
<c.magenta>一旦JavaScript启动</c>
<c.magenta>或者应用逻辑执行了</c>

00:29:47.554 --> 00:29:52.125
<c.magenta>TVMLKit做正确的事</c>
<c.magenta>将你窗口的键值隐藏</c>

00:29:54.161 --> 00:29:57.531
<c.magenta>接下来Christopher</c>
<c.magenta>将会和大家谈论</c>

00:29:57.598 --> 00:30:00.100
<c.magenta>如何扩展应用的功能</c>

00:29:57.598 --> 00:30:00.100
<c.magenta>如何扩展应用的功能</c>

00:30:00.167 --> 00:30:02.102
<c.magenta>通过调用JavaScript</c>

00:30:02.469 --> 00:30:03.370
<c.magenta>Chris</c>

00:30:08.208 --> 00:30:09.142
<c.magenta>谢谢Jeremy</c>

00:30:09.243 --> 00:30:13.247
<c.magenta>大家好 我是Christopher</c>
<c.magenta>TVMLKit的工程师</c>

00:30:14.147 --> 00:30:19.219
<c.magenta>刚刚我们看了如何在</c>
<c.magenta>TVMLKit中扩展模板引擎</c>

00:30:19.586 --> 00:30:21.221
<c.magenta>使用自定义的标记</c>

00:30:21.388 --> 00:30:25.492
<c.magenta>实现我们自己的视图和视图控制器</c>

00:30:25.659 --> 00:30:27.528
<c.magenta>还有视图集合的cell</c>

00:30:28.095 --> 00:30:31.899
<c.magenta>你也可扩展TVMLKit的脚本引擎</c>

00:30:31.965 --> 00:30:34.201
<c.magenta>通过使用</c>
<c.magenta>JavaScriptCore实现</c>

00:30:34.401 --> 00:30:38.438
<c.magenta>实现你自己应用中的特定功能</c>

00:30:38.505 --> 00:30:41.275
<c.magenta>在JavaScript中</c>
<c.magenta>或暴露给JavaScript</c>

00:30:42.176 --> 00:30:46.547
<c.magenta>有三种方式来将代码注入到</c>
<c.magenta>JavaScript的运行环境</c>

00:30:46.613 --> 00:30:48.515
<c.magenta>在你的TVML应用中</c>

00:30:48.582 --> 00:30:49.516
<c.magenta>让我们看一下</c>

00:30:51.318 --> 00:30:56.290
<c.magenta>首先 你可以在运行时</c>
<c.magenta>加载额外的JavaScript库</c>

00:30:58.559 --> 00:31:03.197
<c.magenta>第二 你可以使用原生代码直接交互</c>

00:30:58.559 --> 00:31:03.197
<c.magenta>第二 你可以使用原生代码直接交互</c>

00:31:03.263 --> 00:31:05.966
<c.magenta>同JavaScript的上下文</c>
<c.magenta>在你的应用中</c>

00:31:06.066 --> 00:31:11.038
<c.magenta>触发JavaScript中的函数</c>
<c.magenta>或者传递数据</c>

00:31:11.104 --> 00:31:12.472
<c.magenta>在两个运行环境之间</c>

00:31:13.640 --> 00:31:17.044
<c.magenta>第三 你可以使用原生类</c>

00:31:17.444 --> 00:31:20.347
<c.magenta>将原生类传递到JavaScript</c>

00:31:20.714 --> 00:31:24.618
<c.magenta>通过简单的类约定</c>
<c.magenta>使你的脚本可以访问它们</c>

00:31:24.685 --> 00:31:25.919
<c.magenta>在JavaScriptCore中</c>

00:31:27.154 --> 00:31:29.756
<c.magenta>让我们详细的了解下这些方法</c>

00:31:29.823 --> 00:31:31.391
<c.magenta>从最简单的开始</c>

00:31:32.659 --> 00:31:33.794
<c.magenta>JavaScript库</c>

00:31:33.861 --> 00:31:38.031
<c.magenta>当你的应用开始加载</c>
<c.magenta>最先发生的事情是</c>

00:31:38.098 --> 00:31:40.601
<c.magenta>TVMLKit会加载</c>
<c.magenta>JavaScript文件</c>

00:31:40.667 --> 00:31:43.604
<c.magenta>文件里面会包含</c>
<c.magenta>app.onlaunch回调</c>

00:31:43.670 --> 00:31:47.674
<c.magenta>应用的控制权会交给你TVML</c>
<c.magenta>应用的JavaScript</c>

00:31:48.342 --> 00:31:52.880
<c.magenta>启动过程必须等待直到</c>
<c.magenta>application.js文件加载运行</c>

00:31:53.013 --> 00:31:56.450
<c.magenta>在app.launch执行完成之前</c>

00:31:56.850 --> 00:32:00.954
<c.magenta>如果说你的应用比较庞大</c>
<c.magenta>你可以对代码进行切割</c>

00:31:56.850 --> 00:32:00.954
<c.magenta>如果说你的应用比较庞大</c>
<c.magenta>你可以对代码进行切割</c>

00:32:01.021 --> 00:32:03.991
<c.magenta>把代码放到许多独立的文件中</c>
<c.magenta>加速启动时间</c>

00:32:05.626 --> 00:32:09.263
<c.magenta>这是TVMLKit普遍支持的形式</c>

00:32:09.329 --> 00:32:11.765
<c.magenta>允许你加载额外的</c>
<c.magenta>JavaScript</c>

00:32:12.533 --> 00:32:14.768
<c.magenta>在应用运行时的任何时候</c>

00:32:16.103 --> 00:32:20.440
<c.magenta>你的JavaScript库</c>
<c.magenta>其中可以定义变量</c>

00:32:20.507 --> 00:32:24.411
<c.magenta>和函数并且可以被所有的脚本使用</c>

00:32:26.947 --> 00:32:33.287
<c.magenta>让我们看一下TVMLKit JS</c>
<c.magenta>提供的全局函数</c>

00:32:33.887 --> 00:32:38.091
<c.magenta>一般情况下你能在</c>
<c.magenta>app.onlaunch上进行调用</c>

00:32:38.158 --> 00:32:40.027
<c.magenta>你也可以在其他的地方进行调用</c>

00:32:40.861 --> 00:32:47.067
<c.magenta>这个函数使用脚本URL的数组</c>
<c.magenta>和完整的回调函数作为参数</c>

00:32:48.068 --> 00:32:50.871
<c.magenta>当回调函数执行后</c>

00:32:51.238 --> 00:32:53.774
<c.magenta>你可以使用变量和函数</c>

00:32:53.841 --> 00:32:55.475
<c.magenta>我们在脚本库中定义的</c>

00:32:56.376 --> 00:32:58.312
<c.magenta>但是还有一些事情需要注意</c>

00:33:01.381 --> 00:33:03.550
<c.magenta>当你调用执行脚本的时候</c>

00:33:04.151 --> 00:33:07.254
<c.magenta>TVMLKit JS会执行这些代码</c>

00:33:07.321 --> 00:33:10.390
<c.magenta>在你的JavaScript文件中</c>
<c.magenta>会调用其它函数</c>

00:33:11.358 --> 00:33:15.729
<c.magenta>所以在相同的文件中</c>
<c.magenta>不要多次调用执行脚本</c>

00:33:16.363 --> 00:33:20.133
<c.magenta>同样要注意如果你的脚本</c>
<c.magenta>依赖其它的脚本</c>

00:33:20.200 --> 00:33:22.135
<c.magenta>你需要以正确的顺序加载它们</c>

00:33:24.905 --> 00:33:29.443
<c.magenta>执行脚本会并发的</c>
<c.magenta>根据URL下载脚本文件</c>

00:33:30.244 --> 00:33:32.946
<c.magenta>然后会一次执行它们</c>

00:33:33.380 --> 00:33:37.985
<c.magenta>如果其中任何一个脚本没有获取到</c>
<c.magenta>其它脚本也不会执行</c>

00:33:38.051 --> 00:33:42.890
<c.magenta>当回调完成后要检查成功的参数来确保</c>

00:33:42.956 --> 00:33:45.592
<c.magenta>JavaScript库是可获取到的</c>

00:33:47.995 --> 00:33:50.430
<c.magenta>最后 我想告诉大家</c>

00:33:50.531 --> 00:33:55.169
<c.magenta>尽管TVMLKit</c>
<c.magenta>提供了许多类似网页的接口</c>

00:33:55.235 --> 00:33:58.238
<c.magenta>可是你的TVML应用不是网页浏览器</c>

00:33:58.472 --> 00:34:02.643
<c.magenta>可能发现许多JavaScript库</c>
<c.magenta>能很好的帮助你开发网页应用</c>

00:33:58.472 --> 00:34:02.643
<c.magenta>可能发现许多JavaScript库</c>
<c.magenta>能很好的帮助你开发网页应用</c>

00:34:02.709 --> 00:34:04.811
<c.magenta>但在TVMLKit中</c>
<c.magenta>有可能出现不兼容的情况</c>

00:34:04.878 --> 00:34:07.314
<c.magenta>尤其是你依赖浏览器功能的时候</c>

00:34:07.381 --> 00:34:11.518
<c.magenta>比如全局的window对象</c>
<c.magenta>或者全局的document对象</c>

00:34:12.319 --> 00:34:13.587
<c.magenta>记住那些就可以了</c>

00:34:15.989 --> 00:34:17.591
<c.magenta>但是不要限制你自己</c>

00:34:17.658 --> 00:34:20.527
<c.magenta>在你的TVML应用中</c>
<c.magenta>使用JavaScript</c>

00:34:20.860 --> 00:34:24.264
<c.magenta>你能进入到</c>
<c.magenta>JavaScript运行环境</c>

00:34:24.364 --> 00:34:25.831
<c.magenta>从原生的代码中</c>

00:34:26.500 --> 00:34:31.505
<c.magenta>可以将应用的UI事件</c>
<c.magenta>传递到JavaScript中</c>

00:34:31.605 --> 00:34:34.741
<c.magenta>或者在JavaScript和</c>
<c.magenta>原生之间上传和拉取数据</c>

00:34:37.678 --> 00:34:43.583
<c.magenta>TVML中 你JavaScript</c>
<c.magenta>运行环境是被TVMLKit</c>

00:34:44.451 --> 00:34:47.654
<c.magenta>的一个叫作</c>
<c.magenta>TVApplicationController类管理着</c>

00:34:48.388 --> 00:34:51.324
<c.magenta>JavaScript</c>
<c.magenta>在单独的线程中执行</c>

00:34:51.391 --> 00:34:53.659
<c.magenta>所以你需要对进行交互的时机进行调度</c>

00:34:54.761 --> 00:34:57.331
<c.magenta>最简单的形式是</c>
<c.magenta>你只需要简单的调用函数</c>

00:34:57.397 --> 00:35:01.768
<c.magenta>在TVApplicationController上</c>
<c.magenta>然后将block传递进去并执行</c>

00:34:57.397 --> 00:35:01.768
<c.magenta>在TVApplicationController上</c>
<c.magenta>然后将block传递进去并执行</c>

00:35:04.338 --> 00:35:08.942
<c.magenta>当block执行后</c>
<c.magenta>你将获得JS上下文环境的引用</c>

00:35:09.209 --> 00:35:13.080
<c.magenta>在这里你可将字符串当做</c>
<c.magenta>JavaScript代码执行</c>

00:35:13.747 --> 00:35:16.583
<c.magenta>你可以在对象上触发函数</c>

00:35:16.817 --> 00:35:21.855
<c.magenta>你可获取和设置JavaScript</c>
<c.magenta>的属性使用原生的变量</c>

00:35:23.190 --> 00:35:26.827
<c.magenta>你不能持有JSContext</c>

00:35:26.927 --> 00:35:28.962
<c.magenta>或者在block之外的任何地方使用</c>

00:35:31.632 --> 00:35:34.768
<c.magenta>由于JavaScript运行在</c>
<c.magenta>单独的线程中</c>

00:35:34.835 --> 00:35:38.972
<c.magenta>你需要注意你不能执行任何阻塞操作</c>

00:35:39.039 --> 00:35:40.807
<c.magenta>当你执行block的时候</c>

00:35:41.041 --> 00:35:43.043
<c.magenta>否则会在主线程中出现死锁</c>

00:35:44.011 --> 00:35:48.682
<c.magenta>获得关于JSContext和</c>
<c.magenta>JavaScriptCore更多信息</c>

00:35:48.749 --> 00:35:53.520
<c.magenta>请访问 WWDC 2013中</c>
<c.magenta>JavaScriptCore部分</c>

00:35:55.289 --> 00:35:59.760
<c.magenta>让我看这个例子是如何调用</c>
<c.magenta>JavaScript代码的</c>

00:36:00.194 --> 00:36:01.862
<c.magenta>从Swift应用中</c>

00:36:02.696 --> 00:36:07.367
<c.magenta>这个显示的Swift代码是</c>
<c.magenta>TVML应用代理里面的</c>

00:36:07.901 --> 00:36:11.839
<c.magenta>我们已为UIApplication</c>
<c.magenta>的代理方法实现了一个stub</c>

00:36:11.905 --> 00:36:14.508
<c.magenta>来处理自定义的URL方案</c>

00:36:16.910 --> 00:36:20.647
<c.magenta>如果我们想把URL</c>
<c.magenta>传递到JavaScript中</c>

00:36:20.781 --> 00:36:25.252
<c.magenta>需要让appController</c>
<c.magenta>去执行block</c>

00:36:25.352 --> 00:36:27.054
<c.magenta>在JavaScript的执行环境中</c>

00:36:29.456 --> 00:36:34.995
<c.magenta>当block执行完之后</c>
<c.magenta>我们将得到JSContext的引用</c>

00:36:35.195 --> 00:36:37.564
<c.magenta>从这儿我们可以访问相应的属性</c>

00:36:37.631 --> 00:36:41.235
<c.magenta>直接在JavaScript的</c>
<c.magenta>全局对象上</c>

00:36:42.903 --> 00:36:48.842
<c.magenta>我们可以得到原生的变量和对象且</c>
<c.magenta>能将其作为JavaScript属性</c>

00:36:48.909 --> 00:36:51.278
<c.magenta>或者就像这个例子中 作为函数的参数</c>

00:36:52.145 --> 00:36:56.283
<c.magenta>我们触发打开URL的全局函数</c>

00:36:56.350 --> 00:37:01.822
<c.magenta>函数在JavaScript中</c>
<c.magenta>定义然后将URL字符串传递进去</c>

00:36:56.350 --> 00:37:01.822
<c.magenta>函数在JavaScript中</c>
<c.magenta>定义然后将URL字符串传递进去</c>

00:37:01.889 --> 00:37:04.791
<c.magenta>URL来自</c>
<c.magenta>UIApplication代理回调</c>

00:37:06.593 --> 00:37:09.897
<c.magenta>我们暴露新的函数</c>

00:37:09.963 --> 00:37:12.065
<c.magenta>在我们的TVMLKit应用中</c>

00:37:12.165 --> 00:37:14.768
<c.magenta>并且将应用的事件</c>
<c.magenta>传递到JavaScript中</c>

00:37:18.005 --> 00:37:19.973
<c.magenta>接下来 让我们谈论桥接</c>

00:37:20.674 --> 00:37:25.112
<c.magenta>使用本地变量是如此的简单</c>

00:37:25.345 --> 00:37:30.450
<c.magenta>在JavaScript中</c>
<c.magenta>使用这些变量就像使用字符串</c>

00:37:30.517 --> 00:37:32.553
<c.magenta>数字和数组那样简单</c>

00:37:32.619 --> 00:37:35.355
<c.magenta>这些已经在</c>
<c.magenta>JavaScriptCore处理了</c>

00:37:36.890 --> 00:37:39.359
<c.magenta>如果你想使用自己的类</c>

00:37:40.060 --> 00:37:43.697
<c.magenta>你所要做的是遵循类之间一些简单协议</c>

00:37:43.764 --> 00:37:47.267
<c.magenta>JavaScriptCore</c>
<c.magenta>也会为你的类进行连接</c>

00:37:47.668 --> 00:37:48.569
<c.magenta>让我们看一下</c>

00:37:50.337 --> 00:37:52.139
<c.magenta>这儿有三个主要的步骤</c>

00:37:53.106 --> 00:37:59.546
<c.magenta>首先你必须声明一个自定义扩展</c>
<c.magenta>自JSExport的协议</c>

00:37:59.613 --> 00:38:01.481
<c.magenta>JSExport存在于</c>
<c.magenta>JavaScriptCore中</c>

00:37:59.613 --> 00:38:01.481
<c.magenta>JSExport存在于</c>
<c.magenta>JavaScriptCore中</c>

00:38:03.350 --> 00:38:08.622
<c.magenta>第二 我们需要使用</c>
<c.magenta>Swift定义我们的类</c>

00:38:08.755 --> 00:38:13.594
<c.magenta>扩展这个协议后然后将它暴露给原生类</c>

00:38:14.761 --> 00:38:18.699
<c.magenta>第三 对我们的类进行实例化</c>

00:38:18.765 --> 00:38:21.802
<c.magenta>或者将这个类本身暴露出来</c>

00:38:21.869 --> 00:38:26.273
<c.magenta>在TV应用控制器的代理上进行回调</c>

00:38:26.373 --> 00:38:30.511
<c.magenta>在控制权被交到JavaScript</c>
<c.magenta>之前准备JSContext</c>

00:38:30.577 --> 00:38:31.912
<c.magenta>在应用启动期间</c>

00:38:34.314 --> 00:38:38.418
<c.magenta>让我们看一个方法如何去</c>

00:38:38.485 --> 00:38:42.689
<c.magenta>对StoreKit进行包装</c>

00:38:42.756 --> 00:38:45.392
<c.magenta>如果我们想把购买的函数暴露给</c>

00:38:46.093 --> 00:38:47.194
<c.magenta>给JavaScript</c>

00:38:49.496 --> 00:38:52.599
<c.magenta>我们开始定义我们的协议</c>

00:38:53.367 --> 00:38:56.737
<c.magenta>在这里我们会指定属性和方法</c>

00:38:56.803 --> 00:39:00.073
<c.magenta>使用JavaScriptCore</c>
<c.magenta>为我们提供连接</c>

00:38:56.803 --> 00:39:00.073
<c.magenta>使用JavaScriptCore</c>
<c.magenta>为我们提供连接</c>

00:39:02.242 --> 00:39:04.378
<c.magenta>这里 我将把它作为stub</c>

00:39:04.444 --> 00:39:10.017
<c.magenta>看到我们扩展了JSExport且定义了</c>
<c.magenta>StoreKitWrapperProtocol的协议</c>

00:39:11.985 --> 00:39:16.590
<c.magenta>下一步我将为</c>
<c.magenta>StoreKit创建一个包装类</c>

00:39:16.657 --> 00:39:20.627
<c.magenta>扩展自NSObject</c>
<c.magenta>并且实现自定义的协议</c>

00:39:21.528 --> 00:39:23.997
<c.magenta>再次强调 我保留了存根的细节</c>

00:39:24.064 --> 00:39:27.100
<c.magenta>但是你要在存根出定义你的原生函数</c>

00:39:27.167 --> 00:39:29.203
<c.magenta>这函数你在</c>
<c.magenta>JavaScript中调用</c>

00:39:31.972 --> 00:39:37.177
<c.magenta>最后 我们实现</c>
<c.magenta>TVApplicationControllerDelegate方法</c>

00:39:37.578 --> 00:39:40.547
<c.magenta>在执行应用的</c>
<c.magenta>JavaScript上下文环境中</c>

00:39:41.148 --> 00:39:44.785
<c.magenta>这些会在app.onlaunch</c>
<c.magenta>执行之前调用</c>

00:39:44.852 --> 00:39:48.789
<c.magenta>并且允许我们去暴露我们自己的函数</c>

00:39:48.856 --> 00:39:51.658
<c.magenta>在将控制权移交给</c>
<c.magenta>JavaScript之前</c>

00:39:52.926 --> 00:39:54.528
<c.magenta>这就是关于原生语言调用</c>
<c.magenta>JavaScript的全部内容</c>

00:39:55.028 --> 00:39:57.431
<c.magenta>我们定义了一个原生类</c>

00:39:57.497 --> 00:39:59.399
<c.magenta>我们使用使用上述步骤</c>
<c.magenta>使这个类可访问</c>

00:39:59.466 --> 00:40:01.902
<c.magenta>对我们TVML应用</c>
<c.magenta>JavaScript来说</c>

00:39:59.466 --> 00:40:01.902
<c.magenta>对我们TVML应用</c>
<c.magenta>JavaScript来说</c>

00:40:04.938 --> 00:40:09.476
<c.magenta>在这个会议上 我们已看到</c>
<c.magenta>如何利用原生功能</c>

00:40:09.543 --> 00:40:12.212
<c.magenta>提升你的TVML应用</c>

00:40:13.580 --> 00:40:16.817
<c.magenta>你可以使用自定义的标记扩展模板</c>

00:40:17.317 --> 00:40:20.187
<c.magenta>为你自己的视图和视图集合cell</c>

00:40:20.687 --> 00:40:25.425
<c.magenta>在你的原生应用中</c>
<c.magenta>你可以获得TVMLKit</c>

00:40:25.492 --> 00:40:29.630
<c.magenta>或者在TVMLKit中</c>
<c.magenta>使用你的原生视图控制器</c>

00:40:31.098 --> 00:40:34.868
<c.magenta>你甚至可以在TVMLKit中</c>
<c.magenta>扩展脚本的环境</c>

00:40:35.035 --> 00:40:38.705
<c.magenta>连接原生类 应用程序事件</c>

00:40:39.206 --> 00:40:41.141
<c.magenta>和加载额外的库</c>

00:40:42.009 --> 00:40:46.847
<c.magenta>我们已经展示给大家</c>
<c.magenta>它是多么的简单去构建应用的特定功能</c>

00:40:46.914 --> 00:40:50.050
<c.magenta>在你的TVMLKit应用中</c>
<c.magenta>自定义自己的品牌</c>

00:40:50.918 --> 00:40:54.988
<c.magenta>在构建复杂应用时TVMLKit</c>
<c.magenta>提供的API是比较简单的</c>

00:40:55.055 --> 00:40:57.891
<c.magenta>构建高质量的应用和小的开销</c>

00:40:59.760 --> 00:41:02.629
<c.magenta>我希望你能看一下TVML指南</c>

00:40:59.760 --> 00:41:02.629
<c.magenta>我希望你能看一下TVML指南</c>

00:41:02.696 --> 00:41:05.566
<c.magenta>还有TVML目录下的应用实例</c>

00:41:05.632 --> 00:41:09.403
<c.magenta>获取更多的关于扩展和</c>
<c.magenta>使用TVMLKit的信息</c>

00:41:10.070 --> 00:41:12.372
<c.magenta>你也可以访问Apple开发者网站</c>

00:41:12.439 --> 00:41:15.843
<c.magenta>查看编程指南 示例代码和文档</c>

00:41:19.446 --> 00:41:24.484
<c.magenta>还可以留意今年 WWDC 2016</c>
<c.magenta>的其他演讲内容</c>

00:41:24.551 --> 00:41:28.222
<c.magenta>特别是使用TVMLKit</c>
<c.magenta>开发应用的第一部分</c>

00:41:28.288 --> 00:41:32.226
<c.magenta>里面展示了构建一个完整应用的全过程</c>

00:41:33.126 --> 00:41:36.964
<c.magenta>谢谢 希望大家在WWDC 2016</c>
<c.magenta>余下的演讲中玩得愉快</c>
