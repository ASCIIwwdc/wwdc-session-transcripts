WEBVTT

00:00:19.453 --> 00:00:26.460
使用Core Motion
以健康和健身

00:00:27.427 --> 00:00:28.262
谢谢

00:00:28.962 --> 00:00:29.796
大家好

00:00:30.297 --> 00:00:32.598
下午好 欢迎

00:00:33.233 --> 00:00:34.535
我是Bharath Rao

00:00:34.601 --> 00:00:36.737
是Core Motion团队工程师

00:00:37.004 --> 00:00:41.542
今天我很高兴和你们谈谈健康和
健身

00:00:42.376 --> 00:00:46.313
在这次演讲中 我会向你们展示
如何使用Core Motion框架

00:00:46.380 --> 00:00:50.551
来增加一些有趣和迷人的特性

00:00:50.617 --> 00:00:51.652
到你的应用

00:00:53.187 --> 00:00:54.454
在我们开始前

00:00:54.521 --> 00:00:56.390
对Core Motion新手们

00:00:56.456 --> 00:00:59.626
我想要提醒你去观看一些我们过去
的演讲

00:00:59.860 --> 00:01:04.031
他们有一些很好的信息
关于传感器是怎么工作的

00:00:59.860 --> 00:01:04.031
他们有一些很好的信息
关于传感器是怎么工作的

00:01:04.096 --> 00:01:07.267
及怎么在Core Motion中
使用这些传感器

00:01:07.334 --> 00:01:14.041
来提供API来帮助你的应用观察
统计和活动

00:01:14.107 --> 00:01:16.176
和设备Motion及其他很多

00:01:16.577 --> 00:01:17.444
请去看它们

00:01:18.946 --> 00:01:20.814
有了那些 让我们开始

00:01:21.481 --> 00:01:23.517
这是我们今天为你们准备好的

00:01:23.917 --> 00:01:26.153
我有一个对历史加速仪的更新

00:01:26.220 --> 00:01:27.721
我希望和你们分享

00:01:29.189 --> 00:01:34.328
我们有一个新计步器事件API
针对iPhone和Apple Watch

00:01:35.462 --> 00:01:38.932
最后我们会把
设备Motion API带到

00:01:38.999 --> 00:01:41.468
Apple Watch和
watchOS 3一起

00:01:44.771 --> 00:01:45.606
谢谢

00:01:48.709 --> 00:01:51.478
首先是历史加速仪

00:01:54.414 --> 00:01:57.918
去年我们介绍了CM传感器记录API

00:01:58.118 --> 00:01:59.386
有了这个API

00:01:59.453 --> 00:02:03.223
你的应用可以访问原始的加速仪采样

00:01:59.453 --> 00:02:03.223
你的应用可以访问原始的加速仪采样

00:02:03.290 --> 00:02:04.758
或很长一段时间的采样

00:02:05.192 --> 00:02:08.027
而且你只需要用很少的电量来访问

00:02:08.895 --> 00:02:12.866
当你的应用请求框架开始录制这些采样

00:02:12.933 --> 00:02:16.670
他们可以暂停
而且操作系统会提供那些采样

00:02:16.737 --> 00:02:18.272
即使设备在休眠中

00:02:18.338 --> 00:02:20.541
当你的应用准备好使用那些采样

00:02:20.607 --> 00:02:22.976
它们可以启动并发送一个请求

00:02:23.043 --> 00:02:26.213
并且获得对所有缓冲了的采样的
访问

00:02:28.916 --> 00:02:32.319
在watchOS 3中
我们有一系列重要更新

00:02:32.386 --> 00:02:34.855
首先是更长的时间

00:02:35.789 --> 00:02:40.093
现在你的应用有一个36小时的窗口
在其中它们可以启动

00:02:40.160 --> 00:02:43.931
并且获得对所有历史加速仪采样
的访问

00:02:45.899 --> 00:02:48.235
第二个更新应该不会让你们吃惊

00:02:48.302 --> 00:02:51.805
它是对于API被请求最多的更新之一

00:02:52.139 --> 00:02:54.474
所以我很高兴宣布
在watchOS 3中

00:02:54.541 --> 00:02:57.778
现在采样的延迟只有3秒了

00:03:00.547 --> 00:03:03.417
有了这个更新现在你可以使用传感器
记录器

00:03:03.483 --> 00:03:07.421
不仅仅是观测用户活动
或者是长时间

00:03:07.487 --> 00:03:09.857
而且有一些实时应用

00:03:09.923 --> 00:03:12.059
对这些应用你现在可以使用传感器
记录器

00:03:12.125 --> 00:03:13.327
也许

00:03:14.928 --> 00:03:18.632
来追踪体育活动或者记录健身房
里的健身

00:03:18.699 --> 00:03:20.133
或者甚至是健康诊断

00:03:20.667 --> 00:03:24.638
想像应用在Apple Watch上
可以侦测手颤

00:03:24.705 --> 00:03:28.408
现在每当用户发生一些手颤

00:03:28.642 --> 00:03:29.810
他们可以启动应用

00:03:30.177 --> 00:03:33.814
你的应用将能够获得所有历史
加速仪采样

00:03:34.281 --> 00:03:35.916
对它们进行一些分析

00:03:35.983 --> 00:03:40.921
得到一个报告说那个手颤有多严重

00:03:40.988 --> 00:03:43.156
并且是哪种颤动

00:03:43.223 --> 00:03:46.727
并和用户分享它
还可能在获得同意的情况下分享给医生

00:03:46.793 --> 00:03:51.565
所以这样可以对这种病症加速
诊断和治疗

00:03:53.267 --> 00:03:57.237
在watchOS 3中
对历史加速仪的更新是很好的

00:03:57.804 --> 00:03:59.940
下一个是计步器

00:04:06.380 --> 00:04:09.082
CMPedometer是
一个多用的API

00:04:09.650 --> 00:04:13.854
它记录统计和距离
以及阶梯步级

00:04:13.921 --> 00:04:16.356
用户在一天中所爬的阶梯步级

00:04:16.423 --> 00:04:19.593
这样你可以用它来创造一个全天
活动的追踪器

00:04:19.660 --> 00:04:22.896
你可以设置一些有趣的目标让用户
来达到

00:04:22.996 --> 00:04:26.366
通过这样你激励他们达到一个
更健康的生活方式

00:04:27.301 --> 00:04:33.040
但是CMPedometer真正强大
之处是在锻炼的环境中

00:04:34.107 --> 00:04:36.476
比如速度测量

00:04:36.543 --> 00:04:41.181
我们有步幅估计算法在iPhone
和Apple Watch上运行

00:04:41.515 --> 00:04:42.716
使用这些

00:04:42.950 --> 00:04:46.553
我们可以提供相当精确的速度和
距离测量

00:04:46.620 --> 00:04:49.089
即使手机没有GPS信号

00:04:49.156 --> 00:04:51.225
或你带着Apple Watch跑步

00:04:51.291 --> 00:04:52.860
你没有带手机

00:04:53.060 --> 00:04:55.929
即使这样用户得到非常精确的测量

00:04:56.997 --> 00:05:00.133
我们今天增加的计步器事件API

00:04:56.997 --> 00:05:00.133
我们今天增加的计步器事件API

00:05:00.701 --> 00:05:04.671
实际上会帮你使那些健身体验

00:05:04.738 --> 00:05:06.940
更吸引人更精确

00:05:09.776 --> 00:05:13.580
让我们设想一个典型的跑步健身
在地市里跑步

00:05:14.014 --> 00:05:15.382
做为第三方开发者

00:05:15.716 --> 00:05:18.519
你在这种情况下会面对的挑战之一是

00:05:18.585 --> 00:05:20.988
如何侦测所有的那些开始和停止

00:05:21.054 --> 00:05:24.892
当用户在城市里跑步时在十字路口
发生的

00:05:25.392 --> 00:05:27.961
用户在红灯的时候停下来

00:05:28.028 --> 00:05:33.333
你的应用会继续累加他们站立不动
的时间

00:05:34.101 --> 00:05:36.570
在他们完成跑步的时候

00:05:36.970 --> 00:05:39.039
你已经累加了足够的时间

00:05:39.106 --> 00:05:43.110
如果你试着计算他们的整个跑步
的平均速度

00:05:43.177 --> 00:05:47.481
你的结果可能和他们的爷爷的
速度相似

00:05:50.117 --> 00:05:53.487
也许爷爷的速度比他们快 没关系

00:05:53.687 --> 00:05:59.092
我想说的是你会得到一个非常
不精确的速度

00:05:59.159 --> 00:06:01.795
有可能远远小于他们跑步的速度

00:05:59.159 --> 00:06:01.795
有可能远远小于他们跑步的速度

00:06:02.362 --> 00:06:04.231
一个可能的解决方法是

00:06:04.298 --> 00:06:07.801
你可以提供手动的暂停和继续
选项

00:06:08.402 --> 00:06:10.237
但是现在一旦他们暂停了

00:06:10.304 --> 00:06:14.308
他们需要记得当他们开始跑步时
继续这次锻炼

00:06:14.608 --> 00:06:18.812
如果他们没有这么做所有他们在
应用暂停时跑的步

00:06:18.879 --> 00:06:21.481
不会被记录在锻炼中

00:06:21.548 --> 00:06:25.752
所以如果他们忘记暂停
他们会得到不精确的速度

00:06:25.819 --> 00:06:29.389
如果他们忘记继续
他们失去距离

00:06:30.524 --> 00:06:35.562
很明显你需要一些自动暂停和继续
的侦测

00:06:35.629 --> 00:06:38.699
不但要精确 还要响应快速

00:06:38.765 --> 00:06:40.767
需要感觉你的应用

00:06:40.834 --> 00:06:44.438
能很好的侦测那些开始和停止

00:06:45.706 --> 00:06:48.976
此时你可能在想为什么不用GPS
和步数

00:06:49.042 --> 00:06:51.578
毕竟你的应用可以访问那些

00:06:53.013 --> 00:06:54.581
如果你以前用过GPS

00:06:54.648 --> 00:06:57.484
你知道你不得不做大量的过滤工作

00:06:57.551 --> 00:06:59.319
这样你可以移除噪声

00:06:59.720 --> 00:07:02.723
也就是说响应会很慢

00:06:59.720 --> 00:07:02.723
也就是说响应会很慢

00:07:03.524 --> 00:07:06.393
而你从CMPedometer
得到的步数

00:07:06.460 --> 00:07:07.628
它有一个内置的延迟

00:07:07.995 --> 00:07:11.298
我们这样做因为我们想避免误报

00:07:11.665 --> 00:07:13.867
我们用步数来估计步幅

00:07:14.168 --> 00:07:16.270
从那我们计算距离和速度

00:07:16.336 --> 00:07:18.105
所以这对我们很重要

00:07:18.172 --> 00:07:22.676
首先有精确的步数计数

00:07:25.412 --> 00:07:28.715
所以在这个版本中
我们给你计步器事件

00:07:28.782 --> 00:07:31.685
会帮助你侦测那些开始和停止

00:07:31.752 --> 00:07:35.122
不但有好的精确度
而且延迟低

00:07:36.223 --> 00:07:40.761
我们的计步器事件解决方案
或者自动暂停继续方案

00:07:40.827 --> 00:07:42.496
使用一个预测算法

00:07:42.996 --> 00:07:45.632
这个预测算法用用户数据进行训练

00:07:45.699 --> 00:07:47.901
所以我们可以提高估计的似然度

00:07:47.968 --> 00:07:52.039
关于用户是运动中还是完全静止？

00:07:52.506 --> 00:07:54.508
当然都是在徒步的情况下

00:07:55.576 --> 00:07:59.112
通过这么做我们可以弥补大部分

00:07:59.179 --> 00:08:01.982
和步数计数算法相关的延迟

00:07:59.179 --> 00:08:01.982
和步数计数算法相关的延迟

00:08:02.316 --> 00:08:05.219
但是我们可以这样做并有很好
的精度

00:08:07.621 --> 00:08:08.956
我还想要指出

00:08:09.022 --> 00:08:12.993
因为预测算法一直追踪用户是否
在移动

00:08:13.060 --> 00:08:14.895
或者他们停下来了

00:08:15.229 --> 00:08:17.698
我们还支持步行速度

00:08:17.764 --> 00:08:21.034
当用户停下来

00:08:21.802 --> 00:08:24.938
不论是从走路还是跑步
你会得到一个暂停事件

00:08:25.005 --> 00:08:28.008
一旦用户开始跑或走

00:08:28.075 --> 00:08:30.410
你会在应用中得到一个继续事件

00:08:32.412 --> 00:08:37.017
计步器事件API在iOS X和
watchOS 3上看起来是一样的

00:08:38.852 --> 00:08:40.821
让我们来看看API

00:08:42.789 --> 00:08:44.591
你有暂停和继续事件

00:08:45.192 --> 00:08:47.427
每个事件都包括一个具体时间

00:08:47.494 --> 00:08:51.598
算法发现从运行变成非运动
状态的时间

00:08:51.665 --> 00:08:52.566
以及反过来

00:08:53.233 --> 00:08:55.736
你需要开始和停止更新

00:08:56.103 --> 00:08:59.006
来帮助你的应用注册和取消注册
这些事件

00:09:01.842 --> 00:09:06.180
我一直在说计步器事件会怎么

00:09:06.246 --> 00:09:09.783
被用来清楚划分跑步的阶段

00:09:09.850 --> 00:09:12.085
在一次完整的跑步锻炼中

00:09:12.452 --> 00:09:15.956
以用你能怎样用它来得到精确的
测量

00:09:16.723 --> 00:09:20.994
但是你还有其他有趣的计步器用法

00:09:21.128 --> 00:09:22.863
让我们看一个例子

00:09:24.164 --> 00:09:26.667
这是一个iPhone上的越野跑应用

00:09:26.934 --> 00:09:29.803
所以我们会用计步器事件来看

00:09:30.571 --> 00:09:33.040
来找出什么时候我们能够与用户
衔接

00:09:33.106 --> 00:09:37.177
以及当我们这么做时我们能够
怎样向他们显示一些有趣的信息

00:09:37.244 --> 00:09:41.348
能让他们响应更多的活动

00:09:42.282 --> 00:09:44.117
因为这是越野跑应用

00:09:44.184 --> 00:09:46.320
整个跑步过程中会有高度的变化

00:09:46.386 --> 00:09:49.623
我们要看看这是否会有一些有意义
的信息

00:09:54.228 --> 00:09:56.530
我们会用CMPedometer类

00:09:56.597 --> 00:09:58.665
来注册暂停和继续事件

00:09:58.732 --> 00:10:01.235
我们还会得到相关的高度更新

00:09:58.732 --> 00:10:01.235
我们还会得到相关的高度更新

00:10:01.301 --> 00:10:04.838
或者海拔高度的变化
使用CMAltimeter类

00:10:06.840 --> 00:10:10.043
如果你想要继续在应用中
接收计步器事件

00:10:10.110 --> 00:10:11.678
即使屏幕关闭

00:10:11.745 --> 00:10:13.514
你的应用必须保持运行

00:10:14.615 --> 00:10:16.583
在iPhone这么做的一个方法

00:10:16.650 --> 00:10:19.920
是订阅持续后台位置

00:10:20.153 --> 00:10:22.389
如果你对知道更多相关信息有兴趣

00:10:22.456 --> 00:10:26.393
我建议你去看Core Location最佳实践
演讲

00:10:26.460 --> 00:10:28.462
会在今天的 WWDC 举行

00:10:30.264 --> 00:10:33.133
接下来我们会首先注册相关的
高度更新

00:10:33.200 --> 00:10:34.968
并检查可用性

00:10:35.035 --> 00:10:37.604
然后我们提供一个操作队列

00:10:37.671 --> 00:10:41.141
并提供一个回调处理器来开始
接收那些更新

00:10:41.875 --> 00:10:46.713
在这个例子中我会记录最近的更新

00:10:46.780 --> 00:10:50.717
但是可能在你的应用中
你可以缓存所有更新

00:10:50.918 --> 00:10:53.654
在锻炼结束时你可能可以提供

00:10:53.720 --> 00:10:56.757
一个漂亮的整个跑步过程的高度
轮廓

00:10:59.393 --> 00:11:01.962
接下来我们会注册计步器事件本身

00:10:59.393 --> 00:11:01.962
接下来我们会注册计步器事件本身

00:11:02.029 --> 00:11:03.597
首先还是检查是否存在

00:11:03.764 --> 00:11:06.967
然后通过提供回调处理器来注册

00:11:08.335 --> 00:11:13.140
这只是一个小提示来确保我不会
面临并发问题

00:11:13.207 --> 00:11:17.044
我会工作在来自同样的操作队列上
的所有处理器

00:11:19.680 --> 00:11:23.317
现在这个应用被设置成找出

00:11:23.383 --> 00:11:26.720
什么时候用户开始和停止跑步

00:11:27.521 --> 00:11:31.225
我们准备好看一下它们是否能用在
一个有前后关系的方式中

00:11:31.792 --> 00:11:35.262
他们一开始跑步我们就会在应用中
收到继续事件

00:11:36.096 --> 00:11:37.664
在这时你可以

00:11:38.532 --> 00:11:41.768
记录下你收到继续事件的时间

00:11:41.835 --> 00:11:43.670
那么在锻炼完成时

00:11:43.737 --> 00:11:46.974
你可以把所有跑步时间加起来

00:11:47.474 --> 00:11:51.378
来计算整次跑步的精确的平均速度

00:11:51.845 --> 00:11:56.683
在这个例子中我会记录下最近的
高度更新

00:11:56.750 --> 00:12:00.554
这样我就知道他们开始跑步时是
在什么高度开始的

00:11:56.750 --> 00:12:00.554
这样我就知道他们开始跑步时是
在什么高度开始的

00:12:01.755 --> 00:12:03.490
当用户停止时

00:12:03.557 --> 00:12:06.326
现在是个很好的机会来找出

00:12:06.560 --> 00:12:09.963
因为我们有高度 我们可以找出
是不是他们在跑上一座山

00:12:10.764 --> 00:12:13.634
如果是的
这可能是他们第一次在山上跑步

00:12:13.700 --> 00:12:16.537
为什么不给他们一个登山包成就

00:12:17.237 --> 00:12:20.040
如果他们已经在山上跑了多次

00:12:20.107 --> 00:12:24.378
因为我们有每次跑步的精确时间

00:12:24.611 --> 00:12:25.879
现在我们可以比较它们

00:12:25.946 --> 00:12:29.716
并且给它们一个统计
关于他们在特定的山上跑步中做得怎样

00:12:31.084 --> 00:12:34.388
这是我们使用计步器事件的一个
例子

00:12:34.454 --> 00:12:37.357
不仅仅达到非常精确的测量

00:12:37.424 --> 00:12:39.059
还划分那些跑步阶段

00:12:39.126 --> 00:12:42.663
这也是一个你可以使用

00:12:42.729 --> 00:12:44.965
那些事件来做些有趣的事的例子

00:12:46.700 --> 00:12:47.601
在跑步的最后

00:12:47.668 --> 00:12:50.537
当然你要取消那些注册

00:12:50.604 --> 00:12:52.406
这也会释放

00:12:52.472 --> 00:12:55.342
所有框架中的处理器代码块

00:12:57.077 --> 00:13:00.781
计步器事件在iPhone 6s
和更新发布的iPhone中可用

00:12:57.077 --> 00:13:00.781
计步器事件在iPhone 6s
和更新发布的iPhone中可用

00:13:00.848 --> 00:13:02.316
还有Apple Watch

00:13:03.350 --> 00:13:06.954
这就是iOS X和
watchOS 3中的计步器

00:13:08.422 --> 00:13:10.290
接下来让我们谈谈设备Motion

00:13:12.860 --> 00:13:14.261
如你所知

00:13:14.328 --> 00:13:18.065
设备Motion API自从
iOS 5起就存在iPhone上

00:13:18.832 --> 00:13:23.804
有了watchOS 3 我们把相同
API带到了Apple Watch

00:13:26.340 --> 00:13:29.943
Apple Watch上
有非常强大的传感器包

00:13:30.010 --> 00:13:34.314
它是在我们手腕上一个固定的位置
并且我们全天都在使用

00:13:34.715 --> 00:13:36.283
因为我们用手

00:13:36.350 --> 00:13:38.719
来做几乎任何事
在我们全天做的事中

00:13:38.785 --> 00:13:42.956
这是一个很强大的工具
来观察用户的所有活动

00:13:43.857 --> 00:13:45.325
设备Motion所做的就是

00:13:45.392 --> 00:13:48.729
获得加速仪和陀螺仪的采样

00:13:48.795 --> 00:13:49.796
它融合这些

00:13:50.030 --> 00:13:53.333
来清楚地告诉你用户的所有活动

00:13:53.400 --> 00:13:55.469
这些就在你的手腕上

00:13:57.237 --> 00:14:00.474
所有手腕上的motion被描述成
设备Motion

00:13:57.237 --> 00:14:00.474
所有手腕上的motion被描述成
设备Motion

00:14:00.541 --> 00:14:02.409
使用四个不同的属性

00:14:02.843 --> 00:14:07.414
姿态 重力 旋转速度和用户加速度

00:14:09.917 --> 00:14:14.021
如果你想详细知道这些属性是如何
导出的

00:14:14.087 --> 00:14:15.255
以及它们的作用

00:14:15.322 --> 00:14:19.693
我鼓励你去看2011
和2012年的演讲

00:14:20.561 --> 00:14:24.464
在这个演讲中我会给你非常简短
的关于这些属性的概述

00:14:24.531 --> 00:14:26.333
这样我们可以建立一些灌输

00:14:26.600 --> 00:14:30.270
以及用例子看看你能怎么使用它们

00:14:30.337 --> 00:14:33.173
在一些健康和健身应用中
用有趣的方式

00:14:34.274 --> 00:14:36.443
第一个属性是姿态

00:14:37.578 --> 00:14:39.246
在你的应用中使用姿态

00:14:39.313 --> 00:14:44.618
你可以获得对设备方向和空间的观测

00:14:45.118 --> 00:14:49.723
你用CMDeviceMotion时
你获得三个姿态属性

00:14:50.457 --> 00:14:54.428
是四元数 旋转矩阵 和欧拉角度

00:14:55.362 --> 00:14:57.731
当你在应用内使用姿态

00:14:57.798 --> 00:14:59.132
需要注意的一件事是

00:14:59.199 --> 00:15:01.368
每一个姿态观测

00:14:59.199 --> 00:15:01.368
每一个姿态观测

00:15:01.435 --> 00:15:04.771
都和一个固定的参考坐标系是相对的

00:15:05.939 --> 00:15:07.407
这的意思是

00:15:07.474 --> 00:15:09.610
每一个方向观测

00:15:09.676 --> 00:15:13.380
是通过一个不是固定在设备上的
点进行的

00:15:13.447 --> 00:15:17.451
参考坐标系保持静止
但设备可以到处移动

00:15:17.518 --> 00:15:20.921
这就是你如何用姿态来观测方向

00:15:22.723 --> 00:15:23.991
而且

00:15:24.391 --> 00:15:27.861
你的应用注册来开始接收更新的时间

00:15:27.928 --> 00:15:30.697
是参考坐标系设定的时间

00:15:30.764 --> 00:15:34.168
所以你的应用接下来收到的采样

00:15:34.234 --> 00:15:35.602
会被计算

00:15:35.669 --> 00:15:40.440
用开始更新时设定的相对参考坐标系
计算

00:15:40.707 --> 00:15:46.146
这是你在应用中使用姿态时需要注意的

00:15:46.513 --> 00:15:48.815
而且你不要做假设

00:15:48.882 --> 00:15:52.486
关于设备在绝对空间中的方向的假设

00:15:54.087 --> 00:15:55.989
下一个属性是重力

00:15:57.591 --> 00:15:58.725
重力是

00:15:59.793 --> 00:16:04.231
它是重力 把物体拉向地心的力

00:15:59.793 --> 00:16:04.231
它是重力 把物体拉向地心的力

00:16:04.298 --> 00:16:05.732
在设备Motion中

00:16:05.799 --> 00:16:08.635
它在设备坐标系里被表示成单位矢量

00:16:09.636 --> 00:16:15.709
使用重力你可以观测设备的翻转
和倾斜

00:16:16.977 --> 00:16:20.948
但是你可能会问 难道翻转和倾斜
不也和姿态一样是方向吗？

00:16:21.014 --> 00:16:22.516
但是一个关键的不同是

00:16:22.583 --> 00:16:26.787
现在你从设备坐标系中观测所有方向

00:16:27.054 --> 00:16:31.325
比如如果我要保持我的手完美的
和地面平行

00:16:31.391 --> 00:16:34.261
在我的两侧
然后我把它移到我的前面

00:16:34.761 --> 00:16:36.597
你无法用重力观测到这

00:16:36.663 --> 00:16:40.501
因为重力的x y z成分会维持不变

00:16:40.567 --> 00:16:42.202
在这两个方向中

00:16:42.503 --> 00:16:44.238
要观测像这样的情况
你需要

00:16:44.304 --> 00:16:47.341
一个观测点是外部的或固定的

00:16:47.841 --> 00:16:50.377
当设备移动时
这就是姿态

00:16:50.444 --> 00:16:53.680
所以你可以用重力来观测方向

00:16:53.747 --> 00:16:55.716
但是在有限的情况下

00:16:56.083 --> 00:17:00.053
但是在你所设想的应用中
这可能工作得很好

00:16:56.083 --> 00:17:00.053
但是在你所设想的应用中
这可能工作得很好

00:17:01.555 --> 00:17:03.390
关于重力的另一件事是

00:17:03.457 --> 00:17:05.659
当你拿着设备并完全静止时

00:17:05.726 --> 00:17:07.861
你可以用加速仪观测它

00:17:07.928 --> 00:17:11.198
加速仪会得到一个固定的加速度

00:17:11.431 --> 00:17:14.434
你可以从加速仪中读出它

00:17:15.135 --> 00:17:17.704
但是一旦你开始移动设备

00:17:17.771 --> 00:17:20.674
这时加速仪获取的不光是重力成分

00:17:20.741 --> 00:17:24.211
它还获取所有用户产生的motion

00:17:24.611 --> 00:17:27.881
这会使只获得重力成分越来越难

00:17:28.515 --> 00:17:31.618
设备Motion所做的是使用融合

00:17:31.685 --> 00:17:37.291
我们转而用陀螺仪来追踪重力单位
矢量

00:17:40.227 --> 00:17:42.829
下一个属性是旋转率

00:17:43.397 --> 00:17:47.134
就像名字暗示的
这是角度motion的变化率

00:17:47.568 --> 00:17:50.470
这很适合用来观测一些事
比如手腕的旋转

00:17:50.537 --> 00:17:52.272
当你旋转手腕时

00:17:52.339 --> 00:17:55.075
会有一个围绕设备x轴
的旋转motion

00:17:55.142 --> 00:17:57.544
你可以用旋转率观测它

00:17:58.212 --> 00:18:01.148
你还可以观测围绕身体的任何旋转

00:17:58.212 --> 00:18:01.148
你还可以观测围绕身体的任何旋转

00:18:01.381 --> 00:18:05.686
因为我们的大多数
固定我们的躯干活动我们的手臂

00:18:05.752 --> 00:18:08.722
所以会有一些弓形的motion

00:18:08.789 --> 00:18:11.091
所以有旋转并且你可以观测到它

00:18:11.425 --> 00:18:14.661
利用设备Motion的旋转率属性

00:18:17.364 --> 00:18:19.967
最后一个属性是用户加速度

00:18:20.234 --> 00:18:23.136
你通过设备Motion得到的用户
加速度

00:18:23.203 --> 00:18:24.705
是对重力的抵消

00:18:25.172 --> 00:18:28.041
回忆一下我提过的加速仪怎么获取

00:18:28.108 --> 00:18:30.844
重力成分和用户产生的成分

00:18:30.911 --> 00:18:33.213
而这仅仅是用户产生的成分

00:18:33.614 --> 00:18:36.817
但是它抵消了导出的重力

00:18:36.884 --> 00:18:39.553
使用设备传感器融合导出的重力

00:18:41.021 --> 00:18:44.424
这就是对这些属性的快速概述

00:18:44.625 --> 00:18:48.795
现在让我们看看你可以怎样在应用中
使用它们的一些例子

00:18:50.764 --> 00:18:52.799
第一个属性是姿态

00:18:53.066 --> 00:18:57.671
姿态很适合用来
观察任何重复motion

00:18:57.838 --> 00:19:01.909
像是对举重进行计数
所以当你举起重物时

00:18:57.838 --> 00:19:01.909
像是对举重进行计数
所以当你举起重物时

00:19:01.975 --> 00:19:05.612
你实际上进行了一系列方向的改变

00:19:05.679 --> 00:19:10.484
所以通过观察这些方向改变是如何
重复的

00:19:10.817 --> 00:19:12.019
你可以计算次数

00:19:12.286 --> 00:19:14.655
使用姿态来这样做最好的部分是

00:19:14.721 --> 00:19:17.658
现在他们可能使用一种机器
他们拉在

00:19:17.724 --> 00:19:19.660
水平方向或者从上面

00:19:19.726 --> 00:19:22.596
你可以用姿态观测到所有重复

00:19:24.665 --> 00:19:28.335
重力 像我已经提到的
很适合用来测量翻转和倾斜

00:19:28.802 --> 00:19:32.306
这表明你可以把它用在瑜珈应用中

00:19:32.372 --> 00:19:37.778
所以如果他们在做一个下犬式
或者保持一个战士式姿势

00:19:37.845 --> 00:19:40.714
你可以得出他们能保持姿势在多
静止的状态

00:19:41.014 --> 00:19:43.817
当他们从一个姿势变换到另一个
姿势时

00:19:43.884 --> 00:19:47.221
你可以发现他们是用优雅的方式
这样做

00:19:47.287 --> 00:19:48.989
还是只是摔倒了

00:19:52.926 --> 00:19:57.130
旋转率最有用的使用方法是

00:19:57.197 --> 00:19:59.566
观测旋转motion的速度

00:19:59.867 --> 00:20:01.835
比如以棒球练习为例

00:19:59.867 --> 00:20:01.835
比如以棒球练习为例

00:20:01.902 --> 00:20:04.071
当你挥棒时

00:20:04.371 --> 00:20:06.740
你不只是围绕身体旋转你的手臂

00:20:06.807 --> 00:20:08.976
还有围绕手腕的旋转

00:20:09.076 --> 00:20:12.179
你可以用旋转率的这两个成分

00:20:12.246 --> 00:20:13.881
来估计挥棒速度

00:20:14.114 --> 00:20:16.917
当然你需要知道棒的长度

00:20:16.984 --> 00:20:19.820
以及要在棒上的哪点测量速度

00:20:22.356 --> 00:20:26.360
用户加速度最好用在有一些突然
的motion时

00:20:26.660 --> 00:20:30.964
因为加速仪捕捉所有用户正在进行
的motion

00:20:31.031 --> 00:20:33.867
如果你想开发一种应用

00:20:33.934 --> 00:20:37.070
你用用户加速度来测量一些小的
运动

00:20:37.137 --> 00:20:38.839
可能会被噪声淹没

00:20:39.139 --> 00:20:44.111
有突然的motion的地方是最适合
用用户加速度的

00:20:44.378 --> 00:20:46.079
比如击拳和反冲

00:20:46.146 --> 00:20:51.018
你可以知道他们打中沙包有多痛

00:20:51.084 --> 00:20:54.388
或者是对手
希望那是空气制造的

00:20:56.690 --> 00:20:59.793
这只是一部分例子

00:20:59.860 --> 00:21:02.529
你能怎样在应用中
使用设备Motion

00:20:59.860 --> 00:21:02.529
你能怎样在应用中
使用设备Motion

00:21:03.163 --> 00:21:04.665
在看过这些之后

00:21:04.731 --> 00:21:07.801
若你觉得你有一个
可以使用设备Motion的应用的想法

00:21:07.868 --> 00:21:11.171
而且想知道更多
关于如何应用设备Motion

00:21:11.605 --> 00:21:13.740
请在明天到我们的实验室去

00:21:13.807 --> 00:21:16.577
我们会很高兴帮助你

00:21:18.579 --> 00:21:21.849
现在让我们看看API
你有四个属性

00:21:21.915 --> 00:21:25.385
姿态和重力 它们没单位
重力是单位矢量

00:21:25.919 --> 00:21:30.691
用户加速度的单位是G
旋转率的单位是弧度每秒

00:21:32.893 --> 00:21:36.363
在你可以在你的应用内接收
设备Motion更新前

00:21:36.430 --> 00:21:38.298
你需要设定它们的采样率

00:21:38.799 --> 00:21:41.301
你可以设定采样率最高到100赫兹

00:21:41.635 --> 00:21:43.370
一旦你设定了采样率

00:21:43.437 --> 00:21:47.541
你可以去注册更新
使用开始更新这个方法

00:21:48.742 --> 00:21:49.943
从这之后

00:21:50.010 --> 00:21:53.547
你可以选择周期性
获取设备Motion属性

00:21:53.614 --> 00:21:55.482
获得最新采样

00:21:55.949 --> 00:21:58.919
或者你可以提供一个回调处理器
你可以获得

00:21:58.986 --> 00:22:02.222
设备Motion为你产生的
每一个更新

00:21:58.986 --> 00:22:02.222
设备Motion为你产生的
每一个更新

00:22:03.957 --> 00:22:07.861
当然一旦你完成了
监听设备Motion更新

00:22:07.928 --> 00:22:11.965
你可以取消注册
使用stopDeviceMotionUpdates方法

00:22:13.500 --> 00:22:16.069
我的演讲就是这些了

00:22:16.136 --> 00:22:18.906
现在我要把讲台交给Paul
他会带你们

00:22:18.972 --> 00:22:21.675
看一个Apple Watch
的示例应用

00:22:21.742 --> 00:22:24.211
用一种有趣的方法
使用设备Motion

00:22:24.878 --> 00:22:26.747
谢谢 给你 Paul

00:22:33.954 --> 00:22:34.888
谢谢Bharath

00:22:36.156 --> 00:22:36.990
大家好

00:22:37.658 --> 00:22:40.060
我是Paul Thompson
我是Core Motion工程师

00:22:41.428 --> 00:22:43.730
Bharath刚谈了Core
Motion API的新特性

00:22:44.498 --> 00:22:47.134
我要做的是向你们展示怎样使用
它们中的一个

00:22:47.201 --> 00:22:48.669
在一个Apple Watch
健身应用中

00:22:50.370 --> 00:22:51.305
在这个应用中

00:22:51.805 --> 00:22:54.408
我们要做的是创建一次网球
锻炼

00:22:54.641 --> 00:22:58.011
然后我们会向设备Motion
订阅传感器更新

00:22:59.179 --> 00:23:01.481
最后我们会侦测挥拍

00:22:59.179 --> 00:23:01.481
最后我们会侦测挥拍

00:23:01.548 --> 00:23:04.484
并区分正手和反手挥拍

00:23:05.953 --> 00:23:09.890
要这么做我们需要做的是利用
Core Motion的功能

00:23:10.490 --> 00:23:12.593
和一些HealthKit的新功能

00:23:14.461 --> 00:23:15.863
你们可能记得

00:23:16.830 --> 00:23:20.067
watchOS 2应用高度依赖
HealthKit和Core Motion

00:23:20.133 --> 00:23:22.236
来进行实时分析和传感器输出

00:23:22.569 --> 00:23:24.838
并提供给你数据
比如步数

00:23:24.905 --> 00:23:27.941
步级 距离和热量消耗估计

00:23:28.742 --> 00:23:30.944
现在在一次锻炼中

00:23:31.345 --> 00:23:35.749
你的应用做有限的工作来处理
设备Motion采样

00:23:35.816 --> 00:23:38.051
当用户并没有直接进入你的应用中

00:23:40.220 --> 00:23:43.290
但是当然
这个功能也带来一些警告

00:23:44.424 --> 00:23:47.761
开始你必须启用了
新的HealthKit授权

00:23:47.828 --> 00:23:48.996
在Xcode项目中

00:23:50.564 --> 00:23:53.767
进一步 后台工作只能

00:23:53.834 --> 00:23:55.536
在一次活动的锻炼中被完成

00:23:58.705 --> 00:23:59.540
除此以外

00:24:00.040 --> 00:24:03.043
当处于后台时
你必须最小化CPU使用

00:24:04.077 --> 00:24:07.314
否则你的应用会被暂停

00:24:07.514 --> 00:24:09.850
直到用户明确的把它调入前台

00:24:13.320 --> 00:24:16.223
因为后台能力是
由HealthKit提供的

00:24:16.690 --> 00:24:19.893
我鼓励观看早前的演讲来了解更多
关于它的细节

00:24:22.196 --> 00:24:25.098
考虑到这点 让我们想想我们的
应用看起来是什么样的

00:24:26.466 --> 00:24:29.102
有了应用
你可能想和你的朋友

00:24:29.169 --> 00:24:31.238
戴着Apple Watch去网球场

00:24:31.305 --> 00:24:32.940
进行一些截击练习

00:24:33.874 --> 00:24:37.377
你简单地开始一个快速锻炼
来回击球

00:24:39.613 --> 00:24:42.182
然后你希望在任何时候

00:24:42.249 --> 00:24:45.986
你快速地看一眼watch
可以获得一些媒体反馈

00:24:53.260 --> 00:24:56.530
考虑到这些 让我们想想我们
项目的结构

00:24:57.097 --> 00:24:59.433
会有三层我们需要考虑

00:25:00.934 --> 00:25:01.835
首先是UI

00:25:02.135 --> 00:25:04.371
我们最终要向用户显示我们做了什么

00:25:05.672 --> 00:25:08.008
然后我们有锻炼管理器

00:25:08.876 --> 00:25:10.711
我们会和HealthKit互动

00:25:11.278 --> 00:25:15.082
开始和停止锻炼会话
并启用后台功能

00:25:17.184 --> 00:25:19.586
然后我们有motion管理器

00:25:21.088 --> 00:25:23.457
在这我们会直接和
Core Motion互动

00:25:24.258 --> 00:25:25.959
实现我们的侦测算法

00:25:26.994 --> 00:25:29.796
在这我们会响应50赫兹
设备Motion更新

00:25:29.863 --> 00:25:31.999
并把采样结果加入一个
RunningBuffer

00:25:33.033 --> 00:25:34.801
之后在每次更新时

00:25:35.369 --> 00:25:38.739
我们会判断是否有挥拍发生
如果有 我们会实现UI

00:25:42.976 --> 00:25:46.346
我们怎么给我们想要侦测的挥拍
建立模型？

00:25:48.382 --> 00:25:50.184
网球是个复杂的运动

00:25:50.551 --> 00:25:54.421
在这个情况下我们要做的是
我们会看看两个动作的基本点

00:25:55.088 --> 00:25:56.990
一个完整的正手和反手挥拍

00:25:58.258 --> 00:26:01.228
我们通过使用重力和旋转矢量
来这么做

00:25:58.258 --> 00:26:01.228
我们通过使用重力和旋转矢量
来这么做

00:26:01.295 --> 00:26:02.763
这些矢量由设备Motion提供

00:26:04.598 --> 00:26:08.202
如果你假设watch是在主手上

00:26:08.869 --> 00:26:12.739
那么你期待一个完整的正手挥拍
会包括用户的旋转

00:26:14.241 --> 00:26:17.144
如果我们进行点乘

00:26:17.211 --> 00:26:19.246
来自可能的挥拍的旋转率

00:26:19.580 --> 00:26:21.048
和重力单位向量点乘

00:26:21.448 --> 00:26:25.118
我们可以忽略设备的姿态并
分离这个运动

00:26:25.652 --> 00:26:27.855
还可以忽略一些无关运动

00:26:29.790 --> 00:26:33.894
然后当我们获得足够多关于这的
采样

00:26:34.294 --> 00:26:37.931
我们可以判断是否旋转了足够远
是否远到可以计数为一次挥拍

00:26:40.868 --> 00:26:43.904
所以我们现在知道要做什么
让我们看看我们的采样应用

00:26:46.273 --> 00:26:48.742
要开始 我们来想象一下我们简单
的UI

00:26:49.109 --> 00:26:50.978
我们会向用户显示信息

00:26:53.780 --> 00:26:56.283
这就是了
三个WatchKit界面标签

00:26:56.350 --> 00:26:58.151
我们希望在运行时更新

00:26:58.819 --> 00:27:00.787
这包括锻炼标签

00:26:58.819 --> 00:27:00.787
这包括锻炼标签

00:27:01.922 --> 00:27:03.190
正手计数标签

00:27:03.957 --> 00:27:05.325
和反手计数标签

00:27:05.592 --> 00:27:08.061
锻炼标签会做的是简单地告诉用户

00:27:08.128 --> 00:27:10.631
我们开始和停止了锻炼会话

00:27:11.198 --> 00:27:13.333
而正手反手计数标签

00:27:13.500 --> 00:27:16.537
会显示我们侦测到了多少次对应
的活动

00:27:18.305 --> 00:27:22.042
我们有一Force Touch菜单
来开始和停止锻炼会话

00:27:25.779 --> 00:27:30.784
我们知道UI会显示什么
让我们看看锻炼管理器

00:27:32.286 --> 00:27:35.255
在这我们处理和HealthKit间
互动

00:27:35.322 --> 00:27:37.824
并且创建我们的锻炼会话

00:27:39.493 --> 00:27:43.564
我们还指导我们的motion管理器
开始和停止传感器更新

00:27:47.134 --> 00:27:50.737
在我们的锻炼管理器中我们将
开始一次锻炼

00:27:52.372 --> 00:27:55.175
要开始我们会创建我们的锻炼配置

00:27:55.242 --> 00:27:57.477
我们会用它来初始化锻炼会话

00:27:58.579 --> 00:28:02.149
因为我们在创建一个网球应用
让我们用网球做为活动类型

00:27:58.579 --> 00:28:02.149
因为我们在创建一个网球应用
让我们用网球做为活动类型

00:28:02.482 --> 00:28:03.951
户外做为地点

00:28:05.419 --> 00:28:07.554
初始化之后

00:28:08.288 --> 00:28:10.424
我们会让HealthKit
开始锻炼会话

00:28:10.724 --> 00:28:12.693
并订阅设备Motion更新

00:28:13.393 --> 00:28:16.730
此时我们可以在屏幕关闭时做
一些工作

00:28:20.801 --> 00:28:23.203
此外我们还需要停止锻炼

00:28:24.171 --> 00:28:28.909
我们只需要进行相反的动作
并且取消订阅传感器更新

00:28:29.243 --> 00:28:31.445
然后告诉HealthKit
结束锻炼会话

00:28:32.913 --> 00:28:35.549
此时普通后台规则会生效

00:28:38.285 --> 00:28:40.721
让我们看看我们的motion管理器

00:28:41.955 --> 00:28:45.759
它直接和Core Motion
打交道并实现我们的侦测算法

00:28:50.330 --> 00:28:52.399
要开始 我们在这要做的是

00:28:53.166 --> 00:28:55.435
我们会创建一个到
CMMotionManager链接

00:28:55.836 --> 00:28:59.239
并且创建一个NS操作队列
使采样工作在它之上

00:29:01.175 --> 00:29:04.811
此时我们会询问watch是在左手
还是右手

00:29:05.379 --> 00:29:08.415
正手反手挥拍的区别

00:29:08.482 --> 00:29:10.284
会完全取决于这一点

00:29:12.653 --> 00:29:15.989
我们还会保持一个本地的计数
为正手反手挥拍

00:29:16.790 --> 00:29:19.293
并且标记我们最近是否见到一次
挥拍

00:29:22.729 --> 00:29:24.932
我们选择50赫兹采样率

00:29:25.232 --> 00:29:28.135
创建一个RunningBuffer
它应储存不多于1秒的数据

00:29:30.571 --> 00:29:32.172
像Bharath早前提到的

00:29:32.439 --> 00:29:35.509
设备Motion采样可最多以100
赫兹的速率被提供

00:29:36.143 --> 00:29:39.446
你通常想要采样率尽量低

00:29:39.513 --> 00:29:41.982
同时能提供你所需的保真度

00:29:44.918 --> 00:29:49.223
此外我们还会设置三个在我们的
侦测算法中会用到的常量

00:29:50.123 --> 00:29:53.260
这包括最小的挥拍角度

00:29:53.894 --> 00:29:56.096
挥拍时最高速度的最小值

00:29:56.897 --> 00:29:59.166
挥拍的最大安定速度

00:30:00.901 --> 00:30:02.269
现在我们选择这些值

00:30:02.336 --> 00:30:04.905
根据实验和我们收集的采样数据

00:30:05.439 --> 00:30:09.109
但是一般你会发现收集数据和选择
这些值的过程

00:30:09.176 --> 00:30:10.677
是你应用工作量的一半

00:30:12.546 --> 00:30:15.315
最后我们会在这创建委托引用

00:30:15.382 --> 00:30:17.417
我们会用它来和UI通信

00:30:20.854 --> 00:30:23.457
现在在我们设置了所有属性之后

00:30:24.157 --> 00:30:27.127
我们会调整操作队列来反应一个
连续队列

00:30:27.694 --> 00:30:30.330
我们会用它来处理所有
设备Motion采样

00:30:31.198 --> 00:30:35.602
我想在这强调一下
我们创建了这个操作队列

00:30:35.836 --> 00:30:39.206
来确保所有的数据处理发生在
主队列之外

00:30:41.842 --> 00:30:44.111
现在我们还会创建这个函数

00:30:44.178 --> 00:30:46.580
我们会用它来重置所有声明类

00:30:46.647 --> 00:30:47.915
同时使UI归零

00:30:50.784 --> 00:30:53.620
然后最后提供一系列方便的方法

00:30:54.254 --> 00:30:57.224
我们会创建一些补充的更新委托
函数

00:30:58.158 --> 00:31:01.261
在这我们简单地实现对挥拍的计数

00:30:58.158 --> 00:31:01.261
在这我们简单地实现对挥拍的计数

00:31:02.062 --> 00:31:05.399
标记我们最近遇到了一次挥拍
并让UI知道

00:31:09.970 --> 00:31:12.573
现在让我们和
Core Motion打交道

00:31:13.907 --> 00:31:16.243
和往常一样我们要做的第一件事

00:31:17.010 --> 00:31:19.980
是询问API是否在我们要运行的
设备上被支持

00:31:21.715 --> 00:31:25.853
然后我们告诉Core Motion
用50赫兹的频率更新

00:31:27.421 --> 00:31:30.157
最后我们订阅设备Motion更新

00:31:30.624 --> 00:31:32.192
通过传递我们的操作队列

00:31:32.526 --> 00:31:36.296
和一块代码用来响应所有进来的
设备Motion采样

00:31:37.598 --> 00:31:41.668
这整块代码要做的是简单地检查
更新是否有错误

00:31:42.169 --> 00:31:44.338
然后把它传递给我们的侦测函数

00:31:47.641 --> 00:31:51.078
让我们看看我们的侦测函数将会
做什么

00:31:52.813 --> 00:31:56.517
如Bharath早前提到
设备Motion给我们很多事

00:31:56.650 --> 00:31:57.718
但是在这个例子中

00:31:57.784 --> 00:32:00.854
我们只会用到重力和旋转率矢量

00:31:57.784 --> 00:32:00.854
我们只会用到重力和旋转率矢量

00:32:02.422 --> 00:32:03.590
现在如你可能记得的

00:32:03.657 --> 00:32:06.360
重力矢量只是简单的
Core Motion的终点

00:32:06.426 --> 00:32:09.763
重力单位矢量 不论设备如何移动了

00:32:10.364 --> 00:32:13.901
旋转率是设备的旋转矢量

00:32:13.967 --> 00:32:15.435
给我们弧度每秒

00:32:16.803 --> 00:32:19.740
所以现在我们的算法要做的

00:32:20.407 --> 00:32:24.144
是点乘旋转矢量

00:32:24.211 --> 00:32:26.880
来自可能的挥拍
和重力单位矢量

00:32:27.514 --> 00:32:30.217
所以我们只分析motion中关于
重力的部分

00:32:31.919 --> 00:32:34.288
然后我们把结果标量加入

00:32:34.354 --> 00:32:37.090
一个RunningBuffer
保存不多于1秒的数据

00:32:38.325 --> 00:32:41.795
一旦我们有了足够的内容
我们分析这些内容

00:32:44.164 --> 00:32:47.568
所以我们要用来分析挥拍的两个
度量值

00:32:48.035 --> 00:32:51.438
是累计的旋转角度和挥拍的最高
速度

00:32:52.873 --> 00:32:55.142
在这要获得累计旋转

00:32:55.709 --> 00:32:59.246
只需要累加我们采集到的所有
旋转采样的总和

00:32:59.913 --> 00:33:01.548
在我们采集它们的那一秒中

00:32:59.913 --> 00:33:01.548
在我们采集它们的那一秒中

00:33:02.249 --> 00:33:03.317
然后你得到最高速率

00:33:03.383 --> 00:33:06.887
你简单地获得最大或最小值
取决于旋转的方向

00:33:10.324 --> 00:33:11.658
继续我们的函数

00:33:11.992 --> 00:33:14.561
我们会检查是否包括足够远

00:33:14.628 --> 00:33:16.396
和足够快来判断为一次挥拍

00:33:17.764 --> 00:33:20.767
如果是我们会选择正手还是反手

00:33:21.101 --> 00:33:24.505
根据Apple Watch位置
和这个标量的符号

00:33:27.975 --> 00:33:29.843
最后在函数的结尾

00:33:30.611 --> 00:33:32.746
我们会添加一个测试
看看这次挥拍是否安定下来

00:33:33.280 --> 00:33:35.182
这样我们可以拒绝一些反弹运动

00:33:35.616 --> 00:33:38.051
像是用户的手臂回到位置上准备
下一次击球

00:33:39.853 --> 00:33:43.957
最后要结束这个类
我们有stopUpdates函数

00:33:44.458 --> 00:33:47.127
我们用来取消订阅
DeviceMotionUpdates

00:33:47.194 --> 00:33:48.529
当锻炼结束时

00:33:51.899 --> 00:33:54.001
这结束了我们的基本采样应用

00:33:54.368 --> 00:33:56.570
我们简单地描述了一个简单的
用户界面

00:33:57.271 --> 00:34:00.707
然后我们创建了一个锻炼管理
处理和HealthKit连接

00:33:57.271 --> 00:34:00.707
然后我们创建了一个锻炼管理
处理和HealthKit连接

00:34:01.775 --> 00:34:03.477
然后创建了motion管理器

00:34:03.544 --> 00:34:06.580
处理Core Motion并
实现我们的侦测算法

00:34:08.849 --> 00:34:12.085
我希望你们都对如何使用
设备Motion有了好的了解

00:34:12.152 --> 00:34:13.920
这是新引入Apple Watch的

00:34:17.791 --> 00:34:18.759
在我结束前

00:34:19.259 --> 00:34:21.995
我想要强调使用这个API的一些
细节

00:34:23.664 --> 00:34:27.835
现在当你期待watch在一个固定的
可预测的位置时

00:34:28.302 --> 00:34:30.938
永远记得检查设备是在哪只手上

00:34:31.938 --> 00:34:35.475
这个位置的区别会极大地影响
你的分析

00:34:37.511 --> 00:34:41.715
更进一步 当使用惯性传感器时
永远记得

00:34:42.315 --> 00:34:45.085
试着理解你是操作在什么参考坐标系
上的

00:34:47.020 --> 00:34:48.956
而且如我们早前提到的

00:34:49.590 --> 00:34:52.759
设备Motion提供
最高100赫兹的采样

00:34:53.493 --> 00:34:55.128
我们永远希望能达到平衡

00:34:55.295 --> 00:34:57.998
在提供你的采样率所需的资源

00:34:58.131 --> 00:35:00.067
和你的应用所需的保真度之间

00:34:58.131 --> 00:35:00.067
和你的应用所需的保真度之间

00:35:01.001 --> 00:35:02.436
这很重要

00:35:02.503 --> 00:35:05.572
因为锻炼会话的后台限制

00:35:08.242 --> 00:35:10.110
要总结这次演讲

00:35:10.911 --> 00:35:14.448
我们早前谈到了历史加速仪的
性能提升

00:35:15.649 --> 00:35:17.951
然后我们演示了如何使用计步器
事件

00:35:18.018 --> 00:35:19.520
来精确的给阶段加标签

00:35:19.586 --> 00:35:22.089
提供准确的上下文反馈给用户

00:35:23.156 --> 00:35:26.193
然后我们介绍了Apple
Watch上的设备Motion

00:35:26.660 --> 00:35:27.628
然后浏览了一个应用

00:35:27.694 --> 00:35:30.898
来侦测正手和反手挥拍
在一次网球锻炼中

00:35:33.133 --> 00:35:35.969
如果你想知道更多信息

00:35:36.036 --> 00:35:37.971
比如资料和采样代码

00:35:38.539 --> 00:35:39.873
请查看这个链接

00:35:42.543 --> 00:35:44.178
然后如你所见

00:35:44.645 --> 00:35:46.847
该应用和HealthKit
的新特性互动

00:35:47.014 --> 00:35:49.149
我鼓励你们都去
看看HealthKit演讲

00:35:49.216 --> 00:35:51.685
来了解更多细节
关于“watchOS 3的新特性”

00:35:53.420 --> 00:35:56.823
此外Core Location
有一些最佳实践需要你查看

00:35:56.890 --> 00:35:58.759
我建议你们也去看看

00:36:00.194 --> 00:36:04.531
最后我还推荐看看watchOS 3
的其他资料

00:36:05.666 --> 00:36:06.500
谢谢
