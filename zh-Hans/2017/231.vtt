WEBVTT

00:00:21.156 --> 00:00:21.716 A:middle
&gt;&gt; 大家好

00:00:22.516 --> 00:00:27.646 A:middle
[掌声]

00:00:28.146 --> 00:00:29.176 A:middle
欢迎大家参加这个主题会议“Core Spotlight 的

00:00:29.176 --> 00:00:29.686 A:middle
新功能”

00:00:30.316 --> 00:00:31.846 A:middle
我是 John Hornkvist

00:00:31.846 --> 00:00:33.516 A:middle
Core Spotlight 的高级经理

00:00:33.516 --> 00:00:34.556 A:middle
今天将与我一同讲解的还有

00:00:34.556 --> 00:00:35.526 A:middle
我的同事 Lyn Fong

00:00:36.876 --> 00:00:38.306 A:middle
今天我们会介绍一些新的 API

00:00:38.306 --> 00:00:41.186 A:middle
macOS 系统中的 Core Spotlight

00:00:43.176 --> 00:00:45.936 A:middle
Drag-and-Drop 拖放功能

00:00:45.936 --> 00:00:48.376 A:middle
还有 Quick Look 预览功能

00:00:48.376 --> 00:00:50.586 A:middle
我们还会介绍一下排名更新

00:00:50.586 --> 00:00:51.996 A:middle
最后还要对索引与搜索功能

00:00:51.996 --> 00:00:53.616 A:middle
做一番回顾

00:00:54.976 --> 00:00:56.986 A:middle
那么  我们首先开始介绍 macOS 的新功能

00:00:57.846 --> 00:00:59.946 A:middle
macOS 中的 Core Spotlight

00:00:59.946 --> 00:01:02.606 A:middle
和 iOS 中的 API 并无不同

00:00:59.946 --> 00:01:02.606 A:middle
和 iOS 中的 API 并无不同

00:01:02.606 --> 00:01:04.825 A:middle
所以 它非常适用于跨平台 App

00:01:05.376 --> 00:01:07.086 A:middle
在此之前  Core Spotlight

00:01:07.086 --> 00:01:08.606 A:middle
已经应用于备忘录和 Safari

00:01:08.606 --> 00:01:10.366 A:middle
由于它的跨平台特征

00:01:10.486 --> 00:01:11.666 A:middle
CoreData Spotlight 支持

00:01:11.666 --> 00:01:12.736 A:middle
再次获得运用推广

00:01:12.736 --> 00:01:14.676 A:middle
目前它已经同时适用于

00:01:14.676 --> 00:01:16.556 A:middle
iOS 和 macOS 系统

00:01:17.146 --> 00:01:18.996 A:middle
Core Spotlight 对数据库和批量扫描

00:01:18.996 --> 00:01:21.046 A:middle
来说非常好用

00:01:21.046 --> 00:01:22.546 A:middle
你的 App 可以借此而实现对内容的

00:01:22.546 --> 00:01:23.276 A:middle
完全控制

00:01:24.066 --> 00:01:26.106 A:middle
它并不运用于

00:01:26.106 --> 00:01:28.146 A:middle
用户在 Finder 中监视的项

00:01:28.456 --> 00:01:30.276 A:middle
因为经典的 Spotlight API 还存在

00:01:30.276 --> 00:01:31.776 A:middle
而且性能极好

00:01:33.416 --> 00:01:34.886 A:middle
最后一点  由于 Core Sporlight API 是

00:01:35.006 --> 00:01:36.796 A:middle
以单独用户为基础 所以用户之间

00:01:36.796 --> 00:01:37.216 A:middle
不可分享

00:01:37.686 --> 00:01:39.306 A:middle
在座各位可能有人

00:01:39.306 --> 00:01:41.736 A:middle
不熟悉 Core Spotlight

00:01:41.736 --> 00:01:43.066 A:middle
稍后我们会把它的基础概念

00:01:43.066 --> 00:01:43.476 A:middle
回顾一下

00:01:43.936 --> 00:01:47.766 A:middle
iOS 11 里一个重要的新功能就是

00:01:47.766 --> 00:01:49.606 A:middle
拖放功能

00:01:49.606 --> 00:01:51.216 A:middle
当然了  它对于 Mac 来说

00:01:51.216 --> 00:01:52.596 A:middle
也非常重要

00:01:53.906 --> 00:01:54.636 A:middle
带有 Core Spotlight 的拖放功能

00:01:54.636 --> 00:01:56.626 A:middle
是建立在承诺的概念

00:01:56.626 --> 00:01:58.746 A:middle
基础之上

00:01:58.786 --> 00:02:00.036 A:middle
如果你建立了标引时间的承诺

00:01:58.786 --> 00:02:00.036 A:middle
如果你建立了标引时间的承诺

00:02:00.036 --> 00:02:02.286 A:middle
等到用户拖放一个

00:02:02.376 --> 00:02:03.906 A:middle
Core Spotlight 项以后

00:02:03.906 --> 00:02:04.826 A:middle
你就要实现这个承诺

00:02:05.326 --> 00:02:07.866 A:middle
那么 我们来看看实际操作

00:02:08.916 --> 00:02:10.286 A:middle
首先我们在 Spotlight 里开始拖动

00:02:10.936 --> 00:02:15.096 A:middle
之后我们按下 Home 键

00:02:15.636 --> 00:02:16.936 A:middle
回到 SpringBoard

00:02:16.936 --> 00:02:20.316 A:middle
在这里 我们能够进入备忘录

00:02:20.316 --> 00:02:20.846 A:middle
把那张图片拖放下来

00:02:21.316 --> 00:02:23.006 A:middle
这是个炫酷的加速功能

00:02:23.126 --> 00:02:24.636 A:middle
可以让用户非常迅速地

00:02:25.116 --> 00:02:26.016 A:middle
获取内容

00:02:26.576 --> 00:02:29.656 A:middle
现在你也许很好奇

00:02:29.656 --> 00:02:30.796 A:middle
它究竟是如何在后台

00:02:30.796 --> 00:02:31.326 A:middle
运作的

00:02:32.386 --> 00:02:34.116 A:middle
首先 你的 App 对各个项进行索引

00:02:34.116 --> 00:02:35.446 A:middle
每一项都带有一个承诺

00:02:35.976 --> 00:02:40.426 A:middle
你的 App 随即退出  稍过一会儿

00:02:40.426 --> 00:02:42.226 A:middle
用户在 Spotlight 中

00:02:42.226 --> 00:02:42.716 A:middle
运行查询

00:02:43.416 --> 00:02:45.116 A:middle
用户在 Spotlight 中拖动项目

00:02:45.116 --> 00:02:46.736 A:middle
Spotlight 创建一个承诺

00:02:46.736 --> 00:02:48.666 A:middle
这个承诺会被发送到

00:02:48.666 --> 00:02:49.326 A:middle
接收拖放项的 App

00:02:49.376 --> 00:02:52.966 A:middle
当这个 App 选出它需要的类型后

00:02:52.966 --> 00:02:54.056 A:middle
请求又返回到

00:02:54.056 --> 00:02:54.586 A:middle
Spotlight

00:02:56.256 --> 00:02:57.766 A:middle
Spotlight 随后将根据

00:02:57.766 --> 00:02:59.256 A:middle
类型和项目信息来调用

00:02:59.256 --> 00:03:01.966 A:middle
你的应用或你的

00:02:59.256 --> 00:03:01.966 A:middle
你的应用或你的

00:03:01.966 --> 00:03:02.936 A:middle
App Extension

00:03:07.176 --> 00:03:08.806 A:middle
然后是你提供数据

00:03:09.116 --> 00:03:10.556 A:middle
数据被传递至 Spotlight

00:03:11.076 --> 00:03:13.616 A:middle
当然 接收的 App 是能够

00:03:13.616 --> 00:03:15.226 A:middle
获取内容的

00:03:15.346 --> 00:03:17.016 A:middle
这看起来可能有些复杂

00:03:17.016 --> 00:03:18.326 A:middle
但你真正需要做的

00:03:18.456 --> 00:03:20.296 A:middle
并不是太多

00:03:20.816 --> 00:03:22.436 A:middle
你的第一个任务是决定

00:03:22.436 --> 00:03:23.656 A:middle
支持哪些拖放类型

00:03:26.316 --> 00:03:28.226 A:middle
拖放类型使用统一的

00:03:28.226 --> 00:03:30.426 A:middle
类型标识符或 UTI 类型

00:03:30.426 --> 00:03:31.376 A:middle
这些是系统的[音质不清晰]

00:03:32.256 --> 00:03:35.166 A:middle
它们提供了某种统一的方法

00:03:35.166 --> 00:03:36.546 A:middle
来描述我们制定的层级当中

00:03:36.546 --> 00:03:38.376 A:middle
不同类型

00:03:38.376 --> 00:03:39.206 A:middle
从最特殊到最不特殊的类型

00:03:39.806 --> 00:03:42.106 A:middle
要想获取有关统一类型标识符的信息

00:03:42.106 --> 00:03:43.616 A:middle
请访问以下网址

00:03:43.616 --> 00:03:44.966 A:middle
developer.apple.com

00:03:45.496 --> 00:03:48.526 A:middle
你可以给你的应用程序

00:03:48.526 --> 00:03:50.506 A:middle
定义新类型

00:03:50.506 --> 00:03:52.376 A:middle
但对于拖放功能 我们希望大家还是

00:03:52.376 --> 00:03:53.156 A:middle
公布那些众所周知的类型

00:03:53.156 --> 00:03:54.486 A:middle
这样有利于其他应用程序

00:03:54.486 --> 00:03:56.106 A:middle
对你要提供的数据

00:03:56.106 --> 00:03:57.076 A:middle
进行接收

00:03:57.596 --> 00:04:00.576 A:middle
例如 一个做笔记记录的 App

00:03:57.596 --> 00:04:00.576 A:middle
例如 一个做笔记记录的 App

00:04:00.576 --> 00:04:02.406 A:middle
可能使用自己的 UTI 类型

00:04:02.616 --> 00:04:04.736 A:middle
来作为其内容的一种类型

00:04:04.736 --> 00:04:05.796 A:middle
但它可能会对外宣称

00:04:05.796 --> 00:04:08.126 A:middle
如果某个项目被拖放的时候

00:04:08.246 --> 00:04:09.236 A:middle
自己可以提供 RTF HTML 和纯文本

00:04:09.436 --> 00:04:11.736 A:middle
那么这就是类型

00:04:12.286 --> 00:04:13.446 A:middle
现在来看看 我们怎样让 Spotlight 知道

00:04:13.446 --> 00:04:14.926 A:middle
哪些是可以提供的

00:04:15.296 --> 00:04:17.716 A:middle
关于这一问题

00:04:17.716 --> 00:04:18.546 A:middle
CSSearchableAttributeSet

00:04:18.546 --> 00:04:19.946 A:middle
具有三个新属性

00:04:20.296 --> 00:04:22.046 A:middle
你可以承诺一项数据表示

00:04:22.046 --> 00:04:24.276 A:middle
一个将被复制的

00:04:24.276 --> 00:04:25.796 A:middle
文件表示形式

00:04:25.796 --> 00:04:27.776 A:middle
或者是一个本地文件表示

00:04:27.776 --> 00:04:29.856 A:middle
如果你的数据被保存

00:04:29.856 --> 00:04:30.996 A:middle
并用于复制的话

00:04:31.476 --> 00:04:33.896 A:middle
至于设计的提供者

00:04:34.066 --> 00:04:35.316 A:middle
你首先应该确定它是

00:04:35.316 --> 00:04:36.896 A:middle
精准程度最高的表示

00:04:37.776 --> 00:04:38.996 A:middle
那么应该怎样使用它呢？

00:04:40.406 --> 00:04:40.956 A:middle
你应该像往常一样把

00:04:40.956 --> 00:04:42.926 A:middle
CSSearchableItemAttributeSet

00:04:42.926 --> 00:04:43.286 A:middle
创建出来

00:04:43.776 --> 00:04:45.036 A:middle
在这个实例中 我们已经有一个

00:04:45.036 --> 00:04:46.606 A:middle
图片文件 所以我们将它

00:04:46.606 --> 00:04:47.846 A:middle
交给文件类型标识符处理

00:04:48.566 --> 00:04:49.906 A:middle
我们也能转换图片[音质不清晰]

00:04:49.906 --> 00:04:51.756 A:middle
按照先前的宣称内容  它可以

00:04:51.756 --> 00:04:54.266 A:middle
提供纯文本数据

00:04:54.556 --> 00:04:55.486 A:middle
这就是我们的承诺

00:04:55.766 --> 00:04:56.926 A:middle
接下来我们来看

00:04:56.926 --> 00:04:57.616 A:middle
如何生成它

00:04:58.766 --> 00:05:01.206 A:middle
当用户拖动放置项目时

00:04:58.766 --> 00:05:01.206 A:middle
当用户拖动放置项目时

00:05:01.206 --> 00:05:03.056 A:middle
你的 Extentsion 会被调用

00:05:03.056 --> 00:05:04.066 A:middle
在极少数情况下

00:05:04.066 --> 00:05:06.036 A:middle
你的 App 恰好正在运行

00:05:06.036 --> 00:05:07.096 A:middle
那么这可能会变为你的 App

00:05:07.096 --> 00:05:07.456 A:middle
索引委托

00:05:08.476 --> 00:05:09.996 A:middle
根据接收 App 的请求内容

00:05:09.996 --> 00:05:11.996 A:middle
上述两种方法中的一种

00:05:11.996 --> 00:05:12.896 A:middle
将会被调用

00:05:13.216 --> 00:05:15.806 A:middle
如果它们请求数据或者

00:05:15.806 --> 00:05:17.106 A:middle
某一类型 或是你能够提供数据

00:05:17.106 --> 00:05:19.336 A:middle
数据方法将被调用

00:05:19.336 --> 00:05:20.376 A:middle
并且获取可搜索的索引

00:05:20.376 --> 00:05:22.456 A:middle
项目标识符和

00:05:22.456 --> 00:05:23.796 A:middle
类型标识符  而你则应当返回

00:05:23.796 --> 00:05:25.026 A:middle
数据对象

00:05:26.776 --> 00:05:28.676 A:middle
文件 URL 方法采用

00:05:28.676 --> 00:05:30.716 A:middle
相同的参数 再加上

00:05:30.716 --> 00:05:32.416 A:middle
一些布尔值  从而确定是否

00:05:32.416 --> 00:05:33.656 A:middle
应当提供本地文件

00:05:36.036 --> 00:05:37.556 A:middle
数据方法的执行情况

00:05:37.556 --> 00:05:38.876 A:middle
大体如下所示

00:05:38.986 --> 00:05:41.686 A:middle
我们查看项标识符的

00:05:41.686 --> 00:05:43.746 A:middle
模型对象

00:05:43.746 --> 00:05:45.096 A:middle
还要检查正在请求的类型

00:05:45.726 --> 00:00:05.000 :47.166 A:middle
然后再生成相应的

00:05:47.166 --> 00:05:47.736 A:middle
数据

00:05:48.236 --> 00:05:52.386 A:middle
文件 URL 方法的

00:05:52.386 --> 00:05:53.866 A:middle
执行过程和它非常类似

00:05:54.326 --> 00:05:55.656 A:middle
我们再次查看

00:05:55.656 --> 00:05:57.166 A:middle
项目标识符的模型对象

00:05:57.376 --> 00:05:58.346 A:middle
检查正在请求的类型

00:05:58.346 --> 00:06:01.016 A:middle
但在这里我们要生成

00:05:58.346 --> 00:06:01.016 A:middle
但在这里我们要生成

00:06:01.016 --> 00:06:01.376 A:middle
一个文件

00:06:02.046 --> 00:06:03.656 A:middle
实际上 这些就是你在 iOS 和 macOS 上

00:06:03.656 --> 00:06:05.266 A:middle
使用拖放功能

00:06:05.266 --> 00:06:06.416 A:middle
需要做的所有操作

00:06:06.996 --> 00:06:10.156 A:middle
那么 我们来总结一下这个新的 API

00:06:10.926 --> 00:06:12.206 A:middle
在标引的时候

00:06:12.206 --> 00:06:13.516 A:middle
你要声明并承诺拖动类型

00:06:13.966 --> 00:06:15.346 A:middle
Core Spotlight Extension

00:06:15.346 --> 00:06:16.766 A:middle
至为关键 它将获得启动

00:06:16.766 --> 00:06:17.906 A:middle
以便完成你的承诺

00:06:18.526 --> 00:06:21.156 A:middle
用户需要尽快生成数据

00:06:21.156 --> 00:06:22.736 A:middle
他将等待

00:06:22.736 --> 00:06:24.046 A:middle
拖曳动作的完成

00:06:24.406 --> 00:06:26.856 A:middle
当然 新的 API 同时适用于

00:06:26.856 --> 00:06:28.546 A:middle
macOS 和 iOS 系统

00:06:29.646 --> 00:06:30.996 A:middle
接下来 Lyn 会

00:06:30.996 --> 00:06:32.296 A:middle
上台为大家介绍

00:06:32.296 --> 00:06:33.426 A:middle
Core Spotlight 的 Quick Look

00:06:33.426 --> 00:06:33.876 A:middle
预览功能

00:06:34.516 --> 00:06:40.826 A:middle
[掌声]

00:06:41.326 --> 00:06:43.486 A:middle
&gt;&gt; 嗨 我是 Lyn 我们来谈谈

00:06:43.486 --> 00:06:44.826 A:middle
可用于 Core Spotlight 项目的

00:06:44.826 --> 00:06:46.146 A:middle
Quick Look预览功能

00:06:47.266 --> 00:06:49.386 A:middle
在 iOS 上 当你通过 3D Touch

00:06:49.456 --> 00:06:51.266 A:middle
触发 Peek and Pop 时

00:06:51.266 --> 00:06:52.406 A:middle
Spotlight 会显示出内容预览

00:06:53.816 --> 00:06:55.126 A:middle
在默认状态下  Spotlight 会根据

00:06:55.126 --> 00:06:56.886 A:middle
你在 Core Spotlight 项目中的文本

00:06:56.886 --> 00:06:58.006 A:middle
显示出只读文本预览

00:06:58.006 --> 00:07:00.396 A:middle
但现在你可以通过

00:06:58.006 --> 00:07:00.396 A:middle
但现在你可以通过

00:07:00.396 --> 00:07:02.346 A:middle
采用 Quick Look 预览 Extension

00:07:02.346 --> 00:07:03.566 A:middle
来自定义你的预览内容

00:07:04.146 --> 00:07:06.726 A:middle
看 这是默认的

00:07:06.726 --> 00:07:08.566 A:middle
Core Spotlight 预览示例

00:07:09.106 --> 00:07:10.616 A:middle
如果你曾经对 iOS 10 中的 Core Spotlight 项目

00:07:10.616 --> 00:07:13.026 A:middle
进行过 Peek and Pop 操作

00:07:13.026 --> 00:07:14.466 A:middle
那么这幅画面看起来就很熟悉了

00:07:15.846 --> 00:07:17.606 A:middle
这是一个示例 它表明

00:07:17.606 --> 00:07:19.216 A:middle
在采用 Quick Look 预览 Extension 后

00:07:19.216 --> 00:07:20.416 A:middle
你的预览内容可能是

00:07:20.416 --> 00:07:21.086 A:middle
这个样子

00:07:21.836 --> 00:07:23.686 A:middle
这个区域是

00:07:23.686 --> 00:07:25.656 A:middle
你的预览内容显示区域

00:07:25.656 --> 00:07:27.426 A:middle
它来自于你的 Extension 中的

00:07:27.426 --> 00:07:28.146 A:middle
一个视图控制器

00:07:28.986 --> 00:07:30.866 A:middle
那么 我们来谈谈

00:07:30.866 --> 00:07:32.096 A:middle
要如何实现这些

00:07:32.096 --> 00:07:32.776 A:middle
Extension 功能

00:07:34.346 --> 00:07:35.966 A:middle
Core Spotlight 预览使用了一种

00:07:35.966 --> 00:07:37.476 A:middle
Quick Look 预览 SDK

00:07:37.636 --> 00:07:39.746 A:middle
它是 iOS 今年新增加的

00:07:39.746 --> 00:07:41.376 A:middle
并带有很炫酷的新型 Xcode

00:07:41.376 --> 00:07:41.736 A:middle
模板

00:07:42.716 --> 00:07:44.266 A:middle
当你从这个模板里创建目标时

00:07:44.266 --> 00:07:45.946 A:middle
你将获得一个

00:07:45.946 --> 00:07:48.246 A:middle
Extension Info.plist

00:07:48.246 --> 00:07:50.306 A:middle
如果我们在 NSExtension 属性下

00:07:50.486 --> 00:07:52.666 A:middle
查看这个 plist

00:07:52.666 --> 00:07:54.246 A:middle
你将看到 QL 对可搜索

00:07:54.246 --> 00:07:55.246 A:middle
项目属性的支持

00:07:55.706 --> 00:07:57.906 A:middle
关于 Core Spotlight 预览

00:07:57.906 --> 00:07:58.906 A:middle
你应设置为 Yes

00:07:59.546 --> 00:08:00.806 A:middle
这会让我们知道你的

00:07:59.546 --> 00:08:00.806 A:middle
这会让我们知道你的

00:08:00.806 --> 00:08:02.136 A:middle
Quick Look 预览 Extension

00:08:02.136 --> 00:08:03.696 A:middle
将支持 Core Spotlight 的项

00:08:04.526 --> 00:08:08.896 A:middle
现在我们来看一下这个

00:08:09.056 --> 00:08:09.146 A:middle
API

00:08:09.146 --> 00:08:10.356 A:middle
当你在创建目标时

00:08:10.356 --> 00:08:12.036 A:middle
将会运用

00:08:12.036 --> 00:08:13.886 A:middle
preparePreviewOfSearchableItem 这个方法

00:08:13.886 --> 00:08:14.716 A:middle
来获取视图控制器

00:08:15.226 --> 00:08:16.496 A:middle
当你需要预览时

00:08:16.686 --> 00:08:18.056 A:middle
就会调用这个方法

00:08:18.636 --> 00:08:20.456 A:middle
通过这个方法 你将获得一个

00:08:21.036 --> 00:08:22.856 A:middle
标识符 对于你的结果来说

00:08:22.856 --> 00:08:24.636 A:middle
这是独一无二的 Core Spotlight

00:08:24.636 --> 00:08:25.306 A:middle
标识符

00:08:26.326 --> 00:08:28.036 A:middle
你将获得一个查询字符串

00:08:28.036 --> 00:08:29.706 A:middle
这是用户已经搜索到的字符串

00:08:29.706 --> 00:08:31.266 A:middle
目的是要获取你的结果

00:08:31.736 --> 00:08:32.996 A:middle
这非常有助于

00:08:32.996 --> 00:08:34.566 A:middle
你在预览中突出显示

00:08:34.566 --> 00:08:36.135 A:middle
与搜索相关的内容

00:08:36.706 --> 00:08:38.765 A:middle
最后 你会得到一个

00:08:38.765 --> 00:08:40.236 A:middle
完成句柄

00:08:40.236 --> 00:08:43.316 A:middle
一旦完成操作 你必须调用它

00:08:43.515 --> 00:08:45.906 A:middle
因此 调试 Core Spotlight

00:08:45.956 --> 00:08:47.476 A:middle
预览 Extension 有别于典型的

00:08:47.476 --> 00:08:48.786 A:middle
Extension 调试

00:08:48.786 --> 00:08:50.266 A:middle
不过别担心 它还是

00:08:50.266 --> 00:08:50.926 A:middle
很容易的

00:08:51.526 --> 00:08:53.116 A:middle
你不必选择一个 Host App

00:08:53.116 --> 00:08:54.066 A:middle
然后再从这个 App 里

00:08:54.066 --> 00:08:55.826 A:middle
启动你的 Extension

00:08:55.826 --> 00:08:57.126 A:middle
你可以直接从 Spotlight 里

00:08:57.126 --> 00:08:58.116 A:middle
启动 Extention

00:08:58.976 --> 00:09:00.966 A:middle
所以 当 Xcode 需要你启动 App 时

00:08:58.976 --> 00:09:00.966 A:middle
所以 当 Xcode 需要你启动 App 时

00:09:00.966 --> 00:09:03.886 A:middle
你可以启动任何一个

00:09:03.886 --> 00:09:05.456 A:middle
因为你不会使用它

00:09:05.456 --> 00:09:07.006 A:middle
而是会转到 Spotlight

00:09:07.006 --> 00:09:08.426 A:middle
查找你的 Core Spotlight 项

00:09:08.426 --> 00:09:09.176 A:middle
然后进行 Peek and Pop

00:09:09.566 --> 00:09:11.406 A:middle
Xcode 将自动连接到

00:09:11.406 --> 00:09:12.856 A:middle
你的 Extension

00:09:13.196 --> 00:09:14.576 A:middle
那么让我们通过演示来

00:09:14.576 --> 00:09:15.586 A:middle
看看这个工作流程

00:09:24.056 --> 00:09:25.236 A:middle
开始演示之前  我想告诉大家

00:09:25.236 --> 00:09:26.356 A:middle
这次演示要用到的 App

00:09:26.356 --> 00:09:28.546 A:middle
是一个示例代码

00:09:28.546 --> 00:09:29.516 A:middle
大家会后可以

00:09:29.516 --> 00:09:29.956 A:middle
随意观看它

00:09:30.416 --> 00:09:32.666 A:middle
那么 让我们先看看

00:09:33.226 --> 00:09:33.926 A:middle
主应用程序

00:09:40.046 --> 00:09:41.256 A:middle
这里有一个简单的 App

00:09:41.256 --> 00:09:42.506 A:middle
它只是一个图片列表

00:09:43.246 --> 00:09:44.116 A:middle
如果你选中其中一张图片

00:09:44.116 --> 00:09:45.696 A:middle
你将获得更详细的视图

00:09:45.696 --> 00:09:48.036 A:middle
包括标题 评分和

00:09:48.036 --> 00:09:48.766 A:middle
一些描述

00:09:49.076 --> 00:09:51.926 A:middle
那么  我们来看看  如果在 Spotlight 中

00:09:51.926 --> 00:09:53.326 A:middle
找一张照片 并对它进行 Peek and Pop

00:09:53.326 --> 00:09:53.896 A:middle
会是怎样的情况

00:09:58.236 --> 00:09:59.436 A:middle
这里填入项的名称

00:10:00.036 --> 00:10:04.416 A:middle
哎呀 它直接打开了

00:10:04.896 --> 00:10:08.236 A:middle
嗯 这里有一些文字描述

00:10:08.236 --> 00:10:08.916 A:middle
这不算最神奇

00:10:09.246 --> 00:10:10.206 A:middle
我们来看看能不能做的更好

00:10:11.646 --> 00:10:14.136 A:middle
我们回到 Xcode 界面

00:10:14.136 --> 00:10:16.736 A:middle
在这里我将

00:10:16.736 --> 00:10:18.326 A:middle
从 Quick Look 预览 Extension 模板里

00:10:18.356 --> 00:10:20.846 A:middle
添加一个新目标

00:10:21.736 --> 00:10:25.226 A:middle
我们调用 iOS 中的图片预览 Extension

00:10:28.326 --> 00:10:29.436 A:middle
我们要继续操作

00:10:29.436 --> 00:10:29.686 A:middle
激活它

00:10:34.076 --> 00:10:35.596 A:middle
有一点我想提一下

00:10:35.596 --> 00:10:37.126 A:middle
我们在 App 里

00:10:37.126 --> 00:10:39.366 A:middle
看到的视图控制器

00:10:39.366 --> 00:10:40.756 A:middle
是位于一个框架里的 这样它可以

00:10:40.876 --> 00:10:41.806 A:middle
跨越多个目标实现共享

00:10:42.276 --> 00:10:43.976 A:middle
如果你有代码或资源可以

00:10:43.976 --> 00:10:45.556 A:middle
跨目标共享 我们建议你

00:10:45.556 --> 00:10:46.726 A:middle
使用相同的手段

00:10:47.006 --> 00:10:49.006 A:middle
好 我继续操作

00:10:49.006 --> 00:10:50.566 A:middle
现在引入那个框架

00:10:51.226 --> 00:10:53.566 A:middle
然后我们就能跳到

00:10:53.566 --> 00:10:54.416 A:middle
这个文件的实质内容

00:10:55.266 --> 00:10:55.966 A:middle
PreparePreviewOfSscearchableItem

00:10:55.966 --> 00:10:57.316 A:middle
这是你在

00:10:57.316 --> 00:10:58.276 A:middle
幻灯片中看到的同样

00:10:58.276 --> 00:10:58.866 A:middle
的方法

00:10:59.526 --> 00:11:00.986 A:middle
这里我们有标识符

00:10:59.526 --> 00:11:00.986 A:middle
这里我们有标识符

00:11:01.096 --> 00:11:04.376 A:middle
接下来我们就要

00:11:04.376 --> 00:11:06.676 A:middle
用这个标识符来

00:11:06.676 --> 00:11:07.816 A:middle
找到带有匹配标识符的

00:11:07.856 --> 00:11:08.536 A:middle
图片

00:11:09.716 --> 00:11:10.966 A:middle
一旦我们得到了那张图片

00:11:10.966 --> 00:11:12.596 A:middle
我们就可以用它来

00:11:12.596 --> 00:11:13.786 A:middle
针对这张图片而设置视图

00:11:13.786 --> 00:11:14.206 A:middle
控制器

00:11:14.626 --> 00:11:15.586 A:middle
看 这就是大家在主应用程序里

00:11:15.586 --> 00:11:16.756 A:middle
看到的同一个

00:11:17.666 --> 00:11:17.736 A:middle
视图控件

00:11:17.736 --> 00:11:19.236 A:middle
如果你在主应用程序中

00:11:19.236 --> 00:11:21.356 A:middle
有一个轻量级的视图控制器

00:11:21.356 --> 00:11:22.226 A:middle
你当然也可以使用

00:11:22.226 --> 00:11:22.696 A:middle
同样的方法

00:11:23.116 --> 00:11:25.286 A:middle
如果你的视图控制器

00:11:25.286 --> 00:11:26.696 A:middle
内存更大或速度更快

00:11:26.696 --> 00:11:28.566 A:middle
你可能要考虑

00:11:28.566 --> 00:11:30.216 A:middle
为此制定一个级别稍低的

00:11:30.216 --> 00:11:30.856 A:middle
版本

00:11:31.296 --> 00:11:32.746 A:middle
我们继续操作

00:11:32.746 --> 00:11:33.446 A:middle
把它展示出来

00:11:34.356 --> 00:11:35.606 A:middle
我在这里加了一点 PrintOut 参数 这样

00:11:35.606 --> 00:11:36.786 A:middle
当 Xcode 连接好以后我就可以看到

00:11:36.786 --> 00:11:38.636 A:middle
最后 我们调用

00:11:38.636 --> 00:11:39.666 A:middle
完成句柄

00:11:40.716 --> 00:11:42.176 A:middle
那么我们来试一试

00:11:42.176 --> 00:11:42.716 A:middle
看看效果如何

00:11:43.326 --> 00:11:45.856 A:middle
就像我刚才提过的

00:11:45.856 --> 00:11:47.086 A:middle
在这里选什么不重要

00:11:47.316 --> 00:11:48.496 A:middle
因为你不会使用它 我们准备

00:11:48.496 --> 00:11:49.666 A:middle
挑选照片 因为这是我们的

00:11:49.666 --> 00:11:49.976 A:middle
App

00:11:58.046 --> 00:11:58.976 A:middle
这里有些照片

00:11:59.046 --> 00:12:00.746 A:middle
我们将直接返回 Spotlight

00:11:59.046 --> 00:12:00.746 A:middle
我们将直接返回 Spotlight

00:12:01.546 --> 00:12:03.136 A:middle
然后再一次尝试

00:12:03.136 --> 00:12:04.216 A:middle
Peek and Pop 操作

00:12:04.816 --> 00:12:08.146 A:middle
这就是我们的预览

00:12:09.516 --> 00:12:14.546 A:middle
[掌声]

00:12:15.046 --> 00:12:15.546 A:middle
现在你可以通过

00:12:15.546 --> 00:12:16.846 A:middle
Xcode 里的 PrintOut 看到

00:12:16.846 --> 00:12:18.456 A:middle
我们已经连接成功

00:12:18.456 --> 00:12:19.476 A:middle
现在我们可以继续进行调试了

00:12:26.166 --> 00:12:28.086 A:middle
所以  正如大家所看到的

00:12:28.086 --> 00:12:29.416 A:middle
执行 Quick Look 预览 Extension

00:12:29.416 --> 00:12:30.946 A:middle
可以非常简单 特别是当你

00:12:30.946 --> 00:12:31.836 A:middle
已经有一个视图控制器

00:12:31.836 --> 00:12:32.896 A:middle
来显示你的内容

00:12:32.896 --> 00:12:33.396 A:middle
的时候

00:12:33.986 --> 00:12:35.216 A:middle
也许你的主应用程序里的

00:12:35.216 --> 00:12:36.396 A:middle
视图控制器已经是轻量级的了

00:12:36.396 --> 00:12:37.656 A:middle
或许在你的 App 里已经

00:12:37.656 --> 00:12:39.706 A:middle
安装了一个适用于 3D Touch 的

00:12:39.706 --> 00:12:40.736 A:middle
轻量级版本

00:12:40.736 --> 00:12:42.006 A:middle
无论哪种情况 你都可以

00:12:42.006 --> 00:12:43.126 A:middle
重复使用那个视图控制器

00:12:43.466 --> 00:12:45.186 A:middle
最后再为你的 Extension 提供一些

00:12:45.186 --> 00:12:45.856 A:middle
小建议

00:12:46.056 --> 00:12:48.256 A:middle
如果你还没有调用完成句柄

00:12:48.256 --> 00:12:49.526 A:middle
将会出现一个加载转轮

00:12:49.526 --> 00:12:51.136 A:middle
所以你应该调用完成句柄

00:12:51.136 --> 00:12:51.606 A:middle
越早越好

00:12:52.316 --> 00:12:53.446 A:middle
当 Xcode 首次与你的 Extension

00:12:53.446 --> 00:12:55.146 A:middle
相连接时

00:12:55.146 --> 00:12:57.116 A:middle
你就可以看到那个转轮

00:12:57.116 --> 00:12:58.236 A:middle
就像演示中这样

00:12:58.786 --> 00:13:00.406 A:middle
可是一旦连接成功

00:12:58.786 --> 00:13:00.406 A:middle
可是一旦连接成功

00:13:00.736 --> 00:13:01.666 A:middle
或者你没有

00:13:01.666 --> 00:13:02.926 A:middle
在 Xcode 中运行

00:13:02.926 --> 00:13:04.286 A:middle
你会马上就想看到预览内容

00:13:04.606 --> 00:13:06.966 A:middle
这是一个 Extension

00:13:06.966 --> 00:13:08.406 A:middle
存储空间是有限的 所以要有效率

00:13:09.036 --> 00:13:10.566 A:middle
最后 一旦你调用了那个

00:13:10.566 --> 00:13:12.326 A:middle
完成句柄

00:13:12.326 --> 00:13:13.536 A:middle
你的工作就结束了

00:13:13.536 --> 00:13:15.336 A:middle
此后就不要再进行任何后台操作了

00:13:15.626 --> 00:13:17.906 A:middle
这就是 iOS 中的

00:13:17.906 --> 00:13:19.306 A:middle
Core Sportlight 预览

00:13:19.486 --> 00:13:21.786 A:middle
Quick Look 预览 SDK

00:13:21.786 --> 00:13:23.956 A:middle
也支持基于文件的预览

00:13:23.956 --> 00:13:25.556 A:middle
相关内容可观看

00:13:25.646 --> 00:13:28.106 A:middle
“让基于文档的 App 在 iOS 11 里打造得更为精彩”

00:13:28.366 --> 00:13:28.806 A:middle
这一会议

00:13:29.286 --> 00:13:32.906 A:middle
正如 John 所说

00:13:32.906 --> 00:13:34.556 A:middle
macOS 平台也迎来了 Core Spotlight

00:13:34.556 --> 00:13:37.006 A:middle
你可以自定义你的预览

00:13:37.006 --> 00:13:38.606 A:middle
就像在 iOS 里一样

00:13:39.556 --> 00:13:41.616 A:middle
在 macOS 上 当你在 Spotlight 窗口中

00:13:41.616 --> 00:13:43.076 A:middle
选择搜索结果时

00:13:43.076 --> 00:13:44.066 A:middle
预览便会显示出来

00:13:44.206 --> 00:13:45.646 A:middle
此时你确实很想给自己的

00:13:45.646 --> 00:13:47.226 A:middle
Core Spotlight 执行一个

00:13:47.226 --> 00:13:48.336 A:middle
Quick Look 预览 Extension

00:13:48.336 --> 00:13:50.456 A:middle
因为 macOS 中的

00:13:50.456 --> 00:13:52.956 A:middle
Spotlight 不具有

00:13:52.956 --> 00:13:53.436 A:middle
默认预览功能

00:13:54.026 --> 00:13:55.176 A:middle
所以 在没有 Quick Look

00:13:55.176 --> 00:13:57.146 A:middle
预览 Extension 的情况下

00:13:57.146 --> 00:13:58.056 A:middle
你看到的情况就是这样

00:13:58.866 --> 00:14:00.346 A:middle
如果有了这个 Extension

00:13:58.866 --> 00:14:00.346 A:middle
如果有了这个 Extension

00:14:00.346 --> 00:14:01.196 A:middle
情况就会是这样子

00:14:02.246 --> 00:14:03.866 A:middle
这个区域就是你的

00:14:03.866 --> 00:14:05.956 A:middle
预览内容的展示区域

00:14:05.956 --> 00:14:07.616 A:middle
和 iOS 里的情况一样

00:14:07.616 --> 00:14:08.896 A:middle
它来自于 Extension 里的

00:14:08.896 --> 00:14:09.536 A:middle
视图控制器

00:14:09.536 --> 00:14:10.756 A:middle
所以 你可以完成常规视图

00:14:10.756 --> 00:14:13.286 A:middle
能做的任何事情

00:14:14.186 --> 00:14:16.786 A:middle
对 macOS 上的一个

00:14:16.786 --> 00:14:18.656 A:middle
Core Spotlight Quick Look

00:14:18.656 --> 00:14:19.716 A:middle
预览 Extension 进行调试  同样有别于

00:14:19.716 --> 00:14:21.376 A:middle
调试典型的 Extension

00:14:21.846 --> 00:14:23.206 A:middle
它和 iOS 里的工作流程

00:14:23.376 --> 00:14:23.816 A:middle
也不相同

00:14:24.416 --> 00:14:26.346 A:middle
因为当另外一个 App 获得聚焦后

00:14:26.346 --> 00:14:27.996 A:middle
Spotlight 窗口就会消失

00:14:27.996 --> 00:14:29.876 A:middle
所以很难在 Xcode 里

00:14:29.876 --> 00:14:31.536 A:middle
使用断点

00:14:31.786 --> 00:14:33.336 A:middle
因此我们转而提供

00:14:33.336 --> 00:14:34.826 A:middle
Quick Look Simulator 以便启动

00:14:34.826 --> 00:14:36.326 A:middle
你的 Extension

00:14:36.326 --> 00:14:37.356 A:middle
它在你调试时并不会消失

00:14:38.576 --> 00:14:39.496 A:middle
那么让我们来看看

00:14:39.496 --> 00:14:39.976 A:middle
它是如何工作的吧

00:14:48.046 --> 00:14:49.356 A:middle
好了 现在我们来看看

00:14:49.356 --> 00:14:51.946 A:middle
这个 App 的 Mac 版本

00:14:58.246 --> 00:14:59.836 A:middle
我们现在看到了和 iOS 版本

00:14:59.836 --> 00:15:02.206 A:middle
一样的 App

00:14:59.836 --> 00:15:02.206 A:middle
一样的 App

00:15:02.856 --> 00:15:05.586 A:middle
这里有一个图片列表

00:15:05.586 --> 00:15:07.236 A:middle
如果你选择其中一张

00:15:07.236 --> 00:15:09.066 A:middle
就能看到更详细的视图

00:15:09.066 --> 00:15:10.006 A:middle
并带有标题和稍大的图片

00:15:10.786 --> 00:15:12.476 A:middle
我们来看一下 如果在 Spotlight 中

00:15:12.476 --> 00:15:13.976 A:middle
搜索它 会发生什么情况

00:15:18.046 --> 00:15:18.966 A:middle
只有一大片空白区域

00:15:19.426 --> 00:15:20.706 A:middle
我们来看看能不能调整好

00:15:26.046 --> 00:15:26.816 A:middle
这次我要用

00:15:26.816 --> 00:15:30.726 A:middle
macOS 的 Quick Look 预览 Extension 模板

00:15:31.346 --> 00:15:32.636 A:middle
创建另一个目标

00:15:32.636 --> 00:15:35.676 A:middle
我们将调用 iOS 的

00:15:35.676 --> 00:15:40.166 A:middle
图片预览 Extension

00:15:42.266 --> 00:15:45.866 A:middle
我们继续操作 激活它

00:15:47.876 --> 00:15:49.366 A:middle
我要再一次

00:15:49.366 --> 00:15:49.976 A:middle
引入这个框架

00:15:56.446 --> 00:15:58.266 A:middle
就是它  然后跳转到

00:15:58.266 --> 00:15:59.956 A:middle
准备可搜索项目的预览

00:15:59.956 --> 00:16:01.366 A:middle
这与你在 iOS 上看到的方法

00:15:59.956 --> 00:16:01.366 A:middle
这与你在 iOS 上看到的方法

00:16:01.366 --> 00:16:01.956 A:middle
相同

00:16:01.956 --> 00:16:03.896 A:middle
这里我们要进行

00:16:03.896 --> 00:16:05.266 A:middle
同样的操作

00:16:05.266 --> 00:16:07.566 A:middle
使用那个标识符

00:16:07.566 --> 00:16:09.806 A:middle
找到带有匹配标识符的图片

00:16:09.806 --> 00:16:11.126 A:middle
之后继续设置我们的

00:16:11.126 --> 00:16:12.036 A:middle
视图

00:16:12.326 --> 00:16:13.366 A:middle
这与你在 App 里看到的

00:16:13.366 --> 00:16:15.256 A:middle
视图一样 我要把它添加到

00:16:15.256 --> 00:16:17.166 A:middle
我们的视图层级中

00:16:17.166 --> 00:16:18.326 A:middle
设定一个 PrintOut 语句

00:16:18.326 --> 00:16:20.346 A:middle
这样我们就能得知连接成功了

00:16:20.346 --> 00:16:21.526 A:middle
最后 我们要调用完成句柄

00:16:22.586 --> 00:16:24.836 A:middle
那么 让我们开始运行它吧

00:16:25.076 --> 00:16:26.156 A:middle
当你运行 Quick Look 预览

00:16:26.156 --> 00:16:27.756 A:middle
Extension 时 Xcode将会

00:16:27.816 --> 00:16:29.226 A:middle
默认提供 Quick Look

00:16:29.226 --> 00:16:29.816 A:middle
模拟器

00:16:30.306 --> 00:16:32.586 A:middle
好  我们来选中它

00:16:40.236 --> 00:16:40.936 A:middle
这就是 Quick Look

00:16:40.936 --> 00:16:41.486 A:middle
模拟器了

00:16:42.376 --> 00:16:44.336 A:middle
在左侧你将看到你的

00:16:44.336 --> 00:16:45.516 A:middle
Core Spotlight 各项目

00:16:46.036 --> 00:16:47.256 A:middle
如果有很多索引搜索结果

00:16:47.256 --> 00:16:48.446 A:middle
你可以使用上面的

00:16:48.446 --> 00:16:49.976 A:middle
搜索字段来缩小

00:16:49.976 --> 00:16:50.376 A:middle
范围

00:16:50.936 --> 00:16:52.736 A:middle
当你在这些结果里选中

00:16:52.736 --> 00:16:54.366 A:middle
其中一条时  你的预览将会出现

00:16:54.366 --> 00:16:56.146 A:middle
在右侧  这样你就能看到

00:16:56.146 --> 00:16:58.106 A:middle
Xcode 已成功地

00:16:58.106 --> 00:16:59.716 A:middle
实现连接

00:16:59.716 --> 00:17:00.666 A:middle
现在你可以随心所欲地

00:16:59.716 --> 00:17:00.666 A:middle
现在你可以随心所欲地

00:17:00.666 --> 00:17:01.046 A:middle
进行调试了

00:17:01.586 --> 00:17:03.816 A:middle
我们就来看一看它在

00:17:03.816 --> 00:17:04.626 A:middle
Spotlight 中是什么样子

00:17:10.056 --> 00:17:11.226 A:middle
大家可以看到  Spotlight已经成功

00:17:11.226 --> 00:17:12.576 A:middle
使用你的 Extension 填充了

00:17:12.576 --> 00:17:14.286 A:middle
原本的空白区域

00:17:15.016 --> 00:17:16.000 A:middle
[掌声]

00:17:22.046 --> 00:17:23.925 A:middle
大家看到了吧  macOS 中

00:17:23.925 --> 00:17:25.636 A:middle
Core Spotlight 预览的 API

00:17:25.636 --> 00:17:27.326 A:middle
与 iOS 中的 API 是一样的

00:17:28.706 --> 00:17:32.346 A:middle
最后再提供一些小建议

00:17:32.346 --> 00:17:34.486 A:middle
需要谨记的一点是 大家不应该在

00:17:35.136 --> 00:17:36.676 A:middle
Extension 的第一道响应程序里

00:17:36.676 --> 00:17:38.116 A:middle
查看任何视图

00:17:38.486 --> 00:17:39.986 A:middle
你的预览并不是交互式的

00:17:40.116 --> 00:17:41.686 A:middle
Spotlight 才是这种情况下的

00:17:41.686 --> 00:17:43.046 A:middle
交互元素

00:17:44.146 --> 00:17:46.916 A:middle
最后 macOS 中的

00:17:46.916 --> 00:17:49.006 A:middle
Quick Look 预览 Extension

00:17:49.006 --> 00:17:50.806 A:middle
仅仅支持 Core Spotlight 项

00:17:51.056 --> 00:17:53.126 A:middle
对基于文件的预览来说

00:17:53.126 --> 00:17:54.946 A:middle
经典的 Quick Look 生成器 API

00:17:55.206 --> 00:17:56.316 A:middle
仍是它的解决办法

00:17:56.616 --> 00:17:58.806 A:middle
以上就是有关 Core Spotlight

00:17:58.806 --> 00:17:59.316 A:middle
预览的内容

00:17:59.316 --> 00:17:59.936 A:middle
我们再次有请 John

00:18:00.516 --> 00:18:05.500 A:middle
[掌声]

00:18:10.076 --> 00:18:13.086 A:middle
&gt;&gt; 谢谢 Lyn  非常精彩的讲解

00:18:13.416 --> 00:18:15.286 A:middle
对 Spotlight 而言 排名是非常

00:18:15.286 --> 00:18:15.846 A:middle
重要的

00:18:16.696 --> 00:18:19.036 A:middle
在 iOS 11 和 macOS High Sierra 中

00:18:19.376 --> 00:18:20.396 A:middle
我们为 Core Spotlight 添加了

00:18:20.396 --> 00:18:21.536 A:middle
一种新的基于机器学习的

00:18:21.536 --> 00:18:22.046 A:middle
排名算法

00:18:23.396 --> 00:18:24.596 A:middle
它很有个性  而且适应力

00:18:24.596 --> 00:18:26.876 A:middle
很强  它借助于 Core ML

00:18:26.956 --> 00:18:29.166 A:middle
在设备上运行  我们付出了很大努力

00:18:29.166 --> 00:18:31.186 A:middle
以确保大家私人数据的

00:18:31.186 --> 00:18:31.696 A:middle
安全性

00:18:32.816 --> 00:18:34.466 A:middle
用户所有的个性化设置与

00:18:34.466 --> 00:18:35.936 A:middle
调适都是在设备上

00:18:35.936 --> 00:18:36.596 A:middle
进行的

00:18:36.906 --> 00:18:38.276 A:middle
ML 模型在云端训练

00:18:38.276 --> 00:18:40.136 A:middle
使用的是 从各位的本地设备上

00:18:40.136 --> 00:18:41.566 A:middle
获取的特性

00:18:42.036 --> 00:18:44.476 A:middle
这些特性属于隐私  它们并不

00:18:44.476 --> 00:18:46.386 A:middle
包括实际结果

00:18:46.386 --> 00:18:47.696 A:middle
也不包括实际

00:18:47.696 --> 00:18:48.116 A:middle
查询

00:18:48.736 --> 00:18:50.266 A:middle
用于训练模型的数据

00:18:50.266 --> 00:18:52.216 A:middle
只有当你被选入进行设备分析时

00:18:52.216 --> 00:18:53.186 A:middle
才会被提交

00:18:53.826 --> 00:18:55.486 A:middle
在进行机器学习时

00:18:55.486 --> 00:18:56.406 A:middle
这能很好地保护隐私

00:19:02.206 --> 00:19:03.136 A:middle
我们还添加了一些新的属性

00:19:03.136 --> 00:19:05.386 A:middle
以便让大家帮助我们

00:19:05.446 --> 00:19:06.366 A:middle
为各位的内容进行排名

00:19:07.466 --> 00:19:08.916 A:middle
我们添加了一个 rankingHint

00:19:08.916 --> 00:19:10.706 A:middle
它是在 1 至 100 之间的一个数字

00:19:10.706 --> 00:19:11.906 A:middle
其中 100 代表最好

00:19:12.456 --> 00:19:13.966 A:middle
当排名算法无法区分

00:19:13.966 --> 00:19:15.456 A:middle
两项之间的差别时

00:19:15.596 --> 00:19:17.916 A:middle
它就可以派上用场

00:19:17.916 --> 00:19:19.046 A:middle
把更重要的内容提到前面

00:19:19.486 --> 00:19:22.866 A:middle
我们已经创建了新的布尔属性

00:19:24.046 --> 00:19:26.156 A:middle
这可以让我们知道用户

00:19:26.156 --> 00:19:27.536 A:middle
是否新建了项目

00:19:28.906 --> 00:19:30.646 A:middle
UserOwned 则让我们知道

00:19:30.646 --> 00:19:31.806 A:middle
用户是否购买了这个

00:19:31.806 --> 00:19:32.176 A:middle
项目

00:19:32.426 --> 00:19:34.326 A:middle
UserCurated 能让我们得知

00:19:34.326 --> 00:19:35.426 A:middle
这一项目是否

00:19:35.426 --> 00:19:37.126 A:middle
是用户自选 比如说

00:19:37.126 --> 00:19:38.096 A:middle
一篇加了书签的新闻报道

00:19:38.426 --> 00:19:42.986 A:middle
大家要记住 这只是

00:19:42.986 --> 00:19:44.316 A:middle
对排名算法的信息输入

00:19:45.546 --> 00:19:47.576 A:middle
如果你想和排名系统开个玩笑

00:19:47.576 --> 00:19:49.506 A:middle
并且用 rankingHint 把

00:19:49.506 --> 00:19:51.486 A:middle
每个项目都设置为 100

00:19:52.006 --> 00:19:53.306 A:middle
这样做并不会有什么影响

00:19:53.816 --> 00:19:55.716 A:middle
这只是在你自己的

00:19:55.716 --> 00:19:56.586 A:middle
项目内部的排名

00:19:59.456 --> 00:20:01.076 A:middle
匹配质量和使用信息

00:19:59.456 --> 00:20:01.076 A:middle
匹配质量和使用信息

00:20:01.076 --> 00:20:03.576 A:middle
仍然是影响排名的

00:20:03.576 --> 00:20:04.136 A:middle
关键因素

00:20:04.526 --> 00:20:05.956 A:middle
所以 为了获取最佳排名表现

00:20:05.956 --> 00:20:08.146 A:middle
就使用 NSUserActivity 吧

00:20:08.146 --> 00:20:09.236 A:middle
这样我们可以得知用户

00:20:09.236 --> 00:20:11.066 A:middle
在你的 App 里的交互情况

00:20:12.016 --> 00:20:13.686 A:middle
为排名算法的继续运行而

00:20:13.686 --> 00:20:15.456 A:middle
提供丰富的元数据

00:20:15.456 --> 00:20:17.956 A:middle
例如设置一个好的标题

00:20:17.956 --> 00:20:20.096 A:middle
设定信息内容丰富的描述 明确日期

00:20:20.096 --> 00:20:21.956 A:middle
并合理使用关键词 使

00:20:21.956 --> 00:20:24.266 A:middle
项目更容易查找

00:20:24.266 --> 00:20:27.156 A:middle
但不要误用关键词

00:20:27.156 --> 00:20:28.736 A:middle
因为直白的关键词匹配

00:20:28.736 --> 00:20:30.556 A:middle
意味着你的应用程序的

00:20:30.556 --> 00:20:30.856 A:middle
排名结果将会靠后

00:20:30.856 --> 00:20:35.026 A:middle
现在我们回到基础步骤

00:20:35.506 --> 00:20:37.586 A:middle
你需要将内容添加到索引里

00:20:37.586 --> 00:20:39.546 A:middle
而添加内容的基本方法是

00:20:39.546 --> 00:20:41.626 A:middle
直接通过

00:20:41.626 --> 00:20:42.746 A:middle
CSSearchable 索引 API

00:20:44.516 --> 00:20:46.056 A:middle
其次 你也可以给

00:20:46.056 --> 00:20:47.686 A:middle
NSUserActivity 创建索引

00:20:47.686 --> 00:20:48.956 A:middle
我们建议大家这样做

00:20:48.956 --> 00:20:50.236 A:middle
因为它可以提供非常重要的

00:20:50.236 --> 00:20:50.566 A:middle
排序信号

00:20:52.376 --> 00:20:53.946 A:middle
有时你需要删除那些

00:20:53.946 --> 00:20:55.546 A:middle
对用户操作或外部事件

00:20:55.546 --> 00:20:57.236 A:middle
作出反应的项目

00:20:57.236 --> 00:20:59.236 A:middle
当然 对此我们

00:20:59.236 --> 00:21:02.726 A:middle
也有适用的 API

00:20:59.236 --> 00:21:02.726 A:middle
也有适用的 API

00:21:02.816 --> 00:21:04.086 A:middle
把 CSSearchableItems

00:21:04.086 --> 00:21:05.786 A:middle
添加至索引  是非常简单的事

00:21:05.786 --> 00:21:07.426 A:middle
你可以完全掌控添加的内容

00:21:08.606 --> 00:21:10.066 A:middle
首先你要创建一个

00:21:10.066 --> 00:21:11.366 A:middle
CSSearchable 项目属性集

00:21:11.366 --> 00:21:12.836 A:middle
它将为项目储存元数据

00:21:13.096 --> 00:21:14.776 A:middle
你要将属性集符

00:21:15.026 --> 00:21:16.886 A:middle
通过通用型标识进行初始化

00:21:18.756 --> 00:21:20.766 A:middle
这里我们要使用 kUTTypeImage

00:21:20.766 --> 00:21:22.126 A:middle
它有泛型框架以及丰富的内容

00:21:24.316 --> 00:21:25.506 A:middle
你还要采用一些更具体的方式

00:21:25.506 --> 00:21:27.616 A:middle
这个体系有很多的

00:21:27.616 --> 00:21:29.736 A:middle
内置类型可以

00:21:29.736 --> 00:21:30.406 A:middle
获得延用

00:21:31.026 --> 00:21:32.346 A:middle
使用正确的类型

00:21:32.346 --> 00:21:33.966 A:middle
在 iOS 中很重要

00:21:33.966 --> 00:21:36.336 A:middle
在 macOS 中很关键

00:21:36.336 --> 00:21:37.666 A:middle
因为这会影响到你的内容

00:21:37.666 --> 00:21:38.586 A:middle
位置以及呈现方式

00:21:40.196 --> 00:21:41.786 A:middle
然后你要设定一些属性和

00:21:41.786 --> 00:21:43.556 A:middle
属性集显示名称

00:21:43.556 --> 00:21:44.366 A:middle
这是最基本的

00:21:46.936 --> 00:21:48.316 A:middle
你创建了一个带有特殊标识符的

00:21:48.526 --> 00:21:49.996 A:middle
可检索项目

00:21:49.996 --> 00:21:51.486 A:middle
一个域标识符和

00:21:51.486 --> 00:21:52.056 A:middle
属性集

00:21:52.206 --> 00:21:53.906 A:middle
记住 当 Spotlight 要

00:21:53.906 --> 00:21:55.086 A:middle
在你的应用里启动时

00:21:55.136 --> 00:21:56.646 A:middle
你将重新获得的东西

00:21:56.646 --> 00:21:57.906 A:middle
就是特殊标识符

00:21:58.386 --> 00:22:02.276 A:middle
你将把它编入索引

00:21:58.386 --> 00:22:02.276 A:middle
你将把它编入索引

00:22:02.276 --> 00:22:03.376 A:middle
完成句柄将会被调用

00:22:03.376 --> 00:22:05.226 A:middle
而数据已经被安全地

00:22:05.226 --> 00:22:06.636 A:middle
存入库中

00:22:08.416 --> 00:22:09.736 A:middle
就像 Spotlight 的情况一样

00:22:09.886 --> 00:22:11.436 A:middle
NSUserActivity 可以

00:22:11.436 --> 00:22:12.816 A:middle
将你 App 里的内容和路径点

00:22:12.816 --> 00:22:14.936 A:middle
编入索引

00:22:14.936 --> 00:22:16.686 A:middle
NSUserActivity 反映出

00:22:16.686 --> 00:22:17.456 A:middle
用户在应用里做过的事

00:22:17.456 --> 00:22:19.106 A:middle
而 CSSearchable

00:22:19.106 --> 00:22:22.606 A:middle
则反映出你的 App

00:22:22.606 --> 00:22:23.406 A:middle
必须提供的东西

00:22:23.976 --> 00:22:28.296 A:middle
因此  它们的不同之处在于

00:22:28.296 --> 00:22:29.686 A:middle
Core Spotlight API 可以

00:22:29.686 --> 00:22:31.736 A:middle
让你把用户还没有

00:22:31.736 --> 00:22:33.176 A:middle
访问过的条目编入索引

00:22:33.176 --> 00:22:34.256 A:middle
人们普遍都会选用它

00:22:34.256 --> 00:22:35.716 A:middle
因为它可以让你完全掌控

00:22:35.716 --> 00:22:36.176 A:middle
被加入索引的内容

00:22:37.106 --> 00:22:38.596 A:middle
但另一方面

00:22:38.636 --> 00:22:40.986 A:middle
因为 NSUserActivity 只针对用户

00:22:40.986 --> 00:22:42.436 A:middle
已经访问过的项目

00:22:42.436 --> 00:22:43.966 A:middle
它为排序提供

00:22:43.966 --> 00:22:44.486 A:middle
重要信号

00:22:45.076 --> 00:22:47.346 A:middle
如果想要通过 NSUserActivity

00:22:47.346 --> 00:22:49.066 A:middle
了解排序情况

00:22:49.066 --> 00:22:50.346 A:middle
你需要把它们关联到你创建索引的

00:22:50.346 --> 00:22:50.906 A:middle
CSSearchableItems

00:22:55.276 --> 00:22:57.656 A:middle
为了做到这一点  当你在创建

00:22:58.076 --> 00:23:00.206 A:middle
NSUserActivity 时

00:22:58.076 --> 00:23:00.206 A:middle
NSUserActivity 时

00:23:00.246 --> 00:23:01.846 A:middle
也是在创建一个属性集

00:23:03.116 --> 00:23:04.496 A:middle
你需要给属性集添加属性

00:23:04.496 --> 00:23:06.256 A:middle
然后你需要设置

00:23:06.256 --> 00:23:08.536 A:middle
相关的特殊标识符

00:23:08.536 --> 00:23:09.896 A:middle
或者是  如果你不想让

00:23:09.896 --> 00:23:12.926 A:middle
NSUserActivity 的使用寿命

00:23:12.926 --> 00:23:15.016 A:middle
绑定在 Core Spotlight 项目上

00:23:15.016 --> 00:23:16.076 A:middle
那么你就使用与 [音质不清晰]

00:23:16.936 --> 00:23:18.176 A:middle
相关的特殊标识符

00:23:19.916 --> 00:23:21.396 A:middle
然后你再把你的用户活动

00:23:21.396 --> 00:23:24.416 A:middle
标记为可搜索

00:23:24.606 --> 00:23:26.176 A:middle
再对用户活动的

00:23:26.176 --> 00:23:26.766 A:middle
属性集进行设置

00:23:28.186 --> 00:23:32.306 A:middle
删除项目的理由有很多

00:23:32.446 --> 00:23:34.046 A:middle
从应对用户的行为

00:23:34.436 --> 00:23:35.766 A:middle
到删除过时内容  一应俱全

00:23:36.666 --> 00:23:38.036 A:middle
使用 Core Spotlight API

00:23:38.036 --> 00:23:40.586 A:middle
你就可以通过具体项目的标识符

00:23:40.586 --> 00:23:41.536 A:middle
来删除它们

00:23:41.916 --> 00:23:43.816 A:middle
比如 如果用户删除了一个

00:23:43.816 --> 00:23:44.336 A:middle
文件

00:23:44.496 --> 00:23:46.366 A:middle
你可以利用多组项目的

00:23:46.366 --> 00:23:48.056 A:middle
领域标识符  把它们统统删除

00:23:48.056 --> 00:23:49.356 A:middle
如果用户要退出账号或

00:23:49.356 --> 00:23:50.906 A:middle
停止订阅

00:23:50.906 --> 00:23:51.986 A:middle
而你想要删除所有内容时

00:23:51.986 --> 00:23:53.586 A:middle
这个方法可能会奏效

00:23:53.586 --> 00:23:55.216 A:middle
你也可以用同样的方法

00:23:55.216 --> 00:23:56.316 A:middle
来删除已经编入索引的 NSUserActivities

00:23:56.316 --> 00:23:58.096 A:middle
前提是你在它们上面

00:23:58.096 --> 00:24:00.566 A:middle
设定了领域标识符

00:23:58.096 --> 00:24:00.566 A:middle
设定了领域标识符

00:24:00.566 --> 00:24:02.646 A:middle
最后 你可以删除应用中

00:24:02.736 --> 00:24:03.666 A:middle
所有的可搜索项目

00:24:03.666 --> 00:24:05.586 A:middle
如果你更换了版本并且

00:24:05.586 --> 00:24:06.616 A:middle
需要重新创建索引的话

00:24:06.616 --> 00:24:07.856 A:middle
这样的方法是很有用的

00:24:08.116 --> 00:24:09.306 A:middle
如果用户要删除一个应用

00:24:09.306 --> 00:24:11.206 A:middle
这也是以你的名义

00:24:11.206 --> 00:24:11.796 A:middle
调用的

00:24:11.856 --> 00:24:16.006 A:middle
现在我们来具体说说

00:24:16.006 --> 00:24:17.206 A:middle
为 Core Spotlight 创建索引的事

00:24:17.206 --> 00:24:19.326 A:middle
我们先说说如何注册

00:24:19.326 --> 00:24:21.496 A:middle
索引委托 然后再谈谈如何

00:24:21.496 --> 00:24:22.976 A:middle
建立 Core Spotlight Extension

00:24:22.976 --> 00:24:24.536 A:middle
它可以在你的 App

00:24:24.536 --> 00:24:26.866 A:middle
停止工作时

00:24:26.866 --> 00:24:27.626 A:middle
完成委托

00:24:27.626 --> 00:24:29.776 A:middle
我们将讨论客户状态

00:24:29.776 --> 00:24:31.296 A:middle
怎样运作以及如何通过它

00:24:31.296 --> 00:24:32.926 A:middle
让你的索引功能强大而

00:24:32.926 --> 00:24:33.366 A:middle
有效

00:24:34.046 --> 00:24:35.096 A:middle
我们也会探讨一些

00:24:35.096 --> 00:24:36.296 A:middle
性能注意事项

00:24:40.496 --> 00:24:42.206 A:middle
以索引委托进行注册  可以

00:24:42.296 --> 00:24:44.166 A:middle
在我们需要你有所行动的时候

00:24:44.166 --> 00:24:46.226 A:middle
让 Spotlight 联系到你的 App

00:24:47.566 --> 00:24:48.616 A:middle
这导致我们请求大家

00:24:48.616 --> 00:24:50.496 A:middle
把所有的内容都加入索引

00:24:50.496 --> 00:24:51.396 A:middle
或者把特定项目加入索引 [音源不清楚]

00:24:51.746 --> 00:24:55.306 A:middle
以确保精确和时效

00:24:55.536 --> 00:24:56.566 A:middle
它还负责响应

00:24:56.666 --> 00:24:58.096 A:middle
Index Throttling

00:24:58.096 --> 00:24:59.976 A:middle
并向拖放操作

00:25:00.536 --> 00:25:00.656 A:middle
提供数据

00:25:00.696 --> 00:25:01.686 A:middle
和通常情况一样 设定委托

00:25:01.686 --> 00:25:03.196 A:middle
只需要使用一行代码

00:25:03.196 --> 00:25:05.986 A:middle
但是承担委托

00:25:05.986 --> 00:25:06.836 A:middle
你却需要执行

00:25:06.836 --> 00:25:08.116 A:middle
CSSearchableIndex 委托协议

00:25:10.136 --> 00:25:11.796 A:middle
这是一份完整的协议

00:25:12.476 --> 00:25:13.386 A:middle
前两种方法是必须的

00:25:13.386 --> 00:25:15.086 A:middle
我们稍后再进行

00:25:15.086 --> 00:25:16.176 A:middle
更具体的介绍

00:25:16.856 --> 00:25:18.756 A:middle
接下来的两个方法是备选用的

00:25:18.756 --> 00:25:19.816 A:middle
它们告诉你  创建索引的过程已减慢

00:25:19.816 --> 00:25:21.116 A:middle
以便支持前台活动

00:25:21.116 --> 00:25:23.316 A:middle
从而让你可以选择停止

00:25:23.316 --> 00:25:24.586 A:middle
所有不重要的

00:25:24.586 --> 00:25:25.926 A:middle
索引进程

00:25:25.926 --> 00:25:27.646 A:middle
或者只关注最重要的项目

00:25:28.466 --> 00:25:31.486 A:middle
最后 这是我们先前

00:25:31.486 --> 00:25:32.696 A:middle
说过用于拖放的

00:25:32.696 --> 00:25:33.526 A:middle
两种方法

00:25:41.146 --> 00:25:42.226 A:middle
当全体索引的方法被调用时

00:25:42.226 --> 00:25:43.566 A:middle
你会将一切都加入

00:25:43.566 --> 00:25:44.026 A:middle
这个索引

00:25:44.626 --> 00:25:45.826 A:middle
当你收到最后一个项目的

00:25:45.826 --> 00:25:47.126 A:middle
回调时  你会调用

00:25:47.126 --> 00:25:47.886 A:middle
确认句柄

00:25:48.316 --> 00:25:49.426 A:middle
如果你的 App 退出

00:25:49.426 --> 00:25:50.706 A:middle
然后又在句柄被调用前重新启动

00:25:50.706 --> 00:25:52.086 A:middle
Spotlight 就会以

00:25:52.086 --> 00:25:53.386 A:middle
同样的回调方式

00:25:53.386 --> 00:25:53.826 A:middle
来调用它

00:25:54.786 --> 00:25:55.616 A:middle
当经过重新索引  并带有识别符的

00:25:55.616 --> 00:25:57.056 A:middle
项目被调用时

00:25:57.056 --> 00:25:58.296 A:middle
你要查找下述项目

00:25:58.296 --> 00:25:59.986 A:middle
即 Spotlight 要求以妥当形式重新加入

00:25:59.986 --> 00:26:00.746 A:middle
或删除的那些项目

00:25:59.986 --> 00:26:00.746 A:middle
或删除的那些项目

00:26:01.206 --> 00:26:02.086 A:middle
再次强调 你只有在

00:26:02.086 --> 00:26:03.716 A:middle
收到任务出色完成后

00:26:03.716 --> 00:26:04.686 A:middle
最终返回的回调函数

00:26:04.686 --> 00:26:06.006 A:middle
才能够调用

00:26:06.006 --> 00:26:06.336 A:middle
确认句柄

00:26:06.736 --> 00:26:10.606 A:middle
Core Spotlight Extension

00:26:10.686 --> 00:26:12.306 A:middle
执行 CSSearchableIndex 委托协议

00:26:12.306 --> 00:26:14.126 A:middle
并在你的 App

00:26:14.126 --> 00:26:15.356 A:middle
处于非工作状态时

00:26:15.356 --> 00:26:16.126 A:middle
使用回调函数

00:26:17.836 --> 00:26:19.096 A:middle
这可以在用户从备份中恢复

00:26:19.096 --> 00:26:20.816 A:middle
或者需要数据灾备

00:26:20.816 --> 00:26:22.216 A:middle
的时候

00:26:22.216 --> 00:26:24.036 A:middle
让你的内容尽快返回

00:26:24.036 --> 00:26:24.396 A:middle
Spotlight

00:26:25.176 --> 00:26:26.476 A:middle
Core Spotlight Extension

00:26:26.476 --> 00:26:27.836 A:middle
会在你的项目失效前被调用

00:26:27.836 --> 00:26:29.416 A:middle
以便你对它们进行

00:26:29.416 --> 00:26:30.746 A:middle
必要的更新 即便是用户

00:26:30.796 --> 00:26:32.406 A:middle
恰好没有在使用

00:26:32.406 --> 00:26:33.146 A:middle
你的应用

00:26:34.026 --> 00:26:36.396 A:middle
因为界面扩展与

00:26:36.396 --> 00:26:37.376 A:middle
索引委托是一样的

00:26:37.376 --> 00:26:38.956 A:middle
所以最好对你的代码进行因子排列

00:26:38.956 --> 00:26:40.136 A:middle
这样你就可以

00:26:40.136 --> 00:26:40.946 A:middle
参与执行过程了

00:26:41.176 --> 00:26:42.766 A:middle
理想的情况是

00:26:42.766 --> 00:26:44.016 A:middle
参与的执行过程

00:26:44.016 --> 00:26:44.536 A:middle
存在于框架之内

00:26:45.596 --> 00:26:46.616 A:middle
同时也要记住

00:26:46.616 --> 00:26:48.056 A:middle
Core Spotlight Extension 对于

00:26:48.056 --> 00:26:49.186 A:middle
支持拖放而言非常关键

00:26:49.776 --> 00:26:51.066 A:middle
如果你没有 Extension

00:26:51.066 --> 00:26:52.506 A:middle
当用户向你在另一个 App 的

00:26:52.746 --> 00:26:55.386 A:middle
应用程序里拖放条目时

00:26:55.386 --> 00:26:56.676 A:middle
就没有东西可调用

00:26:56.676 --> 00:27:00.916 A:middle
当然你可以在不使用客户端状态的

00:26:56.676 --> 00:27:00.916 A:middle
当然你可以在不使用客户端状态的

00:27:00.916 --> 00:27:02.506 A:middle
情况下获得创建索引的

00:27:02.506 --> 00:27:02.936 A:middle
权利

00:27:03.226 --> 00:27:05.076 A:middle
我们发现这可以让任务变得

00:27:05.106 --> 00:27:05.846 A:middle
更简单

00:27:06.406 --> 00:27:07.896 A:middle
客户端状态可以让

00:27:07.896 --> 00:27:09.326 A:middle
你的 Spotlight 与你的数据库同步

00:27:09.326 --> 00:27:11.826 A:middle
并且无需繁冗操作

00:27:14.816 --> 00:27:16.106 A:middle
客户端状态是一种

00:27:16.106 --> 00:27:16.776 A:middle
模糊的 Spotlight

00:27:17.416 --> 00:27:18.886 A:middle
它的性质由你来决定

00:27:19.616 --> 00:27:21.116 A:middle
它通常是一个简单的整数

00:27:21.346 --> 00:27:24.026 A:middle
代表一串序列号

00:27:24.166 --> 00:27:25.916 A:middle
这串序列号在数据库日志中

00:27:25.916 --> 00:27:27.766 A:middle
被标记出来

00:27:27.766 --> 00:27:29.086 A:middle
但是我们也见过更复杂的例子

00:27:30.306 --> 00:27:31.386 A:middle
我们来看看它是怎么一回事

00:27:33.486 --> 00:27:34.756 A:middle
你的 App 向 Core Spotlight

00:27:34.756 --> 00:27:36.276 A:middle
发送了批任务

00:27:36.306 --> 00:27:37.916 A:middle
每个批任务都有客户端状态日志

00:27:38.796 --> 00:27:39.656 A:middle
当批任务依照日志而展开进行时

00:27:40.146 --> 00:27:41.486 A:middle
你的回调日志就

00:27:41.486 --> 00:27:42.896 A:middle
被调用了

00:27:42.896 --> 00:27:44.026 A:middle
以便让你知道  批任务已被接收

00:27:45.016 --> 00:27:47.316 A:middle
这里的 App 只是将一个新的

00:27:47.316 --> 00:27:50.096 A:middle
批任务加入索引

00:27:50.096 --> 00:27:51.506 A:middle
但会导致灾难降临 让 App 崩溃

00:27:52.826 --> 00:27:53.866 A:middle
当元数据中发生的情况

00:27:53.866 --> 00:27:55.516 A:middle
是未提交的状态

00:27:55.516 --> 00:27:56.236 A:middle
可以通过索引找到吗

00:27:56.746 --> 00:27:59.166 A:middle
用客户端状态

00:28:00.226 --> 00:28:00.306 A:middle
你就可以找到它

00:28:00.576 --> 00:28:01.986 A:middle
当你的 App 再次启动时

00:28:01.986 --> 00:28:03.696 A:middle
你请求用户端状态

00:28:04.186 --> 00:28:05.586 A:middle
现在你收到了状态二

00:28:05.656 --> 00:28:07.386 A:middle
因为这实际上是日志中的

00:28:07.386 --> 00:28:08.466 A:middle
最后一个状态

00:28:08.466 --> 00:28:09.986 A:middle
你正好可以在正确的节点

00:28:09.986 --> 00:28:11.346 A:middle
重新开始创建

00:28:11.346 --> 00:28:11.666 A:middle
索引

00:28:12.306 --> 00:28:15.046 A:middle
如果 App 出现崩溃时

00:28:15.046 --> 00:28:16.306 A:middle
数据在 Core Spotlight 的程序中

00:28:16.306 --> 00:28:17.446 A:middle
已经实现了这一点

00:28:17.446 --> 00:28:18.456 A:middle
你就可以从状态三继续

00:28:18.456 --> 00:28:19.836 A:middle
这样一来你的工作量

00:28:19.836 --> 00:28:20.886 A:middle
就会很少

00:28:21.916 --> 00:28:24.156 A:middle
要想保存用户端状态

00:28:24.156 --> 00:28:25.306 A:middle
你需要创建一个命名索引

00:28:25.786 --> 00:28:27.116 A:middle
你不能使用这个默认

00:28:27.116 --> 00:28:27.636 A:middle
示例

00:28:28.546 --> 00:28:30.196 A:middle
从命名我们就可以知道

00:28:30.196 --> 00:28:31.816 A:middle
哪个是要提取的

00:28:31.816 --> 00:28:33.446 A:middle
哪个是被请求的 因为

00:28:33.446 --> 00:28:34.346 A:middle
有些 App 需要的代表符号不止一个

00:28:34.616 --> 00:28:35.526 A:middle
比如 因为它们是

00:28:35.526 --> 00:28:36.466 A:middle
复合数据库

00:28:37.586 --> 00:28:39.536 A:middle
所以 在你的代码中

00:28:39.536 --> 00:28:40.896 A:middle
你首先需要创建命名索引实例

00:28:41.746 --> 00:28:44.716 A:middle
你会开始建立索引批任务

00:28:44.946 --> 00:28:46.456 A:middle
像平常一样加入可搜索项目

00:28:46.966 --> 00:28:49.106 A:middle
然后你需要计算

00:28:49.106 --> 00:28:50.016 A:middle
想要存储的状态

00:28:51.306 --> 00:28:53.606 A:middle
最终你用你的模糊状态

00:28:53.606 --> 00:28:55.326 A:middle
结束批任务

00:28:55.326 --> 00:28:57.026 A:middle
注意完成句柄返回的

00:28:57.026 --> 00:28:58.036 A:middle
所有错误

00:28:58.526 --> 00:29:01.556 A:middle
所以  在这后面的一些节点上

00:28:58.526 --> 00:29:01.556 A:middle
所以  在这后面的一些节点上

00:29:01.556 --> 00:29:03.016 A:middle
你的 App 或 Extension 开始

00:29:04.066 --> 00:29:05.516 A:middle
利用客户端状态

00:29:05.516 --> 00:29:05.976 A:middle
继续开始索引

00:29:06.486 --> 00:29:09.496 A:middle
你读取客户端状态

00:29:09.496 --> 00:29:10.996 A:middle
把它和当前状态进行比较

00:29:10.996 --> 00:29:12.826 A:middle
再想尽办法

00:29:12.826 --> 00:29:14.096 A:middle
让它们保持同步

00:29:14.486 --> 00:29:18.406 A:middle
所以 在你的代码里

00:29:18.406 --> 00:29:19.536 A:middle
你为同一名称创建了索引实例

00:29:19.536 --> 00:29:22.376 A:middle
你读取到客户端状态

00:29:22.676 --> 00:29:25.126 A:middle
在处理完所有的错误后

00:29:25.756 --> 00:29:26.846 A:middle
检查状态

00:29:27.526 --> 00:29:29.746 A:middle
然后根据需要

00:29:29.746 --> 00:29:31.316 A:middle
只从原先中断的地方继续

00:29:31.556 --> 00:29:34.156 A:middle
这样你就可以重新进行

00:29:34.156 --> 00:29:35.286 A:middle
必要的操作

00:29:35.286 --> 00:29:36.796 A:middle
从而让你的索引和

00:29:36.796 --> 00:29:37.736 A:middle
Core Spotlight 同步

00:29:41.336 --> 00:29:42.556 A:middle
我们再来说说

00:29:42.556 --> 00:29:43.566 A:middle
索引的性能表现

00:29:44.236 --> 00:29:46.036 A:middle
索引是一个后台任务

00:29:46.036 --> 00:29:47.226 A:middle
你肯定不想让索引工作

00:29:47.226 --> 00:29:48.846 A:middle
拖慢你的 App 或设备

00:29:48.846 --> 00:29:49.526 A:middle
运行速度

00:29:50.076 --> 00:29:53.476 A:middle
所以  系统负担要最小化

00:29:53.476 --> 00:29:55.296 A:middle
要优化对文件系统或数据库的访问

00:29:55.296 --> 00:29:58.026 A:middle
唯有如此

00:29:58.026 --> 00:29:58.976 A:middle
你才能创建各种项目

00:29:59.626 --> 00:30:01.536 A:middle
记住 Core Spotlight 的每次调用

00:29:59.626 --> 00:30:01.536 A:middle
记住 Core Spotlight 的每次调用

00:30:01.536 --> 00:30:03.166 A:middle
都产生系统开销

00:30:03.856 --> 00:30:06.306 A:middle
所以只要有可能  就应当使用

00:30:06.306 --> 00:30:08.236 A:middle
批处理项目 而不是

00:30:08.446 --> 00:30:08.846 A:middle
单个项目

00:30:09.476 --> 00:30:11.706 A:middle
也就是说 鉴于存储空间有限

00:30:11.706 --> 00:30:15.326 A:middle
所以你要将批量控制在

00:30:15.326 --> 00:30:16.416 A:middle
合理的小范围内

00:30:16.576 --> 00:30:18.056 A:middle
即使每一批次只有 10 个项

00:30:18.056 --> 00:30:19.676 A:middle
也会逐级按规模地增加

00:30:19.676 --> 00:30:20.426 A:middle
系统开销

00:30:21.126 --> 00:30:23.016 A:middle
多数情况下 以流水线形式

00:30:23.016 --> 00:30:25.286 A:middle
进行多批次处理

00:30:25.286 --> 00:30:27.106 A:middle
相比使用单个大批量处理

00:30:27.316 --> 00:30:30.296 A:middle
更有效率

00:30:30.296 --> 00:30:31.516 A:middle
这样可以让索引和你的工作

00:30:31.516 --> 00:30:33.756 A:middle
平行开展

00:30:34.046 --> 00:30:35.336 A:middle
因为这样一来

00:30:36.016 --> 00:30:38.196 A:middle
你的 App 在使用过程中

00:30:38.196 --> 00:30:38.766 A:middle
创建索引也不会阻碍主线程

00:30:38.866 --> 00:30:40.896 A:middle
最后 在后台排队进行索引

00:30:40.896 --> 00:30:42.356 A:middle
将有助于提高功效和

00:30:42.356 --> 00:30:43.676 A:middle
反应快捷的程度

00:30:44.246 --> 00:30:47.576 A:middle
要想让 Spotlight 的内容显得美观

00:30:47.576 --> 00:30:49.136 A:middle
你需要建立一个

00:30:49.136 --> 00:30:49.596 A:middle
好的缩略图

00:30:51.006 --> 00:30:52.506 A:middle
在默认状态下  Spotlight 会使用

00:30:52.506 --> 00:30:54.066 A:middle
你的 App 图标

00:30:54.106 --> 00:30:55.446 A:middle
这让人很难一眼就区分出

00:30:55.446 --> 00:30:55.946 A:middle
结果

00:30:56.846 --> 00:30:59.116 A:middle
与缩略图同样重要的是

00:30:59.116 --> 00:31:01.306 A:middle
项目的标题  这个标题

00:30:59.116 --> 00:31:01.306 A:middle
项目的标题  这个标题

00:31:01.306 --> 00:31:03.056 A:middle
不仅是视觉直观意义上的  它也是

00:31:03.056 --> 00:31:04.176 A:middle
用户们最常搜索的

00:31:04.176 --> 00:31:04.896 A:middle
目标

00:31:05.366 --> 00:31:07.426 A:middle
在设置好缩略图和标题后

00:31:07.426 --> 00:31:09.056 A:middle
你需要设置其他

00:31:09.056 --> 00:31:10.286 A:middle
适用于个人联系的

00:31:10.286 --> 00:31:11.326 A:middle
字段

00:31:12.636 --> 00:31:14.256 A:middle
你的描述可以提供更为

00:31:14.256 --> 00:31:16.196 A:middle
丰富的信息

00:31:16.196 --> 00:31:17.866 A:middle
显示内容创建的时间

00:31:17.866 --> 00:31:20.376 A:middle
也很有帮助

00:31:20.376 --> 00:31:22.216 A:middle
只要出现在合适的地方

00:31:22.216 --> 00:31:23.776 A:middle
排名和排名描述

00:31:23.776 --> 00:31:24.446 A:middle
也能发挥重大作用

00:31:24.866 --> 00:31:26.616 A:middle
如果你知道某个应用所在的位置

00:31:26.616 --> 00:31:28.036 A:middle
设定位置名称

00:31:28.036 --> 00:31:29.246 A:middle
算得上是很好的尝试

00:31:29.746 --> 00:31:35.426 A:middle
因此  设置好标题

00:31:35.426 --> 00:31:37.386 A:middle
提供一个好的缩略图

00:31:37.416 --> 00:31:39.466 A:middle
并且给你的内容设置正确的内容类型

00:31:40.076 --> 00:31:41.136 A:middle
然后用补充的元数据

00:31:41.136 --> 00:31:42.456 A:middle
填写用户界面

00:31:42.456 --> 00:31:43.746 A:middle
创造出内容方面的最佳

00:31:43.746 --> 00:31:44.326 A:middle
视觉展示效果

00:31:44.896 --> 00:31:46.676 A:middle
要记住 设置正确的元数据

00:31:46.676 --> 00:31:48.076 A:middle
不仅只是考虑到外观效果

00:31:48.076 --> 00:31:50.416 A:middle
它还会对行为产生影响

00:31:50.996 --> 00:31:53.726 A:middle
我们来看看这个

00:31:53.896 --> 00:31:55.236 A:middle
对于初学者来说

00:31:55.236 --> 00:31:56.536 A:middle
增强快速操作功能 例如指示和调用

00:31:56.536 --> 00:31:57.946 A:middle
可以让用户的界面更丰富

00:31:57.946 --> 00:31:59.866 A:middle
而且能够给用户带来

00:31:59.866 --> 00:32:00.486 A:middle
更大价值

00:31:59.866 --> 00:32:00.486 A:middle
更大价值

00:32:01.476 --> 00:32:03.176 A:middle
为了支持导航功能

00:32:03.216 --> 00:32:04.566 A:middle
你需要设置

00:32:04.566 --> 00:32:06.226 A:middle
经纬度属性  并将导航支持

00:32:06.226 --> 00:32:07.906 A:middle
设置为 True

00:32:08.366 --> 00:32:10.136 A:middle
同样 为了支持电话功能

00:32:10.136 --> 00:32:11.706 A:middle
你需要设置电话号码属性

00:32:11.706 --> 00:32:13.516 A:middle
并将支持导航设置为

00:32:13.516 --> 00:32:14.806 A:middle
True 抱歉说错了

00:32:15.506 --> 00:32:17.506 A:middle
应该是将呼叫行为设置为

00:32:17.506 --> 00:32:17.696 A:middle
True

00:32:18.486 --> 00:32:21.026 A:middle
设置用户能够理解的属性

00:32:21.026 --> 00:32:22.856 A:middle
能够使得搜索

00:32:22.856 --> 00:32:23.356 A:middle
更加方便

00:32:23.866 --> 00:32:24.916 A:middle
设置与项目本身

00:32:24.916 --> 00:32:26.146 A:middle
并没有多少自然联系的属性

00:32:26.146 --> 00:32:27.556 A:middle
会给搜索造成困难

00:32:27.556 --> 00:32:28.646 A:middle
并导致你的结果在排名表现上

00:32:28.646 --> 00:32:29.336 A:middle
很糟糕

00:32:29.746 --> 00:32:31.996 A:middle
通过设置联系人标识符

00:32:32.566 --> 00:32:34.016 A:middle
你可以集中进行

00:32:34.016 --> 00:32:35.666 A:middle
联系人的搜索

00:32:35.876 --> 00:32:38.076 A:middle
这是让用户获取你内容的好办法

00:32:39.376 --> 00:32:40.646 A:middle
有一些辅助特性 比如

00:32:40.646 --> 00:32:42.756 A:middle
拖放和快速操作

00:32:43.856 --> 00:32:44.796 A:middle
它们会为你带来一流的

00:32:44.796 --> 00:32:45.406 A:middle
体验

00:32:46.636 --> 00:32:48.086 A:middle
另一种体验  是能够

00:32:48.086 --> 00:32:49.116 A:middle
让[音质不清晰]

00:32:49.116 --> 00:32:49.676 A:middle
融入到你自己的应用中

00:32:49.676 --> 00:32:52.286 A:middle
我们来看看它是什么

00:32:53.096 --> 00:32:53.236 A:middle
情况

00:32:53.416 --> 00:32:54.396 A:middle
要确保在 Spotlight 中

00:32:54.396 --> 00:32:55.906 A:middle
快速完成搜索

00:32:55.906 --> 00:32:57.156 A:middle
让用户可以直接启动

00:32:57.156 --> 00:32:57.876 A:middle
找到的项目

00:32:59.206 --> 00:33:00.706 A:middle
用 NSUserActivity 来储存状态

00:32:59.206 --> 00:33:00.706 A:middle
用 NSUserActivity 来储存状态

00:33:00.706 --> 00:33:03.016 A:middle
你的 App 委托

00:33:03.016 --> 00:33:04.296 A:middle
将是一种持续的作业

00:33:04.296 --> 00:33:06.096 A:middle
你的[音质不清晰]作业类型以及

00:33:06.096 --> 00:33:08.586 A:middle
用户信息字典

00:33:08.586 --> 00:33:09.686 A:middle
则是非常有必要的

00:33:09.946 --> 00:33:10.956 A:middle
如果因为用户在 Spotlight 中

00:33:10.956 --> 00:33:11.716 A:middle
选择了一个 CSSearchableItem

00:33:11.716 --> 00:33:13.286 A:middle
所以你要启动程序

00:33:13.286 --> 00:33:15.296 A:middle
那么这个作业类型将成为

00:33:15.406 --> 00:33:18.226 A:middle
CSSearchableItem 操作类型

00:33:18.386 --> 00:33:20.666 A:middle
使用 CSSearchableItem

00:33:20.666 --> 00:33:21.726 A:middle
作业标识符

00:33:21.726 --> 00:33:22.696 A:middle
就可以从用户信息字典里

00:33:22.776 --> 00:33:24.136 A:middle
获取到独一无二的

00:33:24.136 --> 00:33:24.856 A:middle
标识符

00:33:26.056 --> 00:33:27.266 A:middle
启动作业的另一个原因是

00:33:27.266 --> 00:33:29.946 A:middle
用户想要

00:33:29.946 --> 00:33:31.476 A:middle
在你的应用里

00:33:31.476 --> 00:33:32.026 A:middle
继续搜索

00:33:32.596 --> 00:33:33.656 A:middle
在这种情况下

00:33:33.656 --> 00:33:35.376 A:middle
你得到的是 CSQueryContinuation

00:33:35.896 --> 00:33:38.266 A:middle
操作类型  这样就可以利用

00:33:38.266 --> 00:33:39.176 A:middle
CSSearchQueryString

00:33:39.176 --> 00:33:40.736 A:middle
从用户信息字典中找到

00:33:40.736 --> 00:33:41.696 A:middle
搜索查询内容

00:33:42.046 --> 00:33:45.536 A:middle
当然 如果没有搜索 API

00:33:45.536 --> 00:33:46.786 A:middle
搜索系统便是

00:33:46.786 --> 00:33:47.316 A:middle
不完整的

00:33:48.316 --> 00:33:49.636 A:middle
Core Spotlight 能够

00:33:49.636 --> 00:33:51.036 A:middle
帮助搜索你已经提供的

00:33:51.036 --> 00:33:51.686 A:middle
数据

00:33:52.656 --> 00:33:53.856 A:middle
这是系统里多处使用到的

00:33:53.856 --> 00:33:55.586 A:middle
同一种搜索

00:33:55.586 --> 00:33:56.076 A:middle
引擎

00:33:56.856 --> 00:33:58.616 A:middle
通过使用它  你可以

00:33:58.616 --> 00:33:59.906 A:middle
持续地使用 Spotlight 和

00:33:59.906 --> 00:34:00.926 A:middle
系统应用

00:33:59.906 --> 00:34:00.926 A:middle
系统应用

00:34:01.526 --> 00:34:02.836 A:middle
这对于你设备中的

00:34:02.836 --> 00:34:04.616 A:middle
所有内容都非常有益

00:34:04.616 --> 00:34:06.346 A:middle
当然了 它在 iOS 和 macOS 里均可使用

00:34:06.866 --> 00:34:11.576 A:middle
你可以查询规格大小相同的项目

00:34:11.576 --> 00:34:12.746 A:middle
也更以查找更大一些 或稍小一些的项目

00:34:13.786 --> 00:34:15.306 A:middle
所以  如果你想要查找

00:34:15.306 --> 00:34:16.505 A:middle
超过一定页数的项目

00:34:16.505 --> 00:34:18.676 A:middle
查询语句是非常

00:34:18.676 --> 00:34:19.126 A:middle
简短的

00:34:19.666 --> 00:34:20.966 A:middle
如果你想找到页数限定

00:34:20.966 --> 00:34:22.045 A:middle
在一定范围内的所有项目

00:34:22.045 --> 00:34:23.466 A:middle
你可以使用 InRange 运算符

00:34:23.966 --> 00:34:26.146 A:middle
你还可以使用

00:34:26.216 --> 00:34:27.456 A:middle
布尔运算符 比如说 用它来

00:34:27.456 --> 00:34:29.476 A:middle
筛选符合特定宽度和高度的

00:34:29.476 --> 00:34:29.696 A:middle
项目

00:34:30.396 --> 00:34:32.396 A:middle
你可以使用配有旗标的字符串

00:34:32.396 --> 00:34:33.606 A:middle
来改变 Spotlight 匹配的

00:34:33.606 --> 00:34:35.076 A:middle
严格程度

00:34:36.016 --> 00:34:37.416 A:middle
关于采用敏感度较低的

00:34:37.516 --> 00:34:38.136 A:middle
文字匹配

00:34:38.136 --> 00:34:40.136 A:middle
[音质不清晰]

00:34:40.136 --> 00:34:42.045 A:middle
与其他带有旗标的组合形成不敏感的匹配

00:34:42.045 --> 00:34:43.556 A:middle
或是符合所有字段的严格匹配

00:34:45.315 --> 00:34:46.326 A:middle
或者说  你可以让自己匹配标准非常宽松

00:34:46.326 --> 00:34:47.866 A:middle
把每个单词都当成

00:34:47.866 --> 00:34:48.846 A:middle
一次独立查询

00:34:49.576 --> 00:34:50.926 A:middle
这就是 Spotlight 的工作机制

00:34:50.926 --> 00:34:52.295 A:middle
如果你想要前后保持一致

00:34:52.295 --> 00:34:54.246 A:middle
从这里开始 是一个不错的

00:34:54.246 --> 00:34:54.585 A:middle
选择

00:34:55.196 --> 00:34:57.346 A:middle
当然 如果这不适合你的应用程序

00:34:57.346 --> 00:34:59.146 A:middle
你可以按照自己的意愿

00:34:59.146 --> 00:35:00.636 A:middle
进行自由组合 或是

00:34:59.146 --> 00:35:00.636 A:middle
进行自由组合 或是

00:35:00.636 --> 00:35:00.996 A:middle
混合搭配

00:35:04.496 --> 00:35:06.156 A:middle
Core Spotlight 支持全系列的

00:35:06.156 --> 00:35:07.716 A:middle
比较运算符

00:35:07.896 --> 00:35:09.456 A:middle
和布尔逻辑

00:35:09.456 --> 00:35:10.286 A:middle
当然 你可以用圆括号

00:35:10.286 --> 00:35:11.666 A:middle
来嵌入表达内容

00:35:12.066 --> 00:35:13.306 A:middle
字段通配符将会匹配

00:35:13.306 --> 00:35:15.426 A:middle
所有默认搜索的元数据

00:35:15.426 --> 00:35:16.806 A:middle
而双通配符会

00:35:16.806 --> 00:35:18.216 A:middle
与之匹配  它与文本内容也同样匹配

00:35:18.636 --> 00:35:21.326 A:middle
对于字符串的匹配

00:35:21.326 --> 00:35:22.056 A:middle
我们有很多选择

00:35:22.376 --> 00:35:23.886 A:middle
我们的索引已经很大程度上

00:35:23.886 --> 00:35:25.456 A:middle
优化了精确搜索和前缀搜索

00:35:25.506 --> 00:35:27.396 A:middle
如果使用这些方法 你会发现

00:35:27.876 --> 00:35:28.046 A:middle
它的速度快得惊人

00:35:28.696 --> 00:35:30.376 A:middle
一般情况下

00:35:30.376 --> 00:35:33.116 A:middle
前缀越长  查询越快

00:35:34.046 --> 00:35:35.616 A:middle
部分匹配与前缀匹配

00:35:35.616 --> 00:35:37.416 A:middle
极为相似  关键是要看

00:35:37.416 --> 00:35:39.396 A:middle
哪种方法可以更快得到结果

00:35:39.396 --> 00:35:42.296 A:middle
这取决于字符串

00:35:42.386 --> 00:35:43.896 A:middle
词组匹配意味着只是

00:35:43.896 --> 00:35:45.196 A:middle
匹配连续的几个词

00:35:45.196 --> 00:35:46.876 A:middle
它耗费的资源肯定更高一些

00:35:48.766 --> 00:35:50.146 A:middle
最后是后缀和内缀匹配

00:35:50.146 --> 00:35:51.536 A:middle
它们速度会更慢

00:35:51.536 --> 00:35:52.806 A:middle
这些内容  再加上词组匹配

00:35:52.806 --> 00:35:55.086 A:middle
导致所需时间也大大增加

00:35:56.696 --> 00:35:58.446 A:middle
查询句法也会提供一组旗标

00:35:58.446 --> 00:35:59.856 A:middle
通过它们

00:36:00.046 --> 00:36:00.886 A:middle
你可以让匹配规则少一些

00:36:00.886 --> 00:36:01.306 A:middle
严苛条件

00:36:01.746 --> 00:36:03.696 A:middle
这个 C 代表不区分大小写

00:36:03.696 --> 00:36:04.976 A:middle
D 代表不区分变音符号

00:36:05.236 --> 00:36:09.166 A:middle
这是说像这样的

00:36:09.166 --> 00:36:10.976 A:middle
字符仍然能够

00:36:10.976 --> 00:36:12.326 A:middle
与某个旧字符相匹配

00:36:12.426 --> 00:36:14.046 A:middle
如果用户的本地语言

00:36:14.046 --> 00:36:14.416 A:middle
是英语的话

00:36:15.776 --> 00:36:17.706 A:middle
逐字匹配的意思是

00:36:17.706 --> 00:36:19.606 A:middle
我们将词汇与字段内部

00:36:19.606 --> 00:36:21.246 A:middle
相匹配

00:36:21.246 --> 00:36:22.166 A:middle
而不仅是锁定于字段的开端

00:36:22.256 --> 00:36:24.516 A:middle
T 代表令牌化

00:36:24.516 --> 00:36:25.656 A:middle
它把查询里的单个单词进行了拆解

00:36:27.496 --> 00:36:28.886 A:middle
我们来看一个例子

00:36:30.636 --> 00:36:31.786 A:middle
我们正在执行搜索功能

00:36:31.786 --> 00:36:33.046 A:middle
我们把用户的查询

00:36:33.046 --> 00:36:33.566 A:middle
作为输入

00:36:34.786 --> 00:36:36.166 A:middle
首先 我们要确保取消

00:36:36.166 --> 00:36:37.846 A:middle
当前所有正在运行的查询

00:36:37.846 --> 00:36:38.736 A:middle
这样我们就不会有多个

00:36:38.736 --> 00:36:40.066 A:middle
同时发生的查询

00:36:40.066 --> 00:36:41.066 A:middle
因为这样会使新的查询速度变慢

00:36:41.606 --> 00:36:42.876 A:middle
因为它是由用户输入

00:36:42.876 --> 00:36:44.256 A:middle
我们要确保对查询字符串作出说明

00:36:44.776 --> 00:36:47.736 A:middle
然后我们用双星句法和

00:36:47.736 --> 00:36:51.496 A:middle
Cdwmt 运算符

00:36:51.546 --> 00:36:53.056 A:middle
来开展一次很不严格的查询

00:36:53.516 --> 00:36:57.286 A:middle
我们创建一个查询对象

00:36:57.856 --> 00:36:59.076 A:middle
具体就是我们想获取

00:36:59.076 --> 00:36:59.806 A:middle
显示名称

00:37:00.346 --> 00:37:02.736 A:middle
我们设置查找项目句柄

00:37:03.246 --> 00:37:05.036 A:middle
然后设置

00:37:05.036 --> 00:37:05.296 A:middle
完成句柄

00:37:06.576 --> 00:37:09.966 A:middle
只有从查询中得不到更多结果时

00:37:09.966 --> 00:37:11.056 A:middle
完成句柄才会

00:37:11.056 --> 00:37:12.576 A:middle
被调用

00:37:12.576 --> 00:37:14.516 A:middle
而查找项目句柄

00:37:14.516 --> 00:37:15.796 A:middle
可以

00:37:15.796 --> 00:37:17.106 A:middle
被多批结果调用

00:37:17.786 --> 00:37:19.886 A:middle
之后他们需要做的就是

00:37:19.886 --> 00:37:21.296 A:middle
开始查询

00:37:21.296 --> 00:37:22.816 A:middle
使用 Core Spotlight 搜索 API

00:37:22.816 --> 00:37:23.706 A:middle
就是这么容易

00:37:29.066 --> 00:37:30.656 A:middle
总之  现在的 Core Spotlight

00:37:30.656 --> 00:37:31.986 A:middle
可用于 Mac

00:37:31.986 --> 00:37:34.096 A:middle
也可用于 iOS

00:37:34.096 --> 00:37:35.166 A:middle
对于你们管理的所有内容都很有用

00:37:36.096 --> 00:37:37.696 A:middle
请大家采用新的 API

00:37:37.696 --> 00:37:40.136 A:middle
或者 iOS 和 macOS 上的拖放

00:37:40.136 --> 00:37:41.406 A:middle
预览功能

00:37:42.156 --> 00:37:43.556 A:middle
为搜索 展示和排序

00:37:43.556 --> 00:37:45.466 A:middle
提供丰富的元数据

00:37:45.846 --> 00:37:48.416 A:middle
用 NSUserActivity 提供

00:37:48.416 --> 00:37:49.646 A:middle
使用信息

00:37:50.136 --> 00:37:52.676 A:middle
始终要注意的是

00:37:52.676 --> 00:37:54.106 A:middle
索引的准确性

00:37:54.106 --> 00:37:55.806 A:middle
并通过执行索引 Extension

00:37:56.406 --> 00:37:58.646 A:middle
和利用客户端状态

00:37:59.236 --> 00:37:59.366 A:middle
来更新索引

00:38:01.186 --> 00:38:02.796 A:middle
更多内容请访问

00:38:02.796 --> 00:38:06.876 A:middle
developer.apple.com

00:38:06.876 --> 00:38:08.236 A:middle
大家也可以观看本周

00:38:08.236 --> 00:38:09.816 A:middle
较早的会议

00:38:09.886 --> 00:38:11.496 A:middle
如果你对拖放感兴趣

00:38:11.566 --> 00:38:13.036 A:middle
这里面会有具体介绍

00:38:13.086 --> 00:38:14.506 A:middle
它会推荐一些如何熟练操控

00:38:15.056 --> 00:38:15.796 A:middle
拖放的内容

00:38:15.936 --> 00:38:17.936 A:middle
如果你想知道

00:38:17.936 --> 00:38:19.246 A:middle
CoreData 和 Core Spotlight

00:38:19.246 --> 00:38:21.286 A:middle
是如何交互的

00:38:21.286 --> 00:38:23.206 A:middle
“CoreData 有何创新”

00:38:23.206 --> 00:38:23.556 A:middle
这场会议也非常值得观看
