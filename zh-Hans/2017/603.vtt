WEBVTT

00:00:07.516 --> 00:00:16.500 A:middle
[人声]

00:00:24.516 --> 00:00:26.736 A:middle
[掌声]

00:00:27.236 --> 00:00:28.126 A:middle
&gt;&gt; 大家早上好

00:00:28.746 --> 00:00:30.476 A:middle
欢迎来到 VR with Metal 2

00:00:31.156 --> 00:00:32.646 A:middle
我是 Rav Dhiraj

00:00:32.646 --> 00:00:34.466 A:middle
是 Apple GPU 软件团队的一员

00:00:35.676 --> 00:00:37.446 A:middle
大家都已经在

00:00:37.446 --> 00:00:39.006 A:middle
Introducing Metal 2 讲座中了解到

00:00:39.416 --> 00:00:40.726 A:middle
我们今年又推出了不少

00:00:40.726 --> 00:00:41.626 A:middle
新特性

00:00:42.436 --> 00:00:43.546 A:middle
在这场演讲中 我将会

00:00:43.606 --> 00:00:45.476 A:middle
特别集中讲一下

00:00:45.476 --> 00:00:46.986 A:middle
我们在 Metal 2 中添加的

00:00:46.986 --> 00:00:47.666 A:middle
对 VR 的支持

00:00:48.226 --> 00:00:51.426 A:middle
首先 我想简短总结一下

00:00:51.506 --> 00:00:53.396 A:middle
我们在 macOS High Sierra 中

00:00:53.396 --> 00:00:54.626 A:middle
推出的新功能

00:00:54.626 --> 00:00:57.106 A:middle
然后再深入讲解

00:00:57.106 --> 00:00:58.386 A:middle
构建 VR App 有哪些要求

00:00:59.186 --> 00:01:00.976 A:middle
最后 再仔细讲一下

00:00:59.186 --> 00:01:00.976 A:middle
最后 再仔细讲一下

00:01:00.976 --> 00:01:02.576 A:middle
你们可以如何利用

00:01:02.576 --> 00:01:04.046 A:middle
我们在 OS 中添加的

00:01:04.046 --> 00:01:05.906 A:middle
最新的外接 GPU 支持

00:01:05.906 --> 00:01:06.436 A:middle
这项功能

00:01:09.256 --> 00:01:09.516 A:middle
好了

00:01:09.516 --> 00:01:11.166 A:middle
我希望大家已经都知道

00:01:11.216 --> 00:01:12.276 A:middle
虚拟现实是什么了

00:01:12.786 --> 00:01:14.706 A:middle
但为防万一 我还是解释一下

00:01:14.706 --> 00:01:17.526 A:middle
它是一种沉浸式的 360 度 3D

00:01:17.606 --> 00:01:20.246 A:middle
体验 可以通过控制器

00:01:20.246 --> 00:01:21.726 A:middle
直接操控物体

00:01:22.366 --> 00:01:24.476 A:middle
还有一个房间大小的

00:01:24.476 --> 00:01:25.676 A:middle
交互环境供人探索

00:01:25.676 --> 00:01:27.476 A:middle
这要多亏了

00:01:27.476 --> 00:01:28.826 A:middle
高度精确的动作追踪

00:01:30.036 --> 00:01:31.306 A:middle
我们 Apple 认为

00:01:31.306 --> 00:01:32.716 A:middle
VR 对于在座的开发者来说

00:01:32.716 --> 00:01:34.786 A:middle
是一个为用户创造新体验的

00:01:34.786 --> 00:01:36.646 A:middle
很棒的媒介

00:01:37.276 --> 00:01:40.956 A:middle
Metal 2 以三种方式

00:01:40.956 --> 00:01:41.846 A:middle
为此提供支持

00:01:42.516 --> 00:01:46.766 A:middle
首先 提供一个快速 panel

00:01:46.846 --> 00:01:48.316 A:middle
让画面帧直接显示

00:01:48.316 --> 00:01:49.776 A:middle
在 VR 头戴显示器上 这用到了新的

00:01:50.296 --> 00:01:52.006 A:middle
Direct to Display 功能

00:01:53.616 --> 00:01:56.136 A:middle
其次 推出特别为 VR

00:01:56.136 --> 00:01:57.696 A:middle
设计的新功能

00:01:57.756 --> 00:02:00.026 A:middle
比如 Viewport Array

00:01:57.756 --> 00:02:00.026 A:middle
比如 Viewport Array

00:02:01.506 --> 00:02:03.006 A:middle
最后 为外接 GPU

00:02:03.076 --> 00:02:04.366 A:middle
提供基础支持

00:02:04.366 --> 00:02:06.096 A:middle
以便开发者能够

00:02:06.096 --> 00:02:07.796 A:middle
使用更多样的

00:02:07.796 --> 00:02:08.705 A:middle
Mac 硬件

00:02:08.946 --> 00:02:10.616 A:middle
支持 VR 的 Mac 硬件

00:02:10.616 --> 00:02:11.066 A:middle
进行工作

00:02:11.606 --> 00:02:13.566 A:middle
好了 我们现在开始

00:02:13.566 --> 00:02:15.566 A:middle
讲解 macOS High Sierra

00:02:15.696 --> 00:02:16.036 A:middle
的新功能

00:02:17.056 --> 00:02:18.726 A:middle
我们添加了对于 HTC ViveVR 头戴显示器

00:02:18.726 --> 00:02:20.186 A:middle
的即插即玩功能

00:02:20.396 --> 00:02:21.616 A:middle
这是内置的

00:02:21.616 --> 00:02:24.286 A:middle
这个头戴显示器

00:02:24.286 --> 00:02:26.346 A:middle
与 Valve SteamVR runtime

00:02:26.346 --> 00:02:28.436 A:middle
一起工作 提供了一系列功能

00:02:28.436 --> 00:02:30.206 A:middle
其中就包括 VR

00:02:30.206 --> 00:02:31.086 A:middle
compositor （矫正器）

00:02:32.556 --> 00:02:33.946 A:middle
Valve 还把他们的

00:02:34.006 --> 00:02:36.796 A:middle
OpenVR API 添加进了 macOS

00:02:36.796 --> 00:02:39.136 A:middle
这样你们就能创造与 SteamVR

00:02:39.136 --> 00:02:40.136 A:middle
兼容的 VR App了

00:02:40.416 --> 00:02:41.466 A:middle
我们在去年

00:02:41.466 --> 00:02:43.006 A:middle
与 Valve 密切合作

00:02:43.106 --> 00:02:45.216 A:middle
协调我们的发布

00:02:45.216 --> 00:02:47.256 A:middle
现在 SteamVR 和 OpenVR

00:02:47.726 --> 00:02:49.566 A:middle
的 beta 版本都可以下载了

00:02:49.636 --> 00:02:50.746 A:middle
就在这周

00:02:51.386 --> 00:02:55.376 A:middle
在继续之前

00:02:55.406 --> 00:02:57.156 A:middle
我想讲一下 VR compositor

00:02:57.156 --> 00:02:57.856 A:middle
的具体功能

00:02:59.056 --> 00:03:00.616 A:middle
一言以蔽之

00:02:59.056 --> 00:03:00.616 A:middle
一言以蔽之

00:03:00.716 --> 00:03:02.766 A:middle
它会让你的 App 渲染的画面失真

00:03:02.816 --> 00:03:05.106 A:middle
以配合 VR 头戴显示器中的透镜

00:03:05.106 --> 00:03:06.156 A:middle
从而显示出正常的画面

00:03:07.186 --> 00:03:08.526 A:middle
在这个示例中 你们可以看到

00:03:08.686 --> 00:03:10.296 A:middle
compositor 用桶形失真

00:03:10.296 --> 00:03:12.106 A:middle
来抵消透镜

00:03:12.106 --> 00:03:13.516 A:middle
的枕形畸变效果

00:03:15.676 --> 00:03:16.696 A:middle
在实际应用中

00:03:16.696 --> 00:03:18.306 A:middle
会比这个示例

00:03:18.306 --> 00:03:19.056 A:middle
复杂得多

00:03:19.356 --> 00:03:20.746 A:middle
compositor 需要去

00:03:20.746 --> 00:03:21.916 A:middle
处理色差现象

00:03:21.916 --> 00:03:24.316 A:middle
还要呈现一个

00:03:24.316 --> 00:03:26.176 A:middle
Chaperone UI

00:03:26.206 --> 00:03:28.146 A:middle
以便开发者们能够了解

00:03:28.286 --> 00:03:31.256 A:middle
他们的 VR 空间的边界

00:03:31.466 --> 00:03:32.316 A:middle
好了

00:03:32.316 --> 00:03:33.436 A:middle
现在你有了对 VR 头戴显示器的

00:03:33.486 --> 00:03:36.386 A:middle
内置支持 有了

00:03:36.896 --> 00:03:39.066 A:middle
SteamVR 的 VR compositor

00:03:39.066 --> 00:03:41.296 A:middle
还有了 API 框架

00:03:41.396 --> 00:03:42.976 A:middle
下面我们就开始深入讲解如何创造

00:03:42.976 --> 00:03:43.286 A:middle
VR App

00:03:44.756 --> 00:03:46.096 A:middle
我们有两种选择

00:03:46.866 --> 00:03:49.156 A:middle
第一是使用现有的

00:03:49.156 --> 00:03:50.996 A:middle
支持 VR 的游戏引擎

00:03:51.786 --> 00:03:53.426 A:middle
这是很多开发者喜欢的

00:03:53.426 --> 00:03:55.126 A:middle
很好的选择 因为它

00:03:55.126 --> 00:03:56.566 A:middle
把 VR compositor 的一些复杂性

00:03:56.566 --> 00:03:57.726 A:middle
隐藏起来了

00:03:58.456 --> 00:04:00.356 A:middle
同时它也提供了一个熟悉的

00:03:58.456 --> 00:04:00.356 A:middle
同时它也提供了一个熟悉的

00:04:00.356 --> 00:04:01.786 A:middle
内容创造工具链

00:04:03.156 --> 00:04:04.916 A:middle
那么第二个选择

00:04:04.916 --> 00:04:06.906 A:middle
是写一个原生的 VR App

00:04:06.906 --> 00:04:08.106 A:middle
直接调用 openVR

00:04:08.926 --> 00:04:10.766 A:middle
这会让你的 App 能够用

00:04:11.086 --> 00:04:12.716 A:middle
VR compositor 全面控制

00:04:12.716 --> 00:04:13.756 A:middle
渲染与同步

00:04:14.236 --> 00:04:15.236 A:middle
但要以一些额外的复杂性

00:04:15.236 --> 00:04:16.366 A:middle
作为这样做的代价

00:04:16.935 --> 00:04:19.906 A:middle
选择哪一种方法取决于

00:04:19.906 --> 00:04:20.875 A:middle
你的 App 的目标

00:04:21.486 --> 00:04:23.346 A:middle
我们先来说一说

00:04:23.846 --> 00:04:24.946 A:middle
游戏引擎吧

00:04:26.796 --> 00:04:29.306 A:middle
你们在主旨演讲中已经见到

00:04:29.426 --> 00:04:31.316 A:middle
Epic 公司的虚幻4引擎的实用

00:04:31.316 --> 00:04:32.976 A:middle
这是个强有力的平台

00:04:32.976 --> 00:04:34.066 A:middle
在上面可以构建你的 VR

00:04:34.066 --> 00:04:34.966 A:middle
体验

00:04:36.246 --> 00:04:38.416 A:middle
对于 VR 的支持会在今年晚些时候

00:04:38.416 --> 00:04:40.676 A:middle
推出 你还可以在 Epic 的官网上找到

00:04:40.676 --> 00:04:42.646 A:middle
教程以及其他

00:04:42.646 --> 00:04:43.586 A:middle
相关信息

00:04:44.966 --> 00:04:46.656 A:middle
我们还很高兴地看到

00:04:46.696 --> 00:04:48.936 A:middle
Unity 也会在未来的引擎版本中

00:04:48.936 --> 00:04:50.596 A:middle
在 macOS 中加入对 VR 的支持

00:04:51.896 --> 00:04:53.116 A:middle
我们正与他们密切合作

00:04:53.116 --> 00:04:54.296 A:middle
以确保引擎为

00:04:54.296 --> 00:04:56.266 A:middle
VR 回放和使用 Metal 开发

00:04:56.266 --> 00:04:58.586 A:middle
进行了优化

00:05:02.076 --> 00:05:03.396 A:middle
说到这里

00:05:03.396 --> 00:05:04.636 A:middle
我想用一些时间谈谈

00:05:04.766 --> 00:05:06.936 A:middle
一个特别的 Unity 游戏 那就是

00:05:06.936 --> 00:05:08.336 A:middle
Space Pirate Trainer

00:05:08.806 --> 00:05:10.396 A:middle
我们与 Unity 和 I-Illusions 合作

00:05:10.396 --> 00:05:12.556 A:middle
把 Space Pirate Trainer

00:05:12.556 --> 00:05:14.596 A:middle
的一个早期版本

00:05:14.666 --> 00:05:16.196 A:middle
带入了 macOS

00:05:16.916 --> 00:05:19.836 A:middle
I-Illusion 把他们的 App

00:05:20.066 --> 00:05:21.916 A:middle
放到我们的平台上的速度

00:05:21.916 --> 00:05:23.176 A:middle
真是非常惊人

00:05:23.716 --> 00:05:25.916 A:middle
他们只用了几小时

00:05:25.916 --> 00:05:28.536 A:middle
就完成了可运行的版本

00:05:28.536 --> 00:05:30.386 A:middle
几天内就推出了完全可游玩的

00:05:30.386 --> 00:05:30.786 A:middle
正式版本

00:05:31.926 --> 00:05:33.476 A:middle
我们玩这个游戏

00:05:33.566 --> 00:05:35.166 A:middle
玩得不亦乐乎

00:05:35.206 --> 00:05:36.336 A:middle
而且我们认为

00:05:36.336 --> 00:05:38.516 A:middle
这个游戏很好地

00:05:38.516 --> 00:05:39.886 A:middle
代表了你们用 Unity 可以

00:05:40.146 --> 00:05:40.766 A:middle
构建出的 VR 体验

00:05:42.176 --> 00:05:43.166 A:middle
我们希望你们能够通过 WWDC

00:05:43.166 --> 00:05:44.136 A:middle
来了解一下

00:05:44.136 --> 00:05:45.936 A:middle
我们相信你们一定会也爱上它的

00:05:47.556 --> 00:05:50.636 A:middle
Unity 和虚幻 4 引擎

00:05:50.636 --> 00:05:52.376 A:middle
是 VR 开发的两大优秀平台

00:05:54.536 --> 00:05:56.536 A:middle
但是你们当然也可以

00:05:56.536 --> 00:05:58.136 A:middle
选择去写一个原生的 SteamVR App

00:05:58.496 --> 00:05:59.756 A:middle
直接调用

00:05:59.846 --> 00:06:00.766 A:middle
OpenVR 框架

00:05:59.846 --> 00:06:00.766 A:middle
OpenVR 框架

00:06:01.566 --> 00:06:02.906 A:middle
我们会详细讲到

00:06:02.906 --> 00:06:03.996 A:middle
要如何把这个框架添加进

00:06:03.996 --> 00:06:05.756 A:middle
你们的 App 这场演讲后面会讲到

00:06:06.006 --> 00:06:07.436 A:middle
你们可以在 OpenVR GitHub 上

00:06:07.476 --> 00:06:09.386 A:middle
下载到二进制代码和

00:06:09.386 --> 00:06:10.366 A:middle
API 文档

00:06:12.776 --> 00:06:14.286 A:middle
很快还会有一个

00:06:14.346 --> 00:06:16.416 A:middle
针对 Metal 的范例 App

00:06:16.416 --> 00:06:17.786 A:middle
可供下载

00:06:18.626 --> 00:06:19.676 A:middle
现在 为了给大家一个基本概念

00:06:19.676 --> 00:06:21.556 A:middle
我想先提供一个 VR App

00:06:21.556 --> 00:06:23.616 A:middle
开发的基础讲解

00:06:23.616 --> 00:06:25.316 A:middle
这个环节 我想把它叫做

00:06:25.316 --> 00:06:27.026 A:middle
VR App 构建入门

00:06:28.666 --> 00:06:29.856 A:middle
我们将会讲到

00:06:29.856 --> 00:06:30.356 A:middle
以下几点

00:06:31.106 --> 00:06:32.706 A:middle
首先是在 VR 开发

00:06:32.766 --> 00:06:34.176 A:middle
过程中会遇到的

00:06:34.176 --> 00:06:35.246 A:middle
一些挑战

00:06:36.496 --> 00:06:38.376 A:middle
然后会讲一点

00:06:38.376 --> 00:06:40.206 A:middle
我们的平台上的独有特点

00:06:40.916 --> 00:06:43.096 A:middle
然后是深入剖析

00:06:43.096 --> 00:06:45.306 A:middle
VR 框架

00:06:46.156 --> 00:06:47.136 A:middle
最后 以一些针对

00:06:47.226 --> 00:06:48.826 A:middle
VR App 的最佳范例作为结尾

00:06:50.326 --> 00:06:51.246 A:middle
所以 我们要讲的很多

00:06:51.636 --> 00:06:53.066 A:middle
就先从概况开始吧

00:06:54.106 --> 00:06:57.586 A:middle
在 60 Hz 显示下

00:06:57.586 --> 00:07:00.166 A:middle
传统的非 VR 动画

00:06:57.586 --> 00:07:00.166 A:middle
传统的非 VR 动画

00:07:00.706 --> 00:07:03.696 A:middle
每一帧大约有 16.7 毫秒的时间

00:07:03.696 --> 00:07:06.986 A:middle
供你使用

00:07:07.166 --> 00:07:09.986 A:middle
在很多情况下 App 可以

00:07:10.396 --> 00:07:12.856 A:middle
把整个帧的时间预算用在

00:07:12.856 --> 00:07:14.016 A:middle
GPU 运算上面

00:07:14.566 --> 00:07:17.266 A:middle
但是 VR 工作

00:07:17.326 --> 00:07:19.656 A:middle
必须要针对每秒 90 帧

00:07:19.656 --> 00:07:20.676 A:middle
的显示方式

00:07:20.676 --> 00:07:22.766 A:middle
这样才能

00:07:22.806 --> 00:07:24.686 A:middle
在 Vive 这样的头戴显示器上

00:07:24.686 --> 00:07:26.446 A:middle
达到流畅无卡顿的

00:07:26.446 --> 00:07:26.806 A:middle
显示效果

00:07:27.756 --> 00:07:29.186 A:middle
这就把每帧的时间

00:07:29.186 --> 00:07:31.116 A:middle
压缩到了 11 毫秒左右

00:07:33.276 --> 00:07:35.186 A:middle
此外 VR compositor

00:07:35.186 --> 00:07:37.296 A:middle
还要用 GPU 为

00:07:37.296 --> 00:07:39.136 A:middle
VR 头戴显示器的失真

00:07:39.136 --> 00:07:39.616 A:middle
做调整

00:07:40.716 --> 00:07:42.136 A:middle
这大约需要 1 毫秒

00:07:42.136 --> 00:07:44.266 A:middle
这就让你的 App

00:07:44.266 --> 00:07:46.446 A:middle
每帧可利用的时间

00:07:46.446 --> 00:07:48.026 A:middle
缩短到了 10 毫秒

00:07:48.796 --> 00:07:51.726 A:middle
相当于非 VR 工作的

00:07:51.726 --> 00:07:52.036 A:middle
60%

00:07:52.776 --> 00:07:55.636 A:middle
这还没完

00:07:55.636 --> 00:07:57.656 A:middle
你的 App 在每一帧

00:07:57.656 --> 00:07:58.276 A:middle
还有其它工作

00:07:59.306 --> 00:08:01.256 A:middle
包括左右眼画面的

00:07:59.306 --> 00:08:01.256 A:middle
包括左右眼画面的

00:08:01.556 --> 00:08:03.106 A:middle
立体渲染

00:08:04.096 --> 00:08:05.786 A:middle
很多情况下还包括

00:08:05.786 --> 00:08:07.416 A:middle
高分辨率的渲染工作

00:08:08.476 --> 00:08:10.086 A:middle
Vive 头显设备的分辨率是

00:08:10.086 --> 00:08:12.836 A:middle
2160 x 1200

00:08:13.186 --> 00:08:15.476 A:middle
这比1080的高清标准

00:08:15.476 --> 00:08:16.586 A:middle
还多出 25% 的像素

00:08:17.576 --> 00:08:19.676 A:middle
此外 很多 VR App

00:08:19.676 --> 00:08:22.696 A:middle
还会以 1.2 到 1.4 倍的画面比例

00:08:22.746 --> 00:08:24.216 A:middle
进行渲染 以保证高质量的画面

00:08:25.366 --> 00:08:28.316 A:middle
也就是说 你的 App

00:08:28.316 --> 00:08:30.246 A:middle
要在更少的时间内做更多工作

00:08:31.526 --> 00:08:32.645 A:middle
欢迎来到 VR 开发的世界

00:08:34.596 --> 00:08:35.186 A:middle
好了

00:08:35.186 --> 00:08:36.535 A:middle
我们来说一说平台的具体特点吧

00:08:38.336 --> 00:08:40.535 A:middle
Metal 2 推出了一项新的

00:08:40.535 --> 00:08:42.806 A:middle
Direct to Display 功能

00:08:42.806 --> 00:08:44.166 A:middle
用在其支持的头显设备上 比如

00:08:44.166 --> 00:08:44.596 A:middle
Vive

00:08:45.476 --> 00:08:47.886 A:middle
这是一个低延迟通道

00:08:47.926 --> 00:08:49.446 A:middle
绕过了 OS window

00:08:49.446 --> 00:08:51.376 A:middle
compositor 并给予 VR

00:08:51.376 --> 00:08:54.256 A:middle
compositor 比如 SteamVR

00:08:54.256 --> 00:08:55.896 A:middle
直接在头显设备上

00:08:55.896 --> 00:08:57.646 A:middle
显示画面的能力

00:08:58.326 --> 00:09:00.146 A:middle
这一功能避免了 OS 去做

00:08:58.326 --> 00:09:00.146 A:middle
这一功能避免了 OS 去做

00:09:00.146 --> 00:09:03.546 A:middle
像素处理或是额外拷贝

00:09:03.806 --> 00:09:05.276 A:middle
如果为了保证这条快速通道

00:09:05.346 --> 00:09:06.926 A:middle
让 macOS 不把 VR 头显设备

00:09:06.996 --> 00:09:09.846 A:middle
当成显示设备

00:09:09.896 --> 00:09:11.366 A:middle
那它将一文不值 毫无意义

00:09:11.956 --> 00:09:13.146 A:middle
它们会被隐藏在系统里

00:09:13.286 --> 00:09:15.376 A:middle
无法提供任何扩展的

00:09:15.376 --> 00:09:16.056 A:middle
桌面功能

00:09:16.746 --> 00:09:20.676 A:middle
总结一下 以前的模型

00:09:20.676 --> 00:09:22.976 A:middle
是你可以 或者说一个 App

00:09:23.516 --> 00:09:25.276 A:middle
可以通过操作系统的

00:09:25.366 --> 00:09:26.336 A:middle
window compositor 来显示画面

00:09:28.316 --> 00:09:30.086 A:middle
现在则是一个 VR App

00:09:30.136 --> 00:09:32.456 A:middle
直接通过 VR compositor

00:09:32.496 --> 00:09:33.756 A:middle
在头显设备上显示画面

00:09:34.566 --> 00:09:36.446 A:middle
这就是 Metal 2 为了 VR

00:09:36.516 --> 00:09:39.716 A:middle
推出的 Direct to Display 功能

00:09:41.416 --> 00:09:41.976 A:middle
好了

00:09:42.206 --> 00:09:43.556 A:middle
我们继续 macOS 平台特点的话题

00:09:43.616 --> 00:09:46.126 A:middle
我们来说一说你们的 App

00:09:46.126 --> 00:09:48.026 A:middle
如何选择 metal 设备

00:09:48.026 --> 00:09:49.296 A:middle
进行工作

00:09:50.276 --> 00:09:52.266 A:middle
在 macOS 里 VR compositor

00:09:52.316 --> 00:09:54.546 A:middle
可以要求 OS

00:09:54.546 --> 00:09:57.006 A:middle
为与头显设备相连的 GPU

00:09:57.006 --> 00:09:58.346 A:middle
寻找设备

00:09:59.556 --> 00:10:00.786 A:middle
出于性能方面的考虑

00:09:59.556 --> 00:10:00.786 A:middle
出于性能方面的考虑

00:10:01.356 --> 00:10:02.776 A:middle
你的 App 会选择与

00:10:02.776 --> 00:10:04.766 A:middle
compositor 正在使用的设备

00:10:04.766 --> 00:10:04.976 A:middle
相同的设备

00:10:06.266 --> 00:10:07.226 A:middle
我们与 Valve 共同工作

00:10:07.226 --> 00:10:08.476 A:middle
以确保有一个 API

00:10:08.476 --> 00:10:10.566 A:middle
负责这一点 它就是

00:10:10.856 --> 00:10:13.186 A:middle
GetOutputDevice 它能找到

00:10:13.186 --> 00:10:14.266 A:middle
作为你渲染目标的 Metal 设备

00:10:14.876 --> 00:10:15.486 A:middle
就这么简单

00:10:18.486 --> 00:10:20.416 A:middle
接下来 我们说一下在 macOS 上

00:10:20.416 --> 00:10:22.236 A:middle
管理 drawable 表面的问题

00:10:23.576 --> 00:10:25.376 A:middle
VR compositor 和你的 App

00:10:25.376 --> 00:10:28.126 A:middle
为 drawable 表面分别保留了

00:10:28.396 --> 00:10:29.576 A:middle
不同的 pool

00:10:30.196 --> 00:10:32.276 A:middle
在典型的一帧画面里 你的 App 会

00:10:32.556 --> 00:10:34.176 A:middle
把它渲染成它所具有的纹理

00:10:34.176 --> 00:10:36.926 A:middle
再提交给

00:10:36.926 --> 00:10:37.736 A:middle
VR compositor

00:10:38.806 --> 00:10:40.666 A:middle
然后这些会被合成到

00:10:40.666 --> 00:10:42.186 A:middle
compositor 所具有的一个表面

00:10:42.186 --> 00:10:44.076 A:middle
这个表面将会

00:10:44.076 --> 00:10:45.246 A:middle
显示在头戴设备上

00:10:47.006 --> 00:10:49.716 A:middle
在 macOS 中 把这些

00:10:49.716 --> 00:10:51.376 A:middle
经过渲染的数据

00:10:51.556 --> 00:10:53.496 A:middle
从你的 App 转移到 compositor 上

00:10:53.496 --> 00:10:54.286 A:middle
IO surface 是理想的媒介

00:10:54.816 --> 00:10:56.346 A:middle
所以请确保你们制作的

00:10:56.346 --> 00:10:58.066 A:middle
Metal 纹理要得到

00:10:58.416 --> 00:10:59.566 A:middle
IO surface 的支持

00:11:01.076 --> 00:11:02.596 A:middle
我们来看看

00:11:02.656 --> 00:11:03.926 A:middle
你要如何制造

00:11:03.926 --> 00:11:04.606 A:middle
这些纹理

00:11:06.616 --> 00:11:08.046 A:middle
你要建立一个

00:11:08.156 --> 00:11:09.766 A:middle
纹理描述符

00:11:09.766 --> 00:11:11.436 A:middle
指明渲染目标

00:11:11.476 --> 00:11:13.266 A:middle
使用标志 因为你的 App

00:11:13.266 --> 00:11:14.406 A:middle
会对它进行渲染

00:11:15.276 --> 00:11:17.416 A:middle
但也要有着色器读取使用标志

00:11:18.146 --> 00:11:19.336 A:middle
因为 compositor 会把它

00:11:19.426 --> 00:11:20.926 A:middle
作为一个输入

00:11:21.406 --> 00:11:24.726 A:middle
然后 要制作左右眼

00:11:24.946 --> 00:11:26.976 A:middle
纹理 你只需要把之前分配的

00:11:27.066 --> 00:11:29.966 A:middle
IO surface 和这个

00:11:29.966 --> 00:11:31.586 A:middle
纹理描述符

00:11:31.626 --> 00:11:33.096 A:middle
传送给

00:11:33.096 --> 00:11:34.696 A:middle
newTextureWithDescriptor 就可以了

00:11:35.366 --> 00:11:35.596 A:middle
好的

00:11:35.716 --> 00:11:36.786 A:middle
现在我想花几分钟时间

00:11:36.786 --> 00:11:39.266 A:middle
讲一下 或者说描述一下

00:11:39.266 --> 00:11:40.676 A:middle
VR App 中的典型一帧

00:11:41.576 --> 00:11:43.076 A:middle
这很重要 因为你的 App

00:11:43.076 --> 00:11:45.086 A:middle
和 VR compositor 必须要

00:11:45.086 --> 00:11:46.376 A:middle
同步工作

00:11:47.436 --> 00:11:49.186 A:middle
我之前说过

00:11:49.186 --> 00:11:50.826 A:middle
你的 App 渲染后的输出

00:11:50.826 --> 00:11:53.096 A:middle
要被传送到 VR compositor 里

00:11:53.096 --> 00:11:54.336 A:middle
用 GPU 进行额外的处理

00:11:55.726 --> 00:11:57.756 A:middle
因为 GPU 属于共享资源

00:11:57.806 --> 00:12:00.596 A:middle
因此保持同步与安排工作时间

00:11:57.806 --> 00:12:00.596 A:middle
因此保持同步与安排工作时间

00:12:00.596 --> 00:12:02.486 A:middle
就非常重要了

00:12:03.086 --> 00:12:05.436 A:middle
我们就从一帧的开头

00:12:05.436 --> 00:12:06.026 A:middle
说起吧

00:12:06.946 --> 00:12:08.706 A:middle
你的 App 需要请求

00:12:08.706 --> 00:12:10.506 A:middle
VR 系统 获取头显设备

00:12:10.506 --> 00:12:12.196 A:middle
的动作 它需要这个来渲染

00:12:12.196 --> 00:12:12.746 A:middle
这一帧

00:12:13.936 --> 00:12:15.766 A:middle
对 SteamVR 来说 这是用

00:12:15.866 --> 00:12:17.316 A:middle
WaitGetPoses 调用来完成的

00:12:18.366 --> 00:12:20.406 A:middle
然后你的 App

00:12:20.406 --> 00:12:22.116 A:middle
在获得这些输入后

00:12:22.246 --> 00:12:24.246 A:middle
可以立即对这一帧渲染后的命令

00:12:24.246 --> 00:12:24.946 A:middle
进行编码

00:12:25.536 --> 00:12:28.406 A:middle
然后 在你在对命令缓冲

00:12:28.406 --> 00:12:30.136 A:middle
进行编码后

00:12:30.176 --> 00:12:31.836 A:middle
你可以将它提交给 Metal

00:12:31.836 --> 00:12:32.576 A:middle
在 GPU 上排队

00:12:33.146 --> 00:12:35.296 A:middle
然后 将你的左右眼纹理

00:12:35.296 --> 00:12:37.956 A:middle
提交给 SteamVR

00:12:38.946 --> 00:12:40.666 A:middle
这会唤起 compositor

00:12:40.666 --> 00:12:42.606 A:middle
让它开始为这一帧的

00:12:42.606 --> 00:12:43.896 A:middle
GPU 工作进行编码

00:12:44.476 --> 00:12:46.976 A:middle
然后 因为执行顺序非常重要

00:12:46.976 --> 00:12:49.286 A:middle
你的 App 还需要

00:12:49.286 --> 00:12:50.816 A:middle
告诉 VR compositor

00:12:50.816 --> 00:12:53.526 A:middle
交给 GPU 的工作

00:12:53.596 --> 00:12:54.896 A:middle
被安排在何时开始

00:12:56.656 --> 00:12:58.566 A:middle
所以 对 Metal SteamVR App 来说

00:12:58.646 --> 00:13:00.706 A:middle
你只需要等待 直到你的

00:12:58.646 --> 00:13:00.706 A:middle
你只需要等待 直到你的

00:13:00.706 --> 00:13:02.746 A:middle
命令缓冲被安排好

00:13:02.746 --> 00:13:04.496 A:middle
然后你就可以调用 SteamVR

00:13:04.496 --> 00:13:06.406 A:middle
PostPresentHandoff 函数了

00:13:07.136 --> 00:13:08.886 A:middle
这会告诉 VR compositor

00:13:09.136 --> 00:13:10.726 A:middle
它可以把工作交给 GPU 了

00:13:10.726 --> 00:13:13.026 A:middle
这一工作将按正确顺序

00:13:13.476 --> 00:13:14.366 A:middle
进行排队

00:13:14.366 --> 00:13:16.886 A:middle
我们看一下

00:13:16.886 --> 00:13:18.346 A:middle
这在你的 draw loop 里是什么样子

00:13:18.706 --> 00:13:20.276 A:middle
在 loop 的顶端

00:13:20.686 --> 00:13:22.006 A:middle
有你的 WaitGetPoses call

00:13:22.006 --> 00:13:23.876 A:middle
从头显设备里收集

00:13:23.876 --> 00:13:24.396 A:middle
输入

00:13:25.656 --> 00:13:27.196 A:middle
然后你要建立命令缓冲

00:13:27.196 --> 00:13:29.536 A:middle
渲染你的场景

00:13:29.536 --> 00:13:30.706 A:middle
然后把它提交给 GPU

00:13:31.826 --> 00:13:33.146 A:middle
然后 在这里 你会

00:13:33.236 --> 00:13:35.086 A:middle
把左右眼纹理提交给

00:13:35.186 --> 00:13:36.576 A:middle
SteamVR

00:13:37.906 --> 00:13:39.876 A:middle
然后 你等到

00:13:39.876 --> 00:13:40.796 A:middle
命令缓冲被安排好

00:13:40.836 --> 00:13:43.466 A:middle
你就可以调用

00:13:43.466 --> 00:13:45.086 A:middle
PostPresentHandoff 告诉

00:13:45.086 --> 00:13:47.226 A:middle
VR compositor 它现在可以

00:13:47.456 --> 00:13:49.966 A:middle
把工作交给 GPU 了

00:13:51.926 --> 00:13:53.496 A:middle
再强调一件事

00:13:55.056 --> 00:13:57.046 A:middle
在我们

00:13:57.046 --> 00:13:58.486 A:middle
把这个图表应用在

00:13:58.486 --> 00:14:00.676 A:middle
下一帧的同时 需要注意是

00:13:58.486 --> 00:14:00.676 A:middle
下一帧的同时 需要注意是

00:14:00.986 --> 00:14:04.086 A:middle
WaitGetPoses 而不是

00:14:04.196 --> 00:14:06.556 A:middle
垂直中断定义了

00:14:06.556 --> 00:14:08.046 A:middle
你的 App 的一帧的开始

00:14:08.896 --> 00:14:09.956 A:middle
这一点很重要

00:14:09.956 --> 00:14:11.026 A:middle
我们很快就会

00:14:11.026 --> 00:14:12.116 A:middle
回来再说到这里

00:14:13.136 --> 00:14:15.016 A:middle
好了

00:14:15.986 --> 00:14:17.396 A:middle
我们接下来看一些

00:14:17.396 --> 00:14:18.416 A:middle
很棒的实践

00:14:19.026 --> 00:14:22.626 A:middle
首先是要避免

00:14:22.626 --> 00:14:24.596 A:middle
在 CPU 编码命令时

00:14:24.596 --> 00:14:26.146 A:middle
在一帧的开始产生

00:14:26.146 --> 00:14:27.836 A:middle
GPU 气泡

00:14:29.036 --> 00:14:31.646 A:middle
SteamVR 提供了一个

00:14:31.646 --> 00:14:33.216 A:middle
很有用的机制来

00:14:33.216 --> 00:14:35.206 A:middle
让你很早开始这一帧的工作

00:14:35.626 --> 00:14:37.216 A:middle
让你的 App 有

00:14:37.276 --> 00:14:38.856 A:middle
2 到 3 毫秒的时间运行开始

00:14:40.286 --> 00:14:41.226 A:middle
这应该看上去

00:14:41.276 --> 00:14:41.786 A:middle
不陌生

00:14:42.456 --> 00:14:43.836 A:middle
把一帧的开始

00:14:43.836 --> 00:14:46.126 A:middle
与 WaitGetPoses 对齐

00:14:46.126 --> 00:14:47.416 A:middle
就保证了你利用到了

00:14:47.416 --> 00:14:48.966 A:middle
这一优化

00:14:49.226 --> 00:14:50.576 A:middle
让运行开始

00:14:54.076 --> 00:14:54.636 A:middle
好的

00:14:54.716 --> 00:14:57.076 A:middle
接下来 保证你的 App

00:14:57.076 --> 00:14:59.146 A:middle
不会在把它们发送给 GPU 前

00:14:59.196 --> 00:15:00.396 A:middle
建立大型的单片命令缓冲

00:14:59.196 --> 00:15:00.396 A:middle
建立大型的单片命令缓冲

00:15:00.396 --> 00:15:02.146 A:middle
因为这也会

00:15:02.146 --> 00:15:03.936 A:middle
造成 GPU 气泡

00:15:05.496 --> 00:15:07.966 A:middle
你要做的是

00:15:07.966 --> 00:15:09.416 A:middle
在可能的地方分割命令缓冲

00:15:09.656 --> 00:15:11.206 A:middle
在进行过程中提交它们

00:15:11.206 --> 00:15:13.466 A:middle
以保证 GPU 的应用在这一帧中达到

00:15:13.466 --> 00:15:13.866 A:middle
最大化

00:15:14.406 --> 00:15:18.246 A:middle
我们建议的下一个优化

00:15:18.246 --> 00:15:19.886 A:middle
是尝试把你的左右眼

00:15:19.956 --> 00:15:22.046 A:middle
绘制合并到一起

00:15:25.036 --> 00:15:26.836 A:middle
Metal 2 Viewport Array

00:15:26.836 --> 00:15:28.296 A:middle
特性为你提供了一个很好的机制

00:15:28.296 --> 00:15:30.296 A:middle
帮你完成这一点

00:15:30.296 --> 00:15:32.036 A:middle
它让你的 App 在

00:15:32.096 --> 00:15:34.176 A:middle
vertex shader （顶点着色器）里

00:15:34.596 --> 00:15:35.546 A:middle
选择逐个几何体目标视口

00:15:36.326 --> 00:15:37.796 A:middle
这可以大幅度

00:15:37.796 --> 00:15:39.666 A:middle
降低你的 draw call 资源消耗

00:15:39.666 --> 00:15:41.256 A:middle
让你能够使用一个 draw call 来

00:15:41.916 --> 00:15:43.626 A:middle
同时渲染左右眼场景

00:15:45.386 --> 00:15:46.726 A:middle
我们来看一个示例

00:15:46.726 --> 00:15:48.296 A:middle
展示如何用 instancing 来

00:15:48.676 --> 00:15:50.236 A:middle
让你的 Metal App

00:15:50.236 --> 00:15:51.746 A:middle
用上 Viewport Array

00:15:53.136 --> 00:15:54.016 A:middle
我要先指出

00:15:54.016 --> 00:15:55.616 A:middle
你需要制造一个

00:15:55.616 --> 00:15:57.446 A:middle
两倍宽的纹理

00:15:57.446 --> 00:15:58.956 A:middle
因为你现在要

00:15:58.956 --> 00:16:00.356 A:middle
用同一个纹理

00:15:58.956 --> 00:16:00.356 A:middle
用同一个纹理

00:16:00.356 --> 00:16:02.266 A:middle
渲染左右眼场景

00:16:03.836 --> 00:16:05.766 A:middle
然后你只需要建立你的

00:16:05.766 --> 00:16:07.386 A:middle
Viewpoint array 它定义了

00:16:07.386 --> 00:16:10.026 A:middle
你的左右眼视口的边界

00:16:12.786 --> 00:16:13.906 A:middle
然后你可以把这个

00:16:13.946 --> 00:16:15.216 A:middle
Viewport array 交给你的

00:16:15.216 --> 00:16:16.976 A:middle
渲染命令编码 你可以用

00:16:17.416 --> 00:16:18.426 A:middle
setViewports API 做到这一点

00:16:19.586 --> 00:16:20.586 A:middle
然后 在这里 你需要

00:16:20.586 --> 00:16:21.826 A:middle
制作一个实例到

00:16:21.976 --> 00:16:23.706 A:middle
DrawPrimitives 调用

00:16:23.766 --> 00:16:26.286 A:middle
实例数量是 2

00:16:26.286 --> 00:16:27.366 A:middle
从而把 draw 分配到左右眼

00:16:27.416 --> 00:16:28.066 A:middle
视口上

00:16:29.286 --> 00:16:31.046 A:middle
我们会在顶点着色器里

00:16:31.366 --> 00:16:33.836 A:middle
使用实例 ID 当作我们的 eye index

00:16:35.286 --> 00:16:36.136 A:middle
我们来看一下这个

00:16:36.136 --> 00:16:36.786 A:middle
顶点着色器

00:16:37.406 --> 00:16:39.536 A:middle
我先要指出的是

00:16:39.536 --> 00:16:42.126 A:middle
这个视口是

00:16:42.456 --> 00:16:44.096 A:middle
由新的 viewpoint_array_index

00:16:44.316 --> 00:16:45.436 A:middle
属性选择出来的

00:16:47.756 --> 00:16:49.276 A:middle
我之前说过

00:16:49.406 --> 00:16:50.166 A:middle
我们正在使用 instance_ID

00:16:50.166 --> 00:16:52.486 A:middle
作为我们的 eye index

00:16:52.826 --> 00:16:54.186 A:middle
我们将能够使用它

00:16:54.186 --> 00:16:56.416 A:middle
访问我们的视口关联数据

00:16:56.416 --> 00:16:57.936 A:middle
就好像这个示例里的

00:16:57.966 --> 00:16:59.646 A:middle
这个模型投影矩阵

00:17:00.716 --> 00:17:03.166 A:middle
最后 一定要记得

00:17:03.166 --> 00:17:05.006 A:middle
让你的视口索引

00:17:05.476 --> 00:17:06.705 A:middle
和 instance_ID 关联起来

00:17:06.746 --> 00:17:08.006 A:middle
这样在栅格化你的图像时

00:17:08.066 --> 00:17:10.056 A:middle
能够保证选择了正确的视口

00:17:11.465 --> 00:17:13.465 A:middle
这就是使用新的

00:17:13.465 --> 00:17:15.286 A:middle
Viewport Array 特性减少

00:17:15.346 --> 00:17:17.906 A:middle
你的 VR App 的 draw call 开销

00:17:18.856 --> 00:17:18.976 A:middle
的方法

00:17:20.296 --> 00:17:20.846 A:middle
好了

00:17:21.006 --> 00:17:22.386 A:middle
今天我想说的最后一个优化

00:17:22.386 --> 00:17:24.006 A:middle
是一个公认的

00:17:24.066 --> 00:17:25.465 A:middle
最佳方法

00:17:25.465 --> 00:17:27.406 A:middle
你会想去尝试减少

00:17:27.406 --> 00:17:29.716 A:middle
在每一帧着色的

00:17:29.716 --> 00:17:30.876 A:middle
像素数量

00:17:31.406 --> 00:17:33.236 A:middle
由于镜头扭曲的特性

00:17:33.236 --> 00:17:35.816 A:middle
你渲染的场景中

00:17:35.816 --> 00:17:37.876 A:middle
大约 15% 的部分

00:17:37.876 --> 00:17:39.386 A:middle
在 VR 头显设备上是看不到的

00:17:40.136 --> 00:17:41.626 A:middle
这幅图中的蓝色区域

00:17:41.626 --> 00:17:42.586 A:middle
就代表了看不到的部分

00:17:43.536 --> 00:17:45.976 A:middle
幸好 SteamVR 提供了一个

00:17:46.056 --> 00:17:47.786 A:middle
基于网格的模板掩码

00:17:47.866 --> 00:17:49.466 A:middle
专为 Vive 头显设备设计

00:17:49.626 --> 00:17:51.006 A:middle
你可以用它来剔除这些

00:17:51.066 --> 00:17:51.576 A:middle
像素

00:17:52.096 --> 00:17:54.296 A:middle
非常易用

00:17:54.326 --> 00:17:55.996 A:middle
效果也非常之好

00:17:55.996 --> 00:17:56.866 A:middle
好了

00:17:57.876 --> 00:18:00.586 A:middle
这就是今天这个

00:17:57.876 --> 00:18:00.586 A:middle
这就是今天这个

00:18:00.666 --> 00:18:01.976 A:middle
构建 VR App 的简短介绍的全部内容

00:18:02.766 --> 00:18:03.716 A:middle
背景介绍完毕

00:18:03.716 --> 00:18:05.256 A:middle
我想请 Valve 软件公司的

00:18:05.256 --> 00:18:06.916 A:middle
Nat Brown 上台

00:18:06.996 --> 00:18:08.836 A:middle
为大家深入讲解

00:18:08.836 --> 00:18:10.886 A:middle
macOS 系统上的 SteamVR

00:18:12.016 --> 00:18:13.726 A:middle
[掌声]

00:18:13.726 --> 00:18:14.126 A:middle
谢谢 Nat

00:18:14.356 --> 00:18:14.746 A:middle
&gt;&gt; 谢谢 Rav

00:18:16.146 --> 00:18:17.516 A:middle
嗨 大家好

00:18:17.566 --> 00:18:20.486 A:middle
我是 Nat 在 Valve 负责 VR 工作

00:18:20.786 --> 00:18:22.546 A:middle
如果你们还不知道 Valve

00:18:22.546 --> 00:18:24.076 A:middle
我们是个游戏公司

00:18:24.076 --> 00:18:25.186 A:middle
我们发行游戏

00:18:25.186 --> 00:18:28.636 A:middle
我们在 Steam 上有

00:18:28.636 --> 00:18:29.276 A:middle
许多玩家

00:18:29.636 --> 00:18:30.896 A:middle
实践证明 游戏

00:18:30.896 --> 00:18:33.266 A:middle
对于用户界面

00:18:33.266 --> 00:18:34.186 A:middle
和人机交互来说

00:18:34.186 --> 00:18:35.226 A:middle
是一个非常有趣的严峻考验

00:18:35.676 --> 00:18:36.766 A:middle
在 Valve 我们围绕着

00:18:36.766 --> 00:18:39.006 A:middle
游戏和输入 进行了很多

00:18:39.006 --> 00:18:39.306 A:middle
实验

00:18:40.156 --> 00:18:42.356 A:middle
但多年来的 VR 原形体

00:18:42.886 --> 00:18:44.186 A:middle
却并没有真正适用在

00:18:44.186 --> 00:18:45.346 A:middle
制作游戏或者其他任何内容上面

00:18:46.366 --> 00:18:47.866 A:middle
知道我们发现了这个

00:18:47.866 --> 00:18:50.106 A:middle
完美的结合体

00:18:50.106 --> 00:18:52.096 A:middle
包括 90 赫兹低余辉显示

00:18:52.096 --> 00:18:53.716 A:middle
以及用这两个追踪控制器实现的

00:18:53.716 --> 00:18:54.536 A:middle
房间范围内的准确追踪

00:18:55.276 --> 00:18:57.056 A:middle
我们认为这就是 VR 领域的

00:18:57.056 --> 00:18:58.076 A:middle
神奇突破

00:18:58.726 --> 00:19:00.826 A:middle
我想它可以与

00:18:58.726 --> 00:19:00.826 A:middle
我想它可以与

00:19:00.826 --> 00:19:02.776 A:middle
你第一次使用

00:19:03.246 --> 00:19:04.546 A:middle
低延迟精确触屏的

00:19:04.546 --> 00:19:06.216 A:middle
智能手机的感受相比

00:19:06.216 --> 00:19:07.066 A:middle
感觉非常神奇

00:19:07.396 --> 00:19:08.536 A:middle
这就是 VR 领域的

00:19:08.536 --> 00:19:11.526 A:middle
神奇突破

00:19:11.746 --> 00:19:12.916 A:middle
一旦房间大小的 VR 环境

00:19:12.916 --> 00:19:14.216 A:middle
成为了现实 我们就知道自己终于可以

00:19:14.216 --> 00:19:16.166 A:middle
构建 VR 游戏和 VR

00:19:16.166 --> 00:19:16.496 A:middle
内容了

00:19:17.516 --> 00:19:19.366 A:middle
我们授权了各方面的 VR

00:19:19.366 --> 00:19:22.296 A:middle
技术 比如基站

00:19:22.466 --> 00:19:24.686 A:middle
头显设备镜片设计等等

00:19:24.686 --> 00:19:26.686 A:middle
非独家地授权给了

00:19:26.686 --> 00:19:28.156 A:middle
HTC 和 LG 等等合作伙伴

00:19:28.156 --> 00:19:30.016 A:middle
我们还有一个大型项目

00:19:30.016 --> 00:19:31.486 A:middle
把 Lighthouse 追踪技术

00:19:31.486 --> 00:19:32.816 A:middle
授权给了很多不同的合作伙伴

00:19:33.756 --> 00:19:37.196 A:middle
我们对于软件栈的办法

00:19:37.196 --> 00:19:38.336 A:middle
你们也许已经听说了

00:19:38.336 --> 00:19:39.906 A:middle
那就是

00:19:39.906 --> 00:19:42.186 A:middle
SteamVr runtime

00:19:42.416 --> 00:19:43.936 A:middle
SteamVr 有一个应用模型

00:19:43.936 --> 00:19:45.506 A:middle
在上面 和一个硬件

00:19:45.506 --> 00:19:46.876 A:middle
与驱动模型 在下面

00:19:47.016 --> 00:19:49.266 A:middle
我们的目标是

00:19:49.266 --> 00:19:50.606 A:middle
大力推广 VR 领域的实践

00:19:50.606 --> 00:19:52.096 A:middle
因为我们现在还处于

00:19:52.096 --> 00:19:53.546 A:middle
VR 初期 还不了解它

00:19:53.546 --> 00:19:55.006 A:middle
能够发展成什么样子

00:19:55.546 --> 00:19:57.236 A:middle
我们想制作这个模型

00:19:57.236 --> 00:19:58.746 A:middle
让人们在里面实验

00:19:58.746 --> 00:19:59.576 A:middle
VR 硬件和内容 同时

00:19:59.576 --> 00:19:59.976 A:middle
减少风险

00:20:00.046 --> 00:20:03.036 A:middle
你们可以去

00:20:03.036 --> 00:20:04.246 A:middle
也许不是你们 但总有人可以去

00:20:04.536 --> 00:20:06.186 A:middle
设计新的头显设备

00:20:06.186 --> 00:20:08.346 A:middle
新的追踪系统 新的

00:20:08.346 --> 00:20:08.896 A:middle
控制器

00:20:09.066 --> 00:20:10.526 A:middle
然后 你们可以到

00:20:10.526 --> 00:20:12.146 A:middle
Open VR 平台上

00:20:12.146 --> 00:20:13.526 A:middle
写一个驱动程序然后直接插入设备

00:20:14.036 --> 00:20:15.116 A:middle
然后你就可以访问

00:20:15.116 --> 00:20:16.606 A:middle
正在运行的

00:20:16.606 --> 00:20:17.336 A:middle
所有内容了

00:20:18.056 --> 00:20:19.596 A:middle
这会给你真实世界的

00:20:19.596 --> 00:20:21.666 A:middle
测试 能让你的硬件变得

00:20:21.666 --> 00:20:21.966 A:middle
更好

00:20:21.966 --> 00:20:23.266 A:middle
因为你和你的顾客

00:20:23.496 --> 00:20:25.426 A:middle
可以直接将你的新创意

00:20:25.426 --> 00:20:26.566 A:middle
和其他在这个平台上的

00:20:26.566 --> 00:20:27.326 A:middle
硬件进行对比

00:20:27.826 --> 00:20:29.246 A:middle
这样一来 硬件开发者就不必

00:20:29.246 --> 00:20:30.566 A:middle
开发特定内容

00:20:30.916 --> 00:20:32.206 A:middle
内容开发者也不必

00:20:32.206 --> 00:20:33.926 A:middle
去赌哪一个硬件

00:20:33.926 --> 00:20:34.486 A:middle
会胜出了

00:20:34.486 --> 00:20:36.476 A:middle
他们只需要集中精力

00:20:37.236 --> 00:20:38.906 A:middle
做好内容就可以了

00:20:38.906 --> 00:20:41.486 A:middle
下面讲到关联到

00:20:41.486 --> 00:20:42.336 A:middle
Open VR 框架的应用

00:20:42.336 --> 00:20:44.286 A:middle
这是一个很小的库

00:20:44.286 --> 00:20:45.786 A:middle
它只知道去定义

00:20:46.106 --> 00:20:47.166 A:middle
当前被安装的 runtime

00:20:47.576 --> 00:20:49.336 A:middle
它找到这个 VR 用户库

00:20:49.336 --> 00:20:50.546 A:middle
这是一个共享库

00:20:50.546 --> 00:20:51.816 A:middle
它要么能够关联到

00:20:51.816 --> 00:20:53.556 A:middle
要么能够启动

00:20:53.556 --> 00:20:55.006 A:middle
SteamVR 的其他 runtime

00:20:55.006 --> 00:20:55.596 A:middle
进程

00:20:55.996 --> 00:20:57.156 A:middle
这是 vrmonitor 进程

00:20:57.156 --> 00:20:58.516 A:middle
你们会看到许多

00:20:58.516 --> 00:21:00.066 A:middle
这样的小窗口

00:20:58.516 --> 00:21:00.066 A:middle
这样的小窗口

00:21:00.066 --> 00:21:01.486 A:middle
这是一个 UI 和设置

00:21:01.486 --> 00:21:02.066 A:middle
应用

00:21:02.066 --> 00:21:03.586 A:middle
它会显示连接

00:21:03.586 --> 00:21:04.536 A:middle
头显设备和控制器

00:21:04.536 --> 00:21:05.886 A:middle
以及追踪感应器的

00:21:05.886 --> 00:21:06.326 A:middle
状态

00:21:06.836 --> 00:21:11.896 A:middle
vrserver 负责

00:21:12.006 --> 00:21:13.656 A:middle
追踪驱动

00:21:13.836 --> 00:21:14.976 A:middle
加载交替驱动

00:21:14.976 --> 00:21:16.806 A:middle
它还会把姿态和其他信息

00:21:16.806 --> 00:21:19.076 A:middle
放入共享内存

00:21:19.076 --> 00:21:21.136 A:middle
以便让你的应用

00:21:21.136 --> 00:21:22.656 A:middle
和 SteaVR runtime 的其他部分

00:21:22.706 --> 00:21:24.836 A:middle
能够访问它

00:21:25.106 --> 00:21:26.336 A:middle
这是 vrcompositor 你们刚刚

00:21:26.336 --> 00:21:28.066 A:middle
已经稍微了解过了

00:21:28.276 --> 00:21:30.696 A:middle
这个进程有点像

00:21:30.696 --> 00:21:31.086 A:middle
Windows Server

00:21:31.326 --> 00:21:33.026 A:middle
它把场景和 overlay 绘制在

00:21:33.026 --> 00:21:33.636 A:middle
头显设备上

00:21:33.636 --> 00:21:35.506 A:middle
它还会根据镜片失真和颜色

00:21:35.536 --> 00:21:36.666 A:middle
来矫正图像

00:21:36.886 --> 00:21:37.716 A:middle
还有一件从某种程度来看

00:21:37.716 --> 00:21:39.526 A:middle
是隐藏起来的 你们可能

00:21:39.526 --> 00:21:42.656 A:middle
不太明白的事 那就是它还

00:21:42.656 --> 00:21:43.746 A:middle
会矫正动态画面中的

00:21:43.746 --> 00:21:44.726 A:middle
拖尾和重影

00:21:45.086 --> 00:21:48.506 A:middle
它还会在应用无法

00:21:48.506 --> 00:21:50.216 A:middle
达到帧率时

00:21:50.216 --> 00:21:51.446 A:middle
消失在稳定跟踪区域

00:21:51.716 --> 00:21:52.846 A:middle
因为我们不想让人们

00:21:52.846 --> 00:21:53.846 A:middle
碰到一些意外情况

00:21:54.526 --> 00:21:55.926 A:middle
vrcompositor

00:21:55.926 --> 00:21:56.946 A:middle
与 Metal 进行通讯

00:21:56.946 --> 00:21:57.386 A:middle
你们已经了解过了

00:21:57.596 --> 00:21:59.066 A:middle
它通过 Direct to Display

00:21:59.066 --> 00:22:00.026 A:middle
Metal 2 API

00:21:59.066 --> 00:22:00.026 A:middle
Metal 2 API

00:22:00.026 --> 00:22:01.546 A:middle
把画面直接显示在头显设备上

00:22:03.146 --> 00:22:03.526 A:middle
我们看一下

00:22:03.526 --> 00:22:05.216 A:middle
最后要说的是

00:22:05.496 --> 00:22:06.266 A:middle
vrdashboard

00:22:06.486 --> 00:22:09.216 A:middle
这部分的 UI 让你

00:22:09.216 --> 00:22:10.606 A:middle
能够选择应用

00:22:10.936 --> 00:22:12.176 A:middle
让你控制音量

00:22:12.576 --> 00:22:13.636 A:middle
等其他系统设置

00:22:14.486 --> 00:22:16.256 A:middle
我们提供一个默认的

00:22:16.256 --> 00:22:17.586 A:middle
向你展示你的 Steam 库

00:22:17.586 --> 00:22:18.606 A:middle
除非你选择应用

00:22:18.956 --> 00:22:20.096 A:middle
但实际上有一个 API

00:22:20.096 --> 00:22:21.206 A:middle
你也可以写你自己的

00:22:21.446 --> 00:22:22.736 A:middle
dashboard 应用

00:22:22.966 --> 00:22:24.646 A:middle
Valve 和 Apple 我们已经

00:22:24.646 --> 00:22:25.886 A:middle
更加密切地合作

00:22:26.086 --> 00:22:27.336 A:middle
就在大约一年前开始

00:22:27.646 --> 00:22:28.776 A:middle
我们把端口从 OpenGL 转换到 Metal

00:22:28.776 --> 00:22:30.286 A:middle
并没有让我们花费太多代价

00:22:30.686 --> 00:22:31.856 A:middle
Metal 是个非常酷的 API

00:22:31.856 --> 00:22:34.116 A:middle
它对于我们实现 VR 的高性能运行

00:22:34.116 --> 00:22:35.716 A:middle
起到了关键作用

00:22:35.876 --> 00:22:38.166 A:middle
大约一年前 我们对 Apple 最大的要求

00:22:38.166 --> 00:22:39.836 A:middle
就是这个 Direct to

00:22:39.836 --> 00:22:40.536 A:middle
Display 的特性

00:22:40.986 --> 00:22:42.126 A:middle
因为要确保

00:22:42.126 --> 00:22:43.476 A:middle
VR compositor 有达到头显设备的

00:22:43.476 --> 00:22:45.846 A:middle
最快的可预测通道

00:22:45.846 --> 00:22:46.966 A:middle
这非常重要

00:22:47.906 --> 00:22:50.046 A:middle
同时我们还非常需要

00:22:50.046 --> 00:22:52.166 A:middle
非常准确的低方差 VBL

00:22:52.276 --> 00:22:53.606 A:middle
也就是垂直中断事件

00:22:53.956 --> 00:22:54.726 A:middle
这样我们就可以设置

00:22:54.726 --> 00:22:56.216 A:middle
VR 显示帧的节拍

00:22:56.216 --> 00:22:57.856 A:middle
并且可以

00:22:57.856 --> 00:22:58.936 A:middle
精确预测

00:22:58.936 --> 00:23:00.086 A:middle
这些动作

00:22:58.936 --> 00:23:00.086 A:middle
这些动作

00:23:00.316 --> 00:23:01.736 A:middle
精确预测动作

00:23:01.966 --> 00:23:04.156 A:middle
实际上要比动作发生之间的时间

00:23:04.156 --> 00:23:06.016 A:middle
和显示出现的时间

00:23:06.316 --> 00:23:07.366 A:middle
更为重要

00:23:07.366 --> 00:23:08.496 A:middle
如果我们知道什么时候会发生

00:23:08.496 --> 00:23:09.436 A:middle
那是更加重要的

00:23:10.656 --> 00:23:12.816 A:middle
最后 我们在进程

00:23:12.816 --> 00:23:13.836 A:middle
和线程之间的同步方面

00:23:13.836 --> 00:23:15.456 A:middle
遇到了一些阻碍

00:23:15.816 --> 00:23:17.196 A:middle
其他一切都运行良好

00:23:17.196 --> 00:23:18.516 A:middle
Metal 速度很快

00:23:18.516 --> 00:23:21.596 A:middle
我们也有了超精确低方差 VBL

00:23:21.596 --> 00:23:22.816 A:middle
但还是存在一些

00:23:22.816 --> 00:23:24.116 A:middle
同步方面的问题

00:23:24.316 --> 00:23:25.906 A:middle
不过 Apple 帮助我们找到了

00:23:25.906 --> 00:23:28.066 A:middle
更好的方法去发送信号

00:23:28.066 --> 00:23:29.446 A:middle
和在所有的进程与线程之间

00:23:29.446 --> 00:23:30.716 A:middle
进行低调速差异的

00:23:30.716 --> 00:23:31.376 A:middle
同步

00:23:33.286 --> 00:23:37.416 A:middle
我这个 VR 帧的图表

00:23:37.496 --> 00:23:38.306 A:middle
比较复杂

00:23:39.466 --> 00:23:40.686 A:middle
你们中的大多数人

00:23:40.686 --> 00:23:41.776 A:middle
永远不会看到这么深

00:23:41.776 --> 00:23:42.686 A:middle
但我还是想给你们

00:23:42.686 --> 00:23:43.066 A:middle
看一看

00:23:43.556 --> 00:23:46.746 A:middle
HTC Vibe 的

00:23:46.746 --> 00:23:48.646 A:middle
低余辉 OLED 显示屏使用了

00:23:48.646 --> 00:23:49.126 A:middle
全局照明

00:23:49.996 --> 00:23:52.146 A:middle
显示图像上的所有像素

00:23:52.146 --> 00:23:54.226 A:middle
都会在同时在极短时间内闪烁

00:23:54.726 --> 00:23:56.276 A:middle
这在 VR 中很常见

00:23:56.276 --> 00:23:57.556 A:middle
因为头部动作

00:23:57.556 --> 00:23:57.936 A:middle
很快

00:23:58.426 --> 00:24:00.676 A:middle
我们要保证

00:23:58.426 --> 00:24:00.676 A:middle
我们要保证

00:24:00.676 --> 00:24:02.506 A:middle
画面不会在用户眼前

00:24:02.506 --> 00:24:03.526 A:middle
产生拖尾或者撕裂

00:24:03.886 --> 00:24:05.566 A:middle
panel 会照亮

00:24:05.566 --> 00:24:07.776 A:middle
大约 2 毫秒每帧

00:24:07.776 --> 00:24:09.266 A:middle
在它被 GPU 显示之后

00:24:09.266 --> 00:24:10.966 A:middle
因为 panel 需要时间

00:24:11.036 --> 00:24:12.326 A:middle
去充能 然后才可以

00:24:12.326 --> 00:24:14.096 A:middle
发出全局照明脉冲

00:24:14.916 --> 00:24:16.266 A:middle
这里 光子就从

00:24:16.266 --> 00:24:17.076 A:middle
这里出来

00:24:17.076 --> 00:24:18.046 A:middle
我们要在这个序列中

00:24:18.106 --> 00:24:19.246 A:middle
跟踪这个红框

00:24:19.636 --> 00:24:23.436 A:middle
光子在这里

00:24:23.436 --> 00:24:24.236 A:middle
被释放出来

00:24:24.836 --> 00:24:25.916 A:middle
因为这个时机

00:24:26.316 --> 00:24:27.706 A:middle
应用通常会选择一个动作

00:24:27.756 --> 00:24:28.926 A:middle
就像大家已经知道的一样

00:24:28.986 --> 00:24:30.986 A:middle
应用从 IVR compositor 唤醒动作里

00:24:30.986 --> 00:24:31.406 A:middle
选择一个动作

00:24:31.646 --> 00:24:33.946 A:middle
唤醒动作会延迟

00:24:33.946 --> 00:24:36.096 A:middle
并为那个未来的光子释放

00:24:36.096 --> 00:24:37.356 A:middle
发回一个动作

00:24:37.616 --> 00:24:39.526 A:middle
这里是渲染

00:24:39.526 --> 00:24:41.146 A:middle
你把它显示在那里

00:24:41.366 --> 00:24:42.386 A:middle
在中间这里

00:24:42.516 --> 00:24:43.796 A:middle
但光子不会从那里

00:24:43.796 --> 00:24:44.056 A:middle
出去

00:24:44.056 --> 00:24:46.916 A:middle
所以我们必须要

00:24:46.916 --> 00:24:49.426 A:middle
预测 25 毫秒之后的动作

00:24:50.076 --> 00:24:54.206 A:middle
25 毫秒是

00:24:54.206 --> 00:24:56.206 A:middle
两帧再加上运行开始时

00:24:56.366 --> 00:24:57.186 A:middle
那一瞬间

00:24:57.236 --> 00:24:58.036 A:middle
你们已经知道

00:24:58.036 --> 00:25:00.516 A:middle
运行开始是非常重要的

00:24:58.036 --> 00:25:00.516 A:middle
运行开始是非常重要的

00:25:00.516 --> 00:25:01.706 A:middle
我们想要尽可能地

00:25:01.706 --> 00:25:04.146 A:middle
给你们那 11 毫秒 GPU 时间

00:25:04.146 --> 00:25:05.826 A:middle
去给用户展现

00:25:05.826 --> 00:25:07.376 A:middle
最好的画面

00:25:08.396 --> 00:25:11.006 A:middle
最后发生的事

00:25:11.006 --> 00:25:11.656 A:middle
在这里

00:25:11.726 --> 00:25:12.736 A:middle
你们可以看到这一帧

00:25:12.736 --> 00:25:14.156 A:middle
会延伸到

00:25:14.156 --> 00:25:14.926 A:middle
一开始的地方

00:25:15.416 --> 00:25:16.906 A:middle
那是因为这个应用

00:25:16.906 --> 00:25:19.486 A:middle
比较复杂

00:25:19.486 --> 00:25:20.526 A:middle
你的游戏引擎

00:25:20.526 --> 00:25:22.566 A:middle
可能会在暗中这样做

00:25:23.356 --> 00:25:24.726 A:middle
它需要处理

00:25:24.726 --> 00:25:26.586 A:middle
一些物理和输入事件

00:25:27.146 --> 00:25:28.386 A:middle
在这里

00:25:28.386 --> 00:25:29.526 A:middle
这个工作需要占用

00:25:29.526 --> 00:25:29.916 A:middle
一些 CPU 时间

00:25:30.496 --> 00:25:32.046 A:middle
那个代码实际上也需要

00:25:32.106 --> 00:25:33.286 A:middle
动作信息

00:25:33.936 --> 00:25:35.346 A:middle
它需要知道

00:25:35.346 --> 00:25:36.526 A:middle
什么时候按键了

00:25:36.526 --> 00:25:37.366 A:middle
控制器在哪里

00:25:37.366 --> 00:25:38.456 A:middle
也许它正在插入

00:25:38.746 --> 00:25:39.576 A:middle
一些关于动作的东西

00:25:39.576 --> 00:25:41.546 A:middle
或者你在阻挡一些东西

00:25:41.796 --> 00:25:42.796 A:middle
或者你在发射一些东西

00:25:43.556 --> 00:25:47.026 A:middle
所以 实际上这个线程

00:25:47.026 --> 00:25:48.146 A:middle
它会在差不多同时唤醒

00:25:48.146 --> 00:25:49.626 A:middle
因为唤醒动作

00:25:49.626 --> 00:25:51.476 A:middle
给了它这个重要的

00:25:51.586 --> 00:25:52.126 A:middle
同步点

00:25:52.466 --> 00:25:53.866 A:middle
但它会调用

00:25:53.866 --> 00:25:55.346 A:middle
一个不同的 API

00:25:55.346 --> 00:25:56.756 A:middle
因为它正试着获得

00:25:56.756 --> 00:25:57.346 A:middle
一个更远的动作

00:25:57.536 --> 00:25:59.106 A:middle
36 毫秒之后

00:25:59.106 --> 00:26:00.776 A:middle
所以它需要

00:25:59.106 --> 00:26:00.776 A:middle
所以它需要

00:26:00.776 --> 00:26:02.746 A:middle
调用 getDevice

00:26:02.746 --> 00:26:04.026 A:middle
来精确追踪动作

00:26:04.406 --> 00:26:06.946 A:middle
我说这些是为了让你们知道

00:26:06.946 --> 00:26:09.636 A:middle
OpenVR 有一些

00:26:09.636 --> 00:26:12.706 A:middle
很深的 API 让你们用来

00:26:12.706 --> 00:26:13.746 A:middle
调试你们的应用

00:26:13.746 --> 00:26:15.856 A:middle
让你们能够精确预测

00:26:15.856 --> 00:26:16.806 A:middle
头显设备和控制器

00:26:16.806 --> 00:26:18.806 A:middle
将会在哪里

00:26:19.236 --> 00:26:21.696 A:middle
基础就是你需要它们在哪里

00:26:21.696 --> 00:26:23.106 A:middle
你的代码需要它们在哪里

00:26:23.106 --> 00:26:24.946 A:middle
唤醒动作的意义就在于

00:26:24.946 --> 00:26:26.526 A:middle
它在运行开始时就及时

00:26:26.526 --> 00:26:28.176 A:middle
给你一个预测点

00:26:28.176 --> 00:26:29.376 A:middle
你就会知道这些光子

00:26:29.376 --> 00:26:30.506 A:middle
何时会释放出来

00:26:31.536 --> 00:26:35.316 A:middle
最后让我们说一说

00:26:35.316 --> 00:26:36.276 A:middle
你需要做什么

00:26:36.276 --> 00:26:37.426 A:middle
来使用

00:26:37.426 --> 00:26:38.366 A:middle
SteamVr 和 macOS

00:26:38.366 --> 00:26:39.656 A:middle
首先 这是 Steam 上的一个工具

00:26:39.656 --> 00:26:41.816 A:middle
开发者需要安装

00:26:41.816 --> 00:26:43.546 A:middle
Steam 并注册免费账户

00:26:43.546 --> 00:26:44.906 A:middle
才能开始

00:26:45.696 --> 00:26:47.626 A:middle
如果你们还没有使用 Steam

00:26:47.626 --> 00:26:47.996 A:middle
快开始用吧

00:26:49.336 --> 00:26:51.086 A:middle
接下来是安装 SteamVR 本身

00:26:51.166 --> 00:26:53.066 A:middle
SteamVR 在工具中的

00:26:53.066 --> 00:26:53.946 A:middle
Library 菜单里

00:26:54.296 --> 00:26:56.046 A:middle
搜索 SteamVR 右键点击

00:26:56.046 --> 00:26:58.366 A:middle
选择 Properties

00:26:58.366 --> 00:27:00.246 A:middle
选择 Beta

00:26:58.366 --> 00:27:00.246 A:middle
选择 Beta

00:27:00.246 --> 00:27:00.776 A:middle
进入 Beta

00:27:01.246 --> 00:27:02.006 A:middle
现在还是 beta 版本

00:27:02.316 --> 00:27:03.206 A:middle
然后安装它

00:27:03.206 --> 00:27:04.566 A:middle
我们会保持 SteamVR 的更新

00:27:04.566 --> 00:27:05.946 A:middle
你们发现 bug 后我们就会去修复

00:27:07.166 --> 00:27:08.346 A:middle
最后 你们要去 GitHub

00:27:08.346 --> 00:27:09.896 A:middle
下载 OpenVR header 和

00:27:09.896 --> 00:27:11.686 A:middle
框架

00:27:11.686 --> 00:27:12.796 A:middle
我在这里放了一个链接

00:27:15.556 --> 00:27:17.096 A:middle
这是最酷的部分

00:27:17.656 --> 00:27:18.886 A:middle
你要把 OpenVR

00:27:18.886 --> 00:27:20.766 A:middle
bootstrapping 框架

00:27:20.766 --> 00:27:21.526 A:middle
放到你的应用里

00:27:22.106 --> 00:27:24.166 A:middle
你链接到的 OpenVR 框架

00:27:24.166 --> 00:27:25.756 A:middle
表达了你构建

00:27:25.756 --> 00:27:27.216 A:middle
并测试的

00:27:27.216 --> 00:27:28.436 A:middle
runtime 界面的版本

00:27:29.146 --> 00:27:30.866 A:middle
这会让我们能

00:27:30.946 --> 00:27:32.736 A:middle
升级 runtime 和进行

00:27:32.736 --> 00:27:33.616 A:middle
版本更新

00:27:33.616 --> 00:27:35.306 A:middle
我们会很积极地

00:27:35.536 --> 00:27:36.196 A:middle
进行更新

00:27:36.386 --> 00:27:38.376 A:middle
在 Xcode 里 不要去把框架

00:27:38.376 --> 00:27:39.146 A:middle
添加到你的 link phase

00:27:39.146 --> 00:27:40.796 A:middle
而应该到通用设置里

00:27:40.986 --> 00:27:42.216 A:middle
把它设置成 embedded binary （嵌入式二进制文件）

00:27:42.216 --> 00:27:43.786 A:middle
它会被安装到

00:27:43.786 --> 00:27:45.136 A:middle
你的应用程序包里的

00:27:45.136 --> 00:27:46.086 A:middle
内容框架部分

00:27:46.896 --> 00:27:50.506 A:middle
好了 最后 我们真的需要

00:27:50.506 --> 00:27:51.296 A:middle
你们的反馈

00:27:51.476 --> 00:27:53.016 A:middle
因此 我们直接在

00:27:53.016 --> 00:27:54.426 A:middle
vrmonitor 的 UI 里放了一些东西

00:27:54.426 --> 00:27:56.266 A:middle
有个指针可以直接到 SteamVR 的

00:27:56.266 --> 00:27:57.756 A:middle
支持网站和硬件

00:27:57.756 --> 00:27:58.756 A:middle
讨论群

00:27:59.046 --> 00:28:00.646 A:middle
你可以上报 bug

00:27:59.046 --> 00:28:00.646 A:middle
你可以上报 bug

00:28:00.646 --> 00:28:01.976 A:middle
制作系统报告并

00:28:01.976 --> 00:28:03.306 A:middle
发送给我们 也可以直接发到我手上

00:28:03.306 --> 00:28:05.476 A:middle
我的邮箱地址是

00:28:05.476 --> 00:28:07.736 A:middle
natb@valvesoftware.com

00:28:07.736 --> 00:28:08.586 A:middle
不过我更希望你们使用这个工具

00:28:09.196 --> 00:28:12.396 A:middle
非常感谢大家

00:28:12.396 --> 00:28:13.826 A:middle
我真的很期待看到

00:28:13.826 --> 00:28:15.306 A:middle
你们使用 VR 的工作成果

00:28:15.376 --> 00:28:16.616 A:middle
还要谢谢 Apple 的每个人

00:28:16.616 --> 00:28:18.246 A:middle
让 VR 在 macOS 上发光

00:28:19.336 --> 00:28:19.716 A:middle
谢谢大家

00:28:20.516 --> 00:28:22.636 A:middle
[掌声]

00:28:23.136 --> 00:28:23.576 A:middle
&gt;&gt; 谢谢 Nat

00:28:24.886 --> 00:28:25.926 A:middle
与 Valve 合作非常愉快

00:28:25.926 --> 00:28:27.376 A:middle
此时此刻 我仍然

00:28:27.376 --> 00:28:28.236 A:middle
震惊于我们在过去一年

00:28:28.236 --> 00:28:29.636 A:middle
所取得的成绩

00:28:31.206 --> 00:28:31.816 A:middle
好了

00:28:31.816 --> 00:28:33.506 A:middle
我们接着谈谈

00:28:33.506 --> 00:28:35.466 A:middle
我们在 macOS High Sierra 里添加的

00:28:35.466 --> 00:28:37.296 A:middle
外接 GPU 支持吧

00:28:37.986 --> 00:28:40.816 A:middle
外接 GPU 是一个

00:28:40.816 --> 00:28:42.196 A:middle
独立的底盘 上面

00:28:42.306 --> 00:28:44.436 A:middle
有个桌面级别的 GPU

00:28:44.436 --> 00:28:47.146 A:middle
可以通过 thunderbolt

00:28:47.146 --> 00:28:48.926 A:middle
直接插到主系统上

00:28:49.856 --> 00:28:52.186 A:middle
之前说过

00:28:52.466 --> 00:28:54.216 A:middle
这样做的主要原因

00:28:54.216 --> 00:28:55.876 A:middle
是让你们这样的开发者能够

00:28:55.876 --> 00:28:58.166 A:middle
使用更多样的 Mac 硬件

00:28:58.256 --> 00:28:59.936 A:middle
去制作更出色的 VR App

00:29:00.686 --> 00:29:02.196 A:middle
这是个很棒的 workflow

00:29:02.196 --> 00:29:03.436 A:middle
你可以用你的 MacBook Pro

00:29:03.436 --> 00:29:05.996 A:middle
和外接 GPU

00:29:06.236 --> 00:29:07.946 A:middle
来获得制作 VR 应用所需的

00:29:07.946 --> 00:29:08.696 A:middle
渲染性能

00:29:08.696 --> 00:29:11.466 A:middle
当然 这还能为

00:29:11.466 --> 00:29:12.896 A:middle
其他 GPU 应用场景

00:29:12.936 --> 00:29:15.086 A:middle
提供额外的性能支持

00:29:15.086 --> 00:29:17.506 A:middle
比如游戏和专业 App

00:29:18.576 --> 00:29:22.706 A:middle
大家在周一了解过了

00:29:22.706 --> 00:29:24.246 A:middle
我们和 Sonnet 与 AMD 合作

00:29:24.246 --> 00:29:26.426 A:middle
为你们提供了一个

00:29:26.426 --> 00:29:28.666 A:middle
外部图像开发者套装

00:29:28.706 --> 00:29:32.226 A:middle
里面有一块 AMD Radeon RX-580 GPU

00:29:32.556 --> 00:29:34.616 A:middle
这个套装已经优化过

00:29:34.616 --> 00:29:36.106 A:middle
适配所有的能兼容 Thunderbolt3

00:29:36.106 --> 00:29:37.966 A:middle
的 Mac 设备

00:29:37.966 --> 00:29:38.906 A:middle
今天就能通过开发者计划

00:29:38.906 --> 00:29:40.626 A:middle
购买这个套装

00:29:41.236 --> 00:29:41.966 A:middle
好了

00:29:42.246 --> 00:29:44.066 A:middle
接下来讲要如何

00:29:44.066 --> 00:29:45.846 A:middle
识别外接 GPU

00:29:46.556 --> 00:29:48.116 A:middle
这个设备枚举代码

00:29:48.116 --> 00:29:49.196 A:middle
看上去应该很不陌生

00:29:50.616 --> 00:29:52.646 A:middle
CopyAllDevices 会显示出

00:29:52.646 --> 00:29:54.166 A:middle
系统中所有支持 Metal 的设备

00:29:54.906 --> 00:29:56.336 A:middle
然后你可以识别出

00:29:56.336 --> 00:29:58.626 A:middle
外部 GPU 了 方法就是

00:29:58.626 --> 00:30:00.576 A:middle
识别设备的

00:29:58.626 --> 00:30:00.576 A:middle
识别设备的

00:30:00.576 --> 00:30:00.976 A:middle
可删除属性就可以了

00:30:01.976 --> 00:30:03.466 A:middle
这和你们之前

00:30:03.546 --> 00:30:04.936 A:middle
识别我们平台上的

00:30:04.936 --> 00:30:06.646 A:middle
低电量设备的方法很类似

00:30:06.646 --> 00:30:10.336 A:middle
现在 我们来稍微讲一下

00:30:10.336 --> 00:30:11.246 A:middle
Thunderbolt 带宽功能

00:30:12.816 --> 00:30:15.086 A:middle
Thunderbolt 3 提供的

00:30:15.146 --> 00:30:16.386 A:middle
理论带宽是

00:30:16.436 --> 00:30:18.326 A:middle
Thunderbolt 2 的两倍 这很好

00:30:19.166 --> 00:30:20.406 A:middle
但不要忘了

00:30:20.406 --> 00:30:21.806 A:middle
这只不过是

00:30:21.806 --> 00:30:24.056 A:middle
我们平台上

00:30:24.306 --> 00:30:25.956 A:middle
内置 GPU 总线驱动带宽

00:30:25.956 --> 00:30:27.116 A:middle
的四分之一而已

00:30:28.356 --> 00:30:29.286 A:middle
这很重要

00:30:29.906 --> 00:30:31.586 A:middle
你现在可以选择

00:30:31.586 --> 00:30:33.896 A:middle
是使用带宽更高的

00:30:34.006 --> 00:30:36.426 A:middle
内置 GPU

00:30:36.516 --> 00:30:38.656 A:middle
还是使用大约

00:30:38.656 --> 00:30:39.926 A:middle
四分之一带宽的

00:30:39.926 --> 00:30:40.466 A:middle
高性能外接 GPU

00:30:41.126 --> 00:30:43.536 A:middle
在决定使用哪个 GPU 的时候

00:30:43.536 --> 00:30:45.056 A:middle
要把带宽的因素

00:30:45.056 --> 00:30:47.486 A:middle
也考虑进去

00:30:48.816 --> 00:30:50.606 A:middle
此外 用户现在可以

00:30:50.606 --> 00:30:52.706 A:middle
在不同的 GPU 上接不同的显示设备了

00:30:52.896 --> 00:30:55.746 A:middle
在这个环境下

00:30:55.746 --> 00:30:57.746 A:middle
要使用一个 GPU 渲染

00:30:58.006 --> 00:30:59.576 A:middle
另一个 GPU 显示的话 就会有个缺点

00:30:59.576 --> 00:31:00.516 A:middle
因为数据需要

00:30:59.576 --> 00:31:00.516 A:middle
因为数据需要

00:31:00.516 --> 00:31:02.226 A:middle
通过链接传输

00:31:03.736 --> 00:31:05.046 A:middle
所以 内容会在哪里显示

00:31:05.106 --> 00:31:08.946 A:middle
这是你在决定使用哪个 GPU 时

00:31:08.946 --> 00:31:10.526 A:middle
必须要考虑的

00:31:10.646 --> 00:31:12.176 A:middle
一个重要因素

00:31:13.606 --> 00:31:14.206 A:middle
这添加了一些

00:31:14.206 --> 00:31:15.106 A:middle
复杂性

00:31:15.856 --> 00:31:16.806 A:middle
但幸好

00:31:16.866 --> 00:31:18.566 A:middle
你可以做一点

00:31:18.566 --> 00:31:20.156 A:middle
简单的事情 让你的 App

00:31:20.216 --> 00:31:21.656 A:middle
在多 GPU 环境下

00:31:21.656 --> 00:31:22.196 A:middle
表现良好

00:31:23.136 --> 00:31:24.116 A:middle
我们先讲 GPU 的选择

00:31:25.646 --> 00:31:27.066 A:middle
我们强烈建议

00:31:27.066 --> 00:31:29.836 A:middle
你使用同一块 GPU

00:31:29.836 --> 00:31:31.516 A:middle
渲染和驱动你 App 的

00:31:31.516 --> 00:31:31.916 A:middle
显示设备

00:31:32.506 --> 00:31:34.306 A:middle
我把这称为 GPU 选择的

00:31:34.306 --> 00:31:35.116 A:middle
黄金法则

00:31:36.216 --> 00:31:37.356 A:middle
我们展开一下

00:31:37.356 --> 00:31:38.306 A:middle
制作一个决策树

00:31:39.756 --> 00:31:41.186 A:middle
如果你的 App 渲染的内容

00:31:41.226 --> 00:31:43.226 A:middle
会被显示出来

00:31:43.226 --> 00:31:46.006 A:middle
你就要去选择

00:31:46.656 --> 00:31:48.436 A:middle
驱动那个显示设备的 GPU

00:31:48.656 --> 00:31:49.596 A:middle
这是我们的黄金法则

00:31:50.776 --> 00:31:51.936 A:middle
但是如果你的 App

00:31:51.976 --> 00:31:53.986 A:middle
要进行计算或者其他

00:31:53.986 --> 00:31:55.956 A:middle
离线渲染操作

00:31:55.956 --> 00:31:57.616 A:middle
那你就要决定是否要

00:31:57.616 --> 00:31:59.526 A:middle
使用低能耗 GPU 了

00:31:59.526 --> 00:32:00.116 A:middle
如果可能的话

00:31:59.526 --> 00:32:00.116 A:middle
如果可能的话

00:32:01.126 --> 00:32:02.646 A:middle
这在移动设备上

00:32:02.646 --> 00:32:04.006 A:middle
尤其有用

00:32:04.276 --> 00:32:05.596 A:middle
因为选择这个设备

00:32:05.666 --> 00:32:07.136 A:middle
会极大地节省电量

00:32:07.916 --> 00:32:09.066 A:middle
但当然 如果你

00:32:09.066 --> 00:32:11.186 A:middle
需要把 GPU 性能用在 VR 上面

00:32:11.186 --> 00:32:12.546 A:middle
你就得选择

00:32:12.546 --> 00:32:14.216 A:middle
外接 GPU 了

00:32:14.216 --> 00:32:17.126 A:middle
我们回到黄金法则上

00:32:17.126 --> 00:32:19.256 A:middle
看看要如何

00:32:19.256 --> 00:32:21.196 A:middle
识别驱动特定显示的

00:32:21.196 --> 00:32:22.556 A:middle
Metal 设备吧

00:32:23.866 --> 00:32:24.806 A:middle
你们会发现

00:32:24.876 --> 00:32:25.766 A:middle
这是很容易的

00:32:26.496 --> 00:32:27.576 A:middle
有一个现有的

00:32:27.576 --> 00:32:29.416 A:middle
图像 API 会让你

00:32:29.416 --> 00:32:30.176 A:middle
识别这个设备

00:32:30.996 --> 00:32:32.646 A:middle
你只需要得到你的窗口

00:32:33.216 --> 00:32:34.586 A:middle
所在的显示设备的 ID

00:32:34.586 --> 00:32:36.026 A:middle
方法就是去询问

00:32:36.026 --> 00:32:36.906 A:middle
NSScreenNumber

00:32:37.636 --> 00:32:39.516 A:middle
然后调用

00:32:39.576 --> 00:32:42.116 A:middle
CGDirectDisplayCopyCurrentMetalDevice

00:32:42.116 --> 00:32:44.076 A:middle
来获取驱动这个显示的

00:32:44.146 --> 00:32:45.346 A:middle
Metal 设备

00:32:46.036 --> 00:32:46.606 A:middle
就这么简单

00:32:46.606 --> 00:32:47.306 A:middle
好了

00:32:49.236 --> 00:32:51.586 A:middle
我们已经知道

00:32:51.586 --> 00:32:53.056 A:middle
每个显示设备

00:32:53.056 --> 00:32:55.346 A:middle
都可以接到不同的 GPU 上

00:32:55.346 --> 00:32:57.656 A:middle
你的 App 就需要在显示移动时

00:32:57.656 --> 00:32:58.706 A:middle
操作 GPU 的迁移

00:32:59.116 --> 00:33:00.566 A:middle
不好意思 我是说在你的窗口

00:32:59.116 --> 00:33:00.566 A:middle
不好意思 我是说在你的窗口

00:33:00.566 --> 00:33:01.706 A:middle
在这些显示中移动的时候

00:33:03.776 --> 00:33:05.586 A:middle
你可以通过

00:33:05.656 --> 00:33:07.646 A:middle
注册新的

00:33:07.646 --> 00:33:08.946 A:middle
其实不是新的 是我们已有的

00:33:09.376 --> 00:33:10.926 A:middle
通知管理 叫做

00:33:11.206 --> 00:33:12.896 A:middle
WindowDidChangeScreen 来实现这一点

00:33:12.896 --> 00:33:14.416 A:middle
我们看一看你们要

00:33:14.416 --> 00:33:15.826 A:middle
如何处理这个通知管理

00:33:16.406 --> 00:33:18.506 A:middle
首先要找到

00:33:18.596 --> 00:33:21.406 A:middle
你的 App 现在所在的显示的

00:33:21.406 --> 00:33:23.286 A:middle
Metal 设备 方法就是

00:33:23.286 --> 00:33:24.626 A:middle
调用我们刚才说过的

00:33:24.626 --> 00:33:26.196 A:middle
核心图像 API

00:33:27.476 --> 00:33:28.586 A:middle
如果这就是你当前正在

00:33:28.586 --> 00:33:29.646 A:middle
渲染的同一个设备

00:33:29.686 --> 00:33:31.106 A:middle
那你就能提前完成了

00:33:31.106 --> 00:33:33.036 A:middle
因为不需要 GPU 迁移

00:33:33.036 --> 00:33:35.336 A:middle
然后 你要进行

00:33:35.566 --> 00:33:37.606 A:middle
设备迁移

00:33:37.606 --> 00:33:39.316 A:middle
切换到使用新设备

00:33:39.316 --> 00:33:39.966 A:middle
进行所有渲染

00:33:41.016 --> 00:33:43.236 A:middle
这就是使用显示

00:33:43.236 --> 00:33:45.246 A:middle
更改通知来操作

00:33:45.246 --> 00:33:46.376 A:middle
GPU 迁移

00:33:46.376 --> 00:33:48.166 A:middle
但外接 GPU

00:33:48.166 --> 00:33:50.076 A:middle
插入系统

00:33:50.366 --> 00:33:51.756 A:middle
或者拔出系统时该怎样呢

00:33:53.116 --> 00:33:54.786 A:middle
Metal 2 推出了

00:33:54.786 --> 00:33:56.526 A:middle
3 个新通知 在这种情况下

00:33:56.526 --> 00:33:57.146 A:middle
帮助你

00:33:58.316 --> 00:34:01.016 A:middle
第一个是 DeviceWasAdded

00:33:58.316 --> 00:34:01.016 A:middle
第一个是 DeviceWasAdded

00:34:01.016 --> 00:34:02.616 A:middle
适用于外接 GPU 插入时

00:34:03.726 --> 00:34:05.076 A:middle
DeviceWasRemoved 适用于

00:34:05.116 --> 00:34:06.336 A:middle
拔出时

00:34:06.336 --> 00:34:08.735 A:middle
还有 DeviceRemovalRequested

00:34:08.735 --> 00:34:10.896 A:middle
适用于 OS 准备在未来某个时间点

00:34:10.896 --> 00:34:12.795 A:middle
移除外接 GPU 的情况

00:34:14.235 --> 00:34:15.406 A:middle
我们看看你要如何

00:34:15.406 --> 00:34:16.716 A:middle
注册并响应

00:34:16.716 --> 00:34:18.706 A:middle
这些通知

00:34:19.815 --> 00:34:21.315 A:middle
你要使用新的

00:34:21.416 --> 00:34:24.016 A:middle
CopyAllDevicesWithObserver API

00:34:24.686 --> 00:34:25.786 A:middle
这是我们在 Metal 2 中新推出的

00:34:26.846 --> 00:34:27.936 A:middle
这会让你为这些新的

00:34:28.045 --> 00:34:30.416 A:middle
设备变更通知注册

00:34:30.416 --> 00:34:31.686 A:middle
handler

00:34:32.686 --> 00:34:34.136 A:middle
在这个示例里

00:34:34.136 --> 00:34:35.536 A:middle
我们只需要调用一个叫

00:34:35.896 --> 00:34:37.266 A:middle
handleGPUHotPlug 的函数

00:34:37.976 --> 00:34:38.876 A:middle
我们来看一看

00:34:39.666 --> 00:34:41.126 A:middle
这真的很简单直接

00:34:41.616 --> 00:34:43.446 A:middle
你只需要检查

00:34:43.446 --> 00:34:45.216 A:middle
并直接回应每一条通知

00:34:46.686 --> 00:34:47.676 A:middle
但我想在这里

00:34:47.676 --> 00:34:48.275 A:middle
指出几件事

00:34:49.315 --> 00:34:50.966 A:middle
首先 你的 App

00:34:50.966 --> 00:34:51.896 A:middle
应该把

00:34:51.946 --> 00:34:53.436 A:middle
DeviceRemovalRequested

00:34:53.436 --> 00:34:55.696 A:middle
通知 当成要迁移出

00:34:55.795 --> 00:34:57.966 A:middle
外接 GPU 的提示

00:34:58.446 --> 00:35:02.216 A:middle
第二 如果你的 App

00:34:58.446 --> 00:35:02.216 A:middle
第二 如果你的 App

00:35:02.216 --> 00:35:02.796 A:middle
没有接收到

00:35:02.796 --> 00:35:04.116 A:middle
DeviceRemovalRequested

00:35:04.116 --> 00:35:06.016 A:middle
通知 那它就应该

00:35:06.016 --> 00:35:08.186 A:middle
把 DeviceWasRemoved 当成

00:35:08.286 --> 00:35:10.246 A:middle
意外的 GPU 移除

00:35:10.826 --> 00:35:13.646 A:middle
意外的 GPU 移除是指

00:35:13.646 --> 00:35:15.316 A:middle
你的外接 GPU 在系统不知情的情况下

00:35:15.436 --> 00:35:17.036 A:middle
切断了连接

00:35:17.156 --> 00:35:18.566 A:middle
或者失去了电力

00:35:19.926 --> 00:35:20.986 A:middle
这就等于

00:35:20.986 --> 00:35:22.196 A:middle
有人进入了你的系统

00:35:22.196 --> 00:35:24.116 A:middle
拔掉了 GPU

00:35:24.896 --> 00:35:26.126 A:middle
既然硬件已经

00:35:26.126 --> 00:35:28.286 A:middle
不在了 一些 Metal API

00:35:28.286 --> 00:35:30.086 A:middle
调用就会开始出现错误

00:35:30.646 --> 00:35:32.486 A:middle
因此你需要在 App 中

00:35:32.536 --> 00:35:33.986 A:middle
添加防护代码

00:35:33.986 --> 00:35:34.556 A:middle
以防这种情况发生

00:35:35.146 --> 00:35:36.516 A:middle
让它能够坚持住

00:35:36.616 --> 00:35:37.786 A:middle
直到收到迁移通知

00:35:37.786 --> 00:35:39.236 A:middle
并从容地

00:35:39.236 --> 00:35:41.076 A:middle
切换到系统中的

00:35:41.076 --> 00:35:41.696 A:middle
另一块 GPU 上

00:35:42.876 --> 00:35:44.116 A:middle
还有一点需要指出

00:35:44.296 --> 00:35:45.756 A:middle
那就是如果你在外接 GPU 的

00:35:45.756 --> 00:35:47.916 A:middle
本地内存上有临时数据

00:35:47.916 --> 00:35:49.646 A:middle
你的 App 就可能需要

00:35:49.646 --> 00:35:50.926 A:middle
重新生成数据 因为它

00:35:50.926 --> 00:35:51.386 A:middle
已经没有了

00:35:51.386 --> 00:35:52.066 A:middle
好了

00:35:53.346 --> 00:35:55.666 A:middle
现在讲一些最佳实践

00:35:56.456 --> 00:35:57.916 A:middle
我们建议你们

00:35:57.916 --> 00:35:59.716 A:middle
不要在迁移后立即

00:35:59.966 --> 00:36:02.466 A:middle
释放设备

00:35:59.966 --> 00:36:02.466 A:middle
释放设备

00:36:02.466 --> 00:36:04.106 A:middle
因为用户喜欢在不同显示设备之间

00:36:04.106 --> 00:36:05.066 A:middle
移动窗口

00:36:05.946 --> 00:36:08.356 A:middle
所以请

00:36:08.426 --> 00:36:10.126 A:middle
采用延迟 teardown 策略 留出一些合理时间

00:36:12.136 --> 00:36:14.566 A:middle
此外 如果你的 App

00:36:14.566 --> 00:36:16.936 A:middle
有复杂的 UI 有很多窗口

00:36:16.936 --> 00:36:19.366 A:middle
你也许 也许需要

00:36:19.366 --> 00:36:21.476 A:middle
分别针对每个窗口

00:36:21.526 --> 00:36:22.306 A:middle
控制 GPU 迁移

00:36:23.426 --> 00:36:25.526 A:middle
最后 我们建议

00:36:25.526 --> 00:36:27.086 A:middle
你在多 GPU 场景下

00:36:27.086 --> 00:36:29.516 A:middle
存储 App 以保证

00:36:29.516 --> 00:36:30.736 A:middle
你不需要

00:36:30.736 --> 00:36:32.356 A:middle
在 GPU 之间来回传送数据

00:36:32.426 --> 00:36:35.986 A:middle
做无用功

00:36:36.186 --> 00:36:36.446 A:middle
好了

00:36:36.696 --> 00:36:38.196 A:middle
我们回到 VR 上来

00:36:38.196 --> 00:36:39.816 A:middle
看一看这种使用场景下的

00:36:39.816 --> 00:36:40.676 A:middle
最佳实践

00:36:41.816 --> 00:36:44.156 A:middle
首先 最明显的

00:36:44.156 --> 00:36:45.616 A:middle
保证你把 VR 头显设备

00:36:45.736 --> 00:36:47.536 A:middle
直接插到外接 GPU 上

00:36:48.836 --> 00:36:50.076 A:middle
不那么明显但同样重要的是

00:36:50.076 --> 00:36:51.766 A:middle
你要确保你的 App

00:36:51.766 --> 00:36:53.256 A:middle
把它的 UI 或是

00:36:53.256 --> 00:36:56.256 A:middle
镜像 VR 内容

00:36:56.256 --> 00:36:57.746 A:middle
显示到同样被

00:36:57.746 --> 00:36:59.336 A:middle
外接 GPU 驱动的显示器上

00:37:00.036 --> 00:37:01.206 A:middle
这会确保

00:37:01.206 --> 00:37:03.626 A:middle
VR compositor 和你的 App

00:37:03.626 --> 00:37:05.316 A:middle
都使用外接 GPU 进行渲染

00:37:05.906 --> 00:37:08.396 A:middle
最后 要保证你

00:37:08.396 --> 00:37:10.846 A:middle
在外接 GPU 的本地内存上

00:37:10.846 --> 00:37:12.556 A:middle
存储尽可能多的数据

00:37:12.906 --> 00:37:14.226 A:middle
这样你就不需要通过

00:37:14.226 --> 00:37:15.416 A:middle
Thunderbolt 链接传输数据了

00:37:15.416 --> 00:37:17.016 A:middle
除非这是绝对必要的

00:37:18.216 --> 00:37:19.236 A:middle
好了

00:37:20.376 --> 00:37:22.096 A:middle
这就是今天讲座的

00:37:22.096 --> 00:37:22.826 A:middle
全部内容

00:37:23.046 --> 00:37:24.386 A:middle
我们来快速回顾一下

00:37:24.386 --> 00:37:25.196 A:middle
今天谈到的东西

00:37:25.476 --> 00:37:27.676 A:middle
最重要的是你们现在

00:37:27.676 --> 00:37:29.526 A:middle
可以在 macOS 上开发 VR 内容了

00:37:31.376 --> 00:37:32.886 A:middle
我们添加了对 HTC Vibe 头显设备的

00:37:33.126 --> 00:37:34.716 A:middle
内置支持

00:37:35.336 --> 00:37:37.366 A:middle
我们与 Valve 合作

00:37:37.366 --> 00:37:39.296 A:middle
为在我们平台上的 SteamVR

00:37:39.546 --> 00:37:41.046 A:middle
runtime 推出了一个

00:37:41.046 --> 00:37:43.106 A:middle
优化版本的 Metal

00:37:44.966 --> 00:37:46.216 A:middle
此外 两个最流行的

00:37:46.306 --> 00:37:48.486 A:middle
游戏引擎 Unity

00:37:48.486 --> 00:37:50.566 A:middle
和虚幻 4 会在不久的将来

00:37:50.636 --> 00:37:52.596 A:middle
在 Mac 中加入 VR 支持

00:37:53.766 --> 00:37:55.406 A:middle
但当然 我们也鼓励

00:37:55.406 --> 00:37:56.806 A:middle
你们构建自己的原生 VR

00:37:56.806 --> 00:37:57.296 A:middle
App

00:37:58.126 --> 00:37:59.726 A:middle
最后 我们还添加了

00:37:59.726 --> 00:38:00.626 A:middle
对外接 GPU 的支持

00:37:59.726 --> 00:38:00.626 A:middle
对外接 GPU 的支持

00:38:00.626 --> 00:38:02.846 A:middle
我们希望这能

00:38:02.846 --> 00:38:04.606 A:middle
让你保证你的 App

00:38:04.746 --> 00:38:06.946 A:middle
在多 GPU 环境下

00:38:06.946 --> 00:38:08.326 A:middle
表现良好

00:38:08.376 --> 00:38:09.376 A:middle
让你们能利用上

00:38:09.376 --> 00:38:10.706 A:middle
外接 GPU 的强劲性能

00:38:12.696 --> 00:38:14.746 A:middle
我们非常期待看到

00:38:14.746 --> 00:38:15.696 A:middle
你们使用这个新技术

00:38:15.696 --> 00:38:17.206 A:middle
创造出的成果

00:38:18.436 --> 00:38:19.396 A:middle
一定要记得去

00:38:19.396 --> 00:38:20.406 A:middle
看 Metal Track 的

00:38:20.406 --> 00:38:20.756 A:middle
其他讲座

00:38:21.086 --> 00:38:22.666 A:middle
昨天有一场很棒的

00:38:22.666 --> 00:38:23.706 A:middle
Introducing Metal 2 讲座

00:38:23.706 --> 00:38:24.826 A:middle
如果你们没赶上

00:38:24.926 --> 00:38:26.126 A:middle
我建议你们去上网

00:38:26.176 --> 00:38:27.186 A:middle
看一看

00:38:28.076 --> 00:38:29.466 A:middle
我们明天下午

00:38:29.466 --> 00:38:30.766 A:middle
还有两场讲座

00:38:31.336 --> 00:38:32.726 A:middle
Metal 2 Optimization and

00:38:32.726 --> 00:38:34.696 A:middle
Debugging 和 Using Metal 2 for

00:38:34.696 --> 00:38:35.136 A:middle
Compute

00:38:35.326 --> 00:38:36.636 A:middle
我们希望在那里见到你们

00:38:37.516 --> 00:38:38.196 A:middle
我会去的

00:38:38.196 --> 00:38:39.286 A:middle
非常感谢大家

00:38:39.336 --> 00:38:40.476 A:middle
祝你们在 WWDC 大有收获

00:38:41.016 --> 00:38:43.000 A:middle
[掌声]
