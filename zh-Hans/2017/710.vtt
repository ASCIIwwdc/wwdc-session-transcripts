WEBVTT

00:00:16.917 --> 00:00:20.020 align:middle line:0
<c.magenta>（Core ML深度解析）</c>

00:00:27.060 --> 00:00:27.995 align:middle line:-1
<c.magenta>大家早上好</c>

00:00:28.629 --> 00:00:31.765 align:middle line:-2
<c.magenta>我是Krishna</c>
<c.magenta>我来自Core ML工程师团队</c>

00:00:32.031 --> 00:00:35.602 align:middle line:-2
<c.magenta>今天我要跟大家谈谈</c>
<c.magenta>Core ML的深度解析</c>

00:00:37.504 --> 00:00:39.506 align:middle line:-1
<c.magenta>今年我们引入了Core ML</c>

00:00:39.806 --> 00:00:43.343 align:middle line:-1
<c.magenta>这是整合机器学习模型最简单的方式</c>

00:00:43.544 --> 00:00:44.578 align:middle line:-1
<c.magenta>在你的应用中</c>

00:00:45.579 --> 00:00:48.615 align:middle line:-1
<c.magenta>Core ML在macOS、</c>

00:00:49.049 --> 00:00:52.953 align:middle line:-2
<c.magenta>iOS、watchOS</c>
<c.magenta>和tvOS上均可用</c>

00:00:53.987 --> 00:00:56.924 align:middle line:-1
<c.magenta>周二有一场介绍Core ML的演讲</c>

00:00:57.357 --> 00:00:59.126 align:middle line:-1
<c.magenta>如果你们没参加那场演讲</c>

00:00:59.226 --> 00:01:00.594 align:middle line:-1
<c.magenta>那就让我们花一点时间</c>

00:00:59.226 --> 00:01:00.594 align:middle line:-1
<c.magenta>那就让我们花一点时间</c>

00:01:00.661 --> 00:01:03.397 align:middle line:-1
<c.magenta>回顾一下那场演讲中的一些关键点</c>

00:01:04.765 --> 00:01:09.603 align:middle line:-2
<c.magenta>关于Core ML</c>
<c.magenta>首先也是最重要的就是你可以</c>

00:01:09.670 --> 00:01:12.606 align:middle line:-1
<c.magenta>把你的机器学习模型当作代码一样</c>

00:01:13.173 --> 00:01:16.743 align:middle line:-2
<c.magenta>你与它们的交互</c>
<c.magenta>也就像与其它Swift类一样</c>

00:01:18.278 --> 00:01:20.514 align:middle line:-1
<c.magenta>你的流程应该是这样的</c>

00:01:21.148 --> 00:01:25.586 align:middle line:-2
<c.magenta>你从机器学习模型开始</c>
<c.magenta>把那个模型拖拽到Xcode中</c>

00:01:26.320 --> 00:01:30.924 align:middle line:-2
<c.magenta>Xcode将自动生成一个Swift</c>
<c.magenta>或Objective-C界面</c>

00:01:31.158 --> 00:01:32.960 align:middle line:-1
<c.magenta>你可以针对那个模型进行编程</c>

00:01:33.727 --> 00:01:36.163 align:middle line:-1
<c.magenta>你写好应用代码并创建它</c>

00:01:37.030 --> 00:01:41.134 align:middle line:-2
<c.magenta>Xcode将在你的应用中</c>
<c.magenta>把代码和模型捆绑到一起</c>

00:01:43.337 --> 00:01:47.040 align:middle line:-2
<c.magenta>在那场演讲中</c>
<c.magenta>我们还看了一个花语的小演示</c>

00:01:47.841 --> 00:01:50.110 align:middle line:-1
<c.magenta>那是一个应用 给你一张图片</c>

00:01:50.277 --> 00:01:54.081 align:middle line:-2
<c.magenta>比如 这种粉红玫瑰</c>
<c.magenta>应用就会告诉你</c>

00:01:54.147 --> 00:01:56.950 align:middle line:-1
<c.magenta>它是什么花以及它所代表的含义</c>

00:01:58.519 --> 00:02:01.755 align:middle line:-2
<c.magenta>我们看那个演示的目的是为了</c>
<c.magenta>使用或创建那个应用</c>

00:01:58.519 --> 00:02:01.755 align:middle line:-2
<c.magenta>我们看那个演示的目的是为了</c>
<c.magenta>使用或创建那个应用</c>

00:02:01.889 --> 00:02:03.457 align:middle line:-1
<c.magenta>它只有几行代码</c>

00:02:04.124 --> 00:02:06.693 align:middle line:-1
<c.magenta>一行代码是实例化模型</c>

00:02:07.394 --> 00:02:10.229 align:middle line:-1
<c.magenta>一行代码是从那个模型中进行阐释</c>

00:02:11.832 --> 00:02:14.735 align:middle line:-2
<c.magenta>那么在本场演讲中</c>
<c.magenta>我们要接着上次的演讲继续讲</c>

00:02:15.135 --> 00:02:17.938 align:middle line:-1
<c.magenta>我们要更多地谈谈不同的用例</c>

00:02:18.005 --> 00:02:20.307 align:middle line:-2
<c.magenta>你们可以通过Core ML</c>
<c.magenta>实现的一些很酷的功能</c>

00:02:21.975 --> 00:02:24.745 align:middle line:-1
<c.magenta>然后谈谈Core ML是如何</c>

00:02:24.811 --> 00:02:27.314 align:middle line:-2
<c.magenta>针对它所运行或它所在运行的硬件</c>
<c.magenta>进行优化的</c>

00:02:27.514 --> 00:02:29.683 align:middle line:-2
<c.magenta>以及这对于你们开发人员</c>
<c.magenta>来说意味着什么</c>

00:02:31.351 --> 00:02:34.555 align:middle line:-1
<c.magenta>最后我们谈谈如何获取Core ML模型</c>

00:02:34.621 --> 00:02:36.123 align:middle line:-1
<c.magenta>以在你的应用中使用</c>

00:02:37.324 --> 00:02:40.761 align:middle line:-2
<c.magenta>那么这将是一场很有意思的演讲</c>
<c.magenta>有一些演示 让我们开始吧</c>

00:02:42.262 --> 00:02:45.599 align:middle line:-2
<c.magenta>那么你已经看到了一个</c>
<c.magenta>使用图片的应用示例</c>

00:02:45.799 --> 00:02:46.767 align:middle line:-1
<c.magenta>花语应用</c>

00:02:47.301 --> 00:02:49.837 align:middle line:-2
<c.magenta>但通过Core ML你可以实现</c>
<c.magenta>更多功能而不只是图片</c>

00:02:50.637 --> 00:02:52.139 align:middle line:-1
<c.magenta>你可以处理手势</c>

00:02:52.472 --> 00:02:54.641 align:middle line:-1
<c.magenta>比如说手表上的手写检测</c>

00:02:55.776 --> 00:02:56.877 align:middle line:-1
<c.magenta>你还可以处理视频</c>

00:02:56.977 --> 00:02:58.745 align:middle line:-1
<c.magenta>比如说你想实现信用卡检测</c>

00:02:59.880 --> 00:03:04.084 align:middle line:-1
<c.magenta>你可以处理音频并且甚至可以处理文本</c>

00:02:59.880 --> 00:03:04.084 align:middle line:-1
<c.magenta>你可以处理音频并且甚至可以处理文本</c>

00:03:05.352 --> 00:03:08.155 align:middle line:-1
<c.magenta>现在通过输入全部这些不同的类型</c>

00:03:08.488 --> 00:03:10.891 align:middle line:-1
<c.magenta>你可以创建各种各样的应用</c>

00:03:12.292 --> 00:03:15.462 align:middle line:-2
<c.magenta>比如你想创建一个应用</c>
<c.magenta>当你键入某些文本时</c>

00:03:15.796 --> 00:03:18.665 align:middle line:-2
<c.magenta>它会告诉你是令人高兴的文本</c>
<c.magenta>还是令人沮丧的文本</c>

00:03:18.765 --> 00:03:21.168 align:middle line:-2
<c.magenta>或者消极的有侵略性的文本</c>
<c.magenta>或令人愤怒的文本</c>

00:03:22.202 --> 00:03:25.739 align:middle line:-2
<c.magenta>你可以通过情感分析来实现</c>
<c.magenta>我们今天要看一个这样的小演示</c>

00:03:27.708 --> 00:03:30.844 align:middle line:-2
<c.magenta>你可以…通过风格转换</c>
<c.magenta>你甚至可以让你的家庭照片</c>

00:03:30.911 --> 00:03:32.546 align:middle line:-1
<c.magenta>看起来像是Vincent Van Gogh的油画</c>

00:03:34.081 --> 00:03:35.516 align:middle line:-1
<c.magenta>而通过手势识别</c>

00:03:35.616 --> 00:03:38.752 align:middle line:-2
<c.magenta>你可以有一种全新的方式</c>
<c.magenta>把数据输入到你的应用中</c>

00:03:39.620 --> 00:03:42.256 align:middle line:-1
<c.magenta>现在这些都是可以实现的</c>

00:03:42.689 --> 00:03:46.560 align:middle line:-2
<c.magenta>因为你可以通过Core ML</c>
<c.magenta>使用大量的模型</c>

00:03:47.661 --> 00:03:49.630 align:middle line:-1
<c.magenta>你可以使用经典的机器学习模型</c>

00:03:49.696 --> 00:03:53.200 align:middle line:-1
<c.magenta>比如广义线性模型、树和支持向量机</c>

00:03:53.901 --> 00:03:57.037 align:middle line:-1
<c.magenta>这些都很棒 因为它们很小</c>

00:03:57.204 --> 00:04:00.174 align:middle line:-2
<c.magenta>你可以通过它们进行快速预测</c>
<c.magenta>并且它们可以在任何设备上运行</c>

00:03:57.204 --> 00:04:00.174 align:middle line:-2
<c.magenta>你可以通过它们进行快速预测</c>
<c.magenta>并且它们可以在任何设备上运行</c>

00:04:00.941 --> 00:04:05.012 align:middle line:-1
<c.magenta>但你还可以处理各种神经网络</c>

00:04:05.579 --> 00:04:07.948 align:middle line:-1
<c.magenta>我们支持30多种层类型</c>

00:04:08.015 --> 00:04:09.283 align:middle line:-1
<c.magenta>这已经是很多了</c>

00:04:09.983 --> 00:04:12.886 align:middle line:-2
<c.magenta>你可以做很多事</c>
<c.magenta>比如正反馈和卷积线性网络</c>

00:04:12.953 --> 00:04:15.455 align:middle line:-1
<c.magenta>图片和基于视频的应用都可以实现</c>

00:04:15.956 --> 00:04:18.257 align:middle line:-1
<c.magenta>并且你还可以做比如说循环神经网络</c>

00:04:18.325 --> 00:04:21.094 align:middle line:-2
<c.magenta>或LSDM</c>
<c.magenta>基于文本的应用都可以实现</c>

00:04:22.029 --> 00:04:24.264 align:middle line:-1
<c.magenta>我们要看一下循环神经网络</c>

00:04:24.331 --> 00:04:26.066 align:middle line:-1
<c.magenta>在今天的演讲中</c>

00:04:27.835 --> 00:04:31.905 align:middle line:-2
<c.magenta>事实上通过Core ML</c>
<c.magenta>你还可以结合不同类型的模型</c>

00:04:32.239 --> 00:04:34.441 align:middle line:-1
<c.magenta>那么你可以利用比如神经网络</c>

00:04:34.508 --> 00:04:38.278 align:middle line:-2
<c.magenta>并把它与树结合在一起</c>
<c.magenta>然后你可以得到一个大模型</c>

00:04:38.612 --> 00:04:40.380 align:middle line:-1
<c.magenta>这个概念就叫作管道</c>

00:04:42.649 --> 00:04:45.452 align:middle line:0
<c.magenta>但最重要的是 对于你们开发人员</c>

00:04:45.552 --> 00:04:48.488 align:middle line:0
<c.magenta>我们希望你们注重</c>
<c.magenta>你们写进应用中的代码</c>

00:04:48.622 --> 00:04:51.925 align:middle line:0
<c.magenta>而不是应用所运行的模型的复杂程度</c>

00:04:54.294 --> 00:04:58.232 align:middle line:-2
<c.magenta>我们通过为你们提供</c>
<c.magenta>功能性抽象化查看器模型实现</c>

00:04:58.799 --> 00:05:02.202 align:middle line:-2
<c.magenta>所以你们需要关注的是</c>
<c.magenta>你的模型有预测功能</c>

00:04:58.799 --> 00:05:02.202 align:middle line:-2
<c.magenta>所以你们需要关注的是</c>
<c.magenta>你的模型有预测功能</c>

00:05:02.269 --> 00:05:05.272 align:middle line:-1
<c.magenta>获取一些输入并给出一些输出</c>

00:05:06.507 --> 00:05:09.710 align:middle line:-1
<c.magenta>并且这些输入和输出有五种不同类型：</c>

00:05:10.410 --> 00:05:16.149 align:middle line:-2
<c.magenta>数值型、分类型、图片型、</c>
<c.magenta>数组型和词典型</c>

00:05:17.484 --> 00:05:20.954 align:middle line:-1
<c.magenta>现在让我们分别看一下每种类型</c>

00:05:22.489 --> 00:05:25.559 align:middle line:-1
<c.magenta>那么数值型和分类型在Swift中有</c>

00:05:25.759 --> 00:05:28.095 align:middle line:-1
<c.magenta>双精度浮点型、整型或字符串型</c>

00:05:28.295 --> 00:05:29.296 align:middle line:-1
<c.magenta>所以它很自然</c>

00:05:30.030 --> 00:05:32.399 align:middle line:-1
<c.magenta>我们有一个小应用示例</c>

00:05:32.466 --> 00:05:35.135 align:middle line:-2
<c.magenta>用了这两种类型</c>
<c.magenta>在developer.apple.com上</c>

00:05:35.569 --> 00:05:38.205 align:middle line:-1
<c.magenta>那是一个预测房屋价格的应用</c>

00:05:39.006 --> 00:05:41.542 align:middle line:-1
<c.magenta>所以这个模型的某些输入是数值型</c>

00:05:41.675 --> 00:05:44.711 align:middle line:-2
<c.magenta>就是指明它们是连续的</c>
<c.magenta>所以你可以从零到无限大</c>

00:05:45.612 --> 00:05:48.515 align:middle line:-1
<c.magenta>而某些是分类型或不连续型</c>

00:05:48.749 --> 00:05:50.884 align:middle line:-1
<c.magenta>所以是0、1、2、3、4</c>

00:05:53.153 --> 00:05:55.589 align:middle line:-1
<c.magenta>我们已经看过了一个使用图片的示例了</c>

00:05:55.956 --> 00:05:59.026 align:middle line:-2
<c.magenta>现在这些图片是作为CVPixelBuffers</c>
<c.magenta>展示给你的</c>

00:06:01.328 --> 00:06:04.264 align:middle line:-2
<c.magenta>要获取更复杂的功能</c>
<c.magenta>比如手势、音频和视频</c>

00:06:04.331 --> 00:06:10.270 align:middle line:-2
<c.magenta>我们有一个新类型 叫作MLMultiArray</c>
<c.magenta>可以封装一个多维数组</c>

00:06:11.805 --> 00:06:14.241 align:middle line:-1
<c.magenta>对于大量基于文本的应用</c>

00:06:14.474 --> 00:06:16.143 align:middle line:-1
<c.magenta>你可以通过词典进行交互</c>

00:06:16.877 --> 00:06:17.711 align:middle line:-1
<c.magenta>这是词典</c>

00:06:17.778 --> 00:06:21.615 align:middle line:-2
<c.magenta>键是字符串型或整型</c>
<c.magenta>而值是双精度浮点型</c>

00:06:23.383 --> 00:06:26.787 align:middle line:-2
<c.magenta>让我们看看输入文本</c>
<c.magenta>并通过词典起作用的功能</c>

00:06:28.956 --> 00:06:32.960 align:middle line:-1
<c.magenta>我们要通过一个情感分析应用来看</c>

00:06:33.894 --> 00:06:36.330 align:middle line:-2
<c.magenta>现在我想让这个应用</c>
<c.magenta>实现当我键入文本时</c>

00:06:36.396 --> 00:06:39.600 align:middle line:-1
<c.magenta>我希望UI弹出并反映我现在的情绪</c>

00:06:40.033 --> 00:06:42.936 align:middle line:-2
<c.magenta>如果我说“Core ML真棒！</c>
<c.magenta>我喜欢用它！”</c>

00:06:43.136 --> 00:06:45.572 align:middle line:-2
<c.magenta>我希望它变成绿色且我想要一个</c>
<c.magenta>比如 一个笑脸</c>

00:06:46.473 --> 00:06:50.143 align:middle line:-1
<c.magenta>如果我跟你说比如午餐是如何糟糕</c>

00:06:50.277 --> 00:06:51.912 align:middle line:-1
<c.magenta>“今天午餐真令人失望和伤心”</c>

00:06:51.979 --> 00:06:54.648 align:middle line:-2
<c.magenta>我希望它变成红色</c>
<c.magenta>所以这是我希望它能实现的功能</c>

00:06:55.916 --> 00:06:59.186 align:middle line:-1
<c.magenta>那么需要如何创建一个这样的应用呢？</c>

00:06:59.520 --> 00:07:03.223 align:middle line:-2
<c.magenta>那么我要从应用shell开始</c>
<c.magenta>用户可以键入一些文本</c>

00:06:59.520 --> 00:07:03.223 align:middle line:-2
<c.magenta>那么我要从应用shell开始</c>
<c.magenta>用户可以键入一些文本</c>

00:07:04.691 --> 00:07:08.462 align:middle line:-2
<c.magenta>一旦用户点击空格键</c>
<c.magenta>它就会获取那些文本</c>

00:07:08.996 --> 00:07:12.566 align:middle line:-2
<c.magenta>把它提交给机器学习模型</c>
<c.magenta>并返回一个情感预测</c>

00:07:13.600 --> 00:07:14.635 align:middle line:-1
<c.magenta>那么情感预测</c>

00:07:14.701 --> 00:07:17.538 align:middle line:-1
<c.magenta>可以是高兴、中性或伤心</c>

00:07:18.739 --> 00:07:20.340 align:middle line:-1
<c.magenta>一旦我得到这个预测</c>

00:07:20.474 --> 00:07:23.243 align:middle line:-1
<c.magenta>我就返回并快速更新UI</c>

00:07:23.377 --> 00:07:24.578 align:middle line:-1
<c.magenta>以反映我现在的情绪</c>

00:07:25.612 --> 00:07:27.481 align:middle line:-1
<c.magenta>但你需要注意一个最重要的事</c>

00:07:27.614 --> 00:07:32.019 align:middle line:-2
<c.magenta>就是这些全部会在设备上实时发生</c>
<c.magenta>当用户正在键入时</c>

00:07:32.352 --> 00:07:34.154 align:middle line:-1
<c.magenta>所以它打造了一个很棒的体验</c>

00:07:36.056 --> 00:07:38.492 align:middle line:-1
<c.magenta>让我们看看如何着手创建那个应用</c>

00:07:39.326 --> 00:07:41.461 align:middle line:-1
<c.magenta>嗯 最重要的东西就是模型</c>

00:07:42.196 --> 00:07:44.665 align:middle line:-2
<c.magenta>对于这个应用</c>
<c.magenta>我们要使用一个情感分析模型</c>

00:07:45.399 --> 00:07:48.969 align:middle line:-1
<c.magenta>但这个情感分析模型要根据字数来操作</c>

00:07:49.236 --> 00:07:51.205 align:middle line:-1
<c.magenta>不是原始文本 而是字数统计</c>

00:07:52.072 --> 00:07:54.942 align:middle line:-1
<c.magenta>那么这些字数将被呈现为词典</c>

00:07:55.876 --> 00:07:57.611 align:middle line:-1
<c.magenta>键就是字</c>

00:07:57.845 --> 00:08:01.014 align:middle line:-1
<c.magenta>而值就是那个字在句子中的出现次数</c>

00:07:57.845 --> 00:08:01.014 align:middle line:-1
<c.magenta>而值就是那个字在句子中的出现次数</c>

00:08:01.882 --> 00:08:04.218 align:middle line:-1
<c.magenta>“Core ML很棒 我很喜欢用”</c>

00:08:04.284 --> 00:08:06.587 align:middle line:-2
<c.magenta>将会被翻译到词典中</c>
<c.magenta>看起来应该是这样的</c>

00:08:07.821 --> 00:08:09.256 align:middle line:-1
<c.magenta>一旦我获取到了字数统计</c>

00:08:09.389 --> 00:08:11.792 align:middle line:-1
<c.magenta>我就可以把它传到我的情感分析模型中</c>

00:08:12.292 --> 00:08:13.560 align:middle line:-1
<c.magenta>然后就会得到一个预测</c>

00:08:13.961 --> 00:08:15.095 align:middle line:-1
<c.magenta>在本例中是“高兴”</c>

00:08:16.563 --> 00:08:19.900 align:middle line:-2
<c.magenta>但你可能会想 “好吧 我该如何</c>
<c.magenta>把原始文本转成字数统计呢？”</c>

00:08:20.501 --> 00:08:23.136 align:middle line:-1
<c.magenta>嗯 你可能已经看了NLP的演讲</c>

00:08:23.403 --> 00:08:27.641 align:middle line:-2
<c.magenta>但你可以使用NSLinguisticTagger中</c>
<c.magenta>现有的工具</c>

00:08:27.774 --> 00:08:29.843 align:middle line:-1
<c.magenta>来标记字符串并统计字数</c>

00:08:30.210 --> 00:08:35.249 align:middle line:0
<c.magenta>我要使用NLP来预处理我的文本</c>
<c.magenta>尤其是NSLinguisticTagger</c>

00:08:35.883 --> 00:08:37.518 align:middle line:0
<c.magenta>然后我要获取字数统计</c>

00:08:37.951 --> 00:08:40.821 align:middle line:0
<c.magenta>然后我就传给模型 并获取预测</c>

00:08:41.822 --> 00:08:44.458 align:middle line:-1
<c.magenta>然后你就可以创建一个像这样的应用了</c>

00:08:44.758 --> 00:08:47.194 align:middle line:-2
<c.magenta>但让我们不只是说说而已</c>
<c.magenta>让我们实际来做一下</c>

00:08:48.362 --> 00:08:52.466 align:middle line:-1
<c.magenta>我要打开Xcode</c>

00:08:57.337 --> 00:09:00.174 align:middle line:-1
<c.magenta>我这里有Xcode和一个模拟器</c>

00:08:57.337 --> 00:09:00.174 align:middle line:-1
<c.magenta>我这里有Xcode和一个模拟器</c>

00:09:00.741 --> 00:09:02.743 align:middle line:-1
<c.magenta>模拟器现在正在运行应用shell</c>

00:09:03.143 --> 00:09:04.711 align:middle line:-1
<c.magenta>应用shell并没有包含模型</c>

00:09:04.778 --> 00:09:11.185 align:middle line:-2
<c.magenta>所以如果我键入某些文本 比如</c>
<c.magenta>“Core ML很棒很有趣”</c>

00:09:11.552 --> 00:09:13.253 align:middle line:-1
<c.magenta>那么UI不会有任何事情发生</c>

00:09:13.820 --> 00:09:16.356 align:middle line:-1
<c.magenta>我们现在要做的就是继续</c>

00:09:16.423 --> 00:09:18.492 align:middle line:-1
<c.magenta>并在这里整合机器学习模型</c>

00:09:18.759 --> 00:09:21.228 align:middle line:-1
<c.magenta>从而使应用变得更有活力</c>

00:09:23.230 --> 00:09:26.466 align:middle line:-2
<c.magenta>那么我要做的第一件事就是</c>
<c.magenta>打开Finder</c>

00:09:27.234 --> 00:09:30.337 align:middle line:-1
<c.magenta>并把情感分析模型拖到Xcode中</c>

00:09:32.639 --> 00:09:34.541 align:middle line:-1
<c.magenta>让我们看看这是个什么模型</c>

00:09:36.743 --> 00:09:39.479 align:middle line:-2
<c.magenta>那么正如你所看到的</c>
<c.magenta>这是一个情感分析模型</c>

00:09:40.214 --> 00:09:42.516 align:middle line:-1
<c.magenta>这个模型的类型是管道分类器</c>

00:09:42.683 --> 00:09:45.519 align:middle line:-2
<c.magenta>那么它在提供最终预测之前</c>
<c.magenta>会做一些不同的操作</c>

00:09:46.687 --> 00:09:50.023 align:middle line:-1
<c.magenta>它只有167KB 所以很小</c>

00:09:51.325 --> 00:09:54.294 align:middle line:-1
<c.magenta>这个模型的输入是字数统计</c>

00:09:54.494 --> 00:09:56.363 align:middle line:-1
<c.magenta>字数统计是词典…</c>

00:09:57.998 --> 00:10:01.235 align:middle line:-1
<c.magenta>…键是字 值是那个字出现的次数</c>

00:09:57.998 --> 00:10:01.235 align:middle line:-1
<c.magenta>…键是字 值是那个字出现的次数</c>

00:10:01.902 --> 00:10:03.637 align:middle line:-1
<c.magenta>我从这个模型中可以获得两种输出</c>

00:10:04.004 --> 00:10:06.440 align:middle line:-1
<c.magenta>一个是情感标签 包括两个东西</c>

00:10:06.640 --> 00:10:08.809 align:middle line:-1
<c.magenta>要么是好 要么是坏</c>

00:10:09.343 --> 00:10:12.446 align:middle line:-1
<c.magenta>还有一个情感得分 很可能</c>

00:10:12.579 --> 00:10:15.716 align:middle line:-1
<c.magenta>与好情绪或坏情绪相关联</c>

00:10:16.750 --> 00:10:17.818 align:middle line:-1
<c.magenta>所以这是个预测</c>

00:10:18.385 --> 00:10:20.187 align:middle line:-1
<c.magenta>那么我要在这个应用中使用的是</c>

00:10:20.254 --> 00:10:24.958 align:middle line:-1
<c.magenta>我要用情感得分来决定 范围从0到1</c>

00:10:25.092 --> 00:10:26.360 align:middle line:-1
<c.magenta>这个文本所表达的内容有多积极</c>

00:10:26.493 --> 00:10:29.062 align:middle line:-1
<c.magenta>并且根据这个来更新我的UI</c>

00:10:31.031 --> 00:10:35.435 align:middle line:-2
<c.magenta>那么让我继续 把这个模型</c>
<c.magenta>包含到我应用的目标中</c>

00:10:36.703 --> 00:10:40.073 align:middle line:-2
<c.magenta>然后Xcode将会自动生成一个</c>
<c.magenta>很漂亮的界面</c>

00:10:40.607 --> 00:10:44.478 align:middle line:-2
<c.magenta>我可以返回到ViewController</c>
<c.magenta>并且现在我要实施逻辑</c>

00:10:44.878 --> 00:10:47.014 align:middle line:-1
<c.magenta>以整合这个机器学习模型</c>

00:10:47.581 --> 00:10:49.716 align:middle line:-1
<c.magenta>接下来我要实施这个函数</c>

00:10:49.883 --> 00:10:51.952 align:middle line:-1
<c.magenta>predictSentimentScoreFromRawText</c>

00:10:52.252 --> 00:10:54.421 align:middle line:-1
<c.magenta>这个函数会获取文本</c>

00:10:54.488 --> 00:10:55.822 align:middle line:-1
<c.magenta>就是整个字符串</c>

00:10:56.523 --> 00:10:59.059 align:middle line:-1
<c.magenta>每次用户键入空格时都会调用它</c>

00:10:59.526 --> 00:11:02.796 align:middle line:-2
<c.magenta>并且它返回的是一个</c>
<c.magenta>介于0和1之间的双精度浮点值</c>

00:10:59.526 --> 00:11:02.796 align:middle line:-2
<c.magenta>并且它返回的是一个</c>
<c.magenta>介于0和1之间的双精度浮点值</c>

00:11:02.863 --> 00:11:06.033 align:middle line:-2
<c.magenta>0代表非常非常伤心</c>
<c.magenta>1代表非常非常开心</c>

00:11:07.901 --> 00:11:10.637 align:middle line:-2
<c.magenta>那么我要做的第一件事就是</c>
<c.magenta>实例化这个模型</c>

00:11:10.704 --> 00:11:14.274 align:middle line:-2
<c.magenta>我可以很简单地实现</c>
<c.magenta>通过let model = SentimentAnalysis</c>

00:11:15.809 --> 00:11:19.680 align:middle line:-2
<c.magenta>然后我要进行预测</c>
<c.magenta>使用这个模型做出这种预测</c>

00:11:19.980 --> 00:11:22.049 align:middle line:-2
<c.magenta>但正如你所看到的</c>
<c.magenta>这里输入的是一个句子</c>

00:11:22.249 --> 00:11:24.184 align:middle line:-1
<c.magenta>但我真正想要的是字数统计</c>

00:11:24.985 --> 00:11:28.222 align:middle line:-2
<c.magenta>我已经实施了这个</c>
<c.magenta>叫作tokenizeAndCountWords的函数</c>

00:11:28.555 --> 00:11:31.592 align:middle line:-2
<c.magenta>这个函数使用NSLinguisticTagger</c>
<c.magenta>来标记句子中的字符串</c>

00:11:31.658 --> 00:11:34.461 align:middle line:-1
<c.magenta>然后计算那个句子中的令牌个数</c>

00:11:34.628 --> 00:11:35.796 align:middle line:-1
<c.magenta>我要跳过这个过程</c>

00:11:37.531 --> 00:11:38.866 align:middle line:-1
<c.magenta>我只需要调用那个函数即可</c>

00:11:38.932 --> 00:11:40.901 align:middle line:-1
<c.magenta>我要指明let wordCounts</c>

00:11:40.968 --> 00:11:43.770 align:middle line:-1
<c.magenta>= tokenizeAndCountWords (sentence)</c>

00:11:44.905 --> 00:11:47.908 align:middle line:-2
<c.magenta>然后我要使用这个字数统计</c>
<c.magenta>并提供给我的模型</c>

00:11:48.642 --> 00:11:54.314 align:middle line:-2
<c.magenta>那么我要指明if let prediction =</c>
<c.magenta>try model.prediction (wordCounts)</c>

00:11:54.748 --> 00:11:56.650 align:middle line:-1
<c.magenta>并简便地把wordCount传到那儿</c>

00:11:57.451 --> 00:12:00.487 align:middle line:-1
<c.magenta>如果成功了 我就要使用预测对象</c>

00:11:57.451 --> 00:12:00.487 align:middle line:-1
<c.magenta>如果成功了 我就要使用预测对象</c>

00:12:01.188 --> 00:12:02.856 align:middle line:-1
<c.magenta>来获取情感得分</c>

00:12:03.090 --> 00:12:05.025 align:middle line:-1
<c.magenta>因为我想要一个0到1之间的值</c>

00:12:05.092 --> 00:12:06.793 align:middle line:-1
<c.magenta>我要获取得分而不是标签</c>

00:12:07.160 --> 00:12:10.063 align:middle line:-2
<c.magenta>那么我要获取与情绪“良好”</c>
<c.magenta>相关联的情感得分</c>

00:12:10.464 --> 00:12:11.899 align:middle line:-1
<c.magenta>并将其返回到我的UI</c>

00:12:12.466 --> 00:12:15.502 align:middle line:-2
<c.magenta>如果失败 万一失败</c>
<c.magenta>得分就会小于0.5</c>

00:12:15.636 --> 00:12:17.404 align:middle line:-1
<c.magenta>这里的处理就发生了错误</c>

00:12:19.840 --> 00:12:22.042 align:middle line:-1
<c.magenta>我要继续并创建那个应用</c>

00:12:22.342 --> 00:12:24.545 align:middle line:0
<c.magenta>在此过程中 你可能会意识到</c>

00:12:24.611 --> 00:12:27.214 align:middle line:-1
<c.magenta>模型和代码都是打包的</c>

00:12:27.314 --> 00:12:29.249 align:middle line:-1
<c.magenta>只是搬到设备上来</c>

00:12:29.783 --> 00:12:32.719 align:middle line:-1
<c.magenta>另一件需要注意的就是编译器</c>

00:12:32.786 --> 00:12:36.390 align:middle line:-2
<c.magenta>Core ML编译器是作为Xcode</c>
<c.magenta>池链的一部分被搬过来的</c>

00:12:36.557 --> 00:12:39.426 align:middle line:-2
<c.magenta>随意如果你想自己编译</c>
<c.magenta>或自己运行代码生成器</c>

00:12:39.526 --> 00:12:41.195 align:middle line:-1
<c.magenta>你可以直接使用编译器</c>

00:12:42.930 --> 00:12:46.066 align:middle line:-2
<c.magenta>那么现在让我们使用这个应用</c>
<c.magenta>让我们先试试积极的文本</c>

00:12:46.700 --> 00:12:49.636 align:middle line:-1
<c.magenta>让我们键入“Core ML很有趣”</c>

00:12:49.703 --> 00:12:50.571 align:middle line:-1
<c.magenta>这是我要输入的内容</c>

00:12:51.205 --> 00:12:54.575 align:middle line:-1
<c.magenta>“Core ML很有趣 我喜欢用”</c>

00:12:55.542 --> 00:12:58.111 align:middle line:-2
<c.magenta>那么你立即看到UI弹出</c>
<c.magenta>我得到了绿色</c>

00:12:58.178 --> 00:13:00.280 align:middle line:-1
<c.magenta>我很开心 并且你知道的 这很棒</c>

00:12:58.178 --> 00:13:00.280 align:middle line:-1
<c.magenta>我很开心 并且你知道的 这很棒</c>

00:13:04.218 --> 00:13:06.053 align:middle line:-1
<c.magenta>但现在我想键入一些消极的内容</c>

00:13:06.119 --> 00:13:08.455 align:middle line:-2
<c.magenta>但我其实不想对任何东西</c>
<c.magenta>或任何人开玩笑</c>

00:13:08.522 --> 00:13:11.358 align:middle line:-2
<c.magenta>我要谈谈如果没有CoreML</c>
<c.magenta>我的生活会如何糟糕</c>

00:13:12.526 --> 00:13:15.462 align:middle line:-1
<c.magenta>“没有CoreML的生活很慵懒、</c>

00:13:16.496 --> 00:13:20.334 align:middle line:-1
<c.magenta>很糟糕、令人伤心”</c>

00:13:20.801 --> 00:13:23.437 align:middle line:-2
<c.magenta>那么很明显 UI表示现在很伤心</c>
<c.magenta>因为你知道的</c>

00:13:23.504 --> 00:13:25.339 align:middle line:-2
<c.magenta>没有Core ML的生活</c>
<c.magenta>令人非常伤心</c>

00:13:26.039 --> 00:13:27.140 align:middle line:-1
<c.magenta>那么我们其实看到的</c>

00:13:27.207 --> 00:13:31.278 align:middle line:-2
<c.magenta>是一个NLP和Core ML</c>
<c.magenta>的无缝整合</c>

00:13:31.545 --> 00:13:33.313 align:middle line:-1
<c.magenta>那么我创建了这个情感分析模型</c>

00:13:33.380 --> 00:13:36.517 align:middle line:-1
<c.magenta>并能使我的应用更有活力</c>

00:13:36.617 --> 00:13:40.787 align:middle line:-2
<c.magenta>这全都是实时发生的</c>
<c.magenta>当用户在设备上键入文本时</c>

00:13:41.955 --> 00:13:42.990 align:middle line:-1
<c.magenta>非常酷</c>

00:13:46.193 --> 00:13:49.897 align:middle line:-2
<c.magenta>让我们回顾一下这个演示中的</c>
<c.magenta>两个主要的东西</c>

00:13:50.430 --> 00:13:53.233 align:middle line:0
<c.magenta>首先是预处理文本</c>

00:13:53.400 --> 00:13:55.135 align:middle line:0
<c.magenta>我们使用了NSLinguisticTagger</c>

00:13:56.670 --> 00:13:59.706 align:middle line:0
<c.magenta>第二个是一旦我获得这些字数统计</c>

00:13:59.840 --> 00:14:02.543 align:middle line:0
<c.magenta>我就可以把它提供给模型</c>
<c.magenta>并获得一个预测</c>

00:13:59.840 --> 00:14:02.543 align:middle line:0
<c.magenta>我就可以把它提供给模型</c>
<c.magenta>并获得一个预测</c>

00:14:03.844 --> 00:14:06.513 align:middle line:0
<c.magenta>这种模式你会</c>

00:14:06.613 --> 00:14:08.148 align:middle line:-1
<c.magenta>在基于文本的应用中多次遇到</c>

00:14:08.448 --> 00:14:13.287 align:middle line:-2
<c.magenta>因为绝大部分文本空间应用</c>
<c.magenta>都不能直接读取原始文本</c>

00:14:13.654 --> 00:14:16.456 align:middle line:-1
<c.magenta>总是不得不需要</c>

00:14:16.523 --> 00:14:17.558 align:middle line:-1
<c.magenta>一点预处理</c>

00:14:19.493 --> 00:14:22.563 align:middle line:-2
<c.magenta>但是那真的是个简单的例子</c>
<c.magenta>它只是用于介绍的例子</c>

00:14:22.963 --> 00:14:25.032 align:middle line:-1
<c.magenta>让我们继续讲 进入下一个层级</c>

00:14:25.666 --> 00:14:26.667 align:middle line:-1
<c.magenta>让我们谈谈</c>

00:14:26.733 --> 00:14:29.303 align:middle line:-1
<c.magenta>你每天都能与之交互的东西</c>

00:14:29.903 --> 00:14:31.638 align:middle line:-1
<c.magenta>就是Apple键盘</c>

00:14:32.506 --> 00:14:34.741 align:middle line:-1
<c.magenta>现当你在Apple键盘中键入文本时</c>

00:14:34.908 --> 00:14:36.076 align:middle line:-1
<c.magenta>你们可能都意识到了</c>

00:14:36.176 --> 00:14:38.178 align:middle line:-1
<c.magenta>你会获得一个非常情境化的预测</c>

00:14:38.345 --> 00:14:40.848 align:middle line:-1
<c.magenta>关于你下一个即将要输入的最可能的词</c>

00:14:41.415 --> 00:14:46.353 align:middle line:-2
<c.magenta>那么如果我说“我不确定奥利弗</c>
<c.magenta>是否吃牡蛎 但他会”</c>

00:14:46.653 --> 00:14:48.956 align:middle line:-2
<c.magenta>键盘会告诉你“那么”、“完全地”</c>
<c.magenta>和“喜欢”</c>

00:14:49.022 --> 00:14:51.558 align:middle line:-1
<c.magenta>这三个你接下来很可能要键入的词</c>

00:14:53.160 --> 00:14:56.430 align:middle line:-1
<c.magenta>如何创建像这样复杂的东西呢？</c>

00:14:57.264 --> 00:14:58.932 align:middle line:-1
<c.magenta>这是一个预测性键盘</c>

00:14:59.700 --> 00:15:04.471 align:middle line:-1
<c.magenta>这里的机器学习任务是预测下一个词</c>

00:14:59.700 --> 00:15:04.471 align:middle line:-1
<c.magenta>这里的机器学习任务是预测下一个词</c>

00:15:06.139 --> 00:15:07.641 align:middle line:-1
<c.magenta>这里所使用的模型</c>

00:15:07.774 --> 00:15:10.310 align:middle line:-1
<c.magenta>或像这样的应用所要使用的模型</c>

00:15:10.611 --> 00:15:14.248 align:middle line:-1
<c.magenta>其实是一个可以读取一系列词的模型</c>

00:15:14.381 --> 00:15:17.518 align:middle line:-2
<c.magenta>“我不确定奥利弗是否吃牡蛎</c>
<c.magenta>但他会”</c>

00:15:17.584 --> 00:15:18.886 align:middle line:-1
<c.magenta>是一系列的词</c>

00:15:19.286 --> 00:15:22.122 align:middle line:-2
<c.magenta>我把这个句子作为模型的输入</c>
<c.magenta>并获取一个预测</c>

00:15:23.490 --> 00:15:24.324 align:middle line:-1
<c.magenta>那么你可能在想</c>

00:15:24.391 --> 00:15:27.728 align:middle line:-2
<c.magenta>“好吧 那这个模型</c>
<c.magenta>与我们刚看到的那个</c>

00:15:27.794 --> 00:15:30.564 align:middle line:-2
<c.magenta>情感分析模型有什么不一样呢？</c>
<c.magenta>它们看起来是一样的”</c>

00:15:31.498 --> 00:15:36.403 align:middle line:-2
<c.magenta>主要不同点是在这里</c>
<c.magenta>输入的是一系列的词</c>

00:15:36.870 --> 00:15:39.506 align:middle line:-1
<c.magenta>那么如果你把这些词打乱并提供给模型</c>

00:15:39.773 --> 00:15:41.842 align:middle line:-1
<c.magenta>你将会得到一个完全不同的预测</c>

00:15:43.544 --> 00:15:46.380 align:middle line:-2
<c.magenta>要实现这样的功能</c>
<c.magenta>绝大部分机器学习模型</c>

00:15:46.446 --> 00:15:49.316 align:middle line:-1
<c.magenta>都有一个与之相关联的状态的概念</c>

00:15:49.917 --> 00:15:51.552 align:middle line:-1
<c.magenta>这是它们获得此性能的方式</c>

00:15:52.152 --> 00:15:55.822 align:middle line:-1
<c.magenta>做出每个预测时会传递一个状态</c>

00:15:56.256 --> 00:15:58.492 align:middle line:-1
<c.magenta>那么这就像是接力赛中的接力棒一样</c>

00:15:58.625 --> 00:16:00.894 align:middle line:-2
<c.magenta>每次你做出预测时</c>
<c.magenta>都要读取状态并传递它</c>

00:15:58.625 --> 00:16:00.894 align:middle line:-2
<c.magenta>每次你做出预测时</c>
<c.magenta>都要读取状态并传递它</c>

00:16:03.063 --> 00:16:06.667 align:middle line:-2
<c.magenta>我们通常使用LSDM</c>
<c.magenta>来实现这样的功能</c>

00:16:06.967 --> 00:16:09.269 align:middle line:-1
<c.magenta>尤其像[听不清]网络</c>

00:16:09.703 --> 00:16:12.139 align:middle line:-2
<c.magenta>但通过Core ML</c>
<c.magenta>这些都会变得异常简单</c>

00:16:12.606 --> 00:16:14.208 align:middle line:-1
<c.magenta>那么让我们看看你要做什么</c>

00:16:15.375 --> 00:16:17.411 align:middle line:-1
<c.magenta>但我们会用一个更有趣的应用来实现</c>

00:16:17.744 --> 00:16:19.246 align:middle line:-1
<c.magenta>我们要用莎士比亚键盘来实现</c>

00:16:19.780 --> 00:16:21.348 align:middle line:-1
<c.magenta>那么这不是一个常规的键盘</c>

00:16:21.582 --> 00:16:23.584 align:middle line:-2
<c.magenta>这个键盘会让我输入的文本</c>
<c.magenta>变得像是莎士比亚的话一样</c>

00:16:24.184 --> 00:16:27.387 align:middle line:-2
<c.magenta>如果我说“我是否应该对比”</c>
<c.magenta>它应该会指明</c>

00:16:27.454 --> 00:16:30.190 align:middle line:-2
<c.magenta>“尔”、“夏”、“天”是我接下来</c>
<c.magenta>很可能要输入的三个词</c>

00:16:32.025 --> 00:16:33.527 align:middle line:-1
<c.magenta>那么</c>

00:16:33.594 --> 00:16:36.530 align:middle line:-2
<c.magenta>莎士比亚键盘和常规键盘之间</c>
<c.magenta>到底有什么区别呢？</c>

00:16:36.763 --> 00:16:39.967 align:middle line:-1
<c.magenta>其实是模型在预测下一个词</c>

00:16:40.501 --> 00:16:43.737 align:middle line:-2
<c.magenta>那么其中一个模型</c>
<c.magenta>被训练读取莎士比亚数据</c>

00:16:44.137 --> 00:16:47.140 align:middle line:-1
<c.magenta>而另一个被训练读取常规的英文数据</c>

00:16:47.941 --> 00:16:49.743 align:middle line:-1
<c.magenta>那么这个概念就是语言模型</c>

00:16:50.577 --> 00:16:52.980 align:middle line:-1
<c.magenta>那么我刚跟你们提到了许多新概念</c>

00:16:53.046 --> 00:16:56.383 align:middle line:-2
<c.magenta>语言模型、序列、LSDM</c>
<c.magenta>但你不要担心</c>

00:16:56.483 --> 00:16:58.385 align:middle line:-2
<c.magenta>通过Core ML</c>
<c.magenta>这些应该简单多了</c>

00:16:58.785 --> 00:17:00.387 align:middle line:-1
<c.magenta>让我们看看你如何实现像这样的功能</c>

00:16:58.785 --> 00:17:00.387 align:middle line:-1
<c.magenta>让我们看看你如何实现像这样的功能</c>

00:17:01.855 --> 00:17:05.492 align:middle line:-2
<c.magenta>那么我从一个模型开始</c>
<c.magenta>我要给它键入第一个词</c>

00:17:05.692 --> 00:17:07.327 align:middle line:-1
<c.magenta>在本例中比如“是否应该”</c>

00:17:08.262 --> 00:17:09.730 align:middle line:-1
<c.magenta>这是当前的词</c>

00:17:10.864 --> 00:17:13.800 align:middle line:-1
<c.magenta>我从模型中得到的是两个东西</c>

00:17:14.635 --> 00:17:16.670 align:middle line:-1
<c.magenta>下一个词的一组可选词</c>

00:17:16.869 --> 00:17:17.804 align:middle line:-1
<c.magenta>那么在本例中</c>

00:17:18.005 --> 00:17:22.376 align:middle line:-2
<c.magenta>我主要获得了与下一个词的全部</c>
<c.magenta>可选词相关联的概率</c>

00:17:23.777 --> 00:17:27.146 align:middle line:-1
<c.magenta>并且我还要获取与此预测相关联的状态</c>

00:17:28.615 --> 00:17:32.152 align:middle line:-2
<c.magenta>那么我会读取下一个词的可选词</c>
<c.magenta>并提供给用户</c>

00:17:32.953 --> 00:17:35.122 align:middle line:-1
<c.magenta>用户会从三个词中选择一个</c>

00:17:35.189 --> 00:17:36.924 align:middle line:-1
<c.magenta>或也许他们会键入自己的词</c>

00:17:37.024 --> 00:17:38.959 align:middle line:-1
<c.magenta>无论哪种方式我都能得到下一个词</c>

00:17:40.427 --> 00:17:41.528 align:middle line:-1
<c.magenta>我将使用那个下一个词</c>

00:17:41.595 --> 00:17:43.630 align:middle line:-1
<c.magenta>把它传回给模型用于下一次预测</c>

00:17:44.131 --> 00:17:45.465 align:middle line:-1
<c.magenta>并且我还要读取状态</c>

00:17:45.532 --> 00:17:47.401 align:middle line:-1
<c.magenta>并将其传回模型用于下一次预测</c>

00:17:48.402 --> 00:17:51.238 align:middle line:-2
<c.magenta>那么在稳定状态下</c>
<c.magenta>每次你都要做两件事</c>

00:17:51.638 --> 00:17:53.240 align:middle line:-1
<c.magenta>你要读取状态中的当前词</c>

00:17:53.307 --> 00:17:55.776 align:middle line:-1
<c.magenta>并把它提供给模型 然后你将会获得</c>

00:17:55.843 --> 00:17:58.345 align:middle line:-1
<c.magenta>下一个词的一组可选词以及某个状态</c>

00:17:59.246 --> 00:18:00.314 align:middle line:-1
<c.magenta>你要做的第二件事</c>

00:17:59.246 --> 00:18:00.314 align:middle line:-1
<c.magenta>你要做的第二件事</c>

00:18:00.380 --> 00:18:02.983 align:middle line:-2
<c.magenta>是把那些全部传回到模型</c>
<c.magenta>用于下一次预测</c>

00:18:03.250 --> 00:18:04.418 align:middle line:-1
<c.magenta>非常简单</c>

00:18:05.085 --> 00:18:07.454 align:middle line:-1
<c.magenta>让我们看看代码是什么样的</c>

00:18:09.189 --> 00:18:12.826 align:middle line:-2
<c.magenta>一开始我要指明let output =</c>
<c.magenta>model.prediction (input)</c>

00:18:14.294 --> 00:18:17.130 align:middle line:-1
<c.magenta>我会读取与下一个词相关联的概率</c>

00:18:17.264 --> 00:18:20.067 align:middle line:-2
<c.magenta>并且我会把它提供给一个函数</c>
<c.magenta>假设是displayTopPredictions</c>

00:18:20.133 --> 00:18:23.036 align:middle line:-2
<c.magenta>这个函数表明的是</c>
<c.magenta>选择前三个并提供给用户</c>

00:18:24.905 --> 00:18:27.241 align:middle line:-1
<c.magenta>用户选择三个词中的一个</c>

00:18:27.307 --> 00:18:28.609 align:middle line:-1
<c.magenta>或键入自己的词</c>

00:18:28.842 --> 00:18:32.079 align:middle line:-2
<c.magenta>无论哪种方式我都能从这个</c>
<c.magenta>getWordFromUser函数中获取下一个词</c>

00:18:32.479 --> 00:18:35.048 align:middle line:-2
<c.magenta>并且我会把这个词作为当前词</c>
<c.magenta>传回给输入</c>

00:18:35.382 --> 00:18:38.819 align:middle line:-1
<c.magenta>我将读取状态并把它再次传给模型</c>

00:18:39.253 --> 00:18:41.421 align:middle line:-1
<c.magenta>那么只需要几行代码</c>

00:18:41.722 --> 00:18:44.324 align:middle line:-2
<c.magenta>你就可以整合一个像LSDM一样</c>
<c.magenta>不那么复杂的模型</c>

00:18:44.458 --> 00:18:47.261 align:middle line:-1
<c.magenta>其中包括状态、语言模型、键盘</c>

00:18:47.327 --> 00:18:49.363 align:middle line:-1
<c.magenta>全部这些东西只通过几行代码就实现了</c>

00:18:49.830 --> 00:18:51.932 align:middle line:-1
<c.magenta>这就是几个不同的用例</c>

00:18:51.999 --> 00:18:53.400 align:middle line:-1
<c.magenta>还有关于文本的用例</c>

00:18:54.401 --> 00:18:56.069 align:middle line:-1
<c.magenta>让我们谈谈Core ML是如何</c>

00:18:56.170 --> 00:18:58.839 align:middle line:-1
<c.magenta>针对它所运行的硬件进行优化的</c>

00:18:58.972 --> 00:19:02.709 align:middle line:-2
<c.magenta>最重要的是当你创建应用时</c>
<c.magenta>这对于你们来说意味着什么</c>

00:18:58.972 --> 00:19:02.709 align:middle line:-2
<c.magenta>最重要的是当你创建应用时</c>
<c.magenta>这对于你们来说意味着什么</c>

00:19:04.411 --> 00:19:05.412 align:middle line:-1
<c.magenta>那么我们要通过一个</c>

00:19:05.479 --> 00:19:08.448 align:middle line:0
<c.magenta>实时对象探测的小视频</c>
<c.magenta>来激励一下我们自己</c>

00:19:09.349 --> 00:19:14.922 align:middle line:0
<c.magenta>这里有一个重点要注意 就是相机种子</c>
<c.magenta>是实时的 将会进入一个模型</c>

00:19:15.355 --> 00:19:16.957 align:middle line:0
<c.magenta>一个相对强大的模型</c>

00:19:17.057 --> 00:19:20.427 align:middle line:0
<c.magenta>你将会获得精确的预测</c>
<c.magenta>正如你所看到的 实时的</c>

00:19:21.195 --> 00:19:22.663 align:middle line:0
<c.magenta>这之所以可能实现</c>

00:19:22.963 --> 00:19:26.667 align:middle line:0
<c.magenta>是因为Core ML针对它所在运行</c>
<c.magenta>的硬件进行了超级优化</c>

00:19:27.134 --> 00:19:30.971 align:middle line:0
<c.magenta>在本例中 模型的运行大概</c>
<c.magenta>比如说是不到50毫秒</c>

00:19:34.141 --> 00:19:35.342 align:middle line:0
<c.magenta>我希望没有人会笑</c>

00:19:35.409 --> 00:19:37.845 align:middle line:0
<c.magenta>因为这个笑话早已经讲了七遍了</c>

00:19:42.382 --> 00:19:44.785 align:middle line:-2
<c.magenta>那么对于你来说</c>
<c.magenta>真正重要的是Core ML</c>

00:19:44.852 --> 00:19:47.020 align:middle line:-1
<c.magenta>是建在性能基元之上的</c>

00:19:47.287 --> 00:19:49.256 align:middle line:-1
<c.magenta>加速和MPS</c>

00:19:49.623 --> 00:19:50.524 align:middle line:-1
<c.magenta>但更重要的是</c>

00:19:50.591 --> 00:19:52.659 align:middle line:-1
<c.magenta>它完全隐藏了硬件</c>

00:19:52.726 --> 00:19:55.562 align:middle line:-1
<c.magenta>所以你不必担心它是否运行于CPU</c>

00:19:55.863 --> 00:19:56.763 align:middle line:-1
<c.magenta>或GPU上</c>

00:19:57.231 --> 00:19:58.899 align:middle line:-1
<c.magenta>那么你看到的那个演示 你可能会提问</c>

00:19:58.966 --> 00:20:01.635 align:middle line:-2
<c.magenta>“好吧 我要拐几个弯</c>
<c.magenta>才能实现那个功能？”</c>

00:19:58.966 --> 00:20:01.635 align:middle line:-2
<c.magenta>“好吧 我要拐几个弯</c>
<c.magenta>才能实现那个功能？”</c>

00:20:01.835 --> 00:20:02.903 align:middle line:-1
<c.magenta>嗯 零个</c>

00:20:03.136 --> 00:20:05.272 align:middle line:-1
<c.magenta>这是一个开箱即用的性能</c>

00:20:12.279 --> 00:20:14.815 align:middle line:-1
<c.magenta>那么特别是你刚看到的那个演示</c>

00:20:14.882 --> 00:20:17.417 align:middle line:-1
<c.magenta>和你之前看到的那个花语的演示</c>

00:20:17.584 --> 00:20:20.187 align:middle line:-1
<c.magenta>这两个都需要进行复杂的计算</c>

00:20:20.387 --> 00:20:23.357 align:middle line:0
<c.magenta>我们知道这一点</c>
<c.magenta>所以我们在GPU上为你显示</c>

00:20:24.057 --> 00:20:25.893 align:middle line:0
<c.magenta>然而一些基于文本的演示</c>

00:20:25.993 --> 00:20:28.595 align:middle line:0
<c.magenta>比如情感分析和下一个词预测</c>

00:20:28.829 --> 00:20:30.497 align:middle line:0
<c.magenta>这些真用了许多内存</c>

00:20:30.564 --> 00:20:33.000 align:middle line:0
<c.magenta>这也是我们为什么在CPU上</c>
<c.magenta>为你显示的原因</c>

00:20:33.901 --> 00:20:36.336 align:middle line:0
<c.magenta>但最重要的是它们都运行在</c>
<c.magenta>Core ML上</c>

00:20:36.403 --> 00:20:38.405 align:middle line:0
<c.magenta>所以你不必担心它运行在哪儿</c>

00:20:38.505 --> 00:20:39.439 align:middle line:0
<c.magenta>我们又把你们带回来了</c>

00:20:40.674 --> 00:20:43.844 align:middle line:-2
<c.magenta>这种抽象概念</c>
<c.magenta>让我们做一些强大的功能吧</c>

00:20:44.478 --> 00:20:46.647 align:middle line:-1
<c.magenta>那么对于给图像添加字幕 比如说</c>

00:20:46.880 --> 00:20:51.351 align:middle line:0
<c.magenta>那个模型的一部分是需要复杂的计算</c>
<c.magenta>而还有一部分是占用许多内存</c>

00:20:51.518 --> 00:20:54.888 align:middle line:0
<c.magenta>我们会自动联系从GPU切换到CPU</c>

00:20:55.055 --> 00:20:57.124 align:middle line:0
<c.magenta>从而你可以获得最好的性能</c>

00:20:59.159 --> 00:21:02.129 align:middle line:-1
<c.magenta>这些都是用例和性能相关的</c>

00:20:59.159 --> 00:21:02.129 align:middle line:-1
<c.magenta>这些都是用例和性能相关的</c>

00:21:02.863 --> 00:21:05.232 align:middle line:-1
<c.magenta>但Core ML并不只是一个框架</c>

00:21:05.699 --> 00:21:07.901 align:middle line:-1
<c.magenta>它是一个文件格式 还是工具的组合</c>

00:21:07.968 --> 00:21:11.171 align:middle line:-2
<c.magenta>可以帮助你获取越来越多的模型</c>
<c.magenta>你可以用在你自己的应用中</c>

00:21:11.705 --> 00:21:14.875 align:middle line:-2
<c.magenta>让我们邀请我的朋友兼同事Zach</c>
<c.magenta>上台来讲讲与之相关的内容</c>

00:21:23.250 --> 00:21:24.084 align:middle line:-1
<c.magenta>谢谢Krishna</c>

00:21:25.052 --> 00:21:30.324 align:middle line:-2
<c.magenta>嗨 我叫Zach</c>
<c.magenta>Core ML工程师团队的工程师</c>

00:21:34.494 --> 00:21:36.496 align:middle line:-1
<c.magenta>今天我很激动能跟大家谈谈</c>

00:21:36.797 --> 00:21:38.832 align:middle line:-1
<c.magenta>Core ML模型格式</c>

00:21:38.999 --> 00:21:42.736 align:middle line:-2
<c.magenta>以及你从哪里可以获取这种格式的模型</c>
<c.magenta>以用在你自己的应用中</c>

00:21:44.505 --> 00:21:47.541 align:middle line:-2
<c.magenta>那么到目前为止</c>
<c.magenta>你已经多次看到这个图表了吧</c>

00:21:47.674 --> 00:21:51.211 align:middle line:-1
<c.magenta>它展示了使用机器学习模型是如何简单</c>

00:21:51.311 --> 00:21:54.915 align:middle line:-2
<c.magenta>只需要把它拖拽到Xcode中</c>
<c.magenta>然后你就会获得一个代码界面</c>

00:21:55.315 --> 00:21:58.986 align:middle line:-2
<c.magenta>但是现在 你很可能会想</c>
<c.magenta>“这些模型是从哪儿来的呢？”</c>

00:22:00.854 --> 00:22:02.623 align:middle line:-1
<c.magenta>嗯 其实有两个地方</c>

00:22:02.689 --> 00:22:06.193 align:middle line:-2
<c.magenta>你可以找到Core ML模型</c>
<c.magenta>格式的机器学习模型</c>

00:22:06.927 --> 00:22:11.098 align:middle line:-2
<c.magenta>第一个是developer.apple.com</c>
<c.magenta>上的示例模型</c>

00:22:11.932 --> 00:22:14.368 align:middle line:-1
<c.magenta>这些是预训练过的各种模型</c>

00:22:14.535 --> 00:22:16.937 align:middle line:-1
<c.magenta>已经是Core ML模型格式了</c>

00:22:17.137 --> 00:22:20.340 align:middle line:0
<c.magenta>并且如果你是机器学习的新手</c>
<c.magenta>这也是最简单的上手方式了</c>

00:22:21.441 --> 00:22:22.543 align:middle line:-1
<c.magenta>但我们也知道</c>

00:22:22.743 --> 00:22:25.445 align:middle line:-1
<c.magenta>那儿是机器学习的广阔世界</c>

00:22:26.013 --> 00:22:28.682 align:middle line:-1
<c.magenta>有大量现有的流行训练工具</c>

00:22:28.782 --> 00:22:32.152 align:middle line:-1
<c.magenta>以及大量模型 它们已是这种格式的了</c>

00:22:32.619 --> 00:22:35.923 align:middle line:-1
<c.magenta>所以我们把获取机器学习模型</c>

00:22:36.089 --> 00:22:38.125 align:middle line:-1
<c.magenta>使用最流行的工具进行训练</c>

00:22:38.592 --> 00:22:40.594 align:middle line:-1
<c.magenta>并把它们应用在你的应用中变成了可能</c>

00:22:42.162 --> 00:22:45.799 align:middle line:-2
<c.magenta>那么为了那个目的</c>
<c.magenta>我们已经创建了Core ML工具</c>

00:22:46.233 --> 00:22:50.737 align:middle line:-2
<c.magenta>它是一个转化器包</c>
<c.magenta>把模型转化成各种流行格式</c>

00:22:50.938 --> 00:22:53.574 align:middle line:-1
<c.magenta>把它们转化成Core ML模型格式</c>

00:22:54.074 --> 00:22:56.543 align:middle line:-1
<c.magenta>并且它是开源的</c>

00:23:03.250 --> 00:23:06.587 align:middle line:-2
<c.magenta>我们已经发布了遵从BSD许可协议</c>
<c.magenta>的Core ML工具</c>

00:23:06.720 --> 00:23:08.755 align:middle line:-1
<c.magenta>因此采用这些工具没有任何障碍</c>

00:23:12.426 --> 00:23:15.629 align:middle line:-1
<c.magenta>要在因特网之外的某个地方获取模型</c>

00:23:15.696 --> 00:23:18.065 align:middle line:-1
<c.magenta>你必须从一个不同格式的模型开始</c>

00:23:18.131 --> 00:23:19.366 align:middle line:-1
<c.magenta>比如说Caffe</c>

00:23:19.933 --> 00:23:22.736 align:middle line:-2
<c.magenta>那么Caffe是一个</c>
<c.magenta>很流行的深度学习训练库</c>

00:23:23.937 --> 00:23:26.340 align:middle line:-2
<c.magenta>如果你从它的一个模型开始</c>
<c.magenta>比如Caffe格式</c>

00:23:26.607 --> 00:23:28.709 align:middle line:-1
<c.magenta>你把它放到Core ML模型格式</c>

00:23:28.775 --> 00:23:30.344 align:middle line:-1
<c.magenta>和在你应用中使用它的方式</c>

00:23:30.511 --> 00:23:33.614 align:middle line:-2
<c.magenta>是通过Core ML工具中的一个</c>
<c.magenta>转换器运行它</c>

00:23:34.214 --> 00:23:37.551 align:middle line:-2
<c.magenta>或者如果你在那儿没有找到</c>
<c.magenta>你想要的模型</c>

00:23:37.918 --> 00:23:39.786 align:middle line:-1
<c.magenta>你可以使用自己的训练数据</c>

00:23:39.887 --> 00:23:42.556 align:middle line:-1
<c.magenta>并使用任何一种流行工具</c>

00:23:42.623 --> 00:23:44.458 align:middle line:-1
<c.magenta>来训练该种格式的你自己的模型</c>

00:23:44.825 --> 00:23:46.927 align:middle line:-1
<c.magenta>然后运行转换器</c>

00:23:46.994 --> 00:23:49.363 align:middle line:-1
<c.magenta>生产Core ML模型格式的模型</c>

00:23:49.563 --> 00:23:52.232 align:middle line:-1
<c.magenta>然后接下来的流程就完全一样了</c>

00:23:52.399 --> 00:23:55.869 align:middle line:-2
<c.magenta>只需要把模型拖拽到Xcode</c>
<c.magenta>然后你就得到一个编码界面</c>

00:24:03.944 --> 00:24:08.348 align:middle line:0
<c.magenta>使用Core ML工具</c>
<c.magenta>与Pip安装coremltools一样简单</c>

00:24:08.482 --> 00:24:10.417 align:middle line:0
<c.magenta>只需要下载并安装文件包即可</c>

00:24:10.884 --> 00:24:15.556 align:middle line:0
<c.magenta>这是一个Python包</c>
<c.magenta>有适合各种流行训练工具的转换器</c>

00:24:15.722 --> 00:24:18.392 align:middle line:0
<c.magenta>其中大部分工具已是Python格式</c>

00:24:18.592 --> 00:24:20.861 align:middle line:0
<c.magenta>作为那个机器学习生态系统的一部分</c>

00:24:20.961 --> 00:24:22.796 align:middle line:0
<c.magenta>这也是一个Python库</c>

00:24:25.232 --> 00:24:28.302 align:middle line:-1
<c.magenta>让我们具体看一下这个包里都有什么</c>

00:24:28.869 --> 00:24:31.271 align:middle line:-1
<c.magenta>最顶部时每种转换器</c>

00:24:31.338 --> 00:24:33.240 align:middle line:-1
<c.magenta>这是一组转换器</c>

00:24:33.340 --> 00:24:35.375 align:middle line:-1
<c.magenta>每种转换器对应一种流行的训练库</c>

00:24:36.610 --> 00:24:40.647 align:middle line:-2
<c.magenta>接下来我们有Core ML捆绑</c>
<c.magenta>和一个转换器库</c>

00:24:40.881 --> 00:24:43.884 align:middle line:-1
<c.magenta>这是我们用于创建全部转换器的东西</c>

00:24:43.984 --> 00:24:49.356 align:middle line:-2
<c.magenta>在这里 Core ML捆绑允许你</c>
<c.magenta>直接从Python调用到Core ML</c>

00:24:49.456 --> 00:24:52.893 align:middle line:-2
<c.magenta>并获得后备推测 这真的很有帮助</c>
<c.magenta>对于验证</c>

00:24:52.960 --> 00:24:55.395 align:middle line:-1
<c.magenta>你获得某种转换模型的预测</c>

00:24:55.462 --> 00:24:57.998 align:middle line:-1
<c.magenta>是否与你原始训练框架的</c>

00:24:58.065 --> 00:24:59.867 align:middle line:-1
<c.magenta>预测结果一模一样</c>

00:25:00.501 --> 00:25:02.135 align:middle line:-1
<c.magenta>我们还有一个转换器库</c>

00:25:02.336 --> 00:25:05.038 align:middle line:-1
<c.magenta>是一个用于创建转换器的高等级API</c>

00:25:05.105 --> 00:25:07.307 align:middle line:-1
<c.magenta>它的共享代码全部这些转换器都能使用</c>

00:25:07.374 --> 00:25:11.111 align:middle line:-2
<c.magenta>使得创建新格式的新转换器</c>
<c.magenta>变得非常简单</c>

00:25:12.212 --> 00:25:15.382 align:middle line:-1
<c.magenta>下边是Core ML规范</c>

00:25:15.983 --> 00:25:21.054 align:middle line:-2
<c.magenta>这是一个直接面向</c>
<c.magenta>Core ML模型格式的读写API</c>

00:25:21.455 --> 00:25:24.591 align:middle line:-1
<c.magenta>那么全部单一字段都能从这里获取</c>

00:25:27.027 --> 00:25:31.665 align:middle line:-2
<c.magenta>我们已经以这种方式设计了程序包</c>
<c.magenta>所以它可兼容 并且可扩展</c>

00:25:32.132 --> 00:25:33.200 align:middle line:-1
<c.magenta>在最高层级</c>

00:25:33.267 --> 00:25:38.505 align:middle line:-2
<c.magenta>转换器为Core ML兼容性</c>
<c.magenta>提供了各种流行工具</c>

00:25:39.773 --> 00:25:42.209 align:middle line:-1
<c.magenta>下边是Core ML捆绑</c>

00:25:42.309 --> 00:25:45.112 align:middle line:-1
<c.magenta>转换器库以及Core ML规范</c>

00:25:45.279 --> 00:25:49.082 align:middle line:-2
<c.magenta>使得这个程序包变得可扩展</c>
<c.magenta>很容易创建新转换器</c>

00:25:49.483 --> 00:25:52.419 align:middle line:-1
<c.magenta>并为还没有转换器的大量现有格式</c>

00:25:52.486 --> 00:25:53.520 align:middle line:-1
<c.magenta>创建转换器</c>

00:25:53.921 --> 00:25:55.856 align:middle line:-1
<c.magenta>因为这是开源的</c>

00:25:56.190 --> 00:25:57.991 align:middle line:-1
<c.magenta>很容易获取这个程序包</c>

00:25:58.158 --> 00:26:01.128 align:middle line:-1
<c.magenta>甚至将它整合到另一个开源库中</c>

00:25:58.158 --> 00:26:01.128 align:middle line:-1
<c.magenta>甚至将它整合到另一个开源库中</c>

00:26:01.228 --> 00:26:02.596 align:middle line:-1
<c.magenta>并在顶层创建新转换器</c>

00:26:02.663 --> 00:26:05.532 align:middle line:-2
<c.magenta>并且这里没有任何限制</c>
<c.magenta>它有BSD许可证</c>

00:26:13.240 --> 00:26:16.677 align:middle line:-2
<c.magenta>Core ML模型格式</c>
<c.magenta>是单一文档格式</c>

00:26:17.010 --> 00:26:20.414 align:middle line:-1
<c.magenta>它既封装了模型的功能性描述</c>

00:26:20.581 --> 00:26:22.649 align:middle line:-1
<c.magenta>关于其输入和输出</c>

00:26:22.950 --> 00:26:25.285 align:middle line:-1
<c.magenta>又封装了模型受训练的参数</c>

00:26:25.853 --> 00:26:27.254 align:middle line:-1
<c.magenta>看一个例子</c>

00:26:27.454 --> 00:26:29.823 align:middle line:-1
<c.magenta>是一个像线性回归一样的简单模型</c>

00:26:29.990 --> 00:26:31.859 align:middle line:-1
<c.magenta>这是在训练时间内</c>

00:26:31.925 --> 00:26:33.260 align:middle line:-1
<c.magenta>学习到的权重和补偿的集合</c>

00:26:33.660 --> 00:26:36.263 align:middle line:-1
<c.magenta>对于一个更复杂的模型 比如神经网络</c>

00:26:36.463 --> 00:26:39.800 align:middle line:-1
<c.magenta>它实际上封装了网络的结构</c>

00:26:39.900 --> 00:26:42.503 align:middle line:-1
<c.magenta>及其在训练时间内学习到的权重</c>

00:26:43.237 --> 00:26:45.072 align:middle line:-1
<c.magenta>这是一个公共文件格式</c>

00:26:45.138 --> 00:26:48.075 align:middle line:-1
<c.magenta>在developer.apple.com上有完整说明</c>

00:26:51.745 --> 00:26:54.348 align:middle line:-2
<c.magenta>当你在Xcode中</c>
<c.magenta>查看机器学习模型时</c>

00:26:54.615 --> 00:26:56.517 align:middle line:-1
<c.magenta>你会看到一个这样的视图</c>

00:26:56.583 --> 00:26:59.152 align:middle line:-1
<c.magenta>你得到了全部元数据和功能性界面</c>

00:26:59.520 --> 00:27:03.090 align:middle line:-1
<c.magenta>并且我们现在可以看到的是这完全</c>

00:26:59.520 --> 00:27:03.090 align:middle line:-1
<c.magenta>并且我们现在可以看到的是这完全</c>

00:27:03.257 --> 00:27:04.691 align:middle line:-1
<c.magenta>由这种Core ML模型格式所支持</c>

00:27:04.758 --> 00:27:08.562 align:middle line:-2
<c.magenta>那么这种单一文档格式包含Xcode</c>
<c.magenta>所需要的全部信息</c>

00:27:08.629 --> 00:27:10.631 align:middle line:-1
<c.magenta>用于给你提供这种模型之上的UI</c>

00:27:10.731 --> 00:27:14.268 align:middle line:-2
<c.magenta>让你的代码调用它</c>
<c.magenta>然后在设备上执行它</c>

00:27:16.904 --> 00:27:19.673 align:middle line:-2
<c.magenta>Core ML转换器</c>
<c.magenta>都以同一种方式运行</c>

00:27:20.107 --> 00:27:22.776 align:middle line:0
<c.magenta>它们从在源格式中获取模型开始</c>

00:27:22.943 --> 00:27:27.181 align:middle line:0
<c.magenta>比如Caffe</c>
<c.magenta>并将其转换为Core ML模型格式</c>

00:27:28.248 --> 00:27:30.150 align:middle line:0
<c.magenta>有一组统一的API</c>

00:27:30.284 --> 00:27:32.886 align:middle line:0
<c.magenta>用于将这些模型从各种格式</c>

00:27:32.953 --> 00:27:34.154 align:middle line:0
<c.magenta>转换为Core ML格式</c>

00:27:34.454 --> 00:27:36.356 align:middle line:0
<c.magenta>如果你知道如何从一种格式</c>
<c.magenta>转为另一种格式</c>

00:27:36.523 --> 00:27:38.592 align:middle line:0
<c.magenta>你就明白如何转换全部格式</c>

00:27:40.928 --> 00:27:42.162 align:middle line:-1
<c.magenta>让我们看一个例子</c>

00:27:42.229 --> 00:27:46.466 align:middle line:-1
<c.magenta>近距离地了解如何转换Caffe模型</c>

00:27:47.501 --> 00:27:49.002 align:middle line:-1
<c.magenta>Caffe大概是这样的</c>

00:27:49.136 --> 00:27:51.705 align:middle line:-1
<c.magenta>它用几个文件来代表模型</c>

00:27:52.239 --> 00:27:56.643 align:middle line:-2
<c.magenta>.caffemodel文件代表在该模型中</c>
<c.magenta>所学习到的权重</c>

00:27:57.010 --> 00:28:01.448 align:middle line:-2
<c.magenta>而.prototxt文件</c>
<c.magenta>代表神经网络的结构</c>

00:27:57.010 --> 00:28:01.448 align:middle line:-2
<c.magenta>而.prototxt文件</c>
<c.magenta>代表神经网络的结构</c>

00:28:02.516 --> 00:28:04.318 align:middle line:-1
<c.magenta>当Caffe执行推理时</c>

00:28:04.818 --> 00:28:08.388 align:middle line:-2
<c.magenta>你应该从获取图片开始</c>
<c.magenta>比如像这样的一朵玫瑰</c>

00:28:08.722 --> 00:28:11.491 align:middle line:-2
<c.magenta>并且你把图片和这两个文件</c>
<c.magenta>传给Caffe</c>

00:28:11.792 --> 00:28:16.396 align:middle line:-2
<c.magenta>Caffe会返回一个类标签的索引</c>
<c.magenta>比如74</c>

00:28:17.197 --> 00:28:20.200 align:middle line:-2
<c.magenta>然后有一个第三个文件</c>
<c.magenta>一个labels.txt</c>

00:28:20.400 --> 00:28:24.471 align:middle line:-2
<c.magenta>那会把这些索引映射到字符串类标签</c>
<c.magenta>比如“玫瑰”</c>

00:28:25.072 --> 00:28:27.841 align:middle line:0
<c.magenta>那么有一点很重要 就是这三个文件</c>

00:28:27.941 --> 00:28:30.978 align:middle line:0
<c.magenta>把模型中的全部文件封装在一起</c>

00:28:31.111 --> 00:28:34.381 align:middle line:0
<c.magenta>这就是转换到Core ML格式</c>
<c.magenta>所需要的一切</c>

00:28:35.883 --> 00:28:39.987 align:middle line:-2
<c.magenta>现在让我们看一个例子</c>
<c.magenta>将Caffe模型转换为</c>

00:28:40.087 --> 00:28:41.255 align:middle line:-1
<c.magenta>Core ML模型</c>

00:28:41.321 --> 00:28:43.323 align:middle line:-1
<c.magenta>（演示）</c>

00:28:50.964 --> 00:28:54.368 align:middle line:-2
<c.magenta>一开始我要在这里打开一个</c>
<c.magenta>交互式的Python提示框</c>

00:28:54.701 --> 00:28:58.105 align:middle line:-2
<c.magenta>所以我们可以键入Python代码</c>
<c.magenta>并实时查看输出</c>

00:28:59.840 --> 00:29:02.576 align:middle line:-1
<c.magenta>那么我要导入coremltools</c>

00:28:59.840 --> 00:29:02.576 align:middle line:-1
<c.magenta>那么我要导入coremltools</c>

00:29:02.643 --> 00:29:04.978 align:middle line:-2
<c.magenta>这是那个Python格式的</c>
<c.magenta>程序包的名称</c>

00:29:07.648 --> 00:29:11.118 align:middle line:-2
<c.magenta>一旦完成后</c>
<c.magenta>我只需要键入coremltools</c>

00:29:11.451 --> 00:29:13.720 align:middle line:-1
<c.magenta>当我处理新Python程序包时</c>

00:29:13.987 --> 00:29:16.490 align:middle line:-2
<c.magenta>我要做的第一件事就是</c>
<c.magenta>把它标记为完成</c>

00:29:16.557 --> 00:29:18.425 align:middle line:-1
<c.magenta>并查看API中有哪些可用</c>

00:29:19.459 --> 00:29:24.198 align:middle line:-2
<c.magenta>在这里标记完成时 我们可以看到</c>
<c.magenta>coremltools包含转换器</c>

00:29:24.364 --> 00:29:27.100 align:middle line:-1
<c.magenta>是每个高等级转换器从另一种格式</c>

00:29:27.167 --> 00:29:28.468 align:middle line:-1
<c.magenta>都转换为了Core ML格式</c>

00:29:28.969 --> 00:29:32.940 align:middle line:-1
<c.magenta>以及模型 规范版本和通用版本</c>

00:29:33.207 --> 00:29:35.909 align:middle line:-1
<c.magenta>就是框架捆绑和转换器库</c>

00:29:36.076 --> 00:29:38.545 align:middle line:-1
<c.magenta>以及那些你可以创建新转换器</c>

00:29:38.612 --> 00:29:40.480 align:middle line:-1
<c.magenta>并测试它是否能提供</c>

00:29:40.547 --> 00:29:42.115 align:middle line:-1
<c.magenta>与原始训练框架所提供的一样的预测</c>

00:29:42.649 --> 00:29:46.720 align:middle line:-1
<c.magenta>而.protonamesbase包含</c>

00:29:46.887 --> 00:29:48.355 align:middle line:-1
<c.magenta>Core ML模型格式的读写API</c>

00:29:49.122 --> 00:29:51.024 align:middle line:-1
<c.magenta>今天我们主要关注转换器</c>

00:29:51.558 --> 00:29:54.862 align:middle line:-2
<c.magenta>若我再次执行.converters</c>
<c.magenta>然后标记为完成</c>

00:29:55.128 --> 00:29:57.197 align:middle line:-1
<c.magenta>我可以立即看到这个命名空间中</c>

00:29:57.264 --> 00:29:58.465 align:middle line:-1
<c.magenta>全部可用的转换器</c>

00:29:58.532 --> 00:30:02.769 align:middle line:-2
<c.magenta>这里有caffe、keras、libsvn、</c>
<c.magenta>scikit-learn和xgboost</c>

00:29:58.532 --> 00:30:02.769 align:middle line:-2
<c.magenta>这里有caffe、keras、libsvn、</c>
<c.magenta>scikit-learn和xgboost</c>

00:30:03.036 --> 00:30:04.905 align:middle line:-1
<c.magenta>今天我们主要讲Caffe</c>

00:30:05.439 --> 00:30:08.108 align:middle line:-1
<c.magenta>我再次执行.caffe并标记完成</c>

00:30:08.175 --> 00:30:09.009 align:middle line:-1
<c.magenta>查看有哪些可用</c>

00:30:09.076 --> 00:30:11.278 align:middle line:-2
<c.magenta>它就通过.convert</c>
<c.magenta>替我标记为已完成</c>

00:30:11.545 --> 00:30:12.379 align:middle line:-1
<c.magenta>就是那么简单</c>

00:30:12.446 --> 00:30:14.515 align:middle line:-1
<c.magenta>这里只有一个函数叫作convert</c>

00:30:15.082 --> 00:30:16.617 align:middle line:-1
<c.magenta>让我们看看要如何使用它</c>

00:30:19.086 --> 00:30:23.724 align:middle line:-1
<c.magenta>首先我要设置输入</c>

00:30:23.991 --> 00:30:27.728 align:middle line:-2
<c.magenta>我知道我有一个Caffe模型</c>
<c.magenta>由两个文件定义</c>

00:30:27.928 --> 00:30:30.797 align:middle line:-2
<c.magenta>我要指明caffemodel =</c>
<c.magenta>并且我提供两个字符串的</c>

00:30:31.064 --> 00:30:34.201 align:middle line:-2
<c.magenta>两个极点指向</c>
<c.magenta>那个Caffe模型的文件名</c>

00:30:34.468 --> 00:30:38.972 align:middle line:-2
<c.magenta>分别是“flowers.caffemodel”</c>
<c.magenta>和“flowers.prototxt”</c>

00:30:39.039 --> 00:30:42.476 align:middle line:-2
<c.magenta>这两者共同代表了</c>
<c.magenta>在网络中学习到的权重</c>

00:30:42.543 --> 00:30:44.044 align:middle line:-1
<c.magenta>以及网络结构</c>

00:30:46.146 --> 00:30:49.483 align:middle line:-1
<c.magenta>接下来我要设置一个类标签文件</c>

00:30:49.983 --> 00:30:51.852 align:middle line:-1
<c.magenta>那么我要指明labels =</c>

00:30:52.486 --> 00:30:54.555 align:middle line:-1
<c.magenta>并且这里有"labels.txt"</c>

00:30:55.355 --> 00:30:59.593 align:middle line:-2
<c.magenta>那代表从数值型索引</c>
<c.magenta>到字符串类标签的映射</c>

00:31:00.894 --> 00:31:02.229 align:middle line:-1
<c.magenta>现在运行转换器…</c>

00:31:02.496 --> 00:31:03.497 align:middle line:-1
<c.magenta>很简单</c>

00:31:03.697 --> 00:31:07.201 align:middle line:-2
<c.magenta>我要做的就是</c>
<c.magenta>指明coreml_model</c>

00:31:08.135 --> 00:31:13.173 align:middle line:-2
<c.magenta>= coremltools</c>
<c.magenta>.converters.caffe.convert</c>

00:31:13.373 --> 00:31:14.908 align:middle line:-1
<c.magenta>全部标记为完成</c>

00:31:15.142 --> 00:31:21.448 align:middle line:-2
<c.magenta>我只需要传递那个caffemodel</c>
<c.magenta>并且classlabels = labels</c>

00:31:21.849 --> 00:31:23.851 align:middle line:-1
<c.magenta>那么我只需要传递这三个文件</c>

00:31:26.119 --> 00:31:29.890 align:middle line:-2
<c.magenta>当转换器完成时</c>
<c.magenta>我得到的是Core ML模型</c>

00:31:30.524 --> 00:31:33.160 align:middle line:-2
<c.magenta>就在这里 是Python格式的</c>
<c.magenta>我可以打印模型</c>

00:31:33.527 --> 00:31:36.830 align:middle line:-1
<c.magenta>并查看通过那个模型所得到的界面</c>

00:31:37.297 --> 00:31:40.000 align:middle line:-2
<c.magenta>那么我可以看到它有一个输入</c>
<c.magenta>叫作“数据”</c>

00:31:40.767 --> 00:31:42.803 align:middle line:-1
<c.magenta>那个输入是一个多数组</c>

00:31:43.003 --> 00:31:47.007 align:middle line:-2
<c.magenta>格式为3乘227乘227</c>
<c.magenta>类型为双精度浮点型</c>

00:31:48.242 --> 00:31:49.610 align:middle line:-1
<c.magenta>我们稍后再返回来看</c>

00:31:50.177 --> 00:31:51.712 align:middle line:-1
<c.magenta>它还有两种输出</c>

00:31:52.112 --> 00:31:55.816 align:middle line:-2
<c.magenta>一个叫作“prob”</c>
<c.magenta>它是一个带字符串键的词典</c>

00:31:55.949 --> 00:31:58.218 align:middle line:-1
<c.magenta>所以它代表</c>

00:31:58.385 --> 00:32:00.120 align:middle line:-1
<c.magenta>每种可能的类标签的可能性</c>

00:31:58.385 --> 00:32:00.120 align:middle line:-1
<c.magenta>每种可能的类标签的可能性</c>

00:32:00.954 --> 00:32:03.757 align:middle line:-2
<c.magenta>另一种输出叫作“classLabel”</c>
<c.magenta>是一个字符串</c>

00:32:03.824 --> 00:32:06.426 align:middle line:-1
<c.magenta>它肯定是最可能的类标签</c>

00:32:06.527 --> 00:32:09.029 align:middle line:-1
<c.magenta>为了方便 你不必查看全部可能性</c>

00:32:09.096 --> 00:32:10.764 align:middle line:-1
<c.magenta>以找出最可能的那个</c>

00:32:13.567 --> 00:32:16.370 align:middle line:-2
<c.magenta>但你可以查看这个</c>
<c.magenta>我知道这种输入类型</c>

00:32:16.436 --> 00:32:20.107 align:middle line:-1
<c.magenta>并不完全是我们希望模型所拥有的界面</c>

00:32:20.374 --> 00:32:23.744 align:middle line:-2
<c.magenta>所以我可以返回并以另一个参数</c>
<c.magenta>运行转换器</c>

00:32:24.077 --> 00:32:27.214 align:middle line:-2
<c.magenta>修改输入类型</c>
<c.magenta>因为我不希望使用多数组</c>

00:32:27.614 --> 00:32:30.450 align:middle line:-1
<c.magenta>我希望这个模型将图片作为输入</c>

00:32:31.885 --> 00:32:36.523 align:middle line:-2
<c.magenta>我要返回并添加</c>
<c.magenta>image_input_names = "data"</c>

00:32:36.924 --> 00:32:38.792 align:middle line:-1
<c.magenta>再次让我们看一下这里的输出</c>

00:32:38.859 --> 00:32:40.761 align:middle line:-1
<c.magenta>你可以看到输入名称为data</c>

00:32:41.061 --> 00:32:43.430 align:middle line:-1
<c.magenta>它就会知道将data用作输入</c>

00:32:45.165 --> 00:32:46.867 align:middle line:-1
<c.magenta>如果我再次运行转换器</c>

00:32:47.134 --> 00:32:49.369 align:middle line:-1
<c.magenta>然后再一次打印模型界面</c>

00:32:49.570 --> 00:32:51.839 align:middle line:-1
<c.magenta>现在我看到叫作data的输入</c>

00:32:51.905 --> 00:32:56.910 align:middle line:-2
<c.magenta>是一个图片 宽227 高227</c>
<c.magenta>色彩空间是RGB</c>

00:33:04.218 --> 00:33:05.919 align:middle line:-1
<c.magenta>现在我们有Core ML模型</c>

00:33:06.320 --> 00:33:09.189 align:middle line:-1
<c.magenta>让我们查看并确保转换已成功</c>

00:33:09.389 --> 00:33:12.593 align:middle line:-2
<c.magenta>从而通过这个Core ML模型</c>
<c.magenta>获取正确预测</c>

00:33:13.827 --> 00:33:16.630 align:middle line:-1
<c.magenta>我先导入Python图库</c>

00:33:16.697 --> 00:33:20.334 align:middle line:-2
<c.magenta>以便我可以使用图片</c>
<c.magenta>并直接向模型中传递图片</c>

00:33:20.868 --> 00:33:25.439 align:middle line:-1
<c.magenta>那么我要指明from PIL import Image</c>

00:33:26.507 --> 00:33:31.111 align:middle line:-1
<c.magenta>然后Rose = Image.open ("rose.jpg")</c>

00:33:32.713 --> 00:33:35.516 align:middle line:-1
<c.magenta>为了证明我没隐藏什么</c>

00:33:36.583 --> 00:33:38.585 align:middle line:-1
<c.magenta>我要调用rose.show</c>

00:33:39.653 --> 00:33:42.923 align:middle line:-2
<c.magenta>并给你展示</c>
<c.magenta>这的确是一张玫瑰的图片</c>

00:33:48.829 --> 00:33:49.963 align:middle line:-1
<c.magenta>你不必为此而鼓掌</c>

00:33:53.500 --> 00:33:57.037 align:middle line:-2
<c.magenta>现在我已经表明</c>
<c.magenta>这张图片真的代表的是玫瑰</c>

00:33:57.104 --> 00:33:58.872 align:middle line:-1
<c.magenta>让我们来看看模型是否同意我们的意见</c>

00:33:59.473 --> 00:34:05.012 align:middle line:-2
<c.magenta>查看预测跟调用</c>
<c.magenta>coremlmodel.predict一样简单</c>

00:33:59.473 --> 00:34:05.012 align:middle line:-2
<c.magenta>查看预测跟调用</c>
<c.magenta>coremlmodel.predict一样简单</c>

00:34:06.013 --> 00:34:09.949 align:middle line:-2
<c.magenta>这是我们之前谈到过的</c>
<c.magenta>Core ML框架捆绑</c>

00:34:10.984 --> 00:34:14.987 align:middle line:-2
<c.magenta>我们要传递命名为“data”、</c>
<c.magenta>值为“玫瑰”的输入</c>

00:34:16.422 --> 00:34:20.360 align:middle line:-2
<c.magenta>我们立即就得到了一个</c>
<c.magenta>类标签玫瑰的预测</c>

00:34:26.699 --> 00:34:27.967 align:middle line:-1
<c.magenta>但让我们确保模型…</c>

00:34:28.034 --> 00:34:29.203 align:middle line:-1
<c.magenta>让我们能确保它不是一个侥幸</c>

00:34:29.268 --> 00:34:31.871 align:middle line:-1
<c.magenta>并确保模型真的知道这是一朵玫瑰</c>

00:34:31.938 --> 00:34:34.675 align:middle line:-1
<c.magenta>我们要向下滚动类可能性</c>

00:34:34.975 --> 00:34:36.577 align:middle line:-1
<c.magenta>知道我们在这里看到玫瑰</c>

00:34:37.945 --> 00:34:40.246 align:middle line:-1
<c.magenta>我们可以看到模型其实非常自信</c>

00:34:40.313 --> 00:34:41.148 align:middle line:-1
<c.magenta>它认为这就是一朵玫瑰</c>

00:34:41.215 --> 00:34:45.918 align:middle line:-2
<c.magenta>那么有.991比1的可能性表明</c>
<c.magenta>这是一朵玫瑰</c>

00:34:45.985 --> 00:34:49.790 align:middle line:-2
<c.magenta>那么我要推断很可能是模型</c>
<c.magenta>执行了正确的转换</c>

00:34:50.424 --> 00:34:52.659 align:middle line:-2
<c.magenta>如果我在一个真实的应用中</c>
<c.magenta>执行以上程序</c>

00:34:52.793 --> 00:34:54.995 align:middle line:-1
<c.magenta>我会希望执行更严格的检测</c>

00:34:55.062 --> 00:34:56.964 align:middle line:-1
<c.magenta>所以我要提供一个以上的例子</c>

00:34:57.130 --> 00:34:58.866 align:middle line:-1
<c.magenta>我还想要查看</c>

00:34:58.932 --> 00:35:01.201 align:middle line:-1
<c.magenta>我从Core ML中获取的预测</c>

00:34:58.932 --> 00:35:01.201 align:middle line:-1
<c.magenta>我从Core ML中获取的预测</c>

00:35:01.301 --> 00:35:04.905 align:middle line:-2
<c.magenta>与Caffe会给我提供的预测</c>
<c.magenta>是一模一样的</c>

00:35:04.972 --> 00:35:08.509 align:middle line:-2
<c.magenta>如果输入一样的话</c>
<c.magenta>这也是我们了解转换是否成功的方式</c>

00:35:09.176 --> 00:35:12.713 align:middle line:-2
<c.magenta>但对于这个演示来说会花太长时间</c>
<c.magenta>所以让我们继续</c>

00:35:13.180 --> 00:35:16.149 align:middle line:-1
<c.magenta>我现在要做的是保存模型</c>

00:35:16.216 --> 00:35:17.985 align:middle line:-1
<c.magenta>然后在Xcode中进行查看</c>

00:35:18.385 --> 00:35:20.787 align:middle line:-2
<c.magenta>我会表明</c>
<c.magenta>coremlmodel.save</c>

00:35:21.088 --> 00:35:24.024 align:middle line:-2
<c.magenta>并且我要把它命名为</c>
<c.magenta>FlowerPredictor.mlmodel</c>

00:35:26.426 --> 00:35:29.263 align:middle line:-1
<c.magenta>然后我要打开当前目录和Finder</c>

00:35:29.530 --> 00:35:32.266 align:middle line:-1
<c.magenta>并双击那个模型以在Xcode中打开</c>

00:35:33.800 --> 00:35:35.202 align:middle line:-1
<c.magenta>那么我们在这里可以看到</c>

00:35:35.903 --> 00:35:39.273 align:middle line:-2
<c.magenta>一个叫作FlowerPredictor的</c>
<c.magenta>机器学习模型</c>

00:35:39.339 --> 00:35:44.545 align:middle line:-2
<c.magenta>类型是神经网络分类器</c>
<c.magenta>大小为229.1MB</c>

00:35:45.345 --> 00:35:47.147 align:middle line:-1
<c.magenta>但也有许多遗失的信息</c>

00:35:47.214 --> 00:35:49.183 align:middle line:-1
<c.magenta>它不知道作者、证书、</c>

00:35:49.249 --> 00:35:53.420 align:middle line:-1
<c.magenta>描述或输入和输出描述</c>

00:35:53.887 --> 00:35:55.856 align:middle line:-1
<c.magenta>那么当它作为模型时</c>

00:35:55.956 --> 00:35:58.692 align:middle line:-1
<c.magenta>这就是一个我没有必要提供给同事</c>

00:35:58.759 --> 00:35:59.826 align:middle line:-1
<c.magenta>或放到因特网上的一个模型</c>

00:36:00.093 --> 00:36:02.963 align:middle line:-2
<c.magenta>因为它并没有那么有用</c>
<c.magenta>如果它没有声明</c>

00:36:03.030 --> 00:36:04.731 align:middle line:-1
<c.magenta>它应该干什么以及如何使用它</c>

00:36:05.332 --> 00:36:06.733 align:middle line:-1
<c.magenta>那么我要成为一个好公民</c>

00:36:06.800 --> 00:36:08.969 align:middle line:-1
<c.magenta>我要返回并赋予这个模型一些元数据</c>

00:36:14.074 --> 00:36:17.611 align:middle line:0
<c.magenta>返回到Python提示框</c>
<c.magenta>我可以改变这里的模型</c>

00:36:17.978 --> 00:36:20.347 align:middle line:0
<c.magenta>通过在顶层分配给字段</c>

00:36:20.414 --> 00:36:24.451 align:middle line:0
<c.magenta>我可以说</c>
<c.magenta>author = "Zach Nation"</c>

00:36:26.153 --> 00:36:30.490 align:middle line:0
<c.magenta>coremlmodel.license = "BSD"</c>

00:36:31.925 --> 00:36:37.865 align:middle line:0
<c.magenta>coremlmodel.shortdescription</c>
<c.magenta>= "A flower classifier"</c>

00:36:39.299 --> 00:36:43.003 align:middle line:0
<c.magenta>让我们同时设置输入和输出的帮助文本</c>

00:36:43.136 --> 00:36:46.106 align:middle line:0
<c.magenta>因为它不仅是在Xcode视图中显示</c>

00:36:46.340 --> 00:36:49.676 align:middle line:0
<c.magenta>还会当所生成的代码出现时</c>
<c.magenta>以及当你调用它时显示</c>

00:36:49.877 --> 00:36:52.446 align:middle line:0
<c.magenta>其实成为了文档评论</c>

00:36:52.513 --> 00:36:53.647 align:middle line:0
<c.magenta>在所生成的代码中</c>

00:36:53.914 --> 00:36:55.949 align:middle line:0
<c.magenta>那么当你标记完成一个Xcode时</c>

00:36:56.049 --> 00:36:58.318 align:middle line:0
<c.magenta>这就是其他人期待</c>
<c.magenta>能从这个模式中看到的东西</c>

00:37:00.087 --> 00:37:04.191 align:middle line:0
<c.magenta>我要给data表明</c>
<c.magenta>coremlmodel.inputdescription</c>

00:37:04.691 --> 00:37:07.961 align:middle line:0
<c.magenta>是“一张花朵的图片”</c>

00:37:09.463 --> 00:37:12.666 align:middle line:0
<c.magenta>并且coremlmodel.outputdescription</c>
<c.magenta>"prob"</c>

00:37:12.866 --> 00:37:18.405 align:middle line:0
<c.magenta>是“根据所输入内容</c>

00:37:19.740 --> 00:37:21.108 align:middle line:0
<c.magenta>判断每种花朵类型的可能性”</c>

00:37:23.610 --> 00:37:27.447 align:middle line:0
<c.magenta>并且coremlmodel.outputdescription</c>
<c.magenta>"classLabel"</c>

00:37:28.415 --> 00:37:33.587 align:middle line:0
<c.magenta>是“根据所输入内容判断</c>
<c.magenta>最有可能的花朵类型”</c>

00:37:35.889 --> 00:37:40.093 align:middle line:0
<c.magenta>现在 我们只需要再次保存那个模型</c>

00:37:41.094 --> 00:37:43.130 align:middle line:0
<c.magenta>我要覆盖那里的那个文件</c>

00:37:43.397 --> 00:37:45.232 align:middle line:0
<c.magenta>因为我希望得到带有元数据的文件</c>

00:37:45.999 --> 00:37:47.768 align:middle line:0
<c.magenta>所以我要把它保存在文件顶部</c>

00:37:47.835 --> 00:37:51.438 align:middle line:0
<c.magenta>并再次打开那个目录和Finder</c>

00:37:52.039 --> 00:37:54.908 align:middle line:-2
<c.magenta>现在当我双击模型</c>
<c.magenta>并在Xcode中打开它时</c>

00:37:55.309 --> 00:37:57.878 align:middle line:-1
<c.magenta>我们可以看到它包含有用的元数据</c>

00:37:57.978 --> 00:38:00.447 align:middle line:-1
<c.magenta>描述了模型如何使用</c>

00:37:57.978 --> 00:38:00.447 align:middle line:-1
<c.magenta>描述了模型如何使用</c>

00:38:00.781 --> 00:38:02.983 align:middle line:-1
<c.magenta>以及输入和输出是什么</c>

00:38:13.660 --> 00:38:19.233 align:middle line:-2
<c.magenta>回顾一下 我们了解了</c>
<c.magenta>使用Core ML工具来转换模型</c>

00:38:19.600 --> 00:38:24.338 align:middle line:-2
<c.magenta>与导入coremltools</c>
<c.magenta>设置输入</c>

00:38:24.638 --> 00:38:27.708 align:middle line:-1
<c.magenta>然后调用一个高层级转换函数</c>

00:38:27.808 --> 00:38:30.577 align:middle line:-2
<c.magenta>并获得一个Core ML</c>
<c.magenta>模型格式的模型一样简单</c>

00:38:31.111 --> 00:38:32.312 align:middle line:-1
<c.magenta>最棒的是</c>

00:38:32.412 --> 00:38:35.849 align:middle line:-2
<c.magenta>假如你将框架从Caffe</c>
<c.magenta>切换到Keras</c>

00:38:36.250 --> 00:38:39.853 align:middle line:-1
<c.magenta>切换转换器与更新命名空间一样简单</c>

00:38:40.020 --> 00:38:44.124 align:middle line:-2
<c.magenta>因为所有转换函数</c>
<c.magenta>都共享同一个高层级API</c>

00:38:52.299 --> 00:38:57.204 align:middle line:-2
<c.magenta>Core ML工具支持Caffe和</c>
<c.magenta>Keras模型作为神经网络</c>

00:38:57.471 --> 00:38:59.273 align:middle line:-2
<c.magenta>为Pipeline支持</c>
<c.magenta>Scikit-Learn</c>

00:39:00.140 --> 00:39:03.143 align:middle line:-2
<c.magenta>为Tree Ensemble</c>
<c.magenta>支持Scikit-Learn和XGBoost</c>

00:39:03.544 --> 00:39:06.914 align:middle line:-2
<c.magenta>并且为线性模型</c>
<c.magenta>支持LIBSVM和Scikit-Learn</c>

00:39:06.980 --> 00:39:08.615 align:middle line:-1
<c.magenta>以及支持向量机</c>

00:39:09.149 --> 00:39:13.387 align:middle line:-2
<c.magenta>还有一点值得注意就是Keras</c>
<c.magenta>真的是一个很强大的高层级界面</c>

00:39:13.453 --> 00:39:15.822 align:middle line:-1
<c.magenta>对于许多流行的深度学习训练工具来说</c>

00:39:15.889 --> 00:39:17.257 align:middle line:-1
<c.magenta>包括TensorFlow</c>

00:39:17.658 --> 00:39:20.093 align:middle line:-2
<c.magenta>如果你正在Keras中</c>
<c.magenta>训练TensorFlow</c>

00:39:20.227 --> 00:39:24.031 align:middle line:-2
<c.magenta>你可以使用Core ML工具</c>
<c.magenta>将其转换为Core ML模型格式</c>

00:39:32.039 --> 00:39:35.509 align:middle line:-1
<c.magenta>获取模型 你可以在两个地方查看</c>

00:39:35.809 --> 00:39:39.646 align:middle line:-2
<c.magenta>一个是developer.apple.com上的</c>
<c.magenta>示例模型集合</c>

00:39:39.847 --> 00:39:43.817 align:middle line:-2
<c.magenta>再一次 这些是预训练的模型</c>
<c.magenta>已经是Core ML模型格式了</c>

00:39:43.917 --> 00:39:46.019 align:middle line:-1
<c.magenta>所以这是最简单的上手方式</c>

00:39:46.086 --> 00:39:47.321 align:middle line:-1
<c.magenta>如果你是机器学习方面的新手</c>

00:39:47.454 --> 00:39:51.258 align:middle line:-2
<c.magenta>或者如果这些模型中的一个能实现</c>
<c.magenta>你在应用中尝试实现的功能的话</c>

00:39:51.959 --> 00:39:54.494 align:middle line:-1
<c.magenta>但是因为那儿有许多机器学习</c>

00:39:54.561 --> 00:39:57.931 align:middle line:-1
<c.magenta>用例中的各种模型有各种模式</c>

00:39:58.165 --> 00:39:59.800 align:middle line:-1
<c.magenta>我们创建了Core ML工具</c>

00:39:59.967 --> 00:40:03.036 align:middle line:-1
<c.magenta>允许你将其中任意一种流行格式转换为</c>

00:39:59.967 --> 00:40:03.036 align:middle line:-1
<c.magenta>允许你将其中任意一种流行格式转换为</c>

00:40:03.170 --> 00:40:04.705 align:middle line:-1
<c.magenta>Core ML模型格式</c>

00:40:11.812 --> 00:40:14.281 align:middle line:-1
<c.magenta>那么总结一下 我们今天学习到了</c>

00:40:14.615 --> 00:40:17.084 align:middle line:-1
<c.magenta>Core ML使得在</c>

00:40:17.184 --> 00:40:19.686 align:middle line:-2
<c.magenta>你的应用中整合机器学习模型</c>
<c.magenta>变得非常简单</c>

00:40:19.887 --> 00:40:21.822 align:middle line:-1
<c.magenta>只需要拖拽到Xcode中</c>

00:40:21.889 --> 00:40:23.924 align:middle line:-1
<c.magenta>然后就会获得一个模型的代码接口</c>

00:40:25.492 --> 00:40:29.496 align:middle line:-2
<c.magenta>Core ML对于各种各样的用例</c>
<c.magenta>拥有丰富的数据类型支持</c>

00:40:29.630 --> 00:40:32.065 align:middle line:-1
<c.magenta>它可以处理你已经很熟悉的</c>

00:40:32.132 --> 00:40:33.066 align:middle line:-1
<c.magenta>应用代码中的数据类型</c>

00:40:35.636 --> 00:40:37.271 align:middle line:-1
<c.magenta>Core ML针对硬件执行了优化</c>

00:40:37.437 --> 00:40:39.439 align:middle line:-1
<c.magenta>它创建在性能基元之上</c>

00:40:39.506 --> 00:40:41.909 align:middle line:-2
<c.magenta>比如Metal性能着色器</c>
<c.magenta>和Accelerate</c>

00:40:42.276 --> 00:40:45.245 align:middle line:-1
<c.magenta>你可以在设备上获得最佳性能</c>

00:40:47.014 --> 00:40:49.082 align:middle line:-1
<c.magenta>通过Core ML工具</c>

00:40:49.349 --> 00:40:53.487 align:middle line:-2
<c.magenta>Core ML与最流行的机器学习</c>
<c.magenta>格式一致</c>

00:40:53.720 --> 00:40:55.322 align:middle line:-1
<c.magenta>并且随着时间会添加更多格式</c>

00:40:57.591 --> 00:41:00.594 align:middle line:-2
<c.magenta>要获取更多信息</c>
<c.magenta>请访问developer.apple.com</c>

00:40:57.591 --> 00:41:00.594 align:middle line:-2
<c.magenta>要获取更多信息</c>
<c.magenta>请访问developer.apple.com</c>

00:41:00.694 --> 00:41:02.663 align:middle line:-1
<c.magenta>我们的演讲编号为710</c>

00:41:04.231 --> 00:41:06.033 align:middle line:-1
<c.magenta>之后还有一些相关的演讲</c>

00:41:06.099 --> 00:41:07.467 align:middle line:-1
<c.magenta>你们可能会有兴趣参加</c>

00:41:07.534 --> 00:41:08.869 align:middle line:-1
<c.magenta>要查看一些次要的具体信息</c>

00:41:08.936 --> 00:41:11.505 align:middle line:-2
<c.magenta>关于我们如何在硬件上</c>
<c.magenta>获得如此好的性能</c>

00:41:11.738 --> 00:41:14.141 align:middle line:-1
<c.magenta>请参看“Accelerate和Metal 2”演讲</c>

00:41:14.374 --> 00:41:15.209 align:middle line:-1
<c.magenta>谢谢大家</c>
