WEBVTT

00:00:21.126 --> 00:00:21.806 A:middle
&gt;&gt; 大家好

00:00:22.516 --> 00:00:26.546 A:middle
[掌声]

00:00:27.046 --> 00:00:28.206 A:middle
我相信你们在

00:00:28.206 --> 00:00:29.006 A:middle
WWDC 已经度过了一段愉快的时光

00:00:29.776 --> 00:00:31.216 A:middle
请允许我做一下自我介绍

00:00:31.906 --> 00:00:33.646 A:middle
我叫 Brett Keating

00:00:33.646 --> 00:00:34.896 A:middle
我将和我的同事 Frank Doepke 一起

00:00:34.896 --> 00:00:36.386 A:middle
向你们介绍

00:00:36.386 --> 00:00:38.256 A:middle
Apple 的 Vision 框架

00:00:38.256 --> 00:00:39.836 A:middle
让我们开始吧

00:00:39.836 --> 00:00:42.506 A:middle
首先我们将会展示

00:00:42.506 --> 00:00:43.716 A:middle
Vision 可以为你们的 App

00:00:43.716 --> 00:00:44.266 A:middle
做些什么

00:00:44.746 --> 00:00:45.686 A:middle
我们会展示一些

00:00:45.686 --> 00:00:47.126 A:middle
视觉示例

00:00:47.126 --> 00:00:48.106 A:middle
其中用到的算法将会在

00:00:48.106 --> 00:00:49.016 A:middle
今年的 Vision 框架中

00:00:49.016 --> 00:00:49.766 A:middle
提供

00:00:50.936 --> 00:00:51.976 A:middle
接下来会由

00:00:51.976 --> 00:00:54.636 A:middle
Frank 介绍

00:00:54.636 --> 00:00:56.116 A:middle
Vision 框架背后的概念

00:00:56.116 --> 00:00:57.566 A:middle
我们为什么要这样设计

00:00:57.566 --> 00:00:58.836 A:middle
以及我们 API 背后的

00:00:58.836 --> 00:01:00.696 A:middle
思维模型是什么样的

00:00:58.836 --> 00:01:00.696 A:middle
思维模型是什么样的

00:01:00.796 --> 00:01:02.516 A:middle
然后我们会进行深入的探讨

00:01:02.516 --> 00:01:04.906 A:middle
研究一个

00:01:04.906 --> 00:01:05.446 A:middle
代码示例

00:01:06.006 --> 00:01:08.796 A:middle
该代码示例结合了

00:01:08.796 --> 00:01:09.716 A:middle
我们的 SDK 中

00:01:09.716 --> 00:01:11.386 A:middle
很多不同的技术

00:01:11.496 --> 00:01:14.566 A:middle
包括 Core Image 和

00:01:14.566 --> 00:01:16.406 A:middle
全新的 Core ML 框架

00:01:16.656 --> 00:01:17.516 A:middle
我们将在今年提供该框架

00:01:18.386 --> 00:01:19.926 A:middle
你可以在框架中放入你的自定义模型

00:01:19.926 --> 00:01:21.226 A:middle
并使用

00:01:21.276 --> 00:01:23.746 A:middle
我们的硬件

00:01:24.896 --> 00:01:26.106 A:middle
进行加速

00:01:26.896 --> 00:01:28.716 A:middle
现在让我们从你可以使用

00:01:28.716 --> 00:01:29.326 A:middle
Vision 做什么开始谈起

00:01:30.596 --> 00:01:32.986 A:middle
首先是

00:01:32.986 --> 00:01:33.466 A:middle
人脸识别

00:01:33.466 --> 00:01:35.676 A:middle
虽然现在我们的 SDK 中

00:01:35.676 --> 00:01:37.136 A:middle
已经提供人脸识别的功能

00:01:37.866 --> 00:01:39.126 A:middle
但在今年的 Vision 框架中

00:01:39.126 --> 00:01:40.536 A:middle
我们将提供

00:01:40.536 --> 00:01:41.646 A:middle
基于深度学习的

00:01:41.646 --> 00:01:42.036 A:middle
人脸识别

00:01:43.246 --> 00:01:44.776 A:middle
你可能已经知道

00:01:44.986 --> 00:01:46.006 A:middle
深度学习

00:01:46.496 --> 00:01:47.786 A:middle
给 Vision 技术的准确性

00:01:47.786 --> 00:01:49.916 A:middle
带来了突破性的改变

00:01:49.986 --> 00:01:51.296 A:middle
人脸识别技术

00:01:51.296 --> 00:01:53.386 A:middle
也不例外

00:01:54.136 --> 00:01:54.886 A:middle
更高的准确性

00:01:54.886 --> 00:01:56.086 A:middle
意味着更少的误报

00:01:56.086 --> 00:01:57.686 A:middle
同时我们

00:01:57.686 --> 00:01:58.906 A:middle
的重调用也会显著地增加

00:01:59.326 --> 00:02:01.806 A:middle
也就是说

00:01:59.326 --> 00:02:01.806 A:middle
也就是说

00:02:01.806 --> 00:02:02.796 A:middle
识别能力会更强

00:02:03.286 --> 00:02:04.156 A:middle
让我们看一下

00:02:04.156 --> 00:02:05.986 A:middle
一些面部的例子

00:02:05.986 --> 00:02:07.446 A:middle
现在使用 Vision 框架

00:02:07.446 --> 00:02:08.106 A:middle
能够进行识别它们

00:02:08.936 --> 00:02:10.515 A:middle
首先我们能够识别

00:02:10.515 --> 00:02:11.756 A:middle
更小的面部

00:02:13.936 --> 00:02:15.536 A:middle
我们能够更好的识别

00:02:15.536 --> 00:02:17.066 A:middle
明显的侧脸

00:02:19.516 --> 00:02:21.386 A:middle
也能够更好的识别

00:02:21.846 --> 00:02:23.036 A:middle
被局部遮挡的脸

00:02:23.036 --> 00:02:25.616 A:middle
遮挡物包括

00:02:25.826 --> 00:02:27.276 A:middle
帽子和眼镜

00:02:27.276 --> 00:02:30.506 A:middle
关于面部的话题

00:02:30.506 --> 00:02:33.496 A:middle
还有一点要谈

00:02:33.496 --> 00:02:34.786 A:middle
在今年新的 Vision 框架中

00:02:34.786 --> 00:02:37.006 A:middle
我们将提供提供人脸特征点识别

00:02:37.656 --> 00:02:38.596 A:middle
什么是人脸特征点呢

00:02:39.496 --> 00:02:41.026 A:middle
它是一系列

00:02:41.026 --> 00:02:42.006 A:middle
我们在面部检测到的点的集合

00:02:42.006 --> 00:02:43.696 A:middle
其中包括眼角

00:02:43.696 --> 00:02:45.036 A:middle
嘴的外廓

00:02:45.036 --> 00:02:47.036 A:middle
和下颏的轮廓

00:02:48.316 --> 00:02:50.876 A:middle
比如说这样

00:02:50.876 --> 00:02:53.766 A:middle
这样

00:02:53.766 --> 00:02:54.266 A:middle
和这样

00:02:55.396 --> 00:02:56.946 A:middle
我们对此感到非常兴奋

00:02:56.946 --> 00:02:57.956 A:middle
我相信会有很多

00:02:57.956 --> 00:02:59.056 A:middle
使用这项技术的

00:02:59.056 --> 00:02:59.596 A:middle
优秀 App 出现

00:03:01.996 --> 00:03:03.696 A:middle
接下来是今年 Vision Framework 中

00:03:03.696 --> 00:03:04.776 A:middle
的另一项新技术

00:03:04.776 --> 00:03:05.426 A:middle
图像配准

00:03:06.026 --> 00:03:07.176 A:middle
如果你不知道图像配准是什么

00:03:07.176 --> 00:03:08.546 A:middle
简单来说

00:03:08.876 --> 00:03:11.126 A:middle
它会根据两张图像中的特征

00:03:11.126 --> 00:03:12.226 A:middle
对两张图像

00:03:12.226 --> 00:03:12.876 A:middle
进行校准

00:03:13.496 --> 00:03:15.826 A:middle
你可以使用该技术

00:03:15.826 --> 00:03:17.166 A:middle
拼接全景

00:03:17.286 --> 00:03:18.686 A:middle
如该例子所示

00:03:18.686 --> 00:03:19.726 A:middle
或进行图像叠加应用

00:03:20.536 --> 00:03:22.406 A:middle
我们有两种不同的技术

00:03:22.406 --> 00:03:24.126 A:middle
一种是仅进行转换

00:03:24.126 --> 00:03:24.756 A:middle
另一种是为你提供更加精确的

00:03:24.756 --> 00:03:27.176 A:middle
完整单应性矩阵

00:03:28.656 --> 00:03:31.136 A:middle
我们也会提供一些

00:03:31.136 --> 00:03:32.276 A:middle
我们 SDK 中已有的技术

00:03:32.276 --> 00:03:33.566 A:middle
现在它们可以通过 CIDetector 界面

00:03:33.566 --> 00:03:34.406 A:middle
获得

00:03:34.796 --> 00:03:35.706 A:middle
我们也将在

00:03:35.706 --> 00:03:36.776 A:middle
Vision API 中提供它们

00:03:36.896 --> 00:03:38.766 A:middle
这些技术包括矩形检测

00:03:38.766 --> 00:03:40.516 A:middle
正如你所见

00:03:40.516 --> 00:03:42.296 A:middle
我们检测出了图片中的标志

00:03:43.816 --> 00:03:45.566 A:middle
在 Vision API 中还有

00:03:45.566 --> 00:03:46.776 A:middle
条形码的

00:03:46.776 --> 00:03:50.726 A:middle
的检测与识别

00:03:52.256 --> 00:03:52.376 A:middle
和文本检测

00:03:53.766 --> 00:03:54.866 A:middle
另一个新技术

00:03:55.116 --> 00:03:55.976 A:middle
在今年的 Vision 框架中

00:03:55.976 --> 00:03:56.986 A:middle
全新呈现的是

00:03:56.986 --> 00:03:57.366 A:middle
目标追踪

00:03:58.186 --> 00:04:00.576 A:middle
你可以使用该技术追踪面部

00:03:58.186 --> 00:04:00.576 A:middle
你可以使用该技术追踪面部

00:04:00.576 --> 00:04:01.726 A:middle
在检测到面部的情况下

00:04:01.726 --> 00:04:03.246 A:middle
你可以将面部的矩形

00:04:03.246 --> 00:04:05.186 A:middle
作为追踪的初始条件

00:04:05.186 --> 00:04:06.436 A:middle
Vision 框架将

00:04:06.436 --> 00:04:07.756 A:middle
在你影片的

00:04:08.196 --> 00:04:09.056 A:middle
余下部分

00:04:09.056 --> 00:04:09.446 A:middle
追踪该矩形

00:04:10.246 --> 00:04:12.486 A:middle
我们可以追踪矩形

00:04:12.486 --> 00:04:14.036 A:middle
你也可以自己决定

00:04:14.036 --> 00:04:15.036 A:middle
初始条件

00:04:15.846 --> 00:04:17.426 A:middle
这是通用模板的含义

00:04:17.426 --> 00:04:19.456 A:middle
比如说如果你

00:04:19.456 --> 00:04:21.305 A:middle
和我一样

00:04:21.305 --> 00:04:24.656 A:middle
用正方形框出这个冲浪选手

00:04:24.656 --> 00:04:27.116 A:middle
接着播放影片

00:04:27.116 --> 00:04:27.376 A:middle
进行追踪

00:04:29.336 --> 00:04:30.556 A:middle
可以看到

00:04:30.556 --> 00:04:32.666 A:middle
大幅度的缩放

00:04:32.756 --> 00:04:34.396 A:middle
和扭曲变形并没有影响追踪

00:04:34.396 --> 00:04:35.746 A:middle
表明该技术较为稳定

00:04:39.096 --> 00:04:40.266 A:middle
另一项激动人心的

00:04:41.296 --> 00:04:42.956 A:middle
今年 Apple SDK 的新技术

00:04:42.956 --> 00:04:45.086 A:middle
是 Core ML

00:04:45.086 --> 00:04:46.126 A:middle
并且你可以将你的 Core ML 模型

00:04:46.126 --> 00:04:47.576 A:middle
直接集成到 Vision 中

00:04:48.236 --> 00:04:50.916 A:middle
正如我所说

00:04:50.916 --> 00:04:52.496 A:middle
机器学习对

00:04:52.496 --> 00:04:55.336 A:middle
计算机视觉做出了很大的贡献

00:04:55.336 --> 00:04:57.066 A:middle
你可以使用 Core ML

00:04:57.066 --> 00:04:58.166 A:middle
如果你想要创建自己的模型

00:04:58.166 --> 00:04:58.716 A:middle
做出自己的解决方案

00:04:59.416 --> 00:05:01.246 A:middle
比如说你可能想要

00:04:59.416 --> 00:05:01.246 A:middle
比如说你可能想要

00:05:01.246 --> 00:05:02.476 A:middle
创建一个婚礼应用

00:05:02.986 --> 00:05:06.316 A:middle
用于识别婚礼中

00:05:06.316 --> 00:05:08.006 A:middle
何时应该举行婚宴

00:05:08.006 --> 00:05:08.956 A:middle
何时

00:05:08.956 --> 00:05:09.816 A:middle
新娘应该

00:05:09.816 --> 00:05:10.686 A:middle
步入走廊

00:05:11.416 --> 00:05:12.456 A:middle
如果你想要训练

00:05:12.456 --> 00:05:14.706 A:middle
自己的模型

00:05:14.706 --> 00:05:17.196 A:middle
并且你有足够的数据进行训练

00:05:17.196 --> 00:05:17.476 A:middle
那你能够这样做

00:05:18.556 --> 00:05:20.766 A:middle
正如我提到的 Core ML

00:05:20.766 --> 00:05:22.116 A:middle
为自定义模型提供本地加速

00:05:22.116 --> 00:05:23.206 A:middle
使它们能够快速运行

00:05:23.206 --> 00:05:25.706 A:middle
Vision 提供了支持这些模型的

00:05:25.706 --> 00:05:26.876 A:middle
成像流水线

00:05:26.876 --> 00:05:28.776 A:middle
因此你不需要

00:05:28.776 --> 00:05:30.276 A:middle
进行任何的重新调节或类似操作

00:05:30.276 --> 00:05:31.156 A:middle
我们将

00:05:31.156 --> 00:05:31.586 A:middle
负责一切

00:05:31.586 --> 00:05:33.106 A:middle
我们知道你的模型需要什么

00:05:33.106 --> 00:05:34.476 A:middle
我们会提供

00:05:34.476 --> 00:05:35.626 A:middle
正确格式的图像

00:05:37.596 --> 00:05:38.826 A:middle
如果你对 Core ML 感兴趣

00:05:38.826 --> 00:05:40.396 A:middle
你可以参加其他一些的会议

00:05:40.396 --> 00:05:42.576 A:middle
下方列出了

00:05:42.576 --> 00:05:43.306 A:middle
研究室的名称

00:05:43.866 --> 00:05:45.346 A:middle
有一场是在明天早上

00:05:45.346 --> 00:05:47.356 A:middle
另一场是在

00:05:47.356 --> 00:05:47.986 A:middle
周五下午

00:05:49.446 --> 00:05:51.386 A:middle
基本上

00:05:51.386 --> 00:05:52.346 A:middle
这些就是 Vision 框架中的

00:05:52.346 --> 00:05:52.796 A:middle
特点

00:05:54.236 --> 00:05:56.526 A:middle
总的来说 Apple 全新的

00:05:56.526 --> 00:05:58.306 A:middle
Vision 框架为计算机视觉问题

00:05:58.766 --> 00:06:00.776 A:middle
提供了高层的设备内解决方案

00:05:58.766 --> 00:06:00.776 A:middle
提供了高层的设备内解决方案

00:06:01.306 --> 00:06:02.586 A:middle
并且仅靠

00:06:02.706 --> 00:06:03.756 A:middle
一个简单的 API 实现

00:06:03.756 --> 00:06:06.576 A:middle
现在让我们稍微具体一点

00:06:06.576 --> 00:06:08.266 A:middle
分析这段叙述

00:06:09.276 --> 00:06:10.586 A:middle
什么是高层的

00:06:10.586 --> 00:06:11.186 A:middle
解决方案

00:06:11.896 --> 00:06:14.336 A:middle
我们不需要你

00:06:14.336 --> 00:06:15.556 A:middle
是计算机视觉专家

00:06:15.556 --> 00:06:16.876 A:middle
才能在你的应用中使用

00:06:16.876 --> 00:06:18.066 A:middle
计算机视觉的神奇功能

00:06:18.656 --> 00:06:20.706 A:middle
你也不想必须了解

00:06:20.706 --> 00:06:22.216 A:middle
要使用的是哪一个

00:06:22.216 --> 00:06:23.636 A:middle
特征探测器

00:06:23.636 --> 00:06:25.086 A:middle
要与什么分类器

00:06:25.086 --> 00:06:26.966 A:middle
或分类器组结合

00:06:26.966 --> 00:06:28.366 A:middle
我们会为你解决这些问题

00:06:28.366 --> 00:06:29.196 A:middle
说实话

00:06:29.196 --> 00:06:30.216 A:middle
你是否想要使用机器学习

00:06:30.976 --> 00:06:31.946 A:middle
如果你是开发人员

00:06:32.326 --> 00:06:33.426 A:middle
你可能会想

00:06:33.426 --> 00:06:34.246 A:middle
我只想要知道面部的位置

00:06:35.626 --> 00:06:36.506 A:middle
因此我们会为你解决

00:06:36.506 --> 00:06:37.666 A:middle
所有复杂的过程

00:06:38.926 --> 00:06:42.166 A:middle
根据你的使用场景

00:06:42.166 --> 00:06:43.896 A:middle
我们会选择使用传统方案

00:06:43.896 --> 00:06:45.206 A:middle
如果你的应用确实需要如此

00:06:45.206 --> 00:06:46.846 A:middle
比如说一些实时应用

00:06:46.846 --> 00:06:49.166 A:middle
或者使用深度学习算法

00:06:49.416 --> 00:06:50.176 A:middle
以获得更高的精确性

00:06:50.846 --> 00:06:54.186 A:middle
我也说到

00:06:54.186 --> 00:06:55.666 A:middle
所有的算法都会在设备内实现

00:06:55.666 --> 00:06:58.116 A:middle
让我们介绍一下

00:06:58.116 --> 00:07:00.436 A:middle
为什么我们希望

00:06:58.116 --> 00:07:00.436 A:middle
为什么我们希望

00:07:00.436 --> 00:07:01.916 A:middle
在设备内进行处理

00:07:01.916 --> 00:07:02.906 A:middle
而不是提供基于云的解决方案

00:07:03.396 --> 00:07:05.766 A:middle
首先这是隐私问题

00:07:06.866 --> 00:07:08.836 A:middle
你们知道

00:07:08.836 --> 00:07:11.006 A:middle
Apple 非常重视隐私

00:07:11.006 --> 00:07:12.476 A:middle
我在 Apple 工作时也非常重视隐私

00:07:12.796 --> 00:07:14.136 A:middle
有时这会增加

00:07:14.136 --> 00:07:16.446 A:middle
工作难度

00:07:17.026 --> 00:07:18.056 A:middle
但将你所有的数据保存在设备中

00:07:18.056 --> 00:07:20.156 A:middle
是保护你用户

00:07:20.156 --> 00:07:21.736 A:middle
数据隐私的

00:07:21.736 --> 00:07:22.176 A:middle
最好方法

00:07:24.456 --> 00:07:26.276 A:middle
此外

00:07:26.276 --> 00:07:28.036 A:middle
基于云的解决方法

00:07:28.036 --> 00:07:29.106 A:middle
会带来相关成本

00:07:29.306 --> 00:07:31.616 A:middle
如果你是开发人员

00:07:31.616 --> 00:07:32.796 A:middle
你可能要为基于云的解决方案

00:07:32.796 --> 00:07:33.976 A:middle
支付使用费

00:07:35.316 --> 00:07:37.146 A:middle
你的用户则必须

00:07:37.146 --> 00:07:38.066 A:middle
将数据转移到云中

00:07:39.516 --> 00:07:41.306 A:middle
因此会增加

00:07:41.306 --> 00:07:42.296 A:middle
开发人员和用户的

00:07:42.296 --> 00:07:42.726 A:middle
成本

00:07:42.956 --> 00:07:44.506 A:middle
而当所有数据都在设备上时

00:07:44.506 --> 00:07:45.586 A:middle
就是免费的

00:07:45.816 --> 00:07:50.566 A:middle
你可以支持实时

00:07:50.566 --> 00:07:51.966 A:middle
使用场景就像

00:07:51.966 --> 00:07:52.756 A:middle
之前我展示的对象追踪例子一样

00:07:53.566 --> 00:07:54.616 A:middle
想象一下

00:07:54.616 --> 00:07:55.536 A:middle
要在影片中追踪某个对象

00:07:55.536 --> 00:07:56.416 A:middle
需要将每一帧上传到云

00:07:56.416 --> 00:07:57.926 A:middle
我不认为

00:07:57.926 --> 00:07:58.556 A:middle
那是个好办法

00:07:59.226 --> 00:08:01.456 A:middle
所以我们通过 Vision 框架

00:07:59.226 --> 00:08:01.456 A:middle
所以我们通过 Vision 框架

00:08:01.926 --> 00:08:02.946 A:middle
提供的是一个

00:08:03.226 --> 00:08:03.896 A:middle
无延迟快速执行的解决方案

00:08:04.786 --> 00:08:07.696 A:middle
我希望你们喜欢我的介绍

00:08:08.076 --> 00:08:09.186 A:middle
现在我们将要

00:08:09.186 --> 00:08:12.226 A:middle
深入一些

00:08:12.226 --> 00:08:13.446 A:middle
探讨 Vision 的概念

00:08:13.446 --> 00:08:13.996 A:middle
我将把

00:08:13.996 --> 00:08:15.356 A:middle
这一部分的展示

00:08:15.356 --> 00:08:15.976 A:middle
交给 Frank

00:08:16.516 --> 00:08:19.566 A:middle
[掌声]

00:08:20.066 --> 00:08:20.556 A:middle
&gt;&gt; 谢谢你 Brett

00:08:22.956 --> 00:08:24.406 A:middle
大家下午好

00:08:24.406 --> 00:08:25.466 A:middle
我叫 Frank Doepke

00:08:25.466 --> 00:08:26.996 A:middle
我将更多的介绍

00:08:26.996 --> 00:08:28.876 A:middle
技术细节

00:08:28.876 --> 00:08:29.496 A:middle
作为 Vision 框架的一部分

00:08:29.796 --> 00:08:33.916 A:middle
所以我们想做的是

00:08:33.916 --> 00:08:35.726 A:middle
当我们想要分析一个图像时

00:08:35.916 --> 00:08:37.836 A:middle
实际上我们想要完成的

00:08:37.836 --> 00:08:39.816 A:middle
主要任务有三个

00:08:40.275 --> 00:08:41.416 A:middle
第一个是询问

00:08:41.416 --> 00:08:42.576 A:middle
找出图像里有什么

00:08:42.576 --> 00:08:43.456 A:middle
和我需要知道的是什么

00:08:44.316 --> 00:08:45.356 A:middle
第二个是处理设备

00:08:46.076 --> 00:08:47.166 A:middle
即完成工作的设备

00:08:47.676 --> 00:08:48.956 A:middle
第三个是结果

00:08:48.956 --> 00:08:50.316 A:middle
至少这是我们

00:08:50.316 --> 00:08:51.206 A:middle
希望的流程

00:08:52.106 --> 00:08:54.036 A:middle
用 Vision 的术语来说

00:08:54.036 --> 00:08:56.046 A:middle
这里的询问就是

00:08:56.046 --> 00:08:56.836 A:middle
请求

00:08:57.476 --> 00:08:59.166 A:middle
我列出了刚才的例子

00:08:59.166 --> 00:09:01.016 A:middle
像条形码检测

00:08:59.166 --> 00:09:01.016 A:middle
像条形码检测

00:09:01.016 --> 00:09:03.936 A:middle
或面部识别

00:09:03.936 --> 00:09:07.016 A:middle
我们都是将请求输入 Request Handler（请求处理器）

00:09:07.926 --> 00:09:08.996 A:middle
在这个例子中

00:09:08.996 --> 00:09:10.106 A:middle
是图像请求

00:09:10.176 --> 00:09:11.136 A:middle
它将处理图像

00:09:11.446 --> 00:09:12.576 A:middle
并为我们完成

00:09:12.576 --> 00:09:13.416 A:middle
所有的工作

00:09:14.066 --> 00:09:16.486 A:middle
结果是我们获得了

00:09:16.526 --> 00:09:18.086 A:middle
被称为观察结果的信息

00:09:18.086 --> 00:09:19.446 A:middle
指的是在这个图像中我们观察到了什么

00:09:20.046 --> 00:09:21.666 A:middle
观察结果取决于

00:09:21.666 --> 00:09:22.726 A:middle
请求的内容

00:09:23.006 --> 00:09:24.516 A:middle
于是我们有了分类的观察结果

00:09:24.516 --> 00:09:26.956 A:middle
或被检测的对象

00:09:27.786 --> 00:09:28.986 A:middle
现在当你想在

00:09:28.986 --> 00:09:30.076 A:middle
该队列中追踪某个对象

00:09:30.076 --> 00:09:32.656 A:middle
如冲浪选手

00:09:32.656 --> 00:09:33.466 A:middle
基本概念是不变的

00:09:33.566 --> 00:09:34.796 A:middle
我们有了询问

00:09:34.796 --> 00:09:36.376 A:middle
处理设备

00:09:36.376 --> 00:09:39.096 A:middle
最终可以获得结果

00:09:39.096 --> 00:09:40.826 A:middle
重申一次  询问就是请求

00:09:41.426 --> 00:09:42.936 A:middle
因为对每一帧

00:09:42.936 --> 00:09:44.686 A:middle
的请求都在变化

00:09:44.686 --> 00:09:45.926 A:middle
图像实际上在随着请求移动

00:09:47.736 --> 00:09:48.936 A:middle
我们的设备

00:09:48.936 --> 00:09:49.826 A:middle
也就是请求处理器

00:09:49.826 --> 00:09:52.506 A:middle
会通过队列请求处理器处理请求

00:09:52.506 --> 00:09:54.046 A:middle
于是我们获得被称作观察结果的结果

00:09:54.046 --> 00:09:55.906 A:middle
它们符合

00:09:55.976 --> 00:09:56.546 A:middle
我们的请求

00:09:58.086 --> 00:10:00.866 A:middle
让我来进一步介绍

00:09:58.086 --> 00:10:00.866 A:middle
让我来进一步介绍

00:10:00.866 --> 00:10:02.066 A:middle
刚刚提到的

00:10:02.066 --> 00:10:02.966 A:middle
两个

00:10:02.966 --> 00:10:03.806 A:middle
图像请求处理器

00:10:04.476 --> 00:10:05.606 A:middle
我们的图像 Request Handler

00:10:05.606 --> 00:10:07.666 A:middle
可以处理

00:10:07.666 --> 00:10:09.026 A:middle
大部分你想要与图像

00:10:09.026 --> 00:10:09.736 A:middle
交互的请求

00:10:10.166 --> 00:10:11.386 A:middle
你想要在一个图像上

00:10:11.386 --> 00:10:13.466 A:middle
完成多个 Vision 任务

00:10:13.466 --> 00:10:15.116 A:middle
有时其实你只做了一个

00:10:15.116 --> 00:10:16.566 A:middle
然后根据结果开始

00:10:16.566 --> 00:10:17.926 A:middle
下一个任务

00:10:17.926 --> 00:10:19.016 A:middle
这就是你想要使用图像 Request Handler

00:10:19.016 --> 00:10:19.486 A:middle
完成的

00:10:19.966 --> 00:10:21.296 A:middle
它将在整个处理过程中

00:10:21.296 --> 00:10:22.446 A:middle
保留图像

00:10:22.446 --> 00:10:25.366 A:middle
因此我们可以

00:10:25.396 --> 00:10:26.856 A:middle
在其中进行

00:10:26.856 --> 00:10:28.856 A:middle
性能优化

00:10:28.856 --> 00:10:30.996 A:middle
通过保留中间产物

00:10:31.146 --> 00:10:32.866 A:middle
让请求的处理速度

00:10:32.866 --> 00:10:33.276 A:middle
加快

00:10:34.016 --> 00:10:36.466 A:middle
另一方面

00:10:36.466 --> 00:10:37.726 A:middle
如果想要追踪某一对象

00:10:37.726 --> 00:10:38.816 A:middle
我们会使用 Sequence Request Handler（队列请求处理器）

00:10:39.276 --> 00:10:40.516 A:middle
Sequence Request Handler

00:10:40.516 --> 00:10:42.086 A:middle
让我们能够

00:10:42.186 --> 00:10:42.996 A:middle
在处理器中

00:10:42.996 --> 00:10:43.666 A:middle
追踪对象

00:10:44.316 --> 00:10:46.136 A:middle
它不会

00:10:46.136 --> 00:10:47.466 A:middle
在处理过程中

00:10:47.466 --> 00:10:48.626 A:middle
保留所有的图像

00:10:48.626 --> 00:10:49.326 A:middle
因此图像会被提前释放

00:10:50.056 --> 00:10:51.536 A:middle
但另一方面  这也意味着

00:10:51.776 --> 00:10:53.486 A:middle
如果你想在同一个图像上完成

00:10:53.486 --> 00:10:54.866 A:middle
多个请求

00:10:54.866 --> 00:10:56.146 A:middle
你将无法

00:10:56.146 --> 00:10:56.486 A:middle
进行优化

00:10:57.716 --> 00:10:59.836 A:middle
所以该功能的代码实现是怎样的呢

00:10:59.836 --> 00:11:01.596 A:middle
作为开发人员

00:10:59.836 --> 00:11:01.596 A:middle
作为开发人员

00:11:01.596 --> 00:11:02.526 A:middle
这是我们想知道的

00:11:04.116 --> 00:11:05.606 A:middle
首先从空白开始

00:11:05.606 --> 00:11:07.316 A:middle
这是我们乐于见到的

00:11:07.316 --> 00:11:08.446 A:middle
然后创建一个请求

00:11:08.886 --> 00:11:10.466 A:middle
在这里

00:11:10.466 --> 00:11:12.746 A:middle
是一个人脸识别请求

00:11:13.346 --> 00:11:14.496 A:middle
现在我们来创建 Request Handler

00:11:14.496 --> 00:11:16.546 A:middle
现在我选择的是

00:11:16.546 --> 00:11:17.816 A:middle
基于文件的 Request Handler

00:11:17.816 --> 00:11:19.216 A:middle
因为磁盘上

00:11:19.216 --> 00:11:22.556 A:middle
有我想要使用的文件

00:11:22.556 --> 00:11:24.026 A:middle
现在我询问 myRequestHandler

00:11:24.026 --> 00:11:25.646 A:middle
来完成我的请求

00:11:25.646 --> 00:11:27.566 A:middle
在这里

00:11:27.566 --> 00:11:29.716 A:middle
我的数组中只有一个请求

00:11:29.716 --> 00:11:32.746 A:middle
而实际上可以有很多

00:11:32.906 --> 00:11:33.836 A:middle
我得到了我的观察结果

00:11:34.996 --> 00:11:36.606 A:middle
我可以检测到

00:11:36.606 --> 00:11:37.266 A:middle
很多个面部

00:11:37.836 --> 00:11:39.216 A:middle
在此我要强调的一点是

00:11:39.216 --> 00:11:42.746 A:middle
结果会作为

00:11:43.006 --> 00:11:45.036 A:middle
请求的一部分被返回

00:11:45.156 --> 00:11:46.076 A:middle
该请求就是我们

00:11:46.076 --> 00:11:46.526 A:middle
最初创建的

00:11:46.526 --> 00:11:49.916 A:middle
当我们想追踪某物体时

00:11:51.076 --> 00:11:52.506 A:middle
代码又是什么样的呢

00:11:52.616 --> 00:11:53.946 A:middle
我们创建一个

00:11:54.966 --> 00:11:55.776 A:middle
Sequence Request Handler

00:11:55.776 --> 00:11:57.026 A:middle
当然不设置为图像

00:11:57.216 --> 00:11:58.236 A:middle
因为我们需要处理

00:11:58.236 --> 00:11:59.656 A:middle
队列中的每一帧

00:12:01.476 --> 00:12:02.326 A:middle
因此我可以从

00:12:02.326 --> 00:12:03.906 A:middle
先前检测的

00:12:03.906 --> 00:12:05.906 A:middle
观察结果开始

00:12:05.956 --> 00:12:07.596 A:middle
或者我可以自行设置

00:12:07.596 --> 00:12:09.276 A:middle
创建自己的追踪请求

00:12:09.826 --> 00:12:12.026 A:middle
我只需要运行

00:12:12.026 --> 00:12:12.596 A:middle
这个请求

00:12:13.246 --> 00:12:15.036 A:middle
在这里我输入的是

00:12:15.036 --> 00:12:17.026 A:middle
PixelBuffer

00:12:17.026 --> 00:12:17.996 A:middle
就是正在拖动的帧

00:12:19.406 --> 00:12:21.176 A:middle
然后从处理器中

00:12:21.176 --> 00:12:21.616 A:middle
我得到了结果

00:12:22.246 --> 00:12:25.246 A:middle
我们已经说明了

00:12:25.246 --> 00:12:26.816 A:middle
这个 API 是如何结构化的

00:12:26.816 --> 00:12:28.426 A:middle
我想向你们展示

00:12:28.426 --> 00:12:30.066 A:middle
一些优秀的实践事例

00:12:30.066 --> 00:12:31.616 A:middle
让你们知道 Vision

00:12:31.616 --> 00:12:33.006 A:middle
最佳的体验是怎样的

00:12:33.666 --> 00:12:37.456 A:middle
当我们需要完成

00:12:37.456 --> 00:12:38.936 A:middle
一件计算机视觉任务时

00:12:38.936 --> 00:12:39.886 A:middle
你需要考虑几件事情

00:12:41.476 --> 00:12:43.216 A:middle
第一

00:12:43.216 --> 00:12:44.586 A:middle
我想使用哪种图像类型

00:12:45.826 --> 00:12:47.876 A:middle
第二

00:12:47.876 --> 00:12:48.746 A:middle
我要对图像进行哪些处理

00:12:50.396 --> 00:12:52.196 A:middle
第三

00:12:52.226 --> 00:12:53.496 A:middle
我需要或想要什么性能

00:12:53.496 --> 00:12:54.346 A:middle
当然你会想要

00:12:54.346 --> 00:12:55.346 A:middle
最快的

00:12:55.346 --> 00:12:56.356 A:middle
但你必须在许多因素之间

00:12:56.356 --> 00:12:56.636 A:middle
做出折衷

00:12:57.026 --> 00:12:59.136 A:middle
那么让我们讨论一下

00:13:00.526 --> 00:13:00.636 A:middle
图像类型

00:13:00.846 --> 00:13:02.346 A:middle
Vision 支持很多

00:13:02.346 --> 00:13:04.196 A:middle
图像类型

00:13:04.196 --> 00:13:06.836 A:middle
从 CVPixelBuffer 到 CGIImage

00:13:06.836 --> 00:13:09.276 A:middle
甚至还有之前例子中的

00:13:09.276 --> 00:13:11.446 A:middle
NSData

00:13:11.446 --> 00:13:12.606 A:middle
和 NSURL

00:13:13.216 --> 00:13:15.776 A:middle
在下面的几页中

00:13:15.886 --> 00:13:17.076 A:middle
我们会一一展示这些图像类型

00:13:17.076 --> 00:13:18.396 A:middle
让你知道何时选择何种类型

00:13:20.556 --> 00:13:22.756 A:middle
这很多因素决定的

00:13:22.756 --> 00:13:23.916 A:middle
比如你想要做什么

00:13:23.916 --> 00:13:25.836 A:middle
从相机流

00:13:25.836 --> 00:13:27.596 A:middle
或磁盘文件运行是不一样的

00:13:28.346 --> 00:13:29.996 A:middle
你需要确定这一点

00:13:30.096 --> 00:13:31.396 A:middle
因为它决定了

00:13:31.396 --> 00:13:32.856 A:middle
你想要选择何种图像

00:13:33.246 --> 00:13:34.536 A:middle
要记住重要的两点

00:13:34.536 --> 00:13:37.576 A:middle
我们已经在 Vision 框架中

00:13:37.666 --> 00:13:39.206 A:middle
加入图像流水线

00:13:39.206 --> 00:13:41.076 A:middle
你不需要

00:13:41.076 --> 00:13:42.006 A:middle
对图像进行缩放

00:13:42.406 --> 00:13:43.616 A:middle
因此除非

00:13:43.616 --> 00:13:44.926 A:middle
你已经有绝对要使用的

00:13:44.926 --> 00:13:45.806 A:middle
小图像

00:13:45.856 --> 00:13:47.136 A:middle
请不要预先压缩图像

00:13:47.246 --> 00:13:50.476 A:middle
因为这样的话我们就会重复工作

00:13:50.666 --> 00:13:52.356 A:middle
此外  还要注意图像方向

00:13:52.526 --> 00:13:54.086 A:middle
计算机视觉算法大多数时候

00:13:54.086 --> 00:13:57.056 A:middle
(对方向不敏感)

00:13:57.056 --> 00:13:59.226 A:middle
对不起

00:13:59.356 --> 00:14:01.176 A:middle
它们对方向敏感

00:13:59.356 --> 00:14:01.176 A:middle
它们对方向敏感

00:14:01.236 --> 00:14:02.576 A:middle
所以你需要确认传入的图像

00:14:03.166 --> 00:14:04.586 A:middle
这是非常重要的

00:14:04.586 --> 00:14:05.676 A:middle
因为如果你传入了

00:14:05.816 --> 00:14:07.206 A:middle
横向侧放的

00:14:07.206 --> 00:14:08.166 A:middle
肖像图像

00:14:08.166 --> 00:14:09.616 A:middle
我们将无法找到面部

00:14:09.616 --> 00:14:10.996 A:middle
这也是经常发生的

00:14:10.996 --> 00:14:11.386 A:middle
常见错误

00:14:12.906 --> 00:14:14.396 A:middle
让我们来看看

00:14:14.396 --> 00:14:14.846 A:middle
各种图像类型

00:14:15.796 --> 00:14:16.696 A:middle
当你想要完成与流相关的处理时

00:14:16.696 --> 00:14:17.866 A:middle
可以使用

00:14:17.866 --> 00:14:18.746 A:middle
CVPixelBuffer

00:14:19.906 --> 00:14:21.956 A:middle
当你创建 VideoDataOut 时

00:14:21.956 --> 00:14:23.206 A:middle
你会得到

00:14:23.286 --> 00:14:24.776 A:middle
CMSampleBuffers

00:14:24.916 --> 00:14:25.806 A:middle
我们将从中获得你的

00:14:25.866 --> 00:14:26.686 A:middle
CVPixelBuffers

00:14:27.856 --> 00:14:29.456 A:middle
这也是一个很好的图像格式

00:14:29.456 --> 00:14:30.886 A:middle
如果你已经

00:14:30.886 --> 00:14:32.806 A:middle
将你的原始图像数据如 LGB Pixel

00:14:32.806 --> 00:14:34.376 A:middle
保存在存储器中

00:14:34.376 --> 00:14:35.936 A:middle
将它们打包成为

00:14:35.936 --> 00:14:37.276 A:middle
CVPixelBuffer

00:14:37.276 --> 00:14:38.496 A:middle
这是传入 Vision 很好的格式

00:14:40.666 --> 00:14:41.976 A:middle
如果你从磁盘上获得文件

00:14:42.146 --> 00:14:44.046 A:middle
请使用 URL

00:14:44.046 --> 00:14:44.996 A:middle
如果它来源于网络

00:14:44.996 --> 00:14:46.926 A:middle
请使用 NSData 路径

00:14:47.126 --> 00:14:48.886 A:middle
最棒的是

00:14:48.886 --> 00:14:50.796 A:middle
它让我们能够减少

00:14:50.796 --> 00:14:51.936 A:middle
为你在应用中打印所分配的

00:14:51.936 --> 00:14:52.616 A:middle
内存

00:14:53.086 --> 00:14:54.566 A:middle
Vision 将只会读取

00:14:54.566 --> 00:14:56.236 A:middle
完成任务需要的数据

00:14:57.156 --> 00:14:58.256 A:middle
如果你想要在

00:14:58.256 --> 00:14:59.226 A:middle
6400 万像素的全景中

00:14:59.226 --> 00:15:02.376 A:middle
做人脸识别

00:14:59.226 --> 00:15:02.376 A:middle
做人脸识别

00:15:02.376 --> 00:15:03.526 A:middle
Vision 会真正降低所需内存

00:15:03.526 --> 00:15:04.936 A:middle
它不会将完整文件

00:15:04.936 --> 00:15:06.436 A:middle
读入内存

00:15:06.436 --> 00:15:07.466 A:middle
这一点

00:15:07.466 --> 00:15:08.136 A:middle
要牢记

00:15:10.396 --> 00:15:12.006 A:middle
这个例子中我们会从文件

00:15:12.006 --> 00:15:13.336 A:middle
读取 EXIF Orientation

00:15:13.336 --> 00:15:15.336 A:middle
你也可以重写

00:15:15.336 --> 00:15:17.266 A:middle
如果图像格式

00:15:17.266 --> 00:15:18.706 A:middle
不支持该操作的话

00:15:20.666 --> 00:15:22.126 A:middle
如果你已经在应用中

00:15:22.166 --> 00:15:24.076 A:middle
使用 Core Image

00:15:24.076 --> 00:15:25.286 A:middle
那当然应该传入 CI image

00:15:25.286 --> 00:15:27.366 A:middle
当你想做一些

00:15:27.366 --> 00:15:28.096 A:middle
预处理时

00:15:28.096 --> 00:15:28.806 A:middle
这也非常重要

00:15:28.806 --> 00:15:29.786 A:middle
如果你有专业知识

00:15:29.786 --> 00:15:30.946 A:middle
知道你想在计算机视觉任务

00:15:30.946 --> 00:15:33.286 A:middle
中做什么

00:15:33.286 --> 00:15:34.506 A:middle
你可以做一些预处理

00:15:34.506 --> 00:15:35.766 A:middle
尝试加强图像

00:15:35.806 --> 00:15:37.186 A:middle
这样可以加强

00:15:37.186 --> 00:15:37.716 A:middle
Vision 的结果

00:15:39.346 --> 00:15:40.316 A:middle
如果你想了解更多关于

00:15:40.316 --> 00:15:42.706 A:middle
Core Image 的信息

00:15:42.706 --> 00:15:45.006 A:middle
周四 1:50 有相关会议

00:15:45.396 --> 00:15:46.146 A:middle
他们将展示 Core Image

00:15:46.146 --> 00:15:47.836 A:middle
与 Vision 框架

00:15:47.836 --> 00:15:48.286 A:middle
的集成

00:15:48.756 --> 00:15:52.276 A:middle
最后但同样重要的是

00:15:52.276 --> 00:15:54.246 A:middle
对于你应用界面中的所有图像

00:15:54.426 --> 00:15:56.346 A:middle
你可以使用 CGimage

00:15:56.716 --> 00:15:59.116 A:middle
转化 NSimage 或 UIimage

00:15:59.226 --> 00:16:01.196 A:middle
它来自

00:15:59.226 --> 00:16:01.196 A:middle
它来自

00:16:01.196 --> 00:16:02.906 A:middle
UIImagePicker

00:16:02.976 --> 00:16:03.686 A:middle
并将它们传入 Vision

00:16:03.806 --> 00:16:07.006 A:middle
如果我想对图像进行操作

00:16:07.096 --> 00:16:08.496 A:middle
现在就要决定

00:16:08.496 --> 00:16:10.236 A:middle
我是否想与图像进行交互

00:16:10.236 --> 00:16:11.346 A:middle
如果想要与其交互

00:16:11.426 --> 00:16:13.206 A:middle
就要使用

00:16:13.206 --> 00:16:14.336 A:middle
Image Request Handler（图像请求处理器）

00:16:14.606 --> 00:16:16.226 A:middle
它会保留图像

00:16:16.226 --> 00:16:17.926 A:middle
让我可以在图像上

00:16:17.926 --> 00:16:19.656 A:middle
做多种操作

00:16:19.656 --> 00:16:20.866 A:middle
获得最好的结果

00:16:22.126 --> 00:16:23.426 A:middle
现在 CVPixelBuffer

00:16:23.426 --> 00:16:24.926 A:middle
在技术上可以允许你

00:16:24.926 --> 00:16:26.826 A:middle
更改输入图像的像素

00:16:27.226 --> 00:16:28.216 A:middle
但我们将图像视作不可变的

00:16:28.216 --> 00:16:29.756 A:middle
因此不要尝试更改

00:16:29.756 --> 00:16:30.776 A:middle
因为如果那样我们会得到

00:16:30.776 --> 00:16:31.246 A:middle
奇怪的结果

00:16:31.546 --> 00:16:35.406 A:middle
那么如果你想追踪

00:16:35.606 --> 00:16:36.816 A:middle
某个对象

00:16:36.816 --> 00:16:38.156 A:middle
我们会使用 Sequence Request Handler

00:16:39.636 --> 00:16:40.506 A:middle
它让我们始终保持

00:16:40.506 --> 00:16:42.946 A:middle
追踪的状态

00:16:42.946 --> 00:16:44.676 A:middle
并且图像与 Request Handler

00:16:44.736 --> 00:16:46.256 A:middle
不再紧密相关

00:16:46.296 --> 00:16:47.576 A:middle
只保留需要追踪的

00:16:47.576 --> 00:16:47.976 A:middle
时间

00:16:52.176 --> 00:16:53.976 A:middle
性能上

00:16:53.976 --> 00:16:55.796 A:middle
这些 Vision 任务经常需要密集计算

00:16:55.796 --> 00:16:57.726 A:middle
很花时间

00:16:57.726 --> 00:16:59.056 A:middle
因此你需要考虑

00:16:59.056 --> 00:17:01.486 A:middle
事实上不在主队列中

00:16:59.056 --> 00:17:01.486 A:middle
事实上不在主队列中

00:17:01.486 --> 00:17:03.376 A:middle
而是换一个其他队列

00:17:03.856 --> 00:17:05.465 A:middle
运行任务

00:17:06.616 --> 00:17:08.296 A:middle
你还要考虑是否要

00:17:08.296 --> 00:17:09.376 A:middle
在后台完成

00:17:09.376 --> 00:17:11.086 A:middle
这可能会有点慢

00:17:11.086 --> 00:17:12.356 A:middle
若要得到更快的性能

00:17:12.356 --> 00:17:13.915 A:middle
你需要使用

00:17:14.366 --> 00:17:15.516 A:middle
交互质量更高的服务

00:17:16.596 --> 00:17:19.276 A:middle
一个很好的例子是使用

00:17:19.276 --> 00:17:22.026 A:middle
Completion Handler

00:17:22.056 --> 00:17:23.606 A:middle
获得结果

00:17:23.606 --> 00:17:24.026 A:middle
它也是我们 API 的一部分

00:17:24.026 --> 00:17:26.165 A:middle
但要记住

00:17:26.215 --> 00:17:27.866 A:middle
Completion Handler 只会获得

00:17:27.915 --> 00:17:29.236 A:middle
触发它的队列

00:17:29.236 --> 00:17:30.686 A:middle
的结果

00:17:30.686 --> 00:17:32.576 A:middle
因此如果你需要

00:17:32.576 --> 00:17:33.936 A:middle
更新 UI

00:17:33.936 --> 00:17:34.746 A:middle
你需要把它派回主队列中

00:17:35.426 --> 00:17:38.796 A:middle
正如 Brett 已经强调的那样

00:17:38.796 --> 00:17:40.036 A:middle
我们有新的人脸识别技术

00:17:40.036 --> 00:17:41.206 A:middle
你可能会说

00:17:41.206 --> 00:17:41.706 A:middle
天哪又来一个

00:17:43.946 --> 00:17:45.156 A:middle
但我们有充足的理由

00:17:45.156 --> 00:17:45.446 A:middle
这么做

00:17:45.706 --> 00:17:47.546 A:middle
Vision 使用深度学习

00:17:47.546 --> 00:17:48.976 A:middle
这让我们获得了

00:17:49.186 --> 00:17:50.516 A:middle
更高的准确度和更多的重调用

00:17:50.926 --> 00:17:52.366 A:middle
因此会有更好的结果

00:17:52.916 --> 00:17:55.826 A:middle
它的缺点在于

00:17:55.826 --> 00:17:56.976 A:middle
在较旧的硬件上

00:17:56.976 --> 00:17:57.356 A:middle
运行速度较慢

00:17:57.436 --> 00:17:58.946 A:middle
让我们看一下

00:17:58.946 --> 00:18:01.006 A:middle
我们提供的

00:17:58.946 --> 00:18:01.006 A:middle
我们提供的

00:18:01.006 --> 00:18:01.926 A:middle
人脸识别的

00:18:01.926 --> 00:18:02.476 A:middle
整体格局

00:18:03.236 --> 00:18:04.876 A:middle
我们有 Vision

00:18:04.876 --> 00:18:06.346 A:middle
它能给我们最好的结果

00:18:06.346 --> 00:18:08.736 A:middle
运行速度很快

00:18:08.736 --> 00:18:09.966 A:middle
能耗也很优秀

00:18:09.966 --> 00:18:10.926 A:middle
因为它专门对此做了优化

00:18:11.246 --> 00:18:12.766 A:middle
我们在除 watchOS 之外

00:18:12.766 --> 00:18:14.376 A:middle
所有平台上提供它

00:18:15.446 --> 00:18:16.886 A:middle
Core Image

00:18:16.886 --> 00:18:18.566 A:middle
提供情况也相同

00:18:18.566 --> 00:18:19.686 A:middle
它更快

00:18:19.686 --> 00:18:21.106 A:middle
但结果没有 Vision 那么好

00:18:21.736 --> 00:18:24.266 A:middle
在 AV Capture Session 中

00:18:24.266 --> 00:18:25.536 A:middle
我们只在

00:18:25.536 --> 00:18:27.016 A:middle
捕捉的部分

00:18:27.016 --> 00:18:28.436 A:middle
使用了硬件

00:18:28.436 --> 00:18:30.176 A:middle
所以运行的很快

00:18:30.176 --> 00:18:31.666 A:middle
但结果还是

00:18:31.666 --> 00:18:31.976 A:middle
不如 Vision 的

00:18:32.466 --> 00:18:34.006 A:middle
因此你需要根据

00:18:34.006 --> 00:18:35.286 A:middle
你的应用

00:18:35.286 --> 00:18:36.996 A:middle
以及你想要做什么

00:18:36.996 --> 00:18:38.146 A:middle
为人脸识别选择

00:18:38.146 --> 00:18:38.566 A:middle
合适的技术

00:18:40.406 --> 00:18:41.446 A:middle
我有提到我们的质量

00:18:41.446 --> 00:18:43.056 A:middle
更好

00:18:43.056 --> 00:18:44.096 A:middle
现在让我稍加证明

00:18:44.576 --> 00:18:46.796 A:middle
我这里有一个图像

00:18:46.796 --> 00:18:47.896 A:middle
这是通过 Core Image

00:18:47.896 --> 00:18:48.506 A:middle
运行人脸识别

00:18:48.976 --> 00:18:50.956 A:middle
我们找到了两张脸

00:18:50.956 --> 00:18:53.056 A:middle
模糊的看出了眼睛和嘴巴的

00:18:53.656 --> 00:18:55.126 A:middle
位置

00:18:55.396 --> 00:18:56.986 A:middle
在 Vision 中

00:18:56.986 --> 00:18:58.496 A:middle
我们找到了全部四张脸  包括被遮挡的

00:18:58.496 --> 00:18:59.986 A:middle
通过人脸特征点我们还找到了

00:19:00.036 --> 00:19:03.196 A:middle
更加丰富的细节

00:19:04.356 --> 00:19:05.486 A:middle
说到 Core Image

00:19:05.486 --> 00:19:06.426 A:middle
我想要强调的一点是

00:19:06.426 --> 00:19:07.306 A:middle
CIDetectors

00:19:07.386 --> 00:19:08.046 A:middle
将会怎样

00:19:08.076 --> 00:19:11.456 A:middle
现在已经使用它的人

00:19:11.456 --> 00:19:12.536 A:middle
还可以继续使用

00:19:12.536 --> 00:19:15.596 A:middle
它仍在 Core Image 中

00:19:15.596 --> 00:19:17.136 A:middle
但随着电脑发展

00:19:17.136 --> 00:19:18.296 A:middle
所有算法上

00:19:18.296 --> 00:19:20.216 A:middle
出现的新的部分和改进

00:19:20.216 --> 00:19:22.046 A:middle
都将在 Vision 中体现

00:19:22.046 --> 00:19:22.946 A:middle
Vision 是计算机视觉的新家

00:19:23.546 --> 00:19:28.126 A:middle
好了说了这么久

00:19:28.126 --> 00:19:28.656 A:middle
让我们看一个 Demo

00:19:29.606 --> 00:19:30.826 A:middle
我将向你们展示的

00:19:30.826 --> 00:19:33.756 A:middle
是一个运行着

00:19:33.756 --> 00:19:35.726 A:middle
AV Capture Session 设备上的应用

00:19:35.996 --> 00:19:37.256 A:middle
希望演示顺利

00:19:37.896 --> 00:19:39.936 A:middle
我们将会做非常简单的

00:19:39.936 --> 00:19:41.296 A:middle
矩形检测请求

00:19:42.376 --> 00:19:43.916 A:middle
那么我为什么要设置

00:19:43.916 --> 00:19:44.296 A:middle
这些呢

00:19:46.156 --> 00:19:48.386 A:middle
你们看到的是

00:19:48.386 --> 00:19:52.136 A:middle
我创建了请求

00:19:52.136 --> 00:19:54.516 A:middle
在本例中也就是

00:19:55.886 --> 00:19:56.816 A:middle
简单的矩形检测请求

00:19:56.996 --> 00:19:58.376 A:middle
我开错了窗口

00:19:58.376 --> 00:19:59.416 A:middle
刚刚才有点迷茫

00:19:59.416 --> 00:19:59.826 A:middle
不好意思

00:20:00.356 --> 00:20:02.516 A:middle
好了开始

00:20:02.546 --> 00:20:03.826 A:middle
我们已经有了矩形检测请求

00:20:03.826 --> 00:20:05.956 A:middle
我会设定

00:20:05.956 --> 00:20:07.406 A:middle
一些参数

00:20:07.406 --> 00:20:08.856 A:middle
作为例子

00:20:08.856 --> 00:20:10.626 A:middle
我想要在坐标系中

00:20:10.626 --> 00:20:11.946 A:middle
标准化最小尺寸

00:20:11.946 --> 00:20:13.796 A:middle
我只想要 10%

00:20:13.796 --> 00:20:16.666 A:middle
最小化图片的大小

00:20:16.666 --> 00:20:17.206 A:middle
并且我只想要 20 个矩形

00:20:17.436 --> 00:20:19.036 A:middle
我可以获得更多 但我只要 20

00:20:19.036 --> 00:20:20.156 A:middle
我只是挑了个数字

00:20:21.386 --> 00:20:23.086 A:middle
我设定希望执行

00:20:23.116 --> 00:20:25.986 A:middle
该请求的区域

00:20:26.236 --> 00:20:28.506 A:middle
这里是我们的

00:20:28.676 --> 00:20:30.616 A:middle
Completion Handler

00:20:30.616 --> 00:20:32.326 A:middle
我要做的就是

00:20:32.326 --> 00:20:34.406 A:middle
画出矩形

00:20:34.406 --> 00:20:35.816 A:middle
但你注意到我为了更新 UI

00:20:35.816 --> 00:20:37.826 A:middle
把它移到主队列中

00:20:39.176 --> 00:20:40.216 A:middle
我们的图像来自哪里？

00:20:40.216 --> 00:20:41.736 A:middle
看到这里的

00:20:41.736 --> 00:20:45.526 A:middle
捕获输出

00:20:45.666 --> 00:20:47.006 A:middle
正向我说到的

00:20:47.006 --> 00:20:48.566 A:middle
我们从 CMSampleBuffer 中获得

00:20:48.566 --> 00:20:49.606 A:middle
pixelBuffer

00:20:50.376 --> 00:20:54.276 A:middle
在这里我获得

00:20:54.276 --> 00:20:55.166 A:middle
cameraIntrinsics 数据

00:20:55.166 --> 00:20:56.496 A:middle
这个在一些

00:20:56.596 --> 00:20:57.606 A:middle
计算机视觉的路径中

00:20:57.656 --> 00:20:58.816 A:middle
非常重要

00:20:58.816 --> 00:21:00.126 A:middle
能让我们知道摄像头

00:20:58.816 --> 00:21:00.126 A:middle
能让我们知道摄像头

00:21:00.126 --> 00:21:00.866 A:middle
对着的方向

00:21:02.406 --> 00:21:04.206 A:middle
就像我提到的那样

00:21:04.206 --> 00:21:06.446 A:middle
我们没有忘记 EXIF Orientation

00:21:06.446 --> 00:21:07.876 A:middle
我创建了一个 Image Request Handler

00:21:08.026 --> 00:21:09.696 A:middle
用以完成我们的任务

00:21:09.696 --> 00:21:10.636 A:middle
当我们真正运行的时候

00:21:10.636 --> 00:21:11.886 A:middle
会发生什么？

00:21:12.156 --> 00:21:13.006 A:middle
好的  现在我们

00:21:13.006 --> 00:21:14.296 A:middle
看到的是

00:21:14.586 --> 00:21:16.516 A:middle
我们在追踪这个矩形

00:21:16.516 --> 00:21:17.906 A:middle
这很简单

00:21:17.906 --> 00:21:19.386 A:middle
我们还可以找其他的矩形

00:21:20.896 --> 00:21:22.036 A:middle
如果连接线足够长

00:21:22.036 --> 00:21:23.076 A:middle
我们可以看到

00:21:23.076 --> 00:21:24.406 A:middle
这里是一台电脑

00:21:24.406 --> 00:21:24.906 A:middle
有着许多矩形

00:21:25.516 --> 00:21:27.976 A:middle
我是特意选择黄色标识的

00:21:27.976 --> 00:21:29.666 A:middle
因为它与

00:21:29.666 --> 00:21:31.456 A:middle
你在新投影机

00:21:31.726 --> 00:21:33.246 A:middle
主旨演讲的 Demo

00:21:33.246 --> 00:21:34.516 A:middle
中看到的是同一颜色

00:21:34.576 --> 00:21:36.536 A:middle
我借用了他们的颜色

00:21:36.536 --> 00:21:37.706 A:middle
因为他们借用了我们的代码

00:21:37.706 --> 00:21:38.686 A:middle
来做这些

00:21:38.686 --> 00:21:38.976 A:middle
矩形检测

00:21:39.516 --> 00:21:44.636 A:middle
[掌声]

00:21:45.136 --> 00:21:45.876 A:middle
谢谢

00:21:46.016 --> 00:21:48.000 A:middle
[掌声]

00:21:51.046 --> 00:21:52.516 A:middle
到现在为止很简单

00:21:52.516 --> 00:21:52.916 A:middle
让我们加点难度

00:21:56.396 --> 00:21:58.746 A:middle
把机器学习

00:21:58.746 --> 00:22:00.096 A:middle
加进来怎么样

00:21:58.746 --> 00:22:00.096 A:middle
加进来怎么样

00:22:00.096 --> 00:22:01.286 A:middle
为了更有意思

00:22:01.956 --> 00:22:03.776 A:middle
因此我要做的就是

00:22:03.776 --> 00:22:06.136 A:middle
我把这个小模型

00:22:06.196 --> 00:22:07.566 A:middle
拖进了我的工程文件中

00:22:14.156 --> 00:22:16.456 A:middle
这是一个分类器

00:22:16.456 --> 00:22:17.576 A:middle
可以告诉我们关于图像的

00:22:17.576 --> 00:22:18.276 A:middle
一些信息

00:22:19.456 --> 00:22:21.726 A:middle
在这一部分我们看到

00:22:21.726 --> 00:22:25.536 A:middle
我们需要输入

00:22:25.536 --> 00:22:27.116 A:middle
许多不同尺寸的图像

00:22:27.116 --> 00:22:30.556 A:middle
然后得到

00:22:30.556 --> 00:22:31.416 A:middle
分类

00:22:32.496 --> 00:22:33.596 A:middle
现在你不需要担心尺寸

00:22:33.596 --> 00:22:35.886 A:middle
因为 Vision

00:22:35.886 --> 00:22:37.006 A:middle
会帮你处理

00:22:37.006 --> 00:22:43.026 A:middle
我需要做什么

00:22:43.626 --> 00:22:46.076 A:middle
首先我需要创建一个 Vision 模型

00:22:46.076 --> 00:22:48.226 A:middle
并添加我的请求

00:22:48.286 --> 00:22:50.326 A:middle
也就是这一部分的功能

00:22:50.326 --> 00:22:52.736 A:middle
我简单的加载了

00:22:52.736 --> 00:22:56.166 A:middle
初始模型

00:22:56.166 --> 00:22:57.456 A:middle
并创建了我的分类请求

00:22:58.726 --> 00:22:59.476 A:middle
它提示我

00:22:59.476 --> 00:23:00.696 A:middle
缺少参数

00:22:59.476 --> 00:23:00.696 A:middle
缺少参数

00:23:00.696 --> 00:23:01.706 A:middle
我一会儿会来处理

00:23:01.996 --> 00:23:03.256 A:middle
最后一件我想要

00:23:03.256 --> 00:23:05.006 A:middle
在这里强调的事是

00:23:05.366 --> 00:23:06.956 A:middle
会存在正方形的图像

00:23:06.956 --> 00:23:09.446 A:middle
但我们的摄像头不会分辨正方形

00:23:09.446 --> 00:23:10.786 A:middle
我需要告诉它怎样去处理正方形

00:23:10.786 --> 00:23:12.586 A:middle
你知道的

00:23:12.586 --> 00:23:14.136 A:middle
我要使用什么样的长宽比

00:23:14.136 --> 00:23:15.636 A:middle
因此我需要

00:23:15.636 --> 00:23:15.976 A:middle
进行设置

00:23:20.276 --> 00:23:22.636 A:middle
我的任务

00:23:22.636 --> 00:23:26.246 A:middle
需要一个 Completion Handler

00:23:26.246 --> 00:23:28.336 A:middle
我也提前设置好了

00:23:30.496 --> 00:23:31.806 A:middle
在  Completion Handler 中

00:23:31.806 --> 00:23:33.296 A:middle
我只是看到了观察结果

00:23:33.296 --> 00:23:34.656 A:middle
这个分类器

00:23:34.696 --> 00:23:36.216 A:middle
有许多不同的信息

00:23:36.216 --> 00:23:37.876 A:middle
我不需要全部展示

00:23:37.876 --> 00:23:39.206 A:middle
我只展示

00:23:39.376 --> 00:23:40.816 A:middle
我重视的部分

00:23:40.816 --> 00:23:42.576 A:middle
我在这里做的是

00:23:42.576 --> 00:23:43.516 A:middle
一些简单的筛选

00:23:43.516 --> 00:23:46.216 A:middle
我只看前 4 个

00:23:46.216 --> 00:23:47.706 A:middle
并且准确度

00:23:47.706 --> 00:23:49.676 A:middle
至少达到 30%

00:23:49.676 --> 00:23:50.946 A:middle
这个条件非常适合我的 Demo

00:23:50.946 --> 00:23:52.126 A:middle
你需要找到适合

00:23:52.126 --> 00:23:53.356 A:middle
自己模型

00:23:53.356 --> 00:23:53.696 A:middle
的条件

00:23:54.036 --> 00:23:57.286 A:middle
我下一步要做的是

00:23:58.016 --> 00:24:01.136 A:middle
把我的分类请求添加至

00:23:58.016 --> 00:24:01.136 A:middle
把我的分类请求添加至

00:24:01.136 --> 00:24:02.516 A:middle
我的请求范围中

00:24:02.516 --> 00:24:05.346 A:middle
我实际上运行了两个请求

00:24:06.026 --> 00:24:07.416 A:middle
我已经将它加载到

00:24:07.416 --> 00:24:09.886 A:middle
我的设备上

00:24:09.886 --> 00:24:11.196 A:middle
让我们看看会是什么结果

00:24:12.156 --> 00:24:13.526 A:middle
当然只有我切换到正确的设备

00:24:13.526 --> 00:24:14.826 A:middle
你们才能看到

00:24:15.386 --> 00:24:15.686 A:middle
开始

00:24:22.046 --> 00:24:25.056 A:middle
所以我们看到了一个空的

00:24:25.456 --> 00:24:27.016 A:middle
咖啡杯

00:24:27.016 --> 00:24:27.966 A:middle
最好有人能帮我倒满它

00:24:27.966 --> 00:24:33.066 A:middle
这是一个圆珠笔

00:24:33.066 --> 00:24:37.616 A:middle
这是一个挂锁  看  这是一个 iPod

00:24:38.396 --> 00:24:44.076 A:middle
偷走这些空卡的人

00:24:44.076 --> 00:24:45.436 A:middle
肯定没意识到

00:24:45.436 --> 00:24:45.976 A:middle
它是 iPod

00:24:46.516 --> 00:24:49.500 A:middle
[掌声]

00:24:53.056 --> 00:24:54.676 A:middle
好的  让我们回到幻灯片

00:24:54.676 --> 00:24:58.096 A:middle
之后再进行下一次的

00:24:58.096 --> 00:24:59.406 A:middle
展示说明。

00:25:00.456 --> 00:25:01.846 A:middle
我的下一个 Demo 中

00:25:01.846 --> 00:25:02.976 A:middle
我想要做一些

00:25:02.976 --> 00:25:06.516 A:middle
更复杂的事情

00:25:06.516 --> 00:25:07.246 A:middle
因此我选择了

00:25:07.246 --> 00:25:08.006 A:middle
MNISTVision

00:25:09.486 --> 00:25:10.876 A:middle
机器语言学习社区中的人

00:25:10.876 --> 00:25:12.296 A:middle
对这个

00:25:12.296 --> 00:25:13.376 A:middle
比较熟悉

00:25:13.566 --> 00:25:15.766 A:middle
MNIST 是一个数据集

00:25:15.766 --> 00:25:17.076 A:middle
许多政府雇员和高校学生

00:25:17.076 --> 00:25:18.536 A:middle
在其中写下数据

00:25:18.596 --> 00:25:21.086 A:middle
它们被标记

00:25:21.146 --> 00:25:22.106 A:middle
进行标记的分类器

00:25:22.106 --> 00:25:23.166 A:middle
是人们训练的

00:25:23.796 --> 00:25:25.156 A:middle
请注意这些基本是

00:25:25.156 --> 00:25:26.326 A:middle
白色的数字

00:25:26.396 --> 00:25:28.336 A:middle
写在黑色的背景上

00:25:28.336 --> 00:25:30.626 A:middle
我猜想是用白粉笔

00:25:30.666 --> 00:25:31.136 A:middle
写在旧黑板上的

00:25:32.516 --> 00:25:34.346 A:middle
我要用这段简单的代码

00:25:34.346 --> 00:25:35.846 A:middle
向你们展示

00:25:35.846 --> 00:25:37.356 A:middle
一些概念

00:25:37.356 --> 00:25:38.646 A:middle
它们非常重要

00:25:38.646 --> 00:25:40.606 A:middle
比如如何用 Vision

00:25:41.276 --> 00:25:41.456 A:middle
完成复杂的任务

00:25:41.606 --> 00:25:43.646 A:middle
首先我们

00:25:43.646 --> 00:25:45.006 A:middle
一层一层的叠加请求

00:25:45.006 --> 00:25:47.516 A:middle
这个过程中我们使用 Core Image

00:25:47.516 --> 00:25:49.566 A:middle
进行图像处理

00:25:49.566 --> 00:25:51.666 A:middle
最后也是最重要的是

00:25:51.666 --> 00:25:53.246 A:middle
再次使用 Core ML

00:25:53.246 --> 00:25:53.716 A:middle
进行机器学习

00:25:56.666 --> 00:25:57.686 A:middle
结果会是怎样的呢？

00:25:58.926 --> 00:26:00.596 A:middle
这里有一张图像

00:25:58.926 --> 00:26:00.596 A:middle
这里有一张图像

00:26:00.596 --> 00:26:01.506 A:middle
上面贴着便利贴

00:26:02.106 --> 00:26:04.846 A:middle
我们可以通过

00:26:04.846 --> 00:26:06.796 A:middle
矩形检测

00:26:06.796 --> 00:26:07.326 A:middle
找到便利贴

00:26:07.896 --> 00:26:09.226 A:middle
现在有一点点不一样

00:26:09.226 --> 00:26:10.866 A:middle
它明显不是

00:26:10.926 --> 00:26:12.306 A:middle
黑底白字

00:26:13.456 --> 00:26:14.846 A:middle
下一步我们使用

00:26:14.846 --> 00:26:16.686 A:middle
Core Image

00:26:16.686 --> 00:26:18.046 A:middle
进行视角调整

00:26:18.686 --> 00:26:20.666 A:middle
并转换颜色

00:26:20.666 --> 00:26:22.086 A:middle
增强对比度

00:26:22.086 --> 00:26:23.356 A:middle
因此我们得到了这张黑白的图像

00:26:24.896 --> 00:26:26.076 A:middle
最后也是最重要的

00:26:26.076 --> 00:26:28.826 A:middle
我需要运行我的 MNIST 分类器

00:26:29.016 --> 00:26:30.476 A:middle
它应该告诉我

00:26:30.476 --> 00:26:32.256 A:middle
这是数字 4

00:26:32.256 --> 00:26:35.096 A:middle
这是数字 4 的

00:26:35.096 --> 00:26:35.636 A:middle
准确性在 80% 以上

00:26:35.636 --> 00:26:38.666 A:middle
我们再来看看它在

00:26:38.666 --> 00:26:39.066 A:middle
App 中是怎么显示的

00:26:41.496 --> 00:26:43.426 A:middle
我再次打开

00:26:43.426 --> 00:26:45.236 A:middle
矩形检测请求

00:26:45.236 --> 00:26:46.316 A:middle
这是我最喜欢的部分

00:26:47.886 --> 00:26:48.946 A:middle
但我即将在

00:26:48.946 --> 00:26:50.246 A:middle
Completion Handler 中做的

00:26:50.246 --> 00:26:51.206 A:middle
更加有趣

00:26:52.426 --> 00:26:53.746 A:middle
我进行了验证

00:26:53.746 --> 00:26:54.876 A:middle
确保得到的

00:26:54.876 --> 00:26:55.746 A:middle
矩形

00:26:55.746 --> 00:26:56.456 A:middle
是正确的

00:26:56.456 --> 00:26:58.656 A:middle
但这里是

00:26:58.736 --> 00:26:58.926 A:middle
最有趣的部分

00:26:59.596 --> 00:27:01.256 A:middle
我得到了四个顶点的坐标

00:26:59.596 --> 00:27:01.256 A:middle
我得到了四个顶点的坐标

00:27:01.256 --> 00:27:04.126 A:middle
把它们传入 CI

00:27:04.126 --> 00:27:05.786 A:middle
使用 CIPerspectiveCorrection

00:27:06.476 --> 00:27:07.636 A:middle
这使得我能够处理

00:27:07.636 --> 00:27:09.226 A:middle
视角扭曲的图像

00:27:09.226 --> 00:27:10.916 A:middle
将它恢复成

00:27:10.916 --> 00:27:11.966 A:middle
直立拍摄的

00:27:11.966 --> 00:27:12.506 A:middle
图像

00:27:14.076 --> 00:27:15.936 A:middle
我使用 CIColorControls

00:27:16.186 --> 00:27:17.456 A:middle
提高图像的对比度

00:27:17.506 --> 00:27:19.066 A:middle
将它

00:27:19.066 --> 00:27:19.546 A:middle
二进制化

00:27:20.896 --> 00:27:22.246 A:middle
像我说过的

00:27:22.246 --> 00:27:23.306 A:middle
我要改变图像的颜色

00:27:24.976 --> 00:27:26.776 A:middle
现在得到了结果图像

00:27:26.776 --> 00:27:28.116 A:middle
我输入一个新的请求

00:27:28.116 --> 00:27:28.936 A:middle
因为我将在

00:27:28.936 --> 00:27:31.146 A:middle
新的图像上

00:27:31.146 --> 00:27:32.086 A:middle
运行分类

00:27:32.296 --> 00:27:34.066 A:middle
分类看上去

00:27:34.066 --> 00:27:34.416 A:middle
是什么样的

00:27:35.906 --> 00:27:37.446 A:middle
这个分类我已经

00:27:37.446 --> 00:27:39.446 A:middle
用我的大型模型

00:27:39.446 --> 00:27:41.776 A:middle
做好了

00:27:41.776 --> 00:27:43.046 A:middle
这是一个小型模型

00:27:43.046 --> 00:27:44.866 A:middle
我已经在这台笔记本电脑上训练完成了

00:27:44.866 --> 00:27:45.996 A:middle
非常简单

00:27:45.996 --> 00:27:47.576 A:middle
只有几行代码

00:27:47.576 --> 00:27:49.386 A:middle
感谢 Core ML 我可以

00:27:49.386 --> 00:27:50.706 A:middle
把它拖拽进来并轻松地使用

00:27:51.106 --> 00:27:52.316 A:middle
这是我的模型

00:27:53.766 --> 00:27:55.046 A:middle
我再次强调这点

00:27:55.046 --> 00:27:57.636 A:middle
本例中使用的是

00:27:57.636 --> 00:27:59.436 A:middle
是一个非常小的

00:27:59.436 --> 00:28:00.166 A:middle
灰度图像

00:27:59.436 --> 00:28:00.166 A:middle
灰度图像

00:28:00.166 --> 00:28:02.636 A:middle
它应该可以在

00:28:02.636 --> 00:28:03.636 A:middle
28 x 28 像素的图像中

00:28:03.636 --> 00:28:03.976 A:middle
读取那些数字

00:28:12.056 --> 00:28:12.526 A:middle
这就是我的

00:28:12.526 --> 00:28:14.716 A:middle
分类器

00:28:15.326 --> 00:28:16.906 A:middle
现在我需要输入

00:28:16.906 --> 00:28:17.216 A:middle
图像

00:28:17.216 --> 00:28:19.056 A:middle
这段代码

00:28:19.056 --> 00:28:20.046 A:middle
在会话中

00:28:20.046 --> 00:28:21.506 A:middle
可用

00:28:21.506 --> 00:28:22.716 A:middle
这样就能够轻松的运行模拟器

00:28:22.716 --> 00:28:24.266 A:middle
而不需要使用摄像头实时的画面

00:28:24.266 --> 00:28:25.196 A:middle
实际上我要用

00:28:25.196 --> 00:28:29.046 A:middle
UIImagePicker 将它输入到

00:28:29.086 --> 00:28:32.306 A:middle
我的 VMImageRequestHandler 中

00:28:32.306 --> 00:28:33.526 A:middle
让它运行

00:28:33.526 --> 00:28:33.986 A:middle
矩形检测

00:28:33.986 --> 00:28:37.136 A:middle
请注意我把分类的请求

00:28:37.136 --> 00:28:38.906 A:middle
放在了我的

00:28:38.906 --> 00:28:40.396 A:middle
矩形检测

00:28:40.396 --> 00:28:42.146 A:middle
里

00:28:42.146 --> 00:28:43.496 A:middle
这让我们能够

00:28:43.496 --> 00:28:44.966 A:middle
叠加

00:28:44.966 --> 00:28:45.146 A:middle
多个请求

00:28:46.096 --> 00:28:47.546 A:middle
让我们试试这个 Demo

00:28:50.896 --> 00:28:55.016 A:middle
我的 App 在这里

00:28:55.196 --> 00:28:56.656 A:middle
不要被看到了

00:28:59.076 --> 00:29:00.696 A:middle
好的  这里我们看到的

00:28:59.076 --> 00:29:00.696 A:middle
好的  这里我们看到的

00:29:00.696 --> 00:29:01.976 A:middle
是上方的图像

00:29:01.976 --> 00:29:03.436 A:middle
它是我稍早时候

00:29:03.436 --> 00:29:04.346 A:middle
拍摄的照片

00:29:04.926 --> 00:29:07.476 A:middle
我们看到它被正确的分类为

00:29:07.476 --> 00:29:10.366 A:middle
数字 1

00:29:10.366 --> 00:29:11.556 A:middle
这个例子中准确度很高

00:29:11.556 --> 00:29:12.646 A:middle
下方的图片

00:29:12.646 --> 00:29:14.816 A:middle
仅仅是视觉化了

00:29:14.816 --> 00:29:16.126 A:middle
中间图像

00:29:16.126 --> 00:29:17.296 A:middle
它是在

00:29:17.296 --> 00:29:19.676 A:middle
CI 中被创建的

00:29:19.676 --> 00:29:19.946 A:middle
显示的也是同样的数字

00:29:19.946 --> 00:29:21.706 A:middle
让我们选另一个数字

00:29:23.066 --> 00:29:24.316 A:middle
是的这是数字 3

00:29:26.466 --> 00:29:27.756 A:middle
猜这个数字是多少

00:29:27.846 --> 00:29:28.826 A:middle
这是数字 4

00:29:29.626 --> 00:29:30.706 A:middle
运行结果正确

00:29:32.576 --> 00:29:33.806 A:middle
好的谢谢大家

00:29:34.516 --> 00:29:37.556 A:middle
[掌声]

00:29:38.056 --> 00:29:39.176 A:middle
让我们回到幻灯片

00:29:41.486 --> 00:29:42.936 A:middle
这就是我们的 Vision 框架

00:29:43.986 --> 00:29:45.316 A:middle
让我们总结一下

00:29:45.316 --> 00:29:46.466 A:middle
之前看到的内容

00:29:47.486 --> 00:29:49.426 A:middle
Vision 是计算机视觉的

00:29:49.426 --> 00:29:50.696 A:middle
高级框架

00:29:50.756 --> 00:29:51.816 A:middle
它让你在应用中

00:29:51.816 --> 00:29:53.756 A:middle
能够轻松的使用

00:29:53.756 --> 00:29:55.356 A:middle
就算你不是

00:29:55.356 --> 00:29:56.576 A:middle
计算机视觉专家

00:29:57.276 --> 00:29:58.756 A:middle
我们有很多探测器

00:29:58.756 --> 00:30:00.166 A:middle
各种各样

00:29:58.756 --> 00:30:00.166 A:middle
各种各样

00:30:00.166 --> 00:30:01.946 A:middle
他们都运行于

00:30:01.946 --> 00:30:03.296 A:middle
统一的界面上

00:30:03.336 --> 00:30:04.896 A:middle
使得了解这组 API

00:30:04.896 --> 00:30:05.446 A:middle
变得非常容易

00:30:06.826 --> 00:30:08.596 A:middle
最后也是最重要的

00:30:08.596 --> 00:30:09.886 A:middle
是与 Core ML 的集成

00:30:10.376 --> 00:30:11.736 A:middle
通过使用你的自定义模型

00:30:11.736 --> 00:30:13.696 A:middle
你可以在应用中完成很多事情

00:30:13.696 --> 00:30:15.586 A:middle
你可以找到热狗

00:30:15.586 --> 00:30:17.426 A:middle
并且判断

00:30:17.426 --> 00:30:18.076 A:middle
它们是不是真的热狗

00:30:19.416 --> 00:30:20.336 A:middle
开个玩笑

00:30:23.576 --> 00:30:24.606 A:middle
如果你想了解关于本节会议的更多信息

00:30:24.606 --> 00:30:26.816 A:middle
请前往

00:30:26.816 --> 00:30:28.626 A:middle
我们的网站

00:30:28.626 --> 00:30:29.746 A:middle
我一定要强调

00:30:29.796 --> 00:30:31.576 A:middle
一些相关会议

00:30:31.576 --> 00:30:33.266 A:middle
你们可能之前

00:30:33.266 --> 00:30:33.706 A:middle
已经听过

00:30:33.706 --> 00:30:34.786 A:middle
我列出了关于 Core ML 的

00:30:34.786 --> 00:30:35.876 A:middle
你也可以在我们的网站上

00:30:35.876 --> 00:30:36.106 A:middle
找到它

00:30:36.106 --> 00:30:39.616 A:middle
欢迎参加

00:30:39.616 --> 00:30:42.146 A:middle
今天 6:30 的聚会

00:30:42.146 --> 00:30:43.416 A:middle
讨论我们的工作

00:30:43.896 --> 00:30:45.536 A:middle
关于 Core ML

00:30:45.536 --> 00:30:46.776 A:middle
更高级的内容

00:30:46.826 --> 00:30:48.886 A:middle
周四会有一节会议

00:30:48.886 --> 00:30:50.256 A:middle
我们也会有一节 Core Image 的会议

00:30:50.256 --> 00:30:51.486 A:middle
他们会在会上

00:30:51.486 --> 00:30:53.556 A:middle
展示 Core Image 和 Vision

00:30:53.556 --> 00:30:54.246 A:middle
的神奇功能

00:30:55.826 --> 00:30:57.126 A:middle
感谢你们今天的到来

00:30:57.126 --> 00:30:58.646 A:middle
希望你们享受

00:30:58.646 --> 00:30:59.276 A:middle
接下来 WWDC 的内容

00:30:59.276 --> 00:30:59.456 A:middle
谢谢大家

00:31:00.516 --> 00:31:06.770 A:middle
[掌声]
