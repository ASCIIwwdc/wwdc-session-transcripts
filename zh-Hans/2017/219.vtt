WEBVTT

00:00:07.516 --> 00:00:16.500 A:middle
[欢呼声]

00:00:23.516 --> 00:00:27.136 A:middle
[掌声]

00:00:27.636 --> 00:00:28.966 A:middle
&gt;&gt; 大家下午好

00:00:28.966 --> 00:00:30.486 A:middle
欢迎来到

00:00:30.486 --> 00:00:31.826 A:middle
iOS 现代用户交互的展示

00:00:32.276 --> 00:00:33.536 A:middle
我叫 Dominik Wagner

00:00:33.536 --> 00:00:35.156 A:middle
我是名工程师

00:00:35.156 --> 00:00:37.646 A:middle
来自 UIkit 框架团队

00:00:37.646 --> 00:00:39.616 A:middle
我今天想跟大家说说

00:00:39.616 --> 00:00:41.136 A:middle
如何熟练操作

00:00:41.226 --> 00:00:41.696 A:middle
手势识别系统

00:00:41.696 --> 00:00:42.796 A:middle
稍后我的同事

00:00:42.796 --> 00:00:44.316 A:middle
Glen 和 Michael

00:00:44.316 --> 00:00:44.916 A:middle
也会上台进行展示

00:00:45.286 --> 00:00:46.806 A:middle
我们要讲的

00:00:46.806 --> 00:00:47.126 A:middle
到底是什么呢

00:00:47.126 --> 00:00:48.406 A:middle
我们讲的是

00:00:48.596 --> 00:00:49.366 A:middle
Multi-Touch

00:00:49.366 --> 00:00:51.116 A:middle
这次只讲

00:00:51.116 --> 00:00:51.586 A:middle
触摸界面

00:00:51.586 --> 00:00:52.616 A:middle
我们有许多很棒的

00:00:52.616 --> 00:00:54.366 A:middle
其他交互方式

00:00:54.516 --> 00:00:56.136 A:middle
但 Multi-Touch

00:00:56.166 --> 00:00:56.806 A:middle
是今天展示的主题

00:00:57.336 --> 00:00:59.056 A:middle
我会详细地和你们分享

00:00:59.056 --> 00:01:01.246 A:middle
UI 手势识别系统的方方面面

00:00:59.056 --> 00:01:01.246 A:middle
UI 手势识别系统的方方面面

00:01:01.246 --> 00:01:02.966 A:middle
告诉你们

00:01:02.966 --> 00:01:04.806 A:middle
如何使用

00:01:04.806 --> 00:01:06.286 A:middle
如何根据喜好进行自定义

00:01:07.206 --> 00:01:08.626 A:middle
之后 Glen 会上台和你们分享

00:01:08.626 --> 00:01:10.346 A:middle
iOS 11 中

00:01:10.346 --> 00:01:11.916 A:middle
为系统手势交互而产生的

00:01:11.986 --> 00:01:12.796 A:middle
New API 的使用

00:01:13.266 --> 00:01:14.816 A:middle
最后 Mike 会上台

00:01:15.256 --> 00:01:17.016 A:middle
和你们分享

00:01:17.016 --> 00:01:18.526 A:middle
如何玩转

00:01:18.526 --> 00:01:19.296 A:middle
拖放新功能

00:01:19.996 --> 00:01:22.856 A:middle
这次的展示更适合

00:01:22.856 --> 00:01:26.076 A:middle
已经对 UITouch

00:01:26.076 --> 00:01:27.256 A:middle
有所了解的观众

00:01:27.696 --> 00:01:29.366 A:middle
但如果你是新手

00:01:29.446 --> 00:01:31.376 A:middle
我们就先一起

00:01:31.376 --> 00:01:33.056 A:middle
过一遍基础部分

00:01:33.466 --> 00:01:34.756 A:middle
我们有 UITouch

00:01:35.136 --> 00:01:37.276 A:middle
UITouch 代表

00:01:37.596 --> 00:01:39.896 A:middle
手指触摸屏幕

00:01:40.176 --> 00:01:43.176 A:middle
用户交互的状态会从 Begin 开始

00:01:43.176 --> 00:01:45.256 A:middle
以 Cancel 或 Ended 的状态结束

00:01:45.256 --> 00:01:47.016 A:middle
它代表一次

00:01:47.076 --> 00:01:47.626 A:middle
与屏幕的交互行为

00:01:48.046 --> 00:01:49.356 A:middle
另外我们有

00:01:49.446 --> 00:01:50.966 A:middle
UIGestureRecognizer

00:01:50.966 --> 00:01:52.116 A:middle
这是个更强大的抽象类

00:01:52.726 --> 00:01:54.266 A:middle
UIGestureRecognizer

00:01:54.266 --> 00:01:56.086 A:middle
能配置对象和动作

00:01:56.086 --> 00:01:57.826 A:middle
放上 UI 视图

00:01:59.006 --> 00:02:00.326 A:middle
我们有可以识别各种交互手势的

00:01:59.006 --> 00:02:00.326 A:middle
我们有可以识别各种交互手势的

00:02:00.326 --> 00:02:01.996 A:middle
手势识别器

00:02:01.996 --> 00:02:04.246 A:middle
轻点 拖移

00:02:04.246 --> 00:02:04.706 A:middle
双指开合

00:02:05.616 --> 00:02:06.846 A:middle
我们还有

00:02:06.846 --> 00:02:08.286 A:middle
协调这些功能的

00:02:08.286 --> 00:02:09.806 A:middle
手势识别系统

00:02:10.126 --> 00:02:11.596 A:middle
我接下来

00:02:11.646 --> 00:02:12.506 A:middle
会重点讨论它

00:02:13.226 --> 00:02:14.776 A:middle
我会通过这个简单的例子

00:02:14.866 --> 00:02:15.856 A:middle
进行说明

00:02:16.606 --> 00:02:18.366 A:middle
跟 AssistiveTouch 一样

00:02:18.776 --> 00:02:20.506 A:middle
这个窗口部件

00:02:20.506 --> 00:02:23.406 A:middle
你可以点

00:02:23.406 --> 00:02:23.976 A:middle
也可以拖动

00:02:24.656 --> 00:02:26.396 A:middle
甚至你可以在上面进行

00:02:26.396 --> 00:02:27.696 A:middle
常规的基于响应器的触摸处理

00:02:27.696 --> 00:02:29.586 A:middle
来处理一些

00:02:29.586 --> 00:02:30.196 A:middle
触摸

00:02:30.566 --> 00:02:32.206 A:middle
这个例子很简单

00:02:32.206 --> 00:02:33.176 A:middle
容易实现

00:02:33.176 --> 00:02:34.996 A:middle
你们不用只想着

00:02:34.996 --> 00:02:36.986 A:middle
这个例子

00:02:36.986 --> 00:02:38.376 A:middle
你们可以想想

00:02:38.376 --> 00:02:39.156 A:middle
你们的手势设置

00:02:39.596 --> 00:02:41.446 A:middle
我想说

00:02:41.446 --> 00:02:43.326 A:middle
开发触摸事件的秘诀

00:02:43.326 --> 00:02:44.806 A:middle
在于要适用于你的设置

00:02:44.806 --> 00:02:46.166 A:middle
然后再想如何优化你的设置

00:02:46.536 --> 00:02:47.916 A:middle
那我们来看看

00:02:47.916 --> 00:02:48.296 A:middle
这个例子

00:02:48.296 --> 00:02:50.196 A:middle
这里有一个视图

00:02:50.426 --> 00:02:51.826 A:middle
然后还有能在视图上

00:02:51.826 --> 00:02:53.026 A:middle
进行的基于响应器的触摸处理

00:02:53.386 --> 00:02:55.706 A:middle
然后我们从这个

00:02:55.706 --> 00:02:56.656 A:middle
轻点手势识别器开始

00:02:57.686 --> 00:03:00.826 A:middle
当视图上受到触摸时

00:02:57.686 --> 00:03:00.826 A:middle
当视图上受到触摸时

00:03:00.826 --> 00:03:02.746 A:middle
它会即刻随其状态开始

00:03:02.746 --> 00:03:03.616 A:middle
而开始

00:03:04.016 --> 00:03:05.686 A:middle
首先

00:03:05.686 --> 00:03:07.536 A:middle
手势识别系统

00:03:07.796 --> 00:03:09.366 A:middle
会将其分发给

00:03:09.366 --> 00:03:10.926 A:middle
所有与这个触摸相关的

00:03:10.986 --> 00:03:11.366 A:middle
手势识别器

00:03:11.756 --> 00:03:13.106 A:middle
在这里就是

00:03:13.106 --> 00:03:14.466 A:middle
轻点手势识别器

00:03:14.966 --> 00:03:16.206 A:middle
然后轻点手势识别器

00:03:16.306 --> 00:03:18.536 A:middle
会接管这个触摸

00:03:18.536 --> 00:03:19.986 A:middle
并尽量让它保持在

00:03:20.016 --> 00:03:20.746 A:middle
初始状态

00:03:21.406 --> 00:03:23.576 A:middle
触摸被接收后

00:03:23.576 --> 00:03:25.086 A:middle
会被标记为

00:03:25.306 --> 00:03:26.886 A:middle
属于此交互

00:03:27.586 --> 00:03:29.056 A:middle
手势识别器开始运行后

00:03:29.376 --> 00:03:31.656 A:middle
我们继续

00:03:31.656 --> 00:03:33.126 A:middle
将触摸的状态

00:03:33.126 --> 00:03:34.376 A:middle
分发给

00:03:34.376 --> 00:03:34.636 A:middle
触摸事件处理方法

00:03:35.586 --> 00:03:37.836 A:middle
触摸的手指抬起来后

00:03:38.046 --> 00:03:39.616 A:middle
触摸状态结束

00:03:39.616 --> 00:03:40.856 A:middle
依然会在第一时间

00:03:40.856 --> 00:03:42.356 A:middle
分发给

00:03:42.446 --> 00:03:42.866 A:middle
手势识别系统

00:03:43.066 --> 00:03:45.736 A:middle
这里的轻点手势识别器

00:03:45.736 --> 00:03:47.136 A:middle
会通过设置状态结束

00:03:47.206 --> 00:03:48.766 A:middle
进行识别

00:03:48.766 --> 00:03:49.866 A:middle
手势识别器

00:03:49.866 --> 00:03:52.546 A:middle
会用这种方式

00:03:52.546 --> 00:03:53.106 A:middle
示意识别

00:03:53.196 --> 00:03:54.186 A:middle
它们会改变它们的状态

00:03:54.556 --> 00:03:55.596 A:middle
接着手势识别系统

00:03:55.656 --> 00:03:58.756 A:middle
会接收到标记的状态

00:03:58.756 --> 00:04:00.636 A:middle
然后给轻点手势识别器

00:03:58.756 --> 00:04:00.636 A:middle
然后给轻点手势识别器

00:04:00.736 --> 00:04:02.196 A:middle
发送

00:04:02.196 --> 00:04:02.776 A:middle
动作指令

00:04:05.066 --> 00:04:07.346 A:middle
在这之后

00:04:07.346 --> 00:04:10.066 A:middle
我们继续向触摸事件处理方法

00:04:10.336 --> 00:04:11.706 A:middle
发送这个触摸事件

00:04:11.886 --> 00:04:12.966 A:middle
Responder 类的这个

00:04:13.406 --> 00:04:14.906 A:middle
你们会发现我们发送的状态

00:04:14.906 --> 00:04:16.526 A:middle
是取消

00:04:16.526 --> 00:04:16.956 A:middle
而不是终止

00:04:17.516 --> 00:04:18.766 A:middle
为什么要这么做呢

00:04:19.466 --> 00:04:20.755 A:middle
这是因为

00:04:20.755 --> 00:04:23.136 A:middle
手势识别器

00:04:23.286 --> 00:04:25.336 A:middle
不喜欢常规的触摸处理方法

00:04:25.336 --> 00:04:26.766 A:middle
这会限制它的功能

00:04:26.766 --> 00:04:28.056 A:middle
在手势识别器上

00:04:28.056 --> 00:04:29.306 A:middle
你可以对三个属性控件

00:04:29.306 --> 00:04:31.996 A:middle
进行设置

00:04:31.996 --> 00:04:33.226 A:middle
前两个分别是 delaysTouchesEnded

00:04:33.226 --> 00:04:34.556 A:middle
和 cancelsTouchesInView

00:04:35.076 --> 00:04:36.796 A:middle
这两个都设置

00:04:36.796 --> 00:04:38.286 A:middle
默认为 true

00:04:38.286 --> 00:04:39.176 A:middle
从而发生了我们刚看到的动作

00:04:39.176 --> 00:04:40.866 A:middle
手势识别器识别之后

00:04:40.966 --> 00:04:42.636 A:middle
触摸分发

00:04:42.636 --> 00:04:43.856 A:middle
要取消

00:04:44.446 --> 00:04:45.676 A:middle
第三个控件是

00:04:45.736 --> 00:04:47.016 A:middle
delaysTouchesBegan

00:04:47.016 --> 00:04:48.526 A:middle
如果对这个控件选了 yes

00:04:48.596 --> 00:04:50.186 A:middle
那么即便手势识别了

00:04:50.186 --> 00:04:52.086 A:middle
常规的基于响应器的触摸处理

00:04:52.116 --> 00:04:53.066 A:middle
都不会看到

00:04:53.066 --> 00:04:53.816 A:middle
触摸事件

00:04:54.326 --> 00:04:56.556 A:middle
所以记住

00:04:56.556 --> 00:04:58.116 A:middle
触摸分发过程中最先反应的

00:04:58.116 --> 00:04:59.456 A:middle
是手势识别系统

00:05:00.036 --> 00:05:01.976 A:middle
这也是为什么

00:05:01.976 --> 00:05:03.496 A:middle
当在执行触摸事件处理方法时

00:05:03.496 --> 00:05:05.496 A:middle
你要继续执行

00:05:05.496 --> 00:05:06.986 A:middle
手势识别器

00:05:06.986 --> 00:05:08.176 A:middle
或是

00:05:08.216 --> 00:05:09.496 A:middle
使用我们的

00:05:09.496 --> 00:05:09.886 A:middle
手势识别系统

00:05:10.216 --> 00:05:11.586 A:middle
只有在有必要的时候

00:05:11.586 --> 00:05:12.436 A:middle
你才执行它们

00:05:12.916 --> 00:05:14.946 A:middle
我们拓展一下我们的例子

00:05:15.536 --> 00:05:17.876 A:middle
再加一个识别器

00:05:17.876 --> 00:05:18.856 A:middle
给我们

00:05:18.856 --> 00:05:19.326 A:middle
增添点趣味

00:05:19.596 --> 00:05:21.396 A:middle
我们增加一个

00:05:21.396 --> 00:05:22.956 A:middle
拖移手势识别器吧

00:05:23.116 --> 00:05:24.656 A:middle
同样触摸发生后

00:05:24.656 --> 00:05:26.446 A:middle
我们会遵从一个触摸顺序

00:05:27.276 --> 00:05:29.196 A:middle
一开始

00:05:29.196 --> 00:05:30.476 A:middle
它会被分发给

00:05:30.476 --> 00:05:32.056 A:middle
所有相关的手势识别器

00:05:32.466 --> 00:05:34.216 A:middle
然后相应的手势识别器

00:05:34.216 --> 00:05:36.596 A:middle
会立即开始运行并被标记

00:05:36.726 --> 00:05:38.196 A:middle
因为系统接收了

00:05:38.196 --> 00:05:39.416 A:middle
属于此交互

00:05:39.416 --> 00:05:40.726 A:middle
触摸事件

00:05:41.546 --> 00:05:43.106 A:middle
然后我们会将这个触摸事件

00:05:43.596 --> 00:05:44.636 A:middle
分发给触摸事件处理方法

00:05:44.636 --> 00:05:45.776 A:middle
它会开始运行

00:05:46.606 --> 00:05:48.046 A:middle
现在我们移动手指

00:05:48.046 --> 00:05:51.246 A:middle
手指移动后

00:05:51.246 --> 00:05:53.386 A:middle
它会被分发给手势识别系统

00:05:53.386 --> 00:05:54.856 A:middle
然后拖移手势识别器

00:05:55.466 --> 00:05:57.186 A:middle
会因为我们移动了手指

00:05:57.186 --> 00:05:59.706 A:middle
对此进行

00:05:59.706 --> 00:06:00.216 A:middle
识别

00:05:59.706 --> 00:06:00.216 A:middle
识别

00:06:00.656 --> 00:06:02.216 A:middle
它会通过将状态改为开启状态

00:06:02.246 --> 00:06:03.116 A:middle
来完成识别

00:06:03.946 --> 00:06:05.246 A:middle
但我们的移动的幅度

00:06:05.296 --> 00:06:06.536 A:middle
不足以让轻点手势识别器

00:06:06.536 --> 00:06:07.446 A:middle
失效

00:06:07.446 --> 00:06:08.616 A:middle
我们没有超过

00:06:08.616 --> 00:06:09.486 A:middle
最大移动范围

00:06:09.556 --> 00:06:11.306 A:middle
所以轻点手势识别器

00:06:11.306 --> 00:06:13.706 A:middle
会保持原本的

00:06:13.786 --> 00:06:14.366 A:middle
状态

00:06:15.486 --> 00:06:18.166 A:middle
然而在这个例子中

00:06:18.356 --> 00:06:18.916 A:middle
它依然会失效

00:06:19.146 --> 00:06:20.136 A:middle
这跟手势识别系统

00:06:20.136 --> 00:06:21.876 A:middle
另一个方面

00:06:21.946 --> 00:06:22.336 A:middle
有关

00:06:22.686 --> 00:06:24.106 A:middle
系统的默认设置中

00:06:24.106 --> 00:06:26.066 A:middle
只有手势识别器

00:06:26.066 --> 00:06:27.426 A:middle
能够识别和成功运行

00:06:27.426 --> 00:06:28.976 A:middle
而且是唯一的

00:06:29.426 --> 00:06:30.786 A:middle
这就是现在的情况

00:06:31.356 --> 00:06:34.406 A:middle
注意开启状态

00:06:34.406 --> 00:06:35.386 A:middle
会被手势识别系统发出

00:06:35.386 --> 00:06:38.286 A:middle
触摸事件处理

00:06:38.286 --> 00:06:39.456 A:middle
会以已经取消的状态

00:06:39.556 --> 00:06:41.276 A:middle
发出

00:06:41.276 --> 00:06:42.436 A:middle
因为拖移手势识别器

00:06:42.736 --> 00:06:44.846 A:middle
取消了视图中的触摸

00:06:45.096 --> 00:06:46.916 A:middle
所以系统会开启

00:06:46.916 --> 00:06:48.156 A:middle
触摸事件处理会取消

00:06:48.156 --> 00:06:49.786 A:middle
这挺有趣的

00:06:49.786 --> 00:06:51.736 A:middle
因为你的手指

00:06:51.736 --> 00:06:53.706 A:middle
还在屏幕上

00:06:53.706 --> 00:06:55.706 A:middle
手势识别器看见了

00:06:55.846 --> 00:06:57.156 A:middle
但基于响应器的触摸处理

00:06:57.156 --> 00:06:57.506 A:middle
看不见

00:06:57.806 --> 00:06:59.246 A:middle
你们可以

00:06:59.246 --> 00:06:59.576 A:middle
再想想

00:07:00.166 --> 00:07:03.146 A:middle
如果你移开手指

00:07:03.896 --> 00:07:05.386 A:middle
它就会变成终止状态

00:07:05.386 --> 00:07:06.826 A:middle
终止状态同样也会

00:07:07.186 --> 00:07:08.486 A:middle
最先分发给

00:07:08.486 --> 00:07:09.196 A:middle
手势识别系统

00:07:09.976 --> 00:07:11.246 A:middle
拖移手势识别器

00:07:11.246 --> 00:07:14.566 A:middle
会变成终止状态

00:07:14.566 --> 00:07:16.766 A:middle
并标记为

00:07:16.766 --> 00:07:17.326 A:middle
动作已发出

00:07:18.076 --> 00:07:19.256 A:middle
你可能会认为

00:07:19.256 --> 00:07:20.456 A:middle
轻点手势识别器

00:07:20.456 --> 00:07:21.876 A:middle
也会看到这个终止状态

00:07:21.876 --> 00:07:23.266 A:middle
因为通常

00:07:23.266 --> 00:07:25.536 A:middle
你可以在你的处理方法上

00:07:25.736 --> 00:07:26.326 A:middle
看到全部的触摸顺序

00:07:26.656 --> 00:07:27.956 A:middle
但是

00:07:27.956 --> 00:07:28.426 A:middle
是看不到的

00:07:28.966 --> 00:07:30.356 A:middle
这点对于

00:07:30.356 --> 00:07:31.136 A:middle
自定义手势识别器来说

00:07:31.136 --> 00:07:31.666 A:middle
很重要

00:07:31.776 --> 00:07:32.736 A:middle
一旦你的手势识别器无法运作了

00:07:32.736 --> 00:07:34.686 A:middle
你需要

00:07:34.686 --> 00:07:36.066 A:middle
重置所有状态

00:07:36.066 --> 00:07:37.846 A:middle
以确保你没有

00:07:37.846 --> 00:07:39.986 A:middle
在你还没接收到

00:07:39.986 --> 00:07:41.226 A:middle
终止或取消的触摸事件上

00:07:41.226 --> 00:07:41.856 A:middle
遗留以前的设置

00:07:41.986 --> 00:07:44.166 A:middle
要操作的位置

00:07:44.166 --> 00:07:46.206 A:middle
在你自定义的重置中

00:07:46.206 --> 00:07:48.046 A:middle
手势识别器子任务

00:07:49.126 --> 00:07:50.376 A:middle
最后手势识别系统

00:07:50.376 --> 00:07:51.746 A:middle
会向

00:07:51.856 --> 00:07:53.276 A:middle
拖移手势识别器

00:07:53.366 --> 00:07:54.226 A:middle
发出终止信号

00:07:55.806 --> 00:07:57.156 A:middle
你们刚刚看见的就是

00:07:57.226 --> 00:07:57.956 A:middle
Exclusion

00:07:58.136 --> 00:07:59.246 A:middle
状态变更时

00:07:59.246 --> 00:08:00.396 A:middle
会产生这种情况

00:07:59.246 --> 00:08:00.396 A:middle
会产生这种情况

00:08:00.396 --> 00:08:01.676 A:middle
但有种方法

00:08:01.736 --> 00:08:02.036 A:middle
能让你解决

00:08:02.036 --> 00:08:03.926 A:middle
UIGestureRecognizer 委托中

00:08:03.926 --> 00:08:05.596 A:middle
有办法让你解决

00:08:05.936 --> 00:08:07.026 A:middle
手势识别器

00:08:07.026 --> 00:08:08.686 A:middle
应该同步识别

00:08:09.266 --> 00:08:11.156 A:middle
你可以选择

00:08:11.156 --> 00:08:11.736 A:middle
not be excluded 这一选项

00:08:12.326 --> 00:08:13.576 A:middle
注意你也只能

00:08:13.576 --> 00:08:14.126 A:middle
做这件事

00:08:14.126 --> 00:08:16.816 A:middle
所有想要同步识别的参与者

00:08:16.856 --> 00:08:18.316 A:middle
都能进行

00:08:18.546 --> 00:08:19.026 A:middle
同步识别

00:08:19.026 --> 00:08:20.786 A:middle
这你无法阻止

00:08:21.846 --> 00:08:23.566 A:middle
UIGestureRecognizer 本身

00:08:24.856 --> 00:08:26.666 A:middle
有 inverse logic

00:08:26.666 --> 00:08:28.046 A:middle
可以用来阻止

00:08:28.046 --> 00:08:29.736 A:middle
还可以通过子类

00:08:29.736 --> 00:08:30.046 A:middle
来阻止

00:08:30.366 --> 00:08:33.116 A:middle
所以你可以把这个

00:08:33.116 --> 00:08:34.726 A:middle
用在你想要

00:08:34.726 --> 00:08:36.506 A:middle
进行同步识别的

00:08:36.506 --> 00:08:36.696 A:middle
手势识别器上

00:08:37.616 --> 00:08:38.976 A:middle
我们看看是怎么回事

00:08:42.576 --> 00:08:44.376 A:middle
同样先是设置

00:08:45.096 --> 00:08:47.016 A:middle
触摸屏幕然后进入开启状态

00:08:47.636 --> 00:08:48.826 A:middle
一开始

00:08:48.826 --> 00:08:49.396 A:middle
什么都没发生改变

00:08:50.766 --> 00:08:53.356 A:middle
移动手指

00:08:53.356 --> 00:08:54.736 A:middle
拖移识别器进行识别

00:08:54.736 --> 00:08:56.056 A:middle
轻点识别器

00:08:56.056 --> 00:08:59.406 A:middle
无法进行识别

00:08:59.996 --> 00:09:01.096 A:middle
这个时候

00:08:59.996 --> 00:09:01.096 A:middle
这个时候

00:09:01.096 --> 00:09:02.546 A:middle
手势识别系统

00:09:02.546 --> 00:09:04.136 A:middle
会因为状态改变

00:09:04.286 --> 00:09:04.726 A:middle
而产生 Exclusion

00:09:04.726 --> 00:09:06.946 A:middle
属于此交互的手势识别器

00:09:06.946 --> 00:09:08.966 A:middle
改变了

00:09:08.966 --> 00:09:09.436 A:middle
状态

00:09:09.486 --> 00:09:12.016 A:middle
然后询问问题

00:09:12.016 --> 00:09:13.526 A:middle
得到委托回调

00:09:13.836 --> 00:09:15.156 A:middle
回复 true

00:09:15.606 --> 00:09:17.326 A:middle
回复 true 之后

00:09:17.326 --> 00:09:18.306 A:middle
轻点手势识别器

00:09:18.306 --> 00:09:19.236 A:middle
会被允许继续运行

00:09:19.686 --> 00:09:22.226 A:middle
拖移手势识别器的动作

00:09:22.226 --> 00:09:25.976 A:middle
会被发送

00:09:26.146 --> 00:09:27.766 A:middle
如果现在移开手指

00:09:27.766 --> 00:09:30.686 A:middle
状态开启

00:09:30.686 --> 00:09:32.216 A:middle
拖移手势识别器

00:09:32.556 --> 00:09:33.226 A:middle
会进入终止状态完成工作

00:09:33.566 --> 00:09:34.756 A:middle
轻点手势识别器

00:09:34.756 --> 00:09:36.146 A:middle
也会进入终止状态

00:09:36.146 --> 00:09:36.656 A:middle
完成工作

00:09:37.096 --> 00:09:39.006 A:middle
我们需要知道

00:09:39.066 --> 00:09:40.326 A:middle
手势识别器

00:09:40.326 --> 00:09:42.226 A:middle
会在系统调解前

00:09:42.226 --> 00:09:43.946 A:middle
改变状态

00:09:44.276 --> 00:09:46.116 A:middle
这意味着在这个时候

00:09:46.116 --> 00:09:46.976 A:middle
系统会再次询问

00:09:46.976 --> 00:09:48.456 A:middle
手势识别器是否要同步识别

00:09:48.456 --> 00:09:50.096 A:middle
这是因为我们发生了一个状态变更

00:09:50.096 --> 00:09:51.476 A:middle
如果你想要两个识别器都运行的话

00:09:51.476 --> 00:09:53.256 A:middle
你需要再次在委托方法中

00:09:53.256 --> 00:09:54.886 A:middle
回复 true

00:09:56.206 --> 00:09:57.116 A:middle
既然两个识别器

00:09:57.156 --> 00:09:58.396 A:middle
都进行了识别

00:09:58.396 --> 00:09:59.626 A:middle
这就出现了一个有意思的情况

00:09:59.976 --> 00:10:01.356 A:middle
如果你用

00:09:59.976 --> 00:10:01.356 A:middle
如果你用

00:10:01.356 --> 00:10:02.456 A:middle
手势识别器

00:10:02.456 --> 00:10:04.676 A:middle
进行了同步识别

00:10:04.916 --> 00:10:07.236 A:middle
动作一旦发出

00:10:07.236 --> 00:10:08.696 A:middle
你就决定不了顺序了

00:10:09.136 --> 00:10:10.476 A:middle
于是拖移和轻点手势识别器

00:10:10.476 --> 00:10:11.726 A:middle
会不断反馈问题

00:10:11.726 --> 00:10:12.236 A:middle
因为它们同步识别的过程中

00:10:12.236 --> 00:10:14.986 A:middle
你无法确定

00:10:14.986 --> 00:10:16.416 A:middle
它们会依照

00:10:17.306 --> 00:10:18.636 A:middle
什么样的顺序进行

00:10:18.746 --> 00:10:21.886 A:middle
大体来说是好的

00:10:21.886 --> 00:10:23.736 A:middle
但现在可能会识别一些

00:10:23.736 --> 00:10:24.936 A:middle
我们并不想要的

00:10:24.936 --> 00:10:25.506 A:middle
拖移和轻点动作

00:10:25.866 --> 00:10:28.706 A:middle
如果我们想要拖移识别器

00:10:28.706 --> 00:10:30.116 A:middle
等到轻点识别器

00:10:30.116 --> 00:10:32.206 A:middle
超过最大移动范围后

00:10:32.206 --> 00:10:34.526 A:middle
再进行识别的话

00:10:34.526 --> 00:10:36.516 A:middle
我们另有办法

00:10:36.516 --> 00:10:37.546 A:middle
这个方法叫做

00:10:37.546 --> 00:10:38.436 A:middle
failure requirements

00:10:39.056 --> 00:10:41.416 A:middle
在 failure requirements 中

00:10:41.416 --> 00:10:43.236 A:middle
你可以对两个手势识别器

00:10:43.236 --> 00:10:43.986 A:middle
进行设置

00:10:44.846 --> 00:10:46.286 A:middle
举个例子

00:10:46.286 --> 00:10:47.966 A:middle
当要求静态失效

00:10:47.966 --> 00:10:48.686 A:middle
并且优先时

00:10:48.686 --> 00:10:50.186 A:middle
这意味着

00:10:50.186 --> 00:10:52.286 A:middle
一个识别器要求另一个识别器

00:10:52.286 --> 00:10:53.876 A:middle
在它发送动作前

00:10:53.876 --> 00:10:54.306 A:middle
失效

00:10:54.696 --> 00:10:56.586 A:middle
另一个识别器依然会改变状态

00:10:56.586 --> 00:10:58.716 A:middle
但它会等到前一个识别器发送动作后

00:10:59.626 --> 00:10:59.776 A:middle
再改变

00:11:00.486 --> 00:11:02.476 A:middle
如果你想要更快捷的操作

00:11:02.476 --> 00:11:04.276 A:middle
告诉你个方法

00:11:04.356 --> 00:11:05.576 A:middle
你也可以在

00:11:05.576 --> 00:11:07.116 A:middle
UIGestureRecognizer 委托中输入

00:11:07.656 --> 00:11:08.836 A:middle
两个手势识别器方法

00:11:08.836 --> 00:11:09.816 A:middle
应该要求为

00:11:09.816 --> 00:11:11.506 A:middle
failure of

00:11:11.506 --> 00:11:13.086 A:middle
手势识别器应该要求为

00:11:13.086 --> 00:11:13.846 A:middle
fail by

00:11:14.526 --> 00:11:15.666 A:middle
注意这里

00:11:15.736 --> 00:11:16.136 A:middle
有两种写法

00:11:16.266 --> 00:11:17.906 A:middle
你需要确保

00:11:17.906 --> 00:11:20.036 A:middle
执行时

00:11:20.036 --> 00:11:21.486 A:middle
你的写法是匹配的

00:11:21.486 --> 00:11:23.616 A:middle
因为在更复杂的

00:11:23.706 --> 00:11:25.166 A:middle
UI 手势设置中

00:11:25.166 --> 00:11:26.766 A:middle
这个可能叫 one way

00:11:26.766 --> 00:11:27.776 A:middle
和 the other way first

00:11:28.086 --> 00:11:30.396 A:middle
所以必须要统一

00:11:30.726 --> 00:11:32.106 A:middle
否则可能会

00:11:32.106 --> 00:11:33.556 A:middle
出现 bug

00:11:35.156 --> 00:11:36.376 A:middle
UIGestureRecognizer 子类中

00:11:36.376 --> 00:11:38.256 A:middle
也是一样的

00:11:38.456 --> 00:11:39.636 A:middle
执行

00:11:39.636 --> 00:11:40.846 A:middle
failure of

00:11:40.846 --> 00:11:42.286 A:middle
再执行 fail by

00:11:42.756 --> 00:11:44.406 A:middle
同样这些指令

00:11:44.406 --> 00:11:46.736 A:middle
也有其他表述方法

00:11:47.446 --> 00:11:49.436 A:middle
我们再来看看

00:11:49.436 --> 00:11:50.056 A:middle
其中的工作原理

00:11:50.326 --> 00:11:52.016 A:middle
我们在

00:11:52.016 --> 00:11:53.526 A:middle
拖移手势识别器

00:11:53.576 --> 00:11:55.086 A:middle
和轻点手势识别器中间

00:11:55.086 --> 00:11:55.956 A:middle
设置了一个静态 failure requirement

00:11:56.686 --> 00:11:59.946 A:middle
再次触摸屏幕

00:11:59.946 --> 00:12:02.086 A:middle
初始状态显示 possible

00:11:59.946 --> 00:12:02.086 A:middle
初始状态显示 possible

00:12:02.876 --> 00:12:04.226 A:middle
然后我们移动手指

00:12:04.986 --> 00:12:07.666 A:middle
移动状态会分发给

00:12:07.836 --> 00:12:09.296 A:middle
两个手势识别器

00:12:09.296 --> 00:12:10.776 A:middle
拖移识别器的状态显示 began

00:12:11.026 --> 00:12:12.306 A:middle
而轻点手势识别器的状态仍然为

00:12:12.306 --> 00:12:12.836 A:middle
possible

00:12:13.666 --> 00:12:15.076 A:middle
但由于

00:12:15.126 --> 00:12:16.816 A:middle
failure requirement 的存在

00:12:16.816 --> 00:12:18.286 A:middle
拖移识别器

00:12:18.286 --> 00:12:19.646 A:middle
此时不会发送动作

00:12:22.026 --> 00:12:23.396 A:middle
接着再往外移一点点

00:12:23.446 --> 00:12:24.866 A:middle
但又不至于

00:12:24.866 --> 00:12:26.316 A:middle
远到轻点手势识别器无法识别的地步

00:12:26.316 --> 00:12:28.586 A:middle
我们移的时候

00:12:28.586 --> 00:12:30.106 A:middle
拖移识别器会将状态改为

00:12:30.176 --> 00:12:31.546 A:middle
changed

00:12:33.386 --> 00:12:34.796 A:middle
轻点识别器的状态

00:12:34.796 --> 00:12:36.506 A:middle
仍然保持为 possible

00:12:36.506 --> 00:12:38.036 A:middle
但 failure requirement 还没完成

00:12:38.256 --> 00:12:40.386 A:middle
也就是说仍然无动作

00:12:40.956 --> 00:12:42.966 A:middle
此时此刻

00:12:42.966 --> 00:12:45.116 A:middle
如果你在往外移一点

00:12:45.436 --> 00:12:47.116 A:middle
轻点识别器就会失效

00:12:47.116 --> 00:12:49.006 A:middle
它失效之后

00:12:49.006 --> 00:12:50.426 A:middle
就允许了拖移识别器

00:12:50.426 --> 00:12:50.896 A:middle
发送动作

00:12:51.716 --> 00:12:54.006 A:middle
这里有个很重要的

00:12:54.006 --> 00:12:54.336 A:middle
信息

00:12:54.336 --> 00:12:56.006 A:middle
如果此时拖移识别器

00:12:56.006 --> 00:12:57.366 A:middle
发送了动作

00:12:57.656 --> 00:12:58.896 A:middle
它会以 began 的状态

00:12:58.896 --> 00:12:59.706 A:middle
发送动作

00:13:00.186 --> 00:13:01.836 A:middle
虽然它现在的状态是 change

00:13:01.836 --> 00:13:03.406 A:middle
但我们要确保

00:13:03.406 --> 00:13:04.836 A:middle
用户看到的是连续的图像

00:13:05.106 --> 00:13:07.766 A:middle
重要的是

00:13:08.126 --> 00:13:09.486 A:middle
你不能看了

00:13:09.486 --> 00:13:11.326 A:middle
手势识别器发送动作时

00:13:11.326 --> 00:13:13.186 A:middle
显示出的状态后

00:13:13.186 --> 00:13:14.516 A:middle
就误以为是当前的状态

00:13:14.516 --> 00:13:16.376 A:middle
因为这个状态只针对

00:13:16.376 --> 00:13:17.606 A:middle
这个动作方法有效

00:13:18.896 --> 00:13:20.786 A:middle
现在我们再进一步

00:13:20.786 --> 00:13:23.076 A:middle
移开手指

00:13:23.076 --> 00:13:24.406 A:middle
触摸状态显示为 ended

00:13:24.406 --> 00:13:26.026 A:middle
且即将被

00:13:26.026 --> 00:13:26.426 A:middle
分发处理

00:13:26.426 --> 00:13:27.766 A:middle
拖移识别器的状态更改为 ended

00:13:27.766 --> 00:13:29.246 A:middle
并进行识别

00:13:29.556 --> 00:13:30.976 A:middle
轻点手势识别器的状态

00:13:30.976 --> 00:13:31.996 A:middle
更改为 ended

00:13:31.996 --> 00:13:32.686 A:middle
并进行识别

00:13:35.296 --> 00:13:37.076 A:middle
但现在仍然无动作

00:13:37.076 --> 00:13:38.496 A:middle
我们看到拖移手势识别器

00:13:38.496 --> 00:13:40.236 A:middle
已经完成了全套的状态变更

00:13:40.236 --> 00:13:41.676 A:middle
但它还没有发送动作

00:13:41.676 --> 00:13:43.406 A:middle
这是因为

00:13:43.406 --> 00:13:45.496 A:middle
轻点识别器进行了识别

00:13:45.496 --> 00:13:47.166 A:middle
于是 failure requirement

00:13:47.336 --> 00:13:48.076 A:middle
还没结束

00:13:48.576 --> 00:13:50.146 A:middle
轻点手势识别器

00:13:50.146 --> 00:13:51.666 A:middle
最后会发送动作

00:13:52.136 --> 00:13:53.926 A:middle
这就是 failure requirements

00:13:54.116 --> 00:13:55.596 A:middle
Failure requirements 的用处就在于

00:13:55.646 --> 00:13:57.206 A:middle
阻止一个手势识别器

00:13:57.206 --> 00:13:58.156 A:middle
发送多余动作

00:13:58.526 --> 00:14:01.866 A:middle
这点你们得知道

00:13:58.526 --> 00:14:01.866 A:middle
这点你们得知道

00:14:02.076 --> 00:14:03.326 A:middle
我们来看看

00:14:03.326 --> 00:14:03.756 A:middle
这幅图

00:14:03.756 --> 00:14:06.106 A:middle
这是个普通的设定界面

00:14:06.746 --> 00:14:08.656 A:middle
想象一下这个屏幕上

00:14:08.656 --> 00:14:10.106 A:middle
有多少手势识别器

00:14:10.496 --> 00:14:11.736 A:middle
蓄势待发

00:14:11.796 --> 00:14:14.776 A:middle
想个数字

00:14:14.946 --> 00:14:17.916 A:middle
是的  有 163 个

00:14:19.616 --> 00:14:21.126 A:middle
确实是有很多

00:14:21.126 --> 00:14:23.276 A:middle
但我们的手势识别系统

00:14:23.276 --> 00:14:25.236 A:middle
就是为此而存在的

00:14:25.236 --> 00:14:26.506 A:middle
我们在做的

00:14:26.506 --> 00:14:27.586 A:middle
是缩小范围

00:14:27.916 --> 00:14:29.596 A:middle
举个例子

00:14:29.736 --> 00:14:31.696 A:middle
如果点这里  滑动开关

00:14:31.696 --> 00:14:33.846 A:middle
我们为你

00:14:33.846 --> 00:14:35.586 A:middle
缩小了相关手势识别器的

00:14:35.656 --> 00:14:35.876 A:middle
范围

00:14:36.706 --> 00:14:38.856 A:middle
在这个例子中我们减少到了

00:14:38.856 --> 00:14:39.716 A:middle
七个

00:14:40.036 --> 00:14:41.436 A:middle
只有七个

00:14:41.766 --> 00:14:42.636 A:middle
就很好处理了

00:14:43.126 --> 00:14:44.406 A:middle
这是怎么做到的呢

00:14:44.706 --> 00:14:46.466 A:middle
在 channel 中   我们会在触摸发生时

00:14:46.466 --> 00:14:48.166 A:middle
做命中测试

00:14:48.166 --> 00:14:50.036 A:middle
命中测试

00:14:50.036 --> 00:14:51.346 A:middle
会步步深入视图层级

00:14:51.346 --> 00:14:52.966 A:middle
从窗口开始

00:14:52.966 --> 00:14:55.236 A:middle
询问命中测试工具

00:14:55.236 --> 00:14:56.986 A:middle
触摸是否在某个视图中

00:14:56.986 --> 00:14:58.196 A:middle
我们找到最深层的视图后

00:14:58.296 --> 00:15:00.406 A:middle
我们保存并指定它

00:14:58.296 --> 00:15:00.406 A:middle
我们保存并指定它

00:15:00.406 --> 00:15:01.206 A:middle
分配给这次触摸事件

00:15:05.476 --> 00:15:07.386 A:middle
这是一个

00:15:07.386 --> 00:15:07.986 A:middle
简要概览

00:15:07.986 --> 00:15:10.366 A:middle
包括了命中测试

00:15:10.366 --> 00:15:10.886 A:middle
和触摸点

00:15:11.716 --> 00:15:15.216 A:middle
这是你重载的

00:15:15.216 --> 00:15:15.626 A:middle
触摸点

00:15:15.886 --> 00:15:17.986 A:middle
注意如果你重载了触摸点

00:15:17.986 --> 00:15:19.906 A:middle
来放大或缩小了

00:15:19.906 --> 00:15:21.026 A:middle
你的命中测试区域

00:15:21.026 --> 00:15:22.926 A:middle
你应该两者都

00:15:23.416 --> 00:15:23.966 A:middle
再进行一次重载

00:15:24.496 --> 00:15:26.806 A:middle
还要注意这里的事件

00:15:26.836 --> 00:15:28.206 A:middle
是没有完全形成的

00:15:28.206 --> 00:15:29.396 A:middle
因为命中测试是我们做的

00:15:29.396 --> 00:15:29.916 A:middle
第一件事

00:15:30.346 --> 00:15:32.026 A:middle
这意味着如果你去检查

00:15:32.026 --> 00:15:33.936 A:middle
事件中的触摸点

00:15:33.936 --> 00:15:35.426 A:middle
可能会找不到

00:15:35.426 --> 00:15:36.646 A:middle
我们需要经过一层一层的测试

00:15:36.646 --> 00:15:38.066 A:middle
最后才会把触摸点

00:15:38.066 --> 00:15:38.626 A:middle
添加到事件上

00:15:39.006 --> 00:15:40.226 A:middle
也许你会觉得奇怪

00:15:40.226 --> 00:15:42.156 A:middle
但在命中测试中

00:15:42.186 --> 00:15:42.576 A:middle
就是这样的

00:15:42.576 --> 00:15:43.816 A:middle
对于这个事件

00:15:43.886 --> 00:15:45.306 A:middle
你能询问的只有

00:15:45.306 --> 00:15:48.146 A:middle
它是否在回调中存在

00:15:48.276 --> 00:15:49.826 A:middle
和它的种类

00:15:50.296 --> 00:15:52.216 A:middle
还有很多属性控件

00:15:52.286 --> 00:15:53.396 A:middle
会对命中测试进行影响

00:15:53.436 --> 00:15:55.276 A:middle
比如 UIView 中的

00:15:55.276 --> 00:15:56.496 A:middle
isUserInteractionEnabled

00:15:56.496 --> 00:15:57.846 A:middle
这个是

00:15:57.846 --> 00:15:58.496 A:middle
最重要的控件之一

00:15:58.846 --> 00:16:01.376 A:middle
如果未作更改

00:15:58.846 --> 00:16:01.376 A:middle
如果未作更改

00:16:01.376 --> 00:16:03.236 A:middle
它一般默认为 true

00:16:03.236 --> 00:16:05.216 A:middle
但有例外  对于图片视图

00:16:05.216 --> 00:16:07.586 A:middle
默认为 false

00:16:07.866 --> 00:16:09.086 A:middle
对于这种你需要改为 yes

00:16:09.116 --> 00:16:10.686 A:middle
不然你就无法对此

00:16:10.716 --> 00:16:11.666 A:middle
进行命中测试

00:16:12.056 --> 00:16:13.386 A:middle
这有个 alpha 和 isHidden

00:16:13.386 --> 00:16:14.926 A:middle
这是用来防护命中测试的

00:16:14.976 --> 00:16:16.596 A:middle
所以对于不可见的东西

00:16:16.596 --> 00:16:18.846 A:middle
我们不对它进行命中测试

00:16:19.196 --> 00:16:21.516 A:middle
但在你的自定义子类中

00:16:21.516 --> 00:16:23.226 A:middle
你还是需要进行

00:16:23.226 --> 00:16:23.576 A:middle
命中测试

00:16:23.916 --> 00:16:24.786 A:middle
再就是

00:16:24.786 --> 00:16:26.866 A:middle
isMultipleTouchEnabled

00:16:26.866 --> 00:16:28.746 A:middle
出于历史原因默认为 No

00:16:28.746 --> 00:16:30.436 A:middle
但并不影响

00:16:30.436 --> 00:16:31.716 A:middle
手势识别系统

00:16:31.716 --> 00:16:34.226 A:middle
所以如果你

00:16:34.226 --> 00:16:35.656 A:middle
明明做了双指开合的

00:16:35.656 --> 00:16:37.096 A:middle
相关手势设定

00:16:37.156 --> 00:16:38.946 A:middle
但你的

00:16:38.946 --> 00:16:40.136 A:middle
基于响应器的触摸处理

00:16:40.136 --> 00:16:41.706 A:middle
只看到了一个触摸

00:16:41.706 --> 00:16:43.906 A:middle
很有可能你层级中的一个视图

00:16:43.906 --> 00:16:45.986 A:middle
设置成 No

00:16:45.986 --> 00:16:46.676 A:middle
忘改了

00:16:46.716 --> 00:16:47.776 A:middle
你只需要把它

00:16:47.886 --> 00:16:48.146 A:middle
设置为 True

00:16:48.596 --> 00:16:49.846 A:middle
在接下来是

00:16:49.846 --> 00:16:51.566 A:middle
UIViewAnimationOptions

00:16:51.566 --> 00:16:53.646 A:middle
如果你进行了终端用户交互

00:16:53.646 --> 00:16:54.256 A:middle
就停止测试

00:16:54.676 --> 00:16:57.646 A:middle
这并不是因为我们不希望

00:16:57.646 --> 00:16:59.106 A:middle
你在用户交互期间

00:16:59.106 --> 00:17:01.176 A:middle
进行命中测试

00:16:59.106 --> 00:17:01.176 A:middle
进行命中测试

00:17:01.176 --> 00:17:02.546 A:middle
而是如果你授权了

00:17:02.546 --> 00:17:03.726 A:middle
你需要再做点额外的工作

00:17:04.036 --> 00:17:05.205 A:middle
你需要重载

00:17:05.205 --> 00:17:06.366 A:middle
内部相关的命中测试

00:17:06.366 --> 00:17:07.016 A:middle
从而让它

00:17:07.066 --> 00:17:07.336 A:middle
顺畅运行

00:17:08.296 --> 00:17:09.465 A:middle
我们之前说过

00:17:09.465 --> 00:17:10.836 A:middle
表现层和模型层

00:17:10.836 --> 00:17:11.976 A:middle
你应该

00:17:11.976 --> 00:17:13.205 A:middle
对此

00:17:13.976 --> 00:17:14.205 A:middle
有所收获

00:17:14.465 --> 00:17:16.195 A:middle
如果没有

00:17:16.195 --> 00:17:16.566 A:middle
请去看看那次展示

00:17:17.036 --> 00:17:19.356 A:middle
去年我们新增了

00:17:19.356 --> 00:17:21.705 A:middle
UIViewPropertyAnimator

00:17:21.705 --> 00:17:23.046 A:middle
它可以帮助你

00:17:23.046 --> 00:17:24.296 A:middle
对动画进行命中测试

00:17:24.746 --> 00:17:26.386 A:middle
然而对于这个

00:17:26.386 --> 00:17:27.766 A:middle
isManualHitTestingEnabled 的属性控件

00:17:27.766 --> 00:17:29.156 A:middle
你必须设置为 true

00:17:29.636 --> 00:17:32.076 A:middle
从而才能进行自定义命中测试

00:17:32.076 --> 00:17:33.296 A:middle
和其他更复杂的

00:17:33.296 --> 00:17:33.936 A:middle
场景

00:17:34.456 --> 00:17:37.006 A:middle
再回来看

00:17:37.006 --> 00:17:38.206 A:middle
视图层级中的命中测试

00:17:38.566 --> 00:17:39.916 A:middle
我们进行了命中测试后

00:17:40.206 --> 00:17:41.476 A:middle
我们回来视图层级

00:17:41.476 --> 00:17:42.796 A:middle
收集各个视图中

00:17:42.796 --> 00:17:44.296 A:middle
所有的

00:17:44.336 --> 00:17:44.826 A:middle
手势识别器

00:17:45.056 --> 00:17:46.586 A:middle
这是我们对这个交互的

00:17:46.586 --> 00:17:49.666 A:middle
手势识别器基集

00:17:49.666 --> 00:17:53.206 A:middle
但还有更多

00:17:53.206 --> 00:17:54.516 A:middle
可供你自定义的部分

00:17:54.516 --> 00:17:55.726 A:middle
你有个回调函数

00:17:55.786 --> 00:17:56.906 A:middle
UIGestureRecognizer

00:17:56.906 --> 00:17:57.666 A:middle
shouldReceive touch

00:17:58.076 --> 00:18:00.496 A:middle
如果你对它返回 false

00:17:58.076 --> 00:18:00.496 A:middle
如果你对它返回 false

00:18:00.496 --> 00:18:03.196 A:middle
你就会完全

00:18:03.196 --> 00:18:04.446 A:middle
将一个手势识别器

00:18:04.446 --> 00:18:05.696 A:middle
隔离在外

00:18:05.696 --> 00:18:07.346 A:middle
它会永远看不见这次触摸

00:18:07.576 --> 00:18:09.056 A:middle
这也是个让你

00:18:09.056 --> 00:18:10.826 A:middle
来看看你的手势识别器

00:18:11.556 --> 00:18:13.246 A:middle
是否真正

00:18:13.246 --> 00:18:15.246 A:middle
参与交互

00:18:15.246 --> 00:18:15.886 A:middle
的机会

00:18:16.276 --> 00:18:17.746 A:middle
在后面的 gestureRecognizerShouldBegin 上

00:18:17.746 --> 00:18:18.986 A:middle
也有一个触摸点

00:18:18.986 --> 00:18:20.386 A:middle
可能会给调试

00:18:20.386 --> 00:18:21.466 A:middle
带来问题

00:18:21.756 --> 00:18:23.296 A:middle
当手势识别器准备开启时

00:18:23.356 --> 00:18:24.826 A:middle
会进行询问

00:18:24.866 --> 00:18:26.806 A:middle
你可以对此说不

00:18:26.936 --> 00:18:28.756 A:middle
也就是返回 False

00:18:29.056 --> 00:18:31.106 A:middle
如果你这样做了  它就会失效

00:18:31.106 --> 00:18:33.356 A:middle
它因为失效

00:18:33.356 --> 00:18:34.936 A:middle
会完成 failure requirements

00:18:34.936 --> 00:18:36.916 A:middle
这点可以

00:18:37.196 --> 00:18:39.386 A:middle
看看

00:18:39.556 --> 00:18:41.056 A:middle
这有个 UIGestureRecognizer 上的

00:18:41.056 --> 00:18:42.656 A:middle
静态属性控件 isEnabled

00:18:42.656 --> 00:18:45.136 A:middle
如果你知道你的状态

00:18:45.136 --> 00:18:47.026 A:middle
并且想在静态下进行

00:18:47.026 --> 00:18:48.396 A:middle
你可以把它设置为 False

00:18:48.736 --> 00:18:49.956 A:middle
这对你

00:18:49.956 --> 00:18:50.486 A:middle
很有帮助

00:18:50.716 --> 00:18:52.536 A:middle
这有个技巧

00:18:52.536 --> 00:18:54.686 A:middle
我们说过很多次了

00:18:54.986 --> 00:18:57.056 A:middle
当你设置成 False 时

00:18:57.056 --> 00:18:58.576 A:middle
它在识别时会失效

00:18:58.856 --> 00:19:00.156 A:middle
如果你立即又设置回 True

00:18:58.856 --> 00:19:00.156 A:middle
如果你立即又设置回 True

00:19:00.246 --> 00:19:01.766 A:middle
你的手势识别器

00:19:01.766 --> 00:19:04.226 A:middle
就会直接

00:19:04.226 --> 00:19:05.356 A:middle
对下一个触摸顺序

00:19:05.386 --> 00:19:05.866 A:middle
进行回应

00:19:06.776 --> 00:19:07.926 A:middle
接下来是 allowedTouchTypes

00:19:07.976 --> 00:19:09.526 A:middle
默认为所有触摸种类

00:19:09.526 --> 00:19:11.686 A:middle
包括直接

00:19:11.686 --> 00:19:13.086 A:middle
间接和触控笔

00:19:13.656 --> 00:19:15.996 A:middle
但你也可以

00:19:15.996 --> 00:19:17.656 A:middle
只选触控笔或直接触摸

00:19:17.656 --> 00:19:20.996 A:middle
但如果你想要

00:19:21.276 --> 00:19:23.006 A:middle
识别不同触摸种类的手势

00:19:23.006 --> 00:19:24.176 A:middle
你必须把

00:19:24.176 --> 00:19:25.856 A:middle
requiresExclusiveTouchType

00:19:25.856 --> 00:19:27.546 A:middle
设置为 True

00:19:27.936 --> 00:19:29.696 A:middle
这样你才能做到

00:19:29.696 --> 00:19:31.166 A:middle
用一支铅笔和一根手指

00:19:31.166 --> 00:19:31.796 A:middle
来实现双指开合

00:19:32.206 --> 00:19:33.126 A:middle
否则是做不到的

00:19:33.826 --> 00:19:34.856 A:middle
说到属性控件

00:19:34.856 --> 00:19:36.206 A:middle
我们在 iOS 11 中给你们带来了

00:19:36.386 --> 00:19:37.886 A:middle
New Property

00:19:37.886 --> 00:19:39.086 A:middle
就叫这个名字

00:19:39.656 --> 00:19:40.846 A:middle
听起来简单

00:19:40.846 --> 00:19:42.256 A:middle
但很有帮助

00:19:42.256 --> 00:19:43.356 A:middle
因为我们可以让你用

00:19:43.356 --> 00:19:44.436 A:middle
我们所有的手势识别器

00:19:44.436 --> 00:19:45.256 A:middle
并且还能进行配置

00:19:45.576 --> 00:19:47.036 A:middle
于是你能添加

00:19:47.036 --> 00:19:47.246 A:middle
附加名称

00:19:47.246 --> 00:19:48.396 A:middle
调试时你不需要

00:19:48.466 --> 00:19:49.706 A:middle
去看动作方法

00:19:50.146 --> 00:19:52.206 A:middle
你只需要用它来

00:19:52.206 --> 00:19:53.996 A:middle
进行调试就好了

00:19:53.996 --> 00:19:56.176 A:middle
我们不保证

00:19:56.176 --> 00:19:58.046 A:middle
系统不会对它

00:19:58.046 --> 00:19:58.486 A:middle
进行干涉

00:19:59.676 --> 00:20:01.836 A:middle
说到调试

00:19:59.676 --> 00:20:01.836 A:middle
说到调试

00:20:01.836 --> 00:20:03.966 A:middle
我们现在

00:20:03.966 --> 00:20:05.076 A:middle
取得了一个破发点机会

00:20:05.076 --> 00:20:06.406 A:middle
可以用手势识别器的 shouldReceive touch

00:20:06.976 --> 00:20:08.636 A:middle
清楚地看到

00:20:08.676 --> 00:20:09.146 A:middle
你的设置是否生效

00:20:09.496 --> 00:20:11.116 A:middle
还有这个 touchesBegin

00:20:11.116 --> 00:20:12.226 A:middle
这种 responder base touch handling method

00:20:12.226 --> 00:20:14.366 A:middle
可以帮助你

00:20:14.816 --> 00:20:16.206 A:middle
在已知状态下

00:20:16.206 --> 00:20:17.736 A:middle
检查手势识别器系统的状态

00:20:17.776 --> 00:20:19.106 A:middle
你也看到了

00:20:19.156 --> 00:20:20.946 A:middle
我们操作的步骤

00:20:21.246 --> 00:20:22.606 A:middle
现在你可以对它进行检查

00:20:22.606 --> 00:20:25.866 A:middle
并且知道各个值的

00:20:25.866 --> 00:20:26.336 A:middle
意思

00:20:26.736 --> 00:20:28.106 A:middle
再比如  你还可以看

00:20:28.106 --> 00:20:29.766 A:middle
一次触摸的手势识别器

00:20:29.766 --> 00:20:31.886 A:middle
或者你也可以

00:20:31.886 --> 00:20:33.016 A:middle
通过询问事件

00:20:33.016 --> 00:20:34.986 A:middle
来查看触摸的手势识别器

00:20:35.346 --> 00:20:38.076 A:middle
你还可以收集

00:20:38.076 --> 00:20:39.726 A:middle
调试期间

00:20:39.726 --> 00:20:41.086 A:middle
所有视图层级的

00:20:41.086 --> 00:20:41.426 A:middle
手势识别器

00:20:43.356 --> 00:20:45.126 A:middle
再说说

00:20:45.126 --> 00:20:46.176 A:middle
自定义 UIGestureRecognizers.

00:20:46.656 --> 00:20:47.946 A:middle
你必须慢开始

00:20:47.996 --> 00:20:48.786 A:middle
快结束

00:20:49.186 --> 00:20:50.896 A:middle
就是说如果你过早开始

00:20:50.896 --> 00:20:52.086 A:middle
比如对于触摸事件而言

00:20:52.126 --> 00:20:53.896 A:middle
一旦开始早了

00:20:53.896 --> 00:20:55.736 A:middle
其他手势识别器就没有机会

00:20:55.736 --> 00:20:56.826 A:middle
设置成 not be excluded 了

00:20:57.276 --> 00:20:57.886 A:middle
这很不好

00:20:57.886 --> 00:20:59.136 A:middle
所以你应该

00:20:59.166 --> 00:21:00.786 A:middle
尽量晚一点开始

00:20:59.166 --> 00:21:00.786 A:middle
尽量晚一点开始

00:21:00.786 --> 00:21:01.756 A:middle
保证你的手势识别器的

00:21:01.756 --> 00:21:02.326 A:middle
功能

00:21:02.756 --> 00:21:05.146 A:middle
同时你也要快速结束

00:21:05.146 --> 00:21:06.696 A:middle
免得去影响

00:21:06.696 --> 00:21:08.006 A:middle
其他手势识别器的

00:21:08.006 --> 00:21:10.066 A:middle
failure requirements

00:21:10.066 --> 00:21:11.926 A:middle
这点很重要

00:21:11.926 --> 00:21:13.556 A:middle
你每看到一次触摸事件

00:21:13.556 --> 00:21:16.036 A:middle
一定要把状态变为fail

00:21:16.086 --> 00:21:17.396 A:middle
即使是之前的状态一直都是 possible

00:21:17.396 --> 00:21:18.456 A:middle
也要这么做

00:21:18.456 --> 00:21:19.806 A:middle
因为你必须被标记为

00:21:19.806 --> 00:21:21.166 A:middle
属于此交互

00:21:21.166 --> 00:21:23.026 A:middle
否则会使系统中止

00:21:23.026 --> 00:21:24.526 A:middle
慎重对待

00:21:24.526 --> 00:21:25.016 A:middle
屏蔽触摸

00:21:25.076 --> 00:21:27.116 A:middle
要正确地去屏蔽

00:21:27.116 --> 00:21:28.226 A:middle
不能只是放在一边不处理

00:21:28.606 --> 00:21:30.016 A:middle
你还应该调用 Ignore

00:21:30.346 --> 00:21:31.856 A:middle
这一步是给

00:21:31.856 --> 00:21:33.676 A:middle
自定义手势识别器子集上的事件做的

00:21:33.676 --> 00:21:34.886 A:middle
否则你的触摸事件会被延迟

00:21:34.886 --> 00:21:36.856 A:middle
虽然你对它们

00:21:36.856 --> 00:21:37.856 A:middle
甚至都不感兴趣

00:21:38.416 --> 00:21:39.656 A:middle
永远别忘了

00:21:39.696 --> 00:21:41.696 A:middle
设置 touchesCancelled

00:21:41.996 --> 00:21:43.656 A:middle
今年这一步变得尤为重要

00:21:43.656 --> 00:21:44.866 A:middle
因为我们的拖放功能

00:21:44.866 --> 00:21:46.176 A:middle
会需要更频繁地取消

00:21:46.176 --> 00:21:46.446 A:middle
触摸事件

00:21:47.746 --> 00:21:50.116 A:middle
在这里你得记住

00:21:50.116 --> 00:21:51.846 A:middle
要重新访问你的设置

00:21:51.846 --> 00:21:52.896 A:middle
好好检查

00:21:52.896 --> 00:21:55.006 A:middle
手势识别器设置

00:21:55.886 --> 00:21:57.346 A:middle
好好理顺一下

00:21:57.346 --> 00:21:58.576 A:middle
刚刚听到的知识

00:21:58.636 --> 00:21:58.976 A:middle
归纳好

00:21:59.856 --> 00:22:01.016 A:middle
重新访问你的

00:21:59.856 --> 00:22:01.016 A:middle
重新访问你的

00:22:01.016 --> 00:22:02.146 A:middle
exclusion 和 failure requirements

00:22:02.146 --> 00:22:03.606 A:middle
当你在用一个手势识别器时

00:22:03.826 --> 00:22:05.156 A:middle
你想要多少个

00:22:05.156 --> 00:22:06.356 A:middle
手势识别器

00:22:06.356 --> 00:22:07.546 A:middle
同步发挥作用

00:22:09.246 --> 00:22:10.746 A:middle
你的手势识别器

00:22:10.746 --> 00:22:12.336 A:middle
是否在正确的视图中

00:22:12.336 --> 00:22:13.556 A:middle
是否够深层

00:22:13.666 --> 00:22:14.956 A:middle
你放置得越深

00:22:14.956 --> 00:22:16.526 A:middle
它跟其他手势识别器

00:22:16.526 --> 00:22:17.306 A:middle
产生的干扰越小

00:22:17.356 --> 00:22:18.436 A:middle
越是在上层

00:22:18.436 --> 00:22:20.706 A:middle
越通用

00:22:21.126 --> 00:22:22.266 A:middle
所以你得

00:22:22.336 --> 00:22:22.896 A:middle
好好权衡

00:22:23.856 --> 00:22:26.276 A:middle
现在

00:22:26.276 --> 00:22:27.706 A:middle
我想请 Glen 上台

00:22:27.706 --> 00:22:28.206 A:middle
讲讲系统手势交互

00:22:28.596 --> 00:22:28.876 A:middle
谢谢

00:22:29.516 --> 00:22:35.546 A:middle
[掌声]

00:22:36.046 --> 00:22:36.686 A:middle
&gt;&gt; 谢谢 Dom

00:22:36.686 --> 00:22:39.446 A:middle
我叫 Glen Low

00:22:39.446 --> 00:22:41.506 A:middle
我是 UIkit

00:22:41.506 --> 00:22:42.006 A:middle
软件工程师

00:22:42.396 --> 00:22:43.666 A:middle
我来为大家介绍

00:22:43.666 --> 00:22:45.706 A:middle
一些全新的

00:22:45.706 --> 00:22:46.936 A:middle
能优化系统手势交互体验的

00:22:47.346 --> 00:22:48.526 A:middle
API

00:22:49.236 --> 00:22:50.436 A:middle
先来玩个

00:22:50.436 --> 00:22:51.056 A:middle
小游戏

00:22:52.226 --> 00:22:53.976 A:middle
辛辛苦苦码一天代码的

00:22:54.016 --> 00:22:55.406 A:middle
软件工程师想玩玩游戏

00:22:55.766 --> 00:22:58.376 A:middle
所以我打开了 Demobots

00:22:58.376 --> 00:22:59.596 A:middle
在虚拟控件上

00:22:59.596 --> 00:23:00.546 A:middle
上上下下滑动

00:22:59.596 --> 00:23:00.546 A:middle
上上下下滑动

00:23:00.546 --> 00:23:01.506 A:middle
操作机器人

00:23:01.506 --> 00:23:03.126 A:middle
就是屏幕右上角的

00:23:03.126 --> 00:23:03.716 A:middle
这个

00:23:03.936 --> 00:23:04.996 A:middle
灰色圆圈

00:23:05.956 --> 00:23:06.976 A:middle
就像这样

00:23:08.466 --> 00:23:11.176 A:middle
我的机器人必须

00:23:11.176 --> 00:23:13.276 A:middle
把坏机器人变成好机器人

00:23:14.606 --> 00:23:16.326 A:middle
你们看我玩得还不错

00:23:17.796 --> 00:23:19.036 A:middle
好像错过了一个

00:23:19.036 --> 00:23:20.466 A:middle
我得往下走

00:23:20.466 --> 00:23:22.586 A:middle
找到那个机器人

00:23:23.766 --> 00:23:25.966 A:middle
欸  这是怎么了

00:23:26.186 --> 00:23:27.356 A:middle
为什么我退回到了

00:23:27.356 --> 00:23:27.806 A:middle
桌面

00:23:28.386 --> 00:23:30.976 A:middle
这不是我们

00:23:30.976 --> 00:23:32.026 A:middle
想要营造的

00:23:32.026 --> 00:23:32.906 A:middle
用户体验吧

00:23:33.946 --> 00:23:35.426 A:middle
那哪里错了呢

00:23:36.716 --> 00:23:38.166 A:middle
我们现在有几个

00:23:38.316 --> 00:23:40.816 A:middle
特殊的手势

00:23:40.816 --> 00:23:41.386 A:middle
我们称作系统手势

00:23:41.846 --> 00:23:44.666 A:middle
从底部向上滑

00:23:44.666 --> 00:23:46.146 A:middle
可以拉出多任务处理栏

00:23:46.146 --> 00:23:46.466 A:middle
和 Dock 栏

00:23:47.456 --> 00:23:49.796 A:middle
从侧面滑

00:23:50.006 --> 00:23:52.006 A:middle
可以实现 SlideOver 功能

00:23:52.646 --> 00:23:54.996 A:middle
从顶部向下滑

00:23:55.046 --> 00:23:56.496 A:middle
会拉出桌面

00:23:57.666 --> 00:23:59.856 A:middle
现在这些特殊的系统手势识别器

00:23:59.856 --> 00:24:02.146 A:middle
会阻碍你 App 中的

00:23:59.856 --> 00:24:02.146 A:middle
会阻碍你 App 中的

00:24:02.146 --> 00:24:03.196 A:middle
手势识别器

00:24:03.426 --> 00:24:06.106 A:middle
和响应器

00:24:06.106 --> 00:24:07.086 A:middle
意图率先

00:24:07.086 --> 00:24:07.206 A:middle
识别触摸

00:24:07.206 --> 00:24:09.176 A:middle
那么我们能做些什么呢

00:24:10.496 --> 00:24:12.036 A:middle
有一些手势识别器

00:24:12.096 --> 00:24:13.036 A:middle
例外

00:24:13.626 --> 00:24:15.386 A:middle
轻点  双指开合  旋转

00:24:15.386 --> 00:24:17.646 A:middle
和长按手势识别器

00:24:17.646 --> 00:24:18.966 A:middle
能够在系统手势识别器

00:24:19.016 --> 00:24:21.016 A:middle
识别的同时

00:24:21.046 --> 00:24:21.946 A:middle
识别触摸

00:24:22.676 --> 00:24:23.976 A:middle
但是有些时候

00:24:23.976 --> 00:24:26.306 A:middle
如果发现明显是系统手势

00:24:26.306 --> 00:24:27.866 A:middle
它们也会被

00:24:27.866 --> 00:24:28.206 A:middle
取消

00:24:28.836 --> 00:24:31.016 A:middle
这就是为什么

00:24:31.576 --> 00:24:32.736 A:middle
当你在底部点一个按钮

00:24:32.736 --> 00:24:34.276 A:middle
并不会拉出

00:24:34.276 --> 00:24:36.106 A:middle
Dock 栏的原因

00:24:36.106 --> 00:24:37.706 A:middle
因为它是基于

00:24:37.736 --> 00:24:39.016 A:middle
轻点手势识别器的

00:24:40.026 --> 00:24:42.246 A:middle
另一方面

00:24:42.956 --> 00:24:44.286 A:middle
我们有拖移和轻扫识别器

00:24:44.286 --> 00:24:46.286 A:middle
以及早就有的响应器

00:24:46.586 --> 00:24:47.866 A:middle
而这些会在

00:24:47.916 --> 00:24:49.646 A:middle
系统手势识别器识别之后

00:24:49.646 --> 00:24:51.136 A:middle
对触摸进行处理

00:24:51.726 --> 00:24:53.056 A:middle
那么当我们的用户

00:24:53.056 --> 00:24:54.616 A:middle
轻轻滑动了底部的时候

00:24:54.616 --> 00:24:56.626 A:middle
他是想打开 Dock 栏呢

00:24:56.816 --> 00:24:59.296 A:middle
还是拖动视野呢

00:24:59.516 --> 00:25:03.276 A:middle
我们得去猜

00:24:59.516 --> 00:25:03.276 A:middle
我们得去猜

00:25:03.396 --> 00:25:04.586 A:middle
是否需要延迟系统手势

00:25:05.506 --> 00:25:06.986 A:middle
举个例子

00:25:06.986 --> 00:25:09.116 A:middle
如果这个 App 隐藏了状态栏

00:25:09.446 --> 00:25:10.586 A:middle
我们就会延迟

00:25:10.586 --> 00:25:13.066 A:middle
上拉 Dock 栏

00:25:13.066 --> 00:25:14.266 A:middle
但要一直猜对是很难的

00:25:14.466 --> 00:25:16.536 A:middle
到底谁最清楚

00:25:16.536 --> 00:25:17.386 A:middle
用户想要什么

00:25:18.616 --> 00:25:21.076 A:middle
对于 iOS 11  你现在可以告诉我们

00:25:21.456 --> 00:25:22.976 A:middle
什么时候延迟

00:25:23.056 --> 00:25:23.356 A:middle
在哪进行延迟

00:25:24.776 --> 00:25:25.586 A:middle
不需要再猜

00:25:25.906 --> 00:25:27.626 A:middle
你不用再去判断

00:25:28.066 --> 00:25:30.036 A:middle
是否需要延迟

00:25:30.036 --> 00:25:31.066 A:middle
系统手势

00:25:32.266 --> 00:25:33.866 A:middle
也就是说

00:25:33.866 --> 00:25:35.566 A:middle
如果你的 App 隐藏了状态栏

00:25:35.566 --> 00:25:37.016 A:middle
不会再自动

00:25:37.126 --> 00:25:37.556 A:middle
延迟 Dock 栏

00:25:38.716 --> 00:25:41.736 A:middle
看起来是什么样呢

00:25:42.196 --> 00:25:43.836 A:middle
你要用到一个新的

00:25:43.836 --> 00:25:46.506 A:middle
叫做 ScreenEdgesDeferringSystemGestures

00:25:46.606 --> 00:25:47.896 A:middle
的 API

00:25:48.626 --> 00:25:50.926 A:middle
这个 API 能让你

00:25:50.926 --> 00:25:52.546 A:middle
界定一个范围

00:25:52.806 --> 00:25:54.666 A:middle
范围内会延迟系统识别器

00:25:54.666 --> 00:25:56.786 A:middle
从而保护你自己的手势识别器

00:25:57.476 --> 00:25:58.656 A:middle
在你的试图控制器中

00:25:58.796 --> 00:26:01.426 A:middle
重载

00:25:58.796 --> 00:26:01.426 A:middle
重载

00:26:01.946 --> 00:26:03.706 A:middle
preferredScreenEdgesDeferringSystemGesutres

00:26:03.706 --> 00:26:05.046 A:middle
以返回要延迟的

00:26:05.046 --> 00:26:05.606 A:middle
屏幕边界

00:26:06.356 --> 00:26:10.216 A:middle
如果你想返回其他

00:26:10.216 --> 00:26:12.466 A:middle
调用

00:26:12.676 --> 00:26:14.766 A:middle
setNeedsUpdateOfScreenEdges

00:26:14.806 --> 00:26:16.736 A:middle
DeferringSystemGestures

00:26:17.386 --> 00:26:18.936 A:middle
我们看看

00:26:19.296 --> 00:26:21.486 A:middle
这个调用是干嘛的

00:26:24.346 --> 00:26:26.146 A:middle
当用户触摸界面底部时

00:26:26.956 --> 00:26:28.346 A:middle
你的手势识别器

00:26:28.346 --> 00:26:29.856 A:middle
和响应器

00:26:29.856 --> 00:26:30.996 A:middle
同时得到触摸

00:26:31.666 --> 00:26:33.806 A:middle
这时

00:26:35.036 --> 00:26:36.116 A:middle
我们显示一个拉出箭头

00:26:36.556 --> 00:26:38.466 A:middle
让用户看到

00:26:38.466 --> 00:26:39.646 A:middle
他们有更多选择

00:26:40.326 --> 00:26:41.876 A:middle
再一次在底部向上滑

00:26:41.936 --> 00:26:43.646 A:middle
就能上拉

00:26:43.646 --> 00:26:43.966 A:middle
Dock 栏

00:26:51.306 --> 00:26:53.356 A:middle
如果你都是在

00:26:53.356 --> 00:26:54.966 A:middle
容器视图下进行编写的话

00:26:54.966 --> 00:26:55.476 A:middle
再教你一招

00:26:56.246 --> 00:26:57.236 A:middle
一般而言

00:26:57.236 --> 00:26:58.456 A:middle
这个 MyContainerViewController

00:26:58.456 --> 00:26:59.656 A:middle
实际上就是

00:26:59.656 --> 00:27:00.536 A:middle
ChildViewController

00:26:59.656 --> 00:27:00.536 A:middle
ChildViewController

00:27:00.626 --> 00:27:02.726 A:middle
所以你返回的

00:27:02.726 --> 00:27:04.486 A:middle
重载得写对

00:27:04.806 --> 00:27:06.746 A:middle
应该是

00:27:06.746 --> 00:27:08.296 A:middle
childViewControllerForScreenEdgesDeferringSystemGestures

00:27:08.896 --> 00:27:10.686 A:middle
它应该有希望拿下

00:27:10.686 --> 00:27:12.016 A:middle
iOS 最长的方法名

00:27:12.016 --> 00:27:12.846 A:middle
的称号

00:27:13.526 --> 00:27:16.066 A:middle
现在万事俱备

00:27:16.066 --> 00:27:18.376 A:middle
都在你指之下

00:27:18.376 --> 00:27:19.666 A:middle
你该什么时候用呢

00:27:20.276 --> 00:27:23.966 A:middle
简而言之  别用

00:27:24.676 --> 00:27:26.476 A:middle
那我来这干嘛  是吧

00:27:26.866 --> 00:27:28.626 A:middle
不那么简而言之就是

00:27:28.626 --> 00:27:30.946 A:middle
好好思考什么时候用

00:27:30.946 --> 00:27:32.686 A:middle
为什么

00:27:33.276 --> 00:27:35.016 A:middle
第一

00:27:35.016 --> 00:27:36.326 A:middle
你的用户对上拉 Dock 栏的操作

00:27:36.326 --> 00:27:37.886 A:middle
和其他的系统手势

00:27:37.886 --> 00:27:38.426 A:middle
都非常熟悉

00:27:38.426 --> 00:27:40.516 A:middle
这时用这个 API

00:27:40.516 --> 00:27:41.496 A:middle
会违背他们的习惯

00:27:41.646 --> 00:27:43.476 A:middle
会跟他们的期望

00:27:43.476 --> 00:27:44.316 A:middle
相矛盾

00:27:45.316 --> 00:27:47.466 A:middle
再者  如果你用的是

00:27:47.506 --> 00:27:49.626 A:middle
我们之前说过的

00:27:49.626 --> 00:27:51.356 A:middle
轻点  双指开合  旋转和长按手势的话

00:27:51.356 --> 00:27:52.816 A:middle
你即便不用 API

00:27:52.816 --> 00:27:54.146 A:middle
这些触摸也会被

00:27:54.146 --> 00:27:55.826 A:middle
率先识别

00:27:56.676 --> 00:28:00.476 A:middle
第三

00:27:56.676 --> 00:28:00.476 A:middle
第三

00:28:00.476 --> 00:28:02.466 A:middle
我们保留屏蔽或修改

00:28:02.466 --> 00:28:03.566 A:middle
延迟边界的权利

00:28:04.566 --> 00:28:05.776 A:middle
所以不要总想着

00:28:05.776 --> 00:28:07.616 A:middle
系统会完全按照

00:28:08.146 --> 00:28:08.996 A:middle
你说的去做

00:28:09.226 --> 00:28:12.666 A:middle
如果你是需要

00:28:12.666 --> 00:28:14.056 A:middle
用户长时间

00:28:14.116 --> 00:28:16.166 A:middle
与全屏幕交互

00:28:16.166 --> 00:28:18.046 A:middle
才用这个API

00:28:18.346 --> 00:28:20.316 A:middle
假如你在编写一款游戏

00:28:20.316 --> 00:28:22.716 A:middle
或者绘图 App 的时候

00:28:22.716 --> 00:28:24.876 A:middle
你问问自己

00:28:24.946 --> 00:28:26.306 A:middle
你的这款 App 是否真正

00:28:26.306 --> 00:28:26.806 A:middle
需要用到这个 API

00:28:28.296 --> 00:28:29.746 A:middle
说到这里

00:28:29.746 --> 00:28:31.936 A:middle
有请我的同事

00:28:32.026 --> 00:28:34.526 A:middle
Mike Turner 上台

00:28:34.526 --> 00:28:36.326 A:middle
他会告诉你们如何使用

00:28:37.076 --> 00:28:37.566 A:middle
拖放功能

00:28:37.666 --> 00:28:37.976 A:middle
Mikey

00:28:38.516 --> 00:28:43.500 A:middle
[掌声]

00:28:46.416 --> 00:28:47.406 A:middle
谢谢 Glow

00:28:50.676 --> 00:28:53.306 A:middle
大家也看到了  在 iOS 11 中

00:28:53.306 --> 00:28:54.206 A:middle
我们做了许多更新

00:28:54.206 --> 00:28:55.626 A:middle
首屈一指的

00:28:55.626 --> 00:28:57.066 A:middle
就是拖放功能

00:28:57.476 --> 00:28:59.126 A:middle
有了拖放功能

00:28:59.326 --> 00:29:01.696 A:middle
用户可以以一种新鲜有趣的方式

00:28:59.326 --> 00:29:01.696 A:middle
用户可以以一种新鲜有趣的方式

00:29:01.696 --> 00:29:03.006 A:middle
与各位的 App

00:29:03.006 --> 00:29:04.266 A:middle
互动

00:29:04.846 --> 00:29:06.596 A:middle
但你们得了解

00:29:06.596 --> 00:29:09.016 A:middle
如何运用你们 App 中现有的

00:29:09.016 --> 00:29:10.686 A:middle
一些手势识别器

00:29:10.686 --> 00:29:11.646 A:middle
来让拖放功能的效果

00:29:11.646 --> 00:29:12.856 A:middle
最大化

00:29:13.186 --> 00:29:14.086 A:middle
所以我先做个简单的示例

00:29:14.086 --> 00:29:15.486 A:middle
告诉你们

00:29:15.486 --> 00:29:18.276 A:middle
如何在视图中加入拖动功能

00:29:18.276 --> 00:29:19.876 A:middle
以及这么做了之后

00:29:19.876 --> 00:29:20.586 A:middle
对你现有手势识别器

00:29:20.586 --> 00:29:21.686 A:middle
会有什么影响

00:29:22.356 --> 00:29:24.106 A:middle
在 iOS 11 中  我们新增了一个类

00:29:24.106 --> 00:29:25.876 A:middle
叫做 UIDragInteraction

00:29:26.496 --> 00:29:28.136 A:middle
UIDragInteraction用起来

00:29:28.236 --> 00:29:29.296 A:middle
超级简单

00:29:29.296 --> 00:29:30.216 A:middle
非常符合习惯

00:29:30.486 --> 00:29:31.386 A:middle
跟手势识别器的操作

00:29:31.386 --> 00:29:33.006 A:middle
和添加子视图的操作一样

00:29:33.006 --> 00:29:34.766 A:middle
你只要

00:29:34.766 --> 00:29:35.896 A:middle
选择一个委托

00:29:35.896 --> 00:29:37.316 A:middle
设定初始值

00:29:37.316 --> 00:29:38.666 A:middle
然后在视图中调用 addInteraction

00:29:38.666 --> 00:29:39.966 A:middle
做完这些

00:29:39.966 --> 00:29:40.416 A:middle
就差不多了

00:29:40.416 --> 00:29:41.136 A:middle
你设置好了一个委托 API

00:29:41.136 --> 00:29:42.696 A:middle
你就有拖动功能了

00:29:43.236 --> 00:29:43.756 A:middle
非常简单

00:29:44.056 --> 00:29:46.236 A:middle
我们来看一个简短的展示

00:29:46.236 --> 00:29:47.546 A:middle
看看你添加了一个拖动交互后

00:29:47.546 --> 00:29:49.316 A:middle
你的视图

00:29:49.316 --> 00:29:50.066 A:middle
是什么样

00:29:50.326 --> 00:29:51.496 A:middle
我们长按视图这里

00:29:51.496 --> 00:29:52.826 A:middle
然后移动

00:29:52.826 --> 00:29:53.506 A:middle
一点点

00:29:54.656 --> 00:29:56.046 A:middle
长按

00:29:56.046 --> 00:29:57.356 A:middle
视图会悬浮在屏幕上

00:29:57.356 --> 00:29:58.616 A:middle
移动的时候

00:29:58.616 --> 00:29:59.656 A:middle
就像撕掉了一样

00:30:00.656 --> 00:30:01.916 A:middle
我们再来看看

00:30:01.916 --> 00:30:03.076 A:middle
在你 App 里是如何实现

00:30:03.136 --> 00:30:03.976 A:middle
拖动交互的

00:30:05.146 --> 00:30:05.986 A:middle
我们新增拖动交互后

00:30:05.986 --> 00:30:07.116 A:middle
UIView 上

00:30:07.116 --> 00:30:08.676 A:middle
出现了新的

00:30:08.676 --> 00:30:09.126 A:middle
交互组

00:30:09.686 --> 00:30:10.996 A:middle
于是拖动交互

00:30:10.996 --> 00:30:12.136 A:middle
给自己生成了一些

00:30:12.136 --> 00:30:13.536 A:middle
手势识别器

00:30:13.946 --> 00:30:15.176 A:middle
依附在视图上

00:30:15.176 --> 00:30:16.216 A:middle
并且成为了这些手势识别器的

00:30:16.216 --> 00:30:17.066 A:middle
委托

00:30:17.206 --> 00:30:18.326 A:middle
生成的手势识别器

00:30:18.326 --> 00:30:19.766 A:middle
可以初始化拖动

00:30:19.766 --> 00:30:21.446 A:middle
处理与其他手势识别器的

00:30:21.446 --> 00:30:23.526 A:middle
关系

00:30:23.526 --> 00:30:25.196 A:middle
并给 App 已有的拖动

00:30:25.196 --> 00:30:26.276 A:middle
添加其他

00:30:26.276 --> 00:30:26.816 A:middle
东西

00:30:27.426 --> 00:30:30.416 A:middle
更具体一点

00:30:30.416 --> 00:30:32.806 A:middle
我们在视图新增

00:30:32.806 --> 00:30:34.526 A:middle
UILongPressGestureRecognizer

00:30:34.526 --> 00:30:35.866 A:middle
有了这个

00:30:35.866 --> 00:30:38.346 A:middle
会跳出这幅图的

00:30:38.526 --> 00:30:40.016 A:middle
一个

00:30:40.016 --> 00:30:40.726 A:middle
活动视图控制器

00:30:41.296 --> 00:30:43.056 A:middle
在这里当手势识别器的状态

00:30:43.056 --> 00:30:44.286 A:middle
为 Began 时

00:30:44.286 --> 00:30:45.406 A:middle
我们打开这个

00:30:45.406 --> 00:30:47.046 A:middle
活动视图控制器

00:30:47.046 --> 00:30:48.276 A:middle
手势识别器的状态为 Cancel 时

00:30:48.276 --> 00:30:49.346 A:middle
我们关上

00:30:49.346 --> 00:30:50.316 A:middle
活动视图控制器

00:30:51.686 --> 00:30:52.506 A:middle
我们再回到

00:30:52.506 --> 00:30:53.916 A:middle
这个长按后移动的

00:30:53.916 --> 00:30:55.716 A:middle
例子

00:30:56.146 --> 00:30:57.306 A:middle
现在我们有了自己的

00:30:57.306 --> 00:30:58.736 A:middle
UILongPressGestureRecognizer

00:30:58.736 --> 00:30:59.246 A:middle
在里面

00:31:00.626 --> 00:31:02.946 A:middle
长按  移动

00:31:03.956 --> 00:31:05.176 A:middle
没有出现什么

00:31:05.176 --> 00:31:05.886 A:middle
活动视图控制器

00:31:07.146 --> 00:31:08.256 A:middle
这是因为

00:31:08.256 --> 00:31:09.446 A:middle
当有拖动交互时

00:31:09.446 --> 00:31:11.006 A:middle
长按手势识别器

00:31:11.006 --> 00:31:12.866 A:middle
会被延迟

00:31:14.106 --> 00:31:15.356 A:middle
那我们稍微调整一下

00:31:15.356 --> 00:31:16.426 A:middle
我们的操作

00:31:16.496 --> 00:31:17.516 A:middle
看看能不能把活动视图控制器

00:31:17.516 --> 00:31:18.526 A:middle
给弄出来

00:31:19.006 --> 00:31:20.326 A:middle
这一次我们长按后

00:31:20.326 --> 00:31:22.086 A:middle
保持一下

00:31:22.186 --> 00:31:23.606 A:middle
再移动

00:31:24.516 --> 00:31:26.986 A:middle
长按  保持

00:31:26.986 --> 00:31:27.366 A:middle
再移动

00:31:27.806 --> 00:31:29.076 A:middle
我们看到活动视图控制器

00:31:29.076 --> 00:31:30.866 A:middle
出来了一下

00:31:30.866 --> 00:31:31.666 A:middle
马上又没了

00:31:32.286 --> 00:31:34.696 A:middle
这是因为一个开始了的拖动

00:31:34.696 --> 00:31:36.366 A:middle
会取消

00:31:36.366 --> 00:31:37.696 A:middle
你 App 里上一个拖动的

00:31:37.696 --> 00:31:38.246 A:middle
触摸

00:31:38.706 --> 00:31:39.966 A:middle
我们会为这次触摸

00:31:40.026 --> 00:31:41.136 A:middle
向 App 发送取消其他触摸

00:31:41.456 --> 00:31:42.576 A:middle
然后 App 会把它发送给

00:31:42.606 --> 00:31:43.466 A:middle
手势识别器

00:31:43.466 --> 00:31:44.146 A:middle
和响应器

00:31:44.466 --> 00:31:45.476 A:middle
于是手势识别器

00:31:45.476 --> 00:31:47.306 A:middle
会给这个动作

00:31:47.306 --> 00:31:49.366 A:middle
发送取消的状态

00:31:49.366 --> 00:31:50.326 A:middle
于是就关闭了这个活动视图控制器

00:31:52.016 --> 00:31:53.776 A:middle
在紧凑的界面中

00:31:53.776 --> 00:31:56.036 A:middle
活动视图控制器

00:31:56.356 --> 00:31:57.466 A:middle
会适应屏幕大小

00:31:57.466 --> 00:31:58.606 A:middle
变成

00:31:58.606 --> 00:32:00.006 A:middle
一张上拉菜单

00:31:58.606 --> 00:32:00.006 A:middle
一张上拉菜单

00:32:00.576 --> 00:32:01.786 A:middle
我们看看这会是

00:32:01.786 --> 00:32:02.446 A:middle
什么样

00:32:03.136 --> 00:32:03.986 A:middle
所以我们要在

00:32:04.306 --> 00:32:06.636 A:middle
紧凑的界面中

00:32:06.636 --> 00:32:07.706 A:middle
长按并保持一会儿再移动

00:32:08.956 --> 00:32:09.996 A:middle
长按

00:32:10.596 --> 00:32:11.216 A:middle
保持  移动

00:32:11.996 --> 00:32:13.366 A:middle
又没有活动视图

00:32:13.366 --> 00:32:13.616 A:middle
控制器

00:32:14.466 --> 00:32:16.296 A:middle
来看看是什么情况

00:32:16.566 --> 00:32:17.646 A:middle
在这里

00:32:17.646 --> 00:32:19.426 A:middle
长按会被一直延迟到触摸结束

00:32:19.426 --> 00:32:20.866 A:middle
这是因为

00:32:20.866 --> 00:32:22.686 A:middle
在紧凑的界面中

00:32:22.746 --> 00:32:24.306 A:middle
弹框

00:32:24.306 --> 00:32:26.096 A:middle
和上拉菜单

00:32:26.096 --> 00:32:27.756 A:middle
大多都会妨碍

00:32:27.756 --> 00:32:29.056 A:middle
用户继续拖动

00:32:29.056 --> 00:32:30.196 A:middle
影响用户体验

00:32:31.236 --> 00:32:32.486 A:middle
我们看看

00:32:32.486 --> 00:32:33.956 A:middle
我们怎么调整一下操作

00:32:34.306 --> 00:32:35.376 A:middle
让活动视图控制器

00:32:35.376 --> 00:32:35.786 A:middle
出现

00:32:35.986 --> 00:32:37.936 A:middle
我们长按再松开

00:32:39.326 --> 00:32:41.596 A:middle
长按后

00:32:41.596 --> 00:32:42.046 A:middle
松开手指

00:32:42.046 --> 00:32:43.086 A:middle
有了

00:32:43.346 --> 00:32:44.986 A:middle
上拉菜单出现了

00:32:44.986 --> 00:32:45.956 A:middle
活动视图控制器

00:32:47.556 --> 00:32:49.626 A:middle
所以 UIDragInteraction

00:32:49.746 --> 00:32:51.486 A:middle
还有能往拖动上添加其他物件的

00:32:51.756 --> 00:32:53.386 A:middle
内置功能

00:32:53.386 --> 00:32:55.416 A:middle
也就是我之前说的

00:32:55.416 --> 00:32:57.736 A:middle
通过生成另一个手势识别器

00:32:57.736 --> 00:32:58.306 A:middle
来完成

00:32:59.276 --> 00:33:00.546 A:middle
这里很快地

00:32:59.276 --> 00:33:00.546 A:middle
这里很快地

00:33:00.546 --> 00:33:01.096 A:middle
展示一下

00:33:01.096 --> 00:33:02.766 A:middle
我们长按  移动

00:33:02.766 --> 00:33:04.736 A:middle
再轻点视图

00:33:04.736 --> 00:33:06.326 A:middle
添加其他物件

00:33:07.246 --> 00:33:09.216 A:middle
它会帮你处理这次轻点

00:33:09.466 --> 00:33:10.386 A:middle
但你也可以

00:33:10.386 --> 00:33:11.376 A:middle
进行更改

00:33:11.936 --> 00:33:13.336 A:middle
首先这个动作是

00:33:13.336 --> 00:33:13.776 A:middle
非强制的

00:33:13.776 --> 00:33:15.686 A:middle
所以这个添加物件的

00:33:15.686 --> 00:33:17.126 A:middle
委托方法

00:33:17.126 --> 00:33:18.726 A:middle
UIDragInteraction 是非强制的

00:33:18.796 --> 00:33:20.176 A:middle
你不执行

00:33:20.176 --> 00:33:21.636 A:middle
你就不会有这个添加的行为

00:33:21.636 --> 00:33:22.816 A:middle
但即便你执行了

00:33:22.816 --> 00:33:24.636 A:middle
你也可以返回"return zero items

00:33:24.636 --> 00:33:26.146 A:middle
in this API to continue"

00:33:26.386 --> 00:33:27.786 A:middle
以平常的方式

00:33:27.786 --> 00:33:29.586 A:middle
对这个触摸进行处理

00:33:31.256 --> 00:33:33.036 A:middle
所以使用 UIDragInteraction 时

00:33:33.036 --> 00:33:34.406 A:middle
适用于你的 App

00:33:34.406 --> 00:33:35.786 A:middle
并不难

00:33:36.046 --> 00:33:37.586 A:middle
基本无需手动操作

00:33:37.586 --> 00:33:39.996 A:middle
你只要知道一些

00:33:40.256 --> 00:33:41.246 A:middle
基本概念就行了

00:33:41.246 --> 00:33:42.916 A:middle
你要做的第一件事

00:33:42.916 --> 00:33:44.276 A:middle
就只是检验你现有的

00:33:44.276 --> 00:33:44.906 A:middle
动作

00:33:45.176 --> 00:33:46.526 A:middle
是否能配合

00:33:46.526 --> 00:33:47.526 A:middle
UIDragInteraction

00:33:47.866 --> 00:33:49.586 A:middle
有些情况  UIDragInteraction

00:33:49.586 --> 00:33:50.666 A:middle
可能可以取代

00:33:50.666 --> 00:33:52.216 A:middle
UILongPress 的

00:33:52.216 --> 00:33:53.466 A:middle
一些现有功能

00:33:54.486 --> 00:33:55.886 A:middle
你在用

00:33:55.886 --> 00:33:57.396 A:middle
UIDragInteraction

00:33:57.396 --> 00:33:59.276 A:middle
呈现模式用户界面的时候

00:33:59.276 --> 00:33:59.606 A:middle
得要

00:33:59.606 --> 00:34:00.526 A:middle
非常注意

00:33:59.606 --> 00:34:00.526 A:middle
非常注意

00:34:00.856 --> 00:34:03.376 A:middle
这是因为在标准界面下

00:34:03.376 --> 00:34:05.396 A:middle
它会被延迟

00:34:05.396 --> 00:34:06.826 A:middle
而且可能

00:34:06.826 --> 00:34:08.235 A:middle
在拖动之前展示

00:34:08.516 --> 00:34:09.286 A:middle
在此你需要

00:34:09.286 --> 00:34:10.275 A:middle
注意一下

00:34:11.286 --> 00:34:12.646 A:middle
之后你得处理

00:34:12.646 --> 00:34:14.085 A:middle
你 UIGestureRecognizers 中的

00:34:14.085 --> 00:34:14.996 A:middle
Cancel 状态

00:34:15.416 --> 00:34:16.815 A:middle
你们之前也看到了  拖动一开始

00:34:16.815 --> 00:34:17.916 A:middle
我们发送了触摸已取消

00:34:18.016 --> 00:34:19.246 A:middle
所以如果你不处理

00:34:19.246 --> 00:34:20.466 A:middle
你手势识别器的 Cancel 状态的话

00:34:20.466 --> 00:34:21.926 A:middle
你就无法

00:34:21.926 --> 00:34:23.005 A:middle
像我们的示例中那样

00:34:23.005 --> 00:34:24.485 A:middle
关闭

00:34:24.485 --> 00:34:25.956 A:middle
活动视图

00:34:25.956 --> 00:34:26.966 A:middle
控制器了

00:34:27.626 --> 00:34:29.085 A:middle
注意关于 UIDragInteraction

00:34:29.085 --> 00:34:31.525 A:middle
有一点非常重要

00:34:31.525 --> 00:34:33.315 A:middle
也特别酷

00:34:33.315 --> 00:34:34.706 A:middle
就是你的 App 在拖动期间

00:34:34.706 --> 00:34:35.906 A:middle
是完全交互的

00:34:36.606 --> 00:34:38.166 A:middle
所以可能会产生

00:34:38.206 --> 00:34:39.545 A:middle
一些预想不到的

00:34:39.545 --> 00:34:39.946 A:middle
交互行为

00:34:39.946 --> 00:34:41.846 A:middle
你们得警惕

00:34:43.856 --> 00:34:45.985 A:middle
Dom 之前上台告诉我们

00:34:45.985 --> 00:34:48.025 A:middle
如何最有好地使用

00:34:48.076 --> 00:34:50.786 A:middle
手势识别系统

00:34:50.786 --> 00:34:52.386 A:middle
来进行你想要的设定

00:34:52.386 --> 00:34:53.456 A:middle
以及如何通过 failure requirements

00:34:53.456 --> 00:34:55.946 A:middle
和 exclusion

00:34:55.946 --> 00:34:57.065 A:middle
来处理

00:34:57.065 --> 00:34:58.336 A:middle
若干手势识别器之间的

00:34:58.336 --> 00:34:58.526 A:middle
关系

00:34:59.436 --> 00:35:01.276 A:middle
他告诉了我们很重要的一点

00:34:59.436 --> 00:35:01.276 A:middle
他告诉了我们很重要的一点

00:35:01.276 --> 00:35:02.706 A:middle
手势识别器是

00:35:02.776 --> 00:35:03.126 A:middle
第一位出现的

00:35:03.936 --> 00:35:05.816 A:middle
所以当我们通过

00:35:05.816 --> 00:35:06.836 A:middle
发送触摸时

00:35:06.836 --> 00:35:08.766 A:middle
手势识别器会

00:35:08.766 --> 00:35:10.156 A:middle
阻止基于响应器的触摸处理

00:35:10.366 --> 00:35:11.516 A:middle
所以你应该

00:35:11.516 --> 00:35:12.806 A:middle
尽一切可能

00:35:12.806 --> 00:35:14.276 A:middle
使用手势识别器

00:35:14.276 --> 00:35:14.786 A:middle
来达到目的

00:35:15.436 --> 00:35:19.006 A:middle
然后 Glen 告诉我们

00:35:19.006 --> 00:35:20.786 A:middle
当我们需要滑动屏幕边缘时

00:35:20.786 --> 00:35:24.116 A:middle
如何运用New系统手势延迟 API

00:35:24.116 --> 00:35:25.466 A:middle
优先我们 App 中的

00:35:25.466 --> 00:35:27.366 A:middle
手势

00:35:27.366 --> 00:35:27.936 A:middle
识别器

00:35:28.346 --> 00:35:29.486 A:middle
在全屏的情况下

00:35:29.486 --> 00:35:30.806 A:middle
你要非常保守地

00:35:30.806 --> 00:35:31.876 A:middle
使用这个方法

00:35:32.186 --> 00:35:33.126 A:middle
只有在用户

00:35:33.126 --> 00:35:34.846 A:middle
使用 App 时明确期望发生的交互

00:35:34.846 --> 00:35:36.216 A:middle
不是系统手势的时候

00:35:36.216 --> 00:35:36.696 A:middle
才使用

00:35:37.066 --> 00:35:37.986 A:middle
所以用得很少

00:35:38.806 --> 00:35:40.646 A:middle
最后我们简要地说了一下

00:35:40.646 --> 00:35:42.436 A:middle
如何在你的 App 中

00:35:42.916 --> 00:35:44.686 A:middle
使用 UIDragInteraction

00:35:44.686 --> 00:35:45.526 A:middle
特别简单

00:35:46.456 --> 00:35:47.496 A:middle
所以我希望你们可以

00:35:47.496 --> 00:35:49.056 A:middle
多多在你们的视图中

00:35:49.056 --> 00:35:49.576 A:middle
使用 UIDragInteraction

00:35:50.986 --> 00:35:52.656 A:middle
想了解更多资讯的话

00:35:52.986 --> 00:35:54.776 A:middle
你们可以在这个网站

00:35:54.776 --> 00:35:55.676 A:middle
看视频回放

00:35:56.086 --> 00:35:57.856 A:middle
我们做了一些很棒的展示

00:35:57.856 --> 00:35:59.126 A:middle
深入探讨了 UIkit 中的

00:35:59.126 --> 00:36:00.296 A:middle
事件处理方法

00:35:59.126 --> 00:36:00.296 A:middle
事件处理方法

00:36:00.426 --> 00:36:01.296 A:middle
如果你还没看过

00:36:01.336 --> 00:36:02.396 A:middle
我强烈推荐

00:36:03.276 --> 00:36:05.416 A:middle
我们还会有一些关于

00:36:05.416 --> 00:36:06.736 A:middle
拖放和动画的展示

00:36:06.736 --> 00:36:08.466 A:middle
你们可以关注一下

00:36:08.466 --> 00:36:09.976 A:middle
好好享受 WWDC 吧

00:36:10.516 --> 00:36:15.500 A:middle
[掌声]
