WEBVTT

00:00:07.516 --> 00:00:16.500 A:middle
[欢呼]

00:00:22.516 --> 00:00:27.486 A:middle
[掌声]

00:00:27.986 --> 00:00:29.326 A:middle
&gt;&gt; 欢迎来到

00:00:29.326 --> 00:00:30.356 A:middle
“SiriKit 酷炫体验”发布会

00:00:31.456 --> 00:00:33.456 A:middle
我是 Jose Angel Castillo Sanchez

00:00:33.456 --> 00:00:35.336 A:middle
我将与我的合作者

00:00:35.336 --> 00:00:36.126 A:middle
Rohit [按照发音拼写] 一起

00:00:36.126 --> 00:00:37.886 A:middle
来给大家详细讲解

00:00:38.996 --> 00:00:40.936 A:middle
一年前

00:00:40.936 --> 00:00:41.766 A:middle
我们发布了 SiriKit

00:00:42.266 --> 00:00:44.356 A:middle
从那以后 许多应用都

00:00:44.356 --> 00:00:45.166 A:middle
开始 [音质不清晰]

00:00:45.816 --> 00:00:48.556 A:middle
我们收到了大家的反馈

00:00:48.556 --> 00:00:49.536 A:middle
来自开发者的反馈

00:00:50.216 --> 00:00:52.066 A:middle
根据这些反馈 我们把问题汇总为

00:00:52.166 --> 00:00:53.986 A:middle
四大类别 今天我们就想

00:00:53.986 --> 00:00:54.896 A:middle
逐个重点讲解

00:00:56.256 --> 00:00:57.866 A:middle
首先 我们想谈谈

00:00:57.866 --> 00:00:58.816 A:middle
联系人解析的问题

00:00:59.236 --> 00:01:01.396 A:middle
如果你的应用

00:00:59.236 --> 00:01:01.396 A:middle
如果你的应用

00:01:01.396 --> 00:01:03.646 A:middle
是短信 呼叫或者支付类应用

00:01:03.646 --> 00:01:05.416 A:middle
你可能已经

00:01:05.416 --> 00:01:06.546 A:middle
使用过它了

00:01:07.126 --> 00:01:08.946 A:middle
在这个问题之后 我们想谈谈

00:01:08.946 --> 00:01:09.906 A:middle
安全性问题

00:01:11.096 --> 00:01:13.496 A:middle
如果你的应用要求

00:01:13.496 --> 00:01:15.086 A:middle
授权过后才能完成交易

00:01:15.086 --> 00:01:16.926 A:middle
我们将告诉你

00:01:16.926 --> 00:01:18.976 A:middle
如何通过几个简单步骤来实现它

00:01:21.956 --> 00:01:23.506 A:middle
然后 我们会谈一谈

00:01:23.666 --> 00:01:24.756 A:middle
自定义词汇

00:01:25.916 --> 00:01:28.276 A:middle
Siri 词汇量很大

00:01:28.276 --> 00:01:30.146 A:middle
而且懂多门语言

00:01:30.146 --> 00:01:31.516 A:middle
但你的应用可能会遇到某些特定词汇

00:01:31.516 --> 00:01:33.256 A:middle
你可能想要

00:01:33.256 --> 00:01:34.256 A:middle
让 Siri 了解清楚

00:01:34.766 --> 00:01:38.116 A:middle
最后同样重要的是 我们将

00:01:38.116 --> 00:01:39.116 A:middle
谈到用户界面测试

00:01:39.756 --> 00:01:41.286 A:middle
自去年以来 我们已经

00:01:41.286 --> 00:01:42.886 A:middle
在 Siri 测试自动化方面

00:01:42.886 --> 00:01:44.286 A:middle
取得了很大进步

00:01:47.156 --> 00:01:48.816 A:middle
我们从联系人解析

00:01:48.816 --> 00:01:49.446 A:middle
开始讲起吧

00:01:50.416 --> 00:01:52.126 A:middle
关于这一点 我想

00:01:52.126 --> 00:01:53.516 A:middle
举一个短信发送的例子

00:01:53.726 --> 00:01:54.846 A:middle
有一个短信应用

00:01:55.286 --> 00:01:56.366 A:middle
大家可能都很熟悉

00:01:57.566 --> 00:01:58.376 A:middle
叫 UnicornChat

00:01:58.706 --> 00:02:01.556 A:middle
为此 我们要

00:01:58.706 --> 00:02:01.556 A:middle
为此 我们要

00:02:01.556 --> 00:02:02.876 A:middle
把发送信息的整个过程

00:02:02.876 --> 00:02:03.356 A:middle
都演示一遍

00:02:04.316 --> 00:02:05.906 A:middle
在 UnicornChat 上

00:02:05.906 --> 00:02:06.556 A:middle
给 John 发送“你好”

00:02:07.376 --> 00:02:09.645 A:middle
我们很清楚

00:02:09.686 --> 00:02:12.176 A:middle
John 是我们要发送消息的对象

00:02:12.406 --> 00:02:14.926 A:middle
在这种情况下 我的通讯录里

00:02:14.926 --> 00:02:16.476 A:middle
有好几个 John

00:02:16.956 --> 00:02:18.966 A:middle
有 John Appleseed

00:02:18.966 --> 00:02:19.286 A:middle
还有 John Baily

00:02:19.736 --> 00:02:22.646 A:middle
而仅仅通过用户意图

00:02:22.646 --> 00:02:23.946 A:middle
想给哪个 John 发消息

00:02:23.946 --> 00:02:26.926 A:middle
这一点并不明确

00:02:27.176 --> 00:02:30.226 A:middle
在 iOS 10.3 中 我们曾经在

00:02:30.226 --> 00:02:32.976 A:middle
INPerson 对象中增加过一个新属性

00:02:33.596 --> 00:02:34.366 A:middle
就是 SiriMatches

00:02:35.736 --> 00:02:37.336 A:middle
SiriMatches 是 Siri

00:02:37.336 --> 00:02:38.046 A:middle
所理解的内容

00:02:38.276 --> 00:02:39.716 A:middle
在这个例子中 指的就是这几个

00:02:39.716 --> 00:02:40.136 A:middle
John

00:02:40.436 --> 00:02:42.356 A:middle
也可能是 John 的

00:02:42.356 --> 00:02:42.706 A:middle
同音异形字

00:02:43.546 --> 00:02:44.626 A:middle
你将会得出一系列的

00:02:44.736 --> 00:02:46.306 A:middle
INPerson 对象

00:02:46.486 --> 00:02:47.876 A:middle
它们代表着 Siri 所理解的

00:02:47.876 --> 00:02:48.456 A:middle
所有可能性

00:02:48.946 --> 00:02:51.776 A:middle
我们来演示一遍整个流程

00:02:51.896 --> 00:02:53.466 A:middle
看看怎样在 UnicornChat 上

00:02:53.466 --> 00:02:56.096 A:middle
给 John 短信发送“你好”

00:02:56.386 --> 00:02:57.646 A:middle
看看怎样利用这些

00:02:58.376 --> 00:03:00.136 A:middle
SiriMatches 来解决

00:02:58.376 --> 00:03:00.136 A:middle
SiriMatches 来解决

00:03:00.136 --> 00:03:01.306 A:middle
我们的联系人问题

00:03:02.616 --> 00:03:04.746 A:middle
在 UnicornChat 上给 John 发送“你好”

00:03:05.476 --> 00:03:07.886 A:middle
Siri 显然理解了

00:03:07.886 --> 00:03:08.966 A:middle
你想要给 John 发消息

00:03:09.426 --> 00:03:13.266 A:middle
随后 Siri 将

00:03:13.266 --> 00:03:15.786 A:middle
联系你的 app extension

00:03:15.786 --> 00:03:17.336 A:middle
或是你的 intent 参数

00:03:17.336 --> 00:03:18.336 A:middle
resolveRecipients

00:03:19.566 --> 00:03:21.226 A:middle
在这一步 Siri 会给你

00:03:21.226 --> 00:03:23.126 A:middle
提供一系列 INPerson 对象

00:03:23.126 --> 00:03:24.566 A:middle
在这里 就是

00:03:24.566 --> 00:03:25.846 A:middle
John Appleseed 和 John Baily

00:03:26.276 --> 00:03:27.816 A:middle
我们之前已经看到过

00:03:27.816 --> 00:03:29.486 A:middle
John Appleseed 和 John Baily

00:03:29.486 --> 00:03:30.746 A:middle
出现在我的通讯录里

00:03:31.516 --> 00:03:32.796 A:middle
它们也有可能是

00:03:32.796 --> 00:03:34.546 A:middle
我自定义词汇的一部分

00:03:34.546 --> 00:03:36.706 A:middle
是我这个应用的通讯录属性

00:03:36.706 --> 00:03:37.386 A:middle
内容

00:03:38.326 --> 00:03:39.626 A:middle
在这个时候

00:03:39.626 --> 00:03:40.726 A:middle
resolveRecipients intent 参数

00:03:40.726 --> 00:03:41.686 A:middle
将被调用

00:03:41.686 --> 00:03:43.196 A:middle
然后由 app extension

00:03:43.196 --> 00:03:44.486 A:middle
作出决定

00:03:44.966 --> 00:03:47.136 A:middle
我们是否有足够的信息来

00:03:47.136 --> 00:03:48.476 A:middle
判断我们想要给哪个 John

00:03:48.476 --> 00:03:52.206 A:middle
发送消息 或者说 我们是否需要

00:03:52.236 --> 00:03:53.836 A:middle
用户来帮助我们决定

00:03:53.836 --> 00:03:54.686 A:middle
是哪一个 John

00:03:55.706 --> 00:03:57.316 A:middle
在这种情况下 我们想

00:03:57.316 --> 00:03:58.106 A:middle
消除歧义

00:03:58.456 --> 00:04:00.666 A:middle
我们将

00:03:58.456 --> 00:04:00.666 A:middle
我们将

00:04:00.666 --> 00:04:02.346 A:middle
把这个歧义消除匹配的列表返回给 Siri

00:04:03.196 --> 00:04:04.766 A:middle
列表将包括

00:04:04.766 --> 00:04:06.136 A:middle
John Appleseed 和 John Baily

00:04:07.566 --> 00:04:09.086 A:middle
接下来 Siri 将为我们的用户

00:04:09.086 --> 00:04:10.306 A:middle
带来非凡体验 它会询问

00:04:10.306 --> 00:04:11.426 A:middle
要找哪一个 John

00:04:11.896 --> 00:04:13.516 A:middle
John Baily 还是 John Appleseed

00:04:14.036 --> 00:04:15.536 A:middle
这时 就要由

00:04:15.536 --> 00:04:17.546 A:middle
用户来决定哪一个 John

00:04:17.546 --> 00:04:19.805 A:middle
是他们想要发送消息的对象了

00:04:22.296 --> 00:04:23.606 A:middle
在这个流程展示中

00:04:23.606 --> 00:04:25.556 A:middle
假设 John Baily 是

00:04:25.556 --> 00:04:26.446 A:middle
我们的选择对象

00:04:26.916 --> 00:04:29.756 A:middle
Siri 清楚地理解到

00:04:29.756 --> 00:04:31.896 A:middle
John Baily 是我们想发送消息

00:04:31.896 --> 00:04:33.106 A:middle
想使用的联系人

00:04:33.666 --> 00:04:35.636 A:middle
Siri 会反馈给

00:04:35.636 --> 00:04:36.886 A:middle
你的 resolveRecipients intent

00:04:36.886 --> 00:04:38.836 A:middle
参数 表明 John Baily

00:04:38.836 --> 00:04:40.176 A:middle
是被选中的 INPerson 对象

00:04:40.986 --> 00:04:43.076 A:middle
这时候  情况就很清楚了

00:04:43.076 --> 00:04:44.336 A:middle
我们想发送消息给 John Baily

00:04:45.246 --> 00:04:47.146 A:middle
而你的 intent 接收者

00:04:47.546 --> 00:04:48.986 A:middle
intent 参数也已经准备要

00:04:48.986 --> 00:04:50.046 A:middle
要进入下一阶段了

00:04:53.076 --> 00:04:54.636 A:middle
概述而言 我们演示经历了

00:04:54.636 --> 00:04:56.276 A:middle
这样一番过程  当我们发现有好几个名字是

00:04:56.276 --> 00:04:58.086 A:middle
John 的人存在于通讯录里的过程

00:04:58.156 --> 00:04:59.596 A:middle
以及我们

00:04:59.596 --> 00:05:01.836 A:middle
如何消除歧义的流程

00:04:59.596 --> 00:05:01.836 A:middle
如何消除歧义的流程

00:05:02.196 --> 00:05:03.336 A:middle
我们决定想要

00:05:03.336 --> 00:05:04.226 A:middle
发消息给 John Baily

00:05:07.496 --> 00:05:10.986 A:middle
可是如果如果 John Baily

00:05:10.986 --> 00:05:12.936 A:middle
有多个电话号码或

00:05:12.936 --> 00:05:14.856 A:middle
多个电邮地址 抑或是这两种情况

00:05:14.856 --> 00:05:15.276 A:middle
都存在呢

00:05:15.896 --> 00:05:18.366 A:middle
我们仍然不太明确

00:05:18.366 --> 00:05:20.046 A:middle
究竟想要使用哪种方式

00:05:20.086 --> 00:05:21.056 A:middle
来发送消息

00:05:21.806 --> 00:05:23.716 A:middle
所以 我们往回再看一下

00:05:23.716 --> 00:05:24.976 A:middle
回到用户选择 John Baily 时

00:05:25.006 --> 00:05:25.586 A:middle
的状态

00:05:26.746 --> 00:05:28.506 A:middle
Siri 明白我们想要

00:05:28.506 --> 00:05:29.576 A:middle
发消息给 John Baily

00:05:32.116 --> 00:05:33.876 A:middle
Siri 将转而使用 “John Baily”

00:05:34.056 --> 00:05:35.546 A:middle
来联系你在

00:05:35.546 --> 00:05:36.976 A:middle
resolveRecipients intent 之下的

00:05:36.976 --> 00:05:40.186 A:middle
extension 参数

00:05:40.586 --> 00:05:43.526 A:middle
这时候 就需要通过你的

00:05:43.526 --> 00:05:44.516 A:middle
resolveRecipients intent

00:05:44.516 --> 00:05:47.326 A:middle
参数执行

00:05:47.326 --> 00:05:49.256 A:middle
来连接你的通讯录

00:05:49.256 --> 00:05:50.956 A:middle
并确保你有足够信息

00:05:50.956 --> 00:05:52.576 A:middle
来确定将要使用

00:05:52.576 --> 00:05:53.326 A:middle
哪种联系方式

00:05:54.076 --> 00:05:55.656 A:middle
正如我们所见 在这种情况下 我们有

00:05:55.656 --> 00:05:57.386 A:middle
多个联系方式 所以需要

00:05:57.386 --> 00:05:58.226 A:middle
用户输入

00:05:58.776 --> 00:06:00.616 A:middle
如果问题集中到电话联系方式上

00:05:58.776 --> 00:06:00.616 A:middle
如果问题集中到电话联系方式上

00:06:00.616 --> 00:06:01.386 A:middle
我们将向 Siri 提供

00:06:01.386 --> 00:06:03.786 A:middle
一个消除歧义列表

00:06:03.786 --> 00:06:05.566 A:middle
就像我们之前处理多个 John 的情况一样

00:06:05.836 --> 00:06:07.136 A:middle
但这次是

00:06:07.136 --> 00:06:08.806 A:middle
多个电话号码联系方式

00:06:09.226 --> 00:06:11.446 A:middle
我们已经看到 这里有住宅电话 手机

00:06:11.446 --> 00:06:11.946 A:middle
还有工作电话

00:06:13.716 --> 00:06:17.016 A:middle
Siri 将向用户发出

00:06:17.176 --> 00:06:18.106 A:middle
一个提示

00:06:18.296 --> 00:06:19.586 A:middle
“您想使用哪个号码”

00:06:20.246 --> 00:06:21.316 A:middle
所以 在这种情况下

00:06:21.316 --> 00:06:22.976 A:middle
用户就很清楚自己需要

00:06:22.976 --> 00:06:24.346 A:middle
选择一个号码来发送

00:06:24.346 --> 00:06:24.816 A:middle
消息

00:06:25.836 --> 00:06:27.866 A:middle
我们假设用户想要

00:06:27.866 --> 00:06:32.276 A:middle
发送消息到这个手机号

00:06:32.436 --> 00:06:33.746 A:middle
用户对 Siri 说“手机”

00:06:34.266 --> 00:06:35.566 A:middle
我们又会经历同样的循环过程

00:06:35.726 --> 00:06:37.416 A:middle
Siri 明白

00:06:37.416 --> 00:06:38.926 A:middle
你想要给 John Baily 的手机

00:06:38.926 --> 00:06:40.166 A:middle
号码发送消息

00:06:40.636 --> 00:06:42.286 A:middle
Siri 会把这个信息

00:06:42.286 --> 00:06:43.446 A:middle
发回给

00:06:43.446 --> 00:06:44.956 A:middle
resolveRecipients intent

00:06:44.956 --> 00:06:45.426 A:middle
参数

00:06:45.986 --> 00:06:48.056 A:middle
这样你将得到

00:06:48.056 --> 00:06:48.956 A:middle
完整的信息

00:06:49.106 --> 00:06:50.496 A:middle
我们想要发消息给 John Baily

00:06:50.546 --> 00:06:51.916 A:middle
而且是想发送给他的

00:06:51.916 --> 00:06:52.816 A:middle
手机号码

00:06:53.376 --> 00:06:56.106 A:middle
在这个时候

00:06:56.106 --> 00:06:57.106 A:middle
resolveRecipients intent

00:06:57.106 --> 00:06:58.846 A:middle
参数返回值为“成功”

00:06:58.846 --> 00:07:00.356 A:middle
于是我们就完成了

00:06:58.846 --> 00:07:00.356 A:middle
于是我们就完成了

00:07:00.356 --> 00:07:01.966 A:middle
选择消息接收者的步骤 可以继续

00:07:01.966 --> 00:07:03.866 A:middle
下一步骤了

00:07:04.996 --> 00:07:06.916 A:middle
我们知道 执行任何一个 SiriKit intent

00:07:06.916 --> 00:07:09.486 A:middle
都有三个步骤：

00:07:09.636 --> 00:07:11.346 A:middle
解析 确认和处理

00:07:12.576 --> 00:07:14.776 A:middle
那么 让我们来看看

00:07:14.776 --> 00:07:16.376 A:middle
resolveRecipients

00:07:16.446 --> 00:07:17.906 A:middle
intent 参数执行时的示例代码

00:07:20.836 --> 00:07:23.196 A:middle
现在我要执行

00:07:23.196 --> 00:07:23.836 A:middle
resolveRecipients

00:07:25.226 --> 00:07:26.356 A:middle
我们要做的第一件事

00:07:26.356 --> 00:07:28.556 A:middle
就是确保

00:07:28.556 --> 00:07:29.156 A:middle
已经有确定的接收者

00:07:29.826 --> 00:07:31.046 A:middle
如果没有提供接收者

00:07:31.046 --> 00:07:32.526 A:middle
我们基本上可以要求 Siri

00:07:32.526 --> 00:07:34.246 A:middle
去向用户询问这个值的内容

00:07:34.246 --> 00:07:36.446 A:middle
我们实现这一点的方法

00:07:36.446 --> 00:07:38.536 A:middle
是返回 needsValue

00:07:39.406 --> 00:07:40.736 A:middle
这样 Siri 就会提示用户

00:07:41.166 --> 00:07:42.246 A:middle
“您想向谁发送

00:07:42.246 --> 00:07:42.726 A:middle
消息”

00:07:43.276 --> 00:07:45.606 A:middle
在我们刚刚演示过的例子里

00:07:46.216 --> 00:07:47.616 A:middle
用户表示他们想要

00:07:47.616 --> 00:07:48.256 A:middle
给 John 发消息

00:07:49.286 --> 00:07:51.386 A:middle
所以 我们得到的回复是 John

00:07:51.686 --> 00:07:53.036 A:middle
我们已经有了 John Appleseed 和

00:07:53.036 --> 00:07:53.436 A:middle
John Baily

00:07:53.756 --> 00:07:54.906 A:middle
从这一步开始 我们要

00:07:54.906 --> 00:07:56.096 A:middle
解析出

00:07:56.096 --> 00:07:57.866 A:middle
我们想使用哪位接收者

00:07:57.866 --> 00:07:59.326 A:middle
或者将消除歧义列表

00:07:59.356 --> 00:08:01.286 A:middle
返回给 Siri 让它来提示

00:07:59.356 --> 00:08:01.286 A:middle
返回给 Siri 让它来提示

00:08:01.456 --> 00:08:01.966 A:middle
用户

00:08:03.276 --> 00:08:04.166 A:middle
在我们需要向 Siri

00:08:04.166 --> 00:08:07.026 A:middle
提供一份列表的情况下

00:08:07.026 --> 00:08:08.246 A:middle
我们基本上是在

00:08:08.246 --> 00:08:09.066 A:middle
结束句柄下予以返回的

00:08:11.696 --> 00:08:13.076 A:middle
我们来演示一下

00:08:13.076 --> 00:08:13.466 A:middle
这个操作过程

00:08:17.136 --> 00:08:19.936 A:middle
现在我在 UnicornChat

00:08:20.236 --> 00:08:21.336 A:middle
应用上执行

00:08:21.336 --> 00:08:22.836 A:middle
我的 resolveRecipients

00:08:22.836 --> 00:08:23.406 A:middle
intent 参数

00:08:24.496 --> 00:08:26.226 A:middle
正如我们所看到的 我们需要做的

00:08:26.226 --> 00:08:29.556 A:middle
第一件事 是确认

00:08:29.556 --> 00:08:30.826 A:middle
我们有一位接收者

00:08:31.976 --> 00:08:33.306 A:middle
现在我们来确定

00:08:33.306 --> 00:08:34.346 A:middle
接收者是否已被提供

00:08:34.895 --> 00:08:38.296 A:middle
如果没有提供接收者

00:08:38.296 --> 00:08:40.535 A:middle
我们就要求 Siri

00:08:40.535 --> 00:08:44.636 A:middle
向用户询问我们需要这个值

00:08:44.796 --> 00:08:46.506 A:middle
一旦我们已经获得了接收者

00:08:47.206 --> 00:08:49.666 A:middle
我们就要继续对这些接收者

00:08:49.666 --> 00:08:50.506 A:middle
进行处理

00:08:51.066 --> 00:08:53.116 A:middle
现在 我们要浏览一遍

00:08:53.116 --> 00:08:54.566 A:middle
Siri 提供的所有接收者

00:08:54.566 --> 00:08:56.346 A:middle
这样就可以逐个进行

00:08:56.346 --> 00:08:56.746 A:middle
处理

00:08:57.186 --> 00:08:59.406 A:middle
我要做的第一件事

00:08:59.406 --> 00:09:00.896 A:middle
就是要查看

00:08:59.406 --> 00:09:00.896 A:middle
就是要查看

00:09:00.896 --> 00:09:02.916 A:middle
我的通讯录 以便分析这位

00:09:02.916 --> 00:09:03.416 A:middle
接收者

00:09:04.706 --> 00:09:06.276 A:middle
我的通讯录将承担

00:09:06.276 --> 00:09:07.766 A:middle
最棘手的问题 就是要确保

00:09:07.916 --> 00:09:10.236 A:middle
我们有一个联系人

00:09:10.236 --> 00:09:11.036 A:middle
与那位接收者能对上号

00:09:12.626 --> 00:09:14.336 A:middle
一旦这一步完成 我们就需要

00:09:14.336 --> 00:09:15.106 A:middle
做一个决定

00:09:16.306 --> 00:09:18.076 A:middle
第一种情况是

00:09:18.076 --> 00:09:19.776 A:middle
没有哪位联系人能跟

00:09:19.776 --> 00:09:20.266 A:middle
那位接收者对上号

00:09:20.666 --> 00:09:21.796 A:middle
回到我们刚讲的 John 的例子

00:09:21.796 --> 00:09:23.476 A:middle
如果我的通讯录里

00:09:23.476 --> 00:09:25.236 A:middle
根本就没有 John 我们基本只能

00:09:25.236 --> 00:09:26.946 A:middle
告诉 Siri 通讯录中没有 John

00:09:26.946 --> 00:09:28.146 A:middle
无法支持这个请求

00:09:28.696 --> 00:09:30.186 A:middle
这将导致 Siri 请求用户

00:09:30.186 --> 00:09:31.966 A:middle
提供一个有效的

00:09:31.966 --> 00:09:32.546 A:middle
接收者名称

00:09:33.076 --> 00:09:35.706 A:middle
如果我们在通讯录中找到一个 John

00:09:36.216 --> 00:09:37.376 A:middle
我们需要处理那个

00:09:37.996 --> 00:09:38.566 A:middle
接收者

00:09:39.046 --> 00:09:40.806 A:middle
那么 我来演示一下

00:09:40.806 --> 00:09:41.366 A:middle
这段代码

00:09:42.756 --> 00:09:44.566 A:middle
我们要做的第一件事

00:09:44.566 --> 00:09:47.076 A:middle
是确认

00:09:47.076 --> 00:09:48.996 A:middle
我们找到的那个接收者是否有一个

00:09:48.996 --> 00:09:49.936 A:middle
或多个联系方式

00:09:50.356 --> 00:09:51.536 A:middle
这里 我们将要关注的是

00:09:51.536 --> 00:09:52.286 A:middle
电话号码

00:09:52.826 --> 00:09:54.056 A:middle
如果电话号码

00:09:54.056 --> 00:09:55.836 A:middle
不止一个 而且我们无法

00:09:55.836 --> 00:09:57.616 A:middle
替用户做出决定

00:09:57.616 --> 00:09:58.446 A:middle
那么我们就要返回一个

00:09:58.446 --> 00:10:01.316 A:middle
消除歧义的响应代码

00:09:58.446 --> 00:10:01.316 A:middle
消除歧义的响应代码

00:10:01.646 --> 00:10:02.896 A:middle
同时包括我们想要

00:10:02.896 --> 00:10:03.326 A:middle
展示的联系方式

00:10:03.666 --> 00:10:05.206 A:middle
Siri 将会用它

00:10:05.636 --> 00:10:07.676 A:middle
询问用户

00:10:07.676 --> 00:10:08.956 A:middle
究竟想要使用哪个句柄

00:10:12.656 --> 00:10:15.296 A:middle
如果我们的通讯录里只有一个

00:10:15.296 --> 00:10:17.326 A:middle
接收者 只带有一个联系方式

00:10:17.326 --> 00:10:18.966 A:middle
我们通常都返回

00:10:18.966 --> 00:10:19.536 A:middle
“成功”值

00:10:19.656 --> 00:10:20.776 A:middle
告诉他们说  我们已经找到

00:10:20.776 --> 00:10:22.216 A:middle
接收者 并且已经准备

00:10:22.216 --> 00:10:23.466 A:middle
进入下一个步骤

00:10:24.566 --> 00:10:25.706 A:middle
这里有一种特殊情况

00:10:27.476 --> 00:10:31.216 A:middle
在这种特殊情况下

00:10:31.216 --> 00:10:33.766 A:middle
Siri 会向用户询问

00:10:33.766 --> 00:10:35.196 A:middle
“您确定要

00:10:35.196 --> 00:10:35.516 A:middle
给 John 发送消息吗”

00:10:36.236 --> 00:10:38.166 A:middle
在有些情况下我用到这个办法 比如

00:10:38.166 --> 00:10:39.776 A:middle
当我在进行某种程度的模糊匹配时

00:10:39.856 --> 00:10:42.066 A:middle
这时 Siri 被询问的联系人

00:10:42.066 --> 00:10:43.666 A:middle
跟我通讯录中的

00:10:43.666 --> 00:10:44.846 A:middle
联系人并不完全

00:10:44.846 --> 00:10:48.556 A:middle
匹配

00:10:48.776 --> 00:10:50.026 A:middle
我们或多或少还会错过

00:10:50.026 --> 00:10:50.556 A:middle
要处理的情况

00:10:52.316 --> 00:10:53.996 A:middle
在这个例子里 我们得到的

00:10:53.996 --> 00:10:55.036 A:middle
匹配结果不止一个

00:10:56.136 --> 00:10:58.256 A:middle
正如我们所见 我的通讯录里有

00:10:58.256 --> 00:11:00.166 A:middle
John Baily 和 John Appleseed

00:10:58.256 --> 00:11:00.166 A:middle
John Baily 和 John Appleseed

00:11:00.166 --> 00:11:01.746 A:middle
所以我们需要消除这二者之间

00:11:01.746 --> 00:11:02.356 A:middle
的歧义

00:11:02.986 --> 00:11:04.066 A:middle
在此我们还将使用同样的

00:11:04.066 --> 00:11:05.176 A:middle
技术手段 要使用

00:11:05.176 --> 00:11:06.976 A:middle
消除歧义列表 然后提供

00:11:06.976 --> 00:11:12.406 A:middle
匹配列表

00:11:12.526 --> 00:11:13.616 A:middle
还有一种情况

00:11:14.016 --> 00:11:15.336 A:middle
正如我们在刚才的流程中所看见的

00:11:15.336 --> 00:11:17.046 A:middle
首先我们已经要求给 John 发送消息

00:11:17.046 --> 00:11:18.976 A:middle
然后当用户

00:11:18.976 --> 00:11:20.766 A:middle
选择 John Baily 后 我们又问他要选择哪个

00:11:20.766 --> 00:11:21.176 A:middle
联系方式

00:11:22.076 --> 00:11:23.616 A:middle
我们将重新调用

00:11:23.616 --> 00:11:24.696 A:middle
resolveRecipients intent

00:11:24.696 --> 00:11:26.346 A:middle
参数 我们需要处理

00:11:26.346 --> 00:11:26.966 A:middle
这种情况

00:11:27.576 --> 00:11:28.776 A:middle
在这种情况下 我们需要确认

00:11:28.776 --> 00:11:30.656 A:middle
是否已经提供了联系方式

00:11:30.656 --> 00:11:32.016 A:middle
我们基本上可以

00:11:32.016 --> 00:11:33.436 A:middle
那位接收者

00:11:33.436 --> 00:11:33.966 A:middle
作为返回值

00:11:34.486 --> 00:11:36.916 A:middle
那么 我们来看看它的具体操作

00:11:39.696 --> 00:11:41.236 A:middle
为了做到这一点 我将要

00:11:41.236 --> 00:11:44.236 A:middle
使用编辑方案

00:11:44.386 --> 00:11:45.736 A:middle
所以你可以从一开始就为 Siri 提供

00:11:45.736 --> 00:11:48.086 A:middle
intent 询问 所以

00:11:48.086 --> 00:11:49.706 A:middle
实际上你必须要触发

00:11:49.706 --> 00:11:50.806 A:middle
Siri 并对它讲话

00:11:51.096 --> 00:11:52.576 A:middle
所以 当我演示这个例子时

00:11:52.576 --> 00:11:54.056 A:middle
就是要触发 Siri

00:11:54.086 --> 00:11:55.666 A:middle
就是要对它说

00:11:55.666 --> 00:11:56.836 A:middle
“在 UnicornChat 上给 John 发送‘Hello’”

00:12:08.266 --> 00:12:09.986 A:middle
我们看到了

00:12:09.986 --> 00:12:11.766 A:middle
我的通讯录中有好几个 John

00:12:11.766 --> 00:12:12.446 A:middle
所以我们需要选择其中一位

00:12:13.136 --> 00:12:14.096 A:middle
我们来选一下 John Baily

00:12:14.636 --> 00:12:17.066 A:middle
我们在经历这个流程时

00:12:17.066 --> 00:12:18.376 A:middle
还必须要选择一个联系方式

00:12:18.546 --> 00:12:19.786 A:middle
在这里 我们想选择

00:12:19.786 --> 00:12:20.576 A:middle
手机联系方式

00:12:21.956 --> 00:12:23.196 A:middle
这时 我们已经准备好

00:12:23.196 --> 00:12:24.936 A:middle
发送消息 而且所有的

00:12:25.046 --> 00:12:29.000 A:middle
这位接收者也已经被解析出来了

00:12:32.516 --> 00:12:37.326 A:middle
[掌声]

00:12:37.826 --> 00:12:39.326 A:middle
我们刚刚看到了

00:12:39.326 --> 00:12:41.056 A:middle
在发送消息时

00:12:41.056 --> 00:12:42.436 A:middle
如何确定联系人的

00:12:42.436 --> 00:12:42.886 A:middle
过程

00:12:43.436 --> 00:12:45.056 A:middle
这种技巧也适用于

00:12:45.056 --> 00:12:46.536 A:middle
其他需要对联系人

00:12:46.576 --> 00:12:47.416 A:middle
进行解析的 intent

00:12:49.876 --> 00:12:52.416 A:middle
使用短信 App 来发送消息

00:12:52.416 --> 00:12:53.856 A:middle
感觉很棒 不过用它们

00:12:53.856 --> 00:12:55.386 A:middle
来读取消息

00:12:55.386 --> 00:12:55.876 A:middle
也很棒

00:12:56.496 --> 00:12:58.246 A:middle
举一个很好的例子

00:12:58.246 --> 00:12:59.846 A:middle
那就是用 CarPlay 读取信息

00:13:00.746 --> 00:13:02.716 A:middle
如果你的应用执行了

00:13:03.076 --> 00:13:05.116 A:middle
INSearchForMessagesIntent

00:13:05.566 --> 00:13:07.396 A:middle
你就可以获取

00:13:07.396 --> 00:13:09.716 A:middle
在 iOS 以及 CarPlay 上的

00:13:09.716 --> 00:13:09.946 A:middle
阅读记录

00:13:10.446 --> 00:13:14.046 A:middle
所以 我们在 iOS 11 里引入了

00:13:14.046 --> 00:13:16.446 A:middle
一种新属性 通过它能够

00:13:16.446 --> 00:13:18.266 A:middle
更方便地回复 Siri 刚向我们的用户

00:13:18.266 --> 00:13:19.656 A:middle
读出的信息

00:13:21.436 --> 00:13:23.286 A:middle
这种新属性叫做

00:13:23.286 --> 00:13:24.526 A:middle
conversationIdentifier

00:13:25.336 --> 00:13:27.116 A:middle
它已经被采用于

00:13:27.176 --> 00:13:29.906 A:middle
INMessage 对象 以及

00:13:29.906 --> 00:13:31.276 A:middle
INSendMessageIntent

00:13:32.176 --> 00:13:33.966 A:middle
这个 conversationIdentifier

00:13:33.966 --> 00:13:36.596 A:middle
将会被用来回复

00:13:36.596 --> 00:13:37.056 A:middle
消息

00:13:37.366 --> 00:13:38.626 A:middle
Siri 将为你读出

00:13:38.626 --> 00:13:41.326 A:middle
来自 UnicornChat 的消息

00:13:41.326 --> 00:13:42.806 A:middle
这一属性的值将

00:13:42.846 --> 00:13:44.416 A:middle
帮助你缩短

00:13:44.416 --> 00:13:45.996 A:middle
联系人解析过程

00:13:45.996 --> 00:13:48.426 A:middle
这个我们刚刚演示过

00:13:48.626 --> 00:13:51.486 A:middle
现在我们来看看这个流程是怎样

00:13:51.486 --> 00:13:51.836 A:middle
完成的

00:13:52.346 --> 00:13:55.416 A:middle
“查看我在 UnicornChat 上的消息”

00:13:56.526 --> 00:13:57.896 A:middle
我们想查看一下我们在

00:13:57.896 --> 00:13:59.696 A:middle
UnicornChat 上收到的消息

00:14:00.326 --> 00:14:03.736 A:middle
Siri 清楚地理解了我们的要求

00:14:03.956 --> 00:14:05.496 A:middle
Siri 将发送一个

00:14:05.526 --> 00:14:07.356 A:middle
INSearchForMessagesIntent

00:14:07.356 --> 00:14:08.256 A:middle
到你的 app extension

00:14:09.146 --> 00:14:10.446 A:middle
你的 app extension 已经

00:14:10.446 --> 00:14:11.556 A:middle
执行了

00:14:11.556 --> 00:14:13.106 A:middle
SearchForMessageIntent 句柄

00:14:14.206 --> 00:14:16.206 A:middle
这个句柄将提供

00:14:16.206 --> 00:14:18.006 A:middle
INMessages 对象列表

00:14:18.576 --> 00:14:19.846 A:middle
Siri 会将这个列表读取给

00:14:19.906 --> 00:14:20.456 A:middle
用户

00:14:21.676 --> 00:14:23.936 A:middle
我们都注意到了 INMessage

00:14:23.976 --> 00:14:26.566 A:middle
对象包含了一个属性 它名为

00:14:26.566 --> 00:14:27.756 A:middle
conversationIdentifier

00:14:29.026 --> 00:14:31.686 A:middle
这个标识符代表着

00:14:31.686 --> 00:14:33.486 A:middle
该会话的独特性

00:14:34.626 --> 00:14:36.006 A:middle
由于这种独特性的存在 如果用户想要

00:14:36.006 --> 00:14:37.616 A:middle
予以回复的话

00:14:37.846 --> 00:14:38.976 A:middle
你就可以

00:14:39.806 --> 00:14:39.906 A:middle
使用那个 conversationIdentifier 了

00:14:41.146 --> 00:14:43.326 A:middle
正如我们所见 Siri 在读完

00:14:43.326 --> 00:14:44.596 A:middle
消息之后 会询问用户

00:14:44.596 --> 00:14:45.896 A:middle
他们是否想要回复此消息

00:14:47.516 --> 00:14:49.116 A:middle
为了继续这个流程 我们不妨

00:14:49.116 --> 00:14:51.166 A:middle
假设用户想要回复说

00:14:51.626 --> 00:14:52.376 A:middle
“你好”

00:14:52.896 --> 00:14:56.506 A:middle
Siri 清楚地理解了

00:14:56.506 --> 00:14:58.646 A:middle
用户只说了“你好” 意思是

00:14:58.646 --> 00:14:59.996 A:middle
我想回复这条消息

00:15:00.026 --> 00:15:01.726 A:middle
并且回复的内容是

00:15:01.726 --> 00:15:02.296 A:middle
“你好”

00:15:03.676 --> 00:15:05.146 A:middle
Siri 将会发送一个

00:15:05.146 --> 00:15:07.016 A:middle
INSendMessageIntent

00:15:07.016 --> 00:15:08.326 A:middle
并附有已输入数据的

00:15:08.416 --> 00:15:08.976 A:middle
conversationIdentifier

00:15:09.716 --> 00:15:11.156 A:middle
这个 conversationIdentifier

00:15:11.156 --> 00:15:12.836 A:middle
的值就是你在 INMessage 对象上

00:15:12.836 --> 00:15:14.356 A:middle
输入的相同值

00:15:14.416 --> 00:15:16.306 A:middle
Siri 正是通过它来

00:15:16.306 --> 00:15:17.106 A:middle
读取消息

00:15:18.276 --> 00:15:20.206 A:middle
关于这个值  现在它

00:15:20.206 --> 00:15:20.946 A:middle
也被提供给

00:15:20.946 --> 00:15:22.126 A:middle
resolveRecipients intent

00:15:22.126 --> 00:15:22.576 A:middle
参数中

00:15:23.366 --> 00:15:24.826 A:middle
我们可以缩短

00:15:24.826 --> 00:15:26.236 A:middle
联系人的解析过程

00:15:26.236 --> 00:15:27.776 A:middle
基本上就是利用这个值

00:15:27.776 --> 00:15:29.626 A:middle
然后直接进入消息会话

00:15:29.626 --> 00:15:31.426 A:middle
抓取这个会话

00:15:31.426 --> 00:15:32.746 A:middle
选择接收者

00:15:32.746 --> 00:15:34.996 A:middle
然后进入下一步

00:15:34.996 --> 00:15:36.486 A:middle
也就是说

00:15:36.486 --> 00:15:36.916 A:middle
回复消息

00:15:41.556 --> 00:15:43.146 A:middle
想进一步了解如何

00:15:43.146 --> 00:15:44.506 A:middle
在 CarPlay 中启用你的 App

00:15:44.506 --> 00:15:45.526 A:middle
我推荐大家去看看

00:15:45.526 --> 00:15:47.276 A:middle
我们今年发布的这个

00:15:47.806 --> 00:15:47.896 A:middle
视频

00:15:52.716 --> 00:15:56.036 A:middle
除了关注联系人解析之外

00:15:56.036 --> 00:15:59.016 A:middle
我们还致力于研究

00:15:59.016 --> 00:16:00.116 A:middle
响应代码

00:15:59.016 --> 00:16:00.116 A:middle
响应代码

00:16:01.226 --> 00:16:02.556 A:middle
去年 当我们推出

00:16:02.556 --> 00:16:03.946 A:middle
SiriKit 时 也推出了一套

00:16:03.946 --> 00:16:05.236 A:middle
响应代码 你们在短信服务领域里

00:16:05.236 --> 00:16:06.886 A:middle
或许已经很熟悉这些

00:16:06.886 --> 00:16:07.216 A:middle
响应代码了

00:16:07.606 --> 00:16:09.216 A:middle
我举个例子 如果服务不可用

00:16:09.216 --> 00:16:11.046 A:middle
你可以返回一条

00:16:11.046 --> 00:16:13.116 A:middle
“故障 服务不可用”

00:16:13.116 --> 00:16:14.596 A:middle
Siri 将很乐意

00:16:14.596 --> 00:16:16.436 A:middle
告知用户是哪里

00:16:16.436 --> 00:16:16.676 A:middle
出了问题

00:16:16.926 --> 00:16:19.646 A:middle
我们关注这一点 而且已经

00:16:19.646 --> 00:16:21.646 A:middle
改进了相关响应代码

00:16:22.626 --> 00:16:24.646 A:middle
即通话意图 短信意图

00:16:24.646 --> 00:16:27.306 A:middle
和支付意图的响应代码

00:16:27.986 --> 00:16:30.026 A:middle
关于这种情况 我再举个例子

00:16:30.086 --> 00:16:32.046 A:middle
如果有一个呼叫意图 在我们引入一个

00:16:32.046 --> 00:16:33.486 A:middle
无效号码的

00:16:33.486 --> 00:16:35.336 A:middle
响应代码后

00:16:35.336 --> 00:16:36.706 A:middle
它会帮助我们更清楚地

00:16:36.706 --> 00:16:39.436 A:middle
告知用户 这个新创建的

00:16:39.436 --> 00:16:40.646 A:middle
intent 缺少一个有效号码

00:16:41.276 --> 00:16:42.646 A:middle
Siri 将以这种方式而提供一种

00:16:42.646 --> 00:16:44.726 A:middle
很棒的体验 它会

00:16:44.816 --> 00:16:46.796 A:middle
很清楚哪里出了问题

00:16:47.536 --> 00:16:49.006 A:middle
若想了解更多相关信息

00:16:49.216 --> 00:16:49.736 A:middle
大家可以查看一下

00:16:49.736 --> 00:16:50.516 A:middle
这方面的文稿

00:16:52.456 --> 00:16:54.546 A:middle
现在扼要总结一下我们讲解过的内容

00:16:54.546 --> 00:16:56.306 A:middle
我们谈到了

00:16:56.306 --> 00:16:58.226 A:middle
INPerson.SiriMatches 这是

00:16:58.226 --> 00:16:59.766 A:middle
我们引入 iOS 10.3 的新属性

00:16:59.876 --> 00:17:02.796 A:middle
它可以帮助你

00:16:59.876 --> 00:17:02.796 A:middle
它可以帮助你

00:17:02.796 --> 00:17:04.016 A:middle
进行更准确的联系人解析

00:17:04.016 --> 00:17:04.396 A:middle
处理

00:17:05.465 --> 00:17:06.945 A:middle
在这之后 我们演示了

00:17:06.945 --> 00:17:08.106 A:middle
如何解析

00:17:08.106 --> 00:17:09.705 A:middle
多个句柄的过程  也就是

00:17:09.806 --> 00:17:11.606 A:middle
它包含了多个电话号码

00:17:11.606 --> 00:17:13.356 A:middle
或者电邮地址 或两方面都存在这种

00:17:13.356 --> 00:17:13.626 A:middle
情况

00:17:16.296 --> 00:17:17.955 A:middle
我们还介绍了

00:17:18.086 --> 00:17:19.576 A:middle
conversationIdentifier

00:17:19.656 --> 00:17:21.506 A:middle
以及它如何有效帮助用户回复

00:17:21.506 --> 00:17:23.665 A:middle
Siri 读过的短信消息

00:17:24.935 --> 00:17:26.866 A:middle
我们还简要谈到了

00:17:26.866 --> 00:17:27.796 A:middle
响应代码以及

00:17:27.796 --> 00:17:29.676 A:middle
我们已在 iOS 11 里提供的

00:17:29.736 --> 00:17:30.386 A:middle
改进措施

00:17:31.646 --> 00:17:32.896 A:middle
接下来 我要把讲台让给

00:17:32.896 --> 00:17:34.636 A:middle
我的合作者 Rohit 让他

00:17:34.636 --> 00:17:35.826 A:middle
来给你们讲解更多关于

00:17:35.826 --> 00:17:36.356 A:middle
安全性的内容

00:17:37.516 --> 00:17:42.366 A:middle
[掌声]

00:17:42.866 --> 00:17:43.526 A:middle
&gt;&gt; 谢谢 Angel

00:17:45.056 --> 00:17:46.096 A:middle
大家好

00:17:46.726 --> 00:17:48.516 A:middle
我叫 Rohit Dasari

00:17:48.586 --> 00:17:49.866 A:middle
是 SiriKit 团队的一员

00:17:50.486 --> 00:17:52.026 A:middle
现在 我们来谈谈

00:17:52.026 --> 00:17:53.316 A:middle
SiriKit 语境的安全性

00:17:53.846 --> 00:17:56.876 A:middle
我们再回到

00:17:56.876 --> 00:17:58.106 A:middle
先前演示过的 UnicornChat 的

00:17:58.106 --> 00:17:58.436 A:middle
例子

00:17:59.486 --> 00:18:00.686 A:middle
大家看这里 用户可以

00:17:59.486 --> 00:18:00.686 A:middle
大家看这里 用户可以

00:18:00.686 --> 00:18:02.366 A:middle
发送消息 即使

00:18:02.366 --> 00:18:03.476 A:middle
设备处于锁屏状态

00:18:04.076 --> 00:18:05.466 A:middle
现在 Siri 做到了

00:18:05.996 --> 00:18:07.656 A:middle
Siri 做出决定的

00:18:07.926 --> 00:18:09.696 A:middle
基础  是 intent 能否

00:18:09.696 --> 00:18:12.456 A:middle
如何平衡可用性与

00:18:12.456 --> 00:18:14.166 A:middle
有安全保障的便捷性

00:18:15.366 --> 00:18:16.946 A:middle
在这个短信的例子中

00:18:16.946 --> 00:18:18.786 A:middle
Siri 实现了这些请求

00:18:18.786 --> 00:18:20.086 A:middle
尽管设备是处于锁屏状态

00:18:20.956 --> 00:18:23.366 A:middle
你们有些人可能需要

00:18:23.436 --> 00:18:24.786 A:middle
先让用户解锁设备

00:18:24.786 --> 00:18:26.566 A:middle
然后再处理

00:18:26.566 --> 00:18:27.236 A:middle
这一类的意图

00:18:28.636 --> 00:18:29.746 A:middle
这可能是出于某些

00:18:29.746 --> 00:18:31.956 A:middle
安全政策或者某些

00:18:31.956 --> 00:18:34.136 A:middle
公司或法律的要求

00:18:34.136 --> 00:18:35.596 A:middle
你的 App 必须遵循这些要求

00:18:37.156 --> 00:18:39.236 A:middle
运用目前的 SiriKit 机制

00:18:39.496 --> 00:18:42.296 A:middle
就有办法做到这一点

00:18:42.676 --> 00:18:44.056 A:middle
而不必更改任何代码

00:18:44.056 --> 00:18:45.596 A:middle
这就是零代码变更

00:18:47.676 --> 00:18:50.106 A:middle
你只需要进入

00:18:50.106 --> 00:18:52.856 A:middle
SiriKit intents Extension 里的

00:18:52.856 --> 00:18:56.696 A:middle
Info.plist 文件 以及你列举的

00:18:56.696 --> 00:18:58.406 A:middle
自己的 Extension 所支持的

00:18:58.626 --> 00:19:00.106 A:middle
各种 intents

00:18:58.626 --> 00:19:00.106 A:middle
各种 intents

00:19:01.026 --> 00:19:05.156 A:middle
你需要为你想要限制的 intents

00:19:05.156 --> 00:19:06.086 A:middle
创建这个条目

00:19:07.156 --> 00:19:08.106 A:middle
字段名为

00:19:08.156 --> 00:19:09.816 A:middle
IntentsRestrictedWhileLocked

00:19:09.816 --> 00:19:10.996 A:middle
这个名称已经说明自身性质了

00:19:11.946 --> 00:19:14.866 A:middle
那么  经过这个改动 现在 Siri

00:19:14.866 --> 00:19:18.386 A:middle
知道了 当用户

00:19:18.386 --> 00:19:22.316 A:middle
想要执行一个

00:19:22.316 --> 00:19:25.346 A:middle
属于该类别的 intent 时

00:19:25.346 --> 00:19:27.336 A:middle
首先要给设备解锁

00:19:29.336 --> 00:19:31.026 A:middle
一行代码都不用更改

00:19:34.976 --> 00:19:37.386 A:middle
但有时这还不够

00:19:37.966 --> 00:19:39.036 A:middle
只是去解锁设备 仍然

00:19:39.036 --> 00:19:39.456 A:middle
不够

00:19:40.036 --> 00:19:41.496 A:middle
让我们以这个 App 为例

00:19:41.496 --> 00:19:45.236 A:middle
用户可以用这个 App

00:19:45.236 --> 00:19:46.566 A:middle
锁定和解锁他们的汽车

00:19:47.556 --> 00:19:49.276 A:middle
对于这样一个 App

00:19:49.276 --> 00:19:51.286 A:middle
要与 SiriKit 集成

00:19:51.286 --> 00:19:53.646 A:middle
就必须处理一个 intent 它名为

00:19:54.056 --> 00:19:56.556 A:middle
setCarLockStatusIntent

00:19:57.676 --> 00:19:58.936 A:middle
这个 intent 我们已添加到了

00:19:59.306 --> 00:20:00.616 A:middle
iOS 10.3

00:19:59.306 --> 00:20:00.616 A:middle
iOS 10.3

00:20:01.156 --> 00:20:03.956 A:middle
让我们快速看一下这个

00:20:03.956 --> 00:20:04.426 A:middle
intent

00:20:04.976 --> 00:20:06.066 A:middle
它相当简单

00:20:06.576 --> 00:20:07.846 A:middle
其中包含两个属性

00:20:08.596 --> 00:20:09.856 A:middle
你想要锁定的

00:20:09.856 --> 00:20:13.336 A:middle
或者是解锁的车名  以及

00:20:13.426 --> 00:20:14.646 A:middle
你想给汽车设定的

00:20:14.646 --> 00:20:14.816 A:middle
状态

00:20:17.706 --> 00:20:19.626 A:middle
只要这个 App 提供了

00:20:19.626 --> 00:20:20.806 A:middle
处理此 intent 的 extension

00:20:20.806 --> 00:20:23.166 A:middle
它就可以处理这样的指令

00:20:23.166 --> 00:20:25.046 A:middle
例如 用户可以说

00:20:25.046 --> 00:20:27.616 A:middle
“给我的车解锁” Siri 就知道

00:20:27.616 --> 00:20:29.456 A:middle
要调用这个 app extension

00:20:29.456 --> 00:20:30.936 A:middle
给它一个 intent 然后让这个

00:20:30.936 --> 00:20:32.816 A:middle
intent 让这个extension

00:20:32.816 --> 00:20:33.256 A:middle
来处理

00:20:34.156 --> 00:20:35.336 A:middle
请注意 我现在不会提到

00:20:35.336 --> 00:20:36.076 A:middle
这个 App 的名字

00:20:36.656 --> 00:20:38.096 A:middle
因为 Siri 很智能  如果设备里

00:20:38.096 --> 00:20:39.376 A:middle
只有一个符合条件的 App

00:20:39.376 --> 00:20:41.396 A:middle
可以处理某个特定的 intent

00:20:41.396 --> 00:20:42.776 A:middle
它都会发现

00:20:43.216 --> 00:20:45.536 A:middle
Siri 不会要求用户

00:20:45.636 --> 00:20:47.466 A:middle
确认这个 App 的名称

00:20:47.466 --> 00:20:48.926 A:middle
或要求客户消除歧义

00:20:50.106 --> 00:20:51.606 A:middle
所以 处理完这个 intent

00:20:52.306 --> 00:20:54.886 A:middle
我的示例 App 就将

00:20:54.886 --> 00:20:56.186 A:middle
车门状态的变化

00:20:56.186 --> 00:20:58.476 A:middle
以图像方式反映了出来

00:20:58.476 --> 00:20:59.756 A:middle
大家在这里

00:21:00.406 --> 00:21:00.496 A:middle
也可以看到

00:21:01.396 --> 00:21:03.096 A:middle
所以这是一个很灵敏的

00:21:03.096 --> 00:21:03.586 A:middle
传输处理

00:21:03.586 --> 00:21:04.896 A:middle
你正在解锁某人

00:21:04.896 --> 00:21:05.296 A:middle
的汽车

00:21:06.026 --> 00:21:07.806 A:middle
那么 对于这种传输处理

00:21:07.806 --> 00:21:09.026 A:middle
即使设备处于锁屏状态

00:21:09.026 --> 00:21:10.596 A:middle
你可能也想

00:21:10.596 --> 00:21:12.676 A:middle
向用户提出另一种

00:21:12.676 --> 00:21:13.536 A:middle
授权请求

00:21:14.986 --> 00:21:17.936 A:middle
我们推荐大家使用

00:21:17.936 --> 00:21:19.526 A:middle
安全授权机制

00:21:19.686 --> 00:21:21.986 A:middle
它已经被加入 iOS

00:21:22.156 --> 00:21:22.636 A:middle
那就是 Touch ID

00:21:23.736 --> 00:21:24.966 A:middle
利用本机授权验证 API

00:21:24.966 --> 00:21:27.736 A:middle
你甚至可以自定义

00:21:27.736 --> 00:21:29.906 A:middle
与 Touch ID 一同出现的提示

00:21:29.906 --> 00:21:32.016 A:middle
告诉用户

00:21:32.016 --> 00:21:33.916 A:middle
让用户了解一下原因

00:21:33.916 --> 00:21:35.396 A:middle
为什么要求他们

00:21:35.396 --> 00:21:37.866 A:middle
再次授权

00:21:37.866 --> 00:21:38.896 A:middle
尽管设备已经锁定

00:21:38.896 --> 00:21:39.326 A:middle
已经解锁

00:21:41.586 --> 00:21:43.036 A:middle
如果你的设备不支持

00:21:43.116 --> 00:21:44.696 A:middle
如果用户的设备

00:21:44.696 --> 00:21:46.466 A:middle
不支持 Touch ID 或者可能

00:21:46.466 --> 00:21:47.666 A:middle
用户还未

00:21:47.666 --> 00:21:50.326 A:middle
在其设备上配置 Touch ID

00:21:50.326 --> 00:21:52.066 A:middle
本机验证 API 只允许你

00:21:52.066 --> 00:21:53.986 A:middle
通过密码

00:21:53.986 --> 00:21:55.326 A:middle
来解锁设备

00:21:57.506 --> 00:21:58.726 A:middle
大家注意 它的

00:21:58.936 --> 00:22:00.356 A:middle
自定义字符串

00:21:58.936 --> 00:22:00.356 A:middle
自定义字符串

00:22:00.626 --> 00:22:02.366 A:middle
与你的 App 在此提供的内容相同

00:22:02.366 --> 00:22:03.896 A:middle
它可以给用户提供某种语境

00:22:04.906 --> 00:22:06.256 A:middle
这操作起来很简单

00:22:06.556 --> 00:22:08.076 A:middle
我给大家演示一下

00:22:08.076 --> 00:22:08.426 A:middle
如何操作

00:22:09.136 --> 00:22:11.076 A:middle
那么  我在这里显示的

00:22:11.076 --> 00:22:12.796 A:middle
intent 处理程序

00:22:12.796 --> 00:22:15.376 A:middle
用于 setCarLockStatusIntent

00:22:15.376 --> 00:22:16.926 A:middle
它来自我刚给大家看的测试用 App

00:22:18.196 --> 00:22:19.596 A:middle
我们来看看这个 App

00:22:19.596 --> 00:22:19.876 A:middle
是什么样的

00:22:22.636 --> 00:22:23.906 A:middle
我们看到了 这里有一张

00:22:23.906 --> 00:22:25.936 A:middle
代表汽车的图片

00:22:25.996 --> 00:22:28.086 A:middle
是用户汽车的图片 它同时也代表了

00:22:28.086 --> 00:22:29.736 A:middle
汽车的状态

00:22:29.736 --> 00:22:30.916 A:middle
是属于锁定 还是解锁

00:22:31.126 --> 00:22:33.606 A:middle
现在 汽车处于锁定状态

00:22:33.606 --> 00:22:34.706 A:middle
我点击一下就可以将车门打开

00:22:35.366 --> 00:22:40.966 A:middle
现在把它设置为锁定状态 然后我

00:22:40.966 --> 00:22:42.876 A:middle
又想让 Siri

00:22:42.876 --> 00:22:44.336 A:middle
用这个 App 解锁汽车

00:22:44.736 --> 00:22:46.826 A:middle
那么 正如我的同事 Angel 先前展示的那样

00:22:46.826 --> 00:22:48.946 A:middle
我将要使用

00:22:48.946 --> 00:22:51.436 A:middle
方案编辑器来输入

00:22:51.436 --> 00:22:53.026 A:middle
我想要发送给 Siri 的请求

00:22:54.386 --> 00:22:56.406 A:middle
我将发送这个

00:22:56.406 --> 00:22:57.006 A:middle
请求

00:23:00.896 --> 00:23:02.576 A:middle
方案编辑器十分好用

00:23:02.576 --> 00:23:04.056 A:middle
说不准大家还没意识到这一点

00:23:05.006 --> 00:23:05.946 A:middle
有了它 你在测试时不用再

00:23:05.946 --> 00:23:06.926 A:middle
那么费劲地

00:23:06.926 --> 00:23:08.466 A:middle
对着手机讲话

00:23:08.466 --> 00:23:10.216 A:middle
这在共享工作环境中

00:23:10.216 --> 00:23:10.726 A:middle
非常实用

00:23:11.996 --> 00:23:15.346 A:middle
所以 在这种情况下 Siri

00:23:15.346 --> 00:23:16.736 A:middle
处理了该请求  把它

00:23:16.736 --> 00:23:18.536 A:middle
传递给了 App

00:23:18.536 --> 00:23:18.986 A:middle
并且报告成功

00:23:19.736 --> 00:23:21.526 A:middle
我们来确认一下

00:23:21.526 --> 00:23:22.356 A:middle
它确实把汽车给解锁了

00:23:23.216 --> 00:23:25.456 A:middle
现在汽车所处的状态

00:23:25.456 --> 00:23:27.436 A:middle
已经更新 可以看出

00:23:27.436 --> 00:23:28.216 A:middle
它已经解锁

00:23:28.796 --> 00:23:30.856 A:middle
我们再回过头来看

00:23:30.896 --> 00:23:31.236 A:middle
意图句柄

00:23:32.796 --> 00:23:36.056 A:middle
这个意图句柄提取了

00:23:36.056 --> 00:23:37.536 A:middle
我们在 intent 上看到的字段

00:23:37.536 --> 00:23:39.186 A:middle
内容是  我该给汽车上锁

00:23:39.186 --> 00:23:41.346 A:middle
还是解锁汽车

00:23:42.596 --> 00:23:44.586 A:middle
而且 它会寻找

00:23:44.586 --> 00:23:46.956 A:middle
与 intent 上面名称相符的

00:23:46.956 --> 00:23:48.076 A:middle
内部汽车对象

00:23:49.676 --> 00:23:52.886 A:middle
然后 它根据 intent 上的输入

00:23:52.886 --> 00:23:55.026 A:middle
将汽车对象设置为

00:23:55.026 --> 00:23:56.446 A:middle
锁定状态

00:23:57.206 --> 00:23:59.026 A:middle
最后  在更改了

00:23:59.026 --> 00:24:01.156 A:middle
汽车的状态之后

00:23:59.026 --> 00:24:01.156 A:middle
汽车的状态之后

00:24:01.156 --> 00:24:03.196 A:middle
它向 Siri 返回了

00:24:03.196 --> 00:24:05.056 A:middle
成功响应代码

00:24:06.286 --> 00:24:08.056 A:middle
如果操作失败

00:24:08.056 --> 00:24:10.406 A:middle
或者是 intent 上没有

00:24:10.406 --> 00:24:11.756 A:middle
没有足够的信息

00:24:11.756 --> 00:24:14.046 A:middle
它就会返回

00:24:14.046 --> 00:24:14.566 A:middle
失败响应代码

00:24:15.876 --> 00:24:18.526 A:middle
所以 你们都看到了

00:24:18.526 --> 00:24:20.226 A:middle
这个意图句柄是怎样

00:24:20.226 --> 00:24:21.636 A:middle
无条件地处理了

00:24:21.636 --> 00:24:23.286 A:middle
用户给它的请求

00:24:24.196 --> 00:24:25.886 A:middle
我们想在这里添加一个提示

00:24:26.006 --> 00:24:27.496 A:middle
利用本机验证

00:24:27.496 --> 00:24:27.756 A:middle
API

00:24:28.836 --> 00:24:31.866 A:middle
所以 一旦我们确认了

00:24:31.866 --> 00:24:33.316 A:middle
该 intent 具备我们所需的所有参数

00:24:33.316 --> 00:24:35.136 A:middle
我们就可以调用

00:24:35.136 --> 00:24:39.976 A:middle
本机验证 API

00:24:40.146 --> 00:24:41.036 A:middle
为了调用

00:24:41.036 --> 00:24:43.896 A:middle
本机验证 API

00:24:45.106 --> 00:24:47.826 A:middle
首先我要生成一个字符串

00:24:47.826 --> 00:24:49.866 A:middle
它是基于提请实施的锁定状态

00:24:51.206 --> 00:24:53.066 A:middle
也就是说 如果用户

00:24:53.066 --> 00:24:54.436 A:middle
要求我锁定汽车

00:24:54.436 --> 00:24:55.716 A:middle
我就会显示适当的

00:24:55.716 --> 00:24:56.056 A:middle
提示

00:24:57.376 --> 00:24:58.766 A:middle
然后

00:24:58.766 --> 00:25:00.806 A:middle
针对本机验证的语境

00:24:58.766 --> 00:25:00.806 A:middle
针对本机验证的语境

00:25:00.806 --> 00:25:03.276 A:middle
我将会要求它评估

00:25:03.276 --> 00:25:04.116 A:middle
某个特定策略

00:25:04.906 --> 00:25:06.576 A:middle
在这个例子中 我将要求它

00:25:06.576 --> 00:25:07.956 A:middle
评估设备所有人的

00:25:07.956 --> 00:25:09.096 A:middle
授权行为

00:25:09.696 --> 00:25:11.496 A:middle
这个策略  首先是尝试

00:25:11.596 --> 00:25:13.086 A:middle
给出 Touch ID 提示

00:25:13.086 --> 00:25:14.436 A:middle
如果不成功

00:25:14.436 --> 00:25:15.766 A:middle
它会转而要求

00:25:15.806 --> 00:25:18.166 A:middle
设备密码提示

00:25:18.296 --> 00:25:19.896 A:middle
接下来 我要输入提示字符串

00:25:19.896 --> 00:25:21.436 A:middle
这是我刚在前一行生成的提示字符串

00:25:21.436 --> 00:25:23.406 A:middle
最后  我就获得了

00:25:23.406 --> 00:25:24.346 A:middle
回复代码块

00:25:24.996 --> 00:25:26.146 A:middle
那么 我们来填充一下这个

00:25:26.146 --> 00:25:26.426 A:middle
回复代码块

00:25:29.476 --> 00:25:31.776 A:middle
如果用户以 Touch ID 或

00:25:32.266 --> 00:25:33.626 A:middle
设备密码提示的方式

00:25:33.626 --> 00:25:35.526 A:middle
同意访问  我将继续操作

00:25:35.526 --> 00:25:38.416 A:middle
并更改汽车的状态

00:25:38.416 --> 00:25:40.516 A:middle
就像我先前没有提示的情况下一样

00:25:40.516 --> 00:25:41.576 A:middle
不过这一次

00:25:41.576 --> 00:25:42.876 A:middle
我其实是在等待用户

00:25:42.876 --> 00:25:43.786 A:middle
授权我访问

00:25:44.166 --> 00:25:46.876 A:middle
接着 我将调用

00:25:46.876 --> 00:25:49.236 A:middle
完成代码块  方法是

00:25:49.236 --> 00:25:50.956 A:middle
以成功的响应代码

00:25:50.956 --> 00:25:53.166 A:middle
来告诉 Siri

00:25:53.516 --> 00:25:54.086 A:middle
请求已经成功执行

00:25:54.496 --> 00:25:56.906 A:middle
如果出现了失败

00:25:56.906 --> 00:25:58.696 A:middle
我也需要告诉 Siri

00:25:58.696 --> 00:26:00.706 A:middle
也就是说  如果授权访问未获通过

00:25:58.696 --> 00:26:00.706 A:middle
也就是说  如果授权访问未获通过

00:26:00.706 --> 00:26:02.036 A:middle
那么我就需要告诉 Siri

00:26:02.036 --> 00:26:02.636 A:middle
请求失败

00:26:03.026 --> 00:26:05.256 A:middle
要完成该操作 我需要使用

00:26:05.256 --> 00:26:06.826 A:middle
相同的完成代码块

00:26:06.826 --> 00:26:07.606 A:middle
来返回一个失败的响应代码

00:26:09.116 --> 00:26:11.566 A:middle
那么 在做出这个变动之后

00:26:11.566 --> 00:26:13.596 A:middle
我们再来看看  解锁汽车的过程中

00:26:14.876 --> 00:26:16.406 A:middle
会不会提示用户

00:26:17.956 --> 00:26:18.716 A:middle
进行验证

00:26:19.826 --> 00:26:21.176 A:middle
所以 我们来把汽车

00:26:21.176 --> 00:26:24.806 A:middle
还原到锁定状态

00:26:24.806 --> 00:26:25.146 A:middle
然后运行这个

00:26:26.466 --> 00:26:28.066 A:middle
我的请求与前面使用的相同

00:26:28.066 --> 00:26:29.526 A:middle
也就是 解锁汽车

00:26:44.186 --> 00:26:46.366 A:middle
你们看 在 Siri 请求的期间

00:26:46.366 --> 00:26:48.176 A:middle
出现了一个提示

00:26:48.886 --> 00:26:50.296 A:middle
如果这个模拟器设置了

00:26:50.296 --> 00:26:51.526 A:middle
Touch ID 它就会

00:26:51.526 --> 00:26:52.556 A:middle
显示一个 Touch ID 提示

00:26:53.406 --> 00:26:54.626 A:middle
在这种情况下 我给它设置了

00:26:54.626 --> 00:26:56.756 A:middle
设备密码提示

00:26:56.976 --> 00:27:00.076 A:middle
现在 我要输入我的超级安全

00:26:56.976 --> 00:27:00.076 A:middle
现在 我要输入我的超级安全

00:27:00.076 --> 00:27:00.916 A:middle
密码

00:27:00.916 --> 00:27:01.876 A:middle
请不要偷看哦

00:27:05.696 --> 00:27:07.026 A:middle
一旦我输入了

00:27:07.026 --> 00:27:09.796 A:middle
密码 这个请求

00:27:09.796 --> 00:27:10.076 A:middle
就通过了

00:27:10.756 --> 00:27:12.036 A:middle
让我们启动 App

00:27:12.036 --> 00:27:12.916 A:middle
来确认一下  这个请求确实

00:27:12.916 --> 00:27:12.983 A:middle
完成了

00:27:15.096 --> 00:27:16.676 A:middle
没错  汽车已经解锁了

00:27:17.516 --> 00:27:25.656 A:middle
[掌声]

00:27:26.156 --> 00:27:28.106 A:middle
所以 运用几行代码

00:27:28.106 --> 00:27:29.496 A:middle
我们就能在 Siri 的请求过程中

00:27:29.496 --> 00:27:31.736 A:middle
添加一个

00:27:31.736 --> 00:27:34.416 A:middle
本地授权提示

00:27:34.506 --> 00:27:35.836 A:middle
利用本机验证 API

00:27:35.836 --> 00:27:38.496 A:middle
可以让你进行

00:27:38.496 --> 00:27:39.686 A:middle
多种形式的验证

00:27:40.496 --> 00:27:41.986 A:middle
比如说 Touch ID 它是否已被支持并且

00:27:41.986 --> 00:27:44.316 A:middle
完成配置  或者  它是否使用

00:27:44.796 --> 00:27:45.276 A:middle
设备密码

00:27:46.896 --> 00:27:48.396 A:middle
大家调用这个

00:27:48.396 --> 00:27:50.806 A:middle
本机验证 API 的位置

00:27:50.806 --> 00:27:52.296 A:middle
是在调用完成代码块之前

00:27:52.296 --> 00:27:53.956 A:middle
意图句柄的

00:27:53.956 --> 00:27:54.646 A:middle
处理方法里面

00:27:56.696 --> 00:27:58.136 A:middle
而且 因为这个

00:27:58.136 --> 00:27:59.636 A:middle
本机验证框架是系统的一部分

00:27:59.636 --> 00:28:01.526 A:middle
所以 Siri 知道

00:27:59.636 --> 00:28:01.526 A:middle
所以 Siri 知道

00:28:01.526 --> 00:28:04.436 A:middle
要与它相协调 因此

00:28:04.436 --> 00:28:07.266 A:middle
如果用户发出的请求

00:28:07.266 --> 00:28:10.536 A:middle
是通过“Hey Siri”该请求就需要

00:28:10.536 --> 00:28:12.456 A:middle
等待用户对提示

00:28:12.456 --> 00:28:16.276 A:middle
作出回应

00:28:16.506 --> 00:28:17.786 A:middle
若想了解更多

00:28:17.786 --> 00:28:19.696 A:middle
关于本机验证 API 的信息

00:28:19.696 --> 00:28:24.516 A:middle
建议参考 2014 年以来这方面的发言内容

00:28:24.636 --> 00:28:26.016 A:middle
你们当中有些人正在研发的 App 里

00:28:26.016 --> 00:28:28.666 A:middle
可能有一些

00:28:28.666 --> 00:28:30.516 A:middle
在执行 Siri 请求之前

00:28:30.516 --> 00:28:31.956 A:middle
还需要完成一个付款操作

00:28:34.996 --> 00:28:37.666 A:middle
在这个样例里  用户想要

00:28:37.666 --> 00:28:39.036 A:middle
在 UnicornRides 上

00:28:39.036 --> 00:28:42.556 A:middle
预约一辆 RainbowCar

00:28:42.556 --> 00:28:44.286 A:middle
你在接受请求之前

00:28:44.376 --> 00:28:45.596 A:middle
需要让用户完成付款

00:28:47.016 --> 00:28:48.856 A:middle
我们推荐大家使用

00:28:48.856 --> 00:28:51.736 A:middle
安全的 Apple Pay API

00:28:51.736 --> 00:28:53.436 A:middle
以便处理 Siri 请求期间的

00:28:53.436 --> 00:28:54.236 A:middle
付款交易

00:28:54.976 --> 00:28:56.696 A:middle
使用 Apple Pay API

00:28:56.696 --> 00:28:58.666 A:middle
能给你带来各种好处

00:28:58.666 --> 00:28:59.906 A:middle
就像使用本机验证 API 一样

00:29:00.376 --> 00:29:03.216 A:middle
也就是 你要与 Siri 协调

00:29:03.216 --> 00:29:05.576 A:middle
而且你调用这个 API

00:29:05.576 --> 00:29:06.916 A:middle
的位置  就是你在

00:29:06.916 --> 00:29:08.306 A:middle
调用完成代码块之前

00:29:08.306 --> 00:29:09.866 A:middle
处理方法里的

00:29:09.866 --> 00:29:10.626 A:middle
相同位置

00:29:14.596 --> 00:29:16.036 A:middle
现在 我们来谈谈如何

00:29:16.036 --> 00:29:17.366 A:middle
把新词教给 Siri

00:29:21.276 --> 00:29:23.126 A:middle
我们这次用一个名为

00:29:23.256 --> 00:29:25.636 A:middle
UnicornPay 的 App 为例

00:29:25.636 --> 00:29:28.346 A:middle
该 App 允许用户

00:29:28.346 --> 00:29:30.276 A:middle
查询他们的账户余额

00:29:32.456 --> 00:29:34.316 A:middle
像这样的 App 还可以

00:29:34.316 --> 00:29:36.626 A:middle
允许用户为应用里的

00:29:36.676 --> 00:29:38.296 A:middle
各账户设置名称

00:29:38.576 --> 00:29:39.836 A:middle
现在可以看到 这些名字都是用户配置的

00:29:39.836 --> 00:29:42.656 A:middle
它们不一定是

00:29:42.656 --> 00:29:44.016 A:middle
真正的英语单词

00:29:44.566 --> 00:29:46.016 A:middle
在这个例子里 我们有一个

00:29:46.016 --> 00:29:48.446 A:middle
名为 NestEgg 的账户

00:29:48.446 --> 00:29:50.036 A:middle
这原本是一个单词

00:29:50.036 --> 00:29:50.986 A:middle
只不过中间没有空格

00:29:51.426 --> 00:29:53.066 A:middle
所以 它是由两个英语单词构成

00:29:53.066 --> 00:29:55.346 A:middle
如果没有帮助

00:29:55.346 --> 00:29:56.696 A:middle
Siri 可能无法识别它

00:29:58.836 --> 00:30:00.666 A:middle
去年 我们在介绍 SiriKit 时

00:29:58.836 --> 00:30:00.666 A:middle
去年 我们在介绍 SiriKit 时

00:30:00.666 --> 00:30:03.136 A:middle
谈到了一些机制

00:30:03.136 --> 00:30:05.946 A:middle
这些机制可以允许你

00:30:05.946 --> 00:30:07.926 A:middle
帮助 Siri 理解

00:30:07.926 --> 00:30:08.486 A:middle
类似于这样的单词

00:30:09.186 --> 00:30:11.066 A:middle
这些单词并不是某个 App 所特有

00:30:11.656 --> 00:30:12.576 A:middle
而是该 App 的某个

00:30:12.576 --> 00:30:16.706 A:middle
特定用户所特有

00:30:16.706 --> 00:30:19.076 A:middle
比如

00:30:19.076 --> 00:30:21.196 A:middle
相簿名称 健身名称

00:30:21.196 --> 00:30:21.826 A:middle
等等

00:30:25.656 --> 00:30:27.536 A:middle
我们推荐一个

00:30:27.696 --> 00:30:29.706 A:middle
用来教会 Siri 这些单词的办法

00:30:29.706 --> 00:30:32.896 A:middle
它是 INVocabulary API

00:30:35.796 --> 00:30:39.776 A:middle
如果想获得更新的

00:30:39.776 --> 00:30:42.076 A:middle
自定义词汇介绍

00:30:42.076 --> 00:30:43.186 A:middle
建议大家关注一下去年

00:30:43.186 --> 00:30:44.376 A:middle
我们介绍 SiriKit 的演讲内容

00:30:44.376 --> 00:30:46.826 A:middle
不过 今天我们还要更加

00:30:46.826 --> 00:30:49.046 A:middle
深入地了解一下 INVocabulary

00:30:49.636 --> 00:30:49.736 A:middle
API

00:30:50.476 --> 00:30:51.996 A:middle
这个 API 相当简单

00:30:52.206 --> 00:30:54.496 A:middle
其中有一个方法

00:30:54.606 --> 00:30:57.956 A:middle
是采用了词汇字符串的有序集合 NSOrderedSet

00:30:57.956 --> 00:31:01.266 A:middle
这个集合适用于

00:30:57.956 --> 00:31:01.266 A:middle
这个集合适用于

00:31:01.266 --> 00:31:04.226 A:middle
某个特定的词汇项目

00:31:04.226 --> 00:31:04.476 A:middle
类型

00:31:04.476 --> 00:31:06.296 A:middle
比如 相簿名称

00:31:06.496 --> 00:31:07.286 A:middle
或健身名称

00:31:07.886 --> 00:31:10.376 A:middle
注意 这是一个有序的集合

00:31:10.376 --> 00:31:12.686 A:middle
这就意味着 Siri 会

00:31:12.746 --> 00:31:15.376 A:middle
优先选择靠近

00:31:15.416 --> 00:31:18.186 A:middle
集合起始点的单词

00:31:18.396 --> 00:31:21.076 A:middle
不过请注意

00:31:21.076 --> 00:31:22.206 A:middle
这些也是你将要教会 Siri 的

00:31:22.206 --> 00:31:22.536 A:middle
字符串

00:31:22.636 --> 00:31:24.206 A:middle
单纯的字符串

00:31:24.206 --> 00:31:24.636 A:middle
没有语境

00:31:25.996 --> 00:31:27.466 A:middle
这也许会有一些

00:31:27.466 --> 00:31:28.066 A:middle
局限性

00:31:29.076 --> 00:31:30.806 A:middle
让我们进一步

00:31:30.806 --> 00:31:33.326 A:middle
深入了解它的实际运作

00:31:33.326 --> 00:31:35.066 A:middle
来看看它有哪些

00:31:35.776 --> 00:31:35.866 A:middle
局限性

00:31:37.056 --> 00:31:38.666 A:middle
我们现在有一个应用

00:31:39.056 --> 00:31:41.846 A:middle
它的私人存储器里

00:31:41.976 --> 00:31:44.406 A:middle
有一些已被用户命名的

00:31:44.406 --> 00:31:44.856 A:middle
账户

00:31:45.696 --> 00:31:47.506 A:middle
为了把这些帐户告诉 Siri

00:31:47.506 --> 00:31:49.946 A:middle
这个 App 将使用

00:31:49.946 --> 00:31:53.216 A:middle
INVocabulary API

00:31:53.216 --> 00:31:56.056 A:middle
并将使用这些字符串的 API 发送出去

00:31:56.056 --> 00:31:57.076 A:middle
这个我们已看到过

00:31:57.936 --> 00:31:59.936 A:middle
有了这方面的知识储备

00:31:59.936 --> 00:32:02.246 A:middle
现在 Siri 就认识这些新词了

00:31:59.936 --> 00:32:02.246 A:middle
现在 Siri 就认识这些新词了

00:32:02.246 --> 00:32:03.636 A:middle
等到下一次用户请求

00:32:03.636 --> 00:32:05.686 A:middle
使用其中某个单词时

00:32:05.686 --> 00:32:08.876 A:middle
Siri 便能

00:32:08.876 --> 00:32:10.316 A:middle
查找该 App 赋予

00:32:10.316 --> 00:32:12.386 A:middle
它的知识内容

00:32:13.216 --> 00:32:14.896 A:middle
并从用户的输入中

00:32:14.896 --> 00:32:18.426 A:middle
确认与类似的自定义单词

00:32:18.426 --> 00:32:21.586 A:middle
相匹配的候选词

00:32:21.586 --> 00:32:22.836 A:middle
并且予以正确识别

00:32:22.836 --> 00:32:23.596 A:middle
从而符合用户的期待

00:32:24.526 --> 00:32:25.686 A:middle
好 一旦识别出这个词

00:32:25.686 --> 00:32:28.006 A:middle
Siri 便可以

00:32:28.006 --> 00:32:29.026 A:middle
把它传递给

00:32:29.026 --> 00:32:31.216 A:middle
应用的 intents extension

00:32:31.556 --> 00:32:33.996 A:middle
并期望它用这个词来

00:32:34.276 --> 00:32:35.576 A:middle
查找存储器中

00:32:35.576 --> 00:32:36.576 A:middle
相应的对象

00:32:37.696 --> 00:32:39.216 A:middle
不过 请注意这只是

00:32:39.216 --> 00:32:41.046 A:middle
一个单纯的字符串

00:32:41.046 --> 00:32:41.546 A:middle
没有相关语境

00:32:42.126 --> 00:32:44.156 A:middle
所以 你的应用也许

00:32:44.156 --> 00:32:47.406 A:middle
并没有足够的信息来

00:32:47.406 --> 00:32:48.976 A:middle
准确查找出这个它词

00:32:49.236 --> 00:32:52.296 A:middle
也许需要

00:32:52.296 --> 00:32:55.266 A:middle
进行模糊匹配

00:32:55.266 --> 00:32:58.106 A:middle
或许这并不是基于

00:32:58.106 --> 00:32:59.846 A:middle
应用存储器里字符串的索引

00:33:00.426 --> 00:33:02.126 A:middle
因此 这不是一种理想的

00:33:02.126 --> 00:33:02.776 A:middle
情况

00:33:03.496 --> 00:33:05.766 A:middle
我们认为在 iOS 11 里

00:33:05.766 --> 00:33:08.776 A:middle
我们会做得更好

00:33:08.946 --> 00:33:11.266 A:middle
我们添加的这个新型 API

00:33:11.266 --> 00:33:13.856 A:middle
它将允许你给 Siri 发送对象

00:33:14.236 --> 00:33:17.836 A:middle
任何对象

00:33:17.836 --> 00:33:19.526 A:middle
只要它们遵循

00:33:19.626 --> 00:33:20.876 A:middle
INSpeakable 协议

00:33:22.576 --> 00:33:25.276 A:middle
再强调一下 这些对象

00:33:25.316 --> 00:33:27.056 A:middle
必须是一个有序集合

00:33:27.056 --> 00:33:28.696 A:middle
与之前 API 里的字符串

00:33:28.696 --> 00:33:31.316 A:middle
遵循相同的原则

00:33:31.366 --> 00:33:34.006 A:middle
并且适用于某种特定的参数类型

00:33:34.706 --> 00:33:37.416 A:middle
现在我们来深入了解一下

00:33:37.416 --> 00:33:38.296 A:middle
这个协议内容

00:33:39.896 --> 00:33:42.976 A:middle
INSpeakable 协议

00:33:43.206 --> 00:33:45.296 A:middle
详细描述了

00:33:45.296 --> 00:33:46.636 A:middle
你将教授 Siri 的

00:33:46.636 --> 00:33:47.396 A:middle
词汇项

00:33:49.956 --> 00:33:52.696 A:middle
该协议的主要部分

00:33:52.696 --> 00:33:54.286 A:middle
它的主要属性就是

00:33:54.286 --> 00:33:55.566 A:middle
你正在教 Siri 的这个实际单词

00:33:56.616 --> 00:33:57.826 A:middle
在这个例子中 它可以是

00:33:57.826 --> 00:33:59.446 A:middle
NestEgg 这个中间缺少空格的单词

00:33:59.446 --> 00:34:01.596 A:middle
或其他编造误拼的

00:33:59.446 --> 00:34:01.596 A:middle
或其他编造误拼的

00:34:01.596 --> 00:34:04.506 A:middle
某个健身训练名称

00:34:04.506 --> 00:34:05.956 A:middle
甚至可以是一个

00:34:05.956 --> 00:34:08.005 A:middle
混合了数字或特殊字符

00:34:08.005 --> 00:34:08.646 A:middle
的单词

00:34:09.196 --> 00:34:12.676 A:middle
你还可以教会 Siri

00:34:13.896 --> 00:34:16.436 A:middle
还可以给 Siri 一些提示

00:34:16.696 --> 00:34:18.446 A:middle
告诉它如何识别

00:34:18.446 --> 00:34:19.076 A:middle
你正在教它的单词

00:34:19.936 --> 00:34:22.346 A:middle
在这个例子里 它们采用了

00:34:23.056 --> 00:34:24.775 A:middle
一种发音近似的拼写方式

00:34:24.926 --> 00:34:26.116 A:middle
你会采用同样的方式

00:34:26.116 --> 00:34:27.755 A:middle
来配置联系人 App 里

00:34:27.755 --> 00:34:32.306 A:middle
的语音名称

00:34:32.565 --> 00:34:34.516 A:middle
对于每个 INSpeakable 对象

00:34:35.116 --> 00:34:36.166 A:middle
你还可以

00:34:36.166 --> 00:34:38.525 A:middle
提供一个词汇标识符

00:34:38.525 --> 00:34:40.396 A:middle
它可以单独识别

00:34:40.396 --> 00:34:41.136 A:middle
App Store 里的对象

00:34:42.166 --> 00:34:43.755 A:middle
我们这是一个纯文本的字符串

00:34:43.755 --> 00:34:45.815 A:middle
因此 我们不会限制

00:34:45.815 --> 00:34:47.926 A:middle
你赋予该标识符的值

00:34:48.226 --> 00:34:50.956 A:middle
但是如果使用某个独特的 Grid

00:34:50.956 --> 00:34:52.795 A:middle
或类似的东西  将有助于你

00:34:53.255 --> 00:34:55.275 A:middle
在 App 数据存储器中

00:34:55.275 --> 00:34:57.356 A:middle
准确地匹配该对象

00:34:58.856 --> 00:35:01.446 A:middle
最后 INSpeakable 协议

00:34:58.856 --> 00:35:01.446 A:middle
最后 INSpeakable 协议

00:35:01.446 --> 00:35:04.356 A:middle
还允许 Siri

00:35:05.076 --> 00:35:08.276 A:middle
提供单词的其他匹配形式

00:35:08.276 --> 00:35:10.486 A:middle
也就是 Siri 认为

00:35:10.486 --> 00:35:12.166 A:middle
用户可能想要的匹配

00:35:12.786 --> 00:35:14.606 A:middle
这相当于

00:35:14.606 --> 00:35:16.836 A:middle
SiriMatches 的属性

00:35:16.836 --> 00:35:18.556 A:middle
我的同事 Angel 之前讲解过这个

00:35:18.556 --> 00:35:21.606 A:middle
如果 INPerson 对象

00:35:21.606 --> 00:35:23.176 A:middle
确实是要遵循

00:35:23.176 --> 00:35:26.516 A:middle
INSpeakable 协议

00:35:26.516 --> 00:35:28.636 A:middle
那么它便会显示出像 SiriMatches 那样的

00:35:28.636 --> 00:35:30.996 A:middle
候选备用匹配

00:35:32.306 --> 00:35:34.776 A:middle
有了这个新协议和 API

00:35:34.876 --> 00:35:36.336 A:middle
现在我们再回到同一个示例

00:35:36.336 --> 00:35:38.416 A:middle
看看这些变化是

00:35:38.736 --> 00:35:39.376 A:middle
如何发生的

00:35:40.046 --> 00:35:42.536 A:middle
那么 现在这个应用想要

00:35:42.536 --> 00:35:44.776 A:middle
把同样两个具有

00:35:44.776 --> 00:35:45.886 A:middle
自定义名称的账户对象

00:35:45.886 --> 00:35:46.846 A:middle
告诉 Siri

00:35:47.916 --> 00:35:50.086 A:middle
它将调用 INVocabulary API

00:35:50.206 --> 00:35:51.506 A:middle
不过 这一次它将把

00:35:51.506 --> 00:35:54.326 A:middle
对象本身传给 Siri

00:35:54.326 --> 00:35:57.616 A:middle
然后 Siri 将会使用

00:35:57.616 --> 00:36:00.756 A:middle
这些对象中的 INSpeakable 部分

00:35:57.616 --> 00:36:00.756 A:middle
这些对象中的 INSpeakable 部分

00:36:02.576 --> 00:36:06.286 A:middle
而当用户发出请求时

00:36:06.286 --> 00:36:08.776 A:middle
它所包含的某个词汇

00:36:08.776 --> 00:36:10.966 A:middle
与 Siri 学过的新对象相匹配

00:36:10.966 --> 00:36:14.376 A:middle
Siri 将识别出这个模式

00:36:14.376 --> 00:36:19.036 A:middle
并将它替换成

00:36:19.036 --> 00:36:22.756 A:middle
预期的拼写形式

00:36:22.896 --> 00:36:24.616 A:middle
而且 当 Siri 将信息传回到 App 的

00:36:24.616 --> 00:36:26.556 A:middle
Intent Extension 时

00:36:26.556 --> 00:36:28.836 A:middle
Siri 不会提供没有任何语境的

00:36:28.836 --> 00:36:30.926 A:middle
纯文本字符串  而是会给它

00:36:30.926 --> 00:36:32.836 A:middle
INSpeakable 对象

00:36:34.456 --> 00:36:36.586 A:middle
因为这个 INSpeakable 对象

00:36:36.846 --> 00:36:39.326 A:middle
带有词汇标识符

00:36:39.456 --> 00:36:42.316 A:middle
如前所述

00:36:42.316 --> 00:36:44.536 A:middle
它可以是该对象特有的 ID

00:36:45.096 --> 00:36:47.356 A:middle
从 App 这方面来说 查找此对象

00:36:47.356 --> 00:36:49.106 A:middle
会变得更容易

00:36:53.036 --> 00:36:54.986 A:middle
所以 我们希望有了这个新的

00:36:54.986 --> 00:36:57.736 A:middle
API 请求之后

00:36:57.736 --> 00:37:02.306 A:middle
用户能够使用某个自定义词汇

00:36:57.736 --> 00:37:02.306 A:middle
用户能够使用某个自定义词汇

00:37:02.306 --> 00:37:05.656 A:middle
向 Siri 发出请求

00:37:05.656 --> 00:37:07.916 A:middle
那么你的 App 就可以处理这些请求

00:37:07.916 --> 00:37:09.586 A:middle
而不必担心会出现

00:37:09.586 --> 00:37:11.046 A:middle
要在你的 App Store 实现

00:37:11.046 --> 00:37:11.366 A:middle
模糊匹配

00:37:15.286 --> 00:37:18.206 A:middle
在另一个例证里  你也有可能

00:37:18.206 --> 00:37:19.446 A:middle
想教 Siri 学些新词

00:37:19.446 --> 00:37:23.196 A:middle
那就是  当某个词

00:37:23.196 --> 00:37:25.166 A:middle
在你的 App 里有特殊含义 但是它对

00:37:25.446 --> 00:37:27.376 A:middle
这个 App 的所有使用者来说都很普通

00:37:27.526 --> 00:37:29.556 A:middle
这方面的例证  可以是

00:37:29.556 --> 00:37:32.486 A:middle
某个行程预定 App

00:37:32.836 --> 00:37:35.906 A:middle
其中涉及到品牌车名  或是自定义的

00:37:35.906 --> 00:37:38.826 A:middle
交通工具名称

00:37:38.876 --> 00:37:43.946 A:middle
抑或是某个非英语体能训练 App

00:37:43.946 --> 00:37:44.186 A:middle
的名称

00:37:47.336 --> 00:37:48.996 A:middle
为了把这样的单词教给 Siri

00:37:48.996 --> 00:37:51.186 A:middle
我们推荐你

00:37:51.186 --> 00:37:52.006 A:middle
使用

00:37:52.006 --> 00:37:57.866 A:middle
AppIntentVocabulary.plist

00:37:58.026 --> 00:38:00.036 A:middle
一旦你向 Siri 提供了一个 plist 文件

00:37:58.026 --> 00:38:00.036 A:middle
一旦你向 Siri 提供了一个 plist 文件

00:38:00.576 --> 00:38:02.736 A:middle
比如说 像这样的例子

00:38:02.736 --> 00:38:05.106 A:middle
行程预定 App

00:38:05.266 --> 00:38:07.486 A:middle
已经自定义了行程名称

00:38:08.566 --> 00:38:09.826 A:middle
在这个例子中 它们并不是真正的单词

00:38:09.826 --> 00:38:10.796 A:middle
大家可以看到

00:38:11.196 --> 00:38:13.016 A:middle
中间没留空格的 RainbowCar

00:38:13.016 --> 00:38:16.056 A:middle
并不是真正的单词

00:38:16.256 --> 00:38:19.156 A:middle
用户现在可以说出这些词

00:38:20.156 --> 00:38:21.886 A:middle
并期待 Siri 能予以识别

00:38:25.236 --> 00:38:27.336 A:middle
把这样的词汇

00:38:27.336 --> 00:38:29.426 A:middle
记载到 Siri 的方法 就是

00:38:29.426 --> 00:38:30.996 A:middle
使用自定义词汇 plist 文件

00:38:31.626 --> 00:38:33.776 A:middle
它里面的主要部分是

00:38:33.776 --> 00:38:35.486 A:middle
intent 参数  是你用来

00:38:35.486 --> 00:38:36.376 A:middle
提供自定义词汇项的

00:38:36.376 --> 00:38:37.206 A:middle
Intent 参数

00:38:38.086 --> 00:38:40.406 A:middle
在这种情况下 这个参数

00:38:40.626 --> 00:38:42.736 A:middle
本身就可能属于

00:38:42.736 --> 00:38:47.126 A:middle
INSpeakable 类型

00:38:47.126 --> 00:38:51.466 A:middle
在参数内部 INSpeakable 对象的

00:38:51.756 --> 00:38:53.626 A:middle
子字段可以被

00:38:53.626 --> 00:38:54.246 A:middle
具体指定

00:38:55.336 --> 00:38:56.666 A:middle
例如 你可以

00:38:56.666 --> 00:38:58.756 A:middle
指定一个词汇标识符

00:38:58.756 --> 00:38:59.916 A:middle
用来识别你正在教 Siri

00:38:59.916 --> 00:39:03.216 A:middle
辨认的 SparkleCar

00:38:59.916 --> 00:39:03.216 A:middle
辨认的 SparkleCar

00:39:03.446 --> 00:39:04.976 A:middle
以及你以口语词组形式

00:39:04.976 --> 00:39:08.046 A:middle
教给 Siri 的实际名称

00:39:08.046 --> 00:39:09.876 A:middle
或者是发音提示

00:39:10.006 --> 00:39:11.686 A:middle
类似于我们在前面例子里看到的

00:39:11.686 --> 00:39:13.156 A:middle
针对用户特定词汇

00:39:13.156 --> 00:39:13.796 A:middle
的标识符

00:39:15.336 --> 00:39:17.436 A:middle
完成这些之后 Siri

00:39:17.436 --> 00:39:19.106 A:middle
将能够理解这类请求

00:39:19.106 --> 00:39:20.746 A:middle
也就是 当用户

00:39:20.746 --> 00:39:23.136 A:middle
正在使用自定义词汇

00:39:23.136 --> 00:39:25.576 A:middle
而它们对于你的 App

00:39:26.426 --> 00:39:26.506 A:middle
又属于特定词汇的时候

00:39:31.496 --> 00:39:33.516 A:middle
现在 我们来谈谈

00:39:33.686 --> 00:39:35.296 A:middle
如何利用 UI 测试

00:39:35.296 --> 00:39:37.676 A:middle
来检测 SiriKit 的集成质量

00:39:39.696 --> 00:39:41.676 A:middle
几年前 我们介绍过 UI 测试

00:39:41.676 --> 00:39:43.386 A:middle
这种机制可以让你

00:39:43.386 --> 00:39:45.006 A:middle
在 Xcode 项目内部

00:39:45.006 --> 00:39:46.656 A:middle
编写 UI 测试

00:39:46.656 --> 00:39:48.686 A:middle
自动化测试

00:39:49.246 --> 00:39:52.166 A:middle
现在 Siri 在这个模拟器里

00:39:52.166 --> 00:39:54.126 A:middle
已经获得支持  你可以在任何

00:39:54.126 --> 00:39:55.846 A:middle
硬件配置中运行这些测试

00:39:55.846 --> 00:39:57.956 A:middle
而不需要

00:39:57.956 --> 00:39:59.966 A:middle
真正地携带使用

00:39:59.966 --> 00:40:00.336 A:middle
这个硬件

00:39:59.966 --> 00:40:00.336 A:middle
这个硬件

00:40:03.216 --> 00:40:05.196 A:middle
UI 测试实现了自动化

00:40:05.346 --> 00:40:06.936 A:middle
因此你可以让它们

00:40:07.196 --> 00:40:09.836 A:middle
在 CI 管道或自定义集成管道里

00:40:10.216 --> 00:40:11.976 A:middle
持续自动运行

00:40:12.676 --> 00:40:14.826 A:middle
从而确保代码变化

00:40:14.826 --> 00:40:16.076 A:middle
不会破坏现有的

00:40:16.076 --> 00:40:16.766 A:middle
功能性质

00:40:17.226 --> 00:40:20.946 A:middle
使用这些 UI 测试还能带给你

00:40:20.946 --> 00:40:22.586 A:middle
某种程度上的语言独立性

00:40:22.586 --> 00:40:24.796 A:middle
这样一来 你就能够

00:40:24.796 --> 00:40:26.776 A:middle
使用自身成长过程中使用的

00:40:26.776 --> 00:40:28.556 A:middle
初始语言以外的

00:40:28.556 --> 00:40:29.916 A:middle
另一种语言来测试

00:40:29.916 --> 00:40:30.546 A:middle
Siri 的集成效果

00:40:30.956 --> 00:40:32.456 A:middle
我们稍后将会看到这方面的

00:40:32.456 --> 00:40:32.856 A:middle
例子

00:40:35.376 --> 00:40:37.216 A:middle
关于 UI 测试的更多信息

00:40:37.216 --> 00:40:38.836 A:middle
建议大家参阅

00:40:38.836 --> 00:40:40.936 A:middle
2015 年开始采用 UI 测试时

00:40:40.936 --> 00:40:47.116 A:middle
的相关文档

00:40:47.116 --> 00:40:49.306 A:middle
为了对 Siri 进行 UI 测试

00:40:49.566 --> 00:40:51.956 A:middle
iOS 11 主要新增的一个 API

00:40:51.956 --> 00:40:55.446 A:middle
就是在设备上引用

00:40:55.446 --> 00:41:00.546 A:middle
Siri 服务的一种方式

00:40:55.446 --> 00:41:00.546 A:middle
Siri 服务的一种方式

00:41:00.686 --> 00:41:02.346 A:middle
采取这个引用 你可以

00:41:02.346 --> 00:41:05.396 A:middle
直接使用代码

00:41:05.556 --> 00:41:07.416 A:middle
把 Siri 请求字符串输入到

00:41:07.856 --> 00:41:08.416 A:middle
Siri 服务中

00:41:08.996 --> 00:41:10.226 A:middle
此外 因为这是用代码完成的

00:41:10.226 --> 00:41:12.636 A:middle
所以你不必再去

00:41:12.636 --> 00:41:14.556 A:middle
手动测试你的 Siri

00:41:14.556 --> 00:41:15.166 A:middle
集成

00:41:15.566 --> 00:41:17.456 A:middle
我们来演示一下

00:41:22.676 --> 00:41:24.136 A:middle
我们再回到

00:41:24.136 --> 00:41:25.836 A:middle
前面见过的那个 App

00:41:26.226 --> 00:41:27.906 A:middle
当时 我们添加了一个解锁汽车时的

00:41:27.906 --> 00:41:30.116 A:middle
授权提示

00:41:31.526 --> 00:41:33.916 A:middle
好 这是同一个 App

00:41:34.106 --> 00:41:36.106 A:middle
它有一张图像显示

00:41:36.106 --> 00:41:38.616 A:middle
汽车正处于锁定状态

00:41:40.196 --> 00:41:42.576 A:middle
利用 Siri 我能够测试出

00:41:42.686 --> 00:41:45.926 A:middle
自己能否给汽车加锁和

00:41:45.926 --> 00:41:46.546 A:middle
解锁

00:41:47.016 --> 00:41:48.536 A:middle
所以 如果我想用这个 App

00:41:48.536 --> 00:41:50.696 A:middle
对 Siri 集成进行测试

00:41:50.696 --> 00:41:52.356 A:middle
我该如何进行手动测试

00:41:52.916 --> 00:41:57.046 A:middle
首先 我会启动 App

00:41:57.306 --> 00:41:58.756 A:middle
把它的状态设置为

00:41:58.756 --> 00:41:59.606 A:middle
我想要的状态

00:42:00.206 --> 00:42:01.596 A:middle
比如说 我想测试

00:42:01.926 --> 00:42:04.136 A:middle
我的锁定请求是否有效

00:42:04.136 --> 00:42:05.466 A:middle
那么我将从它处于

00:42:05.466 --> 00:42:06.496 A:middle
解锁状态时开始

00:42:08.136 --> 00:42:10.236 A:middle
然后 我将发出一个

00:42:10.796 --> 00:42:12.686 A:middle
锁定汽车的请求

00:42:14.496 --> 00:42:16.216 A:middle
现在 我们来发送该请求

00:42:31.486 --> 00:42:34.816 A:middle
好了 接着 我需要

00:42:34.816 --> 00:42:36.666 A:middle
验证这个请求

00:42:36.666 --> 00:42:38.056 A:middle
是否真的被成功处理

00:42:38.426 --> 00:42:40.116 A:middle
为此  我需要

00:42:40.116 --> 00:42:42.236 A:middle
启动这个 App 并且检查

00:42:42.236 --> 00:42:44.276 A:middle
其状态 观看检查

00:42:44.276 --> 00:42:45.046 A:middle
这个 App 的状态

00:42:45.746 --> 00:42:47.426 A:middle
所以 看来当我要求

00:42:47.426 --> 00:42:49.306 A:middle
Siri 锁上汽车时

00:42:49.306 --> 00:42:50.376 A:middle
汽车便被锁上 因此

00:42:50.376 --> 00:42:50.866 A:middle
测试成功

00:42:51.286 --> 00:42:52.536 A:middle
这就是手动测试

00:42:53.376 --> 00:42:54.786 A:middle
那我如何完成一次类似的自动化

00:42:54.786 --> 00:42:55.116 A:middle
测试呢

00:42:55.406 --> 00:42:59.166 A:middle
利用 UI 自动化 API

00:42:59.166 --> 00:43:01.796 A:middle
我可以在我的项目里

00:42:59.166 --> 00:43:01.796 A:middle
我可以在我的项目里

00:43:01.796 --> 00:43:03.936 A:middle
创建一个 UI 测试分类

00:43:03.976 --> 00:43:06.746 A:middle
把它添加到我的 UI 测试包

00:43:07.966 --> 00:43:11.166 A:middle
再创建一个类似的测试

00:43:11.356 --> 00:43:12.736 A:middle
所以测试基本上就是

00:43:12.736 --> 00:43:15.156 A:middle
包含这四个步骤的一项功能

00:43:15.616 --> 00:43:17.076 A:middle
首先 我需要建立测试

00:43:17.076 --> 00:43:19.066 A:middle
然后我需要调用 Siri

00:43:19.066 --> 00:43:21.056 A:middle
接着等待 Siri 的响应

00:43:21.056 --> 00:43:23.446 A:middle
之后确认

00:43:23.446 --> 00:43:25.706 A:middle
Siri 的请求已经通过

00:43:25.706 --> 00:43:26.866 A:middle
此外这个 App 确实已经

00:43:26.866 --> 00:43:28.186 A:middle
处理了该请求

00:43:28.856 --> 00:43:31.216 A:middle
好的 我们先动手建立一个

00:43:32.416 --> 00:43:32.586 A:middle
测试

00:43:32.766 --> 00:43:34.526 A:middle
那么  为了建立一项测试

00:43:34.666 --> 00:43:36.886 A:middle
我创建了一种辅助方法

00:43:37.086 --> 00:43:38.736 A:middle
把汽车的上锁状态

00:43:38.736 --> 00:43:41.176 A:middle
设置为 False 也就是要解锁

00:43:41.176 --> 00:43:41.446 A:middle
汽车

00:43:41.996 --> 00:43:43.796 A:middle
所以 在运行上锁测试之前

00:43:43.796 --> 00:43:45.536 A:middle
我先要解锁汽车

00:43:46.426 --> 00:43:49.456 A:middle
那么 这个辅助方法就是

00:43:49.456 --> 00:43:51.046 A:middle
我使用 UI 记录机制

00:43:51.046 --> 00:43:53.386 A:middle
对它进行配置

00:43:53.386 --> 00:43:54.796 A:middle
如果你查阅 UI 测试框架的演讲

00:43:54.796 --> 00:43:57.196 A:middle
你就会明白

00:43:57.196 --> 00:43:58.656 A:middle
该如何进行 UI 记录

00:43:58.926 --> 00:44:01.906 A:middle
从而生成类似于这样的

00:43:58.926 --> 00:44:01.906 A:middle
从而生成类似于这样的

00:44:03.056 --> 00:44:03.246 A:middle
测试

00:44:03.366 --> 00:44:05.796 A:middle
接下来 为了调用 Siri

00:44:05.796 --> 00:44:07.576 A:middle
我要使用先前提到的 API

00:44:07.576 --> 00:44:08.856 A:middle
那个新的 API

00:44:10.226 --> 00:44:12.926 A:middle
我现在要输入请求

00:44:13.386 --> 00:44:14.156 A:middle
给汽车上锁

00:44:14.196 --> 00:44:16.776 A:middle
最后我准备

00:44:16.776 --> 00:44:18.486 A:middle
接下来我就要等待

00:44:18.486 --> 00:44:19.726 A:middle
Siri 的响应

00:44:20.566 --> 00:44:21.786 A:middle
为了等待 Siri 的响应

00:44:21.786 --> 00:44:23.216 A:middle
我将使用这个名为

00:44:23.346 --> 00:44:26.796 A:middle
Wait 的 API 这个 wait 参数

00:44:26.876 --> 00:44:28.306 A:middle
这个 wait 方法

00:44:28.486 --> 00:44:29.456 A:middle
使用两个参数

00:44:29.866 --> 00:44:32.166 A:middle
一个参数是预期

00:44:32.166 --> 00:44:33.096 A:middle
另一个是超时

00:44:33.806 --> 00:44:35.726 A:middle
我正在等待完成的预期

00:44:35.726 --> 00:44:38.646 A:middle
是一个述语式预期

00:44:38.646 --> 00:44:40.926 A:middle
此外我正在使用的

00:44:40.926 --> 00:44:43.846 A:middle
这个述语  它的睡眠时间基本上

00:44:43.846 --> 00:44:44.816 A:middle
为 5 秒

00:44:45.176 --> 00:44:46.086 A:middle
这不是在幻想

00:44:46.496 --> 00:44:48.076 A:middle
我觉得对于 Siri 来说

00:44:48.076 --> 00:44:50.286 A:middle
5 钞钟应该足够对请求作出响应

00:44:52.656 --> 00:44:55.606 A:middle
所以 它将等待 5 秒

00:44:56.016 --> 00:44:57.646 A:middle
我将为此而等待 10 分钟不

00:44:57.646 --> 00:44:58.706 A:middle
10 秒

00:44:59.076 --> 00:45:02.426 A:middle
这是等待 Siri 响应

00:44:59.076 --> 00:45:02.426 A:middle
这是等待 Siri 响应

00:45:02.426 --> 00:45:04.026 A:middle
的部分

00:45:05.496 --> 00:45:07.726 A:middle
接下来 我需要确认

00:45:07.726 --> 00:45:09.356 A:middle
这个 App 的状态确实已经

00:45:09.356 --> 00:45:09.916 A:middle
改变

00:45:13.056 --> 00:45:15.496 A:middle
为此  我已经

00:45:15.496 --> 00:45:17.756 A:middle
给 App 里的一个 UI 元素

00:45:17.756 --> 00:45:19.726 A:middle
添加了可访问标签

00:45:20.316 --> 00:45:22.526 A:middle
我正在用它提取

00:45:22.526 --> 00:45:25.946 A:middle
那个视图 然后比较那个视图上的

00:45:25.946 --> 00:45:28.026 A:middle
可访问标签的值

00:45:28.026 --> 00:45:30.026 A:middle
看看它是否和我的

00:45:30.026 --> 00:45:34.616 A:middle
预期相匹配

00:45:34.726 --> 00:45:37.436 A:middle
由于我们已经编写

00:45:37.496 --> 00:45:38.876 A:middle
已经把刚才手动完成的测试

00:45:38.876 --> 00:45:41.196 A:middle
进行自动化 所以我们就来运行

00:45:41.196 --> 00:45:43.276 A:middle
这个自动化测试 看看它是否

00:45:43.276 --> 00:45:45.766 A:middle
按照我们的预期运行

00:45:52.336 --> 00:45:53.936 A:middle
因为这是一个自动化测试

00:45:53.936 --> 00:45:57.086 A:middle
所以它让我有时间去做

00:45:57.086 --> 00:46:00.716 A:middle
真正的研发工作 而不用

00:45:57.086 --> 00:46:00.716 A:middle
真正的研发工作 而不用

00:46:00.716 --> 00:46:02.876 A:middle
花费时间测试那些

00:46:02.876 --> 00:46:04.786 A:middle
我已经知道它将会如何运行的

00:46:04.786 --> 00:46:05.166 A:middle
事项

00:46:08.356 --> 00:46:10.296 A:middle
因此 你们可以看到这是一个

00:46:10.296 --> 00:46:12.176 A:middle
需要 Siri 用 5 秒钟响应的等待

00:46:12.176 --> 00:46:14.706 A:middle
到了最后  它终于

00:46:14.706 --> 00:46:16.676 A:middle
启动这个 App 并且检查

00:46:16.876 --> 00:46:18.166 A:middle
当前状态是否与预期

00:46:18.166 --> 00:46:18.876 A:middle
相一致

00:46:21.516 --> 00:46:27.276 A:middle
[掌声]

00:46:27.776 --> 00:46:30.006 A:middle
这些欢乐的指示符

00:46:30.006 --> 00:46:32.886 A:middle
告诉我这项测试

00:46:32.886 --> 00:46:36.316 A:middle
已经成功

00:46:37.636 --> 00:46:39.616 A:middle
目前 Siri 可支持多种语言

00:46:39.616 --> 00:46:41.406 A:middle
而我用起来最顺手的

00:46:41.406 --> 00:46:43.266 A:middle
还是英语 但我可能

00:46:43.266 --> 00:46:45.436 A:middle
也想用汉语普通话来测试 App 的

00:46:45.436 --> 00:46:47.376 A:middle
Siri 集成

00:46:47.836 --> 00:46:49.596 A:middle
我不会说汉语普通话

00:46:50.366 --> 00:46:54.686 A:middle
但我可以在开发者网址上

00:46:57.056 --> 00:47:01.126 A:middle
查找一些用于编写这个 intent 的

00:46:57.056 --> 00:47:01.126 A:middle
查找一些用于编写这个 intent 的

00:47:01.126 --> 00:47:01.616 A:middle
语句表达形式

00:47:01.616 --> 00:47:03.276 A:middle
好 我要找的 intent 是

00:47:03.276 --> 00:47:07.876 A:middle
INSetCarLockStatusIntent

00:47:12.046 --> 00:47:13.486 A:middle
在这个 intent 的文稿纪录里

00:47:13.486 --> 00:47:17.696 A:middle
我们实际上有各种语言的

00:47:17.696 --> 00:47:21.196 A:middle
样本语句

00:47:21.266 --> 00:47:22.566 A:middle
Siri 对这些语言

00:47:22.566 --> 00:47:23.076 A:middle
全都支持

00:47:24.176 --> 00:47:26.096 A:middle
所以 我将采用一段

00:47:26.096 --> 00:47:28.636 A:middle
汉语普通话示例话语

00:47:32.076 --> 00:47:36.746 A:middle
将它输入到这里

00:47:40.196 --> 00:47:41.646 A:middle
然后 我将运行这个测试

00:47:42.346 --> 00:47:44.796 A:middle
测试对象是一台配置为汉语普通话语言环境下

00:47:45.216 --> 00:47:47.036 A:middle
使用 Siri 的设备

00:47:47.716 --> 00:47:49.276 A:middle
好 我们首先开启

00:47:49.276 --> 00:47:50.106 A:middle
这台设备

00:48:01.316 --> 00:48:02.916 A:middle
看 它启动 App

00:48:02.916 --> 00:48:05.026 A:middle
设置初始状态 调用 Siri

00:48:05.026 --> 00:48:06.826 A:middle
向它发出请求 等待它的

00:48:06.826 --> 00:48:07.586 A:middle
响应

00:48:08.186 --> 00:48:11.136 A:middle
接着 它再次启动 App

00:48:11.136 --> 00:48:12.736 A:middle
确认该状态

00:48:12.736 --> 00:48:14.276 A:middle
与预期相一致

00:48:15.516 --> 00:48:19.666 A:middle
[掌声]

00:48:20.166 --> 00:48:21.056 A:middle
又是欢乐的指示符

00:48:21.126 --> 00:48:21.566 A:middle
耶

00:48:29.266 --> 00:48:30.416 A:middle
可以看出

00:48:30.416 --> 00:48:32.906 A:middle
自动化 SiriKit 集成测试

00:48:33.066 --> 00:48:33.456 A:middle
就是这么简单

00:48:34.196 --> 00:48:35.926 A:middle
那么 我们来扼要复述一下

00:48:35.926 --> 00:48:36.216 A:middle
今天的讲解内容

00:48:37.566 --> 00:48:39.756 A:middle
大家从我的同事 Angel 那里

00:48:39.756 --> 00:48:41.886 A:middle
学习到了如何处理以下各种情况

00:48:42.326 --> 00:48:44.166 A:middle
如果出现

00:48:44.586 --> 00:48:46.756 A:middle
联系人重名  或者是

00:48:47.006 --> 00:48:49.026 A:middle
特定联系人拥有

00:48:49.026 --> 00:48:50.946 A:middle
多个联系方式时  需要提醒用户

00:48:50.946 --> 00:48:51.886 A:middle
消除歧义

00:48:53.246 --> 00:48:55.946 A:middle
接下来 我们讲解了一些

00:48:56.386 --> 00:48:58.606 A:middle
使用本机授权 API 来

00:48:58.606 --> 00:49:00.696 A:middle
重新授权 Siri 请求的方法

00:48:58.606 --> 00:49:00.696 A:middle
重新授权 Siri 请求的方法

00:49:01.916 --> 00:49:03.436 A:middle
然后 我们知道了如何把

00:49:03.436 --> 00:49:05.186 A:middle
一些用户特有  或 App 特有的

00:49:05.186 --> 00:49:08.386 A:middle
词汇教给 Siri

00:49:08.386 --> 00:49:10.446 A:middle
最后 我们还演示了

00:49:10.446 --> 00:49:13.046 A:middle
如何对 SiriKit 集成

00:49:13.216 --> 00:49:16.016 A:middle
进行 UI 测试

00:49:16.016 --> 00:49:17.576 A:middle
测试时甚至可以使用我们

00:49:18.156 --> 00:49:20.016 A:middle
不会说的语言

00:49:20.956 --> 00:49:23.066 A:middle
如果想要更多地了解

00:49:23.066 --> 00:49:25.296 A:middle
我们在此次演讲中提到的

00:49:25.296 --> 00:49:26.406 A:middle
示例代码和 API 信息

00:49:26.406 --> 00:49:28.586 A:middle
请参考这个 URL

00:49:28.586 --> 00:49:33.056 A:middle
我们还有其他一些演讲

00:49:34.026 --> 00:49:35.716 A:middle
它们都与各位的

00:49:35.716 --> 00:49:37.576 A:middle
SiriKit 集成相关 包括

00:49:37.806 --> 00:49:41.066 A:middle
Apple Pay 和 CarPlay 的演讲

00:49:41.596 --> 00:49:43.656 A:middle
以及前几年的演讲

00:49:43.656 --> 00:49:45.026 A:middle
我们在本次演讲中提到的那些内容

00:49:45.026 --> 00:49:45.906 A:middle
都已罗列在这个网址

00:49:47.186 --> 00:49:49.776 A:middle
感谢大家的到来 我们希望

00:49:49.776 --> 00:49:51.086 A:middle
本次演讲之后

00:49:51.226 --> 00:49:53.416 A:middle
各位能够凭借充足的信息来

00:49:53.416 --> 00:49:54.066 A:middle
创造强大的 SiriKit 体验

00:49:54.826 --> 00:49:55.486 A:middle
谢谢大家

00:49:56.516 --> 00:50:02.010 A:middle
[掌声]
