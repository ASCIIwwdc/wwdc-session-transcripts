WEBVTT

00:00:24.046 --> 00:00:24.556 A:middle
&gt;&gt; 大家早上好

00:00:25.516 --> 00:00:29.546 A:middle
[掌声]

00:00:30.046 --> 00:00:30.476 A:middle
我是 Ross Dexter

00:00:30.476 --> 00:00:31.186 A:middle
我是 Apple 公司游戏技术团队的

00:00:31.186 --> 00:00:32.176 A:middle
一名工程师

00:00:32.256 --> 00:00:33.196 A:middle
欢迎大家来到

00:00:33.196 --> 00:00:35.096 A:middle
借助 SpriteKit 超越 2D 这个会议

00:00:37.016 --> 00:00:38.386 A:middle
那么在我们正式开始前 我想

00:00:38.386 --> 00:00:39.596 A:middle
快速地介绍一下什么是

00:00:39.596 --> 00:00:41.056 A:middle
SpriteKit 以及如何与

00:00:41.056 --> 00:00:42.196 A:middle
Apple 图形渲染相结合

00:00:42.766 --> 00:00:44.486 A:middle
SpriteKit 是 Apple 为游戏设计的

00:00:44.486 --> 00:00:45.606 A:middle
2D 图形框架

00:00:45.856 --> 00:00:46.486 A:middle
其设计的目的就是要实现

00:00:46.486 --> 00:00:48.826 A:middle
使用的灵活 快速与便捷

00:00:48.826 --> 00:00:50.456 A:middle
我们所有的平台都支持

00:00:50.456 --> 00:00:51.926 A:middle
SpriteKit 并且它有一个

00:00:51.926 --> 00:00:53.486 A:middle
Xcode 集成生命编辑器

00:00:53.486 --> 00:00:54.896 A:middle
使得编排和预览你们的

00:00:54.896 --> 00:00:56.616 A:middle
游戏内容既快速又便捷

00:00:58.106 --> 00:00:59.876 A:middle
SpriteKit 与 SceneKit 或

00:00:59.876 --> 00:01:01.326 A:middle
其它以游戏为导向的图形

00:00:59.876 --> 00:01:01.326 A:middle
其它以游戏为导向的图形

00:01:01.326 --> 00:01:02.836 A:middle
框架处在同一层 且两者都在

00:01:02.836 --> 00:01:03.136 A:middle
Metal 的上层

00:01:03.876 --> 00:01:04.796 A:middle
传统上 它们都是

00:01:04.796 --> 00:01:06.156 A:middle
在不同的情景下单独

00:01:06.156 --> 00:01:06.896 A:middle
使用

00:01:07.436 --> 00:01:09.446 A:middle
SpriteKit 可以快速便捷地使用 2D

00:01:09.446 --> 00:01:10.956 A:middle
SceneKit 已经准备充分可以使用

00:01:10.956 --> 00:01:12.756 A:middle
3D 引擎 而 Metal 让大家可以

00:01:12.756 --> 00:01:14.236 A:middle
直接使用设备的

00:01:14.346 --> 00:01:15.116 A:middle
渲染硬件

00:01:15.586 --> 00:01:16.926 A:middle
与其将它们三个

00:01:16.926 --> 00:01:18.766 A:middle
分开 我们认为现在就是

00:01:18.766 --> 00:01:20.146 A:middle
让 SpriteKit 打破其 2D 模具的

00:01:20.146 --> 00:01:20.476 A:middle
时候了

00:01:21.506 --> 00:01:22.736 A:middle
SpriteKit 功能十分强大

00:01:22.736 --> 00:01:23.776 A:middle
结合 SceneKit 和

00:01:23.776 --> 00:01:24.986 A:middle
Metal 来使用 SpriteKit 极具

00:01:24.986 --> 00:01:25.836 A:middle
吸引力

00:01:26.466 --> 00:01:27.626 A:middle
由于这两者在底层都使用

00:01:27.626 --> 00:01:28.846 A:middle
Metal 因此在 SceneKit 中

00:01:28.846 --> 00:01:30.446 A:middle
渲染 SpriteKit 的内容

00:01:30.446 --> 00:01:32.866 A:middle
或使用任意方式来把它送回

00:01:32.896 --> 00:01:34.396 A:middle
Metal 是轻而易举的

00:01:34.396 --> 00:01:34.806 A:middle
事情

00:01:36.046 --> 00:01:37.116 A:middle
许多 3D 游戏和 app

00:01:37.116 --> 00:01:38.916 A:middle
都使用 2D 的内容 并且 SpriteKit

00:01:38.916 --> 00:01:40.036 A:middle
提供了绝佳的方法来

00:01:40.036 --> 00:01:41.036 A:middle
创建和渲染那些

00:01:41.036 --> 00:01:41.476 A:middle
内容

00:01:42.156 --> 00:01:45.756 A:middle
除此之外 今年 Apple

00:01:45.756 --> 00:01:47.216 A:middle
正在推出 ARKit 其将

00:01:47.216 --> 00:01:48.136 A:middle
创造增强现实 app 的

00:01:48.136 --> 00:01:49.576 A:middle
所有难点都解决了

00:01:50.186 --> 00:01:51.006 A:middle
这一新框架的添加

00:01:51.006 --> 00:01:52.296 A:middle
提供了另一个原因来说明

00:01:52.296 --> 00:01:53.096 A:middle
为什么让 SpriteKit 走出

00:01:53.096 --> 00:01:55.336 A:middle
2D 并走进第三维度的

00:01:55.336 --> 00:01:56.316 A:middle
时候已经到来

00:01:56.946 --> 00:01:57.696 A:middle
今天 我们将向大家展示

00:01:57.696 --> 00:01:59.386 A:middle
如何实现这一点以及你们能取得

00:02:00.796 --> 00:02:02.916 A:middle
哪些成就

00:02:03.106 --> 00:02:04.526 A:middle
在这个会议中 我们将

00:02:04.526 --> 00:02:05.886 A:middle
涵盖如何在 ARKit 中渲染

00:02:05.886 --> 00:02:07.616 A:middle
SpriteKit 内容 从而将

00:02:07.616 --> 00:02:08.406 A:middle
SpriteKit 领入增强

00:02:08.406 --> 00:02:09.186 A:middle
现实的世界

00:02:10.175 --> 00:02:11.236 A:middle
接下来 我们会给大家展示如何

00:02:11.236 --> 00:02:12.406 A:middle
将 SpriteKit 场景放进

00:02:12.406 --> 00:02:13.946 A:middle
SceneKit 以及这将如何

00:02:13.946 --> 00:02:15.096 A:middle
改善你们的增强现实

00:02:15.096 --> 00:02:15.556 A:middle
app

00:02:16.226 --> 00:02:17.376 A:middle
最后 我们会向大家介绍

00:02:17.376 --> 00:02:18.986 A:middle
SKRenderer 这能够让大家

00:02:18.986 --> 00:02:20.206 A:middle
更好地操控 SpriteKit

00:02:20.206 --> 00:02:21.966 A:middle
更新和渲染器

00:02:22.366 --> 00:02:25.116 A:middle
好的 那就让我们一起来

00:02:25.116 --> 00:02:26.726 A:middle
看看如何同时使用

00:02:26.726 --> 00:02:27.726 A:middle
SpriteKit 和 ARKit

00:02:29.986 --> 00:02:30.826 A:middle
但首先 我们应当谈一谈

00:02:30.826 --> 00:02:31.976 A:middle
增强现实究竟是什么

00:02:32.146 --> 00:02:36.486 A:middle
增强现实将现实世界

00:02:36.566 --> 00:02:38.046 A:middle
的视图与计算机渲染

00:02:38.046 --> 00:02:38.856 A:middle
内容相结合

00:02:39.556 --> 00:02:40.586 A:middle
渲染内容与现实世界中的

00:02:40.586 --> 00:02:42.326 A:middle
位置相连接 因此

00:02:42.326 --> 00:02:43.836 A:middle
你们在移动设备的时候

00:02:43.836 --> 00:02:45.336 A:middle
视图会有所变化 但内容

00:02:45.336 --> 00:02:46.696 A:middle
似乎还留在原地

00:02:47.446 --> 00:02:49.606 A:middle
这就使你们可以从不同的

00:02:49.606 --> 00:02:51.546 A:middle
角度来检查内容 就好像这是

00:02:51.546 --> 00:02:52.796 A:middle
你们的设备面前的一个

00:02:52.796 --> 00:02:53.976 A:middle
实质性物体

00:02:54.606 --> 00:02:55.816 A:middle
这需要进行许多

00:02:55.816 --> 00:02:57.226 A:middle
复杂的追踪并且实施起来

00:02:57.226 --> 00:02:58.866 A:middle
是一个真正的挑战

00:03:01.076 --> 00:03:03.316 A:middle
多亏了 ARKit 所有艰巨的

00:03:03.316 --> 00:03:04.136 A:middle
工作都替你们完成了

00:03:04.866 --> 00:03:06.426 A:middle
当你们使用 ARKit 时它会利用

00:03:06.426 --> 00:03:07.276 A:middle
设备的照相机

00:03:07.276 --> 00:03:09.446 A:middle
加速度传感器以及其它硬件设备

00:03:09.636 --> 00:03:11.326 A:middle
来追踪它在现实世界

00:03:11.816 --> 00:03:13.186 A:middle
中的位置和方向

00:03:13.586 --> 00:03:14.826 A:middle
你们只需要给它提供

00:03:14.826 --> 00:03:15.896 A:middle
你们希望在 AR 中出现的

00:03:15.896 --> 00:03:17.906 A:middle
内容 ARKit 就会随着

00:03:17.906 --> 00:03:19.316 A:middle
设备的移动自动

00:03:19.426 --> 00:03:20.646 A:middle
更新内容的相应

00:03:20.646 --> 00:03:21.066 A:middle
定位

00:03:21.956 --> 00:03:23.076 A:middle
如果你们想更深入地了解

00:03:23.076 --> 00:03:24.386 A:middle
这一切究竟是怎么操作的 我

00:03:24.386 --> 00:03:25.356 A:middle
强烈推荐大家去看看

00:03:25.606 --> 00:03:26.856 A:middle
本周初举办的介绍 ARKit

00:03:26.856 --> 00:03:27.886 A:middle
的专题会议

00:03:28.526 --> 00:03:31.796 A:middle
ARKit 可以追踪并

00:03:31.796 --> 00:03:32.686 A:middle
更新内容的位置

00:03:32.686 --> 00:03:33.916 A:middle
通过使用锚点来

00:03:33.916 --> 00:03:34.556 A:middle
实现

00:03:34.736 --> 00:03:35.906 A:middle
正是锚点使得 AR 得以运作

00:03:37.596 --> 00:03:39.306 A:middle
锚点是对现实世界的特征

00:03:39.306 --> 00:03:40.596 A:middle
做出回应的 3D 点

00:03:40.596 --> 00:03:42.076 A:middle
这些特征由 ARKit 通过

00:03:42.356 --> 00:03:43.426 A:middle
观测和理解来检测出的

00:03:43.776 --> 00:03:45.356 A:middle
也就是使用你们的设备照相机

00:03:45.356 --> 00:03:47.456 A:middle
来感知和处理

00:03:47.456 --> 00:03:48.526 A:middle
你们周围的世界

00:03:49.456 --> 00:03:50.616 A:middle
创建锚点十分容易

00:03:51.036 --> 00:03:52.606 A:middle
你们可以通过 API 请求

00:03:52.606 --> 00:03:54.036 A:middle
ARKit 在任意时间检测一个锚点

00:03:54.406 --> 00:03:55.696 A:middle
或者你们可以利用设备的

00:03:55.696 --> 00:03:57.176 A:middle
位置和方位手动创建

00:03:57.176 --> 00:03:57.756 A:middle
一个锚点

00:03:58.086 --> 00:04:01.646 A:middle
那么我们如何让 ARKit 来处理

00:03:58.086 --> 00:04:01.646 A:middle
那么我们如何让 ARKit 来处理

00:04:01.646 --> 00:04:02.506 A:middle
SpriteKit 的内容呢

00:04:03.796 --> 00:04:05.586 A:middle
设计 ARKit 是为了让它直接

00:04:05.586 --> 00:04:06.576 A:middle
与 SpriteKit 交互

00:04:07.286 --> 00:04:08.476 A:middle
ARKit 会要求你们的

00:04:08.546 --> 00:04:09.896 A:middle
SpriteKit 节点

00:04:09.896 --> 00:04:11.336 A:middle
附在锚点上 然后

00:04:11.336 --> 00:04:12.526 A:middle
就会随着设备的移动

00:04:12.836 --> 00:04:14.736 A:middle
自动定位 旋转并缩放

00:04:14.736 --> 00:04:15.556 A:middle
这些节点

00:04:16.426 --> 00:04:17.946 A:middle
这样就使得 SpriteKit

00:04:17.946 --> 00:04:19.536 A:middle
内容始终与锚点

00:04:19.536 --> 00:04:20.805 A:middle
相一致 看起来

00:04:20.836 --> 00:04:22.236 A:middle
就好像这些内容

00:04:22.236 --> 00:04:23.346 A:middle
扎根在现实世界

00:04:24.666 --> 00:04:25.596 A:middle
精灵是渲染出的 因此它们

00:04:25.596 --> 00:04:26.806 A:middle
始终面朝照相机

00:04:26.906 --> 00:04:28.016 A:middle
这样无论你们从哪个角度来

00:04:28.016 --> 00:04:30.246 A:middle
浏览它们 它们都总是面朝着

00:04:30.296 --> 00:04:30.656 A:middle
照相机

00:04:31.436 --> 00:04:32.556 A:middle
这个技术叫做

00:04:32.556 --> 00:04:33.576 A:middle
公告牌技术 通常在

00:04:33.576 --> 00:04:34.766 A:middle
早期的 3D 游戏中使用

00:04:36.466 --> 00:04:37.526 A:middle
大家可能对公告牌技术的

00:04:37.526 --> 00:04:38.726 A:middle
运作并不熟悉 那么就让我们

00:04:38.726 --> 00:04:40.356 A:middle
来快速看几个例子 看看可以

00:04:40.356 --> 00:04:41.676 A:middle
如何使用这项技术 它能让你们

00:04:41.676 --> 00:04:43.166 A:middle
在 3D 空间使用 2D 内容

00:04:44.046 --> 00:04:45.746 A:middle
那么假设 我们在 3D 空间中有

00:04:45.746 --> 00:04:47.186 A:middle
精灵位置还有一个观察

00:04:47.186 --> 00:04:47.686 A:middle
它的照相机

00:04:48.806 --> 00:04:50.316 A:middle
随着照相机离这个精灵

00:04:50.316 --> 00:04:51.446 A:middle
越来越近 这个精灵就变得

00:04:51.446 --> 00:04:53.006 A:middle
更大 你们在视图中可以看到

00:04:53.006 --> 00:04:53.536 A:middle
精灵占据了更大的空间

00:04:54.296 --> 00:04:56.516 A:middle
随着照相机越离越远

00:04:56.516 --> 00:04:57.856 A:middle
这个精灵就缩小了

00:04:58.876 --> 00:04:59.906 A:middle
下面我将旋转这个照相机

00:05:00.576 --> 00:05:03.286 A:middle
尽管照相机变换了

00:05:03.286 --> 00:05:04.596 A:middle
视角 但这个精灵在任何时候都

00:05:04.596 --> 00:05:05.986 A:middle
始终朝向照相机

00:05:06.666 --> 00:05:07.616 A:middle
无论我们从哪个角度去看

00:05:07.616 --> 00:05:08.576 A:middle
这一点都是一样的

00:05:09.546 --> 00:05:10.896 A:middle
这里 让我们在 3D 场景中

00:05:10.896 --> 00:05:11.956 A:middle
增加另一个精灵来看看

00:05:11.956 --> 00:05:13.686 A:middle
这将如何与多个 2D 物体一起运作

00:05:14.186 --> 00:05:17.136 A:middle
离照相机更远的精灵

00:05:17.366 --> 00:05:18.706 A:middle
被渲染在离照相机更近的

00:05:18.706 --> 00:05:19.516 A:middle
精灵之后

00:05:20.236 --> 00:05:22.616 A:middle
随着照相机的移动 离得

00:05:22.616 --> 00:05:24.616 A:middle
更远的精灵进入了视线之中

00:05:26.156 --> 00:05:27.586 A:middle
两个精灵都总是朝向

00:05:27.586 --> 00:05:31.446 A:middle
照相机 这个简单的技术

00:05:31.446 --> 00:05:33.166 A:middle
使得你们的 2D 精灵内容可以

00:05:33.166 --> 00:05:34.466 A:middle
在 3D 空间运作

00:05:35.106 --> 00:05:38.566 A:middle
既然我们已经向大家展示了

00:05:38.696 --> 00:05:39.956 A:middle
ARKit 和 SpriteKit 如何

00:05:39.956 --> 00:05:41.916 A:middle
在概念层面共同协作

00:05:41.956 --> 00:05:43.176 A:middle
下面让我们来谈谈

00:05:43.176 --> 00:05:44.226 A:middle
你们需要在 app 上执行的

00:05:44.506 --> 00:05:45.186 A:middle
实际对象

00:05:45.526 --> 00:05:47.286 A:middle
要同时使用 Arkit 和 SpriteKit

00:05:47.286 --> 00:05:48.566 A:middle
你们需要了解四个

00:05:48.566 --> 00:05:49.246 A:middle
重要的对象 即

00:05:50.116 --> 00:05:51.956 A:middle
ARSession  ARAnchor  ARSKView

00:05:51.956 --> 00:05:54.146 A:middle
以及 ARSKViewDelegate

00:05:54.146 --> 00:05:59.096 A:middle
ARSession 是 ARKit 的核心

00:05:59.096 --> 00:06:00.636 A:middle
它负责处理所有的设备

00:05:59.096 --> 00:06:00.636 A:middle
它负责处理所有的设备

00:06:00.636 --> 00:06:02.426 A:middle
追踪并合理安排

00:06:02.426 --> 00:06:03.856 A:middle
ARKit 与 SpriteKit 之间的

00:06:03.856 --> 00:06:04.336 A:middle
交互

00:06:05.286 --> 00:06:06.696 A:middle
它有方法可以添加并

00:06:06.696 --> 00:06:08.446 A:middle
清除你们在 app 中

00:06:08.446 --> 00:06:08.866 A:middle
所创建的锚点

00:06:09.346 --> 00:06:10.846 A:middle
要开始这个过程 你们只需调用

00:06:10.846 --> 00:06:12.086 A:middle
Run方法 然后 ARSession

00:06:12.086 --> 00:06:13.496 A:middle
便会开始追踪你们的设备

00:06:14.066 --> 00:06:16.376 A:middle
你们只需要向它提供

00:06:16.376 --> 00:06:17.966 A:middle
ARSession 配置 这可以

00:06:17.966 --> 00:06:19.186 A:middle
告诉 ARKit 应该使用

00:06:19.186 --> 00:06:20.586 A:middle
哪种增强现实技术

00:06:21.056 --> 00:06:22.136 A:middle
因此 用 SpriteKit 来操作时

00:06:22.136 --> 00:06:23.396 A:middle
你们只需要使用 AR 世界

00:06:23.396 --> 00:06:24.836 A:middle
追踪配置

00:06:24.836 --> 00:06:25.626 A:middle
这一配置提供了你们需要

00:06:25.626 --> 00:06:27.076 A:middle
ARKit 提供的所有

00:06:27.116 --> 00:06:27.576 A:middle
功能

00:06:27.986 --> 00:06:31.546 A:middle
ARKit 通过 ARAnchor 来定义

00:06:31.546 --> 00:06:33.026 A:middle
现实世界的特征

00:06:33.486 --> 00:06:34.626 A:middle
它代表了现实世界的

00:06:34.626 --> 00:06:35.716 A:middle
一个位置并且包含了

00:06:35.716 --> 00:06:36.786 A:middle
transform 数据以及一个

00:06:36.786 --> 00:06:37.626 A:middle
唯一的标识符

00:06:38.746 --> 00:06:40.596 A:middle
ARKit 将 ARAnchors 映射为

00:06:40.596 --> 00:06:42.186 A:middle
SKNodes 这是我们提供用于

00:06:42.186 --> 00:06:45.586 A:middle
渲染内容的

00:06:45.846 --> 00:06:47.136 A:middle
ARKit 通过 ARSKView 与 SpriteKit

00:06:47.136 --> 00:06:48.926 A:middle
进行交互 ARSKView

00:06:48.926 --> 00:06:50.126 A:middle
来源于 SKView

00:06:51.096 --> 00:06:52.026 A:middle
它创建并包含了

00:06:52.026 --> 00:06:53.346 A:middle
ARSession 这样你们就不需要

00:06:53.346 --> 00:06:54.206 A:middle
手动去进行创建

00:06:54.206 --> 00:06:55.386 A:middle
并且它有方法可以获得

00:06:55.386 --> 00:06:56.656 A:middle
相关的锚点和节点

00:06:56.856 --> 00:06:58.066 A:middle
因此 你们需要手动去追踪

00:06:58.436 --> 00:06:59.706 A:middle
哪个节点对应的是哪个

00:06:59.706 --> 00:07:00.996 A:middle
锚点 反过来也是一样

00:06:59.706 --> 00:07:00.996 A:middle
锚点 反过来也是一样

00:07:01.576 --> 00:07:03.086 A:middle
它同时还有 hitTest 方法

00:07:03.446 --> 00:07:04.936 A:middle
这是你们创建锚点的

00:07:04.936 --> 00:07:05.866 A:middle
主要方式

00:07:06.206 --> 00:07:07.246 A:middle
它需要你们设备屏幕上的

00:07:07.246 --> 00:07:08.736 A:middle
一个点并通过这个点射出

00:07:08.736 --> 00:07:08.916 A:middle
一条线

00:07:09.216 --> 00:07:10.366 A:middle
所以去找找现实世界中离你

00:07:10.366 --> 00:07:12.686 A:middle
最近的那个点 把

00:07:12.686 --> 00:07:15.096 A:middle
物体附在上面

00:07:15.546 --> 00:07:16.286 A:middle
最后 来看看

00:07:16.386 --> 00:07:17.686 A:middle
ARSKViewDelegate

00:07:17.876 --> 00:07:18.966 A:middle
这是来源于 SKViewDelegate

00:07:18.966 --> 00:07:20.916 A:middle
的一个协议 能够帮助你们

00:07:20.916 --> 00:07:22.126 A:middle
对会话控制中添加 更新

00:07:22.466 --> 00:07:23.766 A:middle
以及清除的锚点做出

00:07:23.766 --> 00:07:24.196 A:middle
反应

00:07:25.366 --> 00:07:26.566 A:middle
所有这些方法都是非强制性的

00:07:26.676 --> 00:07:27.596 A:middle
它们是同时使用 SpriteKit

00:07:27.596 --> 00:07:29.156 A:middle
和 ARKit 的关键

00:07:29.156 --> 00:07:32.166 A:middle
但我们一会儿再回到这个

00:07:32.836 --> 00:07:32.936 A:middle
点来

00:07:33.146 --> 00:07:34.256 A:middle
让我们先来用 SpriteKit

00:07:34.256 --> 00:07:36.016 A:middle
创建我们第一个 ARKit

00:07:36.016 --> 00:07:36.476 A:middle
app

00:07:37.496 --> 00:07:39.066 A:middle
首先 我们要在 Xcode 里创建

00:07:39.066 --> 00:07:40.576 A:middle
一个新的 iOS 项目

00:07:41.276 --> 00:07:42.416 A:middle
你们将看到在 Xcode 9 里

00:07:42.496 --> 00:07:43.716 A:middle
有一个新的增强现实 app

00:07:43.716 --> 00:07:47.366 A:middle
模板供你们选择

00:07:47.556 --> 00:07:49.026 A:middle
你们选择了 app 模板之后

00:07:49.336 --> 00:07:50.616 A:middle
要开始使用 SpriteKit

00:07:50.706 --> 00:07:51.676 A:middle
就要选择它作为你们的

00:07:51.676 --> 00:07:52.256 A:middle
内容技术

00:07:52.836 --> 00:07:56.146 A:middle
那么现在全部就已经完成了

00:07:56.186 --> 00:07:57.496 A:middle
现在你们可以准备进入

00:07:57.496 --> 00:07:58.306 A:middle
增强现实世界了

00:07:59.326 --> 00:08:00.586 A:middle
对于 iOS app 来说

00:07:59.326 --> 00:08:00.586 A:middle
对于 iOS app 来说

00:08:00.586 --> 00:08:02.056 A:middle
最后的项目看上去非常标准化

00:08:02.056 --> 00:08:03.316 A:middle
但让我们来看看对于

00:08:03.316 --> 00:08:04.006 A:middle
同时使用 SpriteKit 和 ARKit

00:08:04.006 --> 00:08:05.356 A:middle
十分重要的一些文档

00:08:07.426 --> 00:08:09.016 A:middle
首先是 Scene.sks

00:08:09.056 --> 00:08:11.036 A:middle
这是一个标准化的 SpriteKit

00:08:11.036 --> 00:08:12.276 A:middle
场景 你们在这里创建

00:08:12.276 --> 00:08:13.736 A:middle
和布置你们希望出现在

00:08:13.736 --> 00:08:14.596 A:middle
app 上的所有非 AR

00:08:14.596 --> 00:08:14.826 A:middle
内容

00:08:15.536 --> 00:08:17.106 A:middle
它看上去好像是对 AR

00:08:17.106 --> 00:08:17.976 A:middle
内容的叠加

00:08:17.976 --> 00:08:18.846 A:middle
因此 对于像 HUD 元素

00:08:18.846 --> 00:08:20.346 A:middle
帮助文本以及其它类似的内容

00:08:20.526 --> 00:08:21.086 A:middle
来说是有用的

00:08:22.396 --> 00:08:23.466 A:middle
拥有 Z-position 属性并且等于

00:08:23.466 --> 00:08:24.836 A:middle
或大于 0 的节点将

00:08:24.836 --> 00:08:26.766 A:middle
覆盖在 ARKit 添加到场景中的

00:08:26.766 --> 00:08:28.226 A:middle
所有 AR 内容上面

00:08:29.096 --> 00:08:30.666 A:middle
所有的节点都是由

00:08:30.666 --> 00:08:31.996 A:middle
拥有 Z-position 属性且

00:08:31.996 --> 00:08:33.606 A:middle
小于 0 的 ARKit 管理

00:08:35.356 --> 00:08:37.706 A:middle
接下来 看看 Scene.swift

00:08:38.436 --> 00:08:39.686 A:middle
这是 SpriteKit 场景的一个

00:08:39.726 --> 00:08:40.905 A:middle
相对应的源文件

00:08:41.666 --> 00:08:42.686 A:middle
就像在普通的 SpriteKit app 中那样

00:08:42.686 --> 00:08:44.386 A:middle
你们在这里加入代码来

00:08:44.416 --> 00:08:46.236 A:middle
管理你们的场景 Gameplay

00:08:46.236 --> 00:08:47.386 A:middle
和逻辑 并且这是一个利用

00:08:47.386 --> 00:08:48.876 A:middle
游戏开发工具多种特征的

00:08:48.876 --> 00:08:49.306 A:middle
好地方

00:08:49.986 --> 00:08:53.006 A:middle
最后 让我们来看看

00:08:53.006 --> 00:08:54.306 A:middle
ViewController.swift

00:08:54.806 --> 00:08:56.206 A:middle
视图控制器遵守

00:08:56.206 --> 00:08:58.096 A:middle
ARSKViewDelegate 并且它的

00:08:58.096 --> 00:08:59.206 A:middle
sceneView 属性是

00:08:59.236 --> 00:09:00.906 A:middle
ARSKView 的一个实例 其中

00:08:59.236 --> 00:09:00.906 A:middle
ARSKView 的一个实例 其中

00:09:00.906 --> 00:09:02.206 A:middle
包含 ARSession

00:09:03.226 --> 00:09:04.586 A:middle
视图控制器类是

00:09:04.586 --> 00:09:05.456 A:middle
你们与 ARKit 交互的

00:09:05.456 --> 00:09:06.686 A:middle
主要方式

00:09:07.396 --> 00:09:08.436 A:middle
在模板中 控制器被

00:09:08.436 --> 00:09:10.256 A:middle
自动设置以通过 AR 世界

00:09:10.256 --> 00:09:11.996 A:middle
追踪配置在 ARSession 上

00:09:11.996 --> 00:09:13.366 A:middle
调用 run

00:09:13.716 --> 00:09:14.496 A:middle
这样你们就不需要自行

00:09:14.496 --> 00:09:15.006 A:middle
添加了

00:09:15.776 --> 00:09:16.926 A:middle
这也是你们执行

00:09:16.926 --> 00:09:18.216 A:middle
与你们相关的 ARSKView

00:09:18.316 --> 00:09:19.366 A:middle
代理方法的地方

00:09:19.366 --> 00:09:23.406 A:middle
下面让我们来谈谈

00:09:23.406 --> 00:09:24.996 A:middle
视图控制需要做出

00:09:24.996 --> 00:09:25.876 A:middle
反应的 ARKit 事件

00:09:26.946 --> 00:09:28.546 A:middle
第一个事件就是当新的

00:09:28.546 --> 00:09:30.516 A:middle
锚点被添加到 SKSession 时

00:09:32.006 --> 00:09:33.516 A:middle
出现这种情况时 ARKit 会请求

00:09:33.516 --> 00:09:34.516 A:middle
视图控制器提供你们

00:09:34.516 --> 00:09:35.586 A:middle
希望与锚点相关联的

00:09:35.586 --> 00:09:37.096 A:middle
SpriteKit 节点

00:09:37.636 --> 00:09:39.436 A:middle
那么这时我们就需要创建

00:09:39.436 --> 00:09:39.856 A:middle
AR 内容

00:09:41.766 --> 00:09:42.906 A:middle
第二个事件是

00:09:42.906 --> 00:09:44.876 A:middle
会话控制更新了已有的锚点

00:09:44.876 --> 00:09:45.396 A:middle
之时

00:09:46.516 --> 00:09:47.836 A:middle
当发生这一情况时 ARKit 会通知

00:09:47.836 --> 00:09:49.796 A:middle
视图控制器 那么你们就可以对

00:09:49.796 --> 00:09:50.336 A:middle
更新做出反应

00:09:51.736 --> 00:09:52.926 A:middle
第三个也就是最后一个事件是

00:09:52.926 --> 00:09:54.416 A:middle
当锚点从会话控制中被

00:09:54.416 --> 00:09:54.886 A:middle
移除之时

00:09:56.126 --> 00:09:57.336 A:middle
ARKit 会告知视图控制器

00:09:57.336 --> 00:09:58.526 A:middle
你们就可以对 app 进行

00:09:58.526 --> 00:09:59.696 A:middle
任何必要的清理了

00:10:04.046 --> 00:10:04.896 A:middle
ARSKViewDelegate 提供了

00:10:04.896 --> 00:10:06.016 A:middle
与每一个事件相关联的

00:10:06.016 --> 00:10:06.476 A:middle
方法

00:10:07.226 --> 00:10:08.596 A:middle
我们之前提到过 这些方法中的

00:10:08.596 --> 00:10:10.676 A:middle
每一个都是非强制性的 因此你们

00:10:10.676 --> 00:10:11.786 A:middle
只需执行对你们有用的

00:10:11.786 --> 00:10:12.366 A:middle
那些方法

00:10:12.876 --> 00:10:14.076 A:middle
让我们再回顾一下

00:10:14.776 --> 00:10:18.746 A:middle
首先是锚节点

00:10:18.746 --> 00:10:19.136 A:middle
方法

00:10:20.006 --> 00:10:21.126 A:middle
当新的锚点被添加进控制会话时

00:10:21.126 --> 00:10:22.426 A:middle
就会调用这个方法

00:10:22.426 --> 00:10:24.636 A:middle
ARKit 将这个方法

00:10:24.636 --> 00:10:26.656 A:middle
返回的节点映射为

00:10:26.656 --> 00:10:27.396 A:middle
输入的锚点

00:10:28.326 --> 00:10:29.286 A:middle
如果你们想要为锚点创建

00:10:29.286 --> 00:10:30.946 A:middle
一个自定义节点 那么就应该执行

00:10:30.946 --> 00:10:31.386 A:middle
这个方法

00:10:31.506 --> 00:10:33.266 A:middle
如果不执行这个

00:10:33.266 --> 00:10:35.446 A:middle
方法 那么一个默认的空 SKNode 就会

00:10:35.446 --> 00:10:36.706 A:middle
自动为你们创建

00:10:37.246 --> 00:10:39.196 A:middle
这个方法返回的

00:10:39.196 --> 00:10:40.226 A:middle
节点将被 ARKit 移动

00:10:40.506 --> 00:10:42.576 A:middle
旋转和缩放从而

00:10:42.576 --> 00:10:43.756 A:middle
与锚点相匹配

00:10:44.116 --> 00:10:45.116 A:middle
所以如果你们尝试对 transform

00:10:45.116 --> 00:10:46.676 A:middle
进行任何变动

00:10:46.676 --> 00:10:48.016 A:middle
当设备移动时 这些变动可能

00:10:48.016 --> 00:10:49.166 A:middle
会被 ARKit 复写

00:10:50.116 --> 00:10:50.946 A:middle
分配给这个节点的

00:10:50.976 --> 00:10:51.976 A:middle
任何子节点的 transform 都不会

00:10:51.976 --> 00:10:53.006 A:middle
被修改 知道这一点是

00:10:53.006 --> 00:10:53.946 A:middle
很有用的

00:10:53.996 --> 00:10:55.486 A:middle
我们将在下一个方法中

00:10:55.586 --> 00:10:56.286 A:middle
更多地谈论这点

00:10:57.986 --> 00:10:59.036 A:middle
同时要知道 ARKit

00:10:59.036 --> 00:11:00.336 A:middle
会自动在场景图中

00:10:59.036 --> 00:11:00.336 A:middle
会自动在场景图中

00:11:00.336 --> 00:11:02.046 A:middle
添加节点 这样你们就不需要

00:11:02.666 --> 00:11:04.336 A:middle
自行添加了

00:11:04.576 --> 00:11:06.376 A:middle
接下来 我们介绍 didAdd

00:11:06.376 --> 00:11:06.686 A:middle
锚节点

00:11:06.776 --> 00:11:09.076 A:middle
在 SKNode 映射到锚点之后

00:11:09.076 --> 00:11:10.436 A:middle
可调用这一方法 因此是在

00:11:10.436 --> 00:11:11.916 A:middle
执行了之前的锚节点

00:11:11.916 --> 00:11:13.336 A:middle
方法之后

00:11:14.746 --> 00:11:15.896 A:middle
如果你们执行了锚节点

00:11:15.896 --> 00:11:17.256 A:middle
方法 那么这儿输入的

00:11:17.256 --> 00:11:18.616 A:middle
节点将会是从那儿

00:11:18.616 --> 00:11:20.126 A:middle
返回的那个节点

00:11:20.126 --> 00:11:22.026 A:middle
如果你们没执行这个方法 那么

00:11:22.026 --> 00:11:23.286 A:middle
就会有一个默认的空节点

00:11:23.286 --> 00:11:25.656 A:middle
正如我们在上一张幻灯片

00:11:25.656 --> 00:11:27.176 A:middle
所说的那样 映射到锚点的那个

00:11:27.176 --> 00:11:28.166 A:middle
节点会让变形的 修改后的

00:11:28.166 --> 00:11:30.086 A:middle
ARKit 随着设备的移动

00:11:30.086 --> 00:11:31.396 A:middle
紧跟着那个锚点

00:11:32.336 --> 00:11:33.686 A:middle
这样的话 如果你们想要修改

00:11:33.686 --> 00:11:34.986 A:middle
内容的 transform

00:11:34.986 --> 00:11:36.326 A:middle
你们就应该在此处将它们作为子节点

00:11:36.326 --> 00:11:39.116 A:middle
添加 因为 ARKit 不会对它们

00:11:41.496 --> 00:11:41.716 A:middle
进行修改

00:11:42.076 --> 00:11:43.446 A:middle
接下来 看看 willUpdate

00:11:43.446 --> 00:11:44.866 A:middle
锚节点以及 didUpdtae 锚

00:11:44.866 --> 00:11:45.166 A:middle
节点

00:11:46.116 --> 00:11:47.366 A:middle
这两个方法是在节点更新了

00:11:47.366 --> 00:11:48.846 A:middle
给定的锚点数据之前

00:11:48.906 --> 00:11:49.946 A:middle
以及之后来调用

00:11:51.056 --> 00:11:52.316 A:middle
正如它们的名字所显示的那样

00:11:52.316 --> 00:11:53.426 A:middle
willUpdate 锚节点在更新

00:11:53.426 --> 00:11:55.016 A:middle
之前调用 而 didUpdate 锚

00:11:55.066 --> 00:11:56.116 A:middle
节点则是在更新之后

00:11:56.116 --> 00:11:56.486 A:middle
调用

00:11:57.396 --> 00:11:58.246 A:middle
当设备移动以及视图变化时

00:11:58.246 --> 00:11:59.736 A:middle
会发生这一情况

00:12:00.816 --> 00:12:01.996 A:middle
这些节点的位置 旋转以及

00:12:01.996 --> 00:12:03.046 A:middle
或者缩放取决于

00:12:03.046 --> 00:12:04.556 A:middle
调用这些方法之间存在的

00:12:04.556 --> 00:12:04.916 A:middle
变化

00:12:06.156 --> 00:12:09.986 A:middle
最后 来看看 didRemove 锚

00:12:09.986 --> 00:12:10.326 A:middle
节点

00:12:11.196 --> 00:12:12.316 A:middle
调用这个锚节点是在节点

00:12:12.316 --> 00:12:13.496 A:middle
从场景图中清除时

00:12:13.976 --> 00:12:15.496 A:middle
当锚点的轨迹从 ARSession

00:12:15.496 --> 00:12:16.796 A:middle
被清除时会发生这一

00:12:16.796 --> 00:12:17.336 A:middle
情况

00:12:18.756 --> 00:12:19.826 A:middle
好了 以上便是

00:12:19.826 --> 00:12:21.336 A:middle
关于 API 的重要内容

00:12:21.336 --> 00:12:23.766 A:middle
下面让我们来看看代码吧

00:12:23.996 --> 00:12:24.826 A:middle
让我们来谈一谈创建

00:12:24.826 --> 00:12:25.186 A:middle
锚点

00:12:25.556 --> 00:12:27.206 A:middle
这里 我们来看看 touchesBegan

00:12:27.206 --> 00:12:28.286 A:middle
事件的处理器

00:12:28.956 --> 00:12:33.216 A:middle
当设备报告了一个 touch

00:12:33.216 --> 00:12:34.516 A:middle
我们在 ARSKView 中就能获得

00:12:34.586 --> 00:12:35.936 A:middle
touch 的位置

00:12:36.626 --> 00:12:39.946 A:middle
然后我们把 touch 的位置

00:12:39.946 --> 00:12:42.556 A:middle
提供给 ARSKView 的 hitTest

00:12:42.556 --> 00:12:44.376 A:middle
方法 这个方法会向现实世界

00:12:44.376 --> 00:12:45.896 A:middle
射出一道光线来寻找

00:12:45.896 --> 00:12:47.126 A:middle
我们可以将之变为锚点的

00:12:47.126 --> 00:12:48.346 A:middle
特征点

00:12:49.366 --> 00:12:50.626 A:middle
它会按从近到远的顺序

00:12:50.626 --> 00:12:52.316 A:middle
返回一道由所有的 hits

00:12:52.316 --> 00:12:53.686 A:middle
组成的光线

00:12:53.686 --> 00:12:58.626 A:middle
我们看到最近的这个 hit 然后

00:12:58.626 --> 00:13:00.006 A:middle
使用这个 worldTransform

00:12:58.626 --> 00:13:00.006 A:middle
使用这个 worldTransform

00:13:00.006 --> 00:13:02.056 A:middle
来创建一个 ARAnchor 然后我们

00:13:02.056 --> 00:13:02.896 A:middle
再添加到会话控制中

00:13:02.896 --> 00:13:05.606 A:middle
这就是全部内容了

00:13:05.606 --> 00:13:06.786 A:middle
创建锚点简直简单到

00:13:06.786 --> 00:13:07.186 A:middle
不行

00:13:07.316 --> 00:13:12.246 A:middle
那么既然我们已经在会话控制中

00:13:12.246 --> 00:13:13.506 A:middle
添加了新的锚点 会话

00:13:13.506 --> 00:13:14.436 A:middle
控制将请求视图

00:13:14.436 --> 00:13:15.606 A:middle
控制器提供给我们

00:13:15.606 --> 00:13:16.616 A:middle
想要附在上面的 SpriteKit

00:13:16.616 --> 00:13:17.726 A:middle
内容

00:13:19.116 --> 00:13:21.386 A:middle
要做到这一点 我们要执行

00:13:21.386 --> 00:13:22.996 A:middle
ARSKView 代理 didAdd

00:13:22.996 --> 00:13:23.766 A:middle
锚节点方法

00:13:24.646 --> 00:13:26.066 A:middle
我们还没有执行锚

00:13:26.066 --> 00:13:27.556 A:middle
节点 因此就为我们创建了一个

00:13:27.556 --> 00:13:28.746 A:middle
默认的空节点

00:13:28.986 --> 00:13:29.686 A:middle
这就是传递到

00:13:29.926 --> 00:13:30.606 A:middle
这一方法的内容

00:13:33.406 --> 00:13:34.476 A:middle
那么现在我们只需要

00:13:34.476 --> 00:13:35.426 A:middle
创建我们想要附在锚点

00:13:35.426 --> 00:13:37.756 A:middle
上面的内容 然后再

00:13:38.816 --> 00:13:40.546 A:middle
把它作为输入这个方法的节点的

00:13:40.546 --> 00:13:41.586 A:middle
子节点添加进去

00:13:42.586 --> 00:13:43.846 A:middle
ARKit 会自动更新

00:13:43.846 --> 00:13:45.236 A:middle
这一节点使之在设备

00:13:45.236 --> 00:13:46.586 A:middle
移动时跟随着这个锚点

00:13:46.876 --> 00:13:47.816 A:middle
这样你们就不需要再做任何

00:13:47.816 --> 00:13:48.186 A:middle
别的事了

00:13:48.186 --> 00:13:52.146 A:middle
那么既然我们已经向大家展示了

00:13:52.146 --> 00:13:53.816 A:middle
如何通过 SpriteKit 来使用

00:13:53.816 --> 00:13:55.196 A:middle
ARKit API 就让我们进入

00:13:55.196 --> 00:13:57.266 A:middle
增强现实的内容

00:13:58.516 --> 00:14:07.546 A:middle
[掌声]

00:13:58.516 --> 00:14:07.546 A:middle
[掌声]

00:14:08.046 --> 00:14:10.936 A:middle
我们先来打开这里的 app

00:14:11.126 --> 00:14:12.446 A:middle
我们可以看到我们现在正在

00:14:12.446 --> 00:14:13.266 A:middle
进行视频透传

00:14:13.266 --> 00:14:15.196 A:middle
我们可以在屏幕上看到我们

00:14:15.196 --> 00:14:15.656 A:middle
可爱的观众

00:14:15.986 --> 00:14:17.046 A:middle
你们现在可都是名人啦

00:14:18.046 --> 00:14:19.456 A:middle
下面让我们在增强现实中

00:14:19.456 --> 00:14:20.956 A:middle
放入一些内容

00:14:21.546 --> 00:14:23.786 A:middle
我在点击屏幕的同时

00:14:24.596 --> 00:14:28.276 A:middle
我把内容放在了离我也就半米远

00:14:28.276 --> 00:14:29.196 A:middle
的面前

00:14:29.716 --> 00:14:30.636 A:middle
在这里 我刚用表情符号

00:14:30.826 --> 00:14:32.856 A:middle
添加了 SKLabelNode

00:14:33.006 --> 00:14:34.896 A:middle
有趣的是 你们可以仅通过使用

00:14:34.896 --> 00:14:35.786 A:middle
标签来使用 SpriteKit app

00:14:35.786 --> 00:14:36.446 A:middle
里的表情符号

00:14:36.556 --> 00:14:37.416 A:middle
只需把它们粘贴到这里

00:14:37.416 --> 00:14:39.446 A:middle
你们可以看到它们现在都

00:14:39.576 --> 00:14:40.886 A:middle
悬浮在 3D 空间中

00:14:40.886 --> 00:14:43.786 A:middle
当我四处移动照相机的时候

00:14:45.536 --> 00:14:46.796 A:middle
它们也移动 但相对位置

00:14:46.796 --> 00:14:47.136 A:middle
不变

00:14:47.716 --> 00:14:50.196 A:middle
只是把它们放在空间里

00:14:50.196 --> 00:14:50.936 A:middle
没什么意思

00:14:50.936 --> 00:14:52.926 A:middle
我也可以把它们放在

00:14:52.926 --> 00:14:53.506 A:middle
平面上

00:14:54.746 --> 00:14:57.426 A:middle
它会检测与平面

00:14:57.426 --> 00:14:59.756 A:middle
的交集 通过使用我们

00:14:59.756 --> 00:15:00.656 A:middle
刚刚谈到的 HitTest

00:14:59.756 --> 00:15:00.656 A:middle
刚刚谈到的 HitTest

00:15:00.656 --> 00:15:01.566 A:middle
方法来检测

00:15:01.566 --> 00:15:06.276 A:middle
然后它会在检测到的

00:15:06.276 --> 00:15:07.526 A:middle
桌子平面上放入

00:15:07.526 --> 00:15:08.026 A:middle
表情符号

00:15:08.666 --> 00:15:10.636 A:middle
但放置表情符号也

00:15:10.636 --> 00:15:11.786 A:middle
没什么意思

00:15:12.086 --> 00:15:13.296 A:middle
因此现在我们要转换成

00:15:13.296 --> 00:15:16.676 A:middle
爆炸模式 然后我们就

00:15:16.676 --> 00:15:18.636 A:middle
可以让我们的表情符号爆炸 这样

00:15:19.166 --> 00:15:20.296 A:middle
才稍微有点意思

00:15:21.486 --> 00:15:23.546 A:middle
同时 我们要注意我们

00:15:23.546 --> 00:15:25.216 A:middle
此处左下角的文本

00:15:25.216 --> 00:15:27.786 A:middle
以及我们在摧毁表情符号时

00:15:27.786 --> 00:15:31.146 A:middle
这些表情翻转的

00:15:31.146 --> 00:15:32.646 A:middle
方式 因为这一点

00:15:32.726 --> 00:15:33.816 A:middle
过一会儿会变得

00:15:33.816 --> 00:15:34.166 A:middle
有意义

00:15:34.926 --> 00:15:37.256 A:middle
所以你们可以看到要快速创建

00:15:37.256 --> 00:15:41.156 A:middle
一个 app 并使用 SpriteKit

00:15:41.156 --> 00:15:43.346 A:middle
内容来进入增强现实

00:15:43.346 --> 00:15:44.056 A:middle
是多么容易

00:15:44.266 --> 00:15:45.386 A:middle
这只是大家现在可以使用

00:15:45.386 --> 00:15:47.736 A:middle
Xcode 9 创建的 app

00:15:47.736 --> 00:15:49.416 A:middle
模板稍微调整后的一个

00:15:49.416 --> 00:15:50.066 A:middle
版本

00:15:51.236 --> 00:15:53.526 A:middle
这就是拥有 ARKit 的 SpriteKit

00:15:54.516 --> 00:15:58.696 A:middle
[掌声]

00:15:59.196 --> 00:16:00.316 A:middle
那么大家可以看到当把

00:15:59.196 --> 00:16:00.316 A:middle
那么大家可以看到当把

00:16:00.316 --> 00:16:01.316 A:middle
ARKit 和 SpriteKit 结合起来使用

00:16:01.316 --> 00:16:02.546 A:middle
的时候 进入增强现实是

00:16:02.546 --> 00:16:02.936 A:middle
多么容易

00:16:03.746 --> 00:16:04.816 A:middle
我之前提到过 我们还有

00:16:04.816 --> 00:16:06.016 A:middle
一些其它的 SpriteKit

00:16:06.016 --> 00:16:06.946 A:middle
功能 其中一些在我刚刚

00:16:06.946 --> 00:16:07.926 A:middle
进行的快速演示中

00:16:07.926 --> 00:16:08.716 A:middle
出现过了

00:16:10.056 --> 00:16:11.996 A:middle
所以希望大家有注意到

00:16:11.996 --> 00:16:13.156 A:middle
在演示 app 动画里

00:16:13.156 --> 00:16:14.316 A:middle
屏幕下方的文本

00:16:14.756 --> 00:16:15.936 A:middle
这是通过一个单一的

00:16:15.986 --> 00:16:17.306 A:middle
SKLabelNode 实现的 这是

00:16:17.306 --> 00:16:18.586 A:middle
因为它们现在支持属性

00:16:18.586 --> 00:16:19.026 A:middle
字串符

00:16:20.146 --> 00:16:21.096 A:middle
属性字串符使大家可以

00:16:21.096 --> 00:16:23.376 A:middle
指定字符串中每一个字符

00:16:23.376 --> 00:16:25.026 A:middle
的属性 这样大家就可以

00:16:25.026 --> 00:16:26.206 A:middle
把不同的颜色和字体

00:16:26.206 --> 00:16:27.946 A:middle
混合在同一个

00:16:27.946 --> 00:16:28.326 A:middle
标签中

00:16:28.326 --> 00:16:30.856 A:middle
它使用了 NSAttributedString

00:16:30.856 --> 00:16:31.976 A:middle
你们唯一需要做的就是

00:16:31.976 --> 00:16:34.226 A:middle
设置 SKLabelNodes 新的 attributedText

00:16:34.226 --> 00:16:34.666 A:middle
属性

00:16:36.996 --> 00:16:38.816 A:middle
在我们的增强现实

00:16:38.816 --> 00:16:40.026 A:middle
app 里的表情符号直到现在

00:16:40.026 --> 00:16:41.276 A:middle
才可以以不可思议的方式旋转

00:16:41.276 --> 00:16:42.316 A:middle
这都要归功于新的

00:16:42.316 --> 00:16:43.096 A:middle
SKTransformNode

00:16:44.556 --> 00:16:46.886 A:middle
SKNode 已经具备了 Z 旋转的能力

00:16:47.746 --> 00:16:49.176 A:middle
但是 SKTransformNode 为大家

00:16:49.176 --> 00:16:50.436 A:middle
新增了围绕 X 轴和 Y 轴

00:16:50.436 --> 00:16:52.326 A:middle
旋转的能力

00:16:53.096 --> 00:16:54.646 A:middle
使得 SpriteKit 内容可以进行

00:16:54.646 --> 00:16:55.706 A:middle
全 3D 旋转

00:16:56.526 --> 00:16:58.116 A:middle
这些旋转也同样适用于

00:16:58.116 --> 00:16:59.006 A:middle
所有的子节点

00:17:00.006 --> 00:17:01.736 A:middle
SKTransformNode 使用了

00:17:01.736 --> 00:17:02.956 A:middle
正交投影

00:17:03.256 --> 00:17:04.205 A:middle
因此没有对你们的

00:17:04.266 --> 00:17:05.316 A:middle
节点进行任何透视

00:17:05.316 --> 00:17:05.846 A:middle
倾斜

00:17:06.736 --> 00:17:08.156 A:middle
你们可以通过 X Y 以及 Z

00:17:08.156 --> 00:17:10.106 A:middle
旋转属性来指定你们的

00:17:10.106 --> 00:17:11.705 A:middle
旋转 或者你们可以使用

00:17:11.705 --> 00:17:12.866 A:middle
专门的 getter 和 setter 函数来

00:17:12.866 --> 00:17:14.606 A:middle
获得欧拉角 旋转矩阵

00:17:14.806 --> 00:17:18.185 A:middle
和四元数

00:17:18.616 --> 00:17:19.636 A:middle
最后 在终端的部分

00:17:19.675 --> 00:17:20.856 A:middle
SpriteKit 与 Xcode 的

00:17:20.856 --> 00:17:22.766 A:middle
视图调试器完全

00:17:22.766 --> 00:17:23.205 A:middle
兼容

00:17:24.175 --> 00:17:25.415 A:middle
它显示了整个场景

00:17:25.415 --> 00:17:26.796 A:middle
图并给大家提供了整洁的

00:17:26.796 --> 00:17:28.476 A:middle
场景 3D 爆炸视图

00:17:28.806 --> 00:17:29.926 A:middle
这能够提供极大的帮助 当

00:17:29.926 --> 00:17:31.676 A:middle
你们想要去调试排版

00:17:31.676 --> 00:17:33.176 A:middle
内容排版的问题时

00:17:33.416 --> 00:17:34.726 A:middle
这同时也让大家可以检查

00:17:34.726 --> 00:17:35.946 A:middle
所有的节点属性 这样

00:17:36.286 --> 00:17:37.096 A:middle
在 app 暂停的那一个瞬间

00:17:37.096 --> 00:17:38.026 A:middle
你们就可以看到场景中的

00:17:38.026 --> 00:17:39.216 A:middle
所有事物的状态

00:17:39.556 --> 00:17:40.836 A:middle
这真的是一个非常棒的

00:17:40.836 --> 00:17:41.816 A:middle
新功能 所有请大家去看看

00:17:41.816 --> 00:17:43.136 A:middle
Xcode 9 会议关于调试的内容

00:17:43.136 --> 00:17:44.726 A:middle
以了解更多信息

00:17:46.356 --> 00:17:48.116 A:middle
我们已经给大家展示了使用

00:17:48.116 --> 00:17:49.976 A:middle
ARKit 以及 SpriteKit 来

00:17:49.976 --> 00:17:51.736 A:middle
创建增强现实的 app

00:17:51.736 --> 00:17:53.256 A:middle
是多么快速和便捷

00:17:54.206 --> 00:17:55.586 A:middle
ARKit 为大家处理了

00:17:55.586 --> 00:17:56.916 A:middle
增强现实中所有困难的

00:17:56.916 --> 00:17:58.636 A:middle
部分 而 SpriteKit 则让

00:17:58.636 --> 00:17:59.916 A:middle
渲染内容变成小菜一碟

00:18:01.606 --> 00:18:02.396 A:middle
我们还介绍了

00:18:02.396 --> 00:18:03.566 A:middle
SpriteKit 的新功能 为大家

00:18:03.566 --> 00:18:04.716 A:middle
提供了更大的灵活性来

00:18:04.716 --> 00:18:05.906 A:middle
开发 app 并给大家

00:18:05.906 --> 00:18:07.206 A:middle
提供调试 SpriteKit 内容的

00:18:07.206 --> 00:18:08.036 A:middle
新选项

00:18:08.726 --> 00:18:12.116 A:middle
但可能大家还有一些遗留的

00:18:12.116 --> 00:18:12.786 A:middle
问题

00:18:13.196 --> 00:18:14.036 A:middle
如果我们并不想要

00:18:14.036 --> 00:18:15.066 A:middle
公告牌精灵呢

00:18:15.636 --> 00:18:16.736 A:middle
如果我们希望通过透视

00:18:16.736 --> 00:18:17.636 A:middle
来使我们的 SpriteKit 内容

00:18:17.636 --> 00:18:18.156 A:middle
生效呢

00:18:18.156 --> 00:18:21.886 A:middle
如果我们想在增强现实中把

00:18:22.126 --> 00:18:23.596 A:middle
2D 和 3D 的内容混在一起呢

00:18:24.286 --> 00:18:26.236 A:middle
如果我们想把 SpriteKit 带入

00:18:26.236 --> 00:18:27.216 A:middle
3D 世界呢

00:18:29.056 --> 00:18:31.186 A:middle
答案就是要把

00:18:31.186 --> 00:18:33.236 A:middle
SceneKit  SpriteKit 以及 ARKit 这三者

00:18:33.536 --> 00:18:36.206 A:middle
全部结合起来

00:18:36.736 --> 00:18:38.286 A:middle
SceneKit 是 SpriteKit 的 3D

00:18:38.286 --> 00:18:40.046 A:middle
版本 这是已经可以使用的

00:18:40.076 --> 00:18:41.626 A:middle
带有自己的 Xcode 集成现场

00:18:41.626 --> 00:18:42.866 A:middle
编辑器的 3D引擎

00:18:43.866 --> 00:18:44.956 A:middle
大家可能还有所不知的是

00:18:44.956 --> 00:18:47.576 A:middle
你们可以使用 SpriteKit 场景

00:18:47.576 --> 00:18:49.296 A:middle
作为 SceneKit 中几何图形的

00:18:49.296 --> 00:18:49.876 A:middle
材料

00:18:50.796 --> 00:18:51.556 A:middle
这使得你们可以用复杂的

00:18:51.556 --> 00:18:53.326 A:middle
3D 变换和透视效果

00:18:53.326 --> 00:18:54.936 A:middle
来渲染 SpriteKit

00:18:54.936 --> 00:18:55.276 A:middle
内容

00:18:56.306 --> 00:18:57.726 A:middle
此外 你们可以轻松地将

00:18:57.726 --> 00:18:59.506 A:middle
2D 的 SpriteKit 内容与 3D 的

00:18:59.936 --> 00:19:04.176 A:middle
ScenenKit 内容混合在同样的

00:18:59.936 --> 00:19:04.176 A:middle
ScenenKit 内容混合在同样的

00:19:04.256 --> 00:19:04.506 A:middle
背景中

00:19:04.936 --> 00:19:06.326 A:middle
就像 SpriteKit 那样 SceneKit

00:19:06.326 --> 00:19:08.476 A:middle
也同样与 ARKit 相结合在

00:19:08.476 --> 00:19:10.456 A:middle
增强现实 app 中

00:19:10.456 --> 00:19:12.286 A:middle
使用 SceneKit 创建一个项目 这跟

00:19:12.286 --> 00:19:13.346 A:middle
SpriteKit 是一样的

00:19:14.296 --> 00:19:15.376 A:middle
只是把内容技术

00:19:15.376 --> 00:19:16.696 A:middle
改成 SceneKit 就可以了

00:19:17.146 --> 00:19:21.386 A:middle
这个 API 的设计与大家在

00:19:21.386 --> 00:19:22.436 A:middle
SpriteKit 中所使用的 API

00:19:22.436 --> 00:19:22.906 A:middle
非常类似

00:19:23.196 --> 00:19:24.836 A:middle
仅有少数几个对象的名称

00:19:25.456 --> 00:19:27.496 A:middle
有所不同

00:19:27.496 --> 00:19:30.226 A:middle
ARSKView 变成了 ARSCNView 而

00:19:30.226 --> 00:19:31.726 A:middle
ARSKViewDelegate 变成了

00:19:31.786 --> 00:19:32.936 A:middle
ARSCNViewDelegate

00:19:33.856 --> 00:19:34.866 A:middle
在 SpriteKit 中 模板会为

00:19:34.896 --> 00:19:37.026 A:middle
大家创建 ARSCNView 同时

00:19:37.026 --> 00:19:38.606 A:middle
视图控制器遵守

00:19:38.606 --> 00:19:39.636 A:middle
ARSCNViewDelegate

00:19:40.376 --> 00:19:41.596 A:middle
现在 为了节约时间

00:19:41.596 --> 00:19:42.456 A:middle
也因为 API 非常类似

00:19:42.456 --> 00:19:43.416 A:middle
所以在这里我们就不再

00:19:43.416 --> 00:19:44.186 A:middle
介绍剩余的内容了

00:19:44.886 --> 00:19:48.356 A:middle
那么下面 我们想在 SceneKit

00:19:48.356 --> 00:19:49.596 A:middle
的场景中渲染

00:19:49.596 --> 00:19:50.656 A:middle
SpriteKit 的内容

00:19:51.596 --> 00:19:53.226 A:middle
通常 在 SpriteKit 中 你们有

00:19:53.226 --> 00:19:54.816 A:middle
场景并且你们把它设置在

00:19:54.816 --> 00:19:55.296 A:middle
SKView 上

00:19:56.256 --> 00:19:58.406 A:middle
然后 SKView 与 UIKit 或

00:19:58.406 --> 00:20:00.386 A:middle
Mac OS 的 AppKit 共同把你们的

00:19:58.406 --> 00:20:00.386 A:middle
Mac OS 的 AppKit 共同把你们的

00:20:00.386 --> 00:20:03.236 A:middle
内容放到屏幕上

00:20:04.046 --> 00:20:04.886 A:middle
为了使你们的内容在 SceneKit

00:20:05.036 --> 00:20:06.336 A:middle
里渲染 处理的方式

00:20:06.336 --> 00:20:07.076 A:middle
略有不同

00:20:07.726 --> 00:20:08.856 A:middle
现在不用将场景设置在

00:20:08.856 --> 00:20:10.406 A:middle
视图上 而是设置在

00:20:10.406 --> 00:20:11.986 A:middle
你们希望出现 SpriteKit

00:20:11.986 --> 00:20:13.056 A:middle
内容的几何图形的

00:20:13.056 --> 00:20:14.906 A:middle
材料属性上

00:20:14.906 --> 00:20:17.336 A:middle
然后这个材料与 SceneKit

00:20:17.336 --> 00:20:18.786 A:middle
一起来渲染

00:20:18.786 --> 00:20:20.346 A:middle
SpriteKit 的内容 然后

00:20:20.346 --> 00:20:22.026 A:middle
纹理将之映射在

00:20:22.116 --> 00:20:23.276 A:middle
与材料相关联的几何图形中

00:20:23.456 --> 00:20:27.566 A:middle
下面 让我们来看几个

00:20:27.566 --> 00:20:29.086 A:middle
在 SceneKit 几何图形中渲染

00:20:29.206 --> 00:20:30.426 A:middle
SpriteKit 内容的例子

00:20:31.306 --> 00:20:32.856 A:middle
这里 我们有一个基本的 SpriteKit

00:20:32.856 --> 00:20:33.226 A:middle
场景

00:20:33.826 --> 00:20:35.866 A:middle
那么这个就是当我们在 SceneKit

00:20:35.866 --> 00:20:37.426 A:middle
的平面渲染这个场景

00:20:37.426 --> 00:20:39.226 A:middle
时会看到的

00:20:40.996 --> 00:20:42.606 A:middle
我们还可以把 SpriteKit 的

00:20:42.606 --> 00:20:45.366 A:middle
场景应用到立方体甚至是

00:20:45.366 --> 00:20:45.766 A:middle
球体中

00:20:45.856 --> 00:20:47.286 A:middle
你们可以把它当成

00:20:47.286 --> 00:20:48.756 A:middle
普通纹理那样来使用

00:20:48.756 --> 00:20:49.906 A:middle
而 SpriteKit 随着 SpriteKit

00:20:49.906 --> 00:20:51.416 A:middle
场景的更新 你们的纹理会

00:20:51.416 --> 00:20:52.906 A:middle
随之一同更新

00:20:54.536 --> 00:20:56.226 A:middle
那么现在 我想快速地向大家

00:20:56.226 --> 00:20:57.476 A:middle
展示用 SceneKit 来使用

00:20:57.476 --> 00:20:58.856 A:middle
SpriteKit 是多么容易

00:21:00.986 --> 00:21:03.056 A:middle
首先 在 SceneKit 中获取

00:21:03.056 --> 00:21:04.316 A:middle
一个你们想要使用的

00:21:04.316 --> 00:21:04.766 A:middle
SpriteKit 场景

00:21:05.366 --> 00:21:08.766 A:middle
接下来 创建你们想要

00:21:08.766 --> 00:21:09.856 A:middle
用来渲染 SpriteKit 场景的

00:21:09.856 --> 00:21:10.356 A:middle
几何图形

00:21:11.086 --> 00:21:12.246 A:middle
这里我们创建了一个简单的

00:21:12.246 --> 00:21:12.686 A:middle
平面

00:21:14.416 --> 00:21:16.466 A:middle
然后你们只需要把 SpriteKit

00:21:16.466 --> 00:21:17.996 A:middle
场景设置为平面

00:21:17.996 --> 00:21:19.556 A:middle
材料中漫反射属性的

00:21:19.556 --> 00:21:20.386 A:middle
内容

00:21:21.356 --> 00:21:22.726 A:middle
这会导致 SceneKit 将

00:21:22.726 --> 00:21:23.766 A:middle
SpriteKit 的场景渲染成一个

00:21:23.766 --> 00:21:25.496 A:middle
纹理然后再把它应用到

00:21:25.496 --> 00:21:25.996 A:middle
几何图形上

00:21:25.996 --> 00:21:30.686 A:middle
在这儿我们把材料

00:21:30.686 --> 00:21:31.796 A:middle
设置成双面的

00:21:32.286 --> 00:21:33.416 A:middle
这就使得 SpriteKit 的场景

00:21:33.416 --> 00:21:34.756 A:middle
在平面的两侧

00:21:34.756 --> 00:21:35.156 A:middle
同时出现

00:21:35.786 --> 00:21:38.826 A:middle
接下来我们就只需为这个平面

00:21:38.866 --> 00:21:40.196 A:middle
创建一个 SceneKit 节点 然后

00:21:40.196 --> 00:21:44.146 A:middle
把它添加到 SceneKit 场景中

00:21:44.696 --> 00:21:45.606 A:middle
现在这个平面将出现在

00:21:45.606 --> 00:21:46.716 A:middle
这个场景中并带有你们

00:21:46.716 --> 00:21:48.156 A:middle
在上面映射的 SpriteKit 场景

00:21:48.156 --> 00:21:49.746 A:middle
纹理的内容

00:21:51.236 --> 00:21:53.176 A:middle
那么下面我想给大家做一个演示

00:21:53.176 --> 00:21:54.226 A:middle
看看你们在使用 SpriteKit 和

00:21:54.226 --> 00:21:55.256 A:middle
SceneKit 时结合 ARKit

00:21:55.256 --> 00:21:56.746 A:middle
可以做些什么

00:21:58.516 --> 00:22:08.036 A:middle
[掌声]

00:21:58.516 --> 00:22:08.036 A:middle
[掌声]

00:22:08.536 --> 00:22:08.926 A:middle
好的

00:22:11.216 --> 00:22:13.476 A:middle
在这里我有一个在 ARKit

00:22:13.476 --> 00:22:16.546 A:middle
发布的样本代码基础上

00:22:16.546 --> 00:22:18.036 A:middle
建立的演示

00:22:18.036 --> 00:22:19.286 A:middle
你们可以在关于这一内容的

00:22:19.286 --> 00:22:19.766 A:middle
网站上找到

00:22:19.766 --> 00:22:23.006 A:middle
那么现在我在检测

00:22:23.006 --> 00:22:23.896 A:middle
一个平面

00:22:24.406 --> 00:22:27.116 A:middle
如果我点击屏幕

00:22:27.116 --> 00:22:29.696 A:middle
那么它就会在这里的世界

00:22:29.696 --> 00:22:30.416 A:middle
为我们创建一个 SpriteKit 场景

00:22:30.576 --> 00:22:32.666 A:middle
你们可以看到这是一个全

00:22:32.666 --> 00:22:34.166 A:middle
动态的 SpriteKit 场景

00:22:34.166 --> 00:22:35.926 A:middle
你们可以看到这些树在活动

00:22:36.346 --> 00:22:38.936 A:middle
事实上 我可以直接

00:22:38.936 --> 00:22:40.286 A:middle
跟它进行交互

00:22:40.326 --> 00:22:41.796 A:middle
让我们真正地来

00:22:41.796 --> 00:22:44.346 A:middle
让我们稍微放大一点

00:22:44.346 --> 00:22:45.756 A:middle
由于我们处在 3D 空间中 我们可以

00:22:45.756 --> 00:22:46.536 A:middle
做所有酷炫的事情

00:22:46.536 --> 00:22:48.316 A:middle
我们可以把它移来移去 我们

00:22:48.696 --> 00:22:51.286 A:middle
可以旋转 我们还可以缩放

00:22:51.286 --> 00:22:53.216 A:middle
把它稍微变大点

00:22:54.056 --> 00:22:55.786 A:middle
所以现在我可以直接同

00:22:55.786 --> 00:22:56.726 A:middle
这个场景交互了

00:22:56.726 --> 00:22:58.686 A:middle
我可以控制这儿的

00:22:58.686 --> 00:23:00.986 A:middle
设备 我可以移动我的

00:22:58.686 --> 00:23:00.986 A:middle
设备 我可以移动我的

00:23:00.986 --> 00:23:03.166 A:middle
这个小人 让它四处跳动

00:23:04.476 --> 00:23:06.336 A:middle
跳过它还有点难呢

00:23:06.696 --> 00:23:07.816 A:middle
好了 我们可以四处跳动

00:23:07.816 --> 00:23:09.576 A:middle
与它进行实时的交互

00:23:09.576 --> 00:23:10.716 A:middle
就跟普通的在 3D 中渲染的

00:23:10.716 --> 00:23:12.996 A:middle
SpriteKi 场景一样

00:23:13.856 --> 00:23:15.236 A:middle
但只是让它呆在

00:23:15.236 --> 00:23:16.886 A:middle
平面上没什么意思

00:23:17.086 --> 00:23:17.986 A:middle
我们应该做些稍微更

00:23:17.986 --> 00:23:19.076 A:middle
有趣的事情 让它更

00:23:19.076 --> 00:23:19.936 A:middle
3D 一点

00:23:20.336 --> 00:23:21.466 A:middle
所以如果我点击这里的

00:23:21.466 --> 00:23:24.046 A:middle
按钮 这个场景就会向上

00:23:24.046 --> 00:23:26.396 A:middle
弹起

00:23:27.516 --> 00:23:30.576 A:middle
[掌声]

00:23:31.076 --> 00:23:32.946 A:middle
如果我再点击一下 它就会

00:23:32.946 --> 00:23:34.146 A:middle
在这里分出不同的

00:23:34.146 --> 00:23:34.436 A:middle
几层

00:23:34.436 --> 00:23:35.566 A:middle
因此我们实际上不止有

00:23:35.606 --> 00:23:36.706 A:middle
一个 SpriteKit 场景

00:23:37.516 --> 00:23:40.546 A:middle
[掌声]

00:23:41.046 --> 00:23:41.706 A:middle
在这里我们实际上有三个

00:23:41.706 --> 00:23:42.706 A:middle
SpriteKit 场景 这里的每一层

00:23:42.706 --> 00:23:43.276 A:middle
都有一个

00:23:43.276 --> 00:23:44.866 A:middle
前面有一个

00:23:44.866 --> 00:23:46.136 A:middle
中间和后面各有一个

00:23:47.616 --> 00:23:49.436 A:middle
这就给大家展示了

00:23:49.436 --> 00:23:50.546 A:middle
你们在使用 SpriteKit

00:23:50.546 --> 00:23:51.756 A:middle
和 SceneKit 时结合 ARKit

00:23:51.756 --> 00:23:54.346 A:middle
可以做些什么 但可能

00:23:54.346 --> 00:23:55.366 A:middle
你们开始觉得有点

00:23:55.366 --> 00:23:58.336 A:middle
受到级别的限制了

00:23:59.146 --> 00:24:00.356 A:middle
或许我们想要自己的这个

00:23:59.146 --> 00:24:00.356 A:middle
或许我们想要自己的这个

00:24:00.356 --> 00:24:02.176 A:middle
小人走出来去自己

00:24:02.176 --> 00:24:02.946 A:middle
开启一场探险

00:24:03.116 --> 00:24:03.906 A:middle
它可以进入真实的

00:24:03.906 --> 00:24:04.386 A:middle
世界

00:24:04.656 --> 00:24:06.576 A:middle
这个按钮看着让人相当

00:24:06.576 --> 00:24:07.056 A:middle
想按下去

00:24:09.446 --> 00:24:11.216 A:middle
太棒啦

00:24:12.516 --> 00:24:18.556 A:middle
[掌声]

00:24:19.056 --> 00:24:19.826 A:middle
那么这就让大家明白了

00:24:19.826 --> 00:24:20.736 A:middle
在 3D 背景里同时使用

00:24:20.736 --> 00:24:22.606 A:middle
SpriteKit  SceneKit  ARKit

00:24:22.606 --> 00:24:24.586 A:middle
可以做些什么了

00:24:27.306 --> 00:24:28.946 A:middle
大家可以看到 结合 SceneKit

00:24:28.946 --> 00:24:30.156 A:middle
使用 SpriteKit 可以实现

00:24:30.156 --> 00:24:31.456 A:middle
全 3D 变换和透视

00:24:31.756 --> 00:24:32.436 A:middle
这又让大家可以做些

00:24:32.436 --> 00:24:33.216 A:middle
很酷的事情

00:24:33.836 --> 00:24:35.376 A:middle
它让大家可以把 2D 和 3D 的

00:24:35.376 --> 00:24:36.926 A:middle
内容混合在同一个背景中

00:24:37.516 --> 00:24:38.926 A:middle
并且与 ARKit 完全

00:24:38.926 --> 00:24:41.116 A:middle
兼容 同时它在普通的 3D

00:24:41.116 --> 00:24:42.286 A:middle
app 中也可以很好地操作

00:24:42.286 --> 00:24:46.556 A:middle
刚才我们已经谈到了如何

00:24:46.556 --> 00:24:48.176 A:middle
使用 ARKit 和 SceneKit 下面

00:24:48.176 --> 00:24:49.106 A:middle
我们向大家介绍 SpriteKit

00:24:49.106 --> 00:24:50.646 A:middle
的另一个新功能

00:24:51.086 --> 00:24:51.976 A:middle
SKRenderer

00:24:53.136 --> 00:24:56.056 A:middle
让我们来稍微看看

00:24:56.056 --> 00:24:57.496 A:middle
SpriteKit 在底层是怎么运行的

00:24:58.376 --> 00:24:59.006 A:middle
我们在上一个板块中

00:24:59.006 --> 00:25:00.796 A:middle
已经提到了 使用普通的

00:24:59.006 --> 00:25:00.796 A:middle
已经提到了 使用普通的

00:25:00.796 --> 00:25:02.046 A:middle
SpriteKit 渲染 你们有

00:25:02.046 --> 00:25:03.616 A:middle
自己的场景并把它设置在

00:25:03.616 --> 00:25:05.566 A:middle
SKView 上 然后再同

00:25:05.566 --> 00:25:07.736 A:middle
UIKit 和 AppKit 一起来把你们的

00:25:07.736 --> 00:25:09.046 A:middle
内容放在屏幕上

00:25:10.296 --> 00:25:11.346 A:middle
SKView 会为你们处理

00:25:11.346 --> 00:25:12.826 A:middle
所有的更新和渲染

00:25:13.926 --> 00:25:14.796 A:middle
这一点的好处是它使得

00:25:14.796 --> 00:25:15.906 A:middle
用 SpriteKit 来起步

00:25:15.906 --> 00:25:16.826 A:middle
非常容易

00:25:17.736 --> 00:25:18.666 A:middle
但如果你们想要在一个

00:25:18.666 --> 00:25:20.256 A:middle
3D 背景里渲染 SpriteKit

00:25:20.256 --> 00:25:20.776 A:middle
内容呢

00:25:21.516 --> 00:25:24.276 A:middle
解决方法就像我给大家展示的那样

00:25:24.546 --> 00:25:26.306 A:middle
结合 SceneKit 来使用 SpriteKit

00:25:26.806 --> 00:25:28.356 A:middle
不用把场景设置在

00:25:28.356 --> 00:25:29.586 A:middle
视图上 你们可以把它用作

00:25:29.586 --> 00:25:31.056 A:middle
SceneKit 的材料

00:25:31.936 --> 00:25:33.006 A:middle
并且这能让大家做一切

00:25:33.006 --> 00:25:33.616 A:middle
酷炫的事情

00:25:33.616 --> 00:25:35.976 A:middle
但当 SpriteKit 的更新和

00:25:35.976 --> 00:25:37.226 A:middle
渲染仍不受你们操控

00:25:37.226 --> 00:25:37.796 A:middle
时

00:25:38.796 --> 00:25:40.896 A:middle
如果你们想要更多的控制呢

00:25:41.436 --> 00:25:42.416 A:middle
或许你们想要按照具体的固定的

00:25:42.416 --> 00:25:45.396 A:middle
时间步骤来更新或是不加

00:25:45.396 --> 00:25:46.756 A:middle
渲染地更新或是不加

00:25:46.756 --> 00:25:48.866 A:middle
更新的渲染又或是更新一次

00:25:48.866 --> 00:25:50.346 A:middle
渲染两次 每次都从不同的

00:25:50.346 --> 00:25:51.076 A:middle
视角进行

00:25:52.286 --> 00:25:53.596 A:middle
如果我们想要直接和 Metal

00:25:53.596 --> 00:25:56.186 A:middle
一起使用呢

00:25:56.306 --> 00:25:57.676 A:middle
那就进入 SKRenderer

00:26:00.026 --> 00:26:02.026 A:middle
你们可以使用 SKRenderer 而不是

00:26:02.026 --> 00:26:03.196 A:middle
SKView 来更多地操控

00:26:03.196 --> 00:26:03.866 A:middle
SpriteKit

00:26:04.686 --> 00:26:07.986 A:middle
就像 SKView 要使用 SKRenderer

00:26:07.986 --> 00:26:09.926 A:middle
你们只需要把你们的

00:26:09.926 --> 00:26:10.876 A:middle
场景设置在

00:26:10.876 --> 00:26:11.236 A:middle
渲染器上

00:26:11.886 --> 00:26:13.196 A:middle
但与 SKView 不同的是

00:26:13.526 --> 00:26:15.026 A:middle
SKRenderer 让你们来决定

00:26:15.026 --> 00:26:16.586 A:middle
SpriteKit 什么时候进行更新

00:26:16.586 --> 00:26:17.176 A:middle
和渲染

00:26:18.136 --> 00:26:19.326 A:middle
它让大家可以直接通过

00:26:19.326 --> 00:26:20.956 A:middle
Metal 运作 然后你们就可以

00:26:20.956 --> 00:26:22.326 A:middle
把 SpriteKit 渲染成

00:26:22.326 --> 00:26:23.436 A:middle
一个纹理然后

00:26:23.656 --> 00:26:24.526 A:middle
随心所欲地使用了

00:26:25.466 --> 00:26:26.956 A:middle
这正是 SceneKit

00:26:26.956 --> 00:26:28.596 A:middle
能够在 3D 背景中有效

00:26:28.596 --> 00:26:30.356 A:middle
渲染 SpriteKit 内容的方式

00:26:30.386 --> 00:26:32.396 A:middle
它在底层使用了

00:26:32.966 --> 00:26:33.086 A:middle
SKRenderer

00:26:34.716 --> 00:26:36.486 A:middle
使用 SKRenderer 一共有

00:26:36.556 --> 00:26:38.666 A:middle
四个步骤 初始化

00:26:39.136 --> 00:26:41.756 A:middle
设置场景 更新以及

00:26:41.756 --> 00:26:42.116 A:middle
渲染

00:26:43.296 --> 00:26:44.616 A:middle
初始化只出现一次

00:26:45.256 --> 00:26:46.406 A:middle
在一开始就要进行场景设置

00:26:46.406 --> 00:26:47.516 A:middle
如果要转换新的场景则要

00:26:47.516 --> 00:26:49.666 A:middle
再次设置 而更新和

00:26:49.666 --> 00:26:51.386 A:middle
渲染在 app 的每一帧都要

00:26:51.386 --> 00:26:51.626 A:middle
重复进行

00:26:51.626 --> 00:26:54.846 A:middle
让我们来看看每一个步骤

00:26:55.706 --> 00:26:57.416 A:middle
的代码

00:26:57.506 --> 00:26:59.206 A:middle
第一步 初始化

00:26:59.756 --> 00:27:01.796 A:middle
要将 SKRenderer 初始化

00:26:59.756 --> 00:27:01.796 A:middle
要将 SKRenderer 初始化

00:27:01.796 --> 00:27:02.716 A:middle
你们只需要向它提供

00:27:02.836 --> 00:27:05.906 A:middle
一个 Metal 设备

00:27:06.656 --> 00:27:08.656 A:middle
第二步 设置场景

00:27:09.346 --> 00:27:10.556 A:middle
这与 SKView 的做法是

00:27:10.556 --> 00:27:12.076 A:middle
完全相同的 只需要

00:27:12.076 --> 00:27:13.726 A:middle
把场景设置在 SKRenderer 的场景

00:27:13.726 --> 00:27:14.116 A:middle
属性上

00:27:17.376 --> 00:27:18.866 A:middle
第三步 更新

00:27:19.596 --> 00:27:21.096 A:middle
这同样非常简单 你们

00:27:21.096 --> 00:27:23.386 A:middle
只需要输入

00:27:25.176 --> 00:27:25.286 A:middle
currentTime

00:27:25.806 --> 00:27:27.166 A:middle
第四步 渲染

00:27:27.776 --> 00:27:28.676 A:middle
这可以通过调用渲染

00:27:28.676 --> 00:27:29.786 A:middle
方法来完成 具体方式

00:27:29.786 --> 00:27:30.516 A:middle
有两种

00:27:31.266 --> 00:27:32.286 A:middle
你们想采用哪种方式

00:27:32.326 --> 00:27:33.446 A:middle
取决于你们想

00:27:33.446 --> 00:27:34.776 A:middle
怎样结合 Metal 来使用你们的

00:27:34.776 --> 00:27:35.816 A:middle
SpriteKit 内容

00:27:36.506 --> 00:27:39.346 A:middle
两个方法都要求大家指定

00:27:39.376 --> 00:27:40.466 A:middle
你们想要渲染的

00:27:40.466 --> 00:27:42.106 A:middle
视口 也就是 CGrect

00:27:42.146 --> 00:27:43.076 A:middle
定义了在渲染目标里

00:27:43.076 --> 00:27:45.026 A:middle
SpriteKit 将要绘制的

00:27:45.026 --> 00:27:48.456 A:middle
区域

00:27:49.296 --> 00:27:50.886 A:middle
两种方法都有 Metal

00:27:50.886 --> 00:27:51.986 A:middle
渲染通过描述符 这

00:27:51.986 --> 00:27:53.266 A:middle
描述了你们希望 SpriteKit

00:27:53.266 --> 00:27:54.476 A:middle
内容绘制的

00:27:54.476 --> 00:27:58.616 A:middle
渲染目标

00:27:59.076 --> 00:28:00.246 A:middle
第一个方法让你们可以

00:27:59.076 --> 00:28:00.246 A:middle
第一个方法让你们可以

00:28:00.246 --> 00:28:01.986 A:middle
指定 SpriteKit 来创建

00:28:01.986 --> 00:28:03.346 A:middle
渲染命令的

00:28:03.576 --> 00:28:04.376 A:middle
命令缓冲区

00:28:05.396 --> 00:28:06.436 A:middle
调用这一方法的一个

00:28:06.436 --> 00:28:07.366 A:middle
很好的案例是如果你们没有

00:28:07.446 --> 00:28:08.956 A:middle
直接把 SpriteKit 内容与

00:28:08.956 --> 00:28:10.726 A:middle
其它的 Metal 内容混合在

00:28:10.846 --> 00:28:11.966 A:middle
同一个渲染目标里

00:28:12.576 --> 00:28:13.646 A:middle
如果你们想把一个

00:28:13.646 --> 00:28:15.086 A:middle
SpriteKit 场景渲染成纹理

00:28:15.086 --> 00:28:16.176 A:middle
然后再通过一些 3D 几何图形

00:28:16.176 --> 00:28:17.846 A:middle
进行应用 就像我们给大家

00:28:17.846 --> 00:28:19.196 A:middle
做的第二个演示那样 那么

00:28:19.406 --> 00:28:20.326 A:middle
你们可能会想要调用这个

00:28:20.326 --> 00:28:20.556 A:middle
方法

00:28:23.196 --> 00:28:25.276 A:middle
第二个方法给了大家更多的

00:28:25.276 --> 00:28:26.656 A:middle
粒度 让大家可以

00:28:26.656 --> 00:28:28.956 A:middle
决定 SpriteKit 的渲染命令

00:28:28.956 --> 00:28:30.516 A:middle
将在哪个渲染命令编码器

00:28:30.566 --> 00:28:31.356 A:middle
上进行编码

00:28:31.886 --> 00:28:33.136 A:middle
如果你们想直接

00:28:33.136 --> 00:28:34.486 A:middle
把 SpriteKit 和 Metal 的内容混在

00:28:34.486 --> 00:28:35.966 A:middle
相同的渲染目标中 那么这种方式

00:28:35.966 --> 00:28:36.376 A:middle
是适用的

00:28:36.936 --> 00:28:38.326 A:middle
所以你们想要和 SpriteKit

00:28:38.326 --> 00:28:39.636 A:middle
内容一道渲染一些 2D 的

00:28:39.636 --> 00:28:41.266 A:middle
Metal 内容 或许你们想要

00:28:41.266 --> 00:28:43.036 A:middle
在 Metal 场景上叠加

00:28:43.036 --> 00:28:44.456 A:middle
SpriteKit 来显示 HUD

00:28:44.456 --> 00:28:44.966 A:middle
元素

00:28:45.706 --> 00:28:47.116 A:middle
通过使用相同的渲染命令

00:28:47.116 --> 00:28:48.436 A:middle
及编码器 你们可以大大地提高

00:28:48.436 --> 00:28:49.366 A:middle
效率 超过你们使用

00:28:49.366 --> 00:28:50.376 A:middle
第一个方法的效率

00:28:50.376 --> 00:28:54.356 A:middle
好了 这就是 API

00:28:54.356 --> 00:28:55.076 A:middle
的内容了

00:28:55.346 --> 00:28:56.286 A:middle
让我们来快速做一个演示

00:28:56.286 --> 00:28:57.366 A:middle
看看如何在 3D 中用 Metal 进行

00:28:57.366 --> 00:28:59.986 A:middle
SpriteKit 渲染

00:29:01.516 --> 00:29:08.836 A:middle
[掌声]

00:29:09.336 --> 00:29:11.986 A:middle
在这里，我们有一个 Metal 的

00:29:11.986 --> 00:29:12.416 A:middle
3D 场景

00:29:13.136 --> 00:29:14.446 A:middle
你们看 在这儿我们有明亮

00:29:14.446 --> 00:29:16.626 A:middle
的光线还有一些阴影

00:29:16.936 --> 00:29:18.246 A:middle
我们还有这台非常吸引人的

00:29:18.246 --> 00:29:20.566 A:middle
街机 上面还带有

00:29:20.866 --> 00:29:22.176 A:middle
漂亮的 SpriteKit 框架

00:29:22.176 --> 00:29:22.766 A:midd
标识

00:29:23.896 --> 00:29:26.996 A:middle
让我们朝着它走过去“插入游戏币”

00:29:27.296 --> 00:29:28.296 A:middle
听上去也相当吸引人

00:29:28.296 --> 00:29:29.076 A:middle
我有个硬币

00:29:29.076 --> 00:29:30.126 A:middle
让我们把它插进去

00:29:30.126 --> 00:29:34.206 A:middle
你们看 我们就得到了一个

00:29:34.206 --> 00:29:36.416 A:middle
在这个 3D Metal 场景上渲染的

00:29:36.846 --> 00:29:38.786 A:middle
SpriteKit 场景

00:29:39.376 --> 00:29:41.296 A:middle
看 我们在使用 SKRenderer

00:29:41.666 --> 00:29:43.466 A:middle
将 SpriteKit 渲染成一个

00:29:43.466 --> 00:29:44.936 A:middle
纹理 然后我们

00:29:44.936 --> 00:29:46.746 A:middle
再把它映射到这里的

00:29:46.746 --> 00:29:47.836 A:middle
街机前

00:29:47.906 --> 00:29:49.956 A:middle
接下来我们只需要把一个

00:29:49.956 --> 00:29:53.116 A:middle
CRT 着色器应用到 Metal 中

00:29:53.426 --> 00:29:55.316 A:middle
以获得这种复古学院派的外观

00:29:55.376 --> 00:29:57.166 A:middle
实际上 我可以随心所欲地从

00:29:57.166 --> 00:29:58.516 A:middle
任意角度移动 我还可以

00:29:58.516 --> 00:30:00.926 A:middle
像这样跟它交互

00:29:58.516 --> 00:30:00.926 A:middle
像这样跟它交互

00:30:01.046 --> 00:30:01.806 A:middle
这稍微有点歪

00:30:01.806 --> 00:30:02.766 A:middle
但或许这让大家

00:30:02.766 --> 00:30:04.206 A:middle
回想起了曾经跟朋友

00:30:04.206 --> 00:30:05.116 A:middle
一起玩街机的时候

00:30:05.116 --> 00:30:06.016 A:middle
你们都互相挤在一起

00:30:06.016 --> 00:30:06.436 A:middle
来玩游戏

00:30:06.436 --> 00:30:08.716 A:middle
你们可以从任意角度来

00:30:08.716 --> 00:30:10.246 A:middle
视图 你们可以从远处

00:30:10.246 --> 00:30:14.346 A:middle
来视图 它会向你们显示出

00:30:14.346 --> 00:30:15.836 A:middle
一些你们结合 Metal

00:30:15.896 --> 00:30:17.556 A:middle
使用 SpriteKid 能做的

00:30:17.556 --> 00:30:18.386 A:middle
一些东西

00:30:18.656 --> 00:30:20.516 A:middle
它让你们可以在 3D 中使用

00:30:20.516 --> 00:30:21.676 A:middle
然后你们可以随意处理

00:30:21.676 --> 00:30:22.396 A:middle
这个纹理

00:30:29.046 --> 00:30:29.766 A:middle
以上就是 SpriteKit 和 Metal

00:30:29.856 --> 00:30:30.456 A:middle
一起操作的内容

00:30:31.516 --> 00:30:35.776 A:middle
[掌声]

00:30:36.276 --> 00:30:37.446 A:middle
SKRenderer 让大家能够对

00:30:37.446 --> 00:30:38.936 A:middle
SpriteKit 进行前所未有的

00:30:38.936 --> 00:30:39.366 A:middle
操控

00:30:39.816 --> 00:30:40.716 A:middle
它让你们可以决定

00:30:40.716 --> 00:30:41.956 A:middle
具体什么时候更新和

00:30:41.956 --> 00:30:43.386 A:middle
渲染 并且通过直接

00:30:43.386 --> 00:30:44.936 A:middle
与 Metal 交互 你们可以把

00:30:44.936 --> 00:30:46.116 A:middle
渲染的 SpriteKit 内容用在任何

00:30:46.566 --> 00:30:47.496 A:middle
你们觉得合适的地方

00:30:50.846 --> 00:30:52.066 A:middle
今天大家已经看到了 SpriteKit

00:30:52.066 --> 00:30:54.086 A:middle
对 2D 和 3D 都适用

00:30:54.896 --> 00:30:55.976 A:middle
它也能够同诸如 SceneKit

00:30:55.976 --> 00:30:57.216 A:middle
和 Metal 这样的其它图形框架

00:30:57.216 --> 00:30:58.436 A:middle
一起使用

00:30:58.436 --> 00:31:00.086 A:middle
并且 SpriteKit 与 ARKit 紧密

00:30:58.436 --> 00:31:00.086 A:middle
并且 SpriteKit 与 ARKit 紧密

00:31:00.086 --> 00:31:01.266 A:middle
结合 因此创建

00:31:01.266 --> 00:31:02.956 A:middle
增强现实 app

00:31:03.056 --> 00:31:04.226 A:middle
变得极其简单

00:31:04.726 --> 00:31:06.306 A:middle
我们介绍了新的特征

00:31:06.306 --> 00:31:07.586 A:middle
给大家提供了前所未有的操控性

00:31:07.586 --> 00:31:08.826 A:middle
让大家可以在视图调试器

00:31:08.826 --> 00:31:09.916 A:middle
中来浏览 SpriteKit 内容

00:31:09.916 --> 00:31:11.706 A:middle
还让你们可以

00:31:11.706 --> 00:31:13.386 A:middle
直接控制何时及

00:31:13.386 --> 00:31:14.646 A:middle
以何种方式来结合新的

00:31:14.646 --> 00:31:15.876 A:middle
SKRenderer 进行 SpriteKit 的更新

00:31:15.986 --> 00:31:16.656 A:middle
和渲染

00:31:17.206 --> 00:31:19.006 A:middle
今天 我们展示了 SpriteKit

00:31:19.006 --> 00:31:20.156 A:middle
的全新面貌 我们

00:31:20.156 --> 00:31:21.226 A:middle
希望这能给大家带来一些

00:31:21.426 --> 00:31:23.036 A:middle
启发 去思索如何以

00:31:23.036 --> 00:31:24.166 A:middle
你们意想不到的方式

00:31:24.166 --> 00:31:25.136 A:middle
来进行使用

00:31:26.776 --> 00:31:28.756 A:middle
关于这场会议的更多信息及

00:31:28.756 --> 00:31:29.916 A:middle
视频 请访问

00:31:30.006 --> 00:31:34.246 A:middle
developer.apple.com/wwdc17/609 这个网站

00:31:34.246 --> 00:31:36.886 A:middle
也请关注其它相关的

00:31:36.886 --> 00:31:37.736 A:middle
会议

00:31:38.106 --> 00:31:39.236 A:middle
在今天的发布会上 我们仅

00:31:39.236 --> 00:31:40.206 A:middle
涉及到了 Metal 的小部分内容

00:31:40.406 --> 00:31:41.866 A:middle
如果你们想要了解更多

00:31:41.866 --> 00:31:42.996 A:middle
请关注 Metal 2 介绍这一

00:31:42.996 --> 00:31:43.566 A:middle
会议

00:31:43.636 --> 00:31:45.586 A:middle
我强烈建议大家观看

00:31:45.656 --> 00:31:46.796 A:middle
“ARKit 介绍”来了解

00:31:46.796 --> 00:31:48.336 A:middle
关于操作的详细

00:31:48.336 --> 00:31:48.886 A:middle
信息

00:31:48.976 --> 00:31:50.776 A:middle
如果我们对 SceneKit 的

00:31:50.776 --> 00:31:52.346 A:middle
快速讲解引起了大家的兴趣

00:31:52.346 --> 00:31:53.136 A:middle
你们可以看看今年的

00:31:53.136 --> 00:31:53.816 A:middle
主要会议

00:31:54.906 --> 00:31:56.296 A:middle
“用 Xcode 9 调试”这个专会议

00:31:56.296 --> 00:31:57.986 A:middle
上也有很多精彩的内容

00:31:57.986 --> 00:32:00.266 A:middle
比如在 SpriteKit 上用新的视图

00:31:57.986 --> 00:32:00.266 A:middle
比如在 SpriteKit 上用新的视图

00:32:00.266 --> 00:32:01.346 A:middle
调试器进行调试

00:32:01.806 --> 00:32:03.076 A:middle
比如非常强大的

00:32:03.076 --> 00:32:04.386 A:middle
无线调试 所以我建议大家

00:32:04.386 --> 00:32:05.176 A:middle
也去看看这场

00:32:06.586 --> 00:32:07.756 A:middle
感谢大家 希望大家愉快地度过

00:32:07.756 --> 00:32:08.716 A:middle
接下来的会议
