WEBVTT

00:00:17.017 --> 00:00:20.521 align:middle line:10%
<c.magenta>（WatchOS应用的生命周期）</c>

00:00:22.489 --> 00:00:23.323 align:middle line:90%,end
<c.magenta>大家好</c>

00:00:23.390 --> 00:00:26.293 align:middle line:90%,end
<c.magenta>我是尼尔·德赛</c>
<c.magenta>一名WatchKit框架工程师</c>

00:00:26.493 --> 00:00:30.430 align:middle line:90%,end
<c.magenta>今天很高兴能来这里 跟大家一起探讨</c>
<c.magenta>watchOS应用的生命周期</c>

00:00:32.833 --> 00:00:38.639 align:middle line:90%,end
<c.magenta>表应用有一个显著的功能</c>
<c.magenta>简单却非常强大</c>

00:00:39.273 --> 00:00:42.009 align:middle line:90%,end
<c.magenta>设计巧妙的表应用</c>

00:00:42.075 --> 00:00:44.778 align:middle line:90%,end
<c.magenta>有可能会成为用户手腕上的</c>
<c.magenta>终极伴侣</c>

00:00:45.579 --> 00:00:48.382 align:middle line:90%,end
<c.magenta>现在让我们想象一下你的用户</c>

00:00:48.882 --> 00:00:51.752 align:middle line:90%,end
<c.magenta>他们想要什么</c>
<c.magenta>他们想在何时使用你的表应用？</c>

00:00:52.486 --> 00:00:54.988 align:middle line:90%,end
<c.magenta>也许他们想</c>
<c.magenta>迅速地瞥一眼信息</c>

00:00:55.055 --> 00:00:56.523 align:middle line:90%,end
<c.magenta>或完成一个简单的任务</c>

00:00:57.191 --> 00:00:58.926 align:middle line:90%,end
<c.magenta>我们认为好的表应用</c>

00:00:59.193 --> 00:01:02.162 align:middle line:90%,end
<c.magenta>是用来帮助用户</c>
<c.magenta>完成他们的目标的</c>

00:00:59.193 --> 00:01:02.162 align:middle line:90%,end
<c.magenta>是用来帮助用户</c>
<c.magenta>完成他们的目标的</c>

00:01:02.429 --> 00:01:04.131 align:middle line:90%,end
<c.magenta>以一种简单、快速的方式</c>

00:01:04.431 --> 00:01:06.333 align:middle line:90%,end
<c.magenta>因此不存在什么科技</c>

00:01:06.633 --> 00:01:08.569 align:middle line:90%,end
<c.magenta>用户可以正常生活和工作</c>

00:01:08.769 --> 00:01:10.671 align:middle line:90%,end
<c.magenta>并享受一种更好的体验</c>

00:01:10.971 --> 00:01:12.606 align:middle line:90%,end
<c.magenta>这都是因为你的应用的帮助</c>

00:01:14.741 --> 00:01:19.279 align:middle line:90%,end
<c.magenta>那么今天 我们将要设计一款应用</c>
<c.magenta>是我在watchOS 3中 一直在设计的</c>

00:01:19.880 --> 00:01:21.515 align:middle line:90%,end
<c.magenta>现在我们还没准备好发布它</c>

00:01:21.982 --> 00:01:23.483 align:middle line:90%,end
<c.magenta>但我们可以先看一眼</c>

00:01:23.550 --> 00:01:25.319 align:middle line:90%,end
<c.magenta>在watchOS 4中的一些</c>

00:01:25.619 --> 00:01:27.521 align:middle line:90%,end
<c.magenta>新功能和升级</c>

00:01:27.721 --> 00:01:29.656 align:middle line:90%,end
<c.magenta>这将我们的应用</c>
<c.magenta>带入了一个新阶段</c>

00:01:31.024 --> 00:01:35.562 align:middle line:90%,end
<c.magenta>今天 我们将探讨 watchOS 4</c>
<c.magenta>中的 四个不同升级</c>

00:01:36.163 --> 00:01:37.698 align:middle line:90%,end
<c.magenta>可以帮助我们设计应用</c>

00:01:38.498 --> 00:01:40.300 align:middle line:90%,end
<c.magenta>我们将探讨一些新东西</c>

00:01:40.501 --> 00:01:41.435 align:middle line:90%,end
<c.magenta>比如我们的新…</c>

00:01:43.437 --> 00:01:45.072 align:middle line:90%,end
<c.magenta>统一的进程运行时间</c>

00:01:45.472 --> 00:01:48.709 align:middle line:90%,end
<c.magenta>我们将在应用中获得一些</c>

00:01:48.775 --> 00:01:51.311 align:middle line:90%,end
<c.magenta>很棒的性能改善 而且我将展示</c>
<c.magenta>如何在watchOS 4中实现</c>

00:01:53.680 --> 00:01:56.383 align:middle line:90%,end
<c.magenta>我们还会谈谈</c>
<c.magenta>新创建的Frontmost App State</c>

00:01:56.817 --> 00:01:58.585 align:middle line:90%,end
<c.magenta>我们可以利用这个状态</c>

00:01:58.986 --> 00:02:01.522 align:middle line:90%,end
<c.magenta>来为我们的用户创建一种</c>
<c.magenta>了不起的体验</c>

00:01:58.986 --> 00:02:01.522 align:middle line:90%,end
<c.magenta>来为我们的用户创建一种</c>
<c.magenta>了不起的体验</c>

00:02:04.057 --> 00:02:05.592 align:middle line:90%,end
<c.magenta>此外 我们还要谈谈</c>

00:02:05.659 --> 00:02:08.628 align:middle line:90%,end
<c.magenta>我们对后台应用刷新</c>
<c.magenta>所作出的新改进</c>

00:02:08.895 --> 00:02:10.864 align:middle line:90%,end
<c.magenta>以及我们要如何利用</c>
<c.magenta>这些新改进</c>

00:02:12.966 --> 00:02:15.002 align:middle line:90%,end
<c.magenta>最后 我们要谈谈</c>

00:02:15.068 --> 00:02:18.839 align:middle line:90%,end
<c.magenta>watchOS 4中的一些</c>
<c.magenta>新的后台模式</c>

00:02:19.006 --> 00:02:21.175 align:middle line:90%,end
<c.magenta>以及如何在我们的应用中</c>
<c.magenta>利用这些新模式</c>

00:02:22.142 --> 00:02:23.844 align:middle line:90%,end
<c.magenta>那么 让我们开始吧</c>

00:02:23.911 --> 00:02:27.748 align:middle line:90%,end
<c.magenta>先来看新的</c>
<c.magenta>统一进程运行时间</c>

00:02:28.582 --> 00:02:31.418 align:middle line:90%,end
<c.magenta>那么 我们已经设计了</c>
<c.magenta>一个单一进程架构</c>

00:02:31.585 --> 00:02:33.987 align:middle line:90%,end
<c.magenta>可以帮助你的应用变得更快速</c>

00:02:34.188 --> 00:02:35.989 align:middle line:90%,end
<c.magenta>更能响应你的用户</c>

00:02:36.523 --> 00:02:38.292 align:middle line:90%,end
<c.magenta>那么 现在让我们回顾一下</c>

00:02:38.358 --> 00:02:41.495 align:middle line:90%,end
<c.magenta>历史 以及看我们进行到哪一步了</c>

00:02:43.897 --> 00:02:46.300 align:middle line:90%,end
<c.magenta>那么在watchOS 3中</c>
<c.magenta>应用的UI</c>

00:02:46.366 --> 00:02:49.002 align:middle line:90%,end
<c.magenta>是在应用进程中</c>
<c.magenta>是我们替你们处理的</c>

00:02:49.269 --> 00:02:52.039 align:middle line:10%
<c.magenta>而你们的代码</c>
<c.magenta>存在于表扩展中</c>

00:02:52.406 --> 00:02:54.308 align:middle line:10%
<c.magenta>那么我们就有两个</c>
<c.magenta>独立的进程</c>

00:02:54.374 --> 00:02:56.210 align:middle line:10%
<c.magenta>这种情况是完全</c>
<c.magenta>依赖于系统而存在的</c>

00:02:57.444 --> 00:02:59.246 align:middle line:10%
<c.magenta>因此 我们修改了</c>
<c.magenta>内部的一些东西</c>

00:02:59.313 --> 00:03:01.215 align:middle line:10%
<c.magenta>并统一了进程运行时间</c>

00:02:59.313 --> 00:03:01.215 align:middle line:10%
<c.magenta>并统一了进程运行时间</c>

00:03:02.115 --> 00:03:05.052 align:middle line:10%
<c.magenta>所以 现在UI和扩展代码</c>

00:03:05.319 --> 00:03:07.588 align:middle line:10%
<c.magenta>都在同一个进程中执行</c>

00:03:08.288 --> 00:03:09.790 align:middle line:10%
<c.magenta>现在 你可能在想</c>

00:03:09.857 --> 00:03:11.692 align:middle line:10%
<c.magenta>我们为什么要这样做？</c>

00:03:13.460 --> 00:03:14.795 align:middle line:90%,end
<c.magenta>那么最终</c>

00:03:14.862 --> 00:03:19.066 align:middle line:90%,end
<c.magenta>我们想要改善 全部WatchKit应用</c>
<c.magenta>在watchOS 4平台上的性能</c>

00:03:19.366 --> 00:03:22.603 align:middle line:90%,end
<c.magenta>因此用户可以拥有</c>
<c.magenta>一种更好的应用体验</c>

00:03:23.237 --> 00:03:26.907 align:middle line:90%,end
<c.magenta>我很高兴地跟大家宣布</c>
<c.magenta>我们已经 实现了我们的目标</c>

00:03:28.075 --> 00:03:30.077 align:middle line:90%,end
<c.magenta>我们可以看到</c>
<c.magenta>触摸延迟的改善</c>

00:03:30.143 --> 00:03:33.413 align:middle line:90%,end
<c.magenta>在某些情况下</c>
<c.magenta>它的速度几乎提升了一倍</c>

00:03:33.981 --> 00:03:37.050 align:middle line:90%,end
<c.magenta>那么 从用户实际</c>
<c.magenta>触摸屏幕那一刻开始</c>

00:03:37.117 --> 00:03:38.952 align:middle line:90%,end
<c.magenta>一直到调用你的代码</c>

00:03:39.253 --> 00:03:41.088 align:middle line:90%,end
<c.magenta>我们已经看到了一个极大的改进</c>

00:03:42.523 --> 00:03:43.590 align:middle line:90%,end
<c.magenta>又比如说</c>

00:03:43.657 --> 00:03:46.026 align:middle line:90%,end
<c.magenta>当关联到通用的拖动手势时</c>

00:03:46.260 --> 00:03:48.428 align:middle line:90%,end
<c.magenta>我们可以看到</c>
<c.magenta>帧频有了很大的提升</c>

00:03:48.962 --> 00:03:51.999 align:middle line:90%,end
<c.magenta>并且我们也期待</c>
<c.magenta>能改进启动性能</c>

00:03:53.500 --> 00:03:56.870 align:middle line:90%,end
<c.magenta>现在 因为我们只有一个进程</c>
<c.magenta>来管理你的UI</c>

00:03:57.104 --> 00:04:00.440 align:middle line:90%,end
<c.magenta>和你的扩展代码</c>
<c.magenta>我们现在已经提高了内存限制</c>

00:03:57.104 --> 00:04:00.440 align:middle line:90%,end
<c.magenta>和你的扩展代码</c>
<c.magenta>我们现在已经提高了内存限制</c>

00:04:00.841 --> 00:04:01.875 align:middle line:90%,end
<c.magenta>来解决这个问题</c>

00:04:03.010 --> 00:04:03.944 align:middle line:90%,end
<c.magenta>你可能在想</c>

00:04:04.011 --> 00:04:06.213 align:middle line:90%,end
<c.magenta>我们在内部</c>
<c.magenta>一定做了大量的架构</c>

00:04:06.547 --> 00:04:09.216 align:middle line:90%,end
<c.magenta>那么你们需要怎样修改应用</c>

00:04:09.550 --> 00:04:11.318 align:middle line:90%,end
<c.magenta>以采用这种新机制呢？</c>

00:04:11.685 --> 00:04:12.686 align:middle line:90%,end
<c.magenta>最妙的是</c>

00:04:13.120 --> 00:04:15.489 align:middle line:90%,end
<c.magenta>实际上不需要做任何修改</c>

00:04:16.190 --> 00:04:18.458 align:middle line:90%,end
<c.magenta>那么 你们肯定</c>
<c.magenta>很乐意听到这个消息</c>

00:04:18.825 --> 00:04:22.829 align:middle line:90%,end
<c.magenta>App Store中的全部</c>
<c.magenta>现存原生WatchKit扩展</c>

00:04:23.096 --> 00:04:27.100 align:middle line:90%,end
<c.magenta>都能得到这种升级 只要你的用户</c>
<c.magenta>升级到watchOS 4即可</c>

00:04:27.768 --> 00:04:31.705 align:middle line:90%,end
<c.magenta>这种新的统一进程运行时间</c>
<c.magenta>是完全反向兼容的</c>

00:04:32.873 --> 00:04:35.943 align:middle line:90%,end
<c.magenta>只要你的应用是建立在</c>
<c.magenta>watchOS 2或更高版本的基础上</c>

00:04:36.210 --> 00:04:38.011 align:middle line:90%,end
<c.magenta>你就不需要做任何事</c>

00:04:38.812 --> 00:04:41.982 align:middle line:90%,end
<c.magenta>那么 这就意味着</c>
<c.magenta>我们今天要升级的应用</c>

00:04:42.382 --> 00:04:45.752 align:middle line:90%,end
<c.magenta>不需要在XCode中</c>
<c.magenta>或在App Store中进行修改</c>

00:04:46.019 --> 00:04:47.421 align:middle line:90%,end
<c.magenta>就这么管用了</c>

00:04:49.590 --> 00:04:53.026 align:middle line:90%,end
<c.magenta>现在 让我们谈谈</c>
<c.magenta>新功能Frontmost App State</c>

00:04:54.127 --> 00:04:58.198 align:middle line:90%,end
<c.magenta>在手表上 用户在数秒钟内</c>
<c.magenta>多次使用一款应用 然后</c>

00:04:58.532 --> 00:05:00.434 align:middle line:90%,end
<c.magenta>他们就放下手腕</c>

00:04:58.532 --> 00:05:00.434 align:middle line:90%,end
<c.magenta>他们就放下手腕</c>

00:05:00.501 --> 00:05:04.171 align:middle line:90%,end
<c.magenta>期待应用完成</c>
<c.magenta>所需要完成的任何任务</c>

00:05:05.339 --> 00:05:08.175 align:middle line:90%,end
<c.magenta>很多时候</c>
<c.magenta>用户期待再次抬起手腕时</c>

00:05:08.408 --> 00:05:11.478 align:middle line:90%,end
<c.magenta>看到应用已经完成了</c>
<c.magenta>它所需要完成的任务</c>

00:05:11.545 --> 00:05:14.414 align:middle line:90%,end
<c.magenta>并且期待这种感觉像是魔法一样</c>

00:05:15.315 --> 00:05:17.551 align:middle line:90%,end
<c.magenta>并且用户不应该</c>
<c.magenta>一直抬着手腕</c>

00:05:17.618 --> 00:05:20.187 align:middle line:90%,end
<c.magenta>因为应用需要完成</c>
<c.magenta>它需要完成的任务</c>

00:05:20.521 --> 00:05:23.190 align:middle line:90%,end
<c.magenta>并且这对于我们的用户来说</c>
<c.magenta>的确是一种很常见的痛苦</c>

00:05:24.124 --> 00:05:25.826 align:middle line:90%,end
<c.magenta>所以我们思考了很多</c>

00:05:25.893 --> 00:05:28.629 align:middle line:90%,end
<c.magenta>关于我们可以给</c>
<c.magenta>你们大家提供更多运行时间</c>

00:05:28.962 --> 00:05:32.232 align:middle line:90%,end
<c.magenta>以帮助完成</c>
<c.magenta>用户的任务的各种不同的方式</c>

00:05:33.433 --> 00:05:36.937 align:middle line:90%,end
<c.magenta>那么今天</c>
<c.magenta>我们引入了一批新功能</c>

00:05:37.137 --> 00:05:38.939 align:middle line:90%,end
<c.magenta>我们把它叫作</c>
<c.magenta>Frontmost App State</c>

00:05:39.540 --> 00:05:41.875 align:middle line:90%,end
<c.magenta>可以帮助你设计</c>
<c.magenta>此种情况下的用户体验</c>

00:05:44.478 --> 00:05:47.347 align:middle line:90%,end
<c.magenta>那么我们就不要再啰嗦了</c>
<c.magenta>现在来谈谈我们的应用吧</c>

00:05:47.981 --> 00:05:49.783 align:middle line:90%,end
<c.magenta>那么 这款应用叫作</c>

00:05:50.884 --> 00:05:53.387 align:middle line:90%,end
<c.magenta>Apple Pie Me</c>
<c.magenta>让我们看看它是什么样子</c>

00:05:53.887 --> 00:05:55.856 align:middle line:90%,end
<c.magenta>那么 这是一种外卖服务</c>

00:05:55.923 --> 00:05:58.592 align:middle line:90%,end
<c.magenta>无论你在哪里都能</c>
<c.magenta>叫外卖给你送苹果派</c>

00:05:59.059 --> 00:06:01.228 align:middle line:90%,end
<c.magenta>那么一天吃一个苹果派</c>
<c.magenta>就不需要去医院了 对吧？</c>

00:05:59.059 --> 00:06:01.228 align:middle line:90%,end
<c.magenta>那么一天吃一个苹果派</c>
<c.magenta>就不需要去医院了 对吧？</c>

00:06:01.662 --> 00:06:04.464 align:middle line:90%,end
<c.magenta>我想是的 至少我真心希望这是真的</c>

00:06:04.531 --> 00:06:07.401 align:middle line:90%,end
<c.magenta>因为我每天都会吃一个苹果派</c>

00:06:07.467 --> 00:06:08.669 align:middle line:90%,end
<c.magenta>美味无比啊</c>

00:06:09.837 --> 00:06:11.338 align:middle line:90%,end
<c.magenta>而且我非常忙</c>

00:06:11.572 --> 00:06:14.174 align:middle line:90%,end
<c.magenta>我总是想能快速地</c>
<c.magenta>订购苹果派</c>

00:06:14.241 --> 00:06:16.009 align:middle line:90%,end
<c.magenta>并且送到我所在的地方</c>
<c.magenta>无论我在哪儿</c>

00:06:16.710 --> 00:06:19.446 align:middle line:90%,end
<c.magenta>而且 最重要的是</c>
<c.magenta>我想轻触订购按钮</c>

00:06:19.746 --> 00:06:22.482 align:middle line:90%,end
<c.magenta>然后我就可以放下手腕</c>
<c.magenta>之后我就照常生活和工作</c>

00:06:23.183 --> 00:06:27.387 align:middle line:90%,end
<c.magenta>在watchOS 3中</c>
<c.magenta>创建一种完美的 用户体验有点困难</c>

00:06:27.688 --> 00:06:30.090 align:middle line:90%,end
<c.magenta>但在watchOS 4中</c>
<c.magenta>我要给你展示如何取悦用户</c>

00:06:30.157 --> 00:06:32.226 align:middle line:90%,end
<c.magenta>以及如何让用户感到震惊</c>

00:06:32.292 --> 00:06:34.161 align:middle line:90%,end
<c.magenta>通过我们的新功能</c>
<c.magenta>Frontmost App State</c>

00:06:36.496 --> 00:06:38.966 align:middle line:90%,end
<c.magenta>那么 为了帮助我解释</c>
<c.magenta>Frontmost App State</c>

00:06:39.132 --> 00:06:43.003 align:middle line:90%,end
<c.magenta>我们要谈一下 手表上的应用状态</c>
<c.magenta>到底是什么意思</c>

00:06:44.004 --> 00:06:45.806 align:middle line:90%,end
<c.magenta>“frontmost”这个术语</c>
<c.magenta>是什么意思</c>

00:06:46.340 --> 00:06:48.775 align:middle line:90%,end
<c.magenta>你即将获得的</c>
<c.magenta>增强版功能有哪些</c>

00:06:49.276 --> 00:06:52.913 align:middle line:90%,end
<c.magenta>最后我们还要具体看一下</c>
<c.magenta>Apple Pie Me应用的架构设计</c>

00:06:55.449 --> 00:06:57.718 align:middle line:90%,end
<c.magenta>那么 比如说</c>
<c.magenta>用户决定启动我们的应用</c>

00:06:58.051 --> 00:07:01.421 align:middle line:90%,end
<c.magenta>那么在这里 应用已经在前台了</c>
<c.magenta>屏幕是亮着的</c>

00:06:58.051 --> 00:07:01.421 align:middle line:90%,end
<c.magenta>那么在这里 应用已经在前台了</c>
<c.magenta>屏幕是亮着的</c>

00:07:01.622 --> 00:07:04.057 align:middle line:90%,end
<c.magenta>那在这种情况下</c>
<c.magenta>应用状态是活跃的</c>

00:07:04.124 --> 00:07:05.392 align:middle line:90%,end
<c.magenta>（活跃的</c>
<c.magenta>订购派！）</c>

00:07:05.459 --> 00:07:08.395 align:middle line:90%,end
<c.magenta>那么现在 比如说用户</c>
<c.magenta>决定返回到表盘</c>

00:07:09.296 --> 00:07:13.400 align:middle line:90%,end
<c.magenta>那么在这种情况下</c>
<c.magenta>应用实际上是处于后台</c>

00:07:13.867 --> 00:07:16.503 align:middle line:90%,end
<c.magenta>例如 你的应用</c>

00:07:16.570 --> 00:07:18.605 align:middle line:90%,end
<c.magenta>可能会运行界面元素的更新</c>
<c.magenta>比如说</c>

00:07:20.340 --> 00:07:22.609 align:middle line:90%,end
<c.magenta>现在 比如说用户</c>
<c.magenta>决定返回到我们的应用</c>

00:07:23.710 --> 00:07:25.646 align:middle line:90%,end
<c.magenta>那么 我们又在前台保持活跃了</c>

00:07:25.913 --> 00:07:27.548 align:middle line:90%,end
<c.magenta>现在用户正在使用应用</c>

00:07:27.814 --> 00:07:29.917 align:middle line:90%,end
<c.magenta>但他们决定要放下手腕</c>

00:07:30.317 --> 00:07:31.485 align:middle line:90%,end
<c.magenta>那么屏幕就关闭了</c>

00:07:32.186 --> 00:07:35.422 align:middle line:90%,end
<c.magenta>而你的应用也因为如此</c>
<c.magenta>不再处于前台了</c>

00:07:35.956 --> 00:07:38.792 align:middle line:90%,end
<c.magenta>然而 因为你的应用</c>
<c.magenta>是用户最后一个使用的应用</c>

00:07:38.892 --> 00:07:40.260 align:middle line:90%,end
<c.magenta>它是一个处于最前端的应用</c>

00:07:41.161 --> 00:07:45.265 align:middle line:90%,end
<c.magenta>所以当用户再次抬起手腕时</c>
<c.magenta>他们将看到你的应用</c>

00:07:45.499 --> 00:07:46.800 align:middle line:90%,end
<c.magenta>而不是表盘</c>

00:07:48.435 --> 00:07:51.738 align:middle line:90%,end
<c.magenta>在这个时间段内 我们就把你的应用</c>
<c.magenta>看作frontmost应用</c>

00:07:52.873 --> 00:07:56.009 align:middle line:90%,end
<c.magenta>那么现在</c>
<c.magenta>当你的应用是frontmost时</c>

00:07:56.210 --> 00:07:58.445 align:middle line:90%,end
<c.magenta>应用状态应该是后台</c>

00:07:59.012 --> 00:08:01.949 align:middle line:90%,end
<c.magenta>而你可能在想到底该如何</c>

00:07:59.012 --> 00:08:01.949 align:middle line:90%,end
<c.magenta>而你可能在想到底该如何</c>

00:08:02.015 --> 00:08:04.284 align:middle line:90%,end
<c.magenta>或应用要在前台</c>
<c.magenta>保持frontmost多长时间？</c>

00:08:05.919 --> 00:08:08.222 align:middle line:90%,end
<c.magenta>那么 对于全部应用来说</c>
<c.magenta>这个时间是两分钟</c>

00:08:09.256 --> 00:08:12.426 align:middle line:90%,end
<c.magenta>然而 如果用户期待</c>

00:08:12.860 --> 00:08:15.462 align:middle line:90%,end
<c.magenta>当他们再次抬起手腕时</c>
<c.magenta>看到你的应用</c>

00:08:15.596 --> 00:08:17.464 align:middle line:90%,end
<c.magenta>那么你可以使用一个新的API</c>

00:08:17.531 --> 00:08:20.000 align:middle line:90%,end
<c.magenta>来延伸这个超时时间</c>
<c.magenta>可以延伸到八分钟</c>

00:08:21.168 --> 00:08:22.369 align:middle line:90%,end
<c.magenta>那么比如说</c>

00:08:22.436 --> 00:08:24.838 align:middle line:90%,end
<c.magenta>在行驶过程中 若你是一个拼车应用</c>

00:08:25.272 --> 00:08:27.641 align:middle line:90%,end
<c.magenta>那么在frontmost状态时</c>
<c.magenta>可能需要额外的时间</c>

00:08:27.708 --> 00:08:29.943 align:middle line:90%,end
<c.magenta>因为用户很可能期待</c>
<c.magenta>再次抬起手腕时</c>

00:08:30.244 --> 00:08:33.547 align:middle line:90%,end
<c.magenta>看到你的应用</c>
<c.magenta>这是合理的</c>

00:08:34.948 --> 00:08:39.686 align:middle line:90%,end
<c.magenta>然而 在很多情况下</c>
<c.magenta>如果你忘记关闭应用 当不再需要它时</c>

00:08:39.753 --> 00:08:44.157 align:middle line:90%,end
<c.magenta>你可能会不知不觉地 惹恼你的用户</c>
<c.magenta>并给他们留下一种低级的用户体验</c>

00:08:44.491 --> 00:08:49.263 align:middle line:90%,end
<c.magenta>那么 请时刻确保要关掉应用</c>
<c.magenta>并将时间重新设置为两分钟</c>

00:08:49.396 --> 00:08:51.164 align:middle line:90%,end
<c.magenta>当你不再需要这种体验时</c>

00:08:52.766 --> 00:08:56.570 align:middle line:90%,end
<c.magenta>那么让我们来看看代码</c>
<c.magenta>看如何启用延伸超时时间</c>

00:08:58.739 --> 00:08:59.873 align:middle line:90%,end
<c.magenta>非常简单</c>

00:08:59.940 --> 00:09:02.409 align:middle line:90%,end
<c.magenta>这是WKExtension上的一个</c>
<c.magenta>布尔型属性</c>

00:08:59.940 --> 00:09:02.409 align:middle line:90%,end
<c.magenta>这是WKExtension上的一个</c>
<c.magenta>布尔型属性</c>

00:09:02.576 --> 00:09:05.112 align:middle line:90%,end
<c.magenta>当我们想获得八分钟时</c>
<c.magenta>我们可以把它设为真</c>

00:09:05.379 --> 00:09:07.714 align:middle line:90%,end
<c.magenta>而当我们想返回到</c>
<c.magenta>默认的两分钟时</c>

00:09:07.781 --> 00:09:09.116 align:middle line:90%,end
<c.magenta>我们只需要把它设为假即可</c>

00:09:12.252 --> 00:09:14.655 align:middle line:90%,end
<c.magenta>那么 我还想提的一点是</c>

00:09:14.922 --> 00:09:17.824 align:middle line:90%,end
<c.magenta>如果用户抬起手腕</c>
<c.magenta>并查看了你的应用</c>

00:09:18.058 --> 00:09:21.195 align:middle line:90%,end
<c.magenta>然后超时时间就被重设了</c>
<c.magenta>无论是否…</c>

00:09:22.095 --> 00:09:24.765 align:middle line:90%,end
<c.magenta>…你是否使用frontmost延伸API</c>

00:09:25.732 --> 00:09:29.436 align:middle line:90%,end
<c.magenta>从根本上来说 如果用户仍然</c>
<c.magenta>有兴趣继续使用你的应用</c>

00:09:29.670 --> 00:09:31.238 align:middle line:90%,end
<c.magenta>你的应用将会保持</c>
<c.magenta>frontmost</c>

00:09:34.274 --> 00:09:36.877 align:middle line:90%,end
<c.magenta>那么现在我们知道</c>
<c.magenta>frontmost是什么意思了</c>

00:09:36.944 --> 00:09:38.545 align:middle line:90%,end
<c.magenta>但这到底意味着什么呢？</c>

00:09:38.645 --> 00:09:40.814 align:middle line:90%,end
<c.magenta>比如 这个新状态</c>
<c.magenta>到底能给我们带来什么？</c>

00:09:41.481 --> 00:09:44.017 align:middle line:90%,end
<c.magenta>嗯 让我们来看一些增强的功能</c>

00:09:46.119 --> 00:09:50.090 align:middle line:90%,end
<c.magenta>那么 我们修改了</c>
<c.magenta>如何恢复WatchConnectivity</c>

00:09:50.157 --> 00:09:51.992 align:middle line:90%,end
<c.magenta>和NSURLSession的概念</c>

00:09:52.192 --> 00:09:55.095 align:middle line:90%,end
<c.magenta>那么 我们现在已经</c>
<c.magenta>改进了迁移和连通性</c>

00:09:55.596 --> 00:09:58.966 align:middle line:90%,end
<c.magenta>我们还修改了一下</c>
<c.magenta>我们的任务完成度</c>

00:09:59.666 --> 00:10:01.201 align:middle line:90%,end
<c.magenta>然后 我们还允许在这种</c>

00:09:59.666 --> 00:10:01.201 align:middle line:90%,end
<c.magenta>然后 我们还允许在这种</c>

00:10:01.268 --> 00:10:02.903 align:middle line:90%,end
<c.magenta>frontmost状态下</c>
<c.magenta>实施力触觉</c>

00:10:03.203 --> 00:10:06.173 align:middle line:90%,end
<c.magenta>最后 还有一条frontmost通知</c>

00:10:06.306 --> 00:10:09.977 align:middle line:90%,end
<c.magenta>以便我们可以通过</c>
<c.magenta>用户通知框架来处理这个</c>

00:10:10.043 --> 00:10:11.745 align:middle line:90%,end
<c.magenta>并选择最恰当的用户体验</c>

00:10:13.547 --> 00:10:14.681 align:middle line:90%,end
<c.magenta>那么 让我们具体来看一下</c>

00:10:15.182 --> 00:10:17.017 align:middle line:90%,end
<c.magenta>那么对于WatchConnectivity</c>

00:10:17.084 --> 00:10:20.787 align:middle line:90%,end
<c.magenta>我们修改了</c>
<c.magenta>后台迁移的工作方式</c>

00:10:21.321 --> 00:10:24.525 align:middle line:90%,end
<c.magenta>那么当你在手机的</c>
<c.magenta>更新应用情境下使用时</c>

00:10:24.591 --> 00:10:27.327 align:middle line:90%,end
<c.magenta>迁移用户信息或迁移文件</c>

00:10:27.628 --> 00:10:30.364 align:middle line:90%,end
<c.magenta>这个请求 当你从手机上</c>
<c.magenta>发送到手表上时</c>

00:10:30.664 --> 00:10:33.867 align:middle line:90%,end
<c.magenta>它就会这样实现</c>
<c.magenta>在手表上唤醒你的应用</c>

00:10:34.101 --> 00:10:35.702 align:middle line:90%,end
<c.magenta>然后再提交你的有效数据</c>

00:10:37.204 --> 00:10:41.808 align:middle line:90%,end
<c.magenta>其中我想提的一点</c>
<c.magenta>是与WatchConnectivity有关的</c>

00:10:42.009 --> 00:10:43.810 align:middle line:90%,end
<c.magenta>就是当你处于</c>
<c.magenta>frontmost状态时</c>

00:10:43.944 --> 00:10:45.913 align:middle line:90%,end
<c.magenta>是不会发送信息的</c>
<c.magenta>而屏幕关闭时才会发送</c>

00:10:46.113 --> 00:10:48.048 align:middle line:90%,end
<c.magenta>因为你的应用状态改成了后台</c>

00:10:48.949 --> 00:10:51.752 align:middle line:90%,end
<c.magenta>那么请一定要确保</c>
<c.magenta>那个调用首先是可达成的</c>

00:10:51.952 --> 00:10:53.820 align:middle line:90%,end
<c.magenta>然后才能允许你发送信息</c>

00:10:55.189 --> 00:10:57.891 align:middle line:90%,end
<c.magenta>并且顺着WatchConnectivity</c>
<c.magenta>这条脉络</c>

00:10:58.125 --> 00:11:00.494 align:middle line:90%,end
<c.magenta>我们还修改了</c>

00:10:58.125 --> 00:11:00.494 align:middle line:90%,end
<c.magenta>我们还修改了</c>

00:11:00.561 --> 00:11:01.862 align:middle line:90%,end
<c.magenta>NSURLSession</c>
<c.magenta>的恢复理念</c>

00:11:02.429 --> 00:11:04.932 align:middle line:90%,end
<c.magenta>那么当我们有后台下载时</c>

00:11:04.998 --> 00:11:07.334 align:middle line:90%,end
<c.magenta>比如说 系统正在替我们下载</c>

00:11:08.168 --> 00:11:09.570 align:middle line:90%,end
<c.magenta>那么当系统完成后</c>

00:11:09.636 --> 00:11:11.805 align:middle line:90%,end
<c.magenta>它会自动唤醒我们的应用</c>

00:11:11.872 --> 00:11:13.240 align:middle line:90%,end
<c.magenta>如果我们正处于</c>
<c.magenta>frontmost状态</c>

00:11:13.440 --> 00:11:16.710 align:middle line:90%,end
<c.magenta>并直接将数据提交给我们的应用</c>

00:11:18.345 --> 00:11:22.015 align:middle line:90%,end
<c.magenta>当然 对于NSURLSession</c>
<c.magenta>实际上有两个主要部分</c>

00:11:22.249 --> 00:11:23.217 align:middle line:90%,end
<c.magenta>其中有恢复</c>

00:11:23.283 --> 00:11:27.221 align:middle line:90%,end
<c.magenta>当系统彻底下载完</c>
<c.magenta>你所需要的东西之后</c>

00:11:27.554 --> 00:11:30.991 align:middle line:90%,end
<c.magenta>然后就是</c>
<c.magenta>后台的下载启动</c>

00:11:32.392 --> 00:11:35.629 align:middle line:90%,end
<c.magenta>那么在大部分情况下</c>
<c.magenta>这将会立即发生</c>

00:11:36.163 --> 00:11:39.967 align:middle line:90%,end
<c.magenta>但在很罕见的情况下</c>
<c.magenta>可能会延迟达10分钟</c>

00:11:40.234 --> 00:11:42.302 align:middle line:90%,end
<c.magenta>但这是非常罕见的情况</c>

00:11:43.437 --> 00:11:45.672 align:middle line:90%,end
<c.magenta>如果你用过</c>
<c.magenta>NSURLSession</c>

00:11:45.973 --> 00:11:49.376 align:middle line:90%,end
<c.magenta>很可能今天在座的各位</c>
<c.magenta>几乎都用过吧 对于后台迁移来说</c>

00:11:49.443 --> 00:11:51.812 align:middle line:90%,end
<c.magenta>在frontmost状态时</c>
<c.magenta>进行后台迁移的确非常重要</c>

00:11:52.212 --> 00:11:58.652 align:middle line:90%,end
<c.magenta>完全取决于连通性的</c>
<c.magenta>启动和恢复</c>

00:11:58.952 --> 00:12:01.855 align:middle line:90%,end
<c.magenta>将彻底改变手表的设计美化</c>

00:11:58.952 --> 00:12:01.855 align:middle line:90%,end
<c.magenta>将彻底改变手表的设计美化</c>

00:12:01.922 --> 00:12:02.756 align:middle line:90%,end
<c.magenta>同时</c>

00:12:02.990 --> 00:12:06.527 align:middle line:90%,end
<c.magenta>此外 通过WatchConnectivity</c>
<c.magenta>可以直接从手机上得到请求</c>

00:12:09.563 --> 00:12:11.865 align:middle line:90%,end
<c.magenta>那么 另外一点就是</c>
<c.magenta>很多时候…</c>

00:12:12.833 --> 00:12:14.434 align:middle line:90%,end
<c.magenta>用户可能会放下手腕</c>

00:12:14.501 --> 00:12:18.238 align:middle line:90%,end
<c.magenta>在那种情况下</c>
<c.magenta>你的应用就会进入后台</c>

00:12:18.739 --> 00:12:21.074 align:middle line:90%,end
<c.magenta>但你可能需要</c>
<c.magenta>继续完成一个任务</c>

00:12:21.141 --> 00:12:23.977 align:middle line:90%,end
<c.magenta>那么比如说需要关闭数据库</c>
<c.magenta>或做其它事</c>

00:12:24.545 --> 00:12:27.614 align:middle line:90%,end
<c.magenta>那么你就可以</c>
<c.magenta>使用NSProcessInfo类</c>

00:12:27.681 --> 00:12:30.017 align:middle line:90%,end
<c.magenta>来实时失效活动API</c>

00:12:30.317 --> 00:12:33.387 align:middle line:90%,end
<c.magenta>当在前台启动时</c>
<c.magenta>可以得到最多30秒钟的时间</c>

00:12:33.754 --> 00:12:36.156 align:middle line:90%,end
<c.magenta>当在后台启动时</c>
<c.magenta>可以得到最多10秒钟的时间</c>

00:12:36.557 --> 00:12:39.092 align:middle line:90%,end
<c.magenta>那么比如说</c>
<c.magenta>如果是在后台启动</c>

00:12:39.159 --> 00:12:42.262 align:middle line:90%,end
<c.magenta>也许你正在更新界面元素</c>

00:12:42.429 --> 00:12:45.032 align:middle line:90%,end
<c.magenta>你只需要一小点</c>
<c.magenta>额外的时间就能完成</c>

00:12:45.499 --> 00:12:46.600 align:middle line:90%,end
<c.magenta>那么 你就可以使用</c>

00:12:46.667 --> 00:12:49.670 align:middle line:90%,end
<c.magenta>NSProcessInfo类来获得</c>
<c.magenta>一些额外的时间</c>

00:12:50.871 --> 00:12:54.341 align:middle line:90%,end
<c.magenta>现在 当你处于 frontmost状态时</c>
<c.magenta>你可以使用那个API</c>

00:12:54.741 --> 00:12:58.512 align:middle line:90%,end
<c.magenta>然后…会提高你的系统优先级</c>

00:12:58.946 --> 00:13:01.815 align:middle line:90%,end
<c.magenta>因为系统相信你的应用对于</c>

00:12:58.946 --> 00:13:01.815 align:middle line:90%,end
<c.magenta>因为系统相信你的应用对于</c>

00:13:01.882 --> 00:13:05.118 align:middle line:90%,end
<c.magenta>用户来说更重要 因为它仍然</c>
<c.magenta>处于frontmost状态</c>

00:13:05.452 --> 00:13:07.754 align:middle line:90%,end
<c.magenta>系统的优先级会提高</c>

00:13:07.988 --> 00:13:10.757 align:middle line:90%,end
<c.magenta>所以你就更有可能获得</c>

00:13:10.991 --> 00:13:13.727 align:middle line:90%,end
<c.magenta>为用户完成任务所需要的运行时间了</c>

00:13:16.930 --> 00:13:20.868 align:middle line:90%,end
<c.magenta>处于frontmost状态的</c>
<c.magenta>另一个好处 是你可以实施力触觉</c>

00:13:21.335 --> 00:13:23.403 align:middle line:90%,end
<c.magenta>所以当你因为其它原因</c>
<c.magenta>而拥有运行时间时</c>

00:13:23.470 --> 00:13:25.105 align:middle line:90%,end
<c.magenta>你可以简单地实施一个力触觉</c>

00:13:26.073 --> 00:13:26.907 align:middle line:90%,end
<c.magenta>谢谢大家</c>

00:13:30.277 --> 00:13:33.514 align:middle line:90%,end
<c.magenta>那么有时候力触觉 可能会有一点儿</c>
<c.magenta>这样或那样的迷惑</c>

00:13:33.580 --> 00:13:37.718 align:middle line:90%,end
<c.magenta>现在让我进一步</c>
<c.magenta>具体讲一下</c>

00:13:37.851 --> 00:13:39.920 align:middle line:90%,end
<c.magenta>那么如果是力触觉</c>
<c.magenta>如果你实施力触觉</c>

00:13:39.987 --> 00:13:43.123 align:middle line:90%,end
<c.magenta>比如说正在用扬声器播放音频</c>

00:13:43.190 --> 00:13:45.792 align:middle line:90%,end
<c.magenta>那么只能实施</c>
<c.magenta>音频形式的力触觉</c>

00:13:46.059 --> 00:13:47.895 align:middle line:90%,end
<c.magenta>并且会避开现在正在播放的东西</c>

00:13:48.629 --> 00:13:51.098 align:middle line:90%,end
<c.magenta>如果正在使用蓝牙耳机播放音频</c>

00:13:51.298 --> 00:13:53.967 align:middle line:90%,end
<c.magenta>并且屏幕亮着</c>
<c.magenta>那么就可以实施力触觉</c>

00:13:54.368 --> 00:13:56.970 align:middle line:90%,end
<c.magenta>如果屏幕关闭</c>
<c.magenta>则只能播放音频</c>

00:13:57.137 --> 00:14:00.174 align:middle line:90%,end
<c.magenta>因为播放音频</c>
<c.magenta>对于用户来说最有意义</c>

00:13:57.137 --> 00:14:00.174 align:middle line:90%,end
<c.magenta>因为播放音频</c>
<c.magenta>对于用户来说最有意义</c>

00:14:03.010 --> 00:14:05.279 align:middle line:90%,end
<c.magenta>最后 处于</c>
<c.magenta>frontmost的另一个好处</c>

00:14:05.345 --> 00:14:08.482 align:middle line:90%,end
<c.magenta>就是当你接收远程</c>
<c.magenta>或本地通知时</c>

00:14:08.549 --> 00:14:12.452 align:middle line:90%,end
<c.magenta>通过用户通知框架</c>
<c.magenta>你的应用将会被调用</c>

00:14:12.819 --> 00:14:15.656 align:middle line:90%,end
<c.magenta>然后你就可以决定对你的用户来说</c>
<c.magenta>最合适的用户体验</c>

00:14:16.089 --> 00:14:20.460 align:middle line:90%,end
<c.magenta>那么也许你只是想 更新你的UI</c>
<c.magenta>并使用常见方式发布通知</c>

00:14:20.527 --> 00:14:22.296 align:middle line:90%,end
<c.magenta>但现在你有其它选择了</c>

00:14:23.897 --> 00:14:27.067 align:middle line:90%,end
<c.magenta>那么你的应用将会被调用</c>
<c.magenta>当你覆盖函数</c>

00:14:27.134 --> 00:14:28.368 align:middle line:90%,end
<c.magenta>userNotification</c>

00:14:28.569 --> 00:14:31.171 align:middle line:90%,end
<c.magenta>willPresent notification</c>
<c.magenta>withCompletionHandler时</c>

00:14:32.940 --> 00:14:35.175 align:middle line:90%,end
<c.magenta>并且所有这些好处的关键是</c>

00:14:35.242 --> 00:14:38.078 align:middle line:90%,end
<c.magenta>这可以真正改变设计美化</c>

00:14:38.412 --> 00:14:41.615 align:middle line:90%,end
<c.magenta>其中最棒的是</c>
<c.magenta>这是完全免费的</c>

00:14:42.282 --> 00:14:44.785 align:middle line:90%,end
<c.magenta>所以如果你的应用有</c>
<c.magenta>WatchConnectivity</c>

00:14:44.852 --> 00:14:46.854 align:middle line:90%,end
<c.magenta>或NSURLSession恢复</c>

00:14:47.020 --> 00:14:49.089 align:middle line:90%,end
<c.magenta>你的应用现在可以</c>
<c.magenta>获得额外的运行时间了</c>

00:14:49.756 --> 00:14:52.659 align:middle line:90%,end
<c.magenta>如果你的应用实施</c>
<c.magenta>willPresent通知回调</c>

00:14:53.026 --> 00:14:55.362 align:middle line:90%,end
<c.magenta>你现在可以免费</c>
<c.magenta>获得frontmost状态了</c>

00:14:56.096 --> 00:14:57.764 align:middle line:90%,end
<c.magenta>同时 假如 比如说</c>

00:14:57.831 --> 00:15:02.202 align:middle line:90%,end
<c.magenta>你想使用一个NSProcessInfo</c>
<c.magenta>performExpiringActivity API</c>

00:14:57.831 --> 00:15:02.202 align:middle line:90%,end
<c.magenta>你想使用一个NSProcessInfo</c>
<c.magenta>performExpiringActivity API</c>

00:15:02.269 --> 00:15:05.205 align:middle line:90%,end
<c.magenta>来完成applicationWillEnter</c>
<c.magenta>Background上的任务</c>

00:15:05.572 --> 00:15:07.674 align:middle line:90%,end
<c.magenta>你将获得</c>
<c.magenta>系统级别的额外优先级</c>

00:15:08.675 --> 00:15:11.011 align:middle line:90%,end
<c.magenta>在watchOS 4中</c>
<c.magenta>你什么也不用做</c>

00:15:11.278 --> 00:15:15.916 align:middle line:90%,end
<c.magenta>而且你现有的原生应用</c>
<c.magenta>将自动变得更精简</c>

00:15:15.983 --> 00:15:17.651 align:middle line:90%,end
<c.magenta>可操作性更强</c>

00:15:18.252 --> 00:15:21.321 align:middle line:90%,end
<c.magenta>而且通过我们刚才说过的</c>
<c.magenta>统一进程运行时间</c>

00:15:21.588 --> 00:15:23.857 align:middle line:90%,end
<c.magenta>应用的响应性将会变得更迅速</c>

00:15:24.858 --> 00:15:27.861 align:middle line:90%,end
<c.magenta>但是 我们希望你们可以进一步考虑</c>

00:15:28.695 --> 00:15:31.431 align:middle line:90%,end
<c.magenta>现在你的应用可以</c>
<c.magenta>在功能上向前跃进一大步</c>

00:15:31.498 --> 00:15:33.767 align:middle line:90%,end
<c.magenta>如果你考虑</c>
<c.magenta>使用这些新功能的话</c>

00:15:34.668 --> 00:15:37.738 align:middle line:90%,end
<c.magenta>你需要架构你的应用</c>
<c.magenta>来打造这种体验</c>

00:15:38.939 --> 00:15:42.009 align:middle line:90%,end
<c.magenta>所以现在 让我们通过</c>
<c.magenta>Apple Pie Me应用来具体谈谈</c>

00:15:42.209 --> 00:15:45.612 align:middle line:90%,end
<c.magenta>并且开始架构我们的应用</c>
<c.magenta>通过这些新功能</c>

00:15:46.280 --> 00:15:49.416 align:middle line:90%,end
<c.magenta>现在 让我们回顾一下</c>
<c.magenta>应用的设计目标</c>

00:15:49.483 --> 00:15:51.051 align:middle line:90%,end
<c.magenta>从用户的视角</c>

00:15:53.053 --> 00:15:55.756 align:middle line:90%,end
<c.magenta>那么我们现在是在用户的时间轴上</c>

00:15:56.089 --> 00:15:58.392 align:middle line:90%,end
<c.magenta>而实际上</c>
<c.magenta>用户只是想订购苹果派</c>

00:15:58.692 --> 00:16:00.327 align:middle line:90%,end
<c.magenta>然后他们会吃掉苹果派</c>

00:15:58.692 --> 00:16:00.327 align:middle line:90%,end
<c.magenta>然后他们会吃掉苹果派</c>

00:16:00.861 --> 00:16:02.095 align:middle line:90%,end
<c.magenta>有时候在这期间</c>

00:16:02.162 --> 00:16:03.964 align:middle line:90%,end
<c.magenta>他们会想浏览订单的状态</c>

00:16:04.565 --> 00:16:06.967 align:middle line:90%,end
<c.magenta>所以从用户的视角来说</c>
<c.magenta>这是一个非常简单的应用</c>

00:16:07.568 --> 00:16:10.737 align:middle line:90%,end
<c.magenta>但现在 让我们从应用的视角</c>
<c.magenta>来分解一下问题所在</c>

00:16:12.940 --> 00:16:15.142 align:middle line:90%,end
<c.magenta>那么当按下订购按钮时</c>

00:16:15.309 --> 00:16:17.411 align:middle line:90%,end
<c.magenta>我们将会把订单</c>
<c.magenta>发送到服务器</c>

00:16:18.011 --> 00:16:22.216 align:middle line:90%,end
<c.magenta>最终 当餐厅正常收到请求时</c>

00:16:22.883 --> 00:16:26.186 align:middle line:90%,end
<c.magenta>我们就知道 苹果派正在烹制中</c>
<c.magenta>然后我们就会 发送一个推送通知</c>

00:16:26.620 --> 00:16:28.388 align:middle line:90%,end
<c.magenta>然后 我们还想告诉用户</c>

00:16:28.722 --> 00:16:33.160 align:middle line:90%,end
<c.magenta>配送员正在路上</c>
<c.magenta>或者配送员就在门外</c>

00:16:34.161 --> 00:16:35.996 align:middle line:90%,end
<c.magenta>让我们进一步分解</c>

00:16:36.063 --> 00:16:36.997 align:middle line:90%,end
<c.magenta>逐步来看</c>

00:16:39.132 --> 00:16:43.003 align:middle line:90%,end
<c.magenta>那么我们现在 看的是接收订单</c>
<c.magenta>具体该如何实现呢？</c>

00:16:43.604 --> 00:16:47.474 align:middle line:90%,end
<c.magenta>一旦用户轻触订购按钮</c>
<c.magenta>我们到底应该显示什么东西？</c>

00:16:48.575 --> 00:16:50.611 align:middle line:90%,end
<c.magenta>我们将把订单</c>
<c.magenta>发送到我们的服务器上</c>

00:16:50.677 --> 00:16:53.680 align:middle line:90%,end
<c.magenta>并且不能保证 会立即得到反馈</c>
<c.magenta>无论什么原因</c>

00:16:54.381 --> 00:16:58.519 align:middle line:90%,end
<c.magenta>并且 我们会不会 显示这样的东西</c>
<c.magenta>也许是一个加载指示器？</c>

00:16:59.086 --> 00:17:02.222 align:middle line:90%,end
<c.magenta>那么 有时候加载指示器</c>
<c.magenta>对于用户来说的确有意义</c>

00:16:59.086 --> 00:17:02.222 align:middle line:90%,end
<c.magenta>那么 有时候加载指示器</c>
<c.magenta>对于用户来说的确有意义</c>

00:17:02.289 --> 00:17:05.157 align:middle line:90%,end
<c.magenta>但在这种情况下</c>
<c.magenta>实际上是令人非常困惑的</c>

00:17:05.259 --> 00:17:09.630 align:middle line:90%,end
<c.magenta>我可能会看到这个 然后我可能会想</c>
<c.magenta>“哦 我需要一直抬着手腕 ”</c>

00:17:09.963 --> 00:17:11.565 align:middle line:90%,end
<c.magenta>“我需要抬多久呢？”</c>

00:17:12.031 --> 00:17:14.233 align:middle line:90%,end
<c.magenta>这真的不是一种</c>
<c.magenta>很好的手表用户体验</c>

00:17:15.202 --> 00:17:18.038 align:middle line:90%,end
<c.magenta>相反 我们实际上可以</c>
<c.magenta>显示一些这样的东西</c>

00:17:18.472 --> 00:17:20.741 align:middle line:90%,end
<c.magenta>所以 嘿 如果派准备好了</c>
<c.magenta>我们会震你的</c>

00:17:21.008 --> 00:17:24.444 align:middle line:90%,end
<c.magenta>然后用户就知道 他们可以放下手腕了</c>
<c.magenta>然后继续 接下来的生活和工作</c>

00:17:26.946 --> 00:17:29.416 align:middle line:10%
<c.magenta>那么 现在我们了解了</c>
<c.magenta>接收订单屏幕</c>

00:17:29.483 --> 00:17:32.753 align:middle line:10%
<c.magenta>我们知道我们只想立即</c>
<c.magenta>显示这个新UI</c>

00:17:33.153 --> 00:17:36.890 align:middle line:10%
<c.magenta>所以现在</c>
<c.magenta>让我们把这个分解成独立的组件</c>

00:17:38.392 --> 00:17:42.329 align:middle line:90%,end
<c.magenta>那么 我们想使用NSURLSession</c>
<c.magenta>并将订单发布到服务器上</c>

00:17:42.930 --> 00:17:45.165 align:middle line:90%,end
<c.magenta>而且我们还想延伸超时时间</c>

00:17:45.632 --> 00:17:47.434 align:middle line:90%,end
<c.magenta>然后就是更新我们的UI</c>

00:17:48.202 --> 00:17:52.673 align:middle line:90%,end
<c.magenta>最后 有时候我们的服务器</c>
<c.magenta>可能不会做出响应</c>

00:17:52.739 --> 00:17:56.376 align:middle line:90%,end
<c.magenta>或者出了什么毛病</c>
<c.magenta>我们需要能处理这些情况</c>

00:17:58.111 --> 00:18:01.949 align:middle line:90%,end
<c.magenta>所以 我们需要一种机制</c>
<c.magenta>可以允许我们安排一些东西</c>

00:17:58.111 --> 00:18:01.949 align:middle line:90%,end
<c.magenta>所以 我们需要一种机制</c>
<c.magenta>可以允许我们安排一些东西</c>

00:18:02.015 --> 00:18:04.184 align:middle line:90%,end
<c.magenta>比如 从现在开始的五分钟后</c>

00:18:04.585 --> 00:18:07.788 align:middle line:90%,end
<c.magenta>而且 我们还需要</c>
<c.magenta>不依赖于网络的东西</c>

00:18:08.422 --> 00:18:12.793 align:middle line:90%,end
<c.magenta>或者一些无论是否 处于frontmost状态</c>
<c.magenta>都能警示用户的东西</c>

00:18:14.628 --> 00:18:17.197 align:middle line:90%,end
<c.magenta>我们还需要一些</c>
<c.magenta>稍后能取消的东西</c>

00:18:18.131 --> 00:18:20.367 align:middle line:90%,end
<c.magenta>所以 如果你正在考虑本地通知</c>

00:18:20.434 --> 00:18:21.735 align:middle line:90%,end
<c.magenta>那么你是完全正确的</c>

00:18:22.402 --> 00:18:24.505 align:middle line:90%,end
<c.magenta>我们可以只显示一条本地通知</c>

00:18:24.571 --> 00:18:26.273 align:middle line:90%,end
<c.magenta>“哦 不！可能出错了 ”</c>

00:18:26.473 --> 00:18:29.209 align:middle line:90%,end
<c.magenta>然后 用户只需要</c>
<c.magenta>轻触重新订购按钮</c>

00:18:29.610 --> 00:18:33.647 align:middle line:90%,end
<c.magenta>就能获得另一个苹果派</c>
<c.magenta>或者他们只需要 轻触应用图标</c>

00:18:33.714 --> 00:18:35.682 align:middle line:90%,end
<c.magenta>并进入应用查看</c>
<c.magenta>到底哪儿出错了</c>

00:18:37.518 --> 00:18:39.520 align:middle line:90%,end
<c.magenta>让我们添加这最后一步</c>

00:18:40.654 --> 00:18:44.391 align:middle line:90%,end
<c.magenta>现在 让我们来看一些代码</c>
<c.magenta>看这个是如何实现的</c>

00:18:47.027 --> 00:18:48.695 align:middle line:90%,end
<c.magenta>那么现在我们</c>
<c.magenta>看的是IBAction函数</c>

00:18:48.762 --> 00:18:50.631 align:middle line:90%,end
<c.magenta>当按下订购按钮后</c>

00:18:51.298 --> 00:18:53.500 align:middle line:90%,end
<c.magenta>然后我们只想抓取后台会话</c>

00:18:53.567 --> 00:18:56.069 align:middle line:90%,end
<c.magenta>然后我们希望将订单</c>
<c.magenta>发送到服务器</c>

00:18:56.770 --> 00:18:59.006 align:middle line:90%,end
<c.magenta>然后因为有一个合理的期待</c>

00:18:59.206 --> 00:19:01.608 align:middle line:90%,end
<c.magenta>用户想再次抬起手腕时</c>
<c.magenta>看到我们的应用</c>

00:18:59.206 --> 00:19:01.608 align:middle line:90%,end
<c.magenta>用户想再次抬起手腕时</c>
<c.magenta>看到我们的应用</c>

00:19:01.675 --> 00:19:03.410 align:middle line:90%,end
<c.magenta>因为他们刚按下了订购按钮</c>

00:19:03.810 --> 00:19:06.380 align:middle line:90%,end
<c.magenta>那么我们就需要延伸</c>
<c.magenta>我们的frontmost超时时间</c>

00:19:07.581 --> 00:19:10.517 align:middle line:90%,end
<c.magenta>然后 我们要触发那个</c>
<c.magenta>以防万一的情境</c>

00:19:10.584 --> 00:19:12.819 align:middle line:90%,end
<c.magenta>我们的后备本地通知</c>

00:19:13.320 --> 00:19:15.589 align:middle line:90%,end
<c.magenta>然后我们就想重新加载新的UI</c>

00:19:18.759 --> 00:19:21.028 align:middle line:90%,end
<c.magenta>太棒了 那么现在</c>
<c.magenta>我们已经收到了订单</c>

00:19:21.094 --> 00:19:23.630 align:middle line:90%,end
<c.magenta>并且最终我们会发送</c>
<c.magenta>一条推送通知</c>

00:19:23.830 --> 00:19:25.098 align:middle line:90%,end
<c.magenta>当派正在烹制时</c>

00:19:25.866 --> 00:19:28.535 align:middle line:90%,end
<c.magenta>所以现在 比如说我们的用户</c>

00:19:28.602 --> 00:19:31.038 align:middle line:90%,end
<c.magenta>在我们收到订单后</c>
<c.magenta>放下了手腕</c>

00:19:32.706 --> 00:19:35.976 align:middle line:90%,end
<c.magenta>那么 在我们发送</c>
<c.magenta>那条通知之前</c>

00:19:36.243 --> 00:19:38.445 align:middle line:90%,end
<c.magenta>我们希望应用处于</c>
<c.magenta>Frontmost App State</c>

00:19:39.179 --> 00:19:43.016 align:middle line:84%,end
<c.magenta>但实际上 我们作为开发人员</c>
<c.magenta>并不是真的需要 了解太多关于用户</c>

00:19:43.083 --> 00:19:46.220 align:middle line:90%,end
<c.magenta>何时会放下手腕</c>
<c.magenta>或何时会抬起手腕</c>

00:19:46.486 --> 00:19:50.557 align:middle line:90%,end
<c.magenta>下一个事件真的非常重要</c>
<c.magenta>就是我们的推送通知</c>

00:19:50.624 --> 00:19:52.926 align:middle line:10%
<c.magenta>是警示用户</c>
<c.magenta>他们的派正在烹制中</c>

00:19:53.660 --> 00:19:54.995 align:middle line:10%
<c.magenta>如果应用处于</c>
<c.magenta>frontmost状态</c>

00:19:55.062 --> 00:19:58.532 align:middle line:10%
<c.magenta>我们将回调 willPresent通知</c>
<c.magenta>我们刚才提到过</c>

00:19:59.433 --> 00:20:01.435 align:middle line:10%
<c.magenta>反之 如果我们</c>
<c.magenta>不是处于frontmost状态</c>

00:19:59.433 --> 00:20:01.435 align:middle line:10%
<c.magenta>反之 如果我们</c>
<c.magenta>不是处于frontmost状态</c>

00:20:01.735 --> 00:20:04.071 align:middle line:10%
<c.magenta>用户将收到一条普通的通知</c>

00:20:05.005 --> 00:20:08.141 align:middle line:10%
<c.magenta>所以 让我们返回去 看一些代码</c>
<c.magenta>看我们该如何实现</c>

00:20:10.244 --> 00:20:13.747 align:middle line:90%,end
<c.magenta>那么我们要覆盖</c>
<c.magenta>用户通知中心</c>

00:20:13.814 --> 00:20:16.483 align:middle line:90%,end
<c.magenta>willPresent notification</c>
<c.magenta>withCompletionHandler</c>

00:20:17.084 --> 00:20:18.619 align:middle line:90%,end
<c.magenta>然后 我们想要做的第一件事</c>

00:20:18.886 --> 00:20:22.856 align:middle line:90%,end
<c.magenta>就是想确保</c>
<c.magenta>取消本地通知</c>

00:20:23.423 --> 00:20:25.792 align:middle line:90%,end
<c.magenta>然后 我们希望</c>
<c.magenta>重新加载新UI</c>

00:20:26.393 --> 00:20:29.396 align:middle line:90%,end
<c.magenta>然后 因为我们已经做了这些</c>
<c.magenta>我们希望震动一下用户</c>

00:20:29.463 --> 00:20:30.864 align:middle line:90%,end
<c.magenta>以便让他们了解并抬起手腕</c>

00:20:31.365 --> 00:20:34.301 align:middle line:90%,end
<c.magenta>最后 我们想调用</c>
<c.magenta>completionHandler并结束</c>

00:20:35.002 --> 00:20:37.137 align:middle line:90%,end
<c.magenta>而且 我希望能针对</c>
<c.magenta>completionHandler指出一点</c>

00:20:37.671 --> 00:20:40.474 align:middle line:90%,end
<c.magenta>它实际上用了一个</c>
<c.magenta>UNNotification PresentationOptions</c>

00:20:40.874 --> 00:20:44.745 align:middle line:90%,end
<c.magenta>那么这是警示选项</c>
<c.magenta>标记或声音</c>

00:20:45.712 --> 00:20:47.181 align:middle line:90%,end
<c.magenta>那么在这个具体的情况中</c>

00:20:47.247 --> 00:20:50.918 align:middle line:90%,end
<c.magenta>我们实际上并不想在</c>
<c.magenta>应用顶部显示一条通知</c>

00:20:51.251 --> 00:20:54.888 align:middle line:90%,end
<c.magenta>因为我们已经震动了用户</c>
<c.magenta>并且我们也已经更新了UI</c>

00:20:55.455 --> 00:20:57.558 align:middle line:90%,end
<c.magenta>所以我们只需要调用</c>
<c.magenta>completionHandler</c>

00:20:57.624 --> 00:20:59.393 align:middle line:90%,end
<c.magenta>不带其它选项</c>
<c.magenta>所以从根本上来说</c>

00:20:59.459 --> 00:21:01.528 align:middle line:90%,end
<c.magenta>我们要消耗通知</c>

00:20:59.459 --> 00:21:01.528 align:middle line:90%,end
<c.magenta>我们要消耗通知</c>

00:21:01.895 --> 00:21:05.365 align:middle line:90%,end
<c.magenta>然后 因为有震动</c>
<c.magenta>用户会抬起手腕</c>

00:21:09.169 --> 00:21:10.838 align:middle line:90%,end
<c.magenta>那么我们只是震动用户</c>

00:21:11.471 --> 00:21:13.407 align:middle line:90%,end
<c.magenta>并且他们可能会看到</c>
<c.magenta>类似这样的东西</c>

00:21:15.008 --> 00:21:16.810 align:middle line:90%,end
<c.magenta>那么 太棒了</c>
<c.magenta>他们的派正在被送来的路上</c>

00:21:16.944 --> 00:21:18.078 align:middle line:90%,end
<c.magenta>大约还有12分钟送到</c>

00:21:18.545 --> 00:21:19.546 align:middle line:90%,end
<c.magenta>正在炉子上烹制呢</c>

00:21:22.249 --> 00:21:25.519 align:middle line:10%
<c.magenta>那么这是我们所在的位置</c>
<c.magenta>现在让我们返回去看时间轴</c>

00:21:26.753 --> 00:21:29.189 align:middle line:90%,end
<c.magenta>那么现在我们知道</c>
<c.magenta>我们的派正在由餐厅烹制</c>

00:21:29.790 --> 00:21:33.560 align:middle line:90%,end
<c.magenta>现在 比如说我们希望用户</c>
<c.magenta>可以抬起手腕</c>

00:21:33.627 --> 00:21:35.996 align:middle line:90%,end
<c.magenta>并尽可能查看最新</c>
<c.magenta>更新的预计到达时间</c>

00:21:36.864 --> 00:21:38.966 align:middle line:90%,end
<c.magenta>那么 只要用户抬起手腕</c>

00:21:39.099 --> 00:21:41.702 align:middle line:90%,end
<c.magenta>我们就会 当然了</c>
<c.magenta>请求最新更新的 预计到达时间</c>

00:21:42.636 --> 00:21:46.073 align:middle line:90%,end
<c.magenta>这意味着</c>
<c.magenta>当用户再次抬起手腕时</c>

00:21:46.306 --> 00:21:49.543 align:middle line:90%,end
<c.magenta>我们希望他们可以查看</c>
<c.magenta>最新的预计到达时间</c>

00:21:52.546 --> 00:21:54.848 align:middle line:90%,end
<c.magenta>太棒了</c>
<c.magenta>我们处理了推送通知</c>

00:21:55.082 --> 00:21:57.584 align:middle line:90%,end
<c.magenta>我们现在有一个更新</c>
<c.magenta>预计到达时间的机制</c>

00:21:58.252 --> 00:22:01.121 align:middle line:90%,end
<c.magenta>我们希望能再次</c>
<c.magenta>发送一个推送通知</c>

00:21:58.252 --> 00:22:01.121 align:middle line:90%,end
<c.magenta>我们希望能再次</c>
<c.magenta>发送一个推送通知</c>

00:22:01.355 --> 00:22:02.689 align:middle line:90%,end
<c.magenta>当快递员正在配送时</c>

00:22:03.724 --> 00:22:06.126 align:middle line:90%,end
<c.magenta>而且 如果我们在willPresent中</c>
<c.magenta>接收这个推送</c>

00:22:06.593 --> 00:22:09.162 align:middle line:90%,end
<c.magenta>那么我们将再次震动用户</c>

00:22:09.997 --> 00:22:11.798 align:middle line:90%,end
<c.magenta>然后也许我们可能</c>
<c.magenta>想添加一个地图</c>

00:22:11.865 --> 00:22:14.401 align:middle line:90%,end
<c.magenta>以及最新的预计到达时间</c>
<c.magenta>可以显示我们在哪儿</c>

00:22:14.468 --> 00:22:15.502 align:middle line:90%,end
<c.magenta>或者快递员在哪儿</c>

00:22:17.804 --> 00:22:20.541 align:middle line:90%,end
<c.magenta>然后 比如说 在我们发送了</c>
<c.magenta>快递员正在路上的</c>

00:22:20.841 --> 00:22:22.209 align:middle line:90%,end
<c.magenta>推送通知以后</c>

00:22:22.276 --> 00:22:24.811 align:middle line:90%,end
<c.magenta>用户决定 也许是抬起手腕</c>

00:22:25.512 --> 00:22:28.582 align:middle line:90%,end
<c.magenta>那么现在 用户将会看到地图</c>
<c.magenta>以及快递员所在位置</c>

00:22:28.649 --> 00:22:31.985 align:middle line:90%,end
<c.magenta>而且应用将会提供一种非常棒</c>
<c.magenta>非常精简的体验</c>

00:22:32.753 --> 00:22:36.924 align:middle line:90%,end
<c.magenta>下一步 我们只需要 发送另一条推送</c>
<c.magenta>当快递员在门外时</c>

00:22:38.192 --> 00:22:40.861 align:middle line:90%,end
<c.magenta>如果我们仍然</c>
<c.magenta>处于frontmost状态</c>

00:22:41.161 --> 00:22:43.764 align:middle line:90%,end
<c.magenta>我们可以很简单地像之前</c>
<c.magenta>那样实施一个力触觉</c>

00:22:44.097 --> 00:22:46.967 align:middle line:90%,end
<c.magenta>并更新UI来显示</c>
<c.magenta>快递员就在门外等候</c>

00:22:47.601 --> 00:22:48.902 align:middle line:90%,end
<c.magenta>在这点上</c>

00:22:49.436 --> 00:22:52.906 align:middle line:90%,end
<c.magenta>让我们来确保禁用</c>
<c.magenta>frontmost超时时间延伸API</c>

00:22:53.240 --> 00:22:56.443 align:middle line:90%,end
<c.magenta>因为我们希望用户现正在吃苹果派</c>

00:22:56.510 --> 00:22:58.745 align:middle line:90%,end
<c.magenta>而不是正在使用我们的应用</c>

00:22:59.646 --> 00:23:01.882 align:middle line:90%,end
<c.magenta>那么让我们看一下整体的时间轴</c>

00:22:59.646 --> 00:23:01.882 align:middle line:90%,end
<c.magenta>那么让我们看一下整体的时间轴</c>

00:23:04.484 --> 00:23:07.120 align:middle line:90%,end
<c.magenta>这是整个流程 看起来很棒</c>

00:23:07.387 --> 00:23:10.624 align:middle line:90%,end
<c.magenta>但是让我们尽可能地</c>
<c.magenta>尝试挑战我们的假设</c>

00:23:11.425 --> 00:23:14.561 align:middle line:90%,end
<c.magenta>现在 如果用户</c>
<c.magenta>决定返回表盘会怎样呢？</c>

00:23:15.762 --> 00:23:18.198 align:middle line:90%,end
<c.magenta>在那种情况下</c>
<c.magenta>我们就不再处于frontmost状态了</c>

00:23:18.632 --> 00:23:20.834 align:middle line:90%,end
<c.magenta>但那真的会改变什么吗？</c>

00:23:21.335 --> 00:23:22.369 align:middle line:90%,end
<c.magenta>不见得 对吧？</c>

00:23:22.436 --> 00:23:27.674 align:middle line:90%,end
<c.magenta>让我们再来看一下应用代码</c>

00:23:27.841 --> 00:23:31.645 align:middle line:90%,end
<c.magenta>我们使用了 后台NSURLSession</c>
<c.magenta>来向服务器发送订单</c>

00:23:31.778 --> 00:23:35.115 align:middle line:90%,end
<c.magenta>如果 就在这之后</c>
<c.magenta>用户决定返回到表盘</c>

00:23:35.315 --> 00:23:36.717 align:middle line:90%,end
<c.magenta>我们知道那将会继续</c>

00:23:36.783 --> 00:23:39.453 align:middle line:90%,end
<c.magenta>将订单发送到服务器</c>

00:23:40.153 --> 00:23:43.490 align:middle line:90%,end
<c.magenta>那么 我们需要发送推送通知</c>
<c.magenta>在全部不同的阶段</c>

00:23:43.891 --> 00:23:47.494 align:middle line:90%,end
<c.magenta>即使我们不处于frontmost状态</c>
<c.magenta>用户也会收到常规通知</c>

00:23:50.063 --> 00:23:52.633 align:middle line:90%,end
<c.magenta>那么 这里是整体的时间轴</c>

00:23:53.033 --> 00:23:54.902 align:middle line:90%,end
<c.magenta>我们已经处理了</c>

00:23:55.402 --> 00:23:59.406 align:middle line:90%,end
<c.magenta>服务器不能正常运行的情况</c>
<c.magenta>通过本地通知</c>

00:23:59.673 --> 00:24:01.108 align:middle line:90%,end
<c.magenta>然后我们也一起了解了如何使用</c>

00:23:59.673 --> 00:24:01.108 align:middle line:90%,end
<c.magenta>然后我们也一起了解了如何使用</c>

00:24:01.475 --> 00:24:03.410 align:middle line:90%,end
<c.magenta>某些新的Frontmost App State</c>

00:24:03.477 --> 00:24:05.479 align:middle line:90%,end
<c.magenta>来提供一种很棒的用户体验</c>

00:24:06.180 --> 00:24:09.449 align:middle line:90%,end
<c.magenta>并且其中最棒的是</c>
<c.magenta>我们的应用用起来都很棒</c>

00:24:09.516 --> 00:24:11.485 align:middle line:90%,end
<c.magenta>无论是否有</c>
<c.magenta>Frontmost App State</c>

00:24:15.155 --> 00:24:18.091 align:middle line:90%,end
<c.magenta>我们现在已经具体了解了</c>
<c.magenta>Frontmost App State</c>

00:24:18.225 --> 00:24:21.228 align:middle line:90%,end
<c.magenta>统一进程运行时间</c>
<c.magenta>及其对我们的应用 所产生的影响</c>

00:24:21.895 --> 00:24:25.499 align:middle line:90%,end
<c.magenta>现在 让我们花一些时间</c>
<c.magenta>回顾一下后台应用刷新</c>

00:24:25.732 --> 00:24:29.203 align:middle line:90%,end
<c.magenta>这是去年引入的</c>
<c.magenta>看看我们又做出了哪些改进</c>

00:24:29.269 --> 00:24:31.138 align:middle line:90%,end
<c.magenta>以及如何将其应用到</c>
<c.magenta>Apple Pie Me中</c>

00:24:32.272 --> 00:24:33.974 align:middle line:90%,end
<c.magenta>让我们先看一下概述</c>

00:24:34.942 --> 00:24:36.243 align:middle line:90%,end
<c.magenta>在watchOS中</c>

00:24:36.310 --> 00:24:39.346 align:middle line:90%,end
<c.magenta>系统通过给应用</c>
<c.magenta>分配任务来唤醒应用</c>

00:24:39.847 --> 00:24:43.517 align:middle line:10%
<c.magenta>而系统所能分配的</c>
<c.magenta>任务数量是有限的</c>

00:24:43.584 --> 00:24:45.953 align:middle line:10%
<c.magenta>所以要最好地利用</c>
<c.magenta>你得到的每一个任务</c>

00:24:47.754 --> 00:24:49.690 align:middle line:10%
<c.magenta>当系统想要唤醒你的应用时</c>

00:24:50.090 --> 00:24:52.259 align:middle line:10%
<c.magenta>它会给你一个或多个任务</c>

00:24:52.860 --> 00:24:55.395 align:middle line:10%
<c.magenta>然后你可以在后台实施</c>
<c.magenta>任何你想要实现的东西</c>

00:24:55.495 --> 00:24:58.265 align:middle line:10%
<c.magenta>你只需要确保 当应用处理工作时</c>
<c.magenta>要尽可能地抓住这项任务</c>

00:24:59.867 --> 00:25:02.636 align:middle line:90%,end
<c.magenta>并且系统提交任务给应用的方式</c>

00:24:59.867 --> 00:25:02.636 align:middle line:90%,end
<c.magenta>并且系统提交任务给应用的方式</c>

00:25:02.970 --> 00:25:07.007 align:middle line:90%,end
<c.magenta>就是当你实施你的…</c>
<c.magenta>处理后台任务回调</c>

00:25:07.274 --> 00:25:08.976 align:middle line:90%,end
<c.magenta>在你的WKExtension委托上</c>

00:25:14.748 --> 00:25:16.517 align:middle line:90%,end
<c.magenta>那么当你完成后台工作后</c>

00:25:16.783 --> 00:25:20.954 align:middle line:90%,end
<c.magenta>你只需要将任务 返回给系统即可</c>
<c.magenta>通过调用setTaskCompleted</c>

00:25:22.523 --> 00:25:26.660 align:middle line:90%,end
<c.magenta>我们对API做了一点修改</c>
<c.magenta>现在让我们来看一下</c>

00:25:26.727 --> 00:25:28.529 align:middle line:90%,end
<c.magenta>现在我们有一个很好的概念性概述</c>

00:25:31.565 --> 00:25:34.835 align:middle line:90%,end
<c.magenta>那么在此之前</c>
<c.magenta>我们要实施处理后台任务</c>

00:25:34.902 --> 00:25:37.371 align:middle line:90%,end
<c.magenta>然后我们要在全部</c>
<c.magenta>不同的任务上切换</c>

00:25:37.804 --> 00:25:39.173 align:middle line:90%,end
<c.magenta>那么在这个例子中</c>

00:25:39.306 --> 00:25:42.075 align:middle line:90%,end
<c.magenta>我们有WKApplicationRefresh</c>
<c.magenta>BackgroundTask</c>

00:25:42.543 --> 00:25:46.380 align:middle line:90%,end
<c.magenta>比如说我们要执行</c>
<c.magenta>所需要执行的任何一个函数</c>

00:25:46.446 --> 00:25:47.548 align:middle line:90%,end
<c.magenta>来更新应用</c>

00:25:47.981 --> 00:25:49.816 align:middle line:90%,end
<c.magenta>那么我们想预约一个快照</c>

00:25:50.784 --> 00:25:52.686 align:middle line:90%,end
<c.magenta>所以我们要使用</c>
<c.magenta>scheduleSnapshotRefresh</c>

00:25:52.753 --> 00:25:55.522 align:middle line:90%,end
<c.magenta>并且我们设定了一个优选日期</c>

00:25:56.156 --> 00:25:58.025 align:middle line:90%,end
<c.magenta>然后我们要调用</c>
<c.magenta>setTaskCompleted</c>

00:25:58.725 --> 00:26:01.995 align:middle line:90%,end
<c.magenta>这里有一件事很重要</c>
<c.magenta>可能有点儿棘手</c>

00:25:58.725 --> 00:26:01.995 align:middle line:90%,end
<c.magenta>这里有一件事很重要</c>
<c.magenta>可能有点儿棘手</c>

00:26:02.062 --> 00:26:04.665 align:middle line:90%,end
<c.magenta>就是在你预约快照更新后</c>

00:26:04.731 --> 00:26:07.568 align:middle line:90%,end
<c.magenta>调用setTaskCompleted</c>
<c.magenta>非常重要</c>

00:26:08.001 --> 00:26:12.306 align:middle line:90%,end
<c.magenta>因为如果你在之前调用它</c>
<c.magenta>正如我所提到过的 你实际上</c>

00:26:12.372 --> 00:26:16.343 align:middle line:90%,end
<c.magenta>通过调用setTaskCompleted</c>
<c.magenta>你正在将任务返回给系统</c>

00:26:16.610 --> 00:26:18.612 align:middle line:90%,end
<c.magenta>然后就不会预约任何快照</c>

00:26:19.680 --> 00:26:23.517 align:middle line:90%,end
<c.magenta>所以这有一点儿麻烦</c>
<c.magenta>并不是最好的体验</c>

00:26:24.785 --> 00:26:26.587 align:middle line:90%,end
<c.magenta>那么现在 你所要做的一切</c>

00:26:26.653 --> 00:26:30.057 align:middle line:90%,end
<c.magenta>就只是调用一个新函数</c>
<c.magenta>即setTaskCompletedWithSnapshot</c>

00:26:30.257 --> 00:26:32.793 align:middle line:90%,end
<c.magenta>然后当你希望拍快照时</c>
<c.magenta>就把它设为真</c>

00:26:32.926 --> 00:26:34.561 align:middle line:90%,end
<c.magenta>不希望拍快照时就设为假</c>

00:26:36.129 --> 00:26:40.501 align:middle line:90%,end
<c.magenta>因此 对于所有任务</c>
<c.magenta>默认是立即拍快照</c>

00:26:41.268 --> 00:26:44.638 align:middle line:90%,end
<c.magenta>然而对于快照</c>
<c.magenta>请一定要谨记</c>

00:26:44.905 --> 00:26:48.542 align:middle line:90%,end
<c.magenta>有一个对setTaskCompleted的</c>
<c.magenta>特殊调用 通过快照</c>

00:26:48.842 --> 00:26:49.977 align:middle line:90%,end
<c.magenta>让我们来看一下</c>

00:26:52.079 --> 00:26:53.881 align:middle line:90%,end
<c.magenta>就是这里</c>

00:26:54.081 --> 00:26:55.916 align:middle line:90%,end
<c.magenta>我们又在实施处理后台任务</c>

00:26:55.983 --> 00:26:59.686 align:middle line:90%,end
<c.magenta>此时我们有一个</c>
<c.magenta>WKSnapshotRefreshBackgroundTask</c>

00:27:00.320 --> 00:27:02.289 align:middle line:90%,end
<c.magenta>所以我们要调用</c>
<c.magenta>setTaskCompleted</c>

00:27:02.356 --> 00:27:03.724 align:middle line:90%,end
<c.magenta>在还原默认状态下</c>

00:27:03.957 --> 00:27:06.193 align:middle line:90%,end
<c.magenta>然后是我们的</c>
<c.magenta>estimatedSnapshotExpiration</c>

00:27:07.694 --> 00:27:10.731 align:middle line:90%,end
<c.magenta>这真的很棒 也简单易用</c>

00:27:10.831 --> 00:27:12.699 align:middle line:90%,end
<c.magenta>但我实际上想指出一个非常酷的把戏</c>

00:27:14.434 --> 00:27:19.306 align:middle line:90%,end
<c.magenta>现在你可以在snapshotTask上使用</c>
<c.magenta>setTaskCompletedWithSnapshot了</c>

00:27:19.540 --> 00:27:23.877 align:middle line:90%,end
<c.magenta>那么这将会</c>
<c.magenta>当然 立即拍快照</c>

00:27:24.311 --> 00:27:27.748 align:middle line:90%,end
<c.magenta>然后它会预约快照</c>
<c.magenta>从现在开始的一个小时</c>

00:27:27.814 --> 00:27:29.116 align:middle line:90%,end
<c.magenta>如果你把它设为真的话</c>

00:27:29.816 --> 00:27:31.552 align:middle line:90%,end
<c.magenta>那么 从本质上来说这意味着</c>

00:27:31.885 --> 00:27:35.689 align:middle line:90%,end
<c.magenta>如果你一直把setTaskCompleted</c>
<c.magenta>WithSnapshot的调用设为真</c>

00:27:36.056 --> 00:27:37.991 align:middle line:90%,end
<c.magenta>你将设置一个为期一小时的节奏</c>

00:27:38.125 --> 00:27:40.127 align:middle line:90%,end
<c.magenta>这样就使应用</c>

00:27:40.194 --> 00:27:42.529 align:middle line:90%,end
<c.magenta>每个小时都能得到更新</c>
<c.magenta>变得非常简单</c>

00:27:44.231 --> 00:27:47.701 align:middle line:90%,end
<c.magenta>并且如果你想要更多的</c>
<c.magenta>自定义数据行为 比如说</c>

00:27:48.035 --> 00:27:51.738 align:middle line:90%,end
<c.magenta>只需将setTaskCompletedWithSnapshot</c>
<c.magenta>的调用设为假</c>

00:27:52.272 --> 00:27:55.676 align:middle line:90%,end
<c.magenta>在预约快照刷新之后</c>

00:27:55.976 --> 00:27:58.111 align:middle line:90%,end
<c.magenta>因为如果你在这种情况下</c>
<c.magenta>将其调用为真</c>

00:27:58.178 --> 00:28:01.748 align:middle line:90%,end
<c.magenta>那么我们实际上将会替换</c>
<c.magenta>你之前的预约快照</c>

00:27:58.178 --> 00:28:01.748 align:middle line:90%,end
<c.magenta>那么我们实际上将会替换</c>
<c.magenta>你之前的预约快照</c>

00:28:01.882 --> 00:28:03.884 align:middle line:90%,end
<c.magenta>并替换为从现在开始的一个小时</c>

00:28:04.184 --> 00:28:07.654 align:middle line:90%,end
<c.magenta>如果你想要那个自定义行为</c>
<c.magenta>就一定要把它设为假</c>

00:28:11.024 --> 00:28:13.794 align:middle line:90%,end
<c.magenta>对于处理后台任务的</c>
<c.magenta>另一个重要的事</c>

00:28:13.861 --> 00:28:17.531 align:middle line:90%,end
<c.magenta>就是我们实际上会更新界面元素</c>

00:28:17.898 --> 00:28:19.466 align:middle line:90%,end
<c.magenta>那么在watchOS 3中</c>

00:28:19.533 --> 00:28:24.037 align:middle line:90%,end
<c.magenta>我们实际上软弃用了</c>
<c.magenta>CLKComplicationDataSource</c>

00:28:24.338 --> 00:28:28.709 align:middle line:90%,end
<c.magenta>getNextRequestedUpdateDate</c>
<c.magenta>requestedUpdateDidBegin</c>

00:28:29.042 --> 00:28:31.345 align:middle line:90%,end
<c.magenta>和requestedUpdateBudgetExhausted</c>

00:28:31.912 --> 00:28:35.115 align:middle line:90%,end
<c.magenta>在watchOS 3中 我要说</c>

00:28:35.449 --> 00:28:37.951 align:middle line:90%,end
<c.magenta>如果你实施了处理后台任务</c>

00:28:38.118 --> 00:28:39.786 align:middle line:90%,end
<c.magenta>我们不会被调用</c>

00:28:40.053 --> 00:28:43.123 align:middle line:90%,end
<c.magenta>现在它们是完全被弃用了</c>
<c.magenta>所以它们完全不会被调用</c>

00:28:44.458 --> 00:28:47.294 align:middle line:90%,end
<c.magenta>那么如果你想更新你的界面元素</c>

00:28:47.528 --> 00:28:49.830 align:middle line:90%,end
<c.magenta>请一定要处理后台任务</c>

00:28:50.297 --> 00:28:52.766 align:middle line:90%,end
<c.magenta>然后调用</c>
<c.magenta>scheduleBackgroundRefresh</c>

00:28:53.433 --> 00:28:55.936 align:middle line:90%,end
<c.magenta>你可以任意设定</c>
<c.magenta>更新界面元素的日期</c>

00:28:57.070 --> 00:28:58.071 align:middle line:90%,end
<c.magenta>那么去年</c>

00:28:58.472 --> 00:29:01.775 align:middle line:90%,end
<c.magenta>有很多时候 界面元素</c>
<c.magenta>可以作为网络任务的一种</c>

00:28:58.472 --> 00:29:01.775 align:middle line:90%,end
<c.magenta>有很多时候 界面元素</c>
<c.magenta>可以作为网络任务的一种</c>

00:29:02.176 --> 00:29:05.479 align:middle line:90%,end
<c.magenta>而且去年 我们指导大家</c>

00:29:05.679 --> 00:29:07.581 align:middle line:90%,end
<c.magenta>从根本上…</c>

00:29:08.949 --> 00:29:11.585 align:middle line:90%,end
<c.magenta>…基本上预约后台刷新</c>

00:29:12.019 --> 00:29:15.055 align:middle line:90%,end
<c.magenta>那样的话 你可能会预约</c>

00:29:15.622 --> 00:29:17.191 align:middle line:90%,end
<c.magenta>假如说 从现在开始的15分钟</c>

00:29:17.257 --> 00:29:19.927 align:middle line:90%,end
<c.magenta>如果你想在7:45</c>
<c.magenta>更新界面元素</c>

00:29:20.427 --> 00:29:22.796 align:middle line:90%,end
<c.magenta>那么 从根本上来说</c>
<c.magenta>你要预约那个后台刷新</c>

00:29:23.096 --> 00:29:25.966 align:middle line:90%,end
<c.magenta>然后你可能会在</c>
<c.magenta>7:30左右被唤醒</c>

00:29:26.033 --> 00:29:29.503 align:middle line:90%,end
<c.magenta>以获取那个NSURLSession</c>
<c.magenta>然后你要触发它</c>

00:29:29.903 --> 00:29:31.638 align:middle line:90%,end
<c.magenta>然后在7:45时</c>

00:29:31.705 --> 00:29:34.474 align:middle line:90%,end
<c.magenta>你会有足够的时间</c>
<c.magenta>来更新界面元素</c>

00:29:38.445 --> 00:29:43.717 align:middle line:90%,end
<c.magenta>但现在 通过新的NSURLSession</c>
<c.magenta>API 我们实际上可以省去一个步骤</c>

00:29:43.917 --> 00:29:47.621 align:middle line:90%,end
<c.magenta>我们采取这些步骤的原因</c>
<c.magenta>实际上是因为我们希望能确保</c>

00:29:47.688 --> 00:29:51.124 align:middle line:90%,end
<c.magenta>我们提供了足够的后台运行时间</c>
<c.magenta>给NSURLSession</c>

00:29:51.658 --> 00:29:54.895 align:middle line:90%,end
<c.magenta>但现在通过URLSessionTask中</c>
<c.magenta>的新API</c>

00:29:55.295 --> 00:29:57.464 align:middle line:90%,end
<c.magenta>我们可以设置一个最早的开始日期</c>

00:29:57.831 --> 00:30:00.367 align:middle line:90%,end
<c.magenta>然后当我们调用下载任务时</c>

00:29:57.831 --> 00:30:00.367 align:middle line:90%,end
<c.magenta>然后当我们调用下载任务时</c>

00:30:01.068 --> 00:30:05.539 align:middle line:90%,end
<c.magenta>我们可以设置那个任务 我们的变量</c>
<c.magenta>earliestBeginDate</c>

00:30:05.939 --> 00:30:09.343 align:middle line:90%,end
<c.magenta>那样我们会告诉系统说</c>
<c.magenta>“嘿 我们现在不需要这个</c>

00:30:09.409 --> 00:30:12.079 align:middle line:90%,end
<c.magenta>我们只需要在指定的任意日期实施”</c>

00:30:15.115 --> 00:30:17.851 align:middle line:90%,end
<c.magenta>所以现在我们可以去掉这个步骤了</c>

00:30:18.218 --> 00:30:20.654 align:middle line:90%,end
<c.magenta>在我们的预约后台刷新中</c>

00:30:20.888 --> 00:30:24.324 align:middle line:90%,end
<c.magenta>我们很可能还想踢开</c>
<c.magenta>URLSession任务 并设置一个</c>

00:30:24.391 --> 00:30:26.593 align:middle line:90%,end
<c.magenta>最早的开始日期</c>

00:30:27.127 --> 00:30:29.429 align:middle line:90%,end
<c.magenta>所以 那样系统</c>
<c.magenta>就会代表我们</c>

00:30:29.496 --> 00:30:33.867 align:middle line:90%,end
<c.magenta>触发NSURLSession</c>
<c.magenta>在下午7:30左右</c>

00:30:34.334 --> 00:30:36.103 align:middle line:90%,end
<c.magenta>然后 当那个恢复返回时</c>

00:30:37.104 --> 00:30:39.640 align:middle line:90%,end
<c.magenta>我们可以在下午7:45</c>
<c.magenta>更新我们的界面元素</c>

00:30:42.342 --> 00:30:45.812 align:middle line:90%,end
<c.magenta>那么现在让我们谈谈如何把</c>

00:30:45.879 --> 00:30:49.049 align:middle line:90%,end
<c.magenta>后台应用刷新</c>
<c.magenta>和我们刚谈到的东西</c>

00:30:49.850 --> 00:30:51.818 align:middle line:90%,end
<c.magenta>结合到我们的</c>
<c.magenta>Apple Pie Me应用中</c>

00:30:53.687 --> 00:30:56.590 align:middle line:90%,end
<c.magenta>这是我们之前看到过的那个时间轴</c>

00:30:57.191 --> 00:31:00.294 align:middle line:90%,end
<c.magenta>现在 我们主要看一下</c>
<c.magenta>派的烹制通知</c>

00:30:57.191 --> 00:31:00.294 align:middle line:90%,end
<c.magenta>现在 我们主要看一下</c>
<c.magenta>派的烹制通知</c>

00:31:01.628 --> 00:31:04.731 align:middle line:90%,end
<c.magenta>如果你记得代码</c>
<c.magenta>在此之前 它是像这样的</c>

00:31:04.798 --> 00:31:08.068 align:middle line:90%,end
<c.magenta>我们实施了</c>
<c.magenta>userNotificationCenter</c>

00:31:08.135 --> 00:31:10.671 align:middle line:90%,end
<c.magenta>willPresent通知</c>
<c.magenta>和CompletionHandler</c>

00:31:11.238 --> 00:31:14.775 align:middle line:90%,end
<c.magenta>那么 我们取消了那些</c>
<c.magenta>后备的本地通知</c>

00:31:15.309 --> 00:31:16.810 align:middle line:90%,end
<c.magenta>我们更新了UI</c>

00:31:16.944 --> 00:31:19.713 align:middle line:90%,end
<c.magenta>然后实施了一项力触觉</c>
<c.magenta>并调用了completionHandler</c>

00:31:20.180 --> 00:31:21.348 align:middle line:90%,end
<c.magenta>现在 最棒的是</c>

00:31:21.415 --> 00:31:24.785 align:middle line:90%,end
<c.magenta>一旦你调用那个completionHandler</c>
<c.magenta>你的应用将会被挂起</c>

00:31:25.252 --> 00:31:27.354 align:middle line:90%,end
<c.magenta>你将通过处理后台任务被调用</c>

00:31:27.421 --> 00:31:30.257 align:middle line:90%,end
<c.magenta>执行快照任务</c>

00:31:30.524 --> 00:31:33.861 align:middle line:90%,end
<c.magenta>然后你执行快照的原因</c>
<c.magenta>是应用处于后台了</c>

00:31:35.295 --> 00:31:38.232 align:middle line:90%,end
<c.magenta>现在当你有一个可以</c>
<c.magenta>共享的预计到达时间时</c>

00:31:38.465 --> 00:31:42.603 align:middle line:90%,end
<c.magenta>你可以确保 你的快照在停靠栏中</c>
<c.magenta>尽可能地保持最新</c>

00:31:44.371 --> 00:31:46.573 align:middle line:90%,end
<c.magenta>然后我想指出的另外一点是</c>

00:31:47.207 --> 00:31:50.577 align:middle line:90%,end
<c.magenta>如果你还记得 我们实际上使用了</c>
<c.magenta>当用户抬起手腕时</c>

00:31:50.644 --> 00:31:55.749 align:middle line:90%,end
<c.magenta>我们踢开了一个NSURLSession</c>
<c.magenta>然后抓取了 最新的预计到达时间</c>

00:31:56.149 --> 00:31:58.385 align:middle line:90%,end
<c.magenta>那么现在通过那个刚提到的新API</c>

00:31:58.452 --> 00:32:00.020 align:middle line:90%,end
<c.magenta>在URLSessionTask上的</c>

00:31:58.452 --> 00:32:00.020 align:middle line:90%,end
<c.magenta>在URLSessionTask上的</c>

00:32:00.654 --> 00:32:04.424 align:middle line:90%,end
<c.magenta>我们甚至可以预约一个 预计到达时间</c>
<c.magenta>是从现在开始的某个时间</c>

00:32:04.992 --> 00:32:06.326 align:middle line:90%,end
<c.magenta>比如说</c>

00:32:07.160 --> 00:32:10.931 align:middle line:90%,end
<c.magenta>也许我们的派会在12分钟后送到</c>
<c.magenta>我们想预约一个预计到达时间</c>

00:32:10.998 --> 00:32:15.869 align:middle line:90%,end
<c.magenta>就像刷新一样 大约是在…</c>
<c.magenta>比如从现在开始的八分钟</c>

00:32:18.906 --> 00:32:21.942 align:middle line:90%,end
<c.magenta>那么让我们再回想一下整体的时间轴</c>

00:32:22.242 --> 00:32:23.977 align:middle line:90%,end
<c.magenta>这实际上是一个非常简单的应用</c>

00:32:24.044 --> 00:32:28.749 align:middle line:90%,end
<c.magenta>我们有订购按钮</c>
<c.magenta>然后我们可以吃派了</c>

00:32:29.183 --> 00:32:32.019 align:middle line:90%,end
<c.magenta>但它实际上很强大…</c>

00:32:33.587 --> 00:32:35.722 align:middle line:90%,end
<c.magenta>在表面之下 在应用代码中</c>

00:32:37.524 --> 00:32:42.429 align:middle line:90%,end
<c.magenta>所以我们要利用</c>
<c.magenta>我们的NSURLSession恢复</c>

00:32:42.863 --> 00:32:47.201 align:middle line:90%,end
<c.magenta>并将力触觉与frontmost通知</c>
<c.magenta>结合在一起</c>

00:32:47.601 --> 00:32:51.371 align:middle line:90%,end
<c.magenta>我们还要利用</c>
<c.magenta>后台应用刷新</c>

00:32:51.638 --> 00:32:55.876 align:middle line:90%,end
<c.magenta>以及预约 NSURLSession</c>
<c.magenta>预计到达时间请求</c>

00:32:56.677 --> 00:32:58.545 align:middle line:90%,end
<c.magenta>因此 创建一个很棒的手表应用</c>

00:32:58.979 --> 00:33:02.282 align:middle line:90%,end
<c.magenta>可以给你配送苹果派</c>
<c.magenta>在之前当然能实现</c>

00:32:58.979 --> 00:33:02.282 align:middle line:90%,end
<c.magenta>可以给你配送苹果派</c>
<c.magenta>在之前当然能实现</c>

00:33:02.616 --> 00:33:07.154 align:middle line:90%,end
<c.magenta>但现在watchOS 4中</c>
<c.magenta>你可以有一个质的飞跃</c>

00:33:07.221 --> 00:33:08.488 align:middle line:90%,end
<c.magenta>并让你的用户惊叹</c>

00:33:10.224 --> 00:33:13.460 align:middle line:90%,end
<c.magenta>那么现在让我们具体</c>
<c.magenta>看一下新的后台模式</c>

00:33:14.595 --> 00:33:16.096 align:middle line:90%,end
<c.magenta>在watchOS 3中</c>

00:33:16.263 --> 00:33:19.967 align:middle line:90%,end
<c.magenta>我们引入了锻炼会话</c>
<c.magenta>作为一种后台模式</c>

00:33:20.267 --> 00:33:23.437 align:middle line:90%,end
<c.magenta>现在我们有了录音会话</c>

00:33:24.104 --> 00:33:26.139 align:middle line:90%,end
<c.magenta>此外还有导航会话</c>

00:33:26.807 --> 00:33:29.610 align:middle line:90%,end
<c.magenta>那么让我们具体看一下录音会话</c>

00:33:30.711 --> 00:33:33.547 align:middle line:90%,end
<c.magenta>在watchOS 3中</c>
<c.magenta>你可以录制音频</c>

00:33:33.647 --> 00:33:38.585 align:middle line:90%,end
<c.magenta>但它会 从根本上来说</c>
<c.magenta>API会呈现一种模态</c>

00:33:38.952 --> 00:33:43.290 align:middle line:90%,end
<c.magenta>会显示我们的UI</c>
<c.magenta>然后用户可能会停止录音</c>

00:33:43.357 --> 00:33:46.326 align:middle line:90%,end
<c.magenta>然后那个文件将会被提交给你们</c>
<c.magenta>开发人员</c>

00:33:47.628 --> 00:33:50.664 align:middle line:90%,end
<c.magenta>然而现在你可以使用你自己的UI了</c>

00:33:50.731 --> 00:33:54.868 align:middle line:90%,end
<c.magenta>从而你可以 在watchOS 4中</c>
<c.magenta>创建你想要的录音体验</c>

00:33:55.869 --> 00:33:58.772 align:middle line:90%,end
<c.magenta>并且最棒的是现在可以在后台运行</c>

00:33:59.239 --> 00:34:00.874 align:middle line:90%,end
<c.magenta>但当然了它得在前台启动</c>

00:33:59.239 --> 00:34:00.874 align:middle line:90%,end
<c.magenta>但当然了它得在前台启动</c>

00:34:00.941 --> 00:34:03.177 align:middle line:90%,end
<c.magenta>然后在后台运行</c>
<c.magenta>就像锻炼会话一样</c>

00:34:05.412 --> 00:34:09.983 align:middle line:90%,end
<c.magenta>那么你的应用会在录音时</c>
<c.magenta>保持frontmost状态</c>

00:34:11.585 --> 00:34:12.452 align:middle line:90%,end
<c.magenta>这样做的好处是</c>

00:34:12.518 --> 00:34:14.688 align:middle line:90%,end
<c.magenta>你可以实施力触觉</c>

00:34:15.088 --> 00:34:16.255 align:middle line:90%,end
<c.magenta>比如说</c>

00:34:16.322 --> 00:34:20.561 align:middle line:90%,end
<c.magenta>你有一款应用</c>
<c.magenta>想检索你周围所播放的音乐</c>

00:34:20.860 --> 00:34:23.263 align:middle line:90%,end
<c.magenta>你只需要按下录音按钮</c>

00:34:23.597 --> 00:34:25.098 align:middle line:90%,end
<c.magenta>用户就可以放下手腕了</c>

00:34:25.165 --> 00:34:26.533 align:middle line:90%,end
<c.magenta>你可以检测正在播放的音乐</c>

00:34:26.800 --> 00:34:28.969 align:middle line:90%,end
<c.magenta>然后震动用户</c>
<c.magenta>以方便他们了解</c>

00:34:29.036 --> 00:34:30.670 align:middle line:90%,end
<c.magenta>嘿 你检测到什么歌了</c>

00:34:30.938 --> 00:34:33.206 align:middle line:90%,end
<c.magenta>然后你可以将那首歌展示给用户</c>

00:34:35.309 --> 00:34:37.010 align:middle line:90%,end
<c.magenta>然后还有一个好处是</c>

00:34:37.511 --> 00:34:40.214 align:middle line:90%,end
<c.magenta>跟锻炼会话一样</c>
<c.magenta>这是一个后台运行模式</c>

00:34:40.581 --> 00:34:43.217 align:middle line:90%,end
<c.magenta>但心率传感器将不会被启动</c>

00:34:43.283 --> 00:34:46.053 align:middle line:90%,end
<c.magenta>所以正因为如此</c>
<c.magenta>会对电池使用时间产生较少的影响</c>

00:34:47.821 --> 00:34:50.123 align:middle line:90%,end
<c.magenta>并且我想提的另外一点是</c>

00:34:50.791 --> 00:34:51.891 align:middle line:90%,end
<c.magenta>如果由于某些原因</c>

00:34:51.958 --> 00:34:54.795 align:middle line:90%,end
<c.magenta>用户决定返回表盘 比如说</c>

00:34:55.027 --> 00:34:58.365 align:middle line:90%,end
<c.magenta>我们将在最顶部显示那个麦克风图标</c>

00:34:58.465 --> 00:35:00.968 align:middle line:90%,end
<c.magenta>那样用户就知道正在录音</c>

00:34:58.465 --> 00:35:00.968 align:middle line:90%,end
<c.magenta>那样用户就知道正在录音</c>

00:35:01.235 --> 00:35:05.105 align:middle line:90%,end
<c.magenta>那么他们还可以轻触那个图标</c>
<c.magenta>再返回到应用中</c>

00:35:08.876 --> 00:35:14.214 align:middle line:90%,end
<c.magenta>对于在watchOS 3.1中回放</c>
<c.magenta>我们引入了AVAudioPlayer</c>

00:35:14.515 --> 00:35:17.284 align:middle line:90%,end
<c.magenta>对于录音你所要使用的</c>

00:35:17.351 --> 00:35:20.487 align:middle line:90%,end
<c.magenta>就是AVAudioInputNode</c>
<c.magenta>通过AVAudioEngine</c>

00:35:20.821 --> 00:35:22.589 align:middle line:90%,end
<c.magenta>或AVAudioRecorder</c>

00:35:23.056 --> 00:35:25.859 align:middle line:90%,end
<c.magenta>然后请求AVAudio录音许可</c>

00:35:26.994 --> 00:35:29.596 align:middle line:10%
<c.magenta>并且我们现在支持全部格式</c>

00:35:30.531 --> 00:35:34.568 align:middle line:10%
<c.magenta>那么让我们谈谈地理位置后台模式</c>

00:35:36.670 --> 00:35:39.940 align:middle line:90%,end
<c.magenta>跟录音和锻炼会话一样</c>

00:35:40.007 --> 00:35:42.976 align:middle line:90%,end
<c.magenta>它是在前台启动</c>
<c.magenta>然后在后台运行的</c>

00:35:44.244 --> 00:35:46.880 align:middle line:90%,end
<c.magenta>当然了 你在会话中时</c>
<c.magenta>是处于frontmost状态</c>

00:35:49.316 --> 00:35:53.253 align:middle line:90%,end
<c.magenta>需要注意的一点是</c>
<c.magenta>你必须调用startUpdatingLocation</c>

00:35:53.320 --> 00:35:54.755 align:middle line:90%,end
<c.magenta>当你的应用处于前台时</c>

00:35:55.522 --> 00:35:57.024 align:middle line:90%,end
<c.magenta>并且你还应该确保</c>

00:35:57.090 --> 00:36:00.427 align:middle line:90%,end
<c.magenta>将allowsBackgroundLocationUpdates</c>

00:35:57.090 --> 00:36:00.427 align:middle line:90%,end
<c.magenta>将allowsBackgroundLocationUpdates</c>

00:36:00.494 --> 00:36:02.896 align:middle line:90%,end
<c.magenta>设为真 仅当导航会话</c>
<c.magenta>已经实际开始时</c>

00:36:03.163 --> 00:36:04.831 align:middle line:90%,end
<c.magenta>然后 如果没有开始</c>
<c.magenta>就把它设为假</c>

00:36:07.100 --> 00:36:11.839 align:middle line:90%,end
<c.magenta>因此对于Apple Pie Me应用来说</c>
<c.magenta>如果你回调 我们实际上有两种用户</c>

00:36:12.072 --> 00:36:12.973 align:middle line:90%,end
<c.magenta>我们自己</c>

00:36:13.040 --> 00:36:15.809 align:middle line:90%,end
<c.magenta>就是要吃美味苹果派的人</c>

00:36:16.143 --> 00:36:19.146 align:middle line:90%,end
<c.magenta>然后我们实际上还有一个快递员</c>
<c.magenta>就是配送苹果派的人</c>

00:36:19.546 --> 00:36:22.015 align:middle line:90%,end
<c.magenta>那么在这种情况下</c>
<c.magenta>我们可能只想…</c>

00:36:22.082 --> 00:36:25.285 align:middle line:90%,end
<c.magenta>为那个快递员创建一个</c>
<c.magenta>伴侣快递员应用</c>

00:36:25.352 --> 00:36:28.155 align:middle line:90%,end
<c.magenta>那样他们可以很方便地</c>
<c.magenta>通过手腕上的手表</c>

00:36:28.222 --> 00:36:29.456 align:middle line:90%,end
<c.magenta>获取到达目的地的导航</c>

00:36:30.791 --> 00:36:31.625 align:middle line:90%,end
<c.magenta>并且最棒的是</c>

00:36:31.692 --> 00:36:33.627 align:middle line:90%,end
<c.magenta>你甚至可以在处于会话中时</c>
<c.magenta>实施力触觉</c>

00:36:34.027 --> 00:36:36.430 align:middle line:90%,end
<c.magenta>现在如果 比如说</c>

00:36:36.496 --> 00:36:39.766 align:middle line:90%,end
<c.magenta>要向左拐或向右拐</c>
<c.magenta>你可以实施一项不同的力触觉</c>

00:36:39.833 --> 00:36:43.237 align:middle line:90%,end
<c.magenta>或也许当用户该拐弯</c>
<c.magenta>而没有拐弯时 比如说</c>

00:36:43.570 --> 00:36:45.272 align:middle line:90%,end
<c.magenta>并且我非常乐意</c>
<c.magenta>向大家介绍这个</c>

00:36:45.339 --> 00:36:50.143 align:middle line:90%,end
<c.magenta>因为就像 比如说</c>
<c.magenta>你想想一下配送应用</c>

00:36:50.544 --> 00:36:53.080 align:middle line:90%,end
<c.magenta>你想要 就在到达目的地之前</c>
<c.magenta>你正打算停下来</c>

00:36:53.380 --> 00:36:55.082 align:middle line:90%,end
<c.magenta>用户可能会收到一个震动</c>

00:36:55.582 --> 00:36:58.118 align:middle line:90%,end
<c.magenta>然后他们就会知道</c>
<c.magenta>“哦 我需要去敲门</c>

00:36:58.352 --> 00:37:00.187 align:middle line:90%,end
<c.magenta>然后我才可以去送下一家”</c>

00:36:58.352 --> 00:37:00.187 align:middle line:90%,end
<c.magenta>然后我才可以去送下一家”</c>

00:37:03.423 --> 00:37:07.594 align:middle line:90%,end
<c.magenta>所以我们真的感到很激动</c>
<c.magenta>对于新的统一进程运行时间</c>

00:37:07.828 --> 00:37:10.230 align:middle line:90%,end
<c.magenta>对后台应用刷新的新改进</c>

00:37:10.297 --> 00:37:12.032 align:middle line:90%,end
<c.magenta>以及新的后台模式</c>

00:37:12.366 --> 00:37:16.270 align:middle line:90%,end
<c.magenta>而且我感到特别激动</c>
<c.magenta>对于新的Frontmost App State</c>

00:37:16.970 --> 00:37:18.739 align:middle line:90%,end
<c.magenta>并且我们认为设计美化</c>

00:37:18.805 --> 00:37:21.475 align:middle line:90%,end
<c.magenta>将会在watchOS上</c>
<c.magenta>产生一次非常独特的变化</c>

00:37:25.445 --> 00:37:27.581 align:middle line:90%,end
<c.magenta>所以我鼓励你们大家</c>

00:37:27.648 --> 00:37:29.783 align:middle line:90%,end
<c.magenta>采用新的</c>
<c.magenta>Frontmost App State来设计应用</c>

00:37:30.884 --> 00:37:32.886 align:middle line:90%,end
<c.magenta>彻底地思考一下增强的功能</c>

00:37:32.953 --> 00:37:37.024 align:middle line:90%,end
<c.magenta>还有设计体验</c>
<c.magenta>这种交互只需要两秒钟</c>

00:37:37.791 --> 00:37:41.195 align:middle line:90%,end
<c.magenta>我们了解了如何使用</c>
<c.magenta>NSURLSession</c>

00:37:41.428 --> 00:37:44.498 align:middle line:90%,end
<c.magenta>力触觉和Frontmost通知</c>

00:37:44.665 --> 00:37:46.400 align:middle line:90%,end
<c.magenta>但那还只是在表面意义上</c>

00:37:46.867 --> 00:37:48.902 align:middle line:90%,end
<c.magenta>通过对手表连通性</c>

00:37:49.169 --> 00:37:50.337 align:middle line:90%,end
<c.magenta>和任务完成的增强</c>

00:37:50.504 --> 00:37:53.207 align:middle line:90%,end
<c.magenta>你可以设计更强大的交互</c>

00:37:53.507 --> 00:37:55.342 align:middle line:90%,end
<c.magenta>非常简单易用</c>

00:37:55.909 --> 00:37:57.544 align:middle line:90%,end
<c.magenta>所以我很期待看到</c>

00:37:57.611 --> 00:37:59.980 align:middle line:90%,end
<c.magenta>你们大家会如何利用这些新功能</c>

00:38:00.814 --> 00:38:03.884 align:middle line:90%,end
<c.magenta>如果你想了解</c>
<c.magenta>关于本场演讲的更多信息</c>

00:38:04.251 --> 00:38:06.854 align:middle line:90%,end
<c.magenta>或其它演讲的信息 请访问</c>
<c.magenta>developer.apple.com</c>

00:38:07.454 --> 00:38:09.356 align:middle line:90%,end
<c.magenta>我们还有一些非常棒的相关演讲</c>

00:38:09.423 --> 00:38:10.557 align:middle line:90%,end
<c.magenta>明天就有一场</c>

00:38:10.624 --> 00:38:12.793 align:middle line:90%,end
<c.magenta>是关于设计了不起的</c>
<c.magenta>Apple Watch体验</c>

00:38:13.060 --> 00:38:14.528 align:middle line:90%,end
<c.magenta>我强烈推荐你们去参加</c>

00:38:14.595 --> 00:38:16.029 align:middle line:90%,end
<c.magenta>我自己也非常期待那场演讲</c>

00:38:16.263 --> 00:38:19.633 align:middle line:90%,end
<c.magenta>希望你们度过一个美好的WWDC</c>
<c.magenta>谢谢大家</c>
