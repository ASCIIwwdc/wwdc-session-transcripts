WEBVTT

00:00:20.416 --> 00:00:20.906 A:middle
&gt;&gt; 早上好

00:00:21.516 --> 00:00:24.636 A:middle
[掌声]

00:00:25.136 --> 00:00:27.036 A:middle
欢迎来到 tvOS 11 的

00:00:27.036 --> 00:00:27.876 A:middle
焦点交互发布会

00:00:28.826 --> 00:00:30.086 A:middle
我的名字是 Matt  我是负责

00:00:30.086 --> 00:00:31.736 A:middle
UIKit 的软件工程师

00:00:31.736 --> 00:00:33.146 A:middle
今天另一位将要上台讲话的是

00:00:33.146 --> 00:00:33.976 A:middle
我的同事 Jon

00:00:33.976 --> 00:00:37.016 A:middle
我们有很多东西想要讨论  那么

00:00:37.236 --> 00:00:37.916 A:middle
我们赶快开始吧

00:00:38.936 --> 00:00:41.126 A:middle
首先 我们将要向大家示范

00:00:41.126 --> 00:00:42.326 A:middle
我们在 tvOS 11 里

00:00:42.326 --> 00:00:44.026 A:middle
为焦点交互支持

00:00:44.026 --> 00:00:45.636 A:middle
而设计的一些新功能

00:00:45.636 --> 00:00:46.386 A:middle
和各项改进

00:00:47.666 --> 00:00:49.056 A:middle
它们涵盖了过去一年

00:00:49.056 --> 00:00:50.156 A:middle
我们从大家这里收集到的

00:00:50.156 --> 00:00:51.066 A:middle
众多需求信息

00:00:52.886 --> 00:00:54.996 A:middle
第二  焦点交互支持

00:00:55.496 --> 00:00:57.616 A:middle
现在已经纳入 SceneKit

00:00:57.616 --> 00:00:58.666 A:middle
所以我们准备讲一讲

00:00:58.666 --> 00:01:00.226 A:middle
大家在上手前需要了解的

00:00:58.666 --> 00:01:00.226 A:middle
大家在上手前需要了解的

00:01:00.226 --> 00:01:00.596 A:middle
所有信息

00:01:02.056 --> 00:01:03.676 A:middle
最后 我们在 tvOS 11 里开发了一些

00:01:03.676 --> 00:01:05.966 A:middle
很棒的焦点调试新工具

00:01:05.966 --> 00:01:07.556 A:middle
用来帮助大家

00:01:07.556 --> 00:01:09.966 A:middle
在自己的 App 里诊断与焦点相关的

00:01:09.966 --> 00:01:10.866 A:middle
问题

00:01:11.316 --> 00:01:12.266 A:middle
我们认为这些新工具

00:01:12.266 --> 00:01:14.686 A:middle
将会给你们节省大量时间

00:01:15.566 --> 00:01:16.976 A:middle
不过在开始之前

00:01:16.976 --> 00:01:18.416 A:middle
我们有必要回顾一些基础内容

00:01:18.416 --> 00:01:19.986 A:middle
看看 Focus API 是如何

00:01:20.096 --> 00:01:21.716 A:middle
在 tvOS 11 里运作的

00:01:22.156 --> 00:01:23.376 A:middle
这个信息很重要

00:01:23.376 --> 00:01:24.786 A:middle
它将贯穿于今天这个会议的

00:01:25.676 --> 00:01:25.906 A:middle
全程

00:01:26.276 --> 00:01:27.356 A:middle
从聚焦引擎的角度来看

00:01:27.356 --> 00:01:28.926 A:middle
大家的 App 是由

00:01:28.926 --> 00:01:31.396 A:middle
聚焦项和聚焦环境

00:01:31.536 --> 00:01:32.256 A:middle
构成的

00:01:33.716 --> 00:01:35.646 A:middle
聚焦项属于

00:01:35.646 --> 00:01:37.006 A:middle
用户界面元素

00:01:37.096 --> 00:01:38.606 A:middle
它可以形成聚焦

00:01:39.386 --> 00:01:41.186 A:middle
它们遵循的是 UIFocusItem

00:01:41.186 --> 00:01:42.036 A:middle
的项目协议

00:01:42.456 --> 00:01:45.496 A:middle
聚焦项的例子包括

00:01:45.496 --> 00:01:48.976 A:middle
UIKit 里的 UIView  还有 SpriteKit 里的

00:01:50.416 --> 00:01:50.856 A:middle
节点

00:01:51.166 --> 00:01:53.106 A:middle
聚焦环境遵循的是

00:01:53.106 --> 00:01:54.976 A:middle
UIFocusEnvironment 协议

00:01:56.206 --> 00:01:57.426 A:middle
聚焦环境可以用来影响

00:01:57.476 --> 00:01:59.196 A:middle
你应用程序里的聚焦行为

00:01:59.196 --> 00:02:00.856 A:middle
而且它们还会收到关于

00:01:59.196 --> 00:02:00.856 A:middle
而且它们还会收到关于

00:02:00.856 --> 00:02:02.096 A:middle
焦点更新的

00:02:02.096 --> 00:02:02.686 A:middle
通知

00:02:03.496 --> 00:02:05.496 A:middle
所有的聚焦项同时也是聚焦环境

00:02:05.496 --> 00:02:07.446 A:middle
但聚焦环境还包括

00:02:07.446 --> 00:02:08.866 A:middle
其他对象 例如视图

00:02:08.866 --> 00:02:09.446 A:middle
控制器

00:02:11.096 --> 00:02:13.536 A:middle
聚焦项和聚焦环境

00:02:13.536 --> 00:02:15.026 A:middle
都按照等级次序进行

00:02:15.026 --> 00:02:15.566 A:middle
排列

00:02:16.196 --> 00:02:17.836 A:middle
在 UIKit 里面 这个等级次序

00:02:17.836 --> 00:02:19.276 A:middle
只是大致对应视图与

00:02:19.276 --> 00:02:20.846 A:middle
视图控制器的等级

00:02:20.846 --> 00:02:22.376 A:middle
和在 SpriteKit 里面 它对应着节点的

00:02:22.376 --> 00:02:22.786 A:middle
等级次序

00:02:23.596 --> 00:02:25.426 A:middle
这个等级次序在涉及到

00:02:25.426 --> 00:02:26.516 A:middle
接收焦点更新通知时

00:02:26.606 --> 00:02:27.656 A:middle
就显得很重要

00:02:28.246 --> 00:02:31.206 A:middle
焦点更新的形成方式可以是

00:02:31.206 --> 00:02:31.736 A:middle
两种方法里的一种

00:02:32.596 --> 00:02:34.896 A:middle
首先 用户能够以几何模式

00:02:34.896 --> 00:02:36.176 A:middle
移动焦点

00:02:36.176 --> 00:02:38.466 A:middle
例如在 Siri 遥控器

00:02:38.466 --> 00:02:39.566 A:middle
或你的 App 上轻扫一下

00:02:39.566 --> 00:02:41.176 A:middle
就会触发一个程序性焦点更新

00:02:41.176 --> 00:02:42.736 A:middle
就像是调用某些 setNeedsFocusUpdate

00:02:42.786 --> 00:02:43.886 A:middle
这样的 API

00:02:44.466 --> 00:02:48.376 A:middle
焦点更新产生时

00:02:48.376 --> 00:02:50.336 A:middle
我们会通知所有聚焦环境

00:02:50.336 --> 00:02:51.976 A:middle
这些环境既包含

00:02:52.016 --> 00:02:54.016 A:middle
先前的已聚焦项  以及

00:02:54.016 --> 00:02:54.936 A:middle
即将聚焦的项

00:02:55.366 --> 00:02:56.816 A:middle
这同样也包括所有的

00:02:56.816 --> 00:02:58.346 A:middle
共同原始环境

00:03:00.856 --> 00:03:02.116 A:middle
我们用升序方法

00:03:02.176 --> 00:03:04.516 A:middle
来通知环境

00:03:04.516 --> 00:03:06.156 A:middle
从直接参与更新的两个项

00:03:06.156 --> 00:03:07.066 A:middle
开始

00:03:08.346 --> 00:03:09.566 A:middle
通知传送的形式

00:03:09.566 --> 00:03:11.166 A:middle
是通过调用 didUpdateFocus 功能

00:03:11.166 --> 00:03:12.706 A:middle
这个功能定义是在

00:03:12.706 --> 00:03:14.296 A:middle
UIFocusEnvironment 协议之上的

00:03:14.856 --> 00:03:17.266 A:middle
这就直接引出了

00:03:17.266 --> 00:03:19.106 A:middle
我们今天的第一个话题

00:03:19.106 --> 00:03:20.156 A:middle
就是 在 tvOS 11 里

00:03:20.156 --> 00:03:22.456 A:middle
我们要提供一些很有帮助的新办法

00:03:22.456 --> 00:03:23.876 A:middle
以便更好地接收

00:03:23.876 --> 00:03:24.306 A:middle
焦点更新通知

00:03:24.886 --> 00:03:26.046 A:middle
我们回到刚才的图表

00:03:27.066 --> 00:03:28.066 A:middle
就像我刚才说的  我们

00:03:28.066 --> 00:03:29.736 A:middle
通知你的 App 使用这个

00:03:29.736 --> 00:03:31.776 A:middle
根据 UIFocusEnvironment 定义的

00:03:31.776 --> 00:03:32.996 A:middle
didUpdateFocus 功能

00:03:34.386 --> 00:03:35.606 A:middle
但有时你的 App 里可能会有

00:03:35.606 --> 00:03:38.416 A:middle
另外的对象  它并不是

00:03:38.416 --> 00:03:40.016 A:middle
聚焦环境  而你并不想

00:03:40.016 --> 00:03:41.236 A:middle
让它和你其余的

00:03:41.236 --> 00:03:42.456 A:middle
用户界面代码

00:03:42.456 --> 00:03:42.816 A:middle
结合起来

00:03:43.556 --> 00:03:45.226 A:middle
因此  针对这种情况

00:03:45.226 --> 00:03:46.846 A:middle
我们要介绍一个新的基础

00:03:46.846 --> 00:03:48.306 A:middle
通知类型

00:03:48.306 --> 00:03:50.106 A:middle
叫做 UIFocusDidUpdate

00:03:51.476 --> 00:03:52.646 A:middle
你从 App 中的任何地方都可以

00:03:52.646 --> 00:03:53.886 A:middle
看到它  每一次

00:03:53.886 --> 00:03:55.426 A:middle
焦点更新都会发送这个

00:03:55.426 --> 00:03:55.926 A:middle
通知

00:03:56.686 --> 00:03:58.166 A:middle
这个通知里面的信息

00:03:58.166 --> 00:03:59.426 A:middle
跟你习惯的通过

00:03:59.426 --> 00:04:00.456 A:middle
常规焦点更新而接收的

00:03:59.426 --> 00:04:00.456 A:middle
常规焦点更新而接收的

00:04:00.456 --> 00:04:02.236 A:middle
信息相同

00:04:02.266 --> 00:04:04.036 A:middle
包括一个更新的情况

00:04:04.036 --> 00:04:06.166 A:middle
还有一个动画协调器

00:04:06.166 --> 00:04:07.496 A:middle
以便用来控制

00:04:07.496 --> 00:04:08.266 A:middle
视觉反馈

00:04:09.036 --> 00:04:11.596 A:middle
这两个对象你都可以访问

00:04:11.596 --> 00:04:13.906 A:middle
只要你使用我们准备提供的

00:04:13.906 --> 00:04:15.076 A:middle
两款新的用户信息密钥就可以

00:04:15.596 --> 00:04:17.526 A:middle
UIFocusUpdateContext 密钥  还有

00:04:17.755 --> 00:04:19.146 A:middle
UIFocusUpdate

00:04:19.146 --> 00:04:21.276 A:middle
AnimiationCoordinator 密钥

00:04:23.156 --> 00:04:25.856 A:middle
我们还要介绍另一个

00:04:25.856 --> 00:04:27.546 A:middle
有关焦点更新的

00:04:27.546 --> 00:04:29.686 A:middle
密钥通知类型

00:04:29.686 --> 00:04:32.686 A:middle
叫做 UIFocusMovementDidFail

00:04:32.686 --> 00:04:34.086 A:middle
只要用户尝试

00:04:34.086 --> 00:04:36.626 A:middle
但却无法把焦点移到某个方向

00:04:36.626 --> 00:04:37.826 A:middle
通知就会被

00:04:37.826 --> 00:04:38.276 A:middle
发送出去

00:04:38.916 --> 00:04:40.676 A:middle
而这个通知  只有在用户试图移动焦点

00:04:40.676 --> 00:04:42.786 A:middle
而你的 App 却无法执行

00:04:42.786 --> 00:04:44.806 A:middle
某种程序性的焦点更新时

00:04:44.806 --> 00:04:46.036 A:middle
通知才会被发送

00:04:46.036 --> 00:04:46.386 A:middle
出去

00:04:46.886 --> 00:04:48.086 A:middle
这个确实很有用

00:04:48.086 --> 00:04:49.336 A:middle
当用户试图向某个方向

00:04:49.336 --> 00:04:50.706 A:middle
移动焦距  但又不被允许这样做

00:04:50.706 --> 00:04:53.306 A:middle
而你想给用户提供某种反馈

00:04:53.306 --> 00:04:54.296 A:middle
这个功能就可以

00:04:54.296 --> 00:04:55.076 A:middle
派上用场

00:04:55.546 --> 00:04:57.086 A:middle
有一个很好的例子

00:04:57.086 --> 00:04:59.076 A:middle
就是在 Apple TV 上  当用户

00:04:59.076 --> 00:05:02.136 A:middle
试图向未获许可的方向

00:04:59.076 --> 00:05:02.136 A:middle
试图向未获许可的方向

00:05:02.136 --> 00:05:03.486 A:middle
移动焦距时

00:05:03.486 --> 00:05:04.176 A:middle
VoiceOver 将会提供一个

00:05:04.176 --> 00:05:04.746 A:middle
警示声音

00:05:04.846 --> 00:05:06.366 A:middle
这确实是一种有效的方式

00:05:06.366 --> 00:05:08.136 A:middle
它给视力受损的用户

00:05:08.136 --> 00:05:09.926 A:middle
提供了某种额外的听觉反馈

00:05:09.926 --> 00:05:11.736 A:middle
让他们能够知道

00:05:11.736 --> 00:05:13.066 A:middle
自己的操作指令已被明确无误地

00:05:13.066 --> 00:05:14.646 A:middle
接收到  但是却

00:05:14.646 --> 00:05:15.266 A:middle
无法生效

00:05:15.886 --> 00:05:18.976 A:middle
这就是我们关于焦点更新

00:05:18.976 --> 00:05:19.756 A:middle
通知的内容

00:05:20.686 --> 00:05:22.826 A:middle
我们还在

00:05:22.826 --> 00:05:24.496 A:middle
UIFocusEnvironment 和

00:05:24.496 --> 00:05:26.086 A:middle
UIFocusItem 协议基础上

00:05:26.086 --> 00:05:28.346 A:middle
提供了一些有用的协议扩展

00:05:28.346 --> 00:05:29.696 A:middle
是用来帮你编写更加简洁

00:05:29.696 --> 00:05:30.286 A:middle
更安全的代码

00:05:32.826 --> 00:05:33.986 A:middle
首先要介绍的这个

00:05:33.986 --> 00:05:35.206 A:middle
协议扩展很简单

00:05:35.256 --> 00:05:37.426 A:middle
我们把 isFoucused 属性

00:05:37.426 --> 00:05:39.376 A:middle
添加到 UIFocusItem 协议

00:05:39.376 --> 00:05:41.226 A:middle
这是一种很简便的方式 可以查看

00:05:41.276 --> 00:05:42.666 A:middle
当前有没有项目处在聚焦状态

00:05:44.506 --> 00:05:45.866 A:middle
自从 tvOS 9 以来 我们就把

00:05:45.866 --> 00:05:48.366 A:middle
这个属性展示在 UIView 上

00:05:48.366 --> 00:05:49.826 A:middle
现在我们要将它直接展示在

00:05:49.826 --> 00:05:51.376 A:middle
协议 UIFocusItem 项目上

00:05:51.376 --> 00:05:53.126 A:middle
你可以把它和任何类型的

00:05:53.126 --> 00:05:54.416 A:middle
聚焦项在一起使用

00:05:54.416 --> 00:05:56.316 A:middle
包括 SpriteKit 节点

00:05:57.316 --> 00:06:00.576 A:middle
我们还把一种新的 contains 功能添加到了

00:05:57.316 --> 00:06:00.576 A:middle
我们还把一种新的 contains 功能添加到了

00:06:00.576 --> 00:06:02.506 A:middle
UIFocusEnvironment

00:06:02.506 --> 00:06:02.946 A:middle
协议里

00:06:03.846 --> 00:06:05.146 A:middle
你可以使用这个方法

00:06:05.146 --> 00:06:07.156 A:middle
轻松查看有没有哪个聚焦环境里

00:06:07.246 --> 00:06:08.516 A:middle
包含了另一个聚焦环境

00:06:08.516 --> 00:06:10.356 A:middle
而无需了解那些

00:06:10.356 --> 00:06:12.456 A:middle
在查看过程中涉及的

00:06:12.526 --> 00:06:14.896 A:middle
隐含类型

00:06:16.146 --> 00:06:17.026 A:middle
我们来看看下面这个

00:06:17.026 --> 00:06:17.256 A:middle
例子

00:06:18.326 --> 00:06:19.996 A:middle
假设我们想要查看一下

00:06:19.996 --> 00:06:21.326 A:middle
有没有哪个刚完成的聚焦项

00:06:21.326 --> 00:06:22.906 A:middle
包含在当前的视图

00:06:22.906 --> 00:06:23.366 A:middle
控制器里

00:06:24.426 --> 00:06:26.376 A:middle
要完成这项操作

00:06:26.376 --> 00:06:27.776 A:middle
我们只需要调用视图控制器上的

00:06:27.776 --> 00:06:29.556 A:middle
contains 功能  然后再

00:06:29.556 --> 00:06:30.906 A:middle
直接转入下一个

00:06:30.906 --> 00:06:31.376 A:middle
聚焦项

00:06:32.306 --> 00:06:33.836 A:middle
如果这个项是一个视图

00:06:33.836 --> 00:06:34.956 A:middle
那么这种做法就会奏效  如果是

00:06:34.956 --> 00:06:36.206 A:middle
一个 SpriteKit 节点 也可以

00:06:36.206 --> 00:06:37.066 A:middle
不管涉及到哪些类型

00:06:37.066 --> 00:06:38.656 A:middle
你只需要

00:06:38.656 --> 00:06:40.626 A:middle
调用 contains  它就能发挥作用

00:06:41.496 --> 00:06:42.886 A:middle
因此 它将有望

00:06:42.886 --> 00:06:43.796 A:middle
降低你需要

00:06:43.796 --> 00:06:44.756 A:middle
在代码里执行的

00:06:44.756 --> 00:06:45.726 A:middle
类型转换量

00:06:46.726 --> 00:06:48.986 A:middle
这就是新协议扩展的

00:06:48.986 --> 00:06:49.506 A:middle
情况

00:06:50.956 --> 00:06:51.946 A:middle
关于其他的性能提升

00:06:51.946 --> 00:06:53.286 A:middle
我要请我的同事 Jon

00:06:53.286 --> 00:06:55.146 A:middle
上台与大家分享一些

00:06:55.146 --> 00:06:56.676 A:middle
聚焦动画的新 API

00:06:57.146 --> 00:07:01.086 A:middle
&gt;&gt; 早上好 去年我们

00:06:57.146 --> 00:07:01.086 A:middle
&gt;&gt; 早上好 去年我们

00:07:01.086 --> 00:07:02.886 A:middle
为大家展示过协调 API

00:07:02.886 --> 00:07:04.616 A:middle
它可以让你的动画

00:07:04.616 --> 00:07:06.146 A:middle
在焦点更新的过程中

00:07:06.146 --> 00:07:07.936 A:middle
与系统动画

00:07:07.936 --> 00:07:08.346 A:middle
保持同步

00:07:09.206 --> 00:07:10.576 A:middle
完成这一点  靠的就是

00:07:10.576 --> 00:07:13.126 A:middle
UIFocusAnimationCoordinator

00:07:13.126 --> 00:07:15.146 A:middle
无论焦点更新在何时发生

00:07:15.146 --> 00:07:16.076 A:middle
它都会立刻启动

00:07:17.616 --> 00:07:18.886 A:middle
今天 我想跟大家聊聊

00:07:18.886 --> 00:07:19.766 A:middle
我们在 tvOS 11 里

00:07:19.766 --> 00:07:22.366 A:middle
为这个 API 做出的一些

00:07:22.366 --> 00:07:22.856 A:middle
改进

00:07:23.616 --> 00:07:25.706 A:middle
但在开始之前

00:07:25.706 --> 00:07:27.316 A:middle
让我们更深入地看一下

00:07:27.316 --> 00:07:28.476 A:middle
今天的动画是怎样运作的

00:07:30.216 --> 00:07:32.176 A:middle
聚焦动画是

00:07:32.176 --> 00:07:33.826 A:middle
tvOS 用户体验中非常重要的

00:07:33.886 --> 00:07:34.676 A:middle
一部分

00:07:35.046 --> 00:07:36.536 A:middle
它们不仅会给你的用户展示

00:07:36.536 --> 00:07:38.356 A:middle
焦点移动的方位

00:07:38.356 --> 00:07:39.686 A:middle
还让用户感到与你的内容

00:07:39.686 --> 00:07:40.366 A:middle
联系得更加密切

00:07:40.736 --> 00:07:43.206 A:middle
跟大多数事情一样  时序把握

00:07:43.206 --> 00:07:43.956 A:middle
是关键

00:07:43.956 --> 00:07:46.146 A:middle
如果动画速度过快

00:07:46.536 --> 00:07:47.926 A:middle
就会给用户带来

00:07:47.926 --> 00:07:48.596 A:middle
不愉快的感觉

00:07:48.886 --> 00:07:50.456 A:middle
但如果动画速度过慢

00:07:50.456 --> 00:07:51.246 A:middle
就会影响使用

00:07:52.246 --> 00:07:53.986 A:middle
所以  UIKit 在这方面花费了很大一番

00:07:53.986 --> 00:07:55.326 A:middle
气力  目的就是要管理这些

00:07:55.326 --> 00:07:56.576 A:middle
动画及其时序

00:07:57.116 --> 00:07:59.646 A:middle
我们进行了大量操控

00:07:59.926 --> 00:08:02.516 A:middle
比如改变时长

00:07:59.926 --> 00:08:02.516 A:middle
比如改变时长

00:08:02.516 --> 00:08:03.786 A:middle
来使动画效果

00:08:03.786 --> 00:08:04.216 A:middle
更流畅

00:08:05.126 --> 00:08:06.576 A:middle
在多个聚焦项之间

00:08:06.576 --> 00:08:08.156 A:middle
加快移动速度  会形成

00:08:08.156 --> 00:08:09.386 A:middle
更为快速的动画效果

00:08:09.666 --> 00:08:11.196 A:middle
当我们从一个项缓慢移动到

00:08:11.196 --> 00:08:13.056 A:middle
下一项时  就会相应地放慢动画

00:08:13.056 --> 00:08:14.346 A:middle
来匹配这个速度

00:08:15.356 --> 00:08:16.966 A:middle
当用户把焦点

00:08:16.966 --> 00:08:19.156 A:middle
移动到画面外时

00:08:19.156 --> 00:08:21.356 A:middle
我们要确保能够增添适度的延迟

00:08:21.356 --> 00:08:22.556 A:middle
直至该项完全可见

00:08:22.636 --> 00:08:24.016 A:middle
然后我们再运行聚焦

00:08:24.016 --> 00:08:24.686 A:middle
动画

00:08:28.636 --> 00:08:30.116 A:middle
大家可能已经注意到了

00:08:30.116 --> 00:08:31.636 A:middle
聚焦动画和

00:08:31.636 --> 00:08:33.426 A:middle
失焦动画各自有一套

00:08:33.426 --> 00:08:34.655 A:middle
不同的时序

00:08:36.376 --> 00:08:37.756 A:middle
这是因为聚焦

00:08:37.756 --> 00:08:39.006 A:middle
动画需要清晰分明

00:08:39.006 --> 00:08:40.206 A:middle
要抓住用户的眼球

00:08:40.206 --> 00:08:42.106 A:middle
而失焦动画

00:08:42.106 --> 00:08:43.676 A:middle
则需要更加隐约一些

00:08:43.756 --> 00:08:44.786 A:middle
更多的是作为背景

00:08:45.636 --> 00:08:47.616 A:middle
所以  大家在这里可以看到

00:08:47.616 --> 00:08:49.746 A:middle
当焦点在这些项目之间移动时

00:08:49.746 --> 00:08:52.206 A:middle
被聚焦的项就会

00:08:52.206 --> 00:08:54.006 A:middle
迅速凸显

00:08:54.436 --> 00:08:56.636 A:middle
而失焦的项就会缓慢地移动到

00:08:56.636 --> 00:08:57.276 A:middle
背景位置

00:08:57.276 --> 00:08:58.326 A:middle
事实上 当焦点从这里

00:08:58.326 --> 00:09:00.286 A:middle
移动到下一项时

00:08:58.326 --> 00:09:00.286 A:middle
移动到下一项时

00:09:00.286 --> 00:09:03.106 A:middle
会在后方留下一道痕迹

00:09:03.296 --> 00:09:04.056 A:middle
于是 当你调用

00:09:04.056 --> 00:09:06.506 A:middle
addCoordinatedAnimations

00:09:06.506 --> 00:09:08.706 A:middle
来同步你的动画时

00:09:08.706 --> 00:09:10.716 A:middle
我们会根据聚焦环境的

00:09:10.716 --> 00:09:12.376 A:middle
等级次序来自动判断

00:09:12.376 --> 00:09:14.976 A:middle
这些是聚焦动画

00:09:14.976 --> 00:09:15.936 A:middle
还是失焦动画

00:09:16.216 --> 00:09:17.806 A:middle
这是 Matt 刚才

00:09:17.806 --> 00:09:19.836 A:middle
展示的同一张图表

00:09:19.836 --> 00:09:21.676 A:middle
是关于 didUpdateFocus 通知的

00:09:22.556 --> 00:09:24.006 A:middle
不论你何时要调用

00:09:24.536 --> 00:09:27.236 A:middle
addCoordinatedAnimations

00:09:27.236 --> 00:09:28.616 A:middle
不论是从先前被聚焦的项

00:09:28.616 --> 00:09:30.346 A:middle
还是从它的任何直系原始项调用

00:09:30.346 --> 00:09:32.616 A:middle
只是不包括

00:09:32.616 --> 00:09:33.976 A:middle
共同的母环境

00:09:33.976 --> 00:09:36.086 A:middle
我们都会认为这些

00:09:36.276 --> 00:09:38.016 A:middle
是失焦动画

00:09:38.016 --> 00:09:39.316 A:middle
并以此对它们进行调节

00:09:40.676 --> 00:09:43.226 A:middle
相反 如果你的动画添加来源

00:09:43.226 --> 00:09:45.356 A:middle
是下一个聚焦项

00:09:45.356 --> 00:09:47.256 A:middle
或者它的任何

00:09:47.256 --> 00:09:48.956 A:middle
直系原始项  那么

00:09:48.956 --> 00:09:50.696 A:middle
我们就认为这些是聚焦动画

00:09:50.696 --> 00:09:51.956 A:middle
然后它们就会被

00:09:51.956 --> 00:09:52.376 A:middle
优先处理

00:09:52.906 --> 00:09:55.386 A:middle
效果真的很好

00:09:56.736 --> 00:09:58.536 A:middle
但是在 tvOS 11里  我们现在

00:09:58.536 --> 00:10:00.826 A:middle
允许大家将具体目标或是设定为

00:09:58.536 --> 00:10:00.826 A:middle
允许大家将具体目标或是设定为

00:10:00.826 --> 00:10:03.186 A:middle
聚焦动画  或是设定为

00:10:03.186 --> 00:10:03.976 A:middle
失焦动画

00:10:04.046 --> 00:10:06.756 A:middle
为了这个目的  我们把两个

00:10:06.756 --> 00:10:08.346 A:middle
新功能添加到了

00:10:08.346 --> 00:10:09.356 A:middle
UIFocusAnimationCoordinator

00:10:09.956 --> 00:10:10.826 A:middle
addCoordinated

00:10:10.826 --> 00:10:12.446 A:middle
FocusingAnimations

00:10:12.446 --> 00:10:13.236 A:middle
还有 addCoordinated

00:10:13.236 --> 00:10:14.526 A:middle
UnfocusingAnimations

00:10:16.716 --> 00:10:18.176 A:middle
这样一来  addCoordinated

00:10:18.176 --> 00:10:19.836 A:middle
FocusingAnimations 的运作模式

00:10:19.836 --> 00:10:21.966 A:middle
几乎就像是你从

00:10:21.966 --> 00:10:23.916 A:middle
即将聚焦的项内部

00:10:23.916 --> 00:10:25.856 A:middle
或是从它任何一个直系原始项里

00:10:25.856 --> 00:10:27.446 A:middle
调用 addCoordinatedAnimations 一样

00:10:27.886 --> 00:10:28.826 A:middle
而 addCoordinated

00:10:28.826 --> 00:10:30.936 A:middle
UnfocusingAnimations 的

00:10:30.936 --> 00:10:31.796 A:middle
运作模式跟 addCoordinatedAnimations 从

00:10:31.796 --> 00:10:33.516 A:middle
前一个聚焦项内部

00:10:33.516 --> 00:10:35.326 A:middle
或是它的原始项里

00:10:35.326 --> 00:10:36.446 A:middle
调用一样

00:10:36.596 --> 00:10:38.906 A:middle
那么  给大家展示这个运作方式的

00:10:38.906 --> 00:10:40.406 A:middle
最好办法就是演示一遍

00:10:42.616 --> 00:10:43.976 A:middle
好  我们直接开始吧

00:10:50.056 --> 00:10:50.826 A:middle
好了 我要做一个非常

00:10:50.826 --> 00:10:52.416 A:middle
简单的时间轴应用

00:10:52.416 --> 00:10:53.906 A:middle
它会显示以前 WWDC

00:10:53.946 --> 00:10:55.036 A:middle
的一些事件以及这些事件的

00:10:55.036 --> 00:10:55.706 A:middle
演示文稿

00:10:56.506 --> 00:10:58.416 A:middle
每个条目都由这个

00:10:58.416 --> 00:10:59.976 A:middle
包含数字的单元代表

00:10:59.976 --> 00:11:03.126 A:middle
当我们移动焦点时

00:10:59.976 --> 00:11:03.126 A:middle
当我们移动焦点时

00:11:03.126 --> 00:11:05.136 A:middle
它上方对应的图片会向下移动

00:11:05.136 --> 00:11:06.236 A:middle
这是为了稍微突出

00:11:06.236 --> 00:11:06.756 A:middle
强调一下

00:11:07.136 --> 00:11:11.016 A:middle
当我在这样移动的过程中

00:11:11.016 --> 00:11:12.416 A:middle
你可能会注意到

00:11:12.416 --> 00:11:15.146 A:middle
如果我们加快移动速度  会有些

00:11:15.146 --> 00:11:15.606 A:middle
不太流畅

00:11:15.926 --> 00:11:17.726 A:middle
那我们就跳过这个问题

00:11:17.726 --> 00:11:20.506 A:middle
来看一下代码

00:11:20.506 --> 00:11:22.946 A:middle
大家可以看到

00:11:22.946 --> 00:11:24.386 A:middle
所有操作都已经在

00:11:24.386 --> 00:11:26.296 A:middle
addCoordinatedAnimations 部分中完成

00:11:26.646 --> 00:11:29.286 A:middle
这是我们的新 API 的一个很好的用途

00:11:29.286 --> 00:11:33.146 A:middle
我们在这里展示的是

00:11:33.246 --> 00:11:35.326 A:middle
焦点视图

00:11:36.496 --> 00:11:38.026 A:middle
我已经通过 nextFocusedIndexPath

00:11:38.026 --> 00:11:40.336 A:middle
把它关联起来

00:11:40.606 --> 00:11:41.886 A:middle
这样就可以抓取它

00:11:41.886 --> 00:11:43.336 A:middle
对应的补充视图  我只需要

00:11:43.336 --> 00:11:45.266 A:middle
做出向下 100 点的

00:11:45.266 --> 00:11:46.876 A:middle
坐标转换就可以了

00:11:46.956 --> 00:11:48.456 A:middle
失焦视图的情况

00:11:48.456 --> 00:11:50.166 A:middle
也与此相似

00:11:50.166 --> 00:11:52.246 A:middle
这个退到后面的图片  我使用

00:11:52.246 --> 00:11:53.796 A:middle
previouslyFocusedIndexPath 来抓取它

00:11:54.146 --> 00:11:55.426 A:middle
然后根据其特征属性

00:11:55.426 --> 00:11:55.946 A:middle
进行转换

00:11:57.436 --> 00:12:00.706 A:middle
因此  我们没有使用单一的

00:11:57.436 --> 00:12:00.706 A:middle
因此  我们没有使用单一的

00:12:01.076 --> 00:12:02.676 A:middle
addCoordinatedAnimations 功能

00:12:03.036 --> 00:12:05.546 A:middle
事实上这就让所有事情都

00:12:05.676 --> 00:12:06.676 A:middle
根据聚焦动画

00:12:06.676 --> 00:12:08.466 A:middle
来进行协调  我们现在可以

00:12:08.466 --> 00:12:14.156 A:middle
把它分为两个显性的调用

00:12:14.156 --> 00:12:17.066 A:middle
一个是为了

00:12:17.066 --> 00:12:20.726 A:middle
获得焦点视图的聚焦动画

00:12:21.256 --> 00:12:23.236 A:middle
另一个是为了获得

00:12:23.236 --> 00:12:24.696 A:middle
失焦视图的失焦

00:12:24.696 --> 00:12:24.926 A:middle
动画

00:12:25.286 --> 00:12:27.786 A:middle
现在我们再运行一次

00:12:28.876 --> 00:12:29.776 A:middle
看看情况怎样

00:12:36.096 --> 00:12:37.316 A:middle
现在我们将焦点从一个项

00:12:37.316 --> 00:12:38.106 A:middle
移动到下一项 这时你就可以发现

00:12:38.106 --> 00:12:41.346 A:middle
与焦点自身在单元里移动时

00:12:41.346 --> 00:12:43.936 A:middle
相同的移动轨迹存在于

00:12:43.936 --> 00:12:44.976 A:middle
图像视图自身  这就

00:12:44.976 --> 00:12:46.546 A:middle
为你应用程序

00:12:46.546 --> 00:12:48.476 A:middle
的用户体验增色不少

00:12:48.476 --> 00:12:51.806 A:middle
好了 现在我们再跳回到

00:12:51.806 --> 00:12:53.216 A:middle
幻灯片

00:12:53.496 --> 00:12:54.626 A:middle
在动画方面

00:12:54.626 --> 00:12:55.996 A:middle
我还有一件事情

00:12:55.996 --> 00:12:56.716 A:middle
跟大家谈谈

00:12:57.556 --> 00:12:58.516 A:middle
除了上述两个新功能以外

00:12:58.516 --> 00:13:00.136 A:middle
我们还提供了一个

00:12:58.516 --> 00:13:00.136 A:middle
我们还提供了一个

00:13:00.136 --> 00:13:01.016 A:middle
关于 UIFocusAnimationContext

00:13:01.016 --> 00:13:03.316 A:middle
例证  这是

00:13:03.316 --> 00:13:05.366 A:middle
tvOS 11 里的一个新对象

00:13:05.366 --> 00:13:07.036 A:middle
它会给你额外提供一些

00:13:07.036 --> 00:13:08.626 A:middle
关于动画发生时序的信息

00:13:08.626 --> 00:13:12.086 A:middle
它应该会让

00:13:12.086 --> 00:13:13.696 A:middle
动画的推进变得更为轻松

00:13:14.096 --> 00:13:15.806 A:middle
比如说 在这个系统聚焦

00:13:15.806 --> 00:13:17.216 A:middle
动画的后半部分

00:13:17.216 --> 00:13:18.956 A:middle
我们想要运行

00:13:18.956 --> 00:13:19.596 A:middle
动画

00:13:20.616 --> 00:13:21.816 A:middle
这个嘛很容易实现

00:13:22.326 --> 00:13:23.406 A:middle
我们只需要从

00:13:23.406 --> 00:13:25.546 A:middle
动画情景里抓取出时长

00:13:25.546 --> 00:13:27.936 A:middle
把它分为两部分

00:13:27.966 --> 00:13:29.726 A:middle
再把这些数值传送到

00:13:29.726 --> 00:13:31.836 A:middle
普通的 UIView 动画功能中

00:13:32.916 --> 00:13:33.716 A:middle
事情就完成了

00:13:34.336 --> 00:13:36.016 A:middle
我想重点提一下

00:13:36.016 --> 00:13:37.896 A:middle
是你必须打开 overrideInheritedDuration 选项

00:13:37.896 --> 00:13:39.126 A:middle
因为

00:13:39.126 --> 00:13:40.876 A:middle
如果做不到这一点

00:13:40.876 --> 00:13:42.766 A:middle
基于嵌套视图的动画就会忽略

00:13:42.766 --> 00:13:44.286 A:middle
你给定的时长

00:13:44.286 --> 00:13:45.636 A:middle
并且转而选用

00:13:45.636 --> 00:13:46.476 A:middle
外部时长

00:13:47.526 --> 00:13:49.166 A:middle
但如果这样做了  就不仅会让你的

00:13:49.426 --> 00:13:51.406 A:middle
UIVIewAnimation 变得更简单

00:13:51.406 --> 00:13:53.216 A:middle
它还提供更好的 non-UIKit

00:13:53.216 --> 00:13:53.586 A:middle
支持

00:13:53.926 --> 00:13:55.256 A:middle
所以  如果你使用充分获得了

00:13:55.256 --> 00:13:56.446 A:middle
聚焦系统支持的 SpriteKit

00:13:56.446 --> 00:13:58.366 A:middle
你就可以为自己的动画

00:13:58.366 --> 00:14:00.136 A:middle
创造更为一致的感觉

00:13:58.366 --> 00:14:00.136 A:middle
创造更为一致的感觉

00:14:00.476 --> 00:14:02.166 A:middle
举例来说  你可以使用

00:14:02.166 --> 00:14:03.196 A:middle
SK 操作

00:14:04.486 --> 00:14:07.416 A:middle
这是一个使用 SK 操作的例证

00:14:07.416 --> 00:14:09.236 A:middle
它把不透明度减弱到 50%

00:14:09.236 --> 00:14:11.926 A:middle
使用的是与系统 UIKit

00:14:12.346 --> 00:14:14.396 A:middle
聚焦动画完全相同

00:14:14.396 --> 00:14:15.186 A:middle
的时序

00:14:15.696 --> 00:14:18.826 A:middle
好了 所以说现在的 API

00:14:19.136 --> 00:14:20.096 A:middle
运行效果确实很好

00:14:21.256 --> 00:14:23.926 A:middle
如果你不需要

00:14:23.926 --> 00:14:25.246 A:middle
明确定位

00:14:25.246 --> 00:14:27.186 A:middle
聚焦或失焦

00:14:27.186 --> 00:14:29.016 A:middle
你可以继续使用现在的 API

00:14:29.016 --> 00:14:30.266 A:middle
因为它正好符合你的需求

00:14:31.206 --> 00:14:33.156 A:middle
不过 如果你需要把你的

00:14:33.156 --> 00:14:34.786 A:middle
动画定位为

00:14:34.786 --> 00:14:36.866 A:middle
聚焦或失焦

00:14:36.866 --> 00:14:38.286 A:middle
而不管它们与

00:14:38.286 --> 00:14:40.146 A:middle
聚焦环境等级的联系

00:14:40.146 --> 00:14:41.446 A:middle
那就使用新的 API

00:14:41.446 --> 00:14:42.486 A:middle
这样你能获得极好的效果

00:14:43.096 --> 00:14:45.696 A:middle
最后 我们还为某种

00:14:45.696 --> 00:14:47.176 A:middle
附加时序信息提供了

00:14:47.176 --> 00:14:48.526 A:middle
聚焦动画情景

00:14:48.816 --> 00:14:49.586 A:middle
这会使得高级动画操作

00:14:49.586 --> 00:14:50.736 A:middle
变得更容易

00:14:51.176 --> 00:14:54.006 A:middle
那么 接下来我想谈谈

00:14:54.006 --> 00:14:55.046 A:middle
聚焦音效

00:14:56.086 --> 00:14:57.476 A:middle
动画是焦点更新的

00:14:57.476 --> 00:14:58.806 A:middle
视觉表现

00:14:58.806 --> 00:15:01.016 A:middle
聚焦音效则为用户

00:14:58.806 --> 00:15:01.016 A:middle
聚焦音效则为用户

00:15:01.016 --> 00:15:02.796 A:middle
提供焦点移动后形成的

00:15:02.796 --> 00:15:03.686 A:middle
听觉队列

00:15:04.196 --> 00:15:08.396 A:middle
和动画的情况一样

00:15:08.396 --> 00:15:10.386 A:middle
声音回放具有某种微妙特征

00:15:10.496 --> 00:15:11.516 A:middle
可以形成效果最佳的

00:15:11.516 --> 00:15:12.606 A:middle
用户体验

00:15:14.056 --> 00:15:15.606 A:middle
UKit 针对播放的每个音效

00:15:15.606 --> 00:15:18.136 A:middle
会执行好几种

00:15:18.136 --> 00:15:19.466 A:middle
音量和连贯性的修正

00:15:20.426 --> 00:15:22.016 A:middle
焦点移动的速度越快

00:15:22.266 --> 00:15:25.936 A:middle
它造成的音效越安静

00:15:25.936 --> 00:15:27.706 A:middle
焦点移动速度越慢

00:15:27.706 --> 00:15:29.956 A:middle
音效就越大

00:15:29.956 --> 00:15:31.256 A:middle
这就极好地补足了

00:15:31.256 --> 00:15:32.436 A:middle
我们针对动画而做出的

00:15:32.436 --> 00:15:33.186 A:middle
同一时长调整

00:15:34.146 --> 00:15:36.876 A:middle
我们还可以运用屏幕上

00:15:36.876 --> 00:15:39.606 A:middle
聚焦项所处的位置

00:15:39.606 --> 00:15:41.176 A:middle
把声音选定为左声道

00:15:41.176 --> 00:15:41.966 A:middle
或右声道

00:15:42.276 --> 00:15:43.826 A:middle
如果在屏幕上向右轻扫

00:15:43.826 --> 00:15:46.036 A:middle
你会注意到声音开始

00:15:46.036 --> 00:15:47.446 A:middle
转到右声道

00:15:47.446 --> 00:15:49.336 A:middle
如果你反过来向左轻扫

00:15:49.336 --> 00:15:51.036 A:middle
而焦点位于水平正中央时

00:15:51.036 --> 00:15:52.356 A:middle
声音转向左声道的

00:15:52.356 --> 00:15:53.376 A:middle
提示就会弹出

00:15:54.536 --> 00:15:55.996 A:middle
这再次有助于创建一种

00:15:55.996 --> 00:15:57.796 A:middle
更加浸润式的用户体验

00:15:58.306 --> 00:16:03.396 A:middle
很多用户希望我们能够

00:15:58.306 --> 00:16:03.396 A:middle
很多用户希望我们能够

00:16:03.396 --> 00:16:04.816 A:middle
让大家提供自定义聚焦音效

00:16:04.816 --> 00:16:06.286 A:middle
或者从 UIKit 音效里退出  现在在 tvOS 11 里

00:16:06.286 --> 00:16:08.316 A:middle
我很高兴地宣布

00:16:08.316 --> 00:16:10.166 A:middle
这两件事情

00:16:10.166 --> 00:16:11.096 A:middle
大家现在都可以

00:16:11.096 --> 00:16:11.516 A:middle
去做了

00:16:12.566 --> 00:16:14.506 A:middle
那么  现在如果播放自定义音效

00:16:15.076 --> 00:16:16.746 A:middle
你只需要使用一个标识符

00:16:16.746 --> 00:16:18.706 A:middle
注册你的音效

00:16:19.716 --> 00:16:21.716 A:middle
然后在焦点更新时

00:16:21.716 --> 00:16:23.326 A:middle
提供这个标识符  这样就可以

00:16:23.326 --> 00:16:24.306 A:middle
播放聚焦音效了

00:16:24.566 --> 00:16:26.356 A:middle
这只是用户启动的一种

00:16:26.356 --> 00:16:27.126 A:middle
焦点移动

00:16:27.636 --> 00:16:29.706 A:middle
我们收到这个标识符以后

00:16:29.706 --> 00:16:31.606 A:middle
就会播放与之关联的

00:16:31.606 --> 00:16:33.166 A:middle
的音效

00:16:35.556 --> 00:16:39.126 A:middle
注册音效需要使用一个类

00:16:39.126 --> 00:16:40.606 A:middle
即 registersoundFileURL

00:16:40.606 --> 00:16:42.256 A:middle
用于音效

00:16:42.256 --> 00:16:44.106 A:middle
标识符 它显现在

00:16:44.106 --> 00:16:46.026 A:middle
新的 UIFocusSystem 上

00:16:46.026 --> 00:16:47.466 A:middle
是 tvOS 11 中的一个新对象

00:16:48.016 --> 00:16:52.116 A:middle
音效注册的操作是全局性的

00:16:52.116 --> 00:16:54.016 A:middle
也就是说 一旦完成注册

00:16:54.016 --> 00:16:55.716 A:middle
你的自定义音效

00:16:55.716 --> 00:16:57.056 A:middle
在整个应用程序里都可以

00:16:57.056 --> 00:16:57.676 A:middle
使用

00:16:58.066 --> 00:17:00.926 A:middle
由于这个原因 一个音效

00:16:58.066 --> 00:17:00.926 A:middle
由于这个原因 一个音效

00:17:00.926 --> 00:17:03.806 A:middle
只应该注册一个

00:17:03.806 --> 00:17:04.406 A:middle
标识符

00:17:05.056 --> 00:17:06.536 A:middle
事实上 使用同一个音效标识符

00:17:06.646 --> 00:17:08.086 A:middle
反复注册是

00:17:08.086 --> 00:17:08.455 A:middle
错误操作

00:17:09.665 --> 00:17:11.026 A:middle
但是 如果你的 App 里有多个

00:17:11.076 --> 00:17:12.695 A:middle
音效  则是完全合理

00:17:12.695 --> 00:17:14.215 A:middle
可以接受

00:17:14.215 --> 00:17:15.685 A:middle
只需要让每个音效对应某个特别的

00:17:15.685 --> 00:17:16.256 A:middle
标识符就可以

00:17:16.675 --> 00:17:20.316 A:middle
由于这个操作是全局性的

00:17:20.316 --> 00:17:21.576 A:middle
你最好是提前注册

00:17:22.616 --> 00:17:24.215 A:middle
如果要设置并播放你的自定义音效

00:17:24.215 --> 00:17:25.616 A:middle
会产生不小的

00:17:25.616 --> 00:17:27.386 A:middle
性能成本  所以我们想确保

00:17:27.386 --> 00:17:28.326 A:middle
在注册和用户的焦点移动之间

00:17:28.326 --> 00:17:30.216 A:middle
有充裕的时间

00:17:30.216 --> 00:17:31.756 A:middle
来保证音效

00:17:31.756 --> 00:17:33.216 A:middle
得以无缝播放

00:17:34.096 --> 00:17:35.796 A:middle
这个注册方法支持所有

00:17:35.936 --> 00:17:38.146 A:middle
储存在你本地设备的

00:17:38.366 --> 00:17:39.636 A:middle
标准 iOS 文件

00:17:39.636 --> 00:17:40.176 A:middle
格式

00:17:40.726 --> 00:17:43.546 A:middle
所以 当你真正需要

00:17:43.546 --> 00:17:45.816 A:middle
播放这一音效时

00:17:45.816 --> 00:17:47.146 A:middle
你会使用到 UIFocusEnvironment

00:17:47.146 --> 00:17:49.056 A:middle
一个新的可选功能

00:17:49.996 --> 00:17:51.266 A:middle
因此  我们把这一方法

00:17:51.616 --> 00:17:52.376 A:middle
称为 soundIdentifier

00:17:52.376 --> 00:17:53.406 A:middle
ForFocusUpdate

00:17:53.776 --> 00:17:57.126 A:middle
那么 didUpdateFocus 的通知

00:17:57.876 --> 00:17:59.676 A:middle
也是以同样的升序方式

00:17:59.676 --> 00:18:00.166 A:middle
进行传送

00:17:59.676 --> 00:18:00.166 A:middle
进行传送

00:18:01.246 --> 00:18:02.616 A:middle
我们开始是在下一个聚焦项上

00:18:02.616 --> 00:18:04.806 A:middle
调用这个方法

00:18:05.136 --> 00:18:07.856 A:middle
如果下一个聚焦项给我们

00:18:08.016 --> 00:18:09.766 A:middle
提供了一个失焦音效标识符

00:18:10.276 --> 00:18:11.686 A:middle
我们就用它来给这个焦点更新

00:18:11.686 --> 00:18:13.126 A:middle
控制音效回放

00:18:13.126 --> 00:18:13.856 A:middle
这样就可以了

00:18:14.836 --> 00:18:16.366 A:middle
不过 如果我们从下一个

00:18:16.366 --> 00:18:17.696 A:middle
聚焦项目里没有获得返回的

00:18:17.696 --> 00:18:19.626 A:middle
音效标识符  我们就要查看它的父项

00:18:20.456 --> 00:18:21.646 A:middle
然后再试一次

00:18:22.646 --> 00:18:24.046 A:middle
现在如果这个父项没有返回任何信息

00:18:24.046 --> 00:18:25.586 A:middle
我们就一遍遍地重复这个过程

00:18:25.586 --> 00:18:27.076 A:middle
我们向上查看它的父项

00:18:27.076 --> 00:18:28.376 A:middle
然后多次重复这个过程

00:18:28.376 --> 00:18:29.806 A:middle
直到我们抵达根聚焦环境

00:18:29.806 --> 00:18:31.826 A:middle
如果你所有的聚焦环境

00:18:31.826 --> 00:18:33.136 A:middle
都没有选择提供一个自定义音效

00:18:33.176 --> 00:18:34.926 A:middle
我们就会直接选用

00:18:35.966 --> 00:18:37.226 A:middle
UIKit 自身使用的

00:18:37.226 --> 00:18:38.606 A:middle
默认音效

00:18:39.416 --> 00:18:40.116 A:middle
所以 你从焦点更新时使用的

00:18:40.116 --> 00:18:41.546 A:middle
音效标识符那里

00:18:41.546 --> 00:18:42.946 A:middle
可能获得的返回值

00:18:42.946 --> 00:18:44.356 A:middle
具有多种选择可能性

00:18:44.886 --> 00:18:47.246 A:middle
你当然可以

00:18:47.246 --> 00:18:48.476 A:middle
返回自己先前曾经注册过的

00:18:48.476 --> 00:18:50.326 A:middle
任何音效  这样一来

00:18:50.326 --> 00:18:52.996 A:middle
注册该标识符的音效

00:18:52.996 --> 00:18:55.316 A:middle
就会被播放出来

00:18:55.516 --> 00:18:57.096 A:middle
UIKit 还提供两种音效标识符

00:18:57.096 --> 00:18:59.556 A:middle
默认标识和无标识

00:19:00.146 --> 00:19:02.446 A:middle
通过提供默认音效标识符

00:19:02.446 --> 00:19:04.426 A:middle
UIKit 可以得到明确的信号

00:19:04.426 --> 00:19:06.006 A:middle
也就是说 你想强制

00:19:06.006 --> 00:19:07.766 A:middle
UIKit 自带的默认音效

00:19:07.766 --> 00:19:09.246 A:middle
将会为这一次的焦点更新

00:19:09.246 --> 00:19:10.736 A:middle
而自行播放

00:19:10.986 --> 00:19:13.006 A:middle
现在请记住  如果你所有的

00:19:13.006 --> 00:19:14.546 A:middle
环境都不希望控制这个更新的

00:19:14.546 --> 00:19:16.606 A:middle
音效

00:19:16.606 --> 00:19:18.366 A:middle
那么  这就是我们要使用的值

00:19:18.366 --> 00:19:19.796 A:middle
你需要使用它的机会可能很少

00:19:19.796 --> 00:19:21.216 A:middle
但我们仍提供这个

00:19:21.216 --> 00:19:23.696 A:middle
以备不时之需

00:19:23.866 --> 00:19:25.656 A:middle
最后 非标识符可以

00:19:25.656 --> 00:19:27.376 A:middle
用来彻底退出播放

00:19:27.436 --> 00:19:29.136 A:middle
此次焦点更新的

00:19:29.136 --> 00:19:29.496 A:middle
聚焦音效

00:19:33.256 --> 00:19:34.716 A:middle
你可以非常轻松地

00:19:34.716 --> 00:19:37.096 A:middle
有条件修改调整

00:19:37.096 --> 00:19:38.986 A:middle
要播放的音效  并且使用

00:19:38.986 --> 00:19:40.686 A:middle
Matt 之前展示过的

00:19:40.686 --> 00:19:42.756 A:middle
同样的 contains 协议扩展

00:19:42.756 --> 00:19:46.006 A:middle
我们能够决定

00:19:46.006 --> 00:19:47.396 A:middle
焦点在某个具体环境里移动的时间

00:19:47.396 --> 00:19:49.046 A:middle
以及它修改调整音效的时间

00:19:49.046 --> 00:19:50.836 A:middle
不然就延迟它的

00:19:50.836 --> 00:19:51.116 A:middle
匹配进度

00:19:51.116 --> 00:19:53.906 A:middle
看  我现在设定了一个

00:19:53.906 --> 00:19:54.956 A:middle
具体的环境  我称它为

00:19:54.956 --> 00:19:56.536 A:middle
音效启动环境

00:19:56.536 --> 00:19:57.826 A:middle
当焦点在这个环境里

00:19:57.826 --> 00:19:59.146 A:middle
移动时  我想播放先前

00:19:59.236 --> 00:20:01.466 A:middle
我用自定义音效标识符注册过的

00:19:59.236 --> 00:20:01.466 A:middle
我用自定义音效标识符注册过的

00:20:01.466 --> 00:20:02.616 A:middle
一个音效

00:20:03.626 --> 00:20:04.856 A:middle
这同样也很简单

00:20:04.856 --> 00:20:07.336 A:middle
选取下一个聚焦项

00:20:07.336 --> 00:20:08.596 A:middle
然后只要再检查一下

00:20:08.596 --> 00:20:09.866 A:middle
它是否包含在这个

00:20:09.866 --> 00:20:10.896 A:middle
音效启动环境里

00:20:11.006 --> 00:20:14.966 A:middle
那么  关于从聚焦音效里退出的问题

00:20:14.966 --> 00:20:16.486 A:middle
我简单再讲几点

00:20:17.756 --> 00:20:19.976 A:middle
第一 用户期待在焦点移动发生时

00:20:19.976 --> 00:20:21.866 A:middle
能够出现音效

00:20:21.866 --> 00:20:22.306 A:middle
播放

00:20:22.626 --> 00:20:23.836 A:middle
就像我前面提到的  焦点移动

00:20:23.836 --> 00:20:25.136 A:middle
对于它们来说就是一个

00:20:25.136 --> 00:20:26.086 A:middle
声音队列

00:20:26.876 --> 00:20:28.496 A:middle
所以你应该仅仅在

00:20:28.496 --> 00:20:30.666 A:middle
用户明确表示不要播放音效的时候

00:20:30.666 --> 00:20:31.916 A:middle
退出音效

00:20:32.226 --> 00:20:33.646 A:middle
举一个很好的例子

00:20:33.646 --> 00:20:36.086 A:middle
比如在游戏内菜单中

00:20:36.086 --> 00:20:37.816 A:middle
用户可以关闭

00:20:37.816 --> 00:20:39.796 A:middle
整个 App 里的音效

00:20:41.636 --> 00:20:43.486 A:middle
如果你想要

00:20:43.486 --> 00:20:45.196 A:middle
退出聚焦音效

00:20:45.196 --> 00:20:46.156 A:middle
然后在焦点更新产生后

00:20:46.156 --> 00:20:48.276 A:middle
播放自己的音效

00:20:48.276 --> 00:20:49.636 A:middle
我强烈推荐大家改用我们的 API

00:20:49.636 --> 00:20:51.966 A:middle
因为你不仅仅可以

00:20:51.966 --> 00:20:53.956 A:middle
由此而获得音量和连贯性的各项调整

00:20:53.956 --> 00:20:55.836 A:middle
这些调整是我们为自己的

00:20:55.836 --> 00:20:57.736 A:middle
内部音效而实施的

00:20:57.876 --> 00:20:59.606 A:middle
它可能很难被复制

00:21:00.796 --> 00:21:02.206 A:middle
同时 我们也尊重用户

00:21:02.206 --> 00:21:03.796 A:middle
为了播放这些音效

00:21:03.796 --> 00:21:04.416 A:middle
而对设备进行的设置

00:21:04.996 --> 00:21:06.396 A:middle
因此 Apple TV 的一个设置

00:21:06.396 --> 00:21:07.206 A:middle
就是允许你关闭

00:21:07.206 --> 00:21:08.996 A:middle
整个系统的导航音效

00:21:08.996 --> 00:21:11.456 A:middle
如果用户已经说他们不愿意要这些音效了

00:21:11.456 --> 00:21:13.086 A:middle
你肯定不想让你的 App

00:21:13.086 --> 00:21:14.636 A:middle
成为唯一一个

00:21:14.636 --> 00:21:15.916 A:middle
播放音效的 App

00:21:18.436 --> 00:21:20.066 A:middle
好的 再概括一下

00:21:20.386 --> 00:21:24.576 A:middle
你应该通过良好判断

00:21:24.826 --> 00:21:26.536 A:middle
来决定什么时候 在什么地方

00:21:26.536 --> 00:21:28.386 A:middle
以及为焦点更新播放什么音效

00:21:28.386 --> 00:21:30.156 A:middle
因为你的音效

00:21:30.156 --> 00:21:31.246 A:middle
应该用来改善用户体验

00:21:31.246 --> 00:21:32.776 A:middle
用体验抓住

00:21:32.776 --> 00:21:34.086 A:middle
他们的注意力而不是分散注意力

00:21:34.676 --> 00:21:36.446 A:middle
这方面有一个很好的例子

00:21:36.446 --> 00:21:37.926 A:middle
应该就是屏幕显示元素的

00:21:37.926 --> 00:21:38.516 A:middle
差异化

00:21:38.786 --> 00:21:40.716 A:middle
我们在 UIKit 上就是根据

00:21:40.716 --> 00:21:42.266 A:middle
具体项的大小而这样做的

00:21:42.656 --> 00:21:45.186 A:middle
因此 超大的聚焦项会产生

00:21:45.186 --> 00:21:47.406 A:middle
更响亮  更低沉的音效

00:21:47.406 --> 00:21:49.096 A:middle
而较小的聚焦项

00:21:49.096 --> 00:21:50.126 A:middle
音效就比较轻 音调更高

00:21:51.046 --> 00:21:52.676 A:middle
同样 这样做都是为了改善

00:21:52.676 --> 00:21:53.906 A:middle
用户体验

00:21:54.416 --> 00:21:56.896 A:middle
好的 说了这么多 现在我要把

00:21:56.896 --> 00:21:58.236 A:middle
讲台交还给 Matt 了

00:21:58.756 --> 00:22:00.006 A:middle
他会谈一谈 SceneKit 支持的

00:21:58.756 --> 00:22:00.006 A:middle
他会谈一谈 SceneKit 支持的

00:22:00.006 --> 00:22:00.566 A:middle
相关事宜

00:22:00.566 --> 00:22:00.816 A:middle
Matt

00:22:01.516 --> 00:22:05.606 A:middle
[掌声]

00:22:06.106 --> 00:22:06.406 A:middle
谢谢 Jon

00:22:07.896 --> 00:22:09.446 A:middle
好的 我很兴奋地

00:22:09.446 --> 00:22:11.526 A:middle
向大家宣布 在 tvOS 11 里

00:22:11.526 --> 00:22:12.996 A:middle
我们要把焦点系统支持

00:22:12.996 --> 00:22:14.656 A:middle
扩展到 SceneKit 的

00:22:14.846 --> 00:22:15.306 A:middle
框架上

00:22:16.466 --> 00:22:17.256 A:middle
那么  它如何工作呢

00:22:17.946 --> 00:22:19.606 A:middle
大家不妨回想一下 tvOS 9

00:22:19.606 --> 00:22:21.926 A:middle
在以前  UIView 是

00:22:21.926 --> 00:22:24.476 A:middle
唯一能够支持聚焦的

00:22:24.576 --> 00:22:25.126 A:middle
类型

00:22:27.026 --> 00:22:28.886 A:middle
而在 tvOS 10 里  我们采用了

00:22:28.886 --> 00:22:31.456 A:middle
这种新的 UI 聚焦项协议

00:22:31.456 --> 00:22:33.146 A:middle
此外  我们把焦点交互支持

00:22:33.146 --> 00:22:34.986 A:middle
扩展到了 SpriteKit

00:22:34.986 --> 00:22:36.296 A:middle
办法是将这个协议同时

00:22:36.296 --> 00:22:38.036 A:middle
纳入 UIView 和 SKNode

00:22:39.126 --> 00:22:41.326 A:middle
那么在现在的 tvOS 11 里 我们要

00:22:41.556 --> 00:22:44.336 A:middle
把 SCNNode 加入 UIFocusItem

00:22:44.446 --> 00:22:44.856 A:middle
族项

00:22:45.446 --> 00:22:47.746 A:middle
那么  这是如何进行的呢？

00:22:48.676 --> 00:22:50.266 A:middle
就像 SpriteKit 一样

00:22:50.266 --> 00:22:52.256 A:middle
你需要先加入  然后在你的

00:22:52.256 --> 00:22:53.986 A:middle
SceneKit App 里获得焦点支持

00:22:54.466 --> 00:22:55.906 A:middle
这就意味着在默认状态下

00:22:55.906 --> 00:22:57.306 A:middle
节点是无法聚焦的

00:22:57.776 --> 00:23:00.516 A:middle
要让这些节点可以聚焦

00:22:57.776 --> 00:23:00.516 A:middle
要让这些节点可以聚焦

00:23:00.516 --> 00:23:02.016 A:middle
办法实在是太简单了

00:23:02.016 --> 00:23:03.636 A:middle
你只需要把新的聚焦行为属性

00:23:03.676 --> 00:23:05.696 A:middle
设置为可聚焦

00:23:05.696 --> 00:23:07.616 A:middle
然后就行了 就这么简单

00:23:08.796 --> 00:23:10.186 A:middle
FocusBehavior 是 SCNNode 上的

00:23:10.186 --> 00:23:12.106 A:middle
一种新属性  我们让 SKNode

00:23:12.106 --> 00:23:13.526 A:middle
也支持这一属性

00:23:13.526 --> 00:23:15.206 A:middle
所以现在就可以更轻松地

00:23:15.206 --> 00:23:16.546 A:middle
让你的 SpriteKit 节点

00:23:16.546 --> 00:23:17.566 A:middle
同样也可聚焦

00:23:18.236 --> 00:23:21.056 A:middle
不过我觉得

00:23:21.056 --> 00:23:22.396 A:middle
不如给大家快速演示一遍

00:23:22.396 --> 00:23:22.976 A:middle
这样会更加有趣

00:23:27.066 --> 00:23:27.826 A:middle
好的 我已经创建了

00:23:27.826 --> 00:23:30.746 A:middle
一个基于 tvOS 的三连棋游戏 App

00:23:30.746 --> 00:23:32.576 A:middle
我很想让我的 App

00:23:32.666 --> 00:23:34.956 A:middle
增加一点弹出的特效

00:23:34.956 --> 00:23:36.186 A:middle
所以我决定用 SceneKit

00:23:36.316 --> 00:23:36.776 A:middle
来执行它

00:23:37.316 --> 00:23:38.286 A:middle
现在你可以看见

00:23:38.376 --> 00:23:39.766 A:middle
全方位视角下的

00:23:39.766 --> 00:23:42.356 A:middle
立体三连棋盘

00:23:42.356 --> 00:23:43.616 A:middle
我已经在我的三连棋游戏里

00:23:43.616 --> 00:23:44.726 A:middle
执行了焦点

00:23:44.726 --> 00:23:45.596 A:middle
交互支持

00:23:46.056 --> 00:23:47.766 A:middle
所以我可以使用任何类型的

00:23:47.766 --> 00:23:49.686 A:middle
输入设备  把焦点移动到

00:23:49.866 --> 00:23:50.966 A:middle
棋盘上面的任意方块

00:23:50.966 --> 00:23:51.286 A:middle
位置

00:23:51.896 --> 00:23:54.176 A:middle
如果我按下 Select

00:23:54.176 --> 00:23:56.986 A:middle
就可以让 X 或 O 在方块里落子

00:23:56.986 --> 00:23:59.686 A:middle
任一个方块都可以

00:23:59.906 --> 00:24:00.996 A:middle
所以说  这样执行起来

00:23:59.906 --> 00:24:00.996 A:middle
所以说  这样执行起来

00:24:00.996 --> 00:24:02.166 A:middle
实在是再简单不过了

00:24:02.166 --> 00:24:03.626 A:middle
除了要设置我的 SceneKit 场景

00:24:03.626 --> 00:24:05.876 A:middle
我需要做的事情只不过是

00:24:06.126 --> 00:24:08.266 A:middle
使用我先前展示的那一行代码

00:24:08.266 --> 00:24:09.696 A:middle
将每一个代表棋盘方块的

00:24:09.696 --> 00:24:11.296 A:middle
节点标记为可聚焦

00:24:11.296 --> 00:24:13.086 A:middle
这就可以了

00:24:14.216 --> 00:24:15.636 A:middle
接下来  还需要使用

00:24:15.636 --> 00:24:17.376 A:middle
Jon 刚才讲过的那些

00:24:17.376 --> 00:24:19.426 A:middle
相同的动画 API

00:24:19.426 --> 00:24:20.536 A:middle
来提供自定义动画

00:24:21.446 --> 00:24:22.716 A:middle
我们要做的全部事情

00:24:22.716 --> 00:24:23.306 A:middle
其实就这么多

00:24:23.586 --> 00:24:25.076 A:middle
现在我们可以跟我们的 SceneKit

00:24:25.076 --> 00:24:26.006 A:middle
场景进行全面互动

00:24:26.586 --> 00:24:27.426 A:middle
聚焦引擎会

00:24:27.426 --> 00:24:29.616 A:middle
自动为我们处理好

00:24:29.616 --> 00:24:30.726 A:middle
剩下的工作

00:24:31.096 --> 00:24:33.276 A:middle
事实上 我添加了两个 UIKit

00:24:33.276 --> 00:24:35.116 A:middle
按钮  UI 按钮是添加在

00:24:35.116 --> 00:24:36.986 A:middle
我们这个 SceneKit 场景的底部

00:24:36.986 --> 00:24:38.616 A:middle
只要把这些按钮放在

00:24:38.616 --> 00:24:40.326 A:middle
SK 视图的上方  聚焦引擎

00:24:40.326 --> 00:24:41.596 A:middle
就会自动处理我们这些

00:24:41.596 --> 00:24:43.656 A:middle
节点和按钮之间的

00:24:43.876 --> 00:24:44.526 A:middle
移动焦点

00:24:45.556 --> 00:24:46.906 A:middle
它会妥当地进行处理

00:24:46.906 --> 00:24:48.136 A:middle
无论我是在

00:24:48.136 --> 00:24:49.836 A:middle
棋盘的左边或右边

00:24:50.096 --> 00:24:51.586 A:middle
根据几何角度上

00:24:51.586 --> 00:24:53.366 A:middle
离我们节点之间最近距离

00:24:54.036 --> 00:24:54.776 A:middle
点击正确的按钮

00:24:55.276 --> 00:24:58.616 A:middle
以上这些  就是我对

00:24:58.616 --> 00:25:02.186 A:middle
SceneKit 对焦点交互的

00:24:58.616 --> 00:25:02.186 A:middle
SceneKit 对焦点交互的

00:25:02.186 --> 00:25:02.626 A:middle
支持的一个简单演示

00:25:05.516 --> 00:25:09.546 A:middle
[掌声]

00:25:10.046 --> 00:25:11.176 A:middle
当你在自己的 SceneKit 应用

00:25:11.176 --> 00:25:11.996 A:middle
和游戏里面执行

00:25:12.106 --> 00:25:13.356 A:middle
对焦点交互的支持时

00:25:13.356 --> 00:25:14.846 A:middle
还有其他几件事情

00:25:14.846 --> 00:25:15.346 A:middle
需要注意

00:25:16.776 --> 00:25:18.976 A:middle
首先 SceneKit 显然是

00:25:19.036 --> 00:25:20.626 A:middle
在三维空间里运行

00:25:20.626 --> 00:25:23.106 A:middle
但焦点交互却是

00:25:23.106 --> 00:25:24.516 A:middle
运行在二维空间

00:25:24.516 --> 00:25:25.006 A:middle
里面

00:25:25.386 --> 00:25:26.296 A:middle
这该怎么办呢？

00:25:27.216 --> 00:25:28.846 A:middle
那么  当一个用户试图

00:25:28.846 --> 00:25:30.406 A:middle
往某个方向移动焦点时

00:25:30.766 --> 00:25:31.936 A:middle
我们就要搜寻下一个  基于这一区域的

00:25:32.016 --> 00:25:35.016 A:middle
可聚焦的 SceneKit 节点

00:25:35.016 --> 00:25:38.146 A:middle
就在这个节点被拖入到屏幕

00:25:39.216 --> 00:25:39.386 A:middle
的时候

00:25:39.806 --> 00:25:41.826 A:middle
其次 既然我们

00:25:41.826 --> 00:25:43.496 A:middle
在 SceneKit 里支持焦点交互

00:25:43.966 --> 00:25:45.336 A:middle
这就意味着我们现在

00:25:45.336 --> 00:25:46.946 A:middle
也能够支持嵌入到

00:25:46.946 --> 00:25:48.576 A:middle
SceneKit 场景之内的

00:25:48.576 --> 00:25:50.236 A:middle
可聚焦的 SpriteKit 场景

00:25:51.016 --> 00:25:52.196 A:middle
实际上 我们自动支持

00:25:52.196 --> 00:25:53.736 A:middle
UIKit SpriteKit 和 SceneKit 对象之间

00:25:53.736 --> 00:25:56.206 A:middle
移动焦点

00:25:56.206 --> 00:25:58.116 A:middle
从大家的角度来说

00:25:58.116 --> 00:25:59.206 A:middle
也并不需要任何额外的操作

00:26:00.086 --> 00:26:01.676 A:middle
所以你可以使用任何工具

00:26:01.676 --> 00:26:03.206 A:middle
来创建自己的用户界面

00:26:03.206 --> 00:26:04.276 A:middle
把 App 里面的不同区域

00:26:04.276 --> 00:26:05.116 A:middle
发挥最大用场

00:26:05.116 --> 00:26:06.486 A:middle
而焦点交互支持

00:26:06.486 --> 00:26:07.666 A:middle
完全可以

00:26:07.666 --> 00:26:08.546 A:middle
自动运行

00:26:08.746 --> 00:26:10.626 A:middle
最后  我们在 UIKit 里

00:26:10.626 --> 00:26:12.346 A:middle
使用 UIFocusItem 以及

00:26:12.346 --> 00:26:14.116 A:middle
UIFocusEnvironment 协议界定的

00:26:14.116 --> 00:26:16.116 A:middle
所有焦点 API

00:26:16.356 --> 00:26:18.376 A:middle
它们也都支持 SpriteKit

00:26:18.446 --> 00:26:18.806 A:middle
和 SceneKit

00:26:19.486 --> 00:26:20.926 A:middle
所以  像 Jon 先前刚解释的

00:26:20.926 --> 00:26:22.396 A:middle
那些自定义音效

00:26:22.396 --> 00:26:24.136 A:middle
和动画 API  它们同样也

00:26:24.136 --> 00:26:26.266 A:middle
支持 SceneKit  而且确实

00:26:26.266 --> 00:26:27.206 A:middle
有助于创造一种更好的

00:26:27.206 --> 00:26:28.416 A:middle
浸润式用户体验

00:26:29.856 --> 00:26:31.256 A:middle
要想了解更多有关使用

00:26:31.256 --> 00:26:32.856 A:middle
SceneKit 和 SpriteKit 进行工作的情况

00:26:32.856 --> 00:26:34.146 A:middle
希望大家可以查看一下

00:26:34.146 --> 00:26:36.226 A:middle
我们在本周内

00:26:36.226 --> 00:26:39.396 A:middle
将要陆续举办的相关议程

00:26:40.026 --> 00:26:42.126 A:middle
接下来  是我们今天的压轴戏

00:26:42.846 --> 00:26:44.006 A:middle
我想谈谈某样东西

00:26:44.006 --> 00:26:45.386 A:middle
它绝对会影响到在座的每个人

00:26:45.386 --> 00:26:46.356 A:middle
那就是调试

00:26:46.916 --> 00:26:48.706 A:middle
我很高兴地告诉大家 我们将在

00:26:48.706 --> 00:26:50.436 A:middle
tvOS 11 里采用某种全新的

00:26:50.686 --> 00:26:53.116 A:middle
聚焦调试工具

00:26:53.116 --> 00:26:54.336 A:middle
我们已经把它加入到 UIKit

00:26:54.976 --> 00:26:57.936 A:middle
首先要说的是  焦点实时

00:26:57.936 --> 00:26:58.856 A:middle
更新日志

00:27:00.776 --> 00:27:02.186 A:middle
当你在自己的 Xcode

00:27:02.186 --> 00:27:04.926 A:middle
方案启动参数里加入

00:27:04.926 --> 00:27:06.926 A:middle
UIFocusLoggingEnabled 选项

00:27:06.926 --> 00:27:09.286 A:middle
你就可以开启

00:27:09.286 --> 00:27:10.406 A:middle
焦点实时更新日志

00:27:10.406 --> 00:27:12.456 A:middle
这样做的真正好处

00:27:12.456 --> 00:27:13.616 A:middle
是对于每一个被日志记录的

00:27:13.956 --> 00:27:15.556 A:middle
程序化聚焦更新来说

00:27:15.556 --> 00:27:17.236 A:middle
我们都会加入

00:27:17.236 --> 00:27:19.766 A:middle
关于首选聚焦环境

00:27:19.976 --> 00:27:21.186 A:middle
检索逻辑的

00:27:21.186 --> 00:27:23.106 A:middle
详细步骤记录

00:27:23.106 --> 00:27:24.546 A:middle
聚焦引擎就是使用这个逻辑

00:27:24.546 --> 00:27:26.206 A:middle
来判断下一个聚焦项

00:27:26.426 --> 00:27:27.756 A:middle
因此这样做的话  对于诊断那些

00:27:27.756 --> 00:27:29.886 A:middle
焦点未能以编码形式

00:27:30.116 --> 00:27:31.066 A:middle
更新到我们希望的状态这种情况

00:27:31.066 --> 00:27:32.626 A:middle
也有非常大的

00:27:32.626 --> 00:27:34.246 A:middle
帮助

00:27:34.836 --> 00:27:36.306 A:middle
因为这些都是日志

00:27:36.306 --> 00:27:37.556 A:middle
可以为你诊断一些问题

00:27:37.556 --> 00:27:40.336 A:middle
比如焦点在 App 启动

00:27:40.336 --> 00:27:42.596 A:middle
和切换时未能更新到

00:27:42.596 --> 00:27:43.866 A:middle
正确的项目里

00:27:44.876 --> 00:27:45.926 A:middle
然而 对于这个工具

00:27:45.926 --> 00:27:47.996 A:middle
有一点需要注意  那就是

00:27:48.226 --> 00:27:49.356 A:middle
请将这一工具仅限于

00:27:49.356 --> 00:27:49.936 A:middle
调试之用途

00:27:50.456 --> 00:27:51.996 A:middle
随着你在自己的 App 里

00:27:51.996 --> 00:27:53.306 A:middle
添加日志  会产生

00:27:53.306 --> 00:27:54.196 A:middle
不小的性能成本

00:27:54.196 --> 00:27:55.626 A:middle
以致于你在推出物流 App 时

00:27:55.626 --> 00:27:56.606 A:middle
根本不想

00:27:56.606 --> 00:27:57.276 A:middle
启用日志

00:27:57.926 --> 00:28:01.856 A:middle
以上就是聚焦更新日志

00:27:57.926 --> 00:28:01.856 A:middle
以上就是聚焦更新日志

00:28:03.656 --> 00:28:04.786 A:middle
我们今天要展示的

00:28:04.786 --> 00:28:05.726 A:middle
下一个工具是

00:28:05.726 --> 00:28:08.016 A:middle
UIFocusDebugger

00:28:08.016 --> 00:28:09.686 A:middle
这是我们基于 tvOS 11 而发布的

00:28:09.686 --> 00:28:10.706 A:middle
一个新的类

00:28:12.326 --> 00:28:14.956 A:middle
UIFocusDebugger 这个工具是用来

00:28:14.956 --> 00:28:16.636 A:middle
在你的 App 运行时

00:28:16.706 --> 00:28:19.926 A:middle
诊断与焦点有关的问题的

00:28:19.926 --> 00:28:20.466 A:middle
非常酷

00:28:20.466 --> 00:28:21.896 A:middle
它的构造就像是一个

00:28:21.896 --> 00:28:23.636 A:middle
迷你的命令行工具

00:28:23.636 --> 00:28:25.346 A:middle
它就嵌入在 UIKit 里

00:28:25.346 --> 00:28:26.156 A:middle
可供你使用

00:28:26.616 --> 00:28:28.196 A:middle
要利用这个工具 你只需要

00:28:28.196 --> 00:28:29.776 A:middle
在 App 暂停运行时

00:28:29.776 --> 00:28:32.596 A:middle
从 LLDB 里调用它的

00:28:32.596 --> 00:28:33.186 A:middle
任何一个功能

00:28:34.086 --> 00:28:35.046 A:middle
我们来看看

00:28:35.046 --> 00:28:35.676 A:middle
它能做些什么

00:28:37.696 --> 00:28:39.276 A:middle
它最简单的一项功能

00:28:39.406 --> 00:28:41.196 A:middle
是你可以调用 status  让它在任何时候

00:28:41.196 --> 00:28:42.226 A:middle
都能快速给出当前的

00:28:42.226 --> 00:28:43.026 A:middle
聚焦项

00:28:43.096 --> 00:28:45.636 A:middle
这通常是在诊断某些与聚焦相关的问题时

00:28:45.636 --> 00:28:47.016 A:middle
要做的第一步

00:28:47.016 --> 00:28:48.816 A:middle
尤其是当你不清楚

00:28:48.986 --> 00:28:50.196 A:middle
当前聚焦项在哪里

00:28:50.196 --> 00:28:52.836 A:middle
的时候

00:28:53.196 --> 00:28:54.686 A:middle
其次 你可以使用

00:28:54.686 --> 00:28:56.336 A:middle
environment 功能里的模拟聚焦

00:28:56.336 --> 00:28:58.256 A:middle
更新请求  并以此来诊断

00:28:58.306 --> 00:28:59.676 A:middle
与你的 App 首选聚焦逻辑

00:28:59.816 --> 00:29:00.846 A:middle
相关的问题

00:28:59.816 --> 00:29:00.846 A:middle
相关的问题

00:29:01.716 --> 00:29:04.106 A:middle
调用这一功能

00:29:04.106 --> 00:29:04.996 A:middle
类似于调用

00:29:05.096 --> 00:29:06.916 A:middle
setNeedsFocusUpdate API

00:29:06.916 --> 00:29:08.546 A:middle
并在你刚刚导入的这个环境里

00:29:08.546 --> 00:29:09.966 A:middle
执行这一项

00:29:09.966 --> 00:29:10.636 A:middle
焦聚更新

00:29:10.636 --> 00:29:13.236 A:middle
而这一功能的好处

00:29:13.236 --> 00:29:14.596 A:middle
在于它会生成同样的

00:29:14.596 --> 00:29:16.846 A:middle
逐级首选聚焦

00:29:16.846 --> 00:29:18.386 A:middle
环境搜索逻辑

00:29:18.386 --> 00:29:19.996 A:middle
我们在聚焦实时更新日志里

00:29:19.996 --> 00:29:20.746 A:middle
也添加了这个逻辑

00:29:21.996 --> 00:29:24.096 A:middle
但是  如果通过这个模拟方法

00:29:24.236 --> 00:29:25.816 A:middle
你就可以在自己的 App 里

00:29:25.816 --> 00:29:26.736 A:middle
模拟任何一条

00:29:26.736 --> 00:29:27.886 A:middle
聚焦更新  而不必

00:29:27.886 --> 00:29:29.256 A:middle
真的要在你的用户界面里

00:29:29.256 --> 00:29:31.786 A:middle
手动触发聚焦更新

00:29:31.956 --> 00:29:33.516 A:middle
这有助于

00:29:33.516 --> 00:29:35.246 A:middle
在 App 的不同位置

00:29:35.246 --> 00:29:36.836 A:middle
快速诊断不同的

00:29:36.886 --> 00:29:37.716 A:middle
首选聚焦环境问题

00:29:42.176 --> 00:29:43.806 A:middle
就我个人而言  我在

00:29:43.806 --> 00:29:46.126 A:middle
UIFocusDebugger 里最喜欢的工具

00:29:46.126 --> 00:29:47.626 A:middle
是下一个功能 也就是检查项目的

00:29:47.626 --> 00:29:47.926 A:middle
聚焦能力

00:29:48.606 --> 00:29:50.106 A:middle
使用这个功能  可以得到一份列表

00:29:50.106 --> 00:29:52.246 A:middle
罗列出可能导致

00:29:52.246 --> 00:29:53.996 A:middle
项目无法聚焦的

00:29:53.996 --> 00:29:54.566 A:middle
潜在问题

00:29:56.256 --> 00:29:57.436 A:middle
我们都碰到过类似问题

00:29:57.436 --> 00:29:58.886 A:middle
屏幕上出现的某个项

00:29:58.886 --> 00:30:01.016 A:middle
我们希望它可以聚焦

00:29:58.886 --> 00:30:01.016 A:middle
我们希望它可以聚焦

00:30:01.016 --> 00:30:02.596 A:middle
但是由于某些原因

00:30:02.596 --> 00:30:03.656 A:middle
我们又无法对它进行聚焦

00:30:03.656 --> 00:30:03.976 A:middle
而且也不知道原因

00:30:04.556 --> 00:30:07.076 A:middle
事实上  有许多

00:30:07.076 --> 00:30:08.826 A:middle
不同的原因都会导致

00:30:08.916 --> 00:30:11.126 A:middle
某一个项目无法聚焦

00:30:11.126 --> 00:30:12.616 A:middle
这些问题可能不仅在于

00:30:12.616 --> 00:30:14.226 A:middle
这个项本身  而是关系到

00:30:14.306 --> 00:30:15.676 A:middle
这个项目的原始项

00:30:15.676 --> 00:30:16.556 A:middle
这个原始项又影响它的子项

00:30:17.736 --> 00:30:18.846 A:middle
那么  这就是这个全新的

00:30:18.846 --> 00:30:20.586 A:middle
项目聚焦性能功能的

00:30:20.826 --> 00:30:21.726 A:middle
真正亮点

00:30:22.226 --> 00:30:24.266 A:middle
它将会自动为你探测

00:30:24.266 --> 00:30:25.856 A:middle
并诊断所有这些潜在的

00:30:25.856 --> 00:30:27.656 A:middle
问题  并且给出一份

00:30:27.656 --> 00:30:29.186 A:middle
问题列表

00:30:29.216 --> 00:30:31.016 A:middle
这样一来  就可以为你

00:30:31.016 --> 00:30:32.086 A:middle
节省大量时间

00:30:32.086 --> 00:30:34.236 A:middle
显然 仅凭你自己

00:30:34.236 --> 00:30:36.276 A:middle
来调查所有这些问题

00:30:36.276 --> 00:30:38.586 A:middle
会带来极大的时间浪费

00:30:38.746 --> 00:30:42.286 A:middle
最后我要说的是 像其他所有

00:30:42.286 --> 00:30:43.896 A:middle
出色的命令行工具一样  你随时都能获得

00:30:43.896 --> 00:30:45.406 A:middle
UIFocusDebugger 的帮助

00:30:45.406 --> 00:30:47.226 A:middle
这个工具也会给出

00:30:47.226 --> 00:30:48.576 A:middle
一张详细的指令列表

00:30:48.576 --> 00:30:50.096 A:middle
从而罗列出

00:30:50.096 --> 00:30:52.086 A:middle
每个可用命令的说明

00:30:52.086 --> 00:30:53.216 A:middle
所以不用担心能否

00:30:53.216 --> 00:30:54.546 A:middle
马上记住所有这些方法

00:30:54.656 --> 00:30:56.206 A:middle
因为帮助命令会解决

00:30:56.236 --> 00:30:56.556 A:middle
你的问题

00:30:58.306 --> 00:31:00.536 A:middle
不过 向你们展示这个新工具的最好方法

00:30:58.306 --> 00:31:00.536 A:middle
不过 向你们展示这个新工具的最好方法

00:31:00.536 --> 00:31:01.666 A:middle
就是简单的演示

00:31:01.666 --> 00:31:01.886 A:middle
一遍

00:31:11.086 --> 00:31:11.756 A:middle
好的  现在我正在

00:31:11.756 --> 00:31:12.526 A:middle
创建一个新的 tvOS 应用

00:31:12.526 --> 00:31:14.156 A:middle
但是我已经

00:31:14.156 --> 00:31:15.636 A:middle
遇到一些非常严重的

00:31:15.636 --> 00:31:17.056 A:middle
有关聚焦的问题

00:31:17.056 --> 00:31:18.736 A:middle
那么 我们来看看自己能否弄明白

00:31:19.426 --> 00:31:20.186 A:middle
发生了什么

00:31:20.186 --> 00:31:22.686 A:middle
我正准备创建并运行我们的

00:31:25.186 --> 00:31:25.486 A:middle
这个 App

00:31:26.056 --> 00:31:26.886 A:middle
好了  这就是一个

00:31:26.886 --> 00:31:28.436 A:middle
简单的 App

00:31:28.436 --> 00:31:30.156 A:middle
展示了我最喜欢的电影

00:31:30.156 --> 00:31:31.796 A:middle
你首先会注意到的可能是

00:31:31.986 --> 00:31:33.186 A:middle
屏幕上所有的内容都没有

00:31:33.186 --> 00:31:33.766 A:middle
聚焦

00:31:33.766 --> 00:31:35.236 A:middle
事实上 如果我是在遥控器屏幕上轻扫

00:31:35.236 --> 00:31:36.826 A:middle
或者是尝试用方向键

00:31:36.826 --> 00:31:37.776 A:middle
在屏幕上四处移动焦点

00:31:37.776 --> 00:31:39.366 A:middle
都不会出现任何

00:31:39.366 --> 00:31:39.806 A:middle
聚焦行为

00:31:40.486 --> 00:31:42.646 A:middle
这就让我很不明白了

00:31:42.646 --> 00:31:44.086 A:middle
不知道问题究竟出在哪里 我们来

00:31:44.086 --> 00:31:45.466 A:middle
看看 UIFocusDebugger 能否派上用场

00:31:45.926 --> 00:31:47.346 A:middle
我们要回到这个 App

00:31:47.346 --> 00:31:51.546 A:middle
暂停运行

00:31:51.546 --> 00:31:54.956 A:middle
这会触发 LLDB

00:31:54.956 --> 00:31:56.356 A:middle
就像我刚才说过的那样

00:31:56.356 --> 00:31:58.546 A:middle
应该要检查的是

00:31:58.546 --> 00:31:59.466 A:middle
当前聚焦系统的状态

00:31:59.466 --> 00:32:00.266 A:middle
所以我现在要

00:31:59.466 --> 00:32:00.266 A:middle
所以我现在要

00:32:00.266 --> 00:32:04.756 A:middle
输入 UIFocusDebugger 的状态

00:32:04.756 --> 00:32:06.536 A:middle
这些调用要和 Objective-C

00:32:06.536 --> 00:32:07.826 A:middle
和 Swift 同时运行

00:32:07.826 --> 00:32:11.826 A:middle
我看到的状态是

00:32:11.826 --> 00:32:13.756 A:middle
当前已经有一个聚焦项

00:32:13.756 --> 00:32:14.896 A:middle
它是这些海报单元格里的

00:32:14.896 --> 00:32:15.666 A:middle
一个

00:32:17.066 --> 00:32:18.516 A:middle
显然 如果我们查看过后

00:32:18.576 --> 00:32:20.356 A:middle
发现它没有显示聚焦

00:32:20.356 --> 00:32:21.666 A:middle
这就说明我们这些单元格的

00:32:21.666 --> 00:32:23.226 A:middle
视觉外观存在着某种

00:32:23.226 --> 00:32:24.356 A:middle
潜在的问题

00:32:24.826 --> 00:32:26.516 A:middle
我们到 Storyboard 上再看看

00:32:26.516 --> 00:32:27.736 A:middle
能否发现问题

00:32:28.246 --> 00:32:30.926 A:middle
出在哪里

00:32:31.166 --> 00:32:31.706 A:middle
好 现在进入了

00:32:31.706 --> 00:32:33.456 A:middle
我的 Storyboard  让我们

00:32:33.456 --> 00:32:36.646 A:middle
打开集合视图  可以看到

00:32:36.776 --> 00:32:38.096 A:middle
我们这个单元格是有模板的

00:32:38.096 --> 00:32:40.256 A:middle
这个单元格包含了一个图像视图

00:32:40.606 --> 00:32:41.766 A:middle
我们想达到的效果

00:32:41.766 --> 00:32:43.056 A:middle
是在这个单元格被聚焦时

00:32:43.056 --> 00:32:44.726 A:middle
这个图片视图会升浮到

00:32:44.726 --> 00:32:44.906 A:middle
用户界面上方

00:32:47.026 --> 00:32:47.986 A:middle
现在我们来看看这个

00:32:47.986 --> 00:32:49.536 A:middle
我注意到

00:32:49.536 --> 00:32:51.076 A:middle
我们先前忘记开启这个

00:32:51.076 --> 00:32:53.036 A:middle
调节原始聚焦选项了

00:32:53.036 --> 00:32:54.156 A:middle
制造上浮效果的就是它

00:32:54.156 --> 00:32:56.106 A:middle
所以 这很可能就是

00:32:56.106 --> 00:32:56.586 A:middle
问题所在

00:32:56.586 --> 00:32:58.466 A:middle
我们再次运行这个 App

00:32:58.556 --> 00:32:59.656 A:middle
看看问题是否已经解决

00:33:06.046 --> 00:33:06.716 A:middle
漂亮 现在我们就可以在这些

00:33:06.716 --> 00:33:08.676 A:middle
单元格之间移动了  它清楚地

00:33:08.676 --> 00:33:09.846 A:middle
显示出哪个单元格目前处于

00:33:09.846 --> 00:33:10.786 A:middle
聚焦状态

00:33:10.846 --> 00:33:12.506 A:middle
通过这个上浮效果就能看出来

00:33:12.506 --> 00:33:13.046 A:middle
所以现在的视觉效果就变好了

00:33:13.896 --> 00:33:15.166 A:middle
不过还有另外一个问题

00:33:15.166 --> 00:33:16.446 A:middle
跟这种配置有关  那就是

00:33:16.446 --> 00:33:18.226 A:middle
我无法聚焦到

00:33:18.226 --> 00:33:20.656 A:middle
App 底部的这个

00:33:20.656 --> 00:33:23.476 A:middle
More Info 按钮

00:33:23.476 --> 00:33:24.236 A:middle
我真不知道问题出在哪里

00:33:24.236 --> 00:33:25.426 A:middle
我在这里找不到任何

00:33:25.426 --> 00:33:26.126 A:middle
解决办法

00:33:26.126 --> 00:33:27.106 A:middle
所以  我们再次回到 App

00:33:27.106 --> 00:33:28.926 A:middle
看看能不能

00:33:28.926 --> 00:33:29.816 A:middle
找到问题所在

00:33:30.476 --> 00:33:32.446 A:middle
我们现在要打开

00:33:32.446 --> 00:33:34.236 A:middle
mainViewController

00:33:34.236 --> 00:33:37.006 A:middle
设置断点  然后再触发

00:33:37.006 --> 00:33:37.616 A:middle
那个断点

00:33:39.096 --> 00:33:40.096 A:middle
好  现在是个好机会

00:33:40.096 --> 00:33:41.206 A:middle
我们来试试这个新的

00:33:41.206 --> 00:33:42.676 A:middle
检查聚焦能力的方法

00:33:43.376 --> 00:33:44.466 A:middle
我现在要输入

00:33:46.006 --> 00:33:47.066 A:middle
P-O UIFocusDebugger

00:33:48.446 --> 00:33:49.536 A:middle
很好  我们可以全面获得

00:33:49.536 --> 00:33:52.716 A:middle
自动填充支持

00:33:52.716 --> 00:33:54.446 A:middle
我们可以调用这个  然后还需要

00:33:54.446 --> 00:33:55.116 A:middle
一个 Swift 代码

00:33:56.966 --> 00:33:58.236 A:middle
我们来检查一下

00:33:58.236 --> 00:33:59.436 A:middle
More Info 按钮的聚焦能力

00:33:59.436 --> 00:34:02.216 A:middle
这个按钮我已经让它关联了一个输出口

00:33:59.436 --> 00:34:02.216 A:middle
这个按钮我已经让它关联了一个输出口

00:34:02.996 --> 00:34:04.506 A:middle
好的 它检测到一个问题

00:34:04.506 --> 00:34:05.826 A:middle
它现在告诉我们

00:34:05.826 --> 00:34:07.366 A:middle
这个项的当前状况是

00:34:07.366 --> 00:34:09.206 A:middle
视觉上被遮挡住了

00:34:09.206 --> 00:34:10.956 A:middle
也就是说 它被屏幕上的

00:34:10.956 --> 00:34:11.866 A:middle
另外某个项遮蔽住了

00:34:12.505 --> 00:34:14.755 A:middle
它甚至还为我们

00:34:14.916 --> 00:34:16.246 A:middle
找出某个项的引用参考

00:34:16.246 --> 00:34:18.366 A:middle
它认为这个项是导致问题的

00:34:18.366 --> 00:34:18.755 A:middle
原因所在

00:34:19.525 --> 00:34:20.846 A:middle
我们再回到 Storyboard 上

00:34:21.386 --> 00:34:22.585 A:middle
看看我们能否找到

00:34:22.585 --> 00:34:22.976 A:middle
问题出在哪里

00:34:30.016 --> 00:34:30.436 A:middle
好的  我现在准备打开

00:34:30.466 --> 00:34:30.976 A:middle
mainViewController

00:34:35.196 --> 00:34:36.076 A:middle
好  我们的 More Info 按钮

00:34:36.076 --> 00:34:36.525 A:middle
就在这里

00:34:37.416 --> 00:34:41.356 A:middle
那么  它说我们被

00:34:41.356 --> 00:34:43.466 A:middle
某个项进行了视觉遮挡

00:34:43.466 --> 00:34:46.196 A:middle
但是我明显可以看到

00:34:46.196 --> 00:34:47.755 A:middle
这个 More Info 按钮就在这里

00:34:47.755 --> 00:34:48.356 A:middle
那么这到底是怎么回事

00:34:49.545 --> 00:34:50.396 A:middle
我现在看一下 Storyboard

00:34:50.396 --> 00:34:51.775 A:middle
我注意到我们这个

00:34:51.775 --> 00:34:53.516 A:middle
More Info 按钮的

00:34:53.516 --> 00:34:54.636 A:middle
兄弟视图

00:34:54.636 --> 00:34:57.306 A:middle
这是一个半透明的白色视图

00:34:57.306 --> 00:34:58.886 A:middle
我们用它来做

00:34:58.886 --> 00:35:00.546 A:middle
这个 App 底部展架的背景

00:34:58.886 --> 00:35:00.546 A:middle
这个 App 底部展架的背景

00:35:02.156 --> 00:35:03.586 A:middle
我注意到这个视图

00:35:03.586 --> 00:35:05.296 A:middle
被误放在我们这个

00:35:05.296 --> 00:35:06.246 A:middle
More Info 按钮的上方

00:35:06.246 --> 00:35:07.396 A:middle
但是这确实很难看出来

00:35:07.396 --> 00:35:08.926 A:middle
因为它是半透明的

00:35:09.776 --> 00:35:11.296 A:middle
所以我们试试把这个视图

00:35:11.296 --> 00:35:13.526 A:middle
拖到 More Info 按钮的下面

00:35:13.526 --> 00:35:15.116 A:middle
然后重启这个 App

00:35:15.116 --> 00:35:15.976 A:middle
看看问题有没有解决

00:35:24.436 --> 00:35:25.476 A:middle
好  我们再试一次

00:35:32.136 --> 00:35:32.846 A:middle
把它稍微再放大

00:35:32.846 --> 00:35:33.176 A:middle
一点点

00:35:34.226 --> 00:35:37.136 A:middle
OK 现在我可以聚焦到

00:35:37.136 --> 00:35:38.426 A:middle
这个 More Info 按钮上了

00:35:38.806 --> 00:35:40.046 A:middle
我们这个 App 的图形效果

00:35:40.046 --> 00:35:41.806 A:middle
变好了  现在我们可以

00:35:41.806 --> 00:35:43.356 A:middle
转到更重要的

00:35:43.356 --> 00:35:45.166 A:middle
事情上面  那就是创建我们的

00:35:45.166 --> 00:35:45.676 A:middle
新功能

00:35:45.966 --> 00:35:47.476 A:middle
我们现在回到这个

00:35:47.476 --> 00:35:47.976 A:middle
展示画面

00:35:48.516 --> 00:35:52.666 A:middle
[掌声]

00:35:53.166 --> 00:35:54.696 A:middle
刚刚只是简单示范了一下

00:35:54.696 --> 00:35:56.466 A:middle
UIFocusDebugger 是如何帮助我们

00:35:56.496 --> 00:35:58.256 A:middle
识别这类简单

00:35:58.256 --> 00:35:59.756 A:middle
而且可以轻松解决的错误

00:35:59.756 --> 00:36:01.636 A:middle
但这样多少也会

00:35:59.756 --> 00:36:01.636 A:middle
但这样多少也会

00:36:02.076 --> 00:36:03.666 A:middle
在 App 的开发过程中

00:36:03.666 --> 00:36:04.966 A:middle
浪费我们许多时间

00:36:04.966 --> 00:36:06.016 A:middle
因为我们要把这些问题追踪到底

00:36:08.126 --> 00:36:09.976 A:middle
这就是基于 tvOS 11 的

00:36:09.976 --> 00:36:10.846 A:middle
聚焦调试

00:36:12.526 --> 00:36:13.846 A:middle
简单概括一下我们今天的会议

00:36:16.326 --> 00:36:17.666 A:middle
请好好利用这些

00:36:17.666 --> 00:36:19.886 A:middle
全新的聚焦更新通知和

00:36:19.886 --> 00:36:21.196 A:middle
协议扩展功能

00:36:21.196 --> 00:36:23.246 A:middle
我们把它们添加到 tvOS 11  是为了

00:36:23.246 --> 00:36:25.126 A:middle
用更少的代码去完成

00:36:25.276 --> 00:36:26.006 A:middle
常规任务

00:36:28.176 --> 00:36:29.556 A:middle
你可以使用新的动画 API 和

00:36:29.556 --> 00:36:32.116 A:middle
自定义音效 API

00:36:32.116 --> 00:36:33.656 A:middle
Jon 刚在本次议程里

00:36:33.656 --> 00:36:35.136 A:middle
谈到过它们

00:36:35.136 --> 00:36:36.736 A:middle
它们可以为你的 App 和游戏提供

00:36:36.986 --> 00:36:38.646 A:middle
更好的浸润式

00:36:38.646 --> 00:36:39.106 A:middle
体验

00:36:40.796 --> 00:36:41.786 A:middle
大家一定要试试

00:36:41.786 --> 00:36:43.026 A:middle
SceneKit 里全新的

00:36:43.116 --> 00:36:43.626 A:middle
焦点交互支持

00:36:43.816 --> 00:36:45.306 A:middle
这是一个非常棒的工具

00:36:45.306 --> 00:36:46.956 A:middle
可以为你的 SceneKit 游戏增加

00:36:46.956 --> 00:36:47.356 A:middle
交互性

00:36:48.696 --> 00:36:50.576 A:middle
最后  使用全新的

00:36:50.576 --> 00:36:52.006 A:middle
聚焦调试工具  可以给自己

00:36:52.006 --> 00:36:53.306 A:middle
节省大量的时间

00:36:55.586 --> 00:36:56.696 A:middle
关于今天会议的更多信息

00:36:56.696 --> 00:36:57.526 A:middle
大家可以登录

00:36:57.526 --> 00:36:58.816 A:middle
developer.apple.com 查看

00:37:00.246 --> 00:37:01.546 A:middle
如果你有兴趣

00:37:01.546 --> 00:37:03.046 A:middle
深入学习 tvOS 开发

00:37:03.046 --> 00:37:04.056 A:middle
可以查看我们在本周

00:37:04.056 --> 00:37:05.176 A:middle
将陆续推出的

00:37:05.176 --> 00:37:05.756 A:middle
相关会议

00:37:06.386 --> 00:37:06.976 A:middle
非常感谢
