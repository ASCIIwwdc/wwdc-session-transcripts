WEBVTT

00:00:08.516 --> 00:00:15.500 A:middle
[ 欢呼 ]

00:00:22.516 --> 00:00:28.836 A:middle
[ 掌声 ]

00:00:29.336 --> 00:00:30.516 A:middle
&gt;&gt;  女士们  先生们  下午好

00:00:31.456 --> 00:00:32.516 A:middle
我希望你们到目前

00:00:32.776 --> 00:00:34.256 A:middle
在苹果开发者大会上都很开心

00:00:35.386 --> 00:00:37.126 A:middle
我叫 Stuart Cheshire

00:00:37.126 --> 00:00:37.966 A:middle
我会为你们介绍网络结构

00:00:40.616 --> 00:00:41.626 A:middle
内容很多

00:00:41.626 --> 00:00:43.396 A:middle
所以我们直接开始吧

00:00:44.126 --> 00:00:45.896 A:middle
演讲两个部分

00:00:47.196 --> 00:00:49.716 A:middle
第一部分  我会向你们

00:00:49.716 --> 00:00:52.136 A:middle
介绍一些这几年

00:00:52.246 --> 00:00:53.806 A:middle
工作中的技术的

00:00:53.806 --> 00:00:54.906 A:middle
更新

00:00:55.846 --> 00:00:57.756 A:middle
基于显示反馈的协议（ECN）

00:00:58.246 --> 00:01:00.016 A:middle
是通过互联网

00:00:58.246 --> 00:01:00.016 A:middle
是通过互联网

00:01:00.016 --> 00:01:01.746 A:middle
管理流量的一个新方法

00:01:01.746 --> 00:01:04.635 A:middle
并且不会造成数据包丢失  而 IPv6

00:01:04.635 --> 00:01:07.836 A:middle
我相信你们也都知道

00:01:07.836 --> 00:01:10.076 A:middle
是一个新兴的互联网协议

00:01:11.646 --> 00:01:12.846 A:middle
我们将向你们介绍一些

00:01:12.986 --> 00:01:15.336 A:middle
iOS 上的网络堆栈中的

00:01:15.336 --> 00:01:17.476 A:middle
一些新变化  以及一些

00:01:17.476 --> 00:01:18.956 A:middle
现在可用于网络扩展的

00:01:18.956 --> 00:01:20.956 A:middle
新工具

00:01:20.956 --> 00:01:23.756 A:middle
最后  我们将告诉你们

00:01:23.756 --> 00:01:25.366 A:middle
一些关于多路径协议的

00:01:25.676 --> 00:01:27.776 A:middle
好消息

00:01:28.346 --> 00:01:30.186 A:middle
我们使用的 iPhone

00:01:30.186 --> 00:01:32.356 A:middle
本质上都是多路径设备

00:01:32.426 --> 00:01:33.746 A:middle
它们有不止一个电台

00:01:33.746 --> 00:01:35.276 A:middle
然而今天大多数时候

00:01:35.276 --> 00:01:37.686 A:middle
我们每次只使用其中一个

00:01:38.966 --> 00:01:40.446 A:middle
是时候让我们开始

00:01:40.856 --> 00:01:42.386 A:middle
使用我们的多路径设备的

00:01:42.386 --> 00:01:43.436 A:middle
多路径协议了

00:01:46.236 --> 00:01:48.816 A:middle
休息过后  在第二部分

00:01:48.816 --> 00:01:50.356 A:middle
我们会谈到 URLSession 的

00:01:50.356 --> 00:01:52.686 A:middle
一些新进展和

00:01:52.796 --> 00:01:54.176 A:middle
可用的 API

00:01:54.596 --> 00:01:56.986 A:middle
我们将会给出一些

00:01:57.086 --> 00:01:58.816 A:middle
建议和指导

00:01:59.676 --> 00:02:00.596 A:middle
并且会告诉你们一些

00:01:59.676 --> 00:02:00.596 A:middle
并且会告诉你们一些

00:02:00.596 --> 00:02:02.786 A:middle
即将发生的新进展

00:02:02.786 --> 00:02:04.046 A:middle
的最新消息

00:02:06.016 --> 00:02:07.346 A:middle
那么让我们先从 ECN

00:02:08.205 --> 00:02:09.306 A:middle
基于显示反馈的协议 开始

00:02:12.616 --> 00:02:14.026 A:middle
有时你或许会听到

00:02:14.026 --> 00:02:15.686 A:middle
人们谈起网络拥塞

00:02:16.356 --> 00:02:18.576 A:middle
好像是一个坏事

00:02:18.936 --> 00:02:20.786 A:middle
然而传输协议的工作

00:02:21.116 --> 00:02:22.696 A:middle
正是要通过网络

00:02:22.696 --> 00:02:24.556 A:middle
最大限度的传送数据

00:02:24.556 --> 00:02:26.946 A:middle
而它的方法就是传送的

00:02:26.946 --> 00:02:28.646 A:middle
越来越快

00:02:28.966 --> 00:02:30.396 A:middle
直到它传送的过快为止

00:02:30.776 --> 00:02:32.466 A:middle
从某种意义上来说  它是在

00:02:32.466 --> 00:02:33.616 A:middle
进行一个破坏性实验

00:02:35.716 --> 00:02:37.566 A:middle
所以  如果网络的编程

00:02:37.566 --> 00:02:39.156 A:middle
正确  它应当发生

00:02:39.156 --> 00:02:39.836 A:middle
拥塞

00:02:40.946 --> 00:02:43.006 A:middle
在两个设备之间的任何路径上

00:02:43.366 --> 00:02:44.986 A:middle
会有一个链接  它有

00:02:45.036 --> 00:02:46.116 A:middle
最低的通量

00:02:46.116 --> 00:02:47.416 A:middle
最差的容量

00:02:47.416 --> 00:02:48.276 A:middle
它就是那个瓶颈

00:02:48.906 --> 00:02:50.786 A:middle
传输协议的工作

00:02:50.786 --> 00:02:53.226 A:middle
就是去解决

00:02:53.226 --> 00:02:54.556 A:middle
它在瓶颈链接中的部分

00:02:55.206 --> 00:02:56.296 A:middle
如果你把 12 MB

00:02:56.296 --> 00:02:58.706 A:middle
输入一个 10 MB 的链接

00:02:58.706 --> 00:03:00.836 A:middle
那就不可避免的

00:02:58.706 --> 00:03:00.836 A:middle
那就不可避免的

00:03:00.836 --> 00:03:01.656 A:middle
会出错

00:03:02.106 --> 00:03:03.376 A:middle
短时间内  它可以

00:03:03.376 --> 00:03:05.146 A:middle
存在缓存中

00:03:05.146 --> 00:03:06.266 A:middle
但当设备缓存不足时

00:03:06.266 --> 00:03:07.696 A:middle
它就没有了其他选择  只好

00:03:07.696 --> 00:03:08.426 A:middle
丢失数据包

00:03:09.206 --> 00:03:11.146 A:middle
当它丢失数据包时

00:03:11.146 --> 00:03:12.846 A:middle
这是在提示发送者

00:03:12.846 --> 00:03:14.216 A:middle
它已经运行过快

00:03:14.216 --> 00:03:14.896 A:middle
需要放慢一点

00:03:16.086 --> 00:03:18.276 A:middle
问题在于

00:03:18.276 --> 00:03:20.606 A:middle
通过丢失数据包来

00:03:20.606 --> 00:03:21.766 A:middle
向发送者来传递这个信息

00:03:21.766 --> 00:03:22.896 A:middle
是代价很大的

00:03:23.916 --> 00:03:26.096 A:middle
如果数据包来自一个无线设备

00:03:26.096 --> 00:03:27.216 A:middle
那么就需要很多电量

00:03:27.216 --> 00:03:28.316 A:middle
来发送它们

00:03:28.956 --> 00:03:31.116 A:middle
它使用无限频谱

00:03:31.116 --> 00:03:32.466 A:middle
一种网络容量  来实现发送那些数据包

00:03:33.866 --> 00:03:36.096 A:middle
而当你丢掉它们后

00:03:36.096 --> 00:03:37.286 A:middle
它们必须被重新传输

00:03:37.936 --> 00:03:40.316 A:middle
现在  对你的 app 而言

00:03:40.316 --> 00:03:42.136 A:middle
这些数据包丢失和重新传输

00:03:42.136 --> 00:03:44.036 A:middle
都是隐形的  因为 TCP 或

00:03:44.036 --> 00:03:45.196 A:middle
传输协议就把它们解决了

00:03:47.436 --> 00:03:48.676 A:middle
或者我应该说  几乎隐形

00:03:49.986 --> 00:03:51.576 A:middle
数据包丢失是看不到的  但是

00:03:51.576 --> 00:03:52.916 A:middle
它所导致的延迟却是可见的

00:03:54.396 --> 00:03:55.846 A:middle
你的 app 可能需要

00:03:55.846 --> 00:03:57.586 A:middle
等待那些被重新传输的

00:03:57.586 --> 00:04:00.396 A:middle
数据  这就会导致

00:03:57.586 --> 00:04:00.396 A:middle
数据  这就会导致

00:04:00.686 --> 00:04:02.326 A:middle
更慢  更拖沓的用户体验

00:04:04.106 --> 00:04:05.256 A:middle
有了 ECN

00:04:05.256 --> 00:04:07.206 A:middle
当这个

00:04:07.206 --> 00:04:09.966 A:middle
瓶颈发现

00:04:09.966 --> 00:04:12.066 A:middle
数据开始排起长队等候传输的时候

00:04:12.066 --> 00:04:13.606 A:middle
它不会等到缓存不足

00:04:13.606 --> 00:04:16.046 A:middle
它会立刻

00:04:16.125 --> 00:04:17.596 A:middle
在 IP 数据包标题中设一个字节

00:04:17.596 --> 00:04:19.815 A:middle
表明遭遇拥塞

00:04:19.815 --> 00:04:21.836 A:middle
这就是一个对发送者的暗示

00:04:22.125 --> 00:04:24.216 A:middle
发送者会放缓传输

00:04:24.216 --> 00:04:25.946 A:middle
让网络调整

00:04:25.946 --> 00:04:28.456 A:middle
发送者的传输速率而不必

00:04:28.456 --> 00:04:29.166 A:middle
损失数据

00:04:30.436 --> 00:04:31.856 A:middle
ECN 的一个副作用是

00:04:32.106 --> 00:04:34.076 A:middle
它同时鼓励了 ECN

00:04:34.106 --> 00:04:36.056 A:middle
在网络中配置更智能的

00:04:36.056 --> 00:04:37.606 A:middle
排队算法  这也是

00:04:37.606 --> 00:04:38.626 A:middle
一件好事情

00:04:39.566 --> 00:04:42.316 A:middle
如果你的设备比较单纯

00:04:42.416 --> 00:04:44.866 A:middle
只用一个

00:04:44.866 --> 00:04:47.216 A:middle
先到先得的排队算法

00:04:47.466 --> 00:04:48.596 A:middle
一直填满队列  直到

00:04:48.596 --> 00:04:49.296 A:middle
缓存不足

00:04:49.896 --> 00:04:51.796 A:middle
此时如果有一个数据包到达

00:04:51.796 --> 00:04:52.576 A:middle
它就没什么选择了

00:04:52.576 --> 00:04:53.566 A:middle
它只能丢失数据

00:04:54.276 --> 00:04:56.806 A:middle
所以你不能在一个愚蠢的 5-0 排队算法上

00:04:56.806 --> 00:04:57.956 A:middle
使用 ECN

00:04:58.656 --> 00:05:00.026 A:middle
你得用一个智能的排队算法

00:04:58.656 --> 00:05:00.026 A:middle
你得用一个智能的排队算法

00:05:00.556 --> 00:05:01.736 A:middle
而那些智能的排队算法

00:05:01.736 --> 00:05:03.726 A:middle
可以让队列保持在较短状态

00:05:03.776 --> 00:05:06.796 A:middle
并且在情况变得太糟糕之前

00:05:06.796 --> 00:05:08.276 A:middle
就发信号通知拥塞

00:05:08.766 --> 00:05:10.536 A:middle
它们可以帮助你将

00:05:10.536 --> 00:05:13.396 A:middle
网络中的延迟最小化

00:05:13.396 --> 00:05:14.446 A:middle
并且消灭缓存过满的问题

00:05:19.046 --> 00:05:20.596 A:middle
客户端  服务器和网络三个部分必须

00:05:20.596 --> 00:05:22.616 A:middle
协同工作

00:05:23.216 --> 00:05:26.396 A:middle
ECN 才能工作

00:05:29.966 --> 00:05:31.686 A:middle
我很高兴告诉你们

00:05:31.846 --> 00:05:33.806 A:middle
在我们最近一次对

00:05:33.806 --> 00:05:35.506 A:middle
Alexa 前 100 万网站的调查中

00:05:35.866 --> 00:05:37.516 A:middle
几乎四分之三

00:05:37.516 --> 00:05:38.806 A:middle
都已经支持 ECN 了

00:05:39.786 --> 00:05:41.646 A:middle
对于大部分情况来说

00:05:41.646 --> 00:05:42.836 A:middle
这并不是因为网络管理员

00:05:42.836 --> 00:05:44.316 A:middle
做了一个智慧的决定

00:05:44.346 --> 00:05:46.626 A:middle
来支持 ECN

00:05:46.626 --> 00:05:48.166 A:middle
这只不过是因为它是

00:05:48.166 --> 00:05:50.056 A:middle
默认的 Linux 内核的一部分

00:05:50.056 --> 00:05:50.776 A:middle
所以他们可以免费获取

00:05:51.506 --> 00:05:53.756 A:middle
好消息是

00:05:53.756 --> 00:05:55.266 A:middle
Alexa前 100 万网站中的

00:05:55.266 --> 00:05:57.146 A:middle
几乎四分之三都已经

00:05:57.146 --> 00:05:58.456 A:middle
支持 ECN 所以这是服务器要解决的问题了

00:06:00.586 --> 00:06:02.976 A:middle
在客户端这方面  我们一直在

00:06:02.976 --> 00:06:04.646 A:middle
苹果进行实验

00:06:05.566 --> 00:06:09.056 A:middle
在iOS 10.3中  对于

00:06:09.056 --> 00:06:11.386 A:middle
Wi-Fi  以太网和一些移动运营商中

00:06:11.386 --> 00:06:13.216 A:middle
所有符合条件的 TCP 连接

00:06:13.216 --> 00:06:16.086 A:middle
我们抛硬币随机选取

00:06:16.086 --> 00:06:18.286 A:middle
一半的 TCP 连接将

00:06:18.416 --> 00:06:18.986 A:middle
提出 ECN 请求

00:06:20.256 --> 00:06:21.976 A:middle
我们这么做是为了估测

00:06:21.976 --> 00:06:23.716 A:middle
网络是否对 ECN 安全

00:06:24.146 --> 00:06:26.066 A:middle
五年前  这样对实验

00:06:26.066 --> 00:06:27.176 A:middle
或许会产生

00:06:27.176 --> 00:06:27.996 A:middle
不同的结果

00:06:27.996 --> 00:06:29.656 A:middle
有的旧的防火墙

00:06:29.656 --> 00:06:31.296 A:middle
和 middlebox 会因为

00:06:31.296 --> 00:06:32.936 A:middle
ECN 而混乱

00:06:33.836 --> 00:06:36.146 A:middle
好消息是我们

00:06:36.146 --> 00:06:38.446 A:middle
在全世界范围内大面积进行这个实验

00:06:38.606 --> 00:06:41.966 A:middle
并未看到

00:06:41.966 --> 00:06:42.996 A:middle
任何新闻  并没有听到任何

00:06:42.996 --> 00:06:44.116 A:middle
客户抱怨

00:06:44.116 --> 00:06:45.226 A:middle
网络瘫痪

00:06:45.716 --> 00:06:48.346 A:middle
在我们为

00:06:48.346 --> 00:06:51.646 A:middle
考察设备表现如何而检测的

00:06:51.646 --> 00:06:53.706 A:middle
各项 AWD 指标中

00:06:53.706 --> 00:06:55.756 A:middle
我们没有发现任何在

00:06:56.136 --> 00:06:57.836 A:middle
数据包丢失  重新传输

00:06:57.836 --> 00:06:59.146 A:middle
重新排序或其他我们所关心的

00:06:59.146 --> 00:07:00.576 A:middle
指标方面有任何明显区别

00:06:59.146 --> 00:07:00.576 A:middle
指标方面有任何明显区别

00:07:00.986 --> 00:07:03.026 A:middle
所以  看起来

00:07:03.026 --> 00:07:04.906 A:middle
现在的网络使用 ECN 是安全的

00:07:05.996 --> 00:07:08.016 A:middle
现在我们已经不再期待会看到

00:07:08.346 --> 00:07:10.896 A:middle
任何网络拥塞标记

00:07:11.156 --> 00:07:12.636 A:middle
因为在

00:07:12.666 --> 00:07:13.916 A:middle
客户端和服务器执行

00:07:13.916 --> 00:07:15.646 A:middle
ECN 之前  有太多太多事情

00:07:15.646 --> 00:07:17.426 A:middle
刺激网络运营商

00:07:17.426 --> 00:07:18.746 A:middle
来使用它了

00:07:19.406 --> 00:07:21.836 A:middle
确实  在世界上大部分地方

00:07:22.486 --> 00:07:24.876 A:middle
我们几乎都看不到拥塞标记了

00:07:25.466 --> 00:07:27.606 A:middle
然而当我们再进一步观察

00:07:28.306 --> 00:07:31.956 A:middle
我们看到在墨西哥

00:07:31.956 --> 00:07:34.976 A:middle
我们采集的的设备报告中

00:07:34.976 --> 00:07:36.426 A:middle
3% 的数据中

00:07:36.796 --> 00:07:38.486 A:middle
至少有一个包经历了拥塞

00:07:39.916 --> 00:07:41.316 A:middle
在法国  这个数字是 6%

00:07:42.106 --> 00:07:43.936 A:middle
在阿根廷  这个数字是 30%

00:07:44.786 --> 00:07:45.946 A:middle
我不知道阿根廷人在搞什么

00:07:45.946 --> 00:07:47.176 A:middle
但是看起来

00:07:47.246 --> 00:07:48.766 A:middle
他们已经在

00:07:48.766 --> 00:07:50.356 A:middle
开始部署 ECN 了

00:07:50.356 --> 00:07:52.056 A:middle
如果这是真的

00:07:52.056 --> 00:07:52.836 A:middle
干得好  阿根廷

00:07:52.836 --> 00:07:53.596 A:middle
这就很神奇了

00:07:54.276 --> 00:07:57.886 A:middle
总结一下

00:07:57.886 --> 00:08:00.526 A:middle
服务器支持 ECN 客户端也

00:07:57.886 --> 00:08:00.526 A:middle
服务器支持 ECN 客户端也

00:08:00.526 --> 00:08:03.116 A:middle
支持 ECN 我们已经判定在 iOS 11

00:08:03.116 --> 00:08:04.186 A:middle
它是安全的

00:08:04.186 --> 00:08:06.466 A:middle
100%的可用连接

00:08:07.416 --> 00:08:09.086 A:middle
都会在无线网络  以太网或

00:08:09.306 --> 00:08:11.456 A:middle
一些特定的运营商中使用

00:08:12.196 --> 00:08:14.826 A:middle
如果你在运营商工作

00:08:14.826 --> 00:08:16.026 A:middle
而不在这个项目中

00:08:16.296 --> 00:08:18.956 A:middle
你可以联系你的运营商

00:08:18.956 --> 00:08:21.506 A:middle
在苹果的公关人员  他们会帮你

00:08:21.506 --> 00:08:22.926 A:middle
进入这个项目

00:08:22.926 --> 00:08:24.506 A:middle
让你的网络也支持 ECN

00:08:25.486 --> 00:08:26.996 A:middle
现在舞台已经搭好

00:08:27.196 --> 00:08:28.136 A:middle
用户在使用它

00:08:28.346 --> 00:08:29.476 A:middle
服务器也在使用它

00:08:29.936 --> 00:08:32.366 A:middle
世界上的任何 ISP 或网络运营商

00:08:32.366 --> 00:08:35.346 A:middle
可以使用

00:08:35.346 --> 00:08:36.926 A:middle
并且马上使他们的用户

00:08:36.966 --> 00:08:38.436 A:middle
获得更好的体验

00:08:39.655 --> 00:08:41.366 A:middle
一个关于 ECN 的常见的误区

00:08:41.366 --> 00:08:43.385 A:middle
就是它必须在整个网络的

00:08:43.385 --> 00:08:45.536 A:middle
所有路径上都实现

00:08:45.536 --> 00:08:46.986 A:middle
端到端的支持

00:08:47.246 --> 00:08:48.126 A:middle
但事实并不是这样

00:08:48.836 --> 00:08:50.836 A:middle
你只需要让

00:08:50.836 --> 00:08:53.446 A:middle
一处支持 ECN 就可以享受它

00:08:53.446 --> 00:08:54.146 A:middle
带来的福利

00:08:56.286 --> 00:08:58.006 A:middle
如我所说  在两个设备之间的

00:08:58.006 --> 00:08:59.576 A:middle
任何路径上  一般都有一个

00:08:59.576 --> 00:09:01.646 A:middle
链接是瓶颈链接

00:08:59.576 --> 00:09:01.646 A:middle
链接是瓶颈链接

00:09:01.646 --> 00:09:04.566 A:middle
对于你们中的大部分

00:09:04.566 --> 00:09:06.136 A:middle
在家使用宽带的人而言

00:09:06.136 --> 00:09:07.276 A:middle
那个瓶颈其实

00:09:07.526 --> 00:09:09.726 A:middle
是人为设置的

00:09:10.516 --> 00:09:11.866 A:middle
你可能购买的是 10MB

00:09:11.866 --> 00:09:14.046 A:middle
或者 20MB 又或者 50MB 的

00:09:14.046 --> 00:09:16.526 A:middle
服务  而你的 ISP 供应商

00:09:16.556 --> 00:09:18.956 A:middle
提供这个服务的方式

00:09:19.286 --> 00:09:20.746 A:middle
就是人为地把数据

00:09:20.746 --> 00:09:21.916 A:middle
掐到你付钱购买的那个速度上

00:09:23.066 --> 00:09:25.076 A:middle
所以你几乎所有连接的

00:09:25.076 --> 00:09:27.026 A:middle
路径上的一个队列

00:09:27.026 --> 00:09:29.476 A:middle
就是存在于你的

00:09:29.476 --> 00:09:31.726 A:middle
ISP 的前端设备的那个

00:09:31.826 --> 00:09:33.516 A:middle
你的数据在这个前端设备上被节流

00:09:34.536 --> 00:09:35.866 A:middle
这是路径上唯一

00:09:35.866 --> 00:09:37.706 A:middle
需要通过设置二进位

00:09:37.706 --> 00:09:39.296 A:middle
来标记拥塞的地方

00:09:39.356 --> 00:09:40.546 A:middle
而非通过丢失数据包

00:09:40.546 --> 00:09:43.266 A:middle
而你的用户可以获得

00:09:43.266 --> 00:09:45.046 A:middle
一个更快  响应更良好的

00:09:45.046 --> 00:09:45.876 A:middle
网络环境

00:09:46.546 --> 00:09:48.526 A:middle
我想请出

00:09:48.526 --> 00:09:49.876 A:middle
我的同事 David

00:09:49.876 --> 00:09:51.426 A:middle
Schinazzi 到台上来

00:09:51.736 --> 00:09:52.776 A:middle
给你们讲一些新的信息

00:09:54.516 --> 00:09:59.546 A:middle
[ 掌声 ]

00:10:00.046 --> 00:10:00.976 A:middle
&gt;&gt;  大家下午好

00:10:01.676 --> 00:10:03.606 A:middle
我叫 David Schinazzi 是一个

00:10:03.606 --> 00:10:04.866 A:middle
苹果的核心网络工程师

00:10:04.866 --> 00:10:06.306 A:middle
我想首先

00:10:06.306 --> 00:10:08.496 A:middle
谈一谈 IPv6

00:10:08.746 --> 00:10:10.036 A:middle
给你们一些最新的情况

00:10:11.156 --> 00:10:13.346 A:middle
尤其是你正在

00:10:13.346 --> 00:10:14.526 A:middle
写一些要用到网络的 app 的话

00:10:14.526 --> 00:10:16.116 A:middle
你需要关注一下

00:10:18.036 --> 00:10:20.176 A:middle
你们之中也许有人知道

00:10:20.736 --> 00:10:21.916 A:middle
昨天是全球 IPv6

00:10:21.916 --> 00:10:23.886 A:middle
投入使用五周年

00:10:25.426 --> 00:10:28.216 A:middle
五年前的昨天

00:10:28.216 --> 00:10:30.346 A:middle
网上的许多内容提供者

00:10:30.346 --> 00:10:31.896 A:middle
聚到一起

00:10:31.896 --> 00:10:32.686 A:middle
启用了 IPv6

00:10:32.776 --> 00:10:35.346 A:middle
它运行良好  所以他们

00:10:35.346 --> 00:10:37.196 A:middle
没有关闭它  但是那之后发生了什么呢？

00:10:38.306 --> 00:10:40.376 A:middle
这个图像显示的是

00:10:40.376 --> 00:10:42.776 A:middle
在过去几年中的客户端设备使用情况

00:10:42.836 --> 00:10:45.146 A:middle
那时候  不到 1% 的设备

00:10:45.146 --> 00:10:46.706 A:middle
支持 IPv6

00:10:47.046 --> 00:10:48.506 A:middle
现在  数字几乎达到 20%

00:10:49.306 --> 00:10:51.076 A:middle
很重要的一点是

00:10:51.076 --> 00:10:52.886 A:middle
如果你为苹果设备写 app 的话

00:10:52.886 --> 00:10:54.686 A:middle
在苹果设备使用最多的市场

00:10:54.686 --> 00:10:55.946 A:middle
这些数字一般来说

00:10:55.946 --> 00:10:56.936 A:middle
会更高

00:10:58.356 --> 00:10:59.416 A:middle
尤其是对蜂窝数据来说

00:10:59.416 --> 00:11:02.996 A:middle
几乎与我们合作的

00:10:59.416 --> 00:11:02.996 A:middle
几乎与我们合作的

00:11:02.996 --> 00:11:04.586 A:middle
所有运营商现在都使用

00:11:04.586 --> 00:11:06.196 A:middle
双栈  就是说他们

00:11:06.196 --> 00:11:08.416 A:middle
同时提供 IPv4 和 IPv6

00:11:08.536 --> 00:11:11.716 A:middle
好消息是  这样的效果更好

00:11:12.686 --> 00:11:14.156 A:middle
所以我们事实上

00:11:14.306 --> 00:11:15.106 A:middle
依据很多我们的设备所作出的连接

00:11:15.106 --> 00:11:16.476 A:middle
而进行估测

00:11:16.976 --> 00:11:19.206 A:middle
HTTPS 请求的加载速度提高了

00:11:19.206 --> 00:11:22.006 A:middle
15-30% 这意味着

00:11:22.006 --> 00:11:23.166 A:middle
如果你同时打开了两个 app

00:11:23.166 --> 00:11:24.836 A:middle
你就会发现其中的区别

00:11:25.626 --> 00:11:27.286 A:middle
你的用户也会看到区别

00:11:28.786 --> 00:11:29.926 A:middle
所以如果你至今仍不知道

00:11:29.926 --> 00:11:31.776 A:middle
是否支持 IPv6

00:11:32.366 --> 00:11:34.356 A:middle
你需要检查一下

00:11:34.356 --> 00:11:35.726 A:middle
联系你的服务器团队  确保他们

00:11:35.726 --> 00:11:36.376 A:middle
能够支持 IPv6

00:11:36.376 --> 00:11:38.216 A:middle
你可无法负担得起

00:11:38.216 --> 00:11:39.366 A:middle
一直拖着不用它

00:11:41.266 --> 00:11:42.536 A:middle
另一个重要的我想谈的趋势

00:11:42.536 --> 00:11:43.996 A:middle
是 NAT64

00:11:43.996 --> 00:11:46.536 A:middle
我们从两年前的 WWDC

00:11:46.536 --> 00:11:48.976 A:middle
开始讨论这件事

00:11:48.976 --> 00:11:49.916 A:middle
去年我们把它变成了一个 App Store 的准入要求

00:11:49.916 --> 00:11:52.316 A:middle
现在它来了

00:11:52.846 --> 00:11:54.676 A:middle
它已经在一个

00:11:54.676 --> 00:11:56.926 A:middle
美国的主流运营商上

00:11:56.926 --> 00:12:00.336 A:middle
投入使用了几个月  每个设备

00:11:56.926 --> 00:12:00.336 A:middle
投入使用了几个月  每个设备

00:12:00.606 --> 00:12:01.206 A:middle
都是只支持 v6 的

00:12:01.726 --> 00:12:03.306 A:middle
它们没有 IPv4 地址

00:12:03.346 --> 00:12:05.456 A:middle
它们只能通过 IPv6 交流

00:12:06.256 --> 00:12:07.486 A:middle
但那并不意味着你

00:12:07.486 --> 00:12:08.896 A:middle
不能与 v4 服务器交流

00:12:08.896 --> 00:12:10.426 A:middle
因为有一个叫做 NAT64 的网络盒子

00:12:10.746 --> 00:12:13.426 A:middle
设备就仍然可以

00:12:13.426 --> 00:12:14.846 A:middle
连接到那些服务器

00:12:14.946 --> 00:12:16.046 A:middle
然而  这样你就无法获得

00:12:16.046 --> 00:12:17.226 A:middle
那些我们谈到的

00:12:17.226 --> 00:12:18.356 A:middle
本地使用 v6 的性能优势了

00:12:20.606 --> 00:12:21.966 A:middle
但是  最重要的是

00:12:21.966 --> 00:12:23.996 A:middle
app 需要确保它

00:12:23.996 --> 00:12:25.076 A:middle
支持 IPv6

00:12:25.206 --> 00:12:27.096 A:middle
如果它试图连接到 IPv4

00:12:27.096 --> 00:12:28.156 A:middle
这是行不通的

00:12:29.126 --> 00:12:30.156 A:middle
那么你要怎么做呢

00:12:30.546 --> 00:12:31.376 A:middle
其实非常简单

00:12:31.976 --> 00:12:33.756 A:middle
如果你使用我们的高级 API

00:12:34.006 --> 00:12:35.786 A:middle
比如 URLSession CFNetwork

00:12:36.176 --> 00:12:37.536 A:middle
系统库会替你完成所有这些

00:12:37.536 --> 00:12:38.596 A:middle
繁重工作

00:12:38.966 --> 00:12:39.976 A:middle
你不需要担心任何

00:12:40.006 --> 00:12:42.136 A:middle
IPv4 或 IPv6 的事情

00:12:42.136 --> 00:12:43.146 A:middle
它会自动运行

00:12:43.556 --> 00:12:45.536 A:middle
你需要避免的是

00:12:45.536 --> 00:12:47.936 A:middle
在 API 上使用 Legacy IPv4

00:12:48.466 --> 00:12:50.046 A:middle
直接在你的 app 上

00:12:50.046 --> 00:12:53.146 A:middle
输入一个 IPv4 地址  或者使用

00:12:53.146 --> 00:12:54.156 A:middle
预先检查

00:12:54.846 --> 00:12:57.346 A:middle
比方说  如果你在

00:12:57.346 --> 00:12:59.036 A:middle
进行连接之前检查

00:12:59.036 --> 00:13:00.366 A:middle
设备是否是 IPv4 地址

00:12:59.036 --> 00:13:00.366 A:middle
设备是否是 IPv4 地址

00:13:00.366 --> 00:13:00.936 A:middle
就是行不通的

00:13:03.486 --> 00:13:05.346 A:middle
并且

00:13:05.346 --> 00:13:06.316 A:middle
你需要考虑它的另一个原因是

00:13:06.316 --> 00:13:07.916 A:middle
这是一个 app 的审查标准

00:13:08.946 --> 00:13:10.496 A:middle
任何 app 不管是新的

00:13:10.856 --> 00:13:12.826 A:middle
还是一个升级版本  要在 app store 上架

00:13:12.826 --> 00:13:13.546 A:middle
都必须具备此性能

00:13:14.076 --> 00:13:16.036 A:middle
每一个 app 都会在一个

00:13:16.266 --> 00:13:18.666 A:middle
只有 IPv6 的 NAT64 网络环境中被测试

00:13:18.666 --> 00:13:20.256 A:middle
如果它无法运行  你就无法

00:13:20.256 --> 00:13:21.236 A:middle
让它上架

00:13:21.886 --> 00:13:23.196 A:middle
然而  我要祝贺

00:13:23.196 --> 00:13:24.776 A:middle
所有的开发者

00:13:24.776 --> 00:13:26.676 A:middle
因为你们都已经修正了

00:13:26.676 --> 00:13:28.246 A:middle
你们的 app  我们现在已经几乎

00:13:28.246 --> 00:13:29.196 A:middle
不用拒绝任何 app 了

00:13:29.596 --> 00:13:30.356 A:middle
干得好

00:13:32.076 --> 00:13:34.066 A:middle
如果你希望我给出一些关于

00:13:34.066 --> 00:13:34.986 A:middle
如何保证一切正常的

00:13:34.986 --> 00:13:37.126 A:middle
建议  开发者网站上有一个

00:13:37.126 --> 00:13:38.676 A:middle
部分叫做

00:13:38.676 --> 00:13:40.696 A:middle
支持 supporting IPv6 DNS64/NAT64

00:13:40.696 --> 00:13:41.466 A:middle
网站

00:13:41.626 --> 00:13:42.896 A:middle
你也随时可以加入我们

00:13:42.896 --> 00:13:45.196 A:middle
明天和周五的实验室  提出任何问题

00:13:49.046 --> 00:13:50.626 A:middle
现在我想换个话题

00:13:50.626 --> 00:13:52.426 A:middle
聊聊在设备本身的网络架构问题

00:13:52.426 --> 00:13:54.646 A:middle
然后向你们介绍

00:13:54.646 --> 00:13:55.946 A:middle
今年我们称之为用户空间网络架构的

00:13:55.946 --> 00:13:57.416 A:middle
东西

00:13:58.646 --> 00:14:00.596 A:middle
你或许对

00:13:58.646 --> 00:14:00.596 A:middle
你或许对

00:14:00.666 --> 00:14:01.826 A:middle
网络堆栈的传统模型很熟悉

00:14:01.826 --> 00:14:04.396 A:middle
在这种模型中

00:14:04.396 --> 00:14:05.806 A:middle
内核承担了很多繁重的工作

00:14:06.436 --> 00:14:08.796 A:middle
所以诸如 Wi-Fi  IP

00:14:08.796 --> 00:14:10.486 A:middle
TCP 等协议都是在内核中处理的

00:14:11.536 --> 00:14:12.796 A:middle
那样就有一个边界叫做

00:14:12.896 --> 00:14:14.866 A:middle
BSD socket API

00:14:15.256 --> 00:14:16.486 A:middle
而其他的都在 app 内部

00:14:16.486 --> 00:14:17.126 A:middle
进行处理

00:14:17.846 --> 00:14:18.906 A:middle
我的意思是  在

00:14:18.906 --> 00:14:20.006 A:middle
app 运行过程之内  而不

00:14:20.006 --> 00:14:20.846 A:middle
是在你的代码之内

00:14:21.186 --> 00:14:22.376 A:middle
它有可能在系统库里面

00:14:22.376 --> 00:14:24.196 A:middle
但是 HTTPS 或者 TLS 这样的协议

00:14:24.196 --> 00:14:26.096 A:middle
就会被在这个过程中被处理

00:14:27.456 --> 00:14:29.456 A:middle
在 iOS 11 中我们第一次提出了

00:14:29.456 --> 00:14:31.696 A:middle
我们正在

00:14:31.696 --> 00:14:33.456 A:middle
将 app 中的一切都统一起来

00:14:34.386 --> 00:14:36.216 A:middle
这就意味着

00:14:36.216 --> 00:14:37.826 A:middle
各个协议的联系可以更紧密

00:14:37.826 --> 00:14:40.076 A:middle
一切都会具有更高性能

00:14:40.756 --> 00:14:42.786 A:middle
我们注意到它会大量

00:14:42.786 --> 00:14:44.826 A:middle
减少 CPU 的使用量

00:14:44.826 --> 00:14:46.196 A:middle
让你能有更多

00:14:46.196 --> 00:14:48.116 A:middle
的动画时间  不仅如此

00:14:48.116 --> 00:14:49.146 A:middle
最终用户会有更长的续航时间

00:14:51.756 --> 00:14:53.076 A:middle
我要提醒的是

00:14:53.076 --> 00:14:54.806 A:middle
你只有在使用一个

00:14:54.806 --> 00:14:56.006 A:middle
高等级 IPI

00:14:56.006 --> 00:14:57.206 A:middle
比如 URLSession 时才可以获取这个协议

00:14:57.756 --> 00:14:59.226 A:middle
如果你依然在使用 CBSD 插座的话

00:14:59.226 --> 00:15:00.246 A:middle
你就无法获得这些性能优势了

00:14:59.226 --> 00:15:00.246 A:middle
你就无法获得这些性能优势了

00:15:02.156 --> 00:15:04.236 A:middle
我还要提出的一点

00:15:04.236 --> 00:15:05.996 A:middle
就是

00:15:05.996 --> 00:15:08.196 A:middle
Network Kernel Extensions

00:15:08.196 --> 00:15:10.296 A:middle
它依赖于内核中的

00:15:10.296 --> 00:15:12.406 A:middle
传统 BSD 插座，我们很快就不会再使用了

00:15:13.466 --> 00:15:15.516 A:middle
如果你还在使用它们的话

00:15:15.516 --> 00:15:17.666 A:middle
请现在就开始向

00:15:17.666 --> 00:15:19.196 A:middle
网络扩展框架过渡

00:15:19.596 --> 00:15:20.716 A:middle
如果你有任何问题的话

00:15:20.716 --> 00:15:22.016 A:middle
可以来找我们讨论

00:15:23.456 --> 00:15:24.326 A:middle
说到网络扩展框架

00:15:24.326 --> 00:15:26.726 A:middle
我想向你们介绍

00:15:26.726 --> 00:15:29.116 A:middle
关于Wi-Fi配置和

00:15:29.546 --> 00:15:31.126 A:middle
扩展 DNS 的两款今年新开发的 API

00:15:32.976 --> 00:15:35.416 A:middle
新的框架是两年前

00:15:35.416 --> 00:15:37.536 A:middle
提出的

00:15:37.536 --> 00:15:39.226 A:middle
有四个主要部分

00:15:39.976 --> 00:15:42.736 A:middle
NEVPNManager 允许你配置

00:15:43.656 --> 00:15:45.356 A:middle
设备上的 VPN 堆栈

00:15:46.446 --> 00:15:48.336 A:middle
NETunnelProvider 允许你

00:15:48.336 --> 00:15:49.706 A:middle
构建自己的用户 VPN 协议

00:15:51.076 --> 00:15:52.806 A:middle
NEHotspotHelper 允许你

00:15:53.166 --> 00:15:54.926 A:middle
自定义你的设备如何

00:15:55.456 --> 00:15:57.736 A:middle
验证 Wi-Fi 热点

00:15:58.306 --> 00:16:00.096 A:middle
最后 NEFilterProvider

00:15:58.306 --> 00:16:00.096 A:middle
最后 NEFilterProvider

00:16:00.096 --> 00:16:01.786 A:middle
允许你建立一个安全的

00:16:01.896 --> 00:16:03.246 A:middle
基于设备的内容过滤器

00:16:03.916 --> 00:16:05.426 A:middle
我不会过于详细地

00:16:05.426 --> 00:16:07.366 A:middle
解释这个 API 的四个部分

00:16:07.366 --> 00:16:09.536 A:middle
不过两年前有一场 WWDC 会议

00:16:09.536 --> 00:16:11.536 A:middle
讲了很多关于这个的细节

00:16:13.956 --> 00:16:16.346 A:middle
现在我们来讨论关于热点配置的问题

00:16:18.396 --> 00:16:20.616 A:middle
你们或许有过这样的经历

00:16:20.616 --> 00:16:22.356 A:middle
买来一个

00:16:22.356 --> 00:16:24.326 A:middle
智能相机

00:16:24.736 --> 00:16:26.296 A:middle
你把它从盒子里拿出来

00:16:26.296 --> 00:16:27.746 A:middle
它就告诉你  在你的 iphone 上加入这个

00:16:27.746 --> 00:16:30.486 A:middle
Wi-Fi 网络来

00:16:30.486 --> 00:16:32.256 A:middle
配置这个 app

00:16:32.256 --> 00:16:33.726 A:middle
然后在这个 app 里它会告诉你

00:16:33.726 --> 00:16:35.196 A:middle
打开设置  选择 Wi-Fi

00:16:35.196 --> 00:16:36.976 A:middle
输入密码  整个过程非常麻烦

00:16:37.716 --> 00:16:38.976 A:middle
用户可能会输错密码

00:16:39.596 --> 00:16:40.756 A:middle
他们也可能会忘记

00:16:40.756 --> 00:16:42.016 A:middle
设置 app 在哪

00:16:42.406 --> 00:16:43.686 A:middle
我们收到了很多

00:16:43.686 --> 00:16:45.186 A:middle
开发者的请求  寻求一个

00:16:45.186 --> 00:16:46.186 A:middle
更好的解决方案

00:16:46.896 --> 00:16:48.666 A:middle
我们就添加了这个

00:16:48.666 --> 00:16:50.496 A:middle
简单的 API 允许你

00:16:50.496 --> 00:16:52.946 A:middle
做任何可以在 app 中做的操作

00:16:53.516 --> 00:16:57.676 A:middle
[ 掌声 ]

00:16:58.176 --> 00:16:59.786 A:middle
现在用户再也不必

00:16:59.786 --> 00:17:01.076 A:middle
关掉 app 他们会收到一个

00:16:59.786 --> 00:17:01.076 A:middle
关掉 app 他们会收到一个

00:17:01.076 --> 00:17:02.626 A:middle
提示以确认他们

00:17:02.676 --> 00:17:03.886 A:middle
是否想做某个操作

00:17:04.165 --> 00:17:05.526 A:middle
他们点击“加入”  就可以

00:17:05.526 --> 00:17:06.076 A:middle
联入 Wi-Fi

00:17:06.076 --> 00:17:07.256 A:middle
就这么简单

00:17:07.616 --> 00:17:10.185 A:middle
你可以把这个 API 设置成

00:17:10.185 --> 00:17:10.925 A:middle
暂时的

00:17:10.925 --> 00:17:13.326 A:middle
如果你正在为一个智能设备

00:17:13.326 --> 00:17:14.546 A:middle
开发一个配置 appc

00:17:14.546 --> 00:17:16.396 A:middle
你只会希望你在用 app 的时候

00:17:16.396 --> 00:17:18.175 A:middle
才联入这个 Wi-Fi

00:17:19.146 --> 00:17:20.636 A:middle
所以  如果用户想要

00:17:20.636 --> 00:17:21.695 A:middle
关掉你的 app 然后

00:17:21.695 --> 00:17:23.026 A:middle
做其他的事情

00:17:23.026 --> 00:17:24.656 A:middle
设备会自动断开这个

00:17:24.656 --> 00:17:27.126 A:middle
Wi-Fi 并且加入

00:17:27.126 --> 00:17:28.256 A:middle
其他的 Wi-Fi 网络

00:17:28.956 --> 00:17:31.096 A:middle
你也可以用这个 API 达到

00:17:31.256 --> 00:17:32.696 A:middle
传统意义上使用 Wi-Fi 的目的

00:17:33.126 --> 00:17:34.196 A:middle
比如  如果你正在为一个连锁咖啡店

00:17:34.196 --> 00:17:36.446 A:middle
开发 app

00:17:36.446 --> 00:17:37.336 A:middle
希望你的用户能够

00:17:37.336 --> 00:17:38.656 A:middle
在这些咖啡店里自动

00:17:38.656 --> 00:17:39.496 A:middle
联入 Wi-Fi

00:17:40.236 --> 00:17:41.786 A:middle
当然 CPI 支持

00:17:41.786 --> 00:17:43.936 A:middle
所有我们的 Wi-Fi 协议栈今天

00:17:43.936 --> 00:17:46.036 A:middle
支持的所有认证方式

00:17:47.346 --> 00:17:48.566 A:middle
让我来向你们展示这有多简单

00:17:48.566 --> 00:17:50.876 A:middle
这是一些关于以上两个例子

00:17:50.876 --> 00:17:52.506 A:middle
的示范代码

00:17:52.506 --> 00:17:53.856 A:middle
如果你想配置一个照相机

00:17:53.856 --> 00:17:55.586 A:middle
你只需要

00:17:55.586 --> 00:17:57.356 A:middle
用 Wi-Fi 的名字和密码

00:17:57.356 --> 00:17:58.616 A:middle
创建一个配置

00:17:59.426 --> 00:18:01.136 A:middle
然后设置要加入的那个网络的属性

00:17:59.426 --> 00:18:01.136 A:middle
然后设置要加入的那个网络的属性

00:18:01.136 --> 00:18:02.276 A:middle
表明你想在

00:18:02.276 --> 00:18:04.396 A:middle
设备或者用户关掉

00:18:04.606 --> 00:18:07.236 A:middle
你的 app 时断开连接

00:18:07.236 --> 00:18:07.836 A:middle
然后应用这个配置

00:18:09.606 --> 00:18:11.646 A:middle
然后检查结果是否成功

00:18:12.726 --> 00:18:14.116 A:middle
咖啡店那个例子其实

00:18:14.116 --> 00:18:15.516 A:middle
更加简单  你只需要创建一个

00:18:15.516 --> 00:18:17.946 A:middle
配置  应用

00:18:18.046 --> 00:18:18.356 A:middle
然后就完成了

00:18:20.516 --> 00:18:21.956 A:middle
现在我想谈谈

00:18:21.956 --> 00:18:23.206 A:middle
DNS proxy provider

00:18:24.646 --> 00:18:26.716 A:middle
CPL 允许你自定义

00:18:27.826 --> 00:18:29.666 A:middle
iPhone 或其他 iOS 设备

00:18:29.666 --> 00:18:33.666 A:middle
与 DNS 互动的方式

00:18:33.846 --> 00:18:35.326 A:middle
所以这个 API 就是允许你用最

00:18:35.326 --> 00:18:36.986 A:middle
简单的方式将所有请求都

00:18:37.046 --> 00:18:39.106 A:middle
转到你自己的一个解析器上

00:18:39.956 --> 00:18:41.496 A:middle
比方说  如果这个

00:18:41.496 --> 00:18:43.756 A:middle
解析器有更好的功能

00:18:43.756 --> 00:18:44.696 A:middle
你甚至可以用它来获取

00:18:44.696 --> 00:18:46.576 A:middle
单个的 DNS 请求并且

00:18:46.576 --> 00:18:49.276 A:middle
通过一个自定义协议发送他们

00:18:49.446 --> 00:18:53.006 A:middle
比如基于 TLS 的 DNS 或基于 GTP 的 DNS 等

00:18:53.796 --> 00:18:55.856 A:middle
那么这就是今年关于

00:18:55.856 --> 00:18:56.996 A:middle
网络扩展的一些最新进展

00:18:57.446 --> 00:18:59.456 A:middle
一个小提示  这是一个

00:18:59.456 --> 00:19:02.366 A:middle
非常强大的 API 所以

00:18:59.456 --> 00:19:02.366 A:middle
非常强大的 API 所以

00:19:02.436 --> 00:19:03.606 A:middle
它做任何事情都必须要求

00:19:03.606 --> 00:19:05.686 A:middle
X-code 能力和权限

00:19:05.686 --> 00:19:07.266 A:middle
也包括用户的同意

00:19:08.176 --> 00:19:10.286 A:middle
现在我想请

00:19:10.286 --> 00:19:11.586 A:middle
Christoph Paasch 到台上

00:19:11.586 --> 00:19:13.056 A:middle
谈谈多路径设备的有关内容

00:19:14.516 --> 00:19:16.706 A:middle
[ 掌声 ]

00:19:17.206 --> 00:19:17.826 A:middle
&gt;&gt;  谢谢 David

00:19:18.826 --> 00:19:19.716 A:middle
大家好

00:19:20.686 --> 00:19:22.016 A:middle
我是 Christoph Paasch

00:19:22.076 --> 00:19:23.446 A:middle
我是苹果的一个网络工程师

00:19:23.526 --> 00:19:25.506 A:middle
我将会向你们展示

00:19:25.506 --> 00:19:27.766 A:middle
我们在 iOS 11 中提供的

00:19:27.766 --> 00:19:29.156 A:middle
能够提高你的

00:19:29.156 --> 00:19:31.186 A:middle
app 在移动设备上的网络连接的

00:19:31.476 --> 00:19:32.406 A:middle
一些新技术

00:19:35.306 --> 00:19:37.386 A:middle
你们肯定都经历过

00:19:38.096 --> 00:19:39.496 A:middle
你正在使用 app

00:19:39.736 --> 00:19:41.286 A:middle
而你的 app 正在

00:19:41.286 --> 00:19:43.276 A:middle
从互联网上下载东西

00:19:43.276 --> 00:19:45.466 A:middle
你一边用着 app

00:19:45.466 --> 00:19:47.036 A:middle
一边从家走出来

00:19:48.246 --> 00:19:49.326 A:middle
现在  当你正从你家

00:19:49.326 --> 00:19:51.056 A:middle
走出来时  你也正

00:19:51.106 --> 00:19:52.606 A:middle
离你的 Wi-Fi 接入点

00:19:52.606 --> 00:19:54.726 A:middle
越来越远  这基本上

00:19:54.726 --> 00:19:56.706 A:middle
意味着你在 Wi-Fi 上创建的连接

00:19:56.706 --> 00:19:58.496 A:middle
也正在变得

00:19:58.496 --> 00:20:00.656 A:middle
越来越慢

00:19:58.496 --> 00:20:00.656 A:middle
越来越慢

00:20:00.656 --> 00:20:03.686 A:middle
最终你的 app 也会

00:20:03.686 --> 00:20:05.236 A:middle
越来越慢

00:20:05.236 --> 00:20:06.416 A:middle
因为它已经无法从网上

00:20:06.416 --> 00:20:07.556 A:middle
下载内容了

00:20:08.806 --> 00:20:10.156 A:middle
只有当你与蜂窝数据

00:20:10.156 --> 00:20:12.076 A:middle
重新建立了一个连接之后

00:20:12.076 --> 00:20:13.976 A:middle
它才能够

00:20:14.246 --> 00:20:16.026 A:middle
重新再开始下载

00:20:17.186 --> 00:20:19.096 A:middle
现在  这件事发生的

00:20:19.206 --> 00:20:21.136 A:middle
原因是我今天使用的

00:20:21.136 --> 00:20:23.266 A:middle
协议是几十年之前

00:20:23.306 --> 00:20:24.926 A:middle
开发的  它被创建出来时

00:20:24.926 --> 00:20:26.446 A:middle
还没有考虑到

00:20:26.446 --> 00:20:28.296 A:middle
移动设备的问题

00:20:29.636 --> 00:20:31.996 A:middle
现在  苹果在几年前

00:20:32.046 --> 00:20:33.816 A:middle
就已经意识到了这个问题

00:20:33.816 --> 00:20:36.246 A:middle
我们在 iOS 中有相应的技术

00:20:36.366 --> 00:20:38.496 A:middle
来对症下药

00:20:40.086 --> 00:20:42.206 A:middle
从 iOS 9 起我们推出了 Wi-F Assist

00:20:42.206 --> 00:20:44.936 A:middle
现在在 iOS 11 中

00:20:44.936 --> 00:20:46.246 A:middle
我们进一步更新了这一功能

00:20:47.306 --> 00:20:48.566 A:middle
我们推出了一个

00:20:48.566 --> 00:20:50.496 A:middle
新的多路径传输协议

00:20:50.766 --> 00:20:52.406 A:middle
叫做 Multipath TCP

00:20:52.406 --> 00:20:54.666 A:middle
并且在 iOS 11 中我们将把它开源

00:20:54.666 --> 00:20:56.436 A:middle
作为一个公共的 API

00:20:58.516 --> 00:21:00.906 A:middle
现在我们先

00:20:58.516 --> 00:21:00.906 A:middle
现在我们先

00:21:00.906 --> 00:21:04.376 A:middle
回顾一下

00:21:04.376 --> 00:21:05.596 A:middle
我们想要解决的是

00:21:05.596 --> 00:21:08.496 A:middle
哪些情况

00:21:08.606 --> 00:21:10.466 A:middle
当你的手机联入

00:21:10.466 --> 00:21:12.686 A:middle
一个良好的 Wi-Fi 网络时

00:21:12.686 --> 00:21:13.856 A:middle
你会创建一个连接

00:21:13.856 --> 00:21:15.086 A:middle
并且你只会从

00:21:15.086 --> 00:21:17.336 A:middle
Wi-Fi 网络中进行下载

00:21:18.356 --> 00:21:20.416 A:middle
如果你的用户正在

00:21:20.416 --> 00:21:22.196 A:middle
走出 Wi-Fi 的覆盖范围  或者离开

00:21:22.196 --> 00:21:24.166 A:middle
Wi-Fi 的接入点  信号强度就会

00:21:24.166 --> 00:21:25.486 A:middle
越来越低

00:21:25.486 --> 00:21:27.106 A:middle
连接也会越来越慢

00:21:27.106 --> 00:21:28.846 A:middle
而最终它会

00:21:28.846 --> 00:21:29.856 A:middle
完全停止

00:21:31.416 --> 00:21:32.946 A:middle
接下来如果你还想

00:21:32.946 --> 00:21:34.946 A:middle
继续下载数据的话

00:21:34.946 --> 00:21:36.836 A:middle
你就需要

00:21:36.836 --> 00:21:37.806 A:middle
在数据网络上创建

00:21:37.806 --> 00:21:39.556 A:middle
一个新的连接

00:21:39.556 --> 00:21:41.256 A:middle
然后从那一刻起

00:21:41.256 --> 00:21:42.486 A:middle
你就再次一切就绪了

00:21:42.486 --> 00:21:44.736 A:middle
你的 app 又可以响应

00:21:44.736 --> 00:21:45.876 A:middle
从服务器发出的数据了

00:21:47.466 --> 00:21:49.036 A:middle
如果你想应对这个情况

00:21:49.036 --> 00:21:50.336 A:middle
在你的 app 的

00:21:50.336 --> 00:21:52.186 A:middle
应用层面

00:21:52.186 --> 00:21:53.786 A:middle
你需要做以下

00:21:53.786 --> 00:21:55.366 A:middle
几件事情

00:21:55.656 --> 00:21:58.006 A:middle
首先你需要记录

00:21:58.006 --> 00:21:59.316 A:middle
你在做的一切事情

00:21:59.356 --> 00:22:01.106 A:middle
因为你不知道什么时候

00:21:59.356 --> 00:22:01.106 A:middle
因为你不知道什么时候

00:22:01.106 --> 00:22:04.556 A:middle
Wi-Fi 会断开

00:22:04.556 --> 00:22:05.746 A:middle
所以你就需要记住

00:22:05.746 --> 00:22:06.856 A:middle
你所做过的一切操作以及

00:22:06.856 --> 00:22:08.236 A:middle
正在传输的请求

00:22:09.806 --> 00:22:12.946 A:middle
第二  你需要一种可以

00:22:13.046 --> 00:22:15.186 A:middle
检测到 Wi-Fi 的方法

00:22:15.186 --> 00:22:16.836 A:middle
所以你需要设法

00:22:16.836 --> 00:22:18.206 A:middle
监测 Wi-Fi 连接的进展情况

00:22:20.496 --> 00:22:22.406 A:middle
现在  一旦你

00:22:22.406 --> 00:22:24.206 A:middle
发现 Wi-Fi 已经不可用

00:22:24.206 --> 00:22:26.436 A:middle
或者已经无法

00:22:26.436 --> 00:22:27.766 A:middle
提供你需要的服务时

00:22:27.766 --> 00:22:29.266 A:middle
你就需要

00:22:29.266 --> 00:22:30.506 A:middle
创建一个数据网络中的新连接

00:22:31.146 --> 00:22:32.776 A:middle
这就是说你需要进行一个

00:22:32.956 --> 00:22:36.146 A:middle
DSN 重连 TCP 重连和

00:22:36.146 --> 00:22:37.136 A:middle
一个 TLS 重连

00:22:37.726 --> 00:22:39.596 A:middle
只有在这几个步骤完成之后

00:22:39.946 --> 00:22:41.676 A:middle
你才可以通过

00:22:41.676 --> 00:22:44.366 A:middle
蜂窝数据接口

00:22:44.366 --> 00:22:46.166 A:middle
来实现数据传输

00:22:46.166 --> 00:22:47.316 A:middle
你的 app 才可以继续运行

00:22:48.786 --> 00:22:49.946 A:middle
在应用层面完成这些

00:22:49.946 --> 00:22:52.526 A:middle
操作是非常繁琐的

00:22:52.836 --> 00:22:54.166 A:middle
而这只是我们想要解决的

00:22:54.206 --> 00:22:55.926 A:middle
情况之一

00:22:57.736 --> 00:22:59.186 A:middle
我们来看另一个情况

00:22:59.966 --> 00:23:01.616 A:middle
大概是当你在一个

00:22:59.966 --> 00:23:01.616 A:middle
大概是当你在一个

00:23:01.616 --> 00:23:03.236 A:middle
很差的 Wi-Fi 下的情况

00:23:03.756 --> 00:23:05.856 A:middle
比方说  你坐在一个

00:23:05.996 --> 00:23:07.226 A:middle
咖啡馆里  你连接的是

00:23:07.226 --> 00:23:08.176 A:middle
一个公共热点

00:23:09.126 --> 00:23:10.586 A:middle
通常这个公共热点

00:23:10.876 --> 00:23:12.386 A:middle
都是运行良好的

00:23:13.066 --> 00:23:14.986 A:middle
然而有时候很多

00:23:14.986 --> 00:23:16.406 A:middle
其他用户也在咖啡馆里

00:23:16.406 --> 00:23:17.876 A:middle
也许他们中的一个正在

00:23:17.876 --> 00:23:19.226 A:middle
下载一个特别大的文件

00:23:20.086 --> 00:23:23.126 A:middle
由于大部分时候

00:23:23.126 --> 00:23:24.646 A:middle
这个网络并没有一个

00:23:24.646 --> 00:23:27.116 A:middle
智能的队列管理系统

00:23:27.116 --> 00:23:28.746 A:middle
下载这个大型文件可能会

00:23:28.746 --> 00:23:30.086 A:middle
在网络内部造成

00:23:30.086 --> 00:23:32.076 A:middle
缓存过满  而这个

00:23:32.076 --> 00:23:35.056 A:middle
塞子将会使其他

00:23:35.056 --> 00:23:36.796 A:middle
网络连接都特别慢

00:23:37.776 --> 00:23:39.796 A:middle
这就意味着

00:23:39.796 --> 00:23:42.336 A:middle
你的 app 将无法

00:23:42.336 --> 00:23:43.776 A:middle
从互联网

00:23:43.776 --> 00:23:45.636 A:middle
下载数据了

00:23:47.266 --> 00:23:48.496 A:middle
如果你想在

00:23:48.496 --> 00:23:49.566 A:middle
你的 app 中解决

00:23:49.566 --> 00:23:51.596 A:middle
这种问题

00:23:51.596 --> 00:23:53.226 A:middle
你需要在 Wi-Fi 和数据网络上都

00:23:53.226 --> 00:23:55.766 A:middle
创建一个接口  当你

00:23:55.766 --> 00:23:57.506 A:middle
发现 Wi-Fi 情况已经

00:23:57.506 --> 00:23:59.596 A:middle
不够好

00:23:59.596 --> 00:24:01.186 A:middle
数据延迟已经过高时

00:23:59.596 --> 00:24:01.186 A:middle
数据延迟已经过高时

00:24:01.626 --> 00:24:02.796 A:middle
你可以把一小部分数据

00:24:02.796 --> 00:24:04.896 A:middle
通过蜂窝数据传输

00:24:04.896 --> 00:24:06.306 A:middle
这样你的 app 就可以继续运行

00:24:07.256 --> 00:24:08.936 A:middle
一旦 Wi-Fi 再次变好

00:24:08.936 --> 00:24:10.476 A:middle
你可以再次

00:24:10.476 --> 00:24:11.866 A:middle
把你所有的流量都切换到 Wi-Fi 连接

00:24:12.846 --> 00:24:14.136 A:middle
在应用层面完成

00:24:14.136 --> 00:24:15.306 A:middle
这个操作可以说极其困难

00:24:18.746 --> 00:24:22.326 A:middle
这让我们开发了 Wi-Fi

00:24:22.326 --> 00:24:24.626 A:middle
Assist  它是我们从

00:24:24.626 --> 00:24:27.066 A:middle
iOS 9 起为了

00:24:27.266 --> 00:24:29.376 A:middle
解决这些情况而推出的技术

00:24:32.606 --> 00:24:34.896 A:middle
只要我们在一个不太理想的 Wi-Fi 环境下

00:24:34.896 --> 00:24:36.556 A:middle
Wi-Fi Assist 就会被打开

00:24:36.556 --> 00:24:38.746 A:middle
不太理想的意思就是

00:24:38.746 --> 00:24:40.536 A:middle
Wi-Fi 的信号强度非常低

00:24:41.526 --> 00:24:44.186 A:middle
只要手机和 iOS

00:24:44.186 --> 00:24:46.816 A:middle
发现了这一点

00:24:46.816 --> 00:24:49.126 A:middle
我们会在

00:24:49.126 --> 00:24:50.946 A:middle
Wi-Fi 和数据网络之间

00:24:50.946 --> 00:24:51.606 A:middle
优胜劣汰

00:24:53.446 --> 00:24:55.096 A:middle
当你创建一个新的

00:24:55.096 --> 00:24:56.656 A:middle
连接时  我们会首先

00:24:56.656 --> 00:24:58.486 A:middle
试图关闭与

00:24:58.486 --> 00:24:59.086 A:middle
Wi-Fi 的连接

00:25:00.406 --> 00:25:02.566 A:middle
之后很快

00:25:02.566 --> 00:25:03.666 A:middle
如果这个连接没有被成功创建

00:25:03.666 --> 00:25:05.826 A:middle
我们会继续

00:25:05.826 --> 00:25:08.276 A:middle
创建一个对数据网络的链接

00:25:08.276 --> 00:25:10.286 A:middle
这样我们就可以  如果

00:25:10.396 --> 00:25:12.996 A:middle
蜂窝数据胜出的话

00:25:13.096 --> 00:25:15.296 A:middle
就开始使用数据网络

00:25:16.386 --> 00:25:19.996 A:middle
那么这会使用

00:25:19.996 --> 00:25:21.836 A:middle
一点点蜂窝数据

00:25:21.836 --> 00:25:24.396 A:middle
所以作为 Wi-Fi Assist 的一部分  我们

00:25:24.396 --> 00:25:25.846 A:middle
限制你的 app

00:25:26.176 --> 00:25:28.256 A:middle
在这种情况

00:25:28.286 --> 00:25:29.766 A:middle
可以使用的数据总量

00:25:30.236 --> 00:25:31.736 A:middle
我们在 Wi-Fi Assist 的使用上

00:25:31.736 --> 00:25:33.566 A:middle
获得了很大成功  因为它可以

00:25:33.566 --> 00:25:34.726 A:middle
在 Wi-Fi 情况不好时

00:25:34.726 --> 00:25:36.576 A:middle
建立起一个连接

00:25:38.266 --> 00:25:40.006 A:middle
我们也看到了

00:25:40.006 --> 00:25:41.866 A:middle
数据卡壳情况

00:25:41.866 --> 00:25:43.126 A:middle
大量缩减

00:25:43.446 --> 00:25:45.436 A:middle
如果你的 app 使用

00:25:45.436 --> 00:25:47.566 A:middle
URLSession API 你就可以免费

00:25:47.566 --> 00:25:48.786 A:middle
获得 Wi-Fi Assist

00:25:49.476 --> 00:25:51.196 A:middle
它会自动生效

00:25:51.196 --> 00:25:53.436 A:middle
你不需要在你的 API 中

00:25:53.436 --> 00:25:54.036 A:middle
做任何更改

00:25:54.036 --> 00:25:56.186 A:middle
你也不用在服务器中

00:25:56.256 --> 00:25:58.236 A:middle
做任何更改  它会自动工作

00:26:01.046 --> 00:26:03.236 A:middle
现在 Wi-Fi Assist

00:26:03.236 --> 00:26:04.866 A:middle
的问题是它是在一个数据流创建时

00:26:04.866 --> 00:26:05.836 A:middle
进行这些工作的

00:26:06.646 --> 00:26:08.576 A:middle
正如我之前所说的  一旦

00:26:08.576 --> 00:26:10.786 A:middle
一个数据流被创建了

00:26:10.786 --> 00:26:12.126 A:middle
它就会一直呆在这个接口上

00:26:12.486 --> 00:26:16.126 A:middle
所以如果使用了

00:26:16.476 --> 00:26:17.806 A:middle
而因为某些原因

00:26:17.806 --> 00:26:19.896 A:middle
Wi-Fi 接口胜出

00:26:19.896 --> 00:26:21.156 A:middle
这个已经创建的数据流

00:26:21.156 --> 00:26:23.336 A:middle
将会一直呆在这个 Wi-Fi 接口上

00:26:24.496 --> 00:26:26.166 A:middle
即使在那之后 Wi-Fi

00:26:26.166 --> 00:26:28.576 A:middle
开始变糟  这个数据流

00:26:28.576 --> 00:26:30.096 A:middle
会变得越来越慢

00:26:30.096 --> 00:26:31.446 A:middle
最终卡住

00:26:33.276 --> 00:26:36.686 A:middle
所以  为了解决这个问题

00:26:36.746 --> 00:26:40.096 A:middle
唯一的方法是创建一个

00:26:40.096 --> 00:26:42.126 A:middle
新的客户端和服务器

00:26:42.126 --> 00:26:44.246 A:middle
都遵守的协议

00:26:45.426 --> 00:26:47.346 A:middle
这就是 Multipath TCP

00:26:49.596 --> 00:26:52.166 A:middle
Multipath TCP 是一种

00:26:52.166 --> 00:26:53.366 A:middle
专门为移动设备设计的

00:26:53.626 --> 00:26:56.446 A:middle
协议

00:26:59.016 --> 00:27:01.186 A:middle
Multipath TCP 由 IETF 提出

00:26:59.016 --> 00:27:01.186 A:middle
Multipath TCP 由 IETF 提出

00:27:01.186 --> 00:27:04.926 A:middle
作为一个标准

00:27:04.996 --> 00:27:07.136 A:middle
它提供和 TCP 完全一样的服务

00:27:07.136 --> 00:27:08.916 A:middle
这意味着它是一个

00:27:08.916 --> 00:27:11.266 A:middle
可靠的字节流服务

00:27:11.896 --> 00:27:14.096 A:middle
如果你正在使用 HTTP

00:27:14.096 --> 00:27:16.596 A:middle
使用 TLS 或 HTTPS 你可以使用 Multipath

00:27:17.116 --> 00:27:19.846 A:middle
TCP

00:27:20.706 --> 00:27:22.846 A:middle
另外 它建立在 TCP 之上

00:27:22.846 --> 00:27:26.216 A:middle
所以它吸收了我们

00:27:26.216 --> 00:27:27.646 A:middle
年复一年开发 TCP

00:27:27.646 --> 00:27:29.086 A:middle
的大量经验

00:27:30.626 --> 00:27:32.016 A:middle
它也得益于

00:27:32.016 --> 00:27:33.656 A:middle
它从 TCP 提供的

00:27:33.656 --> 00:27:35.576 A:middle
拥塞控制中得到的

00:27:35.576 --> 00:27:36.146 A:middle
可靠性

00:27:37.436 --> 00:27:39.596 A:middle
在 TCP 之上

00:27:39.596 --> 00:27:41.246 A:middle
它提供的是一种

00:27:41.246 --> 00:27:42.926 A:middle
将流量从

00:27:42.926 --> 00:27:44.966 A:middle
Wi-Fi 接口无缝对接到

00:27:44.966 --> 00:27:46.856 A:middle
蜂窝数据接口的方式

00:27:46.856 --> 00:27:48.376 A:middle
无论什么时候它发现 Wi-Fi 环境

00:27:48.376 --> 00:27:50.316 A:middle
不够好  它同时允许

00:27:50.316 --> 00:27:52.326 A:middle
把流量接回 Wi-Fi 接口

00:27:52.326 --> 00:27:53.976 A:middle
这样你的 app 就不会

00:27:54.236 --> 00:27:55.816 A:middle
消耗过多的移动数据

00:27:56.706 --> 00:27:59.466 A:middle
如果你有一个对延迟敏感的

00:27:59.466 --> 00:28:01.246 A:middle
交互式数据流  它还可以

00:27:59.466 --> 00:28:01.246 A:middle
交互式数据流  它还可以

00:28:01.246 --> 00:28:02.906 A:middle
帮你选择最佳接口

00:28:07.226 --> 00:28:09.246 A:middle
那么让我们再

00:28:09.246 --> 00:28:10.896 A:middle
进一步深入了解一下 Multipath TCP

00:28:10.896 --> 00:28:13.266 A:middle
如果你在 URLSession API 上

00:28:13.266 --> 00:28:14.836 A:middle
开发 app

00:28:14.836 --> 00:28:18.506 A:middle
那么 Multipath TCP

00:28:18.966 --> 00:28:20.196 A:middle
就正好在它下面

00:28:20.976 --> 00:28:23.346 A:middle
所以对你来说  你并不需要

00:28:23.346 --> 00:28:24.806 A:middle
担心那些

00:28:24.806 --> 00:28:25.866 A:middle
不同的接口

00:28:27.566 --> 00:28:28.976 A:middle
现在  当你

00:28:28.976 --> 00:28:31.466 A:middle
发送数据时  你是在

00:28:31.466 --> 00:28:33.146 A:middle
通过 URLSession

00:28:33.146 --> 00:28:35.786 A:middle
API 来发送的  这部分数据

00:28:35.786 --> 00:28:37.776 A:middle
将会通过在 MPTCP 堆栈上的 URLSession

00:28:37.776 --> 00:28:40.036 A:middle
实现发送  而 MPTCP 堆栈

00:28:40.036 --> 00:28:41.486 A:middle
负责将这些数据规划

00:28:41.536 --> 00:28:43.436 A:middle
使它通过 Wi-Fi 或蜂窝数据发送

00:28:45.936 --> 00:28:47.846 A:middle
那么它是如何实现

00:28:47.846 --> 00:28:50.096 A:middle
在 Wi-Fi 和蜂窝数据之间的规划的呢

00:28:50.556 --> 00:28:52.136 A:middle
它是通过创建

00:28:52.136 --> 00:28:54.316 A:middle
所谓的 TCP 子数据流实现的

00:28:55.336 --> 00:28:57.746 A:middle
这些 TCP 子流

00:28:57.746 --> 00:28:59.086 A:middle
每个接口都有一个  它们实际上是

00:28:59.216 --> 00:29:00.936 A:middle
完整的 TCP 连接

00:28:59.216 --> 00:29:00.936 A:middle
完整的 TCP 连接

00:29:01.816 --> 00:29:03.926 A:middle
而 MPTCP 就要负责

00:29:03.926 --> 00:29:05.666 A:middle
确保数据是通过它们

00:29:05.666 --> 00:29:07.436 A:middle
实现传输的

00:29:08.526 --> 00:29:10.486 A:middle
它还负责创造

00:29:10.486 --> 00:29:11.926 A:middle
和销毁这些 TCP 子流

00:29:12.836 --> 00:29:15.316 A:middle
那么  从你在

00:29:15.316 --> 00:29:17.536 A:middle
URLSession 之上的这一层面来说

00:29:17.586 --> 00:29:19.546 A:middle
你可能根本都意识不到这些子流的存在

00:29:20.076 --> 00:29:22.426 A:middle
MPTCP 决定什么时候创建

00:29:22.426 --> 00:29:24.286 A:middle
这些子流  什么时候

00:29:24.286 --> 00:29:25.236 A:middle
把它们销毁

00:29:26.256 --> 00:29:29.286 A:middle
现在  其实 Multipath TCP 已经并不是

00:29:29.286 --> 00:29:30.166 A:middle
那么新鲜的一件事了

00:29:30.946 --> 00:29:32.406 A:middle
我们在 iOS 中其实

00:29:32.406 --> 00:29:34.436 A:middle
已经使用了好几年了

00:29:34.536 --> 00:29:37.466 A:middle
我们从 iOS 7 开始就把它用到了 Siri 上

00:29:39.576 --> 00:29:42.036 A:middle
现在 Siri 是一个很特别的 app

00:29:43.756 --> 00:29:45.776 A:middle
对很多人而言  当他们使用 Siri 时

00:29:45.776 --> 00:29:47.216 A:middle
他们可能正在

00:29:47.216 --> 00:29:49.216 A:middle
走出家门  举个例子

00:29:49.216 --> 00:29:50.416 A:middle
当他们正往外走时

00:29:50.416 --> 00:29:52.426 A:middle
他们叫 Siri

00:29:52.926 --> 00:29:54.326 A:middle
帮他们给一个朋友发信息

00:29:54.326 --> 00:29:54.896 A:middle
打个比方

00:29:55.726 --> 00:29:57.956 A:middle
所以 Siri 经常遇到

00:29:57.956 --> 00:29:59.406 A:middle
这种 Wi-Fi 变得

00:29:59.406 --> 00:30:00.736 A:middle
越来越糟糕

00:29:59.406 --> 00:30:00.736 A:middle
越来越糟糕

00:30:00.736 --> 00:30:02.586 A:middle
最终连接断掉的情况

00:30:03.726 --> 00:30:04.526 A:middle
现在问题在于  这种

00:30:04.526 --> 00:30:06.816 A:middle
Siri 为了发送

00:30:06.816 --> 00:30:08.636 A:middle
数据到服务器然后获取

00:30:08.636 --> 00:30:11.376 A:middle
响应而建立的连接

00:30:11.376 --> 00:30:12.786 A:middle
这种数据  是非常

00:30:12.786 --> 00:30:14.556 A:middle
关键的  因为如果这个

00:30:14.556 --> 00:30:16.706 A:middle
连接崩溃的话

00:30:16.706 --> 00:30:17.846 A:middle
它将无法获得响应

00:30:19.046 --> 00:30:20.546 A:middle
它同时对时间也

00:30:20.546 --> 00:30:22.406 A:middle
极其敏感  因为用户往往

00:30:22.406 --> 00:30:24.046 A:middle
真的是盯着

00:30:24.046 --> 00:30:25.306 A:middle
手机屏幕等待它的回复

00:30:26.716 --> 00:30:28.996 A:middle
同时它也是一个容量很低的连接

00:30:30.146 --> 00:30:31.486 A:middle
并没有发送很多数据

00:30:32.396 --> 00:30:33.876 A:middle
所以  即使我们有时候

00:30:33.876 --> 00:30:35.746 A:middle
用蜂窝数据来发送一些数据

00:30:35.746 --> 00:30:37.736 A:middle
也不会占用很多流量

00:30:37.736 --> 00:30:39.926 A:middle
因为不会是很多数据  最多几个 KB

00:30:43.486 --> 00:30:45.566 A:middle
现在  因为这些免费的

00:30:45.566 --> 00:30:47.246 A:middle
性能  我们对 Siri

00:30:47.246 --> 00:30:49.266 A:middle
使用 Multipath TCP

00:30:49.856 --> 00:30:52.166 A:middle
的方式成了

00:30:52.166 --> 00:30:54.826 A:middle
每当一个用户使用 Siri 时

00:30:54.826 --> 00:30:57.726 A:middle
我们在 Wi-Fi 接口和蜂窝数据接口上

00:30:57.726 --> 00:30:59.846 A:middle
各创建一个 TCP 数据子流

00:31:00.916 --> 00:31:02.536 A:middle
我们让这些子流随时都

00:31:02.536 --> 00:31:04.686 A:middle
做好马上发送数据的准备

00:31:04.686 --> 00:31:06.956 A:middle
确保我们不会遭遇太多的响应延迟

00:31:08.506 --> 00:31:09.796 A:middle
当我们安排数据流时

00:31:09.796 --> 00:31:11.706 A:middle
我们会首选 Wi-Fi 连接

00:31:12.386 --> 00:31:13.566 A:middle
但是如果我们发现

00:31:13.566 --> 00:31:15.606 A:middle
Wi-Fi 连接上的延迟太高

00:31:15.606 --> 00:31:17.676 A:middle
无法快速获得响应时

00:31:17.676 --> 00:31:21.476 A:middle
我们就会毫不犹豫地

00:31:21.476 --> 00:31:23.106 A:middle
在蜂窝数据连接上发送数据

00:31:25.456 --> 00:31:27.736 A:middle
现在  关于

00:31:27.736 --> 00:31:30.116 A:middle
Multipath TCP 的这些应用我们都取得了很大成功

00:31:32.526 --> 00:31:34.526 A:middle
有一个特别的标准

00:31:34.526 --> 00:31:36.526 A:middle
我们称之为第一个词时间

00:31:37.016 --> 00:31:38.646 A:middle
意思是用户在屏幕上

00:31:38.646 --> 00:31:40.346 A:middle
看到第一个词之前

00:31:40.346 --> 00:31:42.136 A:middle
所需要到时间

00:31:42.136 --> 00:31:44.906 A:middle
这个标准

00:31:44.906 --> 00:31:46.936 A:middle
在最糟糕的情况下

00:31:47.026 --> 00:31:49.016 A:middle
就是 Wi-Fi 已经极其差的情况

00:31:49.016 --> 00:31:51.616 A:middle
我们把它称之为 第 95 个百分值

00:31:51.616 --> 00:31:55.276 A:middle
它已经

00:31:55.276 --> 00:31:56.956 A:middle
提高了 20%

00:31:57.296 --> 00:31:58.446 A:middle
就减少延迟而言

00:31:58.446 --> 00:32:00.286 A:middle
由于 Multipath TCP 的存在

00:31:58.446 --> 00:32:00.286 A:middle
由于 Multipath TCP 的存在

00:32:00.286 --> 00:32:02.016 A:middle
我们也得以大幅缩短延迟时间

00:32:04.796 --> 00:32:07.716 A:middle
由于用户往往

00:32:07.836 --> 00:32:10.616 A:middle
在走出 Wi-Fi 区域时

00:32:10.616 --> 00:32:13.356 A:middle
使用 Siri 我们把

00:32:13.356 --> 00:32:14.896 A:middle
网络失误

00:32:15.226 --> 00:32:16.766 A:middle
已经比

00:32:16.816 --> 00:32:18.846 A:middle
普通 TCP 情况下降低了五倍

00:32:21.096 --> 00:32:24.286 A:middle
我们在 Siri 身上已经

00:32:24.346 --> 00:32:28.876 A:middle
取得了成功  我们也收到了

00:32:28.876 --> 00:32:30.826 A:middle
很多新开发者的请求

00:32:31.256 --> 00:32:32.976 A:middle
希望我们可用公开

00:32:32.976 --> 00:32:34.696 A:middle
Multipath TCP 的 API

00:32:35.846 --> 00:32:38.976 A:middle
现在  在 iOS 11 中  我们走出了

00:32:38.976 --> 00:32:40.846 A:middle
这一步  我们向你们公开了

00:32:40.846 --> 00:32:43.406 A:middle
这个 API 方便你们开始使用

00:32:45.516 --> 00:32:49.500 A:middle
[ 掌声 ]

00:32:52.046 --> 00:32:54.136 A:middle
要开始使用这个 API 之前

00:32:54.136 --> 00:32:56.926 A:middle
我需要告诉你们三件事

00:32:56.926 --> 00:32:58.996 A:middle
我会在接下来的

00:32:58.996 --> 00:33:00.556 A:middle
一分钟后挨个谈到

00:32:58.996 --> 00:33:00.556 A:middle
一分钟后挨个谈到

00:33:02.066 --> 00:33:04.216 A:middle
首先  因为它是一个新的

00:33:04.216 --> 00:33:06.406 A:middle
协议  我们将会需要服务器支持

00:33:08.046 --> 00:33:08.976 A:middle
一旦你拥有了服务器支持

00:33:08.976 --> 00:33:10.896 A:middle
你可以开始选择

00:33:11.076 --> 00:33:13.046 A:middle
你的哪些连接

00:33:13.046 --> 00:33:14.536 A:middle
可以从 MPTCP 中获益

00:33:15.756 --> 00:33:17.496 A:middle
然后  当我们选好了

00:33:17.496 --> 00:33:19.366 A:middle
这些连接以后  第三步

00:33:19.366 --> 00:33:21.826 A:middle
你可以开始选择加入

00:33:21.826 --> 00:33:23.596 A:middle
URLSession API

00:33:24.196 --> 00:33:26.586 A:middle
我们从 Multipath TCP 的

00:33:26.586 --> 00:33:28.686 A:middle
服务器支持开始吧

00:33:29.686 --> 00:33:33.696 A:middle
目前  它是一个比较新的协议

00:33:34.546 --> 00:33:36.856 A:middle
所以在默认情况下

00:33:36.856 --> 00:33:38.796 A:middle
大部分的服务器设施是

00:33:38.796 --> 00:33:40.466 A:middle
不支持 Multipath TCP 的

00:33:41.136 --> 00:33:43.486 A:middle
也就是说  你需要

00:33:43.746 --> 00:33:45.416 A:middle
更新或修改你的

00:33:45.416 --> 00:33:47.796 A:middle
服务器设施  让它开始

00:33:47.796 --> 00:33:49.256 A:middle
支持 Multipath TCP

00:33:50.016 --> 00:33:51.666 A:middle
然而  我们带来了好消息

00:33:51.746 --> 00:33:54.356 A:middle
如果你在某些知名的

00:33:54.356 --> 00:33:55.696 A:middle
供应商那里购买了负载均衡器

00:33:55.696 --> 00:33:58.346 A:middle
很可能

00:33:58.346 --> 00:34:00.036 A:middle
这个供应商已经

00:33:58.346 --> 00:34:00.036 A:middle
这个供应商已经

00:34:00.036 --> 00:34:01.946 A:middle
支持了Multipath TCP

00:34:02.986 --> 00:34:06.006 A:middle
所以请询问你的服务器团队

00:34:06.006 --> 00:34:07.606 A:middle
请他们查看他们使用的

00:34:07.606 --> 00:34:08.616 A:middle
负载均衡器手册

00:34:09.335 --> 00:34:11.186 A:middle
你也可以询问你的供应商

00:34:11.186 --> 00:34:13.775 A:middle
他们是否支持 Multipath TCP

00:34:13.775 --> 00:34:17.056 A:middle
如果他们支持的话

00:34:17.056 --> 00:34:18.126 A:middle
你所要做的就只是

00:34:18.126 --> 00:34:19.746 A:middle
在你的服务器配置中启用它

00:34:20.106 --> 00:34:21.696 A:middle
从那一刻起

00:34:21.696 --> 00:34:23.525 A:middle
你就可以开始使用

00:34:23.525 --> 00:34:25.106 A:middle
Multipath TCP 了

00:34:26.196 --> 00:34:28.815 A:middle
然而  如果你的服务器

00:34:29.045 --> 00:34:30.666 A:middle
使用的是 Linux

00:34:31.616 --> 00:34:33.036 A:middle
主流的 Linux 内核

00:34:33.036 --> 00:34:34.686 A:middle
目前尚未支持 Multipath

00:34:34.686 --> 00:34:37.196 A:middle
TCP 但是在这个网站上

00:34:37.196 --> 00:34:38.976 A:middle
有一种新的 Linux 内核

00:34:38.976 --> 00:34:41.085 A:middle
你可以下载安装

00:34:41.085 --> 00:34:43.806 A:middle
它可以

00:34:43.806 --> 00:34:45.666 A:middle
为你的服务器提供 Multipath TCP

00:34:48.036 --> 00:34:50.196 A:middle
在这个网站上

00:34:50.196 --> 00:34:52.126 A:middle
你可以找到 AWS 和 Google

00:34:52.126 --> 00:34:54.886 A:middle
Compute Engine 安装

00:34:54.886 --> 00:34:57.126 A:middle
Multipath TCP 的说明

00:34:57.346 --> 00:34:59.626 A:middle
我们也跟

00:34:59.626 --> 00:35:01.366 A:middle
这个新的 Linux 内核的开源社区

00:34:59.626 --> 00:35:01.366 A:middle
这个新的 Linux 内核的开源社区

00:35:01.656 --> 00:35:04.146 A:middle
一起合作来进行维护

00:35:05.066 --> 00:35:08.066 A:middle
另外  我们跟开源社区一起

00:35:08.066 --> 00:35:10.116 A:middle
合作  使这个

00:35:10.116 --> 00:35:12.436 A:middle
Multipath TCP 的代码

00:35:12.436 --> 00:35:14.026 A:middle
可以用于主流内核

00:35:14.026 --> 00:35:15.536 A:middle
使所有

00:35:15.536 --> 00:35:17.136 A:middle
版本  所有的 Linux

00:35:17.136 --> 00:35:18.956 A:middle
版本都可以默认获取

00:35:21.436 --> 00:35:22.606 A:middle
现在如果你有你的

00:35:22.606 --> 00:35:23.676 A:middle
服务器设施  并且有一些

00:35:23.676 --> 00:35:25.516 A:middle
在负载均衡器背后的

00:35:25.516 --> 00:35:26.566 A:middle
后端服务器

00:35:26.566 --> 00:35:28.406 A:middle
我是说 Linux 的负载均衡器

00:35:29.036 --> 00:35:31.176 A:middle
要想在你的服务器环境中

00:35:31.176 --> 00:35:32.956 A:middle
获取 Multipath TCP

00:35:32.956 --> 00:35:34.786 A:middle
你所要做的

00:35:34.786 --> 00:35:37.436 A:middle
就只是在这个负载均衡器上

00:35:38.216 --> 00:35:39.856 A:middle
更新你的 Linux 内核

00:35:39.856 --> 00:35:42.646 A:middle
你可以在上面放一个 HTTP 代理服务器

00:35:42.646 --> 00:35:44.876 A:middle
比如 HAProxy 或者

00:35:44.876 --> 00:35:47.336 A:middle
nginx  然后从那一刻起

00:35:47.576 --> 00:35:48.996 A:middle
一切就绪

00:35:48.996 --> 00:35:50.546 A:middle
你就可以开始使用 Multipath TCP了

00:35:52.036 --> 00:35:54.916 A:middle
所以  在这周结束后

00:35:54.916 --> 00:35:56.406 A:middle
当你们回到公司

00:35:56.946 --> 00:35:58.516 A:middle
去跟你们的服务器团队聊聊

00:35:58.716 --> 00:35:59.936 A:middle
告诉他们把

00:35:59.936 --> 00:36:01.776 A:middle
服务器为

00:35:59.936 --> 00:36:01.776 A:middle
服务器为

00:36:01.776 --> 00:36:04.536 A:middle
Multipath TCP 做好准备

00:36:05.296 --> 00:36:07.566 A:middle
当你的服务器

00:36:07.566 --> 00:36:11.136 A:middle
准备好以后

00:36:11.136 --> 00:36:12.196 A:middle
然后你就可以开始

00:36:12.196 --> 00:36:13.646 A:middle
查看你的 app 中的

00:36:13.646 --> 00:36:16.036 A:middle
连接  以及它们中的哪些

00:36:16.036 --> 00:36:17.766 A:middle
可以从 Multipath TCP 受益最多

00:36:19.926 --> 00:36:22.136 A:middle
我们公开的 Multipath

00:36:22.136 --> 00:36:24.856 A:middle
TCP 服务

00:36:24.856 --> 00:36:26.736 A:middle
使用 MPTCP

00:36:26.736 --> 00:36:28.646 A:middle
提供两种不同模式的服务

00:36:29.276 --> 00:36:31.436 A:middle
第一个是一个交接模式

00:36:31.436 --> 00:36:33.246 A:middle
为你的长时间连接

00:36:33.246 --> 00:36:35.486 A:middle
提供高度的可靠性

00:36:37.676 --> 00:36:39.886 A:middle
第二个是一个交互模式

00:36:39.936 --> 00:36:41.886 A:middle
就是我们在 Siri 上使用的那个模式

00:36:43.386 --> 00:36:44.786 A:middle
这个模式为你的

00:36:44.786 --> 00:36:46.426 A:middle
交互性的和对延迟敏感的连接

00:36:46.546 --> 00:36:48.146 A:middle
保证了较低的响应延迟

00:36:50.936 --> 00:36:53.786 A:middle
我们从交接模式开始

00:36:55.016 --> 00:36:57.216 A:middle
交接模式可以

00:36:57.216 --> 00:36:59.786 A:middle
把数据流从 Wi-Fi 移动到数据网络

00:37:00.076 --> 00:37:02.676 A:middle
以及从数据网络移回 Wi-Fi

00:37:03.756 --> 00:37:06.946 A:middle
当你处于一个

00:37:06.946 --> 00:37:08.866 A:middle
Wi-Fi 覆盖很好的网络环境中时

00:37:08.866 --> 00:37:10.436 A:middle
你可以选择进入

00:37:10.436 --> 00:37:12.496 A:middle
交接模式

00:37:12.496 --> 00:37:13.886 A:middle
然后你会仅在 Wi-Fi 网络中

00:37:14.056 --> 00:37:16.006 A:middle
创建一个连接

00:37:16.006 --> 00:37:17.956 A:middle
我们将只使用 Wi-Fi 网络

00:37:17.956 --> 00:37:20.026 A:middle
不用使用任何蜂窝数据

00:37:21.706 --> 00:37:23.626 A:middle
不过  如果用户正在

00:37:23.626 --> 00:37:25.136 A:middle
走出 Wi-Fi 区域

00:37:25.396 --> 00:37:26.866 A:middle
并且 Wi-Fi 信号正在变弱

00:37:26.866 --> 00:37:29.806 A:middle
当我们发现这个情况时

00:37:29.806 --> 00:37:32.146 A:middle
我们就会打开

00:37:32.546 --> 00:37:35.796 A:middle
蜂窝数据网络

00:37:35.796 --> 00:37:37.726 A:middle
在蜂窝数据接口

00:37:37.796 --> 00:37:39.966 A:middle
创建一个 TCP 子流

00:37:39.966 --> 00:37:42.116 A:middle
从那时起你的 app

00:37:42.116 --> 00:37:43.636 A:middle
将开始使用蜂窝数据

00:37:45.186 --> 00:37:47.046 A:middle
如果现在用户正在

00:37:47.046 --> 00:37:49.406 A:middle
回到 Wi-Fi 信号好的区域

00:37:49.486 --> 00:37:51.246 A:middle
我们会再次关掉数据网络

00:37:51.246 --> 00:37:53.366 A:middle
将所有的数据流

00:37:53.836 --> 00:37:55.146 A:middle
都移回到 Wi-Fi 网络

00:37:56.166 --> 00:37:57.986 A:middle
这允许我们

00:37:58.366 --> 00:38:00.356 A:middle
不惜一切代价的最小化蜂窝数据用量

00:37:58.366 --> 00:38:00.356 A:middle
不惜一切代价的最小化蜂窝数据用量

00:38:03.026 --> 00:38:04.996 A:middle
我们鼓励你把它用在

00:38:04.996 --> 00:38:07.056 A:middle
你的常用的长时间的连接上

00:38:08.496 --> 00:38:10.226 A:middle
这些连接是你无法

00:38:10.396 --> 00:38:12.506 A:middle
轻易重启的  或者无法从最开始

00:38:12.506 --> 00:38:13.586 A:middle
重启的

00:38:14.666 --> 00:38:15.936 A:middle
这种连接会从

00:38:15.936 --> 00:38:17.266 A:middle
交接模式中获益最多

00:38:19.026 --> 00:38:22.036 A:middle
正如我所提到的  Multipath

00:38:22.036 --> 00:38:24.616 A:middle
TCP 现在是 Wi-Fi

00:38:24.616 --> 00:38:27.206 A:middle
Assist 的一部分，而在 Wi-Fi Assist 中

00:38:27.206 --> 00:38:30.116 A:middle
我们设置了一些限制条件来

00:38:30.146 --> 00:38:31.586 A:middle
限制我们用数据网络发送的

00:38:31.586 --> 00:38:32.886 A:middle
数据量

00:38:34.116 --> 00:38:38.606 A:middle
所以我们鼓励你们

00:38:38.606 --> 00:38:40.826 A:middle
只在低容量的连接中

00:38:40.826 --> 00:38:41.826 A:middle
使用交接模式

00:38:43.086 --> 00:38:44.506 A:middle
因为如果你达到了 Wi-Fi

00:38:44.506 --> 00:38:46.156 A:middle
Assist 的上限  我们会停止使用

00:38:46.156 --> 00:38:47.686 A:middle
数据网络连接  因为我们

00:38:47.686 --> 00:38:49.506 A:middle
不希望你的 app

00:38:49.506 --> 00:38:50.836 A:middle
看起来是

00:38:50.836 --> 00:38:52.086 A:middle
消耗过多数据网络的那种

00:38:52.086 --> 00:38:55.386 A:middle
所以请记住当你

00:38:55.386 --> 00:38:57.126 A:middle
在为你的连接选择

00:38:57.126 --> 00:38:57.886 A:middle
交接模式时

00:38:58.486 --> 00:39:00.106 A:middle
不要用于大型的数据传输

00:38:58.486 --> 00:39:00.106 A:middle
不要用于大型的数据传输

00:39:00.106 --> 00:39:01.526 A:middle
不要几 GB 几 GB 的

00:39:01.526 --> 00:39:03.746 A:middle
下载数据

00:39:05.226 --> 00:39:07.936 A:middle
从周一开始

00:39:07.936 --> 00:39:09.856 A:middle
你在拿到的第一个测试版中

00:39:09.856 --> 00:39:11.446 A:middle
就可以使用交接模式服务

00:39:14.016 --> 00:39:15.246 A:middle
那么让我们继续

00:39:15.246 --> 00:39:17.776 A:middle
谈谈交互模式

00:39:17.776 --> 00:39:19.526 A:middle
这个模式可以为你的

00:39:19.526 --> 00:39:21.226 A:middle
对延迟敏感的和抗活跃的连接

00:39:21.226 --> 00:39:22.366 A:middle
减少数据延迟

00:39:24.816 --> 00:39:26.296 A:middle
当你开始使用

00:39:26.296 --> 00:39:27.536 A:middle
交互模式时

00:39:27.536 --> 00:39:29.546 A:middle
我们马上会同时使用 Wi-Fi 网络和数据网络

00:39:29.546 --> 00:39:31.666 A:middle
即使 Wi-Fi 的信号很好

00:39:31.666 --> 00:39:33.736 A:middle
因为我们希望

00:39:33.736 --> 00:39:35.096 A:middle
可以立刻安排好数据流

00:39:35.096 --> 00:39:38.246 A:middle
以减少数据的延迟

00:39:39.436 --> 00:39:41.296 A:middle
我们会首选 Wi-Fi 接口

00:39:41.296 --> 00:39:43.156 A:middle
但是一旦我们发现

00:39:43.156 --> 00:39:44.546 A:middle
Wi-Fi 信号不够好

00:39:44.546 --> 00:39:47.276 A:middle
我们会毫不犹豫地

00:39:47.276 --> 00:39:48.566 A:middle
使用数据网络来发送数据

00:39:50.496 --> 00:39:54.026 A:middle
所以，在你的

00:39:54.026 --> 00:39:56.006 A:middle
交互性极强和对延迟非常敏感的

00:39:56.006 --> 00:39:58.116 A:middle
数据流上使用它  这种数据流

00:39:58.116 --> 00:39:59.386 A:middle
并不会传输大量的数据

00:39:59.386 --> 00:40:01.386 A:middle
因为我们设置了

00:39:59.386 --> 00:40:01.386 A:middle
因为我们设置了

00:40:01.386 --> 00:40:03.286 A:middle
Wi-Fi Assist 上限

00:40:03.286 --> 00:40:05.386 A:middle
所以如果你的数据流

00:40:05.386 --> 00:40:06.926 A:middle
达到了这个上限

00:40:06.926 --> 00:40:09.106 A:middle
我们会停止使用数据网络

00:40:10.216 --> 00:40:12.396 A:middle
Multipath TCP 会尽最大努力

00:40:12.396 --> 00:40:14.226 A:middle
来减少这些

00:40:14.226 --> 00:40:15.336 A:middle
连接的数据延迟

00:40:15.816 --> 00:40:17.946 A:middle
它会消耗一定的蜂窝数据

00:40:17.946 --> 00:40:20.106 A:middle
你们会在接下来的一个

00:40:20.106 --> 00:40:22.076 A:middle
测试版中看到

00:40:22.076 --> 00:40:24.656 A:middle
并可以开始使用

00:40:27.246 --> 00:40:29.706 A:middle
现在我们有了服务器

00:40:29.706 --> 00:40:32.596 A:middle
也选好了

00:40:32.596 --> 00:40:33.916 A:middle
哪些连接可以从

00:40:33.916 --> 00:40:35.596 A:middle
交接模式获益  哪些

00:40:35.596 --> 00:40:37.166 A:middle
连接可以从

00:40:37.166 --> 00:40:38.146 A:middle
交互模式获益

00:40:39.676 --> 00:40:41.346 A:middle
你现在可以开始使用

00:40:41.346 --> 00:40:42.746 A:middle
URLSession 配置属性

00:40:42.746 --> 00:40:44.806 A:middle
来把 API 用到你的

00:40:44.806 --> 00:40:45.926 A:middle
连接上

00:40:47.456 --> 00:40:49.306 A:middle
我们用一个很简单的方法展示它

00:40:50.256 --> 00:40:52.136 A:middle
你要做的就是

00:40:52.136 --> 00:40:54.066 A:middle
在你的 URLSession 的配置属性中

00:40:54.066 --> 00:40:56.306 A:middle
设置你想要的 Multipath 服务种类

00:40:58.116 --> 00:40:59.046 A:middle
你可以在

00:40:59.046 --> 00:41:01.106 A:middle
交接模式和交互模式

00:40:59.046 --> 00:41:01.106 A:middle
交接模式和交互模式

00:41:01.156 --> 00:41:03.136 A:middle
之间选择  然后你就可以

00:41:03.336 --> 00:41:04.206 A:middle
开始使用了

00:41:04.386 --> 00:41:06.886 A:middle
你的连接会尝试使用

00:41:06.886 --> 00:41:08.636 A:middle
Multipath TCP 并且

00:41:09.086 --> 00:41:10.976 A:middle
从中获益

00:41:12.226 --> 00:41:14.066 A:middle
为了使用它

00:41:14.066 --> 00:41:15.766 A:middle
你需要在

00:41:15.766 --> 00:41:20.106 A:middle
Xcode 中添加 Multipath

00:41:20.106 --> 00:41:21.436 A:middle
然后才能开始使用

00:41:22.036 --> 00:41:26.736 A:middle
这就是

00:41:26.736 --> 00:41:28.316 A:middle
我今天需要讲的最后一件事

00:41:28.996 --> 00:41:30.136 A:middle
即聚合模式

00:41:32.746 --> 00:41:35.006 A:middle
现在  想像一下  你已经联入

00:41:35.006 --> 00:41:36.906 A:middle
Wi-Fi  并且它每秒钟

00:41:36.906 --> 00:41:38.856 A:middle
向你提供 1MB 的通过量

00:41:40.486 --> 00:41:41.366 A:middle
另一方面

00:41:41.466 --> 00:41:43.236 A:middle
你还有蜂窝数据

00:41:43.236 --> 00:41:44.706 A:middle
它也每秒钟提供 1MB 的通过量

00:41:46.176 --> 00:41:47.106 A:middle
如果你可以把

00:41:47.106 --> 00:41:48.996 A:middle
它们结合到一起

00:41:48.996 --> 00:41:50.636 A:middle
变成一个更大的网络  每秒提供

00:41:50.636 --> 00:41:51.706 A:middle
2MB 的通过量  不是很好吗

00:41:52.986 --> 00:41:54.856 A:middle
Multipath TCP 正是为你

00:41:54.856 --> 00:41:55.736 A:middle
提供了这个服务

00:41:56.536 --> 00:41:58.006 A:middle
它允许将

00:41:58.006 --> 00:41:59.666 A:middle
多个网络的不同容量

00:41:59.886 --> 00:42:01.866 A:middle
结合成一个更大的连接

00:41:59.886 --> 00:42:01.866 A:middle
结合成一个更大的连接

00:42:04.656 --> 00:42:08.536 A:middle
我们把这个聚合模式

00:42:08.536 --> 00:42:10.166 A:middle
提供给你们用于实验

00:42:10.166 --> 00:42:11.146 A:middle
.

00:42:11.846 --> 00:42:13.356 A:middle
为什么说是实验呢

00:42:14.036 --> 00:42:15.926 A:middle
如果我们把

00:42:15.926 --> 00:42:17.496 A:middle
两种网络的容量结合起来

00:42:17.496 --> 00:42:19.646 A:middle
我们会消耗一些

00:42:19.646 --> 00:42:21.286 A:middle
蜂窝数据

00:42:21.916 --> 00:42:25.126 A:middle
我们希望你们能够想一想

00:42:25.726 --> 00:42:27.486 A:middle
在你的 app 中

00:42:27.486 --> 00:42:29.416 A:middle
有哪些连接是可以

00:42:29.416 --> 00:42:31.056 A:middle
通过一个稍高的

00:42:31.126 --> 00:42:34.176 A:middle
但是以蜂窝数据用量为代价的通过量

00:42:34.176 --> 00:42:35.646 A:middle
而受益呢

00:42:37.616 --> 00:42:38.636 A:middle
如果你想要使用

00:42:38.636 --> 00:42:40.376 A:middle
聚合模式  你只需要

00:42:40.376 --> 00:42:42.366 A:middle
进入你手机上的

00:42:42.366 --> 00:42:43.786 A:middle
开发者设置

00:42:43.786 --> 00:42:46.446 A:middle
滑动滑块来启用

00:42:46.446 --> 00:42:48.366 A:middle
聚合模式  然后

00:42:48.366 --> 00:42:50.036 A:middle
从那时起

00:42:50.036 --> 00:42:51.656 A:middle
你就可以开始实验

00:42:51.656 --> 00:42:53.356 A:middle
aggregation URLSession

00:42:53.356 --> 00:42:54.486 A:middle
配置属性了

00:42:56.586 --> 00:42:58.576 A:middle
这个模式在

00:42:58.576 --> 00:42:59.816 A:middle
用户的设备上是不可用的

00:43:01.876 --> 00:43:04.276 A:middle
所以你可以

00:43:04.276 --> 00:43:05.636 A:middle
在接下来的一个测试版中

00:43:05.636 --> 00:43:08.756 A:middle
开始测试聚合模式

00:43:08.866 --> 00:43:11.176 A:middle
那么  让我们来总结一下

00:43:13.386 --> 00:43:16.226 A:middle
在 iOS 中  我们非常清楚

00:43:16.226 --> 00:43:18.556 A:middle
在移动设备上

00:43:18.556 --> 00:43:20.336 A:middle
使用不同接口的问题

00:43:21.836 --> 00:43:24.076 A:middle
我们从 iOS 9 开始开发了 Wi-Fi Assist

00:43:24.076 --> 00:43:27.606 A:middle
我们看到使用 Wi-Fi Assist 有很多好处

00:43:30.056 --> 00:43:32.076 A:middle
在 iOS 11 中  我们进一步对它进行了升级

00:43:33.336 --> 00:43:34.936 A:middle
我们在 Wi-Fi Assist 中添加了 Multipath

00:43:34.936 --> 00:43:37.186 A:middle
协议

00:43:38.146 --> 00:43:39.916 A:middle
而在 iOS 11 中  这个协议  即 Multipath TCP

00:43:39.916 --> 00:43:42.476 A:middle
是作为一个公开 API 开源

00:43:43.506 --> 00:43:45.136 A:middle
你可以在你的 app 中使用它的交接模式

00:43:45.136 --> 00:43:47.186 A:middle
或者是交互模式

00:43:48.046 --> 00:43:51.196 A:middle
来进一步提高你的

00:43:51.196 --> 00:43:52.476 A:middle
用户体验

00:43:54.436 --> 00:43:58.176 A:middle
说了这么多  你们接下来有一段

00:43:58.276 --> 00:43:59.056 A:middle
休息时间

00:43:59.436 --> 00:44:01.296 A:middle
这是网络架构部分的

00:43:59.436 --> 00:44:01.296 A:middle
这是网络架构部分的

00:44:01.296 --> 00:44:02.276 A:middle
上半场

00:44:03.076 --> 00:44:04.536 A:middle
休息结束后，会继续

00:44:04.536 --> 00:44:06.396 A:middle
下半场

00:44:06.396 --> 00:44:08.616 A:middle
在下半场会议中

00:44:08.616 --> 00:44:11.096 A:middle
将会谈到在 URLSession 层面的一些

00:44:11.096 --> 00:44:13.276 A:middle
好用的 API

00:44:13.276 --> 00:44:14.946 A:middle
以优化你的 app 的

00:44:14.946 --> 00:44:15.606 A:middle
网络结构

00:44:16.466 --> 00:44:16.836 A:middle
谢谢
