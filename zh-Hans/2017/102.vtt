WEBVTT

00:00:17.316 --> 00:00:18.796 A:middle
&gt;&gt;  女士们 先生们

00:00:18.796 --> 00:00:20.286 A:middle
让我们欢迎

00:00:20.286 --> 00:00:22.636 A:middle
负责技术平台开发的副总裁

00:00:22.636 --> 00:00:23.216 A:middle
Andreas Wendker

00:00:24.516 --> 00:00:33.496 A:middle
[掌声]

00:00:33.996 --> 00:00:36.226 A:middle
&gt;&gt;  下午好

00:00:36.226 --> 00:00:37.606 A:middle
欢迎来到 WWDC

00:00:38.266 --> 00:00:39.616 A:middle
大家今天上午在主题演讲中了解到

00:00:39.716 --> 00:00:41.516 A:middle
今年的重点集中在

00:00:41.516 --> 00:00:43.096 A:middle
Apple 所有产品线的

00:00:43.096 --> 00:00:44.666 A:middle
技术基础

00:00:44.666 --> 00:00:46.216 A:middle
与改良上面

00:00:47.416 --> 00:00:49.016 A:middle
我们推出了很多 API

00:00:49.016 --> 00:00:51.456 A:middle
让你们的 app 能够有新的应用案例

00:00:51.456 --> 00:00:52.816 A:middle
范围十分广泛

00:00:52.816 --> 00:00:53.886 A:middle
从机器学习

00:00:53.886 --> 00:00:55.816 A:middle
到增强现实

00:00:55.816 --> 00:00:57.426 A:middle
与虚拟现实

00:00:57.706 --> 00:00:59.486 A:middle
再到使用 Apple Music

00:00:59.486 --> 00:00:59.866 A:middle
Library 获取音乐

00:01:01.616 --> 00:01:03.346 A:middle
我们还对许多

00:01:03.396 --> 00:01:04.396 A:middle
核心科技做了

00:01:04.396 --> 00:01:05.075 A:middle
改良

00:01:05.446 --> 00:01:07.486 A:middle
比如我们的新的现代

00:01:07.596 --> 00:01:09.496 A:middle
文件系统 APFS 现在更加

00:01:09.496 --> 00:01:09.946 A:middle
强力了

00:01:10.556 --> 00:01:12.426 A:middle
这会带来一个新的  更高效的

00:01:12.426 --> 00:01:14.486 A:middle
版本  此外我们还

00:01:14.486 --> 00:01:15.926 A:middle
帮助定义并采用了

00:01:16.066 --> 00:01:17.546 A:middle
带有先进压缩技术的

00:01:17.786 --> 00:01:18.876 A:middle
高效图形格式

00:01:20.196 --> 00:01:21.916 A:middle
大多数技术

00:01:21.916 --> 00:01:23.476 A:middle
与 API 都适用

00:01:23.476 --> 00:01:24.706 A:middle
我们所有的操作系统

00:01:24.706 --> 00:01:26.066 A:middle
所以它们是共同进步的

00:01:27.486 --> 00:01:28.476 A:middle
但我们也要看一下

00:01:28.476 --> 00:01:29.796 A:middle
一些独具特色的特点

00:01:29.796 --> 00:01:31.226 A:middle
它们会影响作为应用开发者的

00:01:33.076 --> 00:01:33.526 A:middle
诸位

00:01:33.526 --> 00:01:35.406 A:middle
iOS 11 有大量的很棒的功能

00:01:35.406 --> 00:01:37.466 A:middle
但也许最重要的是

00:01:37.466 --> 00:01:38.746 A:middle
这是目前为止最大的

00:01:38.746 --> 00:01:40.726 A:middle
iPad 的发布

00:01:41.066 --> 00:01:42.626 A:middle
iOS11 把 iPad 变成了一个

00:01:42.626 --> 00:01:44.076 A:middle
主力生产力设备

00:01:44.076 --> 00:01:46.236 A:middle
有了新的 Dock Drag and Drop

00:01:46.236 --> 00:01:47.426 A:middle
查找管理  和增强的

00:01:47.426 --> 00:01:48.216 A:middle
多任务功能

00:01:48.696 --> 00:01:51.516 A:middle
在 macOS 中 你们花了很多时间去

00:01:51.516 --> 00:01:52.926 A:middle
大范围清理

00:01:52.926 --> 00:01:54.236 A:middle
动画性能

00:01:54.236 --> 00:01:56.796 A:middle
现在有了

00:01:56.796 --> 00:01:58.476 A:middle
对 Fusion Drives 和对磁盘加密的

00:01:58.476 --> 00:02:00.336 A:middle
附加支持 APFS 已经准备好

00:01:58.476 --> 00:02:00.336 A:middle
附加支持 APFS 已经准备好

00:02:00.336 --> 00:02:01.516 A:middle
作为一个全面支持的文件系统

00:02:01.516 --> 00:02:02.576 A:middle
进入 Mac 了

00:02:03.116 --> 00:02:05.576 A:middle
你们还做了许多基础工作

00:02:05.576 --> 00:02:06.696 A:middle
让虚拟现实在 Mac 中

00:02:06.696 --> 00:02:07.716 A:middle
大显身手

00:02:08.276 --> 00:02:11.876 A:middle
在 watchOS 上 你们让我们的

00:02:11.876 --> 00:02:13.506 A:middle
UI 组件变得更加灵便

00:02:13.506 --> 00:02:14.966 A:middle
这样就可以提供更多的个性化

00:02:14.966 --> 00:02:15.716 A:middle
用户体验了

00:02:16.576 --> 00:02:18.566 A:middle
导航与录音的

00:02:18.566 --> 00:02:20.226 A:middle
新模式会让你们的 app

00:02:20.276 --> 00:02:22.106 A:middle
在后台运行的时候

00:02:22.106 --> 00:02:23.376 A:middle
也可以持续处理数据

00:02:23.376 --> 00:02:24.076 A:middle
并反馈给用户

00:02:24.526 --> 00:02:26.656 A:middle
新的统一的 app 运行时间

00:02:26.796 --> 00:02:28.086 A:middle
让 app 变得更加灵敏

00:02:28.716 --> 00:02:31.236 A:middle
你们还为 Core

00:02:31.236 --> 00:02:32.396 A:middle
Bluetooth 增加了支持

00:02:32.396 --> 00:02:34.466 A:middle
现在可以直接连接 BTLE 设备

00:02:34.776 --> 00:02:36.406 A:middle
并直接在用户的手腕上

00:02:36.406 --> 00:02:37.216 A:middle
显示数据了

00:02:37.216 --> 00:02:40.896 A:middle
在 tvOS 里  我们提供了

00:02:40.896 --> 00:02:42.346 A:middle
很多种类的增强

00:02:42.346 --> 00:02:43.486 A:middle
你们可以利用它们

00:02:43.486 --> 00:02:44.646 A:middle
大大增强 app 的功能

00:02:44.646 --> 00:02:46.046 A:middle
从而让所有用户受益

00:02:46.046 --> 00:02:47.546 A:middle
其中就包括对一些语言

00:02:47.546 --> 00:02:48.656 A:middle
从右向左写作的文字的

00:02:48.656 --> 00:02:49.166 A:middle
支持

00:02:49.476 --> 00:02:52.556 A:middle
在我们的操作系统之外

00:02:52.556 --> 00:02:53.816 A:middle
你们也努力工作

00:02:53.886 --> 00:02:55.546 A:middle
改进我们整体的

00:02:55.546 --> 00:02:57.086 A:middle
开发者生态系统

00:02:57.236 --> 00:02:58.666 A:middle
这个系统能为你们

00:02:58.666 --> 00:03:00.726 A:middle
提供 app 的推广与应用

00:02:58.666 --> 00:03:00.726 A:middle
提供 app 的推广与应用

00:03:01.316 --> 00:03:03.026 A:middle
我们增加了用户的数量

00:03:03.026 --> 00:03:03.946 A:middle
而且你们可以通过

00:03:03.946 --> 00:03:05.376 A:middle
TestFlight 发送你们的 app 的

00:03:05.376 --> 00:03:05.946 A:middle
Beta 版本

00:03:06.726 --> 00:03:08.206 A:middle
App Store 现在允许

00:03:08.206 --> 00:03:10.096 A:middle
你们在几天的时间里

00:03:10.096 --> 00:03:11.396 A:middle
排除掉 app 的更新

00:03:12.176 --> 00:03:13.606 A:middle
这样就可以对用户的反馈

00:03:13.606 --> 00:03:15.406 A:middle
和评论做出反应了

00:03:16.306 --> 00:03:17.036 A:middle
你们能够在 Store 页面上

00:03:17.036 --> 00:03:18.386 A:middle
展现推广的一些素材

00:03:18.386 --> 00:03:20.006 A:middle
还有更多信息

00:03:22.096 --> 00:03:23.836 A:middle
我们还在 App Store 上

00:03:23.836 --> 00:03:25.416 A:middle
的内容方面做了现代化处理

00:03:25.916 --> 00:03:26.946 A:middle
我们已经有一段时间在

00:03:26.946 --> 00:03:28.856 A:middle
致力于让所有的 iOS 软件

00:03:28.856 --> 00:03:30.306 A:middle
能够利用上我们的 64 位处理器

00:03:30.306 --> 00:03:32.296 A:middle
的强大性能

00:03:33.306 --> 00:03:35.206 A:middle
有了 iOS 11 你们就可以彻底

00:03:35.206 --> 00:03:35.906 A:middle
实现这个变化了

00:03:36.456 --> 00:03:38.146 A:middle
iOS 11 只为 64 位的 app

00:03:38.146 --> 00:03:40.756 A:middle
提供支持  而 32 位的 app

00:03:40.886 --> 00:03:42.196 A:middle
以后就不会被支持了

00:03:43.106 --> 00:03:45.826 A:middle
现在是时候

00:03:45.826 --> 00:03:47.176 A:middle
把注意力转向 macOS

00:03:47.246 --> 00:03:48.326 A:middle
并做同样的事了

00:03:48.876 --> 00:03:50.306 A:middle
让 Mac app 也向 64 位转化

00:03:50.306 --> 00:03:51.836 A:middle
这个过程将和 iOS 上的

00:03:51.836 --> 00:03:53.496 A:middle
转化过程非常相似

00:03:55.306 --> 00:03:57.416 A:middle
最重要的是 High Sierra

00:03:57.416 --> 00:03:58.806 A:middle
将是最后一个全面支持 32 位 app

00:03:58.806 --> 00:04:00.836 A:middle
而没有任何妥协的

00:03:58.806 --> 00:04:00.836 A:middle
而没有任何妥协的

00:04:00.836 --> 00:04:02.376 A:middle
MacOS 更新了

00:04:03.126 --> 00:04:04.506 A:middle
在 High Sierra 之后的下一次

00:04:04.506 --> 00:04:05.616 A:middle
重大更新的时候

00:04:05.616 --> 00:04:07.336 A:middle
如果你们的 app 不兼容 64 位

00:04:07.906 --> 00:04:09.466 A:middle
就必须开始对用户提出严重警告

00:04:12.386 --> 00:04:13.416 A:middle
Mac App Store 也将就此

00:04:13.416 --> 00:04:14.536 A:middle
作出调整

00:04:14.976 --> 00:04:16.375 A:middle
在大约 6 个月后

00:04:16.375 --> 00:04:17.875 A:middle
你们将要求所有提交到

00:04:17.875 --> 00:04:19.185 A:middle
Mac App Store 的新 app

00:04:19.185 --> 00:04:21.776 A:middle
都必须支持 64 位

00:04:21.776 --> 00:04:23.396 A:middle
一年后  所有的新 app

00:04:23.396 --> 00:04:25.406 A:middle
和现有 app 的更新

00:04:25.406 --> 00:04:27.486 A:middle
在提交到 Mac App Store 的时候

00:04:27.486 --> 00:04:28.746 A:middle
都必须仅支持 64 位

00:04:29.296 --> 00:04:32.616 A:middle
在接下来的 90 分钟

00:04:32.616 --> 00:04:34.106 A:middle
他们将深入讲解

00:04:34.106 --> 00:04:35.546 A:middle
我们今天要发布的

00:04:35.546 --> 00:04:36.366 A:middle
最重要的 API

00:04:36.366 --> 00:04:37.286 A:middle
和技术

00:04:37.636 --> 00:04:38.656 A:middle
还会深入讲解

00:04:38.656 --> 00:04:40.136 A:middle
我们的开发者工具

00:04:40.576 --> 00:04:41.606 A:middle
实际上  他们首先会讲到

00:04:41.606 --> 00:04:42.496 A:middle
Swift Playgrounds

00:04:42.636 --> 00:04:44.146 A:middle
我现在要把舞台交给

00:04:44.146 --> 00:04:45.666 A:middle
Matthew 请他讲解

00:04:46.516 --> 00:04:51.116 A:middle
[ 掌声 ]

00:04:51.616 --> 00:04:52.496 A:middle
&gt;&gt;  谢谢 Andreas

00:04:53.276 --> 00:04:54.726 A:middle
Swift Playgrounds 为教育

00:04:54.726 --> 00:04:56.366 A:middle
带来了一些新的  重要的变化

00:04:56.366 --> 00:04:58.106 A:middle
那就是用真正的代码

00:04:58.176 --> 00:04:59.976 A:middle
以充满乐趣的方式

00:05:00.356 --> 00:05:01.256 A:middle
教孩子们编程

00:05:01.696 --> 00:05:03.076 A:middle
反响

00:05:03.186 --> 00:05:03.966 A:middle
非常良好

00:05:04.416 --> 00:05:06.016 A:middle
在 App Store 上发布不到 10 个月

00:05:06.016 --> 00:05:07.606 A:middle
就已经有超过一千万人

00:05:07.606 --> 00:05:09.056 A:middle
开始用 Swift Playgrounds

00:05:09.056 --> 00:05:09.996 A:middle
进行编程了

00:05:10.546 --> 00:05:12.056 A:middle
用户来自世界各地

00:05:12.056 --> 00:05:13.406 A:middle
因为我们在 6 个国家及地区

00:05:13.406 --> 00:05:15.716 A:middle
发布了这个 app  做了相应的本地化处理

00:05:17.176 --> 00:05:19.536 A:middle
实际上  所有用户中

00:05:19.536 --> 00:05:21.396 A:middle
有大约三分之二

00:05:21.396 --> 00:05:23.266 A:middle
不是美国人  这让 Swift

00:05:23.266 --> 00:05:24.966 A:middle
Playgrounds  获得了国际性的

00:05:25.036 --> 00:05:25.586 A:middle
成功

00:05:27.736 --> 00:05:29.006 A:middle
去年首发以来

00:05:29.006 --> 00:05:30.296 A:middle
我们先后向这个 app

00:05:30.296 --> 00:05:31.876 A:middle
加入了一系列新特性

00:05:32.416 --> 00:05:33.296 A:middle
比如在代码运行时

00:05:33.296 --> 00:05:34.516 A:middle
一行行的高光显示

00:05:34.516 --> 00:05:36.116 A:middle
新内容可用时

00:05:36.116 --> 00:05:37.936 A:middle
出现内容通知

00:05:37.936 --> 00:05:39.796 A:middle
以及添加新的

00:05:39.796 --> 00:05:41.456 A:middle
Playground  页面功能

00:05:42.206 --> 00:05:43.496 A:middle
这些特性以及许多其他特性

00:05:43.546 --> 00:05:45.466 A:middle
和新内容一起使

00:05:45.466 --> 00:05:47.216 A:middle
Swift Playgrounds 变得出色

00:05:48.606 --> 00:05:49.856 A:middle
大家也许听说了

00:05:49.856 --> 00:05:51.636 A:middle
今天我们要发布

00:05:51.636 --> 00:05:53.126 A:middle
Swift Playgrounds 的新版本

00:05:53.126 --> 00:05:55.136 A:middle
也就是1.5版

00:05:55.736 --> 00:05:57.006 A:middle
在这次发布中

00:05:57.006 --> 00:05:58.926 A:middle
我们会让用户更容易连接

00:05:58.926 --> 00:06:00.526 A:middle
蓝牙机器人

00:05:58.926 --> 00:06:00.526 A:middle
蓝牙机器人

00:06:00.816 --> 00:06:02.236 A:middle
无人机等设备

00:06:03.086 --> 00:06:05.356 A:middle
这会让 Swift 进入

00:06:05.356 --> 00:06:07.116 A:middle
真正的世界  甚至可以

00:06:07.276 --> 00:06:08.216 A:middle
出门去探索

00:06:08.666 --> 00:06:10.686 A:middle
它会随着你的编程技巧提高

00:06:10.686 --> 00:06:12.016 A:middle
自然地予以配合

00:06:12.016 --> 00:06:14.376 A:middle
在这次发布中

00:06:14.376 --> 00:06:15.796 A:middle
我们与一些出色的伙伴

00:06:15.876 --> 00:06:17.386 A:middle
合作  他们也想利用 Swift

00:06:17.386 --> 00:06:19.176 A:middle
为他们的设备

00:06:19.176 --> 00:06:22.596 A:middle
设计很好的体验

00:06:22.776 --> 00:06:24.226 A:middle
比如 Parrot 公司的迷你无人机

00:06:24.226 --> 00:06:27.126 A:middle
可以飞行和翻转  还有 UBTECH

00:06:27.326 --> 00:06:28.916 A:middle
可搭建  可编程的 MeeBot

00:06:28.916 --> 00:06:32.786 A:middle
还有 Sphero 的

00:06:32.786 --> 00:06:34.906 A:middle
Sprk+ 机器球 非常厉害

00:06:35.006 --> 00:06:37.936 A:middle
还有 Wonder Workshop 的

00:06:37.936 --> 00:06:39.936 A:middle
能够行走和说话的 Dash

00:06:41.266 --> 00:06:43.126 A:middle
还有 Skoogmusic 和他们的 Tactile

00:06:43.196 --> 00:06:47.716 A:middle
Musical cube 还有乐高公司的

00:06:47.816 --> 00:06:48.606 A:middle
MINDSTORMS EV3

00:06:50.516 --> 00:06:55.966 A:middle
[ 掌声 ]

00:06:56.466 --> 00:06:57.876 A:middle
你可以用 MINDSTORMS

00:06:57.876 --> 00:06:59.526 A:middle
搭建出无穷的可能

00:06:59.526 --> 00:07:01.286 A:middle
这让它和 Swift Playgrounds 成为

00:06:59.526 --> 00:07:01.286 A:middle
这让它和 Swift Playgrounds 成为

00:07:01.286 --> 00:07:01.936 A:middle
绝配

00:07:02.406 --> 00:07:03.806 A:middle
实际上 我们所有的伙伴

00:07:03.806 --> 00:07:04.996 A:middle
都运用了这个 app 的

00:07:04.996 --> 00:07:06.416 A:middle
互动性

00:07:06.996 --> 00:07:08.686 A:middle
设计出直观的  可以拖拽放置的 API

00:07:08.686 --> 00:07:10.436 A:middle
并在 live view 中

00:07:10.476 --> 00:07:12.166 A:middle
推出最新的设备

00:07:12.166 --> 00:07:13.486 A:middle
和传感数据

00:07:14.146 --> 00:07:16.256 A:middle
在你看到你的想法

00:07:16.256 --> 00:07:17.656 A:middle
变成代码并让设备活起来

00:07:17.726 --> 00:07:19.716 A:middle
这个过程非常

00:07:19.716 --> 00:07:20.876 A:middle
让人着迷

00:07:22.006 --> 00:07:23.416 A:middle
现在  我们所有的伙伴

00:07:23.416 --> 00:07:24.936 A:middle
都做到了让 Playgrounds

00:07:24.936 --> 00:07:26.466 A:middle
和他们的设备共同工作

00:07:26.466 --> 00:07:28.396 A:middle
你可以在 app 里的新设备

00:07:28.426 --> 00:07:29.956 A:middle
菜单找到它们

00:07:29.956 --> 00:07:31.436 A:middle
有可以试玩的样品

00:07:31.436 --> 00:07:33.126 A:middle
还有建立你自己的文件的

00:07:33.836 --> 00:07:34.286 A:middle
模板

00:07:34.286 --> 00:07:35.696 A:middle
我们很期待看到

00:07:35.696 --> 00:07:37.946 A:middle
不同年龄的用户

00:07:37.946 --> 00:07:39.036 A:middle
利用新的 Swift

00:07:39.036 --> 00:07:40.556 A:middle
Playgrounds 因为我们相信

00:07:40.556 --> 00:07:42.476 A:middle
它是用你自己写的代码

00:07:42.476 --> 00:07:44.946 A:middle
控制机器人和无人机

00:07:44.946 --> 00:07:45.436 A:middle
最棒的工具

00:07:46.816 --> 00:07:47.886 A:middle
Swift Playgrounds 的新版本

00:07:47.886 --> 00:07:49.576 A:middle
今天就能在 App Store 里

00:07:49.576 --> 00:07:51.766 A:middle
免费下载

00:07:51.766 --> 00:07:52.706 A:middle
你可以在你附近的 Apple 实体店

00:07:52.706 --> 00:07:53.816 A:middle
找到很多我们的合作伙伴

00:07:53.816 --> 00:07:55.886 A:middle
生产的蓝牙设备

00:07:56.596 --> 00:07:59.226 A:middle
今天我还想和大家分享

00:07:59.226 --> 00:08:00.166 A:middle
另一个版本的 Swift Playgrounds

00:07:59.226 --> 00:08:00.166 A:middle
另一个版本的 Swift Playgrounds

00:08:00.166 --> 00:08:01.606 A:middle
那就是 Swift Playgrounds 2

00:08:01.606 --> 00:08:03.416 A:middle
这个版本将会在今年秋天的

00:08:03.416 --> 00:08:04.096 A:middle
晚些时候发布

00:08:05.176 --> 00:08:07.736 A:middle
今天 我们的内容包括

00:08:07.826 --> 00:08:09.056 A:middle
代码学习

00:08:09.296 --> 00:08:10.916 A:middle
存在的挑战  以及来自合作伙伴的

00:08:10.916 --> 00:08:12.206 A:middle
新升级版本的 Playgrounds

00:08:12.756 --> 00:08:14.426 A:middle
但我们也知道  你们也有

00:08:14.426 --> 00:08:16.966 A:middle
很多很棒的想法

00:08:16.966 --> 00:08:17.646 A:middle
所以今年秋天

00:08:17.646 --> 00:08:19.106 A:middle
我们会让每个人更容易分享

00:08:19.376 --> 00:08:19.936 A:middle
Playgrounds

00:08:21.406 --> 00:08:22.676 A:middle
有了 Swift Playgrounds 2

00:08:22.676 --> 00:08:23.906 A:middle
我们就能够支持

00:08:23.996 --> 00:08:25.756 A:middle
第三方内容的信息流

00:08:25.756 --> 00:08:26.546 A:middle
用户可以订阅

00:08:27.536 --> 00:08:29.696 A:middle
这个内容会让

00:08:29.696 --> 00:08:31.056 A:middle
学校开办课程

00:08:31.056 --> 00:08:32.826 A:middle
开发者发布 API 探索

00:08:32.905 --> 00:08:35.416 A:middle
朋友之间分享想法

00:08:35.486 --> 00:08:36.916 A:middle
让这些事变得更容易

00:08:38.566 --> 00:08:40.046 A:middle
这个版本还会包括

00:08:40.046 --> 00:08:41.366 A:middle
升级的文件编制体验

00:08:41.366 --> 00:08:43.645 A:middle
在 iOS11 SDK 中支持 Swift 4

00:08:43.645 --> 00:08:46.486 A:middle
并启动相机功能

00:08:46.486 --> 00:08:48.306 A:middle
和增强现实 API

00:08:49.376 --> 00:08:52.536 A:middle
我们还会增强

00:08:52.536 --> 00:08:54.106 A:middle
这个 app 的国际性

00:08:54.106 --> 00:08:55.556 A:middle
再提供 8 个语言的

00:08:55.556 --> 00:08:57.286 A:middle
本地化版本

00:08:58.696 --> 00:09:00.206 A:middle
Swift Playgrounds 2

00:08:58.696 --> 00:09:00.206 A:middle
Swift Playgrounds 2

00:09:00.206 --> 00:09:01.236 A:middle
的 beta 版本

00:09:01.236 --> 00:09:02.856 A:middle
可以在 TestFlight 上获取

00:09:03.376 --> 00:09:04.246 A:middle
大家可以在

00:09:04.246 --> 00:09:06.406 A:middle
developer.apple.com 上登记

00:09:06.626 --> 00:09:07.066 A:middle
试着玩一玩

00:09:08.556 --> 00:09:10.586 A:middle
所以我们为你准备了两个

00:09:10.586 --> 00:09:11.766 A:middle
Swift Playgrounds 的重要版本

00:09:12.386 --> 00:09:14.296 A:middle
现在我想换个话题

00:09:14.296 --> 00:09:16.456 A:middle
说一说 Xcode 9

00:09:17.416 --> 00:09:20.036 A:middle
Xcode 9 也是一个重大发布

00:09:20.486 --> 00:09:21.656 A:middle
我们在各项工具的基础

00:09:21.656 --> 00:09:23.376 A:middle
工作流程和性能

00:09:23.596 --> 00:09:25.306 A:middle
上面都做了重大投入

00:09:25.526 --> 00:09:27.416 A:middle
并且已经获得了一些

00:09:27.416 --> 00:09:28.776 A:middle
可喜的成果

00:09:29.376 --> 00:09:30.586 A:middle
今天我想先讲一讲

00:09:30.586 --> 00:09:32.056 A:middle
我们在 Xcode 9 里的

00:09:33.796 --> 00:09:35.406 A:middle
Source Editor

00:09:35.506 --> 00:09:36.336 A:middle
我们彻底重新实现了 Source

00:09:36.336 --> 00:09:36.596 A:middle
Editor

00:09:37.276 --> 00:09:38.266 A:middle
用 Swift 彻底重写了它

00:09:40.516 --> 00:09:47.226 A:middle
[ 掌声 ]

00:09:47.726 --> 00:09:48.236 A:middle
我同意

00:09:48.236 --> 00:09:49.016 A:middle
这是件大事

00:09:50.196 --> 00:09:51.936 A:middle
第一眼看去

00:09:51.936 --> 00:09:53.626 A:middle
你会看到熟悉的

00:09:53.736 --> 00:09:55.436 A:middle
多种字体和字号

00:09:55.856 --> 00:09:57.166 A:middle
但现在有更多选项

00:09:57.166 --> 00:09:59.336 A:middle
可以用于行距  光标类型

00:09:59.386 --> 00:09:59.596 A:middle
等等

00:10:00.416 --> 00:10:01.606 A:middle
我们还采用了

00:10:01.606 --> 00:10:03.726 A:middle
语义表达的概念  并没有

00:10:03.726 --> 00:10:05.296 A:middle
停止在源代码阶段  因为

00:10:05.296 --> 00:10:07.066 A:middle
现在我们有统一的

00:10:07.066 --> 00:10:08.466 A:middle
Markdown 编辑器了

00:10:10.516 --> 00:10:14.436 A:middle
[ 掌声 ]

00:10:14.936 --> 00:10:16.676 A:middle
此外  针对城市化编辑

00:10:16.766 --> 00:10:18.166 A:middle
你们会有类似的编辑

00:10:18.166 --> 00:10:19.816 A:middle
经历  例如使用 Jump bar

00:10:19.816 --> 00:10:20.886 A:middle
进行导航  在链接上

00:10:21.126 --> 00:10:22.826 A:middle
使用 Command-clicking on links

00:10:22.826 --> 00:10:24.326 A:middle
甚至是在 Scope 里用 Edit All

00:10:24.326 --> 00:10:25.146 A:middle
来更改 reference

00:10:26.676 --> 00:10:27.706 A:middle
现在  你开始编写源代码时

00:10:27.706 --> 00:10:29.186 A:middle
你会发现 issues

00:10:29.186 --> 00:10:31.026 A:middle
现在得到了漂亮的显示

00:10:31.306 --> 00:10:32.706 A:middle
不再需要调整

00:10:32.706 --> 00:10:33.226 A:middle
代码的布局了

00:10:34.166 --> 00:10:35.766 A:middle
Issues 现在有更多细节了

00:10:36.026 --> 00:10:36.146 A:middle
没错

00:10:37.516 --> 00:10:41.776 A:middle
[ 掌声 ]

00:10:42.276 --> 00:10:43.346 A:middle
Issues 现在能够以更多细节显示

00:10:43.346 --> 00:10:45.196 A:middle
并且集成了 Fix-it

00:10:45.196 --> 00:10:47.026 A:middle
工作流

00:10:47.466 --> 00:10:48.786 A:middle
包括一键使用

00:10:48.786 --> 00:10:50.716 A:middle
多个 Fix-its 的功能

00:10:52.516 --> 00:10:55.876 A:middle
[ 掌声 ]

00:10:56.376 --> 00:10:58.086 A:middle
这个新的 issue 展示

00:10:58.086 --> 00:10:59.606 A:middle
是一块完美的画布  适用于

00:10:59.606 --> 00:11:01.486 A:middle
超过 300 个新诊断程式

00:10:59.606 --> 00:11:01.486 A:middle
超过 300 个新诊断程式

00:11:01.536 --> 00:11:02.876 A:middle
分析器  和我们为了

00:11:02.876 --> 00:11:04.626 A:middle
帮你们写出更棒的代码而添加的

00:11:04.706 --> 00:11:06.536 A:middle
Fix-its

00:11:07.366 --> 00:11:08.786 A:middle
性能也很重要

00:11:08.786 --> 00:11:10.116 A:middle
在这次发布后

00:11:10.116 --> 00:11:11.596 A:middle
你会发现编辑器打开文件

00:11:11.596 --> 00:11:13.966 A:middle
速度比以前快 3 倍

00:11:14.016 --> 00:11:15.946 A:middle
在文件中浏览时

00:11:15.946 --> 00:11:17.036 A:middle
以每秒 60 帧的速度滚动

00:11:17.036 --> 00:11:18.606 A:middle
效果也会更顺畅

00:11:18.606 --> 00:11:20.716 A:middle
跳到某一行的速度则比以前提高了

00:11:20.906 --> 00:11:21.946 A:middle
50 倍

00:11:22.516 --> 00:11:27.286 A:middle
[ 掌声 ]

00:11:27.786 --> 00:11:28.836 A:middle
简单来说

00:11:28.836 --> 00:11:30.196 A:middle
一切都会在瞬间完成

00:11:31.646 --> 00:11:33.406 A:middle
现在  在 Xcode 9 中的编辑体验

00:11:33.486 --> 00:11:34.946 A:middle
也会是全新的

00:11:35.796 --> 00:11:37.466 A:middle
我们的编辑器现在有了更多的

00:11:37.516 --> 00:11:39.036 A:middle
语义意识  我们还使用了

00:11:39.036 --> 00:11:40.366 A:middle
从 Swift Playgrounds 那里

00:11:40.366 --> 00:11:41.506 A:middle
带来的标记化编辑

00:11:41.576 --> 00:11:41.956 A:middle
体验

00:11:43.156 --> 00:11:44.436 A:middle
你在代码中移动的时候

00:11:44.436 --> 00:11:45.596 A:middle
我们会把下面的结构

00:11:45.596 --> 00:11:46.846 A:middle
高亮标出

00:11:48.516 --> 00:11:55.366 A:middle
[ 掌声 ]

00:11:55.866 --> 00:11:58.386 A:middle
你点击其中一个标记时

00:11:58.386 --> 00:11:59.376 A:middle
会出现一个

00:11:59.376 --> 00:12:01.036 A:middle
充满符号性变化的

00:11:59.376 --> 00:12:01.036 A:middle
充满符号性变化的

00:12:01.036 --> 00:12:02.666 A:middle
动作菜单帮你

00:12:02.666 --> 00:12:03.256 A:middle
扩展你的代码

00:12:04.516 --> 00:12:08.996 A:middle
[ 掌声 ]

00:12:09.496 --> 00:12:10.586 A:middle
我猜有人已经猜到

00:12:10.586 --> 00:12:12.806 A:middle
接下来我会说什么了

00:12:13.646 --> 00:12:14.736 A:middle
没错  是真的

00:12:14.776 --> 00:12:16.366 A:middle
Xcode 9 有一个全新的

00:12:16.366 --> 00:12:17.386 A:middle
重构系统了

00:12:18.516 --> 00:12:27.206 A:middle
[ 掌声 ]

00:12:27.706 --> 00:12:29.196 A:middle
没错  我们的重构系统

00:12:29.196 --> 00:12:30.956 A:middle
适用于 Swift  Objective-C

00:12:31.066 --> 00:12:33.356 A:middle
C 和 C++ 所以你可以

00:12:33.636 --> 00:12:34.926 A:middle
尽情使用

00:12:35.406 --> 00:12:36.806 A:middle
重构工作流

00:12:36.916 --> 00:12:38.436 A:middle
能够利用新的

00:12:38.436 --> 00:12:40.396 A:middle
标记化编辑体验

00:12:40.396 --> 00:12:41.926 A:middle
代表 contextual actions

00:12:41.926 --> 00:12:44.376 A:middle
比如抽取和重命名

00:12:44.376 --> 00:12:45.686 A:middle
这些都是可绑定的

00:12:45.796 --> 00:12:47.376 A:middle
你可以把常用的动作设成

00:12:47.376 --> 00:12:48.376 A:middle
关键性的量值

00:12:49.366 --> 00:12:50.936 A:middle
我们也准备了一个很棒的

00:12:50.986 --> 00:12:52.586 A:middle
演示来帮大家熟悉这些改动

00:12:53.826 --> 00:12:54.966 A:middle
所以下面我要

00:12:54.966 --> 00:12:56.026 A:middle
请 Ken Orr 上台

00:12:56.026 --> 00:12:57.286 A:middle
为大家演示

00:12:57.286 --> 00:12:58.536 A:middle
重构的新 Source Editor

00:13:00.516 --> 00:13:05.566 A:middle
[ 掌声 ]

00:13:06.066 --> 00:13:06.656 A:middle
&gt;&gt;  谢谢 Matthew

00:13:07.246 --> 00:13:09.166 A:middle
Xcode 9 有了一个全新的

00:13:09.166 --> 00:13:10.816 A:middle
彻底重写的 Source Editor

00:13:10.816 --> 00:13:13.736 A:middle
它变得更快了

00:13:13.736 --> 00:13:16.096 A:middle
我想你首先就会注意到

00:13:16.096 --> 00:13:18.546 A:middle
这种速度的变化

00:13:19.076 --> 00:13:20.866 A:middle
在这 1 万行代码

00:13:20.916 --> 00:13:25.326 A:middle
中一直滚动到底  都非常

00:13:25.326 --> 00:13:26.736 A:middle
顺畅  而且我可以

00:13:26.736 --> 00:13:28.766 A:middle
瞬间回到顶部

00:13:29.666 --> 00:13:31.536 A:middle
当然  代码看上去

00:13:31.626 --> 00:13:33.206 A:middle
也棒极了

00:13:33.286 --> 00:13:34.626 A:middle
我把它放大一点

00:13:34.626 --> 00:13:35.726 A:middle
让大家看得更容易

00:13:35.916 --> 00:13:38.036 A:middle
点击几下 Command+

00:13:39.516 --> 00:13:43.796 A:middle
[ 掌声 ]

00:13:44.296 --> 00:13:45.956 A:middle
这都是小改动

00:13:48.246 --> 00:13:50.596 A:middle
假设我正在制作一个 iOS app

00:13:50.596 --> 00:13:52.956 A:middle
让我们的用户探索

00:13:52.956 --> 00:13:53.756 A:middle
太阳系

00:13:53.826 --> 00:13:55.286 A:middle
我想加几行

00:13:55.286 --> 00:13:55.846 A:middle
代码

00:13:55.846 --> 00:13:56.966 A:middle
我要跳转到这个

00:13:56.966 --> 00:14:00.456 A:middle
Objective-C 文件上

00:13:56.966 --> 00:14:00.456 A:middle
Objective-C 文件上

00:14:00.456 --> 00:14:01.586 A:middle
而我刚加入的这几行代码

00:14:01.586 --> 00:14:03.426 A:middle
有一点小问题

00:14:03.576 --> 00:14:05.146 A:middle
你会看到 这个新的

00:14:05.146 --> 00:14:06.866 A:middle
issues presentation 马上出现了

00:14:07.186 --> 00:14:09.236 A:middle
而且还内置了 Fix-its

00:14:10.286 --> 00:14:12.156 A:middle
这个在 Objective-C 是新的

00:14:14.156 --> 00:14:16.106 A:middle
而且还警告我  我是在用 iOS 11

00:14:16.106 --> 00:14:18.346 A:middle
API  但我的 project

00:14:18.346 --> 00:14:21.046 A:middle
却是配置到 iOS 10 的

00:14:21.046 --> 00:14:21.556 A:middle
这会导致系统崩溃 [掌声]

00:14:22.216 --> 00:14:28.886 A:middle
对于这个问题有 Fix-it

00:14:28.886 --> 00:14:29.586 A:middle
我会接受

00:14:30.246 --> 00:14:32.986 A:middle
如果我接受了 Xcode 就会用新的

00:14:32.986 --> 00:14:35.086 A:middle
Objective-C 关键词 atAvailable

00:14:35.086 --> 00:14:36.686 A:middle
把我的代码打包

00:14:37.106 --> 00:14:38.736 A:middle
现在  这几行代码

00:14:38.736 --> 00:14:41.066 A:middle
就只会在 iOS 11 下面才运行了

00:14:42.516 --> 00:14:46.076 A:middle
[ 掌声]

00:14:46.576 --> 00:14:47.676 A:middle
我还想展示另外一个

00:14:47.676 --> 00:14:48.386 A:middle
新的 Fix-it

00:14:48.386 --> 00:14:49.866 A:middle
我要跳到这边这个

00:14:49.956 --> 00:14:50.856 A:middle
SWF 文件上面

00:14:51.096 --> 00:14:52.756 A:middle
这个 class 代表的是

00:14:52.756 --> 00:14:54.106 A:middle
我们的太阳系中的一个

00:14:54.106 --> 00:14:56.126 A:middle
卫星  我要使用

00:14:56.126 --> 00:14:59.336 A:middle
物理物体协议

00:14:59.946 --> 00:15:01.186 A:middle
这有一些不同的

00:14:59.946 --> 00:15:01.186 A:middle
这有一些不同的

00:15:01.186 --> 00:15:01.816 A:middle
方法

00:15:01.816 --> 00:15:04.766 A:middle
我有一些

00:15:04.766 --> 00:15:05.586 A:middle
不同的方法

00:15:06.086 --> 00:15:07.536 A:middle
当然  我还没有执行

00:15:07.536 --> 00:15:09.226 A:middle
因此出现了一个问题

00:15:10.156 --> 00:15:13.526 A:middle
现在  只要点击一下

00:15:13.526 --> 00:15:16.386 A:middle
Fix-it 它就会把所有

00:15:16.386 --> 00:15:17.796 A:middle
我还没有执行的方法

00:15:17.796 --> 00:15:18.206 A:middle
添加进来

00:15:19.516 --> 00:15:24.576 A:middle
[ 掌声 ]

00:15:25.076 --> 00:15:26.686 A:middle
Xcode 9 还能帮助我

00:15:26.686 --> 00:15:29.316 A:middle
转化并重构我的代码

00:15:29.686 --> 00:15:30.426 A:middle
我来展示一下

00:15:30.426 --> 00:15:32.626 A:middle
我现在要跳到这个

00:15:32.626 --> 00:15:35.856 A:middle
solarsystem.swf 文件上

00:15:35.856 --> 00:15:36.926 A:middle
按住 Command 键

00:15:36.926 --> 00:15:38.776 A:middle
操作鼠标

00:15:39.186 --> 00:15:41.586 A:middle
这时 Xcode 就会显示出

00:15:41.586 --> 00:15:43.486 A:middle
我的代码的结构

00:15:44.156 --> 00:15:46.076 A:middle
点击一下  就能得到

00:15:46.076 --> 00:15:48.146 A:middle
一系列选项与变化

00:15:48.146 --> 00:15:49.706 A:middle
这是针对我所点击的

00:15:49.706 --> 00:15:50.396 A:middle
Expression 的

00:15:50.936 --> 00:15:51.856 A:middle
我在这里点击这个

00:15:51.856 --> 00:15:52.996 A:middle
expression 生成一个

00:15:52.996 --> 00:15:54.926 A:middle
卫星  然后把它加到

00:15:55.086 --> 00:15:55.566 A:middle
地球上

00:15:56.476 --> 00:15:58.226 A:middle
你知道  我个人更喜欢

00:15:58.266 --> 00:16:00.586 A:middle
捕捉我在

00:15:58.266 --> 00:16:00.586 A:middle
捕捉我在

00:16:00.586 --> 00:16:01.976 A:middle
变量中生成的所有对象

00:16:01.976 --> 00:16:03.196 A:middle
所以我就把这个提取出来

00:16:03.196 --> 00:16:04.976 A:middle
进入一个 expression

00:16:04.976 --> 00:16:06.976 A:middle
然后我使用 Scope 里的 Edit All

00:16:06.976 --> 00:16:08.586 A:middle
来给它起个好名字

00:16:08.586 --> 00:16:09.346 A:middle
月球

00:16:10.826 --> 00:16:12.046 A:middle
大家知道  实际上

00:16:12.046 --> 00:16:13.516 A:middle
我喜欢让 methods

00:16:13.516 --> 00:16:15.856 A:middle
简短并直达主题

00:16:15.856 --> 00:16:16.936 A:middle
因此我要把这个

00:16:16.936 --> 00:16:18.956 A:middle
If block 拉到它自己的

00:16:18.956 --> 00:16:19.346 A:middle
method 里

00:16:20.126 --> 00:16:22.926 A:middle
我这样做的时候 Xcode 会

00:16:22.926 --> 00:16:24.756 A:middle
为我生成一个新 method

00:16:24.756 --> 00:16:26.856 A:middle
并把所有代码添加进去

00:16:26.856 --> 00:16:28.036 A:middle
然后在起始处留给我一个

00:16:28.036 --> 00:16:29.086 A:middle
这个 method 的 call

00:16:30.216 --> 00:16:31.406 A:middle
也给它起个名吧

00:16:32.516 --> 00:16:37.806 A:middle
[ 掌声 ]

00:16:38.306 --> 00:16:39.886 A:middle
这就是一些本地的

00:16:39.886 --> 00:16:41.866 A:middle
转换  但很多时候

00:16:41.866 --> 00:16:43.466 A:middle
我想做的是

00:16:43.466 --> 00:16:44.556 A:middle
重构在整个 project 里面

00:16:44.556 --> 00:16:45.586 A:middle
使用的东西

00:16:45.586 --> 00:16:46.626 A:middle
的名字

00:16:47.586 --> 00:16:48.836 A:middle
实际上  我这就有个很好的

00:16:48.836 --> 00:16:51.026 A:middle
例子  也就是这个

00:16:51.486 --> 00:16:52.276 A:middle
position method

00:16:52.276 --> 00:16:53.966 A:middle
这个名字有点一般

00:16:53.966 --> 00:16:54.866 A:middle
我想我应该把它

00:16:54.866 --> 00:16:56.006 A:middle
换成一个更具描述性的

00:16:56.006 --> 00:16:56.566 A:middle
名字

00:16:56.566 --> 00:16:57.806 A:middle
所以我就要按住

00:16:57.806 --> 00:17:00.376 A:middle
Command 键  点击  并说

00:16:57.806 --> 00:17:00.376 A:middle
Command 键  点击  并说

00:17:00.416 --> 00:17:03.226 A:middle
重命名  这时

00:17:03.226 --> 00:17:05.786 A:middle
Xcode 就会收起我所在的文件

00:17:06.516 --> 00:17:11.586 A:middle
[ 掌声 ]

00:17:12.086 --> 00:17:13.816 A:middle
收起这个文件

00:17:13.945 --> 00:17:16.306 A:middle
然后从我的 project 各个

00:17:16.366 --> 00:17:18.205 A:middle
使用了这个 method 的地方

00:17:18.205 --> 00:17:18.566 A:middle
把它们拉上来

00:17:19.195 --> 00:17:21.346 A:middle
我选个新名字

00:17:21.346 --> 00:17:22.536 A:middle
就用这个吧

00:17:22.856 --> 00:17:25.246 A:middle
"orbital position"

00:17:26.046 --> 00:17:27.866 A:middle
我键入的时候

00:17:27.866 --> 00:17:29.376 A:middle
它就会把所有的 slide 都改名了

00:17:29.976 --> 00:17:31.636 A:middle
我还可以为参数

00:17:31.636 --> 00:17:32.056 A:middle
重命名

00:17:32.426 --> 00:17:33.756 A:middle
第一个参数名  看上去

00:17:33.756 --> 00:17:34.116 A:middle
没问题

00:17:34.436 --> 00:17:35.666 A:middle
但第二个名称 date

00:17:35.666 --> 00:17:36.816 A:middle
我决定把它改成

00:17:36.856 --> 00:17:39.696 A:middle
"moment in time"

00:17:40.926 --> 00:17:43.726 A:middle
点击重命名  完成了

00:17:43.806 --> 00:17:46.926 A:middle
所以对于这样的 method

00:17:47.186 --> 00:17:48.416 A:middle
重命名这个重构是很好用的

00:17:48.936 --> 00:17:50.486 A:middle
对于所有的 classes 的工作也是一样

00:17:50.976 --> 00:17:53.596 A:middle
在这里有这个 class

00:17:53.936 --> 00:17:55.776 A:middle
"trans-Neptunian object"

00:17:56.426 --> 00:17:58.606 A:middle
这名字有点太长了

00:17:58.606 --> 00:18:00.026 A:middle
我们给它改一个简单点的

00:17:58.606 --> 00:18:00.026 A:middle
我们给它改一个简单点的

00:18:00.026 --> 00:18:00.666 A:middle
名字吧

00:18:01.466 --> 00:18:02.976 A:middle
我要把它的名字改成

00:18:03.076 --> 00:18:05.206 A:middle
"minor planet"

00:18:06.236 --> 00:18:07.696 A:middle
重构  它能够完成

00:18:07.886 --> 00:18:09.186 A:middle
你所希望的一切

00:18:09.566 --> 00:18:11.696 A:middle
在我的 project 里  它意味着

00:18:11.856 --> 00:18:14.876 A:middle
SWF 文件 Objective-C 文件

00:18:15.936 --> 00:18:17.566 A:middle
甚至是故事板

00:18:18.516 --> 00:18:26.506 A:middle
[ 掌声 ]

00:18:27.006 --> 00:18:29.856 A:middle
我做好后  点击重命名

00:18:30.056 --> 00:18:31.056 A:middle
就完工了

00:18:31.056 --> 00:18:32.016 A:middle
非常简单

00:18:32.356 --> 00:18:33.236 A:middle
非常好用

00:18:33.826 --> 00:18:35.246 A:middle
这就是新的 Source Editor

00:18:35.246 --> 00:18:36.246 A:middle
和 Xcode 9 里的重构功能

00:18:36.726 --> 00:18:37.326 A:middle
Matthew 上来吧

00:18:38.516 --> 00:18:43.766 A:middle
[ 掌声 ]

00:18:44.266 --> 00:18:44.706 A:middle
&gt;&gt;  谢谢 Ken

00:18:44.796 --> 00:18:45.946 A:middle
非常精彩的讲解

00:18:48.346 --> 00:18:50.246 A:middle
新的重构功能

00:18:50.246 --> 00:18:51.506 A:middle
大大有利于改进你的代码

00:18:51.906 --> 00:18:53.536 A:middle
除了重命名

00:18:53.536 --> 00:18:54.996 A:middle
这项重构  我们还会加入

00:18:54.996 --> 00:18:56.206 A:middle
一系列本地转化

00:18:56.206 --> 00:18:57.916 A:middle
比如抽取代码

00:18:58.336 --> 00:19:00.026 A:middle
添加 missing overrides

00:18:58.336 --> 00:19:00.026 A:middle
添加 missing overrides

00:19:00.026 --> 00:19:01.246 A:middle
以及本地化的字符串

00:19:02.176 --> 00:19:03.516 A:middle
但这只是开始

00:19:04.186 --> 00:19:05.256 A:middle
因为我们会公开重构引擎

00:19:05.256 --> 00:19:06.856 A:middle
的源代码  这是

00:19:07.146 --> 00:19:08.846 A:middle
Apple Clang 和 Swift compilers

00:19:08.846 --> 00:19:09.896 A:middle
的一部分

00:19:11.516 --> 00:19:16.086 A:middle
[ 掌声 ]

00:19:16.586 --> 00:19:17.986 A:middle
Xcode 会自动拾取

00:19:18.016 --> 00:19:19.556 A:middle
你在本地工具链中

00:19:19.556 --> 00:19:21.216 A:middle
搭建的转换这样你就

00:19:21.216 --> 00:19:22.856 A:middle
有一个很棒的方法去让你的新的转换原型化

00:19:24.926 --> 00:19:26.906 A:middle
我们的新 Source Editor

00:19:27.326 --> 00:19:28.916 A:middle
看上去很棒

00:19:28.916 --> 00:19:30.506 A:middle
性能更是强大  现在又能

00:19:30.546 --> 00:19:31.156 A:middle
重构了

00:19:31.706 --> 00:19:33.456 A:middle
这是 Xcode 9 的一个良好开端

00:19:33.556 --> 00:19:36.566 A:middle
我们在 Swift 里

00:19:36.706 --> 00:19:38.596 A:middle
也有一些好消息

00:19:38.596 --> 00:19:40.106 A:middle
下面就请 Ted Kremenek

00:19:40.106 --> 00:19:40.416 A:middle
来讲解

00:19:42.516 --> 00:19:47.096 A:middle
[ 掌声 ]

00:19:47.596 --> 00:19:49.626 A:middle
&gt;&gt;  对于 Swift

00:19:49.626 --> 00:19:51.316 A:middle
我们的任务是让编程

00:19:51.486 --> 00:19:55.046 A:middle
更简单  更快速  更安全  更现代化

00:19:56.556 --> 00:19:58.066 A:middle
在不到三年的时间里

00:19:58.066 --> 00:19:59.676 A:middle
改进的速度是

00:19:59.676 --> 00:20:00.946 A:middle
十分惊人的

00:19:59.676 --> 00:20:00.946 A:middle
十分惊人的

00:20:01.666 --> 00:20:05.376 A:middle
在这段时间里  超过 25 万个 app

00:20:05.796 --> 00:20:07.596 A:middle
的代码是用 Swift 写就的并

00:20:07.646 --> 00:20:09.246 A:middle
提交到 App Store 上面

00:20:10.026 --> 00:20:11.736 A:middle
不仅是这个数量

00:20:11.736 --> 00:20:12.766 A:middle
令人振奋

00:20:12.766 --> 00:20:14.396 A:middle
科技公司真的是

00:20:14.396 --> 00:20:16.186 A:middle
在用 Swift 写那些他们

00:20:16.186 --> 00:20:17.746 A:middle
赖以生存的 app

00:20:18.186 --> 00:20:19.346 A:middle
在 App Store 之外

00:20:20.106 --> 00:20:21.336 A:middle
公司和企业也都

00:20:21.406 --> 00:20:22.616 A:middle
接受了 Swift

00:20:23.116 --> 00:20:25.346 A:middle
IBM 用 Swift 写了

00:20:25.346 --> 00:20:27.286 A:middle
100多个 MobileFirst iOS 系统的 app

00:20:27.286 --> 00:20:29.526 A:middle
IBM 和 SAP 都发布了

00:20:29.606 --> 00:20:32.826 A:middle
允许 Swift 开发者

00:20:32.826 --> 00:20:34.606 A:middle
利用他们的服务基础设施的

00:20:34.606 --> 00:20:35.976 A:middle
SDK

00:20:37.006 --> 00:20:39.096 A:middle
我们对于 Swift 的表现

00:20:39.096 --> 00:20:40.846 A:middle
非常满意  当然

00:20:40.846 --> 00:20:42.486 A:middle
Swift 不会停滞不前

00:20:43.766 --> 00:20:45.336 A:middle
Xcode 9 包括新发布的

00:20:45.336 --> 00:20:47.726 A:middle
Swift 和 Swift 4

00:20:47.726 --> 00:20:49.136 A:middle
我们对此很期待

00:20:50.276 --> 00:20:52.066 A:middle
这次发布的焦点

00:20:52.066 --> 00:20:53.686 A:middle
是最基础最核心的东西

00:20:53.956 --> 00:20:56.266 A:middle
让这些变得更加坚实可靠

00:20:56.396 --> 00:20:58.086 A:middle
因为我们希望 Swift 成为

00:20:58.086 --> 00:21:00.026 A:middle
大家搭建软件的

00:20:58.086 --> 00:21:00.026 A:middle
大家搭建软件的

00:21:00.026 --> 00:21:01.726 A:middle
最佳基础工具

00:21:03.186 --> 00:21:04.976 A:middle
我只能够讲到

00:21:04.976 --> 00:21:05.896 A:middle
这次发布的一小部分

00:21:05.966 --> 00:21:07.456 A:middle
内容  但我想

00:21:07.456 --> 00:21:08.996 A:middle
这些应该算是

00:21:08.996 --> 00:21:11.006 A:middle
很了不起的改进了

00:21:11.556 --> 00:21:13.406 A:middle
首先我想说的

00:21:13.406 --> 00:21:15.376 A:middle
是有了极大改进的

00:21:15.616 --> 00:21:16.096 A:middle
字符串

00:21:17.356 --> 00:21:19.946 A:middle
字符串处理是

00:21:19.946 --> 00:21:22.716 A:middle
写软件的一个

00:21:23.066 --> 00:21:24.166 A:middle
最基础的方面

00:21:24.166 --> 00:21:26.056 A:middle
我们时刻都要和它打交道

00:21:26.656 --> 00:21:28.136 A:middle
我们的目标一直是

00:21:28.136 --> 00:21:29.806 A:middle
让 Swift 里的字符串处理

00:21:29.806 --> 00:21:31.596 A:middle
成为第一类的

00:21:31.596 --> 00:21:33.176 A:middle
而不必向 Unicode correctness

00:21:33.176 --> 00:21:33.706 A:middle
有所妥协

00:21:34.376 --> 00:21:35.426 A:middle
所以我们在 Swift 4 中

00:21:35.426 --> 00:21:37.306 A:middle
为了这个目标

00:21:37.306 --> 00:21:38.376 A:middle
迈出了三大步

00:21:39.276 --> 00:21:41.416 A:middle
第一  你想让 API 变得

00:21:41.416 --> 00:21:43.636 A:middle
更加易用  对吧

00:21:43.636 --> 00:21:44.866 A:middle
因为你时刻都在用它

00:21:46.036 --> 00:21:48.316 A:middle
我们也想大力

00:21:48.316 --> 00:21:49.966 A:middle
改进 Unicode 的精确度

00:21:50.296 --> 00:21:51.216 A:middle
这一点是字符串

00:21:51.216 --> 00:21:52.686 A:middle
擅长的  但还没有完全

00:21:52.826 --> 00:21:54.406 A:middle
达到我们的期望

00:21:55.056 --> 00:21:56.056 A:middle
我们想让字符串

00:21:56.056 --> 00:21:58.066 A:middle
变得超快速

00:21:59.036 --> 00:22:00.556 A:middle
所以不难理解

00:21:59.036 --> 00:22:00.556 A:middle
所以不难理解

00:22:00.556 --> 00:22:01.986 A:middle
我们当然很希望

00:22:01.986 --> 00:22:03.366 A:middle
让字符串也变得

00:22:03.366 --> 00:22:04.076 A:middle
更加易用

00:22:04.106 --> 00:22:05.526 A:middle
这里是一些你们可能

00:22:05.526 --> 00:22:06.666 A:middle
在 Swift 3 里

00:22:06.666 --> 00:22:07.746 A:middle
用字符串写过的代码

00:22:07.746 --> 00:22:09.816 A:middle
比如遍历字符

00:22:09.816 --> 00:22:11.366 A:middle
或者查询字符串

00:22:11.366 --> 00:22:12.346 A:middle
看看里面是否有某个

00:22:12.346 --> 00:22:13.746 A:middle
字符  或者把字符串

00:22:13.746 --> 00:22:14.016 A:middle
拼接在一起

00:22:14.016 --> 00:22:16.266 A:middle
我们会发现自己要

00:22:16.266 --> 00:22:18.116 A:middle
经常到下面的

00:22:18.116 --> 00:22:20.236 A:middle
这个字符视图上面

00:22:20.236 --> 00:22:21.046 A:middle
我是说  你想得到

00:22:21.046 --> 00:22:22.226 A:middle
基本字符集

00:22:22.226 --> 00:22:23.106 A:middle
但它只有一步之遥

00:22:23.386 --> 00:22:25.736 A:middle
它会造成这种不必要的

00:22:25.736 --> 00:22:26.236 A:middle
麻烦

00:22:26.736 --> 00:22:29.066 A:middle
所以在 Swift 4 里  我们极大地

00:22:29.146 --> 00:22:30.966 A:middle
简化了这个过程

00:22:30.966 --> 00:22:33.236 A:middle
去除了阻碍  现在字符串

00:22:33.236 --> 00:22:34.216 A:middle
可以大范围替换

00:22:34.216 --> 00:22:36.546 A:middle
字符集了

00:22:37.426 --> 00:22:39.336 A:middle
不光是代码会

00:22:39.336 --> 00:22:40.746 A:middle
完全按你的期望

00:22:40.926 --> 00:22:42.436 A:middle
读写  你还可以把

00:22:42.436 --> 00:22:43.576 A:middle
集合上的泛型算法的力量

00:22:45.036 --> 00:22:46.926 A:middle
直接用在字符串上

00:22:48.656 --> 00:22:50.566 A:middle
我们还添加了很棒的句法

00:22:50.636 --> 00:22:51.666 A:middle
比如多行字符串

00:22:51.666 --> 00:22:53.056 A:middle
常量  包括

00:22:53.056 --> 00:22:54.596 A:middle
White space 语言

00:22:55.806 --> 00:22:57.536 A:middle
有了 one-sided ranges 的支持

00:22:57.536 --> 00:22:58.986 A:middle
字符切割会变得

00:22:58.986 --> 00:23:00.236 A:middle
更加不重要

00:22:58.986 --> 00:23:00.236 A:middle
更加不重要

00:23:00.956 --> 00:23:02.316 A:middle
你可以很快地

00:23:02.356 --> 00:23:03.876 A:middle
在一个片段里

00:23:03.936 --> 00:23:05.376 A:middle
指明你想要的字符串

00:23:06.736 --> 00:23:07.756 A:middle
这些对于核心人机工程的

00:23:07.756 --> 00:23:09.646 A:middle
改进必须要得到

00:23:09.646 --> 00:23:10.606 A:middle
Unicode 的改进与支持

00:23:12.086 --> 00:23:13.726 A:middle
你在 Swift 3 中

00:23:13.726 --> 00:23:15.076 A:middle
处理字符串的时候

00:23:15.076 --> 00:23:18.336 A:middle
应该注意到过

00:23:18.426 --> 00:23:20.066 A:middle
这样的怪事

00:23:20.066 --> 00:23:24.046 A:middle
你会想  这是怎么回事

00:23:24.766 --> 00:23:26.806 A:middle
这其实要归因于

00:23:26.806 --> 00:23:28.376 A:middle
Unicode 的丰富性

00:23:28.966 --> 00:23:30.706 A:middle
我们对于字符的概念

00:23:30.706 --> 00:23:32.116 A:middle
实际上是由多个

00:23:32.116 --> 00:23:34.096 A:middle
Unicode 标量值构成的

00:23:34.456 --> 00:23:36.356 A:middle
成功地把它解构

00:23:36.356 --> 00:23:37.336 A:middle
对于 Unicode 的精确性

00:23:37.416 --> 00:23:40.786 A:middle
以及字符和字符串 API 的精确性

00:23:40.786 --> 00:23:42.656 A:middle
都至关重要

00:23:43.846 --> 00:23:45.096 A:middle
在 Swift 4 中  我们有了

00:23:45.096 --> 00:23:46.516 A:middle
Unicode 9 Grapheme Breaking

00:23:46.516 --> 00:23:47.106 A:middle
算法

00:23:47.106 --> 00:23:48.686 A:middle
它能够按照你的期望

00:23:48.686 --> 00:23:49.736 A:middle
把这些字符串

00:23:49.736 --> 00:23:51.456 A:middle
或者字符分离开

00:23:51.456 --> 00:23:53.336 A:middle
让你有基本字符集

00:23:53.336 --> 00:23:54.896 A:middle
的全面精确度

00:23:55.006 --> 00:23:56.346 A:middle
这真的很重要

00:23:56.346 --> 00:23:58.266 A:middle
因为字符串就是

00:23:58.266 --> 00:23:59.236 A:middle
字符的集合

00:24:00.786 --> 00:24:02.446 A:middle
现在  这个对 Unicode

00:24:02.446 --> 00:24:04.786 A:middle
支持的改进不是以牺牲性能

00:24:04.786 --> 00:24:05.436 A:middle
为代价的

00:24:05.966 --> 00:24:07.256 A:middle
我们已经调试过

00:24:07.256 --> 00:24:08.546 A:middle
字符串的运行了

00:24:08.926 --> 00:24:10.336 A:middle
所以对大多数的字符串处理工作来说

00:24:10.336 --> 00:24:12.416 A:middle
对于英语  法语

00:24:12.456 --> 00:24:14.736 A:middle
德语  西班牙语

00:24:14.736 --> 00:24:15.856 A:middle
特别是那些以拉丁文为基础的

00:24:15.856 --> 00:24:16.736 A:middle
语言  你会看到

00:24:16.796 --> 00:24:17.666 A:middle
字符串的性能大约

00:24:17.666 --> 00:24:18.766 A:middle
提高了 3.5 倍

00:24:20.516 --> 00:24:25.356 A:middle
[ 掌声 ]

00:24:25.856 --> 00:24:27.336 A:middle
同样 你会看到

00:24:27.336 --> 00:24:28.316 A:middle
简体中文和大部分

00:24:28.366 --> 00:24:30.286 A:middle
当代日本文字的处理

00:24:30.286 --> 00:24:32.556 A:middle
也有很大改进

00:24:33.056 --> 00:24:35.146 A:middle
[掌声]

00:24:35.646 --> 00:24:37.736 A:middle
那就是改良后的字符串

00:24:38.036 --> 00:24:40.206 A:middle
更快  更易用

00:24:40.456 --> 00:24:41.176 A:middle
性能更强

00:24:42.646 --> 00:24:43.566 A:middle
我想说的第二个特性

00:24:43.566 --> 00:24:46.516 A:middle
就是让你们能够

00:24:46.516 --> 00:24:48.096 A:middle
轻松把 Swift  类型

00:24:48.786 --> 00:24:51.066 A:middle
转化成可编码的格式

00:24:51.066 --> 00:24:53.546 A:middle
例如 JSON 和属性列表

00:24:53.546 --> 00:24:55.096 A:middle
同时还提供了

00:24:55.136 --> 00:24:56.676 A:middle
自定义的机会

00:24:58.416 --> 00:25:01.116 A:middle
在 Swift 里  我们会用到值类型

00:24:58.416 --> 00:25:01.116 A:middle
在 Swift 里  我们会用到值类型

00:25:01.116 --> 00:25:02.766 A:middle
和引用类型

00:25:02.766 --> 00:25:04.556 A:middle
虽然 NSCoding 支持 class

00:25:04.556 --> 00:25:06.996 A:middle
但它对 struct 或者 enum 就无能为力了

00:25:08.296 --> 00:25:09.126 A:middle
这个新特性

00:25:09.156 --> 00:25:10.726 A:middle
能够支持上面所有类型

00:25:11.946 --> 00:25:12.776 A:middle
咱们看一下实际操作

00:25:13.156 --> 00:25:14.856 A:middle
我有一个简单的数值类型

00:25:15.356 --> 00:25:16.046 A:middle
这是一个结构

00:25:16.046 --> 00:25:16.676 A:middle
是一个表

00:25:17.156 --> 00:25:18.126 A:middle
有一些属性

00:25:18.756 --> 00:25:19.556 A:middle
我希望让它能够

00:25:19.556 --> 00:25:21.706 A:middle
被 JSON 属性列表编码和解码

00:25:23.196 --> 00:25:25.276 A:middle
我可以轻松做到这点

00:25:25.276 --> 00:25:27.856 A:middle
只要在一个叫做 Codable 的

00:25:28.126 --> 00:25:28.706 A:middle
新协议里添加一致性就好了

00:25:30.126 --> 00:25:32.376 A:middle
如果这个类型的属性

00:25:32.476 --> 00:25:34.086 A:middle
具有与 Codable 一致的类型

00:25:34.086 --> 00:25:35.806 A:middle
这就是所有

00:25:35.906 --> 00:25:38.206 A:middle
我需要写的代码了

00:25:38.206 --> 00:25:40.296 A:middle
因为与这个协议的一致性

00:25:40.296 --> 00:25:41.876 A:middle
已经被程序

00:25:41.876 --> 00:25:42.526 A:middle
合成了

00:25:43.516 --> 00:25:49.836 A:middle
[ 掌声 ]

00:25:50.336 --> 00:25:51.266 A:middle
它会按照你们的期待工作

00:25:51.266 --> 00:25:52.956 A:middle
我可以建立一个这个类型的值

00:25:53.006 --> 00:25:55.856 A:middle
只需要一行代码

00:25:55.856 --> 00:25:57.506 A:middle
我便可以把这个序列化到

00:25:57.506 --> 00:25:57.806 A:middle
JSON 上

00:25:58.516 --> 00:26:04.196 A:middle
[ 掌声 ]

00:25:58.516 --> 00:26:04.196 A:middle
[ 掌声 ]

00:26:04.696 --> 00:26:07.156 A:middle
一旦我有了 JSON 值

00:26:07.156 --> 00:26:08.996 A:middle
就能很轻易地重新建立它

00:26:08.996 --> 00:26:10.966 A:middle
只需一行代码

00:26:10.966 --> 00:26:13.026 A:middle
让它变回外来值

00:26:13.026 --> 00:26:15.016 A:middle
这也是 100% 安全的类型

00:26:16.516 --> 00:26:20.866 A:middle
[ 掌声 ]

00:26:21.366 --> 00:26:22.956 A:middle
非常简单  非常容易

00:26:23.826 --> 00:26:24.636 A:middle
我们认为你们一定会爱上它的

00:26:24.726 --> 00:26:26.356 A:middle
Swift 4 里有很多很棒的特性

00:26:26.386 --> 00:26:29.816 A:middle
我们也很满意

00:26:29.816 --> 00:26:31.386 A:middle
对于 Swift

00:26:31.386 --> 00:26:32.736 A:middle
所做的改进

00:26:33.406 --> 00:26:35.656 A:middle
在 Swift 4 中另一个重要的目标

00:26:35.656 --> 00:26:37.746 A:middle
就是我们想让所有的

00:26:37.776 --> 00:26:40.646 A:middle
特性都很容易上手

00:26:41.256 --> 00:26:44.026 A:middle
因此在 Xcode 9 里面

00:26:44.026 --> 00:26:45.976 A:middle
你可以搞定 Swift 3 的项目

00:26:46.616 --> 00:26:49.066 A:middle
然后不用做任何修改

00:26:49.066 --> 00:26:50.366 A:middle
就可以构建它们

00:26:51.656 --> 00:26:52.686 A:middle
这意味着你可以使用

00:26:52.686 --> 00:26:56.596 A:middle
最新的 OS 操作系统 工具

00:26:56.596 --> 00:26:58.036 A:middle
甚至是很多新的语言特性

00:26:58.036 --> 00:26:59.776 A:middle
而不必更改

00:26:59.776 --> 00:27:01.416 A:middle
你的代码

00:26:59.776 --> 00:27:01.416 A:middle
你的代码

00:27:02.326 --> 00:27:04.196 A:middle
这要怎么实现呢

00:27:05.926 --> 00:27:07.066 A:middle
在 Xcode 里  有一个构建是

00:27:07.066 --> 00:27:08.436 A:middle
设置 Swift 语言版本的功能

00:27:09.606 --> 00:27:11.706 A:middle
它有两个值 Swift 3.2 和

00:27:11.706 --> 00:27:14.686 A:middle
Swift 4.0

00:27:14.856 --> 00:27:16.296 A:middle
这意味着

00:27:16.296 --> 00:27:18.246 A:middle
一个程序能够支持

00:27:18.296 --> 00:27:19.276 A:middle
这两种不同的语言

00:27:19.316 --> 00:27:19.556 A:middle
模型

00:27:21.016 --> 00:27:22.376 A:middle
你能做的是

00:27:22.376 --> 00:27:24.076 A:middle
你可以有一个单一项目

00:27:24.076 --> 00:27:26.136 A:middle
混合搭配构建的目标

00:27:26.136 --> 00:27:28.276 A:middle
3.2 或者 4.0 都可以

00:27:28.786 --> 00:27:29.746 A:middle
还意味着你可以

00:27:29.746 --> 00:27:31.366 A:middle
有一个使用全新 Swift 4 特性

00:27:31.366 --> 00:27:33.416 A:middle
编写的 app 但仍然使用

00:27:33.416 --> 00:27:34.836 A:middle
Swift 3.2 构建的包

00:27:34.876 --> 00:27:36.306 A:middle
或者框架

00:27:37.206 --> 00:27:38.586 A:middle
这让你会很容易地

00:27:38.586 --> 00:27:40.026 A:middle
利用最新的 Swift 的

00:27:40.026 --> 00:27:41.236 A:middle
新特性

00:27:41.306 --> 00:27:44.146 A:middle
Swift 3.2 是什么呢

00:27:45.496 --> 00:27:46.246 A:middle
它是个语言模型

00:27:47.026 --> 00:27:47.876 A:middle
你基本上可以

00:27:47.876 --> 00:27:49.486 A:middle
不做修改  构建你的项目

00:27:50.936 --> 00:27:52.156 A:middle
你可以访问几乎所有

00:27:52.156 --> 00:27:52.986 A:middle
新的语言特性

00:27:52.986 --> 00:27:56.076 A:middle
字符串  编码  什么都行

00:27:56.076 --> 00:27:57.916 A:middle
你可以访问在 SDK 上的

00:27:58.216 --> 00:27:58.886 A:middle
所有 API

00:28:00.006 --> 00:28:01.456 A:middle
你唯一得不到的是

00:28:01.456 --> 00:28:02.916 A:middle
在现有的  你以前可能用过的

00:28:02.946 --> 00:28:04.986 A:middle
API 上  与 Swift 有关的

00:28:04.986 --> 00:28:05.836 A:middle
更新

00:28:06.476 --> 00:28:07.536 A:middle
因此你不用

00:28:07.536 --> 00:28:08.866 A:middle
修改项目就可以

00:28:08.866 --> 00:28:09.746 A:middle
轻松开始

00:28:10.346 --> 00:28:12.936 A:middle
要得到这些优势

00:28:12.936 --> 00:28:13.716 A:middle
这有一个 Swift 4 模型

00:28:14.566 --> 00:28:16.026 A:middle
你可以访问几乎

00:28:16.026 --> 00:28:16.866 A:middle
所有的新东西

00:28:17.426 --> 00:28:18.226 A:middle
还有很多新机会

00:28:18.226 --> 00:28:19.786 A:middle
去进一步改进

00:28:19.786 --> 00:28:21.226 A:middle
你的 app 的性能

00:28:21.786 --> 00:28:23.726 A:middle
包括减少

00:28:23.726 --> 00:28:24.246 A:middle
其占用空间

00:28:25.136 --> 00:28:25.966 A:middle
对于 Swift 开发者来说

00:28:26.016 --> 00:28:27.716 A:middle
在 SDK 里也有很多

00:28:27.716 --> 00:28:29.656 A:middle
很棒的升级

00:28:29.656 --> 00:28:31.006 A:middle
要利用它们

00:28:31.066 --> 00:28:32.746 A:middle
需要对你的代码做一些

00:28:32.746 --> 00:28:33.256 A:middle
迁移

00:28:33.256 --> 00:28:35.096 A:middle
这些是很重要的升级

00:28:35.536 --> 00:28:36.886 A:middle
是革命性的

00:28:36.886 --> 00:28:37.636 A:middle
改变

00:28:37.976 --> 00:28:39.646 A:middle
比起从 Swift 2 到 Swift 3 的

00:28:39.646 --> 00:28:41.696 A:middle
大刀阔斧

00:28:41.696 --> 00:28:43.526 A:middle
从 Swift 3 到 Swift 4 的变化其实很

00:28:43.526 --> 00:28:43.936 A:middle
简单

00:28:45.636 --> 00:28:46.866 A:middle
我们很开心 大家

00:28:46.866 --> 00:28:48.216 A:middle
对 Swift 投入了这么多精力

00:28:48.216 --> 00:28:49.436 A:middle
我们看到这样的

00:28:49.506 --> 00:28:51.236 A:middle
投入越来越多

00:28:51.236 --> 00:28:53.776 A:middle
Swift 项目的规模也同时

00:28:54.086 --> 00:28:55.476 A:middle
在增长  对吧

00:28:55.476 --> 00:28:56.476 A:middle
人们在用 Swift 写更多的代码

00:28:57.866 --> 00:28:59.796 A:middle
我们意识到这很重要

00:28:59.796 --> 00:29:01.616 A:middle
我们需要把力量

00:28:59.796 --> 00:29:01.616 A:middle
我们需要把力量

00:29:01.616 --> 00:29:02.806 A:middle
集中到工具改良上

00:29:03.436 --> 00:29:05.786 A:middle
所以我们致力于两个方面

00:29:05.786 --> 00:29:07.376 A:middle
来缩短大型项目的

00:29:07.376 --> 00:29:08.236 A:middle
构建时间

00:29:09.076 --> 00:29:10.836 A:middle
首先是混合搭配

00:29:10.836 --> 00:29:12.796 A:middle
Objective-C 和 Swift 项目

00:29:14.516 --> 00:29:18.106 A:middle
[ 掌声 ]

00:29:18.606 --> 00:29:19.916 A:middle
通过预编码 bridging header

00:29:19.916 --> 00:29:21.266 A:middle
我们在构建时间上获得了

00:29:21.266 --> 00:29:23.006 A:middle
40% 的提升

00:29:23.006 --> 00:29:24.216 A:middle
特别是有关 debug 的构建

00:29:24.216 --> 00:29:25.326 A:middle
我们在编写自己的

00:29:25.326 --> 00:29:26.626 A:middle
音乐 app 上已经见证了这种提升

00:29:27.376 --> 00:29:29.996 A:middle
同样  如果你在使用

00:29:29.996 --> 00:29:32.436 A:middle
全模型优化

00:29:32.436 --> 00:29:34.176 A:middle
我们极大地提高了程序

00:29:34.176 --> 00:29:35.186 A:middle
和构建系统的并行优化

00:29:35.186 --> 00:29:37.376 A:middle
你可以看到

00:29:37.376 --> 00:29:38.726 A:middle
构建时间

00:29:38.726 --> 00:29:40.076 A:middle
多达2倍的提升

00:29:41.316 --> 00:29:42.996 A:middle
这个优化非常重要

00:29:42.996 --> 00:29:45.596 A:middle
我们不想等到 Xcode 9 了

00:29:45.596 --> 00:29:47.356 A:middle
因此我们有些激进地

00:29:47.356 --> 00:29:48.476 A:middle
在 Xcode 8.3.2

00:29:48.476 --> 00:29:50.996 A:middle
就发布了

00:29:51.716 --> 00:29:53.256 A:middle
因此你们很多人

00:29:53.256 --> 00:29:54.486 A:middle
都已经体验过这一构建提升

00:29:54.956 --> 00:29:56.176 A:middle
带来的好处了

00:29:56.646 --> 00:29:58.116 A:middle
至于那些还没有

00:29:58.116 --> 00:29:58.956 A:middle
使用过全模块优化的人

00:29:58.956 --> 00:30:01.116 A:middle
我强烈建议你们去

00:29:58.956 --> 00:30:01.116 A:middle
我强烈建议你们去

00:30:01.116 --> 00:30:02.776 A:middle
试一试  因为它真的

00:30:02.776 --> 00:30:03.306 A:middle
很厉害

00:30:04.266 --> 00:30:06.536 A:middle
这些只是 Swift 4 里

00:30:06.536 --> 00:30:08.126 A:middle
的冰山一角

00:30:08.536 --> 00:30:09.446 A:middle
我们相信你们一定会爱上它

00:30:09.546 --> 00:30:12.636 A:middle
现在我把时间还给

00:30:12.636 --> 00:30:12.976 A:middle
Matthew

00:30:14.516 --> 00:30:17.316 A:middle
[ 掌声 ]

00:30:17.816 --> 00:30:18.236 A:middle
&gt;&gt;  多谢 Ted

00:30:19.476 --> 00:30:21.396 A:middle
Xcode 的另一个关键特色是

00:30:21.396 --> 00:30:23.266 A:middle
我们的核心技术

00:30:23.266 --> 00:30:24.816 A:middle
我想从索引讲起

00:30:25.856 --> 00:30:27.806 A:middle
我们的源码和文本索引

00:30:27.806 --> 00:30:29.196 A:middle
为许多工作流提供了后端支持

00:30:29.196 --> 00:30:31.116 A:middle
比如导航

00:30:31.166 --> 00:30:32.696 A:middle
搜索和重构

00:30:33.356 --> 00:30:34.456 A:middle
在 Xcode 9 里

00:30:34.456 --> 00:30:35.856 A:middle
我们重新搭建了它们  现在它们

00:30:35.856 --> 00:30:37.806 A:middle
可以存储更多数据  性能也更强了

00:30:39.176 --> 00:30:40.456 A:middle
实际上  你会看到

00:30:40.456 --> 00:30:42.556 A:middle
Open Quickly 这样的工作流

00:30:42.556 --> 00:30:43.926 A:middle
在你的项目上打开的速度比以前快 35 倍

00:30:46.456 --> 00:30:47.846 A:middle
在大型项目中查找速度

00:30:47.846 --> 00:30:49.366 A:middle
比以前快 50 倍

00:30:50.516 --> 00:30:53.546 A:middle
[ 掌声 ]

00:30:54.046 --> 00:30:55.616 A:middle
所以我们的新的索引真的改变了很多

00:30:57.006 --> 00:30:58.416 A:middle
除此之外  Xcode 9 还会

00:30:58.416 --> 00:31:00.426 A:middle
在搭建的同时包含索引

00:30:58.416 --> 00:31:00.426 A:middle
在搭建的同时包含索引

00:31:01.276 --> 00:31:02.406 A:middle
Xcode 同样也会在后台索引

00:31:04.516 --> 00:31:07.606 A:middle
[ 掌声 ]

00:31:08.106 --> 00:31:09.256 A:middle
Xcode 会在后台索引

00:31:09.256 --> 00:31:10.566 A:middle
但是  在你构建的时候

00:31:10.566 --> 00:31:12.096 A:middle
它会利用已完成的工作

00:31:12.096 --> 00:31:13.586 A:middle
去生成和

00:31:13.586 --> 00:31:15.086 A:middle
更新索引

00:31:15.436 --> 00:31:16.366 A:middle
所以在你完成构建后

00:31:16.596 --> 00:31:18.336 A:middle
索引也更新完毕了

00:31:18.336 --> 00:31:19.836 A:middle
所有相关功能

00:31:19.836 --> 00:31:21.106 A:middle
都以前所未有的快速可以为你所用了

00:31:22.516 --> 00:31:26.256 A:middle
[ 掌声 ]

00:31:26.756 --> 00:31:27.996 A:middle
我们的构建系统

00:31:28.106 --> 00:31:29.886 A:middle
也是很关键的

00:31:30.006 --> 00:31:31.906 A:middle
我们花大力气在它身上

00:31:31.906 --> 00:31:33.156 A:middle
提升性能

00:31:33.226 --> 00:31:35.156 A:middle
添加特性  让它支持未来的目标

00:31:36.236 --> 00:31:37.156 A:middle
我很兴奋地与大家分享

00:31:37.156 --> 00:31:39.476 A:middle
我们有了一个新的构建系统

00:31:41.196 --> 00:31:42.736 A:middle
我们的新构建系统是由 Swift 写成的

00:31:42.776 --> 00:31:44.746 A:middle
它在我们的开源

00:31:44.746 --> 00:31:46.596 A:middle
低层级构建系统 llbuild 的上层

00:31:47.376 --> 00:31:49.336 A:middle
它使用一个现代化的

00:31:49.336 --> 00:31:50.586 A:middle
前瞻性的结构

00:31:50.586 --> 00:31:52.176 A:middle
实现了很多重大提升

00:31:54.266 --> 00:31:55.296 A:middle
我们的新构建系统

00:31:55.296 --> 00:31:56.646 A:middle
使用程序隔离  有一个

00:31:56.646 --> 00:31:58.296 A:middle
统一的依赖性图标

00:31:58.296 --> 00:32:00.046 A:middle
还有提升的配置分析

00:31:58.296 --> 00:32:00.046 A:middle
还有提升的配置分析

00:32:01.646 --> 00:32:02.646 A:middle
我们还使用了新结构

00:32:02.646 --> 00:32:04.096 A:middle
去增强并联和缓存

00:32:04.146 --> 00:32:06.116 A:middle
以此来缩短

00:32:06.116 --> 00:32:07.326 A:middle
整体构建时间

00:32:08.106 --> 00:32:09.186 A:middle
我想深入讲解一下

00:32:10.796 --> 00:32:12.456 A:middle
构建过程包括

00:32:12.456 --> 00:32:13.136 A:middle
两大块

00:32:13.136 --> 00:32:14.866 A:middle
也就是负责管理和协调

00:32:14.866 --> 00:32:16.296 A:middle
任务的构建系统

00:32:16.846 --> 00:32:18.266 A:middle
以及构建工具

00:32:18.266 --> 00:32:19.266 A:middle
比如 compiler 和 linker

00:32:20.026 --> 00:32:21.036 A:middle
两者一起构成了

00:32:21.036 --> 00:32:21.906 A:middle
整体构建时间

00:32:23.166 --> 00:32:23.826 A:middle
这些部分的工作量

00:32:23.826 --> 00:32:25.626 A:middle
随着你项目规模的扩大

00:32:25.626 --> 00:32:26.146 A:middle
而增加

00:32:26.786 --> 00:32:28.026 A:middle
项目越大  每个部分的

00:32:28.026 --> 00:32:29.356 A:middle
工作量也就越大

00:32:31.476 --> 00:32:32.986 A:middle
这个视图代表了整体构建

00:32:33.846 --> 00:32:35.326 A:middle
但在大多数时候

00:32:35.326 --> 00:32:36.396 A:middle
我们要循序渐进地构建项目

00:32:36.396 --> 00:32:37.916 A:middle
每次只改变一小部分

00:32:37.966 --> 00:32:38.796 A:middle
文件

00:32:39.746 --> 00:32:40.946 A:middle
这时  构建工具的

00:32:40.946 --> 00:32:42.666 A:middle
工作量就很小

00:32:43.166 --> 00:32:44.316 A:middle
对于大型项目来说

00:32:44.426 --> 00:32:45.816 A:middle
还有很多细节要

00:32:45.816 --> 00:32:46.236 A:middle
管理

00:32:47.206 --> 00:32:48.636 A:middle
这是我们在 Xcode 9 中集中发力的

00:32:48.736 --> 00:32:49.566 A:middle
一个环节

00:32:49.946 --> 00:32:51.376 A:middle
在我们的新构建系统中

00:32:51.376 --> 00:32:52.666 A:middle
我们让构建操作

00:32:52.666 --> 00:32:54.476 A:middle
比以前快了

00:32:54.476 --> 00:32:55.096 A:middle
2.5 倍

00:32:55.096 --> 00:32:57.596 A:middle
如果你再加上

00:32:57.866 --> 00:33:00.606 A:middle
是的  它很快[笑声]

00:32:57.866 --> 00:33:00.606 A:middle
是的  它很快[笑声]

00:33:00.606 --> 00:33:01.816 A:middle
如果你再加上刚才说到的

00:33:01.816 --> 00:33:03.796 A:middle
混合搭配项目的编程

00:33:03.796 --> 00:33:05.536 A:middle
过程中提升的 40%

00:33:05.536 --> 00:33:07.476 A:middle
那么你就会看到

00:33:07.476 --> 00:33:09.336 A:middle
在构建中使用 Xcode 9

00:33:09.336 --> 00:33:10.476 A:middle
新的构建系统比

00:33:10.736 --> 00:33:11.696 A:middle
原来的版本的提升

00:33:11.696 --> 00:33:11.906 A:middle
是非常大的

00:33:13.906 --> 00:33:14.716 A:middle
新构建系统

00:33:14.716 --> 00:33:16.036 A:middle
设计时就考虑到要和你们的项目

00:33:16.036 --> 00:33:17.556 A:middle
兼容  在 Xcode 9 里

00:33:17.556 --> 00:33:19.076 A:middle
有一个预览

00:33:20.096 --> 00:33:21.506 A:middle
你可以在工作空间设置

00:33:21.506 --> 00:33:23.276 A:middle
中选择尝试它

00:33:23.276 --> 00:33:24.316 A:middle
很快我们就会把它设成

00:33:24.316 --> 00:33:26.186 A:middle
默认构建系统了

00:33:27.446 --> 00:33:29.096 A:middle
另外一项我们大力投入的核心技术

00:33:29.096 --> 00:33:30.886 A:middle
就是源码控制

00:33:30.886 --> 00:33:32.386 A:middle
我很好奇

00:33:32.416 --> 00:33:32.966 A:middle
请举一下手

00:33:33.056 --> 00:33:34.416 A:middle
有多少人有 GitHub

00:33:35.326 --> 00:33:35.516 A:middle
账户

00:33:36.036 --> 00:33:37.476 A:middle
好的

00:33:38.286 --> 00:33:40.236 A:middle
Craig 举手了

00:33:41.306 --> 00:33:42.996 A:middle
你们绝不是一个人

00:33:43.186 --> 00:33:43.966 A:middle
因为我们在 GitHub 的好朋友

00:33:43.966 --> 00:33:45.736 A:middle
告诉我们  在桌面上

00:33:45.736 --> 00:33:48.086 A:middle
三分之二的 pull request

00:33:48.086 --> 00:33:49.386 A:middle
相关的行为都

00:33:49.646 --> 00:33:50.786 A:middle
来自于 Mac

00:33:52.126 --> 00:33:53.456 A:middle
因此我们认为这里

00:33:53.456 --> 00:33:55.186 A:middle
可以下些功夫

00:33:55.186 --> 00:33:56.136 A:middle
因此我们把

00:33:56.136 --> 00:33:58.046 A:middle
GitHub.com 和 GitHub Enterprise

00:33:58.326 --> 00:33:59.186 A:middle
集成到了 Xcode 9 里

00:34:00.516 --> 00:34:06.746 A:middle
[ 掌声 ]

00:34:07.246 --> 00:34:08.366 A:middle
在你添加 GitHub 账户后

00:34:08.366 --> 00:34:10.386 A:middle
你可以使用 Xcode 的新

00:34:10.516 --> 00:34:12.186 A:middle
Clone 工作流了  它展示了

00:34:12.186 --> 00:34:13.876 A:middle
你在 GitHub 上的所有项目

00:34:13.876 --> 00:34:14.815 A:middle
和搜索结果

00:34:15.696 --> 00:34:17.116 A:middle
你可以添加星标

00:34:17.156 --> 00:34:19.126 A:middle
查看项目细节

00:34:19.126 --> 00:34:20.746 A:middle
甚至在访问项目之前就查看 Readme

00:34:20.746 --> 00:34:21.136 A:middle
文件

00:34:22.335 --> 00:34:24.025 A:middle
一旦你 clone 了一个项目

00:34:24.025 --> 00:34:25.716 A:middle
你就能用 Xcode 的新

00:34:25.716 --> 00:34:27.826 A:middle
源码控制导航

00:34:27.826 --> 00:34:28.946 A:middle
这展示了你的所有

00:34:28.946 --> 00:34:30.466 A:middle
副本  包括分支

00:34:30.516 --> 00:34:33.166 A:middle
标签 remote

00:34:33.166 --> 00:34:34.466 A:middle
push 和 pull count 这些细节

00:34:35.505 --> 00:34:37.025 A:middle
这只是我们为你准备的

00:34:37.025 --> 00:34:38.386 A:middle
一系列特别出色的新

00:34:38.386 --> 00:34:39.505 A:middle
源码控制工作流的一个开始

00:34:40.065 --> 00:34:41.096 A:middle
更多内容 我要请上

00:34:41.096 --> 00:34:42.306 A:middle
Mike Ferris 来为大家

00:34:42.306 --> 00:34:43.005 A:middle
做一个展示

00:34:44.516 --> 00:34:48.616 A:middle
[ 掌声 ]

00:34:49.116 --> 00:34:50.596 A:middle
&gt;&gt;  嗨  谢谢 Matthew

00:34:51.096 --> 00:34:53.346 A:middle
大家好  我今天要展示一些

00:34:53.346 --> 00:34:55.626 A:middle
在 Xcode 里使用源码控制的

00:34:55.626 --> 00:34:57.005 A:middle
一些很棒的新方式

00:34:58.066 --> 00:34:59.266 A:middle
咱们就从 GitHub 开始吧

00:35:01.196 --> 00:35:03.116 A:middle
我已经连上了

00:35:03.116 --> 00:35:04.646 A:middle
这个新的 clone 窗口

00:35:04.646 --> 00:35:06.336 A:middle
我的 GitHub 库就在中间

00:35:08.176 --> 00:35:09.796 A:middle
现在我想要找到

00:35:09.796 --> 00:35:11.356 A:middle
Swift Foundation Project

00:35:11.356 --> 00:35:12.976 A:middle
所以我在 GitHub 上搜索

00:35:18.966 --> 00:35:19.936 A:middle
好的  找到了

00:35:20.366 --> 00:35:23.486 A:middle
咱们把它 clone 一下

00:35:24.276 --> 00:35:26.156 A:middle
一旦 clone 完成

00:35:26.156 --> 00:35:27.216 A:middle
我们就打开项目

00:35:28.546 --> 00:35:29.876 A:middle
我的朋友 Felipe 总说

00:35:29.876 --> 00:35:31.226 A:middle
数据类最近有了些

00:35:31.226 --> 00:35:32.626 A:middle
新变化  我去

00:35:32.626 --> 00:35:33.446 A:middle
看一看

00:35:35.326 --> 00:35:37.016 A:middle
新的源码控制导航

00:35:37.156 --> 00:35:38.896 A:middle
允许我浏览项目

00:35:40.556 --> 00:35:42.436 A:middle
我可以选择当前分支

00:35:42.436 --> 00:35:43.896 A:middle
显示它的历史  我看到

00:35:43.896 --> 00:35:45.966 A:middle
所有的提交记录

00:35:45.966 --> 00:35:48.256 A:middle
包括提交者的头像

00:35:48.976 --> 00:35:50.796 A:middle
和标签等注释内容

00:35:53.166 --> 00:35:55.136 A:middle
我可以根据提交者或是提交信息

00:35:55.136 --> 00:35:57.116 A:middle
筛选提交记录

00:35:57.836 --> 00:36:01.936 A:middle
我先找 Felipe 的提交

00:35:57.836 --> 00:36:01.936 A:middle
我先找 Felipe 的提交

00:36:01.936 --> 00:36:02.806 A:middle
然后在进一步缩小范围

00:36:02.806 --> 00:36:04.356 A:middle
只看关于 Beta

00:36:04.356 --> 00:36:05.366 A:middle
的提交记录

00:36:06.766 --> 00:36:09.396 A:middle
这就是我在找的

00:36:09.426 --> 00:36:10.006 A:middle
提交记录

00:36:11.666 --> 00:36:13.066 A:middle
我双击一个提交记录

00:36:13.066 --> 00:36:14.476 A:middle
就进入新的提交视图

00:36:14.616 --> 00:36:15.746 A:middle
在这里我可以看到

00:36:15.746 --> 00:36:16.636 A:middle
真实的代码变化

00:36:17.436 --> 00:36:18.856 A:middle
浏览历史非常容易

00:36:18.856 --> 00:36:20.996 A:middle
查找特定的提交记录也不难

00:36:23.956 --> 00:36:25.856 A:middle
现在  我还可以在改动的同时

00:36:25.996 --> 00:36:27.386 A:middle
无缝使用源码控制

00:36:27.386 --> 00:36:28.916 A:middle
我还有另一个需要

00:36:28.916 --> 00:36:30.386 A:middle
稍作修改的项目

00:36:30.796 --> 00:36:31.576 A:middle
现在我把它打开

00:36:31.576 --> 00:36:37.036 A:middle
在开始前  我要做一个

00:36:37.036 --> 00:36:37.866 A:middle
分支

00:36:39.436 --> 00:36:40.436 A:middle
在新的源码控制导航中

00:36:40.436 --> 00:36:42.806 A:middle
我要使用 Context 菜单

00:36:42.806 --> 00:36:44.086 A:middle
制作一个分支  名字叫

00:36:44.086 --> 00:36:44.606 A:middle
"master"

00:36:49.106 --> 00:36:51.416 A:middle
好的  新的分支弄好了

00:36:51.416 --> 00:36:52.546 A:middle
我可以开始了

00:36:54.316 --> 00:36:55.576 A:middle
在我的项目里  我想让

00:36:55.576 --> 00:36:57.026 A:middle
群组与文件夹相匹配

00:36:57.026 --> 00:36:58.886 A:middle
这个项目已经这样

00:36:58.886 --> 00:37:00.066 A:middle
设定好了

00:36:58.886 --> 00:37:00.066 A:middle
设定好了

00:37:00.686 --> 00:37:02.046 A:middle
但让我不爽的是

00:37:02.046 --> 00:37:03.846 A:middle
这两个相机模型类

00:37:03.946 --> 00:37:05.186 A:middle
在错误的群组里

00:37:07.006 --> 00:37:09.146 A:middle
不过这不要紧

00:37:09.146 --> 00:37:10.516 A:middle
因为现在我把这些文件

00:37:10.516 --> 00:37:13.346 A:middle
移动到正确的群组后

00:37:13.396 --> 00:37:14.816 A:middle
Xcode 就会自动把它们移动到正确的

00:37:14.906 --> 00:37:15.286 A:middle
文件夹了

00:37:16.516 --> 00:37:24.316 A:middle
[ 掌声 ]

00:37:24.816 --> 00:37:26.346 A:middle
在群组和文件夹的层级

00:37:26.346 --> 00:37:27.916 A:middle
是一样的项目里面

00:37:27.916 --> 00:37:29.266 A:middle
Xcode 会让它们保持一致

00:37:31.356 --> 00:37:34.336 A:middle
我提交时  所有的更改

00:37:34.336 --> 00:37:36.446 A:middle
都会被记录  因此

00:37:36.446 --> 00:37:37.466 A:middle
我会继续提交

00:37:37.466 --> 00:37:41.026 A:middle
我想我已经准备好

00:37:41.026 --> 00:37:41.956 A:middle
完成这个分支了

00:37:43.506 --> 00:37:44.516 A:middle
回到源码控制导航上面

00:37:44.516 --> 00:37:46.316 A:middle
我会选择

00:37:46.316 --> 00:37:48.436 A:middle
目的分支  并再次使用

00:37:48.436 --> 00:37:50.576 A:middle
Context 菜单融入

00:37:50.576 --> 00:37:52.116 A:middle
我的工作分支的更改

00:37:52.736 --> 00:37:54.806 A:middle
这就完成了

00:37:54.896 --> 00:37:56.696 A:middle
我看到我的新提交

00:37:56.696 --> 00:37:58.896 A:middle
已经在主分支上了

00:37:58.896 --> 00:37:59.936 A:middle
我想我准备好首个

00:37:59.936 --> 00:38:00.566 A:middle
beta  发布了

00:37:59.936 --> 00:38:00.566 A:middle
beta  发布了

00:38:01.356 --> 00:38:02.696 A:middle
因此我也许应该做一个标签

00:38:03.626 --> 00:38:05.926 A:middle
我可以在这里用 Context 菜单

00:38:05.926 --> 00:38:07.576 A:middle
为任何提交做标签

00:38:08.776 --> 00:38:11.956 A:middle
好了  我想我可以分享它了

00:38:13.236 --> 00:38:14.716 A:middle
现在  这个项目还没有到

00:38:14.716 --> 00:38:16.686 A:middle
GitHub 上面  但我可以很容易

00:38:16.686 --> 00:38:17.026 A:middle
把它放上去

00:38:18.526 --> 00:38:20.026 A:middle
我只需选择  生成一个

00:38:20.026 --> 00:38:20.836 A:middle
GitHub remote

00:38:22.356 --> 00:38:23.596 A:middle
所有默认看上去都不错

00:38:23.596 --> 00:38:24.736 A:middle
可以开始了

00:38:25.636 --> 00:38:27.316 A:middle
Xcode 现在正在 GitHub 上面

00:38:27.316 --> 00:38:29.276 A:middle
生成一个项目

00:38:29.276 --> 00:38:31.046 A:middle
并把我的库及其完整历史推上去

00:38:32.266 --> 00:38:33.976 A:middle
现在  我的项目已经在

00:38:33.976 --> 00:38:34.356 A:middle
GitHub 上了

00:38:35.596 --> 00:38:37.016 A:middle
我有一个新的源 remote 了

00:38:37.836 --> 00:38:39.076 A:middle
我可以从这里直接跳到

00:38:39.076 --> 00:38:40.546 A:middle
GitHub.com 的

00:38:40.546 --> 00:38:43.006 A:middle
项目页面上

00:38:43.216 --> 00:38:43.826 A:middle
完成了

00:38:45.146 --> 00:38:46.386 A:middle
我们和 GitHub 的朋友们

00:38:46.386 --> 00:38:48.106 A:middle
在这个集成上面并肩奋斗

00:38:48.106 --> 00:38:50.896 A:middle
GitHub.com 也有一个

00:38:50.896 --> 00:38:52.456 A:middle
非常棒的新特性

00:38:53.556 --> 00:38:55.336 A:middle
Xcode 用户现在可以直接

00:38:55.336 --> 00:38:58.196 A:middle
使用这个新的 Open in Xcode 按钮

00:38:58.196 --> 00:38:59.716 A:middle
在 Xcode 里面 clone 并打开了

00:39:01.516 --> 00:39:07.386 A:middle
[ 掌声 ]

00:39:07.886 --> 00:39:09.846 A:middle
这就是 Xcode 9 里的源码控制

00:39:09.846 --> 00:39:11.476 A:middle
和 GitHub 内容

00:39:12.496 --> 00:39:12.906 A:middle
Matthew

00:39:14.516 --> 00:39:17.736 A:middle
[ 掌声 ]

00:39:18.236 --> 00:39:18.736 A:middle
&gt;&gt;  谢谢 Mike

00:39:19.846 --> 00:39:21.336 A:middle
Xcode 9 还包括很多

00:39:21.336 --> 00:39:22.726 A:middle
在 debug 和 runtime 分析工具

00:39:22.846 --> 00:39:24.326 A:middle
上的更新

00:39:24.846 --> 00:39:25.916 A:middle
我想先讲视图 debug 工具

00:39:27.466 --> 00:39:28.466 A:middle
视图控制器在 UI 开发中

00:39:28.466 --> 00:39:29.866 A:middle
的角色非常重要

00:39:29.866 --> 00:39:31.276 A:middle
所以我们要

00:39:31.276 --> 00:39:32.456 A:middle
把它包含到视图 debug

00:39:32.456 --> 00:39:33.416 A:middle
体验中去

00:39:34.406 --> 00:39:35.726 A:middle
Captures 现在会在层级中

00:39:35.726 --> 00:39:37.806 A:middle
包含视图控制

00:39:37.806 --> 00:39:39.326 A:middle
并在它们管理的视图之上

00:39:39.326 --> 00:39:40.456 A:middle
把它描绘出来

00:39:41.176 --> 00:39:42.026 A:middle
这会帮助你导航

00:39:42.026 --> 00:39:43.886 A:middle
并帮助你理解

00:39:43.886 --> 00:39:45.246 A:middle
你的视图控制边界

00:39:46.866 --> 00:39:48.216 A:middle
视图 debug 工具

00:39:48.216 --> 00:39:50.146 A:middle
还会包括 SpriteKit 场景的细节

00:39:50.276 --> 00:39:52.026 A:middle
视图 debug 工具是

00:39:52.026 --> 00:39:53.636 A:middle
扩展并反转你的场景

00:39:53.636 --> 00:39:55.226 A:middle
范围  甚至查看裁剪区域

00:39:55.226 --> 00:39:57.086 A:middle
的完美方式

00:39:59.176 --> 00:40:00.396 A:middle
我们还包含了对

00:39:59.176 --> 00:40:00.396 A:middle
我们还包含了对

00:40:00.566 --> 00:40:01.816 A:middle
SceneKit 场景的支持

00:40:02.456 --> 00:40:03.326 A:middle
你可以用熟悉的

00:40:03.376 --> 00:40:05.256 A:middle
SceneKit 编辑器去

00:40:05.256 --> 00:40:07.446 A:middle
反转相机  导航

00:40:07.446 --> 00:40:08.306 A:middle
检查对象

00:40:09.256 --> 00:40:10.886 A:middle
视图控制器的 SpriteKit

00:40:10.986 --> 00:40:12.476 A:middle
和 SceneKit 现在都

00:40:12.476 --> 00:40:13.616 A:middle
被加入了视觉 debug 工作中

00:40:13.616 --> 00:40:13.936 A:middle
这很棒

00:40:15.516 --> 00:40:20.026 A:middle
[ 掌声 ]

00:40:20.526 --> 00:40:21.696 A:middle
在过去几年中

00:40:21.696 --> 00:40:23.826 A:middle
我们加入了 runtime 清理工具

00:40:23.826 --> 00:40:25.286 A:middle
在 debug 体验中

00:40:25.286 --> 00:40:27.026 A:middle
它们在帮助找出错误这方面

00:40:27.026 --> 00:40:28.586 A:middle
获得了很大成功

00:40:29.436 --> 00:40:30.676 A:middle
除了两个已有的清理工具

00:40:30.676 --> 00:40:32.396 A:middle
的改进之外

00:40:32.736 --> 00:40:34.396 A:middle
今年  我们又加入了两个

00:40:34.396 --> 00:40:36.706 A:middle
runtime 分析工具

00:40:36.706 --> 00:40:38.556 A:middle
Undefined Behavior Sanitizer 和

00:40:38.556 --> 00:40:40.356 A:middle
Main Thread API Checker

00:40:42.476 --> 00:40:44.136 A:middle
编程语言有一些

00:40:44.206 --> 00:40:45.776 A:middle
未定义行为  比如

00:40:45.776 --> 00:40:46.746 A:middle
如何处理偏离的指针

00:40:46.786 --> 00:40:48.376 A:middle
以及遇到带符号整数

00:40:48.376 --> 00:40:49.746 A:middle
溢出时该怎么办

00:40:50.486 --> 00:40:51.806 A:middle
在这些情况出现时

00:40:52.026 --> 00:40:53.016 A:middle
会非常难以

00:40:53.016 --> 00:40:53.376 A:middle
debug

00:40:54.466 --> 00:40:56.056 A:middle
Undefined Behavior Sanitizer

00:40:56.096 --> 00:40:58.116 A:middle
能够抓取很多类似情景

00:40:58.116 --> 00:40:59.446 A:middle
并显示细节  以帮助你

00:40:59.446 --> 00:40:59.976 A:middle
调查

00:41:00.506 --> 00:41:03.546 A:middle
你们一定会爱上

00:41:03.546 --> 00:41:04.786 A:middle
Main Thread API Checker

00:41:05.606 --> 00:41:07.626 A:middle
从后台线程调用 UI 相关的 API

00:41:07.626 --> 00:41:09.436 A:middle
这是一个常见错误

00:41:09.436 --> 00:41:11.366 A:middle
可能会导致视觉缺陷

00:41:11.366 --> 00:41:13.296 A:middle
和随机崩溃的情况

00:41:14.236 --> 00:41:15.756 A:middle
Main Thread API Checker

00:41:15.976 --> 00:41:18.086 A:middle
能够捕捉到未被主线程调用的

00:41:18.456 --> 00:41:20.146 A:middle
AppKit 和 UIKit API

00:41:21.236 --> 00:41:22.446 A:middle
然后显示错误  帮助你

00:41:22.446 --> 00:41:22.986 A:middle
调查

00:41:24.516 --> 00:41:30.106 A:middle
[ 掌声 ]

00:41:30.606 --> 00:41:32.056 A:middle
我们超爱这一点  于是

00:41:32.056 --> 00:41:33.506 A:middle
把它设成默认启动了

00:41:33.916 --> 00:41:34.836 A:middle
所以在你开始用 Xcode 9

00:41:34.836 --> 00:41:36.176 A:middle
debug 时  会自动获取

00:41:36.176 --> 00:41:37.096 A:middle
这一行为

00:41:38.196 --> 00:41:39.796 A:middle
我们两个新的 runtime

00:41:39.796 --> 00:41:41.396 A:middle
清理器在你的计划的

00:41:41.396 --> 00:41:43.126 A:middle
Diagnostic Options 中可以找到

00:41:43.126 --> 00:41:44.766 A:middle
所有的诊断工具

00:41:44.766 --> 00:41:46.266 A:middle
都可以在运行和测试设置中

00:41:46.296 --> 00:41:48.226 A:middle
找到

00:41:48.826 --> 00:41:50.346 A:middle
这让它们可以很完美地契合

00:41:50.346 --> 00:41:52.466 A:middle
持续集成使用

00:41:52.466 --> 00:41:54.216 A:middle
这就引出了我们的

00:41:54.216 --> 00:41:55.006 A:middle
下一个部分

00:41:56.636 --> 00:41:57.536 A:middle
我们相信  持续集成

00:41:57.536 --> 00:41:59.166 A:middle
是开发伟大软件的

00:41:59.276 --> 00:42:00.816 A:middle
重要关键

00:41:59.276 --> 00:42:00.816 A:middle
重要关键

00:42:00.866 --> 00:42:02.216 A:middle
让我们

00:42:02.216 --> 00:42:04.096 A:middle
使用 Xcode Server 变得更容易

00:42:04.096 --> 00:42:04.806 A:middle
我们把所有的功能

00:42:04.806 --> 00:42:06.526 A:middle
都放在了 Xcode 里面

00:42:07.016 --> 00:42:08.356 A:middle
你们不再需要安装

00:42:08.536 --> 00:42:09.506 A:middle
macOS 服务器 app 了

00:42:11.516 --> 00:42:15.526 A:middle
[ 掌声 ]

00:42:16.026 --> 00:42:17.536 A:middle
在 Preferences 中

00:42:17.536 --> 00:42:19.196 A:middle
一个新的  简化的 UI

00:42:19.196 --> 00:42:21.136 A:middle
只需点击几下就能开始

00:42:21.136 --> 00:42:22.396 A:middle
我们还集成了预备工作流

00:42:22.396 --> 00:42:24.246 A:middle
包括自动和手动

00:42:24.246 --> 00:42:25.596 A:middle
代码签字

00:42:25.596 --> 00:42:26.966 A:middle
让你的配置加速

00:42:28.516 --> 00:42:29.526 A:middle
在测试方面

00:42:29.526 --> 00:42:30.996 A:middle
我们集成了一个流行的请求

00:42:31.286 --> 00:42:33.266 A:middle
就是支持测试多个

00:42:33.266 --> 00:42:33.916 A:middle
app

00:42:35.166 --> 00:42:37.066 A:middle
你们的 UI 测试现在可以

00:42:37.066 --> 00:42:39.206 A:middle
分支到很多其他 app 上去

00:42:39.206 --> 00:42:41.106 A:middle
这对 app 扩展  设置

00:42:41.106 --> 00:42:43.036 A:middle
和其他的集成工作流来说

00:42:43.296 --> 00:42:44.686 A:middle
是很好的改进

00:42:46.056 --> 00:42:47.176 A:middle
此外  你们还会发现

00:42:47.176 --> 00:42:48.756 A:middle
我们还加强了

00:42:48.756 --> 00:42:49.796 A:middle
UI 测试的性能

00:42:50.746 --> 00:42:52.326 A:middle
UI 测试询问

00:42:52.326 --> 00:42:53.556 A:middle
的运行速度比以前快3倍

00:42:54.486 --> 00:42:57.086 A:middle
如果你采用了新的询问 API

00:42:57.316 --> 00:42:58.986 A:middle
那么你自己的测试速度

00:42:59.026 --> 00:43:00.526 A:middle
将比以前快 10 倍

00:42:59.026 --> 00:43:00.526 A:middle
将比以前快 10 倍

00:43:02.516 --> 00:43:06.026 A:middle
[ 掌声 ]

00:43:06.526 --> 00:43:08.116 A:middle
但我们不止如此

00:43:08.116 --> 00:43:09.296 A:middle
你还会发现使用

00:43:09.326 --> 00:43:11.026 A:middle
xcodebuild 测试  现在已经默认

00:43:11.026 --> 00:43:12.966 A:middle
在多个目的之间同时

00:43:12.966 --> 00:43:13.746 A:middle
运行了

00:43:15.516 --> 00:43:18.916 A:middle
[ 掌声 ]

00:43:19.416 --> 00:43:20.426 A:middle
这意味着你的命令行

00:43:20.426 --> 00:43:21.986 A:middle
测试和你的 Xcode Server bot

00:43:21.986 --> 00:43:23.826 A:middle
可以在不同设备

00:43:23.826 --> 00:43:26.196 A:middle
和模拟器上同时

00:43:26.196 --> 00:43:27.586 A:middle
评估测试了

00:43:27.826 --> 00:43:29.046 A:middle
说到模拟器

00:43:30.066 --> 00:43:31.646 A:middle
模拟器 app 现在支持用同一个 app

00:43:31.646 --> 00:43:33.876 A:middle
使用 iOS  tvOS  watch OS 等

00:43:33.876 --> 00:43:36.236 A:middle
多个启动的设备了

00:43:37.516 --> 00:43:43.046 A:middle
[ 掌声 ]

00:43:43.546 --> 00:43:45.146 A:middle
多模拟器会话

00:43:45.146 --> 00:43:46.916 A:middle
在测试不同配置

00:43:46.916 --> 00:43:48.376 A:middle
以及评估多客户场景时

00:43:48.626 --> 00:43:50.236 A:middle
意味着生产力的重大提高

00:43:52.066 --> 00:43:53.076 A:middle
你还会发现模拟器

00:43:53.076 --> 00:43:54.136 A:middle
有了一个新体验

00:43:54.516 --> 00:43:55.826 A:middle
我们在边缘加入了

00:43:55.826 --> 00:43:57.026 A:middle
边框  给你控制硬件的熟悉感

00:43:57.126 --> 00:43:59.046 A:middle
并且启动了交互

00:43:59.046 --> 00:44:00.476 A:middle
比如从边缘进行

00:43:59.046 --> 00:44:00.476 A:middle
比如从边缘进行

00:44:00.476 --> 00:44:01.946 A:middle
扫动手势等

00:44:02.576 --> 00:44:03.306 A:middle
我们还让模拟器

00:44:03.376 --> 00:44:04.966 A:middle
的大小可以调整

00:44:06.516 --> 00:44:10.556 A:middle
[ 掌声 ]

00:44:11.056 --> 00:44:12.686 A:middle
还有一个 Xcode 9 的特性

00:44:12.686 --> 00:44:13.746 A:middle
是我想要和你们分享的

00:44:13.746 --> 00:44:15.366 A:middle
它始于我们

00:44:15.436 --> 00:44:16.266 A:middle
一直想取消的一样东西

00:44:16.266 --> 00:44:18.796 A:middle
不如直接减少对

00:44:18.796 --> 00:44:19.256 A:middle
这个东西的需求

00:44:20.516 --> 00:44:32.446 A:middle
[ 掌声 ]

00:44:32.946 --> 00:44:33.916 A:middle
我本想说

00:44:33.916 --> 00:44:34.956 A:middle
我知道你们都爱

00:44:34.956 --> 00:44:36.136 A:middle
USB 线  但那显然

00:44:36.136 --> 00:44:36.766 A:middle
是假话 [笑声]

00:44:37.736 --> 00:44:39.026 A:middle
但那不重要

00:44:39.026 --> 00:44:40.066 A:middle
因为在 Xcode 9 里  不再需要它了

00:44:40.916 --> 00:44:42.046 A:middle
我们加入了无线开发功能

00:44:43.516 --> 00:44:50.976 A:middle
[ 掌声 ]

00:44:51.476 --> 00:44:52.776 A:middle
在 Xcode 9 里  你可以用

00:44:52.776 --> 00:44:54.736 A:middle
最适合你需要的连接方式

00:44:55.476 --> 00:44:57.046 A:middle
USB WiFi  或者以太网

00:44:57.046 --> 00:44:58.286 A:middle
连接到你的

00:44:58.286 --> 00:45:00.436 A:middle
iOS 或者 tvOS 设备上

00:44:58.286 --> 00:45:00.436 A:middle
iOS 或者 tvOS 设备上

00:45:01.356 --> 00:45:02.396 A:middle
所有的开发工作流

00:45:02.396 --> 00:45:03.476 A:middle
都会得到

00:45:03.476 --> 00:45:04.276 A:middle
无线开发的支持

00:45:04.906 --> 00:45:06.066 A:middle
实际上  你可以把

00:45:06.066 --> 00:45:07.316 A:middle
无线开发用在其他 app 上

00:45:07.316 --> 00:45:08.696 A:middle
比如 Accessibility

00:45:08.696 --> 00:45:10.686 A:middle
Inspector QuickTime Player 还有

00:45:10.686 --> 00:45:11.096 A:middle
Console

00:45:11.506 --> 00:45:12.556 A:middle
这会很自然地

00:45:12.556 --> 00:45:13.986 A:middle
添加到你的开发

00:45:14.606 --> 00:45:15.576 A:middle
工作流中去

00:45:16.146 --> 00:45:17.566 A:middle
这就是我们在 Xcode 9 里

00:45:17.566 --> 00:45:19.806 A:middle
为你准备的一些东西

00:45:19.806 --> 00:45:20.936 A:middle
新的重构的源码编辑器

00:45:20.936 --> 00:45:23.856 A:middle
和 Swift 4

00:45:23.856 --> 00:45:25.476 A:middle
新的索引  构建系统

00:45:25.476 --> 00:45:26.586 A:middle
集成了 GitHub 的

00:45:26.586 --> 00:45:28.246 A:middle
源码控制工作流

00:45:28.246 --> 00:45:29.526 A:middle
还有 debug 分析和测试工具

00:45:29.636 --> 00:45:31.656 A:middle
的增强

00:45:31.656 --> 00:45:32.876 A:middle
以及无线开发

00:45:34.176 --> 00:45:36.046 A:middle
一切全在 Xcode 9 里

00:45:36.566 --> 00:45:37.696 A:middle
还有更多  这就是今天讲的工具更新

00:45:39.516 --> 00:45:48.306 A:middle
[ 掌声 ]

00:45:48.806 --> 00:45:49.686 A:middle
接下来  我们想和你分享

00:45:49.686 --> 00:45:51.256 A:middle
一些我们为你准备的新 API

00:45:51.256 --> 00:45:52.476 A:middle
我想请 Josh Shaffer 上台

00:45:52.476 --> 00:45:53.616 A:middle
为大家讲解

00:45:54.516 --> 00:45:59.436 A:middle
[ 掌声 ]

00:45:59.936 --> 00:46:00.536 A:middle
&gt;&gt;  谢谢 Matthew

00:45:59.936 --> 00:46:00.536 A:middle
&gt;&gt;  谢谢 Matthew

00:46:01.606 --> 00:46:03.156 A:middle
我很兴奋  要告诉大家

00:46:03.156 --> 00:46:05.506 A:middle
iOS 11 里很多很多

00:46:05.506 --> 00:46:07.356 A:middle
新的和增强的 API

00:46:10.206 --> 00:46:12.356 A:middle
新东西太多了

00:46:12.356 --> 00:46:13.216 A:middle
咱们就从最重要的

00:46:13.216 --> 00:46:15.416 A:middle
API 讲起吧  那就是  拖拽与放置

00:46:17.186 --> 00:46:18.746 A:middle
拖拽与放置  简单易用

00:46:18.746 --> 00:46:20.106 A:middle
在系统中持续交互

00:46:20.106 --> 00:46:21.696 A:middle
当然  还很容易

00:46:21.696 --> 00:46:23.096 A:middle
就能够添加到

00:46:23.096 --> 00:46:24.746 A:middle
你们的 app 里

00:46:26.136 --> 00:46:27.486 A:middle
不但简单  还非常灵活

00:46:27.486 --> 00:46:29.016 A:middle
而且可以自定义

00:46:29.016 --> 00:46:31.136 A:middle
全面利用了

00:46:31.136 --> 00:46:33.016 A:middle
iPad 的多点触碰

00:46:33.016 --> 00:46:33.676 A:middle
功能

00:46:34.566 --> 00:46:35.916 A:middle
当然  设计上是安全的

00:46:35.916 --> 00:46:38.046 A:middle
被拖拽的数据

00:46:38.156 --> 00:46:39.786 A:middle
只有在被放置之后

00:46:39.786 --> 00:46:40.706 A:middle
才能被访问

00:46:41.296 --> 00:46:43.726 A:middle
把拖拽放置添加到

00:46:43.726 --> 00:46:45.856 A:middle
app 里面  几乎和使用它一样容易

00:46:46.926 --> 00:46:48.676 A:middle
对于标准的文本和网络控制来说

00:46:48.676 --> 00:46:50.536 A:middle
它是完全自动的

00:46:50.946 --> 00:46:52.336 A:middle
因此你们的 app 其实没准

00:46:52.336 --> 00:46:53.356 A:middle
早已经支持它了

00:46:54.656 --> 00:46:56.836 A:middle
现有的 app 比如 Slack

00:46:56.836 --> 00:46:58.436 A:middle
就是这样

00:46:58.436 --> 00:47:00.126 A:middle
比如  它可以接受

00:46:58.436 --> 00:47:00.126 A:middle
比如  它可以接受

00:47:00.126 --> 00:47:02.706 A:middle
把文本拖拽到现有的文本视图上去

00:47:03.636 --> 00:47:04.856 A:middle
在其他情况下  你还需要

00:47:04.856 --> 00:47:05.556 A:middle
做一点小工作

00:47:06.426 --> 00:47:07.496 A:middle
如果你在表格视图

00:47:07.496 --> 00:47:09.206 A:middle
或者集合视图上

00:47:09.206 --> 00:47:11.096 A:middle
显示内容

00:47:11.096 --> 00:47:12.596 A:middle
新的委托方法会让

00:47:12.596 --> 00:47:14.126 A:middle
添加拖拽放置变得异常简单

00:47:14.126 --> 00:47:15.316 A:middle
只需几行代码就可以

00:47:16.286 --> 00:47:17.946 A:middle
开始拖拽  就像

00:47:17.946 --> 00:47:19.206 A:middle
提供数据那样容易

00:47:19.716 --> 00:47:21.496 A:middle
接受放置也一样简单

00:47:23.356 --> 00:47:24.446 A:middle
对于其他一切东西

00:47:24.446 --> 00:47:28.356 A:middle
这个简单易用的标准 API

00:47:28.356 --> 00:47:29.646 A:middle
可以整合到你们所有的

00:47:29.646 --> 00:47:30.446 A:middle
自定义视图上

00:47:31.976 --> 00:47:33.886 A:middle
这个 API 默认提供

00:47:33.886 --> 00:47:34.936 A:middle
标准手势和动画

00:47:34.936 --> 00:47:36.836 A:middle
但它也是完全可以自定义的

00:47:38.276 --> 00:47:39.496 A:middle
你可以自定义

00:47:39.496 --> 00:47:40.636 A:middle
在拖拽开始时的

00:47:40.636 --> 00:47:42.866 A:middle
抬升动画

00:47:42.866 --> 00:47:44.586 A:middle
向正在进行的拖拽过程添加多个项目

00:47:44.586 --> 00:47:46.886 A:middle
为每个项目生成自定义预览图像

00:47:46.886 --> 00:47:49.236 A:middle
选择显示在被拖拽

00:47:49.236 --> 00:47:50.686 A:middle
项目上的标志

00:47:50.686 --> 00:47:52.146 A:middle
以表示它将被移动或复制

00:47:52.146 --> 00:47:54.396 A:middle
你甚至可以

00:47:54.396 --> 00:47:55.916 A:middle
提供完全自定义的

00:47:55.916 --> 00:47:57.656 A:middle
放置动画  供放置时使用

00:47:59.196 --> 00:48:01.566 A:middle
这个 API 非常灵活

00:47:59.196 --> 00:48:01.566 A:middle
这个 API 非常灵活

00:48:01.566 --> 00:48:02.906 A:middle
就算在日历 app 中

00:48:02.906 --> 00:48:04.986 A:middle
那种高度自定义的

00:48:04.986 --> 00:48:06.826 A:middle
基于手势的事件生成与重新安排

00:48:06.826 --> 00:48:08.416 A:middle
都可以在拖拽放置 API 之上

00:48:08.516 --> 00:48:09.536 A:middle
进行重新实现

00:48:09.536 --> 00:48:12.406 A:middle
这种灵活性不仅

00:48:12.406 --> 00:48:13.526 A:middle
停留在表面

00:48:13.596 --> 00:48:15.486 A:middle
数据模型也同样

00:48:15.556 --> 00:48:16.386 A:middle
非常灵活

00:48:17.396 --> 00:48:18.406 A:middle
可以兼容你 app 使用的

00:48:18.406 --> 00:48:19.956 A:middle
任何类型数据

00:48:20.386 --> 00:48:21.696 A:middle
允许你支持非常

00:48:21.696 --> 00:48:22.836 A:middle
丰富的交互

00:48:23.596 --> 00:48:25.446 A:middle
比如  从地图上

00:48:25.446 --> 00:48:27.116 A:middle
拖拽出的地点就包括

00:48:27.116 --> 00:48:29.446 A:middle
丰富的定位信息

00:48:29.446 --> 00:48:30.596 A:middle
以及富有细节的拖拽预览

00:48:31.866 --> 00:48:33.306 A:middle
现在  有了拖拽与放置

00:48:33.306 --> 00:48:34.536 A:middle
现有的交互体验也会变得更好

00:48:35.926 --> 00:48:37.586 A:middle
Reminders 使用 UITableView

00:48:37.586 --> 00:48:38.946 A:middle
内置的重新安排支持

00:48:38.946 --> 00:48:40.586 A:middle
允许你快速重排与

00:48:40.586 --> 00:48:41.706 A:middle
组织你的任务

00:48:42.276 --> 00:48:44.636 A:middle
你可以开始拖拽  拖拽一个

00:48:44.636 --> 00:48:46.446 A:middle
项目  把它移动到一个不同的位置

00:48:46.446 --> 00:48:48.546 A:middle
甚至可以拾取

00:48:48.546 --> 00:48:50.556 A:middle
多个提醒  让它们在

00:48:50.556 --> 00:48:52.486 A:middle
列表之间移动  以便你能够

00:48:52.486 --> 00:48:54.186 A:middle
非常快速地组织你的

00:48:54.186 --> 00:48:54.946 A:middle
所有任务

00:48:56.136 --> 00:48:57.526 A:middle
因为所有这些都是在

00:48:57.696 --> 00:48:59.916 A:middle
一个普通 API 的基础上构建的

00:48:59.916 --> 00:49:01.476 A:middle
因此它们会无缝工作

00:48:59.916 --> 00:49:01.476 A:middle
因此它们会无缝工作

00:49:02.306 --> 00:49:03.616 A:middle
你可以打开 Calendar

00:49:03.616 --> 00:49:04.826 A:middle
开始拖拽其中一个事件

00:49:04.826 --> 00:49:06.836 A:middle
把它直接拖到

00:49:06.876 --> 00:49:08.696 A:middle
Reminders 里面  把它放置在里面

00:49:08.736 --> 00:49:12.266 A:middle
这样就能快速把它加到任务列表了

00:49:12.536 --> 00:49:13.426 A:middle
拖拽正在进行的过程中

00:49:13.506 --> 00:49:15.096 A:middle
系统会响应触摸这个动作

00:49:15.156 --> 00:49:16.866 A:middle
让你的 app 完全可交互

00:49:17.166 --> 00:49:18.666 A:middle
能够响应

00:49:18.666 --> 00:49:20.526 A:middle
其他的触摸动作

00:49:21.406 --> 00:49:22.816 A:middle
这让需要你的 app

00:49:22.816 --> 00:49:24.216 A:middle
内部导航的

00:49:24.216 --> 00:49:25.436 A:middle
复杂交互

00:49:25.436 --> 00:49:27.636 A:middle
变得很简单

00:49:27.636 --> 00:49:29.766 A:middle
比如在不同相册之间转移照片

00:49:30.936 --> 00:49:33.106 A:middle
在 iPad 上  整个 OS

00:49:33.106 --> 00:49:34.276 A:middle
都完全可交互

00:49:34.766 --> 00:49:36.226 A:middle
允许你在一个地方拾取

00:49:36.226 --> 00:49:37.836 A:middle
多个项目

00:49:37.836 --> 00:49:39.506 A:middle
并在系统中自由导航

00:49:39.556 --> 00:49:41.076 A:middle
甚至切换 app

00:49:41.396 --> 00:49:42.526 A:middle
同时携带这些被拖拽的项目

00:49:42.526 --> 00:49:43.956 A:middle
以便把它们应用在

00:49:43.956 --> 00:49:45.526 A:middle
其他地方

00:49:46.376 --> 00:49:48.346 A:middle
在整个导航过程中

00:49:48.346 --> 00:49:50.366 A:middle
拖拽背后的数据

00:49:50.366 --> 00:49:52.896 A:middle
受到保护

00:49:52.976 --> 00:49:54.146 A:middle
不会受到其拖拽路径上的其他 app 的

00:49:54.186 --> 00:49:54.966 A:middle
无意访问

00:49:55.776 --> 00:49:58.366 A:middle
在拖拽完成之前

00:49:58.366 --> 00:50:00.046 A:middle
潜在放置目的对象

00:49:58.366 --> 00:50:00.046 A:middle
潜在放置目的对象

00:50:00.046 --> 00:50:01.466 A:middle
是可以访问元数据的

00:50:02.506 --> 00:50:03.946 A:middle
放置的时候

00:50:04.046 --> 00:50:05.506 A:middle
数据就很快能被

00:50:05.506 --> 00:50:06.356 A:middle
接收 app 访问了

00:50:07.156 --> 00:50:08.386 A:middle
这个 lazy delivery

00:50:08.386 --> 00:50:09.836 A:middle
提供的安全性

00:50:09.876 --> 00:50:10.786 A:middle
并不是以性能

00:50:10.786 --> 00:50:12.526 A:middle
为代价的  因为

00:50:12.526 --> 00:50:13.946 A:middle
大型文件

00:50:14.036 --> 00:50:15.656 A:middle
也可以几乎在瞬间

00:50:15.856 --> 00:50:17.016 A:middle
使用 APFS cloning 传送

00:50:18.356 --> 00:50:19.466 A:middle
这一切不过

00:50:19.466 --> 00:50:19.976 A:middle
是开始

00:50:20.916 --> 00:50:22.346 A:middle
接下来要向大家展示

00:50:22.346 --> 00:50:23.796 A:middle
另外一些令人振奋的案例

00:50:23.796 --> 00:50:25.206 A:middle
并展示向你的 app

00:50:25.206 --> 00:50:26.436 A:middle
添加拖拽放置有多么容易

00:50:26.436 --> 00:50:28.096 A:middle
有请 Eliza Block

00:50:28.096 --> 00:50:29.056 A:middle
上台为大家演示

00:50:30.096 --> 00:50:30.466 A:middle
Eliza

00:50:31.516 --> 00:50:36.466 A:middle
[ 掌声 ]

00:50:36.966 --> 00:50:37.496 A:middle
&gt;&gt;  谢谢 Josh

00:50:37.826 --> 00:50:39.996 A:middle
我想先展示一下

00:50:39.996 --> 00:50:41.146 A:middle
我们对 iOS 主屏幕的改进

00:50:41.146 --> 00:50:43.386 A:middle
这是通过

00:50:43.386 --> 00:50:44.566 A:middle
拖拽放置 API 实现的

00:50:45.606 --> 00:50:48.076 A:middle
在这个 iPad 上

00:50:48.246 --> 00:50:53.186 A:middle
我可以通过长按 home 键来

00:50:53.186 --> 00:50:54.546 A:middle
重新安排我的 app

00:50:54.546 --> 00:50:55.886 A:middle
比如 我可以创建

00:50:55.886 --> 00:50:57.546 A:middle
我可以把 reiminder 拖拽到

00:50:57.546 --> 00:50:59.236 A:middle
Calendar 上面  创建一个

00:50:59.456 --> 00:51:00.376 A:middle
效率文件夹

00:50:59.456 --> 00:51:00.376 A:middle
效率文件夹

00:51:01.856 --> 00:51:03.796 A:middle
现在  在 iOS 11 里

00:51:03.886 --> 00:51:05.606 A:middle
我们使用拖拽放置

00:51:05.826 --> 00:51:07.866 A:middle
完全重写了重新归置 app 的功能

00:51:07.866 --> 00:51:09.056 A:middle
我们让它变得

00:51:09.056 --> 00:51:09.776 A:middle
更加强大了

00:51:10.616 --> 00:51:11.346 A:middle
我们再找一些

00:51:11.346 --> 00:51:12.786 A:middle
效率 app 加到这个文件夹里

00:51:13.906 --> 00:51:16.006 A:middle
这个是 Pages

00:51:16.006 --> 00:51:17.946 A:middle
我开始拖拽它

00:51:17.946 --> 00:51:19.766 A:middle
我这样做的时候  主屏幕

00:51:19.766 --> 00:51:21.406 A:middle
仍然是完全可交互的

00:51:21.486 --> 00:51:23.266 A:middle
用我的另一只手  我可以

00:51:23.266 --> 00:51:25.376 A:middle
在不同页面上扫动

00:51:25.376 --> 00:51:27.616 A:middle
进出文件夹  最棒的是

00:51:27.616 --> 00:51:28.856 A:middle
我不再受限于

00:51:28.856 --> 00:51:30.416 A:middle
每次只能拖拽一个 app 了

00:51:30.576 --> 00:51:33.486 A:middle
我可以点击 Keynote 把它

00:51:33.536 --> 00:51:35.496 A:middle
加入到我正在进行的拖拽中

00:51:35.496 --> 00:51:36.956 A:middle
关闭文件夹  我们看一看

00:51:36.956 --> 00:51:38.176 A:middle
能不能找到 Numbers

00:51:39.516 --> 00:51:43.086 A:middle
[ 掌声 ]

00:51:43.586 --> 00:51:44.956 A:middle
找到了  我点一下

00:51:45.296 --> 00:51:47.426 A:middle
抓住它  现在我可以

00:51:47.426 --> 00:51:48.796 A:middle
把这三个 app  拖拽回

00:51:48.796 --> 00:51:50.436 A:middle
第一页  然后只要一下

00:51:50.436 --> 00:51:52.156 A:middle
就能把它们全部放到文件夹里

00:51:53.516 --> 00:51:58.376 A:middle
[ 掌声 ]

00:51:58.876 --> 00:52:00.336 A:middle
这就是使用拖拽放置

00:51:58.876 --> 00:52:00.336 A:middle
这就是使用拖拽放置

00:52:00.336 --> 00:52:01.586 A:middle
重新归置 app 的方法

00:52:01.586 --> 00:52:02.656 A:middle
你可以在你自己的 app 中

00:52:02.656 --> 00:52:03.586 A:middle
也做到类似的事

00:52:04.496 --> 00:52:06.356 A:middle
来看一个例子

00:52:06.416 --> 00:52:08.426 A:middle
我要打开这个叫做 Byte Swap 的 app

00:52:08.426 --> 00:52:10.556 A:middle
这是我的团队写的 app

00:52:10.556 --> 00:52:12.686 A:middle
它能帮我浏览和组织我的

00:52:12.876 --> 00:52:14.316 A:middle
Swift Playgrounds 交换卡

00:52:15.756 --> 00:52:18.476 A:middle
它有一个 Swift

00:52:18.476 --> 00:52:19.846 A:middle
不好意思  是有一个分割视图控制器

00:52:20.286 --> 00:52:22.276 A:middle
在屏幕右边  你可以

00:52:22.276 --> 00:52:23.866 A:middle
看到我的卡片

00:52:23.866 --> 00:52:25.146 A:middle
通过基本浮动布局

00:52:25.146 --> 00:52:26.256 A:middle
以集合视图呈现

00:52:27.136 --> 00:52:28.856 A:middle
现在我想

00:52:28.856 --> 00:52:30.406 A:middle
如果我能拾取这些卡片

00:52:30.406 --> 00:52:31.576 A:middle
使用拖拽来重新归置它们

00:52:31.576 --> 00:52:32.936 A:middle
让它们在不同相册中移动

00:52:32.936 --> 00:52:35.156 A:middle
这一定会很酷

00:52:35.156 --> 00:52:36.486 A:middle
所以咱们现在就开始

00:52:36.486 --> 00:52:37.016 A:middle
这样做吧

00:52:37.556 --> 00:52:40.606 A:middle
我要切换到 Xcode

00:52:40.606 --> 00:52:42.426 A:middle
我已经打开了卡片视图控制器

00:52:47.096 --> 00:52:48.936 A:middle
因为 Table View 和

00:52:48.936 --> 00:52:50.566 A:middle
Collection View 已经包含了

00:52:50.676 --> 00:52:52.096 A:middle
对拖拽与放置的内置支持

00:52:52.096 --> 00:52:54.386 A:middle
所以如果你正在使用

00:52:54.386 --> 00:52:55.196 A:middle
这些类  那么添加拖拽放置功能

00:52:55.226 --> 00:52:56.786 A:middle
就真的很简单了

00:52:57.746 --> 00:52:59.836 A:middle
首先我只需

00:52:59.836 --> 00:53:01.626 A:middle
声明遵守新的

00:52:59.836 --> 00:53:01.626 A:middle
声明遵守新的

00:53:01.626 --> 00:53:03.426 A:middle
UICollectionView 拖拽／委托协议

00:53:03.776 --> 00:53:07.476 A:middle
我这样做时 Xcode 就会

00:53:07.476 --> 00:53:09.016 A:middle
通知我  我还没有履行协议

00:53:09.016 --> 00:53:10.346 A:middle
要求必须使用的某个方法

00:53:10.346 --> 00:53:12.116 A:middle
我可以点击这个错误

00:53:12.116 --> 00:53:13.806 A:middle
接受 Fix-it

00:53:13.856 --> 00:53:16.046 A:middle
来添加协议

00:53:17.636 --> 00:53:19.496 A:middle
因此  这个方法

00:53:19.496 --> 00:53:21.186 A:middle
Items for Beginning Session

00:53:21.186 --> 00:53:22.646 A:middle
提示我要将被拖拽的

00:53:22.716 --> 00:53:24.256 A:middle
项目数据打包

00:53:24.286 --> 00:53:25.736 A:middle
因此我要调出一个

00:53:25.876 --> 00:53:28.106 A:middle
我之前写的帮助方法

00:53:28.106 --> 00:53:29.866 A:middle
它会把数据打包成

00:53:29.866 --> 00:53:31.556 A:middle
一个图像  并让它可拖拽

00:53:32.106 --> 00:53:35.396 A:middle
我为了让拖拽的基本框架

00:53:35.396 --> 00:53:36.666 A:middle
在这个 app 内生效

00:53:36.666 --> 00:53:39.096 A:middle
其实  要做的事已经做完了

00:53:39.096 --> 00:53:40.766 A:middle
但我还想通过点击来向

00:53:40.866 --> 00:53:44.846 A:middle
正在进行的拖拽

00:53:44.846 --> 00:53:45.636 A:middle
添加项目

00:53:45.816 --> 00:53:47.226 A:middle
所以我要再添加

00:53:47.316 --> 00:53:48.376 A:middle
一个方法  然后

00:53:48.376 --> 00:53:53.136 A:middle
我们可以做这个

00:53:53.336 --> 00:53:54.896 A:middle
我切换到 iPad 上

00:53:54.896 --> 00:53:57.176 A:middle
好了  出现了

00:53:57.176 --> 00:53:59.726 A:middle
你们可以看到

00:53:59.726 --> 00:54:01.126 A:middle
我现在可以把这个家伙捡起来到处拖拽

00:53:59.726 --> 00:54:01.126 A:middle
我现在可以把这个家伙捡起来到处拖拽

00:54:01.696 --> 00:54:03.626 A:middle
但我还不能重新安排位置

00:54:03.626 --> 00:54:04.926 A:middle
因为我还没有在这个 app 中

00:54:04.926 --> 00:54:05.676 A:middle
实现放置

00:54:06.326 --> 00:54:07.856 A:middle
不过我仍然可以

00:54:07.856 --> 00:54:10.636 A:middle
在 app 中自由互动

00:54:10.636 --> 00:54:12.186 A:middle
并拾取第二个项目

00:54:12.186 --> 00:54:14.266 A:middle
添加到正在进行的拖拽中

00:54:14.266 --> 00:54:15.506 A:middle
实际上这比看上去更加实用

00:54:15.506 --> 00:54:17.836 A:middle
因为我不但能够

00:54:17.836 --> 00:54:18.726 A:middle
把这些东西拖拽到各处

00:54:18.726 --> 00:54:20.956 A:middle
我还可以与其他

00:54:21.036 --> 00:54:22.426 A:middle
可能已经实现了放置的 app

00:54:22.426 --> 00:54:23.546 A:middle
进行交互

00:54:23.546 --> 00:54:25.116 A:middle
比如 Mail

00:54:26.436 --> 00:54:28.846 A:middle
我可以打开 Mail

00:54:28.846 --> 00:54:30.536 A:middle
点击写邮件  然后

00:54:30.536 --> 00:54:32.526 A:middle
把这两张卡片放进去

00:54:33.456 --> 00:54:34.106 A:middle
就这样

00:54:34.306 --> 00:54:35.816 A:middle
只需要把两个委托方法

00:54:35.816 --> 00:54:37.546 A:middle
添加到现有的 app 中去

00:54:39.256 --> 00:54:40.836 A:middle
好了  切换回 Xcode

00:54:41.516 --> 00:54:43.126 A:middle
让我们继续

00:54:43.126 --> 00:54:44.006 A:middle
实现放置

00:54:45.176 --> 00:54:48.006 A:middle
我再次声明

00:54:48.006 --> 00:54:50.146 A:middle
遵守新的委托协议

00:54:50.146 --> 00:54:51.116 A:middle
也就是 UICollectionView 放置委托

00:54:52.436 --> 00:54:55.676 A:middle
Xcode 会再次

00:54:55.676 --> 00:54:57.886 A:middle
提示我完成缺失的协议步骤

00:54:59.536 --> 00:55:02.196 A:middle
这个执行放置方法

00:54:59.536 --> 00:55:02.196 A:middle
这个执行放置方法

00:55:02.196 --> 00:55:03.346 A:middle
会稍微复杂一点

00:55:04.086 --> 00:55:08.266 A:middle
我必须要更新我的模型

00:55:08.776 --> 00:55:10.156 A:middle
让它接受新的

00:55:10.156 --> 00:55:12.696 A:middle
放置数据

00:55:12.696 --> 00:55:14.046 A:middle
我也在这里使用帮助方法

00:55:14.046 --> 00:55:15.146 A:middle
自定义了动画

00:55:15.616 --> 00:55:18.246 A:middle
我还要再添加

00:55:18.246 --> 00:55:21.786 A:middle
一个方法

00:55:21.826 --> 00:55:24.506 A:middle
我把手指拖过

00:55:24.506 --> 00:55:26.516 A:middle
一个放置目标时会调用它

00:55:26.516 --> 00:55:27.456 A:middle
它会让集合视图

00:55:27.456 --> 00:55:28.656 A:middle
打开一个缺口

00:55:28.836 --> 00:55:30.306 A:middle
这样我就能在某个特定列表中

00:55:30.306 --> 00:55:31.056 A:middle
重新组织了

00:55:32.366 --> 00:55:35.366 A:middle
再次切换回我的 iPad

00:55:35.586 --> 00:55:38.186 A:middle
这次我再拾取一张卡片

00:55:38.586 --> 00:55:41.056 A:middle
其他卡片会让出路来

00:55:41.056 --> 00:55:43.816 A:middle
我仍然可以在列表间切换

00:55:43.906 --> 00:55:46.286 A:middle
拿起更多的卡片

00:55:46.286 --> 00:55:49.276 A:middle
然后我可以把它们

00:55:49.276 --> 00:55:50.796 A:middle
一起放置到我最喜欢的

00:55:50.796 --> 00:55:51.396 A:middle
相册里去

00:55:52.006 --> 00:55:54.376 A:middle
非常简单

00:55:54.376 --> 00:55:55.796 A:middle
这就是在你的 app 中添加拖拽与放置

00:55:56.476 --> 00:55:58.386 A:middle
我们和不少

00:55:58.386 --> 00:55:59.396 A:middle
伙伴共同工作

00:55:59.396 --> 00:56:01.166 A:middle
他们一直努力让

00:55:59.396 --> 00:56:01.166 A:middle
他们一直努力让

00:56:01.166 --> 00:56:03.336 A:middle
拖拽和放置进入

00:56:03.336 --> 00:56:04.176 A:middle
他们的应用

00:56:04.486 --> 00:56:05.906 A:middle
其中一个合作伙伴

00:56:05.996 --> 00:56:07.636 A:middle
创造性地使用了这个 API

00:56:07.636 --> 00:56:09.386 A:middle
那就是 Adobe

00:56:09.856 --> 00:56:11.046 A:middle
所以现在我想请

00:56:11.046 --> 00:56:13.056 A:middle
Adobe 的 Brooke Francesi 上台

00:56:13.056 --> 00:56:13.856 A:middle
为你展示他们的成果

00:56:15.516 --> 00:56:20.876 A:middle
[ 掌声 ]

00:56:21.376 --> 00:56:22.016 A:middle
&gt;&gt;  谢谢 Eliza

00:56:22.416 --> 00:56:24.946 A:middle
我已经迫不及待地想

00:56:24.946 --> 00:56:26.266 A:middle
给你们展示拖拽放置对于

00:56:26.266 --> 00:56:27.296 A:middle
创意行业的意义了

00:56:27.946 --> 00:56:30.596 A:middle
这是 Adobe Photoshop Sketch

00:56:31.056 --> 00:56:32.526 A:middle
它是专用于油画与图画的 app

00:56:32.526 --> 00:56:33.486 A:middle
在它里面  有很多

00:56:33.486 --> 00:56:35.066 A:middle
最好用的 natural media brushes

00:56:35.416 --> 00:56:36.746 A:middle
包括 My Photoshop Brushes 里的

00:56:36.746 --> 00:56:37.166 A:middle
全部笔刷

00:56:37.676 --> 00:56:38.506 A:middle
我在画这副插画

00:56:38.506 --> 00:56:40.166 A:middle
在完成之前

00:56:40.166 --> 00:56:41.336 A:middle
我想在背景中

00:56:41.336 --> 00:56:42.636 A:middle
添加一些元素

00:56:43.096 --> 00:56:44.296 A:middle
要做到这一点

00:56:44.416 --> 00:56:46.996 A:middle
我要打开另一个 Adobe app

00:56:46.996 --> 00:56:47.746 A:middle
叫做 Capture

00:56:48.506 --> 00:56:50.066 A:middle
Capture 这个 app 允许我

00:56:50.066 --> 00:56:52.046 A:middle
捕捉周围世界的灵感

00:56:52.046 --> 00:56:53.866 A:middle
生成图案

00:56:53.866 --> 00:56:57.036 A:middle
色彩主题  甚至是自定义笔刷等等

00:56:57.036 --> 00:56:59.096 A:middle
我在这个项目中

00:56:59.096 --> 00:57:00.116 A:middle
一直在使用这些笔刷

00:56:59.096 --> 00:57:00.116 A:middle
一直在使用这些笔刷

00:57:01.386 --> 00:57:03.456 A:middle
现在  为了在背景中

00:57:03.456 --> 00:57:04.826 A:middle
添加一些元素

00:57:04.826 --> 00:57:06.296 A:middle
我需要把色彩主题

00:57:06.296 --> 00:57:08.416 A:middle
读取到 Photoshop Sketch 的工具栏里

00:57:09.676 --> 00:57:11.306 A:middle
在过去  我得去

00:57:11.306 --> 00:57:13.276 A:middle
找到所有的色彩

00:57:13.616 --> 00:57:15.336 A:middle
用手动方式把每一种色彩

00:57:15.336 --> 00:57:17.616 A:middle
读取到工具栏里

00:57:17.616 --> 00:57:18.886 A:middle
然后再回去  找到笔刷

00:57:19.256 --> 00:57:19.736 A:middle
你懂的

00:57:19.736 --> 00:57:21.456 A:middle
那是一个很长又很麻烦的

00:57:21.506 --> 00:57:21.936 A:middle
过程

00:57:23.046 --> 00:57:25.056 A:middle
但使用拖拽放置

00:57:25.056 --> 00:57:27.126 A:middle
我可以一下选择五种色彩

00:57:27.996 --> 00:57:29.576 A:middle
导航到我的笔刷中

00:57:30.286 --> 00:57:32.086 A:middle
选择我在这个项目中用到的

00:57:32.086 --> 00:57:33.166 A:middle
两种笔刷

00:57:33.226 --> 00:57:36.566 A:middle
然后同时把它们

00:57:36.566 --> 00:57:38.096 A:middle
拖拽到我的工具栏里

00:57:38.556 --> 00:57:39.676 A:middle
真够厉害  是不是

00:57:41.516 --> 00:57:44.866 A:middle
[ 掌声 ]

00:57:45.366 --> 00:57:46.956 A:middle
这在之前要花上

00:57:47.096 --> 00:57:49.256 A:middle
很多步骤才能完成  现在却只要

00:57:49.256 --> 00:57:50.046 A:middle
几秒钟

00:57:50.506 --> 00:57:51.796 A:middle
我们甚至还利用这个

00:57:51.796 --> 00:57:53.896 A:middle
API 去生成我们自己的自定义

00:57:53.896 --> 00:57:54.596 A:middle
动画

00:57:56.016 --> 00:57:57.346 A:middle
我们开始使用新的

00:57:57.346 --> 00:57:59.206 A:middle
拖拽放置后  惊讶不已

00:57:59.206 --> 00:58:00.546 A:middle
它的实现竟是如此

00:57:59.206 --> 00:58:00.546 A:middle
它的实现竟是如此

00:58:00.546 --> 00:58:01.326 A:middle
简单直接

00:58:01.726 --> 00:58:03.996 A:middle
只用了两天时间

00:58:03.996 --> 00:58:05.786 A:middle
我们的一个工程师就让

00:58:05.856 --> 00:58:08.136 A:middle
基本的 API 特性在一个 app 里实现了

00:58:08.136 --> 00:58:09.236 A:middle
于是我们决定继续挖掘

00:58:10.176 --> 00:58:11.486 A:middle
拖拽放置带来的可能性

00:58:11.486 --> 00:58:12.946 A:middle
真的是无穷无尽的

00:58:13.796 --> 00:58:15.486 A:middle
最酷的是这不仅

00:58:15.486 --> 00:58:18.516 A:middle
限于图像  笔刷

00:58:18.516 --> 00:58:19.956 A:middle
以及色彩主题

00:58:20.266 --> 00:58:21.896 A:middle
我还能在不同的 app 之间

00:58:21.896 --> 00:58:23.926 A:middle
拖拽放置图层

00:58:24.326 --> 00:58:25.486 A:middle
现在  我想看看它在 Context

00:58:25.486 --> 00:58:26.876 A:middle
里的效果怎么样

00:58:27.356 --> 00:58:28.376 A:middle
让我先画上几笔

00:58:29.206 --> 00:58:30.526 A:middle
我想看看在 Context 里

00:58:30.526 --> 00:58:32.526 A:middle
效果怎样

00:58:32.526 --> 00:58:33.716 A:middle
我选择这些

00:58:33.716 --> 00:58:35.296 A:middle
我之前画的图层

00:58:35.366 --> 00:58:39.446 A:middle
打开我的 Dock

00:58:39.536 --> 00:58:41.106 A:middle
然后把它们都

00:58:41.326 --> 00:58:43.526 A:middle
拖拽到另一个 Adobe app 里

00:58:43.526 --> 00:58:44.976 A:middle
这是 Photoshop Mix

00:58:44.976 --> 00:58:46.346 A:middle
它是一个图像合成工具

00:58:46.766 --> 00:58:48.176 A:middle
在我进来之后

00:58:48.176 --> 00:58:49.586 A:middle
我还能有所选择

00:58:49.836 --> 00:58:51.416 A:middle
我可以在我的画布上

00:58:51.416 --> 00:58:53.116 A:middle
对准任何坐标

00:58:53.116 --> 00:58:54.426 A:middle
如果我确切知道

00:58:54.426 --> 00:58:57.326 A:middle
要把图层放在哪的话

00:58:57.326 --> 00:58:58.716 A:middle
或者我可以把它们直接放在图层栏里

00:58:59.326 --> 00:59:02.316 A:middle
超棒的  对不对

00:58:59.326 --> 00:59:02.316 A:middle
超棒的  对不对

00:59:02.316 --> 00:59:03.556 A:middle
我真是永远都看不够

00:59:05.516 --> 00:59:09.936 A:middle
[ 掌声 ]

00:59:10.436 --> 00:59:11.676 A:middle
现在 我要总结一下了

00:59:11.676 --> 00:59:13.176 A:middle
怕是有人已经在这两分钟睡过去了

00:59:13.496 --> 00:59:15.426 A:middle
我刚刚从三个

00:59:15.426 --> 00:59:16.636 A:middle
完全不同的 app 中

00:59:16.676 --> 00:59:18.196 A:middle
拖拽了三种

00:59:18.196 --> 00:59:19.466 A:middle
完全不同的东西

00:59:19.466 --> 00:59:21.336 A:middle
因此  拖拽与放置

00:59:21.336 --> 00:59:22.786 A:middle
绝不仅仅是在我的工作中节省了步骤

00:59:23.736 --> 00:59:26.076 A:middle
它是一个为在 iPad 上

00:59:26.076 --> 00:59:27.736 A:middle
进行创意工作的人准备的

00:59:27.736 --> 00:59:28.146 A:middle
全新的工作流

00:59:28.366 --> 00:59:29.536 A:middle
谢谢大家

00:59:31.516 --> 00:59:37.126 A:middle
[ 掌声 ]

00:59:37.626 --> 00:59:38.086 A:middle
&gt;&gt;  谢谢 Brooke

00:59:38.856 --> 00:59:40.076 A:middle
拖拽放置真是一个令人振奋的

00:59:40.076 --> 00:59:41.816 A:middle
新 API 我们已经迫不及待

00:59:41.816 --> 00:59:42.656 A:middle
要看看你们会用它

00:59:42.656 --> 00:59:44.146 A:middle
做什么 但还有很多

00:59:44.146 --> 00:59:45.096 A:middle
iOS 11 上的其他改进

00:59:45.096 --> 00:59:46.886 A:middle
你们也应该

00:59:46.886 --> 00:59:47.846 A:middle
去了解它们

00:59:47.846 --> 00:59:49.996 A:middle
我们说一说

00:59:49.996 --> 00:59:51.096 A:middle
对用户交互的更新吧

00:59:52.236 --> 00:59:53.236 A:middle
大多数 app 的顶端层级

00:59:53.236 --> 00:59:54.696 A:middle
现在有了一个大标题

00:59:54.696 --> 00:59:56.856 A:middle
在导航栏中非常显眼

00:59:56.856 --> 00:59:58.596 A:middle
还有一项新的

00:59:58.596 --> 01:00:00.166 A:middle
集成的搜索栏的

00:59:58.596 --> 01:00:00.166 A:middle
集成的搜索栏的

01:00:00.166 --> 01:00:00.836 A:middle
设计

01:00:01.756 --> 01:00:02.766 A:middle
在大多数 app 的

01:00:02.766 --> 01:00:04.676 A:middle
顶层  你们会发现它  包括

01:00:04.676 --> 01:00:06.886 A:middle
全新的 Messages Mail  App

01:00:07.016 --> 01:00:09.696 A:middle
Store 和 Photos 等等

01:00:09.696 --> 01:00:11.686 A:middle
要在你自己的 app 中

01:00:11.686 --> 01:00:13.316 A:middle
显示大标题  也是非常简单的

01:00:14.596 --> 01:00:16.366 A:middle
只要调用一些属性

01:00:16.366 --> 01:00:18.186 A:middle
你们就能采用并且控制

01:00:18.266 --> 01:00:19.706 A:middle
新的外观采用大标题

01:00:19.756 --> 01:00:21.446 A:middle
并且采用新的

01:00:21.606 --> 01:00:22.716 A:middle
搜索框了

01:00:24.036 --> 01:00:26.076 A:middle
你们还会发现  在 iOS 11 里

01:00:26.076 --> 01:00:27.666 A:middle
UITableView 现在已经默认启用

01:00:27.836 --> 01:00:29.596 A:middle
自适应尺寸的单元格

01:00:30.156 --> 01:00:31.706 A:middle
这会让你

01:00:31.866 --> 01:00:33.046 A:middle
更加容易地得到

01:00:33.046 --> 01:00:33.856 A:middle
动态字体效果

01:00:35.516 --> 01:00:38.846 A:middle
[ 掌声 ]

01:00:39.346 --> 01:00:40.916 A:middle
这也让 iOS 11 的 UI

01:00:40.916 --> 01:00:43.176 A:middle
对于字体变化的响应

01:00:43.176 --> 01:00:44.936 A:middle
比以前更灵活了

01:00:45.706 --> 01:00:47.156 A:middle
有了更广的

01:00:47.206 --> 01:00:49.116 A:middle
动态字体尺寸范围

01:00:49.116 --> 01:00:50.416 A:middle
你们的用户就能选择

01:00:50.416 --> 01:00:51.566 A:middle
他们用起来最舒服的字体大小了

01:00:53.286 --> 01:00:54.736 A:middle
动态字体是一个

01:00:54.836 --> 01:00:56.216 A:middle
使用频繁的用户偏好

01:00:56.366 --> 01:00:57.316 A:middle
所以你们一定要确定

01:00:57.316 --> 01:00:58.736 A:middle
去测试它

01:00:58.736 --> 01:00:59.736 A:middle
并对它的响应及时

01:01:00.606 --> 01:01:02.216 A:middle
别忘了去为每个人设计

01:01:03.326 --> 01:01:04.296 A:middle
使用更大的

01:01:04.296 --> 01:01:05.966 A:middle
辅助尺寸进行测试

01:01:05.966 --> 01:01:07.876 A:middle
也可行了  在这种情况下

01:01:07.876 --> 01:01:09.106 A:middle
你们的表格视图行高会

01:01:09.106 --> 01:01:10.916 A:middle
增加

01:01:10.916 --> 01:01:12.386 A:middle
所以你们要确定内容

01:01:12.386 --> 01:01:14.146 A:middle
布局良好  保持易读性

01:01:14.386 --> 01:01:15.686 A:middle
即便是字体很大时也要这样

01:01:16.766 --> 01:01:19.616 A:middle
接下来我们说说文件

01:01:20.846 --> 01:01:21.906 A:middle
文件管理在 iOS 11 里

01:01:21.906 --> 01:01:23.816 A:middle
彻底更新了

01:01:24.616 --> 01:01:25.776 A:middle
当然  你可以在新的

01:01:25.776 --> 01:01:27.316 A:middle
Flies app 里访问文件

01:01:27.316 --> 01:01:27.976 A:middle
你们今天早晨已经听过了

01:01:27.976 --> 01:01:30.336 A:middle
但更好的是

01:01:30.336 --> 01:01:32.136 A:middle
具有同样功能的

01:01:32.186 --> 01:01:34.016 A:middle
新的文档浏览器

01:01:34.016 --> 01:01:35.566 A:middle
可以在你们的 app 内部

01:01:35.726 --> 01:01:36.636 A:middle
出现了

01:01:39.656 --> 01:01:40.946 A:middle
你可以筛选出现在

01:01:40.986 --> 01:01:42.056 A:middle
浏览器里的文件

01:01:42.056 --> 01:01:44.526 A:middle
类型

01:01:45.106 --> 01:01:46.736 A:middle
不好意思  在导航栏中

01:01:46.736 --> 01:01:48.116 A:middle
添加自定义动作

01:01:48.216 --> 01:01:50.046 A:middle
甚至是允许在同一个交互页面

01:01:50.046 --> 01:01:51.416 A:middle
内部直接生成

01:01:51.416 --> 01:01:52.816 A:middle
新文件

01:01:53.636 --> 01:01:54.756 A:middle
当然  你还可以

01:01:54.756 --> 01:01:57.676 A:middle
定义它的外观

01:01:57.676 --> 01:01:59.216 A:middle
让它更好地融入

01:01:59.216 --> 01:01:59.976 A:middle
你的 app

01:02:01.456 --> 01:02:03.036 A:middle
文档浏览器还提供了

01:02:03.036 --> 01:02:04.456 A:middle
快速访问 iCloud Drive 的

01:02:04.546 --> 01:02:06.086 A:middle
新分享文档支持

01:02:06.086 --> 01:02:07.836 A:middle
让 iOS 和 macOS 之间

01:02:07.836 --> 01:02:09.916 A:middle
的协作变的更加简单

01:02:11.506 --> 01:02:13.206 A:middle
你可以使用 NSFileCoordinator

01:02:13.206 --> 01:02:14.906 A:middle
轻易找到对这些文档的更改

01:02:14.906 --> 01:02:16.516 A:middle
甚至在

01:02:16.956 --> 01:02:18.586 A:middle
其他用户做出这些更改时

01:02:18.586 --> 01:02:19.236 A:middle
也可以

01:02:19.916 --> 01:02:21.646 A:middle
在 macOS 上 NSDocument

01:02:21.646 --> 01:02:22.896 A:middle
包括对在你的 app

01:02:22.896 --> 01:02:24.146 A:middle
内部直接分享文件的支持

01:02:25.916 --> 01:02:27.696 A:middle
最后  我们来说一说

01:02:27.696 --> 01:02:29.636 A:middle
iOS 11 的新的多任务功能

01:02:30.376 --> 01:02:31.536 A:middle
这让你的 app 能够

01:02:31.536 --> 01:02:32.606 A:middle
参与到新的多任务工作流中来

01:02:32.606 --> 01:02:34.456 A:middle
这是由新的浮动 Dock

01:02:34.456 --> 01:02:35.696 A:middle
slide-over apps

01:02:36.186 --> 01:02:37.976 A:middle
pinned apps

01:02:38.316 --> 01:02:39.576 A:middle
和全新的 App Switcher 共同构成的

01:02:39.826 --> 01:02:40.946 A:middle
它非常简单直接

01:02:41.806 --> 01:02:43.416 A:middle
如果你在过去几年中采用了

01:02:43.556 --> 01:02:44.896 A:middle
size classes 灵活分层

01:02:44.896 --> 01:02:46.206 A:middle
和默认故事板

01:02:46.206 --> 01:02:47.566 A:middle
那么你实际上

01:02:47.566 --> 01:02:48.286 A:middle
已经完成了

01:02:49.176 --> 01:02:50.966 A:middle
iOS 11 在这些现有技术的基础上

01:02:50.966 --> 01:02:52.766 A:middle
进行构建  从而诞生了

01:02:52.766 --> 01:02:54.526 A:middle
一大批新的工作流

01:02:55.496 --> 01:02:56.666 A:middle
如果你还没有采用上面提到的东西

01:02:56.666 --> 01:02:58.286 A:middle
现在的时机是最好的

01:03:00.636 --> 01:03:01.646 A:middle
这些都只是一个开始

01:03:02.196 --> 01:03:03.776 A:middle
在iOS 11 里还有很多

01:03:03.776 --> 01:03:05.626 A:middle
新的和增强的 API

01:03:06.696 --> 01:03:08.506 A:middle
比如  密码自动填充

01:03:08.776 --> 01:03:10.676 A:middle
让你从 iCloud 钥匙串中

01:03:10.676 --> 01:03:12.226 A:middle
获得登录信息

01:03:12.226 --> 01:03:14.046 A:middle
并直接在你的 app 里登录

01:03:14.046 --> 01:03:15.886 A:middle
变得更快  更安全

01:03:15.886 --> 01:03:17.196 A:middle
这对你的 app 登录体验来说

01:03:17.196 --> 01:03:18.056 A:middle
是一个很大的提升

01:03:19.076 --> 01:03:20.676 A:middle
这非常棒 [ 掌声 ]

01:03:22.616 --> 01:03:23.966 A:middle
现在在你的素材目录里

01:03:23.966 --> 01:03:25.226 A:middle
可以保存已命名颜色素材

01:03:25.226 --> 01:03:26.886 A:middle
和向量素材

01:03:26.886 --> 01:03:29.516 A:middle
UIFontMetrics 让你自定义的字体

01:03:29.516 --> 01:03:30.866 A:middle
加入动态字体

01:03:30.866 --> 01:03:32.496 A:middle
变得更加容易

01:03:34.516 --> 01:03:37.676 A:middle
[ 掌声 ]

01:03:38.176 --> 01:03:39.336 A:middle
除此之外

01:03:39.336 --> 01:03:40.736 A:middle
对于各种 Apple 服务的 API

01:03:40.736 --> 01:03:42.696 A:middle
也有很多

01:03:42.696 --> 01:03:44.516 A:middle
很棒的改进

01:03:44.516 --> 01:03:46.246 A:middle
我们只能谈一点  就从

01:03:46.386 --> 01:03:46.916 A:middle
iMessage 开始吧

01:03:47.426 --> 01:03:50.476 A:middle
有了 iOS 11 里的新应用带

01:03:50.476 --> 01:03:52.486 A:middle
信息 app 现在更加容易被发现了

01:03:52.486 --> 01:03:53.926 A:middle
而且它们也变得

01:03:53.926 --> 01:03:55.076 A:middle
更加强大了

01:03:55.666 --> 01:03:57.196 A:middle
你们的 app 现在可以

01:03:57.296 --> 01:03:58.786 A:middle
在交谈中的聊天气泡中

01:03:58.876 --> 01:03:59.956 A:middle
递交 live 内容了

01:04:01.956 --> 01:04:03.146 A:middle
使用新的直接发送 API

01:04:03.146 --> 01:04:05.106 A:middle
你可以帮你的用户

01:04:05.146 --> 01:04:05.996 A:middle
去除一项痛点

01:04:05.996 --> 01:04:07.886 A:middle
让发送信息变得非常简单

01:04:07.886 --> 01:04:09.506 A:middle
在你的 app 扩展里

01:04:09.506 --> 01:04:11.326 A:middle
只需点击一下

01:04:11.326 --> 01:04:12.756 A:middle
就可以完成

01:04:14.076 --> 01:04:15.736 A:middle
接下来是 SiriKit

01:04:16.776 --> 01:04:17.996 A:middle
支持的域扩大了

01:04:17.996 --> 01:04:20.346 A:middle
包括了一些新的域

01:04:20.346 --> 01:04:21.476 A:middle
比如支付账户

01:04:21.516 --> 01:04:24.236 A:middle
列表  笔记

01:04:24.866 --> 01:04:26.566 A:middle
二维码显示  等等

01:04:27.096 --> 01:04:29.006 A:middle
如果你错过了的话

01:04:29.006 --> 01:04:30.596 A:middle
今年早些时候  我们极大地简化了

01:04:30.596 --> 01:04:32.146 A:middle
SiriKit 开发

01:04:32.146 --> 01:04:33.556 A:middle
添加了 iOS 和 watchOS 上的

01:04:33.716 --> 01:04:35.836 A:middle
模拟器支持

01:04:37.076 --> 01:04:38.416 A:middle
最后是 Apple Music

01:04:39.196 --> 01:04:40.706 A:middle
使用 MusicKit 在你们的 app 中

01:04:40.766 --> 01:04:42.036 A:middle
添加音乐回放变得前所未有地简单

01:04:43.136 --> 01:04:44.706 A:middle
用户们现在可以直接在 app 内部

01:04:44.706 --> 01:04:46.456 A:middle
播放为 Apple Music

01:04:46.456 --> 01:04:48.276 A:middle
订阅客户准备的全部

01:04:48.276 --> 01:04:49.216 A:middle
4000 万首歌曲了

01:04:50.066 --> 01:04:51.186 A:middle
这对于健身 app 来说

01:04:51.186 --> 01:04:53.336 A:middle
更是好消息

01:04:53.336 --> 01:04:55.696 A:middle
现在你们不用中断锻炼

01:04:55.696 --> 01:04:57.426 A:middle
就能访问歌曲  播放列表

01:04:57.426 --> 01:04:58.396 A:middle
和广播电台了

01:04:59.536 --> 01:05:00.806 A:middle
这些只不过是

01:04:59.536 --> 01:05:00.806 A:middle
这些只不过是

01:05:00.806 --> 01:05:02.316 A:middle
对于 Apple 各种服务的

01:05:02.316 --> 01:05:03.566 A:middle
API 的一部分加强

01:05:04.466 --> 01:05:05.816 A:middle
接下来  给大家讲解

01:05:05.816 --> 01:05:07.366 A:middle
我们超棒的照片和

01:05:07.366 --> 01:05:08.716 A:middle
图像 API 改进的是 Sebastien

01:05:08.716 --> 01:05:09.816 A:middle
Marineau-Mes  欢迎他上场

01:05:10.796 --> 01:05:11.056 A:middle
Seb

01:05:12.516 --> 01:05:15.006 A:middle
[ 掌声 ]

01:05:15.506 --> 01:05:16.156 A:middle
&gt;&gt;  谢谢 Josh

01:05:17.216 --> 01:05:17.656 A:middle
谢谢

01:05:17.786 --> 01:05:18.756 A:middle
来这里真激动

01:05:18.756 --> 01:05:20.076 A:middle
我今天要讲的很多

01:05:20.076 --> 01:05:21.556 A:middle
咱们马上开始

01:05:21.976 --> 01:05:23.286 A:middle
首先  我们来说一说

01:05:23.286 --> 01:05:25.096 A:middle
macOS 上的新的照片项目扩展

01:05:26.236 --> 01:05:27.386 A:middle
你现在可以把创意性的

01:05:27.626 --> 01:05:29.326 A:middle
基于项目的特性

01:05:29.596 --> 01:05:30.576 A:middle
直接加入照片了

01:05:31.236 --> 01:05:32.696 A:middle
用户可以在 Mac App Store 里

01:05:32.696 --> 01:05:33.936 A:middle
轻易发现你们的新扩展

01:05:34.396 --> 01:05:35.966 A:middle
你把它准备好后

01:05:35.966 --> 01:05:38.196 A:middle
用户可以选择照片

01:05:38.196 --> 01:05:40.066 A:middle
回忆  或者相册

01:05:40.066 --> 01:05:41.316 A:middle
然后从 Create 菜单

01:05:41.316 --> 01:05:42.056 A:middle
选择扩展

01:05:42.596 --> 01:05:43.876 A:middle
Photos app

01:05:44.026 --> 01:05:45.526 A:middle
扩展不仅限于图像

01:05:45.726 --> 01:05:47.486 A:middle
还包括丰富的文本

01:05:47.486 --> 01:05:48.996 A:middle
这会让生成项目

01:05:48.996 --> 01:05:49.816 A:middle
完全自然

01:05:50.386 --> 01:05:51.846 A:middle
此外  我们还允许你

01:05:51.846 --> 01:05:53.506 A:middle
保留自己的项目数据

01:05:54.266 --> 01:05:56.356 A:middle
现在  你们的扩展

01:05:56.656 --> 01:05:57.906 A:middle
在 Photos app 内部运行

01:05:57.906 --> 01:05:59.096 A:middle
所以真的是无缝体验

01:06:00.556 --> 01:06:01.696 A:middle
当然  我们把它设计成

01:06:01.756 --> 01:06:02.786 A:middle
支持打印产品

01:06:02.786 --> 01:06:03.986 A:middle
这有一个好例子

01:06:04.456 --> 01:06:06.006 A:middle
但你可以用它做得更多

01:06:07.256 --> 01:06:08.676 A:middle
这里  有人在构建一个

01:06:08.676 --> 01:06:09.966 A:middle
网络出版应用

01:06:09.966 --> 01:06:11.956 A:middle
甚至是直接

01:06:11.956 --> 01:06:14.026 A:middle
从你的最爱照片中

01:06:14.096 --> 01:06:14.766 A:middle
订购带框打印

01:06:15.506 --> 01:06:16.746 A:middle
我们认为用户一定会

01:06:16.746 --> 01:06:18.056 A:middle
爱上你们用这个建立的

01:06:18.056 --> 01:06:19.126 A:middle
扩展去拓展

01:06:19.126 --> 01:06:20.356 A:middle
他们的照片

01:06:21.336 --> 01:06:23.256 A:middle
接下来是相机

01:06:24.196 --> 01:06:26.556 A:middle
在 iOS 11 中的更新

01:06:26.556 --> 01:06:28.986 A:middle
相机有一个轻量化的二维码探测器

01:06:28.986 --> 01:06:29.926 A:middle
你只需要把相机对准二维码

01:06:29.926 --> 01:06:30.636 A:middle
就可以了

01:06:31.036 --> 01:06:32.576 A:middle
二维码会自动被解码

01:06:32.576 --> 01:06:34.446 A:middle
并可以在合适的 app 中

01:06:34.446 --> 01:06:35.996 A:middle
打开深层链接

01:06:36.686 --> 01:06:37.186 A:middle
就像这样

01:06:38.516 --> 01:06:42.356 A:middle
[ 掌声 ]

01:06:42.856 --> 01:06:43.966 A:middle
作为开发者

01:06:43.966 --> 01:06:44.656 A:middle
这很容易使用

01:06:44.656 --> 01:06:45.676 A:middle
你只需采用

01:06:45.676 --> 01:06:47.136 A:middle
通用链接

01:06:47.136 --> 01:06:49.246 A:middle
我们甚至还支持

01:06:49.246 --> 01:06:51.666 A:middle
位置  通讯录  和 WiFi 网络

01:06:51.666 --> 01:06:52.076 A:middle
等二维码格式

01:06:52.936 --> 01:06:54.596 A:middle
接下来是

01:06:54.596 --> 01:06:55.596 A:middle
压缩与格式

01:06:56.246 --> 01:06:57.306 A:middle
今年我们在这方面的改进

01:06:57.306 --> 01:06:59.006 A:middle
真的非常大

01:07:00.196 --> 01:07:01.356 A:middle
当然  JPEG 是无所不在的

01:07:01.356 --> 01:07:02.706 A:middle
而且在过去 25 年中

01:07:02.706 --> 01:07:04.466 A:middle
为我们提供了很好的服务

01:07:04.466 --> 01:07:05.956 A:middle
但今天我们知道

01:07:05.956 --> 01:07:07.966 A:middle
有一些技术会提供

01:07:07.966 --> 01:07:09.066 A:middle
更好的压缩与

01:07:09.066 --> 01:07:09.786 A:middle
灵活性

01:07:10.516 --> 01:07:12.786 A:middle
这对 H.264 也一样

01:07:12.786 --> 01:07:13.816 A:middle
它也有超过 10 年的历史了

01:07:14.486 --> 01:07:15.786 A:middle
压缩很重要

01:07:15.846 --> 01:07:17.456 A:middle
但我们也要考虑到

01:07:17.456 --> 01:07:18.896 A:middle
其他的要求  所以让我们

01:07:18.896 --> 01:07:19.396 A:middle
看看这个

01:07:20.106 --> 01:07:21.806 A:middle
举例来说  现在

01:07:21.806 --> 01:07:23.706 A:middle
照片与视频之间的界限

01:07:23.766 --> 01:07:24.696 A:middle
已经很模糊了

01:07:24.696 --> 01:07:26.186 A:middle
我们所拍摄的很多东西

01:07:26.186 --> 01:07:27.266 A:middle
其实是这两种类型素材的

01:07:27.316 --> 01:07:28.086 A:middle
混合产物

01:07:29.016 --> 01:07:30.846 A:middle
我们也有新的传感器

01:07:30.846 --> 01:07:32.936 A:middle
它可以捕捉更丰富的图像

01:07:32.936 --> 01:07:34.306 A:middle
并显示它们

01:07:34.306 --> 01:07:35.016 A:middle
栩栩如生

01:07:35.566 --> 01:07:37.176 A:middle
说到底  无论我们选择什么格式

01:07:37.206 --> 01:07:38.226 A:middle
都必须跟上

01:07:38.226 --> 01:07:40.106 A:middle
日益提高的分辨率

01:07:40.846 --> 01:07:41.916 A:middle
所以  我们选择了

01:07:41.916 --> 01:07:44.216 A:middle
HEVC 作为编解码器  因为

01:07:44.456 --> 01:07:45.506 A:middle
它符合上述所有要求

01:07:45.926 --> 01:07:47.736 A:middle
它能在同等图像质量下

01:07:47.806 --> 01:07:49.396 A:middle
提供2倍压缩率

01:07:49.396 --> 01:07:50.646 A:middle
如果你考虑到数以十亿计的

01:07:50.716 --> 01:07:52.096 A:middle
照片与视频

01:07:52.096 --> 01:07:54.086 A:middle
或者应该说数以兆计

01:07:54.086 --> 01:07:56.046 A:middle
那么节省的空间是很惊人的

01:07:56.046 --> 01:07:57.396 A:middle
HEVC 也从很多

01:07:57.396 --> 01:07:59.026 A:middle
设备上得到了硬件加速

01:07:59.806 --> 01:08:01.506 A:middle
而且它还支持照片

01:07:59.806 --> 01:08:01.506 A:middle
而且它还支持照片

01:08:01.786 --> 01:08:04.326 A:middle
视频  4K 及更高分辨率

01:08:04.326 --> 01:08:05.846 A:middle
支持很多拍摄与显示的

01:08:05.936 --> 01:08:07.136 A:middle
新技术

01:08:08.146 --> 01:08:10.576 A:middle
我们还选择了一个新的

01:08:10.576 --> 01:08:13.206 A:middle
图像格式  名叫 HEIF

01:08:13.206 --> 01:08:14.546 A:middle
我习惯叫它 heef

01:08:14.546 --> 01:08:16.845 A:middle
你们可以跟我一起说 heef

01:08:18.276 --> 01:08:19.845 A:middle
HEIF 支持

01:08:19.845 --> 01:08:21.446 A:middle
复合素材的概念

01:08:21.526 --> 01:08:22.765 A:middle
所以在单一文件里

01:08:22.765 --> 01:08:24.055 A:middle
你可以放下一个或是更多的照片或图像

01:08:24.055 --> 01:08:25.076 A:middle
还可以是视频

01:08:25.076 --> 01:08:27.586 A:middle
还可以有辅助数据

01:08:27.586 --> 01:08:28.765 A:middle
比如 alpha 和景深

01:08:28.765 --> 01:08:30.446 A:middle
它也是高度可扩展的

01:08:30.666 --> 01:08:32.366 A:middle
它支持丰富的元数据

01:08:32.366 --> 01:08:34.486 A:middle
动画和序列  还有其他

01:08:34.486 --> 01:08:35.906 A:middle
媒体类型  比如音频

01:08:36.366 --> 01:08:38.486 A:middle
最后 HEIF 是 ISO 标准的

01:08:38.586 --> 01:08:40.305 A:middle
这对生态来说

01:08:40.305 --> 01:08:41.326 A:middle
非常重要

01:08:42.416 --> 01:08:44.506 A:middle
现在  我们的标准 API

01:08:44.506 --> 01:08:46.916 A:middle
会直接支持 HEVC 和

01:08:46.986 --> 01:08:47.446 A:middle
HEIF

01:08:47.836 --> 01:08:49.446 A:middle
总体上来说  它是显而易见的

01:08:49.526 --> 01:08:50.716 A:middle
不需要主动做什么

01:08:51.236 --> 01:08:52.586 A:middle
但有时也许你会想

01:08:52.586 --> 01:08:54.316 A:middle
明确控制格式

01:08:55.026 --> 01:08:56.706 A:middle
比如  如果你正想

01:08:56.706 --> 01:08:58.426 A:middle
在没有硬件加速的

01:08:58.685 --> 01:09:00.046 A:middle
老设备上播放一部

01:08:58.685 --> 01:09:00.046 A:middle
老设备上播放一部

01:09:00.046 --> 01:09:02.296 A:middle
高分辨率的影片

01:09:02.296 --> 01:09:03.886 A:middle
在这种情况下  我们为你准备了

01:09:03.886 --> 01:09:05.106 A:middle
一个 API  你可以用它

01:09:05.106 --> 01:09:06.866 A:middle
决定某个文件

01:09:06.866 --> 01:09:08.426 A:middle
在这个例子中是 HEVC 格式的电影

01:09:08.606 --> 01:09:09.386 A:middle
是否能够在这个设备上顺利播放

01:09:09.845 --> 01:09:11.725 A:middle
如果不行

01:09:11.725 --> 01:09:13.316 A:middle
我们能够自动回退到

01:09:13.316 --> 01:09:15.086 A:middle
老一点的格式

01:09:15.086 --> 01:09:16.305 A:middle
来保持良好的用户体验

01:09:17.666 --> 01:09:19.546 A:middle
现在  在我们的生态系统内部

01:09:19.546 --> 01:09:21.506 A:middle
我们已经自动使用 HEVC 和 HEIF 格式

01:09:21.756 --> 01:09:22.826 A:middle
在所有兼容的设备上

01:09:22.826 --> 01:09:23.886 A:middle
分享文件了

01:09:24.496 --> 01:09:26.265 A:middle
但如果我们不确定

01:09:26.265 --> 01:09:28.185 A:middle
对方能否解码

01:09:28.185 --> 01:09:30.326 A:middle
这些新格式  我们就会

01:09:30.326 --> 01:09:31.935 A:middle
以兼容性为先

01:09:31.935 --> 01:09:33.526 A:middle
自动转码成 JPEG 和

01:09:33.555 --> 01:09:35.206 A:middle
H.264 格式

01:09:35.206 --> 01:09:36.386 A:middle
举个例子

01:09:36.736 --> 01:09:38.496 A:middle
把照片放入 email 附件

01:09:39.616 --> 01:09:40.685 A:middle
我真的建议大家

01:09:40.685 --> 01:09:41.946 A:middle
在采用这些新格式

01:09:42.015 --> 01:09:43.895 A:middle
把它们放进你的 app 时

01:09:43.895 --> 01:09:44.736 A:middle
要多考虑一下兼容性

01:09:45.935 --> 01:09:47.276 A:middle
这就是关于压缩的内容

01:09:47.276 --> 01:09:49.026 A:middle
接下来让我来说一说

01:09:49.026 --> 01:09:51.246 A:middle
另一个新主题  景深

01:09:52.196 --> 01:09:53.456 A:middle
我们都看到了 iPhone 7 Plus

01:09:53.456 --> 01:09:54.956 A:middle
上面的人像模式

01:09:55.006 --> 01:09:56.626 A:middle
它使用双摄像头生成

01:09:56.936 --> 01:09:57.606 A:middle
景深效果

01:09:58.286 --> 01:09:59.846 A:middle
我们是这样做的

01:10:00.456 --> 01:10:02.536 A:middle
我们用两个摄像头

01:10:02.956 --> 01:10:04.746 A:middle
同时捕捉图像

01:10:04.746 --> 01:10:06.796 A:middle
然后使用立体视法计算景深

01:10:07.096 --> 01:10:08.226 A:middle
这和人类的视觉原理是一样的

01:10:09.226 --> 01:10:10.526 A:middle
我们把这个储存在

01:10:10.526 --> 01:10:12.876 A:middle
深度图上面

01:10:13.156 --> 01:10:14.436 A:middle
在人像模式下  会拍摄照片

01:10:14.436 --> 01:10:15.966 A:middle
和深度图  然后

01:10:15.966 --> 01:10:17.806 A:middle
我们会用它来模糊掉

01:10:17.806 --> 01:10:18.696 A:middle
背景中的物体

01:10:19.526 --> 01:10:21.026 A:middle
但最酷的是在

01:10:21.026 --> 01:10:22.966 A:middle
iOS 11 里  我们把

01:10:22.966 --> 01:10:24.526 A:middle
深度图存储成拍摄的一部分

01:10:24.526 --> 01:10:26.656 A:middle
而且我们还要让你

01:10:26.656 --> 01:10:29.586 A:middle
和你的 app 能够访问

01:10:29.586 --> 01:10:30.386 A:middle
照片和深度图

01:10:30.386 --> 01:10:32.406 A:middle
你可以加载它

01:10:32.406 --> 01:10:34.466 A:middle
使用它完成你自己的

01:10:34.726 --> 01:10:35.486 A:middle
创造性效果

01:10:35.486 --> 01:10:36.826 A:middle
我来给你们展示

01:10:36.826 --> 01:10:37.666 A:middle
几个例子

01:10:37.976 --> 01:10:40.696 A:middle
我可以拿出这张照片

01:10:40.696 --> 01:10:42.286 A:middle
我决定把背景

01:10:42.286 --> 01:10:44.356 A:middle
变成单色的

01:10:44.896 --> 01:10:46.306 A:middle
这样就突出主题

01:10:46.306 --> 01:10:47.466 A:middle
我需要使用更加艺术化的

01:10:47.466 --> 01:10:48.196 A:middle
效果

01:10:48.456 --> 01:10:49.696 A:middle
也许我可以把这个替换成

01:10:49.696 --> 01:10:51.096 A:middle
带模糊效果的南瓜田

01:10:53.376 --> 01:10:54.846 A:middle
你们可以想出

01:10:54.846 --> 01:10:55.486 A:middle
更具创意的效果

01:10:55.486 --> 01:10:56.246 A:middle
实际上  这些不过是

01:10:56.246 --> 01:10:56.876 A:middle
一些示例

01:10:57.226 --> 01:10:58.796 A:middle
可能性是无穷无尽的

01:11:00.196 --> 01:11:02.506 A:middle
这是静态图像的景深

01:11:03.296 --> 01:11:05.246 A:middle
我们还让你们能够使用

01:11:05.246 --> 01:11:06.986 A:middle
相机 API 访问较低保真度的

01:11:06.986 --> 01:11:08.756 A:middle
实时 Depths 流

01:11:08.946 --> 01:11:10.926 A:middle
这让你能够构建

01:11:10.926 --> 01:11:12.376 A:middle
基于相机的应用

01:11:12.376 --> 01:11:14.206 A:middle
让它们以新奇的方式使用 Depths

01:11:15.546 --> 01:11:17.016 A:middle
Depths 是对于我们的静态图像

01:11:17.016 --> 01:11:18.346 A:middle
和相机捕捉 API 的

01:11:18.346 --> 01:11:20.496 A:middle
一个简单的扩展

01:11:20.496 --> 01:11:21.916 A:middle
我们期待着见到

01:11:21.916 --> 01:11:23.236 A:middle
你们在这些新 API 之上

01:11:23.236 --> 01:11:24.316 A:middle
构建出的东西

01:11:24.516 --> 01:11:25.526 A:middle
非常非常期待

01:11:26.256 --> 01:11:27.126 A:middle
接下来  对

01:11:27.586 --> 01:11:29.836 A:middle
就是这样

01:11:30.516 --> 01:11:34.236 A:middle
[ 掌声 ]

01:11:34.736 --> 01:11:36.006 A:middle
接下来  我们来说说新的

01:11:36.006 --> 01:11:36.896 A:middle
影像 API

01:11:36.896 --> 01:11:38.546 A:middle
当然  计算机影像

01:11:38.546 --> 01:11:39.716 A:middle
和机器学习早已

01:11:39.716 --> 01:11:41.716 A:middle
成为了许多 Apple 产品

01:11:41.716 --> 01:11:42.476 A:middle
特性的基础

01:11:42.476 --> 01:11:43.356 A:middle
你们今天上午已经了解过了

01:11:43.866 --> 01:11:45.226 A:middle
也在 Store 里见过

01:11:45.336 --> 01:11:47.176 A:middle
使用计算机影像的 app 了

01:11:47.696 --> 01:11:48.896 A:middle
其中一个是热狗探测器 app

01:11:48.896 --> 01:11:50.316 A:middle
HBO 的剧集《硅谷》

01:11:50.316 --> 01:11:51.876 A:middle
里面提到过它

01:11:51.876 --> 01:11:54.416 A:middle
但当然  这些 app

01:11:54.416 --> 01:11:56.336 A:middle
全都使用计算机影像

01:11:56.336 --> 01:11:57.396 A:middle
把计算机影像

01:11:57.396 --> 01:11:57.876 A:middle
用在自己身上

01:11:58.306 --> 01:11:59.626 A:middle
我们今年要做的

01:11:59.626 --> 01:12:00.856 A:middle
是让我们所有的

01:11:59.626 --> 01:12:00.856 A:middle
是让我们所有的

01:12:00.856 --> 01:12:02.756 A:middle
内置功能都能够

01:12:02.756 --> 01:12:04.376 A:middle
为你们所用

01:12:05.166 --> 01:12:06.836 A:middle
你们可以做的有

01:12:06.836 --> 01:12:07.886 A:middle
面部特征点检测

01:12:08.816 --> 01:12:09.746 A:middle
我们已经见到过的矩形检测

01:12:11.096 --> 01:12:15.206 A:middle
文本  这个是

01:12:15.206 --> 01:12:16.346 A:middle
条形码检测

01:12:16.926 --> 01:12:18.206 A:middle
还有对象追踪

01:12:18.206 --> 01:12:19.636 A:middle
还有很多很多别的东西

01:12:20.446 --> 01:12:22.306 A:middle
其中一个就是

01:12:22.306 --> 01:12:24.256 A:middle
Vision 和 Core ML 的

01:12:24.256 --> 01:12:24.856 A:middle
整合

01:12:24.976 --> 01:12:26.036 A:middle
这会让你自己的

01:12:26.036 --> 01:12:27.386 A:middle
机器学习和

01:12:27.386 --> 01:12:29.326 A:middle
计算机影像模型

01:12:29.326 --> 01:12:30.426 A:middle
把它们作为 Vision 的

01:12:30.426 --> 01:12:31.856 A:middle
图像处理途径的一部分

01:12:31.856 --> 01:12:33.736 A:middle
来运行  这样我们就能

01:12:33.736 --> 01:12:35.286 A:middle
以非常新奇的方式扩展我们的

01:12:35.286 --> 01:12:35.936 A:middle
影像框架

01:12:36.576 --> 01:12:37.756 A:middle
为了给大家展示相关案例

01:12:37.756 --> 01:12:38.996 A:middle
我想请 Emily Kim 上台

01:12:38.996 --> 01:12:41.166 A:middle
请她给我们

01:12:41.166 --> 01:12:43.636 A:middle
展示一个很棒的演示 app

01:12:43.786 --> 01:12:44.136 A:middle
Emily

01:12:45.516 --> 01:12:50.646 A:middle
[ 掌声 ]

01:12:51.146 --> 01:12:52.846 A:middle
&gt;&gt;  嗨  我想给大家展示一个

01:12:52.846 --> 01:12:53.966 A:middle
演示 app 我们写这个 app

01:12:53.966 --> 01:12:55.296 A:middle
是为了展示 3 个 iOS 11 的

01:12:55.296 --> 01:12:57.166 A:middle
最新技术

01:12:57.646 --> 01:13:00.196 A:middle
Core ML Vision 和 Depth

01:12:57.646 --> 01:13:00.196 A:middle
Core ML Vision 和 Depth

01:13:00.406 --> 01:13:01.526 A:middle
我要请 Seb 在这个演示中

01:13:01.526 --> 01:13:02.726 A:middle
帮我一把

01:13:02.966 --> 01:13:04.306 A:middle
看上去他快要准备好了

01:13:07.286 --> 01:13:07.746 A:middle
好的

01:13:08.066 --> 01:13:09.326 A:middle
首先  我们要打开这个

01:13:09.356 --> 01:13:10.066 A:middle
应用

01:13:10.636 --> 01:13:13.886 A:middle
你们可以看到

01:13:13.886 --> 01:13:15.316 A:middle
这个 app 识别出 Seb

01:13:15.316 --> 01:13:17.716 A:middle
拿着一个钢琴键盘

01:13:17.716 --> 01:13:18.786 A:middle
于是就在他的嘴边

01:13:18.786 --> 01:13:20.436 A:middle
放了一个气泡

01:13:20.436 --> 01:13:22.766 A:middle
里面是一个钢琴的 emoji

01:13:22.766 --> 01:13:25.456 A:middle
咱们快速照张相

01:13:25.456 --> 01:13:26.806 A:middle
好了  这就是一张

01:13:26.806 --> 01:13:28.026 A:middle
Seb 拿着键盘的

01:13:28.026 --> 01:13:28.586 A:middle
照片

01:13:29.166 --> 01:13:31.086 A:middle
我不想这么说 Seb

01:13:31.186 --> 01:13:32.816 A:middle
但你看上去有点呆

01:13:33.116 --> 01:13:35.006 A:middle
我们可以试试别的吗

01:13:35.146 --> 01:13:35.966 A:middle
&gt;&gt;  好的

01:13:37.076 --> 01:13:38.556 A:middle
&gt;&gt;  我这么说可是

01:13:38.556 --> 01:13:39.336 A:middle
绝无冒犯之意

01:13:41.826 --> 01:13:42.736 A:middle
好吧

01:13:42.736 --> 01:13:44.276 A:middle
咱们看看你的 app

01:13:44.276 --> 01:13:46.376 A:middle
是否认出键盘之外的

01:13:47.106 --> 01:13:47.476 A:middle
东西

01:13:47.476 --> 01:13:49.396 A:middle
我们会回来的

01:13:50.316 --> 01:13:50.736 A:middle
好的

01:13:50.736 --> 01:13:51.746 A:middle
我们现在看到 Seb

01:13:51.746 --> 01:13:52.556 A:middle
拿着一把吉他

01:13:52.656 --> 01:13:54.376 A:middle
app 知道这一点

01:13:54.376 --> 01:13:55.816 A:middle
于是它就把一个吉他 emoji

01:13:55.816 --> 01:13:56.766 A:middle
放在了他嘴边的气泡里

01:13:57.006 --> 01:13:58.426 A:middle
咱们再照张相

01:14:00.396 --> 01:14:01.916 A:middle
哇  Seb 你看上去

01:14:01.916 --> 01:14:02.696 A:middle
比刚才酷多了

01:14:03.416 --> 01:14:03.866 A:middle
你有一些酷酷的气质

01:14:04.016 --> 01:14:05.016 A:middle
[ 笑声 ]

01:14:05.516 --> 01:14:11.006 A:middle
[ 掌声 ]

01:14:11.506 --> 01:14:12.596 A:middle
是的  如果你注意到了

01:14:12.636 --> 01:14:14.486 A:middle
他被加上了很酷的摇滚明星墨镜

01:14:14.546 --> 01:14:16.296 A:middle
后面还多了一些欢呼的粉丝

01:14:16.296 --> 01:14:19.366 A:middle
在我们跳转到

01:14:19.366 --> 01:14:20.676 A:middle
Xcode 上看看

01:14:20.676 --> 01:14:21.716 A:middle
写一个让 Seb 都能变酷的 app

01:14:21.716 --> 01:14:23.026 A:middle
有多么简单之前

01:14:23.076 --> 01:14:24.646 A:middle
咱们先为 Seb 鼓掌

01:14:24.646 --> 01:14:25.706 A:middle
感谢他的

01:14:25.706 --> 01:14:26.336 A:middle
大度精神

01:14:27.516 --> 01:14:32.806 A:middle
[ 掌声 ]

01:14:33.306 --> 01:14:34.096 A:middle
好的

01:14:34.356 --> 01:14:35.436 A:middle
这是个标准的

01:14:35.436 --> 01:14:36.746 A:middle
UIKit 和 AVFoundation

01:14:36.746 --> 01:14:37.906 A:middle
应用  所以我就不多去

01:14:37.906 --> 01:14:39.016 A:middle
讲它的细节了

01:14:39.596 --> 01:14:41.136 A:middle
我想主要讲一讲

01:14:41.136 --> 01:14:42.306 A:middle
你们看到的三个新地方

01:14:42.306 --> 01:14:44.966 A:middle
对象分类

01:14:44.966 --> 01:14:46.946 A:middle
面部特征点识别  和景深

01:14:47.076 --> 01:14:48.166 A:middle
首先  我们先来看看

01:14:48.166 --> 01:14:49.276 A:middle
对象分类

01:14:50.086 --> 01:14:51.536 A:middle
借助 Core ML 的力量

01:14:51.536 --> 01:14:52.856 A:middle
你可以把经过训练的

01:14:52.856 --> 01:14:54.026 A:middle
机器学习模型整合到

01:14:54.026 --> 01:14:54.796 A:middle
你的 app 里

01:14:54.796 --> 01:14:55.866 A:middle
你们很多人可能会去

01:14:55.866 --> 01:14:56.846 A:middle
使用你们自己的

01:14:57.096 --> 01:14:58.216 A:middle
但我们还是想给你们展示一下

01:14:58.216 --> 01:14:59.966 A:middle
这有多么容易

01:14:59.966 --> 01:15:01.066 A:middle
所以我们只是拿来一个现成的

01:14:59.966 --> 01:15:01.066 A:middle
所以我们只是拿来一个现成的

01:15:01.066 --> 01:15:02.206 A:middle
模型  并把它放到我们的

01:15:02.256 --> 01:15:02.626 A:middle
项目里

01:15:02.876 --> 01:15:03.626 A:middle
超级简单

01:15:04.836 --> 01:15:06.106 A:middle
你们可以看到

01:15:06.106 --> 01:15:07.386 A:middle
我们只需要把这个文件模型

01:15:07.386 --> 01:15:09.756 A:middle
加载到 Core ML 里

01:15:09.756 --> 01:15:11.076 A:middle
再传到 Vision 上面

01:15:11.076 --> 01:15:12.226 A:middle
就能把它运行到图像上

01:15:13.506 --> 01:15:14.996 A:middle
相机预览的各帧出现时

01:15:14.996 --> 01:15:16.606 A:middle
我们只需要建立一个

01:15:16.606 --> 01:15:18.496 A:middle
Core ML 请求  让它

01:15:18.496 --> 01:15:19.466 A:middle
在每一帧上运行就可以了

01:15:19.946 --> 01:15:21.536 A:middle
一旦我们识别出了某个对象

01:15:21.606 --> 01:15:23.336 A:middle
比如那把吉他

01:15:23.336 --> 01:15:24.426 A:middle
这个请求的返回的结果

01:15:24.426 --> 01:15:25.666 A:middle
就会提示它在场景中

01:15:25.666 --> 01:15:27.246 A:middle
发现了一把吉他

01:15:27.246 --> 01:15:28.236 A:middle
然后我们就可以

01:15:28.236 --> 01:15:29.656 A:middle
把那个吉他 emoji 放在气泡里了

01:15:30.706 --> 01:15:32.006 A:middle
大家记得  在刚才的演示中

01:15:32.006 --> 01:15:33.466 A:middle
气泡是放在 Seb

01:15:33.466 --> 01:15:34.756 A:middle
的嘴角旁边的

01:15:35.426 --> 01:15:36.676 A:middle
那么我们是怎么知道

01:15:36.676 --> 01:15:37.966 A:middle
该把气泡放在哪里的呢

01:15:38.256 --> 01:15:39.236 A:middle
我们来看一看面部

01:15:39.266 --> 01:15:40.136 A:middle
特征点识别器

01:15:41.246 --> 01:15:42.876 A:middle
你可以利用 Vision

01:15:42.876 --> 01:15:44.066 A:middle
找到面部特征点

01:15:44.066 --> 01:15:45.566 A:middle
包括你的两只眼睛

01:15:46.016 --> 01:15:47.316 A:middle
鼻子  还有我们最感兴趣的地方

01:15:47.316 --> 01:15:48.506 A:middle
也就是嘴巴

01:15:49.246 --> 01:15:52.486 A:middle
我们只需要再次建立

01:15:52.556 --> 01:15:54.466 A:middle
一个面部特征点请求

01:15:54.466 --> 01:15:55.426 A:middle
然后在相机发来的

01:15:55.426 --> 01:15:56.546 A:middle
帧上面运行

01:15:57.306 --> 01:15:58.646 A:middle
请求返回并表示

01:15:58.646 --> 01:15:59.716 A:middle
它在面部找到了

01:15:59.716 --> 01:16:02.156 A:middle
特征点  然后我们就只需要

01:15:59.716 --> 01:16:02.156 A:middle
特征点  然后我们就只需要

01:16:02.156 --> 01:16:03.896 A:middle
去问  嘴巴在哪里

01:16:03.896 --> 01:16:04.976 A:middle
然后就能把气泡放在合适位置

01:16:04.976 --> 01:16:06.056 A:middle
让它看上去

01:16:06.056 --> 01:16:06.966 A:middle
就好像从 Seb 的嘴巴里出来一样

01:16:08.086 --> 01:16:09.426 A:middle
我们还使用面部特征点

01:16:09.426 --> 01:16:10.916 A:middle
找到 Seb 的每只眼球

01:16:10.956 --> 01:16:11.676 A:middle
以此确定要把

01:16:11.676 --> 01:16:13.166 A:middle
那张吉他酷照中的墨镜

01:16:13.166 --> 01:16:14.126 A:middle
放在他脸上的什么地方

01:16:15.066 --> 01:16:16.896 A:middle
同样是在那张照片里

01:16:16.896 --> 01:16:17.906 A:middle
大家记得  我们换掉了背景

01:16:17.906 --> 01:16:18.916 A:middle
让他站到了一群

01:16:18.916 --> 01:16:20.176 A:middle
粉丝的前面

01:16:20.426 --> 01:16:21.806 A:middle
我们利用景深做到这一点

01:16:21.806 --> 01:16:22.776 A:middle
我们来深入看一下

01:16:26.156 --> 01:16:28.186 A:middle
现在在你用相机

01:16:28.266 --> 01:16:29.666 A:middle
拍摄图像后  很容易能得到

01:16:29.666 --> 01:16:31.316 A:middle
景深数据

01:16:31.316 --> 01:16:32.366 A:middle
你们中拍摄图像后需要

01:16:32.366 --> 01:16:34.786 A:middle
提取景深信息

01:16:34.786 --> 01:16:36.366 A:middle
我们写了一个

01:16:36.366 --> 01:16:37.736 A:middle
定制的内核

01:16:37.736 --> 01:16:39.116 A:middle
把景深信息

01:16:39.116 --> 01:16:41.486 A:middle
使用在拍摄的图像上

01:16:41.486 --> 01:16:43.276 A:middle
把 Seb 传送到摇滚巨星的世界去

01:16:44.486 --> 01:16:46.026 A:middle
我希望大家已经明白

01:16:46.026 --> 01:16:47.716 A:middle
在你们的 app 上使用

01:16:47.716 --> 01:16:49.926 A:middle
Core ML Vision 和 Depth

01:16:49.926 --> 01:16:50.606 A:middle
是多容易了

01:16:50.896 --> 01:16:52.936 A:middle
交还给你 Seb

01:16:53.516 --> 01:16:57.756 A:middle
[ 掌声 ]

01:16:58.256 --> 01:16:59.986 A:middle
&gt;&gt;  我必须得说

01:16:59.986 --> 01:17:01.596 A:middle
在那几分钟里

01:16:59.986 --> 01:17:01.596 A:middle
在那几分钟里

01:17:02.186 --> 01:17:03.396 A:middle
摇滚巨星的世界

01:17:03.396 --> 01:17:04.276 A:middle
感觉真爽

01:17:04.956 --> 01:17:07.056 A:middle
谢谢 Emily

01:17:07.056 --> 01:17:07.726 A:middle
很棒的演示

01:17:07.726 --> 01:17:09.306 A:middle
让我们再来深入看看

01:17:09.306 --> 01:17:09.846 A:middle
Core ML

01:17:10.336 --> 01:17:11.636 A:middle
Core ML 实际上是

01:17:11.636 --> 01:17:12.946 A:middle
帮助你在你的 app 里

01:17:12.946 --> 01:17:14.416 A:middle
建立新的体验

01:17:14.416 --> 01:17:15.786 A:middle
让你很容易利用

01:17:15.786 --> 01:17:16.406 A:middle
机器学习模型

01:17:17.296 --> 01:17:19.206 A:middle
这样你的应用就可以

01:17:19.206 --> 01:17:20.306 A:middle
利用特定领域的

01:17:20.306 --> 01:17:20.896 A:middle
框架了

01:17:21.036 --> 01:17:21.836 A:middle
我们已经看到了 Vision

01:17:21.836 --> 01:17:22.866 A:middle
还有自然语言

01:17:22.866 --> 01:17:23.586 A:middle
处理

01:17:23.876 --> 01:17:25.506 A:middle
或者直接使用

01:17:25.506 --> 01:17:26.476 A:middle
机器学习框架

01:17:26.966 --> 01:17:28.256 A:middle
所有这些都得到

01:17:28.256 --> 01:17:29.936 A:middle
Accelerate 和 Metal Shaders 的助力

01:17:30.156 --> 01:17:31.366 A:middle
真的会给你

01:17:31.366 --> 01:17:32.336 A:middle
最好的性能

01:17:33.406 --> 01:17:34.946 A:middle
Core ML 本身就提供

01:17:34.946 --> 01:17:36.496 A:middle
丰富的原语

01:17:36.566 --> 01:17:37.576 A:middle
来把当前最新的机器学习

01:17:37.576 --> 01:17:39.266 A:middle
模型整合到你的 app 中

01:17:40.166 --> 01:17:40.986 A:middle
我们今天上午已经了解过了

01:17:41.806 --> 01:17:42.926 A:middle
除了支持广泛的

01:17:42.926 --> 01:17:44.546 A:middle
超过 30 层的深度学习模型

01:17:44.546 --> 01:17:46.666 A:middle
它还支持

01:17:46.716 --> 01:17:47.586 A:middle
标准机器学习模型

01:17:47.586 --> 01:17:48.946 A:middle
比如树状集成

01:17:48.946 --> 01:17:51.416 A:middle
SVM 和广义线性模型等等

01:17:51.526 --> 01:17:52.676 A:middle
这样的目的是

01:17:52.676 --> 01:17:54.626 A:middle
让你能够把它用在

01:17:54.626 --> 01:17:55.956 A:middle
很多类型的应用上

01:17:55.956 --> 01:17:57.276 A:middle
包括手写识别

01:17:57.646 --> 01:17:58.966 A:middle
图像分类

01:17:58.966 --> 01:18:00.956 A:middle
音乐标签

01:17:58.966 --> 01:18:00.956 A:middle
音乐标签

01:18:00.956 --> 01:18:02.416 A:middle
手写识别

01:18:02.416 --> 01:18:03.106 A:middle
等等很多类型的应用

01:18:03.106 --> 01:18:04.186 A:middle
其他的域也有很多能

01:18:04.186 --> 01:18:05.236 A:middle
为你所用

01:18:05.406 --> 01:18:06.436 A:middle
你们要如何获得这些模型呢

01:18:06.946 --> 01:18:08.576 A:middle
我们让你们能够通过

01:18:08.576 --> 01:18:10.376 A:middle
Turi Caffe 和 Keras 等工具

01:18:10.466 --> 01:18:12.426 A:middle
访问机器学习群落

01:18:12.426 --> 01:18:13.926 A:middle
Keras 是 TensorFlow 的一个

01:18:13.926 --> 01:18:15.466 A:middle
流行的图书馆

01:18:16.086 --> 01:18:17.076 A:middle
作为开发者

01:18:17.076 --> 01:18:18.156 A:middle
你们的工作流是怎样的呢

01:18:18.756 --> 01:18:20.326 A:middle
比如你用 Caffe

01:18:20.326 --> 01:18:22.216 A:middle
训练你自己的模型

01:18:22.216 --> 01:18:24.326 A:middle
或者也许像 Emily 那样

01:18:24.326 --> 01:18:25.346 A:middle
从网上选择一个

01:18:25.346 --> 01:18:26.336 A:middle
预先训练过的模型

01:18:26.676 --> 01:18:28.326 A:middle
然后在 Converter 工具中

01:18:28.326 --> 01:18:29.586 A:middle
运行那个模型

01:18:29.586 --> 01:18:31.076 A:middle
那个 Converter 工具

01:18:31.076 --> 01:18:33.586 A:middle
产生一个可在 Core ML 兼容的

01:18:33.586 --> 01:18:34.096 A:middle
格式

01:18:34.416 --> 01:18:36.106 A:middle
然后把它拖拽到

01:18:36.106 --> 01:18:37.886 A:middle
Xcode 里  然后就可以轻松地

01:18:37.886 --> 01:18:39.556 A:middle
开始在你的应用里使用它了

01:18:40.156 --> 01:18:41.526 A:middle
我们还开放了

01:18:41.526 --> 01:18:43.236 A:middle
Core ML Converter 工具的源代码

01:18:43.236 --> 01:18:45.006 A:middle
这样在未来它就能

01:18:45.006 --> 01:18:46.666 A:middle
更广泛地被使用了

01:18:47.616 --> 01:18:48.616 A:middle
我们还注重性能表现

01:18:48.616 --> 01:18:50.126 A:middle
因此它在设备上

01:18:50.126 --> 01:18:50.816 A:middle
运行良好

01:18:51.786 --> 01:18:53.326 A:middle
我们做的包括

01:18:53.326 --> 01:18:54.746 A:middle
图形优化以及

01:18:54.746 --> 01:18:56.046 A:middle
自动将多个操作融合到一起

01:18:57.136 --> 01:18:58.286 A:middle
我们还自动分析

01:18:58.286 --> 01:18:59.916 A:middle
你的神经网络

01:18:59.916 --> 01:19:01.566 A:middle
以便更好地利用

01:18:59.916 --> 01:19:01.566 A:middle
以便更好地利用

01:19:01.566 --> 01:19:02.196 A:middle
硬件加速

01:19:03.106 --> 01:19:04.336 A:middle
把所有这些加在一起

01:19:04.406 --> 01:19:06.246 A:middle
Core ML 会真的让你能够

01:19:06.246 --> 01:19:07.556 A:middle
轻松地利用机器学习的力量

01:19:07.556 --> 01:19:09.096 A:middle
制作出真正智能的

01:19:09.096 --> 01:19:10.596 A:middle
应用

01:19:11.356 --> 01:19:13.186 A:middle
它使用简便

01:19:13.186 --> 01:19:14.686 A:middle
在我们所有的平台上

01:19:14.686 --> 01:19:16.446 A:middle
性能良好  效率很高

01:19:16.446 --> 01:19:17.906 A:middle
它真的能够让你把你的

01:19:17.906 --> 01:19:19.486 A:middle
下一代智能 app

01:19:19.486 --> 01:19:21.286 A:middle
用在数以亿计的

01:19:21.286 --> 01:19:22.996 A:middle
利用 Core ML 的设备上

01:19:23.416 --> 01:19:24.766 A:middle
我们已经迫不及待地想

01:19:24.766 --> 01:19:25.986 A:middle
看到你们使用它

01:19:25.986 --> 01:19:28.376 A:middle
以及我们今天讲到的

01:19:28.376 --> 01:19:30.046 A:middle
众多其他 API 创造出的成果

01:19:30.936 --> 01:19:32.636 A:middle
接下来  我想请

01:19:32.636 --> 01:19:34.706 A:middle
Jeremy Sandmel 上台

01:19:34.706 --> 01:19:36.216 A:middle
来讲一讲 Metal 和graphics

01:19:36.646 --> 01:19:37.006 A:middle
Jeremy

01:19:37.006 --> 01:19:37.426 A:middle
&gt;&gt; 谢谢 Seb

01:19:41.146 --> 01:19:43.146 A:middle
[ 掌声 ]

01:19:43.276 --> 01:19:43.646 A:middle
谢谢 Seb

01:19:45.216 --> 01:19:46.646 A:middle
我们开发了Metal

01:19:46.646 --> 01:19:48.706 A:middle
它驱动我们的 iOS

01:19:48.706 --> 01:19:50.286 A:middle
是 macOS 和 tvOS 产品上

01:19:50.286 --> 01:19:53.386 A:middle
性能超强的 GPU 最高效的方式

01:19:55.456 --> 01:19:56.656 A:middle
推出它之后

01:19:56.896 --> 01:19:58.226 A:middle
我们极大地扩展了

01:19:58.226 --> 01:19:59.646 A:middle
Metal 支持先进的

01:19:59.646 --> 01:20:01.446 A:middle
渲染  制图  以及其他

01:19:59.646 --> 01:20:01.446 A:middle
渲染  制图  以及其他

01:20:01.506 --> 01:20:03.386 A:middle
开发者呼声最高的计算特性

01:20:04.016 --> 01:20:06.026 A:middle
其结果是非常惊人的

01:20:07.366 --> 01:20:09.356 A:middle
在 iOS App Store 里有超过

01:20:09.456 --> 01:20:11.076 A:middle
143000 个开发者的

01:20:11.076 --> 01:20:12.356 A:middle
app 它们可以直接调用

01:20:12.706 --> 01:20:13.926 A:middle
Metal API

01:20:14.086 --> 01:20:16.876 A:middle
但我们同时也在

01:20:16.876 --> 01:20:18.096 A:middle
Metal 上构建着自己的系统框架

01:20:18.896 --> 01:20:19.666 A:middle
你们今天已经了解过

01:20:19.666 --> 01:20:20.176 A:middle
其中一些了

01:20:20.646 --> 01:20:21.596 A:middle
比如  如果你在用

01:20:21.596 --> 01:20:23.226 A:middle
UIKit 绘制用户界面

01:20:23.536 --> 01:20:25.456 A:middle
或者用 MapKit 绘制地图

01:20:25.456 --> 01:20:26.226 A:middle
那么你其实就在使用 Metal

01:20:26.826 --> 01:20:29.466 A:middle
实际上  在 App Store 中

01:20:29.596 --> 01:20:31.546 A:middle
有超过170万个 app

01:20:31.666 --> 01:20:33.186 A:middle
通过 Apple 系统框架使用 Metal

01:20:33.386 --> 01:20:34.506 A:middle
并且自动从

01:20:34.506 --> 01:20:35.826 A:middle
Metal 的性能和

01:20:35.826 --> 01:20:37.416 A:middle
功效中获益

01:20:38.646 --> 01:20:40.216 A:middle
开发者把 Metal 用在了

01:20:40.216 --> 01:20:42.276 A:middle
非常了不起的地方

01:20:42.276 --> 01:20:43.756 A:middle
比如 Serif Labs

01:20:43.756 --> 01:20:45.296 A:middle
就在 iPad 上的新

01:20:45.296 --> 01:20:47.206 A:middle
Affinity Photo 中的图像和照片编辑中

01:20:47.206 --> 01:20:47.806 A:middle
用到了它

01:20:49.166 --> 01:20:50.936 A:middle
还有 MAXON 即将发布的

01:20:50.936 --> 01:20:53.906 A:middle
Cinema 4D 就采用了

01:20:53.906 --> 01:20:55.446 A:middle
AMD的 Metal 加速的 ProRender 技术

01:20:55.486 --> 01:20:56.606 A:middle
进行专业 3D 建模和渲染

01:20:57.886 --> 01:20:59.416 A:middle
还有精彩的科幻冒险游戏

01:20:59.416 --> 01:21:01.666 A:middle
“Obduction” 制作者是 Cyan 公司

01:20:59.416 --> 01:21:01.666 A:middle
“Obduction” 制作者是 Cyan 公司

01:21:01.666 --> 01:21:03.356 A:middle
也就是游戏 “Myst” 的制作者

01:21:04.466 --> 01:21:07.216 A:middle
还有 Feral Interactive 公司

01:21:07.216 --> 01:21:08.436 A:middle
制作的精彩的赛车游戏

01:21:08.436 --> 01:21:08.946 A:middle
“F1 2016”

01:21:09.876 --> 01:21:11.956 A:middle
实际上 Feral 的 Ian Bullock

01:21:11.956 --> 01:21:13.936 A:middle
说过 Metal 更丰富的

01:21:13.936 --> 01:21:15.526 A:middle
特性和更低的系统开销

01:21:15.526 --> 01:21:16.906 A:middle
让他们能够把最新的游戏

01:21:16.906 --> 01:21:18.186 A:middle
带入 Mac 其所达到的

01:21:18.646 --> 01:21:19.736 A:middle
帧率和效果是

01:21:19.796 --> 01:21:21.056 A:middle
以前不可能实现的

01:21:22.046 --> 01:21:24.886 A:middle
2013 年起  Metal 就得到了

01:21:24.886 --> 01:21:27.016 A:middle
iOS 设备的广泛支持

01:21:27.126 --> 01:21:30.396 A:middle
在 Mac 设备上更早  2012 年就这样了

01:21:30.396 --> 01:21:32.526 A:middle
这意味着

01:21:32.526 --> 01:21:35.286 A:middle
现在有超过 9 亿个产品

01:21:35.366 --> 01:21:37.566 A:middle
支持 Metal 包括 macOS

01:21:37.896 --> 01:21:39.036 A:middle
iOS 和 tvOS 等系统

01:21:39.126 --> 01:21:40.566 A:middle
这真的很惊人

01:21:40.566 --> 01:21:42.256 A:middle
因此我们今天

01:21:42.256 --> 01:21:43.536 A:middle
非常激动  因为我们要发布

01:21:43.536 --> 01:21:45.356 A:middle
Metal 的下一代 Metal 2 了

01:21:46.846 --> 01:21:48.506 A:middle
Metal 2 有6大关键

01:21:48.716 --> 01:21:50.056 A:middle
提升  今天我们要

01:21:50.056 --> 01:21:51.116 A:middle
一一为大家讲解

01:21:51.736 --> 01:21:53.976 A:middle
首先是 GPU 驱动的

01:21:54.086 --> 01:21:54.456 A:middle
渲染

01:21:55.006 --> 01:21:57.626 A:middle
这意味着我们会继续

01:21:57.626 --> 01:21:59.076 A:middle
减少 CPU 要求的

01:21:59.076 --> 01:22:01.056 A:middle
工作量

01:21:59.076 --> 01:22:01.056 A:middle
工作量

01:22:01.056 --> 01:22:02.516 A:middle
以便执行你的 GPU 命令

01:22:02.916 --> 01:22:03.946 A:middle
你也许记得

01:22:03.946 --> 01:22:06.156 A:middle
OpenGL 的系统开销

01:22:06.156 --> 01:22:07.616 A:middle
可能会占据你 app 的

01:22:07.616 --> 01:22:09.816 A:middle
每帧渲染时间中的大部分

01:22:10.266 --> 01:22:11.786 A:middle
这会严重限制

01:22:11.786 --> 01:22:12.956 A:middle
你们的应用的性能

01:22:13.436 --> 01:22:14.836 A:middle
而 Metal 会大幅减少

01:22:14.896 --> 01:22:17.096 A:middle
CPU 时间  把时间还给

01:22:17.226 --> 01:22:18.066 A:middle
你的应用

01:22:18.976 --> 01:22:20.406 A:middle
有了 Metal 2 我们会在这方面

01:22:20.406 --> 01:22:20.966 A:middle
更进一步

01:22:21.396 --> 01:22:22.676 A:middle
我们已经推出了一些

01:22:22.736 --> 01:22:24.286 A:middle
新特性  尽可能地

01:22:24.286 --> 01:22:26.206 A:middle
减轻 CPU 的负担

01:22:26.206 --> 01:22:27.966 A:middle
让 GPU 去更高效地

01:22:27.966 --> 01:22:29.266 A:middle
计划它自己的工作

01:22:30.426 --> 01:22:31.656 A:middle
其中一个特性叫做

01:22:31.656 --> 01:22:32.876 A:middle
Metal 参数缓冲

01:22:33.146 --> 01:22:33.726 A:middle
稍微讲一下背景

01:22:33.726 --> 01:22:35.796 A:middle
Metal 渲染通道

01:22:35.796 --> 01:22:37.876 A:middle
是由图形状态和

01:22:37.876 --> 01:22:39.386 A:middle
对资源的引用构成的

01:22:39.386 --> 01:22:40.826 A:middle
比如纹理和缓冲器

01:22:41.296 --> 01:22:42.096 A:middle
这些资源在以前

01:22:42.096 --> 01:22:43.016 A:middle
在每次 draw call 时

01:22:43.016 --> 01:22:45.646 A:middle
都需要单独被指明

01:22:46.936 --> 01:22:48.766 A:middle
有了 Metal 2 你就可以

01:22:48.766 --> 01:22:50.326 A:middle
在 app 初始化时

01:22:50.326 --> 01:22:52.446 A:middle
把你的资源分配到

01:22:52.446 --> 01:22:53.996 A:middle
参数缓冲区

01:22:53.996 --> 01:22:55.646 A:middle
然后你可以快速在

01:22:55.646 --> 01:22:57.446 A:middle
根据每次 draw call

01:22:57.446 --> 01:22:58.786 A:middle
已经设置好的资源缓冲区之间切换

01:22:58.786 --> 01:23:00.566 A:middle
这会极大地提高

01:22:58.786 --> 01:23:00.566 A:middle
这会极大地提高

01:23:00.566 --> 01:23:01.166 A:middle
效率

01:23:01.746 --> 01:23:03.516 A:middle
实际上  你用到越多的资源

01:23:03.516 --> 01:23:04.796 A:middle
你的渲染越复杂

01:23:04.796 --> 01:23:05.996 A:middle
节省的时间

01:23:05.996 --> 01:23:06.806 A:middle
就会越多

01:23:06.806 --> 01:23:08.486 A:middle
在这个用到 Metal

01:23:08.486 --> 01:23:10.296 A:middle
参数缓冲区的例子中

01:23:10.296 --> 01:23:11.916 A:middle
我们减少了 draw call 所需的

01:23:11.916 --> 01:23:18.266 A:middle
CPU 时间  多达十倍

01:23:18.386 --> 01:23:20.386 A:middle
接下来 Metal 2

01:23:20.386 --> 01:23:22.306 A:middle
在遍布我们各种产品的

01:23:22.336 --> 01:23:23.886 A:middle
标准特性上  迈出了一大步

01:23:24.826 --> 01:23:25.956 A:middle
我们在强调

01:23:25.956 --> 01:23:27.456 A:middle
各平台兼容性的同时

01:23:27.456 --> 01:23:29.386 A:middle
仍然为开发者提供了

01:23:29.386 --> 01:23:30.906 A:middle
访问硬件特性

01:23:30.906 --> 01:23:32.236 A:middle
以获得优化性能

01:23:32.316 --> 01:23:33.246 A:middle
的机会

01:23:34.746 --> 01:23:36.036 A:middle
我们把 macOS 的关键特性

01:23:36.036 --> 01:23:38.466 A:middle
带到了 iOS 上  反过来也一样

01:23:39.396 --> 01:23:41.316 A:middle
其中一个例子就是

01:23:41.316 --> 01:23:42.306 A:middle
Metal Resource Heaps

01:23:42.956 --> 01:23:44.046 A:middle
它可以提供

01:23:44.046 --> 01:23:45.226 A:middle
更高效的办法来管理我们的

01:23:45.226 --> 01:23:46.566 A:middle
Metal 纹理和缓冲区

01:23:46.806 --> 01:23:48.496 A:middle
而不必要求你

01:23:48.496 --> 01:23:49.996 A:middle
懂得每一个独立的 GPU

01:23:49.996 --> 01:23:51.866 A:middle
是如何管理和分配

01:23:51.866 --> 01:23:52.146 A:middle
内存的

01:23:53.476 --> 01:23:55.116 A:middle
此前  每一个 Metal

01:23:55.176 --> 01:23:56.026 A:middle
纹理都需要操作系统

01:23:56.126 --> 01:23:57.466 A:middle
单独分配

01:23:57.466 --> 01:23:58.616 A:middle
一个独立的内存

01:23:58.996 --> 01:24:00.126 A:middle
这是很容易使用

01:23:58.996 --> 01:24:00.126 A:middle
这是很容易使用

01:24:00.126 --> 01:24:01.396 A:middle
很容易理解

01:24:01.396 --> 01:24:02.416 A:middle
但可能会很昂贵

01:24:03.356 --> 01:24:04.326 A:middle
有了 Metal Heaps

01:24:04.326 --> 01:24:05.836 A:middle
你可以分配一个单独的内存缓冲

01:24:06.556 --> 01:24:08.566 A:middle
然后在里面存储多个纹理

01:24:09.676 --> 01:24:11.046 A:middle
你还可以非常快地

01:24:11.136 --> 01:24:12.976 A:middle
重新分配

01:24:12.976 --> 01:24:15.496 A:middle
并为新的纹理重新解读

01:24:15.496 --> 01:24:16.046 A:middle
已有的内存

01:24:17.896 --> 01:24:19.846 A:middle
有趣的是 Metal Heaps

01:24:19.846 --> 01:24:21.506 A:middle
允许你重新使用

01:24:21.506 --> 01:24:22.756 A:middle
你暂时不需要的纹理中

01:24:22.756 --> 01:24:24.326 A:middle
已经被分配的内存

01:24:24.506 --> 01:24:25.856 A:middle
这可以帮你节省

01:24:25.856 --> 01:24:26.996 A:middle
大量的每帧内存

01:24:27.586 --> 01:24:29.466 A:middle
这非常简单

01:24:29.666 --> 01:24:30.726 A:middle
而且不会牺牲任何

01:24:30.726 --> 01:24:31.216 A:middle
性能

01:24:32.576 --> 01:24:34.246 A:middle
Metal 不仅适用于

01:24:34.246 --> 01:24:34.666 A:middle
图形

01:24:34.776 --> 01:24:36.006 A:middle
Metal Performance Shaders Library

01:24:36.186 --> 01:24:37.486 A:middle
提供了一整套优化的

01:24:37.486 --> 01:24:39.946 A:middle
图像处理  线性代数

01:24:39.946 --> 01:24:41.366 A:middle
以及其他计算操作方法

01:24:43.296 --> 01:24:46.136 A:middle
Metal 2 扩展了这种支持

01:24:46.636 --> 01:24:48.366 A:middle
以加速机器学习

01:24:50.206 --> 01:24:51.326 A:middle
我们为卷积码神经网络

01:24:51.326 --> 01:24:52.726 A:middle
加入了很多

01:24:52.726 --> 01:24:54.666 A:middle
GPU 加速的机器学习

01:24:54.666 --> 01:24:56.676 A:middle
原语和新的图像 API

01:24:57.236 --> 01:24:58.326 A:middle
所有这些都可以高效地

01:24:58.326 --> 01:24:59.646 A:middle
整合到你们的 Metal

01:24:59.776 --> 01:25:03.026 A:middle
图形和计算代码中去

01:24:59.776 --> 01:25:03.026 A:middle
图形和计算代码中去

01:25:03.236 --> 01:25:04.296 A:middle
机器学习内核

01:25:04.296 --> 01:25:06.506 A:middle
比如 LSTMs 卷积码和

01:25:06.506 --> 01:25:07.806 A:middle
神经元也包括在内

01:25:07.806 --> 01:25:09.586 A:middle
还有扩展的矩阵数学操作

01:25:10.616 --> 01:25:12.586 A:middle
最重要的是 MPS 也

01:25:12.586 --> 01:25:14.026 A:middle
让每个人能够使用

01:25:14.026 --> 01:25:15.786 A:middle
Seb 刚才提到的

01:25:15.836 --> 01:25:17.266 A:middle
强力的  新的 CoreML 框架

01:25:17.266 --> 01:25:19.126 A:middle
来获得 GPU 的全部性能

01:25:19.126 --> 01:25:19.846 A:middle
以供自动机器学习

01:25:21.406 --> 01:25:24.876 A:middle
接下来  我们很想说一说

01:25:24.876 --> 01:25:26.466 A:middle
Metal 2 里的虚拟现实

01:25:27.576 --> 01:25:29.036 A:middle
有了 Metal 2 和 macOS 的 High

01:25:29.136 --> 01:25:30.896 A:middle
Sierra  我们会让 Mac

01:25:30.896 --> 01:25:32.276 A:middle
第一次具有

01:25:32.646 --> 01:25:34.016 A:middle
VR 内容开发功能

01:25:34.046 --> 01:25:36.276 A:middle
包括 360 度视频编辑

01:25:36.276 --> 01:25:38.106 A:middle
和 3D 内容制作

01:25:39.306 --> 01:25:40.246 A:middle
我们还添加了对

01:25:40.246 --> 01:25:42.056 A:middle
头戴显示

01:25:42.056 --> 01:25:43.316 A:middle
低延迟立体渲染

01:25:43.316 --> 01:25:44.766 A:middle
的支持  以及强大

01:25:44.766 --> 01:25:46.446 A:middle
的新开发工具  优化

01:25:46.446 --> 01:25:47.446 A:middle
VR app 的性能

01:25:48.466 --> 01:25:49.846 A:middle
我们很高兴

01:25:49.846 --> 01:25:50.936 A:middle
能与 Valve 一起

01:25:50.936 --> 01:25:52.156 A:middle
密切合作  他们已经宣布

01:25:52.156 --> 01:25:53.136 A:middle
他们要把全部的

01:25:53.136 --> 01:25:56.086 A:middle
SteamVR runtime 和 SDK 带到

01:25:56.086 --> 01:25:57.966 A:middle
Mac 上 beta 版本今天就可以

01:25:58.196 --> 01:25:58.736 A:middle
获得

01:25:59.496 --> 01:25:59.586 A:middle
没错

01:26:01.516 --> 01:26:04.696 A:middle
[ 掌声 ]

01:26:05.196 --> 01:26:06.386 A:middle
也包括 HTC Vive

01:26:06.386 --> 01:26:07.846 A:middle
头戴设备和手柄

01:26:09.026 --> 01:26:10.296 A:middle
大家今天上午了解过了

01:26:10.546 --> 01:26:11.906 A:middle
我们也和

01:26:11.906 --> 01:26:13.536 A:middle
Epic Games 合作了

01:26:13.536 --> 01:26:15.116 A:middle
他们也宣布今年

01:26:15.116 --> 01:26:16.556 A:middle
晚些时候发行的虚幻引擎

01:26:16.556 --> 01:26:18.346 A:middle
将支持 macOS VR

01:26:18.346 --> 01:26:19.806 A:middle
9月份就可以在 GitHub 上面

01:26:19.926 --> 01:26:21.056 A:middle
提早访问

01:26:21.966 --> 01:26:23.316 A:middle
包括支持 Epic 的

01:26:23.316 --> 01:26:25.486 A:middle
沉浸式 VR Mode Editor

01:26:25.486 --> 01:26:27.236 A:middle
大家上午见到过了

01:26:27.236 --> 01:26:28.516 A:middle
你可以身临其境地

01:26:28.686 --> 01:26:30.186 A:middle
创造 VR 环境

01:26:31.496 --> 01:26:33.266 A:middle
我们也很高兴能与

01:26:33.266 --> 01:26:34.346 A:middle
Unity 进行合作

01:26:34.346 --> 01:26:35.816 A:middle
他们同样宣布将

01:26:35.856 --> 01:26:37.206 A:middle
把 macOS VR 支持

01:26:37.206 --> 01:26:38.916 A:middle
加入他们超强的引擎

01:26:38.916 --> 01:26:40.286 A:middle
以及很多最流行游戏

01:26:40.286 --> 01:26:41.416 A:middle
背后的编辑环境

01:26:42.316 --> 01:26:43.506 A:middle
还让开发者

01:26:43.506 --> 01:26:45.196 A:middle
I-Illusions 使用 Unity

01:26:45.196 --> 01:26:47.996 A:middle
令人欲罢不能的

01:26:48.056 --> 01:26:49.996 A:middle
VR 太空游戏 Space Pirates

01:26:49.996 --> 01:26:51.336 A:middle
Trainer 在未来几天内

01:26:51.336 --> 01:26:52.616 A:middle
Mac 上会支持

01:26:54.086 --> 01:26:55.516 A:middle
现在说一下性能

01:26:56.146 --> 01:26:57.336 A:middle
性能对于构建

01:26:57.336 --> 01:26:58.806 A:middle
出色的 VR app 来说至关重要

01:26:59.246 --> 01:27:00.546 A:middle
很多开发者都知道

01:26:59.246 --> 01:27:00.546 A:middle
很多开发者都知道

01:27:00.546 --> 01:27:01.496 A:middle
要把他们的应用

01:27:01.496 --> 01:27:03.566 A:middle
优化到符合

01:27:03.566 --> 01:27:05.846 A:middle
每秒60帧的帧率

01:27:05.846 --> 01:27:06.736 A:middle
这意味着

01:27:06.736 --> 01:27:08.786 A:middle
你在每帧可以有

01:27:08.786 --> 01:27:11.116 A:middle
足足 16.7 毫秒的时间

01:27:11.116 --> 01:27:12.156 A:middle
供你的 app

01:27:12.156 --> 01:27:12.486 A:middle
渲染

01:27:13.376 --> 01:27:14.786 A:middle
但是  要制造出

01:27:14.786 --> 01:27:16.796 A:middle
沉浸式的 VR 体验

01:27:16.856 --> 01:27:18.906 A:middle
你必须渲染出立体的

01:27:18.906 --> 01:27:20.816 A:middle
两幅视图  帧率要达到 90 帧每秒

01:27:20.976 --> 01:27:22.326 A:middle
这就意味着每帧的时间

01:27:22.326 --> 01:27:23.706 A:middle
只有 11 毫秒了

01:27:24.776 --> 01:27:25.776 A:middle
但实际上  你甚至

01:27:25.776 --> 01:27:26.956 A:middle
无法全用上这 11 毫秒

01:27:26.956 --> 01:27:28.186 A:middle
因为还有 VR compositor

01:27:28.186 --> 01:27:30.236 A:middle
它要使用 GPU

01:27:30.236 --> 01:27:32.136 A:middle
叠加左右眼图像

01:27:32.136 --> 01:27:33.846 A:middle
补偿 HMD

01:27:33.846 --> 01:27:35.266 A:middle
镜片的扭曲失真

01:27:35.316 --> 01:27:36.596 A:middle
还要补偿头部运动

01:27:37.276 --> 01:27:38.536 A:middle
这就只留给你

01:27:38.536 --> 01:27:39.886 A:middle
大约每帧 10 毫秒的时间了

01:27:40.236 --> 01:27:41.186 A:middle
换句话说  你需要

01:27:41.186 --> 01:27:43.166 A:middle
让你的 VR app 达到

01:27:43.396 --> 01:27:44.946 A:middle
每帧 100 秒的帧率

01:27:46.056 --> 01:27:47.426 A:middle
这是个极具挑战性的工作

01:27:47.556 --> 01:27:49.786 A:middle
但是 Metal 2 提供了一些

01:27:49.786 --> 01:27:51.326 A:middle
非常强大的新工具

01:27:51.326 --> 01:27:53.386 A:middle
优化你的 VR app 的

01:27:53.386 --> 01:27:53.786 A:middle
性能

01:27:54.196 --> 01:27:55.516 A:middle
我们在 Metal system trace 里

01:27:55.516 --> 01:27:57.006 A:middle
内置了对于 SteamVR 的 compositor

01:27:57.006 --> 01:27:58.246 A:middle
跟踪点的支持

01:27:59.806 --> 01:28:02.046 A:middle
这会让你能够看到

01:27:59.806 --> 01:28:02.046 A:middle
这会让你能够看到

01:28:02.046 --> 01:28:04.016 A:middle
GPU 时间都去了哪里

01:28:04.016 --> 01:28:05.686 A:middle
以及你的帧到达屏幕的

01:28:05.686 --> 01:28:06.386 A:middle
精确时刻

01:28:07.676 --> 01:28:09.486 A:middle
有了 Metal 2

01:28:09.636 --> 01:28:11.106 A:middle
和即将于今天发布的

01:28:11.106 --> 01:28:11.776 A:middle
新 iMac 里的

01:28:11.776 --> 01:28:14.026 A:middle
强大的新 GPU

01:28:14.026 --> 01:28:17.006 A:middle
我们让你们的 Mac 桌面

01:28:17.586 --> 01:28:18.576 A:middle
VR 内容开发大有用武之地

01:28:18.676 --> 01:28:20.346 A:middle
很多专业的

01:28:20.346 --> 01:28:22.416 A:middle
内容生产者都很喜欢

01:28:22.416 --> 01:28:23.706 A:middle
MacBook Pro 带来的移动办公便利

01:28:24.306 --> 01:28:25.746 A:middle
但大量的 VR 开发

01:28:25.746 --> 01:28:27.996 A:middle
需要强劲的 GPU

01:28:27.996 --> 01:28:29.186 A:middle
它很难能被装在

01:28:29.186 --> 01:28:30.126 A:middle
最轻最薄的笔记本上

01:28:31.036 --> 01:28:33.016 A:middle
因此 Metal 2 会

01:28:33.016 --> 01:28:34.496 A:middle
为你们的 MacBook Pro

01:28:34.496 --> 01:28:36.966 A:middle
和 macOS High Sierra 外接 GPU

01:28:36.966 --> 01:28:37.866 A:middle
提供一流支持

01:28:38.936 --> 01:28:39.836 A:middle
是的  谢谢 [ 掌声 ]

01:28:42.326 --> 01:28:44.236 A:middle
你们可以非常轻松地

01:28:44.276 --> 01:28:45.786 A:middle
用外接 GPU 给你们的 app 提供支持了

01:28:46.006 --> 01:28:47.826 A:middle
只需要几行代码

01:28:47.826 --> 01:28:49.266 A:middle
你要记录外接 GPU

01:28:49.266 --> 01:28:50.646 A:middle
设备连接回调函数

01:28:50.646 --> 01:28:52.396 A:middle
并指明

01:28:52.396 --> 01:28:54.206 A:middle
你的系统中的哪些 GPU

01:28:54.206 --> 01:28:54.706 A:middle
是可移除的

01:28:56.116 --> 01:28:57.336 A:middle
这样就两全其美了

01:28:57.336 --> 01:28:59.316 A:middle
可以用强劲的 GPU

01:28:59.316 --> 01:29:00.406 A:middle
在我们最便携的 Mac 设备上

01:28:59.316 --> 01:29:00.406 A:middle
在我们最便携的 Mac 设备上

01:29:00.406 --> 01:29:03.186 A:middle
构建沉浸式 VR app 了

01:29:03.186 --> 01:29:05.246 A:middle
我们对此非常兴奋

01:29:06.016 --> 01:29:07.176 A:middle
为帮你们尽快上手

01:29:07.176 --> 01:29:08.476 A:middle
我们会在开发者计划中

01:29:08.476 --> 01:29:10.046 A:middle
提供一个外部 GPU

01:29:10.046 --> 01:29:10.886 A:middle
Developer kit

01:29:11.636 --> 01:29:13.136 A:middle
里面包括你在 MacBook Pro 上

01:29:13.136 --> 01:29:14.536 A:middle
进行 VR 内容开发

01:29:14.536 --> 01:29:16.416 A:middle
所需要的一切

01:29:16.416 --> 01:29:18.296 A:middle
还包括 HTC Vive

01:29:18.496 --> 01:29:19.796 A:middle
头戴显示的优惠

01:29:19.836 --> 01:29:21.556 A:middle
今天就可以在

01:29:21.556 --> 01:29:24.896 A:middle
developer.apple.com 上获得

01:29:25.116 --> 01:29:27.366 A:middle
最后要说的是 Metal 2

01:29:27.366 --> 01:29:29.326 A:middle
让我们有了

01:29:29.326 --> 01:29:30.806 A:middle
最先进的图像开发

01:29:30.806 --> 01:29:32.536 A:middle
优化工具

01:29:33.496 --> 01:29:34.796 A:middle
我们添加了呼声最高的

01:29:34.796 --> 01:29:36.656 A:middle
工具和特性

01:29:36.656 --> 01:29:38.396 A:middle
包括快速 debug 分析和

01:29:38.396 --> 01:29:40.136 A:middle
优化你的 GPU

01:29:40.136 --> 01:29:40.946 A:middle
性能瓶颈

01:29:40.946 --> 01:29:43.066 A:middle
所有这些都直接

01:29:43.066 --> 01:29:45.206 A:middle
内置在 Xcode 和 Instruments 里

01:29:46.196 --> 01:29:47.886 A:middle
我们添加了强有力的新

01:29:47.966 --> 01:29:49.706 A:middle
GPU 硬件性能

01:29:49.706 --> 01:29:50.916 A:middle
和软件性能计数器

01:29:50.916 --> 01:29:52.186 A:middle
让你们深入了解

01:29:52.186 --> 01:29:55.016 A:middle
GPU 的操作和自动

01:29:55.066 --> 01:29:56.256 A:middle
瓶颈检测

01:29:56.256 --> 01:29:58.026 A:middle
让你直达性能问题的

01:29:58.026 --> 01:29:59.106 A:middle
核心源头

01:29:59.586 --> 01:30:01.076 A:middle
非常强大

01:29:59.586 --> 01:30:01.076 A:middle
非常强大

01:30:01.076 --> 01:30:03.086 A:middle
接下来要为大家展示

01:30:03.086 --> 01:30:05.066 A:middle
Metal 2 开发工具的应用

01:30:05.066 --> 01:30:06.186 A:middle
我想请 Eric Sunnel

01:30:06.426 --> 01:30:06.926 A:middle
上台

01:30:07.176 --> 01:30:07.296 A:middle
Eric

01:30:07.616 --> 01:30:07.846 A:middle
&gt;&gt;  Jeremy

01:30:10.846 --> 01:30:11.326 A:middle
谢谢 Jeremy

01:30:12.096 --> 01:30:12.666 A:middle
大家好

01:30:12.826 --> 01:30:13.626 A:middle
今天我想给你们展示

01:30:13.626 --> 01:30:14.556 A:middle
一些 Metal 的新特性

01:30:14.556 --> 01:30:17.456 A:middle
比如 Xcode 里的 GPU 资料

01:30:17.456 --> 01:30:19.606 A:middle
计数器工具

01:30:20.136 --> 01:30:21.736 A:middle
屏幕上是一个 Metal 应用

01:30:21.736 --> 01:30:22.866 A:middle
正在渲染数以千计的

01:30:22.866 --> 01:30:24.116 A:middle
小行星

01:30:24.556 --> 01:30:26.456 A:middle
每一个都是独立的 draw call

01:30:26.456 --> 01:30:27.386 A:middle
需要注意的是

01:30:27.386 --> 01:30:28.346 A:middle
每一个 draw call

01:30:28.346 --> 01:30:29.796 A:middle
都在使用一些

01:30:30.146 --> 01:30:31.386 A:middle
独一无二的 Metal 资源

01:30:31.386 --> 01:30:32.176 A:middle
都是随机选择的

01:30:32.806 --> 01:30:33.626 A:middle
现在我要做的是

01:30:33.626 --> 01:30:34.796 A:middle
向场景中再添加一些

01:30:34.796 --> 01:30:35.316 A:middle
小行星

01:30:35.316 --> 01:30:38.056 A:middle
好的  现在情况不如

01:30:38.056 --> 01:30:40.276 A:middle
我预想的顺利

01:30:40.276 --> 01:30:41.386 A:middle
我们退出全屏

01:30:42.536 --> 01:30:45.386 A:middle
做一个 GPU 捕捉

01:30:45.636 --> 01:30:46.876 A:middle
看看是否能更好地理解

01:30:46.946 --> 01:30:47.916 A:middle
发生了什么

01:30:48.506 --> 01:30:49.426 A:middle
它不仅是做了一个 GPU

01:30:49.516 --> 01:30:51.106 A:middle
捕捉  并分析我们所有的

01:30:51.106 --> 01:30:52.636 A:middle
着色器  它还捕捉了

01:30:52.636 --> 01:30:53.936 A:middle
所有的硬件性能

01:30:53.936 --> 01:30:55.826 A:middle
计数器

01:30:56.666 --> 01:30:57.746 A:middle
它实际上在每个 draw call

01:30:57.746 --> 01:30:58.046 A:middle
都这样做一次

01:30:58.046 --> 01:30:59.866 A:middle
它可以很快就把这

01:30:59.866 --> 01:31:00.236 A:middle
视觉化

01:30:59.866 --> 01:31:00.236 A:middle
视觉化

01:31:01.466 --> 01:31:02.096 A:middle
好了  现在在左边

01:31:02.096 --> 01:31:02.886 A:middle
让我更改一下

01:31:02.886 --> 01:31:05.246 A:middle
系统编辑器

01:31:05.246 --> 01:31:06.836 A:middle
在左手边

01:31:06.836 --> 01:31:08.776 A:middle
我可以访问一份 GPU 报告

01:31:09.166 --> 01:31:11.056 A:middle
它在标准编辑器里

01:31:11.056 --> 01:31:12.706 A:middle
总结出了所有的

01:31:12.706 --> 01:31:13.676 A:middle
在所有 draw call 的时间线上的

01:31:13.676 --> 01:31:14.736 A:middle
性能计数器

01:31:15.276 --> 01:31:16.166 A:middle
而在右手边

01:31:16.166 --> 01:31:17.086 A:middle
我也有所有的

01:31:17.236 --> 01:31:18.346 A:middle
详细的性能计数器

01:31:18.346 --> 01:31:20.276 A:middle
如果我选择了一个特定的

01:31:20.276 --> 01:31:21.966 A:middle
draw call 比如这个吧

01:31:21.966 --> 01:31:22.706 A:middle
所有的右边的

01:31:22.706 --> 01:31:23.856 A:middle
信息都会更新

01:31:23.856 --> 01:31:24.726 A:middle
显示出我们捕捉的

01:31:24.726 --> 01:31:25.606 A:middle
详细的性能计数器

01:31:26.106 --> 01:31:28.526 A:middle
如果我在 vertices 行上面悬停

01:31:28.526 --> 01:31:29.916 A:middle
我就能够了解

01:31:29.956 --> 01:31:30.946 A:middle
那个 vertice 的 draw call

01:31:30.946 --> 01:31:32.666 A:middle
提交到场景的

01:31:32.666 --> 01:31:33.666 A:middle
总数是多少

01:31:33.786 --> 01:31:34.786 A:middle
差不多有 8000

01:31:34.786 --> 01:31:35.436 A:middle
看上去挺高的

01:31:36.056 --> 01:31:37.356 A:middle
如果我去查看存储的像素

01:31:37.356 --> 01:31:38.686 A:middle
在那个 draw call 上

01:31:38.686 --> 01:31:40.626 A:middle
我只存储了大约 11 个像素

01:31:40.626 --> 01:31:42.136 A:middle
比起来就低多了

01:31:43.356 --> 01:31:44.176 A:middle
如果我们看右边的上部

01:31:44.176 --> 01:31:45.676 A:middle
我们能够看到

01:31:45.676 --> 01:31:46.906 A:middle
Xcode 提供的一些

01:31:46.906 --> 01:31:47.456 A:middle
建议

01:31:47.896 --> 01:31:49.486 A:middle
最上面的这个

01:31:49.486 --> 01:31:50.786 A:middle
每三角形像素比  是很低的

01:31:51.436 --> 01:31:52.356 A:middle
看上去没什么问题

01:31:52.786 --> 01:31:54.136 A:middle
如果我们打开这个

01:31:54.136 --> 01:31:55.396 A:middle
就能得到一些 Xcode 的建议

01:31:56.406 --> 01:31:57.416 A:middle
我们可以看到这里它说

01:31:57.416 --> 01:31:58.706 A:middle
考虑减少三角形的数量

01:31:58.706 --> 01:32:00.236 A:middle
并考虑减少

01:31:58.706 --> 01:32:00.236 A:middle
并考虑减少

01:32:00.236 --> 01:32:01.336 A:middle
顶点着色点的工作

01:32:01.906 --> 01:32:03.046 A:middle
如果我们点击顶部

01:32:03.046 --> 01:32:04.216 A:middle
点击这里的链接

01:32:04.366 --> 01:32:05.206 A:middle
它会让我们看到

01:32:05.206 --> 01:32:06.436 A:middle
这个 draw call 的所有捆绑

01:32:06.436 --> 01:32:06.826 A:middle
资源

01:32:07.436 --> 01:32:08.496 A:middle
我们能看到

01:32:08.496 --> 01:32:09.846 A:middle
我们实际上是加载了

01:32:09.846 --> 01:32:10.856 A:middle
小行星的高精度模型

01:32:10.856 --> 01:32:12.246 A:middle
这在这个场景下没什么意义

01:32:13.026 --> 01:32:14.086 A:middle
所以我们要

01:32:14.086 --> 01:32:15.726 A:middle
改写一个源代码

01:32:16.476 --> 01:32:17.476 A:middle
退出编辑器

01:32:18.466 --> 01:32:18.876 A:middle
好了

01:32:18.876 --> 01:32:20.606 A:middle
我们把这个改成

01:32:20.606 --> 01:32:22.506 A:middle
我之前准备的

01:32:22.506 --> 01:32:23.146 A:middle
降阶模型

01:32:23.956 --> 01:32:24.276 A:middle
好了

01:32:24.986 --> 01:32:25.966 A:middle
现在  我们在这个项目里

01:32:25.966 --> 01:32:26.576 A:middle
再做一个改变

01:32:26.576 --> 01:32:27.796 A:middle
看看我们是否能让参数缓冲区

01:32:27.796 --> 01:32:28.496 A:middle
起作用

01:32:29.076 --> 01:32:30.136 A:middle
这里是 for 循环

01:32:30.136 --> 01:32:31.636 A:middle
它在做每个小行星的

01:32:31.636 --> 01:32:33.126 A:middle
draw call

01:32:34.056 --> 01:32:35.446 A:middle
在每个 draw call 之上

01:32:35.446 --> 01:32:37.236 A:middle
我设定了一系列资源

01:32:37.706 --> 01:32:38.816 A:middle
有了参数缓冲

01:32:38.816 --> 01:32:41.476 A:middle
我就能删除这个代码

01:32:41.476 --> 01:32:42.806 A:middle
换以插入一个调用

01:32:42.806 --> 01:32:44.066 A:middle
预先捆绑参数缓冲

01:32:44.696 --> 01:32:47.526 A:middle
允许 GPU 制作

01:32:47.526 --> 01:32:49.216 A:middle
动态选择  决定

01:32:49.216 --> 01:32:50.346 A:middle
使用哪些资源

01:32:50.916 --> 01:32:52.316 A:middle
做好了这两个简单的更改后

01:32:52.316 --> 01:32:53.396 A:middle
我们运行一下

01:32:53.396 --> 01:32:54.836 A:middle
看看怎么样了

01:32:59.616 --> 01:33:00.096 A:middle
好的

01:32:59.616 --> 01:33:00.096 A:middle
好的

01:33:00.096 --> 01:33:02.696 A:middle
好的  看上去不错

01:33:02.906 --> 01:33:03.716 A:middle
我们再加一些

01:33:03.716 --> 01:33:04.896 A:middle
好的  看上去好多了

01:33:04.926 --> 01:33:06.026 A:middle
我想看的就是这个

01:33:06.256 --> 01:33:07.596 A:middle
好  就是这样

01:33:07.836 --> 01:33:09.726 A:middle
有了 Metal 2 的新特性

01:33:09.726 --> 01:33:11.176 A:middle
我希望你们能够更加深入

01:33:11.176 --> 01:33:12.476 A:middle
了解你们的应用把时间

01:33:12.476 --> 01:33:14.326 A:middle
都花在哪里了  我们还会

01:33:14.326 --> 01:33:15.486 A:middle
从关键路径上提供更多

01:33:15.486 --> 01:33:15.756 A:middle
代码

01:33:15.756 --> 01:33:16.746 A:middle
非常感谢

01:33:17.116 --> 01:33:17.676 A:middle
轮到你了 Jeremy

01:33:18.516 --> 01:33:23.586 A:middle
[ 掌声 ]

01:33:24.086 --> 01:33:25.036 A:middle
&gt;&gt;  好的  谢谢 Eric

01:33:25.596 --> 01:33:27.856 A:middle
这就是 Metal 2 GPU 驱动的

01:33:27.856 --> 01:33:29.676 A:middle
缓冲  一体化特性平台

01:33:29.736 --> 01:33:31.796 A:middle
机器学习加速

01:33:31.796 --> 01:33:34.406 A:middle
支持在 Mac 上进行 VR 内容开发

01:33:34.406 --> 01:33:36.086 A:middle
支持外接 GPU

01:33:36.716 --> 01:33:38.206 A:middle
和我们的

01:33:38.206 --> 01:33:40.826 A:middle
最新最先进的

01:33:40.826 --> 01:33:42.526 A:middle
开发者优化工具

01:33:42.946 --> 01:33:44.126 A:middle
我们迫不及待地想看到

01:33:44.126 --> 01:33:45.786 A:middle
你们接下来用 Metal 制作的东西

01:33:46.226 --> 01:33:47.036 A:middle
非常感谢

01:33:47.606 --> 01:33:48.876 A:middle
现在  我想请上来

01:33:48.876 --> 01:33:50.996 A:middle
AR&VR 技术开发

01:33:50.996 --> 01:33:52.656 A:middle
副总裁 Mike

01:33:52.656 --> 01:33:53.146 A:middle
Rockwell

01:33:54.516 --> 01:33:56.546 A:middle
[ 掌声 ]

01:33:57.046 --> 01:33:57.706 A:middle
&gt;&gt;  谢谢 Jeremy

01:33:59.146 --> 01:34:01.156 A:middle
我非常期待和你们

01:33:59.146 --> 01:34:01.156 A:middle
我非常期待和你们

01:34:01.156 --> 01:34:03.606 A:middle
分享 ARKit 这是 Apple 的

01:34:03.606 --> 01:34:05.846 A:middle
新框架  它能在

01:34:05.846 --> 01:34:07.516 A:middle
iOS 上制作增强现实

01:34:07.516 --> 01:34:08.496 A:middle
应用

01:34:09.806 --> 01:34:11.576 A:middle
我们制作 ARKit 的

01:34:11.576 --> 01:34:13.596 A:middle
目标之一就是确保

01:34:13.596 --> 01:34:15.146 A:middle
我们能够从一开始就支持

01:34:15.146 --> 01:34:16.836 A:middle
广泛类型的设备

01:34:17.006 --> 01:34:18.466 A:middle
我们不想要求

01:34:18.466 --> 01:34:20.396 A:middle
特定的硬件

01:34:20.476 --> 01:34:21.996 A:middle
我很高兴地说  我们实现了这一点

01:34:23.216 --> 01:34:27.856 A:middle
ARKit 在 iPhone 6s 及升级的设备

01:34:27.856 --> 01:34:29.596 A:middle
iPad Pro 及升级的设备上都可以运行

01:34:30.016 --> 01:34:31.296 A:middle
这意味着它

01:34:31.296 --> 01:34:33.596 A:middle
从第一天开始就能在

01:34:33.936 --> 01:34:34.986 A:middle
数亿设备上运行

01:34:35.656 --> 01:34:38.396 A:middle
这让 iOS 成为了

01:34:38.396 --> 01:34:39.966 A:middle
全世界最大的 AP 平台

01:34:41.176 --> 01:34:42.696 A:middle
那么要制作出色的 AR

01:34:42.696 --> 01:34:43.776 A:middle
你们需要做什么呢

01:34:44.526 --> 01:34:46.056 A:middle
你们首先要知道的

01:34:46.276 --> 01:34:48.346 A:middle
就是相机在空间的哪里

01:34:48.586 --> 01:34:49.426 A:middle
它又在看哪里

01:34:50.156 --> 01:34:51.776 A:middle
我们使用了一个名为

01:34:51.776 --> 01:34:53.466 A:middle
视觉惯性里程计的技术实现这一点

01:34:53.866 --> 01:34:54.866 A:middle
我们看看它是怎么完成的

01:34:56.276 --> 01:34:57.616 A:middle
我们有场景

01:34:57.616 --> 01:34:58.286 A:middle
还有相机

01:34:58.806 --> 01:34:59.816 A:middle
相机在看世界

01:35:01.126 --> 01:35:03.466 A:middle
我们在世界中确定

01:35:03.466 --> 01:35:06.476 A:middle
特性要点  然后一帧一帧地

01:35:06.476 --> 01:35:08.776 A:middle
追踪它们

01:35:08.966 --> 01:35:10.506 A:middle
从那里  我们能够

01:35:10.616 --> 01:35:13.256 A:middle
反算出相机的位置

01:35:13.346 --> 01:35:14.636 A:middle
并制造一个

01:35:14.636 --> 01:35:16.506 A:middle
坐标系  然后

01:35:16.506 --> 01:35:18.306 A:middle
以 60 帧每秒的帧率

01:35:18.796 --> 01:35:20.226 A:middle
实时给出那个位置

01:35:21.706 --> 01:35:23.326 A:middle
如果要以每秒 60 帧

01:35:23.376 --> 01:35:24.956 A:middle
做那个计算

01:35:24.956 --> 01:35:26.556 A:middle
它会占据很大的

01:35:26.556 --> 01:35:27.366 A:middle
CPU 马力

01:35:27.366 --> 01:35:30.216 A:middle
我们没有这样做  而是把

01:35:30.216 --> 01:35:31.946 A:middle
加速计和陀螺仪的数据

01:35:32.506 --> 01:35:35.226 A:middle
与那个追踪信息融合

01:35:35.226 --> 01:35:36.676 A:middle
这样我们就能够

01:35:36.676 --> 01:35:37.806 A:middle
大幅减轻计算负担了

01:35:38.876 --> 01:35:40.416 A:middle
实际上  要获得这个信息

01:35:40.416 --> 01:35:42.376 A:middle
只需要用到一个 CPU 的

01:35:42.376 --> 01:35:43.386 A:middle
极小一部分

01:35:44.496 --> 01:35:46.226 A:middle
这会让 GPU 可以为你所用

01:35:46.226 --> 01:35:48.376 A:middle
完成出色的 3D 对象的

01:35:48.546 --> 01:35:49.526 A:middle
渲染

01:35:51.416 --> 01:35:53.086 A:middle
此外  你还需要

01:35:53.086 --> 01:35:54.666 A:middle
理解场景

01:35:54.926 --> 01:35:56.246 A:middle
那里有什么

01:35:56.246 --> 01:35:57.266 A:middle
这样你才能把东西放进去

01:35:57.266 --> 01:36:00.506 A:middle
让它们整合  并很自然

01:35:57.266 --> 01:36:00.506 A:middle
让它们整合  并很自然

01:36:01.536 --> 01:36:03.406 A:middle
我们用之前跟踪的

01:36:03.406 --> 01:36:05.436 A:middle
特征要点去识别

01:36:05.436 --> 01:36:06.936 A:middle
场景中的主平面

01:36:07.636 --> 01:36:09.136 A:middle
我们寻找共面的东西

01:36:09.706 --> 01:36:11.536 A:middle
然后我们找到在场景中的

01:36:11.536 --> 01:36:13.356 A:middle
这些平面的范围

01:36:13.726 --> 01:36:15.236 A:middle
你就可以整合对象了

01:36:15.236 --> 01:36:16.226 A:middle
并让这个过程变得

01:36:16.226 --> 01:36:17.096 A:middle
完全自然

01:36:17.096 --> 01:36:18.676 A:middle
所以举例来说  我可以

01:36:18.676 --> 01:36:20.966 A:middle
把那个花瓶放在桌面上

01:36:20.966 --> 01:36:22.436 A:middle
看上去好像本来就在场景里

01:36:23.066 --> 01:36:25.226 A:middle
如果你不知道那张桌子的尺寸

01:36:25.226 --> 01:36:26.956 A:middle
你的花瓶就可能

01:36:26.956 --> 01:36:28.506 A:middle
变得非常巨大

01:36:29.046 --> 01:36:30.626 A:middle
所以在识别平面之外

01:36:30.626 --> 01:36:32.026 A:middle
我们还要保证

01:36:32.026 --> 01:36:33.496 A:middle
坐标系是精确的

01:36:33.946 --> 01:36:35.656 A:middle
实际上  误差在

01:36:35.766 --> 01:36:38.326 A:middle
5% 之内  这样你的对象

01:36:38.506 --> 01:36:39.776 A:middle
才会让人感觉它本身就在场景里

01:36:42.396 --> 01:36:44.616 A:middle
要让对象

01:36:44.616 --> 01:36:45.776 A:middle
在场景中感觉无违和

01:36:45.776 --> 01:36:47.206 A:middle
你要做的最后一件事

01:36:47.206 --> 01:36:48.746 A:middle
是让光线精准

01:36:49.136 --> 01:36:51.516 A:middle
所以我们提供了

01:36:51.516 --> 01:36:53.246 A:middle
精确的光线估算

01:36:53.246 --> 01:36:54.516 A:middle
所以在场景变暗时

01:36:54.516 --> 01:36:55.636 A:middle
你也可以同步把对象变暗

01:36:55.836 --> 01:36:58.046 A:middle
如果没有这个

01:36:58.046 --> 01:36:59.396 A:middle
物体就会在场景中发光

01:36:59.396 --> 01:37:00.546 A:middle
那就不自然了

01:36:59.396 --> 01:37:00.546 A:middle
那就不自然了

01:37:02.296 --> 01:37:04.036 A:middle
我们看一看

01:37:04.036 --> 01:37:05.966 A:middle
你要如何访问这个超强的

01:37:05.966 --> 01:37:06.486 A:middle
框架

01:37:06.876 --> 01:37:08.026 A:middle
真的很简单

01:37:08.836 --> 01:37:11.286 A:middle
所有这些都可以从 ARKit 中得到

01:37:11.696 --> 01:37:16.116 A:middle
你只需要建立一个

01:37:16.116 --> 01:37:18.926 A:middle
会话配置

01:37:18.926 --> 01:37:20.136 A:middle
包括你是否想要平面估算

01:37:20.136 --> 01:37:21.906 A:middle
是否想要光线探测

01:37:21.906 --> 01:37:23.216 A:middle
等等内容

01:37:23.646 --> 01:37:24.796 A:middle
然后你可以开始 AR 会话

01:37:26.846 --> 01:37:28.586 A:middle
开始后  你可以从

01:37:28.586 --> 01:37:30.826 A:middle
AR 会话委托中

01:37:30.826 --> 01:37:32.696 A:middle
获取帧  或者

01:37:32.696 --> 01:37:33.806 A:middle
以 AR 会话属性的方式

01:37:33.806 --> 01:37:35.496 A:middle
访问它们

01:37:36.216 --> 01:37:37.276 A:middle
每一帧都包含

01:37:37.276 --> 01:37:38.606 A:middle
时间印记

01:37:38.606 --> 01:37:40.806 A:middle
捕捉的图像

01:37:40.806 --> 01:37:43.446 A:middle
相机方向与位置

01:37:43.906 --> 01:37:45.176 A:middle
场景主平面

01:37:45.176 --> 01:37:46.006 A:middle
和光线探测等

01:37:47.346 --> 01:37:48.166 A:middle
现在你的场景

01:37:48.166 --> 01:37:50.206 A:middle
设置完毕  你可以开始渲染了

01:37:51.186 --> 01:37:53.796 A:middle
ARKit 支持

01:37:53.796 --> 01:37:54.926 A:middle
渲染的多重选项

01:37:55.966 --> 01:37:59.206 A:middle
你可以使用刚才 Jeremy

01:37:59.206 --> 01:38:00.396 A:middle
说过的 Metal 2

01:37:59.206 --> 01:38:00.396 A:middle
说过的 Metal 2

01:38:00.396 --> 01:38:02.126 A:middle
它是一个非常强的

01:38:02.126 --> 01:38:03.866 A:middle
访问 GPU 的底层引擎

01:38:04.336 --> 01:38:05.436 A:middle
但你可能想要

01:38:05.436 --> 01:38:06.616 A:middle
使用高层框架

01:38:06.616 --> 01:38:07.646 A:middle
因为你的抽象化会用到它

01:38:08.656 --> 01:38:11.846 A:middle
所以我们优化了 SceneKit

01:38:11.846 --> 01:38:13.596 A:middle
和 SpriteKit 让它们和

01:38:13.596 --> 01:38:15.616 A:middle
ARKit 一起工作  非常高效

01:38:16.766 --> 01:38:18.666 A:middle
此外  我们在过去几个月里

01:38:18.666 --> 01:38:20.166 A:middle
与大型 3D 引擎

01:38:20.166 --> 01:38:21.936 A:middle
供应商合作

01:38:21.936 --> 01:38:23.296 A:middle
确保他们的

01:38:23.296 --> 01:38:25.436 A:middle
引擎针对 ARKit 优化过了

01:38:27.296 --> 01:38:29.046 A:middle
我非常高兴地宣布

01:38:29.086 --> 01:38:30.796 A:middle
Unity 本周将

01:38:30.796 --> 01:38:32.876 A:middle
发布一个开源插件

01:38:32.876 --> 01:38:34.816 A:middle
就像 ARKit 一样

01:38:34.816 --> 01:38:36.056 A:middle
非常易用

01:38:36.896 --> 01:38:39.896 A:middle
此外  Epic

01:38:39.896 --> 01:38:42.196 A:middle
也将在虚幻引擎中提供支持

01:38:42.196 --> 01:38:44.296 A:middle
在今天的开发者预览中可以看到

01:38:44.296 --> 01:38:45.616 A:middle
他们会在今年的晚些时候

01:38:45.616 --> 01:38:46.516 A:middle
正式发布

01:38:47.606 --> 01:38:48.626 A:middle
这就是一个预览

01:38:48.626 --> 01:38:51.086 A:middle
看一看 ARKit

01:38:51.266 --> 01:38:53.086 A:middle
我想请乐高公司的 Martin

01:38:53.086 --> 01:38:55.286 A:middle
Sanders 上台

01:38:55.286 --> 01:38:56.986 A:middle
向我们演示

01:38:56.986 --> 01:38:57.966 A:middle
他们创造出来的

01:38:57.966 --> 01:38:58.436 A:middle
有趣的东西

01:38:58.726 --> 01:38:59.196 A:middle
谢谢

01:39:00.516 --> 01:39:04.166 A:middle
[ 掌声 ]

01:39:04.666 --> 01:39:05.216 A:middle
&gt;&gt;  大家好

01:39:05.646 --> 01:39:06.436 A:middle
很高兴来这里

01:39:07.146 --> 01:39:09.606 A:middle
在乐高  我们用 ARKit

01:39:09.606 --> 01:39:11.256 A:middle
开发了一些有趣的

01:39:11.256 --> 01:39:13.506 A:middle
体验  让你们的乐高

01:39:13.506 --> 01:39:15.566 A:middle
玩具在真实世界中

01:39:15.566 --> 01:39:16.616 A:middle
获得生命

01:39:17.516 --> 01:39:18.786 A:middle
一切都始于

01:39:18.786 --> 01:39:20.386 A:middle
自动平面检测

01:39:20.926 --> 01:39:22.526 A:middle
这个直升机移动时

01:39:22.526 --> 01:39:24.106 A:middle
会给我们一个

01:39:24.106 --> 01:39:25.826 A:middle
表面  我们知道

01:39:25.826 --> 01:39:26.866 A:middle
要在这个表面上开始搭建

01:39:27.166 --> 01:39:28.786 A:middle
我们先从最近的

01:39:28.916 --> 01:39:31.846 A:middle
“乐高蝙蝠侠大电影”里

01:39:32.076 --> 01:39:33.576 A:middle
找些东西添加进去吧

01:39:34.006 --> 01:39:35.956 A:middle
这里我们有阿克哈姆疯人院

01:39:36.106 --> 01:39:38.316 A:middle
有真实的阴影

01:39:38.466 --> 01:39:40.286 A:middle
和动态灯光

01:39:40.286 --> 01:39:41.406 A:middle
真的让它栩栩如生

01:39:41.956 --> 01:39:43.786 A:middle
在此基础上

01:39:43.786 --> 01:39:45.626 A:middle
我们再加上动画和效果

01:39:45.686 --> 01:39:47.316 A:middle
就会真的再加上

01:39:47.406 --> 01:39:48.856 A:middle
一种魔法与生命的感觉

01:39:49.586 --> 01:39:51.526 A:middle
有了尺寸估算

01:39:51.526 --> 01:39:53.046 A:middle
我们加进来的玩具

01:39:53.046 --> 01:39:54.616 A:middle
都是一比一的

01:39:54.616 --> 01:39:55.776 A:middle
我们会知道它们和乐高玩具

01:39:55.776 --> 01:39:56.426 A:middle
是一样的大小

01:39:57.656 --> 01:39:58.946 A:middle
这看上去是个很酷的

01:39:58.946 --> 01:40:00.446 A:middle
哥谭镇场景

01:39:58.946 --> 01:40:00.446 A:middle
哥谭镇场景

01:40:00.446 --> 01:40:01.426 A:middle
但总觉得

01:40:01.486 --> 01:40:02.636 A:middle
缺点什么  不是吗

01:40:03.236 --> 01:40:05.256 A:middle
所以我们要继续添加

01:40:05.256 --> 01:40:07.376 A:middle
独一无二的乐高蝙蝠车

01:40:08.526 --> 01:40:09.786 A:middle
还有那个男人

01:40:09.786 --> 01:40:11.556 A:middle
披风斗士  乐高蝙蝠侠  当然

01:40:12.476 --> 01:40:14.326 A:middle
这真是个超酷的

01:40:14.326 --> 01:40:14.846 A:middle
模型

01:40:14.916 --> 01:40:15.866 A:middle
毫无疑问

01:40:15.916 --> 01:40:17.406 A:middle
但我们可以更进一步

01:40:18.086 --> 01:40:19.956 A:middle
我们可以开始调查

01:40:19.956 --> 01:40:21.546 A:middle
模型是怎么搭建的

01:40:21.796 --> 01:40:23.696 A:middle
用这个视图来看一看

01:40:24.586 --> 01:40:26.176 A:middle
蝙蝠侠似乎不太高兴

01:40:26.176 --> 01:40:27.546 A:middle
所以我们还是先

01:40:27.546 --> 01:40:28.666 A:middle
把它拼回去吧  我想

01:40:31.166 --> 01:40:33.826 A:middle
我们还能放大

01:40:33.826 --> 01:40:34.806 A:middle
我们的模型

01:40:34.846 --> 01:40:35.966 A:middle
想像一下  你钻到

01:40:35.966 --> 01:40:37.306 A:middle
你的乐高模型内部

01:40:37.306 --> 01:40:39.276 A:middle
从全新的角度

01:40:39.276 --> 01:40:40.416 A:middle
观察探索它们

01:40:40.416 --> 01:40:42.026 A:middle
有了这么大的蝙蝠车

01:40:42.106 --> 01:40:44.026 A:middle
谁又不想

01:40:44.026 --> 01:40:45.686 A:middle
钻进去一探究竟

01:40:45.686 --> 01:40:48.206 A:middle
看看那些超酷的装备

01:40:48.436 --> 01:40:49.236 A:middle
和驾驶舱呢

01:40:50.316 --> 01:40:51.846 A:middle
[掌声]  甚至还能

01:40:51.846 --> 01:40:53.286 A:middle
从里面看到外面的朋友

01:40:53.536 --> 01:40:53.896 A:middle
什么都行

01:40:53.976 --> 01:40:55.896 A:middle
来张自拍

01:40:55.896 --> 01:40:56.646 A:middle
非常有趣

01:40:57.536 --> 01:40:59.706 A:middle
随着我们的乐高套装

01:40:59.706 --> 01:41:01.596 A:middle
获得了生命与动态

01:40:59.706 --> 01:41:01.596 A:middle
获得了生命与动态

01:41:01.596 --> 01:41:03.046 A:middle
我们甚至可以开始扮演

01:41:03.046 --> 01:41:04.096 A:middle
电影制作者的角色了

01:41:04.676 --> 01:41:06.536 A:middle
想象一下  随着我们的进入  把这些场景

01:41:06.536 --> 01:41:08.076 A:middle
和精彩镜头都捕捉下来

01:41:11.516 --> 01:41:13.886 A:middle
[ 音乐 ]

01:41:14.386 --> 01:41:14.886 A:middle
无时无刻

01:41:17.116 --> 01:41:19.766 A:middle
在乐高  我们研究

01:41:19.766 --> 01:41:21.026 A:middle
增强现实已经有

01:41:21.096 --> 01:41:21.646 A:middle
好几年了

01:41:21.646 --> 01:41:22.176 A:middle
对吧

01:41:22.486 --> 01:41:23.426 A:middle
这个镜头是不是很赞

01:41:26.501 --> 01:41:28.501 A:middle
[ 掌声 ]

01:41:28.986 --> 01:41:30.456 A:middle
我们有很多的创意

01:41:30.456 --> 01:41:31.696 A:middle
但知道现在

01:41:31.696 --> 01:41:33.546 A:middle
有了 ARKit 的

01:41:33.546 --> 01:41:35.146 A:middle
强大功能与便捷性

01:41:35.146 --> 01:41:36.576 A:middle
我们才终于把创意变成了现实

01:41:37.066 --> 01:41:38.676 A:middle
所以在今年晚些时候

01:41:38.746 --> 01:41:39.546 A:middle
我们非常期待能够

01:41:39.546 --> 01:41:40.236 A:middle
把这些体验

01:41:40.236 --> 01:41:42.406 A:middle
在 App Store 中

01:41:42.406 --> 01:41:44.086 A:middle
带给你们和每一个人

01:41:44.466 --> 01:41:45.376 A:middle
非常感谢

01:41:46.516 --> 01:41:51.556 A:middle
[ 掌声 ]

01:41:52.056 --> 01:41:52.356 A:middle
&gt;&gt;  好的

01:41:52.456 --> 01:41:53.346 A:middle
谢谢

01:41:53.346 --> 01:41:56.306 A:middle
真是精彩的演示

01:41:56.496 --> 01:41:57.986 A:middle
如果你想了解

01:41:57.986 --> 01:41:59.356 A:middle
更多关于如何

01:41:59.356 --> 01:42:01.196 A:middle
在自己的 app 中利用 AR 的创意

01:41:59.356 --> 01:42:01.196 A:middle
在自己的 app 中利用 AR 的创意

01:42:01.196 --> 01:42:02.356 A:middle
我建议你们走到

01:42:02.356 --> 01:42:04.006 A:middle
动手体验区  现在已经开放了

01:42:04.006 --> 01:42:05.406 A:middle
一直会开到

01:42:05.406 --> 01:42:06.106 A:middle
今晚 7 点

01:42:06.456 --> 01:42:07.536 A:middle
你们会找到更多的

01:42:07.596 --> 01:42:08.906 A:middle
演示  来自我们在 AR 领域的

01:42:08.906 --> 01:42:10.196 A:middle
合作伙伴

01:42:11.256 --> 01:42:12.276 A:middle
这就是我们这个

01:42:12.276 --> 01:42:13.226 A:middle
演讲的全部内容

01:42:13.586 --> 01:42:14.936 A:middle
有一大批新的

01:42:14.936 --> 01:42:16.956 A:middle
技术和 API

01:42:16.956 --> 01:42:18.026 A:middle
你们都应该体验一下

01:42:18.026 --> 01:42:20.376 A:middle
我们让全新类型的

01:42:20.376 --> 01:42:22.066 A:middle
应用变得可能

01:42:22.066 --> 01:42:23.146 A:middle
我们为你们提供了

01:42:23.146 --> 01:42:24.326 A:middle
前沿技术的开发基石

01:42:24.326 --> 01:42:25.576 A:middle
如机器学习

01:42:25.576 --> 01:42:27.076 A:middle
和增强现实

01:42:27.526 --> 01:42:28.936 A:middle
所以请更深入了解

01:42:28.936 --> 01:42:30.166 A:middle
我们怎么利用它们

01:42:30.166 --> 01:42:31.366 A:middle
创造更加伟大的 app

01:42:33.636 --> 01:42:35.736 A:middle
我们所有操作系统

01:42:35.736 --> 01:42:37.126 A:middle
和开发者工具的

01:42:37.186 --> 01:42:38.786 A:middle
开发者预览

01:42:38.786 --> 01:42:40.026 A:middle
今天下午在 WWDC

01:42:40.026 --> 01:42:41.746 A:middle
Attendee Portal 就可以下载了

01:42:41.746 --> 01:42:43.146 A:middle
你们可以立刻

01:42:43.146 --> 01:42:44.456 A:middle
得到它们

01:42:44.456 --> 01:42:45.576 A:middle
并了解我们发布的东西

01:42:46.786 --> 01:42:47.766 A:middle
是的  当然

01:42:47.816 --> 01:42:49.006 A:middle
大会的很多演讲

01:42:49.006 --> 01:42:50.056 A:middle
会更加深入地

01:42:50.056 --> 01:42:52.466 A:middle
讲解这些主题

01:42:52.466 --> 01:42:53.586 A:middle
我建议你们好好利用

01:42:53.586 --> 01:42:55.076 A:middle
我们组织的很多实验室

01:42:55.416 --> 01:42:56.706 A:middle
你们可以在现场

01:42:56.706 --> 01:42:57.866 A:middle
见到 Apple 工程师

01:42:57.866 --> 01:42:58.546 A:middle
答疑解惑

01:42:58.766 --> 01:43:00.516 A:middle
我希望大家享受这次

01:42:58.766 --> 01:43:00.516 A:middle
我希望大家享受这次

01:43:00.516 --> 01:43:01.546 A:middle
盛会  我们本周

01:43:01.546 --> 01:43:02.256 A:middle
还会再见
