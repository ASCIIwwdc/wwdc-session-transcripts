WEBVTT

00:00:26.516 --> 00:00:31.266 A:middle
[掌声]

00:00:31.766 --> 00:00:32.305 A:middle
&gt;&gt; Jeff Tu: 大家下午好

00:00:32.876 --> 00:00:34.116 A:middle
欢迎你们

00:00:34.116 --> 00:00:35.996 A:middle
进入网络结构进阶的第二个部分

00:00:35.996 --> 00:00:37.356 A:middle
这个部分是对上个

00:00:37.356 --> 00:00:38.166 A:middle
会议的一个延续

00:00:38.956 --> 00:00:40.466 A:middle
我叫 Jeff Tu 接下来我会

00:00:40.466 --> 00:00:41.326 A:middle
向你们介绍

00:00:41.326 --> 00:00:41.500 A:middle
第一个话题

00:00:44.516 --> 00:00:45.936 A:middle
在这个部分中 我们将会讨论

00:00:45.936 --> 00:00:47.856 A:middle
新的 URLSession 开发者 API 和

00:00:47.856 --> 00:00:49.736 A:middle
一些改进 网络架构的最佳实践

00:00:49.736 --> 00:00:51.386 A:middle
以及一些其他的

00:00:51.386 --> 00:00:53.000 A:middle
网络架构中的重要技术

00:00:56.066 --> 00:00:57.516 A:middle
我们的第一个话题是新的

00:00:57.516 --> 00:00:58.446 A:middle
URLSession API

00:00:59.386 --> 00:01:02.556 A:middle
但开始之前 我想先

00:00:59.386 --> 00:01:02.556 A:middle
但开始之前 我想先

00:01:02.556 --> 00:01:04.086 A:middle
回顾一下我们将要讨论的

00:01:04.086 --> 00:01:05.396 A:middle
基本 API

00:01:05.396 --> 00:01:06.226 A:middle
那就是 URLSession

00:01:07.106 --> 00:01:09.086 A:middle
URLSession 是在 iOS 7 和

00:01:09.206 --> 00:01:11.176 A:middle
OS X Mavericks 中提出的一个很好用的

00:01:11.176 --> 00:01:12.676 A:middle
网络设计 API

00:01:13.736 --> 00:01:15.236 A:middle
URLSession 支持的网络协议

00:01:15.266 --> 00:01:18.816 A:middle
包括 HTTP/2 HTTP/1.1

00:01:19.156 --> 00:01:21.646 A:middle
FTP 和一些自定义流

00:01:21.646 --> 00:01:23.756 A:middle
它的重点在于 URL 加载

00:01:24.126 --> 00:01:26.976 A:middle
如果你给它一个 HTTPS URL

00:01:27.276 --> 00:01:29.096 A:middle
它会自动提供你和网络服务器

00:01:29.096 --> 00:01:30.906 A:middle
之间的数据的

00:01:30.906 --> 00:01:32.636 A:middle
加密和解密

00:01:34.286 --> 00:01:35.726 A:middle
去年我们停用了

00:01:35.866 --> 00:01:36.846 A:middle
NSURLConnection API

00:01:36.846 --> 00:01:39.476 A:middle
所以我们鼓励任何

00:01:39.476 --> 00:01:40.596 A:middle
新的使用 URLSession 的

00:01:40.596 --> 00:01:41.416 A:middle
app 开发

00:01:42.136 --> 00:01:43.486 A:middle
如果想了解关于

00:01:43.486 --> 00:01:44.946 A:middle
URLSession 更多的信息 我建议你

00:01:44.946 --> 00:01:47.356 A:middle
回看过去的 WWDC 会议

00:01:47.356 --> 00:01:48.726 A:middle
和其他网上的资源

00:01:51.936 --> 00:01:53.336 A:middle
回忆一下 你可以创建

00:01:53.336 --> 00:01:54.916 A:middle
几种不同的 URLSession 对象

00:01:54.916 --> 00:01:55.576 A:middle
你可以创建的

00:01:56.446 --> 00:01:57.896 A:middle
最基本的对象

00:01:57.966 --> 00:01:59.556 A:middle
是一个默认配置的

00:01:59.676 --> 00:02:01.126 A:middle
URLSession 对象

00:01:59.676 --> 00:02:01.126 A:middle
URLSession 对象

00:02:02.096 --> 00:02:03.786 A:middle
默认对象的一个行为特点是

00:02:03.906 --> 00:02:05.616 A:middle
它要么立刻可以

00:02:05.616 --> 00:02:07.896 A:middle
获取一个 URL 要么如果设备

00:02:07.896 --> 00:02:09.036 A:middle
不能连接到网络服务器的话

00:02:09.106 --> 00:02:10.616 A:middle
会立刻连接失败

00:02:11.646 --> 00:02:13.106 A:middle
URL 加载可能会失败

00:02:13.106 --> 00:02:14.316 A:middle
因为设备无法连接到网络

00:02:14.316 --> 00:02:15.686 A:middle
或者你正在尝试连接的

00:02:15.686 --> 00:02:16.826 A:middle
服务器恰好

00:02:16.826 --> 00:02:17.296 A:middle
不工作了

00:02:18.236 --> 00:02:19.386 A:middle
这只是其中的

00:02:19.386 --> 00:02:19.946 A:middle
几个例子

00:02:21.146 --> 00:02:22.836 A:middle
另一方面 后台 URLSession 对象

00:02:22.836 --> 00:02:24.506 A:middle
则没有这种

00:02:24.506 --> 00:02:25.656 A:middle
立刻获取或失效的情况

00:02:25.656 --> 00:02:27.256 A:middle
它是根据进程而安排的

00:02:27.256 --> 00:02:28.976 A:middle
并且持续监控

00:02:28.976 --> 00:02:30.096 A:middle
与服务器之间的

00:02:30.346 --> 00:02:31.626 A:middle
网络连接情况

00:02:34.436 --> 00:02:36.386 A:middle
有更多 URLSession 任务

00:02:36.386 --> 00:02:37.926 A:middle
因为网络连接差

00:02:37.926 --> 00:02:38.876 A:middle
而失败的例子

00:02:39.816 --> 00:02:40.736 A:middle
你可能会没有

00:02:40.736 --> 00:02:42.556 A:middle
互联网连接

00:02:42.606 --> 00:02:43.666 A:middle
你可能正在一个剧院里

00:02:43.666 --> 00:02:45.056 A:middle
你的手机开了飞行模式

00:02:45.056 --> 00:02:45.626 A:middle
或者说它应该是飞行模式

00:02:46.756 --> 00:02:47.776 A:middle
可能你的连接对象

00:02:47.776 --> 00:02:49.196 A:middle
不允许使用

00:02:49.196 --> 00:02:51.246 A:middle
数据网络 而用户只可以连接

00:02:51.246 --> 00:02:52.036 A:middle
数据网络

00:02:52.986 --> 00:02:54.236 A:middle
或者服务器

00:02:54.236 --> 00:02:55.726 A:middle
只有在 VPN 的情况下才可以访问

00:02:55.726 --> 00:02:57.406 A:middle
而管理员最近修改了

00:02:57.406 --> 00:02:58.000 A:middle
VPN 权限

00:03:01.206 --> 00:03:02.686 A:middle
你们作为 app 的开发者

00:03:02.686 --> 00:03:03.896 A:middle
将如何应对一个失败的

00:03:03.976 --> 00:03:04.476 A:middle
网络负载呢

00:03:05.696 --> 00:03:08.366 A:middle
过去 我们建议你

00:03:08.366 --> 00:03:10.096 A:middle
使用 SCNetworkReachability

00:03:10.096 --> 00:03:11.576 A:middle
API 来检测你何时

00:03:11.576 --> 00:03:13.116 A:middle
能够再次获得

00:03:13.176 --> 00:03:13.566 A:middle
服务器连接

00:03:14.406 --> 00:03:16.006 A:middle
还有一些其他方法

00:03:16.006 --> 00:03:17.856 A:middle
比如每个特定时段抽样

00:03:17.856 --> 00:03:19.636 A:middle
或者依赖于用户点击或拖动界面

00:03:19.636 --> 00:03:21.186 A:middle
来进行刷新

00:03:22.246 --> 00:03:23.786 A:middle
这些方法的问题在于

00:03:23.786 --> 00:03:25.196 A:middle
它们把你的 app 变的

00:03:25.196 --> 00:03:26.646 A:middle
更复杂 并且不总是

00:03:26.646 --> 00:03:27.146 A:middle
有效的

00:03:28.226 --> 00:03:30.256 A:middle
SCNetworkReachability 只能

00:03:30.256 --> 00:03:31.606 A:middle
告诉你 你可能能

00:03:31.606 --> 00:03:32.936 A:middle
连接到服务器

00:03:32.936 --> 00:03:33.276 A:middle
而不是保证你能连接

00:03:34.256 --> 00:03:35.616 A:middle
你作为开发者一直在

00:03:35.616 --> 00:03:37.000 A:middle
寻找一个更简单的解决方案

00:03:39.536 --> 00:03:41.066 A:middle
如果只需要说

00:03:41.066 --> 00:03:42.956 A:middle
“请在网络可用时

00:03:42.956 --> 00:03:44.746 A:middle
帮我获取这个资源”

00:03:44.746 --> 00:03:45.366 A:middle
不是更简单吗

00:03:48.756 --> 00:03:50.016 A:middle
我们很高兴地告诉你们

00:03:50.016 --> 00:03:51.126 A:middle
我们现在有了一个新功能

00:03:51.126 --> 00:03:51.436 A:middle
允许你这样做

00:03:51.886 --> 00:03:53.396 A:middle
我们称之为 URLSession

00:03:53.466 --> 00:03:55.036 A:middle
Adaptable Connectivity API

00:03:56.246 --> 00:03:56.486 A:middle
这个

00:03:57.516 --> 00:04:01.936 A:middle
[ 掌声 ]

00:03:57.516 --> 00:04:01.936 A:middle
[ 掌声 ]

00:04:02.436 --> 00:04:04.706 A:middle
这个 API 现在所有的平台

00:04:04.706 --> 00:04:05.256 A:middle
都可用

00:04:07.476 --> 00:04:09.626 A:middle
通过启用这个 API

00:04:09.626 --> 00:04:11.316 A:middle
你就可以告诉 URLSession

00:04:11.316 --> 00:04:13.156 A:middle
如果任务由于

00:04:13.156 --> 00:04:13.936 A:middle
无法连接而失败

00:04:13.936 --> 00:04:15.746 A:middle
它应该是等待

00:04:15.746 --> 00:04:17.176 A:middle
与服务器连接

00:04:17.176 --> 00:04:18.416 A:middle
而不是直接失败

00:04:21.546 --> 00:04:22.436 A:middle
那么怎么启用它呢

00:04:22.766 --> 00:04:24.286 A:middle
有一个 boolean 属性

00:04:24.286 --> 00:04:26.056 A:middle
叫做 waitsForConnectivity

00:04:26.826 --> 00:04:28.296 A:middle
把它设成 True

00:04:28.296 --> 00:04:29.246 A:middle
然后你就可以获得这个新特性了

00:04:30.226 --> 00:04:31.746 A:middle
我想重复一下这个

00:04:31.746 --> 00:04:32.496 A:middle
属性的功能

00:04:33.056 --> 00:04:34.566 A:middle
你可以摆脱默认的那种

00:04:34.566 --> 00:04:36.466 A:middle
要么加载要么如果无法连接

00:04:36.466 --> 00:04:38.976 A:middle
就失败的行为模式

00:04:39.306 --> 00:04:40.366 A:middle
变成如果我无法连接

00:04:40.366 --> 00:04:42.206 A:middle
并且因此而失败的情况下

00:04:42.206 --> 00:04:44.146 A:middle
当我有机会连接到服务器时

00:04:44.146 --> 00:04:45.426 A:middle
重新尝试再次加载

00:04:46.526 --> 00:04:48.896 A:middle
如果遭遇了 DNS 故障时

00:04:48.896 --> 00:04:50.556 A:middle
这个 API 也可以等

00:04:50.686 --> 00:04:52.426 A:middle
因为一个网络的 DNS 服务

00:04:52.426 --> 00:04:53.986 A:middle
可能无法解析 但是

00:04:53.986 --> 00:04:55.946 A:middle
另一个网络的可能可以

00:04:56.576 --> 00:04:59.046 A:middle
请注意你不需要

00:04:59.046 --> 00:05:00.776 A:middle
在后台会话中启用这个 API

00:04:59.046 --> 00:05:00.776 A:middle
在后台会话中启用这个 API

00:05:00.776 --> 00:05:02.916 A:middle
因为后台 URLSession 对象会

00:05:02.916 --> 00:05:04.366 A:middle
自动获取这种行为模式

00:05:04.986 --> 00:05:05.966 A:middle
我们会稍后

00:05:05.966 --> 00:05:09.000 A:middle
向你们解释其中的区别

00:05:11.016 --> 00:05:12.526 A:middle
你可能会想

00:05:12.646 --> 00:05:14.146 A:middle
“如果它进入等待状态时

00:05:14.146 --> 00:05:15.276 A:middle
我的代码可以收到通知吗”

00:05:15.376 --> 00:05:18.556 A:middle
当它等待重新连接时

00:05:18.556 --> 00:05:19.836 A:middle
你可能想要你的 app

00:05:19.836 --> 00:05:20.686 A:middle
展现其他功能

00:05:20.936 --> 00:05:22.826 A:middle
比如 做一个

00:05:22.826 --> 00:05:24.376 A:middle
离线浏览模式

00:05:24.376 --> 00:05:25.946 A:middle
或者一个只有在用户使用数据网络时

00:05:25.946 --> 00:05:26.660 A:middle
才用到的模式

00:05:29.436 --> 00:05:30.786 A:middle
如果你想知道

00:05:30.786 --> 00:05:32.076 A:middle
何时你的 app 正处于这样的等待状态

00:05:32.076 --> 00:05:33.766 A:middle
你可以选择

00:05:33.766 --> 00:05:35.246 A:middle
运行 URLSession

00:05:35.286 --> 00:05:37.176 A:middle
taskIsWaitingForConnectivity

00:05:37.176 --> 00:05:38.086 A:middle
委托功能

00:05:39.106 --> 00:05:40.446 A:middle
请注意 这个委托功能

00:05:40.446 --> 00:05:42.776 A:middle
只有在你已经把

00:05:42.776 --> 00:05:43.866 A:middle
waitsForConnectivity

00:05:43.866 --> 00:05:45.096 A:middle
属性设为 True 时才可用

00:05:45.806 --> 00:05:47.446 A:middle
如果你已经这么做了的话

00:05:47.446 --> 00:05:48.636 A:middle
这个委托功能只会

00:05:48.636 --> 00:05:50.386 A:middle
被运行一次

00:05:50.386 --> 00:05:52.256 A:middle
或者如果这个任务根本不需要等的话

00:05:53.016 --> 00:05:53.126 A:middle
它就不需要运行

00:05:56.896 --> 00:05:58.566 A:middle
我们建议你的 app

00:05:58.706 --> 00:05:59.726 A:middle
一直将

00:05:59.726 --> 00:06:01.046 A:middle
waitsForConnectivity 属性设为打开状态

00:05:59.726 --> 00:06:01.046 A:middle
waitsForConnectivity 属性设为打开状态

00:06:01.816 --> 00:06:03.306 A:middle
这是因为即使

00:06:03.306 --> 00:06:05.386 A:middle
你打开了它 每个任务也会试图

00:06:05.386 --> 00:06:06.156 A:middle
立刻运行

00:06:06.696 --> 00:06:08.106 A:middle
任务只有在它

00:06:08.106 --> 00:06:09.146 A:middle
不能连接到服务器时才会等待

00:06:09.986 --> 00:06:11.146 A:middle
不过也有一些

00:06:11.146 --> 00:06:12.126 A:middle
少有的例外

00:06:13.126 --> 00:06:14.366 A:middle
比如 如果你有一个

00:06:14.366 --> 00:06:15.796 A:middle
URLSession 任务 它的目的

00:06:15.796 --> 00:06:16.916 A:middle
是以市场价格购入股票

00:06:16.916 --> 00:06:18.516 A:middle
你可能需要它

00:06:18.516 --> 00:06:20.476 A:middle
要么运行要么失败

00:06:20.476 --> 00:06:22.746 A:middle
而不是等到你再次获得

00:06:23.066 --> 00:06:23.576 A:middle
网络连接

00:06:24.556 --> 00:06:26.656 A:middle
值得一提的是

00:06:26.656 --> 00:06:27.376 A:middle
当你打开

00:06:27.376 --> 00:06:29.236 A:middle
waitsForConnectivity 后

00:06:29.236 --> 00:06:30.796 A:middle
请求超时响应时间的计时器

00:06:31.086 --> 00:06:33.186 A:middle
只会在你

00:06:33.226 --> 00:06:34.256 A:middle
连接到服务器后才会启动

00:06:35.066 --> 00:06:36.756 A:middle
资源的超时响应功能

00:06:36.756 --> 00:06:38.456 A:middle
是被尊重的

00:06:39.026 --> 00:06:43.746 A:middle
我们来总结一下我们可以

00:06:43.746 --> 00:06:45.326 A:middle
怎样使用这个 API 然后就开始

00:06:45.326 --> 00:06:45.976 A:middle
看一些示范代码

00:06:47.326 --> 00:06:48.956 A:middle
主要就是打开

00:06:48.956 --> 00:06:49.856 A:middle
waitsForConnectivity

00:06:49.856 --> 00:06:50.336 A:middle
属性

00:06:50.956 --> 00:06:52.286 A:middle
你可以跟以前一样

00:06:52.286 --> 00:06:53.646 A:middle
创建或者继续使用 URLSessionTask

00:06:54.666 --> 00:06:56.216 A:middle
如果设备无法连接到

00:06:56.216 --> 00:06:57.946 A:middle
服务器 我们就会启用一个

00:06:57.946 --> 00:06:59.656 A:middle
委托回调功能 并且只会

00:06:59.796 --> 00:07:00.636 A:middle
启用一次

00:06:59.796 --> 00:07:00.636 A:middle
启用一次

00:07:02.116 --> 00:07:03.756 A:middle
其他的 URLSession 功能

00:07:03.756 --> 00:07:05.436 A:middle
还是跟之前一样启用

00:07:06.496 --> 00:07:08.016 A:middle
不过要记住

00:07:08.016 --> 00:07:09.316 A:middle
这个 API 只会对

00:07:09.316 --> 00:07:10.660 A:middle
非后台会话的任务起作用

00:07:14.636 --> 00:07:15.826 A:middle
我们一起来看一个示范代码

00:07:17.186 --> 00:07:18.846 A:middle
首先创建一个会话

00:07:18.846 --> 00:07:20.756 A:middle
配置对象 并且

00:07:20.756 --> 00:07:24.886 A:middle
把它设置成默认类型

00:07:25.086 --> 00:07:25.756 A:middle
选择启用

00:07:25.756 --> 00:07:27.056 A:middle
waitsForConnectivity 属性

00:07:29.536 --> 00:07:31.286 A:middle
创建会话对象

00:07:31.286 --> 00:07:32.736 A:middle
并且设置好你想要加载的 URL

00:07:33.366 --> 00:07:37.276 A:middle
用会话对象来创建

00:07:37.276 --> 00:07:38.046 A:middle
一个任务对象

00:07:41.976 --> 00:07:43.606 A:middle
最后重新开始

00:07:43.606 --> 00:07:44.000 A:middle
这个任务

00:07:50.156 --> 00:07:51.346 A:middle
即使有可用的

00:07:51.346 --> 00:07:52.936 A:middle
连接 你的请求也

00:07:52.936 --> 00:07:54.396 A:middle
仍然可能因为其他原因失败

00:07:55.126 --> 00:07:56.736 A:middle
比如 你可能已经

00:07:56.736 --> 00:07:58.846 A:middle
连接到服务器 但是一个新来的

00:07:58.846 --> 00:08:00.856 A:middle
数据中心的工作人员可能拔掉了

00:07:58.846 --> 00:08:00.856 A:middle
数据中心的工作人员可能拔掉了

00:08:00.856 --> 00:08:02.016 A:middle
服务器 导致网络

00:08:02.016 --> 00:08:03.086 A:middle
连接断开

00:08:03.086 --> 00:08:03.946 A:middle
然后你的手机上所有的 app

00:08:04.086 --> 00:08:04.660 A:middle
都会消失

00:08:06.666 --> 00:08:08.416 A:middle
或者你的设备连接到服务器

00:08:08.466 --> 00:08:10.826 A:middle
并且发送了一个 HTTP 请求

00:08:10.826 --> 00:08:12.226 A:middle
但是数据流量太大

00:08:12.226 --> 00:08:13.476 A:middle
导致请求超时

00:08:14.926 --> 00:08:16.446 A:middle
针对这种情况

00:08:16.446 --> 00:08:17.536 A:middle
我们建议你查询

00:08:17.536 --> 00:08:19.696 A:middle
网上资源 它们会提供

00:08:19.696 --> 00:08:20.776 A:middle
更多关于你应该怎么做的细节

00:08:22.136 --> 00:08:23.336 A:middle
不过 在紧密循环中

00:08:23.336 --> 00:08:24.786 A:middle
重试网络加载

00:08:24.786 --> 00:08:25.746 A:middle
往往都不是一个好主意

00:08:25.876 --> 00:08:30.876 A:middle
你希望得到一个更好的

00:08:30.876 --> 00:08:32.116 A:middle
加载网络资源的方法

00:08:32.525 --> 00:08:33.846 A:middle
比等待网络

00:08:33.846 --> 00:08:35.556 A:middle
连接到服务器更好

00:08:35.556 --> 00:08:36.775 A:middle
也比使用一个

00:08:36.905 --> 00:08:37.876 A:middle
不能保证一定能

00:08:37.876 --> 00:08:38.905 A:middle
连接到服务器的 API 更好

00:08:40.265 --> 00:08:42.596 A:middle
让 URLSession

00:08:42.596 --> 00:08:42.836 A:middle
来帮你

00:08:43.626 --> 00:08:44.476 A:middle
启用

00:08:44.476 --> 00:08:46.116 A:middle
waitsForConnectivity 适应性

00:08:46.116 --> 00:08:47.056 A:middle
连接 API

00:08:47.686 --> 00:08:49.746 A:middle
如果你启用了 这个请求

00:08:49.746 --> 00:08:51.516 A:middle
仍然会立刻运行

00:08:51.516 --> 00:08:53.786 A:middle
不会有任何性能损失

00:08:53.786 --> 00:08:55.056 A:middle
并且只有在你无法连接到

00:08:55.056 --> 00:08:55.476 A:middle
服务器的情况下等待

00:08:56.366 --> 00:08:57.756 A:middle
一旦它可用连接

00:08:57.756 --> 00:08:59.396 A:middle
你的 URLSession 任务就会像

00:08:59.396 --> 00:09:00.106 A:middle
之前一样工作

00:08:59.396 --> 00:09:00.106 A:middle
之前一样工作

00:09:02.326 --> 00:09:03.566 A:middle
继续我们关于新进展的主题

00:09:03.566 --> 00:09:05.126 A:middle
我要把麦克风传给

00:09:05.126 --> 00:09:06.336 A:middle
我的同事 Jeff Jenkins

00:09:07.516 --> 00:09:13.016 A:middle
[ 掌声 ]

00:09:13.516 --> 00:09:14.166 A:middle
&gt;&gt; Jeff Jenkins: 谢谢 Jeff

00:09:15.586 --> 00:09:16.646 A:middle
大家下午好

00:09:16.686 --> 00:09:17.836 A:middle
希望你们喜欢这场 WWDC

00:09:18.736 --> 00:09:20.556 A:middle
我很高兴来到这里

00:09:20.556 --> 00:09:21.966 A:middle
很高兴向你们介绍

00:09:21.966 --> 00:09:24.296 A:middle
我们对 URLSessionTask API

00:09:24.296 --> 00:09:27.946 A:middle
所做的一些改进

00:09:32.106 --> 00:09:33.606 A:middle
首先 我想花一点时间

00:09:33.606 --> 00:09:34.956 A:middle
跟你们谈谈

00:09:34.956 --> 00:09:37.056 A:middle
后台 URLSession

00:09:37.056 --> 00:09:38.036 A:middle
我们没有好好介绍过它

00:09:38.036 --> 00:09:39.156 A:middle
所以请让我来告诉你们

00:09:39.156 --> 00:09:40.616 A:middle
关于它的一些

00:09:40.616 --> 00:09:40.846 A:middle
背景知识

00:09:41.246 --> 00:09:42.516 A:middle
后台会话的

00:09:42.876 --> 00:09:45.716 A:middle
URLSession API 允许你的 app

00:09:45.716 --> 00:09:47.086 A:middle
在即使不运行

00:09:47.086 --> 00:09:49.266 A:middle
或你在处理的过程中

00:09:49.266 --> 00:09:50.796 A:middle
也可以进行联网

00:09:51.926 --> 00:09:53.696 A:middle
我们会监控

00:09:53.936 --> 00:09:57.286 A:middle
系统状态 CPU 电池等等

00:09:57.286 --> 00:09:59.136 A:middle
各种事情来帮你找到

00:09:59.136 --> 00:10:01.146 A:middle
完成联网任务的

00:09:59.136 --> 00:10:01.146 A:middle
完成联网任务的

00:10:01.146 --> 00:10:02.496 A:middle
正确时间

00:10:03.186 --> 00:10:05.866 A:middle
现在 当然 如果你

00:10:05.866 --> 00:10:07.786 A:middle
执行一些委托功能

00:10:07.786 --> 00:10:09.456 A:middle
我们可以唤醒你的 app

00:10:09.456 --> 00:10:10.946 A:middle
然后执行委托回调

00:10:10.946 --> 00:10:11.976 A:middle
这样你就可以

00:10:11.976 --> 00:10:12.816 A:middle
处理这些信息

00:10:13.286 --> 00:10:14.326 A:middle
当然 我们会确保

00:10:14.326 --> 00:10:15.936 A:middle
当你的任务完成时

00:10:16.376 --> 00:10:17.706 A:middle
你的 app 仍然在运行

00:10:17.706 --> 00:10:19.316 A:middle
这样你就能够处理那些数据

00:10:19.316 --> 00:10:24.546 A:middle
现在 后台 URLSession 的一个

00:10:24.696 --> 00:10:26.556 A:middle
好用之处就是

00:10:26.556 --> 00:10:28.106 A:middle
利用了系统中的

00:10:28.516 --> 00:10:30.186 A:middle
另一个功能

00:10:30.496 --> 00:10:32.376 A:middle
就是后台 app 刷新

00:10:33.176 --> 00:10:34.716 A:middle
现在 它的做法是

00:10:34.716 --> 00:10:36.876 A:middle
允许你的 app 掌握

00:10:36.876 --> 00:10:38.766 A:middle
最近 最新的数据

00:10:38.766 --> 00:10:39.206 A:middle
对不对

00:10:39.546 --> 00:10:41.166 A:middle
没有什么比

00:10:41.576 --> 00:10:42.936 A:middle
你拿出设备

00:10:43.136 --> 00:10:44.456 A:middle
打开一个app

00:10:44.456 --> 00:10:45.426 A:middle
而你看到的第一个东西

00:10:45.426 --> 00:10:47.476 A:middle
就是一个在转的圈圈更让人心烦了

00:10:47.476 --> 00:10:48.326 A:middle
你在等着

00:10:48.326 --> 00:10:50.036 A:middle
这个 app 启动

00:10:50.036 --> 00:10:50.586 A:middle
获取数据

00:10:50.996 --> 00:10:52.416 A:middle
你希望马上得到那个数据

00:10:52.416 --> 00:10:53.456 A:middle
你希望马上把那个

00:10:53.456 --> 00:10:55.116 A:middle
数据传送给你的用户

00:10:55.466 --> 00:10:57.296 A:middle
这样你的用户就会

00:10:57.296 --> 00:10:57.566 A:middle
很开心地使用你的 app

00:10:58.106 --> 00:10:59.486 A:middle
后台 app 刷新就能让你

00:10:59.486 --> 00:10:59.806 A:middle
做到这样

00:10:59.806 --> 00:11:01.316 A:middle
它可以告诉系统

00:10:59.806 --> 00:11:01.316 A:middle
它可以告诉系统

00:11:01.756 --> 00:11:03.286 A:middle
“嘿 未来我希望

00:11:03.286 --> 00:11:04.296 A:middle
可以被启动

00:11:04.296 --> 00:11:05.886 A:middle
这样我就可以刷新我的数据

00:11:05.886 --> 00:11:06.766 A:middle
让我获取最重要的

00:11:06.766 --> 00:11:08.046 A:middle
信息”可能是

00:11:08.046 --> 00:11:09.756 A:middle
股票信息 或者是

00:11:09.836 --> 00:11:11.396 A:middle
天气预报 或者是

00:11:11.396 --> 00:11:12.356 A:middle
你的 app 提供的其他信息

00:11:13.166 --> 00:11:13.996 A:middle
现在它可以

00:11:13.996 --> 00:11:16.566 A:middle
应用于 app

00:11:16.666 --> 00:11:18.096 A:middle
包括 watchOS 版本

00:11:18.426 --> 00:11:19.166 A:middle
如果你想

00:11:19.166 --> 00:11:20.256 A:middle
更加深入了解

00:11:20.256 --> 00:11:22.706 A:middle
后台 app 刷新 你可以

00:11:22.706 --> 00:11:26.256 A:middle
回顾 2013 年的 WWDC

00:11:26.256 --> 00:11:28.996 A:middle
以及去年的 WWDC

00:11:28.996 --> 00:11:30.136 A:middle
查看相关会议

00:11:31.296 --> 00:11:35.786 A:middle
那么让我们来看一看

00:11:35.786 --> 00:11:37.986 A:middle
后台 app 刷新的运行 它到底

00:11:37.986 --> 00:11:38.766 A:middle
在做什么

00:11:39.496 --> 00:11:41.246 A:middle
为此 我们可能需要

00:11:41.246 --> 00:11:42.896 A:middle
看一看你的 app 的状态

00:11:44.366 --> 00:11:45.876 A:middle
三种状态

00:11:45.876 --> 00:11:47.476 A:middle
运行状态 暂停状态

00:11:47.476 --> 00:11:49.626 A:middle
或是后台状态

00:11:50.666 --> 00:11:52.786 A:middle
现在 你的 app 正在运行中

00:11:52.786 --> 00:11:53.616 A:middle
你要启用

00:11:53.616 --> 00:11:54.936 A:middle
后台 app 刷新

00:11:54.936 --> 00:11:55.756 A:middle
你就要告诉系统

00:11:55.756 --> 00:11:57.816 A:middle
“未来 需要运行我的 app

00:11:57.816 --> 00:11:58.936 A:middle
确保它在运行 使我可以

00:11:58.936 --> 00:12:00.056 A:middle
获得最新的信息”

00:11:58.936 --> 00:12:00.056 A:middle
获得最新的信息”

00:12:00.556 --> 00:12:02.216 A:middle
然后你的进程将被暂停

00:12:02.846 --> 00:12:04.846 A:middle
未来你的进程

00:12:04.846 --> 00:12:07.036 A:middle
在运行时 你 app 就可以

00:12:07.606 --> 00:12:09.486 A:middle
要求获取新的数据

00:12:09.796 --> 00:12:12.396 A:middle
跟优秀的开发者一样

00:12:12.396 --> 00:12:14.076 A:middle
这个 app 在使用 URLSession API

00:12:14.246 --> 00:12:15.866 A:middle
事实上 它使用的是一个后台

00:12:15.866 --> 00:12:16.596 A:middle
URLSession

00:12:16.596 --> 00:12:19.046 A:middle
它创建一个 URLSession 任务

00:12:19.046 --> 00:12:21.446 A:middle
让这个任务运行

00:12:21.446 --> 00:12:22.456 A:middle
并且抓取你的 app

00:12:22.456 --> 00:12:23.576 A:middle
所需要的数据

00:12:25.396 --> 00:12:28.626 A:middle
你的进程在这个时候

00:12:28.626 --> 00:12:30.226 A:middle
可能会停止 但是在某个时候

00:12:30.226 --> 00:12:32.126 A:middle
URLSession 会运行你的任务

00:12:32.126 --> 00:12:33.216 A:middle
如果一切顺利的话

00:12:33.216 --> 00:12:34.636 A:middle
你的 app 也就会运行

00:12:34.636 --> 00:12:35.566 A:middle
直到任务完成

00:12:36.046 --> 00:12:36.726 A:middle
这样你就会获得数据了

00:12:37.136 --> 00:12:38.556 A:middle
我们将会在后台

00:12:38.556 --> 00:12:40.406 A:middle
运行你的 app

00:12:40.406 --> 00:12:41.696 A:middle
允许你来处理

00:12:41.696 --> 00:12:43.936 A:middle
那个完成了的任务

00:12:43.936 --> 00:12:45.456 A:middle
以及我们为你抓取的数据

00:12:45.826 --> 00:12:48.856 A:middle
某个时候 用户会

00:12:48.856 --> 00:12:49.886 A:middle
打开你的 app

00:12:49.886 --> 00:12:50.826 A:middle
它就会到前台来

00:12:50.826 --> 00:12:51.746 A:middle
然后他们就会获得

00:12:51.746 --> 00:12:53.016 A:middle
最新的数据

00:12:53.436 --> 00:12:54.226 A:middle
这可棒极了

00:12:54.606 --> 00:12:56.756 A:middle
当我们观察了这个流程

00:12:56.756 --> 00:12:57.936 A:middle
我们说“嗯 也许

00:12:57.936 --> 00:13:00.236 A:middle
我们可以做点什么

00:12:57.936 --> 00:13:00.236 A:middle
我们可以做点什么

00:13:00.236 --> 00:13:02.116 A:middle
帮助我们的开发者来

00:13:02.116 --> 00:13:04.386 A:middle
在我们的平台上改进他们的 app"

00:13:05.026 --> 00:13:06.756 A:middle
我们认为我们可以

00:13:06.756 --> 00:13:07.236 A:middle
为你们做点什么

00:13:08.596 --> 00:13:10.746 A:middle
我们想要解决的第一个问题

00:13:10.746 --> 00:13:13.006 A:middle
就是我们注意到

00:13:13.006 --> 00:13:14.836 A:middle
必须有一个另外的后台运行

00:13:14.836 --> 00:13:16.186 A:middle
你才能创建

00:13:16.186 --> 00:13:18.166 A:middle
这个 URLSession 任务

00:13:19.026 --> 00:13:20.466 A:middle
我们都知道

00:13:20.466 --> 00:13:21.666 A:middle
任何时候你开始这个进程

00:13:21.666 --> 00:13:21.976 A:middle
意味着什么

00:13:21.976 --> 00:13:23.696 A:middle
意味着它会影响电池寿命

00:13:24.116 --> 00:13:25.456 A:middle
对 CPU 造成负担

00:13:25.456 --> 00:13:27.306 A:middle
我们这些无关紧要的工作

00:13:27.306 --> 00:13:28.316 A:middle
恐怕对设备并不是件好事

00:13:28.366 --> 00:13:30.226 A:middle
而且其实我们真的

00:13:30.226 --> 00:13:31.846 A:middle
不需要这么做

00:13:32.936 --> 00:13:34.366 A:middle
我们想要解决的

00:13:34.366 --> 00:13:36.146 A:middle
另一个问题是陈旧的

00:13:36.146 --> 00:13:37.066 A:middle
网络请求 对吧？

00:13:37.066 --> 00:13:38.996 A:middle
你可以让 URLSession

00:13:38.996 --> 00:13:39.446 A:middle
来帮你解决

00:13:39.446 --> 00:13:40.906 A:middle
但是在未来的某个时刻

00:13:41.396 --> 00:13:42.686 A:middle
这个任务会被完成

00:13:43.126 --> 00:13:44.766 A:middle
那么在你要求任务开始

00:13:44.766 --> 00:13:46.036 A:middle
和任务完成之间

00:13:46.036 --> 00:13:47.356 A:middle
要发生点什么呢？

00:13:47.356 --> 00:13:48.796 A:middle
也许其中情况发生了一些变化

00:13:48.796 --> 00:13:50.796 A:middle
使得最初的

00:13:50.796 --> 00:13:52.046 A:middle
请求没有意义了

00:13:53.216 --> 00:13:53.956 A:middle
所以我们需要给予你们

00:13:53.956 --> 00:13:55.976 A:middle
这样的机会

00:13:56.026 --> 00:13:57.436 A:middle
如果情况发生改变

00:13:57.436 --> 00:13:59.426 A:middle
让我们知道 并且最终

00:13:59.426 --> 00:14:01.226 A:middle
去掉这些陈旧的网络请求

00:13:59.426 --> 00:14:01.226 A:middle
去掉这些陈旧的网络请求

00:14:01.226 --> 00:14:02.146 A:middle
因为没有什么会比

00:14:02.146 --> 00:14:03.406 A:middle
获得数据后发现

00:14:03.406 --> 00:14:04.376 A:middle
“我用它什么也做不了”然后

00:14:04.376 --> 00:14:04.936 A:middle
把它丢掉更糟的了

00:14:05.626 --> 00:14:08.356 A:middle
最后一个我们认为

00:14:08.356 --> 00:14:10.886 A:middle
可以帮到你们的是

00:14:10.886 --> 00:14:13.556 A:middle
让我们知道如何更好的

00:14:13.836 --> 00:14:15.596 A:middle
安排你的 URLSession 任务

00:14:16.126 --> 00:14:17.906 A:middle
什么时候是

00:14:17.906 --> 00:14:19.236 A:middle
在系统中运行

00:14:19.236 --> 00:14:20.606 A:middle
你的任务的最优时间

00:14:20.606 --> 00:14:21.686 A:middle
这样我们就可以

00:14:21.686 --> 00:14:23.986 A:middle
用最有效的方式帮你获得需要展示的数据

00:14:23.986 --> 00:14:25.376 A:middle
让你的用户

00:14:25.376 --> 00:14:26.346 A:middle
对数据感到满意

00:14:26.346 --> 00:14:29.036 A:middle
让我们来看看我们做了什么

00:14:30.536 --> 00:14:32.206 A:middle
我们提出了

00:14:32.206 --> 00:14:34.336 A:middle
URLSessionTask 调度 API

00:14:35.406 --> 00:14:37.216 A:middle
它在我们所有的平台上

00:14:37.216 --> 00:14:38.156 A:middle
都可以使用

00:14:38.156 --> 00:14:39.956 A:middle
它在你们在 WWDC

00:14:39.956 --> 00:14:41.296 A:middle
收到的测试版上

00:14:41.296 --> 00:14:41.916 A:middle
也可以用

00:14:41.916 --> 00:14:44.566 A:middle
我们希望你们可以

00:14:44.566 --> 00:14:45.656 A:middle
深入了解一下

00:14:46.516 --> 00:14:49.716 A:middle
首先我们提供了

00:14:49.716 --> 00:14:51.346 A:middle
一个新的属性

00:14:51.556 --> 00:14:52.876 A:middle
它是

00:14:52.876 --> 00:14:54.506 A:middle
URLSessionTask 对象的属性

00:14:55.066 --> 00:14:57.456 A:middle
叫做 earliestBeginDate

00:14:58.366 --> 00:14:59.406 A:middle
你要做的是

00:14:59.406 --> 00:15:01.116 A:middle
为我们提供一个时间

00:14:59.406 --> 00:15:01.116 A:middle
为我们提供一个时间

00:15:01.116 --> 00:15:03.336 A:middle
你想什么时候

00:15:03.406 --> 00:15:05.586 A:middle
允许你的任务准备好开始运行

00:15:05.896 --> 00:15:08.266 A:middle
我用了“准备好”这个词

00:15:08.266 --> 00:15:09.016 A:middle
因为它很重要

00:15:09.016 --> 00:15:10.176 A:middle
这不是意味着

00:15:10.176 --> 00:15:11.576 A:middle
这是你的任务开始运行

00:15:11.686 --> 00:15:13.486 A:middle
开始联网的时间点

00:15:13.856 --> 00:15:15.586 A:middle
它只是告诉系统

00:15:15.586 --> 00:15:16.706 A:middle
“我希望我的任务

00:15:16.766 --> 00:15:18.486 A:middle
准备好了 以至于它能够运行了”

00:15:18.796 --> 00:15:20.646 A:middle
同时我们还是需要遵守

00:15:20.646 --> 00:15:23.046 A:middle
系统规定 何时

00:15:23.046 --> 00:15:25.256 A:middle
我们可以让这个任务

00:15:25.256 --> 00:15:25.816 A:middle
开始联网

00:15:26.896 --> 00:15:28.546 A:middle
它只可以用于

00:15:28.686 --> 00:15:31.326 A:middle
后台的 URLSession

00:15:31.326 --> 00:15:33.166 A:middle
和建立在后台

00:15:33.166 --> 00:15:33.876 A:middle
URLSession 上的任务

00:15:34.406 --> 00:15:37.896 A:middle
让我们来看看

00:15:37.946 --> 00:15:39.626 A:middle
这个属性和其他的

00:15:39.666 --> 00:15:41.586 A:middle
现有的属性一起是如何

00:15:41.586 --> 00:15:43.446 A:middle
允许你进行一些精细的安排的

00:15:44.606 --> 00:15:46.356 A:middle
你需要创建一个

00:15:46.356 --> 00:15:47.776 A:middle
URLSessionTask 当然

00:15:47.776 --> 00:15:49.336 A:middle
你需要启用重调

00:15:49.336 --> 00:15:50.796 A:middle
这样我们就知道

00:15:50.796 --> 00:15:53.456 A:middle
我们可以把这个任务放入队列

00:15:53.456 --> 00:15:54.566 A:middle
然后开始工作

00:15:55.206 --> 00:15:57.396 A:middle
在这个时候

00:15:57.806 --> 00:16:00.756 A:middle
这个任务应该处于等待状态

00:15:57.806 --> 00:16:00.756 A:middle
这个任务应该处于等待状态

00:16:00.756 --> 00:16:01.486 A:middle
我们在等着

00:16:01.566 --> 00:16:03.526 A:middle
earliestBeginDate 生效

00:16:04.136 --> 00:16:06.506 A:middle
当到了那个时间点后

00:16:06.506 --> 00:16:07.836 A:middle
这个任务就准备好运行了

00:16:09.156 --> 00:16:10.516 A:middle
你就可以使用现有的

00:16:10.706 --> 00:16:13.386 A:middle
timeoutIntervalForResource

00:16:13.386 --> 00:16:15.546 A:middle
来控制你的 app

00:16:15.546 --> 00:16:17.326 A:middle
要等多久来

00:16:17.326 --> 00:16:19.506 A:middle
加载那个资源 对不对

00:16:19.506 --> 00:16:21.596 A:middle
你可以设置一定的时间

00:16:21.596 --> 00:16:23.366 A:middle
告诉系统说“在这个时间点之后

00:16:23.526 --> 00:16:25.466 A:middle
这个资源对我而言

00:16:25.466 --> 00:16:26.706 A:middle
就没有用了”

00:16:27.136 --> 00:16:28.926 A:middle
这个时间间隔

00:16:29.156 --> 00:16:32.426 A:middle
涵盖了从重调度到

00:16:32.426 --> 00:16:34.246 A:middle
依据你在 timeoutIntervalForResource 中

00:16:34.246 --> 00:16:34.856 A:middle
输入的值而得到的超时时间

00:16:34.856 --> 00:16:36.396 A:middle
之间的间隔

00:16:36.716 --> 00:16:41.526 A:middle
现在 我想要回到

00:16:41.526 --> 00:16:43.736 A:middle
我们之前看到的

00:16:43.736 --> 00:16:45.276 A:middle
后台 app 刷新的

00:16:45.276 --> 00:16:45.746 A:middle
工作流

00:16:46.546 --> 00:16:47.316 A:middle
我们可以看到

00:16:47.316 --> 00:16:49.676 A:middle
其中有一些启动了

00:16:49.676 --> 00:16:50.366 A:middle
后台程序

00:16:50.736 --> 00:16:54.066 A:middle
不过使用这个新的 API

00:16:54.066 --> 00:16:55.426 A:middle
我们可以剔除掉它们其中的一个

00:16:55.426 --> 00:16:56.336 A:middle
你的 app 工作的方式就变成了

00:16:56.336 --> 00:16:58.396 A:middle
当你的 app 在运行时

00:16:58.466 --> 00:16:59.146 A:middle
你要创建一个

00:16:59.146 --> 00:17:01.616 A:middle
URLSessionTask 你需要

00:16:59.146 --> 00:17:01.616 A:middle
URLSessionTask 你需要

00:17:01.906 --> 00:17:03.606 A:middle
启用我们的新的调度 API

00:17:03.606 --> 00:17:05.376 A:middle
设置一个 earliestBeginDate

00:17:05.935 --> 00:17:07.016 A:middle
然后你的进程会

00:17:07.016 --> 00:17:07.415 A:middle
进入睡眠

00:17:07.715 --> 00:17:08.776 A:middle
我们会帮你完成

00:17:08.776 --> 00:17:09.366 A:middle
余下的工作

00:17:09.955 --> 00:17:11.406 A:middle
当我们完成这部分工作之后

00:17:11.406 --> 00:17:12.726 A:middle
我们将会在后台

00:17:12.726 --> 00:17:14.195 A:middle
启用你的 app 一次然后

00:17:14.195 --> 00:17:16.136 A:middle
允许你开始处理收到的数据

00:17:16.136 --> 00:17:18.486 A:middle
当你的用户把你的 app

00:17:18.486 --> 00:17:19.556 A:middle
带来前台后

00:17:19.556 --> 00:17:21.215 A:middle
他们会得到

00:17:21.415 --> 00:17:22.415 A:middle
最新的数据

00:17:23.096 --> 00:17:24.626 A:middle
这样我们就可以解决

00:17:24.626 --> 00:17:26.106 A:middle
这个多余的

00:17:26.106 --> 00:17:27.796 A:middle
后台 app 启动问题

00:17:28.256 --> 00:17:29.716 A:middle
让 app 在系统中运行更顺畅

00:17:29.716 --> 00:17:30.916 A:middle
我们认为这是

00:17:30.916 --> 00:17:31.346 A:middle
很好的改进

00:17:31.846 --> 00:17:35.016 A:middle
这就是我们解决的

00:17:35.306 --> 00:17:35.766 A:middle
第一个问题

00:17:35.766 --> 00:17:36.736 A:middle
我们来看一看第二个问题

00:17:36.736 --> 00:17:40.660 A:middle
过时的网络抓取

00:17:42.296 --> 00:17:43.296 A:middle
我们希望给你们

00:17:43.296 --> 00:17:45.316 A:middle
一个更改未来请求的机会

00:17:45.936 --> 00:17:47.046 A:middle
你可能给过我们一个请求了

00:17:47.046 --> 00:17:49.316 A:middle
但是情况可能

00:17:49.316 --> 00:17:49.916 A:middle
发生了变化

00:17:50.956 --> 00:17:53.856 A:middle
我们提出了一个新的

00:17:53.856 --> 00:17:55.326 A:middle
基于

00:17:55.326 --> 00:17:57.356 A:middle
URLSessionTaskDelegate 的委托回调功能叫做

00:17:57.796 --> 00:18:00.136 A:middle
willBeginDelayedRequest.

00:17:57.796 --> 00:18:00.136 A:middle
willBeginDelayedRequest.

00:18:01.406 --> 00:18:03.596 A:middle
使用它 你就可以

00:18:03.596 --> 00:18:05.506 A:middle
在你的任务

00:18:05.506 --> 00:18:07.136 A:middle
要开始联网时

00:18:07.136 --> 00:18:07.736 A:middle
被调用

00:18:08.226 --> 00:18:10.416 A:middle
如果你告诉系统

00:18:10.416 --> 00:18:12.346 A:middle
这个任务准备好了

00:18:12.346 --> 00:18:14.066 A:middle
那么系统就会认为

00:18:14.066 --> 00:18:15.026 A:middle
好的 这就是联网的

00:18:15.026 --> 00:18:15.686 A:middle
最好时机

00:18:16.116 --> 00:18:17.096 A:middle
我们就会启用

00:18:17.096 --> 00:18:18.216 A:middle
这个委托功能

00:18:18.216 --> 00:18:20.076 A:middle
如果你安装了的话

00:18:20.076 --> 00:18:22.436 A:middle
它会允许你对这个任务

00:18:22.436 --> 00:18:23.036 A:middle
作出决定

00:18:24.986 --> 00:18:26.256 A:middle
只有你安装了这个功能

00:18:26.256 --> 00:18:27.966 A:middle
并且

00:18:27.966 --> 00:18:29.546 A:middle
如果你

00:18:29.546 --> 00:18:30.736 A:middle
通过设置一个 earliestBeginDate 来

00:18:30.736 --> 00:18:32.046 A:middle
启用了调度 API 的话它才会启用

00:18:32.366 --> 00:18:33.706 A:middle
并且 这也只对

00:18:33.706 --> 00:18:35.116 A:middle
后台的 URLSessions 可用

00:18:36.566 --> 00:18:39.526 A:middle
并且正如我所提过的那样

00:18:39.526 --> 00:18:40.556 A:middle
它是可选的

00:18:40.996 --> 00:18:42.806 A:middle
我想在这里停一下

00:18:42.806 --> 00:18:44.016 A:middle
希望你们可以认真思考一下

00:18:44.046 --> 00:18:45.336 A:middle
因为这真的很重要

00:18:46.036 --> 00:18:47.136 A:middle
这个委托功能

00:18:47.136 --> 00:18:48.656 A:middle
和其他所有的委托功能

00:18:48.656 --> 00:18:49.786 A:middle
都是你可以选择采用的

00:18:50.246 --> 00:18:52.776 A:middle
但是这一个会导致一些

00:18:52.846 --> 00:18:53.926 A:middle
其他有趣的事情发生

00:18:53.926 --> 00:18:54.986 A:middle
我等一下会向你们展示

00:18:55.606 --> 00:18:56.586 A:middle
你真的需要想一想

00:18:56.676 --> 00:18:58.356 A:middle
“我的 app 能够确定

00:18:58.356 --> 00:19:00.456 A:middle
一个请求在未来的

00:18:58.356 --> 00:19:00.456 A:middle
一个请求在未来的

00:19:00.456 --> 00:19:02.396 A:middle
可行性吗”

00:19:02.906 --> 00:19:06.986 A:middle
现在 一个 Completion Handler

00:19:06.986 --> 00:19:08.726 A:middle
被加入到这个

00:19:08.726 --> 00:19:09.546 A:middle
委托功能

00:19:10.256 --> 00:19:10.986 A:middle
而你则需要

00:19:10.986 --> 00:19:12.516 A:middle
给 URLSession 一个信号

00:19:12.516 --> 00:19:14.456 A:middle
你需要告诉我们

00:19:14.456 --> 00:19:16.276 A:middle
原始的请求是否

00:19:16.276 --> 00:19:17.566 A:middle
还有继续处理

00:19:17.826 --> 00:19:18.756 A:middle
的意义

00:19:19.226 --> 00:19:21.336 A:middle
或者也许情况已经发生改变

00:19:21.336 --> 00:19:22.826 A:middle
你需要做一些调整

00:19:22.826 --> 00:19:24.396 A:middle
也许是一个

00:19:24.396 --> 00:19:26.596 A:middle
不同的 URL 也许一个标题值

00:19:26.596 --> 00:19:27.906 A:middle
不同了 而你想要

00:19:27.906 --> 00:19:29.326 A:middle
在这个时候 在联入网络之前

00:19:29.326 --> 00:19:30.736 A:middle
及时更改

00:19:30.736 --> 00:19:31.796 A:middle
这个请求

00:19:32.226 --> 00:19:33.566 A:middle
或者你会决定

00:19:34.086 --> 00:19:35.756 A:middle
这个请求在此时已经没有用了

00:19:35.786 --> 00:19:37.076 A:middle
取消它

00:19:37.396 --> 00:19:42.596 A:middle
我们不想处理

00:19:42.596 --> 00:19:42.836 A:middle
过时的请求

00:19:42.956 --> 00:19:44.736 A:middle
现在 如果我们回到这个

00:19:44.736 --> 00:19:46.926 A:middle
工作流 回到我之前

00:19:46.926 --> 00:19:48.266 A:middle
所说的认真思考

00:19:48.266 --> 00:19:50.026 A:middle
这个功能

00:19:50.026 --> 00:19:51.926 A:middle
你就会发现我们似乎

00:19:51.926 --> 00:19:53.596 A:middle
回到了那个有

00:19:54.046 --> 00:19:55.776 A:middle
两次后台启动

00:19:55.776 --> 00:19:59.396 A:middle
来满足这个 URL 任务的工作流了

00:20:00.856 --> 00:20:02.356 A:middle
对不对 但是我们需要

00:20:02.356 --> 00:20:03.196 A:middle
停下来思考

00:20:03.476 --> 00:20:04.696 A:middle
哪一种的代价更高

00:20:05.056 --> 00:20:07.046 A:middle
是执行一次过时的网络加载

00:20:07.046 --> 00:20:09.756 A:middle
还是一个 app 的

00:20:09.756 --> 00:20:10.186 A:middle
后台启动

00:20:10.606 --> 00:20:12.896 A:middle
对于系统来说

00:20:12.896 --> 00:20:14.516 A:middle
完成过时加载

00:20:14.516 --> 00:20:16.016 A:middle
获取全部的数据 然后决定

00:20:16.016 --> 00:20:17.526 A:middle
我不需要它然后扔掉它 代价要高多了

00:20:18.286 --> 00:20:19.966 A:middle
OK  所以我们希望你们

00:20:20.016 --> 00:20:21.536 A:middle
能够认真思考这个

00:20:21.536 --> 00:20:22.626 A:middle
委托功能 以及

00:20:22.626 --> 00:20:24.996 A:middle
你们的 app 是不是有这个能力

00:20:24.996 --> 00:20:27.066 A:middle
真正了解你的请求

00:20:27.066 --> 00:20:28.836 A:middle
在未来的可行性

00:20:29.316 --> 00:20:30.436 A:middle
希望你们明白

00:20:31.146 --> 00:20:35.986 A:middle
现在 我们要解决的

00:20:35.986 --> 00:20:38.696 A:middle
第三个问题是我们如何

00:20:39.146 --> 00:20:41.806 A:middle
在系统中以

00:20:41.806 --> 00:20:43.116 A:middle
最优化 最智能的方式

00:20:43.116 --> 00:20:43.616 A:middle
调度你的请求

00:20:43.956 --> 00:20:45.226 A:middle
在 URLSession 中有一些信息

00:20:45.226 --> 00:20:46.426 A:middle
是我们所不知道的

00:20:47.256 --> 00:20:48.496 A:middle
那么我们对我们的 API

00:20:48.496 --> 00:20:50.266 A:middle
稍稍做了一些改变

00:20:50.266 --> 00:20:51.666 A:middle
可以让你向我们

00:20:51.666 --> 00:20:53.676 A:middle
解释你的请求

00:20:54.056 --> 00:20:56.076 A:middle
和你的回应的信息

00:20:56.596 --> 00:20:58.016 A:middle
我们给出两种属性

00:20:58.116 --> 00:20:59.946 A:middle
第一个是 countOfBytes

00:21:00.016 --> 00:21:02.606 A:middle
ClientExpectsToSend

00:21:02.606 --> 00:21:03.846 A:middle
第二个是 countOfBytes

00:21:03.846 --> 00:21:05.496 A:middle
ClientExpectsToReceive.

00:21:06.176 --> 00:21:07.686 A:middle
我们相信你对你的请求

00:21:07.686 --> 00:21:08.556 A:middle
更了解

00:21:08.556 --> 00:21:10.696 A:middle
也许你想在一个请求上

00:21:10.696 --> 00:21:11.696 A:middle
附加一个主体流

00:21:11.696 --> 00:21:12.946 A:middle
而我们并不知道

00:21:13.206 --> 00:21:14.456 A:middle
而你可能知道

00:21:14.456 --> 00:21:14.746 A:middle
它的大小

00:21:15.386 --> 00:21:16.926 A:middle
我们不了解你的服务器

00:21:17.176 --> 00:21:18.456 A:middle
也不知道你的服务器传送回的

00:21:18.456 --> 00:21:19.546 A:middle
数据的大小

00:21:19.926 --> 00:21:21.486 A:middle
我们相信你对此更了解

00:21:21.876 --> 00:21:23.756 A:middle
而这些会给我们一些提示

00:21:23.756 --> 00:21:25.876 A:middle
告诉我们如何以

00:21:25.876 --> 00:21:27.626 A:middle
最优化和最智能的方式

00:21:27.656 --> 00:21:28.346 A:middle
来调度你的任务

00:21:28.826 --> 00:21:30.626 A:middle
如果你不知道 那么

00:21:30.626 --> 00:21:31.746 A:middle
你可以写

00:21:31.746 --> 00:21:34.066 A:middle
NSURLSessionTransferSizeUnknown

00:21:36.286 --> 00:21:37.396 A:middle
这就解决了第三个问题

00:21:37.696 --> 00:21:38.836 A:middle
我们来看一看

00:21:38.836 --> 00:21:40.006 A:middle
这个新的 API 用代码怎么写

00:21:40.006 --> 00:21:41.506 A:middle
它用起来很简单

00:21:42.216 --> 00:21:43.446 A:middle
我们要做的第一件事情就是

00:21:43.446 --> 00:21:46.086 A:middle
创建一个 URLSession

00:21:46.086 --> 00:21:46.936 A:middle
后台配置

00:21:46.936 --> 00:21:48.626 A:middle
然后我们要创建一个

00:21:48.626 --> 00:21:50.366 A:middle
基于这个配置的会话

00:21:52.226 --> 00:21:54.926 A:middle
一旦我们有了它

00:21:54.926 --> 00:21:57.256 A:middle
我们就可以生成一个 URLRequest,

00:21:57.636 --> 00:21:59.496 A:middle
指定我们想去的 URL

00:21:59.496 --> 00:22:02.296 A:middle
也可以设置一个标题值

00:21:59.496 --> 00:22:02.296 A:middle
也可以设置一个标题值

00:22:02.606 --> 00:22:03.746 A:middle
设一个对你的任务

00:22:03.746 --> 00:22:04.346 A:middle
有意义的标题

00:22:04.346 --> 00:22:05.996 A:middle
再说一遍 这只是一个例子

00:22:07.586 --> 00:22:08.476 A:middle
现在我们要创建一个

00:22:08.476 --> 00:22:09.866 A:middle
任务 在该会话中

00:22:09.866 --> 00:22:11.916 A:middle
封装那个请求

00:22:12.566 --> 00:22:13.986 A:middle
然后我们要选择采用

00:22:13.986 --> 00:22:16.316 A:middle
这个新的调度 API

00:22:16.316 --> 00:22:17.986 A:middle
通过设置 earliestBeginDate 属性

00:22:18.266 --> 00:22:19.116 A:middle
并给我们一个时间

00:22:19.116 --> 00:22:20.976 A:middle
在这个例子中 我们举个例子

00:22:20.976 --> 00:22:22.886 A:middle
从现在开始两小时后我希望这个任务

00:22:22.936 --> 00:22:24.336 A:middle
已经准备好运行了

00:22:25.936 --> 00:22:26.916 A:middle
我也会给

00:22:26.916 --> 00:22:28.286 A:middle
URLSession 一些暗示 告诉它

00:22:28.586 --> 00:22:30.126 A:middle
“这是一个小请求

00:22:30.126 --> 00:22:31.646 A:middle
没有主体 我只设置了

00:22:31.646 --> 00:22:33.896 A:middle
一个标题 大概 80 个字节

00:22:34.216 --> 00:22:36.216 A:middle
我的服务器大概会

00:22:36.216 --> 00:22:38.016 A:middle
传送 2KB 的数据

00:22:38.016 --> 00:22:39.206 A:middle
作为响应”

00:22:40.406 --> 00:22:42.026 A:middle
对于所有的 URLSession  任务

00:22:42.216 --> 00:22:43.376 A:middle
请确保你可以重调度

00:22:43.996 --> 00:22:46.406 A:middle
那么 新的委托功能

00:22:46.406 --> 00:22:46.836 A:middle
怎么工作的呢

00:22:47.146 --> 00:22:50.096 A:middle
我决定我了解情况

00:22:50.186 --> 00:22:51.636 A:middle
我在未来可以为

00:22:51.636 --> 00:22:53.846 A:middle
我的联网任务作出

00:22:53.846 --> 00:22:56.006 A:middle
充满智慧的决定

00:22:56.546 --> 00:22:57.456 A:middle
所以我使用了

00:22:57.456 --> 00:22:58.896 A:middle
willBeginDelayedRequest

00:22:59.046 --> 00:23:01.946 A:middle
在我们的案例中

00:22:59.046 --> 00:23:01.946 A:middle
在我们的案例中

00:23:01.946 --> 00:23:03.916 A:middle
我决定修改请求

00:23:04.506 --> 00:23:05.676 A:middle
我要删除原始请求

00:23:05.676 --> 00:23:06.926 A:middle
然后创建一个新的

00:23:06.926 --> 00:23:08.026 A:middle
updatedRequest

00:23:08.026 --> 00:23:09.526 A:middle
我将修改标题

00:23:09.526 --> 00:23:10.896 A:middle
中的一个值

00:23:10.896 --> 00:23:13.436 A:middle
让它对任务更有意义

00:23:13.436 --> 00:23:14.566 A:middle
现在这个任务事实上

00:23:14.566 --> 00:23:15.266 A:middle
要开始联入网络了

00:23:15.556 --> 00:23:17.506 A:middle
时间过去了 我有了一些

00:23:17.506 --> 00:23:18.206 A:middle
新的信息

00:23:18.526 --> 00:23:20.036 A:middle
我把这些信息加入到

00:23:20.036 --> 00:23:20.426 A:middle
这个任务里

00:23:20.826 --> 00:23:21.956 A:middle
然后我要启用

00:23:21.956 --> 00:23:24.626 A:middle
completionHandler 并且使用一个

00:23:24.626 --> 00:23:26.896 A:middle
useNewRequest 的配置

00:23:26.896 --> 00:23:28.246 A:middle
把它作为一个新的请求

00:23:28.246 --> 00:23:29.076 A:middle
如果你看一看我们的

00:23:29.076 --> 00:23:30.266 A:middle
标题文件 你会看到

00:23:30.266 --> 00:23:33.166 A:middle
这个 completionHandler 功能中的

00:23:33.166 --> 00:23:36.666 A:middle
其他可用的配置

00:23:36.816 --> 00:23:39.136 A:middle
那么让我来总结一下我们

00:23:39.256 --> 00:23:40.756 A:middle
介绍的这个调度 API

00:23:41.206 --> 00:23:42.696 A:middle
后台 URLSession 是一个

00:23:42.816 --> 00:23:45.146 A:middle
在网络连接方面的很好用的 API

00:23:45.146 --> 00:23:46.276 A:middle
它允许你的 app

00:23:46.276 --> 00:23:47.496 A:middle
甚至不用运行就可以

00:23:47.496 --> 00:23:49.026 A:middle
获得这个网络连接

00:23:50.086 --> 00:23:51.666 A:middle
我们的新的调度 API

00:23:51.716 --> 00:23:54.156 A:middle
允许你延迟请求

00:23:54.406 --> 00:23:57.226 A:middle
这样它们就可以

00:23:57.226 --> 00:23:59.356 A:middle
为你的 app

00:23:59.356 --> 00:24:00.786 A:middle
获取最新的信息

00:23:59.356 --> 00:24:00.786 A:middle
获取最新的信息

00:24:02.186 --> 00:24:03.426 A:middle
我们给你们机会

00:24:03.426 --> 00:24:04.766 A:middle
来依据

00:24:04.766 --> 00:24:06.456 A:middle
实际情况和

00:24:06.456 --> 00:24:07.996 A:middle
网络连接实际发生的时间

00:24:07.996 --> 00:24:10.376 A:middle
进行一些调整

00:24:10.376 --> 00:24:11.856 A:middle
这个 API 的另一部分改进

00:24:12.036 --> 00:24:13.616 A:middle
是允许你来给我们

00:24:13.616 --> 00:24:14.916 A:middle
一些提示 让我们可以

00:24:14.916 --> 00:24:16.836 A:middle
变的更加智能

00:24:16.836 --> 00:24:18.446 A:middle
让这些任务在设备上

00:24:18.446 --> 00:24:20.706 A:middle
在最佳时机运行

00:24:21.286 --> 00:24:24.936 A:middle
现在 我要将时间让给

00:24:24.936 --> 00:24:26.556 A:middle
Stuart Cheshire

00:24:26.556 --> 00:24:28.086 A:middle
一个苹果的杰出的工程师

00:24:28.086 --> 00:24:29.466 A:middle
谢谢你们的聆听

00:24:30.516 --> 00:24:33.826 A:middle
[ 掌声 ]

00:24:34.326 --> 00:24:36.716 A:middle
&gt;&gt; Stuart Cheshire: 谢谢 Jeff

00:24:38.896 --> 00:24:40.636 A:middle
现在我们要谈一谈

00:24:41.066 --> 00:24:43.006 A:middle
URLSession 中的改进

00:24:43.456 --> 00:24:45.156 A:middle
我们一共要涵盖四件事情

00:24:45.466 --> 00:24:46.276 A:middle
让我们一一来讨论

00:24:48.866 --> 00:24:49.876 A:middle
你们往往想要展示一个

00:24:49.876 --> 00:24:51.756 A:middle
进度条来告诉

00:24:51.756 --> 00:24:53.766 A:middle
你的用户现在的

00:24:53.766 --> 00:24:54.026 A:middle
进度如何

00:24:54.676 --> 00:24:56.676 A:middle
现在这个工作有一点

00:24:56.676 --> 00:24:57.456 A:middle
繁琐

00:24:57.936 --> 00:24:59.746 A:middle
你需要

00:24:59.746 --> 00:25:00.996 A:middle
用 Key-value Observing 检测

00:24:59.746 --> 00:25:00.996 A:middle
用 Key-value Observing 检测

00:25:00.996 --> 00:25:02.236 A:middle
四个变量

00:25:02.776 --> 00:25:04.576 A:middle
并且有时候

00:25:04.576 --> 00:25:07.426 A:middle
countOfBytesExpectedToReceive 或者

00:25:07.426 --> 00:25:09.000 A:middle
Send 不总是可用的

00:25:12.266 --> 00:25:15.936 A:middle
现在一个好消息是在 iOS 11 中

00:25:16.196 --> 00:25:18.386 A:middle
URLSessionTask 已经采用了

00:25:18.456 --> 00:25:20.116 A:middle
ProgressReporting 协议

00:25:21.226 --> 00:25:23.466 A:middle
你可以从

00:25:23.896 --> 00:25:28.066 A:middle
URLSessionTask 获得一个进度对象

00:25:28.606 --> 00:25:30.876 A:middle
它会给你一个变量

00:25:30.876 --> 00:25:32.966 A:middle
叫做 fractionCompleted

00:25:32.966 --> 00:25:35.206 A:middle
其实是一个从零到一之间的数字

00:25:35.656 --> 00:25:37.676 A:middle
你还可以加字符串

00:25:37.676 --> 00:25:40.056 A:middle
以提供关于操作的更多信息

00:25:41.396 --> 00:25:42.816 A:middle
你可以把那个进度对象

00:25:42.816 --> 00:25:46.186 A:middle
添加到 UIProgressView 或者

00:25:46.216 --> 00:25:48.536 A:middle
NSProgressIndicator 以获得

00:25:48.536 --> 00:25:49.996 A:middle
一个自动进度条

00:25:50.416 --> 00:25:52.886 A:middle
你也可以把多个

00:25:52.886 --> 00:25:55.016 A:middle
进度对象结合成一个

00:25:55.016 --> 00:25:56.826 A:middle
母进度对象

00:25:56.826 --> 00:25:58.726 A:middle
当你在进行多任务操作时

00:25:58.726 --> 00:26:00.306 A:middle
比如下载文件

00:25:58.726 --> 00:26:00.306 A:middle
比如下载文件

00:26:00.596 --> 00:26:02.536 A:middle
解压缩文件

00:26:02.536 --> 00:26:03.486 A:middle
然后处理数据

00:26:04.556 --> 00:26:07.246 A:middle
这会让你报告进度

00:26:07.246 --> 00:26:09.126 A:middle
这一过程更简单一些

00:26:10.676 --> 00:26:13.166 A:middle
URLSessionTask 和

00:26:13.166 --> 00:26:15.616 A:middle
进度对象之间的绑定

00:26:15.616 --> 00:26:17.036 A:middle
是双向的

00:26:17.656 --> 00:26:19.866 A:middle
所以如果你暂停了一个

00:26:19.866 --> 00:26:21.666 A:middle
URLSessionTask 就等于

00:26:21.666 --> 00:26:23.936 A:middle
暂停了进度对象

00:26:23.936 --> 00:26:25.096 A:middle
如果你暂停了进度对象

00:26:25.096 --> 00:26:26.616 A:middle
那也就等于

00:26:26.616 --> 00:26:28.726 A:middle
暂停了 URLSessionTask.

00:26:29.336 --> 00:26:34.656 A:middle
我们现在有针对

00:26:34.656 --> 00:26:36.756 A:middle
Brotli 压缩算法的支持

00:26:37.696 --> 00:26:40.576 A:middle
在测试中 它比 gzip 的压缩速度

00:26:40.576 --> 00:26:42.996 A:middle
快大约 15% 左右

00:26:42.996 --> 00:26:45.696 A:middle
这带来了更快的网络访问

00:26:48.006 --> 00:26:49.376 A:middle
和其他新的压缩方案一样

00:26:49.376 --> 00:26:51.706 A:middle
它只在

00:26:51.706 --> 00:26:53.616 A:middle
加密连接中使用

00:26:53.616 --> 00:26:55.496 A:middle
以避免使

00:26:55.496 --> 00:26:56.616 A:middle
可能无法辨别此压缩的

00:26:56.616 --> 00:26:57.166 A:middle
中间框产生混淆

00:26:59.896 --> 00:27:03.466 A:middle
由于 Safari 使用 URLSession

00:26:59.896 --> 00:27:03.466 A:middle
由于 Safari 使用 URLSession

00:27:03.466 --> 00:27:05.096 A:middle
这也意味着 Safari

00:27:05.096 --> 00:27:07.026 A:middle
也可以享受这个新的 Brotli

00:27:07.026 --> 00:27:08.106 A:middle
压缩算法带来的好处

00:27:08.526 --> 00:27:10.896 A:middle
很多主要网站也

00:27:10.896 --> 00:27:12.566 A:middle
已经宣布了在他们的网页服务中

00:27:12.566 --> 00:27:14.006 A:middle
支持 Brotli 算法

00:27:14.006 --> 00:27:17.776 A:middle
我们的下一个话题是 Public

00:27:17.776 --> 00:27:18.586 A:middle
Suffix List

00:27:19.216 --> 00:27:20.616 A:middle
Public Suffix List 有时候

00:27:20.616 --> 00:27:22.846 A:middle
也被称为有效

00:27:22.846 --> 00:27:24.076 A:middle
一级域名列表

00:27:24.836 --> 00:27:27.946 A:middle
这对于确定

00:27:27.946 --> 00:27:29.776 A:middle
互联网命名空间中

00:27:29.776 --> 00:27:31.566 A:middle
管理边界的位置

00:27:31.566 --> 00:27:32.756 A:middle
很重要

00:27:34.036 --> 00:27:35.566 A:middle
我们不允许

00:27:36.026 --> 00:27:40.126 A:middle
一个网站在 .com 域上

00:27:40.126 --> 00:27:42.096 A:middle
设置一个 cookie 然后

00:27:42.096 --> 00:27:44.006 A:middle
任何以 .com 结尾的公司都可以访问它

00:27:45.066 --> 00:27:47.916 A:middle
所以你可能会试图

00:27:47.916 --> 00:27:50.486 A:middle
建立一个规则 要求不能

00:27:50.656 --> 00:27:52.576 A:middle
在一级域名上设置 cookie

00:27:52.636 --> 00:27:54.546 A:middle
只能在第二级或更低级上设置

00:27:55.146 --> 00:27:56.926 A:middle
但是在世界上的不同地方

00:27:56.926 --> 00:27:58.416 A:middle
域名的名字也是不一样的

00:28:00.086 --> 00:28:03.276 A:middle
在美国 Apple.com 和

00:28:03.276 --> 00:28:04.886 A:middle
FileMaker.com 是不同的两个公司

00:28:06.136 --> 00:28:08.236 A:middle
但是在澳大利亚

00:28:08.236 --> 00:28:10.526 A:middle
很多很多公司都用 com.au

00:28:10.746 --> 00:28:11.806 A:middle
但那并不意味着它们是

00:28:11.806 --> 00:28:12.486 A:middle
同一个公司

00:28:12.786 --> 00:28:15.196 A:middle
所以 Public Suffix List 是一堆

00:28:15.196 --> 00:28:17.706 A:middle
规则和模式

00:28:17.706 --> 00:28:20.726 A:middle
它告知软件如何判断

00:28:20.816 --> 00:28:22.396 A:middle
管理边界的位置

00:28:24.076 --> 00:28:28.396 A:middle
它用于

00:28:28.396 --> 00:28:32.876 A:middle
划分 cookies

00:28:32.876 --> 00:28:34.296 A:middle
URLSession API 也使用它

00:28:34.376 --> 00:28:36.046 A:middle
如果你直接使用

00:28:36.046 --> 00:28:37.876 A:middle
HTTPCookieStorage API

00:28:38.036 --> 00:28:39.206 A:middle
它也同样支持

00:28:40.346 --> 00:28:41.506 A:middle
我们曾经在

00:28:41.506 --> 00:28:43.576 A:middle
软件升级中更新了它

00:28:43.616 --> 00:28:46.106 A:middle
但是现在随着创建

00:28:46.106 --> 00:28:47.626 A:middle
一级域名的进展越来越快

00:28:48.066 --> 00:28:49.796 A:middle
我们已经改为空中更新

00:28:50.606 --> 00:28:52.046 A:middle
如果我们愿意

00:28:52.046 --> 00:28:56.476 A:middle
我们可以每两周推出一个新的列表

00:28:57.416 --> 00:29:01.636 A:middle
如果你只是想要一个字节流

00:28:57.416 --> 00:29:01.636 A:middle
如果你只是想要一个字节流

00:29:01.726 --> 00:29:03.506 A:middle
你可以使用

00:29:03.506 --> 00:29:04.146 A:middle
URLSessionStreamTask API

00:29:04.436 --> 00:29:06.896 A:middle
如果你不想做 HTTP Style

00:29:06.896 --> 00:29:08.536 A:middle
Gets 但是比如说你想写一个

00:29:08.536 --> 00:29:09.196 A:middle
邮件客户端

00:29:09.596 --> 00:29:12.676 A:middle
URLSessionStreamTask 会给你一个

00:29:12.676 --> 00:29:13.626 A:middle
简单的字节流

00:29:14.766 --> 00:29:16.646 A:middle
它支持使用 STARTTLS 选项

00:29:16.646 --> 00:29:18.026 A:middle
升级到 TLS

00:29:18.276 --> 00:29:21.286 A:middle
如果你现在的代码

00:29:21.416 --> 00:29:22.866 A:middle
是使用之前的

00:29:22.866 --> 00:29:25.526 A:middle
NSInputStream 和 NSOutputStream API 写的

00:29:25.526 --> 00:29:27.796 A:middle
你可以从一个

00:29:27.796 --> 00:29:29.156 A:middle
URLSessionStreamTask 中提取那些对象

00:29:29.236 --> 00:29:32.016 A:middle
以使用你之前的代码

00:29:32.886 --> 00:29:34.016 A:middle
但是对于你所写的

00:29:34.016 --> 00:29:36.006 A:middle
任何新代码 我们都强烈推荐

00:29:36.066 --> 00:29:38.246 A:middle
你使用新的本地

00:29:38.526 --> 00:29:40.676 A:middle
URLSessionStreamTask API

00:29:41.486 --> 00:29:42.836 A:middle
我们在 2015 年的 WWDC

00:29:42.836 --> 00:29:46.116 A:middle
宣布了这件事

00:29:46.596 --> 00:29:49.336 A:middle
现在我们为你们提供的新进展是

00:29:49.396 --> 00:29:50.836 A:middle
身份验证代理的

00:29:50.836 --> 00:29:52.446 A:middle
自动导航

00:29:52.666 --> 00:29:53.776 A:middle
如果这个代理要求

00:29:53.776 --> 00:29:56.336 A:middle
取得帐密 那么我们就会

00:29:56.336 --> 00:29:57.886 A:middle
自动从钥匙串中提取

00:29:57.886 --> 00:29:59.106 A:middle
或者立刻代表你

00:29:59.106 --> 00:30:01.326 A:middle
从用户处获取

00:29:59.106 --> 00:30:01.326 A:middle
从用户处获取

00:30:03.136 --> 00:30:05.276 A:middle
那么我们现在已经

00:30:05.276 --> 00:30:07.346 A:middle
讲完了 URLSession 的一些改进

00:30:07.816 --> 00:30:08.496 A:middle
我们下面继续

00:30:09.516 --> 00:30:15.636 A:middle
[ 掌声 ]

00:30:16.136 --> 00:30:16.476 A:middle
谢谢

00:30:18.346 --> 00:30:21.076 A:middle
下面是我们从数年来

00:30:21.076 --> 00:30:23.846 A:middle
帮助开发者的经验中得到的一些

00:30:23.846 --> 00:30:24.476 A:middle
建议

00:30:26.816 --> 00:30:29.116 A:middle
头号规则：

00:30:29.116 --> 00:30:29.726 A:middle
别用 BSD Sockets

00:30:33.246 --> 00:30:34.536 A:middle
同样的道理

00:30:34.536 --> 00:30:36.436 A:middle
我们建议你不要嵌入

00:30:36.746 --> 00:30:39.156 A:middle
基于 BSD Sockets 的库

00:30:41.356 --> 00:30:44.386 A:middle
因为正如今天你所听到的这样

00:30:44.386 --> 00:30:46.116 A:middle
我们做了很多工作

00:30:46.116 --> 00:30:48.286 A:middle
来为你开发 app

00:30:48.286 --> 00:30:49.146 A:middle
提供方便

00:30:49.556 --> 00:30:51.676 A:middle
我们推出了 Wi-Fi Assist

00:30:51.676 --> 00:30:53.246 A:middle
使你的 app 在 Wi-Fi 网络不好时

00:30:53.356 --> 00:30:54.856 A:middle
仍然可以运行

00:30:54.856 --> 00:30:55.596 A:middle
而不失败

00:30:56.146 --> 00:30:58.386 A:middle
我们提供了可以

00:30:58.796 --> 00:31:01.156 A:middle
最小化 CPU 和电池使用量的

00:30:58.796 --> 00:31:01.156 A:middle
最小化 CPU 和电池使用量的

00:31:01.196 --> 00:31:02.946 A:middle
技术 给用户更长的

00:31:02.946 --> 00:31:03.676 A:middle
电池寿命

00:31:04.376 --> 00:31:06.456 A:middle
我们能在你的 app

00:31:06.456 --> 00:31:08.116 A:middle
不运行的时候

00:31:08.116 --> 00:31:09.536 A:middle
在后台处理任务

00:31:09.796 --> 00:31:11.096 A:middle
而第三方库不在

00:31:11.096 --> 00:31:12.196 A:middle
内存中运行时

00:31:12.196 --> 00:31:13.206 A:middle
它们本质上是什么也做不了的

00:31:14.556 --> 00:31:18.116 A:middle
最后一点建议

00:31:18.116 --> 00:31:20.396 A:middle
始终使用通过名称连接的 API

00:31:20.736 --> 00:31:22.746 A:middle
而不要使用需要

00:31:22.746 --> 00:31:24.916 A:middle
你把名称解析成一个 IP 地址

00:31:24.976 --> 00:31:26.256 A:middle
然后连接到地址的 API

00:31:27.036 --> 00:31:28.546 A:middle
我们之前讨论了

00:31:28.546 --> 00:31:30.466 A:middle
IPv6 支持的要求

00:31:30.996 --> 00:31:33.016 A:middle
并且你们几乎所有的 app 都可以

00:31:33.276 --> 00:31:36.366 A:middle
完美运行的一个原因就是

00:31:36.416 --> 00:31:37.826 A:middle
当你使用

00:31:37.826 --> 00:31:40.366 A:middle
通过名称连接的 API 时

00:31:40.366 --> 00:31:41.506 A:middle
你不需要接触 IP 地址

00:31:42.046 --> 00:31:43.136 A:middle
如果你不需要接触

00:31:43.136 --> 00:31:45.496 A:middle
IP 地址 你就不用去

00:31:45.496 --> 00:31:47.726 A:middle
关心它是 v4 还是 v6

00:31:48.196 --> 00:31:50.846 A:middle
它会自动工作

00:31:50.886 --> 00:31:53.366 A:middle
我们经常收到的一个问题是

00:31:53.366 --> 00:31:54.706 A:middle
关于超时值

00:31:55.096 --> 00:31:56.316 A:middle
所以我要再说一下

00:31:57.466 --> 00:31:59.476 A:middle
timeoutIntervalForResource

00:32:00.456 --> 00:32:02.496 A:middle
表示抓取整个资源的

00:32:02.496 --> 00:32:03.566 A:middle
时间限制

00:32:03.646 --> 00:32:06.436 A:middle
默认的情况下 应该是 7 天

00:32:07.346 --> 00:32:08.996 A:middle
如果在那之前

00:32:08.996 --> 00:32:10.206 A:middle
没有抓取到整个资源的话

00:32:10.206 --> 00:32:10.666 A:middle
任务就会失败

00:32:11.716 --> 00:32:14.726 A:middle
timeoutIntervalForRequest 是一个

00:32:14.726 --> 00:32:17.036 A:middle
计时器 只有在传输开始后

00:32:17.036 --> 00:32:18.166 A:middle
才会开始计时

00:32:18.646 --> 00:32:21.386 A:middle
一旦它开始计时

00:32:21.386 --> 00:32:23.796 A:middle
如果你的传输卡顿或者

00:32:23.796 --> 00:32:24.986 A:middle
在那个超时值时没什么进展

00:32:24.986 --> 00:32:26.806 A:middle
计时器将被触发

00:32:29.876 --> 00:32:33.356 A:middle
我们见过一些开发人员

00:32:33.356 --> 00:32:35.766 A:middle
使用他们旧的

00:32:35.766 --> 00:32:38.716 A:middle
代码 然后通过

00:32:38.716 --> 00:32:41.066 A:middle
机械地为他们的旧的

00:32:41.256 --> 00:32:43.946 A:middle
NSURLConnection 代码

00:32:43.946 --> 00:32:46.186 A:middle
加一个 URLSession 来把它们

00:32:46.186 --> 00:32:46.406 A:middle
转化成 URLSession 代码

00:32:47.076 --> 00:32:48.566 A:middle
这是一种非常没效率和

00:32:48.566 --> 00:32:49.006 A:middle
浪费的做法

00:32:49.186 --> 00:32:51.486 A:middle
对于大部分 app 来说

00:32:51.486 --> 00:32:53.436 A:middle
你们所需要的只是

00:32:53.436 --> 00:32:55.446 A:middle
一个 URLSession 它可以让你

00:32:55.446 --> 00:32:56.786 A:middle
完成你想要的任务

00:32:57.696 --> 00:32:59.236 A:middle
你可能需要多于一个

00:32:59.236 --> 00:33:01.446 A:middle
URLSession 的唯一情况就是

00:32:59.236 --> 00:33:01.446 A:middle
URLSession 的唯一情况就是

00:33:01.446 --> 00:33:02.946 A:middle
你有不同的操作组

00:33:02.946 --> 00:33:04.936 A:middle
而且它们的要求都

00:33:04.936 --> 00:33:05.926 A:middle
截然不同

00:33:06.086 --> 00:33:07.786 A:middle
这种情况下

00:33:07.816 --> 00:33:08.836 A:middle
你可能需要创建两个不同的

00:33:08.836 --> 00:33:11.066 A:middle
配置对象 并且

00:33:11.066 --> 00:33:13.436 A:middle
用这两个配置对象创建

00:33:13.436 --> 00:33:15.096 A:middle
两个不同的 URLSession

00:33:15.546 --> 00:33:17.666 A:middle
一个例子是 Safari 中的私密浏览模式

00:33:17.666 --> 00:33:19.686 A:middle
其中每个私密浏览

00:33:19.686 --> 00:33:21.116 A:middle
窗口都是

00:33:21.116 --> 00:33:23.316 A:middle
分别的 URLSession

00:33:23.316 --> 00:33:24.636 A:middle
所以它们不会与其它会话分享

00:33:24.636 --> 00:33:25.936 A:middle
Cookie 或者其它状态

00:33:27.896 --> 00:33:30.496 A:middle
大多数的 app 都只能有一个

00:33:30.496 --> 00:33:32.326 A:middle
静态分配的 URLSession

00:33:32.326 --> 00:33:33.016 A:middle
没关系

00:33:33.376 --> 00:33:34.776 A:middle
但是 如果你动态的

00:33:34.776 --> 00:33:36.266 A:middle
分配 URLSession

00:33:36.606 --> 00:33:38.266 A:middle
就要记得事后清理

00:33:38.696 --> 00:33:40.096 A:middle
要么完成任务然后

00:33:40.096 --> 00:33:42.526 A:middle
使它失效 要么就废止

00:33:42.526 --> 00:33:42.936 A:middle
然后取消它

00:33:43.346 --> 00:33:44.286 A:middle
但是如果你没有清理

00:33:44.496 --> 00:33:45.296 A:middle
就会造成内存泄漏

00:33:45.856 --> 00:33:50.956 A:middle
有些开发者问我们

00:33:51.016 --> 00:33:52.776 A:middle
关于便捷方法和

00:33:52.776 --> 00:33:53.836 A:middle
委托回调的问题

00:33:55.336 --> 00:33:57.426 A:middle
委托回调会给予你

00:33:57.426 --> 00:33:59.376 A:middle
详细的关于你的任务状态的

00:33:59.376 --> 00:34:01.546 A:middle
逐步进展信息

00:33:59.376 --> 00:34:01.546 A:middle
逐步进展信息

00:34:02.506 --> 00:34:04.236 A:middle
便捷方法 正如

00:34:04.236 --> 00:34:06.516 A:middle
它的名字那样 是一种

00:34:06.516 --> 00:34:09.246 A:middle
快速简便的使用 API 的方法

00:34:10.795 --> 00:34:13.106 A:middle
使用便捷方法的话

00:34:13.106 --> 00:34:14.565 A:middle
你不会收到任何中间的

00:34:14.565 --> 00:34:16.466 A:middle
委托回调 你只会得到

00:34:16.466 --> 00:34:18.346 A:middle
汇报给 completionHandler 的

00:34:18.346 --> 00:34:19.246 A:middle
最终结果

00:34:21.005 --> 00:34:22.626 A:middle
不要在同一个 URLSession 上

00:34:22.626 --> 00:34:24.636 A:middle
混合使用这两种方法

00:34:24.636 --> 00:34:25.456 A:middle
选择其中一个并且保持一致

00:34:26.536 --> 00:34:27.356 A:middle
如果你使用

00:34:27.396 --> 00:34:28.985 A:middle
completionHandler 你不会获得

00:34:28.985 --> 00:34:30.876 A:middle
委托回调 但是有以下

00:34:30.916 --> 00:34:31.846 A:middle
两种例外情况

00:34:33.295 --> 00:34:35.706 A:middle
如果网络现在不可用

00:34:35.706 --> 00:34:37.795 A:middle
以及任务正在

00:34:37.795 --> 00:34:39.815 A:middle
等待连接

00:34:39.815 --> 00:34:41.565 A:middle
你会收到通知

00:34:41.565 --> 00:34:42.936 A:middle
以便你在你的

00:34:42.976 --> 00:34:44.396 A:middle
UI 上显示任何提示

00:34:44.396 --> 00:34:45.786 A:middle
另一个你会收到通知的

00:34:45.786 --> 00:34:47.636 A:middle
委托功能是

00:34:47.636 --> 00:34:48.376 A:middle
didReceive

00:34:48.376 --> 00:34:49.565 A:middle
AuthenticationChallenge

00:34:50.266 --> 00:34:54.656 A:middle
那么总结一下

00:34:54.706 --> 00:34:58.636 A:middle
你可以用的几种选项

00:34:58.636 --> 00:35:00.416 A:middle
我们推荐你

00:34:58.636 --> 00:35:00.416 A:middle
我们推荐你

00:35:00.416 --> 00:35:03.516 A:middle
用 waitsForConnectivity 在进程中

00:35:03.516 --> 00:35:05.206 A:middle
完成 URLSessionTasks

00:35:06.206 --> 00:35:07.486 A:middle
如果可以的话任务会立刻开始

00:35:07.486 --> 00:35:10.266 A:middle
但是如果无法立刻开始的话

00:35:10.266 --> 00:35:11.776 A:middle
它会在能开始的时候马上开始

00:35:13.226 --> 00:35:14.666 A:middle
你还可以选择

00:35:14.666 --> 00:35:16.176 A:middle
在后台完成任务

00:35:17.346 --> 00:35:18.516 A:middle
你可以选择后台的

00:35:18.516 --> 00:35:20.346 A:middle
自主任务

00:35:20.346 --> 00:35:22.406 A:middle
它会等到电池电量

00:35:22.406 --> 00:35:25.776 A:middle
和 Wi-Fi 都最佳的时机开始

00:35:30.356 --> 00:35:31.816 A:middle
现在我想要谈一谈一些

00:35:31.816 --> 00:35:33.606 A:middle
正在进行的开发

00:35:35.386 --> 00:35:36.616 A:middle
我想在座的很多人

00:35:36.616 --> 00:35:38.686 A:middle
都听说过 TLS 1.3

00:35:39.596 --> 00:35:41.716 A:middle
TLS 即安全传输层协议

00:35:41.716 --> 00:35:43.566 A:middle
在网络上加密

00:35:43.566 --> 00:35:45.516 A:middle
你的数据以防止

00:35:45.516 --> 00:35:47.966 A:middle
窃听者看到它

00:35:48.276 --> 00:35:50.636 A:middle
也许同样重要的是

00:35:50.636 --> 00:35:51.816 A:middle
保证你连到了

00:35:51.886 --> 00:35:53.066 A:middle
你想要连接的

00:35:53.066 --> 00:35:53.596 A:middle
那个服务器

00:35:54.506 --> 00:35:57.646 A:middle
在这个阶段 TLS 1.2

00:35:57.646 --> 00:35:58.116 A:middle
是很落伍了

00:35:58.116 --> 00:35:59.516 A:middle
我们发现它有

00:35:59.516 --> 00:36:00.426 A:middle
一系列的问题

00:35:59.516 --> 00:36:00.426 A:middle
一系列的问题

00:36:00.996 --> 00:36:04.696 A:middle
TLS 1.3 已经基本完成了

00:36:05.426 --> 00:36:06.706 A:middle
标准还没有最终敲定

00:36:07.966 --> 00:36:09.996 A:middle
目前苹果正在参与

00:36:09.996 --> 00:36:13.686 A:middle
IETF 工作小组

00:36:13.686 --> 00:36:14.756 A:middle
我们预计大概今年年底

00:36:14.756 --> 00:36:15.526 A:middle
会完成

00:36:16.256 --> 00:36:17.456 A:middle
同时 如果你们现在就想

00:36:17.456 --> 00:36:19.666 A:middle
实验一下的话 我们有一个

00:36:19.666 --> 00:36:21.136 A:middle
执行草案

00:36:21.816 --> 00:36:23.726 A:middle
如果你查看

00:36:23.726 --> 00:36:26.146 A:middle
本次苹果开发者大会的

00:36:26.146 --> 00:36:27.326 A:middle
安全部分

00:36:27.326 --> 00:36:29.566 A:middle
你会了解到如何试用它

00:36:30.446 --> 00:36:32.036 A:middle
你们可能还听说过

00:36:32.036 --> 00:36:32.736 A:middle
QUIC

00:36:33.706 --> 00:36:35.786 A:middle
QUIC 是一个新的传输协议

00:36:36.236 --> 00:36:39.236 A:middle
为试验那些

00:36:39.236 --> 00:36:41.666 A:middle
TCP 无法支持的新点子而设计

00:36:42.716 --> 00:36:43.886 A:middle
QUIC 最初是

00:36:43.886 --> 00:36:45.156 A:middle
一些谷歌工程师的一个试验

00:36:45.156 --> 00:36:47.546 A:middle
而这个试验

00:36:47.896 --> 00:36:49.186 A:middle
非常成功

00:36:49.236 --> 00:36:50.096 A:middle
他们从中学到了很多

00:36:50.256 --> 00:36:52.056 A:middle
一些点子很好 同时也发现

00:36:52.056 --> 00:36:53.446 A:middle
一些点子并不是像

00:36:53.446 --> 00:36:55.116 A:middle
他们以为的那样

00:36:55.766 --> 00:36:58.346 A:middle
那些工程师把

00:36:58.346 --> 00:36:59.916 A:middle
他们从中得到的经验带到了

00:36:59.916 --> 00:37:00.646 A:middle
IETF

00:36:59.916 --> 00:37:00.646 A:middle
IETF

00:37:00.646 --> 00:37:02.306 A:middle
我们已经组成了一个

00:37:02.306 --> 00:37:03.916 A:middle
新的工作小组来开发 IETF

00:37:03.916 --> 00:37:05.346 A:middle
标准的 QUIC 协议

00:37:06.316 --> 00:37:07.856 A:middle
苹果也参与了

00:37:07.856 --> 00:37:08.796 A:middle
这个工作小组

00:37:08.946 --> 00:37:10.626 A:middle
它没有像

00:37:10.796 --> 00:37:12.666 A:middle
TLS 那么成熟 但是它也已经

00:37:12.666 --> 00:37:13.746 A:middle
获得了很好的进展

00:37:17.416 --> 00:37:19.516 A:middle
在结束之前

00:37:19.516 --> 00:37:20.676 A:middle
我们还要再谈一件事情

00:37:21.496 --> 00:37:22.206 A:middle
Bonjour

00:37:25.036 --> 00:37:27.866 A:middle
十五年前 也是在这个

00:37:27.866 --> 00:37:29.946 A:middle
圣荷西的会议中心

00:37:30.616 --> 00:37:32.506 A:middle
乔布斯向世界宣布了 Bonjour

00:37:33.246 --> 00:37:35.326 A:middle
而我有机会向你们

00:37:35.326 --> 00:37:37.056 A:middle
介绍它是如何工作的

00:37:37.456 --> 00:37:39.196 A:middle
那之后发生了很多事情

00:37:40.356 --> 00:37:44.686 A:middle
自从我们在 2004 年推出了 Bonjour

00:37:44.686 --> 00:37:46.786 A:middle
我们将它用在了 Windows 上

00:37:46.786 --> 00:37:47.526 A:middle
用在了 Linux 上

00:37:47.606 --> 00:37:49.046 A:middle
我们也有了 Java API

00:37:50.356 --> 00:37:52.476 A:middle
第二年 Mac OS X 10.4

00:37:52.476 --> 00:37:54.306 A:middle
推出了广域 Bonjour

00:37:54.456 --> 00:37:55.596 A:middle
来补充在 Mac OS 10.2 中发布的

00:37:55.596 --> 00:37:57.396 A:middle
本地的基于多路传送的

00:37:57.396 --> 00:37:59.886 A:middle
Bonjour

00:38:01.726 --> 00:38:03.526 A:middle
同一年 Linux 开发者

00:38:03.526 --> 00:38:04.986 A:middle
做出了一个

00:38:04.986 --> 00:38:06.556 A:middle
完全独立的

00:38:06.556 --> 00:38:08.456 A:middle
有 GPL 执照的

00:38:08.456 --> 00:38:09.776 A:middle
Bonjour 版本 叫做 Avahi

00:38:11.126 --> 00:38:12.566 A:middle
之后几年

00:38:13.256 --> 00:38:15.226 A:middle
苹果提出了 Back to My Mac

00:38:15.736 --> 00:38:17.956 A:middle
它是建立在 10.4 系统中推出的

00:38:17.956 --> 00:38:19.666 A:middle
广域 Bonjour 功能上的

00:38:21.476 --> 00:38:23.796 A:middle
2009 年 我们推出了

00:38:23.796 --> 00:38:26.026 A:middle
Bonjour Sleep Proxy

00:38:26.026 --> 00:38:27.196 A:middle
允许你在你的主页使用 Back to Your Mac

00:38:27.196 --> 00:38:28.686 A:middle
即使它为了节省电量

00:38:28.686 --> 00:38:29.666 A:middle
而处于休眠状态

00:38:30.306 --> 00:38:33.216 A:middle
在那之后过了几年

00:38:33.266 --> 00:38:35.566 A:middle
2012 年安卓利用他们自己的 API

00:38:35.566 --> 00:38:38.386 A:middle
也采用了 Bonjour

00:38:38.386 --> 00:38:40.556 A:middle
如果你们中有人关注了的话

00:38:40.556 --> 00:38:41.606 A:middle
那是在 API 16 级

00:38:42.406 --> 00:38:43.936 A:middle
几年前

00:38:44.076 --> 00:38:45.626 A:middle
Windows 10 添加了

00:38:45.706 --> 00:38:47.206 A:middle
他们自己的 Bonjour 支持

00:38:47.756 --> 00:38:48.936 A:middle
现在 我知道在座的各位

00:38:48.936 --> 00:38:50.376 A:middle
已经非常清楚这段历史了

00:38:51.236 --> 00:38:52.846 A:middle
我们知道采用 Bonjour 的

00:38:52.846 --> 00:38:54.596 A:middle
主要操作系统供应商

00:38:55.726 --> 00:38:57.116 A:middle
但是发生了一些其他的事情

00:38:57.116 --> 00:38:59.366 A:middle
甚至也让我感到惊讶

00:38:59.366 --> 00:39:01.616 A:middle
Bonjour 开始出现在很多

00:38:59.366 --> 00:39:01.616 A:middle
Bonjour 开始出现在很多

00:39:01.616 --> 00:39:02.416 A:middle
其他的地方

00:39:02.666 --> 00:39:04.066 A:middle
我想用我的一个

00:39:04.326 --> 00:39:05.456 A:middle
个人经历来说明

00:39:06.066 --> 00:39:07.586 A:middle
我最近新买了一个房子

00:39:08.316 --> 00:39:09.716 A:middle
作为买新房的过程的

00:39:09.716 --> 00:39:11.126 A:middle
一部分 你往往

00:39:11.126 --> 00:39:12.116 A:middle
最终会买一些别的新东西

00:39:13.136 --> 00:39:14.816 A:middle
于是我开始往我的新家里

00:39:14.816 --> 00:39:16.706 A:middle
添新东西 并且开始

00:39:16.706 --> 00:39:17.346 A:middle
把它们联入网络

00:39:17.966 --> 00:39:19.426 A:middle
然后我开始发现

00:39:19.426 --> 00:39:20.896 A:middle
很多东西都采用了 Bonjour

00:39:20.896 --> 00:39:22.246 A:middle
现在 我买了一个新打印机

00:39:22.246 --> 00:39:23.026 A:middle
它有 Bonjour

00:39:23.236 --> 00:39:25.266 A:middle
我买了一些联网的

00:39:25.266 --> 00:39:26.786 A:middle
安全摄像头 它们也有 Bonjour

00:39:27.316 --> 00:39:28.916 A:middle
这没有惊吓到我

00:39:28.916 --> 00:39:30.686 A:middle
因为我们知道打印机和

00:39:30.686 --> 00:39:31.956 A:middle
联网摄像机是

00:39:31.956 --> 00:39:33.386 A:middle
最先采用 Bonjour 的设备

00:39:35.056 --> 00:39:37.326 A:middle
然后我买了一个环绕声音响

00:39:37.326 --> 00:39:41.216 A:middle
它有 Wi-Fi 功能

00:39:41.216 --> 00:39:43.276 A:middle
并且它有一个采用 Bonjour 的

00:39:43.546 --> 00:39:44.536 A:middle
嵌入式网络服务器

00:39:45.066 --> 00:39:46.346 A:middle
现在你可以使用

00:39:46.346 --> 00:39:47.946 A:middle
电视和远程控制

00:39:47.946 --> 00:39:50.136 A:middle
来设置这个音响

00:39:50.136 --> 00:39:51.956 A:middle
但是输入名字时

00:39:51.956 --> 00:39:53.286 A:middle
使用远程控制器的上下左右四个键

00:39:53.286 --> 00:39:54.586 A:middle
一个字母一个字母的输入

00:39:54.586 --> 00:39:55.056 A:middle
是非常烦的

00:39:55.396 --> 00:39:56.536 A:middle
能够在我的笔记本电脑

00:39:56.536 --> 00:39:58.966 A:middle
或者 27 英寸屏幕的 iMac 上

00:39:59.126 --> 00:40:00.956 A:middle
使用键盘和鼠标

00:39:59.126 --> 00:40:00.956 A:middle
使用键盘和鼠标

00:40:00.956 --> 00:40:03.206 A:middle
来设置这个新设备

00:40:03.206 --> 00:40:04.046 A:middle
是多好的一件事儿

00:40:04.166 --> 00:40:06.216 A:middle
我从另一个不同的公司

00:40:06.216 --> 00:40:07.536 A:middle
购买了另一个音响

00:40:07.536 --> 00:40:08.116 A:middle
它也同样有 Bonjour

00:40:08.826 --> 00:40:10.276 A:middle
我买了放在屋顶的

00:40:10.276 --> 00:40:11.556 A:middle
太阳能板来减轻

00:40:11.556 --> 00:40:13.516 A:middle
电费的压力

00:40:13.836 --> 00:40:16.356 A:middle
它的变频器有 Wi-Fi 功能

00:40:16.356 --> 00:40:18.696 A:middle
并有一个打着 Bonjour 广告的嵌入式网络服务器

00:40:19.016 --> 00:40:21.166 A:middle
现在我只需要点一下鼠标

00:40:21.166 --> 00:40:22.966 A:middle
就能看到一个

00:40:23.006 --> 00:40:25.056 A:middle
今天产生了多少电量的图表

00:40:25.056 --> 00:40:27.306 A:middle
我最近买的一样东西是

00:40:27.306 --> 00:40:29.846 A:middle
一个用来控制灌溉我的草坪的

00:40:29.846 --> 00:40:30.996 A:middle
灌溉控制器

00:40:32.256 --> 00:40:34.136 A:middle
它也有 Wi-Fi 功能并且

00:40:34.136 --> 00:40:35.896 A:middle
有一个打了 Bounjour 广告的

00:40:35.896 --> 00:40:36.586 A:middle
嵌入式网络服务器

00:40:37.166 --> 00:40:38.656 A:middle
比起试图

00:40:38.656 --> 00:40:40.326 A:middle
用一个两位的 LCD 屏幕

00:40:40.326 --> 00:40:42.196 A:middle
以及一个加减号的键

00:40:42.246 --> 00:40:44.186 A:middle
来设置你的喷头

00:40:44.186 --> 00:40:45.916 A:middle
能够同时在我的

00:40:45.916 --> 00:40:47.576 A:middle
iMac 的大屏幕上看到这一切

00:40:47.576 --> 00:40:47.976 A:middle
是多么美好的体验

00:40:48.516 --> 00:40:54.546 A:middle
[ 掌声 ]

00:40:55.046 --> 00:40:56.626 A:middle
谢谢你们这些创造者

00:40:56.626 --> 00:40:57.696 A:middle
创造了这么多

00:40:57.696 --> 00:40:58.576 A:middle
美好的产品

00:40:58.896 --> 00:41:00.646 A:middle
对于在座的各位 app 开发者

00:40:58.896 --> 00:41:00.646 A:middle
对于在座的各位 app 开发者

00:41:00.646 --> 00:41:03.446 A:middle
这会对你有什么影响呢

00:41:04.046 --> 00:41:05.906 A:middle
IETF DNS Service Discovery

00:41:05.906 --> 00:41:07.696 A:middle
工作小组继续取得进展

00:41:09.686 --> 00:41:11.566 A:middle
我们有了一些新改进

00:41:11.566 --> 00:41:13.466 A:middle
可以在多路径传送不高效的

00:41:13.466 --> 00:41:15.266 A:middle
企业网络上

00:41:15.266 --> 00:41:16.926 A:middle
以及新的网格状

00:41:16.926 --> 00:41:18.166 A:middle
网络技术 比如

00:41:18.266 --> 00:41:19.686 A:middle
Thread 这样不支持多路径传送的网络

00:41:19.686 --> 00:41:20.516 A:middle
服务发现

00:41:21.176 --> 00:41:22.756 A:middle
对于 app 开发者而言

00:41:22.816 --> 00:41:23.826 A:middle
好消息是它已经

00:41:23.826 --> 00:41:25.146 A:middle
对你的 app 完全公开了

00:41:25.146 --> 00:41:26.796 A:middle
API 没有什么变化

00:41:26.796 --> 00:41:28.716 A:middle
因为我们甚至在 15 年前

00:41:28.716 --> 00:41:29.666 A:middle
就预见到了这个问题

00:41:30.276 --> 00:41:32.146 A:middle
唯一需要记住的是

00:41:32.146 --> 00:41:33.876 A:middle
当你调用浏览器时

00:41:33.876 --> 00:41:35.286 A:middle
你会获得一个名称 类型

00:41:35.286 --> 00:41:37.226 A:middle
和域名 你要注意全部三个

00:41:38.016 --> 00:41:41.256 A:middle
你可能习惯于看到

00:41:41.256 --> 00:41:43.136 A:middle
域名总是本地的

00:41:43.136 --> 00:41:44.266 A:middle
然而现在它可能不是本地的

00:41:44.606 --> 00:41:46.816 A:middle
所以当你调用结束后

00:41:46.816 --> 00:41:48.476 A:middle
要记得回传你从

00:41:48.476 --> 00:41:49.616 A:middle
浏览调用中获得的

00:41:49.616 --> 00:41:49.866 A:middle
名称 类型和域名

00:41:50.066 --> 00:41:51.796 A:middle
而对于在座的设备制者来说

00:41:51.796 --> 00:41:54.006 A:middle
不要忘记支持

00:41:54.176 --> 00:41:55.226 A:middle
本地链接寻址

00:41:55.326 --> 00:41:56.506 A:middle
本地链接寻址是

00:41:56.506 --> 00:41:58.156 A:middle
在本地网络中连接到一个设备的

00:41:58.156 --> 00:41:59.486 A:middle
最值得信赖的方式

00:42:00.316 --> 00:42:02.186 A:middle
因为如果你无法配置它

00:42:02.186 --> 00:42:03.726 A:middle
你也就不会配置错了

00:42:04.516 --> 00:42:07.086 A:middle
[ 笑声 ]

00:42:07.586 --> 00:42:10.066 A:middle
好了我们总结一下

00:42:10.096 --> 00:42:12.386 A:middle
第一部分我们聊到了目前的

00:42:12.486 --> 00:42:12.826 A:middle
ECN 方面的进展

00:42:13.196 --> 00:42:14.636 A:middle
现在客户端和

00:42:14.636 --> 00:42:16.386 A:middle
服务器都支持它 舞台已经搭好

00:42:16.786 --> 00:42:18.636 A:middle
现在任何 ISP 都可以

00:42:18.636 --> 00:42:20.276 A:middle
通过在关键的瓶颈链接处

00:42:20.276 --> 00:42:21.996 A:middle
打开 ECN 让他们的用户立刻感受到

00:42:21.996 --> 00:42:22.896 A:middle
它的好处

00:42:23.776 --> 00:42:25.196 A:middle
继续在 NAT64 上

00:42:25.196 --> 00:42:25.626 A:middle
测试你的 app

00:42:25.676 --> 00:42:29.026 A:middle
在大部分已知的用户中

00:42:29.026 --> 00:42:30.266 A:middle
我们很高兴看到一切都顺利进行

00:42:32.766 --> 00:42:34.236 A:middle
我们在用户空间网络

00:42:34.236 --> 00:42:36.216 A:middle
方面也做了一些进步

00:42:36.216 --> 00:42:36.976 A:middle
但是那也没有改变 API

00:42:37.036 --> 00:42:39.126 A:middle
但是当你在

00:42:39.166 --> 00:42:40.586 A:middle
调试和查看堆栈跟踪时

00:42:40.586 --> 00:42:42.196 A:middle
你可能会在堆栈跟踪中

00:42:42.196 --> 00:42:43.366 A:middle
看到一些你不熟悉的符号

00:42:43.496 --> 00:42:44.886 A:middle
你可能看到

00:42:44.886 --> 00:42:45.626 A:middle
在 CPU 用量方面的不同

00:42:45.986 --> 00:42:46.966 A:middle
我们希望你可以了解这件事

00:42:46.966 --> 00:42:48.246 A:middle
这样你就不会过于惊讶

00:42:49.196 --> 00:42:51.426 A:middle
我们在网络扩展框架方面

00:42:51.426 --> 00:42:52.836 A:middle
也提出了新的功能

00:42:53.436 --> 00:42:55.116 A:middle
一个重磅消息是

00:42:55.196 --> 00:42:58.346 A:middle
用在 Siri 上的多路径 TCP

00:42:58.496 --> 00:42:59.836 A:middle
现在也可以用在

00:42:59.836 --> 00:43:00.736 A:middle
你们的 app 上面了

00:42:59.836 --> 00:43:00.736 A:middle
你们的 app 上面了

00:43:01.996 --> 00:43:02.706 A:middle
谢谢

00:43:03.516 --> 00:43:07.956 A:middle
[ 掌声 ]

00:43:08.456 --> 00:43:10.526 A:middle
在第二部分我们谈到了一些

00:43:10.526 --> 00:43:12.076 A:middle
URLSession 的改进

00:43:12.076 --> 00:43:12.736 A:middle
尤其是

00:43:12.736 --> 00:43:14.656 A:middle
waitsForConnectivity

00:43:14.656 --> 00:43:16.706 A:middle
它是

00:43:16.706 --> 00:43:18.326 A:middle
真正的网络 API

00:43:18.326 --> 00:43:18.576 A:middle
应该有的样子

00:43:18.856 --> 00:43:20.736 A:middle
当你要求我们做什么时

00:43:21.106 --> 00:43:22.476 A:middle
我们应该马上去做

00:43:22.476 --> 00:43:24.406 A:middle
而不是用一些现在无法完成的

00:43:24.406 --> 00:43:25.636 A:middle
出错信息来烦你

00:43:25.776 --> 00:43:27.196 A:middle
你叫我们做 我们就在能做的时候

00:43:27.196 --> 00:43:27.566 A:middle
马上完成

00:43:28.506 --> 00:43:29.736 A:middle
我还给出了一些最佳做法的

00:43:29.786 --> 00:43:33.296 A:middle
建议和一些正在进行的

00:43:33.296 --> 00:43:33.986 A:middle
开发的最新消息

00:43:34.826 --> 00:43:35.946 A:middle
你可以在网上找到

00:43:36.476 --> 00:43:37.706 A:middle
关于这场会议的更多信息

00:43:39.186 --> 00:43:41.196 A:middle
我们推荐你们去听

00:43:41.196 --> 00:43:42.586 A:middle
一些其它的会议

00:43:42.586 --> 00:43:44.216 A:middle
你或许会觉得它们也很有趣

00:43:44.866 --> 00:43:45.216 A:middle
谢谢
