WEBVTT

00:00:08.516 --> 00:00:21.996 A:middle
[ 背景噪音 ]

00:00:22.496 --> 00:00:22.976 A:middle
&gt;&gt; 欢迎大家

00:00:23.516 --> 00:00:27.546 A:middle
[ 掌声 ]

00:00:28.046 --> 00:00:30.376 A:middle
我是 Eric Tamura

00:00:30.376 --> 00:00:31.626 A:middle
是文件系统团队的一名经理

00:00:31.626 --> 00:00:33.876 A:middle
我们团队主要负责 iOS

00:00:33.876 --> 00:00:35.236 A:middle
和嵌入式设备 我会

00:00:35.746 --> 00:00:37.736 A:middle
向大家介绍 Apple File System

00:00:37.736 --> 00:00:38.616 A:middle
的一些新动向

00:00:38.716 --> 00:00:39.956 A:middle
和我一起的

00:00:39.956 --> 00:00:42.056 A:middle
是 Pavel Sokolov  他也是

00:00:42.056 --> 00:00:43.886 A:middle
文件系统团队的一名经理

00:00:43.886 --> 00:00:45.656 A:middle
主要负责 Mac

00:00:45.866 --> 00:00:46.916 A:middle
那么我们开始

00:00:48.406 --> 00:00:49.406 A:middle
本场演示

00:00:49.406 --> 00:00:51.126 A:middle
将大体分为

00:00:51.126 --> 00:00:51.656 A:middle
两个部分

00:00:52.016 --> 00:00:52.836 A:middle
我会向大家

00:00:52.836 --> 00:00:55.146 A:middle
介绍一些 iOS

00:00:55.226 --> 00:00:57.876 A:middle
tvOS 和 watchOS 上的新内容  Pavel

00:00:57.876 --> 00:00:59.066 A:middle
会在之后出场 向你们介绍

00:00:59.066 --> 00:01:01.216 A:middle
macOS 上的新内容

00:00:59.066 --> 00:01:01.216 A:middle
macOS 上的新内容

00:01:01.676 --> 00:01:06.556 A:middle
那我们马上开始吧

00:01:07.286 --> 00:01:10.146 A:middle
去年 我也在 WWDC

00:01:10.146 --> 00:01:11.576 A:middle
做了演讲

00:01:11.576 --> 00:01:13.596 A:middle
告诉大家 Apple 从 2017 年起

00:01:14.066 --> 00:01:15.086 A:middle
将要推出 Apple File System

00:01:15.206 --> 00:01:17.266 A:middle
作为所有设备的

00:01:17.266 --> 00:01:19.386 A:middle
默认文件格式 并且

00:01:19.386 --> 00:01:20.356 A:middle
我们确实做到了

00:01:20.356 --> 00:01:23.186 A:middle
所以 在 iOS 10.3

00:01:23.186 --> 00:01:26.266 A:middle
以及同时推出的 tvOS 和 watchOS 中

00:01:26.266 --> 00:01:28.696 A:middle
所有的设备都已转换到

00:01:28.766 --> 00:01:28.886 A:middle
APFS 上

00:01:28.886 --> 00:01:30.686 A:middle
这一点稍后我们会

00:01:30.686 --> 00:01:31.146 A:middle
详细介绍

00:01:32.076 --> 00:01:32.806 A:middle
我们还会介绍

00:01:32.806 --> 00:01:33.986 A:middle
转换过程

00:01:33.986 --> 00:01:35.296 A:middle
设备到底是如何

00:01:35.296 --> 00:01:38.766 A:middle
从 HFS+ 转换到 APFS 上的

00:01:38.766 --> 00:01:40.626 A:middle
以及 normalization（规范化）

00:01:40.626 --> 00:01:42.346 A:middle
和区分大小写 尤其是

00:01:42.436 --> 00:01:44.826 A:middle
在 iOS 设备上

00:01:45.736 --> 00:01:46.706 A:middle
那么我们就来谈一下

00:01:46.746 --> 00:01:47.206 A:middle
转换过程

00:01:47.306 --> 00:01:51.996 A:middle
目前 数百万

00:01:51.996 --> 00:01:53.176 A:middle
确切地说是数亿

00:01:53.176 --> 00:01:54.226 A:middle
设备已经

00:01:54.226 --> 00:01:56.726 A:middle
成功转换到了 APFS

00:01:57.516 --> 00:02:04.056 A:middle
[ 掌声 ]

00:01:57.516 --> 00:02:04.056 A:middle
[ 掌声 ]

00:02:04.556 --> 00:02:06.916 A:middle
从 iOS 10.3

00:02:06.916 --> 00:02:10.265 A:middle
以及相应的 tvOS 和 watchOS 开始

00:02:10.265 --> 00:02:11.286 A:middle
Apple File System 成为了默认文件系统

00:02:11.286 --> 00:02:12.706 A:middle
已经有数百万设备

00:02:12.706 --> 00:02:13.186 A:middle
完成了转换

00:02:14.116 --> 00:02:14.886 A:middle
你们可能注意到

00:02:14.886 --> 00:02:16.056 A:middle
此次更新

00:02:16.056 --> 00:02:17.096 A:middle
确实释放了

00:02:17.096 --> 00:02:19.146 A:middle
用户设备上的存储空间

00:02:19.536 --> 00:02:20.906 A:middle
尤其是释放了

00:02:20.906 --> 00:02:22.676 A:middle
之前的宗卷管理器

00:02:22.676 --> 00:02:24.276 A:middle
lightweight volume manager（轻量宗卷管理器）

00:02:24.276 --> 00:02:25.216 A:middle
占用的空间 因为我们

00:02:25.216 --> 00:02:26.106 A:middle
不再需要它了 可以

00:02:26.106 --> 00:02:27.636 A:middle
释放这部分空间

00:02:27.636 --> 00:02:29.166 A:middle
把它还给用户

00:02:29.856 --> 00:02:30.856 A:middle
还有一件事情 那就是

00:02:30.856 --> 00:02:32.506 A:middle
从 iOS 11 开始

00:02:32.506 --> 00:02:34.086 A:middle
我们可以充分利用

00:02:34.086 --> 00:02:36.576 A:middle
iOS tvOS 和 watchOS 中

00:02:36.576 --> 00:02:37.786 A:middle
AFPS 的功能了

00:02:37.786 --> 00:02:39.716 A:middle
尤其是 iOS  因为

00:02:39.716 --> 00:02:42.146 A:middle
iCloud 备份可以使用快照

00:02:42.146 --> 00:02:43.366 A:middle
来稳定地备份

00:02:43.366 --> 00:02:45.286 A:middle
文件系统 并上传到

00:02:45.286 --> 00:02:46.896 A:middle
云端 而不必

00:02:46.896 --> 00:02:48.436 A:middle
担心是否有某个过程

00:02:48.436 --> 00:02:50.136 A:middle
改变了某个文件

00:02:50.136 --> 00:02:52.216 A:middle
或是让权限

00:02:52.216 --> 00:02:52.766 A:middle
含混不清

00:02:52.866 --> 00:02:54.596 A:middle
最后 我们也听取了

00:02:54.596 --> 00:02:56.016 A:middle
开发者的反馈

00:02:56.016 --> 00:02:57.756 A:middle
来改进和完善

00:02:57.756 --> 00:02:59.256 A:middle
文件系统 以及其他

00:02:59.256 --> 00:02:59.956 A:middle
我们开发的软件

00:03:00.476 --> 00:03:02.186 A:middle
那么 我们来简要介绍一下

00:03:02.186 --> 00:03:03.286 A:middle
转换过程

00:03:03.616 --> 00:03:09.196 A:middle
APFS 转换发生在

00:03:09.196 --> 00:03:11.586 A:middle
升级到 iOS 10.3

00:03:11.816 --> 00:03:13.196 A:middle
和后续版本的过程中

00:03:13.196 --> 00:03:14.276 A:middle
所以 无论你是从此前版本

00:03:14.276 --> 00:03:17.956 A:middle
升级到 10.3 10.3.2 甚至 iOS 11

00:03:17.956 --> 00:03:19.126 A:middle
你的文件系统

00:03:19.126 --> 00:03:20.806 A:middle
都会自动完成转换

00:03:21.526 --> 00:03:22.506 A:middle
我们能做到这一点

00:03:22.506 --> 00:03:23.276 A:middle
如此成功的原因之一

00:03:23.276 --> 00:03:24.686 A:middle
就是我们实际上

00:03:24.686 --> 00:03:26.746 A:middle
在 iOS 10.0 10.1 和 10.2 中

00:03:27.016 --> 00:03:29.796 A:middle
进行了试转换

00:03:29.796 --> 00:03:31.776 A:middle
因而能够追踪

00:03:31.776 --> 00:03:33.596 A:middle
我们的转换过程

00:03:33.866 --> 00:03:34.766 A:middle
是否足够完善

00:03:35.666 --> 00:03:37.026 A:middle
我们也一直关注

00:03:37.026 --> 00:03:39.136 A:middle
iOS 10.3 及后续版本升级中

00:03:39.136 --> 00:03:41.386 A:middle
转换过程是否完善

00:03:41.386 --> 00:03:44.316 A:middle
我们对此

00:03:44.316 --> 00:03:44.776 A:middle
同样密切关注

00:03:45.686 --> 00:03:47.706 A:middle
最后 我们也仔细分析了

00:03:47.706 --> 00:03:49.376 A:middle
我们关注的数字 数据

00:03:49.376 --> 00:03:50.266 A:middle
和其他一切信息

00:03:50.686 --> 00:03:51.746 A:middle
进而能够在 Mac 上

00:03:51.746 --> 00:03:53.506 A:middle
改进和完善

00:03:53.506 --> 00:03:54.436 A:middle
转换过程

00:03:55.446 --> 00:03:57.186 A:middle
有时 一张图

00:03:57.186 --> 00:03:59.216 A:middle
往往胜过

00:03:59.216 --> 00:04:00.806 A:middle
千言万语 这里也

00:03:59.216 --> 00:04:00.806 A:middle
千言万语 这里也

00:04:00.806 --> 00:04:00.986 A:middle
有一张

00:04:02.006 --> 00:04:03.496 A:middle
我们假设

00:04:03.786 --> 00:04:05.646 A:middle
这个长矩形代表

00:04:05.746 --> 00:04:08.236 A:middle
一个完整的文件块

00:04:08.236 --> 00:04:09.656 A:middle
而在最左边 能看到

00:04:09.656 --> 00:04:11.086 A:middle
有一个 SB

00:04:11.086 --> 00:04:12.966 A:middle
即 superblock（超级块）

00:04:12.966 --> 00:04:14.526 A:middle
同时也是 HFS+ 宗卷的卷头

00:04:15.066 --> 00:04:16.526 A:middle
简明起见

00:04:16.526 --> 00:04:18.976 A:middle
我们有三个元数据区

00:04:18.976 --> 00:04:20.745 A:middle
代表文件系统

00:04:20.745 --> 00:04:21.805 A:middle
追踪的一切信息

00:04:22.026 --> 00:04:23.096 A:middle
其中包括

00:04:23.096 --> 00:04:25.506 A:middle
文件名 时间戳

00:04:25.506 --> 00:04:26.876 A:middle
以及磁盘上的文件块

00:04:26.876 --> 00:04:28.236 A:middle
还有两个区域

00:04:28.236 --> 00:04:30.076 A:middle
标记为文件数据

00:04:30.636 --> 00:04:31.526 A:middle
如果你还记得

00:04:31.526 --> 00:04:32.926 A:middle
转换过程的目的

00:04:32.926 --> 00:04:35.176 A:middle
是仅仅替换元数据

00:04:35.176 --> 00:04:36.516 A:middle
而不触及文件数据

00:04:36.516 --> 00:04:37.826 A:middle
我们希望文件数据

00:04:37.826 --> 00:04:39.756 A:middle
能保持原样 就好像

00:04:39.756 --> 00:04:41.226 A:middle
从没有对它进行过操作

00:04:42.246 --> 00:04:43.006 A:middle
所以我们首先要做的

00:04:43.006 --> 00:04:44.816 A:middle
就是找到

00:04:44.816 --> 00:04:46.426 A:middle
元数据的位置

00:04:46.426 --> 00:04:48.276 A:middle
同时 还要开始

00:04:48.276 --> 00:04:49.656 A:middle
将元数据写入

00:04:49.656 --> 00:04:52.226 A:middle
HFS+ 宗卷的可用空间

00:04:52.716 --> 00:04:54.776 A:middle
这样一来

00:04:54.776 --> 00:04:55.916 A:middle
可以防止系统崩溃

00:04:55.916 --> 00:04:56.886 A:middle
并且能够尽快恢复

00:04:56.886 --> 00:04:58.136 A:middle
防止转换过程

00:04:58.136 --> 00:04:58.566 A:middle
以失败告终

00:04:59.636 --> 00:05:00.966 A:middle
一旦找到了元数据

00:04:59.636 --> 00:05:00.966 A:middle
一旦找到了元数据

00:05:01.706 --> 00:05:02.836 A:middle
接下来就要将它

00:05:02.836 --> 00:05:04.756 A:middle
写入磁盘 此时

00:05:04.756 --> 00:05:05.896 A:middle
如果我们是在试转换

00:05:05.896 --> 00:05:07.586 A:middle
那么整个过程就到此结束

00:05:08.506 --> 00:05:10.396 A:middle
如果要完成这个过程

00:05:11.126 --> 00:05:12.956 A:middle
我们就要写入新的超级块

00:05:13.026 --> 00:05:14.766 A:middle
并覆盖原有的超级块

00:05:14.766 --> 00:05:17.016 A:middle
这样就有了一个 APFS 宗卷

00:05:17.746 --> 00:05:18.986 A:middle
最后一步

00:05:18.986 --> 00:05:20.346 A:middle
就是移除

00:05:20.406 --> 00:05:22.536 A:middle
包含 HFS+ 信息

00:05:22.536 --> 00:05:22.996 A:middle
的元数据

00:05:23.816 --> 00:05:25.736 A:middle
做到这一点

00:05:25.736 --> 00:05:28.006 A:middle
这个宗卷就彻底转换到了

00:05:28.176 --> 00:05:28.546 A:middle
APFS 上

00:05:28.896 --> 00:05:33.576 A:middle
再简单提一下 Unicode

00:05:35.456 --> 00:05:37.006 A:middle
如果你了解 Unicode

00:05:37.006 --> 00:05:37.866 A:middle
你应该知道

00:05:37.866 --> 00:05:39.476 A:middle
Unicode 有几种变体

00:05:39.476 --> 00:05:40.836 A:middle
但为方便讨论

00:05:40.836 --> 00:05:43.106 A:middle
我只会提到其中两种

00:05:43.416 --> 00:05:45.516 A:middle
即 NFC 和

00:05:45.516 --> 00:05:47.156 A:middle
NFD  这二者

00:05:47.156 --> 00:05:48.546 A:middle
大致对应着

00:05:48.546 --> 00:05:50.536 A:middle
预作字符

00:05:50.536 --> 00:05:51.126 A:middle
和分解字符

00:05:51.746 --> 00:05:53.406 A:middle
这意味着

00:05:53.406 --> 00:05:54.386 A:middle
你可以存储

00:05:54.386 --> 00:05:55.906 A:middle
外观相同的字符

00:05:55.906 --> 00:05:57.056 A:middle
外观相同的字符

00:05:57.056 --> 00:05:58.816 A:middle
可以用多种方式存储

00:05:59.136 --> 00:06:00.276 A:middle
取决于你使用的

00:05:59.136 --> 00:06:00.276 A:middle
取决于你使用的

00:06:00.276 --> 00:06:00.606 A:middle
字符形式

00:06:01.356 --> 00:06:03.846 A:middle
在 iOS 11 之前

00:06:04.136 --> 00:06:05.956 A:middle
AFPS 使用非规范化的 UTF-8

00:06:06.246 --> 00:06:08.426 A:middle
存储文件名 这意味着

00:06:08.426 --> 00:06:09.946 A:middle
如果你有一个文件

00:06:09.946 --> 00:06:11.946 A:middle
名称有多种表示方式

00:06:12.106 --> 00:06:13.436 A:middle
它们会在检索

00:06:13.436 --> 00:06:14.376 A:middle
创建和比较时

00:06:14.376 --> 00:06:16.816 A:middle
被视作不同的

00:06:16.816 --> 00:06:17.576 A:middle
文件名

00:06:18.326 --> 00:06:19.756 A:middle
我们再举个例子

00:06:20.216 --> 00:06:21.406 A:middle
方便大家理解

00:06:22.176 --> 00:06:23.266 A:middle
比如说

00:06:23.546 --> 00:06:25.066 A:middle
带腭音符号的 n

00:06:25.136 --> 00:06:26.176 A:middle
也就是西班牙语中的 ñ

00:06:26.546 --> 00:06:27.646 A:middle
你可以将它表示为

00:06:27.686 --> 00:06:29.926 A:middle
Unicode 十六进制码的 F1

00:06:30.666 --> 00:06:31.846 A:middle
或者 你可以把它

00:06:31.846 --> 00:06:33.606 A:middle
存储为分解字符

00:06:33.606 --> 00:06:34.696 A:middle
也就是把 n

00:06:34.696 --> 00:06:36.366 A:middle
和腭音符号

00:06:36.366 --> 00:06:36.726 A:middle
分别存储

00:06:36.796 --> 00:06:39.356 A:middle
在这个例子中 右边的

00:06:39.356 --> 00:06:40.846 A:middle
n 和腭音符号

00:06:40.846 --> 00:06:41.956 A:middle
是作为两个代码点

00:06:41.956 --> 00:06:43.146 A:middle
分别存储的 然而

00:06:43.346 --> 00:06:44.826 A:middle
系统会将它们

00:06:44.826 --> 00:06:46.626 A:middle
按合并方式处理

00:06:46.626 --> 00:06:48.326 A:middle
以在屏幕上显示

00:06:48.326 --> 00:06:48.856 A:middle
这个字符

00:06:51.776 --> 00:06:56.536 A:middle
所以问题在于

00:06:56.536 --> 00:06:58.286 A:middle
即便文件系统

00:06:58.286 --> 00:06:59.566 A:middle
能够将它们分别处理

00:06:59.566 --> 00:07:00.526 A:middle
系统的其他部分

00:06:59.566 --> 00:07:00.526 A:middle
系统的其他部分

00:07:00.526 --> 00:07:04.676 A:middle
也不一定希望

00:07:04.676 --> 00:07:05.326 A:middle
以这种形式和它们互动

00:07:05.326 --> 00:07:06.176 A:middle
对于网络文件服务器

00:07:06.176 --> 00:07:07.786 A:middle
这可能再清楚不过 但

00:07:08.706 --> 00:07:10.636 A:middle
整套软件服务

00:07:10.636 --> 00:07:11.676 A:middle
从文件系统一直到

00:07:11.676 --> 00:07:13.326 A:middle
基础服务以上 都能

00:07:13.326 --> 00:07:14.216 A:middle
正确处理

00:07:14.946 --> 00:07:16.446 A:middle
所以 为了修正这一点

00:07:16.446 --> 00:07:18.276 A:middle
我们在 Apple File System 中

00:07:18.276 --> 00:07:20.166 A:middle
引入了两种新的

00:07:20.166 --> 00:07:20.826 A:middle
规范化方案

00:07:21.226 --> 00:07:22.866 A:middle
一种是本地方案

00:07:22.866 --> 00:07:24.216 A:middle
另一种是运行时

00:07:24.216 --> 00:07:24.616 A:middle
方案

00:07:24.956 --> 00:07:26.686 A:middle
本地规范化方案

00:07:26.686 --> 00:07:28.486 A:middle
已于本周早些时候发布的

00:07:28.486 --> 00:07:29.926 A:middle
High Sierra beta 中提供

00:07:29.926 --> 00:07:31.796 A:middle
只能用于区分大小写

00:07:31.986 --> 00:07:32.966 A:middle
的宗卷

00:07:33.116 --> 00:07:34.896 A:middle
对于不区分大小写的内容

00:07:34.896 --> 00:07:36.486 A:middle
Pavel 稍后会上台

00:07:36.486 --> 00:07:37.676 A:middle
并向大家

00:07:37.676 --> 00:07:38.206 A:middle
简单介绍

00:07:38.946 --> 00:07:39.996 A:middle
本地规范化

00:07:39.996 --> 00:07:42.796 A:middle
也将登陆 iOS 11

00:07:42.796 --> 00:07:43.486 A:middle
只能用于抹掉数据恢复

00:07:43.486 --> 00:07:45.206 A:middle
这意味着 从 iOS 11 开始

00:07:45.206 --> 00:07:47.286 A:middle
如果你将 iPhone 或其他设备

00:07:47.286 --> 00:07:49.236 A:middle
连接到 iTunes

00:07:49.236 --> 00:07:51.166 A:middle
并还原出厂设置

00:07:51.366 --> 00:07:52.636 A:middle
就会自动采用本地方案

00:07:53.286 --> 00:07:54.486 A:middle
然而 我们不希望

00:07:54.486 --> 00:07:56.146 A:middle
只有抹掉数据

00:07:56.146 --> 00:07:57.536 A:middle
才能获得这项功能

00:07:57.656 --> 00:07:59.766 A:middle
所以我们也将引入

00:07:59.766 --> 00:08:01.816 A:middle
运行时规范化方案

00:07:59.766 --> 00:08:01.816 A:middle
运行时规范化方案

00:08:01.866 --> 00:08:03.056 A:middle
运行时规范化

00:08:03.056 --> 00:08:04.046 A:middle
会自动在

00:08:04.046 --> 00:08:06.986 A:middle
NFC 和

00:08:06.986 --> 00:08:09.286 A:middle
NFD 之间转换

00:08:09.286 --> 00:08:10.656 A:middle
以实现文件比较 进而实现

00:08:10.926 --> 00:08:11.446 A:middle
检索功能

00:08:11.446 --> 00:08:12.596 A:middle
如果找不到二者之一

00:08:12.596 --> 00:08:13.906 A:middle
便会自动寻找另一种

00:08:13.906 --> 00:08:15.386 A:middle
以确保你的 App

00:08:15.436 --> 00:08:17.126 A:middle
不会从文件系统中

00:08:17.126 --> 00:08:17.886 A:middle
收到 ENOENT

00:08:17.886 --> 00:08:18.436 A:middle
错误

00:08:19.366 --> 00:08:20.376 A:middle
我们在未来会推出更新

00:08:20.376 --> 00:08:22.076 A:middle
自动转换使用

00:08:22.076 --> 00:08:24.696 A:middle
任何一种规范形式的设备

00:08:24.696 --> 00:08:25.956 A:middle
如果设备已经升级到了 iOS 10.3

00:08:25.956 --> 00:08:28.476 A:middle
或 10.3.2 完成了转换

00:08:28.476 --> 00:08:31.046 A:middle
也能通过未来升级采用新的规范形式

00:08:31.826 --> 00:08:35.106 A:middle
这就是关于 iOS 的新消息

00:08:35.106 --> 00:08:36.056 A:middle
至此 接下来

00:08:36.056 --> 00:08:37.296 A:middle
交给 Pavel 让他来

00:08:37.296 --> 00:08:37.976 A:middle
告诉你们关于 Mac 的消息

00:08:38.515 --> 00:08:43.515 A:middle
[ 掌声 ]

00:08:44.516 --> 00:08:49.716 A:middle
[ 背景噪音 ]

00:08:50.216 --> 00:08:51.216 A:middle
&gt;&gt; 大家上午好

00:08:51.616 --> 00:08:53.726 A:middle
我是 Pavel Sokolov

00:08:53.726 --> 00:08:56.536 A:middle
是 Apple 文件系统团队

00:08:56.536 --> 00:08:56.836 A:middle
的一名经理

00:08:57.706 --> 00:08:59.016 A:middle
今天 我会介绍

00:08:59.016 --> 00:09:02.926 A:middle
macOS 有关 APFS

00:08:59.016 --> 00:09:02.926 A:middle
macOS 有关 APFS

00:09:03.146 --> 00:09:05.626 A:middle
的新变化

00:09:05.836 --> 00:09:06.456 A:middle
让我们开始

00:09:08.016 --> 00:09:10.516 A:middle
首先我想谈谈

00:09:10.516 --> 00:09:12.596 A:middle
其中包含哪些特性

00:09:12.596 --> 00:09:14.706 A:middle
以防你们没有听过

00:09:14.706 --> 00:09:15.976 A:middle
去年演示

00:09:15.976 --> 00:09:16.226 A:middle
的内容

00:09:19.416 --> 00:09:22.016 A:middle
一些最重要的特性

00:09:22.246 --> 00:09:23.736 A:middle
包括 首先

00:09:23.736 --> 00:09:27.066 A:middle
我想提醒大家 APFS

00:09:27.306 --> 00:09:29.336 A:middle
能够用于 Apple 支持的

00:09:29.656 --> 00:09:31.036 A:middle
所有平台

00:09:31.416 --> 00:09:35.006 A:middle
能够用于 iOS tvOS 甚至是

00:09:35.006 --> 00:09:37.136 A:middle
Apple Watch  当然还有

00:09:37.136 --> 00:09:37.396 A:middle
macOS

00:09:38.676 --> 00:09:40.706 A:middle
最了不起的一项特性

00:09:40.706 --> 00:09:41.236 A:middle
就是文件复制

00:09:41.626 --> 00:09:44.026 A:middle
你可以很快创建

00:09:44.026 --> 00:09:44.776 A:middle
文件的副本

00:09:45.186 --> 00:09:46.596 A:middle
它采用我们的

00:09:46.596 --> 00:09:48.726 A:middle
写入时复制技术 这项技术也用于

00:09:48.726 --> 00:09:49.376 A:middle
快照功能

00:09:50.176 --> 00:09:55.086 A:middle
你可以使用快照功能

00:09:55.176 --> 00:09:56.016 A:middle
创建整个文件系统

00:09:56.016 --> 00:09:57.666 A:middle
的快照

00:09:57.916 --> 00:09:59.846 A:middle
记住创建时间

00:09:59.976 --> 00:10:01.746 A:middle
还可以恢复到某个快照

00:09:59.976 --> 00:10:01.746 A:middle
还可以恢复到某个快照

00:10:02.466 --> 00:10:03.926 A:middle
我们也加入了对本地加密

00:10:03.926 --> 00:10:04.556 A:middle
的支持

00:10:05.076 --> 00:10:07.306 A:middle
还有空间共享

00:10:07.736 --> 00:10:08.936 A:middle
这一点稍后我会

00:10:08.936 --> 00:10:10.656 A:middle
多做介绍 我们还引入了

00:10:10.656 --> 00:10:11.976 A:middle
去碎片化

00:10:14.156 --> 00:10:17.116 A:middle
你可能会问 要如何才能

00:10:17.116 --> 00:10:17.446 A:middle
获得 APFS

00:10:18.206 --> 00:10:20.346 A:middle
那我们就先来

00:10:21.156 --> 00:10:21.266 A:middle
谈谈这点

00:10:21.476 --> 00:10:23.096 A:middle
实际上 你只需要

00:10:23.096 --> 00:10:25.486 A:middle
安装最新的 macOS High Sierra

00:10:25.486 --> 00:10:27.586 A:middle
你的系统宗卷

00:10:28.056 --> 00:10:29.416 A:middle
便会由安装器

00:10:29.506 --> 00:10:30.156 A:middle
自动转换

00:10:30.736 --> 00:10:33.476 A:middle
至于其他宗卷

00:10:33.476 --> 00:10:35.156 A:middle
则不会被

00:10:35.156 --> 00:10:36.076 A:middle
自动转换

00:10:36.076 --> 00:10:37.576 A:middle
但你仍然可以

00:10:37.576 --> 00:10:38.546 A:middle
手动转换

00:10:39.436 --> 00:10:42.756 A:middle
如果你要转换多个宗卷

00:10:43.146 --> 00:10:44.586 A:middle
非常重要的一点是

00:10:44.586 --> 00:10:46.766 A:middle
转换过后 每个分卷

00:10:46.766 --> 00:10:48.346 A:middle
都会变为 APFS 容器

00:10:48.616 --> 00:10:49.966 A:middle
这一点稍后

00:10:49.966 --> 00:10:50.646 A:middle
我会讲到

00:10:51.586 --> 00:10:53.136 A:middle
而多个容器间不会

00:10:53.136 --> 00:10:53.736 A:middle
共享空间

00:10:55.106 --> 00:10:56.686 A:middle
空间共享是一项

00:10:56.686 --> 00:10:58.776 A:middle
十分重要且令人惊叹的特性

00:10:58.776 --> 00:11:00.176 A:middle
它可以节省你的磁盘空间

00:10:58.776 --> 00:11:00.176 A:middle
它可以节省你的磁盘空间

00:11:01.746 --> 00:11:03.106 A:middle
我们希望你能

00:11:03.106 --> 00:11:04.426 A:middle
充分利用这一点 我也会

00:11:04.426 --> 00:11:07.496 A:middle
展示利用方法

00:11:08.196 --> 00:11:11.086 A:middle
你可能会问 我们支持

00:11:11.086 --> 00:11:12.146 A:middle
哪些宗卷 以及哪些

00:11:12.146 --> 00:11:13.836 A:middle
能转换成 APFS 格式

00:11:14.976 --> 00:11:17.706 A:middle
我们可以转换 HFS+ 宗卷

00:11:18.306 --> 00:11:22.146 A:middle
CoreStorage  Fusion  甚至是

00:11:22.146 --> 00:11:23.316 A:middle
FileVault 加密的磁盘

00:11:24.566 --> 00:11:26.176 A:middle
都可以自动转换成

00:11:27.326 --> 00:11:27.996 A:middle
APFS 格式

00:11:28.636 --> 00:11:34.216 A:middle
如果你想手动

00:11:34.216 --> 00:11:37.256 A:middle
转换已有

00:11:37.256 --> 00:11:39.776 A:middle
宗卷 只需要

00:11:39.776 --> 00:11:40.946 A:middle
打开 磁盘工具 App

00:11:41.776 --> 00:11:43.506 A:middle
右键点按分卷

00:11:43.936 --> 00:11:46.366 A:middle
选择 转换至 APFS

00:11:46.476 --> 00:11:46.896 A:middle
就可以了

00:11:48.016 --> 00:11:51.246 A:middle
我之前说过 这样一来

00:11:51.246 --> 00:11:54.096 A:middle
这个宗卷会变成容器

00:11:55.416 --> 00:11:56.726 A:middle
而容器无法共享

00:11:56.726 --> 00:11:57.136 A:middle
空间

00:11:57.776 --> 00:11:59.226 A:middle
如果你有多个分卷

00:11:59.226 --> 00:12:00.626 A:middle
又想要利用

00:11:59.226 --> 00:12:00.626 A:middle
又想要利用

00:12:00.626 --> 00:12:01.586 A:middle
这项功能

00:12:01.586 --> 00:12:03.676 A:middle
我们推荐你

00:12:03.676 --> 00:12:05.026 A:middle
将分卷添加到

00:12:05.026 --> 00:12:07.916 A:middle
已有的容器

00:12:08.656 --> 00:12:08.776 A:middle
再转移数据

00:12:09.016 --> 00:12:10.096 A:middle
为什么空间共享

00:12:10.096 --> 00:12:10.996 A:middle
如此重要 它又有

00:12:10.996 --> 00:12:11.386 A:middle
哪些优点

00:12:12.306 --> 00:12:13.806 A:middle
我们就来

00:12:13.806 --> 00:12:13.976 A:middle
大致谈一下

00:12:14.696 --> 00:12:18.886 A:middle
如果你是一名开发者

00:12:18.886 --> 00:12:20.416 A:middle
这是一种比较典型的

00:12:20.416 --> 00:12:20.966 A:middle
宗卷布局

00:12:22.156 --> 00:12:23.746 A:middle
你可能有多个

00:12:23.746 --> 00:12:24.336 A:middle
宗卷 对吗

00:12:24.856 --> 00:12:28.516 A:middle
多个宗卷的问题在于

00:12:28.516 --> 00:12:30.886 A:middle
如果某个宗卷

00:12:30.886 --> 00:12:32.386 A:middle
空间不足

00:12:33.696 --> 00:12:35.316 A:middle
你可能这里有一点

00:12:35.396 --> 00:12:36.996 A:middle
可用空间 那里有一点

00:12:36.996 --> 00:12:39.146 A:middle
可用空间 但都不在

00:12:39.146 --> 00:12:40.416 A:middle
同一个地方

00:12:40.416 --> 00:12:42.186 A:middle
所以要复制文件的时候

00:12:42.186 --> 00:12:45.826 A:middle
也无能为力

00:12:46.086 --> 00:12:50.306 A:middle
APFS 格式下 容器是

00:12:50.496 --> 00:12:52.476 A:middle
宗卷的一个分区

00:12:52.476 --> 00:12:55.046 A:middle
各个宗卷共享容器的

00:12:55.046 --> 00:12:55.796 A:middle
可用空间

00:12:56.946 --> 00:12:58.066 A:middle
我们看一下这张图

00:12:58.326 --> 00:13:01.156 A:middle
一般情况下

00:12:58.326 --> 00:13:01.156 A:middle
一般情况下

00:13:01.156 --> 00:13:02.346 A:middle
会有一个 GPT 卷头  一个 EFI

00:13:02.346 --> 00:13:05.086 A:middle
服务分区

00:13:05.356 --> 00:13:06.726 A:middle
HFS 格式下 每个宗卷就是一个

00:13:06.726 --> 00:13:07.316 A:middle
分区

00:13:07.586 --> 00:13:10.766 A:middle
而在 APFS 格式下 像我说的

00:13:10.986 --> 00:13:12.576 A:middle
这个分区共有八个容器

00:13:12.626 --> 00:13:13.576 A:middle
两个宗卷

00:13:13.576 --> 00:13:15.136 A:middle
也在其中

00:13:15.596 --> 00:13:16.596 A:middle
比方说 你想

00:13:16.596 --> 00:13:17.116 A:middle
填满空间

00:13:17.476 --> 00:13:19.786 A:middle
如你们所见 在 HFS 下

00:13:19.786 --> 00:13:20.076 A:middle
没有空间了

00:13:21.006 --> 00:13:22.756 A:middle
但在 APFS 下 你还有

00:13:22.756 --> 00:13:27.176 A:middle
可用空间 可以存储

00:13:28.176 --> 00:13:28.276 A:middle
数据

00:13:28.496 --> 00:13:30.146 A:middle
接下来看一下复制

00:13:31.736 --> 00:13:32.946 A:middle
复制是一项了不起的特性

00:13:32.946 --> 00:13:34.276 A:middle
你可以快速创建

00:13:34.276 --> 00:13:35.296 A:middle
文件的副本

00:13:35.996 --> 00:13:38.186 A:middle
这个例子中 我们

00:13:38.186 --> 00:13:39.396 A:middle
选取一些本地文件

00:13:39.396 --> 00:13:42.036 A:middle
它由一些文件块构成

00:13:42.946 --> 00:13:44.586 A:middle
过去 要想复制文件

00:13:44.886 --> 00:13:46.406 A:middle
你要复制文件的数据

00:13:46.406 --> 00:13:47.666 A:middle
这很花时间

00:13:48.126 --> 00:13:49.696 A:middle
不光花费时间 还会占用

00:13:49.696 --> 00:13:50.006 A:middle
空间

00:13:51.146 --> 00:13:54.176 A:middle
APFS 下 我们只需要

00:13:54.176 --> 00:13:55.466 A:middle
记录对这个文件的引用

00:13:55.466 --> 00:13:57.626 A:middle
记住文件的位置

00:13:57.626 --> 00:14:02.186 A:middle
只需复制

00:13:57.626 --> 00:14:02.186 A:middle
只需复制

00:14:02.186 --> 00:14:02.386 A:middle
元数据即可

00:14:02.386 --> 00:14:04.386 A:middle
这项功能很棒 因为过程很快

00:14:04.436 --> 00:14:05.706 A:middle
也不会浪费空间

00:14:06.626 --> 00:14:08.716 A:middle
你也许会问 如果修改了文件

00:14:08.716 --> 00:14:09.736 A:middle
会怎样

00:14:10.666 --> 00:14:12.626 A:middle
毕竟这只是一个副本

00:14:13.706 --> 00:14:15.766 A:middle
实际上 复制时写入技术

00:14:15.766 --> 00:14:18.446 A:middle
此时生效

00:14:18.916 --> 00:14:21.746 A:middle
新的文件数据会被写入

00:14:21.746 --> 00:14:23.436 A:middle
可用空间 而我们

00:14:23.436 --> 00:14:24.826 A:middle
只是创建了另一个引用

00:14:26.126 --> 00:14:30.996 A:middle
很简单 也能节省空间

00:14:31.206 --> 00:14:33.456 A:middle
另一项有趣的

00:14:33.456 --> 00:14:35.186 A:middle
APFS 特性

00:14:35.186 --> 00:14:35.936 A:middle
是稀疏文件

00:14:35.936 --> 00:14:37.416 A:middle
让我举个例子

00:14:37.886 --> 00:14:40.876 A:middle
比如说你的桌面上

00:14:40.916 --> 00:14:43.356 A:middle
有一张猫的图片

00:14:43.356 --> 00:14:47.716 A:middle
比如这样的 你想要

00:14:48.366 --> 00:14:48.446 A:middle
编辑它

00:14:51.316 --> 00:14:53.776 A:middle
那么 在 APFS 下

00:14:53.776 --> 00:14:55.906 A:middle
和 HFS 下 它都应该

00:14:55.906 --> 00:14:57.726 A:middle
有相同的初始外观

00:14:58.376 --> 00:15:00.606 A:middle
文件的大小

00:14:58.376 --> 00:15:00.606 A:middle
文件的大小

00:15:00.606 --> 00:15:02.476 A:middle
是 1 MB

00:15:02.476 --> 00:15:04.406 A:middle
然后你想要

00:15:04.406 --> 00:15:06.116 A:middle
编辑它

00:15:06.236 --> 00:15:07.266 A:middle
比方说 如果你的应用程序

00:15:07.266 --> 00:15:09.326 A:middle
打算跳过文件的

00:15:09.396 --> 00:15:11.456 A:middle
末尾 写入额外数据

00:15:11.456 --> 00:15:12.916 A:middle
会发生什么

00:15:13.796 --> 00:15:15.176 A:middle
这就是区别

00:15:16.286 --> 00:15:19.516 A:middle
HFS 下 文件系统会

00:15:19.516 --> 00:15:21.896 A:middle
将跳过的部分

00:15:22.376 --> 00:15:25.066 A:middle
填满 0  你的文件大小

00:15:25.066 --> 00:15:28.016 A:middle
也会变成 3 MB

00:15:28.016 --> 00:15:28.206 A:middle
对吗

00:15:29.246 --> 00:15:30.596 A:middle
文件的中间部分

00:15:30.596 --> 00:15:32.006 A:middle
会被文件系统

00:15:32.006 --> 00:15:33.436 A:middle
填满 0  也会占用

00:15:33.436 --> 00:15:33.826 A:middle
空间

00:15:34.816 --> 00:15:36.746 A:middle
而在 APFS 下 你会得到

00:15:36.746 --> 00:15:37.506 A:middle
一个稀疏文件

00:15:38.806 --> 00:15:40.896 A:middle
文件的中间部分

00:15:40.896 --> 00:15:42.376 A:middle
逻辑上依然存在

00:15:42.416 --> 00:15:44.606 A:middle
如果从那里开始读取

00:15:44.606 --> 00:15:46.656 A:middle
会读到很多 0

00:15:46.656 --> 00:15:47.386 A:middle
但物理上只占用两块空间

00:15:48.466 --> 00:15:50.516 A:middle
这同样可以节约空间

00:15:50.516 --> 00:15:52.606 A:middle
加快速度

00:15:52.656 --> 00:15:53.716 A:middle
希望大家知道这个特性

00:15:54.156 --> 00:15:57.366 A:middle
所以如大家所见 文件有两种

00:15:57.366 --> 00:15:57.936 A:middle
大小

00:15:58.836 --> 00:16:00.426 A:middle
即逻辑大小和物理

00:15:58.836 --> 00:16:00.426 A:middle
即逻辑大小和物理

00:16:00.426 --> 00:16:00.726 A:middle
大小

00:16:00.726 --> 00:16:03.486 A:middle
希望大家能知道

00:16:04.106 --> 00:16:06.566 A:middle
但如果考虑到

00:16:06.566 --> 00:16:08.386 A:middle
快照和文件复制

00:16:08.386 --> 00:16:11.726 A:middle
事情又会变得

00:16:12.496 --> 00:16:12.716 A:middle
更复杂

00:16:12.806 --> 00:16:15.206 A:middle
我们也大概

00:16:15.206 --> 00:16:15.656 A:middle
讲一下

00:16:15.706 --> 00:16:18.556 A:middle
文件到底多大

00:16:18.556 --> 00:16:18.716 A:middle
就成了问题

00:16:18.716 --> 00:16:20.986 A:middle
比如说还是同样的情况

00:16:20.986 --> 00:16:23.366 A:middle
你有一个稀疏文件

00:16:23.366 --> 00:16:25.136 A:middle
占两个文件块

00:16:25.136 --> 00:16:25.936 A:middle
对它进行了一次

00:16:25.936 --> 00:16:28.146 A:middle
快照 记录下

00:16:28.146 --> 00:16:30.176 A:middle
这些块的位置 然后再

00:16:30.176 --> 00:16:31.106 A:middle
编辑这个文件

00:16:31.586 --> 00:16:34.656 A:middle
如你所见 复制时写入

00:16:34.656 --> 00:16:35.706 A:middle
技术生效 并会

00:16:35.706 --> 00:16:38.026 A:middle
为刚写入的文件块

00:16:38.026 --> 00:16:39.016 A:middle
分配空间

00:16:40.496 --> 00:16:41.586 A:middle
那么这个文件到底有多大

00:16:42.036 --> 00:16:43.876 A:middle
还是 3 MB

00:16:44.006 --> 00:16:44.256 A:middle
对吗

00:16:45.636 --> 00:16:47.616 A:middle
物理上 你只为它

00:16:47.696 --> 00:16:49.796 A:middle
分配了两个块 但

00:16:49.796 --> 00:16:51.636 A:middle
如果你删除这个文件

00:16:51.636 --> 00:16:53.176 A:middle
只能得到一个块的空间

00:16:53.296 --> 00:16:54.506 A:middle
这一点很重要

00:16:54.506 --> 00:16:56.996 A:middle
希望大家知道

00:16:57.086 --> 00:17:00.006 A:middle
接下来 我们会讲

00:16:57.086 --> 00:17:00.006 A:middle
接下来 我们会讲

00:17:00.006 --> 00:17:02.106 A:middle
APFS 另一项重要特性

00:17:02.106 --> 00:17:04.185 A:middle
即 Unicode 和

00:17:04.185 --> 00:17:05.826 A:middle
规范化的支持

00:17:07.776 --> 00:17:10.796 A:middle
如大家所知 这项功能

00:17:10.906 --> 00:17:12.786 A:middle
没什么存在感 除非

00:17:12.786 --> 00:17:13.346 A:middle
出了问题

00:17:14.516 --> 00:17:17.026 A:middle
我们就来看一下 在这方面

00:17:17.026 --> 00:17:19.756 A:middle
APFS 和 HFS 有何不同

00:17:20.356 --> 00:17:23.076 A:middle
默认状况下 APFS

00:17:23.076 --> 00:17:25.346 A:middle
不区分大小写 也不执行

00:17:25.346 --> 00:17:27.646 A:middle
规范化 不像 HFS

00:17:27.646 --> 00:17:28.756 A:middle
是一种区分大小写

00:17:28.756 --> 00:17:29.926 A:middle
且执行规范化的文件系统

00:17:30.766 --> 00:17:31.756 A:middle
区别何在

00:17:32.176 --> 00:17:35.346 A:middle
其实很简单

00:17:35.346 --> 00:17:37.776 A:middle
APFS 下 我们

00:17:37.896 --> 00:17:39.656 A:middle
严格按照你命名的方式

00:17:39.656 --> 00:17:40.236 A:middle
存储文件名

00:17:41.496 --> 00:17:43.436 A:middle
我们会计算不区分大小写

00:17:43.436 --> 00:17:44.756 A:middle
和不执行规范化

00:17:45.406 --> 00:17:46.226 A:middle
的散列值 以及文件名

00:17:46.226 --> 00:17:47.786 A:middle
并将它们储存在一起

00:17:49.066 --> 00:17:50.896 A:middle
所以 检索的时候

00:17:51.136 --> 00:17:52.976 A:middle
我们执行同样的散列算法

00:17:52.976 --> 00:17:53.526 A:middle
即可

00:17:54.326 --> 00:17:55.746 A:middle
我们会进行散列值比较

00:17:55.746 --> 00:17:57.236 A:middle
这样就可以快速 高效地

00:17:57.236 --> 00:17:57.976 A:middle
找到文件名

00:18:00.176 --> 00:18:04.686 A:middle
提醒大家非常重要的一点

00:18:04.776 --> 00:18:06.006 A:middle
如果遍历目录结构

00:18:06.006 --> 00:18:07.626 A:middle
文件名会按照

00:18:07.626 --> 00:18:09.256 A:middle
散列值排序

00:18:09.526 --> 00:18:13.826 A:middle
而非你们认为的

00:18:13.826 --> 00:18:16.286 A:middle
按照字母表的

00:18:16.286 --> 00:18:17.266 A:middle
自然排序

00:18:18.476 --> 00:18:19.716 A:middle
我们还支持 Unicode 9.0

00:18:19.716 --> 00:18:22.706 A:middle
不像 HFS 仅支持

00:18:22.706 --> 00:18:23.336 A:middle
Unicode 3.2

00:18:23.896 --> 00:18:26.686 A:middle
我们不允许像 HFS 那样

00:18:26.686 --> 00:18:29.646 A:middle
使用未分配的码位

00:18:29.646 --> 00:18:31.036 A:middle
这是为了确保未来的

00:18:31.036 --> 00:18:31.866 A:middle
兼容性

00:18:32.316 --> 00:18:34.286 A:middle
所以一旦新的 Unicode

00:18:34.286 --> 00:18:36.046 A:middle
推出 就可以很简单地

00:18:36.046 --> 00:18:37.676 A:middle
为你所用 只需替换

00:18:37.676 --> 00:18:38.536 A:middle
大小写转换和字符表

00:18:39.716 --> 00:18:41.436 A:middle
APFS 支持规范形式

00:18:41.436 --> 00:18:43.786 A:middle
大小写转换 不像 HFS

00:18:43.856 --> 00:18:45.346 A:middle
只支持简化形式大小写转换

00:18:45.626 --> 00:18:47.136 A:middle
规范形式大小写转换更好

00:18:47.376 --> 00:18:48.756 A:middle
因为这样可以更自然地

00:18:48.756 --> 00:18:50.206 A:middle
进行排序等操作

00:18:50.206 --> 00:18:51.856 A:middle
同用户的预期一致

00:18:52.366 --> 00:18:56.016 A:middle
接下来 再讲一下

00:18:56.016 --> 00:18:58.406 A:middle
Unicode 9.0 以及为什么

00:18:58.406 --> 00:18:58.646 A:middle
它很重要

00:18:58.716 --> 00:19:00.946 A:middle
你可能会问 谁会在乎

00:18:58.716 --> 00:19:00.946 A:middle
你可能会问 谁会在乎

00:19:00.946 --> 00:19:02.626 A:middle
Unicode 的版本呢

00:19:03.396 --> 00:19:04.276 A:middle
事实上 你应该在乎

00:19:05.956 --> 00:19:07.956 A:middle
Unicode 9.0 能让你的

00:19:07.956 --> 00:19:09.426 A:middle
App 真正面向世界

00:19:09.786 --> 00:19:13.806 A:middle
例如 在 Unicode 8 中

00:19:13.806 --> 00:19:15.406 A:middle
增加了对美洲原住民语言

00:19:15.406 --> 00:19:17.076 A:middle
切罗基语的支持

00:19:17.396 --> 00:19:20.006 A:middle
于是就有了对应的小写字符

00:19:20.226 --> 00:19:21.986 A:middle
和大写字符来

00:19:21.986 --> 00:19:22.516 A:middle
支持这门语言

00:19:23.326 --> 00:19:24.656 A:middle
我们基本支持

00:19:24.756 --> 00:19:26.256 A:middle
任何有书面形式

00:19:26.256 --> 00:19:28.126 A:middle
且为人所理解的语言

00:19:28.926 --> 00:19:30.456 A:middle
如果这还不算面向世界

00:19:30.456 --> 00:19:33.776 A:middle
我也不知道什么算了

00:19:33.996 --> 00:19:35.386 A:middle
我们支持最新的表情符号

00:19:36.206 --> 00:19:37.136 A:middle
你可能会问 为什么

00:19:37.136 --> 00:19:41.486 A:middle
当然是因为

00:19:41.486 --> 00:19:42.436 A:middle
这很酷

00:19:42.436 --> 00:19:46.126 A:middle
你可能会想 好吧 但 HFS

00:19:46.156 --> 00:19:47.256 A:middle
也支持表情文字

00:19:47.416 --> 00:19:48.376 A:middle
这很重要吗

00:19:48.756 --> 00:19:50.536 A:middle
重要的其实是

00:19:50.536 --> 00:19:51.196 A:middle
准确性

00:19:51.926 --> 00:19:55.006 A:middle
HFS 确实支持表情文字 却为此

00:19:55.046 --> 00:19:56.546 A:middle
牺牲了一些准确性

00:19:56.806 --> 00:20:00.566 A:middle
APFS 中 大写转换

00:19:56.806 --> 00:20:00.566 A:middle
APFS 中 大写转换

00:20:00.786 --> 00:20:02.556 A:middle
完全兼容 Unicode 9.0

00:20:02.556 --> 00:20:06.586 A:middle
而某些字符

00:20:06.586 --> 00:20:09.276 A:middle
还有特定的规则

00:20:09.276 --> 00:20:11.376 A:middle
例如土耳其语中

00:20:11.376 --> 00:20:12.966 A:middle
大写带点的 I

00:20:13.376 --> 00:20:16.836 A:middle
或是德语中的 ß

00:20:16.836 --> 00:20:17.916 A:middle
都能正确变成大写

00:20:19.026 --> 00:20:21.356 A:middle
接下来再谈一下

00:20:21.356 --> 00:20:21.986 A:middle
引导支持

00:20:22.756 --> 00:20:24.426 A:middle
你当然可以用 APFS 分区来引导

00:20:24.876 --> 00:20:26.156 A:middle
你肯定要打开你的 Mac

00:20:27.166 --> 00:20:27.266 A:middle
对吧

00:20:28.066 --> 00:20:29.806 A:middle
我们在 APFS 中嵌入了

00:20:29.806 --> 00:20:30.316 A:middle
EFI 装载程序

00:20:31.076 --> 00:20:32.326 A:middle
在这里 嵌入

00:20:32.326 --> 00:20:34.356 A:middle
专门指 驱动程序

00:20:34.356 --> 00:20:36.256 A:middle
嵌入了文件系统格式中

00:20:36.256 --> 00:20:37.576 A:middle
使用非常简单

00:20:37.576 --> 00:20:41.076 A:middle
可以被支持

00:20:41.076 --> 00:20:43.666 A:middle
虚拟机的第三方

00:20:43.666 --> 00:20:44.176 A:middle
挂载

00:20:44.836 --> 00:20:46.306 A:middle
你不需要挂载

00:20:46.996 --> 00:20:49.266 A:middle
完整的驱动程序 或是

00:20:49.266 --> 00:20:50.376 A:middle
使用完整的标准格式

00:20:50.706 --> 00:20:52.056 A:middle
你只需要按照

00:20:52.056 --> 00:20:53.156 A:middle
超级块中的一些建议

00:20:53.156 --> 00:20:55.076 A:middle
加载已经嵌入

00:20:55.076 --> 00:20:56.996 A:middle
宗卷中的驱动程序

00:20:56.996 --> 00:20:57.376 A:middle
即可

00:20:58.546 --> 00:21:00.336 A:middle
这使得 APFS 面向未来

00:20:58.546 --> 00:21:00.336 A:middle
这使得 APFS 面向未来

00:21:00.336 --> 00:21:02.426 A:middle
因为如果文件系统格式发生变动

00:21:03.006 --> 00:21:04.976 A:middle
你只需要

00:21:04.976 --> 00:21:06.386 A:middle
从新的宗卷加载新的驱动程序即可

00:21:07.416 --> 00:21:08.746 A:middle
APFS 允许用加密磁盘

00:21:08.746 --> 00:21:09.236 A:middle
引导

00:21:09.376 --> 00:21:10.946 A:middle
也可以从 Fusion Drive 引导

00:21:11.666 --> 00:21:13.316 A:middle
加密引导事实上

00:21:13.316 --> 00:21:14.186 A:middle
更加安全

00:21:14.806 --> 00:21:17.076 A:middle
我们再讲一下关于

00:21:17.076 --> 00:21:18.076 A:middle
安全和加密的内容

00:21:19.476 --> 00:21:20.856 A:middle
我们支持之前使用的

00:21:20.856 --> 00:21:23.156 A:middle
FileVault 模式

00:21:24.146 --> 00:21:26.176 A:middle
可以将 FileVault 加密宗卷

00:21:26.176 --> 00:21:28.256 A:middle
转换成 APFS 格式

00:21:29.156 --> 00:21:31.636 A:middle
你的恢复密钥不会变化

00:21:31.686 --> 00:21:33.506 A:middle
我们不仅

00:21:33.506 --> 00:21:34.786 A:middle
支持相同的工作原理

00:21:34.786 --> 00:21:36.816 A:middle
还保持了兼容性 所以

00:21:36.816 --> 00:21:38.476 A:middle
无论什么时候转换格式

00:21:38.476 --> 00:21:40.326 A:middle
都能保留已有的

00:21:40.326 --> 00:21:41.476 A:middle
恢复密钥和

00:21:41.476 --> 00:21:41.996 A:middle
恢复密码

00:21:42.156 --> 00:21:43.296 A:middle
你不需要

00:21:43.296 --> 00:21:44.636 A:middle
整体迁移数据

00:21:44.666 --> 00:21:45.956 A:middle
转换过程也不会耗费

00:21:45.956 --> 00:21:46.456 A:middle
太多时间

00:21:47.586 --> 00:21:48.656 A:middle
另一点很重要的是

00:21:48.656 --> 00:21:50.196 A:middle
快照也是加密的

00:21:50.896 --> 00:21:52.526 A:middle
这意味着 如果

00:21:52.526 --> 00:21:54.526 A:middle
你在没有加密时

00:21:54.526 --> 00:21:56.116 A:middle
记录了快照

00:21:56.116 --> 00:21:57.986 A:middle
之后又打开了加密

00:21:57.986 --> 00:22:00.556 A:middle
这份快照也会受到保护

00:21:57.986 --> 00:22:00.556 A:middle
这份快照也会受到保护

00:22:01.076 --> 00:22:02.506 A:middle
APFS 也支持 Fusion Drive

00:22:02.506 --> 00:22:05.046 A:middle
此前已有的特性

00:22:05.046 --> 00:22:06.456 A:middle
都会保留

00:22:06.456 --> 00:22:08.906 A:middle
比如回写缓存

00:22:08.906 --> 00:22:09.466 A:middle
和读取缓存

00:22:09.746 --> 00:22:11.446 A:middle
为了发挥固态硬盘

00:22:11.446 --> 00:22:13.476 A:middle
的高速 我们也做出了

00:22:13.476 --> 00:22:15.616 A:middle
改进 现在你所有的

00:22:15.616 --> 00:22:17.326 A:middle
元数据将始终存储在

00:22:17.356 --> 00:22:19.796 A:middle
固态硬盘上 使得速度

00:22:19.976 --> 00:22:20.806 A:middle
略有提升

00:22:20.806 --> 00:22:25.036 A:middle
另一项重要的特性是

00:22:25.036 --> 00:22:25.946 A:middle
去碎片化

00:22:26.826 --> 00:22:27.866 A:middle
APFS 支持智能

00:22:27.866 --> 00:22:28.466 A:middle
碎片整理工具

00:22:29.456 --> 00:22:30.486 A:middle
为什么叫 智能

00:22:30.486 --> 00:22:31.896 A:middle
因为它能够理解

00:22:32.036 --> 00:22:33.266 A:middle
哪里碎片出现最频繁

00:22:33.266 --> 00:22:35.106 A:middle
哪些文件最容易

00:22:35.106 --> 00:22:37.106 A:middle
产生碎片 也会优先

00:22:37.106 --> 00:22:37.786 A:middle
整理这些碎片

00:22:38.256 --> 00:22:40.526 A:middle
它只会整理机械硬盘的碎片

00:22:41.116 --> 00:22:43.626 A:middle
去碎片化只会发生在

00:22:43.626 --> 00:22:45.266 A:middle
设备空闲时

00:22:45.266 --> 00:22:46.376 A:middle
不会干扰你的

00:22:46.376 --> 00:22:47.506 A:middle
正常工作

00:22:51.116 --> 00:22:53.746 A:middle
另一项有趣的功能

00:22:53.746 --> 00:22:54.376 A:middle
是快照

00:22:55.486 --> 00:22:57.076 A:middle
我们大概讲一下

00:22:58.216 --> 00:23:00.376 A:middle
想象你现在

00:22:58.216 --> 00:23:00.376 A:middle
想象你现在

00:23:00.376 --> 00:23:01.936 A:middle
有一个文件系统 还有

00:23:01.936 --> 00:23:03.966 A:middle
一些文件 你想要

00:23:03.966 --> 00:23:05.356 A:middle
记下文件系统

00:23:05.356 --> 00:23:06.986 A:middle
当前的状态 以备未来引用

00:23:07.506 --> 00:23:11.206 A:middle
接下来发生的 是

00:23:11.276 --> 00:23:13.206 A:middle
我们会记下对所有的

00:23:13.206 --> 00:23:15.596 A:middle
文件 引用 创建元数据的

00:23:15.596 --> 00:23:18.796 A:middle
快照 并保存

00:23:18.796 --> 00:23:19.976 A:middle
如果你之后对文件系统

00:23:20.076 --> 00:23:22.236 A:middle
进行了改动 比如编辑了

00:23:22.236 --> 00:23:25.616 A:middle
一个文件 之前提到的

00:23:25.616 --> 00:23:26.726 A:middle
复制时写入技术便会生效

00:23:26.726 --> 00:23:30.296 A:middle
在新位置分配一部分空间

00:23:30.296 --> 00:23:32.246 A:middle
并写入你的改动

00:23:32.566 --> 00:23:34.296 A:middle
已有的文件块保持原样

00:23:34.826 --> 00:23:36.596 A:middle
再比如 你删除了一个文件

00:23:37.806 --> 00:23:39.266 A:middle
文件块本身并没有被删除

00:23:39.266 --> 00:23:41.206 A:middle
删除的只是

00:23:41.266 --> 00:23:44.456 A:middle
对这个文件的引用

00:23:44.606 --> 00:23:46.826 A:middle
所以如果你之后想恢复到

00:23:46.856 --> 00:23:49.156 A:middle
某个快照 便会将这个文件

00:23:49.156 --> 00:23:51.016 A:middle
恢复到之前的状态

00:23:51.926 --> 00:23:53.836 A:middle
比如说 你做的编辑

00:23:53.996 --> 00:23:56.516 A:middle
会消失 而你删除的文件

00:23:56.516 --> 00:23:59.776 A:middle
则会被恢复

00:23:59.846 --> 00:24:00.946 A:middle
快照是一项很棒的特性

00:23:59.846 --> 00:24:00.946 A:middle
快照是一项很棒的特性

00:24:01.976 --> 00:24:02.796 A:middle
创建的速度很快

00:24:03.576 --> 00:24:05.186 A:middle
但要注意 快照会

00:24:05.186 --> 00:24:06.116 A:middle
占用空间

00:24:07.086 --> 00:24:08.466 A:middle
因此 创建

00:24:08.466 --> 00:24:10.146 A:middle
快照需要授权

00:24:11.236 --> 00:24:12.286 A:middle
如果你想

00:24:12.286 --> 00:24:13.016 A:middle
利用这项特性

00:24:13.016 --> 00:24:15.346 A:middle
请联系我们

00:24:15.636 --> 00:24:17.306 A:middle
那现在 我想给大家

00:24:17.306 --> 00:24:17.866 A:middle
做个演示

00:24:17.866 --> 00:24:19.336 A:middle
我要请上 Pavel Císler

00:24:19.336 --> 00:24:20.646 A:middle
向大家演示

00:24:20.646 --> 00:24:20.966 A:middle
Time Machine

00:24:21.516 --> 00:24:25.706 A:middle
[ 掌声 ]

00:24:26.206 --> 00:24:26.726 A:middle
&gt;&gt; 谢谢 Pavel

00:24:26.726 --> 00:24:28.616 A:middle
大家好

00:24:28.616 --> 00:24:32.556 A:middle
我是 Pavel Cisler

00:24:32.556 --> 00:24:35.016 A:middle
如果你在想 为什么

00:24:35.186 --> 00:24:36.346 A:middle
这个人的名

00:24:36.346 --> 00:24:37.516 A:middle
和前一个人的名

00:24:37.516 --> 00:24:40.256 A:middle
一模一样 那是因为

00:24:40.296 --> 00:24:42.446 A:middle
我们测试了一下文件复制 然后

00:24:42.976 --> 00:24:45.556 A:middle
[笑声] 总之 我是

00:24:45.616 --> 00:24:46.776 A:middle
Finder 和 Time Machine

00:24:46.776 --> 00:24:47.086 A:middle
团队的一名经理

00:24:47.086 --> 00:24:50.666 A:middle
在场有谁在用 Time Machine

00:24:51.726 --> 00:24:52.236 A:middle
哇 很棒

00:24:52.306 --> 00:24:53.646 A:middle
很多人

00:24:54.146 --> 00:24:55.606 A:middle
有人知道 mobile Time Machine

00:24:55.606 --> 00:24:56.876 A:middle
这项功能吗

00:24:58.136 --> 00:24:58.856 A:middle
有些人知道

00:24:58.856 --> 00:24:59.646 A:middle
不是很多

00:25:00.196 --> 00:25:02.686 A:middle
好吧 我将向大家展示

00:25:03.006 --> 00:25:04.246 A:middle
一下 mobile Time Machine

00:25:04.646 --> 00:25:04.746 A:middle
这项功能

00:25:04.896 --> 00:25:06.576 A:middle
让我切换到

00:25:06.576 --> 00:25:07.236 A:middle
我的演示用机

00:25:08.806 --> 00:25:11.626 A:middle
mobile Time Machine 让

00:25:11.626 --> 00:25:14.516 A:middle
Time Machine 更为便利

00:25:14.516 --> 00:25:16.016 A:middle
这项功能让你

00:25:16.196 --> 00:25:19.796 A:middle
可以在路上

00:25:19.796 --> 00:25:20.986 A:middle
进行备份 即使你手边

00:25:20.986 --> 00:25:22.196 A:middle
没有备份设备

00:25:22.196 --> 00:25:24.536 A:middle
没有 Time Capsule

00:25:24.536 --> 00:25:25.056 A:middle
或者其他硬盘

00:25:25.306 --> 00:25:26.516 A:middle
比方说你带着笔记本电脑

00:25:26.516 --> 00:25:27.186 A:middle
在外面

00:25:27.186 --> 00:25:30.826 A:middle
你的 Time Capsule 在家

00:25:31.726 --> 00:25:33.596 A:middle
但你的电脑

00:25:33.596 --> 00:25:34.976 A:middle
还在使用 mobile Time Machine

00:25:34.976 --> 00:25:37.346 A:middle
每小时备份 很棒的

00:25:37.346 --> 00:25:38.306 A:middle
一项特性 对吧

00:25:38.306 --> 00:25:39.556 A:middle
如果你丢了笔记本电脑

00:25:39.556 --> 00:25:41.016 A:middle
或是丢了硬盘

00:25:41.016 --> 00:25:42.796 A:middle
这可能帮不到你

00:25:42.796 --> 00:25:44.326 A:middle
但如果

00:25:44.326 --> 00:25:45.836 A:middle
你不小心删掉了

00:25:45.836 --> 00:25:47.116 A:middle
一个很重要的表格

00:25:47.166 --> 00:25:50.396 A:middle
之类的 mobile Time Machine 能

00:25:50.796 --> 00:25:51.996 A:middle
解决这个问题

00:25:52.376 --> 00:25:54.576 A:middle
这项功能自从

00:25:54.576 --> 00:25:57.096 A:middle
Mac OS X Lion 开始便已存在

00:25:57.096 --> 00:25:58.156 A:middle
我来快速演示一下

00:25:58.156 --> 00:25:58.486 A:middle
它是怎么工作的

00:25:58.486 --> 00:25:59.806 A:middle
那么

00:26:00.306 --> 00:26:02.406 A:middle
这是 Time Machine 的恢复

00:26:02.406 --> 00:26:04.906 A:middle
UI 这是我的笔记本电脑

00:26:04.906 --> 00:26:06.456 A:middle
把它从办公室带来的

00:26:06.456 --> 00:26:07.656 A:middle
没有连接到任何 Time Capsule

00:26:07.656 --> 00:26:09.726 A:middle
但我仍然能浏览

00:26:09.836 --> 00:26:13.036 A:middle
备份记录

00:26:13.206 --> 00:26:14.666 A:middle
还能浏览 查看我的文件

00:26:16.456 --> 00:26:18.406 A:middle
这就是那份

00:26:19.476 --> 00:26:20.866 A:middle
我早先一直在写

00:26:20.866 --> 00:26:22.096 A:middle
但一不留神删掉的

00:26:22.096 --> 00:26:24.086 A:middle
秘密预算文档 就像这样

00:26:24.086 --> 00:26:28.866 A:middle
我恢复了这份文档

00:26:28.866 --> 00:26:30.256 A:middle
又能继续编写了

00:26:30.516 --> 00:26:32.446 A:middle
非常简单的功能

00:26:33.106 --> 00:26:34.516 A:middle
但需要的时候

00:26:34.516 --> 00:26:35.616 A:middle
能帮上大忙

00:26:36.046 --> 00:26:40.846 A:middle
你们都是开发者

00:26:41.216 --> 00:26:43.136 A:middle
想知道它的

00:26:43.136 --> 00:26:45.276 A:middle
具体工作原理 对吗

00:26:45.666 --> 00:26:48.666 A:middle
Mac OS X Lion 中

00:26:48.666 --> 00:26:50.076 A:middle
我们首次开发了这项特性

00:26:50.356 --> 00:26:51.906 A:middle
当时它很复杂

00:26:51.986 --> 00:26:55.076 A:middle
至少需要两个

00:26:55.396 --> 00:26:56.076 A:middle
后台进程

00:26:56.426 --> 00:26:58.886 A:middle
其中之一是

00:26:58.926 --> 00:26:59.786 A:middle
VirtualFileSystem Overlay

00:26:59.786 --> 00:27:02.456 A:middle
如果你们曾经

00:26:59.786 --> 00:27:02.456 A:middle
如果你们曾经

00:27:02.456 --> 00:27:03.676 A:middle
接触过类似的东西 就会知道

00:27:03.676 --> 00:27:04.996 A:middle
它挺难办的

00:27:05.386 --> 00:27:06.546 A:middle
它实际上是

00:27:06.546 --> 00:27:08.596 A:middle
几万行代码

00:27:08.986 --> 00:27:11.576 A:middle
在 macOS High Sierra 中

00:27:11.836 --> 00:27:14.316 A:middle
Time Machine 团队一直忙于

00:27:14.876 --> 00:27:16.086 A:middle
删掉这些代码

00:27:16.526 --> 00:27:19.786 A:middle
我们所做的 就是

00:27:19.786 --> 00:27:21.326 A:middle
基于 APFS 快照 重新采用了

00:27:21.326 --> 00:27:23.306 A:middle
mobile Time Machine

00:27:23.306 --> 00:27:25.036 A:middle
也就是我刚才向你们

00:27:25.036 --> 00:27:25.416 A:middle
展示的

00:27:26.326 --> 00:27:28.556 A:middle
现在忘掉这个 UI

00:27:28.556 --> 00:27:30.626 A:middle
让我打开终端 向你们

00:27:30.626 --> 00:27:33.656 A:middle
展示一下部分工作原理

00:27:34.046 --> 00:27:35.866 A:middle
谈到快照

00:27:36.626 --> 00:27:37.966 A:middle
它是什么样的

00:27:37.966 --> 00:27:39.756 A:middle
有何使用体验

00:27:39.756 --> 00:27:41.276 A:middle
事实上 它非常

00:27:41.396 --> 00:27:44.896 A:middle
像一个宗卷 类似地

00:27:44.966 --> 00:27:47.526 A:middle
你可以用很多

00:27:47.526 --> 00:27:50.376 A:middle
宗卷管理工具来

00:27:50.376 --> 00:27:50.746 A:middle
检视它

00:27:51.136 --> 00:27:53.056 A:middle
我最喜欢的是 mount 所以

00:27:53.056 --> 00:27:54.916 A:middle
我就在这里输入 mount

00:27:55.056 --> 00:27:57.906 A:middle
不输入任何参数 如果这样做

00:27:57.906 --> 00:27:59.436 A:middle
这里就会列出你所有的磁盘

00:27:59.946 --> 00:28:01.726 A:middle
你们可以看到 最上面

00:27:59.946 --> 00:28:01.726 A:middle
你们可以看到 最上面

00:28:01.726 --> 00:28:06.046 A:middle
根目录 有一个

00:28:06.046 --> 00:28:07.106 A:middle
交换分区

00:28:07.426 --> 00:28:09.246 A:middle
有一些其他普通的宗卷

00:28:09.246 --> 00:28:10.726 A:middle
但接下来 有一些很有趣的宗卷

00:28:11.186 --> 00:28:14.006 A:middle
有特定的挂载点

00:28:14.006 --> 00:28:15.986 A:middle
路径中包含

00:28:15.986 --> 00:28:17.816 A:middle
Time Machine

00:28:17.816 --> 00:28:19.956 A:middle
还有这些很奇怪的

00:28:20.016 --> 00:28:22.626 A:middle
时间戳

00:28:22.866 --> 00:28:25.596 A:middle
这些就是 APFS 快照

00:28:25.596 --> 00:28:28.796 A:middle
代表每个小时

00:28:28.796 --> 00:28:30.836 A:middle
分别的 mobile Time Machine

00:28:30.836 --> 00:28:32.496 A:middle
备份 好的

00:28:32.756 --> 00:28:34.046 A:middle
每一个都是一个快照

00:28:34.046 --> 00:28:35.476 A:middle
都以宗卷的形式

00:28:35.476 --> 00:28:35.966 A:middle
装载

00:28:36.216 --> 00:28:37.786 A:middle
所以如果我进入

00:28:38.566 --> 00:28:41.326 A:middle
Time Machine 的恢复 UI

00:28:41.326 --> 00:28:42.056 A:middle
它们就在右边这里

00:28:43.146 --> 00:28:44.836 A:middle
现在我回去

00:28:45.146 --> 00:28:48.246 A:middle
这些快照不是

00:28:48.246 --> 00:28:51.186 A:middle
一直挂载的

00:28:51.186 --> 00:28:52.626 A:middle
而是延迟挂载 所以

00:28:52.626 --> 00:28:54.036 A:middle
不需要常驻

00:28:54.036 --> 00:28:55.946 A:middle
mobile Time Machine 只会在

00:28:56.006 --> 00:28:57.836 A:middle
需要它们的时候才使用

00:28:58.296 --> 00:28:58.756 A:middle
之后就会卸载它们

00:28:58.756 --> 00:29:02.436 A:middle
那我来展示一下

00:28:58.756 --> 00:29:02.436 A:middle
那我来展示一下

00:29:02.436 --> 00:29:03.796 A:middle
这样做时会发生什么

00:29:03.796 --> 00:29:06.076 A:middle
我来模拟一下

00:29:06.076 --> 00:29:07.686 A:middle
mobile Time Machine 用完快照

00:29:07.686 --> 00:29:09.726 A:middle
并将它们全部卸载时

00:29:09.726 --> 00:29:10.786 A:middle
它会做什么

00:29:10.786 --> 00:29:12.756 A:middle
我会继续用这行叫做 tmutil

00:29:12.756 --> 00:29:15.506 A:middle
的命令 再加上一个叫

00:29:15.506 --> 00:29:18.106 A:middle
unmountlocalSnapshots 的动词

00:29:18.176 --> 00:29:20.346 A:middle
他就开始

00:29:20.346 --> 00:29:21.746 A:middle
卸载所有的快照了

00:29:22.006 --> 00:29:25.236 A:middle
所以现在 如果我回到恢复 UI

00:29:25.236 --> 00:29:28.026 A:middle
它其实要重新挂载

00:29:28.066 --> 00:29:28.716 A:middle
这些快照 没错

00:29:28.716 --> 00:29:31.616 A:middle
这个过程很快

00:29:32.146 --> 00:29:34.826 A:middle
已经加载完了

00:29:34.826 --> 00:29:37.656 A:middle
大概 20 个宗卷

00:29:37.716 --> 00:29:39.186 A:middle
这很棒

00:29:39.636 --> 00:29:42.386 A:middle
现在 我要开始

00:29:42.506 --> 00:29:43.756 A:middle
进行一次备份

00:29:43.756 --> 00:29:45.066 A:middle
mobile Time Machine 每一个小时

00:29:45.206 --> 00:29:45.906 A:middle
备份一次

00:29:45.906 --> 00:29:47.476 A:middle
它会自行唤醒并创建一个

00:29:47.476 --> 00:29:48.056 A:middle
快照

00:29:48.296 --> 00:29:49.856 A:middle
我们不需要干等

00:29:49.856 --> 00:29:51.396 A:middle
一个小时 等它自己

00:29:51.396 --> 00:29:51.546 A:middle
备份

00:29:51.606 --> 00:29:53.456 A:middle
所以 我会再用一个工具

00:29:54.016 --> 00:30:00.336 A:middle
叫 tmutil snapshot 这样

00:29:54.016 --> 00:30:00.336 A:middle
叫 tmutil snapshot 这样

00:30:00.586 --> 00:30:02.146 A:middle
就执行了一次备份

00:30:02.446 --> 00:30:05.026 A:middle
可以看到 只花了

00:30:05.086 --> 00:30:07.166 A:middle
不到一秒钟就备份了

00:30:07.216 --> 00:30:08.656 A:middle
整台设备

00:30:09.006 --> 00:30:09.876 A:middle
这非常棒

00:30:10.516 --> 00:30:14.036 A:middle
[ 掌声 ]

00:30:14.536 --> 00:30:16.856 A:middle
接下来 我要

00:30:17.346 --> 00:30:18.796 A:middle
展示 刚才确实

00:30:18.866 --> 00:30:19.056 A:middle
生效了

00:30:19.056 --> 00:30:21.566 A:middle
我要一不小心

00:30:21.566 --> 00:30:22.476 A:middle
删除一些数据

00:30:23.996 --> 00:30:27.786 A:middle
哦 不 我都干了些什么

00:30:27.786 --> 00:30:28.616 A:middle
我最重要的影片

00:30:28.616 --> 00:30:30.626 A:middle
接下来 我要回到

00:30:30.626 --> 00:30:33.526 A:middle
恢复 UI  然后 啊 还好

00:30:33.916 --> 00:30:36.476 A:middle
它在这儿 然后把它恢复

00:30:36.866 --> 00:30:39.406 A:middle
再一次 mobile Time Machine

00:30:39.406 --> 00:30:39.976 A:middle
雪中送炭

00:30:40.846 --> 00:30:44.486 A:middle
那么 它到底为什么这么快

00:30:44.646 --> 00:30:46.376 A:middle
就像另一位 Pavel

00:30:46.376 --> 00:30:48.546 A:middle
向你们解释的 快照

00:30:48.776 --> 00:30:50.856 A:middle
是一种复制时的写入技术

00:30:50.856 --> 00:30:53.346 A:middle
他只是获取

00:30:53.346 --> 00:30:56.036 A:middle
数据的引用

00:30:56.036 --> 00:30:57.616 A:middle
如果真的发生变化

00:30:57.616 --> 00:30:59.816 A:middle
再执行拷贝过程

00:30:59.816 --> 00:31:00.576 A:middle
拷贝是推迟的

00:30:59.816 --> 00:31:00.576 A:middle
拷贝是推迟的

00:31:00.576 --> 00:31:01.536 A:middle
就是所谓的 延迟

00:31:02.056 --> 00:31:03.586 A:middle
所以更快

00:31:03.586 --> 00:31:03.996 A:middle
更高效

00:31:05.606 --> 00:31:07.546 A:middle
我还要

00:31:07.546 --> 00:31:09.216 A:middle
指出一点 我刚才

00:31:09.216 --> 00:31:10.606 A:middle
恢复的这部电影

00:31:10.606 --> 00:31:12.886 A:middle
所占内存其实相当大

00:31:12.966 --> 00:31:15.196 A:middle
是我们去年演讲

00:31:15.886 --> 00:31:16.236 A:middle
的视频

00:31:16.846 --> 00:31:20.926 A:middle
有 1.1 GB  之前的

00:31:20.926 --> 00:31:23.286 A:middle
mobile Time Machine 有一些

00:31:23.286 --> 00:31:25.446 A:middle
局限 例如不能备份

00:31:25.446 --> 00:31:27.876 A:middle
20 MB 以上文件的

00:31:27.876 --> 00:31:28.396 A:middle
改动

00:31:28.396 --> 00:31:30.066 A:middle
现在 所有这些局限

00:31:30.626 --> 00:31:31.256 A:middle
都不存在了

00:31:31.256 --> 00:31:32.966 A:middle
基于 APFS 快照的

00:31:32.966 --> 00:31:36.046 A:middle
mobile Time Machine 会备份所有的东西

00:31:36.156 --> 00:31:37.686 A:middle
且非常快速

00:31:37.686 --> 00:31:39.416 A:middle
高效

00:31:39.536 --> 00:31:42.116 A:middle
这就是 基于 APFS 快照的

00:31:42.116 --> 00:31:43.376 A:middle
mobile Time Machine

00:31:44.526 --> 00:31:44.996 A:middle
好的

00:31:44.996 --> 00:31:47.896 A:middle
那么现在 我要

00:31:49.106 --> 00:31:51.096 A:middle
切换回幻灯片

00:31:51.096 --> 00:31:54.146 A:middle
Pavel 会告诉你们

00:31:54.146 --> 00:31:56.056 A:middle
我们用了哪些 API

00:31:56.106 --> 00:31:56.756 A:middle
来实现这一切

00:31:56.756 --> 00:31:57.276 A:middle
谢谢大家

00:31:58.516 --> 00:32:04.676 A:middle
[ 掌声 ]

00:31:58.516 --> 00:32:04.676 A:middle
[ 掌声 ]

00:32:05.176 --> 00:32:05.926 A:middle
&gt;&gt; 谢谢 Pavel.

00:32:06.516 --> 00:32:10.976 A:middle
[ 背景噪音 ]

00:32:11.476 --> 00:32:13.486 A:middle
你们会问 有哪些

00:32:13.486 --> 00:32:15.416 A:middle
API  如何利用

00:32:15.416 --> 00:32:15.856 A:middle
它们

00:32:16.646 --> 00:32:21.006 A:middle
好消息是 如果你用

00:32:21.006 --> 00:32:22.076 A:middle
Swift 编程 你也应该这么做

00:32:22.076 --> 00:32:25.896 A:middle
那么一切都已经

00:32:26.946 --> 00:32:27.536 A:middle
处理好了

00:32:28.246 --> 00:32:31.166 A:middle
copyItem API 会自动

00:32:31.166 --> 00:32:33.216 A:middle
利用 APFS 中的

00:32:34.116 --> 00:32:35.016 A:middle
复制特性

00:32:36.116 --> 00:32:37.346 A:middle
背后的原理是

00:32:37.346 --> 00:32:39.246 A:middle
可以看到 如果宗卷

00:32:39.246 --> 00:32:41.946 A:middle
兼容复制 那么复制

00:32:41.996 --> 00:32:43.816 A:middle
就会在拷贝时

00:32:43.816 --> 00:32:44.756 A:middle
自动进行

00:32:46.176 --> 00:32:47.736 A:middle
还有 replaceItem API

00:32:47.986 --> 00:32:48.946 A:middle
会处理不安全的

00:32:48.946 --> 00:32:51.596 A:middle
存档 同样也是自动的

00:32:52.136 --> 00:32:54.286 A:middle
你不需要做额外的

00:32:54.286 --> 00:32:56.366 A:middle
事情

00:32:56.626 --> 00:32:57.846 A:middle
我还想提一些指南

00:32:57.896 --> 00:32:59.916 A:middle
里面包括正确的操作

00:33:00.016 --> 00:33:02.876 A:middle
和重要事项

00:33:03.576 --> 00:33:05.656 A:middle
尤其是 exchangedata

00:33:05.856 --> 00:33:06.766 A:middle
不建议使用

00:33:06.796 --> 00:33:08.636 A:middle
我们在一年前提出了这一点

00:33:09.456 --> 00:33:11.116 A:middle
并且 它不仅不建议使用

00:33:11.856 --> 00:33:13.766 A:middle
也无法在 APFS 中

00:33:13.766 --> 00:33:14.376 A:middle
使用

00:33:15.456 --> 00:33:17.666 A:middle
如果你想作为替代可以

00:33:17.936 --> 00:33:19.586 A:middle
利用 atomic file swap（原子文件交换）

00:33:19.586 --> 00:33:21.276 A:middle
或者 atomic safe save（原子安全存储）

00:33:21.276 --> 00:33:23.626 A:middle
要使用新 API

00:33:23.626 --> 00:33:25.376 A:middle
叫做 rename_np

00:33:26.086 --> 00:33:29.876 A:middle
还有 请不要使用

00:33:29.876 --> 00:33:30.336 A:middle
Carbon API

00:33:30.716 --> 00:33:31.696 A:middle
它也已经过时了

00:33:32.016 --> 00:33:33.526 A:middle
以兼容模式

00:33:33.526 --> 00:33:34.316 A:middle
运行于 APFS

00:33:34.546 --> 00:33:35.866 A:middle
会变得更慢

00:33:36.236 --> 00:33:38.196 A:middle
我们不建议使用 因为它会

00:33:38.196 --> 00:33:38.626 A:middle
拖慢系统

00:33:38.926 --> 00:33:41.706 A:middle
作为替代 请使用 Foundation API

00:33:42.636 --> 00:33:46.196 A:middle
如果你想在底层操作

00:33:46.196 --> 00:33:48.716 A:middle
你可以使用 copyfile 函数

00:33:48.716 --> 00:33:51.366 A:middle
拷贝文件

00:33:51.686 --> 00:33:53.186 A:middle
它支持 COPYFILE_CLONE

00:33:53.186 --> 00:33:53.556 A:middle
标签

00:33:53.736 --> 00:33:57.346 A:middle
针对开发者预览版

00:33:57.656 --> 00:33:59.196 A:middle
有一些注意事项

00:34:00.276 --> 00:34:02.206 A:middle
尤其是 我们不会

00:34:02.206 --> 00:34:03.906 A:middle
自动升级

00:34:03.956 --> 00:34:06.216 A:middle
基于机械硬盘的文件系统

00:34:07.056 --> 00:34:07.776 A:middle
我们还在提升性能

00:34:07.776 --> 00:34:11.556 A:middle
如果你想

00:34:11.606 --> 00:34:14.826 A:middle
将引导宗卷转换成 APFS

00:34:14.826 --> 00:34:15.856 A:middle
单纯转换格式

00:34:15.856 --> 00:34:16.366 A:middle
是不够的

00:34:16.656 --> 00:34:17.676 A:middle
你必须要使用

00:34:17.676 --> 00:34:18.156 A:middle
安装器转换

00:34:18.346 --> 00:34:24.076 A:middle
所以  APFS 即将登陆 macOS

00:34:24.166 --> 00:34:25.025 A:middle
它终于到来了

00:34:25.646 --> 00:34:27.406 A:middle
我们建议你使用

00:34:27.406 --> 00:34:27.826 A:middle
这种文件系统

00:34:28.815 --> 00:34:30.306 A:middle
它支持 Fusion Drive

00:34:30.306 --> 00:34:32.136 A:middle
它将支持本地

00:34:32.136 --> 00:34:32.706 A:middle
加密

00:34:33.016 --> 00:34:34.536 A:middle
空间共享是一项很棒的

00:34:34.536 --> 00:34:34.896 A:middle
特性

00:34:35.956 --> 00:34:37.315 A:middle
它还具备复制和

00:34:37.446 --> 00:34:39.376 A:middle
快照功能 可以让你的

00:34:39.376 --> 00:34:40.966 A:middle
存储更为高效

00:34:41.005 --> 00:34:41.396 A:middle
更为快速

00:34:42.096 --> 00:34:44.146 A:middle
请测试你的 App

00:34:44.146 --> 00:34:45.886 A:middle
正如你们刚才注意的

00:34:45.886 --> 00:34:47.485 A:middle
HFS 和 APFS 有很多

00:34:47.485 --> 00:34:48.666 A:middle
重要的区别

00:34:48.826 --> 00:34:49.956 A:middle
我们希望你的 App

00:34:49.956 --> 00:34:51.255 A:middle
取得成功 令人惊艳

00:34:51.996 --> 00:34:53.966 A:middle
请一定尝试一下 并反馈

00:34:53.966 --> 00:34:55.196 A:middle
所遇到的 bug

00:34:56.596 --> 00:34:57.746 A:middle
欲知更多信息

00:34:57.746 --> 00:34:59.916 A:middle
请访问这个 URL

00:34:59.916 --> 00:35:01.136 A:middle
谢谢
