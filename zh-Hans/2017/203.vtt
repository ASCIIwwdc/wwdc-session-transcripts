WEBVTT

00:00:07.516 --> 00:00:16.500 A:middle
[ 欢呼 ]

00:00:23.516 --> 00:00:26.126 A:middle
[ 掌声 ]

00:00:26.626 --> 00:00:27.116 A:middle
&gt;&gt; 上午好

00:00:31.036 --> 00:00:32.375 A:middle
我是 Bruce Nilo

00:00:32.375 --> 00:00:33.326 A:middle
我是 UIKit 的

00:00:33.326 --> 00:00:34.676 A:middle
一名工程经理

00:00:35.936 --> 00:00:36.906 A:middle
今天我们将讨论

00:00:36.906 --> 00:00:38.676 A:middle
一项新的特性

00:00:38.676 --> 00:00:39.696 A:middle
你可能已经听说过

00:00:39.696 --> 00:00:41.226 A:middle
它将被引入到 iOS 11中

00:00:42.256 --> 00:00:43.886 A:middle
这是四场专题会议中的第一场

00:00:44.006 --> 00:00:45.806 A:middle
在这四场会议期间

00:00:45.806 --> 00:00:47.406 A:middle
我们将专门探索

00:00:47.406 --> 00:00:49.516 A:middle
新的拖放 API 的

00:00:49.516 --> 00:00:51.236 A:middle
广度和深度

00:00:51.786 --> 00:00:53.296 A:middle
我们会向你展示

00:00:53.296 --> 00:00:56.586 A:middle
用这些 API 将拖放

00:00:56.586 --> 00:00:58.926 A:middle
嵌入到你的 App 中非常简单

00:00:58.926 --> 00:01:01.926 A:middle
你的用户也会

00:00:58.926 --> 00:01:01.926 A:middle
你的用户也会

00:01:01.926 --> 00:01:02.416 A:middle
爱上这项功能

00:01:04.226 --> 00:01:05.876 A:middle
我们首先会谈到

00:01:06.066 --> 00:01:08.666 A:middle
拖放背后的

00:01:08.996 --> 00:01:10.176 A:middle
目标和概念

00:01:11.046 --> 00:01:13.366 A:middle
我们还会深入下去

00:01:13.366 --> 00:01:15.036 A:middle
谈谈将拖放加入到

00:01:15.036 --> 00:01:18.056 A:middle
你的 App 中所需要的

00:01:18.056 --> 00:01:19.246 A:middle
核心 API

00:01:19.356 --> 00:01:20.556 A:middle
之后我们会有

00:01:20.556 --> 00:01:21.906 A:middle
一个实例演示

00:01:21.906 --> 00:01:23.366 A:middle
看一下这些 API 有多么

00:01:23.366 --> 00:01:23.906 A:middle
简单易用

00:01:24.566 --> 00:01:25.946 A:middle
最后我们会提出一些建议

00:01:25.946 --> 00:01:28.026 A:middle
提示你如何

00:01:28.026 --> 00:01:30.006 A:middle
快速使用这项出色的

00:01:30.006 --> 00:01:31.066 A:middle
新特性

00:01:34.196 --> 00:01:35.806 A:middle
那什么是拖放呢

00:01:37.016 --> 00:01:38.366 A:middle
我想我们都知道

00:01:38.366 --> 00:01:40.026 A:middle
就是以图形方式把数据

00:01:40.356 --> 00:01:43.546 A:middle
从一个应用程序移动到另一个

00:01:43.546 --> 00:01:45.146 A:middle
应用程序 或者在应用程序内部

00:01:45.146 --> 00:01:45.896 A:middle
移动的操作

00:01:49.516 --> 00:01:51.426 A:middle
当我们开始设计拖放

00:01:51.426 --> 00:01:53.156 A:middle
并将其引入 iOS 时

00:01:53.156 --> 00:01:54.346 A:middle
我们想实现这些目标

00:01:55.226 --> 00:01:57.426 A:middle
我们希望它快速并能

00:01:57.426 --> 00:01:58.236 A:middle
迅速响应

00:01:59.086 --> 00:02:00.266 A:middle
我们尤其不希望

00:01:59.086 --> 00:02:00.266 A:middle
我们尤其不希望

00:02:00.266 --> 00:02:01.876 A:middle
移动或拷贝不需要的

00:02:01.876 --> 00:02:02.426 A:middle
数据

00:02:02.426 --> 00:02:04.146 A:middle
因此我们充分利用了

00:02:04.146 --> 00:02:05.626 A:middle
iOS 11 中新文件系统

00:02:05.626 --> 00:02:08.326 A:middle
的功能 设计了自己的

00:02:08.326 --> 00:02:10.506 A:middle
API  我们使这些 API

00:02:10.506 --> 00:02:12.076 A:middle
只有在请求数据时

00:02:12.076 --> 00:02:13.756 A:middle
才会移动数据

00:02:13.756 --> 00:02:16.426 A:middle
此外在这样的设计中

00:02:16.426 --> 00:02:17.886 A:middle
数据以异步方式

00:02:17.886 --> 00:02:19.816 A:middle
传送到你的应用程序中

00:02:19.816 --> 00:02:21.496 A:middle
这样你的 App 就不会阻止 run loop

00:02:21.496 --> 00:02:23.156 A:middle
不会阻止用户做他们

00:02:23.156 --> 00:02:25.016 A:middle
想做的操作

00:02:25.616 --> 00:02:27.136 A:middle
我们还希望确保拖放的

00:02:27.136 --> 00:02:28.856 A:middle
安全性 要高于

00:02:28.856 --> 00:02:30.116 A:middle
粘贴板

00:02:30.686 --> 00:02:32.456 A:middle
尤其要保证数据只能

00:02:32.456 --> 00:02:34.216 A:middle
对目的应用程序

00:02:34.216 --> 00:02:36.816 A:middle
也就是用户希望

00:02:36.816 --> 00:02:38.376 A:middle
放置数据的应用程序

00:02:38.376 --> 00:02:38.756 A:middle
可见

00:02:39.386 --> 00:02:40.736 A:middle
但这还不够

00:02:40.976 --> 00:02:41.936 A:middle
我们希望源应用程序

00:02:41.936 --> 00:02:44.136 A:middle
有能力将

00:02:44.136 --> 00:02:46.326 A:middle
获取其数据的权限

00:02:46.656 --> 00:02:50.506 A:middle
限制在 App 本身或者

00:02:50.506 --> 00:02:52.046 A:middle
同一团队开发的其他 App 之间

00:02:52.706 --> 00:02:54.886 A:middle
当然也向系统中所有其他 App

00:02:54.886 --> 00:02:55.456 A:middle
开放

00:02:56.086 --> 00:02:58.936 A:middle
在发布 GM 版本时我们也会

00:02:58.936 --> 00:03:01.036 A:middle
支持企业用户的

00:02:58.936 --> 00:03:01.036 A:middle
支持企业用户的

00:03:01.096 --> 00:03:02.966 A:middle
管理配置

00:03:05.196 --> 00:03:08.466 A:middle
最后最重要的就是

00:03:08.466 --> 00:03:10.166 A:middle
需要为用户提供

00:03:10.166 --> 00:03:11.656 A:middle
Multi-Touch 的体验

00:03:12.436 --> 00:03:13.686 A:middle
为做到这一点很明显

00:03:13.686 --> 00:03:14.906 A:middle
我们需要在很多

00:03:14.906 --> 00:03:16.736 A:middle
重要方面对拖放提出

00:03:16.736 --> 00:03:17.286 A:middle
新的设想

00:03:18.036 --> 00:03:20.196 A:middle
那么来看一下

00:03:20.196 --> 00:03:22.126 A:middle
我们设想中这一体验的

00:03:22.126 --> 00:03:22.616 A:middle
几个方面

00:03:23.746 --> 00:03:25.216 A:middle
在播放视频之前

00:03:25.216 --> 00:03:26.626 A:middle
我先介绍下背景

00:03:26.706 --> 00:03:28.456 A:middle
我这几天拍了几张

00:03:28.456 --> 00:03:29.796 A:middle
纽约帝国大厦的照片

00:03:29.796 --> 00:03:31.576 A:middle
下面的视频中你会

00:03:31.576 --> 00:03:32.986 A:middle
看到我用几个

00:03:32.986 --> 00:03:35.106 A:middle
不同的手指来完成一封邮件

00:03:35.106 --> 00:03:36.226 A:middle
发给朋友们

00:03:37.356 --> 00:03:39.186 A:middle
我们从 Spotlight 开始

00:03:39.186 --> 00:03:40.756 A:middle
这里我们先拖拽一个链接

00:03:40.756 --> 00:03:43.146 A:middle
向上滑出 Dock

00:03:43.916 --> 00:03:45.786 A:middle
悬停在 Safari 图标上

00:03:45.786 --> 00:03:47.526 A:middle
启动 Safari 把链接放在

00:03:47.526 --> 00:03:49.416 A:middle
+ 按钮上打开一个

00:03:49.416 --> 00:03:50.516 A:middle
标签页

00:03:51.266 --> 00:03:52.776 A:middle
然后选择一些文本

00:03:52.776 --> 00:03:55.716 A:middle
长按开始移动

00:03:55.716 --> 00:03:57.206 A:middle
不过发现那并不是我

00:03:57.206 --> 00:03:59.106 A:middle
想要的文本

00:03:59.686 --> 00:04:01.486 A:middle
我可以轻松取消拖动

00:03:59.686 --> 00:04:01.486 A:middle
我可以轻松取消拖动

00:04:01.486 --> 00:04:03.146 A:middle
然后选择我

00:04:03.146 --> 00:04:03.516 A:middle
想要的文本

00:04:03.516 --> 00:04:05.836 A:middle
手势仍然是长按

00:04:05.836 --> 00:04:07.766 A:middle
文本会抬起

00:04:07.766 --> 00:04:10.036 A:middle
接着是移动这时

00:04:10.066 --> 00:04:11.026 A:middle
我可以和系统的其他部分

00:04:11.026 --> 00:04:11.856 A:middle
进行交互

00:04:11.946 --> 00:04:13.936 A:middle
我可以打开 Split View  这样就能

00:04:13.936 --> 00:04:15.456 A:middle
更好地看到我需要的照片

00:04:15.456 --> 00:04:17.966 A:middle
现在我可以选择

00:04:18.266 --> 00:04:19.586 A:middle
多张帝国大厦的

00:04:19.586 --> 00:04:20.486 A:middle
照片

00:04:20.736 --> 00:04:21.935 A:middle
你会注意到我还在

00:04:21.935 --> 00:04:23.556 A:middle
用另一只手拖拽着

00:04:23.556 --> 00:04:26.286 A:middle
文本而用右手

00:04:26.286 --> 00:04:26.556 A:middle
添加图像

00:04:26.556 --> 00:04:28.176 A:middle
我将选择的照片

00:04:28.176 --> 00:04:29.796 A:middle
交给左手

00:04:29.796 --> 00:04:31.596 A:middle
以便将邮件划到

00:04:32.146 --> 00:04:34.656 A:middle
右半屏

00:04:34.656 --> 00:04:36.296 A:middle
再把照片交给右手

00:04:36.296 --> 00:04:37.766 A:middle
这样就可以把它们

00:04:37.766 --> 00:04:39.326 A:middle
放置到邮箱的编写

00:04:39.326 --> 00:04:39.586 A:middle
区域

00:04:40.516 --> 00:04:46.306 A:middle
[ 掌声 ]

00:04:46.806 --> 00:04:47.936 A:middle
这就是我们所说的

00:04:48.036 --> 00:04:49.586 A:middle
优秀的 Multi-Touch 体验

00:04:49.586 --> 00:04:50.686 A:middle
我们看到了什么

00:04:50.686 --> 00:04:52.516 A:middle
交互界面是即时呈现的

00:04:52.936 --> 00:04:55.036 A:middle
它深度融合进了

00:04:55.036 --> 00:04:55.426 A:middle
iOS 之中

00:04:55.646 --> 00:04:57.276 A:middle
你可以从 Spotlight 中拖拽

00:04:57.526 --> 00:04:58.886 A:middle
可以划出 Dock

00:04:59.056 --> 00:05:00.486 A:middle
实际上系统 UI

00:04:59.056 --> 00:05:00.486 A:middle
实际上系统 UI

00:05:00.486 --> 00:05:02.266 A:middle
是基于拖放

00:05:02.266 --> 00:05:02.816 A:middle
实现的

00:05:03.286 --> 00:05:05.176 A:middle
视觉反馈优秀

00:05:05.176 --> 00:05:06.766 A:middle
动画效果出众

00:05:06.766 --> 00:05:08.566 A:middle
你可以在控件上悬停

00:05:08.566 --> 00:05:09.356 A:middle
进行导航

00:05:09.586 --> 00:05:11.536 A:middle
你可以添加项目到已有的

00:05:11.536 --> 00:05:12.406 A:middle
拖拽会话

00:05:12.676 --> 00:05:14.966 A:middle
你可以在不同手指

00:05:14.966 --> 00:05:16.206 A:middle
以及两手之间转移拖拽

00:05:16.206 --> 00:05:17.946 A:middle
甚至可以同时开始

00:05:17.946 --> 00:05:20.566 A:middle
多个拖拽会话

00:05:21.736 --> 00:05:24.456 A:middle
在讨论其中的一些

00:05:24.456 --> 00:05:26.896 A:middle
概念之前我想先说说

00:05:26.896 --> 00:05:28.616 A:middle
iPhone 上的拖放

00:05:29.416 --> 00:05:31.106 A:middle
起初我们将拖放预想为

00:05:31.106 --> 00:05:32.956 A:middle
iPad 的生产效率

00:05:33.006 --> 00:05:33.366 A:middle
特性

00:05:33.966 --> 00:05:36.106 A:middle
但事实上所有这些 API

00:05:36.176 --> 00:05:37.866 A:middle
在手机上也是可用的

00:05:38.046 --> 00:05:39.856 A:middle
但有一项限制

00:05:39.856 --> 00:05:41.486 A:middle
就是在 iPhone 上

00:05:41.486 --> 00:05:45.846 A:middle
我们只允许拖拽在同一个

00:05:45.846 --> 00:05:46.916 A:middle
应用程序中执行

00:05:48.516 --> 00:05:51.506 A:middle
那我们来看看其中的

00:05:51.506 --> 00:05:52.956 A:middle
一些关键概念

00:05:53.186 --> 00:05:54.236 A:middle
这些概念将提供良好基础

00:05:54.236 --> 00:05:56.636 A:middle
帮助理解

00:05:56.636 --> 00:05:57.666 A:middle
之后会讲到的 API

00:06:04.236 --> 00:06:05.696 A:middle
我们先来谈谈

00:06:05.696 --> 00:06:07.356 A:middle
拖拽会话的各个阶段

00:06:08.006 --> 00:06:09.786 A:middle
我们将一个拖拽会话

00:06:09.786 --> 00:06:12.076 A:middle
分解成四个阶段

00:06:12.076 --> 00:06:13.396 A:middle
这其中源应用程序

00:06:13.396 --> 00:06:15.086 A:middle
和目的应用程序

00:06:15.086 --> 00:06:15.866 A:middle
都会参与

00:06:16.416 --> 00:06:17.946 A:middle
整个过程从内容抬起开始

00:06:18.386 --> 00:06:19.406 A:middle
抬起 就是

00:06:19.406 --> 00:06:21.256 A:middle
长按以使视图

00:06:21.256 --> 00:06:22.296 A:middle
离开屏幕的过程

00:06:22.506 --> 00:06:24.026 A:middle
然后当用户

00:06:24.026 --> 00:06:25.826 A:middle
开始拖拽时就进入了

00:06:25.826 --> 00:06:26.966 A:middle
拖拽阶段

00:06:27.386 --> 00:06:28.826 A:middle
这一阶段你可以

00:06:28.826 --> 00:06:30.496 A:middle
在拖拽的同时

00:06:30.496 --> 00:06:31.686 A:middle
更新所拖拽内容

00:06:31.686 --> 00:06:32.316 A:middle
外观的预览

00:06:32.316 --> 00:06:33.836 A:middle
你可以点击以添加内容

00:06:33.836 --> 00:06:35.256 A:middle
可以悬停以进行导航

00:06:36.346 --> 00:06:37.356 A:middle
当用户抬起手指时

00:06:37.356 --> 00:06:38.716 A:middle
会有两种

00:06:38.716 --> 00:06:38.906 A:middle
可能的情况

00:06:39.056 --> 00:06:42.926 A:middle
或者是拖拽取消

00:06:42.926 --> 00:06:44.616 A:middle
或者是用户想在

00:06:44.616 --> 00:06:46.756 A:middle
抬起手指的位置

00:06:46.756 --> 00:06:47.306 A:middle
放置内容

00:06:47.396 --> 00:06:49.616 A:middle
我们提供很棒的针对性 API

00:06:49.616 --> 00:06:50.756 A:middle
让放置动画

00:06:50.756 --> 00:06:52.426 A:middle
效果不俗

00:06:53.696 --> 00:06:55.096 A:middle
最后我们进入数据转移阶段

00:06:55.096 --> 00:06:56.746 A:middle
在这一阶段

00:06:56.746 --> 00:06:57.956 A:middle
目的应用程序

00:06:57.956 --> 00:06:59.706 A:middle
会向源应用程序

00:06:59.706 --> 00:07:00.586 A:middle
请求数据

00:06:59.706 --> 00:07:00.586 A:middle
请求数据

00:07:01.146 --> 00:07:05.286 A:middle
在讨论拖拽 API 的

00:07:05.286 --> 00:07:07.006 A:middle
构成之前

00:07:07.006 --> 00:07:08.966 A:middle
我想告诉大家

00:07:08.966 --> 00:07:10.626 A:middle
这都是围绕着交互

00:07:10.626 --> 00:07:12.356 A:middle
这一概念构建的

00:07:12.356 --> 00:07:14.366 A:middle
交互是一个非常

00:07:14.366 --> 00:07:15.356 A:middle
简单的概念

00:07:15.646 --> 00:07:17.746 A:middle
基本上就是接收输入

00:07:17.746 --> 00:07:19.626 A:middle
并产生某种

00:07:19.666 --> 00:07:20.086 A:middle
效果

00:07:20.876 --> 00:07:22.796 A:middle
拖放 API 围绕这一概念构建

00:07:22.796 --> 00:07:24.466 A:middle
有以下几个

00:07:24.466 --> 00:07:25.086 A:middle
原因

00:07:25.276 --> 00:07:27.136 A:middle
第一它让我们在系统中

00:07:27.136 --> 00:07:28.926 A:middle
为拖放提供

00:07:28.926 --> 00:07:30.706 A:middle
一致的观感

00:07:31.346 --> 00:07:33.096 A:middle
但最重要的是

00:07:33.096 --> 00:07:35.676 A:middle
能让你可以非常轻松地

00:07:36.476 --> 00:07:38.016 A:middle
把拖拽加入到你的 App 中

00:07:38.016 --> 00:07:39.826 A:middle
而不需要重新整理代码

00:07:39.826 --> 00:07:41.526 A:middle
或视图层次体系

00:07:41.996 --> 00:07:43.256 A:middle
我来介绍下拖拽

00:07:43.256 --> 00:07:43.936 A:middle
交互

00:07:44.556 --> 00:07:46.116 A:middle
它属于一个视图

00:07:46.116 --> 00:07:47.516 A:middle
可能你在之前演讲中

00:07:47.516 --> 00:07:49.776 A:middle
听说过它很像一个

00:07:49.776 --> 00:07:51.156 A:middle
手势识别器

00:07:51.156 --> 00:07:52.596 A:middle
使用过的人会发现

00:07:52.596 --> 00:07:54.196 A:middle
模式是一样的

00:07:54.596 --> 00:07:55.956 A:middle
你用委托（delegate）创建一个对象

00:07:55.956 --> 00:07:57.746 A:middle
通过这个委托

00:07:57.746 --> 00:07:59.826 A:middle
你可以与系统进行

00:07:59.826 --> 00:08:00.346 A:middle
交互

00:07:59.826 --> 00:08:00.346 A:middle
交互

00:08:01.026 --> 00:08:03.166 A:middle
比如可以让委托

00:08:03.166 --> 00:08:05.426 A:middle
在抬起动画开始前

00:08:05.536 --> 00:08:07.266 A:middle
返回拖拽的

00:08:07.316 --> 00:08:07.896 A:middle
项目

00:08:09.136 --> 00:08:11.326 A:middle
这就是针对拖拽交互委托

00:08:11.566 --> 00:08:13.466 A:middle
所必需的方法

00:08:14.506 --> 00:08:16.606 A:middle
委托可以没有

00:08:16.606 --> 00:08:18.516 A:middle
返回项 这种情况下

00:08:18.516 --> 00:08:20.246 A:middle
手势无效

00:08:20.246 --> 00:08:22.046 A:middle
点按会按照

00:08:22.046 --> 00:08:22.416 A:middle
正常情况处理

00:08:22.996 --> 00:08:25.436 A:middle
那什么是拖拽项呢

00:08:25.986 --> 00:08:28.166 A:middle
拖拽项正是

00:08:28.166 --> 00:08:29.336 A:middle
其中的关键所在

00:08:29.556 --> 00:08:31.426 A:middle
它是一个模型对象

00:08:31.426 --> 00:08:33.385 A:middle
与拖拽交互所属的视图

00:08:33.385 --> 00:08:35.736 A:middle
相关联

00:08:40.616 --> 00:08:43.206 A:middle
在拖放功能中 拖拽项

00:08:43.206 --> 00:08:45.566 A:middle
既包括其在屏幕上

00:08:45.566 --> 00:08:46.846 A:middle
移动时的外观

00:08:46.846 --> 00:08:49.006 A:middle
也就是预览

00:08:49.256 --> 00:08:50.756 A:middle
也包括当目的应用程序

00:08:50.756 --> 00:08:52.936 A:middle
请求数据时 源应用程序

00:08:52.936 --> 00:08:55.016 A:middle
向其传输数据的

00:08:55.016 --> 00:08:55.946 A:middle
承诺（promise）

00:08:57.586 --> 00:08:59.536 A:middle
我们称这些承诺为

00:08:59.536 --> 00:09:00.526 A:middle
Item Provider（项目提供器）在 iOS11 中

00:08:59.536 --> 00:09:00.526 A:middle
Item Provider（项目提供器）在 iOS11 中

00:09:00.526 --> 00:09:02.806 A:middle
它们由 NSItemProvider 中的

00:09:02.806 --> 00:09:05.046 A:middle
一些新增内容执行

00:09:05.626 --> 00:09:09.346 A:middle
那么 如何实现放置

00:09:10.816 --> 00:09:11.606 A:middle
很简单

00:09:12.836 --> 00:09:14.236 A:middle
第一种方法是

00:09:14.236 --> 00:09:17.216 A:middle
利用 UIResponder 中增加的

00:09:17.216 --> 00:09:19.156 A:middle
一项新属性

00:09:19.156 --> 00:09:20.616 A:middle
叫做 Paste Configuration（粘贴配置）

00:09:21.526 --> 00:09:23.126 A:middle
什么是粘贴配置呢

00:09:23.706 --> 00:09:25.126 A:middle
大致来说它是一种声明式的

00:09:25.126 --> 00:09:27.806 A:middle
方法来指定 UIResponder

00:09:27.806 --> 00:09:29.606 A:middle
可以接收为

00:09:29.606 --> 00:09:31.536 A:middle
粘贴或置放的类

00:09:32.426 --> 00:09:33.566 A:middle
要利用粘贴配置

00:09:33.566 --> 00:09:34.766 A:middle
你需要

00:09:34.766 --> 00:09:36.056 A:middle
实现一种新方法叫做

00:09:36.126 --> 00:09:37.466 A:middle
paste itemProviders

00:09:37.566 --> 00:09:39.366 A:middle
实现后就可以

00:09:39.366 --> 00:09:41.426 A:middle
无需额外配置 使用

00:09:41.426 --> 00:09:43.516 A:middle
粘贴和放置

00:09:43.986 --> 00:09:47.666 A:middle
但是对于更复杂的

00:09:47.666 --> 00:09:48.996 A:middle
放置交互你需要

00:09:48.996 --> 00:09:49.926 A:middle
在视图中添加一个

00:09:49.926 --> 00:09:51.176 A:middle
放置交互

00:09:51.856 --> 00:09:53.506 A:middle
用类似添加拖拽交互

00:09:53.506 --> 00:09:54.616 A:middle
的方法就可以

00:09:54.616 --> 00:09:55.316 A:middle
添加放置交互

00:09:56.086 --> 00:09:57.746 A:middle
这样操作之后

00:09:57.746 --> 00:09:59.586 A:middle
当拖拽到包含这种交互

00:09:59.586 --> 00:10:00.956 A:middle
的视图上时我们会

00:09:59.586 --> 00:10:00.956 A:middle
的视图上时我们会

00:10:00.956 --> 00:10:02.866 A:middle
对委托发起查询让它

00:10:02.866 --> 00:10:03.986 A:middle
告诉我们是否对

00:10:03.986 --> 00:10:05.296 A:middle
拖拽到它上面的

00:10:05.296 --> 00:10:06.676 A:middle
项目感兴趣

00:10:06.676 --> 00:10:09.136 A:middle
委托会做出回应

00:10:09.136 --> 00:10:11.656 A:middle
我们称之为意图

00:10:11.656 --> 00:10:12.126 A:middle
或者建议

00:10:13.476 --> 00:10:16.016 A:middle
抬起手指时委托可能说

00:10:16.016 --> 00:10:17.436 A:middle
不感兴趣

00:10:17.436 --> 00:10:18.986 A:middle
这时拖拽会取消

00:10:18.986 --> 00:10:20.916 A:middle
所有的预览

00:10:20.916 --> 00:10:22.166 A:middle
将通过动画 回到他们

00:10:22.166 --> 00:10:23.656 A:middle
原来的位置或者从屏幕上

00:10:23.656 --> 00:10:25.286 A:middle
消失以表示

00:10:25.286 --> 00:10:25.796 A:middle
拖拽取消

00:10:26.526 --> 00:10:27.816 A:middle
然而更有意思的是

00:10:27.816 --> 00:10:30.106 A:middle
当委托说

00:10:30.106 --> 00:10:31.656 A:middle
是的我对这些项目

00:10:31.656 --> 00:10:32.276 A:middle
有兴趣 的时候

00:10:32.536 --> 00:10:33.726 A:middle
这时系统会

00:10:33.726 --> 00:10:36.506 A:middle
下令执行放置

00:10:37.086 --> 00:10:38.736 A:middle
就在这个回调函数的

00:10:38.736 --> 00:10:40.826 A:middle
作用域内

00:10:40.826 --> 00:10:41.886 A:middle
也只有在这个作用域内

00:10:41.886 --> 00:10:44.226 A:middle
委托才能

00:10:44.226 --> 00:10:46.996 A:middle
请求它感兴趣的

00:10:47.076 --> 00:10:48.736 A:middle
项目

00:10:48.736 --> 00:10:50.956 A:middle
更确切地说是

00:10:50.956 --> 00:10:52.886 A:middle
项目的 Representation（描述）

00:10:53.946 --> 00:10:55.556 A:middle
一旦发出请求

00:10:55.556 --> 00:10:56.586 A:middle
此时源应用程序

00:10:56.586 --> 00:10:58.106 A:middle
就会履行承诺

00:10:58.106 --> 00:10:59.906 A:middle
并且系统会

00:10:59.906 --> 00:11:01.686 A:middle
以异步方式将数据

00:10:59.906 --> 00:11:01.686 A:middle
以异步方式将数据

00:11:01.686 --> 00:11:03.766 A:middle
传输回目的应用程序

00:11:06.106 --> 00:11:08.766 A:middle
好的要探讨的

00:11:08.766 --> 00:11:09.476 A:middle
还有很多

00:11:09.596 --> 00:11:11.096 A:middle
比如从目的应用程序或者

00:11:11.096 --> 00:11:13.136 A:middle
源应用程序的角度看

00:11:13.136 --> 00:11:15.186 A:middle
拖拽会话的的生命周期

00:11:15.186 --> 00:11:16.026 A:middle
是什么样的

00:11:16.926 --> 00:11:18.046 A:middle
怎么能让放置的过渡效果

00:11:18.046 --> 00:11:19.476 A:middle
看上去很棒

00:11:20.466 --> 00:11:21.516 A:middle
该如何处理

00:11:21.516 --> 00:11:23.106 A:middle
数据传输用时过长

00:11:23.106 --> 00:11:23.786 A:middle
的问题

00:11:24.866 --> 00:11:26.136 A:middle
回答部分问题之前

00:11:26.136 --> 00:11:27.296 A:middle
看一下这张图会

00:11:27.296 --> 00:11:28.656 A:middle
有所帮助因为

00:11:28.656 --> 00:11:29.756 A:middle
它会以鸟瞰图的方式

00:11:29.756 --> 00:11:31.636 A:middle
让你看到我们的 API

00:11:31.786 --> 00:11:32.536 A:middle
是如何构建的

00:11:32.896 --> 00:11:34.116 A:middle
左边蓝色部分

00:11:34.116 --> 00:11:35.806 A:middle
可以看到一些对象和类

00:11:35.806 --> 00:11:37.496 A:middle
源应用程序

00:11:37.496 --> 00:11:39.596 A:middle
将使用它们实现

00:11:39.596 --> 00:11:40.766 A:middle
拖拽

00:11:41.236 --> 00:11:42.516 A:middle
右边部分是

00:11:42.516 --> 00:11:44.836 A:middle
目的应用程序用来

00:11:44.836 --> 00:11:46.196 A:middle
实现放置的对象和类

00:11:46.696 --> 00:11:48.236 A:middle
中间部分的

00:11:48.236 --> 00:11:50.376 A:middle
对象和类

00:11:50.376 --> 00:11:52.146 A:middle
源应用和目的应用都会

00:11:52.366 --> 00:11:55.876 A:middle
用到以完成拖放

00:11:55.876 --> 00:11:56.836 A:middle
契约

00:11:57.396 --> 00:11:59.476 A:middle
现在要探讨

00:11:59.476 --> 00:12:01.106 A:middle
这些基本类更多的细节

00:11:59.476 --> 00:12:01.106 A:middle
这些基本类更多的细节

00:12:01.106 --> 00:12:03.136 A:middle
我将请上我的同事

00:12:03.136 --> 00:12:04.806 A:middle
Kurt Revis

00:12:04.806 --> 00:12:05.296 A:middle
上台

00:12:07.516 --> 00:12:11.906 A:middle
[ 掌声 ]

00:12:12.406 --> 00:12:13.106 A:middle
&gt;&gt; 谢谢  Bruce

00:12:14.076 --> 00:12:15.256 A:middle
刚才  Bruce 介绍了拖放的

00:12:15.256 --> 00:12:16.716 A:middle
整体情况

00:12:16.766 --> 00:12:18.276 A:middle
我会向大家介绍更多

00:12:18.276 --> 00:12:19.886 A:middle
使用拖放API

00:12:19.886 --> 00:12:20.206 A:middle
的方法

00:12:21.456 --> 00:12:22.636 A:middle
我会谈及三个方面

00:12:22.636 --> 00:12:24.366 A:middle
我会介绍进行拖放时

00:12:24.366 --> 00:12:25.616 A:middle
事件的时间线

00:12:25.616 --> 00:12:27.456 A:middle
我会介绍

00:12:27.456 --> 00:12:29.376 A:middle
API 中一些最核心的方法

00:12:29.376 --> 00:12:30.746 A:middle
你需要执行这些方法

00:12:30.746 --> 00:12:31.946 A:middle
才能在你的 App 中实现拖放

00:12:32.166 --> 00:12:33.496 A:middle
最后 我会

00:12:33.496 --> 00:12:34.966 A:middle
介绍完整的 API

00:12:35.906 --> 00:12:38.156 A:middle
拖放看上去十分简单

00:12:38.156 --> 00:12:38.806 A:middle
对吗

00:12:38.806 --> 00:12:40.036 A:middle
屏幕上有个对象

00:12:40.396 --> 00:12:41.326 A:middle
用户点按它

00:12:41.326 --> 00:12:42.526 A:middle
它会抬起

00:12:43.166 --> 00:12:45.106 A:middle
然后用户在 App 内部移动它

00:12:45.106 --> 00:12:46.346 A:middle
也可能移动到

00:12:46.346 --> 00:12:46.726 A:middle
另外一个 App

00:12:47.556 --> 00:12:48.606 A:middle
最终用户松开

00:12:48.606 --> 00:12:49.076 A:middle
手指

00:12:49.246 --> 00:12:49.886 A:middle
按压停止

00:12:50.406 --> 00:12:51.666 A:middle
对象被放置到

00:12:51.666 --> 00:12:52.286 A:middle
新的位置

00:12:52.986 --> 00:12:54.016 A:middle
当然这背后的情况

00:12:54.016 --> 00:12:55.566 A:middle
更为复杂 那我们来说说

00:12:55.566 --> 00:12:57.036 A:middle
何时发生何事

00:12:58.626 --> 00:13:00.256 A:middle
一切都从点按

00:12:58.626 --> 00:13:00.256 A:middle
一切都从点按

00:13:00.256 --> 00:13:02.376 A:middle
含有拖拽交互的视图

00:13:02.376 --> 00:13:03.046 A:middle
开始

00:13:04.016 --> 00:13:05.366 A:middle
UIKit 会创建

00:13:05.366 --> 00:13:07.236 A:middle
抬起的动画随后由于

00:13:07.236 --> 00:13:08.706 A:middle
点按动作持续 我们

00:13:08.706 --> 00:13:10.256 A:middle
会完整运行抬起的动画

00:13:10.256 --> 00:13:10.736 A:middle
直至动画结束

00:13:11.896 --> 00:13:13.676 A:middle
然后用户手指移动

00:13:13.676 --> 00:13:15.256 A:middle
达到一定距离时我们会真正

00:13:15.256 --> 00:13:15.966 A:middle
启动拖拽

00:13:16.696 --> 00:13:17.906 A:middle
该对象抬起呈现于

00:13:17.906 --> 00:13:19.306 A:middle
视图中其他内容之上以及

00:13:19.306 --> 00:13:22.396 A:middle
所有 App 之上用户可以

00:13:22.396 --> 00:13:23.666 A:middle
在屏幕上随意拖动

00:13:24.776 --> 00:13:25.926 A:middle
最后 在某个位置

00:13:25.926 --> 00:13:27.036 A:middle
用户会松开手指

00:13:27.296 --> 00:13:28.636 A:middle
我们的操作则取决于

00:13:28.636 --> 00:13:29.176 A:middle
这个位置

00:13:30.206 --> 00:13:32.236 A:middle
第一种可能是

00:13:32.236 --> 00:13:33.566 A:middle
下面的视图

00:13:33.566 --> 00:13:34.496 A:middle
没有兴趣接收

00:13:34.496 --> 00:13:34.796 A:middle
放置

00:13:35.216 --> 00:13:36.306 A:middle
此时我们会运行一小段

00:13:36.346 --> 00:13:37.456 A:middle
取消动画

00:13:38.716 --> 00:13:40.216 A:middle
退一步看可能

00:13:40.216 --> 00:13:42.316 A:middle
这个位置的视图

00:13:42.316 --> 00:13:43.366 A:middle
希望接收放置

00:13:44.016 --> 00:13:45.036 A:middle
那么就有更多的事情

00:13:45.036 --> 00:13:45.326 A:middle
要做

00:13:46.036 --> 00:13:48.236 A:middle
我们让放置交互的委托

00:13:48.236 --> 00:13:49.786 A:middle
执行放置

00:13:49.826 --> 00:13:51.586 A:middle
请求数据然后

00:13:51.636 --> 00:13:52.946 A:middle
有两件事会同步发生

00:13:53.906 --> 00:13:55.496 A:middle
我们会播放放置动画

00:13:55.556 --> 00:13:56.686 A:middle
让拖拽的内容动起来

00:13:56.686 --> 00:13:59.246 A:middle
到达最终位置并进行

00:13:59.246 --> 00:13:59.996 A:middle
数据传输

00:13:59.996 --> 00:14:02.876 A:middle
这两个框大小一样

00:13:59.996 --> 00:14:02.876 A:middle
这两个框大小一样

00:14:02.926 --> 00:14:04.336 A:middle
但实际上

00:14:04.336 --> 00:14:05.686 A:middle
数据传输是异步的

00:14:05.776 --> 00:14:07.166 A:middle
谁也不能提前预知

00:14:07.166 --> 00:14:08.156 A:middle
需要多久完成

00:14:09.056 --> 00:14:09.896 A:middle
可能会 [口误]

00:14:10.246 --> 00:14:11.656 A:middle
抱歉可能会

00:14:11.656 --> 00:14:12.136 A:middle
很快

00:14:12.336 --> 00:14:13.826 A:middle
实际上也许比放置动画

00:14:13.826 --> 00:14:14.756 A:middle
要快一些

00:14:15.726 --> 00:14:17.106 A:middle
也可能会需要

00:14:17.106 --> 00:14:18.396 A:middle
更长的时间比如

00:14:18.396 --> 00:14:22.016 A:middle
需要下载数据

00:14:22.086 --> 00:14:23.186 A:middle
现在大家看完了完整的

00:14:23.246 --> 00:14:23.756 A:middle
时间线

00:14:23.756 --> 00:14:24.536 A:middle
这就是所有可能

00:14:24.536 --> 00:14:24.966 A:middle
发生的情况

00:14:25.346 --> 00:14:26.756 A:middle
UIKit 负责运行

00:14:26.756 --> 00:14:29.146 A:middle
这个时间线但在三个特定

00:14:29.196 --> 00:14:31.126 A:middle
节点上需要你们的帮助

00:14:31.876 --> 00:14:33.136 A:middle
第一个就是拖拽

00:14:33.136 --> 00:14:33.586 A:middle
开始的时候

00:14:33.786 --> 00:14:35.146 A:middle
我们需要找到要拖拽

00:14:35.146 --> 00:14:35.626 A:middle
的项目

00:14:36.256 --> 00:14:37.546 A:middle
我们会调用

00:14:37.546 --> 00:14:39.646 A:middle
拖拽交互委托上必需的方法

00:14:39.646 --> 00:14:40.636 A:middle
也就是

00:14:41.656 --> 00:14:42.506 A:middle
dragInteraction

00:14:42.556 --> 00:14:44.116 A:middle
itemsForBeginning session

00:14:44.366 --> 00:14:45.996 A:middle
这会给我们返回一个包含

00:14:45.996 --> 00:14:46.316 A:middle
拖拽项的数组

00:14:47.216 --> 00:14:48.256 A:middle
我举个例子

00:14:48.706 --> 00:14:49.566 A:middle
我们只拖拽一个

00:14:49.566 --> 00:14:51.616 A:middle
字符串那么对象就是

00:14:51.616 --> 00:14:52.966 A:middle
Hello World 这个字符串

00:14:53.676 --> 00:14:55.176 A:middle
我把它放进

00:14:55.176 --> 00:14:56.046 A:middle
NSItemProvider

00:14:56.106 --> 00:14:58.036 A:middle
这是数据表达

00:14:58.066 --> 00:14:59.396 A:middle
数据传输层面的东西

00:15:00.256 --> 00:15:01.356 A:middle
现在注意我把它转换成

00:15:01.356 --> 00:15:02.216 A:middle
NSString

00:15:02.216 --> 00:15:03.666 A:middle
这是因为 NSItemProvider

00:15:03.666 --> 00:15:05.026 A:middle
只处理对象

00:15:05.166 --> 00:15:06.436 A:middle
不处理 Swift

00:15:06.436 --> 00:15:06.866 A:middle
结构体

00:15:08.436 --> 00:15:09.956 A:middle
接下来我创建一个拖拽项

00:15:10.066 --> 00:15:11.336 A:middle
这上升到了

00:15:11.336 --> 00:15:11.616 A:middle
拖放层面

00:15:12.326 --> 00:15:13.796 A:middle
我用项目提供器创建

00:15:13.796 --> 00:15:14.466 A:middle
UIDragItem

00:15:14.466 --> 00:15:15.976 A:middle
最后返回那一个项目

00:15:16.016 --> 00:15:17.246 A:middle
即可

00:15:18.336 --> 00:15:20.096 A:middle
下一项 API 的核心方法在

00:15:20.096 --> 00:15:20.776 A:middle
放置端

00:15:21.256 --> 00:15:22.996 A:middle
当你在屏幕上

00:15:22.996 --> 00:15:24.296 A:middle
拖拽对象时

00:15:24.676 --> 00:15:26.446 A:middle
UIKit 在每个点上都想知道

00:15:26.446 --> 00:15:27.916 A:middle
如果用户此时在此处

00:15:27.916 --> 00:15:29.236 A:middle
抬起手指

00:15:29.286 --> 00:15:29.656 A:middle
会发生什么

00:15:30.716 --> 00:15:32.266 A:middle
这是通过放置交互委托上

00:15:32.266 --> 00:15:33.656 A:middle
的这个方法

00:15:33.826 --> 00:15:34.766 A:middle
实现的

00:15:35.336 --> 00:15:36.216 A:middle
也就是 dropInteraction

00:15:36.696 --> 00:15:38.876 A:middle
sessionDidUpdate  这会返回

00:15:38.876 --> 00:15:39.826 A:middle
置放建议

00:15:40.386 --> 00:15:41.566 A:middle
当我们进入这个视图

00:15:41.566 --> 00:15:42.826 A:middle
并在当前视图内移动对象时

00:15:42.826 --> 00:15:44.326 A:middle
就会实现这个方法

00:15:44.786 --> 00:15:46.096 A:middle
每次你都可以返回

00:15:46.096 --> 00:15:46.696 A:middle
新的建议

00:15:47.816 --> 00:15:49.476 A:middle
通过 UIDropProposal 和

00:15:49.476 --> 00:15:51.596 A:middle
放置操作就可以做到

00:15:52.926 --> 00:15:54.286 A:middle
放置操作是一种

00:15:54.286 --> 00:15:54.516 A:middle
枚举

00:15:54.516 --> 00:15:55.896 A:middle
有四种可能的值

00:15:55.956 --> 00:15:57.086 A:middle
我会按照可能性

00:15:57.086 --> 00:15:58.916 A:middle
由大到小的顺序

00:15:58.916 --> 00:15:59.256 A:middle
来谈

00:16:00.016 --> 00:16:00.976 A:middle
首先是 .cancel

00:16:01.746 --> 00:16:02.636 A:middle
就是说当用户

00:16:02.636 --> 00:16:03.946 A:middle
抬起手指时

00:16:03.946 --> 00:16:04.846 A:middle
不接受拖拽

00:16:04.906 --> 00:16:05.956 A:middle
而是取消拖拽

00:16:07.356 --> 00:16:08.286 A:middle
第二是 .copy

00:16:08.666 --> 00:16:09.416 A:middle
这正好相反

00:16:09.546 --> 00:16:10.796 A:middle
这意味着 确实要得到

00:16:10.796 --> 00:16:10.986 A:middle
那份数据

00:16:11.136 --> 00:16:12.836 A:middle
希望接收该数据并把它

00:16:12.836 --> 00:16:14.106 A:middle
拷贝到用户放置的

00:16:14.106 --> 00:16:14.826 A:middle
视图中去

00:16:15.526 --> 00:16:17.126 A:middle
大多数情况下应该给出

00:16:17.126 --> 00:16:17.896 A:middle
上面两种建议

00:16:18.496 --> 00:16:20.256 A:middle
总体来说在 iOS 上拖放

00:16:20.256 --> 00:16:21.716 A:middle
会将数据从一处拷贝到

00:16:21.716 --> 00:16:21.986 A:middle
另一处

00:16:23.496 --> 00:16:24.396 A:middle
下一个是 .move

00:16:24.696 --> 00:16:26.196 A:middle
这很像拷贝

00:16:26.566 --> 00:16:27.846 A:middle
但却表示你希望

00:16:27.846 --> 00:16:29.356 A:middle
将数据从源应用程序

00:16:29.356 --> 00:16:30.656 A:middle
移动到目的应用程序

00:16:31.596 --> 00:16:32.846 A:middle
这更复杂一些

00:16:32.846 --> 00:16:34.316 A:middle
你应该知道 UIKit

00:16:34.526 --> 00:16:36.196 A:middle
无法使它看上去

00:16:36.246 --> 00:16:36.726 A:middle
像一次移动

00:16:36.856 --> 00:16:37.856 A:middle
我们给出数据的方式

00:16:37.856 --> 00:16:39.306 A:middle
和拷贝时完全一样

00:16:40.046 --> 00:16:41.776 A:middle
你的委托需要配合

00:16:42.146 --> 00:16:43.186 A:middle
才能让它看上去像

00:16:43.186 --> 00:16:43.456 A:middle
移动

00:16:44.546 --> 00:16:46.356 A:middle
所以这只有在同一款 App 内

00:16:46.356 --> 00:16:47.236 A:middle
才能进行

00:16:47.936 --> 00:16:49.506 A:middle
你的拖拽交互委托必须

00:16:49.506 --> 00:16:50.266 A:middle
同意才可以

00:16:50.676 --> 00:16:51.656 A:middle
有一个委托方法

00:16:51.656 --> 00:16:52.966 A:middle
询问委托是否同意

00:16:54.266 --> 00:16:55.796 A:middle
拖拽交互会

00:16:55.796 --> 00:16:57.356 A:middle
检查 UIDropSession 的

00:16:57.386 --> 00:16:59.106 A:middle
allowsMoveOperation 属性

00:16:59.436 --> 00:17:00.716 A:middle
如果值为真那么你就可以

00:16:59.436 --> 00:17:00.716 A:middle
如果值为真那么你就可以

00:17:00.816 --> 00:17:02.196 A:middle
建议移动操作

00:17:02.646 --> 00:17:05.736 A:middle
下一个是 .forbidden

00:17:06.026 --> 00:17:07.336 A:middle
这个很像 .cancel

00:17:07.336 --> 00:17:08.516 A:middle
但我们会在拖拽项上增加

00:17:08.516 --> 00:17:10.496 A:middle
一个标志

00:17:11.195 --> 00:17:12.685 A:middle
这是为了告诉用户

00:17:12.965 --> 00:17:14.286 A:middle
正常情况下你可以

00:17:14.286 --> 00:17:15.846 A:middle
在此放置 但在此情况下

00:17:15.846 --> 00:17:16.086 A:middle
不可以

00:17:17.036 --> 00:17:18.175 A:middle
例如如果我把一张图像

00:17:18.175 --> 00:17:19.836 A:middle
拖拽到文件夹上

00:17:19.836 --> 00:17:21.165 A:middle
正常情况下是可以的但如果

00:17:21.165 --> 00:17:23.236 A:middle
文件夹是只读的

00:17:23.236 --> 00:17:24.546 A:middle
就会用禁止标志

00:17:24.596 --> 00:17:25.665 A:middle
告诉用户现在不能执行

00:17:25.665 --> 00:17:26.366 A:middle
这个操作

00:17:27.076 --> 00:17:28.435 A:middle
这会让人觉得反感

00:17:28.435 --> 00:17:29.656 A:middle
所以不要经常使用

00:17:29.896 --> 00:17:33.026 A:middle
要谨慎使用

00:17:33.026 --> 00:17:35.316 A:middle
下面是第三个 API 核心操作

00:17:35.316 --> 00:17:36.796 A:middle
之前你已经提议了

00:17:36.796 --> 00:17:37.636 A:middle
一项操作

00:17:37.636 --> 00:17:39.136 A:middle
如果是拷贝或者移动的话

00:17:39.136 --> 00:17:40.606 A:middle
你需要执行这一操作

00:17:41.526 --> 00:17:43.136 A:middle
那么在放置

00:17:43.136 --> 00:17:44.386 A:middle
交互委托上你需要

00:17:44.386 --> 00:17:46.526 A:middle
实现 dropInteraction

00:17:47.146 --> 00:17:47.896 A:middle
performDrop

00:17:48.466 --> 00:17:49.776 A:middle
这里 就可以从会话中

00:17:49.776 --> 00:17:50.776 A:middle
加载数据

00:17:50.896 --> 00:17:52.106 A:middle
实际上也只有这里

00:17:52.106 --> 00:17:52.576 A:middle
可以加载数据

00:17:52.706 --> 00:17:55.046 A:middle
我来举两个例子

00:17:55.046 --> 00:17:56.236 A:middle
演示从会话中的项目

00:17:56.236 --> 00:17:56.616 A:middle
加载数据

00:17:57.576 --> 00:17:58.866 A:middle
第一个很简单

00:17:58.866 --> 00:18:00.046 A:middle
我们使用会话中一项

00:17:58.866 --> 00:18:00.046 A:middle
我们使用会话中一项

00:18:00.046 --> 00:18:02.176 A:middle
很便捷的方法叫做

00:18:02.176 --> 00:18:03.346 A:middle
session.loadObjects(ofClass)

00:18:03.346 --> 00:18:04.706 A:middle
这里我用的是 UIImage

00:18:05.586 --> 00:18:07.236 A:middle
我调用它并且提供了

00:18:07.236 --> 00:18:09.286 A:middle
一个闭包在那些对象

00:18:09.286 --> 00:18:11.136 A:middle
可用时可以

00:18:11.136 --> 00:18:11.606 A:middle
回调这个闭包

00:18:12.626 --> 00:18:14.406 A:middle
对象进入闭包时我可以对列表

00:18:14.406 --> 00:18:15.076 A:middle
进行迭代

00:18:15.266 --> 00:18:17.536 A:middle
我知道他们会是 UIImage 所以

00:18:17.536 --> 00:18:19.126 A:middle
这里进行强行转换

00:18:19.126 --> 00:18:19.416 A:middle
没有问题

00:18:19.416 --> 00:18:21.426 A:middle
然后就可以直接

00:18:21.426 --> 00:18:21.936 A:middle
更新 UI

00:18:22.236 --> 00:18:23.656 A:middle
这里我在 imageView 内

00:18:23.656 --> 00:18:24.706 A:middle
更换图像

00:18:25.646 --> 00:18:27.026 A:middle
这个便捷的方法会把我回调

00:18:27.026 --> 00:18:28.806 A:middle
到主队列

00:18:28.806 --> 00:18:30.046 A:middle
我直接就可以

00:18:30.046 --> 00:18:30.486 A:middle
更新 UI

00:18:32.026 --> 00:18:33.316 A:middle
下面是一个更复杂的例子

00:18:34.046 --> 00:18:35.166 A:middle
我将对会话中的多个

00:18:35.166 --> 00:18:37.266 A:middle
UI 拖拽项

00:18:37.266 --> 00:18:37.836 A:middle
进行迭代

00:18:37.836 --> 00:18:38.926 A:middle
需要的话我可以对不同的项

00:18:38.926 --> 00:18:40.046 A:middle
进行不同的操作

00:18:41.366 --> 00:18:43.706 A:middle
现在我要对其中一项

00:18:43.816 --> 00:18:45.566 A:middle
使用 NSItemProvider 这是

00:18:45.676 --> 00:18:47.506 A:middle
用来加载对象的

00:18:47.506 --> 00:18:47.986 A:middle
底层 API

00:18:48.116 --> 00:18:49.176 A:middle
我会加载一个类中的

00:18:49.176 --> 00:18:49.636 A:middle
一个对象

00:18:49.636 --> 00:18:50.576 A:middle
仍然是 UIImage

00:18:51.226 --> 00:18:52.426 A:middle
可以看到闭包获得了

00:18:52.476 --> 00:18:53.036 A:middle
两项内容

00:18:53.136 --> 00:18:55.866 A:middle
有一个对象还有一个

00:18:55.866 --> 00:18:57.406 A:middle
错误对象

00:18:58.206 --> 00:18:59.196 A:middle
还有另外一件事情是

00:18:59.196 --> 00:19:00.156 A:middle
它位于底层

00:18:59.196 --> 00:19:00.156 A:middle
它位于底层

00:19:00.156 --> 00:19:01.126 A:middle
把我回调到

00:19:01.126 --> 00:19:02.066 A:middle
后台队列

00:19:02.346 --> 00:19:03.696 A:middle
所以如果我需要对数据

00:19:03.696 --> 00:19:04.876 A:middle
做更多的处理就可以

00:19:04.876 --> 00:19:05.636 A:middle
在此时此地直接进行处理

00:19:06.306 --> 00:19:08.076 A:middle
但当需要更新

00:19:08.206 --> 00:19:09.466 A:middle
UI 的时候我也要

00:19:09.536 --> 00:19:10.986 A:middle
负责调度回

00:19:10.986 --> 00:19:11.326 A:middle
主队列

00:19:12.456 --> 00:19:13.526 A:middle
那就回到

00:19:13.526 --> 00:19:14.296 A:middle
主队列

00:19:14.556 --> 00:19:15.276 A:middle
来纠正差错

00:19:15.946 --> 00:19:18.336 A:middle
这就是三个 API 核心方法

00:19:18.336 --> 00:19:20.736 A:middle
获取拖拽对象

00:19:20.736 --> 00:19:22.566 A:middle
获得拖拽建议

00:19:22.566 --> 00:19:23.696 A:middle
然后实际执行

00:19:23.696 --> 00:19:27.256 A:middle
放置

00:19:27.436 --> 00:19:29.176 A:middle
现在我们再回过头

00:19:29.176 --> 00:19:30.146 A:middle
回到时间线的起点

00:19:30.146 --> 00:19:31.356 A:middle
来谈谈

00:19:31.356 --> 00:19:32.646 A:middle
其他的委托方法

00:19:32.646 --> 00:19:33.726 A:middle
因为还有很多

00:19:34.686 --> 00:19:35.596 A:middle
首先我会从

00:19:35.596 --> 00:19:36.626 A:middle
拖拽交互委托

00:19:36.626 --> 00:19:38.566 A:middle
的角度来谈

00:19:39.796 --> 00:19:41.486 A:middle
一旦提供图像

00:19:41.486 --> 00:19:42.896 A:middle
作为拖拽项

00:19:42.896 --> 00:19:45.386 A:middle
如果你不进行

00:19:45.386 --> 00:19:46.956 A:middle
其他操作 我们只会

00:19:46.956 --> 00:19:48.496 A:middle
把整个视图抬起

00:19:48.766 --> 00:19:50.706 A:middle
所以拖动图像 也就是预览

00:19:50.706 --> 00:19:52.206 A:middle
会是整个视图的

00:19:52.206 --> 00:19:52.896 A:middle
一个快照

00:19:53.286 --> 00:19:54.736 A:middle
如果这不是你想要的

00:19:55.516 --> 00:19:56.866 A:middle
你可以自定义预览

00:19:57.316 --> 00:19:59.136 A:middle
利用 dragInteraction() 的

00:19:59.226 --> 00:20:01.276 A:middle
previewForLifting 项可以

00:19:59.226 --> 00:20:01.276 A:middle
previewForLifting 项可以

00:20:01.276 --> 00:20:03.436 A:middle
返回 UITargetedDragPreview

00:20:04.086 --> 00:20:05.176 A:middle
我用一个例子

00:20:05.216 --> 00:20:05.916 A:middle
来说明

00:20:07.216 --> 00:20:08.776 A:middle
UITargetedDragPreview

00:20:08.776 --> 00:20:09.486 A:middle
包含两部分

00:20:09.766 --> 00:20:11.256 A:middle
分别是拖拽预览部分

00:20:11.256 --> 00:20:12.586 A:middle
和目标部分

00:20:13.226 --> 00:20:14.876 A:middle
拖拽预览部分规定了

00:20:14.876 --> 00:20:16.276 A:middle
拖拽时项目

00:20:16.276 --> 00:20:17.546 A:middle
所呈现的样子

00:20:17.616 --> 00:20:18.746 A:middle
要告诉我们这一点

00:20:18.746 --> 00:20:19.796 A:middle
你需要提供一个视图

00:20:20.506 --> 00:20:21.866 A:middle
这种情况下我会创建

00:20:21.866 --> 00:20:23.276 A:middle
imageView  包括一幅

00:20:23.276 --> 00:20:24.426 A:middle
来自 Asset Catalog 的图像

00:20:24.976 --> 00:20:26.246 A:middle
它会根据图像大小

00:20:26.246 --> 00:20:27.066 A:middle
自动调节尺寸

00:20:27.116 --> 00:20:28.076 A:middle
那就是它将呈现的

00:20:28.076 --> 00:20:28.226 A:middle
样子

00:20:29.356 --> 00:20:31.056 A:middle
第二部分是

00:20:31.116 --> 00:20:31.396 A:middle
目标部分

00:20:31.636 --> 00:20:32.626 A:middle
你会发现这是一个独立的

00:20:32.626 --> 00:20:33.596 A:middle
视图

00:20:33.596 --> 00:20:34.926 A:middle
不存在于 View Hierarchy

00:20:34.926 --> 00:20:35.306 A:middle
（视图层次结构）中

00:20:35.846 --> 00:20:37.266 A:middle
所以 UIKit 不知道在哪

00:20:37.266 --> 00:20:37.656 A:middle
显示它

00:20:37.896 --> 00:20:39.116 A:middle
你需要用目标

00:20:39.116 --> 00:20:39.466 A:middle
告诉我们

00:20:40.356 --> 00:20:42.206 A:middle
目标有两方面含义

00:20:42.206 --> 00:20:43.996 A:middle
它既是一个容器视图

00:20:43.996 --> 00:20:45.356 A:middle
也是容器视图内的一个位置

00:20:46.176 --> 00:20:47.476 A:middle
在这个容器视图中

00:20:47.476 --> 00:20:48.226 A:middle
我会使用

00:20:48.226 --> 00:20:49.236 A:middle
交互视图

00:20:49.236 --> 00:20:50.296 A:middle
这是拖拽开始的

00:20:50.296 --> 00:20:50.646 A:middle
地方

00:20:51.416 --> 00:20:52.886 A:middle
对于位置我会使用

00:20:52.946 --> 00:20:54.986 A:middle
视图中的

00:20:54.986 --> 00:20:55.286 A:middle
会话位置

00:20:55.536 --> 00:20:56.736 A:middle
这是用户手指的

00:20:56.736 --> 00:20:56.936 A:middle
位置

00:20:58.236 --> 00:20:59.586 A:middle
我把这两项内容

00:20:59.586 --> 00:21:01.756 A:middle
一起放入

00:20:59.586 --> 00:21:01.756 A:middle
一起放入

00:21:01.976 --> 00:21:04.236 A:middle
拖拽预览目标

00:21:04.236 --> 00:21:05.146 A:middle
最后我会创建

00:21:05.146 --> 00:21:07.246 A:middle
UITargetedDragPreview 这会用到

00:21:07.346 --> 00:21:08.976 A:middle
上面的视图一套默认参数

00:21:08.976 --> 00:21:10.176 A:middle
以及上面的

00:21:10.176 --> 00:21:10.466 A:middle
目标

00:21:11.216 --> 00:21:11.826 A:middle
以上是抬起部分

00:21:12.906 --> 00:21:13.696 A:middle
抬起阶段你还可以做的

00:21:13.696 --> 00:21:15.826 A:middle
一件事情是同时让你自己的 UI

00:21:15.826 --> 00:21:17.566 A:middle
动起来

00:21:17.956 --> 00:21:19.046 A:middle
可能在视图内

00:21:19.046 --> 00:21:20.476 A:middle
有其他 UI 需要

00:21:20.476 --> 00:21:21.956 A:middle
在拖拽期间暗淡下来

00:21:21.956 --> 00:21:22.596 A:middle
诸如此类的效果

00:21:23.366 --> 00:21:24.516 A:middle
你可以实现这个方法

00:21:24.576 --> 00:21:26.406 A:middle
也就是 dragInteraction 的

00:21:26.406 --> 00:21:28.406 A:middle
willAnimate 方法

00:21:28.406 --> 00:21:30.006 A:middle
同时 调用 animator 的

00:21:30.006 --> 00:21:30.726 A:middle
addAnimations

00:21:31.166 --> 00:21:32.046 A:middle
这里我只改变了

00:21:32.046 --> 00:21:33.216 A:middle
视图的背景色

00:21:34.476 --> 00:21:35.736 A:middle
你还可以得到抬起动画的

00:21:36.046 --> 00:21:37.086 A:middle
结束态

00:21:37.756 --> 00:21:38.976 A:middle
现在注意对于抬起

00:21:38.976 --> 00:21:40.006 A:middle
可以有两种结束

00:21:40.006 --> 00:21:40.106 A:middle
方式

00:21:40.376 --> 00:21:41.736 A:middle
如果用户在抬起过程中

00:21:41.736 --> 00:21:42.896 A:middle
一直按压时间足够长

00:21:42.896 --> 00:21:44.926 A:middle
那就会完整

00:21:44.926 --> 00:21:45.416 A:middle
进行这个过程

00:21:45.596 --> 00:21:46.526 A:middle
此时的位置就是终点

00:21:47.516 --> 00:21:49.056 A:middle
如果用户中途

00:21:49.056 --> 00:21:50.366 A:middle
抬起手指

00:21:50.366 --> 00:21:51.756 A:middle
我们则会将动画反过来

00:21:51.756 --> 00:21:53.136 A:middle
一直回到开头并且

00:21:53.136 --> 00:21:54.466 A:middle
告诉你 此时的位置是起点

00:21:54.966 --> 00:21:58.766 A:middle
因为用户移动手指后

00:21:58.766 --> 00:22:00.486 A:middle
会话开始

00:21:58.766 --> 00:22:00.486 A:middle
会话开始

00:22:00.486 --> 00:22:01.786 A:middle
我们会告诉你会话即将开始

00:22:02.776 --> 00:22:04.336 A:middle
我们会问几个

00:22:04.336 --> 00:22:04.936 A:middle
问题

00:22:04.936 --> 00:22:06.146 A:middle
比如我们会问

00:22:06.146 --> 00:22:07.546 A:middle
这个会话允许 .move

00:22:07.546 --> 00:22:08.186 A:middle
操作吗

00:22:09.276 --> 00:22:11.016 A:middle
然后随着会话的移动

00:22:11.016 --> 00:22:12.746 A:middle
每移动一次我们都会

00:22:12.746 --> 00:22:13.356 A:middle
告诉你

00:22:13.356 --> 00:22:14.356 A:middle
所以你可以在这里找到

00:22:14.356 --> 00:22:17.076 A:middle
新的位置

00:22:17.276 --> 00:22:19.066 A:middle
同时在这个拖拽阶段

00:22:19.066 --> 00:22:20.706 A:middle
你可以在拖放会话中

00:22:20.706 --> 00:22:21.696 A:middle
增加项目

00:22:22.186 --> 00:22:23.116 A:middle
这里有一个点按操作

00:22:23.116 --> 00:22:24.086 A:middle
用于移动拖拽

00:22:24.136 --> 00:22:25.906 A:middle
另一个点按操作可以去点击

00:22:25.906 --> 00:22:28.706 A:middle
任何含有拖拽交互的

00:22:28.706 --> 00:22:29.296 A:middle
视窗

00:22:29.906 --> 00:22:31.146 A:middle
不一定非要是

00:22:31.146 --> 00:22:31.806 A:middle
原始视窗

00:22:31.806 --> 00:22:32.616 A:middle
可以是完全不同的

00:22:32.616 --> 00:22:33.166 A:middle
视窗

00:22:33.996 --> 00:22:35.706 A:middle
检测到点击后

00:22:35.936 --> 00:22:37.746 A:middle
我们会向委托请求项目

00:22:37.746 --> 00:22:38.616 A:middle
加入到会话中

00:22:39.806 --> 00:22:41.746 A:middle
在一个点上点击调用

00:22:41.746 --> 00:22:43.646 A:middle
dragInteraction 的 itemsForAddingTo session

00:22:43.646 --> 00:22:45.406 A:middle
就可以做到这一点

00:22:45.446 --> 00:22:47.576 A:middle
你可以用这个点进行 Hit-test

00:22:47.576 --> 00:22:49.676 A:middle
弄清楚有没有任何

00:22:49.676 --> 00:22:51.196 A:middle
项目要添加到

00:22:51.196 --> 00:22:51.576 A:middle
会话中

00:22:52.156 --> 00:22:53.166 A:middle
如果找到了就返回这些项目

00:22:53.196 --> 00:22:54.116 A:middle
如果没有

00:22:54.116 --> 00:22:55.716 A:middle
就返回一个空数组

00:22:56.326 --> 00:22:58.606 A:middle
然后我们会像

00:22:58.666 --> 00:22:59.986 A:middle
正常情况一样

00:22:59.986 --> 00:23:00.426 A:middle
把触摸传递下去

00:22:59.986 --> 00:23:00.426 A:middle
把触摸传递下去

00:23:01.406 --> 00:23:03.966 A:middle
当然你可以自定义

00:23:04.016 --> 00:23:05.456 A:middle
那些项目的预览

00:23:05.456 --> 00:23:06.506 A:middle
样式

00:23:08.516 --> 00:23:10.066 A:middle
最后会话结束时

00:23:10.066 --> 00:23:11.286 A:middle
用户松开手指

00:23:11.806 --> 00:23:13.276 A:middle
我们会告诉你会话将

00:23:13.276 --> 00:23:14.676 A:middle
以所选的操作

00:23:14.676 --> 00:23:15.076 A:middle
结束

00:23:16.676 --> 00:23:18.386 A:middle
如果以取消结束

00:23:18.386 --> 00:23:19.276 A:middle
会有一个结束动画

00:23:19.276 --> 00:23:20.296 A:middle
动画可以进行

00:23:20.296 --> 00:23:20.806 A:middle
自定义

00:23:21.666 --> 00:23:23.136 A:middle
那么用默认值调用

00:23:23.266 --> 00:23:25.966 A:middle
dragInteraction previewForCancelling item

00:23:25.966 --> 00:23:27.316 A:middle
就会返回

00:23:27.316 --> 00:23:27.936 A:middle
UITargetedDragPreview

00:23:28.646 --> 00:23:29.966 A:middle
这里你可以返回空

00:23:29.966 --> 00:23:31.056 A:middle
项目就会

00:23:31.056 --> 00:23:31.516 A:middle
就地消失

00:23:32.036 --> 00:23:33.606 A:middle
你可以用系统默认值

00:23:33.606 --> 00:23:34.486 A:middle
并改变它的目标

00:23:34.846 --> 00:23:35.906 A:middle
如果你知道它

00:23:35.906 --> 00:23:37.646 A:middle
该飞回到哪里的话你就只需要

00:23:37.696 --> 00:23:38.696 A:middle
给它一个新目标

00:23:38.696 --> 00:23:39.896 A:middle
它就会飞回到那儿

00:23:41.046 --> 00:23:42.316 A:middle
你可以用和以前一样的方式

00:23:42.316 --> 00:23:43.736 A:middle
和取消动画一起增加

00:23:43.736 --> 00:23:44.426 A:middle
动画

00:23:45.136 --> 00:23:46.436 A:middle
最终完成后我们会

00:23:46.436 --> 00:23:47.496 A:middle
告诉你会话

00:23:47.496 --> 00:23:47.736 A:middle
结束了

00:23:48.726 --> 00:23:50.876 A:middle
如果是拷贝或者移动

00:23:50.946 --> 00:23:51.876 A:middle
是没有取消动画的

00:23:51.876 --> 00:23:53.056 A:middle
那么我们会告诉你

00:23:53.056 --> 00:23:55.126 A:middle
会话结束了我们还会

00:23:55.126 --> 00:23:56.996 A:middle
在数据传输完成时

00:23:56.996 --> 00:23:57.456 A:middle
通知你

00:23:57.456 --> 00:24:01.356 A:middle
以上是拖拽交互

00:23:57.456 --> 00:24:01.356 A:middle
以上是拖拽交互

00:24:01.356 --> 00:24:01.586 A:middle
一侧

00:24:01.586 --> 00:24:02.736 A:middle
现在我们聊聊置放交互

00:24:02.736 --> 00:24:03.616 A:middle
这一端

00:24:04.146 --> 00:24:04.966 A:middle
这个要更为

00:24:04.966 --> 00:24:05.396 A:middle
有趣

00:24:05.396 --> 00:24:06.606 A:middle
要开始拖拽

00:24:06.606 --> 00:24:07.866 A:middle
只涉及到一个

00:24:07.866 --> 00:24:08.726 A:middle
拖拽交互

00:24:09.266 --> 00:24:10.346 A:middle
但它可以经过很多

00:24:10.346 --> 00:24:11.346 A:middle
不同的视图这些视图可以

00:24:11.546 --> 00:24:12.896 A:middle
有它们自己的置放交互

00:24:12.896 --> 00:24:14.636 A:middle
可以与同一个委托进行交互

00:24:14.636 --> 00:24:16.146 A:middle
也可以与多个委托进行交互

00:24:16.786 --> 00:24:18.166 A:middle
但最终它们中只有一个

00:24:18.166 --> 00:24:19.766 A:middle
能够选择用户抬起手指后

00:24:19.766 --> 00:24:24.616 A:middle
的动作

00:24:24.846 --> 00:24:26.626 A:middle
所以当拖拽会话

00:24:26.676 --> 00:24:28.226 A:middle
进入到你的视图你已经有了

00:24:28.226 --> 00:24:29.236 A:middle
一个置放交互

00:24:29.236 --> 00:24:30.246 A:middle
我们首先要做的是问你

00:24:30.246 --> 00:24:31.406 A:middle
你能处理

00:24:31.466 --> 00:24:31.746 A:middle
该会话吗

00:24:32.526 --> 00:24:33.436 A:middle
那么你可以

00:24:33.436 --> 00:24:34.706 A:middle
调用这个方法

00:24:34.706 --> 00:24:36.166 A:middle
也就是 dropInteraction canHandle session

00:24:36.966 --> 00:24:39.126 A:middle
你不能查看实际被拖拽的是

00:24:39.126 --> 00:24:40.056 A:middle
什么数据

00:24:40.056 --> 00:24:41.126 A:middle
我们还没提供这个权限

00:24:41.126 --> 00:24:43.106 A:middle
但是你可以找到

00:24:43.106 --> 00:24:44.106 A:middle
被拖拽数据的类型

00:24:44.566 --> 00:24:45.386 A:middle
那么假设你只对

00:24:45.386 --> 00:24:46.366 A:middle
图像感兴趣

00:24:46.786 --> 00:24:47.856 A:middle
你可以查看

00:24:48.426 --> 00:24:50.596 A:middle
canLoadObjectsofClass UIImage 会话

00:24:51.786 --> 00:24:52.796 A:middle
或者你可以做更

00:24:52.796 --> 00:24:53.356 A:middle
具体的事情

00:24:53.356 --> 00:24:54.626 A:middle
如果你对特定的

00:24:54.626 --> 00:24:56.736 A:middle
统一类型标识符感兴趣

00:24:56.736 --> 00:24:58.446 A:middle
你可以查看会话中有没有项目

00:24:58.476 --> 00:25:01.076 A:middle
符合那个特定的

00:24:58.476 --> 00:25:01.076 A:middle
符合那个特定的

00:25:01.146 --> 00:25:02.296 A:middle
统一类型标识符

00:25:02.626 --> 00:25:04.196 A:middle
那这里我就用 PNG 图像

00:25:04.196 --> 00:25:05.566 A:middle
假设我只对 PNG 格式的

00:25:05.566 --> 00:25:06.116 A:middle
图像感兴趣

00:25:08.676 --> 00:25:10.076 A:middle
接下来在你说可以

00:25:10.076 --> 00:25:11.976 A:middle
处理该拖拽会话后

00:25:12.836 --> 00:25:14.186 A:middle
我们会在会话

00:25:14.236 --> 00:25:15.696 A:middle
进入你的视图时

00:25:15.696 --> 00:25:16.966 A:middle
和在你的视图内移动时

00:25:16.966 --> 00:25:17.866 A:middle
通知你当然你会

00:25:17.866 --> 00:25:20.186 A:middle
返回一个建议 我们

00:25:20.186 --> 00:25:21.306 A:middle
会在它存在时通知你

00:25:21.516 --> 00:25:22.496 A:middle
当然这些可以发生多次

00:25:22.496 --> 00:25:23.996 A:middle
进入退出

00:25:24.056 --> 00:25:24.656 A:middle
进入退出

00:25:27.136 --> 00:25:28.136 A:middle
另外会话进行过程中

00:25:28.136 --> 00:25:29.246 A:middle
可能发生

00:25:29.246 --> 00:25:29.576 A:middle
Spring-loading（弹跳加载）

00:25:30.206 --> 00:25:31.616 A:middle
所以我们在 UIKit 中

00:25:31.616 --> 00:25:32.946 A:middle
内置了对弹跳加载的支持

00:25:33.106 --> 00:25:34.906 A:middle
有不同的类比如

00:25:34.906 --> 00:25:35.516 A:middle
UIButton

00:25:35.666 --> 00:25:36.536 A:middle
你所需要做的就是给出

00:25:36.536 --> 00:25:37.916 A:middle
isSpringLoaded = true

00:25:38.366 --> 00:25:39.326 A:middle
当拖拽会话

00:25:39.326 --> 00:25:41.626 A:middle
悬浮在那个按钮上时

00:25:41.696 --> 00:25:42.626 A:middle
按钮的动作会

00:25:42.626 --> 00:25:44.036 A:middle
自动运行

00:25:45.136 --> 00:25:46.336 A:middle
或者你可以建立自己的

00:25:46.336 --> 00:25:47.836 A:middle
弹跳加载交互

00:25:47.836 --> 00:25:49.266 A:middle
当需要激活时调用其自身的

00:25:49.266 --> 00:25:50.766 A:middle
处理器即可并把它

00:25:50.926 --> 00:25:53.766 A:middle
添加到任何你要的视图

00:25:54.766 --> 00:25:56.676 A:middle
最后当会话在

00:25:56.676 --> 00:25:57.966 A:middle
dropInteraction 委托上结束时

00:25:58.486 --> 00:25:59.596 A:middle
我们会告诉你

00:25:59.596 --> 00:25:59.826 A:middle
会话结束

00:25:59.876 --> 00:26:02.246 A:middle
所以见到过这个会话的

00:25:59.876 --> 00:26:02.246 A:middle
所以见到过这个会话的

00:26:02.246 --> 00:26:03.726 A:middle
每个交互每个放置交互

00:26:03.726 --> 00:26:05.086 A:middle
都会被告知

00:26:05.086 --> 00:26:05.926 A:middle
会话结束

00:26:06.276 --> 00:26:07.256 A:middle
如果你正在跟踪会话

00:26:07.256 --> 00:26:08.726 A:middle
现在就可以停止

00:26:09.476 --> 00:26:10.846 A:middle
跟踪了

00:26:11.116 --> 00:26:12.976 A:middle
当然如果需要执行放置

00:26:12.976 --> 00:26:13.946 A:middle
那就有更多需要做的

00:26:13.946 --> 00:26:15.016 A:middle
我们已经说过

00:26:15.016 --> 00:26:15.486 A:middle
执行阶段了

00:26:15.696 --> 00:26:16.306 A:middle
现在我们说说

00:26:16.306 --> 00:26:17.536 A:middle
动画和数据

00:26:17.536 --> 00:26:17.936 A:middle
传输

00:26:18.476 --> 00:26:21.096 A:middle
动画方面放置动画

00:26:21.096 --> 00:26:22.716 A:middle
和取消动画

00:26:22.716 --> 00:26:23.626 A:middle
的动画部分

00:26:23.666 --> 00:26:24.116 A:middle
是完全一样的

00:26:24.276 --> 00:26:25.416 A:middle
只是 API 的名称

00:26:25.416 --> 00:26:25.816 A:middle
有所不同

00:26:25.926 --> 00:26:26.826 A:middle
那现在它在 dropInteraction 委托上的

00:26:26.826 --> 00:26:28.646 A:middle
previewForDropping item

00:26:28.646 --> 00:26:29.926 A:middle
但你可以做

00:26:29.926 --> 00:26:30.986 A:middle
完全相同的事情

00:26:31.826 --> 00:26:32.996 A:middle
用同样的方法

00:26:33.046 --> 00:26:33.626 A:middle
让它动起来

00:26:34.256 --> 00:26:35.536 A:middle
最终所有项目的

00:26:35.536 --> 00:26:36.796 A:middle
所有放置动画完成时

00:26:36.796 --> 00:26:38.106 A:middle
我们会告诉你结束

00:26:38.106 --> 00:26:38.456 A:middle
放置

00:26:38.946 --> 00:26:41.616 A:middle
当然在数据传输上

00:26:41.616 --> 00:26:43.026 A:middle
当数据可用时

00:26:43.026 --> 00:26:44.046 A:middle
这个闭包会被调用

00:26:44.566 --> 00:26:45.486 A:middle
但我刚才没有提到的一点是

00:26:45.486 --> 00:26:47.686 A:middle
当你开始加载数据时

00:26:48.276 --> 00:26:49.566 A:middle
你会得到一个

00:26:49.616 --> 00:26:51.296 A:middle
Progress（进度）对象

00:26:51.296 --> 00:26:53.526 A:middle
这个对象可以告诉你

00:26:53.526 --> 00:26:54.606 A:middle
数据传输已完成多少

00:26:54.606 --> 00:26:56.516 A:middle
是否已经结束

00:26:56.696 --> 00:26:58.126 A:middle
你甚至可以在这里

00:26:58.336 --> 00:27:00.246 A:middle
取消数据传输

00:26:58.336 --> 00:27:00.246 A:middle
取消数据传输

00:27:00.446 --> 00:27:02.096 A:middle
此外你可以为每个项

00:27:02.096 --> 00:27:04.406 A:middle
创建一个进度对象

00:27:04.406 --> 00:27:05.616 A:middle
或者可以有一个整个

00:27:05.616 --> 00:27:07.136 A:middle
会话的进度对象可以

00:27:07.136 --> 00:27:08.766 A:middle
结束所有加载项的

00:27:08.766 --> 00:27:08.986 A:middle
进度

00:27:09.536 --> 00:27:11.166 A:middle
就是这些

00:27:11.396 --> 00:27:12.756 A:middle
以上就是拖放的完整

00:27:12.756 --> 00:27:13.186 A:middle
时间线

00:27:13.186 --> 00:27:14.046 A:middle
所有会发生的情况

00:27:14.046 --> 00:27:14.416 A:middle
都在这里

00:27:15.316 --> 00:27:16.306 A:middle
你了解了三个 API 的核心函数

00:27:16.306 --> 00:27:17.866 A:middle
你需要实现它们

00:27:17.866 --> 00:27:19.216 A:middle
才可以实现

00:27:19.216 --> 00:27:19.826 A:middle
拖放

00:27:19.826 --> 00:27:21.386 A:middle
这里我真正希望你们

00:27:21.386 --> 00:27:22.206 A:middle
理解的一点是

00:27:22.606 --> 00:27:24.116 A:middle
拖放的自定义是通过

00:27:24.116 --> 00:27:25.586 A:middle
这些交互委托

00:27:25.586 --> 00:27:25.976 A:middle
实现的

00:27:26.056 --> 00:27:28.256 A:middle
这就是 UIKit 和你的 App

00:27:28.256 --> 00:27:29.076 A:middle
是如何一同工作

00:27:29.076 --> 00:27:30.336 A:middle
来实现优秀的拖放

00:27:30.336 --> 00:27:30.876 A:middle
体验的

00:27:32.416 --> 00:27:33.646 A:middle
我要邀请 Emanuele 上台

00:27:33.646 --> 00:27:34.936 A:middle
向大家展示如何给 App

00:27:34.936 --> 00:27:36.676 A:middle
添加拖放

00:27:37.076 --> 00:27:37.976 A:middle
&gt;&gt; 谢谢你 Kurt

00:27:38.516 --> 00:27:43.666 A:middle
[ 掌声 ]

00:27:44.166 --> 00:27:44.906 A:middle
&gt;&gt; 我们利用拖放交互

00:27:44.906 --> 00:27:46.506 A:middle
为图像创造了

00:27:46.506 --> 00:27:48.066 A:middle
一个拟物化的

00:27:48.066 --> 00:27:48.596 A:middle
记事板

00:27:49.056 --> 00:27:51.746 A:middle
比如我们可以

00:27:51.746 --> 00:27:52.926 A:middle
从图像拖拽开始

00:27:53.406 --> 00:27:54.356 A:middle
可以把它拖到

00:27:54.356 --> 00:27:54.916 A:middle
记事板上

00:27:54.916 --> 00:27:57.566 A:middle
放置时就可以拷贝

00:27:57.566 --> 00:27:58.536 A:middle
图像 并显示在

00:27:58.536 --> 00:27:58.976 A:middle
记事板上

00:27:59.386 --> 00:28:03.736 A:middle
注意 放置动画

00:27:59.386 --> 00:28:03.736 A:middle
注意 放置动画

00:28:03.736 --> 00:28:05.156 A:middle
按比例缩小了图像

00:28:05.186 --> 00:28:06.026 A:middle
而我们在记事板中

00:28:06.026 --> 00:28:07.716 A:middle
收到数据时动画会显示

00:28:07.716 --> 00:28:08.266 A:middle
完整的图像

00:28:08.796 --> 00:28:12.156 A:middle
我们也可以把它拖到

00:28:12.156 --> 00:28:13.506 A:middle
记事板上可以看到

00:28:13.506 --> 00:28:15.336 A:middle
原始图像会变暗

00:28:15.736 --> 00:28:17.456 A:middle
还可以把它拖拽

00:28:17.456 --> 00:28:19.706 A:middle
添加回照片 App 中

00:28:21.676 --> 00:28:22.356 A:middle
希望如此

00:28:22.456 --> 00:28:26.596 A:middle
嗯这个以前

00:28:26.596 --> 00:28:26.836 A:middle
是可以的

00:28:27.356 --> 00:28:30.776 A:middle
[笑声] 还可以在同一个记事板中

00:28:30.776 --> 00:28:33.116 A:middle
拖拽图像然后当我们

00:28:33.116 --> 00:28:34.926 A:middle
放置时就会重新

00:28:34.926 --> 00:28:35.566 A:middle
排列

00:28:35.676 --> 00:28:37.246 A:middle
再看一下

00:28:37.246 --> 00:28:37.886 A:middle
动画

00:28:38.166 --> 00:28:39.776 A:middle
先让原图变暗

00:28:39.776 --> 00:28:41.786 A:middle
当放置时就把原图像隐藏

00:28:41.786 --> 00:28:43.476 A:middle
然后我们在新的位置

00:28:43.476 --> 00:28:44.396 A:middle
显示图像

00:28:44.736 --> 00:28:46.576 A:middle
那我们回来看看代码

00:28:46.576 --> 00:28:47.996 A:middle
看看这是如何实现的

00:28:49.756 --> 00:28:52.096 A:middle
我们从主视图控制器开始

00:28:52.096 --> 00:28:54.456 A:middle
在视图中添加一个放置交互

00:28:54.456 --> 00:28:56.676 A:middle
和一个

00:28:56.676 --> 00:28:58.376 A:middle
拖拽交互

00:28:58.926 --> 00:29:00.026 A:middle
然后将视图控制器设为

00:28:58.926 --> 00:29:00.026 A:middle
然后将视图控制器设为

00:29:00.026 --> 00:29:02.176 A:middle
这些交互的

00:29:02.176 --> 00:29:03.166 A:middle
委托

00:29:04.446 --> 00:29:06.186 A:middle
然后我们要实现

00:29:06.186 --> 00:29:09.446 A:middle
几个放置交互委托的

00:29:09.446 --> 00:29:09.926 A:middle
方法

00:29:10.236 --> 00:29:11.726 A:middle
第一个是

00:29:11.726 --> 00:29:13.546 A:middle
dropInteraction 的 canHandle 会话

00:29:13.856 --> 00:29:16.096 A:middle
如果会话可以加载图像

00:29:16.096 --> 00:29:17.456 A:middle
就会返回 true

00:29:17.656 --> 00:29:18.476 A:middle
很简单

00:29:19.246 --> 00:29:21.076 A:middle
第二个是

00:29:21.076 --> 00:29:23.116 A:middle
dropInteraction 的 sessionDidUpdate

00:29:23.456 --> 00:29:25.076 A:middle
这里我们返回一个建议

00:29:25.136 --> 00:29:27.396 A:middle
指定想要执行的

00:29:27.396 --> 00:29:28.756 A:middle
是哪种操作

00:29:29.146 --> 00:29:31.266 A:middle
有两种情况

00:29:31.726 --> 00:29:35.116 A:middle
第一种是如果拖拽

00:29:35.266 --> 00:29:36.916 A:middle
来自其他应用程序

00:29:37.186 --> 00:29:38.556 A:middle
我们希望执行

00:29:38.556 --> 00:29:39.146 A:middle
拷贝操作

00:29:39.326 --> 00:29:40.826 A:middle
我们可以通过查看

00:29:41.236 --> 00:29:43.836 A:middle
session.localDragSession 这一属性

00:29:43.836 --> 00:29:44.286 A:middle
进行检查

00:29:44.646 --> 00:29:47.456 A:middle
如果属性为空意味着

00:29:47.456 --> 00:29:49.216 A:middle
这一拖拽操作

00:29:49.216 --> 00:29:50.636 A:middle
源自另一个应用程序

00:29:50.636 --> 00:29:51.736 A:middle
那我们会进行拷贝

00:29:52.156 --> 00:29:53.256 A:middle
否则我们只是

00:29:53.256 --> 00:29:54.736 A:middle
重新排列项目

00:29:54.736 --> 00:29:56.046 A:middle
会进行一次移动操作

00:29:58.776 --> 00:30:00.376 A:middle
第三我们会实现

00:29:58.776 --> 00:30:00.376 A:middle
第三我们会实现

00:30:00.756 --> 00:30:02.996 A:middle
dropInteraction performDrop

00:30:03.036 --> 00:30:03.506 A:middle
会话

00:30:04.196 --> 00:30:06.176 A:middle
同样如果拖拽源自其他应用程序

00:30:06.176 --> 00:30:08.246 A:middle
我们就只希望拷贝

00:30:08.246 --> 00:30:09.166 A:middle
数据

00:30:09.166 --> 00:30:10.876 A:middle
所以 我们会再次检查

00:30:11.116 --> 00:30:12.506 A:middle
localDragSession 是否为空

00:30:13.436 --> 00:30:14.806 A:middle
然后我们会先执行放置

00:30:14.806 --> 00:30:17.146 A:middle
方法是通过调用

00:30:17.546 --> 00:30:19.776 A:middle
session.location(in: .view)

00:30:19.776 --> 00:30:21.936 A:middle
得到用户抬起手指的

00:30:21.936 --> 00:30:23.196 A:middle
那个放置点

00:30:23.996 --> 00:30:25.966 A:middle
然后我们会检查

00:30:25.966 --> 00:30:27.566 A:middle
会话中的每个拖拽项

00:30:27.566 --> 00:30:30.946 A:middle
并调用帮助函数

00:30:30.946 --> 00:30:32.776 A:middle
它会从项目提供器中

00:30:32.776 --> 00:30:34.146 A:middle
加载图像

00:30:34.526 --> 00:30:36.096 A:middle
放入图像视图

00:30:36.096 --> 00:30:38.326 A:middle
然后利用刚才的那个点

00:30:38.326 --> 00:30:40.416 A:middle
将其显示在

00:30:40.416 --> 00:30:40.706 A:middle
记事板中

00:30:44.276 --> 00:30:47.816 A:middle
我们还想在抬起手指时

00:30:48.016 --> 00:30:50.086 A:middle
执行一个

00:30:50.086 --> 00:30:50.566 A:middle
放置动画

00:30:51.026 --> 00:30:54.016 A:middle
仍然会有两种情况

00:30:54.366 --> 00:30:55.646 A:middle
在 dropInteraction 的

00:30:55.646 --> 00:30:57.816 A:middle
previewForDropping item 中

00:30:57.816 --> 00:31:01.326 A:middle
我们希望返回一个预览

00:30:57.816 --> 00:31:01.326 A:middle
我们希望返回一个预览

00:31:01.326 --> 00:31:03.246 A:middle
如果拖拽来自其他应用程序

00:31:03.246 --> 00:31:04.356 A:middle
预览会缩小

00:31:04.716 --> 00:31:06.996 A:middle
并且如果我们

00:31:06.996 --> 00:31:09.346 A:middle
从记事板移动图像

00:31:09.346 --> 00:31:10.766 A:middle
就不会应用任何

00:31:10.766 --> 00:31:11.256 A:middle
效果

00:31:11.256 --> 00:31:12.256 A:middle
只会把它就地

00:31:12.256 --> 00:31:12.636 A:middle
放置

00:31:16.046 --> 00:31:19.516 A:middle
因此我们可以检查 该项目

00:31:19.516 --> 00:31:22.646 A:middle
是来自本地拖拽还是

00:31:22.646 --> 00:31:25.156 A:middle
外部拖拽方法是查看

00:31:25.156 --> 00:31:27.116 A:middle
拖拽项的这个叫做

00:31:27.306 --> 00:31:28.486 A:middle
localObject 的属性

00:31:29.516 --> 00:31:32.136 A:middle
如果项目来自

00:31:32.136 --> 00:31:34.036 A:middle
其他应用程序我们会返回

00:31:34.036 --> 00:31:34.746 A:middle
空值

00:31:35.126 --> 00:31:38.116 A:middle
这就会有我们之前

00:31:38.166 --> 00:31:39.306 A:middle
看到的效果

00:31:39.556 --> 00:31:41.446 A:middle
也就是缩小预览

00:31:41.446 --> 00:31:44.566 A:middle
并且 预览会停留在

00:31:44.566 --> 00:31:45.076 A:middle
原地

00:31:45.376 --> 00:31:47.926 A:middle
而默认预览则会

00:31:47.926 --> 00:31:49.156 A:middle
缩小并移动到

00:31:49.156 --> 00:31:50.456 A:middle
记事板中心

00:31:50.456 --> 00:31:51.526 A:middle
但这不是我们想要的

00:31:52.076 --> 00:31:54.706 A:middle
当我们从记事板

00:31:54.706 --> 00:31:57.376 A:middle
移动图像

00:31:57.376 --> 00:31:59.636 A:middle
以重新排列时

00:31:59.636 --> 00:32:02.136 A:middle
我们会让它就地动起来

00:31:59.636 --> 00:32:02.136 A:middle
我们会让它就地动起来

00:32:02.826 --> 00:32:04.926 A:middle
为此我们需要

00:32:04.926 --> 00:32:06.646 A:middle
为默认预览重新指定目标

00:32:07.016 --> 00:32:09.576 A:middle
如 Kurt 介绍的那样我们需要

00:32:09.576 --> 00:32:11.306 A:middle
一个容器就是记事板本身

00:32:11.306 --> 00:32:13.756 A:middle
还需要视图的中心

00:32:13.756 --> 00:32:17.216 A:middle
也就是预览的

00:32:17.296 --> 00:32:17.656 A:middle
中心

00:32:18.536 --> 00:32:19.566 A:middle
然后我们将

00:32:19.566 --> 00:32:22.326 A:middle
为默认预览重新指定目标 并

00:32:22.416 --> 00:32:23.746 A:middle
把它返回

00:32:25.836 --> 00:32:27.276 A:middle
接下来我们要实现

00:32:27.406 --> 00:32:28.276 A:middle
dropInteraction 的

00:32:28.456 --> 00:32:30.226 A:middle
willAnimateDropwithanimator

00:32:31.156 --> 00:32:34.526 A:middle
这里我们要使本地移动产生动画

00:32:34.526 --> 00:32:37.266 A:middle
因为就像你之前看到的

00:32:37.266 --> 00:32:39.416 A:middle
我们使原图像

00:32:39.416 --> 00:32:41.216 A:middle
视图变暗当把它

00:32:41.216 --> 00:32:42.936 A:middle
置放在新的地方

00:32:42.936 --> 00:32:45.186 A:middle
我们会把原来位置上的

00:32:45.276 --> 00:32:46.456 A:middle
图像隐藏

00:32:46.456 --> 00:32:48.116 A:middle
然后在动画结束时

00:32:48.116 --> 00:32:50.076 A:middle
在新的位置

00:32:50.076 --> 00:32:50.666 A:middle
显示图像

00:32:51.076 --> 00:32:52.396 A:middle
我们会添加一个

00:32:52.396 --> 00:32:54.686 A:middle
伴随动画并将

00:32:54.686 --> 00:32:57.286 A:middle
拖拽项透明度逐渐降低至

00:32:57.616 --> 00:32:59.246 A:middle
alpha=0

00:33:00.416 --> 00:33:02.156 A:middle
接下来在动画末尾

00:33:02.156 --> 00:33:04.166 A:middle
通过添加一个

00:33:04.166 --> 00:33:07.456 A:middle
Completion Block（完成块）我们可以设置

00:33:07.566 --> 00:33:09.396 A:middle
该图像视图的新中心

00:33:09.396 --> 00:33:11.046 A:middle
然后通过设置其alpha值为1

00:33:11.046 --> 00:33:12.466 A:middle
我们可以让它重新

00:33:12.466 --> 00:33:13.176 A:middle
显示出来

00:33:13.506 --> 00:33:15.736 A:middle
这里你可以看到

00:33:15.736 --> 00:33:17.666 A:middle
我们再次检查了本地对象

00:33:17.916 --> 00:33:19.176 A:middle
这种情况下我会传递

00:33:19.176 --> 00:33:22.136 A:middle
一个索引以便知晓

00:33:22.186 --> 00:33:25.136 A:middle
图像在模型对象中的位置

00:33:25.136 --> 00:33:26.786 A:middle
我们一会就可以看到

00:33:26.786 --> 00:33:28.356 A:middle
在拖拽交互中如何

00:33:28.356 --> 00:33:29.546 A:middle
设置

00:33:30.376 --> 00:33:32.786 A:middle
那我下面就谈谈

00:33:32.786 --> 00:33:34.756 A:middle
拖拽交互委托

00:33:35.666 --> 00:33:37.136 A:middle
首先我需要实现的是

00:33:37.136 --> 00:33:39.606 A:middle
在拖拽中要传递的

00:33:39.606 --> 00:33:41.356 A:middle
是哪种数据

00:33:42.006 --> 00:33:44.586 A:middle
我在整个记事板上

00:33:44.586 --> 00:33:45.646 A:middle
安装了交互

00:33:46.036 --> 00:33:48.886 A:middle
那我想做的是

00:33:48.886 --> 00:33:51.306 A:middle
给出我手指下方的图像

00:33:52.706 --> 00:33:54.716 A:middle
为此我首先需要

00:33:54.716 --> 00:33:57.206 A:middle
得到拖拽的点按这可以通过

00:33:57.206 --> 00:33:58.786 A:middle
再次调用 session.location(in: .view)

00:33:58.786 --> 00:33:59.156 A:middle
实现

00:33:59.956 --> 00:34:01.696 A:middle
然后如果手指下方

00:33:59.956 --> 00:34:01.696 A:middle
然后如果手指下方

00:34:01.776 --> 00:34:03.556 A:middle
有图像我要获得图像

00:34:03.656 --> 00:34:07.236 A:middle
以及图像的数据

00:34:07.236 --> 00:34:09.396 A:middle
将数据打包到

00:34:09.396 --> 00:34:11.666 A:middle
项目提供器再把项目提供器

00:34:11.666 --> 00:34:14.626 A:middle
打包进 dragItem（拖拽项）然后附上

00:34:14.696 --> 00:34:16.166 A:middle
其他信息这些信息将允许我

00:34:16.166 --> 00:34:18.085 A:middle
在置放点识别出

00:34:18.376 --> 00:34:20.376 A:middle
那个本地

00:34:20.376 --> 00:34:20.696 A:middle
拖拽项

00:34:25.216 --> 00:34:26.746 A:middle
下面我们需要为该项目

00:34:26.806 --> 00:34:28.656 A:middle
提供一个预览

00:34:29.005 --> 00:34:31.585 A:middle
如前所述如果我们

00:34:31.585 --> 00:34:33.906 A:middle
不提供预览拖拽交互

00:34:33.906 --> 00:34:35.896 A:middle
会默认为整个视图

00:34:35.896 --> 00:34:37.416 A:middle
获取快照

00:34:37.956 --> 00:34:39.795 A:middle
很明显我们不希望

00:34:39.795 --> 00:34:40.076 A:middle
那样

00:34:40.076 --> 00:34:41.686 A:middle
我们只希望为

00:34:41.686 --> 00:34:43.326 A:middle
正在拖拽的单张图像

00:34:43.326 --> 00:34:44.226 A:middle
提供预览

00:34:48.196 --> 00:34:50.386 A:middle
做到这一点需要通过获取

00:34:50.386 --> 00:34:53.585 A:middle
拖拽项的目录

00:34:53.815 --> 00:34:55.795 A:middle
获取它相关的图像视图

00:34:55.795 --> 00:34:57.636 A:middle
然后作为目标预览

00:34:57.696 --> 00:34:58.066 A:middle
传递

00:35:01.256 --> 00:35:04.256 A:middle
最后拖拽一旦开始

00:35:04.256 --> 00:35:05.816 A:middle
我们就会让原始图像

00:35:05.816 --> 00:35:07.156 A:middle
变暗

00:35:07.586 --> 00:35:09.626 A:middle
所以 我们要添加

00:35:10.046 --> 00:35:12.536 A:middle
一个完成块

00:35:12.536 --> 00:35:16.076 A:middle
到拖拽交互的 animator 中

00:35:16.156 --> 00:35:18.286 A:middle
在 willAnimateLift 委托中传递

00:35:18.786 --> 00:35:20.936 A:middle
那我们添加这个

00:35:20.936 --> 00:35:23.056 A:middle
完成块抬起就结束了

00:35:23.126 --> 00:35:24.956 A:middle
如果位置是终点

00:35:25.056 --> 00:35:27.906 A:middle
那就使原始项颜色

00:35:27.906 --> 00:35:30.986 A:middle
减淡至 alpha 值为 0.5

00:35:31.516 --> 00:35:34.246 A:middle
这就是全部了

00:35:34.616 --> 00:35:36.906 A:middle
大家已经看到了

00:35:37.646 --> 00:35:39.986 A:middle
添加拖放交互有多

00:35:39.986 --> 00:35:40.576 A:middle
简单

00:35:41.146 --> 00:35:44.136 A:middle
这个例子也展示了

00:35:44.926 --> 00:35:46.586 A:middle
如何实现

00:35:46.586 --> 00:35:47.656 A:middle
Pace Configuration

00:35:47.936 --> 00:35:49.616 A:middle
Pace Configuration 可以和你的放置交互

00:35:49.616 --> 00:35:51.816 A:middle
一起使用示例代码

00:35:51.816 --> 00:35:53.636 A:middle
网上可以找到

00:35:53.636 --> 00:35:55.026 A:middle
大家一定要去看一下

00:35:55.726 --> 00:35:56.406 A:middle
交回给 Bruce

00:35:57.021 --> 00:35:59.021 A:middle
[ 掌声 ]

00:35:59.026 --> 00:35:59.666 A:middle
&gt;&gt; 谢谢  Emanuele

00:36:00.516 --> 00:36:03.546 A:middle
[ 掌声 ]

00:36:04.046 --> 00:36:05.726 A:middle
&gt;&gt; 好的 现在你们已经等不及

00:36:05.726 --> 00:36:07.276 A:middle
跑到自己的笔记本电脑上

00:36:07.276 --> 00:36:08.396 A:middle
我看有人已经带进来了

00:36:08.396 --> 00:36:09.466 A:middle
给你们的 App 添加

00:36:09.466 --> 00:36:10.366 A:middle
拖放了

00:36:10.856 --> 00:36:12.646 A:middle
那么现在我要分享

00:36:12.646 --> 00:36:14.816 A:middle
几条建议是关于如何

00:36:14.816 --> 00:36:16.646 A:middle
让这个过程更加顺利的

00:36:16.776 --> 00:36:19.516 A:middle
首先不要立马

00:36:19.516 --> 00:36:20.096 A:middle
开始操作

00:36:20.376 --> 00:36:21.566 A:middle
先探索下系统

00:36:21.766 --> 00:36:23.156 A:middle
看看我们都做了什么

00:36:23.156 --> 00:36:24.486 A:middle
看看我们实现的

00:36:24.486 --> 00:36:25.986 A:middle
放置动画的种类有哪些

00:36:25.986 --> 00:36:27.746 A:middle
以及我们实际传输的

00:36:27.746 --> 00:36:29.626 A:middle
那些数据类型

00:36:29.626 --> 00:36:31.026 A:middle
我相信你会感到惊讶的

00:36:31.596 --> 00:36:32.546 A:middle
然后从简单的开始

00:36:32.546 --> 00:36:34.366 A:middle
试着添加一个放置目标

00:36:34.366 --> 00:36:35.996 A:middle
可以用 Pace Configuration 来做

00:36:35.996 --> 00:36:37.456 A:middle
只是感受一下它是如何

00:36:37.456 --> 00:36:38.056 A:middle
工作的

00:36:39.266 --> 00:36:40.916 A:middle
用拖拽源实验一下

00:36:41.456 --> 00:36:44.096 A:middle
甚至尝试弹跳加载一两个

00:36:44.096 --> 00:36:44.926 A:middle
控件

00:36:44.926 --> 00:36:46.786 A:middle
然后你会看着它说

00:36:46.786 --> 00:36:49.536 A:middle
就是有哪里

00:36:49.536 --> 00:36:50.206 A:middle
看上去不对

00:36:50.316 --> 00:36:51.356 A:middle
我们漏掉了什么呢

00:36:51.876 --> 00:36:52.666 A:middle
这时 你就需要

00:36:52.666 --> 00:36:54.276 A:middle
更深入地研究

00:36:54.276 --> 00:36:55.536 A:middle
这些拖放 API 了

00:36:55.536 --> 00:36:57.256 A:middle
因为有很多这样的 API

00:36:57.616 --> 00:36:59.076 A:middle
我们也让这个过程

00:36:59.076 --> 00:36:59.296 A:middle
足够简单了

00:36:59.916 --> 00:37:01.276 A:middle
所以我要重新回到

00:36:59.916 --> 00:37:01.276 A:middle
所以我要重新回到

00:37:01.276 --> 00:37:02.476 A:middle
这张图开始

00:37:02.476 --> 00:37:03.476 A:middle
谈一谈

00:37:03.476 --> 00:37:05.716 A:middle
后面会有一场关于精通

00:37:05.716 --> 00:37:06.746 A:middle
这些拖放 API 的演讲

00:37:06.746 --> 00:37:09.006 A:middle
它会更加深入

00:37:09.006 --> 00:37:11.446 A:middle
比 Kurt 的大致讲解

00:37:11.446 --> 00:37:12.216 A:middle
更详细

00:37:12.946 --> 00:37:14.686 A:middle
还会有一场会议是关于

00:37:14.686 --> 00:37:15.676 A:middle
我们如何改进

00:37:15.726 --> 00:37:17.826 A:middle
NSItemProvider 的这场会议

00:37:17.826 --> 00:37:18.936 A:middle
也会很精彩

00:37:18.936 --> 00:37:21.176 A:middle
比如我们可以拖放文件

00:37:21.176 --> 00:37:22.616 A:middle
你可以就地打开这些文件

00:37:22.616 --> 00:37:24.766 A:middle
实际上你可以

00:37:24.906 --> 00:37:26.386 A:middle
利用文件提供器

00:37:26.386 --> 00:37:28.786 A:middle
从你的源代码中提供数据

00:37:28.786 --> 00:37:29.946 A:middle
我们会在那场演讲中

00:37:29.946 --> 00:37:31.316 A:middle
深入讲解

00:37:33.186 --> 00:37:33.986 A:middle
还有更多的内容

00:37:33.986 --> 00:37:38.366 A:middle
比如文本视图有一个委托

00:37:38.366 --> 00:37:40.006 A:middle
是一个较高层的

00:37:40.006 --> 00:37:41.316 A:middle
委托 支持

00:37:41.316 --> 00:37:41.676 A:middle
拖放

00:37:41.676 --> 00:37:42.596 A:middle
所以如果你有自定义的附件

00:37:42.596 --> 00:37:44.386 A:middle
或者需要某种

00:37:44.386 --> 00:37:46.886 A:middle
自定义文本处理

00:37:46.886 --> 00:37:49.196 A:middle
你应该探究下这些委托上的

00:37:49.196 --> 00:37:49.866 A:middle
API

00:37:50.776 --> 00:37:52.126 A:middle
我知道你们中的很多人

00:37:52.166 --> 00:37:53.776 A:middle
在 App 中使用表格视图

00:37:53.776 --> 00:37:55.506 A:middle
和集合视图如果你们想

00:37:55.506 --> 00:37:56.946 A:middle
让这些视图支持拖放

00:37:56.946 --> 00:37:58.516 A:middle
我们也开发了一些非常棒的

00:37:58.516 --> 00:38:00.126 A:middle
高层 API

00:37:58.516 --> 00:38:00.126 A:middle
高层 API

00:38:00.126 --> 00:38:02.656 A:middle
会有一整场的演讲都是关于

00:38:02.656 --> 00:38:04.496 A:middle
这个话题你们真的应该

00:38:04.496 --> 00:38:04.846 A:middle
去看看

00:38:06.216 --> 00:38:07.806 A:middle
和往常一样这个链接里

00:38:07.806 --> 00:38:09.746 A:middle
有关于这场演讲

00:38:09.746 --> 00:38:11.356 A:middle
的更多信息

00:38:11.356 --> 00:38:12.176 A:middle
尤其是有示例 App

00:38:13.116 --> 00:38:14.446 A:middle
这里是一些相关的

00:38:14.446 --> 00:38:15.116 A:middle
会议

00:38:15.346 --> 00:38:17.286 A:middle
我增加了一个关于

00:38:17.286 --> 00:38:18.886 A:middle
文件提供器改进的会议

00:38:18.886 --> 00:38:20.776 A:middle
以及一场关于 Spotlight 的会议

00:38:21.056 --> 00:38:22.206 A:middle
它会谈及你怎么样可以

00:38:22.206 --> 00:38:23.916 A:middle
拖放 Spotlight 为

00:38:23.916 --> 00:38:26.136 A:middle
你的 App 找到的

00:38:26.136 --> 00:38:26.986 A:middle
项目

00:38:26.986 --> 00:38:28.306 A:middle
如果你有任何问题

00:38:28.626 --> 00:38:30.026 A:middle
请来找我们

00:38:30.486 --> 00:38:31.886 A:middle
希望你们能享受

00:38:32.176 --> 00:38:33.236 A:middle
WWDC

00:38:34.516 --> 00:38:37.500 A:middle
[ 掌声 ]
