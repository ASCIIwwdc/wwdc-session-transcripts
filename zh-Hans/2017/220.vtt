WEBVTT

00:00:00.506 --> 00:00:27.056 A:middle
[掌声]

00:00:27.556 --> 00:00:28.596 A:middle
&gt;&gt; 大家下午好

00:00:28.676 --> 00:00:30.416 A:middle
欢迎参加 220 主题会议

00:00:30.416 --> 00:00:32.746 A:middle
WKWebView 中的自定义加载

00:00:33.706 --> 00:00:34.806 A:middle
我是 Brady Eidson

00:00:34.806 --> 00:00:36.376 A:middle
Apple 团队的

00:00:36.376 --> 00:00:37.636 A:middle
一名软件工程师

00:00:37.636 --> 00:00:38.986 A:middle
稍后我的同事

00:00:38.986 --> 00:00:40.686 A:middle
Alex Christensen 会和我一起

00:00:40.686 --> 00:00:41.216 A:middle
向大家介绍

00:00:41.746 --> 00:00:43.546 A:middle
现在我想问一个

00:00:43.546 --> 00:00:44.216 A:middle
很简短的问题

00:00:44.376 --> 00:00:46.456 A:middle
在座有多少人会

00:00:46.456 --> 00:00:47.966 A:middle
把网页内容集成到自己的手机应用里

00:00:48.476 --> 00:00:50.566 A:middle
今天大家可能都

00:00:50.566 --> 00:00:50.876 A:middle
来对了

00:00:51.876 --> 00:00:52.986 A:middle
接下来的问题是

00:00:52.986 --> 00:00:54.236 A:middle
在座各位有多少人使用过

00:00:54.236 --> 00:00:56.236 A:middle
WKWebView 来集成网页

00:00:56.236 --> 00:00:56.676 A:middle
内容呢

00:00:57.386 --> 00:00:58.546 A:middle
举手的人少了

00:00:58.546 --> 00:00:59.436 A:middle
不过还是蛮多的

00:00:59.656 --> 00:01:02.046 A:middle
我的内心非常激动 想和大家

00:00:59.656 --> 00:01:02.046 A:middle
我的内心非常激动 想和大家

00:01:02.046 --> 00:01:03.856 A:middle
聊一聊 WKWebView 里一些

00:01:03.856 --> 00:01:05.786 A:middle
精彩 全新的 API 所有正在使用

00:01:05.786 --> 00:01:07.036 A:middle
WKWebView 的人  将会由此而完成一些

00:01:07.036 --> 00:01:09.106 A:middle
炫酷新奇的事情  我们还希望能够

00:01:09.106 --> 00:01:11.566 A:middle
帮助在座的其他人

00:01:11.566 --> 00:01:13.286 A:middle
接受并使用

00:01:13.286 --> 00:01:13.986 A:middle
WKWebView

00:01:16.806 --> 00:01:19.666 A:middle
Apple 是网络技术的

00:01:19.666 --> 00:01:20.506 A:middle
忠实信徒

00:01:20.986 --> 00:01:23.076 A:middle
我们知道网络技术对我们的开发者

00:01:23.076 --> 00:01:25.396 A:middle
我们的用户以及你们的用户而言

00:01:25.506 --> 00:01:26.656 A:middle
有多么重要

00:01:27.196 --> 00:01:29.206 A:middle
我们拥有许多不同的技术

00:01:29.206 --> 00:01:30.866 A:middle
你可以通过它们

00:01:30.866 --> 00:01:32.206 A:middle
把网页内容集成到你的

00:01:32.206 --> 00:01:32.746 A:middle
App 里

00:01:33.886 --> 00:01:35.556 A:middle
今天的主要介绍内容是

00:01:35.556 --> 00:01:38.006 A:middle
WKWebView 但我想简单地

00:01:38.006 --> 00:01:39.946 A:middle
谈谈另一个内容 那就是

00:01:39.946 --> 00:01:41.516 A:middle
Safari View Controller

00:01:42.606 --> 00:01:45.036 A:middle
如果你需要一种 App 内网页

00:01:45.036 --> 00:01:47.516 A:middle
浏览体验 那么到目前为止

00:01:47.516 --> 00:01:48.936 A:middle
Safari View Controller 是

00:01:48.936 --> 00:01:50.216 A:middle
你的最佳选择

00:01:51.516 --> 00:01:53.216 A:middle
你只需使用几行代码

00:01:53.506 --> 00:01:55.316 A:middle
就可以把强大的

00:01:55.316 --> 00:01:57.356 A:middle
安全网页浏览器集成到

00:01:57.536 --> 00:01:57.816 A:middle
你的 App 当中

00:01:58.266 --> 00:01:59.346 A:middle
你甚至无需担心

00:01:59.346 --> 00:02:00.266 A:middle
增添用户界面的问题

00:01:59.346 --> 00:02:00.266 A:middle
增添用户界面的问题

00:02:00.896 --> 00:02:05.096 A:middle
然而在用户界面之下 就是

00:02:05.096 --> 00:02:05.536 A:middle
网页内容

00:02:06.236 --> 00:02:08.955 A:middle
在座许多人会有更高层次的需求

00:02:08.955 --> 00:02:10.866 A:middle
而不是通过平淡无奇的

00:02:10.866 --> 00:02:12.456 A:middle
网页浏览体验

00:02:12.456 --> 00:02:12.946 A:middle
就能满足

00:02:13.866 --> 00:02:16.596 A:middle
你们需要自定义

00:02:16.596 --> 00:02:19.426 A:middle
网页内容的加载行为

00:02:19.426 --> 00:02:22.146 A:middle
它的渲染方式

00:02:22.406 --> 00:02:24.916 A:middle
以及它如何与你的本地用户界面

00:02:24.916 --> 00:02:25.736 A:middle
进行交互

00:02:26.436 --> 00:02:29.066 A:middle
事实上 很多人可能是

00:02:29.116 --> 00:02:31.056 A:middle
采用了某种方式

00:02:31.056 --> 00:02:32.536 A:middle
把网页内容集成到你的本地用户界面里

00:02:32.536 --> 00:02:33.916 A:middle
以致于你根本看不出

00:02:33.916 --> 00:02:35.646 A:middle
是在使用网页内容

00:02:39.276 --> 00:02:43.036 A:middle
如果你是这种人 那么

00:02:43.466 --> 00:02:46.636 A:middle
目前为止 WKWebView 将是

00:02:46.636 --> 00:02:46.856 A:middle
你的最佳选择

00:02:46.856 --> 00:02:50.246 A:middle
现在我想要简单说说

00:02:50.246 --> 00:02:51.576 A:middle
WKWebView 的架构

00:02:52.746 --> 00:02:54.666 A:middle
当你使用 WKWebView

00:02:54.666 --> 00:02:56.096 A:middle
把网页集成到 App 当中时

00:02:56.096 --> 00:02:59.556 A:middle
实际上你是在向 App 里引入

00:02:59.556 --> 00:03:01.376 A:middle
整个网页平台

00:02:59.556 --> 00:03:01.376 A:middle
整个网页平台

00:03:01.376 --> 00:03:03.736 A:middle
包括它的所有功能

00:03:03.736 --> 00:03:05.636 A:middle
所有的灵活性  以及

00:03:05.866 --> 00:03:07.806 A:middle
所有的复杂性

00:03:09.596 --> 00:03:12.076 A:middle
所以说  WKWebView 用我们了解到的

00:03:12.076 --> 00:03:14.106 A:middle
最好的办法  把你的 App 和这种复杂性

00:03:14.416 --> 00:03:15.716 A:middle
隔离开来

00:03:16.296 --> 00:03:18.996 A:middle
它用进程隔离来完成

00:03:18.996 --> 00:03:19.706 A:middle
这项操作

00:03:20.406 --> 00:03:22.366 A:middle
我们加载网页内容

00:03:22.366 --> 00:03:23.576 A:middle
对它进行渲染  并执行

00:03:23.576 --> 00:03:25.176 A:middle
JavaScript 这类东西

00:03:25.436 --> 00:03:27.396 A:middle
它和你的 App 进程

00:03:27.396 --> 00:03:28.546 A:middle
各自运行 互不重叠

00:03:29.866 --> 00:03:31.416 A:middle
这给我们在安全性方面

00:03:31.516 --> 00:03:32.716 A:middle
带来了一些极大的好处

00:03:33.286 --> 00:03:35.166 A:middle
我们可以保护你的 App

00:03:35.446 --> 00:03:37.016 A:middle
免受潜在恶意网页内容的

00:03:37.016 --> 00:03:37.496 A:middle
损害

00:03:38.026 --> 00:03:40.426 A:middle
事实上 网页内容的不同部分

00:03:40.426 --> 00:03:41.876 A:middle
可以在各自的网页进程中

00:03:41.876 --> 00:03:43.286 A:middle
独立运行

00:03:43.836 --> 00:03:45.596 A:middle
因此 我们可以保护你的可信网页

00:03:45.596 --> 00:03:47.156 A:middle
免遭其他潜在

00:03:47.156 --> 00:03:48.296 A:middle
恶意网页的

00:03:48.296 --> 00:03:48.696 A:middle
攻击

00:03:50.136 --> 00:03:51.836 A:middle
这也带来了一些巨大的

00:03:51.956 --> 00:03:53.296 A:middle
性能优势

00:03:53.536 --> 00:03:54.626 A:middle
因为有安全保障

00:03:54.856 --> 00:03:55.766 A:middle
网页内容就可以

00:03:55.766 --> 00:03:57.276 A:middle
与你的 App 同时运行

00:03:57.276 --> 00:03:59.296 A:middle
我们可以启用高级的

00:03:59.296 --> 00:04:00.716 A:middle
JavaScript Just-In-Time

00:03:59.296 --> 00:04:00.716 A:middle
JavaScript Just-In-Time

00:04:00.716 --> 00:04:01.266 A:middle
编译器

00:04:01.806 --> 00:04:05.376 A:middle
但是 由于所有这些都是

00:04:05.376 --> 00:04:06.856 A:middle
在一个独立进程中展开

00:04:07.336 --> 00:04:08.876 A:middle
因此 你在配置流程时

00:04:09.086 --> 00:04:11.626 A:middle
采用的常规步骤

00:04:11.626 --> 00:04:13.166 A:middle
并不适用于网页内容

00:04:13.796 --> 00:04:15.896 A:middle
我们需要显式 API 与

00:04:15.896 --> 00:04:17.426 A:middle
网页内容进行交互

00:04:18.766 --> 00:04:20.005 A:middle
自从我们推出

00:04:20.005 --> 00:04:22.286 A:middle
WKWebView 就一直在收集

00:04:22.286 --> 00:04:23.946 A:middle
各式各样的开发者

00:04:23.946 --> 00:04:25.476 A:middle
关于各种 App 开发的

00:04:25.476 --> 00:04:26.266 A:middle
反馈信息

00:04:27.136 --> 00:04:29.596 A:middle
我们已经整理出一份清单

00:04:29.596 --> 00:04:31.516 A:middle
上面有我们今天将介绍的

00:04:31.516 --> 00:04:32.396 A:middle
三项最重要内容

00:04:32.396 --> 00:04:34.336 A:middle
我们认为这三个新机制

00:04:34.336 --> 00:04:36.996 A:middle
将能充分发挥

00:04:36.996 --> 00:04:38.376 A:middle
你们一直以来要求的

00:04:38.576 --> 00:04:39.676 A:middle
极为强大的

00:04:39.676 --> 00:04:39.876 A:middle
功能

00:04:43.046 --> 00:04:44.326 A:middle
我们首先要介绍的是

00:04:44.326 --> 00:04:46.236 A:middle
如何管理对于 WKWebView

00:04:46.346 --> 00:04:48.626 A:middle
可见的 Cookie

00:04:48.626 --> 00:04:52.676 A:middle
我们还将介绍一种

00:04:52.676 --> 00:04:53.876 A:middle
非常棒的机制

00:04:53.876 --> 00:04:56.956 A:middle
它可以从你的 WebView 里过滤

00:04:57.016 --> 00:04:57.706 A:middle
不需要的内容

00:04:58.106 --> 00:05:02.466 A:middle
最后 给大家介绍一种

00:04:58.106 --> 00:05:02.466 A:middle
最后 给大家介绍一种

00:05:02.466 --> 00:05:04.566 A:middle
能为网页内容提供自定义资源的方法

00:05:04.566 --> 00:05:07.286 A:middle
这样的话  无论你从哪里获得

00:05:07.286 --> 00:05:08.396 A:middle
这些自定义资源的数据

00:05:08.396 --> 00:05:09.016 A:middle
都能派上用场

00:05:09.016 --> 00:05:10.236 A:middle
无论数据

00:05:10.236 --> 00:05:10.656 A:middle
来自哪里

00:05:11.196 --> 00:05:15.516 A:middle
那么 首先来说说 Cookie 管理

00:05:16.036 --> 00:05:18.536 A:middle
事实上 我们知道有许多

00:05:18.836 --> 00:05:20.396 A:middle
初次涉入 WKWebView

00:05:20.396 --> 00:05:22.256 A:middle
这个领域的开发人员

00:05:22.436 --> 00:05:23.636 A:middle
对网络平台

00:05:23.636 --> 00:05:24.116 A:middle
很不熟悉

00:05:24.926 --> 00:05:25.976 A:middle
所以我想简略介绍一下

00:05:26.146 --> 00:05:28.306 A:middle
什么是 Cookie

00:05:28.816 --> 00:05:30.376 A:middle
当某个网页在浏览器引擎中

00:05:30.376 --> 00:05:32.376 A:middle
进行渲染时 会出现

00:05:32.376 --> 00:05:33.216 A:middle
很多子资源

00:05:33.466 --> 00:05:36.236 A:middle
如图片 JavaScript 文件

00:05:36.236 --> 00:05:38.086 A:middle
样式表  诸如此类

00:05:38.496 --> 00:05:40.596 A:middle
针对每一种子资源 我们都需要

00:05:40.596 --> 00:05:42.036 A:middle
向服务器发出请求

00:05:42.226 --> 00:05:44.336 A:middle
服务器需要响应

00:05:44.386 --> 00:05:46.546 A:middle
资源本身的数据  以及

00:05:47.136 --> 00:05:48.366 A:middle
与该资源有关的一些

00:05:48.366 --> 00:05:48.896 A:middle
元数据

00:05:49.396 --> 00:05:51.576 A:middle
这些请求和响应里

00:05:51.576 --> 00:05:53.216 A:middle
都包含一小段数据

00:05:53.216 --> 00:05:54.226 A:middle
称为 Cookie

00:05:55.416 --> 00:05:56.676 A:middle
服务器将使用浏览器所记忆

00:05:56.676 --> 00:05:58.406 A:middle
的 Cookie 进行响应

00:05:58.406 --> 00:06:00.386 A:middle
并且能够在将来的请求中

00:05:58.406 --> 00:06:00.386 A:middle
并且能够在将来的请求中

00:06:00.386 --> 00:06:01.626 A:middle
将其发送回

00:06:01.626 --> 00:06:02.326 A:middle
服务器

00:06:03.206 --> 00:06:04.856 A:middle
这有助于追踪用户

00:06:04.856 --> 00:06:06.286 A:middle
在使用网络 App 时的

00:06:06.286 --> 00:06:06.976 A:middle
会话

00:06:07.646 --> 00:06:09.726 A:middle
这就像是他们登录时的

00:06:09.726 --> 00:06:10.316 A:middle
凭据

00:06:10.316 --> 00:06:12.016 A:middle
他们的登录状态

00:06:12.016 --> 00:06:12.516 A:middle
一种登录令牌

00:06:13.056 --> 00:06:14.636 A:middle
或者 如果是一个购物 App

00:06:14.636 --> 00:06:17.006 A:middle
它可能会记录

00:06:17.006 --> 00:06:18.166 A:middle
用户购物车的状态和

00:06:18.166 --> 00:06:20.466 A:middle
其中的商品

00:06:20.966 --> 00:06:22.066 A:middle
当你把网页内容集成

00:06:22.066 --> 00:06:23.226 A:middle
到本地 App 时

00:06:23.226 --> 00:06:26.146 A:middle
你经常需要操纵

00:06:26.146 --> 00:06:27.636 A:middle
这些小片段数据

00:06:28.876 --> 00:06:31.096 A:middle
你需要提前知道

00:06:31.096 --> 00:06:32.976 A:middle
一些信息 这样有助于

00:06:32.976 --> 00:06:33.436 A:middle
提示 WebView 做好准备

00:06:33.436 --> 00:06:35.736 A:middle
让体验变得更为流畅

00:06:35.736 --> 00:06:38.576 A:middle
你可能需要执行某项操作

00:06:38.576 --> 00:06:40.316 A:middle
例如添加“注销”按钮

00:06:40.316 --> 00:06:41.496 A:middle
这样你可以直接删除

00:06:41.496 --> 00:06:43.186 A:middle
会话的 Cookie  或者是

00:06:43.186 --> 00:06:45.036 A:middle
代表用户登录会话

00:06:45.036 --> 00:06:46.056 A:middle
的 Cookie

00:06:47.616 --> 00:06:49.796 A:middle
为什么你可能会需要

00:06:49.866 --> 00:06:51.686 A:middle
管理 Cookie

00:06:51.686 --> 00:06:53.456 A:middle
这个问题  还有另一方面的原因

00:06:53.456 --> 00:06:54.976 A:middle
它与辅助会话进程

00:06:54.976 --> 00:06:55.746 A:middle
正好相反

00:06:56.046 --> 00:06:57.516 A:middle
你也许需要对用户进行保护

00:06:57.576 --> 00:06:59.376 A:middle
不让他们的会话

00:06:59.376 --> 00:07:02.426 A:middle
被某些类型的 App 或者是某些用户

00:06:59.376 --> 00:07:02.426 A:middle
被某些类型的 App 或者是某些用户

00:07:02.426 --> 00:07:03.876 A:middle
进行追踪

00:07:03.876 --> 00:07:05.586 A:middle
近期以来

00:07:05.586 --> 00:07:07.336 A:middle
这个问题

00:07:07.336 --> 00:07:09.106 A:middle
越来越引起人们的重视

00:07:10.396 --> 00:07:12.216 A:middle
因此 无论你出于何种原因

00:07:12.216 --> 00:07:13.606 A:middle
要操纵某个 WKWebView 可见的

00:07:13.606 --> 00:07:15.786 A:middle
Cookie  这个全新的 API

00:07:15.786 --> 00:07:19.096 A:middle
WKHTTPCookieStore 它将会满足

00:07:19.096 --> 00:07:21.496 A:middle
你的相关需求

00:07:22.316 --> 00:07:25.036 A:middle
使用 HTTPCookieStore 你就

00:07:25.076 --> 00:07:26.876 A:middle
可以添加和移除

00:07:26.876 --> 00:07:28.376 A:middle
WebView 可见的个人 Cookie 记录

00:07:29.716 --> 00:07:32.676 A:middle
非常直观明了

00:07:32.676 --> 00:07:35.226 A:middle
你也能够获取一份列表

00:07:35.226 --> 00:07:36.546 A:middle
列出 WebView 里可见的

00:07:36.546 --> 00:07:36.806 A:middle
所有 Cookie

00:07:36.806 --> 00:07:39.096 A:middle
如果你是一名经验丰富的

00:07:39.576 --> 00:07:41.776 A:middle
WKWebView 用户 你可能已经

00:07:41.776 --> 00:07:43.526 A:middle
使用 JavaScript 获取过

00:07:43.526 --> 00:07:46.256 A:middle
某个 WebView 在当前展示的文档

00:07:46.256 --> 00:07:48.036 A:middle
可见的 Cookie

00:07:49.066 --> 00:07:50.196 A:middle
可是当你这样操作时 你并不能

00:07:50.196 --> 00:07:52.736 A:middle
控制应该对 JavaScript

00:07:52.886 --> 00:07:53.706 A:middle
进行隐藏  属性为

00:07:53.706 --> 00:07:54.456 A:middle
HttpOnly 的 Cookie

00:07:55.216 --> 00:07:56.376 A:middle
但现在就可以办到了

00:07:56.676 --> 00:08:00.926 A:middle
最后 它为大家增添了

00:07:56.676 --> 00:08:00.926 A:middle
最后 它为大家增添了

00:08:00.926 --> 00:08:02.566 A:middle
一种机制 可用于观察

00:08:02.566 --> 00:08:03.846 A:middle
Cookie 存储的变化

00:08:04.586 --> 00:08:06.076 A:middle
虽然你可能会特意

00:08:06.076 --> 00:08:07.996 A:middle
从 Cookie 存储里添加或移除 Cookie

00:08:07.996 --> 00:08:10.216 A:middle
但是  任何发送给服务器

00:08:10.216 --> 00:08:11.536 A:middle
并返回的资源请求

00:08:11.536 --> 00:08:13.066 A:middle
都可以在存储里添加新的 Cookie

00:08:13.066 --> 00:08:15.046 A:middle
或者是在页面执行的JavaScript

00:08:15.046 --> 00:08:16.706 A:middle
也可以添加

00:08:16.836 --> 00:08:17.936 A:middle
新的 Cookie

00:08:18.276 --> 00:08:20.156 A:middle
现在你可以观察到这些

00:08:20.156 --> 00:08:20.706 A:middle
变化

00:08:22.626 --> 00:08:24.896 A:middle
所以说 你可以通过 WKWebView Cookie 的

00:08:24.896 --> 00:08:27.276 A:middle
网址数据库

00:08:27.276 --> 00:08:28.636 A:middle
进入它某个具体的存储库

00:08:29.286 --> 00:08:30.466 A:middle
这已经是 WebView

00:08:30.466 --> 00:08:31.826 A:middle
配置中展现的一种

00:08:31.826 --> 00:08:32.626 A:middle
属性

00:08:32.926 --> 00:08:34.326 A:middle
目前来看  网址数据库

00:08:34.326 --> 00:08:35.966 A:middle
自身已经拥有一种连接

00:08:35.966 --> 00:08:36.635 A:middle
Cookie 存储库的新属性

00:08:36.635 --> 00:08:42.025 A:middle
你如果要添加 Cookie 就使用

00:08:42.025 --> 00:08:44.145 A:middle
已经设计好的 HTTPCookie API

00:08:44.145 --> 00:08:46.316 A:middle
来构建自己想要放入

00:08:46.316 --> 00:08:47.596 A:middle
数据库的

00:08:47.596 --> 00:08:48.106 A:middle
Cookie 对象

00:08:48.896 --> 00:08:52.376 A:middle
这些具体细节取决于

00:08:52.376 --> 00:08:53.986 A:middle
你自己 以及你正在交互的

00:08:53.986 --> 00:08:56.166 A:middle
网络服务 不过  一旦你

00:08:56.166 --> 00:08:57.176 A:middle
设置好 Cookie

00:08:57.176 --> 00:08:59.706 A:middle
并且准备运行 你将从

00:08:59.736 --> 00:09:00.956 A:middle
存有你自己 Cookie 的 Cookie 存储器里

00:08:59.736 --> 00:09:00.956 A:middle
存有你自己 Cookie 的 Cookie 存储器里

00:09:00.996 --> 00:09:01.396 A:middle
调用 Set-Cookie

00:09:02.506 --> 00:09:03.416 A:middle
现在你将看到  这里是

00:09:03.416 --> 00:09:04.526 A:middle
你的尾随闭包

00:09:04.526 --> 00:09:05.436 A:middle
一个 Completion Handler

00:09:05.906 --> 00:09:08.316 A:middle
这个进程是不同步的

00:09:08.316 --> 00:09:09.736 A:middle
它需要向外发送给

00:09:09.736 --> 00:09:12.106 A:middle
WKWebView 机制所包含

00:09:12.106 --> 00:09:14.516 A:middle
且与你的 App 相隔离的

00:09:14.516 --> 00:09:15.916 A:middle
所有进程

00:09:16.106 --> 00:09:18.146 A:middle
所以你需要等到 WebKit

00:09:18.146 --> 00:09:19.696 A:middle
来判定这一切都已

00:09:19.696 --> 00:09:20.096 A:middle
准备就绪

00:09:20.096 --> 00:09:21.966 A:middle
你可以对你的

00:09:21.966 --> 00:09:23.716 A:middle
Completion Handler 保持信心

00:09:23.716 --> 00:09:25.016 A:middle
相信你在 WebView 里加载的

00:09:25.356 --> 00:09:26.866 A:middle
任何请求都会使用到这个 Cookie

00:09:30.176 --> 00:09:31.546 A:middle
如果你需要操纵

00:09:31.546 --> 00:09:33.776 A:middle
现有的 Cookie 你可以获取到

00:09:33.776 --> 00:09:34.956 A:middle
所有 Cookie 的集合

00:09:36.006 --> 00:09:37.156 A:middle
再说一次 在你的 Completion Handler 中

00:09:37.156 --> 00:09:38.586 A:middle
你将拥有一组 Cookie

00:09:38.586 --> 00:09:39.676 A:middle
你可以做些尝试

00:09:39.676 --> 00:09:40.796 A:middle
并找到那个最合适的

00:09:41.386 --> 00:09:42.616 A:middle
在这个示例中  我们

00:09:42.806 --> 00:09:44.386 A:middle
要通过在 Cookie 里

00:09:44.386 --> 00:09:45.756 A:middle
查找日志来注销用户

00:09:46.286 --> 00:09:49.336 A:middle
然后我们会调用删除

00:09:49.336 --> 00:09:50.136 A:middle
把那条 Cookie 处理掉

00:09:50.986 --> 00:09:52.166 A:middle
再次说明 在我们的 Compleition Handler 中

00:09:52.166 --> 00:09:53.896 A:middle
我们将发现  今后出现在 WebView 里的

00:09:53.896 --> 00:09:55.116 A:middle
任何请求都将会

00:09:55.356 --> 00:09:56.516 A:middle
移除这个 Cookie

00:09:56.906 --> 00:09:58.286 A:middle
这些是使用

00:09:58.286 --> 00:10:00.016 A:middle
WKHTTPCookieStore 来管理 Cookie的

00:09:58.286 --> 00:10:00.016 A:middle
WKHTTPCookieStore 来管理 Cookie的

00:10:00.066 --> 00:10:01.496 A:middle
基础知识

00:10:02.086 --> 00:10:03.376 A:middle
稍后我们将了解更多

00:10:03.376 --> 00:10:04.936 A:middle
与之相关的信息

00:10:04.936 --> 00:10:07.476 A:middle
下面我想接着介绍 如何过滤

00:10:08.836 --> 00:10:09.086 A:middle
不需要的内容

00:10:10.126 --> 00:10:11.786 A:middle
当你在 WebView HTML 文件里

00:10:11.786 --> 00:10:13.656 A:middle
加载页面时

00:10:14.436 --> 00:10:15.776 A:middle
所有那些子资源都会

00:10:15.926 --> 00:10:17.016 A:middle
一同加载 我在前面提到过

00:10:17.016 --> 00:10:17.446 A:middle
这一点

00:10:18.566 --> 00:10:20.106 A:middle
有许许多多的原因

00:10:20.106 --> 00:10:21.566 A:middle
使得你需要

00:10:21.566 --> 00:10:23.956 A:middle
以资源为基础

00:10:23.956 --> 00:10:25.216 A:middle
来进行考虑 从而决定是否

00:10:25.216 --> 00:10:27.216 A:middle
应该加载某个资源

00:10:27.216 --> 00:10:28.286 A:middle
或者是改变资源加载的

00:10:28.286 --> 00:10:28.676 A:middle
方式

00:10:29.226 --> 00:10:31.596 A:middle
我们从开发人员那里

00:10:31.596 --> 00:10:33.496 A:middle
经常听到的情况是

00:10:33.496 --> 00:10:36.076 A:middle
他们正在创建一种浏览器  适用对象是学校

00:10:36.076 --> 00:10:37.756 A:middle
图书馆  以及其他公共场所

00:10:37.756 --> 00:10:40.586 A:middle
那些地方的浏览器

00:10:40.586 --> 00:10:41.886 A:middle
加载的内容必须是

00:10:41.886 --> 00:10:42.316 A:middle
老少皆宜的

00:10:42.616 --> 00:10:43.786 A:middle
因此我们需要过滤掉

00:10:43.786 --> 00:10:45.466 A:middle
所有不适合全家人使用的

00:10:45.466 --> 00:10:45.796 A:middle
内容

00:10:46.316 --> 00:10:50.206 A:middle
从另一个类似的渠道 我们还从

00:10:50.206 --> 00:10:51.156 A:middle
设计企业局域网 App 的

00:10:51.156 --> 00:10:52.896 A:middle
开发人员那里得知

00:10:53.336 --> 00:10:54.596 A:middle
他们在同一款 App 里

00:10:54.596 --> 00:10:55.476 A:middle
有不同的需求

00:10:55.556 --> 00:10:57.576 A:middle
某一个 WebView 可能

00:10:57.576 --> 00:10:59.506 A:middle
需要拦截所有来自

00:10:59.506 --> 00:11:00.596 A:middle
公司网络以外的内容

00:10:59.506 --> 00:11:00.596 A:middle
公司网络以外的内容

00:11:01.036 --> 00:11:02.266 A:middle
另一个 WebView 可能需要

00:11:02.266 --> 00:11:04.326 A:middle
拦截来自某些特定服务器的

00:11:04.446 --> 00:11:05.996 A:middle
所有内容

00:11:06.486 --> 00:11:07.936 A:middle
你可以对每个 WebView 进行设置

00:11:08.296 --> 00:11:10.976 A:middle
使它在每个子资源的基础上

00:11:10.976 --> 00:11:11.866 A:middle
完成自己的工作

00:11:15.536 --> 00:11:16.866 A:middle
此外还有不安全的

00:11:16.866 --> 00:11:17.356 A:middle
内容

00:11:17.966 --> 00:11:19.396 A:middle
我们可以对它进行升级  尽全力达到

00:11:19.396 --> 00:11:21.306 A:middle
最佳安全度

00:11:21.716 --> 00:11:23.446 A:middle
这样可以保证

00:11:23.446 --> 00:11:25.266 A:middle
我们用户的数据、浏览行为

00:11:25.426 --> 00:11:26.896 A:middle
以及我们 App 的浏览行为

00:11:27.436 --> 00:11:28.836 A:middle
免受他人窥探

00:11:32.116 --> 00:11:35.526 A:middle
因此  全新的 WKContentRuleList API

00:11:35.526 --> 00:11:37.986 A:middle
将帮助你实现所有

00:11:39.956 --> 00:11:40.086 A:middle
这些事情

00:11:40.286 --> 00:11:42.386 A:middle
好 如果你熟悉

00:11:42.986 --> 00:11:44.916 A:middle
Safari 的内容拦截扩展

00:11:44.966 --> 00:11:47.076 A:middle
你可以在此提供一条

00:11:47.076 --> 00:11:49.676 A:middle
用来配置 Safari  让它

00:11:49.676 --> 00:11:51.326 A:middle
能够阻止某些资源的加载

00:11:52.226 --> 00:11:54.766 A:middle
ContentRuleList 与

00:11:54.866 --> 00:11:56.536 A:middle
那些内容拦截程序扩展的

00:11:56.536 --> 00:11:57.126 A:middle
句法相同

00:11:57.526 --> 00:12:01.276 A:middle
使用它们 你可以

00:11:57.526 --> 00:12:01.276 A:middle
使用它们 你可以

00:12:01.396 --> 00:12:04.406 A:middle
通过以下方式阻止

00:12:04.666 --> 00:12:06.636 A:middle
特定的资源加载 例如

00:12:06.636 --> 00:12:07.876 A:middle
将资源的 URL 与正则表达式

00:12:07.876 --> 00:12:08.396 A:middle
进行匹配

00:12:08.686 --> 00:12:10.016 A:middle
你或许可以提前告诉 WebKit

00:12:10.016 --> 00:12:11.706 A:middle
绝不要加载这样的

00:12:11.926 --> 00:12:12.886 A:middle
URL

00:12:13.236 --> 00:12:17.436 A:middle
在某些情况下  如果你一古脑儿地拦截了

00:12:17.436 --> 00:12:19.176 A:middle
所有的资源  那么你就

00:12:19.176 --> 00:12:21.246 A:middle
可以用含蓄的方式

00:12:21.346 --> 00:12:22.906 A:middle
有时可以用直白的方式

00:12:23.466 --> 00:12:25.296 A:middle
因此有一个规则操作

00:12:25.296 --> 00:12:26.716 A:middle
你可以让 Webkit 执行加载

00:12:26.716 --> 00:12:28.386 A:middle
但要让生成的内容

00:12:28.386 --> 00:12:29.576 A:middle
对用户不可见

00:12:29.976 --> 00:12:34.926 A:middle
这样到最后我们就可以将

00:12:34.926 --> 00:12:37.356 A:middle
那些不安全的资源加载

00:12:37.356 --> 00:12:38.396 A:middle
升级为安全的加载

00:12:39.126 --> 00:12:40.216 A:middle
这有两种重要的

00:12:40.216 --> 00:12:40.726 A:middle
形式

00:12:40.896 --> 00:12:45.156 A:middle
一种是你遇到的任何 HTTP

00:12:45.646 --> 00:12:47.446 A:middle
纯文本 URL  你可以把它

00:12:47.446 --> 00:12:49.306 A:middle
升级为加密的

00:12:49.306 --> 00:12:50.196 A:middle
HTTP URL

00:12:51.336 --> 00:12:54.146 A:middle
你也可以阻止 Cookie

00:12:54.446 --> 00:12:56.156 A:middle
让它们无法和某些请求一起

00:12:56.156 --> 00:12:56.876 A:middle
向外发送

00:12:57.336 --> 00:12:58.576 A:middle
如果请求的资源具有

00:12:58.576 --> 00:13:01.026 A:middle
敏感内容 那么

00:12:58.576 --> 00:13:01.026 A:middle
敏感内容 那么

00:13:01.156 --> 00:13:03.526 A:middle
你可以对用户的数据和

00:13:03.526 --> 00:13:05.116 A:middle
会话进行保护  以免它们

00:13:05.116 --> 00:13:06.216 A:middle
随着这些请求而泄漏

00:13:08.516 --> 00:13:11.646 A:middle
当你向 WebKit 提供规则列表时

00:13:11.646 --> 00:13:14.886 A:middle
WebKit 会把它编译成

00:13:15.096 --> 00:13:16.846 A:middle
有效的字节码格式

00:13:17.066 --> 00:13:19.336 A:middle
这是一种执行细节

00:13:19.336 --> 00:13:21.166 A:middle
它与你并没有

00:13:21.166 --> 00:13:22.506 A:middle
直接的关联

00:13:22.726 --> 00:13:25.126 A:middle
我之所以提到它  是因为

00:13:25.126 --> 00:13:26.636 A:middle
我想向大家保证

00:13:26.636 --> 00:13:28.666 A:middle
无论是一个内容规则列表

00:13:28.756 --> 00:13:31.626 A:middle
还是数千条规则形成的巨大集合

00:13:31.626 --> 00:13:32.966 A:middle
我们都投入了大量时间精力

00:13:32.966 --> 00:13:33.986 A:middle
从而让事情

00:13:34.326 --> 00:13:35.496 A:middle
尽可能地高效运行

00:13:35.496 --> 00:13:36.976 A:middle
无论你的规则集

00:13:36.976 --> 00:13:38.636 A:middle
有多么庞大 只要它编译成功

00:13:38.636 --> 00:13:40.666 A:middle
你就能看到

00:13:40.666 --> 00:13:41.866 A:middle
它的加载性能

00:13:41.866 --> 00:13:42.546 A:middle
不会出现降低

00:13:46.906 --> 00:13:49.106 A:middle
你用简单的 JSON 格式

00:13:49.106 --> 00:13:51.066 A:middle
来提供规则

00:13:52.196 --> 00:13:54.586 A:middle
JSON 拥有好几对

00:13:55.146 --> 00:13:55.986 A:middle
触发器和动作

00:13:56.746 --> 00:13:58.286 A:middle
在大屏幕上的这个例子里

00:13:58.286 --> 00:14:01.456 A:middle
这个触发器正在匹配

00:13:58.286 --> 00:14:01.456 A:middle
这个触发器正在匹配

00:14:01.456 --> 00:14:03.376 A:middle
一个 URL 这是 URL

00:14:03.476 --> 00:14:04.906 A:middle
对于每一个 URL 来说

00:14:04.906 --> 00:14:05.946 A:middle
这是一个正则表达式

00:14:06.356 --> 00:14:09.436 A:middle
它表明所有 URL 都要执行

00:14:09.436 --> 00:14:11.566 A:middle
生成 URL HTTP 的动作

00:14:12.286 --> 00:14:15.466 A:middle
所以说这是一个普通而又

00:14:15.466 --> 00:14:17.996 A:middle
重要的一揽子解决办法

00:14:17.996 --> 00:14:19.716 A:middle
它把所有的纯文本请求

00:14:19.876 --> 00:14:22.866 A:middle
升级为加密内容

00:14:23.196 --> 00:14:26.456 A:middle
我不打算在这里

00:14:26.456 --> 00:14:27.936 A:middle
讨论其他现有的动作

00:14:27.936 --> 00:14:30.926 A:middle
和触发器  因为今天我

00:14:30.926 --> 00:14:31.996 A:middle
想谈的事情还有很多

00:14:31.996 --> 00:14:33.826 A:middle
但我们会给大家

00:14:33.826 --> 00:14:35.456 A:middle
介绍一些资源

00:14:35.456 --> 00:14:37.586 A:middle
以便全面获取

00:14:37.586 --> 00:14:39.126 A:middle
你们可以得到的信息

00:14:40.696 --> 00:14:43.046 A:middle
一旦你有了自己的 JSON 你要把它

00:14:43.046 --> 00:14:44.746 A:middle
传送给相关的新 API

00:14:44.786 --> 00:14:47.486 A:middle
也就是 KContentRuleListStore

00:14:47.486 --> 00:14:49.336 A:middle
从而把它编译成有效的

00:14:49.336 --> 00:14:50.766 A:middle
字节码格式

00:14:52.716 --> 00:14:54.556 A:middle
现在请注意 有一个字符串

00:14:54.626 --> 00:14:56.086 A:middle
标识符传送进来了

00:14:56.536 --> 00:14:58.146 A:middle
现在要由你来决定

00:14:58.146 --> 00:14:59.896 A:middle
字符串的性质

00:14:59.896 --> 00:15:01.636 A:middle
要不了多久  它就要

00:14:59.896 --> 00:15:01.636 A:middle
要不了多久  它就要

00:15:02.166 --> 00:15:02.266 A:middle
起作用了

00:15:04.456 --> 00:15:06.466 A:middle
你将获得一个 Completion Handler

00:15:06.466 --> 00:15:07.556 A:middle
当你通过 WKContentRuleList

00:15:07.556 --> 00:15:08.316 A:middle
调用这个 Completion Handler时

00:15:08.316 --> 00:15:10.586 A:middle
就可以用那个已经安装的规则列表

00:15:10.586 --> 00:15:11.916 A:middle
来创建一个 WebView

00:15:11.916 --> 00:15:14.016 A:middle
并开始加载内容

00:15:14.016 --> 00:15:16.246 A:middle
--加载网页内容

00:15:16.246 --> 00:15:17.776 A:middle
它可以滤除

00:15:17.776 --> 00:15:19.156 A:middle
不需要的子资源

00:15:19.426 --> 00:15:22.756 A:middle
标识符也是如此

00:15:23.746 --> 00:15:25.396 A:middle
当我们通过 JSON  把一个规则列表

00:15:25.396 --> 00:15:27.176 A:middle
编译为有效的字节码

00:15:27.176 --> 00:15:28.916 A:middle
格式时  你可以给它命名

00:15:29.306 --> 00:15:31.286 A:middle
然后你就可以使用

00:15:31.286 --> 00:15:33.126 A:middle
同一标识符进行查找

00:15:33.126 --> 00:15:34.426 A:middle
这样你就不用再重新编译它

00:15:34.656 --> 00:15:36.976 A:middle
WebKit 把它存入设备的存储器

00:15:36.976 --> 00:15:39.546 A:middle
这样它在以后就可以

00:15:39.546 --> 00:15:40.376 A:middle
更快速地查找

00:15:40.876 --> 00:15:42.066 A:middle
所以你可以-- 你只需要

00:15:42.066 --> 00:15:43.906 A:middle
把某个规则集编译一次就可以了

00:15:44.256 --> 00:15:47.326 A:middle
一旦你获得我刚才提到的

00:15:47.326 --> 00:15:50.486 A:middle
WKContentRuleList

00:15:50.486 --> 00:15:51.756 A:middle
就把它添加到

00:15:51.756 --> 00:15:53.946 A:middle
WebView 配置中  那么现在

00:15:54.056 --> 00:15:54.716 A:middle
你马上就可以运行它了

00:15:55.296 --> 00:15:57.306 A:middle
我相信  没有什么

00:15:57.306 --> 00:15:59.096 A:middle
比一场演示更能让你了解到全新API的

00:15:59.096 --> 00:16:00.346 A:middle
炫酷功能

00:15:59.096 --> 00:16:00.346 A:middle
炫酷功能

00:16:00.446 --> 00:16:01.936 A:middle
所以我想邀请 Alex 上台

00:16:01.936 --> 00:16:03.406 A:middle
为大家展示更多

00:16:03.406 --> 00:16:03.746 A:middle
精彩

00:16:04.516 --> 00:16:09.996 A:middle
[掌声]

00:16:10.496 --> 00:16:11.346 A:middle
&gt;&gt; 谢谢 Brady

00:16:13.396 --> 00:16:16.646 A:middle
我正在制作一款 App

00:16:16.646 --> 00:16:17.516 A:middle
它是个教育类 App

00:16:17.896 --> 00:16:20.236 A:middle
这款软件能使人们对

00:16:20.236 --> 00:16:22.456 A:middle
某个主题有更多了解

00:16:23.226 --> 00:16:25.226 A:middle
这个主题让我感到非常快乐

00:16:25.226 --> 00:16:26.566 A:middle
就是狗

00:16:27.696 --> 00:16:30.706 A:middle
那么  我的用户是需要

00:16:30.706 --> 00:16:31.796 A:middle
在线阅读一些文章的

00:16:33.066 --> 00:16:34.916 A:middle
他们要参加一个根据这些文章内容

00:16:34.916 --> 00:16:36.386 A:middle
而设定的测验 然后将会

00:16:36.386 --> 00:16:38.376 A:middle
获得一份证书

00:16:39.556 --> 00:16:41.396 A:middle
因为我准备

00:16:41.396 --> 00:16:42.716 A:middle
显示网页内容  还要把它们

00:16:42.716 --> 00:16:44.156 A:middle
集成到我的 App 里面  所以我准备

00:16:44.156 --> 00:16:46.326 A:middle
使用 WKWebView

00:16:53.456 --> 00:16:54.246 A:middle
马上开始

00:16:55.086 --> 00:16:58.896 A:middle
我们现在有一个非常简单的 App

00:16:58.896 --> 00:17:01.426 A:middle
基本上不用做别的 只需要打开

00:16:58.896 --> 00:17:01.426 A:middle
基本上不用做别的 只需要打开

00:17:01.516 --> 00:17:03.696 A:middle
WKWebView  再在它里面打开

00:17:03.696 --> 00:17:05.526 A:middle
网页内容

00:17:06.086 --> 00:17:08.006 A:middle
让我们把它拿出来看看

00:17:08.006 --> 00:17:11.606 A:middle
到底是什么样

00:17:11.766 --> 00:17:13.945 A:middle
好了 这个 Web 服务检查了

00:17:14.596 --> 00:17:18.185 A:middle
当前这个 Http 页头的

00:17:18.185 --> 00:17:21.685 A:middle
一个 Cookie  以便显示

00:17:21.685 --> 00:17:25.076 A:middle
这名学生是谁 如果没有 Cookie  的话

00:17:25.076 --> 00:17:27.406 A:middle
它会继续把我们引领到

00:17:27.406 --> 00:17:28.415 A:middle
一个登录界面

00:17:29.716 --> 00:17:32.576 A:middle
然后我们可以点击这里

00:17:32.576 --> 00:17:33.086 A:middle
登录

00:17:34.276 --> 00:17:37.596 A:middle
我们可以登录 不过这项

00:17:38.066 --> 00:17:39.726 A:middle
用户体验还可以改进

00:17:39.726 --> 00:17:44.666 A:middle
或许我们已经

00:17:44.666 --> 00:17:46.076 A:middle
通过 Touch ID 或其他方式

00:17:46.076 --> 00:17:47.056 A:middle
登录 App 了

00:17:47.516 --> 00:17:49.076 A:middle
我们知道如何利用这个

00:17:49.076 --> 00:17:50.256 A:middle
Web 服务进行交流

00:17:51.076 --> 00:17:52.556 A:middle
实际上  这位用户

00:17:52.556 --> 00:17:53.996 A:middle
是通过 Cookie 登录的

00:17:54.296 --> 00:17:56.566 A:middle
所以我们接下来就看一看这个

00:18:02.636 --> 00:18:04.616 A:middle
要想做到这一点 我们需要创建

00:18:04.616 --> 00:18:05.426 A:middle
一个 HTTP Cookie

00:18:06.396 --> 00:18:09.406 A:middle
我们需要将这个 Cookie

00:18:09.406 --> 00:18:10.546 A:middle
放入一个网址数据库的

00:18:10.626 --> 00:18:14.666 A:middle
HTTPCookieStore  使用

00:18:14.666 --> 00:18:16.426 A:middle
API 新创建的 Cookie

00:18:17.176 --> 00:18:21.616 A:middle
一旦完成这一步  我们

00:18:21.616 --> 00:18:24.236 A:middle
就需要告诉 WKWebView

00:18:24.406 --> 00:18:27.566 A:middle
让它使用包含这个 Cookie的

00:18:27.626 --> 00:18:30.136 A:middle
网址数据库

00:18:30.136 --> 00:18:32.006 A:middle
我们通过 WKWebView 的配置

00:18:32.006 --> 00:18:32.786 A:middle
来完成这些

00:18:34.076 --> 00:18:34.636 A:middle
就这样

00:18:36.126 --> 00:18:38.566 A:middle
把这个网址数据库设置为

00:18:38.566 --> 00:18:40.576 A:middle
含有 Cookie 的网址数据库

00:18:40.576 --> 00:18:41.666 A:middle
然后我们按照前面的程序

00:18:41.666 --> 00:18:42.096 A:middle
再做一遍

00:18:42.686 --> 00:18:43.886 A:middle
使用这个配置

00:18:44.086 --> 00:18:44.946 A:middle
打开一个 WebView

00:18:45.036 --> 00:18:45.976 A:middle
打开网页内容

00:18:54.236 --> 00:18:54.896 A:middle
好了

00:18:55.096 --> 00:18:56.856 A:middle
我们立马登录

00:18:56.856 --> 00:18:57.466 A:middle
成功

00:18:57.816 --> 00:19:00.326 A:middle
我们最初的请求在页头上

00:18:57.816 --> 00:19:00.326 A:middle
我们最初的请求在页头上

00:19:00.326 --> 00:19:01.786 A:middle
是有这个 HTTP Cookie 的

00:19:02.486 --> 00:19:06.446 A:middle
所以  我想让用户读的这篇

00:19:06.446 --> 00:19:09.996 A:middle
文章里面有一些

00:19:09.996 --> 00:19:12.246 A:middle
已加载到未加密

00:19:13.216 --> 00:19:15.026 A:middle
HTTP 链接的子资源

00:19:15.946 --> 00:19:18.486 A:middle
在默认状态下 我们这个 App的

00:19:19.726 --> 00:19:21.506 A:middle
传输安全性通过阻止加载

00:19:21.536 --> 00:19:22.996 A:middle
未加密 HTTP 链接的方式  来保证

00:19:22.996 --> 00:19:25.396 A:middle
用户安全

00:19:26.126 --> 00:19:30.266 A:middle
就在这个地方  我们看到了一些

00:19:30.376 --> 00:19:33.146 A:middle
缺失的图像

00:19:34.046 --> 00:19:36.606 A:middle
我们想要通过它们来

00:19:36.606 --> 00:19:38.696 A:middle
获取这些图像的服务器

00:19:39.586 --> 00:19:41.306 A:middle
都已经成功配置了

00:19:41.306 --> 00:19:43.946 A:middle
HTTP TLS 证书

00:19:44.576 --> 00:19:46.876 A:middle
如果我们发出一个

00:19:47.166 --> 00:19:49.756 A:middle
加密的 HTTP 请求

00:19:49.756 --> 00:19:51.506 A:middle
它会以同样的图像响应

00:19:52.746 --> 00:19:54.936 A:middle
所以如果我们想要进入

00:19:55.366 --> 00:19:58.356 A:middle
并且获得 HTTP URL

00:19:58.356 --> 00:20:01.146 A:middle
然后把它变成

00:19:58.356 --> 00:20:01.146 A:middle
然后把它变成

00:20:01.146 --> 00:20:03.706 A:middle
一个尚未加载的 HTTP URL

00:20:04.406 --> 00:20:06.486 A:middle
然后我们就会通过一个安全链接

00:20:06.486 --> 00:20:07.376 A:middle
来接收原先想要的数据

00:20:08.536 --> 00:20:11.266 A:middle
让我们用 WKContentRuleList

00:20:11.566 --> 00:20:12.976 A:middle
来完成这件事

00:20:21.496 --> 00:20:23.146 A:middle
好了 我加了一点点

00:20:24.686 --> 00:20:24.866 A:middle
代码

00:20:26.146 --> 00:20:28.616 A:middle
这是我们想要使用的

00:20:28.616 --> 00:20:31.056 A:middle
内容规则列表

00:20:31.596 --> 00:20:33.476 A:middle
在这个案例里 我们有一条规则

00:20:34.276 --> 00:20:36.926 A:middle
它包含一个触发器

00:20:36.926 --> 00:20:38.116 A:middle
这个触发器是一个正则表达式

00:20:38.196 --> 00:20:38.726 A:middle
能与一切相匹配

00:20:39.296 --> 00:20:40.666 A:middle
这个正则表达式是

00:20:40.666 --> 00:20:42.756 A:middle
在 WebKit 准备从每个资源里抓取的

00:20:43.066 --> 00:20:46.226 A:middle
URL 上运行

00:20:46.436 --> 00:20:48.096 A:middle
这项操作是创建 HTTPS

00:20:48.546 --> 00:20:51.566 A:middle
因为我们如果已经发出请求

00:20:51.566 --> 00:20:54.506 A:middle
要获取的资源并不安全 那么基本上只需要

00:20:54.506 --> 00:20:56.086 A:middle
在方案里增加字母 s

00:20:56.086 --> 00:20:57.816 A:middle
就可以请求到安全的

00:20:57.816 --> 00:20:58.216 A:middle
资源

00:20:59.336 --> 00:21:00.946 A:middle
一旦我们有了这个 JSON

00:20:59.336 --> 00:21:00.946 A:middle
一旦我们有了这个 JSON

00:21:00.946 --> 00:21:02.436 A:middle
我们就需要编辑内容规则

00:21:03.786 --> 00:21:04.406 A:middle
列表

00:21:05.146 --> 00:21:07.496 A:middle
在完成这个内容规则列表的

00:21:07.496 --> 00:21:11.546 A:middle
编辑之后　我们需要

00:21:11.546 --> 00:21:15.746 A:middle
通过用户内容控制器

00:21:15.746 --> 00:21:17.276 A:middle
把这个内容规则列表添加到

00:21:17.656 --> 00:21:19.296 A:middle
WKWebView 配置当中

00:21:19.296 --> 00:21:21.026 A:middle
然后按照刚才的流程

00:21:21.086 --> 00:21:21.416 A:middle
继续进行

00:21:22.076 --> 00:21:25.546 A:middle
我们来看看这样做的话

00:21:25.546 --> 00:21:26.116 A:middle
会发生什么

00:21:26.116 --> 00:21:30.296 A:middle
我们加载这篇文章

00:21:30.296 --> 00:21:33.186 A:middle
现在这些资源正通过安全连接

00:21:33.186 --> 00:21:34.336 A:middle
而被加载

00:21:35.366 --> 00:21:35.726 A:middle
搞定

00:21:35.926 --> 00:21:37.776 A:middle
我们现在有一款 App

00:21:38.126 --> 00:21:40.546 A:middle
它从 Cookie 着手

00:21:40.546 --> 00:21:42.206 A:middle
能够把所有的不安全资源

00:21:42.206 --> 00:21:43.936 A:middle
升级为安全资源

00:21:44.846 --> 00:21:46.036 A:middle
现在我们有请 Brady

00:21:46.036 --> 00:21:46.826 A:middle
来详细介绍自定义加载方法

00:21:46.936 --> 00:21:48.936 A:middle
[掌声]

00:21:49.046 --> 00:21:49.836 A:middle
&gt;&gt; 谢谢你 Alex

00:21:52.036 --> 00:21:53.056 A:middle
非常直接清晰

00:21:53.136 --> 00:21:55.186 A:middle
我有两点想要重申

00:21:55.186 --> 00:21:55.786 A:middle
一下

00:21:59.046 --> 00:22:02.496 A:middle
Alex 已经展示过了  大家现在可以

00:21:59.046 --> 00:22:02.496 A:middle
Alex 已经展示过了  大家现在可以

00:22:02.496 --> 00:22:05.486 A:middle
在 WKWebView 中设定一个 Cookie

00:22:05.486 --> 00:22:06.986 A:middle
可以知道什么时候能够

00:22:06.986 --> 00:22:08.476 A:middle
使用 Cookie 来

00:22:08.476 --> 00:22:09.006 A:middle
发送请求

00:22:09.006 --> 00:22:11.566 A:middle
通过 WKHTTPCookieStore API

00:22:11.566 --> 00:22:13.086 A:middle
就能够做到这一点

00:22:16.736 --> 00:22:18.296 A:middle
我们继续把话说得更明白些

00:22:18.296 --> 00:22:20.646 A:middle
我们在这里要集中关注的

00:22:20.646 --> 00:22:22.066 A:middle
这个内容规则列表的

00:22:22.066 --> 00:22:24.186 A:middle
一项小功能

00:22:24.386 --> 00:22:26.466 A:middle
是仅仅通过这个简单的规则列表

00:22:26.466 --> 00:22:30.296 A:middle
将不安全、未加密的资源请求

00:22:30.296 --> 00:22:31.686 A:middle
升级为 HTTPS

00:22:31.686 --> 00:22:33.046 A:middle
只需要一步操作 一次触发

00:22:33.566 --> 00:22:34.906 A:middle
Alex 向大家展示了 WebKit

00:22:34.906 --> 00:22:36.566 A:middle
如何自动帮助你

00:22:36.566 --> 00:22:38.946 A:middle
高效地完成这件事

00:22:42.136 --> 00:22:44.326 A:middle
接下来我想介绍

00:22:44.326 --> 00:22:46.596 A:middle
我们的第三个  最后一个

00:22:46.596 --> 00:22:48.526 A:middle
新机制  那就是

00:22:48.526 --> 00:22:50.476 A:middle
提供自定义资源的能力

00:22:51.016 --> 00:22:54.196 A:middle
我们从很多开发者

00:22:54.196 --> 00:22:56.876 A:middle
那里了解到

00:22:56.876 --> 00:22:58.386 A:middle
他们自己有一大堆网页内容

00:22:58.386 --> 00:22:58.916 A:middle
要控制

00:22:59.786 --> 00:23:00.946 A:middle
有些开发者把它放到了

00:22:59.786 --> 00:23:00.946 A:middle
有些开发者把它放到了

00:23:00.946 --> 00:23:02.056 A:middle
App 程序套装里面

00:23:02.286 --> 00:23:03.926 A:middle
有些人把它托管在自己控制的

00:23:03.926 --> 00:23:05.376 A:middle
网络服务器上

00:23:05.376 --> 00:23:08.036 A:middle
他们想要把用户设备上的

00:23:08.036 --> 00:23:10.116 A:middle
本地数据插入到

00:23:10.116 --> 00:23:12.176 A:middle
网络内容资源里

00:23:12.546 --> 00:23:17.196 A:middle
有一款相当炫酷的 App

00:23:17.196 --> 00:23:19.606 A:middle
就有这种需求  我们见到过

00:23:19.606 --> 00:23:21.806 A:middle
它是一个相册制作工具

00:23:21.806 --> 00:23:24.716 A:middle
它完全凭借网络技术

00:23:24.946 --> 00:23:26.486 A:middle
来获得相册版式

00:23:27.266 --> 00:23:28.896 A:middle
公司的设计师

00:23:28.896 --> 00:23:30.466 A:middle
不断把新模板加入到新的相册

00:23:30.466 --> 00:23:31.866 A:middle
版式和风格设计里

00:23:31.866 --> 00:23:33.786 A:middle
但是他们想要访问

00:23:33.786 --> 00:23:35.166 A:middle
用户设备上的

00:23:35.166 --> 00:23:36.196 A:middle
本地图片

00:23:37.196 --> 00:23:38.966 A:middle
利用这款新的 API

00:23:38.966 --> 00:23:39.586 A:middle
就可以实现了

00:23:41.916 --> 00:23:43.216 A:middle
另外还有许多的

00:23:43.216 --> 00:23:44.376 A:middle
游戏开发者

00:23:44.376 --> 00:23:46.446 A:middle
听他们说 他们有一个游戏内通知

00:23:46.446 --> 00:23:48.596 A:middle
或游戏内积分排行榜

00:23:48.736 --> 00:23:50.296 A:middle
他们使用的就是

00:23:50.296 --> 00:23:50.966 A:middle
网络技术

00:23:51.566 --> 00:23:53.556 A:middle
他们想整合用户

00:23:53.766 --> 00:23:55.866 A:middle
在本地设备上玩游戏的

00:23:55.866 --> 00:23:57.556 A:middle
本地体验

00:23:57.556 --> 00:24:00.196 A:middle
这样他们的用户就会觉得自己

00:23:57.556 --> 00:24:00.196 A:middle
这样他们的用户就会觉得自己

00:24:00.196 --> 00:24:02.466 A:middle
跟游戏世界的最新进展

00:24:02.466 --> 00:24:03.286 A:middle
更加息息相关

00:24:03.806 --> 00:24:07.136 A:middle
这些只是几个

00:24:07.136 --> 00:24:07.776 A:middle
例子

00:24:08.176 --> 00:24:09.816 A:middle
通过新的 WKURLSchemeHandler API

00:24:09.816 --> 00:24:11.606 A:middle
你还可以去做

00:24:11.606 --> 00:24:13.616 A:middle
更多的事情

00:24:15.876 --> 00:24:18.846 A:middle
WKURLSchemeHandler API 让你的

00:24:18.846 --> 00:24:21.036 A:middle
App 能够针对具体的URL方案

00:24:21.036 --> 00:24:23.006 A:middle
来处理资源加载

00:24:23.316 --> 00:24:26.276 A:middle
那么这样一来  我们大家都

00:24:26.276 --> 00:24:26.976 A:middle
达成一致了

00:24:27.086 --> 00:24:28.246 A:middle
什么是 URL 方案？

00:24:28.766 --> 00:24:30.646 A:middle
这些是我们可能见到过的

00:24:30.646 --> 00:24:31.656 A:middle
一些URL示例

00:24:32.916 --> 00:24:34.096 A:middle
这些就是方案

00:24:34.826 --> 00:24:36.446 A:middle
第一个冒号前面的全部

00:24:36.446 --> 00:24:37.076 A:middle
内容

00:24:38.106 --> 00:24:39.486 A:middle
所以通过引用 WebKit 自身

00:24:39.486 --> 00:24:40.536 A:middle
还没有处理的

00:24:40.536 --> 00:24:43.046 A:middle
自定义 URL 方案  你可以

00:24:43.046 --> 00:24:44.786 A:middle
注册一个方案句柄

00:24:44.786 --> 00:24:46.056 A:middle
来处理任一资源的加载问题

00:24:46.056 --> 00:24:47.796 A:middle
只要这项资源里的某个 URL 与你的方案

00:24:47.796 --> 00:24:48.306 A:middle
相匹配

00:24:48.826 --> 00:24:51.126 A:middle
在这个例子中

00:24:51.126 --> 00:24:52.446 A:middle
我们随意选择了

00:24:52.446 --> 00:24:52.866 A:middle
本地方案

00:24:52.946 --> 00:24:54.916 A:middle
它并不是由 WebKit 自己处理的

00:24:54.916 --> 00:24:56.426 A:middle
标准 URL 方案

00:24:56.426 --> 00:24:58.126 A:middle
它根本不属于哪种网络标准

00:24:58.126 --> 00:24:59.626 A:middle
或与之相似的东西

00:25:00.736 --> 00:25:02.866 A:middle
但我们可以想象到

00:25:02.866 --> 00:25:04.596 A:middle
在将来它将能够

00:25:04.596 --> 00:25:05.436 A:middle
成为一种网络标准

00:25:05.436 --> 00:25:07.206 A:middle
它可能会成为 WebKit

00:25:07.206 --> 00:25:07.956 A:middle
独自处理的某种东西

00:25:08.106 --> 00:25:09.596 A:middle
因此我们愿意鼓励

00:25:09.906 --> 00:25:11.836 A:middle
人们在将来进行彻底实践

00:25:11.866 --> 00:25:13.456 A:middle
来证明你的自定义方案

00:25:13.456 --> 00:25:14.906 A:middle
用你的公司名称或 App 套装的名称

00:25:14.906 --> 00:25:17.366 A:middle
或类似的名称

00:25:17.366 --> 00:25:17.956 A:middle
来完成空间命名

00:25:21.696 --> 00:25:23.466 A:middle
WKURLSchemeHandler  究竟是

00:25:23.466 --> 00:25:23.916 A:middle
什么

00:25:24.466 --> 00:25:26.256 A:middle
它是一种相当简单的协议

00:25:26.296 --> 00:25:28.026 A:middle
你可以用两种方式执行它

00:25:28.026 --> 00:25:30.506 A:middle
你要么是被安排

00:25:30.506 --> 00:25:33.036 A:middle
加载一项方案任务

00:25:33.036 --> 00:25:33.496 A:middle
或是停止加载一项任务

00:25:33.956 --> 00:25:36.586 A:middle
我们过一小会儿再来

00:25:36.586 --> 00:25:38.226 A:middle
谈谈什么是方案任务

00:25:38.716 --> 00:25:39.666 A:middle
一旦你执行协议

00:25:39.666 --> 00:25:43.426 A:middle
你就会在 WebView 的设置上

00:25:43.426 --> 00:25:44.716 A:middle
设立方案处理程序

00:25:44.716 --> 00:25:46.616 A:middle
这就是你决定

00:25:46.616 --> 00:25:48.636 A:middle
要使用这个方案处理程序

00:25:48.636 --> 00:25:50.096 A:middle
为哪个 URL 方案

00:25:50.096 --> 00:25:51.146 A:middle
来处理自定义加载

00:25:52.046 --> 00:25:53.616 A:middle
你可以在 App上 所有

00:25:53.616 --> 00:25:55.466 A:middle
自定义的 URL 方案中

00:25:55.466 --> 00:25:57.116 A:middle
使用同类的实例

00:25:57.496 --> 00:25:59.066 A:middle
你也可以为不同的 URL 方案

00:25:59.216 --> 00:26:00.416 A:middle
设定不同的类别

00:25:59.216 --> 00:26:00.416 A:middle
设定不同的类别

00:26:00.476 --> 00:26:03.136 A:middle
所以 你可以将不同的实例

00:26:03.136 --> 00:26:04.356 A:middle
用于所有不同的方案

00:26:04.356 --> 00:26:06.536 A:middle
或将一个实例

00:26:06.536 --> 00:26:06.996 A:middle
分别用于所有的方案

00:26:07.036 --> 00:26:07.666 A:middle
这取决于你和

00:26:07.666 --> 00:26:08.766 A:middle
你的 App 程序的架构

00:26:09.286 --> 00:26:14.016 A:middle
接下来 你要创建自己的 Webview

00:26:14.526 --> 00:26:15.786 A:middle
并在里面加载一些内容

00:26:16.106 --> 00:26:17.896 A:middle
这个网页内容里的

00:26:17.896 --> 00:26:19.846 A:middle
参考了你已注册的

00:26:19.846 --> 00:26:21.006 A:middle
自定义 URL 方案

00:26:21.006 --> 00:26:23.566 A:middle
的网页内容  它包含的任何子资源

00:26:23.566 --> 00:26:24.856 A:middle
都会反向调用你拿

00:26:24.976 --> 00:26:25.926 A:middle
WKWebView 注册的对象

00:26:26.336 --> 00:26:29.066 A:middle
要注意 这甚至包括

00:26:29.306 --> 00:26:31.086 A:middle
最高级别的 HTML 文件本身

00:26:31.086 --> 00:26:33.396 A:middle
它可能属于你先前注册的

00:26:33.396 --> 00:26:34.746 A:middle
自定义方案

00:26:35.306 --> 00:26:40.466 A:middle
那么 WKURLSchemeTask 是什么？

00:26:41.476 --> 00:26:43.326 A:middle
每个发送到你处理程序的任务

00:26:43.436 --> 00:26:45.516 A:middle
都代表一个特定的

00:26:45.516 --> 00:26:46.166 A:middle
子资源加载

00:26:47.116 --> 00:26:49.566 A:middle
这个任务包含 URL

00:26:49.616 --> 00:26:50.746 A:middle
请求对象

00:26:51.416 --> 00:26:53.226 A:middle
这是要传递到

00:26:53.226 --> 00:26:54.966 A:middle
某个 HTTP 服务器的相同信息

00:26:54.966 --> 00:26:56.646 A:middle
如果说  这个请求要

00:26:56.646 --> 00:26:57.556 A:middle
传递到网络上的话

00:26:58.166 --> 00:26:59.876 A:middle
它包含了很多与资源相关的

00:26:59.876 --> 00:27:01.266 A:middle
小片段数据资料

00:26:59.876 --> 00:27:01.266 A:middle
小片段数据资料

00:27:01.266 --> 00:27:02.526 A:middle
可是它们却非常重要 尤其是

00:27:02.526 --> 00:27:02.896 A:middle
URL 本身

00:27:04.966 --> 00:27:07.136 A:middle
再往下看  这项任务

00:27:07.386 --> 00:27:09.016 A:middle
提供了四个直接了当的方法

00:27:09.016 --> 00:27:10.526 A:middle
要让你将加载进程

00:27:10.526 --> 00:27:12.056 A:middle
传递给 WebKit

00:27:12.056 --> 00:27:12.976 A:middle
从而获取这一资源

00:27:17.246 --> 00:27:19.706 A:middle
一旦你接收到某个任务

00:27:19.706 --> 00:27:21.486 A:middle
并且按照要求开始为它进行加载

00:27:22.336 --> 00:27:23.566 A:middle
你首先要做的

00:27:23.706 --> 00:27:24.776 A:middle
是创建一个响应

00:27:25.636 --> 00:27:26.856 A:middle
就像 URL 请求对象

00:27:26.856 --> 00:27:28.866 A:middle
代表着传送到

00:27:28.976 --> 00:27:31.156 A:middle
一台网络服务器上的信息那样

00:27:31.156 --> 00:27:32.286 A:middle
这个响应是服务器将要

00:27:32.286 --> 00:27:33.076 A:middle
返回的内容

00:27:33.476 --> 00:27:35.226 A:middle
你需要对它进行加工

00:27:36.446 --> 00:27:38.006 A:middle
非常重要的是 在这个响应里

00:27:38.006 --> 00:27:39.466 A:middle
你需要包含

00:27:39.466 --> 00:27:40.136 A:middle
MIME 类型

00:27:40.416 --> 00:27:42.006 A:middle
对于在座的

00:27:42.006 --> 00:27:43.086 A:middle
还不算非常熟悉

00:27:43.086 --> 00:27:44.536 A:middle
网络技术的人来说

00:27:44.536 --> 00:27:45.506 A:middle
它有点像是文件类型

00:27:45.806 --> 00:27:47.356 A:middle
这是要由你来告诉 WebKit

00:27:47.356 --> 00:27:48.286 A:middle
如何解读资源

00:27:48.606 --> 00:27:50.326 A:middle
这是一个 HTML 资源

00:27:50.446 --> 00:27:55.296 A:middle
这是一个 JPEG 图像等等

00:27:55.296 --> 00:27:57.226 A:middle
一旦你获得响应

00:27:57.226 --> 00:27:59.086 A:middle
就要向任务告知

00:27:59.086 --> 00:27:59.436 A:middle
响应已收到

00:28:00.016 --> 00:28:02.396 A:middle
在这种情况下 我们的内存里

00:28:02.396 --> 00:28:04.066 A:middle
已经具备了响应回复所需要的

00:28:04.066 --> 00:28:04.536 A:middle
所有数据

00:28:04.916 --> 00:28:06.446 A:middle
所以我们可以立刻将

00:28:06.446 --> 00:28:07.956 A:middle
数据传送到 WebKit  从而

00:28:07.956 --> 00:28:08.386 A:middle
完成任务

00:28:08.706 --> 00:28:12.476 A:middle
我们随后将示意 WebKit

00:28:12.476 --> 00:28:13.376 A:middle
加载已完成

00:28:13.476 --> 00:28:14.946 A:middle
所以 WebKit 就不会再等待

00:28:14.946 --> 00:28:18.516 A:middle
更多数据了

00:28:18.776 --> 00:28:20.446 A:middle
还是那句话 最好的

00:28:20.446 --> 00:28:21.856 A:middle
展示方式就是观看

00:28:21.856 --> 00:28:22.386 A:middle
操作演示

00:28:22.476 --> 00:28:23.696 A:middle
所以 我要邀请 Alex

00:28:23.696 --> 00:28:24.246 A:middle
回到台上

00:28:26.516 --> 00:28:29.826 A:middle
[掌声]

00:28:30.326 --> 00:28:30.836 A:middle
&gt;&gt; 谢谢 Brady

00:28:32.506 --> 00:28:34.866 A:middle
大家还记得 在我的 App 里

00:28:34.866 --> 00:28:36.826 A:middle
是要让在线阅读文章的用户

00:28:36.826 --> 00:28:39.736 A:middle
再参加关于这些文章的测试

00:28:39.736 --> 00:28:40.976 A:middle
然后他们会收到

00:28:40.976 --> 00:28:41.496 A:middle
一张毕业证书

00:28:42.166 --> 00:28:43.806 A:middle
我有一个网络设计团队

00:28:43.806 --> 00:28:45.126 A:middle
他们经常能

00:28:45.126 --> 00:28:46.926 A:middle
想到很漂亮的证书

00:28:46.926 --> 00:28:47.436 A:middle
设计格式

00:28:47.906 --> 00:28:49.126 A:middle
所以我希望我的 App 用户

00:28:49.126 --> 00:28:51.126 A:middle
能去我的服务器里

00:28:51.126 --> 00:28:54.286 A:middle
获取这些新设计  但我又想

00:28:54.286 --> 00:28:57.116 A:middle
让每张证书里都有

00:28:57.116 --> 00:28:59.096 A:middle
用户自己的头像

00:28:59.566 --> 00:29:01.496 A:middle
而且我希望这些头像能够从本地

00:28:59.566 --> 00:29:01.496 A:middle
而且我希望这些头像能够从本地

00:29:01.496 --> 00:29:02.636 A:middle
加载到用户的设备上

00:29:03.506 --> 00:29:06.916 A:middle
所以 要在 WebKit 内部实现

00:29:06.916 --> 00:29:09.276 A:middle
这种自定义本地加载

00:29:09.276 --> 00:29:11.136 A:middle
我就要使用一个自定义方案

00:29:12.006 --> 00:29:14.256 A:middle
现在我给向大家展示一下

00:29:15.116 --> 00:29:17.576 A:middle
我的证书来源

00:29:21.046 --> 00:29:22.846 A:middle
好了 看这里  我有某个 HTML

00:29:23.656 --> 00:29:24.556 A:middle
我还有一张图片

00:29:25.346 --> 00:29:27.196 A:middle
它的来源是一个带有

00:29:27.196 --> 00:29:28.016 A:middle
自定义方案的 URL

00:29:28.746 --> 00:29:31.076 A:middle
在这个例子里

00:29:32.496 --> 00:29:33.776 A:middle
犬科动物—头像

00:29:33.776 --> 00:29:38.286 A:middle
如果我用浏览器或

00:29:38.286 --> 00:29:41.436 A:middle
WKWebView 打开它

00:29:41.816 --> 00:29:43.126 A:middle
WKWebView 并不会知道该做什么

00:29:43.126 --> 00:29:45.386 A:middle
那么我向大家快速展示一下

00:29:45.386 --> 00:29:45.976 A:middle
这是怎么回事

00:29:49.156 --> 00:29:49.866 A:middle
参加测验

00:29:51.296 --> 00:29:52.796 A:middle
狗 是的

00:29:53.476 --> 00:29:56.746 A:middle
好了 这样我就有

00:29:56.746 --> 00:29:57.726 A:middle
一份漂亮的证书了

00:29:58.636 --> 00:30:01.486 A:middle
我有一个缺失的图像标记

00:29:58.636 --> 00:30:01.486 A:middle
我有一个缺失的图像标记

00:30:02.046 --> 00:30:04.946 A:middle
因为 WebKit 试图加载含有

00:30:05.016 --> 00:30:07.196 A:middle
犬类——

00:30:07.276 --> 00:30:09.746 A:middle
“犬科动物——头像”方案

00:30:09.746 --> 00:30:11.806 A:middle
的资源

00:30:11.806 --> 00:30:13.316 A:middle
而 WebKit 不知道该怎样

00:30:13.366 --> 00:30:14.086 A:middle
处理这样的方案

00:30:15.106 --> 00:30:18.366 A:middle
所以 我们可以用

00:30:18.366 --> 00:30:22.096 A:middle
WKURLSchemeHandler 来教会

00:30:22.206 --> 00:30:24.996 A:middle
这个 WKWebView 怎样处理类似的

00:30:24.996 --> 00:30:25.366 A:middle
请求

00:30:27.046 --> 00:30:29.536 A:middle
好了 我加了一些代码

00:30:29.846 --> 00:30:34.606 A:middle
我有一个对象 一个用来执行

00:30:34.606 --> 00:30:37.036 A:middle
WKURLSchemeHandler 的分类

00:30:37.776 --> 00:30:39.446 A:middle
这儿还有一些代码

00:30:39.446 --> 00:30:40.356 A:middle
我马上就回来

00:30:40.356 --> 00:30:40.766 A:middle
再说这个

00:30:42.396 --> 00:30:44.936 A:middle
不过  往下看这里  我想在我的 WKWebView

00:30:44.936 --> 00:30:47.496 A:middle
配置里调用

00:30:47.496 --> 00:30:49.236 A:middle
设定新方法的

00:30:49.236 --> 00:30:52.586 A:middle
URLSchemeHandler  这里面有

00:30:52.586 --> 00:30:54.366 A:middle
我的一个分类实例

00:30:54.366 --> 00:30:55.446 A:middle
它执行 URL

00:30:55.596 --> 00:31:00.636 A:middle
WKURLSchemeHandler  然后我

00:30:55.596 --> 00:31:00.636 A:middle
WKURLSchemeHandler  然后我

00:31:00.636 --> 00:31:02.946 A:middle
需要告诉 WebKit  这个分类要

00:31:02.946 --> 00:31:05.316 A:middle
处理的请求

00:31:05.316 --> 00:31:07.526 A:middle
是属于哪个 URL 方案

00:31:10.256 --> 00:31:12.006 A:middle
我在分类执行时

00:31:14.036 --> 00:31:17.766 A:middle
执行 WKURLSchemeHandler

00:31:18.166 --> 00:31:20.076 A:middle
就意味着我有这样两种方法

00:31:20.456 --> 00:31:22.206 A:middle
开始和结束

00:31:24.216 --> 00:31:25.906 A:middle
当针对这个方案

00:31:25.906 --> 00:31:29.336 A:middle
的请求生成时

00:31:29.366 --> 00:31:30.596 A:middle
网页内容就会调用开始方法

00:31:31.316 --> 00:31:33.246 A:middle
所以在这个例子中  当网页内容

00:31:33.246 --> 00:31:35.266 A:middle
想要加载我的图像时

00:31:35.876 --> 00:31:40.486 A:middle
我就应该用这个 URL 方案任务

00:31:40.486 --> 00:31:43.166 A:middle
对这个请求做出

00:31:44.006 --> 00:31:44.226 A:middle
响应

00:31:45.616 --> 00:31:47.856 A:middle
在我的例子里  我会暂停

00:31:47.856 --> 00:31:49.066 A:middle
一个图片选择器  并让读者

00:31:49.066 --> 00:31:50.646 A:middle
来选择一张图片

00:31:50.646 --> 00:31:51.826 A:middle
所以我不需要马上

00:31:51.826 --> 00:31:52.416 A:middle
响应

00:31:53.786 --> 00:31:56.736 A:middle
如果在这个过程中 WKWebView 调用了

00:31:56.736 --> 00:31:59.076 A:middle
我的停止方法

00:31:59.706 --> 00:32:01.536 A:middle
那么  我就不该再

00:31:59.706 --> 00:32:01.536 A:middle
那么  我就不该再

00:32:01.626 --> 00:32:03.976 A:middle
响应这个请求了

00:32:03.976 --> 00:32:05.666 A:middle
因为它已经被取消

00:32:05.666 --> 00:32:05.946 A:middle
或其他什么原因

00:32:10.236 --> 00:32:12.636 A:middle
在这里 只要图片选择器完成工作

00:32:12.636 --> 00:32:14.756 A:middle
我就会得到数据

00:32:15.606 --> 00:32:18.166 A:middle
在这个例子中 我要把它编码为 JPEG

00:32:18.166 --> 00:32:18.336 A:middle
格式

00:32:19.486 --> 00:32:20.836 A:middle
我需要调用这三种

00:32:20.836 --> 00:32:21.176 A:middle
方法

00:32:22.136 --> 00:32:23.736 A:middle
响应已收到

00:32:24.866 --> 00:32:27.916 A:middle
数据已接收 已完成

00:32:29.776 --> 00:32:31.706 A:middle
数据已接收  比较特别

00:32:31.706 --> 00:32:33.526 A:middle
我可以不止一次地调用数据

00:32:33.656 --> 00:32:35.616 A:middle
因为数据是生成的 或因为它是接收到的

00:32:35.616 --> 00:32:38.996 A:middle
或不管我是以什么方式提供的

00:32:38.996 --> 00:32:39.926 A:middle
这些数据

00:32:40.226 --> 00:32:41.496 A:middle
在这里 我只准备调用它一次

00:32:41.496 --> 00:32:43.116 A:middle
因为我自己有

00:32:43.116 --> 00:32:46.646 A:middle
这个响应的全部数据

00:32:46.646 --> 00:32:48.556 A:middle
在一个缓存区里使用 JPEG 格式编码的

00:32:48.556 --> 00:32:48.916 A:middle
图像

00:32:51.896 --> 00:32:53.796 A:middle
我们来看看  当我执行这项操作时

00:32:53.796 --> 00:32:54.906 A:middle
会发生什么情况

00:33:02.276 --> 00:33:04.276 A:middle
好了 我已经登录了

00:33:04.746 --> 00:33:05.656 A:middle
因为我有 Cookie 记录

00:33:06.516 --> 00:33:08.006 A:middle
所有都已安全加载

00:33:08.186 --> 00:33:11.396 A:middle
我来参加测验

00:33:12.086 --> 00:33:13.496 A:middle
狗 是的

00:33:15.056 --> 00:33:17.506 A:middle
好了 这个图片选择器出来了

00:33:17.506 --> 00:33:21.076 A:middle
因为这种开始方法

00:33:21.076 --> 00:33:21.536 A:middle
已经被调用

00:33:22.276 --> 00:33:26.706 A:middle
我进入我的相册

00:33:26.826 --> 00:33:29.356 A:middle
选择我的头像照片

00:33:29.356 --> 00:33:31.246 A:middle
我想让它呈现在我的网页内容里

00:33:31.966 --> 00:33:34.946 A:middle
然后  因为在任务当中

00:33:34.946 --> 00:33:38.136 A:middle
调用了那些方法

00:33:38.136 --> 00:33:40.136 A:middle
现在我的网页内容里已经包含

00:33:40.176 --> 00:33:40.666 A:middle
这份数据了

00:33:41.256 --> 00:33:42.406 A:middle
所以我现在拥有这样一个 App

00:33:42.406 --> 00:33:44.496 A:middle
它可以管理它的各种 Cookie

00:33:44.496 --> 00:33:46.566 A:middle
使用内容规则列表

00:33:46.566 --> 00:33:49.246 A:middle
升级不安全的请求

00:33:49.246 --> 00:33:51.386 A:middle
可以通过 WKURLSchemeHandler

00:33:52.206 --> 00:33:55.706 A:middle
进行自定义加载

00:33:56.586 --> 00:33:57.186 A:middle
现在让 Brady 继续来讲

00:33:58.516 --> 00:34:00.576 A:middle
[掌声]

00:33:58.516 --> 00:34:00.576 A:middle
[掌声]

00:34:01.076 --> 00:34:02.366 A:middle
&gt;&gt; 再次重申一下

00:34:02.676 --> 00:34:04.726 A:middle
我们刚才看到了  Alex 用代码形式

00:34:04.726 --> 00:34:05.206 A:middle
给我们做了展示

00:34:06.196 --> 00:34:07.776 A:middle
他选择的是即将推出的 Proof URL

00:34:07.776 --> 00:34:08.186 A:middle
方案

00:34:09.005 --> 00:34:10.646 A:middle
这是我想要强调的

00:34:10.646 --> 00:34:12.766 A:middle
一个最佳方案  我想多强调几次

00:34:12.766 --> 00:34:14.206 A:middle
以便确保你在将来

00:34:14.376 --> 00:34:15.636 A:middle
不会选择某种有可能

00:34:15.636 --> 00:34:16.755 A:middle
标准化的

00:34:16.755 --> 00:34:17.126 A:middle
方案

00:34:17.485 --> 00:34:21.686 A:middle
接下来他又展示了某样东西

00:34:21.686 --> 00:34:23.556 A:middle
是我还没来得及明确提到的东西

00:34:23.636 --> 00:34:24.815 A:middle
也就是说  你可能给

00:34:24.815 --> 00:34:26.616 A:middle
某项任务

00:34:26.856 --> 00:34:27.696 A:middle
异步提供数据

00:34:28.576 --> 00:34:29.866 A:middle
你可以在本地

00:34:29.866 --> 00:34:30.516 A:middle
生成数据

00:34:30.676 --> 00:34:32.016 A:middle
你可以让用户即时

00:34:32.016 --> 00:34:32.525 A:middle
拍照

00:34:32.946 --> 00:34:34.216 A:middle
你可以创建自己的网络

00:34:34.216 --> 00:34:34.846 A:middle
来获取数据

00:34:35.126 --> 00:34:36.466 A:middle
无论你耗费多长时间来

00:34:36.466 --> 00:34:38.096 A:middle
获取数据  你都可以将它

00:34:38.096 --> 00:34:39.946 A:middle
异步传送返回到 WebKit

00:34:44.045 --> 00:34:45.446 A:middle
这就是我今天

00:34:45.446 --> 00:34:47.426 A:middle
想要和大家分享的所有

00:34:47.426 --> 00:34:47.735 A:middle
新事物

00:34:48.306 --> 00:34:49.146 A:middle
今天我们仔细讨论了

00:34:49.386 --> 00:34:52.755 A:middle
WKHTTPCookieStore  这个

00:34:52.755 --> 00:34:54.565 A:middle
用来在你的 WKWebView 里管理 Cookie

00:34:54.565 --> 00:34:55.576 A:middle
的新 API

00:34:56.126 --> 00:34:58.936 A:middle
我们讲了

00:34:58.936 --> 00:35:01.866 A:middle
WKContent 规则列表  这是一种快速

00:34:58.936 --> 00:35:01.866 A:middle
WKContent 规则列表  这是一种快速

00:35:01.866 --> 00:35:04.386 A:middle
有效的方法 它可以从你的 WKWebViews 里滤除

00:35:04.386 --> 00:35:06.886 A:middle
不想要的内容

00:35:07.396 --> 00:35:10.586 A:middle
我们还讨论了

00:35:10.586 --> 00:35:14.036 A:middle
WKURLSchemeHandler  一种

00:35:14.036 --> 00:35:16.266 A:middle
可以让你把自定义资源

00:35:16.266 --> 00:35:18.586 A:middle
添加到网页内容里的绝妙方法

00:35:18.586 --> 00:35:20.006 A:middle
无论网络内容

00:35:20.006 --> 00:35:20.626 A:middle
从何而来

00:35:21.176 --> 00:35:25.366 A:middle
我想再一次强调

00:35:25.366 --> 00:35:27.186 A:middle
我们之所以能想到这些

00:35:27.186 --> 00:35:28.826 A:middle
新的 API   并且努力进行研发

00:35:29.056 --> 00:35:30.846 A:middle
是因为我们获得了

00:35:31.066 --> 00:35:32.576 A:middle
在座所有开发者的

00:35:32.576 --> 00:35:32.866 A:middle
反馈

00:35:33.296 --> 00:35:34.836 A:middle
我们希望大家继续

00:35:34.836 --> 00:35:36.676 A:middle
给我们反馈建议  这样我们

00:35:36.676 --> 00:35:38.426 A:middle
就能聚到一起  创造出

00:35:38.966 --> 00:35:41.086 A:middle
我们将来新版本 WKWebView 里

00:35:41.086 --> 00:35:42.846 A:middle
能够呈现

00:35:42.846 --> 00:35:43.546 A:middle
更多出色的功能

00:35:44.446 --> 00:35:46.246 A:middle
想要了解更多信息

00:35:46.246 --> 00:35:48.086 A:middle
请访问这次会议的

00:35:48.086 --> 00:35:50.276 A:middle
网址  还有一些相关的

00:35:50.276 --> 00:35:51.966 A:middle
会议  我建议大家

00:35:51.966 --> 00:35:52.766 A:middle
去了解一下

00:35:53.296 --> 00:35:54.526 A:middle
明天早上我们将讨论

00:35:54.526 --> 00:35:55.566 A:middle
Safari View Controller 里的

00:35:55.566 --> 00:35:56.686 A:middle
某些非常优异的新功能

00:35:56.776 --> 00:35:58.296 A:middle
如果你有兴趣给自己的 App 增添一种

00:35:58.296 --> 00:36:00.186 A:middle
功能强大的应用内

00:35:58.296 --> 00:36:00.186 A:middle
功能强大的应用内

00:36:00.186 --> 00:36:01.216 A:middle
网络浏览体验

00:36:01.216 --> 00:36:03.746 A:middle
请大家过来

00:36:03.746 --> 00:36:04.666 A:middle
再看看

00:36:05.236 --> 00:36:07.056 A:middle
自从我们首次推出

00:36:07.056 --> 00:36:09.186 A:middle
WKWebView 以来

00:36:09.186 --> 00:36:11.026 A:middle
我们一直都有些分享

00:36:11.026 --> 00:36:13.056 A:middle
我们推出那些适用于 Safari 的

00:36:13.056 --> 00:36:14.006 A:middle
内容禁止扩展后

00:36:14.006 --> 00:36:15.296 A:middle
情况也是这样

00:36:15.886 --> 00:36:17.676 A:middle
大家从这里可以了解许多

00:36:17.676 --> 00:36:19.596 A:middle
关于这套强大规则设置的细节

00:36:19.596 --> 00:36:21.516 A:middle
你在使用 WKContentRuleList

00:36:21.516 --> 00:36:23.216 A:middle
可以用到这些

00:36:24.556 --> 00:36:25.646 A:middle
感谢大家的到来 希望大家在

00:36:25.646 --> 00:36:27.056 A:middle
接下来的 WWDC 会议里能够满载而归

00:36:27.056 --> 00:36:28.000 A:middle
[掌声]
