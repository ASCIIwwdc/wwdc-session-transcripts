WEBVTT

00:00:25.076 --> 00:00:27.016 A:middle
&gt;&gt; 大家好下午好

00:00:27.016 --> 00:00:28.686 A:middle
欢迎来到 509 分会场

00:00:29.026 --> 00:00:30.836 A:middle
我将为大家介绍 AirPlay 2

00:00:30.836 --> 00:00:31.656 A:middle
的多房间音频控制功能

00:00:32.195 --> 00:00:33.886 A:middle
我叫 David Saracino

00:00:33.886 --> 00:00:34.666 A:middle
是 AirPlay 工程团队的

00:00:34.666 --> 00:00:36.286 A:middle
一名成员

00:00:36.286 --> 00:00:37.286 A:middle
今天非常高兴能来到这里

00:00:37.286 --> 00:00:38.486 A:middle
和大家讨论

00:00:38.486 --> 00:00:39.576 A:middle
我们在过去一年来

00:00:39.576 --> 00:00:41.126 A:middle
为 AirPlay 音频新添的众多功能

00:00:41.126 --> 00:00:42.756 A:middle
以及如何怎样才能

00:00:42.756 --> 00:00:45.006 A:middle
将这些功能嵌入你们的 App 里

00:00:45.396 --> 00:00:46.466 A:middle
在我们开始

00:00:46.466 --> 00:00:47.686 A:middle
介绍之前

00:00:47.686 --> 00:00:49.056 A:middle
让我们先来

00:00:49.056 --> 00:00:50.926 A:middle
快速回顾一下当前的 AirPlay

00:00:51.226 --> 00:00:52.596 A:middle
并就我们想把 AirPlay 2 带向何方

00:00:52.596 --> 00:00:54.056 A:middle
做一个说明

00:00:54.636 --> 00:00:56.876 A:middle
应用现在的 AirPlay 你能够

00:00:56.876 --> 00:00:58.616 A:middle
将海量的屏幕画面

00:00:58.616 --> 00:01:00.906 A:middle
音频或视频内容以无线的方式

00:00:58.616 --> 00:01:00.906 A:middle
音频或视频内容以无线的方式

00:01:01.196 --> 00:01:02.826 A:middle
从任何一部苹果设备

00:01:03.066 --> 00:01:04.556 A:middle
投射到苹果电视或

00:01:04.556 --> 00:01:04.956 A:middle
支持 AirPlay 的音箱中

00:01:06.296 --> 00:01:07.596 A:middle
过去一年来我们着重

00:01:07.596 --> 00:01:08.896 A:middle
在音频版块

00:01:08.896 --> 00:01:10.276 A:middle
新增了许多功能

00:01:10.276 --> 00:01:11.166 A:middle
这也将是我今天演讲的

00:01:11.166 --> 00:01:11.506 A:middle
主要内容

00:01:12.996 --> 00:01:14.146 A:middle
正因为我们在音频版块

00:01:14.146 --> 00:01:15.296 A:middle
新增了这么多功能

00:01:15.646 --> 00:01:17.326 A:middle
我们将它们集合为一个新的整体

00:01:17.326 --> 00:01:18.826 A:middle
叫做 AirPlay 2

00:01:21.106 --> 00:01:22.216 A:middle
所以什么是 AirPlay 2

00:01:22.216 --> 00:01:25.166 A:middle
用 AirPlay 2 你仍然可以

00:01:25.166 --> 00:01:27.176 A:middle
以无线方式将音频内容

00:01:27.176 --> 00:01:28.726 A:middle
从你的 App 发送到

00:01:28.726 --> 00:01:29.406 A:middle
支持 AirPlay 的音箱

00:01:29.926 --> 00:01:32.436 A:middle
但是同时有 AirPlay 2 以后

00:01:32.436 --> 00:01:34.986 A:middle
你可以把那段音频

00:01:34.986 --> 00:01:37.346 A:middle
几乎同步地发送到多个

00:01:37.346 --> 00:01:40.546 A:middle
多个支持 AirPlay 2 的音箱

00:01:40.726 --> 00:01:41.986 A:middle
此外我们还

00:01:42.316 --> 00:01:43.346 A:middle
改进了支持 AirPlay 2 的音箱

00:01:43.346 --> 00:01:44.826 A:middle
存在的音频缓冲问题

00:01:44.826 --> 00:01:46.616 A:middle
以便让音频内容的

00:01:46.616 --> 00:01:47.876 A:middle
播放环境更稳定

00:01:47.876 --> 00:01:49.586 A:middle
更可靠

00:01:49.586 --> 00:01:50.416 A:middle
反应更加灵敏

00:01:51.306 --> 00:01:53.946 A:middle
最后我们还将

00:01:53.946 --> 00:01:54.906 A:middle
介绍多设备控制功能

00:01:55.336 --> 00:01:57.016 A:middle
这一功能将允许

00:01:57.016 --> 00:01:58.766 A:middle
你家中的

00:01:58.766 --> 00:02:00.216 A:middle
多个苹果设备

00:01:58.766 --> 00:02:00.216 A:middle
多个苹果设备

00:02:00.216 --> 00:02:01.226 A:middle
与房间中的音频流

00:02:02.086 --> 00:02:02.206 A:middle
进行互动

00:02:03.336 --> 00:02:04.596 A:middle
那么都有哪些地方

00:02:04.596 --> 00:02:05.106 A:middle
支持 AirPlay 2 呢？

00:02:05.836 --> 00:02:07.406 A:middle
我非常高兴地告诉你

00:02:07.406 --> 00:02:10.015 A:middle
如果你有 iOS Apple tvOS 或 macOS 应用

00:02:10.485 --> 00:02:11.556 A:middle
你就可以按照我一会儿将

00:02:11.556 --> 00:02:13.686 A:middle
介绍的大致步骤

00:02:13.686 --> 00:02:14.686 A:middle
将 AirPlay 2 功能

00:02:14.686 --> 00:02:15.776 A:middle
运用到你的 App 中

00:02:16.326 --> 00:02:19.706 A:middle
当你这样做之后

00:02:19.706 --> 00:02:21.156 A:middle
你的 App 将能够在一个广阔的

00:02:21.156 --> 00:02:23.086 A:middle
AirPlay  2 播放器生态系统里运行

00:02:23.396 --> 00:02:25.136 A:middle
其中包括 HomePod

00:02:25.136 --> 00:02:26.996 A:middle
最新一代苹果电视

00:02:26.996 --> 00:02:28.436 A:middle
以及即将投放市场的

00:02:28.436 --> 00:02:29.206 A:middle
支持 AirPlay 2 的

00:02:29.206 --> 00:02:29.526 A:middle
第三方音箱

00:02:29.966 --> 00:02:32.666 A:middle
以上就是对于

00:02:32.666 --> 00:02:34.126 A:middle
AirPlay 以及 AirPlay 2

00:02:34.126 --> 00:02:34.386 A:middle
高度概括的介绍

00:02:35.306 --> 00:02:36.366 A:middle
让我们看看本场介绍会

00:02:36.366 --> 00:02:38.436 A:middle
接下来的内容

00:02:38.646 --> 00:02:39.696 A:middle
首先我们将谈一谈

00:02:39.786 --> 00:02:41.146 A:middle
AirPlay 2 的基本嵌入步骤

00:02:41.436 --> 00:02:42.636 A:middle
也就是为了将

00:02:42.636 --> 00:02:44.346 A:middle
AirPlay 2 引入你的 App

00:02:44.346 --> 00:02:45.546 A:middle
需要采取的步骤

00:02:46.446 --> 00:02:47.706 A:middle
之后我们将重点讨论

00:02:47.706 --> 00:02:49.036 A:middle
一些更加高级的播放场景

00:02:49.036 --> 00:02:50.356 A:middle
在你嵌入 AirPlay 2 时

00:02:50.356 --> 00:02:51.276 A:middle
可能会遇到这些问题

00:02:52.096 --> 00:02:53.186 A:middle
最后我们将谈到

00:02:53.186 --> 00:02:54.166 A:middle
AirPlay 2 的

00:02:54.166 --> 00:02:55.376 A:middle
可用性

00:02:57.396 --> 00:03:00.026 A:middle
那么我们先来谈谈

00:02:57.396 --> 00:03:00.026 A:middle
那么我们先来谈谈

00:03:00.026 --> 00:03:00.926 A:middle
AirPlay 2 的嵌入

00:03:02.146 --> 00:03:04.416 A:middle
为了在 App 中

00:03:04.416 --> 00:03:05.886 A:middle
嵌入 AirPlay 2

00:03:05.956 --> 00:03:07.176 A:middle
基本上要采取 4 个步骤

00:03:08.246 --> 00:03:10.386 A:middle
第一步必须声明你的 App

00:03:10.386 --> 00:03:12.116 A:middle
提供的是

00:03:12.116 --> 00:03:12.476 A:middle
长音频

00:03:12.876 --> 00:03:14.176 A:middle
我一会儿再解释

00:03:14.176 --> 00:03:17.116 A:middle
什么是长音频

00:03:17.276 --> 00:03:18.796 A:middle
第二步要在 App 中添加一个

00:03:18.796 --> 00:03:20.586 A:middle
AirPlay 选择器

00:03:21.686 --> 00:03:23.506 A:middle
第三步要将

00:03:23.506 --> 00:03:24.356 A:middle
MediaPlayer 框架的

00:03:24.356 --> 00:03:25.566 A:middle
某些部分整合进去

00:03:26.126 --> 00:03:29.036 A:middle
最后一步 要引入

00:03:29.036 --> 00:03:30.306 A:middle
一个带有播放选项的 API

00:03:30.306 --> 00:03:31.776 A:middle
以便充分利用

00:03:31.776 --> 00:03:32.906 A:middle
经过改进的

00:03:32.906 --> 00:03:35.016 A:middle
AirPlay 2 缓冲系统

00:03:35.776 --> 00:03:37.036 A:middle
接下来让我们

00:03:37.036 --> 00:03:37.736 A:middle
逐一讲解这些步骤

00:03:39.556 --> 00:03:41.836 A:middle
首先要声明你自己

00:03:41.836 --> 00:03:43.106 A:middle
提供的是

00:03:43.106 --> 00:03:43.596 A:middle
长音频内容

00:03:44.416 --> 00:03:45.596 A:middle
所以到底什么是

00:03:45.596 --> 00:03:46.066 A:middle
长音频内容

00:03:46.546 --> 00:03:48.206 A:middle
长音频内容就是比如

00:03:48.206 --> 00:03:49.796 A:middle
像是音乐

00:03:50.166 --> 00:03:52.946 A:middle
播客或是有声书

00:03:52.946 --> 00:03:54.246 A:middle
这种音频与苹果电脑短促的

00:03:54.246 --> 00:03:56.246 A:middle
系统声音完全不同

00:03:56.736 --> 00:03:58.156 A:middle
声明你自己是

00:03:58.156 --> 00:03:59.726 A:middle
长音频内容的提供者

00:03:59.726 --> 00:04:00.916 A:middle
非常容易

00:03:59.726 --> 00:04:00.916 A:middle
非常容易

00:04:01.736 --> 00:04:02.916 A:middle
你只要把  App  中

00:04:02.916 --> 00:04:04.986 A:middle
AVAudioSession  的

00:04:05.116 --> 00:04:06.816 A:middle
路由共享策略

00:04:06.816 --> 00:04:07.386 A:middle
设置为长形的

00:04:08.776 --> 00:04:10.166 A:middle
这里是如何在 iOS 上操作的

00:04:10.166 --> 00:04:11.086 A:middle
代码片段

00:04:11.966 --> 00:04:12.916 A:middle
许多 iOS 开发人员

00:04:12.916 --> 00:04:14.786 A:middle
可能对于设置

00:04:14.786 --> 00:04:16.685 A:middle
分类和模式

00:04:16.685 --> 00:04:18.656 A:middle
比较熟悉

00:04:18.656 --> 00:04:20.226 A:middle
刚才提到的只是一个新的参数

00:04:20.226 --> 00:04:21.305 A:middle
路由共享策略:.长形

00:04:21.706 --> 00:04:22.256 A:middle
(RouteSharingPolicy:.longform.)

00:04:23.526 --> 00:04:24.816 A:middle
这个参数在

00:04:24.816 --> 00:04:26.556 A:middle
iOS 上已经

00:04:26.556 --> 00:04:27.676 A:middle
存在了一段时间了

00:04:27.676 --> 00:04:29.386 A:middle
AVAudioSession 在苹果电脑操作系统中

00:04:29.386 --> 00:04:31.436 A:middle
是新出现的

00:04:31.436 --> 00:04:32.496 A:middle
我不会在此展示代码片段

00:04:32.496 --> 00:04:34.336 A:middle
不过代码比你在 iOS 上写的

00:04:34.336 --> 00:04:35.186 A:middle
还要简单

00:04:35.586 --> 00:04:37.046 A:middle
你只要把路由共享策略

00:04:37.046 --> 00:04:37.966 A:middle
设置为长形

00:04:39.096 --> 00:04:40.866 A:middle
有关这个路由共享策略的

00:04:40.866 --> 00:04:42.956 A:middle
更多介绍

00:04:42.956 --> 00:04:44.446 A:middle
以及它还能为你的 App

00:04:44.446 --> 00:04:45.216 A:middle
做些什么

00:04:45.216 --> 00:04:47.266 A:middle
例如允许用户在

00:04:47.266 --> 00:04:49.086 A:middle
使用 App 进行 AirPlay 投射时

00:04:49.086 --> 00:04:51.716 A:middle
接电话

00:04:51.716 --> 00:04:53.226 A:middle
使用 AirPlay 2 将音频发送到音箱上

00:04:53.646 --> 00:04:54.826 A:middle
我希望你们能

00:04:54.826 --> 00:04:55.916 A:middle
观看本周早些时候举行的另一个介绍会

00:04:55.916 --> 00:04:57.496 A:middle
它的题目是 What's New in

00:04:57.496 --> 00:04:57.846 A:middle
Audio

00:04:57.876 --> 00:05:00.976 A:middle
好的 以上就是使用 AirPlay 2

00:04:57.876 --> 00:05:00.976 A:middle
好的 以上就是使用 AirPlay 2

00:05:00.976 --> 00:05:03.196 A:middle
需要做的

00:05:03.196 --> 00:05:04.266 A:middle
第一步

00:05:04.826 --> 00:05:06.556 A:middle
第二步是在 App 中添加

00:05:06.556 --> 00:05:08.346 A:middle
AirPlay 选择器

00:05:09.016 --> 00:05:11.916 A:middle
它将使用户能够

00:05:11.916 --> 00:05:13.926 A:middle
在 App 的使用范围内

00:05:13.926 --> 00:05:15.386 A:middle
把他们的内容传输到

00:05:15.386 --> 00:05:17.386 A:middle
AirPlay 音箱

00:05:17.716 --> 00:05:18.966 A:middle
做法很简单

00:05:18.966 --> 00:05:21.966 A:middle
你只要嵌入

00:05:22.396 --> 00:05:23.416 A:middle
一个新的 API

00:05:23.416 --> 00:05:24.846 A:middle
叫做 AVKit'sAVRoutePickerView

00:05:25.426 --> 00:05:26.756 A:middle
把这个界面

00:05:26.756 --> 00:05:27.496 A:middle
加到你的界面层级中

00:05:28.776 --> 00:05:30.606 A:middle
你可能想要控制

00:05:30.606 --> 00:05:32.206 A:middle
这个界面什么时候出现

00:05:32.206 --> 00:05:34.376 A:middle
例如当发现支持 AirPlay 或

00:05:34.376 --> 00:05:36.006 A:middle
AirPlay 2 的音箱时

00:05:36.006 --> 00:05:37.366 A:middle
才让它

00:05:37.366 --> 00:05:37.606 A:middle
出现

00:05:38.246 --> 00:05:39.916 A:middle
你可以嵌入

00:05:39.916 --> 00:05:42.046 A:middle
AVFoundation'sAVRouteDetector

00:05:42.146 --> 00:05:43.406 A:middle
它将在发现音箱

00:05:43.406 --> 00:05:44.666 A:middle
有传输路径时

00:05:44.666 --> 00:05:45.206 A:middle
会通知你

00:05:46.636 --> 00:05:49.786 A:middle
这些 API

00:05:49.786 --> 00:05:53.206 A:middle
在最新的操作系统中都有

00:05:53.206 --> 00:05:55.546 A:middle
包括 macOS iOS

00:05:55.546 --> 00:05:56.036 A:middle
和 Apple tvOS

00:05:57.066 --> 00:05:58.276 A:middle
提醒一下正在使用

00:05:58.276 --> 00:05:59.426 A:middle
MPVolumeView 的

00:05:59.426 --> 00:06:01.496 A:middle
iOS 开发工程师

00:05:59.426 --> 00:06:01.496 A:middle
iOS 开发工程师

00:06:01.496 --> 00:06:03.066 A:middle
它将继续工作

00:06:03.066 --> 00:06:04.146 A:middle
但我们鼓励大家

00:06:04.146 --> 00:06:05.086 A:middle
使用这些新的 API

00:06:05.636 --> 00:06:08.236 A:middle
以上是如何在 App 中

00:06:08.236 --> 00:06:09.646 A:middle
充分利用 AirPlay 2

00:06:09.646 --> 00:06:10.866 A:middle
的第二个步骤

00:06:11.576 --> 00:06:13.426 A:middle
你要做的第三件事是

00:06:13.426 --> 00:06:14.786 A:middle
将你的 App

00:06:14.786 --> 00:06:15.866 A:middle
与 MediaPlayer 框架下的部分内容进行

00:06:15.866 --> 00:06:16.326 A:middle
整合

00:06:16.836 --> 00:06:18.036 A:middle
这部分内容比较多

00:06:18.036 --> 00:06:18.986 A:middle
所以我今天

00:06:18.986 --> 00:06:20.566 A:middle
只重点讲

00:06:20.566 --> 00:06:20.936 A:middle
两件事

00:06:20.936 --> 00:06:23.416 A:middle
这些事情

00:06:24.036 --> 00:06:26.496 A:middle
这些 API 将让你

00:06:26.496 --> 00:06:27.726 A:middle
能够在锁屏上

00:06:27.726 --> 00:06:29.896 A:middle
或者是被 AirPlay 投射的苹果电视上

00:06:29.896 --> 00:06:31.836 A:middle
显示正在播放的专辑图片

00:06:32.776 --> 00:06:33.906 A:middle
等信息

00:06:34.286 --> 00:06:35.556 A:middle
同时它们将

00:06:35.556 --> 00:06:37.526 A:middle
让你能够接收

00:06:37.526 --> 00:06:39.716 A:middle
来自网络中其他设备

00:06:39.716 --> 00:06:42.056 A:middle
或是耳机等配件的

00:06:42.056 --> 00:06:43.846 A:middle
播放以及暂停

00:06:43.846 --> 00:06:44.336 A:middle
命令

00:06:44.916 --> 00:06:47.066 A:middle
我们需要的两个 API

00:06:47.066 --> 00:06:48.646 A:middle
我们希望你能

00:06:48.646 --> 00:06:49.036 A:middle
嵌入它们

00:06:49.796 --> 00:06:50.516 A:middle
第一个是

00:06:50.516 --> 00:06:52.446 A:middle
MPRemoteCommandCenter

00:06:52.446 --> 00:06:53.676 A:middle
它将允许你接收

00:06:53.676 --> 00:06:55.996 A:middle
远程命令

00:06:56.276 --> 00:06:58.486 A:middle
第二个是 MPNowPlayingInfoCenter

00:06:58.486 --> 00:06:59.476 A:middle
它将允许你

00:06:59.476 --> 00:07:01.076 A:middle
将正在播放的曲目

00:06:59.476 --> 00:07:01.076 A:middle
将正在播放的曲目

00:07:01.076 --> 00:07:02.456 A:middle
通知给元数据系统

00:07:02.626 --> 00:07:05.456 A:middle
好的 以上就是

00:07:05.456 --> 00:07:06.676 A:middle
你在 App 中使用 AirPlay 2

00:07:06.676 --> 00:07:08.086 A:middle
需要做的

00:07:08.086 --> 00:07:08.336 A:middle
第三件事

00:07:08.986 --> 00:07:10.536 A:middle
第四件事是

00:07:10.536 --> 00:07:11.946 A:middle
你应该嵌入一个

00:07:11.946 --> 00:07:13.846 A:middle
控制播放的 API

00:07:13.886 --> 00:07:15.666 A:middle
以充分利用

00:07:15.666 --> 00:07:16.916 A:middle
AirPlay 2 的升级版缓冲系统

00:07:18.106 --> 00:07:18.926 A:middle
为了让大家更好地理解

00:07:18.926 --> 00:07:20.786 A:middle
我们来深入了解一下

00:07:20.786 --> 00:07:22.136 A:middle
AirPlay 的音频和

00:07:22.136 --> 00:07:24.526 A:middle
缓冲级别

00:07:24.646 --> 00:07:26.556 A:middle
首先来了解一下

00:07:26.556 --> 00:07:26.876 A:middle
现在的 AirPlay 是如何工作的

00:07:28.076 --> 00:07:30.266 A:middle
当前的 AirPlay 实际上是

00:07:30.266 --> 00:07:32.506 A:middle
一个实时的音频流

00:07:32.506 --> 00:07:33.826 A:middle
接收的音箱只需要

00:07:33.826 --> 00:07:35.486 A:middle
几秒钟的缓冲时间

00:07:35.486 --> 00:07:36.506 A:middle
就可以流畅播放了

00:07:37.066 --> 00:07:39.936 A:middle
目前这个功能对于

00:07:39.936 --> 00:07:41.906 A:middle
单个音箱来说表现很好

00:07:41.906 --> 00:07:43.626 A:middle
在播放海量内容时

00:07:43.626 --> 00:07:44.116 A:middle
也工作顺畅

00:07:45.136 --> 00:07:48.256 A:middle
不过

00:07:48.256 --> 00:07:49.646 A:middle
如果我们只重点针对长音频

00:07:49.646 --> 00:07:51.526 A:middle
进一步开发例如音乐播客

00:07:51.596 --> 00:07:53.516 A:middle
或者是有声书

00:07:53.516 --> 00:07:56.356 A:middle
我们可能会取得更大进步

00:07:56.526 --> 00:07:58.616 A:middle
让我们来谈谈

00:07:58.616 --> 00:08:00.586 A:middle
AirPlay 2 中经过改进的缓冲系统

00:07:58.616 --> 00:08:00.586 A:middle
AirPlay 2 中经过改进的缓冲系统

00:08:01.186 --> 00:08:03.386 A:middle
我所说的经过改进的

00:08:03.386 --> 00:08:04.946 A:middle
AirPlay 2 缓冲系统是指什么呢？

00:08:05.536 --> 00:08:09.326 A:middle
正如名称所指的

00:08:09.326 --> 00:08:11.986 A:middle
我们使支持 AirPlay 2 的音箱

00:08:11.986 --> 00:08:13.516 A:middle
增加了非常大的缓冲能力

00:08:13.726 --> 00:08:14.566 A:middle
现在我希望你能就此认真思考

00:08:14.566 --> 00:08:16.796 A:middle
几分钟 而不是几秒钟

00:08:17.816 --> 00:08:18.746 A:middle
此外我们能够

00:08:18.746 --> 00:08:20.226 A:middle
以比实时还要快的速度

00:08:20.226 --> 00:08:21.486 A:middle
将音频内容

00:08:21.486 --> 00:08:22.596 A:middle
从你的 App 传输到音箱上

00:08:23.126 --> 00:08:25.416 A:middle
这项改进的优势

00:08:25.416 --> 00:08:26.096 A:middle
显而易见

00:08:27.396 --> 00:08:28.956 A:middle
AirPlay 音箱的巨大缓冲能力

00:08:28.956 --> 00:08:30.126 A:middle
能够大幅增加

00:08:30.126 --> 00:08:32.236 A:middle
AirPlay 的

00:08:32.236 --> 00:08:33.135 A:middle
稳定性

00:08:33.916 --> 00:08:35.106 A:middle
同时能对抗

00:08:35.106 --> 00:08:36.586 A:middle
更多的常见网络故障

00:08:36.586 --> 00:08:38.046 A:middle
例如你在走路外出倒垃圾

00:08:38.046 --> 00:08:39.226 A:middle
或走到屋内的死角

00:08:39.226 --> 00:08:40.326 A:middle
甚至是

00:08:40.326 --> 00:08:41.405 A:middle
在微波爆米花时

00:08:43.336 --> 00:08:44.606 A:middle
此外它还能

00:08:44.606 --> 00:08:46.106 A:middle
提供更加富有回应性的

00:08:46.106 --> 00:08:46.806 A:middle
播放体验

00:08:47.556 --> 00:08:48.876 A:middle
目前的 AirPlay

00:08:48.876 --> 00:08:50.016 A:middle
所拥有的实时属性

00:08:50.016 --> 00:08:51.816 A:middle
意味着存在一个与 AirPlay 音箱

00:08:51.816 --> 00:08:53.376 A:middle
缓冲级别有关的

00:08:53.376 --> 00:08:54.196 A:middle
固定的输出延迟时间

00:08:55.346 --> 00:08:57.046 A:middle
所以当你按下播放键

00:08:57.046 --> 00:08:58.386 A:middle
AirPlay 2 将更快

00:08:58.386 --> 00:08:58.776 A:middle
开始播放

00:08:58.776 --> 00:08:59.726 A:middle
当你按下一曲按键

00:08:59.726 --> 00:09:00.676 A:middle
它也会更快地做出反应

00:08:59.726 --> 00:09:00.676 A:middle
它也会更快地做出反应

00:09:01.726 --> 00:09:04.476 A:middle
这将带来

00:09:04.476 --> 00:09:06.366 A:middle
更好的用户体验

00:09:06.366 --> 00:09:08.586 A:middle
这也是为什么我们

00:09:08.586 --> 00:09:09.506 A:middle
如此兴奋地向大家介绍

00:09:09.506 --> 00:09:10.196 A:middle
新的缓冲系统

00:09:10.716 --> 00:09:14.106 A:middle
为了充分利用

00:09:14.106 --> 00:09:15.336 A:middle
经过改进的缓冲系统

00:09:15.336 --> 00:09:16.766 A:middle
你应该嵌入

00:09:16.766 --> 00:09:17.466 A:middle
几组 API 中的一组

00:09:18.646 --> 00:09:20.656 A:middle
第一组是 AVPlayer

00:09:20.656 --> 00:09:21.416 A:middle
以及 AVQueuePlayer

00:09:21.606 --> 00:09:23.696 A:middle
AVPlayer 拥有一组

00:09:23.696 --> 00:09:23.976 A:middle
播放 API

00:09:24.686 --> 00:09:26.016 A:middle
它们已经推出了一段时间

00:09:26.016 --> 00:09:27.686 A:middle
并且是通往 AirPlay 2

00:09:27.686 --> 00:09:29.196 A:middle
新缓冲系统

00:09:29.196 --> 00:09:29.906 A:middle
最便捷的路径

00:09:31.286 --> 00:09:33.146 A:middle
第二组 API

00:09:33.146 --> 00:09:34.556 A:middle
是我们今天要介绍的

00:09:34.556 --> 00:09:35.736 A:middle
新事物

00:09:35.736 --> 00:09:37.766 A:middle
叫做 AVSampleBufferAudio Renderer

00:09:37.766 --> 00:09:38.796 A:middle
以及 AVSampleBufferRender

00:09:38.796 --> 00:09:39.456 A:middle
Synchronizer

00:09:40.896 --> 00:09:42.536 A:middle
它们会让

00:09:42.536 --> 00:09:44.786 A:middle
App 的灵活性

00:09:45.396 --> 00:09:45.466 A:middle
得到提升

00:09:46.096 --> 00:09:47.276 A:middle
那么 让我们逐一来

00:09:47.276 --> 00:09:50.326 A:middle
谈谈这些 API

00:09:50.326 --> 00:09:51.516 A:middle
首先是 AVPlayer 和 AVQueuePlayer

00:09:52.666 --> 00:09:53.646 A:middle
正如我所说

00:09:53.646 --> 00:09:54.896 A:middle
它们已经推出了一段时间

00:09:54.896 --> 00:09:56.516 A:middle
在 iOS  4 时就有了

00:09:57.596 --> 00:09:59.026 A:middle
正因如此

00:09:59.026 --> 00:10:00.316 A:middle
在开发者网站上有大量的存档记录

00:09:59.026 --> 00:10:00.316 A:middle
在开发者网站上有大量的存档记录

00:10:00.316 --> 00:10:01.716 A:middle
还有很多的

00:10:01.716 --> 00:10:02.516 A:middle
样本代码

00:10:03.046 --> 00:10:04.286 A:middle
所以如果你想要获得详细的信息

00:10:04.286 --> 00:10:06.326 A:middle
我鼓励你去

00:10:06.326 --> 00:10:07.896 A:middle
查看开发者的网站

00:10:07.896 --> 00:10:09.466 A:middle
在这里我只打算给出

00:10:09.466 --> 00:10:10.646 A:middle
关于这些 API 的高度概括的

00:10:10.646 --> 00:10:11.486 A:middle
介绍

00:10:12.366 --> 00:10:14.316 A:middle
我接下来要做的

00:10:14.316 --> 00:10:15.876 A:middle
是将粗略介绍一遍

00:10:15.876 --> 00:10:17.336 A:middle
如何用这个 API

00:10:17.336 --> 00:10:17.666 A:middle
建立 App

00:10:18.196 --> 00:10:19.236 A:middle
这里是你的 ClientApp

00:10:19.236 --> 00:10:20.526 A:middle
如果你想用 AVPlayer

00:10:20.526 --> 00:10:21.706 A:middle
或 AVQueuePlayer 来建立 App

00:10:21.706 --> 00:10:23.186 A:middle
首先要做的就是

00:10:23.186 --> 00:10:24.356 A:middle
将这些对象中的一个

00:10:24.356 --> 00:10:25.926 A:middle
实例化

00:10:27.246 --> 00:10:28.716 A:middle
我在这里使用的是 AVQueuePlayer

00:10:28.716 --> 00:10:29.916 A:middle
如果你用 AVPlayer 的话

00:10:29.916 --> 00:10:31.196 A:middle
步骤是一样的

00:10:31.686 --> 00:10:35.576 A:middle
接下来你要把

00:10:35.576 --> 00:10:37.006 A:middle
指向你播放内容的 URL

00:10:37.006 --> 00:10:38.616 A:middle
当然这个内容可以是

00:10:38.616 --> 00:10:40.316 A:middle
存在本地的

00:10:40.316 --> 00:10:41.296 A:middle
或是在云端的

00:10:41.296 --> 00:10:41.586 A:middle
它可以是在远端的

00:10:41.586 --> 00:10:43.296 A:middle
你把这个 URL

00:10:43.296 --> 00:10:45.006 A:middle
放在 AVAsset 里

00:10:45.006 --> 00:10:46.766 A:middle
再把这个 AVAsset

00:10:46.766 --> 00:10:48.246 A:middle
放在

00:10:48.246 --> 00:10:48.766 A:middle
AVPlayerItem 里面

00:10:50.296 --> 00:10:51.786 A:middle
接下来你要把

00:10:51.786 --> 00:10:53.146 A:middle
这个 AVPlayerItem

00:10:53.146 --> 00:10:53.646 A:middle
放到 AVQueuePlayer

00:10:54.246 --> 00:10:56.636 A:middle
在你把它移交过去之后

00:10:56.636 --> 00:10:57.466 A:middle
你就准备好可以启动

00:10:57.466 --> 00:10:57.846 A:middle
播放了

00:10:57.966 --> 00:11:00.536 A:middle
你只需简单将

00:10:57.966 --> 00:11:00.536 A:middle
你只需简单将

00:11:00.536 --> 00:11:01.366 A:middle
AVQueuePlayer 的 rate 设置为 1

00:11:01.366 --> 00:11:03.856 A:middle
它就会开始

00:11:03.856 --> 00:11:05.146 A:middle
下载音频数据

00:11:05.146 --> 00:11:07.496 A:middle
然后在

00:11:08.036 --> 00:11:10.266 A:middle
音箱中

00:11:10.266 --> 00:11:10.806 A:middle
播放

00:11:11.206 --> 00:11:15.876 A:middle
这就是对 AVPlayer 和 AVQueuePlayer 的

00:11:15.876 --> 00:11:17.346 A:middle
简要介绍

00:11:17.346 --> 00:11:18.466 A:middle
以上内容同样适用于

00:11:18.466 --> 00:11:19.876 A:middle
视频文件

00:11:20.546 --> 00:11:21.316 A:middle
如果你想播放

00:11:21.316 --> 00:11:22.686 A:middle
视频内容

00:11:22.686 --> 00:11:23.986 A:middle
用 AVPlayer 和 AVQueuePlayer

00:11:23.986 --> 00:11:24.446 A:middle
也能轻松搞定

00:11:25.026 --> 00:11:29.056 A:middle
再强调一遍

00:11:29.056 --> 00:11:31.036 A:middle
AirPlay 2 最简单的使用方法

00:11:31.036 --> 00:11:31.866 A:middle
就是通过这些 API

00:11:32.666 --> 00:11:34.486 A:middle
不过我们也明白

00:11:34.486 --> 00:11:35.346 A:middle
可能不是人人都这么认为

00:11:35.746 --> 00:11:37.146 A:middle
可能有这样一类

00:11:37.146 --> 00:11:38.166 A:middle
音频播放 App

00:11:38.166 --> 00:11:39.736 A:middle
它们想要有

00:11:39.736 --> 00:11:40.936 A:middle
自己的 IO

00:11:41.446 --> 00:11:43.916 A:middle
自己的 DRM

00:11:43.976 --> 00:11:46.506 A:middle
甚至在媒体数据被渲染之前

00:11:46.596 --> 00:11:47.456 A:middle
对它进行预处理

00:11:47.566 --> 00:11:48.866 A:middle
这些 App 需要更多的灵活性

00:11:48.866 --> 00:11:50.216 A:middle
这是刚才那些 API

00:11:50.346 --> 00:11:50.716 A:middle
无法提供的

00:11:51.176 --> 00:11:54.416 A:middle
对于这些开发者

00:11:54.416 --> 00:11:55.986 A:middle
我们想介绍以下这些新类别

00:11:56.536 --> 00:11:58.616 A:middle
AVSampleBufferAudio Renderer 和

00:11:58.616 --> 00:11:59.586 A:middle
AVSampleBufferRender

00:11:59.586 --> 00:12:00.236 A:middle
Synchronizer

00:11:59.586 --> 00:12:00.236 A:middle
Synchronizer

00:12:01.766 --> 00:12:03.646 A:middle
用这组新的 API

00:12:03.646 --> 00:12:05.006 A:middle
来设置播放的话

00:12:05.006 --> 00:12:06.566 A:middle
你的 App 就要承担额外的责任

00:12:07.786 --> 00:12:09.536 A:middle
首先你的 App

00:12:09.536 --> 00:12:10.846 A:middle
要负责找到播放内容的来源

00:12:10.846 --> 00:12:11.666 A:middle
并对其解析

00:12:12.156 --> 00:12:13.286 A:middle
你需要到源头去获取内容

00:12:13.286 --> 00:12:14.796 A:middle
不管是下载还是从光盘上读取

00:12:14.796 --> 00:12:16.396 A:middle
都可以

00:12:17.046 --> 00:12:18.596 A:middle
然后你的 App 必须去解析它

00:12:18.596 --> 00:12:20.806 A:middle
并得到原始音频数据

00:12:20.806 --> 00:12:22.786 A:middle
原始音频数据缓冲到 API

00:12:22.926 --> 00:12:23.436 A:middle
再进行渲染

00:12:24.936 --> 00:12:26.086 A:middle
这有点类似于

00:12:26.086 --> 00:12:27.386 A:middle
AudioQueue 但它在

00:12:27.386 --> 00:12:28.806 A:middle
更强缓冲能力下 会表现得更好

00:12:28.806 --> 00:12:31.776 A:middle
例如拥有更好缓冲系统的

00:12:31.916 --> 00:12:32.526 A:middle
AirPlay

00:12:32.826 --> 00:12:35.366 A:middle
正因为这些都是新的内容

00:12:35.366 --> 00:12:36.486 A:middle
我们这场介绍会余下的时间

00:12:36.486 --> 00:12:37.666 A:middle
都将用来

00:12:37.976 --> 00:12:38.356 A:middle
介绍它们

00:12:38.496 --> 00:12:42.676 A:middle
好的 让我们来看一下

00:12:42.676 --> 00:12:44.156 A:middle
一个简单的框图

00:12:44.156 --> 00:12:45.436 A:middle
介绍如何用这些 API

00:12:45.436 --> 00:12:45.906 A:middle
来建立 App

00:12:47.096 --> 00:12:48.706 A:middle
再一次使用你的 Client App

00:12:49.436 --> 00:12:50.286 A:middle
建立 App 你首先

00:12:50.286 --> 00:12:51.376 A:middle
要做的事

00:12:51.376 --> 00:12:52.046 A:middle
就是你需要对

00:12:52.046 --> 00:12:52.896 A:middle
AVSampleBufferRenderSynchronizer

00:12:53.286 --> 00:12:54.486 A:middle
以及

00:12:54.486 --> 00:12:55.776 A:middle
AVSampleBufferAudio Renderer

00:12:55.776 --> 00:12:57.176 A:middle
进行实例化

00:12:58.156 --> 00:12:59.656 A:middle
在这些分类当中

00:12:59.656 --> 00:13:01.516 A:middle
类型 AudioRenderer

00:12:59.656 --> 00:13:01.516 A:middle
类型 AudioRenderer

00:13:01.516 --> 00:13:02.436 A:middle
负责

00:13:02.436 --> 00:13:04.226 A:middle
对音频进行解析

00:13:04.226 --> 00:13:05.686 A:middle
类型 Synchronizer 负责

00:13:05.686 --> 00:13:06.766 A:middle
建立媒体的

00:13:06.766 --> 00:13:08.146 A:middle
时间线

00:13:09.416 --> 00:13:10.506 A:middle
你可能有充足的理由去问

00:13:10.506 --> 00:13:11.536 A:middle
为什么它们被分成两类

00:13:11.536 --> 00:13:12.586 A:middle
为什么不把它们

00:13:12.586 --> 00:13:13.506 A:middle
合二为一

00:13:13.626 --> 00:13:14.566 A:middle
我向你保证

00:13:14.566 --> 00:13:15.146 A:middle
这么做有充足的理由

00:13:15.146 --> 00:13:16.046 A:middle
但我们晚一点再告诉你原因

00:13:16.306 --> 00:13:17.126 A:middle
不过

00:13:17.616 --> 00:13:19.106 A:middle
AudioRenderer 它确实

00:13:19.106 --> 00:13:20.066 A:middle
负责解析音频

00:13:20.186 --> 00:13:21.676 A:middle
Synchronizer 是建立

00:13:21.676 --> 00:13:23.636 A:middle
媒体的时间线

00:13:24.156 --> 00:13:25.646 A:middle
所以当你实例化了之后

00:13:25.646 --> 00:13:27.786 A:middle
你可以把 AudioRenderer

00:13:27.976 --> 00:13:28.866 A:middle
添加到 Synchronizer

00:13:29.436 --> 00:13:31.596 A:middle
这么做是告诉 AudioRenderer

00:13:31.596 --> 00:13:33.006 A:middle
要去跟从由 Synchronizer 建立的

00:13:33.006 --> 00:13:34.816 A:middle
媒体时间线

00:13:34.816 --> 00:13:38.386 A:middle
现在当你开始和

00:13:38.386 --> 00:13:39.816 A:middle
AVSampleBufferAudio Renderer

00:13:39.866 --> 00:13:40.836 A:middle
开始工作

00:13:40.836 --> 00:13:41.766 A:middle
它会告诉你

00:13:41.766 --> 00:13:43.656 A:middle
它在什么时间需要更多的媒体数据

00:13:44.376 --> 00:13:45.686 A:middle
而当它告诉你它需要

00:13:45.686 --> 00:13:46.906 A:middle
更多的媒体数据时

00:13:46.906 --> 00:13:48.686 A:middle
作为回应 你应该反馈给它

00:13:49.776 --> 00:13:50.796 A:middle
给它提供一些音频数据

00:13:51.416 --> 00:13:54.016 A:middle
完成这些之后

00:13:54.016 --> 00:13:55.676 A:middle
你就可以把 Synchronizer 的

00:13:55.676 --> 00:13:57.066 A:middle
Rate 设为 1

00:13:57.066 --> 00:13:57.706 A:middle
然后开始播放

00:13:58.216 --> 00:14:00.596 A:middle
在你把 Synchronizer 的 rate 设为 1 之后

00:13:58.216 --> 00:14:00.596 A:middle
在你把 Synchronizer 的 rate 设为 1 之后

00:14:00.596 --> 00:14:02.476 A:middle
音频数据将开始

00:14:02.476 --> 00:14:04.016 A:middle
从 AudioRenderer 中

00:14:04.016 --> 00:14:04.676 A:middle
流出

00:14:05.226 --> 00:14:09.136 A:middle
这就是基本的非常概括的

00:14:09.136 --> 00:14:10.356 A:middle
介绍教你如何用

00:14:10.356 --> 00:14:11.646 A:middle
AVSampleBufferAudio Renderer 和

00:14:11.646 --> 00:14:13.216 A:middle
AVSampleBufferRender

00:14:13.216 --> 00:14:14.036 A:middle
Synchronizer

00:14:14.036 --> 00:14:14.656 A:middle
来建立播放引擎

00:14:15.136 --> 00:14:16.056 A:middle
现在我要邀请我的同事

00:14:16.056 --> 00:14:17.506 A:middle
Adam Sonnanstine 上台

00:14:17.506 --> 00:14:19.236 A:middle
为大家做一个演示

00:14:20.016 --> 00:14:21.196 A:middle
鼓掌

00:14:21.196 --> 00:14:21.776 A:middle
&gt;&gt;  谢谢 David

00:14:23.156 --> 00:14:24.566 A:middle
今天我很高兴在这里

00:14:24.566 --> 00:14:26.836 A:middle
为大家演示 AirPlay 2

00:14:26.836 --> 00:14:28.356 A:middle
以及它更强大的可靠性

00:14:28.356 --> 00:14:29.016 A:middle
和稳定性

00:14:29.066 --> 00:14:31.236 A:middle
我将用这个

00:14:31.236 --> 00:14:32.726 A:middle
我们开发的

00:14:32.726 --> 00:14:33.256 A:middle
样品 App 来演示

00:14:33.256 --> 00:14:35.206 A:middle
这个 App

00:14:35.266 --> 00:14:37.416 A:middle
在 WWDC 结束后

00:14:37.416 --> 00:14:38.626 A:middle
很快就会在样本代码中提供出来

00:14:39.316 --> 00:14:40.916 A:middle
我们在台上还准备了一台苹果电视

00:14:40.916 --> 00:14:42.336 A:middle
用于演示

00:14:42.646 --> 00:14:44.576 A:middle
分别用 AirPlay 和 AirPlay 2

00:14:44.576 --> 00:14:46.626 A:middle
两种方式

00:14:46.626 --> 00:14:48.236 A:middle
将播放内容从手机传输到苹果电视上

00:14:48.566 --> 00:14:50.136 A:middle
我们先来看看这个 App

00:14:50.136 --> 00:14:51.816 A:middle
你可以看到它只是一个简单的

00:14:51.816 --> 00:14:53.266 A:middle
精简的音乐播放器的

00:14:53.266 --> 00:14:54.266 A:middle
交互界面

00:14:54.816 --> 00:14:57.156 A:middle
这里可以看到

00:14:57.156 --> 00:14:59.226 A:middle
控制中心的整合

00:14:59.566 --> 00:15:01.066 A:middle
因为我嵌入了 MediaPlayer 的 API

00:14:59.566 --> 00:15:01.066 A:middle
因为我嵌入了 MediaPlayer 的 API

00:15:01.126 --> 00:15:02.786 A:middle
就像 David 刚才

00:15:02.786 --> 00:15:03.496 A:middle
提到的那样

00:15:03.496 --> 00:15:05.106 A:middle
我要开始尝试

00:15:05.106 --> 00:15:05.946 A:middle
播放了

00:15:05.946 --> 00:15:07.736 A:middle
你能够听到它

00:15:08.346 --> 00:15:10.426 A:middle
我先用 AirPlay 投射到我的苹果电视上

00:15:10.996 --> 00:15:16.216 A:middle
这款 App 现在还没有

00:15:16.216 --> 00:15:18.486 A:middle
优化到 AirPlay 2

00:15:18.486 --> 00:15:19.646 A:middle
我只是想给大家看一下

00:15:19.716 --> 00:15:21.746 A:middle
AirPlay 的表现

00:15:21.746 --> 00:15:23.036 A:middle
大概是什么样子

00:15:23.726 --> 00:15:25.806 A:middle
我希望你们想象一下

00:15:25.806 --> 00:15:27.676 A:middle
自己正坐在客厅的

00:15:27.956 --> 00:15:29.616 A:middle
沙发上

00:15:29.616 --> 00:15:31.346 A:middle
享受这段音乐

00:15:31.346 --> 00:15:32.646 A:middle
音乐从我的手机

00:15:32.646 --> 00:15:34.706 A:middle
流向我的苹果电视

00:15:34.706 --> 00:15:36.296 A:middle
现在我决定

00:15:36.436 --> 00:15:37.786 A:middle
把手机放在口袋里

00:15:37.786 --> 00:15:39.476 A:middle
出门倒垃圾

00:15:40.366 --> 00:15:42.816 A:middle
这一过程中可能会走出

00:15:42.816 --> 00:15:45.236 A:middle
我的 Wi-Fi 覆盖区

00:15:45.236 --> 00:15:46.746 A:middle
我要用这个口袋模拟出门的效果

00:15:46.806 --> 00:15:48.976 A:middle
这个口袋能阻隔

00:15:48.976 --> 00:15:50.596 A:middle
里面东西发射的所有讯号

00:15:50.596 --> 00:15:52.836 A:middle
电磁辐射无法进出

00:15:52.836 --> 00:15:55.006 A:middle
这个口袋

00:15:55.006 --> 00:15:56.176 A:middle
包括 Wi-Fi 信号

00:15:56.876 --> 00:16:00.166 A:middle
我将带上我的手机走出门

00:15:56.876 --> 00:16:00.166 A:middle
我将带上我的手机走出门

00:16:00.166 --> 00:16:03.096 A:middle
然后你能听到

00:16:03.096 --> 00:16:05.766 A:middle
音乐几乎是立刻

00:16:05.766 --> 00:16:06.656 A:middle
中断了

00:16:07.016 --> 00:16:07.996 A:middle
你或许以前也有过

00:16:07.996 --> 00:16:09.826 A:middle
类似的经历

00:16:09.826 --> 00:16:11.046 A:middle
如果你正在我家做客

00:16:11.046 --> 00:16:12.376 A:middle
享受着这段音乐

00:16:12.626 --> 00:16:13.586 A:middle
你可能会认为

00:16:13.586 --> 00:16:14.906 A:middle
我不是一个称职的主人

00:16:15.716 --> 00:16:17.826 A:middle
让我们继续

00:16:17.826 --> 00:16:19.146 A:middle
我现在暂停音乐

00:16:20.696 --> 00:16:23.446 A:middle
让我们换到 Xcode 界面

00:16:23.446 --> 00:16:24.896 A:middle
我将向你们展示

00:16:25.246 --> 00:16:27.606 A:middle
如何通过几个简单的步骤

00:16:27.856 --> 00:16:30.446 A:middle
来让这个 App 升级到

00:16:30.446 --> 00:16:30.736 A:middle
AirPlay 2

00:16:31.716 --> 00:16:33.876 A:middle
来看 Xcode 界面

00:16:33.876 --> 00:16:35.636 A:middle
这里有一段非常短的代码片段

00:16:35.636 --> 00:16:37.076 A:middle
是我的 App 的

00:16:37.076 --> 00:16:38.316 A:middle
其余部分放在了

00:16:38.526 --> 00:16:39.386 A:middle
别的文件中

00:16:39.776 --> 00:16:41.416 A:middle
这里有一个

00:16:41.876 --> 00:16:43.946 A:middle
App 其余部分使用的函数

00:16:44.176 --> 00:16:45.956 A:middle
可用来抓取目标

00:16:45.956 --> 00:16:48.486 A:middle
实现音频的

00:16:48.486 --> 00:16:49.016 A:middle
播放

00:16:49.506 --> 00:16:50.466 A:middle
它基本上

00:16:50.466 --> 00:16:50.866 A:middle
是一个工厂函数

00:16:50.866 --> 00:16:52.446 A:middle
这个函数会返回一个

00:16:52.446 --> 00:16:53.956 A:middle
符合某种协议的目标

00:16:53.956 --> 00:16:54.956 A:middle
相关协议我在 App 的其他地方

00:16:54.956 --> 00:16:55.186 A:middle
已经进行了定义

00:16:55.606 --> 00:16:56.246 A:middle
我们不需要探讨细节

00:16:56.246 --> 00:16:57.836 A:middle
但它定义出了

00:16:57.836 --> 00:16:59.356 A:middle
诸如播放暂停等

00:16:59.356 --> 00:17:00.966 A:middle
动作的方法

00:16:59.356 --> 00:17:00.966 A:middle
动作的方法

00:17:00.966 --> 00:17:02.326 A:middle
这是一个播放器所

00:17:02.326 --> 00:17:02.576 A:middle
需要的

00:17:03.276 --> 00:17:04.406 A:middle
我们有一个现行的

00:17:04.406 --> 00:17:06.026 A:middle
对于这个协议的实现

00:17:06.106 --> 00:17:07.715 A:middle
刚刚在我们看到的演示中

00:17:07.715 --> 00:17:08.396 A:middle
使用到了

00:17:08.396 --> 00:17:10.516 A:middle
我们现在要做的

00:17:10.516 --> 00:17:11.715 A:middle
是创建一个全新的

00:17:11.715 --> 00:17:14.566 A:middle
音频播放器的实现

00:17:14.566 --> 00:17:15.705 A:middle
我将把它命名为

00:17:15.705 --> 00:17:17.536 A:middle
SampleBufferAudioPlayer

00:17:17.536 --> 00:17:19.425 A:middle
因为我们将会用到

00:17:19.425 --> 00:17:21.356 A:middle
AVSampleBufferAudio

00:17:21.356 --> 00:17:21.786 A:middle
Renderer

00:17:21.786 --> 00:17:23.596 A:middle
我将先行

00:17:23.596 --> 00:17:25.096 A:middle
把它替换进来

00:17:25.096 --> 00:17:26.886 A:middle
这样我们下次启动 App 时

00:17:26.886 --> 00:17:28.156 A:middle
就可以使用新的实现

00:17:28.156 --> 00:17:28.826 A:middle
而不是旧版的

00:17:28.826 --> 00:17:29.526 A:middle
实现了

00:17:30.736 --> 00:17:32.386 A:middle
正如我提到的

00:17:32.386 --> 00:17:33.846 A:middle
这个类将建立在

00:17:33.846 --> 00:17:35.666 A:middle
AVSampleBufferAudio Renderer 的基础上

00:17:35.896 --> 00:17:36.946 A:middle
我们也将会用到

00:17:37.046 --> 00:17:38.266 A:middle
AVSampleBufferRender

00:17:38.266 --> 00:17:39.016 A:middle
Synchronizer

00:17:39.296 --> 00:17:40.576 A:middle
这些

00:17:40.576 --> 00:17:41.786 A:middle
David 已经和你们介绍过了

00:17:42.376 --> 00:17:43.616 A:middle
我只想重申一下

00:17:43.616 --> 00:17:45.766 A:middle
David 刚才所说的

00:17:45.766 --> 00:17:46.796 A:middle
AVPlayer 拥有我接下来即将

00:17:46.796 --> 00:17:48.176 A:middle
展示的所有优点

00:17:48.176 --> 00:17:49.626 A:middle
而在你这边只需要

00:17:49.626 --> 00:17:50.486 A:middle
做很少的工作就可以了

00:17:50.486 --> 00:17:51.536 A:middle
所以如果你已经在使用 AVPlayer

00:17:51.536 --> 00:17:53.026 A:middle
或者你认为你可以

00:17:53.026 --> 00:17:54.926 A:middle
用它

00:17:54.926 --> 00:17:55.416 A:middle
我们推荐你这么做

00:17:55.596 --> 00:17:57.036 A:middle
至于其余的人我将

00:17:57.036 --> 00:17:58.176 A:middle
向你展示如何使用

00:17:58.176 --> 00:17:58.786 A:middle
这些新的类别

00:18:00.166 --> 00:18:03.716 A:middle
所以一旦我得到了我的状态

00:18:03.716 --> 00:18:05.236 A:middle
我将使用 addRenderer 的方法

00:18:05.776 --> 00:18:06.816 A:middle
将 AudioRenderer 和

00:18:06.816 --> 00:18:08.476 A:middle
RenderSynchronizer 进行连接

00:18:08.476 --> 00:18:10.066 A:middle
而且我会在

00:18:10.066 --> 00:18:11.046 A:middle
创建了

00:18:11.086 --> 00:18:12.516 A:middle
SampleBufferAudioPlayer 后

00:18:12.516 --> 00:18:12.936 A:middle
立即这样做

00:18:13.416 --> 00:18:15.796 A:middle
然后我们需要与渲染器

00:18:15.796 --> 00:18:17.206 A:middle
进行互动

00:18:17.206 --> 00:18:18.396 A:middle
调出

00:18:18.396 --> 00:18:20.486 A:middle
requestMediaDataWhenReady

00:18:20.486 --> 00:18:20.786 A:middle
方法

00:18:20.786 --> 00:18:22.496 A:middle
它所能做的就是

00:18:22.496 --> 00:18:24.236 A:middle
它将调用我 App 的闭包函数

00:18:24.236 --> 00:18:26.766 A:middle
以便我可以给

00:18:26.766 --> 00:18:28.206 A:middle
AudioRenderer 提供更多的

00:18:28.206 --> 00:18:29.756 A:middle
音频数据

00:18:29.756 --> 00:18:30.826 A:middle
只要 AudioRenderer 认为它需要

00:18:30.826 --> 00:18:31.656 A:middle
接收更多的数据

00:18:32.396 --> 00:18:35.296 A:middle
只要它一有需要

00:18:35.296 --> 00:18:37.116 A:middle
就会调用 App 的闭包函数

00:18:37.116 --> 00:18:39.116 A:middle
保证始终拥有足够的音频数据

00:18:40.796 --> 00:18:43.146 A:middle
在闭包函数内

00:18:43.146 --> 00:18:44.666 A:middle
我将使它循环

00:18:44.986 --> 00:18:46.476 A:middle
我将继续追加更多的数据

00:18:46.476 --> 00:18:47.566 A:middle
只要

00:18:47.566 --> 00:18:49.426 A:middle
AudioRenderer 准备好

00:18:49.426 --> 00:18:50.166 A:middle
接收更多的媒体数据

00:18:51.256 --> 00:18:52.886 A:middle
在循环中第一件事就是

00:18:52.886 --> 00:18:55.156 A:middle
就是获取下一段

00:18:55.156 --> 00:18:57.196 A:middle
音频数据并将它打包成

00:18:57.196 --> 00:18:58.716 A:middle
CMSampleBuffer

00:18:59.366 --> 00:19:01.726 A:middle
这里的这个方法只是

00:18:59.366 --> 00:19:01.726 A:middle
这里的这个方法只是

00:19:01.826 --> 00:19:04.116 A:middle
我的这个 App 自己的

00:19:04.116 --> 00:19:05.726 A:middle
抓取后一部分音频数据的

00:19:05.726 --> 00:19:06.366 A:middle
逻辑

00:19:06.776 --> 00:19:07.746 A:middle
你的 App 可以有

00:19:07.746 --> 00:19:09.216 A:middle
你自己的逻辑

00:19:09.216 --> 00:19:10.596 A:middle
可以是从网络上抓取数据

00:19:10.596 --> 00:19:11.876 A:middle
或从光盘上解码

00:19:11.876 --> 00:19:13.526 A:middle
如果你想看我这个版本的更多细节

00:19:13.526 --> 00:19:15.426 A:middle
还是老样子

00:19:15.426 --> 00:19:16.376 A:middle
去网站上的样本代码查看

00:19:17.156 --> 00:19:19.056 A:middle
这里我有这个设置

00:19:19.056 --> 00:19:20.796 A:middle
可以返回一个可选的 CMSampleBuffer

00:19:20.796 --> 00:19:22.716 A:middle
这样一来我可以用一个 0 返回值

00:19:22.716 --> 00:19:24.376 A:middle
来标记出

00:19:24.376 --> 00:19:26.926 A:middle
已经达到了数据的最末端

00:19:27.106 --> 00:19:28.976 A:middle
一旦我得到了样本缓冲

00:19:28.976 --> 00:19:30.966 A:middle
就可以使用 enqueuer 的方法

00:19:30.966 --> 00:19:32.046 A:middle
让它排入

00:19:32.046 --> 00:19:32.896 A:middle
AudioRenderer

00:19:32.896 --> 00:19:35.026 A:middle
它所要做的就是

00:19:35.026 --> 00:19:37.146 A:middle
将音频数据交给

00:19:37.146 --> 00:19:38.456 A:middle
解析器

00:19:38.456 --> 00:19:39.406 A:middle
以便在合适的时间

00:19:39.406 --> 00:19:40.216 A:middle
进行播放

00:19:41.286 --> 00:19:43.286 A:middle
正如刚才提过的

00:19:43.566 --> 00:19:44.976 A:middle
我用一个 0 样本缓冲值

00:19:44.976 --> 00:19:46.016 A:middle
去标记出后面没有任何数据了

00:19:46.486 --> 00:19:47.776 A:middle
当出现这种情况时

00:19:47.776 --> 00:19:48.716 A:middle
我需要明确地告诉

00:19:48.716 --> 00:19:50.556 A:middle
AudioRenderer 停止索要

00:19:50.556 --> 00:19:51.416 A:middle
更多的媒体数据

00:19:52.006 --> 00:19:53.406 A:middle
如果我不这么做并且退出

00:19:53.406 --> 00:19:55.376 A:middle
app的闭包函数

00:19:55.376 --> 00:19:57.046 A:middle
那么 AudioRenderer 就会

00:19:57.046 --> 00:19:58.896 A:middle
在再次准备好接收数据时

00:19:58.896 --> 00:20:00.736 A:middle
立刻触发 App 的闭包函数

00:19:58.896 --> 00:20:00.736 A:middle
立刻触发 App 的闭包函数

00:20:00.736 --> 00:20:01.616 A:middle
但我已经没有更多数据提供给它

00:20:01.616 --> 00:20:02.686 A:middle
我当然不希望

00:20:02.686 --> 00:20:03.036 A:middle
它这么做

00:20:03.106 --> 00:20:04.356 A:middle
所以我需要叫它停止

00:20:06.046 --> 00:20:07.796 A:middle
这里的这个函数基本上

00:20:07.796 --> 00:20:09.406 A:middle
就是你和 AudioRenderer

00:20:09.406 --> 00:20:10.896 A:middle
的全部互动了

00:20:10.896 --> 00:20:12.316 A:middle
这是对于一个简单的使用案例来说

00:20:13.476 --> 00:20:14.376 A:middle
现在我们需要和

00:20:14.376 --> 00:20:15.146 A:middle
RenderSynchronizer

00:20:15.146 --> 00:20:16.166 A:middle
一起来做点事情

00:20:16.706 --> 00:20:19.116 A:middle
这里有一个 play 方法

00:20:19.116 --> 00:20:21.066 A:middle
实际上就是将 RenderSynchronizer

00:20:21.066 --> 00:20:22.546 A:middle
的 rate 设为 1

00:20:22.546 --> 00:20:23.906 A:middle
它就会开始播放

00:20:23.906 --> 00:20:25.776 A:middle
我有一些准备工作要做

00:20:25.776 --> 00:20:26.836 A:middle
我们不需要关注

00:20:26.836 --> 00:20:27.956 A:middle
细节是怎么做的

00:20:27.956 --> 00:20:29.576 A:middle
只需要知道它最后会

00:20:29.576 --> 00:20:30.826 A:middle
引发 enqueueing 方法

00:20:30.826 --> 00:20:32.036 A:middle
你大概能明白

00:20:32.036 --> 00:20:32.896 A:middle
事情是如何一步步进行到这里的了

00:20:33.376 --> 00:20:35.096 A:middle
我还有一些 UI 要更新

00:20:35.096 --> 00:20:36.636 A:middle
在我每次播放或暂停的时候

00:20:36.636 --> 00:20:38.326 A:middle
所以这个方法会

00:20:38.326 --> 00:20:39.886 A:middle
被派到主要的队列

00:20:39.886 --> 00:20:41.336 A:middle
以便让 UI 及时

00:20:41.336 --> 00:20:41.586 A:middle
更新

00:20:42.106 --> 00:20:44.566 A:middle
同样的 我还有一个暂停方法

00:20:44.566 --> 00:20:45.736 A:middle
唯一的区别就是

00:20:45.736 --> 00:20:47.376 A:middle
它将 renderSynchronizer 的

00:20:47.376 --> 00:20:49.376 A:middle
rate 设为 0

00:20:50.356 --> 00:20:52.796 A:middle
那么现在你已经看到了

00:20:52.796 --> 00:20:53.546 A:middle
我们和 AVFoundation

00:20:53.546 --> 00:20:54.846 A:middle
进行的所有互动

00:20:55.076 --> 00:20:56.396 A:middle
我还需要再补充

00:20:56.396 --> 00:20:57.576 A:middle
一点代码

00:20:57.576 --> 00:20:59.326 A:middle
这样才能确保我的 App 顺利运行

00:20:59.326 --> 00:21:00.836 A:middle
我们不用仔细读它是什么

00:20:59.326 --> 00:21:00.836 A:middle
我们不用仔细读它是什么

00:21:00.836 --> 00:21:02.236 A:middle
只要加上

00:21:02.236 --> 00:21:02.846 A:middle
就行了

00:21:03.556 --> 00:21:05.586 A:middle
然后我们就完成了

00:21:05.586 --> 00:21:06.166 A:middle
对 App 的重建改造

00:21:06.166 --> 00:21:09.036 A:middle
好像发生了一些

00:21:10.356 --> 00:21:11.666 A:middle
编辑错误

00:21:12.296 --> 00:21:14.846 A:middle
我现在要做的是

00:21:15.696 --> 00:21:18.266 A:middle
找出我哪里做错了

00:21:31.666 --> 00:21:32.886 A:middle
我们可以移走这个

00:21:32.966 --> 00:21:37.476 A:middle
啊 我想我知道

00:21:37.476 --> 00:21:38.156 A:middle
哪里出问题了

00:21:52.256 --> 00:21:55.436 A:middle
把它拖到这里然后

00:21:55.546 --> 00:21:58.606 A:middle
回到这里我们再试一次

00:21:58.606 --> 00:22:04.156 A:middle
好的 我们已经

00:21:58.606 --> 00:22:04.156 A:middle
好的 我们已经

00:22:04.156 --> 00:22:04.426 A:middle
建好了

00:22:04.896 --> 00:22:06.186 A:middle
现在我们要重启

00:22:06.186 --> 00:22:06.486 A:middle
App

00:22:07.156 --> 00:22:08.446 A:middle
回到我们的并排

00:22:08.446 --> 00:22:09.386 A:middle
视窗

00:22:09.386 --> 00:22:13.006 A:middle
当 App 完成启动后

00:22:13.046 --> 00:22:14.806 A:middle
我就要

00:22:14.806 --> 00:22:16.906 A:middle
重新开始音乐的播放

00:22:18.716 --> 00:22:19.536 A:middle
开始吧

00:22:19.726 --> 00:22:23.916 A:middle
一旦音乐开始播放

00:22:23.916 --> 00:22:25.646 A:middle
现在我们是使用 AirPlay 2

00:22:25.646 --> 00:22:28.156 A:middle
从手机投射到苹果电视上

00:22:28.156 --> 00:22:29.296 A:middle
进行音乐播放

00:22:29.946 --> 00:22:31.266 A:middle
我要再现一遍

00:22:31.266 --> 00:22:33.656 A:middle
刚才的情景

00:22:34.066 --> 00:22:34.956 A:middle
再次用到那个口袋

00:22:35.606 --> 00:22:37.636 A:middle
让我们拿起手机

00:22:39.636 --> 00:22:41.086 A:middle
把它放进口袋里

00:22:41.086 --> 00:22:42.606 A:middle
再一次我拿着手机出去

00:22:42.706 --> 00:22:44.676 A:middle
走出了 Wi-Fi

00:22:44.676 --> 00:22:45.226 A:middle
的覆盖区

00:22:46.426 --> 00:22:47.766 A:middle
我来封严

00:22:47.766 --> 00:22:48.106 A:middle
袋子封口

00:22:49.036 --> 00:22:50.476 A:middle
正如你所看到的

00:22:50.476 --> 00:22:51.976 A:middle
在第一次的演示中

00:22:51.976 --> 00:22:53.846 A:middle
音乐几乎是立刻中断了

00:22:53.846 --> 00:22:55.696 A:middle
但对于这次使用的 AirPlay 2

00:22:55.696 --> 00:22:57.146 A:middle
音乐是一直在播放

00:22:57.146 --> 00:22:58.466 A:middle
尽管遭到了一些

00:22:58.466 --> 00:22:59.036 A:middle
轻微的 Wi-Fi 干扰

00:22:59.546 --> 00:23:00.796 A:middle
这就是 AirPlay 2

00:22:59.546 --> 00:23:00.796 A:middle
这就是 AirPlay 2

00:23:00.796 --> 00:23:02.816 A:middle
组合上 AVSampleBufferAudio

00:23:02.816 --> 00:23:03.146 A:middle
Renderer 产生的魔力

00:23:03.516 --> 00:23:04.956 A:middle
非常感谢

00:23:04.956 --> 00:23:05.256 A:middle
现在把现场交还给 David

00:23:07.071 --> 00:23:09.071 A:middle
鼓掌

00:23:09.126 --> 00:23:09.806 A:middle
&gt;&gt;  感谢 Adam

00:23:10.396 --> 00:23:12.136 A:middle
我们已经带着大家观看了

00:23:12.136 --> 00:23:13.606 A:middle
创建一个简单 App 的步骤

00:23:13.606 --> 00:23:14.576 A:middle
我们用到了 AVSampleBufferAudio

00:23:14.576 --> 00:23:16.216 A:middle
Renderer 以及

00:23:16.216 --> 00:23:17.106 A:middle
AVSampleBufferRender

00:23:17.106 --> 00:23:19.336 A:middle
Synchronizer

00:23:19.336 --> 00:23:20.986 A:middle
下面来看看更多

00:23:20.986 --> 00:23:22.406 A:middle
更复杂的播放场景

00:23:22.406 --> 00:23:24.106 A:middle
你在使用这些 API 时

00:23:24.106 --> 00:23:24.416 A:middle
也许会需要用到

00:23:24.696 --> 00:23:27.366 A:middle
我们在这一段落

00:23:27.366 --> 00:23:29.456 A:middle
要讲到的是

00:23:29.456 --> 00:23:30.446 A:middle
AVSampleBufferAudio Renderer

00:23:30.726 --> 00:23:32.356 A:middle
的音频缓冲级别

00:23:32.356 --> 00:23:34.026 A:middle
我们将谈到如何执行一个 seek

00:23:34.026 --> 00:23:36.146 A:middle
如何执行播放队列

00:23:36.146 --> 00:23:38.106 A:middle
AVSampleBufferAudio Renderer

00:23:38.106 --> 00:23:39.926 A:middle
所支持的

00:23:39.926 --> 00:23:41.476 A:middle
部分音频格式

00:23:41.766 --> 00:23:42.806 A:middle
最后我们要扯远一些

00:23:42.806 --> 00:23:44.446 A:middle
谈一谈视频同步

00:23:44.446 --> 00:23:45.486 A:middle
的问题

00:23:47.736 --> 00:23:49.416 A:middle
那么让我们来进入下一个部分

00:23:49.416 --> 00:23:51.496 A:middle
先来说说

00:23:51.496 --> 00:23:52.276 A:middle
AVSampleBufferAudio Renderer

00:23:52.276 --> 00:23:53.566 A:middle
的音频缓冲级别

00:23:54.546 --> 00:23:55.696 A:middle
我指的是什么呢

00:23:55.696 --> 00:23:57.616 A:middle
我指的是

00:23:57.616 --> 00:23:59.836 A:middle
App 中 AVSampleBufferAudio

00:23:59.836 --> 00:24:01.176 A:middle
Renderer

00:23:59.836 --> 00:24:01.176 A:middle
Renderer

00:24:01.176 --> 00:24:03.496 A:middle
对于音频数据的需求量

00:24:03.706 --> 00:24:05.886 A:middle
会依据现有的路由而变化

00:24:07.156 --> 00:24:08.506 A:middle
让我们通过图表

00:24:08.506 --> 00:24:09.016 A:middle
来了解一下

00:24:09.526 --> 00:24:10.886 A:middle
这里我画出了一条媒体时间线

00:24:10.886 --> 00:24:12.606 A:middle
在这儿放下一个

00:24:12.606 --> 00:24:13.036 A:middle
播放头

00:24:14.456 --> 00:24:15.286 A:middle
当你在本地播放时

00:24:15.286 --> 00:24:17.496 A:middle
AudioRenderer 只要求

00:24:17.496 --> 00:24:18.566 A:middle
播放头

00:24:18.566 --> 00:24:20.076 A:middle
前几秒的内容

00:24:21.186 --> 00:24:23.256 A:middle
那就是你应该

00:24:23.256 --> 00:24:24.866 A:middle
排入队列的部分

00:24:24.866 --> 00:24:25.856 A:middle
按它所要求的

00:24:27.146 --> 00:24:29.066 A:middle
随着你继续播放

00:24:29.066 --> 00:24:30.036 A:middle
把播放头的右边几秒

00:24:30.036 --> 00:24:31.606 A:middle
排入队列即可

00:24:32.996 --> 00:24:34.546 A:middle
但假设用户突然决定

00:24:34.546 --> 00:24:36.926 A:middle
要投射到一个

00:24:36.926 --> 00:24:37.326 A:middle
AirPlay 2 音箱

00:24:38.596 --> 00:24:40.246 A:middle
这种情况发生时

00:24:40.246 --> 00:24:42.146 A:middle
AVSampleBufferAudio Renderer 将

00:24:42.146 --> 00:24:43.766 A:middle
要求播放头右边

00:24:43.766 --> 00:24:45.016 A:middle
几分钟的长度

00:24:46.306 --> 00:24:47.746 A:middle
再次当你按下播放

00:24:47.746 --> 00:24:49.276 A:middle
你需要在播放头右边几分钟

00:24:49.276 --> 00:24:50.286 A:middle
开始工作

00:24:51.376 --> 00:24:53.126 A:middle
这里的关键是

00:24:53.126 --> 00:24:54.866 A:middle
AVSampleBufferAudio Renderer

00:24:54.866 --> 00:24:56.516 A:middle
需要多少数据量

00:24:56.936 --> 00:24:58.586 A:middle
取决于音频当下的传输路径

00:24:58.586 --> 00:24:59.486 A:middle
是在哪里

00:24:59.486 --> 00:25:01.716 A:middle
如果音频是本地传输

00:24:59.486 --> 00:25:01.716 A:middle
如果音频是本地传输

00:25:01.716 --> 00:25:03.126 A:middle
这一过程可能只需要几秒

00:25:03.126 --> 00:25:04.716 A:middle
通过蓝牙 需要几秒钟

00:25:04.716 --> 00:25:06.236 A:middle
通过 AirPlay 1 代的音箱也是几秒钟

00:25:07.236 --> 00:25:08.806 A:middle
但如果用户是将音频内容

00:25:08.806 --> 00:25:10.846 A:middle
传输到支持 AirPlay 2 的音箱上

00:25:10.846 --> 00:25:13.616 A:middle
那么 AudioRenderer 将会

00:25:13.616 --> 00:25:14.556 A:middle
非常“饥饿”

00:25:14.556 --> 00:25:15.686 A:middle
对于音频数据

00:25:15.686 --> 00:25:16.816 A:middle
它可能会需要几分钟的时间

00:25:18.096 --> 00:25:19.326 A:middle
重点是你的 App

00:25:19.326 --> 00:25:20.376 A:middle
必须有所准备

00:25:20.376 --> 00:25:21.016 A:middle
来处理这些变化

00:25:21.516 --> 00:25:25.146 A:middle
好的 接下来让我们谈谈

00:25:25.146 --> 00:25:25.516 A:middle
seek

00:25:26.856 --> 00:25:27.936 A:middle
什么是 seek

00:25:28.136 --> 00:25:29.856 A:middle
Seek 简单来说就是

00:25:29.856 --> 00:25:31.816 A:middle
手动改变

00:25:31.816 --> 00:25:32.796 A:middle
播放头的位置

00:25:33.876 --> 00:25:35.046 A:middle
我们再来画出

00:25:35.046 --> 00:25:36.526 A:middle
刚才看到的

00:25:36.526 --> 00:25:37.366 A:middle
媒体时间线

00:25:38.176 --> 00:25:40.006 A:middle
放入播放头

00:25:40.006 --> 00:25:42.276 A:middle
我们来进行本地播放

00:25:42.876 --> 00:25:44.036 A:middle
或者说是标准的播放场景

00:25:44.716 --> 00:25:46.836 A:middle
用户点击播放

00:25:46.836 --> 00:25:48.286 A:middle
然后当音频开始播放后

00:25:48.286 --> 00:25:49.496 A:middle
用户决定

00:25:49.496 --> 00:25:51.206 A:middle
我想要在这一曲目中

00:25:51.206 --> 00:25:51.576 A:middle
向后去 seek

00:25:51.576 --> 00:25:52.956 A:middle
于是他们抬起播放头

00:25:52.956 --> 00:25:54.206 A:middle
并向右拖动

00:25:55.076 --> 00:25:56.506 A:middle
他们要求 seek

00:25:57.046 --> 00:25:59.496 A:middle
AVSampleBufferAudio Renderer

00:25:59.496 --> 00:26:00.806 A:middle
是如何处理这种情况的

00:25:59.496 --> 00:26:00.806 A:middle
是如何处理这种情况的

00:26:01.366 --> 00:26:02.626 A:middle
其实是非常容易的

00:26:03.696 --> 00:26:04.496 A:middle
你要做的第一件事

00:26:04.496 --> 00:26:05.296 A:middle
就是要

00:26:05.296 --> 00:26:05.716 A:middle
停止

00:26:05.836 --> 00:26:07.606 A:middle
停止 AVSampleBufferRender

00:26:07.606 --> 00:26:08.986 A:middle
Synchronizer 的播放

00:26:08.986 --> 00:26:10.326 A:middle
并停止

00:26:10.326 --> 00:26:12.416 A:middle
往 AVSampleBufferAudioRenderer 里

00:26:12.416 --> 00:26:13.376 A:middle
继续排列

00:26:13.376 --> 00:26:13.666 A:middle
媒体数据

00:26:14.176 --> 00:26:17.226 A:middle
下一步你要在

00:26:17.226 --> 00:26:18.356 A:middle
SampleBufferAudioRenderer

00:26:18.356 --> 00:26:19.956 A:middle
发布一个 flush

00:26:19.956 --> 00:26:21.556 A:middle
它将清除已经排列起来的

00:26:21.556 --> 00:26:22.566 A:middle
所有媒体数据

00:26:23.106 --> 00:26:25.716 A:middle
那时你就可以

00:26:25.716 --> 00:26:27.646 A:middle
在任意媒体时间上

00:26:27.646 --> 00:26:30.456 A:middle
开始重新排列音频数据

00:26:30.456 --> 00:26:32.786 A:middle
也就是在 seek 所在的时间点

00:26:32.786 --> 00:26:33.256 A:middle
开始重新排列

00:26:33.796 --> 00:26:36.216 A:middle
当你在 seek 所在的时间点

00:26:36.216 --> 00:26:38.246 A:middle
排列了媒体数据后

00:26:38.246 --> 00:26:39.846 A:middle
再次开始播放

00:26:39.846 --> 00:26:40.146 A:middle
好了

00:26:40.216 --> 00:26:43.876 A:middle
这就是 seek

00:26:45.096 --> 00:26:46.586 A:middle
现在我已经向你展示了

00:26:46.586 --> 00:26:47.926 A:middle
Seek 是如何工作的

00:26:47.926 --> 00:26:49.046 A:middle
让我们来看看如何在代码中执行它

00:26:49.046 --> 00:26:51.266 A:middle
我们要在 Adam 的 App 中

00:26:51.806 --> 00:26:52.686 A:middle
使用一个叫做 seektoMediaTime

00:26:52.686 --> 00:26:53.516 A:middle
的方法

00:26:54.626 --> 00:26:55.846 A:middle
具体怎么做呢

00:26:56.116 --> 00:26:56.926 A:middle
非常简单

00:26:57.336 --> 00:26:58.536 A:middle
第一件事就是

00:26:58.536 --> 00:26:59.936 A:middle
我们要告诉

00:26:59.936 --> 00:27:01.246 A:middle
RenderSynchronizer 停止播放

00:26:59.936 --> 00:27:01.246 A:middle
RenderSynchronizer 停止播放

00:27:01.246 --> 00:27:02.756 A:middle
做法是

00:27:02.756 --> 00:27:03.156 A:middle
把 rate 设为 0

00:27:03.966 --> 00:27:04.766 A:middle
然后告诉 AudioRenderer

00:27:04.766 --> 00:27:06.286 A:middle
停止索要

00:27:06.286 --> 00:27:07.456 A:middle
媒体数据

00:27:08.406 --> 00:27:10.056 A:middle
然后我们将清理

00:27:10.056 --> 00:27:11.556 A:middle
AudioRenderer

00:27:11.556 --> 00:27:12.666 A:middle
以便清空队列中的

00:27:12.666 --> 00:27:13.106 A:middle
旧的音频数据

00:27:14.436 --> 00:27:15.516 A:middle
然后我们在调用一些 App

00:27:15.516 --> 00:27:17.706 A:middle
特别代码

00:27:17.706 --> 00:27:20.016 A:middle
它将告诉你的样本生成代码

00:27:20.016 --> 00:27:21.346 A:middle
要准备的下一段样本

00:27:21.346 --> 00:27:23.056 A:middle
位置在

00:27:23.056 --> 00:27:23.906 A:middle
seek 处

00:27:24.346 --> 00:27:26.066 A:middle
记住你的 App 有责任

00:27:26.066 --> 00:27:27.556 A:middle
在使用这个 API 时

00:27:28.176 --> 00:27:30.706 A:middle
去提供音频数据

00:27:30.706 --> 00:27:32.226 A:middle
所以你要告诉它

00:27:32.226 --> 00:27:33.596 A:middle
下一段音频样本应该

00:27:33.596 --> 00:27:33.916 A:middle
从哪里生成

00:27:34.446 --> 00:27:37.046 A:middle
之后

00:27:37.046 --> 00:27:38.516 A:middle
你可以重新设置

00:27:38.516 --> 00:27:40.006 A:middle
AudioRenderer 的闭包函数

00:27:40.006 --> 00:27:41.296 A:middle
让它去重新调用要求更多数据

00:27:41.986 --> 00:27:43.426 A:middle
你可以把 RenderSynchronizer

00:27:43.426 --> 00:27:44.246 A:middle
rate 设为 1

00:27:45.556 --> 00:27:46.216 A:middle
比较简单

00:27:46.526 --> 00:27:47.136 A:middle
那就是 seek

00:27:47.586 --> 00:27:49.976 A:middle
让我们来看看

00:27:49.976 --> 00:27:50.946 A:middle
更有趣的内容吧

00:27:50.946 --> 00:27:51.406 A:middle
播放队列

00:27:51.406 --> 00:27:53.576 A:middle
什么是播放队列

00:27:53.576 --> 00:27:54.716 A:middle
我们这里有一张

00:27:54.716 --> 00:27:55.286 A:middle
Adam 的 App 截图

00:27:55.856 --> 00:27:57.516 A:middle
播放队列很简单

00:27:57.516 --> 00:27:59.686 A:middle
就是你将一系列的条目

00:27:59.686 --> 00:28:00.086 A:middle
进行排序

00:27:59.686 --> 00:28:00.086 A:middle
进行排序

00:28:00.086 --> 00:28:01.396 A:middle
我点击播放后

00:28:01.396 --> 00:28:02.176 A:middle
它们就会按顺序逐一播放

00:28:02.616 --> 00:28:05.756 A:middle
我们来看看这个播放队列

00:28:05.756 --> 00:28:06.976 A:middle
把它在媒体时间线上

00:28:07.046 --> 00:28:08.616 A:middle
列出来

00:28:08.616 --> 00:28:09.896 A:middle
能看到条目 1 的后面是条目 2

00:28:09.896 --> 00:28:11.876 A:middle
然后是条目 3

00:28:13.156 --> 00:28:14.956 A:middle
这就是一个非常常见的样子

00:28:14.956 --> 00:28:16.896 A:middle
这些条目平铺

00:28:16.896 --> 00:28:17.826 A:middle
在时间线上

00:28:18.606 --> 00:28:19.886 A:middle
但如果我们仔细研究

00:28:19.886 --> 00:28:22.026 A:middle
尤其是对每一个条目的

00:28:22.026 --> 00:28:23.196 A:middle
时间线进行仔细观察

00:28:23.196 --> 00:28:24.076 A:middle
我们就会发现有些地方

00:28:24.076 --> 00:28:24.806 A:middle
是存在细小差别的

00:28:25.116 --> 00:28:26.416 A:middle
让我们假设

00:28:26.416 --> 00:28:27.996 A:middle
每个条目的长度

00:28:27.996 --> 00:28:28.346 A:middle
是 100 秒

00:28:29.426 --> 00:28:30.886 A:middle
这就意味着每个条目

00:28:30.886 --> 00:28:33.936 A:middle
都是从

00:28:33.936 --> 00:28:34.336 A:middle
0 到 100

00:28:34.896 --> 00:28:38.636 A:middle
当然 AudioRenderer

00:28:38.636 --> 00:28:39.986 A:middle
是不知道这些

00:28:39.986 --> 00:28:40.996 A:middle
条目的信息的

00:28:41.266 --> 00:28:42.536 A:middle
AudioRenderer 所知道的

00:28:42.536 --> 00:28:43.816 A:middle
只是一条连续的媒体时间线

00:28:45.146 --> 00:28:46.606 A:middle
所以当你让音频数据排队

00:28:46.836 --> 00:28:48.596 A:middle
进入 AVSampleBufferAudio

00:28:48.596 --> 00:28:51.096 A:middle
Renderer

00:28:51.736 --> 00:28:53.946 A:middle
你就需要将条目的自然时间线

00:28:54.056 --> 00:28:55.816 A:middle
变成一条 AVSampleBufferAudio

00:28:55.816 --> 00:28:57.086 A:middle
Renderer

00:28:57.086 --> 00:28:57.336 A:middle
连续的时间线

00:28:57.896 --> 00:29:00.396 A:middle
让我们再看看

00:28:57.896 --> 00:29:00.396 A:middle
让我们再看看

00:29:00.396 --> 00:29:01.976 A:middle
刚才看过的

00:29:01.976 --> 00:29:02.746 A:middle
这个排队列的动画

00:29:03.356 --> 00:29:05.076 A:middle
这里我正在播放本地音频

00:29:05.076 --> 00:29:06.226 A:middle
我刚刚把

00:29:06.226 --> 00:29:07.266 A:middle
播放头右边的几秒

00:29:07.496 --> 00:29:09.406 A:middle
排入队列

00:29:09.406 --> 00:29:10.966 A:middle
正如你所看到的 我会把这些条目

00:29:10.966 --> 00:29:11.486 A:middle
按顺序排列进来

00:29:12.346 --> 00:29:13.606 A:middle
如果用户是要投射到

00:29:13.606 --> 00:29:14.806 A:middle
AirPlay 2 音箱 那我们就要

00:29:14.806 --> 00:29:15.676 A:middle
在播放头右边较远的地方开始工作

00:29:15.676 --> 00:29:16.846 A:middle
但还是一个道理

00:29:16.846 --> 00:29:18.156 A:middle
你只要把播放头右边的部分

00:29:18.156 --> 00:29:20.176 A:middle
多放一些到

00:29:21.136 --> 00:29:21.336 A:middle
队列里就行

00:29:21.366 --> 00:29:21.836 A:middle
好了

00:29:22.646 --> 00:29:24.426 A:middle
这就是播放队列的

00:29:24.426 --> 00:29:24.896 A:middle
基本概念

00:29:24.896 --> 00:29:25.566 A:middle
接下来就

00:29:25.566 --> 00:29:26.536 A:middle
更有趣了

00:29:26.776 --> 00:29:27.316 A:middle
编辑队列

00:29:28.566 --> 00:29:29.566 A:middle
在这个假设的情景中

00:29:29.566 --> 00:29:32.266 A:middle
让我们假设用户决定

00:29:32.266 --> 00:29:33.206 A:middle
他们不想听

00:29:33.206 --> 00:29:34.226 A:middle
条目 2 了

00:29:34.466 --> 00:29:35.746 A:middle
他们就把它移出队列

00:29:35.746 --> 00:29:37.916 A:middle
于是条目 3 和条目 4

00:29:37.916 --> 00:29:41.486 A:middle
往前移替代了它的位置

00:29:41.606 --> 00:29:43.836 A:middle
这种情况

00:29:43.836 --> 00:29:44.326 A:middle
没什么复杂的

00:29:44.536 --> 00:29:46.806 A:middle
用户会预期条目 1 播放完

00:29:46.806 --> 00:29:48.516 A:middle
然后是条目 3

00:29:48.516 --> 00:29:49.296 A:middle
再是条目 4

00:29:49.826 --> 00:29:52.166 A:middle
不过这是一个相当简单的

00:29:52.166 --> 00:29:53.186 A:middle
编辑播放队列的例子

00:29:53.186 --> 00:29:56.416 A:middle
在播放前

00:29:56.756 --> 00:29:58.106 A:middle
我就对队列进行了编辑

00:30:00.086 --> 00:30:01.516 A:middle
但我们在使用

00:30:01.516 --> 00:30:03.776 A:middle
AVSampleBufferAudio Renderer 时

00:30:03.776 --> 00:30:04.206 A:middle
经常要提前载入

00:30:04.206 --> 00:30:05.586 A:middle
播放头右边很长一段的内容

00:30:06.176 --> 00:30:07.376 A:middle
你很可能遇到这样的情况

00:30:07.376 --> 00:30:10.146 A:middle
当用户

00:30:10.146 --> 00:30:11.456 A:middle
开始

00:30:11.456 --> 00:30:12.346 A:middle
播放

00:30:12.946 --> 00:30:15.436 A:middle
你此刻还在播放条目 1

00:30:15.436 --> 00:30:17.646 A:middle
但条目 2 的媒体数据

00:30:17.646 --> 00:30:18.886 A:middle
已经进入队列载入

00:30:19.426 --> 00:30:22.136 A:middle
这时用户决定

00:30:22.136 --> 00:30:22.996 A:middle
不想听

00:30:22.996 --> 00:30:23.276 A:middle
条目 2 了

00:30:23.276 --> 00:30:25.966 A:middle
于是用户期待着

00:30:25.966 --> 00:30:28.496 A:middle
条目 2 消失

00:30:28.496 --> 00:30:29.046 A:middle
条目 3 和 4 替换上来

00:30:29.616 --> 00:30:33.266 A:middle
再一次

00:30:33.266 --> 00:30:35.356 A:middle
用户期待着

00:30:35.356 --> 00:30:36.226 A:middle
在条目 1 之后

00:30:36.226 --> 00:30:37.886 A:middle
条目 3  会开始

00:30:37.886 --> 00:30:38.166 A:middle
播放

00:30:39.576 --> 00:30:40.576 A:middle
如果我们此时什么都不做

00:30:40.576 --> 00:30:41.646 A:middle
此时条目 2 的音频数据

00:30:41.646 --> 00:30:43.586 A:middle
已经排列在

00:30:43.586 --> 00:30:45.146 A:middle
AudioRenderer 中

00:30:45.146 --> 00:30:46.196 A:middle
接下来我们就会听到条目 2 播放

00:30:46.286 --> 00:30:48.916 A:middle
然后声音突然中断

00:30:48.916 --> 00:30:50.356 A:middle
因为我们在

00:30:50.356 --> 00:30:50.906 A:middle
AudioRenderer 中存入了错误的数据

00:30:51.506 --> 00:30:54.046 A:middle
那我们该怎么做呢

00:30:54.636 --> 00:30:55.706 A:middle
其实也容易处理

00:30:55.706 --> 00:30:57.336 A:middle
因为在 Source Time 里

00:30:57.336 --> 00:30:58.666 A:middle
有一个指令

00:30:58.666 --> 00:30:59.506 A:middle
叫做 Flush

00:31:00.746 --> 00:31:01.866 A:middle
这个指令的功能

00:31:01.866 --> 00:31:03.686 A:middle
它的意思

00:31:03.686 --> 00:31:05.436 A:middle
就是在我指定的时间点

00:31:05.436 --> 00:31:07.046 A:middle
我希望你

00:31:07.046 --> 00:31:08.776 A:middle
清除时间线上这个时间点以后的

00:31:08.776 --> 00:31:11.056 A:middle
所有媒体数据

00:31:11.256 --> 00:31:12.596 A:middle
我在这里调用

00:31:12.596 --> 00:31:15.226 A:middle
Flush from Source Time

00:31:15.226 --> 00:31:18.146 A:middle
指定连续时间线上的

00:31:18.176 --> 00:31:20.016 A:middle
这个时间点

00:31:20.016 --> 00:31:22.176 A:middle
连续的时间线为

00:31:22.176 --> 00:31:22.756 A:middle
条目1和下一个条目提供完美过渡

00:31:23.326 --> 00:31:24.296 A:middle
于是我就调用这个指令

00:31:24.296 --> 00:31:25.056 A:middle
它就清空了所有的媒体数据

00:31:25.056 --> 00:31:27.876 A:middle
它要做的下一件事

00:31:27.876 --> 00:31:29.286 A:middle
就是把指针重新放到

00:31:29.286 --> 00:31:31.206 A:middle
指定时间点后正在队列中的样本缓冲

00:31:31.356 --> 00:31:33.226 A:middle
之后我就可以

00:31:33.226 --> 00:31:35.186 A:middle
把条目 3 的 媒体数据排入队列了

00:31:36.416 --> 00:31:37.436 A:middle
当然

00:31:37.436 --> 00:31:39.166 A:middle
随着音频播放 问题迎刃而解

00:31:40.116 --> 00:31:42.076 A:middle
值得注意的一点是

00:31:42.076 --> 00:31:44.006 A:middle
在刚才的动画演示中

00:31:44.006 --> 00:31:46.796 A:middle
看起来好像播放被暂停了

00:31:46.796 --> 00:31:48.486 A:middle
但实际上

00:31:48.486 --> 00:31:49.856 A:middle
你可以在音频播放的过程中

00:31:50.026 --> 00:31:51.716 A:middle
执行这个指令

00:31:51.716 --> 00:31:53.166 A:middle
这个操作完全可以

00:31:53.166 --> 00:31:53.736 A:middle
对你的用户

00:31:55.936 --> 00:31:56.826 A:middle
公开

00:31:57.396 --> 00:31:58.876 A:middle
接下来我们说说执行

00:31:58.876 --> 00:32:00.336 A:middle
这个 flush from source time 指令

00:31:58.876 --> 00:32:00.336 A:middle
这个 flush from source time 指令

00:32:00.336 --> 00:32:01.036 A:middle
所需要的步骤

00:32:01.036 --> 00:32:02.356 A:middle
大致来说有三步

00:32:02.356 --> 00:32:04.026 A:middle
第一步 停止在渲染器中

00:32:04.026 --> 00:32:04.846 A:middle
列入音频数据

00:32:05.166 --> 00:32:06.566 A:middle
注意 我说的不是停止播放

00:32:06.706 --> 00:32:07.726 A:middle
因为你不需要

00:32:07.726 --> 00:32:08.386 A:middle
这么做

00:32:09.226 --> 00:32:09.876 A:middle
然后你就发布

00:32:09.876 --> 00:32:12.196 A:middle
Flush from SourceTime 的指令

00:32:12.196 --> 00:32:12.766 A:middle
在你发布

00:32:12.766 --> 00:32:14.856 A:middle
Flush from SourceTime 之后

00:32:14.856 --> 00:32:15.896 A:middle
flush from sourcetime 是一个

00:32:15.896 --> 00:32:17.886 A:middle
非同步的操作

00:32:18.066 --> 00:32:19.396 A:middle
在这里你可以传递一个闭包函数

00:32:19.986 --> 00:32:20.756 A:middle
你需要等待回调函数

00:32:20.756 --> 00:32:21.586 A:middle
的发出

00:32:22.126 --> 00:32:25.946 A:middle
这里还有几个小的技巧

00:32:25.946 --> 00:32:26.716 A:middle
虽说它是一个

00:32:26.716 --> 00:32:28.046 A:middle
相对简单的操作

00:32:28.046 --> 00:32:29.526 A:middle
第一点就是  flush 有可能会

00:32:29.526 --> 00:32:29.866 A:middle
失败

00:32:30.746 --> 00:32:31.736 A:middle
为什么会失败

00:32:32.236 --> 00:32:34.096 A:middle
假如你指定的时间点

00:32:34.096 --> 00:32:35.536 A:middle
距离播放头太接近

00:32:35.536 --> 00:32:36.896 A:middle
或者是放在了播放头的左边

00:32:37.706 --> 00:32:39.426 A:middle
在这些情况下

00:32:39.426 --> 00:32:40.486 A:middle
我们可能无法从

00:32:40.486 --> 00:32:41.686 A:middle
音频硬件中获得

00:32:41.686 --> 00:32:42.076 A:middle
音频的数据了

00:32:43.336 --> 00:32:46.066 A:middle
在这样的情况下

00:32:46.066 --> 00:32:47.866 A:middle
与其让你陷入未知的状态

00:32:47.866 --> 00:32:49.806 A:middle
可能会播放过期数据

00:32:49.806 --> 00:32:51.366 A:middle
我们宁愿选择让这个

00:32:51.366 --> 00:32:52.986 A:middle
操作失败

00:32:52.986 --> 00:32:54.946 A:middle
看起来像是这个指令

00:32:54.946 --> 00:32:57.536 A:middle
从没被发布过一样

00:32:57.716 --> 00:32:59.326 A:middle
第二点小技巧是

00:32:59.326 --> 00:33:00.536 A:middle
正如凡事都有利有弊

00:32:59.326 --> 00:33:00.536 A:middle
正如凡事都有利有弊

00:33:00.536 --> 00:33:01.886 A:middle
你需要等待

00:33:01.886 --> 00:33:02.826 A:middle
回调函数

00:33:03.296 --> 00:33:05.146 A:middle
这个回调函数

00:33:05.146 --> 00:33:06.346 A:middle
将告诉你

00:33:06.346 --> 00:33:07.246 A:middle
Flush 是否失败了

00:33:07.246 --> 00:33:10.326 A:middle
如果它失败了

00:33:10.326 --> 00:33:11.346 A:middle
你需要采取相应的措施

00:33:12.056 --> 00:33:12.986 A:middle
让我们来看看相应的代码

00:33:12.986 --> 00:33:14.566 A:middle
还是刚才的样本 App

00:33:14.566 --> 00:33:17.036 A:middle
通过引用一个方法

00:33:17.036 --> 00:33:18.246 A:middle
通过执行一个方法

00:33:18.246 --> 00:33:18.906 A:middle
叫做

00:33:19.396 --> 00:33:21.726 A:middle
FlushfromSourceTime

00:33:21.726 --> 00:33:22.506 A:middle
来执行 FlushfromSourceTime

00:33:23.656 --> 00:33:26.836 A:middle
再一次 在这个方法中

00:33:26.966 --> 00:33:28.156 A:middle
你需要做的头件事

00:33:28.156 --> 00:33:28.906 A:middle
就是通知

00:33:28.906 --> 00:33:30.366 A:middle
AudioRenderer 停止

00:33:30.366 --> 00:33:30.866 A:middle
索要媒体数据

00:33:31.746 --> 00:33:33.046 A:middle
之后你可能想去调用

00:33:33.046 --> 00:33:34.886 A:middle
一些 App 特定的逻辑

00:33:34.886 --> 00:33:36.296 A:middle
以确保没有

00:33:36.296 --> 00:33:37.956 A:middle
更多的媒体数据

00:33:37.956 --> 00:33:38.776 A:middle
被排入队列

00:33:38.776 --> 00:33:40.646 A:middle
这点至关重要

00:33:40.886 --> 00:33:42.056 A:middle
因为这是一个非同步的操作

00:33:42.056 --> 00:33:43.316 A:middle
所以它本身就

00:33:43.316 --> 00:33:43.736 A:middle
有一定风险

00:33:44.166 --> 00:33:44.986 A:middle
所以我们希望能确保

00:33:44.986 --> 00:33:46.136 A:middle
在 FlushfromSourceTime 的运行过程中

00:33:46.136 --> 00:33:47.646 A:middle
你没有将更多的音频数据

00:33:47.646 --> 00:33:49.276 A:middle
排入队列中

00:33:49.766 --> 00:33:52.466 A:middle
当你确信

00:33:52.466 --> 00:33:53.586 A:middle
你没有将

00:33:53.586 --> 00:33:54.826 A:middle
更多的音频数据排入 AudioRenderer

00:33:55.196 --> 00:33:56.426 A:middle
这时就可以执行

00:33:56.426 --> 00:33:57.416 A:middle
FlushfromSourceTime 了

00:33:57.876 --> 00:33:59.296 A:middle
再次 你可以传递一个闭包函数

00:33:59.296 --> 00:34:00.506 A:middle
因为这是一个非同步的

00:33:59.296 --> 00:34:00.506 A:middle
因为这是一个非同步的

00:34:00.666 --> 00:34:01.306 A:middle
操作

00:34:01.416 --> 00:34:02.846 A:middle
这个闭包函数会告诉你

00:34:02.846 --> 00:34:04.846 A:middle
对于闭包函数的调用

00:34:04.846 --> 00:34:05.616 A:middle
是否

00:34:05.616 --> 00:34:06.296 A:middle
Flush 是否

00:34:06.296 --> 00:34:06.886 A:middle
成功

00:34:07.606 --> 00:34:09.196 A:middle
如果像我这里演示的这样 成功了

00:34:09.196 --> 00:34:11.485 A:middle
你之后要做的第一件事就是

00:34:11.485 --> 00:34:12.545 A:middle
再一次

00:34:12.545 --> 00:34:13.505 A:middle
告诉你的负责样本生成的 App

00:34:13.505 --> 00:34:15.266 A:middle
然后 App 的样本生成代码

00:34:15.545 --> 00:34:17.856 A:middle
就开始

00:34:17.985 --> 00:34:19.815 A:middle
从指定的时间点处

00:34:19.815 --> 00:34:20.036 A:middle
准备样本

00:34:20.735 --> 00:34:22.036 A:middle
然后你可以重新调用你的

00:34:22.036 --> 00:34:23.545 A:middle
回调函数

00:34:23.545 --> 00:34:24.755 A:middle
并再次开始排入队列

00:34:25.696 --> 00:34:27.585 A:middle
当然 这里的 flush 有可能会失败

00:34:27.996 --> 00:34:29.456 A:middle
这时你想如何处理

00:34:29.456 --> 00:34:30.886 A:middle
就真的全靠 App

00:34:30.886 --> 00:34:32.056 A:middle
明确的逻辑来决定了

00:34:32.786 --> 00:34:33.926 A:middle
或许你想要进入

00:34:33.926 --> 00:34:34.735 A:middle
下一个播放曲目

00:34:34.735 --> 00:34:35.946 A:middle
或许你想要执行一个彻底的 flush

00:34:35.946 --> 00:34:37.656 A:middle
清除播放的小差错

00:34:37.656 --> 00:34:38.216 A:middle
怎么做全凭你决定

00:34:38.786 --> 00:34:43.286 A:middle
以上就是播放队列和

00:34:43.286 --> 00:34:44.085 A:middle
Flush from Source Time

00:34:44.856 --> 00:34:47.676 A:middle
下面我们来聊聊

00:34:47.676 --> 00:34:48.646 A:middle
AVSampleBufferAudio Renderer

00:34:48.646 --> 00:34:49.746 A:middle
支持的音频格式

00:34:51.656 --> 00:34:53.156 A:middle
那么  AVSampleBufferAudio Renderer

00:34:53.156 --> 00:34:55.085 A:middle
都支持哪些

00:34:55.085 --> 00:34:55.516 A:middle
音频格式呢

00:34:55.516 --> 00:34:57.886 A:middle
好消息是 基本上所有

00:34:57.886 --> 00:34:59.376 A:middle
平台支持的音频格式

00:34:59.376 --> 00:35:00.596 A:middle
AVSampleBufferAudio Renderer 也都

00:34:59.376 --> 00:35:00.596 A:middle
AVSampleBufferAudio Renderer 也都

00:35:00.596 --> 00:35:01.816 A:middle
支持

00:35:01.906 --> 00:35:04.526 A:middle
这就包括了 LPCM AAC

00:35:04.556 --> 00:35:07.376 A:middle
mp3 Apple Lossless

00:35:07.376 --> 00:35:09.506 A:middle
包括各种采样率

00:35:10.556 --> 00:35:10.756 A:middle
各种位深

00:35:10.866 --> 00:35:13.126 A:middle
而且 不同格式的音频

00:35:13.126 --> 00:35:13.886 A:middle
有时也可以排入同一队列

00:35:14.466 --> 00:35:17.346 A:middle
如果条目 1 是一个采样率为 44.1 的 AAC 音频

00:35:17.346 --> 00:35:19.556 A:middle
你也可以在它后面排入 48 k 的 MP 3 音频

00:35:19.556 --> 00:35:23.376 A:middle
以及 16 位 48 khz 的

00:35:23.786 --> 00:35:24.976 A:middle
Apple Lossless 音频

00:35:25.156 --> 00:35:26.836 A:middle
你可以让这几种音频的数据

00:35:26.836 --> 00:35:28.036 A:middle
一个接一个地入列

00:35:28.036 --> 00:35:29.196 A:middle
我们会替你解决

00:35:29.196 --> 00:35:30.406 A:middle
格式转换的问题

00:35:31.466 --> 00:35:33.236 A:middle
这就介绍完了

00:35:33.236 --> 00:35:33.616 A:middle
支持的格式

00:35:33.826 --> 00:35:34.866 A:middle
下面来说说

00:35:34.866 --> 00:35:35.386 A:middle
最佳格式

00:35:35.926 --> 00:35:38.706 A:middle
既然我们能播放任何格式

00:35:38.706 --> 00:35:39.716 A:middle
你有什么都可以给我们

00:35:39.766 --> 00:35:41.176 A:middle
你有 LPCM 丢给我们

00:35:41.176 --> 00:35:42.166 A:middle
经过编码的 丢给我们

00:35:42.656 --> 00:35:44.276 A:middle
预先提醒一下

00:35:44.276 --> 00:35:46.186 A:middle
在其他条件都一样的前提下

00:35:46.186 --> 00:35:48.846 A:middle
如果你需要在经过编码的音频

00:35:48.846 --> 00:35:50.126 A:middle
和 PCM 中间做出选择

00:35:50.126 --> 00:35:51.576 A:middle
我们会偏向经过编码的音频

00:35:51.576 --> 00:35:53.196 A:middle
但不要添加特别的逻辑进去

00:35:53.286 --> 00:35:54.126 A:middle
有什么直接丢给我们就好

00:35:55.416 --> 00:35:56.476 A:middle
此外 我们还更喜欢

00:35:56.476 --> 00:35:58.336 A:middle
交叉容错通道格式以及

00:35:58.336 --> 00:35:59.536 A:middle
包含 1 到 2 秒的音频缓冲的

00:35:59.536 --> 00:36:00.366 A:middle
CMSampleBuffer 格式

00:35:59.536 --> 00:36:00.366 A:middle
CMSampleBuffer 格式

00:36:00.366 --> 00:36:03.946 A:middle
好的 现在我想把话题稍微扯远一点

00:36:03.946 --> 00:36:05.326 A:middle
来谈谈

00:36:05.326 --> 00:36:06.356 A:middle
视频同步的问题

00:36:07.656 --> 00:36:08.606 A:middle
你可能会奇怪

00:36:08.606 --> 00:36:09.996 A:middle
为什么我们要在一个主讲

00:36:09.996 --> 00:36:11.776 A:middle
AirPlay 音频的演讲中

00:36:11.776 --> 00:36:12.226 A:middle
谈到视频

00:36:13.196 --> 00:36:15.196 A:middle
原因就是

00:36:15.196 --> 00:36:16.466 A:middle
今天我们介绍的类别

00:36:16.466 --> 00:36:18.706 A:middle
它们不仅适用于 AirPlay  2

00:36:18.886 --> 00:36:19.796 A:middle
它们也是

00:36:19.796 --> 00:36:21.346 A:middle
非常好的播放 API

00:36:21.346 --> 00:36:22.056 A:middle
即使对于一般的使用来说

00:36:22.666 --> 00:36:24.036 A:middle
你也许想用它们来

00:36:24.036 --> 00:36:24.656 A:middle
播放视频

00:36:25.226 --> 00:36:26.836 A:middle
再说一遍 如果你能使用

00:36:26.836 --> 00:36:28.186 A:middle
AVPlayer  请选择它

00:36:28.186 --> 00:36:29.946 A:middle
但如果你无法使用 AVPlayer

00:36:29.946 --> 00:36:31.636 A:middle
你又想播放视频

00:36:32.236 --> 00:36:33.066 A:middle
那么看好了

00:36:33.416 --> 00:36:36.496 A:middle
让我们回到

00:36:36.496 --> 00:36:37.686 A:middle
刚才在演讲中展示过的

00:36:37.686 --> 00:36:38.786 A:middle
框架图中

00:36:38.936 --> 00:36:40.506 A:middle
这里有客户端 App

00:36:40.506 --> 00:36:41.206 A:middle
AudioRenderer 以及

00:36:41.206 --> 00:36:41.766 A:middle
Synchronizer

00:36:42.586 --> 00:36:43.826 A:middle
如果我把它们移出去

00:36:43.826 --> 00:36:45.206 A:middle
就有空间放入

00:36:45.206 --> 00:36:47.426 A:middle
一个新的渲染器类别

00:36:47.426 --> 00:36:48.396 A:middle
我打算加入一个

00:36:48.396 --> 00:36:49.626 A:middle
AVSampleBufferDisplayLayer

00:36:50.556 --> 00:36:51.766 A:middle
如果你们对

00:36:51.766 --> 00:36:52.366 A:middle
AVSampleBufferDisplayLayer

00:36:52.366 --> 00:36:54.596 A:middle
不熟悉的话

00:36:54.596 --> 00:36:56.176 A:middle
它是一个类似于新的

00:36:56.176 --> 00:36:57.546 A:middle
AVSampleBufferAudio Renderer 的类别

00:36:57.756 --> 00:36:58.956 A:middle
唯一差别是它

00:36:58.956 --> 00:36:59.716 A:middle
更面向视频内容

00:37:00.136 --> 00:37:01.026 A:middle
它已经推出了一段时间

00:37:01.026 --> 00:37:01.546 A:middle
你能在开发者网站上

00:37:01.546 --> 00:37:04.256 A:middle
找到相关的文件和

00:37:04.256 --> 00:37:05.196 A:middle
样本代码

00:37:06.166 --> 00:37:09.136 A:middle
但这次发布中的新鲜内容是

00:37:09.136 --> 00:37:10.266 A:middle
你可以用 RenderSynchronizer

00:37:10.266 --> 00:37:12.576 A:middle
去控制它的

00:37:12.576 --> 00:37:13.446 A:middle
时间线

00:37:13.726 --> 00:37:14.636 A:middle
你可以把它加到

00:37:14.636 --> 00:37:15.886 A:middle
RenderSynchronizer 里

00:37:15.886 --> 00:37:16.896 A:middle
就像你把 AudioRenderer 加入到

00:37:16.896 --> 00:37:17.626 A:middle
RenderSynchronizer 里

00:37:18.046 --> 00:37:19.906 A:middle
这真的很酷

00:37:19.956 --> 00:37:21.636 A:middle
因为这样一来你就能

00:37:21.636 --> 00:37:23.736 A:middle
把音频数据加到 AudioRenderer 里

00:37:24.166 --> 00:37:27.366 A:middle
把视频数据加到视频渲染器中

00:37:27.366 --> 00:37:30.326 A:middle
设同步器的 rate 为 1

00:37:30.326 --> 00:37:32.726 A:middle
因为

00:37:32.726 --> 00:37:33.466 A:middle
它们使用的是同一个时间线

00:37:33.466 --> 00:37:34.916 A:middle
出来后是同步的

00:37:34.916 --> 00:37:35.126 A:middle
结果

00:37:35.676 --> 00:37:37.086 A:middle
有几句提醒

00:37:37.306 --> 00:37:39.026 A:middle
视频不会被 AirPlay 投射

00:37:39.466 --> 00:37:40.476 A:middle
而且当你在使用长形时

00:37:40.476 --> 00:37:42.036 A:middle
你只能把一个

00:37:42.036 --> 00:37:43.286 A:middle
AudioRenderer 加进

00:37:43.286 --> 00:37:44.126 A:middle
RenderSynchronizer

00:37:44.716 --> 00:37:46.386 A:middle
不过我觉得你已经能够

00:37:46.386 --> 00:37:48.556 A:middle
感受到这个架构中的

00:37:48.556 --> 00:37:49.946 A:middle
力量以及灵活性

00:37:50.176 --> 00:37:51.246 A:middle
我相信你们一定会

00:37:51.246 --> 00:37:52.676 A:middle
摸索出一些非常酷的使用实例

00:37:52.676 --> 00:37:54.336 A:middle
和应用

00:37:54.336 --> 00:37:56.546 A:middle
我们很期待你们的探索结果

00:37:57.676 --> 00:37:58.106 A:middle
好的

00:37:58.106 --> 00:37:59.336 A:middle
最后我们来谈谈

00:37:59.336 --> 00:38:00.716 A:middle
AirPlay 2 的可用性

00:37:59.336 --> 00:38:00.716 A:middle
AirPlay 2 的可用性

00:38:02.086 --> 00:38:04.406 A:middle
我很高兴地说

00:38:04.406 --> 00:38:06.706 A:middle
我今天和大家讨论的这些 API

00:38:06.706 --> 00:38:08.456 A:middle
以及改进后的缓冲系统

00:38:08.456 --> 00:38:10.976 A:middle
都在你们今天能够进入的

00:38:10.976 --> 00:38:12.206 A:middle
测试版中可以使用

00:38:13.486 --> 00:38:16.566 A:middle
如果你把开发人员面板上的

00:38:16.566 --> 00:38:18.286 A:middle
AirPlay 2 切换键

00:38:18.476 --> 00:38:19.276 A:middle
点开

00:38:19.716 --> 00:38:21.166 A:middle
之后就能使用一个升级后的苹果电视

00:38:21.166 --> 00:38:22.766 A:middle
它可以作为 AirPlay 2 的接收端

00:38:22.766 --> 00:38:24.686 A:middle
发送给它

00:38:26.016 --> 00:38:27.376 A:middle
在即将发布的测试版中

00:38:27.376 --> 00:38:28.766 A:middle
我们将实现多房间音频控制功能

00:38:29.586 --> 00:38:30.606 A:middle
最后一点 这些将在

00:38:30.606 --> 00:38:31.896 A:middle
即将发布的版本中

00:38:31.896 --> 00:38:32.726 A:middle
供用户使用

00:38:33.616 --> 00:38:34.476 A:middle
我们来总结一下

00:38:34.476 --> 00:38:36.006 A:middle
今天讲了很多内容

00:38:36.396 --> 00:38:38.456 A:middle
AirPlay 2 在音频方面

00:38:38.456 --> 00:38:39.456 A:middle
有很多新的功能

00:38:41.056 --> 00:38:42.566 A:middle
使用长形音频的应用

00:38:42.566 --> 00:38:44.566 A:middle
按照我今天概括的步骤去做

00:38:44.566 --> 00:38:45.366 A:middle
就可以实现这些功能

00:38:46.336 --> 00:38:48.206 A:middle
嵌入 AirPlay 2

00:38:48.206 --> 00:38:49.356 A:middle
可以从你们手中的测试版

00:38:49.356 --> 00:38:51.286 A:middle
开始尝试

00:38:51.536 --> 00:38:54.096 A:middle
还有一些信息

00:38:54.096 --> 00:38:55.556 A:middle
这个网站将提供

00:38:55.556 --> 00:38:56.496 A:middle
我们今天的演讲内容

00:38:56.496 --> 00:38:57.516 A:middle
样本代码也即将

00:38:57.516 --> 00:38:58.756 A:middle
提供给大家

00:38:59.346 --> 00:39:02.016 A:middle
还有我们刚才提到的

00:38:59.346 --> 00:39:02.016 A:middle
还有我们刚才提到的

00:39:02.016 --> 00:39:02.806 A:middle
几个介绍会

00:39:02.806 --> 00:39:03.926 A:middle
包括 What's New in Audio 介绍会

00:39:03.926 --> 00:39:04.996 A:middle
它更加深入地

00:39:04.996 --> 00:39:06.356 A:middle
讨论了长形音频

00:39:06.356 --> 00:39:07.676 A:middle
同时介绍了

00:39:07.676 --> 00:39:08.176 A:middle
MusicKit

00:39:08.616 --> 00:39:09.516 A:middle
推荐大家去

00:39:09.516 --> 00:39:09.726 A:middle
看看

00:39:10.026 --> 00:39:11.086 A:middle
非常感谢

00:39:11.086 --> 00:39:11.856 A:middle
希望大家这星期余下的时间

00:39:11.856 --> 00:39:12.116 A:middle
也过得愉快
