WEBVTT

00:00:06.516 --> 00:00:15.500 A:middle
[欢呼]

00:00:19.516 --> 00:00:21.816 A:middle
[掌声]

00:00:22.316 --> 00:00:22.726 A:middle
&gt;&gt; 好的

00:00:22.726 --> 00:00:23.636 A:middle
欢迎大家

00:00:25.986 --> 00:00:27.026 A:middle
欢迎来参加我们的主题会议

00:00:27.026 --> 00:00:28.696 A:middle
“将 CareKit 连接到 Cloud”

00:00:29.176 --> 00:00:30.086 A:middle
我是 Kelsey Dedoshka

00:00:30.086 --> 00:00:31.246 A:middle
是 CareKit 团队的

00:00:31.246 --> 00:00:32.966 A:middle
软件工程师

00:00:35.206 --> 00:00:36.546 A:middle
那么 今天的会议将从

00:00:36.546 --> 00:00:38.326 A:middle
CareKit 的简要介绍

00:00:38.326 --> 00:00:38.856 A:middle
开始

00:00:39.396 --> 00:00:40.426 A:middle
随后我会介绍我们

00:00:40.426 --> 00:00:42.956 A:middle
全新的 Bridge API

00:00:42.956 --> 00:00:44.176 A:middle
并就如何将这个 API 整合到

00:00:44.176 --> 00:00:45.766 A:middle
云后端

00:00:45.766 --> 00:00:46.306 A:middle
展开深入讨论

00:00:46.796 --> 00:00:48.406 A:middle
在整个过程中

00:00:48.406 --> 00:00:49.926 A:middle
我们还会继续更深入地

00:00:49.926 --> 00:00:51.256 A:middle
探讨对某些代码的

00:00:51.256 --> 00:00:51.676 A:middle
理解

00:00:52.806 --> 00:00:54.266 A:middle
然后我会请 Akshay

00:00:54.266 --> 00:00:55.396 A:middle
上台来给大家做个

00:00:55.396 --> 00:00:56.086 A:middle
快速演示

00:00:56.086 --> 00:00:58.266 A:middle
最后我们会看看

00:00:58.266 --> 00:00:59.526 A:middle
大家能用这个新特性

00:00:59.526 --> 00:01:00.056 A:middle
做些什么

00:00:59.526 --> 00:01:00.056 A:middle
做些什么

00:01:00.886 --> 00:01:01.586 A:middle
那下面我们就进入正题

00:01:02.756 --> 00:01:04.156 A:middle
如果你们有兴趣了解

00:01:04.156 --> 00:01:05.836 A:middle
这个框架中的新特征

00:01:05.836 --> 00:01:06.776 A:middle
还可以参阅先前的

00:01:06.776 --> 00:01:08.376 A:middle
主题会议“CareKit 和 ResearchKit 中的新特性”

00:01:08.376 --> 00:01:10.126 A:middle
这是由 Sam Ravaka

00:01:10.126 --> 00:01:10.576 A:middle
主持的

00:01:11.696 --> 00:01:13.406 A:middle
如果大家想知道 CareKit 的诞生过程

00:01:13.406 --> 00:01:14.726 A:middle
以及它的底层架构

00:01:14.726 --> 00:01:16.626 A:middle
我强烈推荐你们

00:01:16.626 --> 00:01:17.836 A:middle
去观看去年的会议

00:01:17.836 --> 00:01:19.216 A:middle
“CareKit 入门”

00:01:19.216 --> 00:01:21.676 A:middle
它是由 Omar Kahn

00:01:21.676 --> 00:01:23.336 A:middle
主持的

00:01:23.336 --> 00:01:25.126 A:middle
CareKit 自去年发布以来

00:01:25.126 --> 00:01:27.316 A:middle
已经帮助众多医疗机构

00:01:27.316 --> 00:01:28.826 A:middle
提高了病患医护的

00:01:28.826 --> 00:01:30.866 A:middle
的整体质量

00:01:30.866 --> 00:01:32.826 A:middle
它提供了家庭医护解决方案

00:01:32.826 --> 00:01:34.116 A:middle
以便追踪医护活动和

00:01:34.116 --> 00:01:34.866 A:middle
评估情况

00:01:36.226 --> 00:01:37.786 A:middle
此外  病患可以通过

00:01:37.786 --> 00:01:39.196 A:middle
各种 CareKit App  对自身医护状态

00:01:39.456 --> 00:01:41.356 A:middle
拥有更多的控制及决定

00:01:41.356 --> 00:01:42.616 A:middle
这给我们带来了新的洞见和

00:01:42.616 --> 00:01:44.416 A:middle
机会 有利于更进一步地

00:01:44.416 --> 00:01:46.366 A:middle
提升医护质量和技术

00:01:46.826 --> 00:01:49.866 A:middle
所以 今年我们要

00:01:49.866 --> 00:01:51.896 A:middle
介绍一种新卡片

00:01:51.956 --> 00:01:53.596 A:middle
让病患可以追踪医护任务

00:01:54.046 --> 00:01:55.426 A:middle
比如膝关节手术后的伸展运动

00:01:55.426 --> 00:01:57.796 A:middle
以及他们需要完成的

00:01:57.796 --> 00:01:58.866 A:middle
一些评估活动

00:01:58.866 --> 00:02:00.916 A:middle
以便医生追踪他们在

00:01:58.866 --> 00:02:00.916 A:middle
以便医生追踪他们在

00:02:00.916 --> 00:02:02.256 A:middle
医护过程中的进展

00:02:02.966 --> 00:02:06.236 A:middle
目前这些坚持治疗的情态 个人症状

00:02:06.236 --> 00:02:08.455 A:middle
和治疗结果就是关键数据点

00:02:08.675 --> 00:02:10.356 A:middle
它们不仅有助于了解

00:02:10.356 --> 00:02:12.076 A:middle
病患的感受

00:02:12.076 --> 00:02:13.206 A:middle
还能了解他们在

00:02:13.206 --> 00:02:13.996 A:middle
自身医护中的参与程度

00:02:15.516 --> 00:02:17.066 A:middle
这个卡片中的数据

00:02:17.066 --> 00:02:18.906 A:middle
对于医护团队而言也是至关重要的

00:02:18.976 --> 00:02:20.406 A:middle
这将有助于他们了解

00:02:20.406 --> 00:02:21.496 A:middle
自己的治疗方案是否

00:02:21.496 --> 00:02:22.986 A:middle
达到了预期效果

00:02:25.376 --> 00:02:27.596 A:middle
我们的 CareKit Insights 标签

00:02:27.596 --> 00:02:29.666 A:middle
现在添加了阈值提醒的特性

00:02:29.666 --> 00:02:31.196 A:middle
它通过窗口小控件  甚至是文本形式

00:02:31.196 --> 00:02:34.666 A:middle
给用户提供了一个很好的

00:02:34.706 --> 00:02:37.886 A:middle
视觉提示  这个文本实际上可以将数据

00:02:37.886 --> 00:02:38.886 A:middle
呈现在最能引起他们注意的地方

00:02:38.886 --> 00:02:40.396 A:middle
提醒他们需要关注

00:02:40.396 --> 00:02:41.626 A:middle
哪些事情

00:02:43.876 --> 00:02:46.436 A:middle
最后 现在的 CareKit App

00:02:46.806 --> 00:02:48.096 A:middle
还允许病患以 PDF 格式

00:02:48.096 --> 00:02:50.376 A:middle
通过我们 Connect View 中的

00:02:50.376 --> 00:02:51.676 A:middle
Share Reports 选项  来分享他们的

00:02:51.676 --> 00:02:51.876 A:middle
数据

00:02:52.916 --> 00:02:54.726 A:middle
此前我们已经意识到  应该适时地

00:02:54.816 --> 00:02:56.646 A:middle
更新一下这种分享体验了

00:03:00.376 --> 00:03:01.746 A:middle
所以在 CareKit 发布之后

00:03:01.746 --> 00:03:03.566 A:middle
我们非常高兴能收到

00:03:03.566 --> 00:03:05.466 A:middle
通过 CareKit App 汇集而来的

00:03:05.466 --> 00:03:08.046 A:middle
数据 它们不仅对于病患而言弥足珍贵

00:03:08.046 --> 00:03:09.416 A:middle
对于他们的医护团队成员

00:03:09.416 --> 00:03:10.076 A:middle
也是如此

00:03:11.236 --> 00:03:12.556 A:middle
但是 这些数据返回给

00:03:12.556 --> 00:03:14.316 A:middle
医护团队的过程  则是一个

00:03:14.316 --> 00:03:14.956 A:middle
手动过程

00:03:15.626 --> 00:03:17.076 A:middle
这会给医护团队远程升级

00:03:17.116 --> 00:03:19.156 A:middle
病患卡片

00:03:19.156 --> 00:03:20.586 A:middle
带来挑战

00:03:20.826 --> 00:03:22.426 A:middle
他们甚至很难正确地把握

00:03:22.426 --> 00:03:23.206 A:middle
病患在医护过程中的

00:03:23.206 --> 00:03:23.636 A:middle
进展情况

00:03:25.176 --> 00:03:26.436 A:middle
所以这些病患与医护团队的 App

00:03:26.436 --> 00:03:28.676 A:middle
真的需要努力改进

00:03:28.676 --> 00:03:30.156 A:middle
从而打破存在于彼此间的

00:03:30.156 --> 00:03:31.656 A:middle
数据壁垒

00:03:34.346 --> 00:03:36.296 A:middle
所以我们看到了一些 App

00:03:36.386 --> 00:03:37.916 A:middle
创建它们自己的

00:03:37.916 --> 00:03:39.956 A:middle
后端云解决方案

00:03:40.026 --> 00:03:41.366 A:middle
来帮助实现病患与医护团队 App

00:03:41.366 --> 00:03:42.406 A:middle
的数据同步化

00:03:43.316 --> 00:03:44.696 A:middle
但是 这并不是一件

00:03:44.696 --> 00:03:44.866 A:middle
容易的事

00:03:45.666 --> 00:03:46.686 A:middle
它真的需要

00:03:46.686 --> 00:03:48.076 A:middle
开发者处理其中的

00:03:48.076 --> 00:03:49.036 A:middle
大部分工作

00:03:50.086 --> 00:03:51.486 A:middle
他们必须处理如何与这些 App 的

00:03:51.486 --> 00:03:53.006 A:middle
数据存储器以及

00:03:53.006 --> 00:03:54.636 A:middle
后端云系统

00:03:54.636 --> 00:03:55.766 A:middle
直接建立接口

00:03:56.296 --> 00:03:59.806 A:middle
我们可以看到

00:03:59.986 --> 00:04:01.466 A:middle
越来越多的人需要打破

00:03:59.986 --> 00:04:01.466 A:middle
越来越多的人需要打破

00:04:01.466 --> 00:04:03.666 A:middle
这个数据障碍

00:04:03.726 --> 00:04:05.666 A:middle
从而帮助病人和医护团队 App

00:04:05.666 --> 00:04:06.926 A:middle
安全地实现数据同步

00:04:06.926 --> 00:04:07.336 A:middle
如果他们需要这样做的话

00:04:07.886 --> 00:04:10.996 A:middle
所以这就给我们带来了

00:04:10.996 --> 00:04:12.876 A:middle
一个改进 CareKit 框架

00:04:12.876 --> 00:04:15.316 A:middle
的机会

00:04:15.316 --> 00:04:16.956 A:middle
这种改进  是要在框架结构中

00:04:16.956 --> 00:04:19.366 A:middle
直接建立勾连 从而使得当前应用和

00:04:19.366 --> 00:04:21.276 A:middle
新的应用能够以更简单

00:04:21.326 --> 00:04:22.896 A:middle
更清洁的方式满足它们的

00:04:22.896 --> 00:04:24.306 A:middle
数据同步需求

00:04:26.746 --> 00:04:28.786 A:middle
接下来 我们希望

00:04:28.786 --> 00:04:30.536 A:middle
能借助创建这个新特性

00:04:30.536 --> 00:04:31.796 A:middle
来改进数据管道

00:04:32.326 --> 00:04:34.046 A:middle
从而减少

00:04:34.046 --> 00:04:35.156 A:middle
开发团队

00:04:35.156 --> 00:04:35.836 A:middle
需要付出的努力

00:04:36.306 --> 00:04:39.426 A:middle
这种基于云计算的

00:04:39.426 --> 00:04:41.146 A:middle
数据共享  意味着

00:04:41.146 --> 00:04:42.536 A:middle
在家使用 CareKit App

00:04:42.616 --> 00:04:44.586 A:middle
追踪自身医护情况的病人现在就可以

00:04:44.586 --> 00:04:45.516 A:middle
实时分享这些医护数据了

00:04:45.516 --> 00:04:47.976 A:middle
这一点很棒

00:04:47.976 --> 00:04:49.756 A:middle
因为这就使得医护团队

00:04:49.756 --> 00:04:51.006 A:middle
可以看到病患情况发展的

00:04:51.006 --> 00:04:52.876 A:middle
实时记录

00:04:52.876 --> 00:04:54.356 A:middle
这样他们就有机会

00:04:54.356 --> 00:04:55.956 A:middle
对医护计划进行调整

00:04:56.406 --> 00:04:58.166 A:middle
甚至直接出面提供援助  如果他们愿意

00:04:58.166 --> 00:04:58.646 A:middle
这样做的话

00:05:01.396 --> 00:05:03.016 A:middle
所以在这整个过程中

00:05:03.196 --> 00:05:04.546 A:middle
我们确实从许多

00:05:04.546 --> 00:05:06.886 A:middle
CareKit App 里面获得启发 尤其是

00:05:06.886 --> 00:05:08.376 A:middle
南加利福利亚州

00:05:08.376 --> 00:05:09.246 A:middle
Sharp Healthcare

00:05:09.246 --> 00:05:09.756 A:middle
所做的工作

00:05:11.056 --> 00:05:12.516 A:middle
那么  让我们根据他们这些用户所给予的启发

00:05:12.516 --> 00:05:14.366 A:middle
来发挥创造出我们自己的用途吧

00:05:14.586 --> 00:05:16.046 A:middle
我们来看看正在接受眼部手术的患者

00:05:16.046 --> 00:05:18.156 A:middle
这项手术就利用了

00:05:18.156 --> 00:05:19.446 A:middle
我们的 CareKit 新功能和

00:05:19.446 --> 00:05:19.976 A:middle
Bridge API

00:05:19.976 --> 00:05:21.976 A:middle
这真正展现出了

00:05:21.976 --> 00:05:23.296 A:middle
数据同步的重要性

00:05:23.796 --> 00:05:27.406 A:middle
在这个例子中

00:05:27.406 --> 00:05:29.236 A:middle
术后的两周时间对于

00:05:29.236 --> 00:05:30.176 A:middle
病患康复来说至关重要

00:05:31.266 --> 00:05:32.786 A:middle
病患必须高度认真地

00:05:32.786 --> 00:05:34.556 A:middle
使用抗菌滴眼液

00:05:34.556 --> 00:05:35.906 A:middle
以防止感染

00:05:35.976 --> 00:05:37.796 A:middle
因为如果感染未能尽早处理

00:05:37.796 --> 00:05:38.936 A:middle
最后可能会导致失明

00:05:39.466 --> 00:05:42.016 A:middle
那么在我们的这个情境中

00:05:42.366 --> 00:05:43.606 A:middle
医护团队可以监视

00:05:43.606 --> 00:05:44.936 A:middle
病人的情况

00:05:44.936 --> 00:05:45.806 A:middle
这些情况都会被记录下来

00:05:46.476 --> 00:05:47.706 A:middle
如果在他们的医护下

00:05:47.706 --> 00:05:49.186 A:middle
病人情况并没有好转

00:05:49.186 --> 00:05:50.406 A:middle
如果需要

00:05:50.406 --> 00:05:51.246 A:middle
他们可以调整医护计划

00:05:51.766 --> 00:05:54.866 A:middle
病患也可以通过 Insight 标签

00:05:54.866 --> 00:05:56.516 A:middle
来查看自己坚持使用滴眼液的

00:05:56.516 --> 00:05:59.246 A:middle
情况和结果

00:05:59.246 --> 00:06:01.026 A:middle
而医护团队也可以看到

00:05:59.246 --> 00:06:01.026 A:middle
而医护团队也可以看到

00:06:01.026 --> 00:06:01.526 A:middle
同样的记录

00:06:02.846 --> 00:06:04.276 A:middle
医护团队可以监视

00:06:04.276 --> 00:06:05.046 A:middle
病患的情况

00:06:05.286 --> 00:06:06.586 A:middle
如果病患没有好转

00:06:06.736 --> 00:06:08.006 A:middle
医护团队可以

00:06:08.006 --> 00:06:09.256 A:middle
根据需要来调整他们的医护计划

00:06:09.526 --> 00:06:10.916 A:middle
甚至可以直接提供援助

00:06:10.916 --> 00:06:11.416 A:middle
如果他们想要这样做的话

00:06:11.886 --> 00:06:15.266 A:middle
所以这个使用案例确实

00:06:15.266 --> 00:06:16.786 A:middle
展现出了数据同步的重要性

00:06:16.786 --> 00:06:18.866 A:middle
以及我们作为一个团队  为什么会觉得

00:06:18.866 --> 00:06:20.716 A:middle
着手整合出一个解决方案

00:06:20.716 --> 00:06:22.276 A:middle
是至关重要的事情

00:06:23.436 --> 00:06:24.586 A:middle
讲完这些  下面我将为大家

00:06:24.586 --> 00:06:26.786 A:middle
介绍我们全新的

00:06:26.786 --> 00:06:27.096 A:middle
Bridge API

00:06:30.556 --> 00:06:32.586 A:middle
Bridge API 是一种抽象的

00:06:32.586 --> 00:06:35.046 A:middle
云API 它遵循

00:06:35.046 --> 00:06:36.906 A:middle
CareKit 方案 可以在

00:06:36.906 --> 00:06:38.466 A:middle
没有任何附加配置的情况下

00:06:38.466 --> 00:06:39.176 A:middle
实现数据同步化

00:06:39.696 --> 00:06:42.866 A:middle
Bridge API 的设计初衷是为了

00:06:43.176 --> 00:06:44.646 A:middle
让 CareKit App 能够与

00:06:44.646 --> 00:06:46.006 A:middle
后端云解决方案进行无缝整合

00:06:46.706 --> 00:06:49.406 A:middle
它建立在我们当前的

00:06:49.406 --> 00:06:51.046 A:middle
CareKit 数据模型和

00:06:51.046 --> 00:06:51.586 A:middle
数据架构基础之上

00:06:55.006 --> 00:06:56.736 A:middle
Bridge API 为云解决方案提供了所有

00:06:56.736 --> 00:06:58.746 A:middle
必要的勾连

00:06:58.746 --> 00:07:00.166 A:middle
从而使得它们能够无缝接入

00:06:58.746 --> 00:07:00.166 A:middle
从而使得它们能够无缝接入

00:07:00.166 --> 00:07:01.136 A:middle
CareKit 框架

00:07:01.636 --> 00:07:04.176 A:middle
这样一来 就不再需要

00:07:04.276 --> 00:07:06.156 A:middle
第三方开发人员来

00:07:06.156 --> 00:07:08.246 A:middle
深入研究代码并

00:07:08.246 --> 00:07:09.196 A:middle
对 CareKit 框架进行扩展

00:07:09.196 --> 00:07:09.976 A:middle
以满足他们的特殊需要了

00:07:10.656 --> 00:07:14.686 A:middle
这个 API 把相关任务抽离出来

00:07:14.686 --> 00:07:16.216 A:middle
转而为云解决方案提供了

00:07:16.216 --> 00:07:17.576 A:middle
可利用的委托函数

00:07:21.306 --> 00:07:22.666 A:middle
连同 Bridge 一起 我们还添加了

00:07:22.666 --> 00:07:24.426 A:middle
一些额外的 UI 模块

00:07:24.726 --> 00:07:25.996 A:middle
让开发人员整合和使用起来

00:07:25.996 --> 00:07:29.286 A:middle
更加的方便

00:07:30.496 --> 00:07:32.106 A:middle
那么就让我们来看看这是

00:07:32.106 --> 00:07:32.556 A:middle
是如何操作的

00:07:33.136 --> 00:07:36.436 A:middle
医护计划中的活动是用

00:07:36.626 --> 00:07:38.286 A:middle
OCKCarePlanActivity 对象创建的

00:07:38.286 --> 00:07:40.696 A:middle
它或是一种评估 介入

00:07:41.006 --> 00:07:42.886 A:middle
抑或是开发人员

00:07:42.886 --> 00:07:44.136 A:middle
创建的自定义类型

00:07:46.856 --> 00:07:48.656 A:middle
这些活动随后就会

00:07:48.656 --> 00:07:50.846 A:middle
通过我们目前的 CareKit 框架函数

00:07:50.846 --> 00:07:51.906 A:middle
添加到 OCKCarePlanStore

00:07:51.906 --> 00:07:52.356 A:middle
当中来

00:07:54.756 --> 00:07:56.426 A:middle
这就是 Bridge API

00:07:56.426 --> 00:07:57.256 A:middle
真正发挥作用的地方

00:07:58.066 --> 00:07:59.336 A:middle
它位于医护计划

00:07:59.336 --> 00:08:02.806 A:middle
存储器和云后端之间

00:07:59.336 --> 00:08:02.806 A:middle
存储器和云后端之间

00:08:02.806 --> 00:08:04.326 A:middle
会根据存储器中的状态变化

00:08:04.326 --> 00:08:04.836 A:middle
作出反应

00:08:06.036 --> 00:08:07.496 A:middle
当检测到变化时

00:08:07.696 --> 00:08:09.816 A:middle
API 就会相应地做出反应

00:08:09.816 --> 00:08:11.576 A:middle
并且允许云解决方案收集

00:08:11.576 --> 00:08:13.386 A:middle
这些变化

00:08:13.386 --> 00:08:15.696 A:middle
继而在云端与存储器之间

00:08:15.696 --> 00:08:17.026 A:middle
对必要的数据差异进行同步

00:08:19.586 --> 00:08:21.266 A:middle
API 与本地医护计划

00:08:21.266 --> 00:08:23.876 A:middle
存储器以及远程云端

00:08:23.876 --> 00:08:26.496 A:middle
存储器形成了接口   从而确保

00:08:26.496 --> 00:08:27.906 A:middle
任何状态变化

00:08:27.906 --> 00:08:28.696 A:middle
都能得到相应的处理

00:08:30.056 --> 00:08:32.106 A:middle
它可以增加医护活动

00:08:32.546 --> 00:08:34.206 A:middle
还可以移除和更新医护活动

00:08:35.155 --> 00:08:37.256 A:middle
Bridge API 挂钩允许

00:08:37.256 --> 00:08:38.846 A:middle
云解决方案收集

00:08:38.846 --> 00:08:40.446 A:middle
这些变化并进行

00:08:40.446 --> 00:08:41.785 A:middle
必要的数据同步

00:08:42.376 --> 00:08:45.826 A:middle
数据出现的变化

00:08:45.826 --> 00:08:47.406 A:middle
会被更新到存储器

00:08:47.406 --> 00:08:48.676 A:middle
并保存到本地医护计划存储器当中

00:08:48.676 --> 00:08:51.156 A:middle
从而确保最新的数据同步

00:08:51.156 --> 00:08:52.796 A:middle
依然是对用户开放的

00:08:52.796 --> 00:08:54.736 A:middle
即使他们的设备在此时此刻

00:08:54.736 --> 00:08:55.776 A:middle
未必能连接到

00:08:55.776 --> 00:08:55.966 A:middle
云端

00:08:58.456 --> 00:08:59.806 A:middle
我们来看看

00:08:59.806 --> 00:09:00.466 A:middle
这一点是如何实现的

00:08:59.806 --> 00:09:00.466 A:middle
这一点是如何实现的

00:09:00.956 --> 00:09:03.736 A:middle
你可以继续添加

00:09:03.736 --> 00:09:05.946 A:middle
并移除 OCKCarePlanActivities

00:09:06.186 --> 00:09:07.256 A:middle
就像以前一样

00:09:07.956 --> 00:09:10.176 A:middle
这就意味着

00:09:10.176 --> 00:09:11.896 A:middle
你不需要对你现有的

00:09:11.896 --> 00:09:13.526 A:middle
CareKit App 活动进行额外的配置

00:09:13.526 --> 00:09:15.826 A:middle
就可以利用

00:09:15.826 --> 00:09:17.756 A:middle
API 的功能

00:09:17.756 --> 00:09:19.126 A:middle
并主动同步数据

00:09:20.536 --> 00:09:22.546 A:middle
但这到底是怎么做到的呢

00:09:23.396 --> 00:09:25.296 A:middle
API 会处理

00:09:25.296 --> 00:09:26.966 A:middle
医护计划存储器中的变化

00:09:26.966 --> 00:09:28.576 A:middle
当活动列表出现变化

00:09:28.576 --> 00:09:31.386 A:middle
或者是当它收到事件更新时

00:09:31.386 --> 00:09:32.536 A:middle
API 都会

00:09:32.536 --> 00:09:33.286 A:middle
告知委托方

00:09:33.796 --> 00:09:36.656 A:middle
你们看见的这些

00:09:36.656 --> 00:09:38.026 A:middle
Bridge API 挂钩和方法

00:09:38.416 --> 00:09:40.136 A:middle
使得我们的云解决方案可以

00:09:40.136 --> 00:09:41.746 A:middle
挂钩到这个框架

00:09:41.746 --> 00:09:43.076 A:middle
并且对医护计划存储器的状态变化

00:09:43.076 --> 00:09:43.466 A:middle
进行处理

00:09:45.036 --> 00:09:46.936 A:middle
发生在幕后的这一切

00:09:46.936 --> 00:09:49.136 A:middle
使得你们的 CareKit App

00:09:49.946 --> 00:09:51.746 A:middle
可以获取

00:09:51.746 --> 00:09:52.536 A:middle
医护计划存储器中的实时更新

00:09:55.366 --> 00:09:57.196 A:middle
所以这些方法使得

00:09:57.196 --> 00:09:59.106 A:middle
开发人员  比如你们所有人

00:09:59.106 --> 00:10:00.836 A:middle
能够创建你们自己的

00:09:59.106 --> 00:10:00.836 A:middle
能够创建你们自己的

00:10:00.836 --> 00:10:02.486 A:middle
后端云解决方案

00:10:02.586 --> 00:10:04.536 A:middle
这些解决方案可以直接挂钩到我们的 Bridge API

00:10:04.846 --> 00:10:06.416 A:middle
它们还让你能够处理

00:10:06.416 --> 00:10:08.276 A:middle
那些符合你期待的使用实例标准的

00:10:08.276 --> 00:10:09.626 A:middle
医护计划存储器状态变化

00:10:11.166 --> 00:10:12.866 A:middle
不过 如果你对使用

00:10:12.866 --> 00:10:14.416 A:middle
第三方解决方案感兴趣

00:10:14.976 --> 00:10:15.936 A:middle
你可以使用一个

00:10:15.936 --> 00:10:17.616 A:middle
现有的解决方案

00:10:17.616 --> 00:10:18.936 A:middle
这个方案已经利用了

00:10:18.936 --> 00:10:21.006 A:middle
Bridge API 并且还有

00:10:21.006 --> 00:10:23.096 A:middle
现成可用 由 CareKit 执行

00:10:23.096 --> 00:10:24.246 A:middle
的解决方案工具

00:10:24.596 --> 00:10:27.406 A:middle
我们已经与

00:10:27.406 --> 00:10:31.386 A:middle
Medable 和 CloudMine 进行了合作

00:10:31.386 --> 00:10:33.366 A:middle
以便帮助他们设计和创建符合 HIPPA 的

00:10:33.366 --> 00:10:34.596 A:middle
后端云解决方案

00:10:34.596 --> 00:10:36.216 A:middle
该方案使用了他们

00:10:36.216 --> 00:10:37.756 A:middle
现有符合 HIPPA 的后端

00:10:37.756 --> 00:10:38.516 A:middle
云系统

00:10:39.086 --> 00:10:41.646 A:middle
利用这些解决方案当中的一种

00:10:41.686 --> 00:10:43.826 A:middle
会有助于加快

00:10:43.826 --> 00:10:45.736 A:middle
启动 CareKit App

00:10:46.246 --> 00:10:47.086 A:middle
运行 Bridge API

00:10:47.086 --> 00:10:49.386 A:middle
和主动同步数据至云端的

00:10:49.386 --> 00:10:55.026 A:middle
进程

00:10:55.026 --> 00:10:56.196 A:middle
那么我们来看看

00:10:56.196 --> 00:10:57.906 A:middle
其中一个由 Medable 开发的现成解决方案

00:10:57.906 --> 00:11:00.496 A:middle
并演示一下如何

00:10:57.906 --> 00:11:00.496 A:middle
并演示一下如何

00:11:00.496 --> 00:11:02.216 A:middle
利用 Bridge API 挂钩

00:11:02.696 --> 00:11:03.916 A:middle
来将数据与云解决方案

00:11:03.916 --> 00:11:04.346 A:middle
同步

00:11:07.336 --> 00:11:09.166 A:middle
这里你们可以看到

00:11:09.166 --> 00:11:09.936 A:middle
如何启动客户端

00:11:09.936 --> 00:11:12.346 A:middle
这将引用

00:11:12.346 --> 00:11:13.786 A:middle
你项目 plist 中的

00:11:13.786 --> 00:11:16.096 A:middle
一些必要密钥  以便确保

00:11:16.096 --> 00:11:17.466 A:middle
能够建立一种连接

00:11:17.656 --> 00:11:19.086 A:middle
使得数据能够与

00:11:19.086 --> 00:11:20.646 A:middle
预先配置的账户同步

00:11:22.616 --> 00:11:24.626 A:middle
你可以从这里登录

00:11:24.626 --> 00:11:25.626 A:middle
用配置好的用户名和

00:11:25.626 --> 00:11:28.206 A:middle
密码登录 然后

00:11:28.206 --> 00:11:29.606 A:middle
如果有错误 就继续处理错误

00:11:29.606 --> 00:11:31.496 A:middle
如果没有 就替该用户撤回

00:11:31.496 --> 00:11:32.826 A:middle
返回给 Bridge 引用的信息

00:11:33.706 --> 00:11:34.626 A:middle
你在建立连接时

00:11:34.626 --> 00:11:35.666 A:middle
可以用到这个 Bridge 引用

00:11:37.326 --> 00:11:38.776 A:middle
一旦登录成功

00:11:38.776 --> 00:11:40.406 A:middle
云 Bridge 就知道要利用

00:11:40.406 --> 00:11:42.186 A:middle
这个账号来进行

00:11:42.186 --> 00:11:43.566 A:middle
后续的协议

00:11:43.566 --> 00:11:44.106 A:middle
处理

00:11:47.536 --> 00:11:48.876 A:middle
所以 一旦你登录成功了

00:11:48.876 --> 00:11:50.566 A:middle
就可以列出 Medable

00:11:50.566 --> 00:11:51.436 A:middle
存储器连接

00:11:52.226 --> 00:11:53.236 A:middle
这样就能够替那位用户

00:11:53.236 --> 00:11:54.546 A:middle
返还所有可能的

00:11:54.546 --> 00:11:54.876 A:middle
连接

00:11:55.376 --> 00:11:57.706 A:middle
这些连接可能处于

00:11:57.706 --> 00:11:59.876 A:middle
各式各样的状态 已接受

00:12:00.196 --> 00:12:01.316 A:middle
被拒绝 或者待处理

00:12:01.836 --> 00:12:05.046 A:middle
所以从这里开始你希望

00:12:05.046 --> 00:12:06.326 A:middle
对这些连接都做出相应的处理

00:12:06.806 --> 00:12:08.116 A:middle
要么接受待处理的连接

00:12:08.116 --> 00:12:09.906 A:middle
要么为用户抓取

00:12:09.906 --> 00:12:11.346 A:middle
活跃有效的连接

00:12:11.946 --> 00:12:12.986 A:middle
你可以利用有效连接

00:12:12.986 --> 00:12:13.576 A:middle
开始同步数据

00:12:15.296 --> 00:12:16.416 A:middle
这里有一点很重要

00:12:16.416 --> 00:12:18.096 A:middle
确实需要注意 那就是

00:12:18.096 --> 00:12:19.546 A:middle
除非你有一个有效连接

00:12:19.936 --> 00:12:21.116 A:middle
否则的话

00:12:21.116 --> 00:12:21.656 A:middle
数据就无法成功同步到云端

00:12:22.656 --> 00:12:24.106 A:middle
有效连接可以确保

00:12:24.106 --> 00:12:26.306 A:middle
用户仅能双向访问

00:12:26.716 --> 00:12:27.796 A:middle
他们已经授权的

00:12:27.796 --> 00:12:28.356 A:middle
那些数据

00:12:29.846 --> 00:12:31.596 A:middle
如此而被拒绝的连接则会

00:12:31.596 --> 00:12:33.036 A:middle
阻止数据同步到云端

00:12:33.036 --> 00:12:34.776 A:middle
并阻止它与发起者

00:12:34.776 --> 00:12:35.516 A:middle
的共享

00:12:39.216 --> 00:12:40.756 A:middle
现在我们已经介绍了

00:12:40.756 --> 00:12:41.606 A:middle
如何创建连接和如何通过 Medable

00:12:41.606 --> 00:12:43.006 A:middle
解决方案而建立连接的问题

00:12:43.006 --> 00:12:45.496 A:middle
接下来我们来看

00:12:45.496 --> 00:12:47.346 A:middle
CareKit 的另一项新功能

00:12:47.346 --> 00:12:49.166 A:middle
其中也用到了这些连接和

00:12:49.166 --> 00:12:49.766 A:middle
我们的 Bridge API

00:12:53.256 --> 00:12:56.046 A:middle
这个新 API 不仅为同步

00:12:56.046 --> 00:12:57.546 A:middle
CareKit 数据

00:12:57.546 --> 00:12:59.376 A:middle
比如活动和事件  打开了一扇大门

00:13:00.076 --> 00:13:01.516 A:middle
它还可用于同步

00:13:01.516 --> 00:13:02.656 A:middle
其他类型的数据

00:13:03.876 --> 00:13:05.126 A:middle
这方面有一个很好的例子

00:13:05.126 --> 00:13:06.326 A:middle
就是安全信息发送-

00:13:06.786 --> 00:13:09.706 A:middle
安全信息发送可以在

00:13:09.706 --> 00:13:11.656 A:middle
Connect 标签里看见

00:13:11.656 --> 00:13:12.966 A:middle
同时 通过新的 UI 模块展示

00:13:13.196 --> 00:13:14.946 A:middle
也就是我们在 CareKit 最新更新里开发的

00:13:15.386 --> 00:13:15.546 A:middle
UI 模块

00:13:16.596 --> 00:13:18.036 A:middle
如果你参加了上一次的会议

00:13:18.036 --> 00:13:19.586 A:middle
“CareKit 和 ReserachKit 的新特性”

00:13:19.586 --> 00:13:21.256 A:middle
你就会

00:13:21.256 --> 00:13:22.746 A:middle
熟悉这个通过

00:13:22.746 --> 00:13:23.896 A:middle
Connect 标签添加的收件箱特性

00:13:28.956 --> 00:13:31.146 A:middle
收件箱让开发者

00:13:31.146 --> 00:13:32.716 A:middle
能够简单地

00:13:32.716 --> 00:13:33.816 A:middle
以类似会话的良好格式

00:13:33.846 --> 00:13:34.986 A:middle
来显示信息的功能

00:13:35.516 --> 00:13:38.556 A:middle
这种信息传送功能

00:13:38.556 --> 00:13:40.366 A:middle
可以被直接连接到

00:13:40.366 --> 00:13:42.846 A:middle
Bridge API 和云后端解决方案

00:13:43.446 --> 00:13:45.136 A:middle
让病患和医护团队

00:13:45.396 --> 00:13:47.286 A:middle
可以直接在他们的

00:13:47.286 --> 00:13:48.176 A:middle
CareKit App 中安全地发送信息

00:13:49.316 --> 00:13:50.376 A:middle
那么我们来看看

00:13:50.376 --> 00:13:54.606 A:middle
怎么用代码实现这一点

00:13:54.816 --> 00:13:56.856 A:middle
用 OCKConnectViewController

00:13:57.716 --> 00:13:58.246 A:middle
委托以及

00:13:58.246 --> 00:13:59.676 A:middle
OCKConnectViewController 数据源

00:13:59.676 --> 00:14:01.296 A:middle
方法来设置你的

00:13:59.676 --> 00:14:01.296 A:middle
方法来设置你的

00:14:01.296 --> 00:14:01.916 A:middle
信息传送 UI

00:14:03.556 --> 00:14:05.246 A:middle
请注意 不是所有

00:14:05.246 --> 00:14:06.746 A:middle
必要的委托函数都在这里

00:14:06.746 --> 00:14:08.896 A:middle
展示 但我们选择性地

00:14:08.896 --> 00:14:10.106 A:middle
突出了其中一些更为

00:14:10.106 --> 00:14:11.066 A:middle
具体的方法

00:14:11.816 --> 00:14:15.176 A:middle
必须通过第一种方法

00:14:15.176 --> 00:14:16.996 A:middle
告知委托

00:14:17.196 --> 00:14:19.056 A:middle
有多少信息条目属于

00:14:19.056 --> 00:14:20.206 A:middle
对应的医护团队

00:14:20.206 --> 00:14:20.646 A:middle
联系人

00:14:21.856 --> 00:14:23.586 A:middle
病人与医护团队

00:14:23.586 --> 00:14:25.486 A:middle
可能会有多个会话 所以

00:14:25.486 --> 00:14:26.996 A:middle
弄清楚哪些信息

00:14:26.996 --> 00:14:28.286 A:middle
与哪个会话对应

00:14:28.286 --> 00:14:28.856 A:middle
在这里十分重要

00:14:29.356 --> 00:14:33.326 A:middle
接下来 你可以执行

00:14:33.326 --> 00:14:34.706 A:middle
connectMessageItemAtIndex

00:14:34.736 --> 00:14:36.456 A:middle
函数 并返回

00:14:36.456 --> 00:14:37.666 A:middle
该索引下的合适信息

00:14:39.576 --> 00:14:40.366 A:middle
一批 OCKConnectMessageItems

00:14:40.366 --> 00:14:42.226 A:middle
可以在你收发信息时

00:14:42.226 --> 00:14:44.066 A:middle
被存储下来

00:14:45.266 --> 00:14:46.276 A:middle
你还可以使用

00:14:46.276 --> 00:14:48.216 A:middle
这个方法的索引属性来

00:14:48.216 --> 00:14:49.536 A:middle
为那一批条目编入索引

00:14:49.536 --> 00:14:50.516 A:middle
并返回适当的信息

00:14:51.056 --> 00:14:53.156 A:middle
这一步是为了

00:14:53.156 --> 00:14:54.596 A:middle
让你的用户界面

00:14:54.596 --> 00:14:56.056 A:middle
以适当的顺序

00:14:56.056 --> 00:14:56.736 A:middle
展示这些信息

00:14:59.456 --> 00:15:01.346 A:middle
最后 你可以执行

00:14:59.456 --> 00:15:01.346 A:middle
最后 你可以执行

00:15:01.346 --> 00:15:02.866 A:middle
didSendConnectMessage 函数

00:15:03.356 --> 00:15:04.996 A:middle
以便安全地发送信息

00:15:04.996 --> 00:15:06.486 A:middle
给你们的医护团队

00:15:06.486 --> 00:15:06.996 A:middle
或者给你的病人

00:15:07.476 --> 00:15:09.936 A:middle
所以这就是我们的

00:15:09.936 --> 00:15:11.736 A:middle
Bridge API 和这些后端云解决方案

00:15:11.736 --> 00:15:13.406 A:middle
真正发挥作用的地方

00:15:14.096 --> 00:15:16.456 A:middle
你可以利用这些 Bridge

00:15:16.456 --> 00:15:18.446 A:middle
方法来创建一个

00:15:18.446 --> 00:15:20.586 A:middle
新会话 甚至可以添加

00:15:20.586 --> 00:15:21.656 A:middle
一条新信息

00:15:21.656 --> 00:15:22.546 A:middle
到现有的会话进程中

00:15:23.056 --> 00:15:25.536 A:middle
那么我们来看看

00:15:25.536 --> 00:15:26.906 A:middle
它在 Medable 解决方案中是什么样的

00:15:31.316 --> 00:15:32.866 A:middle
这里你们可以看见

00:15:32.866 --> 00:15:33.846 A:middle
如何创建会话

00:15:34.486 --> 00:15:35.496 A:middle
这需要一个信息发送对象

00:15:35.536 --> 00:15:37.036 A:middle
它可以从你的

00:15:37.036 --> 00:15:38.956 A:middle
委托属性里面

00:15:38.956 --> 00:15:40.896 A:middle
还有显示出这些信息该发送给谁的

00:15:40.896 --> 00:15:41.896 A:middle
一系列目标里面

00:15:41.896 --> 00:15:41.963 A:middle
找寻出来

00:15:43.496 --> 00:15:45.326 A:middle
现在  在这个目标 ID 属性中

00:15:45.326 --> 00:15:46.326 A:middle
大家可以看见目标的

00:15:46.326 --> 00:15:48.166 A:middle
参数是

00:15:48.166 --> 00:15:49.546 A:middle
连接的唯一标识符

00:15:49.546 --> 00:15:50.706 A:middle
也是该信息接收者的

00:15:51.306 --> 00:15:51.426 A:middle
唯一标识符

00:15:52.196 --> 00:15:53.906 A:middle
该函数的成功执行

00:15:54.046 --> 00:15:55.016 A:middle
不仅会创建

00:15:55.016 --> 00:15:56.636 A:middle
会话 还会

00:15:56.636 --> 00:15:57.746 A:middle
添加附加信息

00:15:58.276 --> 00:16:00.546 A:middle
这里非常值得注意的是

00:15:58.276 --> 00:16:00.546 A:middle
这里非常值得注意的是

00:16:00.546 --> 00:16:02.566 A:middle
我们不推荐

00:16:02.616 --> 00:16:04.326 A:middle
通过这个 createConversation 函数

00:16:04.566 --> 00:16:05.786 A:middle
来创建

00:16:05.846 --> 00:16:07.006 A:middle
具有相同连接的

00:16:07.006 --> 00:16:07.386 A:middle
多个会话

00:16:09.126 --> 00:16:10.606 A:middle
虽然这可以做到

00:16:10.606 --> 00:16:12.126 A:middle
但最好还是只创建

00:16:12.126 --> 00:16:13.336 A:middle
一次会话

00:16:13.876 --> 00:16:15.366 A:middle
随后而来的信息应该

00:16:15.366 --> 00:16:16.576 A:middle
通过使用 sendMessage 函数

00:16:16.576 --> 00:16:17.506 A:middle
来进行添加

00:16:20.176 --> 00:16:21.866 A:middle
所以这个 sendMessage 函数

00:16:22.106 --> 00:16:23.306 A:middle
与上面的函数

00:16:23.306 --> 00:16:23.546 A:middle
非常相似

00:16:24.146 --> 00:16:25.206 A:middle
但是 它需要一个信息发送对象

00:16:25.206 --> 00:16:27.276 A:middle
现在还需要一个会话

00:16:27.276 --> 00:16:27.536 A:middle
ID

00:16:29.516 --> 00:16:31.096 A:middle
当你创建上面的会话时

00:16:31.096 --> 00:16:32.856 A:middle
有一点很重要

00:16:32.856 --> 00:16:34.356 A:middle
就是要保留这个

00:16:34.876 --> 00:16:36.366 A:middle
被返回 ID 的引用

00:16:36.366 --> 00:16:37.626 A:middle
你应该会把它用作

00:16:37.626 --> 00:16:38.286 A:middle
该函数的会话 ID 参数

00:16:38.976 --> 00:16:40.136 A:middle
这样就可以确保

00:16:40.136 --> 00:16:41.676 A:middle
当你发送一条新信息时

00:16:41.676 --> 00:16:42.536 A:middle
它会被添加到

00:16:42.536 --> 00:16:43.946 A:middle
适当的会话线程上

00:16:44.536 --> 00:16:47.236 A:middle
而且 为了提供更好的用户体验

00:16:47.416 --> 00:16:49.366 A:middle
还有一点也很重要 即

00:16:49.366 --> 00:16:51.566 A:middle
执行任何必要的 UI 更新

00:16:51.636 --> 00:16:53.176 A:middle
当你在创建一个新会话

00:16:53.176 --> 00:16:54.376 A:middle
甚或是将一条新消息

00:16:54.376 --> 00:16:55.696 A:middle
添加至现存的会话线程

00:16:56.346 --> 00:16:57.626 A:middle
从而确保用户能

00:16:57.626 --> 00:16:59.166 A:middle
收到即时的反馈

00:16:59.166 --> 00:17:00.486 A:middle
知晓消息是否

00:16:59.166 --> 00:17:00.486 A:middle
知晓消息是否

00:17:00.486 --> 00:17:01.016 A:middle
已成功发送

00:17:01.536 --> 00:17:04.626 A:middle
所以这个消息传送功能是

00:17:04.626 --> 00:17:06.086 A:middle
另一个很好的例子 向我们展示了

00:17:06.086 --> 00:17:07.996 A:middle
Bridge API 和这些

00:17:07.996 --> 00:17:10.205 A:middle
云解决方案是如何帮助提高

00:17:10.336 --> 00:17:11.536 A:middle
家庭病患医护

00:17:11.536 --> 00:17:12.185 A:middle
体验的

00:17:15.306 --> 00:17:16.726 A:middle
所以 既然我们已经了解到

00:17:16.726 --> 00:17:17.836 A:middle
Bridge API 的架构

00:17:18.486 --> 00:17:19.726 A:middle
以及如何将它和

00:17:19.726 --> 00:17:21.175 A:middle
相应的云后端搭配使用

00:17:21.616 --> 00:17:22.826 A:middle
我想邀请 Akshay 来到讲台

00:17:22.826 --> 00:17:24.106 A:middle
给大家做一个快速的

00:17:24.106 --> 00:17:24.356 A:middle
演示

00:17:25.516 --> 00:17:29.316 A:middle
[掌声]

00:17:29.816 --> 00:17:30.196 A:middle
&gt;&gt; 好的

00:17:30.956 --> 00:17:32.336 A:middle
大家好 欢迎观看

00:17:32.336 --> 00:17:33.556 A:middle
CareKit Cloud Bridge

00:17:33.556 --> 00:17:33.806 A:middle
同步演示

00:17:34.586 --> 00:17:36.276 A:middle
本次演示中 我们将看到

00:17:36.276 --> 00:17:37.986 A:middle
在病患 App 和

00:17:37.986 --> 00:17:39.616 A:middle
医护团队 App 之间

00:17:39.616 --> 00:17:40.866 A:middle
使用符合 HIPPA 的安全

00:17:40.866 --> 00:17:41.416 A:middle
云桥接是多么简单

00:17:42.416 --> 00:17:43.796 A:middle
在本次演示中 我们将使用

00:17:43.796 --> 00:17:45.036 A:middle
OCKSample App 它可以在

00:17:45.036 --> 00:17:46.636 A:middle
GitHub 开放源项目中获取

00:17:47.396 --> 00:17:49.076 A:middle
OCKSample App 是由

00:17:49.076 --> 00:17:50.826 A:middle
我们团队根据现有的全部

00:17:50.826 --> 00:17:51.976 A:middle
最佳实践开发出来的

00:17:52.536 --> 00:17:53.946 A:middle
因此我们相信 对于本次演示

00:17:53.946 --> 00:17:55.086 A:middle
这个 Sample App 将是一个很好的

00:17:55.086 --> 00:17:56.796 A:middle
起点 因为任何

00:17:56.796 --> 00:17:57.976 A:middle
熟悉 Carekit 的人

00:17:57.976 --> 00:17:59.116 A:middle
很可能也熟悉

00:17:59.116 --> 00:17:59.656 A:middle
Sample App

00:18:00.196 --> 00:18:01.896 A:middle
关于 Sample App 的更多参考信息

00:18:01.896 --> 00:18:03.356 A:middle
请查阅去年

00:18:03.356 --> 00:18:04.966 A:middle
WWDC 的主题会议

00:18:05.036 --> 00:18:05.646 A:middle
“CareKit 入门”

00:18:06.786 --> 00:18:07.856 A:middle
那么 现在我们来看看

00:18:07.856 --> 00:18:08.596 A:middle
Sample App 是什么样子的

00:18:09.156 --> 00:18:12.636 A:middle
在我的电脑里  有两个

00:18:12.636 --> 00:18:13.166 A:middle
模拟器

00:18:13.776 --> 00:18:15.456 A:middle
在我的 iPhone 模拟器上 我们装了

00:18:15.456 --> 00:18:16.226 A:middle
Sample App

00:18:17.376 --> 00:18:18.596 A:middle
目前为止 关于 Sample App

00:18:18.596 --> 00:18:20.606 A:middle
我们已经在本地创建和存储了

00:18:20.606 --> 00:18:22.406 A:middle
一个医护计划存储器对象

00:18:23.306 --> 00:18:24.956 A:middle
和一个 OCKCarePatientObject

00:18:25.086 --> 00:18:26.276 A:middle
它与这个医护计划

00:18:26.276 --> 00:18:26.876 A:middle
存储器相关联

00:18:28.056 --> 00:18:29.316 A:middle
这里有三个标签

00:18:29.316 --> 00:18:31.186 A:middle
“医护内容”标签 显示所有

00:18:31.186 --> 00:18:32.496 A:middle
属于该医护计划存储器中的活动

00:18:32.716 --> 00:18:35.116 A:middle
“见解”标签

00:18:35.426 --> 00:18:36.906 A:middle
显示所有相关见解的条目

00:18:36.906 --> 00:18:39.406 A:middle
以及“联系”项目

00:18:39.406 --> 00:18:41.096 A:middle
代表与患者的 OCKPatient 相关的

00:18:41.096 --> 00:18:42.826 A:middle
OCKContact 联系人

00:18:44.086 --> 00:18:45.736 A:middle
我们还为本次演示专门

00:18:45.736 --> 00:18:47.176 A:middle
创建了一个医护团队

00:18:47.176 --> 00:18:47.346 A:middle
App

00:18:48.086 --> 00:18:49.686 A:middle
在我的 iPad 模拟器上 我们有

00:18:49.686 --> 00:18:51.516 A:middle
医护团队 App  它显示了

00:18:51.516 --> 00:18:53.196 A:middle
医护团队成员以及

00:18:53.196 --> 00:18:54.486 A:middle
属于该医护团队照顾的

00:18:54.486 --> 00:18:55.096 A:middle
病患列表

00:18:56.096 --> 00:18:57.516 A:middle
点击一位患者

00:18:57.516 --> 00:18:58.986 A:middle
我们就可以看到他的主页

00:18:58.986 --> 00:18:59.946 A:middle
并从中看到他的活动

00:19:00.426 --> 00:19:01.386 A:middle
本次演示中 我们将

00:19:01.386 --> 00:19:02.586 A:middle
展示该病患的其中一项活动

00:19:02.586 --> 00:19:04.296 A:middle
并以此显示数据同步

00:19:04.296 --> 00:19:04.676 A:middle
的过程

00:19:06.026 --> 00:19:07.286 A:middle
目前 这两个 App 都有

00:19:07.286 --> 00:19:09.056 A:middle
本地医护计划存储器 因此

00:19:09.056 --> 00:19:10.376 A:middle
我们无法在

00:19:10.376 --> 00:19:11.216 A:middle
两个 App 之间同步数据

00:19:11.736 --> 00:19:12.896 A:middle
接下来 我们使用云桥接

00:19:12.896 --> 00:19:16.126 A:middle
把这两个 App 连接到一起

00:19:16.296 --> 00:19:17.496 A:middle
这是我的 Xcode 工作空间

00:19:17.666 --> 00:19:18.696 A:middle
这是我的两个项目：

00:19:18.806 --> 00:19:23.356 A:middle
医护团队项目和

00:19:23.596 --> 00:19:25.286 A:middle
OCKSample 项目

00:19:28.756 --> 00:19:30.446 A:middle
我们继续 首先将我们的

00:19:30.446 --> 00:19:31.806 A:middle
云桥接添加到医护团队

00:19:31.806 --> 00:19:32.276 A:middle
App 里

00:19:33.516 --> 00:19:34.786 A:middle
然后 正如 Kelsey 提过的

00:19:34.786 --> 00:19:36.196 A:middle
我们将使用 Medable 作为我们

00:19:36.196 --> 00:19:37.276 A:middle
此次演示的云桥接解决方案

00:19:38.876 --> 00:19:39.826 A:middle
所以 你们要做的第一件事情是

00:19:39.826 --> 00:19:42.616 A:middle
去 Medable 的 Github

00:19:42.676 --> 00:19:44.816 A:middle
下载或复制他们的 API

00:19:44.816 --> 00:19:46.856 A:middle
用于我们的项目 然后

00:19:46.856 --> 00:19:48.216 A:middle
将它的框架集成到我们的

00:19:48.216 --> 00:19:48.636 A:middle
项目当中

00:19:49.606 --> 00:19:50.596 A:middle
我已经下载了

00:19:50.596 --> 00:19:52.666 A:middle
并且 Medable 的 API 已经把

00:19:52.666 --> 00:19:54.076 A:middle
Medable 的框架添加到了我的项目

00:19:54.076 --> 00:19:55.776 A:middle
就在这里 这里还有我其他的框架

00:19:55.776 --> 00:19:58.026 A:middle
比如 CareKit 和

00:19:58.026 --> 00:19:58.876 A:middle
ResearchKit 等各种

00:19:58.876 --> 00:19:59.336 A:middle
框架

00:20:01.676 --> 00:20:03.656 A:middle
要使用 Medable 的 API  我们需要

00:20:03.656 --> 00:20:04.716 A:middle
添加一些他们的文件

00:20:05.526 --> 00:20:07.346 A:middle
我们可以通过进入他们的

00:20:07.346 --> 00:20:09.106 A:middle
CareKit Bridge API 文件夹 然后

00:20:09.336 --> 00:20:11.196 A:middle
将该文件夹拖放进

00:20:11.196 --> 00:20:12.786 A:middle
我们的项目 放在这里

00:20:13.306 --> 00:20:16.636 A:middle
我们来看看这个目录里有哪些

00:20:16.636 --> 00:20:16.896 A:middle
文件

00:20:17.416 --> 00:20:19.286 A:middle
它有三种类型的文件

00:20:19.446 --> 00:20:20.996 A:middle
第一种 所有我们需要的辅助文件

00:20:20.996 --> 00:20:23.426 A:middle
它们是 Medable 里相对于

00:20:23.546 --> 00:20:24.686 A:middle
CareKit 对象的对象

00:20:24.686 --> 00:20:26.046 A:middle
例如

00:20:26.046 --> 00:20:26.976 A:middle
MDCarePlanStore

00:20:27.416 --> 00:20:29.146 A:middle
MDCarePlanPatient 等等等等

00:20:30.446 --> 00:20:32.076 A:middle
第二种是 Medable

00:20:32.306 --> 00:20:32.846 A:middle
Swift Bridging Header

00:20:33.826 --> 00:20:34.836 A:middle
接下来 我们将该

00:20:34.836 --> 00:20:35.926 A:middle
桥接标头添加至我们的项目

00:20:36.786 --> 00:20:38.786 A:middle
我要在 Building 设置里

00:20:38.786 --> 00:20:39.396 A:middle
打开我的项目

00:20:39.396 --> 00:20:41.376 A:middle
我查找桥接标头

00:20:41.376 --> 00:20:45.036 A:middle
并将该桥接标头

00:20:45.036 --> 00:20:45.346 A:middle
添加到这里

00:20:48.516 --> 00:20:51.856 A:middle
完美 现在 我们已将所有

00:20:51.856 --> 00:20:53.176 A:middle
需要的文件从

00:20:53.176 --> 00:20:54.306 A:middle
Medable 添加到我们的项目

00:20:56.436 --> 00:20:57.666 A:middle
另外 我们在这份目录中

00:20:57.666 --> 00:20:59.236 A:middle
拥有的另一样东西

00:20:59.236 --> 00:20:59.936 A:middle
就是医护计划存储器类别

00:21:00.846 --> 00:21:02.106 A:middle
这个类别具备我们

00:21:02.106 --> 00:21:03.726 A:middle
需要的全部方法

00:21:03.726 --> 00:21:05.126 A:middle
有了这些办法  我们就能从 CareKit 对象中

00:21:05.126 --> 00:21:06.416 A:middle
创建对应的 Medable 副本对象

00:21:08.556 --> 00:21:10.696 A:middle
要使用 Medable 的 API  我们也

00:21:10.696 --> 00:21:12.386 A:middle
需要将几个必要的方法

00:21:12.386 --> 00:21:13.616 A:middle
添加至我们的项目中

00:21:14.316 --> 00:21:15.416 A:middle
我们将把它们添加到我们的

00:21:15.416 --> 00:21:16.986 A:middle
LocalCarePlanStore.m 文件里

00:21:18.026 --> 00:21:19.696 A:middle
我们先添加这些方法

00:21:19.696 --> 00:21:20.846 A:middle
然后我再谈谈

00:21:20.846 --> 00:21:22.156 A:middle
这些方法的用处

00:21:23.816 --> 00:21:25.696 A:middle
在我的 CarePlanStore.m 文件中

00:21:26.406 --> 00:21:27.586 A:middle
我将添加这些方法

00:21:28.466 --> 00:21:30.516 A:middle
这些方法将会模仿

00:21:30.516 --> 00:21:31.846 A:middle
任何本地医护计划

00:21:31.846 --> 00:21:32.626 A:middle
存储器方法所做的事情

00:21:32.956 --> 00:21:33.626 A:middle
例如 在我们的

00:21:33.626 --> 00:21:34.646 A:middle
CarePlanStore 里 我们有一个

00:21:34.646 --> 00:21:36.746 A:middle
活动方法 而且我们

00:21:36.746 --> 00:21:38.096 A:middle
刚添加的方法也要做

00:21:38.176 --> 00:21:39.306 A:middle
完全一样的事情 只不过

00:21:39.306 --> 00:21:42.426 A:middle
它们属于 Medable 在这个方面

00:21:42.426 --> 00:21:43.946 A:middle
所有这些方法都在添加活动

00:21:44.116 --> 00:21:45.736 A:middle
移除活动 更新

00:21:45.736 --> 00:21:46.716 A:middle
事件 等等

00:21:47.286 --> 00:21:49.986 A:middle
这样 我们就已经将

00:21:49.986 --> 00:21:51.756 A:middle
所有需要的东西都以文件

00:21:51.756 --> 00:21:53.086 A:middle
和代码的形式添加至我们的项目

00:21:54.456 --> 00:21:56.696 A:middle
要使用 Medable 的 API 我们需要

00:21:56.696 --> 00:21:57.736 A:middle
用它们创建一个账户

00:21:58.576 --> 00:21:59.866 A:middle
当你创建账户时

00:21:59.866 --> 00:22:00.996 A:middle
你有三种类型的凭证

00:21:59.866 --> 00:22:00.996 A:middle
你有三种类型的凭证

00:22:01.246 --> 00:22:04.586 A:middle
客户端密钥 基地址和

00:22:04.586 --> 00:22:05.396 A:middle
组织名称

00:22:06.226 --> 00:22:07.376 A:middle
我们要将这三种

00:22:07.376 --> 00:22:09.356 A:middle
凭证添加至我们的项目中

00:22:09.356 --> 00:22:10.826 A:middle
以将我们的项目与

00:22:10.826 --> 00:22:11.686 A:middle
Medable 上的账户勾连在一起

00:22:11.996 --> 00:22:13.376 A:middle
我们继续 来看看

00:22:13.376 --> 00:22:13.546 A:middle
要怎么做

00:22:14.726 --> 00:22:16.276 A:middle
进入你们项目的info.plist文件

00:22:16.276 --> 00:22:18.336 A:middle
创建一个字典

00:22:19.726 --> 00:22:22.186 A:middle
我们将它称作 Medable 然后

00:22:25.536 --> 00:22:27.176 A:middle
把它设置成字典

00:22:30.186 --> 00:22:31.286 A:middle
现在 在这个字典里 我们

00:22:31.286 --> 00:22:32.436 A:middle
要添加三个

00:22:32.436 --> 00:22:32.766 A:middle
键值对

00:22:32.766 --> 00:22:35.706 A:middle
第一个是 ClientKey

00:22:37.136 --> 00:22:38.836 A:middle
第二个是 BaseURL

00:22:39.366 --> 00:22:42.646 A:middle
第三个是组织名称

00:22:47.856 --> 00:22:50.216 A:middle
完美  当我们添加了这三个

00:22:50.216 --> 00:22:51.746 A:middle
凭证之后 我们应当能够

00:22:51.746 --> 00:22:53.626 A:middle
将自己的项目连接至我们

00:22:53.626 --> 00:22:54.556 A:middle
Medable 上的账户

00:22:54.616 --> 00:22:57.556 A:middle
我们同样需要对我们的

00:22:57.556 --> 00:22:58.946 A:middle
Sample App 添加

00:22:58.946 --> 00:22:59.156 A:middle
所有这些操作步骤

00:22:59.956 --> 00:23:01.226 A:middle
为了本次演示 我已经

00:22:59.956 --> 00:23:01.226 A:middle
为了本次演示 我已经

00:23:01.226 --> 00:23:02.486 A:middle
将所有步骤添加到

00:23:02.486 --> 00:23:03.436 A:middle
我们的 Sample App

00:23:04.796 --> 00:23:07.396 A:middle
所以现在 两个 App 都已经

00:23:07.516 --> 00:23:08.756 A:middle
设置好 而且

00:23:09.276 --> 00:23:10.146 A:middle
配置了云桥接

00:23:10.146 --> 00:23:10.396 A:middle
云桥接

00:23:11.326 --> 00:23:13.726 A:middle
接下来 我们要使用它们

00:23:13.936 --> 00:23:15.036 A:middle
当我们使用 Medable 的控制面板

00:23:15.036 --> 00:23:16.856 A:middle
在其中创建账户时

00:23:17.146 --> 00:23:18.586 A:middle
我们应当能够创建一个

00:23:18.586 --> 00:23:19.656 A:middle
医护团队成员的账户

00:23:20.686 --> 00:23:22.086 A:middle
我们可以通过提供

00:23:22.086 --> 00:23:24.156 A:middle
电子邮件 密码和

00:23:24.156 --> 00:23:24.676 A:middle
电话号码来实现

00:23:25.496 --> 00:23:26.576 A:middle
所以 当我们创建医护团队

00:23:26.576 --> 00:23:30.076 A:middle
成员账户时 作为交换 我们会获得

00:23:30.076 --> 00:23:31.096 A:middle
一个验证令牌

00:23:31.616 --> 00:23:33.786 A:middle
医护团队成员

00:23:33.786 --> 00:23:35.086 A:middle
需要用该验证令牌

00:23:35.086 --> 00:23:37.476 A:middle
登录自己的账户

00:23:37.696 --> 00:23:39.926 A:middle
而这些属性可以

00:23:39.926 --> 00:23:41.586 A:middle
通过用户界面提供出来

00:23:41.786 --> 00:23:43.326 A:middle
最好是使用 ResearchKit 的

00:23:43.326 --> 00:23:43.956 A:middle
登录步骤

00:23:43.956 --> 00:23:46.146 A:middle
所以 我们往下继续 再把那些内容添加

00:23:46.146 --> 00:23:46.266 A:middle
进来

00:23:46.816 --> 00:23:49.586 A:middle
我要进入我的项目 App 的

00:23:49.586 --> 00:23:50.126 A:middle
委托文件

00:23:50.636 --> 00:23:52.126 A:middle
首先我将添加所有

00:23:52.126 --> 00:23:54.696 A:middle
我可能需要的

00:23:54.696 --> 00:23:55.206 A:middle
必要属性

00:23:57.376 --> 00:23:59.126 A:middle
我在这里有一个云桥接

00:23:59.126 --> 00:24:01.306 A:middle
稍后我将

00:23:59.126 --> 00:24:01.306 A:middle
稍后我将

00:24:01.306 --> 00:24:02.456 A:middle
更详细地谈一谈它

00:24:03.206 --> 00:24:04.756 A:middle
谈谈医护团队成员的

00:24:04.756 --> 00:24:06.156 A:middle
电子邮件 密码和

00:24:06.156 --> 00:24:06.666 A:middle
验证令牌

00:24:07.236 --> 00:24:09.276 A:middle
然后我会很快地回到这些

00:24:09.276 --> 00:24:09.966 A:middle
属性

00:24:11.406 --> 00:24:13.096 A:middle
接下来 我们来添加 Medable 的

00:24:13.096 --> 00:24:13.876 A:middle
登录方法

00:24:16.276 --> 00:24:18.166 A:middle
这里是一个云桥接登录

00:24:18.166 --> 00:24:19.856 A:middle
方法 使用到了电子邮件

00:24:19.856 --> 00:24:21.386 A:middle
密码以及验证

00:24:21.386 --> 00:24:21.726 A:middle
令牌

00:24:22.286 --> 00:24:24.736 A:middle
如果这名用户成功

00:24:24.736 --> 00:24:27.566 A:middle
登录 我们就能够

00:24:27.566 --> 00:24:28.306 A:middle
新建一个病患记录

00:24:28.466 --> 00:24:29.796 A:middle
否则 该方法将返回

00:24:29.796 --> 00:24:30.116 A:middle
错误

00:24:30.606 --> 00:24:34.196 A:middle
我们假设该医护团队成员

00:24:34.196 --> 00:24:34.806 A:middle
已经登录

00:24:35.316 --> 00:24:36.756 A:middle
现在 我们应当可以从

00:24:36.756 --> 00:24:37.956 A:middle
这里新建一个病患

00:24:38.946 --> 00:24:39.676 A:middle
这些属性的

00:24:39.676 --> 00:24:40.406 A:middle
来源就在于此

00:24:40.406 --> 00:24:43.056 A:middle
为了新建一个病患 我们需要

00:24:43.056 --> 00:24:44.686 A:middle
该病患的名和姓

00:24:44.686 --> 00:24:46.456 A:middle
以及他们所有的详细信息

00:24:46.726 --> 00:24:47.616 A:middle
以及其电子邮件 ID

00:24:48.146 --> 00:24:51.306 A:middle
接下来 我们用这些属性

00:24:51.306 --> 00:24:52.466 A:middle
新建一个病患

00:24:53.146 --> 00:24:54.516 A:middle
添加名字 姓氏

00:24:54.516 --> 00:24:56.006 A:middle
以及该病患所有的

00:24:56.006 --> 00:24:56.496 A:middle
属性

00:24:58.466 --> 00:25:00.096 A:middle
该方法将进行两项操作

00:24:58.466 --> 00:25:00.096 A:middle
该方法将进行两项操作

00:25:01.136 --> 00:25:03.436 A:middle
在回调时 如果我们

00:25:03.436 --> 00:25:05.676 A:middle
未能新建病患 它

00:25:05.676 --> 00:25:06.326 A:middle
就会返回一个 Fault 值

00:25:06.956 --> 00:25:08.226 A:middle
不过 如果你成功

00:25:08.226 --> 00:25:09.986 A:middle
新建病患 那么

00:25:09.986 --> 00:25:11.196 A:middle
该回调就会返回一个桥接

00:25:12.336 --> 00:25:13.446 A:middle
现在 这里是你能

00:25:13.446 --> 00:25:14.946 A:middle
访问医护计划存储器的地方

00:25:15.686 --> 00:25:16.846 A:middle
所以 通过这一步骤

00:25:16.846 --> 00:25:18.566 A:middle
云桥接正在设置一个

00:25:18.566 --> 00:25:19.836 A:middle
本地变量

00:25:20.086 --> 00:25:21.026 A:middle
对于我们从回调

00:25:21.026 --> 00:25:22.816 A:middle
接收到的云桥接 我们

00:25:22.816 --> 00:25:24.256 A:middle
可以在 App 的

00:25:24.706 --> 00:25:25.566 A:middle
任何地方访问这个云桥接

00:25:26.546 --> 00:25:27.706 A:middle
这就是我们使用

00:25:27.706 --> 00:25:29.356 A:middle
cloudbridge.careplanstore 所能做的事

00:25:29.386 --> 00:25:30.606 A:middle
它让我们得以访问

00:25:30.606 --> 00:25:31.726 A:middle
我们所需要的医护计划存储器

00:25:32.146 --> 00:25:33.486 A:middle
我们准备替换我们的医护计划

00:25:33.486 --> 00:25:34.796 A:middle
存储器 并将通过 App 来把

00:25:34.796 --> 00:25:36.486 A:middle
cloudbridge.careplanstore 作为

00:25:36.486 --> 00:25:37.446 A:middle
默认的医护计划

00:25:37.446 --> 00:25:40.046 A:middle
存储器

00:25:40.306 --> 00:25:41.286 A:middle
这个方法当中的

00:25:41.396 --> 00:25:43.336 A:middle
第二件事情  就是把邀请令牌

00:25:43.336 --> 00:25:44.766 A:middle
发送-到我们提供给病患的

00:25:44.926 --> 00:25:45.916 A:middle
电子邮箱里

00:25:48.876 --> 00:25:50.036 A:middle
当病患收到这份

00:25:50.036 --> 00:25:53.016 A:middle
电子邮件时 他们应该能够

00:25:53.016 --> 00:25:54.276 A:middle
通过病患 App 来注册

00:25:54.276 --> 00:25:56.266 A:middle
自己的账户

00:25:56.266 --> 00:25:57.336 A:middle
他们可能会需要

00:25:57.506 --> 00:25:59.076 A:middle
发送到他们电子邮箱

00:25:59.076 --> 00:26:00.406 A:middle
的邀请令牌

00:25:59.076 --> 00:26:00.406 A:middle
的邀请令牌

00:26:00.406 --> 00:26:02.316 A:middle
来给自己

00:26:02.316 --> 00:26:02.816 A:middle
注册账户

00:26:03.706 --> 00:26:04.886 A:middle
接下来 我们在病患 App 上

00:26:04.886 --> 00:26:06.586 A:middle
注册该病患

00:26:07.136 --> 00:26:08.936 A:middle
在我的病患 App 上 我要进入

00:26:08.936 --> 00:26:11.056 A:middle
这个 App 的委托 添加

00:26:11.056 --> 00:26:12.786 A:middle
我们在病患注册所需的

00:26:12.786 --> 00:26:13.596 A:middle
全部变量

00:26:13.986 --> 00:26:15.166 A:middle
这包括名字

00:26:15.216 --> 00:26:17.206 A:middle
姓氏 电子邮件 手机号码

00:26:17.206 --> 00:26:18.636 A:middle
密码和

00:26:18.636 --> 00:26:19.406 A:middle
邀请令牌

00:26:20.176 --> 00:26:21.416 A:middle
而所有这些属性都能

00:26:21.416 --> 00:26:22.476 A:middle
通过用户界面提供

00:26:23.206 --> 00:26:25.476 A:middle
我们继续  现在我们要添加

00:26:25.476 --> 00:26:26.946 A:middle
病患注册时使用的方法

00:26:30.476 --> 00:26:32.056 A:middle
注册账户方法

00:26:32.056 --> 00:26:33.096 A:middle
需要名字 姓氏

00:26:33.096 --> 00:26:34.856 A:middle
电子邮件

00:26:34.856 --> 00:26:36.716 A:middle
手机号码 密码和

00:26:36.716 --> 00:26:37.576 A:middle
邀请令牌

00:26:37.976 --> 00:26:39.536 A:middle
而且 在回调时

00:26:39.636 --> 00:26:40.616 A:middle
也会返回云桥接

00:26:41.336 --> 00:26:42.686 A:middle
此外 这也是

00:26:42.686 --> 00:26:44.036 A:middle
医护团队成员访问的

00:26:44.036 --> 00:26:44.786 A:middle
同一个云桥接

00:26:45.116 --> 00:26:45.946 A:middle
因此 如果你使用

00:26:45.946 --> 00:26:48.466 A:middle
cloudbridge.careplanstore

00:26:48.466 --> 00:26:49.626 A:middle
医护团队成员和

00:26:49.626 --> 00:26:51.026 A:middle
病患都将能够访问

00:26:51.026 --> 00:26:52.046 A:middle
同样的医护计划存储器

00:26:53.146 --> 00:26:54.276 A:middle
请确保你将该云桥接

00:26:54.276 --> 00:26:55.336 A:middle
保存在你文件中的

00:26:55.336 --> 00:26:56.846 A:middle
某个变量里面 并将

00:26:56.846 --> 00:26:58.246 A:middle
cloudbridge.careplanstore 设置为

00:26:58.246 --> 00:26:59.696 A:middle
默认医护计划存储器

00:26:59.696 --> 00:27:02.026 A:middle
通过 App  就可以实现这一点

00:26:59.696 --> 00:27:02.026 A:middle
通过 App  就可以实现这一点

00:27:02.296 --> 00:27:03.736 A:middle
当我们进行这样的操作时 我们

00:27:03.736 --> 00:27:06.256 A:middle
已经成功使得医护团队 App

00:27:06.256 --> 00:27:07.986 A:middle
和病患 App 能够访问一个

00:27:08.086 --> 00:27:08.976 A:middle
共同的医护计划存储器

00:27:10.006 --> 00:27:12.346 A:middle
现在  在 App 里完成的

00:27:12.346 --> 00:27:13.776 A:middle
任何一项活动

00:27:13.776 --> 00:27:14.696 A:middle
或者是更新

00:27:14.696 --> 00:27:15.786 A:middle
无论是在两个 App 中的哪一个上面完成的

00:27:15.786 --> 00:27:15.976 A:middle
都应该对另一方进行思考分析

00:27:17.136 --> 00:27:18.186 A:middle
接下来 我们再来检验

00:27:18.186 --> 00:27:18.376 A:middle
一下

00:27:19.756 --> 00:27:21.796 A:middle
为了本次演示 我们已经

00:27:21.796 --> 00:27:23.826 A:middle
创建出这个 App 的不同版本

00:27:23.826 --> 00:27:25.906 A:middle
它的所有信息都相同

00:27:25.906 --> 00:27:27.146 A:middle
不过我们已经添加了

00:27:27.146 --> 00:27:28.356 A:middle
登录凭证和

00:27:28.356 --> 00:27:30.026 A:middle
组织名称到这些

00:27:30.026 --> 00:27:30.276 A:middle
App 里面

00:27:31.286 --> 00:27:32.596 A:middle
我的 iPhone 模拟器上有

00:27:32.596 --> 00:27:33.346 A:middle
Sample App

00:27:33.896 --> 00:27:35.546 A:middle
我的 iPhone 模拟器上

00:27:35.546 --> 00:27:36.886 A:middle
还有医护团队 App

00:27:37.556 --> 00:27:39.556 A:middle
Sample App 是同样的 App

00:27:39.556 --> 00:27:40.876 A:middle
它需要所有的

00:27:40.876 --> 00:27:41.606 A:middle
登录凭证

00:27:41.606 --> 00:27:43.266 A:middle
Care Team App 也是同样

00:27:43.266 --> 00:27:44.506 A:middle
它也要求所有的

00:27:44.506 --> 00:27:45.256 A:middle
登录凭证

00:27:45.986 --> 00:27:47.826 A:middle
接下来 我们来完成

00:27:47.826 --> 00:27:48.916 A:middle
今天的疼痛活动

00:27:49.516 --> 00:27:52.936 A:middle
在疼痛活动中 我感觉

00:27:52.936 --> 00:27:53.956 A:middle
疼痛程度大约为七的时候

00:27:53.956 --> 00:27:55.736 A:middle
然后我就点击完成

00:27:55.736 --> 00:27:58.566 A:middle
而无论何时

00:27:58.566 --> 00:28:00.116 A:middle
这个活动都会将数据同步至

00:27:58.566 --> 00:28:00.116 A:middle
这个活动都会将数据同步至

00:28:00.116 --> 00:28:01.976 A:middle
医护团队的

00:28:02.156 --> 00:28:02.976 A:middle
医护计划活动

00:28:03.516 --> 00:28:07.946 A:middle
[掌声]

00:28:08.446 --> 00:28:09.776 A:middle
现在在白天里  无论何时

00:28:09.776 --> 00:28:11.806 A:middle
只要病患感觉他们的

00:28:11.806 --> 00:28:13.316 A:middle
活动有所改变 无论在什么时候他们都能

00:28:13.316 --> 00:28:14.476 A:middle
更新活动

00:28:14.476 --> 00:28:16.196 A:middle
并会反映到

00:28:16.196 --> 00:28:17.016 A:middle
医护团队这边

00:28:17.356 --> 00:28:19.206 A:middle
而且所需时间是

00:28:19.856 --> 00:28:21.266 A:middle
可变的 你可以

00:28:21.266 --> 00:28:21.786 A:middle
通过 API 设置

00:28:22.126 --> 00:28:23.536 A:middle
如果基于你的

00:28:23.536 --> 00:28:24.716 A:middle
用例 如果你想调整

00:28:24.716 --> 00:28:27.166 A:middle
更新的频率 你

00:28:27.166 --> 00:28:29.316 A:middle
可以更改间隔时间 要么

00:28:29.316 --> 00:28:31.286 A:middle
增加 要么减少

00:28:32.896 --> 00:28:34.566 A:middle
有了这个数据的同步 大家在本次

00:28:34.566 --> 00:28:37.546 A:middle
演示中已经看到 我们使用了

00:28:37.546 --> 00:28:38.866 A:middle
两个具有本地医护计划存储器的

00:28:38.866 --> 00:28:41.086 A:middle
应用  并创建了一个共同的

00:28:41.086 --> 00:28:43.086 A:middle
云桥接  并且使得两个 App

00:28:43.086 --> 00:28:44.456 A:middle
都能访问这个共同的医护

00:28:44.456 --> 00:28:47.256 A:middle
计划存储器

00:28:47.256 --> 00:28:47.636 A:middle
并且共享数据

00:28:48.196 --> 00:28:50.256 A:middle
我们认为像这样的

00:28:50.256 --> 00:28:53.006 A:middle
功能是大家迫切

00:28:53.006 --> 00:28:53.436 A:middle
需要的

00:28:54.836 --> 00:28:56.526 A:middle
随着所有这些资源

00:28:56.526 --> 00:28:59.126 A:middle
的公开 我们全体人员真是迫不及待地

00:28:59.126 --> 00:29:00.726 A:middle
希望每天都能帮助数以千计的

00:28:59.126 --> 00:29:00.726 A:middle
希望每天都能帮助数以千计的

00:29:00.726 --> 00:29:02.696 A:middle
人们

00:29:02.936 --> 00:29:04.246 A:middle
说到这里 我想请

00:29:04.246 --> 00:29:05.346 A:middle
Kelsey 回到台上

00:29:05.346 --> 00:29:06.286 A:middle
继续本次会议

00:29:06.546 --> 00:29:06.836 A:middle
谢谢大家

00:29:08.516 --> 00:29:12.356 A:middle
[掌声]

00:29:12.856 --> 00:29:14.026 A:middle
&gt;&gt; 感谢 Akshay

00:29:14.026 --> 00:29:15.156 A:middle
演示得非常精彩

00:29:16.286 --> 00:29:17.876 A:middle
大家刚刚了解到了

00:29:18.036 --> 00:29:19.626 A:middle
创建 CareKit App 的过程

00:29:19.986 --> 00:29:21.086 A:middle
还有调用 Bridge API 的方法都

00:29:21.086 --> 00:29:22.886 A:middle
相当简单直接

00:29:24.126 --> 00:29:25.976 A:middle
大家亲眼见到了 App 是如何

00:29:26.056 --> 00:29:27.956 A:middle
与云端往来同步数据

00:29:28.696 --> 00:29:30.046 A:middle
以及怎样在这些

00:29:30.046 --> 00:29:31.716 A:middle
云解决方案里

00:29:32.056 --> 00:29:33.246 A:middle
在你的 Xcode 应用中

00:29:33.246 --> 00:29:33.906 A:middle
直接使用那些桥接

00:29:34.406 --> 00:29:37.726 A:middle
所以在整场会议里

00:29:37.896 --> 00:29:39.326 A:middle
我们介绍了

00:29:39.326 --> 00:29:41.046 A:middle
CareKit 框架里新增的

00:29:41.046 --> 00:29:41.506 A:middle
Bridge API

00:29:42.716 --> 00:29:43.966 A:middle
我们讨论了

00:29:43.966 --> 00:29:44.566 A:middle
它的运行架构

00:29:45.716 --> 00:29:47.306 A:middle
此外 通过观看现场演示

00:29:47.306 --> 00:29:48.916 A:middle
大家还了解了如何

00:29:48.916 --> 00:29:49.526 A:middle
在代码中使用它

00:29:50.846 --> 00:29:51.976 A:middle
那么  大家能用这个新特性

00:29:51.976 --> 00:29:52.376 A:middle
做些什么呢

00:29:54.876 --> 00:29:56.576 A:middle
Bridge API 不仅

00:29:56.576 --> 00:29:57.736 A:middle
与每个现有的

00:29:57.736 --> 00:29:59.806 A:middle
CareKit 模块进行集成

00:29:59.806 --> 00:30:01.976 A:middle
它还具有模块化属性  易于扩展

00:29:59.806 --> 00:30:01.976 A:middle
它还具有模块化属性  易于扩展

00:30:01.976 --> 00:30:03.456 A:middle
来服务于开发者社区提供的

00:30:03.456 --> 00:30:05.086 A:middle
新想法和贡献

00:30:05.086 --> 00:30:05.976 A:middle
就像在座的各位

00:30:06.566 --> 00:30:08.606 A:middle
现在 既然我们都对

00:30:08.606 --> 00:30:10.076 A:middle
Bridge API 有了更多的了解

00:30:10.076 --> 00:30:12.676 A:middle
我们很有必要

00:30:12.676 --> 00:30:14.286 A:middle
指明和确认

00:30:14.286 --> 00:30:16.946 A:middle
该工具能够有多么强大

00:30:17.196 --> 00:30:18.796 A:middle
它向开发者 医护团队和

00:30:18.836 --> 00:30:21.076 A:middle
医疗机构

00:30:21.076 --> 00:30:22.936 A:middle
敞开大门

00:30:22.936 --> 00:30:24.376 A:middle
为他们提供技术 让他们

00:30:24.376 --> 00:30:25.836 A:middle
以一种更私人和更投入的方式

00:30:25.836 --> 00:30:27.376 A:middle
照顾病人

00:30:28.756 --> 00:30:29.646 A:middle
那我想表达的是什么呢

00:30:31.146 --> 00:30:32.776 A:middle
我想说 能够看到 CareKit

00:30:32.776 --> 00:30:34.286 A:middle
和它现有的每个模块

00:30:34.546 --> 00:30:35.676 A:middle
帮助人们提升

00:30:35.676 --> 00:30:37.026 A:middle
病患家庭医护体验 实在是了不起

00:30:37.476 --> 00:30:39.246 A:middle
但是 如果我们能够

00:30:39.246 --> 00:30:40.586 A:middle
让医护团队参与进来  那就更好了

00:30:42.136 --> 00:30:43.876 A:middle
为了改进病患医护的

00:30:43.876 --> 00:30:45.736 A:middle
过程 我们关注这个 API

00:30:46.356 --> 00:30:48.136 A:middle
并用它来帮助医护团队更好地

00:30:48.136 --> 00:30:49.486 A:middle
理解病人的

00:30:49.486 --> 00:30:51.616 A:middle
需求 从而让他们的医护水平

00:30:51.616 --> 00:30:52.216 A:middle
进一步提高

00:30:52.746 --> 00:30:55.066 A:middle
这能够给病患者

00:30:55.066 --> 00:30:56.006 A:middle
带来一种安心感

00:30:56.006 --> 00:30:58.116 A:middle
并且能够鼓励他们

00:30:58.256 --> 00:30:59.656 A:middle
更加投入地

00:30:59.656 --> 00:31:00.476 A:middle
进行个人医护

00:30:59.656 --> 00:31:00.476 A:middle
进行个人医护

00:31:01.006 --> 00:31:03.746 A:middle
这些都是很强大的工具

00:31:03.746 --> 00:31:04.666 A:middle
现在它们就存在于你的

00:31:04.666 --> 00:31:05.336 A:middle
指尖之下

00:31:05.816 --> 00:31:07.626 A:middle
接下来会发生什么  这取决于

00:31:07.626 --> 00:31:07.866 A:middle
在座的各位

00:31:09.786 --> 00:31:10.836 A:middle
无论是扩展你们

00:31:10.836 --> 00:31:12.746 A:middle
现有的应用 还是

00:31:12.746 --> 00:31:14.726 A:middle
从零开始

00:31:14.726 --> 00:31:16.416 A:middle
我们相信 CareKit 和

00:31:16.416 --> 00:31:18.516 A:middle
Bridge API  再加上你们这样的

00:31:18.516 --> 00:31:20.606 A:middle
全体开发者 是有能力

00:31:20.606 --> 00:31:22.126 A:middle
提升病患-

00:31:22.126 --> 00:31:24.306 A:middle
家庭医护体验的  并且缩小

00:31:24.306 --> 00:31:25.736 A:middle
现存的

00:31:26.496 --> 00:31:26.616 A:middle
病患医护差距

00:31:27.806 --> 00:31:29.056 A:middle
因此 有了这个新的功能特性

00:31:29.056 --> 00:31:30.816 A:middle
我们着实期待

00:31:30.816 --> 00:31:32.816 A:middle
你们所有人都能利用

00:31:32.816 --> 00:31:34.476 A:middle
现有的第三方后端

00:31:34.476 --> 00:31:37.556 A:middle
云解决方案  或是创建你们

00:31:37.556 --> 00:31:37.816 A:middle
自己的云解决方案

00:31:38.976 --> 00:31:40.856 A:middle
在创建过程中 要考虑一下

00:31:40.856 --> 00:31:42.026 A:middle
数据将与谁同步

00:31:42.756 --> 00:31:44.236 A:middle
而与之相应的医护团队 App

00:31:44.236 --> 00:31:45.506 A:middle
可能是什么样的

00:31:47.336 --> 00:31:49.756 A:middle
从另一方面来看  Bridge API

00:31:49.756 --> 00:31:51.336 A:middle
在创建医护团队 App 时

00:31:51.336 --> 00:31:51.926 A:middle
也有同样强大的功能

00:31:52.246 --> 00:31:53.836 A:middle
所以 我们期望所有人来

00:31:53.836 --> 00:31:55.446 A:middle
帮助扩建这些医护团队解决方案

00:31:55.686 --> 00:31:58.806 A:middle
通过医护团队 App 和

00:32:00.576 --> 00:32:00.876 A:middle
控制面板的形式

00:32:01.176 --> 00:32:03.186 A:middle
因为 CareKit 是开放资源的 所以

00:32:03.186 --> 00:32:04.806 A:middle
当你创建这些解决方案

00:32:04.956 --> 00:32:06.106 A:middle
完善你已有的应用程序时

00:32:06.106 --> 00:32:08.276 A:middle
请将这方面的工作情况

00:32:08.276 --> 00:32:10.526 A:middle
转告给我们 这样 我们作为一个团队

00:32:10.526 --> 00:32:11.986 A:middle
便可以继续演化和发展

00:32:11.986 --> 00:32:12.776 A:middle
CareKit 框架

00:32:13.766 --> 00:32:15.126 A:middle
更多关于

00:32:15.126 --> 00:32:17.106 A:middle
CareKit 的信息以及 Medable 和

00:32:17.346 --> 00:32:19.106 A:middle
CloudMine 上的 Bridge API 解决方案

00:32:19.106 --> 00:32:21.056 A:middle
都能在目前提供的

00:32:21.056 --> 00:32:21.746 A:middle
链接里找到

00:32:24.316 --> 00:32:25.416 A:middle
如果大家有兴趣

00:32:25.416 --> 00:32:26.846 A:middle
想进一步了解 CareKit 或

00:32:26.846 --> 00:32:28.166 A:middle
与之相关的技术

00:32:28.426 --> 00:32:29.476 A:middle
请观看以下会议的

00:32:29.476 --> 00:32:30.246 A:middle
任何一场

00:32:31.646 --> 00:32:32.826 A:middle
感谢大家参加本次

00:32:32.826 --> 00:32:34.016 A:middle
关于 CareKit Bridge API 的

00:32:34.016 --> 00:32:34.566 A:middle
会议

00:32:34.656 --> 00:32:36.286 A:middle
我们很期待

00:32:36.286 --> 00:32:38.186 A:middle
看到大家如何应用

00:32:38.186 --> 00:32:38.906 A:middle
这个新技术
