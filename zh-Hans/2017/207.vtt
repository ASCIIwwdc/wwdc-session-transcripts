WEBVTT

00:00:17.551 --> 00:00:19.987 align:middle line:10%
<c.magenta>（Cocoa新特性）</c>

00:00:24.424 --> 00:00:25.292 align:middle line:90%,end
<c.magenta>谢谢</c>

00:00:26.193 --> 00:00:27.995 align:middle line:90%,end
<c.magenta>谢谢 早上好 欢迎大家</c>

00:00:28.061 --> 00:00:30.631 align:middle line:90%,end
<c.magenta>我叫阿里·欧泽</c>
<c.magenta>这是我的同事 达芙妮</c>

00:00:30.697 --> 00:00:33.200 align:middle line:90%,end
<c.magenta>我们将聊聊在这一年中</c>
<c.magenta>Cocoa的新特性</c>

00:00:34.368 --> 00:00:37.804 align:middle line:90%,end
<c.magenta>我们今天菜单上的开胃菜</c>
<c.magenta>是API的改进</c>

00:00:38.038 --> 00:00:40.674 align:middle line:90%,end
<c.magenta>然后是两个主菜</c>
<c.magenta>AppKit和Foundation</c>

00:00:41.542 --> 00:00:42.576 align:middle line:90%,end
<c.magenta>我们开始吧</c>

00:00:43.710 --> 00:00:45.245 align:middle line:90%,end
<c.magenta>在API改进方面</c>

00:00:45.946 --> 00:00:49.049 align:middle line:90%,end
<c.magenta>在过去几年里 我们已经讲了</c>
<c.magenta>我们很努力来改进</c>

00:00:49.149 --> 00:00:51.051 align:middle line:90%,end
<c.magenta>框架的API外接</c>

00:00:51.485 --> 00:00:56.156 align:middle line:90%,end
<c.magenta>属性 为空性 泛型</c>
<c.magenta>Swift 3 命名指南 去年</c>

00:00:56.490 --> 00:00:59.326 align:middle line:90%,end
<c.magenta>最近 又有字符串枚举和嵌套类型</c>

00:00:59.760 --> 00:01:02.229 align:middle line:90%,end
<c.magenta>这次 我将聊一下后两者</c>

00:00:59.760 --> 00:01:02.229 align:middle line:90%,end
<c.magenta>这次 我将聊一下后两者</c>

00:01:02.729 --> 00:01:05.566 align:middle line:90%,end
<c.magenta>我会举一个涉及这两者的例子</c>

00:01:06.033 --> 00:01:09.203 align:middle line:90%,end
<c.magenta>在这个我们关注的场景中</c>
<c.magenta>过去一年中有很多</c>

00:01:09.269 --> 00:01:12.005 align:middle line:90%,end
<c.magenta>你会在我们很多的API中看到它</c>

00:01:14.007 --> 00:01:18.212 align:middle line:90%,end
<c.magenta>这是NSSharingService</c>
<c.magenta>它来自Swift 3</c>

00:01:18.745 --> 00:01:20.247 align:middle line:90%,end
<c.magenta>我们有很多全局符号</c>

00:01:20.314 --> 00:01:22.683 align:middle line:90%,end
<c.magenta>如你这里所见</c>
<c.magenta>碰到S字符串</c>

00:01:22.950 --> 00:01:25.686 align:middle line:90%,end
<c.magenta>然后我们有方法</c>
<c.magenta>比如在共享服务中的初始化方法</c>

00:01:26.253 --> 00:01:28.255 align:middle line:10%
<c.magenta>它以一个字符串类型变量</c>
<c.magenta>作为传递参数</c>

00:01:29.089 --> 00:01:32.359 align:middle line:10%
<c.magenta>现在Swift 4中</c>
<c.magenta>我们引入了一种新类型</c>

00:01:32.726 --> 00:01:36.029 align:middle line:90%,end
<c.magenta>这个类型是嵌套</c>
<c.magenta>在NSSharingService里面的</c>

00:01:36.663 --> 00:01:38.765 align:middle line:90%,end
<c.magenta>初始化方法现以</c>
<c.magenta>这个类型作为传递参数</c>

00:01:38.832 --> 00:01:40.267 align:middle line:90%,end
<c.magenta>NSSharingService.Name</c>

00:01:40.868 --> 00:01:43.871 align:middle line:90%,end
<c.magenta>当然 这个值</c>
<c.magenta>你前面看到的不同的值</c>

00:01:43.937 --> 00:01:46.340 align:middle line:10%
<c.magenta>现在被用来声明</c>
<c.magenta>这个NSSharingService.Name</c>

00:01:46.640 --> 00:01:49.910 align:middle line:10%
<c.magenta>它们的名字短了很多</c>
<c.magenta>因为它们不再在全局上下文中了</c>

00:01:50.310 --> 00:01:52.779 align:middle line:90%,end
<c.magenta>有了它 代码变简单了很多</c>

00:01:53.247 --> 00:01:56.817 align:middle line:90%,end
<c.magenta>不同于在Swift 3</c>
<c.magenta>你现可在Swift 4中这样输入</c>

00:01:57.117 --> 00:02:00.287 align:middle line:90%,end
<c.magenta>当然 当你码代码的时候</c>
<c.magenta>你得到了一系列更加清晰的自动补全</c>

00:01:57.117 --> 00:02:00.287 align:middle line:90%,end
<c.magenta>当然 当你码代码的时候</c>
<c.magenta>你得到了一系列更加清晰的自动补全</c>

00:02:00.821 --> 00:02:04.091 align:middle line:10%
<c.magenta>就是这样 当你输入点号</c>
<c.magenta>你就准确地得到了这些值</c>

00:02:04.157 --> 00:02:05.859 align:middle line:10%
<c.magenta>对于这个初始化方法是合理的</c>

00:02:05.926 --> 00:02:08.362 align:middle line:10%
<c.magenta>而不是在框架中的所有字符串</c>

00:02:09.429 --> 00:02:13.033 align:middle line:90%,end
<c.magenta>对于这个改动导致的源代码兼容性</c>
<c.magenta>你可能会有疑惑</c>

00:02:13.100 --> 00:02:14.434 align:middle line:90%,end
<c.magenta>（代码兼容性</c>
<c.magenta>OBJECTIVE-C）</c>

00:02:14.501 --> 00:02:16.270 align:middle line:90%,end
<c.magenta>在Objective-C中</c>
<c.magenta>没有嵌套</c>

00:02:16.603 --> 00:02:18.939 align:middle line:90%,end
<c.magenta>这只是Swift的东西</c>
<c.magenta>所以是没有影响的</c>

00:02:19.106 --> 00:02:22.409 align:middle line:90%,end
<c.magenta>通过你这里看到的类型定义</c>
<c.magenta>来实现字符串枚举</c>

00:02:22.643 --> 00:02:24.311 align:middle line:90%,end
<c.magenta>这是完全代码兼容的</c>

00:02:24.378 --> 00:02:26.613 align:middle line:90%,end
<c.magenta>对于Objective-C</c>

00:02:27.347 --> 00:02:31.818 align:middle line:90%,end
<c.magenta>在Swift中</c>
<c.magenta>Swift 3名字保持不变</c>

00:02:32.119 --> 00:02:33.921 align:middle line:90%,end
<c.magenta>所以你的代码是兼容的</c>

00:02:34.321 --> 00:02:35.956 align:middle line:90%,end
<c.magenta>Swift 4有一个全新的名字</c>

00:02:36.023 --> 00:02:39.293 align:middle line:90%,end
<c.magenta>老名字不再存在</c>
<c.magenta>所以Swift 4是不兼容的</c>

00:02:39.826 --> 00:02:41.695 align:middle line:10%
<c.magenta>但是 我们有一个迁移器</c>

00:02:42.796 --> 00:02:45.866 align:middle line:10%
<c.magenta>转移到Swift 4</c>
<c.magenta>所以你可以选择何时转移</c>

00:02:46.200 --> 00:02:47.668 align:middle line:10%
<c.magenta>转移你的代码</c>

00:02:48.836 --> 00:02:49.703 align:middle line:90%,end
<c.magenta>就是这个</c>

00:02:49.803 --> 00:02:51.505 align:middle line:90%,end
<c.magenta>这就是API改进</c>

00:02:51.572 --> 00:02:54.608 align:middle line:90%,end
<c.magenta>你会看到我们很多API</c>
<c.magenta>都有了这些变化</c>

00:02:55.843 --> 00:02:57.978 align:middle line:90%,end
<c.magenta>接下来</c>
<c.magenta>我会深入讲一下AppKit</c>

00:02:58.078 --> 00:03:01.682 align:middle line:90%,end
<c.magenta>我会从去年秋季引入的</c>
<c.magenta>这一大功能讲起</c>

00:02:58.078 --> 00:03:01.682 align:middle line:90%,end
<c.magenta>我会从去年秋季引入的</c>
<c.magenta>这一大功能讲起</c>

00:03:01.748 --> 00:03:03.617 align:middle line:90%,end
<c.magenta>当然 这就是触控条</c>

00:03:06.787 --> 00:03:08.188 align:middle line:90%,end
<c.magenta>触控条…</c>

00:03:09.089 --> 00:03:09.923 align:middle line:90%,end
<c.magenta>所以…</c>

00:03:12.259 --> 00:03:13.694 align:middle line:90%,end
<c.magenta>正如你们中很多人注意到的那样</c>

00:03:13.760 --> 00:03:17.865 align:middle line:90%,end
<c.magenta>触控条是一个输入设备</c>
<c.magenta>用来代替键盘上的顶部一行键</c>

00:03:18.131 --> 00:03:21.668 align:middle line:90%,end
<c.magenta>它为系统和默认提供了控制</c>

00:03:21.735 --> 00:03:23.804 align:middle line:90%,end
<c.magenta>默认地 活动应用</c>

00:03:24.371 --> 00:03:28.275 align:middle line:90%,end
<c.magenta>作为一个多点触控输入设备</c>
<c.magenta>和一个漂亮的视网膜显示</c>

00:03:28.542 --> 00:03:32.045 align:middle line:90%,end
<c.magenta>触控条提供了丰富交互</c>
<c.magenta>和动态的内容</c>

00:03:33.247 --> 00:03:36.483 align:middle line:90%,end
<c.magenta>这些是作为系统一部分</c>

00:03:36.717 --> 00:03:38.585 align:middle line:90%,end
<c.magenta>以及系统应用一部分的触控条</c>

00:03:38.652 --> 00:03:41.255 align:middle line:90%,end
<c.magenta>如你所见</c>
<c.magenta>各种各样丰富内容</c>

00:03:41.321 --> 00:03:43.657 align:middle line:90%,end
<c.magenta>和这些控制中的交互模型</c>

00:03:43.991 --> 00:03:46.894 align:middle line:90%,end
<c.magenta>关于触控条</c>
<c.magenta>很重要的一点是</c>

00:03:47.427 --> 00:03:50.964 align:middle line:90%,end
<c.magenta>尽管它是漂亮的显示器</c>
<c.magenta>触控条也是输入设备</c>

00:03:51.031 --> 00:03:52.699 align:middle line:90%,end
<c.magenta>这是它存在的重要目的</c>

00:03:52.766 --> 00:03:54.868 align:middle line:90%,end
<c.magenta>它不适合用来显示</c>

00:03:54.935 --> 00:03:57.538 align:middle line:90%,end
<c.magenta>比如股票 代码</c>
<c.magenta>通知消息等等</c>

00:03:57.671 --> 00:04:01.375 align:middle line:90%,end
<c.magenta>所以在你的应用中</c>
<c.magenta>将它当作键盘的一个延伸</c>

00:03:57.671 --> 00:04:01.375 align:middle line:90%,end
<c.magenta>所以在你的应用中</c>
<c.magenta>将它当作键盘的一个延伸</c>

00:04:02.109 --> 00:04:04.978 align:middle line:90%,end
<c.magenta>我将强调一些特性</c>
<c.magenta>使得触控条</c>

00:04:05.045 --> 00:04:07.781 align:middle line:90%,end
<c.magenta>成为支持你应用的好功能</c>

00:04:09.816 --> 00:04:11.718 align:middle line:90%,end
<c.magenta>首先 触控条</c>
<c.magenta>是上下文敏感的</c>

00:04:11.818 --> 00:04:14.788 align:middle line:90%,end
<c.magenta>意味着它容易适应</c>
<c.magenta>任何用户在做的事情</c>

00:04:15.155 --> 00:04:16.957 align:middle line:90%,end
<c.magenta>举个简单的例子</c>

00:04:17.156 --> 00:04:18.725 align:middle line:90%,end
<c.magenta>你在TextEdit中打字</c>

00:04:19.026 --> 00:04:21.894 align:middle line:90%,end
<c.magenta>当你打字时</c>
<c.magenta>触控条默认显示</c>

00:04:21.995 --> 00:04:24.965 align:middle line:10%
<c.magenta>用户输入任意内容的自动补全</c>

00:04:25.299 --> 00:04:28.435 align:middle line:10%
<c.magenta>当你选取了文本</c>
<c.magenta>触控条的显示变成</c>

00:04:28.502 --> 00:04:30.704 align:middle line:10%
<c.magenta>文字格式控制 如你这里所见</c>

00:04:30.771 --> 00:04:32.773 align:middle line:10%
<c.magenta>颜色 加粗 斜体等等</c>

00:04:33.607 --> 00:04:37.144 align:middle line:10%
<c.magenta>现在 你在输入邮件消息的收件人</c>

00:04:37.578 --> 00:04:39.913 align:middle line:10%
<c.magenta>你可以看到</c>
<c.magenta>触控条自动补全</c>

00:04:40.514 --> 00:04:42.216 align:middle line:10%
<c.magenta>给你电子邮箱地址</c>

00:04:42.282 --> 00:04:43.951 align:middle line:10%
<c.magenta>事实上 邮件是在用预测</c>

00:04:44.384 --> 00:04:47.521 align:middle line:10%
<c.magenta>地址来预测你可能想要输入的地址</c>

00:04:48.322 --> 00:04:51.191 align:middle line:10%
<c.magenta>这里 当你输入邮件的主题行时</c>

00:04:51.258 --> 00:04:52.492 align:middle line:10%
<c.magenta>你得到快速输入</c>

00:04:52.626 --> 00:04:55.729 align:middle line:10%
<c.magenta>但是在触控条的最左边</c>
<c.magenta>你也得到了发送按钮</c>

00:04:55.796 --> 00:04:57.064 align:middle line:10%
<c.magenta>因为你在邮件中</c>

00:04:57.164 --> 00:05:00.033 align:middle line:10%
<c.magenta>因此触控条的</c>
<c.magenta>上下文敏感性有几种方式</c>

00:04:57.164 --> 00:05:00.033 align:middle line:10%
<c.magenta>因此触控条的</c>
<c.magenta>上下文敏感性有几种方式</c>

00:05:00.100 --> 00:05:01.869 align:middle line:10%
<c.magenta>为此有很多例子</c>

00:05:02.736 --> 00:05:05.272 align:middle line:90%,end
<c.magenta>第二 触控条是可定制的</c>

00:05:05.339 --> 00:05:09.109 align:middle line:90%,end
<c.magenta>这使得用户可以安装</c>
<c.magenta>他们觉得合理的方式排列内容</c>

00:05:09.176 --> 00:05:11.879 align:middle line:90%,end
<c.magenta>所以用户可以定制默认的控制条</c>

00:05:12.613 --> 00:05:13.547 align:middle line:90%,end
<c.magenta>比你所见</c>

00:05:13.614 --> 00:05:16.116 align:middle line:90%,end
<c.magenta>他们可以选择使用一个延伸的控制条</c>

00:05:16.216 --> 00:05:19.052 align:middle line:90%,end
<c.magenta>这样他们可以定制各种不同的方式</c>

00:05:19.453 --> 00:05:23.457 align:middle line:90%,end
<c.magenta>他们也可以选择默认功能键</c>

00:05:23.991 --> 00:05:25.826 align:middle line:90%,end
<c.magenta>对于他们选择的特殊应用</c>

00:05:26.927 --> 00:05:29.263 align:middle line:90%,end
<c.magenta>另外 用户可以定制应用程序栏</c>

00:05:29.630 --> 00:05:31.431 align:middle line:90%,end
<c.magenta>对于提供定制的应用</c>

00:05:31.698 --> 00:05:33.534 align:middle line:90%,end
<c.magenta>比如 我们在一个计算器中</c>

00:05:33.600 --> 00:05:36.770 align:middle line:90%,end
<c.magenta>你可以在视图菜单中选择定制工具栏</c>

00:05:38.071 --> 00:05:39.840 align:middle line:10%
<c.magenta>会让你进入定制模式</c>

00:05:39.907 --> 00:05:42.342 align:middle line:10%
<c.magenta>你可以看到触控条中的条目</c>

00:05:42.409 --> 00:05:44.811 align:middle line:10%
<c.magenta>抖动表示待定制</c>

00:05:44.878 --> 00:05:46.213 align:middle line:10%
<c.magenta>让我放大一些</c>

00:05:46.580 --> 00:05:50.117 align:middle line:90%,end
<c.magenta>你可以将全部条目拖到触控条</c>

00:05:50.184 --> 00:05:52.719 align:middle line:90%,end
<c.magenta>现在 注意定制化是一个可选的功能</c>

00:05:52.786 --> 00:05:54.388 align:middle line:90%,end
<c.magenta>它就像NSToolbar</c>

00:05:56.056 --> 00:05:58.258 align:middle line:90%,end
<c.magenta>现在用户期待你的应用中有该功能</c>

00:05:58.525 --> 00:06:01.695 align:middle line:90%,end
<c.magenta>所以如果这是合理的话</c>
<c.magenta>我们鼓励你实现它</c>

00:05:58.525 --> 00:06:01.695 align:middle line:90%,end
<c.magenta>所以如果这是合理的话</c>
<c.magenta>我们鼓励你实现它</c>

00:06:01.762 --> 00:06:04.798 align:middle line:90%,end
<c.magenta>比如 如果你在触控条中</c>
<c.magenta>有多个命令要显示</c>

00:06:04.865 --> 00:06:06.500 align:middle line:90%,end
<c.magenta>或者你只是想让用户有这个能力</c>

00:06:06.567 --> 00:06:08.435 align:middle line:90%,end
<c.magenta>在触控条中排列默认条目</c>

00:06:09.336 --> 00:06:11.872 align:middle line:90%,end
<c.magenta>我想强调的最后一个触控条功能</c>

00:06:12.206 --> 00:06:16.210 align:middle line:90%,end
<c.magenta>是它能提供内容的无障碍访问</c>

00:06:16.643 --> 00:06:20.147 align:middle line:90%,end
<c.magenta>你可以重复利用触控条的存在</c>

00:06:20.214 --> 00:06:22.449 align:middle line:90%,end
<c.magenta>来隐藏屏幕中的控制</c>
<c.magenta>以减少杂乱</c>

00:06:23.617 --> 00:06:25.085 align:middle line:90%,end
<c.magenta>比如 这是Keynote</c>

00:06:25.152 --> 00:06:27.387 align:middle line:10%
<c.magenta>实际上 这是我们用来演讲的应用</c>

00:06:27.754 --> 00:06:29.656 align:middle line:10%
<c.magenta>这是在演讲模式中的Keynote</c>

00:06:29.790 --> 00:06:31.625 align:middle line:10%
<c.magenta>你可以看到在演讲模式中</c>

00:06:31.692 --> 00:06:35.095 align:middle line:10%
<c.magenta>屏幕上是没有控制按钮的</c>
<c.magenta>但是触控条仍然给出了控制按钮</c>

00:06:35.162 --> 00:06:37.097 align:middle line:10%
<c.magenta>使得我可以播放这些幻灯片</c>

00:06:37.164 --> 00:06:39.132 align:middle line:10%
<c.magenta>到达任意我想要的一张幻灯片</c>

00:06:39.399 --> 00:06:41.902 align:middle line:10%
<c.magenta>另一个例子是在全屏模式下的</c>
<c.magenta>QuickTime</c>

00:06:41.969 --> 00:06:44.838 align:middle line:10%
<c.magenta>多媒体控制按钮从主屏幕中淡出了</c>

00:06:44.905 --> 00:06:47.207 align:middle line:10%
<c.magenta>但是你仍然可以在触控条上展示它们</c>

00:06:48.976 --> 00:06:51.378 align:middle line:90%,end
<c.magenta>我们做了一些重要的</c>
<c.magenta>macOS High Sierra中的</c>

00:06:51.445 --> 00:06:54.781 align:middle line:90%,end
<c.magenta>触控条的功能性</c>
<c.magenta>和NSTouchBar API的更新</c>

00:06:55.048 --> 00:06:57.084 align:middle line:90%,end
<c.magenta>我想强调其中的一部分</c>

00:06:57.918 --> 00:06:59.786 align:middle line:90%,end
<c.magenta>我们从颜色选择器讲起</c>

00:06:59.853 --> 00:07:00.921 align:middle line:90%,end
<c.magenta>（触控条颜色选择器）</c>

00:06:59.853 --> 00:07:00.921 align:middle line:90%,end
<c.magenta>（触控条颜色选择器）</c>

00:07:00.988 --> 00:07:05.158 align:middle line:90%,end
<c.magenta>你可能注意到了macOS Sierra中</c>
<c.magenta>的触控条颜色选择器</c>

00:07:05.225 --> 00:07:07.361 align:middle line:90%,end
<c.magenta>我们有两种颜色选择器模式</c>

00:07:07.427 --> 00:07:09.630 align:middle line:90%,end
<c.magenta>简单模式和HSB模式</c>

00:07:10.063 --> 00:07:11.598 align:middle line:90%,end
<c.magenta>我们现在增加一种模式选择器</c>

00:07:13.267 --> 00:07:15.536 align:middle line:90%,end
<c.magenta>如你所见 有四种新增的模式</c>

00:07:15.869 --> 00:07:20.908 align:middle line:90%,end
<c.magenta>灰度模式 RGB模式</c>
<c.magenta>CMYK模式和Swatch模式</c>

00:07:21.341 --> 00:07:24.278 align:middle line:90%,end
<c.magenta>在Swatch模式中展示的颜色和</c>

00:07:24.344 --> 00:07:27.948 align:middle line:90%,end
<c.magenta>在底部颜色选择器中的颜色是一样的</c>

00:07:28.015 --> 00:07:30.918 align:middle line:90%,end
<c.magenta>它们是用户最喜欢的</c>

00:07:30.984 --> 00:07:32.319 align:middle line:90%,end
<c.magenta>所以颜色在那里</c>

00:07:32.686 --> 00:07:33.720 align:middle line:90%,end
<c.magenta>你也注意到</c>

00:07:34.021 --> 00:07:37.391 align:middle line:90%,end
<c.magenta>我们在颜色选择器右端有个按钮</c>
<c.magenta>它们大部分</c>

00:07:37.591 --> 00:07:40.127 align:middle line:90%,end
<c.magenta>能让你增加目前已选的颜色</c>

00:07:40.460 --> 00:07:42.930 align:middle line:90%,end
<c.magenta>直接从触控条作为最爱样本</c>

00:07:42.996 --> 00:07:45.465 align:middle line:90%,end
<c.magenta>有了这些新东西</c>
<c.magenta>触控条颜色选择器</c>

00:07:45.566 --> 00:07:47.234 align:middle line:90%,end
<c.magenta>就变得相当先进</c>

00:07:47.301 --> 00:07:50.838 align:middle line:90%,end
<c.magenta>在屏幕中的主颜色面板</c>
<c.magenta>可以替换主颜色选择器</c>

00:07:50.904 --> 00:07:51.939 align:middle line:90%,end
<c.magenta>对于大多数使用情况</c>

00:07:52.005 --> 00:07:54.341 align:middle line:90%,end
<c.magenta>回到我所说的</c>

00:07:54.408 --> 00:07:56.343 align:middle line:90%,end
<c.magenta>启用内容的通畅访问</c>

00:07:56.410 --> 00:07:59.513 align:middle line:90%,end
<c.magenta>没有开启颜色面板应用</c>
<c.magenta>用户实际上不能运行</c>

00:07:59.580 --> 00:08:00.547 align:middle line:90%,end
<c.magenta>在大多数情况下</c>

00:07:59.580 --> 00:08:00.547 align:middle line:90%,end
<c.magenta>在大多数情况下</c>

00:08:03.116 --> 00:08:06.386 align:middle line:90%,end
<c.magenta>好的 对于触控条条目的颜色选择器</c>
<c.magenta>我们有API更新</c>

00:08:06.920 --> 00:08:10.123 align:middle line:90%,end
<c.magenta>这个新方法 这个新特性</c>
<c.magenta>允许颜色空间</c>

00:08:10.457 --> 00:08:14.261 align:middle line:90%,end
<c.magenta>可以选择使用的颜色空间</c>

00:08:14.328 --> 00:08:16.763 align:middle line:90%,end
<c.magenta>比如当前文档的颜色空间</c>

00:08:16.830 --> 00:08:19.967 align:middle line:90%,end
<c.magenta>那么颜色选择器可以展示</c>
<c.magenta>它们表现的颜色</c>

00:08:20.033 --> 00:08:21.401 align:middle line:90%,end
<c.magenta>当在文档中使用的时候</c>

00:08:21.468 --> 00:08:23.036 align:middle line:90%,end
<c.magenta>举个例子</c>

00:08:23.237 --> 00:08:24.838 align:middle line:90%,end
<c.magenta>这是简单的颜色选择器</c>

00:08:25.839 --> 00:08:28.809 align:middle line:90%,end
<c.magenta>现在如果你把allowedColorSpaces</c>
<c.magenta>设为genericCMYK</c>

00:08:28.876 --> 00:08:30.978 align:middle line:90%,end
<c.magenta>你发现颜色会更暗</c>

00:08:31.044 --> 00:08:33.947 align:middle line:90%,end
<c.magenta>因为这是它们在CMYK文件中</c>
<c.magenta>的表现方式</c>

00:08:34.014 --> 00:08:35.182 align:middle line:90%,end
<c.magenta>来个更加极端的例子</c>

00:08:35.249 --> 00:08:37.251 align:middle line:90%,end
<c.magenta>如果你的文档是黑白的</c>

00:08:37.317 --> 00:08:38.952 align:middle line:90%,end
<c.magenta>这是你将会得到的颜色</c>

00:08:39.385 --> 00:08:42.756 align:middle line:90%,end
<c.magenta>我们对于NSGroupTouchBarItem</c>
<c.magenta>也有API更新</c>

00:08:43.090 --> 00:08:45.559 align:middle line:90%,end
<c.magenta>首先是警告风格的构建器</c>

00:08:46.126 --> 00:08:49.329 align:middle line:90%,end
<c.magenta>你可能主要到 当AppKit</c>
<c.magenta>展示一个NSAlert的时候</c>

00:08:51.265 --> 00:08:54.968 align:middle line:10%
<c.magenta>按钮会自动出现在触控条 就像这样</c>

00:08:55.035 --> 00:08:57.771 align:middle line:10%
<c.magenta>如果你自己用这些按钮</c>
<c.magenta>展示定制用户界面</c>

00:08:57.838 --> 00:09:00.607 align:middle line:10%
<c.magenta>而且你想要做</c>
<c.magenta>和AppKit一样的东西</c>

00:08:57.838 --> 00:09:00.607 align:middle line:10%
<c.magenta>而且你想要做</c>
<c.magenta>和AppKit一样的东西</c>

00:09:00.674 --> 00:09:04.511 align:middle line:90%,end
<c.magenta>对于按钮的位置和大小</c>
<c.magenta>我们有API给你</c>

00:09:05.279 --> 00:09:08.949 align:middle line:90%,end
<c.magenta>这是初始化 AlertStyleGroupItem</c>
<c.magenta>有一个识别器方法 它允许你</c>

00:09:09.016 --> 00:09:10.918 align:middle line:90%,end
<c.magenta>创建GroupTouchBarItem</c>
<c.magenta>添加你的按钮</c>

00:09:10.984 --> 00:09:13.820 align:middle line:90%,end
<c.magenta>得到一样的大小位置表现</c>

00:09:14.821 --> 00:09:17.090 align:middle line:90%,end
<c.magenta>GroupTouchBarItem</c>
<c.magenta>的另一个API</c>

00:09:18.859 --> 00:09:21.361 align:middle line:90%,end
<c.magenta>提供了选择压缩选项的能力</c>

00:09:21.929 --> 00:09:26.233 align:middle line:90%,end
<c.magenta>如果条上的空间比较紧张</c>
<c.magenta>这决定了内容如何被管理</c>

00:09:26.900 --> 00:09:29.937 align:middle line:90%,end
<c.magenta>比如 这是条</c>
<c.magenta>在中间我们有四个按钮</c>

00:09:30.137 --> 00:09:31.672 align:middle line:90%,end
<c.magenta>所有按钮有图标和标题</c>

00:09:32.172 --> 00:09:34.408 align:middle line:90%,end
<c.magenta>在例如德语中</c>
<c.magenta>它有更大的标题</c>

00:09:35.008 --> 00:09:36.944 align:middle line:90%,end
<c.magenta>默认地 其中一个按钮会丢失</c>

00:09:37.010 --> 00:09:40.747 align:middle line:90%,end
<c.magenta>但是你宁可让这些按钮压缩在一起</c>
<c.magenta>也不愿丢失其中一个</c>

00:09:40.981 --> 00:09:44.151 align:middle line:90%,end
<c.magenta>你可能想要在两者之间选择</c>
<c.magenta>要么你让图标消失</c>

00:09:44.218 --> 00:09:45.352 align:middle line:90%,end
<c.magenta>要么是标题消失</c>

00:09:45.419 --> 00:09:47.654 align:middle line:10%
<c.magenta>就像这样和这样</c>

00:09:47.721 --> 00:09:49.857 align:middle line:10%
<c.magenta>同时注意到</c>
<c.magenta>当其中一个图标消失时</c>

00:09:49.923 --> 00:09:52.826 align:middle line:10%
<c.magenta>你或许想要它们全部消失</c>
<c.magenta>为了保持一致性</c>

00:09:52.893 --> 00:09:54.761 align:middle line:10%
<c.magenta>所以这个新的API能让你实现它</c>

00:09:55.295 --> 00:09:58.165 align:middle line:90%,end
<c.magenta>你选择要使用的压缩选项优先级</c>

00:09:58.665 --> 00:10:02.302 align:middle line:90%,end
<c.magenta>这些包含了隐藏图片</c>
<c.magenta>隐藏文本 或者空格</c>

00:09:58.665 --> 00:10:02.302 align:middle line:90%,end
<c.magenta>这些包含了隐藏图片</c>
<c.magenta>隐藏文本 或者空格</c>

00:10:03.337 --> 00:10:06.773 align:middle line:90%,end
<c.magenta>最后一个API提供了</c>
<c.magenta>从右到左界面的支持</c>

00:10:06.874 --> 00:10:09.276 align:middle line:90%,end
<c.magenta>在GroupTouchBarItem类中</c>

00:10:10.110 --> 00:10:13.313 align:middle line:90%,end
<c.magenta>以前的API</c>
<c.magenta>在特定情况下提供了从右到左的支持</c>

00:10:13.380 --> 00:10:14.681 align:middle line:90%,end
<c.magenta>例如分段控制</c>

00:10:15.082 --> 00:10:18.552 align:middle line:90%,end
<c.magenta>现在我们有GroupTouchBarItem API</c>
<c.magenta>使得更加灵活</c>

00:10:18.652 --> 00:10:21.121 align:middle line:90%,end
<c.magenta>这是FaceTime的触控条</c>

00:10:22.322 --> 00:10:24.258 align:middle line:90%,end
<c.magenta>在从右到左语言中</c>

00:10:24.324 --> 00:10:27.861 align:middle line:10%
<c.magenta>你想要它是这样显示</c>
<c.magenta>那些组被反转</c>

00:10:27.928 --> 00:10:31.164 align:middle line:10%
<c.magenta>在各自内部 但是整个条</c>
<c.magenta>没有被反转 而且那些组</c>

00:10:31.231 --> 00:10:36.069 align:middle line:10%
<c.magenta>在条的应用程序部分也没有被反转</c>

00:10:36.537 --> 00:10:38.939 align:middle line:10%
<c.magenta>这个新的API让你</c>

00:10:40.107 --> 00:10:44.211 align:middle line:90%,end
<c.magenta>对于每个GroupTouchBarItem</c>
<c.magenta>选定用户界面布局方向</c>

00:10:45.379 --> 00:10:49.149 align:middle line:90%,end
<c.magenta>最后我想强调关于触控条的是</c>
<c.magenta>Playground支持</c>

00:10:49.783 --> 00:10:52.586 align:middle line:90%,end
<c.magenta>Playground是非常有趣的</c>
<c.magenta>让我们来看一下</c>

00:10:52.653 --> 00:10:54.588 align:middle line:90%,end
<c.magenta>输入你的触控条代码</c>

00:10:54.655 --> 00:10:57.391 align:middle line:90%,end
<c.magenta>对不起 字体有点小</c>
<c.magenta>但是你不需要读这些</c>

00:10:57.457 --> 00:10:58.292 align:middle line:90%,end
<c.magenta>不是考试</c>

00:10:58.358 --> 00:11:02.663 align:middle line:90%,end
<c.magenta>当你看到这个</c>
<c.magenta>你可以看到你的触控条条目</c>

00:10:58.358 --> 00:11:02.663 align:middle line:90%,end
<c.magenta>当你看到这个</c>
<c.magenta>你可以看到你的触控条条目</c>

00:11:02.729 --> 00:11:05.632 align:middle line:90%,end
<c.magenta>实际上 整个触控条</c>
<c.magenta>在Playground中出现了</c>

00:11:08.802 --> 00:11:10.838 align:middle line:90%,end
<c.magenta>而且你可以做一些相当复杂的东西</c>

00:11:11.205 --> 00:11:15.075 align:middle line:90%,end
<c.magenta>检查位置和大小</c>
<c.magenta>做一些诸如替换退出键的事情</c>

00:11:15.175 --> 00:11:19.112 align:middle line:90%,end
<c.magenta>这是相当高级的操作</c>
<c.magenta>你可以直接在Playground中做到</c>

00:11:20.681 --> 00:11:23.650 align:middle line:90%,end
<c.magenta>所以我们有两个关于触控条的演讲</c>

00:11:23.750 --> 00:11:26.086 align:middle line:90%,end
<c.magenta>基本讲述就在本场演讲之后</c>

00:11:26.186 --> 00:11:27.688 align:middle line:90%,end
<c.magenta>会给你一个很好的概述</c>

00:11:27.754 --> 00:11:31.124 align:middle line:90%,end
<c.magenta>关于如何在你的应用中</c>
<c.magenta>使用NSTouchBar API</c>

00:11:31.325 --> 00:11:33.460 align:middle line:90%,end
<c.magenta>和今天下午5:10一个高级别讨论</c>

00:11:33.694 --> 00:11:36.997 align:middle line:90%,end
<c.magenta>它会通过一些强大的真实案例</c>
<c.magenta>告诉你更多</c>

00:11:37.364 --> 00:11:39.399 align:middle line:90%,end
<c.magenta>这两场演讲都很有娱乐性和教育性</c>

00:11:39.466 --> 00:11:41.134 align:middle line:90%,end
<c.magenta>所以我鼓励你们都去参加</c>

00:11:41.201 --> 00:11:44.471 align:middle line:90%,end
<c.magenta>明早9点到11点</c>
<c.magenta>我们还有一个针对触控条的实验</c>

00:11:46.740 --> 00:11:49.409 align:middle line:90%,end
<c.magenta>好了 接下来</c>
<c.magenta>我们讲一下文档分享</c>

00:11:49.710 --> 00:11:52.379 align:middle line:90%,end
<c.magenta>在macOS Sierra中</c>
<c.magenta>我们引入了这个分享服务</c>

00:11:52.579 --> 00:11:54.448 align:middle line:90%,end
<c.magenta>云分享</c>

00:11:54.715 --> 00:11:59.386 align:middle line:90%,end
<c.magenta>它实现了永久基于云端的</c>
<c.magenta>与其他用户的共享</c>

00:11:59.853 --> 00:12:02.856 align:middle line:90%,end
<c.magenta>在这个发布中 我们启用</c>
<c.magenta>基于iCloud存储的文件分享</c>

00:11:59.853 --> 00:12:02.856 align:middle line:90%,end
<c.magenta>在这个发布中 我们启用</c>
<c.magenta>基于iCloud存储的文件分享</c>

00:12:02.956 --> 00:12:04.458 align:middle line:90%,end
<c.magenta>让我向你们展示这是什么意思</c>

00:12:04.925 --> 00:12:06.126 align:middle line:90%,end
<c.magenta>我们在TextEdit中</c>

00:12:06.493 --> 00:12:07.995 align:middle line:90%,end
<c.magenta>你可以进入分享菜单</c>

00:12:08.328 --> 00:12:09.630 align:middle line:90%,end
<c.magenta>你可以选择添加人</c>

00:12:10.063 --> 00:12:11.932 align:middle line:90%,end
<c.magenta>这会弹出添加人的对话框</c>

00:12:11.999 --> 00:12:14.268 align:middle line:90%,end
<c.magenta>你可以选择你想要的方式</c>
<c.magenta>来发出你的邀请</c>

00:12:14.334 --> 00:12:15.435 align:middle line:90%,end
<c.magenta>让我们选择信息</c>

00:12:16.003 --> 00:12:17.437 align:middle line:90%,end
<c.magenta>让我们邀请我们的朋友</c>

00:12:18.939 --> 00:12:21.108 align:middle line:90%,end
<c.magenta>约翰·爱普希德 当然</c>

00:12:21.175 --> 00:12:22.009 align:middle line:90%,end
<c.magenta>然后发出去</c>

00:12:22.075 --> 00:12:23.877 align:middle line:90%,end
<c.magenta>如你所见</c>
<c.magenta>这个文档现在已经被分享了</c>

00:12:23.944 --> 00:12:25.579 align:middle line:90%,end
<c.magenta>你可以在标题栏中看到</c>

00:12:25.646 --> 00:12:26.980 align:middle line:90%,end
<c.magenta>这表明它是分享的</c>

00:12:27.047 --> 00:12:28.682 align:middle line:90%,end
<c.magenta>约翰·爱普希德可以继续</c>

00:12:28.749 --> 00:12:31.385 align:middle line:90%,end
<c.magenta>对这个文件做出他的有价值的贡献</c>

00:12:32.352 --> 00:12:33.520 align:middle line:90%,end
<c.magenta>或者没有那么有价值</c>

00:12:33.754 --> 00:12:37.090 align:middle line:90%,end
<c.magenta>所以 给你们的问题是</c>

00:12:37.424 --> 00:12:40.594 align:middle line:90%,end
<c.magenta>在TextEdit中</c>
<c.magenta>需要多少行代码来实现这个？</c>

00:12:41.261 --> 00:12:45.732 align:middle line:90%,end
<c.magenta>当然 因为我在问你们</c>
<c.magenta>可能不是800行或者几千行</c>

00:12:45.799 --> 00:12:48.402 align:middle line:90%,end
<c.magenta>但是答案可能会让你们惊讶</c>
<c.magenta>因为是0行</c>

00:12:49.102 --> 00:12:51.839 align:middle line:90%,end
<c.magenta>TextEdit已经是一个</c>
<c.magenta>基于NSDocument的应用</c>

00:12:51.905 --> 00:12:53.473 align:middle line:90%,end
<c.magenta>已经实现了自动保存</c>

00:12:53.540 --> 00:12:57.311 align:middle line:90%,end
<c.magenta>因此TextEdit完全免费</c>
<c.magenta>得到这个我展示给你们的功能</c>

00:12:57.377 --> 00:13:00.180 align:middle line:90%,end
<c.magenta>对于任何基于NSDocument的应用</c>
<c.magenta>这都是真实的</c>

00:12:57.377 --> 00:13:00.180 align:middle line:90%,end
<c.magenta>对于任何基于NSDocument的应用</c>
<c.magenta>这都是真实的</c>

00:13:00.914 --> 00:13:01.748 align:middle line:90%,end
<c.magenta>实际上</c>

00:13:02.382 --> 00:13:05.652 align:middle line:90%,end
<c.magenta>这里的整个分享菜单</c>
<c.magenta>在macOS High Sierra中都是新的</c>

00:13:05.919 --> 00:13:08.455 align:middle line:90%,end
<c.magenta>它包括了各种其它经典的…</c>

00:13:08.522 --> 00:13:11.158 align:middle line:90%,end
<c.magenta>我会称它们为经典的 你知道</c>
<c.magenta>它们来自几年前</c>

00:13:11.225 --> 00:13:14.294 align:middle line:90%,end
<c.magenta>分享服务 比如Mail</c>
<c.magenta>AirDrop、Notes等等</c>

00:13:14.361 --> 00:13:15.629 align:middle line:90%,end
<c.magenta>这整个菜单都是免费的</c>

00:13:15.896 --> 00:13:18.866 align:middle line:90%,end
<c.magenta>在macOS High Sierra上的</c>
<c.magenta>基于NSDocument的应用中</c>

00:13:19.499 --> 00:13:22.236 align:middle line:90%,end
<c.magenta>NSDocument</c>
<c.magenta>你可以对于每一个实例基础</c>

00:13:22.302 --> 00:13:25.172 align:middle line:90%,end
<c.magenta>表明是否一个文件应该被分享</c>

00:13:25.239 --> 00:13:27.107 align:middle line:90%,end
<c.magenta>所以你可以关闭默认的分享</c>

00:13:27.174 --> 00:13:29.476 align:middle line:90%,end
<c.magenta>这个分享方法 初始化一个分享</c>

00:13:29.877 --> 00:13:34.281 align:middle line:90%,end
<c.magenta>准备方法让你对选择器做任意的改动</c>

00:13:34.448 --> 00:13:35.782 align:middle line:90%,end
<c.magenta>在菜单出现以前</c>

00:13:36.283 --> 00:13:38.919 align:middle line:10%
<c.magenta>在NSDocument控制器</c>
<c.magenta>我们有一个属性让你</c>

00:13:38.986 --> 00:13:40.721 align:middle line:10%
<c.magenta>取消这整个分享服务</c>

00:13:40.787 --> 00:13:42.823 align:middle line:10%
<c.magenta>如果你想要这么做的话</c>
<c.magenta>那么你可以自己控制它</c>

00:13:42.890 --> 00:13:45.726 align:middle line:10%
<c.magenta>然后StandardShare菜单项</c>
<c.magenta>会回到菜单</c>

00:13:46.126 --> 00:13:47.561 align:middle line:10%
<c.magenta>你可以自己放置位置</c>

00:13:47.628 --> 00:13:50.163 align:middle line:10%
<c.magenta>而不是让应用放在默认位置</c>

00:13:53.200 --> 00:13:54.101 align:middle line:90%,end
<c.magenta>分页窗口</c>

00:13:54.801 --> 00:13:57.204 align:middle line:90%,end
<c.magenta>在上次发布的macOS Sierra中</c>

00:13:57.271 --> 00:13:59.206 align:middle line:90%,end
<c.magenta>我们添加了分页窗口</c>
<c.magenta>我们的操作方式使得</c>

00:13:59.273 --> 00:14:02.242 align:middle line:90%,end
<c.magenta>对于所有的应用</c>
<c.magenta>几乎是自动工作的</c>

00:13:59.273 --> 00:14:02.242 align:middle line:90%,end
<c.magenta>对于所有的应用</c>
<c.magenta>几乎是自动工作的</c>

00:14:02.910 --> 00:14:06.046 align:middle line:90%,end
<c.magenta>这里你可以看到实际情况</c>
<c.magenta>比如在Pages中</c>

00:14:06.346 --> 00:14:09.750 align:middle line:90%,end
<c.magenta>我可以去窗口菜单</c>
<c.magenta>合并所有窗口 就完成了！</c>

00:14:09.816 --> 00:14:13.220 align:middle line:90%,end
<c.magenta>现在我得到…所有的文件都是选项卡</c>
<c.magenta>你可以从中选择</c>

00:14:13.287 --> 00:14:16.056 align:middle line:90%,end
<c.magenta>这非常棒</c>
<c.magenta>这功能减少了杂乱</c>

00:14:16.523 --> 00:14:19.092 align:middle line:90%,end
<c.magenta>在macOS High Sierra中</c>
<c.magenta>我们添加了</c>

00:14:19.159 --> 00:14:20.460 align:middle line:90%,end
<c.magenta>选项卡预览功能</c>

00:14:20.527 --> 00:14:21.361 align:middle line:90%,end
<c.magenta>这是新的</c>

00:14:22.496 --> 00:14:25.399 align:middle line:90%,end
<c.magenta>当你到视图菜单</c>
<c.magenta>选择显示所有选项卡</c>

00:14:26.733 --> 00:14:28.702 align:middle line:90%,end
<c.magenta>然后 现在它向显示其他选项卡</c>

00:14:28.869 --> 00:14:30.971 align:middle line:90%,end
<c.magenta>非常像Safari所做的</c>

00:14:31.505 --> 00:14:34.041 align:middle line:90%,end
<c.magenta>然后你继续选择你想要的选项卡</c>

00:14:34.208 --> 00:14:35.042 align:middle line:90%,end
<c.magenta>所以这全是自动的</c>

00:14:35.209 --> 00:14:37.044 align:middle line:90%,end
<c.magenta>同样 你的应用可以免费获得</c>

00:14:37.778 --> 00:14:41.081 align:middle line:90%,end
<c.magenta>我们也有一些API</c>
<c.magenta>让你对于选项卡有更多的控制</c>

00:14:41.882 --> 00:14:44.418 align:middle line:90%,end
<c.magenta>一个是NSWindowTab类</c>

00:14:44.818 --> 00:14:48.589 align:middle line:90%,end
<c.magenta>它代表了一个实例</c>
<c.magenta>代表关于单个选项卡的信息</c>

00:14:49.389 --> 00:14:52.426 align:middle line:90%,end
<c.magenta>以Safari选项卡状态条为例</c>

00:14:52.793 --> 00:14:55.095 align:middle line:90%,end
<c.magenta>title和attributedTitle这两个字段</c>

00:14:55.262 --> 00:14:57.998 align:middle line:90%,end
<c.magenta>让你可以定制</c>
<c.magenta>要显示的默认标题</c>

00:14:59.333 --> 00:15:02.169 align:middle line:90%,end
<c.magenta>默认的标题</c>
<c.magenta>显然是窗口的标题</c>

00:14:59.333 --> 00:15:02.169 align:middle line:90%,end
<c.magenta>默认的标题</c>
<c.magenta>显然是窗口的标题</c>

00:15:02.936 --> 00:15:06.673 align:middle line:10%
<c.magenta>toolTip属性让你能定制</c>
<c.magenta>要显示的默认toolTip</c>

00:15:07.207 --> 00:15:10.711 align:middle line:90%,end
<c.magenta>accessoryView属性让你</c>
<c.magenta>在选项卡条中插入一个accessoryView</c>

00:15:10.777 --> 00:15:13.647 align:middle line:90%,end
<c.magenta>你可以看到 在Safari中</c>
<c.magenta>这个小的扬声器图标</c>

00:15:13.714 --> 00:15:16.984 align:middle line:90%,end
<c.magenta>Safari拿它来表示</c>
<c.magenta>网页正在播放音频</c>

00:15:17.217 --> 00:15:19.286 align:middle line:90%,end
<c.magenta>所以现在你也可对自己的选项卡</c>
<c.magenta>做这样的事情</c>

00:15:20.754 --> 00:15:22.289 align:middle line:90%,end
<c.magenta>NSWindowTabGroup类</c>

00:15:22.456 --> 00:15:25.526 align:middle line:90%,end
<c.magenta>表示那个窗口所有选项卡组的信息</c>

00:15:25.592 --> 00:15:28.161 align:middle line:90%,end
<c.magenta>你可以要求它的属性</c>
<c.magenta>比如是否可见</c>

00:15:28.228 --> 00:15:29.429 align:middle line:90%,end
<c.magenta>或者预览可见</c>

00:15:29.496 --> 00:15:30.864 align:middle line:90%,end
<c.magenta>你可以整合窗口</c>

00:15:30.931 --> 00:15:32.566 align:middle line:90%,end
<c.magenta>你可以改变哪个窗口在前端</c>

00:15:32.633 --> 00:15:35.502 align:middle line:10%
<c.magenta>你也可以从选项卡组</c>
<c.magenta>添加和删除窗口</c>

00:15:38.438 --> 00:15:42.309 align:middle line:90%,end
<c.magenta>现在 这个应用中有一个</c>
<c.magenta>打开URL的新委托方法</c>

00:15:43.777 --> 00:15:47.247 align:middle line:90%,end
<c.magenta>你可能注意到了</c>
<c.magenta>NSApplicationDelegate提供了</c>

00:15:47.314 --> 00:15:50.450 align:middle line:90%,end
<c.magenta>多个标注来打开文件</c>
<c.magenta>但是没有一个是来处理URL的</c>

00:15:50.517 --> 00:15:53.387 align:middle line:90%,end
<c.magenta>所以这个打开URL的</c>
<c.magenta>新方法应用会被调用</c>

00:15:53.687 --> 00:15:56.323 align:middle line:90%,end
<c.magenta>通过URL而非文件或路径</c>

00:15:56.657 --> 00:15:57.558 align:middle line:90%,end
<c.magenta>但是它也会被调用</c>

00:15:57.624 --> 00:16:00.961 align:middle line:90%,end
<c.magenta>对任何你的应用已经注册的</c>
<c.magenta>定制的URL方案</c>

00:15:57.624 --> 00:16:00.961 align:middle line:90%,end
<c.magenta>对任何你的应用已经注册的</c>
<c.magenta>定制的URL方案</c>

00:16:01.028 --> 00:16:03.830 align:middle line:90%,end
<c.magenta>以前这需要你已注册Apple事件</c>

00:16:04.097 --> 00:16:05.065 align:middle line:90%,end
<c.magenta>句柄</c>

00:16:05.132 --> 00:16:06.366 align:middle line:90%,end
<c.magenta>你不需要这么做了</c>

00:16:06.433 --> 00:16:07.935 align:middle line:90%,end
<c.magenta>现在更加简单</c>

00:16:08.302 --> 00:16:10.971 align:middle line:90%,end
<c.magenta>如果实现了</c>
<c.magenta>它会被所有公开请求调用</c>

00:16:11.038 --> 00:16:13.440 align:middle line:90%,end
<c.magenta>除了那些被NSDocument自动处理</c>

00:16:13.507 --> 00:16:15.008 align:middle line:90%,end
<c.magenta>会被移出这个列表</c>

00:16:15.442 --> 00:16:16.710 align:middle line:90%,end
<c.magenta>所以相当简单明了</c>

00:16:16.977 --> 00:16:17.811 align:middle line:90%,end
<c.magenta>谢谢</c>

00:16:20.280 --> 00:16:22.115 align:middle line:90%,end
<c.magenta>NSCollectionView将…</c>

00:16:22.416 --> 00:16:24.918 align:middle line:90%,end
<c.magenta>在macOS High Sierra中</c>
<c.magenta>做响应式滚动</c>

00:16:25.285 --> 00:16:26.887 align:middle line:90%,end
<c.magenta>我来展示一下这是什么意思</c>

00:16:27.187 --> 00:16:29.690 align:middle line:90%,end
<c.magenta>这里我们有一个CollectionView</c>
<c.magenta>它有六个可见条目</c>

00:16:29.756 --> 00:16:32.926 align:middle line:90%,end
<c.magenta>但是在集合视图的上面或者下面</c>
<c.magenta>有更多条目</c>

00:16:32.993 --> 00:16:33.827 align:middle line:90%,end
<c.magenta>可见区域</c>

00:16:35.195 --> 00:16:38.465 align:middle line:90%,end
<c.magenta>CollectionView做预提取</c>
<c.magenta>意味着它会预提取</c>

00:16:38.532 --> 00:16:40.167 align:middle line:90%,end
<c.magenta>一些还不可见的条目</c>

00:16:40.667 --> 00:16:43.403 align:middle line:90%,end
<c.magenta>期待用户会在那个区域滚动</c>

00:16:43.737 --> 00:16:46.607 align:middle line:90%,end
<c.magenta>这是10.13版本上的应用自带的</c>

00:16:47.074 --> 00:16:48.375 align:middle line:90%,end
<c.magenta>你不需要做任何事情</c>

00:16:49.042 --> 00:16:51.378 align:middle line:90%,end
<c.magenta>但是 如果你想要</c>
<c.magenta>影响它的工作方式</c>

00:16:51.445 --> 00:16:54.948 align:middle line:90%,end
<c.magenta>有一个预提取数据源</c>
<c.magenta>其中有两个你可以实现的方法</c>

00:16:55.015 --> 00:17:00.153 align:middle line:90%,end
<c.magenta>所以 这个prefetchDataSource</c>
<c.magenta>是和iOS一样的代理API</c>

00:16:55.015 --> 00:17:00.153 align:middle line:90%,end
<c.magenta>所以 这个prefetchDataSource</c>
<c.magenta>是和iOS一样的代理API</c>

00:17:00.220 --> 00:17:02.856 align:middle line:90%,end
<c.magenta>一样的数据源方法</c>

00:17:03.156 --> 00:17:04.758 align:middle line:10%
<c.magenta>它的两个方法</c>

00:17:04.825 --> 00:17:07.560 align:middle line:10%
<c.magenta>一个让你监听预提取</c>
<c.magenta>被预提取的条目</c>

00:17:07.627 --> 00:17:10.696 align:middle line:10%
<c.magenta>另一个让你监听</c>
<c.magenta>预提取被取消</c>

00:17:10.763 --> 00:17:12.633 align:middle line:10%
<c.magenta>比如说用户停止了滚动</c>

00:17:12.699 --> 00:17:15.969 align:middle line:10%
<c.magenta>所以 你可以使用这些</c>
<c.magenta>来定制预提取行为</c>

00:17:16.036 --> 00:17:17.538 align:middle line:10%
<c.magenta>超越</c>

00:17:18.137 --> 00:17:20.440 align:middle line:10%
<c.magenta>你已在实现的传统数据源行为</c>

00:17:20.507 --> 00:17:21.742 align:middle line:10%
<c.magenta>但是 有一些选项</c>

00:17:21.808 --> 00:17:24.678 align:middle line:10%
<c.magenta>你不必实现数据源</c>
<c.magenta>它们依旧运作</c>

00:17:25.546 --> 00:17:27.347 align:middle line:90%,end
<c.magenta>接下来 我们有一些关于颜色的更新</c>

00:17:29.783 --> 00:17:33.587 align:middle line:90%,end
<c.magenta>第一 新的NSColor属性</c>
<c.magenta>来实现系统颜色</c>

00:17:33.654 --> 00:17:34.588 align:middle line:90%,end
<c.magenta>这是一些属性</c>

00:17:34.655 --> 00:17:37.658 align:middle line:10%
<c.magenta>比如systemBlue</c>
<c.magenta>systemBrown systemGray等等</c>

00:17:37.724 --> 00:17:38.892 align:middle line:10%
<c.magenta>这里有一个列表</c>

00:17:38.959 --> 00:17:42.095 align:middle line:10%
<c.magenta>这是你想用时就会被用到的颜色</c>

00:17:42.162 --> 00:17:44.431 align:middle line:10%
<c.magenta>符合系统颜色</c>

00:17:44.498 --> 00:17:46.767 align:middle line:10%
<c.magenta>或者系统应用使用的颜色</c>

00:17:47.501 --> 00:17:50.204 align:middle line:10%
<c.magenta>所以 在不同的发布中</c>
<c.magenta>以及在不同的表现下</c>

00:17:50.704 --> 00:17:52.506 align:middle line:10%
<c.magenta>这些颜色可能会改变</c>

00:17:52.573 --> 00:17:57.144 align:middle line:90%,end
<c.magenta>比如 同样的颜色</c>
<c.magenta>同样的系统颜色在触控条中</c>

00:17:57.211 --> 00:17:59.613 align:middle line:90%,end
<c.magenta>会与它在窗口中的看上去不一样</c>

00:17:59.913 --> 00:18:01.849 align:middle line:90%,end
<c.magenta>所以这让你的应用保持时髦</c>

00:17:59.913 --> 00:18:01.849 align:middle line:90%,end
<c.magenta>所以这让你的应用保持时髦</c>

00:18:01.915 --> 00:18:03.283 align:middle line:90%,end
<c.magenta>无论何时 无论何地</c>

00:18:03.650 --> 00:18:04.685 align:middle line:90%,end
<c.magenta>当然 这也意味着</c>

00:18:04.751 --> 00:18:07.120 align:middle line:90%,end
<c.magenta>你不应该期望颜色会完全一致</c>

00:18:07.187 --> 00:18:09.056 align:middle line:90%,end
<c.magenta>因为它们可能会改变</c>

00:18:09.489 --> 00:18:12.659 align:middle line:90%,end
<c.magenta>macOS 10.10就已经有了</c>
<c.magenta>也就是Yosemite</c>

00:18:12.726 --> 00:18:15.462 align:middle line:10%
<c.magenta>在颜色选择器的开发者列表中也有</c>

00:18:15.529 --> 00:18:18.098 align:middle line:10%
<c.magenta>所以你可以直接选择它们</c>
<c.magenta>在你的应用中使用它们</c>

00:18:18.165 --> 00:18:19.299 align:middle line:10%
<c.magenta>比如在Xcode中</c>

00:18:20.400 --> 00:18:21.802 align:middle line:10%
<c.magenta>关于颜色的另外一个更新</c>

00:18:22.269 --> 00:18:24.371 align:middle line:90%,end
<c.magenta>关于旧的标准颜色</c>

00:18:25.305 --> 00:18:28.008 align:middle line:90%,end
<c.magenta>什么是旧的颜色标准？</c>

00:18:28.075 --> 00:18:31.078 align:middle line:90%,end
<c.magenta>是这些家伙 NSColor.red</c>
<c.magenta>.green、.yellow</c>

00:18:31.144 --> 00:18:32.913 align:middle line:90%,end
<c.magenta>等等 这些我们用了很多年</c>

00:18:33.213 --> 00:18:36.917 align:middle line:90%,end
<c.magenta>这些已经被传统地定义为</c>
<c.magenta>饱和商业图像颜色</c>

00:18:36.984 --> 00:18:40.287 align:middle line:90%,end
<c.magenta>比如 红色是100</c>
<c.magenta>绿色是010 等等</c>

00:18:41.421 --> 00:18:45.092 align:middle line:90%,end
<c.magenta>过去它们在通用RGB</c>
<c.magenta>或者校准RGB颜色空间中使用</c>

00:18:45.392 --> 00:18:47.261 align:middle line:90%,end
<c.magenta>现在这些值都保持一致</c>

00:18:47.561 --> 00:18:51.298 align:middle line:90%,end
<c.magenta>但通过将它们强行变成sRGB</c>
<c.magenta>颜色空间 我们让它们现代化</c>

00:18:51.665 --> 00:18:53.200 align:middle line:90%,end
<c.magenta>这意味着</c>

00:18:53.267 --> 00:18:55.969 align:middle line:90%,end
<c.magenta>颜色值会多少有些不同</c>

00:18:57.137 --> 00:18:58.438 align:middle line:10%
<c.magenta>因为这样</c>

00:18:58.505 --> 00:19:02.409 align:middle line:10%
<c.magenta>这个改变只会发生在10.13或</c>
<c.magenta>更新版本的SDK的应用程序</c>

00:18:58.505 --> 00:19:02.409 align:middle line:10%
<c.magenta>这个改变只会发生在10.13或</c>
<c.magenta>更新版本的SDK的应用程序</c>

00:19:02.709 --> 00:19:05.812 align:middle line:10%
<c.magenta>你可以看到</c>
<c.magenta>这是颜色在通用RGB的出现方式</c>

00:19:05.879 --> 00:19:07.915 align:middle line:10%
<c.magenta>这是在sRGB中的方式</c>

00:19:07.981 --> 00:19:09.750 align:middle line:10%
<c.magenta>存在一些视觉差别</c>
<c.magenta>我们不想要</c>

00:19:09.816 --> 00:19:12.519 align:middle line:10%
<c.magenta>在你的应用中引入视觉不一致</c>

00:19:14.087 --> 00:19:17.591 align:middle line:90%,end
<c.magenta>我要提的最后一个颜色功能</c>
<c.magenta>是在资产目录中的颜色</c>

00:19:18.125 --> 00:19:21.862 align:middle line:90%,end
<c.magenta>Xcode现在有能力</c>
<c.magenta>让你给资产目录添加颜色</c>

00:19:21.929 --> 00:19:23.497 align:middle line:90%,end
<c.magenta>举个简单例子</c>

00:19:25.065 --> 00:19:25.999 align:middle line:90%,end
<c.magenta>现在你也可以…</c>

00:19:26.200 --> 00:19:29.870 align:middle line:90%,end
<c.magenta>你不能添加或者提供</c>
<c.magenta>一个颜色给一个特定名字颜色</c>

00:19:30.270 --> 00:19:33.574 align:middle line:90%,end
<c.magenta>你也可以提供多个颜色</c>
<c.magenta>不同的颜色给不同的色域</c>

00:19:33.941 --> 00:19:36.076 align:middle line:90%,end
<c.magenta>比如 我们有放射性颜色</c>

00:19:36.143 --> 00:19:38.679 align:middle line:90%,end
<c.magenta>在是sRGB色域中</c>
<c.magenta>一个显示P3色域颜色</c>

00:19:39.413 --> 00:19:42.683 align:middle line:90%,end
<c.magenta>这不是你经常要做的事情</c>
<c.magenta>这是相当罕见的</c>

00:19:42.916 --> 00:19:45.853 align:middle line:90%,end
<c.magenta>但是如果你有很多P3颜色</c>
<c.magenta>你可能需要做</c>

00:19:46.486 --> 00:19:51.058 align:middle line:90%,end
<c.magenta>当降低到与sRGB一样</c>
<c.magenta>这些颜色是饱和的</c>

00:19:51.258 --> 00:19:52.292 align:middle line:90%,end
<c.magenta>所以你想要区分它们</c>

00:19:52.359 --> 00:19:54.828 align:middle line:90%,end
<c.magenta>在sRGB 你可能想要</c>
<c.magenta>提供RGB变量</c>

00:19:54.895 --> 00:19:57.297 align:middle line:90%,end
<c.magenta>但是 这应该是相当罕见的需求</c>

00:19:57.831 --> 00:20:00.100 align:middle line:90%,end
<c.magenta>所以 你如何得到这些颜色呢？</c>

00:19:57.831 --> 00:20:00.100 align:middle line:90%,end
<c.magenta>所以 你如何得到这些颜色呢？</c>

00:20:00.167 --> 00:20:03.737 align:middle line:90%,end
<c.magenta>同时在NSColor和UIColor中</c>
<c.magenta>我们提供了API</c>

00:20:04.204 --> 00:20:07.241 align:middle line:90%,end
<c.magenta>通过提供一个名字</c>
<c.magenta>你基本上创建了一个NSColor</c>

00:20:07.641 --> 00:20:09.943 align:middle line:90%,end
<c.magenta>你也可以提供一个束</c>
<c.magenta>如果资产目录</c>

00:20:10.010 --> 00:20:11.578 align:middle line:90%,end
<c.magenta>不是你的主束</c>

00:20:14.648 --> 00:20:15.616 align:middle line:90%,end
<c.magenta>对于访问性</c>

00:20:15.682 --> 00:20:17.451 align:middle line:90%,end
<c.magenta>我们做了很多改进</c>

00:20:17.518 --> 00:20:20.254 align:middle line:90%,end
<c.magenta>我会讲一下</c>
<c.magenta>NSAccessibilityCustomRotor</c>

00:20:20.454 --> 00:20:22.856 align:middle line:90%,end
<c.magenta>你可能注意到 AccessibilityRotors</c>

00:20:22.923 --> 00:20:24.525 align:middle line:90%,end
<c.magenta>使得内容搜索更简单</c>

00:20:24.992 --> 00:20:26.560 align:middle line:90%,end
<c.magenta>通过辅助技术</c>

00:20:27.427 --> 00:20:30.297 align:middle line:90%,end
<c.magenta>比如 一个配音用户</c>
<c.magenta>可以浏览网页中的链接</c>

00:20:30.864 --> 00:20:32.633 align:middle line:90%,end
<c.magenta>这个新的API让你能</c>

00:20:32.699 --> 00:20:35.569 align:middle line:90%,end
<c.magenta>自定义转子 比如页面文件的标题</c>

00:20:35.636 --> 00:20:36.937 align:middle line:90%,end
<c.magenta>这是一个例子</c>

00:20:37.571 --> 00:20:38.639 align:middle line:90%,end
<c.magenta>这个是类似的</c>

00:20:39.106 --> 00:20:40.841 align:middle line:90%,end
<c.magenta>这是个好的API 它类似于</c>

00:20:40.908 --> 00:20:42.976 align:middle line:90%,end
<c.magenta>iOS上面的</c>
<c.magenta>UIAccessibilityCustomRotor API</c>

00:20:43.043 --> 00:20:44.745 align:middle line:90%,end
<c.magenta>我们在上个发布版本中引入的</c>

00:20:45.512 --> 00:20:49.716 align:middle line:90%,end
<c.magenta>相当直接地 你可以实现</c>
<c.magenta>accessibilityCustomRotors方法</c>

00:20:50.284 --> 00:20:52.686 align:middle line:90%,end
<c.magenta>基于访问性协议</c>

00:20:52.753 --> 00:20:55.522 align:middle line:90%,end
<c.magenta>返回一个数组</c>
<c.magenta>包含你想要的自定义转子</c>

00:20:56.723 --> 00:20:58.258 align:middle line:90%,end
<c.magenta>一个小的属性清理便条</c>

00:20:59.359 --> 00:21:03.564 align:middle line:90%,end
<c.magenta>在AppKit中 有很多对象属性</c>
<c.magenta>仍然声明为一个标记</c>

00:20:59.359 --> 00:21:03.564 align:middle line:90%,end
<c.magenta>在AppKit中 有很多对象属性</c>
<c.magenta>仍然声明为一个标记</c>

00:21:04.031 --> 00:21:06.366 align:middle line:90%,end
<c.magenta>现在Swift中就特别不幸</c>

00:21:06.667 --> 00:21:10.103 align:middle line:90%,end
<c.magenta>作为未知的 然后在伤口上撒盐</c>
<c.magenta>也是不安全的</c>

00:21:10.671 --> 00:21:13.006 align:middle line:90%,end
<c.magenta>所以我们改变了很多</c>

00:21:13.407 --> 00:21:16.476 align:middle line:90%,end
<c.magenta>委托、iB出口</c>
<c.magenta>和自然弱关系</c>

00:21:16.543 --> 00:21:19.746 align:middle line:90%,end
<c.magenta>比如父指针</c>
<c.magenta>或者第一应答器 如你所见</c>

00:21:19.813 --> 00:21:20.981 align:middle line:90%,end
<c.magenta>这些变弱</c>

00:21:21.281 --> 00:21:22.182 align:middle line:90%,end
<c.magenta>这里的contentView</c>

00:21:22.249 --> 00:21:25.752 align:middle line:10%
<c.magenta>在NSBox</c>
<c.magenta>这是一个属性变强的例子</c>

00:21:25.819 --> 00:21:29.089 align:middle line:10%
<c.magenta>你可以在10.13上</c>
<c.magenta>看到它们出现的方式</c>

00:21:29.690 --> 00:21:31.925 align:middle line:10%
<c.magenta>现在 这些改变大部分兼容</c>

00:21:31.992 --> 00:21:33.794 align:middle line:10%
<c.magenta>但是你需要意识到弱属性</c>

00:21:33.861 --> 00:21:35.729 align:middle line:90%,end
<c.magenta>会自动凸显出来</c>

00:21:35.796 --> 00:21:37.831 align:middle line:90%,end
<c.magenta>当被引用的对象消失时</c>

00:21:38.031 --> 00:21:41.235 align:middle line:90%,end
<c.magenta>所以那可能代表一些兼容性问题</c>

00:21:41.301 --> 00:21:43.704 align:middle line:90%,end
<c.magenta>一些行为上的改变</c>
<c.magenta>不兼容的风险</c>

00:21:43.770 --> 00:21:45.706 align:middle line:90%,end
<c.magenta>所以这是要注意的东西</c>

00:21:46.473 --> 00:21:48.542 align:middle line:90%,end
<c.magenta>顺便提一下 还有一件事情</c>

00:21:48.976 --> 00:21:51.745 align:middle line:90%,end
<c.magenta>我们不能展示他的或者她的名字和脸</c>

00:21:52.079 --> 00:21:55.516 align:middle line:90%,end
<c.magenta>但在此过程中 我们满足了</c>
<c.magenta>这个开发者的WWDC愿望</c>

00:21:56.216 --> 00:21:59.152 align:middle line:10%
<c.magenta>所以 我不知道你是否在那里</c>
<c.magenta>但是祝你WWDC快乐</c>

00:22:05.125 --> 00:22:06.159 align:middle line:90%,end
<c.magenta>所以 我们在听</c>

00:22:07.594 --> 00:22:09.196 align:middle line:90%,end
<c.magenta>Text的一些更新</c>

00:22:10.430 --> 00:22:14.334 align:middle line:90%,end
<c.magenta>第一个要讲的是 我们改进了</c>
<c.magenta>NSTextField的孤立处理</c>

00:22:14.568 --> 00:22:17.037 align:middle line:90%,end
<c.magenta>意思是我们会减少发生次数</c>

00:22:17.104 --> 00:22:19.840 align:middle line:90%,end
<c.magenta>当你有一个中文或者日语字符出现</c>

00:22:19.907 --> 00:22:21.208 align:middle line:90%,end
<c.magenta>在独自一行</c>

00:22:21.275 --> 00:22:22.643 align:middle line:90%,end
<c.magenta>特别是两行的情况</c>

00:22:22.709 --> 00:22:25.546 align:middle line:90%,end
<c.magenta>这影响到 比如 查询警告等等</c>

00:22:26.180 --> 00:22:30.184 align:middle line:90%,end
<c.magenta>在NSFont和NSBezierPath</c>
<c.magenta>我们有基于CGGlyph的API</c>

00:22:30.517 --> 00:22:35.889 align:middle line:90%,end
<c.magenta>通过低级图形学API</c>
<c.magenta>提供了改进的阻抗</c>

00:22:35.956 --> 00:22:37.958 align:middle line:90%,end
<c.magenta>当然 提供了更好的性能</c>

00:22:38.625 --> 00:22:40.694 align:middle line:90%,end
<c.magenta>我们有一个新的类</c>
<c.magenta>叫NSFontAssetRequest</c>

00:22:41.261 --> 00:22:42.796 align:middle line:90%,end
<c.magenta>下载系统字体</c>

00:22:42.863 --> 00:22:44.965 align:middle line:90%,end
<c.magenta>这些字体是系统的一部分</c>

00:22:45.032 --> 00:22:46.900 align:middle line:90%,end
<c.magenta>但是没有和系统一起发货</c>

00:22:47.267 --> 00:22:49.036 align:middle line:90%,end
<c.magenta>所以现在有了这个API</c>
<c.magenta>而非获得</c>

00:22:49.102 --> 00:22:50.437 align:middle line:90%,end
<c.magenta>默认的同步UI</c>

00:22:50.604 --> 00:22:52.439 align:middle line:90%,end
<c.magenta>你可以组成异步UI</c>

00:22:52.506 --> 00:22:54.174 align:middle line:90%,end
<c.magenta>直接在你的应用中</c>

00:22:54.541 --> 00:22:57.845 align:middle line:90%,end
<c.magenta>最后对于Text</c>
<c.magenta>我们支持纳斯达力格字体脚本</c>

00:22:58.111 --> 00:22:59.546 align:middle line:90%,end
<c.magenta>纳斯达力格字体是一种书写方式</c>

00:22:59.613 --> 00:23:02.216 align:middle line:90%,end
<c.magenta>在阿拉伯手写体</c>
<c.magenta>用于诸如乌尔都语</c>

00:22:59.613 --> 00:23:02.216 align:middle line:90%,end
<c.magenta>在阿拉伯手写体</c>
<c.magenta>用于诸如乌尔都语</c>

00:23:02.449 --> 00:23:03.617 align:middle line:90%,end
<c.magenta>这是个引人注目的字体</c>

00:23:03.784 --> 00:23:06.753 align:middle line:90%,end
<c.magenta>为了正确渲染</c>
<c.magenta>它需要一些输入设定</c>

00:23:06.820 --> 00:23:10.791 align:middle line:90%,end
<c.magenta>在Cocoa Text系统中</c>
<c.magenta>我们终于支持它了</c>

00:23:11.258 --> 00:23:12.860 align:middle line:90%,end
<c.magenta>我们可以给你举个例子</c>

00:23:13.227 --> 00:23:16.063 align:middle line:90%,end
<c.magenta>这是Nastaliq单词</c>
<c.magenta>用传统字体渲染</c>

00:23:16.396 --> 00:23:19.166 align:middle line:90%,end
<c.magenta>这是同样的单词</c>
<c.magenta>用纳斯达力格字体脚本渲染</c>

00:23:19.233 --> 00:23:22.669 align:middle line:90%,end
<c.magenta>因为流动的对角线性质</c>
<c.magenta>你可以看到为什么这是挑战</c>

00:23:24.104 --> 00:23:27.107 align:middle line:90%,end
<c.magenta>一些光彩的AppKit特性提到了</c>

00:23:27.741 --> 00:23:31.078 align:middle line:90%,end
<c.magenta>NSSegmentedControl</c>
<c.magenta>有对齐和分布特征</c>

00:23:31.144 --> 00:23:33.847 align:middle line:90%,end
<c.magenta>这给了你更多布局控制</c>

00:23:34.181 --> 00:23:36.783 align:middle line:90%,end
<c.magenta>NSLevelIndicator</c>
<c.magenta>有精心优化的新外观</c>

00:23:36.850 --> 00:23:38.485 align:middle line:90%,end
<c.magenta>一些API优化也有</c>

00:23:39.520 --> 00:23:42.289 align:middle line:90%,end
<c.magenta>NSMenuItem使你能有</c>
<c.magenta>一个KeyEquivalentWhenHidden</c>

00:23:42.356 --> 00:23:45.259 align:middle line:90%,end
<c.magenta>所以你可以有</c>
<c.magenta>额外的键等价物在你的菜单里</c>

00:23:45.459 --> 00:23:51.465 align:middle line:90%,end
<c.magenta>NSTableView能让你使用</c>
<c.magenta>自动布局自动计算行高度</c>

00:23:53.433 --> 00:23:55.669 align:middle line:90%,end
<c.magenta>我们有异步</c>
<c.magenta>可恢复状态编码</c>

00:23:55.736 --> 00:23:59.006 align:middle line:90%,end
<c.magenta>意味着实现状态保持和恢复的对象</c>

00:23:59.072 --> 00:24:02.242 align:middle line:90%,end
<c.magenta>可以异步进行</c>
<c.magenta>如果有性能</c>

00:23:59.072 --> 00:24:02.242 align:middle line:90%,end
<c.magenta>可以异步进行</c>
<c.magenta>如果有性能</c>

00:24:02.309 --> 00:24:05.412 align:middle line:90%,end
<c.magenta>在它们运行时 潜在性能会发挥出来</c>

00:24:07.047 --> 00:24:09.816 align:middle line:10%
<c.magenta>在拖拽的过程中</c>
<c.magenta>我们改进了大量条目的处理</c>

00:24:10.050 --> 00:24:11.785 align:middle line:10%
<c.magenta>当你在屏幕中拖拽一个大图片时</c>

00:24:11.852 --> 00:24:13.387 align:middle line:10%
<c.magenta>现在它会自动地缩小</c>

00:24:13.453 --> 00:24:15.756 align:middle line:10%
<c.magenta>这样你就可以看到拖到了哪里</c>

00:24:16.223 --> 00:24:18.959 align:middle line:10%
<c.magenta>最后 NSDrawers被舍弃了</c>

00:24:19.426 --> 00:24:24.064 align:middle line:10%
<c.magenta>若你想知道何谓NSDrawers</c>
<c.magenta>它们是什么？</c>

00:24:24.131 --> 00:24:26.500 align:middle line:90%,end
<c.magenta>好吧 不要担心了</c>
<c.magenta>因为它们已经被舍弃了</c>

00:24:28.368 --> 00:24:33.340 align:middle line:90%,end
<c.magenta>好的 在我把舞台交给达芙妮之前</c>
<c.magenta>还有两个事情</c>

00:24:33.607 --> 00:24:34.608 align:middle line:90%,end
<c.magenta>首先 容器视图</c>

00:24:34.975 --> 00:24:37.077 align:middle line:90%,end
<c.magenta>在Cocoa中有很多容器视图</c>

00:24:37.144 --> 00:24:39.413 align:middle line:90%,end
<c.magenta>NSBrowser、TableView、OutlineView</c>

00:24:39.479 --> 00:24:41.682 align:middle line:90%,end
<c.magenta>CollectionView</c>
<c.magenta>StackView和GridView</c>

00:24:42.049 --> 00:24:44.985 align:middle line:10%
<c.magenta>如果你困惑如何在它们中间选择</c>
<c.magenta>我要告诉你一件事情</c>

00:24:45.586 --> 00:24:48.956 align:middle line:10%
<c.magenta>今天下午3:10演讲</c>
<c.magenta>“选择正确的Cocoa容器视图”</c>

00:24:49.656 --> 00:24:50.557 align:middle line:90%,end
<c.magenta>所以大家都要来</c>

00:24:50.624 --> 00:24:52.960 align:middle line:90%,end
<c.magenta>它们中哪个是最好的容器视图呢？</c>

00:24:53.460 --> 00:24:55.362 align:middle line:90%,end
<c.magenta>或者不仅有一个最好的</c>

00:24:56.296 --> 00:24:57.798 align:middle line:90%,end
<c.magenta>接下来 我有一个问题问你们</c>

00:24:59.066 --> 00:25:02.202 align:middle line:90%,end
<c.magenta>当你调试应用时 你尝试过调用打印</c>

00:24:59.066 --> 00:25:02.202 align:middle line:90%,end
<c.magenta>当你调试应用时 你尝试过调用打印</c>

00:25:02.669 --> 00:25:04.505 align:middle line:90%,end
<c.magenta>而不是显示那个对象</c>

00:25:04.571 --> 00:25:05.873 align:middle line:90%,end
<c.magenta>缝补你要打印的对象</c>

00:25:05.939 --> 00:25:09.610 align:middle line:90%,end
<c.magenta>你得到像这样的一个面板？</c>
<c.magenta>你们中的有人可能有过这样的经历</c>

00:25:09.676 --> 00:25:12.212 align:middle line:90%,end
<c.magenta>所以在NSView的子类中</c>
<c.magenta>打印是含糊的</c>

00:25:12.446 --> 00:25:14.815 align:middle line:90%,end
<c.magenta>它会尝试让你打印你的应用</c>

00:25:15.148 --> 00:25:16.617 align:middle line:90%,end
<c.magenta>花费很多张纸</c>

00:25:17.484 --> 00:25:19.186 align:middle line:90%,end
<c.magenta>我不是说那很糟糕</c>

00:25:19.486 --> 00:25:20.521 align:middle line:90%,end
<c.magenta>离开电脑</c>

00:25:20.654 --> 00:25:23.690 align:middle line:90%,end
<c.magenta>一些纸有时是调试问题最好的方式</c>

00:25:23.957 --> 00:25:25.626 align:middle line:90%,end
<c.magenta>但是通常不是你真正想要的</c>

00:25:25.959 --> 00:25:27.427 align:middle line:90%,end
<c.magenta>所以我们有一个API改变</c>

00:25:28.262 --> 00:25:30.864 align:middle line:90%,end
<c.magenta>NSWindow和NSView和NSWindows</c>
<c.magenta>打印方法</c>

00:25:30.931 --> 00:25:33.267 align:middle line:90%,end
<c.magenta>被重命名为</c>
<c.magenta>printView和printWindow</c>

00:25:33.734 --> 00:25:37.905 align:middle line:90%,end
<c.magenta>现在Swift 4中</c>
<c.magenta>给你一个小技巧 迁移和获利</c>

00:25:38.605 --> 00:25:41.708 align:middle line:90%,end
<c.magenta>说到小技巧</c>
<c.magenta>请务必去参加这个演讲：</c>

00:25:41.775 --> 00:25:44.645 align:middle line:90%,end
<c.magenta>周五早上9:00</c>
<c.magenta>Cocoa开发小技巧</c>

00:25:45.045 --> 00:25:46.547 align:middle line:90%,end
<c.magenta>那里你可以听到更多的小技巧</c>

00:25:47.080 --> 00:25:48.749 align:middle line:90%,end
<c.magenta>坦白地说 我真的不知道</c>

00:25:48.815 --> 00:25:51.018 align:middle line:90%,end
<c.magenta>有多少 因为我们数不清</c>
<c.magenta>我们有多少小技巧了</c>

00:25:51.185 --> 00:25:52.419 align:middle line:90%,end
<c.magenta>你们可以自己数一数</c>

00:25:52.953 --> 00:25:56.356 align:middle line:90%,end
<c.magenta>我们也想给你这个机会</c>
<c.magenta>把你们自己的小技巧分享给所有人</c>

00:25:57.391 --> 00:26:00.060 align:middle line:90%,end
<c.magenta>所以 如果你知道任何有用的</c>
<c.magenta>Cocoa开发小技巧</c>

00:25:57.391 --> 00:26:00.060 align:middle line:90%,end
<c.magenta>所以 如果你知道任何有用的</c>
<c.magenta>Cocoa开发小技巧</c>

00:26:00.127 --> 00:26:01.495 align:middle line:90%,end
<c.magenta>要分享给开发者</c>

00:26:01.562 --> 00:26:05.365 align:middle line:90%,end
<c.magenta>请在Twitter上发布</c>
<c.magenta>加上标签#WWDC17和#cocoatip</c>

00:26:05.699 --> 00:26:09.069 align:middle line:90%,end
<c.magenta>你的小技巧可能会出现在</c>
<c.magenta>周五的演讲中</c>

00:26:09.436 --> 00:26:12.940 align:middle line:90%,end
<c.magenta>好了 我要邀请我的同事</c>
<c.magenta>达芙妮上台 谢谢</c>

00:26:17.845 --> 00:26:21.381 align:middle line:90%,end
<c.magenta>大家好 我叫达芙妮·拉罗斯</c>
<c.magenta>我是Foundation团队的工程师</c>

00:26:22.449 --> 00:26:26.720 align:middle line:90%,end
<c.magenta>我们以Foundation中</c>
<c.magenta>两个大的新事物作为开始</c>

00:26:26.954 --> 00:26:28.922 align:middle line:90%,end
<c.magenta>我们对键径有了更好的支持</c>

00:26:29.423 --> 00:26:32.326 align:middle line:90%,end
<c.magenta>我们也支持Swift中编码和解码</c>

00:26:32.893 --> 00:26:34.194 align:middle line:90%,end
<c.magenta>我们从键径开始谈起</c>

00:26:34.728 --> 00:26:38.465 align:middle line:90%,end
<c.magenta>我们现在有一些字面语法</c>
<c.magenta>它是类型安全的和高性能的</c>

00:26:38.899 --> 00:26:42.836 align:middle line:90%,end
<c.magenta>你们可能已经熟悉</c>
<c.magenta>它在Swift 3中是什么样子了</c>

00:26:44.204 --> 00:26:46.673 align:middle line:10%
<c.magenta>现在Swift 4中 它变得更加简单</c>

00:26:46.840 --> 00:26:50.344 align:middle line:10%
<c.magenta>它有一个反斜杠基础类型点</c>
<c.magenta>然后一个属性名字</c>

00:26:50.844 --> 00:26:53.213 align:middle line:90%,end
<c.magenta>它的简单性使得我们提高了</c>

00:26:53.280 --> 00:26:56.783 align:middle line:90%,end
<c.magenta>一些已经存在的API</c>
<c.magenta>比如KVO</c>

00:26:58.318 --> 00:27:01.321 align:middle line:90%,end
<c.magenta>所以在这个例子中</c>
<c.magenta>我们尝试观察</c>

00:26:58.318 --> 00:27:01.321 align:middle line:90%,end
<c.magenta>所以在这个例子中</c>
<c.magenta>我们尝试观察</c>

00:27:01.455 --> 00:27:04.558 align:middle line:90%,end
<c.magenta>在DogOwner类中</c>
<c.magenta>一个特殊的属性dog</c>

00:27:04.958 --> 00:27:08.061 align:middle line:90%,end
<c.magenta>所以在很多设置之前</c>

00:27:08.128 --> 00:27:12.866 align:middle line:90%,end
<c.magenta>你需要写很多的代码</c>
<c.magenta>现你可以得到一个基于块</c>

00:27:13.166 --> 00:27:18.839 align:middle line:90%,end
<c.magenta>基于闭包观察 它会简洁很多</c>

00:27:19.006 --> 00:27:21.575 align:middle line:90%,end
<c.magenta>简单很多 在这个例子中</c>
<c.magenta>只有两行代码</c>

00:27:21.742 --> 00:27:26.446 align:middle line:90%,end
<c.magenta>语法的简单性使得键径更加易用</c>

00:27:26.647 --> 00:27:30.184 align:middle line:90%,end
<c.magenta>对于在Swift中的编码和解码</c>
<c.magenta>我们现在支持转化</c>

00:27:30.250 --> 00:27:32.619 align:middle line:90%,end
<c.magenta>在你的类型安全Swift</c>

00:27:32.886 --> 00:27:35.856 align:middle line:90%,end
<c.magenta>和失败者格式 比如</c>
<c.magenta>JSON P-lists等等</c>

00:27:36.790 --> 00:27:38.125 align:middle line:90%,end
<c.magenta>深度定制化</c>

00:27:38.192 --> 00:27:41.195 align:middle line:90%,end
<c.magenta>所以改变定制化结构体</c>
<c.magenta>非常简单</c>

00:27:41.795 --> 00:27:43.230 align:middle line:90%,end
<c.magenta>而且使用也是相当简单</c>

00:27:43.597 --> 00:27:46.500 align:middle line:90%,end
<c.magenta>太简单了 只需要</c>

00:27:46.567 --> 00:27:48.836 align:middle line:90%,end
<c.magenta>声明你的结构体是可编码的</c>

00:27:48.902 --> 00:27:51.471 align:middle line:90%,end
<c.magenta>这样一来</c>
<c.magenta>你不需要写任何样板代码</c>

00:27:51.538 --> 00:27:55.275 align:middle line:90%,end
<c.magenta>你不需要做额外任何事情</c>
<c.magenta>你自动地获得了实现</c>

00:27:55.342 --> 00:27:58.478 align:middle line:90%,end
<c.magenta>编码和解码</c>
<c.magenta>不费吹灰之力</c>

00:28:00.247 --> 00:28:02.282 align:middle line:90%,end
<c.magenta>所以你们中可能有人已经注意到了</c>

00:28:02.349 --> 00:28:05.452 align:middle line:90%,end
<c.magenta>大约两小时后 我们将有</c>
<c.magenta>“Foundation新特性”演讲</c>

00:28:05.986 --> 00:28:09.256 align:middle line:10%
<c.magenta>那会对我们很有用</c>
<c.magenta>因为它让我们有时间</c>

00:28:09.323 --> 00:28:12.059 align:middle line:10%
<c.magenta>谈论Foundation中</c>
<c.magenta>其它的新特性</c>

00:28:12.593 --> 00:28:16.096 align:middle line:90%,end
<c.magenta>所以我会更深入地讲一讲</c>
<c.magenta>所以我们有了很多新的API</c>

00:28:16.163 --> 00:28:20.501 align:middle line:90%,end
<c.magenta>在macOS和iOS上</c>
<c.magenta>有很多改进的API</c>

00:28:21.001 --> 00:28:25.005 align:middle line:90%,end
<c.magenta>顺便说一下 我们以iOS上的</c>
<c.magenta>NSXPCConnection作为开始</c>

00:28:25.272 --> 00:28:31.111 align:middle line:90%,end
<c.magenta>它允许编写者</c>
<c.magenta>以一种前所未有的方式发布进度</c>

00:28:31.311 --> 00:28:35.516 align:middle line:90%,end
<c.magenta>我们有一个协议例子</c>
<c.magenta>被客户端和服务器共享</c>

00:28:35.949 --> 00:28:37.584 align:middle line:90%,end
<c.magenta>之前它返回空</c>

00:28:37.918 --> 00:28:40.220 align:middle line:90%,end
<c.magenta>现在它返回NSProgress</c>

00:28:40.287 --> 00:28:42.890 align:middle line:90%,end
<c.magenta>这样的好处是它允许服务器</c>

00:28:42.956 --> 00:28:48.362 align:middle line:90%,end
<c.magenta>返回一个进度给客户端</c>
<c.magenta>在它返回回复之前</c>

00:28:49.296 --> 00:28:53.767 align:middle line:10%
<c.magenta>当它们发生的时候 客户端实际上</c>
<c.magenta>可以看到这些实时的更新</c>

00:28:58.238 --> 00:29:03.076 align:middle line:90%,end
<c.magenta>URLSession现在有一个新的</c>
<c.magenta>布尔属性 它允许URLSession</c>

00:28:58.238 --> 00:29:03.076 align:middle line:90%,end
<c.magenta>URLSession现在有一个新的</c>
<c.magenta>布尔属性 它允许URLSession</c>

00:29:03.143 --> 00:29:06.213 align:middle line:90%,end
<c.magenta>为你监测连接性</c>

00:29:06.380 --> 00:29:09.683 align:middle line:90%,end
<c.magenta>所以它会等待开始你的</c>
<c.magenta>URLSessionTasks</c>

00:29:10.017 --> 00:29:13.854 align:middle line:90%,end
<c.magenta>直到连接性达到满意程度</c>
<c.magenta>所以不再会有手动的重试</c>

00:29:13.921 --> 00:29:17.424 align:middle line:90%,end
<c.magenta>如果网络条件不好</c>
<c.magenta>你一点都不需要担心了</c>

00:29:17.491 --> 00:29:19.326 align:middle line:90%,end
<c.magenta>设置这个属性为你处理了</c>

00:29:19.493 --> 00:29:22.563 align:middle line:90%,end
<c.magenta>现在 如果你选择不去设置它</c>
<c.magenta>也没有关系 那是你的选择</c>

00:29:22.629 --> 00:29:24.631 align:middle line:90%,end
<c.magenta>但是它会回到旧行为</c>

00:29:25.599 --> 00:29:28.368 align:middle line:90%,end
<c.magenta>现在iOS上已有多路TCP了</c>

00:29:28.902 --> 00:29:33.674 align:middle line:90%,end
<c.magenta>URLSessionTask 比如NSXPCConnection</c>
<c.magenta>现在支持进度报告</c>

00:29:35.309 --> 00:29:37.044 align:middle line:90%,end
<c.magenta>关于这个 我们会在</c>

00:29:37.110 --> 00:29:40.747 align:middle line:90%,end
<c.magenta>今天晚些时候第二部分</c>
<c.magenta>“网络改进”演讲中谈论更多</c>

00:29:40.814 --> 00:29:43.951 align:middle line:90%,end
<c.magenta>第一部分也会很精彩</c>
<c.magenta>所以你最好也去看一下</c>

00:29:45.652 --> 00:29:50.958 align:middle line:90%,end
<c.magenta>NSFileProviderService</c>
<c.magenta>现在支持更加直接的通信</c>

00:29:51.058 --> 00:29:53.460 align:middle line:90%,end
<c.magenta>在应用和文件提供者之间</c>

00:29:53.794 --> 00:29:57.030 align:middle line:90%,end
<c.magenta>对于那些不知道的人</c>
<c.magenta>文件提供者是</c>

00:29:57.164 --> 00:29:58.799 align:middle line:90%,end
<c.magenta>拥有和管理文档的应用扩展对</c>

00:29:59.032 --> 00:30:02.135 align:middle line:90%,end
<c.magenta>它们也同步那些文档到私有的云服务</c>

00:29:59.032 --> 00:30:02.135 align:middle line:90%,end
<c.magenta>它们也同步那些文档到私有的云服务</c>

00:30:02.202 --> 00:30:04.938 align:middle line:90%,end
<c.magenta>它们可以使其他应用可访问那些文件</c>

00:30:06.106 --> 00:30:08.709 align:middle line:90%,end
<c.magenta>在这个API中 应用可以</c>

00:30:08.876 --> 00:30:11.411 align:middle line:90%,end
<c.magenta>对于任何URL 更加简单地</c>
<c.magenta>发现文件提供者</c>

00:30:11.845 --> 00:30:15.382 align:middle line:90%,end
<c.magenta>而且它们可以使用</c>
<c.magenta>这些文件提供者提供的专业服务</c>

00:30:15.716 --> 00:30:17.751 align:middle line:90%,end
<c.magenta>周五会有一个相关演讲</c>

00:30:17.818 --> 00:30:19.820 align:middle line:90%,end
<c.magenta>所以如果你想要更多的信息</c>
<c.magenta>你应该去看看</c>

00:30:21.655 --> 00:30:25.792 align:middle line:90%,end
<c.magenta>好消息是我们为</c>
<c.magenta>NSXPCConnection所做的改变</c>

00:30:25.959 --> 00:30:28.328 align:middle line:90%,end
<c.magenta>我们为URLSession所做的改变</c>
<c.magenta>实际上是</c>

00:30:28.395 --> 00:30:31.698 align:middle line:90%,end
<c.magenta>都与我们为NSFileProviderService</c>
<c.magenta>所做的改变有关</c>

00:30:31.765 --> 00:30:33.300 align:middle line:90%,end
<c.magenta>所以把它们全部连起来</c>

00:30:33.433 --> 00:30:35.869 align:middle line:90%,end
<c.magenta>我们回到前面提过的协议</c>

00:30:36.637 --> 00:30:38.172 align:middle line:90%,end
<c.magenta>我们有一个应用 我们的客户端</c>

00:30:38.238 --> 00:30:40.107 align:middle line:90%,end
<c.magenta>而且我也有一个文件提供者</c>
<c.magenta>我们的服务器</c>

00:30:40.307 --> 00:30:44.511 align:middle line:90%,end
<c.magenta>这个应用调用文件提供者</c>
<c.magenta>得到一个NSProgress对象</c>

00:30:46.713 --> 00:30:50.250 align:middle line:90%,end
<c.magenta>文件提供者开始下载</c>
<c.magenta>请求的文件</c>

00:30:50.350 --> 00:30:52.386 align:middle line:90%,end
<c.magenta>使用URLSession</c>
<c.magenta>[听不清]</c>

00:30:53.153 --> 00:30:56.156 align:middle line:90%,end
<c.magenta>然后更新进度</c>
<c.magenta>所以现在非常酷的是</c>

00:30:56.323 --> 00:31:00.294 align:middle line:90%,end
<c.magenta>当更新发生时</c>
<c.magenta>应用实际上看到了这些更新</c>

00:30:56.323 --> 00:31:00.294 align:middle line:90%,end
<c.magenta>当更新发生时</c>
<c.magenta>应用实际上看到了这些更新</c>

00:31:00.794 --> 00:31:03.864 align:middle line:90%,end
<c.magenta>下载终于结束了</c>
<c.magenta>最后的更新被发出去</c>

00:31:04.198 --> 00:31:07.534 align:middle line:90%,end
<c.magenta>现在文件提供者可以</c>
<c.magenta>回复所请求的文件</c>

00:31:08.635 --> 00:31:10.037 align:middle line:90%,end
<c.magenta>让我们稍微换一下装备</c>

00:31:10.504 --> 00:31:14.775 align:middle line:90%,end
<c.magenta>我们现在有API</c>
<c.magenta>能够更准确地检查可用的存储空间</c>

00:31:14.975 --> 00:31:17.344 align:middle line:90%,end
<c.magenta>还有一种专注的感觉</c>

00:31:17.544 --> 00:31:23.684 align:middle line:90%,end
<c.magenta>我们认为它是重要的和机会主义的</c>
<c.magenta>它还是有些不清楚</c>

00:31:23.784 --> 00:31:25.485 align:middle line:90%,end
<c.magenta>对于那到底是什么意思</c>

00:31:25.552 --> 00:31:27.821 align:middle line:90%,end
<c.magenta>所以我们会更加深入地聊聊</c>

00:31:27.988 --> 00:31:32.993 align:middle line:90%,end
<c.magenta>假设我们有一个空间</c>
<c.magenta>它有任意数量的空闲磁盘空间</c>

00:31:34.194 --> 00:31:39.533 align:middle line:90%,end
<c.magenta>机会主义代表用户并不期望在那里的</c>

00:31:39.600 --> 00:31:42.436 align:middle line:90%,end
<c.magenta>任意文件和免费空间</c>

00:31:42.569 --> 00:31:46.440 align:middle line:90%,end
<c.magenta>例如一首播客的老曲子</c>

00:31:46.640 --> 00:31:48.642 align:middle line:90%,end
<c.magenta>用户已经听过了</c>

00:31:50.511 --> 00:31:55.048 align:middle line:90%,end
<c.magenta>重要代表免费和机会主义以及</c>

00:31:55.115 --> 00:31:59.286 align:middle line:90%,end
<c.magenta>用户确实期望在那里 但是</c>
<c.magenta>最终是可替代可删除的任何文件</c>

00:31:59.653 --> 00:32:01.655 align:middle line:90%,end
<c.magenta>音频文件就是一个例子</c>

00:31:59.653 --> 00:32:01.655 align:middle line:90%,end
<c.magenta>音频文件就是一个例子</c>

00:32:01.722 --> 00:32:05.058 align:middle line:90%,end
<c.magenta>用户要求下载的</c>
<c.magenta>他们期望它在那里</c>

00:32:05.292 --> 00:32:08.328 align:middle line:90%,end
<c.magenta>然而 如果为了腾出空间而去移除它</c>

00:32:08.462 --> 00:32:10.497 align:middle line:90%,end
<c.magenta>他们也可以要求再次下载</c>

00:32:12.599 --> 00:32:15.169 align:middle line:90%,end
<c.magenta>好消息是作为开发者的你们</c>

00:32:15.235 --> 00:32:16.970 align:middle line:90%,end
<c.magenta>现在可以做预检</c>

00:32:17.037 --> 00:32:21.308 align:middle line:90%,end
<c.magenta>在这个例子中 我们实际上检查</c>
<c.magenta>有多少机会主义空间可用</c>

00:32:21.475 --> 00:32:25.612 align:middle line:90%,end
<c.magenta>如果超过了50兆</c>
<c.magenta>我们继续下载另外的文件</c>

00:32:25.679 --> 00:32:28.715 align:middle line:90%,end
<c.magenta>这些检查的好处是你可以预先做</c>

00:32:28.782 --> 00:32:30.951 align:middle line:90%,end
<c.magenta>在你真的写入很多数据到磁盘之前</c>

00:32:31.351 --> 00:32:34.388 align:middle line:90%,end
<c.magenta>这里暗指的是检查</c>

00:32:34.555 --> 00:32:37.257 align:middle line:90%,end
<c.magenta>“嘿 我们有足够的空间给</c>

00:32:37.391 --> 00:32:39.459 align:middle line:90%,end
<c.magenta>我们将要下载的文件吗？”</c>

00:32:41.762 --> 00:32:45.365 align:middle line:90%,end
<c.magenta>所以NSLinguisticTagger</c>
<c.magenta>现在支持标志单元</c>

00:32:45.699 --> 00:32:51.038 align:middle line:90%,end
<c.magenta>通过单词、句子、段落</c>
<c.magenta>也可以通过引理进行标志</c>

00:32:52.272 --> 00:32:54.675 align:middle line:90%,end
<c.magenta>API完全被重做和修改</c>

00:32:55.075 --> 00:32:58.879 align:middle line:90%,end
<c.magenta>现在它有一些简便的方法</c>
<c.magenta>包括dominantLanguage</c>

00:32:58.946 --> 00:33:02.115 align:middle line:90%,end
<c.magenta>现在你可以检测给定字符串的</c>
<c.magenta>dominantLanguage</c>

00:32:58.946 --> 00:33:02.115 align:middle line:90%,end
<c.magenta>现在你可以检测给定字符串的</c>
<c.magenta>dominantLanguage</c>

00:33:02.983 --> 00:33:05.452 align:middle line:90%,end
<c.magenta>JSONSerialization</c>
<c.magenta>支持排序的键</c>

00:33:05.686 --> 00:33:09.957 align:middle line:90%,end
<c.magenta>我们可以说我们有一个词典</c>
<c.magenta>它有任意组键值对</c>

00:33:10.724 --> 00:33:13.493 align:middle line:90%,end
<c.magenta>当你序列化这个词典 然后打印它</c>

00:33:13.694 --> 00:33:15.562 align:middle line:90%,end
<c.magenta>值以随意的顺序被打印出来</c>

00:33:16.163 --> 00:33:19.800 align:middle line:90%,end
<c.magenta>但你现可以添加这个sortedKeys选项</c>
<c.magenta>让它们按照顺序打印</c>

00:33:19.867 --> 00:33:24.238 align:middle line:90%,end
<c.magenta>一个重要的使用例子是</c>
<c.magenta>可以区分JSON文件</c>

00:33:24.304 --> 00:33:28.475 align:middle line:90%,end
<c.magenta>它可以提高可读性 也会好很多</c>

00:33:28.742 --> 00:33:30.811 align:middle line:90%,end
<c.magenta>这曾经是一个被强烈要求的功能</c>

00:33:30.878 --> 00:33:33.514 align:middle line:90%,end
<c.magenta>所以我们很高兴将其提供给你们</c>

00:33:38.519 --> 00:33:41.722 align:middle line:90%,end
<c.magenta>NSItemProvider</c>
<c.magenta>现在可以使它的操作更加明确</c>

00:33:42.122 --> 00:33:47.127 align:middle line:90%,end
<c.magenta>它也支持进度报告 比如</c>
<c.magenta>NSXPCConnection和URLSession</c>

00:33:47.294 --> 00:33:48.929 align:middle line:90%,end
<c.magenta>你可能看到了趋势</c>

00:33:49.263 --> 00:33:51.698 align:middle line:90%,end
<c.magenta>它也允许你增强自定义类</c>

00:33:51.765 --> 00:33:54.868 align:middle line:90%,end
<c.magenta>与多个陈述一起 比如数据</c>

00:33:55.969 --> 00:33:58.605 align:middle line:90%,end
<c.magenta>所以我们在这个版本API</c>
<c.magenta>和发布上花费大量心思</c>

00:33:58.672 --> 00:34:02.576 align:middle line:90%,end
<c.magenta>实际上是被我们在iOS上的</c>
<c.magenta>添加的拖放功能所激励的</c>

00:33:58.672 --> 00:34:02.576 align:middle line:90%,end
<c.magenta>实际上是被我们在iOS上的</c>
<c.magenta>添加的拖放功能所激励的</c>

00:34:02.809 --> 00:34:06.613 align:middle line:90%,end
<c.magenta>所以若你想知道更多相关内容</c>
<c.magenta>你可以关注一下周四的演讲</c>

00:34:08.215 --> 00:34:11.518 align:middle line:90%,end
<c.magenta>NSUserActivity已经有</c>
<c.magenta>一个webpageURL属性</c>

00:34:11.985 --> 00:34:16.223 align:middle line:90%,end
<c.magenta>但是现在你可以指定链接</c>
<c.magenta>指向那个webpageURL</c>

00:34:16.290 --> 00:34:17.524 align:middle line:90%,end
<c.magenta>这是非常方便的</c>

00:34:18.926 --> 00:34:22.696 align:middle line:90%,end
<c.magenta>现在我们为好几个类</c>
<c.magenta>添加了新的可用API</c>

00:34:22.763 --> 00:34:26.333 align:middle line:90%,end
<c.magenta>这允许更好的错误处理和方便的方法</c>

00:34:26.500 --> 00:34:28.569 align:middle line:90%,end
<c.magenta>接收URL而不是字符串</c>

00:34:28.902 --> 00:34:33.139 align:middle line:90%,end
<c.magenta>而且举个例子[听不清]</c>
<c.magenta>NSTasks 你看到它使用一个URL</c>

00:34:33.340 --> 00:34:35.676 align:middle line:90%,end
<c.magenta>也返回一个NSError</c>

00:34:35.943 --> 00:34:40.848 align:middle line:90%,end
<c.magenta>所以 处理中 它抛出</c>
<c.magenta>而不是提出一个异常</c>

00:34:44.518 --> 00:34:50.791 align:middle line:90%,end
<c.magenta>对于NSDictionary和NSArray</c>
<c.magenta>已经有一些处理错误的方法</c>

00:34:50.858 --> 00:34:55.429 align:middle line:90%,end
<c.magenta>但是现在我们有了更易用的方便方法</c>

00:34:55.495 --> 00:34:59.066 align:middle line:90%,end
<c.magenta>更加简洁 帮助你做正确的事情</c>
<c.magenta>这是非常好的</c>

00:35:01.001 --> 00:35:05.939 align:middle line:90%,end
<c.magenta>在NSError 我们有一个新键</c>
<c.magenta>使你能展示这个错误</c>

00:35:06.006 --> 00:35:07.741 align:middle line:90%,end
<c.magenta>以一种与用户更加关联的方式</c>

00:35:07.808 --> 00:35:09.977 align:middle line:90%,end
<c.magenta>所以你可以定制“什么失败了”</c>

00:35:10.043 --> 00:35:14.014 align:middle line:90%,end
<c.magenta>同时仍然保持“为什么它失败了”</c>
<c.magenta>举个这样的例子</c>

00:35:14.815 --> 00:35:17.417 align:middle line:90%,end
<c.magenta>这个错误消息 非常正经的消息</c>

00:35:17.518 --> 00:35:20.254 align:middle line:90%,end
<c.magenta>然而 它有一些信息</c>
<c.magenta>可能不一定是</c>

00:35:20.454 --> 00:35:24.458 align:middle line:90%,end
<c.magenta>与用户特别相关</c>
<c.magenta>比如ImgDatabaseV2</c>

00:35:25.092 --> 00:35:29.396 align:middle line:90%,end
<c.magenta>对于它们 可能意味着任何东西</c>
<c.magenta>是吧？现在有了这个新的键</c>

00:35:29.530 --> 00:35:33.200 align:middle line:90%,end
<c.magenta>你可以给它们一个错误</c>
<c.magenta>仍然传递同样的信息</c>

00:35:33.267 --> 00:35:36.003 align:middle line:90%,end
<c.magenta>同样的错误</c>
<c.magenta>但是以一种更易接受的方式</c>

00:35:36.103 --> 00:35:37.838 align:middle line:90%,end
<c.magenta>对于用户也更加容易理解</c>

00:35:39.940 --> 00:35:42.776 align:middle line:90%,end
<c.magenta>现在我们可以在NSRanges</c>

00:35:42.843 --> 00:35:47.748 align:middle line:90%,end
<c.magenta>和Swift之间更加简单地转换</c>
<c.magenta>所以在这个例子中 非常好</c>

00:35:49.116 --> 00:35:51.985 align:middle line:90%,end
<c.magenta>在这个例子中 我们使用了</c>
<c.magenta>NSRegularExpression</c>

00:35:52.152 --> 00:35:55.923 align:middle line:90%,end
<c.magenta>它只接收了NSRange</c>
<c.magenta>然后我们有一个初始化</c>

00:35:55.989 --> 00:35:59.159 align:middle line:90%,end
<c.magenta>对于NSRange 它接收了</c>
<c.magenta>一个Swift范围和一个Swift字符串</c>

00:35:59.693 --> 00:36:01.828 align:middle line:90%,end
<c.magenta>另一方面</c>
<c.magenta>我们有一个初始化器</c>

00:35:59.693 --> 00:36:01.828 align:middle line:90%,end
<c.magenta>另一方面</c>
<c.magenta>我们有一个初始化器</c>

00:36:01.895 --> 00:36:04.765 align:middle line:90%,end
<c.magenta>和接收一个NSRange和</c>
<c.magenta>同样Swift字符串的范围</c>

00:36:05.032 --> 00:36:07.768 align:middle line:90%,end
<c.magenta>所以如你所见</c>
<c.magenta>更加简洁 更加简单</c>

00:36:07.835 --> 00:36:10.938 align:middle line:90%,end
<c.magenta>对于那些受苦于写这个代码的人</c>

00:36:11.171 --> 00:36:14.107 align:middle line:90%,end
<c.magenta>我希望这能让你开心</c>
<c.magenta>因为这是非常好的</c>

00:36:15.108 --> 00:36:18.278 align:middle line:90%,end
<c.magenta>在这个Foundation的版本中</c>
<c.magenta>我们有很多性能提升</c>

00:36:18.345 --> 00:36:19.479 align:middle line:90%,end
<c.magenta>这是非常令人兴奋的</c>

00:36:19.880 --> 00:36:23.450 align:middle line:90%,end
<c.magenta>我们现支持了写时拷贝技术</c>
<c.magenta>和几个容器</c>

00:36:23.617 --> 00:36:26.854 align:middle line:90%,end
<c.magenta>这意味着复制</c>
<c.magenta>已经从容器初始创建被移动</c>

00:36:26.920 --> 00:36:31.158 align:middle line:90%,end
<c.magenta>到容器第一次发生了突变</c>

00:36:31.525 --> 00:36:34.628 align:middle line:90%,end
<c.magenta>它为了更快创建</c>

00:36:34.862 --> 00:36:37.731 align:middle line:90%,end
<c.magenta>你可以只创建它们</c>
<c.magenta>然后需要的时候扔掉它们</c>

00:36:38.999 --> 00:36:42.035 align:middle line:90%,end
<c.magenta>数据现在你的应用中 使它更快</c>

00:36:42.202 --> 00:36:46.473 align:middle line:90%,end
<c.magenta>它就更快了</c>
<c.magenta>而且它也是自己的子类型</c>

00:36:47.875 --> 00:36:52.579 align:middle line:90%,end
<c.magenta>通过NSCalendar的</c>
<c.magenta>历法计算现在快了很多</c>

00:36:52.646 --> 00:36:57.184 align:middle line:90%,end
<c.magenta>准确很多</c>
<c.magenta>也花费了更少的内存</c>

00:36:58.819 --> 00:37:02.589 align:middle line:90%,end
<c.magenta>我们也支持更快从/到Swift</c>
<c.magenta>桥接到NSNumber</c>

00:36:58.819 --> 00:37:02.589 align:middle line:90%,end
<c.magenta>我们也支持更快从/到Swift</c>
<c.magenta>桥接到NSNumber</c>

00:37:03.056 --> 00:37:06.860 align:middle line:10%
<c.magenta>我们在周五1:15有一场演讲</c>
<c.magenta>会对这些深入探讨</c>

00:37:06.927 --> 00:37:08.562 align:middle line:10%
<c.magenta>我强烈推荐你们去参加</c>

00:37:10.097 --> 00:37:14.134 align:middle line:90%,end
<c.magenta>我确定你们中很多人知道了</c>
<c.magenta>NSArchiver和NSUnarchiver</c>

00:37:14.201 --> 00:37:18.105 align:middle line:90%,end
<c.magenta>在10.4中被替代了</c>
<c.magenta>现在它们正式被舍弃了</c>

00:37:18.405 --> 00:37:20.440 align:middle line:90%,end
<c.magenta>但是 旧格式还是支持的</c>

00:37:20.541 --> 00:37:23.210 align:middle line:90%,end
<c.magenta>所以你仍然可以</c>
<c.magenta>通过NSUnarchiver解压</c>

00:37:23.510 --> 00:37:26.847 align:middle line:90%,end
<c.magenta>但是 代表Cocoa框架部门</c>

00:37:27.147 --> 00:37:31.718 align:middle line:90%,end
<c.magenta>我们要求你们从现在开始使用</c>
<c.magenta>NSKeyedArchiver 谢谢</c>

00:37:32.452 --> 00:37:34.855 align:middle line:90%,end
<c.magenta>Core Data现在有一些</c>
<c.magenta>新的索引功能</c>

00:37:34.922 --> 00:37:37.124 align:middle line:90%,end
<c.magenta>也支持持续性历史</c>

00:37:37.591 --> 00:37:39.693 align:middle line:90%,end
<c.magenta>现在macOS上也有</c>
<c.magenta>Core Spotlight了</c>

00:37:39.760 --> 00:37:42.196 align:middle line:90%,end
<c.magenta>在iOS上有热通知</c>

00:37:42.796 --> 00:37:47.467 align:middle line:10%
<c.magenta>所以他们会在演讲中谈到更多细节</c>

00:37:47.534 --> 00:37:48.936 align:middle line:10%
<c.magenta>本周将有这些演讲</c>

00:37:49.002 --> 00:37:51.605 align:middle line:10%
<c.magenta>事实上 Core Data的演讲</c>
<c.magenta>就在这个后面</c>

00:37:52.005 --> 00:37:53.407 align:middle line:10%
<c.magenta>所以你要使用时间转换器</c>

00:37:53.473 --> 00:37:55.976 align:middle line:10%
<c.magenta>这样你就可以</c>
<c.magenta>在触控条演讲或者那个演讲</c>

00:37:56.877 --> 00:38:02.015 align:middle line:90%,end
<c.magenta>总结一下</c>
<c.magenta>阿里端上了API优化的开胃菜</c>

00:37:56.877 --> 00:38:02.015 align:middle line:90%,end
<c.magenta>总结一下</c>
<c.magenta>阿里端上了API优化的开胃菜</c>

00:38:02.115 --> 00:38:03.951 align:middle line:90%,end
<c.magenta>以及第一道AppKit的主菜</c>

00:38:04.151 --> 00:38:06.286 align:middle line:90%,end
<c.magenta>我端上了第二道主菜Foundation</c>

00:38:06.486 --> 00:38:09.122 align:middle line:90%,end
<c.magenta>作为甜点 我将告诉你们</c>
<c.magenta>发布版本记录</c>

00:38:09.256 --> 00:38:12.693 align:middle line:90%,end
<c.magenta>建议你们自己去看看</c>
<c.magenta>获得很多事例代码</c>

00:38:12.759 --> 00:38:16.129 align:middle line:90%,end
<c.magenta>以及对于大量的改动的详尽解释</c>

00:38:16.196 --> 00:38:18.198 align:middle line:90%,end
<c.magenta>和改进 那些是我们这个版本发布的</c>

00:38:18.398 --> 00:38:20.834 align:middle line:90%,end
<c.magenta>欲知更多信息</c>
<c.magenta>你可以查看这个链接</c>

00:38:21.201 --> 00:38:23.604 align:middle line:90%,end
<c.magenta>另一个提醒是</c>
<c.magenta>在Twitter上发布你们的小技巧</c>

00:38:23.770 --> 00:38:27.307 align:middle line:90%,end
<c.magenta>有可能你们的小窍门最终会展示到</c>

00:38:27.374 --> 00:38:29.543 align:middle line:90%,end
<c.magenta>周五的演讲中</c>
<c.magenta>那是非常令人兴奋的</c>

00:38:30.310 --> 00:38:33.747 align:middle line:90%,end
<c.magenta>这是一些相关的演讲</c>
<c.magenta>很多我们在本场演讲中都已经提到了</c>

00:38:34.114 --> 00:38:35.349 align:middle line:90%,end
<c.magenta>谢谢大家</c>
