WEBVTT

00:00:23.516 --> 00:00:26.866 A:middle
[掌声]

00:00:27.366 --> 00:00:29.126 A:middle
&gt;&gt; 谢谢大家 早上好

00:00:30.016 --> 00:00:31.776 A:middle
现在是会议 712

00:00:31.776 --> 00:00:32.735 A:middle
核心蓝牙的新功能介绍

00:00:33.326 --> 00:00:34.266 A:middle
我是 Craig Dooley

00:00:34.266 --> 00:00:36.056 A:middle
我是 Apple 的一名

00:00:36.056 --> 00:00:36.356 A:middle
蓝牙工程师

00:00:36.926 --> 00:00:39.416 A:middle
今天

00:00:39.416 --> 00:00:40.286 A:middle
我有很多非常好的内容

00:00:40.286 --> 00:00:42.656 A:middle
想要与大家分享

00:00:42.846 --> 00:00:44.776 A:middle
我们今天的会议

00:00:44.776 --> 00:00:45.726 A:middle
将会先对核心蓝牙做一些简短的介绍

00:00:46.336 --> 00:00:47.306 A:middle
我还会谈到一些

00:00:47.306 --> 00:00:48.906 A:middle
我们今年所实现的

00:00:48.906 --> 00:00:50.066 A:middle
一些增强的可靠性特性

00:00:50.516 --> 00:00:52.146 A:middle
提到支持的平台

00:00:52.146 --> 00:00:53.916 A:middle
在我们的努力下

00:00:53.916 --> 00:00:54.686 A:middle
wantchOS 已经在今年全面支持了

00:00:54.686 --> 00:00:56.446 A:middle
我们对此感到非常激动

00:00:56.446 --> 00:00:57.806 A:middle
今年还有的一大新特性是

00:00:57.806 --> 00:00:58.906 A:middle
L2CAP 通道

00:00:59.226 --> 00:01:00.146 A:middle
我将首先带领大家回忆一下

00:00:59.226 --> 00:01:00.146 A:middle
我将首先带领大家回忆一下

00:01:00.146 --> 00:01:01.336 A:middle
我们近年来所做的测试工作

00:01:01.336 --> 00:01:03.076 A:middle
然后

00:01:03.076 --> 00:01:05.256 A:middle
我们将做一个

00:01:05.256 --> 00:01:06.336 A:middle
真实世界的例子

00:01:06.336 --> 00:01:06.776 A:middle
来充分展示核心蓝牙

00:01:07.256 --> 00:01:09.996 A:middle
所以

00:01:09.996 --> 00:01:11.036 A:middle
我想以一个简短的介绍来开启我们今天的会议

00:01:11.256 --> 00:01:13.746 A:middle
核心蓝牙

00:01:14.106 --> 00:01:15.396 A:middle
是我们在 2011 年发布的

00:01:15.396 --> 00:01:16.676 A:middle
与低功耗蓝牙外设

00:01:16.676 --> 00:01:19.116 A:middle
和配件

00:01:19.116 --> 00:01:20.956 A:middle
交互的

00:01:20.956 --> 00:01:21.796 A:middle
框架

00:01:22.196 --> 00:01:25.226 A:middle
自从我们发布了这个框架以来

00:01:25.226 --> 00:01:27.166 A:middle
我们看到了

00:01:27.166 --> 00:01:28.816 A:middle
来自配件生产商

00:01:28.816 --> 00:01:30.226 A:middle
和 App 开发人员的

00:01:30.226 --> 00:01:30.836 A:middle
惊人创意

00:01:30.836 --> 00:01:32.066 A:middle
我们很高兴的看到你们的

00:01:32.066 --> 00:01:34.836 A:middle
骄人成果

00:01:35.026 --> 00:01:36.276 A:middle
所以当我们开始这个项目以后

00:01:36.276 --> 00:01:37.356 A:middle
我们就知道健康与健身

00:01:37.356 --> 00:01:38.576 A:middle
将成为着重发展的领域

00:01:39.166 --> 00:01:40.256 A:middle
我们看到了很多创意

00:01:40.326 --> 00:01:42.946 A:middle
如智能体重秤

00:01:43.526 --> 00:01:44.806 A:middle
运动传感器

00:01:44.806 --> 00:01:45.456 A:middle
以及可以全天穿着的健身设备

00:01:45.806 --> 00:01:47.976 A:middle
但是

00:01:47.976 --> 00:01:48.666 A:middle
很多创意光听起来就觉得很棒

00:01:48.666 --> 00:01:50.146 A:middle
就像那种看起来像玩具的产品

00:01:50.146 --> 00:01:51.646 A:middle
或者是为了小朋友们所做的外设

00:01:52.016 --> 00:01:53.626 A:middle
所以

00:01:53.626 --> 00:01:54.466 A:middle
我们非常期待 Swift Playground 今年的

00:01:54.466 --> 00:01:56.096 A:middle
更新

00:01:56.296 --> 00:01:57.396 A:middle
这让小朋友们

00:01:57.396 --> 00:01:58.666 A:middle
或者

00:01:58.666 --> 00:02:00.796 A:middle
刚刚接触编程的人

00:01:58.666 --> 00:02:00.796 A:middle
刚刚接触编程的人

00:02:01.376 --> 00:02:01.476 A:middle
也能更多地参加进来

00:02:01.686 --> 00:02:04.456 A:middle
我们喜欢看到人们

00:02:04.456 --> 00:02:06.036 A:middle
容易地通过 App 来控制传感器

00:02:06.036 --> 00:02:07.706 A:middle
按钮

00:02:07.706 --> 00:02:09.726 A:middle
或者开关

00:02:09.726 --> 00:02:11.146 A:middle
甚至

00:02:11.146 --> 00:02:11.976 A:middle
进行无线控制

00:02:12.956 --> 00:02:14.516 A:middle
之后的事情

00:02:14.516 --> 00:02:16.646 A:middle
甚至向着我们没有想象到的方向

00:02:16.646 --> 00:02:17.806 A:middle
发展了起来

00:02:18.806 --> 00:02:21.026 A:middle
比如

00:02:21.026 --> 00:02:22.836 A:middle
将护目镜

00:02:23.026 --> 00:02:24.346 A:middle
与头戴式显示器相连接

00:02:24.346 --> 00:02:25.166 A:middle
这是一个非常棒的创意

00:02:25.556 --> 00:02:26.936 A:middle
所以我想说一句

00:02:26.936 --> 00:02:28.856 A:middle
谢谢大家

00:02:30.516 --> 00:02:32.546 A:middle
[掌声]

00:02:33.046 --> 00:02:34.746 A:middle
我们很高兴的看到

00:02:34.746 --> 00:02:35.706 A:middle
大家可以通过这一技术

00:02:35.706 --> 00:02:36.866 A:middle
做出这么多的成果

00:02:36.866 --> 00:02:39.176 A:middle
我们更加迫不及待的看到

00:02:39.176 --> 00:02:40.736 A:middle
大家用我之后要谈论到的

00:02:40.736 --> 00:02:42.076 A:middle
升级后的技术

00:02:42.076 --> 00:02:45.766 A:middle
又将做出什么更加好的配件

00:02:45.886 --> 00:02:48.036 A:middle
在我开始讲解之前

00:02:48.036 --> 00:02:49.246 A:middle
我想说一点

00:02:49.246 --> 00:02:50.336 A:middle
就是很多类型的配件

00:02:50.336 --> 00:02:51.466 A:middle
你都是不需要

00:02:51.466 --> 00:02:51.766 A:middle
为它们编写任何软件的

00:02:52.226 --> 00:02:53.436 A:middle
所以

00:02:53.436 --> 00:02:54.596 A:middle
比如你想查看一下

00:02:54.596 --> 00:02:56.676 A:middle
当前在你的设备上

00:02:56.676 --> 00:02:57.676 A:middle
播放的是哪个音乐

00:02:57.676 --> 00:02:59.866 A:middle
你可以使用 Apple Media 服务

00:02:59.866 --> 00:03:00.966 A:middle
然后你的设备就可以帮你做这一切

00:02:59.866 --> 00:03:00.966 A:middle
然后你的设备就可以帮你做这一切

00:03:01.376 --> 00:03:03.756 A:middle
像 iBeacon

00:03:03.756 --> 00:03:05.326 A:middle
或者 HID 这种设备

00:03:05.326 --> 00:03:06.486 A:middle
你不需要为它们编写任何软件

00:03:06.486 --> 00:03:07.166 A:middle
我们也已经看到了

00:03:07.166 --> 00:03:07.976 A:middle
有关它们的很好的使用

00:03:10.976 --> 00:03:12.576 A:middle
但是

00:03:12.726 --> 00:03:14.536 A:middle
今天我们是讲解核心蓝牙

00:03:14.536 --> 00:03:15.666 A:middle
以及你的设备是

00:03:15.666 --> 00:03:16.176 A:middle
如何与配件交互的

00:03:16.696 --> 00:03:19.136 A:middle
所以

00:03:19.316 --> 00:03:21.416 A:middle
让我们退回到第一步

00:03:21.416 --> 00:03:21.866 A:middle
低功耗蓝牙主要有两个功能

00:03:22.036 --> 00:03:23.446 A:middle
首先是

00:03:23.446 --> 00:03:25.166 A:middle
作为一个中心

00:03:25.166 --> 00:03:27.396 A:middle
可以搜寻你周围环境中的设备

00:03:27.396 --> 00:03:28.726 A:middle
再者是作为外设

00:03:28.726 --> 00:03:30.236 A:middle
可以向外部环境表明它们的位置

00:03:30.236 --> 00:03:31.946 A:middle
它们可以发送数据

00:03:31.946 --> 00:03:32.926 A:middle
或者

00:03:32.926 --> 00:03:33.286 A:middle
仅仅是表明它们的存在

00:03:34.056 --> 00:03:35.166 A:middle
所以

00:03:35.166 --> 00:03:36.106 A:middle
如果你想发送一些简单的数据

00:03:36.106 --> 00:03:37.616 A:middle
如当前温度

00:03:37.616 --> 00:03:42.286 A:middle
或者时间

00:03:42.286 --> 00:03:43.596 A:middle
你可以轻易地实现

00:03:43.596 --> 00:03:44.406 A:middle
甚至你也可以将设备与设备相连接

00:03:44.916 --> 00:03:46.716 A:middle
iOS 和 Mac 设备

00:03:46.716 --> 00:03:47.936 A:middle
在连接中

00:03:48.046 --> 00:03:48.676 A:middle
都是既可以作为中心

00:03:48.676 --> 00:03:48.976 A:middle
也可以作为外围

00:03:52.306 --> 00:03:53.706 A:middle
当你查找到

00:03:53.706 --> 00:03:54.696 A:middle
一个你周围的设备之后

00:03:54.696 --> 00:03:56.296 A:middle
你可以

00:03:56.296 --> 00:03:57.186 A:middle
将它连接到你的设备

00:03:57.186 --> 00:03:59.156 A:middle
然后

00:03:59.156 --> 00:04:00.236 A:middle
你可以通过 GATT 协议来进行双向通信

00:03:59.156 --> 00:04:00.236 A:middle
你可以通过 GATT 协议来进行双向通信

00:04:00.806 --> 00:04:02.226 A:middle
GATT 协议

00:04:02.226 --> 00:04:04.996 A:middle
传输所有数据

00:04:04.996 --> 00:04:06.556 A:middle
并将其公开在

00:04:06.556 --> 00:04:07.376 A:middle
称为服务和特征的层次结构中

00:04:08.176 --> 00:04:09.376 A:middle
在核心蓝牙中

00:04:09.376 --> 00:04:11.386 A:middle
我们将这些称为 CB 服务

00:04:11.956 --> 00:04:13.956 A:middle
并且

00:04:13.956 --> 00:04:16.495 A:middle
CB 服务可以有一些内部特征

00:04:16.745 --> 00:04:19.055 A:middle
大多数情况下

00:04:19.055 --> 00:04:19.926 A:middle
你的苹果设备

00:04:19.926 --> 00:04:21.236 A:middle
在一个连接中是作为中心的

00:04:21.745 --> 00:04:22.456 A:middle
然后

00:04:22.456 --> 00:04:22.996 A:middle
你由此连接到外围设备

00:04:24.436 --> 00:04:25.836 A:middle
但是

00:04:25.836 --> 00:04:26.206 A:middle
你也可以将这个情况反过来

00:04:26.206 --> 00:04:27.666 A:middle
所以

00:04:27.666 --> 00:04:30.116 A:middle
让我们举个例子

00:04:30.166 --> 00:04:31.426 A:middle
比如你的手机有自己的 GATT 数据库

00:04:31.426 --> 00:04:32.436 A:middle
并且显示一些诸如时间服务的东西

00:04:32.836 --> 00:04:34.536 A:middle
所以

00:04:34.536 --> 00:04:35.816 A:middle
如果对于你的配件来说

00:04:35.816 --> 00:04:38.356 A:middle
获取当前时间是有用的

00:04:38.586 --> 00:04:39.416 A:middle
它们就可以从你的手机读取当前时间

00:04:40.476 --> 00:04:41.556 A:middle
如果

00:04:41.556 --> 00:04:43.186 A:middle
你想在 CB Central Manager 上

00:04:43.186 --> 00:04:47.126 A:middle
构建这些类型的 iDirectional 通信

00:04:47.126 --> 00:04:49.456 A:middle
你可以通过

00:04:49.456 --> 00:04:50.746 A:middle
调用 retrieveConnectedPeripherals

00:04:50.746 --> 00:04:52.336 A:middle
来看你的设备是否已经被连接

00:04:52.336 --> 00:04:53.356 A:middle
如果

00:04:53.356 --> 00:04:55.916 A:middle
已被连接

00:04:55.916 --> 00:04:57.486 A:middle
你可以回复这些连接的外部设备

00:04:57.486 --> 00:04:58.406 A:middle
或者

00:04:58.406 --> 00:04:59.386 A:middle
如果你的配件有一个独特的标识符

00:04:59.386 --> 00:05:01.376 A:middle
你可以通过调用 retrievePeripherals(withidentifiers)

00:04:59.386 --> 00:05:01.376 A:middle
你可以通过调用 retrievePeripherals(withidentifiers)

00:05:01.376 --> 00:05:02.776 A:middle
来获得对于你配件的控制权

00:05:09.246 --> 00:05:10.406 A:middle
接下来

00:05:10.406 --> 00:05:10.956 A:middle
让我们谈论一些今年的新发展

00:05:11.366 --> 00:05:14.066 A:middle
正如我之前提到的

00:05:14.066 --> 00:05:15.416 A:middle
在核心蓝牙被研发出以后

00:05:15.416 --> 00:05:16.996 A:middle
健康和健身领域的发展

00:05:16.996 --> 00:05:17.786 A:middle
迎来了蓬勃生机

00:05:18.246 --> 00:05:19.346 A:middle
我们发现

00:05:19.346 --> 00:05:20.736 A:middle
整天都有一大堆

00:05:20.736 --> 00:05:21.566 A:middle
想要连接的设备

00:05:22.526 --> 00:05:24.556 A:middle
用户不管在他们穿着这些设备的时候

00:05:25.006 --> 00:05:26.276 A:middle
或者

00:05:26.276 --> 00:05:28.336 A:middle
夜里的任何时候

00:05:28.336 --> 00:05:29.496 A:middle
都希望

00:05:29.496 --> 00:05:30.646 A:middle
可以查看他们的数据

00:05:30.646 --> 00:05:31.296 A:middle
所以你必须保证你配件中的连接是可靠稳定的

00:05:33.436 --> 00:05:35.156 A:middle
所以

00:05:35.156 --> 00:05:36.336 A:middle
在 iOS 上我们允许你做一个后台运行的 App

00:05:36.736 --> 00:05:38.086 A:middle
你可以与你的配件保持连接

00:05:38.086 --> 00:05:39.546 A:middle
或者

00:05:39.546 --> 00:05:41.796 A:middle
你可以通过 Xcode 中的

00:05:41.796 --> 00:05:42.736 A:middle
这两个选项

00:05:42.736 --> 00:05:44.716 A:middle
来继续向外界

00:05:44.876 --> 00:05:45.856 A:middle
发送可用的数据

00:05:45.856 --> 00:05:48.076 A:middle
你可以选择

00:05:48.076 --> 00:05:49.856 A:middle
使用你的蓝牙 LE 配件

00:05:49.856 --> 00:05:51.496 A:middle
或者

00:05:51.496 --> 00:05:52.466 A:middle
直接将自身作为一个蓝牙 LE 配件

00:05:52.466 --> 00:05:52.976 A:middle
如果说你想要实现的是一个外部设备的功能

00:05:57.156 --> 00:05:58.346 A:middle
但是

00:05:58.346 --> 00:06:00.616 A:middle
我们允许你的功能更进一步

00:05:58.346 --> 00:06:00.616 A:middle
我们允许你的功能更进一步

00:06:00.616 --> 00:06:02.436 A:middle
如果你是作为一个中心

00:06:02.436 --> 00:06:04.086 A:middle
你可以通过具体化

00:06:04.086 --> 00:06:06.046 A:middle
一项服务

00:06:06.046 --> 00:06:07.096 A:middle
来完成搜索新设备

00:06:07.096 --> 00:06:08.946 A:middle
你也可以

00:06:08.946 --> 00:06:10.596 A:middle
连接到一个已知设备

00:06:10.596 --> 00:06:11.866 A:middle
即使你的应用是来自存储系统的 Jetson

00:06:12.326 --> 00:06:13.706 A:middle
核心蓝牙也会持续的

00:06:13.706 --> 00:06:15.166 A:middle
帮你搜索这些设备

00:06:17.216 --> 00:06:18.866 A:middle
如果

00:06:19.226 --> 00:06:20.796 A:middle
我们要用代码实现这个功能

00:06:20.796 --> 00:06:22.566 A:middle
在你初始化 CBCentralManager 时

00:06:22.566 --> 00:06:23.896 A:middle
你要传递 RestoreIdentifier

00:06:24.286 --> 00:06:25.486 A:middle
这只是一个

00:06:25.486 --> 00:06:26.856 A:middle
用于标识

00:06:26.856 --> 00:06:28.076 A:middle
你要继续进行的会话的字符串

00:06:29.536 --> 00:06:31.896 A:middle
如果

00:06:31.896 --> 00:06:33.366 A:middle
我们可以代替你

00:06:33.366 --> 00:06:34.506 A:middle
完成这些操作

00:06:34.506 --> 00:06:35.636 A:middle
例如

00:06:35.636 --> 00:06:37.516 A:middle
连接到你的配件

00:06:37.516 --> 00:06:38.896 A:middle
即使这将会在你的 App 启用后再花费一周的时间

00:06:38.896 --> 00:06:39.856 A:middle
我们也将重新启动你的 App 并为你提供此回调

00:06:39.856 --> 00:06:41.506 A:middle
CentralManager

00:06:41.506 --> 00:06:41.986 A:middle
将会恢复状态

00:06:42.716 --> 00:06:44.326 A:middle
与此同时

00:06:44.326 --> 00:06:45.586 A:middle
我们也会告诉你

00:06:45.586 --> 00:06:47.056 A:middle
系统的当前状态

00:06:47.056 --> 00:06:48.796 A:middle
以便你可以把当前状态

00:06:48.796 --> 00:06:50.046 A:middle
跟你的 App 停止的时间两者之间做一个调和

00:06:50.586 --> 00:06:52.066 A:middle
我们将会告诉你

00:06:52.066 --> 00:06:53.736 A:middle
当前所连接的外部设备

00:06:53.966 --> 00:06:55.296 A:middle
我们还会告诉你

00:06:55.296 --> 00:06:56.846 A:middle
在重启你的 App 时

00:06:56.846 --> 00:06:58.386 A:middle
我们在搜寻什么

00:06:59.356 --> 00:07:00.456 A:middle
有些时候

00:06:59.356 --> 00:07:00.456 A:middle
有些时候

00:07:00.456 --> 00:07:02.046 A:middle
这些返回的数据都可能是空

00:07:02.376 --> 00:07:03.996 A:middle
这意味着

00:07:03.996 --> 00:07:06.456 A:middle
你需要灵活处理这些返回的结果

00:07:06.456 --> 00:07:08.376 A:middle
并且你要知道在你的 App 重新启动之后

00:07:08.376 --> 00:07:09.106 A:middle
你是可以重新恢复你的状态的

00:07:11.596 --> 00:07:13.356 A:middle
同样

00:07:13.356 --> 00:07:16.236 A:middle
如果你作为外设

00:07:16.236 --> 00:07:17.556 A:middle
即使你的 App 不再存在

00:07:17.556 --> 00:07:18.926 A:middle
我们也可以代替你继续执行操作

00:07:18.926 --> 00:07:21.666 A:middle
我们还会帮你重启

00:07:21.666 --> 00:07:22.606 A:middle
如果说这种重启对于你的 App 来说

00:07:22.606 --> 00:07:23.186 A:middle
很有趣

00:07:23.966 --> 00:07:25.336 A:middle
因此

00:07:25.336 --> 00:07:26.686 A:middle
如果你在 GATT 数据库中

00:07:27.026 --> 00:07:28.676 A:middle
建立了本地服务

00:07:28.676 --> 00:07:30.076 A:middle
或者你推广一个服务

00:07:30.076 --> 00:07:31.136 A:middle
我们可以保持这些服务的正常运行

00:07:31.136 --> 00:07:34.336 A:middle
当有有趣的事情发生时我们会及时让你知道

00:07:34.446 --> 00:07:35.756 A:middle
首先

00:07:35.756 --> 00:07:38.476 A:middle
你需要从恢复标识符开始

00:07:38.476 --> 00:07:39.906 A:middle
这在一个系统中

00:07:40.586 --> 00:07:41.986 A:middle
是唯一的

00:07:41.986 --> 00:07:43.166 A:middle
并且在你返回时

00:07:43.166 --> 00:07:43.536 A:middle
我们会告诉你当前的系统状态

00:07:44.146 --> 00:07:45.886 A:middle
我们将通过状态恢复服务

00:07:45.886 --> 00:07:47.566 A:middle
来告诉你有什么服务

00:07:48.866 --> 00:07:51.166 A:middle
是继续在你的系统上运行的

00:07:51.766 --> 00:07:53.286 A:middle
我们也会通过状态广告数据

00:07:54.106 --> 00:07:56.726 A:middle
来告知你

00:07:56.726 --> 00:07:59.006 A:middle
当前正在代表你

00:07:59.006 --> 00:08:00.406 A:middle
进行什么广告

00:07:59.006 --> 00:08:00.406 A:middle
进行什么广告

00:08:00.406 --> 00:08:00.996 A:middle
所以

00:08:04.006 --> 00:08:05.356 A:middle
状态保持和状态恢复

00:08:05.356 --> 00:08:06.576 A:middle
已经在一个系统中

00:08:06.576 --> 00:08:07.606 A:middle
存在了很多年了

00:08:07.606 --> 00:08:09.796 A:middle
但是

00:08:09.796 --> 00:08:11.456 A:middle
今年我们将对此进行升级

00:08:11.456 --> 00:08:12.726 A:middle
以使它对于你的 App 来说更加可靠

00:08:13.246 --> 00:08:15.506 A:middle
所以

00:08:15.906 --> 00:08:17.156 A:middle
我们今天很高兴地告诉你

00:08:17.156 --> 00:08:19.386 A:middle
即使曾经

00:08:19.386 --> 00:08:20.566 A:middle
总有一些有关蓝牙系统等级的事宜

00:08:20.566 --> 00:08:22.046 A:middle
代表你来阻止这一切变为现实

00:08:22.046 --> 00:08:24.366 A:middle
但是

00:08:24.366 --> 00:08:25.046 A:middle
我们将致力于为你实现这一切

00:08:25.366 --> 00:08:26.796 A:middle
并且

00:08:26.796 --> 00:08:28.576 A:middle
即使一个用户重启了设备

00:08:28.576 --> 00:08:29.256 A:middle
我们也会保持与你配件的连接

00:08:30.516 --> 00:08:33.576 A:middle
[掌声]

00:08:34.076 --> 00:08:36.405 A:middle
谢谢大家

00:08:36.606 --> 00:08:39.196 A:middle
另外

00:08:39.196 --> 00:08:41.746 A:middle
我想说一点是

00:08:41.866 --> 00:08:43.155 A:middle
为了让这些功能的功耗

00:08:43.155 --> 00:08:45.026 A:middle
保持一个比较低的水平

00:08:45.026 --> 00:08:46.096 A:middle
我们在硬件上

00:08:46.096 --> 00:08:46.616 A:middle
下了很多功夫

00:08:47.266 --> 00:08:49.606 A:middle
所以

00:08:49.606 --> 00:08:50.676 A:middle
我们一次可以查找的东西数量有限

00:08:50.676 --> 00:08:52.286 A:middle
特别是

00:08:52.556 --> 00:08:54.006 A:middle
我们可以查找的服务数量会受到限制

00:08:54.476 --> 00:08:55.876 A:middle
所以

00:08:55.876 --> 00:08:57.926 A:middle
所需要的东西数量越少

00:08:58.346 --> 00:08:59.716 A:middle
我们越可以保证

00:08:59.716 --> 00:09:00.436 A:middle
你的请求不间断运行

00:08:59.716 --> 00:09:00.436 A:middle
你的请求不间断运行

00:09:03.866 --> 00:09:05.566 A:middle
另外一个事情是

00:09:05.566 --> 00:09:08.276 A:middle
没有一个 UI

00:09:08.276 --> 00:09:09.686 A:middle
来控制什么 App

00:09:09.686 --> 00:09:11.696 A:middle
可以在后台做什么事情

00:09:11.696 --> 00:09:12.956 A:middle
这意味着

00:09:12.956 --> 00:09:14.666 A:middle
我们将会在你从任务开关处

00:09:14.906 --> 00:09:16.146 A:middle
退出 App 时

00:09:16.146 --> 00:09:18.846 A:middle
停止工作

00:09:18.846 --> 00:09:20.266 A:middle
或者

00:09:20.266 --> 00:09:22.336 A:middle
当用户从蓝牙设置处

00:09:22.336 --> 00:09:23.816 A:middle
手动关闭蓝牙时

00:09:23.816 --> 00:09:27.616 A:middle
我们将会停止以你的名义进行后台操作

00:09:27.616 --> 00:09:28.696 A:middle
今年我们所改进的

00:09:28.696 --> 00:09:29.846 A:middle
另一个内容是

00:09:29.846 --> 00:09:30.406 A:middle
关于 Write Without Response

00:09:31.086 --> 00:09:32.206 A:middle
就像 Write Without Response 的名字

00:09:32.206 --> 00:09:33.976 A:middle
所暗示的那样

00:09:33.976 --> 00:09:36.156 A:middle
你调用 Write Without Response

00:09:36.156 --> 00:09:37.146 A:middle
但是你却并不会收到回应

00:09:37.146 --> 00:09:39.736 A:middle
而且

00:09:39.736 --> 00:09:40.906 A:middle
如果你向系统中写入了太多的内容

00:09:40.906 --> 00:09:42.576 A:middle
你写入的内容会被舍弃

00:09:43.036 --> 00:09:44.226 A:middle
并且

00:09:44.226 --> 00:09:45.356 A:middle
我们没办法告诉你

00:09:45.356 --> 00:09:46.446 A:middle
有一些数据被丢弃了

00:09:46.446 --> 00:09:48.036 A:middle
所以

00:09:48.036 --> 00:09:49.296 A:middle
如果你试图传输大量的数据

00:09:49.296 --> 00:09:50.276 A:middle
你需要想出一种

00:09:50.276 --> 00:09:50.766 A:middle
保证你的数据可靠的方法

00:09:51.266 --> 00:09:53.516 A:middle
今年

00:09:53.516 --> 00:09:55.916 A:middle
我们通过一个

00:09:55.916 --> 00:09:56.186 A:middle
叫 canSendWriteWithoutResponse 的新特性

00:09:56.186 --> 00:09:57.796 A:middle
来加强了 CB 的外部设备

00:09:57.896 --> 00:09:59.666 A:middle
所以

00:09:59.666 --> 00:10:00.926 A:middle
如果你在写入之前

00:09:59.666 --> 00:10:00.926 A:middle
如果你在写入之前

00:10:00.926 --> 00:10:02.776 A:middle
先调用这个函数

00:10:02.776 --> 00:10:04.286 A:middle
并且

00:10:04.286 --> 00:10:05.796 A:middle
这个函数返回了是这一结果

00:10:05.796 --> 00:10:06.826 A:middle
这意味着你的数据在有机会传输到外部设备之前

00:10:06.826 --> 00:10:07.576 A:middle
将不会在软件中被删除

00:10:08.136 --> 00:10:10.906 A:middle
如果

00:10:10.906 --> 00:10:12.026 A:middle
返回了否这一结果

00:10:12.026 --> 00:10:14.126 A:middle
那么当我们准备就绪时

00:10:14.126 --> 00:10:15.156 A:middle
你还会收到一个委托回调

00:10:15.156 --> 00:10:16.466 A:middle
我们会回调 peripheralIsReady(toSendWritewithoutResponse)

00:10:18.516 --> 00:10:23.016 A:middle
[掌声]

00:10:23.516 --> 00:10:25.406 A:middle
谢谢

00:10:25.586 --> 00:10:29.376 A:middle
好的

00:10:29.376 --> 00:10:32.106 A:middle
所以当我们在 2011 年第一次推出时

00:10:32.106 --> 00:10:33.006 A:middle
我们支持 macOS 10.7 和 iOS 5

00:10:34.076 --> 00:10:35.216 A:middle
我们一直支持这些

00:10:35.216 --> 00:10:38.366 A:middle
并且在 Apple tvOS 9 上

00:10:38.366 --> 00:10:39.586 A:middle
我们添加了对 tvOS 的支持

00:10:39.896 --> 00:10:41.166 A:middle
这是我们第一次来谈论这件事情

00:10:41.166 --> 00:10:42.216 A:middle
所以

00:10:42.216 --> 00:10:45.126 A:middle
我也想对这件事做一个回顾

00:10:45.126 --> 00:10:46.366 A:middle
在今年

00:10:46.776 --> 00:10:47.896 A:middle
我们也支持了

00:10:47.896 --> 00:10:49.106 A:middle
watchOS

00:10:49.426 --> 00:10:50.896 A:middle
我们认为

00:10:50.896 --> 00:10:52.706 A:middle
这会带来更多的机会

00:10:52.706 --> 00:10:53.916 A:middle
特别是

00:10:53.916 --> 00:10:55.476 A:middle
对于那些

00:10:55.476 --> 00:10:56.926 A:middle
带手机不方便的

00:10:56.926 --> 00:10:57.506 A:middle
健身运动场所

00:11:00.516 --> 00:11:02.426 A:middle
所以 iOS 和 macOS

00:11:02.426 --> 00:11:03.576 A:middle
是我们所支持的第一个平台

00:11:04.426 --> 00:11:05.926 A:middle
他们既支持前台 App

00:11:05.926 --> 00:11:07.616 A:middle
也支持后台 App

00:11:07.616 --> 00:11:08.896 A:middle
既支持中央模式操作

00:11:08.896 --> 00:11:09.456 A:middle
也支持外围模式操作

00:11:13.366 --> 00:11:15.736 A:middle
今年

00:11:15.736 --> 00:11:16.866 A:middle
我们允许你的连接间隔

00:11:16.866 --> 00:11:17.606 A:middle
下降至 15 ms

00:11:17.836 --> 00:11:18.686 A:middle
所以

00:11:18.686 --> 00:11:19.716 A:middle
如果你想你的配件

00:11:19.716 --> 00:11:21.316 A:middle
获得最大的吞吐量

00:11:21.316 --> 00:11:23.166 A:middle
或者获得最低的延迟

00:11:23.166 --> 00:11:24.556 A:middle
那么

00:11:24.556 --> 00:11:25.556 A:middle
这些平台为你提供了最好的机会

00:11:26.126 --> 00:11:28.516 A:middle
就像我之前说的

00:11:28.516 --> 00:11:30.236 A:middle
iOS 系统支持状态保持

00:11:30.236 --> 00:11:32.296 A:middle
和状态恢复

00:11:32.616 --> 00:11:33.786 A:middle
所以

00:11:33.786 --> 00:11:35.136 A:middle
你可以全天候的

00:11:35.346 --> 00:11:36.686 A:middle
保持与配件的连接

00:11:36.726 --> 00:11:38.156 A:middle
甚至在诸如系统重启这种重要的设备事件发生时也是如此

00:11:41.636 --> 00:11:44.166 A:middle
Apple tvOS 9 支持 Apple tvOS

00:11:44.166 --> 00:11:46.126 A:middle
这对于我们来说

00:11:46.126 --> 00:11:47.516 A:middle
非常有趣

00:11:47.516 --> 00:11:49.556 A:middle
因为

00:11:49.556 --> 00:11:51.346 A:middle
这是我们第一次在一个依靠蓝牙

00:11:51.346 --> 00:11:52.776 A:middle
作为主要系统输入的平台上

00:11:52.776 --> 00:11:53.466 A:middle
来尝试支持第三方的配件

00:11:53.466 --> 00:11:54.746 A:middle
所以

00:11:54.746 --> 00:11:56.346 A:middle
我们必须在这两个机会或者说两个活动

00:11:56.346 --> 00:11:57.106 A:middle
之间共存

00:11:58.296 --> 00:11:59.856 A:middle
所以

00:12:00.066 --> 00:12:01.826 A:middle
在这种情况下

00:12:01.826 --> 00:12:02.836 A:middle
我们不得不对系统

00:12:02.836 --> 00:12:04.836 A:middle
进行一些限制

00:12:04.836 --> 00:12:05.936 A:middle
以确保像 Apple Siri Remote 这样的核心操作

00:12:05.936 --> 00:12:06.556 A:middle
不会受到干扰

00:12:07.066 --> 00:12:09.926 A:middle
所以我们决定

00:12:09.926 --> 00:12:12.936 A:middle
对于配件

00:12:12.936 --> 00:12:16.106 A:middle
或者 Apple tvOS

00:12:16.106 --> 00:12:18.686 A:middle
你只能作为中央设备

00:12:18.686 --> 00:12:19.226 A:middle
并且你只能连接到两个同步设备

00:12:20.356 --> 00:12:21.266 A:middle
你可以匹配无限数量的设备

00:12:21.266 --> 00:12:22.906 A:middle
但是

00:12:22.906 --> 00:12:24.006 A:middle
一次你只能使用两个设备

00:12:24.556 --> 00:12:28.986 A:middle
并且我们在 Apple tvOS 上

00:12:28.986 --> 00:12:30.646 A:middle
不允许 15 ms 的连接间隔

00:12:30.646 --> 00:12:32.746 A:middle
我们设定的最小连接间隔是 30 ms

00:12:33.256 --> 00:12:34.936 A:middle
所以

00:12:35.266 --> 00:12:37.376 A:middle
这仍然可以保证你的配件

00:12:37.376 --> 00:12:39.286 A:middle
获得一个比较低的延迟

00:12:39.286 --> 00:12:40.696 A:middle
并且也保证了比较好的用户交互性

00:12:40.696 --> 00:12:40.976 A:middle
但是它同时会留下更多可用的系统资源

00:12:44.376 --> 00:12:45.736 A:middle
当你的 App 被暂停

00:12:46.056 --> 00:12:47.676 A:middle
或者

00:12:47.676 --> 00:12:48.956 A:middle
转到后台运行的时候

00:12:48.956 --> 00:12:50.206 A:middle
我们就会自动

00:12:50.206 --> 00:12:50.826 A:middle
把这些配件断开连接

00:12:54.576 --> 00:12:56.756 A:middle
并且

00:12:56.756 --> 00:12:58.586 A:middle
对于 watchOS 来说

00:12:58.586 --> 00:13:00.216 A:middle
Apple tvOS 是一个

00:12:58.586 --> 00:13:00.216 A:middle
Apple tvOS 是一个

00:13:00.216 --> 00:13:00.916 A:middle
主要依靠蓝牙来实现其核心系统功能的平台

00:13:02.436 --> 00:13:03.966 A:middle
因此

00:13:03.966 --> 00:13:06.036 A:middle
只要系统

00:13:06.036 --> 00:13:07.596 A:middle
允许你的 App 运行

00:13:07.596 --> 00:13:08.086 A:middle
我们就允许访问核心蓝牙

00:13:08.556 --> 00:13:09.646 A:middle
因此

00:13:09.646 --> 00:13:11.536 A:middle
如果一个用户

00:13:11.536 --> 00:13:12.966 A:middle
正在使用你的 App 并直接与其交互

00:13:12.966 --> 00:13:13.576 A:middle
你可以使用核心蓝牙

00:13:13.626 --> 00:13:14.286 A:middle
你可以连接你的配件

00:13:14.286 --> 00:13:16.046 A:middle
你也可以与它们交互

00:13:16.046 --> 00:13:17.976 A:middle
这也意味着

00:13:17.976 --> 00:13:18.886 A:middle
如果你因为其他原因

00:13:18.886 --> 00:13:19.956 A:middle
而被允许运行时

00:13:19.956 --> 00:13:21.706 A:middle
比如复杂更新和试验会话

00:13:21.706 --> 00:13:24.076 A:middle
你可以保持

00:13:24.076 --> 00:13:25.166 A:middle
与你配件的连接

00:13:25.166 --> 00:13:26.426 A:middle
并且持续的获取这些数据

00:13:28.666 --> 00:13:31.326 A:middle
同样

00:13:31.326 --> 00:13:32.636 A:middle
如果你的 Apple tvOS

00:13:32.696 --> 00:13:33.906 A:middle
只能作为中央设备

00:13:33.906 --> 00:13:35.986 A:middle
这意味着

00:13:35.986 --> 00:13:38.016 A:middle
你可以连接线配件

00:13:38.016 --> 00:13:38.596 A:middle
但是你不能作为其他设备的外部设备使用

00:13:41.716 --> 00:13:45.076 A:middle
并且

00:13:45.076 --> 00:13:47.246 A:middle
在 watchOS 与 Apple tvOS 上

00:13:47.246 --> 00:13:50.626 A:middle
也有两个同步连接

00:13:50.666 --> 00:13:52.086 A:middle
和相同的

00:13:52.086 --> 00:13:52.736 A:middle
连接间隔的限制

00:13:56.456 --> 00:13:58.376 A:middle
此外

00:13:58.376 --> 00:13:59.656 A:middle
当系统认为

00:13:59.656 --> 00:14:01.196 A:middle
你的 App 需要被暂停时

00:13:59.656 --> 00:14:01.196 A:middle
你的 App 需要被暂停时

00:14:01.196 --> 00:14:02.406 A:middle
这意味着

00:14:02.676 --> 00:14:05.496 A:middle
核心蓝牙会把所有

00:14:05.496 --> 00:14:06.936 A:middle
因为该 App 所连接的配件

00:14:07.996 --> 00:14:08.986 A:middle
都断开连接

00:14:12.596 --> 00:14:13.946 A:middle
这已经

00:14:13.946 --> 00:14:14.886 A:middle
被 Apple Watch 系列 2 支持

00:14:15.986 --> 00:14:18.286 A:middle
就像我之前说的一样

00:14:18.286 --> 00:14:20.386 A:middle
我们认为

00:14:20.386 --> 00:14:21.726 A:middle
可以让 Apple Watch 连接配件

00:14:21.726 --> 00:14:24.096 A:middle
并且全天候使用这些配件是非常有前景的

00:14:24.816 --> 00:14:26.806 A:middle
你可以去到一些

00:14:26.806 --> 00:14:27.996 A:middle
不方便携带手机的地方

00:14:28.246 --> 00:14:31.336 A:middle
或者是一些

00:14:31.336 --> 00:14:32.496 A:middle
你可以方便地使用 Apple Watch

00:14:32.496 --> 00:14:33.526 A:middle
来获取所需数据的地方

00:14:33.526 --> 00:14:34.856 A:middle
所以

00:14:34.856 --> 00:14:35.896 A:middle
如果你想

00:14:35.896 --> 00:14:37.516 A:middle
全天实时更新你的电池

00:14:37.516 --> 00:14:38.976 A:middle
你可以连接你的配件

00:14:38.976 --> 00:14:40.616 A:middle
来获取快速的数据

00:14:40.616 --> 00:14:41.726 A:middle
并且实时更新在主屏幕上

00:14:46.216 --> 00:14:47.466 A:middle
今年还有的一个创新是

00:14:47.466 --> 00:14:48.946 A:middle
我们允许

00:14:49.056 --> 00:14:49.486 A:middle
访问 L2CAP 信道

00:14:51.536 --> 00:14:54.396 A:middle
因此

00:14:54.396 --> 00:14:56.596 A:middle
最底层的 L2CAP 信道

00:14:56.596 --> 00:14:59.466 A:middle
就是两个设备之间的

00:14:59.466 --> 00:15:01.476 A:middle
数据流

00:14:59.466 --> 00:15:01.476 A:middle
数据流

00:15:01.476 --> 00:15:03.266 A:middle
实际上

00:15:03.266 --> 00:15:04.346 A:middle
这是我们在这些设备之间

00:15:04.346 --> 00:15:04.836 A:middle
进行通信所使用的协议

00:15:05.266 --> 00:15:06.706 A:middle
所以我们在我们的平台上

00:15:06.706 --> 00:15:08.106 A:middle
使用了 L2CAP 信道

00:15:08.206 --> 00:15:09.896 A:middle
这是第一次

00:15:09.896 --> 00:15:10.786 A:middle
我们让你的 App

00:15:10.786 --> 00:15:12.696 A:middle
可以

00:15:12.696 --> 00:15:14.016 A:middle
直接使用

00:15:14.016 --> 00:15:14.516 A:middle
这些信道

00:15:17.576 --> 00:15:18.936 A:middle
它实际上

00:15:18.936 --> 00:15:20.386 A:middle
代表了逻辑链路控制

00:15:20.386 --> 00:15:23.856 A:middle
和适配协议

00:15:23.856 --> 00:15:25.226 A:middle
也代表了

00:15:25.226 --> 00:15:26.986 A:middle
对于动态分配连接的支持

00:15:26.986 --> 00:15:28.866 A:middle
或者进入信道对于

00:15:28.866 --> 00:15:30.636 A:middle
蓝牙核心规范 4.1 来说是全新的

00:15:34.426 --> 00:15:35.946 A:middle
所以

00:15:35.946 --> 00:15:36.786 A:middle
不像你之前

00:15:36.786 --> 00:15:37.886 A:middle
在你配件中使用的交互方式

00:15:37.886 --> 00:15:39.546 A:middle
比如

00:15:39.546 --> 00:15:41.746 A:middle
使用 GATT 数据库

00:15:42.526 --> 00:15:43.946 A:middle
来获取你的数据

00:15:43.946 --> 00:15:45.506 A:middle
现在 L2CAP 信道

00:15:45.506 --> 00:15:48.226 A:middle
允许你开启一个侧面信道

00:15:48.586 --> 00:15:50.736 A:middle
从而不受框架限制

00:15:50.736 --> 00:15:51.826 A:middle
和数据包大小限制的直接读取和写入

00:15:52.166 --> 00:15:53.376 A:middle
这是你的设备

00:15:53.376 --> 00:15:55.956 A:middle
和配件之间的

00:15:55.956 --> 00:15:56.546 A:middle
直接交流方式

00:16:00.236 --> 00:16:02.226 A:middle
所以

00:16:02.546 --> 00:16:03.536 A:middle
我们认为这个 API 使用起来非常简单

00:16:04.026 --> 00:16:05.646 A:middle
如果

00:16:05.646 --> 00:16:07.236 A:middle
你已经连接到一个外部设备

00:16:07.236 --> 00:16:08.866 A:middle
则只需调用

00:16:08.866 --> 00:16:11.076 A:middle
openL2CAPChannel

00:16:11.556 --> 00:16:12.836 A:middle
并指定为 PSM

00:16:12.836 --> 00:16:14.666 A:middle
并且您将获得一个回调数据

00:16:14.666 --> 00:16:15.976 A:middle
openL2CAPChannel 将会返回

00:16:15.976 --> 00:16:16.436 A:middle
表示此信道的对象

00:16:19.086 --> 00:16:21.976 A:middle
所以 PSM 是一个

00:16:22.036 --> 00:16:24.946 A:middle
一个协议服务多路复用器

00:16:25.326 --> 00:16:26.636 A:middle
但你可以把它看作

00:16:26.636 --> 00:16:28.506 A:middle
类似于 TCP 端口的东西

00:16:28.886 --> 00:16:30.116 A:middle
你只需要

00:16:30.116 --> 00:16:32.246 A:middle
给我们一个数字

00:16:32.246 --> 00:16:34.096 A:middle
来表明

00:16:34.096 --> 00:16:35.126 A:middle
你想要在外部设备连接上

00:16:35.126 --> 00:16:35.616 A:middle
使用的服务

00:16:37.926 --> 00:16:39.226 A:middle
有趣的是

00:16:39.226 --> 00:16:41.196 A:middle
一些由蓝牙 SIG

00:16:41.196 --> 00:16:43.026 A:middle
给出的

00:16:43.026 --> 00:16:44.686 A:middle
配置文件

00:16:44.686 --> 00:16:45.926 A:middle
有硬编码的 PSM

00:16:46.136 --> 00:16:47.996 A:middle
所以

00:16:47.996 --> 00:16:49.066 A:middle
如果你想要尝试

00:16:49.066 --> 00:16:51.286 A:middle
Object Transfer Protocol 这种东西

00:16:51.286 --> 00:16:52.576 A:middle
在连接到设备之前

00:16:52.576 --> 00:16:53.246 A:middle
你就会知道 PSM

00:16:53.616 --> 00:16:56.676 A:middle
但是

00:16:56.806 --> 00:16:58.156 A:middle
在别的例子中

00:16:58.156 --> 00:16:59.786 A:middle
PSM 对于一个你要连接的设备来说是独一无二的

00:16:59.786 --> 00:17:01.456 A:middle
所以这意味着 PSM 是本地分配的

00:16:59.786 --> 00:17:01.456 A:middle
所以这意味着 PSM 是本地分配的

00:17:01.456 --> 00:17:03.226 A:middle
并且可以被其他 App 重复使用

00:17:04.296 --> 00:17:05.276 A:middle
所以

00:17:05.276 --> 00:17:07.195 A:middle
在你想要建立连接时

00:17:07.415 --> 00:17:09.146 A:middle
你需要先知道你要连接的 PSM 是什么 这很重要

00:17:10.486 --> 00:17:12.126 A:middle
我们做了一些事情

00:17:12.126 --> 00:17:13.935 A:middle
来让这件事变得容易一些

00:17:13.935 --> 00:17:15.465 A:middle
我们推出了 UUID

00:17:15.465 --> 00:17:16.986 A:middle
你可以使用 UUID

00:17:18.036 --> 00:17:20.026 A:middle
并把它放置到你的服务中

00:17:20.026 --> 00:17:23.486 A:middle
它可以帮助你确定

00:17:23.486 --> 00:17:24.356 A:middle
哪些与你的 CB 服务相关联的 PSM 需要打开

00:17:27.736 --> 00:17:29.346 A:middle
如果

00:17:29.346 --> 00:17:30.726 A:middle
你作为一个外部设备

00:17:30.726 --> 00:17:31.246 A:middle
我们也会打开 L2CAP 信道

00:17:31.726 --> 00:17:34.286 A:middle
所以

00:17:34.396 --> 00:17:35.536 A:middle
如果你想要你的服务

00:17:35.536 --> 00:17:37.286 A:middle
使用 L2CAP 信道

00:17:37.286 --> 00:17:39.306 A:middle
你可以调用 publishL2CAPChannel

00:17:39.306 --> 00:17:41.766 A:middle
然后

00:17:41.766 --> 00:17:43.516 A:middle
我们会在 peripheralManger didPublishL2CAPChannel 的回调中

00:17:43.516 --> 00:17:44.466 A:middle
返回给你

00:17:44.466 --> 00:17:46.716 A:middle
所被系统分配的 PSM

00:17:48.456 --> 00:17:50.836 A:middle
我们允许的

00:17:50.836 --> 00:17:52.546 A:middle
另一件事情是

00:17:52.546 --> 00:17:54.516 A:middle
我们允许你指定

00:17:54.516 --> 00:17:56.246 A:middle
你的 L2CAP 是否要加密

00:17:56.386 --> 00:17:58.546 A:middle
大多数情况下

00:17:58.546 --> 00:18:00.036 A:middle
人们出于对安全的考虑

00:17:58.546 --> 00:18:00.036 A:middle
人们出于对安全的考虑

00:18:00.036 --> 00:18:00.546 A:middle
会选择加密

00:18:00.616 --> 00:18:01.766 A:middle
它可以

00:18:01.766 --> 00:18:03.276 A:middle
保护你

00:18:03.276 --> 00:18:04.586 A:middle
免受中间人攻击

00:18:04.586 --> 00:18:05.696 A:middle
它也可以

00:18:05.696 --> 00:18:06.536 A:middle
保护你在两个设备之间发送数据包时

00:18:06.536 --> 00:18:07.646 A:middle
免受别人的窃听

00:18:08.126 --> 00:18:09.996 A:middle
但是

00:18:09.996 --> 00:18:11.676 A:middle
有些时候你会想建立

00:18:11.676 --> 00:18:12.616 A:middle
更高级别的身份验证

00:18:12.616 --> 00:18:14.156 A:middle
比如

00:18:14.426 --> 00:18:16.486 A:middle
使用公钥加密技术

00:18:16.486 --> 00:18:17.866 A:middle
通过公钥

00:18:17.866 --> 00:18:20.706 A:middle
你可以建立你自己的账户系统

00:18:20.706 --> 00:18:21.076 A:middle
并且可以以此保护你的数据

00:18:24.056 --> 00:18:25.426 A:middle
所以

00:18:25.426 --> 00:18:26.486 A:middle
让我们看一个如何在两设备间

00:18:26.676 --> 00:18:27.936 A:middle
协商一个 L2CAP 信道的

00:18:27.936 --> 00:18:29.026 A:middle
实例

00:18:29.866 --> 00:18:31.096 A:middle
如果

00:18:31.096 --> 00:18:34.076 A:middle
你作为一个外部设备

00:18:34.076 --> 00:18:36.786 A:middle
你可以要求系统

00:18:36.876 --> 00:18:37.196 A:middle
开启一个 L2CAP 通道

00:18:38.256 --> 00:18:39.746 A:middle
并且

00:18:39.746 --> 00:18:41.066 A:middle
你需要指定这个信道

00:18:41.066 --> 00:18:41.536 A:middle
是否需要加密

00:18:41.846 --> 00:18:42.836 A:middle
在这个例子中

00:18:42.836 --> 00:18:43.126 A:middle
我们使用加密

00:18:43.516 --> 00:18:44.836 A:middle
当信道建立成功后，

00:18:45.596 --> 00:18:46.386 A:middle
你会得到一个

00:18:46.386 --> 00:18:47.116 A:middle
peripheralManager didPublishL2CAPChannel

00:18:47.116 --> 00:18:48.746 A:middle
的回调

00:18:48.746 --> 00:18:50.676 A:middle
就像我之前说的一样

00:18:50.676 --> 00:18:52.046 A:middle
我会告诉你

00:18:52.046 --> 00:18:53.106 A:middle
你的服务被本地分配了什么 PSM

00:18:54.216 --> 00:18:57.276 A:middle
所以

00:18:57.276 --> 00:18:59.126 A:middle
这是让连接知道 PSM 的方法

00:18:59.126 --> 00:19:01.486 A:middle
这样一来

00:18:59.126 --> 00:19:01.486 A:middle
这样一来

00:19:01.486 --> 00:19:03.956 A:middle
就可以知道你的服务

00:19:03.956 --> 00:19:04.836 A:middle
需要开启

00:19:04.836 --> 00:19:05.346 A:middle
哪个信道

00:19:09.696 --> 00:19:11.516 A:middle
作为中央设备

00:19:11.516 --> 00:19:12.956 A:middle
你可以读取 PSM

00:19:12.956 --> 00:19:14.176 A:middle
然后

00:19:14.176 --> 00:19:14.816 A:middle
你可以用这个信息来打开通道

00:19:14.816 --> 00:19:15.796 A:middle
所以现在

00:19:15.796 --> 00:19:17.866 A:middle
你可以使用

00:19:17.866 --> 00:19:19.136 A:middle
你从远程设备读取到的 PSM

00:19:19.136 --> 00:19:22.916 A:middle
来调用 openL2CAPChannel

00:19:22.916 --> 00:19:25.106 A:middle
然后你就可以得到 didOpenL2CAPChannel 的回调

00:19:28.726 --> 00:19:31.946 A:middle
所以

00:19:31.946 --> 00:19:33.816 A:middle
CB L2CAP 信道封装了你所需要的所有信息

00:19:33.816 --> 00:19:35.786 A:middle
以便知道你在与谁交流

00:19:35.786 --> 00:19:37.286 A:middle
以及如何与之交流

00:19:37.486 --> 00:19:38.466 A:middle
在这种情况下

00:19:38.466 --> 00:19:39.536 A:middle
对等体既可以是远程连接的中央设备

00:19:39.536 --> 00:19:40.786 A:middle
也可以是

00:19:40.786 --> 00:19:41.876 A:middle
远程连接的外部设备

00:19:42.446 --> 00:19:43.836 A:middle
我们

00:19:43.836 --> 00:19:45.066 A:middle
将会告诉你 PSM 已被和什么连接

00:19:45.066 --> 00:19:47.356 A:middle
以防

00:19:47.356 --> 00:19:47.846 A:middle
你有多个已建立的服务

00:19:47.846 --> 00:19:49.876 A:middle
然后

00:19:49.876 --> 00:19:51.156 A:middle
我们会给你 InputStream 和 OutputStream

00:19:52.186 --> 00:19:53.626 A:middle
我们不想建立我们自己的 API

00:19:53.626 --> 00:19:55.456 A:middle
这样会

00:19:55.456 --> 00:19:57.466 A:middle
让你需要重新学习一个新的读写 API

00:19:58.056 --> 00:19:59.476 A:middle
我们不想让你

00:19:59.606 --> 00:20:00.876 A:middle
因为

00:19:59.606 --> 00:20:00.876 A:middle
因为

00:20:00.876 --> 00:20:02.016 A:middle
蓝牙连接

00:20:02.016 --> 00:20:02.626 A:middle
而改变你的代码

00:20:02.956 --> 00:20:04.026 A:middle
如果

00:20:04.026 --> 00:20:05.066 A:middle
你已经知道如何处理

00:20:05.066 --> 00:20:06.236 A:middle
socket InputStream 和 OutputStream

00:20:06.236 --> 00:20:08.276 A:middle
你就可以

00:20:08.356 --> 00:20:08.626 A:middle
处理好 L2CAP 信道

00:20:11.126 --> 00:20:13.066 A:middle
所以

00:20:13.066 --> 00:20:14.126 A:middle
我们使用一样的流事件

00:20:14.126 --> 00:20:16.146 A:middle
你可以在连接后

00:20:16.146 --> 00:20:18.036 A:middle
摆脱 socket

00:20:18.036 --> 00:20:19.066 A:middle
但是数据还是可以持续被读取

00:20:19.366 --> 00:20:20.246 A:middle
你会得到

00:20:20.246 --> 00:20:21.356 A:middle
hasBytesAvailable 的回调

00:20:22.376 --> 00:20:23.976 A:middle
如果你正在写入数据

00:20:23.976 --> 00:20:25.126 A:middle
并填写所有这些队列

00:20:25.126 --> 00:20:26.346 A:middle
你将会得到与 hasSpaceAvailable 的 socket 一样的

00:20:26.346 --> 00:20:28.016 A:middle
回调

00:20:29.236 --> 00:20:30.486 A:middle
我们认为

00:20:30.486 --> 00:20:31.966 A:middle
这是非常强大的

00:20:31.966 --> 00:20:33.156 A:middle
因为如果你已经有

00:20:33.376 --> 00:20:34.916 A:middle
可以在别的网络接口

00:20:34.916 --> 00:20:35.906 A:middle
如以太网和无线网上运行的程序

00:20:36.356 --> 00:20:37.436 A:middle
则

00:20:37.436 --> 00:20:39.046 A:middle
这个程序可以被直接

00:20:39.166 --> 00:20:39.646 A:middle
应用于 L2CAP 信道中

00:20:41.136 --> 00:20:42.376 A:middle
在信道

00:20:42.376 --> 00:20:43.636 A:middle
关闭以后

00:20:43.636 --> 00:20:44.796 A:middle
你会得到相同的

00:20:44.796 --> 00:20:44.976 A:middle
endEncountered.Event

00:20:48.306 --> 00:20:49.296 A:middle
所以

00:20:49.296 --> 00:20:51.376 A:middle
当你打开你的连接之后

00:20:51.376 --> 00:20:52.746 A:middle
你可以向那个连接读取数据

00:20:52.746 --> 00:20:53.146 A:middle
你也可以向它写入数据

00:20:53.346 --> 00:20:55.146 A:middle
最终

00:20:55.146 --> 00:20:57.806 A:middle
当它关闭时

00:20:57.896 --> 00:20:59.036 A:middle
你可以获取 endEncounterd.Event

00:20:59.036 --> 00:20:59.446 A:middle
并且这种关闭可以由于很多原因

00:20:59.586 --> 00:21:01.586 A:middle
所以

00:20:59.586 --> 00:21:01.586 A:middle
所以

00:21:01.586 --> 00:21:04.066 A:middle
如果蓝牙链接丢失

00:21:04.066 --> 00:21:05.426 A:middle
我们将会告诉你 L2CAP 信道被关闭

00:21:06.136 --> 00:21:08.146 A:middle
作为中央设备

00:21:08.146 --> 00:21:09.646 A:middle
你可以手动操作

00:21:09.646 --> 00:21:10.156 A:middle
关闭连接

00:21:11.256 --> 00:21:12.576 A:middle
作为外部设备

00:21:12.576 --> 00:21:13.696 A:middle
你可以取消发布服务

00:21:13.696 --> 00:21:18.126 A:middle
或者

00:21:18.126 --> 00:21:19.506 A:middle
你可以放弃对象

00:21:20.006 --> 00:21:22.356 A:middle
并允许它被释放

00:21:22.356 --> 00:21:23.116 A:middle
这会通过核心蓝牙

00:21:23.116 --> 00:21:24.156 A:middle
告诉我们

00:21:24.156 --> 00:21:24.716 A:middle
你对此不再感兴趣

00:21:24.716 --> 00:21:26.326 A:middle
这也会

00:21:26.326 --> 00:21:26.626 A:middle
关闭 L2CAP 信道

00:21:33.046 --> 00:21:34.366 A:middle
所以什么时候

00:21:34.366 --> 00:21:34.716 A:middle
你可以用 L2CAP 信道呢

00:21:36.336 --> 00:21:38.176 A:middle
通常来说

00:21:38.176 --> 00:21:39.746 A:middle
如果你已经熟练使用 GATT

00:21:39.746 --> 00:21:41.706 A:middle
并且你的数据模型

00:21:41.706 --> 00:21:43.446 A:middle
与 GATT 数据库可以完美兼容

00:21:43.446 --> 00:21:44.016 A:middle
那么你应该继续这样使用

00:21:44.496 --> 00:21:46.046 A:middle
GATT 使恢复数据

00:21:46.046 --> 00:21:47.956 A:middle
和快速更新

00:21:47.956 --> 00:21:48.576 A:middle
都变得很容易

00:21:48.576 --> 00:21:50.976 A:middle
你不需要

00:21:50.976 --> 00:21:51.606 A:middle
构建你的数据

00:21:52.146 --> 00:21:53.506 A:middle
所以如果可行 你可以继续保持

00:21:53.506 --> 00:21:54.006 A:middle
原先的使用方法

00:21:54.986 --> 00:21:56.656 A:middle
但是如果之前

00:21:56.656 --> 00:21:57.996 A:middle
让你的数据适应 GATT 数据库时有困难

00:21:57.996 --> 00:22:00.526 A:middle
要么是因为

00:21:57.996 --> 00:22:00.526 A:middle
要么是因为

00:22:00.636 --> 00:22:01.976 A:middle
你的数据太多

00:22:01.976 --> 00:22:02.806 A:middle
或者是因为

00:22:02.806 --> 00:22:05.266 A:middle
GATT 跟这些数据

00:22:05.266 --> 00:22:06.396 A:middle
有些不兼容

00:22:06.396 --> 00:22:07.836 A:middle
这时

00:22:07.936 --> 00:22:09.226 A:middle
L2CAP 信道就是

00:22:09.226 --> 00:22:10.906 A:middle
让你的配件间

00:22:10.906 --> 00:22:12.546 A:middle
交流得更好的

00:22:12.546 --> 00:22:13.206 A:middle
绝佳机会

00:22:14.386 --> 00:22:15.546 A:middle
并且

00:22:15.546 --> 00:22:17.326 A:middle
如果你在做大规模的数据传输

00:22:17.326 --> 00:22:19.226 A:middle
比如说固件更新

00:22:19.226 --> 00:22:20.616 A:middle
L2CAP 通道就是一个让这种数据传输

00:22:20.616 --> 00:22:21.366 A:middle
更加迅速的绝佳机会

00:22:22.616 --> 00:22:24.146 A:middle
如果

00:22:24.146 --> 00:22:25.606 A:middle
你已经在你的两台设备间

00:22:25.606 --> 00:22:26.676 A:middle
定义了一个流媒体协议

00:22:26.676 --> 00:22:28.516 A:middle
那么

00:22:28.596 --> 00:22:29.536 A:middle
L2CAP 会使其

00:22:29.536 --> 00:22:29.976 A:middle
非常合适

00:22:33.546 --> 00:22:34.796 A:middle
我想

00:22:34.796 --> 00:22:36.286 A:middle
向你介绍一些

00:22:36.286 --> 00:22:37.386 A:middle
我们最近几年所得到的经验

00:22:37.906 --> 00:22:41.256 A:middle
第一条就是

00:22:41.256 --> 00:22:42.516 A:middle
请按照

00:22:42.516 --> 00:22:43.566 A:middle
蓝牙配件设计指南操作

00:22:44.256 --> 00:22:45.716 A:middle
我们的指南

00:22:46.096 --> 00:22:47.796 A:middle
有很多的内容

00:22:47.796 --> 00:22:50.266 A:middle
里面有大量的信息

00:22:50.266 --> 00:22:51.556 A:middle
这些都可以帮助你

00:22:51.556 --> 00:22:52.176 A:middle
建立最好的配件

00:22:52.566 --> 00:22:55.796 A:middle
这些指南

00:22:55.796 --> 00:22:56.666 A:middle
并不是强制性的

00:22:56.666 --> 00:22:57.796 A:middle
但是它们

00:22:58.076 --> 00:23:00.166 A:middle
是我们这些年间

00:22:58.076 --> 00:23:00.166 A:middle
是我们这些年间

00:23:00.336 --> 00:23:01.946 A:middle
所学到的经验

00:23:01.946 --> 00:23:03.076 A:middle
它们可以帮助你

00:23:03.076 --> 00:23:03.466 A:middle
在建立配件时少走弯路

00:23:06.096 --> 00:23:07.716 A:middle
如果有条件的话

00:23:07.716 --> 00:23:08.836 A:middle
请使用现成的配置文件和服务

00:23:09.516 --> 00:23:11.976 A:middle
对于

00:23:11.976 --> 00:23:13.226 A:middle
像 Notification Center

00:23:13.226 --> 00:23:15.976 A:middle
和 Apple Media 这种

00:23:15.976 --> 00:23:17.186 A:middle
我们已经定义了

00:23:17.186 --> 00:23:18.466 A:middle
我们自己的协议

00:23:18.466 --> 00:23:20.346 A:middle
并且蓝牙网站上

00:23:20.346 --> 00:23:20.956 A:middle
有很多像关于电池更新和设备信息的配置文件

00:23:21.496 --> 00:23:23.126 A:middle
所以

00:23:23.126 --> 00:23:23.976 A:middle
如果有一些

00:23:24.506 --> 00:23:25.766 A:middle
现成的配置文件可用

00:23:25.766 --> 00:23:27.486 A:middle
你应该使用它

00:23:27.486 --> 00:23:28.346 A:middle
这将会帮助你更快的获取你所要的数据

00:23:31.726 --> 00:23:33.096 A:middle
我们经常遇到的

00:23:33.096 --> 00:23:34.216 A:middle
一个问题是

00:23:34.216 --> 00:23:35.496 A:middle
“为什么经常需要花费那么久来连接到我的配件”

00:23:37.626 --> 00:23:39.446 A:middle
在你的两个设备

00:23:39.446 --> 00:23:41.596 A:middle
建立连接之前

00:23:41.596 --> 00:23:42.606 A:middle
它们是各自运行在自己的时间线上的

00:23:42.856 --> 00:23:43.916 A:middle
你的外部设备

00:23:43.916 --> 00:23:45.336 A:middle
会像外界传播信息

00:23:46.186 --> 00:23:47.296 A:middle
你的中央设备

00:23:47.296 --> 00:23:48.606 A:middle
会从外界

00:23:48.606 --> 00:23:49.106 A:middle
搜索设备

00:23:49.496 --> 00:23:51.596 A:middle
但是

00:23:51.596 --> 00:23:52.886 A:middle
每个事件都使用小窗口

00:23:52.886 --> 00:23:54.486 A:middle
并且直到这两个事件排好

00:23:54.486 --> 00:23:55.546 A:middle
你才可以查找到你的配件

00:23:56.086 --> 00:23:58.546 A:middle
所以

00:23:58.546 --> 00:23:59.586 A:middle
在你的两个设备间

00:23:59.586 --> 00:24:01.396 A:middle
建立快速连接

00:23:59.586 --> 00:24:01.396 A:middle
建立快速连接

00:24:01.396 --> 00:24:03.646 A:middle
或者在你扫描时

00:24:03.646 --> 00:24:04.726 A:middle
快速发现的最简单方法是

00:24:04.726 --> 00:24:05.566 A:middle
使用最短的广告间隔

00:24:06.516 --> 00:24:08.036 A:middle
这保证了

00:24:08.036 --> 00:24:09.546 A:middle
无论你的中央设备

00:24:09.626 --> 00:24:11.376 A:middle
处于什么状态

00:24:11.376 --> 00:24:12.966 A:middle
屏幕开启屏幕关闭

00:24:12.966 --> 00:24:14.736 A:middle
直接在 App 中还是在后台运行

00:24:14.736 --> 00:24:18.646 A:middle
你都可以使用最短的时间查找

00:24:18.646 --> 00:24:19.936 A:middle
对你的配件

00:24:19.936 --> 00:24:22.296 A:middle
使用较短的广告间隔

00:24:22.296 --> 00:24:24.426 A:middle
会增加额外的电池使用

00:24:24.426 --> 00:24:26.556 A:middle
所以

00:24:26.556 --> 00:24:27.936 A:middle
你不能长时间的做这件事情

00:24:27.936 --> 00:24:30.276 A:middle
但是我们强烈推荐的是

00:24:30.276 --> 00:24:32.326 A:middle
如果你能通过一些必要手段

00:24:32.326 --> 00:24:34.026 A:middle
比如通过用户触摸配件

00:24:34.026 --> 00:24:36.106 A:middle
用户拾起

00:24:36.356 --> 00:24:37.586 A:middle
加速度计

00:24:37.586 --> 00:24:38.746 A:middle
按钮等方式

00:24:38.746 --> 00:24:40.356 A:middle
来作为开始进行活跃广告的暗示

00:24:40.356 --> 00:24:41.316 A:middle
这样

00:24:41.316 --> 00:24:43.686 A:middle
当你试图节省电池使用的时候

00:24:43.686 --> 00:24:44.686 A:middle
你也可以有一个较低的广告间隔

00:24:47.536 --> 00:24:48.586 A:middle
如果

00:24:48.586 --> 00:24:49.706 A:middle
你想要节省电池

00:24:49.706 --> 00:24:50.916 A:middle
你可以查询

00:24:50.916 --> 00:24:51.516 A:middle
蓝牙配件设计指南

00:24:51.516 --> 00:24:55.096 A:middle
我们

00:24:55.096 --> 00:24:56.696 A:middle
有很多电源优化

00:24:56.696 --> 00:24:58.016 A:middle
我们也发现了

00:24:58.016 --> 00:24:59.036 A:middle
可以用于广告间隔的时间优化

00:25:06.056 --> 00:25:07.116 A:middle
我们发现的另一件事情是

00:25:07.116 --> 00:25:09.386 A:middle
如果你之前

00:25:09.386 --> 00:25:11.156 A:middle
使用过一个配件

00:25:11.156 --> 00:25:13.146 A:middle
并且你想再次连接这一配件时

00:25:13.146 --> 00:25:14.526 A:middle
不需要每次都进行扫描

00:25:14.876 --> 00:25:16.676 A:middle
如果

00:25:16.676 --> 00:25:18.306 A:middle
你知道设备正在广告

00:25:18.306 --> 00:25:19.586 A:middle
或者

00:25:20.106 --> 00:25:21.036 A:middle
你只是想尽快连接

00:25:21.036 --> 00:25:21.586 A:middle
直接连上配件

00:25:22.956 --> 00:25:24.676 A:middle
如果

00:25:24.676 --> 00:25:26.446 A:middle
你有标识符

00:25:26.446 --> 00:25:28.316 A:middle
你可以调用

00:25:28.316 --> 00:25:30.246 A:middle
retrievePeripherals(WithIdentifiers)

00:25:30.246 --> 00:25:31.966 A:middle
然后直接获取一个你可以连接的 CBPeripheral 对象

00:25:31.966 --> 00:25:33.526 A:middle
如果

00:25:33.526 --> 00:25:35.026 A:middle
你想要扫描你的配件

00:25:35.476 --> 00:25:36.526 A:middle
然后连接到它

00:25:36.526 --> 00:25:38.236 A:middle
与第一次发现就连接相比 它实际上

00:25:38.236 --> 00:25:39.916 A:middle
会花费我们

00:25:39.916 --> 00:25:40.936 A:middle
两倍的时间

00:25:40.936 --> 00:25:41.946 A:middle
来完成该操作

00:25:47.546 --> 00:25:48.796 A:middle
我们

00:25:48.796 --> 00:25:50.386 A:middle
常常被问到的一个问题是

00:25:50.386 --> 00:25:51.846 A:middle
为什么在我连接到我的配件后

00:25:51.846 --> 00:25:53.126 A:middle
查找 GATT 数据库要花费那么久

00:25:54.226 --> 00:25:55.136 A:middle
有一些方法

00:25:55.136 --> 00:25:56.696 A:middle
可以让你加速

00:25:56.696 --> 00:25:58.046 A:middle
这个进程

00:25:58.996 --> 00:26:00.546 A:middle
我们

00:25:58.996 --> 00:26:00.546 A:middle
我们

00:26:00.876 --> 00:26:02.226 A:middle
首先推荐的方法是

00:26:02.226 --> 00:26:03.736 A:middle
尽可能少的使用服务或特性

00:26:04.226 --> 00:26:05.506 A:middle
每次你向 GATT 数据库

00:26:05.506 --> 00:26:07.146 A:middle
新添加一项服务

00:26:07.146 --> 00:26:08.606 A:middle
都会多花费一些时间

00:26:08.606 --> 00:26:10.086 A:middle
因为我们需要查找这些服务

00:26:10.356 --> 00:26:11.206 A:middle
并请求这些服务

00:26:11.506 --> 00:26:13.476 A:middle
所以

00:26:13.476 --> 00:26:15.726 A:middle
通过舍弃一些

00:26:15.726 --> 00:26:16.976 A:middle
你不需要的服务

00:26:16.976 --> 00:26:18.856 A:middle
或者将几个特性都压缩进一个服务

00:26:18.856 --> 00:26:20.126 A:middle
可以在你的用户连接到你的配件时

00:26:20.126 --> 00:26:20.976 A:middle
大大加快服务查找

00:26:20.976 --> 00:26:21.456 A:middle
所需的时间

00:26:25.056 --> 00:26:26.986 A:middle
另外一个

00:26:26.986 --> 00:26:28.336 A:middle
简单有效的办法是

00:26:28.386 --> 00:26:31.046 A:middle
你可以依据 UUID 的大小

00:26:31.046 --> 00:26:32.026 A:middle
来对你的服务进行分组

00:26:33.376 --> 00:26:34.906 A:middle
所以

00:26:34.906 --> 00:26:37.226 A:middle
如果你有多个 16 位 UUID

00:26:37.226 --> 00:26:40.056 A:middle
有一个 128 位的 UUID 服务

00:26:40.056 --> 00:26:42.106 A:middle
我们可以在一次往返过程中

00:26:42.106 --> 00:26:44.836 A:middle
发现所有的 16 位服务

00:26:44.836 --> 00:26:45.906 A:middle
而不是来来回回地

00:26:45.906 --> 00:26:46.366 A:middle
查找每一个服务

00:26:50.316 --> 00:26:51.886 A:middle
最终

00:26:51.886 --> 00:26:54.036 A:middle
你查找服务的过程

00:26:54.036 --> 00:26:55.456 A:middle
就可以被加速

00:26:55.456 --> 00:26:56.356 A:middle
如果我们可以兑现你的 GATT 数据库

00:26:56.356 --> 00:26:57.356 A:middle
我们一定会这样子做的

00:26:57.356 --> 00:26:58.226 A:middle
这样在重连时我们就不需要再进行查找

00:26:59.116 --> 00:27:00.376 A:middle
如果

00:26:59.116 --> 00:27:00.376 A:middle
如果

00:27:00.606 --> 00:27:02.246 A:middle
你的配件需要配对

00:27:02.896 --> 00:27:04.266 A:middle
或绑定

00:27:04.266 --> 00:27:05.086 A:middle
这意味着

00:27:05.086 --> 00:27:06.696 A:middle
你需要修改 GATT 数据库中

00:27:06.696 --> 00:27:07.166 A:middle
服务的特性

00:27:07.926 --> 00:27:08.606 A:middle
服务更改特性

00:27:08.606 --> 00:27:09.556 A:middle
是蓝牙规范的一部分

00:27:09.556 --> 00:27:11.816 A:middle
这允许你告诉我们

00:27:11.816 --> 00:27:15.046 A:middle
你设备上的服务和特性

00:27:15.046 --> 00:27:16.136 A:middle
是在什么时候被改变的

00:27:16.136 --> 00:27:17.546 A:middle
并且告诉我们

00:27:17.796 --> 00:27:19.536 A:middle
什么时候重新使用

00:27:19.536 --> 00:27:20.716 A:middle
最新版本的 GATT 数据库是安全的

00:27:22.176 --> 00:27:23.746 A:middle
如果

00:27:23.746 --> 00:27:25.456 A:middle
你的配件不允许配对

00:27:25.456 --> 00:27:27.716 A:middle
或者绑定

00:27:27.716 --> 00:27:28.706 A:middle
这意味着

00:27:28.706 --> 00:27:30.546 A:middle
即使你有服务更改特性

00:27:30.546 --> 00:27:31.456 A:middle
我们也无法缓存你的数据库

00:27:32.536 --> 00:27:35.166 A:middle
所以在这些情况下

00:27:35.166 --> 00:27:37.046 A:middle
如果

00:27:37.046 --> 00:27:39.446 A:middle
你没有服务更改特性

00:27:39.826 --> 00:27:41.336 A:middle
我们将会

00:27:41.336 --> 00:27:42.076 A:middle
缓存你的整个服务数据库

00:27:42.076 --> 00:27:43.226 A:middle
这可以让你更快地重连到设备

00:27:43.806 --> 00:27:44.996 A:middle
但是

00:27:44.996 --> 00:27:47.006 A:middle
如果你不支持配对

00:27:47.006 --> 00:27:47.796 A:middle
或者你想要做一些固件更新

00:27:47.796 --> 00:27:48.596 A:middle
你就需要更加注意

00:27:48.596 --> 00:27:50.406 A:middle
即使这是一个很罕见的事

00:27:50.976 --> 00:27:52.306 A:middle
但是

00:27:52.306 --> 00:27:54.906 A:middle
你无法告诉我们

00:27:54.906 --> 00:27:55.706 A:middle
你的外部设备上的服务被更改了

00:28:01.246 --> 00:28:02.856 A:middle
最终

00:28:02.856 --> 00:28:05.386 A:middle
如果你想

00:28:05.386 --> 00:28:06.656 A:middle
建立一个新的配件

00:28:06.656 --> 00:28:08.566 A:middle
你可以经常查看

00:28:08.566 --> 00:28:10.236 A:middle
那些可用的最新的芯片集

00:28:10.336 --> 00:28:11.586 A:middle
因为我们推出了核心蓝牙

00:28:11.586 --> 00:28:13.986 A:middle
蓝牙 4.2 和现在的蓝牙 5.0

00:28:13.986 --> 00:28:15.336 A:middle
都已经发布

00:28:15.826 --> 00:28:17.496 A:middle
这些版本的

00:28:17.496 --> 00:28:18.486 A:middle
所有功能

00:28:18.486 --> 00:28:19.056 A:middle
都是反向兼容的

00:28:19.056 --> 00:28:20.306 A:middle
所以

00:28:20.306 --> 00:28:21.926 A:middle
即使你建立一个蓝牙 5.0 版本的配件

00:28:22.126 --> 00:28:23.736 A:middle
它也可以

00:28:23.736 --> 00:28:26.286 A:middle
跟所有你想要连接的

00:28:26.286 --> 00:28:27.956 A:middle
蓝牙 4.0 版本的设备兼容

00:28:28.486 --> 00:28:31.926 A:middle
之后就像我说的一样

00:28:31.926 --> 00:28:33.416 A:middle
遵从配件设计指南

00:28:33.826 --> 00:28:35.106 A:middle
如果你先阅读这些内容

00:28:35.106 --> 00:28:36.926 A:middle
你可以在之后的项目中

00:28:36.926 --> 00:28:38.376 A:middle
省却很多麻烦

00:28:42.676 --> 00:28:44.036 A:middle
现在我想把舞台

00:28:44.036 --> 00:28:45.666 A:middle
让给 Duy

00:28:45.666 --> 00:28:46.756 A:middle
Duy 将会告诉大家

00:28:46.756 --> 00:28:47.166 A:middle
如何充分使用核心蓝牙

00:28:47.466 --> 00:28:48.546 A:middle
&gt;&gt; 谢谢你 Craig

00:28:49.516 --> 00:28:54.666 A:middle
[掌声]

00:28:55.166 --> 00:28:56.066 A:middle
&gt;&gt; 我是 Duy

00:28:56.066 --> 00:28:57.156 A:middle
今天

00:28:57.156 --> 00:28:58.176 A:middle
我将谈论一下如何充分使用核心蓝牙

00:28:59.296 --> 00:29:00.576 A:middle
让我们

00:28:59.296 --> 00:29:00.576 A:middle
让我们

00:29:00.576 --> 00:29:02.106 A:middle
想象一个场景

00:29:02.106 --> 00:29:03.776 A:middle
我们要从一个更新设备的地方

00:29:03.776 --> 00:29:04.336 A:middle
发送大量数据

00:29:04.746 --> 00:29:06.426 A:middle
如果

00:29:06.426 --> 00:29:08.546 A:middle
我们使用 Write With Response

00:29:08.656 --> 00:29:12.706 A:middle
和所有的默认设置

00:29:12.766 --> 00:29:15.286 A:middle
以 2.5 kbps 的速度 我们需要花费 3000 秒来传输 1 MB 的数据

00:29:15.566 --> 00:29:17.506 A:middle
这非常的慢

00:29:17.776 --> 00:29:20.046 A:middle
那么问题是什么呢

00:29:20.046 --> 00:29:21.096 A:middle
主要有两个问题

00:29:21.096 --> 00:29:22.576 A:middle
第一个问题是

00:29:22.576 --> 00:29:23.426 A:middle
LE 中的所有协议开销

00:29:23.996 --> 00:29:25.486 A:middle
蓝牙规范

00:29:25.486 --> 00:29:26.816 A:middle
将 LE 的最大应用数据链

00:29:26.816 --> 00:29:28.786 A:middle
定义为 27 字节

00:29:28.786 --> 00:29:31.346 A:middle
但是

00:29:31.476 --> 00:29:33.326 A:middle
因为你的数据

00:29:33.326 --> 00:29:34.676 A:middle
需要从 App

00:29:34.676 --> 00:29:35.996 A:middle
到 GATT

00:29:35.996 --> 00:29:38.286 A:middle
到 ATT

00:29:38.286 --> 00:29:40.726 A:middle
再到 L2CAP

00:29:40.726 --> 00:29:42.276 A:middle
这将会丢失 7 字节的数据 所以你丢失了数据包中 25 % 的内容

00:29:42.276 --> 00:29:43.116 A:middle
最终可用数据长度将只有 20 字节

00:29:43.766 --> 00:29:46.536 A:middle
并且

00:29:46.536 --> 00:29:48.266 A:middle
一旦你的数据

00:29:48.676 --> 00:29:50.906 A:middle
通过了控制器

00:29:50.906 --> 00:29:53.216 A:middle
硬件会添加链路层安全

00:29:53.216 --> 00:29:55.566 A:middle
并且 CRC 也会延长传输数据包的时间

00:29:56.206 --> 00:29:59.406 A:middle
所以

00:29:59.406 --> 00:30:00.336 A:middle
为了提高性能

00:29:59.406 --> 00:30:00.336 A:middle
为了提高性能

00:30:00.336 --> 00:30:01.506 A:middle
我们需要同时减小

00:30:01.506 --> 00:30:02.786 A:middle
硬件与软件的开销

00:30:03.556 --> 00:30:05.696 A:middle
第二个问题是

00:30:05.696 --> 00:30:08.446 A:middle
以前在 GATT 中

00:30:08.446 --> 00:30:10.006 A:middle
可靠写入的唯一方法是

00:30:10.006 --> 00:30:11.916 A:middle
使用 Write With Response

00:30:11.916 --> 00:30:14.106 A:middle
这要花费两个时间间隔来完成

00:30:14.106 --> 00:30:15.346 A:middle
一个时间间隔来写入

00:30:15.346 --> 00:30:15.966 A:middle
另一个时间间隔来回复

00:30:16.316 --> 00:30:17.826 A:middle
所以

00:30:17.826 --> 00:30:18.386 A:middle
你的写入是非常稀疏的

00:30:18.386 --> 00:30:19.906 A:middle
你没有

00:30:19.906 --> 00:30:22.916 A:middle
充分利用可用的带宽

00:30:22.916 --> 00:30:24.376 A:middle
因为

00:30:24.376 --> 00:30:26.156 A:middle
有很多方法可以让每个时间间隔

00:30:26.156 --> 00:30:28.136 A:middle
都进行传输

00:30:28.136 --> 00:30:30.626 A:middle
并且我们在所有的连接事件中

00:30:30.626 --> 00:30:31.696 A:middle
都想打包尽可能多的写入内容

00:30:32.076 --> 00:30:33.126 A:middle
所以我们要怎么实现这一切呢

00:30:33.706 --> 00:30:36.446 A:middle
就像 Craig 之前提到的一样

00:30:36.446 --> 00:30:37.956 A:middle
我们改进了 Write Without Response

00:30:38.286 --> 00:30:39.766 A:middle
你现在可以写入

00:30:39.766 --> 00:30:41.186 A:middle
并且

00:30:41.186 --> 00:30:42.486 A:middle
继续写入

00:30:43.226 --> 00:30:45.846 A:middle
核心蓝牙 设置可以发送保持写入信号

00:30:45.846 --> 00:30:47.446 A:middle
而不出现错误响应

00:30:47.446 --> 00:30:48.886 A:middle
在这种情况下

00:30:48.886 --> 00:30:50.216 A:middle
你的 App 会等待一个委托信号

00:30:50.216 --> 00:30:50.566 A:middle
来在安全时恢复写入

00:30:51.076 --> 00:30:52.376 A:middle
并且当你遵循 API 时

00:30:52.376 --> 00:30:53.646 A:middle
写入会是可靠的

00:30:54.356 --> 00:30:55.946 A:middle
并且

00:30:55.946 --> 00:30:57.766 A:middle
你可以使用 Write Without Response

00:30:57.766 --> 00:30:58.806 A:middle
来确保核心蓝牙

00:30:58.806 --> 00:31:01.256 A:middle
是充分缓冲的

00:30:58.806 --> 00:31:01.256 A:middle
是充分缓冲的

00:31:01.256 --> 00:31:02.296 A:middle
这样我们就可以使用

00:31:02.296 --> 00:31:03.786 A:middle
所有可用的连接事件

00:31:03.786 --> 00:31:04.816 A:middle
来传输你的应用数据

00:31:06.016 --> 00:31:09.796 A:middle
在 iOS 10 中

00:31:09.796 --> 00:31:11.716 A:middle
我们也增大了连接事件长度

00:31:11.716 --> 00:31:13.206 A:middle
这样你就会有更多的空间

00:31:13.206 --> 00:31:14.726 A:middle
来使用

00:31:14.726 --> 00:31:15.206 A:middle
Write For That Response 写入

00:31:17.096 --> 00:31:18.626 A:middle
当你把所有的连接事件

00:31:18.626 --> 00:31:19.786 A:middle
打包进一个时间间隔后

00:31:19.786 --> 00:31:21.616 A:middle
你的吞吐量

00:31:21.616 --> 00:31:24.116 A:middle
将会从 2.5 kbps 提升至 37 kbps

00:31:24.656 --> 00:31:27.406 A:middle
然后

00:31:27.406 --> 00:31:31.506 A:middle
我们回到减少软件协议开销的问题

00:31:31.506 --> 00:31:32.716 A:middle
所有我们的讨论

00:31:32.716 --> 00:31:34.976 A:middle
都假设一个 23 字节的 ATT MTU

00:31:35.326 --> 00:31:37.276 A:middle
这也是为什么

00:31:37.276 --> 00:31:38.956 A:middle
每个观众包都有红色部分的开销

00:31:38.956 --> 00:31:41.926 A:middle
但是我们可以扩展 MTU

00:31:41.926 --> 00:31:44.146 A:middle
并扩展写入内容

00:31:44.146 --> 00:31:45.346 A:middle
以适应 MTU

00:31:45.936 --> 00:31:47.426 A:middle
这将会提高

00:31:47.426 --> 00:31:49.016 A:middle
你的吞吐量

00:31:49.016 --> 00:31:50.396 A:middle
因为 L2CAP 将会把你的数据分块

00:31:50.896 --> 00:31:53.106 A:middle
你只需要

00:31:53.146 --> 00:31:54.396 A:middle
在你 MTU 的第一块数据上

00:31:54.426 --> 00:31:54.846 A:middle
分配花销

00:31:55.266 --> 00:31:58.306 A:middle
其余的数据块

00:31:58.306 --> 00:32:00.936 A:middle
可以达到 27 字节

00:31:58.306 --> 00:32:00.936 A:middle
可以达到 27 字节

00:32:00.936 --> 00:32:02.266 A:middle
所以当你在做这些的时候

00:32:02.266 --> 00:32:04.316 A:middle
你的吞吐量会提高至 48 kbps

00:32:05.086 --> 00:32:08.936 A:middle
然后

00:32:09.736 --> 00:32:12.446 A:middle
你要怎样在核心蓝牙中配置 MTU 呢

00:32:12.446 --> 00:32:13.836 A:middle
如果

00:32:13.836 --> 00:32:15.196 A:middle
你是从核心蓝牙运行到核心蓝牙

00:32:15.196 --> 00:32:16.166 A:middle
那么你没有什么可以做的

00:32:16.166 --> 00:32:18.566 A:middle
我们将会

00:32:18.566 --> 00:32:19.886 A:middle
根据连接事件长度

00:32:19.886 --> 00:32:21.286 A:middle
和系统配置

00:32:21.286 --> 00:32:23.856 A:middle
来为你计算 MTU

00:32:23.856 --> 00:32:25.666 A:middle
但是在这个例子中

00:32:25.666 --> 00:32:26.776 A:middle
我们正在更新配件

00:32:27.256 --> 00:32:29.996 A:middle
所以

00:32:29.996 --> 00:32:31.456 A:middle
如果你回忆一个

00:32:31.456 --> 00:32:32.726 A:middle
客户端与服务器间的 ATT MTU 交换

00:32:32.726 --> 00:32:35.916 A:middle
则两个建议值的两个最小值

00:32:35.916 --> 00:32:37.256 A:middle
就是 ATT MTU

00:32:37.256 --> 00:32:38.666 A:middle
所以

00:32:38.666 --> 00:32:40.756 A:middle
你的配件

00:32:40.756 --> 00:32:42.816 A:middle
应该使用更大的 MTU

00:32:42.816 --> 00:32:44.676 A:middle
来充分利用这些

00:32:44.676 --> 00:32:47.326 A:middle
更加优化的特性

00:32:47.556 --> 00:32:49.576 A:middle
并且

00:32:49.576 --> 00:32:51.506 A:middle
要使用更大的写属性

00:32:51.506 --> 00:32:53.186 A:middle
来适应 MTU

00:32:53.186 --> 00:32:55.456 A:middle
对此

00:32:55.456 --> 00:32:58.746 A:middle
你可以使用下面的接口

00:32:58.746 --> 00:33:00.896 A:middle
来找出 MTU 适用的

00:32:58.746 --> 00:33:00.896 A:middle
来找出 MTU 适用的

00:33:01.046 --> 00:33:01.976 A:middle
最大写入长度

00:33:05.896 --> 00:33:08.366 A:middle
到此

00:33:08.366 --> 00:33:11.516 A:middle
我们探讨了

00:33:11.516 --> 00:33:13.306 A:middle
如何在一个时间间隔中

00:33:13.306 --> 00:33:16.226 A:middle
打包尽可能多的写入内容

00:33:16.226 --> 00:33:17.426 A:middle
并且谈论了如何充分利用可用带宽

00:33:17.716 --> 00:33:20.356 A:middle
我们讨论了如何减小开销

00:33:20.356 --> 00:33:21.796 A:middle
软件开销

00:33:22.336 --> 00:33:27.466 A:middle
但是

00:33:27.536 --> 00:33:29.746 A:middle
LE 每个数据包 27 字节

00:33:29.746 --> 00:33:30.876 A:middle
并且

00:33:30.876 --> 00:33:33.216 A:middle
我们得为每个数据包提供硬件开销

00:33:33.216 --> 00:33:35.306 A:middle
这大大限制了

00:33:35.306 --> 00:33:37.826 A:middle
我们仅仅通过软件可以提高的 LE 性能

00:33:39.076 --> 00:33:40.816 A:middle
所以

00:33:40.816 --> 00:33:41.406 A:middle
我们添加了扩展数据长度支持

00:33:42.246 --> 00:33:44.336 A:middle
扩展数据长度

00:33:44.336 --> 00:33:46.106 A:middle
是 4.2 的一个功能

00:33:46.106 --> 00:33:48.956 A:middle
它可以把应用数据长度

00:33:48.956 --> 00:33:50.886 A:middle
从 27 字节提升至 251 字节

00:33:52.496 --> 00:33:55.046 A:middle
这意味着

00:33:55.046 --> 00:33:56.416 A:middle
每个数据包中你可以比之前

00:33:56.416 --> 00:33:58.536 A:middle
多传输十倍的数据

00:33:58.536 --> 00:33:59.596 A:middle
所以你就可以

00:33:59.596 --> 00:34:02.816 A:middle
消除所有的硬件开销和软件开销

00:33:59.596 --> 00:34:02.816 A:middle
消除所有的硬件开销和软件开销

00:34:03.846 --> 00:34:05.546 A:middle
并且

00:34:05.546 --> 00:34:07.236 A:middle
我们可以使用更多的可用时间

00:34:07.236 --> 00:34:07.956 A:middle
来传输你的应用数据

00:34:09.106 --> 00:34:12.696 A:middle
事实上

00:34:12.696 --> 00:34:16.436 A:middle
我们可以使用扩展数据长度

00:34:16.436 --> 00:34:18.096 A:middle
在一个时间间隔里

00:34:18.096 --> 00:34:20.606 A:middle
发送一个完整的

00:34:20.606 --> 00:34:22.396 A:middle
512 字节的 GATT 写入

00:34:22.396 --> 00:34:23.876 A:middle
这是

00:34:23.876 --> 00:34:24.926 A:middle
正常吞吐量的三倍

00:34:26.516 --> 00:34:32.036 A:middle
[掌声]

00:34:32.536 --> 00:34:33.985 A:middle
扩展数据长度

00:34:33.985 --> 00:34:35.446 A:middle
是蓝牙 4.2 中的新功能

00:34:35.866 --> 00:34:36.996 A:middle
它将最大应用数据长度

00:34:36.996 --> 00:34:38.766 A:middle
从 27

00:34:38.766 --> 00:34:40.446 A:middle
扩展到 251

00:34:40.446 --> 00:34:42.116 A:middle
这对于你的 App 来说

00:34:42.116 --> 00:34:42.846 A:middle
是完全透明的

00:34:42.966 --> 00:34:44.396 A:middle
如果

00:34:44.396 --> 00:34:46.416 A:middle
你是从核心蓝牙运行到核心蓝牙

00:34:46.416 --> 00:34:47.065 A:middle
那么我们已经为你做好了一切

00:34:47.065 --> 00:34:48.676 A:middle
我们会根据你的硬件配置

00:34:48.676 --> 00:34:50.496 A:middle
协商写入合适的数据长度和 MTU

00:34:50.496 --> 00:34:52.585 A:middle
但是

00:34:52.585 --> 00:34:54.306 A:middle
在这个例子中

00:34:54.306 --> 00:34:57.186 A:middle
我们在更新固件设备

00:34:57.186 --> 00:34:58.646 A:middle
所以

00:34:58.646 --> 00:35:00.706 A:middle
你还需要在配件中

00:34:58.646 --> 00:35:00.706 A:middle
你还需要在配件中

00:35:00.706 --> 00:35:02.056 A:middle
为扩展数据长度

00:35:02.056 --> 00:35:02.346 A:middle
添加支持

00:35:03.226 --> 00:35:05.786 A:middle
并且

00:35:05.786 --> 00:35:07.126 A:middle
它是非常节能的

00:35:07.126 --> 00:35:08.856 A:middle
因为在同样的广播时间中

00:35:08.856 --> 00:35:09.626 A:middle
它有四倍的吞吐量

00:35:09.966 --> 00:35:12.446 A:middle
它现在

00:35:12.446 --> 00:35:14.266 A:middle
可以在 iPhone 7 和 Apple Watch Series 2

00:35:14.266 --> 00:35:16.616 A:middle
以及新推出的 iPad Pro 上使用

00:35:17.006 --> 00:35:19.346 A:middle
所以

00:35:19.346 --> 00:35:20.826 A:middle
请尝试着使用一下

00:35:20.826 --> 00:35:22.606 A:middle
并且把它作为一个

00:35:22.606 --> 00:35:23.276 A:middle
开发你自己的扩展数据长度配件的参考

00:35:24.516 --> 00:35:29.816 A:middle
[掌声]

00:35:30.316 --> 00:35:34.016 A:middle
因为

00:35:34.016 --> 00:35:35.406 A:middle
我们的例子是基于更新设备

00:35:35.756 --> 00:35:38.246 A:middle
所以这也是一个

00:35:38.246 --> 00:35:39.626 A:middle
有关使用

00:35:39.626 --> 00:35:40.456 A:middle
L2CAP 面向连接信道的例子

00:35:40.986 --> 00:35:42.576 A:middle
这将会

00:35:42.576 --> 00:35:45.046 A:middle
消除所有之前 GATT 和 ATT 中的开销

00:35:45.046 --> 00:35:47.036 A:middle
但是更重要的是

00:35:47.036 --> 00:35:49.496 A:middle
它消除了 GATT 中的限制

00:35:49.496 --> 00:35:50.736 A:middle
比如之前的 GATT

00:35:50.736 --> 00:35:53.696 A:middle
限制最大属性大小为 512

00:35:54.136 --> 00:35:57.106 A:middle
所以我们现在可以写入更大的值

00:35:57.106 --> 00:35:58.986 A:middle
也可以使用更大的 MTU

00:35:59.636 --> 00:36:01.146 A:middle
当我们这样做的时候

00:35:59.636 --> 00:36:01.146 A:middle
当我们这样做的时候

00:36:01.146 --> 00:36:03.516 A:middle
吞吐量会增加至

00:36:04.366 --> 00:36:04.826 A:middle
接近 200 kbps

00:36:05.646 --> 00:36:08.416 A:middle
这证明了

00:36:08.486 --> 00:36:10.456 A:middle
如果没有了软件协议的限制

00:36:10.456 --> 00:36:12.056 A:middle
扩展数据长度

00:36:12.056 --> 00:36:12.536 A:middle
将会多么强大

00:36:15.616 --> 00:36:17.086 A:middle
众所周知

00:36:17.086 --> 00:36:19.536 A:middle
提升性能的另一方法是

00:36:19.536 --> 00:36:20.476 A:middle
请求一个更快的

00:36:20.476 --> 00:36:21.046 A:middle
连接间隔

00:36:21.396 --> 00:36:23.936 A:middle
所有至今为止的讨论

00:36:23.936 --> 00:36:26.626 A:middle
都假设连接间隔为 30 ms

00:36:26.626 --> 00:36:28.986 A:middle
但是

00:36:28.986 --> 00:36:30.406 A:middle
在核心蓝牙中

00:36:30.406 --> 00:36:32.026 A:middle
我们把 iOS 中的连接间隔

00:36:32.026 --> 00:36:35.626 A:middle
减小至 15 ms

00:36:35.626 --> 00:36:36.826 A:middle
所以当你的固件

00:36:36.826 --> 00:36:38.396 A:middle
在更新你的设备时

00:36:38.676 --> 00:36:40.816 A:middle
你可以请求一个参数更新

00:36:40.816 --> 00:36:43.536 A:middle
并将时间间隔的最小值和最大值

00:36:43.846 --> 00:36:44.726 A:middle
设置为 15 ms

00:36:45.616 --> 00:36:47.046 A:middle
当你这么做了以后

00:36:47.046 --> 00:36:50.476 A:middle
你的吞吐量

00:36:50.476 --> 00:36:52.906 A:middle
可以翻倍至 394 也就是接近 400 kbps

00:36:53.516 --> 00:36:57.736 A:middle
[掌声]

00:36:58.236 --> 00:37:00.306 A:middle
接下来是一个关于我们做过的事

00:36:58.236 --> 00:37:00.306 A:middle
接下来是一个关于我们做过的事

00:37:00.306 --> 00:37:01.746 A:middle
和我们正要做的事的总结

00:37:02.116 --> 00:37:04.356 A:middle
我们

00:37:04.356 --> 00:37:06.476 A:middle
从 2.5 kbps 的 Write With Response 开始

00:37:07.706 --> 00:37:09.676 A:middle
接着我们做出了 Write Without Response

00:37:09.676 --> 00:37:11.646 A:middle
但是

00:37:11.686 --> 00:37:14.596 A:middle
每个时间间隔只能写入一次

00:37:14.596 --> 00:37:15.276 A:middle
这只是将性能翻倍而已

00:37:16.006 --> 00:37:17.986 A:middle
但是

00:37:17.986 --> 00:37:19.786 A:middle
如果你打包所有传输机会

00:37:20.526 --> 00:37:21.756 A:middle
你的吞吐量

00:37:21.756 --> 00:37:22.996 A:middle
可以增加至 37 kbps

00:37:22.996 --> 00:37:25.496 A:middle
并且

00:37:25.496 --> 00:37:28.236 A:middle
如果你使用更大的 MTU 来减小开销

00:37:28.236 --> 00:37:29.726 A:middle
你的性能可以提高至 48 kbps

00:37:30.386 --> 00:37:31.986 A:middle
接着我们在扩展数据长度上

00:37:31.986 --> 00:37:33.336 A:middle
实现了一个重要的跨越

00:37:33.596 --> 00:37:36.906 A:middle
我们把它提高至三倍

00:37:36.906 --> 00:37:38.446 A:middle
这将性能提高至 135 kbps

00:37:39.196 --> 00:37:40.966 A:middle
如果

00:37:41.016 --> 00:37:43.076 A:middle
我们用 L2CAP 和扩展数据长度

00:37:43.076 --> 00:37:44.936 A:middle
来消除软件限制

00:37:44.936 --> 00:37:47.436 A:middle
性能可以被提升至 200 kbps

00:37:48.716 --> 00:37:51.806 A:middle
然后

00:37:51.806 --> 00:37:53.766 A:middle
我们加快连接间隔

00:37:53.766 --> 00:37:55.356 A:middle
这让你可以更频繁的传输数据

00:37:55.356 --> 00:37:57.816 A:middle
这样吞吐量

00:37:57.816 --> 00:37:59.586 A:middle
可以被提升至 400 kbps

00:37:59.956 --> 00:38:02.396 A:middle
所以

00:37:59.956 --> 00:38:02.396 A:middle
所以

00:38:02.506 --> 00:38:04.206 A:middle
我们从最初的

00:38:04.206 --> 00:38:06.576 A:middle
花费 3000 秒来下载 1 MB 数据

00:38:06.576 --> 00:38:07.666 A:middle
慢慢提高到了现在的 20 秒下载 1 MB 数据

00:38:08.516 --> 00:38:12.796 A:middle
[掌声]

00:38:13.296 --> 00:38:14.946 A:middle
所以 总的来说

00:38:14.946 --> 00:38:16.616 A:middle
请请求一个更短的连接间隔

00:38:16.886 --> 00:38:20.226 A:middle
当前 iOS 下的最新最小值

00:38:20.226 --> 00:38:20.756 A:middle
是 15 MS

00:38:21.346 --> 00:38:23.066 A:middle
请尽情的使用我们所有的 GATT 的优化

00:38:23.066 --> 00:38:24.686 A:middle
比如

00:38:24.686 --> 00:38:26.226 A:middle
Write Without Response

00:38:26.226 --> 00:38:27.706 A:middle
使用 L2CAP 信道

00:38:27.706 --> 00:38:28.286 A:middle
来做大规模数据传输

00:38:28.936 --> 00:38:30.826 A:middle
这些都是免费的 都是软件的形式

00:38:30.826 --> 00:38:33.806 A:middle
你还需要根据最新的蓝牙规范

00:38:33.806 --> 00:38:34.836 A:middle
和硬件标准

00:38:34.836 --> 00:38:36.746 A:middle
更新你的硬件

00:38:36.746 --> 00:38:38.746 A:middle
以得到

00:38:38.746 --> 00:38:40.206 A:middle
最好的性能

00:38:40.206 --> 00:38:40.816 A:middle
和电池寿命

00:38:41.646 --> 00:38:41.976 A:middle
谢谢大家

00:38:42.516 --> 00:38:49.456 A:middle
[掌声]

00:38:49.956 --> 00:38:52.936 A:middle
&gt;&gt; 谢谢你 Duy

00:38:53.066 --> 00:38:54.066 A:middle
所以

00:38:54.066 --> 00:38:55.116 A:middle
我们今天谈论了很多很振奋人心的信息

00:38:55.506 --> 00:38:59.006 A:middle
有很多需要回顾的东西

00:38:59.006 --> 00:39:00.156 A:middle
但是

00:38:59.006 --> 00:39:00.156 A:middle
但是

00:39:00.156 --> 00:39:01.216 A:middle
如果你的 App

00:39:01.216 --> 00:39:02.806 A:middle
是希望整天都连接的

00:39:02.806 --> 00:39:04.426 A:middle
你可以查看我们状态恢复中的

00:39:04.426 --> 00:39:05.516 A:middle
最新优化

00:39:05.616 --> 00:39:07.006 A:middle
尝试为你的用户

00:39:07.006 --> 00:39:08.466 A:middle
建立更稳定的服务

00:39:09.386 --> 00:39:11.056 A:middle
你可以现在

00:39:11.056 --> 00:39:12.586 A:middle
让你的 App

00:39:12.936 --> 00:39:13.906 A:middle
也适用于 Apple tvOS

00:39:13.906 --> 00:39:15.736 A:middle
和 watchOS

00:39:17.166 --> 00:39:19.036 A:middle
如果你想要尝试流媒体协议

00:39:19.036 --> 00:39:20.636 A:middle
或者

00:39:20.636 --> 00:39:22.676 A:middle
传输大规模数据

00:39:22.676 --> 00:39:24.036 A:middle
L2CAP 是一个很好的选择

00:39:24.036 --> 00:39:25.186 A:middle
并且

00:39:25.186 --> 00:39:26.386 A:middle
我们相信这也是一个

00:39:26.386 --> 00:39:27.356 A:middle
可以帮助你建立更好配件的

00:39:27.356 --> 00:39:28.276 A:middle
强大功能

00:39:28.776 --> 00:39:30.856 A:middle
如果

00:39:30.856 --> 00:39:32.856 A:middle
你想要建立新的配件

00:39:32.856 --> 00:39:34.576 A:middle
你要经常查看最新的蓝牙规范

00:39:34.576 --> 00:39:36.236 A:middle
和芯片集

00:39:36.236 --> 00:39:37.386 A:middle
并且

00:39:37.386 --> 00:39:37.996 A:middle
谨遵配件设计指南

00:39:40.616 --> 00:39:42.806 A:middle
这里

00:39:42.806 --> 00:39:43.976 A:middle
有一个我们的网站

00:39:43.976 --> 00:39:45.106 A:middle
上面有一些

00:39:45.106 --> 00:39:47.476 A:middle
关于核心蓝牙开发人员文档示例代码的链接

00:39:47.476 --> 00:39:49.216 A:middle
也有一些别的资源

00:39:49.216 --> 00:39:50.176 A:middle
这些可能会对你有一些帮助

00:39:51.916 --> 00:39:53.546 A:middle
在 WWDC

00:39:53.546 --> 00:39:54.656 A:middle
也有两个会议

00:39:54.656 --> 00:39:56.406 A:middle
可以在线观看

00:39:56.406 --> 00:39:57.256 A:middle
所以你可以回去看这些视频

00:39:57.256 --> 00:39:59.156 A:middle
然后获得一些

00:39:59.156 --> 00:40:01.456 A:middle
关于核心蓝牙做中央设备

00:39:59.156 --> 00:40:01.456 A:middle
关于核心蓝牙做中央设备

00:40:01.496 --> 00:40:02.536 A:middle
或者外部设备

00:40:02.536 --> 00:40:02.986 A:middle
的信息

00:40:03.826 --> 00:40:04.346 A:middle
谢谢大家

00:40:04.656 --> 00:40:06.166 A:middle
我们迫不及待的看到大家

00:40:06.166 --> 00:40:07.246 A:middle
使用这些新的技术
