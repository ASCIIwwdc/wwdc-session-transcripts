WEBVTT

00:00:21.746 --> 00:00:22.666 A:middle
&gt;&gt;  大家早上好

00:00:23.746 --> 00:00:24.756 A:middle
抱歉有些技术

00:00:24.756 --> 00:00:25.476 A:middle
故障

00:00:25.826 --> 00:00:26.656 A:middle
但是现在我们准备好了

00:00:26.886 --> 00:00:27.716 A:middle
好的

00:00:27.716 --> 00:00:28.826 A:middle
我是 Sara Radi

00:00:28.826 --> 00:00:30.446 A:middle
欢迎来到“Localizing with Xcode 9

00:00:30.446 --> 00:00:31.506 A:middle
（使用 Xcode 9 进行本地化）”会议

00:00:31.506 --> 00:00:32.776 A:middle
今天  我和我的同事

00:00:33.006 --> 00:00:34.236 A:middle
Aya 和 Chris 想要

00:00:34.236 --> 00:00:35.806 A:middle
跟大家聊聊一些令人兴奋的

00:00:36.056 --> 00:00:37.266 A:middle
针对 Xcode 9 本地化流程所做的

00:00:37.266 --> 00:00:39.456 A:middle
新的改进

00:00:39.906 --> 00:00:40.906 A:middle
让我们开始吧

00:00:42.256 --> 00:00:45.786 A:middle
在世界各地

00:00:45.786 --> 00:00:47.506 A:middle
有这么多的人在

00:00:47.506 --> 00:00:49.126 A:middle
访问和使用你们开发的

00:00:49.126 --> 00:00:49.926 A:middle
应用程序

00:00:50.336 --> 00:00:51.916 A:middle
但是如果你

00:00:51.916 --> 00:00:53.126 A:middle
不让他们以自己的母语

00:00:53.216 --> 00:00:55.046 A:middle
来使用你的 App 的话

00:00:55.046 --> 00:00:55.486 A:middle
他们就无法做到这一点

00:00:57.286 --> 00:00:59.576 A:middle
一个新的 App 可以通过

00:00:59.576 --> 00:01:01.246 A:middle
一些简单的步骤和规范操作

00:00:59.576 --> 00:01:01.246 A:middle
一些简单的步骤和规范操作

00:01:01.246 --> 00:01:02.756 A:middle
轻松传达到

00:01:02.756 --> 00:01:03.336 A:middle
全球受众

00:01:03.616 --> 00:01:05.355 A:middle
另外在今天的会议上 我们会

00:01:05.355 --> 00:01:07.666 A:middle
谈一谈 Xcode 如何

00:01:07.666 --> 00:01:09.246 A:middle
使添加新的本地语言变得简单

00:01:09.246 --> 00:01:11.476 A:middle
这将使你的 App

00:01:11.726 --> 00:01:13.376 A:middle
有更好的本地化效果

00:01:13.376 --> 00:01:14.236 A:middle
助你走向全球市场

00:01:15.196 --> 00:01:17.146 A:middle
所以  我们今天主要会谈到

00:01:17.146 --> 00:01:18.316 A:middle
三个话题

00:01:18.956 --> 00:01:20.726 A:middle
首先我们将介绍

00:01:20.726 --> 00:01:23.806 A:middle
如何准备全球化  然后

00:01:23.806 --> 00:01:24.726 A:middle
全面介绍

00:01:24.726 --> 00:01:26.396 A:middle
Xcode 的本地化工作流

00:01:26.396 --> 00:01:28.356 A:middle
以及我们在 Xcode 9

00:01:28.356 --> 00:01:29.556 A:middle
里添加的新的功能

00:01:30.956 --> 00:01:32.006 A:middle
最后  通过

00:01:32.006 --> 00:01:33.806 A:middle
现场演示  我们会谈一谈

00:01:33.866 --> 00:01:35.436 A:middle
测试  并且提供一些

00:01:35.436 --> 00:01:37.116 A:middle
规范步骤来确保

00:01:37.116 --> 00:01:39.426 A:middle
你的 App 在所有

00:01:39.426 --> 00:01:40.656 A:middle
你所支持的语言环境下拥有良好的用户体验

00:01:40.926 --> 00:01:43.046 A:middle
首先我们来谈谈

00:01:43.466 --> 00:01:44.646 A:middle
国际化

00:01:47.636 --> 00:01:49.666 A:middle
国际化是一个

00:01:49.736 --> 00:01:51.296 A:middle
设计软件的过程

00:01:51.296 --> 00:01:53.176 A:middle
它要求你的软件可以适应

00:01:53.306 --> 00:01:54.936 A:middle
不同的语言和

00:01:54.936 --> 00:01:56.856 A:middle
地区  而不是每次在 App 里面添加

00:01:56.856 --> 00:01:58.956 A:middle
新的语言的时候

00:01:58.956 --> 00:02:00.536 A:middle
都需要更改

00:01:58.956 --> 00:02:00.536 A:middle
都需要更改

00:02:00.816 --> 00:02:00.926 A:middle
代码

00:02:01.676 --> 00:02:02.936 A:middle
所以  我想要说的是

00:02:02.936 --> 00:02:04.836 A:middle
不管你的 App

00:02:04.936 --> 00:02:06.256 A:middle
是以哪种语言运行

00:02:06.796 --> 00:02:08.295 A:middle
不管文字是短

00:02:09.166 --> 00:02:12.196 A:middle
还是长  或者高

00:02:12.196 --> 00:02:14.336 A:middle
甚至顺序是

00:02:14.336 --> 00:02:16.326 A:middle
从右往左

00:02:16.386 --> 00:02:17.526 A:middle
它都应该能

00:02:17.526 --> 00:02:18.996 A:middle
根据场景不同而灵活地

00:02:18.996 --> 00:02:19.686 A:middle
适应

00:02:20.196 --> 00:02:22.996 A:middle
全球化的

00:02:22.996 --> 00:02:24.746 A:middle
第一步是

00:02:24.876 --> 00:02:26.136 A:middle
管理你的字符串

00:02:26.786 --> 00:02:30.006 A:middle
你的 App 中的字符串

00:02:30.006 --> 00:02:32.036 A:middle
将由职业翻译人员

00:02:32.036 --> 00:02:32.816 A:middle
翻译成对应的本地语言

00:02:33.796 --> 00:02:35.576 A:middle
NSLocalizedString 就是

00:02:35.576 --> 00:02:37.166 A:middle
为了让你更容易

00:02:37.166 --> 00:02:39.506 A:middle
为你的翻译人员

00:02:39.506 --> 00:02:41.186 A:middle
创建可本地化的内容

00:02:41.226 --> 00:02:42.976 A:middle
并在运行时显示正确的

00:02:43.036 --> 00:02:43.316 A:middle
文本而存在的

00:02:44.116 --> 00:02:45.796 A:middle
所以  如果你的字符串

00:02:45.796 --> 00:02:47.246 A:middle
来源于 Storyboard 或者压缩

00:02:47.246 --> 00:02:48.986 A:middle
文档   他们会默认为可被本地化

00:02:48.986 --> 00:02:49.976 A:middle
所以我们也就不用

00:02:49.976 --> 00:02:50.766 A:middle
担心这些

00:02:51.226 --> 00:02:52.596 A:middle
但是有的时候  某些

00:02:52.646 --> 00:02:54.426 A:middle
字符串是在

00:02:54.426 --> 00:02:55.856 A:middle
源代码中定义和生成

00:02:55.856 --> 00:02:57.226 A:middle
并最终呈现给用户  例如

00:02:57.226 --> 00:02:59.336 A:middle
错误消息  通知

00:02:59.336 --> 00:03:00.606 A:middle
如果你想通知

00:02:59.336 --> 00:03:00.606 A:middle
如果你想通知

00:03:00.606 --> 00:03:01.656 A:middle
用户一些事情

00:03:02.036 --> 00:03:03.306 A:middle
并且确保

00:03:03.526 --> 00:03:04.496 A:middle
这些字符串也可以

00:03:04.496 --> 00:03:05.146 A:middle
被本地化

00:03:05.716 --> 00:03:07.106 A:middle
实现这一点  你只需要

00:03:07.106 --> 00:03:08.396 A:middle
把这些字符串

00:03:08.606 --> 00:03:09.716 A:middle
用 NSLocalizedString 包装起来

00:03:10.786 --> 00:03:12.826 A:middle
另外  你可以将

00:03:13.006 --> 00:03:14.886 A:middle
NSLocalizedString 作为

00:03:15.046 --> 00:03:16.026 A:middle
格式化字符串并调用

00:03:16.276 --> 00:03:18.256 A:middle
localizedStringWithFormat 来获得

00:03:18.256 --> 00:03:19.656 A:middle
一条被本地化且格式化了的

00:03:19.796 --> 00:03:20.076 A:middle
字符串

00:03:21.146 --> 00:03:22.286 A:middle
那么  我们来一起看

00:03:22.286 --> 00:03:23.276 A:middle
一个例程

00:03:24.276 --> 00:03:26.476 A:middle
这里我们有一个 Label 控件

00:03:26.546 --> 00:03:28.066 A:middle
我把它的内容设置为

00:03:28.066 --> 00:03:28.806 A:middle
“Population”

00:03:29.196 --> 00:03:30.976 A:middle
这里我的字符串是硬编码

00:03:30.976 --> 00:03:32.436 A:middle
并且不可本地化

00:03:33.126 --> 00:03:34.966 A:middle
为了实现本地化  你需要

00:03:34.966 --> 00:03:36.366 A:middle
用 NSLocalizedString

00:03:36.366 --> 00:03:37.306 A:middle
把它包装起来

00:03:37.616 --> 00:03:39.456 A:middle
如屏幕显示

00:03:39.496 --> 00:03:40.896 A:middle
NSLocalizedString 有两个

00:03:40.966 --> 00:03:43.276 A:middle
参数  你的字符串和一条

00:03:43.276 --> 00:03:43.766 A:middle
注释

00:03:44.376 --> 00:03:45.976 A:middle
注释对于翻译们来说

00:03:45.976 --> 00:03:47.246 A:middle
真的非常重要

00:03:47.276 --> 00:03:48.456 A:middle
因为这样他们才能知道

00:03:48.556 --> 00:03:50.246 A:middle
自己翻译的字符串的

00:03:50.246 --> 00:03:51.006 A:middle
上下文是什么

00:03:51.746 --> 00:03:54.106 A:middle
我想说大部分时候

00:03:54.106 --> 00:03:55.086 A:middle
你只需要使用

00:03:55.266 --> 00:03:57.666 A:middle
NSLocalizedString 就够了  但是某些

00:03:57.666 --> 00:03:59.086 A:middle
情况下  当你在构建

00:03:59.086 --> 00:04:00.156 A:middle
框架或者共享

00:03:59.086 --> 00:04:00.156 A:middle
框架或者共享

00:04:00.206 --> 00:04:02.326 A:middle
模块时  你也许需要使用

00:04:02.326 --> 00:04:04.156 A:middle
NSLocalizedString 读取对照表

00:04:04.476 --> 00:04:06.146 A:middle
你只要确认对照表的名称

00:04:06.286 --> 00:04:07.406 A:middle
NSLocalizedString 就会自动生成你想要的

00:04:07.406 --> 00:04:07.796 A:middle
字符串

00:04:08.326 --> 00:04:11.526 A:middle
如我之前提到的

00:04:11.526 --> 00:04:12.806 A:middle
你也可以结合

00:04:12.806 --> 00:04:13.846 A:middle
NSLocalizedString 以及

00:04:13.846 --> 00:04:15.866 A:middle
localizedStringWithFormat

00:04:15.996 --> 00:04:17.946 A:middle
因为 NSLocalizedString 是

00:04:18.055 --> 00:04:18.305 A:middle
格式字符串

00:04:18.456 --> 00:04:19.906 A:middle
在这个例子里面

00:04:19.906 --> 00:04:21.276 A:middle
为你的翻译们提供那些评论

00:04:21.276 --> 00:04:22.306 A:middle
真的至关重要

00:04:22.306 --> 00:04:23.806 A:middle
只有这样他们才知道自己

00:04:23.806 --> 00:04:25.316 A:middle
翻译的字符串的

00:04:25.316 --> 00:04:26.066 A:middle
上下文是什么

00:04:26.176 --> 00:04:29.996 A:middle
等到那时候

00:04:30.196 --> 00:04:32.036 A:middle
NSLocalizedString 会检测

00:04:32.036 --> 00:04:33.656 A:middle
用户的语言偏好

00:04:33.656 --> 00:04:36.596 A:middle
并且找到对应的

00:04:36.596 --> 00:04:38.006 A:middle
Localizable.strings 文档

00:04:38.506 --> 00:04:39.876 A:middle
如你所见

00:04:39.876 --> 00:04:42.016 A:middle
这是一个 Localizable.strings 文档的例子

00:04:42.016 --> 00:04:43.796 A:middle
来自于以法文

00:04:43.796 --> 00:04:44.886 A:middle
进行的本地化工程

00:04:45.336 --> 00:04:46.676 A:middle
它包含你的所有

00:04:46.676 --> 00:04:47.626 A:middle
本地化字符串

00:04:47.626 --> 00:04:48.896 A:middle
比如你用 NSLocalizedString

00:04:48.986 --> 00:04:50.686 A:middle
包装的字符串  以及

00:04:50.686 --> 00:04:51.896 A:middle
你提供的注释

00:04:51.896 --> 00:04:53.896 A:middle
这些信息也会

00:04:53.896 --> 00:04:56.316 A:middle
提供给你的

00:04:57.316 --> 00:04:57.616 A:middle
翻译人员

00:04:58.686 --> 00:05:00.486 A:middle
如果你在 App 里

00:04:58.686 --> 00:05:00.486 A:middle
如果你在 App 里

00:05:00.486 --> 00:05:01.936 A:middle
使用 Objective-C  你可以通过运行

00:05:01.936 --> 00:05:03.736 A:middle
静态分析器查找

00:05:03.736 --> 00:05:05.276 A:middle
代码中的本地化问题

00:05:05.276 --> 00:05:07.796 A:middle
比如说你忘了

00:05:07.796 --> 00:05:09.516 A:middle
将一条字符串本地化 或者是你忘了

00:05:09.516 --> 00:05:10.806 A:middle
为本地化字符串

00:05:10.806 --> 00:05:13.356 A:middle
添加注释  你可以运行

00:05:13.356 --> 00:05:14.776 A:middle
静态分析器  然后获得

00:05:14.776 --> 00:05:16.256 A:middle
警告  这些警告会提示

00:05:16.256 --> 00:05:17.786 A:middle
你问题是什么  这样你就能

00:05:17.786 --> 00:05:19.146 A:middle
在代码里面直接修改好

00:05:19.686 --> 00:05:20.786 A:middle
如果你想了解更多

00:05:20.786 --> 00:05:22.406 A:middle
静态分析器  请

00:05:22.406 --> 00:05:24.946 A:middle
查看去年的

00:05:27.776 --> 00:05:27.896 A:middle
演讲吧

00:05:28.126 --> 00:05:29.506 A:middle
另外一件

00:05:29.506 --> 00:05:30.826 A:middle
关于 App 在本地化时

00:05:30.826 --> 00:05:32.466 A:middle
需要注意的事情

00:05:32.466 --> 00:05:34.146 A:middle
是协调不同的

00:05:34.146 --> 00:05:36.546 A:middle
日期  时间  数字等的

00:05:36.646 --> 00:05:38.006 A:middle
可视化表示形式

00:05:38.926 --> 00:05:41.596 A:middle
例如 12 小时制

00:05:41.746 --> 00:05:43.506 A:middle
是美国的标准时制格式

00:05:43.506 --> 00:05:45.296 A:middle
但是如果你想

00:05:45.296 --> 00:05:47.236 A:middle
确保用户

00:05:47.236 --> 00:05:49.026 A:middle
在法国使用你的 App 而他们

00:05:49.026 --> 00:05:51.316 A:middle
得到的是 24 小时制

00:05:51.316 --> 00:05:52.526 A:middle
因为法国的默认格式

00:05:52.526 --> 00:05:53.916 A:middle
就是这样的

00:05:55.156 --> 00:05:58.036 A:middle
我们提供了多种

00:05:58.086 --> 00:05:59.596 A:middle
强大的格式处理器

00:05:59.596 --> 00:06:01.166 A:middle
可以让你

00:05:59.596 --> 00:06:01.166 A:middle
可以让你

00:06:01.166 --> 00:06:03.566 A:middle
按照地区处理复杂的数据

00:06:03.566 --> 00:06:04.826 A:middle
给大家演示一下

00:06:04.826 --> 00:06:06.466 A:middle
格式处理器是如何工作的

00:06:06.466 --> 00:06:07.856 A:middle
我们来看一个数据格式处理器的

00:06:07.976 --> 00:06:08.496 A:middle
例子

00:06:09.106 --> 00:06:13.346 A:middle
假设你想

00:06:13.346 --> 00:06:15.446 A:middle
在你的 App 中

00:06:15.446 --> 00:06:16.426 A:middle
显示完整的数据格式

00:06:17.276 --> 00:06:20.136 A:middle
不同于设置一条

00:06:20.136 --> 00:06:21.776 A:middle
限定于

00:06:21.836 --> 00:06:23.766 A:middle
某个区域或者有固定显示格式的国家的

00:06:23.766 --> 00:06:25.756 A:middle
日期格式字符串  你可以使用

00:06:25.756 --> 00:06:27.986 A:middle
.dateStyle

00:06:29.136 --> 00:06:30.396 A:middle
这个格式处理器有多种不同的

00:06:30.396 --> 00:06:31.956 A:middle
样式供你挑选

00:06:33.236 --> 00:06:34.296 A:middle
但是既然我们想

00:06:34.296 --> 00:06:35.896 A:middle
显示完整的日期格式 我将

00:06:35.956 --> 00:06:37.306 A:middle
我的日期样式设置为显示全部

00:06:37.686 --> 00:06:39.066 A:middle
这样我们就可以确保

00:06:39.066 --> 00:06:40.486 A:middle
你的日期显示

00:06:40.546 --> 00:06:42.686 A:middle
在世界上所有地区

00:06:42.686 --> 00:06:42.986 A:middle
都是正确的格式

00:06:43.496 --> 00:06:45.956 A:middle
如屏幕所示

00:06:45.956 --> 00:06:47.226 A:middle
美国和法国的

00:06:47.226 --> 00:06:48.806 A:middle
日期格式

00:06:48.806 --> 00:06:49.946 A:middle
有所不同

00:06:50.006 --> 00:06:51.176 A:middle
比如说法国的日期没有

00:06:51.176 --> 00:06:52.036 A:middle
任何逗号

00:06:52.406 --> 00:06:53.256 A:middle
月份也不是

00:06:53.256 --> 00:06:53.986 A:middle
大写

00:06:54.346 --> 00:06:55.426 A:middle
具体日期显示在

00:06:55.426 --> 00:06:56.536 A:middle
月份之前

00:06:56.696 --> 00:06:58.246 A:middle
但是如果你输入的是

00:06:58.426 --> 00:07:00.046 A:middle
日期格式而不是

00:06:58.426 --> 00:07:00.046 A:middle
日期格式而不是

00:07:00.316 --> 00:07:03.266 A:middle
日期样式

00:07:04.796 --> 00:07:05.116 A:middle
这些是实现不了的

00:07:05.116 --> 00:07:06.736 A:middle
除了日期格式处理器之外

00:07:06.916 --> 00:07:09.006 A:middle
我们还有一系列

00:07:09.176 --> 00:07:10.976 A:middle
针对常见数据种类的格式处理器

00:07:10.976 --> 00:07:11.776 A:middle
他们在 Foundation 框架中随时可用

00:07:12.026 --> 00:07:13.226 A:middle
所以  如果你想更多了解有关

00:07:13.226 --> 00:07:14.576 A:middle
格式处理器的内容  请查看

00:07:14.576 --> 00:07:16.026 A:middle
去年的这两个相关

00:07:17.006 --> 00:07:19.886 A:middle
演讲

00:07:20.166 --> 00:07:22.236 A:middle
最后  你想要确保

00:07:22.236 --> 00:07:23.656 A:middle
你的用户界面

00:07:23.726 --> 00:07:25.476 A:middle
灵活多变  并且在你

00:07:25.476 --> 00:07:26.986 A:middle
所有支持的语言环境下都

00:07:26.986 --> 00:07:27.516 A:middle
显示的干净清爽

00:07:28.386 --> 00:07:30.666 A:middle
要实现这个  过程其实

00:07:30.666 --> 00:07:31.426 A:middle
非常简单

00:07:32.066 --> 00:07:33.166 A:middle
我们只需要使用

00:07:33.166 --> 00:07:35.176 A:middle
Base Internationalization 和

00:07:35.176 --> 00:07:35.506 A:middle
Auto Layout 就可以了

00:07:36.186 --> 00:07:37.486 A:middle
那么 我们先来谈一谈

00:07:37.486 --> 00:07:38.656 A:middle
Base Internationalization

00:07:38.656 --> 00:07:39.086 A:middle
吧

00:07:39.766 --> 00:07:42.196 A:middle
通过启用你的工程中的

00:07:42.196 --> 00:07:43.486 A:middle
Base Internationalization

00:07:43.576 --> 00:07:46.066 A:middle
Xcode 可以修改你的

00:07:46.136 --> 00:07:47.996 A:middle
工程文件夹结构并且

00:07:47.996 --> 00:07:50.286 A:middle
将你的 UI 从字符串中分离出来

00:07:50.286 --> 00:07:53.126 A:middle
这就意味着任何

00:07:53.126 --> 00:07:54.526 A:middle
与你的用户界面相关的

00:07:54.526 --> 00:07:56.816 A:middle
文档   比如一个 SIM 文档或者一个

00:07:56.896 --> 00:07:59.016 A:middle
Storyboard 文档会被存储在

00:07:59.116 --> 00:08:00.336 A:middle
Base.Iproj 中

00:07:59.116 --> 00:08:00.336 A:middle
Base.Iproj 中

00:08:01.906 --> 00:08:03.376 A:middle
当你的字符串  不管是

00:08:03.376 --> 00:08:04.736 A:middle
来自 Storyboard 文档

00:08:04.736 --> 00:08:07.486 A:middle
或者来自你用 NSLocalizedString

00:08:07.486 --> 00:08:08.106 A:middle
编写的代码

00:08:08.166 --> 00:08:09.846 A:middle
他们会

00:08:09.846 --> 00:08:11.746 A:middle
存储在特定的语言

00:08:12.016 --> 00:08:12.446 A:middle
文件夹里

00:08:13.266 --> 00:08:15.316 A:middle
所以  以这种方式  你只有一组

00:08:15.396 --> 00:08:17.216 A:middle
用户接口  而不是

00:08:17.216 --> 00:08:18.806 A:middle
只要你在 App 里

00:08:18.806 --> 00:08:20.386 A:middle
添加新的语言时

00:08:20.386 --> 00:08:22.946 A:middle
每次都要复制你的 UI

00:08:23.176 --> 00:08:25.176 A:middle
另外 Base Internationalization

00:08:25.176 --> 00:08:26.966 A:middle
从 Xcode 5 开始就默认已经

00:08:26.966 --> 00:08:27.666 A:middle
启用了

00:08:27.746 --> 00:08:29.166 A:middle
所以  如果你想本地化一个

00:08:29.166 --> 00:08:30.216 A:middle
之前的工程

00:08:30.546 --> 00:08:31.806 A:middle
请确保你已经将它

00:08:31.806 --> 00:08:32.155 A:middle
启用了

00:08:32.726 --> 00:08:36.956 A:middle
另外  你也许已经

00:08:36.956 --> 00:08:38.866 A:middle
对 Auto Layout 很熟悉了  或者

00:08:38.866 --> 00:08:39.966 A:middle
你已经在用它支持

00:08:39.966 --> 00:08:42.056 A:middle
App 里不同的

00:08:42.056 --> 00:08:43.576 A:middle
显示功能  或者

00:08:43.576 --> 00:08:44.076 A:middle
不同的屏幕尺寸

00:08:44.656 --> 00:08:45.896 A:middle
但是 Auto Layout

00:08:45.896 --> 00:08:48.296 A:middle
对本地化而言也是一项非常关键的

00:08:48.296 --> 00:08:49.076 A:middle
技术

00:08:49.756 --> 00:08:51.216 A:middle
所以  通过使用 Auto Layout

00:08:51.216 --> 00:08:52.806 A:middle
你可以确保 App 的

00:08:52.876 --> 00:08:54.576 A:middle
灵活性  并且可以适应

00:08:54.576 --> 00:08:55.696 A:middle
不同的字符串长度和

00:08:55.696 --> 00:08:57.186 A:middle
不同的 App

00:08:57.736 --> 00:08:57.806 A:middle
配置

00:08:58.856 --> 00:09:00.856 A:middle
在新的 Xcode 9 里  我们还有一个

00:08:58.856 --> 00:09:00.856 A:middle
在新的 Xcode 9 里  我们还有一个

00:09:00.856 --> 00:09:02.626 A:middle
全新的 Interface

00:09:02.626 --> 00:09:04.476 A:middle
Builder 本地化警告功能

00:09:04.476 --> 00:09:06.106 A:middle
使你的本地化

00:09:06.106 --> 00:09:08.296 A:middle
限制生效  意思是说当你

00:09:08.296 --> 00:09:09.966 A:middle
在 Storyboard 文档

00:09:09.966 --> 00:09:11.626 A:middle
或者压缩文档里配置 UI 时

00:09:11.626 --> 00:09:12.816 A:middle
你设置了这些

00:09:12.866 --> 00:09:14.346 A:middle
限制但是他们并没有

00:09:14.346 --> 00:09:16.046 A:middle
很好的进行本地化  你就会

00:09:16.046 --> 00:09:17.576 A:middle
得到这些警告以及

00:09:17.616 --> 00:09:19.336 A:middle
如何修复他们的建议

00:09:20.396 --> 00:09:21.556 A:middle
新的 Interface Builder

00:09:21.556 --> 00:09:23.406 A:middle
警告功能会在不久的将来

00:09:23.406 --> 00:09:24.156 A:middle
可用

00:09:26.676 --> 00:09:28.606 A:middle
另外在 Xcode 9 里

00:09:28.606 --> 00:09:30.166 A:middle
本地化选项的使用

00:09:30.166 --> 00:09:32.376 A:middle
可以为你

00:09:32.376 --> 00:09:33.576 A:middle
模拟本地化的

00:09:33.576 --> 00:09:34.156 A:middle
环境

00:09:34.606 --> 00:09:36.926 A:middle
所以不同于使用重复字符串

00:09:36.926 --> 00:09:38.676 A:middle
或者翻译的字符串去测试

00:09:38.676 --> 00:09:40.176 A:middle
他们在 App 里显示的效果

00:09:40.176 --> 00:09:41.576 A:middle
你可以直接使用我们提供的

00:09:41.576 --> 00:09:43.626 A:middle
本地化选项功能

00:09:43.626 --> 00:09:44.196 A:middle
之一

00:09:44.526 --> 00:09:45.896 A:middle
所以 在 Xcode 9 里  我们有更多新的

00:09:45.896 --> 00:09:47.346 A:middle
选择  比如针对带重音符的拉丁语

00:09:47.416 --> 00:09:49.366 A:middle
字符串  带词缀的字符串和

00:09:49.366 --> 00:09:50.596 A:middle
顺序是从右往左的

00:09:50.596 --> 00:09:51.076 A:middle
语言

00:09:51.126 --> 00:09:53.786 A:middle
与此同时  我想邀请

00:09:53.786 --> 00:09:56.236 A:middle
Ava 上台给大家演示一下

00:09:56.236 --> 00:09:57.776 A:middle
如何准备你的

00:09:57.856 --> 00:09:58.846 A:middle
App 本地化

00:09:59.116 --> 00:09:59.496 A:middle
谢谢

00:10:00.516 --> 00:10:05.786 A:middle
[掌声]

00:10:06.286 --> 00:10:06.976 A:middle
&gt;&gt;  谢谢 Sara

00:10:13.006 --> 00:10:15.576 A:middle
嗨 我是 Aya  今天我想给

00:10:15.576 --> 00:10:17.136 A:middle
大家展示一个我制作的

00:10:17.136 --> 00:10:18.266 A:middle
非常酷炫的 App

00:10:18.266 --> 00:10:19.446 A:middle
叫做 International Flags

00:10:20.026 --> 00:10:21.596 A:middle
如屏幕所示  我的 UI

00:10:21.596 --> 00:10:23.076 A:middle
占据了大部分表视图控件

00:10:23.076 --> 00:10:25.526 A:middle
用户可以从这个清单里

00:10:25.526 --> 00:10:27.546 A:middle
选择国家或地区

00:10:28.146 --> 00:10:29.056 A:middle
并且他们也能看到一些

00:10:29.056 --> 00:10:30.236 A:middle
相关信息  比如

00:10:30.236 --> 00:10:33.056 A:middle
国旗  人口  甚至是

00:10:33.056 --> 00:10:34.116 A:middle
语言的人口占比

00:10:35.566 --> 00:10:36.946 A:middle
所以  我确保了我的 App

00:10:37.046 --> 00:10:38.116 A:middle
用英语可以显示的很漂亮

00:10:38.116 --> 00:10:39.206 A:middle
并且我对它显示的方式

00:10:39.206 --> 00:10:41.536 A:middle
很满意  但是现在我想

00:10:41.536 --> 00:10:43.176 A:middle
让它国际化  这样才能为我的初次本地化

00:10:43.176 --> 00:10:44.966 A:middle
做好准备

00:10:45.676 --> 00:10:46.856 A:middle
为了实现这一点

00:10:46.856 --> 00:10:48.576 A:middle
我按照刚刚 Sara 在幻灯片里

00:10:48.576 --> 00:10:49.906 A:middle
展示的步骤操作

00:10:50.616 --> 00:10:51.936 A:middle
所以  我要做的第一步是

00:10:51.936 --> 00:10:53.306 A:middle
我的字符串管理

00:10:54.096 --> 00:10:56.016 A:middle
我现在以代码的形式载入

00:10:56.016 --> 00:10:57.866 A:middle
单元里所有的这些字符串

00:10:57.866 --> 00:11:00.276 A:middle
打开我的 Xcode

00:10:57.866 --> 00:11:00.276 A:middle
打开我的 Xcode

00:11:00.276 --> 00:11:00.736 A:middle
工程

00:11:06.546 --> 00:11:08.626 A:middle
在我的表格视图控件中

00:11:08.736 --> 00:11:10.646 A:middle
在行路径函数单元格中

00:11:10.646 --> 00:11:12.586 A:middle
我要确定

00:11:12.586 --> 00:11:14.366 A:middle
在我的 UI 里没有载入任何

00:11:14.366 --> 00:11:16.406 A:middle
写死的字符串

00:11:16.406 --> 00:11:18.266 A:middle
相反的  我要调用

00:11:18.266 --> 00:11:19.866 A:middle
NSLocalizedString 来

00:11:19.866 --> 00:11:20.866 A:middle
替换掉他们

00:11:21.626 --> 00:11:22.766 A:middle
现在  我要删除英文字符串

00:11:22.766 --> 00:11:24.396 A:middle
同时  我也会给出一条

00:11:24.396 --> 00:11:25.206 A:middle
有用的注释

00:11:25.366 --> 00:11:28.526 A:middle
所以  标签在选定的区域

00:11:28.896 --> 00:11:29.466 A:middle
之前

00:11:29.796 --> 00:11:32.326 A:middle
另外  我也往下看并

00:11:32.326 --> 00:11:33.346 A:middle
确保我为

00:11:33.396 --> 00:11:35.336 A:middle
所有其他的以代码形式载入的文本

00:11:35.336 --> 00:11:36.656 A:middle
都调用了 NSLocalizedString

00:11:37.746 --> 00:11:39.586 A:middle
那么接下来我想做的是

00:11:39.586 --> 00:11:41.536 A:middle
要确保

00:11:41.536 --> 00:11:42.946 A:middle
现在显示的是

00:11:42.946 --> 00:11:44.206 A:middle
对应语言区的

00:11:44.206 --> 00:11:44.646 A:middle
正确数据

00:11:45.476 --> 00:11:48.406 A:middle
在这个事例中  我的数据  或者说

00:11:48.406 --> 00:11:50.086 A:middle
大部分你看到的

00:11:50.086 --> 00:11:51.076 A:middle
右边的这些数字

00:11:51.646 --> 00:11:52.956 A:middle
在不同国家的

00:11:52.956 --> 00:11:53.966 A:middle
展示的方式

00:11:53.966 --> 00:11:54.416 A:middle
也不尽相同

00:11:54.506 --> 00:11:56.936 A:middle
那么  想要对他们进行正确排版

00:11:57.116 --> 00:11:58.196 A:middle
我将使用

00:11:58.196 --> 00:11:59.086 A:middle
数字格式处理器

00:12:00.526 --> 00:12:02.676 A:middle
数字格式处理器与之前

00:12:03.006 --> 00:12:05.176 A:middle
Sara 给我们展示的

00:12:05.176 --> 00:12:06.986 A:middle
日期格式处理器类似  当然除了它是

00:12:06.986 --> 00:12:08.866 A:middle
用来做数字排版而不是

00:12:08.866 --> 00:12:09.306 A:middle
日期的

00:12:10.296 --> 00:12:12.316 A:middle
所以  对于人口数量来说  我可以

00:12:12.316 --> 00:12:13.976 A:middle
设置我的数字格式

00:12:13.976 --> 00:12:14.566 A:middle
到小数位

00:12:15.106 --> 00:12:16.916 A:middle
我把 usesGroupingSeparator

00:12:16.916 --> 00:12:17.396 A:middle
设置为真

00:12:17.896 --> 00:12:19.426 A:middle
这样通过千位分隔符

00:12:19.426 --> 00:12:20.636 A:middle
数字会更加易于

00:12:20.636 --> 00:12:21.256 A:middle
阅读

00:12:21.346 --> 00:12:23.756 A:middle
因为人口数量

00:12:24.256 --> 00:12:28.566 A:middle
一般都是一个比较大的数字

00:12:28.566 --> 00:12:29.926 A:middle
针对 GDP  我也可以用

00:12:29.926 --> 00:12:31.656 A:middle
数字格式处理器  只是这次

00:12:31.656 --> 00:12:33.086 A:middle
我会设置数字样式为

00:12:33.086 --> 00:12:35.146 A:middle
货币  货币符号代码为

00:12:35.146 --> 00:12:36.586 A:middle
美元  因为我们的

00:12:36.586 --> 00:12:38.286 A:middle
数据是美元

00:12:38.876 --> 00:12:41.936 A:middle
最后  对于识字率

00:12:41.936 --> 00:12:43.666 A:middle
和语言人口占比

00:12:43.666 --> 00:12:45.696 A:middle
我将数字样式设置

00:12:45.696 --> 00:12:46.986 A:middle
为百分比

00:12:47.706 --> 00:12:50.036 A:middle
然后  我会给它一个最大和

00:12:50.036 --> 00:12:51.636 A:middle
最小的小数位位数以确保

00:12:51.636 --> 00:12:52.646 A:middle
前后一致

00:12:54.216 --> 00:12:55.266 A:middle
所以  现在我的字符串是

00:12:55.266 --> 00:12:57.206 A:middle
可被本地化的  并且

00:12:57.206 --> 00:12:58.936 A:middle
正确地显示出了数字的排版格式

00:12:58.936 --> 00:13:00.726 A:middle
接下来

00:12:58.936 --> 00:13:00.726 A:middle
接下来

00:13:00.726 --> 00:13:02.156 A:middle
我要做的是  确保

00:13:02.156 --> 00:13:03.966 A:middle
我的用户界面也已准备就绪

00:13:04.856 --> 00:13:07.076 A:middle
为了实现这一点  我需要

00:13:07.076 --> 00:13:08.596 A:middle
打开我的主 Storyboard

00:13:09.586 --> 00:13:11.566 A:middle
另外  我想给大家演示一下

00:13:11.976 --> 00:13:13.476 A:middle
如何在 Interface Builder 预览里使用

00:13:13.476 --> 00:13:15.846 A:middle
伪语言

00:13:16.056 --> 00:13:18.396 A:middle
测试 App 的本地化

00:13:19.236 --> 00:13:20.986 A:middle
首先我点击一下

00:13:20.986 --> 00:13:22.766 A:middle
右上方的

00:13:22.766 --> 00:13:23.876 A:middle
助理编辑图标

00:13:24.776 --> 00:13:26.536 A:middle
然后在下拉菜单里面

00:13:26.536 --> 00:13:28.136 A:middle
选择“Preview（预览）”

00:13:29.076 --> 00:13:30.326 A:middle
然后它就会显示出我的

00:13:30.326 --> 00:13:31.716 A:middle
Storyboard 预览情况

00:13:32.856 --> 00:13:34.336 A:middle
在右下角

00:13:35.606 --> 00:13:36.946 A:middle
我会看到一个语言选择选项

00:13:37.776 --> 00:13:39.536 A:middle
如果我的工程里有

00:13:39.536 --> 00:13:41.506 A:middle
任何本地化内容  我就会在这里

00:13:41.546 --> 00:13:41.836 A:middle
看到

00:13:42.216 --> 00:13:43.616 A:middle
但在这个事例当中  它显示的是

00:13:43.616 --> 00:13:45.826 A:middle
所有我可以在预览里

00:13:45.826 --> 00:13:46.896 A:middle
使用的

00:13:46.896 --> 00:13:47.346 A:middle
伪语言选项

00:13:48.286 --> 00:13:49.516 A:middle
在全新的 Xcode 9 里  我们刚刚

00:13:49.516 --> 00:13:50.466 A:middle
介绍了固定的

00:13:50.546 --> 00:13:51.816 A:middle
伪语言  现在我选定它之后

00:13:51.816 --> 00:13:53.146 A:middle
看看它到底能做些什么

00:13:54.326 --> 00:13:55.806 A:middle
如你所见  它在每个字符串

00:13:55.806 --> 00:13:57.226 A:middle
之前和之后

00:13:57.226 --> 00:13:58.776 A:middle
都添加了

00:13:58.776 --> 00:13:59.446 A:middle
方括号和英镑符号

00:14:00.606 --> 00:14:02.166 A:middle
这样就很容易看到

00:14:02.166 --> 00:14:03.736 A:middle
有什么东西在我的 UI

00:14:03.736 --> 00:14:05.326 A:middle
重叠或者不匹配  因为

00:14:05.566 --> 00:14:06.706 A:middle
那些符号会消失

00:14:07.446 --> 00:14:08.556 A:middle
所以  在这个例子里

00:14:08.556 --> 00:14:10.006 A:middle
下面的按钮好像没有

00:14:10.006 --> 00:14:11.036 A:middle
英镑符号

00:14:11.036 --> 00:14:11.906 A:middle
这是我第一眼就

00:14:11.906 --> 00:14:12.226 A:middle
看到的

00:14:12.656 --> 00:14:13.846 A:middle
但是  如果你进一步查看

00:14:13.846 --> 00:14:15.646 A:middle
甚至“Play”里面的“y”也是重叠的

00:14:15.646 --> 00:14:17.436 A:middle
所以现在我回到

00:14:17.436 --> 00:14:19.746 A:middle
Storyboard 里检查为什么会这样

00:14:21.156 --> 00:14:22.606 A:middle
结果好像是我有一个固定的

00:14:22.606 --> 00:14:24.196 A:middle
宽度限制

00:14:24.196 --> 00:14:25.656 A:middle
但是在这个例子里面其实完全没有必要

00:14:25.656 --> 00:14:26.916 A:middle
而且一般来说

00:14:26.916 --> 00:14:29.936 A:middle
对于文本控制的固定宽度限制

00:14:29.936 --> 00:14:31.636 A:middle
在本地化时并不是一件好事

00:14:32.566 --> 00:14:34.546 A:middle
所以  如果我去掉它

00:14:34.616 --> 00:14:36.176 A:middle
你会看到我的伪语言

00:14:36.246 --> 00:14:37.856 A:middle
与预期的完全一样

00:14:37.856 --> 00:14:42.436 A:middle
并且现在我确定不会再有

00:14:43.256 --> 00:14:44.246 A:middle
任何重叠了

00:14:44.286 --> 00:14:45.556 A:middle
这些 Interface Builder

00:14:45.556 --> 00:14:47.186 A:middle
预览会更加有用

00:14:47.186 --> 00:14:48.406 A:middle
如果你能在 Storyboard 里

00:14:48.406 --> 00:14:49.756 A:middle
定义了更多的 UI 界面

00:14:50.466 --> 00:14:52.436 A:middle
就我而言  我的很多 UI

00:14:52.436 --> 00:14:53.616 A:middle
都是在我的表格视图控件里

00:14:53.616 --> 00:14:54.166 A:middle
载入的

00:14:54.776 --> 00:14:56.276 A:middle
所以  我还想演示一下

00:14:56.276 --> 00:14:57.736 A:middle
如何在运行时下使用伪语言

00:14:57.736 --> 00:15:01.156 A:middle
测试载入情况

00:14:57.736 --> 00:15:01.156 A:middle
测试载入情况

00:15:01.386 --> 00:15:03.736 A:middle
如果我点击我的 Scheme

00:15:03.736 --> 00:15:06.166 A:middle
选择“Edit Scheme（编辑 Scheme）” 请确保

00:15:06.166 --> 00:15:07.446 A:middle
在边栏里有

00:15:07.446 --> 00:15:08.056 A:middle
运行选定的选项

00:15:08.846 --> 00:15:10.396 A:middle
在应用程序语言选项里

00:15:10.396 --> 00:15:11.686 A:middle
你看到一列可供选择的

00:15:11.686 --> 00:15:12.206 A:middle
语言清单

00:15:12.776 --> 00:15:14.126 A:middle
但是在最底下显示的是

00:15:14.126 --> 00:15:15.896 A:middle
你有一系列可用的伪语言

00:15:16.016 --> 00:15:17.216 A:middle
可以在运行时下

00:15:17.216 --> 00:15:18.616 A:middle
使用

00:15:19.676 --> 00:15:20.796 A:middle
另一种我们在 Xcode 9 里

00:15:20.796 --> 00:15:22.826 A:middle
添加的伪语言是

00:15:22.826 --> 00:15:23.826 A:middle
带重音符号的拉丁语伪语言

00:15:24.466 --> 00:15:25.886 A:middle
如果继续点击它

00:15:33.896 --> 00:15:36.926 A:middle
我的 App 会在

00:15:36.926 --> 00:15:38.556 A:middle
我的每个本地化字符串之上和之下

00:15:38.556 --> 00:15:39.646 A:middle
会带着重音符号启动

00:15:40.296 --> 00:15:41.806 A:middle
这样做的好处是

00:15:41.806 --> 00:15:44.426 A:middle
它可以让我预览

00:15:44.426 --> 00:15:45.866 A:middle
我的 App 会如何处理那些

00:15:45.866 --> 00:15:47.276 A:middle
带有很多重音符号

00:15:47.666 --> 00:15:49.906 A:middle
变音符号  甚至是那些

00:15:49.906 --> 00:15:51.536 A:middle
本身的字体通常要

00:15:51.576 --> 00:15:53.266 A:middle
比英文更长的语言

00:15:53.376 --> 00:15:54.396 A:middle
比如泰语

00:15:55.096 --> 00:15:56.786 A:middle
这样我可以迅速浏览全局

00:15:56.786 --> 00:15:58.286 A:middle
并确保所有的都

00:15:58.326 --> 00:16:00.056 A:middle
垂直显示整齐  并且

00:15:58.326 --> 00:16:00.056 A:middle
垂直显示整齐  并且

00:16:00.056 --> 00:16:03.366 A:middle
看不到任何重叠

00:16:03.366 --> 00:16:05.316 A:middle
现在所有显示的都看着不错

00:16:05.386 --> 00:16:08.346 A:middle
最后  还有一种伪语言

00:16:08.456 --> 00:16:10.396 A:middle
我想在运行状态下演示给大家看

00:16:10.396 --> 00:16:13.286 A:middle
就是这个新的

00:16:13.286 --> 00:16:14.576 A:middle
从右往左的伪语言配合以

00:16:14.576 --> 00:16:15.476 A:middle
从右往左的字符串

00:16:16.876 --> 00:16:18.416 A:middle
这种伪语言非常有用

00:16:18.416 --> 00:16:19.726 A:middle
尤其是测试你的 App

00:16:19.726 --> 00:16:21.866 A:middle
是否适用于从右往左的语言

00:16:21.866 --> 00:16:23.166 A:middle
比如阿拉伯语和

00:16:23.166 --> 00:16:25.086 A:middle
希伯来语  他们的文字本身就是

00:16:25.086 --> 00:16:26.076 A:middle
从右往左书写的

00:16:26.656 --> 00:16:28.096 A:middle
如你所见  我的 UI

00:16:28.096 --> 00:16:29.866 A:middle
控件已经调整

00:16:29.866 --> 00:16:32.406 A:middle
并映射成

00:16:32.406 --> 00:16:34.366 A:middle
在从右往左的本地化中

00:16:34.366 --> 00:16:35.326 A:middle
应该呈现的样子

00:16:35.996 --> 00:16:37.606 A:middle
另外我们还把

00:16:37.606 --> 00:16:39.406 A:middle
本地化字符串从右往左地

00:16:39.406 --> 00:16:40.176 A:middle
显示出来

00:16:40.176 --> 00:16:41.946 A:middle
这样  字母本身就会

00:16:41.946 --> 00:16:42.626 A:middle
倒过来

00:16:42.626 --> 00:16:45.596 A:middle
这种方式能够

00:16:45.596 --> 00:16:46.736 A:middle
让你

00:16:46.736 --> 00:16:48.396 A:middle
感同身受那些

00:16:48.466 --> 00:16:50.526 A:middle
有从右往左的阅读习惯的人们

00:16:51.056 --> 00:16:52.546 A:middle
这些就是

00:16:52.546 --> 00:16:53.996 A:middle
伪语言部分的内容

00:16:54.516 --> 00:16:55.886 A:middle
强烈建议大家可以都

00:16:55.886 --> 00:16:56.336 A:middle
尝试一下

00:16:56.506 --> 00:16:57.946 A:middle
甚至在你进行本地化之前

00:16:57.946 --> 00:16:59.576 A:middle
他们就对测试 App

00:16:59.776 --> 00:17:00.566 A:middle
非常有用

00:16:59.776 --> 00:17:00.566 A:middle
非常有用

00:17:03.456 --> 00:17:04.445 A:middle
接着我们来总结一下

00:17:04.445 --> 00:17:06.006 A:middle
国际化流程

00:17:06.866 --> 00:17:08.596 A:middle
首先  确保你在用

00:17:08.596 --> 00:17:10.076 A:middle
标准 API 载入

00:17:10.076 --> 00:17:11.915 A:middle
本地化字符串以及

00:17:11.955 --> 00:17:13.726 A:middle
排版日期和数字等

00:17:13.726 --> 00:17:14.185 A:middle
数据

00:17:14.836 --> 00:17:18.435 A:middle
另外要确保你的 App 使用的是

00:17:18.435 --> 00:17:20.106 A:middle
Base Internationalization

00:17:20.106 --> 00:17:21.866 A:middle
从你的本地化内容中

00:17:21.866 --> 00:17:23.126 A:middle
区分 UI

00:17:23.516 --> 00:17:25.136 A:middle
当然  在 UI 中使用 Auto Layout

00:17:25.136 --> 00:17:26.526 A:middle
来确保

00:17:26.526 --> 00:17:28.846 A:middle
App 本身的灵活性并且

00:17:28.876 --> 00:17:31.156 A:middle
可以适应不同的翻译

00:17:32.496 --> 00:17:34.176 A:middle
最后  我们给大家展示了许多

00:17:34.256 --> 00:17:35.706 A:middle
可以启用国际化的

00:17:35.706 --> 00:17:38.016 A:middle
工具  比如我们刚刚谈到的

00:17:38.016 --> 00:17:39.186 A:middle
全新伪语言

00:17:39.186 --> 00:17:41.176 A:middle
以及未来

00:17:41.176 --> 00:17:42.756 A:middle
马上会推出的

00:17:42.756 --> 00:17:43.536 A:middle
Auto Layout 警告

00:17:44.556 --> 00:17:46.746 A:middle
所以  我的 App 现在是

00:17:46.746 --> 00:17:48.386 A:middle
国际化了的 我已经准备好了开始

00:17:48.386 --> 00:17:49.426 A:middle
我的初次本地化

00:17:49.426 --> 00:17:51.286 A:middle
现在有请 Sara 回到

00:17:51.286 --> 00:17:53.036 A:middle
舞台上  给我们展示如何实现

00:17:53.036 --> 00:17:54.286 A:middle
这一点  毕竟她是这个主题的

00:17:54.286 --> 00:17:54.786 A:middle
专家

00:17:55.516 --> 00:18:01.536 A:middle
[掌声]

00:17:55.516 --> 00:18:01.536 A:middle
[掌声]

00:18:02.036 --> 00:18:02.576 A:middle
&gt;&gt;  谢谢 Aya

00:18:03.296 --> 00:18:04.686 A:middle
那么现在大家听完了

00:18:04.686 --> 00:18:05.956 A:middle
Aya 在她的例子里

00:18:05.956 --> 00:18:07.446 A:middle
演示的步骤  你应该已经

00:18:07.446 --> 00:18:08.796 A:middle
学会添加新的语言

00:18:08.826 --> 00:18:09.956 A:middle
到你的 App 了

00:18:09.956 --> 00:18:11.466 A:middle
你可以直接从 Xcode

00:18:11.526 --> 00:18:13.276 A:middle
或者从你的工程信息里做到这一点

00:18:13.346 --> 00:18:15.386 A:middle
并且你有 100 多种语言

00:18:15.386 --> 00:18:16.096 A:middle
可以选择

00:18:17.066 --> 00:18:18.306 A:middle
现在你在 App 里

00:18:18.306 --> 00:18:19.616 A:middle
添加了这些

00:18:19.616 --> 00:18:21.376 A:middle
你想支持的语言  为了帮助

00:18:21.376 --> 00:18:23.196 A:middle
你的翻译人员

00:18:23.246 --> 00:18:25.506 A:middle
生成本地化的内容

00:18:25.506 --> 00:18:27.196 A:middle
Xcode 会发现你的工程里的

00:18:27.196 --> 00:18:28.866 A:middle
所有本地化

00:18:28.956 --> 00:18:29.456 A:middle
资源

00:18:29.906 --> 00:18:31.026 A:middle
然后当你为本地化

00:18:31.026 --> 00:18:33.296 A:middle
导出工程时 Xcode

00:18:33.296 --> 00:18:35.076 A:middle
会从这些本地化资源当中

00:18:35.076 --> 00:18:37.086 A:middle
抽取字符串并且

00:18:37.086 --> 00:18:39.336 A:middle
为你添加的

00:18:39.336 --> 00:18:40.496 A:middle
每种语言

00:18:40.496 --> 00:18:40.886 A:middle
生成 XLIFF 文档

00:18:40.886 --> 00:18:43.176 A:middle
XLIFF 文档其实是一种

00:18:43.176 --> 00:18:45.546 A:middle
在本地化行业里的

00:18:45.546 --> 00:18:47.126 A:middle
标准的 XML 本地化文档

00:18:47.126 --> 00:18:48.366 A:middle
格式

00:18:48.826 --> 00:18:50.616 A:middle
所以  如果你发送 XLIFF 文档

00:18:50.616 --> 00:18:52.196 A:middle
给本地化的从业者  他们应该

00:18:52.196 --> 00:18:53.516 A:middle
对这种格式

00:18:53.516 --> 00:18:54.956 A:middle
非常熟悉  并且知道

00:18:54.956 --> 00:18:55.116 A:middle
该如何使用

00:18:56.276 --> 00:18:57.586 A:middle
所以  一旦你的 XLIFF 文档

00:18:57.586 --> 00:18:59.546 A:middle
完成翻译  你可以将他们

00:18:59.546 --> 00:19:02.696 A:middle
导入回去  这样 Xcode 就可以

00:18:59.546 --> 00:19:02.696 A:middle
导入回去  这样 Xcode 就可以

00:19:02.696 --> 00:19:04.716 A:middle
自动把你的本地化文本

00:19:04.716 --> 00:19:06.646 A:middle
整合到工程中

00:19:07.046 --> 00:19:08.436 A:middle
这就是 Xcode 里的

00:19:08.436 --> 00:19:10.206 A:middle
本地化流程  非常

00:19:10.276 --> 00:19:11.736 A:middle
简单明确

00:19:13.226 --> 00:19:14.936 A:middle
在 Xcode 9 里  我们为

00:19:14.936 --> 00:19:17.496 A:middle
导入和导出

00:19:17.496 --> 00:19:19.836 A:middle
STRINGSDICT 文档格式

00:19:20.006 --> 00:19:20.506 A:middle
添加了许多支持

00:19:21.516 --> 00:19:23.116 A:middle
STRINGSDICT 是一种强大的

00:19:23.116 --> 00:19:24.796 A:middle
工具  可以帮你处理

00:19:24.986 --> 00:19:26.996 A:middle
App 内的

00:19:26.996 --> 00:19:27.556 A:middle
双数和自适应字符串

00:19:29.116 --> 00:19:31.646 A:middle
在 Xcode 9 中  你现在可以

00:19:31.646 --> 00:19:33.116 A:middle
从 Xcode 的文档翻译清单里

00:19:33.246 --> 00:19:34.836 A:middle
添加并创建

00:19:34.836 --> 00:19:36.846 A:middle
字符串字典  这样会

00:19:36.846 --> 00:19:38.746 A:middle
生成一个整数  这样

00:19:38.746 --> 00:19:40.796 A:middle
你就可以添加和编辑你的

00:19:40.796 --> 00:19:41.966 A:middle
键和值

00:19:42.596 --> 00:19:45.016 A:middle
现在我们来进一步地

00:19:45.016 --> 00:19:46.586 A:middle
谈一谈你可以用

00:19:46.636 --> 00:19:48.006 A:middle
字符串字典做什么以及

00:19:48.006 --> 00:19:48.986 A:middle
他们为什么有用

00:19:49.936 --> 00:19:51.506 A:middle
第一 字符串字典

00:19:51.506 --> 00:19:53.366 A:middle
可以帮你不在 App 里

00:19:53.366 --> 00:19:54.966 A:middle
编写任何代码的情况下

00:19:54.966 --> 00:19:56.936 A:middle
处理复杂的

00:19:57.556 --> 00:19:57.626 A:middle
双数形式

00:19:58.196 --> 00:20:00.236 A:middle
那么  假设我可以用

00:19:58.196 --> 00:20:00.236 A:middle
那么  假设我可以用

00:20:00.236 --> 00:20:02.596 A:middle
这种代码逻辑处理

00:20:02.596 --> 00:20:02.976 A:middle
真假变量的问题

00:20:03.556 --> 00:20:05.806 A:middle
这是一组数组  如果我的数组

00:20:05.806 --> 00:20:08.236 A:middle
长度为 1  我设置

00:20:08.236 --> 00:20:11.196 A:middle
字符串的内容为“1 popular language”

00:20:11.666 --> 00:20:13.426 A:middle
或者假设我的数组长度

00:20:13.426 --> 00:20:15.416 A:middle
大于 1 我设置字符串

00:20:15.416 --> 00:20:17.006 A:middle
为  比如说“%d popular languages”

00:20:17.006 --> 00:20:19.456 A:middle
这里“%d”是一个

00:20:19.456 --> 00:20:20.806 A:middle
引用格式化字符串

00:20:20.806 --> 00:20:22.136 A:middle
将在运行时被我的数组长度

00:20:22.176 --> 00:20:23.116 A:middle
替换掉

00:20:23.906 --> 00:20:26.166 A:middle
这个逻辑也许能行得通

00:20:26.166 --> 00:20:27.916 A:middle
起码对类似于英语这样的语言

00:20:27.916 --> 00:20:29.256 A:middle
行得通  因为英语只有

00:20:29.386 --> 00:20:31.096 A:middle
两种双数形式

00:20:31.096 --> 00:20:32.296 A:middle
一个单数  一个双数

00:20:33.386 --> 00:20:34.626 A:middle
但是这对于

00:20:34.626 --> 00:20:36.436 A:middle
类似于俄文这种语言来说完全行不通

00:20:36.626 --> 00:20:38.046 A:middle
因为它有多种

00:20:38.046 --> 00:20:39.126 A:middle
双数变体

00:20:39.546 --> 00:20:41.056 A:middle
俄文有四种不同的

00:20:41.056 --> 00:20:42.616 A:middle
双数变体  你的

00:20:42.756 --> 00:20:44.216 A:middle
翻译们需要考虑相应的

00:20:44.456 --> 00:20:46.036 A:middle
变通方法  比如说

00:20:46.036 --> 00:20:47.536 A:middle
如何用你所提供的

00:20:47.536 --> 00:20:49.506 A:middle
通用双数翻译所有的变体

00:20:49.746 --> 00:20:50.886 A:middle
就是你在刚刚英语的那个例子里

00:20:50.886 --> 00:20:52.906 A:middle
使用的  但通常的结果是

00:20:53.976 --> 00:20:56.226 A:middle
你的翻译

00:20:56.226 --> 00:20:57.626 A:middle
会非常机械化而且

00:20:57.626 --> 00:20:59.256 A:middle
对于母语者来说很不自然

00:20:59.516 --> 00:21:02.646 A:middle
这个例子听起来很像是

00:20:59.516 --> 00:21:02.646 A:middle
这个例子听起来很像是

00:21:02.716 --> 00:21:05.176 A:middle
“popular column 1”

00:21:05.176 --> 00:21:06.946 A:middle
“popular languages column 2”

00:21:06.946 --> 00:21:09.156 A:middle
你是不会希望在 App 里出现这些的

00:21:09.306 --> 00:21:10.816 A:middle
为了不用任何代码就

00:21:12.246 --> 00:21:13.816 A:middle
解决这个问题

00:21:13.896 --> 00:21:15.686 A:middle
你可以直接使用字符串

00:21:15.686 --> 00:21:16.306 A:middle
字典

00:21:17.246 --> 00:21:18.786 A:middle
所以  你须要在

00:21:18.786 --> 00:21:20.926 A:middle
STRINGSDICT 文档里做的是

00:21:20.926 --> 00:21:23.456 A:middle
添加你的本地化格式 Key

00:21:24.296 --> 00:21:25.876 A:middle
在这个例子当中  我的本地化

00:21:25.876 --> 00:21:27.446 A:middle
格式 Key 是语言

00:21:27.986 --> 00:21:30.566 A:middle
然后  你须要添加

00:21:30.566 --> 00:21:32.256 A:middle
与你的开发语言相关的

00:21:32.256 --> 00:21:34.596 A:middle
双数变体

00:21:34.756 --> 00:21:36.176 A:middle
在这个例子里面  由于我的开发语言是

00:21:36.176 --> 00:21:37.936 A:middle
英语  我只用关心

00:21:37.936 --> 00:21:39.726 A:middle
两种双数变体

00:21:39.726 --> 00:21:40.246 A:middle
非此即彼

00:21:40.246 --> 00:21:41.576 A:middle
其中一种是为单数服务

00:21:41.576 --> 00:21:43.306 A:middle
另一种是为

00:21:43.366 --> 00:21:44.046 A:middle
双数服务

00:21:45.526 --> 00:21:47.596 A:middle
接着就是用 NSLocalizedString

00:21:47.706 --> 00:21:49.436 A:middle
打包你的双数字符串

00:21:49.826 --> 00:21:51.876 A:middle
就像你处理其他

00:21:52.416 --> 00:21:53.386 A:middle
代码中的字符串

00:21:53.446 --> 00:21:53.766 A:middle
一样

00:21:54.366 --> 00:21:55.846 A:middle
当你为本地化

00:21:55.846 --> 00:21:57.256 A:middle
导出你的工程时 Xcode 会

00:21:57.256 --> 00:21:59.426 A:middle
自动生成

00:21:59.776 --> 00:22:01.046 A:middle
你所支持的其他语言的

00:21:59.776 --> 00:22:01.046 A:middle
你所支持的其他语言的

00:22:01.046 --> 00:22:02.306 A:middle
双数 Key

00:22:02.816 --> 00:22:05.576 A:middle
所以  其他语言的变体

00:22:05.576 --> 00:22:07.126 A:middle
会包含在

00:22:07.126 --> 00:22:08.826 A:middle
你导出的文档里

00:22:08.926 --> 00:22:09.866 A:middle
而你的翻译人员

00:22:10.016 --> 00:22:11.496 A:middle
在翻译字符串时

00:22:11.496 --> 00:22:13.236 A:middle
就会发现

00:22:13.236 --> 00:22:14.536 A:middle
跟这种语言相关的

00:22:14.536 --> 00:22:15.086 A:middle
双数变体

00:22:15.596 --> 00:22:17.066 A:middle
现在你的翻译结果

00:22:17.066 --> 00:22:18.516 A:middle
才算正确  你的用户们才会有

00:22:18.516 --> 00:22:20.296 A:middle
语法更加精准的

00:22:20.296 --> 00:22:21.016 A:middle
翻译

00:22:21.756 --> 00:22:23.436 A:middle
那么  这些就是 Xcode 9 里面

00:22:23.436 --> 00:22:26.426 A:middle
STRINGDICT 支持双数变体的内容

00:22:27.106 --> 00:22:28.776 A:middle
另外一件你可以在 Xcode 9 里

00:22:28.776 --> 00:22:30.666 A:middle
用字符串词典做的是

00:22:30.666 --> 00:22:32.536 A:middle
支持自适应字符串

00:22:33.456 --> 00:22:36.256 A:middle
如果我们看一下早先 Aya 的 App

00:22:36.566 --> 00:22:39.316 A:middle
的那个例子  这里有一个

00:22:39.316 --> 00:22:41.166 A:middle
字符串叫做

00:22:41.236 --> 00:22:42.696 A:middle
“Gross Domestic Product (in billion)”

00:22:42.696 --> 00:22:43.646 A:middle
略微有点长

00:22:43.816 --> 00:22:45.176 A:middle
但是在 iPad 上显示的没有问题

00:22:45.176 --> 00:22:46.476 A:middle
因为有足够的

00:22:46.536 --> 00:22:46.816 A:middle
空间

00:22:47.636 --> 00:22:49.366 A:middle
如果我们再次运行这个 App

00:22:49.366 --> 00:22:51.116 A:middle
在一个更小的设备上 比如 iPhone 7

00:22:51.166 --> 00:22:53.716 A:middle
这时字符串就

00:22:53.716 --> 00:22:54.206 A:middle
放不下了

00:22:54.306 --> 00:22:55.616 A:middle
如屏幕所示

00:22:55.616 --> 00:22:56.936 A:middle
现在右边的数字

00:22:56.986 --> 00:22:58.566 A:middle
缩短了  你只能看到

00:22:58.566 --> 00:22:59.606 A:middle
前三个字符

00:22:59.606 --> 00:23:00.766 A:middle
这个是不对的  因为

00:22:59.606 --> 00:23:00.766 A:middle
这个是不对的  因为

00:23:00.766 --> 00:23:01.486 A:middle
我们给用户的信息是

00:23:01.486 --> 00:23:02.626 A:middle
有误的

00:23:03.706 --> 00:23:05.736 A:middle
所以  你可以再次利用

00:23:06.186 --> 00:23:07.866 A:middle
字符串字典来

00:23:07.866 --> 00:23:09.656 A:middle
解决这个问题并且

00:23:09.686 --> 00:23:10.996 A:middle
给你的 App 提供不同的

00:23:10.996 --> 00:23:12.486 A:middle
字符串变体

00:23:13.166 --> 00:23:14.506 A:middle
我这里有三个不同的

00:23:14.506 --> 00:23:17.536 A:middle
Key 20 25 和 50

00:23:17.536 --> 00:23:18.966 A:middle
分别对应不同的屏幕

00:23:18.966 --> 00:23:19.336 A:middle
尺寸

00:23:19.336 --> 00:23:21.586 A:middle
然后我想要一些字符串

00:23:21.586 --> 00:23:23.246 A:middle
需要在每一块屏幕上

00:23:23.246 --> 00:23:23.606 A:middle
显示完整

00:23:24.346 --> 00:23:25.476 A:middle
所以  如果你在 STRINGSDICT 文档里的键

00:23:25.546 --> 00:23:28.326 A:middle
调用 NSLocalizedString

00:23:28.326 --> 00:23:30.496 A:middle
这样

00:23:30.496 --> 00:23:31.706 A:middle
你就可以做到了  因为

00:23:31.706 --> 00:23:34.096 A:middle
我们在运行时下

00:23:34.196 --> 00:23:36.266 A:middle
选择了基于屏幕可用空间的

00:23:36.266 --> 00:23:36.826 A:middle
正确的值

00:23:37.856 --> 00:23:39.596 A:middle
如果你没有使用 UILabel

00:23:39.596 --> 00:23:40.606 A:middle
而用的是你自己的

00:23:40.606 --> 00:23:42.626 A:middle
自定义控件 也还是可以

00:23:42.626 --> 00:23:44.266 A:middle
通过调用

00:23:44.266 --> 00:23:46.096 A:middle
variantFittingPresentationWidth API

00:23:46.236 --> 00:23:48.086 A:middle
来利用这个功能

00:23:48.086 --> 00:23:50.566 A:middle
这里你删除

00:23:50.566 --> 00:23:51.926 A:middle
在 STRINGSDICT 文档里

00:23:51.926 --> 00:23:54.116 A:middle
确定的一个 Key  接着

00:23:54.116 --> 00:23:55.466 A:middle
它会为你在运行状态下

00:23:55.526 --> 00:23:56.856 A:middle
选择与 Key 对应的

00:23:56.856 --> 00:23:57.876 A:middle
正确的值

00:23:58.646 --> 00:24:00.696 A:middle
并且我们也会提供

00:23:58.646 --> 00:24:00.696 A:middle
并且我们也会提供

00:24:00.696 --> 00:24:02.216 A:middle
这些 Key 以及对应

00:24:02.216 --> 00:24:03.266 A:middle
屏幕的尺寸

00:24:03.266 --> 00:24:04.756 A:middle
的文档以供

00:24:04.756 --> 00:24:05.746 A:middle
你们查询

00:24:07.046 --> 00:24:09.156 A:middle
那么  现在如果我们用 iPad 再次

00:24:09.346 --> 00:24:10.786 A:middle
运行  它还是使用的

00:24:10.786 --> 00:24:13.376 A:middle
全字符串  如果我们在

00:24:13.376 --> 00:24:14.826 A:middle
小一点的设备上运行

00:24:14.996 --> 00:24:17.056 A:middle
比如 iPhone 7  现在我们选择的是

00:24:17.056 --> 00:24:18.546 A:middle
可以适应屏幕尺寸的

00:24:18.716 --> 00:24:20.476 A:middle
正确变体

00:24:20.716 --> 00:24:22.316 A:middle
而且实现这一点不需要编写

00:24:22.396 --> 00:24:23.456 A:middle
任何代码

00:24:23.536 --> 00:24:24.746 A:middle
你的 App

00:24:24.746 --> 00:24:26.616 A:middle
在所有不同尺寸的

00:24:26.656 --> 00:24:28.186 A:middle
屏幕和配置上

00:24:28.186 --> 00:24:29.316 A:middle
都让人赏心悦目

00:24:29.316 --> 00:24:30.776 A:middle
自适应字符串真的

00:24:30.776 --> 00:24:32.496 A:middle
非常有用  如果你可以在 App 里

00:24:32.496 --> 00:24:33.726 A:middle
支持本地化

00:24:33.856 --> 00:24:34.896 A:middle
因为很有可能  你会遇到一些

00:24:34.896 --> 00:24:36.466 A:middle
与常用语言相比  会显示的

00:24:36.466 --> 00:24:37.386 A:middle
更长或者更短的语言

00:24:37.606 --> 00:24:38.476 A:middle
并且你希望

00:24:38.476 --> 00:24:40.156 A:middle
为翻译们提供更多灵活性

00:24:40.476 --> 00:24:42.306 A:middle
这样才能为语言

00:24:42.306 --> 00:24:43.216 A:middle
提供自适应字符串

00:24:44.936 --> 00:24:46.266 A:middle
现在你已经完成了

00:24:46.266 --> 00:24:48.316 A:middle
支持双数的服务 以及

00:24:48.316 --> 00:24:50.156 A:middle
自适应字符串  你

00:24:50.156 --> 00:24:52.556 A:middle
已经准备好本地化你的 App了

00:24:52.556 --> 00:24:53.516 A:middle
首先  本地化的

00:24:53.516 --> 00:24:55.926 A:middle
第一步是导出你的

00:24:55.926 --> 00:24:56.596 A:middle
工程

00:24:57.006 --> 00:24:58.296 A:middle
当你为本地化

00:24:58.296 --> 00:25:00.246 A:middle
导出工程时 Xcode

00:24:58.296 --> 00:25:00.246 A:middle
导出工程时 Xcode

00:25:00.246 --> 00:25:01.726 A:middle
会问你首先想要本地化

00:25:01.966 --> 00:25:02.966 A:middle
哪种语言

00:25:03.006 --> 00:25:04.506 A:middle
一旦选定你想要本地化的

00:25:04.506 --> 00:25:06.386 A:middle
语言  Xcode 就会生成

00:25:06.526 --> 00:25:09.076 A:middle
XLIFF 文档并发送给

00:25:09.186 --> 00:25:09.806 A:middle
你的翻译人员

00:25:10.236 --> 00:25:11.526 A:middle
等你的 XLIFF 文档翻译

00:25:11.636 --> 00:25:14.026 A:middle
结束  你就可以导入

00:25:14.026 --> 00:25:16.196 A:middle
回你的工程当中  并且 Xcode

00:25:16.196 --> 00:25:17.646 A:middle
会生成一个清晰的

00:25:17.926 --> 00:25:19.796 A:middle
比较文本  并指出哪些已经被你的翻译们

00:25:19.926 --> 00:25:20.616 A:middle
更改过了

00:25:22.176 --> 00:25:24.046 A:middle
接着 Xcode 会

00:25:24.046 --> 00:25:25.416 A:middle
整合你的本地化文本

00:25:25.576 --> 00:25:27.136 A:middle
到你的工程中  然后你的字符串

00:25:27.136 --> 00:25:28.886 A:middle
就被本地化了

00:25:29.436 --> 00:25:31.616 A:middle
现在你的字符串

00:25:31.616 --> 00:25:33.126 A:middle
已经本地化了  但又该如何处理

00:25:33.126 --> 00:25:34.656 A:middle
其他你也想本地化的

00:25:34.656 --> 00:25:37.396 A:middle
且不以字符串为基础的资源呢

00:25:37.396 --> 00:25:39.166 A:middle
比如图片或者音频

00:25:39.166 --> 00:25:39.566 A:middle
文档

00:25:39.656 --> 00:25:41.846 A:middle
所以  你也许会有下面这种

00:25:41.846 --> 00:25:42.306 A:middle
文档

00:25:42.466 --> 00:25:44.476 A:middle
一个带文本的图片

00:25:44.786 --> 00:25:46.136 A:middle
并且你想为其他语言

00:25:46.136 --> 00:25:47.566 A:middle
提供一个可替换的

00:25:47.566 --> 00:25:48.186 A:middle
图片

00:25:48.616 --> 00:25:50.256 A:middle
你可以在 Xcode 中轻松本地化其他

00:25:50.536 --> 00:25:52.866 A:middle
资源  通过

00:25:52.866 --> 00:25:54.616 A:middle
点击文档检阅里面的

00:25:54.666 --> 00:25:55.786 A:middle
本地化按钮

00:25:56.336 --> 00:25:58.356 A:middle
与此同时  Xcode 也会跟您确认

00:25:58.356 --> 00:25:59.576 A:middle
你想把资料本地化成

00:25:59.576 --> 00:26:00.426 A:middle
哪种语言

00:25:59.576 --> 00:26:00.426 A:middle
哪种语言

00:26:00.426 --> 00:26:02.066 A:middle
你可以从语言清单中

00:26:02.146 --> 00:26:02.876 A:middle
挑选

00:26:03.446 --> 00:26:05.206 A:middle
然后 Xcode 会将这个资料

00:26:05.456 --> 00:26:07.316 A:middle
转移到特定的语言文档

00:26:07.796 --> 00:26:09.126 A:middle
在那里你可以用

00:26:09.236 --> 00:26:10.536 A:middle
图片或者你想要显示的语言的资料

00:26:10.536 --> 00:26:12.346 A:middle
替换掉刚刚的资料

00:26:13.166 --> 00:26:14.756 A:middle
那么  以上这些就是本地化在 Xcode 9 中的

00:26:14.756 --> 00:26:16.196 A:middle
工作流

00:26:16.646 --> 00:26:18.476 A:middle
我们看到了如何支持

00:26:18.626 --> 00:26:20.436 A:middle
双数  还有自适应

00:26:20.536 --> 00:26:21.736 A:middle
字符串以及如何本地化

00:26:21.736 --> 00:26:22.586 A:middle
添加的资源

00:26:23.006 --> 00:26:24.286 A:middle
现在我想邀请

00:26:24.326 --> 00:26:26.256 A:middle
Chris 上台给大家做一个

00:26:26.256 --> 00:26:26.666 A:middle
展示

00:26:27.116 --> 00:26:27.476 A:middle
谢谢

00:26:29.246 --> 00:26:29.786 A:middle
&gt;&gt;  谢谢 Sara

00:26:30.508 --> 00:26:32.508 A:middle
[掌声]

00:26:40.896 --> 00:26:44.256 A:middle
前面我们看到 Aya 确认

00:26:44.556 --> 00:26:45.466 A:middle
她的 App

00:26:45.466 --> 00:26:47.206 A:middle
国际化流程已完成  通过同时使用

00:26:47.206 --> 00:26:49.066 A:middle
框架和工具功能

00:26:49.276 --> 00:26:50.836 A:middle
那么  让我们开始真正的

00:26:50.886 --> 00:26:52.856 A:middle
本地化吧

00:26:52.966 --> 00:26:54.036 A:middle
首先  我非常

00:26:54.036 --> 00:26:55.586 A:middle
欣赏 Sara 说的

00:26:55.726 --> 00:26:56.956 A:middle
有关双数和自适应宽度字符串的

00:26:56.956 --> 00:26:57.476 A:middle
讨论

00:26:58.206 --> 00:26:59.866 A:middle
所以  我也为我们的工程

00:26:59.866 --> 00:27:00.956 A:middle
添加了一个 STRINGSDICT 文档

00:26:59.866 --> 00:27:00.956 A:middle
添加了一个 STRINGSDICT 文档

00:27:13.136 --> 00:27:15.996 A:middle
我添加了 GDP 的自适应

00:27:16.036 --> 00:27:19.116 A:middle
宽度字符串配合以

00:27:19.116 --> 00:27:20.656 A:middle
不同尺寸的设备的

00:27:20.656 --> 00:27:23.246 A:middle
所有不同变体 20 25

00:27:23.506 --> 00:27:24.126 A:middle
和 50

00:27:25.196 --> 00:27:26.996 A:middle
同时  就像 Sara 刚刚展示的那样

00:27:26.996 --> 00:27:28.636 A:middle
我也针对一些常见的语言

00:27:29.886 --> 00:27:31.296 A:middle
创建了一个

00:27:31.296 --> 00:27:32.066 A:middle
双数变体

00:27:32.646 --> 00:27:35.836 A:middle
好的  现在我准备

00:27:35.836 --> 00:27:37.786 A:middle
将我的应用程序本地化成

00:27:37.786 --> 00:27:38.196 A:middle
俄文

00:27:39.156 --> 00:27:40.526 A:middle
我要做的是

00:27:40.526 --> 00:27:42.996 A:middle
进入工程编辑

00:27:42.996 --> 00:27:44.856 A:middle
在我的本地化菜单下面

00:27:44.856 --> 00:27:46.016 A:middle
显示我的开发语言是英文

00:27:46.016 --> 00:27:47.546 A:middle
我看到

00:27:47.546 --> 00:27:48.346 A:middle
一个加号按钮

00:27:48.646 --> 00:27:50.226 A:middle
我可以选定它  然后

00:27:50.226 --> 00:27:51.996 A:middle
再往下拉到一半  选择

00:27:52.036 --> 00:27:52.436 A:middle
俄文

00:27:53.126 --> 00:27:54.986 A:middle
接着 Xcode 就会提醒我

00:27:54.986 --> 00:27:57.116 A:middle
我想用俄文占位符

00:27:57.116 --> 00:27:58.916 A:middle
替代哪些资源

00:28:00.366 --> 00:28:01.536 A:middle
因为我想本地化

00:28:01.536 --> 00:28:03.066 A:middle
所有资源  所以

00:28:03.066 --> 00:28:04.076 A:middle
直接命令 Xcode 完成

00:28:04.586 --> 00:28:08.546 A:middle
然后你就会看到除了

00:28:08.546 --> 00:28:10.586 A:middle
我的主要 Storyboard 文档

00:28:10.586 --> 00:28:12.746 A:middle
现在我还有一个俄文字符串

00:28:12.746 --> 00:28:13.786 A:middle
占位符

00:28:15.046 --> 00:28:17.796 A:middle
它仍在工程编辑器里

00:28:17.796 --> 00:28:19.026 A:middle
现在我要进入编辑

00:28:19.026 --> 00:28:20.676 A:middle
菜单  然后为本地化导出我的

00:28:20.676 --> 00:28:22.086 A:middle
工程

00:28:22.626 --> 00:28:26.856 A:middle
接着就是保存这个

00:28:26.856 --> 00:28:29.376 A:middle
文档  其实是保存这个文件夹到

00:28:29.376 --> 00:28:29.986 A:middle
桌面

00:28:31.206 --> 00:28:32.876 A:middle
然后 Xcode 会读取

00:28:32.876 --> 00:28:34.396 A:middle
所有的源代码

00:28:34.396 --> 00:28:35.316 A:middle
所有的资源

00:28:35.586 --> 00:28:37.346 A:middle
然后生成

00:28:37.416 --> 00:28:38.266 A:middle
XLIFF 文档

00:28:38.846 --> 00:28:40.166 A:middle
那么  我们来看看它到底是

00:28:40.166 --> 00:28:40.796 A:middle
什么样的

00:28:44.336 --> 00:28:45.906 A:middle
这里文档显示的

00:28:45.906 --> 00:28:49.386 A:middle
名称是 RU.XLIFF  其中 RU

00:28:49.386 --> 00:28:51.026 A:middle
是俄文的

00:28:51.026 --> 00:28:51.846 A:middle
国际标准化组织语言代码

00:28:52.256 --> 00:28:54.296 A:middle
如果我双击这个图标

00:28:54.296 --> 00:28:55.286 A:middle
会看到一个我们编写的

00:28:55.286 --> 00:28:57.446 A:middle
小工具  这样我们可以

00:28:57.446 --> 00:28:59.076 A:middle
以表格形式看到所有的

00:28:59.076 --> 00:29:00.456 A:middle
本地化数据

00:28:59.076 --> 00:29:00.456 A:middle
本地化数据

00:29:00.456 --> 00:29:01.456 A:middle
就不用费力地

00:29:01.456 --> 00:29:02.626 A:middle
筛选 XML 小括号

00:29:02.626 --> 00:29:04.376 A:middle
来给你们看了

00:29:04.896 --> 00:29:09.696 A:middle
在最上方  你可以看到

00:29:09.696 --> 00:29:11.446 A:middle
许多字符串从 Storyboard 文档里

00:29:11.446 --> 00:29:12.786 A:middle
直接显示

00:29:12.786 --> 00:29:13.156 A:middle
出来

00:29:14.606 --> 00:29:15.876 A:middle
你看到在

00:29:15.876 --> 00:29:17.296 A:middle
翻译栏里面  所有显示的都是

00:29:17.296 --> 00:29:18.326 A:middle
红色的  这是因为我们还没有

00:29:18.326 --> 00:29:20.396 A:middle
在这个 XLIFF 文档里

00:29:20.396 --> 00:29:22.656 A:middle
放任何翻译

00:29:23.906 --> 00:29:25.386 A:middle
接下来的部分

00:29:25.386 --> 00:29:28.856 A:middle
我们有一些元素会进入到

00:29:28.856 --> 00:29:32.866 A:middle
localizable.stringsdict

00:29:32.866 --> 00:29:33.236 A:middle
文档

00:29:34.166 --> 00:29:35.626 A:middle
如你所见

00:29:35.626 --> 00:29:39.006 A:middle
“%d popular languages”的字符串变量

00:29:39.006 --> 00:29:42.286 A:middle
比我们一开始在

00:29:42.286 --> 00:29:43.056 A:middle
localizable.stringsdict

00:29:43.136 --> 00:29:44.596 A:middle
里的多

00:29:44.866 --> 00:29:46.476 A:middle
这是因为 Xcode 可以识别

00:29:46.476 --> 00:29:48.246 A:middle
我们想要以俄文导出

00:29:48.246 --> 00:29:49.806 A:middle
并且自动为

00:29:49.806 --> 00:29:51.266 A:middle
所有俄文变体创建了

00:29:51.266 --> 00:29:51.996 A:middle
占位符

00:29:53.556 --> 00:29:55.426 A:middle
自适应宽度字符串变量

00:29:55.426 --> 00:29:57.756 A:middle
也可以适用于

00:29:57.756 --> 00:29:58.566 A:middle
国内生产总值

00:29:59.586 --> 00:30:00.636 A:middle
另外  对于其他事情

00:29:59.586 --> 00:30:00.636 A:middle
另外  对于其他事情

00:30:00.636 --> 00:30:03.266 A:middle
例如我们的应用程序

00:30:03.266 --> 00:30:04.416 A:middle
名称和 plist 同样适用

00:30:04.966 --> 00:30:07.326 A:middle
然后我们源代码里的

00:30:07.326 --> 00:30:09.496 A:middle
字符串就会在输入时

00:30:09.496 --> 00:30:11.736 A:middle
在俄文的本地化字符串文档里

00:30:11.906 --> 00:30:12.736 A:middle
显示出来

00:30:13.636 --> 00:30:14.586 A:middle
现在  假设我有一个

00:30:14.586 --> 00:30:16.056 A:middle
效率非常高的

00:30:16.056 --> 00:30:16.786 A:middle
翻译人员

00:30:17.656 --> 00:30:20.376 A:middle
并且我有一版

00:30:21.146 --> 00:30:23.006 A:middle
翻译好了的 XLIFF

00:30:23.916 --> 00:30:25.176 A:middle
我可以直接进入 Xcode 的工程

00:30:25.176 --> 00:30:27.656 A:middle
编辑器  选择

00:30:27.876 --> 00:30:31.496 A:middle
导入本地化  然后选定

00:30:31.496 --> 00:30:32.416 A:middle
该文档

00:30:33.046 --> 00:30:36.026 A:middle
接着 Xcode 会读取你的

00:30:36.026 --> 00:30:38.506 A:middle
工程  并读取那个文档  然后

00:30:38.506 --> 00:30:40.616 A:middle
显示出那个文档

00:30:40.616 --> 00:30:41.866 A:middle
导入的内容和你的工程

00:30:41.866 --> 00:30:42.366 A:middle
有何不同

00:30:42.696 --> 00:30:43.826 A:middle
这里  我得到一个警告说

00:30:43.826 --> 00:30:45.836 A:middle
我尚未完成用英语本地化

00:30:46.586 --> 00:30:48.636 A:middle
我的 App 名称

00:30:48.636 --> 00:30:50.076 A:middle
但是现在我有一个

00:30:50.076 --> 00:30:51.576 A:middle
俄文的本地化版本

00:30:52.706 --> 00:30:55.026 A:middle
并且我可以在文档视图模式里

00:30:55.026 --> 00:30:57.526 A:middle
看到  这次导入究竟会影响

00:30:57.526 --> 00:30:59.396 A:middle
什么文档

00:30:59.726 --> 00:31:03.036 A:middle
这与我希望得到的效果一样

00:30:59.726 --> 00:31:03.036 A:middle
这与我希望得到的效果一样

00:31:03.436 --> 00:31:04.966 A:middle
现在  我命令 Xcode 导入这个文档

00:31:04.966 --> 00:31:07.076 A:middle
它就会为我编写出这些新的

00:31:07.076 --> 00:31:08.336 A:middle
资源文档

00:31:08.336 --> 00:31:09.626 A:middle
尽管之前我们

00:31:09.626 --> 00:31:10.396 A:middle
没有

00:31:10.396 --> 00:31:12.616 A:middle
本地化字符串文档

00:31:12.896 --> 00:31:13.866 A:middle
但现在我们有了

00:31:14.286 --> 00:31:16.256 A:middle
如果我选定它  我们会得到一个

00:31:16.256 --> 00:31:18.346 A:middle
俄文文本的

00:31:18.346 --> 00:31:21.336 A:middle
本地化字符串文档

00:31:22.706 --> 00:31:24.506 A:middle
现在  如果运行我的应用程序

00:31:25.446 --> 00:31:26.746 A:middle
啊  好像出现了一个

00:31:26.746 --> 00:31:27.966 A:middle
程序错误  但没关系

00:31:32.236 --> 00:31:33.376 A:middle
我直接退出然后重启

00:31:33.406 --> 00:31:33.796 A:middle
Xcode

00:31:43.956 --> 00:31:45.506 A:middle
那么  如果我运行刚刚创建的

00:31:45.806 --> 00:31:47.346 A:middle
应用程序  Xcode 会

00:31:47.396 --> 00:31:49.176 A:middle
整合所有

00:31:49.226 --> 00:31:51.056 A:middle
我们刚刚导入的

00:31:51.056 --> 00:31:51.646 A:middle
本地化字符串

00:31:54.736 --> 00:31:56.746 A:middle
不过我刚刚漏掉了

00:31:56.746 --> 00:31:57.886 A:middle
一步  抱歉

00:31:58.546 --> 00:32:01.256 A:middle
我想用俄文运行

00:31:58.546 --> 00:32:01.256 A:middle
我想用俄文运行

00:32:01.256 --> 00:32:02.576 A:middle
我的应用程序  这样我就能看到

00:32:02.576 --> 00:32:03.346 A:middle
那些翻译了

00:32:03.346 --> 00:32:05.106 A:middle
接着我打开

00:32:05.106 --> 00:32:06.726 A:middle
Scheme 编辑器  然后我将

00:32:06.726 --> 00:32:07.886 A:middle
刚刚 Aya 使用的

00:32:07.886 --> 00:32:09.026 A:middle
从右往左的伪语言

00:32:09.026 --> 00:32:12.216 A:middle
替换成俄文

00:32:12.876 --> 00:32:14.136 A:middle
现在如果我运行我们的

00:32:14.136 --> 00:32:16.246 A:middle
应用程序  它会创建

00:32:16.246 --> 00:32:17.916 A:middle
Storyboard 复制到 Swift

00:32:17.916 --> 00:32:20.226 A:middle
基础库里面  然后启动

00:32:21.956 --> 00:32:23.246 A:middle
这样就能看到我们的应用程序在以俄文

00:32:23.246 --> 00:32:24.286 A:middle
运行了

00:32:24.666 --> 00:32:26.076 A:middle
而且不光是所有

00:32:26.076 --> 00:32:27.376 A:middle
格式处理器

00:32:27.376 --> 00:32:29.496 A:middle
日期和

00:32:29.496 --> 00:32:32.926 A:middle
数字都正确无误  并且还能看到

00:32:32.926 --> 00:32:35.226 A:middle
我们刚刚导入的

00:32:35.226 --> 00:32:35.976 A:middle
俄文文本

00:32:48.216 --> 00:32:51.466 A:middle
总结来说 STRINGSDICT

00:32:51.466 --> 00:32:53.176 A:middle
真的非常强大  你能

00:32:53.176 --> 00:32:55.366 A:middle
用它们来处理应用程序里的双数和

00:32:55.426 --> 00:32:57.276 A:middle
自适应宽度字符串

00:32:57.276 --> 00:32:59.016 A:middle
以确保它们不光会

00:32:59.016 --> 00:33:01.326 A:middle
根据用户的语言

00:32:59.016 --> 00:33:01.326 A:middle
根据用户的语言

00:33:01.326 --> 00:33:03.036 A:middle
还有设备大小

00:33:03.036 --> 00:33:04.306 A:middle
来调节

00:33:06.166 --> 00:33:08.216 A:middle
为了你的本地化流程

00:33:08.316 --> 00:33:10.456 A:middle
从你的 Xcode 应用程序中导出和生成

00:33:10.456 --> 00:33:13.176 A:middle
XLIFF 格式  以及

00:33:13.386 --> 00:33:14.826 A:middle
将翻译的字符串通过 XLIFF 导入回

00:33:14.826 --> 00:33:17.396 A:middle
应用程序的 Xcode 工程之中

00:33:17.396 --> 00:33:19.216 A:middle
是很容易的

00:33:20.876 --> 00:33:22.586 A:middle
Sara 也向我们展示了

00:33:22.586 --> 00:33:24.746 A:middle
如何在 Xcode 里本地化

00:33:24.746 --> 00:33:26.486 A:middle
非字符串资源

00:33:27.886 --> 00:33:30.716 A:middle
那么现在 Aya 将为大家展示

00:33:31.026 --> 00:33:32.446 A:middle
如何测试你的本地化

00:33:32.446 --> 00:33:33.866 A:middle
效果

00:33:34.516 --> 00:33:41.476 A:middle
[掌声]

00:33:41.976 --> 00:33:42.576 A:middle
&gt;&gt; 谢谢 Chris

00:33:42.576 --> 00:33:44.406 A:middle
我无法相信我的 App

00:33:44.406 --> 00:33:45.966 A:middle
已经成功本地化成

00:33:45.966 --> 00:33:46.356 A:middle
俄文了

00:33:46.716 --> 00:33:48.146 A:middle
而且这些步骤真的非常

00:33:48.146 --> 00:33:48.826 A:middle
简单

00:33:50.066 --> 00:33:51.556 A:middle
现在我已经完成了

00:33:51.556 --> 00:33:53.286 A:middle
本地化  我们来看看

00:33:53.286 --> 00:33:54.846 A:middle
可以用什么测试一下

00:33:54.846 --> 00:33:54.976 A:middle
它

00:33:56.436 --> 00:33:58.586 A:middle
在 Xcode 9 里 我们介绍了

00:33:58.586 --> 00:34:00.356 A:middle
可以指定运行测试的

00:33:58.586 --> 00:34:00.356 A:middle
可以指定运行测试的

00:34:00.356 --> 00:34:02.376 A:middle
应用程序的

00:34:02.526 --> 00:34:03.556 A:middle
语言和

00:34:03.556 --> 00:34:04.156 A:middle
地区

00:34:04.706 --> 00:34:06.096 A:middle
你可以在 Xcode 的测试 Scheme 编辑器里

00:34:06.166 --> 00:34:07.896 A:middle
实现这一点

00:34:08.356 --> 00:34:11.496 A:middle
今天  我想谈一谈

00:34:11.496 --> 00:34:13.146 A:middle
Xcode 里的 UI 测试

00:34:14.085 --> 00:34:16.065 A:middle
UI 测试是一种很好的方法

00:34:16.065 --> 00:34:17.496 A:middle
可以同时确认你的

00:34:17.496 --> 00:34:19.446 A:middle
应用程序的 UI

00:34:19.446 --> 00:34:20.166 A:middle
和其功能

00:34:21.335 --> 00:34:23.326 A:middle
我们来看看屏幕上的

00:34:23.326 --> 00:34:24.315 A:middle
这条代码

00:34:25.466 --> 00:34:26.666 A:middle
你要编写的就是

00:34:26.666 --> 00:34:28.886 A:middle
类似于敲击

00:34:28.886 --> 00:34:30.496 A:middle
一个带“Territory”的文本的

00:34:31.235 --> 00:34:31.306 A:middle
table.cell

00:34:32.166 --> 00:34:33.545 A:middle
但是这样在本地化里面

00:34:33.545 --> 00:34:35.346 A:middle
行不通  因为

00:34:35.456 --> 00:34:37.306 A:middle
那个文本会

00:34:37.306 --> 00:34:38.735 A:middle
在你运行测试的时候

00:34:38.735 --> 00:34:39.386 A:middle
被翻译成不同的语言

00:34:40.036 --> 00:34:41.476 A:middle
另外  如果你决定

00:34:41.476 --> 00:34:42.726 A:middle
在 App 里

00:34:42.726 --> 00:34:43.835 A:middle
甚至是你的开发语言中

00:34:43.835 --> 00:34:44.746 A:middle
改变这套写法

00:34:45.136 --> 00:34:46.126 A:middle
比如说我现在想称呼它为

00:34:46.126 --> 00:34:47.356 A:middle
“Region”而不是“Territory”

00:34:47.356 --> 00:34:49.275 A:middle
你不会想

00:34:49.275 --> 00:34:50.926 A:middle
又返回去并且更新

00:34:50.926 --> 00:34:52.406 A:middle
每一个你写的测试

00:34:52.525 --> 00:34:53.866 A:middle
只是为了让它

00:34:53.866 --> 00:34:54.565 A:middle
重新启动

00:34:57.136 --> 00:34:58.726 A:middle
使用辅助功能

00:34:58.726 --> 00:34:59.436 A:middle
标识符

00:35:00.766 --> 00:35:02.376 A:middle
这些标识符对于你的屏幕的每个元素来说

00:35:02.376 --> 00:35:03.836 A:middle
都是唯一的

00:35:04.286 --> 00:35:06.446 A:middle
你可以用标识符符来找到

00:35:06.446 --> 00:35:07.646 A:middle
这些元素  并且不用

00:35:07.646 --> 00:35:09.416 A:middle
具体知道什么字符串载入

00:35:10.086 --> 00:35:13.756 A:middle
他们

00:35:14.036 --> 00:35:15.526 A:middle
那么  如何设置辅助功能

00:35:15.526 --> 00:35:17.406 A:middle
标识符呢  你可以在创建的时候

00:35:17.406 --> 00:35:19.296 A:middle
就在 UI 控制里设置它的属性

00:35:19.296 --> 00:35:20.916 A:middle
或者在 NSControl 里

00:35:20.916 --> 00:35:21.286 A:middle
设置好

00:35:23.086 --> 00:35:24.726 A:middle
或者假设当你从 Storyboard 或者压缩文档里

00:35:24.726 --> 00:35:26.486 A:middle
载入你的 UI 时

00:35:26.606 --> 00:35:28.016 A:middle
你可以在 Interface Builder 里的

00:35:28.016 --> 00:35:29.306 A:middle
Identity Inspector

00:35:29.356 --> 00:35:29.626 A:middle
设置好

00:35:30.226 --> 00:35:33.726 A:middle
所以  现在你的测试

00:35:33.726 --> 00:35:35.016 A:middle
适于本地化

00:35:35.016 --> 00:35:36.566 A:middle
并且在所有你支持的语言

00:35:36.566 --> 00:35:37.756 A:middle
达成了满意的效果

00:35:38.776 --> 00:35:40.176 A:middle
这里会有更多

00:35:40.176 --> 00:35:42.066 A:middle
你可以利用的功能

00:35:42.906 --> 00:35:44.616 A:middle
今年  我们介绍了

00:35:44.616 --> 00:35:47.266 A:middle
XCTAttachment API 它可以让你

00:35:47.266 --> 00:35:49.366 A:middle
添加屏幕快照

00:35:49.366 --> 00:35:50.856 A:middle
以及其他的你在测试过程中

00:35:50.856 --> 00:35:53.406 A:middle
搜集的数据  并且最终它

00:35:53.586 --> 00:35:55.136 A:middle
会将这些数据添加在

00:35:55.136 --> 00:35:55.926 A:middle
你的测试报告中

00:35:56.766 --> 00:35:58.346 A:middle
这样你就可以

00:35:58.346 --> 00:36:00.276 A:middle
获得对于 UI 的全面掌控

00:35:58.346 --> 00:36:00.276 A:middle
获得对于 UI 的全面掌控

00:36:00.906 --> 00:36:02.886 A:middle
同样也适用于你的 App 里的所有弹窗

00:36:02.886 --> 00:36:04.236 A:middle
所有你支持的

00:36:04.236 --> 00:36:06.726 A:middle
本地化  还有所有你支持的

00:36:06.726 --> 00:36:07.416 A:middle
设备

00:36:07.696 --> 00:36:09.116 A:middle
你只用编写一个测试

00:36:09.116 --> 00:36:10.486 A:middle
就实现所有这些功能

00:36:11.576 --> 00:36:13.496 A:middle
其实是每个功能都需要

00:36:13.496 --> 00:36:16.136 A:middle
测试

00:36:16.136 --> 00:36:17.366 A:middle
想了解更多 XCTAttachment

00:36:17.366 --> 00:36:19.706 A:middle
或者

00:36:19.706 --> 00:36:22.046 A:middle
想知道关于测试还有什么新鲜事

00:36:22.626 --> 00:36:24.366 A:middle
请参加这周的相关

00:36:24.366 --> 00:36:24.596 A:middle
会议

00:36:26.636 --> 00:36:27.976 A:middle
现在  我想给大家展示

00:36:27.976 --> 00:36:29.446 A:middle
一个我为我的国际化事实 App

00:36:29.446 --> 00:36:30.626 A:middle
编写的测试

00:36:43.066 --> 00:36:45.456 A:middle
好的  在我的 Xcode 工程中  我已经

00:36:45.456 --> 00:36:47.266 A:middle
创建了这个 UI 测试的

00:36:47.426 --> 00:36:47.786 A:middle
目标

00:36:48.106 --> 00:36:50.006 A:middle
我的第一个测试叫做

00:36:50.046 --> 00:36:51.206 A:middle
“Test Some Territories”

00:36:51.866 --> 00:36:57.166 A:middle
我们来运行一下看看它

00:36:58.916 --> 00:36:59.596 A:middle
到底能做什么

00:36:59.596 --> 00:37:00.986 A:middle
现在 Xcode 启动了我的

00:36:59.596 --> 00:37:00.986 A:middle
现在 Xcode 启动了我的

00:37:00.986 --> 00:37:05.926 A:middle
自动测试过程管理工具  转而启动了

00:37:06.086 --> 00:37:07.466 A:middle
我的 App

00:37:08.776 --> 00:37:11.196 A:middle
在这个测试里面  我们

00:37:11.196 --> 00:37:12.736 A:middle
选定一个不同区域  比如

00:37:12.736 --> 00:37:14.666 A:middle
比利时  然后

00:37:14.666 --> 00:37:15.356 A:middle
测试成功

00:37:16.736 --> 00:37:18.726 A:middle
那么现在我们试着用俄文来

00:37:18.726 --> 00:37:19.576 A:middle
运行我的测试

00:37:19.786 --> 00:37:21.686 A:middle
为了实现这一点  我要回到我的

00:37:21.686 --> 00:37:22.116 A:middle
Scheme 中

00:37:23.146 --> 00:37:24.746 A:middle
和运行测试不同  这次我们

00:37:24.746 --> 00:37:27.276 A:middle
选定测试

00:37:27.276 --> 00:37:28.656 A:middle
在语言栏下面我选择

00:37:28.656 --> 00:37:30.286 A:middle
俄文  这样我才能测试

00:37:30.286 --> 00:37:32.676 A:middle
Chris 添加到我的工程中的

00:37:32.676 --> 00:37:33.166 A:middle
新的本地化结果

00:37:36.946 --> 00:37:38.296 A:middle
那么现在  我的自动测试过程管理工具

00:37:38.296 --> 00:37:40.096 A:middle
启动了  我的 App 也启动了

00:37:42.396 --> 00:37:43.856 A:middle
并且这次我的 App 是以俄文

00:37:43.856 --> 00:37:44.436 A:middle
启动的

00:37:45.226 --> 00:37:49.066 A:middle
但是  好像我的测试

00:37:49.166 --> 00:37:49.506 A:middle
失败了

00:37:50.076 --> 00:37:52.086 A:middle
我们来看看到底是怎么回事

00:37:52.796 --> 00:37:54.616 A:middle
我的测试好像无法

00:37:54.616 --> 00:37:56.566 A:middle
找到带有“Territory”的单元格

00:37:56.566 --> 00:37:57.616 A:middle
这就是我们刚刚谈到的

00:37:57.616 --> 00:37:58.216 A:middle
那个问题

00:37:58.696 --> 00:37:58.976 A:middle
我真是笨

00:38:08.936 --> 00:38:11.276 A:middle
所以  在我的工程当中  我要

00:38:11.276 --> 00:38:13.066 A:middle
回到我的主表格视图

00:38:13.066 --> 00:38:14.416 A:middle
控制器中  确保

00:38:14.416 --> 00:38:15.646 A:middle
我为 territoryPicker

00:38:15.646 --> 00:38:17.506 A:middle
单元格设置了

00:38:18.006 --> 00:38:20.156 A:middle
辅助功能标识符  这样我才能

00:38:20.156 --> 00:38:21.176 A:middle
选定它

00:38:21.776 --> 00:38:24.336 A:middle
所以  当我创建单元格的时候

00:38:24.336 --> 00:38:25.206 A:middle
也想给它一个

00:38:25.206 --> 00:38:26.186 A:middle
标识符

00:38:26.296 --> 00:38:29.296 A:middle
就是 TerritoryPickerCell

00:38:30.596 --> 00:38:31.956 A:middle
另外  我想在我的测试中使用

00:38:31.956 --> 00:38:33.466 A:middle
同样的标识符

00:38:35.636 --> 00:38:37.296 A:middle
然而  虽然测试失败了  不同于

00:38:37.296 --> 00:38:39.866 A:middle
使用静态文本  我会

00:38:39.866 --> 00:38:41.276 A:middle
用刚刚创建的标识符来

00:38:41.276 --> 00:38:42.756 A:middle
替换它

00:38:47.086 --> 00:38:49.476 A:middle
现在我试着

00:38:49.476 --> 00:38:51.156 A:middle
用这些标识符并以俄文来

00:38:51.156 --> 00:38:51.886 A:middle
运行我的测试

00:38:58.386 --> 00:38:59.706 A:middle
如你所见  我的 App 再次

00:38:59.706 --> 00:39:01.106 A:middle
以俄文启动了  但是

00:38:59.706 --> 00:39:01.106 A:middle
以俄文启动了  但是

00:39:01.106 --> 00:39:02.516 A:middle
这次它运行的更好

00:39:02.516 --> 00:39:04.696 A:middle
并选择了比利时

00:39:04.696 --> 00:39:05.736 A:middle
作为国家  这样测试就

00:39:05.736 --> 00:39:06.236 A:middle
成功了

00:39:07.406 --> 00:39:08.526 A:middle
所以  我想给大家展示一下

00:39:08.526 --> 00:39:09.736 A:middle
我的测试到底能做什么

00:39:10.376 --> 00:39:12.116 A:middle
首先我要启用一些

00:39:12.116 --> 00:39:12.836 A:middle
功能

00:39:12.836 --> 00:39:14.856 A:middle
我用这个 XCTAssertEqual

00:39:14.856 --> 00:39:16.456 A:middle
来确保我的 App

00:39:16.456 --> 00:39:18.496 A:middle
初始是在美国

00:39:18.496 --> 00:39:18.966 A:middle
启动的

00:39:19.846 --> 00:39:21.466 A:middle
然后我用

00:39:21.466 --> 00:39:24.856 A:middle
XCTAttachment API 来搜集

00:39:24.946 --> 00:39:25.536 A:middle
屏幕快照

00:39:25.686 --> 00:39:27.756 A:middle
我的第一个屏幕快照是

00:39:27.756 --> 00:39:30.446 A:middle
美国的页面

00:39:31.316 --> 00:39:32.996 A:middle
然后我把它添加到我的测试里面

00:39:33.096 --> 00:39:34.536 A:middle
接着在我打开区域列表的时候

00:39:34.536 --> 00:39:37.116 A:middle
我搜集到更多的截图

00:39:37.116 --> 00:39:38.936 A:middle
再接着

00:39:38.936 --> 00:39:39.896 A:middle
我选择了比利时

00:39:41.026 --> 00:39:42.406 A:middle
现在  如果最终我想

00:39:42.546 --> 00:39:44.326 A:middle
查看这些附件  我可以

00:39:44.326 --> 00:39:46.006 A:middle
直接进入边栏顶上的

00:39:46.006 --> 00:39:48.016 A:middle
报告导航

00:39:48.016 --> 00:39:50.486 A:middle
然后选择最近的运行

00:39:50.486 --> 00:39:51.366 A:middle
测试

00:39:51.996 --> 00:39:54.936 A:middle
然后  如果我扩大我的测试

00:39:54.936 --> 00:39:58.606 A:middle
范围  在测试情况下  你会发现

00:39:58.686 --> 00:39:59.976 A:middle
某些行列

00:39:59.976 --> 00:40:01.756 A:middle
会带有

00:39:59.976 --> 00:40:01.756 A:middle
会带有

00:40:02.306 --> 00:40:02.536 A:middle
附件图标

00:40:02.536 --> 00:40:03.586 A:middle
这些就是我刚刚创建的

00:40:03.806 --> 00:40:04.926 A:middle
附件

00:40:05.186 --> 00:40:07.206 A:middle
所以  如我前面提到的  他们在这里

00:40:07.206 --> 00:40:08.356 A:middle
都是屏幕快照

00:40:09.066 --> 00:40:10.856 A:middle
并且  我可以用这些附件

00:40:10.856 --> 00:40:12.086 A:middle
做很多事情

00:40:12.536 --> 00:40:14.076 A:middle
我可以将它们打包然后

00:40:14.076 --> 00:40:16.426 A:middle
发给某个人以确保

00:40:16.426 --> 00:40:18.016 A:middle
我的翻译质量

00:40:18.016 --> 00:40:19.186 A:middle
某个母语就是我

00:40:19.186 --> 00:40:20.446 A:middle
本地化语言的人

00:40:20.916 --> 00:40:22.846 A:middle
这样才能确保 UI 显示正常

00:40:22.846 --> 00:40:25.256 A:middle
并且格式正确

00:40:26.166 --> 00:40:27.746 A:middle
我甚至还能

00:40:27.746 --> 00:40:29.326 A:middle
在我的 App store 预览里使用这些屏幕快照

00:40:29.326 --> 00:40:31.796 A:middle
当我想在世界各地的

00:40:31.986 --> 00:40:33.056 A:middle
不同店面里

00:40:33.056 --> 00:40:34.216 A:middle
启动我的 App 时

00:40:34.656 --> 00:40:36.356 A:middle
这样用户就可以用他们的语言

00:40:36.356 --> 00:40:37.676 A:middle
预览你的 App 是什么

00:40:37.676 --> 00:40:38.656 A:middle
样子的

00:40:43.476 --> 00:40:45.646 A:middle
所以  刚刚给大家展示了

00:40:45.646 --> 00:40:48.636 A:middle
只用一个测试就能

00:40:48.636 --> 00:40:50.186 A:middle
测试每个添加到你 App 里面的

00:40:50.186 --> 00:40:50.616 A:middle
本地化

00:40:51.356 --> 00:40:52.526 A:middle
总结一下今天我们所说的

00:40:52.526 --> 00:40:54.906 A:middle
我们主要谈到了

00:40:54.906 --> 00:40:56.886 A:middle
App 的本地化

00:40:56.886 --> 00:40:57.156 A:middle
流程

00:40:58.426 --> 00:40:59.976 A:middle
首先  你需要准备本地化的

00:41:00.016 --> 00:41:01.756 A:middle
代码  这是国际化的

00:41:01.756 --> 00:41:03.146 A:middle
其中一步

00:41:03.146 --> 00:41:06.056 A:middle
接着我们给大家演示了

00:41:06.056 --> 00:41:07.446 A:middle
如何准备你的 App 的前期

00:41:07.446 --> 00:41:09.806 A:middle
工作  包括静态

00:41:09.806 --> 00:41:11.666 A:middle
分析和自动排版

00:41:11.666 --> 00:41:13.556 A:middle
警告  以及新的

00:41:13.636 --> 00:41:14.346 A:middle
伪语言

00:41:15.976 --> 00:41:18.176 A:middle
然后  你可以将所有的

00:41:18.176 --> 00:41:20.456 A:middle
本地化内容导出成一个单独的

00:41:20.456 --> 00:41:21.386 A:middle
XLIFF

00:41:21.836 --> 00:41:22.906 A:middle
这包括

00:41:23.016 --> 00:41:24.286 A:middle
STRINGSDICT 文档  它可以

00:41:24.286 --> 00:41:25.836 A:middle
强大的处理双数和

00:41:25.896 --> 00:41:27.616 A:middle
自适应字符串

00:41:29.036 --> 00:41:30.666 A:middle
最后  当你的 XLIFF 翻译

00:41:30.726 --> 00:41:32.676 A:middle
完成后  你可以将它导入

00:41:32.676 --> 00:41:34.326 A:middle
回你的工程当中  并

00:41:34.326 --> 00:41:36.026 A:middle
整合所有翻译内容

00:41:36.026 --> 00:41:37.496 A:middle
到你的 App 中的

00:41:37.496 --> 00:41:37.606 A:middle
不同地方

00:41:39.326 --> 00:41:40.656 A:middle
接着你可以利用

00:41:40.656 --> 00:41:42.896 A:middle
已有的测试

00:41:42.896 --> 00:41:44.776 A:middle
在所有你支持的本地化中

00:41:44.776 --> 00:41:45.636 A:middle
运行它们

00:41:45.856 --> 00:41:47.106 A:middle
然后除了测试你的 App 的

00:41:47.106 --> 00:41:48.896 A:middle
功能以外

00:41:48.896 --> 00:41:51.266 A:middle
你还可以利用新的 XCT 附件做

00:41:51.266 --> 00:41:51.906 A:middle
更多的事情

00:41:53.606 --> 00:41:54.796 A:middle
想了解更多信息  我们的

00:41:54.796 --> 00:41:56.556 A:middle
编号是 401 你可以在

00:41:56.556 --> 00:41:57.306 A:middle
developer.Apple.com 上

00:41:57.306 --> 00:41:58.716 A:middle
访问我们的网页

00:41:59.606 --> 00:42:01.106 A:middle
强烈推荐您的

00:41:59.606 --> 00:42:01.106 A:middle
强烈推荐您的

00:42:01.106 --> 00:42:02.496 A:middle
参与  至少可以

00:42:02.496 --> 00:42:03.816 A:middle
在本周观看

00:42:03.816 --> 00:42:04.146 A:middle
相关内容

00:42:05.726 --> 00:42:06.556 A:middle
谢谢  欢迎欣赏更多

00:42:06.556 --> 00:42:06.976 A:middle
精彩内容

00:42:07.516 --> 00:42:11.500 A:middle
[掌声]
