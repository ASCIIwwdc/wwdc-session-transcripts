WEBVTT

00:00:28.836 --> 00:00:29.846 A:middle
&gt;&gt; 大家好 我是 Nick

00:00:29.846 --> 00:00:30.336 A:middle
Porcino

00:00:30.476 --> 00:00:32.116 A:middle
我在游戏技术团队

00:00:32.116 --> 00:00:34.426 A:middle
工作 今天在这里我想谈谈

00:00:34.426 --> 00:00:36.736 A:middle
如何将你的艺术作品

00:00:36.826 --> 00:00:39.186 A:middle
从最初的素材开始

00:00:39.186 --> 00:00:41.176 A:middle
通过 Model I/O 引入到引擎

00:00:41.276 --> 00:00:41.676 A:middle
欢迎大家

00:00:42.546 --> 00:00:46.006 A:middle
所以在最开始 我想

00:00:46.006 --> 00:00:48.276 A:middle
先帮大家回想一下 Model I/O 是什么

00:00:49.006 --> 00:00:50.766 A:middle
Model I/O 是 Apple 为

00:00:50.766 --> 00:00:51.726 A:middle
构建管道设计的成套工具

00:00:51.956 --> 00:00:53.776 A:middle
你们可以用它来导入或导出 3D

00:00:53.776 --> 00:00:55.646 A:middle
素材 包括多个行业的

00:00:55.646 --> 00:00:58.006 A:middle
标准文件格式 例如

00:00:58.436 --> 00:01:00.546 A:middle
常见的 Wavefront OBJ

00:00:58.436 --> 00:01:00.546 A:middle
常见的 Wavefront OBJ

00:01:00.656 --> 00:01:02.206 A:middle
以及更现代点的 像是

00:01:02.206 --> 00:01:03.056 A:middle
Pixar 的 USD

00:01:03.646 --> 00:01:06.126 A:middle
它可以描绘几何结构

00:01:06.126 --> 00:01:07.986 A:middle
材质 光线照相机

00:01:08.086 --> 00:01:11.416 A:middle
三维像素化 灯光以及

00:01:11.416 --> 00:01:12.126 A:middle
各种其他的东西

00:01:12.566 --> 00:01:14.226 A:middle
它也可以进行数据格式转换

00:01:14.556 --> 00:01:16.146 A:middle
这样不管你所拿到的素材

00:01:16.146 --> 00:01:17.506 A:middle
原始创作时是

00:01:17.506 --> 00:01:18.636 A:middle
什么格式

00:01:18.806 --> 00:01:21.576 A:middle
你都可以使它们符合

00:01:21.576 --> 00:01:22.866 A:middle
特定的步幅和布局

00:01:22.866 --> 00:01:23.896 A:middle
以满足 Metal 的需求

00:01:24.476 --> 00:01:25.416 A:middle
另外还有各种

00:01:25.416 --> 00:01:27.196 A:middle
处理工具 我们

00:01:27.196 --> 00:01:28.436 A:middle
在演讲最后会简要地

00:01:28.436 --> 00:01:31.276 A:middle
评价一下它们

00:01:31.486 --> 00:01:33.986 A:middle
今年我们对

00:01:33.986 --> 00:01:35.356 A:middle
Model I/O 做了很多改进

00:01:35.396 --> 00:01:37.486 A:middle
这里我想向大家推荐

00:01:37.486 --> 00:01:39.196 A:middle
我们的开发人员网站 帮助大家了解更多

00:01:39.416 --> 00:01:41.556 A:middle
为了让大家

00:01:41.896 --> 00:01:43.046 A:middle
大致了解接下来的内容

00:01:43.626 --> 00:01:44.676 A:middle
我们对导入器

00:01:44.676 --> 00:01:45.206 A:middle
做了改进

00:01:45.206 --> 00:01:46.936 A:middle
我们得到过很多这样的反馈

00:01:46.936 --> 00:01:49.086 A:middle
当他们加载了外部

00:01:49.136 --> 00:01:50.306 A:middle
文件格式 他们就会遇到

00:01:50.306 --> 00:01:50.816 A:middle
问题

00:01:50.816 --> 00:01:52.126 A:middle
我们已经根据需求进行了

00:01:52.646 --> 00:01:53.486 A:middle
修正

00:01:53.906 --> 00:01:54.986 A:middle
我们引入了对

00:01:54.986 --> 00:01:56.276 A:middle
蒙皮角色动画的支持

00:01:56.676 --> 00:01:57.856 A:middle
这点稍后

00:01:57.856 --> 00:01:59.876 A:middle
会讲到

00:02:00.376 --> 00:02:02.026 A:middle
我们支持融合变形

00:02:02.306 --> 00:02:03.656 A:middle
如果你有一个角色的两种表情

00:02:03.656 --> 00:02:04.936 A:middle
微笑以及皱眉

00:02:04.936 --> 00:02:06.536 A:middle
利用这个数据结构

00:02:06.536 --> 00:02:07.516 A:middle
你可以实现两个表情间的转换

00:02:07.966 --> 00:02:09.346 A:middle
并且我们还有变换栈

00:02:09.836 --> 00:02:12.426 A:middle
对应数据在不同

00:02:12.426 --> 00:02:13.966 A:middle
程序中的状态 例如

00:02:13.966 --> 00:02:16.796 A:middle
在 Maya 中动画将被

00:02:16.796 --> 00:02:17.926 A:middle
分为

00:02:17.926 --> 00:02:19.326 A:middle
旋转 技巧

00:02:19.326 --> 00:02:21.046 A:middle
翻译 并以特定

00:02:21.046 --> 00:02:21.406 A:middle
的顺序摆放

00:02:22.196 --> 00:02:23.566 A:middle
去年我们给了大家一个

00:02:23.566 --> 00:02:25.976 A:middle
矩阵 今年我们能用

00:02:26.366 --> 00:02:28.516 A:middle
你们在创作工具时用的

00:02:28.626 --> 00:02:30.406 A:middle
同样的构件组成

00:02:30.406 --> 00:02:31.026 A:middle
动画

00:02:31.866 --> 00:02:36.096 A:middle
现在最重要的是 Model I/O

00:02:36.346 --> 00:02:38.076 A:middle
能够让你们对你们的数据有

00:02:38.076 --> 00:02:38.446 A:middle
统一的视图

00:02:39.096 --> 00:02:42.046 A:middle
所以如果你打开一个素材

00:02:42.046 --> 00:02:43.226 A:middle
不管它原本是什么格式

00:02:43.226 --> 00:02:45.276 A:middle
Model I/O 将

00:02:45.276 --> 00:02:48.036 A:middle
对它进行标准化 这样你就可以

00:02:48.036 --> 00:02:49.726 A:middle
遍历它 写一个

00:02:49.726 --> 00:02:51.096 A:middle
代码环 它将知道

00:02:51.096 --> 00:02:51.986 A:middle
如何每次以统一的方式

00:02:51.986 --> 00:02:54.556 A:middle
处理所有的数据

00:02:54.556 --> 00:02:55.836 A:middle
对你加载的每一项素材

00:02:55.836 --> 00:02:56.836 A:middle
都是如此

00:02:56.836 --> 00:02:58.306 A:middle
这个我放到屏幕

00:02:58.306 --> 00:02:59.756 A:middle
上的素材

00:03:00.126 --> 00:03:01.436 A:middle
只是车的一个小

00:03:01.466 --> 00:03:01.876 A:middle
部件

00:03:02.056 --> 00:03:03.446 A:middle
它有一个摄像头 还有

00:03:03.446 --> 00:03:03.746 A:middle
光

00:03:04.036 --> 00:03:05.216 A:middle
这辆车被分解为

00:03:05.216 --> 00:03:05.956 A:middle
各种部件

00:03:05.956 --> 00:03:06.956 A:middle
它有各种不同的材质

00:03:07.836 --> 00:03:09.526 A:middle
不管我加载的是何种场景

00:03:09.526 --> 00:03:11.696 A:middle
它都将是这样的

00:03:11.696 --> 00:03:12.766 A:middle
并且它非常容易

00:03:12.766 --> 00:03:13.246 A:middle
遍历

00:03:13.396 --> 00:03:15.546 A:middle
这也是为什么 Model I/O

00:03:16.196 --> 00:03:18.206 A:middle
真的非常容易使用 并且在管道中

00:03:18.206 --> 00:03:18.776 A:middle
非常有用

00:03:20.686 --> 00:03:22.916 A:middle
现在 我们想创造

00:03:22.916 --> 00:03:23.696 A:middle
像这样的东西

00:03:23.696 --> 00:03:25.186 A:middle
这将是我的一个小

00:03:25.936 --> 00:03:26.046 A:middle
游戏

00:03:26.046 --> 00:03:28.476 A:middle
这个游戏将由

00:03:28.476 --> 00:03:30.466 A:middle
一些艺术素材组成 它们

00:03:30.466 --> 00:03:32.046 A:middle
已经在另外一个工具中准备好了

00:03:32.166 --> 00:03:33.466 A:middle
这个工具可以是 Maya Blender 或者

00:03:33.466 --> 00:03:34.146 A:middle
任何其他你喜欢的工具

00:03:34.706 --> 00:03:36.456 A:middle
然后还需要有模型

00:03:36.456 --> 00:03:37.716 A:middle
需要有模型上的

00:03:37.716 --> 00:03:38.356 A:middle
材料

00:03:38.636 --> 00:03:40.086 A:middle
将有动画

00:03:40.776 --> 00:03:41.896 A:middle
各种各样的纹理

00:03:42.356 --> 00:03:43.546 A:middle
我们将会从各种

00:03:43.546 --> 00:03:45.556 A:middle
不同的文件中整合

00:03:45.606 --> 00:03:46.126 A:middle
一个场景

00:03:47.316 --> 00:03:51.626 A:middle
一个艺术家在创造

00:03:51.626 --> 00:03:54.106 A:middle
素材时 他们处于一个特别

00:03:54.146 --> 00:03:56.056 A:middle
复杂的环境中

00:03:56.056 --> 00:03:57.676 A:middle
有很多他们可以使用的工具

00:03:58.066 --> 00:04:00.776 A:middle
对于艺术家来说 艺术作品以及

00:03:58.066 --> 00:04:00.776 A:middle
对于艺术家来说 艺术作品以及

00:04:00.776 --> 00:04:02.846 A:middle
Maya 和 Blender 这些工具的意义

00:04:02.846 --> 00:04:04.706 A:middle
就像源代码

00:04:04.706 --> 00:04:05.246 A:middle
对于程序员的意义

00:04:05.696 --> 00:04:07.106 A:middle
它有各种各样

00:04:07.326 --> 00:04:08.546 A:middle
对迭代和开发

00:04:08.546 --> 00:04:10.026 A:middle
非常有用的东西 但是

00:04:10.076 --> 00:04:11.576 A:middle
那些并不能让它被运用到

00:04:11.576 --> 00:04:12.036 A:middle
运行中

00:04:12.036 --> 00:04:12.896 A:middle
你们不需要交付代码 你们

00:04:12.896 --> 00:04:13.906 A:middle
要交付的是编译代码

00:04:14.516 --> 00:04:16.495 A:middle
正如你们在应用程序中

00:04:17.396 --> 00:04:18.666 A:middle
为你们的对象编写

00:04:18.666 --> 00:04:19.516 A:middle
源一样 我们将

00:04:19.516 --> 00:04:21.976 A:middle
编写适用于引擎的

00:04:21.976 --> 00:04:22.426 A:middle
最佳素材

00:04:23.536 --> 00:04:26.296 A:middle
现在 制作基于 UI 的小工具

00:04:26.296 --> 00:04:28.686 A:middle
是非常有吸引力的

00:04:29.526 --> 00:04:30.926 A:middle
所以也许通过一些拖放 以及

00:04:30.926 --> 00:04:32.056 A:middle
很多其他的操作去点击

00:04:32.096 --> 00:04:33.206 A:middle
滑动等

00:04:33.206 --> 00:04:34.756 A:middle
去构造那个工具

00:04:34.876 --> 00:04:35.866 A:middle
这个过程将会很有意思

00:04:35.866 --> 00:04:37.106 A:middle
而且最初使用的几次

00:04:37.106 --> 00:04:37.736 A:middle
也会很有意思

00:04:38.306 --> 00:04:40.796 A:middle
但是当我完成我的第一辆车

00:04:40.926 --> 00:04:42.136 A:middle
艺术家又给了我另外 12 辆

00:04:42.136 --> 00:04:43.576 A:middle
车的时候 那么

00:04:43.576 --> 00:04:44.966 A:middle
我就必须把他们都拖进来

00:04:44.966 --> 00:04:46.326 A:middle
一次又一次地去重复

00:04:46.326 --> 00:04:47.416 A:middle
点击同样的

00:04:47.416 --> 00:04:47.736 A:middle
按钮吗

00:04:48.146 --> 00:04:49.346 A:middle
那样这个工具很快就会变得

00:04:49.616 --> 00:04:51.256 A:middle
让人非常有负担

00:04:51.886 --> 00:04:52.986 A:middle
这里我们要讲讲

00:04:52.986 --> 00:04:56.966 A:middle
如何通过管道批量处理

00:04:56.966 --> 00:04:57.526 A:middle
这个操作

00:04:58.566 --> 00:05:00.566 A:middle
我们将从图案

00:04:58.566 --> 00:05:00.566 A:middle
我们将从图案

00:05:00.566 --> 00:05:01.156 A:middle
开始

00:05:01.606 --> 00:05:03.506 A:middle
我将使用一个导出器

00:05:03.686 --> 00:05:05.406 A:middle
将它转换为素材

00:05:07.026 --> 00:05:08.696 A:middle
我们将使用 Model I/O 将

00:05:08.696 --> 00:05:10.846 A:middle
这个素材转换为

00:05:10.846 --> 00:05:11.846 A:middle
引擎就绪数据

00:05:12.426 --> 00:05:14.806 A:middle
我们将在我们的引擎里

00:05:14.806 --> 00:05:17.686 A:middle
加载这个引擎就绪

00:05:17.686 --> 00:05:18.026 A:middle
数据

00:05:18.076 --> 00:05:19.506 A:middle
我们将把它转换为

00:05:19.506 --> 00:05:21.216 A:middle
Metal 缓冲文件 然后 Metal

00:05:21.366 --> 00:05:22.336 A:middle
将制作一张好看的图片

00:05:23.586 --> 00:05:28.656 A:middle
所以第一步是

00:05:28.856 --> 00:05:29.686 A:middle
导出艺术作品

00:05:30.246 --> 00:05:33.696 A:middle
在我们的

00:05:33.696 --> 00:05:35.436 A:middle
这个例子中 我们使用的是 Maya

00:05:35.766 --> 00:05:37.236 A:middle
我们有一个 Python

00:05:37.236 --> 00:05:38.646 A:middle
脚本 它将浏览 Maya

00:05:38.646 --> 00:05:39.566 A:middle
找到所有的东西

00:05:40.116 --> 00:05:42.776 A:middle
它遍历复杂的层级

00:05:42.776 --> 00:05:46.256 A:middle
和文件 然后导出一个

00:05:46.256 --> 00:05:46.826 A:middle
素材文件

00:05:47.556 --> 00:05:50.216 A:middle
正如我之前提到的

00:05:50.316 --> 00:05:51.796 A:middle
选择文件格式非常

00:05:51.796 --> 00:05:53.116 A:middle
重要 我们不会

00:05:53.116 --> 00:05:54.906 A:middle
使用齿轮处

00:05:54.906 --> 00:05:55.896 A:middle
有点长的东西

00:05:55.896 --> 00:05:57.476 A:middle
例如 Wavefront OBJ 我们将

00:05:58.506 --> 00:06:00.156 A:middle
使用比较新的

00:05:58.506 --> 00:06:00.156 A:middle
使用比较新的

00:06:00.156 --> 00:06:01.486 A:middle
现代的东西 也就是 Pixar 的

00:06:01.486 --> 00:06:02.736 A:middle
USD 文件

00:06:02.736 --> 00:06:03.146 A:middle
格式

00:06:03.146 --> 00:06:06.956 A:middle
现在我们要简要

00:06:06.956 --> 00:06:10.106 A:middle
介绍一下它 首先

00:06:10.346 --> 00:06:11.166 A:middle
它有一个网站

00:06:11.166 --> 00:06:12.476 A:middle
你可以在那儿看到网址

00:06:12.476 --> 00:06:15.086 A:middle
在这里你可以找到

00:06:15.086 --> 00:06:16.186 A:middle
你可能想知道的关于

00:06:16.186 --> 00:06:17.476 A:middle
USD 的细节和各种

00:06:18.066 --> 00:06:18.686 A:middle
信息

00:06:18.826 --> 00:06:21.546 A:middle
现在可以在他们的网站上

00:06:21.546 --> 00:06:22.706 A:middle
找到 Pixar 的 USD 文件格式

00:06:22.706 --> 00:06:25.646 A:middle
这些文件多年以来用于

00:06:25.646 --> 00:06:27.146 A:middle
制作动画

00:06:27.146 --> 00:06:27.866 A:middle
长片

00:06:28.266 --> 00:06:30.436 A:middle
大家可能还

00:06:30.436 --> 00:06:31.966 A:middle
记得在去年的 SceneKit

00:06:31.966 --> 00:06:33.416 A:middle
展示 我们把

00:06:33.416 --> 00:06:35.276 A:middle
USD 整合到

00:06:35.276 --> 00:06:37.676 A:middle
iOS 和 macOS

00:06:37.676 --> 00:06:39.366 A:middle
操作系统当中

00:06:39.836 --> 00:06:41.326 A:middle
我们一直在和

00:06:41.326 --> 00:06:43.126 A:middle
Pixar 共同努力以不断改善

00:06:43.126 --> 00:06:45.166 A:middle
整合情况 并且添加了

00:06:45.166 --> 00:06:45.826 A:middle
新的功能

00:06:46.536 --> 00:06:49.556 A:middle
那么是什么让 USD

00:06:49.556 --> 00:06:52.006 A:middle
变得比之前所有的

00:06:52.836 --> 00:06:54.556 A:middle
都更强大呢

00:06:54.556 --> 00:06:57.226 A:middle
正是因为我们

00:06:57.226 --> 00:06:58.826 A:middle
把大量的文件

00:06:58.996 --> 00:07:00.346 A:middle
组合在一起

00:06:58.996 --> 00:07:00.346 A:middle
组合在一起

00:07:00.346 --> 00:07:01.486 A:middle
创造一个复杂的场景

00:07:02.006 --> 00:07:04.376 A:middle
在这个样本里

00:07:04.376 --> 00:07:07.426 A:middle
我从我们的赛道里面

00:07:07.776 --> 00:07:09.826 A:middle
拆出了一些部件 或者从我们

00:07:09.826 --> 00:07:12.266 A:middle
有赛道的游戏里面 然后把它们运用到

00:07:12.266 --> 00:07:13.766 A:middle
建筑物 赛道 轮胎

00:07:13.766 --> 00:07:15.286 A:middle
墙壁 车辆以及一些轮子中

00:07:15.696 --> 00:07:17.566 A:middle
我们逐级将这些

00:07:17.566 --> 00:07:19.356 A:middle
组合成一个单独的

00:07:19.356 --> 00:07:19.686 A:middle
文件

00:07:20.256 --> 00:07:22.006 A:middle
正如我之前给你们看的

00:07:22.006 --> 00:07:24.496 A:middle
那张表格 Model I/O

00:07:24.496 --> 00:07:26.296 A:middle
将把一切都解读为

00:07:27.076 --> 00:07:28.576 A:middle
容易遍历的格式

00:07:28.676 --> 00:07:30.396 A:middle
当我们只要将文件加载到

00:07:30.396 --> 00:07:31.806 A:middle
Model I/O 中就可以实现这点

00:07:32.476 --> 00:07:34.726 A:middle
还有一件特别棒的事

00:07:34.906 --> 00:07:36.416 A:middle
另外一个你们可以从

00:07:36.416 --> 00:07:37.826 A:middle
USD 中得到的特别棒的东西

00:07:37.826 --> 00:07:39.196 A:middle
就是变化的概念

00:07:39.556 --> 00:07:42.116 A:middle
这对艺术家来说是一个

00:07:42.116 --> 00:07:43.556 A:middle
非常强大的工具

00:07:43.556 --> 00:07:44.156 A:middle
他们可以用它来创造

00:07:44.156 --> 00:07:44.596 A:middle
场景

00:07:44.596 --> 00:07:46.006 A:middle
如果你希望跑道上

00:07:46.006 --> 00:07:47.516 A:middle
有很多车 我可以用

00:07:47.516 --> 00:07:49.156 A:middle
USD 做的就是先做一个汽车

00:07:49.156 --> 00:07:50.826 A:middle
文件 然后我可以获得

00:07:50.826 --> 00:07:51.996 A:middle
各种颜色的变化

00:07:52.036 --> 00:07:53.306 A:middle
大家可以看到这里有黄色的

00:07:53.306 --> 00:07:54.176 A:middle
绿色的 红色的

00:07:54.486 --> 00:07:56.626 A:middle
还有各种模型的变化

00:07:56.626 --> 00:07:58.026 A:middle
有翼片的和没有翼片的

00:07:58.546 --> 00:07:59.996 A:middle
我可以在文件里引用它们

00:07:59.996 --> 00:08:02.246 A:middle
选择我所需要的

00:07:59.996 --> 00:08:02.246 A:middle
选择我所需要的

00:08:02.246 --> 00:08:04.536 A:middle
版本 然后 Model I/O

00:08:04.826 --> 00:08:05.826 A:middle
将会对它们进行平面化

00:08:05.826 --> 00:08:06.946 A:middle
这样当你在

00:08:06.946 --> 00:08:08.426 A:middle
遍历数据结构

00:08:08.426 --> 00:08:10.096 A:middle
寻找你的

00:08:10.096 --> 00:08:12.016 A:middle
缓冲数据时 它将为你

00:08:12.016 --> 00:08:12.886 A:middle
找到合适的东西

00:08:13.586 --> 00:08:16.326 A:middle
我还想提到的一点是

00:08:16.376 --> 00:08:17.966 A:middle
USD 有

00:08:18.336 --> 00:08:21.536 A:middle
ASCII 格式以及一个快速的二进制

00:08:21.536 --> 00:08:21.976 A:middle
格式

00:08:22.386 --> 00:08:25.266 A:middle
网格由成千上万的

00:08:25.266 --> 00:08:26.546 A:middle
顶点和法线等组成

00:08:26.546 --> 00:08:27.626 A:middle
我将把它输出为

00:08:27.626 --> 00:08:28.306 A:middle
二进制

00:08:28.736 --> 00:08:30.496 A:middle
但是另一方面 如果我只是

00:08:30.496 --> 00:08:31.816 A:middle
随机地使用这个

00:08:31.816 --> 00:08:35.285 A:middle
数据 我可以写一个

00:08:35.285 --> 00:08:37.326 A:middle
像这样的文本 这里我

00:08:37.356 --> 00:08:41.285 A:middle
有一个有关

00:08:41.285 --> 00:08:44.626 A:middle
一辆车的动画世界 这个车将被引用

00:08:45.066 --> 00:08:47.146 A:middle
我只是改变了

00:08:47.146 --> 00:08:49.476 A:middle
这辆车的颜色 并且我把它放在

00:08:49.476 --> 00:08:50.686 A:middle
动画场景中

00:08:50.686 --> 00:08:52.116 A:middle
大家知道它并不是根据它的

00:08:52.426 --> 00:08:53.536 A:middle
通用规则来进行动画绘制的

00:08:54.356 --> 00:08:56.796 A:middle
这点对

00:08:56.796 --> 00:08:58.686 A:middle
创造变化和

00:08:58.686 --> 00:09:00.706 A:middle
离线试验迭代素材来说

00:08:58.686 --> 00:09:00.706 A:middle
离线试验迭代素材来说

00:09:01.116 --> 00:09:01.726 A:middle
具有十分强大的功能

00:09:02.486 --> 00:09:06.056 A:middle
我们将构建的是

00:09:06.056 --> 00:09:07.746 A:middle
一个小的工具 它将

00:09:07.906 --> 00:09:08.796 A:middle
把 USD

00:09:08.796 --> 00:09:10.736 A:middle
素材转化为

00:09:10.876 --> 00:09:13.856 A:middle
引擎就绪的数据

00:09:14.046 --> 00:09:16.016 A:middle
命令行工具

00:09:16.816 --> 00:09:19.296 A:middle
拥有命令行工具

00:09:19.296 --> 00:09:20.696 A:middle
可以给我们带来的

00:09:20.696 --> 00:09:22.356 A:middle
好处就是

00:09:22.356 --> 00:09:22.796 A:middle
可复制性

00:09:22.856 --> 00:09:24.096 A:middle
它可复制是因为具有

00:09:24.096 --> 00:09:25.076 A:middle
命令行参数

00:09:26.306 --> 00:09:27.836 A:middle
这些工具的操作可以保持

00:09:28.076 --> 00:09:29.396 A:middle
一致因为我们有

00:09:29.396 --> 00:09:30.896 A:middle
定义良好的输入和输出

00:09:30.896 --> 00:09:31.946 A:middle
以及参数

00:09:31.946 --> 00:09:34.006 A:middle
它将可编写脚本

00:09:34.506 --> 00:09:36.606 A:middle
你可以分批处理你的工具

00:09:36.606 --> 00:09:37.846 A:middle
将你的工具排好顺序

00:09:39.096 --> 00:09:39.806 A:middle
它将给我们带来

00:09:39.866 --> 00:09:41.406 A:middle
可扩展性 这是

00:09:41.406 --> 00:09:42.396 A:middle
图形用户

00:09:42.396 --> 00:09:44.876 A:middle
界面工具所没有的 因为我们

00:09:44.876 --> 00:09:46.406 A:middle
可以不中断地进行

00:09:46.406 --> 00:09:47.076 A:middle
自动操作

00:09:47.536 --> 00:09:49.276 A:middle
例如 艺术家可能

00:09:49.276 --> 00:09:50.786 A:middle
在某处有一个 Dropbox 文件

00:09:51.126 --> 00:09:51.966 A:middle
他们会把

00:09:51.966 --> 00:09:53.366 A:middle
所有的素材都放进去

00:09:53.366 --> 00:09:54.486 A:middle
无论何时 只要他们准备好将它们整合进

00:09:54.486 --> 00:09:55.816 A:middle
引擎 我们

00:09:55.816 --> 00:09:57.076 A:middle
都可以用一个小脚本

00:09:57.076 --> 00:09:58.386 A:middle
对该目录进行监测

00:09:59.046 --> 00:10:00.316 A:middle
任何时候当它注意到有新

00:09:59.046 --> 00:10:00.316 A:middle
任何时候当它注意到有新

00:10:00.316 --> 00:10:02.286 A:middle
文件时 我们将要介绍的

00:10:02.286 --> 00:10:03.426 A:middle
处理器

00:10:03.476 --> 00:10:05.336 A:middle
将自动运行 使文件

00:10:05.336 --> 00:10:07.106 A:middle
引擎就绪 然后移动它

00:10:07.466 --> 00:10:09.046 A:middle
这样当你们构建 Xcode 时

00:10:09.156 --> 00:10:10.036 A:middle
所有的素材将被

00:10:10.036 --> 00:10:11.826 A:middle
自动导入

00:10:11.826 --> 00:10:12.396 A:middle
为你们的游戏做好准备

00:10:13.576 --> 00:10:15.136 A:middle
最后 这种工具

00:10:15.136 --> 00:10:16.616 A:middle
是可组合的 这正是

00:10:16.616 --> 00:10:18.266 A:middle
表格右边的小弧线

00:10:18.266 --> 00:10:19.676 A:middle
所表明的

00:10:20.186 --> 00:10:21.466 A:middle
如果我们的场景中有多个工具

00:10:21.496 --> 00:10:23.516 A:middle
它是可组合的

00:10:23.516 --> 00:10:24.536 A:middle
它们都可以读写

00:10:24.536 --> 00:10:26.546 A:middle
同样的数据块 然后我就

00:10:26.676 --> 00:10:28.326 A:middle
可以将一个工具送进另外一个中

00:10:28.326 --> 00:10:30.236 A:middle
我可以用一个工具来

00:10:30.236 --> 00:10:32.826 A:middle
提取所有的网格 然后对它们进行

00:10:32.826 --> 00:10:33.446 A:middle
光照贴图

00:10:33.446 --> 00:10:35.086 A:middle
我可能做另外一个工具来寻找

00:10:35.086 --> 00:10:36.316 A:middle
所有的纹理 然后做一个

00:10:36.316 --> 00:10:36.956 A:middle
纹理清单

00:10:37.426 --> 00:10:39.016 A:middle
我做了很多像这样的小工具

00:10:39.016 --> 00:10:40.266 A:middle
然后把他们一起放进

00:10:40.716 --> 00:10:41.916 A:middle
工作流程中

00:10:43.196 --> 00:10:47.136 A:middle
所以 这个样本

00:10:47.136 --> 00:10:47.656 A:middle
还是非常简单的

00:10:48.006 --> 00:10:49.976 A:middle
它并不像很多其他的

00:10:49.976 --> 00:10:52.276 A:middle
最佳实践

00:10:52.276 --> 00:10:54.316 A:middle
它只是为了给大家

00:10:54.316 --> 00:10:55.866 A:middle
一个简化的数据格式

00:10:55.866 --> 00:10:57.026 A:middle
让大家更容易理解

00:10:57.186 --> 00:10:58.266 A:middle
这样大家便可以将

00:10:58.266 --> 00:10:59.276 A:middle
我们所讲的与你们

00:10:59.276 --> 00:10:59.886 A:middle
在代码中所看到的相匹配

00:11:00.386 --> 00:11:01.446 A:middle
其中并没有压缩 因为

00:11:01.536 --> 00:11:02.646 A:middle
你们不会想模糊

00:11:02.646 --> 00:11:03.746 A:middle
正在进行的操作

00:11:04.766 --> 00:11:06.036 A:middle
它的目的是成为你们

00:11:06.036 --> 00:11:08.816 A:middle
开始构建你们自己的

00:11:08.816 --> 00:11:10.476 A:middle
管道工具的起点

00:11:10.476 --> 00:11:11.986 A:middle
用它们匹配

00:11:11.986 --> 00:11:13.336 A:middle
你们自己的引擎和数据

00:11:13.336 --> 00:11:13.916 A:middle
格式

00:11:14.336 --> 00:11:17.196 A:middle
我还想谈一点

00:11:17.196 --> 00:11:18.626 A:middle
有关我们组合在一起的

00:11:18.626 --> 00:11:19.406 A:middle
玩具引擎

00:11:20.856 --> 00:11:21.786 A:middle
它内部有一个非常简单的

00:11:21.786 --> 00:11:22.576 A:middle
渲染程序

00:11:22.576 --> 00:11:23.676 A:middle
它都是用 Swift 和

00:11:23.676 --> 00:11:23.976 A:middle
Metal 编写的

00:11:24.356 --> 00:11:25.536 A:middle
它是一个单通道的

00:11:25.536 --> 00:11:26.826 A:middle
渲染程序 基于实物的

00:11:26.826 --> 00:11:28.986 A:middle
着色器 对象副本 蒙皮

00:11:28.986 --> 00:11:30.976 A:middle
骨骼动画以及多种

00:11:30.976 --> 00:11:31.456 A:middle
材质

00:11:32.176 --> 00:11:34.596 A:middle
那里标出了好多

00:11:34.596 --> 00:11:35.076 A:middle
要点

00:11:35.806 --> 00:11:37.186 A:middle
它有一个非常直接的

00:11:37.186 --> 00:11:37.776 A:middle
渲染循环

00:11:38.216 --> 00:11:39.846 A:middle
在左边我们有

00:11:39.846 --> 00:11:41.796 A:middle
那个表格以及一些需要绘制的网格

00:11:42.876 --> 00:11:44.326 A:middle
对于我们想画的所有事物

00:11:44.326 --> 00:11:45.526 A:middle
我们都会设置

00:11:46.016 --> 00:11:47.736 A:middle
转换缓冲 蒙皮数据

00:11:47.736 --> 00:11:49.466 A:middle
顶点缓冲 设置我们的管道

00:11:49.466 --> 00:11:51.326 A:middle
状态 材质均一

00:11:51.646 --> 00:11:52.606 A:middle
以及碎片纹理

00:11:52.906 --> 00:11:53.836 A:middle
我们将会为制作

00:11:54.106 --> 00:11:55.536 A:middle
好看的画面而绘制

00:11:55.536 --> 00:11:55.896 A:middle
索引的原语

00:11:56.526 --> 00:11:59.776 A:middle
我们把那个工具叫作

00:11:59.776 --> 00:12:00.466 A:middle
baker

00:11:59.776 --> 00:12:00.466 A:middle
baker

00:12:01.706 --> 00:12:03.666 A:middle
那么我们要烤什么呢

00:12:06.136 --> 00:12:08.246 A:middle
首先 我们要烤

00:12:08.246 --> 00:12:09.586 A:middle
几何结构和

00:12:09.586 --> 00:12:11.246 A:middle
变换 事物的

00:12:11.246 --> 00:12:12.896 A:middle
样子 其所在位置

00:12:14.006 --> 00:12:16.016 A:middle
纹理路径以及材质

00:12:16.016 --> 00:12:17.146 A:middle
这样在我们绘制那些

00:12:17.146 --> 00:12:18.076 A:middle
东西的时候 我们知道

00:12:18.076 --> 00:12:18.776 A:middle
它们将呈现的样子

00:12:19.316 --> 00:12:20.836 A:middle
实例化数据 这样当我们有

00:12:21.236 --> 00:12:23.026 A:middle
多个轮子的时候 将

00:12:23.026 --> 00:12:24.296 A:middle
有信息可以告诉

00:12:24.296 --> 00:12:26.366 A:middle
我们如何高效地将那个轮子的

00:12:26.366 --> 00:12:27.606 A:middle
多个副本放在何处

00:12:28.356 --> 00:12:30.146 A:middle
转换动画 这样就

00:12:30.146 --> 00:12:31.536 A:middle
可以让事物进行动画化

00:12:32.216 --> 00:12:33.866 A:middle
最后我们将谈一下

00:12:33.866 --> 00:12:35.196 A:middle
蒙皮和角色

00:12:35.196 --> 00:12:35.696 A:middle
动画

00:12:36.306 --> 00:12:40.116 A:middle
首先是几何机构和

00:12:40.116 --> 00:12:41.046 A:middle
转换

00:12:42.496 --> 00:12:44.666 A:middle
了解基本计算机

00:12:44.666 --> 00:12:45.656 A:middle
绘图的话 你应该

00:12:45.656 --> 00:12:47.046 A:middle
熟悉场景图

00:12:47.806 --> 00:12:48.946 A:middle
这里我们有一个转换

00:12:48.946 --> 00:12:49.786 A:middle
层级

00:12:49.926 --> 00:12:51.926 A:middle
有转换节点 A

00:12:51.926 --> 00:12:52.756 A:middle
和 B

00:12:53.126 --> 00:12:55.426 A:middle
A 可能是一个世界节点

00:12:55.586 --> 00:12:56.826 A:middle
它可能只是提供

00:12:56.826 --> 00:12:57.816 A:middle
一个恒等

00:12:57.816 --> 00:12:58.616 A:middle
变换

00:12:58.616 --> 00:13:01.196 A:middle
B 是一个转换节点 它说明

00:12:58.616 --> 00:13:01.196 A:middle
B 是一个转换节点 它说明

00:13:01.196 --> 00:13:02.436 A:middle
了车在世界中所处的位置

00:13:02.966 --> 00:13:05.686 A:middle
我的赛车现在只有一个轮子

00:13:05.686 --> 00:13:06.566 A:middle
假装你们可以在

00:13:06.566 --> 00:13:07.776 A:middle
我的幻灯片下面看到

00:13:07.776 --> 00:13:08.296 A:middle
其他的轮子

00:13:08.806 --> 00:13:10.086 A:middle
我们还有车身

00:13:10.946 --> 00:13:14.756 A:middle
转换层级工作的方式是

00:13:14.756 --> 00:13:16.976 A:middle
如果我移动了

00:13:16.976 --> 00:13:18.236 A:middle
母节点 那个母节点

00:13:18.236 --> 00:13:19.286 A:middle
下面的一切

00:13:19.446 --> 00:13:23.036 A:middle
都会作为整体一起移动

00:13:23.176 --> 00:13:25.666 A:middle
我们想做的是

00:13:25.666 --> 00:13:26.976 A:middle
要把那个信息放入

00:13:27.356 --> 00:13:29.316 A:middle
我们的引擎中 这样它

00:13:29.316 --> 00:13:30.196 A:middle
马上就可以对其进行渲染

00:13:30.526 --> 00:13:32.836 A:middle
我们希望简洁地进行编码

00:13:32.836 --> 00:13:34.736 A:middle
使操作容易

00:13:34.736 --> 00:13:36.126 A:middle
存储并且

00:13:36.126 --> 00:13:37.586 A:middle
不需要我去修复

00:13:37.586 --> 00:13:39.706 A:middle
指示器或者任何其他的

00:13:40.256 --> 00:13:40.366 A:middle
此类事物

00:13:40.586 --> 00:13:42.866 A:middle
我将要做的是

00:13:42.866 --> 00:13:43.826 A:middle
平面化

00:13:43.826 --> 00:13:46.056 A:middle
并且直线化那个

00:13:46.056 --> 00:13:46.426 A:middle
队列

00:13:46.836 --> 00:13:47.836 A:middle
我希望我不需要再说

00:13:47.836 --> 00:13:48.216 A:middle
那个单词了

00:13:48.796 --> 00:13:52.016 A:middle
我们将进行一队列的

00:13:52.186 --> 00:13:53.666 A:middle
本地转换

00:13:53.966 --> 00:13:56.446 A:middle
第一个可能是

00:13:56.446 --> 00:13:58.216 A:middle
世界

00:13:58.276 --> 00:13:59.226 A:middle
矩阵

00:13:59.946 --> 00:14:01.526 A:middle
然后有另外一个矩阵告诉我们

00:13:59.946 --> 00:14:01.526 A:middle
然后有另外一个矩阵告诉我们

00:14:01.526 --> 00:14:02.406 A:middle
车的位置

00:14:03.276 --> 00:14:05.046 A:middle
另外一个矩阵告诉我

00:14:05.046 --> 00:14:06.296 A:middle
轮子在哪里

00:14:07.276 --> 00:14:08.556 A:middle
另外一个矩阵告诉我

00:14:08.556 --> 00:14:09.436 A:middle
车身在哪里

00:14:09.436 --> 00:14:12.286 A:middle
我将分配指标

00:14:12.286 --> 00:14:13.056 A:middle
因为稍后它们将会

00:14:13.056 --> 00:14:14.126 A:middle
非常有用

00:14:14.566 --> 00:14:16.586 A:middle
0 1 2 3 将是

00:14:16.616 --> 00:14:20.386 A:middle
场景图的

00:14:20.956 --> 00:14:21.086 A:middle
中序遍历

00:14:21.266 --> 00:14:22.776 A:middle
现在我将对那棵树

00:14:22.776 --> 00:14:23.336 A:middle
进行编码

00:14:24.176 --> 00:14:25.436 A:middle
我将编写另外

00:14:25.436 --> 00:14:26.606 A:middle
一队列母指标

00:14:26.726 --> 00:14:29.176 A:middle
第一条是 nil

00:14:29.176 --> 00:14:32.086 A:middle
这个世界没有亲项

00:14:33.156 --> 00:14:36.626 A:middle
这辆车的 root B 的亲项在

00:14:36.626 --> 00:14:38.166 A:middle
索引 0 中 也就是世界

00:14:39.716 --> 00:14:42.926 A:middle
轮子的亲项在

00:14:43.106 --> 00:14:45.216 A:middle
B 转换节点下 其他的

00:14:45.216 --> 00:14:46.246 A:middle
轮子也将是如此

00:14:47.456 --> 00:14:49.666 A:middle
车身的亲项也在

00:14:49.666 --> 00:14:50.156 A:middle
那个节点之下

00:14:51.126 --> 00:14:53.896 A:middle
所以我们编码了一个图表

00:14:54.546 --> 00:14:55.836 A:middle
最后我们希望能够

00:14:55.836 --> 00:14:57.516 A:middle
告诉引擎需要

00:14:57.516 --> 00:14:59.136 A:middle
绘制什么 所以我们将绘制

00:14:59.136 --> 00:15:01.186 A:middle
一个轮子 它在索引 2 下面

00:14:59.136 --> 00:15:01.186 A:middle
一个轮子 它在索引 2 下面

00:15:01.296 --> 00:15:03.196 A:middle
然后我们将绘制在

00:15:03.456 --> 00:15:04.606 A:middle
索引 3 的车身

00:15:05.476 --> 00:15:08.756 A:middle
我们用特别容易

00:15:08.936 --> 00:15:09.906 A:middle
编写的方式描述了

00:15:09.906 --> 00:15:10.266 A:middle
我们的场景

00:15:11.586 --> 00:15:13.606 A:middle
现在我们也只需要

00:15:13.606 --> 00:15:14.596 A:middle
描述需要画的内容

00:15:15.056 --> 00:15:17.196 A:middle
这将是一个顶点

00:15:17.196 --> 00:15:19.936 A:middle
描述符 也就是将

00:15:19.936 --> 00:15:21.216 A:middle
告诉 Metal 以下信息的队列

00:15:21.216 --> 00:15:22.526 A:middle
这些是标准的 这些是纹理

00:15:22.526 --> 00:15:23.496 A:middle
坐标 这些是

00:15:23.496 --> 00:15:25.476 A:middle
位置 真正的顶点可以

00:15:25.476 --> 00:15:26.476 A:middle
自行缓冲

00:15:26.476 --> 00:15:28.316 A:middle
然后索引缓冲器

00:15:28.316 --> 00:15:29.876 A:middle
会表明这些

00:15:30.096 --> 00:15:31.346 A:middle
指数对应

00:15:31.346 --> 00:15:32.966 A:middle
这些顶点缓冲区里的三角形

00:15:33.526 --> 00:15:38.336 A:middle
有了我们一致的

00:15:38.916 --> 00:15:39.886 A:middle
数据结构 是很容易

00:15:39.886 --> 00:15:40.436 A:middle
做到这点的

00:15:40.956 --> 00:15:41.986 A:middle
我们会把所有的对象

00:15:41.986 --> 00:15:44.566 A:middle
放在 MDLAsset 对象里运行一遍

00:15:44.716 --> 00:15:46.656 A:middle
在我们导入它之后

00:15:47.396 --> 00:15:50.036 A:middle
如果对象可以被放入

00:15:50.116 --> 00:15:52.956 A:middle
MDLMesh 里面铸造 我们将拿出 MDLMesh

00:15:52.956 --> 00:15:54.896 A:middle
以及顶点描述符 它将

00:15:54.896 --> 00:15:56.166 A:middle
告诉我们是否获得

00:15:56.166 --> 00:15:59.026 A:middle
位置及正常状态

00:15:59.086 --> 00:16:00.696 A:middle
对于在网格里的所有

00:15:59.086 --> 00:16:00.696 A:middle
对于在网格里的所有

00:16:00.816 --> 00:16:02.436 A:middle
顶点缓冲区 我们

00:16:02.436 --> 00:16:04.366 A:middle
将根据顶点缓冲区和

00:16:04.616 --> 00:16:07.196 A:middle
其长度创建 NSData

00:16:07.476 --> 00:16:09.536 A:middle
点点点

00:16:09.536 --> 00:16:10.696 A:middle
会告诉我们要

00:16:10.696 --> 00:16:12.016 A:middle
把 NSData 存储在

00:16:12.016 --> 00:16:13.406 A:middle
某处供编码使用

00:16:13.946 --> 00:16:17.166 A:middle
然后我们将在

00:16:17.166 --> 00:16:18.356 A:middle
子网格中运行 这里要快速

00:16:18.576 --> 00:16:20.006 A:middle
介绍一下什么是子网格

00:16:20.396 --> 00:16:21.536 A:middle
因为我刚刚提到了

00:16:21.536 --> 00:16:22.786 A:middle
这个词 我们可以想想

00:16:22.786 --> 00:16:24.266 A:middle
轮子 轮子有

00:16:24.266 --> 00:16:26.266 A:middle
一个橡胶轮胎和一个金属圈

00:16:26.386 --> 00:16:26.606 A:middle
对吧

00:16:27.036 --> 00:16:28.356 A:middle
所以我们可能将有

00:16:28.356 --> 00:16:29.866 A:middle
两种材质 所以需要有两种

00:16:29.866 --> 00:16:30.526 A:middle
绘制调用

00:16:30.966 --> 00:16:31.756 A:middle
但是它还是一个网格

00:16:31.756 --> 00:16:32.706 A:middle
他们将共用很多

00:16:32.706 --> 00:16:33.826 A:middle
顶点 例如

00:16:33.826 --> 00:16:35.696 A:middle
轮胎和金属圈之间的

00:16:35.696 --> 00:16:36.106 A:middle
交叉点

00:16:36.106 --> 00:16:37.426 A:middle
所以我们将创建两个

00:16:37.426 --> 00:16:40.336 A:middle
子网格用来索引金属圈

00:16:40.586 --> 00:16:42.466 A:middle
以及轮胎 他们都有自己

00:16:42.466 --> 00:16:44.566 A:middle
独立的索引缓冲器和

00:16:44.566 --> 00:16:44.976 A:middle
网格

00:16:45.196 --> 00:16:47.386 A:middle
我们将运行它们 然后

00:16:47.536 --> 00:16:47.686 A:middle
铸造它们

00:16:47.686 --> 00:16:49.146 A:middle
如果我们成功地铸造了它们 我们就

00:16:49.146 --> 00:16:51.896 A:middle
创建了一些 NSData

00:16:51.896 --> 00:16:52.626 A:middle
并且可以将之存储起来

00:16:53.256 --> 00:16:55.946 A:middle
最后对于素材里面的所有

00:16:57.126 --> 00:16:59.136 A:middle
对象 我们将

00:16:59.136 --> 00:17:01.696 A:middle
发现对象是否进行过

00:16:59.136 --> 00:17:01.696 A:middle
发现对象是否进行过

00:17:01.696 --> 00:17:04.425 A:middle
变换 然后拿到它的

00:17:04.425 --> 00:17:05.856 A:middle
矩阵 然后把它存在

00:17:05.856 --> 00:17:06.116 A:middle
队列中

00:17:06.766 --> 00:17:08.526 A:middle
完善 NSEncode 并将之归档

00:17:08.945 --> 00:17:10.316 A:middle
这些是将

00:17:10.316 --> 00:17:11.876 A:middle
进入光盘中的缓冲器

00:17:12.276 --> 00:17:14.316 A:middle
网格数据 描述符

00:17:14.316 --> 00:17:16.336 A:middle
顶点以及索引缓冲器

00:17:16.336 --> 00:17:18.306 A:middle
对场景中参数

00:17:18.366 --> 00:17:21.746 A:middle
进行直线化后的

00:17:21.976 --> 00:17:23.646 A:middle
场景数据 最后

00:17:23.646 --> 00:17:24.935 A:middle
关于在哪里放置

00:17:24.935 --> 00:17:26.366 A:middle
这些东西的

00:17:26.366 --> 00:17:26.715 A:middle
变换数据

00:17:27.165 --> 00:17:31.016 A:middle
接下来 我们将拿出

00:17:31.336 --> 00:17:33.336 A:middle
所有的材质数据

00:17:33.896 --> 00:17:37.076 A:middle
对于每一个子网格 我们

00:17:37.076 --> 00:17:38.406 A:middle
将找出它

00:17:38.876 --> 00:17:39.646 A:middle
可能对应一个材质

00:17:39.646 --> 00:17:41.186 A:middle
如果我们有一个材质 那么我们

00:17:41.186 --> 00:17:42.926 A:middle
将需要找到我们的着色器

00:17:43.186 --> 00:17:45.216 A:middle
所需要的指数

00:17:45.496 --> 00:17:47.036 A:middle
如果我们的着色器需要扩散

00:17:47.036 --> 00:17:49.086 A:middle
色彩和粗糙度 那么我将

00:17:49.086 --> 00:17:50.836 A:middle
问 MDLMaterial 你有

00:17:50.836 --> 00:17:52.936 A:middle
哪些值 我将

00:17:53.046 --> 00:17:54.316 A:middle
确定它为定标

00:17:54.316 --> 00:17:56.956 A:middle
值还是纹理 然后我们

00:17:56.956 --> 00:17:58.466 A:middle
将拿出并且记录它们

00:17:59.606 --> 00:18:01.026 A:middle
同样 这些代码都是非常

00:17:59.606 --> 00:18:01.026 A:middle
同样 这些代码都是非常

00:18:01.026 --> 00:18:01.646 A:middle
直接的

00:18:02.996 --> 00:18:04.206 A:middle
如果子网格有一种材质

00:18:04.206 --> 00:18:06.836 A:middle
它将在所有属性中运行一遍

00:18:07.336 --> 00:18:08.456 A:middle
这里我没有向你们展示是因为

00:18:08.456 --> 00:18:10.046 A:middle
我只是为我们的运行时着色器

00:18:10.046 --> 00:18:11.206 A:middle
过滤出那些

00:18:11.206 --> 00:18:11.936 A:middle
我们真正在意的东西

00:18:11.986 --> 00:18:13.676 A:middle
但是一旦我们到了

00:18:13.676 --> 00:18:14.576 A:middle
需要把它过滤掉的那个点

00:18:14.576 --> 00:18:17.096 A:middle
我们将问 嗨 属性

00:18:17.096 --> 00:18:18.636 A:middle
你是字符串还是网址

00:18:19.006 --> 00:18:20.466 A:middle
如果是这样的话 我们将参考一个

00:18:20.466 --> 00:18:21.836 A:middle
纹理 然后我们直接

00:18:21.836 --> 00:18:23.056 A:middle
为之后编写出纹理通道

00:18:23.876 --> 00:18:25.406 A:middle
不然我们就需要

00:18:25.826 --> 00:18:27.666 A:middle
检查你是否只是一个统一

00:18:27.666 --> 00:18:28.996 A:middle
属性 例如你是否是

00:18:28.996 --> 00:18:31.026 A:middle
浮动值或者颜色或者

00:18:31.026 --> 00:18:32.536 A:middle
类似的东西 如果是这样的

00:18:32.536 --> 00:18:33.276 A:middle
那么我们将把它

00:18:33.276 --> 00:18:33.636 A:middle
写出来

00:18:33.636 --> 00:18:37.956 A:middle
然后再次 这是我们

00:18:37.956 --> 00:18:39.026 A:middle
在之前的步骤里

00:18:39.026 --> 00:18:40.326 A:middle
写出的数据 也就是

00:18:40.376 --> 00:18:41.326 A:middle
场景图和网格

00:18:42.436 --> 00:18:43.866 A:middle
现在我将写出

00:18:43.866 --> 00:18:48.416 A:middle
材质均一和纹理通道

00:18:48.556 --> 00:18:50.566 A:middle
最后进行实例化

00:18:53.556 --> 00:18:56.756 A:middle
也就是在这里我们的汽车

00:18:56.756 --> 00:18:57.656 A:middle
将有不只一个

00:18:57.716 --> 00:18:57.956 A:middle
轮子

00:18:57.956 --> 00:18:59.856 A:middle
你可能

00:18:59.856 --> 00:19:01.386 A:middle
想多次使用

00:18:59.856 --> 00:19:01.386 A:middle
想多次使用

00:19:01.386 --> 00:19:02.756 A:middle
单一的网格

00:19:03.476 --> 00:19:07.206 A:middle
现在我的车有两个轮子了

00:19:07.386 --> 00:19:10.386 A:middle
要把这个多次

00:19:10.386 --> 00:19:12.086 A:middle
存储在存储器里面

00:19:12.086 --> 00:19:12.556 A:middle
有点浪费 对吧

00:19:12.556 --> 00:19:14.376 A:middle
它们都是同样的轮子

00:19:14.376 --> 00:19:15.106 A:middle
只不过重复了多次

00:19:15.626 --> 00:19:18.866 A:middle
所以 Model I/O 在

00:19:18.966 --> 00:19:21.496 A:middle
MDLAsset 里有一个叫控制队列的东西

00:19:22.186 --> 00:19:24.866 A:middle
当你加载一个通过实例化

00:19:24.866 --> 00:19:26.886 A:middle
来复制数据的 Pixar USD 文件时

00:19:26.886 --> 00:19:28.686 A:middle
Model I/O

00:19:28.686 --> 00:19:30.726 A:middle
会注意到这点 并且收集

00:19:30.726 --> 00:19:32.056 A:middle
所有复制对象 把它们放入

00:19:32.056 --> 00:19:35.026 A:middle
控制队列中 而不是

00:19:35.026 --> 00:19:36.936 A:middle
存储在单个的网格

00:19:37.096 --> 00:19:39.016 A:middle
的节点中 相反只是引用

00:19:39.136 --> 00:19:40.546 A:middle
它 只需要存储引用回

00:19:40.546 --> 00:19:42.066 A:middle
控制队列的

00:19:42.066 --> 00:19:42.266 A:middle
MDLObjective 就行

00:19:42.686 --> 00:19:44.086 A:middle
我们就是这么做到重复利用的

00:19:44.616 --> 00:19:46.246 A:middle
而且 由于 Metal 有非常棒的

00:19:46.246 --> 00:19:48.076 A:middle
实例化设备 这将

00:19:48.076 --> 00:19:51.876 A:middle
对我们非常有益

00:19:52.096 --> 00:19:54.396 A:middle
我们将再次

00:19:54.396 --> 00:19:55.976 A:middle
平面化各个层级 并且

00:19:55.976 --> 00:19:58.596 A:middle
直线化队列

00:19:58.626 --> 00:19:59.376 A:middle
和我们之前做的一样

00:20:00.206 --> 00:20:02.266 A:middle
现在在右侧 你可以

00:20:02.266 --> 00:20:03.526 A:middle
看到我在索引 2 3 4

00:20:03.526 --> 00:20:06.126 A:middle
队列中有两个轮子

00:20:06.536 --> 00:20:07.666 A:middle
但是我们希望成批处理

00:20:07.666 --> 00:20:08.766 A:middle
那些东西 但是我们

00:20:08.766 --> 00:20:13.086 A:middle
现在就要做这个

00:20:13.296 --> 00:20:14.536 A:middle
我们把这些轮胎分组

00:20:14.536 --> 00:20:16.926 A:middle
放在一起 现在我们在底部

00:20:16.926 --> 00:20:17.816 A:middle
有了车身

00:20:18.396 --> 00:20:19.136 A:middle
我们只要再存储

00:20:19.136 --> 00:20:20.706 A:middle
一点点数据 也就是

00:20:20.706 --> 00:20:22.046 A:middle
实例计数

00:20:22.196 --> 00:20:23.766 A:middle
现在有两个轮子和一个车身

00:20:25.046 --> 00:20:25.826 A:middle
最后它将有四个

00:20:25.826 --> 00:20:26.496 A:middle
轮子的 相信我

00:20:28.206 --> 00:20:30.656 A:middle
我们将调出

00:20:30.656 --> 00:20:31.666 A:middle
我们之前已经存储好的

00:20:31.666 --> 00:20:33.106 A:middle
数据 再到场景

00:20:33.106 --> 00:20:35.386 A:middle
组成数据 我们将

00:20:35.386 --> 00:20:36.356 A:middle
添加实例计数

00:20:37.406 --> 00:20:39.846 A:middle
我们做了这些就可以得到

00:20:39.846 --> 00:20:41.676 A:middle
一个包含多种材质和对象的

00:20:41.676 --> 00:20:42.786 A:middle
实例化场景

00:20:43.346 --> 00:20:46.016 A:middle
接下来我希望交给

00:20:46.306 --> 00:20:48.136 A:middle
Nicholas 来向大家展示

00:20:48.286 --> 00:20:49.266 A:middle
这些是如何从最开始

00:20:49.266 --> 00:20:49.586 A:middle
再到组合到一起的

00:20:51.516 --> 00:20:54.500 A:middle
［掌声］

00:21:05.096 --> 00:21:06.016 A:middle
&gt;&gt;我要向大家展示用 Model I/O

00:21:06.016 --> 00:21:07.846 A:middle
可以多么容易地

00:21:07.846 --> 00:21:09.206 A:middle
把我们的素材变换为

00:21:09.206 --> 00:21:10.196 A:middle
引擎就绪的数据

00:21:10.276 --> 00:21:12.376 A:middle
我这里有两个文件夹

00:21:12.376 --> 00:21:13.646 A:middle
第一个文件夹里有我们的艺术

00:21:13.646 --> 00:21:14.076 A:middle
素材

00:21:14.616 --> 00:21:16.176 A:middle
它包含了动画数据

00:21:16.806 --> 00:21:18.706 A:middle
汽车 采用了蒙皮动画的方式

00:21:18.706 --> 00:21:19.786 A:middle
它还有一堆材质

00:21:20.446 --> 00:21:21.476 A:middle
所以我们想做的就是我们希望

00:21:21.476 --> 00:21:23.896 A:middle
创建一个 baker

00:21:23.896 --> 00:21:25.626 A:middle
它可以把这个数据变为引擎

00:21:25.626 --> 00:21:26.796 A:middle
数据 然后把它放在

00:21:26.796 --> 00:21:27.616 A:middle
第二个文件夹里

00:21:28.246 --> 00:21:31.216 A:middle
这里我们有我们的

00:21:31.216 --> 00:21:32.736 A:middle
baker 项目 我们要做的

00:21:32.736 --> 00:21:33.996 A:middle
就是我们要

00:21:34.096 --> 00:21:35.506 A:middle
慢慢地把它扩展 以从这些

00:21:35.506 --> 00:21:37.256 A:middle
艺术素材中提取更多的

00:21:37.256 --> 00:21:37.696 A:middle
数据

00:21:38.176 --> 00:21:39.126 A:middle
从最简单的开始

00:21:39.166 --> 00:21:40.956 A:middle
让我们来导出

00:21:40.956 --> 00:21:42.236 A:middle
几何结构和转换

00:21:42.956 --> 00:21:44.146 A:middle
为了做这点 我们将浏览

00:21:44.146 --> 00:21:46.186 A:middle
场景图分级并且

00:21:46.186 --> 00:21:47.786 A:middle
寻找任何是 MDLMesh 类型的

00:21:48.526 --> 00:21:48.626 A:middle
对象

00:21:51.076 --> 00:21:52.156 A:middle
然后我们将存储

00:21:52.156 --> 00:21:55.636 A:middle
顶点描述符 所有的

00:21:55.636 --> 00:21:58.816 A:middle
顶点缓冲区 然后我们

00:21:58.816 --> 00:22:00.326 A:middle
将迭代所有的

00:21:58.816 --> 00:22:00.326 A:middle
将迭代所有的

00:22:00.386 --> 00:22:02.696 A:middle
子网格并且拿到索引

00:22:02.726 --> 00:22:03.076 A:middle
缓冲器

00:22:06.896 --> 00:22:07.896 A:middle
我们将再一次浏览

00:22:07.936 --> 00:22:10.256 A:middle
场景图 这次

00:22:10.256 --> 00:22:12.836 A:middle
我们要寻找的是所有

00:22:12.836 --> 00:22:14.066 A:middle
有转换组件的

00:22:14.066 --> 00:22:14.576 A:middle
对象

00:22:15.456 --> 00:22:16.906 A:middle
如果有的话 我们只需要存储

00:22:16.906 --> 00:22:17.396 A:middle
矩阵就行

00:22:17.526 --> 00:22:19.546 A:middle
第一个例子

00:22:19.546 --> 00:22:19.846 A:middle
就是这样

00:22:19.846 --> 00:22:20.726 A:middle
让我们运行

00:22:20.726 --> 00:22:20.906 A:middle
它

00:22:26.076 --> 00:22:27.166 A:middle
大家会注意到在第二个

00:22:27.166 --> 00:22:28.446 A:middle
文件夹里 我们有一个新文档

00:22:28.446 --> 00:22:29.726 A:middle
这就是我们的引擎就绪

00:22:30.406 --> 00:22:30.536 A:middle
数据

00:22:31.956 --> 00:22:33.336 A:middle
这里的第二个项目将是

00:22:33.336 --> 00:22:34.386 A:middle
我们的引擎 它将

00:22:34.386 --> 00:22:35.486 A:middle
读取那个数据 并且

00:22:35.486 --> 00:22:36.086 A:middle
对其进行渲染

00:22:36.086 --> 00:22:37.086 A:middle
我们来看看现在的

00:22:37.136 --> 00:22:37.376 A:middle
成果

00:22:37.636 --> 00:22:40.066 A:middle
你可能注意到 我们的

00:22:40.066 --> 00:22:41.336 A:middle
一个赛道上有两辆车 但是

00:22:41.336 --> 00:22:42.126 A:middle
还有颜色需要处理

00:22:42.126 --> 00:22:43.746 A:middle
那么让我们扩展 baker

00:22:43.746 --> 00:22:45.116 A:middle
让它也支持材质

00:22:50.046 --> 00:22:52.516 A:middle
我们不需要寻找

00:22:52.516 --> 00:22:53.326 A:middle
子网格上的索引缓冲器

00:22:53.376 --> 00:22:54.256 A:middle
我们需要看看

00:22:54.316 --> 00:22:55.206 A:middle
它是否有一个材质

00:22:55.206 --> 00:22:55.656 A:middle
属性

00:22:56.116 --> 00:22:57.936 A:middle
如果有的话 那么就有五个

00:22:57.986 --> 00:22:58.986 A:middle
和以下相关的属性

00:22:58.986 --> 00:23:01.516 A:middle
语义 baseColor 金属材质的

00:22:58.986 --> 00:23:01.516 A:middle
语义 baseColor 金属材质的

00:23:02.346 --> 00:23:04.686 A:middle
粗糙度 碰撞以及

00:23:04.686 --> 00:23:05.996 A:middle
ambientOcclusion 这些我们

00:23:05.996 --> 00:23:06.266 A:middle
在意的东西

00:23:07.066 --> 00:23:08.046 A:middle
并且当我们在属性里

00:23:08.076 --> 00:23:09.306 A:middle
读取到相关的东西 我们将迭代

00:23:09.396 --> 00:23:11.116 A:middle
浏览所有的属性

00:23:11.116 --> 00:23:11.886 A:middle
并检查类型

00:23:12.436 --> 00:23:15.296 A:middle
如果类型是 float 或者

00:23:15.346 --> 00:23:17.486 A:middle
float3 我们就可以假定它是均一的

00:23:17.876 --> 00:23:19.826 A:middle
并且我们也将记录它

00:23:20.706 --> 00:23:22.516 A:middle
不然 如果它是字符串或网址

00:23:22.516 --> 00:23:24.156 A:middle
我们将记录

00:23:24.156 --> 00:23:24.806 A:middle
纹理通道

00:23:25.796 --> 00:23:27.036 A:middle
现在让我们来运行第二个

00:23:27.036 --> 00:23:28.026 A:middle
例子 看看我们可以在我们的

00:23:28.026 --> 00:23:29.846 A:middle
引擎获得何种输出

00:23:35.046 --> 00:23:36.076 A:middle
现在我没有一个赛道

00:23:36.076 --> 00:23:36.966 A:middle
两辆车 现在还有

00:23:36.966 --> 00:23:37.496 A:middle
材质

00:23:38.256 --> 00:23:40.016 A:middle
我们进一步进行扩展

00:23:40.016 --> 00:23:41.176 A:middle
并支持实例化

00:23:46.256 --> 00:23:48.006 A:middle
之前在浏览场景图时

00:23:48.006 --> 00:23:49.296 A:middle
我们只考虑了

00:23:49.346 --> 00:23:49.746 A:middle
网格

00:23:49.896 --> 00:23:51.056 A:middle
现在我们想要考虑所有

00:23:51.056 --> 00:23:52.436 A:middle
在素材控制队列中

00:23:52.436 --> 00:23:53.366 A:middle
的网格

00:23:54.196 --> 00:23:55.436 A:middle
所以我们浏览控制网格

00:23:56.226 --> 00:23:57.246 A:middle
收集所有是 MDLMesh 类型的

00:23:57.246 --> 00:23:59.006 A:middle
对象 然后像之前那样

00:23:59.446 --> 00:24:00.396 A:middle
存储它

00:23:59.446 --> 00:24:00.396 A:middle
存储它

00:24:01.246 --> 00:24:02.336 A:middle
并且 我们还需要

00:24:02.336 --> 00:24:04.566 A:middle
记录所有控制网格

00:24:04.566 --> 00:24:05.236 A:middle
引用的对象

00:24:05.236 --> 00:24:06.756 A:middle
这点我们可以在

00:24:06.756 --> 00:24:07.646 A:middle
实例化属性中找到

00:24:08.216 --> 00:24:11.836 A:middle
然后我们可以按网格区分

00:24:11.836 --> 00:24:14.346 A:middle
实例 得出实例

00:24:14.346 --> 00:24:14.666 A:middle
计数

00:24:15.696 --> 00:24:16.616 A:middle
这样就完成了

00:24:21.146 --> 00:24:22.256 A:middle
现在让我们再运行一下

00:24:22.336 --> 00:24:22.846 A:middle
我们的场景

00:24:23.496 --> 00:24:26.126 A:middle
现在我们有多辆车

00:24:26.126 --> 00:24:27.346 A:middle
我们用实例化对它们进行渲染

00:24:28.146 --> 00:24:28.766 A:middle
交回给你了 Nick

00:24:31.516 --> 00:24:36.026 A:middle
［掌声］

00:24:36.526 --> 00:24:37.586 A:middle
&gt;&gt;接下来 我们要讲一讲

00:24:37.806 --> 00:24:39.486 A:middle
变换动画

00:24:40.106 --> 00:24:43.856 A:middle
变换动画是

00:24:43.856 --> 00:24:46.346 A:middle
随时间改变的变换

00:24:47.776 --> 00:24:49.826 A:middle
现在让我们再考虑一下我们的

00:24:49.826 --> 00:24:51.266 A:middle
场景图

00:24:51.876 --> 00:24:54.556 A:middle
现在 在起点线上我们有

00:24:54.966 --> 00:24:56.866 A:middle
一辆车 现在我想

00:24:56.866 --> 00:24:58.656 A:middle
做这么一个动画

00:24:58.766 --> 00:25:00.866 A:middle
例如在车发动之前

00:24:58.766 --> 00:25:00.866 A:middle
例如在车发动之前

00:25:00.866 --> 00:25:02.006 A:middle
车身稍微摆动

00:25:02.006 --> 00:25:03.826 A:middle
一下 然后车再

00:25:03.826 --> 00:25:04.626 A:middle
开走

00:25:05.266 --> 00:25:06.436 A:middle
为了实现这个效果

00:25:06.436 --> 00:25:07.586 A:middle
我需要在车身节点 D

00:25:07.586 --> 00:25:10.736 A:middle
以及整个对象的

00:25:10.736 --> 00:25:14.956 A:middle
根节点上录制

00:25:14.956 --> 00:25:16.396 A:middle
一些动画数据来把它

00:25:16.396 --> 00:25:18.406 A:middle
移走 也就是节点 B

00:25:18.966 --> 00:25:19.906 A:middle
我将要记录

00:25:19.906 --> 00:25:21.986 A:middle
两个节点的

00:25:21.986 --> 00:25:22.786 A:middle
动画路径

00:25:24.256 --> 00:25:26.476 A:middle
同样有了 Model I/O

00:25:26.476 --> 00:25:27.836 A:middle
这点特别容易做到

00:25:29.116 --> 00:25:31.186 A:middle
和之前一样 我们浏览所有的

00:25:31.186 --> 00:25:32.326 A:middle
对象 寻找

00:25:32.326 --> 00:25:34.826 A:middle
变换组件

00:25:34.826 --> 00:25:36.356 A:middle
当我们找到它们的时候 我们将

00:25:36.356 --> 00:25:36.916 A:middle
对它们进行附加

00:25:37.446 --> 00:25:38.396 A:middle
但是现在我们还需要做

00:25:38.396 --> 00:25:40.356 A:middle
一件事 那就是我们将

00:25:40.516 --> 00:25:42.366 A:middle
询问变换它是否

00:25:42.456 --> 00:25:45.086 A:middle
有键控时间

00:25:45.706 --> 00:25:47.796 A:middle
如果没有键控时间

00:25:48.076 --> 00:25:50.096 A:middle
那么计数为 0 我们

00:25:50.096 --> 00:25:51.076 A:middle
直接使用就行

00:25:51.456 --> 00:25:52.956 A:middle
如果有 1 个键控时间

00:25:53.066 --> 00:25:53.976 A:middle
我将把它看做

00:25:53.976 --> 00:25:54.526 A:middle
恒定

00:25:54.826 --> 00:25:56.726 A:middle
所以我们只需要寻找计数

00:25:56.766 --> 00:25:58.396 A:middle
大于 1 的就行

00:26:01.056 --> 00:26:03.296 A:middle
我们现在要真正使用

00:26:03.526 --> 00:26:04.966 A:middle
Swift 一个非常不同寻常

00:26:04.966 --> 00:26:05.626 A:middle
非常酷的部分

00:26:06.066 --> 00:26:06.736 A:middle
我喜欢这个部分

00:26:06.736 --> 00:26:08.996 A:middle
我们将使用地图

00:26:09.246 --> 00:26:09.736 A:middle
闭合

00:26:10.306 --> 00:26:12.936 A:middle
我们将做的是

00:26:13.116 --> 00:26:14.956 A:middle
根据时间对

00:26:14.956 --> 00:26:17.746 A:middle
动画进行取样

00:26:17.746 --> 00:26:20.136 A:middle
我们将创建

00:26:21.236 --> 00:26:22.496 A:middle
与那些时间对应的

00:26:22.496 --> 00:26:24.446 A:middle
新队列的变换 并将之

00:26:24.446 --> 00:26:24.926 A:middle
附加在我们的缓冲器上

00:26:25.446 --> 00:26:27.306 A:middle
现在把绘图操作

00:26:27.306 --> 00:26:29.176 A:middle
拆开一下

00:26:29.436 --> 00:26:31.076 A:middle
第一行说的是

00:26:31.076 --> 00:26:32.076 A:middle
samplesTimes.map

00:26:32.486 --> 00:26:33.546 A:middle
幻灯片上没有

00:26:33.546 --> 00:26:34.526 A:middle
显示的是 sampleTimes

00:26:34.526 --> 00:26:36.226 A:middle
从哪里来

00:26:36.816 --> 00:26:39.796 A:middle
这是另外一个队列的

00:26:40.416 --> 00:26:42.876 A:middle
keyTimes 你在这里

00:26:42.876 --> 00:26:43.276 A:middle
可以做两件事情

00:26:43.646 --> 00:26:45.286 A:middle
一件事是你让

00:26:45.286 --> 00:26:47.286 A:middle
sampleTimes 队列就是

00:26:47.316 --> 00:26:51.626 A:middle
transform.keyTimes 队列 或者如果

00:26:51.626 --> 00:26:53.646 A:middle
相反你只是想要

00:26:53.646 --> 00:26:55.506 A:middle
艺术家放进文件

00:26:55.506 --> 00:26:57.216 A:middle
中的时间点 例如如果

00:26:57.216 --> 00:26:58.586 A:middle
你想以恒定帧频

00:26:58.586 --> 00:27:00.166 A:middle
对时间进行取样

00:26:58.586 --> 00:27:00.166 A:middle
对时间进行取样

00:27:00.546 --> 00:27:01.556 A:middle
你可以在你希望

00:27:01.556 --> 00:27:03.886 A:middle
的帧频下合成

00:27:04.056 --> 00:27:05.486 A:middle
一队列变换时间

00:27:05.486 --> 00:27:07.226 A:middle
例如 60 帧每秒

00:27:07.886 --> 00:27:09.536 A:middle
所以当你在进行这个绘图

00:27:09.536 --> 00:27:12.096 A:middle
操作的时候 闭合进行了

00:27:12.096 --> 00:27:14.126 A:middle
变换 在对应队列中

00:27:14.126 --> 00:27:16.546 A:middle
相应值的时间下

00:27:16.546 --> 00:27:17.906 A:middle
获取本地

00:27:17.906 --> 00:27:18.236 A:middle
变换

00:27:18.436 --> 00:27:19.936 A:middle
我觉得这特别酷

00:27:21.256 --> 00:27:23.436 A:middle
这是我们已经导出

00:27:23.436 --> 00:27:24.276 A:middle
的数据

00:27:25.466 --> 00:27:27.986 A:middle
它非常直接地

00:27:27.986 --> 00:27:29.336 A:middle
对本地变换动画

00:27:29.336 --> 00:27:30.016 A:middle
进行了编码

00:27:30.906 --> 00:27:34.746 A:middle
最后蒙皮和

00:27:34.746 --> 00:27:35.686 A:middle
角色动画

00:27:36.546 --> 00:27:40.386 A:middle
现在我们将要拿出一辆

00:27:40.386 --> 00:27:42.966 A:middle
小车 它

00:27:42.966 --> 00:27:44.046 A:middle
很明显是一辆卡通车

00:27:44.406 --> 00:27:46.296 A:middle
我们将让它可以

00:27:46.296 --> 00:27:48.756 A:middle
扭动它的鼻子 或者

00:27:48.756 --> 00:27:49.026 A:middle
做其他动画效果

00:27:50.206 --> 00:27:53.686 A:middle
正如我们之前所看到的

00:27:53.686 --> 00:27:55.546 A:middle
网格将有几何结构

00:27:55.656 --> 00:27:56.536 A:middle
以及其他类似的

00:27:56.536 --> 00:27:57.656 A:middle
我们之前谈论过的

00:27:57.656 --> 00:28:00.056 A:middle
缓冲器 但是它还有

00:27:57.656 --> 00:28:00.056 A:middle
缓冲器 但是它还有

00:28:00.056 --> 00:28:02.496 A:middle
一个被嵌入骨架的

00:28:02.496 --> 00:28:02.966 A:middle
新东西

00:28:03.256 --> 00:28:05.216 A:middle
我希望大家可以看到这个小小的

00:28:05.216 --> 00:28:06.036 A:middle
绿色的骨头

00:28:07.036 --> 00:28:08.186 A:middle
它们将被放置在

00:28:08.186 --> 00:28:09.396 A:middle
轮子中 在下面车的

00:28:09.396 --> 00:28:10.476 A:middle
“脊柱”位置也有一些

00:28:11.686 --> 00:28:15.496 A:middle
那些骨头通过

00:28:15.496 --> 00:28:17.876 A:middle
艺术家们的绘画步骤

00:28:17.876 --> 00:28:19.186 A:middle
和顶点绑定

00:28:19.616 --> 00:28:22.786 A:middle
所以左边的有

00:28:23.506 --> 00:28:25.156 A:middle
一根骨头和车的前部

00:28:25.216 --> 00:28:26.646 A:middle
绑定 靠保险杠

00:28:26.646 --> 00:28:27.756 A:middle
还有鼻子承重

00:28:28.166 --> 00:28:29.506 A:middle
然后在右边

00:28:29.826 --> 00:28:32.026 A:middle
我们选择了在车身背部

00:28:32.026 --> 00:28:33.536 A:middle
的一根骨头和

00:28:33.536 --> 00:28:35.086 A:middle
轮子相连 所以当这根

00:28:35.086 --> 00:28:37.746 A:middle
骨头移动时 它将影响到

00:28:37.746 --> 00:28:39.316 A:middle
车身背部的翼片以及

00:28:40.026 --> 00:28:42.156 A:middle
那个轮子

00:28:42.356 --> 00:28:44.776 A:middle
我还需要提一下

00:28:44.776 --> 00:28:46.356 A:middle
这种数据需要

00:28:46.386 --> 00:28:48.686 A:middle
你在你的着色器中多做一点

00:28:48.686 --> 00:28:49.086 A:middle
工作

00:28:49.726 --> 00:28:53.696 A:middle
我们还需要一些信息

00:28:53.696 --> 00:28:54.856 A:middle
为我们之前还没有做过的

00:28:54.856 --> 00:28:55.896 A:middle
发车做准备

00:28:56.516 --> 00:28:59.236 A:middle
特别是 我们有

00:28:59.236 --> 00:29:03.806 A:middle
jointWeights per vertex 以及

00:28:59.236 --> 00:29:03.806 A:middle
jointWeights per vertex 以及

00:29:03.806 --> 00:29:07.326 A:middle
jointIndices 也就是一小

00:29:07.326 --> 00:29:11.076 A:middle
队列指数 我们将向

00:29:11.076 --> 00:29:13.186 A:middle
它们调用和顶点位置

00:29:13.626 --> 00:29:16.226 A:middle
相对应节点的

00:29:16.226 --> 00:29:17.196 A:middle
矩阵调色

00:29:17.676 --> 00:29:21.046 A:middle
如果有两个节点或者骨头

00:29:21.046 --> 00:29:23.426 A:middle
同时作用于一个特定顶点

00:29:23.796 --> 00:29:25.476 A:middle
那么当我进行变换时

00:29:25.476 --> 00:29:27.666 A:middle
那些骨头的指数将

00:29:28.136 --> 00:29:30.076 A:middle
和顶点一起再加上一些重量

00:29:30.076 --> 00:29:34.276 A:middle
当我在着色器中

00:29:34.846 --> 00:29:36.986 A:middle
对它们进行变换时 它们将

00:29:36.986 --> 00:29:39.506 A:middle
全部被结合起来 顶点

00:29:39.506 --> 00:29:41.606 A:middle
将移动到其最后的变形

00:29:41.606 --> 00:29:42.156 A:middle
位置

00:29:44.656 --> 00:29:47.536 A:middle
为了从正在进行的几何结构和

00:29:47.836 --> 00:29:50.146 A:middle
其他变换中

00:29:50.256 --> 00:29:52.846 A:middle
单独编码骨架

00:29:52.846 --> 00:29:54.066 A:middle
我们还需要更多的

00:29:54.066 --> 00:29:54.576 A:middle
信息

00:29:55.146 --> 00:29:57.036 A:middle
那就是表格

00:29:57.036 --> 00:29:57.716 A:middle
底部中的

00:29:57.716 --> 00:29:58.266 A:middle
骨架

00:29:58.266 --> 00:29:59.886 A:middle
我们把它分隔开来

00:30:02.366 --> 00:30:04.656 A:middle
所以和我们之前所做的一样

00:30:04.656 --> 00:30:07.586 A:middle
我们将浏览绘图

00:30:07.586 --> 00:30:09.976 A:middle
然后根据浏览顺序 0 1 2 3

00:30:10.096 --> 00:30:14.816 A:middle
分配指数

00:30:15.036 --> 00:30:16.896 A:middle
我们将对骨架图中的

00:30:16.946 --> 00:30:20.086 A:middle
亲项进行编码

00:30:20.356 --> 00:30:21.906 A:middle
和我们之前对几何图所做的

00:30:21.906 --> 00:30:22.336 A:middle
一样

00:30:22.806 --> 00:30:25.046 A:middle
我不会再细讲

00:30:25.046 --> 00:30:26.576 A:middle
它的工作原理

00:30:26.576 --> 00:30:27.576 A:middle
因为这和之前的

00:30:27.576 --> 00:30:27.926 A:middle
完全一样

00:30:29.156 --> 00:30:32.106 A:middle
现在我们需要对

00:30:32.466 --> 00:30:35.396 A:middle
每一根骨头进行编码

00:30:35.396 --> 00:30:37.886 A:middle
它们会真正影响到顶点

00:30:38.566 --> 00:30:43.486 A:middle
层级中骨头的索引

00:30:43.566 --> 00:30:46.446 A:middle
以及逆绑定

00:30:46.446 --> 00:30:46.826 A:middle
姿势

00:30:47.336 --> 00:30:48.806 A:middle
在之前的幻灯片中

00:30:48.806 --> 00:30:50.316 A:middle
提到着色器的部分有一些

00:30:50.486 --> 00:30:52.766 A:middle
数学运算提到某种

00:30:52.766 --> 00:30:53.716 A:middle
调色矩阵

00:30:54.286 --> 00:30:56.396 A:middle
逆向绑定姿势

00:30:56.396 --> 00:30:58.026 A:middle
将需要你用多一点的

00:30:58.026 --> 00:31:00.236 A:middle
数学运算来帮你把

00:30:58.026 --> 00:31:00.236 A:middle
数学运算来帮你把

00:31:00.236 --> 00:31:02.416 A:middle
顶点放入右侧空间

00:31:02.416 --> 00:31:03.496 A:middle
使之更容易混合

00:31:03.786 --> 00:31:05.336 A:middle
我将让大家看一个

00:31:05.336 --> 00:31:06.496 A:middle
例子 以了解变换的

00:31:06.496 --> 00:31:07.236 A:middle
具体细节

00:31:08.776 --> 00:31:10.056 A:middle
我们将浏览它们中的

00:31:10.056 --> 00:31:11.916 A:middle
每一项 然后把那些

00:31:12.076 --> 00:31:13.436 A:middle
矩阵和指数存储起来

00:31:14.086 --> 00:31:16.026 A:middle
最后 做一个

00:31:16.026 --> 00:31:18.326 A:middle
动画片段 我们将

00:31:18.486 --> 00:31:20.696 A:middle
录制和动画片段中

00:31:20.696 --> 00:31:22.416 A:middle
每根骨头

00:31:22.476 --> 00:31:26.416 A:middle
对应的动画

00:31:26.576 --> 00:31:29.426 A:middle
所以从代码的角度

00:31:29.426 --> 00:31:30.356 A:middle
它和我们之前看到的非常像

00:31:31.246 --> 00:31:32.466 A:middle
我们将浏览对象

00:31:32.466 --> 00:31:34.396 A:middle
找到对象是否有

00:31:34.396 --> 00:31:35.296 A:middle
蒙皮

00:31:36.486 --> 00:31:38.496 A:middle
蒙皮和骨架等

00:31:38.496 --> 00:31:40.256 A:middle
相对应 是在

00:31:40.326 --> 00:31:42.286 A:middle
Model I/O 全新的

00:31:42.766 --> 00:31:44.576 A:middle
MDLSkinDeformerComponent 中编码的

00:31:45.006 --> 00:31:46.826 A:middle
所以如果我们发现一个蒙皮变形器

00:31:46.826 --> 00:31:49.936 A:middle
组件 我们将再次

00:31:49.936 --> 00:31:51.316 A:middle
利用

00:31:51.746 --> 00:31:55.536 A:middle
Swift 地图闭合 利用

00:31:55.536 --> 00:31:57.776 A:middle
Model I/O 从文件中读取

00:31:57.776 --> 00:31:59.796 A:middle
并且存储的

00:31:59.796 --> 00:32:00.176 A:middle
jointBindTransforms

00:31:59.796 --> 00:32:00.176 A:middle
jointBindTransforms

00:32:00.916 --> 00:32:02.546 A:middle
我们将利用这个单指令

00:32:02.546 --> 00:32:05.406 A:middle
倒转来倒置它们

00:32:05.776 --> 00:32:06.646 A:middle
因为数学运算需要

00:32:06.646 --> 00:32:08.346 A:middle
将它存储在一个队列中

00:32:09.036 --> 00:32:12.836 A:middle
然后这里是我们到现在为止

00:32:12.896 --> 00:32:14.146 A:middle
存储的所有数据

00:32:15.496 --> 00:32:17.416 A:middle
我们将调出

00:32:17.416 --> 00:32:19.066 A:middle
骨架数据 逆向绑定

00:32:19.066 --> 00:32:20.856 A:middle
变换和色斑映射

00:32:20.856 --> 00:32:22.786 A:middle
的连接点 以及

00:32:22.786 --> 00:32:24.466 A:middle
骨架亲项指数

00:32:25.466 --> 00:32:30.156 A:middle
我想请 Nicholas

00:32:30.216 --> 00:32:32.576 A:middle
再次上台来向我们展示一下

00:32:32.576 --> 00:32:33.196 A:middle
它现在的样子

00:32:35.516 --> 00:32:39.500 A:middle
［掌声］

00:32:47.506 --> 00:32:48.856 A:middle
&gt;&gt;从我们上次的地方开始 我们

00:32:48.856 --> 00:32:50.336 A:middle
有一个赛道 多辆

00:32:50.336 --> 00:32:51.736 A:middle
汽车使用实例化进行渲染

00:32:52.356 --> 00:32:53.576 A:middle
现在我们再让它

00:32:53.646 --> 00:32:54.836 A:middle
支持动画效果

00:32:55.306 --> 00:32:57.106 A:middle
之前在我们浏览

00:32:57.106 --> 00:32:58.176 A:middle
场景图的时候 我们寻找

00:32:58.176 --> 00:32:59.616 A:middle
任何有变换组件的

00:32:59.616 --> 00:33:00.846 A:middle
对象 然后我们假定它是

00:32:59.616 --> 00:33:00.846 A:middle
对象 然后我们假定它是

00:33:00.846 --> 00:33:01.456 A:middle
恒定的

00:33:02.146 --> 00:33:02.916 A:middle
现在我们希望知道

00:33:02.916 --> 00:33:04.146 A:middle
变换是否会随着时间而改变

00:33:04.146 --> 00:33:05.466 A:middle
找到这个答案的最简单的办法

00:33:05.466 --> 00:33:06.566 A:middle
就是看看

00:33:06.566 --> 00:33:07.996 A:middle
keyTimes.count 是否大于

00:33:07.996 --> 00:33:08.246 A:middle
1

00:33:09.196 --> 00:33:10.796 A:middle
如果是 为了达到

00:33:10.796 --> 00:33:12.856 A:middle
样本的目的 我们将

00:33:13.176 --> 00:33:14.316 A:middle
在特定时间间隙取样

00:33:14.436 --> 00:33:16.756 A:middle
我们对它们进行取样

00:33:16.876 --> 00:33:17.376 A:middle
然后存储

00:33:17.526 --> 00:33:18.626 A:middle
动画就是这样的

00:33:18.656 --> 00:33:19.466 A:middle
现在让我们来运行这个

00:33:19.466 --> 00:33:20.596 A:middle
例子 看看我们的引擎

00:33:20.596 --> 00:33:21.686 A:middle
可以得到哪种输出

00:33:28.046 --> 00:33:29.186 A:middle
大家注意到

00:33:29.246 --> 00:33:30.406 A:middle
前面的车已经发动了

00:33:31.556 --> 00:33:32.926 A:middle
最后我们来

00:33:32.926 --> 00:33:33.706 A:middle
加上蒙皮

00:33:33.706 --> 00:33:34.786 A:middle
现在让我们把 baker 扩展到

00:33:34.786 --> 00:33:35.706 A:middle
支持蒙皮

00:33:38.156 --> 00:33:40.276 A:middle
所以你需要的除了有

00:33:40.276 --> 00:33:41.376 A:middle
网格数据 还有

00:33:41.376 --> 00:33:43.436 A:middle
蒙皮数据

00:33:43.436 --> 00:33:45.186 A:middle
所以我们需要检查

00:33:45.186 --> 00:33:47.276 A:middle
看看 MDLMesh 是否有

00:33:47.276 --> 00:33:48.976 A:middle
和 MDLSkinDeformer 一致的组件

00:33:50.086 --> 00:33:51.906 A:middle
如果有 那么我们

00:33:51.906 --> 00:33:52.936 A:middle
还需要两点额外信息

00:33:52.936 --> 00:33:54.066 A:middle
也就是我们需要知道

00:33:54.166 --> 00:33:55.706 A:middle
骨架如何和蒙皮网格绑定

00:33:55.706 --> 00:33:57.366 A:middle
我们还需要知道

00:33:57.366 --> 00:33:58.106 A:middle
动画数据

00:33:58.286 --> 00:34:00.466 A:middle
所以我们找到了 jointPaths 队列

00:33:58.286 --> 00:34:00.466 A:middle
所以我们找到了 jointPaths 队列

00:34:00.466 --> 00:34:01.646 A:middle
中所有的绑定

00:34:01.646 --> 00:34:02.856 A:middle
骨架连接点

00:34:03.476 --> 00:34:06.516 A:middle
然后我们找到

00:34:06.516 --> 00:34:07.456 A:middle
jointBindTransforms 中的

00:34:07.456 --> 00:34:08.666 A:middle
骨架绑定姿势

00:34:08.666 --> 00:34:11.416 A:middle
现在我们已经知道我们的

00:34:11.416 --> 00:34:12.536 A:middle
骨架长什么样子了 让我们

00:34:12.536 --> 00:34:15.076 A:middle
继续根据时间对

00:34:15.196 --> 00:34:16.676 A:middle
骨架连接点变换进行取样

00:34:16.676 --> 00:34:18.266 A:middle
和我们之前对本地对象

00:34:18.266 --> 00:34:18.906 A:middle
变换所做的一样

00:34:20.076 --> 00:34:21.275 A:middle
我们根据特定的时间间隔

00:34:21.275 --> 00:34:24.106 A:middle
进行取样 存储矩阵

00:34:24.106 --> 00:34:25.956 A:middle
然后我们把它分解为

00:34:25.956 --> 00:34:27.116 A:middle
四元数旋转

00:34:28.335 --> 00:34:30.996 A:middle
翻译 然后把它存储在

00:34:30.996 --> 00:34:31.866 A:middle
动画片段中

00:34:32.956 --> 00:34:33.806 A:middle
现在让我们来运行这个

00:34:33.806 --> 00:34:34.295 A:middle
例子

00:34:47.056 --> 00:34:48.146 A:middle
所以现在我们有了一辆蒙皮汽车

00:34:48.996 --> 00:34:50.335 A:middle
我再总结一下我们所做的

00:34:50.545 --> 00:34:51.476 A:middle
我们用 Model I/O 构建了

00:34:51.516 --> 00:34:52.906 A:middle
一个简单的 baker

00:34:52.906 --> 00:34:54.036 A:middle
它可以导出几何结构和

00:34:54.036 --> 00:34:55.916 A:middle
变换 再加点代码

00:34:55.916 --> 00:34:57.256 A:middle
我们就可以对它进行扩展

00:34:57.256 --> 00:34:58.586 A:middle
使它支持材质

00:34:58.586 --> 00:35:00.206 A:middle
实例化 动画以及

00:34:58.586 --> 00:35:00.206 A:middle
实例化 动画以及

00:35:00.206 --> 00:35:01.156 A:middle
蒙皮动画

00:35:01.896 --> 00:35:03.266 A:middle
这五个例子以及

00:35:03.266 --> 00:35:04.296 A:middle
引擎都放在

00:35:04.336 --> 00:35:05.746 A:middle
这个环节的代码样本中

00:35:05.746 --> 00:35:07.186 A:middle
大家可以根据自己的引擎需求进行

00:35:07.186 --> 00:35:07.376 A:middle
修改

00:35:08.026 --> 00:35:09.726 A:middle
交回给你了 Nick

00:35:10.216 --> 00:35:12.216 A:middle
［掌声］

00:35:12.416 --> 00:35:13.016 A:middle
&gt;&gt; 好的

00:35:14.776 --> 00:35:16.206 A:middle
快速总结一下

00:35:16.906 --> 00:35:19.406 A:middle
我们展示了如何把图案

00:35:19.406 --> 00:35:22.346 A:middle
从最初的素材创作

00:35:22.476 --> 00:35:24.686 A:middle
程序变成 Pixar 的 USD

00:35:24.686 --> 00:35:25.816 A:middle
文件格式

00:35:26.696 --> 00:35:28.916 A:middle
我们运用 Model I/O 将

00:35:28.916 --> 00:35:31.036 A:middle
素材变换为引擎就绪

00:35:31.036 --> 00:35:34.916 A:middle
数据 我们对它们进行编码

00:35:34.916 --> 00:35:36.246 A:middle
然后把它们在光盘中归档

00:35:36.786 --> 00:35:38.766 A:middle
我们利用 Swift 和 Metal

00:35:38.816 --> 00:35:41.036 A:middle
进行了简单的渲染

00:35:41.136 --> 00:35:42.136 A:middle
制作了一个小游戏

00:35:42.706 --> 00:35:44.676 A:middle
我们加载了所有的数据

00:35:45.226 --> 00:35:47.846 A:middle
然后我们将它进行动画化 而且我们绘制了

00:35:47.846 --> 00:35:48.726 A:middle
一些漂亮的画面

00:35:49.626 --> 00:35:52.576 A:middle
那么接下来呢

00:35:52.736 --> 00:35:56.036 A:middle
我会鼓励大家去

00:35:56.036 --> 00:35:58.106 A:middle
看看 Model I/O

00:35:58.316 --> 00:35:59.686 A:middle
内置的其他

00:35:59.686 --> 00:35:59.836 A:middle
设备

00:36:00.356 --> 00:36:01.816 A:middle
我们还有非常多其他工具

00:36:01.986 --> 00:36:04.076 A:middle
可以帮助大家构建

00:36:04.076 --> 00:36:04.926 A:middle
自己的工具

00:36:05.266 --> 00:36:07.086 A:middle
你们自己的适用于管道链的

00:36:07.086 --> 00:36:07.376 A:middle
工具

00:36:08.036 --> 00:36:10.226 A:middle
例如 如果你有一个

00:36:10.226 --> 00:36:12.376 A:middle
由多个对象组成的场景

00:36:12.776 --> 00:36:14.266 A:middle
你可以进行一个光照映射

00:36:14.266 --> 00:36:14.906 A:middle
操作

00:36:15.096 --> 00:36:17.096 A:middle
Model I/O 可以制作多种

00:36:17.096 --> 00:36:18.536 A:middle
射线 它将让光线四处跳动

00:36:19.296 --> 00:36:21.066 A:middle
它会将场景作为

00:36:21.066 --> 00:36:22.296 A:middle
优先事项 并且为你存储

00:36:22.296 --> 00:36:22.706 A:middle
所有的数据

00:36:23.436 --> 00:36:26.656 A:middle
它还有可以做

00:36:26.656 --> 00:36:28.346 A:middle
紫外线解相位的工具 我们有一个

00:36:28.346 --> 00:36:30.516 A:middle
小的飞机 我们可以把它

00:36:30.516 --> 00:36:32.316 A:middle
分为小的逻辑块

00:36:32.366 --> 00:36:33.366 A:middle
这样就易于绘图

00:36:33.976 --> 00:36:38.326 A:middle
它还有其他的操作 例如

00:36:38.426 --> 00:36:40.006 A:middle
这里它可以计算环境光

00:36:40.006 --> 00:36:40.546 A:middle
遮蔽

00:36:40.906 --> 00:36:42.636 A:middle
例如这个小

00:36:42.636 --> 00:36:44.766 A:middle
飞机 我们已经做了光线投射

00:36:44.766 --> 00:36:47.006 A:middle
来计算从外部

00:36:47.006 --> 00:36:48.256 A:middle
表面的可及性并

00:36:48.256 --> 00:36:49.996 A:middle
进行编码

00:36:49.996 --> 00:36:51.706 A:middle
飞机表面有一个信号 那么

00:36:51.706 --> 00:36:54.306 A:middle
你的着色器对你场景中

00:36:54.306 --> 00:36:55.726 A:middle
对象的渲染将会更接近

00:36:56.116 --> 00:36:56.866 A:middle
实景

00:36:56.866 --> 00:37:00.176 A:middle
这里还有一件

00:36:56.866 --> 00:37:00.176 A:middle
这里还有一件

00:37:00.266 --> 00:37:01.246 A:middle
你能做的有意思的事

00:37:01.936 --> 00:37:04.056 A:middle
我们有各种各样

00:37:04.056 --> 00:37:06.156 A:middle
处理 360 度图像的工具

00:37:06.486 --> 00:37:07.936 A:middle
它们对于为 VR 等

00:37:08.056 --> 00:37:09.356 A:middle
制作全景图像

00:37:09.356 --> 00:37:10.206 A:middle
非常有用

00:37:10.916 --> 00:37:13.516 A:middle
在最左边你们

00:37:13.516 --> 00:37:16.546 A:middle
可以看到一张 360 度的图片

00:37:16.546 --> 00:37:17.646 A:middle
它是用你们知道的那种

00:37:17.646 --> 00:37:18.616 A:middle
小相机拍摄的

00:37:19.136 --> 00:37:21.056 A:middle
Model I/O 可以将它转换为

00:37:21.056 --> 00:37:22.396 A:middle
可供硬件使用的立方体地图

00:37:22.586 --> 00:37:24.136 A:middle
它也可以把一个立方体地图

00:37:24.136 --> 00:37:25.136 A:middle
转换回为它另外一种

00:37:25.136 --> 00:37:25.596 A:middle
格式

00:37:25.806 --> 00:37:27.416 A:middle
边上两个

00:37:27.416 --> 00:37:29.056 A:middle
模糊的栏

00:37:29.256 --> 00:37:31.626 A:middle
可以为你预计算

00:37:31.626 --> 00:37:35.646 A:middle
基于实物着色的

00:37:36.246 --> 00:37:36.936 A:middle
辐照度卷积

00:37:37.226 --> 00:37:38.866 A:middle
我们制作了一些

00:37:38.866 --> 00:37:40.276 A:middle
系数可以为

00:37:40.276 --> 00:37:41.276 A:middle
你的着色器所用 这样如果我们

00:37:41.276 --> 00:37:42.816 A:middle
把一个对象放到场景中

00:37:42.816 --> 00:37:43.776 A:middle
它将会找到它合适的

00:37:43.776 --> 00:37:44.516 A:middle
物理位置

00:37:44.906 --> 00:37:46.216 A:middle
它里面有很多

00:37:46.216 --> 00:37:46.806 A:middle
类似的东西

00:37:46.806 --> 00:37:47.966 A:middle
希望大家可以自己去

00:37:47.966 --> 00:37:48.556 A:middle
探索

00:37:49.186 --> 00:37:53.146 A:middle
Nicolas 刚刚也提到

00:37:53.366 --> 00:37:55.346 A:middle
样本在会议的网站上

00:37:55.546 --> 00:37:57.736 A:middle
可以供大家下载

00:37:57.736 --> 00:37:59.746 A:middle
所以希望大家能去用

00:37:59.746 --> 00:38:00.976 A:middle
那个小车的代码 或者找到其他的

00:37:59.746 --> 00:38:00.976 A:middle
那个小车的代码 或者找到其他的

00:38:01.116 --> 00:38:02.166 A:middle
例如那些消失的轮子

00:38:04.466 --> 00:38:05.956 A:middle
另外还有其他的

00:38:05.956 --> 00:38:07.386 A:middle
有意思的环节

00:38:07.386 --> 00:38:08.966 A:middle
大家可以按需要观看 以了解

00:38:08.966 --> 00:38:09.816 A:middle
有关这些话题的更多内容

00:38:10.286 --> 00:38:13.396 A:middle
其他环节有 “介绍 Metal 2”

00:38:13.396 --> 00:38:15.966 A:middle
“SceneKit 的新功能” 还有

00:38:15.966 --> 00:38:18.316 A:middle
一个我想向大家推荐的是去年大会的

00:38:18.316 --> 00:38:19.926 A:middle
“SceneKit 的新功能”

00:38:19.926 --> 00:38:21.856 A:middle
在那里我们详细

00:38:21.856 --> 00:38:23.756 A:middle
介绍了与 USD 的

00:38:23.756 --> 00:38:24.066 A:middle
融合

00:38:24.066 --> 00:38:28.006 A:middle
2015 年的大会也有

00:38:28.146 --> 00:38:30.736 A:middle
介绍 Model I/O 的相关环节

00:38:30.736 --> 00:38:32.376 A:middle
那里我们非常详细地

00:38:32.376 --> 00:38:33.586 A:middle
介绍了各种数据

00:38:33.586 --> 00:38:35.306 A:middle
结构 以及在那些结构上的

00:38:35.306 --> 00:38:36.056 A:middle
操作

00:38:36.626 --> 00:38:37.766 A:middle
那么 就到这里

00:38:38.686 --> 00:38:40.476 A:middle
感谢大家的聆听 希望

00:38:40.476 --> 00:38:40.976 A:middle
你们喜欢

00:38:41.508 --> 00:38:43.508 A:middle
［掌声］
