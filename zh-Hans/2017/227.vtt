WEBVTT

00:00:21.016 --> 00:00:22.806 A:middle
[掌声]

00:00:22.806 --> 00:00:23.406 A:middle
&gt;&gt; 早上好

00:00:27.586 --> 00:00:29.776 A:middle
欢迎来到227会场的主题会议

00:00:29.776 --> 00:00:30.926 A:middle
通过拖放传输数据

00:00:31.556 --> 00:00:33.196 A:middle
我是 Dave Rahardja

00:00:33.196 --> 00:00:34.446 A:middle
今天

00:00:34.446 --> 00:00:35.636 A:middle
我和同事 Tanu 来给大家讲解

00:00:35.636 --> 00:00:36.476 A:middle
她将给大家做演示

00:00:40.406 --> 00:00:41.596 A:middle
如果大家一直在关注

00:00:41.596 --> 00:00:43.106 A:middle
我们的拖放主题会议

00:00:43.106 --> 00:00:44.886 A:middle
那么这张图表

00:00:44.886 --> 00:00:46.146 A:middle
对你来说肯定非常

00:00:46.386 --> 00:00:46.656 A:middle
熟悉

00:00:47.476 --> 00:00:48.886 A:middle
在这次会议中

00:00:48.886 --> 00:00:50.636 A:middle
我们将重点讨论图表上的这一部分

00:00:50.636 --> 00:00:53.026 A:middle
Item Provider

00:00:53.706 --> 00:00:55.236 A:middle
目前 Item Provider

00:00:55.236 --> 00:00:57.246 A:middle
对于使用拖放功能实现

00:00:57.246 --> 00:00:58.966 A:middle
应用之间的数据传输方式来说

00:00:58.966 --> 00:00:59.766 A:middle
是它的关键基础

00:01:00.656 --> 00:01:02.346 A:middle
所以 在这次会议中

00:01:02.346 --> 00:01:05.066 A:middle
我们将覆盖四个有关 Item Provider

00:01:05.066 --> 00:01:05.606 A:middle
的主题

00:01:05.916 --> 00:01:07.016 A:middle
我们要谈的是一些

00:01:07.016 --> 00:01:07.746 A:middle
基础内容

00:01:08.456 --> 00:01:09.716 A:middle
包括统一类型的标识符如何

00:01:09.716 --> 00:01:11.996 A:middle
帮助你的 App

00:01:11.996 --> 00:01:13.556 A:middle
与系统中的

00:01:13.556 --> 00:01:16.066 A:middle
其他 App 更加兼容

00:01:16.836 --> 00:01:18.416 A:middle
我们还会谈到如何

00:01:18.416 --> 00:01:20.606 A:middle
创建模型类  让它们真正能够

00:01:20.606 --> 00:01:21.916 A:middle
与拖放功能进行良好结合

00:01:23.266 --> 00:01:24.086 A:middle
最后 我们将以

00:01:24.086 --> 00:01:25.626 A:middle
一些高端主题作为结束

00:01:25.626 --> 00:01:27.656 A:middle
这些主题可以切实改进

00:01:27.656 --> 00:01:29.166 A:middle
我们行业生态中的

00:01:29.166 --> 00:01:29.686 A:middle
App 状况

00:01:30.906 --> 00:01:31.806 A:middle
现在我们就直奔主题

00:01:34.176 --> 00:01:35.206 A:middle
先聊一聊

00:01:35.206 --> 00:01:36.766 A:middle
NSItemProvider 的基本状况

00:01:37.256 --> 00:01:38.696 A:middle
NSItemProvider 是什么

00:01:39.756 --> 00:01:43.406 A:middle
简单来说 一个 NSItemProvider

00:01:43.406 --> 00:01:44.226 A:middle
就是一个数据承诺

00:01:46.056 --> 00:01:47.916 A:middle
所有数据都是根据需要

00:01:47.916 --> 00:01:50.616 A:middle
通过拖放而完成

00:01:50.616 --> 00:01:50.996 A:middle
异步加载的

00:01:52.506 --> 00:01:54.996 A:middle
NSItemProvider 也可以

00:01:54.996 --> 00:01:57.306 A:middle
为你提供数据传输的

00:01:57.306 --> 00:01:58.906 A:middle
进度和取消操作

00:02:00.326 --> 00:02:01.736 A:middle
它广泛应用于

00:02:01.736 --> 00:02:02.196 A:middle
我们的 API 中

00:02:02.196 --> 00:02:04.676 A:middle
当然 也广泛应用于拖放

00:02:04.676 --> 00:02:06.886 A:middle
和 UIPasteConfiguration 当中

00:02:07.536 --> 00:02:08.686 A:middle
我们已经为 UIPasteboard

00:02:08.735 --> 00:02:10.246 A:middle
新增了 API  这样你就可以

00:02:10.246 --> 00:02:12.126 A:middle
直接使用 NSItemProvider

00:02:15.676 --> 00:02:17.306 A:middle
那么 提供数据或承诺数据

00:02:17.306 --> 00:02:18.516 A:middle
指的是什么呢

00:02:19.796 --> 00:02:21.286 A:middle
向 NSItemProvider 提供数据

00:02:21.286 --> 00:02:23.006 A:middle
其实十分简单

00:02:23.886 --> 00:02:25.356 A:middle
你所要做的就是

00:02:25.356 --> 00:02:27.266 A:middle
创建一个 NSItemProvider

00:02:27.266 --> 00:02:29.136 A:middle
然后 向它传递一个适用的对象

00:02:29.586 --> 00:02:31.126 A:middle
现在 我们有许多

00:02:31.326 --> 00:02:33.036 A:middle
系统提供的分类

00:02:33.036 --> 00:02:35.656 A:middle
例如字符串中的 UIImage

00:02:35.656 --> 00:02:37.466 A:middle
在它的属性字符串里

00:02:37.466 --> 00:02:37.846 A:middle
就可以这样使用

00:02:38.006 --> 00:02:39.246 A:middle
我们现在来看几张幻灯片

00:02:39.246 --> 00:02:40.156 A:middle
看看通过哪些步骤

00:02:40.156 --> 00:02:41.736 A:middle
能让你的分类以同样的方式

00:02:41.736 --> 00:02:41.896 A:middle
运行

00:02:43.576 --> 00:02:46.356 A:middle
只要你提供数据  它就可以

00:02:46.356 --> 00:02:47.546 A:middle
被接收的应用程序获取

00:02:47.546 --> 00:02:49.296 A:middle
获取形式同样也很简单

00:02:49.296 --> 00:02:51.256 A:middle
它只需要从中调用

00:02:51.256 --> 00:02:52.876 A:middle
itemProvider 上的

00:02:52.876 --> 00:02:56.826 A:middle
loadObject 方法就可以

00:02:57.116 --> 00:02:59.956 A:middle
记住  这种数据传输

00:02:59.956 --> 00:03:01.886 A:middle
是异步的  此外

00:02:59.956 --> 00:03:01.886 A:middle
是异步的  此外

00:03:01.886 --> 00:03:03.456 A:middle
你的 CompletionHandler

00:03:03.456 --> 00:03:05.836 A:middle
将在一个非主队列被调用

00:03:06.196 --> 00:03:07.606 A:middle
所以 如果你要使用接收的数据

00:03:07.756 --> 00:03:10.616 A:middle
更新用户界面

00:03:11.246 --> 00:03:12.986 A:middle
请确定在调用 UIKit 方法之前

00:03:12.986 --> 00:03:15.246 A:middle
你已经调度回到

00:03:15.516 --> 00:03:15.956 A:middle
主队列

00:03:15.956 --> 00:03:16.906 A:middle
你会看到  这种情况

00:03:17.006 --> 00:03:18.526 A:middle
会出现好几次

00:03:19.216 --> 00:03:21.376 A:middle
那么 为了让大家知道

00:03:21.376 --> 00:03:23.126 A:middle
操作 NSItemProviders 多么容易

00:03:23.126 --> 00:03:24.576 A:middle
我们先来看一个演示

00:03:24.676 --> 00:03:24.896 A:middle
有请 Tanu

00:03:26.516 --> 00:03:32.776 A:middle
[掌声]

00:03:33.276 --> 00:03:34.346 A:middle
&gt;&gt; 大家早上好

00:03:35.116 --> 00:03:36.436 A:middle
你们刚刚已经听说了拖放功能

00:03:36.436 --> 00:03:38.186 A:middle
和 NSItemProvider

00:03:38.946 --> 00:03:39.866 A:middle
现在 你们可能想了解

00:03:39.866 --> 00:03:41.486 A:middle
如何把它们应用到

00:03:41.486 --> 00:03:42.016 A:middle
自己的 App 中

00:03:42.946 --> 00:03:44.616 A:middle
我是 Tanu Singhal

00:03:44.616 --> 00:03:46.466 A:middle
我将为大家做一个简单的演示

00:03:46.466 --> 00:03:47.806 A:middle
它将帮助你们初步了解

00:03:48.016 --> 00:03:48.946 A:middle
NSItemProvider

00:04:01.556 --> 00:04:03.766 A:middle
现在 我们有一个 App

00:04:03.766 --> 00:04:05.196 A:middle
它里面有我们产品

00:04:05.246 --> 00:04:05.766 A:middle
的客户名单

00:04:05.766 --> 00:04:08.156 A:middle
现在 我刚遇到其他一些人

00:04:08.156 --> 00:04:09.796 A:middle
他们也有兴趣试试

00:04:09.796 --> 00:04:10.646 A:middle
这款产品

00:04:11.156 --> 00:04:12.716 A:middle
所以 我把他们的名字

00:04:12.716 --> 00:04:13.326 A:middle
添加到提醒事项中

00:04:14.506 --> 00:04:16.546 A:middle
如果我能把名字直接拖放到

00:04:16.546 --> 00:04:19.305 A:middle
我的 App 里 那就太好了

00:04:19.815 --> 00:04:20.836 A:middle
那我们应该怎么操作呢

00:04:22.005 --> 00:04:22.736 A:middle
我们来看一下

00:04:22.736 --> 00:04:24.316 A:middle
这个联系人 App 使用的

00:04:24.316 --> 00:04:25.766 A:middle
的 TableViewController

00:04:26.556 --> 00:04:28.716 A:middle
在我开始输入之前

00:04:28.716 --> 00:04:30.496 A:middle
我希望你们知道

00:04:30.496 --> 00:04:31.846 A:middle
我们已经把这个示例代码

00:04:31.846 --> 00:04:32.766 A:middle
放在了开发者网站上

00:04:33.166 --> 00:04:34.316 A:middle
所以大家不用担心

00:04:34.316 --> 00:04:35.716 A:middle
不需要现在就把所有代码

00:04:35.716 --> 00:04:36.166 A:middle
都抄下来

00:04:36.956 --> 00:04:41.096 A:middle
在 TableViewController 里 我要

00:04:41.246 --> 00:04:42.686 A:middle
添加一个 TableViewDropDelegate

00:04:44.036 --> 00:04:45.616 A:middle
还要对这个委托进行设置

00:04:45.726 --> 00:04:49.516 A:middle
大家可能已经在此前的

00:04:49.516 --> 00:04:51.516 A:middle
会议里听到过

00:04:51.516 --> 00:04:52.356 A:middle
TableViewDropDelegate了

00:04:53.046 --> 00:04:54.956 A:middle
如果没有听说过的话

00:04:54.956 --> 00:04:55.316 A:middle
也不用担心

00:04:55.666 --> 00:04:57.636 A:middle
因为我们现在只需要

00:04:57.636 --> 00:04:59.416 A:middle
执行一种方法  名叫

00:04:59.416 --> 00:05:00.956 A:middle
TableView performDropWith

00:04:59.416 --> 00:05:00.956 A:middle
TableView performDropWith

00:05:00.956 --> 00:05:01.636 A:middle
coordinator

00:05:02.196 --> 00:05:05.456 A:middle
在这个方法里

00:05:05.456 --> 00:05:08.206 A:middle
我会对 ItemProvider

00:05:08.206 --> 00:05:09.126 A:middle
提供的拖动项进行迭代

00:05:09.496 --> 00:05:10.726 A:middle
对不起 应该是协调器提供的

00:05:10.726 --> 00:05:11.396 A:middle
拖动项

00:05:11.856 --> 00:05:15.536 A:middle
现在 每个拖动项都有自己的

00:05:15.536 --> 00:05:16.426 A:middle
itemProvider

00:05:16.426 --> 00:05:18.796 A:middle
我们可以测试一下

00:05:18.956 --> 00:05:20.786 A:middle
itemProvider 是否可以加载

00:05:20.786 --> 00:05:21.556 A:middle
某一具体类型的对象

00:05:22.466 --> 00:05:23.646 A:middle
那么 我就来测试

00:05:23.646 --> 00:05:25.576 A:middle
itemProvider 是否可以加载字符串

00:05:26.256 --> 00:05:27.696 A:middle
这样的话  我将调用

00:05:27.696 --> 00:05:29.216 A:middle
canLoadObject 方法

00:05:30.246 --> 00:05:32.836 A:middle
如果它可以加载

00:05:32.836 --> 00:05:34.506 A:middle
那我就调用 loadObject 方法

00:05:34.636 --> 00:05:36.796 A:middle
然后 这个 loadObject 方法的

00:05:36.796 --> 00:05:39.086 A:middle
completionHandler 将会

00:05:39.086 --> 00:05:40.866 A:middle
给我一个对象 也就是字符串

00:05:40.866 --> 00:05:43.146 A:middle
这样我就可以用它来更新

00:05:43.146 --> 00:05:45.226 A:middle
我的数据模型以及

00:05:45.226 --> 00:05:45.476 A:middle
我的用户界面

00:05:46.416 --> 00:05:50.206 A:middle
需要注意的是

00:05:50.206 --> 00:05:51.836 A:middle
completionHandler 位于

00:05:51.836 --> 00:05:52.756 A:middle
后台线程上

00:05:53.496 --> 00:05:55.026 A:middle
因此 如果你想在你的用户界面上

00:05:55.026 --> 00:05:56.456 A:middle
进行任何更改

00:05:56.456 --> 00:05:57.756 A:middle
你需要回到主线程上

00:05:57.756 --> 00:05:58.986 A:middle
然后再做这样一些

00:05:59.026 --> 00:05:59.516 A:middle
更改

00:06:00.316 --> 00:06:03.886 A:middle
那么 我先来调度我的

00:06:03.886 --> 00:06:04.356 A:middle
主队列

00:06:05.226 --> 00:06:06.606 A:middle
在主线程中 我将

00:06:06.976 --> 00:06:09.226 A:middle
使用字符串对象

00:06:09.226 --> 00:06:10.726 A:middle
把它插入到 TableView 中

00:06:11.936 --> 00:06:13.536 A:middle
这个代码现在可以运行了

00:06:17.656 --> 00:06:19.116 A:middle
再稍等一下

00:06:19.816 --> 00:06:22.646 A:middle
这一次 我可以把一个人的名字

00:06:22.646 --> 00:06:24.746 A:middle
从提醒事项拖出来放到

00:06:24.746 --> 00:06:25.886 A:middle
我的 App 里了

00:06:31.386 --> 00:06:33.466 A:middle
canLoadObject 和 LoadObject 方法

00:06:33.466 --> 00:06:35.116 A:middle
同样可以应用于

00:06:35.166 --> 00:06:36.976 A:middle
其他的系统类型 例如

00:06:36.976 --> 00:06:38.486 A:middle
带属性的字符串 URL

00:06:38.606 --> 00:06:40.116 A:middle
图像  甚至是颜色

00:06:40.196 --> 00:06:42.126 A:middle
那么 现在大家已经看到

00:06:42.186 --> 00:06:44.256 A:middle
在 itemProvider 里处理

00:06:44.256 --> 00:06:46.566 A:middle
系统对象是有多么简单直接

00:06:46.566 --> 00:06:48.616 A:middle
我建议各位都去

00:06:48.686 --> 00:06:50.806 A:middle
尝试一下这些

00:06:50.806 --> 00:06:51.266 A:middle
API

00:06:51.786 --> 00:06:53.556 A:middle
接下来 Dave 会讲解

00:06:53.556 --> 00:06:54.816 A:middle
进度与取消

00:06:58.516 --> 00:07:01.616 A:middle
[掌声]

00:06:58.516 --> 00:07:01.616 A:middle
[掌声]

00:07:02.116 --> 00:07:02.906 A:middle
&gt;&gt; 谢谢 Tanu

00:07:06.736 --> 00:07:08.636 A:middle
进度与取消  涉及到关于

00:07:08.636 --> 00:07:10.196 A:middle
如何在应用里使用 NSItemProviders

00:07:10.196 --> 00:07:10.966 A:middle
的基础问题

00:07:11.196 --> 00:07:12.116 A:middle
其实十分简单

00:07:12.866 --> 00:07:13.936 A:middle
那我们就来谈谈进度

00:07:13.936 --> 00:07:14.676 A:middle
以及取消

00:07:16.096 --> 00:07:18.056 A:middle
当你使用 NSItemProviders

00:07:18.096 --> 00:07:20.936 A:middle
检索数据时

00:07:20.936 --> 00:07:22.926 A:middle
我们会向你返回一个进度对象

00:07:23.536 --> 00:07:25.346 A:middle
通过它 你就可以在数据传输时

00:07:25.346 --> 00:07:27.056 A:middle
跟踪传输进度

00:07:27.276 --> 00:07:30.436 A:middle
这个进度对象

00:07:30.436 --> 00:07:31.596 A:middle
包含了两个有趣的属性

00:07:31.596 --> 00:07:32.726 A:middle
你可能想了解一下

00:07:33.556 --> 00:07:34.676 A:middle
第一个属性

00:07:34.676 --> 00:07:36.386 A:middle
是 fractionCompleted 属性

00:07:36.696 --> 00:07:38.306 A:middle
它的值为0到1

00:07:38.306 --> 00:07:40.116 A:middle
它会告诉你目前数据的

00:07:40.116 --> 00:07:40.706 A:middle
传输量已经有多少

00:07:41.446 --> 00:07:44.156 A:middle
第二个是 isFinished 属性

00:07:44.156 --> 00:07:46.196 A:middle
它会告诉你

00:07:46.196 --> 00:07:47.156 A:middle
数据传输已经完成

00:07:47.156 --> 00:07:48.686 A:middle
以及传输结果

00:07:48.686 --> 00:07:49.456 A:middle
是否成功

00:07:51.286 --> 00:07:53.126 A:middle
你可以用键值观察

00:07:53.126 --> 00:07:55.936 A:middle
来查看这两个属性

00:07:56.196 --> 00:07:58.986 A:middle
并相应地更新你的用户界面

00:07:59.396 --> 00:08:00.896 A:middle
例如设置自己的

00:07:59.396 --> 00:08:00.896 A:middle
例如设置自己的

00:08:00.936 --> 00:08:02.276 A:middle
进度指示器和

00:08:02.276 --> 00:08:03.966 A:middle
取消按钮

00:08:05.296 --> 00:08:07.476 A:middle
此外 在进度对象中有一个

00:08:07.476 --> 00:08:09.006 A:middle
取消方法

00:08:09.006 --> 00:08:10.286 A:middle
它可以立即取消

00:08:10.286 --> 00:08:11.206 A:middle
数据传输

00:08:11.716 --> 00:08:14.536 A:middle
当你在返回进度对象上

00:08:14.746 --> 00:08:16.206 A:middle
调用取消方法时

00:08:16.816 --> 00:08:18.266 A:middle
你的接收应用

00:08:18.266 --> 00:08:20.306 A:middle
会在 completionHandler 上

00:08:20.306 --> 00:08:22.156 A:middle
接收到一个有错误的回调函数

00:08:22.196 --> 00:08:23.926 A:middle
而不论

00:08:23.926 --> 00:08:24.936 A:middle
源应用程序是否

00:08:24.936 --> 00:08:26.806 A:middle
已经取消

00:08:27.086 --> 00:08:27.696 A:middle
其数据提供行为

00:08:30.766 --> 00:08:32.956 A:middle
你每一次提出加载请求

00:08:32.956 --> 00:08:33.876 A:middle
都会获得一个进度对象

00:08:34.436 --> 00:08:36.056 A:middle
不过 你也可以从 UIDropSession

00:08:36.056 --> 00:08:37.736 A:middle
获取一个整体进度对象

00:08:37.736 --> 00:08:39.916 A:middle
以便监控和取消

00:08:39.916 --> 00:08:42.285 A:middle
该进度中

00:08:42.285 --> 00:08:44.756 A:middle
所有剩余的

00:08:44.806 --> 00:08:46.126 A:middle
数据传输任务

00:08:46.126 --> 00:08:49.716 A:middle
好 既然我们已经讲过了

00:08:49.716 --> 00:08:51.596 A:middle
基础知识  那么我们再来谈一谈

00:08:51.596 --> 00:08:53.156 A:middle
兼容性的最大化

00:08:53.656 --> 00:08:57.506 A:middle
大家都希望自己的应用

00:08:57.786 --> 00:08:59.486 A:middle
可以尽可能向系统里的

00:08:59.486 --> 00:09:01.276 A:middle
其他更多的应用程序

00:08:59.486 --> 00:09:01.276 A:middle
其他更多的应用程序

00:09:01.276 --> 00:09:01.696 A:middle
提供数据

00:09:02.886 --> 00:09:05.466 A:middle
同时也从尽可能多的

00:09:05.466 --> 00:09:06.836 A:middle
应用程序里接收到点滴汇集的

00:09:06.836 --> 00:09:07.046 A:middle
数据

00:09:07.896 --> 00:09:10.836 A:middle
理解兼容性的最大化途径

00:09:10.836 --> 00:09:13.346 A:middle
关键在于理解

00:09:13.346 --> 00:09:15.136 A:middle
同一类型的

00:09:15.136 --> 00:09:15.826 A:middle
标识符

00:09:16.936 --> 00:09:18.306 A:middle
那么我扼要重述一下

00:09:19.466 --> 00:09:22.466 A:middle
一个 NSItemProvider 代表

00:09:22.466 --> 00:09:24.356 A:middle
用户在不同类之间

00:09:24.356 --> 00:09:25.986 A:middle
拖动的项目

00:09:27.006 --> 00:09:29.186 A:middle
但是 你可以给

00:09:29.186 --> 00:09:30.376 A:middle
用户拖动的

00:09:30.376 --> 00:09:32.106 A:middle
每一个项目

00:09:32.106 --> 00:09:33.446 A:middle
设置多种表示方法

00:09:33.446 --> 00:09:35.596 A:middle
我给大家举个例子

00:09:36.666 --> 00:09:37.816 A:middle
比如说你准备编写一个

00:09:37.816 --> 00:09:39.476 A:middle
矢量绘图程序

00:09:40.106 --> 00:09:41.496 A:middle
你可以提供本地文件格式

00:09:41.496 --> 00:09:43.816 A:middle
以便让你拖动的项目

00:09:43.816 --> 00:09:44.766 A:middle
保持最佳质量

00:09:46.126 --> 00:09:47.546 A:middle
但事实上 你也可能会

00:09:47.546 --> 00:09:51.056 A:middle
将其转换为 PDF PNG

00:09:51.056 --> 00:09:53.176 A:middle
甚至 JPG 格式  这样你就可以

00:09:53.176 --> 00:09:55.036 A:middle
将这个项目拖到各种

00:09:55.036 --> 00:09:55.746 A:middle
目标应用当中

00:09:56.016 --> 00:09:59.386 A:middle
统一类型标识符可以

00:09:59.386 --> 00:10:01.666 A:middle
让你给这些表示方法

00:09:59.386 --> 00:10:01.666 A:middle
让你给这些表示方法

00:10:01.796 --> 00:10:02.786 A:middle
加上特殊字符串的标记

00:10:02.786 --> 00:10:05.456 A:middle
以便识别出你将要

00:10:05.456 --> 00:10:07.976 A:middle
拖动的数据类型

00:10:09.576 --> 00:10:11.046 A:middle
对于本地文件格式

00:10:11.046 --> 00:10:12.256 A:middle
你可以自定义它的字符串

00:10:12.256 --> 00:10:12.766 A:middle
例如

00:10:12.766 --> 00:10:14.536 A:middle
com.yourcompany.vector-drawing

00:10:15.786 --> 00:10:17.986 A:middle
而对于一些常见类型

00:10:18.016 --> 00:10:21.326 A:middle
例如 PDF 和 PNG 你可以

00:10:21.416 --> 00:10:22.976 A:middle
使用 MobileCoreServices 里

00:10:22.976 --> 00:10:28.206 A:middle
的定义符号来标记它们

00:10:28.416 --> 00:10:30.186 A:middle
现在看来  真正起作用的是精准顺序

00:10:30.896 --> 00:10:32.776 A:middle
你的各种表示方法

00:10:32.876 --> 00:10:35.086 A:middle
它们的登记顺序

00:10:35.156 --> 00:10:36.746 A:middle
应该和你准备向目标提供的

00:10:36.746 --> 00:10:38.986 A:middle
质量要求顺序

00:10:38.986 --> 00:10:40.446 A:middle
相互一致

00:10:41.266 --> 00:10:42.766 A:middle
通常情况下 最高精准度

00:10:42.766 --> 00:10:43.916 A:middle
可以是你的内部数据

00:10:43.916 --> 00:10:44.846 A:middle
表示类型

00:10:45.196 --> 00:10:47.886 A:middle
紧接着的 是下一个高精准度的

00:10:47.886 --> 00:10:49.926 A:middle
普通类型

00:10:49.926 --> 00:10:51.426 A:middle
以此类推

00:10:52.016 --> 00:10:55.176 A:middle
现在  有一个小提示需要大家记住

00:10:55.176 --> 00:10:57.046 A:middle
当你使用类型标识符

00:10:57.046 --> 00:10:59.336 A:middle
来记录自己的表示方法时

00:10:59.856 --> 00:11:03.216 A:middle
要有各种同类型的标识符

00:10:59.856 --> 00:11:03.216 A:middle
要有各种同类型的标识符

00:11:03.216 --> 00:11:04.926 A:middle
它们应当与各种抽象类型

00:11:04.926 --> 00:11:06.356 A:middle
相匹配

00:11:06.536 --> 00:11:09.626 A:middle
例如数据  纯文本

00:11:09.656 --> 00:11:10.096 A:middle
或者图像

00:11:11.516 --> 00:11:12.926 A:middle
不要使用这些方式

00:11:13.786 --> 00:11:16.916 A:middle
而是要使用具体数据类型

00:11:17.406 --> 00:11:18.906 A:middle
它们能帮助你的数据使用者

00:11:18.906 --> 00:11:21.476 A:middle
解译你将要

00:11:21.476 --> 00:11:22.486 A:middle
发送给他们的

00:11:22.486 --> 00:11:22.716 A:middle
字节

00:11:23.736 --> 00:11:25.226 A:middle
那么 我们举个例子

00:11:25.226 --> 00:11:26.926 A:middle
使用 UTF-8 编码的纯文本

00:11:27.156 --> 00:11:28.236 A:middle
而不是纯文本

00:11:28.946 --> 00:11:30.556 A:middle
或者 也可以用 .png 代替

00:11:30.556 --> 00:11:32.516 A:middle
“图像” 这样接收器就可以

00:11:32.516 --> 00:11:33.386 A:middle
解译你的数据

00:11:35.716 --> 00:11:37.436 A:middle
当然 对于大家个人使用的类型标识符

00:11:37.436 --> 00:11:38.616 A:middle
你也可以自由地

00:11:38.616 --> 00:11:40.326 A:middle
界定数据类型和

00:11:40.326 --> 00:11:40.996 A:middle
字节布局

00:11:43.576 --> 00:11:46.596 A:middle
那么 大家已经看到

00:11:46.596 --> 00:11:48.536 A:middle
这些多重表示方法

00:11:48.536 --> 00:11:50.196 A:middle
如何帮助你实现兼容性的最大化

00:11:50.906 --> 00:11:52.396 A:middle
但是你并没有看见

00:11:52.536 --> 00:11:54.416 A:middle
这些类型标识符里有哪一种被用于

00:11:54.416 --> 00:11:56.016 A:middle
我们起初提供的创建 NSItemProviders 的

00:11:56.076 --> 00:11:58.126 A:middle
示例代码中

00:11:58.446 --> 00:11:59.636 A:middle
那么 这是怎样运行起来的呢

00:12:01.376 --> 00:12:04.196 A:middle
这就是我们要讨论的

00:12:04.196 --> 00:12:05.986 A:middle
创建模型分类

00:12:05.986 --> 00:12:07.496 A:middle
它们利用这两种

00:12:07.496 --> 00:12:08.786 A:middle
多重表示的潜能

00:12:08.786 --> 00:12:09.566 A:middle
来实现兼容

00:12:10.416 --> 00:12:12.006 A:middle
还有  通过使用对象来实现

00:12:12.006 --> 00:12:13.516 A:middle
itemProviders 初始化

00:12:13.516 --> 00:12:14.346 A:middle
的简易性

00:12:15.266 --> 00:12:19.366 A:middle
为了创建可以跟拖放功能

00:12:19.366 --> 00:12:21.246 A:middle
良好结合的模型分类

00:12:21.366 --> 00:12:23.676 A:middle
我们将要谈论两种协议

00:12:24.276 --> 00:12:26.466 A:middle
它们会帮助你做到

00:12:26.466 --> 00:12:26.696 A:middle
这一点

00:12:27.396 --> 00:12:29.556 A:middle
NSItemProviderReading 和

00:12:29.556 --> 00:12:30.806 A:middle
NSItemProviderWriting

00:12:32.036 --> 00:12:32.966 A:middle
我们先来谈谈

00:12:32.966 --> 00:12:33.716 A:middle
编写协议

00:12:34.756 --> 00:12:36.946 A:middle
NSItemProviderWriting

00:12:36.946 --> 00:12:39.546 A:middle
从你的模型对象中输出数据

00:12:40.256 --> 00:12:43.246 A:middle
而 NSItemProviderReading 则输入数据

00:12:43.246 --> 00:12:45.406 A:middle
并且从一种表示方式中

00:12:45.816 --> 00:12:47.226 A:middle
创建一个模型对象

00:12:47.776 --> 00:12:52.336 A:middle
通过接受这些协议

00:12:52.666 --> 00:12:54.716 A:middle
你可以使用自己的模型对象

00:12:54.716 --> 00:12:56.836 A:middle
而不是UI代码

00:12:56.836 --> 00:12:58.446 A:middle
来保证你的模型对象

00:12:58.446 --> 00:13:02.546 A:middle
与多重表示方法这两者间的

00:12:58.446 --> 00:13:02.546 A:middle
与多重表示方法这两者间的

00:13:04.236 --> 00:13:04.706 A:middle
转换

00:13:05.046 --> 00:13:06.216 A:middle
那么 我们一起看一下

00:13:06.216 --> 00:13:07.326 A:middle
NSItemProviderWriting

00:13:07.446 --> 00:13:10.796 A:middle
这就是它的样子

00:13:11.806 --> 00:13:13.476 A:middle
要想遵循这个协议

00:13:13.476 --> 00:13:15.766 A:middle
你只需运行两个对象

00:13:15.766 --> 00:13:16.476 A:middle
就可以了

00:13:17.356 --> 00:13:18.796 A:middle
第一个就是

00:13:18.796 --> 00:13:21.036 A:middle
writableTypeIdentifiersForItemProvider

00:13:21.036 --> 00:13:22.236 A:middle
属性

00:13:23.046 --> 00:13:24.696 A:middle
这是你可以

00:13:24.696 --> 00:13:26.516 A:middle
按照精准顺序输出的

00:13:27.116 --> 00:13:28.046 A:middle
类型标识符列表

00:13:28.466 --> 00:13:29.736 A:middle
首先是最高精准度

00:13:30.276 --> 00:13:33.646 A:middle
然后 是一种 loadData 方法

00:13:34.706 --> 00:13:35.986 A:middle
它将使用

00:13:35.986 --> 00:13:37.056 A:middle
其他应用已经

00:13:37.056 --> 00:13:38.286 A:middle
请求过的

00:13:38.336 --> 00:13:39.186 A:middle
类型标识符

00:13:39.266 --> 00:13:40.506 A:middle
这将会调用一个

00:13:40.756 --> 00:13:43.216 A:middle
completionHandler 以及

00:13:43.216 --> 00:13:44.256 A:middle
你所提供的数据  这数据要么

00:13:44.256 --> 00:13:47.566 A:middle
可以使用  要么有错误

00:13:47.766 --> 00:13:49.266 A:middle
通过执行这个协议

00:13:49.716 --> 00:13:52.746 A:middle
UI代码可以变成这样

00:13:54.296 --> 00:13:56.526 A:middle
而我们的框架代码

00:13:56.526 --> 00:13:58.626 A:middle
同时也会为你做出类似的事

00:13:59.136 --> 00:14:03.606 A:middle
好了

00:13:59.136 --> 00:14:03.606 A:middle
好了

00:14:03.776 --> 00:14:05.236 A:middle
我们来看一下

00:14:05.236 --> 00:14:05.636 A:middle
读取协议

00:14:06.036 --> 00:14:07.476 A:middle
当然 读取协议

00:14:07.476 --> 00:14:08.896 A:middle
是问题的另一

00:14:08.896 --> 00:14:09.126 A:middle
方面

00:14:09.716 --> 00:14:13.906 A:middle
它也有两样事情  需要你来

00:14:13.906 --> 00:14:14.556 A:middle
执行

00:14:15.436 --> 00:14:17.126 A:middle
第一个是

00:14:17.126 --> 00:14:19.756 A:middle
按照精准度排序的

00:14:19.756 --> 00:14:20.866 A:middle
可读类型标识符的列表

00:14:21.256 --> 00:14:23.386 A:middle
第二个是

00:14:23.386 --> 00:14:26.306 A:middle
初始化程序

00:14:26.306 --> 00:14:28.676 A:middle
它使用一个 NS 数据块  NS 数据对象

00:14:29.336 --> 00:14:31.316 A:middle
这个对象应是被用来

00:14:32.306 --> 00:14:33.586 A:middle
初始化你的

00:14:33.636 --> 00:14:33.976 A:middle
对象实例

00:14:39.046 --> 00:14:40.526 A:middle
当你执行这项协议时

00:14:40.966 --> 00:14:42.736 A:middle
UI 代码会变成这样

00:14:42.876 --> 00:14:43.866 A:middle
一个 canLoadObject

00:14:44.636 --> 00:14:45.736 A:middle
你可以将它传输到你的

00:14:45.736 --> 00:14:46.566 A:middle
矢量绘图对象上

00:14:47.586 --> 00:14:48.936 A:middle
当你调用 loadObject 时

00:14:48.936 --> 00:14:51.406 A:middle
我们的框架代码

00:14:51.406 --> 00:14:53.916 A:middle
将会匹配来自

00:14:53.996 --> 00:14:55.286 A:middle
提供方和使用方的

00:14:55.286 --> 00:14:56.486 A:middle
两列类型标识符

00:14:56.996 --> 00:14:59.306 A:middle
为了寻找最佳匹配

00:14:59.306 --> 00:15:00.886 A:middle
以期保证能够使用

00:14:59.306 --> 00:15:00.886 A:middle
以期保证能够使用

00:15:00.886 --> 00:15:02.116 A:middle
最高质量的信息

00:15:02.116 --> 00:15:03.046 A:middle
来创建你的对象实例

00:15:04.446 --> 00:15:07.096 A:middle
简而言之 为了创建

00:15:07.096 --> 00:15:08.846 A:middle
能与拖放功能良好结合的

00:15:08.846 --> 00:15:10.926 A:middle
模型分类  你应该创建

00:15:11.106 --> 00:15:13.646 A:middle
这些分类应该遵循

00:15:13.696 --> 00:15:15.886 A:middle
NSItemProvider 读取和

00:15:15.886 --> 00:15:16.846 A:middle
编写协议

00:15:17.816 --> 00:15:18.976 A:middle
因为这些都是 Objective-C

00:15:18.976 --> 00:15:20.916 A:middle
协议 你的模型分类

00:15:20.916 --> 00:15:22.306 A:middle
应该也是从

00:15:22.306 --> 00:15:22.866 A:middle
NSObject 承继而来

00:15:23.286 --> 00:15:25.886 A:middle
当你这样操作的时候

00:15:25.886 --> 00:15:27.486 A:middle
你可以在任何支持

00:15:27.486 --> 00:15:29.556 A:middle
NSItemProvider 的程序里

00:15:29.556 --> 00:15:31.886 A:middle
使用你的分类和对象

00:15:32.006 --> 00:15:34.526 A:middle
包括拖放  UIPasteConfiguration 以及

00:15:34.526 --> 00:15:35.826 A:middle
新增了API的

00:15:36.176 --> 00:15:37.026 A:middle
UIPasteboardUIPasteboard

00:15:38.406 --> 00:15:39.726 A:middle
因此 为了向大家展示

00:15:39.726 --> 00:15:41.496 A:middle
如何在代码中实现这一点

00:15:41.746 --> 00:15:42.556 A:middle
我将有请 Tanu 再次进行演示

00:15:45.516 --> 00:15:48.576 A:middle
[掌声]

00:15:49.076 --> 00:15:49.806 A:middle
&gt;&gt;  大家好  我又来了

00:15:50.776 --> 00:15:52.296 A:middle
在上一个演示中 我们了解到

00:15:52.296 --> 00:15:54.296 A:middle
如何加载简单的系统对象

00:15:54.296 --> 00:15:54.926 A:middle
比如字符串

00:15:55.606 --> 00:15:57.966 A:middle
现在 我们来看看

00:15:57.966 --> 00:15:59.886 A:middle
怎样把一张复杂的名片

00:15:59.886 --> 00:16:02.176 A:middle
从联系人 App 拖到

00:15:59.886 --> 00:16:02.176 A:middle
从联系人 App 拖到

00:16:02.176 --> 00:16:02.916 A:middle
我们自己的 App 里

00:16:07.626 --> 00:16:09.756 A:middle
为了实现这个操作 我已经创建了一个分类

00:16:10.186 --> 00:16:11.376 A:middle
叫作 ContactCard

00:16:12.266 --> 00:16:13.736 A:middle
它包含联系人的姓名

00:16:13.736 --> 00:16:15.436 A:middle
电话号码以及照片

00:16:15.436 --> 00:16:18.486 A:middle
现在 我将回到

00:16:18.486 --> 00:16:20.016 A:middle
TableViewController

00:16:20.296 --> 00:16:22.076 A:middle
这是我们之前运行的

00:16:22.076 --> 00:16:23.586 A:middle
performDrop方法

00:16:24.756 --> 00:16:26.716 A:middle
我们上次演示的是

00:16:26.716 --> 00:16:27.556 A:middle
加载字符串

00:16:28.186 --> 00:16:30.336 A:middle
而这次 我们想要

00:16:30.336 --> 00:16:30.736 A:middle
加载一张联系人名片

00:16:31.686 --> 00:16:33.496 A:middle
所以 我将用 ContactCard

00:16:33.576 --> 00:16:35.806 A:middle
代替所有 NSString 中的实例

00:16:40.196 --> 00:16:41.596 A:middle
因为我们请求的是

00:16:41.596 --> 00:16:43.166 A:middle
一张联系人名片

00:16:43.166 --> 00:16:44.896 A:middle
所以 completionHandler 将会直接

00:16:44.896 --> 00:16:46.706 A:middle
给我一个联系人名片对象

00:16:46.706 --> 00:16:49.286 A:middle
我就可以把它

00:16:49.286 --> 00:16:50.276 A:middle
插入到我的 TableView 里

00:16:50.276 --> 00:16:52.926 A:middle
那么 这个本来是应该奏效

00:16:52.926 --> 00:16:53.256 A:middle
对不对

00:16:53.966 --> 00:16:55.376 A:middle
但是现在出现了错误

00:16:55.466 --> 00:16:57.336 A:middle
原因在于

00:16:57.336 --> 00:16:59.066 A:middle
NSItemProvider 没有识别出

00:16:59.066 --> 00:17:00.896 A:middle
我的 ContactCard 分类

00:16:59.066 --> 00:17:00.896 A:middle
我的 ContactCard 分类

00:17:01.356 --> 00:17:03.326 A:middle
所以 我们需要再做

00:17:03.326 --> 00:17:04.195 A:middle
一小点工作来

00:17:04.195 --> 00:17:05.386 A:middle
达到 NSItemProvider 的要求

00:17:05.445 --> 00:17:08.596 A:middle
我们再看看

00:17:08.596 --> 00:17:09.126 A:middle
ContactCard 分类

00:17:09.126 --> 00:17:12.086 A:middle
我在这里将要执行

00:17:12.146 --> 00:17:14.016 A:middle
NSItemProviderReading

00:17:14.016 --> 00:17:14.576 A:middle
协议

00:17:15.276 --> 00:17:16.136 A:middle
这个操作将会告诉

00:17:16.136 --> 00:17:18.455 A:middle
NSItemProvider  我可以

00:17:18.455 --> 00:17:19.736 A:middle
读取它提供的数据

00:17:21.215 --> 00:17:24.056 A:middle
现在 我需要指定我可以

00:17:24.215 --> 00:17:26.026 A:middle
读取的标识符类别

00:17:26.506 --> 00:17:29.306 A:middle
我的 ContactCard 分类

00:17:29.306 --> 00:17:31.626 A:middle
要么可读取 vCard

00:17:31.686 --> 00:17:33.056 A:middle
要么可读取纯文本

00:17:33.366 --> 00:17:34.956 A:middle
但是注意 这些需要

00:17:35.026 --> 00:17:37.536 A:middle
按照精准程度的降序先后

00:17:37.576 --> 00:17:38.086 A:middle
而确定

00:17:38.936 --> 00:17:40.576 A:middle
如果我们把纯文本确定为首选

00:17:40.686 --> 00:17:43.006 A:middle
那我们总是会

00:17:43.006 --> 00:17:44.366 A:middle
回调出纯文本

00:17:44.866 --> 00:17:46.796 A:middle
哪怕有更复杂的vCard类

00:17:46.796 --> 00:17:47.546 A:middle
可用

00:17:48.016 --> 00:17:50.656 A:middle
所以 当我们指定了

00:17:50.656 --> 00:17:52.916 A:middle
我们可读取的类型以后

00:17:53.036 --> 00:17:55.616 A:middle
我们将创建一个初始化器 通过它

00:17:55.616 --> 00:17:56.926 A:middle
我们真正能够从 itemProvider 里

00:17:57.036 --> 00:17:58.166 A:middle
读取数据

00:17:58.166 --> 00:18:01.196 A:middle
类型标识符是

00:17:58.166 --> 00:18:01.196 A:middle
类型标识符是

00:18:01.246 --> 00:18:02.226 A:middle
这个初始化器的

00:18:02.266 --> 00:18:03.256 A:middle
参数之一

00:18:04.046 --> 00:18:06.036 A:middle
我可以通过它来弄清楚

00:18:06.386 --> 00:18:08.126 A:middle
我收到的数据是哪种类型

00:18:08.556 --> 00:18:11.156 A:middle
如果我拿到的是 vCard

00:18:11.206 --> 00:18:12.936 A:middle
我将运用辅助方法来

00:18:12.936 --> 00:18:14.246 A:middle
设置手机号码 照片以及

00:18:14.246 --> 00:18:15.516 A:middle
其他所有我需要的信息

00:18:15.516 --> 00:18:17.616 A:middle
如果我只拿到纯文本

00:18:18.076 --> 00:18:19.376 A:middle
那么我将给联系人卡片

00:18:19.376 --> 00:18:20.236 A:middle
设置姓名

00:18:21.586 --> 00:18:24.376 A:middle
现在 当我们运行它时

00:18:24.446 --> 00:18:25.576 A:middle
这些错误都得到了解决

00:18:26.296 --> 00:18:26.926 A:middle
这是因为

00:18:26.926 --> 00:18:29.206 A:middle
NSItemProvider 现在读懂了

00:18:29.206 --> 00:18:29.926 A:middle
我们的分类

00:18:30.506 --> 00:18:33.656 A:middle
那么这次 我可以从右侧的

00:18:33.656 --> 00:18:35.056 A:middle
通讯录中拖出一个姓名

00:18:35.056 --> 00:18:37.196 A:middle
加以命名

00:18:37.196 --> 00:18:37.306 A:middle
再放到我的 App 里

00:18:38.116 --> 00:18:40.416 A:middle
大家可以看见 我们载入了

00:18:40.416 --> 00:18:41.926 A:middle
这个联系人的姓名、电话

00:18:41.926 --> 00:18:43.406 A:middle
以及照片

00:18:44.026 --> 00:18:47.316 A:middle
注意 我们仍可以再次

00:18:47.316 --> 00:18:50.296 A:middle
从提醒事项等 App 里

00:18:50.356 --> 00:18:51.776 A:middle
拖出纯文本  像是从备忘录 App 里拖出来一样

00:18:52.526 --> 00:18:54.246 A:middle
这能够管用

00:18:54.836 --> 00:18:56.836 A:middle
是因为我们的 ContactCard 类

00:18:56.836 --> 00:18:58.446 A:middle
不仅可以处理 vCard

00:18:58.496 --> 00:18:59.496 A:middle
还可以处理纯文本

00:18:59.706 --> 00:19:01.726 A:middle
这是我们想要的结果

00:18:59.706 --> 00:19:01.726 A:middle
这是我们想要的结果

00:19:02.016 --> 00:19:03.396 A:middle
而且我们的用户非常喜欢

00:19:03.436 --> 00:19:03.846 A:middle
这一功能

00:19:04.566 --> 00:19:06.706 A:middle
但是现在 我们收到了另一个

00:19:06.706 --> 00:19:07.176 A:middle
功能请求

00:19:07.856 --> 00:19:09.786 A:middle
他们希望能够从我们的 App 中

00:19:09.786 --> 00:19:12.276 A:middle
拖出联系人然后再

00:19:12.276 --> 00:19:14.926 A:middle
放到其他的 App 里

00:19:15.476 --> 00:19:16.796 A:middle
为了实现这一功能

00:19:17.636 --> 00:19:20.336 A:middle
我们必须遵循另一协议

00:19:20.336 --> 00:19:21.826 A:middle
协议名称是

00:19:21.826 --> 00:19:23.906 A:middle
NSItemProviderWriting

00:19:24.476 --> 00:19:28.166 A:middle
作为此协议的一部分

00:19:28.166 --> 00:19:31.376 A:middle
我将明确我可以编写的

00:19:31.376 --> 00:19:32.116 A:middle
标识符类型

00:19:33.246 --> 00:19:34.866 A:middle
我的分类可以再编写

00:19:34.866 --> 00:19:38.366 A:middle
vCard 或纯文本

00:19:38.366 --> 00:19:40.756 A:middle
在这之后 我们需要指定

00:19:40.756 --> 00:19:41.796 A:middle
一个 loadData 方法

00:19:41.796 --> 00:19:45.096 A:middle
在这个方法里 我们将创建出

00:19:45.156 --> 00:19:47.506 A:middle
自己想要提供给 itemProvider

00:19:47.506 --> 00:19:48.496 A:middle
的数据

00:19:49.126 --> 00:19:51.466 A:middle
因此 根据类型标识符

00:19:51.466 --> 00:19:52.846 A:middle
我可以创建出

00:19:52.846 --> 00:19:55.326 A:middle
不同类型的数据 而且

00:19:55.326 --> 00:19:56.426 A:middle
我只需把它传输给

00:19:56.426 --> 00:19:57.476 A:middle
completionHandler

00:19:57.996 --> 00:19:59.996 A:middle
现在 我们已经完成了

00:19:59.996 --> 00:20:02.106 A:middle
NSItemProviderWriting 协议

00:19:59.996 --> 00:20:02.106 A:middle
NSItemProviderWriting 协议

00:20:02.106 --> 00:20:03.976 A:middle
的执行

00:20:05.466 --> 00:20:06.876 A:middle
现在只剩下最后一件事

00:20:06.876 --> 00:20:07.126 A:middle
要做

00:20:07.126 --> 00:20:09.716 A:middle
我们需要回到

00:20:09.716 --> 00:20:12.186 A:middle
我们的 TableViewController

00:20:12.186 --> 00:20:14.316 A:middle
并告诉 TableView 它可被用来

00:20:14.316 --> 00:20:15.546 A:middle
拖拽出项目

00:20:16.526 --> 00:20:19.286 A:middle
为了实现这一点 我将执行

00:20:19.286 --> 00:20:20.606 A:middle
TableViewDragDelegate

00:20:21.256 --> 00:20:23.456 A:middle
我们还需对这一委托

00:20:23.506 --> 00:20:23.986 A:middle
进行设置

00:20:24.536 --> 00:20:27.886 A:middle
对于这个委托

00:20:27.886 --> 00:20:30.186 A:middle
我们将执行一个名为

00:20:30.186 --> 00:20:31.556 A:middle
itemsForBeginning Session的方法

00:20:32.116 --> 00:20:35.676 A:middle
在该方法中

00:20:35.676 --> 00:20:37.096 A:middle
我将创建一个itemProvider

00:20:37.096 --> 00:20:39.586 A:middle
大家可以看到

00:20:39.586 --> 00:20:42.166 A:middle
我能够把一个 ContactCard 对象

00:20:42.236 --> 00:20:44.196 A:middle
直接传输给 itemProvider 的

00:20:44.256 --> 00:20:45.056 A:middle
初始化器

00:20:45.586 --> 00:20:47.646 A:middle
这之所以可行 仅仅是因为

00:20:47.646 --> 00:20:48.666 A:middle
我们执行了

00:20:48.666 --> 00:20:50.356 A:middle
NSItemProviderWriting 协议

00:20:51.686 --> 00:20:53.446 A:middle
现在 让我们来运行这个代码

00:21:02.126 --> 00:21:03.356 A:middle
我想要在短信里

00:21:03.356 --> 00:21:05.186 A:middle
把一个联系人共享给

00:21:05.336 --> 00:21:05.916 A:middle
我的同事

00:21:07.206 --> 00:21:09.606 A:middle
那么 我就拖出 Dinesh 的

00:21:09.606 --> 00:21:11.086 A:middle
名片并放进去

00:21:11.876 --> 00:21:16.456 A:middle
如你所见 我们可以

00:21:16.806 --> 00:21:18.356 A:middle
发送姓名 电话号码

00:21:18.356 --> 00:21:19.316 A:middle
以及照片

00:21:19.676 --> 00:21:20.856 A:middle
这正是我们想要

00:21:20.856 --> 00:21:21.466 A:middle
实现的效果

00:21:21.756 --> 00:21:24.796 A:middle
现在 我们已经了解到

00:21:24.796 --> 00:21:26.326 A:middle
NSItemProvider 的读取及编写协议

00:21:26.326 --> 00:21:30.326 A:middle
是怎样运用自定义类对象

00:21:31.056 --> 00:21:33.556 A:middle
从而实现数据转移的

00:21:35.036 --> 00:21:36.286 A:middle
这是两个非常强大的协议

00:21:36.286 --> 00:21:38.186 A:middle
我们认为

00:21:38.216 --> 00:21:39.806 A:middle
当你在自己的 App 里

00:21:39.806 --> 00:21:41.266 A:middle
进行拖放时 将会发现

00:21:41.266 --> 00:21:41.826 A:middle
这些协议极其有用

00:21:42.416 --> 00:21:44.516 A:middle
接下来 Dave 将来介绍

00:21:44.516 --> 00:21:45.446 A:middle
一些高阶主题

00:21:46.516 --> 00:21:51.956 A:middle
[掌声]

00:21:52.456 --> 00:21:53.176 A:middle
&gt;&gt; 谢谢 Tanu

00:21:54.396 --> 00:21:57.936 A:middle
太酷了 好

00:21:58.066 --> 00:21:59.206 A:middle
接下来 我们将介绍

00:21:59.206 --> 00:22:00.066 A:middle
一些高阶主题

00:21:59.206 --> 00:22:00.066 A:middle
一些高阶主题

00:22:00.426 --> 00:22:01.966 A:middle
它们只是一些

00:22:01.966 --> 00:22:03.586 A:middle
非常值得了解的信息

00:22:03.586 --> 00:22:04.466 A:middle
如果你想要

00:22:04.466 --> 00:22:05.556 A:middle
改善你的App 以便让它

00:22:05.556 --> 00:22:06.946 A:middle
在拖放环境中显得

00:22:06.946 --> 00:22:07.496 A:middle
出众的话

00:22:09.226 --> 00:22:10.056 A:middle
我们首先要介绍的是

00:22:10.056 --> 00:22:11.616 A:middle
数据编组

00:22:12.866 --> 00:22:14.016 A:middle
当你在 iOS 11 里查看

00:22:14.016 --> 00:22:16.706 A:middle
NSItemProvider API 时

00:22:17.266 --> 00:22:18.556 A:middle
你会发现其中有

00:22:18.556 --> 00:22:20.416 A:middle
三种提供数据的方式

00:22:21.546 --> 00:22:23.326 A:middle
显然 你可以用数据对象的形式

00:22:23.326 --> 00:22:24.416 A:middle
来提供数据

00:22:25.406 --> 00:22:27.176 A:middle
但你也可以采用文件储存里的

00:22:27.176 --> 00:22:30.306 A:middle
文件或文件夹的形式

00:22:30.306 --> 00:22:30.776 A:middle
来提供数据

00:22:31.296 --> 00:22:35.126 A:middle
第三 你可以将数据作为

00:22:35.126 --> 00:22:37.296 A:middle
File Provider

00:22:37.296 --> 00:22:37.796 A:middle
的引用

00:22:38.226 --> 00:22:39.346 A:middle
我们稍后会进一步

00:22:39.346 --> 00:22:39.816 A:middle
讨论 File Provider

00:22:42.316 --> 00:22:45.026 A:middle
类似地 数据接收器

00:22:45.026 --> 00:22:46.756 A:middle
也有三种不同的

00:22:46.756 --> 00:22:47.596 A:middle
数据检索方式

00:22:48.346 --> 00:22:50.526 A:middle
它们可以将数据复制为

00:22:50.526 --> 00:22:51.106 A:middle
自己的 NSData 对象

00:22:52.306 --> 00:22:54.436 A:middle
可以将文件或文件夹复制到

00:22:54.436 --> 00:22:55.326 A:middle
它们的容器里

00:22:55.866 --> 00:22:59.086 A:middle
还可以尝试在本地

00:22:59.086 --> 00:23:00.366 A:middle
打开相应文件

00:22:59.086 --> 00:23:00.366 A:middle
打开相应文件

00:23:02.496 --> 00:23:04.936 A:middle
所以 有三种方式可以提供数据

00:23:04.936 --> 00:23:07.096 A:middle
也有三种方式去使用数据

00:23:07.376 --> 00:23:08.606 A:middle
你需要做好哪些事情

00:23:08.606 --> 00:23:10.286 A:middle
才能确保数据的流畅传输

00:23:10.286 --> 00:23:11.716 A:middle
并且确保能够

00:23:11.716 --> 00:23:12.866 A:middle
以正确的格式

00:23:12.926 --> 00:23:13.266 A:middle
提供数据

00:23:14.716 --> 00:23:15.856 A:middle
嗯 好消息  你现在

00:23:15.856 --> 00:23:16.466 A:middle
什么也不用做

00:23:16.736 --> 00:23:19.296 A:middle
我们来替你做

00:23:19.566 --> 00:23:21.406 A:middle
数据编组可以确保

00:23:21.406 --> 00:23:22.836 A:middle
数据提供者能够

00:23:22.836 --> 00:23:24.196 A:middle
通过自身感觉

00:23:24.196 --> 00:23:26.416 A:middle
最为便利的方式

00:23:26.796 --> 00:23:29.016 A:middle
来提供和使用信息

00:23:29.616 --> 00:23:31.666 A:middle
如果你提供了一个文件  然后

00:23:31.666 --> 00:23:33.536 A:middle
要把它作为数据来使用

00:23:33.536 --> 00:23:34.886 A:middle
我们就会为你把这份文件

00:23:34.886 --> 00:23:35.906 A:middle
读取为 NSData 对象

00:23:36.416 --> 00:23:39.206 A:middle
如果你提供的是 NSData 并

00:23:39.206 --> 00:23:40.656 A:middle
请求文件副本 我们将把它

00:23:40.656 --> 00:23:43.066 A:middle
写入文件储存并

00:23:43.066 --> 00:23:44.226 A:middle
把你对它的 L 引用发给你

00:23:45.156 --> 00:23:47.246 A:middle
如果你提供的是文件夹

00:23:47.246 --> 00:23:49.106 A:middle
并且请求 NSData 我们将

00:23:49.106 --> 00:23:50.276 A:middle
压缩文件夹内容

00:23:50.276 --> 00:23:52.176 A:middle
然后把压缩文件的

00:23:52.206 --> 00:23:52.896 A:middle
NSData给你

00:23:53.426 --> 00:23:56.826 A:middle
如果你提供

00:23:56.826 --> 00:23:59.286 A:middle
一个 File Provider 的引用

00:23:59.286 --> 00:24:02.856 A:middle
并请求文件副本 我们将

00:23:59.286 --> 00:24:02.856 A:middle
并请求文件副本 我们将

00:24:02.856 --> 00:24:03.916 A:middle
为 File Provider

00:24:03.916 --> 00:24:05.796 A:middle
调入承诺  并替你

00:24:05.796 --> 00:24:05.976 A:middle
生成副本

00:24:10.076 --> 00:24:10.326 A:middle
好

00:24:11.126 --> 00:24:12.906 A:middle
我们已经了解到

00:24:12.906 --> 00:24:14.286 A:middle
进度和取消是如何

00:24:14.286 --> 00:24:14.986 A:middle
由数据使用者这一方来执行

00:24:15.536 --> 00:24:17.036 A:middle
接下来 我想要简要地谈一下

00:24:17.036 --> 00:24:18.026 A:middle
进度和取消

00:24:18.026 --> 00:24:19.926 A:middle
如何作用于

00:24:19.926 --> 00:24:20.616 A:middle
数据提供者的

00:24:21.646 --> 00:24:22.946 A:middle
现在 我将向你展示

00:24:22.946 --> 00:24:23.536 A:middle
一个代码块

00:24:23.846 --> 00:24:25.096 A:middle
看到这个密集的代码块

00:24:25.126 --> 00:24:26.086 A:middle
别担心

00:24:26.086 --> 00:24:27.206 A:middle
因为我会突出显示

00:24:27.206 --> 00:24:28.426 A:middle
最重要的部分

00:24:29.376 --> 00:24:30.966 A:middle
这是为 NSItemProviderWriting

00:24:31.776 --> 00:24:33.426 A:middle
执行的

00:24:33.426 --> 00:24:34.806 A:middle
loadData

00:24:36.156 --> 00:24:38.366 A:middle
你在这期间将会运用

00:24:38.366 --> 00:24:39.466 A:middle
dataLoader 对象去

00:24:39.466 --> 00:24:40.986 A:middle
递增加载数据

00:24:41.486 --> 00:24:44.966 A:middle
为了提供对进度和

00:24:44.966 --> 00:24:47.136 A:middle
取消功能的支持

00:24:47.136 --> 00:24:48.076 A:middle
你要做的第一件事就是

00:24:48.076 --> 00:24:49.256 A:middle
创建你自己的进度对象

00:24:50.296 --> 00:24:51.446 A:middle
在这个例子中 我们将创建一个

00:24:51.446 --> 00:24:53.086 A:middle
UnitCount 为 100% 的

00:24:53.086 --> 00:24:53.606 A:middle
对象

00:24:54.156 --> 00:24:57.046 A:middle
在这个进度对象上

00:24:57.046 --> 00:24:58.686 A:middle
你可以附加一个 cancellationHandler

00:24:58.966 --> 00:25:00.026 A:middle
当你的数据使用者

00:24:58.966 --> 00:25:00.026 A:middle
当你的数据使用者

00:25:00.026 --> 00:25:01.526 A:middle
要求取消进度对象的实例时

00:25:01.646 --> 00:25:03.096 A:middle
cancellationHandler

00:25:03.096 --> 00:25:03.826 A:middle
将被调用

00:25:03.906 --> 00:25:06.656 A:middle
在这个例子中 我们所做的一切操作

00:25:06.656 --> 00:25:08.076 A:middle
都是在将局部变量

00:25:08.076 --> 00:25:10.406 A:middle
从True设置为 Flase

00:25:10.406 --> 00:25:12.596 A:middle
这会阻止 dataLoader 加载

00:25:12.596 --> 00:25:13.226 A:middle
下一分块

00:25:14.166 --> 00:25:17.716 A:middle
在 dataLoader 进度开展时

00:25:17.716 --> 00:25:18.616 A:middle
你可以在你的进度对象上

00:25:18.616 --> 00:25:20.066 A:middle
更新 completedUnitCount

00:25:20.066 --> 00:25:22.186 A:middle
以便驱动

00:25:22.186 --> 00:25:23.216 A:middle
接收方的

00:25:23.216 --> 00:25:23.626 A:middle
进度指示器

00:25:24.666 --> 00:25:25.976 A:middle
当然 你必须

00:25:25.976 --> 00:25:27.376 A:middle
返回你自己的进度对象

00:25:27.946 --> 00:25:30.026 A:middle
以便我们将其改写到

00:25:30.116 --> 00:25:33.416 A:middle
另一侧

00:25:33.626 --> 00:25:33.866 A:middle
好

00:25:33.906 --> 00:25:34.626 A:middle
现在换个话题

00:25:35.066 --> 00:25:36.006 A:middle
我们另外再谈一些功能

00:25:36.006 --> 00:25:40.576 A:middle
能在你创建成套 App 时

00:25:40.576 --> 00:25:43.576 A:middle
帮你改进数据表示方式

00:25:43.576 --> 00:25:45.596 A:middle
的功能

00:25:45.596 --> 00:25:48.046 A:middle
下面 我们来聊一聊

00:25:48.046 --> 00:25:49.576 A:middle
Per-Representation Visibility

00:25:50.076 --> 00:25:51.636 A:middle
记住 你可以在

00:25:51.636 --> 00:25:53.026 A:middle
NSItemProvider 里提供

00:25:53.026 --> 00:25:54.616 A:middle
多种数据表示形式

00:25:55.726 --> 00:25:57.146 A:middle
你可以将

00:25:57.146 --> 00:25:59.556 A:middle
每种表示的可见性

00:25:59.556 --> 00:26:01.316 A:middle
限制为仅对你的源应用

00:25:59.556 --> 00:26:01.316 A:middle
限制为仅对你的源应用

00:26:01.316 --> 00:26:02.006 A:middle
可见

00:26:02.826 --> 00:26:04.816 A:middle
它对你组内指定的应用

00:26:04.816 --> 00:26:06.966 A:middle
是可见的

00:26:06.966 --> 00:26:08.846 A:middle
这是在你的应用套件里的情况

00:26:08.846 --> 00:26:09.286 A:middle
或对所有应用都可见

00:26:09.816 --> 00:26:12.506 A:middle
你可以运用这个属性

00:26:12.506 --> 00:26:15.986 A:middle
来隐藏你正在

00:26:15.986 --> 00:26:18.116 A:middle
使用各种版本的应用套件

00:26:18.116 --> 00:26:19.406 A:middle
而迅速累积的

00:26:19.406 --> 00:26:19.756 A:middle
个人类型

00:26:20.056 --> 00:26:20.926 A:middle
因此 你不必担心

00:26:20.926 --> 00:26:23.466 A:middle
第三方会将你的数据

00:26:23.466 --> 00:26:24.846 A:middle
序列化至磁盘上

00:26:25.336 --> 00:26:29.586 A:middle
以此类推 你在

00:26:29.756 --> 00:26:30.956 A:middle
NSItemProvider 上

00:26:31.056 --> 00:26:31.836 A:middle
有一个 teamData 属性

00:26:32.656 --> 00:26:35.396 A:middle
这是一个8千字节的数据块

00:26:35.396 --> 00:26:37.176 A:middle
你可以通过一个

00:26:37.176 --> 00:26:38.866 A:middle
NSItemProvider 将它附加

00:26:39.186 --> 00:26:40.896 A:middle
它们只对你组内

00:26:40.896 --> 00:26:42.416 A:middle
的其他应用可见

00:26:43.596 --> 00:26:45.706 A:middle
你可以运用这一点

00:26:45.706 --> 00:26:46.916 A:middle
用你自己认为合适的方式  在拖动过程中

00:26:47.206 --> 00:26:48.226 A:middle
改良你的 UI

00:26:48.316 --> 00:26:50.016 A:middle
这是元数据

00:26:50.016 --> 00:26:51.556 A:middle
它甚至在用户抬手示意之前

00:26:51.556 --> 00:26:52.326 A:middle
就可以被检索到

00:26:56.016 --> 00:26:56.586 A:middle
好

00:26:56.956 --> 00:26:58.286 A:middle
在 NSItemProvider 上

00:26:58.316 --> 00:27:00.246 A:middle
有一个 suggestedName 属性

00:26:58.316 --> 00:27:00.246 A:middle
有一个 suggestedName 属性

00:27:01.426 --> 00:27:02.916 A:middle
如果你给 suggestedName

00:27:02.916 --> 00:27:04.926 A:middle
提供一个字符串  我们会

00:27:04.926 --> 00:27:06.116 A:middle
在检索器把你的数据

00:27:06.116 --> 00:27:08.646 A:middle
写入磁盘时  把这个字符串用作

00:27:08.946 --> 00:27:09.576 A:middle
文件名

00:27:10.596 --> 00:27:11.986 A:middle
当然  你在提供 NSData 的

00:27:11.986 --> 00:27:13.076 A:middle
时候  这一点也就

00:27:13.076 --> 00:27:13.416 A:middle
格外有用

00:27:17.496 --> 00:27:18.836 A:middle
我想介绍的

00:27:18.836 --> 00:27:20.706 A:middle
最后一个属性

00:27:21.006 --> 00:27:22.436 A:middle
是 preferredPresentationSize

00:27:23.186 --> 00:27:26.906 A:middle
这是一个 CG 规格大小的属性

00:27:26.906 --> 00:27:28.646 A:middle
你可以通过它来

00:27:28.916 --> 00:27:31.126 A:middle
提示接收者

00:27:31.126 --> 00:27:32.446 A:middle
你的表示形式在展开过后

00:27:32.446 --> 00:27:34.096 A:middle
的规格大小

00:27:34.736 --> 00:27:36.326 A:middle
例如 通过邮件 App 对

00:27:36.326 --> 00:27:38.946 A:middle
这一属性的运用

00:27:38.946 --> 00:27:40.626 A:middle
图片可以被拖进邮件撰写表单

00:27:40.626 --> 00:27:42.876 A:middle
拖进目的地布局  这一切甚至在

00:27:42.876 --> 00:27:43.616 A:middle
数据到达前就已发生

00:27:47.676 --> 00:27:49.016 A:middle
最后 我将聊一聊

00:27:49.016 --> 00:27:50.546 A:middle
File Provider

00:27:51.076 --> 00:27:52.556 A:middle
File Provider 本身就是

00:27:52.556 --> 00:27:53.626 A:middle
另一个完整的主题

00:27:54.456 --> 00:27:57.046 A:middle
但我们也可以做出下述的

00:27:57.046 --> 00:27:57.746 A:middle
简要概括

00:27:58.246 --> 00:27:59.596 A:middle
File Provider是一个

00:27:59.596 --> 00:28:00.116 A:middle
应用扩展

00:27:59.596 --> 00:28:00.116 A:middle
应用扩展

00:28:00.646 --> 00:28:03.576 A:middle
举个例子

00:28:03.576 --> 00:28:05.196 A:middle
这一应用扩展

00:28:05.196 --> 00:28:06.906 A:middle
能够允许数据通过

00:28:06.906 --> 00:28:08.486 A:middle
网络下载而传送

00:28:08.486 --> 00:28:10.156 A:middle
即使你的主应用已被终止

00:28:11.416 --> 00:28:14.066 A:middle
对于操作时间较长的拖拽而言

00:28:14.066 --> 00:28:15.126 A:middle
这一点特别有用

00:28:15.236 --> 00:28:17.886 A:middle
因为当用户在等待下载时

00:28:17.886 --> 00:28:19.686 A:middle
他们可能会

00:28:19.686 --> 00:28:21.486 A:middle
从你的 App 引导到别的地方

00:28:21.696 --> 00:28:23.566 A:middle
而你的 App 可能会被终止

00:28:25.336 --> 00:28:28.196 A:middle
如果你向某个 File Provider 容器里

00:28:28.196 --> 00:28:29.356 A:middle
的某个文件提供

00:28:29.356 --> 00:28:31.956 A:middle
一个 URL

00:28:31.956 --> 00:28:33.456 A:middle
File Provider 扩展将继续执行

00:28:33.456 --> 00:28:35.376 A:middle
数据传送请求

00:28:35.376 --> 00:28:36.886 A:middle
即使你的 UI 引用

00:28:36.886 --> 00:28:37.426 A:middle
已被终止

00:28:37.906 --> 00:28:39.226 A:middle
这增加了

00:28:39.226 --> 00:28:40.196 A:middle
你的数据得以成功

00:28:40.196 --> 00:28:41.196 A:middle
传送的几率

00:28:41.746 --> 00:28:45.906 A:middle
除此之外 如果你

00:28:46.226 --> 00:28:47.446 A:middle
创建的 File Provider

00:28:47.446 --> 00:28:49.246 A:middle
出现在文件的应用里

00:28:49.626 --> 00:28:51.366 A:middle
我们将允许你拖放

00:28:51.366 --> 00:28:52.856 A:middle
可以在本地打开的

00:28:52.856 --> 00:28:53.236 A:middle
URL

00:28:53.736 --> 00:28:54.836 A:middle
这就意味着

00:28:54.836 --> 00:28:57.086 A:middle
多个应用可以访问同一文件

00:28:57.086 --> 00:28:58.896 A:middle
而不是各自获取

00:28:58.896 --> 00:28:59.566 A:middle
它的副本

00:29:01.416 --> 00:29:02.436 A:middle
接下来的两个议程

00:29:02.436 --> 00:29:03.806 A:middle
将提供一些

00:29:03.806 --> 00:29:04.936 A:middle
非常棒的信息

00:29:05.986 --> 00:29:06.966 A:middle
如果你们对在拖放环境中

00:29:06.966 --> 00:29:08.346 A:middle
提供 File Provider

00:29:08.346 --> 00:29:09.486 A:middle
感兴趣的话

00:29:09.486 --> 00:29:11.636 A:middle
我强烈建议

00:29:12.076 --> 00:29:14.566 A:middle
大家去参加

00:29:14.746 --> 00:29:15.046 A:middle
好

00:29:16.596 --> 00:29:17.866 A:middle
接下来 我们再看一下

00:29:17.866 --> 00:29:18.996 A:middle
在拖放过程中我们可以

00:29:18.996 --> 00:29:20.546 A:middle
对文件进行怎样的操作

00:29:20.546 --> 00:29:20.976 A:middle
Tanu 可以再次演示一下

00:29:21.516 --> 00:29:25.996 A:middle
[掌声]

00:29:26.496 --> 00:29:27.246 A:middle
&gt;&gt; 希望大家已经准备好观看

00:29:27.246 --> 00:29:28.006 A:middle
下一个演示了

00:29:28.736 --> 00:29:30.976 A:middle
在先前的演示中我们看到

00:29:30.976 --> 00:29:32.606 A:middle
如何拖放简单的

00:29:32.656 --> 00:29:34.196 A:middle
系统对象 以及

00:29:34.276 --> 00:29:35.526 A:middle
自定义类对象

00:29:36.206 --> 00:29:38.026 A:middle
现在 让我们来看看应该怎样处理

00:29:38.116 --> 00:29:38.566 A:middle
文件

00:29:38.866 --> 00:29:40.856 A:middle
我们将再一次查看我们

00:29:40.856 --> 00:29:41.266 A:middle
客户的 App

00:29:41.266 --> 00:29:43.676 A:middle
对于有些听众  今天

00:29:43.676 --> 00:29:45.796 A:middle
我们要说说附加数据

00:29:46.976 --> 00:29:48.416 A:middle
例如 Adam 我们知道

00:29:48.486 --> 00:29:49.646 A:middle
他买了哪些产品

00:29:49.906 --> 00:29:52.586 A:middle
现在 我想要把这个文件

00:29:52.586 --> 00:29:55.416 A:middle
拖拽到另一个 App 中

00:29:55.416 --> 00:29:56.736 A:middle
并有可能在那个 App 里编辑这份文件

00:29:57.976 --> 00:30:00.666 A:middle
为了实现这一点 我将

00:29:57.976 --> 00:30:00.666 A:middle
为了实现这一点 我将

00:30:00.666 --> 00:30:02.796 A:middle
在我的客户 App 里

00:30:02.796 --> 00:30:03.946 A:middle
查看 ContactDetailsViewController

00:30:04.286 --> 00:30:09.696 A:middle
在这儿 我们要把一个

00:30:09.696 --> 00:30:12.156 A:middle
拖动交互添加到

00:30:12.156 --> 00:30:13.496 A:middle
我们刚刚看到的附件图片上

00:30:15.136 --> 00:30:17.386 A:middle
我们还要再执行一下这里的

00:30:17.386 --> 00:30:18.426 A:middle
拖动交互委托

00:30:18.426 --> 00:30:19.806 A:middle
因为我们已经将

00:30:19.806 --> 00:30:20.836 A:middle
委托设置为 self

00:30:22.136 --> 00:30:23.426 A:middle
你们可能在之前的会议上

00:30:23.426 --> 00:30:24.816 A:middle
已经听说过

00:30:24.846 --> 00:30:25.326 A:middle
拖动交互委托

00:30:26.156 --> 00:30:27.316 A:middle
如果你有兴趣了解

00:30:27.316 --> 00:30:28.756 A:middle
更多关于这一委托的信息

00:30:28.756 --> 00:30:30.596 A:middle
我建议你去观看

00:30:30.596 --> 00:30:32.536 A:middle
213号会议的视频

00:30:32.536 --> 00:30:33.516 A:middle
它的主题是如何掌握拖放功能

00:30:33.586 --> 00:30:35.726 A:middle
不过在本次演示中

00:30:35.726 --> 00:30:37.516 A:middle
我们只准备介绍一种方法

00:30:37.676 --> 00:30:39.356 A:middle
它的名称是 itemsForBeginning

00:30:39.416 --> 00:30:39.886 A:middle
session

00:30:40.436 --> 00:30:44.066 A:middle
在这个方法中 我们将创建

00:30:44.066 --> 00:30:47.046 A:middle
一个新的 itemProvider 并且

00:30:47.256 --> 00:30:50.316 A:middle
在这个 itemProvider 上调用

00:30:50.476 --> 00:30:50.676 A:middle
一个名为 registerFileRepresentation

00:30:50.676 --> 00:30:52.346 A:middle
的方法

00:30:52.606 --> 00:30:54.766 A:middle
这个方法包含了四个

00:30:54.816 --> 00:30:55.396 A:middle
参数

00:30:56.126 --> 00:30:58.176 A:middle
第一个是

00:30:58.176 --> 00:30:58.796 A:middle
类型标识符

00:30:58.796 --> 00:31:01.136 A:middle
我们的附件实际上是

00:30:58.796 --> 00:31:01.136 A:middle
我们的附件实际上是

00:31:01.136 --> 00:31:01.676 A:middle
一张图片

00:31:01.676 --> 00:31:03.576 A:middle
所以 我已经将类型标识符设为

00:31:03.666 --> 00:31:04.336 A:middle
JPEG

00:31:05.446 --> 00:31:07.176 A:middle
第二个参数是

00:31:07.176 --> 00:31:07.766 A:middle
文件选项

00:31:08.576 --> 00:31:10.786 A:middle
它可以用于确定

00:31:10.786 --> 00:31:12.756 A:middle
我们是想让其他 App

00:31:12.756 --> 00:31:14.956 A:middle
在本地打开我们的文件 还是

00:31:14.956 --> 00:31:15.856 A:middle
让它们对文件进行复制

00:31:15.856 --> 00:31:17.986 A:middle
我们想让其他 App

00:31:17.986 --> 00:31:19.716 A:middle
在本地打开我们的文件 这样可以看到

00:31:19.746 --> 00:31:20.496 A:middle
它们所做的改动

00:31:20.496 --> 00:31:23.206 A:middle
第三个参数是

00:31:23.206 --> 00:31:23.896 A:middle
可见性

00:31:24.606 --> 00:31:26.296 A:middle
它可以设置为对你自己

00:31:26.636 --> 00:31:28.236 A:middle
你的组  或所有的应用可见

00:31:28.376 --> 00:31:29.896 A:middle
我刚才已经设置成对所有应用可见了

00:31:30.786 --> 00:31:32.176 A:middle
最后一个参数

00:31:32.176 --> 00:31:33.196 A:middle
是 completionHandler

00:31:33.196 --> 00:31:35.556 A:middle
我们将把 URL 文件

00:31:35.626 --> 00:31:38.026 A:middle
传递给这个

00:31:39.096 --> 00:31:40.586 A:middle
completionHandler

00:31:40.586 --> 00:31:44.146 A:middle
那么 我们先获取 URL

00:31:44.146 --> 00:31:45.896 A:middle
在这个地方 我有一个

00:31:45.896 --> 00:31:48.466 A:middle
辅助方法可以从 File Provider

00:31:48.626 --> 00:31:50.356 A:middle
获取我的文件的 URL

00:31:50.556 --> 00:31:52.946 A:middle
只有当我在本地打开文件时

00:31:53.086 --> 00:31:54.746 A:middle
才需要使用

00:31:54.806 --> 00:31:55.276 A:middle
File Provider

00:31:56.026 --> 00:31:57.646 A:middle
如果我想要其他 App

00:31:57.706 --> 00:31:59.796 A:middle
复制文件 那就无需使用

00:31:59.796 --> 00:32:00.266 A:middle
File Provider

00:31:59.796 --> 00:32:00.266 A:middle
File Provider

00:32:00.266 --> 00:32:01.596 A:middle
只要提供一个本地URL

00:32:01.596 --> 00:32:02.546 A:middle
就可以了

00:32:03.036 --> 00:32:04.756 A:middle
我们将把这个 URL 传递给

00:32:04.756 --> 00:32:06.106 A:middle
completionHandler

00:32:06.106 --> 00:32:10.026 A:middle
现在 我们的 itemProvider 已设置好了

00:32:10.026 --> 00:32:11.826 A:middle
可以用它来创建

00:32:11.826 --> 00:32:12.766 A:middle
一个拖动项

00:32:13.296 --> 00:32:16.336 A:middle
有了它 这个代码就可以

00:32:16.336 --> 00:32:16.746 A:middle
运行了

00:32:23.656 --> 00:32:26.076 A:middle
所以 我现在可以拖出这个

00:32:26.176 --> 00:32:26.606 A:middle
文件

00:32:27.966 --> 00:32:30.436 A:middle
让我来打开另一个 App

00:32:30.736 --> 00:32:31.566 A:middle
作为拖放的目的地

00:32:38.216 --> 00:32:39.726 A:middle
那么 我们把数据拖出来

00:32:40.226 --> 00:32:42.196 A:middle
再放入一个文档编辑的

00:32:42.196 --> 00:32:42.276 A:middle
APP里

00:32:42.996 --> 00:32:45.356 A:middle
我现在担心

00:32:45.356 --> 00:32:46.736 A:middle
Adam 正从我们的竞品那里

00:32:46.736 --> 00:32:47.696 A:middle
大量购买产品

00:32:48.166 --> 00:32:51.176 A:middle
所以 我要圈出这一点

00:32:51.176 --> 00:32:52.226 A:middle
并且把改动保存下来

00:32:52.826 --> 00:32:54.826 A:middle
由于我们的文档编辑 App

00:32:54.826 --> 00:32:56.146 A:middle
实际上使用了用户 App

00:32:56.146 --> 00:32:57.756 A:middle
提供的 URL

00:32:58.546 --> 00:33:00.846 A:middle
你将看到我们用户的 App

00:32:58.546 --> 00:33:00.846 A:middle
你将看到我们用户的 App

00:33:00.846 --> 00:33:02.436 A:middle
也有了相同的

00:33:02.436 --> 00:33:02.506 A:middle
改动

00:33:03.516 --> 00:33:07.336 A:middle
[掌声]

00:33:07.836 --> 00:33:08.806 A:middle
很高兴你们能喜欢这个功能

00:33:10.216 --> 00:33:12.276 A:middle
现在 我们已经了解了

00:33:12.276 --> 00:33:14.366 A:middle
如何处理系统对象、自定义类对象

00:33:14.366 --> 00:33:16.756 A:middle
以及各种文件

00:33:17.946 --> 00:33:19.466 A:middle
我们有众多类型的 API

00:33:19.466 --> 00:33:21.156 A:middle
供你使用

00:33:21.156 --> 00:33:22.566 A:middle
我们很期待看到

00:33:22.726 --> 00:33:23.666 A:middle
大家如何使用它们

00:33:23.896 --> 00:33:25.586 A:middle
接下来 有请 Dave 做个总结

00:33:27.516 --> 00:33:30.896 A:middle
[掌声]

00:33:31.396 --> 00:33:32.516 A:middle
&gt;&gt; 谢谢 Tanu

00:33:34.076 --> 00:33:35.136 A:middle
好

00:33:35.326 --> 00:33:36.266 A:middle
我们来概括一下

00:33:37.736 --> 00:33:39.286 A:middle
在本次会议中 我们了解到

00:33:39.516 --> 00:33:41.666 A:middle
NSItemProvider 对于

00:33:41.786 --> 00:33:43.586 A:middle
不同应用之间借助拖放功能

00:33:43.586 --> 00:33:45.716 A:middle
而传输数据的方式

00:33:46.096 --> 00:33:46.786 A:middle
起到了何等重要的作用

00:33:48.196 --> 00:33:49.326 A:middle
我们还了解到

00:33:49.326 --> 00:33:50.846 A:middle
多重表示方法怎样能让

00:33:50.846 --> 00:33:52.866 A:middle
你的应用与其他应用

00:33:52.866 --> 00:33:54.206 A:middle
实现最大限度的

00:33:54.206 --> 00:33:55.026 A:middle
兼容性

00:33:56.126 --> 00:33:57.936 A:middle
我们了解到数据是

00:33:57.936 --> 00:34:00.256 A:middle
怎样以可取消的方式

00:33:57.936 --> 00:34:00.256 A:middle
怎样以可取消的方式

00:34:00.326 --> 00:34:02.256 A:middle
来实现规定进度的

00:34:02.256 --> 00:34:02.936 A:middle
异步传输

00:34:05.316 --> 00:34:06.246 A:middle
我们还了解到

00:34:06.246 --> 00:34:07.906 A:middle
NSItemProvider 读取和编写协议

00:34:07.906 --> 00:34:09.426 A:middle
是怎样让你

00:34:09.426 --> 00:34:11.976 A:middle
创建能够和拖放 UI 代码

00:34:11.976 --> 00:34:13.966 A:middle
完美配合的模型类

00:34:14.485 --> 00:34:18.476 A:middle
以及可见性和teamData

00:34:18.726 --> 00:34:20.716 A:middle
还有  如何能让你创建

00:34:20.716 --> 00:34:22.255 A:middle
在拖放过程中

00:34:22.255 --> 00:34:24.906 A:middle
格外适用的

00:34:26.335 --> 00:34:26.686 A:middle
应用套件

00:34:26.686 --> 00:34:28.485 A:middle
最后 我们了解到

00:34:28.485 --> 00:34:30.766 A:middle
File Provider 是如何

00:34:30.766 --> 00:34:32.985 A:middle
让你能够通过拖放功能

00:34:32.985 --> 00:34:36.815 A:middle
最终在本地打开文件

00:34:36.936 --> 00:34:38.235 A:middle
想要了解更多信息 请访问

00:34:38.235 --> 00:34:39.576 A:middle
我们的开发者网站

00:34:39.576 --> 00:34:41.226 A:middle
227号会议

00:34:41.716 --> 00:34:45.366 A:middle
我强烈建议大家

00:34:45.366 --> 00:34:47.356 A:middle
参加有关 File Provider 的会议

00:34:47.356 --> 00:34:50.025 A:middle
就在今明两天

00:34:50.025 --> 00:34:51.196 A:middle
去了解更多关于怎样

00:34:51.196 --> 00:34:53.025 A:middle
为你自己的应用创建

00:34:53.025 --> 00:34:53.636 A:middle
File Provider 的信息

00:34:53.636 --> 00:34:56.036 A:middle
如果你没有参加

00:34:56.036 --> 00:34:57.806 A:middle
关于拖放功能的前三场会议

00:34:57.806 --> 00:34:58.986 A:middle
我强烈建议大家

00:34:58.986 --> 00:34:59.926 A:middle
观看视频回放

00:35:00.426 --> 00:35:02.606 A:middle
感谢关注

00:35:02.606 --> 00:35:03.976 A:middle
祝你们在 WWDC 有所收获
