WEBVTT

00:00:18.136 --> 00:00:19.666 A:middle
&gt;&gt; 大家好 欢迎大家

00:00:19.666 --> 00:00:20.316 A:middle
来到 513 号会议

00:00:20.916 --> 00:00:22.116 A:middle
本场会议中 你们将了解到

00:00:22.116 --> 00:00:24.176 A:middle
全新的高效率图像文件格式 即 HEIF

00:00:24.176 --> 00:00:25.846 A:middle
中的一些底层细节

00:00:25.846 --> 00:00:28.626 A:middle
同时还会了解到

00:00:28.626 --> 00:00:30.066 A:middle
这种全新的文件格式

00:00:30.066 --> 00:00:31.776 A:middle
带来的诸多好处

00:00:32.606 --> 00:00:34.166 A:middle
我是 Davide Concion

00:00:34.166 --> 00:00:35.416 A:middle
在 Apple 负责管理

00:00:35.416 --> 00:00:37.446 A:middle
图像压缩团队

00:00:38.286 --> 00:00:39.916 A:middle
本次会议中 我们会简要介绍

00:00:39.916 --> 00:00:41.786 A:middle
目前图像压缩

00:00:41.786 --> 00:00:43.386 A:middle
使用的事实标准

00:00:43.866 --> 00:00:45.096 A:middle
也就是大家所熟知的

00:00:45.096 --> 00:00:46.396 A:middle
JPEG 格式

00:00:46.856 --> 00:00:48.356 A:middle
我们还会介绍

00:00:48.356 --> 00:00:49.606 A:middle
在 Apple 看来 一种新的

00:00:49.606 --> 00:00:51.486 A:middle
图像格式应当满足

00:00:51.486 --> 00:00:52.526 A:middle
哪些需求

00:00:53.886 --> 00:00:55.786 A:middle
还会解释 为什么我们认为

00:00:55.786 --> 00:00:57.346 A:middle
HEIF 满足这些需求

00:00:57.346 --> 00:00:59.236 A:middle
同时还会介绍

00:00:59.236 --> 00:01:00.876 A:middle
HEIF 所采用的

00:00:59.236 --> 00:01:00.876 A:middle
HEIF 所采用的

00:01:01.306 --> 00:01:02.346 A:middle
一些功能灵活的工具

00:01:02.716 --> 00:01:05.606 A:middle
这之后 我们会介绍

00:01:05.606 --> 00:01:08.156 A:middle
为什么 Apple 认为

00:01:08.156 --> 00:01:09.926 A:middle
HEIF 格式应当

00:01:09.926 --> 00:01:11.066 A:middle
采用 HEVC 编解码器

00:01:11.996 --> 00:01:13.826 A:middle
我们先来谈谈 JPEG

00:01:15.036 --> 00:01:17.306 A:middle
JPEG 仍是最流行的

00:01:17.306 --> 00:01:18.976 A:middle
图像压缩技术

00:01:18.976 --> 00:01:21.276 A:middle
可以用于网页上的图片

00:01:21.826 --> 00:01:23.206 A:middle
也可以用于消费级

00:01:23.206 --> 00:01:25.416 A:middle
电子产品 例如数码单反相机

00:01:25.416 --> 00:01:27.246 A:middle
傻瓜相机

00:01:27.246 --> 00:01:27.906 A:middle
和手机

00:01:28.706 --> 00:01:30.536 A:middle
云服务也使用 JPEG

00:01:30.536 --> 00:01:31.606 A:middle
因为它的兼容性

00:01:31.606 --> 00:01:32.146 A:middle
十分强大

00:01:33.686 --> 00:01:34.876 A:middle
但 JPEG 也有很多局限

00:01:34.876 --> 00:01:37.556 A:middle
其中之一就是

00:01:37.556 --> 00:01:38.596 A:middle
压缩效率较低

00:01:39.156 --> 00:01:40.346 A:middle
过去几年 人们开发了

00:01:40.346 --> 00:01:42.246 A:middle
一些新的压缩算法

00:01:42.246 --> 00:01:44.266 A:middle
可以实现比 JPEG

00:01:44.266 --> 00:01:45.706 A:middle
更高的压缩率

00:01:45.706 --> 00:01:47.786 A:middle
同时还能保持

00:01:47.786 --> 00:01:49.356 A:middle
图像的画质和观感

00:01:49.356 --> 00:01:49.876 A:middle
没有大的变化

00:01:51.046 --> 00:01:53.376 A:middle
而辅助图像 例如透明度

00:01:53.376 --> 00:01:55.596 A:middle
和深度则很难得到 JPEG 支持

00:01:56.666 --> 00:01:59.406 A:middle
并且 近年来也开发了

00:01:59.406 --> 00:02:01.346 A:middle
很多呈现和显示

00:01:59.406 --> 00:02:01.346 A:middle
很多呈现和显示

00:02:01.346 --> 00:02:02.876 A:middle
动态图像的方法

00:02:03.386 --> 00:02:05.516 A:middle
Apple 的 Live Photo 便是其中之一

00:02:06.106 --> 00:02:07.786 A:middle
不幸的是 JPEG

00:02:07.786 --> 00:02:08.786 A:middle
并不支持动态图像

00:02:09.306 --> 00:02:13.156 A:middle
我们看一下 JPEG 和 ITU/MPEG

00:02:13.156 --> 00:02:14.706 A:middle
所提出的压缩标准的

00:02:14.756 --> 00:02:17.846 A:middle
历史沿革

00:02:19.206 --> 00:02:20.886 A:middle
JPEG 在当初

00:02:20.886 --> 00:02:22.666 A:middle
确实成果显著

00:02:22.666 --> 00:02:24.116 A:middle
尤其是在压缩效率方面

00:02:24.116 --> 00:02:25.636 A:middle
即便与现在相比

00:02:25.636 --> 00:02:26.546 A:middle
进步也相当显著

00:02:27.316 --> 00:02:28.526 A:middle
如幻灯片所示

00:02:29.046 --> 00:02:30.636 A:middle
JPEG 最终定型

00:02:30.636 --> 00:02:33.636 A:middle
成为标准 是在 1992 年

00:02:33.636 --> 00:02:34.376 A:middle
已经是 25 年前了

00:02:36.136 --> 00:02:37.526 A:middle
自那之后

00:02:37.526 --> 00:02:38.886 A:middle
人们提出了一些

00:02:38.886 --> 00:02:39.296 A:middle
新的压缩标准

00:02:40.136 --> 00:02:42.396 A:middle
最新提出的标准

00:02:43.126 --> 00:02:43.256 A:middle
是 HEVC

00:02:43.896 --> 00:02:45.816 A:middle
作为比较 这是 HEIF

00:02:45.816 --> 00:02:47.216 A:middle
在时间线上的位置

00:02:47.216 --> 00:02:51.646 A:middle
它于 2015 年定型

00:02:51.916 --> 00:02:54.256 A:middle
Apple 花了大量时间

00:02:54.256 --> 00:02:56.376 A:middle
寻找接替 JPEG 的标准

00:02:56.376 --> 00:02:57.926 A:middle
也评估了很多选择

00:02:58.446 --> 00:03:00.106 A:middle
我们的需求十分广泛

00:02:58.446 --> 00:03:00.106 A:middle
我们的需求十分广泛

00:03:00.546 --> 00:03:02.486 A:middle
新的文件格式要能支持

00:03:02.486 --> 00:03:03.956 A:middle
JPEG 现有的所有功能

00:03:03.956 --> 00:03:06.176 A:middle
但与此同时

00:03:06.176 --> 00:03:07.546 A:middle
性能表现要更为出色

00:03:08.026 --> 00:03:09.656 A:middle
不仅要兼容

00:03:09.656 --> 00:03:11.406 A:middle
专业摄影工具

00:03:11.406 --> 00:03:13.176 A:middle
还要兼容网页和云

00:03:13.596 --> 00:03:16.196 A:middle
新格式还要具备

00:03:16.196 --> 00:03:18.796 A:middle
高度灵活性和可扩展性

00:03:18.796 --> 00:03:19.796 A:middle
来适应日新月异的

00:03:19.796 --> 00:03:21.136 A:middle
摄影生态环境

00:03:21.136 --> 00:03:24.836 A:middle
这张表列举了 Apple 认为

00:03:24.836 --> 00:03:26.846 A:middle
是重中之重的一些特性

00:03:27.476 --> 00:03:29.866 A:middle
压缩要达到顶尖水平

00:03:29.866 --> 00:03:32.176 A:middle
无论是有损压缩

00:03:32.176 --> 00:03:32.926 A:middle
还是无损压缩

00:03:33.136 --> 00:03:35.816 A:middle
它既要能应对

00:03:35.816 --> 00:03:38.486 A:middle
图像文件 也要能压缩

00:03:38.486 --> 00:03:41.456 A:middle
文本和图形

00:03:42.006 --> 00:03:45.286 A:middle
这种格式要适用于

00:03:45.286 --> 00:03:46.876 A:middle
现代 CPU GPU 和 ESP

00:03:46.876 --> 00:03:49.386 A:middle
具有的硬件加速

00:03:49.476 --> 00:03:51.896 A:middle
和编解码过程

00:03:52.696 --> 00:03:54.356 A:middle
性能和表现

00:03:54.356 --> 00:03:55.356 A:middle
在我们的要求中

00:03:55.426 --> 00:03:56.166 A:middle
权重是相当大的

00:03:56.776 --> 00:04:00.696 A:middle
它还要支持高深度

00:03:56.776 --> 00:04:00.696 A:middle
它还要支持高深度

00:04:01.006 --> 00:04:03.176 A:middle
和广色域这些

00:04:03.176 --> 00:04:05.376 A:middle
消费级设备拍摄的照片上

00:04:05.376 --> 00:04:07.206 A:middle
最先进的技术

00:04:08.466 --> 00:04:09.746 A:middle
要能够压缩

00:04:09.746 --> 00:04:13.266 A:middle
4:4:4 的色彩采样

00:04:13.266 --> 00:04:16.656 A:middle
也要能描述 HDR 内容

00:04:16.656 --> 00:04:19.226 A:middle
包括 HDR 元数据 传递函数

00:04:19.435 --> 00:04:20.976 A:middle
和色彩空间定义

00:04:22.886 --> 00:04:25.186 A:middle
至于辅助图像

00:04:25.186 --> 00:04:28.006 A:middle
例如透明度和深度

00:04:28.066 --> 00:04:30.206 A:middle
也需要在图像文件中

00:04:30.206 --> 00:04:30.756 A:middle
有通用的定义空间

00:04:31.556 --> 00:04:33.436 A:middle
新的编辑工具才能

00:04:33.436 --> 00:04:35.266 A:middle
应用辅助数据来

00:04:35.266 --> 00:04:36.956 A:middle
提供全新的呈现

00:04:36.956 --> 00:04:37.796 A:middle
和编辑体验

00:04:38.396 --> 00:04:41.416 A:middle
近几年 人们也开发了

00:04:41.416 --> 00:04:42.816 A:middle
新的方式来呈现

00:04:42.816 --> 00:04:44.006 A:middle
和显示动态图像

00:04:44.406 --> 00:04:46.046 A:middle
Apple 推出的 iPhoto 便是其中一例

00:04:46.706 --> 00:04:48.556 A:middle
iPhoto 既能呈现

00:04:48.556 --> 00:04:50.426 A:middle
动态内容 也能呈现

00:04:50.426 --> 00:04:50.926 A:middle
静态图像

00:04:52.006 --> 00:04:54.046 A:middle
新的通用格式要

00:04:54.046 --> 00:04:55.416 A:middle
能够高效存储

00:04:55.416 --> 00:04:57.416 A:middle
动态图像信息 理想状态下

00:04:57.416 --> 00:04:58.826 A:middle
要使用帧间压缩技术

00:04:59.216 --> 00:05:01.246 A:middle
还要能指导播放器

00:04:59.216 --> 00:05:01.246 A:middle
还要能指导播放器

00:05:01.246 --> 00:05:02.946 A:middle
进行呈现

00:05:03.136 --> 00:05:05.046 A:middle
例如 呈现循环的序列

00:05:06.116 --> 00:05:08.536 A:middle
新格式还应该

00:05:08.536 --> 00:05:10.126 A:middle
支持同一文件内

00:05:10.126 --> 00:05:10.716 A:middle
存储多个图像

00:05:11.006 --> 00:05:14.046 A:middle
例如一组多重曝光的图像

00:05:14.046 --> 00:05:15.756 A:middle
或是立体图像

00:05:16.556 --> 00:05:18.416 A:middle
这样便可以

00:05:18.416 --> 00:05:19.676 A:middle
为开发和应用

00:05:19.676 --> 00:05:20.926 A:middle
新的计算摄影算法

00:05:20.926 --> 00:05:21.656 A:middle
提供帮助

00:05:23.596 --> 00:05:26.216 A:middle
以多种方式呈现

00:05:26.216 --> 00:05:27.326 A:middle
同一图像文件的功能

00:05:27.326 --> 00:05:29.036 A:middle
也非常重要

00:05:29.676 --> 00:05:31.526 A:middle
例如 多分辨率呈现

00:05:31.526 --> 00:05:32.876 A:middle
这涉及到不断地

00:05:32.876 --> 00:05:35.366 A:middle
增加细节层次

00:05:35.366 --> 00:05:36.526 A:middle
或是能够呈现

00:05:36.526 --> 00:05:37.936 A:middle
由不同编解码器

00:05:37.936 --> 00:05:38.846 A:middle
编码的同一图像

00:05:40.216 --> 00:05:43.006 A:middle
图块也是新格式

00:05:43.006 --> 00:05:44.636 A:middle
必须采用的一项功能

00:05:45.606 --> 00:05:47.596 A:middle
这样便可以对任意大小的图片

00:05:47.596 --> 00:05:49.106 A:middle
采取可缩放的操作

00:05:49.446 --> 00:05:50.916 A:middle
图块相关的内容

00:05:50.916 --> 00:05:52.266 A:middle
会在稍后提到

00:05:53.366 --> 00:05:56.836 A:middle
新格式还要支持

00:05:56.836 --> 00:05:59.206 A:middle
文件中每个图像

00:05:59.206 --> 00:06:00.086 A:middle
相关的丰富元数据

00:05:59.206 --> 00:06:00.086 A:middle
相关的丰富元数据

00:06:00.306 --> 00:06:02.896 A:middle
同时也要支持时间数据

00:06:03.186 --> 00:06:04.836 A:middle
例如 一组照片序列

00:06:04.886 --> 00:06:05.456 A:middle
包含的时间数据

00:06:06.596 --> 00:06:08.726 A:middle
新格式还需要

00:06:08.726 --> 00:06:09.996 A:middle
能够包含

00:06:09.996 --> 00:06:12.026 A:middle
其他种类的元数据

00:06:12.026 --> 00:06:13.646 A:middle
例如音频或文本

00:06:13.916 --> 00:06:17.336 A:middle
最后一点 新格式

00:06:17.336 --> 00:06:19.016 A:middle
要有灵活性和可扩展性

00:06:19.016 --> 00:06:20.876 A:middle
为未来开发和应用

00:06:20.876 --> 00:06:22.686 A:middle
打下坚实基础

00:06:23.276 --> 00:06:28.396 A:middle
我们相信

00:06:28.396 --> 00:06:29.856 A:middle
HEIF 能够满足

00:06:29.856 --> 00:06:30.586 A:middle
以上所有需求

00:06:32.406 --> 00:06:33.076 A:middle
什么是 HEIF

00:06:33.966 --> 00:06:36.176 A:middle
HEIF 是 高效图像文件

00:06:36.176 --> 00:06:37.446 A:middle
的英文缩写

00:06:39.016 --> 00:06:41.176 A:middle
第一版技术参数

00:06:41.176 --> 00:06:44.846 A:middle
与 2015 年六月成为 ISO 标准

00:06:46.426 --> 00:06:48.286 A:middle
第二版也会

00:06:48.286 --> 00:06:49.236 A:middle
迅速面世

00:06:49.826 --> 00:06:53.366 A:middle
HEIF 的 C 类参考样板

00:06:53.366 --> 00:06:55.236 A:middle
已经公布 可以通过

00:06:55.236 --> 00:06:55.556 A:middle
访问这个链接获得

00:06:56.366 --> 00:06:57.696 A:middle
参考样板可以

00:06:57.696 --> 00:06:59.256 A:middle
指导 HEIF 的应用

00:06:59.256 --> 00:07:01.546 A:middle
也能帮助了解

00:06:59.256 --> 00:07:01.546 A:middle
也能帮助了解

00:07:01.546 --> 00:07:02.666 A:middle
相关技术参数

00:07:03.196 --> 00:07:05.976 A:middle
顺便一提 开源项目

00:07:05.976 --> 00:07:10.036 A:middle
GPAC/MP4Box 已于最近

00:07:10.036 --> 00:07:11.586 A:middle
针对 C 类文件

00:07:11.586 --> 00:07:12.676 A:middle
提供了基本功能

00:07:13.256 --> 00:07:17.756 A:middle
视频行业很久以前

00:07:17.756 --> 00:07:19.486 A:middle
就认识到 容器

00:07:19.486 --> 00:07:22.036 A:middle
和编解码器是不同的实体

00:07:22.036 --> 00:07:23.586 A:middle
将二者分开

00:07:23.586 --> 00:07:24.826 A:middle
有很多好处

00:07:25.436 --> 00:07:27.196 A:middle
但图像行业过去认为

00:07:27.196 --> 00:07:29.426 A:middle
容器和编解码器

00:07:29.476 --> 00:07:31.246 A:middle
应当紧密结合

00:07:31.246 --> 00:07:31.776 A:middle
JPEG 也不例外

00:07:32.546 --> 00:07:33.686 A:middle
图像行业也要做出这样的区分

00:07:33.686 --> 00:07:35.686 A:middle
这合情合理

00:07:36.266 --> 00:07:37.996 A:middle
因为这样才能

00:07:37.996 --> 00:07:38.806 A:middle
最大化灵活性

00:07:38.806 --> 00:07:40.996 A:middle
这正是 HEIF 所做的

00:07:40.996 --> 00:07:42.836 A:middle
它指定了一种结构格式

00:07:42.996 --> 00:07:45.546 A:middle
可以成为单张图像的容器

00:07:45.546 --> 00:07:47.316 A:middle
也能用于图像序列

00:07:48.706 --> 00:07:50.596 A:middle
它的基础是广泛应用的

00:07:50.596 --> 00:07:53.996 A:middle
ISO 基本媒体文件格式

00:07:54.396 --> 00:07:55.676 A:middle
这种格式又基于

00:07:55.676 --> 00:07:56.906 A:middle
Apple 的 QuickTime 技术

00:07:58.016 --> 00:07:59.736 A:middle
它还应用并改进了

00:07:59.736 --> 00:08:01.616 A:middle
在 MP4 的技术参数

00:07:59.736 --> 00:08:01.616 A:middle
在 MP4 的技术参数

00:08:01.616 --> 00:08:04.576 A:middle
和 MPEG-21 的技术参数中

00:08:04.576 --> 00:08:05.556 A:middle
指定的结构

00:08:06.316 --> 00:08:08.676 A:middle
各种序列 例如连拍快照和动画

00:08:08.676 --> 00:08:10.996 A:middle
是以轨道

00:08:11.176 --> 00:08:13.646 A:middle
或基于时间的媒体存储的 类似 MP4 标准

00:08:14.616 --> 00:08:17.446 A:middle
编码图像和衍生图像

00:08:17.446 --> 00:08:20.026 A:middle
则以项目的形式存储 类似 MPEG-21 标准

00:08:20.556 --> 00:08:23.826 A:middle
任何压缩编解码器

00:08:23.826 --> 00:08:25.166 A:middle
都能包含在 HEIF 容器中

00:08:25.956 --> 00:08:27.116 A:middle
HEIF 的技术参数中

00:08:27.146 --> 00:08:31.176 A:middle
直接提及了 HEVC H.264

00:08:31.366 --> 00:08:32.686 A:middle
和 JPEG 的扩展名

00:08:32.686 --> 00:08:34.746 A:middle
主类

00:08:35.076 --> 00:08:36.586 A:middle
以及解码器配置

00:08:38.096 --> 00:08:39.746 A:middle
HEIF 文件的基本构成部分

00:08:39.746 --> 00:08:42.126 A:middle
类似 ISO 基本媒体文件格式

00:08:42.126 --> 00:08:43.785 A:middle
这种数据格式

00:08:43.785 --> 00:08:45.166 A:middle
称为框

00:08:45.646 --> 00:08:47.736 A:middle
框由一个

00:08:47.736 --> 00:08:49.586 A:middle
四个字符的类构成

00:08:49.586 --> 00:08:51.316 A:middle
比如在右边的例子中

00:08:51.316 --> 00:08:54.856 A:middle
有 ftyp 框

00:08:54.856 --> 00:08:57.126 A:middle
元框和 mdat 框

00:08:58.216 --> 00:08:59.736 A:middle
框的大小由

00:08:59.736 --> 00:09:01.826 A:middle
框的字节数和载荷

00:08:59.736 --> 00:09:01.826 A:middle
框的字节数和载荷

00:09:01.826 --> 00:09:02.206 A:middle
所决定

00:09:02.786 --> 00:09:06.246 A:middle
元框完整描述了

00:09:06.246 --> 00:09:08.306 A:middle
这一文件内

00:09:08.306 --> 00:09:08.806 A:middle
包含的全部内容

00:09:09.036 --> 00:09:11.446 A:middle
元框的处理器类型

00:09:11.596 --> 00:09:15.036 A:middle
如果有人熟悉 ISO 基本媒体文件格式的话

00:09:15.766 --> 00:09:19.296 A:middle
应该清楚 元框的处理器类型

00:09:19.806 --> 00:09:22.856 A:middle
是 PICT  读取器便理解为

00:09:22.856 --> 00:09:25.126 A:middle
这个元框处理的是图像

00:09:25.736 --> 00:09:29.656 A:middle
在深入探讨 HEIF 文件

00:09:29.686 --> 00:09:32.136 A:middle
的结构之前 先来谈谈

00:09:32.136 --> 00:09:32.826 A:middle
文件的扩展名

00:09:34.156 --> 00:09:36.666 A:middle
标准明确规定

00:09:36.666 --> 00:09:38.376 A:middle
HEIF 文件的扩展名

00:09:38.376 --> 00:09:40.156 A:middle
依压缩单张图片

00:09:40.186 --> 00:09:41.996 A:middle
或图片序列

00:09:42.056 --> 00:09:43.666 A:middle
的编解码器而定

00:09:44.326 --> 00:09:45.766 A:middle
所有可能的扩展名

00:09:45.766 --> 00:09:47.506 A:middle
都能在这张表中找到

00:09:48.126 --> 00:09:51.716 A:middle
iOS 11 可以拍摄并存储

00:09:51.716 --> 00:09:54.136 A:middle
HEIF 图像 使用的

00:09:54.336 --> 00:09:54.746 A:middle
是 HEVC 编解码器

00:09:55.556 --> 00:09:57.346 A:middle
因此 你们经常遇到的扩展名

00:09:57.346 --> 00:09:59.546 A:middle
会是 .HEIC

00:10:00.936 --> 00:10:04.926 A:middle
在 iOS 11 和 macOS 10.13 中

00:10:04.926 --> 00:10:07.296 A:middle
我们支持全部三种

00:10:07.296 --> 00:10:09.596 A:middle
HEIF 文件的解码

00:10:09.596 --> 00:10:10.096 A:middle
以及显示

00:10:11.066 --> 00:10:13.976 A:middle
请注意 如果 HEIF 文件

00:10:13.976 --> 00:10:16.506 A:middle
包含序列 那么

00:10:16.506 --> 00:10:18.496 A:middle
它的扩展名

00:10:18.896 --> 00:10:20.806 A:middle
会与只包含单张图像

00:10:20.806 --> 00:10:21.346 A:middle
的 HEIF 文件有所不同

00:10:21.916 --> 00:10:26.946 A:middle
我们现在就来详细了解

00:10:26.946 --> 00:10:28.556 A:middle
HEIF 文件及其结构

00:10:29.126 --> 00:10:33.266 A:middle
首先先来谈谈

00:10:33.436 --> 00:10:33.866 A:middle
项这个概念

00:10:36.056 --> 00:10:38.446 A:middle
HEIF 文件中 每一个元素

00:10:38.446 --> 00:10:39.006 A:middle
就是一个项

00:10:40.186 --> 00:10:42.616 A:middle
项包括编码项

00:10:42.616 --> 00:10:45.036 A:middle
如 HEVC 编码的帧

00:10:45.036 --> 00:10:45.656 A:middle
或图块

00:10:46.996 --> 00:10:49.286 A:middle
还有派生项

00:10:49.286 --> 00:10:51.206 A:middle
如图像叠加

00:10:51.206 --> 00:10:51.866 A:middle
或图像栅格

00:10:53.426 --> 00:10:55.556 A:middle
也有元数据项

00:10:55.556 --> 00:10:59.016 A:middle
例如 EXIF XMP 或 MPEG-7

00:10:59.016 --> 00:10:59.576 A:middle
的元数据

00:11:00.226 --> 00:11:03.056 A:middle
每个项也有

00:11:03.056 --> 00:11:06.216 A:middle
与之相关联的

00:11:06.766 --> 00:11:06.846 A:middle
几个属性

00:11:07.166 --> 00:11:09.266 A:middle
由此 一切联系都通过

00:11:09.266 --> 00:11:11.806 A:middle
将项与其他项或属性

00:11:11.806 --> 00:11:13.506 A:middle
相互连接的结构

00:11:13.506 --> 00:11:14.176 A:middle
来实现

00:11:16.816 --> 00:11:19.076 A:middle
图像也是项

00:11:19.076 --> 00:11:20.846 A:middle
又因为多张图片

00:11:20.846 --> 00:11:22.896 A:middle
能存储在一个文件内

00:11:22.896 --> 00:11:24.786 A:middle
HEIF 标准通过

00:11:24.786 --> 00:11:26.596 A:middle
分配不同角色将其区分

00:11:26.596 --> 00:11:30.036 A:middle
HEIF 标准规定了一些角色

00:11:30.036 --> 00:11:32.816 A:middle
这些角色都能在

00:11:32.816 --> 00:11:33.186 A:middle
这张表中找到

00:11:33.986 --> 00:11:36.456 A:middle
主图像 或称封面图像

00:11:36.486 --> 00:11:38.216 A:middle
是一个文件的

00:11:38.216 --> 00:11:38.576 A:middle
代表图像

00:11:39.596 --> 00:11:40.986 A:middle
主图像应当在

00:11:40.986 --> 00:11:42.526 A:middle
播放器无法获取

00:11:42.526 --> 00:11:44.466 A:middle
或解码其他信息

00:11:44.466 --> 00:11:45.646 A:middle
的时候显示

00:11:46.456 --> 00:11:48.966 A:middle
一个 HEIF 文件

00:11:48.966 --> 00:11:51.746 A:middle
只能存在一个主图像

00:11:51.956 --> 00:11:53.656 A:middle
HEIF 文件中

00:11:53.656 --> 00:11:55.866 A:middle
其他的原分辨率图像

00:11:56.146 --> 00:11:56.686 A:middle
称为原图像

00:11:57.996 --> 00:11:59.636 A:middle
文件的缩略图

00:11:59.636 --> 00:12:01.166 A:middle
即是低分辨率的

00:11:59.636 --> 00:12:01.166 A:middle
即是低分辨率的

00:12:01.166 --> 00:12:01.856 A:middle
原图像

00:12:02.456 --> 00:12:04.336 A:middle
一个 HEIF 文件

00:12:04.336 --> 00:12:06.296 A:middle
可以存储多个

00:12:06.296 --> 00:12:07.346 A:middle
不同尺寸的缩略图

00:12:08.276 --> 00:12:10.306 A:middle
这对超高分辨率图像的

00:12:10.306 --> 00:12:11.976 A:middle
渐进解码

00:12:11.976 --> 00:12:13.796 A:middle
以及显示

00:12:13.796 --> 00:12:14.296 A:middle
大有帮助

00:12:14.856 --> 00:12:18.106 A:middle
辅助图像是指

00:12:18.106 --> 00:12:20.046 A:middle
补充原图像的图像

00:12:20.576 --> 00:12:22.426 A:middle
例如透明度层

00:12:22.426 --> 00:12:23.046 A:middle
或深度映射

00:12:23.826 --> 00:12:25.906 A:middle
辅助图像可以在

00:12:25.906 --> 00:12:28.086 A:middle
辅助显示原图像

00:12:28.086 --> 00:12:29.886 A:middle
但一般不显示

00:12:30.396 --> 00:12:32.536 A:middle
隐藏图像是指

00:12:32.536 --> 00:12:33.676 A:middle
永远不应显示的图像

00:12:33.866 --> 00:12:36.326 A:middle
它可以在文件中

00:12:36.486 --> 00:12:38.786 A:middle
以输入图像

00:12:38.786 --> 00:12:39.976 A:middle
或派生图像的形式存在

00:12:40.676 --> 00:12:43.506 A:middle
iOS 11 对 HEIF 的应用中

00:12:43.506 --> 00:12:45.386 A:middle
大量使用了隐藏图像

00:12:45.386 --> 00:12:46.336 A:middle
称为图块

00:12:47.056 --> 00:12:49.316 A:middle
每个图块都用来

00:12:49.316 --> 00:12:51.876 A:middle
显示最终的原图像或成品图像

00:12:52.486 --> 00:12:55.746 A:middle
派生图像

00:12:55.746 --> 00:12:58.456 A:middle
是指对特定输入图像

00:12:58.456 --> 00:13:01.016 A:middle
进行特定操作

00:12:58.456 --> 00:13:01.016 A:middle
进行特定操作

00:13:01.016 --> 00:13:02.166 A:middle
渲染得到的结果

00:13:02.416 --> 00:13:04.026 A:middle
例如 此前提到的

00:13:04.026 --> 00:13:06.056 A:middle
成品图像便是

00:13:06.056 --> 00:13:07.476 A:middle
拼接不同图块后

00:13:07.476 --> 00:13:08.436 A:middle
渲染得到的

00:13:09.816 --> 00:13:11.496 A:middle
等价图像是指

00:13:11.646 --> 00:13:13.526 A:middle
可用于替换的图像

00:13:13.526 --> 00:13:15.186 A:middle
可以用不同的编解码器编码得到

00:13:15.896 --> 00:13:17.456 A:middle
服务器可以将

00:13:17.456 --> 00:13:19.416 A:middle
相同的输入内容

00:13:19.416 --> 00:13:20.936 A:middle
分发给解码能力不同的

00:13:20.936 --> 00:13:21.666 A:middle
播放器

00:13:22.156 --> 00:13:26.326 A:middle
一旦每张图片

00:13:26.326 --> 00:13:28.886 A:middle
都有了对应的角色

00:13:28.886 --> 00:13:29.946 A:middle
便可赋予其相关联的属性

00:13:30.956 --> 00:13:32.016 A:middle
属性可以是描述性的

00:13:32.016 --> 00:13:34.016 A:middle
也可以是编辑性的

00:13:34.726 --> 00:13:36.416 A:middle
可以是必需的

00:13:36.416 --> 00:13:37.836 A:middle
例如编解码器的

00:13:37.836 --> 00:13:39.536 A:middle
初始化信息

00:13:39.536 --> 00:13:40.316 A:middle
也可以是非必需的

00:13:40.876 --> 00:13:43.246 A:middle
这张表列举了了

00:13:43.246 --> 00:13:44.386 A:middle
HEIF 文件中

00:13:44.386 --> 00:13:46.456 A:middle
图像具有的

00:13:46.456 --> 00:13:47.946 A:middle
部分描述性属性

00:13:48.786 --> 00:13:50.026 A:middle
这里可以找到

00:13:50.026 --> 00:13:51.276 A:middle
最常见的一些信息

00:13:51.276 --> 00:13:53.366 A:middle
例如图像尺寸

00:13:53.366 --> 00:13:55.636 A:middle
颜色信息

00:13:55.636 --> 00:13:57.636 A:middle
辅助图像

00:13:57.636 --> 00:14:00.046 A:middle
如透明度和深度 还有

00:13:57.636 --> 00:14:00.046 A:middle
如透明度和深度 还有

00:14:00.046 --> 00:14:01.556 A:middle
编解码器初始化的

00:14:01.556 --> 00:14:02.726 A:middle
一些配置参数

00:14:03.296 --> 00:14:05.926 A:middle
这张表中

00:14:05.926 --> 00:14:06.866 A:middle
则列举了部分

00:14:06.866 --> 00:14:08.346 A:middle
编辑性属性

00:14:09.036 --> 00:14:10.546 A:middle
这些属性

00:14:10.816 --> 00:14:11.926 A:middle
能够告诉 HEIF 分析器

00:14:12.176 --> 00:14:15.936 A:middle
图像需要经过

00:14:15.936 --> 00:14:17.836 A:middle
一些额外修改

00:14:17.836 --> 00:14:18.346 A:middle
才能最终显示

00:14:18.956 --> 00:14:20.856 A:middle
例如 清除光圈

00:14:20.856 --> 00:14:23.116 A:middle
这一属性会告诉 HEIF 读取器

00:14:23.596 --> 00:14:26.916 A:middle
必须先裁剪图像

00:14:26.916 --> 00:14:28.936 A:middle
再对图像进行

00:14:28.936 --> 00:14:29.686 A:middle
最后渲染

00:14:30.256 --> 00:14:34.126 A:middle
每张图像的所有属性

00:14:34.126 --> 00:14:36.436 A:middle
都包括在同一个

00:14:36.436 --> 00:14:38.256 A:middle
名为属性框的项目中

00:14:39.366 --> 00:14:41.686 A:middle
借此 每张图片

00:14:41.686 --> 00:14:43.746 A:middle
都可以通过属性框

00:14:43.746 --> 00:14:45.106 A:middle
来关联属性

00:14:45.846 --> 00:14:47.916 A:middle
我们会用一个例子

00:14:47.916 --> 00:14:49.726 A:middle
来描述关联属性

00:14:49.726 --> 00:14:50.096 A:middle
是如何工作的

00:14:51.526 --> 00:14:53.726 A:middle
左边的 HEIF 容器

00:14:53.726 --> 00:14:56.266 A:middle
表示这个文件

00:14:56.326 --> 00:14:58.076 A:middle
包括一个主图像和一个缩略图

00:14:58.826 --> 00:15:00.896 A:middle
主图像又由

00:14:58.826 --> 00:15:00.896 A:middle
主图像又由

00:15:00.896 --> 00:15:01.766 A:middle
四个图块组成

00:15:02.676 --> 00:15:05.796 A:middle
项属性框 即 ipco 框

00:15:05.796 --> 00:15:08.596 A:middle
包含所有解码器配置

00:15:08.596 --> 00:15:10.356 A:middle
还包含着

00:15:10.356 --> 00:15:12.386 A:middle
主图像 图块

00:15:13.506 --> 00:15:15.276 A:middle
和缩略图的尺寸数据

00:15:15.276 --> 00:15:18.246 A:middle
请注意 这个框中

00:15:18.246 --> 00:15:18.896 A:middle
顺序是有意义的

00:15:19.426 --> 00:15:24.166 A:middle
右边的关联框 即 ipma 框

00:15:24.566 --> 00:15:27.286 A:middle
将所有属性

00:15:27.386 --> 00:15:29.656 A:middle
按照位置

00:15:29.846 --> 00:15:31.436 A:middle
与文件中的项 ID 关联

00:15:31.996 --> 00:15:33.936 A:middle
如前所述

00:15:33.936 --> 00:15:35.846 A:middle
这个文件中共有六个项

00:15:36.026 --> 00:15:38.776 A:middle
一个图像 四个图块

00:15:38.776 --> 00:15:39.216 A:middle
和一个缩略图

00:15:41.386 --> 00:15:43.786 A:middle
项 1 至 4 是图块

00:15:44.256 --> 00:15:46.316 A:middle
是隐藏图像

00:15:46.386 --> 00:15:48.926 A:middle
属性是位置 1

00:15:48.926 --> 00:15:50.536 A:middle
即解码器配置

00:15:50.536 --> 00:15:53.166 A:middle
和位置 2  即尺寸

00:15:53.166 --> 00:15:55.756 A:middle
为 500 x 500 像素

00:15:56.666 --> 00:15:58.436 A:middle
项 5 为 主图像

00:15:59.576 --> 00:16:01.256 A:middle
只具有尺寸属性

00:15:59.576 --> 00:16:01.256 A:middle
只具有尺寸属性

00:16:01.256 --> 00:16:03.656 A:middle
因为这是一个

00:16:03.656 --> 00:16:04.636 A:middle
派生图像

00:16:05.396 --> 00:16:07.656 A:middle
它的尺寸

00:16:07.656 --> 00:16:08.196 A:middle
为 1000 x 1000 像素

00:16:09.746 --> 00:16:11.616 A:middle
接下来 我们会简要谈一下

00:16:11.616 --> 00:16:13.276 A:middle
HEIF 中的图像序列

00:16:13.886 --> 00:16:17.146 A:middle
嵌入序列的 HEIF 文件

00:16:17.146 --> 00:16:20.496 A:middle
包含 moov 框

00:16:20.496 --> 00:16:22.676 A:middle
和 moov 框的分框

00:16:22.676 --> 00:16:23.096 A:middle
等框体

00:16:24.436 --> 00:16:26.366 A:middle
moov 框的完整定义

00:16:26.366 --> 00:16:28.976 A:middle
包含在 ISO MP4 文件格式

00:16:28.976 --> 00:16:30.996 A:middle
的技术参数中

00:16:30.996 --> 00:16:31.566 A:middle
HEIF 便是由此而来

00:16:32.696 --> 00:16:34.436 A:middle
每个图像或取样的序列

00:16:34.436 --> 00:16:37.326 A:middle
都由 trak 框描述

00:16:37.326 --> 00:16:39.856 A:middle
其中包含了播放轨道

00:16:39.856 --> 00:16:41.186 A:middle
所需要的一切

00:16:41.186 --> 00:16:42.536 A:middle
时间信息

00:16:43.836 --> 00:16:45.626 A:middle
HEIF 规定了一个全新的

00:16:45.626 --> 00:16:49.336 A:middle
处理图像的轨道处理器 称为 pict.

00:16:50.276 --> 00:16:51.796 A:middle
主要区别在于

00:16:51.796 --> 00:16:53.366 A:middle
音频或视频

00:16:53.366 --> 00:16:54.976 A:middle
包含的时间信息

00:16:54.976 --> 00:16:56.556 A:middle
能够用于同步播放进度

00:16:57.446 --> 00:16:59.026 A:middle
图像序列轨道

00:16:59.026 --> 00:17:01.116 A:middle
包含的时间信息则能够代表

00:16:59.026 --> 00:17:01.116 A:middle
包含的时间信息则能够代表

00:17:01.116 --> 00:17:02.886 A:middle
连拍快照的拍摄时间

00:17:02.886 --> 00:17:04.786 A:middle
或是派生幻灯片中

00:17:04.786 --> 00:17:06.726 A:middle
每个单张图像

00:17:06.726 --> 00:17:08.665 A:middle
建议的显示时间

00:17:12.316 --> 00:17:14.376 A:middle
也可以为图像序列

00:17:14.376 --> 00:17:15.336 A:middle
指定角色

00:17:15.675 --> 00:17:17.455 A:middle
例如  HEIF 文件

00:17:17.455 --> 00:17:19.715 A:middle
内嵌缩略图轨道

00:17:19.715 --> 00:17:21.215 A:middle
或辅助图像轨道

00:17:21.215 --> 00:17:22.665 A:middle
并与原图像轨道

00:17:23.415 --> 00:17:23.546 A:middle
相关联

00:17:24.935 --> 00:17:26.316 A:middle
HEIF 最重要的特性之一

00:17:26.316 --> 00:17:27.836 A:middle
就是能在文件中

00:17:27.836 --> 00:17:29.696 A:middle
嵌入创造者的指令

00:17:29.696 --> 00:17:31.546 A:middle
并以此来实现

00:17:31.546 --> 00:17:32.286 A:middle
对播放的控制

00:17:32.866 --> 00:17:34.266 A:middle
例如 编辑列表

00:17:34.266 --> 00:17:36.106 A:middle
能够改变每个采样的

00:17:36.106 --> 00:17:39.006 A:middle
播放顺序和速度

00:17:40.076 --> 00:17:42.616 A:middle
HEIF 还允许

00:17:42.616 --> 00:17:44.406 A:middle
编辑列表的重复

00:17:44.406 --> 00:17:46.306 A:middle
可以实现循环动画等功能

00:17:47.346 --> 00:17:49.616 A:middle
重复的次数

00:17:49.616 --> 00:17:51.296 A:middle
可以为特定值

00:17:51.436 --> 00:17:52.496 A:middle
也可以无限重复

00:17:53.016 --> 00:17:56.636 A:middle
由于 HEIF 中

00:17:56.636 --> 00:17:59.216 A:middle
轨道符合 ISO 标准

00:17:59.216 --> 00:18:00.946 A:middle
便可以实现帧间预测

00:17:59.216 --> 00:18:00.946 A:middle
便可以实现帧间预测

00:18:01.276 --> 00:18:03.476 A:middle
帧间预测是指

00:18:03.476 --> 00:18:06.136 A:middle
移除部分编码信息

00:18:06.136 --> 00:18:07.736 A:middle
而通过此前

00:18:07.736 --> 00:18:09.596 A:middle
或之后的相似帧

00:18:09.596 --> 00:18:11.036 A:middle
来进行预测

00:18:11.036 --> 00:18:11.446 A:middle
并生成当前帧

00:18:12.216 --> 00:18:13.616 A:middle
这一点

00:18:13.616 --> 00:18:14.706 A:middle
对于压缩

00:18:14.706 --> 00:18:15.286 A:middle
意义非凡

00:18:16.446 --> 00:18:17.936 A:middle
帧间预测也能

00:18:18.106 --> 00:18:20.616 A:middle
延缓解码时间

00:18:21.146 --> 00:18:22.956 A:middle
因为必须

00:18:22.956 --> 00:18:24.616 A:middle
先解码前一帧

00:18:24.616 --> 00:18:25.616 A:middle
才能够解码

00:18:25.616 --> 00:18:25.876 A:middle
当前帧

00:18:26.996 --> 00:18:28.846 A:middle
HEIF 允许帧间预测

00:18:29.186 --> 00:18:31.586 A:middle
但也在文件中

00:18:31.586 --> 00:18:33.146 A:middle
限制了帧与帧的

00:18:33.146 --> 00:18:34.186 A:middle
相互依赖

00:18:34.706 --> 00:18:36.156 A:middle
比方说

00:18:36.156 --> 00:18:38.326 A:middle
每一个预测生成的图像

00:18:38.326 --> 00:18:40.206 A:middle
都只能指向已经预测生成的图像

00:18:40.296 --> 00:18:40.896 A:middle
即内部帧

00:18:41.516 --> 00:18:42.946 A:middle
如此一来 解码序列中

00:18:42.946 --> 00:18:44.626 A:middle
每一帧的时间

00:18:44.686 --> 00:18:45.546 A:middle
就可以预先确定

00:18:45.916 --> 00:18:51.116 A:middle
最后一点  HEIF 图像

00:18:51.116 --> 00:18:55.756 A:middle
可以分割成不同图块

00:18:55.936 --> 00:18:57.916 A:middle
图块是指图像中的

00:18:57.916 --> 00:18:58.836 A:middle
长方形区域

00:18:59.176 --> 00:19:00.776 A:middle
它们在 HEIF 文件中

00:18:59.176 --> 00:19:00.776 A:middle
它们在 HEIF 文件中

00:19:00.776 --> 00:19:03.116 A:middle
是完全独立的项

00:19:03.116 --> 00:19:04.986 A:middle
尺寸可以相同

00:19:04.986 --> 00:19:05.436 A:middle
也可以不同

00:19:06.066 --> 00:19:07.916 A:middle
如果尺寸不同

00:19:07.916 --> 00:19:09.496 A:middle
那么相对位置属性

00:19:09.496 --> 00:19:10.936 A:middle
便可以描述它们

00:19:10.936 --> 00:19:11.626 A:middle
在最终图像中所处的位置

00:19:12.276 --> 00:19:14.046 A:middle
如果尺寸相同

00:19:14.046 --> 00:19:14.956 A:middle
那么最终图像便会以

00:19:15.226 --> 00:19:20.546 A:middle
栅格的形式描述 因为以下几点

00:19:20.546 --> 00:19:22.356 A:middle
图块使得 HEIF 高度灵活

00:19:23.216 --> 00:19:25.796 A:middle
播放器可以充分利用并行处理

00:19:25.796 --> 00:19:26.556 A:middle
缩减解码时间

00:19:26.776 --> 00:19:28.466 A:middle
比方说 每个图块

00:19:28.466 --> 00:19:30.136 A:middle
都可以分别

00:19:30.136 --> 00:19:30.646 A:middle
且单独解码

00:19:31.836 --> 00:19:33.476 A:middle
图块可以降低改变图片尺寸

00:19:33.476 --> 00:19:35.586 A:middle
所需的内存大小

00:19:35.586 --> 00:19:37.816 A:middle
因为无需解码

00:19:37.816 --> 00:19:39.226 A:middle
整张图片之后

00:19:39.226 --> 00:19:41.416 A:middle
再进行操作 每个图块

00:19:41.416 --> 00:19:42.886 A:middle
都能单独解码

00:19:42.886 --> 00:19:44.926 A:middle
并改变大尺寸 再置于

00:19:44.926 --> 00:19:46.566 A:middle
较小的缓存中进行渲染

00:19:47.476 --> 00:19:49.196 A:middle
裁剪图像速度也很快

00:19:49.846 --> 00:19:51.096 A:middle
因为播放器不需要

00:19:51.096 --> 00:19:52.256 A:middle
解码整个图像

00:19:52.256 --> 00:19:53.776 A:middle
再提取特定区域

00:19:54.506 --> 00:19:56.046 A:middle
这一属性

00:19:56.046 --> 00:19:57.666 A:middle
在缩放操作中也格外有用

00:19:58.506 --> 00:20:00.746 A:middle
例如 一张数十亿像素的图像

00:19:58.506 --> 00:20:00.746 A:middle
例如 一张数十亿像素的图像

00:20:00.746 --> 00:20:02.776 A:middle
可以轻而易举地解码 显示

00:20:02.966 --> 00:20:05.056 A:middle
放大 而不需要

00:20:05.056 --> 00:20:06.306 A:middle
解码整张图像

00:20:06.306 --> 00:20:08.146 A:middle
并占用数十亿位的

00:20:08.206 --> 00:20:08.636 A:middle
缓存

00:20:08.636 --> 00:20:13.386 A:middle
同时 图块还可以

00:20:13.386 --> 00:20:16.666 A:middle
用作编码工具

00:20:17.126 --> 00:20:18.966 A:middle
智能编码器

00:20:18.966 --> 00:20:20.676 A:middle
可以根据图块内容的不同

00:20:20.676 --> 00:20:24.136 A:middle
做出不同选择

00:20:24.706 --> 00:20:26.616 A:middle
Apple 在使用 HEIF 的过程中

00:20:26.646 --> 00:20:27.836 A:middle
大量使用了图块

00:20:28.466 --> 00:20:30.606 A:middle
但要注意  HEVC 的技术参数

00:20:30.606 --> 00:20:32.476 A:middle
同样支持

00:20:32.666 --> 00:20:34.786 A:middle
将每帧分成图块

00:20:34.786 --> 00:20:36.186 A:middle
用作并行处理

00:20:36.526 --> 00:20:39.376 A:middle
Apple 对图块的应用

00:20:39.376 --> 00:20:41.786 A:middle
并非按照 HEVC 的规定 而是每个图块

00:20:41.786 --> 00:20:44.636 A:middle
都是一个完整的 HEVC 帧

00:20:44.636 --> 00:20:45.926 A:middle
我们称其为系统图块

00:20:48.526 --> 00:20:51.236 A:middle
接下来 我们谈谈 HEVC

00:20:51.296 --> 00:20:53.386 A:middle
也是 Apple 用来压缩

00:20:53.386 --> 00:20:54.756 A:middle
HEIF 照片的编解码器

00:20:55.386 --> 00:20:59.306 A:middle
选择 HEVC

00:20:59.306 --> 00:21:00.196 A:middle
有两大原因

00:20:59.306 --> 00:21:00.196 A:middle
有两大原因

00:21:00.196 --> 00:21:03.546 A:middle
首先 HEVC

00:21:03.546 --> 00:21:05.796 A:middle
是压缩标准领域

00:21:05.796 --> 00:21:06.576 A:middle
最先进的技术

00:21:07.246 --> 00:21:09.526 A:middle
在画质相同的情况下

00:21:09.616 --> 00:21:11.646 A:middle
HEVC 的压缩率平均

00:21:12.166 --> 00:21:13.476 A:middle
是 JPEG 压缩率

00:21:13.476 --> 00:21:13.956 A:middle
的两倍

00:21:14.396 --> 00:21:17.866 A:middle
第二 HEVC 开始得到

00:21:17.866 --> 00:21:19.726 A:middle
绝大多数 CPU

00:21:19.726 --> 00:21:20.386 A:middle
和 GPU 的硬件支持

00:21:20.966 --> 00:21:22.536 A:middle
例如 Intel 的第六代

00:21:22.536 --> 00:21:24.296 A:middle
Core 处理器就包含

00:21:24.296 --> 00:21:26.096 A:middle
对 HEVC 的

00:21:26.096 --> 00:21:26.806 A:middle
硬件支持

00:21:27.176 --> 00:21:29.056 A:middle
这意味着

00:21:29.056 --> 00:21:30.886 A:middle
表现出众

00:21:30.886 --> 00:21:33.126 A:middle
而不需要牺牲续航时间

00:21:35.576 --> 00:21:37.606 A:middle
一些帧内编码工具

00:21:37.606 --> 00:21:39.596 A:middle
也加入到了标准之中

00:21:39.596 --> 00:21:42.276 A:middle
使得 HEVC 的表现超过了 JPEG

00:21:42.276 --> 00:21:44.446 A:middle
接下来的几张幻灯片

00:21:44.446 --> 00:21:45.216 A:middle
会提到一些

00:21:45.736 --> 00:21:47.426 A:middle
你会注意到

00:21:47.546 --> 00:21:49.636 A:middle
我们总会讲到灵活性

00:21:50.116 --> 00:21:53.316 A:middle
首先是区块尺寸

00:21:54.296 --> 00:21:57.276 A:middle
JPEG 将图像分割成

00:21:57.276 --> 00:21:59.816 A:middle
由 8 x 8 像素的区块构成的栅格

00:22:00.246 --> 00:22:02.986 A:middle
接下来 这些区块被描述

00:22:03.406 --> 00:22:05.846 A:middle
转化和量化

00:22:06.416 --> 00:22:09.476 A:middle
HEVC 的灵活性

00:22:09.476 --> 00:22:11.356 A:middle
使其能将图像

00:22:11.356 --> 00:22:14.526 A:middle
划分为大至 64 x 64 像素

00:22:14.986 --> 00:22:16.596 A:middle
小至 4 x 4 像素的区块

00:22:17.296 --> 00:22:19.116 A:middle
也可以在区块内部

00:22:19.116 --> 00:22:20.536 A:middle
灵活转换尺寸

00:22:21.446 --> 00:22:22.996 A:middle
标准新增了

00:22:23.076 --> 00:22:24.616 A:middle
离散尺寸转换功能

00:22:24.616 --> 00:22:26.596 A:middle
作为可选项

00:22:26.596 --> 00:22:28.196 A:middle
还为编码系数的编组

00:22:28.196 --> 00:22:29.706 A:middle
增加了三种可用的

00:22:29.706 --> 00:22:30.406 A:middle
扫描顺序

00:22:30.806 --> 00:22:33.646 A:middle
接下来是区块预测

00:22:34.846 --> 00:22:36.656 A:middle
JPEG 支持预测 8 x 8 大小区块

00:22:36.656 --> 00:22:38.816 A:middle
左上角的系数

00:22:38.816 --> 00:22:40.826 A:middle
这一系数又称 DC 分量

00:22:40.826 --> 00:22:43.266 A:middle
或恒定分量

00:22:43.266 --> 00:22:44.736 A:middle
依据则是这一区块

00:22:44.736 --> 00:22:45.126 A:middle
左侧的区块

00:22:45.996 --> 00:22:48.996 A:middle
HEVC 又增加了

00:22:48.996 --> 00:22:51.216 A:middle
在区块内部预测每一个像素值

00:22:51.216 --> 00:22:51.646 A:middle
的功能

00:22:51.906 --> 00:22:54.556 A:middle
角度预测范围

00:22:54.556 --> 00:22:55.016 A:middle
最多可达 35 种

00:22:55.686 --> 00:22:57.286 A:middle
还可以运用

00:22:57.286 --> 00:22:59.106 A:middle
相邻区块中

00:22:59.106 --> 00:23:01.016 A:middle
包含的相似信息

00:22:59.106 --> 00:23:01.016 A:middle
包含的相似信息

00:23:01.016 --> 00:23:02.486 A:middle
来消除冗余信息

00:23:02.886 --> 00:23:04.146 A:middle
这也是 HEVC 内置的

00:23:04.146 --> 00:23:05.946 A:middle
高效工具之一

00:23:07.506 --> 00:23:08.296 A:middle
下一项是熵编码

00:23:09.416 --> 00:23:11.646 A:middle
JPEG 使用 Huffman 编码

00:23:11.646 --> 00:23:13.456 A:middle
作为统计编码的引擎

00:23:13.516 --> 00:23:15.816 A:middle
这是为了将

00:23:15.816 --> 00:23:17.736 A:middle
可变长编码

00:23:17.736 --> 00:23:18.416 A:middle
赋值给输入的系数

00:23:19.596 --> 00:23:21.256 A:middle
赋给系数的长编码

00:23:21.256 --> 00:23:23.156 A:middle
长度越短

00:23:23.156 --> 00:23:24.016 A:middle
效率也越高

00:23:25.136 --> 00:23:28.006 A:middle
而 HEVC 则是采用

00:23:28.006 --> 00:23:30.266 A:middle
一种算法编码器 称为 CABAC

00:23:30.776 --> 00:23:32.506 A:middle
是 上下文参考

00:23:32.506 --> 00:23:34.226 A:middle
二进制算术编码

00:23:34.296 --> 00:23:34.666 A:middle
的缩写

00:23:34.776 --> 00:23:37.766 A:middle
CABAC 因

00:23:37.766 --> 00:23:39.856 A:middle
压缩率显著高于

00:23:39.856 --> 00:23:41.576 A:middle
其他大多数熵编码算法

00:23:41.576 --> 00:23:42.306 A:middle
而知名

00:23:44.656 --> 00:23:45.656 A:middle
下一项是量化

00:23:46.566 --> 00:23:48.906 A:middle
量化是一项有损

00:23:48.906 --> 00:23:50.836 A:middle
压缩技术 通过

00:23:50.836 --> 00:23:52.656 A:middle
压缩一个取值范围

00:23:53.146 --> 00:23:54.696 A:middle
为单一量化值而实现

00:23:55.586 --> 00:23:57.856 A:middle
JPEG 对每个

00:23:57.856 --> 00:24:00.336 A:middle
8 x 8 的区块使用全局

00:23:57.856 --> 00:24:00.336 A:middle
8 x 8 的区块使用全局

00:24:00.376 --> 00:24:01.236 A:middle
量化矩阵

00:24:02.376 --> 00:24:04.716 A:middle
HEVC 则在量化矩阵之上

00:24:04.716 --> 00:24:07.456 A:middle
增进了灵活性 添加了

00:24:07.456 --> 00:24:08.546 A:middle
为每个区块

00:24:08.546 --> 00:24:10.136 A:middle
赋不同的量化参数

00:24:10.136 --> 00:24:10.446 A:middle
的功能

00:24:11.186 --> 00:24:12.896 A:middle
这样一来 智能编码算法

00:24:12.896 --> 00:24:15.276 A:middle
就能压缩更多

00:24:15.356 --> 00:24:17.176 A:middle
图像上更多的区域

00:24:17.176 --> 00:24:18.816 A:middle
而人类视觉系统

00:24:18.816 --> 00:24:22.056 A:middle
就更难捕捉到人为差异

00:24:22.546 --> 00:24:23.796 A:middle
例如 频率高的

00:24:23.796 --> 00:24:24.376 A:middle
内容

00:24:24.926 --> 00:24:28.276 A:middle
再接下来是去除区块边界

00:24:28.276 --> 00:24:30.256 A:middle
这项工具仅有 HEVC 支持

00:24:31.396 --> 00:24:33.806 A:middle
人工边界是指

00:24:33.806 --> 00:24:35.996 A:middle
区块边缘可见的

00:24:35.996 --> 00:24:36.816 A:middle
不连续区域

00:24:36.816 --> 00:24:39.856 A:middle
HEVC 包含去区块滤波器

00:24:39.856 --> 00:24:42.396 A:middle
这种滤波器应用于

00:24:42.626 --> 00:24:44.446 A:middle
区块边缘的像素

00:24:44.446 --> 00:24:46.296 A:middle
使过度更平滑

00:24:46.296 --> 00:24:49.886 A:middle
视觉效果也更好

00:24:49.886 --> 00:24:51.636 A:middle
SAO  也就是

00:24:51.636 --> 00:24:53.946 A:middle
取样自适应偏移 是

00:24:54.106 --> 00:24:56.956 A:middle
HEVC 中一道额外的滤波器

00:24:57.386 --> 00:24:59.526 A:middle
应用于去区块滤波器

00:24:59.526 --> 00:25:01.776 A:middle
作用的结果 来进一步

00:24:59.526 --> 00:25:01.776 A:middle
作用的结果 来进一步

00:25:01.776 --> 00:25:02.856 A:middle
改善图像质量

00:25:03.456 --> 00:25:05.166 A:middle
这是一种局部滤波器 能够

00:25:05.166 --> 00:25:07.996 A:middle
减弱边缘振荡效应

00:25:08.046 --> 00:25:09.826 A:middle
在图片的某些区域

00:25:09.826 --> 00:25:11.906 A:middle
改变取样密度

00:25:11.906 --> 00:25:13.086 A:middle
以提升画质

00:25:14.376 --> 00:25:17.306 A:middle
这两项技术都能

00:25:17.486 --> 00:25:19.716 A:middle
使图像更赏心悦目

00:25:19.716 --> 00:25:20.836 A:middle
尤其是压缩率很高

00:25:20.836 --> 00:25:21.096 A:middle
的时候

00:25:22.346 --> 00:25:23.586 A:middle
我们已经讲了很多

00:25:23.586 --> 00:25:25.096 A:middle
HEIF 和 HEVC 的特性

00:25:25.096 --> 00:25:27.146 A:middle
和工具 我想再花一点时间

00:25:27.146 --> 00:25:29.076 A:middle
讲一讲 iOS 11

00:25:29.076 --> 00:25:32.436 A:middle
拍摄的 HEIF 文件

00:25:32.436 --> 00:25:32.866 A:middle
的一些特点

00:25:33.846 --> 00:25:36.746 A:middle
首先  iOS 11 上

00:25:36.746 --> 00:25:39.446 A:middle
拍摄的图像 扩展名

00:25:39.446 --> 00:25:42.316 A:middle
为 .HEIC  因为使用了 HEVC

00:25:42.316 --> 00:25:43.196 A:middle
作编解码器

00:25:44.726 --> 00:25:46.936 A:middle
用于压缩图像的

00:25:46.936 --> 00:25:48.766 A:middle
HEVC 配置文件

00:25:48.766 --> 00:25:49.626 A:middle
是主静止配置

00:25:50.396 --> 00:25:53.206 A:middle
我们还使用 HEVC 的

00:25:53.206 --> 00:25:54.906 A:middle
单色配置文件处理深度数据

00:25:57.016 --> 00:25:59.556 A:middle
图像使用 512 x 512 像素

00:25:59.556 --> 00:26:03.686 A:middle
的区块进行编码

00:25:59.556 --> 00:26:03.686 A:middle
的区块进行编码

00:26:03.756 --> 00:26:05.606 A:middle
区块以栅格的形式

00:26:05.606 --> 00:26:07.026 A:middle
进行定位 覆盖

00:26:07.026 --> 00:26:07.416 A:middle
整个图像

00:26:08.356 --> 00:26:11.986 A:middle
缩略图为 320 x 240 像素

00:26:11.986 --> 00:26:14.196 A:middle
的图像 用 HEVC 编码

00:26:15.326 --> 00:26:17.106 A:middle
是常见 160 x 120 像素大小

00:26:17.106 --> 00:26:20.016 A:middle
JPEG 缩略图的四倍

00:26:20.096 --> 00:26:22.116 A:middle
这有助于在高像素密度

00:26:22.116 --> 00:26:24.106 A:middle
的现代显示屏上

00:26:24.106 --> 00:26:26.276 A:middle
显示图像时 呈现

00:26:26.276 --> 00:26:28.306 A:middle
更高的缩略图画质

00:26:29.526 --> 00:26:31.726 A:middle
EXIF 元数据也包含在

00:26:31.726 --> 00:26:34.156 A:middle
HEIF 文件中 像 JPEG 一样

00:26:34.156 --> 00:26:34.896 A:middle
以确保向后兼容性

00:26:36.586 --> 00:26:39.076 A:middle
深度数据以

00:26:39.076 --> 00:26:42.636 A:middle
辅助图像的形式存储

00:26:42.786 --> 00:26:44.676 A:middle
相关元数据存储在

00:26:44.676 --> 00:26:47.686 A:middle
与深度图像相关联的

00:26:47.686 --> 00:26:48.376 A:middle
XMP 载荷中

00:26:48.936 --> 00:26:52.886 A:middle
最后 讲一下

00:26:52.886 --> 00:26:53.516 A:middle
文件生成

00:26:54.586 --> 00:26:56.626 A:middle
HEIF 标准没有

00:26:56.626 --> 00:26:59.166 A:middle
读取器在文件顶层

00:26:59.166 --> 00:27:00.776 A:middle
读取框体的

00:26:59.166 --> 00:27:00.776 A:middle
读取框体的

00:27:00.776 --> 00:27:02.776 A:middle
顺序 但我们

00:27:02.776 --> 00:27:04.496 A:middle
发现 排列成特定顺序

00:27:04.496 --> 00:27:06.556 A:middle
能够极大帮助

00:27:06.556 --> 00:27:08.056 A:middle
分析器和解码器

00:27:08.856 --> 00:27:10.206 A:middle
比方说

00:27:10.206 --> 00:27:11.846 A:middle
让缩略图排位靠前

00:27:11.946 --> 00:27:13.806 A:middle
可以分析并显示

00:27:14.206 --> 00:27:15.876 A:middle
大量 HEIF 图像

00:27:15.906 --> 00:27:17.726 A:middle
而不需要先分析

00:27:17.816 --> 00:27:18.526 A:middle
整个文件

00:27:19.566 --> 00:27:21.286 A:middle
为实现高速传输

00:27:21.286 --> 00:27:23.876 A:middle
或网页应用 一旦接受到元框

00:27:23.876 --> 00:27:26.096 A:middle
那么就可以获取

00:27:26.096 --> 00:27:27.626 A:middle
文件的全部信息

00:27:27.836 --> 00:27:29.556 A:middle
读取器就可以

00:27:29.556 --> 00:27:31.716 A:middle
配置解码器和

00:27:31.716 --> 00:27:34.676 A:middle
显示过程 而不需要

00:27:34.676 --> 00:27:35.976 A:middle
获取完整的编码数据

00:27:42.046 --> 00:27:43.916 A:middle
让我们来总结一下

00:27:44.176 --> 00:27:45.626 A:middle
今天讲到的内容

00:27:45.806 --> 00:27:47.496 A:middle
摄影界需要一种

00:27:47.496 --> 00:27:49.316 A:middle
更好的图像文件格式

00:27:49.316 --> 00:27:51.186 A:middle
来取代垂垂老矣的 JPEG

00:27:51.186 --> 00:27:55.056 A:middle
我们逐一分析了

00:27:55.056 --> 00:27:58.006 A:middle
Apple 认为

00:27:58.006 --> 00:27:59.996 A:middle
寻找 JPEG 替代品

00:27:59.996 --> 00:28:01.126 A:middle
最为重要的

00:27:59.996 --> 00:28:01.126 A:middle
最为重要的

00:28:01.126 --> 00:28:01.856 A:middle
一些要求

00:28:02.456 --> 00:28:06.126 A:middle
我们相信 HEIF

00:28:06.126 --> 00:28:07.506 A:middle
能够满足全部这些要求

00:28:08.136 --> 00:28:10.516 A:middle
它灵活性极高

00:28:10.796 --> 00:28:12.156 A:middle
能高效 简洁地

00:28:12.156 --> 00:28:15.426 A:middle
运用 iOS 11 技术上的进步

00:28:15.876 --> 00:28:17.786 A:middle
它的可扩展性又能

00:28:17.786 --> 00:28:19.086 A:middle
让 HEIF 为未来开发运用

00:28:19.086 --> 00:28:20.426 A:middle
打下坚实基础

00:28:21.036 --> 00:28:23.906 A:middle
我们后来分析了

00:28:23.906 --> 00:28:25.796 A:middle
HEIF 标准的

00:28:25.796 --> 00:28:26.426 A:middle
一些特性

00:28:27.446 --> 00:28:29.256 A:middle
最后 我们介绍了

00:28:29.256 --> 00:28:31.576 A:middle
让其成为不二之选的

00:28:31.576 --> 00:28:33.536 A:middle
HEVC 工具 既包括

00:28:33.536 --> 00:28:35.346 A:middle
提升压缩效率的 还包括

00:28:35.346 --> 00:28:37.206 A:middle
对硬件架构友好

00:28:37.206 --> 00:28:39.506 A:middle
能够提升表现

00:28:39.506 --> 00:28:39.826 A:middle
和性能的

00:28:40.236 --> 00:28:43.816 A:middle
要了解更多信息

00:28:43.816 --> 00:28:46.216 A:middle
请访问第 513 号会议

00:28:46.216 --> 00:28:48.276 A:middle
“High Efficiency Image File format（高效率图像文件格式）”

00:28:48.576 --> 00:28:49.906 A:middle
的网址

00:28:51.326 --> 00:28:52.716 A:middle
如果你继续参与 WWDC

00:28:53.166 --> 00:28:55.216 A:middle
我们欢迎你参加

00:28:55.216 --> 00:28:58.256 A:middle
与 HEIF 和 HEVC 有关的

00:28:58.876 --> 00:28:59.286 A:middle
两场会议

00:28:59.936 --> 00:29:01.736 A:middle
感谢观看本场会议

00:28:59.936 --> 00:29:01.736 A:middle
感谢观看本场会议

00:29:01.736 --> 00:29:04.496 A:middle
祝你在 WWDC 2017 过得愉快
