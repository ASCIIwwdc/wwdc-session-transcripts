WEBVTT

00:00:24.516 --> 00:00:26.556 A:middle
[掌声]

00:00:27.056 --> 00:00:28.896 A:middle
&gt;&gt; 大家早上好

00:00:28.896 --> 00:00:30.686 A:middle
我是 Cocoa 工程师 Vincent Hittson

00:00:30.816 --> 00:00:32.816 A:middle
这位是 Rachel Goldeen  也是 Cocoa 工程师

00:00:32.816 --> 00:00:35.176 A:middle
欢迎来到 “Cocoa

00:00:35.176 --> 00:00:35.966 A:middle
开发技巧”会场

00:00:37.036 --> 00:00:38.636 A:middle
首先将有请 Rachel 为我们做开场白

00:00:39.586 --> 00:00:41.776 A:middle
&gt;&gt; 早上好 今天上午

00:00:41.776 --> 00:00:43.606 A:middle
我们将向大家广泛地展示

00:00:43.606 --> 00:00:45.156 A:middle
一系列开发技巧

00:00:45.156 --> 00:00:45.666 A:middle
我们会抓紧时间逐一讲解

00:00:45.846 --> 00:00:46.966 A:middle
关于这些议题 如果想要弄清楚

00:00:46.966 --> 00:00:48.466 A:middle
它们的安排顺序

00:00:48.466 --> 00:00:50.066 A:middle
应该使用什么样的顺序或编码系统

00:00:50.066 --> 00:00:51.736 A:middle
可能会有些棘手

00:00:51.736 --> 00:00:52.806 A:middle
但最终我们还是想到了一些

00:00:52.806 --> 00:00:52.926 A:middle
不错的方法

00:00:52.926 --> 00:00:54.446 A:middle
首先 我给大家从

00:00:54.446 --> 00:00:56.656 A:middle
一个快速技巧开始讲起

00:00:57.846 --> 00:01:00.466 A:middle
也就是数字 π 的国际化

00:00:57.846 --> 00:01:00.466 A:middle
也就是数字 π 的国际化

00:01:00.566 --> 00:01:03.256 A:middle
因为我们都对此一窍不通

00:01:03.256 --> 00:01:05.176 A:middle
我们只需观察一下 Xcode 的方案编辑器

00:01:05.176 --> 00:01:07.696 A:middle
在它的运行部分里

00:01:07.696 --> 00:01:09.176 A:middle
你-会发现其中有一个

00:01:09.176 --> 00:01:12.926 A:middle
定位调试部分

00:01:13.356 --> 00:01:14.446 A:middle
你可以勾选

00:01:14.446 --> 00:01:16.116 A:middle
“显示非本地化字符串”的复选框

00:01:16.696 --> 00:01:17.826 A:middle
然后查看你的 App 里

00:01:17.826 --> 00:01:19.076 A:middle
本地化字符串的缺失位置

00:01:19.426 --> 00:01:20.436 A:middle
但我希望你能将注意力

00:01:20.436 --> 00:01:21.876 A:middle
放到这个应用程序的语言

00:01:21.876 --> 00:01:22.646 A:middle
菜单上

00:01:23.046 --> 00:01:24.246 A:middle
在菜单底部

00:01:24.246 --> 00:01:25.826 A:middle
有一个伪语言列表

00:01:25.826 --> 00:01:28.076 A:middle
你可以在翻译完成之前使用它

00:01:28.076 --> 00:01:29.456 A:middle
它将显示你的 App 是否

00:01:29.456 --> 00:01:31.096 A:middle
已经做好了那些

00:01:31.326 --> 00:01:32.406 A:middle
翻译准备

00:01:32.886 --> 00:01:34.806 A:middle
OK 就是这样 现在再请 Vince 来讲解

00:01:35.576 --> 00:01:37.856 A:middle
&gt;&gt; 好的“技巧 0 用户默认设置”

00:01:37.856 --> 00:01:39.396 A:middle
因为零是一个

00:01:39.396 --> 00:01:40.656 A:middle
不错的默认值

00:01:41.486 --> 00:01:43.206 A:middle
你有自己的标准用户默认设置

00:01:43.206 --> 00:01:44.816 A:middle
用于获取和设置

00:01:44.816 --> 00:01:46.776 A:middle
你自己的用户偏好

00:01:46.776 --> 00:01:49.086 A:middle
但它不仅仅是一大堆

00:01:49.086 --> 00:01:51.056 A:middle
偏好设置的汇集

00:01:51.056 --> 00:01:52.726 A:middle
它实际上是一组域

00:01:52.726 --> 00:01:54.406 A:middle
其中每个域都有

00:01:54.406 --> 00:01:56.446 A:middle
自己的单位组

00:01:56.446 --> 00:01:56.956 A:middle
这就是它们的子集

00:01:57.666 --> 00:01:58.946 A:middle
当你要求标准用户默认设置

00:01:58.946 --> 00:02:01.096 A:middle
返回一个值时

00:01:58.946 --> 00:02:01.096 A:middle
返回一个值时

00:02:01.096 --> 00:02:03.226 A:middle
它会按顺序逐个检查这些域

00:02:03.226 --> 00:02:05.596 A:middle
并返回到它发现的

00:02:05.596 --> 00:02:06.086 A:middle
第一个值

00:02:07.366 --> 00:02:09.586 A:middle
你可以用这些域自身的技巧

00:02:09.586 --> 00:02:12.256 A:middle
在它们之中设置值

00:02:12.256 --> 00:02:14.076 A:middle
我们现在要以相反的顺序

00:02:14.076 --> 00:02:15.596 A:middle
来审视它们

00:02:16.016 --> 00:02:17.416 A:middle
所以 从最基础的开始

00:02:17.416 --> 00:02:19.416 A:middle
首先是注册域

00:02:19.416 --> 00:02:21.546 A:middle
它是列表的最后一个

00:02:21.546 --> 00:02:23.446 A:middle
你使用注册方法

00:02:23.446 --> 00:02:25.046 A:middle
传入用户默认设置

00:02:25.046 --> 00:02:26.086 A:middle
键  以及值的字典

00:02:26.656 --> 00:02:30.036 A:middle
而这些只是临时的

00:02:30.036 --> 00:02:31.306 A:middle
所以它只在这个特定过程的

00:02:31.306 --> 00:02:32.776 A:middle
生命周期里可用

00:02:33.036 --> 00:02:34.516 A:middle
等到下次启动 App 时

00:02:34.516 --> 00:02:35.696 A:middle
你必须再次调用

00:02:35.696 --> 00:02:36.036 A:middle
注册

00:02:36.366 --> 00:02:38.076 A:middle
所以 它为你的默认设置

00:02:38.076 --> 00:02:39.876 A:middle
提供初始值

00:02:39.876 --> 00:02:40.806 A:middle
而不是永久值

00:02:40.806 --> 00:02:44.476 A:middle
下面一个是全局域

00:02:45.016 --> 00:02:46.076 A:middle
它由所有的应用程序共享

00:02:46.076 --> 00:02:47.606 A:middle
System framework

00:02:47.606 --> 00:02:49.606 A:middle
通常用它来存储

00:02:49.606 --> 00:02:51.186 A:middle
系统范围内的偏好

00:02:51.636 --> 00:02:52.816 A:middle
你可以使用默认命令行工具

00:02:52.816 --> 00:02:55.196 A:middle
来设置这个域

00:02:55.306 --> 00:02:57.076 A:middle
但这一设置是持久的

00:02:57.076 --> 00:02:58.026 A:middle
所以你做过的任何改动都会保留下来

00:02:58.026 --> 00:03:01.266 A:middle
因此对这一点要有所意识

00:02:58.026 --> 00:03:01.266 A:middle
因此对这一点要有所意识

00:03:01.436 --> 00:03:02.936 A:middle
下一个是应用程序域

00:03:02.936 --> 00:03:04.906 A:middle
当你在标准用户默认设置中

00:03:04.906 --> 00:03:06.786 A:middle
使用 Set 方法来

00:03:06.786 --> 00:03:08.396 A:middle
设定某个值的时候

00:03:08.476 --> 00:03:08.806 A:middle
它就出现在这里

00:03:09.356 --> 00:03:12.096 A:middle
而且这个域也是持久的

00:03:12.096 --> 00:03:14.306 A:middle
下一次当你的用户启动 App 时

00:03:14.306 --> 00:03:16.236 A:middle
你原先设置的值仍将存在

00:03:16.236 --> 00:03:17.836 A:middle
所以当你的用户

00:03:17.836 --> 00:03:19.686 A:middle
在初始值中修改偏好时

00:03:19.686 --> 00:03:21.436 A:middle
你就会想到

00:03:21.436 --> 00:03:22.096 A:middle
要使用它

00:03:23.756 --> 00:03:27.166 A:middle
无论位于首位或末尾  实参域

00:03:27.166 --> 00:03:29.606 A:middle
都同样的重要

00:03:29.606 --> 00:03:31.486 A:middle
这个域真的很酷

00:03:31.486 --> 00:03:33.196 A:middle
你可以把自己的

00:03:33.196 --> 00:03:34.966 A:middle
用户默认键和值

00:03:34.966 --> 00:03:36.826 A:middle
一并作为实际参数传入应用

00:03:36.826 --> 00:03:38.706 A:middle
并使用连字符预先

00:03:38.706 --> 00:03:39.856 A:middle
添加用户默认键

00:03:40.466 --> 00:03:42.736 A:middle
因为它处于列表的第一位

00:03:42.736 --> 00:03:44.716 A:middle
所以它覆盖所有

00:03:44.716 --> 00:03:45.676 A:middle
其他域的值

00:03:46.246 --> 00:03:49.206 A:middle
它也是临时的 所以只有当

00:03:49.206 --> 00:03:51.296 A:middle
你启动 App 以及那些特定实参的时候

00:03:51.296 --> 00:03:52.756 A:middle
才能够对它进行设置

00:03:52.756 --> 00:03:53.826 A:middle
如果你运行 App

00:03:53.826 --> 00:03:55.266 A:middle
但却没有那些实参

00:03:55.266 --> 00:03:56.256 A:middle
那么就不会出现任何值

00:03:57.216 --> 00:03:59.046 A:middle
所以如果你想要

00:03:59.046 --> 00:03:59.956 A:middle
重现与用户偏好有关的问题

00:03:59.956 --> 00:04:01.806 A:middle
这是十分便利的方法

00:03:59.956 --> 00:04:01.806 A:middle
这是十分便利的方法

00:04:02.106 --> 00:04:03.216 A:middle
另外你也并不想真的

00:04:03.216 --> 00:04:05.836 A:middle
在自己的机器上对它们进行设置

00:04:05.836 --> 00:04:07.316 A:middle
或者仅只是为了启用调试旗标而设置

00:04:07.816 --> 00:04:10.106 A:middle
说到调试旗标

00:04:10.516 --> 00:04:12.576 A:middle
AppKit 里就有好几个

00:04:13.386 --> 00:04:14.786 A:middle
以下这些是大家可以使用的

00:04:14.786 --> 00:04:16.646 A:middle
NSiewLayoutFeedbackLoopDebuggingEnabled

00:04:18.625 --> 00:04:20.125 A:middle
如果你的 App 在布局时一直出现卡顿

00:04:20.125 --> 00:04:21.706 A:middle
可以把这个标记

00:04:21.706 --> 00:04:22.186 A:middle
设置为 YES

00:04:22.456 --> 00:04:24.036 A:middle
FeedbackLoopDebugger 会

00:04:24.036 --> 00:04:25.386 A:middle
帮助你追踪

00:04:25.386 --> 00:04:25.786 A:middle
那个问题

00:04:26.566 --> 00:04:28.696 A:middle
还有一个是

00:04:28.696 --> 00:04:31.416 A:middle
NSApplicationCrashOnExceptions

00:04:31.416 --> 00:04:32.996 A:middle
它在 NSApplication 中使用时 如果它捕获了异常

00:04:32.996 --> 00:04:34.416 A:middle
将会导致你的 App 崩溃

00:04:34.726 --> 00:04:36.206 A:middle
所以 在开发过程中找到这些工具

00:04:36.206 --> 00:04:37.946 A:middle
是件不错的事情  这样你就可以发现

00:04:37.946 --> 00:04:38.486 A:middle
那些问题

00:04:38.986 --> 00:04:41.386 A:middle
当然你也可能想要使用

00:04:41.386 --> 00:04:43.586 A:middle
实参域来设置这些

00:04:43.586 --> 00:04:45.286 A:middle
这样你就不会随之改变

00:04:45.526 --> 00:04:46.756 A:middle
这也是个好办法

00:04:47.046 --> 00:04:49.806 A:middle
关于标准用户默认设置

00:04:49.806 --> 00:04:51.456 A:middle
有一个巧妙之处在于

00:04:51.456 --> 00:04:53.536 A:middle
它支持键值观察

00:04:53.676 --> 00:04:54.596 A:middle
也就是 KVO

00:04:55.446 --> 00:04:56.766 A:middle
你只需添加观测器

00:04:56.766 --> 00:04:58.246 A:middle
将用户默认键

00:04:58.246 --> 00:05:01.256 A:middle
作为你的键路径 并且在

00:04:58.246 --> 00:05:01.256 A:middle
作为你的键路径 并且在

00:05:01.256 --> 00:05:02.826 A:middle
这个值发生每一次改动时

00:05:02.826 --> 00:05:04.586 A:middle
即使发生于其它的进程

00:05:04.586 --> 00:05:05.126 A:middle
你都会收到相应的通知

00:05:05.666 --> 00:05:07.456 A:middle
这里有一个例子可以

00:05:07.456 --> 00:05:08.296 A:middle
说明基本情况

00:05:08.816 --> 00:05:10.246 A:middle
我们添加一个观测器  使用的是

00:05:10.246 --> 00:05:12.236 A:middle
addObserver forKeyPath options context 方法

00:05:12.236 --> 00:05:14.466 A:middle
并用字符串的形式

00:05:14.466 --> 00:05:15.986 A:middle
传入了我们的用户默认键

00:05:17.336 --> 00:05:19.296 A:middle
当然 如果我们对

00:05:19.296 --> 00:05:20.966 A:middle
观察这些变化不再感兴趣

00:05:20.966 --> 00:05:22.726 A:middle
可以将设置的这个观测器

00:05:22.726 --> 00:05:23.306 A:middle
移除

00:05:24.636 --> 00:05:27.046 A:middle
在此期间 每当默认值有所更改

00:05:27.046 --> 00:05:29.146 A:middle
你就会收到一个

00:05:29.146 --> 00:05:31.146 A:middle
通过键路径调出的

00:05:31.146 --> 00:05:31.666 A:middle
observeValue

00:05:32.166 --> 00:05:33.916 A:middle
以上就是关于键值观察的内容

00:05:33.916 --> 00:05:36.396 A:middle
这个过程就像是图表里展示的

00:05:36.396 --> 00:05:36.786 A:middle
那样

00:05:37.366 --> 00:05:39.296 A:middle
因此  如果你的应用设置了一个

00:05:39.296 --> 00:05:40.846 A:middle
用户默认值  而且你有一个

00:05:40.846 --> 00:05:42.516 A:middle
已注册的观测器 那么

00:05:42.516 --> 00:05:44.536 A:middle
它会收到该改动的通知

00:05:45.286 --> 00:05:47.116 A:middle
与此类似

00:05:47.116 --> 00:05:49.246 A:middle
如果另一个过程也设置了

00:05:49.246 --> 00:05:50.386 A:middle
你正在观测的用户默认值

00:05:50.386 --> 00:05:52.476 A:middle
你也会同样收到

00:05:52.476 --> 00:05:53.116 A:middle
相关通知

00:05:53.696 --> 00:05:55.256 A:middle
所以说  这个操作非常简单直接

00:05:56.636 --> 00:05:58.216 A:middle
另外还有一个简单技巧

00:05:59.156 --> 00:06:01.016 A:middle
如果你想得到你在

00:05:59.156 --> 00:06:01.016 A:middle
如果你想得到你在

00:06:01.016 --> 00:06:02.336 A:middle
“Foundation 的新功能”会议上

00:06:02.336 --> 00:06:03.616 A:middle
听说的新键路径语法和

00:06:03.616 --> 00:06:04.446 A:middle
基于块的观察方法

00:06:04.446 --> 00:06:06.606 A:middle
你可以通过用户默认设置

00:06:06.606 --> 00:06:07.376 A:middle
来实现

00:06:07.856 --> 00:06:08.646 A:middle
只需添加一个 Extention

00:06:08.646 --> 00:06:11.656 A:middle
以及和你的用户默认键

00:06:11.656 --> 00:06:14.466 A:middle
名称相同的 @objc 动态属性

00:06:14.466 --> 00:06:16.646 A:middle
就可以了

00:06:16.646 --> 00:06:17.916 A:middle
这一点十分重要

00:06:17.916 --> 00:06:19.126 A:middle
如果两个名字不匹配

00:06:19.126 --> 00:06:19.996 A:middle
那么这项操作就无法进行

00:06:20.386 --> 00:06:22.096 A:middle
为了方便起见 你可以

00:06:22.096 --> 00:06:23.646 A:middle
执行你的属性 Getter

00:06:23.646 --> 00:06:24.916 A:middle
来返回这个值

00:06:25.026 --> 00:06:29.046 A:middle
然后你可以使用

00:06:29.046 --> 00:06:30.986 A:middle
基于块的观察方法

00:06:30.986 --> 00:06:32.566 A:middle
再加上键路径字面量句法

00:06:32.566 --> 00:06:34.956 A:middle
这新推出的方法

00:06:34.956 --> 00:06:35.516 A:middle
效果如同你期待的那样

00:06:36.496 --> 00:06:38.406 A:middle
以上就是用户默认设置的内容

00:06:39.536 --> 00:06:43.566 A:middle
接下来是“技巧 64 ”

00:06:43.566 --> 00:06:44.086 A:middle
这是什么

00:06:45.406 --> 00:06:48.036 A:middle
噢 Base 64  是的

00:06:48.616 --> 00:06:49.816 A:middle
给不熟悉 Base64 的人解释一下

00:06:49.816 --> 00:06:52.096 A:middle
Base64 是一种编码

00:06:52.096 --> 00:06:54.056 A:middle
可以让你通过使用一组简单的 ASCII

00:06:54.366 --> 00:06:56.126 A:middle
来表示任何数据

00:06:56.616 --> 00:06:58.466 A:middle
所以 如果你想要测试

00:06:58.466 --> 00:07:00.596 A:middle
或者轻松复制粘贴

00:06:58.466 --> 00:07:00.596 A:middle
或者轻松复制粘贴

00:07:00.596 --> 00:07:02.526 A:middle
并分享包含二进制数据的代码片段

00:07:02.706 --> 00:07:04.296 A:middle
Base64 会很有用

00:07:04.296 --> 00:07:05.436 A:middle
你不需要为

00:07:05.436 --> 00:07:07.006 A:middle
数据打包和查看寻找

00:07:07.006 --> 00:07:08.186 A:middle
以及所有的一切

00:07:09.366 --> 00:07:09.836 A:middle
而担心

00:07:09.836 --> 00:07:12.796 A:middle
NSData 支持 Base64

00:07:12.796 --> 00:07:15.276 A:middle
你可以在数据上使用

00:07:15.276 --> 00:07:17.636 A:middle
Base64 编码初始化器

00:07:17.636 --> 00:07:20.636 A:middle
从Base64 字符串中创建一个数据

00:07:20.636 --> 00:07:21.616 A:middle
这样你将恢复你的数据

00:07:21.616 --> 00:07:24.086 A:middle
然后你可以用它来

00:07:24.316 --> 00:07:25.296 A:middle
比如说 播放一个声音

00:07:28.256 --> 00:07:32.526 A:middle
现在 如果你要创建

00:07:32.526 --> 00:07:34.656 A:middle
这些 Base64 字符串

00:07:34.656 --> 00:07:36.236 A:middle
你可以在数据上使用

00:07:36.236 --> 00:07:37.746 A:middle
Base64 编码字符串方法 以此获取

00:07:37.746 --> 00:07:38.216 A:middle
这些字符串

00:07:38.466 --> 00:07:40.066 A:middle
你还可以在终端使用

00:07:40.066 --> 00:07:41.446 A:middle
Base64 命令行实用程序

00:07:41.446 --> 00:07:43.356 A:middle
以获取你的 Base64 字符串

00:07:43.356 --> 00:07:45.456 A:middle
以上就是 Base64 的内容

00:07:45.786 --> 00:07:46.676 A:middle
现在 我把舞台交给 Rachel

00:07:51.106 --> 00:07:52.356 A:middle
聊一聊资源目录

00:07:52.356 --> 00:07:53.586 A:middle
的话题

00:07:53.996 --> 00:07:55.216 A:middle
你们当中很多人已经在使用

00:07:55.216 --> 00:07:56.916 A:middle
资源目录了  大家都知道

00:07:56.916 --> 00:07:58.346 A:middle
它们能整理你的图片

00:07:58.426 --> 00:08:00.196 A:middle
加快启动时间

00:07:58.426 --> 00:08:00.196 A:middle
加快启动时间

00:08:00.196 --> 00:08:00.846 A:middle
减少存储空间

00:08:01.726 --> 00:08:03.046 A:middle
而我-要讨论的是在去年

00:08:03.046 --> 00:08:04.396 A:middle
macOS Sierra 以及 iOS 10 上

00:08:04.396 --> 00:08:06.356 A:middle
新增加的一些内容

00:08:06.356 --> 00:08:07.376 A:middle
以免没有听过的人

00:08:07.376 --> 00:08:07.586 A:middle
对此毫无了解

00:08:08.326 --> 00:08:09.836 A:middle
首先 这是一个布局方向

00:08:10.526 --> 00:08:12.676 A:middle
这个动作图片是对称的

00:08:12.676 --> 00:08:14.446 A:middle
因此不受影响

00:08:14.446 --> 00:08:15.706 A:middle
它从左到右和从右到左

00:08:15.706 --> 00:08:16.936 A:middle
都是一样的

00:08:16.936 --> 00:08:17.476 A:middle
所以它的方向是固定的

00:08:18.236 --> 00:08:20.186 A:middle
但这里有一个前进图片

00:08:20.186 --> 00:08:21.526 A:middle
在从右到左书写的语言中

00:08:21.966 --> 00:08:23.266 A:middle
前进表示向左

00:08:23.586 --> 00:08:24.766 A:middle
反之 在从左到右书写的语言中

00:08:24.766 --> 00:08:25.556 A:middle
前进表示向右

00:08:25.976 --> 00:08:27.376 A:middle
所以 我们想让这个图片在另一个语言中

00:08:27.376 --> 00:08:28.106 A:middle
实现镜像翻转

00:08:28.436 --> 00:08:29.626 A:middle
然后发现情况有点复杂

00:08:29.626 --> 00:08:31.626 A:middle
当你有一张图片

00:08:31.626 --> 00:08:33.226 A:middle
需要根据布局方向

00:08:33.226 --> 00:08:34.236 A:middle
而做出相应改变

00:08:34.236 --> 00:08:35.856 A:middle
但又不是镜像改变时

00:08:35.856 --> 00:08:37.626 A:middle
例如在这个自动填充图片中

00:08:37.626 --> 00:08:39.635 A:middle
这些点点表示书写内容

00:08:39.635 --> 00:08:40.785 A:middle
它们依照从左到右的顺序

00:08:40.785 --> 00:08:42.196 A:middle
位于铅笔左侧

00:08:42.196 --> 00:08:43.645 A:middle
位于铅笔右边的

00:08:43.645 --> 00:08:45.186 A:middle
则是从右到左的顺序

00:08:45.186 --> 00:08:46.636 A:middle
但铅笔仍向右倾斜

00:08:47.076 --> 00:08:48.266 A:middle
所以 它们并非镜像

00:08:48.266 --> 00:08:49.646 A:middle
设计师认为

00:08:49.646 --> 00:08:50.636 A:middle
有必要再提供

00:08:50.636 --> 00:08:52.296 A:middle
两张不同的图片 但是

00:08:52.436 --> 00:08:53.786 A:middle
资源目录就会替你

00:08:53.786 --> 00:08:53.966 A:middle
处理好这个问题

00:08:54.886 --> 00:08:56.216 A:middle
接下来我们要讨论

00:08:56.216 --> 00:08:58.096 A:middle
显示器色域

00:08:58.096 --> 00:08:59.676 A:middle
它指的是不同显示器上可用的

00:08:59.676 --> 00:09:00.736 A:middle
不同类型的

00:08:59.676 --> 00:09:00.736 A:middle
不同类型的

00:09:00.736 --> 00:09:02.556 A:middle
颜色显示

00:09:02.586 --> 00:09:04.576 A:middle
旧的显示器使用 sRGB

00:09:04.916 --> 00:09:06.146 A:middle
而新显示器的颜色更加明亮 丰富

00:09:06.146 --> 00:09:08.336 A:middle
它们使用的是 Display P3

00:09:08.386 --> 00:09:09.656 A:middle
我放大了这些图片之间

00:09:09.656 --> 00:09:11.116 A:middle
存在的差别

00:09:11.486 --> 00:09:13.016 A:middle
不过这只是为了向大家展示

00:09:13.016 --> 00:09:14.836 A:middle
资源目录可以让你

00:09:15.246 --> 00:09:17.106 A:middle
为这两个不同的显示器色域

00:09:17.106 --> 00:09:18.246 A:middle
判定具体的图片

00:09:18.906 --> 00:09:23.336 A:middle
在 iOS 11 和 macOS Sierra 中

00:09:23.336 --> 00:09:25.476 A:middle
我们给资源目录增加了颜色

00:09:25.576 --> 00:09:27.516 A:middle
所以你可以使用一个有名字的颜色

00:09:27.516 --> 00:09:30.036 A:middle
就像我这个简单的强调色

00:09:30.036 --> 00:09:32.346 A:middle
如果你需要的话 还可以

00:09:32.556 --> 00:09:34.856 A:middle
指定该颜色的 sRGB 和 Display P3

00:09:34.856 --> 00:09:36.156 A:middle
版本

00:09:36.786 --> 00:09:39.126 A:middle
为了在代码里能够使用它

00:09:39.126 --> 00:09:39.766 A:middle
我们要使用这个新的 API

00:09:40.656 --> 00:09:42.246 A:middle
你可以将自己的名字添加到

00:09:42.246 --> 00:09:44.716 A:middle
可扩展的 NSColor.Name 枚举里

00:09:44.716 --> 00:09:46.756 A:middle
然后使用已命名颜色的

00:09:47.396 --> 00:09:49.286 A:middle
初始化器  用自己的名字来

00:09:49.286 --> 00:09:50.836 A:middle
来创建自己的颜色

00:09:51.786 --> 00:09:52.546 A:middle
就是如此简单

00:09:52.746 --> 00:09:56.616 A:middle
接下来是“技巧 1 单元测试”

00:09:56.756 --> 00:09:57.556 A:middle
有时编写单元测试时

00:09:57.646 --> 00:09:59.346 A:middle
会存在一种心理障碍

00:09:59.346 --> 00:10:00.666 A:middle
它看起来似乎很难

00:09:59.346 --> 00:10:00.666 A:middle
它看起来似乎很难

00:10:00.666 --> 00:10:02.306 A:middle
但今天我要向大家展示

00:10:02.306 --> 00:10:03.836 A:middle
它有多么简单

00:10:04.336 --> 00:10:07.426 A:middle
在 Xcode 中新建一个文件

00:10:07.426 --> 00:10:10.286 A:middle
让它成为一个单元测试样本分类

00:10:10.286 --> 00:10:11.826 A:middle
Xcode 会给你一个模板

00:10:11.826 --> 00:10:13.196 A:middle
你可以在里面填充一些

00:10:13.196 --> 00:10:14.296 A:middle
像这样简单的内容

00:10:14.366 --> 00:10:16.496 A:middle
我在这里创建了我的 addCatImage

00:10:16.806 --> 00:10:17.896 A:middle
并且要通过检查来确定

00:10:17.896 --> 00:10:18.536 A:middle
它不是空的

00:10:18.736 --> 00:10:20.766 A:middle
这只是一个完整性检查

00:10:20.876 --> 00:10:22.376 A:middle
检查我的资源目录是否已打开并在运行

00:10:22.826 --> 00:10:23.976 A:middle
一旦你获得了一个编写好的

00:10:23.976 --> 00:10:25.996 A:middle
单元测试  那么编写额外的测试

00:10:26.456 --> 00:10:28.146 A:middle
并且避免自己的用户

00:10:28.146 --> 00:10:29.546 A:middle
碰到错误

00:10:29.546 --> 00:10:30.166 A:middle
就变得更加容易了

00:10:31.416 --> 00:10:32.096 A:middle
好 让 Vince 再来讲讲

00:10:32.586 --> 00:10:35.986 A:middle
&gt;&gt; 好的 “技巧 27 NSBox”

00:10:36.696 --> 00:10:38.536 A:middle
有时候 你想要的只是

00:10:38.536 --> 00:10:39.916 A:middle
一个显示背景颜色的

00:10:39.916 --> 00:10:40.806 A:middle
简单视图

00:10:41.786 --> 00:10:43.496 A:middle
你可能是像这样控制它

00:10:43.496 --> 00:10:45.766 A:middle
这样你就可以执行

00:10:45.916 --> 00:10:47.266 A:middle
甚至可以让它分层

00:10:47.266 --> 00:10:50.606 A:middle
这很好  或者你也可以

00:10:50.606 --> 00:10:52.196 A:middle
让 AppKit 为你代劳

00:10:52.576 --> 00:10:54.896 A:middle
我们拥有 NSBox 以后 你只需要

00:10:54.896 --> 00:10:56.696 A:middle
把框类型设为自定义

00:10:56.936 --> 00:10:58.146 A:middle
然后让它把背景设置为

00:10:58.146 --> 00:10:59.026 A:middle
填充色彩

00:10:59.306 --> 00:11:00.666 A:middle
这比只在一个层面

00:10:59.306 --> 00:11:00.666 A:middle
这比只在一个层面

00:11:00.666 --> 00:11:01.966 A:middle
设置背景颜色

00:11:01.966 --> 00:11:04.406 A:middle
更具动态性  因为如果

00:11:04.406 --> 00:11:06.056 A:middle
该颜色为系统颜色

00:11:06.056 --> 00:11:07.496 A:middle
是基于外观或语境而产生

00:11:07.496 --> 00:11:10.076 A:middle
动态改变的话

00:11:10.076 --> 00:11:11.006 A:middle
NSBox 将会对它进行自动更新

00:11:11.926 --> 00:11:13.786 A:middle
更胜一筹的是 你可以把它

00:11:13.786 --> 00:11:15.006 A:middle
从 Interface Builder 里拖出来

00:11:15.006 --> 00:11:15.936 A:middle
并从那里对它进行设置

00:11:16.456 --> 00:11:19.476 A:middle
你可以用几种属性

00:11:19.476 --> 00:11:20.816 A:middle
来设置某个

00:11:20.816 --> 00:11:21.736 A:middle
自定义框

00:11:21.956 --> 00:11:23.076 A:middle
要有边框宽度 圆角半径

00:11:23.076 --> 00:11:24.486 A:middle
边框颜色 当然

00:11:24.486 --> 00:11:26.636 A:middle
还有颜色填充 像这样来使用

00:11:27.036 --> 00:11:28.756 A:middle
甚至你也可以在框里

00:11:28.756 --> 00:11:31.246 A:middle
设置一个内容视图

00:11:31.246 --> 00:11:33.446 A:middle
来显示框里的另一个视图

00:11:33.446 --> 00:11:34.116 A:middle
所以这真的很简单

00:11:34.646 --> 00:11:38.006 A:middle
当然 还不止这些

00:11:38.056 --> 00:11:39.796 A:middle
有时 你想要的

00:11:39.796 --> 00:11:42.556 A:middle
只是一个简单的分隔符

00:11:42.556 --> 00:11:43.996 A:middle
这一点 NSBox 也能办到

00:11:44.346 --> 00:11:45.486 A:middle
你所要做的  只是

00:11:45.486 --> 00:11:47.576 A:middle
创建一个带有分隔符类型的框

00:11:47.576 --> 00:11:48.736 A:middle
并把它放在你喜欢的位置

00:11:49.376 --> 00:11:51.106 A:middle
当然 它可以从

00:11:51.106 --> 00:11:51.946 A:middle
Interface Builder 那里获得

00:11:52.316 --> 00:11:54.316 A:middle
所以这就是 NSBox

00:11:54.316 --> 00:11:56.176 A:middle
它会让用户界面的创建

00:11:56.176 --> 00:11:56.896 A:middle
更加容易

00:11:58.216 --> 00:12:00.296 A:middle
接下来是“技巧 8 可恢复

00:11:58.216 --> 00:12:00.296 A:middle
接下来是“技巧 8 可恢复

00:12:00.616 --> 00:12:01.956 A:middle
状态”

00:12:04.286 --> 00:12:06.766 A:middle
macOS 有一个功能可以

00:12:06.766 --> 00:12:08.166 A:middle
让你重启机器

00:12:08.166 --> 00:12:09.606 A:middle
让你所有正在运行的应用

00:12:09.606 --> 00:12:11.666 A:middle
都恢复状态

00:12:11.666 --> 00:12:13.176 A:middle
通过使用 NSResponder 上

00:12:13.276 --> 00:12:15.156 A:middle
这个价值极高的三种方法组合

00:12:15.156 --> 00:12:16.856 A:middle
可以让用户回到

00:12:16.856 --> 00:12:17.606 A:middle
离开时的状态

00:12:17.866 --> 00:12:19.686 A:middle
大部分 AppKit 控件

00:12:19.686 --> 00:12:21.076 A:middle
都会替你执行这些方法

00:12:21.076 --> 00:12:22.276 A:middle
但如果你有自己的控件

00:12:22.276 --> 00:12:23.966 A:middle
或是可恢复状态

00:12:23.966 --> 00:12:24.806 A:middle
你就可以自己来执行

00:12:24.806 --> 00:12:25.436 A:middle
这些方法-

00:12:25.976 --> 00:12:27.946 A:middle
事情大概就是

00:12:27.946 --> 00:12:28.316 A:middle
这样

00:12:28.906 --> 00:12:30.756 A:middle
所以 你要拥有自己的属性

00:12:30.756 --> 00:12:32.186 A:middle
这就是你自己的可恢复状态

00:12:32.376 --> 00:12:34.226 A:middle
当它们改变时

00:12:34.226 --> 00:12:35.276 A:middle
你的可恢复状态就失效

00:12:35.616 --> 00:12:37.836 A:middle
然后 在某一时刻

00:12:37.836 --> 00:12:39.016 A:middle
这个系统将会调用

00:12:39.016 --> 00:12:40.616 A:middle
代码可恢复状态 于是

00:12:40.616 --> 00:12:42.226 A:middle
你就可以从你的属性里找到值

00:12:42.226 --> 00:12:43.926 A:middle
并将它们放入编码器中

00:12:43.926 --> 00:12:45.026 A:middle
然后当你的应用重启时

00:12:45.026 --> 00:12:46.436 A:middle
我们会使用编码器

00:12:46.436 --> 00:12:48.016 A:middle
调用可恢复状态

00:12:48.016 --> 00:12:49.516 A:middle
你再将编码器中的值调出

00:12:49.516 --> 00:12:50.446 A:middle
并放到属性里

00:12:50.746 --> 00:12:51.996 A:middle
一目了然

00:12:51.996 --> 00:12:54.926 A:middle
易如反掌 但还有一种

00:12:54.926 --> 00:12:55.716 A:middle
更简单的办法

00:12:56.176 --> 00:12:58.016 A:middle
NSResponder 有这样一个类属性

00:12:58.196 --> 00:13:00.446 A:middle
restorableStateKeyPaths

00:12:58.196 --> 00:13:00.446 A:middle
restorableStateKeyPaths

00:13:00.446 --> 00:13:02.606 A:middle
它可以指向任意一个

00:13:02.606 --> 00:13:04.586 A:middle
NSCoding 符合类型

00:13:04.586 --> 00:13:05.886 A:middle
AppKit 将使用键值观察

00:13:05.886 --> 00:13:07.646 A:middle
来观察这些属性

00:13:07.846 --> 00:13:08.796 A:middle
的改变

00:13:09.346 --> 00:13:12.006 A:middle
这就意味着在恢复状态时

00:13:12.166 --> 00:13:13.506 A:middle
它将自动为你设置各种值

00:13:13.506 --> 00:13:15.886 A:middle
所以真的很简单

00:13:16.396 --> 00:13:18.436 A:middle
要注意 这些属性是被

00:13:18.436 --> 00:13:20.256 A:middle
标记了 @objc 动态

00:13:20.336 --> 00:13:21.756 A:middle
因此  键值观察才可以

00:13:21.756 --> 00:13:23.886 A:middle
实现自动通知

00:13:24.506 --> 00:13:26.466 A:middle
你也可以通过其他的

00:13:26.466 --> 00:13:27.696 A:middle
状态恢复来调出

00:13:27.696 --> 00:13:28.406 A:middle
使用它

00:13:28.826 --> 00:13:30.826 A:middle
你可以为你的简单属性而使用它

00:13:30.826 --> 00:13:32.076 A:middle
再把其它的调出用于

00:13:32.076 --> 00:13:33.546 A:middle
你可能会有的  其它部分的

00:13:33.546 --> 00:13:34.916 A:middle
可恢复状态

00:13:34.916 --> 00:13:35.676 A:middle
它们会一起协作

00:13:37.256 --> 00:13:38.816 A:middle
好 现在有请 Rachel

00:13:39.786 --> 00:13:41.196 A:middle
&gt;&gt; 好的 我将要告诉大家

00:13:41.196 --> 00:13:43.006 A:middle
关于 Core Data 的一系列技巧

00:13:43.006 --> 00:13:45.256 A:middle
这些技巧相互依托建构

00:13:45.256 --> 00:13:46.616 A:middle
而我将从“技巧 13 ”开始

00:13:46.616 --> 00:13:47.516 A:middle
因为可能比较遗憾的是

00:13:47.516 --> 00:13:49.076 A:middle
在去年 Sierra 和 iOS 10

00:13:49.076 --> 00:13:50.566 A:middle
添加 NSPersistentContainer 之前

00:13:50.856 --> 00:13:51.996 A:middle
你可能不得不

00:13:52.036 --> 00:13:54.176 A:middle
自己构建 Core Data Stack

00:13:54.176 --> 00:13:56.886 A:middle
这样一个

00:13:57.386 --> 00:13:58.466 A:middle
数据堆栈

00:13:58.466 --> 00:14:00.376 A:middle
Core Data Stack 包括

00:13:58.466 --> 00:14:00.376 A:middle
Core Data Stack 包括

00:14:00.376 --> 00:14:02.676 A:middle
一个托管对象模型

00:14:02.676 --> 00:14:04.186 A:middle
然后你会有一个

00:14:04.186 --> 00:14:05.886 A:middle
持久化存储协调器来协调

00:14:05.886 --> 00:14:08.036 A:middle
一个或多个持久存储

00:14:08.036 --> 00:14:10.016 A:middle
以及一个托管对象语境

00:14:10.556 --> 00:14:12.156 A:middle
构建一个 Core Data Stack

00:14:12.156 --> 00:14:12.966 A:middle
需要编写大量代码

00:14:13.016 --> 00:14:15.186 A:middle
这是你为了运行它

00:14:15.186 --> 00:14:16.606 A:middle
而编写的缩减版

00:14:16.606 --> 00:14:17.116 A:middle
代码

00:14:18.316 --> 00:14:20.906 A:middle
但是去年在 Core Data 团队的

00:14:20.906 --> 00:14:22.496 A:middle
努力工作下

00:14:22.536 --> 00:14:24.126 A:middle
推出了 NSPersistentContainer 分类设置

00:14:24.176 --> 00:14:26.666 A:middle
它囊括了 Core Data Stack

00:14:27.246 --> 00:14:28.106 A:middle
现在就变得十分简单了

00:14:28.446 --> 00:14:29.406 A:middle
你只要这样操作即可

00:14:29.456 --> 00:14:31.386 A:middle
关键是要使用

00:14:31.436 --> 00:14:32.806 A:middle
你自己的模型名称来

00:14:32.806 --> 00:14:33.766 A:middle
完成持久化容器的初始化

00:14:33.876 --> 00:14:38.236 A:middle
接下来是“技巧 21 数组”

00:14:38.896 --> 00:14:41.676 A:middle
我已经有了一个 Cat Wrangler 应用

00:14:41.676 --> 00:14:43.446 A:middle
它是个猫咪管理的应用

00:14:43.446 --> 00:14:45.666 A:middle
在我的数据模型中

00:14:46.226 --> 00:14:48.986 A:middle
我已经有了一个

00:14:48.986 --> 00:14:51.186 A:middle
有名字和照片属性的

00:14:51.186 --> 00:14:51.766 A:middle
猫的实体账号

00:14:52.126 --> 00:14:53.976 A:middle
但是我发现

00:14:53.976 --> 00:14:56.466 A:middle
猫还有各种行为  比如

00:14:56.466 --> 00:14:58.696 A:middle
攻击空气中的尘粒

00:14:58.696 --> 00:15:01.286 A:middle
盯着墙壁看 玩键盘等等

00:14:58.696 --> 00:15:01.286 A:middle
盯着墙壁看 玩键盘等等

00:15:02.196 --> 00:15:03.936 A:middle
于是我想要加入一个行为数组

00:15:03.936 --> 00:15:05.176 A:middle
因为我认为字符串是一个

00:15:05.236 --> 00:15:06.616 A:middle
用来表示行为动作的好方法

00:15:06.616 --> 00:15:07.976 A:middle
而且我只想要

00:15:07.976 --> 00:15:08.816 A:middle
一个字符串数组

00:15:09.436 --> 00:15:11.146 A:middle
但是这里没有数组类型

00:15:12.136 --> 00:15:13.496 A:middle
好吧 那我选“可变化的”

00:15:13.496 --> 00:15:14.686 A:middle
因为这可以是任何东西

00:15:14.686 --> 00:15:17.236 A:middle
所以我创建了一个数组

00:15:17.236 --> 00:15:17.716 A:middle
但这并不是一个好主意

00:15:18.626 --> 00:15:19.906 A:middle
它出现了性能问题

00:15:20.846 --> 00:15:22.546 A:middle
它会增加序列化和

00:15:22.546 --> 00:15:23.826 A:middle
反序列化数组

00:15:23.826 --> 00:15:26.336 A:middle
以及其相关内容的开销负担

00:15:26.336 --> 00:15:27.526 A:middle
而且如果你以这种方式操作

00:15:27.576 --> 00:15:28.596 A:middle
任何请求都会变得

00:15:28.656 --> 00:15:28.866 A:middle
更加迟缓

00:15:29.476 --> 00:15:31.676 A:middle
所以我们建议

00:15:31.676 --> 00:15:34.096 A:middle
重新建立一个行为实体账号

00:15:34.096 --> 00:15:35.606 A:middle
让它与猫咪的行为建立关联

00:15:36.206 --> 00:15:37.226 A:middle
这样就会有太多关联

00:15:37.226 --> 00:15:38.956 A:middle
因为有太多的行为动作

00:15:38.956 --> 00:15:41.426 A:middle
如果我想查看它们是否

00:15:41.426 --> 00:15:43.066 A:middle
遵循一定顺序

00:15:43.066 --> 00:15:44.986 A:middle
我会勾选“排序”

00:15:44.986 --> 00:15:45.286 A:middle
复选框

00:15:46.256 --> 00:15:48.126 A:middle
而且 这样做有利于

00:15:48.126 --> 00:15:49.956 A:middle
让我为自己的行为而使用

00:15:49.956 --> 00:15:52.246 A:middle
更丰富的数据模型

00:15:52.246 --> 00:15:54.256 A:middle
比如 我可以添加

00:15:54.256 --> 00:15:54.926 A:middle
一个持续时间

00:15:55.276 --> 00:15:56.856 A:middle
因此 你的数据模型

00:15:56.856 --> 00:15:58.336 A:middle
将更能表示

00:15:58.336 --> 00:15:59.166 A:middle
你想实现的效果

00:16:00.646 --> 00:16:02.436 A:middle
“技巧 34 Core Data迁移”

00:16:03.656 --> 00:16:04.796 A:middle
迁移是使用 Coore Data 的

00:16:04.796 --> 00:16:06.166 A:middle
真正优势之一

00:16:06.166 --> 00:16:09.676 A:middle
我使用了 Cat Wrangler 后

00:16:09.676 --> 00:16:11.956 A:middle
我发现猫也吃

00:16:12.776 --> 00:16:17.846 A:middle
草 杯形蛋糕 肉

00:16:17.846 --> 00:16:18.956 A:middle
当然 还有西兰花这一类的东西

00:16:20.416 --> 00:16:22.496 A:middle
所以 我需要一个新的数据模型

00:16:22.496 --> 00:16:24.236 A:middle
我复制了我的 Cat Wrangler 数据模型

00:16:24.236 --> 00:16:27.666 A:middle
创建了 Cat Wrangler 2

00:16:27.666 --> 00:16:29.936 A:middle
这样我就可以把食物实体账号添加进去

00:16:30.446 --> 00:16:32.516 A:middle
我在 Xcode 里简单地把

00:16:32.516 --> 00:16:34.006 A:middle
当前模型版本改成了

00:16:34.006 --> 00:16:37.116 A:middle
Cat Wrangler 2

00:16:37.116 --> 00:16:38.076 A:middle
然后  如果你使用

00:16:38.076 --> 00:16:39.476 A:middle
NSPersistentContainer

00:16:39.516 --> 00:16:40.806 A:middle
你的轻量版迁移就被自动处理了

00:16:41.466 --> 00:16:42.876 A:middle
如果你构建了自己的堆栈

00:16:43.016 --> 00:16:44.356 A:middle
你需要设置几个选项

00:16:44.356 --> 00:16:45.996 A:middle
让迁移能够得以实现

00:16:45.996 --> 00:16:47.726 A:middle
你要做的就只有这些

00:16:47.806 --> 00:16:50.126 A:middle
事情

00:16:50.356 --> 00:16:53.026 A:middle
“技巧 55 错误处理”

00:16:53.806 --> 00:16:55.826 A:middle
在一个完美的世界里

00:16:55.826 --> 00:16:57.896 A:middle
我们可以处理所有的错误

00:16:57.896 --> 00:16:59.386 A:middle
但大家都知道 这个世界并不完美

00:16:59.386 --> 00:17:01.076 A:middle
它本身甚至都不是

00:16:59.386 --> 00:17:01.076 A:middle
它本身甚至都不是

00:17:01.076 --> 00:17:01.466 A:middle
完全圆的

00:17:02.936 --> 00:17:04.866 A:middle
所以 如果你只能处理

00:17:04.866 --> 00:17:07.356 A:middle
Core Data 一个区域内的错误

00:17:07.356 --> 00:17:08.896 A:middle
那么最重要的部分就是

00:17:08.896 --> 00:17:10.356 A:middle
添加持久化储存器的空间

00:17:10.955 --> 00:17:12.205 A:middle
如果它不能成功运行

00:17:12.386 --> 00:17:13.566 A:middle
那么你应用中的所有功能

00:17:13.566 --> 00:17:14.396 A:middle
都无法正常使用

00:17:15.786 --> 00:17:17.986 A:middle
如果你使用持久化容器

00:17:18.846 --> 00:17:19.616 A:middle
你可以看见还有

00:17:19.616 --> 00:17:21.826 A:middle
loadPersistentStores 方法

00:17:21.925 --> 00:17:22.846 A:middle
有些事情可能会发生  那就是

00:17:22.906 --> 00:17:24.036 A:middle
你会用尽存储空间

00:17:24.036 --> 00:17:25.236 A:middle
你会遇到权限问题

00:17:25.236 --> 00:17:26.846 A:middle
或数据保护问题

00:17:26.846 --> 00:17:28.866 A:middle
要不就是无法打开

00:17:28.866 --> 00:17:32.116 A:middle
一个旧文件

00:17:32.116 --> 00:17:32.966 A:middle
你没有一个合适的

00:17:32.966 --> 00:17:34.586 A:middle
迁移策略来应对它

00:17:35.286 --> 00:17:36.736 A:middle
如果你想了解如何

00:17:36.816 --> 00:17:38.306 A:middle
向用户呈现这些错误

00:17:39.156 --> 00:17:40.436 A:middle
Vince 会与你分享一些信息

00:17:40.436 --> 00:17:43.046 A:middle
&gt;&gt;  好的 “技巧404

00:17:43.236 --> 00:17:43.856 A:middle
NSError”

00:17:44.686 --> 00:17:46.596 A:middle
在小概率情况下

00:17:46.596 --> 00:17:47.856 A:middle
你的应用会出现问题

00:17:47.856 --> 00:17:49.426 A:middle
你可能想给用户

00:17:49.426 --> 00:17:51.376 A:middle
发出“严重错误”的信息

00:17:51.446 --> 00:17:53.586 A:middle
而诸如 Core Data 这样的 Cocoa API

00:17:54.056 --> 00:17:55.376 A:middle
也会向你发出“错误”信息

00:17:55.376 --> 00:17:56.746 A:middle
这些信息已经完全定位并

00:17:56.746 --> 00:17:58.786 A:middle
可随时向用户呈现

00:17:58.786 --> 00:18:00.066 A:middle
要做到这一点很容易

00:17:58.786 --> 00:18:00.066 A:middle
要做到这一点很容易

00:18:00.176 --> 00:18:02.226 A:middle
任何响应器都有一个 presentError 方法

00:18:02.226 --> 00:18:04.006 A:middle
你传入你的错误

00:18:04.006 --> 00:18:05.406 A:middle
它将进入响应链

00:18:05.406 --> 00:18:07.936 A:middle
如果有错误  NSApplication

00:18:07.936 --> 00:18:08.776 A:middle
会找到它  并弹出一个

00:18:08.776 --> 00:18:09.376 A:middle
对话框

00:18:10.136 --> 00:18:11.376 A:middle
如果你自己有

00:18:11.376 --> 00:18:12.656 A:middle
适合显示错误的

00:18:12.656 --> 00:18:13.736 A:middle
响应器子类

00:18:13.736 --> 00:18:15.866 A:middle
你可以重写这个方法

00:18:15.916 --> 00:18:17.296 A:middle
然后自己来呈现错误

00:18:17.946 --> 00:18:21.356 A:middle
这是关于上述 Cocoa API 错误的一个技巧

00:18:21.356 --> 00:18:24.566 A:middle
你可能会制造这些错误

00:18:24.566 --> 00:18:26.676 A:middle
这时你只需要

00:18:26.676 --> 00:18:30.046 A:middle
创建一个 NSError

00:18:30.046 --> 00:18:32.326 A:middle
传入 NSCocoaErrorDomain

00:18:32.326 --> 00:18:33.976 A:middle
这个代码可匹配错误

00:18:33.976 --> 00:18:36.316 A:middle
然后是 userInfo

00:18:36.316 --> 00:18:37.856 A:middle
它可能含有一些额外信息

00:18:37.856 --> 00:18:40.086 A:middle
比如你正在使用的

00:18:40.086 --> 00:18:41.696 A:middle
文件 URL

00:18:42.136 --> 00:18:43.796 A:middle
接着 你将获得一个很好的  已经定位

00:18:43.796 --> 00:18:45.316 A:middle
并且可以向用户呈现的错误 就像这样

00:18:45.316 --> 00:18:46.546 A:middle
就像我们返回的

00:18:46.546 --> 00:18:46.946 A:middle
这些错误

00:18:47.396 --> 00:18:49.316 A:middle
我们有很多错误代码

00:18:49.316 --> 00:18:52.046 A:middle
希望大家能从中找到

00:18:52.046 --> 00:18:53.356 A:middle
可与出现问题相匹配的

00:18:53.356 --> 00:18:53.796 A:middle
代码

00:18:54.076 --> 00:18:55.876 A:middle
这是基础片段 errors.h

00:18:55.876 --> 00:18:57.416 A:middle
生成界面

00:18:57.416 --> 00:18:59.286 A:middle
所以大家能够随意地看

00:18:59.286 --> 00:19:00.976 A:middle
我们不会演示

00:18:59.286 --> 00:19:00.976 A:middle
我们不会演示

00:19:00.976 --> 00:19:01.606 A:middle
整个过程

00:19:03.136 --> 00:19:05.846 A:middle
如果错误相近

00:19:05.846 --> 00:19:07.386 A:middle
但还可做到更好 你可以

00:19:07.386 --> 00:19:09.176 A:middle
用 userInfo 来自定义

00:19:09.176 --> 00:19:09.606 A:middle
这些错误

00:19:09.606 --> 00:19:11.256 A:middle
有几个 userInfo 键

00:19:11.256 --> 00:19:12.776 A:middle
可以让你更改

00:19:12.776 --> 00:19:13.796 A:middle
错误信息

00:19:14.026 --> 00:19:15.536 A:middle
我们现在要更改恢复建议

00:19:15.536 --> 00:19:17.416 A:middle
因为我们知道

00:19:17.416 --> 00:19:18.266 A:middle
这个错误出现于

00:19:18.266 --> 00:19:19.936 A:middle
下载环节 我们可以

00:19:19.936 --> 00:19:21.946 A:middle
把这一信息告知用户

00:19:21.946 --> 00:19:22.326 A:middle
帮助他们恢复

00:19:22.846 --> 00:19:25.756 A:middle
顺便说一句

00:19:25.756 --> 00:19:27.806 A:middle
如果你使用的是 Xcode 9

00:19:27.806 --> 00:19:29.676 A:middle
这个新的 Cocoa 错误方法可以

00:19:29.676 --> 00:19:31.296 A:middle
让 Cocoa 域错误的创建

00:19:31.396 --> 00:19:32.686 A:middle
更为便捷

00:19:34.056 --> 00:19:36.306 A:middle
现在 如果你需要一个

00:19:36.306 --> 00:19:38.646 A:middle
Cocoa 并未提供的错误

00:19:38.646 --> 00:19:39.636 A:middle
那么你仍可轻松地自行创建

00:19:40.386 --> 00:19:42.266 A:middle
你要做的就是

00:19:42.266 --> 00:19:44.846 A:middle
定义域  和你的错误代码

00:19:45.036 --> 00:19:47.086 A:middle
然后用那个域  还有其中一个代码

00:19:47.086 --> 00:19:49.916 A:middle
以及带键的 userInfo

00:19:49.916 --> 00:19:52.006 A:middle
来创建一个 NSError

00:19:52.006 --> 00:19:53.386 A:middle
userInfo 所带一这个键

00:19:53.876 --> 00:19:54.866 A:middle
用于描述错误信息  提供错误信息

00:19:55.186 --> 00:19:57.176 A:middle
此外你不需要在 userInfo 里

00:19:57.176 --> 00:19:59.186 A:middle
预先给出这些键

00:19:59.456 --> 00:20:01.116 A:middle
你可以调用这个 NSErrorClass 方法

00:19:59.456 --> 00:20:01.116 A:middle
你可以调用这个 NSErrorClass 方法

00:20:01.116 --> 00:20:02.816 A:middle
设置 userInfo ValueProvider

00:20:02.816 --> 00:20:04.336 A:middle
然后就获得了

00:20:04.336 --> 00:20:04.976 A:middle
想要的域

00:20:05.206 --> 00:20:07.146 A:middle
然后  当包含这个域的 NSError

00:20:07.146 --> 00:20:09.466 A:middle
查找 userInfo 键却

00:20:09.466 --> 00:20:10.976 A:middle
无法找到时

00:20:10.976 --> 00:20:11.656 A:middle
它就会调用这个代码块

00:20:12.116 --> 00:20:13.916 A:middle
这样 你可以不费力地

00:20:13.916 --> 00:20:15.516 A:middle
返回那些键的值

00:20:16.036 --> 00:20:17.736 A:middle
这就意味着 现在要

00:20:17.776 --> 00:20:20.086 A:middle
创建你的错误已经超级简单

00:20:20.206 --> 00:20:21.556 A:middle
你只需用你的域和代码

00:20:21.556 --> 00:20:23.116 A:middle
创建一个 NSError

00:20:23.156 --> 00:20:23.396 A:middle
就搞定了

00:20:26.586 --> 00:20:27.706 A:middle
现在 在 NSError 上

00:20:27.706 --> 00:20:29.756 A:middle
有很多属性 去看一看

00:20:29.756 --> 00:20:30.716 A:middle
页头  获取更多信息吧

00:20:30.716 --> 00:20:33.376 A:middle
我确实要提一点  这些属性里有许多是

00:20:33.376 --> 00:20:35.166 A:middle
有对应的 userInfo 键

00:20:35.166 --> 00:20:37.066 A:middle
所以你可以在你的

00:20:37.066 --> 00:20:38.676 A:middle
userInfo ValueProvider 里使用它们

00:20:38.676 --> 00:20:40.526 A:middle
然后毫不费力地返回值

00:20:40.526 --> 00:20:41.276 A:middle
所以去看看那些属性吧

00:20:42.616 --> 00:20:45.996 A:middle
接下来要谈的是

00:20:46.116 --> 00:20:47.326 A:middle
“技巧 6 Shared Key Sets”

00:20:48.076 --> 00:20:50.256 A:middle
如果你在用同样的

00:20:50.456 --> 00:20:52.136 A:middle
已知键创建大量字典

00:20:52.136 --> 00:20:54.636 A:middle
那么你可以使用 sharedKeySet

00:20:54.686 --> 00:20:56.206 A:middle
你的字典将变得

00:20:56.206 --> 00:20:57.826 A:middle
更紧凑 性能更好

00:20:57.986 --> 00:20:59.276 A:middle
这得益于散列法的

00:20:59.276 --> 00:20:59.786 A:middle
证明

00:21:00.236 --> 00:21:01.896 A:middle
所以 你用这个 NSDictionary 类函数

00:21:01.896 --> 00:21:03.816 A:middle
创建一个 sharedKeySet

00:21:03.966 --> 00:21:06.176 A:middle
它会生成一个

00:21:06.176 --> 00:21:07.916 A:middle
完美的散列

00:21:07.916 --> 00:21:08.696 A:middle
然后你可以用

00:21:08.806 --> 00:21:10.086 A:middle
你的 sharedKeySet

00:21:10.086 --> 00:21:10.876 A:middle
把你的 NSMutableDictationary

00:21:11.806 --> 00:21:13.186 A:middle
初始化

00:21:13.186 --> 00:21:13.506 A:middle
可能像这样

00:21:14.116 --> 00:21:16.036 A:middle
你创建你的 sharedKeySet

00:21:16.036 --> 00:21:18.266 A:middle
计算一个 sharedKeySet

00:21:18.266 --> 00:21:20.136 A:middle
不是件简单的事

00:21:20.136 --> 00:21:22.456 A:middle
所以把它存放起来

00:21:22.456 --> 00:21:24.026 A:middle
并且重复使用  这是个好主意

00:21:24.026 --> 00:21:25.296 A:middle
你可以随心所欲地

00:21:25.826 --> 00:21:26.316 A:middle
创建你的可变字典

00:21:26.436 --> 00:21:27.436 A:middle
你创建了可变字典

00:21:27.436 --> 00:21:29.606 A:middle
然后就 可以使用它

00:21:29.606 --> 00:21:30.966 A:middle
就像用其他的可变字典一样

00:21:30.966 --> 00:21:33.196 A:middle
你甚至可以插入

00:21:33.196 --> 00:21:34.646 A:middle
不在你的 sharedKeySet 里的键

00:21:34.646 --> 00:21:36.506 A:middle
它们只是不会具有

00:21:36.506 --> 00:21:37.156 A:middle
同样的高性能而已

00:21:37.626 --> 00:21:39.756 A:middle
所以 这就是 sharedKeySet

00:21:40.286 --> 00:21:41.396 A:middle
我现在把舞台交还 Rachel

00:21:42.496 --> 00:21:44.566 A:middle
&gt;&gt;  我们现在要讲讲十六进制里代表

00:21:44.676 --> 00:21:46.836 A:middle
可访问性的 A   听说过

00:21:46.836 --> 00:21:47.966 A:middle
AX 寄存器吗

00:21:48.116 --> 00:21:52.276 A:middle
Apple 有很多方法

00:21:52.276 --> 00:21:53.546 A:middle
让你的产品可供所有用户

00:21:53.546 --> 00:21:54.016 A:middle
来访问

00:21:54.016 --> 00:21:55.186 A:middle
我只介绍其中的几样

00:21:55.186 --> 00:21:55.896 A:middle
小工具

00:21:56.296 --> 00:21:57.826 A:middle
其实 VoiceOver 并不算小

00:21:57.826 --> 00:21:59.046 A:middle
但我只能简单地谈一下

00:21:59.396 --> 00:22:00.846 A:middle
它内置于所有的 Apple 产品中

00:21:59.396 --> 00:22:00.846 A:middle
它内置于所有的 Apple 产品中

00:22:00.846 --> 00:22:03.396 A:middle
并且可以在界面构建器里

00:22:03.396 --> 00:22:04.766 A:middle
轻松设置

00:22:04.906 --> 00:22:07.946 A:middle
我有一个“添加猫”的按钮

00:22:07.946 --> 00:22:09.526 A:middle
我只要在可访问性描述中

00:22:09.526 --> 00:22:11.296 A:middle
填入“添加猫”   然后 VoiceOver

00:22:11.296 --> 00:22:13.446 A:middle
就知道该说什么了

00:22:13.636 --> 00:22:15.556 A:middle
还有  要记得在低分辨率条件下

00:22:15.626 --> 00:22:17.706 A:middle
测试你的 App

00:22:17.706 --> 00:22:19.116 A:middle
视力差的用户想把

00:22:19.116 --> 00:22:19.796 A:middle
屏幕内容放大显示

00:22:20.006 --> 00:22:22.156 A:middle
例如 这是我的

00:22:22.156 --> 00:22:23.786 A:middle
Cat Wrangler 启动画面

00:22:23.786 --> 00:22:24.416 A:middle
我对它很满意

00:22:24.416 --> 00:22:26.456 A:middle
我用较低的分辨率打开它时

00:22:26.456 --> 00:22:28.236 A:middle
它在屏幕上就模糊不清了

00:22:28.236 --> 00:22:29.136 A:middle
别让这种情况发生在你的身上

00:22:29.136 --> 00:22:32.056 A:middle
最后 我想指出

00:22:32.056 --> 00:22:33.636 A:middle
在 Xcode 菜单中 还可以发现一个

00:22:33.636 --> 00:22:35.526 A:middle
可访问性检测器

00:22:35.526 --> 00:22:36.536 A:middle
的存在

00:22:36.966 --> 00:22:38.586 A:middle
启动它 在你的各个 App 上运行它

00:22:38.646 --> 00:22:40.176 A:middle
看看你的 App 在可访问性方面

00:22:40.656 --> 00:22:41.996 A:middle
还有哪些地方

00:22:41.996 --> 00:22:42.596 A:middle
可以改进

00:22:43.506 --> 00:22:44.176 A:middle
现在把舞台还给 Vince

00:22:45.166 --> 00:22:47.646 A:middle
&gt;&gt; 好的 现在进入

00:22:48.116 --> 00:22:48.966 A:middle
无限性与文件这个话题

00:22:50.366 --> 00:22:52.086 A:middle
现在的用户非常苛刻

00:22:52.086 --> 00:22:54.066 A:middle
他们对基于文档的 App

00:22:54.066 --> 00:22:55.326 A:middle
有很多期望

00:22:55.586 --> 00:22:56.766 A:middle
他们不想为保存内容

00:22:56.766 --> 00:22:57.296 A:middle
而担心

00:22:57.756 --> 00:22:59.656 A:middle
他们希望能够轻松地

00:22:59.656 --> 00:23:01.736 A:middle
命名并组织自己的文件

00:22:59.656 --> 00:23:01.736 A:middle
命名并组织自己的文件

00:23:01.736 --> 00:23:03.536 A:middle
他们还想要强大的

00:23:03.536 --> 00:23:03.946 A:middle
版本控制

00:23:04.516 --> 00:23:06.326 A:middle
他们甚至想要更多功能

00:23:06.326 --> 00:23:07.906 A:middle
例如 macOS High Sierra 上新增的

00:23:07.906 --> 00:23:09.736 A:middle
iCloud 文档共享

00:23:09.736 --> 00:23:10.816 A:middle
大家可能在本周之前 甚至连听都

00:23:10.816 --> 00:23:12.226 A:middle
没有听说过

00:23:12.496 --> 00:23:13.646 A:middle
开发者要做什么

00:23:14.766 --> 00:23:17.796 A:middle
嗯 你可以使用 NSDocument

00:23:17.796 --> 00:23:19.416 A:middle
它有一个类属性

00:23:19.416 --> 00:23:20.606 A:middle
名为 autosavesInPlace

00:23:20.936 --> 00:23:22.626 A:middle
在默认情况下 它会返回 False 值

00:23:22.846 --> 00:23:24.406 A:middle
但你可以覆写它

00:23:24.406 --> 00:23:26.076 A:middle
让它返回 True 值

00:23:26.076 --> 00:23:28.326 A:middle
你将免费获得所有这些功能

00:23:28.326 --> 00:23:28.986 A:middle
所以它很棒

00:23:29.326 --> 00:23:30.916 A:middle
如果你有一个基于文件的应用

00:23:30.916 --> 00:23:32.066 A:middle
那就查看一下 NSDocument 吧

00:23:32.826 --> 00:23:37.406 A:middle
接下来是“技巧 42 异常报告的

00:23:38.206 --> 00:23:39.626 A:middle
答复”

00:23:40.816 --> 00:23:41.946 A:middle
在大多数情况下

00:23:41.946 --> 00:23:43.386 A:middle
当 NSApplication 在捕获异常时

00:23:43.386 --> 00:23:45.296 A:middle
只会把异常记入日志

00:23:45.296 --> 00:23:46.276 A:middle
让你的 App 继续

00:23:46.276 --> 00:23:47.046 A:middle
勉强运行

00:23:47.456 --> 00:23:48.776 A:middle
但如果你想要

00:23:48.776 --> 00:23:50.416 A:middle
添加信息或

00:23:50.416 --> 00:23:52.066 A:middle
用特别的方式处理异常情况

00:23:52.066 --> 00:23:53.656 A:middle
你可以覆写这个 NSApplication 方法

00:23:53.656 --> 00:23:55.166 A:middle
从而执行你自己的操作

00:23:55.716 --> 00:23:57.516 A:middle
现在 请 Rachel 回来介绍

00:23:58.286 --> 00:24:00.656 A:middle
好的 人非圣贤  孰能无过

00:23:58.286 --> 00:24:00.656 A:middle
好的 人非圣贤  孰能无过

00:24:00.776 --> 00:24:01.816 A:middle
在计算机操作过程中

00:24:01.816 --> 00:24:02.906 A:middle
在人类已经犯错的时候  尤其如此

00:24:02.906 --> 00:24:04.416 A:middle
所以 我们来简单聊一聊

00:24:04.416 --> 00:24:05.456 A:middle
调试的问题

00:24:05.796 --> 00:24:06.896 A:middle
大家知道   调试工具

00:24:06.896 --> 00:24:08.196 A:middle
有很多很多种

00:24:08.196 --> 00:24:09.636 A:middle
而我只向大家展示一些

00:24:09.636 --> 00:24:10.986 A:middle
多少隐藏在 Xcode 里的调试工具

00:24:10.986 --> 00:24:12.626 A:middle
就在调试控制台的上方

00:24:12.886 --> 00:24:14.226 A:middle
有一排按钮

00:24:14.936 --> 00:24:16.626 A:middle
其中有视图层级调试按钮

00:24:16.626 --> 00:24:19.716 A:middle
内存图调试按钮和

00:24:19.716 --> 00:24:20.926 A:middle
虚拟定位按钮

00:24:21.326 --> 00:24:22.246 A:middle
我准备只展示

00:24:22.246 --> 00:24:23.326 A:middle
一些关于视图调试器

00:24:23.326 --> 00:24:23.906 A:middle
的信息

00:24:25.256 --> 00:24:27.096 A:middle
这是一个简单的

00:24:27.096 --> 00:24:28.976 A:middle
浏览器示例应用程序

00:24:28.976 --> 00:24:31.096 A:middle
我可以展开这些视图

00:24:31.096 --> 00:24:32.686 A:middle
查看究竟发生了什么

00:24:32.686 --> 00:24:33.796 A:middle
有没有视图被别的视图遮挡

00:24:33.796 --> 00:24:35.626 A:middle
哪个视图正在做什么事

00:24:35.626 --> 00:24:38.416 A:middle
我可以看到被裁剪视图

00:24:38.416 --> 00:24:39.636 A:middle
延伸的位置

00:24:39.976 --> 00:24:41.146 A:middle
自动布局还有很多用处

00:24:41.146 --> 00:24:42.666 A:middle
大家可以在

00:24:42.666 --> 00:24:44.296 A:middle
这个视图调试器里使用它

00:24:44.296 --> 00:24:46.116 A:middle
所以大家不妨去看一看

00:24:46.116 --> 00:24:47.476 A:middle
它会让对调试视图问题的能力要求

00:24:47.566 --> 00:24:47.996 A:middle
变得简单

00:24:49.176 --> 00:24:51.066 A:middle
有时候 错误出现在我们的代码里

00:24:51.066 --> 00:24:53.006 A:middle
在这种情况下 我要谈到

00:24:53.006 --> 00:24:57.616 A:middle
“技巧 30512012 编写错误报告”

00:24:58.476 --> 00:25:00.146 A:middle
为了使我们修复错误的工作

00:24:58.476 --> 00:25:00.146 A:middle
为了使我们修复错误的工作

00:25:00.146 --> 00:25:02.356 A:middle
更加容易  需要采取一些

00:25:02.356 --> 00:25:03.736 A:middle
再现错误的步骤  这是最为重要的

00:25:03.736 --> 00:25:04.546 A:middle
一件事

00:25:05.716 --> 00:25:07.136 A:middle
我们非常欢迎大家把示例应用放在

00:25:07.136 --> 00:25:08.406 A:middle
错误报告中

00:25:08.786 --> 00:25:10.666 A:middle
尤其是 当这些错误

00:25:10.666 --> 00:25:12.486 A:middle
在你关心的平台上

00:25:12.486 --> 00:25:13.296 A:middle
形成并显示出

00:25:14.286 --> 00:25:15.756 A:middle
问题的时候

00:25:15.756 --> 00:25:16.956 A:middle
要把再现问题所需的一切资源

00:25:16.956 --> 00:25:17.576 A:middle
都考虑在内

00:25:19.026 --> 00:25:20.596 A:middle
然后是日志

00:25:20.646 --> 00:25:21.356 A:middle
例如 sysdiagnose

00:25:21.946 --> 00:25:23.126 A:middle
在 developer.apple.com 这个网址上

00:25:23.276 --> 00:25:25.446 A:middle
有一个页面  它展示了

00:25:25.446 --> 00:25:27.696 A:middle
如何收集我们所有平台的日志

00:25:27.696 --> 00:25:29.566 A:middle
并通过浏览日志

00:25:29.566 --> 00:25:31.236 A:middle
来看看有什么可能会对

00:25:31.236 --> 00:25:32.426 A:middle
正在查看问题的用户

00:25:32.476 --> 00:25:34.156 A:middle
有所帮助

00:25:34.156 --> 00:25:35.606 A:middle
这将有助于整个进程的加快发展

00:25:36.756 --> 00:25:37.626 A:middle
下面有请 Vince

00:25:38.496 --> 00:25:41.756 A:middle
好的 “技巧 44.1”

00:25:41.756 --> 00:25:44.176 A:middle
有一个非常简单的方法可以

00:25:44.176 --> 00:25:45.126 A:middle
为你的应用添加

00:25:45.126 --> 00:25:45.806 A:middle
一些花哨的效果

00:25:46.936 --> 00:25:49.056 A:middle
NSButton 有一个属性

00:25:49.056 --> 00:25:51.016 A:middle
叫作 sound  它用 NSSound 形式呈现

00:25:51.076 --> 00:25:52.756 A:middle
而且十分容易

00:25:52.846 --> 00:25:53.096 A:middle
设置

00:25:53.496 --> 00:25:55.026 A:middle
如果你设置了音效

00:25:55.026 --> 00:25:56.746 A:middle
那么当用户点击按钮时

00:25:56.746 --> 00:25:59.006 A:middle
它将播放该音效

00:25:59.006 --> 00:26:00.266 A:middle
你甚至可以在界面构建器里设置它

00:25:59.006 --> 00:26:00.266 A:middle
你甚至可以在界面构建器里设置它

00:26:00.706 --> 00:26:02.366 A:middle
所以 通过它来

00:26:02.366 --> 00:26:04.046 A:middle
给你的用户界面设置出特殊的效果吧

00:26:04.046 --> 00:26:04.986 A:middle
你们的用户可是嚷嚷半天了

00:26:05.053 --> 00:26:09.786 A:middle
现在来说“技巧 29”

00:26:09.786 --> 00:26:13.276 A:middle
我将进行一项演示

00:26:13.276 --> 00:26:14.646 A:middle
但演示内容不是按按钮触发 NSSound 来演奏

00:26:14.646 --> 00:26:15.676 A:middle
那样太傻了

00:26:15.916 --> 00:26:18.036 A:middle
我们将展示一个 macOS App

00:26:18.506 --> 00:26:19.966 A:middle
这是一款大胆进军

00:26:19.966 --> 00:26:21.486 A:middle
于过于饱和的猫咪管理应用市场里

00:26:21.486 --> 00:26:22.876 A:middle
参与竞争的应用

00:26:22.876 --> 00:26:24.846 A:middle
它叫 Cat Herder

00:26:24.846 --> 00:26:27.036 A:middle
它和你们之前听到的

00:26:27.036 --> 00:26:28.366 A:middle
Cat Wrangler 应用毫无关联

00:26:28.366 --> 00:26:29.646 A:middle
我们将从头开始

00:26:29.646 --> 00:26:32.616 A:middle
创建这个应用

00:26:32.846 --> 00:26:34.486 A:middle
好 我们已经有了我们的项目

00:26:34.956 --> 00:26:38.366 A:middle
在这里 我们有

00:26:38.366 --> 00:26:40.416 A:middle
针对我们这款 Cat Herder 应用的具体说明

00:26:40.416 --> 00:26:43.116 A:middle
看起来

00:26:43.116 --> 00:26:44.916 A:middle
左侧像是有一个猫列表

00:26:44.916 --> 00:26:47.576 A:middle
以及一些添加和

00:26:47.576 --> 00:26:48.606 A:middle
删除按钮

00:26:49.016 --> 00:26:51.366 A:middle
对于被选中的猫

00:26:51.366 --> 00:26:53.136 A:middle
我们可以编辑它的名字和照片

00:26:53.756 --> 00:26:55.156 A:middle
好的 看起来很简单

00:26:55.156 --> 00:26:56.276 A:middle
一目了然

00:26:57.176 --> 00:26:58.896 A:middle
幸运地是 我们有一个 Designer

00:26:58.896 --> 00:27:02.006 A:middle
它已经为我们创建了一个 NIB 文件

00:26:58.896 --> 00:27:02.006 A:middle
它已经为我们创建了一个 NIB 文件

00:27:02.006 --> 00:27:04.716 A:middle
我们继续 来看一看

00:27:04.716 --> 00:27:05.576 A:middle
它看起来很不错

00:27:05.576 --> 00:27:05.976 A:middle
我们可以运行它

00:27:10.046 --> 00:27:11.746 A:middle
好了 但无法连接

00:27:11.746 --> 00:27:13.026 A:middle
无法运作

00:27:13.026 --> 00:27:16.416 A:middle
什么都做不了

00:27:17.096 --> 00:27:18.846 A:middle
所以 这时候应该写一些代码

00:27:19.156 --> 00:27:20.356 A:middle
把所有这一切整合到

00:27:20.356 --> 00:27:20.786 A:middle
一起来

00:27:22.146 --> 00:27:24.356 A:middle
但如果我告诉你

00:27:24.356 --> 00:27:25.806 A:middle
有一种方法可以

00:27:25.806 --> 00:27:27.676 A:middle
在不需要任何代码的情况下

00:27:27.676 --> 00:27:28.926 A:middle
让这个用户界面运作起来  那会怎样？

00:27:29.576 --> 00:27:31.546 A:middle
macOS 有一项技术叫绑定

00:27:31.546 --> 00:27:32.936 A:middle
它完全能够让我们

00:27:32.936 --> 00:27:34.216 A:middle
做到这一点

00:27:35.436 --> 00:27:38.966 A:middle
所以我们继续

00:27:38.966 --> 00:27:42.416 A:middle
进入 Storyboard

00:27:42.416 --> 00:27:45.806 A:middle
这个是我们的表格视图

00:27:45.806 --> 00:27:47.496 A:middle
它将显示一个猫列表

00:27:48.226 --> 00:27:49.276 A:middle
可能会有一个数组

00:27:49.276 --> 00:27:50.236 A:middle
为其提供支持

00:27:50.766 --> 00:27:52.896 A:middle
事实证明

00:27:52.896 --> 00:27:55.746 A:middle
我们有一个名叫数组控制器的类

00:27:55.746 --> 00:27:58.336 A:middle
位于这边的对象浏览器当中

00:27:58.336 --> 00:27:59.816 A:middle
我们继续 把它拖入

00:27:59.896 --> 00:28:00.186 A:middle
我们的场景

00:27:59.896 --> 00:28:00.186 A:middle
我们的场景

00:28:00.826 --> 00:28:03.196 A:middle
数组控制器可以让你

00:28:03.196 --> 00:28:05.846 A:middle
创建到对象数组的

00:28:05.846 --> 00:28:06.566 A:middle
绑定

00:28:07.096 --> 00:28:08.626 A:middle
所以 我们可以在右上角

00:28:08.626 --> 00:28:10.656 A:middle
查看属性检查器

00:28:10.656 --> 00:28:13.796 A:middle
并选择属性

00:28:13.796 --> 00:28:15.146 A:middle
你可以让你的

00:28:15.146 --> 00:28:16.896 A:middle
数组控制器处理

00:28:16.896 --> 00:28:19.846 A:middle
你想要的任何分类数组

00:28:19.846 --> 00:28:20.746 A:middle
或 Core Data 实体

00:28:21.306 --> 00:28:22.606 A:middle
我们将使用

00:28:22.606 --> 00:28:24.426 A:middle
NSMutableDictionary 作为默认设置

00:28:24.556 --> 00:28:25.836 A:middle
因为这只是让我们

00:28:25.836 --> 00:28:26.586 A:middle
开始运行

00:28:26.926 --> 00:28:28.346 A:middle
我们想让我们的表格视图

00:28:28.346 --> 00:28:30.526 A:middle
显示我们的猫列表

00:28:30.526 --> 00:28:33.516 A:middle
我们可以通过向下展开表格视图

00:28:33.576 --> 00:28:35.136 A:middle
来做到这一点

00:28:35.136 --> 00:28:36.166 A:middle
直到进入表格纵栏

00:28:36.816 --> 00:28:38.356 A:middle
我们可以来这边

00:28:38.356 --> 00:28:39.996 A:middle
找到绑定检查器

00:28:39.996 --> 00:28:41.276 A:middle
它就在右上角

00:28:41.276 --> 00:28:44.436 A:middle
这是一个漩涡纹的盒子式的东西

00:28:44.436 --> 00:28:45.386 A:middle
我们可以点击它

00:28:45.496 --> 00:28:49.196 A:middle
并将表格纵栏的值

00:28:49.196 --> 00:28:51.556 A:middle
绑定到数组控制器的

00:28:51.556 --> 00:28:52.756 A:middle
arrangedObjects 上

00:28:53.136 --> 00:28:54.396 A:middle
而 arrangedObjects 是

00:28:54.396 --> 00:28:56.356 A:middle
数组控制器上的一个属性

00:28:56.356 --> 00:28:57.836 A:middle
那是你的猫数组

00:28:57.836 --> 00:28:59.656 A:middle
也就是视图这方面所代表的

00:29:00.206 --> 00:29:01.146 A:middle
东西

00:29:01.326 --> 00:29:03.846 A:middle
那么现在 我们的表格视图将

00:29:03.846 --> 00:29:06.606 A:middle
为数组中的每只猫创建一个横格

00:29:06.606 --> 00:29:09.056 A:middle
这意味着它将

00:29:09.056 --> 00:29:10.756 A:middle
为数组中的每只猫

00:29:10.756 --> 00:29:13.046 A:middle
创建一个表格的单元格视图

00:29:13.046 --> 00:29:14.776 A:middle
并把该视图单元格的对象值

00:29:14.776 --> 00:29:16.476 A:middle
设置为特定的猫

00:29:17.346 --> 00:29:18.666 A:middle
那么 我们进入表格视图单元格

00:29:18.666 --> 00:29:20.926 A:middle
我们有一个图像视图

00:29:20.926 --> 00:29:23.676 A:middle
一个缩略图和

00:29:23.676 --> 00:29:24.286 A:middle
名字标签

00:29:24.976 --> 00:29:26.586 A:middle
我们可以继续操作

00:29:26.586 --> 00:29:28.376 A:middle
再回到我们的绑定检查器

00:29:28.896 --> 00:29:31.196 A:middle
并选择绑定到

00:29:31.196 --> 00:29:33.076 A:middle
表格视图单元格的对象值

00:29:33.076 --> 00:29:34.316 A:middle
而这个对象值仍将属于

00:29:34.316 --> 00:29:35.366 A:middle
我们这些猫咪中的一员

00:29:35.876 --> 00:29:38.466 A:middle
我们可以写入路径

00:29:38.466 --> 00:29:41.516 A:middle
并指定猫的名字

00:29:41.516 --> 00:29:42.656 A:middle
它将在字典里进行查找

00:29:42.656 --> 00:29:44.826 A:middle
并显示出来

00:29:45.016 --> 00:29:48.036 A:middle
与此类似 我们把猫的照片

00:29:48.336 --> 00:29:51.066 A:middle
绑定到图像视图

00:29:51.066 --> 00:29:55.246 A:middle
就像这样

00:29:55.356 --> 00:29:57.406 A:middle
现在 这是我们的表格视图

00:29:57.406 --> 00:29:59.436 A:middle
就是这样 它现在被绑定并

00:29:59.436 --> 00:30:00.386 A:middle
连接到数组控制器

00:29:59.436 --> 00:30:00.386 A:middle
连接到数组控制器

00:30:00.386 --> 00:30:00.976 A:middle
它将显示它的内容

00:30:02.146 --> 00:30:03.646 A:middle
接下来 在这个角上

00:30:03.646 --> 00:30:06.816 A:middle
有这些按钮

00:30:06.816 --> 00:30:08.916 A:middle
而数组控制器实际上具有

00:30:08.916 --> 00:30:11.206 A:middle
添加和删除对象的

00:30:11.346 --> 00:30:12.266 A:middle
ID 操作

00:30:13.426 --> 00:30:15.426 A:middle
添加的方法会执行

00:30:15.426 --> 00:30:16.776 A:middle
你所期望的操作 它将为

00:30:16.776 --> 00:30:18.226 A:middle
正在处理的对象新建一个实例

00:30:18.226 --> 00:30:19.706 A:middle
在我们这个例子中

00:30:19.706 --> 00:30:21.246 A:middle
这指的是 NSMutableDictionary

00:30:21.246 --> 00:30:23.016 A:middle
这个实例将被添加到数组当中

00:30:23.016 --> 00:30:23.436 A:middle
这样我们可以把它连接起来

00:30:23.976 --> 00:30:26.656 A:middle
当然 还有一个移除动作

00:30:26.656 --> 00:30:28.526 A:middle
它将执行我们期望的操作

00:30:28.526 --> 00:30:30.946 A:middle
它把选中的项目

00:30:30.946 --> 00:30:32.386 A:middle
从数组当中进行

00:30:32.386 --> 00:30:32.716 A:middle
移除

00:30:33.966 --> 00:30:35.856 A:middle
当然 我们需要将

00:30:35.856 --> 00:30:37.426 A:middle
一些花哨的效果添加到

00:30:37.426 --> 00:30:39.316 A:middle
应用上 大家都知道我们在这方面

00:30:39.316 --> 00:30:40.026 A:middle
比较擅长

00:30:41.576 --> 00:30:45.736 A:middle
就像这样

00:30:45.736 --> 00:30:46.106 A:middle
按钮就处理完了

00:30:46.626 --> 00:30:47.846 A:middle
现在只剩下

00:30:47.846 --> 00:30:49.196 A:middle
另一边的细节视图了

00:30:50.406 --> 00:30:53.696 A:middle
所以 我们可以回到我们的文本框

00:30:53.696 --> 00:30:55.166 A:middle
转到这里的文本框

00:30:55.166 --> 00:30:56.866 A:middle
这是名字

00:30:56.866 --> 00:30:58.516 A:middle
我们可以在上面编辑名字

00:30:58.516 --> 00:30:59.686 A:middle
回到绑定检查器

00:30:59.686 --> 00:31:02.216 A:middle
我们可以绑定

00:30:59.686 --> 00:31:02.216 A:middle
我们可以绑定

00:31:02.216 --> 00:31:03.686 A:middle
数组控制器 Selection

00:31:03.946 --> 00:31:05.316 A:middle
数组控制器的 Selection

00:31:05.316 --> 00:31:07.106 A:middle
是一种属性

00:31:07.106 --> 00:31:08.326 A:middle
是一个代理对象

00:31:08.326 --> 00:31:09.506 A:middle
它代表当前数组里

00:31:09.506 --> 00:31:11.856 A:middle
被选定的项目

00:31:12.486 --> 00:31:13.936 A:middle
所以 我们可以在 Selection 里写入键路径

00:31:13.936 --> 00:31:15.896 A:middle
以真正实现编辑操作

00:31:15.936 --> 00:31:18.526 A:middle
并显示猫的名字

00:31:19.746 --> 00:31:21.466 A:middle
与此类似 我们可以在照片选择上

00:31:21.466 --> 00:31:23.696 A:middle
采用相同操作

00:31:23.786 --> 00:31:28.616 A:middle
就是这样

00:31:28.616 --> 00:31:29.636 A:middle
我们现在是在没有代码的情况下

00:31:29.996 --> 00:31:32.346 A:middle
连接了应用

00:31:32.876 --> 00:31:33.976 A:middle
那么我们来运行一下吧

00:31:39.046 --> 00:31:42.166 A:middle
可以添加我们的猫

00:31:42.166 --> 00:31:46.266 A:middle
写上名字 附上图片

00:31:47.596 --> 00:31:51.146 A:middle
添加更多的猫

00:31:51.886 --> 00:31:53.796 A:middle
这确实是一个令人惊奇的应用

00:31:53.796 --> 00:31:54.136 A:middle
很便利

00:31:55.366 --> 00:31:58.346 A:middle
由于我们使用了绑定

00:31:58.346 --> 00:32:00.146 A:middle
所以你可以对这些进行更新

00:31:58.346 --> 00:32:00.146 A:middle
所以你可以对这些进行更新

00:32:00.146 --> 00:32:01.446 A:middle
它们将在表格视图中完成

00:32:01.446 --> 00:32:02.246 A:middle
即时更新

00:32:02.906 --> 00:32:04.336 A:middle
就像这样 我们可以

00:32:04.336 --> 00:32:07.666 A:middle
拖入一张新图片或快速查看

00:32:07.666 --> 00:32:09.326 A:middle
拖入一张新图片

00:32:09.326 --> 00:32:10.556 A:middle
它同样也会在表格视图中

00:32:10.556 --> 00:32:10.886 A:middle
更新

00:32:11.476 --> 00:32:13.126 A:middle
当然 我们需要确认

00:32:13.126 --> 00:32:14.296 A:middle
我们这些花哨的效果

00:32:14.786 --> 00:32:16.046 A:middle
能正常运作 真棒

00:32:17.196 --> 00:32:17.976 A:middle
这就是绑定

00:32:18.516 --> 00:32:21.766 A:middle
[掌声]

00:32:22.266 --> 00:32:24.356 A:middle
你可以使用绑定

00:32:24.356 --> 00:32:25.906 A:middle
将你的用户界面连接到模型上

00:32:25.906 --> 00:32:27.436 A:middle
而无需编写

00:32:27.436 --> 00:32:29.486 A:middle
任何粘合代码

00:32:29.486 --> 00:32:31.686 A:middle
下一步可能是使用一个

00:32:31.686 --> 00:32:33.096 A:middle
真正的猫的分类 而不是字典

00:32:33.096 --> 00:32:35.266 A:middle
甚至不是一个 Core Data 实体

00:32:35.266 --> 00:32:36.856 A:middle
那样 你将获得持久的东西

00:32:36.996 --> 00:32:39.056 A:middle
你的猫列表将

00:32:39.056 --> 00:32:39.566 A:middle
得以保存

00:32:40.036 --> 00:32:43.026 A:middle
但你永远不需要

00:32:43.026 --> 00:32:44.956 A:middle
与此而言

00:32:44.956 --> 00:32:46.566 A:middle
你倒是需要写一些代码

00:32:46.566 --> 00:32:48.136 A:middle
但你无须为你的用户界面

00:32:48.136 --> 00:32:50.296 A:middle
写粘合代码

00:32:50.296 --> 00:32:50.636 A:middle
这就是绑定

00:32:51.206 --> 00:32:51.906 A:middle
现在请 Rachel 再来讲讲

00:32:52.096 --> 00:32:54.686 A:middle
&gt;&gt; 好的 “技巧 29” 或许

00:32:54.686 --> 00:32:56.926 A:middle
看起来像是要接近尾声了

00:32:57.336 --> 00:32:59.446 A:middle
其实我们还有 N+1 个技巧

00:32:59.446 --> 00:32:59.896 A:middle
“添加你自己的技巧”

00:33:00.176 --> 00:33:01.346 A:middle
一些关于如何获取信息

00:33:01.346 --> 00:33:02.506 A:middle
并学到更多的想法

00:33:03.056 --> 00:33:04.656 A:middle
我们今年有了

00:33:04.656 --> 00:33:06.906 A:middle
新的修订文稿

00:33:06.906 --> 00:33:07.596 A:middle
主题按任务分组

00:33:08.376 --> 00:33:09.796 A:middle
有一个层级结构

00:33:09.796 --> 00:33:11.216 A:middle
允许你向下展开

00:33:11.566 --> 00:33:13.186 A:middle
例如在这个例子里

00:33:13.186 --> 00:33:14.846 A:middle
不断打开下一级 查看 NSView

00:33:15.756 --> 00:33:17.336 A:middle
三种不同的

00:33:17.336 --> 00:33:18.386 A:middle
展示风格

00:33:18.386 --> 00:33:20.636 A:middle
即参考文档

00:33:20.636 --> 00:33:23.396 A:middle
还有概念文章和

00:33:23.396 --> 00:33:23.716 A:middle
示例代码

00:33:23.716 --> 00:33:24.806 A:middle
因此 有不同的方法

00:33:24.806 --> 00:33:25.806 A:middle
来获取材料

00:33:27.096 --> 00:33:28.626 A:middle
我们还强烈建议

00:33:28.626 --> 00:33:29.826 A:middle
大家去查看我们所有平台上的

00:33:29.826 --> 00:33:31.196 A:middle
版本发布说明

00:33:31.636 --> 00:33:32.966 A:middle
这是工程师亲自

00:33:32.966 --> 00:33:34.266 A:middle
提供的信息

00:33:34.266 --> 00:33:35.356 A:middle
说明了每个版本的

00:33:35.356 --> 00:33:35.916 A:middle
新功能

00:33:37.216 --> 00:33:38.736 A:middle
页头文件始终是一个

00:33:38.736 --> 00:33:40.186 A:middle
很好的信息来源

00:33:40.186 --> 00:33:42.006 A:middle
它逐行向我们提供了所有 API 的

00:33:42.006 --> 00:33:43.546 A:middle
注释

00:33:44.356 --> 00:33:46.046 A:middle
在周三举行的“Cocoa 的新功能”会议中

00:33:46.046 --> 00:33:48.326 A:middle
我们让人们在 Twitter 上

00:33:48.326 --> 00:33:50.076 A:middle
发布自己的 Cocoa 开发技巧

00:33:50.836 --> 00:33:52.206 A:middle
我们从中收集了

00:33:52.206 --> 00:33:53.186 A:middle
我们最喜欢的一些技巧

00:33:53.296 --> 00:33:54.766 A:middle
虽然很难做出选择

00:33:54.766 --> 00:33:56.586 A:middle
但这里我们仍然选择了一些

00:33:56.586 --> 00:33:56.806 A:middle
喜欢的技巧

00:33:57.176 --> 00:34:00.076 A:middle
NSHashTable 就像 NSSet

00:33:57.176 --> 00:34:00.076 A:middle
NSHashTable 就像 NSSet

00:34:00.076 --> 00:34:01.276 A:middle
但它可以包含任意指针

00:34:01.276 --> 00:34:02.646 A:middle
如 void star

00:34:03.256 --> 00:34:04.506 A:middle
还有 你可以不费力地

00:34:04.506 --> 00:34:05.646 A:middle
从 NSHashTable 中

00:34:05.686 --> 00:34:06.456 A:middle
引用对象

00:34:09.656 --> 00:34:11.246 A:middle
有时候 Objective-C 的

00:34:11.246 --> 00:34:12.576 A:middle
术语有点复杂

00:34:12.576 --> 00:34:14.235 A:middle
你可以使用 typedef 来

00:34:14.235 --> 00:34:16.286 A:middle
简化它们并

00:34:16.286 --> 00:34:17.646 A:middle
清理你的代码

00:34:17.646 --> 00:34:17.976 A:middle
还有

00:34:19.416 --> 00:34:21.306 A:middle
在 Swift 里 你可以使用 typealias

00:34:21.306 --> 00:34:22.235 A:middle
做同样的事

00:34:26.516 --> 00:34:28.266 A:middle
如果你是从 iOS 进入 Mac 的世界

00:34:28.456 --> 00:34:31.835 A:middle
你可能会记得

00:34:31.976 --> 00:34:33.856 A:middle
NSWindowController 是大家

00:34:33.856 --> 00:34:35.065 A:middle
经常想要用的分类

00:34:35.065 --> 00:34:36.565 A:middle
而不是 NSViewController

00:34:37.096 --> 00:34:40.286 A:middle
所以去观察一下

00:34:41.146 --> 00:34:41.235 A:middle
思考一下

00:34:41.496 --> 00:34:44.176 A:middle
我们从 Twitter 选的最后一条技巧是

00:34:44.496 --> 00:34:46.315 A:middle
在 Xcode 中 你可以使用 Add Expression

00:34:46.496 --> 00:34:48.436 A:middle
来获得任意地址的

00:34:48.436 --> 00:34:49.596 A:middle
快速查看预览

00:34:50.826 --> 00:34:53.235 A:middle
这是一些屏幕截图

00:34:53.235 --> 00:34:54.196 A:middle
它们展示了如何实现快速查看预览

00:34:54.886 --> 00:34:56.545 A:middle
我的调试器运行结束了

00:34:56.846 --> 00:34:59.656 A:middle
我要打印出

00:34:59.796 --> 00:35:01.216 A:middle
这个添加猫的图片

00:34:59.796 --> 00:35:01.216 A:middle
这个添加猫的图片

00:35:01.516 --> 00:35:04.476 A:middle
我在这里抓取指针

00:35:04.476 --> 00:35:06.476 A:middle
我可以使用 Add Expression 菜单项

00:35:06.476 --> 00:35:09.926 A:middle
并把我的图像指针

00:35:09.926 --> 00:35:10.336 A:middle
粘贴上去

00:35:10.836 --> 00:35:15.276 A:middle
接下来 如果我敲击空格键

00:35:15.276 --> 00:35:17.936 A:middle
我将获得我的图片的

00:35:17.996 --> 00:35:18.626 A:middle
快速查找预览

00:35:20.216 --> 00:35:21.926 A:middle
关于如何让你的分类可以进行快速查找

00:35:21.926 --> 00:35:23.936 A:middle
这方面有相关的文稿

00:35:23.936 --> 00:35:25.676 A:middle
不妨去查看一下

00:35:25.676 --> 00:35:30.036 A:middle
那么 我们的介绍就到这里

00:35:30.426 --> 00:35:32.286 A:middle
如果你想了解更多信息

00:35:32.286 --> 00:35:35.086 A:middle
可以访问这个页面

00:35:35.086 --> 00:35:36.526 A:middle
我们此前已经召开了几个

00:35:36.526 --> 00:35:36.726 A:middle
相关会议  都在这里面

00:35:37.236 --> 00:35:39.086 A:middle
在视频上看一看 你懂的

00:35:39.086 --> 00:35:40.736 A:middle
猫嘛  我们都想再看到

00:35:40.736 --> 00:35:40.976 A:middle
它们
