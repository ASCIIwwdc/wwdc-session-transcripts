WEBVTT

00:00:06.516 --> 00:00:16.516 A:middle
[欢呼声]

00:00:17.516 --> 00:00:23.166 A:middle
[掌声]

00:00:23.666 --> 00:00:26.806 A:middle
&gt;&gt; 早上好  欢迎大家来听

00:00:26.806 --> 00:00:28.016 A:middle
界面生成器 (Interface Builder) 中

00:00:28.016 --> 00:00:29.066 A:middle
自动布局 (Auto Layout) 新技术

00:00:29.726 --> 00:00:30.826 A:middle
我是 Jonathon Mah

00:00:31.056 --> 00:00:32.516 A:middle
我是界面生成器小组的

00:00:32.516 --> 00:00:34.026 A:middle
工程师  稍后我的同事

00:00:34.026 --> 00:00:36.176 A:middle
Jason Yao 也会上台与大家

00:00:36.176 --> 00:00:36.776 A:middle
进行分享

00:00:37.506 --> 00:00:39.056 A:middle
在这个演讲中  我们会

00:00:39.056 --> 00:00:41.576 A:middle
从一个半成品的 iOS 应用程序着手

00:00:41.576 --> 00:00:43.496 A:middle
用这个半成品给大家展示

00:00:43.836 --> 00:00:45.626 A:middle
一系列布局和

00:00:45.626 --> 00:00:46.596 A:middle
交互技术

00:00:47.166 --> 00:00:51.506 A:middle
好了  最近似乎每隔几个月

00:00:51.506 --> 00:00:53.726 A:middle
就会冒出一款帮人们寻找

00:00:53.826 --> 00:00:57.126 A:middle
约会对象(红枣)的新应用  现在

00:00:57.126 --> 00:00:58.226 A:middle
正好又赶上这种时候

00:00:58.786 --> 00:01:01.546 A:middle
我手上就有这么一款

00:00:58.786 --> 00:01:01.546 A:middle
我手上就有这么一款

00:01:01.546 --> 00:01:01.976 A:middle
应用

00:01:02.516 --> 00:01:04.516 A:middle
[笑声]

00:01:05.516 --> 00:01:08.936 A:middle
[掌声]

00:01:09.436 --> 00:01:12.066 A:middle
使用自动布局  和使用约会(找红枣)软件

00:01:12.066 --> 00:01:14.086 A:middle
本质上都是要建立关系

00:01:16.186 --> 00:01:16.896 A:middle
视图间的关系

00:01:18.136 --> 00:01:20.196 A:middle
而建立关系  着实需要花一番

00:01:20.196 --> 00:01:20.626 A:middle
功夫

00:01:20.626 --> 00:01:24.006 A:middle
但这种事情  恰恰非常值得

00:01:24.006 --> 00:01:26.706 A:middle
下一番功夫  因为一旦我们用

00:01:26.706 --> 00:01:27.786 A:middle
约束条件设置好界面

00:01:27.786 --> 00:01:31.116 A:middle
我们的应用就能在多种

00:01:31.116 --> 00:01:34.086 A:middle
不同尺寸的屏幕上运行

00:01:34.236 --> 00:01:35.796 A:middle
甚至在未来某种未知尺寸

00:01:35.796 --> 00:01:37.056 A:middle
的屏幕上  都能够完美自适应

00:01:39.966 --> 00:01:40.946 A:middle
如果有人还从没使用过

00:01:40.946 --> 00:01:41.886 A:middle
自动布局  网上有很多

00:01:41.886 --> 00:01:44.486 A:middle
很好的资源  另外  往期的 WWDC

00:01:45.096 --> 00:01:46.886 A:middle
相关演讲  也可以一看

00:01:47.576 --> 00:01:48.476 A:middle
但鉴于今天我们已经

00:01:48.476 --> 00:01:49.616 A:middle
有很多内容要讲  所以那些

00:01:49.616 --> 00:01:50.656 A:middle
基本内容  我就省略不说了

00:01:51.856 --> 00:01:54.566 A:middle
准确地说  今天我们有六项内容

00:01:54.596 --> 00:01:55.606 A:middle
需要给大家一一展示

00:01:56.746 --> 00:01:58.886 A:middle
这些都可以应用到我们的

00:01:59.566 --> 00:02:00.826 A:middle
应用中  可以各自独立使用  或者

00:01:59.566 --> 00:02:00.826 A:middle
应用中  可以各自独立使用  或者

00:02:00.826 --> 00:02:02.286 A:middle
互相结合  做出更复杂的整体

00:02:02.286 --> 00:02:02.476 A:middle
效果

00:02:03.196 --> 00:02:04.566 A:middle
以上是概述  下面我们立马

00:02:04.566 --> 00:02:06.196 A:middle
开始讲表单中的第一项

00:02:06.196 --> 00:02:08.856 A:middle
在运行时改变布局

00:02:11.536 --> 00:02:13.826 A:middle
我刚刚提到的应用  在界面顶端

00:02:13.826 --> 00:02:16.736 A:middle
设置了一个滑动条区域  用户可以

00:02:16.736 --> 00:02:18.316 A:middle
在这里设置距离范围

00:02:18.356 --> 00:02:21.086 A:middle
通常来说  我们的预期是

00:02:21.086 --> 00:02:23.426 A:middle
用户会设置一次  之后的一段时间内

00:02:23.426 --> 00:02:24.506 A:middle
都不会再进行调整

00:02:24.506 --> 00:02:27.836 A:middle
因此我们就希望  稍后这一区域

00:02:27.836 --> 00:02:29.416 A:middle
能够自动收起  这样可以让

00:02:29.416 --> 00:02:30.456 A:middle
界面看起来更清爽

00:02:31.086 --> 00:02:35.076 A:middle
如果我们从设置布局的角度

00:02:35.076 --> 00:02:37.196 A:middle
来考虑这个问题  我们希望

00:02:37.196 --> 00:02:39.066 A:middle
达到的目标是  把这一区域的

00:02:39.066 --> 00:02:40.866 A:middle
高度收起到零

00:02:40.866 --> 00:02:42.676 A:middle
所以我们是不是可以

00:02:42.726 --> 00:02:44.756 A:middle
添加一个高度约束  然后设置

00:02:44.756 --> 00:02:46.226 A:middle
其常量值为零呢

00:02:46.226 --> 00:02:47.156 A:middle
如果我们在界面生成器中

00:02:47.156 --> 00:02:49.406 A:middle
这样做  得到的结果差不多是

00:02:50.126 --> 00:02:50.666 A:middle
这样

00:02:51.076 --> 00:02:53.376 A:middle
就会像这张图上一样  显示出

00:02:53.376 --> 00:02:55.256 A:middle
我们布局的区域  和一堆红线

00:02:55.256 --> 00:02:57.486 A:middle
这意味着我们的布局

00:02:57.486 --> 00:02:58.766 A:middle
无法实现

00:02:58.766 --> 00:02:59.576 A:middle
现在这种状况就叫作

00:02:59.576 --> 00:02:59.996 A:middle
约束冲突 (conflict)

00:03:00.786 --> 00:03:02.396 A:middle
约束冲突  就是说我们

00:03:02.396 --> 00:03:04.716 A:middle
在要求布局引擎执行

00:03:05.206 --> 00:03:07.036 A:middle
多项互相矛盾的事情

00:03:07.036 --> 00:03:08.996 A:middle
在目前这个例子中  矛盾在于

00:03:08.996 --> 00:03:10.846 A:middle
设置区域高度为零

00:03:10.846 --> 00:03:12.016 A:middle
同时要求该区域保持足够高度

00:03:12.016 --> 00:03:14.326 A:middle
以完整容纳区域内部的内容

00:03:14.916 --> 00:03:17.226 A:middle
我们可以用下面这种技巧

00:03:17.226 --> 00:03:20.886 A:middle
来解决这一问题  我们先要把

00:03:20.886 --> 00:03:22.156 A:middle
当前这个包含着控件

00:03:22.156 --> 00:03:23.696 A:middle
滑动条  和文本标签的视图

00:03:23.696 --> 00:03:25.576 A:middle
包裹在另一个视图里

00:03:26.516 --> 00:03:27.786 A:middle
就是图中用橙色标出的区域

00:03:29.326 --> 00:03:30.896 A:middle
现在我们再执行收起

00:03:30.896 --> 00:03:32.606 A:middle
就不是收起包含控件的

00:03:32.606 --> 00:03:34.956 A:middle
内部视图  而是收起整个外围

00:03:34.956 --> 00:03:35.536 A:middle
视图

00:03:36.196 --> 00:03:38.506 A:middle
而内部视图还保持着

00:03:38.506 --> 00:03:41.076 A:middle
原来的高度  并满足所有

00:03:41.076 --> 00:03:41.696 A:middle
约束条件

00:03:41.696 --> 00:03:43.446 A:middle
但外围视图  会对内部视图

00:03:43.446 --> 00:03:44.436 A:middle
进行剪裁  因为 clipsToBounds

00:03:44.436 --> 00:03:45.526 A:middle
属性设置成了是

00:03:47.236 --> 00:03:49.466 A:middle
通过以上设置  就可以达到

00:03:49.466 --> 00:03:50.976 A:middle
隐藏某些界面元素的效果

00:03:54.696 --> 00:03:56.556 A:middle
我们切到 Xcode 看一下具体代码

00:03:56.556 --> 00:03:56.996 A:middle
怎么写

00:03:57.406 --> 00:04:00.296 A:middle
在界面生成器里  我们已经

00:03:57.406 --> 00:04:00.296 A:middle
在界面生成器里  我们已经

00:04:00.296 --> 00:04:02.116 A:middle
在这里设计好了这个滑动条

00:04:02.116 --> 00:04:03.086 A:middle
区域  设计时需要

00:04:03.086 --> 00:04:04.526 A:middle
在"展开"模式下设计  这种

00:04:04.526 --> 00:04:06.166 A:middle
模式下  我们比较好操作

00:04:06.586 --> 00:04:07.806 A:middle
这个区域在界面生成器里

00:04:07.806 --> 00:04:09.426 A:middle
是展开的  所以我们是在

00:04:09.906 --> 00:04:13.256 A:middle
运行时  才执行收起效果

00:04:13.256 --> 00:04:14.366 A:middle
因此我们就需要在运行时创建一个

00:04:14.366 --> 00:04:16.486 A:middle
约束条件  先把外围视图的

00:04:16.555 --> 00:04:18.136 A:middle
高度设置为零

00:04:18.745 --> 00:04:21.505 A:middle
这样在某个时刻  如果用户

00:04:21.505 --> 00:04:24.016 A:middle
触发了约束按钮  作为约束

00:04:24.016 --> 00:04:26.506 A:middle
响应  再去激活执行这项

00:04:26.506 --> 00:04:26.976 A:middle
约束条件

00:04:28.096 --> 00:04:29.006 A:middle
但如果约束条件只有这些

00:04:29.006 --> 00:04:30.026 A:middle
布局还是会出现

00:04:30.026 --> 00:04:31.416 A:middle
之前所见的约束冲突

00:04:31.416 --> 00:04:34.256 A:middle
所以我们还需要再解除

00:04:34.256 --> 00:04:35.476 A:middle
另一个约束才行  这里我们

00:04:35.476 --> 00:04:38.126 A:middle
解除外围视图控件容器的

00:04:38.126 --> 00:04:38.926 A:middle
底端约束

00:04:39.526 --> 00:04:41.536 A:middle
这样我们的外围视图就

00:04:41.536 --> 00:04:42.286 A:middle
可以顺利收起了

00:04:42.286 --> 00:04:45.386 A:middle
我们来看一下完整的代码

00:04:47.076 --> 00:04:48.136 A:middle
这是我们的视图控制器

00:04:48.136 --> 00:04:50.796 A:middle
子类  这里有三个界面控制器

00:04:50.796 --> 00:04:51.236 A:middle
属性

00:04:51.236 --> 00:04:52.836 A:middle
其中两个  是 Outlet 连接属性

00:04:52.836 --> 00:04:54.896 A:middle
分别连接到外围视图  和底端

00:04:54.896 --> 00:04:56.146 A:middle
约束  还有一个属性用来

00:04:56.146 --> 00:04:57.816 A:middle
存储之前设置的  高度归零

00:04:58.116 --> 00:04:59.000 A:middle
的约束

00:05:01.966 --> 00:05:04.406 A:middle
作为触发按钮后的

00:05:04.686 --> 00:05:08.026 A:middle
响应  首先需要确认的是

00:05:08.026 --> 00:05:09.096 A:middle
如果此前还没有创建高度

00:05:09.096 --> 00:05:10.176 A:middle
归零的约束  触发按钮后

00:05:10.176 --> 00:05:10.916 A:middle
先创建这个约束

00:05:12.556 --> 00:05:13.606 A:middle
又因为我们希望运行效果是

00:05:13.606 --> 00:05:16.126 A:middle
在显示和隐藏之间切换

00:05:16.126 --> 00:05:17.876 A:middle
所以还要加一行代码判断

00:05:17.876 --> 00:05:19.726 A:middle
是要隐藏  还是要显示

00:05:24.336 --> 00:05:26.596 A:middle
做完这些后  我们再

00:05:26.906 --> 00:05:28.046 A:middle
按需解除和激活那些

00:05:28.046 --> 00:05:29.696 A:middle
我们需要的约束

00:05:30.006 --> 00:05:32.176 A:middle
那些可以实现最终

00:05:32.176 --> 00:05:33.386 A:middle
隐藏效果的约束

00:05:34.896 --> 00:05:38.526 A:middle
如果大家观察仔细

00:05:38.526 --> 00:05:40.156 A:middle
我们在激活一项

00:05:40.156 --> 00:05:41.506 A:middle
约束条件前  先解除了

00:05:41.506 --> 00:05:42.206 A:middle
另一项约束

00:05:43.376 --> 00:05:44.706 A:middle
而不是简单的二者切换

00:05:44.706 --> 00:05:46.386 A:middle
我们要这样做的原因

00:05:46.386 --> 00:05:48.106 A:middle
是因为自动布局会自动帮助

00:05:48.106 --> 00:05:49.896 A:middle
我们避免约束冲突

00:05:50.926 --> 00:05:52.256 A:middle
如果我们编程时出现了

00:05:52.256 --> 00:05:54.176 A:middle
约束冲突  自动布局就会自动

00:05:54.176 --> 00:05:55.786 A:middle
报告控制中心  说  听着

00:05:55.816 --> 00:05:57.846 A:middle
我发现了以下这些约束条件

00:05:57.846 --> 00:05:58.856 A:middle
相互冲突了

00:06:00.176 --> 00:06:01.626 A:middle
所以举个例子  如果我们在

00:06:01.626 --> 00:06:03.216 A:middle
底端约束未解除的状况下

00:06:03.216 --> 00:06:04.266 A:middle
激活高度归零约束

00:06:04.266 --> 00:06:05.076 A:middle
就会收到约束冲突警报

00:06:06.046 --> 00:06:07.486 A:middle
先解除一个约束  就可以避免

00:06:07.486 --> 00:06:07.726 A:middle
报错

00:06:09.166 --> 00:06:11.026 A:middle
好了  做完这些就可以让我们的

00:06:11.026 --> 00:06:11.976 A:middle
界面达到最终的

00:06:11.976 --> 00:06:13.666 A:middle
隐藏效果  但我们还希望能够

00:06:15.076 --> 00:06:16.776 A:middle
动画显示隐藏过程  这样

00:06:16.776 --> 00:06:19.786 A:middle
用户能看到  界面在展开

00:06:19.786 --> 00:06:21.276 A:middle
和收起之间  能有一个过渡

00:06:21.276 --> 00:06:22.336 A:middle
前后不会显得太突兀

00:06:23.256 --> 00:06:24.736 A:middle
要实现动态转变  我们还要加一个

00:06:24.736 --> 00:06:26.546 A:middle
UIView 动画块  然后再在动画中调用

00:06:26.546 --> 00:06:28.196 A:middle
layoutIfNeeded 立即实现布局

00:06:28.196 --> 00:06:29.056 A:middle
这一步会自动

00:06:29.056 --> 00:06:31.966 A:middle
评估约束条件  获取外框数值  并自动

00:06:32.046 --> 00:06:33.106 A:middle
应用到视图上

00:06:33.316 --> 00:06:35.196 A:middle
然后 UIView 动画会抓取这些

00:06:35.196 --> 00:06:36.796 A:middle
动画参数  为你实现动画效果

00:06:41.476 --> 00:06:42.786 A:middle
前面说了  解除底端

00:06:42.786 --> 00:06:43.806 A:middle
约束  就可以实现

00:06:43.856 --> 00:06:45.166 A:middle
这种动画效果

00:06:46.236 --> 00:06:48.476 A:middle
这和我心中想要的效果还

00:06:48.476 --> 00:06:50.146 A:middle
不太一样  但如果想更改效果

00:06:50.146 --> 00:06:51.056 A:middle
绝大部分的代码我都

00:06:51.056 --> 00:06:53.626 A:middle
不需要改动  只需要调整

00:06:53.626 --> 00:06:56.406 A:middle
边缘约束所关联的约束条件

00:06:56.496 --> 00:06:57.916 A:middle
是关联到容器顶端  还是底端

00:06:58.846 --> 00:07:00.456 A:middle
如果我预先设置为

00:06:58.846 --> 00:07:00.456 A:middle
如果我预先设置为

00:07:00.456 --> 00:07:04.676 A:middle
关联到顶端约束  那么

00:07:04.676 --> 00:07:06.486 A:middle
动画效果就会产生相应改变

00:07:06.486 --> 00:07:07.976 A:middle
变成这样  其实我更喜欢这种效果

00:07:11.836 --> 00:07:13.456 A:middle
我们刚刚看到的例子  演示了

00:07:13.456 --> 00:07:14.856 A:middle
如何通过改变约束

00:07:15.246 --> 00:07:17.006 A:middle
来改变界面的布局

00:07:17.266 --> 00:07:20.436 A:middle
下面我们再看看另一种

00:07:20.436 --> 00:07:21.846 A:middle
改变布局的方法  我们将用这种方法

00:07:21.846 --> 00:07:22.916 A:middle
来跟踪触控点

00:07:23.506 --> 00:07:26.326 A:middle
在我们的应用中  有这样

00:07:26.326 --> 00:07:28.106 A:middle
一个中央卡片区域  我们现在

00:07:28.106 --> 00:07:30.316 A:middle
希望这个卡片区域能够跟随

00:07:30.316 --> 00:07:33.326 A:middle
触控点在屏幕上移动  并在移动

00:07:33.326 --> 00:07:35.496 A:middle
到接近屏幕边缘时  稍作旋转

00:07:35.496 --> 00:07:36.676 A:middle
同时松手后能自动复位

00:07:42.116 --> 00:07:44.206 A:middle
一个视图在屏幕上的位置

00:07:44.206 --> 00:07:45.916 A:middle
一般是由外框 (frame) 属性

00:07:45.916 --> 00:07:47.566 A:middle
来定义的  而当我们

00:07:47.566 --> 00:07:49.326 A:middle
使用约束时  当我们对这个视图

00:07:49.326 --> 00:07:50.956 A:middle
使用约束时  frame 属性具体

00:07:51.306 --> 00:07:52.576 A:middle
的数值在布局引擎里

00:07:53.946 --> 00:07:55.706 A:middle
也就是说  具体数值是引擎

00:07:55.766 --> 00:07:56.656 A:middle
由约束条件计算得出的

00:07:57.726 --> 00:07:58.636 A:middle
但除此之外  还有另一个属性

00:07:58.636 --> 00:07:59.866 A:middle
会影响视图在屏幕上

00:07:59.866 --> 00:08:01.466 A:middle
所处的位置  那就是

00:07:59.866 --> 00:08:01.466 A:middle
所处的位置  那就是

00:08:01.466 --> 00:08:03.576 A:middle
transform  这个属性会对

00:08:03.626 --> 00:08:04.786 A:middle
外框施加形变

00:08:04.866 --> 00:08:06.056 A:middle
我们要说的类型  叫作

00:08:06.196 --> 00:08:07.316 A:middle
仿射变换 (CGAffineTransform)

00:08:07.666 --> 00:08:08.876 A:middle
通过这个属性  我们可以

00:08:08.876 --> 00:08:10.886 A:middle
在引擎通过约束计算完

00:08:10.956 --> 00:08:13.646 A:middle
外框位置和大小后  再对外框

00:08:14.076 --> 00:08:15.496 A:middle
进行平移  旋转  和

00:08:15.496 --> 00:08:16.006 A:middle
缩放

00:08:17.556 --> 00:08:18.526 A:middle
我们按上述所说的方法实施

00:08:18.526 --> 00:08:20.596 A:middle
就可以得到想要的效果

00:08:21.336 --> 00:08:22.446 A:middle
我现在就直接切换到示例

00:08:22.446 --> 00:08:22.976 A:middle
给大家演示一下

00:08:29.776 --> 00:08:31.486 A:middle
好了  这就是我们应用程序的

00:08:31.486 --> 00:08:32.086 A:middle
界面生成器

00:08:33.576 --> 00:08:35.166 A:middle
现在我们想要让

00:08:35.285 --> 00:08:36.885 A:middle
中央卡片区域随着屏幕触控

00:08:37.056 --> 00:08:37.846 A:middle
四处移动

00:08:38.996 --> 00:08:40.616 A:middle
我刚刚已经从对象库里

00:08:40.616 --> 00:08:42.775 A:middle
往这个区域里添加了一个

00:08:42.775 --> 00:08:43.916 A:middle
手势识别器  一个

00:08:43.916 --> 00:08:44.936 A:middle
拖动手势识别器 (pan gesture recognizer)

00:08:45.266 --> 00:08:46.536 A:middle
我添加过手势识别器之后

00:08:46.536 --> 00:08:48.056 A:middle
它就会显示在

00:08:48.056 --> 00:08:50.726 A:middle
场景的顶层  这里我们可以在

00:08:51.406 --> 00:08:54.356 A:middle
场景存放区和提纲视图里看到

00:08:54.356 --> 00:08:56.226 A:middle
我现在打开辅助编辑器

00:08:56.226 --> 00:08:57.556 A:middle
这样我们就可以看到

00:08:57.556 --> 00:08:58.976 A:middle
视图控制器的代码

00:09:01.426 --> 00:09:03.096 A:middle
然后我按住控制键  把拖动手势

00:09:03.096 --> 00:09:05.636 A:middle
识别器拖拽到我们源代码

00:09:05.636 --> 00:09:06.646 A:middle
的这个地方

00:09:06.646 --> 00:09:08.726 A:middle
这样就可以添加一个

00:09:08.726 --> 00:09:09.176 A:middle
outlet 连接

00:09:09.356 --> 00:09:10.426 A:middle
或者像现在这种情况

00:09:10.426 --> 00:09:12.496 A:middle
连接一个动作  我起名叫

00:09:12.496 --> 00:09:13.866 A:middle
panCard (卡片拖动)

00:09:15.076 --> 00:09:18.056 A:middle
然后再把类型  从"任何"

00:09:18.056 --> 00:09:19.176 A:middle
改为拖动手势识别器

00:09:19.216 --> 00:09:20.456 A:middle
这就是这项参数的

00:09:20.456 --> 00:09:20.936 A:middle
类型

00:09:21.596 --> 00:09:23.256 A:middle
指定拖动手势识别器

00:09:23.256 --> 00:09:24.776 A:middle
就让我可以

00:09:25.216 --> 00:09:26.226 A:middle
在动作方法内使用

00:09:26.226 --> 00:09:27.776 A:middle
手势识别器的属性

00:09:31.436 --> 00:09:31.956 A:middle
好了

00:09:31.956 --> 00:09:34.066 A:middle
这里可以看到一个写了半截的方法

00:09:34.486 --> 00:09:36.076 A:middle
这里还有一个 outlet 连接

00:09:36.076 --> 00:09:36.936 A:middle
连接到卡片视图上

00:09:36.936 --> 00:09:37.976 A:middle
我们要移动的就是这个卡片视图

00:09:42.426 --> 00:09:45.476 A:middle
现在  在这个方法里  我首先

00:09:47.156 --> 00:09:49.566 A:middle
要询问发送者  也就是

00:09:49.566 --> 00:09:51.126 A:middle
手势识别器  请求它的

00:09:51.126 --> 00:09:52.296 A:middle
解译结果

00:09:53.076 --> 00:09:56.666 A:middle
也就是用户到底拖动  或者

00:09:56.726 --> 00:09:57.746 A:middle
拖拽了多远

00:09:58.376 --> 00:10:00.066 A:middle
然后我会用这个解译结果

00:09:58.376 --> 00:10:00.066 A:middle
然后我会用这个解译结果

00:10:00.066 --> 00:10:02.566 A:middle
对当前这个卡片视图

00:10:02.566 --> 00:10:03.236 A:middle
施加形变

00:10:03.576 --> 00:10:04.796 A:middle
具体形变是由这里这个

00:10:04.796 --> 00:10:06.166 A:middle
辅助方法计算得出的

00:10:07.136 --> 00:10:09.166 A:middle
这个辅助方法不仅

00:10:09.166 --> 00:10:12.036 A:middle
会生成解译结果  还会

00:10:12.036 --> 00:10:13.066 A:middle
根据卡片所在位置  添加

00:10:13.066 --> 00:10:14.376 A:middle
一定程度的旋转效果

00:10:14.376 --> 00:10:17.626 A:middle
现在我们就按下编译并运行

00:10:17.626 --> 00:10:18.756 A:middle
试试  看运行出来结果如何

00:10:28.376 --> 00:10:28.956 A:middle
好了

00:10:28.956 --> 00:10:29.776 A:middle
这就是应用界面了

00:10:29.986 --> 00:10:31.876 A:middle
现在  如果我按住屏幕移动

00:10:31.876 --> 00:10:34.866 A:middle
可以看到旋转效果  卡片还会

00:10:34.936 --> 00:10:35.856 A:middle
跟随触控点移动

00:10:35.856 --> 00:10:38.576 A:middle
但如果我现在松手  目前

00:10:38.576 --> 00:10:39.946 A:middle
卡片只会停在原地不动

00:10:39.946 --> 00:10:41.306 A:middle
因为我们代码中还没有重置

00:10:41.306 --> 00:10:41.876 A:middle
形变

00:10:41.876 --> 00:10:44.286 A:middle
形变量还停留在最后一次

00:10:44.286 --> 00:10:46.166 A:middle
设置的值上

00:10:46.206 --> 00:10:47.606 A:middle
如果我再触控移动一下

00:10:47.606 --> 00:10:49.096 A:middle
会看到此时卡片才会自动

00:10:49.096 --> 00:10:50.776 A:middle
复位到初始位置

00:10:51.386 --> 00:10:52.836 A:middle
这是因为形变不是随之

00:10:52.836 --> 00:10:53.926 A:middle
偏移的

00:10:53.966 --> 00:10:58.726 A:middle
所以一旦我们再一次提交

00:10:58.726 --> 00:11:01.346 A:middle
新的解译结果  就总会

00:10:58.726 --> 00:11:01.346 A:middle
新的解译结果  就总会

00:11:01.616 --> 00:11:03.366 A:middle
和初始 frame 属性值

00:11:03.896 --> 00:11:04.146 A:middle
相关

00:11:05.276 --> 00:11:06.866 A:middle
我们现在希望卡片能在

00:11:06.866 --> 00:11:08.026 A:middle
拖拽移动过后  自动复位到屏幕

00:11:08.026 --> 00:11:08.396 A:middle
中央

00:11:08.556 --> 00:11:11.446 A:middle
只要松手就自动复位

00:11:12.316 --> 00:11:13.696 A:middle
要实现这一点  我们可以先看一下

00:11:13.966 --> 00:11:15.476 A:middle
手势识别器的状态

00:11:15.476 --> 00:11:15.976 A:middle
属性

00:11:19.356 --> 00:11:20.696 A:middle
这里的代码是一样的

00:11:20.896 --> 00:11:22.466 A:middle
然后等这个形变状态完结后

00:11:22.586 --> 00:11:24.376 A:middle
我们就重置 transform 属性

00:11:24.866 --> 00:11:26.486 A:middle
设置该值为 identity  还原到最初状态

00:11:27.836 --> 00:11:28.776 A:middle
我们再编译并运行一下

00:11:34.836 --> 00:11:38.006 A:middle
现在我们移动后松手  卡片就会

00:11:38.176 --> 00:11:40.366 A:middle
自动复位

00:11:40.896 --> 00:11:42.016 A:middle
当然了  我们还希望

00:11:42.016 --> 00:11:43.196 A:middle
给这个复位过程加一些动画效果

00:11:43.256 --> 00:11:43.946 A:middle
这就加一下

00:11:47.196 --> 00:11:49.206 A:middle
这里的代码还保留着重置到

00:11:49.206 --> 00:11:50.286 A:middle
identity 最初状态

00:11:51.126 --> 00:11:53.766 A:middle
然后我们加一个带 spring (震动)

00:11:54.216 --> 00:11:56.806 A:middle
可选效果的 UIView 动画

00:11:56.996 --> 00:11:57.936 A:middle
加了动画后的效果又不太一样了

00:11:58.796 --> 00:11:59.846 A:middle
再编译并运行一下

00:12:05.436 --> 00:12:07.556 A:middle
现在我再松开卡片

00:12:08.436 --> 00:12:10.196 A:middle
可以看到  卡片会弹回

00:12:10.196 --> 00:12:11.246 A:middle
初始位置  我还挺喜欢

00:12:11.246 --> 00:12:11.946 A:middle
这种活泼的显示效果的

00:12:12.516 --> 00:12:16.176 A:middle
[掌声]

00:12:16.676 --> 00:12:18.786 A:middle
谢谢大家  我觉得会有人

00:12:18.786 --> 00:12:19.436 A:middle
会给朋友们展示这点的

00:12:19.656 --> 00:12:22.676 A:middle
我觉得这样挺好

00:12:22.676 --> 00:12:22.916 A:middle
好了

00:12:30.666 --> 00:12:32.916 A:middle
我们刚刚讲了  视图

00:12:32.916 --> 00:12:34.546 A:middle
在屏幕上的位置和很多项

00:12:34.546 --> 00:12:35.736 A:middle
属性相关

00:12:35.736 --> 00:12:37.256 A:middle
不光取决于由约束计算

00:12:37.256 --> 00:12:38.226 A:middle
得出的外框 (frame)

00:12:38.266 --> 00:12:40.286 A:middle
我们还可以通过使用

00:12:40.286 --> 00:12:41.666 A:middle
变形 (transform) 来控制视图

00:12:41.666 --> 00:12:42.636 A:middle
在屏幕上的位置

00:12:42.636 --> 00:12:45.316 A:middle
要实现这种有趣的效果

00:12:45.316 --> 00:12:46.586 A:middle
我们只需要添加寥寥几行

00:12:46.586 --> 00:12:47.266 A:middle
代码

00:12:47.266 --> 00:12:49.706 A:middle
所以我衷心希望大家能够

00:12:49.706 --> 00:12:50.576 A:middle
在你们的应用里尝试一下

00:12:50.576 --> 00:12:52.906 A:middle
这个功能  因为真的很好玩儿

00:12:54.066 --> 00:12:55.206 A:middle
对于临时的视图改变

00:12:55.206 --> 00:12:56.516 A:middle
形变非常好用  像我们刚看的

00:12:56.516 --> 00:12:58.446 A:middle
比如用来跟踪触控点

00:12:58.446 --> 00:13:00.076 A:middle
或是为界面的两个状态之间添加动画

00:12:58.446 --> 00:13:00.076 A:middle
或是为界面的两个状态之间添加动画

00:13:00.076 --> 00:13:00.426 A:middle
效果

00:13:01.326 --> 00:13:02.726 A:middle
但要记得在形变之后重置

00:13:02.726 --> 00:13:04.426 A:middle
还原到最初的 identity 状态

00:13:06.606 --> 00:13:08.406 A:middle
好了  现在我们的应用界面有了

00:13:09.126 --> 00:13:11.296 A:middle
活泼有趣的效果  我们再来

00:13:11.296 --> 00:13:13.036 A:middle
谈谈怎么让文字显示更加完美

00:13:14.116 --> 00:13:15.256 A:middle
为了做到这点  我们需要支持

00:13:15.256 --> 00:13:15.886 A:middle
动态字体 (Dynamic Type)

00:13:18.206 --> 00:13:19.786 A:middle
动态字体是 iOS 自带的一项技术

00:13:19.926 --> 00:13:22.256 A:middle
这项技术  既给开发者提供了一套

00:13:22.896 --> 00:13:23.936 A:middle
文字样式

00:13:23.936 --> 00:13:25.396 A:middle
比如有标题  正文

00:13:25.396 --> 00:13:25.906 A:middle
和说明

00:13:26.586 --> 00:13:28.526 A:middle
还可以让用户控制这些样式中

00:13:28.526 --> 00:13:29.446 A:middle
的字体大小

00:13:29.936 --> 00:13:34.006 A:middle
这是一些在应用程序中的举例  这些程序中

00:13:34.006 --> 00:13:35.666 A:middle
用的都是默认文字样式的字号

00:13:37.046 --> 00:13:38.286 A:middle
现在  如果用户希望调整到

00:13:38.286 --> 00:13:39.836 A:middle
比方说  更大的显示字号

00:13:40.586 --> 00:13:42.296 A:middle
短信中的文字就会做相应调整

00:13:42.296 --> 00:13:43.756 A:middle
可以看到文字变大了  然后文字

00:13:43.756 --> 00:13:45.546 A:middle
周围的所有图像  比如

00:13:45.546 --> 00:13:46.896 A:middle
包住短信的文字气泡  都会相应

00:13:46.896 --> 00:13:47.456 A:middle
变大

00:13:47.536 --> 00:13:49.386 A:middle
同时  输入框也会相应变大

00:13:51.326 --> 00:13:54.186 A:middle
同样的  在日历应用中的

00:13:54.186 --> 00:13:54.606 A:middle
事件层

00:13:55.376 --> 00:13:57.986 A:middle
我们的 app 看起来是这样的

00:13:59.266 --> 00:14:00.016 A:middle
和短信息中的改变一样

00:13:59.266 --> 00:14:00.016 A:middle
和短信息中的改变一样

00:14:00.936 --> 00:14:02.856 A:middle
或者  根据不同的程序设计

00:14:02.856 --> 00:14:04.406 A:middle
增大字号后  也可能变成

00:14:04.406 --> 00:14:04.916 A:middle
这样

00:14:05.166 --> 00:14:07.336 A:middle
一部分文字的字号变大了

00:14:07.336 --> 00:14:09.916 A:middle
但整体布局不对  导致文字

00:14:10.006 --> 00:14:10.486 A:middle
不可读

00:14:13.586 --> 00:14:14.646 A:middle
好在通过界面生成器

00:14:14.646 --> 00:14:16.646 A:middle
我们可以轻而易举地修复这个问题

00:14:17.046 --> 00:14:18.586 A:middle
我们现在就看一下  如何

00:14:18.586 --> 00:14:18.976 A:middle
进行改进

00:14:25.056 --> 00:14:26.316 A:middle
好了

00:14:26.756 --> 00:14:28.706 A:middle
回到我们的应用程序  我们看一下

00:14:28.706 --> 00:14:30.116 A:middle
怎样修改这两个

00:14:30.116 --> 00:14:32.786 A:middle
文本标签  好让它们能沿用系统字号

00:14:33.006 --> 00:14:35.186 A:middle
现在  我先选中下方的

00:14:35.186 --> 00:14:35.966 A:middle
这个文字标签

00:14:37.376 --> 00:14:38.946 A:middle
然后在审查器中  找到

00:14:38.946 --> 00:14:40.756 A:middle
"自动调整字体"的复选框

00:14:40.756 --> 00:14:42.166 A:middle
并勾选

00:14:42.786 --> 00:14:45.626 A:middle
如果大家观察足够仔细

00:14:45.626 --> 00:14:46.666 A:middle
会发现我一旦勾选这一项

00:14:46.666 --> 00:14:48.046 A:middle
这里就弹出了一个警报

00:14:48.046 --> 00:14:48.826 A:middle
图标

00:14:49.166 --> 00:14:50.686 A:middle
这个警报是为了提醒我们

00:14:50.686 --> 00:14:53.056 A:middle
如果要应用这项属性  我们

00:14:53.056 --> 00:14:55.436 A:middle
首先得为这个文本标签规定好

00:14:55.436 --> 00:14:55.816 A:middle
文字样式

00:14:57.876 --> 00:14:59.976 A:middle
当前这个文本标签的字号

00:14:59.976 --> 00:15:02.046 A:middle
是固定的值  设置在系统12号 (System 12)

00:14:59.976 --> 00:15:02.046 A:middle
是固定的值  设置在系统12号 (System 12)

00:15:02.586 --> 00:15:03.896 A:middle
我现在就把它改成

00:15:03.896 --> 00:15:06.536 A:middle
一种文字样式  只需打开审查器

00:15:06.876 --> 00:15:08.336 A:middle
然后选择一个合适的

00:15:08.336 --> 00:15:08.796 A:middle
样式

00:15:08.796 --> 00:15:09.676 A:middle
在这里  我们选用

00:15:09.676 --> 00:15:10.366 A:middle
说明一 (Caption 1)

00:15:10.886 --> 00:15:14.746 A:middle
这个样式刚好和默认文字样式中

00:15:14.746 --> 00:15:16.346 A:middle
的系统 12 号一模一样

00:15:16.346 --> 00:15:17.416 A:middle
所以目前画布上还没有任何变化

00:15:19.496 --> 00:15:22.316 A:middle
现在我把上方的这个文本标签也

00:15:22.316 --> 00:15:22.786 A:middle
改一下

00:15:22.856 --> 00:15:24.116 A:middle
这个标签已经设好了文本样式

00:15:24.996 --> 00:15:27.946 A:middle
编译并运行一下

00:15:36.906 --> 00:15:38.546 A:middle
好了  现在这个界面显示出来

00:15:38.546 --> 00:15:40.746 A:middle
和之前没什么两样  因为

00:15:40.746 --> 00:15:41.736 A:middle
我们还没有改变字号大小

00:15:42.446 --> 00:15:43.736 A:middle
要改变字号大小

00:15:43.966 --> 00:15:46.706 A:middle
可以通过模拟器里的"系统设置"

00:15:46.706 --> 00:15:48.396 A:middle
应用程序  但那就要在

00:15:48.396 --> 00:15:49.416 A:middle
我们的应用和系统设置应用

00:15:49.416 --> 00:15:51.666 A:middle
两个应用间不断切换  有点麻烦

00:15:51.876 --> 00:15:52.916 A:middle
所以我想给大家演示一下

00:15:52.916 --> 00:15:54.626 A:middle
另一种方法

00:15:54.626 --> 00:15:56.276 A:middle
如果我切换回 Xcode  可以在

00:15:56.276 --> 00:15:58.086 A:middle
应用菜单中打开  开发者工具

00:15:58.086 --> 00:16:00.786 A:middle
然后进入  辅助功能审查器

00:15:58.086 --> 00:16:00.786 A:middle
然后进入  辅助功能审查器

00:16:01.366 --> 00:16:04.356 A:middle
打开这个窗口后  可以把

00:16:04.356 --> 00:16:05.926 A:middle
目标一项设为模拟器

00:16:05.926 --> 00:16:09.946 A:middle
然后点击设置标签页  下方就

00:16:09.946 --> 00:16:10.946 A:middle
会出现一个字号滑动条

00:16:11.536 --> 00:16:12.876 A:middle
现在我调出模拟器

00:16:12.876 --> 00:16:14.876 A:middle
两个窗口左右放在一起  就可以

00:16:14.876 --> 00:16:16.356 A:middle
通过滑动这个字号滑动条  在屏幕上

00:16:16.356 --> 00:16:17.706 A:middle
实时看到字号变化

00:16:17.706 --> 00:16:18.876 A:middle
这样来测试对动态字体

00:16:18.876 --> 00:16:20.736 A:middle
的改变  就简单多了

00:16:21.516 --> 00:16:25.796 A:middle
[掌声]

00:16:26.296 --> 00:16:27.516 A:middle
顺便说一句  如果我同时还

00:16:27.586 --> 00:16:29.466 A:middle
插着 iPhone  或有 iPhone

00:16:29.466 --> 00:16:30.546 A:middle
设置好了开发模式  我也可以把

00:16:30.826 --> 00:16:32.166 A:middle
目标设置为连接上的这些 iPhone

00:16:33.086 --> 00:16:36.396 A:middle
这里我们可以看到  应用在调整

00:16:36.586 --> 00:16:38.246 A:middle
在根据字号变化  实时调整

00:16:38.246 --> 00:16:40.546 A:middle
但当字号过大时

00:16:40.546 --> 00:16:42.766 A:middle
这两个文本标签就会撞到一起

00:16:42.766 --> 00:16:43.696 A:middle
相互重叠

00:16:44.436 --> 00:16:45.876 A:middle
让我们再调整一下这部分

00:16:50.296 --> 00:16:51.826 A:middle
在界面生成器里

00:16:52.356 --> 00:16:53.816 A:middle
糟糕  我先切换回来

00:16:54.336 --> 00:16:57.016 A:middle
把这个窗口挪到一边

00:16:57.756 --> 00:16:59.596 A:middle
下面这里  这个文本区域

00:16:59.596 --> 00:17:03.186 A:middle
定义这个区域的大小的是一个

00:16:59.596 --> 00:17:03.186 A:middle
定义这个区域的大小的是一个

00:17:03.236 --> 00:17:04.856 A:middle
固定数值的高度约束

00:17:05.126 --> 00:17:06.156 A:middle
在这里可以看到  是一个常量值

00:17:07.646 --> 00:17:08.756 A:middle
现在我们希望这一区域的

00:17:08.915 --> 00:17:11.036 A:middle
大小  能根据内部所需要显示的

00:17:11.036 --> 00:17:12.646 A:middle
文本标签大小  自行调整

00:17:13.296 --> 00:17:14.215 A:middle
我们已经把下方的文本标签

00:17:14.215 --> 00:17:15.236 A:middle
通过约束绑定到区域底端

00:17:15.236 --> 00:17:16.366 A:middle
把上方的标签  约束到顶端

00:17:16.366 --> 00:17:18.556 A:middle
现在我们只需要在这两者之间

00:17:18.556 --> 00:17:19.746 A:middle
添加一个垂直约束

00:17:20.276 --> 00:17:21.286 A:middle
这样一来  文本标签的

00:17:21.366 --> 00:17:24.116 A:middle
字号大小和几条相关约束中所

00:17:24.116 --> 00:17:26.016 A:middle
包含的信息  就足够程序自动计算出

00:17:26.016 --> 00:17:26.736 A:middle
这个文本区域该有

00:17:26.736 --> 00:17:27.126 A:middle
多大

00:17:29.136 --> 00:17:29.896 A:middle
让我们实践一下

00:17:29.896 --> 00:17:31.296 A:middle
按住控制键把一个文本标签拖到另一个

00:17:31.296 --> 00:17:31.646 A:middle
上面

00:17:32.646 --> 00:17:33.956 A:middle
这里  我可以选择添加

00:17:34.036 --> 00:17:35.456 A:middle
一个垂直间距约束

00:17:35.456 --> 00:17:36.276 A:middle
这就可以保证两个文本标签的

00:17:36.276 --> 00:17:37.946 A:middle
垂直间距一直维持着

00:17:37.946 --> 00:17:38.936 A:middle
当前二者在画布上的

00:17:38.936 --> 00:17:39.116 A:middle
距离

00:17:39.936 --> 00:17:41.316 A:middle
我也可以选择添加一个

00:17:41.316 --> 00:17:43.006 A:middle
文本基线垂直标准间距

00:17:43.806 --> 00:17:45.696 A:middle
这和垂直间距差不多

00:17:45.696 --> 00:17:48.536 A:middle
唯一不同的地方是  UIKit 会根据

00:17:48.536 --> 00:17:50.056 A:middle
这个约束所涉及的多个文本

00:17:50.056 --> 00:17:53.036 A:middle
标签的具体文字样式和

00:17:53.036 --> 00:17:54.386 A:middle
当前字号自动调整

00:17:54.386 --> 00:17:55.286 A:middle
约束的常量值

00:17:56.616 --> 00:17:57.676 A:middle
我们现在就添加这个约束吧

00:17:58.816 --> 00:18:00.886 A:middle
现在我就可以选中并删除

00:17:58.816 --> 00:18:00.886 A:middle
现在我就可以选中并删除

00:18:01.326 --> 00:18:03.106 A:middle
原先的固定数值的高度约束

00:18:04.176 --> 00:18:04.976 A:middle
再编译并运行

00:18:14.216 --> 00:18:15.946 A:middle
现在这个界面看起来就舒服

00:18:15.946 --> 00:18:16.336 A:middle
多了

00:18:16.336 --> 00:18:18.076 A:middle
下方的内容区域会跟着

00:18:18.076 --> 00:18:19.936 A:middle
文字字号变大自动调大

00:18:19.936 --> 00:18:20.856 A:middle
也可以跟着字号变小而

00:18:20.856 --> 00:18:22.596 A:middle
缩小  喜欢在界面上

00:18:22.816 --> 00:18:24.556 A:middle
看到更浓缩内容的人可以试试

00:18:34.046 --> 00:18:37.366 A:middle
总结一下  通过应用文本标签审查器

00:18:37.366 --> 00:18:39.296 A:middle
里的两项属性  也就是字体属性

00:18:39.296 --> 00:18:40.456 A:middle
和动态字体属性

00:18:41.056 --> 00:18:43.426 A:middle
我们可以让文本标签根据

00:18:43.426 --> 00:18:44.926 A:middle
字号大小改变而进行自动

00:18:44.926 --> 00:18:45.436 A:middle
调整

00:18:45.746 --> 00:18:47.286 A:middle
我们还看了怎样通过辅助功能审查器

00:18:47.286 --> 00:18:49.626 A:middle
来测试不同字号大小的显示效果

00:18:51.046 --> 00:18:52.826 A:middle
稍后  在今日下午

00:18:52.826 --> 00:18:54.166 A:middle
还有一场演讲  叫《Building Apps With

00:18:54.166 --> 00:18:55.336 A:middle
Dynamic Type》  那场演讲

00:18:55.336 --> 00:18:58.666 A:middle
有更多相关信息  今天的

00:18:58.666 --> 00:18:59.796 A:middle
演讲之后  如果你想知道

00:18:59.796 --> 00:19:01.616 A:middle
改变字号大小后  你们的应用

00:18:59.796 --> 00:19:01.616 A:middle
改变字号大小后  你们的应用

00:19:01.616 --> 00:19:03.806 A:middle
看起来是什么样子

00:19:03.806 --> 00:19:05.356 A:middle
也可以直接在手机端的设置里

00:19:05.426 --> 00:19:07.126 A:middle
直接调整

00:19:07.366 --> 00:19:08.506 A:middle
如果大家进入辅助功能设置

00:19:08.506 --> 00:19:10.156 A:middle
可以看到辅助设置里有

00:19:10.156 --> 00:19:12.646 A:middle
大字体选项  为显示字体

00:19:12.646 --> 00:19:14.266 A:middle
提供了很大范围的

00:19:14.266 --> 00:19:15.636 A:middle
可选字号值

00:19:15.756 --> 00:19:19.806 A:middle
大家可以去试试

00:19:20.066 --> 00:19:22.266 A:middle
接下来  我们就该介绍如何

00:19:22.266 --> 00:19:25.466 A:middle
为应用程序添加更多的视图了

00:19:25.736 --> 00:19:27.946 A:middle
下面就有请 Jason 上台

00:19:28.016 --> 00:19:30.226 A:middle
来为大家介绍安全区域 (Safe Area)

00:19:30.826 --> 00:19:30.976 A:middle
掌声欢迎 Jason

00:19:31.516 --> 00:19:37.806 A:middle
[掌声]

00:19:38.306 --> 00:19:39.016 A:middle
&gt;&gt; 大家好

00:19:40.296 --> 00:19:41.336 A:middle
我的名字是 Jason Yao

00:19:41.336 --> 00:19:42.226 A:middle
是一位界面生成器

00:19:42.226 --> 00:19:43.526 A:middle
工程师  很高兴今天

00:19:43.526 --> 00:19:44.586 A:middle
能在此和大家进行分享

00:19:45.076 --> 00:19:46.106 A:middle
我会继续用这个约会(找红枣)应用

00:19:46.106 --> 00:19:47.116 A:middle
作为模版和例子  再给大家

00:19:47.116 --> 00:19:48.826 A:middle
讲解剩下的三项技术

00:19:49.896 --> 00:19:51.446 A:middle
好了  首先的一点

00:19:51.446 --> 00:19:52.696 A:middle
假设我们在一个视图控制器里

00:19:52.696 --> 00:19:55.616 A:middle
上方设置了顶部导航栏

00:19:55.616 --> 00:19:56.636 A:middle
下方设置了底部

00:19:56.636 --> 00:19:58.806 A:middle
标签导航栏  而我们现在想

00:19:58.806 --> 00:20:01.586 A:middle
确保中间的视图内容不要被

00:19:58.806 --> 00:20:01.586 A:middle
确保中间的视图内容不要被

00:20:01.586 --> 00:20:02.876 A:middle
这上下两个导航栏遮挡

00:20:02.876 --> 00:20:04.306 A:middle
这种情况下  该怎样定位中间的视图

00:20:05.346 --> 00:20:06.876 A:middle
可能大家已经听说过了

00:20:06.916 --> 00:20:09.166 A:middle
在 iOS 11 里  新推出了一个布局指南

00:20:09.166 --> 00:20:10.376 A:middle
叫作安全区域 (Safe Area) 布局指南

00:20:10.576 --> 00:20:12.756 A:middle
这是 UIView 的一个新属性

00:20:13.316 --> 00:20:16.886 A:middle
在自动布局里也可以用

00:20:16.886 --> 00:20:19.166 A:middle
实质上  就是一个长方形区域

00:20:19.166 --> 00:20:20.956 A:middle
一个被两个导航栏  和容器边界

00:20:20.956 --> 00:20:22.526 A:middle
框起来的区域  我们可以在此区域内

00:20:22.526 --> 00:20:24.006 A:middle
按需求对视图进行约束

00:20:24.476 --> 00:20:27.676 A:middle
如果以前你就有过这种布局需求

00:20:27.676 --> 00:20:30.046 A:middle
你可能还记得当时需要

00:20:30.046 --> 00:20:31.286 A:middle
通过 UIViewController 里的

00:20:31.286 --> 00:20:32.296 A:middle
顶底端 (Top and Bottom) 布局指南设置

00:20:32.666 --> 00:20:34.016 A:middle
在新版的安全区域设置方法下  这两项

00:20:34.016 --> 00:20:35.166 A:middle
都废止不用了

00:20:35.616 --> 00:20:36.706 A:middle
安全区域布局指南会更加

00:20:36.706 --> 00:20:37.696 A:middle
便捷好使

00:20:37.776 --> 00:20:39.646 A:middle
效果更多样  还可以实现

00:20:39.646 --> 00:20:41.516 A:middle
一些前所未有的新效果  比如

00:20:41.516 --> 00:20:43.056 A:middle
可以在顶底端导航栏的

00:20:43.056 --> 00:20:43.786 A:middle
中间区域进行居中

00:20:43.786 --> 00:20:46.256 A:middle
使用这个效果之后  如果屏幕方向改变

00:20:46.256 --> 00:20:48.176 A:middle
或者  大小或高度改变

00:20:48.356 --> 00:20:50.026 A:middle
比如  如果我们旋转到

00:20:50.026 --> 00:20:51.666 A:middle
横屏  我们的布局也会

00:20:51.666 --> 00:20:52.306 A:middle
自动调整

00:20:53.696 --> 00:20:55.306 A:middle
安全区域布局指南

00:20:55.306 --> 00:20:57.736 A:middle
也可以应用到 tvOS 上

00:20:59.226 --> 00:21:00.606 A:middle
当我们为 tvOS 设计应用程序

00:20:59.226 --> 00:21:00.606 A:middle
当我们为 tvOS 设计应用程序

00:21:00.606 --> 00:21:01.396 A:middle
设计内容的时候  我们会

00:21:01.396 --> 00:21:04.136 A:middle
希望让设计好的内容铺满整个

00:21:04.136 --> 00:21:04.786 A:middle
大屏幕

00:21:05.036 --> 00:21:06.136 A:middle
这时我们需要考虑的一点

00:21:06.796 --> 00:21:07.916 A:middle
就是我们设计的布局  可能会被

00:21:07.916 --> 00:21:09.096 A:middle
显示在很多大小不一的显示屏上

00:21:09.096 --> 00:21:11.366 A:middle
屏幕尺寸可能很小  也可能很大

00:21:11.366 --> 00:21:13.246 A:middle
格式从平板  到投影仪  我们还

00:21:13.826 --> 00:21:15.336 A:middle
需要考虑  用视频术语说的话

00:21:15.336 --> 00:21:16.596 A:middle
一个叫"过扫描区域"的东西

00:21:18.276 --> 00:21:20.046 A:middle
在一些显示屏上  我这里设计的

00:21:20.046 --> 00:21:22.086 A:middle
标题  就可能会因离顶部太近而

00:21:22.536 --> 00:21:23.346 A:middle
被切出屏幕

00:21:23.346 --> 00:21:24.366 A:middle
因此我们就需要适当调整内容布局

00:21:24.366 --> 00:21:26.176 A:middle
让它们都包含在安全区域

00:21:26.176 --> 00:21:26.686 A:middle
内部

00:21:26.686 --> 00:21:28.336 A:middle
然后安全区域布局指南

00:21:28.336 --> 00:21:29.406 A:middle
就会在 iOS 11 中正确地表达

00:21:29.406 --> 00:21:33.056 A:middle
这部分内容  然后在 tvOS 故事板中

00:21:33.056 --> 00:21:33.686 A:middle
正确显示

00:21:34.116 --> 00:21:37.556 A:middle
我们只需把视图约束在

00:21:37.556 --> 00:21:39.496 A:middle
内容范围内  包在安全区域内

00:21:39.496 --> 00:21:41.306 A:middle
然后把剩下的视图用一张

00:21:41.306 --> 00:21:42.716 A:middle
漂亮的背景图片填满

00:21:42.716 --> 00:21:44.306 A:middle
再展示给用户就好了

00:21:45.936 --> 00:21:47.806 A:middle
要在 iOS 11 和界面生成器中

00:21:47.806 --> 00:21:50.056 A:middle
启用安全区域布局指南也

00:21:50.056 --> 00:21:50.616 A:middle
非常简单

00:21:51.426 --> 00:21:52.576 A:middle
我们只需进入故事板

00:21:52.576 --> 00:21:55.516 A:middle
点击文件审查器  找到

00:21:55.516 --> 00:21:57.116 A:middle
使用安全区域布局指南的

00:21:57.116 --> 00:21:58.156 A:middle
复选框  并勾选即可

00:21:58.986 --> 00:22:00.636 A:middle
勾选之后就能看到

00:21:58.986 --> 00:22:00.636 A:middle
勾选之后就能看到

00:22:00.636 --> 00:22:01.816 A:middle
在我们每一个场景的顶层

00:22:01.816 --> 00:22:03.316 A:middle
都会出现一个新生成的

00:22:03.316 --> 00:22:04.516 A:middle
安全区域布局指南  然后

00:22:04.636 --> 00:22:06.196 A:middle
就可以用这个来设置约束条件

00:22:06.196 --> 00:22:07.286 A:middle
和用画布上其他东西设置约束的

00:22:07.286 --> 00:22:07.976 A:middle
方法一样

00:22:13.076 --> 00:22:14.626 A:middle
所以  一  安全区域布局指南是

00:22:14.626 --> 00:22:16.266 A:middle
UIView 的一个新属性

00:22:16.266 --> 00:22:18.186 A:middle
二  它可以帮我们确保内容不受遮挡

00:22:18.186 --> 00:22:20.966 A:middle
而完整显示  三  如果我们

00:22:20.966 --> 00:22:24.446 A:middle
在 iOS 11 故事板中

00:22:24.446 --> 00:22:27.126 A:middle
使用这项属性  只需勾选上

00:22:27.126 --> 00:22:28.336 A:middle
复选框  系统就会自动

00:22:28.336 --> 00:22:31.196 A:middle
帮我们升级所有相关约束条件

00:22:31.376 --> 00:22:33.906 A:middle
谢谢大家  [掌声]  能自动升级

00:22:33.936 --> 00:22:35.516 A:middle
也是因为旧的顶底端布局指南

00:22:35.516 --> 00:22:36.986 A:middle
的几何架构  刚好和

00:22:37.426 --> 00:22:40.216 A:middle
新的安全区域布局指南相

00:22:40.216 --> 00:22:40.656 A:middle
匹配

00:22:40.656 --> 00:22:42.376 A:middle
而最棒的一点是  这也意味着

00:22:42.376 --> 00:22:43.316 A:middle
当我们在 Xcode 9 的 iOS 故事板里

00:22:43.316 --> 00:22:46.276 A:middle
使用安全区域布局指南时

00:22:47.026 --> 00:22:47.876 A:middle
我们也会确保

00:22:47.876 --> 00:22:49.116 A:middle
你的代码在所有旧版 iOS 上也可以运行

00:22:49.116 --> 00:22:49.476 A:middle
iOS

00:22:50.516 --> 00:22:53.500 A:middle
[掌声]

00:22:56.346 --> 00:22:57.446 A:middle
下面我想跟大家讲的

00:22:57.446 --> 00:22:58.916 A:middle
这个布局方法  可以帮助大家

00:22:58.916 --> 00:23:00.346 A:middle
根据父视图来布局我们的

00:22:58.916 --> 00:23:00.346 A:middle
根据父视图来布局我们的

00:23:00.346 --> 00:23:00.966 A:middle
视图

00:23:02.386 --> 00:23:03.466 A:middle
这个方法就叫  按比例

00:23:03.466 --> 00:23:03.946 A:middle
定位

00:23:04.266 --> 00:23:05.866 A:middle
大致意思是  比如我们应用界面上

00:23:05.866 --> 00:23:07.476 A:middle
有这么一张约会对象(红枣)卡片  然后

00:23:07.476 --> 00:23:08.906 A:middle
我现在希望能把这张图片布置在

00:23:08.906 --> 00:23:10.316 A:middle
父视图从上往下大约 70% 的

00:23:10.316 --> 00:23:10.826 A:middle
地方

00:23:11.446 --> 00:23:12.196 A:middle
该怎么实现这个效果

00:23:12.766 --> 00:23:13.516 A:middle
有好几种方法可供我们

00:23:13.516 --> 00:23:14.046 A:middle
选用

00:23:14.096 --> 00:23:15.726 A:middle
但我今天想跟大家演示的

00:23:15.726 --> 00:23:17.006 A:middle
是如何使用占位分隔视图 (Spacer View)

00:23:18.316 --> 00:23:20.096 A:middle
首先拖拽出一个视图

00:23:20.096 --> 00:23:21.346 A:middle
对象库里随便一个普通的 UIView

00:23:21.996 --> 00:23:23.276 A:middle
对这个视图设置约束  但不进行

00:23:23.276 --> 00:23:23.966 A:middle
渲染

00:23:24.556 --> 00:23:26.516 A:middle
就可以用这个占位视图为框架

00:23:26.576 --> 00:23:28.326 A:middle
把你想成比例定位的视图  布置到

00:23:28.326 --> 00:23:29.016 A:middle
正确的位置

00:23:29.436 --> 00:23:31.166 A:middle
这个方法同样可以应用到

00:23:32.076 --> 00:23:33.516 A:middle
其他布局类型中

00:23:33.516 --> 00:23:34.406 A:middle
只要成比布局就行

00:23:34.606 --> 00:23:36.096 A:middle
这里是另一个例子

00:23:36.096 --> 00:23:37.186 A:middle
这是一个横屏的状态

00:23:37.186 --> 00:23:39.836 A:middle
按 1/5  2/5  和 2/5 的比例分割

00:23:40.126 --> 00:23:41.466 A:middle
三个视图按照上述比例  分别

00:23:42.076 --> 00:23:42.736 A:middle
居中显示

00:23:43.286 --> 00:23:44.146 A:middle
我们现在就来看一下

00:23:44.146 --> 00:23:45.296 A:middle
如何在界面生成器里面

00:23:45.296 --> 00:23:45.806 A:middle
实现这些

00:23:57.956 --> 00:23:59.816 A:middle
这里已经有一个

00:23:59.816 --> 00:24:00.516 A:middle
基础布局了

00:23:59.816 --> 00:24:00.516 A:middle
基础布局了

00:24:00.516 --> 00:24:01.826 A:middle
在这个例子里  我想要定位

00:24:01.826 --> 00:24:03.406 A:middle
布置的  是这张约会对象(红枣)卡片

00:24:04.166 --> 00:24:06.576 A:middle
这个视图是由模态视图

00:24:06.576 --> 00:24:08.046 A:middle
里以表单格式推入的

00:24:08.516 --> 00:24:09.486 A:middle
我们现在把这里

00:24:09.486 --> 00:24:11.076 A:middle
放大一点  这里

00:24:11.076 --> 00:24:11.966 A:middle
已经有两个元素

00:24:11.966 --> 00:24:12.916 A:middle
设置好了一些初始

00:24:12.916 --> 00:24:13.456 A:middle
约束

00:24:13.456 --> 00:24:15.706 A:middle
其中有一个文本标签  和一张

00:24:15.706 --> 00:24:16.056 A:middle
图片

00:24:16.166 --> 00:24:17.536 A:middle
我们把两项都选中  然后

00:24:17.536 --> 00:24:19.096 A:middle
如果仔细看

00:24:19.386 --> 00:24:20.916 A:middle
就会发现  两者的左右

00:24:20.916 --> 00:24:22.066 A:middle
边框都是蓝色的  但是

00:24:22.066 --> 00:24:23.326 A:middle
上下边框却是红色的

00:24:23.986 --> 00:24:24.826 A:middle
这就意味着还有一些东西

00:24:24.826 --> 00:24:25.436 A:middle
需要我们进一步调试

00:24:26.026 --> 00:24:27.046 A:middle
在界面生成器的画布上

00:24:27.046 --> 00:24:28.296 A:middle
只要我们看到红色  就有可能

00:24:28.296 --> 00:24:29.316 A:middle
是以下两种问题

00:24:29.496 --> 00:24:30.386 A:middle
要么是我们设置的

00:24:30.386 --> 00:24:31.166 A:middle
约束不够多  造成了

00:24:31.166 --> 00:24:32.646 A:middle
意义含糊  或者也可能是我们设置了

00:24:32.646 --> 00:24:33.286 A:middle
过多的约束  导致了

00:24:33.286 --> 00:24:33.746 A:middle
约束冲突

00:24:34.306 --> 00:24:35.706 A:middle
我刚设置好这个视图  所以

00:24:35.706 --> 00:24:36.736 A:middle
我知道我还没有把这些元素

00:24:36.736 --> 00:24:38.196 A:middle
关联约束到父视图上

00:24:39.206 --> 00:24:40.206 A:middle
我们现在就设置一下

00:24:40.206 --> 00:24:41.846 A:middle
就用占位分隔视图

00:24:41.846 --> 00:24:42.366 A:middle
来设置

00:24:42.596 --> 00:24:44.726 A:middle
现在我在对象库里

00:24:44.726 --> 00:24:45.726 A:middle
打一下 UIView

00:24:46.036 --> 00:24:47.976 A:middle
把视图拖拽到想要布置的位置

00:24:51.196 --> 00:24:53.586 A:middle
我们大致调整一下

00:24:53.586 --> 00:24:55.136 A:middle
调成它在画布上差不多该

00:24:55.816 --> 00:24:57.216 A:middle
显示的样子

00:24:57.216 --> 00:24:58.586 A:middle
接下来  做一些设置工作

00:24:59.116 --> 00:25:00.066 A:middle
首先我要把这个视图标记为隐藏

00:24:59.116 --> 00:25:00.066 A:middle
首先我要把这个视图标记为隐藏

00:25:00.326 --> 00:25:01.536 A:middle
设置后  这个视图会在

00:25:01.536 --> 00:25:03.666 A:middle
运行时参与布局  但我们并不需要

00:25:03.666 --> 00:25:04.356 A:middle
它参与绘制  这样就不用

00:25:04.356 --> 00:25:05.356 A:middle
浪费资源去绘制这个定位用视图

00:25:06.366 --> 00:25:07.386 A:middle
要做的另一件事

00:25:07.386 --> 00:25:09.186 A:middle
就是在对象库里

00:25:09.186 --> 00:25:11.106 A:middle
把它重命名为占位

00:25:12.116 --> 00:25:12.796 A:middle
70%

00:25:13.386 --> 00:25:15.866 A:middle
现在我们需要添加约束

00:25:17.106 --> 00:25:18.146 A:middle
我们点击固定菜单 (Pin Menu)

00:25:19.266 --> 00:25:20.396 A:middle
给它加一个顶端

00:25:20.396 --> 00:25:22.646 A:middle
约束  一个左侧约束

00:25:22.646 --> 00:25:25.316 A:middle
然后也可以再指定一个

00:25:25.316 --> 00:25:27.126 A:middle
宽度吧  这样之后

00:25:27.126 --> 00:25:28.906 A:middle
还可以连接其他约束

00:25:29.936 --> 00:25:32.006 A:middle
添加上去之后  可以看到

00:25:32.006 --> 00:25:33.606 A:middle
这个占位视图横向移动了

00:25:33.606 --> 00:25:34.756 A:middle
但可以看到  视图的

00:25:34.756 --> 00:25:36.536 A:middle
上下边缘线还是红色的

00:25:36.536 --> 00:25:37.416 A:middle
那是因为我们还没有

00:25:37.416 --> 00:25:38.426 A:middle
给它规定高度

00:25:38.806 --> 00:25:39.946 A:middle
我们希望让这个视图的高度

00:25:39.946 --> 00:25:40.886 A:middle
与父视图成比例  那么现在

00:25:40.886 --> 00:25:41.576 A:middle
就去设置一下

00:25:41.926 --> 00:25:43.256 A:middle
我来添加一个等高约束

00:25:43.256 --> 00:25:45.216 A:middle
按住占位分隔视图  向外拖动

00:25:45.216 --> 00:25:48.446 A:middle
拖到父视图上  在弹出框里

00:25:48.446 --> 00:25:50.066 A:middle
选择等高约束

00:25:50.776 --> 00:25:53.126 A:middle
现在占位视图和我的父视图

00:25:53.126 --> 00:25:54.966 A:middle
高度相同了  但我发现

00:25:54.966 --> 00:25:56.526 A:middle
这个界面上方还有一个导航栏

00:25:57.136 --> 00:25:59.856 A:middle
所以其实我想要的是

00:25:59.856 --> 00:26:01.646 A:middle
高度和...其实是要…哦对了

00:25:59.856 --> 00:26:01.646 A:middle
高度和...其实是要…哦对了

00:26:01.646 --> 00:26:02.366 A:middle
我们可以先去设置一下

00:26:02.366 --> 00:26:02.946 A:middle
比例

00:26:03.946 --> 00:26:08.126 A:middle
设好之后  问题是我这个

00:26:08.126 --> 00:26:09.176 A:middle
的比例  还是和父视图相关的

00:26:09.176 --> 00:26:10.936 A:middle
但我其实是希望  和安全区域相关

00:26:11.386 --> 00:26:13.576 A:middle
一般来说  我们要调整这个

00:26:13.576 --> 00:26:14.796 A:middle
还需要重新编写一下约束

00:26:15.006 --> 00:26:16.136 A:middle
但我想给大家看个新方法

00:26:16.346 --> 00:26:18.026 A:middle
如果我们去到属性

00:26:18.026 --> 00:26:19.326 A:middle
审查器  这个审查器

00:26:19.326 --> 00:26:21.036 A:middle
很好使  然后点击

00:26:21.036 --> 00:26:22.786 A:middle
项目 (Item)  这里现在会

00:26:22.786 --> 00:26:24.616 A:middle
给大家列出可以接收关联约束的

00:26:24.616 --> 00:26:25.926 A:middle
相邻项目

00:26:26.516 --> 00:26:31.506 A:middle
[掌声]

00:26:32.006 --> 00:26:33.586 A:middle
所以如果我点击安全区域

00:26:33.586 --> 00:26:35.696 A:middle
视图高度就变成了安全区域高度的70%

00:26:36.806 --> 00:26:37.896 A:middle
好了  现在我们再去对齐一下

00:26:37.896 --> 00:26:38.356 A:middle
内容

00:26:38.786 --> 00:26:39.946 A:middle
我们现在把这个

00:26:39.946 --> 00:26:41.746 A:middle
"约会对象(红枣)"的文本标签  拖拽到

00:26:41.746 --> 00:26:43.856 A:middle
按住控制键拖拽  创建

00:26:43.856 --> 00:26:46.896 A:middle
一个连接  和占位视图的底端

00:26:46.896 --> 00:26:47.326 A:middle
对齐

00:26:48.516 --> 00:26:50.096 A:middle
我还希望文字能整齐地

00:26:50.096 --> 00:26:51.916 A:middle
布局在基线上  所以这里

00:26:52.086 --> 00:26:53.746 A:middle
我们只需再点击一下

00:26:53.746 --> 00:26:54.746 A:middle
刚刚添加的约束

00:26:55.066 --> 00:26:56.426 A:middle
再去属性审查器里

00:26:57.226 --> 00:26:59.636 A:middle
然后直接在这里改一下

00:26:59.636 --> 00:27:00.246 A:middle
属性就可以了

00:26:59.636 --> 00:27:00.246 A:middle
属性就可以了

00:27:00.246 --> 00:27:01.456 A:middle
这也是自动布局特别好用的

00:27:01.456 --> 00:27:02.506 A:middle
地方之一  我们不一定

00:27:02.506 --> 00:27:03.416 A:middle
非要底端与底端对齐

00:27:03.606 --> 00:27:04.596 A:middle
我们还可以底端和顶端

00:27:04.596 --> 00:27:05.066 A:middle
对齐

00:27:05.306 --> 00:27:06.566 A:middle
或者这我们这个例子里

00:27:06.566 --> 00:27:07.536 A:middle
鉴于我只有一行文本标签

00:27:07.536 --> 00:27:09.606 A:middle
就可以设底端与第一基线对齐

00:27:09.606 --> 00:27:12.796 A:middle
这样  就正好布置在父视图70%高度

00:27:12.796 --> 00:27:13.796 A:middle
并以基线对齐

00:27:14.126 --> 00:27:15.056 A:middle
我们在不同配置环境下

00:27:15.056 --> 00:27:15.836 A:middle
测试一下

00:27:15.836 --> 00:27:18.596 A:middle
比如 iPhone 7+ 竖屏

00:27:19.696 --> 00:27:21.066 A:middle
在设备栏可选

00:27:21.426 --> 00:27:22.846 A:middle
再试试横屏

00:27:22.846 --> 00:27:25.306 A:middle
也还是在 70% 的位置

00:27:25.306 --> 00:27:25.976 A:middle
正是我想要的效果

00:27:34.816 --> 00:27:35.726 A:middle
所以如果我们需要

00:27:35.726 --> 00:27:38.106 A:middle
在界面生成器里

00:27:38.106 --> 00:27:40.926 A:middle
实现按比例定位  请用占位

00:27:40.926 --> 00:27:43.156 A:middle
分隔视图  来帮助我们定位

00:27:43.776 --> 00:27:46.296 A:middle
不要忘了把这些占位视图

00:27:46.296 --> 00:27:48.156 A:middle
标记为隐藏  这样它们

00:27:48.156 --> 00:27:50.186 A:middle
才可以不参与渲染

00:27:50.186 --> 00:27:53.036 A:middle
但依然可以在布局时帮助我们

00:27:53.036 --> 00:27:53.956 A:middle
定位其他页面内容

00:27:55.346 --> 00:27:56.646 A:middle
如果有人是用编程方式

00:27:56.646 --> 00:27:59.436 A:middle
设置布局  可以去用一个叫作

00:27:59.436 --> 00:28:01.586 A:middle
UILayoutGuide (UI布局指南)的东西

00:27:59.436 --> 00:28:01.586 A:middle
UILayoutGuide (UI布局指南)的东西

00:28:01.586 --> 00:28:03.506 A:middle
在编程方式里  可以把

00:28:03.686 --> 00:28:05.406 A:middle
这个布局指南当作占位视图

00:28:05.406 --> 00:28:06.746 A:middle
来使用

00:28:07.316 --> 00:28:10.196 A:middle
下一项  我要给大家介绍

00:28:10.196 --> 00:28:11.556 A:middle
另一种我们可能会使用

00:28:11.556 --> 00:28:12.106 A:middle
的布局方法

00:28:12.396 --> 00:28:13.386 A:middle
我们继续以

00:28:13.386 --> 00:28:14.926 A:middle
约会(找红枣)软件为例子

00:28:14.926 --> 00:28:16.416 A:middle
给大家演示一个自适应布局

00:28:16.416 --> 00:28:19.106 A:middle
这里在竖屏状态下是四乘四的

00:28:19.106 --> 00:28:20.856 A:middle
网格  可供用户选择

00:28:20.856 --> 00:28:21.766 A:middle
文本标签设置在上述网格

00:28:21.766 --> 00:28:22.056 A:middle
下方

00:28:23.316 --> 00:28:24.816 A:middle
而当我旋转手机之后

00:28:24.816 --> 00:28:26.506 A:middle
显示界面会变得

00:28:26.506 --> 00:28:27.296 A:middle
不太一样

00:28:27.296 --> 00:28:28.026 A:middle
还是会以四乘四网格显示出

00:28:28.026 --> 00:28:30.256 A:middle
约会对象(红枣)  但在

00:28:30.256 --> 00:28:31.516 A:middle
右侧还会有一个文本视图

00:28:31.516 --> 00:28:31.996 A:middle
区域

00:28:32.976 --> 00:28:34.386 A:middle
好了  现在让我们看一下如何在

00:28:34.386 --> 00:28:35.516 A:middle
界面生成器里  用堆栈视图

00:28:35.516 --> 00:28:37.366 A:middle
实现自适应布局

00:28:50.786 --> 00:28:52.446 A:middle
好了  这就是我的

00:28:52.576 --> 00:28:55.176 A:middle
约会对象(红枣)故事板

00:28:55.176 --> 00:28:56.206 A:middle
这个网格的初始布局已经

00:28:56.206 --> 00:28:57.156 A:middle
差不多设置好了

00:28:57.156 --> 00:28:58.286 A:middle
现在我要做的第一件事

00:28:58.286 --> 00:29:00.036 A:middle
是先展开对象大纲

00:28:58.286 --> 00:29:00.036 A:middle
是先展开对象大纲

00:29:00.036 --> 00:29:01.296 A:middle
按住 Option 就可以

00:29:01.296 --> 00:29:02.476 A:middle
快速展开所有对象

00:29:03.146 --> 00:29:04.646 A:middle
我先给大家简单介绍一下

00:29:04.716 --> 00:29:06.636 A:middle
已经设置好了什么

00:29:06.806 --> 00:29:08.436 A:middle
我们这里是一个垂直堆栈视图

00:29:08.656 --> 00:29:10.206 A:middle
用四条约束

00:29:10.206 --> 00:29:11.416 A:middle
绑定到了父视图上

00:29:11.906 --> 00:29:14.596 A:middle
内容基本上  由三行内容

00:29:14.596 --> 00:29:15.086 A:middle
构成

00:29:15.416 --> 00:29:17.226 A:middle
第一行是一个

00:29:17.226 --> 00:29:19.066 A:middle
两张图片的嵌套水平堆栈

00:29:19.066 --> 00:29:19.536 A:middle
视图

00:29:20.356 --> 00:29:21.876 A:middle
第二行也是一个

00:29:21.876 --> 00:29:23.826 A:middle
两张图片的嵌套堆栈视图

00:29:24.136 --> 00:29:25.326 A:middle
之后的第三行  是一个

00:29:25.326 --> 00:29:25.686 A:middle
文本标签

00:29:25.686 --> 00:29:27.146 A:middle
我们可以看到

00:29:27.146 --> 00:29:28.086 A:middle
所有内容都是

00:29:28.086 --> 00:29:29.956 A:middle
差不多相同大小  那是因为

00:29:29.956 --> 00:29:31.576 A:middle
堆栈视图有一些很棒的属性

00:29:31.576 --> 00:29:32.796 A:middle
比如对齐方式  子视图分布

00:29:32.796 --> 00:29:33.466 A:middle
和子视图间距

00:29:33.916 --> 00:29:35.326 A:middle
还有很多可选项

00:29:35.326 --> 00:29:37.056 A:middle
可以用于在堆栈视图和

00:29:37.056 --> 00:29:38.906 A:middle
嵌套堆栈视图中配置

00:29:38.906 --> 00:29:39.736 A:middle
我们的布局

00:29:40.546 --> 00:29:41.786 A:middle
堆栈视图的优点

00:29:41.786 --> 00:29:42.716 A:middle
在于它可以帮我们

00:29:42.716 --> 00:29:44.426 A:middle
管理我们的约束条件

00:29:44.426 --> 00:29:45.446 A:middle
所以我们需要手动添加的约束

00:29:45.446 --> 00:29:45.906 A:middle
非常少

00:29:46.416 --> 00:29:47.246 A:middle
如果有人想更详细地

00:29:47.246 --> 00:29:50.496 A:middle
了解子视图分布

00:29:50.496 --> 00:29:52.066 A:middle
和对齐方式里的其他可选项

00:29:52.066 --> 00:29:53.376 A:middle
请务必去阅读说明文件

00:29:53.756 --> 00:29:54.726 A:middle
现在我们的子视图间距

00:29:54.726 --> 00:29:55.456 A:middle
设在沿垂直轴线平分

00:29:55.456 --> 00:29:56.456 A:middle
来确保所有内容的尺寸都是合适的

00:29:56.456 --> 00:29:57.776 A:middle
我们现在具体调整一下设置

00:29:57.776 --> 00:29:58.666 A:middle
让布局更接近我想要的效果

00:29:59.816 --> 00:30:01.796 A:middle
首先我们需要调整子视图间距

00:29:59.816 --> 00:30:01.796 A:middle
首先我们需要调整子视图间距

00:30:02.146 --> 00:30:05.116 A:middle
我现在选中全部

00:30:05.116 --> 00:30:06.186 A:middle
按住 cmd 键并选中

00:30:06.186 --> 00:30:06.996 A:middle
全部堆栈视图

00:30:07.686 --> 00:30:08.706 A:middle
然后在属性审查器里

00:30:08.706 --> 00:30:10.096 A:middle
把子视图间距属性的数值

00:30:10.096 --> 00:30:11.096 A:middle
稍微调大一点

00:30:11.526 --> 00:30:12.946 A:middle
设置到 30 看看

00:30:13.356 --> 00:30:14.776 A:middle
有点太大了

00:30:14.956 --> 00:30:17.836 A:middle
在 Xcode 9 和 iOS 11 里有个新功能

00:30:17.836 --> 00:30:19.676 A:middle
新添了一个选项叫

00:30:19.676 --> 00:30:21.526 A:middle
标准间距  可以让系统自动帮你

00:30:21.526 --> 00:30:22.106 A:middle
选择间距

00:30:22.106 --> 00:30:24.036 A:middle
我就用这个了

00:30:24.636 --> 00:30:26.256 A:middle
希望大家还记得刚刚

00:30:26.256 --> 00:30:27.686 A:middle
Jonathon 讲的动态

00:30:27.686 --> 00:30:29.436 A:middle
字体  对于使用了

00:30:29.436 --> 00:30:30.726 A:middle
文字样式的内容  请大家

00:30:30.726 --> 00:30:32.856 A:middle
一定去看一下垂直堆栈视图的

00:30:32.856 --> 00:30:34.686 A:middle
标准间距  然后勾选上

00:30:34.686 --> 00:30:35.726 A:middle
基线相关

00:30:35.856 --> 00:30:37.116 A:middle
那样会得到和动态字体一样的

00:30:37.116 --> 00:30:38.466 A:middle
效果  和之前演示的一样

00:30:39.816 --> 00:30:40.966 A:middle
我们现在既有图片又有

00:30:40.966 --> 00:30:41.986 A:middle
文本标签  所以就留着

00:30:41.986 --> 00:30:43.726 A:middle
不勾选这一项了

00:30:43.726 --> 00:30:45.266 A:middle
下一项我希望要的效果

00:30:45.266 --> 00:30:46.766 A:middle
是把这些图片都

00:30:46.976 --> 00:30:48.056 A:middle
调成正方形

00:30:48.856 --> 00:30:49.936 A:middle
也许大家看起来觉得已经很方了

00:30:49.936 --> 00:30:51.166 A:middle
但其实真的不是  我可以证明给

00:30:51.166 --> 00:30:51.666 A:middle
大家看

00:30:51.666 --> 00:30:53.206 A:middle
我现在按住控制键  拖拽

00:30:53.206 --> 00:30:56.286 A:middle
图片到自身上  然后选择

00:30:56.286 --> 00:30:57.446 A:middle
宽高比约束

00:30:57.826 --> 00:30:58.866 A:middle
等这个窗口弹出来

00:30:58.866 --> 00:31:00.406 A:middle
就能看到  图片

00:30:58.866 --> 00:31:00.406 A:middle
就能看到  图片

00:31:00.666 --> 00:31:03.416 A:middle
其实是 193 乘 226 的

00:31:03.766 --> 00:31:04.976 A:middle
我们现在就把这个比例设成一比一

00:31:09.136 --> 00:31:11.516 A:middle
好了  但似乎画布上什么反应都

00:31:11.516 --> 00:31:11.886 A:middle
没有

00:31:11.996 --> 00:31:13.486 A:middle
画布上什么变化都没有

00:31:13.486 --> 00:31:15.726 A:middle
而且我的宽高比还变红了

00:31:15.726 --> 00:31:17.376 A:middle
更糟糕的是  如果我们看

00:31:17.376 --> 00:31:19.126 A:middle
一下这里  还出现了一个

00:31:19.126 --> 00:31:19.756 A:middle
小红点

00:31:19.756 --> 00:31:21.016 A:middle
我们点击一下这个小红点

00:31:21.016 --> 00:31:21.756 A:middle
可以看到这里有好多

00:31:21.756 --> 00:31:22.646 A:middle
冲突的约束条件

00:31:22.916 --> 00:31:23.366 A:middle
发生了什么

00:31:23.936 --> 00:31:25.356 A:middle
我们一起回溯  排查一下哪里

00:31:25.356 --> 00:31:25.876 A:middle
出错了

00:31:25.876 --> 00:31:27.106 A:middle
我会给  我会向大家

00:31:27.106 --> 00:31:28.406 A:middle
展示一个如何着手解决

00:31:28.406 --> 00:31:29.376 A:middle
画布上这种报错问题的

00:31:29.886 --> 00:31:30.616 A:middle
小技巧

00:31:31.066 --> 00:31:33.256 A:middle
这里我们设置了宽高比

00:31:33.256 --> 00:31:34.336 A:middle
首先我希望

00:31:34.336 --> 00:31:35.966 A:middle
能够确认  到底是不是

00:31:35.966 --> 00:31:37.136 A:middle
宽高比导致了报错

00:31:37.926 --> 00:31:39.416 A:middle
所以我现在就去

00:31:39.416 --> 00:31:41.376 A:middle
约束的属性审查器

00:31:41.376 --> 00:31:43.436 A:middle
找到安装按钮  然后

00:31:43.436 --> 00:31:45.256 A:middle
在打开和关闭两者间切换一下

00:31:45.256 --> 00:31:45.876 A:middle
看看会怎样

00:31:46.386 --> 00:31:48.836 A:middle
好了  我切换到关闭  这些

00:31:48.966 --> 00:31:49.836 A:middle
报错就消失了

00:31:49.836 --> 00:31:51.776 A:middle
切换到打开时  它们

00:31:51.776 --> 00:31:52.346 A:middle
又出现了

00:31:52.346 --> 00:31:53.476 A:middle
但画布上还是没有任何

00:31:53.476 --> 00:31:55.056 A:middle
变化  所以我要

00:31:55.056 --> 00:31:56.016 A:middle
尝试的下一个策略

00:31:56.016 --> 00:31:57.326 A:middle
就是去布局里面找找

00:31:57.326 --> 00:31:57.726 A:middle
问题

00:31:57.726 --> 00:32:00.136 A:middle
我可能需要关心的

00:31:57.726 --> 00:32:00.136 A:middle
我可能需要关心的

00:32:00.196 --> 00:32:01.416 A:middle
问题  是周围这些

00:32:01.416 --> 00:32:03.136 A:middle
其他的被标红的约束

00:32:03.136 --> 00:32:04.566 A:middle
我们先从这一个由堆栈

00:32:04.566 --> 00:32:05.776 A:middle
最外层视图到顶端的

00:32:05.776 --> 00:32:07.136 A:middle
约束着手

00:32:07.646 --> 00:32:10.656 A:middle
如果我们卸载这个约束

00:32:10.896 --> 00:32:12.876 A:middle
报错消失了  但子视图就

00:32:12.876 --> 00:32:14.216 A:middle
无法平分铺满父视图了

00:32:14.566 --> 00:32:16.516 A:middle
不过图片倒是都变成了

00:32:16.516 --> 00:32:17.066 A:middle
正方形

00:32:17.616 --> 00:32:18.726 A:middle
这个效果挺有意思的

00:32:19.156 --> 00:32:20.696 A:middle
我们再去试试其他的

00:32:20.956 --> 00:32:22.096 A:middle
比如我现在卸载一下这个

00:32:23.026 --> 00:32:24.576 A:middle
然后再卸载一下

00:32:24.576 --> 00:32:25.836 A:middle
右侧约束

00:32:26.376 --> 00:32:28.556 A:middle
可以看到  和刚刚一样

00:32:28.556 --> 00:32:29.996 A:middle
图片变正方形了  但这次

00:32:29.996 --> 00:32:31.066 A:middle
显示也超出了父视图

00:32:31.916 --> 00:32:33.276 A:middle
所以这里的问题其实是

00:32:33.276 --> 00:32:35.186 A:middle
我们无法同时满足

00:32:35.186 --> 00:32:38.516 A:middle
宽高比约束

00:32:38.516 --> 00:32:40.426 A:middle
和在堆栈视图上沿垂直线

00:32:40.426 --> 00:32:41.896 A:middle
平分的约束  然后还要让它们

00:32:41.986 --> 00:32:42.926 A:middle
能装进父视图里

00:32:43.486 --> 00:32:44.996 A:middle
但幸运的是  这个例子里

00:32:44.996 --> 00:32:45.726 A:middle
我不需要铺满整个

00:32:45.726 --> 00:32:46.276 A:middle
父视图

00:32:46.506 --> 00:32:47.846 A:middle
我其实只希望图片

00:32:47.846 --> 00:32:49.226 A:middle
能够置顶显示

00:32:49.226 --> 00:32:50.766 A:middle
所以我只需卸载这个约束

00:32:50.766 --> 00:32:51.726 A:middle
这样就差不多了

00:32:52.266 --> 00:32:53.346 A:middle
但假设我们要旋转屏幕

00:32:53.346 --> 00:32:54.416 A:middle
横屏显示时  显示高度会

00:32:54.416 --> 00:32:55.826 A:middle
变小  而如果我还保留

00:32:55.826 --> 00:32:57.556 A:middle
这个约束  那么还是会超出父视图

00:32:57.856 --> 00:32:58.776 A:middle
所以我现在要做的就是

00:32:58.776 --> 00:32:59.716 A:middle
先不卸载这个约束

00:33:00.216 --> 00:33:01.606 A:middle
而是把它设置成大于或

00:33:01.606 --> 00:33:03.836 A:middle
等于  这差不多就是

00:33:03.836 --> 00:33:05.296 A:middle
我想要的竖屏效果了

00:33:06.356 --> 00:33:09.096 A:middle
我们现在再回到

00:33:09.096 --> 00:33:11.686 A:middle
对象大纲  现在我们要考虑

00:33:11.686 --> 00:33:12.766 A:middle
的是横屏显示的布局

00:33:13.876 --> 00:33:15.396 A:middle
我现在在设备栏里点击一下

00:33:15.396 --> 00:33:18.416 A:middle
横屏  可以看到我们还有

00:33:18.416 --> 00:33:19.716 A:middle
一些调整工作需要做

00:33:20.056 --> 00:33:22.436 A:middle
首先要做的一点

00:33:22.986 --> 00:33:24.536 A:middle
我们希望能更接近

00:33:24.536 --> 00:33:26.566 A:middle
我们之前设想的布局

00:33:26.566 --> 00:33:27.936 A:middle
如果大家还记得  这个

00:33:27.936 --> 00:33:28.706 A:middle
Top Dates 的文本标签得

00:33:28.706 --> 00:33:29.946 A:middle
弄没  然后还需要

00:33:29.946 --> 00:33:31.466 A:middle
在右侧空出一块地方放一个

00:33:31.466 --> 00:33:32.246 A:middle
文本视图

00:33:32.946 --> 00:33:34.366 A:middle
我们先来看一下怎么处理

00:33:34.426 --> 00:33:34.926 A:middle
这个文本标签

00:33:35.426 --> 00:33:38.076 A:middle
点击一下这个标签

00:33:38.076 --> 00:33:40.046 A:middle
堆栈视图里  有一个我们

00:33:40.046 --> 00:33:41.056 A:middle
可以用的属性  隐藏

00:33:41.056 --> 00:33:41.406 A:middle
属性

00:33:41.556 --> 00:33:43.046 A:middle
堆栈视图里很适合使用

00:33:43.146 --> 00:33:44.996 A:middle
隐藏的子视图  因为堆栈视图

00:33:44.996 --> 00:33:46.786 A:middle
可以在布局时自动收起子视图

00:33:46.786 --> 00:33:47.796 A:middle
但还会将它们保留在

00:33:47.796 --> 00:33:48.506 A:middle
子视图组里

00:33:49.936 --> 00:33:51.366 A:middle
我们找到隐藏属性

00:33:51.366 --> 00:33:53.016 A:middle
Xcode 9 还提供了一项新功能

00:33:53.016 --> 00:33:55.036 A:middle
我们还可以根据不同屏幕

00:33:55.036 --> 00:33:56.236 A:middle
尺寸方向 (Size Class)  选择显示或隐藏

00:33:56.236 --> 00:33:56.946 A:middle
在这里可以看到

00:33:57.516 --> 00:34:01.406 A:middle
[掌声]

00:33:57.516 --> 00:34:01.406 A:middle
[掌声]

00:34:01.906 --> 00:34:02.856 A:middle
这里有个展开按钮  更方便

00:34:02.856 --> 00:34:03.306 A:middle
设置

00:34:03.306 --> 00:34:04.566 A:middle
点击打开这个窗口

00:34:05.136 --> 00:34:07.056 A:middle
选择任何宽度

00:34:07.596 --> 00:34:09.505 A:middle
针对我们的情况  因为

00:34:09.505 --> 00:34:11.656 A:middle
是横屏  选择紧凑型 (Compact)

00:34:11.926 --> 00:34:13.516 A:middle
也可以通过底部的

00:34:13.516 --> 00:34:14.636 A:middle
设备栏再次进行确认

00:34:14.686 --> 00:34:16.416 A:middle
我们现在设置的是横屏的

00:34:16.416 --> 00:34:17.585 A:middle
iPhone 7+  普通型

00:34:17.585 --> 00:34:18.426 A:middle
宽度  和紧凑型高度

00:34:18.466 --> 00:34:20.176 A:middle
现在  选好任何宽度加紧凑型高度

00:34:20.176 --> 00:34:21.406 A:middle
我来添加一个差异项

00:34:22.096 --> 00:34:23.436 A:middle
并标记为隐藏  好了

00:34:24.376 --> 00:34:25.545 A:middle
现在我们再返回

00:34:25.545 --> 00:34:26.936 A:middle
竖屏  标签又出现了

00:34:28.146 --> 00:34:29.525 A:middle
回到横屏状态

00:34:29.525 --> 00:34:29.926 A:middle
又消失了

00:34:30.585 --> 00:34:32.646 A:middle
好了  现在就剩下添加文本

00:34:32.686 --> 00:34:33.005 A:middle
视图了

00:34:33.186 --> 00:34:34.045 A:middle
为了添加这个视图

00:34:34.045 --> 00:34:36.226 A:middle
我们需要在外面包一个水平视图

00:34:36.275 --> 00:34:38.005 A:middle
得添加一个水平的

00:34:38.005 --> 00:34:39.516 A:middle
堆栈视图  才能装载

00:34:39.516 --> 00:34:40.636 A:middle
一个文本视图

00:34:40.996 --> 00:34:41.976 A:middle
所以我现在选中

00:34:41.976 --> 00:34:42.556 A:middle
全部这些

00:34:43.106 --> 00:34:45.226 A:middle
然后在对象大纲里

00:34:45.226 --> 00:34:46.946 A:middle
打一下 text view

00:34:47.446 --> 00:34:48.706 A:middle
好添加到画布上

00:34:49.076 --> 00:34:50.476 A:middle
我们现在就用插入

00:34:50.476 --> 00:34:53.186 A:middle
堆栈视图按钮添加一个

00:34:53.186 --> 00:34:54.485 A:middle
外围视图

00:34:54.886 --> 00:34:56.416 A:middle
这就新建了一个堆栈视图

00:34:56.666 --> 00:34:58.516 A:middle
我们还得把这个视图切换到

00:34:58.516 --> 00:34:59.686 A:middle
这个视图是垂直的

00:34:59.686 --> 00:35:00.636 A:middle
我们得把它切换成

00:34:59.686 --> 00:35:00.636 A:middle
我们得把它切换成

00:35:00.636 --> 00:35:01.266 A:middle
水平的

00:35:02.696 --> 00:35:04.216 A:middle
所有元素都缩小了

00:35:04.216 --> 00:35:05.606 A:middle
是因为我把东西都插入到

00:35:05.606 --> 00:35:06.906 A:middle
新视图中了  所以就取消了

00:35:06.906 --> 00:35:07.886 A:middle
它们和父视图相关的所有约束

00:35:08.516 --> 00:35:10.426 A:middle
我们把这个调成

00:35:10.426 --> 00:35:11.236 A:middle
水平的

00:35:11.506 --> 00:35:13.296 A:middle
把我们刚刚新建的

00:35:13.296 --> 00:35:14.376 A:middle
那个外围视图设置

00:35:14.376 --> 00:35:15.676 A:middle
成标准间距

00:35:16.096 --> 00:35:19.896 A:middle
然后就可以添加这个新的文本

00:35:19.896 --> 00:35:20.146 A:middle
视图了

00:35:20.336 --> 00:35:22.466 A:middle
让我们把这个拖拽进来

00:35:23.796 --> 00:35:24.086 A:middle
添加

00:35:24.086 --> 00:35:24.656 A:middle
好了

00:35:25.136 --> 00:35:26.406 A:middle
然后还需要重新约束一下

00:35:26.406 --> 00:35:27.906 A:middle
外围这个视图  把它约束到

00:35:27.906 --> 00:35:29.176 A:middle
父视图上

00:35:29.546 --> 00:35:30.816 A:middle
我们再回到

00:35:30.816 --> 00:35:35.266 A:middle
固定菜单  设置  10，10，10，10

00:35:35.856 --> 00:35:38.496 A:middle
还有一个最底端的

00:35:38.496 --> 00:35:40.006 A:middle
约束  如果大家还记得

00:35:40.456 --> 00:35:43.106 A:middle
我把这里放大一下  设置成

00:35:43.106 --> 00:35:45.706 A:middle
大于或等于

00:35:45.966 --> 00:35:49.026 A:middle
好了  这就是我想要的横屏

00:35:49.026 --> 00:35:49.606 A:middle
效果了

00:35:49.606 --> 00:35:51.386 A:middle
现在我们切换回竖屏

00:35:52.076 --> 00:35:56.086 A:middle
再重复一下类似的过程

00:35:56.086 --> 00:35:57.886 A:middle
让这个文本视图根据屏幕尺寸大小

00:35:57.886 --> 00:35:58.466 A:middle
隐藏

00:35:58.576 --> 00:36:00.626 A:middle
点击一下文本视图

00:35:58.576 --> 00:36:00.626 A:middle
点击一下文本视图

00:36:00.626 --> 00:36:02.326 A:middle
再找出隐藏菜单

00:36:02.326 --> 00:36:02.976 A:middle
添加一个差异项

00:36:06.576 --> 00:36:09.556 A:middle
设置任何宽度  普通型高度

00:36:09.556 --> 00:36:11.736 A:middle
然后标记为隐藏

00:36:11.736 --> 00:36:14.606 A:middle
现在就达成了我们最终想要的效果

00:36:15.516 --> 00:36:21.500 A:middle
[掌声]

00:36:27.006 --> 00:36:28.146 A:middle
总结一下  对于我们所有的布局

00:36:28.146 --> 00:36:29.956 A:middle
能用堆栈视图就用

00:36:30.316 --> 00:36:32.066 A:middle
对齐方式  子视图分布

00:36:32.316 --> 00:36:32.866 A:middle
子视图间距

00:36:32.866 --> 00:36:33.716 A:middle
这几项属性非常

00:36:33.716 --> 00:36:34.686 A:middle
有用  还包括

00:36:34.686 --> 00:36:35.976 A:middle
嵌套

00:36:38.466 --> 00:36:39.876 A:middle
只需添加少数几条约束

00:36:39.876 --> 00:36:41.866 A:middle
唯一需要注意的是  要按比例

00:36:41.866 --> 00:36:42.856 A:middle
布置  需要添加宽高比

00:36:42.856 --> 00:36:43.466 A:middle
约束

00:36:43.466 --> 00:36:44.306 A:middle
所以如果有  比如

00:36:44.306 --> 00:36:46.366 A:middle
按比例布局的需求  其实只

00:36:46.366 --> 00:36:48.766 A:middle
需要手动添加很少几个约束

00:36:48.766 --> 00:36:49.576 A:middle
就可以达到所需的额外

00:36:49.576 --> 00:36:50.126 A:middle
效果

00:36:50.676 --> 00:36:55.426 A:middle
Xcode 9 里的隐藏属性可以根据

00:36:55.426 --> 00:36:57.076 A:middle
屏幕大小尺寸设置开关  非常

00:36:57.076 --> 00:36:57.386 A:middle
方便

00:36:57.386 --> 00:36:59.826 A:middle
大家都可以去尝试一下

00:36:59.826 --> 00:37:01.026 A:middle
尤其和堆栈视图配合使用  效果杰出

00:36:59.826 --> 00:37:01.026 A:middle
尤其和堆栈视图配合使用  效果杰出

00:37:01.476 --> 00:37:03.006 A:middle
因为堆栈视图会自动收起

00:37:03.296 --> 00:37:04.116 A:middle
隐藏的子视图

00:37:04.866 --> 00:37:07.276 A:middle
而最好的一点是  根据屏幕尺寸大小

00:37:07.336 --> 00:37:09.326 A:middle
隐藏的属性  可自动应用在

00:37:09.326 --> 00:37:10.376 A:middle
所有旧版代码上

00:37:11.516 --> 00:37:16.896 A:middle
[掌声]

00:37:17.396 --> 00:37:21.316 A:middle
总结一下  我们今天一共展示了

00:37:21.316 --> 00:37:22.776 A:middle
六项内容  大家学会

00:37:22.776 --> 00:37:24.186 A:middle
这六项新技术  就可以更好地

00:37:24.186 --> 00:37:25.306 A:middle
完善各位在开发的应用

00:37:25.306 --> 00:37:25.766 A:middle
程序

00:37:26.046 --> 00:37:28.036 A:middle
我们非常期盼着能看到各位的应用成果

00:37:28.836 --> 00:37:30.716 A:middle
我们今天看到了一些

00:37:30.806 --> 00:37:32.346 A:middle
技术  可以帮助我们在

00:37:32.346 --> 00:37:33.876 A:middle
运行时进行动态布局

00:37:34.836 --> 00:37:36.066 A:middle
比方说  动态字体

00:37:36.296 --> 00:37:37.696 A:middle
还看到了布局技术

00:37:37.696 --> 00:37:38.986 A:middle
可以帮助我们调整内容显示

00:37:38.986 --> 00:37:40.826 A:middle
呈现更棒的显示效果

00:37:41.106 --> 00:37:43.456 A:middle
让内容不受遮挡  还可以进行自适应

00:37:43.456 --> 00:37:43.756 A:middle
布局

00:37:44.526 --> 00:37:45.626 A:middle
更多详细信息  大家可以

00:37:45.626 --> 00:37:46.536 A:middle
去这个网址查看

00:37:46.596 --> 00:37:48.246 A:middle
developerapple.com

00:37:49.656 --> 00:37:51.116 A:middle
如果大家对动态字体感兴趣

00:37:51.116 --> 00:37:52.136 A:middle
想了解更多相关信息  也可以

00:37:52.136 --> 00:37:54.136 A:middle
去听一下今天下午的那场演讲

00:37:54.316 --> 00:37:55.426 A:middle
这里还有一些往期相关演讲的

00:37:55.426 --> 00:37:55.816 A:middle
链接

00:37:55.816 --> 00:37:57.976 A:middle
祝大家在 WWDC 过得愉快
