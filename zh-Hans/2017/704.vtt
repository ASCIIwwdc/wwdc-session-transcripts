WEBVTT

00:00:20.516 --> 00:00:21.686 A:middle
&gt;&gt; 大家好

00:00:22.276 --> 00:00:23.606 A:middle
我是 John Blackwell

00:00:23.606 --> 00:00:24.676 A:middle
我是 Core Motion 框架

00:00:24.676 --> 00:00:25.426 A:middle
的一名工程师

00:00:25.956 --> 00:00:27.336 A:middle
今天 我们要讲一讲

00:00:27.416 --> 00:00:28.496 A:middle
通过 Core Motion 框架

00:00:28.496 --> 00:00:29.776 A:middle
来创建沉浸式

00:00:29.776 --> 00:00:31.306 A:middle
应用软件 我们还会

00:00:31.306 --> 00:00:32.485 A:middle
在过程中讨论一些

00:00:32.485 --> 00:00:33.886 A:middle
最佳实践的例子

00:00:35.366 --> 00:00:37.376 A:middle
那么今天 我们将要

00:00:37.376 --> 00:00:38.386 A:middle
涉及到一系列话题

00:00:38.896 --> 00:00:40.746 A:middle
第一就是一个简单的概况

00:00:40.746 --> 00:00:42.116 A:middle
了解 Core Motion 可以提供什么

00:00:42.536 --> 00:00:43.816 A:middle
接下来 我们会讲一下

00:00:43.816 --> 00:00:45.816 A:middle
授权 这对于

00:00:45.816 --> 00:00:46.526 A:middle
我们的很多开发人员来说

00:00:46.526 --> 00:00:47.096 A:middle
是一个经常出现的痛点

00:00:47.676 --> 00:00:48.606 A:middle
然后 我们要看一下

00:00:48.606 --> 00:00:50.116 A:middle
有关 Historic Accelerometer

00:00:50.116 --> 00:00:52.336 A:middle
的一些新版本 再之后我们

00:00:52.336 --> 00:00:53.926 A:middle
要看一下 DeviceMotion

00:00:54.166 --> 00:00:55.526 A:middle
也就我们在 Core Motion

00:00:55.526 --> 00:00:56.916 A:middle
中提供的一个传感器混合体

00:00:57.346 --> 00:00:58.526 A:middle
最后 我们要看一下

00:00:58.526 --> 00:01:00.556 A:middle
Badger with Attitude 它是一款游戏

00:00:58.526 --> 00:01:00.556 A:middle
Badger with Attitude 它是一款游戏

00:01:00.556 --> 00:01:01.536 A:middle
其中我们采用了一些

00:01:01.536 --> 00:01:03.116 A:middle
之前在 DeviceMotion 提到过的

00:01:03.116 --> 00:01:04.796 A:middle
概念 并且将它们付诸

00:01:04.885 --> 00:01:05.556 A:middle
实际应用中

00:01:06.686 --> 00:01:08.376 A:middle
那么好了 我们先

00:01:08.376 --> 00:01:09.836 A:middle
仔细了解一下 Core Motion

00:01:09.836 --> 00:01:10.356 A:middle
框架

00:01:13.656 --> 00:01:15.266 A:middle
Core Motion 框架

00:01:15.476 --> 00:01:16.686 A:middle
提供访问

00:01:16.686 --> 00:01:18.186 A:middle
accelerometer gyroscope

00:01:18.436 --> 00:01:19.556 A:middle
magnetometer 以及

00:01:19.556 --> 00:01:20.896 A:middle
altimeter 的途径 并且通过这一

00:01:20.896 --> 00:01:22.476 A:middle
框架 你可以获取

00:01:22.476 --> 00:01:23.586 A:middle
传感器数据的原始形式

00:01:23.586 --> 00:01:25.576 A:middle
以及处理过的形式 并且

00:01:25.576 --> 00:01:26.886 A:middle
在你的应用软件中使用它们

00:01:28.206 --> 00:01:29.546 A:middle
现在 有一些

00:01:29.546 --> 00:01:30.996 A:middle
接口可以通过 Core Motion

00:01:30.996 --> 00:01:31.626 A:middle
获取

00:01:32.166 --> 00:01:35.446 A:middle
第一个就是 CMMotionManager

00:01:35.726 --> 00:01:37.406 A:middle
它帮助获取原始

00:01:37.486 --> 00:01:38.806 A:middle
传感器数据 以及

00:01:38.806 --> 00:01:40.116 A:middle
DeviceMotion 形式的传感器

00:01:40.116 --> 00:01:40.916 A:middle
混合体

00:01:42.226 --> 00:01:44.156 A:middle
CMAltimeter 帮助

00:01:44.156 --> 00:01:45.606 A:middle
获取设备的相关高度

00:01:45.606 --> 00:01:45.976 A:middle
更新

00:01:47.456 --> 00:01:49.216 A:middle
CMPedometer 帮助获取

00:01:49.216 --> 00:01:50.836 A:middle
步数 以作为步数相关

00:01:50.836 --> 00:01:52.156 A:middle
信息 以及

00:01:52.156 --> 00:01:53.616 A:middle
锻炼 暂停 和恢复

00:01:53.616 --> 00:01:53.996 A:middle
活动

00:01:55.396 --> 00:01:56.996 A:middle
MotionActivityManager 帮助

00:01:56.996 --> 00:01:58.696 A:middle
获取设备的活动

00:01:58.696 --> 00:02:00.006 A:middle
情境 例如

00:01:58.696 --> 00:02:00.006 A:middle
情境 例如

00:02:00.006 --> 00:02:02.106 A:middle
走路 跑步 或坐车

00:02:02.296 --> 00:02:06.276 A:middle
CMSensorRecorder

00:02:06.416 --> 00:02:07.976 A:middle
帮助获取

00:02:07.976 --> 00:02:08.826 A:middle
accelerometer 的历史数据

00:02:09.496 --> 00:02:13.576 A:middle
所以这就是一个概况

00:02:13.576 --> 00:02:14.616 A:middle
帮助我们了解 Core Motion 框架

00:02:14.616 --> 00:02:15.156 A:middle
提供什么

00:02:15.696 --> 00:02:17.166 A:middle
接下来 我们来仔细看一下

00:02:17.166 --> 00:02:18.196 A:middle
授权

00:02:19.426 --> 00:02:21.456 A:middle
所以在我刚刚

00:02:21.456 --> 00:02:23.906 A:middle
提到的 API 中 以下四种

00:02:23.906 --> 00:02:25.636 A:middle
都非常敏感 这是由于

00:02:25.636 --> 00:02:26.846 A:middle
所显示的用户私人信息的本质所导致的

00:02:29.376 --> 00:02:31.936 A:middle
为了处理此事 我们会有一个

00:02:31.936 --> 00:02:33.426 A:middle
提示符 在你第一次

00:02:33.426 --> 00:02:34.806 A:middle
唤醒某一个 灵敏的 API 时

00:02:34.806 --> 00:02:35.746 A:middle
它就会出现

00:02:37.056 --> 00:02:39.056 A:middle
记住是当你第一次

00:02:39.056 --> 00:02:40.966 A:middle
唤醒灵敏的 API 时 那个

00:02:40.966 --> 00:02:42.336 A:middle
提示符会出现在用户面前

00:02:42.626 --> 00:02:44.056 A:middle
但是第一次之后 你的

00:02:44.056 --> 00:02:45.106 A:middle
用户就需要到

00:02:45.106 --> 00:02:46.006 A:middle
“设置”来改变

00:02:46.006 --> 00:02:47.216 A:middle
你应用软件的授权

00:02:47.216 --> 00:02:47.986 A:middle
状态

00:02:49.306 --> 00:02:50.916 A:middle
现在 我们来看一看

00:02:50.916 --> 00:02:51.996 A:middle
当你第一次

00:02:51.996 --> 00:02:53.036 A:middle
调用这些 API 中的一个时是怎么样的

00:02:53.816 --> 00:02:55.406 A:middle
这时候 你的用户将

00:02:55.406 --> 00:02:56.346 A:middle
决定他们是否想要

00:02:56.346 --> 00:02:57.766 A:middle
允许访问 Motion

00:02:57.766 --> 00:02:59.576 A:middle
Fitness 数据 或者拒绝访问

00:03:00.016 --> 00:03:01.566 A:middle
作为开发人员 你会

00:03:01.566 --> 00:03:02.676 A:middle
想要处理用户拒绝访问

00:03:02.676 --> 00:03:05.166 A:middle
这一问题

00:03:05.286 --> 00:03:07.376 A:middle
在过去 我们要求你

00:03:07.376 --> 00:03:08.406 A:middle
做这样的事

00:03:09.056 --> 00:03:10.596 A:middle
你需要调用我们灵敏的

00:03:10.596 --> 00:03:12.046 A:middle
API

00:03:12.696 --> 00:03:13.826 A:middle
在这个例子中 我们正在调用

00:03:13.826 --> 00:03:15.756 A:middle
queryPedometerData 然后你

00:03:15.756 --> 00:03:17.346 A:middle
无视从

00:03:17.346 --> 00:03:19.336 A:middle
API 获得的结果 只关注

00:03:19.336 --> 00:03:20.146 A:middle
错误代码

00:03:21.026 --> 00:03:22.536 A:middle
如果代码错误是因为

00:03:22.536 --> 00:03:24.376 A:middle
没有授权 这时

00:03:24.376 --> 00:03:25.536 A:middle
你就可以知道你的应用软件

00:03:25.536 --> 00:03:26.886 A:middle
被拒绝访问动态和

00:03:26.886 --> 00:03:27.476 A:middle
健康数据

00:03:28.646 --> 00:03:30.126 A:middle
现在 我们意识到这种做法

00:03:30.126 --> 00:03:30.846 A:middle
还不够理想

00:03:32.166 --> 00:03:33.196 A:middle
你需要跳过一环一环

00:03:33.266 --> 00:03:34.816 A:middle
来获得你的

00:03:34.816 --> 00:03:36.386 A:middle
授权状态 一旦

00:03:36.426 --> 00:03:37.656 A:middle
你得到了 你就无法知道

00:03:37.656 --> 00:03:39.316 A:middle
为什么你的 App

00:03:39.316 --> 00:03:40.296 A:middle
被拒绝访问

00:03:40.936 --> 00:03:43.326 A:middle
这就是为什么今年我们

00:03:43.326 --> 00:03:44.636 A:middle
提供了一个授权

00:03:44.636 --> 00:03:45.326 A:middle
地位 API

00:03:46.226 --> 00:03:47.606 A:middle
这个 API 在

00:03:47.686 --> 00:03:48.816 A:middle
之前我提到的四类中

00:03:48.816 --> 00:03:50.086 A:middle
都可用 而且它也在

00:03:50.086 --> 00:03:52.076 A:middle
iOS 系统和 watchOS 系统上可用

00:03:52.886 --> 00:03:54.366 A:middle
让我们进一步看一下

00:03:54.366 --> 00:03:56.226 A:middle
CMAuthorizationStatus 值

00:03:56.226 --> 00:03:57.666 A:middle
你将会从 API 得到它

00:03:59.386 --> 00:04:01.596 A:middle
第一个状态是“notDetermined”

00:03:59.386 --> 00:04:01.596 A:middle
第一个状态是“notDetermined”

00:04:01.866 --> 00:04:03.566 A:middle
它代表着

00:04:03.566 --> 00:04:04.866 A:middle
用户还没有被问及

00:04:04.866 --> 00:04:05.856 A:middle
你应用软件的有关

00:04:05.856 --> 00:04:06.466 A:middle
授权

00:04:07.026 --> 00:04:08.806 A:middle
“Restricted”表示

00:04:09.126 --> 00:04:11.386 A:middle
用户无法

00:04:11.386 --> 00:04:12.756 A:middle
为你的应该改变

00:04:12.916 --> 00:04:13.826 A:middle
授权状态

00:04:13.826 --> 00:04:15.426 A:middle
更确切地说

00:04:15.426 --> 00:04:17.086 A:middle
当动态和健康

00:04:17.156 --> 00:04:18.546 A:middle
在隐私中被禁用时会出现这样的状态

00:04:19.406 --> 00:04:20.495 A:middle
下一个状态是“denied”

00:04:20.656 --> 00:04:21.596 A:middle
就是指拒绝

00:04:21.776 --> 00:04:22.526 A:middle
你的应用软件

00:04:22.526 --> 00:04:24.256 A:middle
很明确地被用户

00:04:24.256 --> 00:04:24.746 A:middle
拒绝访问

00:04:25.156 --> 00:04:26.906 A:middle
而“authorized”代表你的 App

00:04:26.906 --> 00:04:28.026 A:middle
已经被允许访问用户的

00:04:28.026 --> 00:04:29.006 A:middle
动态和健康数据

00:04:30.586 --> 00:04:32.746 A:middle
现在 我们回过来看一下

00:04:32.746 --> 00:04:33.836 A:middle
我们之前正在看的

00:04:33.836 --> 00:04:34.606 A:middle
授权确认

00:04:34.856 --> 00:04:37.176 A:middle
第一批最佳实践中有一项

00:04:37.176 --> 00:04:38.796 A:middle
我想要讲一讲

00:04:39.126 --> 00:04:40.266 A:middle
那就是确保你检查了

00:04:40.266 --> 00:04:42.006 A:middle
所给 API 的可用性

00:04:42.006 --> 00:04:44.006 A:middle
在你请求

00:04:44.006 --> 00:04:44.946 A:middle
授权地位之前

00:04:45.656 --> 00:04:47.036 A:middle
在这个例子中 我们正在请求

00:04:47.036 --> 00:04:47.896 A:middle
StepCountingAvailable

00:04:48.816 --> 00:04:50.136 A:middle
接下来你

00:04:50.136 --> 00:04:51.476 A:middle
想要做的就是请求

00:04:51.476 --> 00:04:52.496 A:middle
授权地位

00:04:53.106 --> 00:04:54.446 A:middle
这个时候 是由

00:04:54.446 --> 00:04:56.436 A:middle
你 作为一个开发人员 来决定

00:04:56.506 --> 00:04:57.566 A:middle
想要如何处理

00:04:57.566 --> 00:04:59.196 A:middle
从框架中拿回的

00:04:59.396 --> 00:05:00.176 A:middle
授权

00:04:59.396 --> 00:05:00.176 A:middle
授权

00:05:00.596 --> 00:05:01.966 A:middle
现在你有一个简单的机制

00:05:01.966 --> 00:05:04.256 A:middle
可以来做这件事 无论是在 iOS 系统上还是在

00:05:04.366 --> 00:05:04.876 A:middle
watchOS 系统上

00:05:06.336 --> 00:05:08.896 A:middle
我鼓励你们考虑一下如何

00:05:08.896 --> 00:05:09.956 A:middle
使用授权

00:05:09.956 --> 00:05:11.776 A:middle
地位 App 也就是你应用软件中的

00:05:11.776 --> 00:05:13.266 A:middle
授权地位 API

00:05:13.486 --> 00:05:14.586 A:middle
而且你应该

00:05:14.586 --> 00:05:14.716 A:middle
使用它

00:05:15.516 --> 00:05:16.836 A:middle
接下来 我们要讲一讲

00:05:16.836 --> 00:05:18.066 A:middle
Historical Accelerometer

00:05:19.056 --> 00:05:20.756 A:middle
Historical Accelerometer

00:05:20.756 --> 00:05:22.196 A:middle
也叫作 CMSensorRecorder

00:05:22.536 --> 00:05:24.336 A:middle
可以提供 50 赫兹的 accelerometer

00:05:24.336 --> 00:05:25.926 A:middle
数据 而且我们可以

00:05:25.926 --> 00:05:27.256 A:middle
为你的应用软件记录这一数据 当你的

00:05:27.256 --> 00:05:28.356 A:middle
App 在后台运行时

00:05:29.556 --> 00:05:31.426 A:middle
你可以请求最多 36 小时

00:05:31.426 --> 00:05:33.406 A:middle
的 accelerometer 数据 这些

00:05:33.406 --> 00:05:34.716 A:middle
会被以你的名义

00:05:34.716 --> 00:05:36.386 A:middle
最多储存 3 天

00:05:37.786 --> 00:05:39.696 A:middle
现在 Historical Accelerometer

00:05:39.696 --> 00:05:41.176 A:middle
在 Apple Watch

00:05:41.176 --> 00:05:43.476 A:middle
可用 我很激动

00:05:43.476 --> 00:05:45.126 A:middle
地宣布它现在

00:05:45.126 --> 00:05:46.826 A:middle
也在 iPhone 7 和 7 Plus 上可用

00:05:47.886 --> 00:05:49.406 A:middle
这为你的应用软件开拓了

00:05:49.406 --> 00:05:50.996 A:middle
全新的用例

00:05:51.216 --> 00:05:52.206 A:middle
并且让你思考

00:05:52.206 --> 00:05:53.626 A:middle
要如何在 iPhone 上使用 Historical

00:05:53.626 --> 00:05:55.376 A:middle
Accelerometer 让我们

00:05:55.376 --> 00:05:56.316 A:middle
现在来看一个

00:05:56.316 --> 00:05:58.646 A:middle
简单的应用软件

00:05:59.056 --> 00:06:00.496 A:middle
让我们假设你是一个

00:05:59.056 --> 00:06:00.496 A:middle
让我们假设你是一个

00:06:00.496 --> 00:06:02.366 A:middle
汽车狂粉

00:06:02.366 --> 00:06:03.726 A:middle
你想要构建一款应用软件

00:06:03.726 --> 00:06:05.096 A:middle
帮助你在很长的一段时间内

00:06:05.096 --> 00:06:06.736 A:middle
追踪汽车的

00:06:06.736 --> 00:06:06.926 A:middle
性能

00:06:07.736 --> 00:06:09.086 A:middle
那么我们要怎么样来构建

00:06:09.086 --> 00:06:09.306 A:middle
它呢

00:06:09.746 --> 00:06:10.986 A:middle
好吧 首先我们

00:06:10.986 --> 00:06:12.256 A:middle
想要弄清楚用户

00:06:12.256 --> 00:06:14.526 A:middle
何时驾驶 为此

00:06:14.526 --> 00:06:15.726 A:middle
我们可以使用 Motion Activity

00:06:16.266 --> 00:06:17.476 A:middle
Motion Activity 提供一个

00:06:17.476 --> 00:06:19.436 A:middle
汽车的状态 我们可以用

00:06:19.436 --> 00:06:20.566 A:middle
它来判断何时

00:06:20.566 --> 00:06:21.576 A:middle
用户在驾驶

00:06:22.996 --> 00:06:24.316 A:middle
现在 我想要简单花

00:06:24.316 --> 00:06:25.636 A:middle
几分钟讲一讲

00:06:25.636 --> 00:06:26.706 A:middle
汽车检测

00:06:27.336 --> 00:06:29.566 A:middle
在 iOS 11 系统中 汽车

00:06:29.566 --> 00:06:31.036 A:middle
检测这一块得到了格外的

00:06:31.036 --> 00:06:32.156 A:middle
关注 以此来确保

00:06:32.156 --> 00:06:33.626 A:middle
最佳的效果

00:06:34.166 --> 00:06:35.956 A:middle
在 Motion Activity 中的

00:06:35.956 --> 00:06:37.746 A:middle
汽车状态也

00:06:37.746 --> 00:06:39.016 A:middle
被用来控制 Do

00:06:39.016 --> 00:06:40.386 A:middle
Not Disturb While Driving 这一项功能

00:06:40.386 --> 00:06:41.826 A:middle
它也可以在你的应用软件中

00:06:41.826 --> 00:06:43.186 A:middle
被使用

00:06:43.456 --> 00:06:44.496 A:middle
比如你想要

00:06:44.496 --> 00:06:46.066 A:middle
在你的用户驾驶时

00:06:46.066 --> 00:06:47.406 A:middle
对应用软件的 UI 进行个性化设置

00:06:48.426 --> 00:06:49.766 A:middle
现在 回到我们的

00:06:49.766 --> 00:06:51.156 A:middle
汽车性能追踪

00:06:51.156 --> 00:06:52.666 A:middle
应用软件 我们下一步

00:06:52.666 --> 00:06:54.526 A:middle
想要做的事 收集

00:06:54.766 --> 00:06:55.776 A:middle
accelerometer 数据

00:06:56.256 --> 00:06:57.876 A:middle
对此 我们可以使用

00:06:57.876 --> 00:06:58.546 A:middle
SensorRecorder

00:06:58.846 --> 00:07:00.566 A:middle
我们可以收集

00:06:58.846 --> 00:07:00.566 A:middle
我们可以收集

00:07:00.566 --> 00:07:02.056 A:middle
用户在驾驶期间的

00:07:02.106 --> 00:07:03.336 A:middle
accelerometer 数据 并且

00:07:03.336 --> 00:07:05.276 A:middle
为用户将数据转换成公制

00:07:05.276 --> 00:07:07.066 A:middle
的 例如

00:07:07.066 --> 00:07:07.946 A:middle
汽车在转弯时的

00:07:07.946 --> 00:07:10.376 A:middle
G 值 或者是最大横向或

00:07:10.376 --> 00:07:11.366 A:middle
纵向加 G 值

00:07:12.006 --> 00:07:14.236 A:middle
现在 你可以考虑通过很多不同的

00:07:14.236 --> 00:07:16.036 A:middle
方式来构建

00:07:16.256 --> 00:07:17.956 A:middle
这种应用软件 但是通过

00:07:18.066 --> 00:07:19.816 A:middle
使用 Motion APIs 你可以

00:07:19.816 --> 00:07:20.786 A:middle
为你的用户提供一个

00:07:20.786 --> 00:07:22.796 A:middle
低功耗 全天候的体验

00:07:23.516 --> 00:07:26.206 A:middle
现在请大家通过

00:07:26.206 --> 00:07:28.036 A:middle
Historical Accelerometer 记住一些

00:07:28.036 --> 00:07:29.196 A:middle
最佳实践

00:07:29.766 --> 00:07:31.216 A:middle
首先 你会想要

00:07:31.216 --> 00:07:32.926 A:middle
为你的应用软件选择

00:07:32.926 --> 00:07:34.096 A:middle
合理的最低持续

00:07:34.096 --> 00:07:34.836 A:middle
时间

00:07:35.536 --> 00:07:37.046 A:middle
所以对于汽车性能

00:07:37.046 --> 00:07:38.786 A:middle
追踪应用软件而言 我们也许不

00:07:38.786 --> 00:07:41.116 A:middle
需要全程 36 小时的数据

00:07:41.986 --> 00:07:43.546 A:middle
像 8 到 12

00:07:43.546 --> 00:07:44.706 A:middle
小时更合理

00:07:45.896 --> 00:07:47.326 A:middle
接下来的最佳实践就是

00:07:47.326 --> 00:07:48.516 A:middle
要记得考虑

00:07:48.516 --> 00:07:50.506 A:middle
大批销毁或是减少样本

00:07:50.506 --> 00:07:52.386 A:middle
如果你不需要全部的 50

00:07:52.386 --> 00:07:53.626 A:middle
赫兹 accelerometer 数据的话

00:07:54.326 --> 00:07:56.176 A:middle
这两条建议 这两项

00:07:56.176 --> 00:07:58.206 A:middle
最佳实践会减少

00:07:58.206 --> 00:07:59.316 A:middle
你的应用软件需要进行的

00:07:59.316 --> 00:08:00.906 A:middle
处理量 进而

00:07:59.316 --> 00:08:00.906 A:middle
处理量 进而

00:08:00.906 --> 00:08:02.256 A:middle
也可以节省用户电池的

00:08:02.256 --> 00:08:02.666 A:middle
寿命

00:08:03.656 --> 00:08:05.836 A:middle
现在我鼓励你想一想

00:08:06.086 --> 00:08:07.736 A:middle
你要如何在 iPhone上使用

00:08:07.736 --> 00:08:09.546 A:middle
Historical Accelerometer

00:08:10.046 --> 00:08:13.636 A:middle
下面我们来讲一下

00:08:13.636 --> 00:08:14.566 A:middle
DeviceMotion

00:08:15.126 --> 00:08:16.686 A:middle
DeviceMotion 是指

00:08:16.766 --> 00:08:18.536 A:middle
传感器混合体算法 我们

00:08:18.536 --> 00:08:19.826 A:middle
将它提供在 Core Motion

00:08:19.826 --> 00:08:20.306 A:middle
框架中

00:08:21.146 --> 00:08:23.106 A:middle
现在我们还在

00:08:23.106 --> 00:08:23.846 A:middle
DeviceMotion 中

00:08:23.846 --> 00:08:24.686 A:middle
新加了一些内容

00:08:25.966 --> 00:08:27.396 A:middle
我们在 DeviceMotion 中使用的第一个传感器

00:08:27.396 --> 00:08:28.176 A:middle
是

00:08:28.176 --> 00:08:29.446 A:middle
accelerometer

00:08:29.446 --> 00:08:30.806 A:middle
通过 accelerometer 我们可以

00:08:30.806 --> 00:08:31.776 A:middle
测量用户

00:08:31.776 --> 00:08:33.336 A:middle
传递的加速度 以及

00:08:33.336 --> 00:08:34.535 A:middle
重力

00:08:34.535 --> 00:08:35.025 A:middle
加速度

00:08:36.176 --> 00:08:37.466 A:middle
gyroscope 帮助我们

00:08:37.466 --> 00:08:38.885 A:middle
准确测量

00:08:38.885 --> 00:08:39.716 A:middle
设备的转动率

00:08:40.236 --> 00:08:41.946 A:middle
而 magnetometer 则帮助我们

00:08:41.946 --> 00:08:43.566 A:middle
测量设备周围的局部域

00:08:43.566 --> 00:08:44.876 A:middle
以及

00:08:44.876 --> 00:08:45.906 A:middle
地球磁场

00:08:47.226 --> 00:08:48.886 A:middle
当我们要处理原始

00:08:48.886 --> 00:08:49.866 A:middle
传感器时 需要记住

00:08:49.866 --> 00:08:51.096 A:middle
一些我们面临的挑战

00:08:51.956 --> 00:08:53.176 A:middle
使用 accelerometer

00:08:53.176 --> 00:08:54.916 A:middle
我们很难区分

00:08:54.916 --> 00:08:55.996 A:middle
用户的

00:08:55.996 --> 00:08:57.826 A:middle
加速度

00:08:58.386 --> 00:09:00.166 A:middle
和重力加速度

00:08:58.386 --> 00:09:00.166 A:middle
和重力加速度

00:09:02.376 --> 00:09:03.566 A:middle
使用 gyroscope 我们可能

00:09:03.566 --> 00:09:04.706 A:middle
对时间的测量会产生

00:09:04.706 --> 00:09:06.986 A:middle
偏差 使用 magnetometer

00:09:06.986 --> 00:09:07.756 A:middle
我们很难

00:09:07.756 --> 00:09:09.256 A:middle
区分局部域

00:09:09.256 --> 00:09:10.586 A:middle
和地球磁场

00:09:11.326 --> 00:09:13.346 A:middle
这就是为什么我们引入了

00:09:13.346 --> 00:09:13.876 A:middle
DeviceMotion

00:09:14.566 --> 00:09:16.306 A:middle
DeviceMotion 可以提供 3D

00:09:16.306 --> 00:09:17.716 A:middle
追踪

00:09:17.716 --> 00:09:19.236 A:middle
当设备正在经历自由空间

00:09:19.336 --> 00:09:19.846 A:middle
动态

00:09:20.636 --> 00:09:22.156 A:middle
它通过合并

00:09:22.156 --> 00:09:23.826 A:middle
所有的传感器

00:09:23.826 --> 00:09:25.546 A:middle
重新组织每一个的优点

00:09:25.676 --> 00:09:26.476 A:middle
同时将缺点

00:09:26.476 --> 00:09:27.286 A:middle
最小化

00:09:28.246 --> 00:09:30.026 A:middle
对于开发人员来说

00:09:30.026 --> 00:09:31.856 A:middle
这意味着你

00:09:32.126 --> 00:09:34.066 A:middle
专注于自己想要如何使用

00:09:34.066 --> 00:09:35.466 A:middle
动态数据 而不是

00:09:35.466 --> 00:09:36.766 A:middle
纠结于如何最好地利用传感器这样的

00:09:36.766 --> 00:09:38.036 A:middle
技术性问题

00:09:39.776 --> 00:09:41.016 A:middle
目前 我们已经在

00:09:41.016 --> 00:09:42.496 A:middle
之前的会议中讲过

00:09:42.496 --> 00:09:43.376 A:middle
DeviceMotion

00:09:43.626 --> 00:09:44.796 A:middle
我希望大家

00:09:44.796 --> 00:09:45.116 A:middle
去看一下

00:09:45.436 --> 00:09:46.606 A:middle
我们详细讲了

00:09:46.636 --> 00:09:48.116 A:middle
传感器和 DeviceMotion

00:09:48.116 --> 00:09:48.756 A:middle
算法

00:09:49.216 --> 00:09:51.036 A:middle
但是今天 我们要考虑的是

00:09:51.036 --> 00:09:52.886 A:middle
如何通过使用

00:09:52.886 --> 00:09:54.426 A:middle
DeviceMotion 的某些部分来

00:09:54.426 --> 00:09:55.696 A:middle
为你的用户创建

00:09:55.696 --> 00:09:56.386 A:middle
沉浸式应用软件

00:09:56.386 --> 00:10:00.666 A:middle
作为一名开发人员 当你

00:09:56.386 --> 00:10:00.666 A:middle
作为一名开发人员 当你

00:10:00.666 --> 00:10:01.616 A:middle
第一次开始使用

00:10:01.616 --> 00:10:03.136 A:middle
DeviceMotion 时 第一件

00:10:03.136 --> 00:10:04.256 A:middle
需要考虑的事情是

00:10:04.256 --> 00:10:05.186 A:middle
参照系

00:10:05.416 --> 00:10:07.076 A:middle
参照系决定了

00:10:07.396 --> 00:10:08.906 A:middle
会使用混合体中的哪一个

00:10:08.906 --> 00:10:11.006 A:middle
传感器 以及如何

00:10:11.006 --> 00:10:11.886 A:middle
计算你应用软件的

00:10:11.886 --> 00:10:12.656 A:middle
空间方位

00:10:13.616 --> 00:10:14.786 A:middle
第一个参照系是

00:10:14.956 --> 00:10:17.046 A:middle
xArbitraryZVertical

00:10:17.046 --> 00:10:18.166 A:middle
它将 accelerometer 和

00:10:18.166 --> 00:10:19.406 A:middle
gyroscope 合并 但没有使用

00:10:19.406 --> 00:10:19.976 A:middle
magnetometer

00:10:20.716 --> 00:10:21.886 A:middle
其余三个参照系分别是

00:10:21.886 --> 00:10:23.536 A:middle
xArbitraryCorrected

00:10:23.856 --> 00:10:25.076 A:middle
xMagneticNorth 和

00:10:25.076 --> 00:10:26.936 A:middle
xTrueNorthZVertical  同时使用

00:10:26.936 --> 00:10:27.626 A:middle
三种传感器

00:10:28.776 --> 00:10:30.216 A:middle
现在 我们来讲一讲有关第一个

00:10:30.216 --> 00:10:31.846 A:middle
参照系的更多细节

00:10:33.166 --> 00:10:34.786 A:middle
假设你现在有一款很棒的

00:10:34.786 --> 00:10:35.876 A:middle
竞速游戏

00:10:35.876 --> 00:10:37.376 A:middle
当前

00:10:37.596 --> 00:10:39.176 A:middle
你的用户可以通过触控

00:10:39.176 --> 00:10:39.646 A:middle
进行游戏

00:10:40.306 --> 00:10:41.556 A:middle
这很棒 但是通过使用动态

00:10:41.556 --> 00:10:42.716 A:middle
我们可以提供更加沉浸式的

00:10:42.716 --> 00:10:44.526 A:middle
体验

00:10:45.926 --> 00:10:47.956 A:middle
我们希望我们

00:10:47.956 --> 00:10:50.146 A:middle
可以让用户

00:10:50.146 --> 00:10:51.526 A:middle
通过设别进行驾驶 那么当他们将

00:10:51.526 --> 00:10:52.836 A:middle
他们的车 他们的设备倾斜

00:10:52.836 --> 00:10:54.276 A:middle
到左边时 汽车就会

00:10:55.836 --> 00:10:55.996 A:middle
左转

00:10:56.206 --> 00:10:57.496 A:middle
现在 只要设备是

00:10:57.496 --> 00:10:59.466 A:middle
相对静止的 我们可以用

00:10:59.466 --> 00:11:01.226 A:middle
accelerometer 来估算

00:10:59.466 --> 00:11:01.226 A:middle
accelerometer 来估算

00:11:01.306 --> 00:11:03.556 A:middle
重力 一旦

00:11:03.556 --> 00:11:05.186 A:middle
我们得到了重力 就可以

00:11:05.186 --> 00:11:06.466 A:middle
决定倾斜角度 或者是

00:11:06.466 --> 00:11:07.966 A:middle
重力抵消的角度

00:11:08.616 --> 00:11:11.656 A:middle
但请记住一件事

00:11:11.656 --> 00:11:13.126 A:middle
如果你

00:11:13.126 --> 00:11:14.776 A:middle
让 accelerometer 自行运作的话

00:11:14.776 --> 00:11:17.126 A:middle
有些手势会

00:11:17.126 --> 00:11:17.786 A:middle
很模糊

00:11:18.846 --> 00:11:20.476 A:middle
将装置向右倾斜

00:11:20.856 --> 00:11:21.896 A:middle
对于 accelerometer 来说

00:11:21.896 --> 00:11:23.506 A:middle
和将装置向左滑动

00:11:23.506 --> 00:11:24.536 A:middle
是一样

00:11:25.306 --> 00:11:26.636 A:middle
现在你可以考虑

00:11:26.636 --> 00:11:28.106 A:middle
处理这个问题 通过

00:11:28.106 --> 00:11:29.846 A:middle
将 accelerometer 信号

00:11:29.916 --> 00:11:30.236 A:middle
平均化

00:11:31.276 --> 00:11:32.886 A:middle
这样做的话 你可以减少

00:11:32.936 --> 00:11:34.446 A:middle
来自用户的短期

00:11:34.446 --> 00:11:35.916 A:middle
效应 只留下

00:11:35.916 --> 00:11:37.506 A:middle
长期效应 例如

00:11:37.506 --> 00:11:38.226 A:middle
重力

00:11:38.906 --> 00:11:40.786 A:middle
然而 这样做的话 你

00:11:40.786 --> 00:11:41.836 A:middle
也将注意到你的应用软件

00:11:41.836 --> 00:11:43.196 A:middle
的响应速度会更慢

00:11:43.336 --> 00:11:45.396 A:middle
这时候就需要 DeviceMotion

00:11:45.396 --> 00:11:45.916 A:middle
发挥作用

00:11:46.736 --> 00:11:48.516 A:middle
DeviceMotion 意味着你的

00:11:48.516 --> 00:11:49.816 A:middle
应用软件不需要

00:11:49.816 --> 00:11:51.316 A:middle
建立过滤逻辑就可以

00:11:51.316 --> 00:11:53.036 A:middle
从传感器获取极大的性能

00:11:55.276 --> 00:11:57.846 A:middle
xArbitraryZVertical

00:11:57.846 --> 00:11:59.706 A:middle
参考系就是你

00:11:59.706 --> 00:12:00.786 A:middle
应用软件的默认参考系

00:11:59.706 --> 00:12:00.786 A:middle
应用软件的默认参考系

00:12:00.786 --> 00:12:02.276 A:middle
如果

00:12:02.276 --> 00:12:03.886 A:middle
你在开始

00:12:04.116 --> 00:12:05.616 A:middle
DeviceMotion 更新时没有明确指明是哪个

00:12:05.616 --> 00:12:06.106 A:middle
参考系的话

00:12:06.476 --> 00:12:08.136 A:middle
这个参考系

00:12:08.136 --> 00:12:09.646 A:middle
对于使用来说是很棒的 当你

00:12:09.646 --> 00:12:10.936 A:middle
想要追踪设备各角度的

00:12:10.936 --> 00:12:13.706 A:middle
倾斜的话

00:12:13.706 --> 00:12:15.516 A:middle
在游戏的用例

00:12:15.516 --> 00:12:17.306 A:middle
中 accelerometer 和

00:12:17.306 --> 00:12:18.596 A:middle
gyroscope 合并使用

00:12:18.596 --> 00:12:19.976 A:middle
可以让我们更加

00:12:19.976 --> 00:12:21.486 A:middle
快速且准确地追踪

00:12:21.486 --> 00:12:21.936 A:middle
重力

00:12:22.526 --> 00:12:24.256 A:middle
一旦有了重力 我们就可以

00:12:24.256 --> 00:12:25.726 A:middle
将它转换成倾斜角度设计到

00:12:25.726 --> 00:12:26.076 A:middle
游戏中

00:12:27.326 --> 00:12:28.926 A:middle
现在我们来看看如何

00:12:28.926 --> 00:12:30.596 A:middle
操作 我的同事 Ahmad

00:12:30.596 --> 00:12:31.456 A:middle
一会儿会来到讲台上

00:12:31.456 --> 00:12:33.386 A:middle
向我们展示

00:12:33.936 --> 00:12:36.146 A:middle
这个参考系对于

00:12:36.146 --> 00:12:37.816 A:middle
使用还很棒的一点在于当你

00:12:37.816 --> 00:12:39.576 A:middle
想要追踪用户的

00:12:39.576 --> 00:12:39.976 A:middle
手势时

00:12:40.546 --> 00:12:41.926 A:middle
我希望大家去看一下我们的

00:12:41.926 --> 00:12:43.646 A:middle
样本应用软件 SwingWatch

00:12:44.356 --> 00:12:46.166 A:middle
SwingWatch 是一款在

00:12:46.436 --> 00:12:47.906 A:middle
手表上的 App

00:12:48.066 --> 00:12:49.696 A:middle
它使用 DeviceMotion 进行追踪

00:12:49.696 --> 00:12:51.416 A:middle
当你在网球比赛中进行正手击球

00:12:51.416 --> 00:12:53.116 A:middle
或者反手击球时

00:12:54.236 --> 00:12:55.336 A:middle
样本代码和

00:12:55.336 --> 00:12:56.336 A:middle
会议都可以在网上找到

00:12:56.336 --> 00:12:58.146 A:middle
我鼓励大家去查看一下

00:12:58.956 --> 00:13:00.936 A:middle
那么 我们来假设你有另一款

00:12:58.956 --> 00:13:00.936 A:middle
那么 我们来假设你有另一款

00:13:00.936 --> 00:13:01.346 A:middle
游戏

00:13:02.096 --> 00:13:03.386 A:middle
假定是一款射击游戏

00:13:03.586 --> 00:13:05.666 A:middle
你的用户可以

00:13:05.736 --> 00:13:07.066 A:middle
通过虚拟的按钮开关进行瞄准

00:13:07.486 --> 00:13:09.496 A:middle
这很棒 但是通过动态

00:13:09.496 --> 00:13:10.446 A:middle
我们可以提供更加具有沉浸式的

00:13:10.446 --> 00:13:12.156 A:middle
体验

00:13:15.936 --> 00:13:17.976 A:middle
我们要做的是

00:13:17.976 --> 00:13:19.776 A:middle
判断用户在哪里

00:13:19.776 --> 00:13:21.386 A:middle
指向设备

00:13:21.386 --> 00:13:23.566 A:middle
并且将这一信息转化

00:13:23.656 --> 00:13:25.306 A:middle
成游戏中的瞄准 为此 我们

00:13:25.306 --> 00:13:26.346 A:middle
想要使用空间方位

00:13:27.686 --> 00:13:29.496 A:middle
空间方位可以提供

00:13:29.496 --> 00:13:31.306 A:middle
旋转角度率

00:13:31.306 --> 00:13:32.186 A:middle
从在你第一次

00:13:32.186 --> 00:13:34.086 A:middle
DeviceMotion 更新时就固定的参考系到

00:13:34.086 --> 00:13:35.406 A:middle
用户当前在 3D 空间中握着的

00:13:35.406 --> 00:13:38.346 A:middle
设备

00:13:38.556 --> 00:13:39.946 A:middle
现在 我们可以考虑用来

00:13:39.946 --> 00:13:41.966 A:middle
获取空间方位的途径是

00:13:41.966 --> 00:13:43.826 A:middle
取得整个原始参数

00:13:43.826 --> 00:13:44.226 A:middle
信号

00:13:44.846 --> 00:13:47.256 A:middle
你的摇摆会决定

00:13:47.256 --> 00:13:47.746 A:middle
空间方位

00:13:48.236 --> 00:13:50.106 A:middle
然而

00:13:50.106 --> 00:13:51.966 A:middle
这一判断空间方位的方法

00:13:51.966 --> 00:13:53.926 A:middle
会随时间产生偏离 这是由于

00:13:53.926 --> 00:13:56.936 A:middle
参数的偏差 这时就需要

00:13:56.936 --> 00:13:58.616 A:middle
xArbitraryCorrectedZVertical

00:13:58.616 --> 00:13:59.606 A:middle
参考系的帮助了

00:14:00.196 --> 00:14:01.376 A:middle
这一参考系通过使用

00:14:01.376 --> 00:14:03.076 A:middle
magnetometer 来改进

00:14:03.076 --> 00:14:04.686 A:middle
我们提供的水平

00:14:04.956 --> 00:14:07.236 A:middle
空间方位预测 作为一名

00:14:07.236 --> 00:14:08.626 A:middle
开发人员 这个参考

00:14:08.626 --> 00:14:09.886 A:middle
系意味着

00:14:09.886 --> 00:14:11.546 A:middle
通过一个固定的中心参考

00:14:11.546 --> 00:14:13.386 A:middle
向你提供可靠的空间方位

00:14:13.386 --> 00:14:13.916 A:middle
性能

00:14:14.286 --> 00:14:16.206 A:middle
所以在游戏中 你的用户可以

00:14:16.206 --> 00:14:17.706 A:middle
来回移动设备然后

00:14:17.746 --> 00:14:19.046 A:middle
找到一个已知的中心

00:14:19.046 --> 00:14:19.666 A:middle
位置

00:14:21.166 --> 00:14:22.546 A:middle
现在 通过使用这个参考系

00:14:22.546 --> 00:14:23.756 A:middle
你还有许多其他的方式

00:14:23.756 --> 00:14:24.426 A:middle
可以考虑

00:14:25.046 --> 00:14:26.176 A:middle
假设你想要构建一款

00:14:26.176 --> 00:14:28.356 A:middle
360 度的相片和视频

00:14:28.356 --> 00:14:29.236 A:middle
播放应用软件

00:14:29.236 --> 00:14:30.906 A:middle
你的用户可以转动

00:14:30.906 --> 00:14:32.356 A:middle
他们的设备然后

00:14:32.356 --> 00:14:33.966 A:middle
回到追准一个中心的状态

00:14:34.126 --> 00:14:35.276 A:middle
这里即对准湖上的

00:14:35.276 --> 00:14:35.646 A:middle
码头

00:14:37.286 --> 00:14:38.296 A:middle
另外一个你可以

00:14:38.296 --> 00:14:39.736 A:middle
考虑使用参考

00:14:39.736 --> 00:14:41.366 A:middle
系的是有关

00:14:41.366 --> 00:14:42.766 A:middle
虚拟现实的房地产的

00:14:42.766 --> 00:14:44.646 A:middle
应用软件 你会想

00:14:44.646 --> 00:14:46.636 A:middle
让你的用户可以

00:14:46.636 --> 00:14:47.656 A:middle
从不同角度环顾房间

00:14:47.886 --> 00:14:48.866 A:middle
而仅需移动他们的设备

00:14:50.486 --> 00:14:51.596 A:middle
假设现在你已经构建了这样的一款

00:14:51.596 --> 00:14:53.046 A:middle
应用软件 你的用户

00:14:53.116 --> 00:14:55.066 A:middle
很喜欢它 但是他们想要

00:14:55.066 --> 00:14:56.356 A:middle
更清楚地了解

00:14:56.356 --> 00:14:58.646 A:middle
窗户的朝向 或者

00:14:58.746 --> 00:14:59.736 A:middle
哪个方向

00:14:59.736 --> 00:15:00.766 A:middle
可以看到日出

00:14:59.736 --> 00:15:00.766 A:middle
可以看到日出

00:15:01.096 --> 00:15:03.226 A:middle
为此 我们想要一个“环境

00:15:03.226 --> 00:15:03.676 A:middle
参考”

00:15:05.366 --> 00:15:07.076 A:middle
现在你可以考虑使用

00:15:07.076 --> 00:15:08.136 A:middle
magnetometer 来完成它

00:15:08.136 --> 00:15:09.466 A:middle
它可以提供一个“环境

00:15:09.466 --> 00:15:10.556 A:middle
参考”而且你的

00:15:10.556 --> 00:15:11.906 A:middle
应用软件可以根据环境

00:15:11.906 --> 00:15:12.806 A:middle
作出适应

00:15:13.646 --> 00:15:14.966 A:middle
然而 使用原始

00:15:14.966 --> 00:15:16.846 A:middle
magnetometer 你会发现

00:15:16.846 --> 00:15:17.946 A:middle
输出容易被

00:15:17.946 --> 00:15:18.626 A:middle
打乱

00:15:19.556 --> 00:15:21.406 A:middle
有一些是

00:15:21.406 --> 00:15:23.306 A:middle
设备固有的 而有一些是

00:15:23.306 --> 00:15:24.346 A:middle
设备外的

00:15:25.706 --> 00:15:26.936 A:middle
这个时候就需要用到最后两个

00:15:26.936 --> 00:15:28.026 A:middle
参考系了

00:15:28.566 --> 00:15:30.706 A:middle
这两个参考系使用

00:15:30.706 --> 00:15:32.586 A:middle
magnetometer 根据环境

00:15:32.586 --> 00:15:34.616 A:middle
适应设备

00:15:34.736 --> 00:15:36.956 A:middle
这些参考

00:15:36.956 --> 00:15:38.606 A:middle
系处理的是磁性

00:15:38.746 --> 00:15:40.966 A:middle
设备级别的效应

00:15:40.966 --> 00:15:42.396 A:middle
还可以挑战 magnetometer

00:15:42.396 --> 00:15:44.266 A:middle
的状况 可以

00:15:44.266 --> 00:15:44.696 A:middle
使输出变得稳定

00:15:46.176 --> 00:15:48.046 A:middle
那么 在这两个

00:15:48.046 --> 00:15:49.656 A:middle
参考系中作何选择则是

00:15:49.656 --> 00:15:50.576 A:middle
根据你应用软件的

00:15:50.576 --> 00:15:51.206 A:middle
需求

00:15:51.646 --> 00:15:52.886 A:middle
如果你已经获得了

00:15:53.076 --> 00:15:54.276 A:middle
有关真北的数据

00:15:54.486 --> 00:15:55.796 A:middle
例如 地图数据

00:15:55.796 --> 00:15:57.166 A:middle
那么使用

00:15:57.166 --> 00:15:58.786 A:middle
xTrueNorthZVertical 参考

00:15:58.786 --> 00:15:59.106 A:middle
系就更合理

00:16:00.326 --> 00:16:03.356 A:middle
那么我们要如何考虑使用

00:16:03.356 --> 00:16:04.326 A:middle
这些参考系呢

00:16:04.916 --> 00:16:07.106 A:middle
其中一个例子是

00:16:07.106 --> 00:16:08.816 A:middle
观星指南应用软件

00:16:08.816 --> 00:16:09.846 A:middle
你希望你的用户可以通过

00:16:09.846 --> 00:16:11.506 A:middle
将设备对准

00:16:11.506 --> 00:16:14.056 A:middle
天空中的星星来进行识别

00:16:14.316 --> 00:16:14.896 A:middle
另外你还可以

00:16:14.896 --> 00:16:15.636 A:middle
考虑将这些

00:16:15.636 --> 00:16:17.106 A:middle
参考系

00:16:17.106 --> 00:16:18.076 A:middle
运用到增强现实

00:16:18.076 --> 00:16:19.756 A:middle
的应用软件中去 在这类的应用软件中你需要

00:16:19.756 --> 00:16:21.736 A:middle
结合相机数据和

00:16:21.736 --> 00:16:22.546 A:middle
环境参考

00:16:22.906 --> 00:16:24.196 A:middle
为此 我们会建议你

00:16:24.196 --> 00:16:25.106 A:middle
查看 ARKit

00:16:25.496 --> 00:16:26.746 A:middle
ARKit 会议将

00:16:26.746 --> 00:16:27.876 A:middle
紧随本次会议举行

00:16:27.876 --> 00:16:32.196 A:middle
现在 我们再回到

00:16:32.196 --> 00:16:33.516 A:middle
虚拟现实的房地产

00:16:33.516 --> 00:16:34.116 A:middle
应用软件上来

00:16:35.286 --> 00:16:35.886 A:middle
假设你已经构建了一款

00:16:35.886 --> 00:16:37.276 A:middle
应用软件 你的用户也很

00:16:37.276 --> 00:16:39.306 A:middle
喜欢它 但是你想要提供

00:16:39.306 --> 00:16:40.696 A:middle
更多的功能

00:16:41.186 --> 00:16:42.416 A:middle
假设你想要

00:16:42.416 --> 00:16:44.166 A:middle
根据现实的位置

00:16:44.166 --> 00:16:45.296 A:middle
在水平面上添加

00:16:45.296 --> 00:16:45.576 A:middle
地标

00:16:46.506 --> 00:16:48.166 A:middle
我们要怎么

00:16:48.166 --> 00:16:48.346 A:middle
做呢

00:16:49.096 --> 00:16:51.006 A:middle
我们需要的是指向标

00:16:52.376 --> 00:16:54.266 A:middle
指向标为我们提供

00:16:54.266 --> 00:16:55.376 A:middle
设备所指的方向

00:16:55.376 --> 00:16:56.346 A:middle
这是相对于正北而言的

00:16:56.786 --> 00:16:58.226 A:middle
所以当设备指着

00:16:58.306 --> 00:17:00.086 A:middle
正北时 指向标

00:16:58.306 --> 00:17:00.086 A:middle
正北时 指向标

00:17:00.086 --> 00:17:03.076 A:middle
会回到 0 度

00:17:03.076 --> 00:17:04.486 A:middle
当用户旋转他们的设备

00:17:04.546 --> 00:17:06.205 A:middle
指向标的角度也会随之

00:17:06.205 --> 00:17:06.586 A:middle
改变

00:17:08.106 --> 00:17:09.556 A:middle
现在你要考虑的是

00:17:09.556 --> 00:17:11.086 A:middle
通过使用 CoreLocation

00:17:11.086 --> 00:17:11.846 A:middle
获得指向标

00:17:12.316 --> 00:17:14.306 A:middle
CoreLocation 提供一个开始

00:17:14.306 --> 00:17:17.006 A:middle
更新指向标 API 然后你

00:17:17.006 --> 00:17:18.796 A:middle
使用那个指向标

00:17:18.796 --> 00:17:20.445 A:middle
并进行合并 通过

00:17:20.445 --> 00:17:21.476 A:middle
你已经从

00:17:21.476 --> 00:17:22.236 A:middle
DeviceMotion 获取的数据

00:17:24.366 --> 00:17:25.256 A:middle
但要记住

00:17:25.256 --> 00:17:26.965 A:middle
CoreLocation

00:17:26.965 --> 00:17:28.926 A:middle
的指向标可能会合并路线

00:17:29.846 --> 00:17:31.216 A:middle
路线这里是指

00:17:31.216 --> 00:17:32.066 A:middle
设备移动的反响

00:17:32.896 --> 00:17:34.646 A:middle
这对于

00:17:34.646 --> 00:17:35.746 A:middle
逐向

00:17:35.746 --> 00:17:37.886 A:middle
导航应用软件也许是合理的 但是对于

00:17:37.886 --> 00:17:39.226 A:middle
增强现实应用软件来说

00:17:39.436 --> 00:17:40.496 A:middle
就不那么合理了

00:17:40.846 --> 00:17:42.296 A:middle
我希望你可以

00:17:42.296 --> 00:17:43.666 A:middle
听听周四的 CoreLocation 会议

00:17:43.666 --> 00:17:45.266 A:middle
以获取更多细节

00:17:46.596 --> 00:17:48.126 A:middle
此外你可能还考虑

00:17:48.126 --> 00:17:49.806 A:middle
通过我们提供在 DeviceMotion

00:17:49.806 --> 00:17:51.376 A:middle
中的空间方位估算

00:17:51.376 --> 00:17:53.276 A:middle
来获得

00:17:53.276 --> 00:17:54.066 A:middle
指向标

00:17:54.586 --> 00:17:56.266 A:middle
然而 要想在

00:17:56.266 --> 00:17:57.476 A:middle
所有情况下把这件事做正确

00:17:57.476 --> 00:17:59.946 A:middle
绝非容易的事 这也是为什么

00:18:00.336 --> 00:18:01.876 A:middle
今年我们在 DeviceMotion

00:18:01.876 --> 00:18:03.716 A:middle
中添加了指向标 并将它作为

00:18:03.716 --> 00:18:04.546 A:middle
一项顶级的性能

00:18:05.896 --> 00:18:07.716 A:middle
指向标将

00:18:07.716 --> 00:18:09.276 A:middle
accelerometer gyroscope 以及

00:18:09.276 --> 00:18:09.896 A:middle
最重要的

00:18:09.896 --> 00:18:11.306 A:middle
magnetometer 合并起来 利用正北方向

00:18:11.306 --> 00:18:12.736 A:middle
为我们提供设备所指

00:18:12.736 --> 00:18:13.656 A:middle
的方向

00:18:15.366 --> 00:18:16.746 A:middle
记住 指向标

00:18:16.746 --> 00:18:19.026 A:middle
仅在 iOS 系统上提供 同时

00:18:19.026 --> 00:18:20.206 A:middle
磁场特性也是

00:18:20.206 --> 00:18:20.606 A:middle
可用的

00:18:22.156 --> 00:18:23.576 A:middle
现在我们来仔细看一下

00:18:23.576 --> 00:18:23.976 A:middle
API

00:18:25.386 --> 00:18:27.066 A:middle
指向标仅对

00:18:27.066 --> 00:18:28.986 A:middle
xMagneticNorth 和 xTrueNorth

00:18:28.986 --> 00:18:29.766 A:middle
参考系有效

00:18:30.126 --> 00:18:31.106 A:middle
对以其他两个参考系

00:18:31.106 --> 00:18:32.146 A:middle
你会

00:18:32.146 --> 00:18:33.326 A:middle
从指向标收到一个负值

00:18:33.326 --> 00:18:36.426 A:middle
指向标会

00:18:36.426 --> 00:18:39.586 A:middle
从你在你应用软件中

00:18:39.586 --> 00:18:41.546 A:middle
选择的 X 轴上 给你 0 到 359 度

00:18:41.546 --> 00:18:42.856 A:middle
的数值范围 无论是

00:18:42.856 --> 00:18:44.356 A:middle
MagneticNorth 还是 TrueNorth

00:18:44.986 --> 00:18:48.016 A:middle
既然我们有了指向标 我们

00:18:48.016 --> 00:18:49.776 A:middle
就可以用它来

00:18:49.776 --> 00:18:50.936 A:middle
将金门大桥

00:18:50.936 --> 00:18:52.606 A:middle
放置在它

00:18:52.606 --> 00:18:52.916 A:middle
实际的方位上了

00:18:55.946 --> 00:18:57.496 A:middle
现在 通过 DeviceMotion

00:18:57.496 --> 00:18:58.686 A:middle
我们有一些最佳实践

00:18:58.686 --> 00:18:59.446 A:middle
需要记住

00:19:00.266 --> 00:19:02.226 A:middle
首先 你要

00:19:02.226 --> 00:19:03.456 A:middle
确保在开始更新之前

00:19:03.456 --> 00:19:04.546 A:middle
检查所给

00:19:04.546 --> 00:19:06.196 A:middle
参考系的

00:19:06.196 --> 00:19:06.746 A:middle
可用性

00:19:07.566 --> 00:19:09.646 A:middle
为此 你可以使用

00:19:09.646 --> 00:19:10.966 A:middle
availableAttitudeReference

00:19:10.966 --> 00:19:11.586 A:middle
Frame 的 API

00:19:12.216 --> 00:19:13.176 A:middle
它会返回给你一个

00:19:13.336 --> 00:19:15.356 A:middle
CMAttitudeReferenceFrame 位掩码

00:19:15.586 --> 00:19:17.016 A:middle
然后你可以通过

00:19:17.016 --> 00:19:17.856 A:middle
相关的参考系

00:19:17.856 --> 00:19:19.136 A:middle
来确定

00:19:19.136 --> 00:19:19.756 A:middle
可用性

00:19:21.086 --> 00:19:22.736 A:middle
下一件要

00:19:22.736 --> 00:19:23.866 A:middle
记住的是 选择

00:19:23.866 --> 00:19:25.556 A:middle
参考系对于你的应用软件来说

00:19:25.556 --> 00:19:26.326 A:middle
很关键

00:19:26.506 --> 00:19:28.416 A:middle
这会决定

00:19:28.416 --> 00:19:29.876 A:middle
如何计算你应用软件的

00:19:29.876 --> 00:19:32.246 A:middle
空间方位 以及决定哪些

00:19:32.246 --> 00:19:34.056 A:middle
传感器会被

00:19:34.056 --> 00:19:34.686 A:middle
合并

00:19:36.286 --> 00:19:37.806 A:middle
现在 我们已经讲了一些

00:19:37.806 --> 00:19:39.686 A:middle
有关 DeviceMotion 的事

00:19:39.686 --> 00:19:40.596 A:middle
让我们来讲讲更加

00:19:40.596 --> 00:19:41.146 A:middle
实际的东西

00:19:41.806 --> 00:19:45.126 A:middle
我们来讲讲

00:19:45.266 --> 00:19:46.296 A:middle
我们在 DeviceMotion 中讨论过的一些概念

00:19:46.296 --> 00:19:48.686 A:middle
然后通过一个游戏

00:19:48.686 --> 00:19:50.516 A:middle
看看它们的实际应用

00:19:51.466 --> 00:19:53.076 A:middle
Badger with Attitude 是一款游戏

00:19:53.256 --> 00:19:54.246 A:middle
其中我们需要使用

00:19:54.536 --> 00:19:56.776 A:middle
DeviceMotion 为游戏

00:19:56.776 --> 00:19:58.616 A:middle
转换控制

00:19:58.616 --> 00:19:59.806 A:middle
为此 我会请我的

00:19:59.806 --> 00:20:01.516 A:middle
同事 Ahmad 到台上来

00:19:59.806 --> 00:20:01.516 A:middle
同事 Ahmad 到台上来

00:20:01.516 --> 00:20:02.326 A:middle
跟大家讲一讲这个

00:20:03.516 --> 00:20:07.500 A:middle
[鼓掌]

00:20:14.396 --> 00:20:15.186 A:middle
&gt;&gt; 谢谢你 John

00:20:16.676 --> 00:20:17.576 A:middle
大家好 欢迎来到这里

00:20:18.346 --> 00:20:19.406 A:middle
今天我会讲一讲

00:20:19.406 --> 00:20:21.246 A:middle
有关那些概念的问题 也就是 John

00:20:21.246 --> 00:20:22.606 A:middle
前面提到的

00:20:22.606 --> 00:20:23.656 A:middle
通过一个实例帮大家加深

00:20:23.656 --> 00:20:24.126 A:middle
了解

00:20:24.876 --> 00:20:26.106 A:middle
我叫 Ahmad 我是

00:20:26.106 --> 00:20:27.256 A:middle
Core Motion 团队的一名

00:20:27.256 --> 00:20:27.536 A:middle
工程师

00:20:29.036 --> 00:20:30.296 A:middle
我将会使用 Badger 这个 App

00:20:30.446 --> 00:20:31.666 A:middle
它是由我们在 SceneKit

00:20:31.666 --> 00:20:32.946 A:middle
的同事开发的

00:20:33.546 --> 00:20:34.626 A:middle
你也许已经看到过它了

00:20:34.626 --> 00:20:35.456 A:middle
就在去年的会议上

00:20:36.096 --> 00:20:37.476 A:middle
在这款游戏里你需要操控一只很可爱的

00:20:37.476 --> 00:20:38.686 A:middle
小獾 他叫 Bob

00:20:39.106 --> 00:20:41.156 A:middle
他坐在一个采矿车里 在

00:20:41.156 --> 00:20:42.766 A:middle
车轨上颠簸 一路上

00:20:42.766 --> 00:20:43.876 A:middle
挑选宝石和获取能量

00:20:44.466 --> 00:20:46.566 A:middle
所以我们要来讲一讲这款 App

00:20:46.566 --> 00:20:48.886 A:middle
通过现存的滑动操作

00:20:49.046 --> 00:20:50.946 A:middle
并使用 DeviceMotion 将其变成

00:20:51.376 --> 00:20:52.806 A:middle
基于动态的姿势

00:20:53.236 --> 00:20:58.546 A:middle
这是现在商店中可以为你

00:20:58.546 --> 00:21:00.396 A:middle
提供的： 首先我们

00:20:58.546 --> 00:21:00.396 A:middle
提供的： 首先我们

00:21:00.396 --> 00:21:01.556 A:middle
要讲讲现存的

00:21:01.556 --> 00:21:03.186 A:middle
控制 以及我们正在努力

00:21:03.186 --> 00:21:03.926 A:middle
完成的

00:21:04.816 --> 00:21:06.446 A:middle
然后我们会向你展示

00:21:06.446 --> 00:21:08.126 A:middle
关于使用 DeviceMotion 的一些基本的东西

00:21:08.906 --> 00:21:10.456 A:middle
最后 我们用算法

00:21:10.456 --> 00:21:12.046 A:middle
来捕捉那些姿势

00:21:12.586 --> 00:21:16.206 A:middle
在 Badger 这款 App 中

00:21:16.206 --> 00:21:17.746 A:middle
你可以在屏幕上滑动手指

00:21:17.746 --> 00:21:19.206 A:middle
来使獾跳动

00:21:20.186 --> 00:21:21.166 A:middle
如果你下滑手指

00:21:21.166 --> 00:21:22.956 A:middle
獾会低头藏在

00:21:22.956 --> 00:21:24.226 A:middle
手推车里 以避开

00:21:24.226 --> 00:21:24.746 A:middle
障碍物

00:21:25.876 --> 00:21:27.366 A:middle
向左右滑动可以

00:21:27.366 --> 00:21:29.306 A:middle
让獾通过摆动

00:21:29.306 --> 00:21:30.196 A:middle
够到宝石

00:21:31.406 --> 00:21:33.176 A:middle
如果你在这么美丽的

00:21:33.176 --> 00:21:34.346 A:middle
图案上进行操作

00:21:34.346 --> 00:21:35.356 A:middle
仅仅将它们藏在

00:21:35.356 --> 00:21:36.516 A:middle
手指后面玩游戏的话

00:21:36.516 --> 00:21:37.086 A:middle
就太可惜了

00:21:38.516 --> 00:21:39.596 A:middle
所以 这里我们就将手机作为

00:21:39.596 --> 00:21:42.456 A:middle
控制器 让

00:21:42.456 --> 00:21:43.806 A:middle
用户完全沉浸在

00:21:43.806 --> 00:21:45.156 A:middle
我们为他们构建的体验中

00:21:47.456 --> 00:21:48.806 A:middle
那么首先 我们要检测

00:21:48.806 --> 00:21:50.656 A:middle
用户是否将设备

00:21:50.686 --> 00:21:52.226 A:middle
转向自己来使獾

00:21:52.226 --> 00:21:52.636 A:middle
跳跃

00:21:54.456 --> 00:21:55.856 A:middle
轻微地向下晃动设备

00:21:55.856 --> 00:21:57.336 A:middle
可以使獾

00:21:57.336 --> 00:21:58.906 A:middle
蹲下藏到手推车里

00:21:59.796 --> 00:22:02.346 A:middle
向左或向右倾斜设备

00:21:59.796 --> 00:22:02.346 A:middle
向左或向右倾斜设备

00:22:02.346 --> 00:22:04.226 A:middle
会使獾相应地进行

00:22:04.226 --> 00:22:04.786 A:middle
倾斜

00:22:05.336 --> 00:22:09.256 A:middle
现在我想让你关注在

00:22:09.256 --> 00:22:11.646 A:middle
这些点上

00:22:11.646 --> 00:22:12.966 A:middle
当你之后在看着

00:22:12.966 --> 00:22:15.126 A:middle
样本代码时想一想它们 或者

00:22:15.126 --> 00:22:16.556 A:middle
想一想如何将动态并进

00:22:16.556 --> 00:22:17.366 A:middle
你的应用软件

00:22:17.876 --> 00:22:20.646 A:middle
正如 John 已经提到的

00:22:20.726 --> 00:22:22.236 A:middle
通过 Core Motion 你可以

00:22:22.316 --> 00:22:23.386 A:middle
直接和传感器进行

00:22:23.386 --> 00:22:23.896 A:middle
互动

00:22:24.776 --> 00:22:25.966 A:middle
拿 accelerometer

00:22:25.966 --> 00:22:26.636 A:middle
来说

00:22:27.926 --> 00:22:29.616 A:middle
只要用户是半静止的状态

00:22:29.616 --> 00:22:31.246 A:middle
那样的输入看上去还行

00:22:31.506 --> 00:22:32.946 A:middle
但是当你开始走动

00:22:32.946 --> 00:22:34.846 A:middle
或者上一辆公交车 你就

00:22:34.846 --> 00:22:35.776 A:middle
必须考虑

00:22:35.776 --> 00:22:37.236 A:middle
这些额外的 加速度

00:22:38.286 --> 00:22:39.756 A:middle
通过 DeviceMotion 我们已经

00:22:39.756 --> 00:22:41.216 A:middle
用其他的传感器 比如

00:22:41.216 --> 00:22:43.046 A:middle
gyro 和 magnetometer 来

00:22:43.046 --> 00:22:44.296 A:middle
对 accelerometer 进行了

00:22:44.296 --> 00:22:46.346 A:middle
很好的补充 我们

00:22:46.346 --> 00:22:48.576 A:middle
为你合并这些输入 这样一来我们可以

00:22:48.576 --> 00:22:50.016 A:middle
将环境因素的影响

00:22:50.016 --> 00:22:51.876 A:middle
最小化 让你专注在

00:22:51.876 --> 00:22:53.746 A:middle
捕捉动态控制上

00:22:54.206 --> 00:22:56.446 A:middle
而不是如何处理

00:22:57.606 --> 00:22:58.286 A:middle
传感器的输入问题

00:22:58.896 --> 00:23:01.276 A:middle
通过 DeviceMotion API 你可以

00:22:58.896 --> 00:23:01.276 A:middle
通过 DeviceMotion API 你可以

00:23:01.276 --> 00:23:03.336 A:middle
以两种不同的方式来质询

00:23:03.336 --> 00:23:06.126 A:middle
样本 即“推”和

00:23:06.126 --> 00:23:06.996 A:middle
“拉”这两种机制

00:23:07.376 --> 00:23:09.396 A:middle
让我们来仔细看一下这

00:23:10.106 --> 00:23:10.176 A:middle
两个机制

00:23:12.196 --> 00:23:13.886 A:middle
“推”这一机制对于

00:23:13.886 --> 00:23:15.576 A:middle
捕捉一定时间内

00:23:15.576 --> 00:23:17.336 A:middle
的分离姿势是很

00:23:17.336 --> 00:23:17.656 A:middle
有用的

00:23:19.046 --> 00:23:21.216 A:middle
在去年的 SwingWatch App 中

00:23:21.216 --> 00:23:23.716 A:middle
我们使用了“推”

00:23:23.716 --> 00:23:25.376 A:middle
这个机制 因此框架

00:23:25.376 --> 00:23:27.226 A:middle
会在固定的间隔内

00:23:27.226 --> 00:23:28.906 A:middle
向我们推一些更新 只要

00:23:29.206 --> 00:23:29.666 A:middle
有更新的话

00:23:31.026 --> 00:23:32.056 A:middle
然后我们会捕捉这些

00:23:32.056 --> 00:23:34.256 A:middle
更新并且检测用户是否

00:23:34.256 --> 00:23:35.746 A:middle
摆动手臂来进行

00:23:35.746 --> 00:23:36.906 A:middle
反手击球或正手击球

00:23:38.936 --> 00:23:40.696 A:middle
这就是 API 的样子

00:23:41.286 --> 00:23:43.076 A:middle
你使用 CMMotionManager 的

00:23:43.436 --> 00:23:44.746 A:middle
开始 DeviceMotion 更新

00:23:44.746 --> 00:23:46.626 A:middle
功能 你提供一个

00:23:46.626 --> 00:23:48.076 A:middle
相关的参考系

00:23:49.466 --> 00:23:51.606 A:middle
提供一个操作线索 来使

00:23:51.606 --> 00:23:53.206 A:middle
你的 motionHandler 尽快

00:23:53.206 --> 00:23:54.556 A:middle
处理那些已有的样本

00:23:57.156 --> 00:24:00.416 A:middle
然而 如果你先要知道

00:23:57.156 --> 00:24:00.416 A:middle
然而 如果你先要知道

00:24:00.416 --> 00:24:01.486 A:middle
设备的当前状态

00:24:01.486 --> 00:24:04.126 A:middle
那么你需要在这里使用

00:24:04.126 --> 00:24:05.226 A:middle
“拉”这个机制

00:24:05.836 --> 00:24:07.266 A:middle
正如我们之后会在

00:24:07.266 --> 00:24:09.086 A:middle
Badger 这款 App 演示 对于倾斜

00:24:09.156 --> 00:24:11.366 A:middle
姿势 我们想要让

00:24:11.366 --> 00:24:13.366 A:middle
獾的倾斜角度

00:24:13.366 --> 00:24:14.406 A:middle
和手机一样

00:24:15.316 --> 00:24:17.526 A:middle
因此我们要确保

00:24:17.526 --> 00:24:19.386 A:middle
为我们的图形应用软件提供

00:24:20.016 --> 00:24:21.426 A:middle
反应灵敏而流畅的体验

00:24:23.056 --> 00:24:24.996 A:middle
“拉”机制的 API

00:24:24.996 --> 00:24:25.826 A:middle
更简单

00:24:26.416 --> 00:24:26.836 A:middle
你调用

00:24:26.836 --> 00:24:28.756 A:middle
startDeviceMotionUpdates 然后

00:24:28.756 --> 00:24:30.036 A:middle
提供参考系

00:24:31.006 --> 00:24:32.156 A:middle
只要你准备好了 你就

00:24:32.156 --> 00:24:33.376 A:middle
可以从框架中拉取最新的

00:24:33.376 --> 00:24:34.916 A:middle
DeviceMotion

00:24:34.916 --> 00:24:35.366 A:middle
样本

00:24:35.856 --> 00:24:39.226 A:middle
我们还将发布样本

00:24:39.226 --> 00:24:40.446 A:middle
代码以供使用 你之后

00:24:40.446 --> 00:24:42.516 A:middle
可以看一下 但是现在

00:24:42.516 --> 00:24:43.736 A:middle
让我们先来关注 Core Motion

00:24:43.736 --> 00:24:44.336 A:middle
的部分

00:24:44.956 --> 00:24:47.376 A:middle
那么让我们从它们开始

00:24:47.376 --> 00:24:49.216 A:middle
介绍 Core Motion 框架

00:24:49.216 --> 00:24:50.616 A:middle
然后举一个

00:24:50.616 --> 00:24:51.696 A:middle
CMMotionManager 的例子

00:24:52.936 --> 00:24:54.796 A:middle
然后我们检查一下 DeviceMotion

00:24:54.796 --> 00:24:56.236 A:middle
更新在这个平台是是否

00:24:56.236 --> 00:24:56.756 A:middle
可用

00:24:57.266 --> 00:25:00.026 A:middle
如果你回忆刚才 John

00:24:57.266 --> 00:25:00.026 A:middle
如果你回忆刚才 John

00:25:00.026 --> 00:25:02.126 A:middle
讲的 我们

00:25:02.126 --> 00:25:03.806 A:middle
关注的

00:25:03.806 --> 00:25:05.406 A:middle
关于追踪重力的倾斜姿势也在

00:25:05.406 --> 00:25:05.656 A:middle
设备框中

00:25:06.386 --> 00:25:08.116 A:middle
我们会使用

00:25:08.116 --> 00:25:09.896 A:middle
xArbitraryZVertical 参考

00:25:09.896 --> 00:25:11.626 A:middle
系 我会还会检查它使用在

00:25:11.626 --> 00:25:12.646 A:middle
平台上可用

00:25:13.606 --> 00:25:15.616 A:middle
你也许注意到了在这里我没有

00:25:15.906 --> 00:25:17.526 A:middle
检查授权

00:25:17.526 --> 00:25:18.686 A:middle
这是因为我正在

00:25:18.686 --> 00:25:20.096 A:middle
使用 MotionManager API

00:25:20.416 --> 00:25:22.506 A:middle
它并不访问敏感

00:25:22.506 --> 00:25:22.796 A:middle
数据

00:25:24.766 --> 00:25:27.896 A:middle
接下来的部分 我们会

00:25:27.896 --> 00:25:29.866 A:middle
假定设备属于

00:25:29.906 --> 00:25:31.116 A:middle
最后一种定向 但是

00:25:31.116 --> 00:25:32.246 A:middle
在样本代码中 我们会向你展示

00:25:32.246 --> 00:25:34.306 A:middle
如何捕捉处理其他的

00:25:34.306 --> 00:25:35.406 A:middle
设备定向

00:25:38.956 --> 00:25:41.126 A:middle
对于第一种姿势 当

00:25:41.336 --> 00:25:42.976 A:middle
向自己旋转设备

00:25:43.186 --> 00:25:45.296 A:middle
来使獾起跳时 我们

00:25:45.296 --> 00:25:47.366 A:middle
想要捕捉

00:25:47.366 --> 00:25:49.156 A:middle
手机水平轴的

00:25:49.156 --> 00:25:50.986 A:middle
旋转率数值

00:25:51.736 --> 00:25:53.206 A:middle
在这个例子中 也就是 Y 轴

00:25:55.816 --> 00:25:57.286 A:middle
那么我们还要看一下

00:25:57.286 --> 00:25:59.836 A:middle
DeviceMotion 目标的

00:25:59.836 --> 00:26:00.906 A:middle
旋转率特性

00:25:59.836 --> 00:26:00.906 A:middle
旋转率特性

00:26:01.486 --> 00:26:02.946 A:middle
我们特别选择它

00:26:02.946 --> 00:26:04.736 A:middle
是因为我们与

00:26:04.736 --> 00:26:06.376 A:middle
设备当前的角度不相关

00:26:06.376 --> 00:26:08.056 A:middle
与我们相关的是

00:26:08.056 --> 00:26:09.006 A:middle
那个角度的快速改变

00:26:10.286 --> 00:26:12.046 A:middle
所以如果我们使用旋转率的话

00:26:12.096 --> 00:26:14.246 A:middle
我们就可以检测到快速的

00:26:14.316 --> 00:26:16.036 A:middle
跳动 并且让獾相应地

00:26:16.036 --> 00:26:16.646 A:middle
进行跳跃

00:26:17.136 --> 00:26:19.676 A:middle
这是我们

00:26:19.676 --> 00:26:21.786 A:middle
在很短的一段时间要检测到的

00:26:21.786 --> 00:26:23.156 A:middle
姿势 因此我们要对它

00:26:23.156 --> 00:26:26.346 A:middle
使用“推”机制

00:26:26.616 --> 00:26:27.606 A:middle
让我们来看看它

00:26:27.606 --> 00:26:27.976 A:middle
在代码里是什么样的

00:26:28.606 --> 00:26:31.106 A:middle
最开始 我们要将

00:26:31.106 --> 00:26:32.666 A:middle
更新间隔设为 50 赫兹

00:26:33.176 --> 00:26:34.176 A:middle
你需要在设置的时候

00:26:34.176 --> 00:26:34.736 A:middle
很小心

00:26:35.466 --> 00:26:36.496 A:middle
你希望样本

00:26:36.496 --> 00:26:38.006 A:middle
过来的足够快 这样的话

00:26:38.006 --> 00:26:39.406 A:middle
你就可以捕捉那个姿势

00:26:39.876 --> 00:26:41.126 A:middle
但是也不要太快

00:26:41.126 --> 00:26:42.626 A:middle
那样会提高对计算

00:26:42.976 --> 00:26:44.206 A:middle
和记忆的要求

00:26:45.656 --> 00:26:47.716 A:middle
然后我们开始

00:26:47.716 --> 00:26:49.696 A:middle
使用“推”机制进行 DeviceMotion 更新

00:26:49.696 --> 00:26:51.416 A:middle
提供我们的

00:26:51.416 --> 00:26:53.166 A:middle
xArbitraryZVertical 参考

00:26:53.166 --> 00:26:56.216 A:middle
系 一个“queue” 我正在这里

00:26:56.216 --> 00:26:58.586 A:middle
使用标准操作线索

00:26:58.586 --> 00:26:59.796 A:middle
最后就是我们的 motionHandler

00:27:02.636 --> 00:27:04.186 A:middle
这就是我们的 motionHandler

00:27:04.186 --> 00:27:04.686 A:middle
的样子

00:27:04.946 --> 00:27:06.426 A:middle
只要样本准备好了

00:27:06.426 --> 00:27:07.206 A:middle
就可以调动它

00:27:07.926 --> 00:27:08.966 A:middle
我们要做的第一件事就是

00:27:08.966 --> 00:27:11.606 A:middle
检查所有的错误

00:27:11.606 --> 00:27:13.076 A:middle
从 DeviceMotion 目标获取旋转率

00:27:13.076 --> 00:27:15.426 A:middle
然后看一下

00:27:15.696 --> 00:27:17.516 A:middle
与我们相关的

00:27:17.516 --> 00:27:18.776 A:middle
Y 轴分量

00:27:19.336 --> 00:27:21.016 A:middle
然后我们将它储存在缓冲存储器中

00:27:21.416 --> 00:27:22.436 A:middle
我这里使用的是循环

00:27:22.436 --> 00:27:24.296 A:middle
缓冲 因此只要

00:27:24.296 --> 00:27:25.656 A:middle
样本过来 我们就可以

00:27:25.656 --> 00:27:29.566 A:middle
积累更多

00:27:29.966 --> 00:27:31.226 A:middle
由于我们为这个应用软件

00:27:31.226 --> 00:27:33.266 A:middle
使用的是 SceneKit 渲染器

00:27:33.266 --> 00:27:34.126 A:middle
我选择渲染器的

00:27:34.126 --> 00:27:35.336 A:middle
updateAtTime 功能

00:27:35.826 --> 00:27:37.256 A:middle
在你渲染一个新的场景之前

00:27:37.296 --> 00:27:40.046 A:middle
它会被调用 这

00:27:40.046 --> 00:27:41.286 A:middle
对于我来说是一个理想的地方

00:27:41.286 --> 00:27:42.396 A:middle
来检查缓存状态

00:27:42.396 --> 00:27:44.576 A:middle
然后更新游戏

00:27:45.106 --> 00:27:47.986 A:middle
我会让你们

00:27:47.986 --> 00:27:48.746 A:middle
自己去发现

00:27:48.746 --> 00:27:50.136 A:middle
应用软件里的哪一个地方最适合

00:27:50.136 --> 00:27:51.126 A:middle
做那件事

00:27:52.766 --> 00:27:54.426 A:middle
然后我只需要检查一下

00:27:54.426 --> 00:27:55.816 A:middle
那种缓存的方式是否跨过了

00:27:55.816 --> 00:27:57.336 A:middle
某一界点使得

00:27:57.336 --> 00:27:58.306 A:middle
獾可以跳跃

00:27:59.676 --> 00:28:01.286 A:middle
记住这个界点

00:27:59.676 --> 00:28:01.286 A:middle
记住这个界点

00:28:01.336 --> 00:28:03.216 A:middle
是可以根据你 App 的特殊需求

00:28:03.216 --> 00:28:04.256 A:middle
来进行转变和调整的

00:28:08.316 --> 00:28:10.446 A:middle
接下来我们要看一下

00:28:10.446 --> 00:28:12.166 A:middle
第二个控制 在第二个控制中当我们

00:28:12.166 --> 00:28:13.746 A:middle
向下晃动设备时

00:28:13.746 --> 00:28:14.976 A:middle
獾会下蹲

00:28:16.386 --> 00:28:18.216 A:middle
对于这个控制 我们要测量的是

00:28:18.216 --> 00:28:20.996 A:middle
用户顺着重力矢量的

00:28:20.996 --> 00:28:22.136 A:middle
加速度

00:28:25.076 --> 00:28:26.636 A:middle
所以我们要看用户的

00:28:26.636 --> 00:28:29.116 A:middle
重力性能 这里

00:28:29.116 --> 00:28:31.526 A:middle
我们选择它是因为哪怕

00:28:31.526 --> 00:28:33.326 A:middle
设备稍微倾斜或

00:28:33.326 --> 00:28:35.166 A:middle
旋转一定角度 用户的

00:28:35.166 --> 00:28:36.536 A:middle
加速度还是

00:28:36.536 --> 00:28:38.436 A:middle
一样的 不管空间方位

00:28:38.436 --> 00:28:39.036 A:middle
如何变化

00:28:43.316 --> 00:28:45.546 A:middle
因此这又是一个

00:28:45.546 --> 00:28:47.126 A:middle
我们要在短时间内检测的

00:28:47.126 --> 00:28:48.446 A:middle
动作 我们也会

00:28:48.446 --> 00:28:49.706 A:middle
使用“推”机制

00:28:51.386 --> 00:28:52.546 A:middle
由于我们已经建立了

00:28:52.546 --> 00:28:54.576 A:middle
“推”机制 我们将会

00:28:54.576 --> 00:28:56.246 A:middle
返回我们的 motionHandler

00:28:56.246 --> 00:28:57.646 A:middle
在那里我们之前存储了那些

00:28:57.646 --> 00:28:58.496 A:middle
旋转率

00:28:59.006 --> 00:29:02.106 A:middle
但是这次 我们要将

00:28:59.006 --> 00:29:02.106 A:middle
但是这次 我们要将

00:29:02.106 --> 00:29:03.806 A:middle
重力性能排除在

00:29:03.806 --> 00:29:07.116 A:middle
DeviceMotion 目标外 以及

00:29:07.116 --> 00:29:08.146 A:middle
用户的加速度

00:29:08.686 --> 00:29:11.916 A:middle
我们计算

00:29:11.916 --> 00:29:13.716 A:middle
顺着重力矢量的用户加速度的值

00:29:13.716 --> 00:29:17.536 A:middle
将它存储在

00:29:17.536 --> 00:29:17.896 A:middle
一个缓冲器里

00:29:18.626 --> 00:29:21.306 A:middle
一旦缓冲方式

00:29:21.306 --> 00:29:22.666 A:middle
超过了某个界点

00:29:23.236 --> 00:29:24.696 A:middle
我们就会让獾

00:29:24.696 --> 00:29:27.366 A:middle
蹲在并且藏在手推车里

00:29:28.136 --> 00:29:29.826 A:middle
所以我们来看一眼这两个

00:29:29.826 --> 00:29:31.886 A:middle
控制 我们通过在这两个控制

00:29:31.886 --> 00:29:33.506 A:middle
来监测一小段时间内的动态

00:29:33.506 --> 00:29:35.266 A:middle
我们还为此使用了

00:29:35.266 --> 00:29:36.346 A:middle
“推”机制

00:29:37.216 --> 00:29:38.716 A:middle
让我们来看一下最后一个

00:29:38.766 --> 00:29:40.976 A:middle
控制 对于这个控制我们的要求

00:29:40.976 --> 00:29:43.816 A:middle
稍有不同

00:29:44.826 --> 00:29:48.046 A:middle
对于倾斜控制来说

00:29:48.046 --> 00:29:49.686 A:middle
举个简单的例子 当设备被

00:29:49.686 --> 00:29:52.976 A:middle
垂直拿着时

00:29:52.976 --> 00:29:54.206 A:middle
你可以将重力

00:29:54.206 --> 00:29:56.236 A:middle
矢量分割成 X 轴分量

00:29:56.236 --> 00:29:59.236 A:middle
和 Y 轴分量 通过运用

00:29:59.236 --> 00:30:00.816 A:middle
简单的三角学原理

00:29:59.236 --> 00:30:00.816 A:middle
简单的三角学原理

00:30:00.816 --> 00:30:01.646 A:middle
你可以达到倾斜

00:30:03.006 --> 00:30:05.086 A:middle
但是由于我们希望这个姿势

00:30:05.086 --> 00:30:06.476 A:middle
更加灵活

00:30:07.186 --> 00:30:08.636 A:middle
我们要将重力分成

00:30:08.636 --> 00:30:10.306 A:middle
Y 轴分量

00:30:10.306 --> 00:30:12.586 A:middle
以及在设备 X－Z 轴上的

00:30:12.586 --> 00:30:13.216 A:middle
分量

00:30:14.066 --> 00:30:15.386 A:middle
这样一来

00:30:15.386 --> 00:30:19.826 A:middle
哪怕设备稍微旋转了一定角度 我们也可以

00:30:19.826 --> 00:30:21.286 A:middle
倾斜手机

00:30:22.576 --> 00:30:23.856 A:middle
这个控制的不同之处在于

00:30:23.856 --> 00:30:25.326 A:middle
我们想要知道

00:30:25.766 --> 00:30:27.296 A:middle
设备的当前状态

00:30:27.366 --> 00:30:28.766 A:middle
而不是发生的

00:30:28.766 --> 00:30:29.156 A:middle
分离动态

00:30:30.536 --> 00:30:33.486 A:middle
这使我们可以让

00:30:33.486 --> 00:30:35.416 A:middle
獾根据设备的倾斜角度

00:30:35.416 --> 00:30:37.166 A:middle
倾斜同样的角度

00:30:37.166 --> 00:30:38.616 A:middle
并且提供非常灵敏的

00:30:38.616 --> 00:30:39.286 A:middle
操作体验

00:30:39.786 --> 00:30:42.416 A:middle
基于那些原因 我们将

00:30:42.416 --> 00:30:44.546 A:middle
为此控制使用

00:30:45.026 --> 00:30:47.076 A:middle
“拉”机制

00:30:47.146 --> 00:30:48.366 A:middle
由于我们已经建立了

00:30:48.366 --> 00:30:50.656 A:middle
“拉”机制

00:30:50.656 --> 00:30:51.996 A:middle
当我们要拉回

00:30:51.996 --> 00:30:54.396 A:middle
任何时间点的样本时

00:30:54.396 --> 00:30:54.716 A:middle
框架都是准备好的

00:30:56.716 --> 00:30:58.606 A:middle
所以我们要回到我们的渲染器

00:30:58.606 --> 00:30:59.226 A:middle
功能

00:30:59.456 --> 00:31:00.626 A:middle
回想一下 它会在

00:30:59.456 --> 00:31:00.626 A:middle
回想一下 它会在

00:31:00.626 --> 00:31:02.356 A:middle
你渲染一个新场景之前

00:31:02.356 --> 00:31:02.886 A:middle
被调用

00:31:03.616 --> 00:31:05.406 A:middle
这使得它成为了

00:31:05.406 --> 00:31:06.926 A:middle
我拉回最新样本的最佳

00:31:06.926 --> 00:31:09.076 A:middle
场所 也是计算和

00:31:09.076 --> 00:31:12.516 A:middle
更新图画的最佳场所

00:31:12.516 --> 00:31:13.756 A:middle
所以我们会向 MotionManager

00:31:13.756 --> 00:31:14.986 A:middle
请求最新的 DeviceMotion

00:31:14.986 --> 00:31:18.016 A:middle
样本 不考虑

00:31:18.016 --> 00:31:22.096 A:middle
重力性能 来计算出

00:31:22.096 --> 00:31:23.546 A:middle
矢量和 X-Z 轴的分量

00:31:23.976 --> 00:31:28.446 A:middle
以达到倾斜 也就是

00:31:28.446 --> 00:31:30.246 A:middle
X—Z 轴分量和

00:31:30.246 --> 00:31:31.056 A:middle
Y 轴分量的反正切函数

00:31:31.546 --> 00:31:34.686 A:middle
不要忘记

00:31:34.686 --> 00:31:36.176 A:middle
让框架知道你和

00:31:36.176 --> 00:31:37.076 A:middle
DeviceMotion 更新不再相关了

00:31:37.076 --> 00:31:39.106 A:middle
不再相关了

00:31:39.106 --> 00:31:40.186 A:middle
如果它之前是有效的话

00:31:41.266 --> 00:31:42.556 A:middle
这一点很棒

00:31:42.556 --> 00:31:44.166 A:middle
当你的游戏暂停或结束时

00:31:45.126 --> 00:31:46.786 A:middle
它可以确保你没有浪费

00:31:46.786 --> 00:31:47.856 A:middle
多余的电量

00:31:48.846 --> 00:31:50.246 A:middle
这里你可以看到一个结果

00:31:50.866 --> 00:31:52.426 A:middle
用户可以

00:31:52.426 --> 00:31:54.766 A:middle
通过将设备倾斜到一边

00:31:54.766 --> 00:31:57.326 A:middle
来使獾也以同样的方式倾斜

00:31:57.326 --> 00:32:00.036 A:middle
向他们的方向倾斜

00:31:57.326 --> 00:32:00.036 A:middle
向他们的方向倾斜

00:32:00.036 --> 00:32:01.436 A:middle
设备可以让

00:32:01.436 --> 00:32:05.936 A:middle
獾跳起来 最后

00:32:05.936 --> 00:32:07.086 A:middle
向下轻推设备

00:32:07.086 --> 00:32:08.446 A:middle
可以使獾

00:32:08.446 --> 00:32:10.026 A:middle
下蹲并躲在手推车里

00:32:10.496 --> 00:32:13.546 A:middle
这很酷 我们已经

00:32:13.606 --> 00:32:15.576 A:middle
通过滑动控制和使用

00:32:15.576 --> 00:32:17.926 A:middle
DeviceMotion 来取代

00:32:17.926 --> 00:32:18.856 A:middle
原本基于动态的控制

00:32:27.386 --> 00:32:29.126 A:middle
我很激动地想要看到

00:32:29.126 --> 00:32:30.636 A:middle
你们能将 DeviceMotion API 应用成什么样

00:32:35.516 --> 00:32:44.576 A:middle
[鼓掌]

00:32:45.076 --> 00:32:46.196 A:middle
所以来总结一下

00:32:46.196 --> 00:32:47.246 A:middle
我们今天讨论的几个关键点

00:32:47.306 --> 00:32:50.276 A:middle
我们希望你看一下

00:32:50.276 --> 00:32:52.356 A:middle
授权 API

00:32:52.356 --> 00:32:53.106 A:middle
并且检查一下你 App 的

00:32:53.106 --> 00:32:55.616 A:middle
授权 来看一下你使用的 API

00:32:55.616 --> 00:32:57.226 A:middle
是否灵敏

00:32:59.666 --> 00:33:00.986 A:middle
你也许有

00:32:59.666 --> 00:33:00.986 A:middle
你也许有

00:33:00.986 --> 00:33:02.926 A:middle
直接使用传感数据的用例

00:33:02.926 --> 00:33:05.166 A:middle
我们还是希望你

00:33:05.166 --> 00:33:07.626 A:middle
看一下 DeviceMotion API

00:33:08.016 --> 00:33:09.176 A:middle
因为我们的传感器混合

00:33:09.176 --> 00:33:10.916 A:middle
参数可以处理

00:33:10.916 --> 00:33:11.526 A:middle
绝大多数案例

00:33:11.936 --> 00:33:13.026 A:middle
它可以排除那些

00:33:13.026 --> 00:33:14.966 A:middle
环境因素

00:33:14.966 --> 00:33:17.126 A:middle
因此你可以专注在

00:33:17.126 --> 00:33:18.496 A:middle
用户的动态控制上

00:33:20.546 --> 00:33:23.346 A:middle
API 为你提供了一个流畅

00:33:23.346 --> 00:33:24.936 A:middle
且连贯的体验

00:33:24.936 --> 00:33:26.826 A:middle
在所有我们支持的设备上都是如此

00:33:28.056 --> 00:33:29.806 A:middle
我们本次发布还做了一些改进

00:33:29.806 --> 00:33:31.566 A:middle
来确保

00:33:31.566 --> 00:33:33.136 A:middle
当你询问更新时

00:33:33.136 --> 00:33:33.896 A:middle
可以通过一种

00:33:33.896 --> 00:33:34.796 A:middle
低能耗的方式

00:33:34.796 --> 00:33:40.566 A:middle
记住两种不同

00:33:41.076 --> 00:33:43.466 A:middle
询问更新的方式

00:33:43.466 --> 00:33:45.226 A:middle
当你想要捕捉

00:33:45.226 --> 00:33:46.846 A:middle
很短时间内的一个姿势时使用“推”

00:33:46.916 --> 00:33:49.786 A:middle
当灵敏性很重要且你

00:33:51.816 --> 00:33:52.756 A:middle
想要知道设备的

00:33:52.756 --> 00:33:57.436 A:middle
当前状态时用“拉”

00:33:58.116 --> 00:33:59.196 A:middle
还有一些会议

00:33:59.196 --> 00:34:00.356 A:middle
我们觉得你们可能会

00:33:59.196 --> 00:34:00.356 A:middle
我们觉得你们可能会

00:34:00.356 --> 00:34:01.196 A:middle
感兴趣

00:34:02.256 --> 00:34:04.436 A:middle
请关注它们

00:34:04.436 --> 00:34:05.366 A:middle
如果你有兴趣

00:34:05.366 --> 00:34:06.796 A:middle
了解更多关于 Badger App 的内容

00:34:06.796 --> 00:34:07.826 A:middle
请查看去年的 SceneKit

00:34:07.826 --> 00:34:08.246 A:middle
会议

00:34:09.676 --> 00:34:11.085 A:middle
在这个链接中

00:34:11.085 --> 00:34:13.446 A:middle
你可以获得样本

00:34:13.446 --> 00:34:14.496 A:middle
代码 以及其他有关 Core Motion

00:34:14.496 --> 00:34:15.286 A:middle
的文件

00:34:15.815 --> 00:34:19.476 A:middle
感谢大家今天的出席

00:34:19.476 --> 00:34:20.596 A:middle
祝大家度过一个美好的夜晚
