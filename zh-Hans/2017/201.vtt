WEBVTT

00:00:29.056 --> 00:00:30.276 A:middle
&gt;&gt; 早上好 欢迎了解

00:00:30.276 --> 00:00:31.546 A:middle
Cocoa Touch 新功能介绍

00:00:31.936 --> 00:00:33.476 A:middle
我是 Eliza

00:00:33.476 --> 00:00:34.826 A:middle
等一下 Josh Shaffer 也会上台

00:00:35.136 --> 00:00:35.376 A:middle
一起为大家讲解

00:00:35.806 --> 00:00:38.046 A:middle
今天 我们准备

00:00:38.046 --> 00:00:39.446 A:middle
给大家介绍一大批

00:00:39.446 --> 00:00:39.996 A:middle
新的 API

00:00:41.046 --> 00:00:42.346 A:middle
首先 我们想为大家介绍一些

00:00:42.346 --> 00:00:44.456 A:middle
在 iPad 和 iPhone 上使用的

00:00:44.456 --> 00:00:46.306 A:middle
全新的生产力 API

00:00:48.096 --> 00:00:50.726 A:middle
然后 我们会向大家展示

00:00:50.726 --> 00:00:52.346 A:middle
在这些设备上的用户界面上

00:00:52.346 --> 00:00:53.646 A:middle
所做的改良

00:00:53.646 --> 00:00:55.066 A:middle
我们还会讲解要如何

00:00:55.066 --> 00:00:56.156 A:middle
把这些效果应用到

00:00:56.156 --> 00:00:56.786 A:middle
你们的 App 上面

00:00:57.776 --> 00:00:59.156 A:middle
最后 我们还要介绍

00:00:59.156 --> 00:01:00.986 A:middle
针对 Cocoa Touch 上

00:00:59.156 --> 00:01:00.986 A:middle
针对 Cocoa Touch 上

00:01:00.986 --> 00:01:03.176 A:middle
已有的 API 的一系列

00:01:03.306 --> 00:01:04.646 A:middle
新增与升级

00:01:05.325 --> 00:01:09.306 A:middle
iOS 中最重要的

00:01:09.366 --> 00:01:12.976 A:middle
生产力 API

00:01:12.976 --> 00:01:14.466 A:middle
大家在主旨演讲中已经听过了

00:01:14.466 --> 00:01:15.176 A:middle
那就是拖拽与放置

00:01:15.766 --> 00:01:17.506 A:middle
这是一个非常强大的

00:01:17.506 --> 00:01:17.736 A:middle
API

00:01:17.736 --> 00:01:19.746 A:middle
下面这个视频

00:01:19.746 --> 00:01:24.566 A:middle
就展示了它的一些功能

00:01:24.836 --> 00:01:26.756 A:middle
我可以选择一个东西

00:01:26.756 --> 00:01:27.286 A:middle
把它拖来拖去

00:01:27.286 --> 00:01:28.756 A:middle
我可以通过轻轻点击来

00:01:28.756 --> 00:01:29.706 A:middle
为拖拽添加目标

00:01:30.056 --> 00:01:31.466 A:middle
在我进行拖拽动作的同时

00:01:31.466 --> 00:01:32.986 A:middle
系统仍然保持互动

00:01:32.986 --> 00:01:34.826 A:middle
我甚至可以

00:01:34.826 --> 00:01:35.986 A:middle
在不同应用之间

00:01:35.986 --> 00:01:36.626 A:middle
拖拽数据

00:01:37.216 --> 00:01:39.076 A:middle
我们很期待大家

00:01:39.076 --> 00:01:41.256 A:middle
能够在你们的 App 中

00:01:41.256 --> 00:01:41.976 A:middle
使用这项功能

00:01:42.236 --> 00:01:44.546 A:middle
本周还有至少

00:01:44.656 --> 00:01:46.536 A:middle
4 次演讲

00:01:46.836 --> 00:01:48.126 A:middle
为大家详细介绍这一功能

00:01:48.966 --> 00:01:50.226 A:middle
现在 我要为大家

00:01:50.226 --> 00:01:51.946 A:middle
做一个非常简短的介绍

00:01:51.946 --> 00:01:54.136 A:middle
介绍这个 API 的一些

00:01:54.136 --> 00:01:56.196 A:middle
关键功能

00:01:56.196 --> 00:01:57.676 A:middle
首先 是在 App 中启用

00:01:57.676 --> 00:01:58.176 A:middle
拖拽功能

00:01:58.726 --> 00:02:00.396 A:middle
假如你有一个定制的 view

00:01:58.726 --> 00:02:00.396 A:middle
假如你有一个定制的 view

00:02:00.396 --> 00:02:03.356 A:middle
下面又有很多 sub-view

00:02:03.356 --> 00:02:04.926 A:middle
比如像小图标一样的 view

00:02:04.926 --> 00:02:06.706 A:middle
你想让它们变得可拖拽

00:02:07.766 --> 00:02:09.976 A:middle
那么你就要建立一个

00:02:09.976 --> 00:02:11.696 A:middle
UIDragInteraction

00:02:11.746 --> 00:02:13.386 A:middle
这是 UI 交互下面的一个子类

00:02:13.776 --> 00:02:16.076 A:middle
然后再把它附加到

00:02:16.076 --> 00:02:17.596 A:middle
你希望能允许用户拖拽的

00:02:17.596 --> 00:02:18.036 A:middle
View 上面

00:02:19.606 --> 00:02:22.456 A:middle
现在 一个 UI 交互

00:02:22.456 --> 00:02:23.906 A:middle
就像一个动作识别器

00:02:24.596 --> 00:02:26.326 A:middle
建立一个 UI 交互 为它设定一个委托

00:02:26.326 --> 00:02:28.156 A:middle
把它附加到一个 view 上

00:02:28.156 --> 00:02:29.736 A:middle
剩下的事情就可以交给系统

00:02:29.736 --> 00:02:30.156 A:middle
去完成了

00:02:30.726 --> 00:02:31.936 A:middle
你的委托会被

00:02:32.156 --> 00:02:33.566 A:middle
唤起以提供信息

00:02:34.616 --> 00:02:36.836 A:middle
使用起来真的很简单

00:02:37.076 --> 00:02:40.596 A:middle
我们可以生成一个

00:02:40.596 --> 00:02:43.056 A:middle
拖拽交互目标

00:02:43.056 --> 00:02:44.696 A:middle
让自己成为委托

00:02:44.696 --> 00:02:45.196 A:middle
把它附加到这个 view 上

00:02:45.196 --> 00:02:46.596 A:middle
我们还可以

00:02:46.886 --> 00:02:48.106 A:middle
在其他可拖拽的 view 上

00:02:48.106 --> 00:02:48.796 A:middle
重复同样的事

00:02:49.906 --> 00:02:50.806 A:middle
现在

00:02:50.806 --> 00:02:52.886 A:middle
UIDragInteractionDelegate

00:02:53.056 --> 00:02:55.216 A:middle
协议给了你无数的

00:02:55.216 --> 00:02:57.196 A:middle
机会去利用拖拽

00:02:57.236 --> 00:02:58.306 A:middle
定制功能

00:02:58.716 --> 00:03:00.146 A:middle
你一定不要忘了

00:02:58.716 --> 00:03:00.146 A:middle
你一定不要忘了

00:03:00.236 --> 00:03:02.256 A:middle
最重要的事

00:03:02.716 --> 00:03:03.776 A:middle
要给被拖拽的目标

00:03:03.776 --> 00:03:04.156 A:middle
提供数据

00:03:04.536 --> 00:03:05.386 A:middle
除了这件事

00:03:05.386 --> 00:03:06.316 A:middle
其他的全取决于你

00:03:06.316 --> 00:03:08.016 A:middle
你可以直接使用系统默认设置

00:03:08.016 --> 00:03:09.966 A:middle
或者你可以定制

00:03:09.966 --> 00:03:11.296 A:middle
关于拖拽的一切

00:03:11.296 --> 00:03:11.586 A:middle
方面

00:03:11.586 --> 00:03:13.066 A:middle
比如抬升的动画

00:03:13.066 --> 00:03:16.036 A:middle
比如预览 你还可以随着触控光标在

00:03:16.036 --> 00:03:17.806 A:middle
屏幕上移动的时候得到回调

00:03:17.806 --> 00:03:19.586 A:middle
并对其进行

00:03:19.586 --> 00:03:20.056 A:middle
回应

00:03:20.586 --> 00:03:23.096 A:middle
根据你的应用需求

00:03:23.096 --> 00:03:24.066 A:middle
可以灵活调整

00:03:25.476 --> 00:03:27.036 A:middle
显然 拖拽放置的

00:03:27.036 --> 00:03:28.586 A:middle
另一个重要部分

00:03:28.586 --> 00:03:29.386 A:middle
就是放置

00:03:29.776 --> 00:03:32.016 A:middle
启动这个功能 你需要

00:03:32.016 --> 00:03:33.786 A:middle
一个新型的 UI 交互

00:03:33.786 --> 00:03:35.666 A:middle
也就是 UIDropInteraction

00:03:36.206 --> 00:03:39.346 A:middle
你不要把这个交互附加到

00:03:39.346 --> 00:03:40.716 A:middle
各个可拖拽的 view 上 而是要

00:03:40.716 --> 00:03:42.246 A:middle
附加到 super view 上 也就是

00:03:42.486 --> 00:03:43.986 A:middle
准备接受放置的

00:03:43.986 --> 00:03:44.466 A:middle
容器上

00:03:46.936 --> 00:03:48.586 A:middle
你需要再次设置一个委托

00:03:48.586 --> 00:03:50.626 A:middle
同样地 这个委托

00:03:50.666 --> 00:03:53.516 A:middle
也可以进行各种各样的

00:03:53.516 --> 00:03:54.896 A:middle
定制

00:03:55.976 --> 00:03:57.596 A:middle
你可以更新 UI

00:03:57.596 --> 00:03:58.886 A:middle
在拖拽中  清理一些其他

00:03:58.886 --> 00:04:00.636 A:middle
碍事的项目

00:03:58.886 --> 00:04:00.636 A:middle
碍事的项目

00:04:00.946 --> 00:04:02.226 A:middle
或者用视觉化方式显示

00:04:02.226 --> 00:04:03.966 A:middle
放置的目的地

00:04:03.966 --> 00:04:05.246 A:middle
或者显示 如果用户放置了

00:04:05.246 --> 00:04:06.276 A:middle
会发生什么

00:04:06.506 --> 00:04:08.056 A:middle
进行放置时

00:04:08.056 --> 00:04:10.006 A:middle
你会收到数据

00:04:10.006 --> 00:04:11.436 A:middle
然后作为回应 你可以

00:04:11.436 --> 00:04:11.936 A:middle
更新你的模型

00:04:12.746 --> 00:04:13.956 A:middle
然后 你可以定制

00:04:13.956 --> 00:04:15.046 A:middle
这个动画的

00:04:15.046 --> 00:04:15.536 A:middle
方方面面

00:04:15.536 --> 00:04:16.826 A:middle
你可以定制预览

00:04:16.826 --> 00:04:18.315 A:middle
放置过程中

00:04:18.315 --> 00:04:19.685 A:middle
和放置动画本身

00:04:19.685 --> 00:04:20.516 A:middle
真的很好用

00:04:21.786 --> 00:04:23.446 A:middle
我们十分期待看到

00:04:23.446 --> 00:04:25.406 A:middle
你们利用这个功能

00:04:25.406 --> 00:04:26.456 A:middle
大显身手

00:04:26.656 --> 00:04:27.716 A:middle
为了让启动过程

00:04:27.716 --> 00:04:29.376 A:middle
更加简单 系统还为

00:04:29.376 --> 00:04:32.416 A:middle
很多现有的类

00:04:32.416 --> 00:04:33.766 A:middle
提供内置支持

00:04:33.766 --> 00:04:34.996 A:middle
也许就有你正在用的

00:04:35.336 --> 00:04:36.556 A:middle
因此 要把这个功能用在

00:04:36.586 --> 00:04:38.186 A:middle
TableView CollectionView

00:04:38.186 --> 00:04:39.666 A:middle
和各种 Text 和 Web view 上面

00:04:40.166 --> 00:04:41.606 A:middle
其实需要你额外再去做的事

00:04:41.796 --> 00:04:42.736 A:middle
就很少了

00:04:44.176 --> 00:04:45.486 A:middle
这个系统上另一项

00:04:45.486 --> 00:04:46.736 A:middle
实用的整合

00:04:46.736 --> 00:04:48.156 A:middle
就是使用 UIPasteConfiguration.

00:04:48.736 --> 00:04:50.986 A:middle
如果你的应用

00:04:51.266 --> 00:04:52.946 A:middle
已经具有复制粘贴操作中的

00:04:52.946 --> 00:04:54.266 A:middle
粘贴功能

00:04:54.546 --> 00:04:56.346 A:middle
那么你就不需要

00:04:56.756 --> 00:04:58.506 A:middle
再做额外工作

00:04:58.506 --> 00:05:00.526 A:middle
去让同一个 view 变成

00:04:58.506 --> 00:05:00.526 A:middle
去让同一个 view 变成

00:05:00.526 --> 00:05:00.786 A:middle
放置的目标了

00:05:01.706 --> 00:05:05.456 A:middle
这些就是关于拖拽放置

00:05:05.456 --> 00:05:06.016 A:middle
的四场演讲

00:05:06.236 --> 00:05:07.276 A:middle
第一场是

00:05:07.276 --> 00:05:08.286 A:middle
介绍拖拽与放置

00:05:08.476 --> 00:05:09.776 A:middle
就在这里 这场演讲完

00:05:09.816 --> 00:05:10.136 A:middle
就开始

00:05:10.136 --> 00:05:11.256 A:middle
因此 我们十分希望你们能留下

00:05:11.256 --> 00:05:11.786 A:middle
看这场演讲

00:05:12.986 --> 00:05:14.486 A:middle
明天的演讲是 熟练操作

00:05:14.486 --> 00:05:14.876 A:middle
拖拽与放置

00:05:15.206 --> 00:05:16.256 A:middle
然后 有一整场演讲

00:05:16.306 --> 00:05:18.096 A:middle
用来介绍如何

00:05:18.096 --> 00:05:19.216 A:middle
把拖拽放置应用到

00:05:19.216 --> 00:05:20.156 A:middle
表格和集合 view 上

00:05:20.386 --> 00:05:22.076 A:middle
还有一场重要演讲

00:05:22.146 --> 00:05:24.756 A:middle
介绍用拖拽和放置

00:05:24.756 --> 00:05:26.846 A:middle
操作数据的

00:05:26.846 --> 00:05:27.336 A:middle
各种方式

00:05:27.576 --> 00:05:28.806 A:middle
大家可以做的事情

00:05:28.806 --> 00:05:29.706 A:middle
真的非常多

00:05:29.706 --> 00:05:30.196 A:middle
非常好用

00:05:30.196 --> 00:05:31.026 A:middle
我们希望你们也能去听听

00:05:31.066 --> 00:05:31.646 A:middle
那些讲座

00:05:31.646 --> 00:05:33.386 A:middle
好的

00:05:33.546 --> 00:05:35.306 A:middle
我们对于 iPad 和 iPhone

00:05:35.346 --> 00:05:36.986 A:middle
生产力的提高

00:05:36.986 --> 00:05:38.876 A:middle
做的另一项工作

00:05:38.876 --> 00:05:39.366 A:middle
就是文件管理

00:05:40.566 --> 00:05:42.096 A:middle
下面我们就介绍这个很棒的

00:05:42.096 --> 00:05:44.086 A:middle
View 控制功能 能够让

00:05:44.086 --> 00:05:46.006 A:middle
用户在你们的 App 中

00:05:46.356 --> 00:05:47.726 A:middle
浏览文件

00:05:47.726 --> 00:05:49.196 A:middle
这不但能让他们

00:05:49.196 --> 00:05:51.206 A:middle
浏览 App 文件夹里的

00:05:51.206 --> 00:05:52.786 A:middle
本地文件

00:05:52.786 --> 00:05:54.346 A:middle
还能够浏览存储在

00:05:54.346 --> 00:05:56.736 A:middle
iCloud Drive 上的云文件

00:05:56.736 --> 00:05:58.256 A:middle
还能够参与到第三方的

00:05:58.256 --> 00:05:59.446 A:middle
云存储服务

00:06:00.156 --> 00:06:03.926 A:middle
要做到这一点

00:06:03.926 --> 00:06:06.136 A:middle
这个类叫做

00:06:06.136 --> 00:06:08.196 A:middle
UIDocumentBrowserViewController

00:06:08.826 --> 00:06:11.206 A:middle
你需要把它传入

00:06:11.206 --> 00:06:13.226 A:middle
你的 App 能够处理的

00:06:13.226 --> 00:06:14.556 A:middle
文件类型的数组中

00:06:14.916 --> 00:06:16.246 A:middle
这样一来 用户就不能

00:06:16.246 --> 00:06:18.236 A:middle
用这个 API 打开

00:06:18.396 --> 00:06:19.186 A:middle
你的 App 所无法处理的

00:06:19.186 --> 00:06:19.366 A:middle
文件了

00:06:20.006 --> 00:06:22.776 A:middle
实际上 这个类也是

00:06:22.776 --> 00:06:23.506 A:middle
可定制的

00:06:24.266 --> 00:06:25.696 A:middle
其外表可以变化成

00:06:25.696 --> 00:06:26.566 A:middle
不同形式

00:06:26.756 --> 00:06:27.936 A:middle
你也可以设置

00:06:27.936 --> 00:06:30.076 A:middle
让用户在浏览文件并选择时

00:06:30.076 --> 00:06:31.276 A:middle
出现不同的

00:06:31.276 --> 00:06:31.896 A:middle
呈现效果

00:06:32.436 --> 00:06:35.546 A:middle
我刚刚说过 这个功能

00:06:35.546 --> 00:06:37.296 A:middle
能让你浏览本地文件

00:06:37.426 --> 00:06:38.776 A:middle
也可以浏览云存储中的

00:06:38.776 --> 00:06:38.926 A:middle
文件

00:06:38.986 --> 00:06:40.756 A:middle
这就带来了一个

00:06:40.806 --> 00:06:42.526 A:middle
重要的警告

00:06:42.526 --> 00:06:43.686 A:middle
需要牢记

00:06:43.996 --> 00:06:45.696 A:middle
也就是你不再能够

00:06:45.836 --> 00:06:48.736 A:middle
指望你的 App

00:06:48.736 --> 00:06:50.166 A:middle
是在某个时间访问某个特定文件的

00:06:50.166 --> 00:06:51.866 A:middle
唯一的 App 了

00:06:52.256 --> 00:06:53.766 A:middle
因此 要协调文件入口

00:06:53.766 --> 00:06:55.686 A:middle
和你正在使用这个类访问的

00:06:55.686 --> 00:06:57.066 A:middle
文件 这就非常重要了

00:06:58.106 --> 00:07:00.146 A:middle
要做到这一点

00:06:58.106 --> 00:07:00.146 A:middle
要做到这一点

00:07:00.146 --> 00:07:02.716 A:middle
你可以直接使用 NSFileCoordinator

00:07:02.916 --> 00:07:04.526 A:middle
或者把 UI 文件向下分类

00:07:05.316 --> 00:07:06.586 A:middle
这可以为你提供很多

00:07:06.586 --> 00:07:07.876 A:middle
协调手段

00:07:09.246 --> 00:07:11.236 A:middle
想了解关于这个类

00:07:11.406 --> 00:07:13.136 A:middle
以及其他文件相关主题的更多信息

00:07:13.476 --> 00:07:15.576 A:middle
请在周四参与这个

00:07:15.846 --> 00:07:16.286 A:middle
讲座

00:07:17.186 --> 00:07:18.946 A:middle
下面我想请

00:07:18.946 --> 00:07:21.156 A:middle
Josh 上台 为我们讲讲

00:07:21.156 --> 00:07:22.536 A:middle
iOS 11 中的一些 UI 的

00:07:22.836 --> 00:07:23.976 A:middle
改良

00:07:24.516 --> 00:07:29.086 A:middle
［掌声］

00:07:29.586 --> 00:07:29.936 A:middle
&gt;&gt;好的

00:07:29.936 --> 00:07:30.576 A:middle
谢谢 Eliza

00:07:31.266 --> 00:07:33.016 A:middle
在 iOS 11 中

00:07:33.016 --> 00:07:34.016 A:middle
对于生产力 API 的增强

00:07:34.016 --> 00:07:35.766 A:middle
真的很了不起

00:07:35.846 --> 00:07:37.376 A:middle
但我们也有很多对于

00:07:37.376 --> 00:07:39.056 A:middle
UI 的增强

00:07:39.056 --> 00:07:40.246 A:middle
我想在此介绍一部分

00:07:40.246 --> 00:07:41.806 A:middle
首先就是最引人注目的

00:07:41.806 --> 00:07:43.076 A:middle
也就是在导航栏的顶部

00:07:43.076 --> 00:07:45.166 A:middle
那个新的巨大的

00:07:45.166 --> 00:07:46.116 A:middle
标题

00:07:46.986 --> 00:07:48.146 A:middle
这是最引人注目的变化

00:07:48.146 --> 00:07:49.256 A:middle
你可能在开始使用 iOS 11 时

00:07:49.256 --> 00:07:50.446 A:middle
立即就会注意到

00:07:50.446 --> 00:07:51.866 A:middle
这一点

00:07:52.816 --> 00:07:53.886 A:middle
包括这个新的巨大的

00:07:53.886 --> 00:07:55.176 A:middle
显示在顶部的

00:07:55.176 --> 00:07:55.756 A:middle
标题

00:07:55.916 --> 00:07:57.696 A:middle
还有新的 集成的

00:07:57.696 --> 00:07:59.356 A:middle
整合在搜索栏中的

00:07:59.356 --> 00:08:00.026 A:middle
搜索功能

00:07:59.356 --> 00:08:00.026 A:middle
搜索功能

00:08:00.946 --> 00:08:02.056 A:middle
这样一来 你的内容在

00:08:02.056 --> 00:08:03.506 A:middle
滚动到顶部时

00:08:03.506 --> 00:08:04.576 A:middle
你就能轻而一举地

00:08:04.576 --> 00:08:05.946 A:middle
看到大标题

00:08:05.946 --> 00:08:07.216 A:middle
知道自己在哪里

00:08:07.216 --> 00:08:08.926 A:middle
也很容易进入

00:08:08.926 --> 00:08:09.206 A:middle
搜索栏

00:08:09.206 --> 00:08:10.376 A:middle
因为这个部分

00:08:10.376 --> 00:08:11.726 A:middle
被拉低了一些

00:08:11.726 --> 00:08:13.956 A:middle
以前它的位置

00:08:14.696 --> 00:08:14.836 A:middle
要更高

00:08:15.006 --> 00:08:16.736 A:middle
但是 为了留出足够空间

00:08:16.736 --> 00:08:18.016 A:middle
显示你的实际内容

00:08:18.016 --> 00:08:20.006 A:middle
当你开始向下滚动

00:08:20.046 --> 00:08:21.666 A:middle
搜索栏和标题

00:08:21.666 --> 00:08:23.626 A:middle
都会消失 下面的空间

00:08:23.666 --> 00:08:25.276 A:middle
就会变大

00:08:25.276 --> 00:08:26.536 A:middle
这样一来你就能看到

00:08:26.536 --> 00:08:27.046 A:middle
尽可能多的内容

00:08:27.736 --> 00:08:29.206 A:middle
首先

00:08:29.206 --> 00:08:30.186 A:middle
搜索栏会消失

00:08:30.186 --> 00:08:31.826 A:middle
然后大标题

00:08:31.866 --> 00:08:33.326 A:middle
也会滚到上面去

00:08:33.326 --> 00:08:34.416 A:middle
这时你所看到的

00:08:34.416 --> 00:08:35.416 A:middle
就会和你在 iOS 11 之前的见到的

00:08:35.416 --> 00:08:37.216 A:middle
非常相似

00:08:38.376 --> 00:08:40.285 A:middle
现在 UINavigationController 可以

00:08:40.285 --> 00:08:42.176 A:middle
在你当下的视图控制中

00:08:42.176 --> 00:08:43.736 A:middle
自动找到

00:08:44.006 --> 00:08:45.336 A:middle
滚动视图中

00:08:45.336 --> 00:08:46.046 A:middle
最主要的内容

00:08:46.396 --> 00:08:48.146 A:middle
并跟踪它偏移量

00:08:48.146 --> 00:08:49.236 A:middle
确保它可以按你的意思

00:08:49.236 --> 00:08:49.506 A:middle
来做这件事

00:08:50.316 --> 00:08:51.316 A:middle
因此 在大多数情况下

00:08:51.316 --> 00:08:52.676 A:middle
你需要为了实现这个功能

00:08:52.676 --> 00:08:53.946 A:middle
而去做的事情

00:08:54.976 --> 00:08:56.786 A:middle
其实并不多

00:08:56.996 --> 00:08:58.366 A:middle
实现上述所有功能

00:08:58.366 --> 00:08:59.666 A:middle
其实很简单

00:09:00.126 --> 00:09:01.396 A:middle
在 UINavigationBar 中

00:09:01.396 --> 00:09:02.956 A:middle
有一个新属性

00:09:02.956 --> 00:09:04.026 A:middle
叫做 prefersLargeTitle

00:09:04.026 --> 00:09:05.556 A:middle
如果在这项中选择 yes

00:09:06.186 --> 00:09:07.016 A:middle
就会有大号

00:09:07.016 --> 00:09:08.246 A:middle
标题的显示

00:09:08.246 --> 00:09:09.466 A:middle
NavigationController

00:09:09.466 --> 00:09:10.786 A:middle
就会自动展开追踪

00:09:10.786 --> 00:09:11.666 A:middle
就像我们刚才说过的那样

00:09:11.666 --> 00:09:13.116 A:middle
找到你的滚动视图

00:09:13.326 --> 00:09:14.616 A:middle
追踪偏移量

00:09:14.616 --> 00:09:15.426 A:middle
控制缩放

00:09:16.036 --> 00:09:18.606 A:middle
接下来 第二件事就是

00:09:18.606 --> 00:09:20.256 A:middle
UINavigationItem 中的新属性

00:09:20.776 --> 00:09:22.016 A:middle
这会让你在导航层级的

00:09:22.016 --> 00:09:23.256 A:middle
每一个层级中

00:09:23.256 --> 00:09:24.516 A:middle
能够控制

00:09:24.516 --> 00:09:25.636 A:middle
大标题的外观

00:09:26.216 --> 00:09:27.736 A:middle
在你把视图控制器放在 Navstack 上时

00:09:27.786 --> 00:09:28.976 A:middle
并不是每一个层级

00:09:28.976 --> 00:09:30.396 A:middle
都需要显示

00:09:30.396 --> 00:09:31.106 A:middle
大标题

00:09:31.536 --> 00:09:32.966 A:middle
实际上 很多都不需要

00:09:32.966 --> 00:09:34.526 A:middle
因此你可以使用这个导航属性

00:09:34.526 --> 00:09:36.176 A:middle
控制每一个层级

00:09:36.176 --> 00:09:37.726 A:middle
是否需要大标题

00:09:37.776 --> 00:09:39.796 A:middle
还是需要以前那种

00:09:39.986 --> 00:09:41.246 A:middle
传统的更小的标题

00:09:41.306 --> 00:09:43.526 A:middle
在什么时候出现哪一种

00:09:43.716 --> 00:09:44.956 A:middle
使用 searchController

00:09:44.956 --> 00:09:46.316 A:middle
外观也非常非常容易

00:09:46.646 --> 00:09:47.556 A:middle
你可以使用这个新的

00:09:47.556 --> 00:09:49.056 A:middle
searchController 属性

00:09:49.326 --> 00:09:51.166 A:middle
来获得新的外观

00:09:51.166 --> 00:09:52.326 A:middle
以及所有新的行为

00:09:52.736 --> 00:09:53.976 A:middle
在过去

00:09:53.976 --> 00:09:54.786 A:middle
你可能需要把导航栏

00:09:54.786 --> 00:09:56.716 A:middle
作为内容的一部分

00:09:56.716 --> 00:09:57.796 A:middle
也许你需要

00:09:57.796 --> 00:09:59.496 A:middle
把它做成你的

00:09:59.496 --> 00:10:00.236 A:middle
UITableView 的

00:09:59.496 --> 00:10:00.236 A:middle
UITableView 的

00:10:00.236 --> 00:10:00.976 A:middle
顶部视图

00:10:01.576 --> 00:10:02.596 A:middle
现在不需要了

00:10:02.736 --> 00:10:03.786 A:middle
因为新的外观看起来

00:10:03.786 --> 00:10:05.476 A:middle
就好像是导航栏的一部分

00:10:05.476 --> 00:10:06.616 A:middle
你可以使用这个属性

00:10:06.756 --> 00:10:07.426 A:middle
就能够获得所有的

00:10:07.426 --> 00:10:08.056 A:middle
行为了

00:10:09.376 --> 00:10:12.356 A:middle
一般来说

00:10:12.356 --> 00:10:13.856 A:middle
只有在导航层级的

00:10:13.856 --> 00:10:15.136 A:middle
第一层才会用到

00:10:15.136 --> 00:10:16.196 A:middle
大标题

00:10:16.646 --> 00:10:18.156 A:middle
在设计 App 指南中

00:10:18.156 --> 00:10:20.386 A:middle
一般都会这样讲

00:10:20.426 --> 00:10:21.426 A:middle
这样使用大标题

00:10:22.196 --> 00:10:23.866 A:middle
然后 推向第二层视图

00:10:23.866 --> 00:10:25.806 A:middle
并继续向下导航

00:10:25.806 --> 00:10:27.546 A:middle
你往往会使用

00:10:27.546 --> 00:10:28.826 A:middle
更小的字体

00:10:29.636 --> 00:10:30.736 A:middle
这是设计的良好开端

00:10:30.736 --> 00:10:32.216 A:middle
但正如我们之前提到的

00:10:32.216 --> 00:10:33.726 A:middle
一切全凭你通过 API 控制

00:10:33.726 --> 00:10:35.626 A:middle
因此你可以

00:10:35.626 --> 00:10:36.756 A:middle
为你的 App 选择你认为合适的

00:10:36.886 --> 00:10:36.966 A:middle
显示方式

00:10:36.966 --> 00:10:38.396 A:middle
实际上 如果你看一看

00:10:38.396 --> 00:10:39.596 A:middle
我们的设计 你会发现

00:10:39.596 --> 00:10:41.006 A:middle
比如电子邮件

00:10:41.006 --> 00:10:42.366 A:middle
就在前两个层级

00:10:42.366 --> 00:10:42.746 A:middle
使用了大标题

00:10:43.306 --> 00:10:45.896 A:middle
你可能还注意到了

00:10:45.896 --> 00:10:47.086 A:middle
刷新控制现在

00:10:47.116 --> 00:10:48.896 A:middle
也整合到了这个新的 单一的

00:10:48.896 --> 00:10:49.566 A:middle
大标题下面

00:10:50.166 --> 00:10:51.546 A:middle
如果你在 App 中使用

00:10:51.546 --> 00:10:52.996 A:middle
UI 刷新控制

00:10:52.996 --> 00:10:54.506 A:middle
以达到下拉刷新效果

00:10:54.506 --> 00:10:55.226 A:middle
这一点现在就会

00:10:55.226 --> 00:10:55.946 A:middle
自动进行了

00:10:56.016 --> 00:10:57.066 A:middle
因此你也就不需要

00:10:57.066 --> 00:10:58.226 A:middle
付出额外劳动

00:10:58.286 --> 00:11:02.066 A:middle
去做导航栏的视觉整合工作了

00:10:58.286 --> 00:11:02.066 A:middle
去做导航栏的视觉整合工作了

00:11:02.686 --> 00:11:03.816 A:middle
关于这些大标题

00:11:03.816 --> 00:11:05.246 A:middle
和搜索栏 重要的一点是

00:11:05.246 --> 00:11:06.766 A:middle
他们实际上是

00:11:06.846 --> 00:11:08.526 A:middle
导航栏的一部分

00:11:08.526 --> 00:11:09.766 A:middle
而不是内容视图的一部分

00:11:11.056 --> 00:11:12.536 A:middle
这样一来 导航栏本身

00:11:12.536 --> 00:11:13.886 A:middle
就会比之前

00:11:13.946 --> 00:11:15.126 A:middle
你所习惯的

00:11:15.126 --> 00:11:16.586 A:middle
iOS 版本

00:11:16.586 --> 00:11:17.536 A:middle
要高一些

00:11:18.006 --> 00:11:19.276 A:middle
实际上 现在它的高度在

00:11:19.356 --> 00:11:20.926 A:middle
内容滚动时会变化

00:11:22.666 --> 00:11:23.906 A:middle
如你所见

00:11:23.906 --> 00:11:24.646 A:middle
大标题出现的时候

00:11:24.646 --> 00:11:25.046 A:middle
它就大一点

00:11:25.136 --> 00:11:27.406 A:middle
而当用户向上滚动

00:11:27.576 --> 00:11:28.756 A:middle
大标题消失后

00:11:28.786 --> 00:11:30.036 A:middle
导航栏的高度就会变得

00:11:30.036 --> 00:11:32.126 A:middle
更像以前

00:11:32.126 --> 00:11:33.096 A:middle
大家所习惯的那样

00:11:33.986 --> 00:11:34.866 A:middle
你可能会觉得

00:11:34.866 --> 00:11:35.916 A:middle
担心这一功能

00:11:35.916 --> 00:11:36.926 A:middle
会很复杂

00:11:37.426 --> 00:11:38.486 A:middle
但我们的团队

00:11:38.486 --> 00:11:39.726 A:middle
十分努力地工作

00:11:39.726 --> 00:11:41.356 A:middle
确保这一点尽可能地简单

00:11:41.356 --> 00:11:42.376 A:middle
在你的 App 中得以实现

00:11:42.536 --> 00:11:43.616 A:middle
在大多数情况下

00:11:43.656 --> 00:11:44.406 A:middle
这一点实际上是

00:11:44.406 --> 00:11:45.826 A:middle
自动替你完成的

00:11:45.956 --> 00:11:46.866 A:middle
无需付出更多工作

00:11:47.346 --> 00:11:48.716 A:middle
UINavigationController

00:11:48.716 --> 00:11:49.586 A:middle
已经替你完成了

00:11:50.496 --> 00:11:51.896 A:middle
不过 为了让这一切更简单

00:11:51.896 --> 00:11:54.786 A:middle
为了把握导航栏高度的变化

00:11:54.896 --> 00:11:56.556 A:middle
在 UIView 中还有一个新的属性

00:11:56.596 --> 00:11:58.166 A:middle
这个新属性也非常好用

00:11:58.166 --> 00:11:59.736 A:middle
并且可以应用在

00:11:59.736 --> 00:12:00.976 A:middle
你的 App 中的

00:11:59.736 --> 00:12:00.976 A:middle
你的 App 中的

00:12:00.976 --> 00:12:01.496 A:middle
各个地方

00:12:01.496 --> 00:12:03.566 A:middle
它就是全新的 safeAreaInset

00:12:03.606 --> 00:12:03.986 A:middle
属性

00:12:05.256 --> 00:12:07.236 A:middle
safeAreaInset 能够让你知道

00:12:07.236 --> 00:12:09.176 A:middle
内容的区域是否

00:12:09.256 --> 00:12:10.506 A:middle
会被导航栏

00:12:10.506 --> 00:12:11.776 A:middle
遮挡

00:12:11.866 --> 00:12:14.286 A:middle
这样一来 你就可以放心地

00:12:14.326 --> 00:12:15.766 A:middle
把内容放在

00:12:15.766 --> 00:12:17.246 A:middle
能够显示出来

00:12:17.246 --> 00:12:19.216 A:middle
而且不会被其他的系统 UI

00:12:19.216 --> 00:12:21.146 A:middle
比如在顶部和底部的导航栏

00:12:21.146 --> 00:12:21.986 A:middle
所阻挡了

00:12:22.816 --> 00:12:23.746 A:middle
知道了这一点

00:12:23.746 --> 00:12:25.016 A:middle
你就能够轻松完成布局了

00:12:25.316 --> 00:12:26.766 A:middle
用户上下滚动时

00:12:26.766 --> 00:12:28.236 A:middle
导航栏高度会变化

00:12:28.236 --> 00:12:30.136 A:middle
safeAreaInset 也会相应变化

00:12:30.136 --> 00:12:31.586 A:middle
你就能轻松避开

00:12:31.586 --> 00:12:31.876 A:middle
导航栏了

00:12:34.456 --> 00:12:35.996 A:middle
而如果你的视图与

00:12:35.996 --> 00:12:37.566 A:middle
底部的工具栏

00:12:37.606 --> 00:12:38.986 A:middle
或是点击栏发生重合

00:12:38.986 --> 00:12:40.206 A:middle
safeAreaInset 就会在底部

00:12:40.206 --> 00:12:41.666 A:middle
派上用场了

00:12:41.856 --> 00:12:42.946 A:middle
你也就能确认

00:12:42.946 --> 00:12:44.496 A:middle
所有的区域

00:12:44.496 --> 00:12:45.516 A:middle
无论顶部还是底部

00:12:45.516 --> 00:12:47.046 A:middle
然后放心地放置内容了

00:12:48.696 --> 00:12:50.206 A:middle
safeAreaInsets 的使用

00:12:50.206 --> 00:12:51.276 A:middle
也十分容易

00:12:51.656 --> 00:12:53.116 A:middle
在 UIView 中

00:12:53.116 --> 00:12:54.506 A:middle
有三个新属性

00:12:54.506 --> 00:12:54.946 A:middle
让使用它更容易

00:12:55.496 --> 00:12:56.026 A:middle
第一个是

00:12:56.026 --> 00:12:57.096 A:middle
safeAreaLayoutGuide

00:12:57.476 --> 00:12:58.826 A:middle
有了 safeAreaLayoutGuide,

00:12:58.826 --> 00:13:00.136 A:middle
你就可以轻易把安全区域

00:12:58.826 --> 00:13:00.136 A:middle
你就可以轻易把安全区域

00:13:00.136 --> 00:13:01.356 A:middle
与你的自动分层代码

00:13:01.356 --> 00:13:01.966 A:middle
整合起来

00:13:01.966 --> 00:13:03.366 A:middle
你可以对这个 layout guide

00:13:03.416 --> 00:13:04.826 A:middle
进行限制

00:13:04.866 --> 00:13:06.216 A:middle
以便把你的内容

00:13:06.216 --> 00:13:07.176 A:middle
放进安全区

00:13:08.646 --> 00:13:09.606 A:middle
如果你选择手动调整布局

00:13:09.646 --> 00:13:11.066 A:middle
那么你需要读取

00:13:11.066 --> 00:13:12.136 A:middle
某个时间点的

00:13:12.136 --> 00:13:13.386 A:middle
当下的安全区的数值

00:13:14.546 --> 00:13:15.386 A:middle
你可以使用

00:13:15.386 --> 00:13:16.676 A:middle
safeAreaInsets 属性来完成这一点

00:13:17.266 --> 00:13:18.156 A:middle
这是和你的视图的空间

00:13:18.156 --> 00:13:19.666 A:middle
相协调的 因此

00:13:19.666 --> 00:13:21.006 A:middle
很容易就能把内容

00:13:21.006 --> 00:13:22.146 A:middle
精确地放置在你想要的

00:13:22.146 --> 00:13:22.346 A:middle
地方

00:13:22.346 --> 00:13:23.796 A:middle
当然 如果你在用手动方式

00:13:23.796 --> 00:13:25.216 A:middle
调整布局 那么你还需要知道

00:13:25.216 --> 00:13:26.306 A:middle
什么时候会产生变化

00:13:26.306 --> 00:13:27.586 A:middle
因此 你可以覆盖

00:13:27.586 --> 00:13:29.596 A:middle
safeAreaInsetsDidChange 属性

00:13:29.876 --> 00:13:31.266 A:middle
发现什么时候发生了变化

00:13:31.266 --> 00:13:32.686 A:middle
并调整布局

00:13:33.976 --> 00:13:35.836 A:middle
现在很多事情

00:13:35.836 --> 00:13:36.966 A:middle
因为整合到了

00:13:36.966 --> 00:13:38.266 A:middle
UIKit 里面

00:13:38.266 --> 00:13:39.496 A:middle
可以自动为你实现

00:13:39.496 --> 00:13:40.396 A:middle
之前实现起来会

00:13:40.396 --> 00:13:40.966 A:middle
更困难的事

00:13:41.616 --> 00:13:43.206 A:middle
举例来说 UIScrollView

00:13:43.206 --> 00:13:44.386 A:middle
可以自动涵盖

00:13:44.386 --> 00:13:46.196 A:middle
safeAreaInsets 让它成为在

00:13:46.196 --> 00:13:47.916 A:middle
视图顶部和底部

00:13:47.916 --> 00:13:48.866 A:middle
可滚动的填充

00:13:49.266 --> 00:13:50.236 A:middle
就算他们与导航栏发生负重叠

00:13:50.236 --> 00:13:51.886 A:middle
你也可以确信

00:13:51.886 --> 00:13:53.086 A:middle
你的内容总是会

00:13:53.086 --> 00:13:54.356 A:middle
被滚动到视图里面

00:13:55.096 --> 00:13:56.336 A:middle
在之前的版本中

00:13:56.336 --> 00:13:57.856 A:middle
UINavigationController 曾经试图

00:13:57.856 --> 00:13:58.716 A:middle
代替开发者

00:13:58.716 --> 00:14:00.126 A:middle
以计算导航栏重叠的方式

00:13:58.716 --> 00:14:00.126 A:middle
以计算导航栏重叠的方式

00:14:00.126 --> 00:14:01.106 A:middle
完成这些任务

00:14:01.106 --> 00:14:02.666 A:middle
然后

00:14:02.786 --> 00:14:04.266 A:middle
为 UIScrollView 中的

00:14:04.266 --> 00:14:05.026 A:middle
contentInset 属性设定数值

00:14:05.686 --> 00:14:07.146 A:middle
你也许注意到了

00:14:07.146 --> 00:14:08.116 A:middle
如果你想要为

00:14:08.116 --> 00:14:09.336 A:middle
UIScrollView

00:14:09.336 --> 00:14:10.846 A:middle
设定你自己的 contentInset 数值

00:14:10.846 --> 00:14:11.446 A:middle
结果却与 NavigationController

00:14:11.446 --> 00:14:12.906 A:middle
发生了矛盾

00:14:12.906 --> 00:14:14.206 A:middle
因为不能决定在某一既定时间

00:14:14.206 --> 00:14:14.786 A:middle
谁拥有当前的数值

00:14:15.616 --> 00:14:17.236 A:middle
在 iOS 11 中

00:14:17.236 --> 00:14:18.436 A:middle
这个矛盾消失了

00:14:18.436 --> 00:14:19.976 A:middle
因为 UINavigationController

00:14:20.076 --> 00:14:21.286 A:middle
不再必须设定 contentInset

00:14:21.286 --> 00:14:21.686 A:middle
属性了

00:14:22.306 --> 00:14:23.716 A:middle
ScrollView 可以自己设定了

00:14:23.716 --> 00:14:24.706 A:middle
只需看一下

00:14:24.706 --> 00:14:26.396 A:middle
safeAreaInsets

00:14:26.396 --> 00:14:28.226 A:middle
把 contentInset 的真正数值

00:14:28.226 --> 00:14:29.516 A:middle
为你所有

00:14:29.516 --> 00:14:30.346 A:middle
取决于你的 App 的需要

00:14:31.516 --> 00:14:37.836 A:middle
[掌声]

00:14:38.336 --> 00:14:40.006 A:middle
UIScrollView 会尽力去

00:14:40.006 --> 00:14:41.426 A:middle
自动完成正确的操作

00:14:41.426 --> 00:14:42.626 A:middle
尽可能地去完成

00:14:43.026 --> 00:14:44.456 A:middle
但当然 这并不总是可能的

00:14:44.456 --> 00:14:46.016 A:middle
不总是能百分之百地

00:14:46.016 --> 00:14:46.476 A:middle
完成任务

00:14:46.476 --> 00:14:47.616 A:middle
我们知道 有一些 App

00:14:47.616 --> 00:14:48.366 A:middle
有不同的需求

00:14:49.096 --> 00:14:50.306 A:middle
因此 为了保证

00:14:50.306 --> 00:14:51.316 A:middle
你总能获得正确的

00:14:51.316 --> 00:14:52.976 A:middle
行为 我们设计了一个

00:14:52.976 --> 00:14:54.066 A:middle
UIScrollView 上的新属性

00:14:54.126 --> 00:14:56.316 A:middle
让你能完全掌控 ScrollView

00:14:56.316 --> 00:14:57.856 A:middle
对 safeAreaInsets 的解读

00:14:59.426 --> 00:15:00.446 A:middle
有了这个 你就能决定

00:14:59.426 --> 00:15:00.446 A:middle
有了这个 你就能决定

00:15:00.446 --> 00:15:01.606 A:middle
它是否应该自动应用插入

00:15:01.606 --> 00:15:03.536 A:middle
或者完全地把它们

00:15:03.536 --> 00:15:04.206 A:middle
忽视掉

00:15:04.496 --> 00:15:05.296 A:middle
这样一来 你就可以

00:15:05.296 --> 00:15:06.326 A:middle
随心所欲地处理你的 App

00:15:06.326 --> 00:15:07.426 A:middle
即便在自动行为

00:15:07.426 --> 00:15:08.986 A:middle
不是你想要的情况下

00:15:08.986 --> 00:15:09.496 A:middle
也可以这样了

00:15:10.276 --> 00:15:11.296 A:middle
如果你想知道

00:15:11.296 --> 00:15:13.316 A:middle
有关 ScrollView 的

00:15:13.316 --> 00:15:14.096 A:middle
具体情况

00:15:14.096 --> 00:15:16.656 A:middle
你可以利用一个

00:15:16.656 --> 00:15:18.156 A:middle
新的属性 它能够

00:15:18.156 --> 00:15:20.086 A:middle
根据 safeAreaInsets

00:15:20.086 --> 00:15:21.686 A:middle
计算出的数值

00:15:22.006 --> 00:15:23.726 A:middle
还有你自己使用

00:15:23.726 --> 00:15:25.976 A:middle
AdjustedContentInset 属性设置的

00:15:25.976 --> 00:15:27.046 A:middle
contentInset 的数量

00:15:27.476 --> 00:15:29.146 A:middle
你可以看到

00:15:29.146 --> 00:15:30.446 A:middle
ScrollView 认为自己需要

00:15:30.446 --> 00:15:32.066 A:middle
多少空间

00:15:34.676 --> 00:15:34.846 A:middle
来进行可滚动的填充

00:15:35.006 --> 00:15:36.136 A:middle
目前为止 我们一直在讲

00:15:36.136 --> 00:15:36.666 A:middle
导航栏

00:15:36.666 --> 00:15:37.886 A:middle
但对于 UI 其他部分

00:15:37.886 --> 00:15:39.036 A:middle
也有一些改良

00:15:41.186 --> 00:15:42.396 A:middle
你会发现 系统各处的

00:15:42.396 --> 00:15:43.976 A:middle
UITalbeView 现在都有了一个

00:15:43.976 --> 00:15:45.676 A:middle
新的 统一的轻扫删除

00:15:45.676 --> 00:15:47.566 A:middle
操作 这和你习惯的

00:15:47.566 --> 00:15:48.476 A:middle
Mail App 中的操作

00:15:48.476 --> 00:15:49.416 A:middle
是一模一样的

00:15:50.666 --> 00:15:53.086 A:middle
包括支持多重动作

00:15:53.166 --> 00:15:55.236 A:middle
向左和向右轻扫

00:15:55.236 --> 00:15:57.366 A:middle
也包括默认的

00:15:57.366 --> 00:15:58.796 A:middle
单一动作

00:15:58.796 --> 00:16:00.486 A:middle
与整个 TableView

00:15:58.796 --> 00:16:00.486 A:middle
与整个 TableView

00:16:00.486 --> 00:16:01.676 A:middle
中的全指令

00:16:02.386 --> 00:16:03.896 A:middle
要把它应用在你的 App 中

00:16:03.896 --> 00:16:04.606 A:middle
也很简单

00:16:05.356 --> 00:16:06.406 A:middle
利用新的

00:16:06.406 --> 00:16:08.616 A:middle
UIContextualAction 类

00:16:08.616 --> 00:16:09.856 A:middle
你可以指定出

00:16:09.856 --> 00:16:11.786 A:middle
你想要在 TableView 中

00:16:11.826 --> 00:16:13.126 A:middle
展示的动作

00:16:13.806 --> 00:16:14.946 A:middle
只需要提供你想要它们

00:16:14.946 --> 00:16:15.896 A:middle
出现的姿态

00:16:16.266 --> 00:16:17.636 A:middle
和动作的名称

00:16:17.636 --> 00:16:19.176 A:middle
以及适时激活它们的

00:16:19.176 --> 00:16:19.686 A:middle
block 就可以了

00:16:19.686 --> 00:16:21.436 A:middle
然后 利用新的

00:16:21.436 --> 00:16:22.936 A:middle
UISwipeActionConfiguration

00:16:22.936 --> 00:16:24.406 A:middle
类你可以把这些动作

00:16:24.696 --> 00:16:26.086 A:middle
集合起来

00:16:26.086 --> 00:16:28.466 A:middle
在每一行的左侧

00:16:28.466 --> 00:16:29.826 A:middle
或者右侧显示出来

00:16:30.516 --> 00:16:31.766 A:middle
你还可以指定

00:16:31.766 --> 00:16:32.646 A:middle
是否要在整行中

00:16:32.646 --> 00:16:34.016 A:middle
出现全指令时

00:16:34.016 --> 00:16:35.726 A:middle
激活第一个

00:16:35.726 --> 00:16:36.316 A:middle
动作

00:16:36.876 --> 00:16:38.786 A:middle
是的 这很酷

00:16:39.116 --> 00:16:41.116 A:middle
[掌声]

00:16:41.216 --> 00:16:42.496 A:middle
现在 我们可以在整个系统中

00:16:42.496 --> 00:16:43.146 A:middle
用上这些

00:16:43.146 --> 00:16:44.506 A:middle
你会在更多的地方

00:16:44.506 --> 00:16:45.496 A:middle
发现更多的动作指令了

00:16:45.866 --> 00:16:47.006 A:middle
不过不要忘了

00:16:47.006 --> 00:16:48.296 A:middle
使用它的时候

00:16:48.386 --> 00:16:49.926 A:middle
你放在轻扫手势后面的

00:16:49.926 --> 00:16:51.526 A:middle
动作会比较

00:16:51.526 --> 00:16:52.906 A:middle
难以发现

00:16:52.906 --> 00:16:53.776 A:middle
这是相对于那些在你的 App 中

00:16:53.826 --> 00:16:55.406 A:middle
视觉效果突出的动作来说的

00:16:55.796 --> 00:16:56.836 A:middle
所以 你当然可以使用这个功能

00:16:56.836 --> 00:16:58.506 A:middle
锦上添花 但不要把它

00:16:58.506 --> 00:17:00.066 A:middle
当作行使某个动作的

00:16:58.506 --> 00:17:00.066 A:middle
当作行使某个动作的

00:17:00.066 --> 00:17:00.906 A:middle
唯一的方式

00:17:02.156 --> 00:17:03.686 A:middle
在那之外 我们还

00:17:03.686 --> 00:17:05.006 A:middle
给予你在 UITableView 里

00:17:05.076 --> 00:17:06.846 A:middle
放置分割线

00:17:06.846 --> 00:17:07.516 A:middle
的更多控制权

00:17:07.996 --> 00:17:09.665 A:middle
UITalbeView 中

00:17:09.665 --> 00:17:10.606 A:middle
有一个新属性 让你能够

00:17:10.606 --> 00:17:12.316 A:middle
掌控你在 TableView 中

00:17:12.316 --> 00:17:13.596 A:middle
设置的 separatorInsets

00:17:13.596 --> 00:17:14.106 A:middle
如何被解读

00:17:14.546 --> 00:17:15.646 A:middle
你可以把它们

00:17:15.806 --> 00:17:17.576 A:middle
定义成绝对值

00:17:17.576 --> 00:17:18.906 A:middle
这样一来 它们就与单元格边缘

00:17:18.906 --> 00:17:19.326 A:middle
相对

00:17:19.705 --> 00:17:21.016 A:middle
你也可以把它们

00:17:21.016 --> 00:17:22.965 A:middle
定义成差值

00:17:22.965 --> 00:17:24.046 A:middle
它们就会分支出来

00:17:24.046 --> 00:17:24.986 A:middle
如果你没有明确指定

00:17:24.986 --> 00:17:26.316 A:middle
TableView 就会把 separatorInsets

00:17:26.316 --> 00:17:27.226 A:middle
放置在那些地方

00:17:27.726 --> 00:17:29.026 A:middle
这会让你很容易地

00:17:29.026 --> 00:17:30.186 A:middle
就能确定 分割线

00:17:30.186 --> 00:17:31.486 A:middle
就在你希望的位置

00:17:31.486 --> 00:17:31.746 A:middle
终止

00:17:31.746 --> 00:17:32.946 A:middle
无论你使用什么样的设备

00:17:32.946 --> 00:17:34.916 A:middle
或者你正在运行的

00:17:34.916 --> 00:17:35.686 A:middle
类的大小

00:17:35.686 --> 00:17:35.976 A:middle
都无所谓

00:17:36.516 --> 00:17:41.136 A:middle
[掌声]

00:17:41.636 --> 00:17:43.276 A:middle
有很多的新的

00:17:43.276 --> 00:17:44.046 A:middle
UI 的改良

00:17:44.416 --> 00:17:45.756 A:middle
之后会有一整场演讲

00:17:45.756 --> 00:17:47.096 A:middle
详细阐述这些

00:17:47.096 --> 00:17:47.396 A:middle
以及更多

00:17:48.786 --> 00:17:50.266 A:middle
那就是为 iOS 11

00:17:50.396 --> 00:17:51.416 A:middle
升级你的 App

00:17:51.606 --> 00:17:52.386 A:middle
因此 大家一定要

00:17:52.386 --> 00:17:52.726 A:middle
去听那场演讲

00:17:52.726 --> 00:17:54.696 A:middle
此外 为了给大家讲解

00:17:54.696 --> 00:17:56.096 A:middle
一部分升级

00:17:56.096 --> 00:17:57.716 A:middle
背后的想法

00:17:57.716 --> 00:17:58.906 A:middle
以及建议大家如何把它们

00:17:58.906 --> 00:18:00.766 A:middle
整合到你们的 App 中

00:17:58.906 --> 00:18:00.766 A:middle
整合到你们的 App 中

00:18:00.806 --> 00:18:02.116 A:middle
请一定去听设计演讲

00:18:02.406 --> 00:18:04.906 A:middle
Design Studio Shorts 2

00:18:04.906 --> 00:18:05.666 A:middle
就在本周晚些时候进行

00:18:06.776 --> 00:18:08.186 A:middle
现在 我要把舞台

00:18:08.186 --> 00:18:09.336 A:middle
交还给 Eliza 请她告诉大家

00:18:09.336 --> 00:18:10.646 A:middle
更多的 Cocoa Touch

00:18:10.646 --> 00:18:11.556 A:middle
API 增强方面的信息

00:18:11.786 --> 00:18:11.976 A:middle
谢谢

00:18:12.516 --> 00:18:16.646 A:middle
[掌声]

00:18:17.146 --> 00:18:17.516 A:middle
好的

00:18:17.516 --> 00:18:18.856 A:middle
我想先讲一下

00:18:18.856 --> 00:18:21.216 A:middle
Swift 4 和 Foundation 中的

00:18:21.216 --> 00:18:21.776 A:middle
新 API

00:18:22.466 --> 00:18:23.696 A:middle
有很多很多

00:18:23.696 --> 00:18:25.316 A:middle
非常令人振奋的东西被添加到

00:18:25.316 --> 00:18:25.846 A:middle
Swift 4 上

00:18:26.146 --> 00:18:27.336 A:middle
我在此只能

00:18:27.336 --> 00:18:28.046 A:middle
讲两个

00:18:28.456 --> 00:18:32.416 A:middle
首先是把 Swift

00:18:32.416 --> 00:18:32.926 A:middle
的原生类型归档

00:18:33.456 --> 00:18:35.626 A:middle
如果你打算使用

00:18:35.766 --> 00:18:36.926 A:middle
Swift 4 的原生类型

00:18:36.926 --> 00:18:38.886 A:middle
比如列举和结构

00:18:38.886 --> 00:18:40.736 A:middle
使用需要参与的代码

00:18:40.736 --> 00:18:42.336 A:middle
比如 NSCoding

00:18:42.656 --> 00:18:43.506 A:middle
你会发现

00:18:43.506 --> 00:18:44.556 A:middle
以前这是比较

00:18:44.556 --> 00:18:47.186 A:middle
难以实现的

00:18:47.526 --> 00:18:50.396 A:middle
Swift 4 用一项新的

00:18:50.396 --> 00:18:51.586 A:middle
可编码的协议

00:18:51.646 --> 00:18:53.056 A:middle
解决了这个问题

00:18:53.956 --> 00:18:56.176 A:middle
只要你的列举中的

00:18:56.176 --> 00:18:57.646 A:middle
下层类型具有结构

00:18:57.646 --> 00:18:59.276 A:middle
而且是可编码的

00:18:59.736 --> 00:19:01.286 A:middle
那么你只需

00:18:59.736 --> 00:19:01.286 A:middle
那么你只需

00:19:01.286 --> 00:19:02.896 A:middle
对协议声明一致

00:19:02.896 --> 00:19:03.396 A:middle
就可以了

00:19:03.686 --> 00:19:05.066 A:middle
其余的交给 Swift

00:19:05.066 --> 00:19:05.236 A:middle
就行了

00:19:05.476 --> 00:19:07.746 A:middle
这就让这些原生

00:19:07.746 --> 00:19:09.866 A:middle
类型可以很容易地加入

00:19:10.166 --> 00:19:10.636 A:middle
NSCoding

00:19:10.966 --> 00:19:12.376 A:middle
Foundation 同样也添加了

00:19:12.436 --> 00:19:14.636 A:middle
对于 JSON 归档和

00:19:14.706 --> 00:19:16.506 A:middle
属性列表的支持

00:19:18.756 --> 00:19:20.586 A:middle
对于 Swift 4 的另一项

00:19:20.636 --> 00:19:23.686 A:middle
令人欣喜的改版是新的 KeyPath 类型

00:19:23.826 --> 00:19:25.426 A:middle
和一个新的 literal syntax

00:19:25.426 --> 00:19:26.536 A:middle
以及能够对其做出反应的

00:19:26.536 --> 00:19:27.266 A:middle
getter 和 setter

00:19:27.936 --> 00:19:29.696 A:middle
在过去 你只能在代码中

00:19:29.786 --> 00:19:31.966 A:middle
硬编码一个 String

00:19:32.036 --> 00:19:33.876 A:middle
来指出 KeyPaths

00:19:33.876 --> 00:19:35.596 A:middle
这样做的结果就是

00:19:35.596 --> 00:19:36.646 A:middle
如果你打错了一个字母 在编译中

00:19:36.646 --> 00:19:37.476 A:middle
就找不到它了

00:19:38.516 --> 00:19:39.776 A:middle
现在 有了新的

00:19:39.776 --> 00:19:42.516 A:middle
literal syntax 这个

00:19:42.516 --> 00:19:44.146 A:middle
能够让你建立一个 KeyPath

00:19:44.146 --> 00:19:45.286 A:middle
这是一个强类型对象

00:19:45.716 --> 00:19:47.436 A:middle
那么 假设我有一个 presenter 对象

00:19:47.436 --> 00:19:49.636 A:middle
这个对象有一些属性

00:19:49.636 --> 00:19:50.746 A:middle
一个 copresenter

00:19:50.746 --> 00:19:51.966 A:middle
也就是另一个 presenter

00:19:51.966 --> 00:19:53.506 A:middle
和一个名字

00:19:53.586 --> 00:19:56.166 A:middle
我可以建立一个 KeyPath 对象

00:19:56.586 --> 00:19:58.186 A:middle
来代表我的 presenter 的

00:19:58.186 --> 00:19:58.626 A:middle
名字

00:19:59.246 --> 00:20:00.806 A:middle
然后 我可以用这个新的

00:19:59.246 --> 00:20:00.806 A:middle
然后 我可以用这个新的

00:20:00.806 --> 00:20:02.486 A:middle
方括号 getter 记号

00:20:02.786 --> 00:20:04.356 A:middle
进入我的一个 presenter

00:20:04.356 --> 00:20:04.976 A:middle
对象的属性

00:20:05.046 --> 00:20:07.306 A:middle
在这个例子中

00:20:07.306 --> 00:20:09.066 A:middle
进入一个代表我的对象

00:20:09.236 --> 00:20:10.886 A:middle
会返回 Josh 这个 String

00:20:12.156 --> 00:20:14.326 A:middle
你还可以放弃

00:20:14.326 --> 00:20:15.536 A:middle
制作 KeyPath 对象

00:20:15.666 --> 00:20:17.206 A:middle
作为独立的步骤

00:20:17.206 --> 00:20:18.266 A:middle
而只在 getter 中使用 literal syntax

00:20:18.266 --> 00:20:20.456 A:middle
并利用 Swift 的

00:20:20.456 --> 00:20:22.346 A:middle
类型推断 放弃类型

00:20:22.346 --> 00:20:23.636 A:middle
如果你那样做的话

00:20:25.196 --> 00:20:26.166 A:middle
这是非常酷的

00:20:26.566 --> 00:20:28.796 A:middle
至于 Foundation 则更进了一步

00:20:28.796 --> 00:20:32.086 A:middle
把通过这些 KeyPath

00:20:32.156 --> 00:20:35.166 A:middle
使用 KVO 的方式

00:20:35.216 --> 00:20:37.066 A:middle
做了一个更新

00:20:37.106 --> 00:20:38.226 A:middle
这张图展示的是

00:20:38.226 --> 00:20:39.736 A:middle
在此之前你为了

00:20:39.736 --> 00:20:41.606 A:middle
观察你的对象的一个属性的改变

00:20:41.606 --> 00:20:42.386 A:middle
要做的事

00:20:42.676 --> 00:20:43.796 A:middle
这有点麻烦

00:20:44.156 --> 00:20:45.606 A:middle
你必须要覆盖一个 method

00:20:45.756 --> 00:20:47.476 A:middle
因为你的 Superclass

00:20:47.476 --> 00:20:48.866 A:middle
可能也要覆盖这个 method

00:20:48.866 --> 00:20:50.706 A:middle
你必须得用 context pointer

00:20:50.706 --> 00:20:52.406 A:middle
来指明到底是谁

00:20:52.406 --> 00:20:53.556 A:middle
在某个时间占据主导

00:20:53.746 --> 00:20:54.836 A:middle
要把它弄对

00:20:54.836 --> 00:20:55.246 A:middle
并不容易

00:20:55.986 --> 00:20:58.896 A:middle
而现在 在新的 iOS 11 里

00:20:58.896 --> 00:20:59.996 A:middle
我们有了基于 block 的 KVO

00:21:00.226 --> 00:21:01.196 A:middle
我们觉得这很棒

00:21:02.516 --> 00:21:07.216 A:middle
[掌声]

00:21:07.716 --> 00:21:09.576 A:middle
如果我想要查看我的

00:21:09.576 --> 00:21:11.286 A:middle
copresenter 的改动

00:21:11.286 --> 00:21:12.226 A:middle
虽然它似乎从未改动过

00:21:12.226 --> 00:21:14.436 A:middle
我只需要

00:21:14.436 --> 00:21:15.756 A:middle
设置一个 block

00:21:15.756 --> 00:21:17.156 A:middle
然后用一个 literal syntax

00:21:17.396 --> 00:21:18.306 A:middle
查看其中一个 KeyPath 就可以了

00:21:18.706 --> 00:21:19.386 A:middle
这是非常酷的

00:21:20.236 --> 00:21:21.746 A:middle
在 Foundation 中有很多新的

00:21:21.746 --> 00:21:22.286 A:middle
主题

00:21:22.286 --> 00:21:23.646 A:middle
欢迎去看相关的演讲

00:21:23.646 --> 00:21:25.676 A:middle
星期三开始

00:21:27.126 --> 00:21:28.946 A:middle
好 下面是延迟系统手势

00:21:28.946 --> 00:21:29.946 A:middle
这是个很有趣的例子

00:21:30.536 --> 00:21:33.696 A:middle
如果你有一个 App

00:21:33.696 --> 00:21:36.876 A:middle
它显示了一些内容

00:21:36.876 --> 00:21:38.776 A:middle
显示了状态栏

00:21:38.776 --> 00:21:41.246 A:middle
用户可以从顶部向下轻扫

00:21:41.246 --> 00:21:42.456 A:middle
调出通知中心

00:21:44.066 --> 00:21:45.756 A:middle
但是如果你把状态栏隐藏起来

00:21:45.756 --> 00:21:47.146 A:middle
用户再从顶部向下轻扫

00:21:47.146 --> 00:21:48.596 A:middle
他们就会看到

00:21:48.596 --> 00:21:49.836 A:middle
这个点击 UI

00:21:51.416 --> 00:21:53.486 A:middle
这样一来 你的 App 就会

00:21:53.536 --> 00:21:54.876 A:middle
自动接收

00:21:54.876 --> 00:21:55.976 A:middle
屏幕顶部附近

00:21:55.976 --> 00:21:56.746 A:middle
生成的点击

00:21:57.116 --> 00:21:59.616 A:middle
我们在 iOS 5 中这样做过

00:21:59.616 --> 00:22:00.846 A:middle
当时我们给大家带来了

00:21:59.616 --> 00:22:00.846 A:middle
当时我们给大家带来了

00:22:00.846 --> 00:22:01.056 A:middle
通知中心

00:22:01.056 --> 00:22:02.326 A:middle
因为我们希望确定

00:22:02.626 --> 00:22:04.846 A:middle
App 能够保证

00:22:04.846 --> 00:22:06.306 A:middle
屏幕边缘附近的点击

00:22:06.346 --> 00:22:07.706 A:middle
是有效的

00:22:08.066 --> 00:22:09.296 A:middle
我们还用状态栏

00:22:09.406 --> 00:22:10.906 A:middle
是否显示

00:22:10.906 --> 00:22:13.176 A:middle
来辨别你的 App

00:22:13.176 --> 00:22:14.066 A:middle
是否属于这一类型

00:22:14.996 --> 00:22:18.356 A:middle
然后在 iOS 7 里

00:22:19.036 --> 00:22:21.286 A:middle
我们又推出了底部向上轻扫

00:22:21.286 --> 00:22:21.926 A:middle
呼出控制中心

00:22:21.926 --> 00:22:25.746 A:middle
如果你的 App 隐藏了状态栏

00:22:26.096 --> 00:22:27.846 A:middle
我们会应用同样的法则

00:22:27.846 --> 00:22:29.266 A:middle
显示出点击 UI

00:22:29.266 --> 00:22:29.886 A:middle
而不是控制中心

00:22:29.886 --> 00:22:32.336 A:middle
现在 这样做的目的

00:22:32.336 --> 00:22:33.576 A:middle
其实不是很有意义

00:22:33.576 --> 00:22:34.686 A:middle
因为状态栏是在屏幕顶部

00:22:34.686 --> 00:22:35.166 A:middle
不是底部

00:22:35.216 --> 00:22:36.676 A:middle
那么状态栏

00:22:36.676 --> 00:22:37.546 A:middle
显示与否就不应该

00:22:37.546 --> 00:22:38.956 A:middle
意味着你的 App

00:22:38.956 --> 00:22:41.226 A:middle
在屏幕底部

00:22:41.226 --> 00:22:42.066 A:middle
是否需要确保

00:22:42.066 --> 00:22:42.496 A:middle
点击有效

00:22:43.206 --> 00:22:46.026 A:middle
现在这种情况

00:22:46.286 --> 00:22:49.036 A:middle
还有一个问题

00:22:49.036 --> 00:22:50.976 A:middle
那就是用户在

00:22:50.976 --> 00:22:52.056 A:middle
屏幕边缘轻扫时

00:22:52.056 --> 00:22:54.476 A:middle
他们很想看到系统 UI

00:22:54.996 --> 00:22:55.886 A:middle
组件的出现

00:22:56.416 --> 00:22:57.626 A:middle
他们希望能实现

00:22:57.626 --> 00:22:58.056 A:middle
这一点

00:22:58.056 --> 00:22:59.236 A:middle
因此除非你的 App

00:22:59.236 --> 00:23:01.396 A:middle
需要利用到边缘

00:22:59.236 --> 00:23:01.396 A:middle
需要利用到边缘

00:23:01.396 --> 00:23:02.706 A:middle
附近的触碰

00:23:02.706 --> 00:23:05.026 A:middle
否则对于用户体验更好的

00:23:05.026 --> 00:23:06.896 A:middle
方式是让控制中心的

00:23:06.896 --> 00:23:08.156 A:middle
通知就这样

00:23:08.156 --> 00:23:08.576 A:middle
直接出现

00:23:09.376 --> 00:23:11.186 A:middle
因此 在 iOS 11 里

00:23:11.186 --> 00:23:12.906 A:middle
我们会允许你实现这一点

00:23:13.136 --> 00:23:13.816 A:middle
通过添加这个新的

00:23:13.816 --> 00:23:16.396 A:middle
preferredScreenEdgesForDeferring

00:23:16.396 --> 00:23:17.656 A:middle
系统手势 method

00:23:17.776 --> 00:23:19.086 A:middle
如果你在

00:23:19.086 --> 00:23:20.806 A:middle
viewControllers 中覆盖它

00:23:20.936 --> 00:23:22.396 A:middle
你可以返回一个 UIRectEdge

00:23:22.396 --> 00:23:23.886 A:middle
这是不同边缘的集合

00:23:23.886 --> 00:23:25.476 A:middle
我们极力推荐你

00:23:25.476 --> 00:23:27.336 A:middle
仅仅退回那些

00:23:27.336 --> 00:23:29.566 A:middle
你希望不让系统手势干扰的边缘

00:23:29.566 --> 00:23:30.896 A:middle
如果你真的需要确保

00:23:30.896 --> 00:23:32.786 A:middle
在边缘位置的

00:23:32.786 --> 00:23:33.256 A:middle
点击生效的话

00:23:33.256 --> 00:23:34.126 A:middle
因为用户体验更好的方式

00:23:34.126 --> 00:23:36.566 A:middle
就是让系统手势

00:23:36.566 --> 00:23:38.586 A:middle
以最简单的方式

00:23:38.626 --> 00:23:39.946 A:middle
直接出现

00:23:40.056 --> 00:23:41.376 A:middle
好了

00:23:42.106 --> 00:23:43.816 A:middle
另外一个我们

00:23:43.816 --> 00:23:45.116 A:middle
加以改进的主题

00:23:45.116 --> 00:23:45.416 A:middle
是 Auto Layout

00:23:45.416 --> 00:23:46.656 A:middle
特别是 Auto Layout

00:23:46.876 --> 00:23:49.066 A:middle
和 Scroll View

00:23:49.396 --> 00:23:51.956 A:middle
之间的交互

00:23:52.066 --> 00:23:58.016 A:middle
因为 Scroll Views 对

00:23:58.016 --> 00:23:59.176 A:middle
Auto Layout 其实是一种挑战

00:23:59.176 --> 00:24:01.676 A:middle
因为他们代表了两种

00:23:59.176 --> 00:24:01.676 A:middle
因为他们代表了两种

00:24:01.676 --> 00:24:03.086 A:middle
不同的坐标系

00:24:03.086 --> 00:24:04.006 A:middle
揉到一起

00:24:04.306 --> 00:24:05.546 A:middle
你有 Scroll View 的框架

00:24:05.546 --> 00:24:06.946 A:middle
然后 你又有了

00:24:06.946 --> 00:24:07.826 A:middle
其内容的坐标系

00:24:08.666 --> 00:24:10.076 A:middle
后者又时常比

00:24:10.076 --> 00:24:11.506 A:middle
Scroll View 要大 而且几乎总是

00:24:11.506 --> 00:24:12.956 A:middle
与 Scroll View 的源

00:24:12.956 --> 00:24:13.856 A:middle
产生偏移量

00:24:15.336 --> 00:24:16.566 A:middle
因此在你为 Scroll View

00:24:16.566 --> 00:24:18.196 A:middle
施加约束的时候

00:24:18.816 --> 00:24:21.116 A:middle
Scroll View 总有很多

00:24:21.116 --> 00:24:22.456 A:middle
内置的技巧

00:24:22.456 --> 00:24:23.626 A:middle
它会猜测你想要

00:24:23.626 --> 00:24:23.986 A:middle
做什么

00:24:23.986 --> 00:24:24.976 A:middle
它会根据你所

00:24:25.146 --> 00:24:26.706 A:middle
设置的约束来尽力

00:24:26.706 --> 00:24:27.456 A:middle
去做正确的事

00:24:27.936 --> 00:24:30.076 A:middle
但在 iOS 11 中 我们会允许

00:24:30.076 --> 00:24:31.576 A:middle
你把自己的意思表达地

00:24:31.576 --> 00:24:33.286 A:middle
非常清楚

00:24:33.286 --> 00:24:34.646 A:middle
完全明确

00:24:34.646 --> 00:24:36.016 A:middle
因为我们在 Scroll View 上

00:24:36.046 --> 00:24:37.156 A:middle
推出了两个新的 Layout guide

00:24:37.416 --> 00:24:38.836 A:middle
一个是 contentLayoutGuide

00:24:38.916 --> 00:24:39.636 A:middle
另一个是 frameLayoutGuide

00:24:39.636 --> 00:24:40.616 A:middle
现在你可以设置

00:24:40.616 --> 00:24:42.546 A:middle
明确代表一个坐标系

00:24:42.546 --> 00:24:43.616 A:middle
或者另一个坐标系

00:24:43.616 --> 00:24:44.836 A:middle
的约束了

00:24:45.516 --> 00:24:47.536 A:middle
[掌声]

00:24:48.036 --> 00:24:48.956 A:middle
这会让你能够

00:24:48.956 --> 00:24:51.176 A:middle
省很多力气

00:24:51.176 --> 00:24:51.946 A:middle
而过去这很麻烦

00:24:52.366 --> 00:24:54.356 A:middle
有时你有一个

00:24:54.356 --> 00:24:55.606 A:middle
Scroll View 然后你有

00:24:55.606 --> 00:24:56.556 A:middle
可以大小缩放的内容

00:24:56.906 --> 00:24:58.426 A:middle
你希望能够在缩放时

00:24:58.426 --> 00:25:00.476 A:middle
让内容在

00:24:58.426 --> 00:25:00.476 A:middle
让内容在

00:25:00.476 --> 00:25:02.136 A:middle
Scroll View 中心位置

00:25:02.536 --> 00:25:02.736 A:middle
停止

00:25:02.736 --> 00:25:03.686 A:middle
Josh 与我在几年前

00:25:03.686 --> 00:25:05.516 A:middle
在一场 WWDC 讲座上用了

00:25:05.516 --> 00:25:07.556 A:middle
三分之一的时间来解释

00:25:07.556 --> 00:25:08.776 A:middle
你要如何在 Scroll View 中

00:25:08.776 --> 00:25:09.496 A:middle
实现这个效果

00:25:09.856 --> 00:25:11.646 A:middle
直到最近

00:25:11.646 --> 00:25:13.056 A:middle
使用 Auto Layout 都很难

00:25:13.056 --> 00:25:13.726 A:middle
做到这一点

00:25:14.416 --> 00:25:16.136 A:middle
但现在 你只需两行代码

00:25:16.136 --> 00:25:16.816 A:middle
就能实现了

00:25:17.246 --> 00:25:18.606 A:middle
你只需要在 imageView 中

00:25:18.696 --> 00:25:21.046 A:middle
设置 centerXAnchor

00:25:21.046 --> 00:25:22.496 A:middle
或者你的 Scroll View 的

00:25:22.496 --> 00:25:24.586 A:middle
任何内容和

00:25:24.586 --> 00:25:26.116 A:middle
contentLayoutGuide 的

00:25:26.466 --> 00:25:27.276 A:middle
centerXAnchor 对等就行

00:25:27.276 --> 00:25:28.396 A:middle
然后你需要在

00:25:28.396 --> 00:25:29.936 A:middle
Y 轴上做同样的事

00:25:30.566 --> 00:25:33.616 A:middle
然后就大功告成

00:25:34.508 --> 00:25:36.508 A:middle
[掌声]

00:25:39.316 --> 00:25:39.916 A:middle
好了

00:25:40.176 --> 00:25:41.456 A:middle
下面是 Dynamic Type

00:25:41.796 --> 00:25:44.246 A:middle
dynamic type 是 iOS 上一个

00:25:44.246 --> 00:25:46.646 A:middle
很重要的特性

00:25:46.866 --> 00:25:48.056 A:middle
这幅图显示的是

00:25:48.056 --> 00:25:49.276 A:middle
大量不同的 dynamic type 尺寸

00:25:49.276 --> 00:25:50.916 A:middle
用户可以设置它们

00:25:50.916 --> 00:25:52.226 A:middle
我们可以在自己的

00:25:52.226 --> 00:25:53.836 A:middle
Calendar App 里

00:25:53.836 --> 00:25:53.906 A:middle
控制它

00:25:54.166 --> 00:25:55.576 A:middle
这是一个小的

00:25:55.576 --> 00:25:56.276 A:middle
dynamic type

00:25:56.936 --> 00:25:58.786 A:middle
变大 变大

00:25:58.786 --> 00:25:59.416 A:middle
变得很大

00:25:59.416 --> 00:26:01.056 A:middle
更大的 dynamic type 尺寸

00:25:59.416 --> 00:26:01.056 A:middle
更大的 dynamic type 尺寸

00:26:01.056 --> 00:26:02.706 A:middle
都可以通过选择

00:26:02.706 --> 00:26:04.476 A:middle
来实现

00:26:04.886 --> 00:26:07.206 A:middle
这就以多种形式

00:26:07.206 --> 00:26:08.916 A:middle
对你的 App 的支持

00:26:08.916 --> 00:26:09.656 A:middle
形成了挑战

00:26:09.866 --> 00:26:11.486 A:middle
但对于那些选择了非标准

00:26:11.486 --> 00:26:13.036 A:middle
dynamic type 尺寸的用户来说

00:26:13.286 --> 00:26:14.596 A:middle
如果你的 App 不支持

00:26:14.596 --> 00:26:16.056 A:middle
他们的选择

00:26:16.056 --> 00:26:17.476 A:middle
那么这用户体验

00:26:17.536 --> 00:26:17.916 A:middle
就很差了

00:26:18.476 --> 00:26:20.756 A:middle
我们做了一些改进

00:26:20.756 --> 00:26:22.366 A:middle
让你在你的 App 里

00:26:22.916 --> 00:26:24.106 A:middle
做对这件事变得

00:26:24.106 --> 00:26:24.706 A:middle
更容易

00:26:25.016 --> 00:26:26.696 A:middle
第一件事就是控制

00:26:26.816 --> 00:26:27.446 A:middle
文本的尺寸

00:26:28.396 --> 00:26:31.956 A:middle
假如你把 16 号字

00:26:32.146 --> 00:26:33.516 A:middle
作为标准字体的尺寸

00:26:34.686 --> 00:26:36.986 A:middle
那么你该如何决定

00:26:36.986 --> 00:26:38.016 A:middle
用户选择非标准 dynamic type 的时候

00:26:38.016 --> 00:26:39.166 A:middle
该用到哪一种

00:26:39.586 --> 00:26:40.086 A:middle
字号呢

00:26:41.086 --> 00:26:42.806 A:middle
要做到这一点 以前的办法

00:26:42.876 --> 00:26:44.286 A:middle
是让 UIFont 对某种文本格式

00:26:44.336 --> 00:26:46.446 A:middle
给出偏好的字号

00:26:47.036 --> 00:26:48.046 A:middle
有很多文本格式

00:26:48.046 --> 00:26:50.226 A:middle
字体 标题

00:26:50.226 --> 00:26:51.056 A:middle
有很多供你查看

00:26:51.056 --> 00:26:52.266 A:middle
这很好

00:26:52.746 --> 00:26:53.746 A:middle
因为它可以为你

00:26:53.746 --> 00:26:56.186 A:middle
在 App 里的适当位置

00:26:56.186 --> 00:26:56.936 A:middle
提供合适的字体

00:26:57.186 --> 00:26:58.546 A:middle
但这有点不自由

00:26:58.746 --> 00:26:59.806 A:middle
因为你无法得到一个

00:26:59.806 --> 00:27:00.426 A:middle
定制的字体

00:26:59.806 --> 00:27:00.426 A:middle
定制的字体

00:27:00.646 --> 00:27:01.426 A:middle
它每次只能给你

00:27:01.426 --> 00:27:03.286 A:middle
系统字体

00:27:03.286 --> 00:27:04.086 A:middle
如果你想在特定情况下

00:27:04.086 --> 00:27:06.006 A:middle
使用 Monospace Number 字体

00:27:06.006 --> 00:27:06.706 A:middle
又该怎么办呢

00:27:06.986 --> 00:27:09.026 A:middle
或者是那些

00:27:09.026 --> 00:27:10.616 A:middle
更搭配你品牌的

00:27:10.616 --> 00:27:11.176 A:middle
那些字体

00:27:11.706 --> 00:27:13.776 A:middle
在 iOS 11 里 我们推出了

00:27:13.946 --> 00:27:15.126 A:middle
一个新的类解决了这个问题

00:27:15.126 --> 00:27:16.716 A:middle
那就是 UIFontMetrics.

00:27:17.216 --> 00:27:18.796 A:middle
使用它的方法

00:27:18.796 --> 00:27:21.096 A:middle
就是对于你感兴趣的文本格式

00:27:21.096 --> 00:27:23.066 A:middle
建立一个 FontMetrics

00:27:23.066 --> 00:27:23.776 A:middle
对象

00:27:24.936 --> 00:27:26.476 A:middle
然后 选择任何你想要的字体

00:27:26.476 --> 00:27:28.506 A:middle
尺寸就是标准的

00:27:28.506 --> 00:27:29.436 A:middle
dynamic type 尺寸

00:27:29.516 --> 00:27:31.816 A:middle
然后 你可以让

00:27:31.886 --> 00:27:33.556 A:middle
FontMetrics 对象

00:27:33.776 --> 00:27:35.426 A:middle
在用户当前设定的基础上 测量那个

00:27:35.426 --> 00:27:35.686 A:middle
字体

00:27:35.686 --> 00:27:37.316 A:middle
这让你得到一个字体

00:27:37.686 --> 00:27:39.046 A:middle
任何你所需要的字体

00:27:39.046 --> 00:27:40.406 A:middle
大小正合适

00:27:41.366 --> 00:27:42.166 A:middle
是的 这非常酷

00:27:42.166 --> 00:27:47.236 A:middle
但只有这一点

00:27:47.236 --> 00:27:48.606 A:middle
还不足以完全解决问题

00:27:48.606 --> 00:27:50.426 A:middle
假设你需要一个

00:27:50.546 --> 00:27:52.176 A:middle
定制的按键 或者一个定制的

00:27:52.176 --> 00:27:52.636 A:middle
栏

00:27:52.756 --> 00:27:53.956 A:middle
然后要往里面放一些

00:27:53.956 --> 00:27:54.486 A:middle
文本

00:27:54.806 --> 00:27:56.106 A:middle
你打算把那个按键的高度设定成

00:27:56.106 --> 00:27:56.646 A:middle
多少呢

00:27:57.446 --> 00:27:58.746 A:middle
如果用户使用了非标准的

00:27:58.746 --> 00:28:00.656 A:middle
dynamic type 设置 它就可能

00:27:58.746 --> 00:28:00.656 A:middle
dynamic type 设置 它就可能

00:28:00.656 --> 00:28:02.106 A:middle
覆盖掉你所设置的

00:28:02.106 --> 00:28:02.696 A:middle
那个高度

00:28:03.026 --> 00:28:05.016 A:middle
UIFontMetrics 解决了

00:28:05.016 --> 00:28:06.006 A:middle
这个问题 办法就是

00:28:06.006 --> 00:28:07.406 A:middle
允许你测量任意的

00:28:07.406 --> 00:28:08.056 A:middle
Layout 值

00:28:08.096 --> 00:28:10.456 A:middle
你要再次建立一个

00:28:10.936 --> 00:28:11.926 A:middle
FontMetrics 对象

00:28:12.306 --> 00:28:13.356 A:middle
选择一个适合

00:28:13.356 --> 00:28:14.356 A:middle
标准 dynamic type 尺寸的

00:28:14.356 --> 00:28:15.836 A:middle
高度 然后你可以

00:28:15.836 --> 00:28:17.346 A:middle
根据用户的当前设定

00:28:17.346 --> 00:28:17.936 A:middle
测量它

00:28:17.936 --> 00:28:20.136 A:middle
这对于你的字体尺寸和 layout 来说

00:28:20.136 --> 00:28:21.726 A:middle
是非常好用的

00:28:22.556 --> 00:28:26.886 A:middle
我们还为 Auto Layout

00:28:26.886 --> 00:28:28.446 A:middle
添加了特性 让它支持

00:28:28.486 --> 00:28:29.946 A:middle
dynamic type 我们对此也很兴奋

00:28:31.496 --> 00:28:34.296 A:middle
假如我有两个商标

00:28:34.436 --> 00:28:36.016 A:middle
字体不同 也许

00:28:36.276 --> 00:28:37.256 A:middle
垂直分布

00:28:37.496 --> 00:28:39.756 A:middle
我选择了一个基线

00:28:39.756 --> 00:28:41.776 A:middle
到基线的间隔 在这个字体大小下面

00:28:42.216 --> 00:28:43.836 A:middle
看起来很合适

00:28:44.316 --> 00:28:48.146 A:middle
我的用户可能选择了

00:28:48.146 --> 00:28:50.546 A:middle
更大或更小的 dynamic type

00:28:50.606 --> 00:28:50.956 A:middle
尺寸

00:28:51.266 --> 00:28:53.586 A:middle
结果就让间隔

00:28:53.586 --> 00:28:56.146 A:middle
变得太近

00:28:56.146 --> 00:28:58.516 A:middle
或者太远了

00:28:58.516 --> 00:29:00.226 A:middle
现在 用 Auto Layout

00:28:58.516 --> 00:29:00.226 A:middle
现在 用 Auto Layout

00:29:00.226 --> 00:29:01.826 A:middle
可以解决这个问题

00:29:02.106 --> 00:29:03.356 A:middle
那就是我们为获取

00:29:03.356 --> 00:29:04.956 A:middle
系统推荐的间隔

00:29:04.956 --> 00:29:05.896 A:middle
提供了办法

00:29:06.806 --> 00:29:08.736 A:middle
要做到这一点 首先

00:29:08.736 --> 00:29:09.806 A:middle
有两个要素

00:29:09.806 --> 00:29:11.036 A:middle
你需要做基线到基线间隔

00:29:11.036 --> 00:29:12.296 A:middle
用这种方式来

00:29:12.296 --> 00:29:13.476 A:middle
告诉 Auto Layout

00:29:13.476 --> 00:29:14.746 A:middle
它应该考虑字体的大小

00:29:15.566 --> 00:29:18.286 A:middle
我可能会用 topLabel 里的 topAnchor

00:29:18.286 --> 00:29:19.726 A:middle
lastBaselineAnchor 制作一个

00:29:19.726 --> 00:29:21.446 A:middle
topAnchor 再用 bottomLabel 里的

00:29:21.446 --> 00:29:22.796 A:middle
firstBaselineAnchor 制作一个

00:29:22.796 --> 00:29:23.686 A:middle
bottomAnchor

00:29:24.226 --> 00:29:25.716 A:middle
然后我会用新的

00:29:25.716 --> 00:29:27.556 A:middle
constraintEqualToSystemSpacing

00:29:27.556 --> 00:29:30.326 A:middle
below method 来让 Auto Layout

00:29:30.386 --> 00:29:32.156 A:middle
选择一个看上去合适的值

00:29:32.156 --> 00:29:33.456 A:middle
前提是知道被显示的

00:29:33.456 --> 00:29:34.116 A:middle
字体的大小

00:29:34.116 --> 00:29:35.596 A:middle
那会让文本去适应

00:29:35.596 --> 00:29:37.146 A:middle
这会让所有不同的

00:29:37.256 --> 00:29:38.476 A:middle
dynamic type 的尺寸

00:29:38.476 --> 00:29:39.356 A:middle
看上去都很舒服

00:29:39.536 --> 00:29:41.886 A:middle
这同样适用于

00:29:41.936 --> 00:29:42.896 A:middle
Visual Format Language

00:29:43.136 --> 00:29:44.076 A:middle
我们有同样的两种

00:29:44.076 --> 00:29:44.676 A:middle
要素

00:29:44.676 --> 00:29:46.276 A:middle
第一个是系统间隔

00:29:46.276 --> 00:29:47.506 A:middle
这是由

00:29:47.506 --> 00:29:49.706 A:middle
我的 Visual Format String 的 dash 提供的

00:29:49.706 --> 00:29:51.146 A:middle
其次是一个新的基线到基线的

00:29:51.216 --> 00:29:52.326 A:middle
选项

00:29:52.526 --> 00:29:54.816 A:middle
这样一来 Auto Layout 系统

00:29:54.816 --> 00:29:56.406 A:middle
就会明白 替你完成这些工作了

00:29:56.836 --> 00:29:57.936 A:middle
这对 UIStackView 也一样

00:29:57.936 --> 00:29:59.306 A:middle
只要提供同样的

00:29:59.336 --> 00:29:59.976 A:middle
两个选项就行

00:30:00.066 --> 00:30:03.316 A:middle
要了解更多的使用 dynamic type

00:30:03.316 --> 00:30:05.486 A:middle
构建 App 的方法

00:30:05.756 --> 00:30:07.366 A:middle
欢迎去参加

00:30:07.366 --> 00:30:08.696 A:middle
在周五举行的相关演讲

00:30:09.206 --> 00:30:11.126 A:middle
有很多精彩内容

00:30:12.896 --> 00:30:13.456 A:middle
好了

00:30:14.006 --> 00:30:14.916 A:middle
下面是 Password Autofill

00:30:14.916 --> 00:30:16.696 A:middle
这是在今年推出的新 API 里面

00:30:16.696 --> 00:30:17.966 A:middle
我最喜欢的一个

00:30:18.346 --> 00:30:19.606 A:middle
我真的觉得它很棒

00:30:20.446 --> 00:30:21.706 A:middle
你们中有些人也许经历过

00:30:21.706 --> 00:30:23.016 A:middle
类似的 workflow

00:30:23.156 --> 00:30:24.466 A:middle
这是我在登录 web service 的时候

00:30:24.466 --> 00:30:25.446 A:middle
所采用的标准 workflow

00:30:25.716 --> 00:30:27.626 A:middle
比如我登录了某种

00:30:27.876 --> 00:30:28.446 A:middle
web service

00:30:29.966 --> 00:30:32.706 A:middle
我允许 Safari 建议

00:30:32.706 --> 00:30:34.006 A:middle
密码 然后我接受了它

00:30:34.376 --> 00:30:35.646 A:middle
这是一个很棒的强密码

00:30:35.646 --> 00:30:36.726 A:middle
我永远也不想输入一遍

00:30:38.146 --> 00:30:40.706 A:middle
然后这个 service 会说

00:30:40.706 --> 00:30:42.146 A:middle
来吧 下载我们的 App 吧

00:30:42.146 --> 00:30:42.716 A:middle
我照做了

00:30:43.026 --> 00:30:44.716 A:middle
我打开这个 App

00:30:44.716 --> 00:30:46.836 A:middle
立即就看到了这个

00:30:47.046 --> 00:30:48.896 A:middle
密码输入界面

00:30:49.246 --> 00:30:50.556 A:middle
当然我在 iCloud 钥匙串上

00:30:50.556 --> 00:30:52.276 A:middle
保存了刚才那个强密码

00:30:53.256 --> 00:30:54.046 A:middle
但我不知道那个密码是什么

00:30:54.656 --> 00:30:55.566 A:middle
我卡在了这里

00:30:55.966 --> 00:30:57.216 A:middle
于是我回到网络交互界面

00:30:57.666 --> 00:30:59.036 A:middle
说我忘记了

00:30:59.036 --> 00:30:59.536 A:middle
密码

00:30:59.536 --> 00:31:00.556 A:middle
然后重设密码

00:30:59.536 --> 00:31:00.556 A:middle
然后重设密码

00:31:00.556 --> 00:31:01.566 A:middle
设一个非常简单的 比如

00:31:01.696 --> 00:31:02.236 A:middle
Password

00:31:02.556 --> 00:31:04.756 A:middle
现在我再去登录

00:31:04.756 --> 00:31:06.226 A:middle
完全没有安全可言

00:31:06.226 --> 00:31:07.296 A:middle
很可能就被黑了

00:31:07.296 --> 00:31:08.826 A:middle
会是一个灾难

00:31:08.826 --> 00:31:10.316 A:middle
从 iOS 11 开始

00:31:10.316 --> 00:31:11.836 A:middle
这场噩梦要终结了

00:31:12.506 --> 00:31:14.176 A:middle
我们推出了一项

00:31:14.176 --> 00:31:15.526 A:middle
非常棒的新特性

00:31:15.526 --> 00:31:16.696 A:middle
当我们探测到你进入了一个

00:31:16.696 --> 00:31:18.256 A:middle
用户名和密码的输入界面

00:31:18.756 --> 00:31:20.956 A:middle
这个 key UI 就会

00:31:20.956 --> 00:31:21.606 A:middle
在候选栏中出现

00:31:22.526 --> 00:31:26.306 A:middle
点击一下 你就会得到

00:31:26.306 --> 00:31:28.086 A:middle
所有你保存在 iCloud 钥匙串上的

00:31:28.086 --> 00:31:29.806 A:middle
密码的列表

00:31:30.846 --> 00:31:31.946 A:middle
你就可以在列表中

00:31:31.946 --> 00:31:32.746 A:middle
找到正确的那个了

00:31:33.006 --> 00:31:35.646 A:middle
这相比起刚才

00:31:35.646 --> 00:31:36.976 A:middle
你卡住的场景来说

00:31:36.976 --> 00:31:37.896 A:middle
已经是更好的用户体验

00:31:38.176 --> 00:31:39.376 A:middle
但还不够理想

00:31:39.376 --> 00:31:40.456 A:middle
对于很多用户来说

00:31:40.456 --> 00:31:41.506 A:middle
他们并不知道到底该如何使用

00:31:41.506 --> 00:31:41.926 A:middle
这个列表

00:31:41.926 --> 00:31:42.806 A:middle
如果你像我一样

00:31:42.806 --> 00:31:44.246 A:middle
那么你的列表就会有好多密码

00:31:44.246 --> 00:31:45.386 A:middle
滚动列表并找到

00:31:45.386 --> 00:31:46.306 A:middle
正确的密码 可能会

00:31:46.306 --> 00:31:47.076 A:middle
有点困难

00:31:48.216 --> 00:31:50.906 A:middle
现在有一种方式

00:31:51.176 --> 00:31:52.596 A:middle
你可以为用户提供

00:31:52.596 --> 00:31:53.446 A:middle
更好的体验

00:31:53.806 --> 00:31:55.456 A:middle
只需要几步就可以

00:31:55.936 --> 00:31:58.596 A:middle
我们需要的是

00:31:58.596 --> 00:32:01.076 A:middle
在候选栏中默认出现

00:31:58.596 --> 00:32:01.076 A:middle
在候选栏中默认出现

00:32:01.076 --> 00:32:02.206 A:middle
正确的建议

00:32:02.386 --> 00:32:03.456 A:middle
这样一来 你甚至不需要

00:32:03.456 --> 00:32:04.886 A:middle
在一串列表中

00:32:04.886 --> 00:32:06.536 A:middle
找到正确的那个了

00:32:06.536 --> 00:32:08.176 A:middle
要做到这一点 只需要两步

00:32:09.116 --> 00:32:10.986 A:middle
首先为你的 App 添加一个授权

00:32:10.986 --> 00:32:11.866 A:middle
然后为你的 web service

00:32:11.996 --> 00:32:14.076 A:middle
添加几行 JSON

00:32:14.546 --> 00:32:15.896 A:middle
你为了支持通用链接

00:32:15.896 --> 00:32:17.376 A:middle
可能已经这样做过了

00:32:18.316 --> 00:32:19.916 A:middle
如果你完成了这件事

00:32:19.916 --> 00:32:21.456 A:middle
这个很棒的 UI 就会出现

00:32:21.456 --> 00:32:23.806 A:middle
我点击一下

00:32:23.806 --> 00:32:25.666 A:middle
密码就自动填好了

00:32:25.926 --> 00:32:27.856 A:middle
所以请看在我的面上

00:32:27.856 --> 00:32:28.586 A:middle
在你们的 App 中使用这个 API 吧

00:32:28.586 --> 00:32:29.656 A:middle
我们觉得它很棒

00:32:29.866 --> 00:32:31.356 A:middle
明天也请去参加

00:32:31.356 --> 00:32:32.086 A:middle
相关讲座

00:32:33.516 --> 00:32:38.500 A:middle
[掌声]

00:32:41.046 --> 00:32:41.346 A:middle
好的

00:32:41.346 --> 00:32:42.676 A:middle
接下来我想告诉大家

00:32:42.676 --> 00:32:44.446 A:middle
对于 Asset Catalogs

00:32:44.446 --> 00:32:45.476 A:middle
的一些改进

00:32:46.726 --> 00:32:48.266 A:middle
现在可以为 Asset Catalog

00:32:48.446 --> 00:32:50.596 A:middle
添加色彩和图标了

00:32:50.866 --> 00:32:52.146 A:middle
你可以制作带名称的

00:32:52.306 --> 00:32:52.676 A:middle
色彩了

00:32:53.516 --> 00:32:56.966 A:middle
[掌声]

00:32:57.466 --> 00:32:59.776 A:middle
这可以让你在适合的设备上

00:32:59.776 --> 00:33:02.056 A:middle
轻松支持全范围

00:32:59.776 --> 00:33:02.056 A:middle
轻松支持全范围

00:33:02.056 --> 00:33:03.306 A:middle
色彩

00:33:03.716 --> 00:33:06.006 A:middle
你可以建立一个范围很宽的

00:33:06.086 --> 00:33:07.336 A:middle
色域 然后把它添加到

00:33:07.336 --> 00:33:07.726 A:middle
Asset Catalog 上

00:33:07.726 --> 00:33:08.806 A:middle
你可以通过名称获取它

00:33:08.806 --> 00:33:09.646 A:middle
你也可以在

00:33:09.646 --> 00:33:12.086 A:middle
不支持宽色域的设备上

00:33:12.086 --> 00:33:13.546 A:middle
在 sRGB Color Space 里面使用

00:33:13.546 --> 00:33:14.696 A:middle
fallback 色彩

00:33:14.696 --> 00:33:15.926 A:middle
你还可以对 App 图标

00:33:15.926 --> 00:33:16.986 A:middle
做同样的事

00:33:17.326 --> 00:33:18.936 A:middle
现在 App 图标可以使用

00:33:18.936 --> 00:33:20.396 A:middle
广色域色彩

00:33:20.396 --> 00:33:21.806 A:middle
可以被显示在支持

00:33:21.806 --> 00:33:24.606 A:middle
P3 Color Space 的设备上

00:33:24.816 --> 00:33:27.166 A:middle
此外 你可能还发现了

00:33:27.596 --> 00:33:28.516 A:middle
至少对某些 App 来说

00:33:28.516 --> 00:33:30.586 A:middle
它们的图标就是

00:33:30.586 --> 00:33:32.396 A:middle
占据这个 App 的容量的

00:33:32.396 --> 00:33:33.286 A:middle
最大的一个因素了

00:33:33.726 --> 00:33:35.696 A:middle
现在 把它们包含在

00:33:35.876 --> 00:33:37.406 A:middle
Asset Catalogs 里面 我们就能

00:33:37.406 --> 00:33:40.156 A:middle
让它们参与进

00:33:40.326 --> 00:33:42.016 A:middle
App 瘦身的进程

00:33:42.096 --> 00:33:43.846 A:middle
这会显著降低你的 App 的

00:33:43.846 --> 00:33:44.186 A:middle
占用空间

00:33:44.346 --> 00:33:45.686 A:middle
这是一个非常棒的改进

00:33:45.686 --> 00:33:46.506 A:middle
在以后它会被

00:33:46.506 --> 00:33:47.746 A:middle
以默认的形式加入

00:33:47.746 --> 00:33:49.066 A:middle
iOS 11 的新 project 里面

00:33:49.066 --> 00:33:52.006 A:middle
你也可以在现有的 project 里面

00:33:52.006 --> 00:33:53.486 A:middle
这样做 方法就是在 Info.plist 里

00:33:53.486 --> 00:33:54.026 A:middle
添加一个 key

00:33:54.686 --> 00:33:58.406 A:middle
接下来是支持 PDF 的图像

00:33:58.486 --> 00:33:59.356 A:middle
这个功能其实已经

00:33:59.356 --> 00:34:00.846 A:middle
实现了一段时间了

00:33:59.356 --> 00:34:00.846 A:middle
实现了一段时间了

00:34:01.466 --> 00:34:02.746 A:middle
但现在你在 Asset Catalog 中

00:34:02.746 --> 00:34:04.236 A:middle
添加图像时有了一个新选择

00:34:04.236 --> 00:34:05.726 A:middle
就是支持 PDF 的图像

00:34:06.306 --> 00:34:07.906 A:middle
你现在可以选择

00:34:07.906 --> 00:34:08.946 A:middle
保存矢量数据了

00:34:09.196 --> 00:34:10.985 A:middle
这是 iOS 11 的新特性

00:34:10.985 --> 00:34:12.016 A:middle
这个特性真的

00:34:12.016 --> 00:34:12.386 A:middle
很厉害

00:34:12.866 --> 00:34:14.686 A:middle
你点击一下那个框

00:34:14.686 --> 00:34:16.826 A:middle
矢量数据就成为你的 App

00:34:16.826 --> 00:34:17.556 A:middle
的一部分了

00:34:17.946 --> 00:34:19.735 A:middle
这样一来 可能

00:34:19.815 --> 00:34:20.656 A:middle
会让你的 App 变得更大一点

00:34:20.656 --> 00:34:22.226 A:middle
因为矢量数据要

00:34:22.266 --> 00:34:23.326 A:middle
占用一些空间

00:34:23.846 --> 00:34:25.275 A:middle
但另一方面

00:34:25.275 --> 00:34:26.956 A:middle
这让你能够测量

00:34:26.956 --> 00:34:27.956 A:middle
这些图像 这会在

00:34:27.956 --> 00:34:29.315 A:middle
很多场景下

00:34:29.315 --> 00:34:29.866 A:middle
派上用场

00:34:29.866 --> 00:34:31.376 A:middle
比如 假设你知道

00:34:31.376 --> 00:34:32.616 A:middle
这个特定图像

00:34:32.616 --> 00:34:34.146 A:middle
会以不同尺寸被调用

00:34:34.146 --> 00:34:37.496 A:middle
但那不太明显

00:34:37.636 --> 00:34:39.886 A:middle
比如一个符号

00:34:39.926 --> 00:34:41.446 A:middle
要随着 dynamic type 变动大小

00:34:41.946 --> 00:34:42.826 A:middle
既然我们想到了

00:34:42.826 --> 00:34:44.295 A:middle
dynamic type 那你也就应该

00:34:44.295 --> 00:34:45.666 A:middle
想到要让和字体一起出现的

00:34:45.706 --> 00:34:47.906 A:middle
符号的大小也能

00:34:48.216 --> 00:34:49.235 A:middle
有合适的变动

00:34:49.235 --> 00:34:52.996 A:middle
另一个十分不明显的例子

00:34:52.996 --> 00:34:54.596 A:middle
就是 tap bar 图像

00:34:54.786 --> 00:34:56.386 A:middle
你也许已经习惯了

00:34:56.386 --> 00:34:58.476 A:middle
tab bar 图像的尺寸

00:34:58.476 --> 00:34:59.256 A:middle
是单一不变的

00:34:59.746 --> 00:35:01.476 A:middle
但我们强烈建议

00:34:59.746 --> 00:35:01.476 A:middle
但我们强烈建议

00:35:01.476 --> 00:35:03.986 A:middle
你们的 App 去支持的

00:35:03.986 --> 00:35:05.936 A:middle
一个新特性

00:35:06.446 --> 00:35:08.716 A:middle
就是要考虑到

00:35:08.716 --> 00:35:11.626 A:middle
那些把 dynamic type 尺寸调大的

00:35:12.446 --> 00:35:12.526 A:middle
用户们

00:35:12.786 --> 00:35:14.706 A:middle
当他们点击并按住

00:35:14.706 --> 00:35:17.006 A:middle
一个 tap bar 图像的时候

00:35:17.006 --> 00:35:18.166 A:middle
在屏幕中央的 Hud 里

00:35:18.216 --> 00:35:19.056 A:middle
一个大图就会出现

00:35:19.806 --> 00:35:21.236 A:middle
当你轻扫手指

00:35:21.236 --> 00:35:22.556 A:middle
就会看到不同的图像

00:35:23.006 --> 00:35:24.696 A:middle
你可以通过返回一个不同的图像

00:35:25.036 --> 00:35:26.916 A:middle
来自你的 App 里

00:35:26.916 --> 00:35:28.296 A:middle
实现这个功能

00:35:28.606 --> 00:35:31.226 A:middle
但如果你使用了支持 PDF 的图像

00:35:31.226 --> 00:35:33.236 A:middle
并保存了 tap bar 图像的矢量数据

00:35:33.236 --> 00:35:34.376 A:middle
那么它就会

00:35:34.376 --> 00:35:35.586 A:middle
以默认形式出现了

00:35:35.856 --> 00:35:37.116 A:middle
所以我们强烈推荐采用它

00:35:37.346 --> 00:35:38.936 A:middle
增强你的 App 的易用性

00:35:38.936 --> 00:35:40.356 A:middle
让所有用户受益

00:35:40.396 --> 00:35:40.546 A:middle
好了

00:35:40.996 --> 00:35:45.076 A:middle
我想说的最后一个主题

00:35:45.076 --> 00:35:46.496 A:middle
就是 ProMotion

00:35:46.996 --> 00:35:49.456 A:middle
你们已经知道 在一些型号的

00:35:49.686 --> 00:35:51.306 A:middle
IPad 上面 我们增加了

00:35:51.306 --> 00:35:52.536 A:middle
屏幕的刷新率

00:35:52.866 --> 00:35:55.356 A:middle
你可以在通过在 UIScreen 上

00:35:55.356 --> 00:35:56.586 A:middle
查询这一特性来

00:35:56.586 --> 00:35:58.176 A:middle
搞清楚某个设备的

00:35:58.376 --> 00:35:59.796 A:middle
屏幕刷新率

00:36:03.456 --> 00:36:05.806 A:middle
那么 你查询之后

00:36:05.806 --> 00:36:06.496 A:middle
又该怎么利用这个

00:36:06.496 --> 00:36:07.126 A:middle
信息呢

00:36:08.106 --> 00:36:09.736 A:middle
这取决于你在创造

00:36:09.736 --> 00:36:10.306 A:middle
哪一种 App

00:36:10.676 --> 00:36:11.846 A:middle
如果是一个 UIKit App

00:36:11.846 --> 00:36:13.246 A:middle
那么实际上你

00:36:13.246 --> 00:36:14.526 A:middle
不该用这个特性

00:36:14.526 --> 00:36:15.746 A:middle
做什么事

00:36:15.796 --> 00:36:17.146 A:middle
对于 UIKit App 来说

00:36:17.146 --> 00:36:18.566 A:middle
最重要的事就是你只想

00:36:18.716 --> 00:36:20.276 A:middle
优化你的绘图代码

00:36:20.526 --> 00:36:21.756 A:middle
你只需要保证

00:36:21.756 --> 00:36:23.246 A:middle
你的帧率

00:36:23.246 --> 00:36:24.706 A:middle
在所有设备上

00:36:24.706 --> 00:36:25.176 A:middle
越高越好

00:36:25.176 --> 00:36:26.516 A:middle
要做到这一点 我们强烈建议

00:36:26.516 --> 00:36:27.746 A:middle
使用 Instruments

00:36:28.016 --> 00:36:29.226 A:middle
你可以查看

00:36:29.226 --> 00:36:30.436 A:middle
在滚动和动画时

00:36:30.436 --> 00:36:31.646 A:middle
所达到的帧率

00:36:31.646 --> 00:36:32.766 A:middle
然后找到

00:36:32.766 --> 00:36:33.536 A:middle
拖慢你的因素

00:36:33.786 --> 00:36:35.006 A:middle
如果你这样做了

00:36:35.006 --> 00:36:36.486 A:middle
就会加强你的 App

00:36:36.486 --> 00:36:37.776 A:middle
在所有设备上的

00:36:37.776 --> 00:36:39.806 A:middle
用户体验 包括那些

00:36:39.806 --> 00:36:41.946 A:middle
高屏幕刷新率的设备

00:36:42.516 --> 00:36:44.136 A:middle
这个情况对于

00:36:44.136 --> 00:36:46.996 A:middle
Metal App 来说更复杂

00:36:46.996 --> 00:36:50.316 A:middle
对于那些使用 Metal 的 App 来说

00:36:50.316 --> 00:36:52.036 A:middle
你就要更多地考虑

00:36:52.086 --> 00:36:54.116 A:middle
在不同场景下

00:36:54.116 --> 00:36:55.506 A:middle
使用什么样的帧率

00:36:56.646 --> 00:36:59.596 A:middle
你的目标就是保证

00:36:59.596 --> 00:37:00.666 A:middle
流畅的播放

00:36:59.596 --> 00:37:00.666 A:middle
流畅的播放

00:37:00.666 --> 00:37:02.306 A:middle
在过去 你可能会

00:37:02.306 --> 00:37:04.706 A:middle
悲观地

00:37:04.706 --> 00:37:06.486 A:middle
把刷新率调低到

00:37:06.486 --> 00:37:07.976 A:middle
每秒 30 帧 以保证

00:37:07.976 --> 00:37:09.156 A:middle
帧率的顺畅

00:37:09.386 --> 00:37:10.926 A:middle
但现在 在支持

00:37:10.926 --> 00:37:12.296 A:middle
高刷新率的设备上

00:37:12.296 --> 00:37:13.886 A:middle
你可以把刷新率

00:37:13.886 --> 00:37:14.846 A:middle
上调到每秒 40 帧

00:37:14.846 --> 00:37:16.146 A:middle
获得更加顺畅的体验

00:37:16.146 --> 00:37:17.786 A:middle
因为 40 可以被

00:37:17.786 --> 00:37:19.696 A:middle
每秒 120 帧的帧率

00:37:20.136 --> 00:37:20.416 A:middle
整除

00:37:20.416 --> 00:37:21.506 A:middle
如果你要展示电影视频内容

00:37:21.626 --> 00:37:23.686 A:middle
你就可以选择

00:37:23.686 --> 00:37:25.206 A:middle
每秒 24 帧的刷新率

00:37:25.206 --> 00:37:26.346 A:middle
现在这个刷新率

00:37:26.346 --> 00:37:28.846 A:middle
在这些设备上也会显得

00:37:28.846 --> 00:37:29.436 A:middle
非常顺畅了

00:37:29.806 --> 00:37:31.176 A:middle
所以选择是很多的

00:37:31.406 --> 00:37:33.636 A:middle
你要根据你所展示的

00:37:33.636 --> 00:37:34.516 A:middle
内容来考虑

00:37:34.516 --> 00:37:36.146 A:middle
节能的问题

00:37:36.146 --> 00:37:37.526 A:middle
你不会想要一直保持

00:37:37.526 --> 00:37:40.456 A:middle
120 帧的高帧率的

00:37:40.566 --> 00:37:42.366 A:middle
最后 你还可以用 XCode 的

00:37:42.366 --> 00:37:44.696 A:middle
GPU Report 特性来查看

00:37:44.776 --> 00:37:46.056 A:middle
你的 Metal App 的

00:37:46.056 --> 00:37:47.076 A:middle
性能特点

00:37:47.136 --> 00:37:50.286 A:middle
接下来会有一场

00:37:50.496 --> 00:37:53.556 A:middle
介绍 Metal 2 的讲座

00:37:53.556 --> 00:37:54.706 A:middle
我们强烈建议大家去

00:37:55.136 --> 00:37:57.776 A:middle
这就是全部内容了

00:37:57.776 --> 00:37:59.376 A:middle
现在我要把舞台

00:37:59.376 --> 00:37:59.896 A:middle
交给 Josh 了

00:38:00.086 --> 00:38:00.756 A:middle
谢谢大家

00:38:01.516 --> 00:38:06.386 A:middle
[掌声]

00:38:06.886 --> 00:38:08.146 A:middle
&gt;&gt; 多谢 Eliza

00:38:08.216 --> 00:38:09.226 A:middle
今天早晨我们开始的

00:38:09.226 --> 00:38:09.576 A:middle
有点晚

00:38:09.576 --> 00:38:10.396 A:middle
所以现在我们的结束语

00:38:10.396 --> 00:38:11.376 A:middle
就得抓紧了

00:38:11.736 --> 00:38:13.446 A:middle
我要很快再介绍

00:38:13.446 --> 00:38:14.436 A:middle
最后一个主题

00:38:14.726 --> 00:38:15.786 A:middle
我保证会非常快

00:38:16.166 --> 00:38:18.546 A:middle
本地化对于

00:38:18.546 --> 00:38:20.126 A:middle
扩大你的 App 的应用范围来说无疑非常关键

00:38:21.196 --> 00:38:21.906 A:middle
对很多人来说

00:38:21.906 --> 00:38:23.976 A:middle
本地化和翻译是

00:38:23.976 --> 00:38:26.046 A:middle
同义词

00:38:26.166 --> 00:38:27.146 A:middle
但实际并非如此

00:38:27.736 --> 00:38:29.496 A:middle
所以我想提一句

00:38:29.496 --> 00:38:32.186 A:middle
要考虑本地化 App 的

00:38:32.186 --> 00:38:33.396 A:middle
layout

00:38:33.396 --> 00:38:34.916 A:middle
这很重要

00:38:35.366 --> 00:38:36.336 A:middle
让我们抓紧时间看一下这个

00:38:37.756 --> 00:38:38.896 A:middle
对很多人来说

00:38:38.896 --> 00:38:40.056 A:middle
这也许看上去很舒服

00:38:40.516 --> 00:38:42.816 A:middle
但如果继续看下去

00:38:42.816 --> 00:38:43.816 A:middle
我要做一些改变

00:38:43.976 --> 00:38:45.116 A:middle
可能就会让你们

00:38:45.116 --> 00:38:45.716 A:middle
不舒服了

00:38:46.366 --> 00:38:48.716 A:middle
这个看上去是不是真的

00:38:48.716 --> 00:38:49.126 A:middle
很差劲

00:38:49.836 --> 00:38:51.506 A:middle
标志怪怪的

00:38:51.506 --> 00:38:52.476 A:middle
箭头指错了方向

00:38:52.716 --> 00:38:54.326 A:middle
动画也出错了

00:38:54.976 --> 00:38:56.436 A:middle
但信不信由你

00:38:56.436 --> 00:38:57.596 A:middle
这是一个真正的 layout

00:38:57.976 --> 00:38:58.906 A:middle
我们只是不太会在英语 App 中

00:38:58.906 --> 00:38:59.626 A:middle
看到它

00:38:59.886 --> 00:39:01.106 A:middle
一般是会在从右向左的

00:38:59.886 --> 00:39:01.106 A:middle
一般是会在从右向左的

00:39:01.106 --> 00:39:02.016 A:middle
语言中见到这种情况

00:39:02.016 --> 00:39:03.536 A:middle
比如阿拉伯语或希伯来语

00:39:04.216 --> 00:39:05.526 A:middle
对于希望看到这些的用户来说

00:39:05.526 --> 00:39:07.266 A:middle
这才是自然的

00:39:08.266 --> 00:39:09.396 A:middle
如果你看到这个感觉舒服

00:39:09.396 --> 00:39:11.286 A:middle
看到这个感觉不舒服

00:39:12.096 --> 00:39:13.266 A:middle
那你就知道那些

00:39:13.266 --> 00:39:14.676 A:middle
母语是从右向左的人们

00:39:14.676 --> 00:39:16.426 A:middle
如果他们看到这些的

00:39:16.426 --> 00:39:17.486 A:middle
感受是什么样了

00:39:18.266 --> 00:39:19.206 A:middle
现在你要保证

00:39:19.206 --> 00:39:21.046 A:middle
在本地化的同时

00:39:21.156 --> 00:39:23.576 A:middle
在 layoutI 里也要支持从右向左

00:39:23.576 --> 00:39:24.406 A:middle
要支持从右向左的

00:39:24.406 --> 00:39:25.016 A:middle
语言

00:39:25.186 --> 00:39:26.416 A:middle
因为系统各处

00:39:26.466 --> 00:39:27.206 A:middle
都是支持的

00:39:27.406 --> 00:39:28.746 A:middle
很多团队都花了大把时间

00:39:28.746 --> 00:39:30.106 A:middle
来保证这项特性

00:39:30.136 --> 00:39:30.646 A:middle
运行正常

00:39:30.646 --> 00:39:32.416 A:middle
实际上 UIKit 已经为你

00:39:32.416 --> 00:39:32.906 A:middle
做了很多

00:39:33.236 --> 00:39:34.526 A:middle
导航控制和开关

00:39:34.526 --> 00:39:35.566 A:middle
都能自动开关

00:39:36.616 --> 00:39:37.646 A:middle
但如果你要设计

00:39:37.646 --> 00:39:39.676 A:middle
定制的 view

00:39:39.676 --> 00:39:41.506 A:middle
那你一定要考虑到

00:39:41.606 --> 00:39:43.166 A:middle
从右向左语言的 layouts

00:39:43.166 --> 00:39:44.516 A:middle
如果你要在使用这些语言的地方本地化

00:39:44.516 --> 00:39:44.996 A:middle
你的 App

00:39:44.996 --> 00:39:47.486 A:middle
这就是我对于这件事的

00:39:47.486 --> 00:39:48.416 A:middle
快速总结

00:39:48.416 --> 00:39:49.356 A:middle
关于本地化

00:39:49.356 --> 00:39:50.916 A:middle
在 developer.apple.com 的本地化指南上

00:39:50.916 --> 00:39:52.466 A:middle
还有很多信息

00:39:53.096 --> 00:39:54.496 A:middle
当然关于本场演讲

00:39:54.496 --> 00:39:57.306 A:middle
还有持续整周的

00:39:57.306 --> 00:39:59.286 A:middle
大量演讲的信息

00:39:59.286 --> 00:39:59.976 A:middle
在网站上都会有

00:40:00.326 --> 00:40:01.496 A:middle
关于拖拽与放置的四场演讲

00:40:01.496 --> 00:40:02.136 A:middle
会非常精彩

00:40:02.176 --> 00:40:03.086 A:middle
大家一定不要错过

00:40:04.126 --> 00:40:05.776 A:middle
为 iOS 11 升级你的 App

00:40:05.776 --> 00:40:06.736 A:middle
这场演讲也会

00:40:06.736 --> 00:40:07.446 A:middle
非常精彩

00:40:07.836 --> 00:40:09.226 A:middle
为了让 Eliza 高兴

00:40:09.226 --> 00:40:10.356 A:middle
大家也请去参加

00:40:10.356 --> 00:40:12.026 A:middle
介绍 Password Autofill 的演讲

00:40:12.026 --> 00:40:12.856 A:middle
并加以应用

00:40:13.156 --> 00:40:13.876 A:middle
非常感谢大家

00:40:13.876 --> 00:40:14.526 A:middle
祝大家本周开心度过  收获良多

00:40:15.516 --> 00:40:21.500 A:middle
[掌声]
