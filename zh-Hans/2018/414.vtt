WEBVTT

00:00:17.818 --> 00:00:19.753 align:middle line:0
（理解崩溃和崩溃日志
演讲414）

00:00:19.820 --> 00:00:23.790 align:middle line:0
大家早上好
感谢你们的到来

00:00:26.860 --> 00:00:29.496 align:middle line:-1
稍后一些非常聪明的人会到台上来

00:00:29.563 --> 00:00:32.399 align:middle line:-1
今天我们为你准备了一些很酷的东西

00:00:34.201 --> 00:00:37.638 align:middle line:-1
首先声明

00:00:37.704 --> 00:00:42.843 align:middle line:-2
如果你从未编写过会崩溃的代码
则此演讲不适合你

00:00:43.810 --> 00:00:48.048 align:middle line:-2
这次演讲是为我们中那些
会犯错误的人准备的

00:00:49.449 --> 00:00:53.120 align:middle line:-2
今天我们将讨论
你可以使用的工具和技术

00:00:53.387 --> 00:00:55.989 align:middle line:-1
来更好处理你的崩溃代码

00:00:56.223 --> 00:00:57.758 align:middle line:-1
若这些崩溃会影响到你的用户

00:00:58.825 --> 00:01:01.762 align:middle line:-1
具体来说 我将介绍崩溃的基本原理

00:00:58.825 --> 00:01:01.762 align:middle line:-1
具体来说 我将介绍崩溃的基本原理

00:01:02.229 --> 00:01:04.531 align:middle line:-2
它们为什么会发生
它们是什么样的

00:01:05.799 --> 00:01:08.402 align:middle line:-1
然后我将向你展示我们的一些工具

00:01:08.468 --> 00:01:11.305 align:middle line:-1
它们可以用来访问崩溃日志

00:01:12.339 --> 00:01:15.609 align:middle line:-1
然后Greg将上台并介绍

00:01:15.676 --> 00:01:18.178 align:middle line:-2
关于如何阅读崩溃日志内容的
更多细节

00:01:18.879 --> 00:01:21.315 align:middle line:-1
然后他会深入探讨

00:01:21.381 --> 00:01:24.051 align:middle line:-2
如何使用崩溃日志分析
棘手的内存问题

00:01:24.985 --> 00:01:28.288 align:middle line:-2
接下来Kuba将向你展示
如何尽早发现线程竞争

00:01:28.355 --> 00:01:30.257 align:middle line:-1
这些线程竞争常常导致崩溃

00:01:30.324 --> 00:01:32.192 align:middle line:-1
并且这种崩溃非常难以重现

00:01:33.794 --> 00:01:37.531 align:middle line:-2
首先我们应该给它一个定义
什么是崩溃

00:01:38.732 --> 00:01:42.102 align:middle line:-2
崩溃是当你的app
试图做一些不被允许的事情时的

00:01:42.603 --> 00:01:45.305 align:middle line:-1
突然终止

00:01:46.240 --> 00:01:47.374 align:middle line:-1
那么不允许的是什么？

00:01:47.741 --> 00:01:51.044 align:middle line:-1
有时CPU无法执行某些代码

00:01:51.411 --> 00:01:53.080 align:middle line:-1
CPU不会除以零

00:01:54.047 --> 00:01:57.518 align:middle line:-2
或者有时是操作系统
正在执行某些策略

00:01:59.052 --> 00:02:01.588 align:middle line:-2
操作系统将通过终止你的app
来保护用户体验

00:01:59.052 --> 00:02:01.588 align:middle line:-2
操作系统将通过终止你的app
来保护用户体验

00:02:01.655 --> 00:02:04.758 align:middle line:-2
这种情况会发生在
当你的app启动时间过长

00:02:04.825 --> 00:02:06.293 align:middle line:-1
或它使用了太多内存时

00:02:08.027 --> 00:02:10.364 align:middle line:-1
有时 你正在使用的编程语言

00:02:10.430 --> 00:02:14.001 align:middle line:-1
会试图阻止失败并将触发崩溃

00:02:14.334 --> 00:02:17.538 align:middle line:-2
Swift中的Array
和NSArray将终止你的进程

00:02:17.604 --> 00:02:19.840 align:middle line:-1
如果你正试图越界访问数组

00:02:20.874 --> 00:02:24.311 align:middle line:-2
或者有时是你
作为开发者试图阻止失败

00:02:24.745 --> 00:02:28.582 align:middle line:-2
你可能有一个API
来断言参数是否为非nil

00:02:29.082 --> 00:02:30.517 align:middle line:-1
这完全没问题

00:02:32.486 --> 00:02:34.388 align:middle line:-1
大家以前应该都见过这个

00:02:34.888 --> 00:02:38.158 align:middle line:-1
这就是Xcode中调试器的样子

00:02:38.225 --> 00:02:40.327 align:middle line:-1
其被绑定到你的app上

00:02:40.827 --> 00:02:43.964 align:middle line:-2
并在你的app终止之前
暂停了该进程

00:02:45.332 --> 00:02:48.235 align:middle line:-1
让我们仔细看看左边的这个回溯

00:02:48.836 --> 00:02:52.973 align:middle line:0
你可以在此处看到该app
是如何由操作系统启动的

00:02:53.974 --> 00:02:57.477 align:middle line:0
当我们暂停时
我们可以看到主函数是如何被调用的

00:02:57.544 --> 00:03:00.380 align:middle line:0
以及函数之间的互相调用

00:02:57.544 --> 00:03:00.380 align:middle line:0
以及函数之间的互相调用

00:03:00.547 --> 00:03:04.618 align:middle line:-1
最终我们到达了你的代码中的这一点

00:03:04.685 --> 00:03:08.355 align:middle line:-2
在该处app除了崩溃别无他法
这里出现了一些问题

00:03:09.022 --> 00:03:11.525 align:middle line:-1
最后调试器收到一个信号

00:03:11.592 --> 00:03:14.428 align:middle line:-1
即此app即将崩溃并暂停app

00:03:16.263 --> 00:03:17.598 align:middle line:-1
有时候

00:03:17.664 --> 00:03:21.034 align:middle line:-2
你并不总能很方便地绑定调试器
就像我们这里做的一样

00:03:21.835 --> 00:03:23.737 align:middle line:-1
当你没有绑定调试器时

00:03:24.104 --> 00:03:28.041 align:middle line:-1
操作系统将以纯文本格式捕获此回溯

00:03:28.208 --> 00:03:31.044 align:middle line:-2
并将其保存到磁盘中的
人类可读的崩溃日志中

00:03:32.813 --> 00:03:36.149 align:middle line:-2
实际上如果是你的app的
发布版本崩溃了

00:03:36.216 --> 00:03:37.951 align:middle line:-1
其崩溃日志看来并不这么清晰明了

00:03:38.385 --> 00:03:42.155 align:middle line:-2
其中实际包含的是
二进制名称和地址列表

00:03:42.256 --> 00:03:44.892 align:middle line:-1
这是一个非符号化崩溃日志的片段

00:03:45.993 --> 00:03:48.896 align:middle line:-2
幸运的是 Xcode负责
对崩溃日志进行符号化处理

00:03:48.962 --> 00:03:51.431 align:middle line:-1
所以你会看到那些你熟悉的函数名

00:03:51.498 --> 00:03:54.334 align:middle line:-1
文件名和行号

00:03:56.837 --> 00:04:00.474 align:middle line:-1
有很多方法可以访问这些崩溃日志

00:03:56.837 --> 00:04:00.474 align:middle line:-1
有很多方法可以访问这些崩溃日志

00:04:00.941 --> 00:04:03.777 align:middle line:-1
我想首先谈谈如何访问这些崩溃日志

00:04:03.844 --> 00:04:07.614 align:middle line:-2
其可能来自TestFlight中的测试人员
或App Store中的用户

00:04:08.782 --> 00:04:10.651 align:middle line:-1
你可以使用Xcode中

00:04:10.717 --> 00:04:14.254 align:middle line:-2
被称为Crashes Organizer的功能
来下载这些崩溃日志

00:04:14.421 --> 00:04:17.124 align:middle line:-2
这就是它的样子
漂亮的暗色模式

00:04:18.158 --> 00:04:20.093 align:middle line:-1
让我们来浏览一下它的界面

00:04:20.928 --> 00:04:23.497 align:middle line:-1
你可以在左侧看到你在

00:04:23.564 --> 00:04:25.599 align:middle line:-2
TestFlight和
App Store上的所有app

00:04:26.066 --> 00:04:30.370 align:middle line:-2
它支持我们的所有平台
包括watchOS和app扩展

00:04:31.805 --> 00:04:34.041 align:middle line:-1
在右边 对于给定的崩溃点

00:04:34.241 --> 00:04:36.810 align:middle line:-1
你可以看到受影响的各种设备的数量

00:04:37.878 --> 00:04:42.015 align:middle line:-2
我们按类似问题 即类似崩溃点
来对崩溃日志进行分组

00:04:42.216 --> 00:04:45.752 align:middle line:-2
并按受影响的设备数量在源列表中
对它们进行排名

00:04:46.854 --> 00:04:50.524 align:middle line:-1
你可以在下方翻阅各个日志的样本

00:04:51.692 --> 00:04:56.330 align:middle line:-2
当你单击此按钮时
你可以在项目的调试导航器中

00:04:56.396 --> 00:04:59.032 align:middle line:-1
打开崩溃日志并与源代码一起查看

00:04:59.099 --> 00:05:02.636 align:middle line:-2
如果你以前没见过这个
它非常酷 我们稍后会看一下

00:04:59.099 --> 00:05:02.636 align:middle line:-2
如果你以前没见过这个
它非常酷 我们稍后会看一下

00:05:03.270 --> 00:05:07.207 align:middle line:-2
在详细视图中 我们会向你展示
一个完全符号化的回溯

00:05:07.474 --> 00:05:09.176 align:middle line:-1
并突出显示崩溃点

00:05:09.610 --> 00:05:12.546 align:middle line:-2
既然我们已经熟悉了这个界面
那就让我们试试吧

00:05:13.447 --> 00:05:15.682 align:middle line:-1
我在这里打开了Xcode

00:05:16.483 --> 00:05:19.286 align:middle line:-1
我将打开Organizer窗口

00:05:20.754 --> 00:05:22.723 align:middle line:-2
你可以看到
我选择了Crashes选项卡

00:05:22.789 --> 00:05:24.358 align:middle line:-1
即第二个标签

00:05:24.424 --> 00:05:28.095 align:middle line:-2
我选中了Kuba和我正研发的
这款Chocolate Chip app

00:05:28.896 --> 00:05:32.232 align:middle line:-2
我已将此构建版本
上传到TestFlight

00:05:32.299 --> 00:05:34.835 align:middle line:-1
你可以看到这是第五个构建版本

00:05:35.002 --> 00:05:37.237 align:middle line:-1
并且许多测试人员报告了崩溃现象

00:05:37.304 --> 00:05:38.438 align:middle line:-1
所以这不太好

00:05:38.505 --> 00:05:41.508 align:middle line:-1
你可以看到我已经处理过几起崩溃

00:05:41.575 --> 00:05:43.277 align:middle line:-1
但我还没有处理过第一个

00:05:43.343 --> 00:05:44.778 align:middle line:-1
所以让我们试着解决这问题

00:05:46.113 --> 00:05:48.749 align:middle line:-1
这影响了242个设备

00:05:49.016 --> 00:05:51.018 align:middle line:-2
我可以看到
app崩溃时所捕获的回溯

00:05:51.084 --> 00:05:54.121 align:middle line:-1
并且崩溃点被突出显示了

00:05:54.988 --> 00:05:56.590 align:middle line:-1
现在我还不太清楚发生了什么

00:05:56.657 --> 00:06:00.360 align:middle line:-2
但我确信如果我在源代码中
打开此崩溃日志

00:05:56.657 --> 00:06:00.360 align:middle line:-2
但我确信如果我在源代码中
打开此崩溃日志

00:06:00.427 --> 00:06:02.229 align:middle line:-1
我就能知道发生了什么

00:06:02.296 --> 00:06:04.531 align:middle line:-2
所以我要点击
“Open in Project”按钮

00:06:04.965 --> 00:06:08.035 align:middle line:-2
选择与app的第五次构建版本
相匹配的项目

00:06:08.635 --> 00:06:12.039 align:middle line:-1
你能看到的是这个崩溃日志

00:06:12.105 --> 00:06:15.809 align:middle line:-2
已在调试导航器中打开
就好像此app刚刚崩溃一样

00:06:16.810 --> 00:06:19.446 align:middle line:-2
而且我们现在暂停在
这个发生严重错误的地方

00:06:20.414 --> 00:06:24.318 align:middle line:-2
这时该问自己这里该使用
fatalError函数吗？

00:06:24.384 --> 00:06:27.054 align:middle line:-1
我只想在绝对必要的情况下崩溃

00:06:28.222 --> 00:06:34.461 align:middle line:-2
这是一个Int类型枚举的
初始化函数

00:06:35.128 --> 00:06:39.800 align:middle line:-2
并且枚举值只能是0或1
否则我会触发这个严重错误

00:06:40.167 --> 00:06:41.435 align:middle line:-1
我认为这是合理的

00:06:41.502 --> 00:06:45.405 align:middle line:-2
这个崩溃只有在程序员误用时
才会发生

00:06:45.706 --> 00:06:49.409 align:middle line:-1
如果我在这里向上查看调用堆栈

00:06:49.476 --> 00:06:51.612 align:middle line:-1
我可以看到这个初始化函数的调用者

00:06:52.112 --> 00:06:54.748 align:middle line:-1
即这个tableView委托方法

00:06:54.815 --> 00:06:59.052 align:middle line:-2
此方法要获取给定块编号中的
头部对应的标题

00:06:59.520 --> 00:07:02.022 align:middle line:-1
因此该块编号不能是0或1

00:06:59.520 --> 00:07:02.022 align:middle line:-1
因此该块编号不能是0或1

00:07:02.656 --> 00:07:05.225 align:middle line:-1
现在我想我知道发生了什么事了

00:07:05.292 --> 00:07:08.829 align:middle line:-2
但让我们尝试在app中重现此问题
看看我们是否可以了解更多信息

00:07:09.196 --> 00:07:10.364 align:middle line:-1
我点击开始

00:07:11.698 --> 00:07:15.369 align:middle line:-2
Chocolate Chip是食谱app
我存储了所有我最喜欢的食谱

00:07:15.736 --> 00:07:18.872 align:middle line:-1
我一直在测试这种生奶油食谱

00:07:19.039 --> 00:07:20.274 align:middle line:-1
你可以看到一切正常

00:07:20.340 --> 00:07:22.776 align:middle line:-2
我可以看到我的食材列表
以及步骤列表

00:07:22.843 --> 00:07:24.178 align:middle line:-1
这是食谱的两个部分

00:07:24.244 --> 00:07:27.948 align:middle line:-1
食材是第0部分 步骤是第1部分

00:07:28.549 --> 00:07:30.584 align:middle line:-1
如果我点击另一个食谱

00:07:31.285 --> 00:07:32.352 align:middle line:-1
我们崩溃了

00:07:32.719 --> 00:07:36.423 align:middle line:-2
我能看到的是
我们因同样的严重错误而停止了

00:07:36.590 --> 00:07:38.792 align:middle line:-1
并且回溯看起来与们一直在关注的

00:07:38.859 --> 00:07:40.594 align:middle line:-1
崩溃日志非常相似

00:07:40.661 --> 00:07:42.963 align:middle line:-2
这个信号表明
我们正在处理同样的问题

00:07:43.397 --> 00:07:46.033 align:middle line:-1
我通过点击删除来清除此崩溃日志

00:07:46.600 --> 00:07:49.102 align:middle line:-1
我们来看看这个调试会话

00:07:50.037 --> 00:07:51.338 align:middle line:-1
在这个严重错误中

00:07:51.405 --> 00:07:54.041 align:middle line:-1
我可以看到提示消息被打印出来

00:07:54.107 --> 00:07:56.043 align:middle line:-1
即块编号为8

00:07:56.109 --> 00:07:58.545 align:middle line:-2
这就是我们崩溃的原因
它不是0或1

00:07:59.513 --> 00:08:01.915 align:middle line:-1
现在看起来这都是我的错

00:07:59.513 --> 00:08:01.915 align:middle line:-1
现在看起来这都是我的错

00:08:02.482 --> 00:08:04.751 align:middle line:-1
当我实现这个类时

00:08:04.818 --> 00:08:08.088 align:middle line:-2
我实现了另一个
名为numberOfSections的委托方法

00:08:08.789 --> 00:08:12.693 align:middle line:-2
numberOfSections
的作用是返回头部的数量

00:08:12.893 --> 00:08:15.462 align:middle line:-1
然而我在这里返回的却是食材的数量

00:08:15.662 --> 00:08:17.464 align:middle line:-1
而ingredients.count的值为8

00:08:18.332 --> 00:08:20.567 align:middle line:-2
信不信由你 我有个好方法
可以解决这个问题

00:08:21.068 --> 00:08:22.970 align:middle line:-1
我知道我想要返回的是

00:08:23.036 --> 00:08:25.572 align:middle line:-2
此RecipeSection
枚举中的实例数

00:08:25.906 --> 00:08:28.075 align:middle line:-1
并且在Swift 4.2中

00:08:28.141 --> 00:08:31.912 align:middle line:-2
Swift开源社区
添加了一些新功能

00:08:31.979 --> 00:08:35.315 align:middle line:-2
非常感谢 这是一个名为
CaseIterable的协议

00:08:35.616 --> 00:08:39.486 align:middle line:-2
若我的RecipeSection
遵守CaseIterable

00:08:40.254 --> 00:08:42.121 align:middle line:-2
我可以重新实现
numberOfSections函数

00:08:42.188 --> 00:08:47.194 align:middle line:-2
返回该RecipeSection
枚举中所有实例的计数

00:08:47.461 --> 00:08:51.231 align:middle line:-1
这样我返回的值就为2

00:08:51.532 --> 00:08:53.634 align:middle line:-1
我将返回块的准确数量

00:08:53.700 --> 00:08:55.202 align:middle line:-1
这样就对了

00:08:57.004 --> 00:09:00.707 align:middle line:-2
现在如果我查看这个
Chocolate Chip Cookies配方

00:08:57.004 --> 00:09:00.707 align:middle line:-2
现在如果我查看这个
Chocolate Chip Cookies配方

00:09:00.774 --> 00:09:04.077 align:middle line:-2
app没有崩溃
我可以看到所有的食材和步骤

00:09:04.678 --> 00:09:07.147 align:middle line:-1
我做得很好 我对自己很满意

00:09:08.081 --> 00:09:12.819 align:middle line:-2
我可以回到Organizer
并将此问题标记为已解决

00:09:12.886 --> 00:09:15.622 align:middle line:-1
离开电脑并回去继续烘焙

00:09:23.130 --> 00:09:26.533 align:middle line:-2
你刚看到的是如何使用
Crashes Organizer

00:09:26.900 --> 00:09:29.403 align:middle line:-2
从TestFlight
下载崩溃日志

00:09:29.970 --> 00:09:32.873 align:middle line:-2
在源代码中打开日志
并解决问题

00:09:34.408 --> 00:09:36.243 align:middle line:-1
那你怎样才能开始呢？

00:09:36.710 --> 00:09:37.811 align:middle line:-1
很简单

00:09:39.112 --> 00:09:42.149 align:middle line:-2
对于你的用户
如果他们选择与第三方开发者共享

00:09:42.216 --> 00:09:44.952 align:middle line:-2
这就可以了
他们的崩溃日志会自动上传

00:09:46.220 --> 00:09:49.389 align:middle line:-2
你需要做的就是使用
Apple ID登录Xcode

00:09:51.124 --> 00:09:53.460 align:middle line:-1
在上传app时 你应该包含符号表

00:09:53.527 --> 00:09:56.830 align:middle line:-2
以便你能够得到崩溃日志的
服务器端符号化处理

00:09:58.065 --> 00:10:00.734 align:middle line:-2
打开Organizer窗口中
Crashes选项卡

00:09:58.065 --> 00:10:00.734 align:middle line:-2
打开Organizer窗口中
Crashes选项卡

00:10:00.801 --> 00:10:02.135 align:middle line:-1
来查看这些崩溃

00:10:05.005 --> 00:10:08.175 align:middle line:-2
我们已经讲完了如何在
Organizer中查看崩溃

00:10:09.743 --> 00:10:12.713 align:middle line:-2
但若你没通过TestFlight
或App Store分发app

00:10:12.779 --> 00:10:14.581 align:middle line:-1
你还有其它几种选择

00:10:15.983 --> 00:10:17.417 align:middle line:-1
比如Devices窗口

00:10:18.418 --> 00:10:22.055 align:middle line:-2
当你连接了设备时
你可以点击这个查看日志按钮

00:10:22.289 --> 00:10:25.092 align:middle line:-1
这将显示该设备上保存的所有日志

00:10:25.158 --> 00:10:26.560 align:middle line:-1
并且这些日志

00:10:26.627 --> 00:10:29.129 align:middle line:-2
是使用Mac上的本地符号信息
符号化的

00:10:31.031 --> 00:10:35.836 align:middle line:-2
当你使用Xcode、Xcode Server
或Xcode Build运行-xe测试时

00:10:36.870 --> 00:10:41.108 align:middle line:-2
测试结果包将包含
来自你的app的任何崩溃日志

00:10:41.341 --> 00:10:43.710 align:middle line:-1
它们是在该测试运行期间写出的

00:10:43.977 --> 00:10:46.146 align:middle line:-2
这非常方便
并且这些崩溃日志

00:10:46.213 --> 00:10:47.481 align:middle line:-1
也是符号化的

00:10:49.049 --> 00:10:50.651 align:middle line:-1
你可以使用Mac控制台app

00:10:50.717 --> 00:10:54.421 align:middle line:-2
在Mac或模拟器中
查看任何崩溃日志

00:10:55.822 --> 00:11:00.994 align:middle line:-2
在设备上选择Settings-&gt;Privacy-&gt;
Analytics-&gt;Analytics Data

00:10:55.822 --> 00:11:00.994 align:middle line:-2
在设备上选择Settings-&gt;Privacy-&gt;
Analytics-&gt;Analytics Data

00:11:01.061 --> 00:11:03.030 align:middle line:-1
你可以看到保存到磁盘的所有日志

00:11:03.096 --> 00:11:06.033 align:middle line:-2
你的用户可以直接
在此屏幕上共享日志

00:11:08.535 --> 00:11:09.369 align:middle line:-1
好的

00:11:09.770 --> 00:11:12.673 align:middle line:-1
为了确保符号化能够正常工作

00:11:12.739 --> 00:11:15.175 align:middle line:-1
我想谈三个重要的最佳实践

00:11:16.009 --> 00:11:17.010 align:middle line:-1
第一

00:11:18.145 --> 00:11:21.982 align:middle line:-2
若你用Crashes Organizer
请与你的app一起上传符号表

00:11:22.049 --> 00:11:23.150 align:middle line:-1
这是默认行为

00:11:23.517 --> 00:11:27.354 align:middle line:-2
这将确保服务器端符号化
能够正常工作 非常简单

00:11:28.689 --> 00:11:32.559 align:middle line:-1
第二 请务必保存你的app档案

00:11:33.026 --> 00:11:37.097 align:middle line:-2
你的档案包含调试符号的副本
即你的dSYM

00:11:37.564 --> 00:11:40.100 align:middle line:-2
Xcode用Spotlight
查找dSYM

00:11:40.167 --> 00:11:43.537 align:middle line:-1
并在必要时自动执行本地符号化

00:11:45.305 --> 00:11:48.609 align:middle line:-1
如果你上传包含位码的app

00:11:49.243 --> 00:11:53.146 align:middle line:-2
你应该使用“Archives Organizer
Download Debug Symbols”按钮

00:11:53.213 --> 00:11:56.917 align:middle line:-1
来下载位码编译生成的任何dSYM

00:11:58.819 --> 00:12:02.022 align:middle line:-1
我们已经涵盖了我们提供的所有工具

00:11:58.819 --> 00:12:02.022 align:middle line:-1
我们已经涵盖了我们提供的所有工具

00:12:02.089 --> 00:12:04.591 align:middle line:-1
用于在发生崩溃时通过日志访问它们

00:12:05.292 --> 00:12:09.229 align:middle line:-2
现在为了向你提供
有关阅读崩溃日志内容的深入指南

00:12:09.296 --> 00:12:12.366 align:middle line:-1
请热烈欢迎Greg Parker

00:12:13.467 --> 00:12:15.002 align:middle line:-1
（分析崩溃日志）

00:12:17.938 --> 00:12:19.072 align:middle line:-1
谢谢你 Chris

00:12:19.273 --> 00:12:23.510 align:middle line:-2
我们刚刚看到了
如何使用Xcode查找崩溃

00:12:23.577 --> 00:12:27.080 align:middle line:-2
以及如何在调试器的
Xcode工具中检查它们

00:12:28.015 --> 00:12:31.685 align:middle line:-1
但崩溃日志文件包含更多信息

00:12:31.752 --> 00:12:34.788 align:middle line:-1
它包含的信息远不止堆栈跟踪

00:12:35.088 --> 00:12:38.725 align:middle line:-1
在调试你的问题的过程中

00:12:38.892 --> 00:12:40.627 align:middle line:-1
查看这些额外信息通常很有用

00:12:41.361 --> 00:12:44.398 align:middle line:-1
那么你如何得到崩溃日志的全文呢？

00:12:44.965 --> 00:12:46.567 align:middle line:-2
这是我们的
Xcode Organizer

00:12:46.900 --> 00:12:51.104 align:middle line:-2
如果我们调出上下文菜单
就会出现“Show in Finder”按钮

00:12:51.839 --> 00:12:54.408 align:middle line:-2
“Show In Finder”
按钮将打开一个文本文件

00:12:54.474 --> 00:12:58.345 align:middle line:-2
我们可以在控制台app
或你喜欢的文本编辑器中打开它

00:12:58.579 --> 00:13:00.080 align:middle line:-1
它看起来像这样

00:12:58.579 --> 00:13:00.080 align:middle line:-1
它看起来像这样

00:13:00.914 --> 00:13:03.116 align:middle line:-2
那么这个文件里有什么呢？
让我们来看看

00:13:03.750 --> 00:13:07.254 align:middle line:-1
文件顶部以一些摘要信息开始

00:13:07.621 --> 00:13:10.524 align:middle line:-1
这包含你的app名称、版本号

00:13:10.824 --> 00:13:13.460 align:middle line:-1
运行它的操作系统版本

00:13:13.527 --> 00:13:15.395 align:middle line:-1
以及崩溃的日期和时间

00:13:16.597 --> 00:13:19.399 align:middle line:-1
在它下面是崩溃的原因

00:13:19.700 --> 00:13:23.070 align:middle line:-2
这是操作系统发送的
用来杀死该进程的

00:13:23.136 --> 00:13:25.939 align:middle line:-1
具体错误或特定信号

00:13:27.307 --> 00:13:30.677 align:middle line:-1
我们还可以看到一些日志信息

00:13:30.744 --> 00:13:33.614 align:middle line:-2
它位于“Application Specific
Information”这部分

00:13:34.248 --> 00:13:37.885 align:middle line:-2
在某些情况下
此部分将包含控制台日志

00:13:37.951 --> 00:13:41.822 align:middle line:-2
如果你有未处理的异常
则它可能包含异常回溯

00:13:42.956 --> 00:13:45.292 align:middle line:-1
此部分并非始终可用

00:13:45.359 --> 00:13:50.697 align:middle line:-2
在iOS设备上 出于个人隐私原因
它通常会被隐藏

00:13:51.064 --> 00:13:53.000 align:middle line:-1
但是在macOS的模拟器中

00:13:53.066 --> 00:13:55.769 align:middle line:-1
此部分可以包含有用的信息

00:13:57.504 --> 00:13:59.706 align:middle line:-1
在它下面 我们可以看到线程堆栈

00:13:59.773 --> 00:14:02.075 align:middle line:-1
这些是在崩溃时运行的

00:13:59.773 --> 00:14:02.075 align:middle line:-1
这些是在崩溃时运行的

00:14:02.142 --> 00:14:04.011 align:middle line:-1
所有线程的回溯

00:14:04.411 --> 00:14:06.780 align:middle line:-1
其中一个被标记为崩溃线程

00:14:07.414 --> 00:14:09.249 align:middle line:-1
其它的是

00:14:09.316 --> 00:14:12.052 align:middle line:-1
在进程终止时正在运行的所有线程

00:14:13.820 --> 00:14:16.823 align:middle line:-1
在它下面是一些低级信息

00:14:16.890 --> 00:14:20.594 align:middle line:-1
我们有崩溃线程的寄存器状态

00:14:21.228 --> 00:14:24.865 align:middle line:-1
还有加载到进程中的二进制数据镜像

00:14:25.265 --> 00:14:29.670 align:middle line:-2
这是app可执行文件
和所有其它的库

00:14:30.237 --> 00:14:36.376 align:middle line:-1
Xcode使用它进行符号化

00:14:36.443 --> 00:14:39.813 align:middle line:-2
以查找符号 文件和行号信息
并显示在堆栈跟踪中

00:14:41.081 --> 00:14:43.350 align:middle line:-1
以上就是崩溃日志文件的内容

00:14:43.917 --> 00:14:47.521 align:middle line:-2
那么我们如何调试它
我们如何阅读 我们该看什么？

00:14:48.388 --> 00:14:52.426 align:middle line:-2
我们从崩溃原因开始
即异常类型

00:14:53.093 --> 00:14:57.664 align:middle line:-2
在这个例子中
异常类型为EXC_BAD_INSTRUCTION异常

00:14:58.065 --> 00:15:02.536 align:middle line:-2
SIGILL信号指的是
非法指令信号

00:14:58.065 --> 00:15:02.536 align:middle line:-2
SIGILL信号指的是
非法指令信号

00:15:03.303 --> 00:15:05.806 align:middle line:-1
这意味着CPU正在尝试执行

00:15:05.873 --> 00:15:10.143 align:middle line:-1
由于某种原因不存在或无效的指令

00:15:10.210 --> 00:15:12.012 align:middle line:-1
这就是这个进程终止的原因

00:15:14.081 --> 00:15:17.684 align:middle line:-1
我们还可以查看崩溃的线程

00:15:17.751 --> 00:15:20.320 align:middle line:-1
崩溃时正在运行的代码是什么

00:15:20.821 --> 00:15:25.526 align:middle line:-2
这里我们在Swift运行时中
看到fatalErrorMessage函数

00:15:25.893 --> 00:15:29.563 align:middle line:-2
我们并不清楚
fatalErrorMessage函数的作用

00:15:30.864 --> 00:15:36.103 align:middle line:-2
此案例中的错误消息被包含在 “Application
Specific Information”项中

00:15:36.370 --> 00:15:40.841 align:middle line:-2
所以我们可以看到当进程退出时
Swift运行时打印的内容

00:15:45.345 --> 00:15:48.015 align:middle line:-1
让我们仔细看看这个堆栈跟踪

00:15:48.482 --> 00:15:50.817 align:middle line:-2
我们看到了
fatalErrorMessage函数

00:15:51.618 --> 00:15:55.055 align:middle line:-2
并且是我们代码中的
一个函数调用了它

00:15:55.122 --> 00:16:00.494 align:middle line:-2
我们有一个Recipe类
其image函数被调用

00:15:55.122 --> 00:16:00.494 align:middle line:-2
我们有一个Recipe类
其image函数被调用

00:16:00.928 --> 00:16:03.764 align:middle line:-1
并且该函数由于某些错误又调用了

00:16:03.830 --> 00:16:05.666 align:middle line:-1
fatalErrorMessage函数

00:16:06.934 --> 00:16:11.271 align:middle line:-2
因为这是带有完整调试信息的
符号化堆栈跟踪

00:16:11.338 --> 00:16:15.576 align:middle line:-2
我们可以看到一个文件和代码行号
其指明崩溃发生的地方

00:16:16.710 --> 00:16:20.214 align:middle line:-2
所以我们可以看看那段代码
我们打开该项目

00:16:20.280 --> 00:16:22.516 align:middle line:-1
这是RecipeImage.swift

00:16:22.916 --> 00:16:25.819 align:middle line:-1
第26行是在崩溃中标记的那一行

00:16:26.653 --> 00:16:29.323 align:middle line:-2
你们中那些经验丰富的
Swift程序员

00:16:29.389 --> 00:16:32.893 align:middle line:-2
应该容易猜出
为什么这行代码可能会崩溃

00:16:33.827 --> 00:16:36.830 align:middle line:-1
这是一个强制解包运算符

00:16:37.664 --> 00:16:40.634 align:middle line:-2
我们有一个函数
即UIImage构造函数

00:16:40.701 --> 00:16:42.736 align:middle line:-1
它返回一个可选值

00:16:43.470 --> 00:16:45.339 align:middle line:-1
如果可选值为nil

00:16:45.506 --> 00:16:49.376 align:middle line:-1
强制解包运算符将停止进程

00:16:49.743 --> 00:16:52.246 align:middle line:-1
生成崩溃日志并退出

00:16:53.714 --> 00:16:56.917 align:middle line:-1
若我们还记得刚才的app特定信息

00:16:57.117 --> 00:17:00.721 align:middle line:-1
它包含当这个错误检查失败时

00:16:57.117 --> 00:17:00.721 align:middle line:-1
它包含当这个错误检查失败时

00:17:00.787 --> 00:17:03.724 align:middle line:-1
Swift运行时所打印的错误消息

00:17:03.790 --> 00:17:07.227 align:middle line:-2
即“在解包可选值时
意外发现nil”

00:17:08.729 --> 00:17:12.766 align:middle line:-1
这很好 因为它与代码一致

00:17:12.833 --> 00:17:16.136 align:middle line:-2
我们在第26行有一个
强制解包运算符

00:17:16.203 --> 00:17:19.106 align:middle line:-1
我们在崩溃日志中有一条错误消息

00:17:19.173 --> 00:17:21.575 align:middle line:-1
该消息说我们正在解包一个可选值

00:17:21.974 --> 00:17:25.878 align:middle line:-2
造成这次崩溃的原因
就变得很合理并且一致了

00:17:29.049 --> 00:17:31.885 align:middle line:-1
强制解包失败

00:17:31.952 --> 00:17:35.589 align:middle line:-2
是代码中的前提条件或断言的
一个例子

00:17:36.290 --> 00:17:38.725 align:middle line:-1
前提条件和断言是一种错误检查

00:17:38.792 --> 00:17:42.362 align:middle line:-1
它在发现错误时主动停止进程

00:17:43.730 --> 00:17:47.367 align:middle line:-2
它们的一些例子包括
我们刚刚看到的

00:17:47.434 --> 00:17:48.435 align:middle line:-1
强制解包可选值

00:17:48.802 --> 00:17:50.737 align:middle line:-1
Swift运行时将断言

00:17:50.971 --> 00:17:52.339 align:middle line:-1
可选值不是nil

00:17:53.273 --> 00:17:54.374 align:middle line:-1
否则就会崩溃

00:17:55.609 --> 00:17:59.046 align:middle line:-2
另一个例子是
Swift.Array访问越界

00:17:59.980 --> 00:18:03.383 align:middle line:-1
如果你访问一个数组且索引超出范围

00:17:59.980 --> 00:18:03.383 align:middle line:-1
如果你访问一个数组且索引超出范围

00:18:03.650 --> 00:18:05.419 align:middle line:-1
Swift运行时将失败

00:18:05.485 --> 00:18:08.822 align:middle line:-2
检查到它不满足该前提条件
并终止该进程

00:18:10.023 --> 00:18:13.327 align:middle line:-1
Swift算术溢出也包含断言

00:18:13.794 --> 00:18:15.696 align:middle line:-1
如果将两个数字加在一起

00:18:15.762 --> 00:18:18.131 align:middle line:-1
并且其结果对于整数变量来说太大了

00:18:18.465 --> 00:18:21.335 align:middle line:-2
这将无法满足一个前提条件
该进程将被终止

00:18:22.803 --> 00:18:28.242 align:middle line:-2
未捕获的异常通常是由
代码中的前提条件引起的

00:18:28.675 --> 00:18:32.312 align:middle line:-2
系统中存在许多错误检查
如果其前提条件无法满足

00:18:32.379 --> 00:18:36.283 align:middle line:-1
它会抛出异常 如果没有捕获该异常

00:18:36.583 --> 00:18:39.520 align:middle line:-1
未捕获的异常将写入崩溃日志

00:18:40.587 --> 00:18:44.958 align:middle line:-2
当然你也可以在自己的代码中
编写断言和前提条件

00:18:45.192 --> 00:18:48.295 align:middle line:-2
如果你有一些错误
需要使进程崩溃

00:18:48.362 --> 00:18:50.564 align:middle line:-1
并生成崩溃日志作为响应

00:18:52.900 --> 00:18:54.601 align:middle line:-1
崩溃日志的另一个例子

00:18:54.668 --> 00:19:00.140 align:middle line:-1
是操作系统从外部杀死进程的情况

00:18:54.668 --> 00:19:00.140 align:middle line:-1
是操作系统从外部杀死进程的情况

00:19:01.441 --> 00:19:05.846 align:middle line:-2
这方面的一个例子是监视程序事件
例如超时

00:19:06.180 --> 00:19:09.116 align:middle line:-2
如果你的app
花费过多时间执行某个任务

00:19:09.416 --> 00:19:11.752 align:middle line:-1
操作系统可能会检测到它

00:19:11.985 --> 00:19:15.822 align:middle line:-1
并会终止进程并生成特定的崩溃日志

00:19:17.124 --> 00:19:18.692 align:middle line:-1
环境条件

00:19:18.759 --> 00:19:21.795 align:middle line:-1
也可能导致操作系统终止进程

00:19:22.162 --> 00:19:23.897 align:middle line:-1
如果设备过热

00:19:24.064 --> 00:19:27.734 align:middle line:-2
操作系统将终止
使用过多CPU的进程

00:19:28.101 --> 00:19:30.137 align:middle line:-1
如果设备内存不足

00:19:30.204 --> 00:19:33.507 align:middle line:-1
操作系统将终止使用大量内存的进程

00:19:34.842 --> 00:19:37.377 align:middle line:-1
另一种情况是无效的代码签名

00:19:37.678 --> 00:19:41.348 align:middle line:-1
操作系统强制要求代码需要被签名

00:19:41.481 --> 00:19:44.585 align:middle line:-1
如果签名无效或代码未签名

00:19:44.818 --> 00:19:46.820 align:middle line:-1
操作系统将终止进程

00:19:46.987 --> 00:19:49.289 align:middle line:-1
并生成特定类型的崩溃日志

00:19:50.991 --> 00:19:53.026 align:middle line:-1
操作系统的这些终止行为

00:19:53.093 --> 00:19:55.562 align:middle line:-2
可以在Xcode的
Devices窗口中找到

00:19:55.629 --> 00:19:57.764 align:middle line:-2
你也可以在macOS控制台中
找到它们

00:19:58.065 --> 00:20:01.335 align:middle line:-2
但它们并不总是出现在
Xcode Organizer中

00:19:58.065 --> 00:20:01.335 align:middle line:-2
但它们并不总是出现在
Xcode Organizer中

00:20:01.401 --> 00:20:02.970 align:middle line:-1
所以要小心这点

00:20:05.172 --> 00:20:09.076 align:middle line:-2
在Apple开发者文档中
我们有一个技术说明

00:20:09.142 --> 00:20:13.814 align:middle line:-2
它描述了崩溃日志的
许多不同签名和结构

00:20:13.881 --> 00:20:16.884 align:middle line:-2
就像这个例子一样
它们长什么样

00:20:16.950 --> 00:20:18.418 align:middle line:-1
你如何识别它们

00:20:19.086 --> 00:20:21.688 align:middle line:-1
它比我们在这里讲的更详细

00:20:23.257 --> 00:20:24.825 align:middle line:-1
但是让我们看一个例子

00:20:25.692 --> 00:20:27.361 align:middle line:-1
这是另一个崩溃日志文件

00:20:27.761 --> 00:20:30.397 align:middle line:-1
同样 为了解崩溃日志

00:20:30.464 --> 00:20:32.232 align:middle line:-1
我们从崩溃原因开始

00:20:32.766 --> 00:20:36.670 align:middle line:-2
在这个例子中 崩溃的原因
是EXC_CRASH异常

00:20:36.837 --> 00:20:38.906 align:middle line:-1
其带有SIGKILL信号

00:20:39.740 --> 00:20:42.442 align:middle line:-1
通常SIGKILL信号被用在

00:20:42.509 --> 00:20:45.479 align:middle line:-1
当操作系统想要终止你的进程时

00:20:45.946 --> 00:20:47.848 align:middle line:-1
它会发送SIGKILL信号

00:20:47.915 --> 00:20:52.619 align:middle line:-2
SIGKILL信号无法被处理
你的进程也无法捕获它

00:20:52.686 --> 00:20:54.855 align:middle line:-2
作为对该信号的响应
该进程会终止

00:20:56.657 --> 00:20:58.258 align:middle line:-1
我们也可以在崩溃日志中看到

00:20:58.325 --> 00:21:00.994 align:middle line:-1
操作系统发送该信号的原因

00:20:58.325 --> 00:21:00.994 align:middle line:-1
操作系统发送该信号的原因

00:21:01.328 --> 00:21:05.966 align:middle line:-2
在这个例子中
终止原因的代码为8badf00d

00:21:06.433 --> 00:21:09.736 align:middle line:-2
如果你查看我之前提到的
开发者技术说明

00:21:09.803 --> 00:21:12.573 align:middle line:-1
它将描述8badf00d的含义

00:21:13.106 --> 00:21:15.576 align:middle line:-1
我们有一个文本描述说

00:21:15.642 --> 00:21:20.514 align:middle line:-1
“耗尽实际时钟时间19.95秒”

00:21:21.181 --> 00:21:24.551 align:middle line:-2
所以如果我们将这些信息
与技术说明中的信息结合起来

00:21:24.618 --> 00:21:29.089 align:middle line:-2
它会告诉我们
我们的app启动时间太长

00:21:29.323 --> 00:21:33.026 align:middle line:-2
我们有20秒钟启动
然而app没能在该时限内完成启动

00:21:33.327 --> 00:21:35.429 align:middle line:-1
操作系统终止了该进程

00:21:36.597 --> 00:21:40.801 align:middle line:-2
在下方我们可以看到
进程终止时的崩溃日志

00:21:41.101 --> 00:21:44.938 align:middle line:-2
这些崩溃日志可能是说
代码花了太长时间

00:21:45.005 --> 00:21:46.940 align:middle line:-1
它可能陷入死循环

00:21:47.608 --> 00:21:51.578 align:middle line:-2
可能卡在等待网络I/O
这就是为什么我们花了太长时间启动

00:21:52.179 --> 00:21:55.215 align:middle line:-2
或者 另一方面
也许这段代码是无辜的

00:21:55.282 --> 00:21:57.818 align:middle line:-2
并且在启动过程之前
有一些东西运行太慢了

00:21:57.885 --> 00:22:00.521 align:middle line:-1
这也可能是这个进程终止的原因

00:21:57.885 --> 00:22:00.521 align:middle line:-1
这也可能是这个进程终止的原因

00:22:04.057 --> 00:22:06.860 align:middle line:-1
启动超时 你如何能避免呢

00:22:07.261 --> 00:22:10.864 align:middle line:-2
我们希望你能避免它们
启动超时是无法通过

00:22:10.931 --> 00:22:14.535 align:middle line:-2
Apple app审核流程的
一个常见原因

00:22:16.003 --> 00:22:17.171 align:middle line:-1
那你该怎么避免它呢？

00:22:17.237 --> 00:22:19.173 align:middle line:-1
首先当然是请测试你的app

00:22:19.573 --> 00:22:21.175 align:middle line:-1
但是有一个问题

00:22:22.342 --> 00:22:26.880 align:middle line:-1
即模拟器中禁用了启动超时监视程序

00:22:26.947 --> 00:22:28.815 align:middle line:-1
并且它在调试器中也被禁用了

00:22:29.316 --> 00:22:31.919 align:middle line:-2
所以如果你在模拟器和调试器中
进行所有测试

00:22:31.985 --> 00:22:33.987 align:middle line:-1
你永远不会看到超时警报

00:22:35.122 --> 00:22:39.893 align:middle line:-2
因此在测试app时
请确保在没有调试器的情况下进行

00:22:40.260 --> 00:22:43.397 align:middle line:-2
如果是macOS app
请在Finder中启动你的app

00:22:43.664 --> 00:22:47.367 align:middle line:-2
如果是iOS app
请在TestFlight中运行

00:22:47.434 --> 00:22:50.737 align:middle line:-1
或使用iOS app启动器来启动

00:22:51.004 --> 00:22:54.007 align:middle line:-2
所有这些方法都将在调试器外
运行你的app

00:22:54.074 --> 00:22:57.010 align:middle line:-2
并会启用且强制执行
对启动超时的监控

00:22:58.312 --> 00:23:02.382 align:middle line:-2
当你测试时 请在真实设备上进行
即在模拟器之外进行测试

00:22:58.312 --> 00:23:02.382 align:middle line:-2
当你测试时 请在真实设备上进行
即在模拟器之外进行测试

00:23:02.883 --> 00:23:06.587 align:middle line:-2
并尝试使用较旧的硬件
测试你的app

00:23:06.653 --> 00:23:10.457 align:middle line:-1
即你希望app所支持的最旧的硬件

00:23:10.958 --> 00:23:13.160 align:middle line:-1
如果你只在较新的硬件上测试

00:23:13.227 --> 00:23:17.431 align:middle line:-2
你可能会发现你的app
在更快的设备上启动得足够快

00:23:17.831 --> 00:23:20.634 align:middle line:-1
但较慢的设备可能会花费太多时间

00:23:24.171 --> 00:23:26.673 align:middle line:-1
让我们谈谈另一类错误

00:23:26.740 --> 00:23:31.144 align:middle line:-2
让我们来谈谈内存错误
以及它们在崩溃日志中的样子

00:23:32.379 --> 00:23:33.714 align:middle line:-1
当我说内存错误时

00:23:33.780 --> 00:23:39.686 align:middle line:-2
我指的是像过早释放对象的引用计数
这样的情况

00:23:39.987 --> 00:23:43.357 align:middle line:-1
或使用已经被释放的对象

00:23:43.624 --> 00:23:47.828 align:middle line:-2
或缓冲区溢出
即有一个字节数组

00:23:47.895 --> 00:23:51.932 align:middle line:-2
或一个C数组
而你尝试访问数组之外的内容

00:23:53.600 --> 00:23:55.669 align:middle line:-1
让我们看看另一个崩溃日志

00:23:55.903 --> 00:23:58.739 align:middle line:-1
剧透一下 这是一个内存错误

00:23:59.773 --> 00:24:03.010 align:middle line:-1
我们再次从异常类型开始

00:23:59.773 --> 00:24:03.010 align:middle line:-1
我们再次从异常类型开始

00:24:03.343 --> 00:24:09.616 align:middle line:-2
这是EXC_BAD_ACCESS
即段冲突信号

00:24:10.150 --> 00:24:13.253 align:middle line:-1
这通常是由内存错误引起的

00:24:13.587 --> 00:24:16.623 align:middle line:-1
错误访问异常意味着两件事之一

00:24:16.690 --> 00:24:20.327 align:middle line:-1
我们要么写入只读的内存

00:24:20.761 --> 00:24:23.830 align:middle line:-2
要么我们尝试从内存中读取
根本不存在的内容

00:24:24.231 --> 00:24:27.134 align:middle line:-1
其中任何一个都会导致错误访问异常

00:24:27.201 --> 00:24:28.769 align:middle line:-1
并且该进程将终止

00:24:29.736 --> 00:24:30.804 align:middle line:-1
我们在这里可以看到

00:24:31.104 --> 00:24:34.775 align:middle line:-1
我们在崩溃时试图访问的地址

00:24:36.610 --> 00:24:38.278 align:middle line:-1
我们可以查看这些堆栈跟踪

00:24:38.345 --> 00:24:41.448 align:middle line:-1
这就是执行错误访问的函数

00:24:41.782 --> 00:24:45.886 align:middle line:-1
这是objc_release函数

00:24:45.953 --> 00:24:50.390 align:middle line:-2
它是Objective-C和
Swift对象中引用计数实现的一部分

00:24:50.891 --> 00:24:52.025 align:middle line:-1
再者

00:24:52.092 --> 00:24:55.662 align:middle line:-2
这听起来很可能是
导致该漏洞的内存错误

00:24:57.331 --> 00:25:00.501 align:middle line:0
那么是什么代码调用了
objc_release函数呢？

00:24:57.331 --> 00:25:00.501 align:middle line:0
那么是什么代码调用了
objc_release函数呢？

00:25:00.868 --> 00:25:02.903 align:middle line:0
我们可以查看堆栈跟踪的其余部分

00:25:03.103 --> 00:25:05.906 align:middle line:0
我们看到
object_dispose函数

00:25:06.373 --> 00:25:08.942 align:middle line:0
这是Objective-C
运行时中的一个函数

00:25:09.009 --> 00:25:11.311 align:middle line:0
它用于释放对象

00:25:12.513 --> 00:25:13.981 align:middle line:0
object_dispose函数

00:25:14.047 --> 00:25:18.585 align:middle line:0
在我们的一个类上调用了
名为__ivar_destroyer的函数

00:25:18.652 --> 00:25:20.954 align:middle line:0
我们的LoginViewController类

00:25:21.855 --> 00:25:25.792 align:middle line:0
__ivar_destroyer
函数是Swift代码的一部分

00:25:25.859 --> 00:25:28.295 align:middle line:-1
这个函数用来清理属性

00:25:28.362 --> 00:25:32.699 align:middle line:-2
即在一个对象被释放时
清除对象的ivar存储

00:25:34.001 --> 00:25:37.437 align:middle line:0
所以这告诉我们
造成崩溃的一部分原因

00:25:37.971 --> 00:25:42.543 align:middle line:0
我们当时正在释放
LoginViewController类的对象

00:25:43.544 --> 00:25:49.249 align:middle line:0
这个类在其初始化代码中
试图清理其属性及ivar

00:25:49.583 --> 00:25:53.253 align:middle line:0
并且在释放其中一个属性时
程序崩溃了

00:25:54.521 --> 00:25:57.157 align:middle line:0
所以这给了我们
所发生问题的一些细节

00:25:57.224 --> 00:26:00.160 align:middle line:-2
我们可以做得更好吗
崩溃日志中是否包含更多

00:25:57.224 --> 00:26:00.160 align:middle line:-2
我们可以做得更好吗
崩溃日志中是否包含更多

00:26:00.227 --> 00:26:01.962 align:middle line:-1
可以告诉我们发生了什么的信息？

00:26:03.463 --> 00:26:06.633 align:middle line:-1
我们可以看一下无效地址本身

00:26:07.167 --> 00:26:13.207 align:middle line:-2
有时实际的错误地址值
将包含有用的信息

00:26:13.874 --> 00:26:15.809 align:middle line:-1
这个发生错误的地址

00:26:15.876 --> 00:26:19.546 align:middle line:-2
我可以告诉你
它看起来像是使用了被释放的空间

00:26:20.414 --> 00:26:21.548 align:middle line:-1
我是怎么知道的呢？

00:26:21.615 --> 00:26:25.018 align:middle line:-2
部分是因为长期的经验
当你查看足够多的崩溃日志时

00:26:25.252 --> 00:26:28.722 align:middle line:-1
你就能够开始找出错误值的一些模式

00:26:29.790 --> 00:26:31.725 align:middle line:-1
这个错误值

00:26:32.526 --> 00:26:37.898 align:middle line:-2
看起来非常像malloc
内存分配器的地址范围

00:26:38.131 --> 00:26:40.968 align:middle line:-1
我们碰巧在此崩溃日志中可以看到它

00:26:41.869 --> 00:26:45.205 align:middle line:-1
我们有了内存分配器使用的地址范围

00:26:45.506 --> 00:26:50.677 align:middle line:-2
我们的无效地址看起来
就在malloc范围内

00:26:51.311 --> 00:26:55.382 align:middle line:-2
但它被偏移了4位
它被旋转了4位

00:26:55.816 --> 00:26:59.686 align:middle line:-2
所以看起来它是一个经过旋转的
有效malloc地址

00:27:01.355 --> 00:27:05.092 align:middle line:-1
这是内存分配器本身提供的线索

00:27:05.158 --> 00:27:06.760 align:middle line:-1
让我告诉你为什么是这样

00:27:07.394 --> 00:27:10.831 align:middle line:-2
这是我们的对象
在它仍然有效时的样子

00:27:11.398 --> 00:27:13.934 align:middle line:-1
一个对象以isa字段开始

00:27:14.001 --> 00:27:16.970 align:middle line:-1
isa字段指向对象的类

00:27:17.237 --> 00:27:19.840 align:middle line:-2
这就是
Objective-C对象的结构

00:27:19.907 --> 00:27:22.442 align:middle line:-1
这也是一些Swift对象的结构

00:27:23.043 --> 00:27:25.479 align:middle line:-2
objc_release函数
是做什么的呢？

00:27:26.113 --> 00:27:30.384 align:middle line:-2
它读取isa字段
然后解引用该isa字段

00:27:30.450 --> 00:27:33.820 align:middle line:-1
从而可以到该类对象中查找其方法

00:27:35.122 --> 00:27:38.392 align:middle line:-2
通常这当然是有效的
这是正常情况下所发生的事情

00:27:39.259 --> 00:27:42.396 align:middle line:-1
但若我们的对象已被释放会怎样呢？

00:27:44.331 --> 00:27:47.267 align:middle line:-1
当释放函数删除一个对象时

00:27:48.302 --> 00:27:52.573 align:middle line:-2
它将其插入到一个
由其它无效对象构成的释放列表中

00:27:53.106 --> 00:27:57.978 align:middle line:-2
它会将一个释放列表指针
写入列表中的下一个对象

00:27:58.245 --> 00:28:00.047 align:middle line:-2
写入位置
即以前isa字段所在位置

00:27:58.245 --> 00:28:00.047 align:middle line:-2
写入位置
即以前isa字段所在位置

00:28:01.281 --> 00:28:05.485 align:middle line:-2
但是以一种稍微扭曲的方式
它不会在该字段中直接写入指针

00:28:05.552 --> 00:28:08.989 align:middle line:-1
而是将旋转后的指针写入该字段

00:28:09.489 --> 00:28:12.159 align:middle line:-1
它想确保写在那里的值

00:28:12.226 --> 00:28:15.062 align:middle line:-1
不是有效的内存地址

00:28:15.262 --> 00:28:18.765 align:middle line:-2
这正是错误使用该对象
造成崩溃的原因

00:28:20.133 --> 00:28:23.537 align:middle line:-2
所以当objc_release
读取isa字段时

00:28:23.604 --> 00:28:26.807 align:middle line:-2
它得到的是一个
旋转后的释放列表指针

00:28:27.274 --> 00:28:30.911 align:middle line:-2
当它解引用旋转后的释放列表指针时
它就会崩溃

00:28:31.912 --> 00:28:35.782 align:middle line:-2
内存分配器为我们做了这件事
它故意旋转了指针

00:28:35.849 --> 00:28:38.619 align:middle line:-2
以确保如果我们再次尝试使用它
就会发生崩溃

00:28:40.120 --> 00:28:43.190 align:middle line:-2
这就是我们在此崩溃日志中
看到的签名

00:28:43.557 --> 00:28:49.463 align:middle line:-2
我们的无效地址字段看起来
像是malloc区域中的指针

00:28:49.530 --> 00:28:53.567 align:middle line:-2
但旋转的方式与malloc
旋转其释放列表指针的方式相同

00:28:54.201 --> 00:28:55.769 align:middle line:-1
这是一个明显的信号

00:28:55.836 --> 00:29:00.507 align:middle line:-1
即我们在代码中尝试释放的对象

00:28:55.836 --> 00:29:00.507 align:middle line:-1
即我们在代码中尝试释放的对象

00:29:00.641 --> 00:29:04.478 align:middle line:-1
已被释放了 这就是发生的内存错误

00:29:06.079 --> 00:29:09.416 align:middle line:-1
这就是该漏洞的更多细节

00:29:09.483 --> 00:29:13.287 align:middle line:-2
我们的对象正被释放
我们正在清理它的ivar

00:29:13.453 --> 00:29:16.957 align:middle line:-2
其中一个ivar已经是一个
被释放过的对象

00:29:17.024 --> 00:29:18.425 align:middle line:-1
这就是造成我们崩溃的原因

00:29:19.393 --> 00:29:20.794 align:middle line:-1
我们可以做得更好吗？

00:29:21.595 --> 00:29:26.567 align:middle line:-2
我们可以找出是哪个对象
被objc_release释放了吗？

00:29:27.534 --> 00:29:30.737 align:middle line:-2
通常 调用
objc_release的函数

00:29:30.804 --> 00:29:32.940 align:middle line:-1
会给我们一个关于那是什么的线索

00:29:33.407 --> 00:29:36.310 align:middle line:-1
但__ivar_destroyer函数的问题是

00:29:36.510 --> 00:29:39.313 align:middle line:-1
它是由编译器生成的函数

00:29:39.813 --> 00:29:42.482 align:middle line:-2
我们没有写过一个叫做
__ivar_destroyer的函数

00:29:42.549 --> 00:29:45.385 align:middle line:-1
这表示将没有文件名或行号

00:29:45.586 --> 00:29:47.588 align:middle line:-1
会被关联到崩溃中的这一点

00:29:47.654 --> 00:29:52.426 align:middle line:-2
我们不知道那时
我们的哪些属性正在被释放

00:29:53.460 --> 00:29:56.496 align:middle line:-2
这是我们的类
我们在这个类中有三个属性

00:29:56.563 --> 00:29:59.967 align:middle line:-2
它们分别是username
database和views数组

00:30:00.601 --> 00:30:02.503 align:middle line:-1
这个时候

00:30:02.569 --> 00:30:06.139 align:middle line:-2
我们不知道哪个对象
是正在被释放的对象

00:30:06.206 --> 00:30:07.407 align:middle line:-1
它可能是其中任何一个

00:30:08.408 --> 00:30:09.676 align:middle line:-1
我们可以做得更好吗？

00:30:09.743 --> 00:30:14.448 align:middle line:-2
我们能够从崩溃日志中
确定哪些对象是

00:30:14.515 --> 00:30:16.483 align:middle line:-1
正在被释放的对象吗？

00:30:16.817 --> 00:30:19.653 align:middle line:-1
因为如果我们无法在调试器中重现它

00:30:19.720 --> 00:30:21.655 align:middle line:-1
我们将只能从崩溃日志着手

00:30:22.523 --> 00:30:24.691 align:middle line:-2
在这种情况下
我们的确可以做得更好

00:30:25.526 --> 00:30:31.098 align:middle line:-2
我们可以看到文件和行号
所在的行有一个“+42”

00:30:31.832 --> 00:30:34.768 align:middle line:-1
这个“+42”就是我们的线索

00:30:34.968 --> 00:30:39.439 align:middle line:-2
因为“+42”是函数的
汇编代码中的偏移量

00:30:40.140 --> 00:30:43.043 align:middle line:-2
我们可以反汇编
__ivar_destroyer函数

00:30:43.210 --> 00:30:44.545 align:middle line:-1
查看其代码

00:30:44.711 --> 00:30:49.216 align:middle line:-1
确定在偏移量为42处所访问的属性

00:30:50.284 --> 00:30:51.652 align:middle line:-1
该怎么做呢？

00:30:51.852 --> 00:30:55.088 align:middle line:-1
我们进入调试器控制台

00:30:55.689 --> 00:30:58.025 align:middle line:-1
我们可以在终端上运行lldb

00:30:58.358 --> 00:31:02.896 align:middle line:-2
我们可以在Xcode
调试终端中运行lldb

00:30:58.358 --> 00:31:02.896 align:middle line:-2
我们可以在Xcode
调试终端中运行lldb

00:31:04.665 --> 00:31:09.002 align:middle line:-1
调试器具有导入崩溃日志的命令

00:31:09.069 --> 00:31:14.041 align:middle line:-1
就像它在调试器内崩溃了一样

00:31:14.541 --> 00:31:18.946 align:middle line:-2
我们运行此命令
来加载崩溃日志解释命令

00:31:20.013 --> 00:31:24.384 align:middle line:-2
然后我们运行另一个命令
将我们的崩溃日志导入调试器

00:31:25.452 --> 00:31:27.921 align:middle line:-1
我们需要三件东西来完成这项工作

00:31:27.988 --> 00:31:31.058 align:middle line:-2
我们需要在Mac上获得
崩溃日志的副本

00:31:31.491 --> 00:31:34.394 align:middle line:-1
我们还需要一份我们的app的副本

00:31:34.695 --> 00:31:38.799 align:middle line:-2
以及该app对应的
dSYM文件的副本

00:31:39.132 --> 00:31:43.670 align:middle line:-2
所有这些都与此崩溃日志相匹配
也要与app的版本相同

00:31:43.837 --> 00:31:47.608 align:middle line:-2
这就是我们希望你
保留app档案的原因

00:31:48.242 --> 00:31:52.379 align:middle line:-2
如果我们在Mac上有了这些文件
我们会运行crashlog命令

00:31:53.146 --> 00:31:56.717 align:middle line:-2
lldb使用Spotlight
来查找匹配的可执行文件

00:31:56.783 --> 00:31:59.953 align:middle line:-2
找到匹配的符号表
并将其加载到调试器中

00:32:00.954 --> 00:32:03.490 align:middle line:-2
我们在这里可以看到
崩溃线程的堆栈跟踪

00:32:03.790 --> 00:32:06.960 align:middle line:-1
我们可以看到文件和行号信息

00:32:07.261 --> 00:32:08.595 align:middle line:-1
现在我们可以开始工作了

00:32:09.029 --> 00:32:12.466 align:middle line:-2
现在我们可以找到
__ivar_destroyer函数的地址

00:32:12.866 --> 00:32:14.301 align:middle line:-1
并对其进行反汇编

00:32:15.402 --> 00:32:18.639 align:middle line:-1
这向我们展示了该函数的汇编代码

00:32:20.007 --> 00:32:23.277 align:middle line:-1
我没有时间教你如何阅读汇编代码

00:32:23.343 --> 00:32:26.847 align:middle line:-2
但幸运的是 对于崩溃日志
你实际上并不需要

00:32:26.914 --> 00:32:30.484 align:middle line:-1
能够完全流利地阅读汇编代码

00:32:30.551 --> 00:32:33.921 align:middle line:-1
通常只需要简单浏览汇编代码

00:32:33.987 --> 00:32:36.456 align:middle line:-1
并大致了解发生了什么就足够了

00:32:36.523 --> 00:32:39.159 align:middle line:-1
你不必理解每一条指令

00:32:39.226 --> 00:32:42.296 align:middle line:-1
来从崩溃日志中获取有用的信息

00:32:44.031 --> 00:32:45.866 align:middle line:-1
如果我们浏览这个函数

00:32:45.933 --> 00:32:50.771 align:middle line:-1
并且我们知道调用指令和跳转指令

00:32:50.838 --> 00:32:56.610 align:middle line:-2
它们是你调用函数的方式
我们可以将这段代码分成三个部分

00:32:57.377 --> 00:33:00.214 align:middle line:-1
这是顶部

00:32:57.377 --> 00:33:00.214 align:middle line:-1
这是顶部

00:33:00.280 --> 00:33:05.385 align:middle line:-2
它正在执行一个
对引用计数释放函数的调用

00:33:05.719 --> 00:33:08.655 align:middle line:-2
这部分代码正在释放
我们的username属性

00:33:10.324 --> 00:33:13.694 align:middle line:-2
下一部分正在释放
database属性

00:33:14.094 --> 00:33:17.865 align:middle line:0
再下一个部分正在释放
views属性

00:33:18.899 --> 00:33:22.469 align:middle line:0
我们不明白所有这些指令的含义

00:33:22.536 --> 00:33:26.306 align:middle line:0
但我们大概知道每一部分代码的功能

00:33:26.373 --> 00:33:30.544 align:middle line:0
这有点像有一个与代码相关联的行号

00:33:32.079 --> 00:33:35.115 align:middle line:-1
现在我们回到崩溃日志中的信息

00:33:35.449 --> 00:33:42.022 align:middle line:-2
即__ivar_destroyer函数加42
其调用了objc_release函数

00:33:43.657 --> 00:33:48.962 align:middle line:-2
在+42处有一个指令
但还有一个问题

00:33:49.429 --> 00:33:51.732 align:middle line:-1
那就是在堆栈跟踪中

00:33:52.065 --> 00:33:57.104 align:middle line:-2
大多数堆栈帧的汇编级别偏移量
都是返回地址

00:33:57.271 --> 00:34:00.240 align:middle line:-1
它是函数调用之后的指令

00:33:57.271 --> 00:34:00.240 align:middle line:-1
它是函数调用之后的指令

00:34:00.908 --> 00:34:04.845 align:middle line:-2
所以调用objc_release
的指令是前面一条指令

00:34:04.912 --> 00:34:06.180 align:middle line:-1
即这条指令

00:34:07.347 --> 00:34:11.752 align:middle line:-2
如果我们读到这个 就说明它是对
objc_release的调用 这很好

00:34:11.818 --> 00:34:15.789 align:middle line:-2
这与我们在崩溃日志的堆栈跟踪中
看到的一致

00:34:15.856 --> 00:34:19.293 align:middle line:-2
即在此偏移量的
对objc_release的调用

00:34:20.127 --> 00:34:24.931 align:middle line:-2
这个释放函数正在释放
database属性

00:34:25.799 --> 00:34:29.136 align:middle line:-2
现在我们有了关于崩溃时
正在做什么的更多细节

00:34:29.670 --> 00:34:33.040 align:middle line:-2
我们释放了username属性
并且成功了

00:34:33.739 --> 00:34:36.577 align:middle line:-1
我们尚未运行到views属性

00:34:36.643 --> 00:34:39.413 align:middle line:-2
它可能有效 可能无效
我们并不知道

00:34:39.813 --> 00:34:43.684 align:middle line:-2
我们知道的是我们试图
释放database属性

00:34:44.083 --> 00:34:48.688 align:middle line:-2
并且根据malloc释放列表指针
的签名 该对象看起来像一个

00:34:48.755 --> 00:34:51.091 align:middle line:-1
已经被释放过的对象

00:34:52.259 --> 00:34:55.429 align:middle line:-2
所以这告诉了我们
导致这次崩溃的原因

00:34:56.029 --> 00:34:59.032 align:middle line:-2
我们正在释放一个
LoginViewController对象

00:34:59.399 --> 00:35:02.035 align:middle line:-2
而其中的database属性
是无效的

00:34:59.399 --> 00:35:02.035 align:middle line:-2
而其中的database属性
是无效的

00:35:04.404 --> 00:35:08.609 align:middle line:-2
我们目前为止还没有发现漏洞
这些代码都没错

00:35:08.675 --> 00:35:13.714 align:middle line:-2
__ivar_destroyer函数没有错
我们的代码中应该有些别的问题

00:35:14.281 --> 00:35:15.516 align:middle line:-1
但是从崩溃日志中

00:35:15.582 --> 00:35:19.453 align:middle line:-1
我们已经能够缩小测试的范围

00:35:19.720 --> 00:35:22.489 align:middle line:-2
以及我们应该在何处
尝试重现该漏洞的范围

00:35:22.556 --> 00:35:25.158 align:middle line:-1
我们应该检验这个类

00:35:25.225 --> 00:35:27.261 align:middle line:-1
我们应该检验database字段

00:35:27.327 --> 00:35:31.598 align:middle line:-2
我们应该阅读
使用该database对象的代码

00:35:31.665 --> 00:35:32.866 align:middle line:-1
并尝试找到错误

00:35:35.135 --> 00:35:36.436 align:middle line:-1
那我们刚刚做了什么？

00:35:37.037 --> 00:35:38.839 align:middle line:-1
我们从头开始阅读崩溃日志

00:35:38.906 --> 00:35:42.609 align:middle line:-2
从崩溃原因开始
我们读取了异常类型

00:35:42.676 --> 00:35:45.045 align:middle line:-1
我们了解了异常类型的含义

00:35:45.913 --> 00:35:50.083 align:middle line:-1
我们检查了崩溃线程的堆栈跟踪

00:35:50.150 --> 00:35:55.122 align:middle line:-2
了解它正在做什么
以及导致失败的实际错误是什么

00:35:55.889 --> 00:35:59.092 align:middle line:-2
并且我们在崩溃日志的其它地方
寻找线索

00:35:59.259 --> 00:36:02.729 align:middle line:-2
在这个例子中
我们使用了内存错误的错误地址

00:35:59.259 --> 00:36:02.729 align:middle line:-2
在这个例子中
我们使用了内存错误的错误地址

00:36:02.863 --> 00:36:06.033 align:middle line:-1
我们使用了崩溃函数的反汇编代码

00:36:08.669 --> 00:36:14.208 align:middle line:-1
内存错误能导致类型广泛的崩溃

00:36:14.274 --> 00:36:17.110 align:middle line:-1
崩溃日志中有许多不同的签名

00:36:17.177 --> 00:36:19.046 align:middle line:-1
都可能是由内存错误引起的

00:36:20.180 --> 00:36:21.949 align:middle line:-1
以下是一些例子

00:36:22.716 --> 00:36:25.886 align:middle line:-1
在Objective-C的objc_msgSend函数中

00:36:26.186 --> 00:36:28.188 align:middle line:-1
或在引用计数机制中

00:36:28.255 --> 00:36:32.092 align:middle line:-2
或Swift和
Objective-C的释放机制

00:36:32.392 --> 00:36:35.495 align:middle line:-2
它们所发生的崩溃
通常是由内存错误引起的

00:36:37.064 --> 00:36:42.269 align:middle line:0
另一种常见的内存错误症状是
无法识别的选择器异常

00:36:43.136 --> 00:36:47.508 align:middle line:0
这通常发生在
当你有某种类型的对象时

00:36:47.574 --> 00:36:49.943 align:middle line:0
一段代码正在使用该对象

00:36:50.410 --> 00:36:53.580 align:middle line:0
然后对象被释放并再次被使用

00:36:54.314 --> 00:36:57.451 align:middle line:0
但与我们在前一个崩溃日志中看到的

00:36:57.518 --> 00:36:59.820 align:middle line:0
malloc释放列表签名不同

00:36:59.887 --> 00:37:04.591 align:middle line:-1
这次是在同一地址分配了一个新对象

00:36:59.887 --> 00:37:04.591 align:middle line:-1
这次是在同一地址分配了一个新对象

00:37:04.658 --> 00:37:06.326 align:middle line:-1
取代了以前旧对象所在的位置

00:37:06.860 --> 00:37:10.163 align:middle line:0
所以当代码尝试使用旧对象时

00:37:10.230 --> 00:37:12.332 align:middle line:0
调用旧对象上的函数

00:37:12.533 --> 00:37:16.703 align:middle line:0
我们在该地址处却有一个
不同类型的不同对象

00:37:16.937 --> 00:37:19.740 align:middle line:0
并且它根本无法识别该函数

00:37:19.940 --> 00:37:22.342 align:middle line:0
因此我们得到一个
无法识别的选择器异常

00:37:24.945 --> 00:37:27.481 align:middle line:0
内存错误的另一个常见症状

00:37:27.548 --> 00:37:31.585 align:middle line:0
是内存分配器本身的终止

00:37:31.652 --> 00:37:34.121 align:middle line:0
即在malloc和free函数内
调用abort()

00:37:34.888 --> 00:37:38.358 align:middle line:0
这是我们之前看到的
前提条件的一个例子

00:37:38.425 --> 00:37:41.361 align:middle line:0
这是内存分配器内部的前提条件

00:37:41.862 --> 00:37:44.198 align:middle line:-1
它可能识别到这样的情况

00:37:44.264 --> 00:37:49.303 align:middle line:-2
即malloc内存
本身的堆数据结构

00:37:49.369 --> 00:37:53.540 align:middle line:-2
已被内存错误破坏
这会终止进程并进行响应

00:37:53.974 --> 00:37:59.046 align:middle line:-2
或者它可能检测到
malloc API的错误使用

00:37:59.413 --> 00:38:02.816 align:middle line:-2
例如 如果你在一行代码中
连续两次释放一个对象

00:37:59.413 --> 00:38:02.816 align:middle line:-2
例如 如果你在一行代码中
连续两次释放一个对象

00:38:03.116 --> 00:38:05.619 align:middle line:-1
malloc分配器有时可以识别出

00:38:05.686 --> 00:38:09.056 align:middle line:-2
这是一个双重释放
并立即终止该进程

00:38:11.725 --> 00:38:13.393 align:middle line:-1
让我给你一些最后的提示

00:38:13.460 --> 00:38:18.498 align:middle line:-2
以用于分析崩溃日志
特别是分析内存错误

00:38:20.667 --> 00:38:22.069 align:middle line:-1
在刚才看到的崩溃中

00:38:22.135 --> 00:38:24.972 align:middle line:-2
我们大部分时间在
查看崩溃的代码

00:38:25.038 --> 00:38:28.742 align:middle line:-1
即崩溃的特定代码行和崩溃的线程

00:38:29.209 --> 00:38:33.514 align:middle line:-2
查看进程中其它
与崩溃代码相关的代码

00:38:33.580 --> 00:38:35.549 align:middle line:-1
非常重要

00:38:36.016 --> 00:38:41.021 align:middle line:-2
例如 在这次崩溃中
__ivar_destroyer函数并没有错

00:38:41.088 --> 00:38:42.656 align:middle line:-1
漏洞不在这里

00:38:42.923 --> 00:38:47.494 align:middle line:-2
该漏洞位于其它地方
其它一些代码不正确

00:38:49.229 --> 00:38:52.699 align:middle line:-2
除了崩溃线程之外
你还应该查看

00:38:52.866 --> 00:38:54.835 align:middle line:-1
崩溃日志中的堆栈跟踪

00:38:56.236 --> 00:38:59.540 align:middle line:-1
崩溃日志包含进程中的所有堆栈跟踪

00:38:59.606 --> 00:39:02.843 align:middle line:-1
并且可能包含有用的信息和线索

00:38:59.606 --> 00:39:02.843 align:middle line:-1
并且可能包含有用的信息和线索

00:39:02.910 --> 00:39:05.579 align:middle line:-2
可以用来帮助你弄清楚
进程当时正在做什么

00:39:05.979 --> 00:39:08.949 align:middle line:-1
也许其它线程会显示更多

00:39:09.016 --> 00:39:11.718 align:middle line:-1
关于当时app运行到何处的细节

00:39:11.785 --> 00:39:13.554 align:middle line:-1
也许它当时正在执行网络代码

00:39:13.620 --> 00:39:16.557 align:middle line:-1
这在其它某个堆栈跟踪上可以看到

00:39:17.057 --> 00:39:19.593 align:middle line:-1
或者可能存在多线程错误

00:39:19.826 --> 00:39:25.132 align:middle line:-2
并且其它线程可能可以提供
有关线程竞争的线索

00:39:27.367 --> 00:39:30.571 align:middle line:-1
你还应该查看多个崩溃日志

00:39:30.637 --> 00:39:32.806 align:middle line:-1
以找出特定的崩溃原因

00:39:33.574 --> 00:39:37.144 align:middle line:-2
Xcode Organizer
可根据代码中崩溃的位置

00:39:37.211 --> 00:39:39.479 align:middle line:-1
来帮助你对崩溃进行分组

00:39:40.280 --> 00:39:42.015 align:middle line:-1
有时候

00:39:43.016 --> 00:39:46.186 align:middle line:-1
在同一个崩溃点会发生多次崩溃

00:39:46.486 --> 00:39:50.424 align:middle line:-2
但有些日志可能会包含
比其他日志更多的信息

00:39:50.691 --> 00:39:54.294 align:middle line:-2
例如 我们刚看到的
malloc释放列表签名

00:39:54.795 --> 00:39:58.465 align:middle line:-2
它可能出现在某些崩溃日志中
但在其它日志中就未必会出现

00:39:58.699 --> 00:40:02.202 align:middle line:-1
因此在同一个崩溃集中

00:39:58.699 --> 00:40:02.202 align:middle line:-1
因此在同一个崩溃集中

00:40:02.269 --> 00:40:04.037 align:middle line:-2
浏览多个崩溃
来查看其中一些信息

00:40:04.104 --> 00:40:07.441 align:middle line:-2
是否比其它的信息更有用
是一种非常有效的方法

00:40:08.675 --> 00:40:13.046 align:middle line:-2
此外 能够将
崩溃原因分组的Organizer

00:40:13.447 --> 00:40:17.351 align:middle line:-1
有时会将不同原因的崩溃

00:40:17.417 --> 00:40:18.919 align:middle line:-1
分到同一组中

00:40:19.686 --> 00:40:21.088 align:middle line:-1
可能是其它线程

00:40:21.154 --> 00:40:25.492 align:middle line:-2
或崩溃线程的回溯
让你识别出

00:40:25.726 --> 00:40:28.228 align:middle line:-2
对人眼来说
你会识别出

00:40:28.295 --> 00:40:31.365 align:middle line:-1
这组崩溃有多种原因

00:40:31.598 --> 00:40:34.401 align:middle line:-2
尽管Xcode Organizer
将它们放在了一起

00:40:34.801 --> 00:40:36.870 align:middle line:-1
如果你只查看一个崩溃日志

00:40:37.070 --> 00:40:40.440 align:middle line:-2
你甚至可能不知道
第二次崩溃正在发生

00:40:40.674 --> 00:40:43.510 align:middle line:-1
直到你修复第一个崩溃并发布它

00:40:43.677 --> 00:40:45.979 align:middle line:-2
而你的用户开始
再次向你发送崩溃日志

00:40:48.582 --> 00:40:50.617 align:middle line:-1
一旦你对崩溃做了一些分析

00:40:50.684 --> 00:40:54.755 align:middle line:-2
一旦你缩小了
进程中可能发生崩溃的位置范围

00:40:54.821 --> 00:40:57.090 align:middle line:-1
或者它可能正在使用的对象

00:40:57.424 --> 00:41:00.160 align:middle line:-2
你可以使用
如Address Sanitizer

00:40:57.424 --> 00:41:00.160 align:middle line:-2
你可以使用
如Address Sanitizer

00:41:00.227 --> 00:41:01.862 align:middle line:-1
和Zombies等工具

00:41:01.929 --> 00:41:03.830 align:middle line:-1
来尝试重现崩溃

00:41:04.231 --> 00:41:08.836 align:middle line:-2
因为尽管我们在
malloc释放列表崩溃日志中

00:41:08.902 --> 00:41:10.838 align:middle line:-1
缩小问题范围时做得很好

00:41:10.904 --> 00:41:14.741 align:middle line:-2
但调试在调试器中发生的崩溃
要容易得多

00:41:14.808 --> 00:41:19.546 align:middle line:-2
你可以在测试中使用Sanitization
错误消息来告诉你发生了什么

00:41:21.515 --> 00:41:25.085 align:middle line:-2
刚才我提到
应该查看多个堆栈跟踪

00:41:25.152 --> 00:41:26.920 align:middle line:-1
多个线程堆栈

00:41:26.987 --> 00:41:29.523 align:middle line:-1
以诊断多线程错误

00:41:29.957 --> 00:41:33.694 align:middle line:-1
为了详细讨论调试多线程错误

00:41:33.760 --> 00:41:35.329 align:middle line:-1
有请Kuba

00:41:35.395 --> 00:41:40.567 align:middle line:-1
（多线程问题）

00:41:41.134 --> 00:41:42.135 align:middle line:-1
谢谢

00:41:43.537 --> 00:41:44.371 align:middle line:-1
谢谢！

00:41:45.138 --> 00:41:46.607 align:middle line:-1
正如Greg所说

00:41:46.673 --> 00:41:50.110 align:middle line:0
多线程问题可能导致一些内存损坏

00:41:51.044 --> 00:41:54.581 align:middle line:0
多线程错误通常是最难诊断和重现的

00:41:54.648 --> 00:41:56.250 align:middle line:-1
错误类型之一

00:41:57.117 --> 00:41:58.819 align:middle line:-1
它们特别难以重现

00:41:58.886 --> 00:42:01.488 align:middle line:-1
因为它们只是偶尔会导致崩溃

00:41:58.886 --> 00:42:01.488 align:middle line:-1
因为它们只是偶尔会导致崩溃

00:42:01.555 --> 00:42:05.559 align:middle line:-2
因此你的代码似乎在99%的情况下
都能正常工作

00:42:05.926 --> 00:42:08.996 align:middle line:-2
并且这些漏洞在很长一段时间内
都不会被发现

00:42:11.231 --> 00:42:14.034 align:middle line:-1
通常多线程错误会导致内存损坏

00:42:14.101 --> 00:42:17.838 align:middle line:-2
并且你在崩溃日志中看到的内容
看起来也就像内存损坏一样

00:42:17.905 --> 00:42:20.841 align:middle line:-1
我们已经看到了上一节中的例子

00:42:21.241 --> 00:42:23.443 align:middle line:-1
当你处理malloc内部的崩溃时

00:42:23.510 --> 00:42:26.246 align:middle line:-1
或在释放或保留计数操作时

00:42:26.580 --> 00:42:29.183 align:middle line:-1
这些都是内存损坏的典型症状

00:42:30.350 --> 00:42:33.754 align:middle line:-1
多线程错误也有一些特有的症状

00:42:33.854 --> 00:42:36.957 align:middle line:-1
崩溃的线程通常包含 抱歉

00:42:37.024 --> 00:42:39.359 align:middle line:-1
崩溃日志通常包含

00:42:39.493 --> 00:42:41.962 align:middle line:-1
多个正在执行彼此相关的代码的线程

00:42:42.262 --> 00:42:44.531 align:middle line:-1
所以如果某个特定的类或方法

00:42:44.765 --> 00:42:47.201 align:middle line:-1
出现在多个线程的崩溃日志中

00:42:47.601 --> 00:42:50.470 align:middle line:-1
这表示可能存在多线程错误

00:42:51.438 --> 00:42:55.042 align:middle line:-1
多线程问题导致的内存损坏

00:42:55.108 --> 00:42:56.443 align:middle line:-1
通常非常随机

00:42:56.543 --> 00:43:00.981 align:middle line:-2
因此你可能会发现崩溃发生在
稍微不同的代码行上

00:42:56.543 --> 00:43:00.981 align:middle line:-2
因此你可能会发现崩溃发生在
稍微不同的代码行上

00:43:01.048 --> 00:43:02.683 align:middle line:-1
或稍微不同的地址

00:43:02.749 --> 00:43:04.051 align:middle line:-1
正如Greg所说

00:43:04.117 --> 00:43:09.323 align:middle line:-2
你可以看到它们在Xcode中
显示为不同的崩溃点

00:43:09.389 --> 00:43:11.058 align:middle line:-1
尽管它们属于同一个漏洞

00:43:11.925 --> 00:43:15.562 align:middle line:-2
并且崩溃的线程可能并不是
该漏洞的罪魁祸首

00:43:15.629 --> 00:43:18.232 align:middle line:-1
所以查看崩溃日志中其它线程的

00:43:18.298 --> 00:43:20.234 align:middle line:-1
堆栈跟踪很重要

00:43:20.634 --> 00:43:24.271 align:middle line:-2
现在让我们看一下
多线程漏洞的例子

00:43:24.338 --> 00:43:26.340 align:middle line:-2
并且我会向你展示
如何诊断这样的漏洞

00:43:26.406 --> 00:43:29.877 align:middle line:-2
通过使用名为Thread Sanitizer的工具
它是Xcode的一部分

00:43:38.852 --> 00:43:42.789 align:middle line:-2
让我们再看看Chris和我写的
饼干配方app

00:43:42.856 --> 00:43:46.193 align:middle line:-2
这里有从用户那里收到的
更多崩溃日志

00:43:46.994 --> 00:43:50.531 align:middle line:-2
我们关注一下排名第二的崩溃
就是这个

00:43:51.999 --> 00:43:54.601 align:middle line:-1
此崩溃日志显示

00:43:54.668 --> 00:43:57.638 align:middle line:-2
当我们使用一个名为LazyImageView的类时
发生了错误

00:43:57.704 --> 00:44:01.141 align:middle line:-1
这是我写的一个类 我们稍后再看它

00:43:57.704 --> 00:44:01.141 align:middle line:-1
这是我写的一个类 我们稍后再看它

00:44:01.441 --> 00:44:04.244 align:middle line:-2
但我们先看看能否从崩溃日志中
了解更多信息

00:44:05.279 --> 00:44:07.481 align:middle line:-1
我们看一下这个线程的整个堆栈

00:44:07.548 --> 00:44:09.816 align:middle line:-1
我可以通过点击这个按钮来做到这点

00:44:09.883 --> 00:44:11.652 align:middle line:-1
它也会显示所有其他线程

00:44:12.920 --> 00:44:15.589 align:middle line:-1
如果我们注意最顶层的帧

00:44:15.923 --> 00:44:17.724 align:middle line:-1
我们会看到真正发生的事情

00:44:17.791 --> 00:44:20.327 align:middle line:-2
是free函数
正在调用abort函数

00:44:20.694 --> 00:44:23.597 align:middle line:-1
这表示堆损坏 它是一种内存错误

00:44:25.265 --> 00:44:27.467 align:middle line:-1
如果我们查看其它线程的堆栈跟踪

00:44:27.534 --> 00:44:28.836 align:middle line:-1
比如这里的第5个线程

00:44:29.603 --> 00:44:33.240 align:middle line:-2
我们会看到它还在LazyImageView中
执行了一些代码

00:44:35.075 --> 00:44:37.778 align:middle line:-1
我们来看看这组崩溃中的另一次崩溃

00:44:39.179 --> 00:44:42.249 align:middle line:-2
我们会发现所有这些崩溃日志
都有一个共同的主题

00:44:42.316 --> 00:44:46.587 align:middle line:-2
当free函数调用abort时
一个线程报告堆损坏

00:44:47.254 --> 00:44:52.593 align:middle line:-2
而另一个线程正在处理
一段非常相关的代码

00:44:52.659 --> 00:44:55.462 align:middle line:-2
实际上是在同一个类中
即LazyImageView中

00:44:55.929 --> 00:44:57.898 align:middle line:-1
这很可能不是巧合

00:44:58.098 --> 00:45:00.767 align:middle line:-1
我非常怀疑这是一个多线程问题

00:44:58.098 --> 00:45:00.767 align:middle line:-1
我非常怀疑这是一个多线程问题

00:45:02.002 --> 00:45:05.105 align:middle line:-2
所以我们来看看
LazyImageView类

00:45:05.172 --> 00:45:07.608 align:middle line:-1
我点击此按钮

00:45:07.941 --> 00:45:10.511 align:middle line:-2
来在我们的项目中打开它
并直接跳到这行代码

00:45:11.778 --> 00:45:14.815 align:middle line:-2
你可以在这里看到
LazyImageView的源代码

00:45:15.249 --> 00:45:18.986 align:middle line:-2
它是UIImageView的子类
但它有一个额外的功能

00:45:19.052 --> 00:45:22.122 align:middle line:-1
即它可以惰性地并且异步地加载图像

00:45:22.689 --> 00:45:25.692 align:middle line:-1
我们可以看下初始化函数的逻辑

00:45:25.759 --> 00:45:29.196 align:middle line:-1
我们所做的是将作业分配到后台队列

00:45:29.730 --> 00:45:32.366 align:middle line:-1
我们将在后台线程上创建图像

00:45:32.766 --> 00:45:35.936 align:middle line:-1
一旦完成 我们将调度回主队列

00:45:36.336 --> 00:45:38.472 align:middle line:-1
来在屏幕上实际显示图像

00:45:39.406 --> 00:45:41.975 align:middle line:-1
崩溃日志指向这行代码

00:45:42.509 --> 00:45:45.445 align:middle line:-2
我们这里正在访问
imageCache

00:45:45.646 --> 00:45:49.149 align:middle line:-2
我们使用它来确保
我们不会不必要地多次创建

00:45:49.283 --> 00:45:50.817 align:middle line:-1
相同的图像

00:45:51.251 --> 00:45:54.488 align:middle line:-1
所以我的缓存实现方式可能存在漏洞

00:45:54.788 --> 00:45:58.759 align:middle line:-2
让我们试着避免猜测
我将在模拟器中运行app

00:45:58.825 --> 00:46:00.494 align:middle line:-1
并尝试重现此崩溃

00:45:58.825 --> 00:46:00.494 align:middle line:-1
并尝试重现此崩溃

00:46:00.928 --> 00:46:03.096 align:middle line:-1
让我先关闭崩溃日志会话

00:46:04.798 --> 00:46:06.967 align:middle line:-1
好的 这是我们的饼干配方app

00:46:07.034 --> 00:46:10.304 align:middle line:-2
你会注意到 如果我尝试
点击此处的“+”按钮

00:46:10.370 --> 00:46:12.272 align:middle line:-1
来添加新食谱

00:46:13.073 --> 00:46:16.543 align:middle line:-2
我们将需要为我们的新食谱
选择一张图片

00:46:17.211 --> 00:46:19.847 align:middle line:-1
现在屏幕上的这个控制器

00:46:20.147 --> 00:46:23.050 align:middle line:-2
使用LazyImageView
来显示所有这些图像

00:46:23.784 --> 00:46:27.554 align:middle line:-2
因此只是在屏幕上显示它们
并滚动查看内容

00:46:27.621 --> 00:46:31.291 align:middle line:-2
就已经运行了
LazyImageView中的所有代码

00:46:31.425 --> 00:46:32.926 align:middle line:-1
但我没有看到任何崩溃

00:46:33.460 --> 00:46:36.463 align:middle line:-2
不幸的是
这是多线程漏洞的常见问题

00:46:36.930 --> 00:46:38.532 align:middle line:-1
众所周知 它们难以重现

00:46:38.599 --> 00:46:42.769 align:middle line:-2
所以即使你反复测试
有这样的漏洞的代码

00:46:42.836 --> 00:46:44.571 align:middle line:-1
你可能也无法看到一次崩溃

00:46:45.272 --> 00:46:46.440 align:middle line:-1
让我们试着这样做

00:46:46.507 --> 00:46:50.410 align:middle line:-1
我们多次尝试关闭并打开此控制器

00:46:50.477 --> 00:46:53.146 align:middle line:-1
并看看我们最终是否会

00:46:53.213 --> 00:46:55.449 align:middle line:-1
幸运的触发此崩溃

00:47:00.487 --> 00:47:01.588 align:middle line:-1
果然如此

00:47:01.755 --> 00:47:05.025 align:middle line:-2
调试器已终止app
因为它已经崩溃了

00:47:05.225 --> 00:47:08.262 align:middle line:-2
但即使你的确在调试器中
捕获了这个崩溃

00:47:08.328 --> 00:47:09.596 align:middle line:-1
这也并没有什么用

00:47:10.163 --> 00:47:11.331 align:middle line:-1
调试器所提供的信息

00:47:11.398 --> 00:47:14.168 align:middle line:-2
只是说存在某种
EXC_BAD_ACCESS

00:47:14.501 --> 00:47:16.970 align:middle line:-1
但它没有解释导致崩溃的原因

00:47:17.037 --> 00:47:19.039 align:middle line:-1
或者这为什么会发生

00:47:19.640 --> 00:47:23.243 align:middle line:-2
幸运的是 Xcode中有一个
非常适合这种情况的工具

00:47:23.310 --> 00:47:26.547 align:middle line:-2
它被称为Thread Sanitizer
我现在就会使用它

00:47:26.613 --> 00:47:28.849 align:middle line:-1
让我们打开项目的方案编辑器

00:47:28.916 --> 00:47:31.084 align:middle line:-2
我点击此处的app名称
并选择Edit Scheme

00:47:31.151 --> 00:47:32.553 align:middle line:-1
来做到这点

00:47:33.854 --> 00:47:36.957 align:middle line:-2
然后我切换到
Diagnostics标签页

00:47:37.357 --> 00:47:41.094 align:middle line:-2
你会看到我们这里有
几个运行时诊断工具

00:47:41.161 --> 00:47:44.464 align:middle line:-2
比如Address Sanitizer
它非常适合寻找缓冲区溢出

00:47:45.399 --> 00:47:48.936 align:middle line:-2
让我选中Thread Sanitizer
并且选中Pause on issues

00:47:49.002 --> 00:47:53.006 align:middle line:-2
这意味着每次Sanitizer
检测到错误时 调试器都会中断

00:47:54.541 --> 00:47:57.811 align:middle line:-2
让我们在启用了Thread Sanitizer的
模拟器中运行app

00:47:57.878 --> 00:48:00.981 align:middle line:-2
我们看看如果我尝试
添加新食谱时会发生什么

00:47:57.878 --> 00:48:00.981 align:middle line:-2
我们看看如果我尝试
添加新食谱时会发生什么

00:48:03.483 --> 00:48:07.454 align:middle line:-2
如果我现在点击“+”按钮
你会看到该app立即停止

00:48:07.521 --> 00:48:09.489 align:middle line:-2
因为Thread Sanitizer
发现了这个漏洞

00:48:09.556 --> 00:48:12.259 align:middle line:-1
请注意 我没有进行多次尝试

00:48:12.526 --> 00:48:16.230 align:middle line:-2
Thread Sanitizer
非常可靠地重现了多线程问题

00:48:17.464 --> 00:48:19.633 align:middle line:-1
让我们看一下这个漏洞的一些细节

00:48:19.967 --> 00:48:22.469 align:middle line:-2
我们看到它是一个
Swift访问竞争

00:48:23.437 --> 00:48:26.673 align:middle line:-1
如果我们查看左侧的调试导航器

00:48:26.740 --> 00:48:29.076 align:middle line:-2
我们甚至可以得到
有关此漏洞的更多详细信息

00:48:29.409 --> 00:48:33.480 align:middle line:-2
我们看到两个不同的线程
执行了两次访问

00:48:33.547 --> 00:48:37.551 align:middle line:-2
这里是线程2和线程4
它们都试图

00:48:37.618 --> 00:48:39.887 align:middle line:-1
同时访问同一个内存位置

00:48:40.020 --> 00:48:41.221 align:middle line:-1
这是不允许的

00:48:42.756 --> 00:48:46.927 align:middle line:-2
如果我们查看正在构成竞争的
这两行代码

00:48:47.261 --> 00:48:50.531 align:middle line:-2
我们发现它们都在访问
imageCache

00:48:51.298 --> 00:48:55.369 align:middle line:-2
由于这是一个在多个线程之间
共享的数据结构

00:48:55.435 --> 00:48:58.138 align:middle line:-2
就像我们在此看到的一样
它需要变为一个线程数据结构

00:48:58.872 --> 00:49:00.607 align:middle line:-1
我们来看看它是如何实现的

00:48:58.872 --> 00:49:00.607 align:middle line:-1
我们来看看它是如何实现的

00:49:00.674 --> 00:49:03.210 align:middle line:-2
让我们跳到这里的storage
即我们正使用的变量

00:49:03.277 --> 00:49:05.345 align:middle line:-1
让我们看看它是否真的是线程安全的

00:49:06.313 --> 00:49:10.217 align:middle line:-2
这是ImageCache的源码
就在这个文件顶部

00:49:10.284 --> 00:49:12.519 align:middle line:-1
我们可以立即发现错误

00:49:12.586 --> 00:49:16.290 align:middle line:-2
这只是一个普通的Swift字典
所以这并不好

00:49:16.356 --> 00:49:19.159 align:middle line:-1
Swift字典默认不是线程安全的

00:49:19.526 --> 00:49:23.730 align:middle line:-2
所以如果我们想在多个线程之间
共享一个可变的Swift字典

00:49:24.398 --> 00:49:26.834 align:middle line:-1
我们必须使用同步来保护它

00:49:27.234 --> 00:49:28.635 align:middle line:-1
这意味着我们必须确保

00:49:28.702 --> 00:49:31.004 align:middle line:-1
一次只能有一个线程访问它

00:49:31.805 --> 00:49:34.107 align:middle line:-1
现在让我们真正解决这个问题

00:49:34.174 --> 00:49:35.776 align:middle line:-1
从而使该类成为线程安全的类

00:49:36.543 --> 00:49:37.978 align:middle line:-1
我将分两步完成

00:49:38.045 --> 00:49:41.615 align:middle line:-1
首先我将稍微重构一下这段代码

00:49:42.015 --> 00:49:44.251 align:middle line:-2
以便我们可以更好地
控制storage变量

00:49:44.318 --> 00:49:46.954 align:middle line:-2
然后在第二步中
我将使用调度队列

00:49:47.020 --> 00:49:48.922 align:middle line:-1
来使这个类线程安全

00:49:50.324 --> 00:49:52.492 align:middle line:-1
首先我不喜欢的是

00:49:52.559 --> 00:49:54.928 align:middle line:-1
storage被声明为公有变量

00:49:55.295 --> 00:49:59.166 align:middle line:-2
这意味着我的app中的任何代码
都可以访问它

00:49:59.466 --> 00:50:01.301 align:middle line:-1
而且很难确保

00:49:59.466 --> 00:50:01.301 align:middle line:-1
而且很难确保

00:50:01.368 --> 00:50:03.737 align:middle line:-2
app中的所有代码
都能以正确的方式访问

00:50:04.238 --> 00:50:06.673 align:middle line:-1
所以让我们将其改为私有

00:50:07.140 --> 00:50:11.111 align:middle line:-2
我还要引入另一种
访问imageCache的方法

00:50:11.512 --> 00:50:13.914 align:middle line:-2
我将通过引入subscript
来做到这一点

00:50:15.048 --> 00:50:16.984 align:middle line:-2
这意味着
imageCache的用户

00:50:17.050 --> 00:50:20.220 align:middle line:-2
可以使用括号
从缓存中加载和存储数据

00:50:21.421 --> 00:50:27.094 align:middle line:-2
创建下标需一个这样的getter
以及一个setter

00:50:28.328 --> 00:50:30.197 align:middle line:-1
现在暂时让我们通过

00:50:30.264 --> 00:50:32.900 align:middle line:-1
直接访问底层存储来实现它

00:50:34.501 --> 00:50:37.471 align:middle line:-2
为了让这个文件的其它部分
能够成功构建

00:50:37.538 --> 00:50:38.839 align:middle line:-1
我还需要更新其用户

00:50:38.906 --> 00:50:41.942 align:middle line:-2
这里不能再直接访问
storage属性

00:50:42.009 --> 00:50:43.477 align:middle line:-1
我们该在imageCache上

00:50:43.544 --> 00:50:45.779 align:middle line:-2
直接使用括号和索引
就像这样

00:50:47.381 --> 00:50:49.249 align:middle line:-1
如果我点击“Build Now”

00:50:49.583 --> 00:50:52.319 align:middle line:-1
你会看到代码现在能够正常编译

00:50:52.386 --> 00:50:54.421 align:middle line:-1
但我目前还没有修复任何漏洞

00:50:54.888 --> 00:50:56.423 align:middle line:-1
但我确实取得了一些成就

00:50:56.490 --> 00:51:00.961 align:middle line:-2
我现在可以直接控制
所有访问storage的代码

00:50:56.490 --> 00:51:00.961 align:middle line:-2
我现在可以直接控制
所有访问storage的代码

00:51:01.028 --> 00:51:04.131 align:middle line:-2
即要么通过getter中的代码
要么通过setter

00:51:04.198 --> 00:51:06.333 align:middle line:-1
我的app中没其他代码可以访问它

00:51:06.533 --> 00:51:10.437 align:middle line:-2
因此这对我实际修复
这个Swift访问竞争很有利

00:51:11.805 --> 00:51:13.941 align:middle line:-1
让我通过使用调度队列来做到这一点

00:51:14.007 --> 00:51:17.244 align:middle line:-2
我们创建一个名为queue的
新私有变量

00:51:17.311 --> 00:51:20.080 align:middle line:-1
并让我们为其分配一个新的调度队列

00:51:21.215 --> 00:51:24.852 align:middle line:-2
调度队列默认是串行的
所以它也是串行的

00:51:24.918 --> 00:51:27.921 align:middle line:-1
这意味着在该队列中

00:51:27.988 --> 00:51:30.724 align:middle line:-1
一次只允许一段代码执行

00:51:31.725 --> 00:51:33.927 align:middle line:-2
这很完美
这正是我们在这里所需要的

00:51:34.528 --> 00:51:37.397 align:middle line:-1
我们如何在调度队列中执行代码呢？

00:51:37.698 --> 00:51:43.003 align:middle line:-2
我们可以使用queue.sync
被移动到queue.sync的任何代码

00:51:44.771 --> 00:51:48.141 align:middle line:-2
都将在该串行队列中执行
并且一次只执行一个

00:51:48.575 --> 00:51:50.244 align:middle line:-1
我可以在这里返回一个值

00:51:50.310 --> 00:51:52.479 align:middle line:-2
因为我需要从getter中
返回一些东西

00:51:53.380 --> 00:51:56.116 align:middle line:-2
我也可以在setter中
做同样的事情

00:51:57.417 --> 00:52:00.854 align:middle line:-2
如果我将这行代码移到
这个queue.sync中

00:51:57.417 --> 00:52:00.854 align:middle line:-2
如果我将这行代码移到
这个queue.sync中

00:52:00.921 --> 00:52:03.390 align:middle line:-1
它将作为该调度队列的一部分执行

00:52:04.291 --> 00:52:06.627 align:middle line:-2
通过这种方式
这段代码现在是线程安全的

00:52:06.693 --> 00:52:09.997 align:middle line:-2
因为访问storage的
每一行代码

00:52:10.330 --> 00:52:13.433 align:middle line:-1
都将在串行调度队列中执行

00:52:13.500 --> 00:52:16.303 align:middle line:-1
这意味着它一次只能执行一个

00:52:16.370 --> 00:52:17.905 align:middle line:-1
而这对线程安全来说是正确的

00:52:18.272 --> 00:52:22.242 align:middle line:-1
现在你可能很想

00:52:22.309 --> 00:52:25.445 align:middle line:-2
仅在更改storage变量的
setter中使用同步

00:52:25.512 --> 00:52:27.548 align:middle line:-2
并在getter中避免使用它
就像这样

00:52:28.448 --> 00:52:29.449 align:middle line:-1
但这并不正确

00:52:29.516 --> 00:52:32.452 align:middle line:-2
这仍然可能导致内存损坏
并再次导致崩溃

00:52:32.519 --> 00:52:34.121 align:middle line:-1
我通过在模拟器中运行

00:52:34.354 --> 00:52:37.157 align:middle line:-1
此版本的代码来向你证明这一点

00:52:37.291 --> 00:52:40.827 align:middle line:-2
让我们看看Sanitizer
现在能否发现这个更微妙的错误

00:52:43.530 --> 00:52:45.065 align:middle line:-1
如我所料 它的确发现了

00:52:45.132 --> 00:52:48.468 align:middle line:-1
我们必须使用同步

00:52:48.769 --> 00:52:49.870 align:middle line:-2
同时保护
getter和setter

00:52:49.937 --> 00:52:53.273 align:middle line:-2
让我最后一次
在模拟器中运行该app

00:52:53.340 --> 00:52:56.577 align:middle line:-1
你会看到如果我这次尝试添加新配方

00:52:56.977 --> 00:53:00.113 align:middle line:-2
控制器加载正常
并且我们不再收到任何警告

00:52:56.977 --> 00:53:00.113 align:middle line:-2
控制器加载正常
并且我们不再收到任何警告

00:53:00.180 --> 00:53:02.382 align:middle line:-1
因为该类现在是线程安全的

00:53:02.749 --> 00:53:05.452 align:middle line:-2
现在我可以回到
我们的Organizer窗口

00:53:05.519 --> 00:53:08.322 align:middle line:-1
并将此崩溃标记为已解决

00:53:08.388 --> 00:53:11.391 align:middle line:-2
因为我们已经找到和
识别并修复了这个漏洞

00:53:21.235 --> 00:53:23.637 align:middle line:-1
我们刚看到的是

00:53:23.704 --> 00:53:26.840 align:middle line:-1
我从一组具有多线程错误症状的

00:53:26.907 --> 00:53:29.009 align:middle line:-1
崩溃日志开始

00:53:29.376 --> 00:53:31.912 align:middle line:-2
然后我使用这个
名为Thread Sanitizer的工具

00:53:31.979 --> 00:53:34.448 align:middle line:-1
来识别并最终修复此漏洞

00:53:35.516 --> 00:53:38.318 align:middle line:-2
Thread Sanitizer
不仅能检测多线程问题

00:53:38.385 --> 00:53:41.622 align:middle line:-1
还可以使它们更可靠地重现

00:53:42.189 --> 00:53:46.260 align:middle line:-2
请注意 在演示中
我不必多次调用控制器

00:53:47.227 --> 00:53:50.163 align:middle line:-1
该工具适用于macOS和模拟器

00:53:50.998 --> 00:53:53.367 align:middle line:-1
但就像所有其他运行时诊断工具一样

00:53:53.433 --> 00:53:57.905 align:middle line:-2
它只能通过实际运行代码
来查找其中的错误

00:53:58.405 --> 00:54:00.707 align:middle line:-1
因此你应该牢记这一点并确保

00:53:58.405 --> 00:54:00.707 align:middle line:-1
因此你应该牢记这一点并确保

00:54:00.774 --> 00:54:04.545 align:middle line:-2
你的自动或手动测试程序使用了
Thread Sanitizer

00:54:04.611 --> 00:54:07.714 align:middle line:-1
特别是在使用线程或GCD的代码上

00:54:09.249 --> 00:54:10.617 align:middle line:-1
如果你想了解更多

00:54:10.684 --> 00:54:14.855 align:middle line:-2
我建议你观看我在2016年
WWDC中的演讲视频

00:54:15.122 --> 00:54:17.591 align:middle line:-2
其标题为
“Thread Sanitizer和静态分析”

00:54:17.658 --> 00:54:19.560 align:middle line:-1
我们在其中介绍了这个工具

00:54:19.626 --> 00:54:22.496 align:middle line:-1
并谈到了它的工作原理

00:54:23.830 --> 00:54:27.201 align:middle line:-2
提醒一下 Thread Sanitizer
可以在方案编辑器中找到

00:54:27.668 --> 00:54:30.871 align:middle line:-2
你可以点击Product-&gt;
Scheme-&gt;Edit Scheme

00:54:31.371 --> 00:54:32.906 align:middle line:-1
来调出方案编辑器

00:54:32.973 --> 00:54:35.576 align:middle line:-2
然后你可以切换到
“Diagnostics”标签页

00:54:35.642 --> 00:54:39.980 align:middle line:-2
你可以从中找到Thread Sanitizer
和一些其它运行时诊断工具

00:54:41.815 --> 00:54:44.484 align:middle line:-1
我还想与你分享一个调试技巧

00:54:44.551 --> 00:54:46.987 align:middle line:-1
它在处理多线程时很有用

00:54:47.955 --> 00:54:50.157 align:middle line:-1
在创建调度队列时

00:54:50.557 --> 00:54:53.227 align:middle line:-2
你可以在初始化函数中
提供自定义标签

00:54:54.494 --> 00:54:57.364 align:middle line:-1
你可以为操作队列指定自定义名称

00:54:58.131 --> 00:54:59.566 align:middle line:-1
并且如果你正在使用线程

00:54:59.633 --> 00:55:01.869 align:middle line:-1
你也可以在线程中使用自定义名称

00:54:59.633 --> 00:55:01.869 align:middle line:-1
你也可以在线程中使用自定义名称

00:55:03.036 --> 00:55:05.405 align:middle line:-1
这些名称和标签将显示在调试器中

00:55:05.472 --> 00:55:08.342 align:middle line:0
但它们也出现在
某些类型的崩溃日志中

00:55:08.809 --> 00:55:12.880 align:middle line:0
这可以帮助你缩小
多线程漏洞的可能原因的范围

00:55:15.482 --> 00:55:19.786 align:middle line:0
对于崩溃 我这里准备了三个要点

00:55:20.487 --> 00:55:24.858 align:middle line:-2
第一 在将你的app
提交到App Store之前

00:55:24.925 --> 00:55:26.960 align:middle line:-1
总是在真实设备上对其进行测试

00:55:27.227 --> 00:55:30.497 align:middle line:-2
这可以帮助你避免
在app审核过程中被拒绝

00:55:31.698 --> 00:55:35.135 align:middle line:-1
第二 当你的用户崩溃时

00:55:35.202 --> 00:55:37.271 align:middle line:-1
你应该总是尝试重现它们

00:55:37.437 --> 00:55:39.773 align:middle line:-1
查看崩溃日志和堆栈跟踪

00:55:39.840 --> 00:55:42.009 align:middle line:-1
并尝试找出你需要执行

00:55:42.075 --> 00:55:44.711 align:middle line:-2
app中的哪些部分
才能触发崩溃

00:55:44.778 --> 00:55:46.613 align:middle line:-1
或尝试重现崩溃

00:55:46.680 --> 00:55:50.417 align:middle line:-1
最后 对于难以重现的崩溃

00:55:50.717 --> 00:55:52.719 align:middle line:-1
我建议使用漏洞查找工具

00:55:52.786 --> 00:55:55.355 align:middle line:-2
比如Address Sanitizer
或Thread Sanitizer

00:55:55.856 --> 00:55:58.392 align:middle line:-2
它们分别可用于处理
内存损坏错误

00:55:58.458 --> 00:55:59.893 align:middle line:-1
和多线程问题

00:56:02.095 --> 00:56:04.698 align:middle line:-2
现在让我们回顾一下
今天所学到的东西

00:56:05.699 --> 00:56:06.900 align:middle line:-1
Chris向我们展示了

00:56:06.967 --> 00:56:09.937 align:middle line:-2
如何使用Xcode中的
Organizer窗口

00:56:10.370 --> 00:56:13.273 align:middle line:-2
来获取统计信息
以及崩溃日志的详细信息

00:56:14.274 --> 00:56:18.011 align:middle line:-2
Greg向我们展示了
如何阅读和分析崩溃日志文本

00:56:18.712 --> 00:56:20.414 align:middle line:-1
在许多情况下 它们可以被重现

00:56:20.480 --> 00:56:23.183 align:middle line:-2
比如当你处理
app启动超时问题的时候

00:56:24.651 --> 00:56:27.688 align:middle line:-1
然后我们提到了难以重现的崩溃

00:56:27.754 --> 00:56:30.324 align:middle line:-2
因为它们是随机发生的
比如内存损坏

00:56:30.390 --> 00:56:34.061 align:middle line:-2
我们还提到了它们
在崩溃日志中留下的迹象

00:56:34.728 --> 00:56:37.097 align:middle line:-1
最后 我展示了漏洞寻找工具

00:56:37.164 --> 00:56:38.432 align:middle line:-1
比如Sanitizer

00:56:38.498 --> 00:56:40.334 align:middle line:-1
如何帮助你重现

00:56:40.400 --> 00:56:42.870 align:middle line:-1
内存损坏和线程问题

00:56:42.936 --> 00:56:45.205 align:middle line:-1
我建议你也使用这些工具

00:56:46.373 --> 00:56:49.376 align:middle line:-2
如需了解更多信息
请访问我们演讲的网页

00:56:49.443 --> 00:56:52.412 align:middle line:-2
其中还将包含我们提到的
技术说明的链接

00:56:52.479 --> 00:56:55.015 align:middle line:-1
以及提供调试技巧的其他文档

00:56:55.082 --> 00:56:57.351 align:middle line:-1
它们在处理崩溃时很有帮助

00:56:57.417 --> 00:57:00.120 align:middle line:-2
我还想提醒你
稍后有一个崩溃日志实验室

00:56:57.417 --> 00:57:00.120 align:middle line:-2
我还想提醒你
稍后有一个崩溃日志实验室

00:57:00.187 --> 00:57:03.957 align:middle line:-2
就在本场演讲结束后
中午12点开始 在8号技术实验室

00:57:04.024 --> 00:57:06.026 align:middle line:-2
所以如果你有任何
关于崩溃和崩溃日志的疑问

00:57:06.093 --> 00:57:07.494 align:middle line:-1
请到实验室与我们讨论

00:57:07.561 --> 00:57:10.731 align:middle line:-2
请享受WWDC的其余部分
非常感谢
