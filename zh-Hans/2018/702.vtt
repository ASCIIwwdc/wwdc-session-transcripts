WEBVTT

00:00:17.217 --> 00:00:22.189 align:middle line:0
（你的app以及
macOS安全性的未来）

00:00:22.723 --> 00:00:23.590 align:middle line:-1
大家好

00:00:28.061 --> 00:00:29.630 align:middle line:-1
我是Pierre-Olivier Martel

00:00:29.830 --> 00:00:32.131 align:middle line:-1
我是Apple的安全、工程、职业

00:00:32.198 --> 00:00:33.534 align:middle line:-1
小组的工程经理

00:00:34.168 --> 00:00:36.203 align:middle line:-1
今天和我的两个同事一起

00:00:36.270 --> 00:00:37.371 align:middle line:-1
来聊聊

00:00:37.437 --> 00:00:40.274 align:middle line:-2
macOS Mojave
新的安全特性

00:00:40.974 --> 00:00:42.843 align:middle line:-1
以及怎样在你们的app中用到它们

00:00:44.811 --> 00:00:45.879 align:middle line:-1
我将从介绍

00:00:45.946 --> 00:00:47.915 align:middle line:-1
今年新加入的一些

00:00:47.981 --> 00:00:49.616 align:middle line:-1
高级安全性改进开始

00:00:50.217 --> 00:00:52.753 align:middle line:-1
然后我将用剩下的时间

00:00:53.020 --> 00:00:56.023 align:middle line:-1
介绍正在加入门禁的一些增强特性

00:00:59.660 --> 00:01:01.461 align:middle line:-1
几年前我们在macOS中引入了

00:00:59.660 --> 00:01:01.461 align:middle line:-1
几年前我们在macOS中引入了

00:01:01.528 --> 00:01:03.931 align:middle line:-1
叫做系统安全保护的特性

00:01:04.096 --> 00:01:08.068 align:middle line:-1
目标是增强对操作系统的保护

00:01:08.368 --> 00:01:09.369 align:middle line:-1
如此一来…

00:01:10.070 --> 00:01:13.006 align:middle line:-1
系统的二进制文件不论是在硬盘上

00:01:13.073 --> 00:01:15.042 align:middle line:-1
还是运行时都免于被修改

00:01:16.510 --> 00:01:18.679 align:middle line:-1
今年我们将更进一步

00:01:19.479 --> 00:01:22.916 align:middle line:-2
对系统二进制文件增加
额外的代码发送要求

00:01:23.951 --> 00:01:25.452 align:middle line:-1
系统将在

00:01:26.453 --> 00:01:29.356 align:middle line:-1
进程的整个生命周期

00:01:29.423 --> 00:01:31.992 align:middle line:-1
强制执行代码签名验证

00:01:32.392 --> 00:01:36.797 align:middle line:-2
并自动中止任何与其代码签名
不符的进程

00:01:37.197 --> 00:01:41.902 align:middle line:-2
或者执行任何
非Apple签名代码的企图

00:01:43.136 --> 00:01:45.739 align:middle line:-1
除此以外 系统还将监控

00:01:46.240 --> 00:01:47.074 align:middle line:-1
那么…

00:01:47.508 --> 00:01:51.311 align:middle line:-1
代码库、框架、插件的动态加载

00:01:51.612 --> 00:01:55.315 align:middle line:-2
并强制要求
这些对象有Apple签名

00:01:56.483 --> 00:01:59.853 align:middle line:-2
此机制现在已经在iOS上
强制执行了好几年

00:01:59.920 --> 00:02:02.222 align:middle line:-2
现在我们将其变成
macOS的默认设置

00:01:59.920 --> 00:02:02.222 align:middle line:-2
现在我们将其变成
macOS的默认设置

00:02:03.290 --> 00:02:05.292 align:middle line:-1
当然 这仅限于系统本身

00:02:05.359 --> 00:02:07.828 align:middle line:-1
而不是你的app

00:02:08.395 --> 00:02:09.263 align:middle line:-1
然而…

00:02:09.830 --> 00:02:13.767 align:middle line:-1
在整个操作系统中

00:02:13.834 --> 00:02:14.968 align:middle line:-1
还有一些系统扩展点

00:02:15.035 --> 00:02:18.205 align:middle line:-1
没有对app扩展模型执行该要求

00:02:18.906 --> 00:02:22.042 align:middle line:-1
这些技术上看是系统二进制文件

00:02:22.109 --> 00:02:23.544 align:middle line:-1
至少是插件加载对象

00:02:24.044 --> 00:02:26.446 align:middle line:-1
对这些对象我们将放松该政策

00:02:26.613 --> 00:02:31.685 align:middle line:-1
系统仍允许这些进程加载

00:02:31.752 --> 00:02:35.289 align:middle line:-1
第三方签名或者完全未签名的代码

00:02:37.224 --> 00:02:40.460 align:middle line:-1
因此如果在app中发布这些插件

00:02:40.928 --> 00:02:44.097 align:middle line:-2
请确保在
Developer Preview中测试过

00:02:44.264 --> 00:02:45.599 align:middle line:-1
并确保其工作正常

00:02:45.666 --> 00:02:46.800 align:middle line:-1
否则 请告知我们

00:02:49.002 --> 00:02:51.805 align:middle line:-1
下面 我来讲讲用户界面自动化

00:02:53.207 --> 00:02:55.108 align:middle line:-1
macOS的安全模型

00:02:55.175 --> 00:02:57.277 align:middle line:-1
特别是涉及用户数据访问时

00:02:57.744 --> 00:03:02.683 align:middle line:-1
取决于用户自己作出的安全决策

00:02:57.744 --> 00:03:02.683 align:middle line:-1
取决于用户自己作出的安全决策

00:03:03.483 --> 00:03:05.319 align:middle line:-1
我们通常会捕获这些决策

00:03:06.253 --> 00:03:08.222 align:middle line:-1
要么通过用户

00:03:08.555 --> 00:03:10.824 align:middle line:-1
使用打开/保存对话框

00:03:10.891 --> 00:03:12.459 align:middle line:-1
或者拖放操作的意图

00:03:13.093 --> 00:03:15.229 align:middle line:-1
要么通过更明确的授权对话框

00:03:15.429 --> 00:03:18.232 align:middle line:-1
或者要求用户

00:03:18.432 --> 00:03:22.202 align:middle line:-1
在系统设置中更改安全配置

00:03:22.269 --> 00:03:23.637 align:middle line:-1
以取得用户同意

00:03:25.272 --> 00:03:27.808 align:middle line:-1
这样一来 操作系统能够区分

00:03:27.875 --> 00:03:28.976 align:middle line:-1
到底是用户自己

00:03:29.042 --> 00:03:32.746 align:middle line:-1
做出这些决策

00:03:33.547 --> 00:03:36.683 align:middle line:-2
还是软件通过用户界面驱使的
就变得很关键

00:03:37.885 --> 00:03:40.554 align:middle line:-1
过去我们对系统授权对话框

00:03:40.621 --> 00:03:43.056 align:middle line:-1
做了一些有目标的强化

00:03:43.123 --> 00:03:46.960 align:middle line:-1
以检测并阻断这些人为事件

00:03:47.828 --> 00:03:51.832 align:middle line:-2
然而操作系统中的这些决策点
变得很保守

00:03:52.399 --> 00:03:53.600 align:middle line:-1
以至于我们需更好模型

00:03:55.769 --> 00:03:57.037 align:middle line:-1
在macOS Mojave中

00:03:57.104 --> 00:03:59.406 align:middle line:-1
系统将只允许

00:03:59.907 --> 00:04:01.775 align:middle line:-1
由用户特别配置过

00:03:59.907 --> 00:04:01.775 align:middle line:-1
由用户特别配置过

00:04:02.042 --> 00:04:07.447 align:middle line:-2
以控制其用户界面的进程
发布用户界面事件

00:04:08.415 --> 00:04:10.384 align:middle line:-1
发布用户界面事件

00:04:11.084 --> 00:04:11.985 align:middle line:-1
这一配置

00:04:12.686 --> 00:04:15.722 align:middle line:-1
加入了系统设置里的

00:04:15.789 --> 00:04:17.124 align:middle line:-1
安全和隐私面板

00:04:17.558 --> 00:04:20.994 align:middle line:-1
现在和已有的附件列表在一起

00:04:23.730 --> 00:04:27.067 align:middle line:-1
这是将受影响的API列表

00:04:27.267 --> 00:04:29.169 align:middle line:-1
他们主要分成两类

00:04:29.570 --> 00:04:30.404 align:middle line:-1
第一类…

00:04:30.470 --> 00:04:32.206 align:middle line:-1
在HID层：

00:04:32.873 --> 00:04:35.909 align:middle line:-2
IOHIDPostEvent
和IOHIDSetMouseLocation

00:04:36.743 --> 00:04:38.979 align:middle line:-1
第二类 在CG层

00:04:39.313 --> 00:04:41.715 align:middle line:-1
如果尝试发布任何CG事件

00:04:42.049 --> 00:04:42.883 align:middle line:-1
或者…

00:04:43.083 --> 00:04:45.185 align:middle line:-1
如果创建CG事件面板

00:04:45.552 --> 00:04:48.255 align:middle line:-1
而不提供只侦听选项

00:04:48.889 --> 00:04:51.692 align:middle line:-1
有效创建所谓的修改面板

00:04:52.359 --> 00:04:54.795 align:middle line:-1
那么用户也必须许可这些进程

00:04:57.431 --> 00:04:58.365 align:middle line:-1
然后…

00:04:59.166 --> 00:05:03.704 align:middle line:-1
我们主要关注强化Safari本身

00:04:59.166 --> 00:05:03.704 align:middle line:-1
我们主要关注强化Safari本身

00:05:04.671 --> 00:05:05.639 align:middle line:-1
毕竟

00:05:05.706 --> 00:05:08.509 align:middle line:-1
它是机器上最重要的互联网

00:05:08.575 --> 00:05:09.643 align:middle line:-1
接入app之一

00:05:11.011 --> 00:05:12.379 align:middle line:-1
所以它值得特别关注

00:05:13.614 --> 00:05:14.548 align:middle line:0
在Mojave里…

00:05:15.082 --> 00:05:18.919 align:middle line:0
Safari和其他随之发布的

00:05:18.986 --> 00:05:20.254 align:middle line:0
周边进程一样

00:05:20.854 --> 00:05:22.055 align:middle line:0
完全运行在沙盒中

00:05:23.156 --> 00:05:24.758 align:middle line:0
如果你是网络开发者

00:05:24.825 --> 00:05:27.928 align:middle line:0
由于Safari
作为本地资源的方式

00:05:28.328 --> 00:05:31.732 align:middle line:0
这可能潜在影响到你的本地开发流程

00:05:33.033 --> 00:05:34.368 align:middle line:-1
如果想了解更多细节

00:05:34.434 --> 00:05:36.303 align:middle line:-1
请关注“Safari新特性”

00:05:36.370 --> 00:05:38.272 align:middle line:-1
以及本周五的WebKit演讲

00:05:39.373 --> 00:05:40.908 align:middle line:-1
当然 WebKit已在沙盒模式下

00:05:40.974 --> 00:05:42.042 align:middle line:-1
运行多年

00:05:42.409 --> 00:05:46.446 align:middle line:0
我们花了大量精力
审视已有的沙盒模式

00:05:46.880 --> 00:05:51.151 align:middle line:0
并从中移除任何有风险的
和不必要的依赖

00:05:51.518 --> 00:05:54.688 align:middle line:-1
例如 网页内容进程

00:05:55.022 --> 00:05:57.357 align:middle line:-1
不再需要访问Windows服务器

00:05:57.524 --> 00:06:00.060 align:middle line:-1
或者程序坞 或者网络

00:05:57.524 --> 00:06:00.060 align:middle line:-1
或者程序坞 或者网络

00:06:01.595 --> 00:06:04.031 align:middle line:-2
如果你的app
使用系统的WebKit

00:06:04.631 --> 00:06:07.134 align:middle line:-2
你将不再需要额外工作
来达到这一点

00:06:07.434 --> 00:06:09.570 align:middle line:-1
你将自动从这些改进中收益

00:06:12.639 --> 00:06:14.708 align:middle line:-1
下面 我来讲讲门禁

00:06:16.076 --> 00:06:18.345 align:middle line:-1
门禁过去几年中

00:06:18.412 --> 00:06:22.082 align:middle line:-2
在阻止恶意软件在平台上
大肆攻击方面表现出色

00:06:22.683 --> 00:06:23.550 align:middle line:-1
在这里

00:06:23.851 --> 00:06:25.018 align:middle line:-1
我们想让它更出色

00:06:25.485 --> 00:06:27.321 align:middle line:-1
我们主要集中于这三个方面

00:06:29.089 --> 00:06:29.923 align:middle line:-1
首先…

00:06:30.057 --> 00:06:34.027 align:middle line:-2
我邀请Kelly上台
向你们介绍新的安全机制

00:06:34.428 --> 00:06:36.363 align:middle line:-1
该机制让用户能控制

00:06:36.530 --> 00:06:39.032 align:middle line:-1
app访问他们个人数据的方式

00:06:40.634 --> 00:06:42.970 align:middle line:-1
然后 我将介绍新的安全特性

00:06:43.036 --> 00:06:45.939 align:middle line:-1
作为开发者 你能在app中采用

00:06:46.507 --> 00:06:49.109 align:middle line:-1
以增强其安全性和透明度

00:06:50.277 --> 00:06:51.144 align:middle line:-1
最后

00:06:51.411 --> 00:06:52.813 align:middle line:-1
我肯定你们已急于听到更多

00:06:52.880 --> 00:06:55.315 align:middle line:-2
关于昨天Sebastian
在讲话中提到的

00:06:55.382 --> 00:06:57.518 align:middle line:-1
Developer ID公正服务

00:06:57.951 --> 00:07:00.621 align:middle line:-2
所以我邀请Garrett上台
讲讲这方面

00:06:57.951 --> 00:07:00.621 align:middle line:-2
所以我邀请Garrett上台
讲讲这方面

00:07:02.689 --> 00:07:03.790 align:middle line:-1
好了 开始吧

00:07:03.924 --> 00:07:04.758 align:middle line:-1
Kelly？

00:07:10.964 --> 00:07:11.965 align:middle line:-1
好的 谢谢Pierre

00:07:12.533 --> 00:07:13.767 align:middle line:-1
我是Kelly Yancy

00:07:13.834 --> 00:07:16.069 align:middle line:-1
我是Apple OS安全团队的

00:07:16.303 --> 00:07:19.540 align:middle line:-2
我今天很荣幸地介绍
macOS Mojave里

00:07:19.606 --> 00:07:20.774 align:middle line:-1
新的用户数据保护机制

00:07:21.275 --> 00:07:23.177 align:middle line:-2
现在macOS
High Sierra里…

00:07:24.545 --> 00:07:25.712 align:middle line:-1
这些API…

00:07:29.416 --> 00:07:31.084 align:middle line:-1
会在允许app访问

00:07:31.185 --> 00:07:33.720 align:middle line:-1
其各自数据前征求用户同意

00:07:36.557 --> 00:07:38.926 align:middle line:-1
经过这些提示 善意的软件

00:07:38.992 --> 00:07:40.827 align:middle line:-1
能在如何访问

00:07:41.228 --> 00:07:44.264 align:middle line:-1
个人数据方面遵从用户偏好

00:07:46.300 --> 00:07:50.904 align:middle line:-2
现在macOS Mojave里
即使是通过文件系统

00:07:51.038 --> 00:07:53.173 align:middle line:-1
访问后台/存储的app

00:07:53.240 --> 00:07:54.708 align:middle line:-1
访问这些数据也需要用户同意

00:07:55.475 --> 00:07:58.879 align:middle line:-2
现在使用预定的API
访问这些数据的app

00:08:00.547 --> 00:08:01.882 align:middle line:-1
应该准备周全

00:08:02.149 --> 00:08:04.218 align:middle line:-1
但和以往一样 鼓励你在最新的

00:08:04.284 --> 00:08:06.787 align:middle line:-1
macOS上测试你的app

00:08:07.888 --> 00:08:11.325 align:middle line:-1
现在 如果app直接通过文件系统

00:08:11.391 --> 00:08:12.359 align:middle line:-1
访问数据库

00:08:13.360 --> 00:08:14.795 align:middle line:-1
请注意有可能

00:08:14.995 --> 00:08:17.464 align:middle line:-1
在操作系统提示用户授权时

00:08:17.764 --> 00:08:18.765 align:middle line:-1
该访问

00:08:18.832 --> 00:08:20.868 align:middle line:-1
会阻塞调用进程

00:08:21.602 --> 00:08:25.038 align:middle line:-2
在计算机每秒进行
数亿万操作的世界里

00:08:25.239 --> 00:08:27.474 align:middle line:-1
人的延迟相对较高

00:08:28.041 --> 00:08:30.544 align:middle line:-2
你不会想在主线程里
进行该I/O操作

00:08:30.744 --> 00:08:34.248 align:middle line:-1
否则 弹出提示信息时其会挂起

00:08:36.450 --> 00:08:38.284 align:middle line:-1
这里是一段通过

00:08:38.352 --> 00:08:41.087 align:middle line:-1
文件系统访问用户图片的代码示例

00:08:41.922 --> 00:08:42.756 align:middle line:-1
现在 默认的

00:08:42.823 --> 00:08:45.392 align:middle line:-2
Photos app
在图片文件夹里

00:08:45.459 --> 00:08:46.660 align:middle line:-1
保存用户的图片库

00:08:47.361 --> 00:08:48.228 align:middle line:-1
因此…

00:08:49.229 --> 00:08:53.000 align:middle line:-1
当这段代码访问用户的图片库时

00:08:53.400 --> 00:08:55.068 align:middle line:-1
其可能因为访问用户的照片

00:08:55.135 --> 00:08:57.004 align:middle line:-1
触发授权提示

00:08:57.538 --> 00:09:00.307 align:middle line:-2
在macOS
High Sierra里则不同

00:08:57.538 --> 00:09:00.307 align:middle line:-2
在macOS
High Sierra里则不同

00:09:02.476 --> 00:09:04.878 align:middle line:-1
现在app访问用户的主目录时

00:09:05.112 --> 00:09:08.982 align:middle line:-1
可能触发多种授权提示 不只是照片

00:09:09.149 --> 00:09:11.351 align:middle line:-1
还有联系人、日历等等

00:09:12.085 --> 00:09:14.488 align:middle line:-1
因为很多app访问整个文件系统

00:09:14.555 --> 00:09:16.823 align:middle line:-1
例如磁盘管理或者备份软件

00:09:17.791 --> 00:09:20.360 align:middle line:-2
用户能在系统设置的
安全和隐私面板

00:09:20.694 --> 00:09:24.164 align:middle line:-1
把它们加入新的系统应用数据分类

00:09:24.231 --> 00:09:27.034 align:middle line:-1
以提前授权这些app

00:09:27.801 --> 00:09:30.337 align:middle line:-1
这样做 用户提前授权这些app

00:09:30.404 --> 00:09:34.041 align:middle line:-2
就能在访问他们所有的
隐私数据时没有提示

00:09:34.675 --> 00:09:39.947 align:middle line:-2
授权也可以通过MDM服务器
在教育或企业环境

00:09:40.247 --> 00:09:41.415 align:middle line:-1
提前配置

00:09:41.481 --> 00:09:43.884 align:middle line:-1
只要其为用户改进的注册

00:09:46.186 --> 00:09:50.457 align:middle line:-2
当用户收到访问个人数据的
授权提示时

00:09:50.891 --> 00:09:53.527 align:middle line:-1
了解访问的目的十分重要

00:09:54.361 --> 00:09:58.198 align:middle line:-2
设想你安装了一个
从未使用过的app时

00:09:58.799 --> 00:10:02.402 align:middle line:-1
第一次运行就看到这个提示

00:09:58.799 --> 00:10:02.402 align:middle line:-1
第一次运行就看到这个提示

00:10:02.936 --> 00:10:04.137 align:middle line:-1
这是个艰难的抉择

00:10:05.138 --> 00:10:06.907 align:middle line:-1
但我们能让他简单点

00:10:07.641 --> 00:10:09.309 align:middle line:-1
通过加入目的描述

00:10:10.043 --> 00:10:13.280 align:middle line:-1
以解释app为何请求访问

00:10:13.480 --> 00:10:16.617 align:middle line:-1
以及拒绝的后果是什么

00:10:17.384 --> 00:10:19.520 align:middle line:-1
现在app可以

00:10:19.653 --> 00:10:22.556 align:middle line:-2
通过在Info.plist文件里
包含键值

00:10:23.290 --> 00:10:25.959 align:middle line:-1
指定授权提示显示的文字

00:10:27.394 --> 00:10:28.729 align:middle line:-1
这是我们已经看到的

00:10:28.795 --> 00:10:31.164 align:middle line:-2
每个API的
Info.plist的键值

00:10:32.199 --> 00:10:36.069 align:middle line:-2
你可能注意到这些和iOS里的
非常相似

00:10:37.237 --> 00:10:38.505 align:middle line:-1
我想指出一个区别

00:10:38.572 --> 00:10:41.308 align:middle line:-2
那就是位置服务的
Info.plist键值

00:10:43.210 --> 00:10:45.646 align:middle line:-1
该键值在iOS上已经废弃了

00:10:45.712 --> 00:10:50.651 align:middle line:-2
但我保证其在macOS Mojave上
是有效键值

00:10:52.286 --> 00:10:57.491 align:middle line:-2
链接到10.14 SDK的app
会要求这些键值

00:10:58.592 --> 00:11:00.794 align:middle line:-1
除了通知用户

00:10:58.592 --> 00:11:00.794 align:middle line:-1
除了通知用户

00:11:00.861 --> 00:11:04.998 align:middle line:-1
这些键值还用于告知操作系统

00:11:05.065 --> 00:11:06.333 align:middle line:-1
作为开发者

00:11:06.633 --> 00:11:09.736 align:middle line:-1
你打算让app访问用户个人数据

00:11:10.737 --> 00:11:13.874 align:middle line:-1
如果app要访问用户个人数据

00:11:14.141 --> 00:11:15.609 align:middle line:-1
却没包含…

00:11:16.410 --> 00:11:18.879 align:middle line:-1
合适的键值和访问数据目的描述

00:11:19.980 --> 00:11:23.584 align:middle line:-2
macOS Mojave
判定该访问是意外的

00:11:23.984 --> 00:11:25.152 align:middle line:-1
并退出app

00:11:26.353 --> 00:11:27.487 align:middle line:-1
为了保持兼容

00:11:27.554 --> 00:11:31.892 align:middle line:-2
对链接到旧SDK的app来说
这些键值是可选的

00:11:33.060 --> 00:11:34.228 align:middle line:-1
举例来说

00:11:34.294 --> 00:11:36.997 align:middle line:-2
有一个为10.13 SDK
开发的app

00:11:37.364 --> 00:11:39.766 align:middle line:-1
要通过这些API

00:11:39.833 --> 00:11:41.235 align:middle line:-1
访问用户个人数据

00:11:42.569 --> 00:11:43.971 align:middle line:-1
该app不会退出

00:11:44.371 --> 00:11:46.874 align:middle line:-2
而是显示一个缺少
目的描述的提示信息

00:11:46.940 --> 00:11:49.009 align:middle line:-1
就像一分钟前我们看到那个一样

00:11:49.176 --> 00:11:52.279 align:middle line:-1
因此还是鼓励在app中

00:11:52.813 --> 00:11:53.680 align:middle line:-1
包含Info.plist键值

00:11:53.947 --> 00:11:56.917 align:middle line:-1
即使是旧的SDK

00:11:57.751 --> 00:12:01.121 align:middle line:-1
用户也能更好了解访问数据的理由

00:11:57.751 --> 00:12:01.121 align:middle line:-1
用户也能更好了解访问数据的理由

00:12:03.557 --> 00:12:06.260 align:middle line:-1
除了这些提示信息

00:12:06.927 --> 00:12:10.364 align:middle line:-2
macOS Mojave
还限制访问

00:12:10.731 --> 00:12:13.333 align:middle line:-1
用户的隐私数据

00:12:19.606 --> 00:12:22.176 align:middle line:0
因此通过文件系统访问这些数据时

00:12:23.076 --> 00:12:25.812 align:middle line:0
操作系统不会提示授权

00:12:26.413 --> 00:12:30.951 align:middle line:0
除非各自的系统app或服务
有权访问这些数据

00:12:31.218 --> 00:12:34.321 align:middle line:0
或者用户通过安全和隐私设置面板

00:12:34.655 --> 00:12:35.889 align:middle line:0
将app预授权为

00:12:35.956 --> 00:12:37.925 align:middle line:0
系统app数据

00:12:38.258 --> 00:12:39.293 align:middle line:0
就如刚才所见

00:12:40.561 --> 00:12:41.495 align:middle line:0
此外…

00:12:42.262 --> 00:12:46.166 align:middle line:0
授权还可以通过MDM注册
提前配置

00:12:47.968 --> 00:12:51.638 align:middle line:0
访问这些数据的另一个方式是脚本

00:12:53.006 --> 00:12:56.810 align:middle line:0
邮件、信息和Safari
都可以脚本化

00:12:56.877 --> 00:13:00.080 align:middle line:0
向其他app暴露一些功能
以实现自动化

00:12:56.877 --> 00:13:00.080 align:middle line:0
向其他app暴露一些功能
以实现自动化

00:13:00.647 --> 00:13:02.182 align:middle line:-1
拿邮件举例

00:13:02.583 --> 00:13:05.686 align:middle line:-2
邮件的本地数据库
有很多个人信息

00:13:06.086 --> 00:13:09.957 align:middle line:-2
他有我朋友、家人、往来公司的
邮件地址

00:13:10.023 --> 00:13:12.993 align:middle line:-1
还有邮件内容本身

00:13:13.393 --> 00:13:16.296 align:middle line:-1
我的私人回复 购物回执

00:13:16.363 --> 00:13:17.831 align:middle line:-1
发货通知

00:13:18.465 --> 00:13:21.768 align:middle line:0
还有我忘了的服务的临时密码

00:13:23.036 --> 00:13:26.640 align:middle line:0
所以邮件app自然有权
访问其本地数据库

00:13:27.241 --> 00:13:30.677 align:middle line:0
macOS Mojave里
其他app则无权访问

00:13:32.479 --> 00:13:35.215 align:middle line:0
而邮件可以由其他app脚本访问

00:13:35.282 --> 00:13:39.720 align:middle line:0
我们需确保其只在我同意时
共享我的个人信息

00:13:42.856 --> 00:13:44.291 align:middle line:0
因为要让用户控制

00:13:44.358 --> 00:13:46.827 align:middle line:0
受信访问其数据的app

00:13:46.894 --> 00:13:48.695 align:middle line:0
与其他app怎样交互

00:13:49.363 --> 00:13:52.065 align:middle line:0
macOS Mojave
将包含这样的提示信息

00:13:52.132 --> 00:13:54.668 align:middle line:0
以授权app访问其他app

00:13:55.502 --> 00:13:56.737 align:middle line:0
现在Developer Preview

00:13:56.803 --> 00:14:00.073 align:middle line:0
不要求授权以自动化其他app

00:13:56.803 --> 00:14:00.073 align:middle line:0
不要求授权以自动化其他app

00:14:00.340 --> 00:14:03.744 align:middle line:0
但是可以在未来的预览版中
试验该保护机制

00:14:05.179 --> 00:14:06.780 align:middle line:0
只有用户同意

00:14:08.382 --> 00:14:11.118 align:middle line:0
邮件才能被其他app自动化

00:14:12.719 --> 00:14:14.588 align:middle line:-1
所以这适用于Apple的事件

00:14:17.491 --> 00:14:18.492 align:middle line:-1
但有例外

00:14:18.559 --> 00:14:20.460 align:middle line:-1
那些非隐私敏感的

00:14:20.961 --> 00:14:23.163 align:middle line:-1
Apple事件有例外

00:14:23.664 --> 00:14:24.565 align:middle line:-1
例如

00:14:24.698 --> 00:14:26.900 align:middle line:-1
在默认app中打开文档

00:14:27.134 --> 00:14:30.204 align:middle line:-1
在默认协议处理程序中打开URL

00:14:30.971 --> 00:14:32.739 align:middle line:-1
或打开其他app

00:14:35.742 --> 00:14:36.577 align:middle line:-1
最后…

00:14:37.077 --> 00:14:41.315 align:middle line:-2
macOS Mojave
引入了iOS中我喜欢的每个特性

00:14:42.082 --> 00:14:44.251 align:middle line:-1
用户授权的相机和麦克

00:14:46.353 --> 00:14:47.888 align:middle line:-1
我想我要拒绝这个

00:14:51.325 --> 00:14:52.159 align:middle line:-1
所以app能…

00:14:53.861 --> 00:14:56.296 align:middle line:-1
在没有用户同意时模拟相机

00:14:56.363 --> 00:14:57.531 align:middle line:-1
和麦克硬件

00:14:57.965 --> 00:14:59.466 align:middle line:-1
但开始录制

00:15:00.267 --> 00:15:01.802 align:middle line:-1
还是需要用户授权

00:15:03.103 --> 00:15:06.340 align:middle line:-1
这适用于所有内置驱动支持的设备

00:15:09.309 --> 00:15:11.445 align:middle line:-1
现在 app可以查询

00:15:12.946 --> 00:15:15.482 align:middle line:-1
授权状态

00:15:17.050 --> 00:15:17.885 align:middle line:-1
这在想要app的

00:15:17.951 --> 00:15:22.489 align:middle line:-2
用户体验反映
用户已有的决策时很有用

00:15:23.290 --> 00:15:27.628 align:middle line:-2
AVFoundation提供的
这一API和iOS的相同

00:15:28.595 --> 00:15:29.897 align:middle line:-1
有趣的是

00:15:30.230 --> 00:15:32.733 align:middle line:-1
它不只简单的返回是否的布尔值

00:15:33.433 --> 00:15:36.670 align:middle line:-1
它返回四种可能的枚举值

00:15:37.804 --> 00:15:39.206 align:middle line:-1
我将深入讲解

00:15:39.273 --> 00:15:41.175 align:middle line:-1
因为我觉得这些是相关的

00:15:42.042 --> 00:15:44.044 align:middle line:-1
第一个 未确定

00:15:44.111 --> 00:15:46.947 align:middle line:-1
意味着用户尚未同意

00:15:47.181 --> 00:15:49.816 align:middle line:-1
app访问相机或者麦克

00:15:51.118 --> 00:15:54.388 align:middle line:-1
因此 app访问硬件时

00:15:55.122 --> 00:15:57.824 align:middle line:-1
操作系统将弹出提示

00:16:01.295 --> 00:16:04.998 align:middle line:-1
受限的 意味着用户不能同意

00:16:05.265 --> 00:16:06.934 align:middle line:-1
访问硬件…

00:16:07.000 --> 00:16:08.335 align:middle line:-1
相机或麦克…

00:16:08.402 --> 00:16:09.469 align:middle line:-1
被禁用

00:16:09.636 --> 00:16:12.306 align:middle line:-1
家长控制或移动设备管理

00:16:14.708 --> 00:16:18.846 align:middle line:-1
拒绝的 意味着之前提示过用户

00:16:19.179 --> 00:16:21.748 align:middle line:-1
但用户拒绝授权

00:16:22.115 --> 00:16:25.352 align:middle line:-1
不想app访问硬件

00:16:26.653 --> 00:16:27.554 align:middle line:-1
最后

00:16:28.021 --> 00:16:31.625 align:middle line:-1
加权均值意味着之前提示过用户

00:16:31.758 --> 00:16:35.596 align:middle line:-1
用户授权app有权访问硬件

00:16:40.467 --> 00:16:41.301 align:middle line:-1
因此

00:16:41.535 --> 00:16:43.937 align:middle line:-1
我们相信在当下提示十分重要

00:16:44.404 --> 00:16:46.473 align:middle line:-1
这也是操作系统现在

00:16:47.007 --> 00:16:49.309 align:middle line:-1
及时显示提示信息的原因

00:16:49.376 --> 00:16:53.313 align:middle line:-1
app访问相机麦克时

00:16:54.515 --> 00:16:57.251 align:middle line:-1
操作系统必要时会显示提示

00:16:57.518 --> 00:16:59.052 align:middle line:-1
我们觉得那是正确的时间

00:16:59.119 --> 00:17:01.288 align:middle line:-1
因为用户当时

00:16:59.119 --> 00:17:01.288 align:middle line:-1
因为用户当时

00:17:01.421 --> 00:17:04.358 align:middle line:-1
最能理解为何app要访问硬件

00:17:05.893 --> 00:17:08.795 align:middle line:-1
而有时app想更多控制

00:17:08.862 --> 00:17:11.131 align:middle line:-1
授权提示的时间

00:17:11.464 --> 00:17:13.901 align:middle line:-1
例如 app打开一个窗口

00:17:13.967 --> 00:17:17.069 align:middle line:-1
窗口中显示相机画面

00:17:17.137 --> 00:17:20.741 align:middle line:-1
或者相机的可视化音频

00:17:21.241 --> 00:17:23.343 align:middle line:-1
你想在用户拒绝授权时

00:17:23.410 --> 00:17:25.311 align:middle line:-1
避免显示空白窗口

00:17:26.113 --> 00:17:29.149 align:middle line:-1
这时最好在窗口打开前就提示

00:17:29.883 --> 00:17:32.953 align:middle line:-2
所以AVFoundation
提供该API

00:17:33.253 --> 00:17:35.822 align:middle line:-1
你能提前获取授权

00:17:38.058 --> 00:17:41.228 align:middle line:-1
我想强调的是 该API是异步的

00:17:41.361 --> 00:17:42.696 align:middle line:-1
它用一个回调函数

00:17:43.263 --> 00:17:48.235 align:middle line:-2
返回一个app
是否有权访问的布尔值

00:17:48.302 --> 00:17:50.938 align:middle line:-1
因此和刚才所见的枚举值有些许不同

00:17:52.139 --> 00:17:55.075 align:middle line:-1
当app访问接口时

00:17:55.142 --> 00:17:56.376 align:middle line:-1
该回调函数能立即调用

00:17:56.577 --> 00:18:00.981 align:middle line:-1
例如 如果用户之前授权或拒绝访问

00:17:56.577 --> 00:18:00.981 align:middle line:-1
例如 如果用户之前授权或拒绝访问

00:18:01.281 --> 00:18:02.649 align:middle line:-1
操作系统已经知道答案

00:18:02.716 --> 00:18:06.353 align:middle line:-1
并能立即调用回调函数告诉你结果

00:18:06.587 --> 00:18:08.655 align:middle line:-1
类似地

00:18:10.090 --> 00:18:14.995 align:middle line:-2
如果家长控制或MDM服务器
让硬件不可用

00:18:15.696 --> 00:18:19.666 align:middle line:-1
回调函数会用否的布尔值立即执行

00:18:22.603 --> 00:18:26.507 align:middle line:-1
但是也可能该回调函数在之后才执行

00:18:26.874 --> 00:18:28.242 align:middle line:-1
可能很久以后

00:18:28.809 --> 00:18:31.211 align:middle line:-1
当我们等待时系统显示提示信息

00:18:31.278 --> 00:18:34.147 align:middle line:-1
只有在用户做出决定后

00:18:34.214 --> 00:18:35.983 align:middle line:-1
回调函数才会执行

00:18:36.683 --> 00:18:38.852 align:middle line:-1
那时我们才知道答案

00:18:38.919 --> 00:18:40.821 align:middle line:-2
是的 app有权访问
或 不 禁止访问

00:18:44.691 --> 00:18:48.595 align:middle line:-2
所以app可以包含访问
相机和麦克的目的描述

00:18:49.329 --> 00:18:51.198 align:middle line:-1
和其他目的描述一样

00:18:51.965 --> 00:18:55.369 align:middle line:-2
这些对链接到10.14 SDK的
app是必须的

00:18:55.936 --> 00:18:56.970 align:middle line:-1
对链接到旧版本SDK

00:18:57.804 --> 00:18:58.906 align:middle line:-1
的app来说

00:18:58.972 --> 00:19:02.009 align:middle line:-2
尽管可选 却鼓励提供
因为他们能提供更多信息

00:18:58.972 --> 00:19:02.009 align:middle line:-2
尽管可选 却鼓励提供
因为他们能提供更多信息

00:19:05.045 --> 00:19:08.615 align:middle line:0
回顾一下：这是刚看过的主题概要

00:19:11.585 --> 00:19:12.886 align:middle line:0
macOS Mojave

00:19:13.220 --> 00:19:15.189 align:middle line:0
不会引导用户授权

00:19:15.956 --> 00:19:17.858 align:middle line:0
访问这些用户数据

00:19:18.458 --> 00:19:21.995 align:middle line:0
只有各自的系统app和用户

00:19:22.062 --> 00:19:24.331 align:middle line:0
通过安全和隐私设置面板

00:19:24.498 --> 00:19:27.901 align:middle line:0
或者家长控制和
MDM提前配置

00:19:28.902 --> 00:19:30.671 align:middle line:0
授权的app才允许访问这些数据

00:19:33.540 --> 00:19:36.076 align:middle line:0
这些是app在用户授权后

00:19:36.143 --> 00:19:38.178 align:middle line:0
能访问的用户数据和设备类别

00:19:39.413 --> 00:19:41.715 align:middle line:0
现在操作系统、macOS

00:19:42.716 --> 00:19:45.018 align:middle line:0
在app第一次访问这些数据时

00:19:45.085 --> 00:19:47.821 align:middle line:0
向用户显示授权提示

00:19:48.355 --> 00:19:50.357 align:middle line:0
然后记住用户的选择

00:19:50.424 --> 00:19:51.425 align:middle line:0
这对用户来说很棒

00:19:51.491 --> 00:19:55.996 align:middle line:0
每个app访问
每个数据只用提示一次

00:19:56.063 --> 00:19:57.431 align:middle line:-1
而不会提示多次

00:19:58.165 --> 00:19:59.399 align:middle line:0
但作为开发者

00:20:00.767 --> 00:20:02.603 align:middle line:0
你可能想提前提示用户

00:20:03.170 --> 00:20:05.305 align:middle line:0
以便显示提示信息后

00:20:05.539 --> 00:20:07.107 align:middle line:0
能决定app的行为

00:20:08.275 --> 00:20:13.113 align:middle line:0
用户同意该怎样
用户拒绝该怎样

00:20:13.780 --> 00:20:17.518 align:middle line:0
出于此目的 macOS提供了
叫做tccutil的工具

00:20:18.285 --> 00:20:21.455 align:middle line:0
能用于让操作系统忘记

00:20:22.356 --> 00:20:24.591 align:middle line:0
之前授权提示的答案

00:20:25.459 --> 00:20:29.530 align:middle line:0
这样下次运行app时
app要求授权

00:20:30.063 --> 00:20:31.798 align:middle line:0
操作系统会再次提示

00:20:32.699 --> 00:20:35.135 align:middle line:0
该工具仅用于测试

00:20:35.736 --> 00:20:38.272 align:middle line:-1
即使在调试时 app也不该

00:20:38.338 --> 00:20:39.640 align:middle line:-1
自动调用该工具

00:20:42.009 --> 00:20:42.876 align:middle line:-1
总结来说

00:20:43.243 --> 00:20:45.679 align:middle line:-1
确保授权提示即时显示

00:20:45.946 --> 00:20:47.714 align:middle line:-1
这很重要 能让用户理解

00:20:47.781 --> 00:20:49.583 align:middle line:-1
提示显示的原因

00:20:50.884 --> 00:20:54.721 align:middle line:-2
加入Info.plist键值
让用户理解

00:20:55.088 --> 00:20:57.090 align:middle line:-1
app将怎样访问数据

00:20:57.591 --> 00:21:01.261 align:middle line:-2
以及如果拒绝访问
将缺失哪些功能

00:20:57.591 --> 00:21:01.261 align:middle line:-2
以及如果拒绝访问
将缺失哪些功能

00:21:02.462 --> 00:21:05.899 align:middle line:-2
不要在主线程中访问
需要授权的资源

00:21:05.966 --> 00:21:09.036 align:middle line:-1
这样等待授权时app不会挂起

00:21:09.603 --> 00:21:13.040 align:middle line:-1
访问需要授权的资源时

00:21:13.140 --> 00:21:15.642 align:middle line:-1
正确处理用户拒绝的情况

00:21:17.277 --> 00:21:19.813 align:middle line:-1
最后 当用户同意访问时

00:21:20.113 --> 00:21:22.182 align:middle line:-1
对用户的个人数据负责

00:21:23.817 --> 00:21:27.421 align:middle line:-2
这就是macOS Mojave上
新的用户数据保护机制

00:21:27.688 --> 00:21:30.057 align:middle line:-2
谢谢 我将把讲舞台
交还给Pierre

00:21:30.123 --> 00:21:33.126 align:middle line:-1
继续介绍增强的运行时保护

00:21:38.832 --> 00:21:39.733 align:middle line:-1
谢谢Kelly

00:21:41.435 --> 00:21:44.805 align:middle line:-2
过去几年里 我们向Mac
引入了系统完整防护机制

00:21:45.105 --> 00:21:48.208 align:middle line:-1
很多人问 在app里能做什么

00:21:48.442 --> 00:21:51.879 align:middle line:-2
对其余系统使用
我们提供的运行时保护

00:21:53.046 --> 00:21:55.115 align:middle line:-1
然而到现在 还没有好的说法

00:21:56.783 --> 00:21:57.618 align:middle line:-1
今天…

00:21:58.018 --> 00:21:59.820 align:middle line:-1
我们将引入一套新的能在app中

00:21:59.887 --> 00:22:02.089 align:middle line:-1
方便使用的运行时保护机制

00:21:59.887 --> 00:22:02.089 align:middle line:-1
方便使用的运行时保护机制

00:22:03.690 --> 00:22:08.262 align:middle line:-2
这是10.14 SDK上
可用的新的可选机制

00:22:09.062 --> 00:22:12.966 align:middle line:-2
通过使能全套系统提供的
运行时保护

00:22:13.200 --> 00:22:15.202 align:middle line:-1
其有效的为app设置

00:22:15.269 --> 00:22:16.503 align:middle line:-1
新的安全基线

00:22:17.471 --> 00:22:23.143 align:middle line:-2
并让你能选择退回更有
风险的行为或想法

00:22:24.411 --> 00:22:28.182 align:middle line:-1
它能配置一套新的不受限的设置

00:22:28.582 --> 00:22:31.485 align:middle line:-1
不受限是指这些设置不需要

00:22:31.552 --> 00:22:34.788 align:middle line:-1
任何预先授权所有人都能访问

00:22:36.356 --> 00:22:39.927 align:middle line:-2
它能在Xcode的
用具界面中轻松配置

00:22:40.727 --> 00:22:41.662 align:middle line:-1
最后

00:22:42.029 --> 00:22:43.664 align:middle line:-1
如果需要在老版本的

00:22:43.964 --> 00:22:47.301 align:middle line:-2
macOS及其子版本中部署app
它还是完全

00:22:48.035 --> 00:22:49.002 align:middle line:-1
向后兼容的

00:22:49.269 --> 00:22:52.339 align:middle line:-1
随着将来加入更多特性

00:22:52.606 --> 00:22:54.808 align:middle line:-1
已经发布的app不会受影响

00:22:56.143 --> 00:22:58.078 align:middle line:-1
我们来聊聊新的保护机制

00:22:59.213 --> 00:23:00.547 align:middle line:-1
首先 代码签名

00:22:59.213 --> 00:23:00.547 align:middle line:-1
首先 代码签名

00:23:01.882 --> 00:23:03.717 align:middle line:-1
当采用新的运行时

00:23:03.951 --> 00:23:05.118 align:middle line:-1
系统将强制要求

00:23:05.185 --> 00:23:09.089 align:middle line:-1
地址空间内的每个可执行页

00:23:09.423 --> 00:23:11.491 align:middle line:-1
必须有app发布时的

00:23:11.558 --> 00:23:12.893 align:middle line:-1
原始代码签名支持

00:23:16.063 --> 00:23:18.031 align:middle line:-1
这对大多数app来说都不错

00:23:18.098 --> 00:23:20.767 align:middle line:-1
当然有些情况下这是不合适的

00:23:20.834 --> 00:23:22.302 align:middle line:-1
因此让我们看看如何配置

00:23:24.071 --> 00:23:27.174 align:middle line:-1
例如 app有一个脚本运行时

00:23:27.341 --> 00:23:29.443 align:middle line:-1
有较高的性能要求

00:23:29.943 --> 00:23:33.480 align:middle line:-2
此时 你很可能使用JIT
编译代码

00:23:33.547 --> 00:23:34.915 align:middle line:-1
来执行app

00:23:35.482 --> 00:23:36.316 align:middle line:-1
这种情况…

00:23:36.483 --> 00:23:38.919 align:middle line:-1
能使用列表中的第一个设置

00:23:39.620 --> 00:23:42.155 align:middle line:-1
它让你能访问MMAP系统调用中

00:23:42.222 --> 00:23:43.724 align:middle line:-1
新的MAP JIT标识

00:23:44.057 --> 00:23:46.260 align:middle line:-1
标识让你能创建所谓的JIT区域

00:23:46.393 --> 00:23:48.662 align:middle line:-1
这些是可读 可写

00:23:48.729 --> 00:23:50.197 align:middle line:-1
可执行的内存区域

00:23:52.232 --> 00:23:55.035 align:middle line:-1
再如有一个插件系统

00:23:55.102 --> 00:23:58.972 align:middle line:-1
你期望能加载执行没有合适签名

00:23:59.206 --> 00:24:02.142 align:middle line:-1
或完全没有签名的插件

00:23:59.206 --> 00:24:02.142 align:middle line:-1
或完全没有签名的插件

00:24:03.076 --> 00:24:05.546 align:middle line:-1
那么就得用列表中的第二个设置

00:24:06.947 --> 00:24:08.482 align:middle line:-1
最后 如果app…

00:24:08.549 --> 00:24:11.919 align:middle line:-1
需要运行时修改自己的代码页

00:24:12.186 --> 00:24:14.755 align:middle line:-1
有效破坏自己的代码签名

00:24:15.455 --> 00:24:19.459 align:middle line:-1
就需要用列表里的最后一个设置

00:24:20.160 --> 00:24:24.264 align:middle line:-2
要注意的是
绝大多数app不需要该功能

00:24:25.399 --> 00:24:26.867 align:middle line:-1
但我们还是想让它能实现

00:24:28.836 --> 00:24:30.571 align:middle line:-1
然后是代码库验证

00:24:31.471 --> 00:24:33.006 align:middle line:-1
采用新的运行时

00:24:33.473 --> 00:24:37.377 align:middle line:-1
系统会默认强制要求

00:24:37.511 --> 00:24:40.914 align:middle line:-1
动态加载的每个库 框架 插件

00:24:41.548 --> 00:24:44.051 align:middle line:-1
的代码签名

00:24:45.319 --> 00:24:47.020 align:middle line:-1
这些模块…

00:24:47.087 --> 00:24:50.490 align:middle line:-2
这些对象必须有Apple签名
并作为OS一部分发布

00:24:50.624 --> 00:24:51.458 align:middle line:-1
或者…

00:24:51.525 --> 00:24:53.093 align:middle line:-1
必须有app发布时

00:24:53.160 --> 00:24:55.362 align:middle line:-1
主程序的相同的组织ID签名

00:24:56.597 --> 00:24:58.232 align:middle line:-1
如果是插件系统

00:24:58.298 --> 00:25:03.637 align:middle line:-1
你需要加载其他组织签名的对象

00:24:58.298 --> 00:25:03.637 align:middle line:-1
你需要加载其他组织签名的对象

00:25:04.404 --> 00:25:06.907 align:middle line:-1
就能用这一设置放松该政策

00:25:08.041 --> 00:25:10.911 align:middle line:-2
要注意 它还是要求
加载签名的代码

00:25:11.044 --> 00:25:12.779 align:middle line:-1
只是可以由其他组织签名

00:25:12.913 --> 00:25:16.049 align:middle line:-1
如果需要加载完全未签名的代码

00:25:16.517 --> 00:25:18.452 align:middle line:-1
就得用之前页面里的

00:25:18.519 --> 00:25:19.620 align:middle line:-1
一个设置

00:25:21.889 --> 00:25:22.990 align:middle line:-1
然后 调试：

00:25:24.358 --> 00:25:27.694 align:middle line:-1
新运行时里的app是不能调试的

00:25:28.462 --> 00:25:30.764 align:middle line:-1
也不能调试其他app

00:25:31.698 --> 00:25:35.135 align:middle line:-1
如果要在新运行时调试app

00:25:35.202 --> 00:25:37.337 align:middle line:-1
可以用允许任务设置

00:25:38.605 --> 00:25:41.808 align:middle line:-2
注意当在Xcode里
点击构建允许时

00:25:42.042 --> 00:25:44.211 align:middle line:-1
Xcode会自动为你加入该设置

00:25:44.278 --> 00:25:47.080 align:middle line:-2
如果用Xcode作为
本地开发的一部分

00:25:47.314 --> 00:25:48.782 align:middle line:-1
你什么都不用做

00:25:49.183 --> 00:25:50.417 align:middle line:-1
程序也会保证

00:25:50.484 --> 00:25:52.986 align:middle line:-1
当发布导出时

00:25:53.053 --> 00:25:55.322 align:middle line:-1
设置从签名中正确的去掉

00:25:56.323 --> 00:25:58.225 align:middle line:-2
如果不用Xcode
请确保发布程序时

00:25:58.292 --> 00:26:00.294 align:middle line:-1
没有该设置 除非确实需要

00:25:58.292 --> 00:26:00.294 align:middle line:-1
没有该设置 除非确实需要

00:26:01.528 --> 00:26:03.030 align:middle line:-1
如果app就是个调试器

00:26:03.096 --> 00:26:05.799 align:middle line:-1
那就得用列表中的第二个设置

00:26:06.466 --> 00:26:08.368 align:middle line:-1
最后 一些罕见情况下

00:26:08.435 --> 00:26:12.639 align:middle line:-1
app依赖于DYLD环境变量

00:26:12.706 --> 00:26:14.541 align:middle line:-1
在运行时修改其BFU

00:26:15.108 --> 00:26:17.144 align:middle line:-1
就可以用列表里的最后一个选项

00:26:19.713 --> 00:26:21.248 align:middle line:-1
最后 资源访问

00:26:22.015 --> 00:26:24.651 align:middle line:-1
运行时要求你对app

00:26:24.952 --> 00:26:28.288 align:middle line:-1
要访问的数据类型透明

00:26:28.822 --> 00:26:31.892 align:middle line:-1
因此如果app要访问的

00:26:31.959 --> 00:26:34.094 align:middle line:-1
是Kelly之前提到的

00:26:34.161 --> 00:26:36.363 align:middle line:-1
受保护类别的数据

00:26:36.997 --> 00:26:38.799 align:middle line:-1
而app签名中又没有包含

00:26:38.866 --> 00:26:39.867 align:middle line:-1
合适的设置

00:26:40.033 --> 00:26:42.002 align:middle line:-1
系统将自动终止它

00:26:44.338 --> 00:26:46.673 align:middle line:0
我们有对应Kelly提到的

00:26:46.740 --> 00:26:47.941 align:middle line:0
每个类别的设置

00:26:48.842 --> 00:26:49.843 align:middle line:0
但记住

00:26:50.310 --> 00:26:52.379 align:middle line:0
只加入设置是不够的

00:26:53.547 --> 00:26:56.917 align:middle line:0
链接到10.14 SDK时
还得加入目的描述

00:26:57.484 --> 00:27:00.988 align:middle line:0
最后 它也不会自动
授权你访问数据

00:26:57.484 --> 00:27:00.988 align:middle line:0
最后 它也不会自动
授权你访问数据

00:27:01.288 --> 00:27:03.590 align:middle line:0
用户仍有最后的决定权

00:27:06.260 --> 00:27:07.261 align:middle line:0
怎么使能这一点？

00:27:07.327 --> 00:27:08.862 align:middle line:0
Xcode里

00:27:09.530 --> 00:27:10.797 align:middle line:0
前往开发能力面板

00:27:11.698 --> 00:27:14.201 align:middle line:0
的目标设置

00:27:15.035 --> 00:27:17.738 align:middle line:0
你将找到新的硬件和运行时小节

00:27:18.305 --> 00:27:19.306 align:middle line:-1
并能开启它

00:27:20.207 --> 00:27:22.643 align:middle line:0
之前提到的每个设置

00:27:22.709 --> 00:27:24.111 align:middle line:0
都有选项

00:27:29.950 --> 00:27:31.552 align:middle line:0
更合适的

00:27:31.752 --> 00:27:33.654 align:middle line:0
是使用命令行接口

00:27:33.720 --> 00:27:38.158 align:middle line:0
能在代码签名命令中
用新的运行时选项

00:27:39.760 --> 00:27:42.262 align:middle line:-1
为了验证是否恰当设置

00:27:42.329 --> 00:27:43.797 align:middle line:-1
并采用这一新的运行时

00:27:43.864 --> 00:27:45.732 align:middle line:-1
能使用--display选项

00:27:46.133 --> 00:27:48.435 align:middle line:-1
这里 要找的是

00:27:49.369 --> 00:27:53.340 align:middle line:-1
运行时标识 以及运行时版本

00:27:56.910 --> 00:27:57.744 align:middle line:0
好了

00:27:57.811 --> 00:27:59.580 align:middle line:0
现在来看看问题的最后一个部分

00:28:00.113 --> 00:28:01.415 align:middle line:-1
聊聊公正的app

00:28:02.115 --> 00:28:02.950 align:middle line:-1
Garrett？

00:28:07.321 --> 00:28:08.188 align:middle line:-1
谢谢Pierre

00:28:09.122 --> 00:28:09.990 align:middle line:-1
大家好

00:28:10.057 --> 00:28:10.891 align:middle line:-1
我是Garrett

00:28:10.958 --> 00:28:13.160 align:middle line:-2
我就职于Apple的
受信执行团队

00:28:14.928 --> 00:28:16.830 align:middle line:0
我的同事Kelly之前讲到

00:28:16.897 --> 00:28:20.300 align:middle line:0
通过保证用户对私人数据的控制

00:28:20.501 --> 00:28:23.770 align:middle line:-1
以保护其免于恶意软件的方法之一

00:28:24.271 --> 00:28:26.273 align:middle line:-1
我想讲讲保护用户免于恶意软件

00:28:26.340 --> 00:28:27.474 align:middle line:-1
的其他方法

00:28:27.841 --> 00:28:31.178 align:middle line:-1
这是靠识别和阻断恶意软件

00:28:31.245 --> 00:28:32.779 align:middle line:-1
使之没有机会运行

00:28:34.414 --> 00:28:36.016 align:middle line:-1
现在Mac App Store

00:28:36.083 --> 00:28:38.585 align:middle line:-1
是用户寻找和下载新软件的好地方

00:28:39.086 --> 00:28:40.988 align:middle line:-1
人们能安心的安装app

00:28:41.054 --> 00:28:45.259 align:middle line:-2
知道Apple已采取行动
保证它们是无害的

00:28:46.894 --> 00:28:49.196 align:middle line:-2
今年Mac App Store
受到大量关注

00:28:49.263 --> 00:28:50.230 align:middle line:-1
这很不错

00:28:50.364 --> 00:28:53.467 align:middle line:-1
但我们也理解部分开发者需要

00:28:53.534 --> 00:28:55.002 align:middle line:-2
Developer ID计划的
灵活性

00:28:56.236 --> 00:28:57.137 align:middle line:-1
两者一起…

00:28:57.204 --> 00:28:59.573 align:middle line:-2
门禁和Developer ID
在阻止

00:28:59.640 --> 00:29:02.242 align:middle line:-1
恶意软件传播方面表现出色

00:28:59.640 --> 00:29:02.242 align:middle line:-1
恶意软件传播方面表现出色

00:29:02.609 --> 00:29:03.443 align:middle line:-1
今天

00:29:03.510 --> 00:29:06.246 align:middle line:-1
通过引入app公证

00:29:06.413 --> 00:29:08.749 align:middle line:-2
我们让Developer ID
计划更安全

00:29:10.484 --> 00:29:13.887 align:middle line:-1
app公证过程设计旨在散布之前

00:29:13.954 --> 00:29:17.057 align:middle line:-1
帮助识别阻断恶意软件

00:29:17.691 --> 00:29:19.726 align:middle line:-2
同时还保留了
Developer ID计划的

00:29:19.793 --> 00:29:21.361 align:middle line:-1
灵活性

00:29:22.129 --> 00:29:25.432 align:middle line:-1
这意味着能像现在一样

00:29:25.499 --> 00:29:27.501 align:middle line:-1
发布有现在相同功能的app

00:29:28.101 --> 00:29:31.205 align:middle line:-2
其中的关键就是
Developer ID公正服务

00:29:33.774 --> 00:29:36.243 align:middle line:-1
公证服务是执行

00:29:36.376 --> 00:29:40.681 align:middle line:-2
Developer ID
签名内容安全检查的自动化服务

00:29:41.415 --> 00:29:44.251 align:middle line:-2
其是Developer ID计划
的可选扩展

00:29:44.618 --> 00:29:46.153 align:middle line:-1
而非app审查

00:29:48.121 --> 00:29:49.256 align:middle line:-1
今天开始

00:29:49.456 --> 00:29:53.327 align:middle line:-1
开发者能开始上传可发布的内容

00:29:53.393 --> 00:29:54.595 align:middle line:-1
到公证服务

00:29:55.128 --> 00:29:58.398 align:middle line:-1
假如这些app 安装包

00:29:58.465 --> 00:30:01.568 align:middle line:-1
磁盘镜像不包含恶意软件

00:29:58.465 --> 00:30:01.568 align:middle line:-1
磁盘镜像不包含恶意软件

00:30:01.902 --> 00:30:04.471 align:middle line:-1
公证服务会发布一个公证号

00:30:04.838 --> 00:30:06.006 align:middle line:-1
到你的app

00:30:06.974 --> 00:30:08.342 align:middle line:-1
公证号能装订

00:30:08.408 --> 00:30:10.611 align:middle line:-1
并随app一起发布

00:30:10.911 --> 00:30:13.647 align:middle line:-1
门禁首次启动公证过的app时

00:30:13.881 --> 00:30:17.584 align:middle line:-1
能验证该公证并提供首次启动体验

00:30:19.520 --> 00:30:22.055 align:middle line:-1
现在你在发布之前的开发工作

00:30:22.122 --> 00:30:23.690 align:middle line:-1
完全保持不变

00:30:27.494 --> 00:30:29.229 align:middle line:-1
你可能已听说 在联合国

00:30:29.296 --> 00:30:31.498 align:middle line:-1
未来该过程将是必须的

00:30:31.798 --> 00:30:32.933 align:middle line:-1
尽管那是真的

00:30:33.000 --> 00:30:35.602 align:middle line:-1
我们现在发布该服务并接受反馈

00:30:35.669 --> 00:30:37.804 align:middle line:-1
暂时公证完全是可选的

00:30:40.507 --> 00:30:42.943 align:middle line:-1
继续之前 我想强调一点

00:30:44.244 --> 00:30:45.712 align:middle line:-1
这不是app审查

00:30:46.413 --> 00:30:49.716 align:middle line:-1
公证服务只简单执行一些安全审查

00:30:49.783 --> 00:30:52.452 align:middle line:-1
以确保内容可以安全发布

00:30:54.421 --> 00:30:55.255 align:middle line:-1
因此…

00:30:55.389 --> 00:30:57.724 align:middle line:-1
对开发过程来说 这看来像什么？

00:30:58.392 --> 00:31:00.861 align:middle line:-1
这是开发过程的高级

00:30:58.392 --> 00:31:00.861 align:middle line:-1
这是开发过程的高级

00:31:00.994 --> 00:31:02.262 align:middle line:0
和简化的概览

00:31:03.430 --> 00:31:04.498 align:middle line:0
左边

00:31:04.565 --> 00:31:06.600 align:middle line:0
开发者在他们的本地系统

00:31:06.667 --> 00:31:07.935 align:middle line:0
迭代开发app

00:31:08.068 --> 00:31:12.239 align:middle line:0
构建特性 调试
用Mac开发者证书签名

00:31:13.140 --> 00:31:15.142 align:middle line:0
当app准备好发布时

00:31:16.243 --> 00:31:18.445 align:middle line:0
用Developer ID
证书签名

00:31:18.679 --> 00:31:20.480 align:middle line:0
并执行最后的测试

00:31:21.415 --> 00:31:22.349 align:middle line:0
之后…

00:31:22.416 --> 00:31:24.685 align:middle line:0
内容能直接发布给

00:31:24.751 --> 00:31:25.586 align:middle line:0
运行它的用户

00:31:25.652 --> 00:31:28.021 align:middle line:0
或者门禁能验证它没有篡改过

00:31:28.388 --> 00:31:30.057 align:middle line:0
然后用户能运行你的app

00:31:30.724 --> 00:31:34.328 align:middle line:-1
要公证该app只需额外的一步

00:31:35.529 --> 00:31:38.365 align:middle line:-1
你继续本地开发 和以前一样

00:31:39.066 --> 00:31:41.568 align:middle line:-2
一旦用Developer ID
证书签名过

00:31:42.069 --> 00:31:44.605 align:middle line:-1
拷贝能上传到Apple公证服务

00:31:45.172 --> 00:31:48.342 align:middle line:-2
假如Developer ID
内容不含恶意成分

00:31:49.209 --> 00:31:50.711 align:middle line:-1
将返回一个公证号

00:31:50.878 --> 00:31:54.515 align:middle line:-2
能通过所谓的装订过程
附加到内容上

00:31:55.816 --> 00:31:57.384 align:middle line:-1
然后装订过的内容

00:31:58.585 --> 00:32:00.420 align:middle line:-1
能像以前一样发布

00:31:58.585 --> 00:32:00.420 align:middle line:-1
能像以前一样发布

00:32:01.021 --> 00:32:02.823 align:middle line:-1
当到达用户系统上时

00:32:03.056 --> 00:32:05.058 align:middle line:-1
门禁将验证该公证

00:32:05.225 --> 00:32:07.094 align:middle line:-1
并提供新的首次启动体验

00:32:08.562 --> 00:32:09.396 align:middle line:-1
现在…

00:32:10.664 --> 00:32:12.833 align:middle line:-1
因为这是高度自动化的过程

00:32:13.100 --> 00:32:16.170 align:middle line:-1
我们致力于在一小时内返回公证号

00:32:16.770 --> 00:32:20.073 align:middle line:-1
但当我们发布时我们将进一步改进

00:32:20.140 --> 00:32:21.241 align:middle line:-1
服务速度和质量

00:32:22.309 --> 00:32:24.344 align:middle line:-1
我们再讲讲这些安全要求

00:32:24.411 --> 00:32:25.479 align:middle line:-1
我之前提过

00:32:26.146 --> 00:32:27.014 align:middle line:-1
呃…

00:32:27.181 --> 00:32:30.083 align:middle line:-1
首先是没有恶意软件

00:32:31.218 --> 00:32:33.620 align:middle line:-2
安全审查
在Developer ID签名过

00:32:33.687 --> 00:32:35.522 align:middle line:-1
的内容中找到恶意成分

00:32:35.689 --> 00:32:37.558 align:middle line:-1
它会立即创建叫做撤销的

00:32:37.624 --> 00:32:38.959 align:middle line:-1
特殊公证号

00:32:39.393 --> 00:32:41.061 align:middle line:-1
并立即通知开发者

00:32:42.429 --> 00:32:43.263 align:middle line:-1
其次…

00:32:43.497 --> 00:32:46.066 align:middle line:-1
所有可执行程序都要恰当的签名

00:32:46.834 --> 00:32:48.101 align:middle line:-1
确保app到达用户系统时

00:32:48.168 --> 00:32:51.538 align:middle line:-1
门禁能验证其没被篡改过

00:32:51.972 --> 00:32:54.274 align:middle line:-1
是非常重要的

00:32:55.943 --> 00:32:56.777 align:middle line:-1
最后…

00:32:57.411 --> 00:32:59.646 align:middle line:-2
所有二进制代码必须进入
之前Pierre介绍的

00:32:59.713 --> 00:33:01.048 align:middle line:-1
强化的运行时

00:32:59.713 --> 00:33:01.048 align:middle line:-1
强化的运行时

00:33:01.381 --> 00:33:03.150 align:middle line:-1
这样它们能在不削减功能的情况下

00:33:03.217 --> 00:33:06.186 align:middle line:-1
受益于操作系统提供的额外防护

00:33:07.487 --> 00:33:10.090 align:middle line:-1
假设有准备好公证的app

00:33:10.457 --> 00:33:12.326 align:middle line:-1
该如何上传它

00:33:12.726 --> 00:33:16.530 align:middle line:-2
其内置于Xcode的存档
和发布流程

00:33:16.663 --> 00:33:18.699 align:middle line:-1
如果已经使用它 你基本就搞定了

00:33:19.733 --> 00:33:21.969 align:middle line:-1
这里能看到组织者的存档面板

00:33:22.169 --> 00:33:24.571 align:middle line:-2
我已经存档了
Watch Grass Grow app

00:33:25.239 --> 00:33:27.341 align:middle line:-1
如果点击右边的发布app按钮

00:33:29.409 --> 00:33:31.111 align:middle line:-1
将带我到发布选项

00:33:31.845 --> 00:33:33.881 align:middle line:-1
我将继续和以前一样通过

00:33:33.947 --> 00:33:35.315 align:middle line:-2
Developer ID
发布app

00:33:35.916 --> 00:33:37.751 align:middle line:-1
当选择那个时 将有新的选项

00:33:37.818 --> 00:33:39.453 align:middle line:-1
以上传到公证服务

00:33:40.687 --> 00:33:42.823 align:middle line:-1
点击后将显示进度条

00:33:42.890 --> 00:33:45.692 align:middle line:-2
同时Developer ID
内容将上传到公证服务

00:33:46.093 --> 00:33:47.761 align:middle line:-1
上传完成后

00:33:48.562 --> 00:33:50.931 align:middle line:-1
将通知你公证开始

00:33:52.733 --> 00:33:54.434 align:middle line:-1
此时你能导出app的拷贝

00:33:54.501 --> 00:33:56.937 align:middle line:-2
以执行任何你想同时
执行的本地测试

00:33:57.671 --> 00:33:58.839 align:middle line:-1
如果点击关闭

00:33:59.106 --> 00:34:00.941 align:middle line:-1
将带你回到存档面板

00:33:59.106 --> 00:34:00.941 align:middle line:-1
将带你回到存档面板

00:34:01.375 --> 00:34:04.178 align:middle line:-1
可以看到状态切换成处理中

00:34:05.479 --> 00:34:06.980 align:middle line:-1
公证完成后

00:34:09.416 --> 00:34:12.286 align:middle line:-1
推送通知到达Xcode会通知你

00:34:12.418 --> 00:34:13.687 align:middle line:-1
公证完成

00:34:14.821 --> 00:34:17.257 align:middle line:-1
Xcode会自动下载公证号

00:34:17.591 --> 00:34:18.992 align:middle line:-1
并装订到你的内容

00:34:19.159 --> 00:34:21.094 align:middle line:-1
下次前往存档面板

00:34:21.161 --> 00:34:22.362 align:middle line:-1
点击导出

00:34:22.429 --> 00:34:26.300 align:middle line:-2
你就有一个装订了
Developer ID公证过的app

00:34:27.734 --> 00:34:29.570 align:middle line:-1
当用户首次启动app时

00:34:29.870 --> 00:34:32.039 align:middle line:-1
他们会看见包含app图标的

00:34:32.105 --> 00:34:33.940 align:middle line:-1
新版的首次启动对话框

00:34:35.742 --> 00:34:39.545 align:middle line:-2
我们了解不是每个人都用
Xcode的发布流程

00:34:39.880 --> 00:34:41.447 align:middle line:-1
尽管Xcode很有效

00:34:41.514 --> 00:34:43.650 align:middle line:-1
Xcode工作流现在预览版中提供

00:34:44.284 --> 00:34:46.353 align:middle line:-1
我们还构建了一套命令行工具

00:34:46.485 --> 00:34:47.588 align:middle line:-1
执行其中的每个步骤

00:34:47.654 --> 00:34:50.056 align:middle line:-1
可以集成到任何其他工作流

00:34:50.791 --> 00:34:53.760 align:middle line:-1
第一部是上传拷贝到公证服务

00:34:56.263 --> 00:35:01.201 align:middle line:-2
公证服务能接收压缩文件
安装包和磁盘镜像

00:34:56.263 --> 00:35:01.201 align:middle line:-2
公证服务能接收压缩文件
安装包和磁盘镜像

00:35:02.236 --> 00:35:03.770 align:middle line:-1
如果有一个原始app

00:35:03.904 --> 00:35:06.607 align:middle line:-1
得在上传公证服务前压缩它

00:35:07.341 --> 00:35:09.977 align:middle line:-2
公证服务要用到的工具
是altool

00:35:10.878 --> 00:35:12.880 align:middle line:-1
这里能看见命令行提示

00:35:13.013 --> 00:35:16.049 align:middle line:-2
发送Watch Grass Grow
软件到公证服务

00:35:17.117 --> 00:35:19.353 align:middle line:-1
注意altool需要授权

00:35:19.486 --> 00:35:21.955 align:middle line:-1
但你能通过环境变量传入密码信息

00:35:22.022 --> 00:35:22.956 align:middle line:-1
或钥匙串

00:35:24.024 --> 00:35:25.325 align:middle line:-1
一旦上传完成

00:35:25.759 --> 00:35:28.962 align:middle line:-2
你将收到一个UUID
能用于监控处理状态

00:35:30.230 --> 00:35:32.633 align:middle line:-1
也能传回altool

00:35:32.699 --> 00:35:34.535 align:middle line:-1
以检查公证的状态

00:35:35.869 --> 00:35:38.605 align:middle line:-2
这里我们能看见另一个
altool的命令行提示

00:35:38.839 --> 00:35:40.641 align:middle line:-1
以检查公证状态

00:35:41.875 --> 00:35:44.144 align:middle line:-1
这里能看到公证过程

00:35:44.344 --> 00:35:45.312 align:middle line:-1
已成功完成

00:35:45.646 --> 00:35:47.814 align:middle line:-1
重要的是还有一份

00:35:47.881 --> 00:35:49.816 align:middle line:-1
来自公证服务的日志文件

00:35:50.150 --> 00:35:52.719 align:middle line:-1
这是检查告警

00:35:53.086 --> 00:35:56.757 align:middle line:-2
并发现公证号里究竟
包含了什么的好地方

00:35:57.024 --> 00:36:00.394 align:middle line:-2
如此能确保软件包里的
所有东西都恰当公证过

00:35:57.024 --> 00:36:00.394 align:middle line:-2
如此能确保软件包里的
所有东西都恰当公证过

00:36:03.030 --> 00:36:05.299 align:middle line:-1
发布前的最后一步

00:36:05.365 --> 00:36:07.201 align:middle line:-1
是装订公证号

00:36:07.267 --> 00:36:09.036 align:middle line:-1
到要发布的内容上

00:36:09.803 --> 00:36:11.805 align:middle line:-1
有一个叫做装订机的特殊工具

00:36:12.339 --> 00:36:15.642 align:middle line:-1
能直接装订公证号到app

00:36:15.976 --> 00:36:18.412 align:middle line:-1
磁盘镜像和安装包

00:36:18.979 --> 00:36:21.281 align:middle line:-1
装订机只需一步就能

00:36:21.782 --> 00:36:24.151 align:middle line:-1
获取公证号并附加到发布内容

00:36:24.718 --> 00:36:27.621 align:middle line:-2
这里能看到我正把公证号
直接装订到磁盘镜像

00:36:28.288 --> 00:36:31.058 align:middle line:-1
完成后我能发布该磁盘镜像

00:36:31.625 --> 00:36:32.559 align:middle line:-1
用户

00:36:32.693 --> 00:36:34.528 align:middle line:-1
将收到公证过的app

00:36:37.631 --> 00:36:39.032 align:middle line:-1
提醒一下

00:36:39.800 --> 00:36:42.603 align:middle line:-2
macOS Mojave里
将继续为

00:36:42.836 --> 00:36:45.239 align:middle line:-2
未公证的app保留
门禁一直为Developer ID

00:36:45.305 --> 00:36:48.041 align:middle line:-1
app显示的首次启动对话框

00:36:48.775 --> 00:36:50.410 align:middle line:-1
并为公证过的app

00:36:51.278 --> 00:36:54.915 align:middle line:-1
显示新版的带有app图标的对话框

00:36:56.583 --> 00:36:59.219 align:middle line:-1
如果用户确实下载了带有

00:36:59.520 --> 00:37:00.988 align:middle line:-1
恶意内容的软件

00:36:59.520 --> 00:37:00.988 align:middle line:-1
恶意内容的软件

00:37:01.822 --> 00:37:04.291 align:middle line:-1
软件不会运行 他们将收到

00:37:05.692 --> 00:37:06.560 align:middle line:-1
这个告警

00:37:07.361 --> 00:37:08.996 align:middle line:-1
这不是新的功能

00:37:09.263 --> 00:37:10.964 align:middle line:-1
macOS一直有

00:37:11.698 --> 00:37:14.268 align:middle line:-1
阻断这类软件的功能

00:37:14.501 --> 00:37:15.335 align:middle line:-1
但是…

00:37:16.336 --> 00:37:18.138 align:middle line:-1
公证服务让我们能更早识别

00:37:18.205 --> 00:37:22.576 align:middle line:-1
特定的恶意内容并提供更好体验

00:37:22.843 --> 00:37:25.913 align:middle line:-2
而非开发者撤销
全部Developer ID证书

00:37:27.281 --> 00:37:29.583 align:middle line:-1
这就是如何构建公证过的app

00:37:29.950 --> 00:37:31.985 align:middle line:-1
以及如何保证Mac用户更安全

00:37:33.053 --> 00:37:33.987 align:middle line:-1
你能做什么？

00:37:34.621 --> 00:37:37.124 align:middle line:-1
公证服务现在已经可用

00:37:37.758 --> 00:37:40.327 align:middle line:-1
请随意上传app

00:37:41.895 --> 00:37:44.164 align:middle line:-1
没必要等到下次软件更新

00:37:44.398 --> 00:37:46.533 align:middle line:-1
服务也能检查你以往的版本

00:37:46.600 --> 00:37:48.035 align:middle line:-1
发送任何有的东西

00:37:49.136 --> 00:37:51.371 align:middle line:-1
服务发布时欢迎反馈

00:37:51.438 --> 00:37:53.440 align:middle line:-1
如果公证服务有任何问题

00:37:53.507 --> 00:37:54.341 align:middle line:-1
请到实验室

00:37:54.408 --> 00:37:55.943 align:middle line:-1
我们很乐意为你解决它

00:37:56.944 --> 00:37:59.746 align:middle line:-1
记住签名问题现在还只是告警

00:37:59.947 --> 00:38:01.782 align:middle line:-1
将来会成为错误

00:37:59.947 --> 00:38:01.782 align:middle line:-1
将来会成为错误

00:38:02.716 --> 00:38:05.252 align:middle line:-2
macOS Mojave
今年晚些时候发布时

00:38:05.619 --> 00:38:08.522 align:middle line:-1
门禁将向用户推荐公证过的app

00:38:08.989 --> 00:38:10.724 align:middle line:-1
但在以后的macOS版本中

00:38:10.991 --> 00:38:13.794 align:middle line:-1
门禁将默认要求软件公证过

00:38:15.596 --> 00:38:16.763 align:middle line:-1
门禁的内容就是这些

00:38:16.830 --> 00:38:19.166 align:middle line:-1
我要交给Pierre做结束语

00:38:28.175 --> 00:38:29.042 align:middle line:-1
谢谢Garrett

00:38:30.310 --> 00:38:32.679 align:middle line:-1
让我们回顾一下讲话的要点

00:38:33.981 --> 00:38:35.916 align:middle line:-1
首先 macOS Mojave

00:38:36.283 --> 00:38:37.985 align:middle line:-1
用户现在能控制

00:38:38.051 --> 00:38:41.288 align:middle line:-1
app访问其个人数据的方式

00:38:42.456 --> 00:38:45.959 align:middle line:-1
意味着app得准备处理他们的决定

00:38:46.293 --> 00:38:50.163 align:middle line:-1
首先用户需要一些时间才能给出答案

00:38:51.031 --> 00:38:53.534 align:middle line:-1
其次他们可能拒绝请求

00:38:54.902 --> 00:38:55.736 align:middle line:-1
此外…

00:38:56.103 --> 00:38:58.472 align:middle line:-1
确保用新的设置和目的描述

00:38:59.072 --> 00:39:02.409 align:middle line:-1
让app要访问的内容和访问的理由

00:38:59.072 --> 00:39:02.409 align:middle line:-1
让app要访问的内容和访问的理由

00:39:03.377 --> 00:39:06.813 align:middle line:-1
对用户保持透明

00:39:07.648 --> 00:39:10.984 align:middle line:-1
还有确保及时请求数据访问权限

00:39:11.051 --> 00:39:14.621 align:middle line:-1
以便用户理解访问的理由

00:39:15.455 --> 00:39:17.658 align:middle line:-1
如此用户更有可能授权访问

00:39:19.393 --> 00:39:22.362 align:middle line:-1
我们有新的app能使用的运行时

00:39:23.130 --> 00:39:26.667 align:middle line:-1
它有效提升app安全性和透明性

00:39:26.900 --> 00:39:28.769 align:middle line:-1
其不会削减

00:39:28.836 --> 00:39:29.937 align:middle line:-1
app现已有的功能

00:39:30.070 --> 00:39:32.105 align:middle line:-1
它要求主动采用它们

00:39:34.107 --> 00:39:34.975 align:middle line:-1
最后

00:39:35.042 --> 00:39:37.711 align:middle line:-1
请协助让用户感觉更安全

00:39:38.478 --> 00:39:42.416 align:middle line:-1
通过app公证尽快阻断恶意软件

00:39:43.383 --> 00:39:46.687 align:middle line:-2
Developer ID公证服务
现在已经可用

00:39:48.388 --> 00:39:50.224 align:middle line:0
如果需要讲解的更多内容

00:39:50.591 --> 00:39:52.292 align:middle line:0
请关注开发者网站

00:39:53.126 --> 00:39:54.127 align:middle line:0
我们有个实验室

00:39:54.194 --> 00:39:56.263 align:middle line:0
就在演讲后的3:00到6:00

00:39:56.864 --> 00:39:59.633 align:middle line:0
明天9:00到12:00还有一个

00:40:00.234 --> 00:40:02.202 align:middle line:0
最后周四还有一个

00:40:02.269 --> 00:40:04.671 align:middle line:0
关于签名和发布

00:40:05.939 --> 00:40:07.674 align:middle line:-1
再次感谢你们到来

00:40:07.808 --> 00:40:09.276 align:middle line:-2
希望你们在本周
其余演讲中度过美好时光
