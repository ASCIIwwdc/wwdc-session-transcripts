WEBVTT

00:00:17.985 --> 00:00:21.421 align:middle line:0
（使用Accelerate
和simd 演讲701）

00:00:22.422 --> 00:00:23.323 align:middle line:-1
早上好

00:00:23.390 --> 00:00:24.358 align:middle line:-1
大家好吗？

00:00:25.392 --> 00:00:26.360 align:middle line:-1
很好

00:00:29.263 --> 00:00:31.899 align:middle line:-2
我叫Matthew Badin
是Apple的工程师

00:00:32.399 --> 00:00:34.501 align:middle line:-2
欢迎来到“使用Accelerate
和simd”演讲

00:00:36.870 --> 00:00:39.239 align:middle line:-2
我和同事Luke Chang
今天很兴奋

00:00:39.873 --> 00:00:41.441 align:middle line:-2
我们将与你讨论
Accelerate

00:00:41.508 --> 00:00:44.578 align:middle line:-1
及其关联框架中提供的优秀API

00:00:45.345 --> 00:00:48.248 align:middle line:-1
我们先对Accelerate

00:00:48.315 --> 00:00:50.551 align:middle line:-1
及其中包含的一些高性能库进行概述

00:00:51.552 --> 00:00:54.421 align:middle line:-1
然后我们将深入讨论一些库

00:00:55.355 --> 00:00:57.591 align:middle line:-1
我们首先从vDSP开始

00:00:58.625 --> 00:01:00.060 align:middle line:-1
我们有两个例子

00:00:58.625 --> 00:01:00.060 align:middle line:-1
我们有两个例子

00:01:00.928 --> 00:01:01.995 align:middle line:-1
首先 我们会告诉你

00:01:02.062 --> 00:01:03.697 align:middle line:-1
如何从噪音中提取信号

00:01:04.164 --> 00:01:05.331 align:middle line:-1
然后我们会向你展示

00:01:05.399 --> 00:01:08.168 align:middle line:-1
如何从图像中移除某些类型的痕迹

00:01:09.903 --> 00:01:11.371 align:middle line:-1
接着我们将看看simd

00:01:11.972 --> 00:01:13.574 align:middle line:-1
我们将向你展示如何使用四元数

00:01:13.640 --> 00:01:15.642 align:middle line:-1
来表示三维旋转

00:01:18.612 --> 00:01:20.581 align:middle line:-2
之后我将把话筒
交给同事Luke Chang

00:01:20.647 --> 00:01:22.916 align:middle line:-2
他将向你展示
你可以使用vImage做的

00:01:22.983 --> 00:01:24.318 align:middle line:-1
一些有趣的事情

00:01:24.952 --> 00:01:27.254 align:middle line:-1
所以 让我们开始吧

00:01:29.356 --> 00:01:31.491 align:middle line:-1
你可能会问自己

00:01:31.625 --> 00:01:33.227 align:middle line:-1
Accelerate到底是什么

00:01:35.829 --> 00:01:37.831 align:middle line:-1
Accelerate的主要目的

00:01:37.898 --> 00:01:40.834 align:middle line:-1
是提供数以千计的低级数学原语

00:01:41.368 --> 00:01:44.171 align:middle line:-2
我们在所有Apple平台上
提供这些原语

00:01:44.771 --> 00:01:47.107 align:middle line:-1
所以这不仅包括iOS和MacOS

00:01:47.174 --> 00:01:49.042 align:middle line:-1
同时包括watchOS和tvOS

00:01:51.478 --> 00:01:55.482 align:middle line:-2
这些原语中的大部分都是
经过对处理器的微架构手动调优的

00:01:56.049 --> 00:01:58.452 align:middle line:-1
这意味着我们将得到出色的性能

00:01:59.853 --> 00:02:03.290 align:middle line:-1
这种性能直接转化为节省的能量

00:01:59.853 --> 00:02:03.290 align:middle line:-1
这种性能直接转化为节省的能量

00:02:04.525 --> 00:02:07.461 align:middle line:-2
因此若你是app开发者
并使用Accelerate框架

00:02:07.628 --> 00:02:11.331 align:middle line:-2
你的app将不仅运行更快
而且还会更省电

00:02:11.765 --> 00:02:12.599 align:middle line:-1
这意味着你的用户

00:02:12.666 --> 00:02:14.568 align:middle line:-1
将会在总体上有更好的体验

00:02:18.405 --> 00:02:20.974 align:middle line:-1
由于我们提供了如此多的原语

00:02:21.041 --> 00:02:23.644 align:middle line:-1
我们发现将它们分类为

00:02:23.710 --> 00:02:25.612 align:middle line:-1
领域特定库会非常有用

00:02:26.980 --> 00:02:28.282 align:middle line:-1
例如 我们将所有

00:02:28.348 --> 00:02:31.485 align:middle line:-1
信号处理原语集中到vDSP

00:02:32.052 --> 00:02:34.154 align:middle line:-1
因此这里面有你的FFT

00:02:34.221 --> 00:02:35.689 align:middle line:-1
或DFT和DCT

00:02:35.756 --> 00:02:38.692 align:middle line:-2
即你的快速傅里叶变换
以及离散余弦变换

00:02:41.128 --> 00:02:43.931 align:middle line:-1
VImage包含图像处理原语

00:02:44.631 --> 00:02:47.134 align:middle line:-2
如果你正在进行色彩空间转换
这就是为你准备的库

00:02:49.570 --> 00:02:52.306 align:middle line:-2
VForce
包含超越函数的矢量版本

00:02:52.372 --> 00:02:54.107 align:middle line:-1
例如正弦和余弦

00:02:56.543 --> 00:02:58.645 align:middle line:-1
我们也支持密集线性代数

00:02:59.813 --> 00:03:01.348 align:middle line:-1
以及稀疏线性代数

00:02:59.813 --> 00:03:01.348 align:middle line:-1
以及稀疏线性代数

00:03:02.983 --> 00:03:06.486 align:middle line:-2
我们有一个叫做BNNS的
专用神经网络库

00:03:06.553 --> 00:03:08.889 align:middle line:-1
它代表“基础神经网络子程序”

00:03:09.690 --> 00:03:11.959 align:middle line:-2
有些库不是
Accelerate框架的一部分

00:03:12.226 --> 00:03:14.962 align:middle line:-2
但与其密切相关
我们发现这些库非常有用

00:03:15.028 --> 00:03:16.864 align:middle line:-1
包括像simd这样的库

00:03:17.331 --> 00:03:19.366 align:middle line:-1
它是CPU的矢量编程辅助工具

00:03:20.300 --> 00:03:21.134 align:middle line:-1
以及Compression

00:03:21.201 --> 00:03:24.304 align:middle line:-1
它包含几种不同的无损数据压缩算法

00:03:26.340 --> 00:03:27.875 align:middle line:-1
我们来看看我们的第一个库

00:03:28.175 --> 00:03:29.510 align:middle line:-1
我们先看看vDSP

00:03:31.311 --> 00:03:34.214 align:middle line:-1
vDSP是最先进的信号处理库

00:03:34.448 --> 00:03:36.783 align:middle line:-1
它包含了种类广泛的信号处理原语

00:03:37.618 --> 00:03:40.587 align:middle line:-1
其包括数组上的基本算术运算

00:03:40.654 --> 00:03:42.189 align:middle line:-1
比如加法和减法

00:03:42.990 --> 00:03:48.262 align:middle line:-2
以及更复杂的操作
如卷积和FFT

00:03:49.363 --> 00:03:50.864 align:middle line:-1
如果你是成功的app开发者

00:03:50.931 --> 00:03:53.600 align:middle line:-1
也许你在过去避开了FFT

00:03:53.867 --> 00:03:55.869 align:middle line:-2
我想向你展示我们如何通过
Accelerate简化其使用

00:03:56.203 --> 00:03:58.572 align:middle line:-1
只需几行代码就可以完成这项工作

00:03:59.106 --> 00:04:00.240 align:middle line:-1
我这有一个例子

00:03:59.106 --> 00:04:00.240 align:middle line:-1
我这有一个例子

00:04:00.707 --> 00:04:02.743 align:middle line:-1
我将向你展示如何从噪声中提取信号

00:04:14.821 --> 00:04:16.589 align:middle line:-1
我们这里有一个音频信号

00:04:16.990 --> 00:04:18.058 align:middle line:-1
这是基带信号

00:04:18.125 --> 00:04:19.892 align:middle line:-1
我们还没有对其添加任何噪音

00:04:20.260 --> 00:04:22.095 align:middle line:-1
你会注意到底部有两个滑块

00:04:22.930 --> 00:04:25.098 align:middle line:-2
在左下角有一个滑块
可以让我添加噪音

00:04:27.868 --> 00:04:28.735 align:middle line:-1
你可以看到它的效果

00:04:30.237 --> 00:04:31.939 align:middle line:-1
这是第二个滑块

00:04:32.005 --> 00:04:33.440 align:middle line:-1
它可以让我消除这种噪音

00:04:34.575 --> 00:04:35.709 align:middle line:-1
它被称为阈值

00:04:37.244 --> 00:04:39.580 align:middle line:-1
你还会注意到右下角有一个切换开关

00:04:40.881 --> 00:04:43.283 align:middle line:-1
这让我可以在不同的域下观察它

00:04:43.350 --> 00:04:46.987 align:middle line:-1
目前我们在时域下看这个信号

00:04:47.054 --> 00:04:48.455 align:middle line:-1
我们要做一些分析

00:04:49.156 --> 00:04:51.225 align:middle line:-1
现在在频域下看这个信号

00:04:53.026 --> 00:04:54.962 align:middle line:-1
你可以看到左侧的所有尖峰

00:04:55.362 --> 00:04:57.397 align:middle line:-1
这些是信号的频率分量

00:04:59.933 --> 00:05:01.802 align:middle line:-1
你还会注意到蓝色条

00:04:59.933 --> 00:05:01.802 align:middle line:-1
你还会注意到蓝色条

00:05:02.503 --> 00:05:05.839 align:middle line:-2
蓝色条是阈值滑块
你可以看到我能够移动它

00:05:08.542 --> 00:05:11.912 align:middle line:-1
我现在要给信号增加一些噪音

00:05:13.046 --> 00:05:14.748 align:middle line:-1
我们多添加一些噪音

00:05:18.385 --> 00:05:20.854 align:middle line:-1
你可以看到我感兴趣的信号

00:05:20.921 --> 00:05:25.125 align:middle line:-2
由左边的峰值表示
或者以另一种方式来看待它

00:05:25.192 --> 00:05:26.927 align:middle line:-1
是那些高度最高的尖峰

00:05:27.528 --> 00:05:28.595 align:middle line:-1
我们添加的噪音

00:05:28.662 --> 00:05:30.864 align:middle line:-1
其类型为背景噪音

00:05:31.298 --> 00:05:34.001 align:middle line:-1
所以它是均匀分布到各处的尖峰

00:05:34.067 --> 00:05:35.369 align:middle line:-1
但它们是低级尖峰

00:05:37.037 --> 00:05:39.506 align:middle line:-1
现在我要消除这些噪音

00:05:39.773 --> 00:05:40.607 align:middle line:-1
我的方法是

00:05:40.674 --> 00:05:42.543 align:middle line:-1
将此阈值略微调高一点

00:05:44.077 --> 00:05:47.181 align:middle line:-2
当我这样做时
幕后发生的情况是

00:05:47.447 --> 00:05:50.551 align:middle line:-2
我们正在识别任何
低于此阈值的频率分量

00:05:50.617 --> 00:05:52.553 align:middle line:-1
并将其删除

00:05:52.619 --> 00:05:53.854 align:middle line:-1
或者说

00:05:53.921 --> 00:05:57.024 align:middle line:-1
任何高度低于这个蓝色条的尖峰

00:05:57.457 --> 00:05:59.259 align:middle line:-1
我们将视其为噪音并将其删除

00:06:01.228 --> 00:06:02.663 align:middle line:-1
所以如果我继续调高它

00:06:06.200 --> 00:06:08.135 align:middle line:-1
最终我会消除所有的噪音

00:06:10.003 --> 00:06:11.104 align:middle line:-1
如果我回到时域视图

00:06:11.839 --> 00:06:13.907 align:middle line:-1
你可以看到我已经删除了噪音

00:06:14.074 --> 00:06:17.277 align:middle line:-1
如果你不信我 我们可以删除阈值

00:06:17.911 --> 00:06:21.114 align:middle line:-1
这就是所有噪声仍然存在的情况

00:06:22.749 --> 00:06:23.784 align:middle line:-1
告诉你我们如何做到

00:06:29.690 --> 00:06:33.527 align:middle line:-2
从高层角度来说
我们要做的是先对信号进行分析

00:06:33.794 --> 00:06:35.095 align:middle line:-1
这就是开关的作用

00:06:36.163 --> 00:06:38.765 align:middle line:-1
然后我们将识别代表噪音的频率分量

00:06:38.832 --> 00:06:40.834 align:middle line:-1
并将其移除

00:06:41.835 --> 00:06:42.803 align:middle line:-1
完成这步之后

00:06:42.870 --> 00:06:44.872 align:middle line:-1
我们要重建音频信号

00:06:45.372 --> 00:06:46.540 align:middle line:-1
我们来看一些代码

00:06:50.177 --> 00:06:53.981 align:middle line:-2
这里我们要用到的是
离散余弦变换或者说DCT

00:06:55.415 --> 00:06:57.618 align:middle line:-2
你可在此看到
DCT_CreateSetup

00:06:59.453 --> 00:07:02.956 align:middle line:-2
这个上下文将描述
我们要做的工作类型

00:06:59.453 --> 00:07:02.956 align:middle line:-2
这个上下文将描述
我们要做的工作类型

00:07:03.023 --> 00:07:05.125 align:middle line:-1
以及为我们分配空间来完成这项工作

00:07:06.326 --> 00:07:08.662 align:middle line:-2
在这个例子中
我们将使用一个二类DCT

00:07:10.531 --> 00:07:13.567 align:middle line:-2
然后我们将把这个上下文
传递给一个执行函数

00:07:16.937 --> 00:07:18.672 align:middle line:-1
这将实际执行此工作

00:07:21.441 --> 00:07:24.511 align:middle line:-2
当我们执行了分析后
我们现在想要消除噪音

00:07:24.778 --> 00:07:26.613 align:middle line:-1
这就是魔术发生的地方

00:07:27.748 --> 00:07:29.216 align:middle line:-1
这个例程将会识别

00:07:29.283 --> 00:07:33.353 align:middle line:-2
任何小于该阈值的频率分量
并使其变为零

00:07:33.554 --> 00:07:34.621 align:middle line:-1
这将把它清除出去

00:07:36.690 --> 00:07:39.159 align:middle line:-2
完成这步之后
我们要重建音频信号

00:07:43.330 --> 00:07:45.999 align:middle line:-2
我们同样需要使用
CreateSetup创建上下文

00:07:48.969 --> 00:07:51.238 align:middle line:-2
在这个例子中
我们将使用三类DCT

00:07:51.305 --> 00:07:53.273 align:middle line:-1
来重建信号

00:07:57.077 --> 00:08:00.247 align:middle line:-2
然后我们要将这个上下文传给
DCT_Execute

00:07:57.077 --> 00:08:00.247 align:middle line:-2
然后我们要将这个上下文传给
DCT_Execute

00:08:00.314 --> 00:08:03.383 align:middle line:-1
这实际上将执行重建音频信号的工作

00:08:05.586 --> 00:08:06.753 align:middle line:-1
我们向你展示的是

00:08:08.055 --> 00:08:10.657 align:middle line:-1
你如何使用vDSP从音频信号中

00:08:10.724 --> 00:08:12.392 align:middle line:-1
移除某些类型噪音的例子

00:08:13.193 --> 00:08:14.928 align:middle line:-1
我还想向你展示如何通过vDSP

00:08:14.995 --> 00:08:18.098 align:middle line:-1
移除图像中的某些类型的噪声的例子

00:08:20.868 --> 00:08:24.738 align:middle line:-2
在这个例子中
我们想要恢复旧报纸的照片

00:08:32.078 --> 00:08:33.647 align:middle line:-1
我们所做的是拍摄了这张图片

00:08:35.381 --> 00:08:37.951 align:middle line:-1
并对其使用双色屏处理

00:08:39.785 --> 00:08:41.688 align:middle line:-1
这可以代表一张旧报纸的照片

00:08:41.922 --> 00:08:45.058 align:middle line:-1
我们要做的就是移除这种效果

00:08:45.125 --> 00:08:47.494 align:middle line:-1
我们将尝试移除你看到的痕迹

00:08:48.195 --> 00:08:50.664 align:middle line:-2
目前我们处于关闭状态
所以我们没有做任何事情

00:08:51.798 --> 00:08:54.234 align:middle line:-1
我们要做的是对这个屏幕取样

00:08:54.501 --> 00:08:56.670 align:middle line:-1
然后从该样本中创建一个滤罩

00:08:56.737 --> 00:08:59.106 align:middle line:-2
然后将其应用于图像
以尝试将噪音删除

00:08:59.573 --> 00:09:01.308 align:middle line:-1
让我向你展示第一次尝试

00:08:59.573 --> 00:09:01.308 align:middle line:-1
让我向你展示第一次尝试

00:09:04.811 --> 00:09:07.314 align:middle line:-1
我们所做的是我们识别了

00:09:07.714 --> 00:09:09.883 align:middle line:-1
某个阈值的频率分量

00:09:10.384 --> 00:09:13.921 align:middle line:-1
任何高于该阈值的频率分量

00:09:15.088 --> 00:09:15.989 align:middle line:-1
我们都将会删除

00:09:17.024 --> 00:09:18.625 align:middle line:-1
你看 如果我们设置的阈值太低

00:09:19.960 --> 00:09:22.129 align:middle line:-1
我们不仅移除了痕迹

00:09:22.196 --> 00:09:23.997 align:middle line:-1
也移除了图片的一部分

00:09:27.968 --> 00:09:29.236 align:middle line:-1
如果我们设置得太高

00:09:32.239 --> 00:09:34.107 align:middle line:-1
你可以看到这没有任何效果

00:09:38.946 --> 00:09:40.113 align:middle line:-1
中等程度看起来不错

00:09:40.747 --> 00:09:45.719 align:middle line:-2
中等程度似乎能够正确识别
图像中的痕迹

00:09:45.886 --> 00:09:47.788 align:middle line:-1
且不至于损坏太多的图像

00:09:48.689 --> 00:09:49.857 align:middle line:-1
告诉你我们如何做到

00:09:55.262 --> 00:09:56.763 align:middle line:-2
从更高层面来说
我们要做的是

00:09:56.830 --> 00:10:00.100 align:middle line:-1
我们要对图像和样本执行FFT运算

00:09:56.830 --> 00:10:00.100 align:middle line:-1
我们要对图像和样本执行FFT运算

00:10:01.235 --> 00:10:03.570 align:middle line:-1
然后我们将从该样本创建一个滤罩

00:10:03.837 --> 00:10:05.506 align:middle line:-1
并将其应用于图像

00:10:07.341 --> 00:10:08.275 align:middle line:-1
一旦完成这个步骤

00:10:08.342 --> 00:10:10.377 align:middle line:-1
我们就可以重建原始图像

00:10:10.711 --> 00:10:12.279 align:middle line:-1
我们来看一些代码

00:10:14.982 --> 00:10:16.049 align:middle line:-1
我们要做一个FFT

00:10:18.452 --> 00:10:20.087 align:middle line:-1
这意味着它必须是二次幂

00:10:20.220 --> 00:10:21.755 align:middle line:-1
这就是你看到log2调用的原因

00:10:22.890 --> 00:10:25.392 align:middle line:-1
1024x1024是图片的大小

00:10:28.562 --> 00:10:31.164 align:middle line:-2
然后我们将它传递给
fft2d_zrop函数

00:10:31.231 --> 00:10:32.499 align:middle line:-1
这里的参数可不少

00:10:32.900 --> 00:10:35.702 align:middle line:-2
这里的重点是
op代表空间不足

00:10:35.769 --> 00:10:38.839 align:middle line:-2
所以我们将不得不创建
一些临时空间来存储结果

00:10:41.542 --> 00:10:43.744 align:middle line:-1
我们将把它存储在这个复数结构中

00:10:43.944 --> 00:10:45.212 align:middle line:-1
这实际上是说

00:10:45.279 --> 00:10:47.548 align:middle line:-1
我们将把复数存储在两个数组中

00:10:48.182 --> 00:10:49.716 align:middle line:-1
实数部分存储在一个数组中

00:10:49.883 --> 00:10:51.385 align:middle line:-1
虚数部分存在第二个数组

00:10:52.486 --> 00:10:54.388 align:middle line:-1
我们还需要指定一个方向

00:10:54.855 --> 00:10:56.623 align:middle line:-2
这例子中
我们要做一个正向FFT

00:10:59.960 --> 00:11:01.528 align:middle line:-1
（频率移除）

00:10:59.960 --> 00:11:01.528 align:middle line:-1
（频率移除）

00:11:01.595 --> 00:11:06.066 align:middle line:-1
现在 痕迹移除技术更先进一点了

00:11:06.133 --> 00:11:08.435 align:middle line:-1
所以我只会在较高的层面讨论它

00:11:09.069 --> 00:11:10.904 align:middle line:-1
我建议你下载示例app

00:11:10.971 --> 00:11:12.372 align:middle line:-1
它现在可以在线下载

00:11:12.773 --> 00:11:16.643 align:middle line:-2
而且其中每个例程
都被收录在vDSP文档中

00:11:16.710 --> 00:11:18.245 align:middle line:-1
我们拥有出色的在线文档

00:11:20.480 --> 00:11:21.648 align:middle line:-1
从高层角度来说

00:11:21.715 --> 00:11:24.985 align:middle line:-1
我们要做的是识别频率分量的大小

00:11:25.052 --> 00:11:26.353 align:middle line:-1
在这个例子中即样本

00:11:27.921 --> 00:11:30.224 align:middle line:-1
然后我们将确定要删除的分量

00:11:33.026 --> 00:11:35.462 align:middle line:-1
接着我们将从中创建一个滤罩

00:11:36.964 --> 00:11:38.899 align:middle line:-2
一旦完成这些步骤
我们就将这个滤罩

00:11:38.966 --> 00:11:39.833 align:middle line:-1
应用到图片上

00:11:41.068 --> 00:11:42.102 align:middle line:-1
实际上我们做的是

00:11:42.169 --> 00:11:45.205 align:middle line:-1
我们将想要删除的部分乘以0

00:11:45.272 --> 00:11:47.207 align:middle line:-1
而将想要保留的分量乘以1

00:11:52.279 --> 00:11:54.915 align:middle line:-1
我们再次使用zrop来重建图像

00:11:54.982 --> 00:11:57.518 align:middle line:-2
由于这是一个FFT
我们可以重用这个上下文

00:12:01.321 --> 00:12:03.557 align:middle line:-1
在这个例子中有一个关键细节

00:12:03.857 --> 00:12:06.226 align:middle line:-1
即我们要将图像存储在两个数组中

00:12:06.393 --> 00:12:07.728 align:middle line:-1
因为这是一个复数结构

00:12:08.061 --> 00:12:10.063 align:middle line:-1
其中偶数像素将保存在实数数组中

00:12:10.230 --> 00:12:12.232 align:middle line:-1
而奇数像素保存在虚数数组中

00:12:15.102 --> 00:12:16.603 align:middle line:-1
我们还要指定一个方向

00:12:16.670 --> 00:12:18.705 align:middle line:-1
这次我们将使用逆FFT

00:12:19.907 --> 00:12:21.875 align:middle line:-1
现在我想稍微换个挡

00:12:21.942 --> 00:12:24.411 align:middle line:-1
刚才我们向你展示了两个例子

00:12:26.046 --> 00:12:28.749 align:middle line:-1
我们有两个vDSP的工作示例

00:12:29.283 --> 00:12:30.317 align:middle line:-1
然后我们退一步

00:12:30.384 --> 00:12:34.588 align:middle line:-1
向你展示了我们如何创建这些示例

00:12:34.655 --> 00:12:36.590 align:middle line:-2
我们后退一步向你展示了
它的每个构件

00:12:37.925 --> 00:12:38.792 align:middle line:-1
对于下一个库

00:12:38.859 --> 00:12:41.128 align:middle line:-1
我想要做的是从基本组件开始

00:12:41.195 --> 00:12:42.863 align:middle line:-1
我想逐步达到我们的效果

00:12:43.163 --> 00:12:44.765 align:middle line:-1
我们来看看simd

00:12:45.332 --> 00:12:47.601 align:middle line:-1
我们将从基本的低级原语开始

00:12:47.801 --> 00:12:50.003 align:middle line:-1
我们将要逐步实现旋转效果

00:12:50.070 --> 00:12:52.005 align:middle line:-1
在这个例子中是对3D对象的旋转

00:12:54.575 --> 00:12:55.475 align:middle line:-1
从高层角度来说

00:12:57.144 --> 00:12:59.580 align:middle line:-1
simd是矢量处理单元的抽象

00:13:00.447 --> 00:13:04.885 align:middle line:-1
它可以让你声明向量和矩阵对象

00:13:05.352 --> 00:13:07.754 align:middle line:-1
然后你可以对这些对象执行操作

00:13:07.821 --> 00:13:10.691 align:middle line:-1
这将直接映射到处理器的矢量硬件

00:13:11.992 --> 00:13:13.427 align:middle line:-1
我们来看一个代码例子

00:13:16.096 --> 00:13:18.165 align:middle line:-1
我们这里要做的是取两个数组

00:13:18.232 --> 00:13:20.167 align:middle line:-1
计算其元素的平均值

00:13:20.534 --> 00:13:23.670 align:middle line:-1
所以我们将遍历其中每个标量

00:13:23.737 --> 00:13:25.439 align:middle line:-1
将它们加在一起再除以二

00:13:27.574 --> 00:13:28.842 align:middle line:-1
这将会非常缓慢

00:13:31.044 --> 00:13:35.048 align:middle line:-2
另一种方法 你可将这些数组声明为
simd_float4矢量类型

00:13:36.550 --> 00:13:38.185 align:middle line:-1
然后我们可以

00:13:38.252 --> 00:13:41.622 align:middle line:-1
对这些对象进行基本的算术运算

00:13:43.423 --> 00:13:45.726 align:middle line:-1
因此你不仅可以更自然地表达计算

00:13:45.792 --> 00:13:48.462 align:middle line:-1
而且它也会尽可能快地运行

00:13:49.763 --> 00:13:51.698 align:middle line:-1
这将适用于所有Apple平台

00:13:55.969 --> 00:13:58.005 align:middle line:-1
simd具有大量的功能

00:13:58.705 --> 00:14:01.308 align:middle line:-1
除了矢量和矩阵对象之外

00:13:58.705 --> 00:14:01.308 align:middle line:-1
除了矢量和矩阵对象之外

00:14:02.709 --> 00:14:06.713 align:middle line:-1
它还允许你对这些对象执行算术运算

00:14:08.749 --> 00:14:09.750 align:middle line:-1
它还具有扩展功能

00:14:09.816 --> 00:14:12.286 align:middle line:-1
例如 点积和clamp函数

00:14:14.188 --> 00:14:15.956 align:middle line:-1
它也支持超越函数

00:14:16.023 --> 00:14:17.591 align:middle line:-1
例如正弦和余弦

00:14:19.726 --> 00:14:21.128 align:middle line:-1
以及四元数

00:14:21.595 --> 00:14:22.829 align:middle line:-1
四元数在表示三维旋转时

00:14:22.896 --> 00:14:25.065 align:middle line:-1
是非常有用的

00:14:25.365 --> 00:14:27.668 align:middle line:-1
我想多谈一点这个话题

00:14:29.903 --> 00:14:32.105 align:middle line:-1
我们来看一段代码示例

00:14:33.674 --> 00:14:35.108 align:middle line:-1
这里有很多东西要展开讨论

00:14:35.876 --> 00:14:36.810 align:middle line:-1
所以我们从右边开始

00:14:37.544 --> 00:14:39.813 align:middle line:-2
这里有一个单位球体
就是这个灰色的球体

00:14:40.280 --> 00:14:41.748 align:middle line:-1
你会注意到这个红点

00:14:43.150 --> 00:14:44.852 align:middle line:-1
这实际上是这个向量的尖端

00:14:45.953 --> 00:14:48.121 align:middle line:-2
我们声明了
simd_float3向量

00:14:48.188 --> 00:14:50.190 align:middle line:-1
我们将x和y分量设置为零

00:14:50.390 --> 00:14:51.792 align:middle line:-1
并将z分量设置为1

00:14:52.092 --> 00:14:53.393 align:middle line:-1
所以它指向我们

00:14:54.461 --> 00:14:57.064 align:middle line:-1
那个红色点代表该向量的尖端

00:14:58.932 --> 00:15:02.135 align:middle line:-2
我们现在要使用四元数
对这个向量进行旋转

00:14:58.932 --> 00:15:02.135 align:middle line:-2
我们现在要使用四元数
对这个向量进行旋转

00:15:03.670 --> 00:15:05.472 align:middle line:-2
从技术上来说
我们正在旋转整个场景

00:15:05.539 --> 00:15:06.773 align:middle line:-1
但出于说明的目的

00:15:06.840 --> 00:15:08.509 align:middle line:-1
我们说我们正在旋转这个向量

00:15:10.010 --> 00:15:11.879 align:middle line:-1
当使用四元数进行旋转时

00:15:12.112 --> 00:15:14.515 align:middle line:-1
你需要指定一个轴和旋转角度

00:15:15.649 --> 00:15:16.683 align:middle line:-1
或者换一种说法

00:15:16.984 --> 00:15:19.152 align:middle line:-1
你在旋转什么以及旋转了多少

00:15:20.120 --> 00:15:21.922 align:middle line:-1
我们要围绕X轴旋转

00:15:21.989 --> 00:15:24.791 align:middle line:-1
我们将向上旋转三个pi的弧度

00:15:27.628 --> 00:15:30.130 align:middle line:-2
你可通过调用simd_act
函数来应用此旋转

00:15:31.899 --> 00:15:34.168 align:middle line:-1
这将在该向量上执行四元数的动作

00:15:34.234 --> 00:15:35.802 align:middle line:-2
并返回一个
rotatedVector

00:15:37.137 --> 00:15:38.272 align:middle line:-1
现在我们来看看

00:15:47.214 --> 00:15:50.551 align:middle line:-2
通常情况下
你不会对沿单轴旋转感兴趣

00:15:50.617 --> 00:15:52.786 align:middle line:-1
你通常要沿多个轴旋转

00:15:54.521 --> 00:15:56.290 align:middle line:-1
如果你已经熟悉旋转矩阵

00:15:56.356 --> 00:15:57.791 align:middle line:-1
这将看起来很自然

00:16:00.127 --> 00:16:01.061 align:middle line:-1
就像旋转矩阵一样

00:16:01.128 --> 00:16:03.096 align:middle line:-1
你可以使用乘法来结合旋转

00:16:03.163 --> 00:16:06.433 align:middle line:-2
并且也像旋转矩阵一样
乘法是非可交换的

00:16:06.867 --> 00:16:08.936 align:middle line:-2
所以这意味着
如果你改变操作数的顺序

00:16:09.002 --> 00:16:10.871 align:middle line:-1
你将改变旋转的顺序

00:16:13.440 --> 00:16:16.577 align:middle line:-2
这里我们要做的事情是
向上旋转三个pi的弧度

00:16:17.110 --> 00:16:18.979 align:middle line:-1
然后向右旋转三个pi的弧度

00:16:19.046 --> 00:16:21.048 align:middle line:-1
我们将它们组合成一个单一的旋转

00:16:26.854 --> 00:16:27.955 align:middle line:-1
你可用四元数和simd

00:16:28.021 --> 00:16:30.891 align:middle line:-1
来做的一些更有趣的事情是插值

00:16:30.958 --> 00:16:33.260 align:middle line:-1
我们支持两种类型的插值

00:16:34.862 --> 00:16:36.063 align:middle line:-1
第一种是Slerp

00:16:37.865 --> 00:16:39.833 align:middle line:-1
它代表球面线性插值

00:16:42.035 --> 00:16:43.670 align:middle line:-1
它实际上有两种变体

00:16:47.207 --> 00:16:48.475 align:middle line:-2
我们有一个
simd_slerp函数

00:16:48.542 --> 00:16:50.644 align:middle line:-1
它能找到这两个点之间的最短弧

00:16:50.711 --> 00:16:52.379 align:middle line:-2
这个例子中
是蓝色和绿色之间的弧

00:16:53.747 --> 00:16:56.216 align:middle line:-2
我们还有simd_slerp_longest函数
它会找到最长的圆弧

00:16:56.283 --> 00:16:58.218 align:middle line:-1
所以你会发现它位于单位球体后面

00:17:07.127 --> 00:17:08.694 align:middle line:-1
第二种变体是Spline

00:17:09.730 --> 00:17:13.000 align:middle line:-2
当你有两个以上的旋转时
Spline更有用

00:17:13.066 --> 00:17:14.667 align:middle line:-1
例如 在这里我们要

00:17:14.734 --> 00:17:17.171 align:middle line:-1
在一个旋转数组中进行插值

00:17:17.971 --> 00:17:19.506 align:middle line:-1
这里有很多样板代码

00:17:19.573 --> 00:17:21.608 align:middle line:-2
我希望你只关注
Spline函数的调用

00:17:24.645 --> 00:17:26.346 align:middle line:-1
我们实际上正在做的只是

00:17:26.413 --> 00:17:29.583 align:middle line:-2
遍历每个旋转
并对其调用Spline

00:17:34.454 --> 00:17:35.956 align:middle line:-1
你不仅要用Spline指定

00:17:36.023 --> 00:17:40.127 align:middle line:-1
你希望插入的两个旋转

00:17:40.194 --> 00:17:42.396 align:middle line:-1
也应该指定上一个和下一个旋转

00:17:44.531 --> 00:17:45.766 align:middle line:-1
像这个样子

00:17:51.972 --> 00:17:52.840 align:middle line:-1
如果你是一个游戏开发者

00:17:52.906 --> 00:17:55.576 align:middle line:-1
你可能对旋转单独的矢量不感兴趣

00:17:55.642 --> 00:17:57.578 align:middle line:-1
你可能对旋转物体感兴趣

00:17:57.845 --> 00:17:58.912 align:middle line:-1
我们为你准备了这个

00:17:59.313 --> 00:18:00.280 align:middle line:-1
这是一个立方体

00:17:59.313 --> 00:18:00.280 align:middle line:-1
这是一个立方体

00:18:00.347 --> 00:18:03.016 align:middle line:-1
它由多个向量表示

00:18:03.083 --> 00:18:04.952 align:middle line:-1
它将经历一连串的八次旋转

00:18:05.452 --> 00:18:07.221 align:middle line:-1
在左边 我们将使用Slerp来

00:18:07.287 --> 00:18:08.422 align:middle line:-1
跟踪这些旋转

00:18:08.689 --> 00:18:10.090 align:middle line:-2
右边
我们将用Spline

00:18:10.390 --> 00:18:11.959 align:middle line:-1
我们来看看Slerp的效果

00:18:19.766 --> 00:18:21.502 align:middle line:-2
你可以看到
由于这是一个线性插值

00:18:21.568 --> 00:18:24.705 align:middle line:-2
它每改变一次方向
你都会得到这些尖角

00:18:25.305 --> 00:18:26.640 align:middle line:-1
而如果我们看Spline

00:18:35.082 --> 00:18:37.784 align:middle line:0
由于它还知道前一轮和下一轮旋转

00:18:37.851 --> 00:18:39.520 align:middle line:0
你最终会得到这些圆角

00:18:39.586 --> 00:18:40.654 align:middle line:-1
所以让我们再看一遍

00:18:52.599 --> 00:18:54.401 align:middle line:-1
我非常快速地讨论了所有这些话题

00:18:55.469 --> 00:18:56.570 align:middle line:-1
我们来回顾一下

00:18:58.272 --> 00:19:00.073 align:middle line:-1
我们首先看了下vDSP

00:18:58.272 --> 00:19:00.073 align:middle line:-1
我们首先看了下vDSP

00:19:00.340 --> 00:19:01.642 align:middle line:-1
并向你展示了两个例子

00:19:01.708 --> 00:19:04.077 align:middle line:-1
第一个是如何从噪声中提取信号

00:19:04.511 --> 00:19:07.714 align:middle line:-2
第二个是如何从图像中
移除某些类型的痕迹

00:19:08.949 --> 00:19:10.417 align:middle line:-1
然后我们讨论了simd

00:19:10.484 --> 00:19:12.519 align:middle line:-1
我向你展示了如何使用四元数

00:19:12.586 --> 00:19:14.154 align:middle line:-1
来表示三维旋转

00:19:15.255 --> 00:19:17.891 align:middle line:-2
我现在要将话筒交给
我的同事Luke Chang

00:19:18.192 --> 00:19:19.526 align:middle line:-2
他将向你展示一些
你可以用vImage做的

00:19:19.593 --> 00:19:20.527 align:middle line:-1
有趣的事情

00:19:26.667 --> 00:19:27.568 align:middle line:-1
谢谢你 Matthew

00:19:30.137 --> 00:19:32.472 align:middle line:-1
大家好 我叫Luke Chang

00:19:32.539 --> 00:19:34.508 align:middle line:-1
我是矢量和数值团队的工程师

00:19:35.142 --> 00:19:38.745 align:middle line:0
今天我要谈论vImage
vImage提供了什么

00:19:39.046 --> 00:19:41.882 align:middle line:0
以及在你的app
使用vImage是多么容易

00:19:42.249 --> 00:19:43.717 align:middle line:-1
只需几行代码

00:19:43.784 --> 00:19:46.954 align:middle line:-2
你就可以在你的app中
创建引人入胜的视频效果

00:19:47.354 --> 00:19:48.388 align:middle line:-1
让我们开始吧

00:19:50.824 --> 00:19:53.527 align:middle line:-1
VImage是我们的图像处理库

00:19:54.561 --> 00:19:55.996 align:middle line:-1
它有几个组件

00:19:56.063 --> 00:19:57.397 align:middle line:-1
第一个组件

00:19:57.931 --> 00:19:59.299 align:middle line:-1
是转换函数

00:20:00.100 --> 00:20:05.506 align:middle line:-2
转换函数可帮助你
在不同的图像格式之间转换图像

00:20:06.406 --> 00:20:09.943 align:middle line:-1
不同的图像格式有不同的优势

00:20:10.110 --> 00:20:10.944 align:middle line:-1
例如

00:20:11.578 --> 00:20:14.648 align:middle line:-1
RGB格式与显示器上的像素相匹配

00:20:14.948 --> 00:20:16.450 align:middle line:-1
所以它最适合显示

00:20:17.084 --> 00:20:19.887 align:middle line:-1
另一方面 我们有YCbCr图像

00:20:20.654 --> 00:20:23.490 align:middle line:-1
这与人类如何感知图像相似

00:20:23.957 --> 00:20:27.794 align:middle line:-1
人眼识别亮度 这就是亮度信道

00:20:28.495 --> 00:20:30.964 align:middle line:-1
还有颜色 即色度信道

00:20:32.065 --> 00:20:36.370 align:middle line:-2
而且相机使用
YCbCr格式来捕捉图像

00:20:37.371 --> 00:20:38.672 align:middle line:-1
因此转换函数

00:20:38.739 --> 00:20:41.708 align:middle line:-2
可帮助你轻松地在这些格式之间
转换图像

00:20:43.644 --> 00:20:45.779 align:middle line:-1
我们还有几何函数

00:20:46.880 --> 00:20:51.685 align:middle line:-1
几何函数能改变图像的大小或方向

00:20:52.085 --> 00:20:53.453 align:middle line:-1
我们有vImageScale

00:20:54.021 --> 00:20:56.823 align:middle line:-1
它可以放大或缩小图像

00:20:57.391 --> 00:20:59.026 align:middle line:-1
我们使用Lanczos算法

00:20:59.092 --> 00:21:02.663 align:middle line:-1
因此在操作之后会有高质量的输出

00:20:59.092 --> 00:21:02.663 align:middle line:-1
因此在操作之后会有高质量的输出

00:21:03.797 --> 00:21:05.832 align:middle line:-1
我们也有vImageRotate

00:21:05.966 --> 00:21:09.002 align:middle line:-1
可以顺时针或逆时针旋转图像

00:21:11.171 --> 00:21:13.173 align:middle line:-1
接下来我们还有卷积函数

00:21:14.007 --> 00:21:16.710 align:middle line:-1
卷积函数最显着的效果

00:21:16.777 --> 00:21:18.145 align:middle line:-1
是模糊效果

00:21:18.745 --> 00:21:23.116 align:middle line:-2
你到处都能见到模糊效果
在用户界面中或者摄影中

00:21:23.650 --> 00:21:26.119 align:middle line:-1
如果你想将某些东西渐淡到背景中

00:21:26.253 --> 00:21:29.022 align:middle line:-2
你就可以使用模糊函数
模糊效果

00:21:31.024 --> 00:21:32.826 align:middle line:-1
接下来是变换函数

00:21:33.727 --> 00:21:36.897 align:middle line:-1
变换函数基本上是一个矩阵乘法

00:21:37.397 --> 00:21:40.601 align:middle line:-2
它可以让你在每个像素的
数据通道上进行操作

00:21:41.168 --> 00:21:44.104 align:middle line:-1
假设你想增强红色或增强绿色

00:21:44.371 --> 00:21:46.707 align:middle line:-1
你可以用变换函数来做到这一点

00:21:48.709 --> 00:21:49.710 align:middle line:-1
形态函数

00:21:50.377 --> 00:21:55.682 align:middle line:-2
形态函数改变图像中
物体的大小或形状

00:21:55.749 --> 00:21:56.917 align:middle line:-1
而不改变图片本身

00:21:57.818 --> 00:21:59.586 align:middle line:-1
我们有vImageErode

00:22:00.153 --> 00:22:04.124 align:middle line:-2
和vImageDilate
来使对象变得更小或更大

00:22:05.425 --> 00:22:06.960 align:middle line:-1
如果你感觉这很冒险

00:22:07.027 --> 00:22:10.931 align:middle line:-2
你实际上可以为这些函数
提供一个自定义的内核形状

00:22:11.398 --> 00:22:16.503 align:middle line:-2
vImage侵蚀和扩张函数
会根据你提供的内核

00:22:16.570 --> 00:22:18.405 align:middle line:-1
来使物体变小或变大

00:22:20.340 --> 00:22:22.676 align:middle line:-1
这些是vImage中的五种工具

00:22:22.743 --> 00:22:26.947 align:middle line:-2
现在我想向你展示我们
基于vImage编写的演示app

00:22:27.147 --> 00:22:29.917 align:middle line:-2
来演示你可以使用vImage
获得什么样的效果

00:22:33.520 --> 00:22:36.557 align:middle line:-1
这里有一个使用后置摄像头

00:22:36.623 --> 00:22:37.958 align:middle line:-1
捕捉图像的实验

00:22:38.792 --> 00:22:41.461 align:middle line:-1
我们将图像投影到屏幕上

00:22:42.396 --> 00:22:44.531 align:middle line:-1
我们现在是实时操作

00:22:44.598 --> 00:22:45.666 align:middle line:-1
这是一个直播视频流

00:22:45.732 --> 00:22:49.803 align:middle line:-2
你可以看到那只喝水鸟
正在玫瑰旁边做动作

00:22:50.571 --> 00:22:51.572 align:middle line:-1
好 我想向你展示的

00:22:51.638 --> 00:22:54.441 align:middle line:-1
第一个效果是颜色饱和效果

00:22:54.775 --> 00:22:59.313 align:middle line:-2
你可以在很多照片编辑软件中
看到这种效果

00:23:00.047 --> 00:23:02.416 align:middle line:-1
现在我想突出颜色效果

00:23:02.549 --> 00:23:06.453 align:middle line:-1
我可以将此滑块移到右侧

00:23:09.122 --> 00:23:11.992 align:middle line:-1
使红色更红 绿色更绿

00:23:13.560 --> 00:23:16.730 align:middle line:-1
在另一边有一朵白玫瑰

00:23:17.264 --> 00:23:21.602 align:middle line:-2
我觉得白玫瑰的颜色
对我来说并不是那么有趣

00:23:21.668 --> 00:23:25.572 align:middle line:-1
我想引导我的观众关注其构图

00:23:25.973 --> 00:23:28.041 align:middle line:-1
以及这张图片的对比度

00:23:28.876 --> 00:23:33.881 align:middle line:-1
我可以向左滑动来使图像去饱和

00:23:36.083 --> 00:23:39.453 align:middle line:-1
直到它变成黑白图像

00:23:40.120 --> 00:23:43.056 align:middle line:-1
现在色彩在这张图片中不再让人分心

00:23:43.123 --> 00:23:46.860 align:middle line:-1
现在观众可以专注于构图和对比

00:23:48.095 --> 00:23:48.929 align:middle line:-1
好

00:23:49.162 --> 00:23:50.030 align:middle line:-1
所以…

00:23:50.230 --> 00:23:51.298 align:middle line:-1
我们如何做到这一点

00:23:55.969 --> 00:23:57.704 align:middle line:-1
我们需要采取几个步骤

00:23:57.938 --> 00:24:01.642 align:middle line:-1
首先 我们当然必须从相机获取图像

00:23:57.938 --> 00:24:01.642 align:middle line:-1
首先 我们当然必须从相机获取图像

00:24:03.710 --> 00:24:08.515 align:middle line:-2
然后我们要使用
vImage来应用效果

00:24:08.582 --> 00:24:12.252 align:middle line:-2
因此我们必须为vImage的
输入和输出准备缓冲区

00:24:13.687 --> 00:24:17.591 align:middle line:-2
然后我们实际调用vImage函数
来应用这些效果

00:24:18.859 --> 00:24:21.328 align:middle line:-1
并将输出显示在屏幕上

00:24:22.596 --> 00:24:23.697 align:middle line:-1
我们先来讨论

00:24:24.531 --> 00:24:27.968 align:middle line:-2
如何使用vImage函数
来应用效果

00:24:30.671 --> 00:24:33.140 align:middle line:-1
我向你展示的是一种色彩饱和效果

00:24:33.207 --> 00:24:36.610 align:middle line:-1
这是计算色彩饱和效果的公式

00:24:37.110 --> 00:24:40.080 align:middle line:-1
我们想要消除像素的偏差

00:24:40.781 --> 00:24:44.751 align:middle line:-1
并使用乘法来应用饱和效果

00:24:45.552 --> 00:24:48.388 align:middle line:-1
然后我们再将偏差放回像素

00:24:49.623 --> 00:24:53.126 align:middle line:-1
VImage具有完成此操作的函数

00:24:53.594 --> 00:24:56.129 align:middle line:-1
即vImageMatrixMultiply

00:24:58.265 --> 00:25:01.068 align:middle line:-2
vImageMatrixMultiply
需要一个preBias参数

00:24:58.265 --> 00:25:01.068 align:middle line:-2
vImageMatrixMultiply
需要一个preBias参数

00:25:01.301 --> 00:25:04.805 align:middle line:-2
在这个例子中为-128
以消除偏差

00:25:06.106 --> 00:25:09.243 align:middle line:-1
由于饱和度是浮点数

00:25:09.309 --> 00:25:11.111 align:middle line:-1
而图像是一个整数

00:25:11.745 --> 00:25:16.016 align:middle line:-2
我们希望先将此饱和度值
转换为定点格式

00:25:16.283 --> 00:25:21.388 align:middle line:-2
我们选择Q12作为定点格式
因此令divisor值为0x1000

00:25:22.756 --> 00:25:25.859 align:middle line:-2
再是postBias参数
其值为128乘以divisor

00:25:25.926 --> 00:25:27.995 align:middle line:-1
以此将偏差放回像素

00:25:30.430 --> 00:25:32.799 align:middle line:-1
矩阵本身非常简单

00:25:33.033 --> 00:25:37.337 align:middle line:-2
我们所要做的
只是对CbCr信道进行缩放

00:25:37.471 --> 00:25:39.606 align:middle line:-1
所以矩阵本身就是一个缩放器

00:25:39.806 --> 00:25:44.044 align:middle line:-1
将CbCr信道与该缩放器相乘

00:25:45.546 --> 00:25:49.249 align:middle line:-2
有了所需的所有信息
调用vImageMatrixMultiply

00:25:49.883 --> 00:25:52.920 align:middle line:-1
只需一行代码 一个函数调用

00:25:53.120 --> 00:25:55.522 align:middle line:-1
你就可以实现这个饱和效果

00:25:57.157 --> 00:25:59.826 align:middle line:-1
现在让我们回到需要采取的其他步骤

00:26:01.161 --> 00:26:03.830 align:middle line:-1
我们需要从相机拍摄图像

00:26:03.997 --> 00:26:04.932 align:middle line:-1
我们如何做到这一点？

00:26:06.466 --> 00:26:08.168 align:middle line:-1
我们需要写一个委托方法

00:26:08.902 --> 00:26:12.306 align:middle line:-2
相机给我们的是
一个CVImageBuffer

00:26:13.273 --> 00:26:14.875 align:middle line:-1
因此我们获取这个缓冲区

00:26:15.843 --> 00:26:19.613 align:middle line:-2
我们必须确保CPU可以访问
这个缓冲区

00:26:19.880 --> 00:26:21.315 align:middle line:-1
这即vImage所在之处

00:26:22.182 --> 00:26:26.019 align:middle line:-2
在我们应用这些效果之后
无论是哪种效果

00:26:26.353 --> 00:26:30.057 align:middle line:-2
我们必须解锁
这个像素缓冲区的基地址

00:26:30.757 --> 00:26:33.527 align:middle line:-1
以便相机可以重新使用这块内存

00:26:36.797 --> 00:26:37.764 align:middle line:-1
第二步

00:26:37.831 --> 00:26:40.868 align:middle line:-2
我们必须准备
vImage输入和输出缓冲区

00:26:43.504 --> 00:26:46.640 align:middle line:-2
我们已经在CVImageBuffer中
保存了这个图像

00:26:46.707 --> 00:26:47.641 align:middle line:-1
我们需要做的

00:26:47.708 --> 00:26:52.079 align:middle line:-1
只是获取如高度和宽度等信息

00:26:53.247 --> 00:26:56.850 align:middle line:-2
然后我们可以将它打包成
一个vImageBuffer对象

00:26:57.217 --> 00:26:59.386 align:middle line:-1
以便它可以被vImage库使用

00:26:59.786 --> 00:27:02.089 align:middle line:-1
我们为亮度和色度信道进行这项操作

00:26:59.786 --> 00:27:02.089 align:middle line:-1
我们为亮度和色度信道进行这项操作

00:27:03.524 --> 00:27:05.626 align:middle line:-1
现在我们需要准备一个输出缓冲区

00:27:06.493 --> 00:27:10.931 align:middle line:-2
请记住 我们还没有为输出图像
分配一块内存

00:27:11.164 --> 00:27:12.199 align:middle line:-1
因此我们需要这样做

00:27:12.799 --> 00:27:16.303 align:middle line:-2
vImage有一个很方便的函数
即vImageBuffer_Init

00:27:16.470 --> 00:27:17.437 align:middle line:-1
可以做到这一点

00:27:18.672 --> 00:27:23.110 align:middle line:-1
给定其高度 宽度和每像素位数

00:27:23.944 --> 00:27:27.881 align:middle line:-2
vImageBuffer_Init
将为你分配一个足够容纳此图像的内存

00:27:27.948 --> 00:27:30.584 align:middle line:-2
然后也会创建一个
vImageBuffer对象

00:27:30.651 --> 00:27:33.387 align:middle line:-1
从而可以被vImage库使用

00:27:35.722 --> 00:27:36.623 align:middle line:-1
最后一步

00:27:36.857 --> 00:27:40.060 align:middle line:-1
是将处理后的图像输出到屏幕上

00:27:43.397 --> 00:27:48.202 align:middle line:-2
正如我之前所说的
RGB是最佳显示格式

00:27:48.268 --> 00:27:54.041 align:middle line:-2
所以让我们使用转换函数
将YCbCr图像转换为RGB图像

00:27:54.308 --> 00:27:58.478 align:middle line:-2
然后 因为用户界面
期望的是CGImage对象

00:27:58.679 --> 00:27:59.880 align:middle line:-1
所以我们必须创建一个

00:28:01.481 --> 00:28:03.317 align:middle line:-1
在vImage中有一个方便的函数

00:28:03.383 --> 00:28:06.854 align:middle line:-1
vImageCreateCGImageFromBuffer

00:28:08.021 --> 00:28:10.123 align:middle line:-2
它能帮助你
基于vImage已有缓冲区

00:28:10.190 --> 00:28:12.960 align:middle line:-1
来创建CGImage

00:28:13.794 --> 00:28:15.128 align:middle line:-1
需要注意的一点是

00:28:15.362 --> 00:28:19.299 align:middle line:-2
我们实际上并没有将
图像中的大块数据缓冲区

00:28:19.366 --> 00:28:20.834 align:middle line:-1
从一个地方复制到另一个地方

00:28:21.201 --> 00:28:24.037 align:middle line:-2
我们只是简单的创建一个
CGImage对象

00:28:24.371 --> 00:28:27.474 align:middle line:-1
其向该图像缓冲区添加一个容器

00:28:28.141 --> 00:28:31.678 align:middle line:-2
因此我们只是向其中
填充CGImage需要的信息

00:28:31.745 --> 00:28:35.516 align:middle line:-2
创建一个CGImage对象
而不是到处复制数据

00:28:37.150 --> 00:28:38.118 align:middle line:-1
一旦有了该对象

00:28:38.285 --> 00:28:41.722 align:middle line:-2
我们就可以将CGImage对象
发送给imageView

00:28:42.422 --> 00:28:44.458 align:middle line:-1
它就会显示在屏幕上

00:28:44.892 --> 00:28:45.859 align:middle line:-1
就这么简单

00:28:46.293 --> 00:28:49.897 align:middle line:-2
只需四个步骤
你就可以创建自己的效果

00:28:50.163 --> 00:28:51.899 align:middle line:-1
我们向你展示了饱和效果

00:28:51.965 --> 00:28:52.799 align:middle line:-1
现在

00:28:53.767 --> 00:28:56.170 align:middle line:-2
我们还可以用
vImage做其他效果

00:28:57.538 --> 00:28:59.873 align:middle line:-2
我们可以做一个旋转
就像我之前说过的那样

00:28:59.940 --> 00:29:02.976 align:middle line:-1
顺时针或逆时针旋转图像

00:28:59.940 --> 00:29:02.976 align:middle line:-1
顺时针或逆时针旋转图像

00:29:03.577 --> 00:29:04.611 align:middle line:-1
我们可以模糊化

00:29:05.412 --> 00:29:07.181 align:middle line:-1
将某些东西渐淡到背景中

00:29:08.081 --> 00:29:09.016 align:middle line:-1
你感觉…

00:29:10.017 --> 00:29:13.287 align:middle line:-2
如果你觉得你想为图片
添加一些复古感

00:29:13.353 --> 00:29:16.056 align:middle line:-1
你可以对黑白图像进行抖动处理

00:29:16.657 --> 00:29:19.326 align:middle line:-1
或对彩色图像进行色彩量化

00:29:20.260 --> 00:29:23.363 align:middle line:-1
我们来看看它们在app中的样子

00:29:36.410 --> 00:29:37.344 align:middle line:-1
再一次

00:29:37.411 --> 00:29:40.314 align:middle line:-1
这里有个滑块来控制旋转

00:29:40.848 --> 00:29:44.351 align:middle line:-1
我可以逆时针旋转

00:29:46.220 --> 00:29:48.655 align:middle line:-1
或顺时针旋转

00:29:51.525 --> 00:29:53.460 align:middle line:-1
现在我想尝试模糊效果

00:29:53.594 --> 00:29:55.095 align:middle line:-1
让我点击这里的一个按钮

00:29:55.963 --> 00:29:56.897 align:middle line:-1
然后…

00:29:57.231 --> 00:29:59.199 align:middle line:-1
我可以加深模糊

00:30:00.534 --> 00:30:03.036 align:middle line:-1
或…向左滑动

00:30:03.670 --> 00:30:05.873 align:middle line:-1
将玫瑰带回前景

00:30:08.008 --> 00:30:10.077 align:middle line:-1
对于黑白相片 我可以使用抖动

00:30:12.246 --> 00:30:14.915 align:middle line:-1
现在 这张黑白图片

00:30:14.982 --> 00:30:18.752 align:middle line:-1
其灰度现在由点的密度表示

00:30:18.819 --> 00:30:20.220 align:middle line:-1
这就是抖动效果

00:30:20.287 --> 00:30:24.191 align:middle line:-1
我们使用了重音和抖动算法

00:30:24.258 --> 00:30:25.893 align:middle line:-1
我稍后会告诉你该如何做

00:30:27.094 --> 00:30:30.130 align:middle line:-1
对于色彩量化 我们使用了查找表

00:30:31.098 --> 00:30:34.301 align:middle line:-1
我可以移动这个滑块来增加量化级别

00:30:34.368 --> 00:30:36.603 align:middle line:-1
当我将滑块向右移动时

00:30:36.970 --> 00:30:40.707 align:middle line:-1
此图片中的颜色越来越少

00:30:41.308 --> 00:30:42.910 align:middle line:-1
这很有创意…

00:30:44.511 --> 00:30:48.415 align:middle line:-2
这就是电脑屏幕在
90年代或80年代看起来的样子

00:30:50.384 --> 00:30:51.318 align:middle line:-1
好的

00:30:51.385 --> 00:30:52.252 align:middle line:-1
所以…

00:30:53.220 --> 00:30:54.755 align:middle line:-1
我们来看看这是如何做到的

00:30:58.458 --> 00:30:59.426 align:middle line:-1
对于旋转效果

00:30:59.493 --> 00:31:01.695 align:middle line:-2
你可以调用
vImageRotate

00:30:59.493 --> 00:31:01.695 align:middle line:-2
你可以调用
vImageRotate

00:31:01.962 --> 00:31:04.364 align:middle line:-1
并给定旋转角度

00:31:04.431 --> 00:31:08.035 align:middle line:-1
它就会逆时针或顺时针旋转你的图像

00:31:09.970 --> 00:31:12.673 align:middle line:-2
对于模糊效果 我们使用
TentConvolve函数

00:31:13.574 --> 00:31:16.043 align:middle line:-1
模糊效果由内核大小控制

00:31:16.610 --> 00:31:19.146 align:middle line:-1
内核越大 就会越模糊

00:31:21.682 --> 00:31:26.153 align:middle line:-2
抖动效果基本上就是将8位图像
转换为1位图像

00:31:26.220 --> 00:31:29.156 align:middle line:-1
同时你可以指定抖动算法

00:31:29.656 --> 00:31:32.626 align:middle line:-2
在这个例子中
我们使用阿特金森抖动算法

00:31:35.429 --> 00:31:38.599 align:middle line:-2
对于色彩量化
我们使用量化级别

00:31:38.665 --> 00:31:41.969 align:middle line:-1
来为RGB信道创建一个查找表

00:31:42.836 --> 00:31:45.272 align:middle line:-2
然后我们调用
vImageTableLookUp

00:31:45.739 --> 00:31:48.509 align:middle line:-1
来将此查找表应用于RGB信道

00:31:48.575 --> 00:31:51.078 align:middle line:-1
以限制屏幕上的颜色数量

00:31:54.047 --> 00:31:56.950 align:middle line:-1
这些是我想向你展示的四个额外效果

00:31:57.017 --> 00:32:01.255 align:middle line:-2
我认为现在是
进入下一个主题的好时机

00:31:57.017 --> 00:32:01.255 align:middle line:-2
我认为现在是
进入下一个主题的好时机

00:32:04.491 --> 00:32:05.726 align:middle line:-1
LINPACK Benchmark

00:32:06.860 --> 00:32:09.696 align:middle line:-2
我们谈到了
Accelerate的功能

00:32:09.897 --> 00:32:13.667 align:middle line:-2
我们也谈论了在你的app中
使用Accelerate有多容易

00:32:14.368 --> 00:32:17.838 align:middle line:-2
但我们还没有谈到
Accelerate的速度有多快

00:32:18.605 --> 00:32:21.308 align:middle line:-2
LINPACK Benchmark
是做这件事的完美工具

00:32:23.443 --> 00:32:24.945 align:middle line:-1
什么是LINPACK Benchmark？

00:32:25.712 --> 00:32:27.347 align:middle line:-1
它实际上会试图衡量

00:32:27.414 --> 00:32:30.551 align:middle line:-2
你可以多快地解决
机器上的线性系统问题

00:32:31.718 --> 00:32:34.721 align:middle line:-2
实际上有三种不同的
LINPACK Benchmark

00:32:34.788 --> 00:32:37.958 align:middle line:-2
第一个解决的是
100乘100的线性系统

00:32:38.859 --> 00:32:41.461 align:middle line:-1
第二个解决的是1000乘1000

00:32:42.229 --> 00:32:43.230 align:middle line:-1
最后一个…

00:32:43.830 --> 00:32:47.367 align:middle line:-2
这是最有趣的一个
也是我们今天要使用的这个

00:32:47.935 --> 00:32:48.836 align:middle line:-1
即“不受限”

00:32:49.136 --> 00:32:51.471 align:middle line:-1
你可以解决你想要的任意大的系统

00:32:51.638 --> 00:32:55.108 align:middle line:-1
来充分利用你的机器上的

00:32:55.175 --> 00:32:56.009 align:middle line:-1
所有计算能力

00:32:57.344 --> 00:33:01.882 align:middle line:-2
我们看看使用Accelerate
的iPhone X的性能

00:32:57.344 --> 00:33:01.882 align:middle line:-2
我们看看使用Accelerate
的iPhone X的性能

00:33:03.083 --> 00:33:05.185 align:middle line:-1
性能以吉拍来衡量

00:33:07.087 --> 00:33:10.457 align:middle line:-2
以双精度运算追赶
iPhone 5S

00:33:11.225 --> 00:33:12.526 align:middle line:-1
iPhone 6

00:33:13.927 --> 00:33:15.329 align:middle line:-1
iPhone 6S

00:33:16.230 --> 00:33:17.464 align:middle line:-1
iPhone 7

00:33:18.065 --> 00:33:21.902 align:middle line:-2
iPhone X
大约能达到28.7吉拍

00:33:22.269 --> 00:33:23.570 align:middle line:-1
这是双精度运算

00:33:23.837 --> 00:33:25.439 align:middle line:-1
我们来看看单精度

00:33:26.974 --> 00:33:27.841 align:middle line:-1
再一次…

00:33:31.044 --> 00:33:31.912 align:middle line:-1
我们的空间用完了

00:33:31.979 --> 00:33:35.048 align:middle line:-1
我们不得不缩小以使它们更靠近

00:33:38.252 --> 00:33:41.655 align:middle line:-2
iPhone X
大约能达到68吉拍

00:33:42.723 --> 00:33:46.527 align:middle line:-1
现在你可能会想 这并不令人意外

00:33:47.160 --> 00:33:48.762 align:middle line:-1
然而 随着时间的推移

00:33:48.829 --> 00:33:51.698 align:middle line:-1
它的性能也会随之提高

00:33:52.399 --> 00:33:55.302 align:middle line:-1
但事实上 这并不是全部

00:33:56.603 --> 00:33:58.172 align:middle line:-1
当微架构发生变化

00:33:58.238 --> 00:34:01.175 align:middle line:-1
从而为机器提供额外的计算能力时

00:33:58.238 --> 00:34:01.175 align:middle line:-1
从而为机器提供额外的计算能力时

00:34:01.742 --> 00:34:02.943 align:middle line:-1
你需要相应的软件

00:34:03.010 --> 00:34:06.079 align:middle line:-1
来充分利用这些额外的计算能力

00:34:06.680 --> 00:34:08.014 align:middle line:-1
这就是与我们相关的地方

00:34:08.982 --> 00:34:12.886 align:middle line:-2
请记住 这些是用同样的
LINPACK Benchmark可执行文件

00:34:13.187 --> 00:34:16.089 align:middle line:-1
运行在所有五代iPhone上

00:34:16.422 --> 00:34:19.092 align:middle line:-2
他们都使用Accelerate
获得了最佳性能

00:34:20.260 --> 00:34:21.527 align:middle line:-1
而无需做出任何改变

00:34:23.297 --> 00:34:25.232 align:middle line:-1
对于你的app也是如此

00:34:25.799 --> 00:34:28.101 align:middle line:-2
如果你在app中
使用Accelerate

00:34:28.302 --> 00:34:31.138 align:middle line:-1
你将自动获得最佳性能

00:34:31.405 --> 00:34:34.241 align:middle line:-1
在我们支持的所有架构上

00:34:35.641 --> 00:34:36.577 align:middle line:-1
此外…

00:34:37.511 --> 00:34:40.514 align:middle line:-1
Accelerate还支持多平台

00:34:41.014 --> 00:34:45.719 align:middle line:-2
Accelerate能在macOS、iOS
tvOS、watchOS上工作

00:34:47.221 --> 00:34:48.589 align:middle line:-1
假设明天

00:34:48.655 --> 00:34:52.092 align:middle line:-1
Apple推出了新架构或新平台

00:34:52.359 --> 00:34:53.793 align:middle line:-1
你也不必担心

00:34:54.561 --> 00:34:57.764 align:middle line:-1
你需要做的

00:34:57.931 --> 00:35:01.535 align:middle line:-2
顶多是重新构建你的app
并与Accelerate链接

00:34:57.931 --> 00:35:01.535 align:middle line:-2
顶多是重新构建你的app
并与Accelerate链接

00:35:01.735 --> 00:35:04.505 align:middle line:-1
你将自动在最新版本的平台或架构上

00:35:04.805 --> 00:35:07.741 align:middle line:-1
获得最佳性能

00:35:10.711 --> 00:35:12.346 align:middle line:-1
总而言之

00:35:12.779 --> 00:35:18.185 align:middle line:-2
我们谈到Accelerate
支持多种功能

00:35:18.819 --> 00:35:19.653 align:middle line:-1
有极大可能

00:35:19.720 --> 00:35:21.955 align:middle line:-2
你会在Accelerate中
找到你要的东西

00:35:22.489 --> 00:35:24.558 align:middle line:-1
如果你需要一些我们还没有的功能

00:35:24.625 --> 00:35:27.261 align:middle line:-1
请随时提交功能请求

00:35:27.928 --> 00:35:30.097 align:middle line:-1
我们经常查看这个功能请求

00:35:30.163 --> 00:35:32.299 align:middle line:-1
对它们进行评估 然后投入构建

00:35:32.766 --> 00:35:37.371 align:middle line:-2
实际上 我们的一些最佳功能
就是来自功能请求的

00:35:38.939 --> 00:35:40.674 align:middle line:-1
Accelerate很容易使用

00:35:40.941 --> 00:35:41.942 align:middle line:-1
大部分时间

00:35:42.009 --> 00:35:44.211 align:middle line:-1
只用一个函数调用就可以完成工作

00:35:45.445 --> 00:35:47.681 align:middle line:-1
它快速且节能

00:35:48.115 --> 00:35:52.519 align:middle line:-2
因此你的app更具响应能力
电池续航时间也更长

00:35:53.854 --> 00:35:57.357 align:middle line:-2
Accelerate可跨平台
和体系结构移植

00:35:57.558 --> 00:36:00.627 align:middle line:-2
你可以在我们支持的
所有平台和所有架构上

00:35:57.558 --> 00:36:00.627 align:middle line:-2
你可以在我们支持的
所有平台和所有架构上

00:36:00.694 --> 00:36:03.597 align:middle line:-1
均获得最佳性能

00:36:03.964 --> 00:36:06.567 align:middle line:-1
而其中最棒的是你不必改变你的代码

00:36:09.036 --> 00:36:10.003 align:middle line:0
欲了解更多信息

00:36:10.070 --> 00:36:14.007 align:middle line:0
你可以参阅developer.apple.com上的
在线文档

00:36:14.208 --> 00:36:18.245 align:middle line:0
我们所有的演示app
简单代码和演讲资料

00:36:18.312 --> 00:36:19.713 align:middle line:0
都会在线提供

00:36:20.581 --> 00:36:23.450 align:middle line:-2
明天下午两点
我们有一个实验室

00:36:24.117 --> 00:36:25.986 align:middle line:-1
我期待在那里见到你们

00:36:26.053 --> 00:36:27.387 align:middle line:-1
如果你有任何问题

00:36:27.654 --> 00:36:29.623 align:middle line:-2
或你想了解更多
关于Accelerate的信息

00:36:30.057 --> 00:36:31.425 align:middle line:-1
我很乐意在那里见到你

00:36:33.393 --> 00:36:34.995 align:middle line:-1
以上就是我们今天的演讲

00:36:35.062 --> 00:36:36.196 align:middle line:-1
谢谢大家的光临

00:36:36.363 --> 00:36:37.231 align:middle line:-1
祝你有美好的一天
