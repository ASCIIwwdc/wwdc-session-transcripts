WEBVTT

00:00:06.516 --> 00:00:16.500 A:middle
[ 音乐 ]

00:00:22.516 --> 00:00:30.756 A:middle
[ 掌声 ]

00:00:31.256 --> 00:00:33.646 A:middle
&gt;&gt; 下午好

00:00:34.516 --> 00:00:35.556 A:middle
我叫 Shane

00:00:35.956 --> 00:00:37.476 A:middle
我来自 Darwin Runtime 团队

00:00:37.756 --> 00:00:39.146 A:middle
欢迎大家来到

00:00:39.146 --> 00:00:40.856 A:middle
“使用日志来

00:00:40.856 --> 00:00:41.226 A:middle
衡量性能”

00:00:42.616 --> 00:00:44.676 A:middle
我们在周一听到了很多

00:00:44.766 --> 00:00:46.086 A:middle
关于性能的东西

00:00:46.706 --> 00:00:47.696 A:middle
性能是

00:00:47.696 --> 00:00:49.526 A:middle
良好用户体验的

00:00:49.526 --> 00:00:50.516 A:middle
关键之一

00:00:50.936 --> 00:00:52.816 A:middle
人们希望他们的游戏

00:00:52.906 --> 00:00:54.176 A:middle
和 App 能跑得快

00:00:54.936 --> 00:00:56.126 A:middle
同时兼具流畅性和灵敏性

00:00:57.416 --> 00:01:02.066 A:middle
但软件是复杂的

00:00:57.416 --> 00:01:02.066 A:middle
但软件是复杂的

00:01:02.066 --> 00:01:04.916 A:middle
这意味着当你的 App 在运行时

00:01:05.036 --> 00:01:06.596 A:middle
有时还同时发生着很多事情

00:01:06.596 --> 00:01:09.876 A:middle
这意味着你可以

00:01:09.876 --> 00:01:11.486 A:middle
从一些意想不到的地方

00:01:11.486 --> 00:01:12.746 A:middle
找到性能的突出点

00:01:13.716 --> 00:01:16.106 A:middle
这么做的话

00:01:16.106 --> 00:01:18.066 A:middle
发觉这些性能突出点需要你

00:01:18.136 --> 00:01:20.076 A:middle
对程序的行为有所理解

00:01:20.076 --> 00:01:21.616 A:middle
有时需要

00:01:21.616 --> 00:01:22.416 A:middle
更深的理解

00:01:23.046 --> 00:01:24.746 A:middle
它要求你知道

00:01:24.746 --> 00:01:26.376 A:middle
你的代码具体在什么时候运行

00:01:26.506 --> 00:01:28.696 A:middle
一段运算具体花了多少时间

00:01:29.546 --> 00:01:31.256 A:middle
所以这是一个

00:01:31.406 --> 00:01:33.706 A:middle
能让好工具真正发挥作用的地方

00:01:34.536 --> 00:01:36.146 A:middle
我们知道开发更好的工具

00:01:36.146 --> 00:01:37.816 A:middle
并交给你们使用

00:01:37.816 --> 00:01:39.936 A:middle
可以使我们

00:01:39.936 --> 00:01:41.136 A:middle
帮助你们成为

00:01:41.136 --> 00:01:42.116 A:middle
更有效率的开发者

00:01:42.776 --> 00:01:44.416 A:middle
所以今天我要说说

00:01:44.416 --> 00:01:45.236 A:middle
一个这样的工具

00:01:45.636 --> 00:01:47.076 A:middle
今天我要说说

00:01:47.406 --> 00:01:48.226 A:middle
Signposts

00:01:48.796 --> 00:01:50.796 A:middle
Signposts 是 OSLog 家族中的

00:01:50.796 --> 00:01:51.756 A:middle
新成员

00:01:52.696 --> 00:01:56.296 A:middle
你可以在 macOS 中使用

00:01:56.436 --> 00:01:58.206 A:middle
你也可以在 iOS 中使用

00:01:58.296 --> 00:01:59.866 A:middle
你可以在 Swift 和 C 里面使用

00:02:00.196 --> 00:02:02.596 A:middle
但最酷的是

00:02:02.736 --> 00:02:04.936 A:middle
我们将它整合进了 Instruments

00:02:05.466 --> 00:02:06.606 A:middle
这意味着 Instruments 可以

00:02:06.606 --> 00:02:07.766 A:middle
获得 Signposts 产生的数据

00:02:07.766 --> 00:02:12.136 A:middle
让你对程序的行为 有更深的理解

00:02:13.496 --> 00:02:15.476 A:middle
首先简单讲下历史

00:02:16.556 --> 00:02:18.926 A:middle
我们在几年前就推出了 OSLog

00:02:19.696 --> 00:02:21.826 A:middle
这是我们关于日志设备

00:02:21.826 --> 00:02:22.746 A:middle
的新想法

00:02:23.006 --> 00:02:26.076 A:middle
这是我们从系统中 获取调试信息的方式

00:02:26.456 --> 00:02:29.186 A:middle
我们是怀着提升效率的目标

00:02:29.356 --> 00:02:31.586 A:middle
并牢记着隐私的重要性 来开发它的

00:02:32.696 --> 00:02:34.146 A:middle
这里你可以看到一段

00:02:34.146 --> 00:02:35.796 A:middle
OSLog 的代码示例

00:02:35.796 --> 00:02:37.256 A:middle
我刚刚创建了一个简单的日志句柄

00:02:37.256 --> 00:02:39.566 A:middle
并把 “hello world” 传给了它

00:02:40.326 --> 00:02:43.016 A:middle
Signposts 继承了 OSLog 的 API

00:02:43.796 --> 00:02:44.536 A:middle
但它是为了描述

00:02:44.536 --> 00:02:45.576 A:middle
性能使用的情况

00:02:45.816 --> 00:02:46.486 A:middle
这意味着它们在传达

00:02:46.486 --> 00:02:48.156 A:middle
和性能有关的信息

00:02:48.156 --> 00:02:49.676 A:middle
并且我们把它

00:02:49.756 --> 00:02:51.026 A:middle
整合进了我们的开发者工具中

00:02:51.026 --> 00:02:52.846 A:middle
也就是说你可以

00:02:52.936 --> 00:02:53.876 A:middle
用 Signposts 来给你的

00:02:53.876 --> 00:02:55.486 A:middle
代码加上注释然后打开

00:02:55.486 --> 00:02:57.176 A:middle
Instruments 就能看到这个

00:02:58.526 --> 00:02:59.866 A:middle
在这里 Instruments 向你展示了

00:03:00.406 --> 00:03:03.736 A:middle
关于程序行为和 Signposts 活动

00:03:03.736 --> 00:03:05.596 A:middle
的一个漂亮时间线

00:03:06.046 --> 00:03:07.186 A:middle
然后在底部

00:03:07.186 --> 00:03:09.486 A:middle
有一个聚合了

00:03:09.546 --> 00:03:11.316 A:middle
Signposts 统计和分析数据

00:03:11.316 --> 00:03:13.216 A:middle
的表格

00:03:13.216 --> 00:03:15.056 A:middle
通过筛选拆解

00:03:15.056 --> 00:03:16.706 A:middle
来检查你程序的

00:03:16.876 --> 00:03:17.126 A:middle
行为

00:03:18.506 --> 00:03:20.476 A:middle
此次会议中我会讲

00:03:20.706 --> 00:03:21.986 A:middle
如何在你的代码中使用

00:03:21.986 --> 00:03:23.366 A:middle
Signposts 并向你展示

00:03:23.366 --> 00:03:24.086 A:middle
它的功能

00:03:24.536 --> 00:03:25.226 A:middle
然后我们将展示

00:03:25.226 --> 00:03:29.436 A:middle
新的 Instrument 和 Signposts 的图像

00:03:29.436 --> 00:03:31.296 A:middle
使你对 Signposts 和 Instrument

00:03:31.296 --> 00:03:34.736 A:middle
的协作有直观的理解 让我们开始吧

00:03:35.556 --> 00:03:38.946 A:middle
我先从一个非常简单的例子开始

00:03:39.766 --> 00:03:42.466 A:middle
假设这是你的 App

00:03:43.116 --> 00:03:44.586 A:middle
你想调查

00:03:44.586 --> 00:03:46.836 A:middle
一块特定界面

00:03:46.896 --> 00:03:49.456 A:middle
刷新所需要的时间

00:03:49.966 --> 00:03:51.856 A:middle
要达到这个目标

00:03:51.856 --> 00:03:53.566 A:middle
你要加载一些图片并将它们

00:03:53.566 --> 00:03:54.176 A:middle
放在屏幕上

00:03:54.696 --> 00:03:57.576 A:middle
所以简单来说从 App 的

00:03:57.576 --> 00:04:01.346 A:middle
这个 App 做的工作就是抓取素材

00:03:57.576 --> 00:04:01.346 A:middle
这个 App 做的工作就是抓取素材

00:04:01.486 --> 00:04:02.456 A:middle
当你抓取完所有素材以后

00:04:02.456 --> 00:04:04.296 A:middle
界面就刷新了

00:04:05.436 --> 00:04:07.116 A:middle
一个 Signpost 允许我们

00:04:07.176 --> 00:04:09.466 A:middle
标记一段行为的开始

00:04:09.466 --> 00:04:11.196 A:middle
和结束然后将

00:04:11.196 --> 00:04:12.586 A:middle
这时间上的两点

00:04:12.586 --> 00:04:14.476 A:middle
和这两个日志事件关联

00:04:15.326 --> 00:04:18.086 A:middle
它们通过调用了一个

00:04:18.086 --> 00:04:19.106 A:middle
os_signpost 函数来完成

00:04:19.305 --> 00:04:20.516 A:middle
有两种调用方式

00:04:20.616 --> 00:04:23.296 A:middle
一种是 .begin 一种是 .end

00:04:23.726 --> 00:04:25.776 A:middle
这里我用一个下面

00:04:25.776 --> 00:04:27.526 A:middle
带 b 的箭头代表开始

00:04:27.926 --> 00:04:29.446 A:middle
用下面带 e 的箭头

00:04:29.446 --> 00:04:31.626 A:middle
代表结束

00:04:31.626 --> 00:04:32.936 A:middle
然后我们将这两点

00:04:32.936 --> 00:04:34.126 A:middle
联系起来

00:04:34.126 --> 00:04:36.296 A:middle
让你知道

00:04:36.366 --> 00:04:37.736 A:middle
这个间隔经过了多少时间

00:04:37.736 --> 00:04:39.276 A:middle
好了

00:04:40.126 --> 00:04:42.246 A:middle
代码里这里有一段

00:04:42.246 --> 00:04:44.076 A:middle
这个算法的简单应用

00:04:44.556 --> 00:04:45.886 A:middle
对于界面的每个元素

00:04:45.886 --> 00:04:47.236 A:middle
我们都要获取素材

00:04:47.236 --> 00:04:49.296 A:middle
并且想要测量

00:04:49.296 --> 00:04:51.506 A:middle
这个操作所需的时间

00:04:52.426 --> 00:04:53.786 A:middle
要将 signpost 导入

00:04:53.786 --> 00:04:55.716 A:middle
这段代码里

00:04:55.716 --> 00:04:57.396 A:middle
我们只需将包含这个功能

00:04:57.596 --> 00:04:59.636 A:middle
的 os.signpost 模块导入

00:05:00.506 --> 00:05:02.496 A:middle
然后因为 Signposts 是

00:05:02.496 --> 00:05:04.146 A:middle
OSLog 功能的一部分

00:05:04.586 --> 00:05:06.276 A:middle
我们要创建一个日志句柄

00:05:06.796 --> 00:05:08.406 A:middle
这里 这个日志句柄有两个参数

00:05:08.406 --> 00:05:10.296 A:middle
一个 subsystem 和一个 category

00:05:11.216 --> 00:05:13.896 A:middle
subsystem 可能在你整个

00:05:13.896 --> 00:05:14.566 A:middle
项目中都是

00:05:14.566 --> 00:05:15.096 A:middle
一样的

00:05:15.516 --> 00:05:16.676 A:middle
它看起来非常像你的套装 ID

00:05:16.676 --> 00:05:18.666 A:middle
它代表着软件的

00:05:18.666 --> 00:05:19.996 A:middle
组成部分

00:05:19.996 --> 00:05:21.246 A:middle
可能是你使用的框架

00:05:22.816 --> 00:05:24.726 A:middle
category 是用来关联

00:05:25.346 --> 00:05:27.266 A:middle
将相关的操作或者相关的

00:05:27.266 --> 00:05:28.586 A:middle
signposts 组合在一起

00:05:29.136 --> 00:05:30.236 A:middle
稍后你将在会议中看到

00:05:30.236 --> 00:05:33.096 A:middle
为什么它很有用

00:05:33.256 --> 00:05:34.596 A:middle
当我们有了日志句柄后

00:05:35.416 --> 00:05:37.516 A:middle
我们将调用 os_signpost 函数两次

00:05:37.826 --> 00:05:39.036 A:middle
一次用 .begin. 一次用 .end.

00:05:39.036 --> 00:05:41.486 A:middle
我们将日志句柄传给

00:05:41.486 --> 00:05:42.876 A:middle
这几次调用

00:05:42.876 --> 00:05:44.566 A:middle
第三个参数

00:05:44.956 --> 00:05:46.686 A:middle
是 signpost 名称

00:05:47.826 --> 00:05:49.396 A:middle
signpost 名称是

00:05:49.396 --> 00:05:51.156 A:middle
一个字符串常量

00:05:51.186 --> 00:05:52.996 A:middle
用来确定间隔时间

00:05:53.056 --> 00:05:54.676 A:middle
用来确定我们想要测量的操作

00:05:55.696 --> 00:05:57.326 A:middle
这个字符串常量是

00:05:57.326 --> 00:05:59.346 A:middle
用来匹配我们

00:05:59.346 --> 00:06:00.806 A:middle
通过调用的 os_signpost 函数

00:05:59.346 --> 00:06:00.806 A:middle
通过调用的 os_signpost 函数

00:06:00.806 --> 00:06:02.756 A:middle
注释或标记过的

00:06:02.966 --> 00:06:04.606 A:middle
开始点和结束点

00:06:05.026 --> 00:06:07.416 A:middle
所以在我们的时间线上

00:06:07.416 --> 00:06:08.086 A:middle
看起来就像这样

00:06:08.086 --> 00:06:09.676 A:middle
在每段工作的开始

00:06:09.676 --> 00:06:11.696 A:middle
我们放了一个

00:06:11.696 --> 00:06:12.246 A:middle
os_signpost

00:06:12.366 --> 00:06:13.336 A:middle
在每段工作的结束

00:06:13.336 --> 00:06:14.776 A:middle
我们放了一个 os_signpost

00:06:15.086 --> 00:06:16.646 A:middle
因为这些字符串常量

00:06:16.646 --> 00:06:17.756 A:middle
在开始和结束的调用点上

00:06:17.756 --> 00:06:19.286 A:middle
按顺序排好了

00:06:19.286 --> 00:06:20.856 A:middle
我们可以将它俩匹配

00:06:20.856 --> 00:06:23.266 A:middle
但是如果我们想要

00:06:23.266 --> 00:06:25.346 A:middle
测量整段操作

00:06:25.346 --> 00:06:26.836 A:middle
完成全部刷新

00:06:26.836 --> 00:06:27.866 A:middle
所花的时间呢

00:06:28.526 --> 00:06:31.236 A:middle
在我们代码里

00:06:31.236 --> 00:06:32.966 A:middle
我们只需添加另一对 os_signpost

00:06:32.966 --> 00:06:34.646 A:middle
begin 和 end 调用

00:06:34.836 --> 00:06:35.346 A:middle
非常简单

00:06:35.836 --> 00:06:37.196 A:middle
这次我赋予了一个

00:06:37.306 --> 00:06:38.446 A:middle
不同的字符串常量

00:06:38.556 --> 00:06:39.756 A:middle
所以就有一个不一样的 signpost 名称

00:06:39.836 --> 00:06:41.616 A:middle
这次用了 “Refresh Panel”

00:06:41.616 --> 00:06:43.206 A:middle
来表示这是一个独立的间隔时间

00:06:43.206 --> 00:06:45.166 A:middle
和循环里的间隔时间相独立

00:06:47.236 --> 00:06:50.536 A:middle
在我们的时间线上

00:06:50.536 --> 00:06:51.846 A:middle
我们标记了另外两个

00:06:51.846 --> 00:06:52.656 A:middle
signposts

00:06:54.166 --> 00:06:55.606 A:middle
而匹配的字符串常量

00:06:55.606 --> 00:06:57.296 A:middle
“Refresh Panel”

00:06:57.296 --> 00:06:58.426 A:middle
让系统知道

00:06:58.426 --> 00:07:01.326 A:middle
这两点是相关联的

00:06:58.426 --> 00:07:01.326 A:middle
这两点是相关联的

00:07:02.846 --> 00:07:03.136 A:middle
好了

00:07:03.926 --> 00:07:05.796 A:middle
这并不是个超级简单的例子

00:07:06.226 --> 00:07:07.876 A:middle
如果你的程序一直

00:07:07.906 --> 00:07:09.736 A:middle
按第一步第二步

00:07:09.736 --> 00:07:11.046 A:middle
然后第三步的顺序来走

00:07:11.166 --> 00:07:11.816 A:middle
这么做是可以的

00:07:12.256 --> 00:07:14.706 A:middle
但在我们系统中

00:07:14.706 --> 00:07:16.686 A:middle
经常有很多工作是异步发生的

00:07:17.146 --> 00:07:17.386 A:middle
嗯

00:07:17.796 --> 00:07:19.816 A:middle
并不是有第一步

00:07:19.816 --> 00:07:21.066 A:middle
第二步第三步

00:07:21.066 --> 00:07:23.136 A:middle
我们通常按顺序开始

00:07:23.136 --> 00:07:24.796 A:middle
对吧 然后

00:07:24.796 --> 00:07:25.956 A:middle
稍后再完成它们

00:07:26.296 --> 00:07:27.106 A:middle
这意味着

00:07:27.736 --> 00:07:28.766 A:middle
这些操作可以

00:07:28.766 --> 00:07:29.346 A:middle
同时发生

00:07:29.346 --> 00:07:30.086 A:middle
他们可以重叠

00:07:31.226 --> 00:07:32.786 A:middle
在这种情况下我们需要

00:07:32.786 --> 00:07:34.046 A:middle
给系统一些

00:07:34.046 --> 00:07:35.636 A:middle
额外的信息

00:07:35.636 --> 00:07:36.836 A:middle
以让它区分开

00:07:36.836 --> 00:07:38.126 A:middle
这些 signposts

00:07:39.156 --> 00:07:42.096 A:middle
要做到这一点

00:07:42.096 --> 00:07:43.366 A:middle
目前我们只用到了名称

00:07:43.716 --> 00:07:43.886 A:middle
对吧

00:07:43.886 --> 00:07:45.726 A:middle
这个名称会匹配

00:07:45.726 --> 00:07:46.566 A:middle
开始和结束点

00:07:47.276 --> 00:07:48.436 A:middle
所以字符串常量现在

00:07:48.436 --> 00:07:50.026 A:middle
已经标识了时间段

00:07:50.026 --> 00:07:51.236 A:middle
但还没有让我们可以

00:07:51.236 --> 00:07:53.436 A:middle
区分重叠的时间段

00:07:54.236 --> 00:07:55.346 A:middle
要做到这一点我们给

00:07:55.346 --> 00:07:56.606 A:middle
Signpost 调用添加

00:07:56.606 --> 00:07:58.816 A:middle
了另一块信息 叫做 signpost ID

00:08:00.256 --> 00:08:02.196 A:middle
signpost ID 会告诉系统

00:08:02.196 --> 00:08:04.076 A:middle
这些是同一类型的操作

00:08:04.076 --> 00:08:06.516 A:middle
但是它们之间

00:08:06.546 --> 00:08:07.586 A:middle
又互相不一样

00:08:08.366 --> 00:08:11.276 A:middle
所以如果两项操作重叠了

00:08:11.276 --> 00:08:12.376 A:middle
但它们有着不同的 signpost ID

00:08:12.376 --> 00:08:13.446 A:middle
系统就会知道

00:08:13.486 --> 00:08:14.686 A:middle
它们是不同的时间段

00:08:15.096 --> 00:08:16.516 A:middle
只要你将相同的

00:08:16.516 --> 00:08:18.046 A:middle
signpost ID 传给了开始调用点

00:08:18.046 --> 00:08:19.196 A:middle
和结束调用点

00:08:19.626 --> 00:08:21.096 A:middle
这两个 signpost 就会

00:08:21.316 --> 00:08:22.546 A:middle
相互关联

00:08:23.596 --> 00:08:25.936 A:middle
你可以通过这个构造函数

00:08:25.936 --> 00:08:27.196 A:middle
使用一个日志句柄

00:08:27.196 --> 00:08:29.666 A:middle
来创建 signpost ID 但你也可以

00:08:29.666 --> 00:08:31.736 A:middle
通过对象来创建

00:08:32.606 --> 00:08:33.765 A:middle
如果你有一些对象

00:08:33.765 --> 00:08:35.226 A:middle
代表你想做的事

00:08:35.226 --> 00:08:36.426 A:middle
那么这样就很方便

00:08:36.895 --> 00:08:38.515 A:middle
只要你使用了

00:08:38.515 --> 00:08:39.736 A:middle
对象的同一实例

00:08:39.736 --> 00:08:41.456 A:middle
就会生成同样的 signpost ID

00:08:41.826 --> 00:08:42.756 A:middle
这意味着你不需要

00:08:42.806 --> 00:08:44.876 A:middle
到处携带和存储 signpost ID

00:08:44.876 --> 00:08:46.756 A:middle
你可以直接使用对象

00:08:48.966 --> 00:08:51.646 A:middle
直观上你可以将

00:08:51.646 --> 00:08:53.616 A:middle
signpost ID 想成允许我们

00:08:53.616 --> 00:08:55.086 A:middle
向每次 signpost 调用

00:08:55.086 --> 00:08:56.926 A:middle
传递一点额外的背景信息

00:08:57.926 --> 00:09:00.576 A:middle
对于一段特定的操作

00:08:57.926 --> 00:09:00.576 A:middle
对于一段特定的操作

00:09:00.576 --> 00:09:03.036 A:middle
它可以将开始和结束标记联系起来

00:09:03.716 --> 00:09:04.916 A:middle
这很重要因为这些操作

00:09:04.916 --> 00:09:06.336 A:middle
不仅可能会重叠

00:09:06.336 --> 00:09:08.116 A:middle
它们还通常需要花

00:09:08.186 --> 00:09:11.896 A:middle
不一样的时间

00:09:12.116 --> 00:09:14.666 A:middle
让我们到示例代码中看看

00:09:15.716 --> 00:09:16.466 A:middle
这就是我们的代码

00:09:16.466 --> 00:09:18.026 A:middle
我要将同步获取

00:09:18.026 --> 00:09:20.066 A:middle
异步调用转换成

00:09:20.066 --> 00:09:21.036 A:middle
异步获取

00:09:21.946 --> 00:09:23.266 A:middle
现在我要给它一个

00:09:23.396 --> 00:09:24.436 A:middle
completionHandler

00:09:24.436 --> 00:09:25.756 A:middle
当素材获取完毕后

00:09:25.846 --> 00:09:27.236 A:middle
这个闭包就会运行

00:09:28.446 --> 00:09:29.486 A:middle
然后我又添加了

00:09:29.486 --> 00:09:30.946 A:middle
一个闭包一个 completionHandler

00:09:31.346 --> 00:09:34.076 A:middle
在素材获取完后就运行

00:09:35.006 --> 00:09:36.676 A:middle
在每种情况下我都将

00:09:36.676 --> 00:09:38.266 A:middle
os_signpost 结束调用

00:09:38.306 --> 00:09:40.426 A:middle
放在了闭包内来指示

00:09:40.426 --> 00:09:42.256 A:middle
这就是我想要标记时段

00:09:42.256 --> 00:09:42.916 A:middle
结束的时间

00:09:44.266 --> 00:09:44.526 A:middle
OK

00:09:45.796 --> 00:09:47.426 A:middle
因为我们觉得

00:09:48.296 --> 00:09:49.616 A:middle
这些时段会互相重叠

00:09:49.616 --> 00:09:51.046 A:middle
我们想针对每个时段

00:09:51.076 --> 00:09:52.456 A:middle
创建新的 signpost ID

00:09:52.876 --> 00:09:54.416 A:middle
注意在上面的例子中我已经

00:09:54.606 --> 00:09:55.756 A:middle
通过构造函数使用日志句柄

00:09:55.756 --> 00:09:56.576 A:middle
创建了一个

00:09:56.686 --> 00:09:58.106 A:middle
第二个 我是通过

00:10:01.116 --> 00:10:03.436 A:middle
然后我将这些

00:10:03.436 --> 00:10:06.226 A:middle
signpost ID 传给调用处

00:10:06.676 --> 00:10:07.126 A:middle
做完了

00:10:07.876 --> 00:10:10.706 A:middle
你可以将 signpost 想成

00:10:10.706 --> 00:10:12.146 A:middle
整理好的一种

00:10:12.146 --> 00:10:13.846 A:middle
分类或者层次

00:10:14.336 --> 00:10:14.566 A:middle
对吧

00:10:15.066 --> 00:10:16.616 A:middle
所有这些操作都由

00:10:16.616 --> 00:10:17.936 A:middle
日志句柄相关联

00:10:18.036 --> 00:10:19.396 A:middle
代表日志类型

00:10:20.106 --> 00:10:21.456 A:middle
对我们感兴趣的每段操作

00:10:21.456 --> 00:10:22.706 A:middle
我们赋予了它一个

00:10:22.706 --> 00:10:23.616 A:middle
signpost 名称

00:10:25.096 --> 00:10:26.786 A:middle
然后因为这些 signpost

00:10:26.986 --> 00:10:28.256 A:middle
可能互相重叠

00:10:28.256 --> 00:10:29.626 A:middle
我们给了它们 signpost ID

00:10:29.626 --> 00:10:32.016 A:middle
告诉系统这是

00:10:32.016 --> 00:10:34.656 A:middle
那段时间的一个

00:10:34.656 --> 00:10:35.136 A:middle
特定实例

00:10:36.596 --> 00:10:39.396 A:middle
这个界面专门

00:10:39.666 --> 00:10:42.836 A:middle
设计得很灵活

00:10:42.836 --> 00:10:44.196 A:middle
这样你就可以在开始点

00:10:44.196 --> 00:10:46.416 A:middle
和结束点控制所有的参数

00:10:46.416 --> 00:10:47.956 A:middle
你可以控制 signpost 名称

00:10:47.956 --> 00:10:51.036 A:middle
赋予的日志句柄和 ID

00:10:51.036 --> 00:10:52.276 A:middle
我们这么做是因为

00:10:52.276 --> 00:10:53.966 A:middle
只要你在开始点

00:10:54.126 --> 00:10:55.656 A:middle
和结束点提供了相同的参数

00:10:55.656 --> 00:10:57.406 A:middle
那两个 signpost

00:10:57.406 --> 00:10:59.126 A:middle
就能够互相匹配

00:10:59.526 --> 00:11:01.586 A:middle
这意味着你的开始和结束点

00:10:59.526 --> 00:11:01.586 A:middle
这意味着你的开始和结束点

00:11:01.586 --> 00:11:02.096 A:middle
可以在不同的函数中

00:11:02.736 --> 00:11:03.816 A:middle
它们可以和不同的对象

00:11:03.816 --> 00:11:04.776 A:middle
相关联

00:11:04.816 --> 00:11:05.946 A:middle
它们甚至可以存在不同的

00:11:05.946 --> 00:11:06.646 A:middle
源文件中

00:11:07.356 --> 00:11:08.746 A:middle
我们这么做是因为我们想

00:11:08.746 --> 00:11:10.556 A:middle
让你可以在你的代码里使用它

00:11:10.856 --> 00:11:12.366 A:middle
所以无论你有什么

00:11:12.366 --> 00:11:14.576 A:middle
进入和退出的条件

00:11:14.626 --> 00:11:17.726 A:middle
你都可以调用

00:11:17.876 --> 00:11:20.886 A:middle
这就是如何使用 signposts

00:11:20.886 --> 00:11:22.366 A:middle
来测量间隔时间

00:11:22.906 --> 00:11:24.516 A:middle
可能你还想随 signposts

00:11:24.516 --> 00:11:25.716 A:middle
传达一些额外的信息

00:11:25.716 --> 00:11:26.916 A:middle
一些额外的

00:11:26.916 --> 00:11:28.496 A:middle
和性能有关的信息

00:11:28.496 --> 00:11:30.396 A:middle
对于这个 我们有办法

00:11:30.396 --> 00:11:32.306 A:middle
向 signpost 调用添加元数据

00:11:33.526 --> 00:11:35.796 A:middle
这是你的基础 signpost 调用

00:11:36.106 --> 00:11:37.256 A:middle
在此基础上我们可以

00:11:37.256 --> 00:11:39.056 A:middle
添加一个字符串常量参数

00:11:39.796 --> 00:11:40.846 A:middle
这允许你为你的

00:11:40.846 --> 00:11:42.626 A:middle
开始和结束调用点添加一些

00:11:42.626 --> 00:11:43.316 A:middle
背景信息

00:11:44.366 --> 00:11:46.016 A:middle
对于一段特定的操作

00:11:46.206 --> 00:11:47.896 A:middle
你可能有很多进入和退出点

00:11:47.896 --> 00:11:50.416 A:middle
但是字符串常量

00:11:50.416 --> 00:11:52.756 A:middle
也是一个 OSLog 格式的字符串

00:11:53.226 --> 00:11:54.756 A:middle
这意味着我可以拿它来

00:11:54.756 --> 00:11:57.406 A:middle
向 signpost 传递额外的数据

00:11:57.686 --> 00:11:59.226 A:middle
这里 比如说

00:11:59.226 --> 00:12:01.556 A:middle
我使用了 %d 传递了四个整数

00:11:59.226 --> 00:12:01.556 A:middle
我使用了 %d 传递了四个整数

00:12:02.806 --> 00:12:04.846 A:middle
但是因为这是一个 OSLog 格式的

00:12:04.846 --> 00:12:06.986 A:middle
字符串 我还可以使用它来

00:12:06.986 --> 00:12:08.626 A:middle
传递许多不同类型的参数

00:12:08.786 --> 00:12:09.766 A:middle
这里我传递了一些

00:12:09.766 --> 00:12:10.796 A:middle
浮点数

00:12:10.916 --> 00:12:12.266 A:middle
我甚至使用了格式说明符

00:12:12.266 --> 00:12:14.726 A:middle
来告诉系统

00:12:14.726 --> 00:12:15.736 A:middle
我想要的精确度

00:12:16.246 --> 00:12:19.396 A:middle
你也可以使用字符串常量

00:12:19.396 --> 00:12:20.926 A:middle
formatter 来传递动态字符串

00:12:21.746 --> 00:12:23.086 A:middle
这样我们可以

00:12:23.086 --> 00:12:24.186 A:middle
传递来自函数调用

00:12:24.186 --> 00:12:25.656 A:middle
或者来自

00:12:25.656 --> 00:12:27.186 A:middle
用户输入的信息

00:12:28.046 --> 00:12:30.036 A:middle
而我们使用

00:12:30.036 --> 00:12:31.756 A:middle
固定大小的存储量来引用

00:12:31.756 --> 00:12:33.516 A:middle
这个格式的字符串常量

00:12:33.516 --> 00:12:34.906 A:middle
这意味着你可以想

00:12:34.906 --> 00:12:36.746 A:middle
让它多长和易于理解

00:12:36.746 --> 00:12:37.136 A:middle
都行

00:12:39.136 --> 00:12:41.356 A:middle
这段易于理解的字符串

00:12:41.356 --> 00:12:42.346 A:middle
跟之后 Instruments 渲染的

00:12:42.346 --> 00:12:43.656 A:middle
是一样的

00:12:44.046 --> 00:12:45.986 A:middle
所以你可以随意给它一些背景

00:12:45.986 --> 00:12:47.106 A:middle
我在这里列举了

00:12:47.106 --> 00:12:48.006 A:middle
很多参数

00:12:48.446 --> 00:12:49.866 A:middle
Instruments 能够展示

00:12:49.866 --> 00:12:51.146 A:middle
完整的渲染后的字符串

00:12:51.576 --> 00:12:53.146 A:middle
或者它仍然对所附的

00:12:53.146 --> 00:12:55.486 A:middle
数据有程序访问权限

00:12:57.756 --> 00:12:59.816 A:middle
除了这些时段的

00:12:59.816 --> 00:13:01.226 A:middle
元数据以外你可能还想

00:12:59.816 --> 00:13:01.226 A:middle
元数据以外你可能还想

00:13:01.226 --> 00:13:03.496 A:middle
添加独立的时间点

00:13:04.156 --> 00:13:06.236 A:middle
也就是说除了

00:13:06.236 --> 00:13:08.246 A:middle
开始 signpost 和结束 signpost 以外

00:13:08.246 --> 00:13:09.356 A:middle
你还可以有这样一个 signpost

00:13:09.356 --> 00:13:10.726 A:middle
它没有跟一个特定的

00:13:10.786 --> 00:13:12.646 A:middle
时间段绑定

00:13:12.646 --> 00:13:14.406 A:middle
而是跟一个固定的时刻绑定

00:13:14.636 --> 00:13:16.596 A:middle
对于这个我们有一个

00:13:16.596 --> 00:13:17.946 A:middle
类型为 event 的 os_signpost

00:13:18.886 --> 00:13:20.136 A:middle
event 类型的 os_signpost

00:13:20.136 --> 00:13:21.926 A:middle
的调用和开始结束的调用

00:13:21.926 --> 00:13:23.676 A:middle
看起来一样

00:13:23.676 --> 00:13:24.966 A:middle
只不过多了 event 的类型

00:13:25.706 --> 00:13:27.706 A:middle
它标记了一个特定的时间点

00:13:28.656 --> 00:13:29.806 A:middle
你可以在时间段的

00:13:29.806 --> 00:13:32.186 A:middle
范围内使用它

00:13:32.186 --> 00:13:33.266 A:middle
或者可能你想追踪

00:13:33.266 --> 00:13:34.506 A:middle
独立于一个时间段的事件

00:13:34.506 --> 00:13:36.176 A:middle
比如一次用户交互

00:13:36.966 --> 00:13:39.436 A:middle
所以对于我们刚刚讲的

00:13:39.436 --> 00:13:41.066 A:middle
获取素材的时间间隔

00:13:41.066 --> 00:13:42.206 A:middle
你可能想知道

00:13:42.206 --> 00:13:43.556 A:middle
你在什么时候连接到了

00:13:43.596 --> 00:13:44.616 A:middle
提供这个素材的服务

00:13:45.066 --> 00:13:45.906 A:middle
或者你可能想知道

00:13:45.906 --> 00:13:47.466 A:middle
你在什么时候 接收到了其中的几个字节

00:13:48.416 --> 00:13:49.636 A:middle
你可以使用这个

00:13:49.636 --> 00:13:51.056 A:middle
在一个时间段过程中

00:13:51.056 --> 00:13:52.556 A:middle
多次更新

00:13:52.596 --> 00:13:54.986 A:middle
此时间段的状态和进展

00:13:56.426 --> 00:13:58.416 A:middle
或者你可能想追踪一个

00:13:58.416 --> 00:14:00.776 A:middle
触发事件比如

00:13:58.416 --> 00:14:00.776 A:middle
触发事件比如

00:14:00.776 --> 00:14:02.336 A:middle
一次用户界面交互

00:14:02.336 --> 00:14:04.196 A:middle
比如有人刚滑动屏幕

00:14:04.196 --> 00:14:05.276 A:middle
来更新界面

00:14:05.816 --> 00:14:07.206 A:middle
虽然如果你真的在

00:14:07.206 --> 00:14:08.306 A:middle
研究一个性能问题

00:14:08.336 --> 00:14:09.846 A:middle
他们可能滑动了很多次

00:14:09.846 --> 00:14:12.436 A:middle
所以这可能是你看到的

00:14:14.786 --> 00:14:17.136 A:middle
如果你启用了 signpost

00:14:17.636 --> 00:14:18.686 A:middle
默认情况下它们是开启的

00:14:19.396 --> 00:14:20.366 A:middle
但是我想讲讲

00:14:20.486 --> 00:14:22.216 A:middle
有条件地开启和关闭它们

00:14:23.986 --> 00:14:25.546 A:middle
首先我想强调

00:14:25.546 --> 00:14:26.766 A:middle
我们把 signpost 设计得

00:14:26.906 --> 00:14:27.536 A:middle
轻便小巧

00:14:28.066 --> 00:14:29.986 A:middle
这意味着我们做了很多

00:14:29.986 --> 00:14:32.146 A:middle
来优化它们的启动时间

00:14:32.666 --> 00:14:33.376 A:middle
我们通过优化了编译器

00:14:33.376 --> 00:14:34.796 A:middle
使得任务能

00:14:34.796 --> 00:14:36.546 A:middle
提前进行而非

00:14:36.606 --> 00:14:37.436 A:middle
在运行时

00:14:37.926 --> 00:14:39.416 A:middle
我们还推迟了很多事情

00:14:39.416 --> 00:14:40.796 A:middle
使它们可以在 Instruments

00:14:40.796 --> 00:14:41.656 A:middle
后台运行

00:14:41.946 --> 00:14:43.406 A:middle
这意味着当

00:14:43.406 --> 00:14:44.376 A:middle
在发送 signposts 时

00:14:44.376 --> 00:14:46.416 A:middle
它们只会占用非常少的系统资源

00:14:46.876 --> 00:14:47.896 A:middle
我们这么做是因为我们想

00:14:47.896 --> 00:14:49.456 A:middle
最小化它给你的代码运行

00:14:49.456 --> 00:14:50.436 A:middle
带来的影响

00:14:50.916 --> 00:14:52.096 A:middle
我们这么做还因为

00:14:52.096 --> 00:14:53.236 A:middle
我们想确保即使

00:14:53.236 --> 00:14:55.076 A:middle
你的时间跨度非常小

00:14:55.076 --> 00:14:56.946 A:middle
你也能发送很多

00:14:56.946 --> 00:14:57.866 A:middle
signpost 来得到一些

00:14:57.866 --> 00:14:58.976 A:middle
精确的测量结果

00:15:00.236 --> 00:15:01.566 A:middle
但是你也可能想要

00:15:01.566 --> 00:15:03.066 A:middle
关闭你的 signpost

00:15:03.406 --> 00:15:05.186 A:middle
你可能想要通过

00:15:05.186 --> 00:15:06.836 A:middle
特定路径中的代码消除

00:15:06.836 --> 00:15:07.656 A:middle
尽可能多的开销

00:15:08.176 --> 00:15:10.186 A:middle
或者你可能有两种类型的

00:15:10.186 --> 00:15:11.386 A:middle
signposts 两种的体量

00:15:11.386 --> 00:15:14.546 A:middle
都非常大 但是在某一时刻

00:15:14.546 --> 00:15:16.016 A:middle
你仅仅想对其中一种

00:15:16.016 --> 00:15:17.096 A:middle
进行除错

00:15:17.876 --> 00:15:19.536 A:middle
要这么做的话

00:15:19.536 --> 00:15:20.806 A:middle
我们要利用 OSLog 的一个功能

00:15:20.856 --> 00:15:23.266 A:middle
禁用的日志句柄

00:15:24.136 --> 00:15:25.896 A:middle
禁用的日志句柄是一个

00:15:26.386 --> 00:15:27.226 A:middle
简单的句柄

00:15:27.276 --> 00:15:30.036 A:middle
它的功能是把

00:15:30.096 --> 00:15:31.846 A:middle
对于该句柄的

00:15:31.846 --> 00:15:33.766 A:middle
OSLog 和 os_signpost 调用

00:15:33.766 --> 00:15:35.736 A:middle
都变成类似于空操作的东西

00:15:36.556 --> 00:15:38.186 A:middle
事实上 如果你在 C 当中使用它

00:15:38.466 --> 00:15:39.576 A:middle
我们甚至会帮你检查行

00:15:39.626 --> 00:15:41.506 A:middle
我们甚至不会

00:15:41.506 --> 00:15:42.856 A:middle
评估剩下的参数

00:15:43.546 --> 00:15:45.246 A:middle
所以你可以在运行时

00:15:45.246 --> 00:15:46.156 A:middle
修改这个句柄

00:15:46.566 --> 00:15:47.746 A:middle
让我给你看个例子

00:15:48.426 --> 00:15:51.226 A:middle
让我们回到一开始

00:15:51.226 --> 00:15:53.146 A:middle
使用的第一段代码示例

00:15:53.146 --> 00:15:54.846 A:middle
你可以在上面看到初始化的

00:15:54.846 --> 00:15:56.066 A:middle
日志句柄

00:15:56.896 --> 00:15:59.066 A:middle
而我现在要让这个初始化

00:15:59.106 --> 00:16:00.596 A:middle
有条件地发生

00:15:59.106 --> 00:16:00.596 A:middle
有条件地发生

00:16:01.076 --> 00:16:02.866 A:middle
所以我要么将它分配给

00:16:02.976 --> 00:16:04.546 A:middle
普通的 os_log 构造函数

00:16:05.066 --> 00:16:05.906 A:middle
或者把它分配给

00:16:05.906 --> 00:16:07.196 A:middle
禁用的日志句柄

00:16:07.776 --> 00:16:11.126 A:middle
如果我们采取第一种方法

00:16:11.126 --> 00:16:12.776 A:middle
所有的 os_signpost 调用都会

00:16:12.776 --> 00:16:14.546 A:middle
按照我刚刚说的一样进行

00:16:14.546 --> 00:16:15.996 A:middle
但如果我们采取第二种方法

00:16:15.996 --> 00:16:17.256 A:middle
这些 os_signpost 调用都会变成

00:16:17.256 --> 00:16:18.026 A:middle
接近于空操作

00:16:18.876 --> 00:16:21.696 A:middle
我刚刚说过

00:16:21.696 --> 00:16:22.886 A:middle
我没有必要调用任何我的

00:16:22.886 --> 00:16:24.196 A:middle
调用 我没有必要改变

00:16:24.196 --> 00:16:25.126 A:middle
我的任何调用

00:16:25.126 --> 00:16:26.756 A:middle
我只需要改变初始化

00:16:27.566 --> 00:16:29.346 A:middle
我让初始化条件

00:16:29.346 --> 00:16:31.446 A:middle
依赖于环境变量

00:16:31.696 --> 00:16:32.716 A:middle
你可以在

00:16:32.716 --> 00:16:34.046 A:middle
对程序进行调试时

00:16:34.046 --> 00:16:35.136 A:middle
在 Xcode scheme 中

00:16:35.136 --> 00:16:37.236 A:middle
对此进行设置

00:16:37.836 --> 00:16:39.126 A:middle
我刚才说你没有必要

00:16:39.126 --> 00:16:40.346 A:middle
在调用处内进行改变

00:16:40.346 --> 00:16:41.326 A:middle
但是你可能有一些

00:16:41.326 --> 00:16:44.506 A:middle
用于特定 instrumentation 的功能

00:16:44.586 --> 00:16:46.346 A:middle
也就是说虽然代价高昂

00:16:46.346 --> 00:16:47.586 A:middle
但可能只有在调试时

00:16:47.586 --> 00:16:48.086 A:middle
才使用它

00:16:48.926 --> 00:16:50.976 A:middle
这种情况下你可以检查一个

00:16:50.976 --> 00:16:52.486 A:middle
特定的日志句柄

00:16:52.486 --> 00:16:53.736 A:middle
看看在启用 signpost

00:16:54.076 --> 00:16:55.536 A:middle
属性中是否启用了 signpost

00:16:56.036 --> 00:16:57.256 A:middle
启用了 signpost 的属性

00:16:57.256 --> 00:16:58.656 A:middle
可以用来控制

00:16:58.656 --> 00:17:00.526 A:middle
额外的操作

00:16:58.656 --> 00:17:00.526 A:middle
额外的操作

00:17:02.586 --> 00:17:02.876 A:middle
好的

00:17:03.426 --> 00:17:05.076 A:middle
我刚展示过的所有例子

00:17:05.076 --> 00:17:06.646 A:middle
都是用的 Swift

00:17:07.356 --> 00:17:11.175 A:middle
但是 signposts 也可以用于 C

00:17:13.086 --> 00:17:13.925 A:middle
我刚刚讲过的

00:17:13.955 --> 00:17:15.476 A:middle
所有功能都可以用

00:17:15.476 --> 00:17:17.266 A:middle
日志句柄

00:17:17.675 --> 00:17:18.665 A:middle
发送三种不同的

00:17:18.665 --> 00:17:21.236 A:middle
signpost 以及管理

00:17:21.236 --> 00:17:22.476 A:middle
你的 signpost 标识符

00:17:23.066 --> 00:17:23.816 A:middle
对于那些对使用 C

00:17:23.816 --> 00:17:25.726 A:middle
感兴趣的人来说

00:17:25.726 --> 00:17:26.876 A:middle
我鼓励你们阅读标题文档

00:17:26.876 --> 00:17:28.086 A:middle
标题文档涵盖了所有

00:17:28.086 --> 00:17:29.566 A:middle
我刚讲的信息但是是从

00:17:29.566 --> 00:17:30.896 A:middle
C 语言开发者的角度写的

00:17:32.236 --> 00:17:32.806 A:middle
好了

00:17:33.476 --> 00:17:34.876 A:middle
现在你知道了如何在

00:17:34.876 --> 00:17:35.866 A:middle
代码中使用 signpost

00:17:36.356 --> 00:17:38.006 A:middle
或许你对它们代表的东西

00:17:38.006 --> 00:17:39.386 A:middle
有了一个思维模型

00:17:39.956 --> 00:17:41.436 A:middle
所以我想让你们看看

00:17:41.436 --> 00:17:43.126 A:middle
signposts 如何与

00:17:43.306 --> 00:17:43.926 A:middle
Instruments 协作

00:17:44.486 --> 00:17:45.936 A:middle
这一块 我要把

00:17:45.936 --> 00:17:46.906 A:middle
剩下的环节交给

00:17:46.906 --> 00:17:48.416 A:middle
我的同事 Chad

00:17:49.016 --> 00:17:49.276 A:middle
谢谢

00:17:50.516 --> 00:17:56.796 A:middle
[ 掌声 ]

00:17:57.296 --> 00:17:57.926 A:middle
&gt;&gt; 好了

00:17:58.646 --> 00:17:59.246 A:middle
谢谢你 Shane

00:18:00.486 --> 00:18:02.606 A:middle
今天我要向大家演示

00:18:02.606 --> 00:18:04.036 A:middle
Instruments 10 的

00:18:04.036 --> 00:18:05.016 A:middle
三个重要的新功能

00:18:05.016 --> 00:18:06.776 A:middle
帮助你更好地

00:18:06.776 --> 00:18:07.616 A:middle
处理 signpost 数据

00:18:08.506 --> 00:18:10.436 A:middle
第一个就是新的 os_signpost instrument

00:18:10.686 --> 00:18:11.656 A:middle
这个 instrument 允许你

00:18:11.656 --> 00:18:13.186 A:middle
记录 图形化

00:18:13.186 --> 00:18:14.986 A:middle
并分析你 App

00:18:14.986 --> 00:18:16.736 A:middle
的所有 signpost 活动

00:18:17.636 --> 00:18:20.036 A:middle
下一个功能是 points of interest

00:18:20.036 --> 00:18:20.846 A:middle
我会大概讲讲什么是

00:18:20.846 --> 00:18:22.316 A:middle
points of interest

00:18:22.426 --> 00:18:23.946 A:middle
你会在什么时候使用它

00:18:24.396 --> 00:18:26.026 A:middle
然后我会向大家展示

00:18:26.026 --> 00:18:27.636 A:middle
新的自定义 instrument 功能

00:18:27.636 --> 00:18:29.086 A:middle
以及如何同 os_signpost

00:18:29.086 --> 00:18:31.946 A:middle
使用它来得到关于

00:18:32.286 --> 00:18:34.536 A:middle
signpost 的更精确的

00:18:34.536 --> 00:18:35.386 A:middle
一个表示

00:18:35.986 --> 00:18:37.616 A:middle
让我们看看

00:18:37.616 --> 00:18:38.346 A:middle
操作示范吧

00:18:39.116 --> 00:18:39.216 A:middle
好的

00:18:42.626 --> 00:18:44.526 A:middle
首先让我们

00:18:44.526 --> 00:18:47.106 A:middle
看看我们的示例程序

00:18:47.256 --> 00:18:48.986 A:middle
这是我们的 Trailblazer App

00:18:50.046 --> 00:18:53.016 A:middle
这个 App 向你展示了

00:18:53.016 --> 00:18:54.056 A:middle
当地的登山路线

00:18:54.476 --> 00:18:56.626 A:middle
当我们往下滑时

00:18:56.656 --> 00:18:58.756 A:middle
它会为你下载这些好看的图片

00:18:59.916 --> 00:19:01.476 A:middle
你会注意到最开始

00:18:59.916 --> 00:19:01.476 A:middle
你会注意到最开始

00:19:01.566 --> 00:19:03.216 A:middle
是白色的背景然后

00:19:03.216 --> 00:19:04.896 A:middle
图片随后出现 填充了背景

00:19:04.896 --> 00:19:06.486 A:middle
对于这类 App

00:19:06.486 --> 00:19:08.536 A:middle
这是非常常见的现象

00:19:08.536 --> 00:19:09.526 A:middle
有时它植入了

00:19:09.526 --> 00:19:12.466 A:middle
future 或者 promise

00:19:12.466 --> 00:19:13.796 A:middle
但是这个现象 虽然它对

00:19:13.896 --> 00:19:15.746 A:middle
性能很有帮助

00:19:15.746 --> 00:19:17.496 A:middle
它也很难被配置

00:19:17.556 --> 00:19:19.896 A:middle
原因在于有很多异步的

00:19:19.896 --> 00:19:21.486 A:middle
活动在同时进行

00:19:21.876 --> 00:19:23.796 A:middle
当用户滑动时

00:19:23.796 --> 00:19:25.996 A:middle
有一些下载在同时进行

00:19:25.996 --> 00:19:27.316 A:middle
如果用户像这样

00:19:27.316 --> 00:19:29.226 A:middle
飞快地滑动时那么

00:19:29.226 --> 00:19:31.646 A:middle
在图像单元重新被使用

00:19:31.776 --> 00:19:33.536 A:middle
之前下载可能还没有完成

00:19:34.066 --> 00:19:35.826 A:middle
那么我们就得取消下载

00:19:36.076 --> 00:19:37.986 A:middle
如果我们取消失败了

00:19:37.986 --> 00:19:40.236 A:middle
那么一些下载就会

00:19:40.236 --> 00:19:41.326 A:middle
并行运行但是我们

00:19:41.326 --> 00:19:42.276 A:middle
并不想这样

00:19:42.936 --> 00:19:44.196 A:middle
让我们看看如何

00:19:44.196 --> 00:19:46.416 A:middle
使用 signposts 来分析

00:19:46.416 --> 00:19:47.866 A:middle
我们的 Trailblazer 的 App

00:19:48.546 --> 00:19:51.326 A:middle
在路线单元中

00:19:51.326 --> 00:19:53.026 A:middle
有一个方式叫做

00:19:53.206 --> 00:19:54.956 A:middle
startImageDownload

00:19:55.286 --> 00:19:56.486 A:middle
当我们需要下载新图像时

00:19:56.486 --> 00:19:58.736 A:middle
它就会被调用

00:19:58.996 --> 00:20:00.726 A:middle
它传递了需要被下载的

00:19:58.996 --> 00:20:00.726 A:middle
它传递了需要被下载的

00:20:01.016 --> 00:20:01.856 A:middle
图像名称

00:20:02.506 --> 00:20:03.666 A:middle
现在我们在这里有一个

00:20:04.256 --> 00:20:05.896 A:middle
download helper 的类

00:20:05.896 --> 00:20:07.386 A:middle
我们创建一个传递名称的实例

00:20:07.386 --> 00:20:08.546 A:middle
将我们自己设为委托

00:20:08.546 --> 00:20:09.626 A:middle
当它下载完后就会

00:20:09.656 --> 00:20:10.136 A:middle
回调我们

00:20:10.136 --> 00:20:13.486 A:middle
这种情况下

00:20:13.486 --> 00:20:15.386 A:middle
既然 downloader 代表

00:20:15.566 --> 00:20:16.816 A:middle
同时进行的活动

00:20:16.816 --> 00:20:19.016 A:middle
这个异步的工作

00:20:19.016 --> 00:20:20.836 A:middle
就是 signpost ID 的绝佳依据

00:20:21.046 --> 00:20:22.046 A:middle
我们现在用我们的

00:20:22.046 --> 00:20:25.156 A:middle
downloader 对象来创建 signpost ID

00:20:26.606 --> 00:20:27.746 A:middle
要启用我们的 signposts

00:20:27.746 --> 00:20:29.356 A:middle
我们要做一个 os_signpost begin

00:20:29.656 --> 00:20:30.886 A:middle
我们将它发送到

00:20:30.886 --> 00:20:32.836 A:middle
我们的 networking 日志句柄

00:20:32.876 --> 00:20:34.606 A:middle
快速浏览下我们的

00:20:34.606 --> 00:20:35.616 A:middle
networking 日志句柄

00:20:35.926 --> 00:20:37.516 A:middle
你可以看到我们使用了

00:20:37.516 --> 00:20:39.446 A:middle
Trailblazer 套装 ID 和

00:20:39.446 --> 00:20:40.906 A:middle
networking 类别

00:20:41.606 --> 00:20:45.786 A:middle
现在我们要传递一张图像

00:20:45.786 --> 00:20:47.896 A:middle
不好意思是背景图片的

00:20:47.896 --> 00:20:49.086 A:middle
signpost 名称这样我们

00:20:49.086 --> 00:20:50.216 A:middle
就能看到所有背景

00:20:50.216 --> 00:20:51.106 A:middle
图片的下载

00:20:51.106 --> 00:20:52.936 A:middle
它会传递我们创建的

00:20:52.936 --> 00:20:53.756 A:middle
signpost ID

00:20:53.816 --> 00:20:56.356 A:middle
我们给开始附上一些

00:20:56.356 --> 00:20:59.206 A:middle
元数据来传达我们

00:20:59.206 --> 00:21:01.016 A:middle
下载的图像的名称

00:20:59.206 --> 00:21:01.016 A:middle
下载的图像的名称

00:21:01.636 --> 00:21:02.476 A:middle
然后我们开始下载

00:21:02.476 --> 00:21:04.556 A:middle
我们设置属性

00:21:04.796 --> 00:21:06.526 A:middle
来追踪下载

00:21:06.526 --> 00:21:08.096 A:middle
目前设为 runningDownloader

00:21:09.196 --> 00:21:10.406 A:middle
这个完成后我们会在这里

00:21:10.406 --> 00:21:12.736 A:middle
有一个 didReceiveImage 回调

00:21:13.126 --> 00:21:15.266 A:middle
然后我们将图像视图

00:21:15.266 --> 00:21:16.266 A:middle
设为接收到的图像

00:21:17.376 --> 00:21:19.686 A:middle
然后我们结束调用 signpost

00:21:19.926 --> 00:21:21.316 A:middle
然后我们将使用完全

00:21:21.316 --> 00:21:23.266 A:middle
一样的日志句柄 一样的名称

00:21:23.266 --> 00:21:25.666 A:middle
一样的 signpost ID 但这次

00:21:25.666 --> 00:21:27.686 A:middle
我们将附上一些

00:21:27.686 --> 00:21:29.286 A:middle
结束的元数据比如

00:21:29.286 --> 00:21:29.846 A:middle
“finished with size”

00:21:30.726 --> 00:21:32.686 A:middle
你会注意到这里

00:21:33.296 --> 00:21:35.896 A:middle
我们给了这个参数标记了

00:21:35.896 --> 00:21:38.406 A:middle
Xcode:size-in-bytes 的特征

00:21:38.406 --> 00:21:40.056 A:middle
这个东西告诉

00:21:40.336 --> 00:21:42.276 A:middle
Xcode 和 Instruments

00:21:42.276 --> 00:21:43.676 A:middle
这项参数在显示

00:21:43.676 --> 00:21:45.566 A:middle
和分析中都应被当做

00:21:45.716 --> 00:21:46.536 A:middle
size-in-bytes

00:21:47.756 --> 00:21:49.166 A:middle
这些叫工程类型

00:21:49.166 --> 00:21:50.336 A:middle
你可以在 Instruments

00:21:50.336 --> 00:21:51.656 A:middle
开发者帮助指南中

00:21:51.656 --> 00:21:52.986 A:middle
读到 就在 Instruments

00:21:52.986 --> 00:21:54.206 A:middle
的帮助菜单中

00:21:54.956 --> 00:21:57.676 A:middle
当我们完成下载后

00:21:57.676 --> 00:21:59.556 A:middle
我们可以将它设为 nil

00:22:00.106 --> 00:22:02.366 A:middle
我们有两种方式来

00:22:02.366 --> 00:22:03.656 A:middle
结束下载

00:22:03.656 --> 00:22:05.766 A:middle
一种是成功的情况

00:22:06.036 --> 00:22:07.576 A:middle
而我们还要考虑

00:22:07.576 --> 00:22:08.206 A:middle
取消的情况

00:22:08.896 --> 00:22:11.176 A:middle
准备重新使用时 如果我们

00:22:11.176 --> 00:22:12.136 A:middle
现在有一个正在运行的

00:22:12.136 --> 00:22:13.656 A:middle
downloader 我们首先需要

00:22:13.716 --> 00:22:15.486 A:middle
取消这个 downloader

00:22:16.316 --> 00:22:17.406 A:middle
这种情况下我们要

00:22:17.406 --> 00:22:18.916 A:middle
为这个时间段创建结束点

00:22:19.106 --> 00:22:20.936 A:middle
然后我们使用同一个

00:22:21.306 --> 00:22:24.766 A:middle
日志句柄 signpost 名称 signpost ID

00:22:25.296 --> 00:22:27.046 A:middle
然后我们使用 cancelled

00:22:27.046 --> 00:22:29.456 A:middle
作为结束元数据来隔开它

00:22:29.456 --> 00:22:31.066 A:middle
当我们成功完成时

00:22:32.116 --> 00:22:33.606 A:middle
这些应该足够

00:22:33.606 --> 00:22:34.356 A:middle
来配置了

00:22:34.356 --> 00:22:38.146 A:middle
现在我们到这里来配置产品

00:22:38.146 --> 00:22:40.086 A:middle
而当我们完成

00:22:40.086 --> 00:22:43.876 A:middle
构建和安装后它就会

00:22:43.916 --> 00:22:44.816 A:middle
启动 Instruments

00:22:44.816 --> 00:22:47.146 A:middle
它会在这里启动 Instruments

00:22:47.266 --> 00:22:49.666 A:middle
我们可以创建一个空白的

00:22:49.666 --> 00:22:50.156 A:middle
新文档

00:22:50.536 --> 00:22:52.456 A:middle
然后我们到 library 中

00:22:52.546 --> 00:22:54.156 A:middle
我可以向你展示如何使用

00:22:54.156 --> 00:22:56.126 A:middle
新的 os_signpost instrument

00:22:56.646 --> 00:22:59.256 A:middle
这里有我们新的 os_signpost instrument

00:22:59.386 --> 00:23:03.806 A:middle
然后我们把它拖动 挪到这里

00:22:59.386 --> 00:23:03.806 A:middle
然后我们把它拖动 挪到这里

00:23:04.186 --> 00:23:05.116 A:middle
我们给它在这里

00:23:05.116 --> 00:23:07.176 A:middle
多留点空间然后我们

00:23:07.176 --> 00:23:08.376 A:middle
按下录制

00:23:08.646 --> 00:23:12.226 A:middle
然后我们拿出 iPhone

00:23:12.396 --> 00:23:13.556 A:middle
回到开始状态

00:23:13.876 --> 00:23:14.066 A:middle
好了

00:23:14.066 --> 00:23:15.076 A:middle
现在我们要开始滑动

00:23:15.076 --> 00:23:16.226 A:middle
然后我们也会

00:23:16.226 --> 00:23:17.126 A:middle
非常 非常快得滑动屏幕

00:23:17.196 --> 00:23:20.116 A:middle
然后我们让它停下

00:23:20.576 --> 00:23:22.236 A:middle
现在我们返回到

00:23:22.236 --> 00:23:23.326 A:middle
Instruments 中看看我们记录下了

00:23:23.326 --> 00:23:24.096 A:middle
什么数据

00:23:24.796 --> 00:23:26.776 A:middle
现在我要停止录制

00:23:27.636 --> 00:23:29.716 A:middle
现在你可以注意到

00:23:30.006 --> 00:23:31.406 A:middle
在轨迹视图中

00:23:31.406 --> 00:23:33.206 A:middle
我们可以直观地看到

00:23:33.206 --> 00:23:34.636 A:middle
所有背景图片时间间隔

00:23:34.636 --> 00:23:35.706 A:middle
这是 signpost 名称

00:23:35.996 --> 00:23:37.706 A:middle
如果我们按住选项键

00:23:37.706 --> 00:23:40.236 A:middle
然后放大你可以看到

00:23:40.646 --> 00:23:41.546 A:middle
有一些时间段

00:23:41.766 --> 00:23:43.946 A:middle
时间段被

00:23:43.946 --> 00:23:45.846 A:middle
开始元数据和结束

00:23:45.846 --> 00:23:47.176 A:middle
元数据标记

00:23:48.126 --> 00:23:50.106 A:middle
如果我们缩回去

00:23:50.386 --> 00:23:52.066 A:middle
然后再次观察轨迹

00:23:52.066 --> 00:23:54.786 A:middle
我们会注意到

00:23:54.876 --> 00:23:57.546 A:middle
只有少于五张的图片

00:23:57.546 --> 00:23:58.466 A:middle
在同时进行下载

00:23:58.466 --> 00:23:59.546 A:middle
这是一件好事

00:24:00.006 --> 00:24:01.646 A:middle
这意味着我们取消成功了

00:24:01.646 --> 00:24:04.276 A:middle
如果我们想确认的话

00:24:04.276 --> 00:24:05.346 A:middle
我们可以到这里然后

00:24:05.346 --> 00:24:07.606 A:middle
你可以看到许多

00:24:07.606 --> 00:24:09.536 A:middle
时间间隔的元数据都

00:24:09.536 --> 00:24:11.936 A:middle
写着下载时被取消

00:24:12.706 --> 00:24:14.506 A:middle
如果你想 如果

00:24:14.506 --> 00:24:16.716 A:middle
你想看看数据

00:24:17.076 --> 00:24:18.346 A:middle
或者说你想看看

00:24:18.346 --> 00:24:19.586 A:middle
这些间隔的持续时间

00:24:19.586 --> 00:24:22.196 A:middle
那么你可以来这里

00:24:22.246 --> 00:24:23.726 A:middle
看看这些间隔的概要

00:24:24.126 --> 00:24:26.726 A:middle
然后我们看到按类别

00:24:26.726 --> 00:24:28.886 A:middle
进行了细分 然后按 signpost

00:24:28.886 --> 00:24:30.616 A:middle
名称然后按开始信息

00:24:30.616 --> 00:24:32.456 A:middle
然后按结束信息

00:24:33.386 --> 00:24:35.326 A:middle
如果我们把这个缩小

00:24:35.326 --> 00:24:38.056 A:middle
你可以看到我们

00:24:38.056 --> 00:24:41.306 A:middle
发送了 93 次图片下载请求

00:24:42.236 --> 00:24:44.236 A:middle
其中 12 次是针对于位置 1

00:24:45.426 --> 00:24:46.506 A:middle
在这 12 次中

00:24:46.506 --> 00:24:48.776 A:middle
7 次被取消 5 次完成

00:24:48.806 --> 00:24:50.736 A:middle
大小为 3.31 MB

00:24:52.006 --> 00:24:53.036 A:middle
如果你现在看这里

00:24:53.036 --> 00:24:54.716 A:middle
这些是关于时段的

00:24:54.716 --> 00:24:55.386 A:middle
统计数据

00:24:55.776 --> 00:24:58.496 A:middle
然后你们可以看到

00:24:58.736 --> 00:25:00.506 A:middle
被取消的最小和平均

00:24:58.736 --> 00:25:00.506 A:middle
被取消的最小和平均

00:25:01.106 --> 00:25:02.966 A:middle
时间段比

00:25:02.966 --> 00:25:04.816 A:middle
下载完全的时间段

00:25:05.066 --> 00:25:06.056 A:middle
要小很多

00:25:06.056 --> 00:25:07.086 A:middle
这就是在这种

00:25:07.086 --> 00:25:08.826 A:middle
情况下你期待看到的

00:25:09.866 --> 00:25:11.086 A:middle
现在如果你想要看所有

00:25:11.086 --> 00:25:12.926 A:middle
被取消掉的事件

00:25:12.926 --> 00:25:13.966 A:middle
因为你对这些很感兴趣

00:25:13.966 --> 00:25:16.186 A:middle
你可以按下这个聚焦箭头

00:25:16.216 --> 00:25:19.586 A:middle
然后它会带你跳转到一个

00:25:19.586 --> 00:25:21.586 A:middle
列表视图你可以在这里看到

00:25:21.586 --> 00:25:24.186 A:middle
所有地方 其中位置 1

00:25:24.186 --> 00:25:25.626 A:middle
有结束信息 “cancelled”

00:25:26.386 --> 00:25:28.156 A:middle
并且当我们浏览的时候

00:25:28.156 --> 00:25:29.146 A:middle
你会看到轨迹

00:25:29.146 --> 00:25:30.636 A:middle
上方的探头

00:25:31.016 --> 00:25:32.566 A:middle
会移到每一个

00:25:32.566 --> 00:25:33.206 A:middle
时间间隔处

00:25:33.336 --> 00:25:35.066 A:middle
所以你可以追踪所有

00:25:35.066 --> 00:25:36.086 A:middle
失败的情况如果你

00:25:36.086 --> 00:25:36.556 A:middle
感兴趣的话

00:25:36.666 --> 00:25:40.076 A:middle
这是一个查看这些

00:25:40.316 --> 00:25:42.756 A:middle
间隔的时间

00:25:42.756 --> 00:25:44.096 A:middle
时间点的好方法

00:25:44.456 --> 00:25:46.926 A:middle
但是如果你想进行对这些

00:25:46.926 --> 00:25:48.536 A:middle
元数据进行分析呢

00:25:49.316 --> 00:25:50.886 A:middle
如果你想确定

00:25:51.046 --> 00:25:53.426 A:middle
有多少字节的图像数据

00:25:53.426 --> 00:25:54.916 A:middle
是我们已经从网络上下载了呢

00:25:55.696 --> 00:25:57.906 A:middle
我们已经发送了元数据信息

00:25:57.906 --> 00:25:59.946 A:middle
比如 “Finished with size”

00:25:59.996 --> 00:26:01.026 A:middle
然后是它的大小

00:25:59.996 --> 00:26:01.026 A:middle
然后是它的大小

00:26:01.026 --> 00:26:02.516 A:middle
如果我们能把这些参数加起来

00:26:02.576 --> 00:26:04.536 A:middle
那就太棒了

00:26:05.266 --> 00:26:06.546 A:middle
所以，如果你想这么做

00:26:06.546 --> 00:26:07.256 A:middle
你可以在这里选择

00:26:07.256 --> 00:26:09.286 A:middle
“summary of metadata statistics”

00:26:10.616 --> 00:26:11.696 A:middle
你可以看到

00:26:11.696 --> 00:26:13.276 A:middle
我们将它分解成了子系统

00:26:13.826 --> 00:26:17.076 A:middle
种类和格式化字符串

00:26:17.076 --> 00:26:18.636 A:middle
在格式化字符串下面

00:26:18.636 --> 00:26:19.606 A:middle
是它的参数

00:26:19.816 --> 00:26:20.996 A:middle
由于我们的格式化字符串

00:26:20.996 --> 00:26:22.926 A:middle
只有一个参数 所以就是 arg0

00:26:22.926 --> 00:26:26.416 A:middle
现在 Instruments 已经将这些加在一起了

00:26:26.416 --> 00:26:27.896 A:middle
并且它知道这是一个

00:26:27.896 --> 00:26:28.776 A:middle
以字节计的大小

00:26:28.776 --> 00:26:29.866 A:middle
它给了我们一个精准的计算

00:26:29.866 --> 00:26:31.986 A:middle
结果为 80MB

00:26:32.036 --> 00:26:33.626 A:middle
所以我们一共下载了

00:26:33.656 --> 00:26:34.856 A:middle
80MB 的图像数据

00:26:35.046 --> 00:26:37.666 A:middle
现在你在这里可以

00:26:37.666 --> 00:26:38.186 A:middle
看到不同的列

00:26:38.186 --> 00:26:39.196 A:middle
有最小值 最大值 平均值

00:26:39.196 --> 00:26:40.166 A:middle
还有标准差

00:26:40.256 --> 00:26:41.776 A:middle
所以这是一个很好的方式

00:26:41.846 --> 00:26:43.976 A:middle
来查看你通过

00:26:43.976 --> 00:26:47.706 A:middle
元数据传递的值的统计分析

00:26:48.306 --> 00:26:49.296 A:middle
Shane 刚刚提到

00:26:49.296 --> 00:26:51.766 A:middle
signposts 非常轻量

00:26:52.056 --> 00:26:54.596 A:middle
这是完全正确的

00:26:54.806 --> 00:26:55.916 A:middle
除非你像我 刚刚跑 Instruments

00:26:55.916 --> 00:26:56.816 A:middle
那样运行 Instruments

00:26:57.016 --> 00:27:00.056 A:middle
在 immediate 模式下

00:26:57.016 --> 00:27:00.056 A:middle
在 immediate 模式下

00:27:00.056 --> 00:27:01.166 A:middle
即默认录制模式下

00:27:01.166 --> 00:27:03.126 A:middle
Instruments 几乎是在

00:27:03.126 --> 00:27:06.416 A:middle
实时展现和记录数据

00:27:07.056 --> 00:27:07.926 A:middle
所以当它进入到

00:27:07.926 --> 00:27:09.556 A:middle
immediate 模式录制时

00:27:09.626 --> 00:27:11.636 A:middle
所有的 signposts 都必须直接

00:27:11.636 --> 00:27:12.826 A:middle
发给 Instruments

00:27:13.326 --> 00:27:15.106 A:middle
我们就避开了

00:27:15.106 --> 00:27:16.176 A:middle
在操作系统中

00:27:16.176 --> 00:27:18.486 A:middle
缓冲能获得的优化

00:27:19.196 --> 00:27:21.966 A:middle
现在，通过我们的 signposts

00:27:21.966 --> 00:27:23.576 A:middle
通过我们的 signposts App

00:27:24.036 --> 00:27:25.546 A:middle
我们并不会真正创建足够多的

00:27:25.546 --> 00:27:27.176 A:middle
时间间隔使我们注意到花销

00:27:27.176 --> 00:27:29.186 A:middle
但是如果你有一个游戏引擎

00:27:29.186 --> 00:27:30.156 A:middle
并且你想要每秒发送

00:27:30.156 --> 00:27:32.146 A:middle
数千个 signpost

00:27:32.146 --> 00:27:34.836 A:middle
这时开销就会开始累积变多

00:27:35.266 --> 00:27:37.336 A:middle
所以为了避免这个问题

00:27:37.756 --> 00:27:39.376 A:middle
你可以在你

00:27:39.376 --> 00:27:41.176 A:middle
录制之前改变

00:27:41.616 --> 00:27:42.736 A:middle
Instruments 的录制模式

00:27:43.286 --> 00:27:45.016 A:middle
你可以通过

00:27:45.016 --> 00:27:46.956 A:middle
下拉录制按钮

00:27:46.956 --> 00:27:49.266 A:middle
然后选择录制选项来实现

00:27:50.706 --> 00:27:52.496 A:middle
在这块全局选项

00:27:52.646 --> 00:27:55.326 A:middle
的区域中你可以看到

00:27:55.326 --> 00:27:57.176 A:middle
我们选中了 immediate 模式

00:27:57.496 --> 00:27:58.976 A:middle
我们可以把它变成

00:27:58.976 --> 00:27:59.876 A:middle
last 5 second 模式

00:28:00.436 --> 00:28:01.656 A:middle
这种模式通常被称为

00:28:01.656 --> 00:28:02.376 A:middle
窗口模式

00:28:03.206 --> 00:28:04.736 A:middle
它告诉操作系统

00:28:04.736 --> 00:28:05.416 A:middle
和录制技术

00:28:05.416 --> 00:28:07.416 A:middle
我们不需要

00:28:07.416 --> 00:28:08.306 A:middle
每一个事件

00:28:08.306 --> 00:28:09.386 A:middle
我们只想要最后五秒

00:28:09.386 --> 00:28:10.046 A:middle
的内容

00:28:10.366 --> 00:28:11.786 A:middle
当你这么做时

00:28:11.786 --> 00:28:12.946 A:middle
Instruments 会让开

00:28:12.946 --> 00:28:15.416 A:middle
然后让操作系统来做

00:28:15.836 --> 00:28:16.966 A:middle
这是一个非常常见的模式

00:28:16.966 --> 00:28:18.296 A:middle
我们将它用于系统追踪

00:28:18.296 --> 00:28:19.976 A:middle
我们将它用于 metal 系统追踪

00:28:19.976 --> 00:28:21.806 A:middle
和新的游戏性能模板

00:28:22.276 --> 00:28:23.736 A:middle
所以这是一种在你的 App 中

00:28:23.736 --> 00:28:25.776 A:middle
寻找卡顿和挂机的非常常见的方式

00:28:25.846 --> 00:28:26.646 A:middle
好了

00:28:27.256 --> 00:28:30.916 A:middle
这就是我们的 os_signpost

00:28:30.996 --> 00:28:31.426 A:middle
instrument

00:28:32.756 --> 00:28:34.756 A:middle
现在让我们来说说 points of interest

00:28:36.046 --> 00:28:38.216 A:middle
现在如果我们回到

00:28:38.326 --> 00:28:39.476 A:middle
Trailblazer App

00:28:40.216 --> 00:28:43.176 A:middle
你注意到当我点击一个路线

00:28:43.176 --> 00:28:45.166 A:middle
它就显示详细内容

00:28:46.026 --> 00:28:47.326 A:middle
如果我返回点一个

00:28:47.326 --> 00:28:48.676 A:middle
不同的路线它就显示

00:28:48.676 --> 00:28:49.316 A:middle
不同的详细信息

00:28:50.476 --> 00:28:53.186 A:middle
如果我们能追踪

00:28:53.326 --> 00:28:55.026 A:middle
每一次详细信息界面的

00:28:55.026 --> 00:28:56.516 A:middle
的出现那就好了

00:28:56.896 --> 00:28:57.986 A:middle
因为这样我们就能分辨出

00:28:57.986 --> 00:28:59.266 A:middle
我们的用户在试图做什么

00:28:59.266 --> 00:29:00.856 A:middle
我们知道用户在 App 中

00:28:59.266 --> 00:29:00.856 A:middle
我们知道用户在 App 中

00:29:00.856 --> 00:29:01.606 A:middle
所处位置

00:29:02.626 --> 00:29:04.466 A:middle
你当然可以用一个 signpost

00:29:04.466 --> 00:29:07.246 A:middle
来做这个但是你必须在

00:29:07.296 --> 00:29:08.526 A:middle
os_signpost instrument

00:29:08.526 --> 00:29:10.366 A:middle
里拖动并记录下 App 中

00:29:10.366 --> 00:29:12.146 A:middle
所有 signpost 的活动

00:29:12.146 --> 00:29:14.316 A:middle
它某种程度上降低了

00:29:14.316 --> 00:29:16.456 A:middle
这些用户使用事件

00:29:16.456 --> 00:29:17.086 A:middle
的重要性

00:29:17.756 --> 00:29:19.386 A:middle
所以我们允许你

00:29:19.386 --> 00:29:20.826 A:middle
将它们弄到

00:29:20.936 --> 00:29:21.796 A:middle
points of interest 中去

00:29:22.566 --> 00:29:23.746 A:middle
现在如果我到代码里

00:29:23.746 --> 00:29:26.636 A:middle
查看细节控制器

00:29:26.636 --> 00:29:28.406 A:middle
看我们的 viewDidAppear 方法

00:29:28.406 --> 00:29:31.006 A:middle
你可以看到我正在发布

00:29:31.006 --> 00:29:32.426 A:middle
我正在创建一个 os_signpost 事件

00:29:33.076 --> 00:29:34.296 A:middle
显示 “Detail Appeared”

00:29:34.696 --> 00:29:36.136 A:middle
以及细节的名称

00:29:37.186 --> 00:29:38.206 A:middle
这被发送给我们创建的

00:29:38.206 --> 00:29:39.486 A:middle
一个特别的日志句柄

00:29:39.486 --> 00:29:40.516 A:middle
叫 points of interest

00:29:40.986 --> 00:29:42.116 A:middle
创建它的方式是

00:29:42.556 --> 00:29:43.836 A:middle
创建一个带子系统

00:29:43.946 --> 00:29:46.166 A:middle
标识符和系统

00:29:46.256 --> 00:29:47.976 A:middle
points of interest 类别的

00:29:47.976 --> 00:29:48.466 A:middle
日志句柄

00:29:48.666 --> 00:29:49.946 A:middle
这是一个

00:29:49.946 --> 00:29:51.196 A:middle
Instruments 会查找的特殊类别

00:29:51.656 --> 00:29:52.896 A:middle
当它看到这里的 points

00:29:53.246 --> 00:29:55.746 A:middle
它会把它们放到 points

00:29:55.786 --> 00:29:57.196 A:middle
of interest instrument 里

00:29:57.336 --> 00:29:59.856 A:middle
如果我们回到这里然后点击

00:29:59.856 --> 00:30:01.636 A:middle
time profile 你可以看到

00:29:59.856 --> 00:30:01.636 A:middle
time profile 你可以看到

00:30:01.636 --> 00:30:03.636 A:middle
这里自动包含了

00:30:03.636 --> 00:30:04.976 A:middle
points of interest instrument

00:30:05.146 --> 00:30:08.706 A:middle
如果我们录制下来

00:30:08.936 --> 00:30:11.246 A:middle
然后进行同样的基础操作

00:30:11.246 --> 00:30:12.636 A:middle
我们进入 Matt Davis Trail

00:30:12.636 --> 00:30:13.426 A:middle
然后我们回到

00:30:13.426 --> 00:30:15.536 A:middle
Skyline Trail 然后再回来

00:30:15.536 --> 00:30:17.896 A:middle
我们再做一次为了测得更准

00:30:19.366 --> 00:30:20.856 A:middle
现在当你返回到

00:30:21.236 --> 00:30:25.176 A:middle
Instruments 你可以看到

00:30:25.176 --> 00:30:26.276 A:middle
这些 points of interest

00:30:26.606 --> 00:30:27.806 A:middle
突出显示

00:30:27.806 --> 00:30:29.776 A:middle
所以你能看到

00:30:29.776 --> 00:30:31.236 A:middle
在你 App 中 你的用户所处位置

00:30:31.236 --> 00:30:32.406 A:middle
你可以将这个和其他

00:30:32.406 --> 00:30:33.316 A:middle
性能数据关联

00:30:33.986 --> 00:30:34.986 A:middle
所以 points of interest

00:30:34.986 --> 00:30:38.626 A:middle
可以让你 从你的 App 中

00:30:38.626 --> 00:30:40.546 A:middle
选择一些最重要的

00:30:40.546 --> 00:30:42.016 A:middle
兴趣点然后把它们

00:30:42.016 --> 00:30:44.036 A:middle
提供给你团队中

00:30:44.036 --> 00:30:45.446 A:middle
或者开发社区中的

00:30:45.446 --> 00:30:46.306 A:middle
每一位开发者

00:30:46.566 --> 00:30:47.736 A:middle
然后他们可以立即看到

00:30:47.736 --> 00:30:48.596 A:middle
points of interest

00:30:49.956 --> 00:30:50.156 A:middle
好了

00:30:50.156 --> 00:30:51.756 A:middle
这就是 points of interest

00:30:51.756 --> 00:30:53.596 A:middle
instrument 以及如何从

00:30:53.596 --> 00:30:54.956 A:middle
signposts 中创建

00:30:54.956 --> 00:30:55.646 A:middle
points of interest

00:30:56.966 --> 00:30:58.926 A:middle
另一个 Instruments 10 中

00:30:59.276 --> 00:31:01.006 A:middle
很好的功能是

00:30:59.276 --> 00:31:01.006 A:middle
很好的功能是

00:31:01.006 --> 00:31:03.026 A:middle
你可以创建自定义的 instrument

00:31:03.576 --> 00:31:05.096 A:middle
为了向大家展示

00:31:05.096 --> 00:31:06.456 A:middle
在 os_signpost 可以对自定义

00:31:06.456 --> 00:31:08.816 A:middle
instrument 做什么 我们创建了

00:31:08.816 --> 00:31:11.256 A:middle
作为项目的一部分

00:31:11.256 --> 00:31:12.836 A:middle
一个 Trailblazer instruments 包

00:31:13.916 --> 00:31:16.226 A:middle
我现在要构建并运行

00:31:16.306 --> 00:31:20.306 A:middle
你可以看到当我们在做时

00:31:20.586 --> 00:31:21.996 A:middle
我们启动了 Instruments

00:31:21.996 --> 00:31:24.566 A:middle
的一个独立备份

00:31:24.566 --> 00:31:25.796 A:middle
里面有我们刚建的包

00:31:25.796 --> 00:31:28.796 A:middle
如果我们将版本调出来

00:31:28.796 --> 00:31:30.666 A:middle
可以看到我们现在

00:31:30.726 --> 00:31:32.356 A:middle
有一个 Trailblazer Networking

00:31:32.856 --> 00:31:33.826 A:middle
轨迹模板

00:31:33.826 --> 00:31:36.296 A:middle
如果我们选中它可以看到

00:31:36.456 --> 00:31:38.046 A:middle
我们有一个 Trailblazer

00:31:38.046 --> 00:31:39.616 A:middle
Networking instrument

00:31:39.616 --> 00:31:40.246 A:middle
在我们的轨迹文档中

00:31:41.546 --> 00:31:43.266 A:middle
让我们开始录制

00:31:43.326 --> 00:31:44.226 A:middle
然后看看我们的

00:31:44.226 --> 00:31:46.666 A:middle
points of interest 的区别

00:31:46.666 --> 00:31:48.176 A:middle
不好意思 我们的 os_signpost

00:31:48.376 --> 00:31:49.736 A:middle
和自定义 instrument

00:31:49.736 --> 00:31:50.016 A:middle
可以做什么

00:31:50.106 --> 00:31:51.416 A:middle
我们要做同样的事情

00:31:51.956 --> 00:31:53.156 A:middle
我们开始基本的下载

00:31:53.246 --> 00:31:57.046 A:middle
然后回来

00:31:57.046 --> 00:31:58.086 A:middle
然后分析我们的轨迹

00:31:59.036 --> 00:32:00.656 A:middle
现在这里显示的

00:31:59.036 --> 00:32:00.656 A:middle
现在这里显示的

00:32:00.656 --> 00:32:01.646 A:middle
完全不一样

00:32:01.786 --> 00:32:04.676 A:middle
让我们放大 然后 观察

00:32:04.676 --> 00:32:07.076 A:middle
你看到在这里左边

00:32:07.076 --> 00:32:08.066 A:middle
我们没有按

00:32:08.066 --> 00:32:09.396 A:middle
signpost 名称细分

00:32:09.396 --> 00:32:10.906 A:middle
而是按下载的图像

00:32:11.416 --> 00:32:13.466 A:middle
现在我们可以看到图二

00:32:13.656 --> 00:32:17.406 A:middle
是在这里和这里下载的

00:32:18.256 --> 00:32:20.456 A:middle
我们在每处标记了

00:32:20.716 --> 00:32:21.896 A:middle
下载的大小

00:32:21.896 --> 00:32:22.386 A:middle
单位是兆

00:32:22.996 --> 00:32:25.546 A:middle
我们把他们标成红色

00:32:25.546 --> 00:32:27.576 A:middle
如果下载大小大于

00:32:27.576 --> 00:32:28.896 A:middle
3 1/2 MB 的话

00:32:29.656 --> 00:32:31.846 A:middle
这是我们创建的自定义图像

00:32:31.846 --> 00:32:33.636 A:middle
是自定义 instrument 的一部分

00:32:33.956 --> 00:32:35.536 A:middle
现在在下面我们还

00:32:35.536 --> 00:32:36.446 A:middle
定义了一些细节

00:32:36.536 --> 00:32:38.516 A:middle
这里有一张非常简洁的

00:32:38.516 --> 00:32:39.716 A:middle
下载任务表

00:32:39.836 --> 00:32:41.266 A:middle
并且你可以通过它们

00:32:41.266 --> 00:32:42.516 A:middle
来浏览轨迹

00:32:43.476 --> 00:32:46.116 A:middle
我们还有 让我看看

00:32:46.116 --> 00:32:47.796 A:middle
能不能把它弄回这里来

00:32:47.996 --> 00:32:50.846 A:middle
我们还有一个对所有下载

00:32:50.846 --> 00:32:51.466 A:middle
的概要

00:32:51.536 --> 00:32:52.096 A:middle
非常简单

00:32:52.506 --> 00:32:54.016 A:middle
我们只想加起来求和

00:32:54.226 --> 00:32:56.136 A:middle
我们还有个很棒的东西

00:32:56.136 --> 00:32:57.266 A:middle
叫 Timeslice

00:32:58.026 --> 00:32:59.806 A:middle
在 Timeslice 视图中

00:33:00.226 --> 00:33:01.746 A:middle
我们这么做是想要

00:33:01.746 --> 00:33:02.716 A:middle
回答我之前提出的问题

00:33:02.716 --> 00:33:04.146 A:middle
这些东西中

00:33:04.146 --> 00:33:05.636 A:middle
哪些实际上是并行

00:33:05.636 --> 00:33:06.096 A:middle
运行的

00:33:06.676 --> 00:33:07.656 A:middle
如果你想看看

00:33:07.656 --> 00:33:08.506 A:middle
并行运行的

00:33:08.506 --> 00:33:09.736 A:middle
时间段你只需要

00:33:09.736 --> 00:33:11.876 A:middle
拖动这里的

00:33:11.876 --> 00:33:13.216 A:middle
的探头然后你就可以

00:33:13.216 --> 00:33:14.886 A:middle
看到在任一时间点上

00:33:15.276 --> 00:33:16.976 A:middle
和该探头相交

00:33:16.976 --> 00:33:18.196 A:middle
的部分

00:33:18.706 --> 00:33:20.016 A:middle
所以这是一个很好的

00:33:20.016 --> 00:33:21.556 A:middle
但不同的检查 signpost 数据

00:33:21.556 --> 00:33:21.746 A:middle
的方法

00:33:23.036 --> 00:33:24.556 A:middle
如果你在和别人

00:33:24.556 --> 00:33:26.056 A:middle
一起做一个项目或者

00:33:26.056 --> 00:33:26.776 A:middle
你是开发者社区的

00:33:26.776 --> 00:33:28.606 A:middle
一员那么使用自定义

00:33:28.606 --> 00:33:29.646 A:middle
instrument 能够很好地

00:33:29.646 --> 00:33:31.606 A:middle
获取 signpost 数据

00:33:31.606 --> 00:33:33.336 A:middle
改造它 这样其他人

00:33:33.386 --> 00:33:35.286 A:middle
就可以直接使用并

00:33:35.286 --> 00:33:36.126 A:middle
不需要懂得你代码的

00:33:36.126 --> 00:33:37.956 A:middle
运行细节就能理解

00:33:37.956 --> 00:33:39.216 A:middle
所以它们是一个非常重要的功能

00:33:39.576 --> 00:33:42.746 A:middle
好消息是要创建

00:33:42.746 --> 00:33:44.246 A:middle
这样的一个 instrument

00:33:44.956 --> 00:33:46.926 A:middle
全部软件包定义

00:33:46.926 --> 00:33:51.636 A:middle
只有 115 行 XML

00:33:51.716 --> 00:33:53.386 A:middle
所以自定义 instruments

00:33:53.386 --> 00:33:55.236 A:middle
非常有表现力和强大

00:33:55.236 --> 00:33:56.506 A:middle
但又非常简单

00:33:57.466 --> 00:34:00.226 A:middle
这就是关于我们演示的总结

00:33:57.466 --> 00:34:00.226 A:middle
这就是关于我们演示的总结

00:34:01.516 --> 00:34:08.536 A:middle
[ 掌声 ]

00:34:09.036 --> 00:34:10.666 A:middle
在今天的会议中

00:34:10.666 --> 00:34:13.065 A:middle
我们查看了 signpost API

00:34:13.065 --> 00:34:14.545 A:middle
我们向你们展示了如何用它

00:34:14.896 --> 00:34:16.216 A:middle
在你 App 中标注

00:34:16.216 --> 00:34:17.536 A:middle
值得注意的行为

00:34:17.536 --> 00:34:18.235 A:middle
和时间段

00:34:19.005 --> 00:34:20.126 A:middle
我们展示了如何收集

00:34:20.126 --> 00:34:21.835 A:middle
元数据并将元数据

00:34:22.076 --> 00:34:23.065 A:middle
放入 Instruments 来

00:34:23.065 --> 00:34:24.826 A:middle
可视化和做分析

00:34:25.406 --> 00:34:27.916 A:middle
我们展示了如何在

00:34:28.246 --> 00:34:29.755 A:middle
os_signpost 中合并

00:34:29.755 --> 00:34:32.646 A:middle
自定义 instrument 来创建

00:34:32.786 --> 00:34:34.856 A:middle
更好的 signpost 数据展示

00:34:36.056 --> 00:34:38.626 A:middle
所有的这些总结下来

00:34:38.686 --> 00:34:41.085 A:middle
就是我们可以给你

00:34:41.085 --> 00:34:42.346 A:middle
你需要用来

00:34:42.346 --> 00:34:46.106 A:middle
提升 App 性能的信息

00:34:46.485 --> 00:34:47.856 A:middle
所以我们很高兴看到

00:34:47.856 --> 00:34:49.946 A:middle
你使用 os_signpost 和

00:34:49.946 --> 00:34:51.866 A:middle
Instruments 来一块提升

00:34:51.866 --> 00:34:53.656 A:middle
你 App 的用户体验

00:34:54.985 --> 00:34:56.576 A:middle
这就是今天的内容

00:34:57.016 --> 00:34:58.856 A:middle
想要了解更多信息

00:34:58.856 --> 00:35:00.946 A:middle
你可以来实验室找我们

00:34:58.856 --> 00:35:00.946 A:middle
你可以来实验室找我们

00:35:00.946 --> 00:35:03.546 A:middle
技术实验室 8 今天下午三点

00:35:03.546 --> 00:35:05.896 A:middle
同时明天我还有会议 410

00:35:05.896 --> 00:35:06.996 A:middle
创建自定义 instrument

00:35:07.076 --> 00:35:08.876 A:middle
我会讲讲

00:35:08.876 --> 00:35:10.106 A:middle
自定义 instrument

00:35:10.106 --> 00:35:11.686 A:middle
的工作原理并向你们

00:35:11.686 --> 00:35:13.156 A:middle
展示我们如何创建的 Trailblazer

00:35:13.156 --> 00:35:14.836 A:middle
networking instrument 包

00:35:15.696 --> 00:35:16.386 A:middle
非常感谢

00:35:16.386 --> 00:35:17.936 A:middle
享受剩下的会议吧

00:35:18.516 --> 00:35:24.480 A:middle
[ 掌声 ]
