WEBVTT

00:00:06.516 --> 00:00:14.500 A:middle
[ 音乐 ]

00:00:18.516 --> 00:00:24.456 A:middle
[ 掌声 ]

00:00:24.956 --> 00:00:25.896 A:middle
&gt;&gt; 早上好

00:00:26.406 --> 00:00:28.416 A:middle
感谢你们今天

00:00:28.706 --> 00:00:30.316 A:middle
来到这里了解

00:00:30.516 --> 00:00:32.195 A:middle
Cocoa Touch 的新功能

00:00:33.456 --> 00:00:34.816 A:middle
一般情况下

00:00:34.816 --> 00:00:35.816 A:middle
Eliza 之后会上台讲解

00:00:35.816 --> 00:00:37.556 A:middle
不过今年

00:00:37.556 --> 00:00:38.846 A:middle
只有我为大家进行讲解

00:00:39.386 --> 00:00:41.216 A:middle
她在未来的几年里会回来的

00:00:41.216 --> 00:00:42.626 A:middle
别担心

00:00:43.046 --> 00:00:44.236 A:middle
今天我们主要

00:00:44.556 --> 00:00:46.046 A:middle
从三个类别

00:00:46.046 --> 00:00:46.596 A:middle
进行讨论

00:00:47.656 --> 00:00:50.436 A:middle
首先是框架更新

00:00:50.436 --> 00:00:52.556 A:middle
比如性能和安全

00:00:52.556 --> 00:00:56.476 A:middle
然后是在 SDK（软件开发包）中

00:00:56.476 --> 00:00:57.876 A:middle
不同 API 的

00:00:57.876 --> 00:01:00.056 A:middle
API 功能增强

00:00:57.876 --> 00:01:00.056 A:middle
API 功能增强

00:01:00.056 --> 00:01:01.566 A:middle
包括通知和信息

00:01:02.566 --> 00:01:05.086 A:middle
最后是 Siri 捷径

00:01:05.816 --> 00:01:07.126 A:middle
那我们开始

00:01:07.196 --> 00:01:09.776 A:middle
第一个话题性能更新

00:01:11.106 --> 00:01:12.716 A:middle
我们要讨论

00:01:12.716 --> 00:01:14.506 A:middle
三个领域的性能

00:01:14.506 --> 00:01:18.546 A:middle
滚动 内存和自动布局

00:01:19.786 --> 00:01:21.726 A:middle
开始之前

00:01:21.726 --> 00:01:23.106 A:middle
很重要的是

00:01:23.106 --> 00:01:24.146 A:middle
记住一点关于滚动的

00:01:24.146 --> 00:01:25.496 A:middle
背景信息

00:01:27.796 --> 00:01:30.076 A:middle
iOS 里的滚动

00:01:30.156 --> 00:01:31.836 A:middle
大多遵从一个

00:01:31.876 --> 00:01:32.236 A:middle
固定模式

00:01:32.876 --> 00:01:34.536 A:middle
我们加载内容

00:01:34.536 --> 00:01:36.336 A:middle
显示在视图里

00:01:36.336 --> 00:01:38.096 A:middle
然后移动这些内容

00:01:38.846 --> 00:01:39.666 A:middle
当我们滑动的时候

00:01:39.666 --> 00:01:41.546 A:middle
大多数帧

00:01:41.546 --> 00:01:43.036 A:middle
都很容易生成

00:01:43.036 --> 00:01:44.376 A:middle
因为我们不用加载任何

00:01:44.376 --> 00:01:44.656 A:middle
新的东西

00:01:45.656 --> 00:01:47.226 A:middle
但是偶尔

00:01:47.226 --> 00:01:49.506 A:middle
当打开一个新的视图时

00:01:49.506 --> 00:01:53.206 A:middle
第一帧相对于其他

00:01:53.206 --> 00:01:54.816 A:middle
容易生成的帧

00:01:54.816 --> 00:01:55.776 A:middle
生成更高耗

00:01:56.286 --> 00:02:00.476 A:middle
当然一旦第一帧生成

00:01:56.286 --> 00:02:00.476 A:middle
当然一旦第一帧生成

00:02:00.526 --> 00:02:02.246 A:middle
我们再滑动内容

00:02:02.246 --> 00:02:03.696 A:middle
这时 CPU 的工作量

00:02:03.696 --> 00:02:05.236 A:middle
又变小了

00:02:05.236 --> 00:02:06.806 A:middle
和一般滑动差不多

00:02:07.386 --> 00:02:11.676 A:middle
为什么那个第一帧

00:02:11.676 --> 00:02:14.116 A:middle
会比别的帧更高耗

00:02:14.776 --> 00:02:18.096 A:middle
让我们从 UITableView 的角度看一下

00:02:18.096 --> 00:02:22.066 A:middle
但其实这个和 UICollectionView

00:02:22.066 --> 00:02:23.226 A:middle
或者其他相似的

00:02:23.226 --> 00:02:24.786 A:middle
自定义视图

00:02:24.786 --> 00:02:25.156 A:middle
都是一样的

00:02:25.866 --> 00:02:28.706 A:middle
这一帧的工作

00:02:28.756 --> 00:02:30.386 A:middle
开始于当你

00:02:30.386 --> 00:02:32.296 A:middle
在 TableView 执行

00:02:32.396 --> 00:02:33.616 A:middle
cellForRowAt IndexPath

00:02:33.676 --> 00:02:34.306 A:middle
的委托方法时

00:02:34.906 --> 00:02:39.316 A:middle
首先选择想显示的 Cell

00:02:39.746 --> 00:02:40.786 A:middle
我们要试着让它

00:02:40.856 --> 00:02:44.666 A:middle
从重复使用序列中脱离出来

00:02:44.666 --> 00:02:45.966 A:middle
如果它本身不在序列中

00:02:45.966 --> 00:02:46.936 A:middle
我们需要

00:02:46.936 --> 00:02:48.326 A:middle
做一些内存分配

00:02:48.326 --> 00:02:50.176 A:middle
来做好准备

00:02:51.036 --> 00:02:52.196 A:middle
有了 Cell 之后 我们

00:02:52.196 --> 00:02:53.446 A:middle
会用你的模型数据

00:02:53.446 --> 00:02:54.316 A:middle
来填充这个 Cell

00:02:54.916 --> 00:02:56.496 A:middle
这一步有多高耗

00:02:56.496 --> 00:02:59.496 A:middle
取决于你的 App

00:02:59.496 --> 00:03:01.476 A:middle
但可能包含很多

00:02:59.496 --> 00:03:01.476 A:middle
但可能包含很多

00:03:01.476 --> 00:03:02.856 A:middle
高耗的操作

00:03:02.896 --> 00:03:05.416 A:middle
比如读取文件

00:03:05.416 --> 00:03:06.916 A:middle
从数据库加载数据

00:03:06.916 --> 00:03:07.516 A:middle
或其他类似的事情

00:03:07.936 --> 00:03:09.056 A:middle
所以你应该

00:03:09.056 --> 00:03:10.536 A:middle
看一下你的 App 里

00:03:10.536 --> 00:03:13.396 A:middle
在这一方面的消耗

00:03:13.396 --> 00:03:14.616 A:middle
一般来说很大一部分

00:03:14.926 --> 00:03:15.686 A:middle
会在这里

00:03:17.276 --> 00:03:18.956 A:middle
看到这里

00:03:18.956 --> 00:03:19.936 A:middle
你可能以为

00:03:19.936 --> 00:03:21.766 A:middle
高耗工作就此结束

00:03:21.766 --> 00:03:23.006 A:middle
但是当你从这个方法返回

00:03:23.006 --> 00:03:24.316 A:middle
为了让 Cell

00:03:24.376 --> 00:03:25.956 A:middle
显示在屏幕上

00:03:25.956 --> 00:03:27.506 A:middle
其实有更多的工作要做

00:03:28.206 --> 00:03:29.786 A:middle
所以 接下来

00:03:29.786 --> 00:03:31.306 A:middle
我们要把所有内容

00:03:31.306 --> 00:03:31.836 A:middle
布局到 Cell 中

00:03:32.336 --> 00:03:33.936 A:middle
我们要调整视图大小

00:03:33.936 --> 00:03:35.686 A:middle
并把它们放到正确的位置

00:03:36.086 --> 00:03:37.276 A:middle
这一步可能会

00:03:37.276 --> 00:03:38.476 A:middle
消耗我们的

00:03:38.476 --> 00:03:39.736 A:middle
很多时间

00:03:39.736 --> 00:03:41.176 A:middle
因为它包含一些

00:03:41.176 --> 00:03:42.946 A:middle
其他的高耗操作

00:03:43.036 --> 00:03:44.666 A:middle
比如 测量文本

00:03:45.296 --> 00:03:46.886 A:middle
当大小和位置

00:03:46.886 --> 00:03:48.666 A:middle
都调整好之后

00:03:48.666 --> 00:03:50.736 A:middle
就要使用绘制命令

00:03:50.736 --> 00:03:52.276 A:middle
来生成所有

00:03:52.276 --> 00:03:54.116 A:middle
需要被绘制的内容

00:03:54.116 --> 00:03:55.606 A:middle
我们要调用这个 Cell 里

00:03:55.606 --> 00:03:57.746 A:middle
所有的子视图的 draw Rect

00:03:58.276 --> 00:03:59.816 A:middle
重申一下

00:03:59.816 --> 00:04:01.216 A:middle
这一步可能很费时

00:03:59.816 --> 00:04:01.216 A:middle
这一步可能很费时

00:04:01.216 --> 00:04:03.036 A:middle
因为我们需要做

00:04:03.036 --> 00:04:04.426 A:middle
像绘制文本这样的工作

00:04:05.536 --> 00:04:08.506 A:middle
总体而言 在整个代码中

00:04:08.646 --> 00:04:11.436 A:middle
有很多要做的工作

00:04:11.436 --> 00:04:13.696 A:middle
而且都需要在短时间里完成

00:04:14.126 --> 00:04:15.656 A:middle
在我们 60 赫兹的设备上

00:04:15.656 --> 00:04:17.565 A:middle
你只有 16 毫秒

00:04:17.565 --> 00:04:19.046 A:middle
来完成所有的工作

00:04:19.046 --> 00:04:20.726 A:middle
确保不会丢帧

00:04:20.726 --> 00:04:22.296 A:middle
并流畅滑动

00:04:23.056 --> 00:04:25.346 A:middle
在 120 赫兹的 iPad

00:04:25.346 --> 00:04:27.836 A:middle
iPad Pro 上

00:04:27.836 --> 00:04:29.696 A:middle
你只有 8 毫秒来完成所有工作

00:04:30.166 --> 00:04:31.736 A:middle
所以真的是

00:04:31.816 --> 00:04:32.956 A:middle
越快越好

00:04:34.226 --> 00:04:36.126 A:middle
为此在 iOS 10 里

00:04:36.326 --> 00:04:37.796 A:middle
我们引入了

00:04:37.836 --> 00:04:40.096 A:middle
Cell 预读取 API

00:04:40.096 --> 00:04:42.186 A:middle
这个预读取 API

00:04:42.256 --> 00:04:43.906 A:middle
就是帮助做一些工作

00:04:43.906 --> 00:04:45.756 A:middle
用模型数据生成 Cell

00:04:45.826 --> 00:04:47.086 A:middle
并把需要在

00:04:47.086 --> 00:04:48.746 A:middle
短时间里做到的

00:04:48.746 --> 00:04:50.916 A:middle
这个部分的内容

00:04:50.916 --> 00:04:52.646 A:middle
更早地开始

00:04:52.646 --> 00:04:53.796 A:middle
并在后台线程做

00:04:53.796 --> 00:04:55.386 A:middle
这样可以和其他工作

00:04:55.386 --> 00:04:57.036 A:middle
异步进行

00:04:57.036 --> 00:04:58.656 A:middle
尤其是我们提到过的

00:04:58.656 --> 00:04:59.286 A:middle
低耗滚动帧

00:05:00.586 --> 00:05:02.296 A:middle
采用这个 API

00:05:02.296 --> 00:05:02.676 A:middle
很容易 只是一个

00:05:03.076 --> 00:05:04.736 A:middle
UITableViewDataSourcePrefetching

00:05:04.736 --> 00:05:06.976 A:middle
protocol

00:05:06.976 --> 00:05:08.786 A:middle
只有两个方法

00:05:08.786 --> 00:05:10.346 A:middle
其实只有其中一个是必须的

00:05:10.916 --> 00:05:12.196 A:middle
主要目的是

00:05:12.236 --> 00:05:13.536 A:middle
把一些高耗工作

00:05:13.536 --> 00:05:14.956 A:middle
例如从文件中加载内容

00:05:14.956 --> 00:05:17.626 A:middle
或者读取数据库 放在这里

00:05:17.626 --> 00:05:19.416 A:middle
这样你就不用主动操作了

00:05:19.636 --> 00:05:21.436 A:middle
当你的 Cell 要显示时

00:05:21.596 --> 00:05:22.956 A:middle
你的数据已经准备就绪

00:05:23.126 --> 00:05:28.346 A:middle
大多数情况下

00:05:28.406 --> 00:05:31.346 A:middle
它都很有帮助

00:05:31.346 --> 00:05:34.546 A:middle
但在一些运行 iOS 12 的 App 里

00:05:34.546 --> 00:05:36.456 A:middle
我们发现

00:05:36.516 --> 00:05:38.546 A:middle
它造成了一些问题 而不是提供帮助

00:05:39.146 --> 00:05:40.236 A:middle
让我们来看一看

00:05:40.236 --> 00:05:42.846 A:middle
是什么情况

00:05:43.126 --> 00:05:45.476 A:middle
这个例子是 我们记录的

00:05:45.476 --> 00:05:47.156 A:middle
在 iPhone 6 Plus 上

00:05:47.156 --> 00:05:48.236 A:middle
滑动的情况

00:05:49.176 --> 00:05:50.986 A:middle
上面的竖线

00:05:51.046 --> 00:05:53.166 A:middle
代表我们希望

00:05:53.166 --> 00:05:54.166 A:middle
显示的帧

00:05:55.006 --> 00:05:56.506 A:middle
下面交替的深蓝和浅蓝

00:05:56.586 --> 00:05:58.246 A:middle
代表我们为了让

00:05:58.246 --> 00:05:59.896 A:middle
显示变化而

00:05:59.936 --> 00:06:01.096 A:middle
替换的帧

00:05:59.936 --> 00:06:01.096 A:middle
替换的帧

00:06:01.096 --> 00:06:03.556 A:middle
那个两格的浅蓝色区域

00:06:03.556 --> 00:06:08.386 A:middle
就表示 我们在两帧时间中

00:06:08.436 --> 00:06:09.196 A:middle
绘制了同一帧

00:06:09.946 --> 00:06:11.306 A:middle
在个性化定制的设备上

00:06:11.306 --> 00:06:12.556 A:middle
一但这种情况发生

00:06:12.556 --> 00:06:14.156 A:middle
看起来就像丢帧

00:06:14.246 --> 00:06:15.456 A:middle
或者滚动故障

00:06:15.456 --> 00:06:16.916 A:middle
这当然是我们试图避免的

00:06:18.276 --> 00:06:19.386 A:middle
那么到底发生什么了呢

00:06:20.276 --> 00:06:22.296 A:middle
这个红色部分

00:06:22.426 --> 00:06:23.996 A:middle
表示我们花费在

00:06:23.996 --> 00:06:24.716 A:middle
刚刚提到的

00:06:24.716 --> 00:06:26.126 A:middle
临界区域上的时间

00:06:26.126 --> 00:06:29.646 A:middle
所有的索引路径 布局和绘制

00:06:30.206 --> 00:06:31.396 A:middle
绘制这一帧

00:06:31.396 --> 00:06:33.166 A:middle
实际花费时间

00:06:33.166 --> 00:06:34.206 A:middle
比 16 毫秒要长

00:06:34.946 --> 00:06:36.456 A:middle
因为这个设备

00:06:36.456 --> 00:06:39.216 A:middle
只能在固定时间内

00:06:39.216 --> 00:06:41.966 A:middle
把新的一帧替换到屏幕上

00:06:41.966 --> 00:06:43.376 A:middle
一旦错过截止时间

00:06:43.376 --> 00:06:45.196 A:middle
我们只能把同一帧

00:06:45.196 --> 00:06:46.776 A:middle
显示两帧的时长

00:06:46.776 --> 00:06:47.526 A:middle
这可不太好

00:06:48.206 --> 00:06:49.746 A:middle
为什么会这样呢

00:06:49.746 --> 00:06:50.696 A:middle
在这个例子中

00:06:50.696 --> 00:06:52.136 A:middle
我们已经安装了

00:06:52.136 --> 00:06:53.706 A:middle
Cell 预读取方法

00:06:53.706 --> 00:06:55.106 A:middle
因此我们的数据应该

00:06:55.106 --> 00:06:55.606 A:middle
已经准备好了

00:06:55.806 --> 00:06:56.956 A:middle
理想状态下 这一步应该

00:06:56.956 --> 00:06:57.466 A:middle
完成得更快才对

00:06:58.346 --> 00:06:59.256 A:middle
如果我们再仔细

00:06:59.256 --> 00:07:00.286 A:middle
看一下这个记录

00:06:59.256 --> 00:07:00.286 A:middle
看一下这个记录

00:07:00.286 --> 00:07:01.066 A:middle
就会发现问题所在

00:07:01.866 --> 00:07:05.536 A:middle
这个 Cell 预读取 API 和请求

00:07:05.536 --> 00:07:06.826 A:middle
当前 Cell 的指令

00:07:06.826 --> 00:07:07.496 A:middle
同时被调用

00:07:08.056 --> 00:07:09.326 A:middle
调用的数据

00:07:09.326 --> 00:07:10.626 A:middle
不是为了现有 Cell 的

00:07:10.626 --> 00:07:12.976 A:middle
而是为了之后可能需要的 Cell

00:07:12.976 --> 00:07:14.706 A:middle
但是它们

00:07:14.736 --> 00:07:15.606 A:middle
被同时运行

00:07:15.976 --> 00:07:19.616 A:middle
所以现在 CPU 出现了冲突

00:07:19.616 --> 00:07:21.766 A:middle
是加载当前帧

00:07:21.766 --> 00:07:23.146 A:middle
还是加载现在并不需要

00:07:23.146 --> 00:07:24.276 A:middle
但以后需要的帧

00:07:25.736 --> 00:07:27.006 A:middle
因为这个冲突

00:07:27.006 --> 00:07:29.996 A:middle
两个任务都会花费更多时间

00:07:30.666 --> 00:07:33.126 A:middle
在 iOS 12 里

00:07:33.126 --> 00:07:35.226 A:middle
我们在安排

00:07:35.956 --> 00:07:37.166 A:middle
这些后台预读取操作时

00:07:37.166 --> 00:07:39.046 A:middle
更加智能

00:07:39.096 --> 00:07:40.226 A:middle
这两个步骤会接连发生

00:07:40.286 --> 00:07:42.056 A:middle
而不是同时发生

00:07:42.386 --> 00:07:43.776 A:middle
并产生冲突

00:07:44.136 --> 00:07:45.176 A:middle
这可以缩短

00:07:45.176 --> 00:07:47.626 A:middle
加载当前帧的时间

00:07:47.626 --> 00:07:50.886 A:middle
并且防止丢帧的出现

00:07:52.516 --> 00:07:56.456 A:middle
[ 掌声 ]

00:07:56.956 --> 00:07:58.016 A:middle
这个问题解决之后

00:07:58.016 --> 00:08:00.086 A:middle
我们继续测试 App

00:07:58.016 --> 00:08:00.086 A:middle
我们继续测试 App

00:08:00.086 --> 00:08:01.846 A:middle
会发现另外一个

00:08:01.846 --> 00:08:02.756 A:middle
比较意外的

00:08:02.756 --> 00:08:04.676 A:middle
引起丢帧的问题

00:08:05.336 --> 00:08:09.096 A:middle
我们发现 当设备没有在加载

00:08:09.396 --> 00:08:10.276 A:middle
没有任何后台活动时

00:08:10.276 --> 00:08:12.016 A:middle
我们只是在

00:08:12.016 --> 00:08:13.726 A:middle
前台 App 滑动

00:08:14.346 --> 00:08:15.916 A:middle
奇怪的是

00:08:15.916 --> 00:08:18.336 A:middle
这时可能

00:08:18.336 --> 00:08:19.896 A:middle
比起后台有少量工作时

00:08:19.896 --> 00:08:21.766 A:middle
丢失的帧更多

00:08:22.396 --> 00:08:23.866 A:middle
看起来并不合理

00:08:24.366 --> 00:08:25.636 A:middle
为了弄清这个问题

00:08:25.636 --> 00:08:27.306 A:middle
我们要再深挖一层

00:08:27.306 --> 00:08:33.096 A:middle
看一下 CPU 安排工作负荷时的行为

00:08:33.096 --> 00:08:35.196 A:middle
让我看一下另一个记录

00:08:36.306 --> 00:08:37.836 A:middle
这里有同样的问题

00:08:38.206 --> 00:08:39.836 A:middle
双格蓝色部分

00:08:39.836 --> 00:08:42.746 A:middle
让我们丢失一帧 或者就是丢失帧

00:08:43.506 --> 00:08:45.326 A:middle
这个表格显示

00:08:45.326 --> 00:08:47.086 A:middle
时段里 CPU 的性能

00:08:47.686 --> 00:08:49.176 A:middle
大部分低耗帧时

00:08:49.256 --> 00:08:50.876 A:middle
CPU 性能都维持在

00:08:50.876 --> 00:08:52.116 A:middle
比较低的水平

00:08:52.366 --> 00:08:53.806 A:middle
没有后台任务运行

00:08:53.806 --> 00:08:55.256 A:middle
我们只是在单纯的滚动

00:08:55.256 --> 00:08:56.896 A:middle
这正是我们希望的

00:08:56.896 --> 00:08:58.416 A:middle
因为当我们

00:08:58.416 --> 00:08:59.976 A:middle
不在做高耗工作时

00:08:59.976 --> 00:09:01.556 A:middle
我们希望尽量

00:08:59.976 --> 00:09:01.556 A:middle
我们希望尽量

00:09:01.606 --> 00:09:05.186 A:middle
让 CPU 保持在低水平来节省电量

00:09:05.526 --> 00:09:08.566 A:middle
这很好 但不太好的是

00:09:08.646 --> 00:09:11.226 A:middle
在性能提升前需要一点时间

00:09:11.426 --> 00:09:12.716 A:middle
昨天的演讲中

00:09:12.816 --> 00:09:14.566 A:middle
也提到过这个

00:09:14.726 --> 00:09:17.396 A:middle
等性能提升后

00:09:17.396 --> 00:09:18.876 A:middle
再加载我们

00:09:18.876 --> 00:09:20.126 A:middle
想显示的 Cell

00:09:20.126 --> 00:09:21.606 A:middle
已经太晚了

00:09:21.676 --> 00:09:24.016 A:middle
所以还是丢失了这一帧

00:09:24.806 --> 00:09:26.446 A:middle
现在 因为我们拥有

00:09:26.446 --> 00:09:27.616 A:middle
整个软件栈

00:09:27.616 --> 00:09:29.976 A:middle
在 iOS 12 里

00:09:29.976 --> 00:09:33.606 A:middle
我们把在高级别 UIKit 框架里

00:09:33.676 --> 00:09:36.446 A:middle
滚动时或当临界区域发生时

00:09:36.446 --> 00:09:38.016 A:middle
的所有信息

00:09:38.016 --> 00:09:41.296 A:middle
传递到低级别 CPU 性能控制器

00:09:41.326 --> 00:09:42.996 A:middle
这样就可以

00:09:43.116 --> 00:09:45.116 A:middle
更智能地分析

00:09:45.336 --> 00:09:46.546 A:middle
现有任务

00:09:46.756 --> 00:09:50.346 A:middle
并预测这些高峰何时出现

00:09:50.346 --> 00:09:51.926 A:middle
以及需要多少 CPU 性能

00:09:52.006 --> 00:09:53.626 A:middle
来赶上你 App

00:09:53.626 --> 00:09:55.596 A:middle
历史需求的截止时间

00:09:56.486 --> 00:09:58.136 A:middle
经过这个改变

00:09:58.716 --> 00:10:00.346 A:middle
当加载开始

00:09:58.716 --> 00:10:00.346 A:middle
当加载开始

00:10:00.346 --> 00:10:02.066 A:middle
我们就可以发现

00:10:02.066 --> 00:10:03.676 A:middle
我们更频繁更快地

00:10:03.676 --> 00:10:05.746 A:middle
让 CPU 提升到

00:10:05.806 --> 00:10:07.206 A:middle
需要的程度

00:10:07.206 --> 00:10:08.736 A:middle
来赶上截止时间

00:10:08.736 --> 00:10:10.976 A:middle
以防丢帧出现

00:10:12.286 --> 00:10:14.976 A:middle
这一改变让很多 iOS 的

00:10:14.976 --> 00:10:16.226 A:middle
滚动场景

00:10:16.226 --> 00:10:16.976 A:middle
得到了极大提升

00:10:20.956 --> 00:10:24.086 A:middle
你所有的 App

00:10:24.086 --> 00:10:27.146 A:middle
都可以免费得到提升

00:10:27.146 --> 00:10:28.526 A:middle
而且你不需要

00:10:28.526 --> 00:10:29.686 A:middle
进行任何更多操作

00:10:30.156 --> 00:10:31.266 A:middle
但是还有几件事情

00:10:31.266 --> 00:10:32.466 A:middle
你可以做 来确保

00:10:32.466 --> 00:10:34.136 A:middle
你充分利用了这些特性

00:10:34.996 --> 00:10:37.666 A:middle
首先如果你还没有采用这个

00:10:37.666 --> 00:10:39.116 A:middle
tableView Cell 预读取 API

00:10:39.116 --> 00:10:40.596 A:middle
或者 CollectionView 的 API

00:10:40.596 --> 00:10:42.096 A:middle
一定要先做这个

00:10:42.096 --> 00:10:43.336 A:middle
因为预先准备好数据

00:10:43.336 --> 00:10:44.596 A:middle
是能确保尽快

00:10:44.596 --> 00:10:46.836 A:middle
加载 Cell 的重要步骤

00:10:47.406 --> 00:10:50.506 A:middle
当然 分析

00:10:50.506 --> 00:10:51.856 A:middle
加载 Cell 的

00:10:51.856 --> 00:10:53.116 A:middle
整个临界区域

00:10:53.116 --> 00:10:55.186 A:middle
并尽量减少需求

00:10:55.186 --> 00:10:56.076 A:middle
也是很重要的

00:10:56.076 --> 00:10:58.966 A:middle
iOS 12 会尽力

00:10:58.966 --> 00:11:00.416 A:middle
让 CPU 性能在此期间匹配

00:10:58.966 --> 00:11:00.416 A:middle
让 CPU 性能在此期间匹配

00:11:00.416 --> 00:11:01.546 A:middle
你的 App 的需求

00:11:01.616 --> 00:11:03.396 A:middle
但是你最应该做的

00:11:03.396 --> 00:11:04.996 A:middle
就是保持

00:11:04.996 --> 00:11:06.016 A:middle
减少所需的工作量

00:11:06.016 --> 00:11:09.076 A:middle
以确保给你的客户带来

00:11:09.146 --> 00:11:10.336 A:middle
流畅的滚动体验

00:11:11.676 --> 00:11:13.416 A:middle
这就是 iOS 12 里的滚动部分

00:11:14.396 --> 00:11:16.056 A:middle
接下来让我们关注

00:11:16.096 --> 00:11:18.416 A:middle
下一个性能话题内存

00:11:19.626 --> 00:11:21.166 A:middle
你也许会想

00:11:21.166 --> 00:11:22.206 A:middle
为什么内存会成为

00:11:22.206 --> 00:11:23.176 A:middle
性能讨论中的话题

00:11:23.226 --> 00:11:25.726 A:middle
但是我保证

00:11:25.726 --> 00:11:26.966 A:middle
这其实很必要

00:11:26.966 --> 00:11:30.816 A:middle
实际上是因为内存

00:11:30.816 --> 00:11:32.026 A:middle
就相当于性能

00:11:32.746 --> 00:11:34.106 A:middle
你的 App 使用的

00:11:34.196 --> 00:11:36.066 A:middle
内存越多

00:11:36.066 --> 00:11:38.896 A:middle
对 App 性能的影响越大

00:11:39.626 --> 00:11:41.756 A:middle
要理解这一点

00:11:41.756 --> 00:11:43.756 A:middle
让我们在较高层面

00:11:43.756 --> 00:11:45.326 A:middle
来看一下

00:11:45.326 --> 00:11:46.996 A:middle
通常情况下

00:11:46.996 --> 00:11:48.296 A:middle
系统内存是什么样的

00:11:49.136 --> 00:11:50.576 A:middle
你可以看到

00:11:50.576 --> 00:11:52.186 A:middle
系统的内存

00:11:52.186 --> 00:11:54.536 A:middle
很大部分被其他 App

00:11:54.536 --> 00:11:55.666 A:middle
和系统本身占用

00:11:56.276 --> 00:11:57.706 A:middle
你的 App 现在

00:11:57.736 --> 00:11:58.246 A:middle
占用了一部分

00:11:58.676 --> 00:11:59.906 A:middle
还有一部分

00:11:59.906 --> 00:12:02.136 A:middle
空闲出来

00:11:59.906 --> 00:12:02.136 A:middle
空闲出来

00:12:02.136 --> 00:12:03.876 A:middle
应对新的分配请求

00:12:04.546 --> 00:12:05.896 A:middle
其实那里的很大一部分

00:12:05.896 --> 00:12:07.666 A:middle
都不是真正空闲的

00:12:07.666 --> 00:12:08.946 A:middle
它包含很多东西

00:12:08.946 --> 00:12:11.006 A:middle
比如缓存 或者其他

00:12:11.006 --> 00:12:12.426 A:middle
很快可以被丢弃的内容

00:12:12.426 --> 00:12:13.276 A:middle
以确保内存

00:12:13.276 --> 00:12:15.276 A:middle
可以很快满足需求

00:12:15.486 --> 00:12:17.856 A:middle
但是一般而言

00:12:17.856 --> 00:12:19.056 A:middle
它可能正在被占用

00:12:19.056 --> 00:12:21.626 A:middle
但随时可用

00:12:22.546 --> 00:12:23.556 A:middle
让我们看一下

00:12:23.556 --> 00:12:25.276 A:middle
当你的 App 需要内存时会发生什么

00:12:25.906 --> 00:12:29.116 A:middle
如果你只提出较少的需求

00:12:29.156 --> 00:12:31.956 A:middle
是现有的空闲空间就可以满足的

00:12:32.466 --> 00:12:33.516 A:middle
如果是这样的话

00:12:33.516 --> 00:12:35.526 A:middle
很快就能返回到你的 App

00:12:35.526 --> 00:12:36.826 A:middle
然后你就可以继续

00:12:36.826 --> 00:12:37.966 A:middle
你的工作

00:12:39.256 --> 00:12:40.526 A:middle
但是如果

00:12:40.526 --> 00:12:42.136 A:middle
你的 App 提出了

00:12:42.136 --> 00:12:44.326 A:middle
较大的需求

00:12:44.326 --> 00:12:45.756 A:middle
可能并不需要占用很久

00:12:45.756 --> 00:12:47.886 A:middle
所以你也觉得不用担心

00:12:48.246 --> 00:12:49.316 A:middle
也许你只是需要

00:12:49.316 --> 00:12:52.656 A:middle
从磁盘里加载一个图像并解压

00:12:52.656 --> 00:12:54.056 A:middle
在一些像素上做简单处理

00:12:54.056 --> 00:12:55.536 A:middle
然后就可以丢弃

00:12:55.876 --> 00:12:56.926 A:middle
看起来只是一个

00:12:56.926 --> 00:12:57.976 A:middle
不需要操心的

00:12:57.976 --> 00:12:58.806 A:middle
很快速的操作

00:12:59.506 --> 00:13:00.406 A:middle
我们如果

00:12:59.506 --> 00:13:00.406 A:middle
我们如果

00:13:00.406 --> 00:13:02.826 A:middle
提出这个需求

00:13:02.826 --> 00:13:04.556 A:middle
需要的内存大于

00:13:04.556 --> 00:13:05.916 A:middle
现在系统可提供的

00:13:06.176 --> 00:13:09.156 A:middle
系统无法立刻满足

00:13:09.156 --> 00:13:10.566 A:middle
那么 我们需要从别的地方

00:13:10.636 --> 00:13:11.216 A:middle
得到这些内存

00:13:12.206 --> 00:13:13.596 A:middle
最可能获取的地方

00:13:13.596 --> 00:13:15.436 A:middle
就是别的 App

00:13:15.436 --> 00:13:18.756 A:middle
或者系统内部

00:13:18.876 --> 00:13:20.156 A:middle
你可能并不怎么担心

00:13:20.156 --> 00:13:21.106 A:middle
因为你只是

00:13:21.106 --> 00:13:22.106 A:middle
为你的 App 申请更多内存

00:13:22.106 --> 00:13:23.386 A:middle
所以并不关注

00:13:23.386 --> 00:13:24.906 A:middle
别的地方发生了什么

00:13:25.536 --> 00:13:29.356 A:middle
但实际上这会影响

00:13:29.436 --> 00:13:30.696 A:middle
你的客户接下来

00:13:30.696 --> 00:13:32.066 A:middle
会遇到的事情

00:13:32.636 --> 00:13:33.906 A:middle
更此刻重要的是

00:13:33.906 --> 00:13:35.496 A:middle
它也会对你的 App

00:13:35.496 --> 00:13:37.146 A:middle
产生影响

00:13:37.146 --> 00:13:39.106 A:middle
因为系统需要

00:13:39.106 --> 00:13:41.126 A:middle
为你获取这些内存

00:13:41.366 --> 00:13:42.666 A:middle
因为内存现在无法提供

00:13:42.666 --> 00:13:44.776 A:middle
所以内核需要

00:13:44.776 --> 00:13:46.936 A:middle
从别处获取

00:13:46.936 --> 00:13:49.446 A:middle
并运作 CPU

00:13:49.446 --> 00:13:50.216 A:middle
来满足需求

00:13:50.726 --> 00:13:53.386 A:middle
而为此花费的时间

00:13:53.416 --> 00:13:54.796 A:middle
其实可以更好的

00:13:54.796 --> 00:13:56.466 A:middle
花在你的 App 上

00:13:57.126 --> 00:13:58.656 A:middle
所以找到

00:13:58.686 --> 00:14:00.036 A:middle
分解这些大块需求

00:13:58.686 --> 00:14:00.036 A:middle
分解这些大块需求

00:14:00.036 --> 00:14:01.376 A:middle
或者减少整体需求高峰

00:14:01.376 --> 00:14:03.376 A:middle
的方法 实际上

00:14:03.496 --> 00:14:05.186 A:middle
对提升你的 App 的性能

00:14:05.186 --> 00:14:07.236 A:middle
以及客户接下来

00:14:07.236 --> 00:14:08.816 A:middle
使用其他 App 的体验

00:14:08.816 --> 00:14:10.716 A:middle
都有很大影响

00:14:12.716 --> 00:14:14.006 A:middle
有很多方法

00:14:14.006 --> 00:14:17.806 A:middle
可以减少 APP 内存使用量

00:14:17.806 --> 00:14:19.146 A:middle
其中一个很好的方法

00:14:19.146 --> 00:14:20.326 A:middle
就是用 profile 和 instruments

00:14:20.746 --> 00:14:21.886 A:middle
不过今天上午

00:14:21.886 --> 00:14:23.496 A:middle
我们要了解一个

00:14:23.496 --> 00:14:25.306 A:middle
iOS 12 里

00:14:25.306 --> 00:14:29.216 A:middle
帮助减少 App 使用内存的新技术

00:14:29.216 --> 00:14:30.786 A:middle
这就是 Automatic Backing Stores

00:14:31.856 --> 00:14:32.966 A:middle
打个比方

00:14:32.966 --> 00:14:34.616 A:middle
我们要在 iPhone X 里

00:14:34.656 --> 00:14:36.356 A:middle
让这个土拨鼠变成肖像模式

00:14:37.266 --> 00:14:38.893 A:middle
这会是多大呢？

00:14:39.436 --> 00:14:41.666 A:middle
iPhone X 的肖像模式

00:14:41.736 --> 00:14:43.376 A:middle
宽 375 点

00:14:43.376 --> 00:14:45.346 A:middle
为保持相同比例

00:14:45.346 --> 00:14:46.176 A:middle
就是 250 点高

00:14:46.706 --> 00:14:48.646 A:middle
这样会占用

00:14:48.646 --> 00:14:48.896 A:middle
多少内存呢

00:14:49.536 --> 00:14:54.956 A:middle
375 乘 250 乘 @3x

00:14:54.956 --> 00:14:56.346 A:middle
再乘上 64 位每像素

00:14:56.346 --> 00:14:58.226 A:middle
因为这是一个色深设备

00:14:58.226 --> 00:15:00.406 A:middle
等于 2.2 M

00:14:58.226 --> 00:15:00.406 A:middle
等于 2.2 M

00:15:00.406 --> 00:15:00.976 A:middle
这是绘制一只土拨鼠需要的内存量

00:15:02.096 --> 00:15:03.426 A:middle
这个数据看起来很合理

00:15:03.426 --> 00:15:05.186 A:middle
这是当内存

00:15:05.186 --> 00:15:06.966 A:middle
很好地配置时的情况

00:15:07.216 --> 00:15:08.306 A:middle
我们想要保留这个

00:15:08.306 --> 00:15:10.226 A:middle
保真度很好的图像

00:15:10.226 --> 00:15:11.816 A:middle
这就是把图像

00:15:11.816 --> 00:15:13.116 A:middle
放在缓存里

00:15:13.116 --> 00:15:13.736 A:middle
所需要的内存量

00:15:14.086 --> 00:15:15.576 A:middle
这是在预料之中的

00:15:16.376 --> 00:15:20.266 A:middle
但是如果我们要绘制一个

00:15:20.266 --> 00:15:21.316 A:middle
低保真度版本的土拨鼠

00:15:21.626 --> 00:15:23.416 A:middle
比如用 Apple Pencil 和 iPad

00:15:23.416 --> 00:15:27.666 A:middle
绘制出的黑白色的简单图形

00:15:28.196 --> 00:15:29.456 A:middle
就像这样

00:15:30.496 --> 00:15:32.636 A:middle
这个低保真度版本的土拨鼠

00:15:32.866 --> 00:15:34.606 A:middle
又需要占用多少内存呢

00:15:35.506 --> 00:15:37.556 A:middle
其实占用的内存量

00:15:37.556 --> 00:15:38.766 A:middle
是一样多的

00:15:39.266 --> 00:15:41.286 A:middle
这显然没有

00:15:41.286 --> 00:15:42.236 A:middle
很好的利用内存

00:15:42.236 --> 00:15:43.306 A:middle
全都是灰度图

00:15:43.796 --> 00:15:45.236 A:middle
所有的色深信息

00:15:45.646 --> 00:15:47.436 A:middle
在这个图像中

00:15:47.436 --> 00:15:48.736 A:middle
都没有被使用

00:15:49.196 --> 00:15:50.416 A:middle
我们希望找到更好的方法

00:15:50.466 --> 00:15:53.456 A:middle
而 iOS 12 中引入的

00:15:53.456 --> 00:15:54.906 A:middle
Automatic Backing Store 上支持

00:15:54.906 --> 00:15:57.686 A:middle
正好做到了这一点

00:15:58.766 --> 00:16:00.866 A:middle
所有安装了

00:15:58.766 --> 00:16:00.866 A:middle
所有安装了

00:16:00.866 --> 00:16:02.176 A:middle
draw Rect 的视图

00:16:02.296 --> 00:16:04.826 A:middle
它们的 Backing Stores

00:16:04.826 --> 00:16:06.126 A:middle
都会由被写入内容的

00:16:06.126 --> 00:16:06.986 A:middle
深度来决定

00:16:07.376 --> 00:16:08.366 A:middle
因此 当我们用

00:16:08.366 --> 00:16:09.796 A:middle
Core Graphics 来绘制

00:16:09.796 --> 00:16:11.906 A:middle
只有灰度的内容时

00:16:11.906 --> 00:16:15.186 A:middle
会自动使用 8 位的 Backing Stores

00:16:15.366 --> 00:16:17.436 A:middle
而不是 64 位的

00:16:17.946 --> 00:16:19.466 A:middle
对内存的需求量

00:16:19.466 --> 00:16:21.226 A:middle
成量级减少

00:16:21.226 --> 00:16:26.216 A:middle
从 2.2 M 降低成 275 K

00:16:26.216 --> 00:16:28.806 A:middle
这对于很多 App 来说

00:16:28.806 --> 00:16:29.956 A:middle
都是很大的改进

00:16:29.956 --> 00:16:30.966 A:middle
对于你们的 App 和我们的都是

00:16:31.516 --> 00:16:36.356 A:middle
[ 掌声 ]

00:16:36.856 --> 00:16:38.266 A:middle
用 iOS 12 SDK

00:16:38.266 --> 00:16:40.206 A:middle
创建的所有 App

00:16:40.266 --> 00:16:41.646 A:middle
都可以采用 Automatic Backing Stores

00:16:42.586 --> 00:16:44.806 A:middle
所有在 UIView 上

00:16:44.806 --> 00:16:46.316 A:middle
安装了 draw Rect 的

00:16:46.396 --> 00:16:48.476 A:middle
都会自动采用

00:16:48.476 --> 00:16:49.856 A:middle
用 UIGraphicsImageRenderer

00:16:49.856 --> 00:16:52.316 A:middle
绘制到离屏位图的内容也一样

00:16:53.156 --> 00:16:54.436 A:middle
用 UIGraphicsImageRenderer 时

00:16:54.436 --> 00:16:55.856 A:middle
我们并不知道

00:16:55.856 --> 00:16:58.896 A:middle
你打算把你获取的图片

00:16:58.896 --> 00:17:00.086 A:middle
用来做什么

00:16:58.896 --> 00:17:00.086 A:middle
用来做什么

00:17:00.606 --> 00:17:02.516 A:middle
所以 如果你知道

00:17:02.516 --> 00:17:03.866 A:middle
这个自动行为

00:17:03.866 --> 00:17:05.675 A:middle
并不是你想要的

00:17:05.675 --> 00:17:07.146 A:middle
你可以在 ImageRenderer

00:17:07.146 --> 00:17:09.106 A:middle
制定某个你想要的

00:17:09.106 --> 00:17:10.636 A:middle
特定的 Backing Stores 模式

00:17:10.636 --> 00:17:12.386 A:middle
比如用 newRange API

00:17:12.715 --> 00:17:13.915 A:middle
来定制你想要的

00:17:13.915 --> 00:17:15.306 A:middle
扩充域图像

00:17:15.866 --> 00:17:17.626 A:middle
更多关于这个

00:17:18.006 --> 00:17:20.306 A:middle
和其他有关 UI Image 的技术

00:17:20.306 --> 00:17:22.205 A:middle
你可以在这周的

00:17:22.205 --> 00:17:24.455 A:middle
图像和图形的最佳实践会议中了解到

00:17:24.915 --> 00:17:27.656 A:middle
这就是关于性能的第二个主题

00:17:28.425 --> 00:17:30.636 A:middle
接下来 让我们聊一聊自动布局

00:17:31.756 --> 00:17:34.766 A:middle
现在 iOS 10 中的自动布局

00:17:34.986 --> 00:17:36.386 A:middle
有一些很大的进步

00:17:36.866 --> 00:17:37.946 A:middle
我们团队很努力地

00:17:37.946 --> 00:17:40.076 A:middle
为你的 App

00:17:40.076 --> 00:17:42.076 A:middle
尽可能优化自动布局

00:17:42.676 --> 00:17:44.726 A:middle
所以你会发现

00:17:44.726 --> 00:17:47.146 A:middle
自动布局在 iOS 12 中默认更快了

00:17:47.556 --> 00:17:49.096 A:middle
我们会讲到在好几种情况下都是这样的

00:17:49.996 --> 00:17:52.016 A:middle
当团队在分析和优化

00:17:52.016 --> 00:17:53.406 A:middle
自动布局时

00:17:53.406 --> 00:17:54.866 A:middle
他们在系统中

00:17:54.946 --> 00:17:56.476 A:middle
看了很多我们自己的 App

00:17:56.476 --> 00:17:57.896 A:middle
如何使用自动布局的情况

00:17:57.896 --> 00:17:59.686 A:middle
然后发现了一些

00:17:59.686 --> 00:18:00.726 A:middle
不同的 App

00:17:59.686 --> 00:18:00.726 A:middle
不同的 App

00:18:00.726 --> 00:18:02.496 A:middle
可能遇到的

00:18:02.566 --> 00:18:03.546 A:middle
比较普遍的陷阱

00:18:04.026 --> 00:18:05.086 A:middle
所以我们会

00:18:05.156 --> 00:18:06.406 A:middle
向你们展示一些简单的方法

00:18:06.406 --> 00:18:08.376 A:middle
让你们可以

00:18:08.376 --> 00:18:09.486 A:middle
优化你们的 App

00:18:10.796 --> 00:18:11.766 A:middle
今天 让我们先了解一下

00:18:11.816 --> 00:18:13.466 A:middle
自动布局在 iOS 12 中

00:18:13.466 --> 00:18:16.306 A:middle
怎样能做到更快

00:18:16.386 --> 00:18:17.976 A:middle
我们首先要知道

00:18:18.016 --> 00:18:20.996 A:middle
当我们在普遍用户场景中

00:18:20.996 --> 00:18:23.336 A:middle
添加更多视图时

00:18:23.446 --> 00:18:24.296 A:middle
自动布局的渐近行为

00:18:25.646 --> 00:18:26.346 A:middle
这样做的原因是

00:18:26.346 --> 00:18:28.196 A:middle
讨论渐近性

00:18:28.196 --> 00:18:29.476 A:middle
是想了解

00:18:29.476 --> 00:18:31.056 A:middle
如果我们大量增加视图

00:18:31.056 --> 00:18:31.956 A:middle
会发生什么

00:18:32.366 --> 00:18:33.776 A:middle
如果我们一下增加

00:18:33.776 --> 00:18:35.486 A:middle
非常多的视图

00:18:35.486 --> 00:18:37.216 A:middle
可以很快地让

00:18:37.216 --> 00:18:38.356 A:middle
性能问题显现

00:18:38.866 --> 00:18:40.186 A:middle
这样可以帮助我们看清楚

00:18:40.406 --> 00:18:41.776 A:middle
这次优化

00:18:41.776 --> 00:18:43.316 A:middle
即使对少量视窗

00:18:43.316 --> 00:18:44.906 A:middle
也有提速作用

00:18:45.366 --> 00:18:46.506 A:middle
让我们从普通模式开始

00:18:46.506 --> 00:18:48.366 A:middle
最简单的

00:18:48.366 --> 00:18:50.246 A:middle
一个容器里的

00:18:50.246 --> 00:18:52.576 A:middle
Independent Sibling Views

00:18:53.006 --> 00:18:54.156 A:middle
这些视图的位置

00:18:54.156 --> 00:18:55.386 A:middle
受到容器

00:18:55.386 --> 00:18:57.596 A:middle
或者其他视图的约束

00:18:57.596 --> 00:18:58.536 A:middle
但彼此之间并没有约束

00:18:58.666 --> 00:18:59.876 A:middle
它们相互独立

00:19:00.636 --> 00:19:02.846 A:middle
在 iOS 11 里

00:19:02.846 --> 00:19:06.246 A:middle
添加这些 Independent Siblings 的成本

00:19:06.246 --> 00:19:06.816 A:middle
线性上升

00:19:07.526 --> 00:19:08.996 A:middle
这很棒

00:19:08.996 --> 00:19:10.536 A:middle
这应该正是

00:19:10.536 --> 00:19:11.906 A:middle
你所预料到的

00:19:12.306 --> 00:19:13.706 A:middle
也就是说

00:19:13.706 --> 00:19:15.116 A:middle
每添加一个

00:19:15.116 --> 00:19:17.046 A:middle
独立于其他视图的层级的

00:19:17.046 --> 00:19:18.326 A:middle
新的视图

00:19:18.326 --> 00:19:19.876 A:middle
增加的成本

00:19:19.876 --> 00:19:21.336 A:middle
都是固定的

00:19:22.516 --> 00:19:23.406 A:middle
因为这已经

00:19:23.506 --> 00:19:24.896 A:middle
和我们期待的

00:19:24.896 --> 00:19:26.746 A:middle
增长指数一样

00:19:26.746 --> 00:19:28.976 A:middle
所以在 iOS 12 里依旧如此

00:19:29.096 --> 00:19:30.966 A:middle
但是我们的团队很努力地

00:19:30.966 --> 00:19:33.386 A:middle
想减少这个固定成本

00:19:33.386 --> 00:19:34.956 A:middle
希望使添加视图变得

00:19:35.146 --> 00:19:36.076 A:middle
更加容易

00:19:37.376 --> 00:19:38.326 A:middle
让我们来看一个

00:19:38.326 --> 00:19:39.596 A:middle
更有趣的例子

00:19:39.986 --> 00:19:42.236 A:middle
这次让我们看一下

00:19:42.236 --> 00:19:42.846 A:middle
Dependent Siblings

00:19:43.326 --> 00:19:46.826 A:middle
这里有好几个子视图

00:19:46.826 --> 00:19:47.676 A:middle
它们彼此之间

00:19:47.726 --> 00:19:49.296 A:middle
相互约束

00:19:49.296 --> 00:19:51.616 A:middle
他们的布局相互影响

00:19:52.666 --> 00:19:54.536 A:middle
在 iOS 11 里

00:19:54.896 --> 00:19:56.226 A:middle
渐近性的表现

00:19:56.226 --> 00:19:58.206 A:middle
并不很好

00:19:58.206 --> 00:20:00.316 A:middle
实际上是以指数级增长的

00:19:58.206 --> 00:20:00.316 A:middle
实际上是以指数级增长的

00:20:00.686 --> 00:20:03.186 A:middle
随着视图的增加

00:20:03.186 --> 00:20:04.786 A:middle
添加新的视图

00:20:04.786 --> 00:20:05.976 A:middle
会使成本大幅度增加

00:20:07.826 --> 00:20:09.146 A:middle
我们团队

00:20:09.146 --> 00:20:10.396 A:middle
努力地识别出

00:20:10.396 --> 00:20:12.796 A:middle
这一指数级增长的原因

00:20:12.796 --> 00:20:14.436 A:middle
并修正了算法

00:20:14.436 --> 00:20:14.826 A:middle
解决这一问题

00:20:15.386 --> 00:20:17.976 A:middle
在 iOS 12 中它们也以线性增长了

00:20:18.516 --> 00:20:23.396 A:middle
[ 掌声 ]

00:20:23.896 --> 00:20:24.866 A:middle
同时 我们团队

00:20:24.866 --> 00:20:25.956 A:middle
也在努力的减少

00:20:25.956 --> 00:20:28.016 A:middle
这些固定成本

00:20:29.096 --> 00:20:31.366 A:middle
现在除了 Dependent Siblings

00:20:31.366 --> 00:20:32.506 A:middle
还有一种其他的布局类型

00:20:32.506 --> 00:20:34.056 A:middle
Nested Views

00:20:34.056 --> 00:20:35.656 A:middle
当一个视图在另一个视图里

00:20:35.726 --> 00:20:37.706 A:middle
并且被外面的视图所限制

00:20:38.136 --> 00:20:39.506 A:middle
这是你的 App 里

00:20:39.586 --> 00:20:41.586 A:middle
一个很常见的模式

00:20:41.586 --> 00:20:42.866 A:middle
然而在 iOS 11 里

00:20:42.956 --> 00:20:44.566 A:middle
我们遇到相同的

00:20:44.566 --> 00:20:45.286 A:middle
指数级增长

00:20:45.966 --> 00:20:47.456 A:middle
又一个好消息

00:20:47.456 --> 00:20:48.726 A:middle
在 iOS 12 里

00:20:48.796 --> 00:20:49.836 A:middle
这个也变成线性的了

00:20:50.516 --> 00:20:54.546 A:middle
[ 掌声 ]

00:20:55.046 --> 00:20:56.566 A:middle
iOS 12 的自动布局

00:20:56.566 --> 00:20:58.226 A:middle
有很多改进

00:20:58.226 --> 00:21:00.256 A:middle
你只要用 iOS 12

00:20:58.226 --> 00:21:00.256 A:middle
你只要用 iOS 12

00:21:00.256 --> 00:21:01.346 A:middle
运行你的 App

00:21:01.346 --> 00:21:02.406 A:middle
就能发现这些

00:21:02.406 --> 00:21:03.936 A:middle
改进的地方

00:21:04.646 --> 00:21:06.296 A:middle
如果想获取更多内容

00:21:06.956 --> 00:21:08.886 A:middle
想了解更多

00:21:08.976 --> 00:21:11.016 A:middle
获得更好的直觉

00:21:11.586 --> 00:21:13.346 A:middle
了解关于不同布局的性能

00:21:13.346 --> 00:21:15.446 A:middle
以及一些

00:21:15.446 --> 00:21:16.846 A:middle
我刚才提到的

00:21:16.846 --> 00:21:18.596 A:middle
普遍的陷阱

00:21:18.896 --> 00:21:19.996 A:middle
请一定关注

00:21:19.996 --> 00:21:21.326 A:middle
这周晚些时候的

00:21:21.436 --> 00:21:22.726 A:middle
高性能自动布局会议

00:21:23.636 --> 00:21:26.156 A:middle
最后的主题是框架更新

00:21:26.156 --> 00:21:28.216 A:middle
让我们了解一下

00:21:28.216 --> 00:21:29.106 A:middle
Swiftification

00:21:29.676 --> 00:21:32.906 A:middle
你应该听说了 iOS 12 引入了

00:21:32.986 --> 00:21:34.136 A:middle
Swift 4.2

00:21:34.586 --> 00:21:36.116 A:middle
在 Swift 4.2 里

00:21:36.116 --> 00:21:38.326 A:middle
我们希望确保

00:21:38.406 --> 00:21:40.596 A:middle
UIKit 在你的 App 里

00:21:40.596 --> 00:21:42.676 A:middle
用 Swift 时能有很好的体验

00:21:43.026 --> 00:21:44.376 A:middle
尤其是当它和

00:21:44.376 --> 00:21:45.726 A:middle
其他 Swift Standard Library

00:21:45.726 --> 00:21:48.786 A:middle
或者和 Swift 有相同模式的地方互动时

00:21:49.606 --> 00:21:51.906 A:middle
所以我们测试了所有的 UIKit

00:21:51.906 --> 00:21:53.376 A:middle
并确保一切

00:21:53.376 --> 00:21:54.936 A:middle
都很合适

00:21:55.636 --> 00:21:56.936 A:middle
而且 我们还让

00:21:56.936 --> 00:21:58.226 A:middle
我们对 UIKit

00:21:58.226 --> 00:22:00.096 A:middle
做出的改变

00:21:58.226 --> 00:22:00.096 A:middle
做出的改变

00:22:00.096 --> 00:22:01.706 A:middle
都能够自动迁移

00:22:01.706 --> 00:22:03.966 A:middle
这样你不用做任何更多的操作

00:22:03.966 --> 00:22:04.536 A:middle
就能得到这些更新

00:22:05.746 --> 00:22:07.536 A:middle
有关这些更新

00:22:07.536 --> 00:22:08.766 A:middle
我们今天上午主要讨论

00:22:08.766 --> 00:22:09.736 A:middle
三个方面

00:22:10.016 --> 00:22:11.756 A:middle
其实如果你看一下 SDK

00:22:11.756 --> 00:22:13.856 A:middle
就会发现

00:22:13.856 --> 00:22:15.816 A:middle
有非常多一致性的改进

00:22:16.566 --> 00:22:17.326 A:middle
但是今天我们只讨论

00:22:17.326 --> 00:22:19.586 A:middle
嵌套类型 常量和函数

00:22:19.656 --> 00:22:22.636 A:middle
首先是嵌套类型

00:22:23.516 --> 00:22:25.476 A:middle
在 Swift 4 中

00:22:25.476 --> 00:22:26.776 A:middle
全局命名空间中

00:22:26.776 --> 00:22:28.766 A:middle
有很多不同类型

00:22:28.806 --> 00:22:30.006 A:middle
比如 UIApplicationState

00:22:30.666 --> 00:22:32.916 A:middle
像这样跟其他的类

00:22:32.966 --> 00:22:35.096 A:middle
有很强的联系的类型

00:22:35.096 --> 00:22:37.276 A:middle
我们让它们直接

00:22:37.276 --> 00:22:38.016 A:middle
嵌套进这一类

00:22:38.796 --> 00:22:39.746 A:middle
所以现在所有的

00:22:39.746 --> 00:22:42.156 A:middle
枚举和其他

00:22:42.206 --> 00:22:43.796 A:middle
这类的全局类型

00:22:43.796 --> 00:22:46.576 A:middle
现在变成了相关类的子类型

00:22:46.906 --> 00:22:47.576 A:middle
现在变成了

00:22:47.576 --> 00:22:49.326 A:middle
UIApplication.State

00:22:49.796 --> 00:22:51.536 A:middle
这样更清晰地

00:22:51.536 --> 00:22:52.786 A:middle
表明两者之间的关系

00:22:52.786 --> 00:22:54.216 A:middle
并且让它们

00:22:54.216 --> 00:22:55.276 A:middle
更容易找到

00:22:56.046 --> 00:22:57.546 A:middle
很多情况下

00:22:57.546 --> 00:23:00.286 A:middle
这样可以帮助理解

00:22:57.546 --> 00:23:00.286 A:middle
这样可以帮助理解

00:23:00.286 --> 00:23:02.246 A:middle
减少混淆

00:23:02.696 --> 00:23:03.546 A:middle
让我们看一下

00:23:03.546 --> 00:23:05.016 A:middle
UITabBarItemPositioning

00:23:05.626 --> 00:23:06.216 A:middle
你觉得这应该是

00:23:06.306 --> 00:23:09.086 A:middle
UITabBar ItemPositioning

00:23:09.226 --> 00:23:10.896 A:middle
还是 UITabBarItem Positioning

00:23:10.896 --> 00:23:12.586 A:middle
两者都有可能

00:23:12.836 --> 00:23:13.906 A:middle
两个类都是

00:23:14.406 --> 00:23:16.546 A:middle
在 Swift 4.2 里

00:23:16.616 --> 00:23:17.726 A:middle
现在变得非常清楚

00:23:17.726 --> 00:23:20.066 A:middle
实际是 UITabBar ItemPositioning

00:23:20.646 --> 00:23:23.226 A:middle
除了嵌套类型

00:23:23.546 --> 00:23:25.666 A:middle
我们还嵌套了很多常量

00:23:26.106 --> 00:23:27.486 A:middle
在 Swift 4 里

00:23:27.486 --> 00:23:29.926 A:middle
NSNotifications

00:23:29.926 --> 00:23:30.636 A:middle
都在 NSNotification.Name 的

00:23:30.706 --> 00:23:32.796 A:middle
全局命名空间

00:23:33.206 --> 00:23:34.616 A:middle
他们相关的

00:23:34.616 --> 00:23:35.956 A:middle
UserInfoKey

00:23:35.956 --> 00:23:37.386 A:middle
其实只是在外面的全局常量

00:23:38.026 --> 00:23:39.676 A:middle
为了和 AppKit 保持一致

00:23:39.676 --> 00:23:41.146 A:middle
更容易找到

00:23:41.146 --> 00:23:42.656 A:middle
并且把这些类型联系在一起

00:23:42.706 --> 00:23:44.196 A:middle
它们现在都被

00:23:44.196 --> 00:23:46.026 A:middle
嵌套在他们使用的类之下

00:23:46.456 --> 00:23:49.006 A:middle
所以 didChangeStatusBarOrientation

00:23:49.316 --> 00:23:51.336 A:middle
现在是在 UIApplication 下的 didChange

00:23:51.336 --> 00:23:52.346 A:middle
StatusBarOrientationNotification

00:23:52.346 --> 00:23:54.106 A:middle
它的 UserInfoKey

00:23:54.106 --> 00:23:55.436 A:middle
和它在一块儿

00:23:55.436 --> 00:23:56.486 A:middle
位于相同位置

00:23:57.126 --> 00:23:59.656 A:middle
我们检查了

00:23:59.656 --> 00:24:01.326 A:middle
所有其他 UIKit

00:23:59.656 --> 00:24:01.326 A:middle
所有其他 UIKit

00:24:01.326 --> 00:24:03.806 A:middle
里的全局常量

00:24:03.806 --> 00:24:05.006 A:middle
并把它们嵌套在该有的位置

00:24:05.346 --> 00:24:06.486 A:middle
所以像 UIFloatRangeZero

00:24:06.486 --> 00:24:08.536 A:middle
和 UIFloatRangeInfinite

00:24:08.536 --> 00:24:10.216 A:middle
现在都变成

00:24:10.216 --> 00:24:12.396 A:middle
UIFloatRange 的属性

00:24:12.396 --> 00:24:14.786 A:middle
这样就更容易找到和使用

00:24:15.096 --> 00:24:16.686 A:middle
在需要 UIFloatRange 的地方

00:24:16.686 --> 00:24:18.096 A:middle
你可以输入

00:24:18.206 --> 00:24:20.386 A:middle
.zero 或者 .infinite

00:24:20.616 --> 00:24:21.656 A:middle
因为它们现在是属性了

00:24:21.906 --> 00:24:23.226 A:middle
Xcode 可以帮你

00:24:23.226 --> 00:24:24.866 A:middle
自动完成

00:24:24.866 --> 00:24:26.666 A:middle
放置在应该的位置上

00:24:27.776 --> 00:24:29.046 A:middle
除了常量

00:24:29.046 --> 00:24:30.316 A:middle
我们也测试了

00:24:30.316 --> 00:24:31.056 A:middle
所有的全局函数

00:24:31.536 --> 00:24:32.776 A:middle
UIEdgeInserts

00:24:32.776 --> 00:24:36.206 A:middle
和 UIImage

00:24:36.206 --> 00:24:37.376 A:middle
为了在不同的类型上运行

00:24:37.376 --> 00:24:38.076 A:middle
有一些全局函数

00:24:38.556 --> 00:24:40.326 A:middle
在 Swift 4.2 里

00:24:40.326 --> 00:24:43.796 A:middle
这些变成了类型的方法

00:24:44.576 --> 00:24:46.286 A:middle
所以现在要 insetRect

00:24:46.326 --> 00:24:48.196 A:middle
或者从图像里提取

00:24:48.196 --> 00:24:51.046 A:middle
pngData 都可以很容易

00:24:52.516 --> 00:24:57.166 A:middle
[ 掌声 ]

00:24:57.666 --> 00:24:59.176 A:middle
接下来 今天上午还有

00:24:59.176 --> 00:25:00.286 A:middle
我还想要聊一聊

00:24:59.176 --> 00:25:00.286 A:middle
我还想要聊一聊

00:25:00.286 --> 00:25:01.236 A:middle
另外一大类函数

00:25:01.236 --> 00:25:02.446 A:middle
就是所有的

00:25:02.446 --> 00:25:03.956 A:middle
String Conversion 函数

00:25:03.956 --> 00:25:05.306 A:middle
UIKit 里面的所有类型

00:25:05.776 --> 00:25:07.206 A:middle
CGPoint CGRect CGSize CGVector

00:25:07.346 --> 00:25:09.706 A:middle
所有的这些

00:25:09.706 --> 00:25:11.726 A:middle
有很多 既可以是转换到字符串

00:25:11.726 --> 00:25:12.106 A:middle
也可以反过来

00:25:12.516 --> 00:25:14.676 A:middle
当我们想决定

00:25:14.676 --> 00:25:15.386 A:middle
它们应该放在哪里时

00:25:15.386 --> 00:25:16.836 A:middle
就会发现

00:25:16.836 --> 00:25:19.086 A:middle
它们其实有两种用途

00:25:19.386 --> 00:25:21.216 A:middle
一个是编码和解码

00:25:21.676 --> 00:25:24.276 A:middle
另一个是它们总用来 print

00:25:24.466 --> 00:25:25.296 A:middle
当你想得到

00:25:25.296 --> 00:25:26.276 A:middle
debug 描述时

00:25:26.826 --> 00:25:28.586 A:middle
这两个用途很不一样

00:25:28.586 --> 00:25:30.886 A:middle
但其实 Swift 对

00:25:30.946 --> 00:25:33.166 A:middle
这两种用途 都有一级支持

00:25:33.626 --> 00:25:34.846 A:middle
我们现在可以确保

00:25:34.846 --> 00:25:36.166 A:middle
所有的类型

00:25:36.166 --> 00:25:37.436 A:middle
和 Swift 的内置支持

00:25:37.436 --> 00:25:38.156 A:middle
都可以和谐共处

00:25:38.776 --> 00:25:40.706 A:middle
在 Swift 4.2 里

00:25:40.786 --> 00:25:42.436 A:middle
所有的类型都变得可编码

00:25:42.706 --> 00:25:44.526 A:middle
这样你可以很容易的

00:25:44.526 --> 00:25:46.146 A:middle
给这些类型

00:25:46.146 --> 00:25:47.896 A:middle
编码和解码 JSON

00:25:48.516 --> 00:25:53.656 A:middle
[ 掌声 ]

00:25:54.156 --> 00:25:55.236 A:middle
在 Swift 里 debug printing

00:25:55.306 --> 00:25:56.766 A:middle
其实比在

00:25:56.766 --> 00:25:58.296 A:middle
Objective-C 更容易

00:25:58.296 --> 00:26:00.106 A:middle
因为你不需要

00:25:58.296 --> 00:26:00.106 A:middle
因为你不需要

00:26:00.106 --> 00:26:00.706 A:middle
其他额外转换

00:26:01.276 --> 00:26:03.246 A:middle
这些类型的内省

00:26:03.246 --> 00:26:04.916 A:middle
可以让你直接 print 它们

00:26:05.226 --> 00:26:06.396 A:middle
在 Swift 4.2 里

00:26:06.396 --> 00:26:07.486 A:middle
你可以直接把这些类型

00:26:07.486 --> 00:26:08.726 A:middle
传输到 print 函数

00:26:09.146 --> 00:26:10.416 A:middle
如果你希望为了 debug 把它们 print 出来

00:26:10.446 --> 00:26:12.056 A:middle
或者 log 它们

00:26:12.916 --> 00:26:15.786 A:middle
最后如果你已经有一个代码

00:26:15.786 --> 00:26:17.196 A:middle
用的是旧的

00:26:17.196 --> 00:26:18.826 A:middle
string conversion 函数

00:26:18.826 --> 00:26:20.986 A:middle
并且需要一个兼容函数

00:26:20.986 --> 00:26:22.766 A:middle
来继续进行

00:26:23.366 --> 00:26:24.346 A:middle
我们已经

00:26:24.346 --> 00:26:25.476 A:middle
把它们都重命名

00:26:25.476 --> 00:26:28.126 A:middle
并变成 NSCoder 里的属性

00:26:28.526 --> 00:26:29.826 A:middle
这可以帮助

00:26:29.826 --> 00:26:30.926 A:middle
用来强调这些方法

00:26:30.926 --> 00:26:32.516 A:middle
的目的是

00:26:32.516 --> 00:26:34.276 A:middle
编码和解码

00:26:34.276 --> 00:26:36.066 A:middle
这样把它们放过去就很自然

00:26:37.966 --> 00:26:39.476 A:middle
这只是一部分

00:26:39.476 --> 00:26:40.666 A:middle
你会在 iOS 12

00:26:40.666 --> 00:26:43.106 A:middle
Swift 4.2 的 SDK 里

00:26:43.806 --> 00:26:46.946 A:middle
发现改进的地方

00:26:46.946 --> 00:26:48.056 A:middle
但其实还有更多

00:26:49.476 --> 00:26:51.176 A:middle
说到编码和解码

00:26:51.176 --> 00:26:54.246 A:middle
NSSecureCoding

00:26:55.096 --> 00:26:57.566 A:middle
在 iOS 12 里

00:26:57.566 --> 00:26:59.456 A:middle
有新的默认安全

00:26:59.456 --> 00:26:59.856 A:middle
编码解码 API

00:27:01.246 --> 00:27:02.846 A:middle
为所有在 NSKeyedArchiver 上的编码需求

00:27:02.846 --> 00:27:04.546 A:middle
采用 NSSecureCoding

00:27:04.586 --> 00:27:07.056 A:middle
是非常重要的

00:27:07.056 --> 00:27:08.186 A:middle
以防止你的客户

00:27:08.186 --> 00:27:11.646 A:middle
受到恶意和损坏数据的影响

00:27:12.606 --> 00:27:13.876 A:middle
你会发现

00:27:13.876 --> 00:27:15.856 A:middle
旧的不安全的 API 没有被弃用

00:27:16.776 --> 00:27:18.396 A:middle
更多的内容

00:27:18.396 --> 00:27:20.066 A:middle
以及相关细节

00:27:20.156 --> 00:27:21.346 A:middle
你可以在周四 9 点的

00:27:21.346 --> 00:27:23.266 A:middle
可信任的数据会议了解到

00:27:23.826 --> 00:27:25.996 A:middle
这就是关于框架更新的内容

00:27:26.946 --> 00:27:28.496 A:middle
下面 让我们了解一下

00:27:28.586 --> 00:27:32.486 A:middle
对一些现有 API 的增强

00:27:32.486 --> 00:27:33.466 A:middle
首先是通知

00:27:34.256 --> 00:27:36.096 A:middle
在 iOS 12 里

00:27:36.096 --> 00:27:37.756 A:middle
通知有很多新的改进

00:27:37.756 --> 00:27:39.296 A:middle
但是今天

00:27:39.296 --> 00:27:40.436 A:middle
我们主要关注三点

00:27:41.176 --> 00:27:42.496 A:middle
自定义通知内的交互

00:27:42.496 --> 00:27:44.376 A:middle
通知分组

00:27:44.376 --> 00:27:46.326 A:middle
和在你的 App 里

00:27:46.326 --> 00:27:47.866 A:middle
如何访问

00:27:47.866 --> 00:27:48.696 A:middle
通知设置

00:27:50.206 --> 00:27:51.606 A:middle
首先是交互

00:27:52.286 --> 00:27:56.486 A:middle
现在个性化通知允许你

00:27:56.486 --> 00:28:00.686 A:middle
为通知定义一组预先行为

00:27:56.486 --> 00:28:00.686 A:middle
为通知定义一组预先行为

00:28:01.246 --> 00:28:03.436 A:middle
在 iOS 12 里 这些行为

00:28:03.436 --> 00:28:04.756 A:middle
不再是静态的

00:28:05.136 --> 00:28:05.856 A:middle
它可以以编程方式定义

00:28:05.906 --> 00:28:07.506 A:middle
你也可以在运行时

00:28:07.506 --> 00:28:09.406 A:middle
改变它们

00:28:09.536 --> 00:28:11.916 A:middle
除了这些行为

00:28:12.296 --> 00:28:13.956 A:middle
更棒的是

00:28:13.956 --> 00:28:16.226 A:middle
通知本身也可以

00:28:16.226 --> 00:28:17.616 A:middle
变成交互的

00:28:18.156 --> 00:28:21.286 A:middle
比如说这里信息允许你

00:28:21.366 --> 00:28:23.266 A:middle
直接在通知中

00:28:23.466 --> 00:28:26.046 A:middle
快速进行回复

00:28:28.066 --> 00:28:29.266 A:middle
除了交互

00:28:29.596 --> 00:28:32.026 A:middle
iOS 12 还可以

00:28:32.026 --> 00:28:33.796 A:middle
默认通知分组

00:28:33.796 --> 00:28:34.846 A:middle
这个默认行为

00:28:34.886 --> 00:28:36.536 A:middle
可以把某个

00:28:36.536 --> 00:28:38.816 A:middle
特定 App 的通知分为一组

00:28:39.246 --> 00:28:42.296 A:middle
当然你的 App 可能需要

00:28:42.296 --> 00:28:44.256 A:middle
更细化的分组

00:28:44.256 --> 00:28:46.036 A:middle
比如 iMessage

00:28:46.036 --> 00:28:47.296 A:middle
可以把某一个对话的信息

00:28:47.296 --> 00:28:49.046 A:middle
分为一组

00:28:49.116 --> 00:28:50.556 A:middle
和别的从同一 App 来的通知

00:28:50.596 --> 00:28:51.836 A:middle
分离开来

00:28:53.116 --> 00:28:54.536 A:middle
现在你的 App 也可以这样

00:28:54.536 --> 00:28:56.716 A:middle
你只要用一个

00:28:56.716 --> 00:28:58.706 A:middle
特定的 thread identifier

00:28:58.806 --> 00:29:00.526 A:middle
来标记你的通知

00:28:58.806 --> 00:29:00.526 A:middle
来标记你的通知

00:29:00.526 --> 00:29:01.776 A:middle
那么那个 thread identifier

00:29:01.856 --> 00:29:03.976 A:middle
下的所有通知

00:29:03.976 --> 00:29:04.586 A:middle
都会成为单独一组

00:29:05.106 --> 00:29:08.106 A:middle
iOS 12 里

00:29:08.106 --> 00:29:10.746 A:middle
通知的 UI 更新

00:29:10.746 --> 00:29:13.246 A:middle
也能够让用户

00:29:13.246 --> 00:29:16.026 A:middle
个性化设置

00:29:16.026 --> 00:29:17.526 A:middle
通知的推送

00:29:18.436 --> 00:29:21.436 A:middle
当然你的 App 可能也包含

00:29:21.436 --> 00:29:22.996 A:middle
一些对通知管理的

00:29:22.996 --> 00:29:25.876 A:middle
更细化的控制

00:29:26.436 --> 00:29:28.316 A:middle
iOS 12 有一个新的 API

00:29:28.536 --> 00:29:29.686 A:middle
能够让你的用户

00:29:29.686 --> 00:29:31.546 A:middle
直接进入到

00:29:31.546 --> 00:29:33.336 A:middle
通知设置 UI

00:29:33.336 --> 00:29:35.056 A:middle
这正是他们想寻找的

00:29:35.056 --> 00:29:37.096 A:middle
细化控制的地方

00:29:37.096 --> 00:29:39.836 A:middle
你可以了解更多

00:29:39.836 --> 00:29:41.576 A:middle
关于通知的内容

00:29:41.576 --> 00:29:43.266 A:middle
在通知的新功能会议

00:29:43.476 --> 00:29:45.076 A:middle
和使用分组通知会议

00:29:45.226 --> 00:29:45.866 A:middle
它们会在这周晚些时候

00:29:46.906 --> 00:29:48.086 A:middle
这就是关于通知的内容

00:29:49.006 --> 00:29:52.516 A:middle
下面是信息

00:29:52.586 --> 00:29:54.856 A:middle
iOS 12 里的信息

00:29:54.856 --> 00:29:56.336 A:middle
加入了一些很有意思的

00:29:56.336 --> 00:29:57.396 A:middle
相机的新特点

00:29:58.166 --> 00:29:59.426 A:middle
你也可以把

00:29:59.426 --> 00:30:01.126 A:middle
iMessage 里的表情包

00:29:59.426 --> 00:30:01.126 A:middle
iMessage 里的表情包

00:30:01.126 --> 00:30:02.316 A:middle
直接导入相机

00:30:02.916 --> 00:30:04.006 A:middle
如果你在用

00:30:04.046 --> 00:30:05.696 A:middle
Xcode 表情包模板

00:30:05.696 --> 00:30:07.196 A:middle
这会默认自动发生

00:30:07.196 --> 00:30:07.976 A:middle
你不用再做什么

00:30:08.116 --> 00:30:11.776 A:middle
但是如果你想用

00:30:11.776 --> 00:30:14.336 A:middle
MSMessagesAppView 控制器

00:30:14.376 --> 00:30:15.376 A:middle
创建一个更加个性化的表情包体验

00:30:15.376 --> 00:30:17.726 A:middle
就需要做一些

00:30:17.726 --> 00:30:18.846 A:middle
简单的调试

00:30:18.846 --> 00:30:21.076 A:middle
有一个新的 API

00:30:21.116 --> 00:30:22.786 A:middle
MSMessagesSupportedPresentationContexts

00:30:22.786 --> 00:30:25.166 A:middle
你可以添加到你的

00:30:25.166 --> 00:30:27.436 A:middle
用户 info.plist

00:30:27.436 --> 00:30:28.786 A:middle
指定同时在

00:30:28.786 --> 00:30:30.446 A:middle
信息语境和

00:30:30.446 --> 00:30:31.326 A:middle
媒体语境显示

00:30:32.076 --> 00:30:33.506 A:middle
完成之后

00:30:33.506 --> 00:30:34.706 A:middle
你的 App 会显示在

00:30:34.706 --> 00:30:38.176 A:middle
AppStrip 和相机里

00:30:39.046 --> 00:30:40.696 A:middle
如果在运行时

00:30:40.696 --> 00:30:41.956 A:middle
你想要知道

00:30:41.956 --> 00:30:43.596 A:middle
你在哪个语境下

00:30:43.596 --> 00:30:45.076 A:middle
以便你能够定制

00:30:45.076 --> 00:30:46.646 A:middle
你的表情包

00:30:46.646 --> 00:30:48.036 A:middle
有一个新的 API 可以做到

00:30:48.676 --> 00:30:51.316 A:middle
通过查看

00:30:51.316 --> 00:30:52.586 A:middle
PresentationContext

00:30:52.586 --> 00:30:54.246 A:middle
你可以很快知道你在

00:30:55.176 --> 00:30:56.026 A:middle
信息还是相机

00:30:56.176 --> 00:30:57.526 A:middle
除了这些

00:30:57.526 --> 00:31:01.456 A:middle
iOS 12 还给信息 App

00:30:57.526 --> 00:31:01.456 A:middle
iOS 12 还给信息 App

00:31:01.456 --> 00:31:02.396 A:middle
新的交互方式

00:31:02.906 --> 00:31:05.746 A:middle
在紧凑模式下

00:31:05.906 --> 00:31:07.506 A:middle
之前把信息 App

00:31:07.506 --> 00:31:09.106 A:middle
水平往下滑

00:31:09.156 --> 00:31:10.066 A:middle
就会在 App 间切换

00:31:10.746 --> 00:31:13.146 A:middle
在 iOS 12

00:31:13.206 --> 00:31:14.416 A:middle
这些水平滑动

00:31:14.416 --> 00:31:15.576 A:middle
以及水平移动的互动

00:31:15.576 --> 00:31:17.136 A:middle
可以直接

00:31:17.206 --> 00:31:19.106 A:middle
在你的 App 里使用

00:31:19.206 --> 00:31:20.506 A:middle
所以就会和你的 App 互动

00:31:20.506 --> 00:31:22.286 A:middle
而不是换成其他 App

00:31:23.106 --> 00:31:24.196 A:middle
这就是关于信息的内容

00:31:25.096 --> 00:31:27.196 A:middle
接下来是

00:31:27.246 --> 00:31:29.526 A:middle
自动填入密码和安全码

00:31:30.596 --> 00:31:33.936 A:middle
iOS 11 首先引入

00:31:34.296 --> 00:31:39.176 A:middle
为 App 自动填入密码

00:31:39.176 --> 00:31:40.796 A:middle
在 iOS 12 里

00:31:40.796 --> 00:31:42.186 A:middle
我们又进了一步

00:31:42.786 --> 00:31:45.296 A:middle
让我们暂时

00:31:45.296 --> 00:31:46.436 A:middle
先回到开头

00:31:46.436 --> 00:31:48.586 A:middle
看一下整个体验

00:31:49.146 --> 00:31:51.996 A:middle
如果用户把密码

00:31:51.996 --> 00:31:54.186 A:middle
储存在 iCloud Keychain

00:31:54.266 --> 00:31:55.726 A:middle
从 iOS 11 开始

00:31:55.726 --> 00:31:56.796 A:middle
这些密码就可以

00:31:56.866 --> 00:31:58.556 A:middle
自动填入到你的 App 的

00:31:58.556 --> 00:31:59.406 A:middle
登录流程

00:32:00.146 --> 00:32:02.206 A:middle
在 iOS 12 里

00:32:02.206 --> 00:32:04.596 A:middle
这些密码可以通过两种形式

00:32:04.686 --> 00:32:06.506 A:middle
储存到 iCloud Keychain

00:32:06.506 --> 00:32:09.006 A:middle
从登录窗口流程

00:32:09.006 --> 00:32:10.926 A:middle
和改变密码请求 UI

00:32:10.926 --> 00:32:12.086 A:middle
都可以

00:32:13.296 --> 00:32:14.666 A:middle
当用户登录后

00:32:14.956 --> 00:32:16.156 A:middle
会弹出提示

00:32:16.156 --> 00:32:17.626 A:middle
储存密码到 iCloud Keychain

00:32:18.436 --> 00:32:20.226 A:middle
在 iOS 12 里可以

00:32:20.226 --> 00:32:22.146 A:middle
在新帐户流程

00:32:22.486 --> 00:32:25.026 A:middle
和改密码流程

00:32:25.026 --> 00:32:26.496 A:middle
自动生成密码

00:32:26.896 --> 00:32:28.536 A:middle
这个很容易采用

00:32:28.896 --> 00:32:29.886 A:middle
你只需要确保

00:32:29.936 --> 00:32:31.996 A:middle
你的密码字段标记了

00:32:32.116 --> 00:32:33.856 A:middle
要么是密码文本内容类型

00:32:33.856 --> 00:32:35.906 A:middle
如果是登录字段

00:32:35.906 --> 00:32:37.726 A:middle
要么是新密码文本内容类型

00:32:37.726 --> 00:32:39.146 A:middle
如果是新帐户

00:32:39.146 --> 00:32:40.696 A:middle
或者是更改密码字段

00:32:41.336 --> 00:32:45.226 A:middle
如果你对密码

00:32:45.226 --> 00:32:47.166 A:middle
有特别的要求

00:32:47.166 --> 00:32:49.056 A:middle
比如有必须出现

00:32:49.096 --> 00:32:51.226 A:middle
或者不能出现的字符

00:32:51.226 --> 00:32:55.026 A:middle
又或者对重复字符

00:32:55.026 --> 00:32:56.586 A:middle
有上限要求

00:32:56.586 --> 00:32:58.026 A:middle
你也可以标明这些规则

00:32:58.026 --> 00:33:00.526 A:middle
这样自动生成的密码

00:32:58.026 --> 00:33:00.526 A:middle
这样自动生成的密码

00:33:00.526 --> 00:33:02.256 A:middle
就可以满足

00:33:02.256 --> 00:33:03.426 A:middle
你所有的要求

00:33:04.146 --> 00:33:06.946 A:middle
登录的时候

00:33:06.946 --> 00:33:07.896 A:middle
也许会遇到的

00:33:07.896 --> 00:33:09.706 A:middle
另外一个小麻烦就是

00:33:09.706 --> 00:33:10.716 A:middle
当你需要把验证码

00:33:10.716 --> 00:33:12.426 A:middle
从信息里复制出来

00:33:12.426 --> 00:33:15.226 A:middle
然后放入 App

00:33:15.226 --> 00:33:17.496 A:middle
IOS 12 让这一步变得非常容易

00:33:17.496 --> 00:33:19.046 A:middle
它会自动识别

00:33:19.046 --> 00:33:21.216 A:middle
这类通知

00:33:21.326 --> 00:33:23.176 A:middle
记录里面的安全码

00:33:23.176 --> 00:33:24.416 A:middle
然后显示在

00:33:24.416 --> 00:33:25.796 A:middle
快速键入候选栏里

00:33:25.836 --> 00:33:27.156 A:middle
这样很容易就可以

00:33:27.186 --> 00:33:27.656 A:middle
输入进 App

00:33:28.506 --> 00:33:29.466 A:middle
为了让这个特性可行

00:33:29.526 --> 00:33:30.726 A:middle
你唯一需要做的

00:33:30.726 --> 00:33:32.086 A:middle
就是确保

00:33:32.086 --> 00:33:34.126 A:middle
你使用的是标准的

00:33:34.126 --> 00:33:37.126 A:middle
iOS text interaction API

00:33:37.196 --> 00:33:40.786 A:middle
来接收这些内容

00:33:40.866 --> 00:33:42.126 A:middle
这些新特性

00:33:42.316 --> 00:33:44.196 A:middle
使得 iOS 12 可以让你

00:33:44.286 --> 00:33:47.456 A:middle
使用每项服务

00:33:47.686 --> 00:33:49.546 A:middle
都可以有更安全又独特的密码

00:33:49.626 --> 00:33:51.426 A:middle
而你完全不需要

00:33:51.426 --> 00:33:52.996 A:middle
记住或者打出来

00:33:52.996 --> 00:33:55.636 A:middle
更多的内容

00:33:55.636 --> 00:33:57.036 A:middle
在这周晚些时候的

00:33:57.176 --> 00:33:58.426 A:middle
自动增强密码和自动填入安全码会议

00:33:58.426 --> 00:34:01.096 A:middle
会有介绍

00:33:58.426 --> 00:34:01.096 A:middle
会有介绍

00:34:01.576 --> 00:34:04.286 A:middle
最后的 API 改进话题

00:34:04.286 --> 00:34:05.826 A:middle
其实有一点回顾性质

00:34:05.826 --> 00:34:08.366 A:middle
但是我们添加了一些内容

00:34:09.505 --> 00:34:11.356 A:middle
在 iOS 11 里 我们引入了

00:34:11.356 --> 00:34:12.176 A:middle
安全区域嵌入

00:34:12.766 --> 00:34:14.666 A:middle
安全区域嵌入能够

00:34:14.775 --> 00:34:16.716 A:middle
很好地用来

00:34:16.716 --> 00:34:19.446 A:middle
确保你的内容不会和

00:34:19.596 --> 00:34:21.525 A:middle
其他用户界面的部分重叠

00:34:21.525 --> 00:34:24.576 A:middle
例如屏幕顶端和下部的栏

00:34:25.906 --> 00:34:27.755 A:middle
在 iPhone 这个很好用

00:34:27.755 --> 00:34:28.726 A:middle
因为栏都比较

00:34:28.726 --> 00:34:30.886 A:middle
简单 但其实

00:34:30.976 --> 00:34:31.936 A:middle
它也很强大

00:34:32.565 --> 00:34:34.005 A:middle
安全区域嵌入

00:34:34.076 --> 00:34:35.426 A:middle
为你 App 的

00:34:35.426 --> 00:34:37.596 A:middle
任何本地坐标空间

00:34:37.596 --> 00:34:39.795 A:middle
提供安全区域坐标

00:34:39.795 --> 00:34:41.266 A:middle
所以可以应用于

00:34:41.266 --> 00:34:43.646 A:middle
更复杂的界面

00:34:43.646 --> 00:34:45.466 A:middle
比如 iPad 分屏视图

00:34:45.755 --> 00:34:48.346 A:middle
分屏视图的主视图和

00:34:48.346 --> 00:34:49.706 A:middle
细节部分

00:34:49.706 --> 00:34:50.186 A:middle
包含不同高度的栏

00:34:50.735 --> 00:34:54.116 A:middle
安全区域嵌入确保

00:34:54.116 --> 00:34:55.326 A:middle
在任何视图下的

00:34:55.326 --> 00:34:56.426 A:middle
所在分屏内

00:34:56.426 --> 00:34:59.156 A:middle
都不会被这些栏覆盖

00:35:01.156 --> 00:35:02.606 A:middle
所以在长方形屏幕的设备上

00:35:02.606 --> 00:35:04.366 A:middle
这个很好用

00:35:04.866 --> 00:35:06.906 A:middle
但是在非长方形屏幕

00:35:06.906 --> 00:35:07.946 A:middle
比如 iPhone X 上

00:35:08.126 --> 00:35:10.286 A:middle
它也同样强大

00:35:11.676 --> 00:35:12.986 A:middle
跟有 home 键的设备相比

00:35:12.986 --> 00:35:14.916 A:middle
我们可以看到

00:35:14.916 --> 00:35:16.236 A:middle
顶部和底部的栏

00:35:16.236 --> 00:35:17.066 A:middle
都比较大

00:35:17.686 --> 00:35:19.956 A:middle
显然安全区域嵌入

00:35:19.956 --> 00:35:21.286 A:middle
适应了这个尺寸

00:35:21.946 --> 00:35:23.796 A:middle
iPhone X 特殊的是

00:35:23.846 --> 00:35:25.746 A:middle
没有栏显示的时候

00:35:25.746 --> 00:35:27.226 A:middle
安全区域嵌入依然存在

00:35:27.296 --> 00:35:29.586 A:middle
这同样适用于

00:35:29.586 --> 00:35:31.806 A:middle
横屏模式

00:35:31.806 --> 00:35:32.826 A:middle
这样可以确保

00:35:32.826 --> 00:35:34.596 A:middle
你可以有一个长方形区域

00:35:34.596 --> 00:35:36.426 A:middle
来显示内容

00:35:36.426 --> 00:35:40.846 A:middle
而不会被截出去

00:35:41.036 --> 00:35:43.426 A:middle
所以我想感谢

00:35:43.426 --> 00:35:44.856 A:middle
所有采用

00:35:44.956 --> 00:35:46.256 A:middle
安全区域嵌入

00:35:46.256 --> 00:35:48.306 A:middle
和为 iPhone X 更新 App 的各位

00:35:48.536 --> 00:35:49.806 A:middle
过去的几年里

00:35:49.806 --> 00:35:51.076 A:middle
都有很好的体验

00:35:51.146 --> 00:35:52.326 A:middle
而且我相信你们大多数

00:35:52.326 --> 00:35:52.996 A:middle
已经这么做了

00:35:53.536 --> 00:35:55.206 A:middle
如果还没有

00:35:55.206 --> 00:35:56.176 A:middle
现在是个好时机

00:35:56.836 --> 00:35:57.986 A:middle
你们的用户

00:35:57.986 --> 00:35:59.466 A:middle
一定更喜欢与时俱进的 App

00:35:59.466 --> 00:36:01.716 A:middle
配合 iPhone X 更新

00:35:59.466 --> 00:36:01.716 A:middle
配合 iPhone X 更新

00:36:01.756 --> 00:36:03.256 A:middle
能够很好的

00:36:03.256 --> 00:36:04.596 A:middle
体现这一点

00:36:05.166 --> 00:36:06.606 A:middle
所以如果还没有

00:36:06.606 --> 00:36:07.126 A:middle
赶紧去更新吧

00:36:07.126 --> 00:36:08.626 A:middle
为了确保

00:36:08.626 --> 00:36:10.136 A:middle
你能够得到所有需要的信息

00:36:10.136 --> 00:36:13.526 A:middle
请关注这周晚些时候的

00:36:13.526 --> 00:36:15.226 A:middle
适用所有大小和形状的 UIKit App 会议

00:36:15.446 --> 00:36:16.616 A:middle
这个课程会给你讲

00:36:16.616 --> 00:36:18.486 A:middle
安全区域嵌入

00:36:18.486 --> 00:36:22.336 A:middle
和其他相关的嵌入 API 的内容

00:36:22.336 --> 00:36:23.616 A:middle
确保你的 App

00:36:23.676 --> 00:36:27.836 A:middle
能够适应所有的大小和形状

00:36:28.086 --> 00:36:29.186 A:middle
这就是关于框架更新

00:36:29.816 --> 00:36:31.686 A:middle
和 API 改进的所有内容

00:36:31.986 --> 00:36:33.606 A:middle
接下来 我们再说一下

00:36:33.606 --> 00:36:34.296 A:middle
Siri 捷径

00:36:34.986 --> 00:36:37.056 A:middle
Siri 捷径是

00:36:37.056 --> 00:36:39.316 A:middle
iOS 12 里的一个很棒的新 API

00:36:41.516 --> 00:36:42.886 A:middle
Siri 捷径

00:36:42.886 --> 00:36:44.716 A:middle
可以让 App 的常用操作

00:36:45.416 --> 00:36:48.096 A:middle
通过 Siri 很容易地调用

00:36:49.526 --> 00:36:50.726 A:middle
Siri 捷径

00:36:50.726 --> 00:36:52.646 A:middle
可以在封面

00:36:52.646 --> 00:36:54.286 A:middle
预先显示

00:36:54.416 --> 00:36:55.466 A:middle
以便在你希望的

00:36:55.466 --> 00:36:57.426 A:middle
时间和地点

00:36:57.426 --> 00:37:00.436 A:middle
访问常用操作

00:36:57.426 --> 00:37:00.436 A:middle
访问常用操作

00:37:00.606 --> 00:37:01.866 A:middle
他们还可以

00:37:01.866 --> 00:37:03.456 A:middle
显示在 Apple Watch 的

00:37:03.456 --> 00:37:05.126 A:middle
Siri watch face 上

00:37:06.696 --> 00:37:08.246 A:middle
Siri 操作不光可以

00:37:08.276 --> 00:37:09.916 A:middle
预先显示

00:37:09.916 --> 00:37:11.236 A:middle
还可以设置成

00:37:11.236 --> 00:37:13.596 A:middle
用个性化声音短语执行

00:37:17.256 --> 00:37:19.296 A:middle
给你的 App 添加

00:37:19.296 --> 00:37:21.786 A:middle
Siri 行为支持非常容易

00:37:21.786 --> 00:37:22.946 A:middle
有两个 API 可以用

00:37:23.266 --> 00:37:24.826 A:middle
NSUserActivity

00:37:24.826 --> 00:37:26.306 A:middle
你可能已经为了支持

00:37:26.306 --> 00:37:28.916 A:middle
接力和聚焦整合

00:37:28.916 --> 00:37:29.886 A:middle
开始使用它了

00:37:30.356 --> 00:37:32.016 A:middle
还有一个 Siri Intents 支持

00:37:32.016 --> 00:37:33.346 A:middle
为了应对更复杂的情况

00:37:33.396 --> 00:37:35.316 A:middle
例如有更多的

00:37:35.316 --> 00:37:36.246 A:middle
个性化互动时

00:37:36.816 --> 00:37:38.156 A:middle
我们先看一下

00:37:38.156 --> 00:37:38.606 A:middle
NSUserActivity

00:37:39.406 --> 00:37:40.466 A:middle
我刚才说过

00:37:40.466 --> 00:37:42.056 A:middle
NSUserActivity 对接力和聚焦

00:37:42.056 --> 00:37:43.856 A:middle
是一个常见的 API

00:37:43.856 --> 00:37:45.116 A:middle
当你的 Siri 捷径

00:37:45.116 --> 00:37:46.826 A:middle
需要把你的用户

00:37:46.826 --> 00:37:48.416 A:middle
转回 App 中一个特定位置时

00:37:48.466 --> 00:37:50.116 A:middle
这个 API 也很有用

00:37:50.316 --> 00:37:51.516 A:middle
比如加载一个特定的

00:37:51.516 --> 00:37:54.226 A:middle
信息或者文件

00:37:54.226 --> 00:37:55.056 A:middle
这跟你切换到

00:37:55.056 --> 00:37:56.516 A:middle
另一个设备时是一样的

00:37:57.176 --> 00:37:58.706 A:middle
如果你已经这么做了

00:37:58.806 --> 00:38:00.336 A:middle
为 Siri 捷径添加支持

00:37:58.806 --> 00:38:00.336 A:middle
为 Siri 捷径添加支持

00:38:00.336 --> 00:38:01.256 A:middle
非常容易

00:38:01.516 --> 00:38:02.696 A:middle
只需要把 EligibleforPrediction

00:38:02.696 --> 00:38:03.686 A:middle
设置为 true

00:38:04.096 --> 00:38:05.116 A:middle
要是你还没有这么做

00:38:05.116 --> 00:38:06.596 A:middle
如果你的捷径

00:38:06.776 --> 00:38:07.816 A:middle
符合这几个类别

00:38:07.816 --> 00:38:08.486 A:middle
那这样做或很好

00:38:09.836 --> 00:38:11.846 A:middle
如果你的 App 有

00:38:11.846 --> 00:38:13.426 A:middle
更多的个性化需求

00:38:13.426 --> 00:38:14.886 A:middle
或者你就是想要更好地控制

00:38:14.886 --> 00:38:16.856 A:middle
你可以采用 SiriKit Intents API

00:38:17.836 --> 00:38:18.986 A:middle
SiriKit Intents 提供

00:38:18.986 --> 00:38:20.636 A:middle
很多预先设定的 Intent

00:38:20.796 --> 00:38:22.966 A:middle
你可以很简单地采用

00:38:23.036 --> 00:38:24.456 A:middle
这跟前几年的

00:38:24.456 --> 00:38:25.866 A:middle
SiriKit Intents 是一样的

00:38:26.666 --> 00:38:27.696 A:middle
如果你的 App 有

00:38:27.896 --> 00:38:29.396 A:middle
更多的个性化行为

00:38:29.396 --> 00:38:30.966 A:middle
在 iOS 12 你可以定义

00:38:30.966 --> 00:38:32.936 A:middle
你自己的个性化 Intent

00:38:33.736 --> 00:38:35.176 A:middle
个性化 Intent

00:38:35.216 --> 00:38:36.696 A:middle
可以很灵活

00:38:36.696 --> 00:38:37.336 A:middle
满足你的要求

00:38:37.846 --> 00:38:38.956 A:middle
这里 我创建了一个

00:38:38.956 --> 00:38:40.526 A:middle
来帮助我做明年的

00:38:40.526 --> 00:38:41.296 A:middle
WWDC 幻灯片

00:38:42.436 --> 00:38:45.066 A:middle
放置你的 Intent 的类别

00:38:45.066 --> 00:38:45.966 A:middle
其实非常广泛

00:38:46.236 --> 00:38:48.236 A:middle
这里我用的是创建类别

00:38:48.766 --> 00:38:50.306 A:middle
但是如果你的 Intent

00:38:50.306 --> 00:38:51.866 A:middle
比这个还宽泛

00:38:51.866 --> 00:38:53.046 A:middle
有更加宽泛的选择

00:38:53.046 --> 00:38:56.336 A:middle
比如运行和开始

00:38:57.776 --> 00:38:59.266 A:middle
创建好你的 Intent 之后

00:38:59.266 --> 00:39:01.586 A:middle
你还希望你的用户可以

00:38:59.266 --> 00:39:01.586 A:middle
你还希望你的用户可以

00:39:01.586 --> 00:39:02.916 A:middle
很容易地创建

00:39:02.916 --> 00:39:03.426 A:middle
个性化捷径

00:39:03.926 --> 00:39:05.526 A:middle
现在你的 App 里

00:39:05.526 --> 00:39:06.796 A:middle
有一个 API 可以让

00:39:06.796 --> 00:39:08.396 A:middle
你的用户创建

00:39:08.466 --> 00:39:09.466 A:middle
个性化声音捷径

00:39:09.876 --> 00:39:10.816 A:middle
这个按键可以

00:39:10.816 --> 00:39:12.066 A:middle
打开一个新的面板

00:39:12.326 --> 00:39:14.336 A:middle
操作完之后

00:39:14.336 --> 00:39:15.956 A:middle
可以在我的 App 里

00:39:16.036 --> 00:39:17.346 A:middle
创建一个新的捷径

00:39:17.936 --> 00:39:18.666 A:middle
所以如果你在

00:39:18.666 --> 00:39:19.716 A:middle
早上点咖啡

00:39:19.716 --> 00:39:21.326 A:middle
然后你觉得这是

00:39:22.086 --> 00:39:23.756 A:middle
以后可能会重复的事情

00:39:23.756 --> 00:39:25.176 A:middle
这是个很好的机会

00:39:25.176 --> 00:39:27.186 A:middle
来创建一个

00:39:27.266 --> 00:39:28.736 A:middle
Siri 捷径 以便下次使用

00:39:29.616 --> 00:39:30.596 A:middle
你还可以

00:39:30.596 --> 00:39:32.066 A:middle
把这些捷径结合在一起

00:39:32.066 --> 00:39:35.196 A:middle
用 App Store 里的捷径 App

00:39:35.696 --> 00:39:37.176 A:middle
所有这些

00:39:37.176 --> 00:39:38.056 A:middle
和更多内容

00:39:38.056 --> 00:39:40.326 A:middle
会在这周晚些时候的

00:39:40.856 --> 00:39:41.776 A:middle
Siri 捷径介绍

00:39:41.776 --> 00:39:44.006 A:middle
创建声音 Siri 捷径

00:39:44.006 --> 00:39:45.326 A:middle
和 Siri Watch Face 上的 Siri 捷径

00:39:45.526 --> 00:39:45.976 A:middle
会议了解到

00:39:46.136 --> 00:39:48.886 A:middle
今天我们说了很多

00:39:48.886 --> 00:39:50.376 A:middle
iOS 12 的新功能

00:39:50.466 --> 00:39:52.796 A:middle
不过还有一些会议

00:39:52.796 --> 00:39:54.076 A:middle
很值得一提

00:39:54.076 --> 00:39:56.286 A:middle
虽然可能讲的不是新功能

00:39:56.886 --> 00:39:58.386 A:middle
如果你刚开始

00:39:58.386 --> 00:40:00.386 A:middle
为 iOS 创建 App

00:39:58.386 --> 00:40:00.386 A:middle
为 iOS 创建 App

00:40:00.386 --> 00:40:01.296 A:middle
有一个很好的会议叫

00:40:01.296 --> 00:40:03.556 A:middle
我有一个关于 App 的想法

00:40:03.796 --> 00:40:05.366 A:middle
一定要去

00:40:06.426 --> 00:40:07.516 A:middle
如果你已经有一个 App 了

00:40:07.516 --> 00:40:08.636 A:middle
只是想更加完善

00:40:08.636 --> 00:40:10.106 A:middle
也有一些很好的

00:40:10.106 --> 00:40:11.776 A:middle
会议推荐

00:40:11.776 --> 00:40:13.646 A:middle
UI Collection View 介绍

00:40:13.646 --> 00:40:14.996 A:middle
和为你的 iOS App 添加乐趣

00:40:15.846 --> 00:40:17.516 A:middle
非常感谢

00:40:17.516 --> 00:40:18.946 A:middle
你们今天来到这里

00:40:19.406 --> 00:40:20.266 A:middle
希望在实验室再次看到你们

00:40:20.266 --> 00:40:21.766 A:middle
祝你们拥有

00:40:21.846 --> 00:40:22.576 A:middle
愉快的一周 谢谢

00:40:23.516 --> 00:40:30.570 A:middle
[ 掌声 ]
