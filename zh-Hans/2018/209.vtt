WEBVTT

00:00:07.516 --> 00:00:15.500 A:middle
[ 音乐 ]

00:00:21.516 --> 00:00:29.106 A:middle
[ 掌声 ]

00:00:29.606 --> 00:00:30.276 A:middle
&gt;&gt; 下午好

00:00:30.686 --> 00:00:31.776 A:middle
我的名字是 Ali Ozer

00:00:31.916 --> 00:00:33.346 A:middle
我和我的同事们 Chris

00:00:33.346 --> 00:00:34.876 A:middle
Dreessen 和 Jesse Donaldson

00:00:35.196 --> 00:00:36.206 A:middle
将要一起为大家介绍

00:00:36.206 --> 00:00:38.596 A:middle
macOS Mojave Cocoa 的新功能

00:00:40.986 --> 00:00:42.286 A:middle
如大家昨日所见

00:00:42.286 --> 00:00:43.696 A:middle
今年我们在 AppKit 新增了

00:00:43.696 --> 00:00:44.456 A:middle
一些惊人的新功能

00:00:44.976 --> 00:00:45.936 A:middle
我们将会谈到

00:00:45.936 --> 00:00:47.826 A:middle
如下的几个问题

00:00:48.286 --> 00:00:49.106 A:middle
我们将会讨论到

00:00:49.106 --> 00:00:50.606 A:middle
我们一直在做的 API 改进

00:00:51.036 --> 00:00:52.476 A:middle
令人惊艳的新的黑暗模式

00:00:52.476 --> 00:00:54.496 A:middle
以及相关的功能

00:00:54.496 --> 00:00:56.476 A:middle
在 layer backing 做出的一些改动

00:00:56.476 --> 00:00:57.616 A:middle
以及定制的快捷操作

00:00:58.896 --> 00:00:59.776 A:middle
那么 让我们就进入这些内容的讲解吧

00:01:00.396 --> 00:01:01.986 A:middle
现在 正如你们知道的

00:01:01.986 --> 00:01:04.105 A:middle
我们对我们的 API 感到自豪

00:01:04.105 --> 00:01:05.876 A:middle
而且我们的目标一直是

00:01:05.876 --> 00:01:07.446 A:middle
希望 API 可以是有效的

00:01:07.446 --> 00:01:08.686 A:middle
连续的和强大的

00:01:09.796 --> 00:01:10.756 A:middle
依据这个理念

00:01:10.756 --> 00:01:12.806 A:middle
我们一直在改进

00:01:12.806 --> 00:01:14.516 A:middle
提高 Objective-C

00:01:14.516 --> 00:01:16.086 A:middle
和 API 的 Swift exposure

00:01:16.086 --> 00:01:18.436 A:middle
而且 这不仅仅存在于 AppKit

00:01:18.436 --> 00:01:20.306 A:middle
或者 Foundation 其他的体系中

00:01:20.306 --> 00:01:21.906 A:middle
包括 UIKit 中也存在

00:01:21.956 --> 00:01:23.166 A:middle
以及你们今天早上可能也听到过的

00:01:23.166 --> 00:01:24.966 A:middle
Cocoa Touch 有什么新的改变

00:01:26.226 --> 00:01:28.236 A:middle
现在 我们正在做的 API 的改变

00:01:28.236 --> 00:01:30.586 A:middle
在 Objective-C 是完全源头可兼容的

00:01:30.586 --> 00:01:32.646 A:middle
而且我们也期待 到我们 GM SDK 的时候

00:01:32.646 --> 00:01:34.466 A:middle
它们在 Swift 会是

00:01:34.466 --> 00:01:36.846 A:middle
100% 可移动的

00:01:37.516 --> 00:01:38.756 A:middle
那么 基于以上 让我们看一下

00:01:38.756 --> 00:01:39.906 A:middle
在此次的发布中

00:01:39.906 --> 00:01:40.886 A:middle
API 的一些改进

00:01:41.416 --> 00:01:44.226 A:middle
首先我要说一下

00:01:44.656 --> 00:01:47.036 A:middle
字符串种类的一些更新

00:01:48.296 --> 00:01:49.486 A:middle
在上一个发布中 我们介绍了

00:01:49.486 --> 00:01:51.016 A:middle
字符串枚举种类作为一种方式

00:01:51.016 --> 00:01:52.476 A:middle
去一起搜集成群相关的

00:01:52.476 --> 00:01:53.616 A:middle
字符串常数

00:01:54.286 --> 00:01:55.696 A:middle
这些帮助 API

00:01:55.746 --> 00:01:57.236 A:middle
在这些种类中更加清晰

00:01:58.896 --> 00:02:00.116 A:middle
以下是一些例子

00:01:58.896 --> 00:02:00.116 A:middle
以下是一些例子

00:02:00.326 --> 00:02:03.286 A:middle
第一个是 NS STRING ENUM

00:02:03.596 --> 00:02:05.356 A:middle
这被用于字符串枚举

00:02:05.356 --> 00:02:07.206 A:middle
枚举中 我们提供框架之外的

00:02:07.206 --> 00:02:09.666 A:middle
同时框架也无法进行扩展

00:02:09.666 --> 00:02:12.016 A:middle
因此是固定的一套值

00:02:12.536 --> 00:02:14.556 A:middle
旁边的这个 NS EXTENSIBLE

00:02:14.556 --> 00:02:17.456 A:middle
STRING ENUM 是被用于

00:02:17.456 --> 00:02:19.416 A:middle
declare 字符串枚举

00:02:19.676 --> 00:02:20.646 A:middle
此处我们可以提供一些

00:02:20.646 --> 00:02:22.346 A:middle
box 之外的值 但其他的

00:02:22.346 --> 00:02:23.936 A:middle
框架和 App 也可以

00:02:23.936 --> 00:02:25.746 A:middle
加入到这组设定中

00:02:26.556 --> 00:02:28.176 A:middle
那么这里我们做了两个改变

00:02:28.526 --> 00:02:29.866 A:middle
第一个是简单的

00:02:30.276 --> 00:02:31.896 A:middle
我们很简单地用它们的

00:02:31.896 --> 00:02:34.766 A:middle
类型变体取代了 NS STRING ENUM 和

00:02:34.766 --> 00:02:36.226 A:middle
NS STRING EXTENSIBLE ENUM

00:02:36.226 --> 00:02:38.076 A:middle
这是一个很有效的误操作变更

00:02:38.336 --> 00:02:39.376 A:middle
这些更加常见的种类

00:02:39.376 --> 00:02:40.866 A:middle
的相同声明

00:02:41.196 --> 00:02:43.056 A:middle
因此 你的代码 调用站点或者任何东西

00:02:43.056 --> 00:02:44.076 A:middle
都不需要改变

00:02:44.736 --> 00:02:46.216 A:middle
下一个是 NSImageName

00:02:46.876 --> 00:02:49.066 A:middle
经历了更大一些的改变

00:02:49.066 --> 00:02:50.726 A:middle
一个更加显著的改变

00:02:50.726 --> 00:02:52.256 A:middle
与字符串枚举不同

00:02:52.256 --> 00:02:54.226 A:middle
它被声明是 NS SWIFT BRIDGED

00:02:54.226 --> 00:02:56.766 A:middle
TYPEDEF 实际上是一个定义类型

00:02:56.766 --> 00:02:58.456 A:middle
现在 这就是 Swift

00:02:58.456 --> 00:02:59.716 A:middle
显示出来的样子

00:03:00.926 --> 00:03:03.846 A:middle
在 Swift 4 中 NSImage.Name 作为结构

00:03:03.846 --> 00:03:05.216 A:middle
出现 这个结构就是

00:03:05.216 --> 00:03:07.596 A:middle
你声明字符串枚举的形式

00:03:07.926 --> 00:03:09.886 A:middle
在 Swift 4.2 中 它作为一个 TypeAlias

00:03:09.886 --> 00:03:12.276 A:middle
一个简单的 古老的

00:03:12.366 --> 00:03:14.936 A:middle
普通 TypeAlias 更加简单

00:03:16.046 --> 00:03:17.726 A:middle
因此 问题就是 为什么我们要如此做呢

00:03:18.136 --> 00:03:19.826 A:middle
让我们来看看一个调用站点的例子

00:03:22.056 --> 00:03:24.786 A:middle
这里在 Swift 4 中 就是你如何提取

00:03:24.826 --> 00:03:26.486 A:middle
一个字符串 使用命名方式在其中

00:03:26.486 --> 00:03:29.606 A:middle
创建一个 NSImage 的操作方式

00:03:29.976 --> 00:03:31.686 A:middle
在这里你可以看到

00:03:31.686 --> 00:03:32.986 A:middle
你会提取这个字符串

00:03:32.986 --> 00:03:34.936 A:middle
我们正将它转换成 一个 NSImage.Name

00:03:34.936 --> 00:03:36.126 A:middle
再变成 named 在

00:03:36.126 --> 00:03:37.456 A:middle
我们调用 NSImage named 之前

00:03:37.966 --> 00:03:38.796 A:middle
由于这里不得不重复 NSImage.Name

00:03:38.796 --> 00:03:42.316 A:middle
这种操作并没有特别流线型的体验

00:03:42.956 --> 00:03:44.806 A:middle
现在 由于 Swift 4.2 中的改变

00:03:45.296 --> 00:03:46.206 A:middle
这就是我们需要写入的所有

00:03:46.286 --> 00:03:47.536 A:middle
你无需一定要转换为

00:03:47.536 --> 00:03:49.246 A:middle
NSImage name 这种操作会更顺畅

00:03:49.246 --> 00:03:50.736 A:middle
更清晰一些

00:03:50.846 --> 00:03:51.846 A:middle
也会更少冗杂

00:03:52.426 --> 00:03:53.636 A:middle
因此我们相信这种定义类型

00:03:53.636 --> 00:03:55.976 A:middle
方式对于传递值更为合适

00:03:56.516 --> 00:04:01.126 A:middle
［ 掌声 ］

00:03:56.516 --> 00:04:01.126 A:middle
［ 掌声 ］

00:04:01.626 --> 00:04:02.916 A:middle
是的 我们也听到你们有些人说起来

00:04:04.616 --> 00:04:05.856 A:middle
所以 我们相信这种方式

00:04:05.856 --> 00:04:08.636 A:middle
对于传递值 比如 resource names 或者标识符

00:04:08.636 --> 00:04:09.396 A:middle
更加合适

00:04:09.396 --> 00:04:11.756 A:middle
基本上而言 值并不会被

00:04:11.756 --> 00:04:13.266 A:middle
框架所体现

00:04:13.266 --> 00:04:14.926 A:middle
它们只是被用于一个传递的样式

00:04:15.156 --> 00:04:16.886 A:middle
图片名称 颜色名称

00:04:16.886 --> 00:04:18.875 A:middle
以及窗口框自动保存的名称等等

00:04:18.875 --> 00:04:21.136 A:middle
以及窗口框自动保存的名称的种类

00:04:21.245 --> 00:04:23.386 A:middle
现在 需要注意的是

00:04:23.386 --> 00:04:25.056 A:middle
即使是使用这种新方式

00:04:25.096 --> 00:04:27.046 A:middle
你们依然拥有特定的 API 所具有的好处

00:04:27.386 --> 00:04:30.146 A:middle
这是对 NSImage 命名方式的声明

00:04:30.146 --> 00:04:31.226 A:middle
你还要注意

00:04:31.226 --> 00:04:33.656 A:middle
这里讲的还是 NSImage.Name

00:04:33.656 --> 00:04:34.166 A:middle
与字符串截然相反

00:04:34.166 --> 00:04:35.676 A:middle
所以 我们仍然会遇到它

00:04:36.516 --> 00:04:37.926 A:middle
现在 这就是所有种类的清单

00:04:37.926 --> 00:04:39.086 A:middle
我们对 NSAppKit 也进行了这种操作

00:04:39.136 --> 00:04:43.656 A:middle
结果证明许多种类都能从中获益

00:04:45.356 --> 00:04:46.746 A:middle
而且不仅仅是这一个

00:04:46.746 --> 00:04:47.606 A:middle
更是这一套

00:04:47.706 --> 00:04:50.236 A:middle
因此 许多种类在这个样式里面都发生了改变

00:04:52.126 --> 00:04:54.546 A:middle
接下来 我要讲一下

00:04:54.546 --> 00:04:55.816 A:middle
一般的前缀

00:04:56.376 --> 00:04:57.446 A:middle
如你们在过去几年中所见

00:04:57.446 --> 00:04:58.576 A:middle
随着时间流逝

00:04:58.576 --> 00:05:00.866 A:middle
我们已经逐步从多年前使用的一般后缀

00:04:58.576 --> 00:05:00.866 A:middle
我们已经逐步从多年前使用的一般后缀

00:05:00.866 --> 00:05:02.436 A:middle
使用的一般后缀

00:05:02.436 --> 00:05:04.796 A:middle
转移到 Objective-C 中的一般前缀

00:05:05.186 --> 00:05:07.466 A:middle
使用一般前缀可以使得名字成组合

00:05:07.466 --> 00:05:08.936 A:middle
使得名字成组合

00:05:08.936 --> 00:05:10.446 A:middle
也会更容易被发现

00:05:10.686 --> 00:05:12.266 A:middle
并在 Swift 中遇到

00:05:13.586 --> 00:05:16.776 A:middle
那么 让我们来看下面这个例子

00:05:16.846 --> 00:05:18.996 A:middle
这是 NSLineJoinStyle

00:05:18.996 --> 00:05:21.156 A:middle
出现在 10.13 SDK

00:05:21.156 --> 00:05:23.866 A:middle
这是它在 10.14 中显示的样子

00:05:24.226 --> 00:05:25.866 A:middle
你会发现枚举的值

00:05:25.866 --> 00:05:26.786 A:middle
比如说

00:05:26.826 --> 00:05:28.516 A:middle
MiterLineJoinStyle 现在已经变成了

00:05:28.546 --> 00:05:30.316 A:middle
LineJoinStyleMiter

00:05:30.936 --> 00:05:32.486 A:middle
所以 因为一个一般前缀

00:05:33.116 --> 00:05:34.936 A:middle
Swift 的显示从

00:05:35.436 --> 00:05:38.606 A:middle
miterLineJoinStyle 变成了只有 miter

00:05:38.886 --> 00:05:40.616 A:middle
因此 你可以看到 你不必

00:05:40.616 --> 00:05:41.756 A:middle
再重复输入

00:05:41.756 --> 00:05:43.076 A:middle
在调用站点体现得更为明显

00:05:43.076 --> 00:05:44.506 A:middle
更加清晰

00:05:44.846 --> 00:05:46.936 A:middle
体验这么好 此处需要一个笑脸的表情

00:05:47.151 --> 00:05:49.151 A:middle
［ 掌声 ］

00:05:49.286 --> 00:05:49.876 A:middle
谢谢

00:05:51.186 --> 00:05:53.246 A:middle
同时 我们对很多之前没有进行过

00:05:53.246 --> 00:05:54.366 A:middle
这种改变的其他种类

00:05:54.756 --> 00:05:56.396 A:middle
也应用了此改变的特性

00:05:56.396 --> 00:05:57.956 A:middle
以下是这些种类的清单

00:06:00.496 --> 00:06:01.376 A:middle
接下来 我想说的是

00:06:01.376 --> 00:06:02.506 A:middle
形式化的协议

00:06:03.446 --> 00:06:04.966 A:middle
在过去的时间里 我们用的是

00:06:04.966 --> 00:06:06.936 A:middle
非正式协议

00:06:06.936 --> 00:06:08.176 A:middle
主要就是 NSObject 上面的种类

00:06:08.246 --> 00:06:09.556 A:middle
将相关的方法

00:06:09.596 --> 00:06:10.356 A:middle
组合在一起

00:06:10.966 --> 00:06:11.906 A:middle
那时起 我们还增加了

00:06:11.906 --> 00:06:13.056 A:middle
一些功能

00:06:13.056 --> 00:06:14.846 A:middle
比如协议上的可选方法等等

00:06:14.846 --> 00:06:17.096 A:middle
我们也在可能的时候 将其转换成正式协议

00:06:17.716 --> 00:06:19.336 A:middle
下面 我将要给你们展示

00:06:19.336 --> 00:06:20.996 A:middle
我们操作的其中的

00:06:20.996 --> 00:06:21.476 A:middle
一个例子

00:06:23.156 --> 00:06:24.056 A:middle
这就是这个方法

00:06:24.116 --> 00:06:26.106 A:middle
validateMenuItem 它曾是一个

00:06:26.106 --> 00:06:28.826 A:middle
非正式协议

00:06:28.826 --> 00:06:31.026 A:middle
在 10.13 中的一个分类对象

00:06:31.346 --> 00:06:32.526 A:middle
现在 它是一个正式协议

00:06:32.526 --> 00:06:34.376 A:middle
称为 NSMenuItemValidation

00:06:34.376 --> 00:06:35.216 A:middle
其中包含着方法

00:06:35.706 --> 00:06:37.336 A:middle
Swift 的显示从

00:06:37.336 --> 00:06:39.866 A:middle
一个扩展 NSObject 变成一个

00:06:39.866 --> 00:06:41.016 A:middle
正式协议

00:06:41.016 --> 00:06:42.886 A:middle
当然就是 Swift 4.2 中的

00:06:42.886 --> 00:06:43.566 A:middle
NSMenuItemValidation

00:06:43.936 --> 00:06:44.986 A:middle
当然了 这里的好处就是

00:06:44.986 --> 00:06:46.846 A:middle
执行菜单项目验证的对象

00:06:46.846 --> 00:06:48.416 A:middle
现在有了一种方式

00:06:48.596 --> 00:06:49.956 A:middle
可以正式声明

00:06:49.956 --> 00:06:51.506 A:middle
它们是遵照这个协议来进行操作的

00:06:52.096 --> 00:06:53.426 A:middle
我想再说一遍 我们很喜欢这样

00:06:53.426 --> 00:06:55.246 A:middle
对许多其他的 API 我们也做了这样的 改造

00:06:55.806 --> 00:06:57.656 A:middle
那么 这就是我们在 AppKit 中加入的

00:06:57.656 --> 00:06:59.586 A:middle
正式协议的全部清单

00:07:00.056 --> 00:07:01.136 A:middle
你会发现诸如颜色改变

00:07:01.136 --> 00:07:02.486 A:middle
字体改变

00:07:02.646 --> 00:07:04.846 A:middle
NSEditor NSEditorRegistration

00:07:05.176 --> 00:07:06.476 A:middle
将相关绑定的方法等等

00:07:06.516 --> 00:07:07.816 A:middle
组合在一起

00:07:07.816 --> 00:07:09.236 A:middle
这就是新的

00:07:09.236 --> 00:07:10.306 A:middle
正式协议的清单

00:07:12.016 --> 00:07:13.066 A:middle
接下来 我想要说一说

00:07:13.066 --> 00:07:14.876 A:middle
直接的实例变量访问

00:07:15.826 --> 00:07:19.716 A:middle
目前 我们的 API 几乎所有的

00:07:19.716 --> 00:07:21.096 A:middle
实例变量

00:07:21.196 --> 00:07:22.136 A:middle
都是私密的

00:07:22.586 --> 00:07:24.346 A:middle
但是 我们已经说过

00:07:24.736 --> 00:07:25.826 A:middle
他们已经以某一种方式被声明

00:07:25.826 --> 00:07:27.156 A:middle
尤其是在一些比较老的 AppKit 类

00:07:27.186 --> 00:07:29.466 A:middle
子类被允许

00:07:29.556 --> 00:07:31.256 A:middle
接触到实例变量

00:07:31.526 --> 00:07:33.216 A:middle
直接获取到这些实例变量

00:07:33.716 --> 00:07:34.816 A:middle
现在 你们中的一些人甚至

00:07:34.816 --> 00:07:36.286 A:middle
没有意识到这个 所以请不要

00:07:36.286 --> 00:07:37.356 A:middle
直接找到然后开始使用

00:07:37.706 --> 00:07:39.576 A:middle
因为这可能是之前旧的代码

00:07:39.576 --> 00:07:40.956 A:middle
我敢肯定这些代码你都没有写过

00:07:40.956 --> 00:07:42.656 A:middle
可能是直接从前人那里获得的

00:07:42.656 --> 00:07:44.316 A:middle
这些代码可能会直接使用实例变量

00:07:44.766 --> 00:07:46.306 A:middle
所以 现在来讲

00:07:46.306 --> 00:07:47.666 A:middle
我们将会

00:07:47.666 --> 00:07:50.656 A:middle
对此操作明显地表达不赞成 并在之后弃用

00:07:51.166 --> 00:07:52.446 A:middle
现在 如果你直接通过代码获取到

00:07:52.446 --> 00:07:53.756 A:middle
实例变量

00:07:53.756 --> 00:07:55.436 A:middle
会收到一个警告

00:07:55.436 --> 00:07:57.896 A:middle
我们的想法是在未来的更新中 要切断这种操作

00:07:57.896 --> 00:07:59.446 A:middle
所以 如果你遇到了这种情况

00:07:59.486 --> 00:08:01.186 A:middle
请不要理它 直接删除这些使用

00:07:59.486 --> 00:08:01.186 A:middle
请不要理它 直接删除这些使用

00:08:02.406 --> 00:08:05.086 A:middle
改进的方式也非常直接

00:08:05.086 --> 00:08:06.196 A:middle
与直接获取

00:08:06.196 --> 00:08:07.366 A:middle
实例变量不同的是

00:08:07.686 --> 00:08:08.866 A:middle
你可以继续调用那些已经

00:08:08.866 --> 00:08:10.006 A:middle
有获得者或者

00:08:10.006 --> 00:08:11.806 A:middle
访问过的属性 或者其他可能的方式

00:08:11.986 --> 00:08:14.116 A:middle
或许 你有要获取这些

00:08:14.116 --> 00:08:15.246 A:middle
实例变量的原因

00:08:15.246 --> 00:08:16.266 A:middle
你也没有看到任何一个可以获取的方式

00:08:16.266 --> 00:08:17.706 A:middle
你或许可以告诉我们

00:08:18.936 --> 00:08:20.216 A:middle
现在 说起弃用

00:08:20.576 --> 00:08:21.626 A:middle
我们还正在做另一件事

00:08:23.276 --> 00:08:25.326 A:middle
叫作正式软弃用

00:08:25.976 --> 00:08:26.906 A:middle
这么多年来 我们已经弃用了

00:08:26.906 --> 00:08:30.416 A:middle
许多 API 的也使用更好的代替了它们

00:08:30.966 --> 00:08:32.275 A:middle
当弃用不紧急的时候

00:08:32.275 --> 00:08:33.976 A:middle
我们通常

00:08:33.976 --> 00:08:35.346 A:middle
会走非正式弃用的流程

00:08:35.346 --> 00:08:36.765 A:middle
我们会告知

00:08:36.765 --> 00:08:38.336 A:middle
API 要弃用

00:08:38.336 --> 00:08:39.916 A:middle
我们发布通知 对其进行标记

00:08:39.916 --> 00:08:41.426 A:middle
等等

00:08:41.426 --> 00:08:42.456 A:middle
在最终标记弃用之前

00:08:42.836 --> 00:08:44.116 A:middle
通常这种操作可以减少破坏

00:08:44.916 --> 00:08:46.016 A:middle
但是 我们有一种方式 要正式

00:08:46.016 --> 00:08:47.956 A:middle
对 API 进行弃用标记

00:08:48.566 --> 00:08:49.556 A:middle
我给大家举个例子

00:08:50.726 --> 00:08:51.626 A:middle
这里我们有一个符号

00:08:51.676 --> 00:08:54.356 A:middle
NSBoxOldStyle

00:08:54.356 --> 00:08:55.846 A:middle
即将变成需要

00:08:55.846 --> 00:08:56.626 A:middle
被弃用的名字

00:08:57.186 --> 00:08:58.176 A:middle
你会发现我们已经

00:08:58.206 --> 00:08:59.696 A:middle
将其标记为弃用

00:09:00.316 --> 00:09:01.386 A:middle
它的版本号已经变成

00:09:01.386 --> 00:09:03.416 A:middle
API 即将弃用

00:09:04.836 --> 00:09:07.386 A:middle
此举就是为了告诉编译器

00:09:07.386 --> 00:09:09.186 A:middle
不要产生一个

00:09:09.186 --> 00:09:10.706 A:middle
弃用警告或者错误

00:09:11.206 --> 00:09:12.906 A:middle
然而我们的目的是

00:09:12.906 --> 00:09:14.396 A:middle
如果你 Xcode 或新代码中 或者获取文件中

00:09:14.426 --> 00:09:16.516 A:middle
尝试使用这个符号

00:09:16.516 --> 00:09:18.026 A:middle
你会收到一个警告

00:09:18.026 --> 00:09:19.216 A:middle
警告此符号

00:09:19.216 --> 00:09:20.216 A:middle
已弃用 并且

00:09:20.216 --> 00:09:21.736 A:middle
指向新的代替的符号

00:09:22.336 --> 00:09:23.546 A:middle
当然了 同样也是在

00:09:23.546 --> 00:09:24.466 A:middle
Swift 中碰上

00:09:24.556 --> 00:09:28.126 A:middle
你要看这里 要提示的一点是

00:09:28.156 --> 00:09:29.016 A:middle
版本号 100,000

00:09:29.706 --> 00:09:30.996 A:middle
这不是一个提前的宣布

00:09:30.996 --> 00:09:32.956 A:middle
或者是未来的 SDK 的泄露

00:09:32.956 --> 00:09:34.996 A:middle
它只是一个占位符编码

00:09:34.996 --> 00:09:39.036 A:middle
我们目前用它来显示这个功能

00:09:40.196 --> 00:09:41.206 A:middle
现在 我们在一些其他的

00:09:41.206 --> 00:09:42.806 A:middle
案例中也使用正式的软弃用

00:09:43.826 --> 00:09:45.286 A:middle
更早之前我给你们展示过这个

00:09:46.146 --> 00:09:47.436 A:middle
并且 我告诉过你们我们重新命名了

00:09:47.436 --> 00:09:49.076 A:middle
MiterLineJoinStyle

00:09:49.076 --> 00:09:50.126 A:middle
变成 LineJoinStyleMiter

00:09:50.956 --> 00:09:53.786 A:middle
我还说了 Objective-C 源代码是 100%

00:09:53.786 --> 00:09:54.326 A:middle
兼容的

00:09:54.826 --> 00:09:56.066 A:middle
那么你可能会想知道

00:09:56.066 --> 00:09:57.076 A:middle
对于你重新命名的旧的符号

00:09:57.076 --> 00:09:58.336 A:middle
进行了什么操作呢

00:09:58.876 --> 00:10:00.066 A:middle
事实上 我们将那个你看到的旧富豪

00:09:58.876 --> 00:10:00.066 A:middle
事实上 我们将那个你看到的旧富豪

00:10:00.066 --> 00:10:02.596 A:middle
使用了这个新的版本号标记

00:10:02.596 --> 00:10:03.976 A:middle
API TO BE DEPRECATED

00:10:04.046 --> 00:10:06.896 A:middle
因此 我们宣布其已被弃用

00:10:07.016 --> 00:10:08.936 A:middle
标记是 API TO BE DEPRECATED

00:10:08.936 --> 00:10:11.406 A:middle
意为着任何试图使用它的操作都会被警告

00:10:11.406 --> 00:10:14.806 A:middle
但已存在的使用会被保留 因为我们

00:10:14.806 --> 00:10:15.766 A:middle
不想真正的破坏

00:10:16.236 --> 00:10:17.236 A:middle
在 Objective-C 源代码中

00:10:17.236 --> 00:10:21.346 A:middle
这个符号的使用

00:10:21.446 --> 00:10:22.576 A:middle
现在 有许多符号等待着

00:10:22.576 --> 00:10:25.186 A:middle
被进行这种操作

00:10:25.186 --> 00:10:29.626 A:middle
因此许多会被标记为 API TO BE DEPRECATED

00:10:29.966 --> 00:10:31.246 A:middle
数目很多是因为

00:10:31.246 --> 00:10:33.326 A:middle
我们使用一般前缀取代一般

00:10:33.426 --> 00:10:35.046 A:middle
后缀的命名 还有一些是

00:10:35.046 --> 00:10:36.406 A:middle
其他的符号 我们

00:10:36.636 --> 00:10:38.156 A:middle
不再强调弃用

00:10:38.636 --> 00:10:39.926 A:middle
因为我们要引入新的来取代它们

00:10:39.926 --> 00:10:40.936 A:middle
尤其是支持

00:10:40.936 --> 00:10:42.276 A:middle
黑暗模式的功能

00:10:42.606 --> 00:10:43.836 A:middle
你们在今天的晚些时候会听到有关这一方面的内容

00:10:44.486 --> 00:10:46.996 A:middle
最后一个我想说的话题是

00:10:46.996 --> 00:10:48.326 A:middle
安全编码

00:10:49.186 --> 00:10:50.116 A:middle
你们可能有所了解

00:10:50.116 --> 00:10:53.016 A:middle
我们在 10.8 and iOS 6 引入了

00:10:53.016 --> 00:10:56.336 A:middle
完全编码

00:10:56.446 --> 00:10:59.196 A:middle
当你压缩的时候

00:10:59.196 --> 00:11:00.366 A:middle
基本上会允许你

00:10:59.196 --> 00:11:00.366 A:middle
基本上会允许你

00:11:00.366 --> 00:11:01.286 A:middle
确认什么样的类是你需要的

00:11:01.286 --> 00:11:04.916 A:middle
这样 如果在压缩文件中没有遇到这些

00:11:04.916 --> 00:11:05.766 A:middle
就会成为一个

00:11:05.766 --> 00:11:06.946 A:middle
明显的错误

00:11:08.126 --> 00:11:09.106 A:middle
现在我们处理安全

00:11:09.106 --> 00:11:13.626 A:middle
编码的方式

00:11:13.626 --> 00:11:14.436 A:middle
是将其作为可选功能

00:11:14.906 --> 00:11:16.766 A:middle
但是 我们新的 API 既允许

00:11:16.766 --> 00:11:18.886 A:middle
安全编码作为默认动作

00:11:18.886 --> 00:11:20.376 A:middle
也允许其作为备选项

00:11:20.376 --> 00:11:22.556 A:middle
同时还可支持错误返回提示

00:11:23.076 --> 00:11:24.526 A:middle
我们的压缩和解压

00:11:24.526 --> 00:11:25.836 A:middle
API 会有一些例外

00:11:25.836 --> 00:11:27.576 A:middle
但是当然我们更偏向于错误返回

00:11:27.576 --> 00:11:29.606 A:middle
并且 新 API 激活的错误

00:11:29.606 --> 00:11:31.006 A:middle
返回动作是默认的

00:11:32.296 --> 00:11:34.086 A:middle
因此 我将给你展示 API

00:11:34.086 --> 00:11:35.616 A:middle
NSKeyedUnarchiver

00:11:35.616 --> 00:11:36.546 A:middle
因为这是其中最有意思的

00:11:37.126 --> 00:11:38.506 A:middle
这是一个 NSKeyedUnarchiver

00:11:38.886 --> 00:11:39.896 A:middle
其中一个新的方法在里面

00:11:39.976 --> 00:11:40.866 A:middle
它简单地创建了一个

00:11:40.866 --> 00:11:43.296 A:middle
keyedUnarchiver 非常安全地

00:11:43.296 --> 00:11:44.876 A:middle
并且用一种方式返回错误

00:11:45.736 --> 00:11:49.296 A:middle
其他两个新的方法 就是这些简便的 API

00:11:49.296 --> 00:11:51.506 A:middle
unarchivedObject(ofClasses from

00:11:51.756 --> 00:11:53.986 A:middle
和 unarchivedObject(ofClass from

00:11:54.256 --> 00:11:56.086 A:middle
这些基本上解压了

00:11:56.086 --> 00:11:57.466 A:middle
单一个目标并返回

00:11:57.926 --> 00:11:59.046 A:middle
操作很安全

00:11:59.046 --> 00:12:01.246 A:middle
并且如果遇到问题

00:11:59.046 --> 00:12:01.246 A:middle
并且如果遇到问题

00:12:01.246 --> 00:12:02.386 A:middle
会返回错误

00:12:02.946 --> 00:12:04.306 A:middle
现在 说一下这里的第二个方法

00:12:04.306 --> 00:12:05.526 A:middle
这是一种装饰

00:12:06.116 --> 00:12:07.706 A:middle
就如张扬美丽的孔雀

00:12:08.296 --> 00:12:12.006 A:middle
所有的装饰帮助

00:12:12.006 --> 00:12:13.596 A:middle
Swift 更好地推断返回种类

00:12:13.596 --> 00:12:14.666 A:middle
这当然也是 Swift

00:12:14.716 --> 00:12:16.066 A:middle
擅长的操作

00:12:16.866 --> 00:12:18.166 A:middle
现在 要注意一下 在今年的

00:12:18.166 --> 00:12:20.156 A:middle
SDK 中被抛弃的功能

00:12:20.156 --> 00:12:24.026 A:middle
在 10.13 和 iOS 11 中仍可使用

00:12:24.196 --> 00:12:25.296 A:middle
所以 你可以开始会用他们

00:12:25.616 --> 00:12:27.146 A:middle
即使是通过那些调度目标

00:12:28.886 --> 00:12:32.056 A:middle
这些方法 取代了这里这一页的方法

00:12:32.886 --> 00:12:34.416 A:middle
现在 你要注意这些是在

00:12:34.416 --> 00:12:36.596 A:middle
10.14 和 iOS 12 中

00:12:36.596 --> 00:12:37.856 A:middle
被弃用的

00:12:38.586 --> 00:12:40.226 A:middle
因为这些不是源编码的操作

00:12:40.226 --> 00:12:42.116 A:middle
我们会立刻弃用它们

00:12:42.116 --> 00:12:43.486 A:middle
而不是通过

00:12:43.486 --> 00:12:44.426 A:middle
正式软弃用的

00:12:44.426 --> 00:12:45.826 A:middle
因为我们真心希望能够

00:12:45.826 --> 00:12:47.086 A:middle
鼓励你们

00:12:47.086 --> 00:12:48.146 A:middle
转换到安全编码

00:12:48.146 --> 00:12:49.826 A:middle
如果你还没有开始的话

00:12:51.426 --> 00:12:53.636 A:middle
现在 关于安全编码另一件事

00:12:53.636 --> 00:12:55.616 A:middle
是一个新的值转换器

00:12:56.046 --> 00:12:56.676 A:middle
你可能知道

00:12:56.786 --> 00:12:58.316 A:middle
NSValueTransformer 是一个类

00:12:58.606 --> 00:12:59.446 A:middle
用于自动将值做转换

00:12:59.446 --> 00:13:01.526 A:middle
从一个转换成为另一个

00:12:59.446 --> 00:13:01.526 A:middle
从一个转换成为另一个

00:13:02.076 --> 00:13:03.466 A:middle
这里的两个 valueTransformers

00:13:03.466 --> 00:13:05.416 A:middle
unarchiveFromData 和

00:13:05.416 --> 00:13:07.806 A:middle
keyedUnarchivedFromData

00:13:07.806 --> 00:13:09.436 A:middle
第一个进行无密码压缩

00:13:09.436 --> 00:13:10.426 A:middle
第二个进行

00:13:10.426 --> 00:13:11.966 A:middle
有密码压缩 但并不安全

00:13:12.436 --> 00:13:14.506 A:middle
因此 这些方法

00:13:14.756 --> 00:13:16.026 A:middle
并不是我们所喜欢的

00:13:16.026 --> 00:13:17.396 A:middle
所以我们要弃用这两个

00:13:17.396 --> 00:13:19.696 A:middle
然后使用这个新的安全的 Unarchive

00:13:19.696 --> 00:13:21.156 A:middle
FromDataTransformerName 来替代它们

00:13:21.156 --> 00:13:23.086 A:middle
从而可以安全地解压

00:13:23.316 --> 00:13:25.386 A:middle
因此 我们也希望你们能尽快转换为这个

00:13:25.716 --> 00:13:28.696 A:middle
现在 在安全编码的前线

00:13:28.696 --> 00:13:29.666 A:middle
我们已经前进了不少 而且

00:13:29.666 --> 00:13:30.806 A:middle
在许多 Appkit 类中

00:13:30.806 --> 00:13:32.716 A:middle
新添加了安全编码

00:13:33.646 --> 00:13:35.536 A:middle
要注意这里

00:13:36.106 --> 00:13:38.186 A:middle
NSAppearance 最近已经

00:13:38.186 --> 00:13:39.156 A:middle
越来越明显地

00:13:39.156 --> 00:13:40.566 A:middle
成为你的朋友

00:13:40.566 --> 00:13:42.106 A:middle
在之后我们在 AppKit 中添加黑暗模式

00:13:42.106 --> 00:13:44.246 A:middle
及其他功能的演讲中也会遇到它

00:13:44.906 --> 00:13:46.246 A:middle
我们也在一些基础的 API 中加入了安全编码

00:13:46.246 --> 00:13:48.356 A:middle
这些 API 中此前都是没有安全编码的

00:13:48.756 --> 00:13:49.946 A:middle
下面这个就是列表

00:13:51.136 --> 00:13:52.686 A:middle
还有另外一个关于安全编码的提醒

00:13:53.016 --> 00:13:54.756 A:middle
我们周四上午会有一个会议

00:13:55.856 --> 00:13:58.196 A:middle
名为 你可以信任数据

00:13:58.196 --> 00:13:59.666 A:middle
会上我们会讨论

00:14:00.166 --> 00:14:01.776 A:middle
编程 压缩和解压缩

00:14:01.776 --> 00:14:03.296 A:middle
以一种稳健又安全的形式

00:14:03.396 --> 00:14:05.146 A:middle
我邀请你们去参加

00:14:05.196 --> 00:14:07.716 A:middle
在周四早上九点

00:14:07.916 --> 00:14:09.566 A:middle
现在 演讲下面的内容

00:14:09.566 --> 00:14:12.876 A:middle
将是关于 AppKit 的新功能以及相关的领域

00:14:13.156 --> 00:14:14.976 A:middle
因此 接下来我要请 Chris 上台给大家做讲解

00:14:15.516 --> 00:14:20.966 A:middle
［ 掌声 ］

00:14:21.466 --> 00:14:21.986 A:middle
&gt;&gt; 多谢 Ali

00:14:22.596 --> 00:14:25.036 A:middle
黑暗模式是 macOS 10.14 版本

00:14:25.036 --> 00:14:25.946 A:middle
推出的最令人惊喜的功能之一

00:14:26.406 --> 00:14:27.386 A:middle
我估计大家昨天都已经一睹为快了

00:14:27.386 --> 00:14:28.796 A:middle
可能你们其中的一些人

00:14:28.796 --> 00:14:29.656 A:middle
现在正运行着这个模式

00:14:29.656 --> 00:14:31.076 A:middle
不过我们还是来一起看一看

00:14:32.036 --> 00:14:34.666 A:middle
我们提供了这些出色的

00:14:34.666 --> 00:14:35.556 A:middle
新系统图案

00:14:36.126 --> 00:14:37.616 A:middle
这使得我们系统的 UI 看起来很棒

00:14:37.616 --> 00:14:38.936 A:middle
这也会使你的 App 获得良好的视觉观感

00:14:39.156 --> 00:14:40.836 A:middle
也能保证你自创的用户内容有良好的视觉体现

00:14:41.186 --> 00:14:42.436 A:middle
我们想要知道的是

00:14:42.436 --> 00:14:45.326 A:middle
要兼容采用这个模式 都需要做什么呢

00:14:45.526 --> 00:14:47.536 A:middle
第一步其实是特别简单的

00:14:47.906 --> 00:14:49.246 A:middle
我们需要重新编译

00:14:49.246 --> 00:14:50.906 A:middle
macOS 10.14 SDK

00:14:51.336 --> 00:14:52.146 A:middle
这个挺简单的吧

00:14:52.436 --> 00:14:53.496 A:middle
其实做这一步对于我们来说就够了

00:14:53.496 --> 00:14:54.736 A:middle
但是大多数人

00:14:54.736 --> 00:14:55.836 A:middle
还是需要继续操作 再多做几步

00:14:55.836 --> 00:14:57.896 A:middle
才能让自己的 App 变得更加美观

00:14:58.676 --> 00:14:59.656 A:middle
下一步我们要操作的

00:14:59.656 --> 00:15:01.176 A:middle
就是需要在我们硬编码

00:14:59.656 --> 00:15:01.176 A:middle
就是需要在我们硬编码

00:15:01.176 --> 00:15:03.936 A:middle
颜色数值的存储地址检索

00:15:03.936 --> 00:15:04.376 A:middle
我们的 App

00:15:04.566 --> 00:15:05.966 A:middle
然后我们将它替换成一个

00:15:05.966 --> 00:15:07.486 A:middle
对外观敏感的颜色

00:15:08.696 --> 00:15:10.646 A:middle
对于大多数的系统 UI 元素而言

00:15:10.906 --> 00:15:12.656 A:middle
AppKit 其实提供了

00:15:12.656 --> 00:15:14.226 A:middle
多种动态的系统颜色

00:15:14.226 --> 00:15:16.546 A:middle
可以和现有的外观互动 而且

00:15:16.546 --> 00:15:18.166 A:middle
不论你想要使用什么样的 UI 元素

00:15:18.166 --> 00:15:19.216 A:middle
视觉效果都会不错

00:15:19.476 --> 00:15:20.466 A:middle
并且 为了充实原有的系统颜色

00:15:20.466 --> 00:15:22.156 A:middle
我们在 macOS 10.14 中加入了

00:15:22.156 --> 00:15:23.006 A:middle
更多上述的颜色

00:15:24.186 --> 00:15:25.836 A:middle
当然 有些情况下

00:15:25.836 --> 00:15:26.676 A:middle
你的操作对象不是系统 UI

00:15:26.676 --> 00:15:28.026 A:middle
元素 而是想要去

00:15:28.026 --> 00:15:29.206 A:middle
调整一些文档模式的部分

00:15:29.206 --> 00:15:30.596 A:middle
使它们能在黑暗模式中

00:15:30.596 --> 00:15:31.156 A:middle
表现得更加美观

00:15:31.266 --> 00:15:32.836 A:middle
现在你可以在素材目录中

00:15:32.836 --> 00:15:34.806 A:middle
整理你可以使用的颜色

00:15:35.796 --> 00:15:37.276 A:middle
当你使用 Xcode 中的

00:15:37.276 --> 00:15:39.166 A:middle
颜色编辑器时 你可以

00:15:39.166 --> 00:15:40.416 A:middle
自行配置和想要设置颜色

00:15:40.676 --> 00:15:42.246 A:middle
相对应的外观

00:15:42.246 --> 00:15:44.526 A:middle
只需要使用在右方的工具栏就可以

00:15:45.046 --> 00:15:46.466 A:middle
在这里 我们已经为

00:15:46.466 --> 00:15:47.986 A:middle
日光外观模式

00:15:47.986 --> 00:15:49.266 A:middle
黑暗外观模式

00:15:49.266 --> 00:15:50.396 A:middle
以及备用外观模式

00:15:50.396 --> 00:15:52.246 A:middle
都选择好了颜色

00:15:52.756 --> 00:15:56.296 A:middle
同颜色设置一样

00:15:56.296 --> 00:15:57.436 A:middle
接下来 让我们一起浏览一下

00:15:57.436 --> 00:15:59.096 A:middle
我们的 UI 系统 也找找我们可以应用

00:15:59.156 --> 00:15:59.876 A:middle
模板图像的地方

00:16:00.406 --> 00:16:01.506 A:middle
模板图像的奇妙之处

00:16:01.546 --> 00:16:04.616 A:middle
在于不论我们使用何种外观

00:16:04.726 --> 00:16:06.086 A:middle
我们选择的模板图片都能自动匹配出正确的颜色

00:16:06.526 --> 00:16:07.476 A:middle
例如 你可能在自己的 App 中

00:16:07.476 --> 00:16:10.046 A:middle
加入了一些深灰色的元素

00:16:10.046 --> 00:16:11.576 A:middle
或者纯黑色的元素

00:16:11.576 --> 00:16:12.826 A:middle
这些元素在日间模式下看起来

00:16:12.826 --> 00:16:14.146 A:middle
自然没有问题

00:16:14.146 --> 00:16:15.626 A:middle
但是在黑暗模式下就出问题了

00:16:16.206 --> 00:16:18.786 A:middle
因此呢 这时你就可以用编程方式使用模板图片

00:16:19.016 --> 00:16:21.336 A:middle
你也可以在资源目录里面自己设置

00:16:22.286 --> 00:16:23.526 A:middle
不过 你不需要

00:16:23.526 --> 00:16:24.816 A:middle
在创建你的黑暗模式 UI 时

00:16:24.816 --> 00:16:25.706 A:middle
把自己的思路限制在模板图片上

00:16:26.276 --> 00:16:27.826 A:middle
你也可以指定颜色

00:16:28.156 --> 00:16:30.126 A:middle
哦 对不起 是指定图片 指定在黑暗模式

00:16:30.126 --> 00:16:30.926 A:middle
显示不同的图片

00:16:30.926 --> 00:16:32.086 A:middle
比如 我们的 Planet App

00:16:32.086 --> 00:16:33.756 A:middle
我们需要在黑暗外观模式的时候

00:16:33.756 --> 00:16:35.116 A:middle
使北美这块区域更多呈现出夜晚的效果

00:16:35.116 --> 00:16:36.736 A:middle
但是在其它外观情况下

00:16:36.736 --> 00:16:37.936 A:middle
则需要使用日光

00:16:37.936 --> 00:16:38.606 A:middle
外观模式

00:16:40.286 --> 00:16:43.746 A:middle
这里不得不提黑暗模式的最妙之处

00:16:43.746 --> 00:16:45.936 A:middle
就在于我们对

00:16:45.936 --> 00:16:47.116 A:middle
桌面图片的处理

00:16:47.226 --> 00:16:48.676 A:middle
大家可以通过我接下来的演示 更好地理解我说的这点

00:16:49.036 --> 00:16:50.896 A:middle
如果你只是粗略地看一下

00:16:50.896 --> 00:16:52.986 A:middle
系统偏好 UI 窗口

00:16:52.986 --> 00:16:54.106 A:middle
似乎看起来只是一个暗灰色

00:16:54.106 --> 00:16:55.146 A:middle
但是其实我们的系统偏好 UI 窗口

00:16:55.146 --> 00:16:56.086 A:middle
比第一眼看上去要复杂多了

00:16:56.796 --> 00:16:58.666 A:middle
我们来看一下这个窗口的后面

00:16:58.666 --> 00:16:59.516 A:middle
我们能够看到这极美的沙丘

00:16:59.516 --> 00:17:00.706 A:middle
而且还有

00:16:59.516 --> 00:17:00.706 A:middle
而且还有

00:17:00.706 --> 00:17:02.326 A:middle
很多蓝色 很多光线

00:17:02.326 --> 00:17:03.156 A:middle
很多深灰色在那里

00:17:03.516 --> 00:17:04.715 A:middle
如果我们

00:17:04.715 --> 00:17:05.876 A:middle
要为这个长方形区域

00:17:05.876 --> 00:17:07.546 A:middle
选择一个平均的蒙板颜色

00:17:07.546 --> 00:17:09.276 A:middle
我们使用的是这个漂亮的深蓝色

00:17:10.266 --> 00:17:11.626 A:middle
所以 当我们创建 UI

00:17:11.695 --> 00:17:12.955 A:middle
然后再加回这个灰色颜色时

00:17:13.136 --> 00:17:14.156 A:middle
它不是纯灰色

00:17:14.425 --> 00:17:16.256 A:middle
我们还在里面保留了那个深蓝色

00:17:16.526 --> 00:17:18.086 A:middle
这个甚至在我们

00:17:18.086 --> 00:17:20.036 A:middle
再在窗口加回单个的控制器时 还会扩散开来

00:17:20.036 --> 00:17:22.465 A:middle
他们都从桌面图片中获得了这个很棒的特性

00:17:23.425 --> 00:17:24.746 A:middle
比如我们这次

00:17:24.746 --> 00:17:25.506 A:middle
想要使用另外一个桌面图片

00:17:25.506 --> 00:17:27.425 A:middle
比方说这个花朵背景的桌面

00:17:28.036 --> 00:17:29.866 A:middle
看到了吧 我们

00:17:29.866 --> 00:17:31.646 A:middle
的背景图片中有了更多亮紫色

00:17:31.646 --> 00:17:32.606 A:middle
亮绿色

00:17:32.886 --> 00:17:33.906 A:middle
这个也影响了系统

00:17:33.906 --> 00:17:34.886 A:middle
的偏好显示窗口

00:17:35.496 --> 00:17:36.556 A:middle
同理 如果我们在这里使用

00:17:36.556 --> 00:17:38.106 A:middle
一个红色的花朵做背景

00:17:38.106 --> 00:17:39.546 A:middle
大家也就能看到

00:17:39.546 --> 00:17:41.286 A:middle
系统偏好窗口从

00:17:41.286 --> 00:17:42.826 A:middle
这个桌面图片中获取了

00:17:42.826 --> 00:17:44.196 A:middle
这样的暖色调

00:17:44.196 --> 00:17:46.126 A:middle
并将这种暖色调适用到所有的 UI 元素之中

00:17:47.106 --> 00:17:49.506 A:middle
你们肯定会自然想到

00:17:49.506 --> 00:17:50.786 A:middle
要实现这个功能

00:17:50.786 --> 00:17:52.176 A:middle
听起来是要有很多动态的工作要做

00:17:52.176 --> 00:17:53.736 A:middle
才能确定窗口在哪里

00:17:53.736 --> 00:17:55.276 A:middle
平均的色彩是什么

00:17:55.276 --> 00:17:57.646 A:middle
然后再把这一切同步起来

00:17:57.986 --> 00:17:59.626 A:middle
其实 大家不要觉得这个工作量很大

00:17:59.926 --> 00:18:01.536 A:middle
而产生畏难情绪

00:17:59.926 --> 00:18:01.536 A:middle
而产生畏难情绪

00:18:01.786 --> 00:18:03.026 A:middle
AppKit 能够帮你搞定这些

00:18:04.336 --> 00:18:05.976 A:middle
这里有很多大家都特别熟悉的类

00:18:05.976 --> 00:18:06.826 A:middle
能够帮助

00:18:06.826 --> 00:18:07.886 A:middle
我们把这些任务都

00:18:07.886 --> 00:18:09.056 A:middle
自动完成好

00:18:09.376 --> 00:18:10.486 A:middle
就是 Window

00:18:10.486 --> 00:18:11.806 A:middle
ScrollView TableView

00:18:11.806 --> 00:18:12.546 A:middle
和 CollectionView

00:18:12.816 --> 00:18:14.266 A:middle
它们在黑暗模式下

00:18:14.266 --> 00:18:15.716 A:middle
不需要任何调整都能看起来很美观

00:18:16.126 --> 00:18:16.876 A:middle
当然了 如果你想要

00:18:16.876 --> 00:18:18.596 A:middle
亲自上手 你也可以

00:18:18.596 --> 00:18:20.466 A:middle
对它们进行微调

00:18:20.816 --> 00:18:21.926 A:middle
这些类都有

00:18:21.926 --> 00:18:23.126 A:middle
一个背景色属性

00:18:23.336 --> 00:18:24.706 A:middle
有四个特别的

00:18:24.816 --> 00:18:26.386 A:middle
NS 颜色是我想要多解释几句的

00:18:26.386 --> 00:18:27.806 A:middle
控制背景颜色

00:18:27.806 --> 00:18:29.336 A:middle
窗口背景颜色

00:18:29.336 --> 00:18:30.766 A:middle
页面下颜色

00:18:30.796 --> 00:18:31.126 A:middle
以及文本背景颜色

00:18:31.456 --> 00:18:32.676 A:middle
这四个 NS 颜色

00:18:32.676 --> 00:18:34.586 A:middle
在调用这些类的时候

00:18:34.586 --> 00:18:36.356 A:middle
都会有一些桌面图片元素的注入

00:18:36.356 --> 00:18:37.436 A:middle
都会随同你想要

00:18:37.436 --> 00:18:38.566 A:middle
创建的 UI 元素

00:18:38.646 --> 00:18:39.996 A:middle
相对应地看起来有些不同

00:18:41.176 --> 00:18:44.566 A:middle
另一个我特别想要提到的类是

00:18:44.566 --> 00:18:45.516 A:middle
NSBox 类

00:18:45.916 --> 00:18:47.386 A:middle
当你想要配置成

00:18:47.386 --> 00:18:49.066 A:middle
用户个性风格的话

00:18:49.066 --> 00:18:50.626 A:middle
你可以使用填充颜色属性

00:18:50.626 --> 00:18:51.826 A:middle
来选择一个特殊的 NS 颜色

00:18:51.826 --> 00:18:53.186 A:middle
或者其它的 NS 颜色

00:18:53.666 --> 00:18:55.106 A:middle
这一点意义非常重大

00:18:55.106 --> 00:18:56.466 A:middle
你可以使用 NSBox 来

00:18:56.466 --> 00:18:57.856 A:middle
给你的 UI 的某一部分

00:18:57.856 --> 00:18:59.296 A:middle
加上颜色

00:18:59.296 --> 00:19:01.296 A:middle
而其它特殊情况下 这些类表现会更不同

00:18:59.296 --> 00:19:01.296 A:middle
而其它特殊情况下 这些类表现会更不同

00:19:02.446 --> 00:19:04.656 A:middle
大家如果想要知道

00:19:04.656 --> 00:19:05.926 A:middle
更多细节的话 我想介绍

00:19:05.926 --> 00:19:07.336 A:middle
另一个 AppKit 类

00:19:07.336 --> 00:19:09.356 A:middle
这就是 NSVisualEffectView

00:19:09.956 --> 00:19:11.376 A:middle
另外 NSVisualEffectView

00:19:11.376 --> 00:19:13.336 A:middle
拥有材料属性

00:19:13.336 --> 00:19:15.256 A:middle
能够使你决定你使用的视觉效果如何

00:19:15.256 --> 00:19:16.576 A:middle
处理其后的背景

00:19:16.576 --> 00:19:19.146 A:middle
如何进行配色操作

00:19:19.366 --> 00:19:20.376 A:middle
我们需要多讲几句

00:19:20.376 --> 00:19:21.736 A:middle
才能让大家明白

00:19:21.736 --> 00:19:23.426 A:middle
在你的 UI 中

00:19:23.426 --> 00:19:24.316 A:middle
VisualEffectView 是如何运作的

00:19:24.456 --> 00:19:27.226 A:middle
在 macOS 10.14 中 我们做了更多的补充

00:19:27.476 --> 00:19:30.016 A:middle
所以 不论你要创建哪一种 UI

00:19:30.016 --> 00:19:31.286 A:middle
我们都有适合你

00:19:31.286 --> 00:19:32.636 A:middle
应用场景

00:19:33.376 --> 00:19:34.876 A:middle
在过去的 OS 版本里

00:19:34.876 --> 00:19:36.116 A:middle
大家都知道我们直接把一些材料属性

00:19:36.436 --> 00:19:38.026 A:middle
标记为 light 或者 dark

00:19:38.276 --> 00:19:40.156 A:middle
大家在新版本中都可以不使用这些

00:19:40.156 --> 00:19:41.726 A:middle
这些和许多新的外观

00:19:41.726 --> 00:19:42.836 A:middle
都不是特别适配

00:19:43.426 --> 00:19:46.466 A:middle
这就引出了我下一个话题

00:19:46.466 --> 00:19:47.986 A:middle
就是我们所说的强化色彩

00:19:48.686 --> 00:19:51.296 A:middle
我们来看看屏幕上的这些 UI 元素

00:19:51.296 --> 00:19:53.086 A:middle
这个视觉色彩确实很惊艳

00:19:53.086 --> 00:19:55.826 A:middle
这些元素看起来很棒对吧

00:19:56.336 --> 00:19:59.826 A:middle
在 macOS 10.14 我们还

00:20:00.116 --> 00:20:01.976 A:middle
添加了更多的强化颜色供用户来进行选择

00:20:02.096 --> 00:20:03.336 A:middle
这些强化色彩

00:20:03.336 --> 00:20:04.056 A:middle
看起来确实很惊艳

00:20:04.876 --> 00:20:06.256 A:middle
如果你要定制自己的 UI 元素

00:20:06.256 --> 00:20:07.946 A:middle
好吧 我先暂停下 大家先鼓掌

00:20:08.516 --> 00:20:12.806 A:middle
［ 掌声 ］

00:20:13.306 --> 00:20:14.256 A:middle
感谢强化颜色

00:20:14.906 --> 00:20:16.146 A:middle
所以 如果你要创建自己的

00:20:16.146 --> 00:20:17.156 A:middle
UI 元素的话

00:20:17.156 --> 00:20:18.286 A:middle
你需要自己创建一个主题

00:20:18.286 --> 00:20:20.196 A:middle
再把这些颜色融合进去

00:20:20.516 --> 00:20:21.856 A:middle
如果你之前这样操作过的话

00:20:21.856 --> 00:20:23.366 A:middle
你可能已经使用过

00:20:23.366 --> 00:20:25.266 A:middle
NSColor.currentControlTint 方法了

00:20:25.266 --> 00:20:27.546 A:middle
它会返回一个枚举结果

00:20:27.546 --> 00:20:29.476 A:middle
说明系统的模式是 aqua 还是 graphite

00:20:29.886 --> 00:20:31.666 A:middle
现在我们相比过去加入了更多的颜色

00:20:31.896 --> 00:20:33.616 A:middle
那个枚举结果自然就不够用了

00:20:34.046 --> 00:20:36.386 A:middle
因此在 macOS 10.14 我们请大家

00:20:36.386 --> 00:20:37.776 A:middle
切换到 NSColor 中的

00:20:37.776 --> 00:20:40.316 A:middle
controlAccentColor 这个方法

00:20:41.416 --> 00:20:44.066 A:middle
NSColor 还能帮助你处理

00:20:44.066 --> 00:20:45.196 A:middle
强化颜色

00:20:45.456 --> 00:20:46.836 A:middle
NSColor 还能够帮你做很多其他的操作

00:20:47.386 --> 00:20:48.686 A:middle
如果你要创建一个 UI 元素

00:20:48.906 --> 00:20:50.116 A:middle
很常见的一个特征就是

00:20:50.116 --> 00:20:51.556 A:middle
你需要调整

00:20:51.646 --> 00:20:52.946 A:middle
UI 元素的颜色

00:20:53.016 --> 00:20:54.956 A:middle
来反映用户的互动

00:20:55.416 --> 00:20:56.956 A:middle
在这一点上 NSColor 引进了一种新的方式

00:20:56.956 --> 00:20:58.716 A:middle
就是 withSystemEffect

00:20:59.336 --> 00:21:00.396 A:middle
我们也预先定义了一些

00:20:59.336 --> 00:21:00.396 A:middle
我们也预先定义了一些

00:21:00.396 --> 00:21:01.686 A:middle
关于互动的系统效果

00:21:01.686 --> 00:21:02.576 A:middle
例如按压状态

00:21:02.576 --> 00:21:04.036 A:middle
和停用状态

00:21:04.036 --> 00:21:05.616 A:middle
我们需要继续进行操作

00:21:05.616 --> 00:21:07.066 A:middle
给底色加上一个

00:21:07.066 --> 00:21:08.736 A:middle
适合现在外观的颜色

00:21:08.736 --> 00:21:10.176 A:middle
以及现在

00:21:10.176 --> 00:21:12.406 A:middle
操作面板中的互动元素

00:21:12.956 --> 00:21:13.806 A:middle
这样的话 能节省你很多的功夫

00:21:13.806 --> 00:21:14.906 A:middle
你不需要再

00:21:14.906 --> 00:21:17.366 A:middle
为这些状态开发一个配方

00:21:17.366 --> 00:21:18.506 A:middle
来进行颜色的调整

00:21:18.506 --> 00:21:19.636 A:middle
尤其是你需要

00:21:19.636 --> 00:21:20.676 A:middle
针对不同的互动

00:21:20.676 --> 00:21:22.266 A:middle
来适配数量超级多的

00:21:22.266 --> 00:21:23.766 A:middle
硬编译的颜色

00:21:24.126 --> 00:21:25.966 A:middle
大家都可以试试这个绝妙的 API

00:21:26.996 --> 00:21:30.136 A:middle
我们来继续聊一聊颜色

00:21:30.446 --> 00:21:31.926 A:middle
macOS 10.14 有一个新的

00:21:31.926 --> 00:21:34.086 A:middle
功能特性

00:21:34.086 --> 00:21:34.966 A:middle
我们称其为内容着色

00:21:35.996 --> 00:21:36.906 A:middle
大家看一下我这里的模拟

00:21:36.906 --> 00:21:38.706 A:middle
App 可以看到

00:21:38.706 --> 00:21:40.036 A:middle
这个 App 绝大部分都是用户内容

00:21:40.036 --> 00:21:40.816 A:middle
大部分都是文本

00:21:41.296 --> 00:21:42.426 A:middle
有几个元素

00:21:42.426 --> 00:21:44.316 A:middle
是我希望大家能够格外注意的

00:21:45.336 --> 00:21:47.516 A:middle
这些就是用户可以

00:21:47.516 --> 00:21:49.146 A:middle
点击 然后开展更多操作的元素

00:21:49.476 --> 00:21:50.486 A:middle
在过去 我们不想使用

00:21:50.486 --> 00:21:52.276 A:middle
常规的按钮图形

00:21:52.276 --> 00:21:54.026 A:middle
因为我们觉得这样可能会冲淡内容的地位

00:21:54.586 --> 00:21:56.606 A:middle
但是在 macOS 10.14 中

00:21:56.606 --> 00:21:57.686 A:middle
我们可以允许你给无边框的按钮

00:21:57.686 --> 00:21:59.236 A:middle
着色 然后给调用

00:21:59.236 --> 00:22:00.386 A:middle
这些图像出现时着色

00:21:59.236 --> 00:22:00.386 A:middle
这些图像出现时着色

00:22:00.386 --> 00:22:02.616 A:middle
这样用户就能辨别出 哪些是可以点击可以进行互动的了

00:22:03.846 --> 00:22:05.146 A:middle
这就变得很容易了

00:22:06.116 --> 00:22:08.586 A:middle
NSButton 和 NSImageView 这两个

00:22:08.586 --> 00:22:09.536 A:middle
都有一个新的属性

00:22:09.536 --> 00:22:10.456 A:middle
叫做 contentTintColor

00:22:10.816 --> 00:22:11.916 A:middle
你可以把它设置成任何想要的颜色

00:22:11.916 --> 00:22:13.236 A:middle
比如我之前提到过的

00:22:13.236 --> 00:22:14.856 A:middle
那些动态颜色 就是很好的选择

00:22:15.776 --> 00:22:16.826 A:middle
你也能够在

00:22:16.826 --> 00:22:17.596 A:middle
Interface Builder 里面进行设置

00:22:17.926 --> 00:22:19.256 A:middle
对于配置按钮来说

00:22:19.256 --> 00:22:20.436 A:middle
UI 外观大致就是这样的

00:22:20.726 --> 00:22:21.986 A:middle
对于配置图片试图而言

00:22:21.986 --> 00:22:23.106 A:middle
也基本是这样的

00:22:23.576 --> 00:22:25.066 A:middle
配色选项在这里

00:22:25.066 --> 00:22:27.936 A:middle
右边的工具栏中

00:22:28.396 --> 00:22:29.836 A:middle
我们已经讲了很多

00:22:29.836 --> 00:22:31.516 A:middle
macOS 10.14 中

00:22:31.516 --> 00:22:33.446 A:middle
关于外观的很多很棒的特性

00:22:33.706 --> 00:22:35.146 A:middle
我们也有更多的会议

00:22:35.146 --> 00:22:36.696 A:middle
大家在 WWDC App 里可以看到

00:22:36.696 --> 00:22:37.666 A:middle
我们最新的讲解

00:22:37.976 --> 00:22:40.376 A:middle
都是很不错的

00:22:40.556 --> 00:22:41.706 A:middle
接下来 我来讲讲下一个话题

00:22:42.896 --> 00:22:44.026 A:middle
我们要讲 Cocoa

00:22:44.026 --> 00:22:45.976 A:middle
就必须要谈谈 layer backing

00:22:47.436 --> 00:22:48.946 A:middle
我希望大家都能记住

00:22:49.096 --> 00:22:51.056 A:middle
在 macOS 10.14 中

00:22:51.056 --> 00:22:52.046 A:middle
当你要和新 SDK 连接时

00:22:52.046 --> 00:22:54.666 A:middle
AppKit 再也不会调用

00:22:54.666 --> 00:22:56.296 A:middle
打开窗口的后备存储器

00:22:56.596 --> 00:22:58.016 A:middle
而是直接提供

00:22:58.016 --> 00:22:59.246 A:middle
内容到窗口的服务器

00:22:59.246 --> 00:23:01.376 A:middle
它们使用核心动画图层

00:22:59.246 --> 00:23:01.376 A:middle
它们使用核心动画图层

00:23:02.106 --> 00:23:03.326 A:middle
可能比较熟悉

00:23:03.326 --> 00:23:04.456 A:middle
iOS 开发的大家都会觉得

00:23:04.456 --> 00:23:06.156 A:middle
这个听起来似曾相识

00:23:06.156 --> 00:23:07.476 A:middle
但是大家还是

00:23:07.476 --> 00:23:08.416 A:middle
仔细看看这到底有什么不同

00:23:09.186 --> 00:23:11.256 A:middle
比如我们在 UIKit 有一个这样的树形视图

00:23:11.256 --> 00:23:12.596 A:middle
图像和图层的

00:23:12.626 --> 00:23:14.966 A:middle
关系其实是很简单的

00:23:15.306 --> 00:23:17.076 A:middle
每个图像都有一个图层

00:23:17.516 --> 00:23:18.506 A:middle
而且 图像间的父/子

00:23:18.506 --> 00:23:20.196 A:middle
关系也会

00:23:20.196 --> 00:23:21.676 A:middle
体现在图层树形视图中

00:23:22.686 --> 00:23:24.446 A:middle
但是在 AppKit 中 我们创建的

00:23:24.446 --> 00:23:26.696 A:middle
图层树状视图 其实只是一个过程

00:23:26.696 --> 00:23:28.106 A:middle
只是处理视图层次的一个

00:23:28.416 --> 00:23:29.156 A:middle
附带产物

00:23:29.986 --> 00:23:31.856 A:middle
这样的话 我们就可以

00:23:31.856 --> 00:23:33.246 A:middle
在一些情况下

00:23:33.246 --> 00:23:35.436 A:middle
使用一个图层来处理多个视图

00:23:35.806 --> 00:23:37.166 A:middle
这一点很棒

00:23:37.166 --> 00:23:38.036 A:middle
因为这样可以减少系统内存消耗

00:23:38.036 --> 00:23:39.786 A:middle
GPU 内存消耗

00:23:39.786 --> 00:23:41.736 A:middle
也能减少窗口服务器

00:23:41.736 --> 00:23:43.276 A:middle
在显示屏幕时

00:23:43.276 --> 00:23:44.946 A:middle
要处理的请求压力

00:23:45.456 --> 00:23:46.896 A:middle
这里我也想要

00:23:46.896 --> 00:23:48.126 A:middle
特别指出

00:23:48.126 --> 00:23:49.276 A:middle
刚才我提到的这个特性是动态的

00:23:49.276 --> 00:23:51.276 A:middle
基于视图层次配置的

00:23:51.376 --> 00:23:52.966 A:middle
所以 它可以进行实时变化

00:23:53.306 --> 00:23:56.506 A:middle
因此 现在你就不能在图像间

00:23:56.506 --> 00:23:58.006 A:middle
图层间一直使用一种固定的父/子关系

00:23:58.006 --> 00:23:58.946 A:middle
这和过去的 iOS 是不一样的

00:24:03.436 --> 00:24:05.126 A:middle
从编程角度来看

00:24:05.126 --> 00:24:06.776 A:middle
现在你不需要

00:24:09.946 --> 00:24:12.206 A:middle
来使用图层了

00:24:12.206 --> 00:24:13.386 A:middle
当你在 macOS 10.14 操作时

00:24:13.386 --> 00:24:16.506 A:middle
AppKit 可以帮你搞定这些

00:24:16.936 --> 00:24:19.976 A:middle
如果你要配置

00:24:20.516 --> 00:24:24.566 A:middle
［ 掌声 ］

00:24:25.066 --> 00:24:27.576 A:middle
事实上 我们并不鼓励

00:24:27.576 --> 00:24:28.986 A:middle
大家使用这个属性

00:24:28.986 --> 00:24:30.596 A:middle
如果你把它设置成 ture

00:24:30.596 --> 00:24:32.056 A:middle
我们就必须保证每个图像都

00:24:32.056 --> 00:24:33.146 A:middle
能有自己的图层

00:24:33.146 --> 00:24:34.326 A:middle
这样的话我们就没办法开展想要的优化

00:24:34.326 --> 00:24:35.666 A:middle
开展想要的优化

00:24:35.666 --> 00:24:37.306 A:middle
也就是把多个图像放在

00:24:37.306 --> 00:24:38.476 A:middle
一个图层中

00:24:39.056 --> 00:24:40.406 A:middle
如果你要配置

00:24:40.406 --> 00:24:41.176 A:middle
旧版的 OS 的话 你可能还要用到这些

00:24:41.176 --> 00:24:42.956 A:middle
但是大部分情况下

00:24:42.956 --> 00:24:45.516 A:middle
你可以直接忽略它 不会有什么问题

00:24:45.846 --> 00:24:46.826 A:middle
我也想要谈谈大家

00:24:46.826 --> 00:24:48.546 A:middle
在 NSView UI 中

00:24:48.636 --> 00:24:51.076 A:middle
使用 CALayers 创建的其他样式

00:24:51.456 --> 00:24:53.206 A:middle
最简单的创建 CALayer 的方式

00:24:53.206 --> 00:24:54.606 A:middle
就是在 CALayer 类中

00:24:54.606 --> 00:24:56.776 A:middle
重写这个创建方式

00:24:57.196 --> 00:24:58.916 A:middle
或者调用一个委托方法

00:24:59.536 --> 00:25:00.966 A:middle
这个行得通

00:24:59.536 --> 00:25:00.966 A:middle
这个行得通

00:25:00.966 --> 00:25:03.636 A:middle
NSView 会给你提供很多功能

00:25:03.636 --> 00:25:04.796 A:middle
你不需要每一步

00:25:04.796 --> 00:25:05.276 A:middle
再耗费自己的精力去做

00:25:05.836 --> 00:25:08.526 A:middle
如果你调用 NSView 的创建方法

00:25:08.706 --> 00:25:09.886 A:middle
它就会自动运行

00:25:09.886 --> 00:25:11.056 A:middle
搞定很多事情

00:25:11.056 --> 00:25:12.226 A:middle
保证外观能够很好地

00:25:12.226 --> 00:25:13.056 A:middle
适配动态颜色

00:25:13.336 --> 00:25:15.476 A:middle
也会帮你管理好后备存储器的分辨率

00:25:15.876 --> 00:25:17.156 A:middle
而且 这个和

00:25:17.156 --> 00:25:18.706 A:middle
执行图层方法是一样简便的

00:25:18.986 --> 00:25:19.986 A:middle
所以 我建议大家能够在

00:25:19.986 --> 00:25:21.166 A:middle
图像层面来进行重写

00:25:21.166 --> 00:25:22.516 A:middle
而不是在图层层面进行

00:25:23.626 --> 00:25:25.576 A:middle
在一些情况下

00:25:25.916 --> 00:25:27.606 A:middle
当你在执行 CALayer 的显示模式时

00:25:27.606 --> 00:25:29.016 A:middle
你正在直接更新图层的属性

00:25:29.016 --> 00:25:31.486 A:middle
这样做可能使你觉得更加高效

00:25:31.716 --> 00:25:32.486 A:middle
或者是这样做

00:25:32.486 --> 00:25:33.706 A:middle
能够帮你更好地

00:25:33.706 --> 00:25:35.136 A:middle
实现自己的构想

00:25:35.446 --> 00:25:37.426 A:middle
你仍然可以使用

00:25:37.426 --> 00:25:39.196 A:middle
NSView API

00:25:39.196 --> 00:25:40.806 A:middle
只要使用代理更新图层方法即可

00:25:40.806 --> 00:25:42.106 A:middle
这个和使用 NSView drawRect 方法

00:25:42.106 --> 00:25:43.786 A:middle
得到的效果是一样的

00:25:44.556 --> 00:25:46.756 A:middle
另外 你也可以

00:25:46.756 --> 00:25:48.026 A:middle
在 NSView 中

00:25:48.026 --> 00:25:50.226 A:middle
同步执行图层更新和调用绘画方法

00:25:50.846 --> 00:25:52.256 A:middle
如果你这样操作

00:25:52.256 --> 00:25:53.576 A:middle
当你的图像只有一个图层的话

00:25:53.576 --> 00:25:54.496 A:middle
我们就会使用

00:25:54.496 --> 00:25:55.546 A:middle
可选图层版本

00:25:56.006 --> 00:25:57.296 A:middle
如果你的图像正在和其它合并

00:25:57.296 --> 00:25:58.546 A:middle
以节省内存的话

00:25:58.896 --> 00:26:00.536 A:middle
我们就会使用 drawRect 版本

00:25:58.896 --> 00:26:00.536 A:middle
我们就会使用 drawRect 版本

00:26:00.746 --> 00:26:01.996 A:middle
对于 printing 而言

00:26:01.996 --> 00:26:02.556 A:middle
我们也应用了这一点

00:26:02.616 --> 00:26:04.296 A:middle
所以 执行这两点是完全行得通的

00:26:05.056 --> 00:26:06.386 A:middle
如果你的一个图像

00:26:06.386 --> 00:26:07.726 A:middle
是使用 CG drawing API 无法实现的

00:26:07.806 --> 00:26:09.346 A:middle
AppKit drawing API 也无法实现

00:26:09.346 --> 00:26:11.336 A:middle
你需要做的就是

00:26:11.336 --> 00:26:12.406 A:middle
除了要使用更新图层方法外

00:26:12.406 --> 00:26:13.576 A:middle
还要调用代理 wantsUpdateLayer 方法

00:26:13.576 --> 00:26:16.906 A:middle
如果你返回 ture 的话

00:26:16.906 --> 00:26:18.186 A:middle
我们就能够知道你需要一个

00:26:18.186 --> 00:26:20.216 A:middle
显式图层来实现你想要的展示

00:26:22.276 --> 00:26:24.626 A:middle
另一个能够将 AppKit

00:26:24.626 --> 00:26:26.476 A:middle
和其它核心动画特性发挥到极致

00:26:26.476 --> 00:26:27.746 A:middle
的方法是

00:26:27.976 --> 00:26:29.236 A:middle
使用 NSViews 中特别简单的

00:26:29.236 --> 00:26:30.206 A:middle
词汇创建

00:26:30.206 --> 00:26:33.096 A:middle
你自己的 UI

00:26:33.456 --> 00:26:35.166 A:middle
NSImageView NSBox 以及

00:26:35.166 --> 00:26:36.926 A:middle
NSTextField 都是特别好的

00:26:36.926 --> 00:26:38.336 A:middle
创建模块

00:26:38.336 --> 00:26:39.446 A:middle
可以用来创建复杂的 UI

00:26:39.666 --> 00:26:42.286 A:middle
不论你使用何种技术来展示

00:26:42.286 --> 00:26:43.966 A:middle
它们都能适配正确的方式

00:26:45.606 --> 00:26:46.546 A:middle
另外 因为我们对 layer backing

00:26:46.546 --> 00:26:48.376 A:middle
做了一些改动

00:26:48.376 --> 00:26:49.566 A:middle
有一些图案是

00:26:49.566 --> 00:26:51.396 A:middle
不再和 macOS 10.14 适配的

00:26:51.996 --> 00:26:53.616 A:middle
例如你使用 NSView lockFocus

00:26:53.616 --> 00:26:55.106 A:middle
和 unlockFocus

00:26:55.106 --> 00:26:56.566 A:middle
或者试图直接使用窗口的图像内容

00:26:56.566 --> 00:27:00.116 A:middle
实际上有更好的实现方式

00:26:56.566 --> 00:27:00.116 A:middle
实际上有更好的实现方式

00:27:00.116 --> 00:27:01.656 A:middle
你只需要子类 NSView

00:27:01.656 --> 00:27:02.556 A:middle
并执行 drawRect 就行

00:27:02.846 --> 00:27:04.786 A:middle
这些方法之前都有些繁琐

00:27:04.786 --> 00:27:08.326 A:middle
所以 你其实能够省去一些麻烦

00:27:08.756 --> 00:27:09.716 A:middle
其次 我还想要说一点

00:27:09.716 --> 00:27:10.686 A:middle
这个其实是用

00:27:10.686 --> 00:27:12.236 A:middle
Objective-C 写的

00:27:12.236 --> 00:27:13.606 A:middle
似乎在关于 Swift 的演讲中出现

00:27:13.606 --> 00:27:14.986 A:middle
有些奇怪

00:27:14.986 --> 00:27:16.486 A:middle
事实上 最好的消息是

00:27:16.486 --> 00:27:18.146 A:middle
我还真没有看到

00:27:18.146 --> 00:27:19.676 A:middle
任何 Swift 代码使用这些

00:27:20.276 --> 00:27:21.656 A:middle
从中我觉得

00:27:21.656 --> 00:27:22.986 A:middle
我不希望你们

00:27:22.986 --> 00:27:25.056 A:middle
做第一个尝试并给我惊喜的人

00:27:26.456 --> 00:27:29.816 A:middle
最后有关我们对 layer backing 做的改动

00:27:29.816 --> 00:27:31.086 A:middle
还需要再说一点

00:27:31.456 --> 00:27:33.326 A:middle
如果你使用 NSOpenGL 类

00:27:33.326 --> 00:27:34.726 A:middle
来和 OpenGL 进行协同操作

00:27:34.726 --> 00:27:37.106 A:middle
要和 macOS 10.14 连接的话

00:27:37.106 --> 00:27:38.466 A:middle
我们一些执行细节

00:27:38.466 --> 00:27:39.756 A:middle
有关我们将图层关联 OpenGL 系统

00:27:39.756 --> 00:27:41.976 A:middle
的执行细节这一层面上有一些不同之处

00:27:41.976 --> 00:27:43.816 A:middle
大家也可能发现了一些小小的变化

00:27:44.576 --> 00:27:45.846 A:middle
不过最重要的是

00:27:45.846 --> 00:27:48.206 A:middle
我想要大家明白一点

00:27:48.426 --> 00:27:49.756 A:middle
在 macOS 10.14 上 我们不推荐大家

00:27:49.806 --> 00:27:50.426 A:middle
使用 OpenGL

00:27:51.016 --> 00:27:52.626 A:middle
如果你过去一直使用 NSOpenGL

00:27:52.626 --> 00:27:55.846 A:middle
我们真的建议你换成 MTKView

00:27:55.956 --> 00:27:57.166 A:middle
今天我们还有一场会议

00:27:57.166 --> 00:27:58.676 A:middle
会仔细给大家介绍

00:27:58.676 --> 00:28:00.556 A:middle
如何帮助开发者为 OpenGL 采用 Metal

00:27:58.676 --> 00:28:00.556 A:middle
如何帮助开发者为 OpenGL 采用 Metal

00:28:03.286 --> 00:28:04.816 A:middle
还有最后一点我想要聊聊的变化

00:28:04.816 --> 00:28:06.256 A:middle
这个变化就是我们对于

00:28:06.256 --> 00:28:07.706 A:middle
字体反混淆化做的努力

00:28:08.526 --> 00:28:09.796 A:middle
大家可以仔细看看这两个屏幕的对比

00:28:09.796 --> 00:28:11.386 A:middle
左边的是 10.13

00:28:11.386 --> 00:28:14.656 A:middle
右边的是 macOS 10.14

00:28:14.656 --> 00:28:16.036 A:middle
如果我们看窗口里的文字的话

00:28:16.036 --> 00:28:18.186 A:middle
基本上是一样的

00:28:18.896 --> 00:28:21.416 A:middle
但是如果我们放大拉近

00:28:21.416 --> 00:28:23.676 A:middle
放大到 48X 的话

00:28:23.766 --> 00:28:26.246 A:middle
我们就能够看到

00:28:26.246 --> 00:28:27.506 A:middle
macOS 10.13 实际上用的是

00:28:27.506 --> 00:28:28.366 A:middle
色彩边纹效果来显示其字体

00:28:29.216 --> 00:28:32.836 A:middle
而在 macOS 10.14 中

00:28:32.836 --> 00:28:33.326 A:middle
我们不再用这个效果了

00:28:33.596 --> 00:28:34.796 A:middle
这就意味着

00:28:34.796 --> 00:28:36.806 A:middle
我们的文字在更广的平台技术上

00:28:36.806 --> 00:28:38.436 A:middle
会变得更加美观

00:28:38.436 --> 00:28:39.276 A:middle
当然在扩展缩放模式上也会更好看

00:28:40.316 --> 00:28:42.166 A:middle
这样说来

00:28:42.166 --> 00:28:43.096 A:middle
我们还有很多好消息要和大家分享

00:28:43.406 --> 00:28:44.226 A:middle
有关这一点

00:28:44.226 --> 00:28:45.956 A:middle
我想要邀请 Jesse 上台给大家讲一讲

00:28:46.516 --> 00:28:51.686 A:middle
［ 掌声 ］

00:28:52.186 --> 00:28:52.716 A:middle
&gt;&gt; 谢谢 Chris

00:28:53.116 --> 00:28:54.876 A:middle
大家好 今天很高兴能在这里见到你们

00:28:55.506 --> 00:28:57.236 A:middle
我有很多话题要讲

00:28:57.236 --> 00:28:59.546 A:middle
首先 我要从用户通知的框架开始

00:28:59.976 --> 00:29:01.506 A:middle
这个功能已经在 iOS 上

00:28:59.976 --> 00:29:01.506 A:middle
这个功能已经在 iOS 上

00:29:01.506 --> 00:29:02.806 A:middle
使用一段时间了

00:29:02.806 --> 00:29:04.846 A:middle
这次 macOS Mojave 我们将把这个功能

00:29:04.846 --> 00:29:05.316 A:middle
带给 Mac

00:29:07.646 --> 00:29:09.546 A:middle
这个功能也能使用户更好地

00:29:09.546 --> 00:29:10.676 A:middle
控制通知

00:29:11.226 --> 00:29:12.126 A:middle
而且这还意味着

00:29:12.126 --> 00:29:13.246 A:middle
你的 App 也可以像在 iOS 上一样

00:29:13.296 --> 00:29:14.986 A:middle
与这些通知协同工作

00:29:15.676 --> 00:29:17.576 A:middle
它们将会使用 userNotificationCenter 的

00:29:17.576 --> 00:29:18.666 A:middle
NSApplication 方法

00:29:18.886 --> 00:29:20.486 A:middle
registerForRemoteNotifications

00:29:21.176 --> 00:29:25.536 A:middle
以及 requestAuthorization 方法

00:29:27.306 --> 00:29:28.676 A:middle
作为工作的一部分

00:29:28.676 --> 00:29:30.406 A:middle
我们也会弃用一些已经存在的

00:29:30.806 --> 00:29:32.786 A:middle
用户通知相关的 API

00:29:32.826 --> 00:29:34.956 A:middle
尤其是在 NSApplication

00:29:35.316 --> 00:29:36.126 A:middle
我们将弃用

00:29:36.126 --> 00:29:37.296 A:middle
remoteNotificationType

00:29:37.386 --> 00:29:39.416 A:middle
OptionSet 和

00:29:39.656 --> 00:29:41.776 A:middle
registerForRemoteNotifications 方法 以及

00:29:41.776 --> 00:29:44.576 A:middle
enabledRemoteNotificationTypes 性能

00:29:45.326 --> 00:29:46.686 A:middle
我们也会弃用所有的

00:29:46.686 --> 00:29:47.846 A:middle
NSUserNotification

00:29:49.256 --> 00:29:50.716 A:middle
那么既然你要使用 SDK 重新建立

00:29:50.876 --> 00:29:54.256 A:middle
你最好升级用户通知框架

00:29:56.586 --> 00:29:59.356 A:middle
接下来 我想讲一讲 NSToolbar

00:30:00.396 --> 00:30:01.556 A:middle
当你想在工具栏中居中

00:30:01.556 --> 00:30:02.876 A:middle
一个项目时 你可能会想要在 item 的两个

00:30:02.876 --> 00:30:05.226 A:middle
你可能会想要在项目的两侧

00:30:05.226 --> 00:30:07.686 A:middle
各留一个灵活的空间

00:30:07.686 --> 00:30:09.446 A:middle
这种方式可以奏效

00:30:09.446 --> 00:30:09.926 A:middle
但还是有一些缺点

00:30:10.076 --> 00:30:11.706 A:middle
尤其是当你在工具栏中添加

00:30:11.706 --> 00:30:13.106 A:middle
额外的项目时 它将会

00:30:13.106 --> 00:30:14.246 A:middle
把你的项目从中间移走

00:30:14.946 --> 00:30:16.716 A:middle
所以 NSToolbar 现在出现了一个

00:30:16.716 --> 00:30:17.456 A:middle
新的属性

00:30:17.516 --> 00:30:18.616 A:middle
centeredItemIdentifier

00:30:19.406 --> 00:30:21.906 A:middle
你可以将想置于中心的项目设置标识

00:30:21.906 --> 00:30:23.416 A:middle
这样 NSToolbar 就会

00:30:23.456 --> 00:30:24.876 A:middle
一直将它放在那里

00:30:25.486 --> 00:30:26.736 A:middle
除非其他工具栏项目

00:30:26.736 --> 00:30:28.376 A:middle
迫使它移动

00:30:28.376 --> 00:30:29.696 A:middle
否则它会一直在那里

00:30:31.276 --> 00:30:32.326 A:middle
这里还有另外一个改变

00:30:32.326 --> 00:30:35.426 A:middle
也值得一提

00:30:35.426 --> 00:30:38.616 A:middle
就是自动布局现已用于

00:30:38.616 --> 00:30:40.036 A:middle
衡量工具栏的项目

00:30:40.036 --> 00:30:41.816 A:middle
在最大或最小的尺寸

00:30:41.816 --> 00:30:42.616 A:middle
没有进行规定的时候

00:30:44.846 --> 00:30:46.466 A:middle
这个功能仅适用于

00:30:46.466 --> 00:30:48.746 A:middle
10.14 SDK 的 App 但是这意味着比如说你可以

00:30:48.746 --> 00:30:50.066 A:middle
比如说你可以改动

00:30:50.066 --> 00:30:52.976 A:middle
按钮的大小 测量功能将会替你完成的

00:30:53.516 --> 00:30:59.546 A:middle
［ 掌声 ］

00:31:00.046 --> 00:31:01.546 A:middle
centeredItemIdentifier

00:31:01.766 --> 00:31:03.306 A:middle
行为在 Interface Builder 中

00:31:03.306 --> 00:31:04.546 A:middle
也可使用

00:31:04.546 --> 00:31:05.916 A:middle
这是工具栏项目的

00:31:05.916 --> 00:31:08.846 A:middle
检查窗格 你可以看到在最底下

00:31:08.846 --> 00:31:10.906 A:middle
有一个新的勾选框 写着 “Is Centered Item.”

00:31:11.206 --> 00:31:12.766 A:middle
你可以勾选上 而不必再在代码中

00:31:12.766 --> 00:31:13.836 A:middle
进行设置

00:31:13.836 --> 00:31:16.666 A:middle
而且也不必再退回编程 API

00:31:16.666 --> 00:31:18.366 A:middle
你可以继续在 Interface Builder 中

00:31:18.366 --> 00:31:20.306 A:middle
进行你所有的 UI 工作

00:31:21.916 --> 00:31:22.916 A:middle
提到 Interface

00:31:22.916 --> 00:31:24.696 A:middle
Builder 我简直产生了无法形容的激动

00:31:24.696 --> 00:31:26.286 A:middle
因为 Interface

00:31:26.326 --> 00:31:27.826 A:middle
Builder 新增了支持编辑

00:31:27.826 --> 00:31:29.436 A:middle
NSGridViews

00:31:30.726 --> 00:31:31.646 A:middle
如果你对 gridView 不熟悉的话

00:31:31.646 --> 00:31:33.066 A:middle
我可以告诉你 我们多年以前就引入了它

00:31:33.066 --> 00:31:34.636 A:middle
它是一种早期的布局

00:31:34.636 --> 00:31:36.046 A:middle
使用一种方格状的结构

00:31:36.046 --> 00:31:37.656 A:middle
来呈现你的视觉效果

00:31:38.136 --> 00:31:39.166 A:middle
这是从一个钥匙串访问 App

00:31:39.166 --> 00:31:40.276 A:middle
中取的范例

00:31:40.276 --> 00:31:42.026 A:middle
你可以想象

00:31:42.026 --> 00:31:43.326 A:middle
要是手动创建这种布局

00:31:43.326 --> 00:31:45.716 A:middle
要动用多少系统规定参数

00:31:46.186 --> 00:31:47.206 A:middle
你还可以使用

00:31:47.326 --> 00:31:49.436 A:middle
stackViews 来构建这种效果

00:31:49.436 --> 00:31:51.456 A:middle
但是 NSGridView 使整个事件更加容易

00:31:51.456 --> 00:31:52.936 A:middle
并且这个 Interface Builder

00:31:52.936 --> 00:31:54.266 A:middle
中全新的编辑功能支持简直太赞了

00:31:54.266 --> 00:31:56.066 A:middle
太赞了 让我来给你展示一下

00:31:57.396 --> 00:31:58.896 A:middle
这是一些 UI 来自

00:31:58.896 --> 00:31:59.846 A:middle
storyboard 文件

00:32:00.286 --> 00:32:01.846 A:middle
你可以选中这些控制量

00:32:02.176 --> 00:32:03.766 A:middle
然后将它们纳入到方格的试图

00:32:03.766 --> 00:32:05.216 A:middle
那么之后 你就可以进行操作

00:32:05.216 --> 00:32:06.486 A:middle
将这些小格子的

00:32:06.486 --> 00:32:07.826 A:middle
填充和直线

00:32:07.946 --> 00:32:10.646 A:middle
调整成你想要的样子

00:32:11.876 --> 00:32:13.756 A:middle
编辑 UI 的工作方式很像

00:32:13.756 --> 00:32:14.916 A:middle
编号电子表格 App

00:32:15.256 --> 00:32:16.896 A:middle
你可以将视图拖拉或者放置到

00:32:16.896 --> 00:32:17.596 A:middle
cell 里

00:32:17.706 --> 00:32:19.356 A:middle
你可以成行成列地选中

00:32:19.356 --> 00:32:21.586 A:middle
并调整它们的属性

00:32:22.426 --> 00:32:23.836 A:middle
你甚至可以合并 cells

00:32:23.836 --> 00:32:25.436 A:middle
正如你看到的最后两行那里

00:32:26.506 --> 00:32:29.236 A:middle
这里举个例子 我们选中一列

00:32:29.786 --> 00:32:31.466 A:middle
这就是检查

00:32:31.466 --> 00:32:32.866 A:middle
窗格显示的样子 可以看到

00:32:32.866 --> 00:32:34.366 A:middle
你能调整

00:32:34.366 --> 00:32:35.706 A:middle
这一列 cells 的位置

00:32:36.066 --> 00:32:37.936 A:middle
你可以调整头和尾的填充

00:32:38.356 --> 00:32:39.546 A:middle
如果我们切换到尺寸检查器

00:32:39.546 --> 00:32:41.336 A:middle
你可以给纵列调整

00:32:41.336 --> 00:32:42.976 A:middle
明确的宽度

00:32:42.976 --> 00:32:44.206 A:middle
如果你不进行设置

00:32:44.206 --> 00:32:45.216 A:middle
纵列的大小就会

00:32:45.216 --> 00:32:46.946 A:middle
根据内容自动调整

00:32:49.036 --> 00:32:50.106 A:middle
关于这个特性

00:32:50.106 --> 00:32:51.816 A:middle
另外一个特别赞的事情就是

00:32:52.606 --> 00:32:54.216 A:middle
它是可逆展开

00:32:54.426 --> 00:32:56.216 A:middle
GridViews 在 Interface

00:32:56.216 --> 00:32:58.456 A:middle
Builder 中可使用 同样也可以回用到

00:32:58.456 --> 00:33:01.686 A:middle
macOS 10.13.4

00:32:58.456 --> 00:33:01.686 A:middle
macOS 10.13.4

00:33:01.686 --> 00:33:03.306 A:middle
如果你还没有使用合并的 cells

00:33:03.306 --> 00:33:05.016 A:middle
你甚至可以回用到10.12

00:33:05.556 --> 00:33:07.616 A:middle
所以 如果你想要将你的 App

00:33:07.616 --> 00:33:08.696 A:middle
使用在较老版本的 macOS 上

00:33:08.696 --> 00:33:10.776 A:middle
别再等待了

00:33:10.776 --> 00:33:12.796 A:middle
直接使用这个超赞的新功能吧

00:33:15.186 --> 00:33:17.076 A:middle
下一个我想要聊的话题是

00:33:17.126 --> 00:33:18.826 A:middle
NSTextView 的一些改变

00:33:20.176 --> 00:33:22.046 A:middle
首先 有一些新的代理方法

00:33:22.756 --> 00:33:24.466 A:middle
第一个是 fieldEditor

00:33:24.896 --> 00:33:27.756 A:middle
配置了一个 textView

00:33:27.756 --> 00:33:29.816 A:middle
为了给 NSTextField 用作 fieldEditor

00:33:29.936 --> 00:33:32.716 A:middle
这些都提供了一个更为简单的方式

00:33:32.716 --> 00:33:34.276 A:middle
来配置 textViews

00:33:34.276 --> 00:33:35.226 A:middle
用于常见案例的使用

00:33:36.256 --> 00:33:38.666 A:middle
后面的三个使得

00:33:38.746 --> 00:33:40.366 A:middle
textViews 被纳入到 scrollViews

00:33:40.946 --> 00:33:42.296 A:middle
这是目前为止 textView 最为常见的

00:33:42.296 --> 00:33:44.266 A:middle
使用案例

00:33:44.266 --> 00:33:45.156 A:middle
但如果你不得不对 textView 做

00:33:45.156 --> 00:33:46.406 A:middle
额外的配置

00:33:46.406 --> 00:33:47.786 A:middle
一定要记得查看

00:33:47.786 --> 00:33:49.526 A:middle
scrollView 的

00:33:49.576 --> 00:33:50.146 A:middle
documentView 这非常重要

00:33:51.426 --> 00:33:52.756 A:middle
这些在 Interface Builder 同样也是

00:33:52.756 --> 00:33:53.526 A:middle
可以使用的

00:33:53.526 --> 00:33:54.566 A:middle
因此 再次重复 这里也没有必要去

00:33:54.566 --> 00:33:56.436 A:middle
后退回编程 API

00:33:57.366 --> 00:33:58.446 A:middle
下面让我们看一下 它们是什么样子的

00:33:59.356 --> 00:34:00.776 A:middle
这里的窗口做例子

00:33:59.356 --> 00:34:00.776 A:middle
这里的窗口做例子

00:34:00.776 --> 00:34:01.616 A:middle
显示了全部的 4 个

00:34:02.236 --> 00:34:03.226 A:middle
TextViews 有时候

00:34:03.226 --> 00:34:04.916 A:middle
会被误配置 当客户需要在

00:34:04.916 --> 00:34:06.506 A:middle
textField 中优先

00:34:06.576 --> 00:34:07.066 A:middle
fieldEditor 时

00:34:07.236 --> 00:34:08.766 A:middle
所以 使用一个 fieldEditor

00:34:08.766 --> 00:34:10.856 A:middle
代理方法可以帮助避免此问题

00:34:11.815 --> 00:34:13.636 A:middle
下一个 scrollableTextView

00:34:14.346 --> 00:34:15.716 A:middle
应该被用于 textViews

00:34:15.815 --> 00:34:17.946 A:middle
中弹窗和检查器窗格的

00:34:17.946 --> 00:34:19.726 A:middle
补充文本

00:34:19.726 --> 00:34:20.386 A:middle
诸如此类的情况

00:34:20.386 --> 00:34:22.376 A:middle
接下来 最下面的两个

00:34:22.376 --> 00:34:24.266 A:middle
适用于文件内容的文本

00:34:24.456 --> 00:34:25.996 A:middle
左边的适用于格式化文本

00:34:25.996 --> 00:34:28.025 A:middle
右边的适用于纯文本

00:34:28.846 --> 00:34:29.846 A:middle
在这一点上你可能会想知道

00:34:29.926 --> 00:34:31.466 A:middle
它们的区别是什么

00:34:31.516 --> 00:34:33.106 A:middle
因为看起来真的非常相似

00:34:33.596 --> 00:34:34.696 A:middle
主要的好处就是

00:34:34.696 --> 00:34:35.775 A:middle
你不必再担心

00:34:35.775 --> 00:34:36.755 A:middle
系统配置的问题了

00:34:37.496 --> 00:34:38.936 A:middle
比如说 黑暗模式的系统中

00:34:38.936 --> 00:34:41.326 A:middle
它们会看起来截然不同

00:34:42.266 --> 00:34:44.746 A:middle
格式化文本的 textView 仍保持

00:34:44.746 --> 00:34:46.045 A:middle
白色背景

00:34:46.045 --> 00:34:47.926 A:middle
而纯文本会变成黑色

00:34:48.016 --> 00:34:49.406 A:middle
来匹配剩余的系统

00:34:50.106 --> 00:34:51.396 A:middle
所以 通常来讲 如果你使用这些

00:34:51.396 --> 00:34:52.815 A:middle
代理方法 会帮助你维持

00:34:52.815 --> 00:34:55.775 A:middle
你的 App 与系统其它 App

00:34:55.775 --> 00:34:56.255 A:middle
保持一致

00:34:58.696 --> 00:34:59.876 A:middle
我想说的关于 textView

00:34:59.876 --> 00:35:01.206 A:middle
的另一改变是

00:34:59.876 --> 00:35:01.206 A:middle
的另一改变是

00:35:01.206 --> 00:35:03.486 A:middle
修改文本的新方法

00:35:04.176 --> 00:35:05.686 A:middle
PerformValidatedReplacement

00:35:06.276 --> 00:35:07.916 A:middle
这个方法背后的想法是

00:35:07.966 --> 00:35:09.186 A:middle
它提供给你一种非常简单的方式

00:35:09.186 --> 00:35:10.866 A:middle
去修改 textView 中的文本

00:35:10.866 --> 00:35:12.936 A:middle
而且还给你一种行为

00:35:12.936 --> 00:35:14.516 A:middle
就像是用户自己

00:35:14.516 --> 00:35:15.876 A:middle
做出了这个修改

00:35:16.916 --> 00:35:17.936 A:middle
它控制了所有

00:35:17.936 --> 00:35:20.286 A:middle
适合的你期待的方法

00:35:20.696 --> 00:35:21.936 A:middle
但是 真正有趣的部分是

00:35:21.936 --> 00:35:23.716 A:middle
任何一个属性 当它没有被特定指派给

00:35:23.716 --> 00:35:27.196 A:middle
输入的字符串时 textView 的

00:35:27.196 --> 00:35:28.506 A:middle
typingAttributes 会自动将其

00:35:28.616 --> 00:35:29.296 A:middle
匹配输入

00:35:30.466 --> 00:35:31.976 A:middle
我来给你们举个例子吧

00:35:32.506 --> 00:35:33.856 A:middle
这个窗口有一些格式化文本

00:35:33.856 --> 00:35:36.196 A:middle
代码中的一个小片段调用

00:35:36.266 --> 00:35:38.346 A:middle
performValidatedReplacement

00:35:38.346 --> 00:35:40.196 A:middle
去在中间插入 "Developers" 这个单词

00:35:41.266 --> 00:35:42.996 A:middle
如果我们运行这个 这就是我们

00:35:42.996 --> 00:35:43.256 A:middle
获得的内容

00:35:43.256 --> 00:35:45.226 A:middle
单词出现了 而且与周围文本的

00:35:45.226 --> 00:35:46.346 A:middle
格式一致

00:35:46.406 --> 00:35:48.126 A:middle
我们不必去特别指定

00:35:48.126 --> 00:35:49.436 A:middle
任何一个属性

00:35:50.246 --> 00:35:51.896 A:middle
但是 这里也有一个细微的地方

00:35:51.896 --> 00:35:52.576 A:middle
需要注意

00:35:52.646 --> 00:35:55.236 A:middle
因为后退

00:35:55.236 --> 00:35:56.376 A:middle
属性来自于

00:35:56.446 --> 00:35:57.316 A:middle
typingAttributes

00:35:57.426 --> 00:35:59.226 A:middle
因此 如果你开始使用格式化文本来进行

00:35:59.336 --> 00:36:00.436 A:middle
此操作

00:35:59.336 --> 00:36:00.436 A:middle
此操作

00:36:00.436 --> 00:36:02.506 A:middle
插入的部分

00:36:02.506 --> 00:36:04.156 A:middle
最后就会显示为亮色

00:36:04.156 --> 00:36:06.496 A:middle
我们运行的还是同样的代码

00:36:06.496 --> 00:36:09.746 A:middle
这就是结果 格式属性

00:36:09.746 --> 00:36:10.896 A:middle
来自于最后的亮色部分

00:36:12.486 --> 00:36:14.036 A:middle
这个原因让你发现

00:36:14.036 --> 00:36:15.316 A:middle
在调用

00:36:15.316 --> 00:36:16.896 A:middle
performValidatedReplacement 之前

00:36:16.896 --> 00:36:18.136 A:middle
你需要为你即将取代的部分设置

00:36:18.136 --> 00:36:19.956 A:middle
设置选定的范围

00:36:22.896 --> 00:36:24.416 A:middle
如果你如此操作的话

00:36:24.416 --> 00:36:25.216 A:middle
这就是你获得的结果

00:36:27.336 --> 00:36:28.966 A:middle
对于下一个话题

00:36:28.966 --> 00:36:30.436 A:middle
连续相机

00:36:30.466 --> 00:36:31.406 A:middle
我想快速讲一下

00:36:31.856 --> 00:36:35.376 A:middle
这是在 macOS Mojave 中另一个很赞的特性

00:36:36.196 --> 00:36:37.216 A:middle
如果你只是使用

00:36:37.216 --> 00:36:38.746 A:middle
标准的框架类 比如

00:36:38.746 --> 00:36:40.196 A:middle
NSTextView 要利用这个特性

00:36:40.196 --> 00:36:41.746 A:middle
你不需要做什么

00:36:41.746 --> 00:36:42.766 A:middle
特殊的设置

00:36:42.806 --> 00:36:44.336 A:middle
框架会为你解决一切事情

00:36:45.016 --> 00:36:45.996 A:middle
但是 如果你有更多

00:36:45.996 --> 00:36:49.136 A:middle
特定的 App 需要用到它

00:36:49.306 --> 00:36:51.186 A:middle
你可能需要更直接地使用它

00:36:51.336 --> 00:36:52.296 A:middle
另外还很重要的一点

00:36:52.296 --> 00:36:53.806 A:middle
需要了解的就是它是使用

00:36:53.806 --> 00:36:56.066 A:middle
现存服务的 API 去执行的

00:36:56.726 --> 00:36:58.236 A:middle
所以 你需要做的就是告诉

00:36:58.236 --> 00:36:59.756 A:middle
一个框架你的回应

00:36:59.756 --> 00:37:01.606 A:middle
类有能力解决图片数据

00:36:59.756 --> 00:37:01.606 A:middle
类有能力解决图片数据

00:37:01.926 --> 00:37:04.366 A:middle
并且 你可以通过执行 validRequestor 来实现

00:37:05.166 --> 00:37:07.006 A:middle
如果你想尝试

00:37:07.006 --> 00:37:08.046 A:middle
我会鼓励你去查看

00:37:08.046 --> 00:37:09.866 A:middle
validRequestor 的文稿以及

00:37:09.866 --> 00:37:11.126 A:middle
其他一些相关的方法

00:37:13.686 --> 00:37:15.196 A:middle
下面我想讲一下

00:37:15.326 --> 00:37:16.296 A:middle
自定义快捷操作

00:37:16.436 --> 00:37:17.496 A:middle
昨天年度咨文部分的会议上

00:37:17.496 --> 00:37:19.716 A:middle
你可能听到一些关于

00:37:19.716 --> 00:37:21.126 A:middle
快捷操作的内容

00:37:21.126 --> 00:37:23.746 A:middle
快捷操作使得简单的操作动作变得非常容易

00:37:24.466 --> 00:37:26.496 A:middle
比如说打开一个最喜爱的 App

00:37:26.496 --> 00:37:27.916 A:middle
复杂的动作比如

00:37:27.916 --> 00:37:33.076 A:middle
筛选文件或者调用脚本 也很简单

00:37:33.326 --> 00:37:35.406 A:middle
你可以使用 App 扩展或者

00:37:35.406 --> 00:37:38.936 A:middle
Automator 的动作套装

00:37:38.936 --> 00:37:40.296 A:middle
构建自动移快捷操作

00:37:41.136 --> 00:37:42.116 A:middle
它们在很多地方都非常有用

00:37:42.116 --> 00:37:43.926 A:middle
并且也有诸多方式

00:37:43.926 --> 00:37:45.406 A:middle
可以调用它们

00:37:45.406 --> 00:37:47.676 A:middle
但是 到目前为止我最爱的还是触控栏

00:37:48.376 --> 00:37:49.816 A:middle
如果将你的快速操作应用到

00:37:49.816 --> 00:37:51.036 A:middle
触控栏上 会非常容易就可以使用

00:37:51.036 --> 00:37:52.246 A:middle
不管你在哪儿

00:37:52.536 --> 00:37:54.186 A:middle
不管何时你需要它们

00:37:54.656 --> 00:37:55.786 A:middle
你可以通过键盘的偏好设置中

00:37:55.786 --> 00:37:56.816 A:middle
偏好设置中获得

00:37:56.816 --> 00:37:58.326 A:middle
这项操作

00:37:58.326 --> 00:37:59.846 A:middle
并且可以重新设置你的触控栏

00:37:59.846 --> 00:38:01.726 A:middle
是一直展示

00:37:59.846 --> 00:38:01.726 A:middle
是一直展示

00:38:01.726 --> 00:38:03.776 A:middle
还是当控制功能键的时候 进行折叠

00:38:04.416 --> 00:38:05.736 A:middle
或者 你可以将触控栏自定义

00:38:05.806 --> 00:38:07.796 A:middle
将工作流的按钮

00:38:07.796 --> 00:38:09.146 A:middle
拉进控制脚本中

00:38:11.596 --> 00:38:12.706 A:middle
还有一点值得注意的是

00:38:12.706 --> 00:38:13.876 A:middle
你可以去快捷窗格浏览

00:38:13.936 --> 00:38:15.926 A:middle
在服务下面查看

00:38:16.496 --> 00:38:18.096 A:middle
这里你可以通过打开或者关闭

00:38:18.096 --> 00:38:19.346 A:middle
来控制哪一个

00:38:19.576 --> 00:38:21.416 A:middle
可以显示出来

00:38:21.416 --> 00:38:22.366 A:middle
正如我提到的

00:38:22.366 --> 00:38:23.776 A:middle
它们不仅仅是显示在触控栏

00:38:23.776 --> 00:38:25.576 A:middle
我用访达窗格来进行举例

00:38:25.636 --> 00:38:27.366 A:middle
如你所见 contextual 菜单下面的

00:38:27.366 --> 00:38:31.086 A:middle
还有一个快捷操作

00:38:31.466 --> 00:38:33.386 A:middle
访达的预览窗格

00:38:33.386 --> 00:38:34.436 A:middle
也有很多快捷操作

00:38:34.436 --> 00:38:36.026 A:middle
显示在底部 而且完整的列表

00:38:36.296 --> 00:38:37.406 A:middle
在“更多”按钮下面

00:38:38.056 --> 00:38:39.456 A:middle
Automator 的行动套装显示在

00:38:39.456 --> 00:38:41.866 A:middle
服务菜单里面

00:38:42.396 --> 00:38:44.036 A:middle
比如说 TrimLogs 就是一个我写来用于

00:38:44.036 --> 00:38:45.936 A:middle
筛选校正错误的日志的

00:38:47.176 --> 00:38:48.776 A:middle
这也引入了我想要说的

00:38:48.776 --> 00:38:50.176 A:middle
下一个话题

00:38:50.516 --> 00:38:52.166 A:middle
创建行动套装 也被成为

00:38:52.166 --> 00:38:53.816 A:middle
contextual 工作流

00:38:54.406 --> 00:38:56.216 A:middle
这是 Automator 的新功能

00:38:56.516 --> 00:38:57.456 A:middle
当你进入

00:38:57.456 --> 00:38:58.546 A:middle
创建一个新文档

00:38:58.546 --> 00:38:59.886 A:middle
会有一个关于 contextual 工作流

00:38:59.886 --> 00:39:01.006 A:middle
的新的可选项

00:38:59.886 --> 00:39:01.006 A:middle
的新的可选项

00:39:01.646 --> 00:39:02.896 A:middle
他们看起来很像平常的工作流

00:39:02.896 --> 00:39:04.146 A:middle
除了在顶部有一个新的块

00:39:04.146 --> 00:39:06.306 A:middle
可以让你

00:39:06.306 --> 00:39:07.596 A:middle
配置输入和

00:39:07.596 --> 00:39:10.116 A:middle
输出以及选择图标和颜色

00:39:11.716 --> 00:39:13.526 A:middle
我们来迅速浏览一个示例

00:39:14.026 --> 00:39:15.516 A:middle
我经常会面临一个问题

00:39:15.516 --> 00:39:16.886 A:middle
当我想在 TextEdit 中打开一些文件时

00:39:16.886 --> 00:39:18.586 A:middle
我打不开因为

00:39:18.586 --> 00:39:20.156 A:middle
没有文件扩展

00:39:20.616 --> 00:39:23.546 A:middle
使用 Automator 就会非常容易就解决

00:39:24.666 --> 00:39:25.816 A:middle
你要做的只是点进资料库

00:39:25.816 --> 00:39:27.676 A:middle
将打开访达项目行动

00:39:27.676 --> 00:39:29.396 A:middle
拉取出来

00:39:30.096 --> 00:39:32.166 A:middle
你可以将其配置成为用 TextEdit 打开

00:39:32.166 --> 00:39:34.886 A:middle
不再使用默认的 App

00:39:35.646 --> 00:39:37.326 A:middle
在访达中被选中的文件

00:39:37.326 --> 00:39:38.736 A:middle
自动成为这个动作的输入内容

00:39:38.736 --> 00:39:43.926 A:middle
如果你用什么名字保存这个文件 就会

00:39:43.926 --> 00:39:44.816 A:middle
自动出现在触控栏中

00:39:44.876 --> 00:39:47.896 A:middle
或者在其他有用的文本下

00:39:50.686 --> 00:39:54.216 A:middle
总结来说 我们提到了

00:39:54.216 --> 00:39:55.906 A:middle
许多新的功能

00:39:56.176 --> 00:39:57.666 A:middle
以及其他的一些改变

00:39:57.666 --> 00:39:59.006 A:middle
将会使你的开发经历更为丰富

00:39:59.006 --> 00:40:00.976 A:middle
你的 App 更加伟大

00:39:59.006 --> 00:40:00.976 A:middle
你的 App 更加伟大

00:40:01.046 --> 00:40:04.936 A:middle
查看新的 SDK

00:40:05.416 --> 00:40:07.426 A:middle
并开始在你的 App 中

00:40:07.696 --> 00:40:08.866 A:middle
使用这些内容

00:40:10.046 --> 00:40:11.756 A:middle
会让你的 App 吸引人

00:40:11.756 --> 00:40:14.356 A:middle
你的顾客也会喜欢

00:40:15.046 --> 00:40:17.436 A:middle
更多信息 可以查看以下 URL

00:40:17.436 --> 00:40:20.666 A:middle
并且 也可进入 WWDC

00:40:20.666 --> 00:40:21.846 A:middle
的 App 此演讲部分下查看

00:40:22.156 --> 00:40:23.826 A:middle
所有相关的演讲链接

00:40:23.826 --> 00:40:24.306 A:middle
都在这里

00:40:24.396 --> 00:40:24.926 A:middle
非常感谢

00:40:25.516 --> 00:40:31.500 A:middle
［ 掌声 ］
