WEBVTT

00:00:07.516 --> 00:00:16.516 A:middle
［ 音乐 ］

00:00:17.516 --> 00:00:24.516 A:middle
［ 掌声 ］

00:00:25.016 --> 00:00:26.496 A:middle
&gt;&gt; 早上好 各位

00:00:26.496 --> 00:00:28.826 A:middle
欢迎来到玩转体能训练新方法

00:00:29.426 --> 00:00:30.476 A:middle
我是 Niharika

00:00:30.686 --> 00:00:31.976 A:middle
我是 Apple

00:00:31.976 --> 00:00:33.766 A:middle
健身团队的工程师

00:00:33.766 --> 00:00:34.746 A:middle
来自我们健康团队的同事

00:00:34.746 --> 00:00:36.346 A:middle
工程师 Karim

00:00:36.346 --> 00:00:37.046 A:middle
也将加入我们今天的话题

00:00:37.616 --> 00:00:39.506 A:middle
我们非常兴奋地

00:00:39.506 --> 00:00:40.546 A:middle
与你们分享

00:00:40.546 --> 00:00:41.756 A:middle
一些全新的特性与功能

00:00:41.756 --> 00:00:42.996 A:middle
它们已经随着 iOS 12

00:00:43.066 --> 00:00:46.186 A:middle
和 watchOS 5 加入了 HealthKit

00:00:49.216 --> 00:00:51.076 A:middle
Apple Watch 发布于 3 年前

00:00:51.076 --> 00:00:52.356 A:middle
从那时起

00:00:52.356 --> 00:00:54.126 A:middle
我们的用户就热衷于

00:00:54.126 --> 00:00:55.426 A:middle
使用它的健康与

00:00:55.426 --> 00:00:56.166 A:middle
健身功能

00:00:56.646 --> 00:00:57.576 A:middle
他们喜欢完成每日任务圆环

00:00:57.656 --> 00:00:59.406 A:middle
及达成各种成就

00:00:59.406 --> 00:01:01.076 A:middle
并乐于和好友彼此分享

00:00:59.406 --> 00:01:01.076 A:middle
并乐于和好友彼此分享

00:01:01.076 --> 00:01:02.666 A:middle
但他们最喜欢的还是完成

00:01:02.666 --> 00:01:03.206 A:middle
体能训练

00:01:04.215 --> 00:01:05.806 A:middle
虽然只是一个开始

00:01:06.006 --> 00:01:07.526 A:middle
但这块手表正在形成一个

00:01:07.526 --> 00:01:09.416 A:middle
充满活力 不断进化的生态系统

00:01:09.806 --> 00:01:11.826 A:middle
其中少不了在座各位

00:01:11.916 --> 00:01:13.606 A:middle
开发人员的贡献

00:01:15.006 --> 00:01:16.586 A:middle
仅仅 2017 年第四季度

00:01:16.586 --> 00:01:18.996 A:middle
App Store 中

00:01:18.996 --> 00:01:21.216 A:middle
健康健美类别下的 App

00:01:21.216 --> 00:01:22.736 A:middle
下载量超过了 2 亿

00:01:22.796 --> 00:01:25.896 A:middle
这是个惊人的数字

00:01:26.206 --> 00:01:27.906 A:middle
两亿这个数字

00:01:27.906 --> 00:01:28.286 A:middle
实在太酷了

00:01:28.786 --> 00:01:29.866 A:middle
更重要的是

00:01:29.866 --> 00:01:31.226 A:middle
这证明了两件事

00:01:31.516 --> 00:01:33.456 A:middle
其一 它证明了你们各位开发人员的

00:01:33.456 --> 00:01:35.206 A:middle
杰出贡献

00:01:35.206 --> 00:01:36.896 A:middle
为用户带来了绝佳的

00:01:36.896 --> 00:01:38.246 A:middle
产品体验

00:01:38.696 --> 00:01:40.256 A:middle
其二 这意味着人们在这一块

00:01:40.256 --> 00:01:41.276 A:middle
有切实的需求

00:01:41.626 --> 00:01:43.216 A:middle
人们密切关注着这一领域

00:01:43.256 --> 00:01:44.976 A:middle
翘首期盼

00:01:44.976 --> 00:01:46.756 A:middle
你们的新成果

00:01:48.246 --> 00:01:49.116 A:middle
这一生态系统的核心

00:01:49.116 --> 00:01:50.976 A:middle
是这两个 App

00:01:50.976 --> 00:01:52.406 A:middle
健身记录和健康

00:01:52.936 --> 00:01:54.586 A:middle
健身记录是为你呈现

00:01:54.586 --> 00:01:56.736 A:middle
可视化运动数据的主界面

00:01:57.226 --> 00:01:58.506 A:middle
你可以查看你的体能训练

00:01:58.506 --> 00:02:00.646 A:middle
查看热量消耗和锻炼时常

00:01:58.506 --> 00:02:00.646 A:middle
查看热量消耗和锻炼时常

00:02:01.326 --> 00:02:03.156 A:middle
健康 App 包括更多东西

00:02:03.826 --> 00:02:05.666 A:middle
当然 所有这些的核心

00:02:05.666 --> 00:02:06.956 A:middle
也就是我们今天

00:02:06.956 --> 00:02:08.716 A:middle
齐聚于此的理由 就是 HealthKit

00:02:10.186 --> 00:02:12.286 A:middle
我们今天有海量激动人心的

00:02:12.286 --> 00:02:13.976 A:middle
事情要讨论

00:02:13.976 --> 00:02:15.346 A:middle
在我们开始那些话题之前

00:02:15.346 --> 00:02:16.566 A:middle
我们要先谈一谈

00:02:16.566 --> 00:02:17.946 A:middle
一件极其重要的事

00:02:18.196 --> 00:02:19.676 A:middle
那就是隐私和授权

00:02:19.676 --> 00:02:21.796 A:middle
由于数据是相当敏感的

00:02:21.796 --> 00:02:23.446 A:middle
尤其是健康数据

00:02:23.496 --> 00:02:25.146 A:middle
因此在设计研发 App 时

00:02:25.146 --> 00:02:26.426 A:middle
确保有一个

00:02:26.426 --> 00:02:28.516 A:middle
完整的隐私政策

00:02:28.516 --> 00:02:30.676 A:middle
至关重要

00:02:30.776 --> 00:02:32.836 A:middle
然后 Karim 会和大家分享

00:02:32.836 --> 00:02:34.366 A:middle
我们全新的训练功能特性

00:02:34.726 --> 00:02:36.026 A:middle
可以使你更加轻松地

00:02:36.026 --> 00:02:38.146 A:middle
打造一款可靠的

00:02:38.146 --> 00:02:39.026 A:middle
体能训练 App

00:02:39.296 --> 00:02:41.216 A:middle
最后 我激动地跟大家分享

00:02:41.216 --> 00:02:42.656 A:middle
我们全新的 Quantity 系列 API

00:02:42.716 --> 00:02:44.646 A:middle
这是一个储存与关联

00:02:44.646 --> 00:02:46.256 A:middle
高频数据的

00:02:46.336 --> 00:02:47.346 A:middle
全新方式

00:02:48.726 --> 00:02:49.716 A:middle
好 让我们开始吧

00:02:52.536 --> 00:02:53.946 A:middle
正如我所提到

00:02:53.946 --> 00:02:55.636 A:middle
隐私和授权必须

00:02:55.636 --> 00:02:57.886 A:middle
先行于任何开发过程

00:02:57.886 --> 00:02:59.656 A:middle
我们 Apple 看待隐私

00:02:59.656 --> 00:03:02.796 A:middle
有一条简单的原则

00:02:59.656 --> 00:03:02.796 A:middle
有一条简单的原则

00:03:03.016 --> 00:03:03.916 A:middle
隐私以用户为本

00:03:04.696 --> 00:03:06.986 A:middle
HealthKit 就是以此为基础 设计而成的

00:03:07.146 --> 00:03:08.856 A:middle
HealthKit 的设计使用户

00:03:08.856 --> 00:03:10.756 A:middle
成为数据的主人

00:03:11.176 --> 00:03:13.296 A:middle
用户可以授权访问

00:03:13.296 --> 00:03:15.676 A:middle
也可以随时取消授权

00:03:16.266 --> 00:03:17.986 A:middle
作为开发人员的你们

00:03:17.986 --> 00:03:19.406 A:middle
是这一环里的最后一块拼图

00:03:19.406 --> 00:03:20.856 A:middle
我们想要确保

00:03:21.136 --> 00:03:23.136 A:middle
我们提供给你们的工具

00:03:25.676 --> 00:03:28.786 A:middle
我们想了几条

00:03:28.786 --> 00:03:29.596 A:middle
简单的规则

00:03:29.796 --> 00:03:31.676 A:middle
第一条是根据你 App 的功能

00:03:31.726 --> 00:03:33.076 A:middle
收集部分数据

00:03:33.476 --> 00:03:34.836 A:middle
意思是说

00:03:34.836 --> 00:03:37.356 A:middle
你应当根据 App 需求

00:03:37.356 --> 00:03:38.536 A:middle
仅收集必要的数据

00:03:38.876 --> 00:03:40.246 A:middle
当然这不是永远

00:03:40.246 --> 00:03:40.506 A:middle
固定的数据

00:03:40.506 --> 00:03:42.566 A:middle
刚开始时 数量可能

00:03:42.566 --> 00:03:43.406 A:middle
不会很多

00:03:43.406 --> 00:03:45.196 A:middle
根据你的实际情况

00:03:45.196 --> 00:03:46.916 A:middle
当你的功能特性增加时

00:03:46.916 --> 00:03:48.076 A:middle
你所需的数据也会更多

00:03:48.076 --> 00:03:50.126 A:middle
但是按照当时的特定需求

00:03:50.126 --> 00:03:51.656 A:middle
来收集必要数据

00:03:51.656 --> 00:03:53.276 A:middle
是非常重要的

00:03:54.266 --> 00:03:57.736 A:middle
第二条是 HealthKit 的授权

00:03:57.736 --> 00:03:58.326 A:middle
是可以更改的

00:03:58.596 --> 00:03:59.996 A:middle
这一条有些微妙

00:04:00.306 --> 00:04:02.526 A:middle
比如说 如果用户重置了

00:04:02.566 --> 00:04:04.036 A:middle
他们的位置与隐私数据

00:04:04.416 --> 00:04:05.606 A:middle
位置与隐私设置

00:04:05.606 --> 00:04:08.066 A:middle
你必须确保尊重

00:04:08.066 --> 00:04:09.566 A:middle
他们的行为

00:04:09.566 --> 00:04:10.436 A:middle
这是你们

00:04:10.436 --> 00:04:12.516 A:middle
应尽的义务

00:04:13.016 --> 00:04:14.346 A:middle
最好的方式

00:04:14.346 --> 00:04:15.746 A:middle
是将 HealthKit 视作真实数据的

00:04:15.746 --> 00:04:18.576 A:middle
唯一来源 因为 HealthKit

00:04:18.576 --> 00:04:20.236 A:middle
会不断更新用户的

00:04:20.236 --> 00:04:21.946 A:middle
授权状态

00:04:21.986 --> 00:04:23.126 A:middle
你必须保证不私藏

00:04:23.126 --> 00:04:25.096 A:middle
任何用户数据

00:04:25.096 --> 00:04:26.356 A:middle
保证你永远只从 HealthKit

00:04:26.356 --> 00:04:28.336 A:middle
获取你所需的数据

00:04:28.336 --> 00:04:29.126 A:middle
这一点尤为重要

00:04:29.786 --> 00:04:31.486 A:middle
这两个想法

00:04:31.596 --> 00:04:33.546 A:middle
可以被提炼成 3 条规则

00:04:34.546 --> 00:04:36.816 A:middle
当我们涉及隐私与授权时

00:04:36.816 --> 00:04:38.246 A:middle
你应当仅取所需

00:04:38.246 --> 00:04:40.636 A:middle
仅在需要时索取

00:04:40.636 --> 00:04:43.066 A:middle
且每次都要单独索取

00:04:44.006 --> 00:04:46.596 A:middle
在代码实现上

00:04:46.596 --> 00:04:47.066 A:middle
这同样简单

00:04:47.736 --> 00:04:49.306 A:middle
如果我要做一个体能训练 App

00:04:49.306 --> 00:04:50.336 A:middle
开始着手做

00:04:50.336 --> 00:04:51.876 A:middle
理所当然

00:04:51.876 --> 00:04:53.036 A:middle
我需要先从隐私与

00:04:53.036 --> 00:04:53.776 A:middle
授权下手

00:04:54.326 --> 00:04:55.536 A:middle
首先 由于我在创建

00:04:55.536 --> 00:04:57.276 A:middle
一个体能训练 App 我想要

00:04:57.276 --> 00:04:59.866 A:middle
和 HealthKit 共享训练类型

00:04:59.866 --> 00:05:01.186 A:middle
所以我需要明确表明我需要

00:04:59.866 --> 00:05:01.186 A:middle
所以我需要明确表明我需要

00:05:01.186 --> 00:05:02.156 A:middle
共享训练类型

00:05:03.006 --> 00:05:04.376 A:middle
接下来 因为我只是在起步阶段

00:05:04.376 --> 00:05:05.946 A:middle
我需要追踪的

00:05:05.946 --> 00:05:07.586 A:middle
数据类型并不多

00:05:07.586 --> 00:05:08.666 A:middle
我想追踪用户的

00:05:08.666 --> 00:05:10.876 A:middle
心率 热量消耗

00:05:10.876 --> 00:05:12.246 A:middle
还有步行与

00:05:12.246 --> 00:05:12.586 A:middle
跑步的路程

00:05:12.836 --> 00:05:14.036 A:middle
现阶段我只需要这些

00:05:14.036 --> 00:05:16.326 A:middle
所以我就是我要请求的

00:05:16.326 --> 00:05:17.856 A:middle
全部数据

00:05:18.076 --> 00:05:19.856 A:middle
最后 在我的 HealthStore 上

00:05:19.856 --> 00:05:21.836 A:middle
我仅请求以上这些数据的授权

00:05:21.916 --> 00:05:23.396 A:middle
我请求要共享的类型

00:05:23.396 --> 00:05:24.366 A:middle
以及要读取的类型

00:05:24.816 --> 00:05:26.586 A:middle
通过以上三个简单的步骤

00:05:26.646 --> 00:05:27.946 A:middle
我们就能切实地确保

00:05:27.946 --> 00:05:29.896 A:middle
我们为尊重用户隐私

00:05:29.936 --> 00:05:31.466 A:middle
完成了必要的步骤

00:05:32.066 --> 00:05:35.436 A:middle
隐私如此重要

00:05:35.436 --> 00:05:36.966 A:middle
越好的 App 越重视隐私

00:05:36.966 --> 00:05:38.586 A:middle
在开发伊始

00:05:38.586 --> 00:05:39.956 A:middle
时刻注意这一点

00:05:39.956 --> 00:05:42.116 A:middle
是至关重要的

00:05:42.666 --> 00:05:44.006 A:middle
现在我们就能访问

00:05:44.006 --> 00:05:46.476 A:middle
用户数据了

00:05:46.476 --> 00:05:47.726 A:middle
我迫不及待地向大家介绍 Karim

00:05:47.726 --> 00:05:49.136 A:middle
他会向大家展示全新的

00:05:49.136 --> 00:05:50.036 A:middle
体能训练的功能特性

00:05:51.516 --> 00:05:56.096 A:middle
［掌声］

00:05:56.596 --> 00:05:57.946 A:middle
&gt;&gt; 大家好

00:05:58.576 --> 00:06:00.736 A:middle
感谢大家今天参加这个会议

00:05:58.576 --> 00:06:00.736 A:middle
感谢大家今天参加这个会议

00:06:01.306 --> 00:06:03.256 A:middle
我怀着激动的心情

00:06:03.386 --> 00:06:05.246 A:middle
与你们分享全新的体能训练 API

00:06:06.526 --> 00:06:08.036 A:middle
如果这是你第一次接触 HealthKit

00:06:08.526 --> 00:06:10.876 A:middle
你会发现它如此简单好用

00:06:11.146 --> 00:06:12.896 A:middle
让你能从零开始

00:06:12.896 --> 00:06:14.536 A:middle
打造一款功能完善的训练 App

00:06:15.356 --> 00:06:16.856 A:middle
另一方面 假如你

00:06:17.156 --> 00:06:18.486 A:middle
在 App Store 已经拥有一款训练 App

00:06:19.036 --> 00:06:20.746 A:middle
你仍然能看到关于这个 API 的

00:06:20.746 --> 00:06:22.796 A:middle
所有全新的功能特性

00:06:22.796 --> 00:06:24.226 A:middle
让你的 App 获益匪浅

00:06:25.076 --> 00:06:26.496 A:middle
让我们深入了解一下

00:06:26.966 --> 00:06:29.766 A:middle
首先我想先谈谈

00:06:29.766 --> 00:06:32.556 A:middle
通常情况下体能训练 App 的

00:06:32.906 --> 00:06:33.556 A:middle
生命周期

00:06:34.196 --> 00:06:35.616 A:middle
假如说我们正在创建一个

00:06:35.766 --> 00:06:37.926 A:middle
训练 App 来追踪用户的活动

00:06:37.926 --> 00:06:41.606 A:middle
首先第一步

00:06:41.606 --> 00:06:43.506 A:middle
是配置你的 App

00:06:44.246 --> 00:06:46.146 A:middle
在这个阶段 我们知道

00:06:46.146 --> 00:06:48.086 A:middle
用户想要做体能训练

00:06:48.086 --> 00:06:50.586 A:middle
训练的具体类型

00:06:51.046 --> 00:06:52.546 A:middle
我们需要确保

00:06:52.546 --> 00:06:54.556 A:middle
我们的 UI 已经就位

00:06:55.916 --> 00:06:58.596 A:middle
一旦配置完成

00:06:58.596 --> 00:07:00.506 A:middle
我们就能开始体能训练了

00:06:58.596 --> 00:07:00.506 A:middle
我们就能开始体能训练了

00:07:01.776 --> 00:07:03.766 A:middle
在这个阶段

00:07:03.766 --> 00:07:06.086 A:middle
用户会积极锻炼

00:07:06.826 --> 00:07:08.796 A:middle
当然 过了一会

00:07:08.796 --> 00:07:12.046 A:middle
用户会想要结束

00:07:12.046 --> 00:07:12.616 A:middle
体能训练

00:07:13.436 --> 00:07:15.666 A:middle
在那时 我们可以

00:07:15.666 --> 00:07:17.216 A:middle
在 HealthKit 中保存

00:07:17.216 --> 00:07:19.316 A:middle
这条健身记录以及相关数据

00:07:20.596 --> 00:07:23.766 A:middle
这就是一款体能训练 App

00:07:23.766 --> 00:07:25.616 A:middle
通常的生命周期

00:07:26.356 --> 00:07:29.116 A:middle
现在让我们观察一下用户

00:07:29.116 --> 00:07:30.086 A:middle
在活跃时都发生么什么

00:07:30.746 --> 00:07:34.236 A:middle
你通过交互界面与用户产生关联

00:07:34.236 --> 00:07:36.826 A:middle
这个过程中你想要

00:07:36.826 --> 00:07:39.266 A:middle
完成的任务之一

00:07:39.376 --> 00:07:41.736 A:middle
就是收集那些

00:07:41.736 --> 00:07:44.096 A:middle
显示在用户界面的

00:07:44.096 --> 00:07:45.376 A:middle
训练数据

00:07:46.396 --> 00:07:47.926 A:middle
你同时得确保

00:07:47.926 --> 00:07:50.116 A:middle
用户可以掌控

00:07:50.116 --> 00:07:52.606 A:middle
训练过程的状态

00:07:52.706 --> 00:07:55.116 A:middle
随时暂停或是继续训练

00:07:55.576 --> 00:07:59.626 A:middle
如果你熟悉 HealthKit

00:07:59.626 --> 00:08:01.726 A:middle
你可能了解

00:07:59.626 --> 00:08:01.726 A:middle
你可能了解

00:08:01.916 --> 00:08:04.866 A:middle
watchOS 上的 HKWorkoutSession

00:08:06.156 --> 00:08:09.126 A:middle
HKWorkoutSession 可以处理

00:08:09.126 --> 00:08:12.686 A:middle
生命周期中的某几个步骤

00:08:13.256 --> 00:08:16.646 A:middle
它会使设备的传感器

00:08:16.646 --> 00:08:19.546 A:middle
进入随时准备收集数据的状态

00:08:19.916 --> 00:08:21.586 A:middle
使你能够准确地

00:08:21.646 --> 00:08:24.126 A:middle
收集到训练相关的数据

00:08:24.126 --> 00:08:26.966 A:middle
比如热量消耗 或是心率

00:08:27.646 --> 00:08:29.476 A:middle
它还能让你的 App

00:08:29.476 --> 00:08:31.166 A:middle
在训练进行时

00:08:31.166 --> 00:08:36.515 A:middle
可以在后台运行

00:08:36.716 --> 00:08:39.316 A:middle
你也能够用

00:08:39.316 --> 00:08:41.196 A:middle
HKWorkoutSession 来控制

00:08:41.196 --> 00:08:43.056 A:middle
这次训练的状态

00:08:44.436 --> 00:08:45.996 A:middle
以及最后 你可以

00:08:46.376 --> 00:08:48.756 A:middle
产生生成类似游泳

00:08:48.756 --> 00:08:49.906 A:middle
圈数的活动

00:08:50.446 --> 00:08:53.396 A:middle
当然 这样还不够

00:08:53.396 --> 00:08:57.426 A:middle
你还需要

00:08:57.756 --> 00:09:00.236 A:middle
收集训练过程中

00:08:57.756 --> 00:09:00.236 A:middle
收集训练过程中

00:09:00.236 --> 00:09:02.306 A:middle
设备产生的数据

00:09:02.306 --> 00:09:04.826 A:middle
然后将它都保存到

00:09:04.826 --> 00:09:06.136 A:middle
HealthKit 上面

00:09:07.096 --> 00:09:09.816 A:middle
为了实现这一点

00:09:09.816 --> 00:09:12.256 A:middle
我很高兴介绍一个新的类

00:09:12.746 --> 00:09:14.206 A:middle
HKWorkoutBuilder

00:09:15.316 --> 00:09:16.746 A:middle
这个 workout builder 是你

00:09:16.746 --> 00:09:19.896 A:middle
收集数据并将其保存在 HealthKit 中的

00:09:19.896 --> 00:09:21.816 A:middle
一站式解决方案

00:09:22.366 --> 00:09:25.476 A:middle
所以这个 builder 会创建

00:09:25.476 --> 00:09:28.826 A:middle
并存储一个 HKWorkout 对象

00:09:28.826 --> 00:09:30.776 A:middle
它在 HealthKit 中代表了一次

00:09:30.776 --> 00:09:31.346 A:middle
体能训练

00:09:33.406 --> 00:09:35.676 A:middle
然后你可以在创建体能训练时

00:09:36.036 --> 00:09:39.186 A:middle
在 builder 中添加样本

00:09:39.326 --> 00:09:41.836 A:middle
活动以及自定义的元数据

00:09:42.316 --> 00:09:45.656 A:middle
并且如果你在 watchOS 上

00:09:45.656 --> 00:09:47.316 A:middle
你可以使用它的子类

00:09:47.756 --> 00:09:49.436 A:middle
HKLiveWorkoutBuilder

00:09:50.836 --> 00:09:53.806 A:middle
所以它仅限于 watchOS

00:09:54.326 --> 00:09:56.116 A:middle
而且又因为它是 HKWorkoutBuilder 的

00:09:56.116 --> 00:09:58.096 A:middle
子类 它有这个 builder 的

00:09:58.146 --> 00:09:59.306 A:middle
所有优点

00:09:59.306 --> 00:10:02.126 A:middle
但又因为它在 watchOS 上

00:09:59.306 --> 00:10:02.126 A:middle
但又因为它在 watchOS 上

00:10:02.126 --> 00:10:04.226 A:middle
它和 HKWorkoutSession

00:10:04.226 --> 00:10:06.676 A:middle
紧密合作

00:10:06.736 --> 00:10:08.106 A:middle
它有那些很酷的

00:10:08.106 --> 00:10:10.956 A:middle
功能 比如说自动样本

00:10:11.026 --> 00:10:12.786 A:middle
自动活动收集

00:10:12.786 --> 00:10:13.776 A:middle
我们之后会再说到

00:10:15.736 --> 00:10:18.006 A:middle
所以让我们回到体能训练的

00:10:18.006 --> 00:10:21.136 A:middle
App 的生命周期 我们会看到

00:10:21.136 --> 00:10:23.206 A:middle
我们如何用新的 workout builder

00:10:23.206 --> 00:10:25.986 A:middle
设置并开始体能训练

00:10:29.456 --> 00:10:31.936 A:middle
那么首先 我们需要创建一个

00:10:31.936 --> 00:10:32.736 A:middle
workout builder

00:10:33.736 --> 00:10:34.956 A:middle
我们需要用一个初始化程序

00:10:34.956 --> 00:10:37.356 A:middle
我们需要传入一个

00:10:37.356 --> 00:10:39.526 A:middle
healthStore 对象

00:10:39.606 --> 00:10:41.666 A:middle
一个配置项 包含

00:10:41.666 --> 00:10:43.646 A:middle
体能训练类型

00:10:43.646 --> 00:10:45.656 A:middle
户内或户外

00:10:45.656 --> 00:10:47.796 A:middle
其他有关信息的

00:10:48.616 --> 00:10:51.156 A:middle
最后 一个可选的设备

00:10:51.726 --> 00:10:53.546 A:middle
比如说如果数据来自

00:10:53.546 --> 00:10:54.906 A:middle
一个外部的设备

00:10:56.336 --> 00:10:58.946 A:middle
一旦我的 builder 被创建

00:10:58.946 --> 00:10:59.996 A:middle
我所需要做的就是

00:10:59.996 --> 00:11:02.706 A:middle
调用 beginCollection 并且传入一个

00:10:59.996 --> 00:11:02.706 A:middle
调用 beginCollection 并且传入一个

00:11:02.706 --> 00:11:02.926 A:middle
开始时间

00:11:04.076 --> 00:11:04.896 A:middle
就是这么简单

00:11:06.426 --> 00:11:09.046 A:middle
如果你在 watchOS 上

00:11:09.046 --> 00:11:10.676 A:middle
你可以用 HKLiveWorkoutBuilder

00:11:11.056 --> 00:11:13.266 A:middle
首先 你需要创建一个

00:11:13.266 --> 00:11:15.946 A:middle
体能训练 session

00:11:15.946 --> 00:11:16.766 A:middle
传入 healthStore 对象

00:11:16.766 --> 00:11:19.386 A:middle
以及 workoutConfiguration

00:11:19.756 --> 00:11:21.576 A:middle
然后你不要自己创建 builder

00:11:21.576 --> 00:11:23.386 A:middle
你可以直接

00:11:23.386 --> 00:11:25.876 A:middle
从 session 中获取

00:11:25.876 --> 00:11:26.626 A:middle
通过这次调用

00:11:27.836 --> 00:11:29.156 A:middle
一旦我们有了 session

00:11:29.156 --> 00:11:30.936 A:middle
和 builder 我们可以继续

00:11:30.936 --> 00:11:32.146 A:middle
并开始了

00:11:32.736 --> 00:11:35.006 A:middle
调用 session 上的 startActivity

00:11:35.006 --> 00:11:37.466 A:middle
和 builder 上的 beginCollection

00:11:37.776 --> 00:11:39.416 A:middle
传入一个开始时间

00:11:39.916 --> 00:11:41.236 A:middle
就是这么简单

00:11:41.726 --> 00:11:45.376 A:middle
这就是如何用 builder

00:11:45.376 --> 00:11:47.876 A:middle
设置并创建一个体能训练

00:11:48.886 --> 00:11:49.996 A:middle
现在 我们来看看我们如何

00:11:50.376 --> 00:11:53.666 A:middle
收集直接展示

00:11:53.666 --> 00:11:56.576 A:middle
在用户界面上的数据

00:11:56.576 --> 00:11:58.116 A:middle
以及如何控制体能训练的状态

00:11:58.116 --> 00:12:00.626 A:middle
当用户需要它的时候

00:11:58.116 --> 00:12:00.626 A:middle
当用户需要它的时候

00:12:02.956 --> 00:12:05.766 A:middle
为了收集数据

00:12:05.766 --> 00:12:08.526 A:middle
如果我们想要添加与体能训练

00:12:08.526 --> 00:12:11.096 A:middle
有关的样本数据 比如卡路里

00:12:11.096 --> 00:12:14.536 A:middle
距离 心率

00:12:14.536 --> 00:12:16.606 A:middle
我们可以调用一个简单的方法

00:12:16.636 --> 00:12:19.666 A:middle
即 builder.add

00:12:19.666 --> 00:12:21.516 A:middle
给它传入一个 HKSample 数组

00:12:22.116 --> 00:12:25.656 A:middle
如果我们有想要添加到

00:12:25.656 --> 00:12:27.606 A:middle
体能训练中的事件

00:12:27.606 --> 00:12:28.036 A:middle
也非常类似

00:12:29.126 --> 00:12:30.416 A:middle
我们只需调用

00:12:30.576 --> 00:12:32.046 A:middle
builder.addWorkoutEvents

00:12:33.476 --> 00:12:36.306 A:middle
至于元数据 你们肯定猜到了

00:12:36.856 --> 00:12:38.756 A:middle
有了元数据字典

00:12:39.006 --> 00:12:41.376 A:middle
我们只需调用 builder.addMetadata

00:12:41.576 --> 00:12:43.806 A:middle
然后传入字典即可

00:12:44.466 --> 00:12:48.526 A:middle
但是在 Apple Watch 上

00:12:48.526 --> 00:12:51.536 A:middle
因为设备是在手腕上

00:12:51.606 --> 00:12:53.796 A:middle
而且有众多传感器

00:12:54.216 --> 00:12:55.976 A:middle
你可以产生真实的数据

00:12:56.056 --> 00:12:58.776 A:middle
比如卡路里和距离

00:12:59.166 --> 00:13:01.026 A:middle
那么如果我们可以让 builder

00:12:59.166 --> 00:13:01.026 A:middle
那么如果我们可以让 builder

00:13:01.056 --> 00:13:03.106 A:middle
全自动地收集所有数据

00:13:03.876 --> 00:13:06.306 A:middle
岂不是很棒

00:13:07.336 --> 00:13:10.706 A:middle
从 watchOS 5 开始

00:13:10.706 --> 00:13:13.856 A:middle
我们有了自动数据收集

00:13:14.246 --> 00:13:15.776 A:middle
这一切从

00:13:15.776 --> 00:13:17.856 A:middle
HKLiveWorkoutDataSource 开始

00:13:18.406 --> 00:13:22.086 A:middle
所以这个数据源会

00:13:22.806 --> 00:13:25.346 A:middle
收集与当前体能训练相关的

00:13:25.346 --> 00:13:27.136 A:middle
体能训练相关的样本数据

00:13:29.226 --> 00:13:32.756 A:middle
不过 你仍然可以选择

00:13:33.316 --> 00:13:34.676 A:middle
你想要收集的类型

00:13:34.776 --> 00:13:37.996 A:middle
你可以添加或移除类型

00:13:37.996 --> 00:13:38.556 A:middle
只需根据你的需求

00:13:39.266 --> 00:13:40.596 A:middle
它的工作方式如下

00:13:41.456 --> 00:13:43.796 A:middle
首先 我们创建一个数据源

00:13:45.056 --> 00:13:46.896 A:middle
在这 我传入了 healthStore

00:13:47.386 --> 00:13:49.836 A:middle
同时也传入了 workoutConfiguration

00:13:50.346 --> 00:13:51.246 A:middle
由于我传入的配置

00:13:51.246 --> 00:13:52.636 A:middle
包含了活动类型

00:13:52.636 --> 00:13:54.696 A:middle
的有关信息

00:13:54.696 --> 00:13:56.816 A:middle
数据源从而能够

00:13:56.816 --> 00:13:59.806 A:middle
推断针对这次体能训练

00:13:59.806 --> 00:14:03.136 A:middle
应该收集哪些类型的数据

00:13:59.806 --> 00:14:03.136 A:middle
应该收集哪些类型的数据

00:14:03.236 --> 00:14:05.486 A:middle
接下来 我只需把

00:14:05.486 --> 00:14:07.956 A:middle
数据源设置在 live workout builder 上面

00:14:09.546 --> 00:14:11.616 A:middle
以及可选地 你可以增加

00:14:11.616 --> 00:14:14.036 A:middle
或移除正在收集的类型

00:14:14.746 --> 00:14:16.636 A:middle
比如说我想要

00:14:16.636 --> 00:14:17.016 A:middle
添加类型

00:14:17.686 --> 00:14:20.206 A:middle
我可以指明

00:14:20.206 --> 00:14:22.096 A:middle
我想在这里添加的类型

00:14:22.166 --> 00:14:24.056 A:middle
如果我想要进一步

00:14:24.056 --> 00:14:26.046 A:middle
限制被收集的类型

00:14:26.046 --> 00:14:26.756 A:middle
也可以指明一个可选的谓词

00:14:27.786 --> 00:14:29.516 A:middle
最后 我们只需调用 dataSource

00:14:29.996 --> 00:14:30.856 A:middle
.collectStatistics

00:14:31.036 --> 00:14:34.566 A:middle
传入类型

00:14:34.616 --> 00:14:37.676 A:middle
同样还有 optionalPredicate

00:14:37.966 --> 00:14:41.816 A:middle
那么现在数据正在被收集

00:14:41.866 --> 00:14:44.186 A:middle
我们来看看如何可以将其

00:14:44.726 --> 00:14:47.686 A:middle
直接显示在用户界面上

00:14:48.246 --> 00:14:52.916 A:middle
每次 builder 的委托方法

00:14:53.866 --> 00:14:55.486 A:middle
带来新数据

00:14:55.926 --> 00:14:58.346 A:middle
workoutBuilder 的

00:14:58.346 --> 00:14:59.966 A:middle
didCollectDataOfcollectedTypes

00:14:59.966 --> 00:15:00.356 A:middle
会被调用

00:14:59.966 --> 00:15:00.356 A:middle
会被调用

00:15:01.086 --> 00:15:03.296 A:middle
那么在这里 比如说如果

00:15:03.296 --> 00:15:04.866 A:middle
我对心率类型感兴趣

00:15:04.866 --> 00:15:07.346 A:middle
我会确保它是

00:15:07.346 --> 00:15:08.876 A:middle
被收集的数据类型之一

00:15:09.046 --> 00:15:11.956 A:middle
然后 我只需利用

00:15:11.956 --> 00:15:14.196 A:middle
用 builder 的针对数量类型的

00:15:14.286 --> 00:15:16.426 A:middle
数据方法

00:15:16.426 --> 00:15:19.086 A:middle
它会返回一个 HKStatistics 对象

00:15:19.706 --> 00:15:21.366 A:middle
其中包含了相关信息

00:15:21.396 --> 00:15:23.426 A:middle
在这个例子中 有最小值

00:15:23.726 --> 00:15:25.816 A:middle
最大值 平均值 以及

00:15:25.816 --> 00:15:28.246 A:middle
在此次体能训练中

00:15:28.246 --> 00:15:30.776 A:middle
最近记录的心率数值

00:15:31.886 --> 00:15:33.576 A:middle
这样 我就可以

00:15:33.576 --> 00:15:34.526 A:middle
更新用户界面了

00:15:35.086 --> 00:15:37.896 A:middle
在体能训练类 App 中

00:15:37.976 --> 00:15:40.296 A:middle
表示时间流逝的计时器

00:15:40.956 --> 00:15:43.296 A:middle
非常常见

00:15:43.886 --> 00:15:46.756 A:middle
所以 当然 我们要在

00:15:46.756 --> 00:15:48.006 A:middle
训练开始时开始

00:15:48.006 --> 00:15:49.936 A:middle
计时 但这并不够

00:15:50.026 --> 00:15:52.596 A:middle
因为暂停或继续事件会

00:15:52.966 --> 00:15:54.866 A:middle
影响训练持续

00:15:54.866 --> 00:15:55.286 A:middle
时间的计算

00:15:56.226 --> 00:15:58.486 A:middle
所以每当新活动

00:15:58.486 --> 00:16:00.436 A:middle
被添加进 builder

00:15:58.486 --> 00:16:00.436 A:middle
被添加进 builder

00:16:00.436 --> 00:16:01.756 A:middle
builder 的委托方法

00:16:02.226 --> 00:16:04.806 A:middle
workoutBuilderDidCollectEvents

00:16:04.806 --> 00:16:05.436 A:middle
就会被调用

00:16:05.846 --> 00:16:08.186 A:middle
这样 你就可以

00:16:08.186 --> 00:16:10.326 A:middle
用 builder 的 elapsedTime

00:16:10.326 --> 00:16:12.386 A:middle
属性 它会告诉你

00:16:12.736 --> 00:16:14.546 A:middle
此体能训练当前已

00:16:14.546 --> 00:16:14.986 A:middle
持续的时间

00:16:16.166 --> 00:16:19.536 A:middle
就这么简单

00:16:19.736 --> 00:16:21.616 A:middle
接下来 我们看看

00:16:21.616 --> 00:16:23.296 A:middle
如何控制训练的状态

00:16:24.916 --> 00:16:28.396 A:middle
首先 我想要讨论一下

00:16:28.506 --> 00:16:30.566 A:middle
训练 session 里

00:16:30.566 --> 00:16:32.136 A:middle
所有的不同的状态

00:16:32.746 --> 00:16:35.456 A:middle
第一个是 Not Started

00:16:36.366 --> 00:16:37.576 A:middle
这意味着训练还没有开始

00:16:37.576 --> 00:16:41.356 A:middle
我们还没有 哦不

00:16:41.796 --> 00:16:44.496 A:middle
用户还没有开始体能训练

00:16:44.496 --> 00:16:47.136 A:middle
在这之后 我们会转到

00:16:47.456 --> 00:16:48.746 A:middle
Prepared 状态

00:16:49.246 --> 00:16:52.146 A:middle
Prepared 状态会让系统

00:16:52.676 --> 00:16:54.506 A:middle
处于 Session 模式下

00:16:54.916 --> 00:16:56.386 A:middle
意味着你的 App

00:16:56.386 --> 00:16:58.026 A:middle
会有后台运行能力

00:16:58.026 --> 00:17:00.056 A:middle
传感器也会做好

00:16:58.026 --> 00:17:00.056 A:middle
传感器也会做好

00:17:00.056 --> 00:17:02.086 A:middle
追踪活动的准备

00:17:02.886 --> 00:17:04.866 A:middle
但是训练还未开始

00:17:06.156 --> 00:17:08.236 A:middle
比如说 如果你的 App

00:17:08.236 --> 00:17:10.435 A:middle
在训练前有一个倒数秒

00:17:10.435 --> 00:17:12.576 A:middle
你可以在这之前将 session

00:17:12.576 --> 00:17:14.195 A:middle
置为 Prepared 状态

00:17:14.195 --> 00:17:16.016 A:middle
以此来确保

00:17:16.316 --> 00:17:17.925 A:middle
设备已经准备好

00:17:17.925 --> 00:17:18.776 A:middle
开始追踪活动

00:17:19.296 --> 00:17:22.996 A:middle
在这之后 我们可以转到 Running 状态

00:17:23.346 --> 00:17:26.366 A:middle
这时 用户在积极地

00:17:26.366 --> 00:17:26.876 A:middle
进行体能训练

00:17:27.386 --> 00:17:29.406 A:middle
当然 用户也可以

00:17:29.406 --> 00:17:31.946 A:middle
变成 Paused 然后回到 Running

00:17:32.516 --> 00:17:33.766 A:middle
然后在两者之间来回切换

00:17:33.766 --> 00:17:37.596 A:middle
直到训练结束

00:17:38.236 --> 00:17:42.016 A:middle
这时 设备仍然处于

00:17:42.016 --> 00:17:43.616 A:middle
Session 模式下 意味着

00:17:43.616 --> 00:17:45.716 A:middle
你的 App 仍然在后台运行

00:17:45.716 --> 00:17:47.706 A:middle
这就为你争取了

00:17:47.706 --> 00:17:49.486 A:middle
一点额外时间 让你需要的话

00:17:49.486 --> 00:17:51.066 A:middle
可以保存这次体能训练

00:17:51.576 --> 00:17:54.846 A:middle
这之后 我们就可以结束

00:17:54.846 --> 00:17:55.366 A:middle
体能训练了

00:17:56.056 --> 00:17:58.656 A:middle
从这起 系统就会

00:17:58.716 --> 00:17:59.606 A:middle
退出 Session 模式

00:18:00.146 --> 00:18:03.126 A:middle
想要在这些状态之间

00:18:03.126 --> 00:18:05.356 A:middle
切换 你只需

00:18:05.356 --> 00:18:08.166 A:middle
在体能训练 session 上

00:18:08.166 --> 00:18:09.256 A:middle
调用这些

00:18:14.886 --> 00:18:16.916 A:middle
这就是我们收集

00:18:16.966 --> 00:18:18.926 A:middle
用户界面展示数据

00:18:18.926 --> 00:18:21.286 A:middle
以及控制

00:18:21.286 --> 00:18:22.356 A:middle
session 状态的方式

00:18:23.296 --> 00:18:25.256 A:middle
我们来看看如何

00:18:25.256 --> 00:18:26.786 A:middle
结束体能训练并且将其保存在

00:18:26.786 --> 00:18:27.176 A:middle
HealthKit 中

00:18:27.726 --> 00:18:32.066 A:middle
为了结束体能训练

00:18:32.066 --> 00:18:35.366 A:middle
首先调用 session.end

00:18:35.366 --> 00:18:37.066 A:middle
同时调用 builder.endCollection

00:18:37.336 --> 00:18:39.256 A:middle
传入体能训练的

00:18:39.256 --> 00:18:40.246 A:middle
结束时间

00:18:41.206 --> 00:18:43.066 A:middle
在这一时间点 尚未有

00:18:43.066 --> 00:18:44.746 A:middle
任何有关此体能训练的数据被收集

00:18:44.966 --> 00:18:45.356 A:middle
数据被收集

00:18:45.906 --> 00:18:48.546 A:middle
然后 如果你想把体能训练

00:18:48.546 --> 00:18:50.176 A:middle
保存在 HealthKit 中

00:18:50.176 --> 00:18:51.336 A:middle
你直接调用 builder.finishWorkout

00:18:52.366 --> 00:18:54.706 A:middle
然后你会在

00:18:54.706 --> 00:18:56.946 A:middle
completion handler 中得到一个

00:18:56.946 --> 00:18:58.576 A:middle
体能训练对象

00:18:58.626 --> 00:19:00.586 A:middle
与它相关的数据已经被

00:18:58.626 --> 00:19:00.586 A:middle
与它相关的数据已经被

00:19:00.686 --> 00:19:02.886 A:middle
保存在 HealthKit 中了

00:19:04.396 --> 00:19:06.746 A:middle
这就是现在使用新的 API

00:19:06.746 --> 00:19:08.986 A:middle
创造一个体能训练 App 的方式

00:19:10.006 --> 00:19:12.336 A:middle
接下来 我想要

00:19:12.336 --> 00:19:14.436 A:middle
用一个样本来演示一遍

00:19:15.096 --> 00:19:16.406 A:middle
我们会在 demo 中创建一个

00:19:16.406 --> 00:19:18.026 A:middle
为 Apple Watch 设计的体能训练 App

00:19:19.516 --> 00:19:25.500 A:middle
［掌声］

00:19:30.346 --> 00:19:32.336 A:middle
我目前实际上

00:19:32.336 --> 00:19:34.786 A:middle
正在写一个

00:19:34.786 --> 00:19:37.056 A:middle
让用户记录跑步的

00:19:37.056 --> 00:19:37.776 A:middle
体能训练 App

00:19:38.466 --> 00:19:40.096 A:middle
它是个非常简单的 App

00:19:40.636 --> 00:19:42.536 A:middle
这里有一个大的 “Run” 按钮

00:19:43.096 --> 00:19:45.436 A:middle
当点击它时 我会

00:19:45.436 --> 00:19:47.866 A:middle
显示这样一个界面

00:19:47.866 --> 00:19:49.976 A:middle
其中会显示此次训练的

00:19:49.976 --> 00:19:51.486 A:middle
逝去时间以及一些

00:19:51.486 --> 00:19:53.816 A:middle
其他指标 比如消耗的卡路里

00:19:54.496 --> 00:19:56.746 A:middle
最近心率

00:19:56.746 --> 00:19:59.416 A:middle
还有在这次训练中

00:19:59.586 --> 00:20:00.156 A:middle
已经跑的距离

00:19:59.586 --> 00:20:00.156 A:middle
已经跑的距离

00:20:00.706 --> 00:20:02.586 A:middle
当然 用户也

00:20:02.586 --> 00:20:04.686 A:middle
可以控制训练的状态

00:20:04.686 --> 00:20:06.526 A:middle
因此 用户可以

00:20:06.596 --> 00:20:08.666 A:middle
暂停 继续 以及结束

00:20:08.666 --> 00:20:09.036 A:middle
体能训练

00:20:11.716 --> 00:20:14.326 A:middle
实际上我已经提前

00:20:14.326 --> 00:20:16.066 A:middle
写好了这些用户界面

00:20:16.446 --> 00:20:18.626 A:middle
剩下的是

00:20:18.656 --> 00:20:20.646 A:middle
使用新的体能训练 API

00:20:20.986 --> 00:20:22.366 A:middle
让我的 App 可以跑起来

00:20:22.916 --> 00:20:25.706 A:middle
我们要做的第一件事

00:20:25.706 --> 00:20:27.796 A:middle
就是确保

00:20:27.866 --> 00:20:29.596 A:middle
这个项目的设置是正确的

00:20:30.486 --> 00:20:31.786 A:middle
想要做到这个 我准备前往

00:20:31.786 --> 00:20:32.886 A:middle
我的项目设置页面

00:20:32.886 --> 00:20:35.596 A:middle
然后打开

00:20:35.596 --> 00:20:37.916 A:middle
Capabilities 标签页 确保

00:20:37.916 --> 00:20:40.376 A:middle
这里的 HealthKit Capability

00:20:40.416 --> 00:20:40.906 A:middle
处于开启状态

00:20:42.126 --> 00:20:43.716 A:middle
同时针对你的 WatchKit App 扩展

00:20:44.006 --> 00:20:46.026 A:middle
也需要做相同的事

00:20:46.336 --> 00:20:48.236 A:middle
所以再一次 确保

00:20:48.236 --> 00:20:50.366 A:middle
HealthKit Capability 是开启的

00:20:51.356 --> 00:20:53.646 A:middle
当我完成了这些 我们也应该

00:20:53.646 --> 00:20:56.566 A:middle
把这两个目的字符串添加在

00:20:56.566 --> 00:20:59.246 A:middle
info.plist 文件中

00:20:59.246 --> 00:21:01.966 A:middle
以告知我的用户我为什么需要

00:20:59.246 --> 00:21:01.966 A:middle
以告知我的用户我为什么需要

00:21:01.966 --> 00:21:02.656 A:middle
访问他们的健康数据

00:21:03.766 --> 00:21:06.226 A:middle
这里的第一条字符串是

00:21:06.646 --> 00:21:08.566 A:middle
“Health Share Usage Description”

00:21:09.316 --> 00:21:11.726 A:middle
告诉用户我为什么

00:21:11.726 --> 00:21:13.816 A:middle
想要把数据存储在 HealthKit 中

00:21:14.436 --> 00:21:16.686 A:middle
同时帮助更新

00:21:16.726 --> 00:21:17.316 A:middle
用户描述

00:21:17.316 --> 00:21:19.336 A:middle
它会告诉用户为什么我

00:21:19.616 --> 00:21:23.106 A:middle
需要读取 HealthKit 中的数据

00:21:23.196 --> 00:21:25.376 A:middle
完成了这些 现在我可以

00:21:25.666 --> 00:21:27.226 A:middle
开始使用新的体能训练 API

00:21:27.946 --> 00:21:30.096 A:middle
当然 使用 API 的

00:21:30.096 --> 00:21:31.686 A:middle
前提条件是

00:21:32.636 --> 00:21:34.576 A:middle
确保我请求了我需要的

00:21:34.916 --> 00:21:37.386 A:middle
数据的相关授权

00:21:38.286 --> 00:21:40.196 A:middle
当然 每个 App

00:21:40.226 --> 00:21:40.616 A:middle
都是不同的

00:21:41.266 --> 00:21:43.266 A:middle
在这次例子中 如果我们回到

00:21:43.266 --> 00:21:47.636 A:middle
我的 App 我会保存

00:21:47.636 --> 00:21:48.686 A:middle
一个体能训练

00:21:48.686 --> 00:21:50.796 A:middle
所以这是我需要

00:21:50.796 --> 00:21:53.636 A:middle
有权限访问的类型之一

00:21:53.826 --> 00:21:55.626 A:middle
另外 我也需要能够

00:21:55.686 --> 00:21:57.626 A:middle
读取卡路里 心率

00:21:57.626 --> 00:21:58.586 A:middle
还有距离

00:21:59.336 --> 00:22:00.026 A:middle
咱们来做这些

00:21:59.336 --> 00:22:00.026 A:middle
咱们来做这些

00:22:01.436 --> 00:22:03.136 A:middle
当然 我们需要确保

00:22:03.136 --> 00:22:04.806 A:middle
当我们真正需要授权的时候

00:22:04.806 --> 00:22:06.476 A:middle
才发起请求

00:22:07.216 --> 00:22:09.516 A:middle
在我的例子中

00:22:09.516 --> 00:22:11.586 A:middle
我需要在每次用户看到这个 UI 时

00:22:11.586 --> 00:22:14.196 A:middle
来请求 这样我可以

00:22:14.196 --> 00:22:15.416 A:middle
确保我获得了

00:22:15.416 --> 00:22:17.346 A:middle
我获得了相关的授权 在开始

00:22:17.346 --> 00:22:17.736 A:middle
体能训练前

00:22:19.076 --> 00:22:20.896 A:middle
所以这里的这个视图

00:22:20.896 --> 00:22:24.006 A:middle
由 WorkoutStartView 的

00:22:24.006 --> 00:22:25.746 A:middle
WKInterFaceController 控制

00:22:25.746 --> 00:22:27.506 A:middle
那我准备在 didAppear 方法中

00:22:28.046 --> 00:22:31.506 A:middle
来执行授权

00:22:33.636 --> 00:22:36.156 A:middle
所以首先 我这里的 typesToShare

00:22:36.156 --> 00:22:37.746 A:middle
应该是 workout 因为我希望

00:22:37.746 --> 00:22:39.616 A:middle
在最后可以保存一个

00:22:39.616 --> 00:22:39.846 A:middle
体能训练

00:22:42.376 --> 00:22:44.296 A:middle
接下来 我希望读取

00:22:44.486 --> 00:22:47.206 A:middle
心率 动态卡路里

00:22:47.846 --> 00:22:50.106 A:middle
同时还有步行 + 跑步距离

00:22:50.626 --> 00:22:53.256 A:middle
一旦设置好了 typesToShare

00:22:53.256 --> 00:22:55.836 A:middle
和 typesToRead 我只需在

00:22:56.216 --> 00:22:57.966 A:middle
healthStore 上调用 requestAuthorization

00:22:57.966 --> 00:23:01.796 A:middle
并且传入这两个类型

00:22:57.966 --> 00:23:01.796 A:middle
并且传入这两个类型

00:23:01.976 --> 00:23:03.216 A:middle
那么我们现在来运行

00:23:03.216 --> 00:23:04.826 A:middle
一下这个代码看看会发生什么

00:23:05.926 --> 00:23:08.436 A:middle
而且因为 Apple Watch 的屏幕

00:23:08.436 --> 00:23:10.936 A:middle
比较小 用户会在

00:23:11.516 --> 00:23:13.316 A:middle
手机上看到一张

00:23:13.316 --> 00:23:14.796 A:middle
授权表单

00:23:15.786 --> 00:23:17.396 A:middle
所以你需要确保

00:23:17.716 --> 00:23:19.666 A:middle
在你的 iPhone App 上也能

00:23:19.666 --> 00:23:20.946 A:middle
处理授权

00:23:22.536 --> 00:23:24.076 A:middle
那我们继续

00:23:24.076 --> 00:23:24.846 A:middle
先关闭这个视图

00:23:25.436 --> 00:23:27.696 A:middle
那么我们现在打开我的 iPhone App

00:23:28.306 --> 00:23:30.726 A:middle
这里 我看到了一张

00:23:30.726 --> 00:23:32.946 A:middle
授权表单 在这我可以决定

00:23:33.516 --> 00:23:35.716 A:middle
我是否授予这个 App

00:23:35.716 --> 00:23:37.046 A:middle
访问权限

00:23:37.826 --> 00:23:39.006 A:middle
对于现在这个样本

00:23:39.006 --> 00:23:42.746 A:middle
我会把所有类别都打开 并且点击“允许”

00:23:44.176 --> 00:23:45.856 A:middle
这就是如何给我的 App

00:23:45.946 --> 00:23:48.016 A:middle
授予访问权限

00:23:49.326 --> 00:23:51.746 A:middle
接下来 我们终于可以开始

00:23:51.746 --> 00:23:54.096 A:middle
用体能训练 API 了

00:23:54.426 --> 00:23:56.386 A:middle
所以当我点击这里的这个按钮

00:23:56.386 --> 00:23:59.306 A:middle
这个视图会被传过来

00:23:59.746 --> 00:24:01.426 A:middle
包含体能训练

00:23:59.746 --> 00:24:01.426 A:middle
包含体能训练

00:24:01.426 --> 00:24:03.726 A:middle
相关信息的

00:24:03.726 --> 00:24:04.496 A:middle
workoutConfiguration 对象

00:24:05.046 --> 00:24:06.326 A:middle
在这个例子中

00:24:06.326 --> 00:24:07.046 A:middle
这是个跑步训练

00:24:07.796 --> 00:24:09.496 A:middle
从那里 我可以继续

00:24:09.966 --> 00:24:11.046 A:middle
设置我的体能训练了

00:24:12.096 --> 00:24:13.666 A:middle
这个视图由

00:24:13.666 --> 00:24:16.476 A:middle
我的体能训练 session

00:24:16.476 --> 00:24:18.276 A:middle
WatchKit 界面控制器支持

00:24:18.276 --> 00:24:20.066 A:middle
我会在唤醒方法中

00:24:20.066 --> 00:24:20.866 A:middle
完成设置

00:24:21.586 --> 00:24:24.196 A:middle
那么首先 我会创建

00:24:24.196 --> 00:24:26.296 A:middle
HKWorkoutSession 和

00:24:26.296 --> 00:24:27.836 A:middle
HKLiveWorkoutBuilder

00:24:29.996 --> 00:24:32.756 A:middle
我们用初始化程序

00:24:33.106 --> 00:24:35.556 A:middle
创建了 session

00:24:35.556 --> 00:24:36.936 A:middle
我们再把体能训练配置对象传给它

00:24:37.836 --> 00:24:39.756 A:middle
然后 我们只需从 session 中

00:24:40.536 --> 00:24:44.276 A:middle
直接获取 builder

00:24:44.386 --> 00:24:46.766 A:middle
如果体能训练配置项无效

00:24:46.766 --> 00:24:48.156 A:middle
创建 session 可能会失败

00:24:48.156 --> 00:24:50.646 A:middle
所以这就是为什么我会

00:24:50.706 --> 00:24:52.806 A:middle
把这段代码放在一个 do-catch 区块中

00:24:53.276 --> 00:24:55.896 A:middle
如果有任何错误 会被忽略

00:24:56.366 --> 00:25:00.156 A:middle
接下来 让我们设置这个 session

00:24:56.366 --> 00:25:00.156 A:middle
接下来 让我们设置这个 session

00:25:00.196 --> 00:25:00.706 A:middle
和 builder

00:25:01.526 --> 00:25:04.646 A:middle
在这个例子中

00:25:04.826 --> 00:25:06.336 A:middle
我希望我的界面控制器

00:25:06.336 --> 00:25:08.846 A:middle
可以是 session 和

00:25:08.846 --> 00:25:09.346 A:middle
builder 的委托

00:25:09.656 --> 00:25:11.326 A:middle
因为我也想

00:25:11.386 --> 00:25:13.286 A:middle
收集设备产生的采样数据

00:25:13.286 --> 00:25:15.666 A:middle
我需要在这里使用

00:25:15.666 --> 00:25:18.366 A:middle
一个实时的数据源并且传给它

00:25:18.366 --> 00:25:20.676 A:middle
一个体能训练配置项

00:25:20.676 --> 00:25:22.576 A:middle
这样各种类型就会

00:25:22.656 --> 00:25:24.166 A:middle
为我自动推断出来

00:25:25.636 --> 00:25:28.986 A:middle
最后 我只需

00:25:28.986 --> 00:25:31.166 A:middle
启动 session 和 builder

00:25:31.436 --> 00:25:35.256 A:middle
那么既然我的体能训练已经

00:25:35.256 --> 00:25:37.206 A:middle
开始 我需要做的第一件事

00:25:37.206 --> 00:25:39.526 A:middle
就是启动我的

00:25:39.526 --> 00:25:40.996 A:middle
elapsedTime 计时器

00:25:40.996 --> 00:25:43.026 A:middle
我会在 beingCollectionCall 的

00:25:43.506 --> 00:25:45.226 A:middle
回调中来

00:25:45.226 --> 00:25:46.286 A:middle
完成这个

00:25:46.906 --> 00:25:51.356 A:middle
我这里有一个方法

00:25:51.586 --> 00:25:52.196 A:middle
可以帮我做

00:25:52.926 --> 00:25:55.716 A:middle
当然 因为暂停和

00:25:55.716 --> 00:25:57.726 A:middle
继续事件也会影响

00:25:58.586 --> 00:26:00.626 A:middle
持续时间的计算 我在

00:25:58.586 --> 00:26:00.626 A:middle
持续时间的计算 我在

00:26:00.676 --> 00:26:02.666 A:middle
builder 的 didCollectEvent 中

00:26:02.756 --> 00:26:07.776 A:middle
也需要调用这个

00:26:07.946 --> 00:26:09.206 A:middle
现在 我们来实现这个方法

00:26:10.596 --> 00:26:13.246 A:middle
所以在我的 UI 中

00:26:13.246 --> 00:26:14.826 A:middle
我使用了一个 WKInterfaceTimer

00:26:15.386 --> 00:26:16.586 A:middle
如果你对这个对象不熟悉

00:26:16.586 --> 00:26:19.916 A:middle
这个对象需要一个

00:26:19.986 --> 00:26:22.166 A:middle
过去时间 然后从那个时间

00:26:22.166 --> 00:26:23.186 A:middle
开始计时

00:26:23.786 --> 00:26:24.956 A:middle
所以我接下来会

00:26:24.956 --> 00:26:27.696 A:middle
用 builder 的 elapsedTime 属性

00:26:27.696 --> 00:26:29.676 A:middle
来创建我的时间对象

00:26:30.726 --> 00:26:31.906 A:middle
因为我想要的时间是

00:26:31.906 --> 00:26:33.496 A:middle
过去时间 我需要

00:26:33.796 --> 00:26:35.306 A:middle
确保这里

00:26:35.306 --> 00:26:36.956 A:middle
有一个负号

00:26:37.096 --> 00:26:39.186 A:middle
接下来 我只需在主队列上

00:26:39.186 --> 00:26:41.476 A:middle
调度因为我在做 UI 方面的工作

00:26:41.476 --> 00:26:43.516 A:middle
然后我只用在计时器上

00:26:43.516 --> 00:26:46.606 A:middle
设置时间

00:26:46.606 --> 00:26:47.826 A:middle
我也需要确保

00:26:47.826 --> 00:26:50.376 A:middle
计时器只在

00:26:51.046 --> 00:26:53.076 A:middle
session 运行的时候运行

00:26:53.726 --> 00:26:54.456 A:middle
让我们来做这个

00:26:55.376 --> 00:26:57.506 A:middle
首先 我拿到 session 状态

00:26:58.126 --> 00:26:59.916 A:middle
然后 再一次我

00:26:59.916 --> 00:27:00.556 A:middle
在主队列上调度

00:26:59.916 --> 00:27:00.556 A:middle
在主队列上调度

00:27:00.796 --> 00:27:02.606 A:middle
如果 session 正在运行

00:27:03.076 --> 00:27:04.256 A:middle
我会启动计时器

00:27:04.966 --> 00:27:06.116 A:middle
如果不在运行

00:27:06.116 --> 00:27:07.336 A:middle
我就停止计时器

00:27:08.696 --> 00:27:09.966 A:middle
这是你所需要做的

00:27:09.966 --> 00:27:12.176 A:middle
让计时器追踪已用时长的

00:27:12.176 --> 00:27:13.786 A:middle
全部事情

00:27:13.986 --> 00:27:15.826 A:middle
接下来 我们来确保

00:27:15.826 --> 00:27:17.566 A:middle
我们在 UI 上展示的所有指标

00:27:18.016 --> 00:27:19.036 A:middle
也是准确的

00:27:19.986 --> 00:27:22.246 A:middle
所以每次 builder 收集到

00:27:22.246 --> 00:27:24.976 A:middle
新的样本数据

00:27:25.016 --> 00:27:26.746 A:middle
这里的这个方法会被调用

00:27:27.506 --> 00:27:29.366 A:middle
那么这里 我也只需要

00:27:29.366 --> 00:27:31.016 A:middle
重复这里的

00:27:31.046 --> 00:27:31.946 A:middle
collectedTypes

00:27:36.396 --> 00:27:39.016 A:middle
而且 在我的例子中 所有我需要的

00:27:39.016 --> 00:27:41.006 A:middle
数据都是

00:27:41.236 --> 00:27:42.336 A:middle
数量型样本

00:27:42.416 --> 00:27:44.236 A:middle
所以我要确保我

00:27:44.236 --> 00:27:45.476 A:middle
只处理这些

00:27:46.006 --> 00:27:49.276 A:middle
从这里 我们可以利用

00:27:49.276 --> 00:27:53.226 A:middle
针对数量数据的 builder 的新方法

00:27:53.636 --> 00:27:55.886 A:middle
builder.statistics

00:27:55.886 --> 00:27:57.566 A:middle
它会返回给我一个

00:27:57.566 --> 00:27:59.856 A:middle
HKStatistics 对象

00:27:59.886 --> 00:28:01.336 A:middle
包含了每个数据类型的最小值

00:27:59.886 --> 00:28:01.336 A:middle
包含了每个数据类型的最小值

00:28:01.336 --> 00:28:04.046 A:middle
最大值 平均值

00:28:04.046 --> 00:28:06.826 A:middle
以及最近值

00:28:07.656 --> 00:28:09.716 A:middle
所以我拿到这个统计对象

00:28:09.756 --> 00:28:13.916 A:middle
从这 我有一个已经实现过的方法

00:28:13.916 --> 00:28:15.886 A:middle
会返回给我

00:28:15.986 --> 00:28:17.976 A:middle
针对特别的数量类型的

00:28:17.976 --> 00:28:19.556 A:middle
用户界面标签

00:28:20.696 --> 00:28:22.156 A:middle
它会用统计对象

00:28:22.536 --> 00:28:25.106 A:middle
更新我的标签

00:28:25.776 --> 00:28:29.046 A:middle
接下来 我们来确保

00:28:29.046 --> 00:28:30.886 A:middle
当用户需要的时候我们

00:28:30.886 --> 00:28:32.526 A:middle
可以控制状态

00:28:33.216 --> 00:28:35.876 A:middle
所以每当用户轻点

00:28:35.926 --> 00:28:37.376 A:middle
暂停按钮 这个方法

00:28:37.376 --> 00:28:38.386 A:middle
会被调用

00:28:39.066 --> 00:28:40.486 A:middle
这样 我只需

00:28:40.486 --> 00:28:42.646 A:middle
调用 session.pause

00:28:43.956 --> 00:28:45.716 A:middle
对于继续 也很类似

00:28:46.346 --> 00:28:48.626 A:middle
我会执行 session.resume

00:28:49.176 --> 00:28:52.376 A:middle
以及最后 为了结束体能训练

00:28:53.176 --> 00:28:55.126 A:middle
我会调用 session.end

00:28:56.006 --> 00:28:58.936 A:middle
再调用 builder.endCollection

00:28:59.076 --> 00:29:00.726 A:middle
然后传入体能训练的结束时间

00:28:59.076 --> 00:29:00.726 A:middle
然后传入体能训练的结束时间

00:29:01.836 --> 00:29:03.496 A:middle
然后 我们只需

00:29:03.496 --> 00:29:05.276 A:middle
调用 finishWorkout

00:29:05.276 --> 00:29:07.266 A:middle
来真正把这次体能训练

00:29:07.326 --> 00:29:08.826 A:middle
和所有相关数据保存

00:29:08.826 --> 00:29:09.236 A:middle
在 HealthKit 中

00:29:10.336 --> 00:29:11.656 A:middle
然后 我们只需要无视它

00:29:12.486 --> 00:29:13.856 A:middle
那么我们来运行这段代码

00:29:13.856 --> 00:29:16.506 A:middle
看看现在会发生什么

00:29:24.076 --> 00:29:25.456 A:middle
那么我来

00:29:25.456 --> 00:29:27.116 A:middle
启动我的体能训练

00:29:28.326 --> 00:29:31.086 A:middle
如我们所看到的

00:29:31.086 --> 00:29:32.796 A:middle
我的计时器在更新

00:29:33.226 --> 00:29:35.536 A:middle
我的数据由 builder 直接

00:29:35.536 --> 00:29:37.676 A:middle
收集并且在我的

00:29:37.826 --> 00:29:39.416 A:middle
用户界面上展示

00:29:40.236 --> 00:29:42.886 A:middle
当然 我也可以响应

00:29:42.886 --> 00:29:45.116 A:middle
状态变化 所以现在

00:29:45.576 --> 00:29:47.616 A:middle
来暂停这次体能训练

00:29:47.616 --> 00:29:48.176 A:middle
体能训练

00:29:49.436 --> 00:29:50.606 A:middle
计时器暂停了

00:29:51.116 --> 00:29:52.396 A:middle
数据采集也暂停了

00:29:53.086 --> 00:29:54.606 A:middle
我可以继续

00:29:55.186 --> 00:29:58.996 A:middle
就像这样 只用几行代码

00:29:58.996 --> 00:30:00.866 A:middle
现在我有了一个

00:29:58.996 --> 00:30:00.866 A:middle
现在我有了一个

00:30:01.016 --> 00:30:02.576 A:middle
全功能的体能训练 App

00:30:03.516 --> 00:30:08.616 A:middle
［掌声］

00:30:09.116 --> 00:30:11.416 A:middle
我现在准备停止体能训练

00:30:12.086 --> 00:30:16.346 A:middle
我们来看看我们在

00:30:16.436 --> 00:30:18.986 A:middle
iPhone 的健康 App 中

00:30:19.266 --> 00:30:19.766 A:middle
保存了什么

00:30:20.366 --> 00:30:25.196 A:middle
这就是我刚刚保存的

00:30:25.196 --> 00:30:27.576 A:middle
体能训练 而且现在我们看到

00:30:27.576 --> 00:30:30.316 A:middle
直接保存在 HealthKit 中的体能训练

00:30:30.826 --> 00:30:32.846 A:middle
有非常丰富的

00:30:32.846 --> 00:30:33.376 A:middle
信息展示

00:30:33.996 --> 00:30:36.286 A:middle
我有设备的详细信息

00:30:36.286 --> 00:30:37.916 A:middle
还有相关的所有样本

00:30:37.916 --> 00:30:39.476 A:middle
比如心率

00:30:39.476 --> 00:30:42.066 A:middle
距离 活动能量

00:30:42.066 --> 00:30:44.546 A:middle
还有当我暂停和

00:30:44.636 --> 00:30:46.816 A:middle
继续 session 时

00:30:46.816 --> 00:30:48.666 A:middle
产生的体能训练活动

00:30:57.386 --> 00:30:59.676 A:middle
现在在 Apple Watch 上创建

00:30:59.676 --> 00:31:02.056 A:middle
一个全功能的体能训练 App

00:30:59.676 --> 00:31:02.056 A:middle
一个全功能的体能训练 App

00:31:02.056 --> 00:31:03.596 A:middle
就是这么简单

00:31:05.516 --> 00:31:09.776 A:middle
［掌声］

00:31:10.276 --> 00:31:12.876 A:middle
不过当然 有时候

00:31:12.906 --> 00:31:14.156 A:middle
事情并不像我们计划的那样

00:31:14.906 --> 00:31:17.366 A:middle
比如说我在跑我的第一个

00:31:17.366 --> 00:31:19.416 A:middle
马拉松 我特别激动

00:31:19.416 --> 00:31:21.526 A:middle
在用我最喜欢的体能训练 App

00:31:21.526 --> 00:31:23.106 A:middle
来追踪这次马拉松

00:31:23.106 --> 00:31:25.776 A:middle
而我在最后才发现

00:31:25.836 --> 00:31:28.336 A:middle
这个 App 在途中的某个时候

00:31:28.336 --> 00:31:30.126 A:middle
居然崩溃了

00:31:30.596 --> 00:31:32.876 A:middle
搞得我失去了所有的数据

00:31:33.146 --> 00:31:35.496 A:middle
好吧 在 watchOS 5 中

00:31:35.496 --> 00:31:37.426 A:middle
我们带来了体能训练恢复

00:31:38.086 --> 00:31:40.463 A:middle
可以帮你解决这个问题

00:31:41.516 --> 00:31:44.156 A:middle
［掌声］

00:31:44.656 --> 00:31:46.336 A:middle
如果你的 App 恰好

00:31:46.336 --> 00:31:48.496 A:middle
在一次活跃的体能训练中崩溃

00:31:49.286 --> 00:31:51.056 A:middle
我们会自动重启你的 App

00:31:51.056 --> 00:31:52.966 A:middle
给它一个恢复

00:31:52.966 --> 00:31:53.986 A:middle
体能训练的机会

00:31:55.376 --> 00:31:57.116 A:middle
体能训练 session 和 builder

00:31:57.116 --> 00:32:00.046 A:middle
会以之前的状态恢复

00:31:57.116 --> 00:32:00.046 A:middle
会以之前的状态恢复

00:32:00.046 --> 00:32:01.826 A:middle
所以你不应该在 builder 上

00:32:01.826 --> 00:32:04.166 A:middle
调用 startActivity 或者

00:32:04.166 --> 00:32:07.736 A:middle
beginCollection

00:32:07.876 --> 00:32:09.706 A:middle
如果你在使用一个

00:32:09.816 --> 00:32:12.046 A:middle
自动收集数据的数据源

00:32:12.516 --> 00:32:14.056 A:middle
你需要重新设置它

00:32:14.636 --> 00:32:18.586 A:middle
下面是它的工作原理

00:32:18.746 --> 00:32:20.736 A:middle
如果你的 App

00:32:20.736 --> 00:32:23.386 A:middle
在一次崩溃后重启 我们会调用

00:32:23.386 --> 00:32:25.166 A:middle
WKExtensionDelegate 方法

00:32:25.166 --> 00:32:27.936 A:middle
handleAcitiveWorkoutRecovery

00:32:29.036 --> 00:32:33.876 A:middle
这样 你只需创建一个 healthStore 对象

00:32:33.876 --> 00:32:37.456 A:middle
然后调用 recoverActiveWorkoutSession

00:32:37.456 --> 00:32:39.896 A:middle
然后你会在

00:32:39.896 --> 00:32:41.496 A:middle
completion handler 中拿回

00:32:41.496 --> 00:32:41.836 A:middle
一个 session

00:32:42.876 --> 00:32:43.576 A:middle
就这么简单

00:32:44.206 --> 00:32:49.066 A:middle
这就是我们新的体能训练 API

00:32:49.276 --> 00:32:52.606 A:middle
它让创造优秀的体能训练 App

00:32:52.606 --> 00:32:54.136 A:middle
变得前所未有的简单

00:32:54.996 --> 00:32:57.246 A:middle
我们也有一个新的

00:32:57.246 --> 00:32:57.956 A:middle
数量系列 API

00:32:58.616 --> 00:33:00.156 A:middle
有关这个 我想把麦克风

00:32:58.616 --> 00:33:00.156 A:middle
有关这个 我想把麦克风

00:33:00.156 --> 00:33:01.576 A:middle
交还给我的同事 Niharika

00:33:02.076 --> 00:33:03.126 A:middle
她会告诉你们更多有关它的信息

00:33:04.516 --> 00:33:08.006 A:middle
［掌声］

00:33:08.506 --> 00:33:10.146 A:middle
&gt;&gt; 刚才那些是不是好到难以置信

00:33:10.336 --> 00:33:12.056 A:middle
在不到 10 分钟的时间里

00:33:12.056 --> 00:33:13.246 A:middle
Karim 能够创建一个

00:33:13.246 --> 00:33:14.436 A:middle
全功能的体能训练 App

00:33:14.666 --> 00:33:16.196 A:middle
这非常重要

00:33:16.226 --> 00:33:17.176 A:middle
因为 像我刚才提到的

00:33:17.176 --> 00:33:19.476 A:middle
我们的用户喜爱做

00:33:19.476 --> 00:33:19.946 A:middle
体能训练

00:33:21.146 --> 00:33:22.696 A:middle
而这些体能训练会带来

00:33:22.696 --> 00:33:23.466 A:middle
相当多的数据

00:33:23.466 --> 00:33:25.286 A:middle
比如说我想要

00:33:25.286 --> 00:33:26.976 A:middle
做一个足球 App

00:33:26.976 --> 00:33:28.406 A:middle
我非常想弄清楚

00:33:28.406 --> 00:33:30.186 A:middle
我的用户到底是如何运动的

00:33:30.376 --> 00:33:31.996 A:middle
而且我想追踪在一次体能训练中

00:33:31.996 --> 00:33:33.866 A:middle
他们在球场上

00:33:33.866 --> 00:33:36.166 A:middle
从一边跑到另一边时

00:33:36.166 --> 00:33:37.386 A:middle
移动的距离

00:33:37.716 --> 00:33:39.616 A:middle
当我们开始体能训练时

00:33:39.616 --> 00:33:41.396 A:middle
样本数据就

00:33:41.396 --> 00:33:42.216 A:middle
开始产生了

00:33:42.856 --> 00:33:45.246 A:middle
我的用户先跑了 2.25

00:33:45.736 --> 00:33:47.386 A:middle
然后 1.6

00:33:47.856 --> 00:33:48.866 A:middle
然后又跑了一点

00:33:49.186 --> 00:33:50.586 A:middle
然后 结束了

00:33:50.986 --> 00:33:52.786 A:middle
从前 这里的每个

00:33:52.786 --> 00:33:54.416 A:middle
距离都会被存储为

00:33:54.416 --> 00:33:56.976 A:middle
一个单独的 HKQuantity 样本

00:33:57.636 --> 00:33:59.196 A:middle
每一个都是独立的

00:33:59.196 --> 00:34:00.576 A:middle
而且会被分开储存

00:33:59.196 --> 00:34:00.576 A:middle
而且会被分开储存

00:34:01.366 --> 00:34:02.766 A:middle
我们考虑一下

00:34:02.766 --> 00:34:03.856 A:middle
如果你可以有

00:34:03.856 --> 00:34:05.976 A:middle
一个追踪累计总数的样本

00:34:05.976 --> 00:34:08.166 A:middle
但同时其背后仍然有那些

00:34:08.166 --> 00:34:09.545 A:middle
独立的数量支持

00:34:09.596 --> 00:34:11.356 A:middle
是不是很棒

00:34:11.416 --> 00:34:13.876 A:middle
这就是为什么我们引入了

00:34:13.876 --> 00:34:14.585 A:middle
HKCumulative

00:34:14.585 --> 00:34:16.456 A:middle
QuantitySeriesSample 它是一个

00:34:16.456 --> 00:34:17.906 A:middle
全新的样本类型

00:34:17.906 --> 00:34:19.516 A:middle
让你可以更高效地

00:34:19.516 --> 00:34:21.106 A:middle
存储高频数据

00:34:21.666 --> 00:34:23.005 A:middle
它很棒 有两个原因

00:34:23.196 --> 00:34:25.116 A:middle
原因一 你只需要存储

00:34:25.116 --> 00:34:26.775 A:middle
一个由多个数量支撑的

00:34:26.775 --> 00:34:28.416 A:middle
样本 因此

00:34:28.416 --> 00:34:29.876 A:middle
你可以更高效地存储

00:34:30.176 --> 00:34:31.556 A:middle
那些来自体能训练的

00:34:31.735 --> 00:34:33.346 A:middle
高频数据

00:34:33.775 --> 00:34:36.076 A:middle
第二 你现在

00:34:36.076 --> 00:34:38.286 A:middle
可以知道组成一个样本的

00:34:38.286 --> 00:34:40.025 A:middle
多个数量与样本本身的联系

00:34:40.936 --> 00:34:43.016 A:middle
因此我们新的 QuantitySeriesSample

00:34:43.016 --> 00:34:44.196 A:middle
是 HKQuantitySample 的

00:34:44.196 --> 00:34:45.996 A:middle
子类 你们中也许

00:34:45.996 --> 00:34:47.956 A:middle
有些人已经很熟悉

00:34:48.246 --> 00:34:49.656 A:middle
如果你之前用过

00:34:49.656 --> 00:34:51.426 A:middle
HKQuantitySample 我们新的

00:34:51.426 --> 00:34:53.386 A:middle
样本类型

00:34:53.436 --> 00:34:53.906 A:middle
基本上一样

00:34:55.335 --> 00:34:56.626 A:middle
那么为什么你想要

00:34:56.686 --> 00:34:56.886 A:middle
用这个呢

00:34:57.836 --> 00:34:59.106 A:middle
比方说你想要

00:34:59.106 --> 00:35:00.316 A:middle
数据可视化

00:34:59.106 --> 00:35:00.316 A:middle
数据可视化

00:35:00.366 --> 00:35:02.086 A:middle
你的 App 需要复杂的

00:35:02.086 --> 00:35:04.026 A:middle
图表或图形

00:35:04.026 --> 00:35:05.426 A:middle
你正努力用

00:35:05.426 --> 00:35:06.886 A:middle
一种漂亮的方式可视化

00:35:06.886 --> 00:35:07.616 A:middle
用户的数据

00:35:08.426 --> 00:35:09.826 A:middle
实际上我们建议

00:35:09.826 --> 00:35:11.026 A:middle
你继续使用我们的

00:35:11.026 --> 00:35:13.226 A:middle
HKStatisticsQuery 或者

00:35:13.226 --> 00:35:15.046 A:middle
HKStatisticsCollectionQuery

00:35:15.046 --> 00:35:16.526 A:middle
这是因为那些类正是

00:35:16.526 --> 00:35:18.886 A:middle
已有的 query 中

00:35:18.886 --> 00:35:19.186 A:middle
做这件事的

00:35:19.336 --> 00:35:20.796 A:middle
你有权访问到

00:35:20.906 --> 00:35:23.266 A:middle
真正详细的丰富的数据

00:35:23.266 --> 00:35:24.866 A:middle
而这些 query 将会

00:35:24.936 --> 00:35:26.916 A:middle
在新的系列样本上

00:35:26.916 --> 00:35:28.586 A:middle
得到详细的数据 所以你无需

00:35:28.586 --> 00:35:30.366 A:middle
做任何额外的工作来获得

00:35:30.426 --> 00:35:31.136 A:middle
那些详细信息

00:35:32.466 --> 00:35:33.606 A:middle
如果 比方说

00:35:33.606 --> 00:35:35.646 A:middle
你想要做数据分析

00:35:35.646 --> 00:35:37.156 A:middle
你要更进一步

00:35:37.246 --> 00:35:38.456 A:middle
你想要弄清楚

00:35:38.456 --> 00:35:40.096 A:middle
组成一个样本的

00:35:40.096 --> 00:35:40.576 A:middle
实际数据

00:35:41.426 --> 00:35:44.046 A:middle
我们建议你使用我们新的

00:35:44.046 --> 00:35:45.276 A:middle
系列样本 query

00:35:45.986 --> 00:35:47.736 A:middle
最后 如果你和我一样

00:35:47.736 --> 00:35:48.906 A:middle
有一个足球 App [ 笑声 ]

00:35:48.906 --> 00:35:50.866 A:middle
或者任何会高频

00:35:50.866 --> 00:35:52.396 A:middle
收集数据的 App

00:35:53.126 --> 00:35:54.666 A:middle
我们建议你使用我们新的

00:35:54.666 --> 00:35:56.226 A:middle
数量系列样本 builder

00:35:56.486 --> 00:35:57.746 A:middle
它作为一种全新的方式 让你

00:35:57.746 --> 00:35:59.096 A:middle
能够真的创建

00:35:59.146 --> 00:36:00.556 A:middle
那些新的累计的

00:35:59.146 --> 00:36:00.556 A:middle
那些新的累计的

00:36:00.556 --> 00:36:02.326 A:middle
数量系列样本 并且

00:36:02.326 --> 00:36:04.416 A:middle
以更有效率的方式存储数据

00:36:05.696 --> 00:36:07.216 A:middle
那么让我们开始 sample query 吧

00:36:07.246 --> 00:36:09.526 A:middle
像我刚提到的

00:36:09.526 --> 00:36:11.386 A:middle
你可以通过这种方式来

00:36:11.386 --> 00:36:13.436 A:middle
看得更深入并且真正理解

00:36:13.436 --> 00:36:15.506 A:middle
组成一个数量系列样本的

00:36:15.506 --> 00:36:17.386 A:middle
独立的 HK 数量

00:36:18.606 --> 00:36:20.096 A:middle
在代码里 当然 我们

00:36:20.096 --> 00:36:21.556 A:middle
首先想要搞清楚

00:36:21.616 --> 00:36:22.616 A:middle
我们会把这些新的数量

00:36:22.616 --> 00:36:23.876 A:middle
存储在哪里

00:36:23.936 --> 00:36:25.276 A:middle
在我的例子中 我会把它

00:36:25.276 --> 00:36:26.366 A:middle
存在一个数量的数组中

00:36:26.956 --> 00:36:30.176 A:middle
接下来我们初始化 query

00:36:30.556 --> 00:36:32.276 A:middle
我们用我们感兴趣的样本

00:36:32.276 --> 00:36:33.226 A:middle
来初始化它

00:36:33.486 --> 00:36:35.236 A:middle
我们的完成处理器

00:36:35.236 --> 00:36:36.426 A:middle
正是这部分工作

00:36:36.426 --> 00:36:36.926 A:middle
进行的地方

00:36:37.406 --> 00:36:39.526 A:middle
在我的例子中 我有一个

00:36:39.526 --> 00:36:41.026 A:middle
叫做 analyzeQuantity 的方法

00:36:41.026 --> 00:36:42.156 A:middle
会来完成我想要对数量

00:36:42.156 --> 00:36:43.756 A:middle
做的事情

00:36:43.756 --> 00:36:45.656 A:middle
就是把它添加到

00:36:45.656 --> 00:36:46.636 A:middle
刚才我声明的

00:36:46.636 --> 00:36:47.456 A:middle
数量数组中

00:36:48.356 --> 00:36:50.636 A:middle
最后 我们来执行 query

00:36:51.226 --> 00:36:52.416 A:middle
就是如此简单

00:36:53.036 --> 00:36:54.336 A:middle
你们中有人熟悉我们的

00:36:54.336 --> 00:36:55.636 A:middle
其他的一些 query

00:36:55.806 --> 00:36:57.456 A:middle
这里的表现非常相似

00:36:59.546 --> 00:37:01.376 A:middle
接下来 我们有

00:36:59.546 --> 00:37:01.376 A:middle
接下来 我们有

00:37:01.376 --> 00:37:03.116 A:middle
QuantitySeriesSampleBuilder

00:37:03.116 --> 00:37:04.396 A:middle
如我刚才提到的

00:37:04.396 --> 00:37:06.036 A:middle
对于那些会产生

00:37:06.106 --> 00:37:07.706 A:middle
高频数据的 App 非常有用

00:37:08.106 --> 00:37:09.526 A:middle
因为用这种方式

00:37:09.526 --> 00:37:10.986 A:middle
存储数据效率更高

00:37:10.986 --> 00:37:12.906 A:middle
而且还允许你

00:37:13.096 --> 00:37:14.326 A:middle
创建它们之间的联系

00:37:15.166 --> 00:37:16.906 A:middle
那么首先 当然

00:37:16.906 --> 00:37:19.666 A:middle
我们从创建样本 builder 开始

00:37:19.946 --> 00:37:20.676 A:middle
我们用 HealthStore

00:37:20.776 --> 00:37:22.346 A:middle
配合我们感兴趣的

00:37:22.346 --> 00:37:24.376 A:middle
quantityType 来初始化

00:37:25.126 --> 00:37:27.346 A:middle
接下来 无论你希望用

00:37:27.346 --> 00:37:28.756 A:middle
什么样的频率来插入

00:37:28.756 --> 00:37:30.036 A:middle
样本 你只管做

00:37:30.506 --> 00:37:32.576 A:middle
那么以我这个足球 App 为例

00:37:33.026 --> 00:37:34.616 A:middle
我非常需要

00:37:34.616 --> 00:37:36.476 A:middle
我的用户移动的

00:37:36.476 --> 00:37:37.726 A:middle
实际距离 所以我要

00:37:37.726 --> 00:37:39.996 A:middle
声明这个测量单位

00:37:39.996 --> 00:37:41.316 A:middle
是我想要的数量

00:37:41.576 --> 00:37:43.236 A:middle
并且把它插入在

00:37:43.236 --> 00:37:44.056 A:middle
seriesBuilder 中

00:37:44.816 --> 00:37:48.506 A:middle
最后 我在我的系列上

00:37:48.826 --> 00:37:50.606 A:middle
调用结束 然后我们实际上

00:37:50.606 --> 00:37:52.426 A:middle
会得到新的数量系列样本

00:37:52.426 --> 00:37:55.376 A:middle
并且能够来储存它 用一种

00:37:55.376 --> 00:37:56.066 A:middle
更有效的方式

00:37:56.636 --> 00:37:57.986 A:middle
因此 我们真的真的

00:37:57.986 --> 00:37:59.596 A:middle
为你们感到激动

00:37:59.596 --> 00:38:00.946 A:middle
你们可以开始在新的

00:37:59.596 --> 00:38:00.946 A:middle
你们可以开始在新的

00:38:01.036 --> 00:38:02.746 A:middle
Quantity series API 上实现你们的 App 了

00:38:02.746 --> 00:38:04.376 A:middle
因为这种全新的方式存储

00:38:04.376 --> 00:38:06.086 A:middle
数据更高效

00:38:06.086 --> 00:38:07.726 A:middle
而它将数据关联在一起的

00:38:07.726 --> 00:38:09.536 A:middle
能力让一些有趣的分析

00:38:09.536 --> 00:38:10.866 A:middle
成为了可能

00:38:14.206 --> 00:38:16.576 A:middle
那么我们已经讨论了很多

00:38:16.576 --> 00:38:18.466 A:middle
有意思的事情

00:38:18.466 --> 00:38:19.876 A:middle
我们认为考虑这些事情最好的方式

00:38:19.876 --> 00:38:21.436 A:middle
应该是用更完整的角度来看待

00:38:21.436 --> 00:38:23.246 A:middle
因为这些东西整合在一起

00:38:23.246 --> 00:38:24.996 A:middle
真的可以让你

00:38:24.996 --> 00:38:26.666 A:middle
从开始到结束都

00:38:26.666 --> 00:38:28.666 A:middle
更加重视你的用户的体验

00:38:29.296 --> 00:38:31.396 A:middle
当然 我们必须开始

00:38:31.396 --> 00:38:32.716 A:middle
尊重用户的隐私

00:38:32.986 --> 00:38:35.496 A:middle
我们的用户在把他们

00:38:35.496 --> 00:38:36.496 A:middle
最敏感的数据给予我们

00:38:36.496 --> 00:38:38.706 A:middle
而确保我们怀着它

00:38:38.706 --> 00:38:39.756 A:middle
赢得的尊重

00:38:39.756 --> 00:38:41.046 A:middle
来处理这些数据

00:38:41.046 --> 00:38:41.746 A:middle
尤其重要

00:38:42.616 --> 00:38:44.836 A:middle
接下来 有了 Karim 介绍的

00:38:44.836 --> 00:38:46.466 A:middle
全新的体能训练特性

00:38:46.466 --> 00:38:48.076 A:middle
我们得以创造无缝的

00:38:48.076 --> 00:38:48.806 A:middle
用户体验

00:38:49.216 --> 00:38:50.626 A:middle
有了像体能训练崩溃恢复的东西

00:38:50.626 --> 00:38:52.376 A:middle
我们能够呈现给

00:38:52.376 --> 00:38:54.106 A:middle
用户真正期望的

00:38:54.106 --> 00:38:55.636 A:middle
用户体验

00:38:56.326 --> 00:38:58.426 A:middle
最后 通过使用新的

00:38:58.426 --> 00:39:00.456 A:middle
Quantity series API

00:38:58.426 --> 00:39:00.456 A:middle
Quantity series API

00:39:00.456 --> 00:39:01.726 A:middle
你能够遵守设备的

00:39:01.726 --> 00:39:03.386 A:middle
能力并且真正确保

00:39:03.386 --> 00:39:05.246 A:middle
从开始到结束

00:39:05.586 --> 00:39:06.956 A:middle
你都在给你的用户提供

00:39:06.956 --> 00:39:08.306 A:middle
能力范围内的最佳体验

00:39:08.866 --> 00:39:10.246 A:middle
由于健康和健身类

00:39:10.246 --> 00:39:11.966 A:middle
和体能训练 App 持续

00:39:11.966 --> 00:39:13.916 A:middle
增长 而且用户

00:39:13.916 --> 00:39:15.506 A:middle
用得越来越多

00:39:15.506 --> 00:39:17.016 A:middle
我们很高兴看到这些东西

00:39:17.016 --> 00:39:18.526 A:middle
组合在一起能够创造

00:39:18.526 --> 00:39:19.776 A:middle
真正难以置信的用户体验

00:39:21.326 --> 00:39:22.796 A:middle
更多信息 请参见

00:39:22.796 --> 00:39:23.576 A:middle
我们的开发人员文档

00:39:23.576 --> 00:39:25.236 A:middle
但实际上如果今天能和你们当面

00:39:25.236 --> 00:39:26.656 A:middle
聊聊 会更好

00:39:26.686 --> 00:39:28.416 A:middle
今天下午 1 点到 3 点

00:39:28.416 --> 00:39:30.546 A:middle
我们会有一个实验室

00:39:30.616 --> 00:39:33.196 A:middle
今天晚上 还有健康 健身和搜索聚会

00:39:33.196 --> 00:39:34.406 A:middle
我们很乐意回答你们的

00:39:34.406 --> 00:39:35.886 A:middle
任何问题 听听你们的

00:39:35.886 --> 00:39:38.026 A:middle
故事 与你们面对面

00:39:38.116 --> 00:39:39.816 A:middle
另外 我想说

00:39:39.816 --> 00:39:41.166 A:middle
在 HealthKit 中我们有一些全新特性

00:39:41.166 --> 00:39:43.146 A:middle
我们很乐意你们都去

00:39:43.146 --> 00:39:44.436 A:middle
看看他们的会议

00:39:44.436 --> 00:39:45.606 A:middle
用 HealthKit 访问

00:39:45.606 --> 00:39:46.056 A:middle
健康数据

00:39:47.306 --> 00:39:48.256 A:middle
非常感谢各位

00:39:48.256 --> 00:39:49.746 A:middle
我们期待看到你们

00:39:49.746 --> 00:39:50.486 A:middle
用这些做的东西

00:39:50.996 --> 00:39:51.516 A:middle
谢谢

00:39:52.516 --> 00:39:58.840 A:middle
［ 掌声 ］
