WEBVTT

00:00:07.516 --> 00:00:16.500 A:middle
［ 音乐 ］

00:00:21.516 --> 00:00:26.896 A:middle
［ 掌声 ］

00:00:27.396 --> 00:00:29.296 A:middle
&gt;&gt; 大家好

00:00:29.296 --> 00:00:30.566 A:middle
我叫 John Wilander

00:00:30.566 --> 00:00:32.216 A:middle
是 Safari 浏览器和 Webkit 团队的工程师

00:00:32.216 --> 00:00:35.056 A:middle
今天在这里

00:00:35.056 --> 00:00:37.006 A:middle
我想介绍如何

00:00:37.006 --> 00:00:38.356 A:middle
维护网络内容

00:00:38.846 --> 00:00:42.076 A:middle
或者 我也喜欢称之为

00:00:42.076 --> 00:00:43.236 A:middle
采取瑞典人的建议

00:00:45.016 --> 00:00:46.476 A:middle
你可能会问自己

00:00:46.476 --> 00:00:48.796 A:middle
网页内容 这个术语

00:00:48.796 --> 00:00:49.956 A:middle
相当宽泛

00:00:50.296 --> 00:00:51.686 A:middle
这场会议真的与我有关吗

00:00:52.586 --> 00:00:53.846 A:middle
是的 与你有关

00:00:54.336 --> 00:00:57.826 A:middle
首先 App 使用大量的网页内容

00:00:58.286 --> 00:01:00.566 A:middle
用于广告 登录流程

00:00:58.286 --> 00:01:00.566 A:middle
用于广告 登录流程

00:01:00.566 --> 00:01:02.636 A:middle
和启动画面

00:01:03.066 --> 00:01:04.325 A:middle
或许你的部分 App

00:01:04.325 --> 00:01:06.236 A:middle
正在使用 Safari View Controller

00:01:06.766 --> 00:01:08.146 A:middle
你或许将整个 UI 部分

00:01:08.146 --> 00:01:12.756 A:middle
呈现在网页视图中一些

00:01:12.756 --> 00:01:14.306 A:middle
伴随网页 App 可能

00:01:14.306 --> 00:01:16.456 A:middle
会在 Web 浏览器中呈现

00:01:16.456 --> 00:01:18.276 A:middle
它们能共享内容

00:01:18.696 --> 00:01:20.806 A:middle
或提供跨 App 和 Web App

00:01:20.806 --> 00:01:22.226 A:middle
的联合体验

00:01:22.786 --> 00:01:24.876 A:middle
所以 这场会议确实为你量身定做

00:01:25.586 --> 00:01:26.986 A:middle
安全十分重要

00:01:27.656 --> 00:01:28.936 A:middle
你想要长久经营

00:01:29.096 --> 00:01:30.096 A:middle
想提供最好的

00:01:30.096 --> 00:01:31.026 A:middle
客户体验

00:01:31.296 --> 00:01:33.346 A:middle
想获得竞争优势

00:01:33.926 --> 00:01:35.476 A:middle
你想获得这种权利

00:01:35.476 --> 00:01:37.176 A:middle
其他人违背就会

00:01:37.176 --> 00:01:39.086 A:middle
走向衰落 而你被市场选择

00:01:40.246 --> 00:01:42.086 A:middle
好了 我们今天要讨论什么呢

00:01:42.726 --> 00:01:44.986 A:middle
首先我们来说一下

00:01:45.236 --> 00:01:47.506 A:middle
传输安全

00:01:47.756 --> 00:01:49.786 A:middle
在做其他工作前

00:01:49.786 --> 00:01:51.936 A:middle
我要简单提及这方面的

00:01:51.936 --> 00:01:53.876 A:middle
基本内容 这对于接下来很重要

00:01:54.406 --> 00:01:55.136 A:middle
如果不能确保

00:01:55.136 --> 00:01:57.036 A:middle
传输安全 那么其他的就更别提了

00:01:57.926 --> 00:02:00.646 A:middle
然后 我们再说一下跨域锁定

00:01:57.926 --> 00:02:00.646 A:middle
然后 我们再说一下跨域锁定

00:02:01.146 --> 00:02:03.976 A:middle
基本上我会向你们

00:02:03.976 --> 00:02:05.426 A:middle
展示一系列在 WebKit 及

00:02:05.426 --> 00:02:07.856 A:middle
浏览器引擎中

00:02:07.856 --> 00:02:09.606 A:middle
使用的技术

00:02:09.606 --> 00:02:12.426 A:middle
这可以帮助你获得

00:02:12.726 --> 00:02:15.476 A:middle
更安全的 Web 内容默认值

00:02:16.056 --> 00:02:17.396 A:middle
我们希望为你选择

00:02:17.396 --> 00:02:19.186 A:middle
但我们无法为你测试网站

00:02:19.186 --> 00:02:21.636 A:middle
或网页内容

00:02:21.636 --> 00:02:23.346 A:middle
因此我们需要你的加入

00:02:23.946 --> 00:02:25.686 A:middle
或许 你会有疑问

00:02:25.686 --> 00:02:27.056 A:middle
为什么我要

00:02:27.056 --> 00:02:28.326 A:middle
关心这些安全机制

00:02:28.326 --> 00:02:30.226 A:middle
我将向你们展示

00:02:30.226 --> 00:02:32.386 A:middle
一些攻击场景

00:02:32.386 --> 00:02:34.546 A:middle
并将其映射到安全技术上

00:02:34.616 --> 00:02:36.026 A:middle
以便于你们明白

00:02:36.026 --> 00:02:37.716 A:middle
它在哪里发挥作用

00:02:37.776 --> 00:02:39.746 A:middle
以及它怎样保护

00:02:39.746 --> 00:02:40.596 A:middle
你的网页内容

00:02:41.266 --> 00:02:42.966 A:middle
所以 我们先来讲一讲

00:02:42.966 --> 00:02:44.476 A:middle
传输安全

00:02:45.096 --> 00:02:46.876 A:middle
这一点你应该很熟悉

00:02:47.486 --> 00:02:49.276 A:middle
这与转移到

00:02:49.276 --> 00:02:51.196 A:middle
HTTPS 和 WSS 有关

00:02:52.286 --> 00:02:54.376 A:middle
WSS 适用于网络套接字

00:02:55.526 --> 00:02:58.306 A:middle
现在 HTTP 和 WS

00:02:58.306 --> 00:03:00.386 A:middle
这种纯文本等价物的

00:02:58.306 --> 00:03:00.386 A:middle
这种纯文本等价物的

00:03:00.386 --> 00:03:02.916 A:middle
持续存在并不是

00:03:02.986 --> 00:03:03.796 A:middle
继续使用它们的借口

00:03:04.296 --> 00:03:05.686 A:middle
你需要转移到安全传输

00:03:05.686 --> 00:03:07.866 A:middle
因为这将

00:03:08.016 --> 00:03:09.936 A:middle
确保你在浏览器

00:03:09.936 --> 00:03:11.396 A:middle
或 App 中

00:03:11.396 --> 00:03:13.686 A:middle
呈现的内容

00:03:13.686 --> 00:03:15.606 A:middle
来自预期的服务器

00:03:15.606 --> 00:03:19.696 A:middle
而且没有在传输中混淆内容

00:03:20.316 --> 00:03:22.876 A:middle
因此 为使主要内容

00:03:22.876 --> 00:03:23.576 A:middle
转移到 HTTPS

00:03:23.946 --> 00:03:24.626 A:middle
这里有几项技术

00:03:24.626 --> 00:03:26.636 A:middle
可以为你提供帮助

00:03:27.496 --> 00:03:28.756 A:middle
你首先要做的

00:03:29.176 --> 00:03:31.116 A:middle
除了主要内容移动到 HTTPS

00:03:31.256 --> 00:03:33.526 A:middle
还有绝对的传输安全

00:03:33.526 --> 00:03:35.236 A:middle
或 HSTS

00:03:35.236 --> 00:03:39.076 A:middle
这是一个 HTTP 响应头

00:03:39.076 --> 00:03:40.636 A:middle
可以传送到呈现引擎

00:03:40.636 --> 00:03:43.136 A:middle
比如 WebKit 告诉它

00:03:43.136 --> 00:03:45.666 A:middle
嘿 我的域名应一直

00:03:45.666 --> 00:03:47.296 A:middle
通过 HTTPS 加载

00:03:47.816 --> 00:03:50.636 A:middle
如果有来自我的 HTTP 请求

00:03:50.636 --> 00:03:52.436 A:middle
只需自动为我

00:03:52.436 --> 00:03:54.306 A:middle
升级到 HTTPS 即可

00:03:54.616 --> 00:03:56.066 A:middle
请勿将纯文本

00:03:56.206 --> 00:03:57.996 A:middle
连接到我的服务器

00:03:59.216 --> 00:04:00.756 A:middle
另外你可以

00:03:59.216 --> 00:04:00.756 A:middle
另外你可以

00:04:00.756 --> 00:04:02.486 A:middle
告诉呈现引擎

00:04:02.486 --> 00:04:04.106 A:middle
需要记忆多长时间

00:04:04.336 --> 00:04:05.916 A:middle
所以 通常至少

00:04:05.916 --> 00:04:06.956 A:middle
提前半年

00:04:08.426 --> 00:04:09.846 A:middle
现在 你可能正在从其他

00:04:09.846 --> 00:04:11.546 A:middle
不受控制的服务器

00:04:11.546 --> 00:04:12.966 A:middle
加载内容

00:04:12.966 --> 00:04:14.536 A:middle
而不是从你的域名加载

00:04:15.216 --> 00:04:16.916 A:middle
还有一个你可以

00:04:16.916 --> 00:04:18.685 A:middle
发送到浏览器引擎

00:04:18.685 --> 00:04:19.896 A:middle
叫做“升级不安全请求”

00:04:19.896 --> 00:04:23.036 A:middle
也是一个 HTTP 响应头

00:04:23.036 --> 00:04:25.076 A:middle
它会给浏览器指令

00:04:25.076 --> 00:04:27.256 A:middle
嘿 前进并且把其他所有链接

00:04:27.256 --> 00:04:28.796 A:middle
也升级到内容中

00:04:28.826 --> 00:04:31.086 A:middle
即使不是从我的服务器输出

00:04:31.086 --> 00:04:33.126 A:middle
即使它们并没有

00:04:33.126 --> 00:04:35.406 A:middle
设置严格的传输安全

00:04:36.356 --> 00:04:38.476 A:middle
所以 这两样东西会

00:04:38.556 --> 00:04:40.836 A:middle
自动升级到安全传输

00:04:42.166 --> 00:04:43.516 A:middle
另一件需要做的事就是

00:04:43.516 --> 00:04:46.646 A:middle
确保你的 Cookie 的安全

00:04:46.866 --> 00:04:48.346 A:middle
这是你在设置 Cookie 头中

00:04:48.346 --> 00:04:49.486 A:middle
添加的属性

00:04:49.846 --> 00:04:51.606 A:middle
分号 安全

00:04:52.226 --> 00:04:54.376 A:middle
这意味着你在告诉

00:04:54.476 --> 00:04:56.666 A:middle
网络堆叠这个 Cookie

00:04:56.666 --> 00:04:58.716 A:middle
只能通过安全传输

00:04:58.716 --> 00:04:59.716 A:middle
进行发送

00:05:00.086 --> 00:05:01.686 A:middle
如果由于某种原因

00:05:01.766 --> 00:05:03.696 A:middle
我的服务器出现纯文本请求

00:05:03.936 --> 00:05:06.066 A:middle
请不要发送 Cookie

00:05:06.836 --> 00:05:08.336 A:middle
因为你应该使用安全的传输

00:05:08.336 --> 00:05:10.186 A:middle
所有的 Cookie 都应该

00:05:10.186 --> 00:05:11.606 A:middle
标记为安全

00:05:12.606 --> 00:05:14.846 A:middle
最后 你要做的是

00:05:14.846 --> 00:05:16.316 A:middle
将安全传输

00:05:16.346 --> 00:05:17.886 A:middle
特定于 App

00:05:18.476 --> 00:05:19.566 A:middle
你可能听说过 App 传输安全

00:05:19.566 --> 00:05:21.246 A:middle
或者 ATS

00:05:21.246 --> 00:05:24.266 A:middle
这是 iOS App 的默认行为

00:05:24.266 --> 00:05:26.116 A:middle
这意味着

00:05:26.116 --> 00:05:27.996 A:middle
只能为网络流量

00:05:27.996 --> 00:05:29.436 A:middle
使用安全传输

00:05:30.496 --> 00:05:32.156 A:middle
现在 你可以做出选择

00:05:32.156 --> 00:05:33.836 A:middle
在信息列表中表明

00:05:33.836 --> 00:05:35.606 A:middle
嘿 对于网页内容

00:05:35.686 --> 00:05:39.536 A:middle
我仍然想做不安全请求 不要这样做

00:05:40.136 --> 00:05:42.276 A:middle
你应在信息列表中说“不”

00:05:42.316 --> 00:05:44.096 A:middle
尤其是对于

00:05:44.096 --> 00:05:45.926 A:middle
任意网页内容加载

00:05:46.976 --> 00:05:49.066 A:middle
好了 现在我们已经确保传输安全

00:05:49.386 --> 00:05:50.136 A:middle
我们继续

00:05:50.476 --> 00:05:51.226 A:middle
现在来看

00:05:51.316 --> 00:05:52.786 A:middle
跨域锁定

00:05:53.716 --> 00:05:54.756 A:middle
将其称为“锁定”

00:05:54.756 --> 00:05:57.106 A:middle
是因为它真的能为你的

00:05:57.106 --> 00:06:00.276 A:middle
网页内容选择更明智

00:05:57.106 --> 00:06:00.276 A:middle
网页内容选择更明智

00:06:00.276 --> 00:06:02.906 A:middle
更安全的默认设置

00:06:03.286 --> 00:06:05.186 A:middle
我们将其锁定到

00:06:05.186 --> 00:06:06.306 A:middle
它本该如此的状态

00:06:06.306 --> 00:06:08.446 A:middle
然后你可以打开

00:06:08.446 --> 00:06:10.946 A:middle
具体想要做的东西

00:06:11.806 --> 00:06:13.836 A:middle
现在来看一下

00:06:13.836 --> 00:06:15.846 A:middle
什么是跨域加载

00:06:16.186 --> 00:06:17.336 A:middle
我们要锁定什么

00:06:18.076 --> 00:06:20.106 A:middle
网页技术有这个

00:06:20.216 --> 00:06:21.956 A:middle
强大的功能

00:06:22.066 --> 00:06:24.036 A:middle
你可以将不同服务器及

00:06:24.096 --> 00:06:25.676 A:middle
不同来源的内容

00:06:25.676 --> 00:06:26.266 A:middle
交织在一起

00:06:27.126 --> 00:06:28.586 A:middle
如果你愿意的话

00:06:28.586 --> 00:06:29.036 A:middle
不同域名也可以

00:06:30.056 --> 00:06:32.136 A:middle
例如图像

00:06:32.746 --> 00:06:34.356 A:middle
你可以将任何

00:06:34.356 --> 00:06:36.746 A:middle
网络服务器的图像加载到

00:06:36.746 --> 00:06:37.586 A:middle
网页内容中

00:06:37.586 --> 00:06:38.696 A:middle
这就是一种跨域加载

00:06:39.546 --> 00:06:42.066 A:middle
你也可以从其他服务器上加载脚本

00:06:42.766 --> 00:06:44.696 A:middle
有趣的是 这些脚本

00:06:44.886 --> 00:06:46.556 A:middle
实际上执行的是与你自己脚本

00:06:46.556 --> 00:06:48.746 A:middle
相同的权限和特权

00:06:48.746 --> 00:06:50.636 A:middle
因此 你需要

00:06:50.636 --> 00:06:52.246 A:middle
谨慎考虑从其他服务器上

00:06:52.246 --> 00:06:53.926 A:middle
卸载哪些脚本

00:06:54.356 --> 00:06:56.996 A:middle
它们或多或少都拥有你的网页内容

00:06:57.286 --> 00:06:59.136 A:middle
用你的同等权限去执行

00:07:00.126 --> 00:07:02.536 A:middle
再例如 iframes

00:07:02.786 --> 00:07:05.506 A:middle
可用来嵌入其他服务器

00:07:05.506 --> 00:07:06.416 A:middle
的完整页面

00:07:06.806 --> 00:07:08.246 A:middle
跨域意思是

00:07:08.486 --> 00:07:09.436 A:middle
来自不同域名

00:07:09.926 --> 00:07:11.146 A:middle
以上就是三个

00:07:11.206 --> 00:07:12.826 A:middle
跨域加载的例子

00:07:13.386 --> 00:07:15.616 A:middle
现在 我们已经建立了

00:07:15.616 --> 00:07:18.046 A:middle
安全机制

00:07:18.046 --> 00:07:20.096 A:middle
一个超过 20 年的网页安全机制

00:07:20.146 --> 00:07:21.606 A:middle
为这些跨域加载

00:07:21.656 --> 00:07:22.526 A:middle
提供基本的保护

00:07:22.836 --> 00:07:24.496 A:middle
它也被称为

00:07:24.496 --> 00:07:26.356 A:middle
同源策略

00:07:27.046 --> 00:07:28.586 A:middle
但有所不同的是

00:07:28.586 --> 00:07:30.196 A:middle
在这里你能得到

00:07:30.196 --> 00:07:31.206 A:middle
真实域名的例子

00:07:31.556 --> 00:07:33.956 A:middle
你得到了加载图像的案例

00:07:33.956 --> 00:07:37.096 A:middle
你还拥有了

00:07:37.226 --> 00:07:39.336 A:middle
加载脚本的 CDN

00:07:39.916 --> 00:07:41.226 A:middle
另外你可能还会得到一个社交小部件

00:07:41.226 --> 00:07:42.926 A:middle
一个 iframe

00:07:42.926 --> 00:07:44.166 A:middle
来自 social.example

00:07:44.896 --> 00:07:46.856 A:middle
而且 我想说的是这里的

00:07:46.856 --> 00:07:49.076 A:middle
.example 我确信

00:07:49.076 --> 00:07:51.026 A:middle
不是在讨论真实的网站

00:07:51.406 --> 00:07:52.666 A:middle
换个更易理解的说法

00:07:52.666 --> 00:07:54.396 A:middle
你可以将其看作 .com 或者 .org

00:07:55.566 --> 00:07:56.446 A:middle
不管怎样 这些都是

00:07:56.446 --> 00:07:58.306 A:middle
跨源加载和

00:07:58.306 --> 00:08:01.236 A:middle
同源策略

00:07:58.306 --> 00:08:01.236 A:middle
同源策略

00:08:01.236 --> 00:08:02.836 A:middle
能够跟踪加载图像

00:08:02.836 --> 00:08:04.096 A:middle
加载脚本

00:08:04.096 --> 00:08:05.586 A:middle
以及 iframe 的位置

00:08:05.586 --> 00:08:07.446 A:middle
因此它能够

00:08:07.446 --> 00:08:08.756 A:middle
提供基本的保护

00:08:09.326 --> 00:08:12.046 A:middle
这种基本保护意味着

00:08:12.046 --> 00:08:14.366 A:middle
在这个例子中 你的页面不能

00:08:14.366 --> 00:08:16.426 A:middle
从 social.example 进入到 iframe

00:08:16.426 --> 00:08:21.126 A:middle
不能读取其字节及内容

00:08:21.246 --> 00:08:22.416 A:middle
也不能写入内容

00:08:22.706 --> 00:08:24.106 A:middle
同源策略是

00:08:24.106 --> 00:08:25.826 A:middle
防御 网页的这部分内容

00:08:25.826 --> 00:08:27.066 A:middle
实际上来自其他的

00:08:27.066 --> 00:08:28.626 A:middle
服务器 你不能

00:08:28.626 --> 00:08:29.866 A:middle
直接进入到那里

00:08:29.866 --> 00:08:31.996 A:middle
修改内容或者

00:08:31.996 --> 00:08:33.366 A:middle
读取用户刚好

00:08:33.366 --> 00:08:34.905 A:middle
输入的内容

00:08:35.496 --> 00:08:37.596 A:middle
同源策略

00:08:37.596 --> 00:08:38.905 A:middle
简单来说

00:08:39.275 --> 00:08:41.696 A:middle
就是在一个浏览器中匹配两个页面 两个选项卡

00:08:42.236 --> 00:08:43.596 A:middle
一个选项卡不能

00:08:43.596 --> 00:08:45.546 A:middle
进入另一个选项卡去看

00:08:45.546 --> 00:08:47.056 A:middle
用户此时此地的内容

00:08:47.876 --> 00:08:49.176 A:middle
同源策略

00:08:49.746 --> 00:08:53.500 A:middle
也在那里高效地运转和工作

00:08:54.726 --> 00:08:55.756 A:middle
下一个 锁定

00:08:55.846 --> 00:08:57.806 A:middle
我们如何准确地锁定

00:08:58.116 --> 00:08:59.116 A:middle
我们已经有了

00:08:59.116 --> 00:09:01.176 A:middle
同源策略 但还不够

00:08:59.116 --> 00:09:01.176 A:middle
同源策略 但还不够

00:09:01.546 --> 00:09:04.726 A:middle
所以需要选择一些更多的默认值

00:09:05.106 --> 00:09:07.016 A:middle
从子资源的

00:09:07.016 --> 00:09:08.716 A:middle
完整性开始 我之后

00:09:08.756 --> 00:09:09.956 A:middle
会提到这一点

00:09:10.536 --> 00:09:12.256 A:middle
这只是脚本标记的

00:09:12.256 --> 00:09:14.006 A:middle
简单更改

00:09:15.126 --> 00:09:16.426 A:middle
第二部分是

00:09:16.426 --> 00:09:17.376 A:middle
内容安全策略

00:09:17.526 --> 00:09:19.056 A:middle
它能够为你的真格页面

00:09:19.056 --> 00:09:20.576 A:middle
提供全面的安全策略

00:09:20.576 --> 00:09:22.366 A:middle
你可以说

00:09:22.366 --> 00:09:24.236 A:middle
嘿 我只想从这里加载脚本

00:09:24.546 --> 00:09:25.976 A:middle
我不想从其他的服务器上

00:09:25.976 --> 00:09:27.596 A:middle
得到等框架等等

00:09:27.696 --> 00:09:30.686 A:middle
我们会看到 第三部分是简单的

00:09:30.686 --> 00:09:32.496 A:middle
服务器配置

00:09:32.986 --> 00:09:35.076 A:middle
这些是发出的 HTTP 响应头

00:09:35.136 --> 00:09:36.666 A:middle
并告诉浏览器引擎说

00:09:36.666 --> 00:09:38.856 A:middle
嘿 我想要更安全的默认配置

00:09:38.856 --> 00:09:40.466 A:middle
我不想要这些

00:09:40.466 --> 00:09:42.366 A:middle
旧的传统 API

00:09:42.366 --> 00:09:43.496 A:middle
虽然你一直支持

00:09:43.496 --> 00:09:44.206 A:middle
但我并不需要

00:09:44.426 --> 00:09:47.926 A:middle
请帮助我 那么 让我们一起深入其中

00:09:47.926 --> 00:09:49.566 A:middle
了解子资源的完整性

00:09:50.696 --> 00:09:52.746 A:middle
现在从 CDN

00:09:52.746 --> 00:09:54.416 A:middle
即内容分发网络

00:09:54.416 --> 00:09:55.906 A:middle
加载该框架

00:09:56.366 --> 00:09:57.826 A:middle
是非常合理的方式

00:09:58.826 --> 00:10:01.916 A:middle
这个脚本标签只包含

00:09:58.826 --> 00:10:01.916 A:middle
这个脚本标签只包含

00:10:01.966 --> 00:10:04.666 A:middle
URL 来获取脚本 对吗

00:10:05.446 --> 00:10:06.536 A:middle
正如我所提到的

00:10:06.536 --> 00:10:09.686 A:middle
你现在正在依靠 CDN 来提供

00:10:09.686 --> 00:10:10.956 A:middle
正确的脚本

00:10:10.956 --> 00:10:12.546 A:middle
这保证你的网页内容

00:10:12.546 --> 00:10:13.806 A:middle
按预期方式运行

00:10:14.846 --> 00:10:16.346 A:middle
但实际上 你要知道

00:10:16.346 --> 00:10:17.966 A:middle
如果它们决定碰撞该版本

00:10:17.966 --> 00:10:19.066 A:middle
或是服务器出了问题

00:10:19.066 --> 00:10:20.296 A:middle
它们将会给你

00:10:20.296 --> 00:10:21.256 A:middle
发送错误脚本

00:10:21.256 --> 00:10:24.016 A:middle
你的网页内容可能会瘫痪

00:10:24.646 --> 00:10:25.896 A:middle
有可能出错

00:10:25.896 --> 00:10:27.576 A:middle
也有可能无法按照预期方式工作

00:10:28.026 --> 00:10:29.646 A:middle
你知道自己期待什么脚本

00:10:29.646 --> 00:10:31.626 A:middle
但是当你只是像这样

00:10:31.626 --> 00:10:32.716 A:middle
发送一个脚本标签时

00:10:32.716 --> 00:10:34.186 A:middle
就像这样

00:10:35.006 --> 00:10:36.756 A:middle
你的行为就只是

00:10:36.756 --> 00:10:39.436 A:middle
告诉浏览器

00:10:39.436 --> 00:10:42.336 A:middle
回到 JavaScript 中执行它

00:10:43.036 --> 00:10:45.056 A:middle
换种更好的方式说就是

00:10:45.376 --> 00:10:46.526 A:middle
不 我想确保这是我

00:10:46.526 --> 00:10:47.986 A:middle
期待的脚本

00:10:48.546 --> 00:10:49.996 A:middle
不过 你可以在脚本标记中

00:10:49.996 --> 00:10:52.766 A:middle
使用完整性属性

00:10:53.366 --> 00:10:54.916 A:middle
在这里 你提供了一个校验和

00:10:54.916 --> 00:10:56.496 A:middle
这种情况下

00:10:56.496 --> 00:10:59.466 A:middle
用算法 sha256 表示

00:10:59.466 --> 00:11:01.316 A:middle
这是我希望从我的 CDN 里

00:10:59.466 --> 00:11:01.316 A:middle
这是我希望从我的 CDN 里

00:11:01.316 --> 00:11:04.176 A:middle
得到的校验和

00:11:04.176 --> 00:11:05.816 A:middle
而且只有当我得到

00:11:05.816 --> 00:11:07.946 A:middle
与校验和匹配的东西时

00:11:07.946 --> 00:11:08.576 A:middle
你才能够执行它

00:11:09.266 --> 00:11:11.036 A:middle
因此 浏览器引擎会在

00:11:11.036 --> 00:11:13.556 A:middle
执行代码前检查和比较

00:11:13.556 --> 00:11:15.976 A:middle
确保该校验和

00:11:17.196 --> 00:11:19.186 A:middle
那么 如果不匹配会怎样呢

00:11:19.246 --> 00:11:21.506 A:middle
如果碰撞到版本

00:11:21.506 --> 00:11:22.606 A:middle
或是哪里出了问题

00:11:22.606 --> 00:11:23.406 A:middle
又或是我得到错误脚本怎么办呢

00:11:24.096 --> 00:11:26.216 A:middle
那么我的网页就出现故障 无法运行

00:11:26.666 --> 00:11:28.056 A:middle
你添加一个校验

00:11:28.276 --> 00:11:29.906 A:middle
这种情况下 你已经加载

00:11:29.906 --> 00:11:31.266 A:middle
或尝试加载一个框架

00:11:31.736 --> 00:11:33.336 A:middle
如果经检查框架加载正确后

00:11:33.336 --> 00:11:35.376 A:middle
我现在就可在 dom

00:11:35.376 --> 00:11:36.266 A:middle
中得到对象

00:11:36.856 --> 00:11:39.246 A:middle
如果错误

00:11:39.246 --> 00:11:41.516 A:middle
那么就从自己控制的服务器加载

00:11:41.516 --> 00:11:44.126 A:middle
并且不做任何更改

00:11:44.896 --> 00:11:47.496 A:middle
虽然这样可能会降低性能

00:11:47.496 --> 00:11:49.266 A:middle
但至少网页内容

00:11:49.266 --> 00:11:50.986 A:middle
或是网站仍然可以运行

00:11:51.986 --> 00:11:53.886 A:middle
好的 以上就是子资源完整性

00:11:54.336 --> 00:11:55.696 A:middle
现在我们来看

00:11:55.696 --> 00:11:56.866 A:middle
内容安全策略

00:11:57.486 --> 00:11:59.186 A:middle
我提过 这就像

00:11:59.186 --> 00:12:00.616 A:middle
为页面设置一个策略

00:11:59.186 --> 00:12:00.616 A:middle
为页面设置一个策略

00:12:00.616 --> 00:12:02.596 A:middle
比如这里应该允许什么

00:12:02.626 --> 00:12:03.876 A:middle
实际上我将其看作一个

00:12:03.946 --> 00:12:05.176 A:middle
架构策略

00:12:05.176 --> 00:12:06.856 A:middle
如果你是一名软件工程师

00:12:07.336 --> 00:12:09.326 A:middle
你会想追踪相依性

00:12:09.326 --> 00:12:10.736 A:middle
我可以在这里做什么

00:12:10.736 --> 00:12:12.306 A:middle
我可以加载什么

00:12:12.346 --> 00:12:13.106 A:middle
不能加载什么

00:12:14.586 --> 00:12:17.766 A:middle
因此 这又是一个 HTTP 响应头

00:12:18.116 --> 00:12:19.386 A:middle
所以 当你从服务器

00:12:19.446 --> 00:12:21.636 A:middle
发送一个页面时

00:12:21.726 --> 00:12:23.356 A:middle
你加一个响应头进去

00:12:23.356 --> 00:12:24.936 A:middle
并说 嘿 我要运行一个

00:12:24.936 --> 00:12:26.496 A:middle
内容安全策略

00:12:26.826 --> 00:12:28.376 A:middle
我将控制我的

00:12:28.376 --> 00:12:29.736 A:middle
网页内容

00:12:30.626 --> 00:12:32.476 A:middle
然后你开始

00:12:32.626 --> 00:12:35.286 A:middle
从远程服务器加载任何类型

00:12:35.286 --> 00:12:36.856 A:middle
的内容默认源

00:12:36.856 --> 00:12:38.956 A:middle
是我自己

00:12:39.476 --> 00:12:42.306 A:middle
只能从我的服务器默认加载

00:12:42.976 --> 00:12:44.466 A:middle
现在 你已经完全锁定它

00:12:44.466 --> 00:12:46.866 A:middle
如果页面中

00:12:46.866 --> 00:12:48.456 A:middle
有任何类型的内容加载

00:12:48.456 --> 00:12:51.816 A:middle
试图从不属于你的服务器拉进来

00:12:51.816 --> 00:12:53.576 A:middle
它会被拒绝

00:12:53.576 --> 00:12:56.136 A:middle
因为 WebKit 会以与你设置的策略

00:12:56.136 --> 00:12:58.426 A:middle
不匹配的原因而拒绝

00:12:59.716 --> 00:13:00.636 A:middle
正如你们看到的

00:12:59.716 --> 00:13:00.636 A:middle
正如你们看到的

00:13:00.636 --> 00:13:01.206 A:middle
我在这儿做了注释

00:13:01.206 --> 00:13:02.016 A:middle
没有内联

00:13:02.136 --> 00:13:04.526 A:middle
这也是默认行为的一部分

00:13:04.776 --> 00:13:06.086 A:middle
一旦你这样设置

00:13:06.086 --> 00:13:08.496 A:middle
也就是说没有内联脚本

00:13:08.726 --> 00:13:10.726 A:middle
只从文件加载脚本

00:13:11.276 --> 00:13:12.606 A:middle
这就是为什么我一直认为

00:13:12.606 --> 00:13:14.116 A:middle
它是一个架构策略

00:13:14.366 --> 00:13:15.976 A:middle
因为你将逻辑分为文件

00:13:15.976 --> 00:13:21.246 A:middle
与标记和样式化分开来

00:13:21.316 --> 00:13:23.946 A:middle
这些样式也在文件中

00:13:24.166 --> 00:13:25.046 A:middle
CSS 文件

00:13:26.066 --> 00:13:29.636 A:middle
好的 现在你想从 cdn.example 中

00:13:29.636 --> 00:13:31.686 A:middle
加载脚本

00:13:31.686 --> 00:13:33.176 A:middle
如果只使用默认源自带

00:13:33.176 --> 00:13:35.976 A:middle
那么这将会被锁定

00:13:35.976 --> 00:13:37.776 A:middle
对吗 就无法进行远程脚本加载

00:13:38.126 --> 00:13:39.776 A:middle
在内容安全策略中

00:13:39.776 --> 00:13:41.856 A:middle
有个白名单机制

00:13:42.396 --> 00:13:44.356 A:middle
你只要说 嘿 脚本源

00:13:44.566 --> 00:13:47.256 A:middle
打开 can.example

00:13:47.366 --> 00:13:49.246 A:middle
因为我想从那里加载脚本

00:13:49.786 --> 00:13:51.066 A:middle
现在你可以从自己的服务器

00:13:51.066 --> 00:13:53.716 A:middle
和 cdn.example 中加载

00:13:53.716 --> 00:13:54.466 A:middle
但在其他地方无法加载

00:13:55.866 --> 00:13:57.206 A:middle
你可能想要在 iframe 中

00:13:57.206 --> 00:14:00.326 A:middle
有社交媒体插件

00:13:57.206 --> 00:14:00.326 A:middle
有社交媒体插件

00:14:00.326 --> 00:14:02.006 A:middle
一种小插件

00:14:02.406 --> 00:14:04.306 A:middle
你可以添加一个框架源代码指令

00:14:04.306 --> 00:14:05.956 A:middle
说我想从 social.example 中

00:14:05.956 --> 00:14:07.366 A:middle
加载 iframes

00:14:07.366 --> 00:14:10.036 A:middle
但是没有其他人

00:14:10.036 --> 00:14:12.076 A:middle
在我的页面上有 iframe

00:14:12.596 --> 00:14:13.946 A:middle
这样 你就掌握了这一点

00:14:14.626 --> 00:14:16.346 A:middle
甚至当你的内容

00:14:16.346 --> 00:14:18.376 A:middle
被加载到别人页面上的 iframe 时

00:14:18.376 --> 00:14:21.856 A:middle
也会有相反的指令

00:14:22.316 --> 00:14:24.766 A:middle
在这个例子中 news.example

00:14:24.766 --> 00:14:27.066 A:middle
正在加载一个 iframe 中的内容

00:14:27.516 --> 00:14:29.556 A:middle
你可以发出指令

00:14:29.556 --> 00:14:30.576 A:middle
这是内容安全策略框架中

00:14:30.576 --> 00:14:33.626 A:middle
最后一条指令

00:14:34.026 --> 00:14:35.516 A:middle
这是告诉浏览器

00:14:35.516 --> 00:14:38.686 A:middle
嘿 检查它的框架

00:14:38.926 --> 00:14:40.666 A:middle
一直到首页

00:14:40.666 --> 00:14:42.726 A:middle
它们都必须在

00:14:42.726 --> 00:14:44.666 A:middle
我允许的清单上

00:14:45.116 --> 00:14:46.806 A:middle
所以 在这种情况下 你的网页

00:14:46.806 --> 00:14:48.926 A:middle
内容已经表示 news.example

00:14:48.926 --> 00:14:50.346 A:middle
我和它们有交易往来

00:14:50.676 --> 00:14:51.816 A:middle
他们可以在 iframe 中

00:14:51.816 --> 00:14:52.926 A:middle
有我的内容

00:14:54.126 --> 00:14:55.916 A:middle
这是相当多的 所以 让我们

00:14:55.916 --> 00:14:58.026 A:middle
逐行快速回顾一下

00:14:58.026 --> 00:14:59.936 A:middle
这样我们就知道 这说的是什么了

00:15:00.396 --> 00:15:02.036 A:middle
内容安全策略

00:15:02.036 --> 00:15:03.966 A:middle
从默认源自带开始

00:15:04.296 --> 00:15:05.506 A:middle
锁定一切

00:15:05.506 --> 00:15:06.616 A:middle
所有将用

00:15:06.616 --> 00:15:08.476 A:middle
源属性加载的东西

00:15:08.476 --> 00:15:10.586 A:middle
都像从服务器加载

00:15:10.586 --> 00:15:12.646 A:middle
需要我的出处以及域名

00:15:13.476 --> 00:15:14.666 A:middle
然后打开

00:15:15.076 --> 00:15:17.346 A:middle
对于脚本 你可以

00:15:17.346 --> 00:15:19.716 A:middle
添加允许使用哪些脚本

00:15:20.786 --> 00:15:23.366 A:middle
你可以决定允许自己从哪里

00:15:23.366 --> 00:15:24.746 A:middle
加载框架

00:15:25.436 --> 00:15:26.496 A:middle
然后将它们列入白名单

00:15:26.696 --> 00:15:28.526 A:middle
最后 如果你打算

00:15:28.526 --> 00:15:30.156 A:middle
在别人的页面中

00:15:30.156 --> 00:15:32.026 A:middle
使用 iframe

00:15:32.026 --> 00:15:35.726 A:middle
可以将其放在框架指令的白名单上

00:15:36.926 --> 00:15:38.986 A:middle
好的 这就是内容安全策略

00:15:39.286 --> 00:15:42.256 A:middle
它还有更多内容

00:15:42.256 --> 00:15:44.276 A:middle
我们也会在

00:15:44.276 --> 00:15:46.346 A:middle
一些攻击场景中

00:15:46.346 --> 00:15:47.646 A:middle
看到这些东西的特点

00:15:48.986 --> 00:15:51.476 A:middle
下面我们来看一下 Cookie

00:15:51.916 --> 00:15:53.616 A:middle
事实上在网络兴起时

00:15:53.616 --> 00:15:56.456 A:middle
人们将 Cookie 称为

00:15:56.536 --> 00:15:58.426 A:middle
“魔力 Cookie”

00:15:58.426 --> 00:16:00.476 A:middle
它真的很神奇

00:15:58.426 --> 00:16:00.476 A:middle
它真的很神奇

00:16:00.476 --> 00:16:01.666 A:middle
可以用来做很多事情

00:16:02.286 --> 00:16:03.746 A:middle
也许最敏感的是它们对

00:16:03.746 --> 00:16:06.126 A:middle
用户进行认证

00:16:06.126 --> 00:16:08.196 A:middle
一旦认证登录

00:16:08.196 --> 00:16:09.266 A:middle
你就会得到一个

00:16:09.266 --> 00:16:11.296 A:middle
Cookie 保存会话

00:16:11.666 --> 00:16:13.806 A:middle
这个程序 如果它被移动

00:16:13.806 --> 00:16:15.476 A:middle
或被盗 并且被移动到

00:16:15.476 --> 00:16:17.366 A:middle
另一个浏览器引擎中

00:16:17.366 --> 00:16:19.446 A:middle
很多时候可以模仿该用户

00:16:19.886 --> 00:16:21.636 A:middle
所以说 你真的需要保护好你的 Cookie

00:16:22.156 --> 00:16:23.686 A:middle
就像我提过的

00:16:23.686 --> 00:16:25.376 A:middle
你应该标记其安全

00:16:25.376 --> 00:16:26.796 A:middle
以便于永远不会泄露

00:16:26.796 --> 00:16:27.706 A:middle
纯文本请求

00:16:28.216 --> 00:16:29.636 A:middle
不过 还有更多的事要做 对吗

00:16:30.576 --> 00:16:34.436 A:middle
来看 HttpOnly Cookie

00:16:34.706 --> 00:16:36.736 A:middle
这是个相当古老的技术

00:16:37.316 --> 00:16:38.936 A:middle
我想它已经有至少

00:16:38.936 --> 00:16:42.496 A:middle
15 年左右的历史了

00:16:42.696 --> 00:16:45.376 A:middle
你可能很熟悉

00:16:45.376 --> 00:16:47.236 A:middle
web API document.Cookie

00:16:47.876 --> 00:16:50.146 A:middle
这是 JavaScript

00:16:50.496 --> 00:16:51.826 A:middle
读取和写入 Cookie 的一种方式

00:16:53.016 --> 00:16:55.206 A:middle
JavaScript 功能强大

00:16:55.336 --> 00:16:56.606 A:middle
而且 就像我提到的

00:16:56.606 --> 00:16:57.976 A:middle
如果你从其他服务器加载 JavaScript

00:16:58.026 --> 00:16:59.896 A:middle
就可以通过这个 API

00:16:59.896 --> 00:17:01.886 A:middle
访问所有用户的 Cookie

00:16:59.896 --> 00:17:01.886 A:middle
访问所有用户的 Cookie

00:17:03.316 --> 00:17:05.106 A:middle
你不能让它们拥有

00:17:05.106 --> 00:17:06.136 A:middle
这么多权限

00:17:06.246 --> 00:17:07.496 A:middle
相反 你应该保护你的

00:17:07.496 --> 00:17:08.816 A:middle
Cookie 尤其是你的

00:17:08.816 --> 00:17:10.746 A:middle
身份验证 Cookie

00:17:10.746 --> 00:17:12.736 A:middle
它实际上是以用户登录的方式

00:17:12.736 --> 00:17:15.636 A:middle
方法是将其标记为 HttpOnly

00:17:16.455 --> 00:17:18.526 A:middle
意思是这个 Cookie

00:17:18.526 --> 00:17:19.796 A:middle
你看到的是设置

00:17:19.796 --> 00:17:21.036 A:middle
Cookie 头文件

00:17:21.036 --> 00:17:23.236 A:middle
我们只发送 HTTP

00:17:23.236 --> 00:17:25.256 A:middle
这意味着不在 API 中

00:17:25.506 --> 00:17:26.986 A:middle
暴露这个 Cookie

00:17:27.836 --> 00:17:30.136 A:middle
因此 JavaScript 现在看不到

00:17:30.136 --> 00:17:31.876 A:middle
Cookie 当然也不能

00:17:31.936 --> 00:17:34.316 A:middle
篡改 盗取或是操纵它

00:17:34.936 --> 00:17:38.016 A:middle
所以 这是你应该做的

00:17:38.186 --> 00:17:40.376 A:middle
还有另一件事

00:17:40.376 --> 00:17:43.766 A:middle
关于版本的新技术 SameSite Cookie

00:17:44.496 --> 00:17:45.916 A:middle
同样 当你在浏览器中

00:17:45.916 --> 00:17:47.486 A:middle
设置 Cookie 头时

00:17:47.486 --> 00:17:49.696 A:middle
将其设置在 Cookie 头上

00:17:50.406 --> 00:17:52.216 A:middle
看这里 我得到了相同的

00:17:52.216 --> 00:17:54.076 A:middle
严格的站点属性

00:17:54.656 --> 00:17:56.356 A:middle
这里也有一个松散的版本

00:17:56.356 --> 00:17:58.596 A:middle
但基本上用于

00:17:58.596 --> 00:18:00.436 A:middle
这个特定的 Cookie

00:17:58.596 --> 00:18:00.436 A:middle
这个特定的 Cookie

00:18:00.436 --> 00:18:02.976 A:middle
前提是我是页面拥有者

00:18:02.976 --> 00:18:04.446 A:middle
是主页面

00:18:04.446 --> 00:18:06.946 A:middle
而不是嵌入的

00:18:07.406 --> 00:18:08.946 A:middle
当我拥有整个用户体验时

00:18:08.946 --> 00:18:10.906 A:middle
我就有了整个 Web 视图

00:18:10.906 --> 00:18:12.816 A:middle
然后发送到 Cookie

00:18:13.836 --> 00:18:16.606 A:middle
所以 在嵌入式案例中

00:18:16.606 --> 00:18:18.016 A:middle
如果你的 Web 内容

00:18:18.016 --> 00:18:19.386 A:middle
由不信任的人嵌入

00:18:19.386 --> 00:18:24.266 A:middle
SameSite Cookie 将不会被发送

00:18:24.266 --> 00:18:24.946 A:middle
且你的服务器也能检测到这一点

00:18:25.036 --> 00:18:27.516 A:middle
我没有得到 SameSite Cookie

00:18:27.516 --> 00:18:29.576 A:middle
所以要么是用户没有

00:18:29.576 --> 00:18:31.086 A:middle
登录 要么是我正在被嵌入

00:18:31.086 --> 00:18:34.866 A:middle
我不能允许这样的事发生

00:18:34.866 --> 00:18:36.966 A:middle
比如 一个敏感的处理

00:18:37.886 --> 00:18:40.376 A:middle
所以 要控制

00:18:40.376 --> 00:18:42.826 A:middle
被嵌入 SameSite Cookie

00:18:43.696 --> 00:18:46.336 A:middle
好了 跨域锁定

00:18:46.436 --> 00:18:47.206 A:middle
现在我们来看一看

00:18:47.406 --> 00:18:49.446 A:middle
真正的全新技术

00:18:49.796 --> 00:18:51.706 A:middle
WebKit 首先执行

00:18:51.706 --> 00:18:53.726 A:middle
这两个新的响应头

00:18:54.236 --> 00:18:55.736 A:middle
它们都是关于

00:18:55.736 --> 00:18:57.376 A:middle
限制谁来加载

00:18:57.376 --> 00:18:58.296 A:middle
你的资源

00:18:58.716 --> 00:19:00.686 A:middle
跨域资源策略

00:18:58.716 --> 00:19:00.686 A:middle
跨域资源策略

00:19:02.306 --> 00:19:03.366 A:middle
我们之前提到过

00:19:03.426 --> 00:19:05.446 A:middle
图像和脚本

00:19:05.446 --> 00:19:06.506 A:middle
这两种类型的内容

00:19:06.506 --> 00:19:09.016 A:middle
允许跨源加载

00:19:09.696 --> 00:19:11.006 A:middle
自网络兴起以来

00:19:11.076 --> 00:19:13.006 A:middle
它们就一直存在

00:19:13.006 --> 00:19:17.046 A:middle
因此从来没有一个真正的机制说 嘿

00:19:17.046 --> 00:19:18.586 A:middle
真的不想让其他站点

00:19:18.586 --> 00:19:21.506 A:middle
加载我的脚本或图像

00:19:22.396 --> 00:19:24.966 A:middle
我可以只是自己加载它们吗

00:19:25.806 --> 00:19:27.106 A:middle
不行 我们在网上有这个东西

00:19:27.106 --> 00:19:28.936 A:middle
任何人在任何服务器上

00:19:28.936 --> 00:19:30.166 A:middle
都可以加载图像和脚本

00:19:31.236 --> 00:19:33.146 A:middle
现在 我们提供给你

00:19:33.146 --> 00:19:35.206 A:middle
一个控制器来告诉浏览器

00:19:35.206 --> 00:19:36.326 A:middle
嘿 我不想要这个

00:19:36.496 --> 00:19:39.276 A:middle
这就被称为跨域资源策略

00:19:39.966 --> 00:19:41.576 A:middle
在这个特殊的例子里

00:19:41.626 --> 00:19:43.006 A:middle
我给它的指令

00:19:43.236 --> 00:19:46.446 A:middle
是一样的 意味着只有我自己的网站

00:19:46.966 --> 00:19:47.646 A:middle
可以加载

00:19:47.646 --> 00:19:49.856 A:middle
只有当我的域名是

00:19:49.856 --> 00:19:52.446 A:middle
主页面域并且我拉入

00:19:52.446 --> 00:19:54.386 A:middle
这个图像时 才会将

00:19:54.386 --> 00:19:56.136 A:middle
图像加载到网页内容处理

00:19:56.426 --> 00:19:57.616 A:middle
这里 脚本也是同样的道理

00:19:58.106 --> 00:19:59.776 A:middle
所以 当其他人

00:19:59.776 --> 00:20:01.666 A:middle
尝试跨域加载

00:19:59.776 --> 00:20:01.666 A:middle
尝试跨域加载

00:20:01.666 --> 00:20:03.566 A:middle
你的图像或是脚本

00:20:04.006 --> 00:20:05.346 A:middle
且你正在发送这个响应头时

00:20:05.346 --> 00:20:07.776 A:middle
这些内容将不会被加载

00:20:09.346 --> 00:20:10.426 A:middle
所以 这会让你控制住自己

00:20:10.636 --> 00:20:11.716 A:middle
这是一种新技术

00:20:12.786 --> 00:20:14.596 A:middle
最后 在跨域锁定中

00:20:14.596 --> 00:20:15.736 A:middle
我们获得了

00:20:15.736 --> 00:20:18.046 A:middle
跨域窗口策略

00:20:18.566 --> 00:20:19.696 A:middle
现在我们真的陷入了

00:20:19.696 --> 00:20:21.726 A:middle
早前的旧的 API 中

00:20:22.226 --> 00:20:24.426 A:middle
你可能很熟悉

00:20:24.456 --> 00:20:27.206 A:middle
在一个新窗口打开

00:20:27.236 --> 00:20:28.626 A:middle
其他人的页面

00:20:28.626 --> 00:20:30.246 A:middle
或是你自己的页面

00:20:31.116 --> 00:20:32.736 A:middle
不同于你点击的

00:20:32.736 --> 00:20:34.536 A:middle
常规链接导航

00:20:34.536 --> 00:20:36.696 A:middle
或是在同一选项卡中打开

00:20:36.696 --> 00:20:38.106 A:middle
新标签和导航

00:20:38.196 --> 00:20:39.826 A:middle
而是打开一个全新的窗口

00:20:40.746 --> 00:20:42.356 A:middle
在过去的日子里 我们甚至可以

00:20:42.356 --> 00:20:44.916 A:middle
看到丑陋的弹出窗口

00:20:44.916 --> 00:20:46.866 A:middle
以及这类其他东西

00:20:46.866 --> 00:20:49.896 A:middle
但这是旧的 API

00:20:50.086 --> 00:20:51.016 A:middle
window. Open

00:20:51.616 --> 00:20:53.636 A:middle
而且还有一些奇怪的事情发生

00:20:54.776 --> 00:20:56.936 A:middle
所以 如果你的内容是由

00:20:56.936 --> 00:21:00.016 A:middle
其他人打开的 看起来

00:20:56.936 --> 00:21:00.016 A:middle
其他人打开的 看起来

00:21:00.016 --> 00:21:03.326 A:middle
就像是用户刚刚访问过我的网站

00:21:03.326 --> 00:21:04.936 A:middle
我的 SameSite Cookie 一切正常

00:21:05.606 --> 00:21:07.676 A:middle
但是开启者维护一个操作

00:21:07.676 --> 00:21:10.226 A:middle
并在某种程度上拥有你的

00:21:10.226 --> 00:21:13.176 A:middle
窗口 并拥有特定 API 来

00:21:13.176 --> 00:21:15.356 A:middle
控制该窗口

00:21:15.356 --> 00:21:16.996 A:middle
开启者甚至可以超出你的控制

00:21:16.996 --> 00:21:18.736 A:middle
来导航你的窗口

00:21:20.036 --> 00:21:22.346 A:middle
有了新的响应头

00:21:22.346 --> 00:21:24.356 A:middle
跨域窗口策略

00:21:24.356 --> 00:21:27.076 A:middle
你终于可以对此说不

00:21:27.576 --> 00:21:30.326 A:middle
大部分网站都没有

00:21:30.326 --> 00:21:32.136 A:middle
在开启者拥有的窗口中

00:21:32.136 --> 00:21:33.446 A:middle
实际使用这种 API

00:21:33.446 --> 00:21:35.076 A:middle
以及这类通信方式

00:21:35.076 --> 00:21:36.766 A:middle
网页上看到这种情况是

00:21:36.766 --> 00:21:38.926 A:middle
非常罕见的 但是它确实存在

00:21:38.926 --> 00:21:40.426 A:middle
且在默认情况下是这样工作的

00:21:40.886 --> 00:21:42.496 A:middle
通过发送这个头文件

00:21:42.496 --> 00:21:44.966 A:middle
在这种情况下为拒绝

00:21:44.966 --> 00:21:47.076 A:middle
句柄不应该放在那儿

00:21:47.766 --> 00:21:49.436 A:middle
可以打开 但从这一点来看

00:21:49.436 --> 00:21:51.186 A:middle
你不能控制我

00:21:51.986 --> 00:21:54.166 A:middle
还有一种方式

00:21:54.166 --> 00:21:55.466 A:middle
我不会在这里展示它

00:21:55.466 --> 00:21:57.616 A:middle
但你可以允许发布信息

00:21:58.016 --> 00:22:00.826 A:middle
你可能想在两个窗口之间对话

00:21:58.016 --> 00:22:00.826 A:middle
你可能想在两个窗口之间对话

00:22:01.086 --> 00:22:02.466 A:middle
而不对窗口进行

00:22:02.466 --> 00:22:04.566 A:middle
开启控制 然后

00:22:04.566 --> 00:22:06.156 A:middle
你可以允许发布信息

00:22:07.206 --> 00:22:08.896 A:middle
好的 这也是一项新技术

00:22:08.896 --> 00:22:10.126 A:middle
现在我们已经了解过了

00:22:10.126 --> 00:22:11.416 A:middle
跨域锁定

00:22:12.336 --> 00:22:15.946 A:middle
你可以看到 这并不难

00:22:15.946 --> 00:22:18.326 A:middle
这是一组响应头

00:22:18.326 --> 00:22:19.836 A:middle
这是内容安全策略

00:22:19.836 --> 00:22:22.096 A:middle
可供你将内容列入白名单

00:22:22.096 --> 00:22:24.066 A:middle
这是脚本标记的

00:22:24.066 --> 00:22:26.126 A:middle
完整性属性 或多或少

00:22:26.126 --> 00:22:27.116 A:middle
我们在这里讨论过了

00:22:27.666 --> 00:22:28.926 A:middle
我将会给你一些动力

00:22:29.136 --> 00:22:29.926 A:middle
我们来看一些

00:22:29.926 --> 00:22:30.976 A:middle
攻击场景

00:22:30.976 --> 00:22:32.806 A:middle
你在捍卫什么

00:22:32.806 --> 00:22:34.666 A:middle
如何使这些安全技术

00:22:34.666 --> 00:22:37.256 A:middle
适应这些攻击

00:22:37.256 --> 00:22:38.286 A:middle
接下来我们一起了解一下

00:22:38.286 --> 00:22:39.406 A:middle
跨域攻击

00:22:39.546 --> 00:22:41.396 A:middle
推测执行攻击

00:22:41.666 --> 00:22:43.586 A:middle
有些人可能听说过

00:22:43.586 --> 00:22:45.046 A:middle
幽灵 我们还要

00:22:45.046 --> 00:22:46.596 A:middle
一起了解窗口控制攻击

00:22:47.136 --> 00:22:48.756 A:middle
现在让我们首先深入了解

00:22:48.756 --> 00:22:49.086 A:middle
跨域攻击

00:22:50.066 --> 00:22:51.046 A:middle
我们讨论一下

00:22:51.046 --> 00:22:53.936 A:middle
当 CDN 出现问题时的跨站点脚本

00:22:53.936 --> 00:22:55.586 A:middle
你可以告诉我

00:22:55.696 --> 00:22:56.986 A:middle
要去向哪里 对吧

00:22:57.486 --> 00:22:58.576 A:middle
跨站点请求

00:22:58.576 --> 00:23:01.576 A:middle
伪造跨站点脚本

00:22:58.576 --> 00:23:01.576 A:middle
伪造跨站点脚本

00:23:01.806 --> 00:23:03.876 A:middle
想象一下你建立了一个信息 App

00:23:04.306 --> 00:23:06.346 A:middle
比如 你将其作为一个本地 App

00:23:06.346 --> 00:23:08.066 A:middle
具有丰富的格式化的网页视图

00:23:08.066 --> 00:23:09.706 A:middle
你可能还有一个

00:23:09.706 --> 00:23:11.646 A:middle
配套的网页 App

00:23:11.646 --> 00:23:13.346 A:middle
你或用户可以在

00:23:13.346 --> 00:23:15.216 A:middle
常规网页浏览器中访问

00:23:15.216 --> 00:23:16.906 A:middle
可以把消息发送给对方

00:23:16.906 --> 00:23:18.676 A:middle
并伴随丰富的格式

00:23:19.356 --> 00:23:21.956 A:middle
当然 大多数用户都很友善

00:23:22.176 --> 00:23:23.676 A:middle
友善的人会互相

00:23:23.676 --> 00:23:24.476 A:middle
发送好的信息

00:23:24.926 --> 00:23:26.256 A:middle
他们中有些人讨厌

00:23:26.256 --> 00:23:28.206 A:middle
有人发出令人愤怒的信息

00:23:28.206 --> 00:23:29.996 A:middle
但偶尔这样的情况确有发生

00:23:29.996 --> 00:23:32.166 A:middle
确实会有用户发送

00:23:32.166 --> 00:23:33.076 A:middle
这样的信息

00:23:34.106 --> 00:23:36.066 A:middle
一开始很好 但

00:23:36.286 --> 00:23:37.586 A:middle
当时它包含这标记

00:23:38.396 --> 00:23:40.476 A:middle
而现在 如果你出了差错

00:23:40.476 --> 00:23:42.226 A:middle
无论是在链中

00:23:42.226 --> 00:23:43.936 A:middle
还是在本地 App 的网页视图中

00:23:43.936 --> 00:23:46.626 A:middle
又或是在网站中

00:23:46.626 --> 00:23:48.336 A:middle
它实际上都将会被认为是

00:23:48.336 --> 00:23:50.076 A:middle
标记而不是信息

00:23:50.556 --> 00:23:52.766 A:middle
而攻击者

00:23:52.766 --> 00:23:54.436 A:middle
也就是恶意用户就能够

00:23:54.556 --> 00:23:57.976 A:middle
在接收者的浏览器引擎中

00:23:58.266 --> 00:23:59.036 A:middle
运行脚本

00:23:59.836 --> 00:24:02.326 A:middle
然后试图盗取该用户的 Cookie

00:23:59.836 --> 00:24:02.326 A:middle
然后试图盗取该用户的 Cookie

00:24:02.776 --> 00:24:04.376 A:middle
但请记住 这些脚本

00:24:04.376 --> 00:24:05.726 A:middle
正在全力运行

00:24:05.726 --> 00:24:07.586 A:middle
它们可以接管你整个

00:24:07.716 --> 00:24:09.536 A:middle
用户界面 代表受害者

00:24:09.536 --> 00:24:10.916 A:middle
向你发出请求

00:24:11.916 --> 00:24:13.366 A:middle
比如说 跨站点脚本

00:24:13.366 --> 00:24:15.506 A:middle
就是一个反映不良情况的例子

00:24:15.506 --> 00:24:16.836 A:middle
你不会希望这发生在自己身上

00:24:17.846 --> 00:24:19.976 A:middle
幸运的是 你已经标记了

00:24:19.976 --> 00:24:22.616 A:middle
你的身份验证 Cookie HttpOnly 对吧

00:24:22.976 --> 00:24:25.626 A:middle
所以 它们不适用于

00:24:25.626 --> 00:24:26.546 A:middle
这个恶意脚本

00:24:27.466 --> 00:24:29.306 A:middle
如今 HttpOnly Cookie 不能

00:24:29.306 --> 00:24:31.256 A:middle
保护你免受跨站点脚本攻击

00:24:31.566 --> 00:24:32.626 A:middle
这种脚本仍在运行

00:24:33.376 --> 00:24:36.226 A:middle
HttpOnly Cookie 可以保护的 Cookie

00:24:37.196 --> 00:24:38.216 A:middle
因此 你要做的还有很多

00:24:38.216 --> 00:24:39.926 A:middle
那么你都做了些什么呢

00:24:40.686 --> 00:24:41.926 A:middle
内容安全策略

00:24:42.656 --> 00:24:44.626 A:middle
从默认源自带开始

00:24:44.626 --> 00:24:45.696 A:middle
对吗

00:24:46.036 --> 00:24:48.566 A:middle
只有我可以运行

00:24:48.566 --> 00:24:49.986 A:middle
我页面上的脚本

00:24:50.716 --> 00:24:52.726 A:middle
这意味着在默认情况下

00:24:52.726 --> 00:24:55.416 A:middle
不会有内联脚本

00:24:55.416 --> 00:24:57.466 A:middle
且这类所有错误都会消失

00:24:58.956 --> 00:25:00.966 A:middle
现在没有办法将脚本

00:24:58.956 --> 00:25:00.966 A:middle
现在没有办法将脚本

00:25:00.966 --> 00:25:03.006 A:middle
加入到你的网页中

00:25:03.006 --> 00:25:04.796 A:middle
并让它们执行

00:25:04.796 --> 00:25:06.326 A:middle
因为你在页面设置了策略

00:25:08.326 --> 00:25:12.096 A:middle
好 如果你的 CDN 受到威胁怎么办

00:25:12.526 --> 00:25:14.186 A:middle
这会很糟糕 我们只能希望

00:25:14.186 --> 00:25:17.266 A:middle
它不会发生 但它有可能发生

00:25:17.816 --> 00:25:19.216 A:middle
所以你真的要依靠这个

00:25:19.216 --> 00:25:22.486 A:middle
从 CDN 加载框架

00:25:22.486 --> 00:25:25.406 A:middle
因为它可以执行与你自己脚本

00:25:25.406 --> 00:25:26.516 A:middle
相同的权力

00:25:28.136 --> 00:25:30.016 A:middle
现在 如果它们

00:25:30.016 --> 00:25:31.656 A:middle
已经破解并将脚本请求

00:25:31.656 --> 00:25:33.416 A:middle
重新定向到 evil.example

00:25:33.456 --> 00:25:35.666 A:middle
加载攻击代码怎么办

00:25:36.526 --> 00:25:38.126 A:middle
突然间你感觉自己得到了

00:25:38.126 --> 00:25:40.146 A:middle
一个框架 也许已经好到

00:25:40.146 --> 00:25:41.406 A:middle
足以捆绑在框架结构中

00:25:41.406 --> 00:25:44.156 A:middle
但它仍然做些令人讨厌的事情

00:25:44.866 --> 00:25:46.836 A:middle
那么你该怎么做

00:25:47.546 --> 00:25:49.426 A:middle
在内容安全策略中

00:25:49.426 --> 00:25:50.966 A:middle
将脚本源添加到白名单中

00:25:50.966 --> 00:25:53.626 A:middle
这样浏览器就可以

00:25:53.626 --> 00:25:55.396 A:middle
拒绝执行来自

00:25:55.396 --> 00:25:56.736 A:middle
evil.example 的任何代码

00:25:58.246 --> 00:26:01.026 A:middle
好了 现在攻击者需要

00:25:58.246 --> 00:26:01.026 A:middle
好了 现在攻击者需要

00:26:01.026 --> 00:26:02.586 A:middle
变得更加狡猾

00:26:03.426 --> 00:26:05.066 A:middle
他很可能

00:26:05.126 --> 00:26:07.306 A:middle
会更改 CDN 服务器的脚本

00:26:07.306 --> 00:26:08.796 A:middle
而不是将其重新定向到

00:26:08.936 --> 00:26:10.666 A:middle
evil.example 服务器

00:26:11.206 --> 00:26:12.626 A:middle
所以 它在你的白名单上

00:26:12.626 --> 00:26:15.036 A:middle
你要加载并执行这一脚本

00:26:16.056 --> 00:26:19.256 A:middle
不过 你有子资源完整性

00:26:19.256 --> 00:26:20.566 A:middle
来帮助你

00:26:21.206 --> 00:26:22.576 A:middle
你可以控制

00:26:22.576 --> 00:26:24.356 A:middle
其他服务器脚本

00:26:24.356 --> 00:26:26.126 A:middle
的完整性

00:26:26.806 --> 00:26:28.096 A:middle
如果校验和不匹配

00:26:28.196 --> 00:26:29.566 A:middle
那么你将会从

00:26:29.566 --> 00:26:31.206 A:middle
自己的服务器上加载

00:26:32.186 --> 00:26:33.926 A:middle
因此 这种攻击也失败了

00:26:35.746 --> 00:26:37.566 A:middle
好的 这个就是破解 CDN

00:26:37.756 --> 00:26:39.686 A:middle
最后的跨域

00:26:39.686 --> 00:26:42.736 A:middle
攻击 即跨站点请求伪造

00:26:43.316 --> 00:26:46.206 A:middle
这与最后一个单词相关联即伪造

00:26:46.206 --> 00:26:48.926 A:middle
意思是攻击者

00:26:48.926 --> 00:26:50.936 A:middle
试图伪造一个请求

00:26:50.936 --> 00:26:52.906 A:middle
看起来好像你的

00:26:52.906 --> 00:26:55.156 A:middle
用户正在做些什么

00:26:55.156 --> 00:26:58.046 A:middle
但事实上他们并没有

00:26:59.156 --> 00:27:00.786 A:middle
我们回到信息 App

00:26:59.156 --> 00:27:00.786 A:middle
我们回到信息 App

00:27:01.866 --> 00:27:04.106 A:middle
你拥有这个论坛

00:27:04.106 --> 00:27:06.596 A:middle
可以支持用户发送信息

00:27:06.596 --> 00:27:08.446 A:middle
坦白说 当涉及到它时

00:27:08.446 --> 00:27:10.476 A:middle
它将是 HTTP 请求

00:27:10.746 --> 00:27:12.956 A:middle
可能在 HTTP 邮件中

00:27:12.956 --> 00:27:14.236 A:middle
当消息进入服务器

00:27:14.236 --> 00:27:15.276 A:middle
并查看 Cookie 时

00:27:15.276 --> 00:27:16.946 A:middle
一切看起来都不错 然后

00:27:16.946 --> 00:27:18.766 A:middle
你会将信息发送给

00:27:18.766 --> 00:27:19.776 A:middle
接收者 对吗

00:27:20.666 --> 00:27:21.956 A:middle
那么 现在出现了

00:27:21.956 --> 00:27:24.536 A:middle
恶意攻击者

00:27:24.586 --> 00:27:26.756 A:middle
当然他已经在偷窥你的用户

00:27:26.946 --> 00:27:29.866 A:middle
也就是说他发送了一个链接

00:27:29.866 --> 00:27:31.726 A:middle
并将该用户诱骗到

00:27:31.726 --> 00:27:33.876 A:middle
攻击者的网站 evil.example

00:27:34.526 --> 00:27:36.466 A:middle
并展示一些

00:27:36.466 --> 00:27:38.586 A:middle
非常吸引人的统计数据

00:27:39.336 --> 00:27:41.176 A:middle
这让受害用户

00:27:41.176 --> 00:27:42.566 A:middle
至少在那里待上一段时间

00:27:42.566 --> 00:27:44.326 A:middle
我的意思是你必须查看这些数据

00:27:45.286 --> 00:27:47.176 A:middle
受害者用户

00:27:47.176 --> 00:27:49.326 A:middle
并不知道你的网页内容

00:27:49.486 --> 00:27:51.966 A:middle
存在隐藏的资源负载

00:27:51.966 --> 00:27:55.156 A:middle
代表受害者用户

00:27:55.156 --> 00:27:57.576 A:middle
发送消息

00:27:57.636 --> 00:27:59.226 A:middle
当然也会自动添加

00:27:59.226 --> 00:28:01.556 A:middle
Cookie 这就是网页的工作原理 对吧

00:27:59.226 --> 00:28:01.556 A:middle
Cookie 这就是网页的工作原理 对吧

00:28:01.556 --> 00:28:02.796 A:middle
如果网络上发出请求

00:28:02.796 --> 00:28:04.866 A:middle
则会添加 Cookie

00:28:04.866 --> 00:28:07.086 A:middle
我想你的服务器会看起来像

00:28:07.086 --> 00:28:09.216 A:middle
该用户想要发送信息的样子

00:28:10.096 --> 00:28:11.916 A:middle
那可能是垃圾邮件

00:28:11.916 --> 00:28:14.796 A:middle
或是恶意软件的链接

00:28:15.206 --> 00:28:16.626 A:middle
它可能会和同伴分离

00:28:16.626 --> 00:28:18.986 A:middle
好吧 也许走不了那么远

00:28:18.986 --> 00:28:20.526 A:middle
不过恶意软件

00:28:20.526 --> 00:28:21.606 A:middle
将继续留在那里

00:28:22.296 --> 00:28:25.726 A:middle
所以 你不希望发生这种情况

00:28:25.936 --> 00:28:30.726 A:middle
幸运的是 你已经使用了相同站点 Cookie

00:28:31.376 --> 00:28:33.006 A:middle
它们不会被发送到

00:28:33.006 --> 00:28:34.996 A:middle
嵌入式情况当中 这意味着

00:28:34.996 --> 00:28:37.756 A:middle
你的服务器将会检测到

00:28:37.756 --> 00:28:39.516 A:middle
我被嵌入在这里

00:28:39.826 --> 00:28:42.016 A:middle
我不允许用户从

00:28:42.016 --> 00:28:44.246 A:middle
其他页面下的 iframe

00:28:44.246 --> 00:28:45.256 A:middle
发送消息

00:28:45.626 --> 00:28:47.656 A:middle
当我做这种敏感的事情

00:28:47.656 --> 00:28:49.276 A:middle
比如说发送消息时

00:28:49.276 --> 00:28:51.146 A:middle
我需要得到 UI

00:28:51.146 --> 00:28:52.146 A:middle
否认这一请求

00:28:53.086 --> 00:28:54.496 A:middle
这样 情况就在你掌控之中了

00:28:56.316 --> 00:28:58.326 A:middle
好了 我们现在了解下

00:28:58.326 --> 00:28:59.956 A:middle
跨域攻击 看一看

00:28:59.956 --> 00:29:01.446 A:middle
那些安全机制是

00:28:59.956 --> 00:29:01.446 A:middle
那些安全机制是

00:29:01.446 --> 00:29:02.636 A:middle
如何帮助我们的

00:29:03.026 --> 00:29:04.046 A:middle
我们来看一些

00:29:04.046 --> 00:29:06.166 A:middle
非常奇特 新鲜的东西

00:29:06.386 --> 00:29:08.846 A:middle
幽灵攻击

00:29:08.846 --> 00:29:10.956 A:middle
或预测执行攻击

00:29:11.606 --> 00:29:16.776 A:middle
在这里我想说的是

00:29:16.946 --> 00:29:18.476 A:middle
预测攻击是什么

00:29:19.186 --> 00:29:20.846 A:middle
它如何变成一种

00:29:20.846 --> 00:29:22.336 A:middle
攻击 我们又怎样

00:29:22.336 --> 00:29:24.636 A:middle
去防御它

00:29:25.316 --> 00:29:28.436 A:middle
那么现在 我们深入 CPU

00:29:28.566 --> 00:29:31.246 A:middle
它正在执行代码

00:29:31.646 --> 00:29:33.726 A:middle
它已达到有力条件

00:29:34.276 --> 00:29:36.476 A:middle
它会在条件下进行一些行为

00:29:36.916 --> 00:29:38.756 A:middle
它在问自己 嘿

00:29:38.756 --> 00:29:40.856 A:middle
我这里有个数据索引 x

00:29:41.326 --> 00:29:42.806 A:middle
这个是否正确

00:29:43.226 --> 00:29:46.516 A:middle
在我数据读取的界内还是界外

00:29:47.416 --> 00:29:50.046 A:middle
因为如果是界外

00:29:50.046 --> 00:29:51.516 A:middle
我就会做些错误处理

00:29:51.516 --> 00:29:53.446 A:middle
但如果是界内

00:29:53.446 --> 00:29:54.906 A:middle
我就会继续操作并且

00:29:54.906 --> 00:29:55.756 A:middle
将数据加载到数组中

00:29:57.036 --> 00:30:00.326 A:middle
如今 现代 CPU

00:29:57.036 --> 00:30:00.326 A:middle
如今 现代 CPU

00:30:00.326 --> 00:30:02.156 A:middle
如果一次又一次地看到

00:30:02.156 --> 00:30:05.346 A:middle
相同路径 就会学习吸收

00:30:05.346 --> 00:30:06.696 A:middle
X 总是处于界内状态

00:30:07.356 --> 00:30:09.496 A:middle
加载这个数组 是可以的

00:30:10.406 --> 00:30:11.586 A:middle
为什么我不在

00:30:11.586 --> 00:30:14.516 A:middle
知晓其准确与否之前

00:30:14.516 --> 00:30:15.986 A:middle
先走一步 去推测一下呢

00:30:16.686 --> 00:30:17.816 A:middle
这就是它的工作原理

00:30:18.356 --> 00:30:20.496 A:middle
它执行此代码 以推测方式

00:30:20.496 --> 00:30:22.946 A:middle
获取代码路径

00:30:22.946 --> 00:30:25.066 A:middle
加载数据

00:30:25.066 --> 00:30:26.676 A:middle
在最终答案出现时

00:30:26.676 --> 00:30:28.896 A:middle
在该种情况下 不 这是一种

00:30:28.896 --> 00:30:30.536 A:middle
x 不正常的罕见情况

00:30:30.536 --> 00:30:31.606 A:middle
你不能一直加载

00:30:31.606 --> 00:30:33.886 A:middle
该数据 它会将其备份

00:30:33.886 --> 00:30:37.896 A:middle
并采用正确的代码路径

00:30:38.066 --> 00:30:39.116 A:middle
这怎么办

00:30:39.466 --> 00:30:43.056 A:middle
没关系 因为推测路径没有提交

00:30:43.056 --> 00:30:45.566 A:middle
它只是提前完成

00:30:45.566 --> 00:30:46.806 A:middle
以便我们可以利用

00:30:46.806 --> 00:30:48.896 A:middle
当原始问题

00:30:48.896 --> 00:30:50.786 A:middle
得出最终答案时

00:30:50.786 --> 00:30:52.226 A:middle
我已经完成了

00:30:52.796 --> 00:30:54.546 A:middle
这就是预测执行

00:30:55.626 --> 00:30:57.666 A:middle
那么这是怎样变成攻击的呢

00:30:58.056 --> 00:31:00.876 A:middle
事实证明

00:30:58.056 --> 00:31:00.876 A:middle
事实证明

00:31:01.056 --> 00:31:02.496 A:middle
由推测执行造成的缓存效果

00:31:02.496 --> 00:31:04.936 A:middle
可以通过恶意代码

00:31:04.936 --> 00:31:07.756 A:middle
进行监控 然后

00:31:07.756 --> 00:31:10.036 A:middle
还可以泄漏那些

00:31:10.036 --> 00:31:12.416 A:middle
从来不应该发生过的数据读取

00:31:13.026 --> 00:31:14.606 A:middle
这是界外的 该负载

00:31:14.606 --> 00:31:16.456 A:middle
应该没有发生

00:31:16.456 --> 00:31:18.996 A:middle
但它会影响缓存 并且通过测量

00:31:18.996 --> 00:31:21.116 A:middle
缓存 攻击者可以

00:31:21.116 --> 00:31:22.826 A:middle
泄露那些不应该

00:31:22.826 --> 00:31:23.866 A:middle
被加载的数据

00:31:25.086 --> 00:31:27.396 A:middle
那么这是如何映射到网页内容的呢

00:31:28.046 --> 00:31:29.986 A:middle
还记得同源策略吗

00:31:30.476 --> 00:31:31.636 A:middle
这个东西已经

00:31:31.636 --> 00:31:34.476 A:middle
保护了我们 20 年

00:31:34.476 --> 00:31:36.676 A:middle
确保了一个来源的

00:31:36.676 --> 00:31:37.996 A:middle
主框架不能

00:31:38.026 --> 00:31:39.756 A:middle
进入和读取其他框架的字节

00:31:39.756 --> 00:31:41.916 A:middle
或许是你的嵌入内容

00:31:43.206 --> 00:31:44.496 A:middle
而有了预测执行

00:31:44.496 --> 00:31:46.416 A:middle
攻击 我们就可以不再

00:31:46.416 --> 00:31:47.656 A:middle
依赖于同源策略

00:31:48.766 --> 00:31:50.196 A:middle
现在存在一种资格 那就是

00:31:50.196 --> 00:31:51.576 A:middle
如果你可以运行脚本 并且

00:31:51.576 --> 00:31:53.696 A:middle
你在同一个过程中 与其他内容

00:31:53.696 --> 00:31:55.676 A:middle
一样的网页内容处理过程

00:31:55.676 --> 00:31:57.916 A:middle
那么你就可以

00:31:57.916 --> 00:32:00.276 A:middle
通过预测执行攻击读取内容

00:31:57.916 --> 00:32:00.276 A:middle
通过预测执行攻击读取内容

00:32:01.556 --> 00:32:04.406 A:middle
不过 这对网页来说是个巨大的挑战

00:32:04.696 --> 00:32:05.866 A:middle
我可以告诉你们

00:32:05.866 --> 00:32:08.086 A:middle
我一直在和其他浏览器供应商开会

00:32:08.186 --> 00:32:10.676 A:middle
我们正在努力尝试

00:32:10.676 --> 00:32:12.776 A:middle
试图修复默认情况下的网页

00:32:12.776 --> 00:32:15.076 A:middle
不过我们也需要你们的帮助

00:32:15.796 --> 00:32:17.786 A:middle
如果你可以选择一些东西

00:32:17.826 --> 00:32:19.146 A:middle
我们已经看过

00:32:19.256 --> 00:32:20.666 A:middle
防御机制了 对吧

00:32:20.926 --> 00:32:22.796 A:middle
如果你能选择这些

00:32:22.796 --> 00:32:24.446 A:middle
你可以帮忙告诉我们说

00:32:24.786 --> 00:32:26.146 A:middle
我有敏感内容

00:32:26.366 --> 00:32:28.196 A:middle
我想要获得更好的默认值

00:32:28.196 --> 00:32:30.826 A:middle
你不用为我支持这些遗留的 API

00:32:31.286 --> 00:32:32.536 A:middle
然后我们就可以

00:32:32.536 --> 00:32:34.006 A:middle
更积极地

00:32:34.006 --> 00:32:36.496 A:middle
为你打击预测执行攻击

00:32:37.456 --> 00:32:38.916 A:middle
下面我们看是如何映射的

00:32:39.666 --> 00:32:41.106 A:middle
想要打击

00:32:41.106 --> 00:32:42.536 A:middle
预测执行攻击

00:32:42.536 --> 00:32:44.686 A:middle
你首先要做的是

00:32:44.686 --> 00:32:47.046 A:middle
确保你的网页内容

00:32:47.306 --> 00:32:49.176 A:middle
永远不会像

00:32:49.176 --> 00:32:51.756 A:middle
evil.example 那样在同一个

00:32:51.756 --> 00:32:52.736 A:middle
网页内容处理中结束

00:32:53.316 --> 00:32:54.416 A:middle
如果它们有一个

00:32:54.416 --> 00:32:56.626 A:middle
框架 evil.example 那么就可以

00:32:56.716 --> 00:32:58.186 A:middle
在你网页内容驻留的

00:32:58.186 --> 00:33:00.386 A:middle
过程中执行代码

00:32:58.186 --> 00:33:00.386 A:middle
过程中执行代码

00:33:00.386 --> 00:33:02.646 A:middle
并读取你的字节

00:33:03.436 --> 00:33:04.746 A:middle
因此 我们怎样保证这样的情况

00:33:04.746 --> 00:33:05.326 A:middle
不会发生呢

00:33:06.286 --> 00:33:07.656 A:middle
我们有这些东西

00:33:07.936 --> 00:33:09.836 A:middle
第一个 WKWebView

00:33:10.036 --> 00:33:11.406 A:middle
现在我们正在使用 WebKit

00:33:11.406 --> 00:33:12.616 A:middle
作为框架来查看 App

00:33:13.616 --> 00:33:16.466 A:middle
我正在寻找 Safari

00:33:16.756 --> 00:33:18.046 A:middle
这是一个使用 WKWebView 的

00:33:18.046 --> 00:33:20.216 A:middle
App 的示例

00:33:20.326 --> 00:33:22.386 A:middle
我们有时将其称为

00:33:22.386 --> 00:33:24.306 A:middle
现代 WebKit 它已经

00:33:24.306 --> 00:33:25.596 A:middle
使用了很多年

00:33:25.986 --> 00:33:27.866 A:middle
而且它提供了

00:33:28.096 --> 00:33:29.346 A:middle
很好的优势

00:33:30.096 --> 00:33:32.336 A:middle
例如这三个选项卡

00:33:32.536 --> 00:33:34.296 A:middle
evil.example 你的 Web 内容

00:33:34.296 --> 00:33:36.696 A:middle
还有 webkit.org 都在

00:33:36.696 --> 00:33:39.096 A:middle
单独的网页内容过程里呈现

00:33:40.126 --> 00:33:42.896 A:middle
此外 WKWebView 给你

00:33:43.026 --> 00:33:44.726 A:middle
提供了一个分离的

00:33:44.726 --> 00:33:45.566 A:middle
网络过程

00:33:45.816 --> 00:33:47.436 A:middle
在这里 Cookie 得以添加

00:33:47.436 --> 00:33:51.966 A:middle
HTTP 头能够被解析等等

00:33:54.306 --> 00:33:56.036 A:middle
现在 预测执行攻击

00:33:56.036 --> 00:33:58.346 A:middle
都依赖于在

00:33:58.346 --> 00:34:00.796 A:middle
同一个网页内容过程中

00:33:58.346 --> 00:34:00.796 A:middle
同一个网页内容过程中

00:34:00.796 --> 00:34:02.516 A:middle
进行推测

00:34:02.516 --> 00:34:04.386 A:middle
试图读取

00:34:04.386 --> 00:34:06.246 A:middle
攻击者不应该

00:34:06.246 --> 00:34:07.136 A:middle
读取的内容

00:34:07.136 --> 00:34:08.496 A:middle
如果你把事情

00:34:08.496 --> 00:34:09.956 A:middle
划分成了不同的进程

00:34:10.696 --> 00:34:12.036 A:middle
那这个攻击就不起作用了 对吧

00:34:12.636 --> 00:34:13.956 A:middle
你不能跨进程界限

00:34:14.025 --> 00:34:16.196 A:middle
来进行预测执行攻击

00:34:16.196 --> 00:34:18.286 A:middle
因此这已经成为一种防御措施

00:34:18.286 --> 00:34:20.626 A:middle
防御措施 当然

00:34:20.626 --> 00:34:22.686 A:middl
非常重要的一点是

00:34:22.686 --> 00:34:24.886 A:middle
网页内容进程不能

00:34:24.916 --> 00:34:26.666 A:middle
触及网络进程

00:34:26.666 --> 00:34:28.396 A:middle
不能在这里预测执行攻击

00:34:30.056 --> 00:34:32.076 A:middle
但是如果你仍然在使用

00:34:32.076 --> 00:34:34.396 A:middle
UIWebView 那么

00:34:34.396 --> 00:34:36.196 A:middle
你可能不太对

00:34:37.306 --> 00:34:39.275 A:middle
我们不赞成这版本

00:34:40.485 --> 00:34:42.436 A:middle
现在 假设你有 evil.example

00:34:43.206 --> 00:34:44.686 A:middle
有网页内容

00:34:45.315 --> 00:34:46.686 A:middle
以及网络堆栈

00:34:47.496 --> 00:34:48.826 A:middle
然后你将这些全部

00:34:48.826 --> 00:34:51.946 A:middle
放入你的 App 中

00:34:51.946 --> 00:34:53.596 A:middle
那么从预测执行攻击的角度看

00:34:54.315 --> 00:34:55.505 A:middle
一切都融合在一起

00:34:56.306 --> 00:34:58.346 A:middle
这是完全相同的进程空间

00:34:59.026 --> 00:35:00.666 A:middle
在这种情况下

00:34:59.026 --> 00:35:00.666 A:middle
在这种情况下

00:35:00.666 --> 00:35:03.506 A:middle
没有东西可以防卫预测执行攻击

00:35:04.286 --> 00:35:06.666 A:middle
你需要离开 UIWebView

00:35:07.466 --> 00:35:10.376 A:middle
如果你转移到 WKWebView

00:35:10.376 --> 00:35:12.696 A:middle
你就会得到这个

00:35:12.896 --> 00:35:15.096 A:middle
在 evil.example 内容过程

00:35:15.656 --> 00:35:16.856 A:middle
的进程中

00:35:16.856 --> 00:35:18.676 A:middle
分离和不良情况

00:35:18.796 --> 00:35:19.856 A:middle
不会影响其余部分

00:35:21.266 --> 00:35:23.306 A:middle
我们已经转移到了 WKWebView

00:35:23.656 --> 00:35:24.726 A:middle
让我们来看看

00:35:24.726 --> 00:35:26.996 A:middle
内容安全策略如何帮助你

00:35:27.406 --> 00:35:28.626 A:middle
你可能有一个来自 social.example

00:35:28.626 --> 00:35:29.976 A:middle
的嵌入式小部件

00:35:29.976 --> 00:35:33.166 A:middle
但是另一方面

00:35:33.166 --> 00:35:34.696 A:middle
你也许会得到一个注入式攻击

00:35:34.696 --> 00:35:36.086 A:middle
或许这是又一次的信息传递

00:35:36.086 --> 00:35:38.716 A:middle
人们在信息中发送标记

00:35:38.946 --> 00:35:40.546 A:middle
可以偶尔呈现它

00:35:40.546 --> 00:35:42.516 A:middle
并从 evil.example 中引入 iframe

00:35:43.376 --> 00:35:45.816 A:middle
还有 你可能在这里有一个 AD

00:35:45.816 --> 00:35:47.426 A:middle
你也想让它在这儿

00:35:47.426 --> 00:35:48.676 A:middle
然后 AD Network

00:35:48.676 --> 00:35:50.286 A:middle
破解并重新定向到

00:35:50.286 --> 00:35:52.246 A:middle
evil.example 然后引入一个框架

00:35:52.646 --> 00:35:53.996 A:middle
另外 请牢记 千万不要

00:35:53.996 --> 00:35:55.426 A:middle
与来自 evil.example 的框架

00:35:55.786 --> 00:35:58.876 A:middle
一起在网页内容进程当中

00:35:59.986 --> 00:36:00.866 A:middle
那么 你做了什么

00:35:59.986 --> 00:36:00.866 A:middle
那么 你做了什么

00:36:01.306 --> 00:36:02.616 A:middle
你已经部署了

00:36:02.616 --> 00:36:04.706 A:middle
内容安全策略

00:36:05.016 --> 00:36:07.746 A:middle
并且已经从允许框架的位置

00:36:07.746 --> 00:36:10.316 A:middle
指定了内容

00:36:10.316 --> 00:36:11.176 A:middle
请不要允许 evil.example

00:36:12.386 --> 00:36:14.466 A:middle
这就是你如何防止

00:36:14.466 --> 00:36:16.666 A:middle
意外地从 evil.example 中

00:36:16.666 --> 00:36:19.116 A:middle
获得一个框架的例子

00:36:20.176 --> 00:36:22.286 A:middle
那么 相反

00:36:22.496 --> 00:36:24.796 A:middle
evil.example 能否将你的网页内容

00:36:24.796 --> 00:36:26.996 A:middle
拖入恶意程序呢

00:36:27.876 --> 00:36:28.396 A:middle
答案是肯定的

00:36:29.186 --> 00:36:30.736 A:middle
那么 你该怎样防御呢

00:36:31.546 --> 00:36:32.646 A:middle
我们回到内容安全策略

00:36:32.646 --> 00:36:35.846 A:middle
现在我们看到了框架祖先

00:36:36.016 --> 00:36:37.326 A:middle
这是我之前提到的

00:36:37.566 --> 00:36:39.686 A:middle
内容稍有不同

00:36:40.086 --> 00:36:41.916 A:middle
事实上也可以说没有

00:36:41.916 --> 00:36:44.736 A:middle
这意味着将永远不要对我进行 iframe

00:36:45.546 --> 00:36:47.206 A:middle
这个内容不应发放在

00:36:47.206 --> 00:36:48.486 A:middle
其他人的 iframe 中

00:36:49.006 --> 00:36:49.896 A:middle
这是我的内容

00:36:50.256 --> 00:36:51.896 A:middle
只有我才可以呈现它

00:36:52.636 --> 00:36:54.756 A:middle
所以 如果你放置这个

00:36:55.236 --> 00:36:57.986 A:middle
evil.example 页面

00:36:57.986 --> 00:37:01.126 A:middle
就不能在你的 iframe 中插入内容

00:36:57.986 --> 00:37:01.126 A:middle
就不能在你的 iframe 中插入内容

00:37:01.446 --> 00:37:03.026 A:middle
当然 我们也可以

00:37:03.126 --> 00:37:05.386 A:middle
在网络进程中进行封锁

00:37:05.816 --> 00:37:07.236 A:middle
这很重要 对 因为

00:37:07.426 --> 00:37:08.886 A:middle
预测执行攻击

00:37:08.886 --> 00:37:10.116 A:middle
只能发生在同一进程空间

00:37:10.116 --> 00:37:12.056 A:middle
所以 我们要在

00:37:12.056 --> 00:37:13.336 A:middle
evil.example 可以执行

00:37:13.336 --> 00:37:15.716 A:middle
JavaScript 的位置之前将其切断

00:37:17.336 --> 00:37:19.756 A:middle
HttpOnly Cookie

00:37:19.756 --> 00:37:21.266 A:middle
真的能通过映射

00:37:21.266 --> 00:37:22.226 A:middle
预测执行攻击吗

00:37:22.666 --> 00:37:23.616 A:middle
是的 它们能

00:37:23.886 --> 00:37:25.606 A:middle
它们在这里

00:37:25.606 --> 00:37:27.776 A:middle
比尝试攻击跨站点脚本更重要

00:37:28.456 --> 00:37:31.426 A:middle
为什么 还记得那个旧的 API

00:37:31.426 --> 00:37:33.616 A:middle
document.cookie 是从 JavaScript

00:37:33.616 --> 00:37:35.236 A:middle
中查看 Cookie 的方式吗

00:37:36.076 --> 00:37:37.376 A:middle
既然我们不能 也不可以

00:37:37.376 --> 00:37:38.906 A:middle
再依赖同源策略

00:37:38.906 --> 00:37:41.646 A:middle
evil.example 可以

00:37:41.646 --> 00:37:43.636 A:middle
从你的内容到达 iframe

00:37:43.636 --> 00:37:44.956 A:middle
并实际读取 Cookie

00:37:45.816 --> 00:37:46.676 A:middle
非常糟糕

00:37:47.196 --> 00:37:49.016 A:middle
但是如果你将它们标记为 HttpOnly

00:37:49.516 --> 00:37:51.446 A:middle
WebKit 将确保

00:37:51.546 --> 00:37:52.896 A:middle
将它们保留在网络进程中

00:37:53.256 --> 00:37:54.456 A:middle
我们不需要将它们

00:37:54.456 --> 00:37:55.706 A:middle
移动到网页内容进程中

00:37:55.706 --> 00:37:57.216 A:middle
因为它们不需要在 document.cookie

00:37:57.216 --> 00:37:58.476 A:middle
API 中公开

00:37:59.506 --> 00:38:00.836 A:middle
因此 这会自动保护

00:37:59.506 --> 00:38:00.836 A:middle
因此 这会自动保护

00:38:00.836 --> 00:38:02.596 A:middle
Cookie 反对

00:38:02.596 --> 00:38:03.486 A:middle
预测执行攻击

00:38:04.866 --> 00:38:06.406 A:middle
SameSite Cookie

00:38:06.576 --> 00:38:07.786 A:middle
这基本上能让

00:38:07.786 --> 00:38:09.646 A:middle
你的服务器控制

00:38:09.696 --> 00:38:10.176 A:middle
嵌入式案例

00:38:10.556 --> 00:38:12.306 A:middle
同样 evil.example 已经决定

00:38:12.306 --> 00:38:14.006 A:middle
尝试对你的内容进行一次

00:38:14.046 --> 00:38:15.756 A:middle
预测执行攻击

00:38:16.656 --> 00:38:17.936 A:middle
用你的内容加载一个 iframe

00:38:17.936 --> 00:38:20.306 A:middle
但 SameSite Cookie

00:38:20.306 --> 00:38:22.446 A:middle
没有被发送 这样你的服务器

00:38:22.446 --> 00:38:24.966 A:middle
就会明白 我要在这里嵌入了

00:38:24.966 --> 00:38:25.856 A:middle
而我不允许这样做

00:38:25.886 --> 00:38:27.696 A:middle
那你将会拒绝

00:38:27.696 --> 00:38:29.896 A:middle
整个资源加载服务器端

00:38:31.396 --> 00:38:34.796 A:middle
那不会在 evil.example 进程中结束

00:38:35.656 --> 00:38:37.786 A:middle
最后 打击这些攻击

00:38:38.016 --> 00:38:40.516 A:middle
跨域资源策略

00:38:41.446 --> 00:38:42.806 A:middle
这是我告诉过你的

00:38:42.806 --> 00:38:44.026 A:middle
新头文件 你可以对

00:38:44.316 --> 00:38:46.476 A:middle
网页浏览器引擎说

00:38:46.476 --> 00:38:48.626 A:middle
嘿 图像 脚本以及

00:38:48.626 --> 00:38:49.786 A:middle
其他来自我的服务器的东西

00:38:50.226 --> 00:38:51.736 A:middle
只有我能下载

00:38:52.276 --> 00:38:53.576 A:middle
所以 如果你说 在你的服务器上

00:38:53.576 --> 00:38:55.226 A:middle
将这个头文件发送给

00:38:55.226 --> 00:38:57.446 A:middle
你的图像和脚本 我们将

00:38:57.446 --> 00:38:59.116 A:middle
确保阻止它们被

00:38:59.116 --> 00:39:01.716 A:middle
evil.example 加载

00:38:59.116 --> 00:39:01.716 A:middle
evil.example 加载

00:39:01.716 --> 00:39:02.906 A:middle
我们会在网络进程中

00:39:02.906 --> 00:39:03.866 A:middle
执行这一阻止

00:39:04.186 --> 00:39:06.336 A:middle
同样 给你一个进程分离的

00:39:06.336 --> 00:39:08.406 A:middle
机会 使预测执行攻击

00:39:08.406 --> 00:39:10.676 A:middle
不能读取你的字节

00:39:12.686 --> 00:39:14.976 A:middle
好的 我们来看看

00:39:14.976 --> 00:39:16.366 A:middle
最后的攻击类别

00:39:16.366 --> 00:39:17.466 A:middle
这是一个相当简短的

00:39:17.836 --> 00:39:19.246 A:middle
窗口控制攻击

00:39:20.216 --> 00:39:21.906 A:middle
所以 我们将查看

00:39:21.906 --> 00:39:23.626 A:middle
恶意的窗口导航

00:39:23.786 --> 00:39:24.896 A:middle
有时被称为

00:39:24.936 --> 00:39:26.806 A:middle
标签 然后进行防御

00:39:28.446 --> 00:39:29.466 A:middle
现在 我们再一次回到

00:39:29.466 --> 00:39:31.486 A:middle
evil.example 而不是

00:39:31.486 --> 00:39:33.506 A:middle
嵌入你的内容

00:39:33.506 --> 00:39:36.106 A:middle
因此 window.open 在一个

00:39:36.106 --> 00:39:37.876 A:middle
新的窗口中打开你的内容

00:39:37.876 --> 00:39:38.416 A:middle
你却不知道

00:39:38.416 --> 00:39:39.986 A:middle
是的 你不能决定

00:39:39.986 --> 00:39:41.876 A:middle
好 有人打开了我的网页

00:39:42.066 --> 00:39:44.826 A:middle
SameSite Cookie 可能会发送到这里

00:39:44.826 --> 00:39:46.086 A:middle
你可能以为一切

00:39:46.086 --> 00:39:49.376 A:middle
都很好 但是 evil.example 会等到

00:39:49.376 --> 00:39:52.416 A:middle
你的用户注意力没有

00:39:52.416 --> 00:39:54.856 A:middle
集中在你的页面 然后

00:39:54.856 --> 00:39:57.786 A:middle
使用句柄将它导航到

00:39:57.786 --> 00:40:00.516 A:middle
一个看起来与你页面

00:39:57.786 --> 00:40:00.516 A:middle
一个看起来与你页面

00:40:00.516 --> 00:40:02.646 A:middle
相像的欺诈页面 并要求

00:40:02.646 --> 00:40:04.736 A:middle
用户再次登录

00:40:04.736 --> 00:40:05.906 A:middle
以盗取凭据并将其

00:40:05.906 --> 00:40:07.496 A:middle
发送给攻击者

00:40:08.436 --> 00:40:09.416 A:middle
如果你把控制权

00:40:09.416 --> 00:40:10.756 A:middle
留给了开启者

00:40:10.756 --> 00:40:12.126 A:middle
这种情况就会发生

00:40:13.206 --> 00:40:16.836 A:middle
相反如果你部署跨域窗口策略

00:40:16.836 --> 00:40:19.466 A:middle
拒绝此项操作

00:40:19.466 --> 00:40:21.556 A:middle
那么攻击者页面

00:40:21.556 --> 00:40:24.126 A:middle
将没有处理程序来导航窗口

00:40:24.666 --> 00:40:27.756 A:middle
这就是进攻的最后一道防线

00:40:28.496 --> 00:40:31.046 A:middle
是时候采取行动了

00:40:31.366 --> 00:40:32.656 A:middle
我们回顾一下

00:40:32.656 --> 00:40:34.516 A:middle
在这里说过的

00:40:34.516 --> 00:40:35.656 A:middle
以便于你知道自己

00:40:35.656 --> 00:40:37.956 A:middle
回到办公室或者家中

00:40:37.956 --> 00:40:39.456 A:middle
开始工作时需要做什么

00:40:40.196 --> 00:40:42.926 A:middle
首先 我们必须要保证

00:40:42.926 --> 00:40:43.746 A:middle
这些传输

00:40:44.066 --> 00:40:45.916 A:middle
移动到 HTTPS 和 WSS

00:40:47.206 --> 00:40:49.126 A:middle
你应该有安全的 Cookie

00:40:49.546 --> 00:40:51.916 A:middle
你也要标记它们 HttpOnly

00:40:52.296 --> 00:40:53.966 A:middle
如果你接受瑞典人的建议

00:40:54.246 --> 00:40:55.486 A:middle
只需将你的所有 Cookie

00:40:55.486 --> 00:40:56.716 A:middle
设置为 HttpOnly 并确保安全

00:40:57.806 --> 00:40:59.706 A:middle
你需要从 UIWebView

00:40:59.706 --> 00:41:01.636 A:middle
迁移到 WKWebview

00:40:59.706 --> 00:41:01.636 A:middle
迁移到 WKWebview

00:41:02.046 --> 00:41:03.076 A:middle
这些是基础

00:41:03.786 --> 00:41:05.216 A:middle
然后我们就有了

00:41:05.216 --> 00:41:07.006 A:middle
我们一直在进行的防御机制

00:41:07.386 --> 00:41:09.386 A:middle
内容安全策略将

00:41:09.386 --> 00:41:11.956 A:middle
帮助你在这里进行跨站点

00:41:11.956 --> 00:41:13.236 A:middle
脚本和预测

00:41:13.236 --> 00:41:14.276 A:middle
执行攻击

00:41:16.266 --> 00:41:17.686 A:middle
HttpOnly Cookie 将为你提供

00:41:17.746 --> 00:41:19.706 A:middle
对跨站点脚本的某种保护

00:41:19.706 --> 00:41:20.826 A:middle
这意味着

00:41:20.906 --> 00:41:22.526 A:middle
脚本不能窃取 Cookie

00:41:22.526 --> 00:41:24.306 A:middle
但它肯定会

00:41:24.306 --> 00:41:26.026 A:middle
帮助你抵御

00:41:26.026 --> 00:41:27.586 A:middle
预测执行攻击

00:41:27.626 --> 00:41:29.616 A:middle
因为 HttpOnly Cookie

00:41:29.756 --> 00:41:31.236 A:middle
被完全保存在网络进程中

00:41:33.286 --> 00:41:34.446 A:middle
子资源完整性

00:41:34.876 --> 00:41:36.036 A:middle
这就是抵御

00:41:36.436 --> 00:41:37.896 A:middle
受损 CDN 的方式

00:41:38.306 --> 00:41:40.246 A:middle
有人正在你的

00:41:40.246 --> 00:41:42.346 A:middle
页面上执行你从未想过的代码

00:41:44.576 --> 00:41:47.176 A:middle
SameSite Cookie 这是一种

00:41:47.176 --> 00:41:49.766 A:middle
打击伪造请求的方法

00:41:49.816 --> 00:41:51.936 A:middle
为了对付某些钓鱼页面

00:41:52.026 --> 00:41:52.816 A:middle
隐藏到你的服务器上

00:41:52.906 --> 00:41:54.456 A:middle
你会知道 因为

00:41:54.456 --> 00:41:56.036 A:middle
当你被嵌入时

00:41:56.036 --> 00:41:57.496 A:middle
不会发送 SameSite Cookie 所以你

00:41:57.496 --> 00:41:59.336 A:middle
不用接受请求

00:42:00.236 --> 00:42:01.376 A:middle
它也发生在抵御

00:42:01.426 --> 00:42:02.946 A:middle
预测执行攻击上

00:42:03.236 --> 00:42:04.976 A:middle
因为如果一个恶意页面

00:42:04.976 --> 00:42:06.606 A:middle
试图吸入你的资源

00:42:06.606 --> 00:42:08.476 A:middle
以便能够利用对它们的攻击

00:42:08.476 --> 00:42:10.616 A:middle
那么同样 SameSite Cookie

00:42:10.616 --> 00:42:11.976 A:middle
将不会被发送 你也可以

00:42:11.976 --> 00:42:12.916 A:middle
拒绝加载

00:42:13.486 --> 00:42:15.506 A:middle
然后我们了解了这些新

00:42:15.506 --> 00:42:18.216 A:middle
技术 即跨域资源策略

00:42:18.786 --> 00:42:20.996 A:middle
你可以说

00:42:20.996 --> 00:42:23.366 A:middle
这是图像 脚本和其他

00:42:23.366 --> 00:42:25.556 A:middle
跨域加载的方式 拒绝它们

00:42:25.556 --> 00:42:27.996 A:middle
只需加载到我的页面上

00:42:28.506 --> 00:42:32.306 A:middle
最后 控制窗口是为了确保

00:42:32.306 --> 00:42:34.686 A:middle
如果其他人

00:42:34.686 --> 00:42:36.556 A:middle
在自己的窗口中打开网页内容

00:42:36.556 --> 00:42:37.136 A:middle
该句柄就会消失

00:42:40.286 --> 00:42:41.786 A:middle
这些都是很容易采用的

00:42:42.246 --> 00:42:44.266 A:middle
尤其是对你来说

00:42:44.386 --> 00:42:45.826 A:middle
你了解你的网站

00:42:45.826 --> 00:42:47.106 A:middle
知道你的网站内容

00:42:47.106 --> 00:42:48.176 A:middle
了解 App 知道它们该

00:42:48.176 --> 00:42:49.096 A:middle
如何工作

00:42:49.316 --> 00:42:50.586 A:middle
如果我们只为所有人

00:42:50.586 --> 00:42:51.906 A:middle
默认打开它

00:42:51.906 --> 00:42:53.796 A:middle
它可能会破坏一些东西

00:42:53.796 --> 00:42:56.246 A:middle
所以你需要选择这个

00:42:56.326 --> 00:42:58.076 A:middle
通过选择方法

00:42:58.076 --> 00:42:59.266 A:middle
你应该检查安全性

00:42:59.266 --> 00:43:01.356 A:middle
是否正常工作你可以尝试

00:42:59.266 --> 00:43:01.356 A:middle
是否正常工作你可以尝试

00:43:01.356 --> 00:43:02.286 A:middle
对自己的内容进行攻击

00:43:02.286 --> 00:43:05.006 A:middle
确保我的内容安全策略

00:43:05.006 --> 00:43:06.846 A:middle
能够保护我 很好

00:43:06.846 --> 00:43:09.706 A:middle
当然还要测试本就存在的功能

00:43:11.826 --> 00:43:12.526 A:middle
我们有一个博客

00:43:12.786 --> 00:43:14.286 A:middle
WebKit 项目是一个

00:43:14.286 --> 00:43:15.016 A:middle
公开资源的项目

00:43:15.276 --> 00:43:16.576 A:middle
我们有一个博客来

00:43:16.576 --> 00:43:17.856 A:middle
讨论这些技术

00:43:17.856 --> 00:43:18.596 A:middle
和其他事情

00:43:18.966 --> 00:43:20.536 A:middle
这是我们将在

00:43:20.536 --> 00:43:22.446 A:middle
这两个最后响应头上更新的地方

00:43:22.786 --> 00:43:24.626 A:middle
跨域资源策略

00:43:24.626 --> 00:43:26.296 A:middle
和跨域窗口策略

00:43:26.656 --> 00:43:28.156 A:middle
因为我们仍在与

00:43:28.156 --> 00:43:29.276 A:middle
其他浏览器

00:43:29.276 --> 00:43:30.786 A:middle
供应商讨论这些问题 试图确保

00:43:30.786 --> 00:43:32.106 A:middle
它们是标准的

00:43:32.436 --> 00:43:34.316 A:middle
以便相同的响应头

00:43:34.316 --> 00:43:35.756 A:middle
在所有浏览器上有效运行

00:43:36.296 --> 00:43:37.896 A:middle
因此 可能会有轻微的

00:43:37.896 --> 00:43:40.656 A:middle
名称更改或添加的属性

00:43:40.656 --> 00:43:42.076 A:middle
但我们目前还没有

00:43:42.586 --> 00:43:44.736 A:middle
此外 它很新

00:43:44.736 --> 00:43:46.016 A:middle
所以你实际上无法进入

00:43:46.016 --> 00:43:48.936 A:middle
直到有种子二或公共种子

00:43:49.476 --> 00:43:51.326 A:middle
我们还没有完全支持

00:43:51.326 --> 00:43:53.336 A:middle
开发人员的种子

00:43:55.486 --> 00:43:56.946 A:middle
我再推荐一下其他的会议

00:43:57.096 --> 00:43:58.456 A:middle
请来看我们 包括我

00:43:58.456 --> 00:44:00.266 A:middle
明天在 2:00 在 Safari WebKit

00:43:58.456 --> 00:44:00.266 A:middle
明天在 2:00 在 Safari WebKit

00:44:00.266 --> 00:44:02.546 A:middle
和密码自动填充实验室

00:44:02.546 --> 00:44:04.256 A:middle
你可以到那里

00:44:04.256 --> 00:44:06.396 A:middle
与我或我的同事讨论

00:44:06.396 --> 00:44:07.766 A:middle
如何部署这些技术

00:44:07.766 --> 00:44:09.266 A:middle
让他们更好的为你服务

00:44:09.966 --> 00:44:11.116 A:middle
周五还有一个会议

00:44:11.116 --> 00:44:13.336 A:middle
一个关于

00:44:13.336 --> 00:44:16.676 A:middle
Safari 和 WebKit 中新内容的综合会议 谢谢

00:44:17.516 --> 00:44:22.500 A:middle
［ 掌声 ］
