WEBVTT

00:00:17.985 --> 00:00:20.020 align:middle line:0
（app内购买项目的
最佳实践与新特性）

00:00:20.087 --> 00:00:20.921 align:middle line:0
(演讲704)

00:00:21.421 --> 00:00:22.289 align:middle line:-1
下午好

00:00:27.261 --> 00:00:30.130 align:middle line:-2
欢迎来听“app内购买项目的
最佳实践与新特性”演讲

00:00:30.197 --> 00:00:33.567 align:middle line:-2
我叫Dana DuBois
我是App Store工程经理

00:00:34.368 --> 00:00:36.436 align:middle line:0
app内购买项目是
App Store中许多app

00:00:36.503 --> 00:00:39.339 align:middle line:0
开展业务的必要组成部分

00:00:39.773 --> 00:00:42.643 align:middle line:0
不管你是有订阅模型 可能是

00:00:42.709 --> 00:00:48.182 align:middle line:-2
视频流服务或是报纸、杂志订阅
或者是你提供

00:00:48.582 --> 00:00:52.452 align:middle line:-2
用户可以重复购买的消耗性产品
像是游戏内货币

00:00:52.653 --> 00:00:53.820 align:middle line:-1
或是一些非消耗性产品

00:00:53.887 --> 00:00:57.457 align:middle line:-1
用户只要买一次就可以一直用

00:00:58.125 --> 00:01:01.395 align:middle line:-1
将用户体验搞好是很重要的

00:00:58.125 --> 00:01:01.395 align:middle line:-1
将用户体验搞好是很重要的

00:01:02.262 --> 00:01:04.031 align:middle line:-1
毕竟这是你的生意

00:01:05.432 --> 00:01:07.901 align:middle line:-1
我们会介绍一些不错的实践方法

00:01:07.968 --> 00:01:09.970 align:middle line:-1
来帮助你提升用户体验

00:01:10.204 --> 00:01:12.639 align:middle line:-1
我们还会介绍一些我们一直在做的

00:01:13.106 --> 00:01:15.242 align:middle line:-1
致力于提升用户体验的内容

00:01:18.512 --> 00:01:21.381 align:middle line:-1
首先我要请同事Ross上台来

00:01:21.448 --> 00:01:22.950 align:middle line:-1
请他来介绍下推广性定价

00:01:23.016 --> 00:01:25.786 align:middle line:-1
这是我们去年十二月发布的一个功能

00:01:25.853 --> 00:01:28.956 align:middle line:-1
它可以帮助你吸引新用户

00:01:29.823 --> 00:01:32.960 align:middle line:-2
我会介绍下
App Store中的试用功能

00:01:34.361 --> 00:01:35.996 align:middle line:-1
我们会介绍评分与评价

00:01:36.063 --> 00:01:40.200 align:middle line:-2
及如何让用户到App Store
对你的app进行反馈

00:01:41.101 --> 00:01:42.803 align:middle line:-1
我会介绍你该如何使用

00:01:42.870 --> 00:01:47.941 align:middle line:-2
Apple App Store沙盒环境
测试你的app内购买项目

00:01:48.976 --> 00:01:52.379 align:middle line:-2
Ross会回来给你们介绍
有关交易处理的内容

00:01:52.446 --> 00:01:54.948 align:middle line:-2
在这个时候你会实际购买
app内购买项目

00:01:56.517 --> 00:02:00.354 align:middle line:-2
最后我会给你们概述
app内收据的内容

00:01:56.517 --> 00:02:00.354 align:middle line:-2
最后我会给你们概述
app内收据的内容

00:02:01.688 --> 00:02:04.525 align:middle line:-1
首先让我的同事Ross来介绍

00:02:06.994 --> 00:02:07.828 align:middle line:-1
谢谢 Dana

00:02:09.663 --> 00:02:12.766 align:middle line:-2
在iOS 11.2和
macOS 10.13.2中

00:02:13.100 --> 00:02:16.203 align:middle line:-2
我们向app内购买的订阅中
添加了推广性定价功能

00:02:17.104 --> 00:02:20.174 align:middle line:-2
你可以给新订阅者
一个一次性的折扣

00:02:21.508 --> 00:02:23.544 align:middle line:-2
我们在App Store
Connect中设置推广性定价

00:02:24.912 --> 00:02:28.282 align:middle line:-2
而且每个订阅
同时只能有一个推广性定价

00:02:29.183 --> 00:02:31.752 align:middle line:-2
当有合格的用户
购买你app中的订阅时

00:02:32.953 --> 00:02:35.422 align:middle line:-2
App Store
会自动使用这个折扣

00:02:36.456 --> 00:02:38.659 align:middle line:-1
根据订阅群组 每个用户

00:02:39.159 --> 00:02:40.294 align:middle line:-1
都会符合一个单独的推广性定价

00:02:40.761 --> 00:02:41.995 align:middle line:-1
我会在晚些时候进行介绍

00:02:44.097 --> 00:02:45.365 align:middle line:-1
除了推广性定价

00:02:45.799 --> 00:02:47.868 align:middle line:-2
我们还在StoreKit中
加了几个新类型和属性

00:02:49.369 --> 00:02:52.172 align:middle line:-2
这些API反应了你在App Store
Connect中所设置的数据

00:02:53.207 --> 00:02:55.375 align:middle line:-1
你可以使用它们格式化你的用户界面

00:02:55.442 --> 00:02:57.878 align:middle line:-1
给你的用户显示订阅条款

00:02:58.645 --> 00:03:02.216 align:middle line:-2
还可以决定哪些用户
是有资格使用推广性定价的

00:02:58.645 --> 00:03:02.216 align:middle line:-2
还可以决定哪些用户
是有资格使用推广性定价的

00:03:04.117 --> 00:03:04.952 align:middle line:-1
例如

00:03:05.919 --> 00:03:07.454 align:middle line:-2
当你对一个促销的app内购买项目
设定推广性定价时

00:03:07.521 --> 00:03:10.557 align:middle line:-1
App Store看起来是这样的

00:03:11.692 --> 00:03:13.427 align:middle line:-1
你们会发现 它很清晰自然地

00:03:13.694 --> 00:03:15.929 align:middle line:-1
将订阅的条款介绍给了用户

00:03:16.396 --> 00:03:20.434 align:middle line:-2
第一年是19.99
以后每年是39.99

00:03:21.835 --> 00:03:22.769 align:middle line:-1
推广性定价对于

00:03:22.836 --> 00:03:25.239 align:middle line:-2
促进你app内购买项目的销售
也有很大益处

00:03:25.572 --> 00:03:27.908 align:middle line:-2
用户甚至能在安装你的app前
就能看到折扣

00:03:29.910 --> 00:03:32.746 align:middle line:-2
今天我会和你们谈谈这些新API
并且看看

00:03:32.813 --> 00:03:34.615 align:middle line:-1
有哪些办法可以设置推广性定价

00:03:37.818 --> 00:03:40.687 align:middle line:-2
首先在SKProduct上
有个新属性

00:03:40.888 --> 00:03:43.524 align:middle line:-2
恰如其分地叫
introductoryPrice

00:03:44.391 --> 00:03:46.760 align:middle line:-2
有个新的类叫做
SKProductDiscount

00:03:47.628 --> 00:03:50.397 align:middle line:-2
这个类包含了所有你需要用来
设置推广价的信息

00:03:51.632 --> 00:03:53.133 align:middle line:-1
如你所见 这是个可选的属性

00:03:53.200 --> 00:03:56.136 align:middle line:-1
那是因为只有订阅才有推广价

00:03:56.403 --> 00:03:58.005 align:middle line:-1
而且不是所有的订阅都有推广价

00:03:59.406 --> 00:04:00.908 align:middle line:-2
让我们来仔细看下
SKProductDiscount

00:03:59.406 --> 00:04:00.908 align:middle line:-2
让我们来仔细看下
SKProductDiscount

00:04:03.944 --> 00:04:05.913 align:middle line:-1
反映了你所设置的

00:04:05.979 --> 00:04:08.382 align:middle line:-2
在App Store Connect中
关于推广价的数据

00:04:09.550 --> 00:04:12.653 align:middle line:-2
它有price
和priceLocale属性 这些属性

00:04:12.719 --> 00:04:15.489 align:middle line:-2
与SKProduct中
你所熟悉的同名属性有相似性

00:04:17.891 --> 00:04:19.660 align:middle line:-2
还有个
subscriptionPeriod属性

00:04:20.394 --> 00:04:23.030 align:middle line:-2
这是个叫
SKProductSubscriptionPeriod的新类

00:04:24.064 --> 00:04:26.733 align:middle line:-1
它反映了关于推广价付款和续费

00:04:26.800 --> 00:04:27.935 align:middle line:-1
的全部数据

00:04:29.536 --> 00:04:31.205 align:middle line:-1
它是通过自己的两个属性来实现的

00:04:32.139 --> 00:04:35.809 align:middle line:-2
第一个属性是Unit
这是枚举 可以是天、星期、月或年

00:04:37.477 --> 00:04:38.846 align:middle line:-2
第二个属性是
numberOfUnits

00:04:39.313 --> 00:04:44.885 align:middle line:-2
例如 如果你有一个月的Unit
还有两个numberOfUnits

00:04:45.419 --> 00:04:47.888 align:middle line:-2
这就意味着推广价
会每两个月续费一次

00:04:50.424 --> 00:04:53.560 align:middle line:-2
在SKProductDiscount上
也有一个numberOfPeriods属性

00:04:54.962 --> 00:04:56.964 align:middle line:-1
它反映了推广价有效的

00:04:57.030 --> 00:04:58.665 align:middle line:-1
订阅周期数

00:04:59.633 --> 00:05:01.969 align:middle line:-1
比方说 你有个两个月的推广价

00:04:59.633 --> 00:05:01.969 align:middle line:-1
比方说 你有个两个月的推广价

00:05:02.035 --> 00:05:03.303 align:middle line:-1
周期数为3

00:05:03.637 --> 00:05:06.306 align:middle line:-2
这就意味着
该推广价总共六个月有效

00:05:10.043 --> 00:05:14.248 align:middle line:-2
最后在SKProductDiscount上
有个PaymentMode属性

00:05:15.215 --> 00:05:17.751 align:middle line:-1
这个新的枚举有三个值

00:05:19.186 --> 00:05:20.454 align:middle line:-1
第一个值是payAsYouGo

00:05:21.688 --> 00:05:23.156 align:middle line:-1
这就像是个普通的订阅

00:05:23.524 --> 00:05:25.559 align:middle line:-1
用户在每个续费周期只付一次款

00:05:27.327 --> 00:05:29.396 align:middle line:-1
而这些订阅的续费周期必须跟

00:05:29.463 --> 00:05:31.265 align:middle line:-1
你所设置的基本订阅推广价

00:05:31.331 --> 00:05:32.699 align:middle line:-1
的续费周期相一致

00:05:33.267 --> 00:05:36.103 align:middle line:-1
如果你有个一个月长的订阅

00:05:36.370 --> 00:05:39.273 align:middle line:-1
你就不能在这里设置两周长的推广价

00:05:40.874 --> 00:05:43.477 align:middle line:-2
你可以使用这些类型的推广价
来向你的用户提供

00:05:43.544 --> 00:05:46.980 align:middle line:-1
更长 更提前 没有分歧的推广期

00:05:48.348 --> 00:05:52.786 align:middle line:-1
例如 如果你有个三个月的续订

00:05:53.554 --> 00:05:54.922 align:middle line:-1
需要付9.99

00:05:55.822 --> 00:05:57.658 align:middle line:-1
你就可以设置一个6个月的推广价

00:05:58.258 --> 00:06:00.527 align:middle line:-1
一共续费两次 每次1.99

00:05:58.258 --> 00:06:00.527 align:middle line:-1
一共续费两次 每次1.99

00:06:02.663 --> 00:06:06.667 align:middle line:-1
付费期看起来是这样的 用户购买了

00:06:06.733 --> 00:06:11.104 align:middle line:-2
推广价为1.99的订阅
他会收到三个月的访问权限

00:06:11.738 --> 00:06:15.609 align:middle line:-2
到期后他们可以
再以1.99续费三个月

00:06:17.344 --> 00:06:18.212 align:middle line:-1
在那之后 他们会

00:06:18.278 --> 00:06:20.881 align:middle line:-2
以9.99的常规订阅条款
来续费三个月

00:06:23.684 --> 00:06:25.719 align:middle line:-2
在本例中 来自StoreKit的
数据看上去是这样的

00:06:26.954 --> 00:06:29.189 align:middle line:-2
你能看到subscriptionPeriod
的单位是月

00:06:29.857 --> 00:06:32.659 align:middle line:-2
而单位数为三
所以它会每三个月续费一次

00:06:33.393 --> 00:06:34.528 align:middle line:-1
而周期数为2

00:06:34.595 --> 00:06:36.496 align:middle line:-1
这样我们就有总共六个月的推广期了

00:06:38.265 --> 00:06:39.433 align:middle line:-1
付款模式是即买即用

00:06:39.800 --> 00:06:42.302 align:middle line:-1
推广价是1.99

00:06:45.873 --> 00:06:47.908 align:middle line:-2
接下来的付款模式是
payUpFront

00:06:49.877 --> 00:06:52.346 align:middle line:-2
这类的推广价就是
用户只需要付一次款

00:06:52.412 --> 00:06:54.181 align:middle line:-1
就可以收到整个的推广期订阅

00:06:55.782 --> 00:06:58.785 align:middle line:-1
这并不限于你的多个订阅续费期

00:06:59.152 --> 00:07:02.523 align:middle line:-2
在本例中
你能有个一年的续费订阅

00:06:59.152 --> 00:07:02.523 align:middle line:-2
在本例中
你能有个一年的续费订阅

00:07:02.756 --> 00:07:04.591 align:middle line:-1
并提供一个月的推广价

00:07:07.060 --> 00:07:08.595 align:middle line:-1
拿我们前面的例子来说

00:07:09.062 --> 00:07:11.231 align:middle line:-1
我们有个三个月的自动续费订阅

00:07:12.633 --> 00:07:15.869 align:middle line:-2
这次我们提供一个
六个月推广价的提前付款方案

00:07:18.071 --> 00:07:21.608 align:middle line:-2
你要付3.99
就跟上例的总体花费是相同的

00:07:21.875 --> 00:07:25.946 align:middle line:-2
但这次用户提前付3.99
就可以收到整个六个月的订阅

00:07:27.514 --> 00:07:30.217 align:middle line:-2
在那之后
我们会每三个月以9.99

00:07:30.751 --> 00:07:32.519 align:middle line:-1
这个常规订阅条款来续费

00:07:35.789 --> 00:07:37.724 align:middle line:-2
StoreKit中的数据
在本例中看起来是这样的

00:07:38.358 --> 00:07:40.294 align:middle line:-1
订阅周期的单位还是月

00:07:40.360 --> 00:07:42.095 align:middle line:-1
但这次我们有六个单位

00:07:42.596 --> 00:07:44.298 align:middle line:-1
而周期数是1

00:07:44.364 --> 00:07:46.166 align:middle line:-1
因为这是个提前付款的推广价

00:07:51.171 --> 00:07:52.973 align:middle line:-2
最后一个付款模式是
freeTrial

00:07:54.274 --> 00:07:56.243 align:middle line:-2
它跟老的freeTrial
功能是一样的

00:07:56.677 --> 00:07:59.079 align:middle line:-2
用户不需要付款
就能收到整个推广周期

00:08:00.414 --> 00:08:03.851 align:middle line:-1
它在从三天到一年的范围都是可用的

00:08:08.055 --> 00:08:08.889 align:middle line:-1
抱歉

00:08:10.657 --> 00:08:13.260 align:middle line:-2
在iOS 12
和macOS 10.13.2中

00:08:14.728 --> 00:08:17.698 align:middle line:-2
我们向SKProduct添加了
subscriptionPeriod属性

00:08:18.866 --> 00:08:20.934 align:middle line:-2
这样你就可以访问
你所有自动续费订阅

00:08:21.235 --> 00:08:22.803 align:middle line:-1
付款和续费条款

00:08:22.870 --> 00:08:24.238 align:middle line:-1
不仅仅是推广价

00:08:26.507 --> 00:08:28.775 align:middle line:-2
我们在iOS 12
和macOS 10.14中

00:08:29.476 --> 00:08:31.245 align:middle line:-1
还向SKProduct加入了

00:08:31.311 --> 00:08:32.212 align:middle line:-1
subscriptionGroupIdentifier

00:08:34.414 --> 00:08:37.150 align:middle line:-1
这很重要 因为推广性定价的资格

00:08:37.217 --> 00:08:39.886 align:middle line:-2
是基于订阅群组的
而不是订阅本身

00:08:41.154 --> 00:08:44.858 align:middle line:-2
每个用户对应一个订阅群组的
一个推广价就是合格的

00:08:46.326 --> 00:08:49.096 align:middle line:-1
这是因为订阅群组就是要为

00:08:49.162 --> 00:08:52.299 align:middle line:-2
不同的续费期和价格点
提供相同的功能或内容

00:08:52.499 --> 00:08:56.069 align:middle line:-2
例如 许多app为相同的内容
提供了年度和月度的选项

00:08:56.136 --> 00:08:59.139 align:middle line:-1
而年度的会随着时间加长更便宜些

00:09:00.307 --> 00:09:03.043 align:middle line:-1
用户如果为相同的内容

00:09:03.110 --> 00:09:06.079 align:middle line:-1
收到月度和年度的推广价是不合理的

00:09:09.683 --> 00:09:12.519 align:middle line:0
由于推广价是在购买的时候
由App Store自动应用的

00:09:12.586 --> 00:09:14.655 align:middle line:0
你的app

00:09:14.721 --> 00:09:17.858 align:middle line:0
要在显示价格时正确地决定
用户是不是有资格

00:09:19.359 --> 00:09:21.094 align:middle line:0
关于决定资格的更多信息

00:09:21.695 --> 00:09:23.463 align:middle line:0
你可以听下“工程订阅”这个演讲

00:09:23.530 --> 00:09:25.532 align:middle line:0
就在本场演讲结束后的三点开始

00:09:27.401 --> 00:09:30.070 align:middle line:-2
现在有了这些新API
你就可以访问所有

00:09:30.137 --> 00:09:32.306 align:middle line:-2
你在App Store Connect中
所设置的关于你订阅的信息

00:09:32.639 --> 00:09:34.374 align:middle line:-2
这样你的app不需要更新二进制
或是你的服务器代码

00:09:34.608 --> 00:09:36.677 align:middle line:-1
就可以反映出你所做出的任何变化

00:09:38.612 --> 00:09:42.082 align:middle line:0
我想请Dana回到台上来
向你们介绍一些提示和改进

00:09:47.521 --> 00:09:48.355 align:middle line:-1
谢谢 Ross

00:09:49.590 --> 00:09:53.994 align:middle line:-1
如果你的商业模型是订阅的话

00:09:54.795 --> 00:09:56.430 align:middle line:-2
推广性定价
是个不错的方法来吸引新用户

00:09:57.664 --> 00:10:01.235 align:middle line:-1
但是如果你的app和商业模型

00:09:57.664 --> 00:10:01.235 align:middle line:-1
但是如果你的app和商业模型

00:10:01.435 --> 00:10:03.036 align:middle line:-1
不适合开展订阅服务呢？

00:10:03.937 --> 00:10:07.608 align:middle line:-2
从今天开始
我们很激动地宣布

00:10:07.674 --> 00:10:11.044 align:middle line:-2
你可以为没有订阅的app
提供免费试用了

00:10:12.045 --> 00:10:15.482 align:middle line:-1
你可以在购买前先试用一下

00:10:17.351 --> 00:10:18.585 align:middle line:-1
你要如何实现呢？

00:10:19.720 --> 00:10:26.026 align:middle line:-2
你要把你提前付款的app做成
免费的 放到App Store上

00:10:26.894 --> 00:10:30.597 align:middle line:-2
然后你要添加一个解锁用的
非消耗性app内购买项目

00:10:30.664 --> 00:10:32.733 align:middle line:-2
若我的app在App Store
标价9.99

00:10:32.799 --> 00:10:37.104 align:middle line:-2
你就要将这个非消耗性的
app内购买项目定价为9.99

00:10:38.238 --> 00:10:42.209 align:middle line:-2
重要的是 你要让用户自己决定
什么时候开始试用期

00:10:42.276 --> 00:10:44.211 align:middle line:-1
要这么做的话 你需要再做一个

00:10:44.278 --> 00:10:48.615 align:middle line:-2
0级价位的
非消耗性app内购买项目

00:10:48.682 --> 00:10:51.218 align:middle line:-1
这是个免费的非消耗性内容

00:10:52.019 --> 00:10:54.955 align:middle line:-1
用户可以用它来开始试用期

00:10:56.490 --> 00:10:59.660 align:middle line:-1
该免费非消耗性内容的命名规范

00:11:00.093 --> 00:11:04.031 align:middle line:-1
要详细说明推广期有多长

00:11:04.097 --> 00:11:06.400 align:middle line:-1
在本例中 是14天试用

00:11:08.101 --> 00:11:12.806 align:middle line:-2
在用户开始他们的使用之前
他们应该从你app的用户界面中

00:11:13.073 --> 00:11:15.809 align:middle line:-1
清楚地知道试用期有多长

00:11:17.177 --> 00:11:21.615 align:middle line:0
在免费试用结束时
最后解锁要花多少钱

00:11:22.316 --> 00:11:26.587 align:middle line:0
最后还有就是
如果他们让免费试用过期

00:11:26.854 --> 00:11:31.058 align:middle line:0
并且不购买完全解锁的话
会失去什么功能或内容

00:11:31.291 --> 00:11:33.227 align:middle line:0
该信息需要被提前呈现出来

00:11:33.894 --> 00:11:36.129 align:middle line:-1
它会让你对变化有个快速了解

00:11:36.196 --> 00:11:37.898 align:middle line:-2
我会在介绍收据的时候
讲一下

00:11:37.965 --> 00:11:40.267 align:middle line:-1
应该如何在你的app中实现它

00:11:41.935 --> 00:11:42.803 align:middle line:-1
而现在

00:11:44.171 --> 00:11:47.741 align:middle line:-2
我想介绍下
关于请求评分和评价的更新

00:11:48.909 --> 00:11:51.245 align:middle line:-2
不管你的app中
有没有app内购买项目

00:11:51.512 --> 00:11:55.449 align:middle line:-2
只要在App Store中上架了
你就会关心用户所给出的反馈

00:11:55.816 --> 00:11:59.820 align:middle line:-2
App Store和StoreKit
有几种方法来能你获得该信息

00:12:01.355 --> 00:12:05.926 align:middle line:-2
首先在iOS 10.3中 我们引入了
SKStoreReviewController

00:12:05.993 --> 00:12:11.965 align:middle line:-2
这是个很棒的API
它可以让app快速弹出一个窗口

00:12:12.032 --> 00:12:15.736 align:middle line:-2
让用户选择一个星级评分
甚至是写一个评价

00:12:15.802 --> 00:12:17.504 align:middle line:-1
然后回来接着用你的app

00:12:18.438 --> 00:12:22.242 align:middle line:-1
不过这么厉害的功能肯定是有限制的

00:12:22.976 --> 00:12:27.614 align:middle line:-2
首先我们限制了每个app
在每台设备上每年

00:12:27.848 --> 00:12:31.285 align:middle line:-1
能弹出此窗口的次数

00:12:32.819 --> 00:12:36.924 align:middle line:-2
其次 如果用户永远都
不想看到这些评分窗口

00:12:37.291 --> 00:12:40.327 align:middle line:-2
他们只需要去App Store
设置中把它们全部禁用

00:12:41.295 --> 00:12:46.400 align:middle line:-1
有了这两个限制 你可以用什么策略

00:12:46.466 --> 00:12:51.138 align:middle line:-2
来决定什么时候
来调用评价控制器呢？

00:12:52.172 --> 00:12:55.175 align:middle line:-1
首先就是我们不要打扰到用户

00:12:56.176 --> 00:12:58.178 align:middle line:-1
如果用户正在玩某个关卡

00:12:58.245 --> 00:13:00.414 align:middle line:-1
而且正在打关底的首领

00:12:58.245 --> 00:13:00.414 align:middle line:-1
而且正在打关底的首领

00:13:01.048 --> 00:13:05.152 align:middle line:-2
这不是让他们对你游戏评分的好时机
等到他们打完了再说

00:13:07.054 --> 00:13:10.791 align:middle line:-2
你还应该等到
他们对你的app有了足够的体验

00:13:10.858 --> 00:13:13.327 align:middle line:-1
对其形成了完整的看法

00:13:13.694 --> 00:13:16.163 align:middle line:-2
还要等他们对你的app
有了一个正面的体验

00:13:16.230 --> 00:13:20.100 align:middle line:-2
可能他们刚刚打完了首领
可能他们

00:13:20.167 --> 00:13:23.770 align:middle line:-2
刚通过你的app订了餐
等到他们有了正面的体验再说

00:13:25.172 --> 00:13:26.840 align:middle line:-1
最后 我之前提过我们限制了

00:13:26.907 --> 00:13:32.312 align:middle line:-2
这个app每台设备每年
能弹出的评价窗口的次数

00:13:32.813 --> 00:13:34.815 align:middle line:-1
但是我们没有限制评分

00:13:35.816 --> 00:13:40.921 align:middle line:-2
所以如果在一次会话中你调用了
SKStoreReviewController三次

00:13:41.088 --> 00:13:45.459 align:middle line:-2
并且用户一直在点击现在不要
他们就会连续看到三次

00:13:45.526 --> 00:13:48.428 align:middle line:-2
你可以自己决定app中的
评分限制次数

00:13:49.429 --> 00:13:50.631 align:middle line:-1
它在代码中是什么样？

00:13:51.798 --> 00:13:56.069 align:middle line:-2
正如我一直在说的 将对于
StoreReviewController的调用

00:13:56.136 --> 00:13:58.138 align:middle line:-1
隐藏到你自己app的业务逻辑中

00:13:58.372 --> 00:14:01.241 align:middle line:-2
你要检查下
现在是这么做的好时机吗？

00:13:58.372 --> 00:14:01.241 align:middle line:-2
你要检查下
现在是这么做的好时机吗？

00:14:01.441 --> 00:14:05.045 align:middle line:-2
他们是还在某项任务中
或是刚刚完成任务吗？

00:14:05.679 --> 00:14:09.316 align:middle line:-2
他们是不是刚收获了正面的体验呢？
你最近有没有弹出过窗口呢？

00:14:09.683 --> 00:14:10.918 align:middle line:-1
你要在检查中加入这些判断条件

00:14:11.151 --> 00:14:12.920 align:middle line:-1
如果所有这些判断条件都通过了

00:14:13.220 --> 00:14:17.457 align:middle line:-2
你就可以调用SKStoreReviewController.
.requestReview

00:14:17.858 --> 00:14:22.362 align:middle line:-2
它没有输入和输出
它是个简单但功能强大的API

00:14:23.697 --> 00:14:27.534 align:middle line:-2
我们已经收到了很多来自开发者的
对于这些API非常好的反馈

00:14:28.068 --> 00:14:29.303 align:middle line:-1
我很高兴能给你们分享其中的一些

00:14:30.137 --> 00:14:35.542 align:middle line:-2
Zappos说道 他们通过使用
SKStoreReviewController

00:14:35.709 --> 00:14:39.446 align:middle line:-2
收到了原来十倍的评价
而且这让他们有信心

00:14:39.513 --> 00:14:42.149 align:middle line:-1
他们是在将正确的内容给用户

00:14:42.816 --> 00:14:48.822 align:middle line:0
Frosty Pop是Kingpin Bowling
和Ninja Attack这些伟大游戏的开发者

00:14:49.156 --> 00:14:53.126 align:middle line:0
他们在App Store
的曝光度更高了

00:14:53.660 --> 00:14:57.331 align:middle line:0
因为有了更大的样本
他们可以更好地

00:14:57.397 --> 00:15:00.501 align:middle line:0
获得相关用户群体提供的反馈

00:14:57.397 --> 00:15:00.501 align:middle line:0
获得相关用户群体提供的反馈

00:15:01.768 --> 00:15:03.804 align:middle line:-1
我希望这类反馈能说服你

00:15:03.871 --> 00:15:07.140 align:middle line:-1
不要用自己的弹出窗口来请求评价了

00:15:07.207 --> 00:15:09.877 align:middle line:-2
你应该使用
SKStoreReviewController

00:15:11.044 --> 00:15:13.247 align:middle line:-1
它真的能为你带来很大的收获

00:15:16.450 --> 00:15:21.255 align:middle line:-2
我相信你们看到我们昨天发布了全新
漂亮的Mac App Store

00:15:21.688 --> 00:15:25.425 align:middle line:-2
我知道你们会去赶紧开发一些
很棒的新Mac app

00:15:25.926 --> 00:15:28.095 align:middle line:-1
所以我们很激动地宣布

00:15:28.328 --> 00:15:32.633 align:middle line:-2
我们给Mac带来了写评价API
从Mojave开始

00:15:37.004 --> 00:15:38.872 align:middle line:-1
我提过了 你有几种

00:15:38.939 --> 00:15:42.676 align:middle line:-2
让你的用户
为你的app写评价的方法

00:15:44.178 --> 00:15:48.448 align:middle line:-2
另一种方法就是你可以设置
App Store的深度链接

00:15:49.183 --> 00:15:51.018 align:middle line:-2
我们也在iOS 10.3中
引入了它

00:15:51.084 --> 00:15:53.420 align:middle line:-1
今年我们也会将它带到Mac中

00:15:54.721 --> 00:15:57.357 align:middle line:-2
它基本上就是一个
进入到你产品页面的链接

00:15:57.424 --> 00:16:00.127 align:middle line:-2
你告诉App Store
打开写评论表单

00:15:57.424 --> 00:16:00.127 align:middle line:-2
你告诉App Store
打开写评论表单

00:16:00.194 --> 00:16:02.296 align:middle line:-1
用户可以随时随地填写这个表单

00:16:02.629 --> 00:16:05.332 align:middle line:-2
作为SKStoreReviewController
的替代品

00:16:05.399 --> 00:16:08.735 align:middle line:-2
这可以在用户需要
采取快速行动的任何用户界面

00:16:08.802 --> 00:16:11.305 align:middle line:-1
表现得更出色

00:16:11.905 --> 00:16:16.510 align:middle line:-2
例如 如果你的app中的
设置页面有个按钮

00:16:16.577 --> 00:16:19.479 align:middle line:-1
要请用户写个评价的话

00:16:19.546 --> 00:16:23.517 align:middle line:-2
这时候在你的产品页面中
用个深度链接非常不错

00:16:24.017 --> 00:16:25.018 align:middle line:-1
那要如何实现呢？

00:16:25.953 --> 00:16:29.823 align:middle line:-1
非常简单 你只要在产品页面URL

00:16:30.057 --> 00:16:32.759 align:middle line:-2
的后面加上action=write-review
就可以了

00:16:32.826 --> 00:16:35.829 align:middle line:-2
这会让App Store
直接打开写评价的表单

00:16:36.296 --> 00:16:41.168 align:middle line:-2
如果你不知道如何获得
你app的产品URL

00:16:41.735 --> 00:16:45.973 align:middle line:-2
linkmaker.itunes.apple.com中
就可以找到

00:16:46.373 --> 00:16:49.076 align:middle line:-2
你可以获得
关于评分和评价的更多信息

00:16:49.142 --> 00:16:53.213 align:middle line:-2
包括如何直接在开发者网站上
回复你的用户评价

00:16:55.949 --> 00:16:59.620 align:middle line:-2
我接下来想深入介绍下
App Store沙盒

00:17:00.954 --> 00:17:02.990 align:middle line:-1
我说的沙盒是什么意思呢？

00:17:03.624 --> 00:17:05.992 align:middle line:-1
首先我说的不是什么呢？

00:17:06.059 --> 00:17:10.931 align:middle line:-2
我不是在说
操作系统内核中的app沙盒

00:17:10.998 --> 00:17:14.835 align:middle line:-1
它限制了你的app可以访问的资源

00:17:15.102 --> 00:17:18.172 align:middle line:-1
我所介绍的是一个专用的环境

00:17:18.238 --> 00:17:22.509 align:middle line:-2
它是服务器端App Store
商业引擎的一个完整备份

00:17:22.776 --> 00:17:26.880 align:middle line:-2
你可以在那里对你的app
和app内购买项目进行测试

00:17:28.715 --> 00:17:32.152 align:middle line:-2
StoreKit知道什么时候
要进去沙盒环境

00:17:32.219 --> 00:17:34.121 align:middle line:-2
它根据你app
如何被签署进行判断

00:17:34.788 --> 00:17:37.257 align:middle line:-2
例如 如果你是在Xcode中
构建你的app

00:17:37.324 --> 00:17:39.960 align:middle line:-1
它就是由开发者证书签署的

00:17:40.527 --> 00:17:42.062 align:middle line:-1
StoreKit知道何时

00:17:42.462 --> 00:17:44.765 align:middle line:-1
将你的所有请求发送到沙盒环境

00:17:46.533 --> 00:17:49.236 align:middle line:-2
如果用户是从生产
App Store下载的app

00:17:49.536 --> 00:17:51.371 align:middle line:-1
这时候就是生产签名的

00:17:51.872 --> 00:17:55.475 align:middle line:-2
StoreKit知道
要去常规的生产环境

00:17:56.877 --> 00:17:59.279 align:middle line:-1
那沙盒环境有什么不同呢？

00:17:59.346 --> 00:18:02.082 align:middle line:-1
首先我们不会扣款

00:17:59.346 --> 00:18:02.082 align:middle line:-1
首先我们不会扣款

00:18:02.482 --> 00:18:05.385 align:middle line:-2
这是个让你用来测试
app内购买的环境

00:18:05.719 --> 00:18:07.588 align:middle line:-1
你会一次又一次地进行测试

00:18:07.855 --> 00:18:09.423 align:middle line:-1
是没有理由扣款的

00:18:10.157 --> 00:18:14.761 align:middle line:-2
其次我们在App Store
Connect中有专门的沙盒账号

00:18:14.828 --> 00:18:19.366 align:middle line:-1
可以让你的开发者在沙盒环境中使用

00:18:19.433 --> 00:18:23.637 align:middle line:-2
这些账号跟你的普通iTunes
app内购买账号是不一样的

00:18:25.239 --> 00:18:28.709 align:middle line:-2
正如我之前提过的
我们的后台环境也是完全不同的

00:18:28.775 --> 00:18:31.078 align:middle line:-2
这意味着在你做服务器
到服务器端收据验证时

00:18:31.144 --> 00:18:34.414 align:middle line:-1
会有个完全不同的URL

00:18:34.715 --> 00:18:38.719 align:middle line:-1
这很重要 如果你要将开发测试收据

00:18:38.852 --> 00:18:42.823 align:middle line:-1
从你的设备中发送到QA服务器

00:18:42.890 --> 00:18:46.360 align:middle line:-1
在验证收据端点进行验证的话

00:18:47.261 --> 00:18:49.329 align:middle line:-1
我接下来会再介绍一些相关内容

00:18:50.397 --> 00:18:53.133 align:middle line:-2
我们还在StoreKit中
提供了一些测试模式

00:18:53.567 --> 00:18:57.304 align:middle line:-2
例如
SKReceiptRefreshRequest

00:18:57.738 --> 00:19:01.241 align:middle line:-1
可以传入参数来获得一个过期的收据

00:18:57.738 --> 00:19:01.241 align:middle line:-1
可以传入参数来获得一个过期的收据

00:19:01.542 --> 00:19:03.243 align:middle line:-1
这样你就可以测试

00:19:03.410 --> 00:19:06.780 align:middle line:-2
“如果我得到了一张过期的数据
那么然后会发生什么呢？”

00:19:08.315 --> 00:19:11.952 align:middle line:-1
我们还可以让你模拟

00:19:12.219 --> 00:19:15.856 align:middle line:-2
如果孩子要家长
进行app内购买是什么样的

00:19:16.623 --> 00:19:19.026 align:middle line:-2
我们在沙盒中有
simulatesAskToBuy

00:19:20.961 --> 00:19:24.665 align:middle line:0
可能其中的一个很大不同就是当你在

00:19:24.731 --> 00:19:29.169 align:middle line:0
处理app内订阅的时候
我们可以追踪多久要自动续费

00:19:29.736 --> 00:19:33.674 align:middle line:0
如果你在app中有个年度订阅的话

00:19:33.740 --> 00:19:37.511 align:middle line:0
我们让你等一年才能测试
你的年度订阅续费是很荒谬的

00:19:38.979 --> 00:19:45.152 align:middle line:-2
一个基本原则就是
现实中的一年等于沙盒中的一个小时

00:19:46.153 --> 00:19:48.589 align:middle line:-1
你还可以看到 如果你有个月度订阅

00:19:48.789 --> 00:19:50.123 align:middle line:-1
那在沙盒中就是五分钟

00:19:51.925 --> 00:19:55.963 align:middle line:0
我们还将沙盒中的
自动续费限制次数设为5

00:19:56.563 --> 00:20:00.234 align:middle line:-1
当你购买初始订阅的时候

00:19:56.563 --> 00:20:00.234 align:middle line:-1
当你购买初始订阅的时候

00:20:00.467 --> 00:20:04.438 align:middle line:-1
你会有五次自动续费依次出现

00:20:04.771 --> 00:20:06.039 align:middle line:-1
最后会自己停掉

00:20:06.106 --> 00:20:09.877 align:middle line:-1
这是为了模拟用户进入管理账号

00:20:09.943 --> 00:20:12.379 align:middle line:-2
禁用订阅的时候会发生什么
他们将其关闭

00:20:12.846 --> 00:20:14.915 align:middle line:-1
或者我们称之为自愿转换

00:20:15.115 --> 00:20:17.317 align:middle line:-1
他们决定不想再用你的服务了

00:20:20.254 --> 00:20:22.990 align:middle line:-2
你该如何对这些内容进行设置
及如何使用沙盒环境呢？

00:20:23.056 --> 00:20:26.527 align:middle line:-2
首先你要进入App Store
Connect创建你的用户

00:20:28.095 --> 00:20:30.430 align:middle line:-1
你要创建想卖的产品

00:20:30.631 --> 00:20:32.499 align:middle line:-1
在你配置app之前

00:20:32.566 --> 00:20:34.134 align:middle line:-1
要先把服务器端配置好

00:20:35.402 --> 00:20:38.272 align:middle line:-2
一如既往 在Xcode中
构建并签名你的app

00:20:39.106 --> 00:20:41.642 align:middle line:-2
你要启动你的app
找到一个要买的产品

00:20:42.209 --> 00:20:45.546 align:middle line:-1
然后在弹出窗口登录你的沙盒账号

00:20:47.881 --> 00:20:50.551 align:middle line:-2
如果你注意到的话
会发现我少了一个步骤

00:20:52.085 --> 00:20:57.624 align:middle line:-2
如果我已经登录了产品app或
iTunes Store会怎样？

00:20:58.125 --> 00:21:00.994 align:middle line:-2
难道你不用在使用
沙盒账号之前先登出吗？

00:20:58.125 --> 00:21:00.994 align:middle line:-2
难道你不用在使用
沙盒账号之前先登出吗？

00:21:01.828 --> 00:21:04.498 align:middle line:-2
从iOS 12开始
就不再需要这么做了

00:21:11.538 --> 00:21:14.908 align:middle line:-1
我们将你的产品账号

00:21:14.975 --> 00:21:17.411 align:middle line:-2
与你的沙盒账号分开了
你可以单独对其进行管理

00:21:17.711 --> 00:21:21.949 align:middle line:-2
就像我们如何用数据
来决定要使用哪个环境

00:21:22.249 --> 00:21:23.917 align:middle line:-1
抱歉 就像我们如何用证书

00:21:23.984 --> 00:21:25.619 align:middle line:-1
来决定要使用哪个环境

00:21:25.919 --> 00:21:30.023 align:middle line:-2
我们知道在开发模式的时候
要使用沙盒账号

00:21:30.858 --> 00:21:32.192 align:middle line:-1
我很期待iOS 12中的该功能

00:21:32.259 --> 00:21:33.493 align:middle line:-1
我觉得这会让在你的个人设备上

00:21:33.560 --> 00:21:36.363 align:middle line:-1
长期测试这些app

00:21:36.430 --> 00:21:37.598 align:middle line:-1
发生一个很大的变化

00:21:40.000 --> 00:21:41.435 align:middle line:-1
我想请Ross回到台上来

00:21:41.502 --> 00:21:43.504 align:middle line:-1
他会介绍一些最佳实践

00:21:43.570 --> 00:21:46.773 align:middle line:-2
一些你在处理交易的时候
需要注意的内容

00:21:47.140 --> 00:21:47.975 align:middle line:-1
Ross

00:21:55.516 --> 00:21:58.218 align:middle line:-2
我想介绍一些常见的问题
和看到的场景

00:21:58.285 --> 00:21:59.620 align:middle line:-1
讨论下处理它们的最好方式

00:22:01.021 --> 00:22:03.991 align:middle line:-1
首先你应该将交易观察器

00:22:04.057 --> 00:22:07.427 align:middle line:-2
尽早在你app的生命周期中
添加到默认支付队列中

00:22:09.730 --> 00:22:13.000 align:middle line:-2
这是我们遇到的一个常见问题
app里刚开始没加交易观察器

00:22:13.066 --> 00:22:15.269 align:middle line:-2
直到用户到了
app内购买用户界面

00:22:15.569 --> 00:22:17.271 align:middle line:-1
或者甚至开始交易的时候才加上

00:22:18.172 --> 00:22:19.940 align:middle line:-1
其实我建议就把它加到

00:22:20.340 --> 00:22:22.709 align:middle line:-2
application:
:didFinishLaunchingWithOptions

00:22:22.776 --> 00:22:23.810 align:middle line:-1
这个AppDelegate方法上

00:22:25.879 --> 00:22:26.947 align:middle line:-1
为何我们要这样建议？

00:22:27.781 --> 00:22:30.150 align:middle line:-2
交易观察器是
StoreKit中用来交流

00:22:30.217 --> 00:22:33.153 align:middle line:-2
用户在你app进行交易时
产生的变化

00:22:34.021 --> 00:22:35.656 align:middle line:-1
所有这些变化通常都是很重要的

00:22:36.423 --> 00:22:38.692 align:middle line:-1
迅速地处理好所有交易能保证

00:22:38.759 --> 00:22:40.761 align:middle line:-1
你获得很好的用户体验和业务

00:22:42.796 --> 00:22:45.132 align:middle line:-1
有些时候交易可能会被干扰

00:22:46.433 --> 00:22:48.902 align:middle line:-2
例如 如果用户在交易中
离开你的app

00:22:49.236 --> 00:22:51.038 align:middle line:-1
可能他们在上课时玩游戏被抓到了

00:22:52.472 --> 00:22:55.576 align:middle line:-2
你的app可能会随后
被系统或是用户终止

00:22:56.343 --> 00:22:57.744 align:middle line:-1
然后当它再被打开的时候

00:22:57.945 --> 00:22:59.880 align:middle line:-2
StoreKit在你加上
交易观察器前

00:22:59.947 --> 00:23:01.582 align:middle line:-1
就不知道要继续交易

00:22:59.947 --> 00:23:01.582 align:middle line:-1
就不知道要继续交易

00:23:02.416 --> 00:23:05.185 align:middle line:-1
如果用户决定再买点别的东西

00:23:05.252 --> 00:23:08.589 align:middle line:-1
这可能会让他们收到两个弹出窗口时

00:23:08.655 --> 00:23:11.391 align:middle line:-2
或对你最后加上交易观察器时
突然弹出的窗口感到疑惑

00:23:12.092 --> 00:23:12.926 align:middle line:-1
这样的用户交互体验不是很好

00:23:15.095 --> 00:23:17.097 align:middle line:-2
另一个常见的问题就是
用户需要在交易中离开你的app

00:23:17.164 --> 00:23:19.466 align:middle line:-1
因为他们要编辑他们的支付信息

00:23:19.900 --> 00:23:20.801 align:middle line:-1
这些问题一直会发生

00:23:21.134 --> 00:23:22.736 align:middle line:-1
你会离开app 并且保证

00:23:22.803 --> 00:23:24.771 align:middle line:-2
在他们返回app时
可以顺畅继续交易

00:23:27.174 --> 00:23:29.776 align:middle line:-1
最后就是有时候你的app会崩溃

00:23:30.244 --> 00:23:32.913 align:middle line:-2
在这种情况下
你也需要保证它可以流畅地继续运行

00:23:35.983 --> 00:23:37.451 align:middle line:-1
还有其他一些原因

00:23:37.784 --> 00:23:39.753 align:middle line:-1
你要尽早添加这个内容

00:23:41.021 --> 00:23:42.322 align:middle line:-1
还有几种类型的交易

00:23:42.389 --> 00:23:43.924 align:middle line:-1
可能来自你的app之外

00:23:45.225 --> 00:23:47.961 align:middle line:-1
例如来自交易观察器的续订

00:23:49.096 --> 00:23:51.298 align:middle line:-2
当一个自动续订的订阅
续费成功的时候

00:23:51.732 --> 00:23:53.567 align:middle line:-1
你会在付款队列中收到一笔交易

00:23:54.735 --> 00:23:57.504 align:middle line:-1
你要尽可能早地收到此信息

00:23:57.571 --> 00:24:00.707 align:middle line:-2
这样你就不会在用户已付款的情况下
中断用户的服务

00:23:57.571 --> 00:24:00.707 align:middle line:-2
这样你就不会在用户已付款的情况下
中断用户的服务

00:24:03.110 --> 00:24:06.713 align:middle line:-2
在推广的app内程序购买中
用户点击App Store中的这些内容

00:24:07.147 --> 00:24:08.882 align:middle line:-1
交易会转移到你的app

00:24:09.483 --> 00:24:11.518 align:middle line:-1
所以你要确保衔接顺利

00:24:13.587 --> 00:24:15.822 align:middle line:-2
最后如果你为app内购买
设置了促销代码

00:24:16.089 --> 00:24:17.524 align:middle line:-1
这些会从App Store兑换

00:24:17.591 --> 00:24:18.592 align:middle line:-1
然后也会被发送到你的app

00:24:23.263 --> 00:24:26.600 align:middle line:-2
我们遇到的另一个问题是何时该调用
finishTransaction

00:24:27.968 --> 00:24:30.404 align:middle line:-2
一般来说你应该
在交易完全成功后

00:24:30.838 --> 00:24:32.906 align:middle line:-1
调用finishTransaction

00:24:33.273 --> 00:24:35.909 align:middle line:-1
还有已下载并向用户交付了所有内容

00:24:36.844 --> 00:24:39.379 align:middle line:-1
或是在交易未成功完成的时候

00:24:41.048 --> 00:24:44.651 align:middle line:-2
为了更具体地解释
让我们来看看所有的交易状态

00:24:45.118 --> 00:24:46.687 align:middle line:-1
并讨论下如何处理它们

00:24:48.188 --> 00:24:50.958 align:middle line:-2
你目前无需在购买状态下
执行任何操作

00:24:51.024 --> 00:24:54.294 align:middle line:-2
只需继续观察付款队列
并等待状态发生变化即可

00:24:56.463 --> 00:24:59.132 align:middle line:-2
在已购买状态下
交易已经成功完成了

00:25:00.000 --> 00:25:02.102 align:middle line:-1
你应该下载并向用户提供所有内容

00:25:02.402 --> 00:25:03.604 align:middle line:-2
然后调用
finishTransaction

00:25:06.139 --> 00:25:09.343 align:middle line:-2
在失败状态下
交易彻底失败

00:25:10.043 --> 00:25:12.145 align:middle line:-1
你应该检查错误并妥善处理

00:25:12.446 --> 00:25:14.882 align:middle line:-2
你可能要更新用户界面
记录分析 完成所有事

00:25:15.549 --> 00:25:17.084 align:middle line:-2
然后你应该调用
finishTransaction

00:25:18.118 --> 00:25:22.055 align:middle line:-1
此处还需要注意的是

00:25:22.122 --> 00:25:23.891 align:middle line:-2
如果用户取消这些交易
交易将以失败状态返回

00:25:24.458 --> 00:25:26.960 align:middle line:-1
所以你要检查错误 并确保

00:25:27.027 --> 00:25:29.997 align:middle line:-2
这不是由于用户取消交易产生的错误
因为在这种情况下不应显示任何界面

00:25:30.063 --> 00:25:32.366 align:middle line:-2
用户刚选择取消了
他们不需要知道交易失败了

00:25:35.836 --> 00:25:38.305 align:middle line:0
恢复状态
与购买状态非常相似

00:25:39.072 --> 00:25:41.241 align:middle line:0
它表示交易已经成功完成

00:25:41.308 --> 00:25:43.977 align:middle line:0
所以你应该再次下载
并将所有内容提供给用户

00:25:44.545 --> 00:25:45.812 align:middle line:0
然后你应该调用
finishTransaction

00:25:48.649 --> 00:25:49.783 align:middle line:0
最后 延迟状态

00:25:50.717 --> 00:25:54.421 align:middle line:0
它类似于购买状态
除了它意味着交易

00:25:54.488 --> 00:25:56.323 align:middle line:0
正在等待一些外部行动后继续

00:25:57.257 --> 00:25:59.493 align:middle line:-2
例如
用户开启了请求购买功能的时候

00:26:00.494 --> 00:26:02.696 align:middle line:-1
请求购买功能可以让家长

00:26:02.763 --> 00:26:06.166 align:middle line:-1
手动批准或拒绝子女进行的交易

00:26:07.568 --> 00:26:09.403 align:middle line:-1
任何用户都可以设置请求购买

00:26:10.137 --> 00:26:11.972 align:middle line:-2
但它可能会发生在
任何app内购买项目中

00:26:12.039 --> 00:26:13.874 align:middle line:-1
所以你需要恰当地处理这种情况

00:26:17.711 --> 00:26:18.712 align:middle line:-1
说到请求购买的话

00:26:20.113 --> 00:26:22.349 align:middle line:-1
如果你的交易由于请求购买而延期

00:26:23.283 --> 00:26:25.385 align:middle line:-2
用户将从App Store
收到消息说

00:26:25.452 --> 00:26:27.788 align:middle line:-1
他们的父母已被通知批准交易

00:26:29.523 --> 00:26:33.961 align:middle line:-2
如果交易被批准
那么它将以购买状态

00:26:34.228 --> 00:26:35.262 align:middle line:-1
返回到交易观察器

00:26:35.996 --> 00:26:37.531 align:middle line:-1
你应该让用户知道它已被批准

00:26:38.065 --> 00:26:40.501 align:middle line:-2
当然还要发送内容并调用
finishTransaction

00:26:42.970 --> 00:26:44.671 align:middle line:-1
如果它被拒绝

00:26:44.738 --> 00:26:46.406 align:middle line:-2
它将在失败状态
返回到交易观察器

00:26:47.074 --> 00:26:48.976 align:middle line:-1
这里你应该让用户知道它被拒绝了

00:26:49.510 --> 00:26:51.178 align:middle line:-2
然后调用
finishTransaction来完成它

00:26:52.179 --> 00:26:57.684 align:middle line:-2
但是如果在24小时内
没有采取任何措施

00:26:57.751 --> 00:27:01.054 align:middle line:-1
那么交易就会静默地失败

00:26:57.751 --> 00:27:01.054 align:middle line:-1
那么交易就会静默地失败

00:27:02.189 --> 00:27:04.825 align:middle line:-2
这意味着什么都
不会返回到你的交易观察器

00:27:05.659 --> 00:27:09.630 align:middle line:-2
此外 24小时内的
所有请求购买交易

00:27:09.696 --> 00:27:12.099 align:middle line:-1
都会合并为一个任务

00:27:13.467 --> 00:27:15.502 align:middle line:-2
所以重要的一点是
你不该等待延期交易

00:27:15.569 --> 00:27:18.672 align:middle line:-1
甚至不要期望它们会回来

00:27:19.273 --> 00:27:21.875 align:middle line:-2
你该确保你不要锁定用户界面
并允许用户尽可能

00:27:21.942 --> 00:27:23.210 align:middle line:-1
继续使用你的app

00:27:24.645 --> 00:27:28.048 align:middle line:-1
另一个重要提示是 在app内购买

00:27:28.115 --> 00:27:31.418 align:middle line:-2
已经通过Apple托管
SKDownload内容时

00:27:31.485 --> 00:27:35.455 align:middle line:-2
你该在调用finishTransaction前
先停止下载托管的内容

00:27:36.890 --> 00:27:38.792 align:middle line:-2
这是因为在你调用了
finishTransaction之后

00:27:39.259 --> 00:27:43.430 align:middle line:-2
所有SKDownloads
都将被取消并且不能被重新下载

00:27:44.231 --> 00:27:45.199 align:middle line:-1
如果你不小心这么做了

00:27:45.666 --> 00:27:49.069 align:middle line:-2
你须调用restoreTransactions
开始一个新下载

00:27:49.303 --> 00:27:51.038 align:middle line:-1
即使你的下载失败了

00:27:51.805 --> 00:27:55.108 align:middle line:-2
也应该先暂停调用finishTransaction
直到你重新下载

00:27:55.175 --> 00:27:58.378 align:middle line:-2
并且成功下载
而且将该内容提供给用户

00:28:01.014 --> 00:28:03.083 align:middle line:-1
最后如果你使用了收据验证

00:28:04.484 --> 00:28:07.855 align:middle line:-2
你需要确保在调用finishTransaction之前
执行此操作

00:28:08.755 --> 00:28:11.225 align:middle line:-1
这对可消耗性app内购买尤为重要

00:28:11.291 --> 00:28:13.126 align:middle line:-1
因为可消耗性app内购买

00:28:13.193 --> 00:28:15.929 align:middle line:-1
只有在未完成时才会出现在收据中

00:28:16.697 --> 00:28:17.931 align:middle line:-2
在你调用了
finishTransaction之后

00:28:17.998 --> 00:28:21.001 align:middle line:-2
它们就不会再出现在自己的位置上
你也就无法再验证它们

00:28:21.768 --> 00:28:23.203 align:middle line:-1
因此如果你使用了收据验证

00:28:23.270 --> 00:28:26.740 align:middle line:-2
请确保它是真正的Apple签名的
用户付费的交易

00:28:27.508 --> 00:28:29.543 align:middle line:-2
在调用finishTransaction之前
始终执行此操作

00:28:31.912 --> 00:28:32.813 align:middle line:0
我想把舞台交还给Dana

00:28:32.880 --> 00:28:34.481 align:middle line:0
来讨论管理收据的一些技巧

00:28:39.753 --> 00:28:40.654 align:middle line:-1
再次谢谢你 Ross

00:28:43.790 --> 00:28:44.791 align:middle line:-1
那么收据是什么呢？

00:28:46.026 --> 00:28:50.297 align:middle line:-2
这就像它的名字所暗示的那样
它是app在app内购买中的记录

00:28:50.364 --> 00:28:53.934 align:middle line:-2
这很像你买零售品时
得到的那张纸

00:28:56.436 --> 00:28:58.338 align:middle line:-1
它存储在设备上 它是一个文件

00:28:58.405 --> 00:29:00.641 align:middle line:-2
它其实是从App Store
获得的文件

00:28:58.405 --> 00:29:00.641 align:middle line:-2
它其实是从App Store
获得的文件

00:29:00.707 --> 00:29:02.809 align:middle line:-2
文件来自服务器
非StoreKit生成

00:29:03.043 --> 00:29:06.013 align:middle line:-2
我们将其存储在设备上
你的app就可以读取它了

00:29:07.748 --> 00:29:11.518 align:middle line:-2
它由App Store签署
这样你知道它是真实的了

00:29:12.986 --> 00:29:16.590 align:middle line:-1
最后 它适用于你的app和该设备

00:29:17.291 --> 00:29:19.459 align:middle line:-1
收据是一个重要的媒介

00:29:19.526 --> 00:29:24.298 align:middle line:-2
它可以确保在设备上运行的
app是合法的

00:29:26.500 --> 00:29:28.001 align:middle line:-1
你应该如何验证收据呢？

00:29:28.068 --> 00:29:29.570 align:middle line:-1
你可以做两件事

00:29:29.636 --> 00:29:32.372 align:middle line:-1
首先你可以查看设备上的收据验证

00:29:32.673 --> 00:29:36.710 align:middle line:-1
你可以在设备上使用加密技术

00:29:36.844 --> 00:29:40.214 align:middle line:-1
来验证收据以及解锁内容

00:29:40.614 --> 00:29:44.117 align:middle line:-1
或者你可以做服务器对服务器的验证

00:29:44.585 --> 00:29:48.155 align:middle line:-2
你可以在这里获得收据
将其发送到你信任的服务器

00:29:48.355 --> 00:29:49.690 align:middle line:-1
服务器会为你管理它

00:29:51.625 --> 00:29:55.996 align:middle line:-2
在这里它会调用
itunes.apple.com/verifyreceipt

00:29:56.230 --> 00:30:01.101 align:middle line:-2
将收据发送到App Store
它会为你信任的服务器验证收据

00:29:56.230 --> 00:30:01.101 align:middle line:-2
将收据发送到App Store
它会为你信任的服务器验证收据

00:30:01.568 --> 00:30:04.805 align:middle line:-2
如果你在后台有订阅服务的话
这非常棒

00:30:05.939 --> 00:30:08.942 align:middle line:-1
但是 我的演讲会重点关注

00:30:09.009 --> 00:30:10.544 align:middle line:-1
设备上的验证

00:30:11.111 --> 00:30:15.082 align:middle line:-2
如果你在用订阅服务
我强烈建议你关注下

00:30:15.148 --> 00:30:18.185 align:middle line:-2
在本场演讲过后
今天下午3点在1号厅

00:30:18.252 --> 00:30:20.120 align:middle line:-1
举行的“工程订阅”演讲

00:30:22.222 --> 00:30:25.792 align:middle line:-2
但我想说一点
关于服务器到服务器验证的内容

00:30:27.227 --> 00:30:29.830 align:middle line:-2
正如我说过的那样
从设备上取得该收据

00:30:29.897 --> 00:30:32.966 align:middle line:-2
并将其发送到你的服务器
是完全没问题的

00:30:34.268 --> 00:30:36.436 align:middle line:-1
但是你绝不应该将收据直接

00:30:36.503 --> 00:30:39.873 align:middle line:-1
从你的设备上发送到收据验证

00:30:40.841 --> 00:30:42.709 align:middle line:-1
你不控制该连接的任何一端

00:30:42.776 --> 00:30:45.646 align:middle line:-2
你无法控制用户的设备
以及它进行的连接

00:30:45.879 --> 00:30:48.015 align:middle line:-2
你也无法控制另一边
与App Store的连接

00:30:48.215 --> 00:30:49.249 align:middle line:-1
你无法在

00:30:49.316 --> 00:30:51.718 align:middle line:-2
app与App Store间
建立可信的连接

00:30:51.952 --> 00:30:54.821 align:middle line:-2
你应该将它发送到
中间服务器

00:30:57.758 --> 00:30:59.493 align:middle line:-1
那么收据的结构是什么样的呢？

00:31:00.827 --> 00:31:04.164 align:middle line:-2
它有一些购买信息
证书和签名

00:31:04.631 --> 00:31:07.568 align:middle line:-2
我们有个API可以让你
将其从文件系统中取出

00:31:08.602 --> 00:31:10.137 align:middle line:-1
我说过这是一个单一的文件

00:31:12.105 --> 00:31:14.541 align:middle line:-1
我们使用开源标准

00:31:15.075 --> 00:31:19.379 align:middle line:-2
PKCS加密容器
以及ASN.1

00:31:19.580 --> 00:31:21.415 align:middle line:-1
来存储收据中的元数据

00:31:21.481 --> 00:31:26.253 align:middle line:-2
这些都是文档完整并且
非常公开的开放文件格式

00:31:27.788 --> 00:31:31.758 align:middle line:-2
而且有很多可以用来
验证和阅读收据的方法

00:31:32.326 --> 00:31:37.698 align:middle line:-2
例如OpenSSL asn1c等
还有更多 你甚至能建立自己的标准

00:31:38.532 --> 00:31:41.168 align:middle line:-2
不管你打算使用哪种API
你应该如何阅读收据呢？

00:31:41.235 --> 00:31:46.406 align:middle line:-2
在你调用Bundle.appStoreReceiptURL时
它会将一个URL返回到你的app中

00:31:46.473 --> 00:31:49.409 align:middle line:-2
但它只是到达文件系统中
文件的路径

00:31:50.210 --> 00:31:52.179 align:middle line:-1
你需要阅读该内容

00:31:52.379 --> 00:31:54.314 align:middle line:-1
把那一小块数据写入内存

00:31:54.548 --> 00:31:57.985 align:middle line:-2
如果你在做服务器到服务器验证的话
将其发送到你的服务器

00:31:58.185 --> 00:32:00.621 align:middle line:-2
或者你也可以直接
在设备上对其进行处理

00:31:58.185 --> 00:32:00.621 align:middle line:-2
或者你也可以直接
在设备上对其进行处理

00:32:01.889 --> 00:32:04.758 align:middle line:-2
如果你在使用OpenSSL
对其进行处理

00:32:05.392 --> 00:32:06.927 align:middle line:-1
那么你需要遵循一些提示

00:32:07.127 --> 00:32:11.365 align:middle line:-2
首先要建立一个静态库
而不是一个动态库

00:32:11.431 --> 00:32:14.101 align:middle line:-1
如果你用静态库的话会更安全些

00:32:15.602 --> 00:32:19.106 align:middle line:-2
最后如果你要包含
Apple Root CA证书

00:32:19.173 --> 00:32:22.543 align:middle line:-1
你需要验证从网上获取的收据

00:32:22.743 --> 00:32:24.411 align:middle line:-1
你能找到很多的文档

00:32:24.611 --> 00:32:26.947 align:middle line:-2
但要留意
该收据的过期时间

00:32:30.484 --> 00:32:33.654 align:middle line:-2
正如我之前提到的那样
有很多的解决方案

00:32:34.288 --> 00:32:37.591 align:middle line:-2
但请记住
便利是有代价的

00:32:37.791 --> 00:32:40.594 align:middle line:-2
这是你的生意
你需要了解并认识到

00:32:40.661 --> 00:32:43.430 align:middle line:-1
伴随着你所实施的解决方案的风险

00:32:44.331 --> 00:32:47.701 align:middle line:-2
如果你用了一些流行的
第三方解决方案

00:32:47.768 --> 00:32:49.403 align:middle line:-1
并且其中有个漏洞

00:32:50.137 --> 00:32:52.539 align:middle line:-1
那么你的app也会变得脆弱

00:32:54.041 --> 00:32:55.242 align:middle line:-1
这是你的收入流

00:32:55.309 --> 00:32:58.245 align:middle line:-1
请确保你了解你所选择的产品

00:33:02.115 --> 00:33:04.651 align:middle line:-1
我提过了

00:33:04.718 --> 00:33:06.320 align:middle line:-1
在收据中有签名和证书

00:33:07.087 --> 00:33:11.658 align:middle line:-1
我们的好办法就是 不要检查

00:33:11.725 --> 00:33:15.062 align:middle line:-2
收据中的这些证书的过期时间
是否与当前时间一致

00:33:15.729 --> 00:33:19.566 align:middle line:-2
首先 用户其实是可以
改变设备上时间的

00:33:20.667 --> 00:33:27.241 align:middle line:-1
更重要的是

00:33:27.307 --> 00:33:29.943 align:middle line:-2
就因为证书过期了
并不代表收据就无效

00:33:30.711 --> 00:33:32.312 align:middle line:-1
你应该将其与

00:33:32.379 --> 00:33:34.982 align:middle line:-1
收据上的交易日期进行比较

00:33:35.048 --> 00:33:39.720 align:middle line:-2
只要所有的交易
都在证书过期之前发生

00:33:39.987 --> 00:33:41.021 align:middle line:-1
那这就是有效的收据

00:33:44.157 --> 00:33:47.427 align:middle line:-1
让我们深入了解下收据内的内容

00:33:48.495 --> 00:33:52.399 align:middle line:-1
购买信息只包含了一些类型和属性

00:33:53.133 --> 00:33:55.669 align:middle line:-1
在这里你可以看到有一个包标识符

00:33:56.436 --> 00:33:58.572 align:middle line:-1
以及与之相伴的其他一些值

00:34:01.375 --> 00:34:04.678 align:middle line:-2
如果你要检查收据
是否适用于你的app

00:34:05.045 --> 00:34:07.181 align:middle line:-1
首先你需要检查该包标识符

00:34:07.781 --> 00:34:09.583 align:middle line:-1
你还需要检查类型3

00:34:09.815 --> 00:34:12.252 align:middle line:-1
它会给你提供app的版本

00:34:14.087 --> 00:34:15.722 align:middle line:-1
但这里最好的做法是

00:34:15.989 --> 00:34:17.591 align:middle line:-1
使用硬编码的值

00:34:17.658 --> 00:34:20.661 align:middle line:-2
不要只从app的
Info.plist中读取

00:34:20.726 --> 00:34:25.065 align:middle line:-2
将Info.plist
更改为无效收据

00:34:25.132 --> 00:34:26.600 align:middle line:-1
欺骗你的app运行非常容易

00:34:27.801 --> 00:34:31.338 align:middle line:-1
现在你已经将这个包标识符

00:34:31.405 --> 00:34:33.873 align:middle line:-1
和版本与收据进行了匹配

00:34:33.940 --> 00:34:36.009 align:middle line:-1
你需要确保它对你的设备有效

00:34:36.210 --> 00:34:38.812 align:middle line:-2
要这么做的话
你要用属性5

00:34:39.279 --> 00:34:43.550 align:middle line:-2
属性5是一些值的
shawl SHA-1哈希值

00:34:44.484 --> 00:34:47.588 align:middle line:-2
包括包标识符
设备标识符

00:34:47.654 --> 00:34:51.391 align:middle line:-1
这些表示了正在运行app的硬件

00:34:51.859 --> 00:34:53.126 align:middle line:-1
和一个不透明的值

00:34:53.493 --> 00:34:55.362 align:middle line:-1
这是一个神秘的不稳定的熵

00:34:55.429 --> 00:34:58.932 align:middle line:-2
它会随着时间而改变
我们将它作为类型4存储在收据中

00:34:59.399 --> 00:35:05.606 align:middle line:-2
你要用这三个值
来生成你的SHA-1哈希值并进行比较

00:34:59.399 --> 00:35:05.606 align:middle line:-2
你要用这三个值
来生成你的SHA-1哈希值并进行比较

00:35:06.073 --> 00:35:07.207 align:middle line:-1
如果它与

00:35:07.774 --> 00:35:09.743 align:middle line:-2
收据中所生成
的内容匹配

00:35:09.810 --> 00:35:14.281 align:middle line:-2
那么你就可以知道该收据是为
这台设备上你的app生成的

00:35:17.351 --> 00:35:19.887 align:middle line:-1
那么如果你收到无效的收据

00:35:21.221 --> 00:35:23.457 align:middle line:-2
或是不管出于何种原因
它不存在呢？

00:35:24.858 --> 00:35:29.429 align:middle line:-2
StoreKit为你提供了从
App Store请求新收据的API

00:35:30.163 --> 00:35:33.300 align:middle line:-1
收据来自我们的商业后台

00:35:33.367 --> 00:35:35.435 align:middle line:-1
所以你需要连网

00:35:35.502 --> 00:35:37.771 align:middle line:-1
才能完成这个操作

00:35:38.605 --> 00:35:42.042 align:middle line:-1
为了确保我们使用的是

00:35:42.109 --> 00:35:44.178 align:middle line:-1
来自真实的用户的真实收据

00:35:44.244 --> 00:35:46.013 align:middle line:-1
你需要用一个登录界面

00:35:48.382 --> 00:35:49.783 align:middle line:-1
当你收到更新的收据时

00:35:49.850 --> 00:35:51.418 align:middle line:-1
你需要小心地避免

00:35:51.485 --> 00:35:54.555 align:middle line:-1
任何形式的连续循环验证和刷新

00:35:54.621 --> 00:35:57.191 align:middle line:-2
如果你收到更新的收据
请检查一下

00:35:57.257 --> 00:35:59.560 align:middle line:-1
如果它仍然无效 你就需要报告错误

00:36:00.494 --> 00:36:02.095 align:middle line:-1
它在代码中看起来是什么样的？

00:36:02.829 --> 00:36:05.799 align:middle line:-2
你只需要调用
SKReceiptRefreshRequest

00:36:05.999 --> 00:36:09.970 align:middle line:-2
你只要在ReceiptRefresh上
设定你的购买队列代理

00:36:10.037 --> 00:36:12.840 align:middle line:-2
你调用开始后
收据就可以获得更新

00:36:12.906 --> 00:36:15.008 align:middle line:-2
我们会进行回调
让你知道何时会这么做

00:36:17.244 --> 00:36:20.714 align:middle line:-2
在macOS上
你也可以调用exit 173

00:36:20.781 --> 00:36:23.984 align:middle line:-1
173代码会告诉操作系统

00:36:24.051 --> 00:36:28.722 align:middle line:-2
并且让StoreKit
以你的名义刷新收据

00:36:29.256 --> 00:36:32.392 align:middle line:-2
在收到新的收据后
app就会重新启动

00:36:34.728 --> 00:36:38.565 align:middle line:-2
正如我前面提到的那样
我们现在允许非订阅app

00:36:38.632 --> 00:36:42.269 align:middle line:-2
进行免费试用
收据是一种很好的方式

00:36:42.336 --> 00:36:44.738 align:middle line:-1
在试用过程中对用户进行了解

00:36:44.805 --> 00:36:50.010 align:middle line:-2
或是让他们购买完整解锁的
非消耗性app内购买项目

00:36:52.079 --> 00:36:56.350 align:middle line:-2
要做到这一点
你会用到收据中的类型17

00:36:56.550 --> 00:36:59.820 align:middle line:-1
它包括了你所有的订阅中的可消耗性

00:36:59.887 --> 00:37:01.822 align:middle line:-1
与非消耗性app内购买项目

00:36:59.887 --> 00:37:01.822 align:middle line:-1
与非消耗性app内购买项目

00:37:03.223 --> 00:37:04.658 align:middle line:-1
在类型17中

00:37:04.925 --> 00:37:08.061 align:middle line:-1
有一些数据的副字典

00:37:10.464 --> 00:37:13.767 align:middle line:-1
类型1702就是

00:37:13.834 --> 00:37:17.671 align:middle line:-2
跟你非消耗性app内购买项目
有关的产品标识符

00:37:18.438 --> 00:37:22.543 align:middle line:-2
你要在这里查看
是不是我的非消耗性app购买

00:37:22.609 --> 00:37:24.711 align:middle line:-1
代表了试用的开始

00:37:24.778 --> 00:37:27.915 align:middle line:-2
还是说非消耗性app购买
代表的是完整app的解锁

00:37:29.249 --> 00:37:31.285 align:middle line:-1
你还会用到类型1704

00:37:31.351 --> 00:37:33.020 align:middle line:-1
你可以检查购买日期

00:37:33.086 --> 00:37:35.389 align:middle line:-2
也就是什么时候进行了
消耗性app内购买

00:37:38.358 --> 00:37:40.594 align:middle line:-1
那么你要用什么算法呢？

00:37:40.661 --> 00:37:43.897 align:middle line:-1
首先你要遍历所有类型为17

00:37:43.964 --> 00:37:45.966 align:middle line:-1
的app内购买项目

00:37:47.034 --> 00:37:51.104 align:middle line:-2
如果你在收据中找到
任何可以匹配产品标识符的信息

00:37:51.171 --> 00:37:54.708 align:middle line:-2
这说明你已完成了
app的完全解锁

00:37:54.775 --> 00:37:58.245 align:middle line:-2
你知道用户已经购买了
你app的完全解锁

00:37:58.312 --> 00:37:59.713 align:middle line:-1
为他们提供了访问权限

00:38:01.215 --> 00:38:05.352 align:middle line:-2
相应地 如果你找到了
免费试用产品标识符

00:38:05.419 --> 00:38:08.989 align:middle line:-2
产品标识符表示了
用户开始了免费试用

00:38:09.056 --> 00:38:11.458 align:middle line:-1
你需要查看与该免费试用

00:38:11.525 --> 00:38:12.659 align:middle line:-1
相关的购买日期

00:38:13.627 --> 00:38:15.195 align:middle line:-1
这里会有些棘手的地方

00:38:15.963 --> 00:38:18.031 align:middle line:-1
你不能总是相信设备上的时钟

00:38:18.098 --> 00:38:19.566 align:middle line:-1
用户是可以更改时钟的

00:38:19.633 --> 00:38:21.835 align:middle line:-2
所以你想使用
自己的后台服务器

00:38:21.902 --> 00:38:24.071 align:middle line:-1
或某些时间服务器来确保

00:38:24.137 --> 00:38:26.673 align:middle line:-1
仍在你的免费试用期的话

00:38:27.641 --> 00:38:30.010 align:middle line:-1
还有些设备检查API

00:38:30.077 --> 00:38:32.479 align:middle line:-2
我强烈建议你们看看
可以帮助你确定用户

00:38:32.546 --> 00:38:35.349 align:middle line:-1
是否已经完成了

00:38:35.415 --> 00:38:37.885 align:middle line:-1
先前在该设备上的免费试用窗口

00:38:39.686 --> 00:38:43.590 align:middle line:-2
最后如果两者均不存在
那你就可以显示

00:38:43.657 --> 00:38:47.528 align:middle line:-2
免费试用追加销售
来开始免费试用

00:38:47.594 --> 00:38:50.130 align:middle line:-1
但是你需要确保 你告知了

00:38:50.197 --> 00:38:52.065 align:middle line:-1
他们免费试用的长度

00:38:52.132 --> 00:38:56.470 align:middle line:-2
让他们知晓如果他们不购买解锁版
他们将失去的内容

00:38:56.537 --> 00:38:58.739 align:middle line:-1
以及完全解锁的最终价格

00:39:01.642 --> 00:39:03.944 align:middle line:-2
若你已在App Store中
上架了app

00:39:04.011 --> 00:39:05.579 align:middle line:-1
你正在销售它

00:39:05.646 --> 00:39:09.016 align:middle line:-2
或你在使用订阅模型
你想转而使用新的免费试用

00:39:09.983 --> 00:39:12.085 align:middle line:-1
你还可以利用收据来实现一些功能

00:39:12.152 --> 00:39:13.487 align:middle line:-1
来让这一过程更为容易

00:39:14.588 --> 00:39:17.724 align:middle line:-1
如果你已经提前付清并转到了订阅

00:39:17.791 --> 00:39:18.992 align:middle line:-1
或是你付清了

00:39:19.059 --> 00:39:23.130 align:middle line:-2
提前付清了 并且你想转而使用
免费使用的话 请使用类型19

00:39:23.730 --> 00:39:26.233 align:middle line:-2
它会告诉你用户从App Store中
所购买的app的

00:39:26.300 --> 00:39:29.036 align:middle line:-1
初始版本

00:39:29.903 --> 00:39:32.539 align:middle line:-2
即使他们删除了app
并重复下载它

00:39:32.606 --> 00:39:37.244 align:middle line:-2
类型19会告诉你
他们购买的app到底是什么版本

00:39:39.446 --> 00:39:42.416 align:middle line:-1
如果用户确实提前付款了

00:39:42.749 --> 00:39:45.752 align:middle line:-1
请确保为他们提供他们购买的功能

00:39:46.220 --> 00:39:48.322 align:middle line:-1
因为你转到了订阅模型

00:39:48.522 --> 00:39:52.259 align:middle line:-2
而他们在App Store
购买的是付款版本

00:39:52.326 --> 00:39:56.163 align:middle line:-2
你需要让他们可以访问
他们原来付费购买过的内容

00:39:58.098 --> 00:40:02.569 align:middle line:-1
所以我们要使用收据中的类型19

00:39:58.098 --> 00:40:02.569 align:middle line:-1
所以我们要使用收据中的类型19

00:40:02.636 --> 00:40:03.837 align:middle line:-1
来了解他们购买了app的什么内容

00:40:05.839 --> 00:40:08.976 align:middle line:-2
我们今天介绍了很多内容
我们介绍了推广性定价

00:40:09.042 --> 00:40:13.380 align:middle line:-2
这是个不错的方法
来吸引新用户订阅

00:40:13.780 --> 00:40:16.016 align:middle line:-2
如果你在推销你的
订阅app内购买项目的话

00:40:17.050 --> 00:40:19.987 align:middle line:-2
你可以直接在App Store上
显示内容

00:40:20.954 --> 00:40:25.425 align:middle line:-2
我还介绍了
你应该如何提供app中的

00:40:25.492 --> 00:40:26.693 align:middle line:-1
非订阅免费试用

00:40:27.761 --> 00:40:31.698 align:middle line:-2
我们介绍了SKStoreReviewController
以及开发者

00:40:31.765 --> 00:40:33.467 align:middle line:-1
对它的反响有多好

00:40:33.534 --> 00:40:36.036 align:middle line:-2
我们今年如何将其引入了
Mac App Store上

00:40:37.070 --> 00:40:41.408 align:middle line:-2
我们还介绍了沙盒环境
以及现在我们如何从

00:40:41.475 --> 00:40:44.811 align:middle line:-2
你的常规iTunes和App Store生产账号中
将沙盒账号分出来单独管理

00:40:45.679 --> 00:40:48.348 align:middle line:-1
Ross很好地介绍了在处理交易时

00:40:48.415 --> 00:40:52.719 align:middle line:-2
你需要留意的事情
包括保证尽早观察

00:40:52.786 --> 00:40:56.256 align:middle line:-2
并且知道什么时候要调用
FinishTransaction

00:40:56.590 --> 00:40:59.960 align:middle line:-1
最后我介绍了关于如何

00:41:00.027 --> 00:41:02.462 align:middle line:-2
在设备上验证app中
收据的一些方法

00:41:02.529 --> 00:41:06.233 align:middle line:-2
以保证你的免费试用
可以顺畅地使用收据

00:41:08.135 --> 00:41:08.969 align:middle line:-1
要了解更多的有关信息

00:41:09.036 --> 00:41:12.072 align:middle line:-2
我强烈建议你们坚持
去听下“工程订阅”这个演讲

00:41:12.139 --> 00:41:14.408 align:middle line:-1
如果你有订阅业务模型的话

00:41:14.575 --> 00:41:17.277 align:middle line:-1
我们今天下午四点钟还有个实验室

00:41:17.344 --> 00:41:19.613 align:middle line:-1
然后周四早上9点还有一个实验室

00:41:19.680 --> 00:41:22.382 align:middle line:-2
我们很乐意回答你的问题
并尽我们所能帮助你

00:41:22.783 --> 00:41:23.984 align:middle line:-1
非常感谢大家的光临
