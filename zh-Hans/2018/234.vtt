WEBVTT

00:00:07.516 --> 00:00:15.500 A:middle
[ 音乐 ]

00:00:21.516 --> 00:00:24.546 A:middle
[ 掌声 ]

00:00:25.046 --> 00:00:27.986 A:middle
&gt;&gt; 各位 下午好

00:00:29.536 --> 00:00:30.756 A:middle
好的

00:00:31.116 --> 00:00:32.896 A:middle
我希望你们到目前为止

00:00:32.936 --> 00:00:33.356 A:middle
仍在享受着 WWDC

00:00:33.356 --> 00:00:34.636 A:middle
我知道 过去的这个星期是令人激动的

00:00:34.636 --> 00:00:36.336 A:middle
一个星期 各种公告

00:00:36.336 --> 00:00:38.496 A:middle
新功能 软件更新 开发者工具 接踵而来

00:00:39.196 --> 00:00:41.706 A:middle
我的名字是 Shloka Kini

00:00:41.706 --> 00:00:43.256 A:middle
我在开发者出版物部门任职

00:00:43.256 --> 00:00:46.066 A:middle
也就是说 借一句 Cardi B. 的歌词

00:00:46.066 --> 00:00:48.976 A:middle
“我现在不仅编程” “还要写文件”

00:00:49.516 --> 00:00:51.886 A:middle
[ 笑声 ]

00:00:52.386 --> 00:00:53.896 A:middle
尤其是撰写

00:00:53.896 --> 00:00:55.606 A:middle
能够帮助你们编出精彩 App 的

00:00:55.606 --> 00:00:56.286 A:middle
说明文档

00:00:57.476 --> 00:00:58.956 A:middle
今天 我有幸向大家介绍

00:00:58.956 --> 00:01:01.596 A:middle
一些 Safari 和 WebKit 的新功能

00:00:58.956 --> 00:01:01.596 A:middle
一些 Safari 和 WebKit 的新功能

00:01:01.756 --> 00:01:03.486 A:middle
所以 如果你在设计网站

00:01:03.486 --> 00:01:06.926 A:middle
并且想应用最新的网络科技

00:01:06.926 --> 00:01:08.836 A:middle
最新版本的 Safari

00:01:08.836 --> 00:01:09.336 A:middle
那这场演讲正适合你

00:01:09.816 --> 00:01:12.426 A:middle
如果你是一名使用网页视图的 App 开发人员

00:01:12.496 --> 00:01:14.876 A:middle
或者是扩展程序的开发人员

00:01:14.876 --> 00:01:15.856 A:middle
这场演讲也会对你有所帮助

00:01:16.376 --> 00:01:17.486 A:middle
还有 哪怕你并不在

00:01:17.486 --> 00:01:18.476 A:middle
我刚才提到的任何一个领域内任职

00:01:18.476 --> 00:01:20.136 A:middle
你依然应该坐下来听听

00:01:20.136 --> 00:01:21.726 A:middle
因为 Safari 的最新版本

00:01:21.726 --> 00:01:23.036 A:middle
拥有一些非常棒的功能

00:01:23.036 --> 00:01:24.466 A:middle
能够提升你的浏览体验

00:01:25.226 --> 00:01:28.076 A:middle
现在 已经出现了很多

00:01:28.076 --> 00:01:29.936 A:middle
很多新的改进

00:01:29.936 --> 00:01:31.256 A:middle
尤其是我们举办了 What's New 演讲之后

00:01:31.256 --> 00:01:32.626 A:middle
不过今天

00:01:32.626 --> 00:01:34.046 A:middle
我将着重介绍其中的一部分改进

00:01:34.046 --> 00:01:35.936 A:middle
它们真的能帮你写出安全的

00:01:36.956 --> 00:01:38.156 A:middle
具有良好性能的 App

00:01:38.156 --> 00:01:39.986 A:middle
融入最新的科技 以得到最丰富的体验

00:01:40.266 --> 00:01:41.766 A:middle
而且 它们中的很多都是免费的

00:01:42.476 --> 00:01:44.616 A:middle
那么 让我们从安全开始讲起

00:01:44.926 --> 00:01:49.496 A:middle
还有一些公告声明 WKWebView

00:01:49.496 --> 00:01:50.856 A:middle
我知道你们在想什么

00:01:50.956 --> 00:01:53.096 A:middle
WKWebView 自从 2014 年起

00:01:53.096 --> 00:01:57.956 A:middle
就出现了 严格来讲

00:01:57.956 --> 00:01:58.086 A:middle
它不是新事物

00:01:58.786 --> 00:02:00.316 A:middle
然而 它还是值得再次被提起

00:01:58.786 --> 00:02:00.316 A:middle
然而 它还是值得再次被提起

00:02:00.316 --> 00:02:03.976 A:middle
因为现在我们正式地反对 UIWebView

00:02:04.516 --> 00:02:08.996 A:middle
[ 掌声 ]

00:02:09.496 --> 00:02:10.806 A:middle
所以 如果你正在编写一个新的 App

00:02:10.806 --> 00:02:12.486 A:middle
或者一个新的项目

00:02:12.486 --> 00:02:13.996 A:middle
你想要展示一些 web 内容

00:02:13.996 --> 00:02:16.346 A:middle
但它们很难以原生视图展示

00:02:16.346 --> 00:02:18.426 A:middle
请使用 WKWebView

00:02:18.916 --> 00:02:21.806 A:middle
另外 即便你以前使用过 UIWebView

00:02:21.806 --> 00:02:22.936 A:middle
转换也并不困难

00:02:23.516 --> 00:02:25.916 A:middle
如果你是在 macOS 和 iOS 两个平台同时进行

00:02:25.916 --> 00:02:27.596 A:middle
开发工作 它绝对可以在开发 App 方面帮你节省时间

00:02:27.596 --> 00:02:31.796 A:middle
因为 WKWebView 在两个平台都适用

00:02:32.216 --> 00:02:34.396 A:middle
而 UIWebView 是针对 iOS 的

00:02:34.476 --> 00:02:35.336 A:middle
WebView 则是针对 macOS 的

00:02:35.336 --> 00:02:37.396 A:middle
所以 你可以共享很多的程序代码

00:02:37.396 --> 00:02:38.526 A:middle
在这两个版本之间

00:02:39.926 --> 00:02:41.946 A:middle
另外 WKWebView 也能

00:02:41.946 --> 00:02:43.436 A:middle
在一个完全单独的过程中运行

00:02:43.436 --> 00:02:44.646 A:middle
独立于你 App 的其他部分

00:02:44.766 --> 00:02:46.936 A:middle
所以 和 UIWebView 不同

00:02:46.936 --> 00:02:48.746 A:middle
即使你的 web 进程受到损害

00:02:49.086 --> 00:02:50.816 A:middle
它也不会影响你的 App

00:02:50.816 --> 00:02:52.386 A:middle
如果你的网页视图有

00:02:52.456 --> 00:02:54.576 A:middle
复杂的内容

00:02:54.576 --> 00:02:55.766 A:middle
也不会使你的 App 意外中止

00:02:56.296 --> 00:02:58.626 A:middle
而且 即使 WKWebView 崩溃了

00:02:59.726 --> 00:03:01.326 A:middle
它也只局限于网页视图的框架内

00:02:59.726 --> 00:03:01.326 A:middle
它也只局限于网页视图的框架内

00:03:01.796 --> 00:03:03.596 A:middle
而非整个 App

00:03:03.596 --> 00:03:05.816 A:middle
WKWebView 能够提供安全方面的优势

00:03:05.816 --> 00:03:07.536 A:middle
同时保证你的 App

00:03:07.586 --> 00:03:08.936 A:middle
性能卓越 值得信赖

00:03:09.466 --> 00:03:10.696 A:middle
所以 不管转换到 WKWebView 是复杂还是简单

00:03:10.696 --> 00:03:12.546 A:middle
你从中得到的种种好处

00:03:12.546 --> 00:03:14.766 A:middle
都令人觉得 这种改变是值得的

00:03:15.316 --> 00:03:18.556 A:middle
接下来的一个声明包含扩展

00:03:18.756 --> 00:03:20.946 A:middle
不过拓展 Safari

00:03:20.946 --> 00:03:24.476 A:middle
我的意思是 它在过去这些年来

00:03:24.576 --> 00:03:25.716 A:middle
已经改进了很多

00:03:26.446 --> 00:03:27.736 A:middle
那么 我们一开始就先快速

00:03:27.736 --> 00:03:31.336 A:middle
回顾一下 Safari 扩展的历史

00:03:32.116 --> 00:03:34.066 A:middle
在 2010 年 在我们建立起

00:03:34.246 --> 00:03:35.496 A:middle
App 可扩展性的平台概念之前

00:03:35.646 --> 00:03:39.486 A:middle
当时只有最初版本 Safari 扩展

00:03:40.106 --> 00:03:42.096 A:middle
那些是 Safari EXTZ 文档

00:03:42.096 --> 00:03:43.876 A:middle
你可以在 Safari Extensions Builder

00:03:43.876 --> 00:03:44.816 A:middle
中建立这些文档

00:03:45.266 --> 00:03:46.216 A:middle
它们可以通过 Safari Extensions Gallery 库

00:03:46.216 --> 00:03:47.466 A:middle
被分配出去

00:03:47.466 --> 00:03:49.116 A:middle
或者 在一些不常见的例子中

00:03:49.116 --> 00:03:51.036 A:middle
直接被开发人员分配出去

00:03:51.986 --> 00:03:53.476 A:middle
这些最初版本的扩展

00:03:53.476 --> 00:03:55.216 A:middle
都具有不可思议的强大威力

00:03:55.256 --> 00:03:56.666 A:middle
因为它们能获取你所有的

00:03:56.666 --> 00:03:59.056 A:middle
浏览数据

00:03:59.056 --> 00:04:00.896 A:middle
你也会因此变得更“受欢迎”

00:03:59.056 --> 00:04:00.896 A:middle
你也会因此变得更“受欢迎”

00:04:00.896 --> 00:04:01.406 A:middle
尤其易受诈骗和恶意软件的侵扰

00:04:02.236 --> 00:04:03.556 A:middle
我们需要去建立一个安全防火墙

00:04:03.556 --> 00:04:04.876 A:middle
那就是为什么我们没有

00:04:04.876 --> 00:04:06.546 A:middle
在最初版本的 Safari 扩展那里

00:04:06.546 --> 00:04:07.136 A:middle
停止工作

00:04:07.136 --> 00:04:09.046 A:middle
那么 我们故事发展的下一个里程碑

00:04:09.046 --> 00:04:12.036 A:middle
出现在 2014 年

00:04:12.036 --> 00:04:13.976 A:middle
那时 我们为 macOS 和 iOS 两个平台都

00:04:13.976 --> 00:04:15.536 A:middle
建立了 App 可扩展性能

00:04:15.756 --> 00:04:18.875 A:middle
不过 App 扩展是

00:04:18.875 --> 00:04:22.106 A:middle
扩展 App 的一种方式 而不是 Safari 的扩展方式

00:04:22.336 --> 00:04:24.126 A:middle
但重要的是 这个举动极大地改变了

00:04:24.126 --> 00:04:25.436 A:middle
我们对于扩展的理解

00:04:25.436 --> 00:04:26.996 A:middle
在苹果的各个平台上

00:04:27.486 --> 00:04:29.096 A:middle
在这里 你可以明确地扩展系统

00:04:29.096 --> 00:04:30.306 A:middle
与此同时 用户可以

00:04:30.346 --> 00:04:32.356 A:middle
与其他 App 进行互动

00:04:32.356 --> 00:04:33.616 A:middle
而且和 App 一样

00:04:33.616 --> 00:04:34.496 A:middle
它们可以建立在 Xcode 开发环境下

00:04:35.236 --> 00:04:37.936 A:middle
由于这个更好的扩展模型的出现

00:04:37.936 --> 00:04:39.226 A:middle
我们想要将这些概念中的一部分

00:04:39.516 --> 00:04:41.656 A:middle
在返回到最初版本 Safari 扩展中进行应用

00:04:41.656 --> 00:04:45.986 A:middle
而在当时 最受欢迎的一些是广告拦截器

00:04:46.596 --> 00:04:48.506 A:middle
于是 我们在 2015 年引入了

00:04:48.506 --> 00:04:50.306 A:middle
内容拦截器

00:04:51.046 --> 00:04:52.506 A:middle
内容拦截器是一种在 Xcode 开发环境下

00:04:52.506 --> 00:04:54.446 A:middle
的 App 扩展

00:04:54.556 --> 00:04:56.466 A:middle
它在 macOS 和 iOS 系统下都能够使用

00:04:57.106 --> 00:04:58.386 A:middle
它们所拥有的特殊结构

00:04:58.386 --> 00:04:59.086 A:middle
令其可以快速运行

00:04:59.786 --> 00:05:01.646 A:middle
因此 任何内容拦截器

00:04:59.786 --> 00:05:01.646 A:middle
因此 任何内容拦截器

00:05:01.646 --> 00:05:03.176 A:middle
在拦截方面都比

00:05:03.176 --> 00:05:04.606 A:middle
任何最初版本 Safari 扩展都要快速

00:05:05.376 --> 00:05:06.456 A:middle
它们不会降低

00:05:06.556 --> 00:05:08.236 A:middle
浏览速度的能力

00:05:08.286 --> 00:05:09.906 A:middle
而且保护隐私 因为这些扩展

00:05:09.906 --> 00:05:11.666 A:middle
永远看不到你的用户在

00:05:11.666 --> 00:05:12.386 A:middle
浏览什么网页

00:05:13.296 --> 00:05:14.876 A:middle
在这一点上

00:05:14.876 --> 00:05:16.516 A:middle
App 扩展模型提供了如此多的

00:05:16.516 --> 00:05:17.976 A:middle
性能优势 于是我们想

00:05:18.316 --> 00:05:19.536 A:middle
或许我们能把这些概念

00:05:19.536 --> 00:05:20.996 A:middle
带回到最初版本

00:05:20.996 --> 00:05:22.686 A:middle
Safari 扩展

00:05:22.686 --> 00:05:23.946 A:middle
那样我们就能在两方面都得到最佳结果

00:05:24.896 --> 00:05:26.416 A:middle
一个能够扩展 Safari 功能性

00:05:26.416 --> 00:05:28.956 A:middle
的扩展功能 同样它也能

00:05:28.956 --> 00:05:30.866 A:middle
扩展你的 App

00:05:30.866 --> 00:05:31.276 A:middle
令它能和 Safari 对话

00:05:31.276 --> 00:05:34.666 A:middle
基于此在 2016 年 为 macOS 系统开发的

00:05:34.666 --> 00:05:37.016 A:middle
新版 Safari App 扩展问世了

00:05:37.186 --> 00:05:39.066 A:middle
这种扩展 Safari App 的方式

00:05:39.066 --> 00:05:40.296 A:middle
能够在 Xcode 的环境下进行编写

00:05:40.726 --> 00:05:42.236 A:middle
同时 不同于以往的 App 扩展

00:05:42.456 --> 00:05:43.366 A:middle
这次你可以通过 App store 获得 App 扩展

00:05:43.606 --> 00:05:46.396 A:middle
也就是说 这些扩展可以是免费的

00:05:46.396 --> 00:05:46.646 A:middle
也可以是收费的

00:05:46.816 --> 00:05:48.406 A:middle
无论是使用哪种方式

00:05:48.406 --> 00:05:49.076 A:middle
你都不需要自己买单

00:05:50.446 --> 00:05:52.226 A:middle
因此 与 2010 年的最初版本扩展相比

00:05:52.226 --> 00:05:54.486 A:middle
内容拦截器与

00:05:54.486 --> 00:05:55.666 A:middle
Safari App 扩展

00:05:55.666 --> 00:05:57.146 A:middle
具有非常大的优势

00:05:57.556 --> 00:05:58.806 A:middle
所以 你最应该做的事情就是

00:05:58.806 --> 00:06:00.116 A:middle
如果你还在使用最初版本的

00:05:58.806 --> 00:06:00.116 A:middle
如果你还在使用最初版本的

00:06:00.116 --> 00:06:03.736 A:middle
Safari 扩展 赶紧切换到 Safari App 扩展

00:06:03.806 --> 00:06:05.086 A:middle
同样 如果你还在使用广告拦截器

00:06:05.086 --> 00:06:07.086 A:middle
请切换到内容拦截器

00:06:07.866 --> 00:06:08.996 A:middle
现在 我们已经将这些工作全部完成

00:06:08.996 --> 00:06:11.136 A:middle
我们还能用最初版本的

00:06:11.136 --> 00:06:13.396 A:middle
Safari 扩展做什么呢

00:06:13.396 --> 00:06:14.266 A:middle
难道去诈骗吗

00:06:14.936 --> 00:06:17.566 A:middle
从 Safari 12 开始

00:06:17.566 --> 00:06:19.556 A:middle
我们已经正式停止了对

00:06:19.556 --> 00:06:21.376 A:middle
Safari Extensions Gallery 之外的

00:06:21.376 --> 00:06:23.666 A:middle
旧版扩展的支持

00:06:24.636 --> 00:06:26.126 A:middle
旧版的扩展仍然可以

00:06:26.126 --> 00:06:28.896 A:middle
在 Safari 12 中使用

00:06:28.956 --> 00:06:29.796 A:middle
只要它们还在 Gallery 库里

00:06:31.066 --> 00:06:32.316 A:middle
唯一的例外是

00:06:32.316 --> 00:06:33.986 A:middle
那些使用被弃用的 Can Load API 的扩展

00:06:34.036 --> 00:06:36.666 A:middle
我们将其默认为关闭状态

00:06:37.436 --> 00:06:38.566 A:middle
我们将继续接受

00:06:38.786 --> 00:06:40.466 A:middle
对 Gallery 库的申请

00:06:40.466 --> 00:06:41.706 A:middle
直到 2018 年年底为止

00:06:42.426 --> 00:06:44.106 A:middle
不过 我们将在接下来的一年时间里提供

00:06:44.136 --> 00:06:46.406 A:middle
更多的更新同时

00:06:46.406 --> 00:06:48.386 A:middle
将最终完成向 Safari App 扩展

00:06:48.716 --> 00:06:50.166 A:middle
的彻底转型

00:06:50.526 --> 00:06:52.066 A:middle
因此 现在你最该要做的事情就是

00:06:52.246 --> 00:06:53.166 A:middle
赶紧学会如何在这两种模型下

00:06:53.166 --> 00:06:54.626 A:middle
开发扩展 App

00:06:54.936 --> 00:06:56.106 A:middle
那么 怎么学习呢

00:06:56.376 --> 00:06:59.586 A:middle
请查看教学文档 在此感谢开发人员

00:06:59.586 --> 00:06:59.976 A:middle
出版物部门

00:07:00.516 --> 00:07:07.076 A:middle
[ 掌声 ]

00:07:07.576 --> 00:07:09.076 A:middle
到现在为止 我们已经宣布完了两条

00:07:09.076 --> 00:07:11.316 A:middle
针对使用 WebViews 的本体开发人员

00:07:11.316 --> 00:07:12.866 A:middle
以及扩展开发人员

00:07:12.866 --> 00:07:14.376 A:middle
的最重要的公告

00:07:14.376 --> 00:07:15.656 A:middle
这些功能的其余部分

00:07:15.716 --> 00:07:17.906 A:middle
主要是关于如何进行 web 开发

00:07:18.346 --> 00:07:20.756 A:middle
下面 让我们从子资源的完整性开始说起

00:07:21.626 --> 00:07:23.286 A:middle
现在 作为一名开发人员 你可能

00:07:23.356 --> 00:07:26.596 A:middle
通过 HTTPS 连接 向用户输送你的内容

00:07:26.596 --> 00:07:28.546 A:middle
并且 由此产生的内容

00:07:28.676 --> 00:07:31.056 A:middle
可能还包含由第三方服务器发布的

00:07:31.056 --> 00:07:33.356 A:middle
部分内容

00:07:33.356 --> 00:07:34.696 A:middle
比如一个内容输送网络

00:07:35.576 --> 00:07:36.876 A:middle
这两个连接可能都是

00:07:36.876 --> 00:07:39.316 A:middle
安全可靠的 可能都使用 HTTPS

00:07:39.806 --> 00:07:40.906 A:middle
这也就意味着你保有

00:07:41.126 --> 00:07:43.156 A:middle
机密性 身份验证信息

00:07:43.156 --> 00:07:45.216 A:middle
以及传输数据的完整性

00:07:45.826 --> 00:07:48.326 A:middle
但是 万一第三方服务器本身

00:07:48.326 --> 00:07:51.726 A:middle
受损害了怎么办 这也不是没有可能

00:07:52.296 --> 00:07:54.526 A:middle
在这种情况下  HTTPS 连接

00:07:54.526 --> 00:07:56.256 A:middle
仅能够确保连接

00:07:56.256 --> 00:07:58.816 A:middle
但它不能确保服务器没有受损

00:07:59.436 --> 00:08:01.356 A:middle
它可以修改脚本

00:07:59.436 --> 00:08:01.356 A:middle
它可以修改脚本

00:08:01.356 --> 00:08:03.086 A:middle
同时变换你提供给用户的样式

00:08:03.086 --> 00:08:05.026 A:middle
在第三方服务器受到损害的情况下

00:08:06.156 --> 00:08:08.076 A:middle
子资源的完整性将保证

00:08:08.076 --> 00:08:10.936 A:middle
你不会给你的用户 提供受到损坏的脚本

00:08:10.936 --> 00:08:12.076 A:middle
那么 这是如何完成的呢

00:08:12.396 --> 00:08:13.566 A:middle
通过哈希算法

00:08:14.256 --> 00:08:15.626 A:middle
首先 你需要添加一个完整性属性

00:08:15.626 --> 00:08:17.196 A:middle
到一个脚本或者链接元素

00:08:17.196 --> 00:08:18.306 A:middle
在你的标记语言中

00:08:18.826 --> 00:08:20.316 A:middle
这个属性的数值是一个 hash

00:08:20.476 --> 00:08:21.786 A:middle
你使用安全的哈希算法

00:08:21.786 --> 00:08:22.986 A:middle
去创建这个 hash

00:08:23.306 --> 00:08:24.996 A:middle
当一个用户抓取了文件

00:08:25.286 --> 00:08:26.886 A:middle
那么另一个 hash 也就计算了出来

00:08:27.116 --> 00:08:28.456 A:middle
比较这两个 hash

00:08:28.456 --> 00:08:30.096 A:middle
如果它们不相同 则你的脚本

00:08:30.096 --> 00:08:31.106 A:middle
将不能被执行

00:08:31.846 --> 00:08:33.826 A:middle
这一过程确保

00:08:33.826 --> 00:08:35.535 A:middle
脚本在受损的情况下

00:08:35.535 --> 00:08:36.076 A:middle
将不会被执行

00:08:36.456 --> 00:08:38.616 A:middle
除非它们和你预期的相匹配

00:08:38.616 --> 00:08:41.476 A:middle
不然你的脚本将不会被执行

00:08:42.376 --> 00:08:43.726 A:middle
当然 为了保证你不会丢失掉

00:08:43.756 --> 00:08:45.306 A:middle
功能性 你还可以

00:08:45.306 --> 00:08:47.316 A:middle
提供一个回退处理用于重新加载

00:08:47.316 --> 00:08:49.026 A:middle
服务器里面的资源

00:08:49.026 --> 00:08:50.676 A:middle
在第三方服务器脚本

00:08:50.936 --> 00:08:51.896 A:middle
不能执行的前提下

00:08:52.446 --> 00:08:55.516 A:middle
现在 阻止受损的资源

00:08:55.516 --> 00:08:57.636 A:middle
不让它们去执行

00:08:57.816 --> 00:08:58.706 A:middle
就能确保用户的安全

00:08:59.086 --> 00:09:01.816 A:middle
而且 智能跟踪预防法可以保证浏览

00:08:59.086 --> 00:09:01.816 A:middle
而且 智能跟踪预防法可以保证浏览

00:09:01.816 --> 00:09:02.786 A:middle
体验的隐私性

00:09:03.296 --> 00:09:04.376 A:middle
好的 我知道你们可能听说过

00:09:04.376 --> 00:09:05.826 A:middle
智能跟踪预防法这个词

00:09:05.946 --> 00:09:06.626 A:middle
在 Keynote 上

00:09:06.676 --> 00:09:08.386 A:middle
这是 Safari 的一个功能

00:09:08.386 --> 00:09:10.326 A:middle
它可以降低交叉网站的跟踪度

00:09:10.326 --> 00:09:12.126 A:middle
通过限制带有跟踪能力的

00:09:12.126 --> 00:09:13.836 A:middle
cookies 和网站关于域的数据的方式

00:09:14.416 --> 00:09:15.636 A:middle
另外 在之前的版本中

00:09:15.906 --> 00:09:17.966 A:middle
cookies 是通过两个规则来保留的

00:09:18.396 --> 00:09:19.996 A:middle
第一个规则是 cookies 可以在用户与第一方

00:09:19.996 --> 00:09:22.276 A:middle
产生互动的 24 小时内

00:09:22.586 --> 00:09:25.446 A:middle
被第三方所使用

00:09:25.916 --> 00:09:28.166 A:middle
第二个原则是 在 Safari 使用的 30 天内

00:09:28.166 --> 00:09:30.336 A:middle
包括最初的 24 小时

00:09:30.336 --> 00:09:31.806 A:middle
那些 cookies 将被

00:09:31.836 --> 00:09:33.856 A:middle
单独存储

00:09:33.856 --> 00:09:34.556 A:middle
然后才被删除

00:09:34.966 --> 00:09:37.936 A:middle
不过 现在我们正在加强对它的控制

00:09:38.806 --> 00:09:40.856 A:middle
我们正在移除对于一般 cookie 的

00:09:40.856 --> 00:09:42.516 A:middle
24 小时接触窗口

00:09:42.516 --> 00:09:44.036 A:middle
针对带有跨站点追踪能力的域

00:09:45.316 --> 00:09:47.806 A:middle
不过 默认的情况是 所有的 cookies

00:09:47.806 --> 00:09:49.786 A:middle
都被单独存储

00:09:49.946 --> 00:09:51.596 A:middle
作为开发人员 我清楚经过可靠验证的嵌入

00:09:51.596 --> 00:09:53.786 A:middle
是非常重要的

00:09:54.006 --> 00:09:55.546 A:middle
对于你们的工作流以及

00:09:55.546 --> 00:09:57.036 A:middle
与 web 内容的互动来说

00:09:57.686 --> 00:09:58.666 A:middle
那么 你怎么才能准许

00:09:59.036 --> 00:09:59.976 A:middle
经过可靠验证的嵌入呢

00:10:01.656 --> 00:10:04.156 A:middle
那就是 使用 Storage Access API

00:10:04.916 --> 00:10:08.056 A:middle
使用了 Storage Access API

00:10:08.056 --> 00:10:10.116 A:middle
每当出现一个带有跨站点追踪的域

00:10:10.206 --> 00:10:11.446 A:middle
它希望在第三方背景下

00:10:11.496 --> 00:10:13.006 A:middle
获得 cookie

00:10:13.006 --> 00:10:14.826 A:middle
那么你需要

00:10:14.826 --> 00:10:16.866 A:middle
提出存储访问的请求

00:10:17.436 --> 00:10:19.016 A:middle
如果用户以前没有授权同意访问

00:10:19.016 --> 00:10:20.766 A:middle
就会出现提示框

00:10:20.766 --> 00:10:22.616 A:middle
询问用户是否允许

00:10:22.616 --> 00:10:25.256 A:middle
在这个站点

00:10:25.686 --> 00:10:26.596 A:middle
去访问 cookie

00:10:27.486 --> 00:10:29.036 A:middle
通过让用户给出

00:10:29.106 --> 00:10:31.026 A:middle
明确的是否允许访问 cookie 的意见

00:10:31.026 --> 00:10:33.306 A:middle
我们赋予了用户去

00:10:33.366 --> 00:10:35.096 A:middle
管控自己的 cookies 以及

00:10:35.136 --> 00:10:36.406 A:middle
哪些网站可以进行追踪的权力

00:10:36.886 --> 00:10:38.026 A:middle
令他们的浏览体验

00:10:38.026 --> 00:10:41.046 A:middle
更加具有私密性

00:10:41.046 --> 00:10:41.356 A:middle
如果他们愿意的话

00:10:42.136 --> 00:10:45.386 A:middle
接下来 我们来谈谈

00:10:45.386 --> 00:10:47.166 A:middle
使用自动填充强密码

00:10:47.246 --> 00:10:48.106 A:middle
进行身份验证

00:10:48.106 --> 00:10:50.556 A:middle
我相信你们已经在 State of the Union

00:10:50.586 --> 00:10:51.636 A:middle
以及几天前的演讲中看过这个了

00:10:51.906 --> 00:10:53.436 A:middle
自动填充强密码是一个

00:10:53.436 --> 00:10:55.296 A:middle
能够保证用户

00:10:55.296 --> 00:10:58.526 A:middle
选择并存储强密码的方法

00:10:58.756 --> 00:10:59.896 A:middle
当他们在设置

00:10:59.896 --> 00:11:00.356 A:middle
新账户的时候

00:10:59.896 --> 00:11:00.356 A:middle
新账户的时候

00:11:00.996 --> 00:11:02.066 A:middle
并且 这个功能其实对每个人都好

00:11:02.066 --> 00:11:03.926 A:middle
我是说 我喜欢把自己想象成

00:11:03.926 --> 00:11:05.416 A:middle
一个愿意选择使用

00:11:05.416 --> 00:11:06.866 A:middle
强密码的人

00:11:06.866 --> 00:11:08.716 A:middle
但是一段时间过后

00:11:08.716 --> 00:11:10.746 A:middle
我会逐渐发现我的密码 并没有想象中那么强

00:11:11.256 --> 00:11:12.376 A:middle
而且我可能已经在

00:11:12.376 --> 00:11:13.066 A:middle
好几处地方用过它了

00:11:14.276 --> 00:11:15.666 A:middle
对于大多数开发者来说

00:11:15.666 --> 00:11:16.886 A:middle
你不要费力就可以享用

00:11:16.886 --> 00:11:18.436 A:middle
这个功能 因为启发式算法会

00:11:18.436 --> 00:11:20.156 A:middle
判断你是在注册账户

00:11:20.156 --> 00:11:21.056 A:middle
还是在登录页面

00:11:21.526 --> 00:11:23.186 A:middle
不过 为了保证这个管用

00:11:23.566 --> 00:11:26.376 A:middle
无论登录流程是怎样的

00:11:26.376 --> 00:11:28.086 A:middle
需要把 AutoComplete 属性添加到

00:11:28.086 --> 00:11:29.446 A:middle
适当的那些输入栏中

00:11:30.226 --> 00:11:32.516 A:middle
现在 我们默认选择的强密码

00:11:32.516 --> 00:11:34.466 A:middle
是长度为 20 个字符

00:11:34.466 --> 00:11:35.926 A:middle
包括大写字母

00:11:36.276 --> 00:11:38.086 A:middle
和小写的字母

00:11:38.566 --> 00:11:39.426 A:middle
数字和连字符号

00:11:40.306 --> 00:11:41.436 A:middle
虽然这项功能被设计成能够

00:11:41.436 --> 00:11:42.466 A:middle
和大多数服务兼容

00:11:42.466 --> 00:11:43.846 A:middle
我们也承认

00:11:44.196 --> 00:11:45.986 A:middle
有些时候你的密码需要

00:11:45.986 --> 00:11:47.916 A:middle
符合某些特定的要求

00:11:47.916 --> 00:11:49.566 A:middle
才能与后台系统兼容

00:11:50.136 --> 00:11:51.516 A:middle
正因为这个原因

00:11:51.586 --> 00:11:53.486 A:middle
你可以添加一个 passwordRules 属性

00:11:53.486 --> 00:11:55.236 A:middle
到你的文本元素中去

00:11:55.236 --> 00:11:56.686 A:middle
来详细说明那些要求

00:11:57.176 --> 00:11:58.396 A:middle
另外 在开发者站点

00:11:58.486 --> 00:11:59.816 A:middle
有一个密码验证工具

00:11:59.816 --> 00:12:02.766 A:middle
帮你去测试自动填充强密码的兼容性

00:11:59.816 --> 00:12:02.766 A:middle
帮你去测试自动填充强密码的兼容性

00:12:02.766 --> 00:12:04.686 A:middle
并开发出

00:12:04.856 --> 00:12:06.646 A:middle
你自己的密码规则

00:12:08.396 --> 00:12:09.776 A:middle
另一项在 State of the Union 中提到的

00:12:09.776 --> 00:12:11.736 A:middle
功能是

00:12:11.786 --> 00:12:13.316 A:middle
Security Code AutoFill

00:12:13.346 --> 00:12:14.656 A:middle
这是另一项大多数人都将能够

00:12:14.656 --> 00:12:15.336 A:middle
免费获取的功能

00:12:15.766 --> 00:12:17.136 A:middle
这项功能我会加以好好利用

00:12:17.136 --> 00:12:18.936 A:middle
因为我发现

00:12:18.936 --> 00:12:20.256 A:middle
不停转换是件很麻烦的事

00:12:20.286 --> 00:12:22.536 A:middle
在我的 App 和 网站之间

00:12:22.536 --> 00:12:24.076 A:middle
还有信息 还要为代码

00:12:24.076 --> 00:12:25.636 A:middle
寻找那些数字

00:12:25.636 --> 00:12:27.126 A:middle
将它输入进去并尝试记住它

00:12:27.456 --> 00:12:29.096 A:middle
那么 让 Safari 计算出

00:12:29.466 --> 00:12:30.916 A:middle
我该在什么时候输入安全代码

00:12:30.916 --> 00:12:32.246 A:middle
然后在快速输入栏中

00:12:32.246 --> 00:12:33.106 A:middle
进行提示

00:12:33.376 --> 00:12:35.556 A:middle
这样会让过程更加便捷

00:12:36.346 --> 00:12:38.206 A:middle
而且 就像从前一样

00:12:38.256 --> 00:12:40.206 A:middle
你能免费得到这项功能

00:12:40.356 --> 00:12:41.666 A:middle
因为它使用的是启发式算法

00:12:41.666 --> 00:12:43.246 A:middle
不过为了确保这些算法能够正确运行

00:12:43.246 --> 00:12:44.786 A:middle
并且你能在快速输入栏里

00:12:44.846 --> 00:12:47.596 A:middle
获得提示 将输入区域

00:12:47.596 --> 00:12:50.896 A:middle
的 AutoComplete 属性标记为

00:12:51.026 --> 00:12:51.596 A:middle
one-time code value

00:12:52.266 --> 00:12:55.426 A:middle
想了解更多的话 希望你们能在线查看

00:12:55.476 --> 00:12:56.936 A:middle
Automatic Strong Passwords 以及

00:12:56.936 --> 00:12:58.956 A:middle
Security Code AutoFill 的板块

00:12:59.526 --> 00:13:01.946 A:middle
好 这就说完了安全问题

00:12:59.526 --> 00:13:01.946 A:middle
好 这就说完了安全问题

00:13:02.666 --> 00:13:04.556 A:middle
刚刚我们谈了更换到 WKWebView

00:13:04.556 --> 00:13:05.966 A:middle
然后聊了 Safari App 扩展的

00:13:05.966 --> 00:13:07.346 A:middle
内容拦截器

00:13:07.716 --> 00:13:09.476 A:middle
还有自资源完整性能够

00:13:09.476 --> 00:13:10.886 A:middle
自动防故障 确保你不会

00:13:10.886 --> 00:13:12.406 A:middle
向用户提供受损的脚本

00:13:12.406 --> 00:13:14.566 A:middle
还有智能追踪预防法

00:13:14.566 --> 00:13:16.146 A:middle
它通过 Storage Access API 改善用户的

00:13:16.146 --> 00:13:17.406 A:middle
隐私

00:13:17.506 --> 00:13:19.126 A:middle
然后 用自动填充强密码

00:13:19.126 --> 00:13:20.536 A:middle
还有 security code AutoFill

00:13:20.536 --> 00:13:22.266 A:middle
你可以向用户提供

00:13:22.266 --> 00:13:25.056 A:middle
安全便捷的功能

00:13:25.186 --> 00:13:30.806 A:middle
咻 感谢你们还留在这里

00:13:30.806 --> 00:13:32.596 A:middle
好的 那就让我们继续吧

00:13:32.666 --> 00:13:34.146 A:middle
来谈谈有关性能的各种功能

00:13:34.176 --> 00:13:36.086 A:middle
先从字体集合说起

00:13:36.826 --> 00:13:39.376 A:middle
对了 如果你错过了这场演讲的开场

00:13:39.376 --> 00:13:41.856 A:middle
我的名字是 Shloka Kini

00:13:41.856 --> 00:13:44.976 A:middle
这不是一个盎格鲁-撒克逊式的名字

00:13:46.276 --> 00:13:48.026 A:middle
然后 这里是我的名和姓氏

00:13:48.026 --> 00:13:49.856 A:middle
是以印度语中的梵文天城体

00:13:49.856 --> 00:13:51.486 A:middle
来书写的

00:13:51.926 --> 00:13:53.616 A:middle
用多种字体 不同的粗细

00:13:53.616 --> 00:13:55.976 A:middle
和样式 但都是同一组文字内容

00:13:56.776 --> 00:13:58.476 A:middle
今年起 我们开始支持

00:13:58.476 --> 00:14:00.566 A:middle
WOFF 2 和 TrueType

00:13:58.476 --> 00:14:00.566 A:middle
WOFF 2 和 TrueType

00:14:00.566 --> 00:14:01.046 A:middle
字体集合

00:14:01.656 --> 00:14:03.496 A:middle
将相关字体捆绑在

00:14:03.496 --> 00:14:05.076 A:middle
在单个集合文件内

00:14:05.316 --> 00:14:07.076 A:middle
可以消除字符映射

00:14:07.076 --> 00:14:08.796 A:middle
的重复表格

00:14:08.796 --> 00:14:10.746 A:middle
举例来说 我们的一种内置字体

00:14:10.746 --> 00:14:13.626 A:middle
PingFang 在使用集合后

00:14:13.626 --> 00:14:15.286 A:middle
文件大小

00:14:15.286 --> 00:14:16.046 A:middle
减少了 84％

00:14:16.846 --> 00:14:17.826 A:middle
字体集合能够

00:14:17.826 --> 00:14:19.736 A:middle
大大地减少

00:14:19.736 --> 00:14:21.136 A:middle
你的字体文件的大小

00:14:21.136 --> 00:14:23.296 A:middle
因为不同字体对于同样的字母集合

00:14:23.296 --> 00:14:23.956 A:middle
共享了同一个表格

00:14:24.536 --> 00:14:27.226 A:middle
下一项要介绍的功能是

00:14:27.226 --> 00:14:29.776 A:middle
字体展示 对于大多数开发者来说

00:14:29.956 --> 00:14:30.826 A:middle
无需做出改变

00:14:31.126 --> 00:14:32.826 A:middle
本质上来说 如果你有使用

00:14:32.826 --> 00:14:34.746 A:middle
自定义字体的 web 内容

00:14:35.146 --> 00:14:36.576 A:middle
不管出于什么原因 你的用户

00:14:36.576 --> 00:14:38.496 A:middle
看不到它们

00:14:38.496 --> 00:14:40.116 A:middle
默认情况下 我们会为文本

00:14:40.276 --> 00:14:42.076 A:middle
留出最多三秒的空白占位符

00:14:42.156 --> 00:14:44.386 A:middle
在显示字体之前

00:14:44.386 --> 00:14:46.206 A:middle
以保持屏幕上

00:14:46.206 --> 00:14:48.376 A:middle
所有内容的位置

00:14:48.826 --> 00:14:51.166 A:middle
但是 如果这个默认的选项

00:14:51.166 --> 00:14:52.686 A:middle
不适合你

00:14:52.686 --> 00:14:54.006 A:middle
并且你对于那三秒内会发生什么

00:14:54.006 --> 00:14:55.616 A:middle
想拥有更多的控制

00:14:55.616 --> 00:14:57.446 A:middle
你可以使用

00:14:57.446 --> 00:14:59.136 A:middle
字体显示描述器

00:14:59.806 --> 00:15:01.066 A:middle
设定不同的数值

00:14:59.806 --> 00:15:01.066 A:middle
设定不同的数值

00:15:01.066 --> 00:15:02.396 A:middle
你可以指定另一种字体

00:15:02.396 --> 00:15:04.286 A:middle
作为备选 或者检查

00:15:04.286 --> 00:15:06.916 A:middle
浏览器是否在缓存中有那种字体

00:15:09.316 --> 00:15:11.116 A:middle
现在 你可以使用一个很酷的技巧

00:15:11.116 --> 00:15:12.446 A:middle
来改善动画图像的性能

00:15:12.446 --> 00:15:15.366 A:middle
那就是 使用视频

00:15:15.366 --> 00:15:18.386 A:middle
我超爱我 Mac 笔记本背景中的

00:15:18.386 --> 00:15:20.726 A:middle
彩色粉尘爆炸

00:15:20.726 --> 00:15:23.716 A:middle
它真的很好看 但它是静态的

00:15:25.366 --> 00:15:27.746 A:middle
我想要这个图案能“嘭” 爆炸

00:15:28.526 --> 00:15:29.796 A:middle
我是说 我希望让它动起来

00:15:30.116 --> 00:15:31.066 A:middle
我想要一个 GIF 动画

00:15:31.876 --> 00:15:33.306 A:middle
但是 动画 GIF 需要更长的时间

00:15:33.306 --> 00:15:36.626 A:middle
才能加载 而且耗费更多的电池电量

00:15:36.666 --> 00:15:37.956 A:middle
与展示同样内容的视频文件相比

00:15:37.956 --> 00:15:41.976 A:middle
更能更差一些

00:15:42.176 --> 00:15:44.936 A:middle
现在在 Safari 中 MP4 视频文件

00:15:44.936 --> 00:15:46.316 A:middle
在图像元素中也能得到支持

00:15:46.316 --> 00:15:48.176 A:middle
充分利用了苹果内置的

00:15:48.176 --> 00:15:49.606 A:middle
硬件视频

00:15:49.606 --> 00:15:50.176 A:middle
解码支持

00:15:50.906 --> 00:15:52.666 A:middle
我的内容加载速度更快

00:15:52.666 --> 00:15:53.856 A:middle
耗电量更少 性能也更好

00:15:53.856 --> 00:15:56.056 A:middle
但我同样可以在

00:15:56.056 --> 00:15:58.886 A:middle
CSS 背景图片的属性下

00:15:58.946 --> 00:15:59.386 A:middle
使用 MP4

00:16:00.556 --> 00:16:01.446 A:middle
如果你采用了这种技术

00:16:01.446 --> 00:16:03.706 A:middle
只用最简单的方式

00:16:04.516 --> 00:16:05.876 A:middle
你就可以得到一个新版本

00:16:05.876 --> 00:16:07.556 A:middle
只是它无法与

00:16:07.556 --> 00:16:08.086 A:middle
旧版浏览器兼容

00:16:08.726 --> 00:16:10.086 A:middle
旧版的浏览器不支持

00:16:10.086 --> 00:16:11.286 A:middle
MP4 和图像元素

00:16:11.646 --> 00:16:13.916 A:middle
幸运的是 使用现有技术

00:16:13.916 --> 00:16:16.216 A:middle
你可以指定一个备用图像用来替代显示

00:16:16.376 --> 00:16:19.466 A:middle
在 MP4 无法运行的情况下

00:16:19.986 --> 00:16:22.636 A:middle
各位请注意了

00:16:22.716 --> 00:16:25.876 A:middle
现在我们要转向下一个话题

00:16:26.276 --> 00:16:26.926 A:middle
事件监听器

00:16:27.306 --> 00:16:29.606 A:middle
这又是一个

00:16:29.606 --> 00:16:31.476 A:middle
拥有很好的默认设置的功能

00:16:31.476 --> 00:16:33.466 A:middle
在特殊情况下还可以 有自定义的设置

00:16:34.556 --> 00:16:36.286 A:middle
任何用户在尝试使用触摸屏

00:16:36.286 --> 00:16:37.536 A:middle
浏览网页时

00:16:37.696 --> 00:16:39.096 A:middle
他们需要滚动屏幕

00:16:39.096 --> 00:16:40.976 A:middle
对于每一次滚动触摸

00:16:41.206 --> 00:16:42.896 A:middle
触摸的事件监听器都会被触发

00:16:43.596 --> 00:16:45.506 A:middle
这就会中断滚动触摸

00:16:45.506 --> 00:16:47.726 A:middle
并造成它有一点跳动

00:16:48.576 --> 00:16:49.966 A:middle
来看看这两个例子

00:16:50.726 --> 00:16:52.896 A:middle
看 左边的一个与右边相比

00:16:52.946 --> 00:16:56.156 A:middle
被中断干扰得要更严重

00:16:56.536 --> 00:16:57.606 A:middle
我的意思是 它几乎没有移动

00:16:58.536 --> 00:17:00.966 A:middle
那么 右边是哪里

00:16:58.536 --> 00:17:00.966 A:middle
那么 右边是哪里

00:17:01.306 --> 00:17:02.016 A:middle
做对了呢

00:17:02.816 --> 00:17:03.946 A:middle
因为它使用了

00:17:03.946 --> 00:17:04.366 A:middle
被动事件监听器

00:17:04.965 --> 00:17:06.675 A:middle
默认情况下 我们会在

00:17:06.675 --> 00:17:08.366 A:middle
文档 窗口和主体元素上设置启动

00:17:08.366 --> 00:17:10.306 A:middle
被动事件监听器

00:17:10.306 --> 00:17:11.675 A:middle
这样一来 任何的触摸

00:17:11.675 --> 00:17:13.356 A:middle
都会指示浏览器

00:17:13.826 --> 00:17:15.806 A:middle
去继续滚动屏幕

00:17:15.866 --> 00:17:17.836 A:middle
避免因为等待事件监听器完成任务

00:17:17.836 --> 00:17:19.146 A:middle
而被中断

00:17:19.806 --> 00:17:21.445 A:middle
如果你想要把事件监听器的

00:17:21.445 --> 00:17:22.726 A:middle
其他元素也设置为被动

00:17:22.726 --> 00:17:24.546 A:middle
你可以把那些

00:17:24.546 --> 00:17:25.935 A:middle
事件监听器的

00:17:25.935 --> 00:17:27.935 A:middle
被动属性 设置为 “true ”

00:17:28.816 --> 00:17:30.816 A:middle
简单来说

00:17:30.886 --> 00:17:32.576 A:middle
在不阻碍默认事件进行处理的情况下

00:17:32.576 --> 00:17:34.546 A:middle
这个标志告诉浏览器

00:17:34.546 --> 00:17:36.306 A:middle
不要去等待事件监听器完成

00:17:36.306 --> 00:17:37.936 A:middle
并且让用户可以

00:17:38.026 --> 00:17:40.226 A:middle
流畅地滚动屏幕

00:17:40.696 --> 00:17:44.356 A:middle
接下来 我们转向具有

00:17:44.356 --> 00:17:46.546 A:middle
异步图像解码的

00:17:46.546 --> 00:17:47.056 A:middle
异步调用

00:17:47.786 --> 00:17:49.236 A:middle
通常来说 图像都是被

00:17:49.236 --> 00:17:50.456 A:middle
同步解码的

00:17:50.656 --> 00:17:51.976 A:middle
所以 主线程遭到了阻塞

00:17:52.506 --> 00:17:54.656 A:middle
所有的图像都被解码

00:17:54.656 --> 00:17:55.346 A:middle
然后显示出来

00:17:56.136 --> 00:17:57.796 A:middle
阻塞了主线程

00:17:57.796 --> 00:17:59.486 A:middle
用户的交互也受到阻止

00:17:59.906 --> 00:18:01.356 A:middle
不过 如果使用异步解码

00:17:59.906 --> 00:18:01.356 A:middle
不过 如果使用异步解码

00:18:01.356 --> 00:18:02.546 A:middle
这些操作就能并行发生

00:18:02.546 --> 00:18:04.476 A:middle
并且是在一个单独的

00:18:04.536 --> 00:18:05.626 A:middle
线程上 这意味着交互

00:18:05.666 --> 00:18:07.726 A:middle
不会被阻止

00:18:08.236 --> 00:18:09.856 A:middle
今年新增的异步图像解码功能

00:18:09.946 --> 00:18:12.276 A:middle
在默认的情况下

00:18:12.276 --> 00:18:14.226 A:middle
会在首页加载时发生

00:18:15.136 --> 00:18:17.476 A:middle
它可以覆盖大多数 web 内容的情况

00:18:17.796 --> 00:18:20.286 A:middle
当然 我们知道 你们中的一些人

00:18:20.286 --> 00:18:21.576 A:middle
可能会遇到特殊情况

00:18:21.656 --> 00:18:24.426 A:middle
比如说 在你的网页上有一张

00:18:24.426 --> 00:18:26.216 A:middle
多块组合平铺的地图

00:18:26.216 --> 00:18:27.356 A:middle
它在初始页面加载后进行加载

00:18:27.586 --> 00:18:28.986 A:middle
而且 如果它有很多图像

00:18:28.986 --> 00:18:32.796 A:middle
部分图块可能会延迟显示

00:18:33.356 --> 00:18:35.716 A:middle
或者 可能你在 App 中放入了一些

00:18:35.716 --> 00:18:37.016 A:middle
轮播的图像

00:18:37.016 --> 00:18:38.516 A:middle
并希望它们有淡入淡出的轮播效果

00:18:38.516 --> 00:18:40.086 A:middle
但当你想要加速播放

00:18:40.186 --> 00:18:41.726 A:middle
这组幻灯片

00:18:41.726 --> 00:18:43.296 A:middle
如果图像是同步解码的

00:18:43.296 --> 00:18:44.886 A:middle
它们可能无法及时显示出来

00:18:45.436 --> 00:18:49.336 A:middle
而且它们会突兀地切换

00:18:50.816 --> 00:18:53.216 A:middle
但在右侧的例子中

00:18:53.216 --> 00:18:54.776 A:middle
异步解码让你的淡入淡出效果

00:18:54.886 --> 00:18:55.246 A:middle
更加平滑流畅

00:18:55.296 --> 00:18:58.656 A:middle
那么 如果你想要采用这些特殊的

00:18:58.776 --> 00:18:59.916 A:middle
动态图像的范例

00:18:59.916 --> 00:19:01.176 A:middle
你有两种选择

00:18:59.916 --> 00:19:01.176 A:middle
你有两种选择

00:19:01.456 --> 00:19:03.436 A:middle
一 你可以在标记中添加

00:19:03.486 --> 00:19:05.176 A:middle
异步解码的属性

00:19:05.176 --> 00:19:06.136 A:middle
到你的图像元素中去

00:19:06.756 --> 00:19:09.536 A:middle
或者 你可以使用 JavaScript

00:19:09.536 --> 00:19:11.996 A:middle
API 的 HTMLImageElements.decode 方法

00:19:11.996 --> 00:19:13.856 A:middle
它会返回一个提示

00:19:14.106 --> 00:19:15.726 A:middle
让你知道图像在何时

00:19:15.726 --> 00:19:17.756 A:middle
可以被添加到 dom

00:19:17.836 --> 00:19:20.796 A:middle
而不会导致下一帧的解码延迟

00:19:21.306 --> 00:19:24.216 A:middle
下面 继续说

00:19:24.216 --> 00:19:26.336 A:middle
异步调用对于

00:19:26.336 --> 00:19:27.416 A:middle
Beacon API 的支持

00:19:28.266 --> 00:19:29.566 A:middle
我们知道 作为开发人员

00:19:29.566 --> 00:19:31.466 A:middle
你想要在 unload 事件中发送数据

00:19:31.956 --> 00:19:33.936 A:middle
可能是想要追踪外发链接

00:19:34.416 --> 00:19:35.896 A:middle
通常情况下 unload 事件的异步请求

00:19:35.896 --> 00:19:37.766 A:middle
会被忽略掉

00:19:37.906 --> 00:19:38.776 A:middle
于是你不得不使用

00:19:38.776 --> 00:19:40.266 A:middle
同步请求 结果就导致下一个页面

00:19:40.266 --> 00:19:41.816 A:middle
加载失败

00:19:42.756 --> 00:19:44.206 A:middle
不过 我们现在支持

00:19:44.206 --> 00:19:45.066 A:middle
Beacon API

00:19:45.706 --> 00:19:47.086 A:middle
所以只要 Safari 还在运行

00:19:47.086 --> 00:19:48.816 A:middle
你就可以将数据发送到服务器上

00:19:48.816 --> 00:19:50.866 A:middle
然后把它抛在脑后

00:19:50.866 --> 00:19:52.666 A:middle
因为你知道数据一定会被

00:19:52.666 --> 00:19:53.466 A:middle
发送出去的

00:19:53.966 --> 00:19:57.446 A:middle
好了 你们已经听我讲的够多了

00:19:57.926 --> 00:19:59.096 A:middle
我相信你们都想亲眼看看

00:19:59.096 --> 00:20:00.036 A:middle
这些与安全和性能相关的功能

00:19:59.096 --> 00:20:00.036 A:middle
这些与安全和性能相关的功能

00:20:00.036 --> 00:20:01.316 A:middle
实际操作起来什么样

00:20:01.316 --> 00:20:03.056 A:middle
那么 有请我的同事 Jason

00:20:03.056 --> 00:20:05.216 A:middle
上台来为大家演示这些功能

00:20:05.436 --> 00:20:05.826 A:middle
Jason

00:20:06.516 --> 00:20:10.876 A:middle
[ 掌声 ]

00:20:11.376 --> 00:20:12.176 A:middle
&gt;&gt; 大家好

00:20:12.316 --> 00:20:13.986 A:middle
我叫 Jason Sandmeyer

00:20:13.986 --> 00:20:15.626 A:middle
我是 Apple.com 的一名开发人员

00:20:16.436 --> 00:20:18.046 A:middle
不工作的时候 我喜欢艺术和手工创作

00:20:18.046 --> 00:20:20.286 A:middle
比如建造鸟舍

00:20:20.286 --> 00:20:22.156 A:middle
然后我最近开始

00:20:22.156 --> 00:20:23.636 A:middle
写这个博客 想要分享

00:20:23.636 --> 00:20:25.116 A:middle
我的一些作品

00:20:25.116 --> 00:20:25.526 A:middle
并给其他人以启发

00:20:25.816 --> 00:20:27.676 A:middle
我花费了大量的时间去挑选

00:20:27.676 --> 00:20:29.746 A:middle
合适的字体和舒服的颜色

00:20:30.296 --> 00:20:31.246 A:middle
我为此感到骄傲

00:20:31.996 --> 00:20:33.236 A:middle
不过 我不仅仅是为

00:20:33.266 --> 00:20:34.696 A:middle
自己的设计感到骄傲

00:20:34.696 --> 00:20:36.576 A:middle
我也为自己能够向用户提供

00:20:36.576 --> 00:20:38.326 A:middle
良好 安全 高性能的浏览体验

00:20:38.326 --> 00:20:39.526 A:middle
而感到自豪

00:20:40.056 --> 00:20:41.506 A:middle
因此 我真的对于 WebKit 和 Safari

00:20:41.506 --> 00:20:42.756 A:middle
这些能够提升性能和安全的新功能

00:20:42.756 --> 00:20:44.186 A:middle
感到非常兴奋

00:20:44.186 --> 00:20:46.066 A:middle
我真的希望

00:20:46.066 --> 00:20:48.476 A:middle
在我自己的站点上 充分利用它们

00:20:48.646 --> 00:20:49.816 A:middle
我很乐意向你们演示

00:20:49.816 --> 00:20:50.316 A:middle
它们使用起来是多么容易

00:20:52.056 --> 00:20:53.546 A:middle
这里 我已经将我的网站

00:20:53.546 --> 00:20:54.416 A:middle
加载到我的 MacBook Pro 上

00:20:56.716 --> 00:20:58.366 A:middle
然后 喔

00:20:58.366 --> 00:20:58.586 A:middle
好的

00:20:58.586 --> 00:21:01.006 A:middle
&gt;&gt; 嘿 Jason 你刚刚做了什么

00:20:58.586 --> 00:21:01.006 A:middle
&gt;&gt; 嘿 Jason 你刚刚做了什么

00:21:01.566 --> 00:21:03.716 A:middle
&gt;&gt; 没错 这可不是我刚才自夸的那个

00:21:03.716 --> 00:21:05.226 A:middle
漂亮的博客

00:21:05.226 --> 00:21:06.096 A:middle
对吧

00:21:07.506 --> 00:21:08.986 A:middle
让我们来看看 这是正确的 URL

00:21:10.156 --> 00:21:12.406 A:middle
我想我知道这里发生了什么问题

00:21:12.996 --> 00:21:15.586 A:middle
当我刚开始设立这个网站时

00:21:15.586 --> 00:21:19.436 A:middle
我的朋友们曾提醒我

00:21:19.436 --> 00:21:20.866 A:middle
生活类博客的

00:21:20.866 --> 00:21:23.516 A:middle
行业竞争相当激烈

00:21:24.856 --> 00:21:27.176 A:middle
很明显 有人在蓄意破坏我的网站

00:21:27.906 --> 00:21:29.436 A:middle
有人偷偷替换掉了

00:21:29.436 --> 00:21:31.266 A:middle
我内容分发网络的样式表

00:21:32.016 --> 00:21:33.736 A:middle
不过很幸运

00:21:33.796 --> 00:21:34.396 A:middle
我还留有备份

00:21:34.986 --> 00:21:36.536 A:middle
我们可以使用

00:21:36.536 --> 00:21:37.936 A:middle
子资源完整性的功能

00:21:37.936 --> 00:21:39.596 A:middle
为网站提升安全性能

00:21:39.596 --> 00:21:40.976 A:middle
确保这种情况不再发生

00:21:46.286 --> 00:21:49.106 A:middle
所以 我先从添加新的完整性属性

00:21:49.106 --> 00:21:52.246 A:middle
到我的链接标记开始操作

00:21:52.246 --> 00:21:53.896 A:middle
值得注意的是 这个改动对脚本

00:21:53.896 --> 00:21:55.356 A:middle
也有影响 不过我们

00:21:55.356 --> 00:21:57.046 A:middle
晚些时候再做改变

00:21:57.426 --> 00:21:58.756 A:middle
我们稍后再进行添加

00:21:59.286 --> 00:22:03.516 A:middle
那么 这个属性的数值

00:21:59.286 --> 00:22:03.516 A:middle
那么 这个属性的数值

00:22:03.956 --> 00:22:06.266 A:middle
是哈希算法的结果

00:22:06.266 --> 00:22:07.406 A:middle
我们用这个算法能够得到文件的校验和

00:22:07.406 --> 00:22:09.316 A:middle
我希望自己和用户

00:22:09.316 --> 00:22:12.586 A:middle
可以看到它

00:22:12.826 --> 00:22:14.196 A:middle
我已经准备了一个 hash

00:22:14.316 --> 00:22:15.566 A:middle
叫 SHA256

00:22:16.896 --> 00:22:20.156 A:middle
接下来 一个连字符

00:22:20.156 --> 00:22:22.786 A:middle
然后是 base64 编码用于表示这个 hash

00:22:24.006 --> 00:22:26.296 A:middle
现在 进行保存 然后回到

00:22:26.296 --> 00:22:28.256 A:middle
我们的页面 重新加载

00:22:29.436 --> 00:22:30.866 A:middle
现在我们能看到网页

00:22:30.866 --> 00:22:31.326 A:middle
没有样式

00:22:31.876 --> 00:22:32.916 A:middle
因为已下载文件的 hash

00:22:32.916 --> 00:22:34.666 A:middle
和 HTML 里的 hash

00:22:34.666 --> 00:22:36.026 A:middle
不匹配

00:22:36.606 --> 00:22:38.986 A:middle
因此 Safari 已经阻止它去加载

00:22:41.916 --> 00:22:43.376 A:middle
现在 让我们连接到我的 CDN

00:22:43.376 --> 00:22:46.726 A:middle
这是我桌面上的备份

00:22:47.246 --> 00:22:50.786 A:middle
让我们把备份拖入

00:22:50.886 --> 00:22:53.876 A:middle
CDN 当中 以替换受损的文件

00:22:54.806 --> 00:22:57.036 A:middle
现在 我们重新加载

00:22:57.356 --> 00:22:57.976 A:middle
这就看起来好多了

00:22:58.516 --> 00:23:01.936 A:middle
[ 掌声 ]

00:22:58.516 --> 00:23:01.936 A:middle
[ 掌声 ]

00:23:02.436 --> 00:23:05.416 A:middle
谢谢 所以在使用了

00:23:05.416 --> 00:23:06.566 A:middle
子资源完整性的功能后

00:23:06.566 --> 00:23:08.146 A:middle
我更加确信网站访问者

00:23:08.146 --> 00:23:09.926 A:middle
能获取我预想中的

00:23:09.926 --> 00:23:12.686 A:middle
样式和脚本

00:23:12.886 --> 00:23:13.926 A:middle
下面 让我们稍稍换个方向

00:23:13.926 --> 00:23:15.006 A:middle
来谈谈我们在

00:23:15.006 --> 00:23:16.166 A:middle
改进性能方面

00:23:16.166 --> 00:23:16.426 A:middle
能做些什么

00:23:16.426 --> 00:23:19.556 A:middle
另外 如果能知道我网站上

00:23:19.556 --> 00:23:20.806 A:middle
哪些链接被用户频繁点击

00:23:20.806 --> 00:23:22.446 A:middle
哪些很少被点击 这是很有用的信息

00:23:22.716 --> 00:23:23.976 A:middle
这能帮助我在设计时 做出更明智的决策

00:23:29.346 --> 00:23:30.956 A:middle
所以我用这个 click handler

00:23:30.956 --> 00:23:32.106 A:middle
它能够向我控制的服务器报告

00:23:32.106 --> 00:23:33.666 A:middle
哪些链接被用户点击过

00:23:33.666 --> 00:23:35.976 A:middle
服务器会收集点击量的数据 供我有空时查看

00:23:40.736 --> 00:23:43.106 A:middle
还有 请注意在我点击

00:23:43.106 --> 00:23:44.686 A:middle
这个木工页面的链接时

00:23:44.846 --> 00:23:45.976 A:middle
会发生轻微的延迟

00:23:45.976 --> 00:23:46.756 A:middle
点击后会进入我网站里

00:23:46.756 --> 00:23:49.066 A:middle
其他与木工相关的页面

00:23:50.086 --> 00:23:51.126 A:middle
我现在就点击这个链接

00:23:52.816 --> 00:23:55.136 A:middle
花了大约半秒到一秒钟时间

00:23:55.136 --> 00:23:59.036 A:middle
之所以会这样

00:23:59.036 --> 00:24:00.706 A:middle
是因为我在 click handler 中

00:23:59.036 --> 00:24:00.706 A:middle
是因为我在 click handler 中

00:24:00.706 --> 00:24:02.416 A:middle
做出了同步请求

00:24:02.666 --> 00:24:05.706 A:middle
这会阻止 Safari 导航到下一页

00:24:06.446 --> 00:24:08.026 A:middle
进行同步请求

00:24:08.026 --> 00:24:09.306 A:middle
可确保浏览器在导航到下一页时

00:24:09.306 --> 00:24:12.226 A:middle
不会取消这一请求

00:24:13.636 --> 00:24:14.636 A:middle
但是 这是在等待

00:24:14.636 --> 00:24:16.066 A:middle
我的服务器响应可能需要

00:24:16.066 --> 00:24:16.766 A:middle
一段时间

00:24:16.906 --> 00:24:18.046 A:middle
问题是 我其实不关心什么

00:24:18.046 --> 00:24:19.256 A:middle
服务器响应

00:24:19.256 --> 00:24:20.286 A:middle
我只想确定这些数据

00:24:20.286 --> 00:24:21.636 A:middle
传送到了服务器上

00:24:22.536 --> 00:24:24.406 A:middle
因此 Beacon API 其实是

00:24:24.406 --> 00:24:25.826 A:middle
一个完美的替代品

00:24:26.376 --> 00:24:29.776 A:middle
现在我要开始通过

00:24:30.416 --> 00:24:32.266 A:middle
检查 Beacon API

00:24:32.266 --> 00:24:33.746 A:middle
在浏览器中是否可用

00:24:33.746 --> 00:24:35.396 A:middle
方法是在 navigator 对象上

00:24:35.396 --> 00:24:36.386 A:middle
查找 sendBeacon 方法

00:24:37.366 --> 00:24:38.656 A:middle
如果它不可用

00:24:38.656 --> 00:24:39.996 A:middle
我就继续我

00:24:39.996 --> 00:24:40.346 A:middle
刚才在做的事情

00:24:41.526 --> 00:24:43.626 A:middle
然后 我们可以使用它

00:24:46.496 --> 00:24:49.106 A:middle
把数据和我想要访问的 endpoint

00:24:49.756 --> 00:24:53.666 A:middle
一同传入

00:24:53.666 --> 00:24:54.356 A:middle
让我们进行保存

00:24:55.196 --> 00:24:57.726 A:middle
然后返回去 重新加载

00:24:57.726 --> 00:24:58.236 A:middle
新的脚本

00:24:59.336 --> 00:25:00.676 A:middle
现在 当我点击这个链接时

00:24:59.336 --> 00:25:00.676 A:middle
现在 当我点击这个链接时

00:25:00.676 --> 00:25:02.256 A:middle
可以看到反应几乎是立刻的

00:25:02.296 --> 00:25:03.696 A:middle
我现在要点击这个链接了

00:25:04.486 --> 00:25:05.056 A:middle
好了

00:25:06.046 --> 00:25:08.746 A:middle
所以 与 XML/http 请求相比

00:25:08.746 --> 00:25:10.576 A:middle
这个使用的代码更少

00:25:10.576 --> 00:25:11.796 A:middle
但它同样的可靠

00:25:12.126 --> 00:25:13.696 A:middle
而现在 我的用户

00:25:13.696 --> 00:25:14.976 A:middle
在我的网站里 就能更快速地畅游了

00:25:15.516 --> 00:25:17.736 A:middle
[ 掌声 ]

00:25:18.236 --> 00:25:22.956 A:middle
谢谢大家 接下来

00:25:22.956 --> 00:25:24.036 A:middle
我想看看一个问题

00:25:24.036 --> 00:25:25.956 A:middle
这个问题在 iPad 上更加明显

00:25:33.136 --> 00:25:34.666 A:middle
我把建造鸟舍的

00:25:34.666 --> 00:25:36.016 A:middle
每一步都做成了幻灯片

00:25:36.016 --> 00:25:37.926 A:middle
并加入了淡入淡出的轮播效果

00:25:39.776 --> 00:25:41.596 A:middle
点击向右的箭头

00:25:41.596 --> 00:25:42.916 A:middle
就能前进到下一张幻灯片

00:25:44.356 --> 00:25:45.856 A:middle
不过 你可能已经注意到了

00:25:45.856 --> 00:25:48.066 A:middle
切换时 在图片的位置会出现

00:25:48.176 --> 00:25:49.826 A:middle
短暂的空白

00:25:50.286 --> 00:25:51.846 A:middle
让我来再翻几张幻灯片

00:25:56.066 --> 00:25:58.636 A:middle
让我们来看看这个轮播的代码

00:25:58.636 --> 00:26:00.326 A:middle
看看发生了什么 我觉得这个切换效果

00:25:58.636 --> 00:26:00.326 A:middle
看看发生了什么 我觉得这个切换效果

00:26:00.326 --> 00:26:00.776 A:middle
可以更流畅

00:26:06.066 --> 00:26:07.796 A:middle
这里是轮播的类

00:26:08.516 --> 00:26:10.036 A:middle
我想要仔细看看这个方法

00:26:10.036 --> 00:26:11.336 A:middle
在这里叫 setCurrentSlide

00:26:11.896 --> 00:26:13.086 A:middle
这个方法会在

00:26:13.086 --> 00:26:14.256 A:middle
你点击箭头

00:26:14.256 --> 00:26:16.476 A:middle
转换到下一张幻灯片时被调用

00:26:18.816 --> 00:26:20.376 A:middle
由于每张幻灯片在加载页面时

00:26:20.376 --> 00:26:21.896 A:middle
不会立即显示

00:26:21.896 --> 00:26:24.056 A:middle
只有当用户点击箭头时

00:26:24.056 --> 00:26:26.976 A:middle
我的轮播才会加载下一张幻灯片的图像

00:26:31.176 --> 00:26:33.036 A:middle
我们遇到的问题是

00:26:33.086 --> 00:26:36.506 A:middle
页面切换是瞬间完成的

00:26:37.716 --> 00:26:39.446 A:middle
而不是等图像加载完再发生

00:26:39.956 --> 00:26:41.356 A:middle
而且 在图像加载之后

00:26:41.356 --> 00:26:42.746 A:middle
它仍需要被解码

00:26:42.746 --> 00:26:44.816 A:middle
然后才能在屏幕上显示出来

00:26:45.876 --> 00:26:47.486 A:middle
所以 我想做的是

00:26:47.486 --> 00:26:49.036 A:middle
等待图像加载

00:26:49.036 --> 00:26:51.316 A:middle
并且被加码

00:26:51.316 --> 00:26:52.466 A:middle
我相信这样图像就能顺畅显示

00:26:53.156 --> 00:26:54.996 A:middle
而且我可以使用新的解码方法

00:26:54.996 --> 00:26:57.486 A:middle
在 HTML 图像元素上

00:26:58.936 --> 00:27:01.276 A:middle
来改进显示效果

00:26:58.936 --> 00:27:01.276 A:middle
来改进显示效果

00:27:02.506 --> 00:27:04.056 A:middle
这里 是我的图像

00:27:04.056 --> 00:27:04.976 A:middle
是图像元素的标记

00:27:09.046 --> 00:27:10.406 A:middle
decode() 方法会

00:27:10.616 --> 00:27:12.326 A:middle
异步地解码这个图像

00:27:12.566 --> 00:27:14.206 A:middle
然后返回一个 Promise

00:27:14.206 --> 00:27:16.316 A:middle
如果图像成功被加载并解码

00:27:16.316 --> 00:27:19.646 A:middle
就会调用响应函数 resolve

00:27:19.746 --> 00:27:21.716 A:middle
所以 我就把我的 transition 函数传入

00:27:21.756 --> 00:27:23.696 A:middle
作为这个 Promise 的回调函数

00:27:24.326 --> 00:27:26.946 A:middle
现在 让我们切换回 iPad

00:27:33.256 --> 00:27:35.536 A:middle
我们来刷新页面以获取

00:27:35.536 --> 00:27:36.036 A:middle
新的脚本

00:27:37.076 --> 00:27:38.236 A:middle
现在 当我前进到下一页的时候

00:27:38.236 --> 00:27:39.386 A:middle
过程会更加顺畅

00:27:40.006 --> 00:27:41.566 A:middle
没有闪烁

00:27:41.566 --> 00:27:42.296 A:middle
这真的很棒

00:27:43.516 --> 00:27:45.626 A:middle
[ 掌声 ]

00:27:46.126 --> 00:27:46.936 A:middle
谢谢

00:27:51.126 --> 00:27:55.146 A:middle
现在 让我们切换回 Mac

00:27:55.146 --> 00:27:56.616 A:middle
最后 在我的页面底部

00:27:56.616 --> 00:27:58.626 A:middle
放置了一个动画的 GIF 图片

00:27:58.626 --> 00:28:00.756 A:middle
一只小鸟在装饰

00:27:58.626 --> 00:28:00.756 A:middle
一只小鸟在装饰

00:28:00.756 --> 00:28:01.196 A:middle
它的新鸟舍

00:28:01.966 --> 00:28:05.156 A:middle
这张图片 这个视频

00:28:05.156 --> 00:28:09.266 A:middle
非常的大 好吧 它是一个 GIF

00:28:09.406 --> 00:28:12.236 A:middle
它大概有超过 7 兆字节

00:28:12.596 --> 00:28:14.366 A:middle
说实话 图片质量也不怎么好

00:28:15.116 --> 00:28:15.876 A:middle
不过

00:28:15.876 --> 00:28:18.676 A:middle
我恰好有这张图片的原始视频 H264 编码的 MP4

00:28:19.226 --> 00:28:20.846 A:middle
现在 我可以直接在页面上

00:28:20.846 --> 00:28:21.626 A:middle
使用这个视频

00:28:22.066 --> 00:28:24.086 A:middle
让我们回到 HTML

00:28:24.926 --> 00:28:25.986 A:middle
找到那个图像

00:28:26.786 --> 00:28:28.556 A:middle
它在这儿

00:28:28.766 --> 00:28:30.056 A:middle
我可以直接改变扩展名

00:28:30.056 --> 00:28:32.236 A:middle
改为指向 MP4 文件

00:28:33.646 --> 00:28:37.486 A:middle
重新加载 看 现在我使用的就是

00:28:37.486 --> 00:28:38.286 A:middle
真实的视频

00:28:38.286 --> 00:28:39.916 A:middle
画面质量清晰得多

00:28:39.916 --> 00:28:41.366 A:middle
而且只占大约 1 兆字节

00:28:41.906 --> 00:28:43.386 A:middle
而且它还比刚才的动画 GIF

00:28:43.476 --> 00:28:44.606 A:middle
要长一些

00:28:45.076 --> 00:28:49.096 A:middle
而且 正如 Shloka 刚才提到的

00:28:49.096 --> 00:28:50.876 A:middle
这点也可以使用在 source 属性上

00:28:50.876 --> 00:28:52.766 A:middle
为不支持这个功能的浏览器

00:28:52.766 --> 00:28:53.966 A:middle
提供一个备用的图像

00:29:00.076 --> 00:29:02.086 A:middle
刚刚这些只是 Safari 和 WebKit 的

00:29:02.086 --> 00:29:04.836 A:middle
众多有关安全和性能的新功能中的四个

00:29:05.276 --> 00:29:07.626 A:middle
希望你们能在自己的网站上

00:29:07.626 --> 00:29:08.766 A:middle
把它们充分利用起来

00:29:08.766 --> 00:29:10.866 A:middle
我想你的用户会为此感谢你的

00:29:10.866 --> 00:29:13.256 A:middle
现在 欢迎 Shloka 回到台上

00:29:13.256 --> 00:29:14.666 A:middle
向大家介绍更多 令人兴奋的新功能

00:29:14.666 --> 00:29:14.976 A:middle
谢谢

00:29:15.516 --> 00:29:21.500 A:middle
[ 掌声 ]

00:29:25.186 --> 00:29:26.066 A:middle
&gt;&gt; 谢谢 Jason

00:29:26.656 --> 00:29:30.036 A:middle
对了 我真没想到

00:29:30.036 --> 00:29:31.246 A:middle
博客圈中竞争那么残酷

00:29:33.346 --> 00:29:34.336 A:middle
你保护好自己

00:29:37.086 --> 00:29:38.496 A:middle
还有 非常感谢刚才

00:29:38.496 --> 00:29:39.106 A:middle
精彩的演示

00:29:39.726 --> 00:29:41.686 A:middle
再总结一下与性能相关的新功能

00:29:41.686 --> 00:29:44.086 A:middle
使用字体集合 可以减少字体文件的大小

00:29:44.376 --> 00:29:46.276 A:middle
font-display 属性可以让你

00:29:46.276 --> 00:29:47.876 A:middle
更好把控使用自定义字体时

00:29:47.876 --> 00:29:49.356 A:middle
会遇到的各种情况

00:29:50.066 --> 00:29:51.776 A:middle
在图像元素中使用视频

00:29:51.826 --> 00:29:53.766 A:middle
比使用 GIF 更能提升性能

00:29:54.446 --> 00:29:55.876 A:middle
被动事件监听器能够改进

00:29:55.876 --> 00:29:57.606 A:middle
滚屏的效果

00:29:57.606 --> 00:29:59.316 A:middle
使用带有 Beacon API 还有图像解码的

00:29:59.316 --> 00:30:01.326 A:middle
异步调用

00:29:59.316 --> 00:30:01.326 A:middle
异步调用

00:30:01.326 --> 00:30:03.976 A:middle
可以防止主线程卡壳

00:30:04.496 --> 00:30:07.876 A:middle
演讲的最后 我们来谈谈

00:30:07.876 --> 00:30:08.486 A:middle
更加丰富的用户体验

00:30:08.486 --> 00:30:10.486 A:middle
我们有一些很酷的新功能

00:30:10.486 --> 00:30:12.506 A:middle
能够真正提升用户的体验

00:30:13.146 --> 00:30:15.316 A:middle
从拖放开始讲

00:30:15.846 --> 00:30:17.556 A:middle
首先来介绍一些有关拖放的

00:30:17.556 --> 00:30:18.816 A:middle
总体上的改进

00:30:19.126 --> 00:30:21.546 A:middle
由于 API 的更新

00:30:21.546 --> 00:30:23.306 A:middle
现在你可以把整个文件目录

00:30:23.306 --> 00:30:25.066 A:middle
进行拖放

00:30:25.066 --> 00:30:25.916 A:middle
以将其上传至服务器

00:30:26.446 --> 00:30:28.856 A:middle
不再需要压缩或者打包处理

00:30:29.746 --> 00:30:31.156 A:middle
而且我们支持读取和写入

00:30:31.156 --> 00:30:33.336 A:middle
能够丰富 HTML 的 MIME 类型

00:30:33.336 --> 00:30:36.476 A:middle
纯文本 以及 URL

00:30:36.476 --> 00:30:37.476 A:middle
到系统粘贴板

00:30:38.646 --> 00:30:40.646 A:middle
而且 特别是对 iOS

00:30:40.646 --> 00:30:41.916 A:middle
我们已经对数据传输 API

00:30:41.916 --> 00:30:43.966 A:middle
进行了一些新的更新

00:30:43.996 --> 00:30:45.996 A:middle
现在你可以使用 getData 和 setData 方法

00:30:45.996 --> 00:30:48.076 A:middle
来自定义拖放

00:30:48.246 --> 00:30:50.926 A:middle
举例来说 如果我想要

00:30:50.926 --> 00:30:53.036 A:middle
把生活用品拖入

00:30:53.036 --> 00:30:54.906 A:middle
我的网上购物车

00:30:54.906 --> 00:30:56.596 A:middle
我可以对拖放行为

00:30:56.636 --> 00:30:57.146 A:middle
进行自定义

00:30:57.726 --> 00:30:59.586 A:middle
比如 拖动一个图片元素

00:30:59.806 --> 00:31:01.226 A:middle
会将这个元素的名称

00:30:59.806 --> 00:31:01.226 A:middle
会将这个元素的名称

00:31:01.226 --> 00:31:03.506 A:middle
和它的价格

00:31:03.506 --> 00:31:03.846 A:middle
放到我的购物车中

00:31:04.676 --> 00:31:05.916 A:middle
现在 你可以指定

00:31:05.916 --> 00:31:07.236 A:middle
拖放行为会导致什么结果

00:31:07.266 --> 00:31:08.696 A:middle
这会让你实现

00:31:08.696 --> 00:31:11.186 A:middle
更丰富的用户交互

00:31:11.766 --> 00:31:14.706 A:middle
接下来 我们来转向本场演讲的

00:31:14.706 --> 00:31:16.146 A:middle
API 部分

00:31:16.146 --> 00:31:18.936 A:middle
从支付请求 API 和 Apple Pay 讲起

00:31:19.616 --> 00:31:20.916 A:middle
那么 我们来谈谈 Apple Pay

00:31:21.316 --> 00:31:22.926 A:middle
Apple Pay 不仅仅是一种支付方式

00:31:22.926 --> 00:31:24.516 A:middle
它是对电子支付的

00:31:24.566 --> 00:31:25.666 A:middle
完全重新思考

00:31:26.046 --> 00:31:28.036 A:middle
通过 Apple Pay 商户不会

00:31:28.036 --> 00:31:29.466 A:middle
直接接触到顾客的

00:31:29.466 --> 00:31:31.376 A:middle
信用卡信息

00:31:31.376 --> 00:31:32.576 A:middle
这使支付更加安全

00:31:33.466 --> 00:31:34.676 A:middle
我们知道你们当中许多人

00:31:34.676 --> 00:31:36.336 A:middle
一直要求提供一种方式

00:31:36.336 --> 00:31:38.326 A:middle
能够使用标准 API 来支持 Apple Pay

00:31:39.096 --> 00:31:40.516 A:middle
现在 我很高兴告诉大家

00:31:40.516 --> 00:31:42.246 A:middle
我们听到了你们的需求

00:31:42.246 --> 00:31:44.456 A:middle
通过协作努力 Apple Pay 现在

00:31:44.456 --> 00:31:46.936 A:middle
已经开始与 W3C 支付请求 API 展开合作

00:31:50.516 --> 00:31:53.866 A:middle
[ 掌声 ]

00:31:54.366 --> 00:31:56.116 A:middle
不过 虽然你可以选择使用

00:31:56.116 --> 00:31:58.906 A:middle
这个 API 但请记住

00:31:58.906 --> 00:32:00.416 A:middle
为确保你和你的顾客

00:31:58.906 --> 00:32:00.416 A:middle
为确保你和你的顾客

00:32:00.416 --> 00:32:02.036 A:middle
在 Apple Pay 的利益不受损

00:32:02.036 --> 00:32:03.446 A:middle
你需要做一点改变

00:32:03.756 --> 00:32:05.806 A:middle
例如 要向你的界面添加一个

00:32:05.806 --> 00:32:07.376 A:middle
Apple Pay 按钮

00:32:07.376 --> 00:32:08.836 A:middle
而不是在现有的结账流程中

00:32:08.836 --> 00:32:10.376 A:middle
把 Apple Pay 当作选项之一

00:32:10.376 --> 00:32:11.016 A:middle
添加进去

00:32:11.826 --> 00:32:13.186 A:middle
而且 现在支付请求 API 中

00:32:13.326 --> 00:32:15.856 A:middle
还包含一些功能

00:32:15.856 --> 00:32:18.266 A:middle
比如

00:32:19.176 --> 00:32:20.706 A:middle
粒错误处理

00:32:20.706 --> 00:32:22.356 A:middle
处理品牌合作联名信用卡

00:32:22.356 --> 00:32:23.136 A:middle
和拼音姓名

00:32:23.226 --> 00:32:25.006 A:middle
这些功能只在

00:32:25.116 --> 00:32:25.676 A:middle
Apple Pay JS 里有

00:32:25.676 --> 00:32:28.176 A:middle
所以 如果你需要那些特定的

00:32:28.346 --> 00:32:30.776 A:middle
Apple Pay 功能

00:32:30.776 --> 00:32:32.496 A:middle
开始使用 Apple Pay JS 吧

00:32:33.416 --> 00:32:35.586 A:middle
我们支持的另一个 API

00:32:35.666 --> 00:32:37.166 A:middle
是 Service Worker API

00:32:39.716 --> 00:32:42.036 A:middle
如果你的用户的网络连接

00:32:42.036 --> 00:32:43.536 A:middle
不是很理想

00:32:43.846 --> 00:32:45.306 A:middle
比如他们的连接时断时续

00:32:45.306 --> 00:32:48.636 A:middle
或者他们就彻底断网了

00:32:48.636 --> 00:32:49.866 A:middle
对于这种情况你想要

00:32:49.866 --> 00:32:50.956 A:middle
从容优雅地进行处理

00:32:51.106 --> 00:32:52.326 A:middle
那么 Service Worker 可以派上用场

00:32:52.946 --> 00:32:54.576 A:middle
每个 Service Worker 都登记在

00:32:54.576 --> 00:32:56.506 A:middle
唯一的源下面

00:32:56.506 --> 00:32:58.336 A:middle
它可以缓存离线交互

00:32:58.436 --> 00:33:00.336 A:middle
并拦截

00:32:58.436 --> 00:33:00.336 A:middle
并拦截

00:33:00.336 --> 00:33:02.066 A:middle
与这个源相关的脚本

00:33:02.066 --> 00:33:02.556 A:middle
所做的请求

00:33:03.016 --> 00:33:04.866 A:middle
现在 你网域中的每个网页

00:33:05.096 --> 00:33:06.586 A:middle
都可以共享同一个

00:33:06.586 --> 00:33:07.356 A:middle
Service Worker 实例

00:33:08.116 --> 00:33:09.556 A:middle
所以 你可以同时打开

00:33:09.666 --> 00:33:11.826 A:middle
多个选项卡

00:33:11.826 --> 00:33:12.976 A:middle
并且所有的请求都将被

00:33:13.036 --> 00:33:15.386 A:middle
相同的脚本拦截

00:33:16.436 --> 00:33:17.966 A:middle
这样一来 你可以保留一个

00:33:17.966 --> 00:33:19.136 A:middle
持久的资源库

00:33:20.166 --> 00:33:22.136 A:middle
Service Workers 可以令你的网页

00:33:22.416 --> 00:33:25.566 A:middle
无论它是一个 web App

00:33:25.566 --> 00:33:27.036 A:middle
还是说你在使用 SF Safari viewController

00:33:27.036 --> 00:33:29.066 A:middle
面对网络连接的各种不确定

00:33:29.226 --> 00:33:31.366 A:middle
网页都能够快速复原

00:33:31.876 --> 00:33:35.286 A:middle
最后要介绍的 API 是

00:33:35.286 --> 00:33:37.146 A:middle
对于 iPad 的全屏 API

00:33:38.526 --> 00:33:39.706 A:middle
现在你可以自定义

00:33:39.796 --> 00:33:41.616 A:middle
iPad 的全屏控制设定

00:33:41.986 --> 00:33:44.296 A:middle
对于 Safari 中的任一元素都可以

00:33:44.746 --> 00:33:45.996 A:middle
点击那些元素

00:33:45.996 --> 00:33:48.976 A:middle
将带来彻底的全屏体验

00:33:51.516 --> 00:33:56.146 A:middle
[ 掌声 ]

00:33:56.646 --> 00:33:58.276 A:middle
对于视频来说 我们会自动检测内容

00:33:58.336 --> 00:33:59.866 A:middle
同时还会出现一个

00:33:59.866 --> 00:34:00.286 A:middle
取消按钮

00:33:59.866 --> 00:34:00.286 A:middle
取消按钮

00:34:00.526 --> 00:34:02.586 A:middle
在短暂的延迟后

00:34:02.586 --> 00:34:04.646 A:middle
如果内容还在继续播放

00:34:04.646 --> 00:34:05.266 A:middle
按钮会自动消失

00:34:07.536 --> 00:34:08.976 A:middle
如果你提供的内容

00:34:08.976 --> 00:34:10.505 A:middle
会被这个取消按钮

00:34:10.505 --> 00:34:12.126 A:middle
所拦截或阻碍到

00:34:12.356 --> 00:34:14.186 A:middle
可以使用 CSS Environment Variable 中的

00:34:14.186 --> 00:34:16.646 A:middle
fullscreen-inset-top

00:34:16.646 --> 00:34:17.045 A:middle
来避免这种情况

00:34:18.056 --> 00:34:20.485 A:middle
你也可以让你的内容

00:34:20.545 --> 00:34:21.985 A:middle
和按钮同时隐藏

00:34:21.985 --> 00:34:23.545 A:middle
只要使用

00:34:23.666 --> 00:34:25.286 A:middle
环境变量中的

00:34:25.436 --> 00:34:26.416 A:middle
fullscreen-auto-hide-delay 就行了

00:34:26.906 --> 00:34:31.386 A:middle
最后 还有几项非常酷的标注要介绍

00:34:31.626 --> 00:34:33.525 A:middle
从 AR 开始

00:34:34.255 --> 00:34:35.755 A:middle
可能在这次会议上你已经听说过

00:34:35.755 --> 00:34:37.126 A:middle
太多关于 AR 的东西了

00:34:37.356 --> 00:34:39.335 A:middle
但是现在 你可以把 AR 模型

00:34:39.335 --> 00:34:40.846 A:middle
通过图像缩略图的方式

00:34:40.846 --> 00:34:41.366 A:middle
加入到你的 UI 当中

00:34:41.366 --> 00:34:42.866 A:middle
这样一来 你的网站就能

00:34:42.866 --> 00:34:45.505 A:middle
利用起这个全新的 AR Quick Look

00:34:45.536 --> 00:34:47.246 A:middle
而且代码还相当短

00:34:47.556 --> 00:34:48.806 A:middle
你从一个锚标签开始

00:34:49.065 --> 00:34:50.876 A:middle
将 del 属性设置为 AR

00:34:51.235 --> 00:34:53.106 A:middle
并将 HREF 链接设置为

00:34:53.306 --> 00:34:55.065 A:middle
你的 USDZ 文件

00:34:55.065 --> 00:34:55.886 A:middle
然后为 AR 模型创建文件格式

00:34:56.426 --> 00:34:58.076 A:middle
你先添加一个子视图

00:34:58.076 --> 00:34:59.426 A:middle
可以是一个图像 也可以是一个

00:34:59.666 --> 00:35:01.376 A:middle
包含模型图片的照片元素

00:34:59.666 --> 00:35:01.376 A:middle
包含模型图片的照片元素

00:35:01.756 --> 00:35:03.456 A:middle
出来的图像效果是

00:35:03.456 --> 00:35:04.076 A:middle
像这样的

00:35:04.816 --> 00:35:06.596 A:middle
在图像的右上角

00:35:06.646 --> 00:35:09.046 A:middle
一个小的图标出现

00:35:09.126 --> 00:35:11.336 A:middle
意味着一个 AR 模型可通过

00:35:11.336 --> 00:35:12.296 A:middle
点击图像来获得

00:35:12.806 --> 00:35:14.706 A:middle
这是一个能为你的网站

00:35:14.706 --> 00:35:16.736 A:middle
增添内容深度的

00:35:16.736 --> 00:35:17.196 A:middle
绝妙方法

00:35:18.796 --> 00:35:20.516 A:middle
如果想了解更多关于 Quick Look 的信息

00:35:20.516 --> 00:35:21.676 A:middle
可以查阅在线板块

00:35:21.676 --> 00:35:23.886 A:middle
Integrating Apps

00:35:24.046 --> 00:35:26.566 A:middle
and Content with AR Quick Look

00:35:27.816 --> 00:35:29.756 A:middle
接下来 最后一块内容是 watchOS

00:35:30.696 --> 00:35:32.506 A:middle
现在 你可以浏览网站的载体已经有

00:35:32.506 --> 00:35:35.746 A:middle
MacBook 和 iPad

00:35:36.786 --> 00:35:38.686 A:middle
甚至是拥有更小屏幕的 iPhone

00:35:38.686 --> 00:35:40.636 A:middle
屏幕小到可以装进口袋里

00:35:41.316 --> 00:35:42.956 A:middle
但是 我们现在还打算

00:35:42.956 --> 00:35:45.866 A:middle
再缩小一度

00:35:46.086 --> 00:35:48.916 A:middle
我们把你的网站带到了 watchOS 中

00:35:49.516 --> 00:35:53.816 A:middle
[ 掌声 ]

00:35:54.316 --> 00:35:55.856 A:middle
对于这个新功能 我个人是

00:35:55.856 --> 00:35:57.366 A:middle
非常兴奋的

00:35:57.366 --> 00:36:00.636 A:middle
我妈整天给我发送各种菜谱

00:35:57.366 --> 00:36:00.636 A:middle
我妈整天给我发送各种菜谱

00:36:00.776 --> 00:36:02.716 A:middle
我不会做饭 然后我又只能

00:36:02.716 --> 00:36:04.736 A:middle
在短信和电邮中看菜谱

00:36:04.736 --> 00:36:06.596 A:middle
以后当我收到菜谱

00:36:06.596 --> 00:36:08.116 A:middle
我可以直接在手腕上读取

00:36:08.116 --> 00:36:09.056 A:middle
一边做饭一边看菜谱很方便

00:36:10.116 --> 00:36:11.256 A:middle
现在 如果你使用响应式设计

00:36:11.256 --> 00:36:12.606 A:middle
那就太好了

00:36:12.856 --> 00:36:14.136 A:middle
我们把所有的工作都替你做了

00:36:14.136 --> 00:36:15.126 A:middle
这样你的网站在 watchOS 上面

00:36:15.156 --> 00:36:16.426 A:middle
会看起来非常棒

00:36:16.866 --> 00:36:17.716 A:middle
不过如果你想要

00:36:17.816 --> 00:36:19.326 A:middle
进一步地优化 Apple Watch 的网页

00:36:19.326 --> 00:36:21.086 A:middle
这里有一个视频

00:36:21.086 --> 00:36:22.926 A:middle
叫做 Designing Web Content for watchOS

00:36:22.926 --> 00:36:24.546 A:middle
在 WWDC App 上

00:36:24.546 --> 00:36:26.056 A:middle
抱歉

00:36:26.566 --> 00:36:28.306 A:middle
是 Designing

00:36:29.596 --> 00:36:32.476 A:middle
现在 我打赌 Jason 的鸟舍博客

00:36:32.526 --> 00:36:35.056 A:middle
在使用了这些能够丰富用户体验的

00:36:35.056 --> 00:36:36.316 A:middle
新功能后

00:36:36.316 --> 00:36:37.486 A:middle
肯定能上升到一个新水平

00:36:37.986 --> 00:36:39.416 A:middle
所以 我打算把 Jason 请回台上

00:36:39.416 --> 00:36:40.716 A:middle
为大家演示这些功能

00:36:40.716 --> 00:36:41.586 A:middle
如何使用

00:36:41.796 --> 00:36:41.976 A:middle
Jason

00:36:42.516 --> 00:36:46.106 A:middle
[ 掌声 ]

00:36:46.606 --> 00:36:47.136 A:middle
&gt;&gt; 再次感谢

00:36:48.046 --> 00:36:49.256 A:middle
我一直在想

00:36:49.256 --> 00:36:50.816 A:middle
如何能让我的读者能够

00:36:50.816 --> 00:36:51.996 A:middle
更加愉快地开始

00:36:51.996 --> 00:36:53.066 A:middle
他们的鸟舍建造工程

00:36:53.466 --> 00:36:56.836 A:middle
让我们换回到 iPad

00:37:01.536 --> 00:37:03.246 A:middle
这里 我有一个清单

00:37:03.246 --> 00:37:04.866 A:middle
列出了我的读者需要购买的

00:37:04.866 --> 00:37:05.866 A:middle
材料都有哪些

00:37:06.856 --> 00:37:07.456 A:middle
而且我想 如果我能够给他们

00:37:07.456 --> 00:37:10.906 A:middle
提供一种添加购物车的途径

00:37:10.906 --> 00:37:13.226 A:middle
购买他们可能会需要的物品

00:37:13.226 --> 00:37:14.156 A:middle
那该多方便

00:37:14.156 --> 00:37:15.406 A:middle
而且他们甚至可能

00:37:15.406 --> 00:37:16.726 A:middle
直接从我的网站

00:37:16.726 --> 00:37:18.136 A:middle
进行采购

00:37:18.926 --> 00:37:20.006 A:middle
而且 我猜想我也许能

00:37:20.006 --> 00:37:23.326 A:middle
通过这个办法赚点私房钱

00:37:23.456 --> 00:37:26.456 A:middle
这里 我能够从左侧

00:37:26.456 --> 00:37:28.256 A:middle
拖放物品到

00:37:28.256 --> 00:37:29.976 A:middle
这个购物清单中

00:37:43.496 --> 00:37:45.286 A:middle
而且这个功能在我的

00:37:45.286 --> 00:37:45.976 A:middle
iPad 上也一样好用

00:37:46.076 --> 00:37:48.686 A:middle
那么让我们来看看

00:37:48.686 --> 00:37:49.766 A:middle
想要达到这个效果

00:37:49.876 --> 00:37:49.976 A:middle
需要哪些代码

00:37:57.046 --> 00:37:57.916 A:middle
真的不需要一大堆代码

00:37:57.916 --> 00:37:58.856 A:middle
就能实现这个效果

00:37:59.766 --> 00:38:02.126 A:middle
对于每一个物品

00:37:59.766 --> 00:38:02.126 A:middle
对于每一个物品

00:38:02.126 --> 00:38:04.366 A:middle
我添加了 dragStart 事件监听器

00:38:04.366 --> 00:38:07.576 A:middle
它用来存放元素的文本

00:38:07.576 --> 00:38:09.556 A:middle
通过使用 Data Transfer API

00:38:10.816 --> 00:38:12.896 A:middle
而在“放”的区域

00:38:12.896 --> 00:38:15.186 A:middle
也就是购物清单区域

00:38:15.186 --> 00:38:17.066 A:middle
我有一个 drop 事件监听器

00:38:17.066 --> 00:38:18.886 A:middle
它可以从 Data Transfer API 上

00:38:20.156 --> 00:38:22.286 A:middle
提取之前存储的文本

00:38:22.286 --> 00:38:24.976 A:middle
并将其附加到购物清单元素

00:38:29.166 --> 00:38:30.526 A:middle
注意 你还需要添加一个

00:38:30.526 --> 00:38:32.146 A:middle
dragOver 事件监听器

00:38:32.636 --> 00:38:36.596 A:middle
到你想要“放下”元素的区域

00:38:36.596 --> 00:38:39.226 A:middle
以防止默认的事件的发生

00:38:39.226 --> 00:38:41.316 A:middle
并明确指示对于那个元素

00:38:41.316 --> 00:38:42.536 A:middle
drop 是允许的

00:38:43.086 --> 00:38:45.716 A:middle
所以 只需要很少的代码

00:38:45.716 --> 00:38:47.236 A:middle
我就能够创建这个有趣的

00:38:47.236 --> 00:38:48.986 A:middle
购物 UI 它能在 Mac 上很好地运行

00:38:49.306 --> 00:38:50.786 A:middle
现在在 iPad 上也能使用了

00:38:51.076 --> 00:38:54.726 A:middle
现在 既然我已经把物品

00:38:54.726 --> 00:38:56.546 A:middle
放在了购物清单里

00:38:56.546 --> 00:38:57.726 A:middle
我需要找到一个方法 让我的用户

00:38:57.726 --> 00:38:58.756 A:middle
能够真正实现购买

00:38:59.406 --> 00:39:02.726 A:middle
让我们来看看如何能

00:38:59.406 --> 00:39:02.726 A:middle
让我们来看看如何能

00:39:02.726 --> 00:39:03.886 A:middle
利用支付请求 API

00:39:03.886 --> 00:39:05.256 A:middle
来为用户提供一个很棒的

00:39:05.256 --> 00:39:06.796 A:middle
Apple Pay 体验

00:39:08.836 --> 00:39:10.156 A:middle
我已经为我的网站添加了

00:39:10.156 --> 00:39:12.726 A:middle
必要的 HTML 和 CSS

00:39:12.726 --> 00:39:14.036 A:middle
以显示一个 Apple Pay 按钮

00:39:14.036 --> 00:39:16.396 A:middle
但我把它默认设置成隐藏

00:39:16.976 --> 00:39:17.976 A:middle
只有在用户的设备确定有能力

00:39:17.976 --> 00:39:20.626 A:middle
使用 Apple Pay 的情况下

00:39:20.626 --> 00:39:23.126 A:middle
你才应该显示 Apple Pay 按钮

00:39:24.176 --> 00:39:27.966 A:middle
让我们来写下

00:39:27.966 --> 00:39:28.033 A:middle
检查设备的代码

00:39:28.366 --> 00:39:30.256 A:middle
使用 ApplePaySession.canMakePayments

00:39:30.256 --> 00:39:30.616 A:middle
方法

00:39:30.776 --> 00:39:33.556 A:middle
如果 Apple Pay 可使用

00:39:33.556 --> 00:39:33.976 A:middle
我们就显示按钮

00:39:38.326 --> 00:39:41.036 A:middle
让我们向按钮添加一个

00:39:42.816 --> 00:39:43.396 A:middle
事件监听器

00:39:43.396 --> 00:39:44.666 A:middle
现在 在这个函数里

00:39:44.666 --> 00:39:45.606 A:middle
我们将创造一个新的

00:39:45.606 --> 00:39:47.736 A:middle
paymentRequest 实例去

00:39:47.736 --> 00:39:48.976 A:middle
启动这个交易

00:39:54.436 --> 00:39:55.866 A:middle
如果 paymentRequest 不能使用

00:39:55.866 --> 00:39:57.976 A:middle
我们应该考虑使用 Apple Pay JS 来替代它

00:40:02.256 --> 00:40:04.596 A:middle
这里是 Payment Request API 的构造器

00:40:05.456 --> 00:40:07.406 A:middle
它可以接受三个参数

00:40:07.596 --> 00:40:13.036 A:middle
我们从添加 paymentMethod 数据对象开始

00:40:16.636 --> 00:40:18.456 A:middle
这包含了 Apple Pay 的

00:40:18.456 --> 00:40:20.826 A:middle
paymentMethod 识别符

00:40:20.826 --> 00:40:22.256 A:middle
以及 Apple Pay 特有的

00:40:22.256 --> 00:40:26.496 A:middle
一些选项

00:40:26.696 --> 00:40:29.956 A:middle
在这之后 是付款相关的各种细节

00:40:30.406 --> 00:40:31.976 A:middle
这里是我们指定

00:40:31.976 --> 00:40:33.716 A:middle
有关交易细节的地方

00:40:33.716 --> 00:40:35.366 A:middle
例如我的网站名称

00:40:35.366 --> 00:40:37.086 A:middle
交易总额和每个订单项

00:40:37.636 --> 00:40:40.546 A:middle
我决定让事情简单化

00:40:40.546 --> 00:40:41.556 A:middle
所以我把清单上的

00:40:41.556 --> 00:40:43.696 A:middle
每一项物品的定价都设为 5 美元

00:40:48.076 --> 00:40:50.346 A:middle
最后 options 参数

00:40:50.776 --> 00:40:52.466 A:middle
指明了我需要从我的用户那里

00:40:52.466 --> 00:40:54.006 A:middle
收集哪些信息

00:40:54.006 --> 00:40:55.206 A:middle
来完成交易

00:40:55.746 --> 00:40:58.626 A:middle
让我们切换回 iPad

00:40:58.626 --> 00:41:01.916 A:middle
并且加入一些物品到我的清单里

00:40:58.626 --> 00:41:01.916 A:middle
并且加入一些物品到我的清单里

00:41:11.186 --> 00:41:12.676 A:middle
那么 现在我们已经把所有的信息

00:41:12.676 --> 00:41:13.936 A:middle
输入进来了

00:41:13.936 --> 00:41:16.006 A:middle
我们需要去调用另一个方法来

00:41:16.006 --> 00:41:17.016 A:middle
展示这个表格

00:41:17.286 --> 00:41:20.716 A:middle
这就是对于 paymentRequest 的

00:41:20.716 --> 00:41:21.606 A:middle
show 方法

00:41:22.106 --> 00:41:23.086 A:middle
并且这个方法会返回一个 promise

00:41:23.086 --> 00:41:24.766 A:middle
当用户授权这笔交易的执行

00:41:24.986 --> 00:41:26.506 A:middle
做出支付回应时

00:41:26.506 --> 00:41:28.036 A:middle
就会调用响应函数 resolve

00:41:28.036 --> 00:41:29.546 A:middle
用户可以用 Face ID 或 Touch ID

00:41:29.546 --> 00:41:30.206 A:middle
等方式授权

00:41:30.906 --> 00:41:32.066 A:middle
这里是你可以

00:41:32.066 --> 00:41:33.446 A:middle
处理交易的地方

00:41:33.946 --> 00:41:37.456 A:middle
然后 最后一步 你可以调用 complete

00:41:37.456 --> 00:41:39.846 A:middle
获得一个交易成功或失败的值

00:41:39.846 --> 00:41:42.796 A:middle
这由交易的状态来决定

00:41:42.796 --> 00:41:45.436 A:middle
好的 现在我们在 iPad 上

00:41:45.436 --> 00:41:45.966 A:middle
实践一下

00:41:50.276 --> 00:41:50.976 A:middle
这样就行了

00:41:51.516 --> 00:41:56.046 A:middle
[ 掌声 ]

00:41:56.546 --> 00:41:58.156 A:middle
然后 你还需要执行

00:41:58.156 --> 00:41:59.626 A:middle
一些其他的步骤

00:41:59.626 --> 00:42:01.026 A:middle
例如 从 Apple Pay 服务器上

00:41:59.626 --> 00:42:01.026 A:middle
例如 从 Apple Pay 服务器上

00:42:01.026 --> 00:42:02.076 A:middle
获取付款会话

00:42:02.346 --> 00:42:04.396 A:middle
想了解关于这点的更多信息

00:42:04.426 --> 00:42:06.476 A:middle
请查看 Apple 开发者网站的

00:42:06.476 --> 00:42:08.056 A:middle
有关这个演讲的网页

00:42:08.056 --> 00:42:09.626 A:middle
上面会有关于这些资源的链接

00:42:11.076 --> 00:42:14.256 A:middle
现在 最后我意识到

00:42:14.256 --> 00:42:15.446 A:middle
我还没有让我的读者们看到

00:42:15.446 --> 00:42:18.716 A:middle
他们在建造的东西

00:42:18.946 --> 00:42:19.536 A:middle
整体是什么样子的

00:42:20.326 --> 00:42:21.956 A:middle
所以我想在页面的顶端

00:42:21.956 --> 00:42:23.826 A:middle
添加一个成品的

00:42:23.826 --> 00:42:24.296 A:middle
展示图

00:42:25.626 --> 00:42:27.266 A:middle
不过 为什么要满足于一张静态图片呢？

00:42:27.266 --> 00:42:28.236 A:middle
如果你能在自己周遭环境里

00:42:28.236 --> 00:42:29.626 A:middle
真的看到这个鸟舍

00:42:29.986 --> 00:42:31.206 A:middle
感觉一下它的尺寸大小

00:42:31.206 --> 00:42:32.206 A:middle
那不是很棒吗

00:42:33.106 --> 00:42:34.486 A:middle
那么 通过 iOS 12 中的

00:42:34.486 --> 00:42:36.066 A:middle
新 AR Quick Look 功能

00:42:36.066 --> 00:42:36.736 A:middle
我们只需要几行代码

00:42:36.736 --> 00:42:36.976 A:middle
就能实现

00:42:42.296 --> 00:42:43.886 A:middle
我们来进入我的 HTML

00:42:45.916 --> 00:42:46.606 A:middle
来插入代码

00:42:47.586 --> 00:42:49.256 A:middle
我现在所要做的就是

00:42:49.256 --> 00:42:49.736 A:middle
添加一个图像

00:42:50.166 --> 00:42:52.536 A:middle
并且链接到一个 USDZ 文档

00:42:52.866 --> 00:42:53.666 A:middle
它就是我的鸟舍模型

00:42:53.666 --> 00:42:56.936 A:middle
把 rel 属性设为 AR

00:42:57.206 --> 00:43:02.066 A:middle
切换回 iPad

00:42:57.206 --> 00:43:02.066 A:middle
切换回 iPad

00:43:03.076 --> 00:43:04.726 A:middle
这就是我们最终成品的样子

00:43:04.766 --> 00:43:06.656 A:middle
它看起来很不错 不过用户

00:43:06.656 --> 00:43:08.166 A:middle
还可以点击

00:43:08.166 --> 00:43:09.936 A:middle
AR Quick Look 的小图标

00:43:09.936 --> 00:43:10.926 A:middle
就在角落这里

00:43:11.296 --> 00:43:15.136 A:middle
我们可以查看这个模型

00:43:15.136 --> 00:43:18.726 A:middle
上下左右地挪动它

00:43:18.726 --> 00:43:20.586 A:middle
还能把它放置在真实环境里

00:43:20.586 --> 00:43:22.296 A:middle
直观地感受一下我

00:43:22.756 --> 00:43:22.886 A:middle
要建造的是什么

00:43:23.516 --> 00:43:29.836 A:middle
[ 掌声 ]

00:43:30.336 --> 00:43:33.576 A:middle
所以 其实实现起来

00:43:34.356 --> 00:43:34.806 A:middle
真的很简单

00:43:35.196 --> 00:43:36.416 A:middle
请查阅相关的板块

00:43:36.416 --> 00:43:37.226 A:middle
如果你有机会的话

00:43:37.386 --> 00:43:38.796 A:middle
现在我想请 Shloka 回到台上

00:43:38.796 --> 00:43:39.776 A:middle
来做最后的总结

00:43:39.776 --> 00:43:39.956 A:middle
谢谢大家

00:43:40.516 --> 00:43:46.916 A:middle
[ 掌声 ]

00:43:47.416 --> 00:43:49.076 A:middle
&gt;&gt; 非常感谢 Jason

00:43:49.076 --> 00:43:51.716 A:middle
而且这个 AR 模型看起来

00:43:51.716 --> 00:43:52.416 A:middle
非常非常的酷

00:43:52.656 --> 00:43:54.536 A:middle
而且 我认为它真的让我

00:43:55.626 --> 00:43:57.896 A:middle
想要建造一座鸟舍

00:43:58.886 --> 00:44:00.186 A:middle
不过我可没有做出任何承诺

00:43:58.886 --> 00:44:00.186 A:middle
不过我可没有做出任何承诺

00:44:02.026 --> 00:44:03.686 A:middle
综上所述 你可以添加自定义的

00:44:03.686 --> 00:44:04.466 A:middle
拖放功能

00:44:04.756 --> 00:44:07.096 A:middle
还可以自定义 iPad 的

00:44:07.476 --> 00:44:08.226 A:middle
全屏控制设定

00:44:08.896 --> 00:44:10.296 A:middle
你可以采用 Payment Request API

00:44:10.296 --> 00:44:12.106 A:middle
以支持 Apple Pay 的使用

00:44:12.106 --> 00:44:13.576 A:middle
采用 Service Worker API

00:44:13.576 --> 00:44:15.226 A:middle
以改善离线的用户体验

00:44:15.746 --> 00:44:17.656 A:middle
或者 你还可以为内容添加 AR 模型

00:44:17.656 --> 00:44:18.826 A:middle
以增加其深度

00:44:19.296 --> 00:44:20.836 A:middle
而且现在你的网站也可以在

00:44:20.836 --> 00:44:22.406 A:middle
苹果手表上浏览

00:44:22.956 --> 00:44:25.646 A:middle
我在演讲中提到了几个板块

00:44:25.696 --> 00:44:27.146 A:middle
供你们参考这几个单独的功能

00:44:27.146 --> 00:44:28.976 A:middle
不过如果你们在这场演讲结束后

00:44:28.976 --> 00:44:30.786 A:middle
立刻就有问题要问

00:44:30.786 --> 00:44:32.886 A:middle
请顺便来访问

00:44:32.886 --> 00:44:34.466 A:middle
Safari WebKit and Password AutoFill

00:44:34.466 --> 00:44:34.746 A:middle
实验室

00:44:35.186 --> 00:44:36.476 A:middle
并且可以查看

00:44:36.476 --> 00:44:38.066 A:middle
这个板块的链接

00:44:38.236 --> 00:44:40.656 A:middle
还有文档资源

00:44:40.656 --> 00:44:41.746 A:middle
以及其他相关的板块

00:44:42.076 --> 00:44:45.576 A:middle
现在 关于 Web

00:44:45.576 --> 00:44:47.336 A:middle
真的有太多太多的功能

00:44:47.756 --> 00:44:48.946 A:middle
我希望这个简要的概述能够

00:44:48.946 --> 00:44:51.246 A:middle
让你们感受到

00:44:51.246 --> 00:44:53.656 A:middle
苹果公司是如何不断地改进

00:44:53.656 --> 00:44:56.066 A:middle
对 Safari 和 WebKit 的支持

00:44:56.066 --> 00:44:58.646 A:middle
以便于 web 开发者 本地开发者

00:44:58.646 --> 00:45:00.046 A:middle
还有扩展开发者

00:44:58.646 --> 00:45:00.046 A:middle
还有扩展开发者

00:45:00.046 --> 00:45:01.966 A:middle
能够一直为他们的用户

00:45:01.966 --> 00:45:04.496 A:middle
提供尽可能

00:45:04.496 --> 00:45:05.076 A:middle
好的体验

00:45:06.446 --> 00:45:07.356 A:middle
感谢各位在场参与

00:45:07.356 --> 00:45:10.356 A:middle
我们的板块

00:45:10.706 --> 00:45:12.526 A:middle
希望你们喜欢

00:45:12.526 --> 00:45:13.496 A:middle
并且 祝大家接下来在 WWDC 的时间

00:45:13.556 --> 00:45:13.976 A:middle
过得愉快

00:45:14.516 --> 00:45:18.500 A:middle
[ 掌声 ]
