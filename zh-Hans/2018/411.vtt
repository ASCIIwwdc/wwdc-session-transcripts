WEBVTT

00:00:07.016 --> 00:00:15.500 A:middle
[ 音乐 ]

00:00:21.516 --> 00:00:26.616 A:middle
[ 掌声 ]

00:00:27.116 --> 00:00:29.286 A:middle
欢迎来到

00:00:29.286 --> 00:00:30.706 A:middle
Getting to Know Swift Manager

00:00:31.476 --> 00:00:32.386 A:middle
我是 Rick Ballard

00:00:32.856 --> 00:00:34.476 A:middle
和我一起的是 Boris Buegling

00:00:34.726 --> 00:00:35.946 A:middle
我们非常高兴

00:00:35.946 --> 00:00:37.356 A:middle
能来给你们介绍

00:00:37.356 --> 00:00:38.926 A:middle
Swift 的包管理器

00:00:38.926 --> 00:00:40.236 A:middle
有时也叫 SwiftPM

00:00:40.236 --> 00:00:43.156 A:middle
今天我们主要关注的

00:00:43.156 --> 00:00:44.516 A:middle
就是这个开源项目

00:00:44.716 --> 00:00:46.126 A:middle
而不是 Apple 的

00:00:46.126 --> 00:00:47.056 A:middle
其他开发者工具

00:00:47.266 --> 00:00:49.466 A:middle
今天要讲的内容有很多

00:00:50.906 --> 00:00:52.346 A:middle
Swift 包管理器

00:00:52.346 --> 00:00:54.226 A:middle
使得在 Swift 生态系统里

00:00:54.226 --> 00:00:56.986 A:middle
开发和分配源代码变得更轻松

00:00:57.656 --> 00:00:58.576 A:middle
今天我们就来讨论一下

00:00:58.576 --> 00:01:00.946 A:middle
它的目标 设计

00:00:58.576 --> 00:01:00.946 A:middle
它的目标 设计

00:01:00.946 --> 00:01:03.876 A:middle
还有一些对未来的展望

00:01:05.275 --> 00:01:06.836 A:middle
首先 我想先说一下

00:01:06.836 --> 00:01:08.526 A:middle
为什么我们决定

00:01:08.526 --> 00:01:10.126 A:middle
为 Swift 项目

00:01:10.196 --> 00:01:11.586 A:middle
创建一个新的包管理器

00:01:12.426 --> 00:01:14.186 A:middle
我们将简单介绍它的使用方法

00:01:14.186 --> 00:01:16.276 A:middle
然后深入讨论它的设计

00:01:16.276 --> 00:01:17.146 A:middle
和特性

00:01:18.356 --> 00:01:19.396 A:middle
我们还会讲到

00:01:19.396 --> 00:01:20.596 A:middle
我们未来的打算

00:01:20.596 --> 00:01:22.706 A:middle
最后会介绍

00:01:22.706 --> 00:01:24.586 A:middle
SwiftPM 的开源过程

00:01:24.666 --> 00:01:26.246 A:middle
以及如果你感兴趣

00:01:26.246 --> 00:01:27.646 A:middle
要如何加入

00:01:28.796 --> 00:01:30.186 A:middle
我相信你们大多数人对

00:01:30.186 --> 00:01:31.486 A:middle
包管理器都很熟悉

00:01:31.986 --> 00:01:33.506 A:middle
它们可以很好的用来

00:01:33.506 --> 00:01:34.276 A:middle
分享和再利用代码

00:01:34.276 --> 00:01:36.146 A:middle
但是我们为什么

00:01:36.146 --> 00:01:37.946 A:middle
要给 Swift 再做一个新的呢

00:01:39.576 --> 00:01:41.356 A:middle
首先是因为

00:01:41.356 --> 00:01:42.646 A:middle
Swift 是一个跨平台语言

00:01:42.906 --> 00:01:43.836 A:middle
所以我们想

00:01:43.836 --> 00:01:45.446 A:middle
为你的 Swift 代码

00:01:45.446 --> 00:01:46.096 A:middle
建一个跨平台工具

00:01:46.996 --> 00:01:48.376 A:middle
这样你可以更容易的

00:01:48.376 --> 00:01:49.866 A:middle
以一致的方式配置代码

00:01:49.866 --> 00:01:51.596 A:middle
并且在所有 Swift

00:01:51.666 --> 00:01:52.936 A:middle
支持的平台上使用

00:01:53.696 --> 00:01:55.386 A:middle
SwiftPM 包括

00:01:55.386 --> 00:01:57.166 A:middle
完整的构建系统

00:01:57.166 --> 00:01:58.856 A:middle
让你只用一个工具

00:01:59.176 --> 00:02:02.976 A:middle
就可以配置 构建 测试 甚至运行软件

00:01:59.176 --> 00:02:02.976 A:middle
就可以配置 构建 测试 甚至运行软件

00:02:07.556 --> 00:02:08.916 A:middle
同时 我们还致力于

00:02:08.916 --> 00:02:10.485 A:middle
让你能够将

00:02:10.485 --> 00:02:12.856 A:middle
你的 Swift 库

00:02:12.856 --> 00:02:14.836 A:middle
轻松分享给任何人

00:02:15.116 --> 00:02:16.676 A:middle
通过在 Swift 项目中

00:02:16.676 --> 00:02:18.976 A:middle
提供规范的包管理器

00:02:18.976 --> 00:02:20.626 A:middle
我们希望能

00:02:20.686 --> 00:02:21.516 A:middle
为分发库的方式

00:02:21.516 --> 00:02:22.706 A:middle
建立一个公共标准

00:02:23.466 --> 00:02:24.676 A:middle
这也有助于

00:02:24.676 --> 00:02:26.506 A:middle
Swift 生态系统的发展

00:02:26.546 --> 00:02:27.546 A:middle
让 Swift 变得更好

00:02:28.006 --> 00:02:31.426 A:middle
很多人可能有

00:02:31.626 --> 00:02:33.206 A:middle
想要添加的特性

00:02:33.626 --> 00:02:34.756 A:middle
但是我们对

00:02:34.756 --> 00:02:36.276 A:middle
加入核心库的内容非常谨慎

00:02:36.276 --> 00:02:37.966 A:middle
这样才能保证

00:02:37.966 --> 00:02:39.426 A:middle
我们的 API 是精心呈现的

00:02:40.486 --> 00:02:41.966 A:middle
优秀的包管理器

00:02:41.966 --> 00:02:43.446 A:middle
可以较为容易的以包的形式配置

00:02:43.866 --> 00:02:45.976 A:middle
想要添加的内容 而不是

00:02:45.976 --> 00:02:47.866 A:middle
直接把它们放入核心库

00:02:48.576 --> 00:02:50.386 A:middle
随着时间发展

00:02:50.386 --> 00:02:52.156 A:middle
优质的内容

00:02:52.156 --> 00:02:53.486 A:middle
在社区会越来越受欢迎

00:02:53.486 --> 00:02:55.066 A:middle
并且逐渐标准化

00:02:56.516 --> 00:02:58.486 A:middle
最后

00:02:58.486 --> 00:03:00.496 A:middle
建立 Swift 的包管理器

00:02:58.486 --> 00:03:00.496 A:middle
建立 Swift 的包管理器

00:03:00.496 --> 00:03:01.746 A:middle
让我们可以利用

00:03:01.746 --> 00:03:03.676 A:middle
Swift 的功能和理念

00:03:04.716 --> 00:03:06.406 A:middle
SwiftPM 本身是

00:03:06.406 --> 00:03:08.896 A:middle
写在 Swift 里的 并且也是一个 Swift 包

00:03:09.656 --> 00:03:10.836 A:middle
除此之外

00:03:10.836 --> 00:03:13.116 A:middle
我们和 Swift 语言

00:03:13.156 --> 00:03:14.676 A:middle
以及核心库项目

00:03:14.676 --> 00:03:16.806 A:middle
通力合作

00:03:16.806 --> 00:03:18.076 A:middle
为包管理器构建了很棒的功能

00:03:18.076 --> 00:03:19.576 A:middle
能帮助你的 Swift 代码更好的发挥作用

00:03:21.006 --> 00:03:23.106 A:middle
SwiftPM 是

00:03:23.106 --> 00:03:25.306 A:middle
Swift 开源项目的一部分

00:03:25.306 --> 00:03:28.636 A:middle
在 Swift.org 和 GitHub 上都可以访问

00:03:29.596 --> 00:03:30.636 A:middle
Swift.org 上的

00:03:30.636 --> 00:03:32.886 A:middle
Swift 包管理器部分

00:03:32.886 --> 00:03:34.286 A:middle
是对其入门的好地方

00:03:35.596 --> 00:03:37.456 A:middle
如果你决定试着使用

00:03:37.456 --> 00:03:40.696 A:middle
你可以在所有 Swift 工具链中找到它

00:03:40.696 --> 00:03:42.426 A:middle
也可以从 Swift.org 下载

00:03:43.106 --> 00:03:44.946 A:middle
当然 它也和 Swift 工具一起

00:03:44.946 --> 00:03:46.856 A:middle
包含在 Xcode 的

00:03:46.856 --> 00:03:47.746 A:middle
每一次发布中

00:03:49.166 --> 00:03:51.716 A:middle
接下来讲解 如何使用 SwiftPM

00:03:52.166 --> 00:03:53.186 A:middle
让我们邀请

00:03:53.186 --> 00:03:54.546 A:middle
Boris Buegling 上台

00:03:54.546 --> 00:03:54.976 A:middle
展示一下基本内容

00:03:55.516 --> 00:04:02.500 A:middle
[ 掌声 ]

00:03:55.516 --> 00:04:02.500 A:middle
[ 掌声 ]

00:04:07.076 --> 00:04:08.376 A:middle
谢谢 Rick

00:04:08.376 --> 00:04:10.366 A:middle
让我们了解一下如何使用 SwiftPM

00:04:12.736 --> 00:04:15.096 A:middle
SwiftPM 包含四个

00:04:15.096 --> 00:04:16.976 A:middle
命令行工具

00:04:16.976 --> 00:04:17.666 A:middle
顶层是 Swift Command

00:04:18.466 --> 00:04:20.726 A:middle
Swift Build 用于创建你的包

00:04:21.065 --> 00:04:23.676 A:middle
Swift Run 用于运行可执行文件

00:04:24.096 --> 00:04:26.466 A:middle
Swift Test 用于进行测试

00:04:26.986 --> 00:04:29.326 A:middle
Swift Package 用于对包进行

00:04:29.326 --> 00:04:33.176 A:middle
各种非创建操作

00:04:33.316 --> 00:04:35.566 A:middle
包储存在 git 储存区

00:04:35.986 --> 00:04:37.876 A:middle
并且用 git 标签

00:04:37.916 --> 00:04:38.756 A:middle
标示分支

00:04:41.656 --> 00:04:43.496 A:middle
接下来 我会演示

00:04:43.496 --> 00:04:45.866 A:middle
创建第一个 Swift 包

00:04:45.866 --> 00:04:47.416 A:middle
是多么简单的事情

00:04:51.136 --> 00:04:54.026 A:middle
从终端开始

00:04:54.026 --> 00:04:56.886 A:middle
创建一个新的目录叫 helloworld

00:04:57.806 --> 00:04:59.656 A:middle
这也是我们包的名字

00:05:00.386 --> 00:05:02.706 A:middle
转到该目录

00:05:02.706 --> 00:05:06.656 A:middle
并运行 swift package init

00:05:06.656 --> 00:05:08.046 A:middle
--type executable

00:05:08.576 --> 00:05:12.166 A:middle
这样 SwiftPM 就创建了

00:05:12.166 --> 00:05:14.006 A:middle
一个基本包和结构

00:05:15.096 --> 00:05:18.306 A:middle
让我们打开访达

00:05:18.306 --> 00:05:19.556 A:middle
仔细看一下这个包

00:05:29.046 --> 00:05:30.426 A:middle
这个是 Package.swift

00:05:30.426 --> 00:05:33.356 A:middle
清单文件 用来描述包的结构

00:05:33.746 --> 00:05:34.656 A:middle
有一个 README

00:05:34.656 --> 00:05:38.026 A:middle
还有 Sources 目录

00:05:39.086 --> 00:05:40.266 A:middle
其中的子文件夹就是

00:05:40.266 --> 00:05:41.176 A:middle
我们的目标 helloworld

00:05:41.836 --> 00:05:43.736 A:middle
以及可执行项的

00:05:43.736 --> 00:05:44.306 A:middle
main.swift 文件

00:05:44.986 --> 00:05:46.286 A:middle
同时还有一个 test 目录

00:05:46.486 --> 00:05:48.476 A:middle
一会儿可以放入一些单元测试

00:05:49.186 --> 00:05:52.146 A:middle
让我们回到终端

00:05:52.816 --> 00:05:58.296 A:middle
输入 swift run

00:05:58.296 --> 00:06:00.126 A:middle
来构建和运行这个包

00:05:58.296 --> 00:06:00.126 A:middle
来构建和运行这个包

00:06:00.466 --> 00:06:03.066 A:middle
这个命令会编译该包

00:06:03.066 --> 00:06:05.056 A:middle
链接可执行项

00:06:05.056 --> 00:06:06.266 A:middle
于是我们看到了输出的 Hello，World！

00:06:06.766 --> 00:06:10.766 A:middle
下面 我要换另外一个终端窗口

00:06:10.766 --> 00:06:12.566 A:middle
在那里我准备了一个 复杂一点儿的包

00:06:12.706 --> 00:06:13.656 A:middle
在接下来讲解关于

00:06:13.656 --> 00:06:16.926 A:middle
SwiftPM 的基本概念时

00:06:17.116 --> 00:06:18.276 A:middle
我们会使用它

00:06:19.026 --> 00:06:22.106 A:middle
首先 让我们先运行一下

00:06:22.106 --> 00:06:23.346 A:middle
看看它是干嘛的

00:06:24.236 --> 00:06:25.986 A:middle
你可以看到

00:06:25.986 --> 00:06:27.546 A:middle
它会在终端随机产生

00:06:27.986 --> 00:06:28.666 A:middle
扑克牌花色和数字

00:06:35.076 --> 00:06:36.666 A:middle
现在 我们可以回到

00:06:36.666 --> 00:06:39.816 A:middle
幻灯片来说一说

00:06:39.866 --> 00:06:40.816 A:middle
SwiftPM 的基本概念

00:06:47.436 --> 00:06:49.186 A:middle
一个包分为三个

00:06:49.186 --> 00:06:51.006 A:middle
主要部分 依赖

00:06:52.576 --> 00:06:57.206 A:middle
目标和产品

00:06:57.736 --> 00:06:59.666 A:middle
接下来我们会

00:06:59.666 --> 00:07:01.876 A:middle
分别了解一下每一个部分

00:06:59.666 --> 00:07:01.876 A:middle
分别了解一下每一个部分

00:07:04.036 --> 00:07:05.836 A:middle
依赖是当你

00:07:05.836 --> 00:07:08.336 A:middle
开发功能的时候

00:07:08.336 --> 00:07:09.476 A:middle
可使用的 Swift 包

00:07:10.146 --> 00:07:14.346 A:middle
每个依赖提供

00:07:14.346 --> 00:07:16.736 A:middle
一个或多个产品

00:07:17.256 --> 00:07:18.466 A:middle
比如你的包可使用的库

00:07:19.046 --> 00:07:21.816 A:middle
让我们来看一下

00:07:21.816 --> 00:07:23.286 A:middle
包中的依赖

00:07:23.286 --> 00:07:26.216 A:middle
在 Swift 清单文件里是什么样子

00:07:26.426 --> 00:07:27.816 A:middle
每个依赖都有源位置

00:07:27.816 --> 00:07:31.486 A:middle
而且有版本号

00:07:35.576 --> 00:07:37.436 A:middle
目标是包的

00:07:37.436 --> 00:07:38.646 A:middle
基本构建模块

00:07:39.786 --> 00:07:42.076 A:middle
一个目标描述

00:07:42.076 --> 00:07:44.736 A:middle
如何将一组源文件

00:07:45.156 --> 00:07:47.606 A:middle
构建到模块或者测试套件中

00:07:49.956 --> 00:07:51.856 A:middle
目标可以依赖

00:07:51.856 --> 00:07:54.736 A:middle
同个包里的其他目标

00:07:56.456 --> 00:07:58.716 A:middle
或者从其他包里

00:07:58.716 --> 00:08:00.106 A:middle
导出的

00:07:58.716 --> 00:08:00.106 A:middle
导出的

00:08:00.106 --> 00:08:00.776 A:middle
声明为依赖的产品

00:08:02.976 --> 00:08:04.656 A:middle
产品可以由库

00:08:04.656 --> 00:08:08.396 A:middle
执行

00:08:08.396 --> 00:08:09.476 A:middle
产品是由一个或者多个目标的

00:08:09.476 --> 00:08:11.506 A:middle
构件组成的

00:08:13.996 --> 00:08:16.166 A:middle
包通过定义产品

00:08:16.166 --> 00:08:18.836 A:middle
为其他包提供库

00:08:19.726 --> 00:08:22.536 A:middle
默认情况下

00:08:22.536 --> 00:08:23.946 A:middle
你不需要声明库的类型

00:08:23.946 --> 00:08:26.726 A:middle
SwiftPM 会根据

00:08:26.726 --> 00:08:29.356 A:middle
它的使用情况来帮你选择

00:08:30.446 --> 00:08:32.346 A:middle
如果需要

00:08:32.346 --> 00:08:34.586 A:middle
你可以特定声明一个库

00:08:34.586 --> 00:08:34.976 A:middle
是静态的或者动态的

00:08:35.586 --> 00:08:38.496 A:middle
让我们看一下

00:08:38.496 --> 00:08:40.756 A:middle
目标是如何

00:08:41.746 --> 00:08:42.066 A:middle
清单中配置的

00:08:42.066 --> 00:08:43.996 A:middle
在这个例子里 一共有三个目标

00:08:45.916 --> 00:08:47.866 A:middle
第一个叫 libdealer

00:08:48.046 --> 00:08:51.646 A:middle
它包含了我们主要功能的执行

00:08:52.496 --> 00:08:53.906 A:middle
它有一个依赖

00:08:53.906 --> 00:08:55.036 A:middle
是 DeckOfPlayingCards

00:08:55.946 --> 00:08:58.266 A:middle
就是我们之前声明的

00:08:58.266 --> 00:08:59.096 A:middle
依赖的产品

00:09:00.896 --> 00:09:03.206 A:middle
第二个目标是 dealer 它需要依靠

00:09:03.206 --> 00:09:04.946 A:middle
前一个目标来提供

00:09:04.946 --> 00:09:06.536 A:middle
我们刚才运行的命令行工具

00:09:07.096 --> 00:09:10.756 A:middle
最后 有一个测试目标

00:09:10.756 --> 00:09:12.126 A:middle
它依赖于

00:09:12.126 --> 00:09:13.696 A:middle
其他两个目标

00:09:13.696 --> 00:09:14.956 A:middle
我们可以对功能进行单元测试

00:09:20.026 --> 00:09:21.436 A:middle
在我们的样例包中

00:09:21.436 --> 00:09:23.206 A:middle
我们还配置了两个产品

00:09:24.646 --> 00:09:26.676 A:middle
第一个是库产品

00:09:27.206 --> 00:09:29.026 A:middle
对应目标 libdealer

00:09:30.066 --> 00:09:31.806 A:middle
它把我们的执行结果

00:09:31.806 --> 00:09:33.736 A:middle
作为库提供给

00:09:33.736 --> 00:09:34.746 A:middle
外部使用

00:09:35.186 --> 00:09:39.016 A:middle
第二个是一个

00:09:39.016 --> 00:09:41.166 A:middle
可执行目标

00:09:41.166 --> 00:09:43.916 A:middle
它依靠 dealer 目标

00:09:43.916 --> 00:09:45.526 A:middle
为命令行提供可执行项

00:09:50.496 --> 00:09:52.686 A:middle
最后我要展示一下

00:09:52.686 --> 00:09:53.886 A:middle
如果运用包

00:09:53.886 --> 00:09:56.306 A:middle
为本例添加一个新功能

00:09:59.836 --> 00:10:01.216 A:middle
让我们换到一个新的

00:09:59.836 --> 00:10:01.216 A:middle
让我们换到一个新的

00:10:01.216 --> 00:10:03.686 A:middle
终端窗口然后打开

00:10:04.116 --> 00:10:05.806 A:middle
package.swift 清单文件

00:10:05.806 --> 00:10:10.636 A:middle
添加一个新依赖

00:10:10.896 --> 00:10:15.156 A:middle
这次 我们添加的是

00:10:15.156 --> 00:10:16.136 A:middle
SwiftPM 本身

00:10:16.216 --> 00:10:19.296 A:middle
正如 Rick 所说

00:10:19.346 --> 00:10:20.426 A:middle
它自己就是 Swift 包

00:10:20.856 --> 00:10:22.446 A:middle
但是它并不提供一个稳定的API

00:10:22.606 --> 00:10:23.686 A:middle
这就是为什么我们

00:10:23.686 --> 00:10:25.486 A:middle
要依赖于一个具体的版本号

00:10:27.516 --> 00:10:30.146 A:middle
我们还希望能

00:10:30.146 --> 00:10:32.086 A:middle
在 libdealer 目标中

00:10:32.086 --> 00:10:32.476 A:middle
依赖于一个 SwiftPM 的产品

00:10:33.016 --> 00:10:34.206 A:middle
叫做 Utility

00:10:34.546 --> 00:10:37.716 A:middle
它有一个类

00:10:37.716 --> 00:10:40.146 A:middle
叫做终端控制器

00:10:40.146 --> 00:10:42.026 A:middle
让我们可以

00:10:42.216 --> 00:10:46.326 A:middle
在终端中输出不同的颜色

00:10:46.476 --> 00:10:48.056 A:middle
请记住

00:10:48.056 --> 00:10:49.986 A:middle
这不是官方 Apple API

00:10:49.986 --> 00:10:51.196 A:middle
我们只是用来演示

00:10:51.756 --> 00:10:54.906 A:middle
让我们回到终端

00:10:57.136 --> 00:10:59.576 A:middle
在演示前

00:10:59.576 --> 00:11:01.156 A:middle
我已经更改了代码

00:10:59.576 --> 00:11:01.156 A:middle
我已经更改了代码

00:11:02.016 --> 00:11:03.496 A:middle
来使用这个新依赖

00:11:03.876 --> 00:11:06.716 A:middle
让我们试着运行

00:11:06.716 --> 00:11:07.226 A:middle
看下结果

00:11:07.716 --> 00:11:09.926 A:middle
正如你所见

00:11:09.926 --> 00:11:11.346 A:middle
输出是一样的

00:11:11.346 --> 00:11:12.946 A:middle
但添加了一些颜色

00:11:12.946 --> 00:11:13.346 A:middle
变得更有趣了

00:11:19.096 --> 00:11:20.856 A:middle
现在我想展示最后一个演示

00:11:22.656 --> 00:11:24.986 A:middle
就是 SwiftPM 怎么运行测试

00:11:25.526 --> 00:11:28.566 A:middle
我们要使用 Swift Neo 包

00:11:29.096 --> 00:11:30.636 A:middle
它是一个 Apple

00:11:31.006 --> 00:11:32.686 A:middle
在春天发布的开源网络库

00:11:33.236 --> 00:11:37.986 A:middle
我们使用 --parallel 选项

00:11:38.226 --> 00:11:39.366 A:middle
运行 Swift Test

00:11:40.806 --> 00:11:42.576 A:middle
这让我们可以 进行平行测试

00:11:42.656 --> 00:11:44.656 A:middle
这样就可以更快的得到测试结果

00:11:45.216 --> 00:11:47.036 A:middle
还可以选择 filter 选项

00:11:49.396 --> 00:11:51.156 A:middle
这样你就可以运行子测试

00:11:51.156 --> 00:11:53.926 A:middle
基于单一结果进行迭代

00:11:57.736 --> 00:12:00.356 A:middle
现在需要在几秒内

00:11:57.736 --> 00:12:00.356 A:middle
现在需要在几秒内

00:12:01.166 --> 00:12:05.236 A:middle
再次编译我们的包并运行测试

00:12:09.136 --> 00:12:10.716 A:middle
如你所见

00:12:10.716 --> 00:12:13.236 A:middle
进度条很好

00:12:13.286 --> 00:12:14.536 A:middle
测试结束的很快

00:12:14.536 --> 00:12:15.636 A:middle
因为我们在平行运行它们

00:12:18.026 --> 00:12:19.836 A:middle
让我们再次回到幻灯片

00:12:26.536 --> 00:12:27.776 A:middle
接下来 我要讲一下

00:12:27.776 --> 00:12:29.936 A:middle
Swift 包管理器的设计

00:12:36.216 --> 00:12:38.606 A:middle
SwiftPM 遵循 Swift 的理念

00:12:38.986 --> 00:12:40.706 A:middle
快速 安全

00:12:40.706 --> 00:12:41.146 A:middle
表达能力强

00:12:41.816 --> 00:12:44.736 A:middle
它很安全

00:12:44.736 --> 00:12:46.426 A:middle
因为构建环境是独立的

00:12:46.426 --> 00:12:48.546 A:middle
而且构建项目不能运行任意指令

00:12:49.256 --> 00:12:52.116 A:middle
而快速得益于

00:12:52.116 --> 00:12:53.896 A:middle
使用了对大型依赖图

00:12:53.896 --> 00:12:54.886 A:middle
可扩展的构建引擎

00:12:55.416 --> 00:12:58.526 A:middle
表达能力强是因为

00:12:58.636 --> 00:13:00.716 A:middle
包清单文件使用的是 Swift 语言

00:12:58.636 --> 00:13:00.716 A:middle
包清单文件使用的是 Swift 语言

00:13:01.426 --> 00:13:04.136 A:middle
这也让你可以使用

00:13:04.136 --> 00:13:06.346 A:middle
已经熟悉的编程语言

00:13:06.956 --> 00:13:11.346 A:middle
接下来

00:13:11.346 --> 00:13:12.436 A:middle
我会向你展示

00:13:12.436 --> 00:13:13.726 A:middle
在创建 Swift 包时

00:13:13.726 --> 00:13:16.136 A:middle
会遇到的各个步骤

00:13:16.766 --> 00:13:19.576 A:middle
首先是配置

00:13:23.096 --> 00:13:25.126 A:middle
就像刚才见到的 SwiftPM 的清单文件

00:13:25.126 --> 00:13:26.796 A:middle
是基于 Swift 的

00:13:27.336 --> 00:13:28.906 A:middle
使用 Swift 让它更加容易理解

00:13:28.906 --> 00:13:31.116 A:middle
因为这样你不用学习任何

00:13:31.116 --> 00:13:32.136 A:middle
新的语言

00:13:32.736 --> 00:13:34.646 A:middle
而且我们还遵循了

00:13:34.646 --> 00:13:36.876 A:middle
Swift 的 API 设计准则

00:13:36.876 --> 00:13:37.416 A:middle
让你觉得更加熟悉

00:13:38.216 --> 00:13:40.216 A:middle
这还让我们可以

00:13:40.216 --> 00:13:42.216 A:middle
利用现有的

00:13:42.276 --> 00:13:47.086 A:middle
为 Swift 写的工具

00:13:47.086 --> 00:13:48.586 A:middle
但是当编写你自己的清单时

00:13:48.586 --> 00:13:50.076 A:middle
你还是应该使用声明式语法

00:13:50.076 --> 00:13:51.946 A:middle
以避免副作用发生

00:13:53.236 --> 00:13:54.586 A:middle
因为 SwiftPM 不能保证

00:13:54.586 --> 00:13:56.766 A:middle
在什么时候或按什么频率

00:13:56.766 --> 00:13:59.406 A:middle
评估你的源代码

00:14:00.316 --> 00:14:01.836 A:middle
左手边

00:14:01.836 --> 00:14:03.846 A:middle
这个例子就没有

00:14:03.846 --> 00:14:04.686 A:middle
完全使用声明式

00:14:05.416 --> 00:14:06.886 A:middle
我们看不到

00:14:06.886 --> 00:14:09.656 A:middle
生成的名字

00:14:09.656 --> 00:14:11.526 A:middle
而它在包里面出现了好几次

00:14:12.076 --> 00:14:15.736 A:middle
相反 在右边就是一个

00:14:15.736 --> 00:14:17.486 A:middle
运用字符串常量的

00:14:17.486 --> 00:14:18.406 A:middle
声明式清单文件

00:14:18.666 --> 00:14:20.356 A:middle
很容易理解

00:14:20.746 --> 00:14:21.726 A:middle
目标是什么

00:14:23.556 --> 00:14:25.526 A:middle
如你所见

00:14:25.526 --> 00:14:27.086 A:middle
不使用声明式语法

00:14:27.086 --> 00:14:28.056 A:middle
会让你的清单

00:14:28.056 --> 00:14:29.596 A:middle
对你和你的用户而言

00:14:29.596 --> 00:14:29.976 A:middle
更难理解

00:14:33.146 --> 00:14:35.226 A:middle
源文件被放在磁盘上

00:14:35.296 --> 00:14:36.786 A:middle
在包中以每个目标命名的

00:14:36.786 --> 00:14:38.806 A:middle
文件夹下

00:14:39.426 --> 00:14:40.846 A:middle
这样就可以上手

00:14:40.846 --> 00:14:43.216 A:middle
并且让包

00:14:43.246 --> 00:14:46.336 A:middle
使用一个常见结构

00:14:46.516 --> 00:14:47.796 A:middle
让你可以更快的导航

00:14:50.856 --> 00:14:52.496 A:middle
包管理器和其他构建工具

00:14:52.496 --> 00:14:54.506 A:middle
总是关注

00:14:55.036 --> 00:14:56.696 A:middle
哪些是用户

00:14:56.696 --> 00:14:58.636 A:middle
指定编写的

00:14:58.636 --> 00:15:00.256 A:middle
哪些是由包管理器

00:14:58.636 --> 00:15:00.256 A:middle
哪些是由包管理器

00:15:00.256 --> 00:15:00.976 A:middle
应用的惯例

00:15:06.046 --> 00:15:07.586 A:middle
正如之前所讲

00:15:07.586 --> 00:15:09.126 A:middle
源文件是自动从

00:15:09.126 --> 00:15:10.616 A:middle
盘里的惯例位置提取的

00:15:10.616 --> 00:15:12.746 A:middle
这样你可以很容易的

00:15:12.746 --> 00:15:14.286 A:middle
添加或者移除源文件

00:15:14.286 --> 00:15:15.936 A:middle
而不需要编辑

00:15:16.006 --> 00:15:17.316 A:middle
包清单文件

00:15:19.496 --> 00:15:21.096 A:middle
但是产品和目标

00:15:21.656 --> 00:15:23.326 A:middle
需要指定配置

00:15:23.326 --> 00:15:26.376 A:middle
这样可以更简单的

00:15:26.376 --> 00:15:28.436 A:middle
理解这个包和它的定义

00:15:28.676 --> 00:15:31.506 A:middle
而无需与盘的布局 进行对照

00:15:32.816 --> 00:15:33.876 A:middle
同时 客户仅仅通过看清单

00:15:33.876 --> 00:15:36.346 A:middle
就很容易明白

00:15:36.346 --> 00:15:38.846 A:middle
这个包提供的是什么内容

00:15:42.236 --> 00:15:44.756 A:middle
SwiftPM 同时支持

00:15:44.756 --> 00:15:45.926 A:middle
用其他语言创建源代码

00:15:45.926 --> 00:15:47.766 A:middle
比如 C C++

00:15:47.766 --> 00:15:49.456 A:middle
或者 Objective-C

00:15:50.156 --> 00:15:52.276 A:middle
并且可以与现有代码整合

00:15:53.456 --> 00:15:54.826 A:middle
但是请注意

00:15:54.826 --> 00:15:56.516 A:middle
我们不支持在同一个目标里

00:15:56.946 --> 00:15:58.646 A:middle
把这些语言和 Swift 混用

00:15:59.086 --> 00:16:03.266 A:middle
接下来 我们看一下

00:15:59.086 --> 00:16:03.266 A:middle
接下来 我们看一下

00:16:03.366 --> 00:16:04.646 A:middle
依赖和版本号

00:16:07.916 --> 00:16:10.006 A:middle
为了确保你的包

00:16:10.006 --> 00:16:12.116 A:middle
能够很好的进行错误修补

00:16:12.116 --> 00:16:14.136 A:middle
而不是频繁混乱

00:16:14.356 --> 00:16:16.306 A:middle
Swift 包需要坚持语义版本

00:16:17.606 --> 00:16:19.186 A:middle
这是一个常用标准

00:16:19.346 --> 00:16:20.656 A:middle
把具体语义

00:16:20.656 --> 00:16:22.246 A:middle
与每个版本数的部分

00:16:22.246 --> 00:16:23.246 A:middle
联系起来

00:16:25.376 --> 00:16:27.236 A:middle
主要版本意味着

00:16:27.276 --> 00:16:29.996 A:middle
破坏性改变

00:16:30.146 --> 00:16:31.936 A:middle
需要客户更新代码

00:16:33.196 --> 00:16:34.756 A:middle
这些改变包括

00:16:34.756 --> 00:16:36.516 A:middle
删除现有类型

00:16:36.996 --> 00:16:38.566 A:middle
删除信息

00:16:38.566 --> 00:16:39.236 A:middle
或者改变签名

00:16:40.166 --> 00:16:42.066 A:middle
同时包括

00:16:42.066 --> 00:16:45.296 A:middle
反向不兼容错误修补

00:16:45.296 --> 00:16:48.366 A:middle
或者对现有 API 的行为

00:16:48.366 --> 00:16:50.066 A:middle
做出的重大改变

00:16:50.896 --> 00:16:52.406 A:middle
次要版本是指

00:16:52.406 --> 00:16:55.646 A:middle
以反向兼容的形式

00:16:55.646 --> 00:16:56.006 A:middle
添加的功能

00:16:57.046 --> 00:16:58.456 A:middle
比如添加一个新的

00:16:58.456 --> 00:17:00.106 A:middle
方法或者类型

00:16:58.456 --> 00:17:00.106 A:middle
方法或者类型

00:17:00.996 --> 00:17:02.896 A:middle
最后 补丁版本是指

00:17:02.896 --> 00:17:04.465 A:middle
当你做反向兼容错误修补时

00:17:04.465 --> 00:17:06.736 A:middle
需要增加的数字

00:17:08.276 --> 00:17:10.776 A:middle
这让客户可以

00:17:10.776 --> 00:17:13.536 A:middle
可以得到错误修复

00:17:13.536 --> 00:17:17.695 A:middle
而不用担心破坏源代码

00:17:17.816 --> 00:17:21.296 A:middle
SwiftPM 在开始构建前

00:17:21.296 --> 00:17:23.246 A:middle
需要确定包图中所有包的

00:17:23.246 --> 00:17:24.056 A:middle
具体版本

00:17:24.705 --> 00:17:26.526 A:middle
我们要使用叫

00:17:26.526 --> 00:17:27.756 A:middle
依赖解析的过程

00:17:28.716 --> 00:17:30.796 A:middle
它可以让 SwiftPM

00:17:30.796 --> 00:17:32.376 A:middle
查看所有对包的指定要求

00:17:33.456 --> 00:17:37.516 A:middle
并找出和它们兼容的

00:17:37.516 --> 00:17:40.146 A:middle
最新版本

00:17:40.216 --> 00:17:41.396 A:middle
让我们再来看一下

00:17:41.396 --> 00:17:42.926 A:middle
SwiftPM 在这个过程中

00:17:42.926 --> 00:17:44.836 A:middle
都做了些什么

00:17:44.836 --> 00:17:45.306 A:middle
还用刚才的演示

00:17:47.136 --> 00:17:49.676 A:middle
dealer 包有两个

00:17:49.676 --> 00:17:51.066 A:middle
直接的依赖

00:17:51.476 --> 00:17:53.796 A:middle
一个是 SwiftPM 本身

00:17:53.796 --> 00:17:58.136 A:middle
另外一个是 DeckOfPlayingCards

00:17:58.276 --> 00:17:59.666 A:middle
SwiftPM 会分析

00:17:59.666 --> 00:18:01.456 A:middle
这些直接依赖的版本

00:17:59.666 --> 00:18:01.456 A:middle
这些直接依赖的版本

00:18:02.366 --> 00:18:03.666 A:middle
第一个一目了然

00:18:03.666 --> 00:18:05.086 A:middle
因为我们

00:18:05.086 --> 00:18:06.536 A:middle
指定了一个版本

00:18:07.886 --> 00:18:09.336 A:middle
写在了标签中

00:18:10.446 --> 00:18:12.866 A:middle
第二个 我们使用了 from 语法

00:18:13.286 --> 00:18:14.986 A:middle
意味着我们

00:18:14.986 --> 00:18:17.826 A:middle
对次要和补丁部分进行更新

00:18:18.356 --> 00:18:21.766 A:middle
本例中 最后得到的

00:18:21.896 --> 00:18:24.046 A:middle
是 3.1.4 标签

00:18:24.596 --> 00:18:28.566 A:middle
整个过程都是递归的

00:18:29.206 --> 00:18:30.876 A:middle
接下来 SwiftPM

00:18:30.876 --> 00:18:33.296 A:middle
查看所有直接依赖的传递依赖

00:18:33.726 --> 00:18:34.716 A:middle
PM 没有其他的依赖了

00:18:34.716 --> 00:18:37.146 A:middle
所以没有其他什么可做的了

00:18:37.706 --> 00:18:39.686 A:middle
但是 DeckOfPlayingCards

00:18:39.796 --> 00:18:41.236 A:middle
依赖于 fisher-yates 和

00:18:41.236 --> 00:18:42.346 A:middle
playing-card 包

00:18:42.916 --> 00:18:47.426 A:middle
SwiftPM 需要再次解析

00:18:47.426 --> 00:18:49.176 A:middle
这些包的版本

00:18:49.576 --> 00:18:50.976 A:middle
对 fisher-yates 包来说

00:18:51.066 --> 00:18:52.966 A:middle
方法是一样的

00:18:52.966 --> 00:18:55.576 A:middle
因为我们使用的还是 from 语法

00:18:56.666 --> 00:18:57.906 A:middle
在这里的

00:18:57.906 --> 00:18:59.626 A:middle
标签结果是 2.2.5

00:19:00.146 --> 00:19:02.716 A:middle
对 playing-card 包

00:19:02.986 --> 00:19:04.976 A:middle
我们使用的是 upToNextMinor 语法

00:19:05.446 --> 00:19:06.866 A:middle
意味着我们

00:19:06.866 --> 00:19:08.316 A:middle
只更新补丁部分

00:19:09.566 --> 00:19:10.466 A:middle
如果你想对依赖更保守一点

00:19:10.466 --> 00:19:11.786 A:middle
只进行错误修补

00:19:11.786 --> 00:19:14.576 A:middle
那么你应该使用这种语法

00:19:15.216 --> 00:19:17.786 A:middle
在这里的

00:19:17.786 --> 00:19:21.916 A:middle
标签结果是 3.0.2

00:19:22.066 --> 00:19:23.626 A:middle
最后 当考虑目标时

00:19:23.626 --> 00:19:26.486 A:middle
SwiftPM 需要

00:19:26.576 --> 00:19:28.456 A:middle
把要求的产品

00:19:28.456 --> 00:19:30.606 A:middle
和我们解析的包匹配

00:19:31.186 --> 00:19:32.556 A:middle
让我们看一下演示中的

00:19:32.556 --> 00:19:34.996 A:middle
dealer 目标

00:19:34.996 --> 00:19:36.696 A:middle
如你所见

00:19:36.696 --> 00:19:39.176 A:middle
Utility 产品是由

00:19:39.176 --> 00:19:40.346 A:middle
SwiftPM 包提供的

00:19:41.476 --> 00:19:43.116 A:middle
包的其他部分

00:19:43.786 --> 00:19:45.186 A:middle
提供其他产品

00:19:45.646 --> 00:19:50.156 A:middle
依赖解析之后

00:19:50.156 --> 00:19:52.106 A:middle
解析结果被保存在

00:19:52.106 --> 00:19:53.236 A:middle
package.resolved 文件里

00:19:53.816 --> 00:19:56.106 A:middle
这个文件的目的是

00:19:56.106 --> 00:19:57.556 A:middle
让你可以把你的

00:19:57.606 --> 00:19:59.086 A:middle
解析版本分享给

00:19:59.086 --> 00:20:01.076 A:middle
团队其他人或者

00:19:59.086 --> 00:20:01.076 A:middle
团队其他人或者

00:20:01.576 --> 00:20:03.496 A:middle
继续集成基础结构

00:20:03.496 --> 00:20:05.896 A:middle
这样你就可以得到 可依赖的构建结果

00:20:05.896 --> 00:20:07.436 A:middle
并且你可以选择

00:20:07.436 --> 00:20:10.976 A:middle
什么时候更新依赖

00:20:11.046 --> 00:20:12.536 A:middle
当你想更新时

00:20:12.536 --> 00:20:14.406 A:middle
运行 Swift Package Update 就可以

00:20:15.366 --> 00:20:19.896 A:middle
请注意 包含 package.resolved 的

00:20:19.936 --> 00:20:21.286 A:middle
是最顶层的包

00:20:22.176 --> 00:20:24.626 A:middle
如果有传递依赖包含

00:20:24.626 --> 00:20:26.606 A:middle
package.resolve 文件

00:20:26.606 --> 00:20:28.506 A:middle
它会被依赖解析忽略

00:20:30.776 --> 00:20:32.206 A:middle
接下来让我们看一下

00:20:32.206 --> 00:20:36.796 A:middle
包的构建

00:20:36.796 --> 00:20:38.446 A:middle
SwiftPM 使用 llbuild

00:20:38.446 --> 00:20:39.846 A:middle
作为基础构建引擎

00:20:40.526 --> 00:20:42.146 A:middle
llbuild 是一套构建

00:20:42.146 --> 00:20:43.156 A:middle
构建系统的库

00:20:43.726 --> 00:20:45.146 A:middle
建立在通用目标和

00:20:45.146 --> 00:20:47.546 A:middle
可重复利用的构建引擎之上

00:20:47.956 --> 00:20:49.836 A:middle
这样我们可以进行

00:20:49.836 --> 00:20:52.206 A:middle
更快也更准确的增量构建

00:20:53.056 --> 00:20:54.926 A:middle
Xcode 的新构建系统

00:20:54.926 --> 00:20:55.536 A:middle
也使用该引擎

00:20:56.096 --> 00:21:00.606 A:middle
这也是 Swift 开源项目的一部分

00:20:56.096 --> 00:21:00.606 A:middle
这也是 Swift 开源项目的一部分

00:21:02.796 --> 00:21:04.806 A:middle
独立的软件开发

00:21:04.876 --> 00:21:06.266 A:middle
再加上详细声明的依赖

00:21:06.266 --> 00:21:10.686 A:middle
保证了

00:21:10.686 --> 00:21:11.776 A:middle
即使有的包要求复杂

00:21:11.776 --> 00:21:13.476 A:middle
也可以安全可靠地

00:21:13.476 --> 00:21:15.736 A:middle
在不同环境下构建和使用

00:21:17.016 --> 00:21:18.376 A:middle
SwiftPM 不会把包

00:21:18.376 --> 00:21:19.596 A:middle
以全局形式安装到系统

00:21:19.786 --> 00:21:21.506 A:middle
它只允许你

00:21:21.506 --> 00:21:23.956 A:middle
使用你指明依赖的包

00:21:25.166 --> 00:21:29.116 A:middle
我们还利用了构建沙盒

00:21:29.116 --> 00:21:30.526 A:middle
这样在构建时 就不会

00:21:30.526 --> 00:21:32.106 A:middle
把内容写入文件系统的任意位置

00:21:33.546 --> 00:21:36.216 A:middle
SwiftPM 不允许

00:21:36.216 --> 00:21:37.676 A:middle
执行任意命令

00:21:37.676 --> 00:21:39.056 A:middle
或者外壳脚本

00:21:40.246 --> 00:21:41.326 A:middle
这让我们可以

00:21:41.326 --> 00:21:44.016 A:middle
完全了解你的构建图

00:21:44.396 --> 00:21:46.396 A:middle
和所有的输入输出

00:21:46.396 --> 00:21:49.366 A:middle
进行快速又准确的增量构建

00:21:50.166 --> 00:21:52.486 A:middle
因为我们知道

00:21:52.486 --> 00:21:53.326 A:middle
你所有的依赖

00:21:53.946 --> 00:21:56.726 A:middle
正如我之前演示时所说

00:21:56.726 --> 00:21:59.496 A:middle
SwiftPM 也支持测试

00:22:00.076 --> 00:22:02.716 A:middle
它建立在 XCTest 框架上

00:22:02.716 --> 00:22:03.306 A:middle
你应该已经很熟悉了

00:22:03.916 --> 00:22:07.136 A:middle
我们支持平行测试

00:22:07.136 --> 00:22:08.876 A:middle
这样你可以更快的得到测试结果

00:22:10.036 --> 00:22:12.766 A:middle
我们还支持测试过滤

00:22:12.766 --> 00:22:13.856 A:middle
这样你可以运行一系列

00:22:13.886 --> 00:22:15.566 A:middle
子测试并基于同一结果

00:22:15.566 --> 00:22:15.936 A:middle
进行迭代

00:22:16.496 --> 00:22:20.816 A:middle
因为我们在扩展 SwiftPM

00:22:20.816 --> 00:22:21.726 A:middle
我们考虑到了

00:22:21.726 --> 00:22:23.776 A:middle
工作流程功能

00:22:23.776 --> 00:22:25.116 A:middle
让你可以在命令行

00:22:25.116 --> 00:22:27.526 A:middle
进行所有的开发

00:22:27.716 --> 00:22:29.376 A:middle
这个功能就是编辑模式

00:22:30.246 --> 00:22:32.876 A:middle
它可以重写某个特定包所有的

00:22:32.876 --> 00:22:34.986 A:middle
传递事件

00:22:34.986 --> 00:22:37.186 A:middle
它创建了一个本地副本

00:22:37.386 --> 00:22:40.626 A:middle
这样可以进行临时编辑

00:22:40.626 --> 00:22:41.766 A:middle
而对传递依赖的

00:22:41.766 --> 00:22:43.326 A:middle
调整可以被测试

00:22:43.806 --> 00:22:44.996 A:middle
而不用把提前转给

00:22:44.996 --> 00:22:46.836 A:middle
包图中所有的包

00:22:51.036 --> 00:22:53.396 A:middle
分支依赖允许

00:22:53.396 --> 00:22:54.826 A:middle
在没有严格版本要求的情况下

00:22:54.826 --> 00:22:56.346 A:middle
依赖包

00:22:56.626 --> 00:22:58.146 A:middle
当你在同时

00:22:58.146 --> 00:23:00.076 A:middle
开发好几个包时 这个很有用

00:22:58.146 --> 00:23:00.076 A:middle
开发好几个包时 这个很有用

00:23:01.276 --> 00:23:02.396 A:middle
这是只针对开发的功能

00:23:02.396 --> 00:23:04.816 A:middle
所以当你发布标签之前

00:23:04.816 --> 00:23:06.446 A:middle
你需要调整到

00:23:06.706 --> 00:23:10.786 A:middle
特定版本的依赖

00:23:10.986 --> 00:23:12.636 A:middle
本地包让你可以

00:23:12.636 --> 00:23:14.526 A:middle
直接从文件系统

00:23:14.526 --> 00:23:17.296 A:middle
使用包 而不是从 Git 存储库

00:23:17.806 --> 00:23:19.056 A:middle
这很有用

00:23:19.056 --> 00:23:22.876 A:middle
可以让你在初始创建中

00:23:22.876 --> 00:23:24.816 A:middle
创建多个包

00:23:27.936 --> 00:23:29.566 A:middle
最后一个话题是

00:23:29.566 --> 00:23:33.176 A:middle
使用 SwiftPM 和 Swift 语言的新版本

00:23:33.746 --> 00:23:37.766 A:middle
每个新 Swift 版本

00:23:37.766 --> 00:23:39.156 A:middle
会产生一个新版本的

00:23:39.156 --> 00:23:40.866 A:middle
package.swift 清单 API

00:23:41.796 --> 00:23:43.146 A:middle
上一个版本 API

00:23:43.146 --> 00:23:45.876 A:middle
还可以使用

00:23:45.876 --> 00:23:47.366 A:middle
这样你可以利用新的源工具

00:23:47.556 --> 00:23:48.716 A:middle
而不需要更新你的包

00:23:48.716 --> 00:23:52.316 A:middle
或者失去对现有包的访问

00:23:53.576 --> 00:23:55.156 A:middle
采用新的 API

00:23:55.626 --> 00:23:57.676 A:middle
是独立于

00:23:57.676 --> 00:23:59.466 A:middle
将你的包源代码

00:23:59.466 --> 00:24:00.546 A:middle
更改到新的 Swift 语言版本的

00:23:59.466 --> 00:24:00.546 A:middle
更改到新的 Swift 语言版本的

00:24:01.146 --> 00:24:05.546 A:middle
若要指定使用的 API 具体是哪个版本

00:24:05.546 --> 00:24:08.006 A:middle
我们要在 package.swift

00:24:08.006 --> 00:24:09.476 A:middle
清单文件的顶层

00:24:10.526 --> 00:24:12.846 A:middle
使用 Swift 工具版本指令

00:24:13.446 --> 00:24:15.306 A:middle
它可以指定

00:24:15.306 --> 00:24:16.476 A:middle
用来处理给定清单所需的

00:24:16.476 --> 00:24:19.266 A:middle
Swift 工具的

00:24:19.266 --> 00:24:20.226 A:middle
最低版本要求

00:24:20.686 --> 00:24:24.056 A:middle
每个包还可以声明

00:24:24.176 --> 00:24:25.356 A:middle
它用来编译源代码的

00:24:25.356 --> 00:24:28.646 A:middle
Swift 语言版本

00:24:29.536 --> 00:24:31.186 A:middle
这是一个列表

00:24:31.186 --> 00:24:32.436 A:middle
通过使用编译指令

00:24:32.436 --> 00:24:34.216 A:middle
你可以对于自己同一版本的包

00:24:34.216 --> 00:24:36.846 A:middle
你可以支持多个版本的 Swift

00:24:37.816 --> 00:24:39.256 A:middle
一个包图可以是

00:24:39.256 --> 00:24:41.826 A:middle
很多不同语言版本的包的集合

00:24:44.456 --> 00:24:45.866 A:middle
今天讲了很多

00:24:45.866 --> 00:24:48.136 A:middle
SwiftPM 如何工作的

00:24:48.136 --> 00:24:49.516 A:middle
接下来 让我们再次

00:24:49.516 --> 00:24:51.746 A:middle
请 Rick 上台来讲一下

00:24:51.746 --> 00:24:52.476 A:middle
未来的展望

00:24:53.516 --> 00:24:58.626 A:middle
[ 掌声 ]

00:24:59.126 --> 00:24:59.946 A:middle
谢谢 Boris

00:25:01.286 --> 00:25:02.416 A:middle
Boris 向你们展示了现在

00:25:02.416 --> 00:25:04.856 A:middle
可以做什么 但其实

00:25:04.856 --> 00:25:06.136 A:middle
还有很多潜力

00:25:06.586 --> 00:25:08.426 A:middle
SwiftPM 还是一个新项目

00:25:08.426 --> 00:25:09.716 A:middle
有很多成长空间

00:25:11.216 --> 00:25:13.396 A:middle
Swift 使用了一个

00:25:13.396 --> 00:25:14.986 A:middle
开放演化的过程

00:25:15.206 --> 00:25:17.956 A:middle
意味着任何人 包括你们都可以贡献想法

00:25:18.926 --> 00:25:19.796 A:middle
如果你想得到一些启发

00:25:19.796 --> 00:25:21.596 A:middle
我们也愿意分享一些

00:25:21.596 --> 00:25:23.736 A:middle
我们的想法

00:25:23.736 --> 00:25:25.136 A:middle
虽然它们还没有形成计划

00:25:25.946 --> 00:25:27.086 A:middle
我们分享这些想法

00:25:27.086 --> 00:25:29.956 A:middle
为了让你看到 Swift 包管理器的潜力

00:25:30.276 --> 00:25:32.276 A:middle
也很希望能得到

00:25:32.276 --> 00:25:33.926 A:middle
你们的反馈评论和想法

00:25:33.926 --> 00:25:36.706 A:middle
帮助我们推进这个产品

00:25:38.216 --> 00:25:39.636 A:middle
我今天要讲的

00:25:39.806 --> 00:25:41.266 A:middle
想法分为四个

00:25:41.266 --> 00:25:42.106 A:middle
不同的主题

00:25:43.256 --> 00:25:44.396 A:middle
第一个应该就是

00:25:44.396 --> 00:25:45.806 A:middle
让 Swift 包管理器

00:25:45.806 --> 00:25:47.756 A:middle
和其他工具融合

00:25:47.756 --> 00:25:50.366 A:middle
帮助你发布

00:25:50.366 --> 00:25:52.756 A:middle
包的新版本和配置它们的产品

00:25:53.726 --> 00:25:55.806 A:middle
支持比 SwiftPM

00:25:55.886 --> 00:25:57.606 A:middle
如今能构建的更复杂的包

00:25:57.606 --> 00:25:59.606 A:middle
最后是在包的

00:25:59.606 --> 00:26:02.646 A:middle
发现和信任上的展望

00:25:59.606 --> 00:26:02.646 A:middle
发现和信任上的展望

00:26:02.986 --> 00:26:05.896 A:middle
因为 SwiftPM 命令行

00:26:05.896 --> 00:26:07.726 A:middle
体验非常重要

00:26:07.726 --> 00:26:09.036 A:middle
我们希望确保

00:26:09.036 --> 00:26:11.026 A:middle
SwiftPM 能和其他工具融合

00:26:11.026 --> 00:26:12.386 A:middle
比如开发环境

00:26:12.676 --> 00:26:14.316 A:middle
自动化等等

00:26:15.706 --> 00:26:16.846 A:middle
我们已经通过

00:26:16.846 --> 00:26:18.096 A:middle
SwiftPM 基于库的结构

00:26:18.096 --> 00:26:20.466 A:middle
打下了一个基础

00:26:21.356 --> 00:26:22.726 A:middle
SwiftPM 如今还没有

00:26:22.726 --> 00:26:25.076 A:middle
稳定的 API

00:26:25.076 --> 00:26:26.296 A:middle
但是对于那些同

00:26:26.296 --> 00:26:28.186 A:middle
SwiftPM 一起改变的工具

00:26:28.186 --> 00:26:30.686 A:middle
现在已经可以使用和添加了

00:26:32.256 --> 00:26:33.646 A:middle
如果你愿意

00:26:33.646 --> 00:26:35.156 A:middle
在你的开发工具里

00:26:35.156 --> 00:26:36.956 A:middle
为 SwiftPM  构建支持

00:26:36.956 --> 00:26:38.446 A:middle
我们非常欢迎你的贡献和讨论

00:26:38.856 --> 00:26:40.786 A:middle
我们希望让 SwiftPM 成为

00:26:40.786 --> 00:26:43.196 A:middle
开发工具繁荣的生态系统中的一部分

00:26:43.476 --> 00:26:46.666 A:middle
最近在 Swift 论坛上

00:26:46.666 --> 00:26:48.596 A:middle
我们看到的一些请求是

00:26:48.596 --> 00:26:50.406 A:middle
寻找可以用自动工具

00:26:50.406 --> 00:26:52.276 A:middle
编辑 package.swift 清单的方法

00:26:52.276 --> 00:26:53.946 A:middle
而不需要

00:26:53.946 --> 00:26:55.796 A:middle
让用户总是直接

00:26:55.796 --> 00:26:56.966 A:middle
编辑源代码

00:26:57.746 --> 00:26:59.166 A:middle
我们认为让 SwiftPM

00:26:59.166 --> 00:27:00.536 A:middle
支持这个是可行的

00:26:59.166 --> 00:27:00.536 A:middle
支持这个是可行的

00:27:00.876 --> 00:27:03.196 A:middle
可能会通过使用 libSyntax 实现

00:27:04.056 --> 00:27:05.926 A:middle
libSyntax 是一个

00:27:05.926 --> 00:27:07.296 A:middle
在 Swift 开源项目中

00:27:07.296 --> 00:27:08.856 A:middle
开发的库

00:27:08.856 --> 00:27:11.256 A:middle
让你更容易的

00:27:11.256 --> 00:27:13.536 A:middle
在别的工具上理解和使用

00:27:13.536 --> 00:27:14.336 A:middle
Swift 语法

00:27:15.476 --> 00:27:17.546 A:middle
Boris 刚才讲到过

00:27:17.546 --> 00:27:19.556 A:middle
你应该为 package.swift 清单

00:27:19.636 --> 00:27:21.236 A:middle
采用声明式语法

00:27:21.526 --> 00:27:22.986 A:middle
这是另外一个原因

00:27:22.986 --> 00:27:25.006 A:middle
这会让 SwiftPM 可以

00:27:25.006 --> 00:27:26.526 A:middle
更容易的

00:27:26.526 --> 00:27:28.076 A:middle
理解你的清单

00:27:28.076 --> 00:27:29.706 A:middle
并作出自动调整

00:27:29.706 --> 00:27:31.106 A:middle
比如添加新的依赖

00:27:31.106 --> 00:27:32.486 A:middle
或者目标

00:27:32.996 --> 00:27:36.286 A:middle
SwiftPM 还有很多空间

00:27:36.286 --> 00:27:39.016 A:middle
来添加新的功能 帮助

00:27:39.016 --> 00:27:40.176 A:middle
你发布新版本

00:27:40.176 --> 00:27:42.596 A:middle
并部署它们的产品

00:27:43.916 --> 00:27:45.776 A:middle
现在 如果你想

00:27:45.776 --> 00:27:46.996 A:middle
发布一个包的新版本

00:27:47.346 --> 00:27:49.056 A:middle
你需要手动用 Git 标注

00:27:49.056 --> 00:27:52.976 A:middle
如果你想检查发布的标签

00:27:52.976 --> 00:27:54.096 A:middle
也要直接使用Git

00:27:55.356 --> 00:27:56.986 A:middle
我们可以添加新功能

00:27:57.146 --> 00:27:58.956 A:middle
来自动化这一过程

00:27:58.956 --> 00:28:00.786 A:middle
执行额外的杂务工作

00:27:58.956 --> 00:28:00.786 A:middle
执行额外的杂务工作

00:28:00.786 --> 00:28:02.676 A:middle
验证和其他辅助任务

00:28:02.676 --> 00:28:06.046 A:middle
作为工作流程改进的一部分

00:28:07.796 --> 00:28:09.726 A:middle
我们可以添加的

00:28:09.726 --> 00:28:11.206 A:middle
一个非常有用的功能

00:28:11.316 --> 00:28:12.686 A:middle
就是帮助保持

00:28:12.686 --> 00:28:14.056 A:middle
正确语义版本

00:28:14.696 --> 00:28:17.176 A:middle
我们可以让 SwiftPM 分析

00:28:17.176 --> 00:28:18.776 A:middle
你的新版本包里

00:28:18.776 --> 00:28:20.226 A:middle
API 的差异

00:28:20.226 --> 00:28:22.976 A:middle
并检测你是否在编译时

00:28:22.976 --> 00:28:24.656 A:middle
做出了不兼容的更改

00:28:24.656 --> 00:28:26.186 A:middle
如果做出不兼容的更改

00:28:26.186 --> 00:28:27.726 A:middle
就建议你更新包的主要版本

00:28:30.916 --> 00:28:32.326 A:middle
另外一件可以做的事是

00:28:32.326 --> 00:28:34.286 A:middle
让你可以从 SwiftPM

00:28:34.286 --> 00:28:36.516 A:middle
更容易的部署产品

00:28:36.516 --> 00:28:39.606 A:middle
你也许希望个性化

00:28:39.606 --> 00:28:41.636 A:middle
和库的链接

00:28:41.636 --> 00:28:43.586 A:middle
或者个性化特定配置环境下

00:28:43.626 --> 00:28:45.086 A:middle
的产品布局

00:28:45.086 --> 00:28:46.526 A:middle
本地或者在服务器上

00:28:47.326 --> 00:28:48.886 A:middle
或者你希望

00:28:48.886 --> 00:28:50.696 A:middle
包含版本信息

00:28:50.696 --> 00:28:53.006 A:middle
关于哪些包被构建进产品

00:28:54.076 --> 00:28:55.736 A:middle
或者你希望

00:28:55.736 --> 00:28:57.316 A:middle
把 SwiftPM 关于

00:28:57.366 --> 00:28:59.816 A:middle
你的包的参数用于你的产品

00:29:00.516 --> 00:29:02.106 A:middle
SwiftPM 可以添加新的命令

00:29:02.106 --> 00:29:03.666 A:middle
来支持这些需求

00:29:05.836 --> 00:29:07.196 A:middle
现在用 SwiftPM

00:29:07.196 --> 00:29:09.266 A:middle
已经可以构建很多东西

00:29:09.266 --> 00:29:10.736 A:middle
但是我们希望可以支持

00:29:10.736 --> 00:29:13.486 A:middle
更多有更复杂需求的包

00:29:14.916 --> 00:29:16.356 A:middle
如今最大的缺口

00:29:16.356 --> 00:29:18.646 A:middle
可能就是支持资源

00:29:18.836 --> 00:29:20.836 A:middle
如果你有任何图像 数据

00:29:20.836 --> 00:29:22.726 A:middle
文件或者其他素材

00:29:22.726 --> 00:29:24.386 A:middle
SwiftPM 目前还不能

00:29:24.386 --> 00:29:25.426 A:middle
把它们和你的产品

00:29:25.426 --> 00:29:25.966 A:middle
打包在一起

00:29:27.096 --> 00:29:28.626 A:middle
基础核心库

00:29:28.626 --> 00:29:30.716 A:middle
在今年春天刚刚添加了

00:29:30.716 --> 00:29:33.276 A:middle
跨平台使用资源的 API

00:29:33.276 --> 00:29:35.586 A:middle
如果我们想构建

00:29:35.586 --> 00:29:37.316 A:middle
这个特性 可以让

00:29:37.316 --> 00:29:38.046 A:middle
SwiftPM 使用这一 API

00:29:39.896 --> 00:29:41.736 A:middle
我知道还有一些用户

00:29:41.736 --> 00:29:43.496 A:middle
希望添加对

00:29:43.496 --> 00:29:45.446 A:middle
一些特定编译器标志 连接标志的支持

00:29:45.746 --> 00:29:47.026 A:middle
以及其他 SwiftPM 如今

00:29:47.026 --> 00:29:48.686 A:middle
还不支持的属性

00:29:48.796 --> 00:29:51.216 A:middle
我们希望能

00:29:51.216 --> 00:29:52.946 A:middle
添加一个强大的

00:29:52.946 --> 00:29:55.136 A:middle
构建设置模式

00:29:55.136 --> 00:29:56.386 A:middle
包含条件设置

00:29:56.386 --> 00:29:58.776 A:middle
或者粒度控制

00:29:58.776 --> 00:30:00.146 A:middle
来决定哪一部分的包

00:30:00.216 --> 00:30:01.526 A:middle
有哪些设定值

00:30:03.636 --> 00:30:04.866 A:middle
Boris 刚才还谈到

00:30:04.866 --> 00:30:06.786 A:middle
SwiftPM 构建的独立性

00:30:06.786 --> 00:30:08.026 A:middle
以及它重要的原因

00:30:09.206 --> 00:30:10.456 A:middle
我们不允许你运行

00:30:10.456 --> 00:30:11.206 A:middle
任意外壳脚本

00:30:11.626 --> 00:30:13.696 A:middle
但有一些用户

00:30:13.696 --> 00:30:14.906 A:middle
构建可以在一定程度上个性化

00:30:14.906 --> 00:30:16.416 A:middle
也许是因为

00:30:16.416 --> 00:30:18.216 A:middle
想要个性化语言

00:30:18.216 --> 00:30:19.976 A:middle
或者处理器

00:30:19.976 --> 00:30:21.026 A:middle
他们想运行自己的

00:30:21.026 --> 00:30:22.686 A:middle
文档生成器工具

00:30:22.686 --> 00:30:24.166 A:middle
或者有其他需要添加到

00:30:24.166 --> 00:30:25.826 A:middle
构建过程的步骤

00:30:26.776 --> 00:30:27.926 A:middle
我们认为 SwiftPM

00:30:27.926 --> 00:30:29.836 A:middle
可以安全的支持这些内容

00:30:29.836 --> 00:30:32.196 A:middle
甚至是通过实际的工具包

00:30:32.196 --> 00:30:33.506 A:middle
把新的工具带入

00:30:33.506 --> 00:30:34.366 A:middle
你的构建过程

00:30:34.956 --> 00:30:36.226 A:middle
重要的是

00:30:36.226 --> 00:30:37.746 A:middle
如果我们采用这一新功能

00:30:37.746 --> 00:30:39.706 A:middle
就要确保

00:30:39.706 --> 00:30:40.716 A:middle
任何加入构建过程

00:30:40.716 --> 00:30:42.306 A:middle
的新工具都必须

00:30:42.306 --> 00:30:44.196 A:middle
准确的声明它们的

00:30:44.246 --> 00:30:46.166 A:middle
输入和输出依赖

00:30:46.166 --> 00:30:48.286 A:middle
这样 SwiftPM 才可以继续保持

00:30:48.366 --> 00:30:50.946 A:middle
正确的增量和平行构建

00:30:53.596 --> 00:30:54.876 A:middle
最后 我想说一下

00:30:54.876 --> 00:30:56.446 A:middle
关于包的发现

00:30:56.446 --> 00:30:58.306 A:middle
信任和管理的

00:30:58.556 --> 00:31:00.406 A:middle
前瞻想法

00:30:58.556 --> 00:31:00.406 A:middle
前瞻想法

00:31:00.906 --> 00:31:04.026 A:middle
Git 自身支持

00:31:04.026 --> 00:31:05.226 A:middle
它的条款也支持

00:31:05.546 --> 00:31:07.116 A:middle
提供如 TLS 的安全机制

00:31:07.116 --> 00:31:08.786 A:middle
以确保

00:31:08.786 --> 00:31:10.056 A:middle
你在和你认为的

00:31:10.056 --> 00:31:11.826 A:middle
远程储存库接触

00:31:12.356 --> 00:31:14.036 A:middle
但是恶意伪装

00:31:14.036 --> 00:31:15.496 A:middle
可以危害到

00:31:15.496 --> 00:31:17.296 A:middle
远程储存库

00:31:17.326 --> 00:31:18.876 A:middle
并写入恶意内容

00:31:19.166 --> 00:31:20.186 A:middle
事实上

00:31:20.186 --> 00:31:21.536 A:middle
在任何情况下使用第三方代码

00:31:21.536 --> 00:31:22.996 A:middle
你都应该

00:31:22.996 --> 00:31:24.006 A:middle
提高警惕

00:31:24.376 --> 00:31:25.706 A:middle
但是 Swift 包管理器

00:31:25.856 --> 00:31:27.776 A:middle
提供一个很好的机会

00:31:27.776 --> 00:31:29.686 A:middle
让我们构建一个安全功能

00:31:29.686 --> 00:31:30.996 A:middle
确保你得到的是

00:31:30.996 --> 00:31:33.016 A:middle
你所期待的内容

00:31:35.456 --> 00:31:37.546 A:middle
SwiftPM 还可以让

00:31:37.546 --> 00:31:39.026 A:middle
构建中的

00:31:39.026 --> 00:31:41.206 A:middle
package.swift 清单评估

00:31:41.206 --> 00:31:42.876 A:middle
无法绕过安全保护并从你的

00:31:42.876 --> 00:31:44.266 A:middle
文件系统写出内容

00:31:44.266 --> 00:31:45.316 A:middle
或者访问网络

00:31:45.756 --> 00:31:47.686 A:middle
今天我们使用的是

00:31:47.686 --> 00:31:49.066 A:middle
macOS 的沙盒技术

00:31:49.066 --> 00:31:49.786 A:middle
它很棒

00:31:50.096 --> 00:31:51.166 A:middle
但我们同时也想

00:31:51.166 --> 00:31:53.126 A:middle
把这种安全性带入别的平台

00:31:55.596 --> 00:31:56.966 A:middle
很多用户希望

00:31:56.966 --> 00:31:58.566 A:middle
将复刻包变得简单

00:31:58.916 --> 00:32:00.346 A:middle
也许是因为他们想

00:31:58.916 --> 00:32:00.346 A:middle
也许是因为他们想

00:32:00.346 --> 00:32:02.086 A:middle
在包图里对某个包

00:32:02.086 --> 00:32:03.456 A:middle
做私人的个性化处理

00:32:04.046 --> 00:32:05.416 A:middle
又或者是因为

00:32:05.416 --> 00:32:08.006 A:middle
他们想重写

00:32:08.006 --> 00:32:10.406 A:middle
得到这个包的原 URL

00:32:10.406 --> 00:32:12.516 A:middle
这样可以指向

00:32:12.516 --> 00:32:14.846 A:middle
一个他们控制的私人镜像

00:32:14.876 --> 00:32:16.616 A:middle
而不用寄希望于

00:32:16.676 --> 00:32:20.116 A:middle
原来的包永远在那个位置

00:32:20.286 --> 00:32:21.636 A:middle
最后我希望

00:32:21.636 --> 00:32:23.966 A:middle
Swift 包能有一个真正的索引

00:32:24.636 --> 00:32:25.846 A:middle
除了提供

00:32:25.846 --> 00:32:27.936 A:middle
标准化命名空间

00:32:27.936 --> 00:32:29.476 A:middle
让发现新的包更容易

00:32:29.476 --> 00:32:31.696 A:middle
我们还可以为包

00:32:31.696 --> 00:32:34.416 A:middle
提供更多支持 如质量衡量标准等等

00:32:34.416 --> 00:32:35.656 A:middle
比如它的自动测试范围

00:32:35.656 --> 00:32:36.146 A:middle
是怎样的

00:32:36.636 --> 00:32:38.466 A:middle
或者支持用来评估

00:32:38.466 --> 00:32:40.246 A:middle
你考虑使用的

00:32:40.246 --> 00:32:41.476 A:middle
新包的可靠性的方法

00:32:41.976 --> 00:32:45.106 A:middle
我说了很多

00:32:45.306 --> 00:32:47.236 A:middle
但这些只是其中的一些可能性

00:32:47.616 --> 00:32:49.256 A:middle
如果你们感兴趣

00:32:49.256 --> 00:32:51.066 A:middle
我们很希望

00:32:51.066 --> 00:32:52.846 A:middle
听到你的反馈

00:32:52.846 --> 00:32:54.606 A:middle
想法和贡献

00:32:54.606 --> 00:32:56.126 A:middle
让 Swift 包管理器成为

00:32:56.126 --> 00:32:57.756 A:middle
开发者社区里最好的工具

00:32:58.686 --> 00:33:00.726 A:middle
如果希望加入的话

00:32:58.686 --> 00:33:00.726 A:middle
如果希望加入的话

00:33:00.726 --> 00:33:02.146 A:middle
你们应该如何做呢

00:33:02.146 --> 00:33:04.476 A:middle
我想说一下 Swift 的开源过程

00:33:05.756 --> 00:33:07.506 A:middle
我刚才也提到过

00:33:07.506 --> 00:33:10.306 A:middle
包管理器是 Swift 开源项目的一部分

00:33:10.926 --> 00:33:12.686 A:middle
Swift.org 是

00:33:12.686 --> 00:33:14.306 A:middle
一个很好的

00:33:14.306 --> 00:33:16.536 A:middle
了解社区和过程的地方

00:33:18.306 --> 00:33:20.786 A:middle
SwiftPM 使用的是

00:33:20.856 --> 00:33:23.176 A:middle
Swift 语言评估过程

00:33:23.176 --> 00:33:25.696 A:middle
这意味着任何人都可以对

00:33:25.696 --> 00:33:28.336 A:middle
Swift 包管理器的的新功能或者调整

00:33:28.476 --> 00:33:29.616 A:middle
提供建议

00:33:31.156 --> 00:33:32.826 A:middle
不过 在你起草

00:33:32.826 --> 00:33:34.396 A:middle
一个完整正式的提案之前

00:33:34.466 --> 00:33:36.036 A:middle
我建议你

00:33:36.036 --> 00:33:37.676 A:middle
去 Swift 论坛的

00:33:37.676 --> 00:33:39.636 A:middle
包管理器部分

00:33:39.636 --> 00:33:40.726 A:middle
和社区交流一下你的想法

00:33:41.246 --> 00:33:42.456 A:middle
你可以得到很多反馈

00:33:42.526 --> 00:33:44.576 A:middle
能够帮助你完善你的想法

00:33:45.156 --> 00:33:47.916 A:middle
如果你想先

00:33:47.916 --> 00:33:48.936 A:middle
小试牛刀

00:33:48.936 --> 00:33:50.756 A:middle
bugs.swift.org 的

00:33:50.756 --> 00:33:52.786 A:middle
错误追踪器中

00:33:52.786 --> 00:33:54.856 A:middle
有很多的好想法

00:33:54.856 --> 00:33:55.966 A:middle
尤其是那些

00:33:55.966 --> 00:33:58.756 A:middle
标记了 StarterBug 的的错误

00:33:59.266 --> 00:34:00.656 A:middle
因为 正如我所说 SwiftPM

00:33:59.266 --> 00:34:00.656 A:middle
因为 正如我所说 SwiftPM

00:34:00.656 --> 00:34:02.226 A:middle
是用 Swift 写的

00:34:02.436 --> 00:34:04.886 A:middle
你会发现它其实很容易上手

00:34:05.346 --> 00:34:07.836 A:middle
当然 如果你在

00:34:07.836 --> 00:34:09.306 A:middle
使用 SwiftPM 时找到了错误

00:34:09.306 --> 00:34:10.746 A:middle
我们鼓励你报到

00:34:10.746 --> 00:34:12.525 A:middle
bugs.swift.org 上

00:34:12.525 --> 00:34:16.556 A:middle
你可以追踪我们是如何解决的

00:34:16.755 --> 00:34:18.166 A:middle
SwiftPM 可以利用

00:34:18.166 --> 00:34:20.926 A:middle
和 Swift 项目相同的

00:34:20.926 --> 00:34:21.956 A:middle
持续集成基础结构

00:34:22.356 --> 00:34:23.516 A:middle
这意味着轮询请求

00:34:23.516 --> 00:34:25.126 A:middle
可以被自动构建

00:34:25.126 --> 00:34:27.116 A:middle
并在合并前进行测试

00:34:27.766 --> 00:34:29.206 A:middle
因为 SwiftPM 代码

00:34:29.206 --> 00:34:30.815 A:middle
有很大的测试范围

00:34:31.116 --> 00:34:31.775 A:middle
我们发现这个

00:34:31.775 --> 00:34:33.206 A:middle
基础结构对我们来说

00:34:33.206 --> 00:34:33.755 A:middle
非常有用

00:34:35.356 --> 00:34:36.806 A:middle
当你准备尝试

00:34:36.806 --> 00:34:38.686 A:middle
最后的调整

00:34:38.686 --> 00:34:40.436 A:middle
你可以在 Swift.org 上

00:34:40.536 --> 00:34:41.775 A:middle
下载 Trunk Snapshot 工具链

00:34:41.775 --> 00:34:44.156 A:middle
它们会定期更新

00:34:46.456 --> 00:34:47.866 A:middle
我们很高兴见到

00:34:47.866 --> 00:34:49.746 A:middle
SwiftPM 社区如今的成长

00:34:49.956 --> 00:34:51.876 A:middle
有180 多个人做出贡献

00:34:51.876 --> 00:34:53.626 A:middle
有些是在错误修复上

00:34:53.626 --> 00:34:55.146 A:middle
有些是在新功能上

00:34:55.636 --> 00:34:57.276 A:middle
Swift 包生态系统

00:34:57.276 --> 00:34:58.446 A:middle
也在以健康的速度增长

00:34:58.446 --> 00:35:00.216 A:middle
很多跨平台包

00:34:58.446 --> 00:35:00.216 A:middle
很多跨平台包

00:35:00.216 --> 00:35:01.736 A:middle
和公共包

00:35:01.736 --> 00:35:03.236 A:middle
都可以在 GitHub 上找到

00:35:04.086 --> 00:35:05.296 A:middle
这意味着你可以

00:35:05.296 --> 00:35:06.666 A:middle
专注于怎样让你的产品

00:35:06.666 --> 00:35:08.406 A:middle
与众不同 让包的依赖

00:35:08.406 --> 00:35:10.086 A:middle
负责剩下的部分

00:35:10.086 --> 00:35:12.346 A:middle
我建议你现在就

00:35:12.346 --> 00:35:13.966 A:middle
体验一下 SwiftPM 的

00:35:14.116 --> 00:35:15.456 A:middle
一些功能

00:35:15.456 --> 00:35:16.766 A:middle
而它未来还有很大的进步空间

00:35:17.136 --> 00:35:19.126 A:middle
两个建议的功能分别是

00:35:19.126 --> 00:35:21.656 A:middle
命令行实用工具和

00:35:21.656 --> 00:35:23.616 A:middle
针对在服务器上用 Swift 做开发的库

00:35:24.796 --> 00:35:26.216 A:middle
服务器端的 Swift 社区

00:35:26.216 --> 00:35:27.926 A:middle
对 Swift 包管理器

00:35:27.926 --> 00:35:29.156 A:middle
进行了广泛的应用

00:35:29.626 --> 00:35:30.956 A:middle
服务器端的

00:35:30.956 --> 00:35:32.696 A:middle
自己也在很好的成长

00:35:32.696 --> 00:35:33.916 A:middle
现在提供了很多框架

00:35:33.916 --> 00:35:35.646 A:middle
来做网页和后端开发

00:35:36.296 --> 00:35:37.886 A:middle
如果你愿意关注一下

00:35:37.886 --> 00:35:39.006 A:middle
这种方式的话

00:35:39.006 --> 00:35:40.326 A:middle
我觉得你会发现

00:35:40.326 --> 00:35:41.426 A:middle
Swift 是做这种跨平台开发的

00:35:41.426 --> 00:35:42.736 A:middle
很好的语言

00:35:44.076 --> 00:35:45.686 A:middle
但是你也可以

00:35:45.686 --> 00:35:47.096 A:middle
用 SwiftPM 创建

00:35:47.096 --> 00:35:50.116 A:middle
命令行实用工具和库

00:35:50.116 --> 00:35:50.796 A:middle
哪个都可以

00:35:51.386 --> 00:35:53.406 A:middle
上手很容易

00:35:53.406 --> 00:35:54.856 A:middle
只需要打开一个终端窗口

00:35:54.856 --> 00:35:57.006 A:middle
然后在里面运行 Swift 包

00:35:57.776 --> 00:35:58.746 A:middle
如果下次

00:35:58.746 --> 00:36:00.186 A:middle
你想尝试新事物

00:35:58.746 --> 00:36:00.186 A:middle
你想尝试新事物

00:36:00.186 --> 00:36:02.136 A:middle
我建议你试试看

00:36:03.046 --> 00:36:04.176 A:middle
如果你想做出贡献

00:36:04.176 --> 00:36:05.946 A:middle
请到 Swift 论坛

00:36:05.946 --> 00:36:07.786 A:middle
开始对话

00:36:08.796 --> 00:36:09.986 A:middle
如果想来和我们聊聊

00:36:09.986 --> 00:36:11.876 A:middle
明天下午 3 点

00:36:11.876 --> 00:36:15.326 A:middle
我们会在实验室

00:36:15.326 --> 00:36:16.626 A:middle
我很兴奋的想知道

00:36:16.626 --> 00:36:17.906 A:middle
我们能做成什么

00:36:17.906 --> 00:36:19.366 A:middle
以及这个开发者社区一起

00:36:19.366 --> 00:36:19.826 A:middle
可以成就什么

00:36:20.586 --> 00:36:21.886 A:middle
你的贡献能够帮助我们

00:36:21.916 --> 00:36:23.626 A:middle
设计一个很棒的包管理器

00:36:23.626 --> 00:36:25.796 A:middle
对整个 Swift 社区都意义重大

00:36:26.796 --> 00:36:27.226 A:middle
谢谢

00:36:27.306 --> 00:36:28.916 A:middle
祝你享受接下来的 WWDC

00:36:29.516 --> 00:36:33.500 A:middle
[ 掌声 ]
