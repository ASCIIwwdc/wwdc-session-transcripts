WEBVTT

00:00:17.818 --> 00:00:21.388 align:middle line:0
（UIKit：各种尺寸和形状的app
演讲235）

00:00:21.722 --> 00:00:23.123 align:middle line:-1
我叫David Duncan

00:00:23.423 --> 00:00:27.361 align:middle line:-2
我的同事Tyler Fox和
Russell Ladd将会上台

00:00:27.861 --> 00:00:29.096 align:middle line:-1
我们在这里与大家讨论

00:00:29.563 --> 00:00:32.566 align:middle line:-1
如何构建各种尺寸和形状的app

00:00:34.535 --> 00:00:37.337 align:middle line:-2
当我们在最初的iPhone上
发布iOS 2的时候

00:00:37.404 --> 00:00:39.806 align:middle line:-1
我不知道你们中当时有多少人在这里

00:00:40.240 --> 00:00:42.442 align:middle line:-1
但那时你们只有一个屏幕尺寸

00:00:43.343 --> 00:00:48.982 align:middle line:-2
但今天我们有iPhone
我们有iPad 多种尺寸的

00:00:49.449 --> 00:00:52.286 align:middle line:-2
我们已经有了iPhone X
有明亮的新屏幕

00:00:52.352 --> 00:00:54.454 align:middle line:-2
和一个新的形状
让你在上面建立app

00:00:55.756 --> 00:00:59.560 align:middle line:-2
在这次演讲中我们将使用
Bagel Times app作为一个设计例子

00:00:59.626 --> 00:01:04.631 align:middle line:-2
它可以很好地适应
iPhone X和iPhone 8

00:00:59.626 --> 00:01:04.631 align:middle line:-2
它可以很好地适应
iPhone X和iPhone 8

00:01:06.466 --> 00:01:07.301 align:middle line:-1
好的

00:01:07.734 --> 00:01:10.637 align:middle line:-2
这就是我们今天要
和你们讨论的三件事

00:01:11.238 --> 00:01:13.607 align:middle line:-1
我将谈到安全区域和布局边界

00:01:13.807 --> 00:01:15.542 align:middle line:-1
以及如何在你的app中使用它们

00:01:15.776 --> 00:01:17.945 align:middle line:-1
来匹配各种屏幕尺寸和形状

00:01:19.379 --> 00:01:22.616 align:middle line:-2
然后Tyler会上来和你们讨论
滚动视图

00:01:22.683 --> 00:01:24.618 align:middle line:-1
讨论它们如何与安全区域

00:01:24.685 --> 00:01:26.987 align:middle line:-2
布局边界和
其他UIKit技术来交互

00:01:28.722 --> 00:01:31.458 align:middle line:-1
最后Russell会和大家讨论

00:01:31.525 --> 00:01:34.928 align:middle line:-2
如何使用所有的UIKit工具来
构建适合的app

00:01:35.863 --> 00:01:40.501 align:middle line:-2
好吧 有了这些 现在我们开始讨论
安全区域和布局边界

00:01:42.269 --> 00:01:46.240 align:middle line:-2
那么什么是安全区域呢
它们在你所熟悉和喜爱的设备上

00:01:46.306 --> 00:01:47.774 align:middle line:-1
看起来是什么样子的呢？

00:01:48.342 --> 00:01:49.943 align:middle line:-1
在矩形屏幕的iPhone 8上

00:01:50.010 --> 00:01:53.714 align:middle line:-1
它的整个屏幕都是一个安全区域

00:01:54.147 --> 00:01:57.184 align:middle line:-1
所有内容都在那里 内容没有被覆盖

00:01:58.886 --> 00:02:03.657 align:middle line:-2
在iPhone X上 在其顶部
和底部有一些额外的空间被硬件占据

00:01:58.886 --> 00:02:03.657 align:middle line:-2
在iPhone X上 在其顶部
和底部有一些额外的空间被硬件占据

00:02:03.724 --> 00:02:09.663 align:middle line:-2
这些硬件应从你的app
安全区域中移除

00:02:10.531 --> 00:02:13.534 align:middle line:-1
在横屏中你会有一些类似的东西

00:02:13.600 --> 00:02:15.469 align:middle line:-1
在其上面我们给你提供了对称布局

00:02:15.536 --> 00:02:17.971 align:middle line:-2
在底部有一些空间供给
Home Indicator

00:02:18.038 --> 00:02:19.940 align:middle line:-1
让你可以安全地放置你的内容

00:02:21.341 --> 00:02:22.376 align:middle line:-1
但是还有哪些设备

00:02:22.442 --> 00:02:25.145 align:middle line:-2
可能有一个不属于整个屏幕的
安全区域呢？

00:02:26.947 --> 00:02:30.150 align:middle line:-2
实际上Apple TV
可能会给你带来这样的情况

00:02:30.651 --> 00:02:32.920 align:middle line:-1
因为某些电视屏幕可能

00:02:32.986 --> 00:02:36.823 align:middle line:-2
实际上已经超出了
用户所能看到的范围

00:02:37.291 --> 00:02:39.359 align:middle line:-1
这些表明它们的信息

00:02:39.426 --> 00:02:41.828 align:middle line:-1
是基于所谓的超扫描补偿的

00:02:42.462 --> 00:02:43.931 align:middle line:-1
表明在你为Apple TV

00:02:43.997 --> 00:02:47.167 align:middle line:-2
构建的任何app中
超扫描被表示为一个安全区域

00:02:48.802 --> 00:02:52.306 align:middle line:-1
现在我们已经看到了一些安全区域

00:02:52.372 --> 00:02:56.143 align:middle line:-2
在设备屏幕上是什么样子的例子
那么它将如何影响你的视图呢？

00:02:56.577 --> 00:02:59.279 align:middle line:-1
如何在你自己的app中使用它

00:02:59.346 --> 00:03:01.048 align:middle line:-1
来构建自适应app呢？

00:02:59.346 --> 00:03:01.048 align:middle line:-1
来构建自适应app呢？

00:03:03.483 --> 00:03:06.220 align:middle line:-1
好的 我们取任意一个视图

00:03:06.653 --> 00:03:12.025 align:middle line:-2
视图所有的东西 在视图的
顶部 底部 左边和右边有四个嵌入

00:03:12.526 --> 00:03:17.998 align:middle line:-2
它们代表可能有某个覆盖的区域
其他可能会遮挡你的内容的东西

00:03:18.065 --> 00:03:20.767 align:middle line:-1
如果你把内容放到了那里的话

00:03:21.735 --> 00:03:26.507 align:middle line:-2
你可以使用安全区域嵌入属性
在你的UI视图上访问它

00:03:26.840 --> 00:03:28.342 align:middle line:-1
一个UI边缘嵌入

00:03:28.408 --> 00:03:29.743 align:middle line:-1
它有这四个值

00:03:30.944 --> 00:03:32.946 align:middle line:-1
现在如果你用自动布局来做布局的话

00:03:33.013 --> 00:03:36.717 align:middle line:-2
那么实际上你可能只想看到
整个rec安全的

00:03:37.351 --> 00:03:41.288 align:middle line:-2
你可以通过查看安全区布局指南
来获得这些信息

00:03:41.522 --> 00:03:45.893 align:middle line:-2
这是一个表示这些信息的
UI布局指南

00:03:45.959 --> 00:03:48.295 align:middle line:-1
它有布局锚供你进行自动布局

00:03:48.362 --> 00:03:51.131 align:middle line:-2
以及一个布局框架
如果你只是想看到实际的矩形

00:03:53.166 --> 00:03:56.336 align:middle line:-2
现在我们已经看到了
它在我们视图中的表示方式

00:03:57.037 --> 00:04:00.274 align:middle line:-2
让我们再看看
它是如何从一个视图到另一个视图的

00:03:57.037 --> 00:04:00.274 align:middle line:-2
让我们再看看
它是如何从一个视图到另一个视图的

00:04:01.708 --> 00:04:05.412 align:middle line:-2
为此我们将删除文本
并添加一个子视图

00:04:05.779 --> 00:04:08.715 align:middle line:-1
这将覆盖该视图的大部分底部边缘

00:04:10.484 --> 00:04:13.854 align:middle line:-1
那么现在安全区域是如何计算的呢？

00:04:14.321 --> 00:04:18.158 align:middle line:-2
正如我们看到的
我们刚刚添加的那个子视图

00:04:18.659 --> 00:04:22.329 align:middle line:-1
它侵犯了父视图的左、右和底部的

00:04:22.963 --> 00:04:25.699 align:middle line:-1
不安全部分

00:04:26.400 --> 00:04:30.204 align:middle line:-2
这些就是数值
你可以在UI边缘嵌入中看到

00:04:30.270 --> 00:04:32.172 align:middle line:-1
表示那个子视图安全区域

00:04:32.239 --> 00:04:33.140 align:middle line:-1
内嵌入的属性

00:04:33.774 --> 00:04:36.910 align:middle line:-2
类似地
你会看到一个安全区域布局指南

00:04:36.977 --> 00:04:39.046 align:middle line:-1
它的布局框架看起来有点像这个

00:04:40.514 --> 00:04:45.319 align:middle line:-2
现在一旦你看到了这个
并且你有了一个视图

00:04:45.385 --> 00:04:48.388 align:middle line:-2
你可能希望为你的UI
添加额外的嵌入

00:04:48.722 --> 00:04:52.759 align:middle line:-2
你可能会决定要通过
视图控制器为你的子视图添加控件

00:04:52.826 --> 00:04:55.996 align:middle line:-1
这些控件随后将添加到安全区

00:04:56.396 --> 00:04:57.431 align:middle line:-1
或者从安全区中减去

00:04:58.232 --> 00:05:00.100 align:middle line:-1
我们继续添加另一个子视图

00:04:58.232 --> 00:05:00.100 align:middle line:-1
我们继续添加另一个子视图

00:05:01.835 --> 00:05:04.638 align:middle line:-1
此外它还有一个视图控制器

00:05:05.072 --> 00:05:07.307 align:middle line:-2
因为在视图控制器上
我们可以规定属性

00:05:07.374 --> 00:05:09.576 align:middle line:-1
它允许你可以添加额外的嵌入

00:05:10.110 --> 00:05:14.648 align:middle line:-1
这个属性叫做额外的安全区嵌入

00:05:15.482 --> 00:05:18.485 align:middle line:-2
我们现在继续
我们将继承从父视图中得到的嵌入

00:05:19.386 --> 00:05:22.456 align:middle line:-2
将这些额外的安全区嵌入
添加到这个视图中

00:05:22.956 --> 00:05:26.793 align:middle line:-1
最后构建最终的安全区布局指南

00:05:28.328 --> 00:05:29.696 align:middle line:-1
在你的app中

00:05:29.763 --> 00:05:31.932 align:middle line:-1
你还想了解哪些安全区域的行为呢？

00:05:32.566 --> 00:05:34.635 align:middle line:-1
好吧 让我们看另一个例子

00:05:35.102 --> 00:05:38.972 align:middle line:-2
在这里我们在父视图安全区域内
得到一个安全的视图

00:05:39.306 --> 00:05:40.874 align:middle line:-1
所以这个视图安全区 当然

00:05:40.941 --> 00:05:43.210 align:middle line:-1
封装了这个视图的整个区域

00:05:43.944 --> 00:05:45.679 align:middle line:-1
我们把它移到一边

00:05:45.746 --> 00:05:48.148 align:middle line:-2
正如你所期望的
我们不会得到一个安全区

00:05:48.215 --> 00:05:50.851 align:middle line:-1
因为我们还没有离开父视图的安全区

00:05:52.019 --> 00:05:53.620 align:middle line:-1
好的 我们会再往外移一点

00:05:54.188 --> 00:05:58.091 align:middle line:-2
你会看到在那个安全区域的
底部嵌入现在长了一点

00:05:58.158 --> 00:06:00.494 align:middle line:-1
它占据了它重叠的部分

00:05:58.158 --> 00:06:00.494 align:middle line:-1
它占据了它重叠的部分

00:06:01.094 --> 00:06:03.664 align:middle line:-1
在那里在延伸它的父视图安全区之外

00:06:04.164 --> 00:06:07.634 align:middle line:-1
当我们靠近边缘时 它继续延伸

00:06:08.502 --> 00:06:09.837 align:middle line:-2
若我们继续将这个视图
移离它的父视图的底部边缘

00:06:09.903 --> 00:06:12.806 align:middle line:-1
你想它将会发生什么呢？

00:06:14.842 --> 00:06:15.809 align:middle line:-1
好吧 你觉得怎么样？

00:06:16.410 --> 00:06:20.948 align:middle line:-2
当视图移出父视图时
安全区没有进一步扩展

00:06:21.615 --> 00:06:24.918 align:middle line:-1
不论那个视图移开距离父视图有多远

00:06:25.719 --> 00:06:28.722 align:middle line:-2
现在你可能会自问
“我们为什么要这么做？”

00:06:28.922 --> 00:06:32.593 align:middle line:-1
“其目的是什么？” 答案是动画

00:06:33.193 --> 00:06:36.363 align:middle line:-2
在这个特殊的例子中
我们将子视图移出它的父视图

00:06:36.797 --> 00:06:39.666 align:middle line:-1
我们不希望内容停留在安全区内

00:06:39.733 --> 00:06:41.969 align:middle line:-2
因为那样它就不会
和自己的父视图一起移动了

00:06:42.402 --> 00:06:44.638 align:middle line:-1
我们可以看到这个app的例子

00:06:45.172 --> 00:06:48.308 align:middle line:-1
我们从它的底部拉出一个视图

00:06:49.543 --> 00:06:53.213 align:middle line:-1
若这个视图是针对其父安全区展开的

00:06:53.614 --> 00:06:56.216 align:middle line:-2
那么随着这个视图
从屏幕底部生长的越远

00:06:56.283 --> 00:06:58.552 align:middle line:-1
其父安全区将随着扩展

00:06:59.119 --> 00:07:04.258 align:middle line:-2
那么这个区域就会在整个过渡期间
停留在屏幕上

00:06:59.119 --> 00:07:04.258 align:middle line:-2
那么这个区域就会在整个过渡期间
停留在屏幕上

00:07:04.925 --> 00:07:08.529 align:middle line:-1
这意味着你不会看到背景随着它出现

00:07:09.129 --> 00:07:13.300 align:middle line:-2
所以这就是为什么安全区
在任何维度上

00:07:13.367 --> 00:07:14.735 align:middle line:-1
都不会比其父视图提供的更大

00:07:16.036 --> 00:07:18.639 align:middle line:-1
那么我们总结一下这个安全区域部分

00:07:18.705 --> 00:07:21.708 align:middle line:-1
让我们看一下你如何与它交互

00:07:22.209 --> 00:07:25.445 align:middle line:-1
我们又一次提到了安全区嵌入属性

00:07:25.512 --> 00:07:27.314 align:middle line:-1
和安全区布局指南属性

00:07:28.048 --> 00:07:32.152 align:middle line:-2
但是如果你的视图需要在
安全区嵌入发生更改时作出反应

00:07:32.219 --> 00:07:35.923 align:middle line:-2
那么你可以重写
“安全区嵌入确实发生了更改”方法

00:07:37.424 --> 00:07:39.893 align:middle line:-2
典型做法是调用
setNeedsLayout

00:07:39.960 --> 00:07:42.930 align:middle line:-2
但是如果你需要运行任何其他逻辑
那也是可以的

00:07:43.730 --> 00:07:47.701 align:middle line:-2
如果你的视图控制器需要响应
它的视图安全区域布局的变化

00:07:48.135 --> 00:07:51.405 align:middle line:-1
那么你可以在视图控制器上覆盖

00:07:51.471 --> 00:07:52.673 align:middle line:-1
视图安全区域的变化

00:07:53.640 --> 00:07:56.476 align:middle line:-1
最后如果你在IB中处理你的界面

00:07:56.977 --> 00:07:59.179 align:middle line:-1
那么你就可以使用安全区域属性

00:07:59.479 --> 00:08:04.818 align:middle line:-2
如视图列表所示
来建立你对安全区域的约束

00:07:59.479 --> 00:08:04.818 align:middle line:-2
如视图列表所示
来建立你对安全区域的约束

00:08:06.386 --> 00:08:08.188 align:middle line:-1
所以一个安全区域解释就是这样的

00:08:08.255 --> 00:08:10.390 align:middle line:-1
让我们来谈谈布局边界

00:08:13.327 --> 00:08:17.397 align:middle line:-1
布局边距就是填充

00:08:17.998 --> 00:08:22.202 align:middle line:-2
一般来说它是一个
你可以完全控制属性

00:08:22.269 --> 00:08:25.672 align:middle line:-1
它允许你从视图的边缘指定一个空间

00:08:26.773 --> 00:08:29.243 align:middle line:-2
像使用安全区域一样
它们由UI边缘嵌入属性表示

00:08:29.309 --> 00:08:32.813 align:middle line:-1
而这一次称为布局边界

00:08:33.914 --> 00:08:38.418 align:middle line:-2
现在 去年 我们还增加了
方向布局边界

00:08:39.152 --> 00:08:41.955 align:middle line:-1
它们不同于布局边界

00:08:42.022 --> 00:08:44.558 align:middle line:-1
因为布局边界使用UI边缘嵌入值

00:08:45.158 --> 00:08:48.562 align:middle line:-2
而定向布局边界使用
NS方向边缘嵌入

00:08:49.496 --> 00:08:51.798 align:middle line:-1
这两种结构的主要区别在于

00:08:51.865 --> 00:08:55.602 align:middle line:-2
方向嵌入使用前导和尾随
而不是左导和右导

00:08:56.136 --> 00:08:59.506 align:middle line:-2
这使得创建
与RTL布局相适应的布局边界

00:08:59.573 --> 00:09:01.708 align:middle line:-1
变得非常容易

00:08:59.573 --> 00:09:01.708 align:middle line:-1
变得非常容易

00:09:01.909 --> 00:09:04.077 align:middle line:-1
所以当你在使用定向布局边界时

00:09:04.144 --> 00:09:06.013 align:middle line:-1
你就不需要在左右之间进行切换了

00:09:07.147 --> 00:09:08.849 align:middle line:0
现在 就像安全区域一样

00:09:09.483 --> 00:09:12.686 align:middle line:0
我们提供了一个编剧指南
也就是所谓的布局编剧指南

00:09:13.520 --> 00:09:17.658 align:middle line:0
你可以使用自动布局
并根据便于来布局内容了

00:09:18.325 --> 00:09:22.396 align:middle line:-2
然后我们继续
把我们的内容放在这个视图中

00:09:24.097 --> 00:09:26.366 align:middle line:-2
既然我们讨论的是布局边界
和安全区域

00:09:26.433 --> 00:09:29.403 align:middle line:-1
你可能会问的下一个问题是

00:09:30.604 --> 00:09:33.140 align:middle line:-1
它们两个是如何相互作用的呢？

00:09:34.174 --> 00:09:36.410 align:middle line:-1
好吧 我们继续 把那些标记带回来

00:09:37.144 --> 00:09:40.747 align:middle line:-2
哦 是的 我是想谈谈
如何改变你的布局

00:09:42.649 --> 00:09:48.021 align:middle line:-2
因此使用安全区域
在默认情况下 我们建立安全区域

00:09:48.822 --> 00:09:52.292 align:middle line:-1
然后就安全区域构我们建布局边界

00:09:52.759 --> 00:09:55.963 align:middle line:-1
我们这样做的最明显的答案是

00:09:56.029 --> 00:09:58.532 align:middle line:-2
在默认情况下
你可能真的就想要这个

00:09:58.599 --> 00:10:01.201 align:middle line:-1
你希望你的布局边界放在安全区域内

00:09:58.599 --> 00:10:01.201 align:middle line:-1
你希望你的布局边界放在安全区域内

00:10:01.268 --> 00:10:04.905 align:middle line:-2
因为它们表示的是
你所想要做的布局的额外填充

00:10:05.939 --> 00:10:10.844 align:middle line:-2
但是我们经过寻思之后会对自己说
“嘿 有的人可能并不想要这个”

00:10:11.345 --> 00:10:13.914 align:middle line:-1
所以我们会让你很容易跳过这个默认

00:10:14.248 --> 00:10:16.850 align:middle line:-2
如果你把安全区域属性的
嵌入布局边距

00:10:16.917 --> 00:10:21.722 align:middle line:-2
从真实改为错误
那么我们就会

00:10:21.788 --> 00:10:24.191 align:middle line:0
把布局边距移回视图的边界

00:10:24.625 --> 00:10:27.728 align:middle line:0
作为安全区域的对等体
而不是被封装在内部

00:10:28.462 --> 00:10:30.364 align:middle line:-2
利用布局边界
你还可做些其它什么呢？

00:10:30.898 --> 00:10:33.600 align:middle line:-1
好的 我们已经看到 在默认情况下

00:10:33.967 --> 00:10:36.436 align:middle line:-2
安全区域边界会向下
传播到层次结构中

00:10:37.704 --> 00:10:40.107 align:middle line:-2
但对于布局边界在默认的情况下
它们并不会这样

00:10:40.174 --> 00:10:43.143 align:middle line:-1
因为默认情况下你的布局很可能想要

00:10:43.210 --> 00:10:46.480 align:middle line:-1
其边界独立于安全区域

00:10:46.547 --> 00:10:48.715 align:middle line:-1
这代表了整个视图层次结构的概念

00:10:50.317 --> 00:10:53.854 align:middle line:-2
但是如果你想要传播的话
你可以在视图上

00:10:54.521 --> 00:10:56.924 align:middle line:-1
通过改变保存超级视图布局的边界

00:10:56.990 --> 00:10:59.159 align:middle line:-1
从错误改为真实来翻转这个

00:11:00.060 --> 00:11:03.263 align:middle line:-2
我们继续 我们会把
那些比父视图更小的边界对齐

00:11:03.664 --> 00:11:07.167 align:middle line:-1
以确保在父视图和子视图之间的

00:11:07.234 --> 00:11:09.169 align:middle line:-1
一切东西都很自然地对齐

00:11:11.305 --> 00:11:15.676 align:middle line:-2
在过去的几年里
你可能还试图更改视图控制器视图的

00:11:15.742 --> 00:11:17.411 align:middle line:-1
布局边界

00:11:18.278 --> 00:11:20.647 align:middle line:-2
如果你看我们在默认情况下
所做的事情

00:11:21.281 --> 00:11:24.318 align:middle line:-2
那么你会看到在这个视图上的
这个边距

00:11:25.118 --> 00:11:28.322 align:middle line:-1
去年我们还添加了一个属性

00:11:28.922 --> 00:11:31.158 align:middle line:-1
称为系统最小布局边界

00:11:31.792 --> 00:11:35.696 align:middle line:-1
这些边界是我们与你现在提供的

00:11:35.762 --> 00:11:39.733 align:middle line:-1
所有边界相结合而得出的最小边界

00:11:40.133 --> 00:11:42.402 align:middle line:-2
所以如果你想要添加到
其顶部和底部的话

00:11:42.469 --> 00:11:44.304 align:middle line:-1
你可以这样做而不会干扰

00:11:44.371 --> 00:11:46.673 align:middle line:-1
UIKit提供的左右边界

00:11:47.474 --> 00:11:49.810 align:middle line:-1
但是同样 你可能需要更多的控制

00:11:50.310 --> 00:11:51.745 align:middle line:-1
所以 还有另外一个属性

00:11:52.713 --> 00:11:55.949 align:middle line:-2
叫做viewRespects
SystemMinimumLayoutMargins

00:11:56.717 --> 00:12:00.387 align:middle line:-2
如果你想让你的边界
完全在你的控制之下的话

00:11:56.717 --> 00:12:00.387 align:middle line:-2
如果你想让你的边界
完全在你的控制之下的话

00:12:00.854 --> 00:12:05.392 align:middle line:-2
将其翻转为错误
并且我们将使用你所规定的边界

00:12:05.459 --> 00:12:06.593 align:middle line:-1
没有任何问题

00:12:07.995 --> 00:12:13.367 align:middle line:-2
这样 要完成布局边界
你在UIView上拥有的属性

00:12:13.433 --> 00:12:17.671 align:middle line:-2
是布局边界属性
边缘嵌入 左 右 顶 底

00:12:18.338 --> 00:12:21.608 align:middle line:-2
定向布局边界
非常适合你的RTL布局

00:12:21.842 --> 00:12:23.510 align:middle line:-1
顶部 底部 前导和尾随都很好

00:12:24.444 --> 00:12:28.682 align:middle line:-2
你可以在自动布局中使用
该布局边界指南来完成所有这些工作

00:12:29.816 --> 00:12:33.854 align:middle line:-2
最后当布局边界在视图中发生变化时
而你正好有逻辑的话

00:12:33.921 --> 00:12:36.490 align:middle line:-2
你可以覆盖
layoutMarginsDidChange

00:12:36.557 --> 00:12:38.425 align:middle line:-1
并在那里执行你需要做的任何逻辑

00:12:39.293 --> 00:12:43.330 align:middle line:-2
在界面构建器中
若要创建与边距相关联的约束

00:12:43.397 --> 00:12:45.699 align:middle line:-1
只需检查那个约束到边界框即可

00:12:46.433 --> 00:12:50.270 align:middle line:-2
接下来有请Tyler Fox
来给大家讲讲滚动视图

00:12:58.712 --> 00:13:00.814 align:middle line:-1
谢谢David 下午好

00:12:58.712 --> 00:13:00.814 align:middle line:-1
谢谢David 下午好

00:13:01.448 --> 00:13:05.352 align:middle line:-2
正如David提到的
今天我想谈一谈滚动视图

00:13:05.752 --> 00:13:09.456 align:middle line:-1
滚动视图是iOS操作的关键部分

00:13:09.523 --> 00:13:12.559 align:middle line:-1
它们出现在整个系统中 在表格视图

00:13:12.626 --> 00:13:15.462 align:middle line:-1
在集合视图 UI文本视图都有

00:13:15.529 --> 00:13:18.232 align:middle line:-2
当然在你的所有app中的
所有自定义app中都有

00:13:19.032 --> 00:13:22.169 align:middle line:-2
在我们的Bagel Times中
我们一直在努力做这个

00:13:22.236 --> 00:13:26.206 align:middle line:-2
正如你所知
这是我们的新闻文章屏幕

00:13:26.273 --> 00:13:27.841 align:middle line:-1
正如你所看到的

00:13:27.908 --> 00:13:30.544 align:middle line:-2
所有的东西都是
围绕着文章的滚动视图

00:13:30.611 --> 00:13:33.480 align:middle line:-2
你知道
我们想要做的是真正展示我们的作者

00:13:33.547 --> 00:13:35.349 align:middle line:-1
正在收集的高质量的内容

00:13:35.716 --> 00:13:39.052 align:middle line:-2
比如 探索
Apple Park的真正灵感

00:13:39.786 --> 00:13:41.889 align:middle line:-1
我们还想回顾一些关于

00:13:41.955 --> 00:13:45.826 align:middle line:-2
如何在app中使用
滚动视图的基础知识

00:13:45.893 --> 00:13:50.631 align:middle line:-2
了解它们如何帮助你将内容调整到
不同形状和大小的设备上

00:13:52.065 --> 00:13:54.801 align:middle line:-1
为此我们将在这里介绍一个例子

00:13:54.868 --> 00:13:57.137 align:middle line:-1
我们将从一个全屏滚动视图开始

00:13:57.538 --> 00:13:58.872 align:middle line:-1
在左边我将向大家展示

00:13:58.939 --> 00:14:01.575 align:middle line:-2
在一个真正的设备上
事情看起来是什么样的情况

00:13:58.939 --> 00:14:01.575 align:middle line:-2
在一个真正的设备上
事情看起来是什么样的情况

00:14:01.642 --> 00:14:04.845 align:middle line:-1
在右边我们要看一些屏幕后的事情

00:14:04.912 --> 00:14:07.214 align:middle line:-1
并了解图中发生了什么

00:14:08.015 --> 00:14:11.185 align:middle line:-2
所以 我们今天所说的一切
都将适用于…

00:14:11.251 --> 00:14:13.754 align:middle line:-1
我们将讨论所有垂直的Y轴

00:14:13.820 --> 00:14:16.523 align:middle line:-1
但是所有的东西都同样适用于X轴

00:14:17.124 --> 00:14:20.394 align:middle line:-1
我们也要用一些简单的值来进行说明

00:14:20.460 --> 00:14:22.396 align:middle line:-1
那么在这个例子中

00:14:22.462 --> 00:14:24.231 align:middle line:-1
我们滚动视图的高度是400个点

00:14:25.699 --> 00:14:29.069 align:middle line:-2
现在在你的滚动视图中
你将有一些内容

00:14:29.837 --> 00:14:33.440 align:middle line:-2
你可以想到一个滚动视图
很像一个隐喻的画框

00:14:33.807 --> 00:14:37.845 align:middle line:-2
滚动视图的大小在某种程度上
便代表了图片框的固定框架

00:14:38.045 --> 00:14:40.714 align:middle line:-1
然后在里面图片就是你的内容

00:14:40.781 --> 00:14:44.451 align:middle line:-2
某种程度上内容可以滑动
好像是在滚珠轴承上

00:14:45.085 --> 00:14:48.088 align:middle line:-2
现在在这个例子中
我们的内容是垂直可滚动的

00:14:48.255 --> 00:14:50.691 align:middle line:-1
这是因为我们的内容的高度

00:14:50.757 --> 00:14:55.229 align:middle line:-2
根据内容的多少
比滚动视图的高度要高

00:14:55.963 --> 00:14:58.565 align:middle line:-1
在这里我关掉了右边这张图的剪辑

00:14:58.632 --> 00:15:01.168 align:middle line:-2
这样我们就可以看到
在屏幕后发生了什么

00:14:58.632 --> 00:15:01.168 align:middle line:-2
这样我们就可以看到
在屏幕后发生了什么

00:15:02.269 --> 00:15:06.240 align:middle line:-2
因此滚动视图使用
contentOffset

00:15:06.306 --> 00:15:08.408 align:middle line:-2
它是表示滚动视图
当前滚动位置的方法

00:15:09.176 --> 00:15:10.911 align:middle line:-1
现在我们已经滚动到了最顶端了

00:15:10.978 --> 00:15:15.015 align:middle line:-2
所以contentOffset
是0 这意味着内容的上边缘

00:15:15.082 --> 00:15:17.584 align:middle line:-1
与滚动视图的上边缘已经对齐

00:15:18.785 --> 00:15:21.288 align:middle line:-1
现在如果我们继续向下滚动视图

00:15:21.355 --> 00:15:23.156 align:middle line:-1
它会将我们的内容向上滑动

00:15:23.223 --> 00:15:25.759 align:middle line:-2
那么让我们滚动到底部
看看发生了什么

00:15:26.293 --> 00:15:31.031 align:middle line:-2
正如你在我们的例子中所看到的
当我们到达底部时

00:15:31.098 --> 00:15:32.833 align:middle line:-1
内容偏移量会一直增加到100

00:15:33.100 --> 00:15:36.103 align:middle line:-1
这是因为滚动视图的顶部边缘

00:15:36.170 --> 00:15:39.406 align:middle line:-2
现在比内容区域的
顶部边缘低了100点

00:15:40.474 --> 00:15:42.809 align:middle line:-1
如果我们在滚动视图上设置一个

00:15:42.876 --> 00:15:45.746 align:middle line:-2
contentOffset为0
我们将一路回到顶部

00:15:46.246 --> 00:15:47.681 align:middle line:-1
我们又回到了起点

00:15:48.549 --> 00:15:52.052 align:middle line:-2
所以这就是滚动
一个简单滚动视图的基本知识

00:15:52.319 --> 00:15:54.421 align:middle line:-2
现在让我们谈谈一个
关于扩展滚动视图的

00:15:55.122 --> 00:15:58.225 align:middle line:-1
可滚动区域的非常重要的概念

00:15:58.659 --> 00:16:01.361 align:middle line:-2
我们通过一个叫做
contentInset属性来做它

00:15:58.659 --> 00:16:01.361 align:middle line:-2
我们通过一个叫做
contentInset属性来做它

00:16:02.629 --> 00:16:07.401 align:middle line:-2
所以contentInset
是一种机制 你可以提供一个嵌入

00:16:07.467 --> 00:16:11.605 align:middle line:-2
你可以从滚动视图可滚动区域的边缘
指定此嵌入到内部内容

00:16:12.339 --> 00:16:16.009 align:middle line:-2
因此添加contentInset
从而增加可滚动区域

00:16:16.076 --> 00:16:19.046 align:middle line:-1
滚动视图能够滚动到更大的区域

00:16:19.546 --> 00:16:23.250 align:middle line:-2
让我们在上面边缘设置一个
contentInset 看看会发生什么

00:16:24.351 --> 00:16:26.486 align:middle line:-2
这里我们将
contentInset设为20

00:16:27.054 --> 00:16:30.190 align:middle line:-2
正如你所看到的
它扩展了滚动视图的顶部边缘

00:16:30.257 --> 00:16:32.192 align:middle line:-1
这样滚动区域就现在就变得更大了

00:16:33.093 --> 00:16:36.396 align:middle line:-2
现在当我们的
contentOffset为0时

00:16:36.730 --> 00:16:39.366 align:middle line:-2
我们的内容仍然与
滚动视图的顶部保持齐平

00:16:39.766 --> 00:16:43.437 align:middle line:-2
但滚动视图实际上可以
滚动到更远的顶部

00:16:44.271 --> 00:16:46.240 align:middle line:-1
所以让我们像以前一样滚动

00:16:46.306 --> 00:16:47.941 align:middle line:-1
观察事物是如何变化的

00:16:48.876 --> 00:16:50.344 align:middle line:-1
我们将滚动到底部

00:16:50.410 --> 00:16:54.181 align:middle line:-2
就像以前一样 我们仍然在这里
内容偏移量为100

00:16:54.748 --> 00:16:57.417 align:middle line:-2
那是因为我们没有改变
底部的任何东西

00:16:57.484 --> 00:16:59.920 align:middle line:-2
我们底部的
contentInset仍然为0

00:17:00.921 --> 00:17:05.157 align:middle line:-2
如果我们现在继续往回滚动
一直到最上面

00:17:05.425 --> 00:17:08.395 align:middle line:-2
我们实际上会得到一个为负值的
contentOffset

00:17:09.663 --> 00:17:13.934 align:middle line:-2
这是因为我们现在的滚动
可以超出我们的内容的顶部边缘

00:17:14.201 --> 00:17:17.570 align:middle line:-1
这样我们就可以滚动到顶部边缘的

00:17:17.637 --> 00:17:18.704 align:middle line:-1
负值contentInset

00:17:20.339 --> 00:17:21.909 align:middle line:-1
现在我们从iOS 7开始

00:17:22.509 --> 00:17:24.978 align:middle line:-2
contentInset
技术已变得很重要了

00:17:25.045 --> 00:17:27.814 align:middle line:-2
这是因为在iOS 7中
半透明滚动条

00:17:27.881 --> 00:17:30.217 align:middle line:-1
在整个系统中变得非常普遍了

00:17:30.284 --> 00:17:33.620 align:middle line:-2
这个想法是
将你的内容从边到边都展示出来

00:17:33.787 --> 00:17:37.791 align:middle line:-2
它会从下面露出滚动条
这样你就可以使你的内容

00:17:37.858 --> 00:17:41.895 align:middle line:-2
通过滚动条获得漂亮的彩色框
对吧？工具栏、导航栏等等

00:17:42.496 --> 00:17:46.066 align:middle line:-2
因为这很常见
所以我们想要一种方法来帮助

00:17:46.133 --> 00:17:50.003 align:middle line:-2
自动设置滚动视图上的contentInset
以便在你的app中更容易实现

00:17:50.604 --> 00:17:53.407 align:middle line:-2
为此我们在
UIViewController上有一个属性

00:17:54.208 --> 00:17:57.344 align:middle line:-1
这被称为自动调整滚动视图嵌入

00:17:57.744 --> 00:18:02.883 align:middle line:-2
其目的是当滚动视图上
有来自导航栏或工具栏的

00:17:57.744 --> 00:18:02.883 align:middle line:-2
其目的是当滚动视图上
有来自导航栏或工具栏的

00:18:03.417 --> 00:18:07.955 align:middle line:-2
重叠栏时 将自动设置滚动
视图上的contentInset

00:18:08.488 --> 00:18:11.458 align:middle line:-2
这是因为当你的滚动视图
在视图控制器里面的时候

00:18:11.525 --> 00:18:14.328 align:middle line:-1
它本身就包含在导航控制器里面了

00:18:15.495 --> 00:18:17.731 align:middle line:-2
现在对于一些常见的情况
这个工作效果很好

00:18:17.998 --> 00:18:22.703 align:middle line:-2
但若你的app有更多自定义或高级
UIScrollView的使用

00:18:23.303 --> 00:18:27.374 align:middle line:-2
有时让你的代码设置
contentInset

00:18:27.441 --> 00:18:30.744 align:middle line:-2
和UIKit设置相同的contentInset属性
这可能会带来一些挑战

00:18:31.612 --> 00:18:35.249 align:middle line:-2
因此从iOS 11开始
我们有一个更加明确

00:18:35.315 --> 00:18:38.952 align:middle line:-2
和强大的方法
来使你获得相同的自动行为

00:18:39.653 --> 00:18:43.390 align:middle line:-2
实现这一点的机制是利用
UIScrollView上的一个新属性

00:18:43.790 --> 00:18:46.660 align:middle line:-2
我们现在会讲到它
它叫做adjustedContentInset

00:18:48.262 --> 00:18:51.899 align:middle line:-2
所以从iOS 11开始我们在
UIScrollView中引入了一个新属性

00:18:51.965 --> 00:18:56.136 align:middle line:-2
它是只读的
它是adjustedContentInset

00:18:56.203 --> 00:18:58.739 align:middle line:-2
它基本上描述了
滚动视图实际上是如何行为的

00:18:59.540 --> 00:19:01.074 align:middle line:-2
你可能会问我们刚才讨论的
contentInset和

00:18:59.540 --> 00:19:01.074 align:middle line:-2
你可能会问我们刚才讨论的
contentInset和

00:19:01.141 --> 00:19:03.377 align:middle line:-1
adjustedContentInset

00:19:03.443 --> 00:19:05.546 align:middle line:-1
的区别是什么？

00:19:05.812 --> 00:19:08.081 align:middle line:-2
一个好问题
下面就是它的分解答案

00:19:09.216 --> 00:19:14.821 align:middle line:-2
adjustedContentInset
等于你app上的contentInset

00:19:14.888 --> 00:19:18.559 align:middle line:-2
加上来自系统或UIKit的
任何自动嵌入

00:19:19.660 --> 00:19:21.962 align:middle line:-1
因为我们现在把这两个分开

00:19:22.029 --> 00:19:24.464 align:middle line:-1
所以很容易推断出正在发生的事情

00:19:25.365 --> 00:19:28.735 align:middle line:-2
当然你可能想要知道
我什么时候在哪里可以在

00:19:28.802 --> 00:19:29.870 align:middle line:-2
滚动视图中得到一个
systemInset？

00:19:30.838 --> 00:19:34.408 align:middle line:-2
一个最常见的例子是
safeAreaInsets

00:19:35.042 --> 00:19:38.645 align:middle line:-2
让我们看看它是如何工作的
回到我们的基本图

00:19:38.712 --> 00:19:41.348 align:middle line:-2
但我们会把一些
safeAreaInsets放入其中

00:19:42.683 --> 00:19:44.318 align:middle line:-1
那么 如果我们现在开始的话

00:19:44.384 --> 00:19:46.887 align:middle line:-2
我们在边缘没有
safeAreaInsets

00:19:46.954 --> 00:19:49.423 align:middle line:-2
但是我们将继续
在滚动视图的顶部添加一些

00:19:49.489 --> 00:19:51.158 align:middle line:-1
safeAreaInsets

00:19:52.359 --> 00:19:57.598 align:middle line:-2
你会看到在默认情况下
滚动视图会自动地将这些

00:19:57.664 --> 00:20:02.603 align:middle line:-2
在其顶部边缘的safeAreaInsets放入到其
adjustedContentInset里面

00:19:57.664 --> 00:20:02.603 align:middle line:-2
在其顶部边缘的safeAreaInsets放入到其
adjustedContentInset里面

00:20:02.803 --> 00:20:05.572 align:middle line:-2
这是因为我们的滚动视图
是垂直方向可滚动的

00:20:05.772 --> 00:20:07.040 align:middle line:-1
它的作用是

00:20:07.107 --> 00:20:10.010 align:middle line:-2
它会自动增加
可滚动区域

00:20:10.077 --> 00:20:13.380 align:middle line:-2
使内容可以从下面从覆盖顶部边缘
甚至是从显示边缘

00:20:13.447 --> 00:20:17.284 align:middle line:-1
滚动出来 像一个条一样

00:20:19.119 --> 00:20:22.589 align:middle line:-2
我们来看一个例子
我们在两个不同的设备上

00:20:22.656 --> 00:20:26.827 align:middle line:-2
iPhone X在左边、iPhone 8在右边
有相同的滚动视图

00:20:27.160 --> 00:20:29.630 align:middle line:-1
你可以看到这是一个真实的例子

00:20:29.696 --> 00:20:32.699 align:middle line:-2
在iPhone X上
顶部的安全区域更大

00:20:32.766 --> 00:20:36.103 align:middle line:-2
因为它有更大的状态栏高度
和传感器外壳

00:20:36.570 --> 00:20:39.173 align:middle line:-2
其结果是
滚动视图有一个更大的顶部嵌入

00:20:39.239 --> 00:20:41.575 align:middle line:-1
这是灰色的区域在顶部有阴影

00:20:42.576 --> 00:20:46.547 align:middle line:-1
这是滚动视图自动适应

00:20:46.613 --> 00:20:47.681 align:middle line:-1
它运行的任何设备的一种方式

00:20:48.282 --> 00:20:51.618 align:middle line:-2
现在让我们回到我们的图上
来讨论一些其他的东西

00:20:52.786 --> 00:20:56.423 align:middle line:-2
我们有这样的滚动视图
我们在其顶部有安全区域设置

00:20:57.057 --> 00:20:59.493 align:middle line:-2
让我们继续
在滚动视图中添加一个子视图

00:20:59.860 --> 00:21:01.962 align:middle line:-1
我们把这个放到内容区中

00:20:59.860 --> 00:21:01.962 align:middle line:-1
我们把这个放到内容区中

00:21:02.196 --> 00:21:05.966 align:middle line:-1
现在这个子视图完全位于滚动视图的

00:21:06.033 --> 00:21:06.934 align:middle line:-1
安全区域内

00:21:08.068 --> 00:21:10.704 align:middle line:-2
但是如果我们开始向下滚动
这个滚动视图

00:21:10.771 --> 00:21:13.607 align:middle line:-1
它会移动那个内容向上 就像这样

00:21:14.074 --> 00:21:15.342 align:middle line:-2
这个子视图的一部分
位于滚动视图安全区之外

00:21:15.409 --> 00:21:18.579 align:middle line:-1
这个时候会发生什么呢？

00:21:19.613 --> 00:21:23.283 align:middle line:-2
根据David
刚才提到的安全区域内嵌传播

00:21:23.717 --> 00:21:26.453 align:middle line:-2
你可能会想 好吧
这意味着子视图

00:21:26.520 --> 00:21:29.489 align:middle line:-2
将开始看到它自己的
顶部边缘安全区域嵌入

00:21:30.324 --> 00:21:32.025 align:middle line:-1
但事实并非如此

00:21:32.659 --> 00:21:35.128 align:middle line:-1
原因是当滚动视图将安全区域的嵌入

00:21:35.195 --> 00:21:39.399 align:middle line:-1
合并到它的调整后的内容嵌入中时

00:21:40.000 --> 00:21:43.937 align:middle line:-1
它将不再将相同的嵌入向下传播到

00:21:44.004 --> 00:21:45.072 align:middle line:-1
同一边缘上的子视图

00:21:46.240 --> 00:21:47.407 align:middle line:-1
这是非常重要的一点

00:21:48.208 --> 00:21:53.547 align:middle line:-2
滚动视图使用滚动来移动内容
并将其移至安全区域

00:21:54.481 --> 00:21:58.919 align:middle line:-1
如果一个滚动视图也要传播

00:21:58.986 --> 00:22:01.555 align:middle line:-2
它用来扩展它的可滚动区域的
安全区域嵌入的话

00:21:58.986 --> 00:22:01.555 align:middle line:-2
它用来扩展它的可滚动区域的
安全区域嵌入的话

00:22:01.622 --> 00:22:03.390 align:middle line:-1
它几乎就像是在两个不同的地方

00:22:03.457 --> 00:22:06.026 align:middle line:-1
重复计算相同的嵌入

00:22:06.593 --> 00:22:07.528 align:middle line:-1
结果是

00:22:07.594 --> 00:22:11.832 align:middle line:-1
滚动轴上的子视图完全不知道

00:22:11.899 --> 00:22:14.835 align:middle line:-1
边缘上有安全区域嵌入

00:22:14.902 --> 00:22:17.171 align:middle line:-2
而滚动视图正将它们吸收到
调整后的内容嵌入中

00:22:18.405 --> 00:22:20.340 align:middle line:-2
我们已了解了滚动视图
如何与安全区域一起工作

00:22:20.407 --> 00:22:23.477 align:middle line:-1
让我们介绍一下我们所有的选项

00:22:23.544 --> 00:22:25.012 align:middle line:-1
一边让你控制这种行为

00:22:26.780 --> 00:22:29.883 align:middle line:-2
你必须这样做的机制是
UIScrollView上的一个属性叫做

00:22:29.950 --> 00:22:31.952 align:middle line:-2
contentInsetAdjustmentBehavior
的属性

00:22:32.019 --> 00:22:35.689 align:middle line:-2
它也可以在界面构建器上使用
就像你所看到的那样

00:22:36.590 --> 00:22:38.992 align:middle line:-1
现在它的默认值是自动的

00:22:39.293 --> 00:22:41.895 align:middle line:-1
大多数时候 如果不是所有的时候

00:22:41.962 --> 00:22:44.731 align:middle line:-1
你真的应当把它把它设为它的默认值

00:22:45.199 --> 00:22:49.136 align:middle line:-2
但我们想通过这些选项
让你了解它们是做什么的

00:22:49.203 --> 00:22:50.504 align:middle line:-1
知道它们是可以使用的

00:22:50.571 --> 00:22:52.673 align:middle line:-2
这样你就可以在app中
做出正确的选择

00:22:53.307 --> 00:22:54.775 align:middle line:-1
我们从第一个开始

00:22:55.976 --> 00:22:58.445 align:middle line:-1
第一个是始终如一的行为

00:22:58.512 --> 00:23:00.714 align:middle line:-1
正如你所期望的那样 这非常简单

00:22:58.512 --> 00:23:00.714 align:middle line:-1
正如你所期望的那样 这非常简单

00:23:00.781 --> 00:23:05.953 align:middle line:-2
滚动视图总是将任何系统的嵌入
比如安全区域的嵌入

00:23:06.019 --> 00:23:08.922 align:middle line:-1
包含在其任何边缘的调整内容中

00:23:09.289 --> 00:23:11.491 align:middle line:-1
这在我们的具体例子中很有效

00:23:11.558 --> 00:23:14.595 align:middle line:-2
我们的滚动视图中
只有一个顶部和底部的安全区域

00:23:14.828 --> 00:23:16.730 align:middle line:-1
所以 它会合并它们

00:23:16.797 --> 00:23:19.066 align:middle line:-1
内容会从这些栏下面移出来

00:23:19.132 --> 00:23:22.769 align:middle line:-2
我们在左边或右边没有任何水平嵌入
所以没有问题

00:23:23.170 --> 00:23:25.873 align:middle line:-2
但是要注意这个
因为如果你有类似东西

00:23:25.939 --> 00:23:29.176 align:middle line:-2
比如iPhone X的
横屏表视图

00:23:29.743 --> 00:23:31.612 align:middle line:-1
就会有左和右安全区域嵌入

00:23:31.845 --> 00:23:35.082 align:middle line:-2
使用此行为
表视图将把这些内容合并到

00:23:35.148 --> 00:23:38.619 align:middle line:-2
调整后的内容内嵌中
这将增加可滚动区

00:23:38.685 --> 00:23:41.255 align:middle line:-1
这将使表视图可以水平滚动

00:23:41.555 --> 00:23:43.023 align:middle line:-1
你不会想要那种行为

00:23:43.790 --> 00:23:46.860 align:middle line:-2
这就是为何我们有下一个行为
即scrollableAxes

00:23:47.761 --> 00:23:51.064 align:middle line:-1
有了这个滚动视图将独立地考虑

00:23:51.131 --> 00:23:53.433 align:middle line:-1
垂直轴和水平轴上的东西

00:23:53.867 --> 00:23:56.436 align:middle line:-1
对于其中的每一个 如果内容大小

00:23:56.503 --> 00:23:58.705 align:middle line:-2
超过了宽度或高度
视情况而定

00:23:59.273 --> 00:24:01.942 align:middle line:-2
或者如果你设置了
alwaysBounceHorizontal

00:23:59.273 --> 00:24:01.942 align:middle line:-2
或者如果你设置了
alwaysBounceHorizontal

00:24:02.009 --> 00:24:04.511 align:middle line:-2
或者设置了alwaysBounceVertical
的属性 为真实的话

00:24:04.845 --> 00:24:07.447 align:middle line:-1
那么滚动视图将考虑轴是可滚动的

00:24:07.614 --> 00:24:09.983 align:middle line:-1
它会将任何系统嵌入

00:24:10.050 --> 00:24:11.618 align:middle line:-1
包含到它的调整后的内容中

00:24:11.952 --> 00:24:15.455 align:middle line:-2
所以在我后面的这个例子中
我们有一篇很长的文章可以滚动

00:24:15.522 --> 00:24:18.158 align:middle line:-1
所以我们把这些自动嵌入合并在一起

00:24:18.325 --> 00:24:20.694 align:middle line:-2
但若我们有篇更短的文章
将会怎样？让我们看看

00:24:21.328 --> 00:24:24.464 align:middle line:-2
好的 这是一篇较短的文章
这里发生了什么事？

00:24:24.531 --> 00:24:27.067 align:middle line:-1
让我们看看导航条下面发生了什么

00:24:27.868 --> 00:24:31.071 align:middle line:-2
看起来我们已经丢失了系统嵌入
因为它不再是可滚动的了

00:24:31.138 --> 00:24:33.907 align:middle line:-1
所以 我们的标题一直在状态栏下面

00:24:34.308 --> 00:24:37.578 align:middle line:-2
让我们把导航条放回去
并讨论我们如何解决这个问题

00:24:37.845 --> 00:24:41.181 align:middle line:-2
一种方法是你可以在这个滚动视图上设置
alwaysBounceVertical

00:24:41.248 --> 00:24:42.716 align:middle line:-1
如果这是你想要的

00:24:42.783 --> 00:24:45.552 align:middle line:-2
使滚动视图始终
可以垂直滚动的行为的巴哈

00:24:45.786 --> 00:24:48.856 align:middle line:-2
或者我们会达到下一个行为
一个自动的行为

00:24:49.590 --> 00:24:52.860 align:middle line:-1
自动工作基本上与我们刚才谈到的

00:24:52.926 --> 00:24:57.297 align:middle line:-2
scrollableAxes相同
但它有一额外行为作为它的一部分

00:24:57.364 --> 00:25:00.868 align:middle line:-2
即当滚动视图位于
导航控制器的内部时

00:24:57.364 --> 00:25:00.868 align:middle line:-2
即当滚动视图位于
导航控制器的内部时

00:25:01.568 --> 00:25:05.606 align:middle line:-2
滚动视图将继续进行
并调整其顶部和底部内容嵌入

00:25:05.873 --> 00:25:10.043 align:middle line:-2
即使不是垂直滚动
它也解释顶部和底部的条

00:25:10.344 --> 00:25:13.080 align:middle line:-2
因此即使在这种情况下
我们有一篇很短的文章

00:25:13.146 --> 00:25:15.349 align:middle line:-1
它仍然意味着我们得到了正确的嵌入

00:25:15.415 --> 00:25:17.284 align:middle line:-1
这通常是你想要的行为

00:25:17.351 --> 00:25:19.086 align:middle line:-1
这就是为什么我们设它为默认值

00:25:19.286 --> 00:25:20.554 align:middle line:-1
不过我得提醒你一下

00:25:20.621 --> 00:25:23.924 align:middle line:-2
如果将已弃用的automatically
AdjustScrollViewInset

00:25:23.991 --> 00:25:25.225 align:middle line:-1
属性设置为错误

00:25:25.726 --> 00:25:27.694 align:middle line:-1
则将禁用此行为

00:25:27.761 --> 00:25:30.264 align:middle line:-2
其行为就像
scrollableAxes了

00:25:31.198 --> 00:25:33.600 align:middle line:-2
好了
这就是我们最后的行为

00:25:33.800 --> 00:25:37.804 align:middle line:-2
从来没有 现在
正如你所期望的那样

00:25:37.871 --> 00:25:41.108 align:middle line:-2
这意味着滚动视图永远不会调整它
contentInset

00:25:42.075 --> 00:25:44.578 align:middle line:-1
然而这也有一些副作用

00:25:45.779 --> 00:25:49.883 align:middle line:-2
首先这意味着滚动视图
最终将在其所有边缘传播

00:25:49.950 --> 00:25:52.686 align:middle line:-2
safeAreaInsets
就像常规视图一样

00:25:53.053 --> 00:25:54.555 align:middle line:-1
正如我们之前谈到的

00:25:54.621 --> 00:25:57.524 align:middle line:-2
这可能会带给你一些
你并不真正想要的行为

00:25:57.891 --> 00:26:00.060 align:middle line:-1
例如 如果你回想一下你的布局边界

00:25:57.891 --> 00:26:00.060 align:middle line:-1
例如 如果你回想一下你的布局边界

00:26:00.127 --> 00:26:02.596 align:middle line:-2
是与安全区域的相关的
这意味着你的布局边界

00:26:02.663 --> 00:26:05.332 align:middle line:-1
可能会因此而增加或改变

00:26:06.366 --> 00:26:09.303 align:middle line:-2
这也将禁用滚动视图提供的
一些非常有用的自动行为

00:26:09.369 --> 00:26:12.906 align:middle line:-1
比如自动滚动指示器嵌入

00:26:13.640 --> 00:26:17.744 align:middle line:-2
所以如果你在网上搜索 你知道的
你会看到一个最喜欢的

00:26:17.811 --> 00:26:19.246 align:middle line:-1
问题和回答网站建议你

00:26:19.313 --> 00:26:22.449 align:middle line:-2
将你的滚动视图的
内容嵌入调整行为设置为从不考虑

00:26:22.950 --> 00:26:26.053 align:middle line:-1
而是使用附加的安全区域嵌入

00:26:26.119 --> 00:26:27.988 align:middle line:-1
来增加安全区域嵌入

00:26:28.055 --> 00:26:31.091 align:middle line:-2
如果你的目标是向系统表达说
你已经添加了 比如说

00:26:31.158 --> 00:26:33.560 align:middle line:-1
一个工具栏或者其他的覆盖

00:26:33.894 --> 00:26:37.998 align:middle line:-2
或者你可能考虑要直接修改
contentInset

00:26:38.065 --> 00:26:39.867 align:middle line:-1
那个我们一开始讲过的属性

00:26:39.933 --> 00:26:43.103 align:middle line:-2
那么这就是你可以使用的控制
你可以用它来从有效调整嵌入中

00:26:43.170 --> 00:26:46.773 align:middle line:-2
增加或减少
而滚动视图将看到这个

00:26:47.508 --> 00:26:49.510 align:middle line:-2
我想有请Russell
谈谈这个话题

00:26:49.576 --> 00:26:52.412 align:middle line:-1
他将告诉你如何把这一切放在一起

00:26:58.252 --> 00:26:59.086 align:middle line:-1
谢谢 Tyler

00:27:00.454 --> 00:27:03.357 align:middle line:-2
现在我们已经引入了
许多自适应API

00:27:03.423 --> 00:27:06.326 align:middle line:-1
来帮助你的app适应不同的环境

00:27:06.627 --> 00:27:09.296 align:middle line:-1
安全区域其实是最新的

00:27:09.530 --> 00:27:12.065 align:middle line:-1
我将回顾其中的一些概念并讨论

00:27:12.132 --> 00:27:13.901 align:middle line:-1
它们是如何与安全区一起工作的

00:27:15.769 --> 00:27:18.038 align:middle line:-1
让我们进入app的第一个屏幕

00:27:18.305 --> 00:27:22.109 align:middle line:-2
这里有一个很标准的设置
带有一个标签栏控制器

00:27:22.176 --> 00:27:26.280 align:middle line:-2
包含一个带有我们的
内容视图控制器的导航控制器

00:27:27.447 --> 00:27:31.618 align:middle line:-2
现在注意这三个视图控制器的视图
都是全屏的

00:27:32.119 --> 00:27:35.989 align:middle line:-2
这使得标签条
可以扩展到Home Indicator下面

00:27:36.056 --> 00:27:38.725 align:middle line:-1
导航栏可以扩展到状态栏下面

00:27:38.792 --> 00:27:41.895 align:middle line:-1
而内容可以它下面扩展和滚动

00:27:43.530 --> 00:27:45.632 align:middle line:-1
但我们需要防止这些元素重叠

00:27:45.699 --> 00:27:48.735 align:middle line:-2
让我们看看安全区域是如何
允许这些组件这样做的

00:27:50.270 --> 00:27:53.674 align:middle line:-2
安全区域嵌入通过流经
标签栏栏控制器而开始的

00:27:53.740 --> 00:27:57.444 align:middle line:-2
它只接收在Home Indicator
和状态栏上的嵌入

00:27:57.511 --> 00:27:59.479 align:middle line:-1
因为这是它所看到的一切

00:28:00.714 --> 00:28:04.251 align:middle line:-1
由于导航控制器位于其中

00:28:04.318 --> 00:28:07.521 align:middle line:-2
所以它也会在底部接收一个安全区域
用于记录标签栏

00:28:08.322 --> 00:28:11.592 align:middle line:-2
内容视图控制器在这两个栏内
接收安全区域的内嵌

00:28:11.658 --> 00:28:12.993 align:middle line:-1
用于记录两个栏

00:28:14.728 --> 00:28:16.797 align:middle line:-2
现在这个故事在横屏上
会是什么样的？

00:28:17.497 --> 00:28:20.234 align:middle line:-2
类似地
顶部和底部有安全的区域嵌入

00:28:20.634 --> 00:28:22.836 align:middle line:-1
但是在左侧和右侧也有嵌入

00:28:23.237 --> 00:28:26.306 align:middle line:-1
用于记录屏幕两侧

00:28:26.373 --> 00:28:28.375 align:middle line:-1
这些都是通过视图控制器层级

00:28:28.442 --> 00:28:30.944 align:middle line:-1
从屏幕向下传播的

00:28:32.145 --> 00:28:35.516 align:middle line:-2
现在我想在这里停下来
并用这个例子来说明

00:28:35.582 --> 00:28:38.285 align:middle line:-1
当你在实现自己的视图时

00:28:38.352 --> 00:28:39.920 align:middle line:-1
应该如何考虑使用安全区域

00:28:40.754 --> 00:28:45.225 align:middle line:-2
这个自定义视图应该不知道
它在iPhone X上运行

00:28:45.526 --> 00:28:49.396 align:middle line:-2
它甚至不应该知道
它包含在视图控制器中

00:28:50.597 --> 00:28:52.833 align:middle line:-1
这是封装的目的

00:28:53.166 --> 00:28:56.003 align:middle line:-1
如果你的视图只读取

00:28:56.069 --> 00:28:57.838 align:middle line:-2
在所有四个侧面上提供给它们的
安全区域嵌入

00:28:57.905 --> 00:29:04.645 align:middle line:-1
并且能够适应任意安全区域嵌入

00:28:57.905 --> 00:29:04.645 align:middle line:-1
并且能够适应任意安全区域嵌入

00:29:04.711 --> 00:29:08.649 align:middle line:-1
这将确保你的视图是模块化的

00:29:08.715 --> 00:29:12.553 align:middle line:-2
可以在你的整个app中移动
并在不同的环境中运行

00:29:12.619 --> 00:29:13.887 align:middle line:-1
并且仍然不会被遮挡

00:29:16.523 --> 00:29:20.494 align:middle line:-2
现在让我们跳到一篇文章中
讨论隐藏状态栏

00:29:22.162 --> 00:29:26.033 align:middle line:-2
因此隐藏状态栏是一种技术
它可以在矩形屏幕手机上

00:29:26.099 --> 00:29:29.469 align:middle line:-1
收回20点垂直屏幕

00:29:30.838 --> 00:29:34.675 align:middle line:-2
而我们通过覆盖隐藏在
我们的内容视图控制器中的

00:29:34.741 --> 00:29:37.411 align:middle line:-2
首选状态栏来完成这一操作
而且我们做的是正确的

00:29:37.477 --> 00:29:39.680 align:middle line:-2
首选状态栏通过
容器视图控制器层级向上传播

00:29:39.746 --> 00:29:45.018 align:middle line:-1
并受到系统根的尊重

00:29:46.587 --> 00:29:49.156 align:middle line:-1
不幸的是在iPhone X上

00:29:49.223 --> 00:29:52.659 align:middle line:-2
更喜欢隐藏状态栏
不隐藏传感器外壳

00:29:53.227 --> 00:29:55.896 align:middle line:-1
所以我们不能在它下面滑动内容

00:29:57.931 --> 00:30:01.835 align:middle line:-2
UIKit会保护你
不允许你创建这个UI

00:29:57.931 --> 00:30:01.835 align:middle line:-2
UIKit会保护你
不允许你创建这个UI

00:30:01.902 --> 00:30:05.506 align:middle line:-2
相反 iPhone X上
导航控制器的行为是

00:30:05.939 --> 00:30:08.375 align:middle line:-1
当导航条可见时

00:30:08.442 --> 00:30:10.310 align:middle line:-1
它将始终显示状态栏

00:30:11.845 --> 00:30:15.482 align:middle line:-2
所以如果你想隐藏状态栏
并收回垂直栏的话

00:30:15.549 --> 00:30:16.517 align:middle line:-1
我们的建议是

00:30:16.583 --> 00:30:20.287 align:middle line:-1
将导航栏和状态栏一起隐藏

00:30:21.788 --> 00:30:27.127 align:middle line:-2
一般来说当你想创建一个
沉浸式的体验时 就去沉浸其中

00:30:27.194 --> 00:30:29.997 align:middle line:-1
只需将所有的覆盖和控件一起隐藏

00:30:30.831 --> 00:30:34.768 align:middle line:-2
这不仅看起来很好
而且还帮助你的用户关注其内容

00:30:34.835 --> 00:30:39.373 align:middle line:-2
它也是一个能很好地适应
我们所有设备的设计技术

00:30:41.642 --> 00:30:44.144 align:middle line:-1
现在说到沉浸式体验

00:30:44.845 --> 00:30:46.547 align:middle line:-1
让我们切换到iPad

00:30:46.613 --> 00:30:49.616 align:middle line:-2
讨论在一个非常广泛的环境中
如何呈现文本

00:30:51.351 --> 00:30:53.620 align:middle line:-1
这里你可以看到我们有文本

00:30:53.687 --> 00:30:57.257 align:middle line:-1
它并没有一直延伸到视图的边缘

00:30:58.458 --> 00:30:59.726 align:middle line:-1
这样做的问题是

00:30:59.793 --> 00:31:01.828 align:middle line:-1
如果我们把文本全部写到了边缘

00:30:59.793 --> 00:31:01.828 align:middle line:-1
如果我们把文本全部写到了边缘

00:31:01.895 --> 00:31:06.400 align:middle line:-2
当你的眼睛会在给定字体大小下
从一行文字跟踪到下一行文字时候

00:31:06.466 --> 00:31:10.737 align:middle line:-1
它会变得难以阅读

00:31:11.672 --> 00:31:17.344 align:middle line:-2
因此解决方案是
始终在可读宽度内呈现文本

00:31:17.711 --> 00:31:20.080 align:middle line:-2
即系统根据用户当前选择的
动态类型字体大小

00:31:20.414 --> 00:31:24.751 align:middle line:-1
提供的推荐可读宽度

00:31:25.052 --> 00:31:29.656 align:middle line:-2
动态类型是
iOS的另一个自适应元素

00:31:31.258 --> 00:31:33.026 align:middle line:-1
你能通过UIView上的API

00:31:33.427 --> 00:31:37.497 align:middle line:-2
获得可读的宽度叫做
readableContentGuide

00:31:37.798 --> 00:31:39.199 align:middle line:-1
这是另一个布局指南

00:31:39.266 --> 00:31:42.169 align:middle line:-1
就像边界和安全区域的布局指南

00:31:42.970 --> 00:31:44.137 align:middle line:-1
它的工作原理是一样的

00:31:46.707 --> 00:31:49.776 align:middle line:-1
现在我提到了这个可读的宽度取决于

00:31:49.843 --> 00:31:53.213 align:middle line:-1
用户当前选择的动态类型大小

00:31:53.280 --> 00:31:57.050 align:middle line:-2
这意味着如果用户在控制中心或
设置app中更改其动态类型大小

00:31:57.484 --> 00:32:00.420 align:middle line:-1
则可读宽度将变小或更大以进行补偿

00:31:57.484 --> 00:32:00.420 align:middle line:-1
则可读宽度将变小或更大以进行补偿

00:32:03.223 --> 00:32:06.760 align:middle line:-2
现在让我们切换到竖屏
将我们的文章列表带进来

00:32:06.827 --> 00:32:11.632 align:middle line:-1
使文章的上下文显示变得更窄

00:32:12.032 --> 00:32:15.802 align:middle line:-1
因此在这里最大推荐可读宽度

00:32:15.869 --> 00:32:19.306 align:middle line:-1
比我们要显示文章的空间宽得多

00:32:20.174 --> 00:32:23.010 align:middle line:-1
需要注意的是可读内容指南

00:32:23.076 --> 00:32:27.214 align:middle line:-1
仍然不一定会报告所需最大可读宽度

00:32:27.281 --> 00:32:30.751 align:middle line:-2
它将被固定到布局边界
这意味着你可以有信心地

00:32:30.817 --> 00:32:33.954 align:middle line:-2
在readableContentGuide中
列出你的视图

00:32:34.021 --> 00:32:36.823 align:middle line:-1
不要担心它们会超出你的边界

00:32:39.593 --> 00:32:43.297 align:middle line:-2
现在让我们看看它是
如何在存在安全区域的情况下工作的

00:32:43.897 --> 00:32:47.234 align:middle line:-2
readableContentGuide
功能就像布局一样

00:32:47.301 --> 00:32:51.471 align:middle line:-2
它的嵌入添加到由
safeAreaInsets提供的嵌套中

00:32:53.507 --> 00:32:59.046 align:middle line:-2
通常情况下
在系统默认的动态类型字体大小下

00:32:59.112 --> 00:33:03.817 align:middle line:-2
可读的宽度将会比iPhone
在任何方向上的宽度都要宽

00:32:59.112 --> 00:33:03.817 align:middle line:-2
可读的宽度将会比iPhone
在任何方向上的宽度都要宽

00:33:03.884 --> 00:33:06.954 align:middle line:-1
这意味着它不会发挥作用

00:33:07.588 --> 00:33:12.359 align:middle line:-2
然而即使是在iPhone上
如果用户选择的动态类型字体尺寸

00:33:12.426 --> 00:33:14.194 align:middle line:-2
小于默认字体大小
也可以发挥作用

00:33:14.261 --> 00:33:16.496 align:middle line:-1
因此你的app仍然可以适应

00:33:18.899 --> 00:33:22.536 align:middle line:-1
现在让我们回到文章列表表视图

00:33:22.603 --> 00:33:24.404 align:middle line:-1
看看这里的可读宽度是如何工作的

00:33:25.439 --> 00:33:29.977 align:middle line:-2
关于表视图 需要知道的是
它们使用布局边界

00:33:30.344 --> 00:33:34.982 align:middle line:-1
我说的是边界用来布局很多UI元素

00:33:35.215 --> 00:33:38.018 align:middle line:-1
这意味着分隔符

00:33:38.418 --> 00:33:40.153 align:middle line:-1
系统附件

00:33:40.387 --> 00:33:43.557 align:middle line:-1
以及系统单元格样式中的标签

00:33:43.924 --> 00:33:45.492 align:middle line:-1
你在自己自定义表视图单元格中

00:33:45.559 --> 00:33:47.528 align:middle line:-1
放置的任何视图

00:33:47.594 --> 00:33:50.464 align:middle line:-2
如果将它们放置在边界之外
也会发挥作用

00:33:51.098 --> 00:33:54.001 align:middle line:-2
这意味着如果你调整了
表格视图的边缘

00:33:55.002 --> 00:33:57.905 align:middle line:-1
可以将所有这些元素一起移动

00:33:58.739 --> 00:34:01.808 align:middle line:-2
如果你有一个表格视图
里面有很多多行文本

00:33:58.739 --> 00:34:01.808 align:middle line:-2
如果你有一个表格视图
里面有很多多行文本

00:34:01.875 --> 00:34:05.412 align:middle line:-1
你需要调整表格视图的边距

00:34:05.479 --> 00:34:10.083 align:middle line:-2
使所有的元素对齐
同时还要考虑可读的宽度

00:34:10.684 --> 00:34:13.286 align:middle line:-1
为此表视图提供了一个API

00:34:13.353 --> 00:34:16.389 align:middle line:-2
称为cellLayoutMargins
FollowReadableWidth

00:34:16.790 --> 00:34:20.327 align:middle line:-2
当它为错误值时
表视图将使用它的正常系统边距

00:34:20.761 --> 00:34:24.063 align:middle line:-2
如果是真实值的话
那么所有的内容都将被嵌入

00:34:24.965 --> 00:34:29.136 align:middle line:-1
现在要注意的是 这个属性的默认值

00:34:29.203 --> 00:34:31.071 align:middle line:-1
在iOS 12中发生了变化

00:34:31.804 --> 00:34:36.844 align:middle line:-1
现在默认为错误值 它曾真实

00:34:37.744 --> 00:34:40.947 align:middle line:-2
这不会对你的app的行为
产生太大的影响

00:34:41.014 --> 00:34:42.149 align:middle line:-1
尤其是在手机上

00:34:42.516 --> 00:34:47.721 align:middle line:-1
我们的一般建议是不要使用默认值

00:34:47.788 --> 00:34:50.657 align:middle line:-2
当你知道有一个表视图将包含
许多有意义的多行文本时

00:34:50.724 --> 00:34:52.893 align:middle line:-1
将它设置为真实值

00:34:54.661 --> 00:34:57.431 align:middle line:-1
并且该属性也可从界面构建器中调整

00:34:57.497 --> 00:34:59.833 align:middle line:-1
并具有可读的宽度复选框

00:35:02.903 --> 00:35:07.341 align:middle line:-2
现在与表视图保持一致
但是从可读的宽度继续

00:35:08.275 --> 00:35:12.079 align:middle line:-2
关于它们如何使用安全区域
还有一些其他要了解的内容

00:35:12.412 --> 00:35:16.250 align:middle line:-1
即你的表视图单元格的内容视图

00:35:16.717 --> 00:35:20.354 align:middle line:-1
不会扩展到安全区域之外

00:35:21.622 --> 00:35:26.026 align:middle line:-2
但是默认情况下
UI表视图单元的背景

00:35:26.727 --> 00:35:29.796 align:middle line:-1
和选择背景视图确实超出了安全区域

00:35:31.064 --> 00:35:34.868 align:middle line:-2
所以如果你有需要在
自定义表格视图单元格中放置

00:35:34.935 --> 00:35:37.538 align:middle line:-2
那些要在安全区域外溢出到
屏幕边缘的内容的话

00:35:37.604 --> 00:35:41.441 align:middle line:-1
则可以在背景

00:35:41.508 --> 00:35:42.876 align:middle line:-1
或选定的背景视图中放置它

00:35:42.943 --> 00:35:44.845 align:middle line:-1
如果这些视图的语义有意义的话

00:35:45.345 --> 00:35:51.618 align:middle line:-2
或在UI表视图中有一个属性叫做
insetsContentViewsToSafeArea

00:35:52.352 --> 00:35:55.989 align:middle line:-2
默认情况下是真实值
但是你可以更改为错误值

00:35:56.056 --> 00:35:58.759 align:middle line:-1
以便使内容视图也扩展到边缘

00:36:00.494 --> 00:36:03.597 align:middle line:-1
这个属性也可以从界面构建器中配置

00:36:06.733 --> 00:36:08.535 align:middle line:-1
现在我们回到竖屏

00:36:08.602 --> 00:36:12.372 align:middle line:-2
在我们的app的主屏幕中
我们提到了

00:36:12.439 --> 00:36:14.608 align:middle line:-2
在包含拾取器视图前
从底部向上滑出的表单

00:36:15.542 --> 00:36:16.376 align:middle line:-1
现在

00:36:17.845 --> 00:36:23.684 align:middle line:-2
屏幕的安全区域意味着
我们必须调整

00:36:23.750 --> 00:36:28.922 align:middle line:-1
拾取器视图的布局在这个安全区域内

00:36:30.958 --> 00:36:35.195 align:middle line:-2
大多数的系统控件比如
UIPickerView和其他控件

00:36:35.262 --> 00:36:36.330 align:middle line:-1
可能还有你自己的控件

00:36:36.396 --> 00:36:40.901 align:middle line:-2
很多视图都没理由知道
关于安全区域的任何事情

00:36:40.968 --> 00:36:43.737 align:middle line:-2
因为目前还不清楚他们会如何反应
或者比如

00:36:43.804 --> 00:36:45.506 align:middle line:-1
在内部重新布局

00:36:46.440 --> 00:36:47.975 align:middle line:-1
我们有处理此类视图布局的

00:36:48.041 --> 00:36:50.511 align:middle line:-1
推荐技巧

00:36:50.577 --> 00:36:53.814 align:middle line:-1
即将它们放置在容器视图中

00:36:54.748 --> 00:36:56.817 align:middle line:-1
该容器视图的职责是

00:36:56.984 --> 00:37:02.956 align:middle line:-1
过分析安全区的嵌套

00:36:56.984 --> 00:37:02.956 align:middle line:-1
过分析安全区的嵌套

00:37:03.290 --> 00:37:06.026 align:middle line:-2
将其不知道内容的安全区
放置在安全区内

00:37:06.326 --> 00:37:12.399 align:middle line:-2
它还可以提供背景
这个背景可以延伸到安全区域之外

00:37:12.466 --> 00:37:15.903 align:middle line:-2
在这种情况下
让你的控件感觉与屏幕的边缘相连

00:37:18.305 --> 00:37:20.974 align:middle line:-1
我们要讨论的另一种技巧

00:37:21.041 --> 00:37:23.644 align:middle line:-2
是关于靠近屏幕边缘的
安全区域和定位元素

00:37:23.710 --> 00:37:30.717 align:middle line:-2
当你有一个控件或按钮时
在一个设备上

00:37:30.784 --> 00:37:34.087 align:middle line:-2
你可能要直接放置在安全区域上
以及在另一个设备上

00:37:34.154 --> 00:37:37.224 align:middle line:-2
其中安全区域嵌入设置为零
你可能需要一些填充

00:37:37.558 --> 00:37:39.426 align:middle line:-1
在设计中这样做的原因是

00:37:39.493 --> 00:37:43.564 align:middle line:-2
安全区域内嵌有时
会包含一些隐式填充

00:37:43.997 --> 00:37:47.501 align:middle line:-1
我想给你们提供一个单一的解决方案

00:37:47.901 --> 00:37:50.537 align:middle line:-1
可以同时适用于这两种情况

00:37:51.205 --> 00:37:52.439 align:middle line:-1
让我们引入一个图表

00:37:53.640 --> 00:37:56.143 align:middle line:-1
我将向你提供两个自动布局约束

00:37:56.376 --> 00:37:59.279 align:middle line:-2
这些约束将在这两种不同的情况下
产生这一结果

00:37:59.880 --> 00:38:01.348 align:middle line:-1
我们需要的第一个约束

00:37:59.880 --> 00:38:01.348 align:middle line:-1
我们需要的第一个约束

00:38:02.850 --> 00:38:06.453 align:middle line:-1
代表我们通常要添加的填充

00:38:06.720 --> 00:38:09.790 align:middle line:-2
这只是一个从超级视图底部
到我们控件底部

00:38:10.123 --> 00:38:11.859 align:middle line:-1
一个常量约束

00:38:12.259 --> 00:38:15.495 align:middle line:-2
但是在这种情况下
我们要使它不需要

00:38:15.562 --> 00:38:18.432 align:middle line:-2
以便当安全区域不设置为非零时
我们可以中断它

00:38:20.200 --> 00:38:23.070 align:middle line:-1
第二个约束是从控件底部到

00:38:23.403 --> 00:38:26.640 align:middle line:-1
安全区底部的不平等约束

00:38:27.107 --> 00:38:31.545 align:middle line:-1
这确保我们的控制始终在安全区域内

00:38:33.313 --> 00:38:37.084 align:middle line:-2
因此如果我将安全区域设置为非零
则你可以看到

00:38:37.150 --> 00:38:41.421 align:middle line:-2
不平等约束确保了
我们的内容未被修剪

00:38:42.022 --> 00:38:44.625 align:middle line:-1
同时仍然保留一些最小的填充

00:38:47.794 --> 00:38:53.600 align:middle line:-2
在此对话和先前的会谈中
我们已经讨论了许多

00:38:53.667 --> 00:38:54.735 align:middle line:-1
不同自适应API

00:38:55.135 --> 00:38:58.038 align:middle line:-1
布局边界有助于保持许多元素对齐

00:38:58.772 --> 00:39:02.509 align:middle line:-2
安全区域内嵌可以保护
你的视图不被修剪或遮挡

00:38:58.772 --> 00:39:02.509 align:middle line:-2
安全区域内嵌可以保护
你的视图不被修剪或遮挡

00:39:03.410 --> 00:39:07.181 align:middle line:-1
可读宽度可以保持文本的列舒适阅读

00:39:07.714 --> 00:39:10.284 align:middle line:-1
当你对app进行大型结构更改时

00:39:10.350 --> 00:39:13.520 align:middle line:-1
尺寸类将通知你

00:39:15.189 --> 00:39:21.795 align:middle line:-2
这些API用于在我们的框架中
实现更高级的组件

00:39:22.196 --> 00:39:26.834 align:middle line:-2
滚动视图 表格视图
容器视图控制器

00:39:27.034 --> 00:39:29.503 align:middle line:-2
我们今天谈论其他类型的东西
通过重新使用这些东西

00:39:29.570 --> 00:39:32.573 align:middle line:-1
以确保我们的高级组件

00:39:32.639 --> 00:39:37.044 align:middle line:-2
能够以最简单的方式
适应我们的所有设备

00:39:37.978 --> 00:39:40.581 align:middle line:-1
因此你可以根据这些自适应原语

00:39:40.647 --> 00:39:44.952 align:middle line:-1
来设计你的app

00:39:45.886 --> 00:39:47.387 align:middle line:-1
其好处是

00:39:47.454 --> 00:39:53.160 align:middle line:-2
你的代码不是针对特定设备进行
编码的 它们简单灵活的代码

00:39:53.360 --> 00:39:57.264 align:middle line:-2
它将保证你的app
对于我们的所有不同环境

00:39:57.331 --> 00:39:58.799 align:middle line:-1
将来证明都是好用的

00:40:00.467 --> 00:40:04.338 align:middle line:-2
若想获得更多信息
请看这些幻灯片和录音 在线获取

00:40:05.305 --> 00:40:06.406 align:middle line:-1
感谢你们的光临

00:40:06.473 --> 00:40:08.542 align:middle line:-1
真心希望你们享受这次会议
