WEBVTT

00:00:17.618 --> 00:00:22.122 align:middle line:0
（优化app资源
演讲227）

00:00:25.492 --> 00:00:28.495 align:middle line:-2
下午好
欢迎来到“优化app资源”

00:00:29.062 --> 00:00:31.765 align:middle line:-2
我叫Will
Cocoa框架团队的工程师

00:00:32.031 --> 00:00:35.102 align:middle line:-1
今天我和我的同事Patrick

00:00:35.169 --> 00:00:37.137 align:middle line:-1
会介绍一些优化你app中资源的

00:00:37.204 --> 00:00:39.306 align:middle line:-1
好办法

00:00:41.775 --> 00:00:43.043 align:middle line:-1
在当今这个时代

00:00:43.110 --> 00:00:46.413 align:middle line:-1
很多app和游戏会通过

00:00:46.480 --> 00:00:49.449 align:middle line:-2
在app中使用高保真度的插图
和其他资源

00:00:49.516 --> 00:00:50.384 align:middle line:-1
来获得好的用户体验

00:00:50.918 --> 00:00:51.752 align:middle line:-1
而通过这样做

00:00:52.085 --> 00:00:54.354 align:middle line:-1
它们可以吸引更多的用户

00:00:54.688 --> 00:00:56.290 align:middle line:-1
还具有互动性

00:00:56.924 --> 00:00:59.259 align:middle line:-1
我想让你们所有的app都像这样

00:00:59.593 --> 00:01:01.161 align:middle line:-1
这就是为什么我们今天来到这里

00:00:59.593 --> 00:01:01.161 align:middle line:-1
这就是为什么我们今天来到这里

00:01:01.695 --> 00:01:04.364 align:middle line:-2
我们要展示一些
关于资源目录的最佳实践

00:01:04.631 --> 00:01:05.966 align:middle line:-1
更重要的是

00:01:06.333 --> 00:01:09.269 align:middle line:-1
你要更好地将app中的资源部署给

00:01:09.336 --> 00:01:10.270 align:middle line:-1
你的用户

00:01:10.337 --> 00:01:13.073 align:middle line:-1
以及如何将其转换到整个用户体验上

00:01:15.442 --> 00:01:16.610 align:middle line:-1
在这个演讲中

00:01:17.377 --> 00:01:20.447 align:middle line:-1
我们会涉及到几个不同的方面

00:01:20.547 --> 00:01:24.151 align:middle line:-1
包括传统、设计、开发和部署工作流

00:01:24.985 --> 00:01:28.188 align:middle line:-1
但首先我想花点时间

00:01:28.255 --> 00:01:31.825 align:middle line:-1
来谈一下图像压缩

00:01:33.660 --> 00:01:34.628 align:middle line:-1
（压缩）

00:01:34.695 --> 00:01:37.764 align:middle line:-2
图像压缩是资源目录编辑器的
核心内容

00:01:39.166 --> 00:01:42.536 align:middle line:-1
也是资源目录编译管道的最后一步

00:01:43.036 --> 00:01:46.139 align:middle line:-1
而且还跟管道中出现的

00:01:46.206 --> 00:01:47.708 align:middle line:-1
其他优化有关

00:01:49.510 --> 00:01:51.245 align:middle line:-1
资源目录会

00:01:51.311 --> 00:01:55.315 align:middle line:-1
会提供一些默认压缩类型

00:01:55.849 --> 00:01:59.553 align:middle line:-1
而且默认会选择优化最好的压缩类型

00:01:59.620 --> 00:02:02.155 align:middle line:-1
来获取所给的图像或纹理

00:01:59.620 --> 00:02:02.155 align:middle line:-1
来获取所给的图像或纹理

00:02:03.524 --> 00:02:05.759 align:middle line:-1
这可能对绝大多数的项目来说足够了

00:02:06.326 --> 00:02:10.130 align:middle line:-2
不过了解一下
其中一些选项还是有用处的

00:02:10.631 --> 00:02:13.834 align:middle line:-1
更重要的是 要了解它们的取舍

00:02:13.901 --> 00:02:16.336 align:middle line:-1
以及对你项目所做的实现

00:02:17.037 --> 00:02:18.038 align:middle line:-1
（图像压缩）

00:02:18.438 --> 00:02:19.439 align:middle line:-1
（自动图像打包）

00:02:19.506 --> 00:02:23.143 align:middle line:-1
在我深入介绍图像压缩的内容之前

00:02:23.744 --> 00:02:28.081 align:middle line:-2
我想介绍一些
资源目录中的其他优化内容

00:02:28.549 --> 00:02:31.552 align:middle line:-2
它对于我们所有要进行的
压缩有非常多的实现

00:02:32.352 --> 00:02:34.321 align:middle line:-1
它叫做自动化图像打包

00:02:38.025 --> 00:02:41.028 align:middle line:-1
通常在注入资源目录前

00:02:41.662 --> 00:02:44.364 align:middle line:-1
将资源部署到你app中的一种方法

00:02:44.431 --> 00:02:46.333 align:middle line:-1
将一些图像文件丢到

00:02:46.400 --> 00:02:48.268 align:middle line:-1
你项目的app捆绑里

00:02:49.469 --> 00:02:52.372 align:middle line:-2
你需要注意的是
这样做有很多的缺点

00:02:52.439 --> 00:02:55.309 align:middle line:-1
还有取舍

00:02:56.109 --> 00:03:00.214 align:middle line:-1
有两个缺点是你需要注意的

00:02:56.109 --> 00:03:00.214 align:middle line:-1
有两个缺点是你需要注意的

00:03:00.948 --> 00:03:04.585 align:middle line:-1
首先是伴随而来的

00:03:04.651 --> 00:03:05.786 align:middle line:-1
额外存储空间

00:03:06.954 --> 00:03:09.389 align:middle line:-1
传统的图像容器格式

00:03:10.190 --> 00:03:14.061 align:middle line:-2
会使用额外的空间
来存储元数据

00:03:14.795 --> 00:03:16.563 align:middle line:-1
还有跟图像对应的其他属性

00:03:17.698 --> 00:03:20.200 align:middle line:-1
如果你的app有很多的资源

00:03:20.567 --> 00:03:22.569 align:middle line:-1
而且它们有相似的元数据

00:03:23.203 --> 00:03:27.474 align:middle line:-2
那么相同的信息
就会无意义地在磁盘上反复复制

00:03:28.876 --> 00:03:32.513 align:middle line:-1
另外 如果你的绝大多数资源很小

00:03:33.280 --> 00:03:36.383 align:middle line:-2
你也不能最大程度
发挥图像压缩的优势

00:03:38.252 --> 00:03:42.289 align:middle line:-1
另一个缺点主要是你要花费的

00:03:42.356 --> 00:03:43.590 align:middle line:-1
组织上的开销

00:03:44.491 --> 00:03:47.561 align:middle line:-2
处理如此多零散的图像文件
是很困难的

00:03:48.629 --> 00:03:52.599 align:middle line:-1
而且将它们跟NSImage

00:03:52.666 --> 00:03:54.535 align:middle line:-2
和UIImage类的API
进行交互就更困难了

00:03:55.869 --> 00:03:57.104 align:middle line:-1
最后还有一点就是

00:03:57.171 --> 00:04:00.641 align:middle line:-1
你还需要处理图像格式的不一致性

00:03:57.171 --> 00:04:00.641 align:middle line:-1
你还需要处理图像格式的不一致性

00:04:00.707 --> 00:04:03.710 align:middle line:-1
还有其他的图像属性

00:04:04.545 --> 00:04:05.546 align:middle line:-1
例如

00:04:05.612 --> 00:04:08.415 align:middle line:-2
在你的插图集合中
你可能有一些图像

00:04:08.482 --> 00:04:11.785 align:middle line:-2
但其中有些图像支持透明化
而另一些则不支持

00:04:13.020 --> 00:04:17.024 align:middle line:-2
同样的问题也会出现在
像是色域和颜色范围这些属性上

00:04:19.526 --> 00:04:21.928 align:middle line:-1
由于目录可以通过

00:04:22.362 --> 00:04:26.266 align:middle line:-2
识别共享相似色域配置的图像
来解决这些问题

00:04:26.767 --> 00:04:30.404 align:middle line:-2
并且将其分成一组
来生成更大的图像地图集

00:04:31.271 --> 00:04:35.142 align:middle line:-2
这样你就不需要为你所有的图像插图
重复存储相同的元数据了

00:04:35.209 --> 00:04:36.476 align:middle line:-1
重复存储相同的元数据了

00:04:37.277 --> 00:04:38.846 align:middle line:-1
你还可以从所有的图像压缩中

00:04:39.279 --> 00:04:41.315 align:middle line:-1
获得更多的收益

00:04:42.816 --> 00:04:45.919 align:middle line:-1
让我们来看个现实世界的例子吧

00:04:48.689 --> 00:04:52.426 align:middle line:-1
在屏幕的左边有一些图像插图

00:04:53.060 --> 00:04:54.428 align:middle line:-1
你可能看起来很熟悉

00:04:55.095 --> 00:04:56.697 align:middle line:-1
因为它们是直接从

00:04:56.763 --> 00:04:57.998 align:middle line:-1
我们的一个平台取出来的

00:04:59.366 --> 00:05:01.802 align:middle line:-1
这些图像插图都非常小

00:04:59.366 --> 00:05:01.802 align:middle line:-1
这些图像插图都非常小

00:05:02.469 --> 00:05:06.840 align:middle line:-2
但加起来的总大小
还是超过了50KB

00:05:10.344 --> 00:05:11.712 align:middle line:-1
通过这个自动化图像打包

00:05:12.579 --> 00:05:15.782 align:middle line:-1
资源目录可以识别出这些图像插图

00:05:15.849 --> 00:05:17.851 align:middle line:-1
是不是共享了相类似的色域

00:05:18.652 --> 00:05:23.524 align:middle line:-2
如果是的话 它就会集合这些图像
生成单个更大的图像地图集

00:05:25.025 --> 00:05:25.859 align:middle line:-1
这样的话…

00:05:27.060 --> 00:05:32.466 align:middle line:-2
总的文件大小
可以减少到原来的20%

00:05:33.233 --> 00:05:36.603 align:middle line:-2
这样节省了80%的文件大小
是很客观的

00:05:38.071 --> 00:05:42.109 align:middle line:-2
还有需要注意的是
这些优化的比例要得当

00:05:42.543 --> 00:05:46.213 align:middle line:-1
你app中的资源数量越多

00:05:46.780 --> 00:05:49.149 align:middle line:-1
你通过这个优化得到的收益就越多

00:05:52.686 --> 00:05:54.354 align:middle line:-1
这就是关于自动化图像打包的内容

00:05:55.689 --> 00:05:56.523 align:middle line:-1
（有损压缩）

00:05:56.590 --> 00:05:59.059 align:middle line:-1
现在让我们介绍下有损压缩

00:06:01.395 --> 00:06:06.099 align:middle line:-1
有损压缩就是要损失少量视觉保真度

00:06:06.567 --> 00:06:10.370 align:middle line:-1
从而在压缩时省出更多的空间

00:06:11.305 --> 00:06:12.940 align:middle line:-1
所以知道你app

00:06:13.507 --> 00:06:15.409 align:middle line:-1
有损压缩最多的场景

00:06:15.475 --> 00:06:17.911 align:middle line:-1
很重要

00:06:19.613 --> 00:06:22.916 align:middle line:-1
我通常可以推荐你

00:06:23.617 --> 00:06:26.386 align:middle line:-2
在短时间在屏幕显示的图像上
使用有损压缩

00:06:27.788 --> 00:06:29.623 align:middle line:-1
例如 就是出现在

00:06:29.690 --> 00:06:31.658 align:middle line:-1
你app启动画面中的图像

00:06:32.259 --> 00:06:34.228 align:middle line:-1
或是过场动画和特效

00:06:36.163 --> 00:06:38.332 align:middle line:-1
我不想只是站在这

00:06:38.398 --> 00:06:39.933 align:middle line:-1
介绍有损压缩

00:06:40.467 --> 00:06:41.935 align:middle line:-1
我想介绍资源目录中的

00:06:42.002 --> 00:06:43.170 align:middle line:-1
一种新的有损压缩

00:06:44.137 --> 00:06:48.408 align:middle line:-2
所以我非常高兴地宣布
我们今年拓展了

00:06:48.475 --> 00:06:52.412 align:middle line:-2
资源目录中
高效图像文件格式的支持

00:06:52.479 --> 00:06:54.481 align:middle line:-1
（高效图像文件格式）

00:06:54.548 --> 00:06:57.017 align:middle line:-1
如果你了解过我们去年发布的内容

00:06:57.351 --> 00:07:00.854 align:middle line:-1
就会知道我们在所有平台上

00:06:57.351 --> 00:07:00.854 align:middle line:-1
就会知道我们在所有平台上

00:07:01.154 --> 00:07:05.425 align:middle line:-2
还有资源目录编辑器中
引入了高效文件图像格式

00:07:06.627 --> 00:07:08.962 align:middle line:-1
今年我们会更进一步

00:07:09.329 --> 00:07:11.865 align:middle line:-1
我们会将高效图像文件格式

00:07:11.932 --> 00:07:14.735 align:middle line:-2
与资源目录的
默认有损压缩整合在一起

00:07:21.909 --> 00:07:22.743 align:middle line:-1
谢谢你们

00:07:23.844 --> 00:07:26.346 align:middle line:-1
让我们来看看高效图像文件格式

00:07:26.413 --> 00:07:29.149 align:middle line:-1
会给我们带来哪些收益吧

00:07:30.851 --> 00:07:32.953 align:middle line:-1
很重要的一点就是 它可以提供

00:07:33.020 --> 00:07:34.788 align:middle line:-1
更好的压缩比

00:07:35.422 --> 00:07:37.925 align:middle line:-1
对比我们已经提供的

00:07:37.991 --> 00:07:39.259 align:middle line:-1
其他有损压缩来说

00:07:40.060 --> 00:07:41.995 align:middle line:-1
其中你可能很熟悉的一种格式

00:07:42.863 --> 00:07:43.764 align:middle line:-1
就是JPEG

00:07:45.299 --> 00:07:46.400 align:middle line:-1
该高效图像文件格式

00:07:46.466 --> 00:07:49.369 align:middle line:-1
有很多优点

00:07:49.670 --> 00:07:52.306 align:middle line:-1
像是对于框外透明度的支持

00:07:53.907 --> 00:07:54.908 align:middle line:-1
还有更重要的是

00:07:55.375 --> 00:07:58.078 align:middle line:-1
资源目录

00:07:58.145 --> 00:08:01.915 align:middle line:-1
可以自动地将其他格式

00:07:58.145 --> 00:08:01.915 align:middle line:-1
可以自动地将其他格式

00:08:02.316 --> 00:08:04.351 align:middle line:-1
转换为高效图像文件格式

00:08:05.118 --> 00:08:08.288 align:middle line:-2
这就意味着
只要你的图像资源是被标为

00:08:08.355 --> 00:08:09.723 align:middle line:-1
这种有损压缩格式的

00:08:09.790 --> 00:08:14.561 align:middle line:-1
你这边就不需要再做额外的操作了

00:08:14.628 --> 00:08:18.899 align:middle line:-2
这一切都会在资源目录
编译管道中自动进行

00:08:20.834 --> 00:08:24.505 align:middle line:0
有关高效图像文件格式的
更多深入内容

00:08:24.571 --> 00:08:27.474 align:middle line:0
我建议你们去参考下去年的演讲

00:08:29.810 --> 00:08:31.712 align:middle line:-1
（无损压缩）

00:08:31.778 --> 00:08:34.515 align:middle line:-1
现在让我们把目光转移到无损压缩上

00:08:35.682 --> 00:08:38.552 align:middle line:-1
无损压缩是默认的压缩类型

00:08:38.919 --> 00:08:42.022 align:middle line:-1
它被用于绝大多数的app资源上

00:08:43.190 --> 00:08:45.459 align:middle line:-1
因此 知道你应该如何

00:08:45.526 --> 00:08:48.362 align:middle line:-1
充分利用有损压缩

00:08:51.665 --> 00:08:55.869 align:middle line:-1
通常 图像插图可以根据其色域配置

00:08:55.936 --> 00:08:57.905 align:middle line:-1
分成两大类

00:08:58.972 --> 00:09:03.443 align:middle line:-2
并且它们从无损压缩中
所获得的收益是不同的

00:08:58.972 --> 00:09:03.443 align:middle line:-2
并且它们从无损压缩中
所获得的收益是不同的

00:09:04.311 --> 00:09:05.546 align:middle line:-1
让我们来看一下

00:09:08.215 --> 00:09:12.619 align:middle line:-1
第一类图像通常指的是简单插图

00:09:13.720 --> 00:09:15.556 align:middle line:-1
它们被这么叫

00:09:16.490 --> 00:09:18.892 align:middle line:-1
是因为它们有相对较窄的色域

00:09:19.293 --> 00:09:22.296 align:middle line:-1
以及相对少的离散颜色值

00:09:23.630 --> 00:09:26.099 align:middle line:-1
这是由于其简单化的设计

00:09:26.433 --> 00:09:29.169 align:middle line:-1
它们最好的代表就是app图标

00:09:31.338 --> 00:09:34.308 align:middle line:-1
另一方面 另一种图像插图

00:09:34.374 --> 00:09:36.410 align:middle line:-1
被称为复杂插图

00:09:37.945 --> 00:09:41.448 align:middle line:-1
两种图像资源从无损压缩中

00:09:41.515 --> 00:09:42.783 align:middle line:-1
获得的收益是不同的

00:09:43.283 --> 00:09:45.819 align:middle line:-1
通常来说 所有的无损压缩

00:09:45.886 --> 00:09:49.723 align:middle line:-2
在这两种图像上表现得都很好
因为已经针对其优化过了

00:09:51.058 --> 00:09:55.462 align:middle line:-2
我们意识到这两种图像
对于很多项目来说都很重要

00:09:56.296 --> 00:09:58.665 align:middle line:-1
而且我想要你们所有的资源

00:09:58.932 --> 00:10:01.935 align:middle line:-1
都尽可能地通过无损压缩进行部署

00:09:58.932 --> 00:10:01.935 align:middle line:-1
都尽可能地通过无损压缩进行部署

00:10:03.203 --> 00:10:05.205 align:middle line:-1
我非常高兴地宣布今年

00:10:05.706 --> 00:10:09.676 align:middle line:-2
我们会在资源目录中
引入一种全新的无损压缩

00:10:11.378 --> 00:10:14.548 align:middle line:-1
它叫做Apple深度像素图像压缩

00:10:22.222 --> 00:10:23.156 align:middle line:-1
再次感谢大家

00:10:24.825 --> 00:10:28.996 align:middle line:-1
Apple深度像素图像压缩是一种

00:10:29.062 --> 00:10:31.698 align:middle line:-1
适应于图像色域的灵活压缩格式

00:10:32.599 --> 00:10:33.433 align:middle line:-1
这就意味着

00:10:33.500 --> 00:10:36.103 align:middle line:-1
它可以根据图像插图

00:10:36.436 --> 00:10:38.405 align:middle line:-1
色域特征来选择

00:10:38.805 --> 00:10:41.041 align:middle line:-1
最优的压缩算法

00:10:42.509 --> 00:10:47.381 align:middle line:-2
今年 我们不仅将这个
新的压缩格式带给了你们

00:10:47.748 --> 00:10:50.284 align:middle line:-1
还会使其在我们所有的平台上

00:10:50.350 --> 00:10:51.752 align:middle line:-1
还有原生app上可用

00:10:53.453 --> 00:10:54.454 align:middle line:-1
通过这种压缩格式

00:10:54.521 --> 00:10:58.325 align:middle line:-1
我们观察到 我们所有的项目

00:10:58.392 --> 00:11:00.894 align:middle line:-1
减少了平均20%的大小

00:10:58.392 --> 00:11:00.894 align:middle line:-1
减少了平均20%的大小

00:11:02.162 --> 00:11:03.530 align:middle line:-1
这是相当可观的

00:11:09.002 --> 00:11:11.972 align:middle line:-1
现在 让我们看看一些数字

00:11:15.108 --> 00:11:19.580 align:middle line:-2
这是一张图表
它显示了我们部分平台的

00:11:20.047 --> 00:11:22.516 align:middle line:-1
所有资源目录的总体规模

00:11:24.017 --> 00:11:26.820 align:middle line:-1
很明显 我们能够在所有平台上看到

00:11:26.887 --> 00:11:31.024 align:middle line:-1
最多20%的尺寸缩减

00:11:35.963 --> 00:11:40.467 align:middle line:-2
说到无损压缩
压缩比只是其中的一部分

00:11:41.468 --> 00:11:43.303 align:middle line:-1
由于你app中的大部分插图

00:11:43.370 --> 00:11:46.607 align:middle line:-1
用的都是无损压缩

00:11:47.107 --> 00:11:49.643 align:middle line:-1
所以解码时间也很重要

00:11:50.711 --> 00:11:52.546 align:middle line:-1
Apple深度像素图像压缩

00:11:53.113 --> 00:11:57.618 align:middle line:-1
也能够缩减20%的解码时间

00:12:01.088 --> 00:12:02.756 align:middle line:-1
（部署目标与app精简）

00:12:02.823 --> 00:12:04.758 align:middle line:-1
这就是关于无损压缩的内容

00:12:05.993 --> 00:12:07.394 align:middle line:-1
现在我想换个话题

00:12:07.761 --> 00:12:12.666 align:middle line:-1
谈谈两个独立但很相关的主题

00:12:13.433 --> 00:12:16.904 align:middle line:-2
它们对我刚才谈到
所有的优化和压缩

00:12:16.970 --> 00:12:18.105 align:middle line:-1
有很大的影响

00:12:19.740 --> 00:12:21.975 align:middle line:-1
这就是部署和app精简

00:12:25.612 --> 00:12:28.015 align:middle line:-1
下面是有关app精简的介绍

00:12:28.649 --> 00:12:31.718 align:middle line:-2
app精简是发生在
App Store中的过程

00:12:31.785 --> 00:12:33.954 align:middle line:-1
它会根据所有设备模型

00:12:34.221 --> 00:12:35.856 align:middle line:-1
生成项目的所有变量

00:12:36.256 --> 00:12:39.259 align:middle line:-1
还有部署目标的版本

00:12:41.295 --> 00:12:44.865 align:middle line:-1
app精简的好处之一就是

00:12:45.666 --> 00:12:47.935 align:middle line:-1
可以让你app的部署目标版本

00:12:48.335 --> 00:12:51.405 align:middle line:-1
低于你目标平台

00:12:51.471 --> 00:12:53.040 align:middle line:-1
的最新版本

00:12:53.807 --> 00:12:56.710 align:middle line:-1
这样你可以吸引更多用户

00:12:58.579 --> 00:13:01.415 align:middle line:-1
app精简可以

00:12:58.579 --> 00:13:01.415 align:middle line:-1
app精简可以

00:13:01.782 --> 00:13:03.951 align:middle line:-1
生成你项目的所有变量

00:13:04.284 --> 00:13:08.822 align:middle line:-2
并且在你所有的用户群中
部署一个最优变量

00:13:10.757 --> 00:13:13.827 align:middle line:-1
如果你今年使用Xcode 10

00:13:13.894 --> 00:13:16.263 align:middle line:-2
和iOS 12系列的
SDK构建项目的话

00:13:16.830 --> 00:13:19.166 align:middle line:-1
你的项目会自动得益于

00:13:19.233 --> 00:13:20.400 align:middle line:-1
我刚才谈到的

00:13:20.534 --> 00:13:22.803 align:middle line:-1
所有的优化和新的压缩方式

00:13:24.271 --> 00:13:25.105 align:middle line:-1
然而

00:13:25.639 --> 00:13:29.109 align:middle line:-1
如果你将你的app部署回较早版本

00:13:30.777 --> 00:13:34.414 align:middle line:-1
新的优化将不会被保留

00:13:35.816 --> 00:13:37.317 align:middle line:-1
这是由于app精简

00:13:37.618 --> 00:13:39.853 align:middle line:-1
必须生成与目标平台的

00:13:39.920 --> 00:13:42.489 align:middle line:-1
早期版本更兼容的版本

00:13:44.758 --> 00:13:46.026 align:middle line:-1
这不是很理想

00:13:46.793 --> 00:13:49.563 align:middle line:-2
更重要的是
我们真的希望你所有的资源

00:13:49.630 --> 00:13:52.266 align:middle line:-1
都以最优化的方式进行部署

00:13:53.300 --> 00:13:54.935 align:middle line:-1
我很高兴地宣布今年

00:13:55.002 --> 00:13:58.305 align:middle line:-1
我们将要推出新版本的app精简

00:13:58.572 --> 00:13:59.973 align:middle line:-1
它叫做操作系统变量精简

00:14:02.409 --> 00:14:03.744 align:middle line:-1
通过操作系统变量精简

00:14:05.746 --> 00:14:07.981 align:middle line:-1
你的app仍然可以

00:14:08.749 --> 00:14:11.652 align:middle line:-2
面向你的目标平台上
早期版本的app

00:14:12.252 --> 00:14:15.455 align:middle line:-2
在这里就是
从iOS 9一直到iOS 11

00:14:17.224 --> 00:14:19.826 align:middle line:-2
对于那些运行
在最新版本iOS的app

00:14:20.594 --> 00:14:24.231 align:middle line:-2
操作系统变量精简能够在你的项目里
生成一个特殊变量

00:14:24.565 --> 00:14:27.634 align:middle line:-2
这个变量具有所有的
最新优化和压缩类型

00:14:28.702 --> 00:14:33.073 align:middle line:-2
这样 每个人都可以
得到你的项目的最有效的版本

00:14:33.140 --> 00:14:35.442 align:middle line:-1
每个人就都满意了

00:14:42.816 --> 00:14:43.817 align:middle line:-1
（app精简的输出）

00:14:43.884 --> 00:14:46.119 align:middle line:-2
这就是app精简
与向后部署的内容

00:14:47.454 --> 00:14:49.389 align:middle line:-1
现在我想通过一个例子

00:14:49.456 --> 00:14:53.460 align:middle line:-2
说明该如何在Xcode本地环境中
运用相同的app精简

00:14:53.527 --> 00:14:55.128 align:middle line:-1
专家工作流

00:14:56.763 --> 00:14:58.432 align:middle line:-1
这是个很简单的过程

00:14:59.132 --> 00:15:02.736 align:middle line:-1
你只需要点击Xcode的归档按钮

00:14:59.132 --> 00:15:02.736 align:middle line:-1
你只需要点击Xcode的归档按钮

00:15:04.071 --> 00:15:08.008 align:middle line:-2
这样就会告诉Xcode
生成你项目中的所有变量

00:15:10.344 --> 00:15:14.481 align:middle line:-2
在这些完成之后
你只需要点击组织者按钮

00:15:14.848 --> 00:15:17.885 align:middle line:-2
就可以打开一个
显示了你项目中生成的

00:15:17.951 --> 00:15:19.419 align:middle line:-1
所有变量的窗口

00:15:22.189 --> 00:15:25.225 align:middle line:-1
这个是乐队项目的窗口

00:15:25.292 --> 00:15:27.628 align:middle line:-1
我们可以用它来演练一下

00:15:29.162 --> 00:15:33.800 align:middle line:-2
首先Xcode会让你
选择一种分发的方法

00:15:34.668 --> 00:15:37.304 align:middle line:-2
你可以用这个方法
分发刚刚生成的所有变量

00:15:38.539 --> 00:15:42.976 align:middle line:-2
为了达到这个演练的目的
你需要选择Ad Hoc分发

00:15:46.313 --> 00:15:50.150 align:middle line:-2
在接下来出现窗口的
app精简字段中

00:15:51.151 --> 00:15:52.052 align:middle line:-1
选择

00:15:53.320 --> 00:15:54.922 align:middle line:-1
所有可兼容的设备变量

00:15:56.156 --> 00:16:00.460 align:middle line:-1
这会告诉Xcode输出所有

00:15:56.156 --> 00:16:00.460 align:middle line:-1
这会告诉Xcode输出所有

00:16:01.028 --> 00:16:03.530 align:middle line:-1
指向所有支持设备类型的变量

00:16:06.466 --> 00:16:10.370 align:middle line:-2
在完成之后
Xcode可以同步一个

00:16:10.871 --> 00:16:13.440 align:middle line:-1
总结了所有刚刚生成的变量的报告

00:16:14.474 --> 00:16:17.744 align:middle line:-2
你可以从报告中
提取出几个关键的数据点

00:16:17.811 --> 00:16:20.581 align:middle line:-1
来帮助你更好地理解项目的部署

00:16:21.114 --> 00:16:23.517 align:middle line:-1
并且帮助回答一些关键问题

00:16:23.817 --> 00:16:27.020 align:middle line:-2
比如“我的报告生成了
多少个变量？”

00:16:27.754 --> 00:16:29.523 align:middle line:-1
“它们的大小如何呢？”

00:16:30.257 --> 00:16:32.993 align:middle line:-1
“对于某个变量还有没有优化

00:16:33.060 --> 00:16:35.295 align:middle line:-1
和调整的空间呢？”

00:16:37.898 --> 00:16:40.400 align:middle line:-1
其实车库项目生成的半数变量

00:16:40.467 --> 00:16:43.003 align:middle line:-1
是其刚输出的

00:16:43.904 --> 00:16:45.205 align:middle line:-1
让我们来看一下

00:16:47.508 --> 00:16:48.842 align:middle line:-1
在这个表中

00:16:50.711 --> 00:16:51.945 align:middle line:-1
你们可以看到

00:16:52.212 --> 00:16:56.617 align:middle line:-2
所有为一个选定设备模型集
所生成的变量大小

00:16:58.752 --> 00:17:01.555 align:middle line:-1
这是为iOS11

00:16:58.752 --> 00:17:01.555 align:middle line:-1
这是为iOS11

00:17:01.622 --> 00:17:03.624 align:middle line:-1
以及更早版本的变量所生成的大小

00:17:05.092 --> 00:17:08.295 align:middle line:-1
因为乐队是个很大的项目

00:17:08.362 --> 00:17:10.464 align:middle line:-1
它有着数以千计的图像插图

00:17:11.064 --> 00:17:13.066 align:middle line:-1
所生成变量的大小

00:17:13.567 --> 00:17:16.502 align:middle line:-1
从90MB到超过100MB

00:17:19.506 --> 00:17:20.574 align:middle line:-1
这些是iOS 12中

00:17:21.175 --> 00:17:22.476 align:middle line:-1
变量的数字

00:17:23.977 --> 00:17:26.946 align:middle line:-1
从这个图标中 可以立竿见影地看到

00:17:27.146 --> 00:17:31.985 align:middle line:-2
我们节省了10%到20%的
文件大小

00:17:33.620 --> 00:17:35.822 align:middle line:-2
你可能现在看这个数字
会感到有些熟悉

00:17:36.456 --> 00:17:37.691 align:middle line:-1
所有这些优化

00:17:38.125 --> 00:17:41.762 align:middle line:-1
都是我刚才介绍过的优化和压缩方法

00:17:46.366 --> 00:17:47.835 align:middle line:-1
这就是关于图像压缩的内容

00:17:48.836 --> 00:17:51.038 align:middle line:-1
我想让我的同事Patrick

00:17:51.104 --> 00:17:54.942 align:middle line:-2
来介绍下有关你app资源的
设计和生产的内容

00:17:59.079 --> 00:18:00.013 align:middle line:-1
谢谢 Will

00:17:59.079 --> 00:18:00.013 align:middle line:-1
谢谢 Will

00:18:02.482 --> 00:18:05.319 align:middle line:-2
这很棒
你刚刚了解到一些很不错的方法

00:18:05.385 --> 00:18:09.857 align:middle line:-2
你可以用这些方法在Xcode的
资源目录中改进你的资源

00:18:10.791 --> 00:18:13.193 align:middle line:-1
我要介绍一些

00:18:13.260 --> 00:18:15.429 align:middle line:-1
你可以通过资源目录

00:18:15.495 --> 00:18:18.832 align:middle line:-1
来优化你app中资源的方法

00:18:19.566 --> 00:18:23.237 align:middle line:-1
我想从设计和生产开始说

00:18:23.303 --> 00:18:25.472 align:middle line:-1
因为这是项目开始的地方

00:18:25.539 --> 00:18:27.441 align:middle line:-1
（设计和生产）

00:18:28.308 --> 00:18:30.744 align:middle line:-1
正如你所知 资源是来自于很多工具

00:18:30.811 --> 00:18:33.480 align:middle line:-2
很多不同的工作流
以及很多不同的资源的

00:18:33.714 --> 00:18:34.848 align:middle line:-1
但它们有一个共同点

00:18:34.915 --> 00:18:37.384 align:middle line:-1
它们终究在某种程度上是来自于人的

00:18:38.185 --> 00:18:40.087 align:middle line:-1
而且它组织良好

00:18:40.988 --> 00:18:42.856 align:middle line:-1
以便理解那些资源

00:18:42.923 --> 00:18:45.859 align:middle line:-1
进入你软件工作流的过程

00:18:45.926 --> 00:18:47.361 align:middle line:-1
而且要留意那些

00:18:47.427 --> 00:18:51.064 align:middle line:-2
在你app的整体效率中
占很大比重的细节

00:18:52.833 --> 00:18:56.837 align:middle line:-1
首先我想介绍的主题就是色彩管理

00:18:56.904 --> 00:18:59.506 align:middle line:-1
它总是被忽略 但是却十分重要

00:19:01.208 --> 00:19:06.480 align:middle line:-2
图像资源在磁盘上就是
一堆无聊的字节 对吧？

00:19:06.547 --> 00:19:10.184 align:middle line:-2
在你加上颜色之前
它什么意义都没有

00:19:10.250 --> 00:19:11.118 align:middle line:-1
那么它是如何有颜色的呢？

00:19:11.185 --> 00:19:13.053 align:middle line:-1
系统是怎么知道

00:19:13.120 --> 00:19:14.421 align:middle line:-1
那些字节上的数字是什么意思？

00:19:14.488 --> 00:19:16.623 align:middle line:-1
答案就是色彩配置文件

00:19:17.024 --> 00:19:21.228 align:middle line:-1
该文件会给每种颜色一个值

00:19:21.295 --> 00:19:23.030 align:middle line:-1
还有一个绝对比色分析值

00:19:23.096 --> 00:19:25.165 align:middle line:-2
它会告诉系统
它应该看起来是什么样的

00:19:25.799 --> 00:19:26.900 align:middle line:-1
我想要强调的是

00:19:26.967 --> 00:19:29.169 align:middle line:-1
维护你资源中的色彩配置文件

00:19:29.236 --> 00:19:31.138 align:middle line:-1
真的很重要

00:19:31.438 --> 00:19:35.976 align:middle line:-2
它们是保证资源如设计者
原本所想那样被送达

00:19:36.376 --> 00:19:38.579 align:middle line:-1
的元数据的重要组成部分

00:19:38.645 --> 00:19:42.082 align:middle line:-2
不要因为你觉得
它们只是额外的元数据

00:19:42.149 --> 00:19:43.951 align:middle line:-1
就将那些配置文件丢掉

00:19:44.017 --> 00:19:45.819 align:middle line:-1
就当是占去一堆负载

00:19:45.886 --> 00:19:48.188 align:middle line:-1
这些是进入你项目中的资源

00:19:48.288 --> 00:19:51.225 align:middle line:-2
让工具来操心
关于部署中的优化问题吧

00:19:53.594 --> 00:19:56.263 align:middle line:-1
为什么这个色彩配置文件很重要呢？

00:19:56.330 --> 00:19:59.900 align:middle line:-1
因为我们的设备有不同特征

00:20:00.200 --> 00:20:01.535 align:middle line:-1
不同大小的显示屏

00:20:01.602 --> 00:20:04.338 align:middle line:-2
所以就要有某些东西
保证你资源的实际颜色

00:20:04.404 --> 00:20:07.508 align:middle line:-2
会匹配合适
在这些不同的显示屏上

00:20:07.574 --> 00:20:08.809 align:middle line:-1
看起来及缩放时比较得当

00:20:08.876 --> 00:20:11.278 align:middle line:-1
这就是色彩管理的职责

00:20:11.845 --> 00:20:13.647 align:middle line:-1
这是个计算的过程

00:20:14.081 --> 00:20:17.618 align:middle line:-2
它可以由CPU完成
有时候是在GPU上

00:20:17.684 --> 00:20:18.819 align:middle line:-1
不过它的计算量不小

00:20:20.053 --> 00:20:21.088 align:middle line:-1
现在…

00:20:21.154 --> 00:20:22.823 align:middle line:-1
资源目录就会发挥作用了

00:20:22.923 --> 00:20:25.158 align:middle line:-1
因为在编译过程

00:20:25.225 --> 00:20:26.793 align:middle line:-1
的构建时间

00:20:27.060 --> 00:20:29.396 align:middle line:-1
它们会为你进行颜色匹配

00:20:29.830 --> 00:20:32.432 align:middle line:-1
这真的很棒 因为计算根本

00:20:32.499 --> 00:20:35.102 align:middle line:-1
不必在设备上进行

00:20:35.802 --> 00:20:38.071 align:middle line:-1
而且你的资源在设备上已经准备好了

00:20:38.138 --> 00:20:38.972 align:middle line:-1
准备好加载

00:20:39.039 --> 00:20:41.308 align:middle line:-1
准备好被显示 不会有任何的麻烦

00:20:42.109 --> 00:20:42.943 align:middle line:-1
还有意外收获就是

00:20:43.010 --> 00:20:46.280 align:middle line:-2
这个多出来的在构造时间
对色彩管理进行的处理

00:20:46.346 --> 00:20:48.115 align:middle line:-1
消除了你原来

00:20:48.182 --> 00:20:50.184 align:middle line:-1
可能要去掉的配置文件负载

00:20:50.250 --> 00:20:55.122 align:middle line:-2
并且将它替换成
一种非常高效的方法来注解

00:20:55.189 --> 00:20:56.823 align:middle line:-2
我们所拥有的颜色空间
以及磁盘上的像素

00:20:58.659 --> 00:21:00.093 align:middle line:-1
这就是色彩管理的内容

00:20:58.659 --> 00:21:00.093 align:middle line:-1
这就是色彩管理的内容

00:21:00.794 --> 00:21:04.031 align:middle line:-2
我想介绍一个相关的主题
就是工作空间

00:21:04.097 --> 00:21:05.165 align:middle line:-1
（工作空间）

00:21:05.232 --> 00:21:08.302 align:middle line:-1
这里的工作空间 我指的是

00:21:08.368 --> 00:21:10.671 align:middle line:-1
这些资源最开始起源的环境

00:21:10.737 --> 00:21:13.574 align:middle line:-1
这可能是设计者 或是工程师

00:21:13.640 --> 00:21:15.542 align:middle line:-1
在完成这些素材

00:21:15.776 --> 00:21:17.311 align:middle line:-1
你在设计工具中进行工作

00:21:17.377 --> 00:21:18.679 align:middle line:-1
你在创造内容

00:21:18.979 --> 00:21:22.950 align:middle line:-2
在这些场景中对你项目中
所有的设计文件

00:21:23.016 --> 00:21:25.319 align:middle line:-1
使用一致的色彩设定非常重要

00:21:25.586 --> 00:21:27.254 align:middle line:-1
这是个不错的实践方法

00:21:27.321 --> 00:21:29.756 align:middle line:-1
也有着技术层面的好处

00:21:29.823 --> 00:21:35.062 align:middle line:-1
因为它可以保证你app

00:21:35.128 --> 00:21:37.931 align:middle line:-1
管理的一致性

00:21:38.699 --> 00:21:42.402 align:middle line:-1
有两种被谈得最多

00:21:42.469 --> 00:21:45.873 align:middle line:-2
也是最推荐用来创建
工作设计文件的格式

00:21:45.939 --> 00:21:47.508 align:middle line:-1
8位sRGB

00:21:47.908 --> 00:21:50.344 align:middle line:-1
是目前最常见 最受欢迎的选择

00:21:50.410 --> 00:21:53.280 align:middle line:-1
它对于我们所有的设备

00:21:53.680 --> 00:21:55.616 align:middle line:-1
和你的内容类型有着最广泛的适用性

00:21:56.149 --> 00:21:59.152 align:middle line:-1
但是如果你在制作重要的资源

00:21:59.319 --> 00:22:01.255 align:middle line:-1
比如像是这个很棒的鲜花图标

00:21:59.319 --> 00:22:01.255 align:middle line:-1
比如像是这个很棒的鲜花图标

00:22:01.321 --> 00:22:03.991 align:middle line:-1
一样的鲜活的设计

00:22:04.057 --> 00:22:05.592 align:middle line:-1
你可能要用到

00:22:05.659 --> 00:22:09.396 align:middle line:-1
我们某些设备上的广色域特性

00:22:10.330 --> 00:22:12.566 align:middle line:-1
并且使用广色域

00:22:13.433 --> 00:22:14.968 align:middle line:-1
使用生成的广色域资源吧

00:22:15.035 --> 00:22:17.371 align:middle line:-1
我推荐你们将Display P3

00:22:17.437 --> 00:22:18.805 align:middle line:-1
作为你们的工作配置文件

00:22:18.939 --> 00:22:21.942 align:middle line:-1
每个信道16位可以保证

00:22:22.643 --> 00:22:24.278 align:middle line:-2
你执行该设计时
不丢失任何内容

00:22:24.912 --> 00:22:27.014 align:middle line:-1
现在Xcode 以及运行时间平台

00:22:27.080 --> 00:22:30.984 align:middle line:-1
就有了更广的处理范围以及管理选项

00:22:31.051 --> 00:22:33.253 align:middle line:-1
来处理这个广色域资源

00:22:34.021 --> 00:22:35.822 align:middle line:-1
我不会太过深入介绍

00:22:35.889 --> 00:22:38.258 align:middle line:-1
但是我建议你们去参考一下

00:22:38.325 --> 00:22:41.361 align:middle line:-2
我两年前讲过的
“广色域处理”的演讲

00:22:41.995 --> 00:22:43.964 align:middle line:-1
我详细介绍了这些主题

00:22:44.031 --> 00:22:45.832 align:middle line:-1
并且会给你更多的背景知识

00:22:45.899 --> 00:22:48.402 align:middle line:-1
从去年开始

00:22:48.468 --> 00:22:51.538 align:middle line:-1
在developer.apple.com网站上的

00:22:51.605 --> 00:22:55.976 align:middle line:-2
iOS设计资源区有了
处理P3资源的好方法

00:22:56.743 --> 00:22:58.378 align:middle line:-1
（可拉伸图像）

00:22:58.445 --> 00:23:00.781 align:middle line:-1
现在让我们介绍一些

00:22:58.445 --> 00:23:00.781 align:middle line:-1
现在让我们介绍一些

00:23:02.482 --> 00:23:03.417 align:middle line:-1
实际的软件资源

00:23:03.483 --> 00:23:04.952 align:middle line:-1
可能你的

00:23:07.221 --> 00:23:12.125 align:middle line:-2
用户界面要调整很多不同的
表现方式和布局

00:23:12.860 --> 00:23:16.430 align:middle line:-1
它通常会调用需要拉伸和变大的插图

00:23:16.864 --> 00:23:19.466 align:middle line:-1
以适应这些布局的变化

00:23:19.933 --> 00:23:21.735 align:middle line:-1
你要如何实现这些变化呢？

00:23:22.436 --> 00:23:24.137 align:middle line:-1
最常见的方法就是

00:23:24.204 --> 00:23:26.773 align:middle line:-1
识别出图像中可拉伸的部分

00:23:26.840 --> 00:23:28.575 align:middle line:-1
与不可拉伸的部分

00:23:28.976 --> 00:23:29.843 align:middle line:-1
为什么要有所区别呢？

00:23:29.910 --> 00:23:33.046 align:middle line:-1
幻灯片上有个简单的例子

00:23:33.113 --> 00:23:35.883 align:middle line:-1
假设我们的资源中有个漂亮的形状

00:23:35.949 --> 00:23:37.618 align:middle line:-2
像圆角这样
你想以所有可能的尺寸

00:23:37.684 --> 00:23:39.786 align:middle line:-1
保留的内容 就像是相框一样

00:23:40.220 --> 00:23:42.389 align:middle line:-2
你要保证不会拉伸
幻灯片中蓝色的这些部分

00:23:42.456 --> 00:23:45.792 align:middle line:-1
但是你可以拉伸黄色的部分

00:23:46.426 --> 00:23:50.430 align:middle line:-2
通常情况下
利用先进设计工具来实现的话

00:23:50.497 --> 00:23:54.568 align:middle line:-2
就是要将这些项分开
识别出所有的区域

00:23:54.635 --> 00:23:56.803 align:middle line:-1
并将它们当做独立的资源进行分发

00:23:57.104 --> 00:24:01.008 align:middle line:-1
比方说 程序员可以使用

00:23:57.104 --> 00:24:01.008 align:middle line:-1
比方说 程序员可以使用

00:24:01.074 --> 00:24:03.944 align:middle line:-2
draw three或是nine-part API
将其重新组装成最终的设计尺寸

00:24:04.811 --> 00:24:06.380 align:middle line:-1
这样做是可以的

00:24:06.446 --> 00:24:08.849 align:middle line:-1
而且已经被实践和使用了多年

00:24:09.249 --> 00:24:10.684 align:middle line:-1
不过它有一个不足之处

00:24:11.118 --> 00:24:15.122 align:middle line:-2
将这些图像重组成最终尺寸
是一个CPU负载很高的任务

00:24:15.189 --> 00:24:17.691 align:middle line:-1
它可能会有点复杂而且低效

00:24:17.758 --> 00:24:23.197 align:middle line:-2
这对于像是
Core Animation这样的

00:24:23.263 --> 00:24:24.298 align:middle line:-1
现代GPU UI管道来说并不合适

00:24:25.866 --> 00:24:27.100 align:middle line:-1
更好的方法是什么呢？

00:24:27.601 --> 00:24:30.070 align:middle line:-1
更好的办法就是 对于单个图像

00:24:30.470 --> 00:24:33.340 align:middle line:-1
就提供表明其拉伸部分的

00:24:33.407 --> 00:24:35.876 align:middle line:-1
拉伸元数据

00:24:36.910 --> 00:24:39.947 align:middle line:-1
这会带来对于可变尺寸图像来说

00:24:40.013 --> 00:24:41.114 align:middle line:-1
最优的、流畅的GPU动画

00:24:42.783 --> 00:24:44.585 align:middle line:-1
而且我很高兴地告诉你们资源目录

00:24:44.651 --> 00:24:46.353 align:middle line:-1
可以轻松使其实现

00:24:47.621 --> 00:24:49.456 align:middle line:-1
它叫做展示分割编辑器

00:24:50.557 --> 00:24:54.194 align:middle line:-2
它真的很容易用
你只需要点击开始分割按钮

00:24:54.628 --> 00:24:58.031 align:middle line:-1
然后你就会开始分割行

00:24:58.098 --> 00:25:01.668 align:middle line:-1
这可以让你识别出图像的可拉伸部分

00:24:58.098 --> 00:25:01.668 align:middle line:-1
这可以让你识别出图像的可拉伸部分

00:25:01.735 --> 00:25:03.837 align:middle line:-1
与不可拉伸部分

00:25:03.971 --> 00:25:06.206 align:middle line:-1
在本例中 左侧和右侧检查完了

00:25:06.273 --> 00:25:10.077 align:middle line:-2
而中间部分是橙色的
也就是可拉伸的部分

00:25:10.544 --> 00:25:11.445 align:middle line:-1
现在

00:25:12.079 --> 00:25:14.581 align:middle line:-2
你可能注意到了
这个图像上面大部分

00:25:14.648 --> 00:25:17.084 align:middle line:-1
地方都有白色阴影

00:25:17.150 --> 00:25:18.385 align:middle line:-1
这是怎么回事呢？

00:25:18.785 --> 00:25:20.754 align:middle line:-1
这其实是一个很有意思的事

00:25:20.821 --> 00:25:25.192 align:middle line:-1
这部分的资源其实是不再被需要了

00:25:25.259 --> 00:25:28.996 align:middle line:-2
因为我们用剩下的三个部分
来表示所有可能的大小

00:25:29.429 --> 00:25:31.231 align:middle line:-1
为什么这很重要呢？

00:25:31.899 --> 00:25:35.702 align:middle line:-2
好处就是现在Xcode
可以在构造时间就知道这件事了

00:25:35.769 --> 00:25:40.073 align:middle line:-2
我们可以只取需要的部分
然后留下剩下的部分

00:25:40.674 --> 00:25:41.942 align:middle line:-1
所以我们就不要

00:25:42.009 --> 00:25:43.710 align:middle line:-1
将这一大块部分保存在磁盘字节上

00:25:43.777 --> 00:25:45.579 align:middle line:-1
这些字节会被用到你的app中的

00:25:46.113 --> 00:25:47.114 align:middle line:-1
这很棒

00:25:47.181 --> 00:25:50.450 align:middle line:-1
它还有另一个好处

00:25:50.517 --> 00:25:53.253 align:middle line:-1
这个更加隐晦一点 不过我很喜欢

00:25:53.320 --> 00:25:55.122 align:middle line:-1
这意味着你可以告诉你的设计师

00:25:55.189 --> 00:25:57.658 align:middle line:-1
可以以原始尺寸

00:25:57.724 --> 00:25:59.593 align:middle line:-1
送达资源

00:25:59.726 --> 00:26:01.795 align:middle line:-2
且不用为了有效部署
而对它们进行预处理

00:25:59.726 --> 00:26:01.795 align:middle line:-2
且不用为了有效部署
而对它们进行预处理

00:26:01.862 --> 00:26:06.066 align:middle line:-1
以使其尽可能地小

00:26:06.133 --> 00:26:07.668 align:middle line:-1
这不应该是设计师所考虑的

00:26:07.734 --> 00:26:09.770 align:middle line:-2
长远来说
把一眼就能看出来是什么的内容

00:26:09.837 --> 00:26:12.739 align:middle line:-1
放到源代码中

00:26:12.806 --> 00:26:13.841 align:middle line:-1
更有意义

00:26:14.241 --> 00:26:16.944 align:middle line:-1
让工具来考虑部署的细节问题

00:26:17.010 --> 00:26:18.545 align:middle line:-1
（资源目录展示分割）

00:26:18.612 --> 00:26:20.514 align:middle line:-1
除了图形化的检查器

00:26:20.581 --> 00:26:22.816 align:middle line:-1
以及图形化识别可拉伸部分的方法

00:26:22.883 --> 00:26:25.285 align:middle line:-1
当然了还有展示分割检查器

00:26:25.352 --> 00:26:28.522 align:middle line:-1
你可以更好地控制边缘插图

00:26:28.589 --> 00:26:32.226 align:middle line:-1
还可以控制中心部分

00:26:32.292 --> 00:26:34.194 align:middle line:-1
拉伸或覆盖的行为

00:26:36.129 --> 00:26:37.264 align:middle line:-1
所有这些内容

00:26:37.331 --> 00:26:40.467 align:middle line:-2
结合起来就是为了
让拉伸元数据接近于插图

00:26:40.701 --> 00:26:43.537 align:middle line:-1
这会让后面产生很大的收益

00:26:43.604 --> 00:26:45.038 align:middle line:-1
设计师会不可避免地

00:26:45.105 --> 00:26:47.407 align:middle line:-1
更新你的设计

00:26:48.141 --> 00:26:50.277 align:middle line:-2
现在你就可以在一个地方
更新所有内容

00:26:50.344 --> 00:26:52.646 align:middle line:-1
而不用记住代码中的五六个地方

00:26:52.713 --> 00:26:55.349 align:middle line:-2
这些地方你可能
有之前边缘插图的放置代码

00:26:56.283 --> 00:26:58.552 align:middle line:-1
现在它都集中到一个地方了

00:27:00.721 --> 00:27:01.722 align:middle line:-1
谢谢

00:27:04.658 --> 00:27:07.160 align:middle line:-1
接下来我想介绍一下矢量资源

00:27:07.227 --> 00:27:08.495 align:middle line:-1
（矢量资源）

00:27:08.562 --> 00:27:11.465 align:middle line:-1
由于我们所有产品的显示屏

00:27:11.532 --> 00:27:13.367 align:middle line:-1
都有不同的分辨率

00:27:13.433 --> 00:27:16.303 align:middle line:-1
你可能已经习惯于根据目标平台

00:27:16.370 --> 00:27:18.505 align:middle line:-1
使用1倍、2倍、3倍大的图像

00:27:18.572 --> 00:27:19.640 align:middle line:-1
不同的资源

00:27:20.073 --> 00:27:22.209 align:middle line:-1
这用起来并没有问题

00:27:22.643 --> 00:27:25.679 align:middle line:-2
但每次对于一个设计
都要用两三个资源

00:27:25.746 --> 00:27:27.314 align:middle line:-1
挺麻烦的

00:27:28.015 --> 00:27:29.750 align:middle line:-2
就是因为分辨率
没有别的什么原因

00:27:30.817 --> 00:27:32.920 align:middle line:-1
如果你可以避免使用这个方法

00:27:32.986 --> 00:27:33.987 align:middle line:-1
只用一个资源就可以？

00:27:34.054 --> 00:27:37.024 align:middle line:-2
你确实可以这么做
我们在资源目录中以PDF格式

00:27:37.090 --> 00:27:39.426 align:middle line:-1
支持矢量资源已经有些年头了

00:27:39.826 --> 00:27:42.996 align:middle line:-1
通过使用Xcode资源目录

00:27:43.664 --> 00:27:45.532 align:middle line:-1
你可以提供一个PDF

00:27:45.866 --> 00:27:49.369 align:middle line:-2
Xcode就可以根据平台
生成、栅格化

00:27:49.670 --> 00:27:52.639 align:middle line:-2
那个PDF文件
为所有可应用范围内的

00:27:53.340 --> 00:27:55.843 align:middle line:-1
你app正指向的因素

00:27:57.177 --> 00:27:58.378 align:middle line:-1
这很棒 因为这意味着

00:27:58.445 --> 00:28:00.948 align:middle line:-1
你不要担心需要支付任何开销

00:27:58.445 --> 00:28:00.948 align:middle line:-1
你不要担心需要支付任何开销

00:28:01.481 --> 00:28:02.449 align:middle line:-1
在运行时间的设备上

00:28:02.516 --> 00:28:06.954 align:middle line:-2
渲染一个可能挺复杂的
PDF矢量资源

00:28:08.322 --> 00:28:10.557 align:middle line:-1
这让你对使用矢量有了些概念

00:28:11.425 --> 00:28:14.161 align:middle line:-1
有时候你可能

00:28:14.228 --> 00:28:17.564 align:middle line:-1
想在某种情况下将你的资源

00:28:17.631 --> 00:28:21.935 align:middle line:-1
以对比其最常用的设计尺寸不同

00:28:22.002 --> 00:28:23.203 align:middle line:-1
的尺寸或范围来显示

00:28:23.704 --> 00:28:28.342 align:middle line:-2
从去年的iOS 11
和Xcode 9开始

00:28:28.408 --> 00:28:30.777 align:middle line:-1
我们现在可以让你保留矢量数据

00:28:31.245 --> 00:28:35.949 align:middle line:-1
以便在图像被放入比该资源的

00:28:36.016 --> 00:28:38.519 align:middle line:-1
实际尺寸大的图像视图时

00:28:38.585 --> 00:28:41.688 align:middle line:-1
它可以找到原始的PDF矢量数据

00:28:41.755 --> 00:28:45.726 align:middle line:-2
另外我们已经去除链接
并清除了无关的元数据

00:28:45.792 --> 00:28:47.461 align:middle line:-2
和配置文件
所以它很棒很紧凑

00:28:47.528 --> 00:28:49.429 align:middle line:-1
还是尽可能小的

00:28:50.497 --> 00:28:52.466 align:middle line:-1
让我们在运行时间重新栅格化

00:28:52.533 --> 00:28:54.501 align:middle line:-1
但是除非你超出了原始尺寸

00:28:54.568 --> 00:28:57.771 align:middle line:-1
否则我们就用优化过的预渲染位图

00:28:58.405 --> 00:29:00.207 align:middle line:-2
这样做很棒
因为这意味着你的app

00:28:58.405 --> 00:29:00.207 align:middle line:-2
这样做很棒
因为这意味着你的app

00:29:00.274 --> 00:29:03.043 align:middle line:-1
可以更灵活得响应动态类型

00:29:03.477 --> 00:29:07.281 align:middle line:-2
并且在你改变UIImage
视图大小的时候

00:29:07.347 --> 00:29:10.083 align:middle line:-1
自动地让你的图像看着更干脆

00:29:12.586 --> 00:29:13.720 align:middle line:-1
这就是矢量资源的内容

00:29:14.988 --> 00:29:19.359 align:middle line:-2
接下来我想介绍一点
关于2倍图像设计的内容

00:29:20.027 --> 00:29:21.061 align:middle line:-1
（2倍图像设计）

00:29:21.128 --> 00:29:22.963 align:middle line:-1
2倍图像 通常以视网膜为人所知

00:29:23.931 --> 00:29:26.867 align:middle line:-1
它是你的app用到的

00:29:27.434 --> 00:29:30.270 align:middle line:-1
最受欢迎 以及最常见的显示密度

00:29:30.971 --> 00:29:32.339 align:middle line:-1
这很棒 不是吗？

00:29:32.406 --> 00:29:34.341 align:middle line:-1
这是很大的进步

00:29:34.408 --> 00:29:36.844 align:middle line:-1
然而还是有时候

00:29:37.411 --> 00:29:40.147 align:middle line:-1
你在设计的时候

00:29:41.448 --> 00:29:44.718 align:middle line:-2
一道笔画或边
可能会在像素的边缘部分

00:29:44.785 --> 00:29:46.186 align:middle line:-1
从而导致边缘很模糊

00:29:46.253 --> 00:29:49.389 align:middle line:-2
它还没有那么高的分辨率
以至于你根本分辨不出

00:29:49.456 --> 00:29:51.225 align:middle line:-1
是锐利的还是模糊的边缘

00:29:52.192 --> 00:29:56.897 align:middle line:-1
有时候这仍然是设计资源的挑战

00:29:58.265 --> 00:30:02.135 align:middle line:-1
可以用什么技术来解决这个问题呢？

00:29:58.265 --> 00:30:02.135 align:middle line:-1
可以用什么技术来解决这个问题呢？

00:30:04.037 --> 00:30:07.741 align:middle line:-2
一个常见的设计手段
就是打开你矢量设计工具的

00:30:07.808 --> 00:30:09.343 align:middle line:-1
点边缘修整功能

00:30:09.409 --> 00:30:12.279 align:middle line:-1
设置一个点间隔的网格

00:30:12.346 --> 00:30:15.349 align:middle line:-1
打开修整功能 在你调整形状

00:30:15.415 --> 00:30:17.951 align:middle line:-2
或控制点的时候
你就知道它们是可以修整的

00:30:18.018 --> 00:30:19.086 align:middle line:-1
在它们修到边的时候

00:30:19.152 --> 00:30:22.422 align:middle line:-1
你就可以知道这是个像素边

00:30:23.223 --> 00:30:24.224 align:middle line:-1
这很不错

00:30:24.725 --> 00:30:28.195 align:middle line:-1
还有时候 你可能有个设计

00:30:28.262 --> 00:30:31.532 align:middle line:-1
的某些边或许是介于

00:30:32.966 --> 00:30:35.102 align:middle line:-1
1倍和2倍之间 但是你并不确定

00:30:35.169 --> 00:30:38.038 align:middle line:-2
你想知道
特别是在2倍视网膜设备上

00:30:38.105 --> 00:30:40.507 align:middle line:-2
会是什么样的
我可以对实际的显示密度

00:30:40.574 --> 00:30:42.843 align:middle line:-1
做进一步优化吗？

00:30:43.544 --> 00:30:46.113 align:middle line:-1
你其实可以用一个两倍的网格

00:30:46.180 --> 00:30:49.650 align:middle line:-2
在你的矢量设计工具中
将你的资源变成两倍大

00:30:50.083 --> 00:30:53.387 align:middle line:-1
并且把该网格变为一个像素的网格

00:30:53.453 --> 00:30:57.691 align:middle line:-2
也就是每两个点 每两个单元
会变为视网膜显示的一个点

00:30:58.592 --> 00:31:02.796 align:middle line:-1
然后调整你的资源 并使用点修整

00:30:58.592 --> 00:31:02.796 align:middle line:-1
然后调整你的资源 并使用点修整

00:31:02.863 --> 00:31:05.933 align:middle line:-1
来调整你的笔画和边缘来适应这里

00:31:07.234 --> 00:31:08.268 align:middle line:-1
真很不错

00:31:08.335 --> 00:31:09.870 align:middle line:-1
那现在该怎么做呢？

00:31:09.937 --> 00:31:11.872 align:middle line:-1
它太大了不是吗 难道不能用吗？

00:31:12.206 --> 00:31:13.040 align:middle line:-1
是可以用的！

00:31:13.440 --> 00:31:16.343 align:middle line:-1
你只需要把它放到

00:31:16.410 --> 00:31:18.879 align:middle line:-1
资源目录缩放桶里的2倍那一格

00:31:19.213 --> 00:31:23.150 align:middle line:-2
这就可以让Xcode
自动处理这个插图

00:31:23.217 --> 00:31:25.185 align:middle line:-1
知道它其实是插图的两倍部分

00:31:25.252 --> 00:31:26.653 align:middle line:-1
它有点太大了

00:31:26.720 --> 00:31:29.356 align:middle line:-1
一点并不等于视网膜显示的两个像素

00:31:29.423 --> 00:31:31.225 align:middle line:-1
而是刚好相反

00:31:31.291 --> 00:31:32.426 align:middle line:-1
我们来计算一下

00:31:32.492 --> 00:31:35.028 align:middle line:-1
我们要为所有其他范围因素渲染

00:31:35.095 --> 00:31:37.364 align:middle line:-2
右边所有的栅格化位图
并为你处理它

00:31:37.865 --> 00:31:42.102 align:middle line:-2
将设计师解放出来使用两倍网格
是非常有帮助的

00:31:43.103 --> 00:31:44.037 align:middle line:-1
（有提示的资源）

00:31:44.104 --> 00:31:46.940 align:middle line:-1
当然了 如果自动缩放还不够

00:31:47.007 --> 00:31:49.676 align:middle line:-1
或是在某些地方出问题的话

00:31:50.611 --> 00:31:53.514 align:middle line:-1
你对结果是有最终控制权的

00:31:53.580 --> 00:31:57.084 align:middle line:-2
你可以将有提示的位图
投放到合适的缩放因素桶中

00:31:57.150 --> 00:31:58.452 align:middle line:-1
接下来我们会使用它

00:31:58.519 --> 00:32:02.956 align:middle line:-1
来替代生成的PDF栅格化

00:31:58.519 --> 00:32:02.956 align:middle line:-1
来替代生成的PDF栅格化

00:32:04.825 --> 00:32:09.429 align:middle line:-1
这就是关于设计与生产的最后内容

00:32:09.496 --> 00:32:13.267 align:middle line:-1
现在让我们介绍下在Xcode中

00:32:13.534 --> 00:32:15.269 align:middle line:-1
收录和整理方面的内容

00:32:15.335 --> 00:32:16.403 align:middle line:-1
（很多选项）

00:32:16.470 --> 00:32:19.406 align:middle line:-2
对于你们当中使用过
Xcode资源目录的人来说

00:32:19.473 --> 00:32:22.476 align:middle line:-1
看到你面前有这么多东西

00:32:22.543 --> 00:32:24.178 align:middle line:-1
可能会感觉有些应付不过来

00:32:24.244 --> 00:32:26.947 align:middle line:-1
你们应该用什么呢 选择有很多

00:32:27.314 --> 00:32:28.782 align:middle line:-1
我要告诉你们

00:32:29.816 --> 00:32:32.653 align:middle line:-1
你应该只用有意义的那些选项

00:32:33.086 --> 00:32:34.888 align:middle line:-1
对你的项目来说有意义的

00:32:35.556 --> 00:32:38.258 align:middle line:-1
对于你要处理的内容有意义

00:32:38.325 --> 00:32:41.628 align:middle line:-2
有很多的选项
我们有一个非常强大的引擎

00:32:41.695 --> 00:32:44.364 align:middle line:-1
以及功能非常多的组织方案

00:32:44.431 --> 00:32:46.733 align:middle line:-1
不过你应该按需使用

00:32:46.800 --> 00:32:48.836 align:middle line:-1
从最简单的开始

00:32:48.902 --> 00:32:50.003 align:middle line:-1
然后一点点深入

00:32:50.070 --> 00:32:51.405 align:middle line:-1
（只用有意义的选项）

00:32:51.471 --> 00:32:55.008 align:middle line:-1
我想介绍两种可以在这个领域帮助

00:32:55.075 --> 00:32:57.344 align:middle line:-1
进行组织的方法

00:32:58.312 --> 00:32:59.646 align:middle line:-1
第一种是捆绑

00:33:00.514 --> 00:33:02.950 align:middle line:-2
我为什么要在介绍资源的
演讲上说捆绑呢？

00:33:03.016 --> 00:33:04.017 align:middle line:-1
这好像有点不太搭调

00:33:04.084 --> 00:33:05.719 align:middle line:-1
我想解决的是

00:33:07.754 --> 00:33:08.789 align:middle line:-1
大项目可能遇到的问题

00:33:09.323 --> 00:33:11.124 align:middle line:-1
如果你有一个大项目

00:33:11.458 --> 00:33:14.294 align:middle line:-1
可能有多个框架参与其中

00:33:14.361 --> 00:33:16.296 align:middle line:-1
你甚至可能会和多个团队一起协作

00:33:16.997 --> 00:33:19.900 align:middle line:-2
如果你要把所有的资源
都放到主app捆绑中

00:33:19.967 --> 00:33:22.503 align:middle line:-1
有时候会很困难

00:33:22.569 --> 00:33:26.073 align:middle line:-2
你要在那管理所有这些资源
并且保证名字没有冲突

00:33:26.139 --> 00:33:27.574 align:middle line:-1
而且…

00:33:28.542 --> 00:33:31.378 align:middle line:-1
被恰当地导入你app中的对应位置

00:33:31.812 --> 00:33:33.580 align:middle line:-1
你能解决这个问题的一个办法就是

00:33:33.647 --> 00:33:36.650 align:middle line:-1
把这些资源构建到多个捆绑中

00:33:36.717 --> 00:33:38.552 align:middle line:-1
因为Xcode会为每个捆绑或目标

00:33:38.619 --> 00:33:42.055 align:middle line:-1
生成一个唯一的资源目录部署

00:33:42.589 --> 00:33:46.860 align:middle line:-2
例如 考虑下创建一个
只有插图的捆绑

00:33:46.927 --> 00:33:49.897 align:middle line:-1
这会是个不错的重用策略

00:33:49.963 --> 00:33:54.134 align:middle line:-2
用一个统一的组件
来包含你所有的插图

00:33:54.201 --> 00:33:55.969 align:middle line:-1
这个组件有一致的命名空间

00:33:57.571 --> 00:34:00.240 align:middle line:-1
可以为你app的

00:33:57.571 --> 00:34:00.240 align:middle line:-1
可以为你app的

00:34:00.307 --> 00:34:01.575 align:middle line:-1
其他组件提供图像

00:34:03.410 --> 00:34:05.712 align:middle line:-1
你要如何得到这些内容呢？很简单！

00:34:06.280 --> 00:34:11.351 align:middle line:-2
你只需要使用像是
UIImage这样的图像构造器

00:34:11.418 --> 00:34:14.420 align:middle line:-2
以与特征集合兼容的捆绑命名
从而可以给捆绑参数

00:34:14.487 --> 00:34:15.722 align:middle line:-1
当然了 在macOS端

00:34:15.789 --> 00:34:18.692 align:middle line:-1
有一个资源NS捆绑类图像

00:34:18.759 --> 00:34:19.927 align:middle line:-1
（捆绑）

00:34:19.993 --> 00:34:21.195 align:middle line:-1
你要记住的是

00:34:21.695 --> 00:34:23.996 align:middle line:-2
每个捆绑都会提供一个
唯一的命名空间

00:34:24.498 --> 00:34:27.967 align:middle line:-2
因此在这些空间中
名字必须是唯一的

00:34:28.034 --> 00:34:31.905 align:middle line:-2
但是在捆绑间 你可以使用
你喜欢的任何命名规则

00:34:34.574 --> 00:34:36.109 align:middle line:-1
说到命名空间

00:34:36.176 --> 00:34:38.712 align:middle line:-1
我想介绍另一个特性

00:34:38.779 --> 00:34:41.047 align:middle line:-1
以及大项目中所遇到的另一个挑战

00:34:41.348 --> 00:34:44.217 align:middle line:-1
在本例中 我所解决的问题是

00:34:44.284 --> 00:34:46.152 align:middle line:-1
大的集合

00:34:46.485 --> 00:34:48.455 align:middle line:-1
它们之中可能会有一些结构

00:34:48.522 --> 00:34:49.389 align:middle line:-1
（命名空间）

00:34:49.456 --> 00:34:50.290 align:middle line:-1
对吗？

00:34:50.357 --> 00:34:54.061 align:middle line:-2
想象下 你可能在某个app中
要处理50个不同的房间

00:34:54.127 --> 00:34:56.463 align:middle line:-1
每个房间里有一张桌子和一把椅子

00:34:56.530 --> 00:34:58.098 align:middle line:-1
它们每个都有资源

00:34:58.165 --> 00:35:00.634 align:middle line:-2
在你的代码中
你可以将它们指代为桌子和椅子

00:34:58.165 --> 00:35:00.634 align:middle line:-2
在你的代码中
你可以将它们指代为桌子和椅子

00:35:00.701 --> 00:35:03.570 align:middle line:-2
这看起来似乎很自然
但不幸的是有50个这样的东西

00:35:03.637 --> 00:35:04.671 align:middle line:-1
你要怎么做呢？

00:35:05.339 --> 00:35:09.176 align:middle line:-2
一种替代方案就是
生成某种形式的命名规则

00:35:09.243 --> 00:35:11.111 align:middle line:-1
看看在你的代码中如何多路分配

00:35:11.512 --> 00:35:12.546 align:middle line:-1
这不是最理想的方法

00:35:13.113 --> 00:35:15.449 align:middle line:-1
资源目录可以提供一个解决方案

00:35:15.516 --> 00:35:17.951 align:middle line:-1
就是使用所提供的命名空间选项

00:35:19.019 --> 00:35:20.654 align:middle line:-2
在将你的插图整理到
一个文件夹中之后

00:35:20.954 --> 00:35:23.657 align:middle line:-1
通过勾选这个框

00:35:24.324 --> 00:35:27.194 align:middle line:-1
我们就可以自动地将文件名

00:35:29.396 --> 00:35:32.633 align:middle line:-2
记录到每个图像
所对应的资源目录记录中

00:35:33.300 --> 00:35:34.968 align:middle line:-1
你后面可以用来得到相关数据

00:35:35.402 --> 00:35:36.403 align:middle line:-1
这是组织庞大结构的资源集合

00:35:36.470 --> 00:35:39.573 align:middle line:-1
的好方法

00:35:40.674 --> 00:35:41.508 align:middle line:-1
好了

00:35:42.142 --> 00:35:42.976 align:middle line:-1
那么

00:35:43.577 --> 00:35:45.045 align:middle line:-1
我们已经介绍了目录

00:35:45.879 --> 00:35:48.615 align:middle line:-2
现在让我们介绍一些
关于部署的令人兴奋的内容

00:35:48.982 --> 00:35:51.451 align:middle line:-1
这里真的很令人兴奋

00:35:52.486 --> 00:35:53.754 align:middle line:-1
（app精简）

00:35:53.820 --> 00:35:55.656 align:middle line:-2
Will已介绍了
app精简的内容

00:35:56.190 --> 00:35:57.724 align:middle line:-1
我想大体上介绍下

00:35:57.791 --> 00:36:00.327 align:middle line:-2
我们对资源目录的
app精简所做的努力

00:35:57.791 --> 00:36:00.327 align:middle line:-2
我们对资源目录的
app精简所做的努力

00:36:00.394 --> 00:36:01.962 align:middle line:-1
总的来说你要做的就是

00:36:02.029 --> 00:36:05.265 align:middle line:-1
提供你app所有的变量内容

00:36:05.332 --> 00:36:08.435 align:middle line:-2
你要根据在不同设备上
运行app的需要

00:36:08.502 --> 00:36:09.570 align:middle line:-1
来调整你的内容

00:36:09.636 --> 00:36:12.105 align:middle line:-1
最常见的实现方法就是

00:36:12.172 --> 00:36:15.008 align:middle line:-2
划分产品组
iPad或是iPhone

00:36:15.075 --> 00:36:21.181 align:middle line:-2
TV或是Watch或不同的分辨率
3倍和2倍图像

00:36:21.782 --> 00:36:25.018 align:middle line:-2
你要提供所有内容变量
来有效地调整你的内容

00:36:25.319 --> 00:36:27.621 align:middle line:-1
然后app精简要保证

00:36:27.688 --> 00:36:30.224 align:middle line:-1
我们选择了该内容的正确子集

00:36:30.290 --> 00:36:31.425 align:middle line:-2
这个子集的内容
适合于用户运行app

00:36:31.491 --> 00:36:33.560 align:middle line:-1
所使用的设备

00:36:36.396 --> 00:36:38.465 align:middle line:-1
我想介绍另一种

00:36:38.532 --> 00:36:40.834 align:middle line:-1
你可以实现同种内容调整的方式

00:36:41.668 --> 00:36:43.170 align:middle line:-1
那就是性能类

00:36:43.237 --> 00:36:45.506 align:middle line:-1
只是看待相同问题的一种不同方式

00:36:46.406 --> 00:36:48.609 align:middle line:-1
如果这个产品混合了

00:36:48.909 --> 00:36:52.479 align:middle line:-1
你的app看待连贯性的方式

00:36:52.746 --> 00:36:55.782 align:middle line:-1
由性能来划分

00:36:55.849 --> 00:36:58.118 align:middle line:-1
而不是其他特征呢？

00:36:58.819 --> 00:37:00.787 align:middle line:-1
你可以通过资源目录来实现这个目的

00:36:58.819 --> 00:37:00.787 align:middle line:-1
你可以通过资源目录来实现这个目的

00:37:01.455 --> 00:37:04.391 align:middle line:-1
我们所支持的设备

00:37:04.458 --> 00:37:06.593 align:middle line:-1
有着很大范围的硬件变化

00:37:06.660 --> 00:37:08.161 align:middle line:-1
即使你回退了几个iOS版本

00:37:08.228 --> 00:37:12.432 align:middle line:-2
我是说从iPhone 5
一直到最新的iPhone 10

00:37:12.499 --> 00:37:15.002 align:middle line:-1
这是很大范围的性能变化

00:37:15.736 --> 00:37:17.404 align:middle line:-1
如果我们可以利用这点

00:37:17.471 --> 00:37:21.141 align:middle line:-1
可以不必限制你的app

00:37:21.208 --> 00:37:24.611 align:middle line:-2
来满足对最低性能设备
的支持不是很好吗？

00:37:25.078 --> 00:37:26.380 align:middle line:-1
这就是我们的目标

00:37:26.446 --> 00:37:28.248 align:middle line:-1
为了鱼和熊掌可以兼得

00:37:28.315 --> 00:37:31.785 align:middle line:-1
你可以通过适应性资源来解决

00:37:32.186 --> 00:37:33.620 align:middle line:-1
我会给你们介绍下如何解决

00:37:33.687 --> 00:37:34.521 align:middle line:-1
（内存类）

00:37:34.588 --> 00:37:38.058 align:middle line:-2
我们要划分性能连贯性的话
有两种主要的方法

00:37:38.125 --> 00:37:39.426 align:middle line:-1
第一种是内存类

00:37:39.493 --> 00:37:41.628 align:middle line:-1
这可能是最重要的一个

00:37:41.695 --> 00:37:44.598 align:middle line:-2
我们有4个内存层级
1GB到4GB

00:37:44.865 --> 00:37:47.067 align:middle line:-1
这对应了不同设备上

00:37:47.134 --> 00:37:48.836 align:middle line:-1
已经安装好的内存

00:37:48.902 --> 00:37:51.171 align:middle line:-1
这跨越了我们的整个产品线

00:37:51.238 --> 00:37:53.874 align:middle line:-2
是什么都没关系
它是这些桶的其中一个

00:37:55.609 --> 00:38:00.781 align:middle line:-1
第二个集合访问就是图形类

00:37:55.609 --> 00:38:00.781 align:middle line:-1
第二个集合访问就是图形类

00:38:00.848 --> 00:38:03.650 align:middle line:-1
这其实反映了两件事

00:38:04.017 --> 00:38:07.588 align:middle line:-2
第一个就是
它们对应了Metal特征族集

00:38:07.654 --> 00:38:09.823 align:middle line:-2
若你是Metal程序员
你可能会对它熟悉

00:38:09.890 --> 00:38:11.525 align:middle line:-1
这个是GPU家族的概念

00:38:11.592 --> 00:38:13.427 align:middle line:-1
但它们实际上也与

00:38:13.493 --> 00:38:17.764 align:middle line:-1
你设备的处理器版本有关

00:38:18.298 --> 00:38:22.636 align:middle line:-2
Metal 1对应的是
Apple A7

00:38:22.703 --> 00:38:24.872 align:middle line:-2
而Metal 4对应的是
Apple A11处理器

00:38:25.272 --> 00:38:28.709 align:middle line:-1
我们允许你编类以及传送这些资源

00:38:28.775 --> 00:38:31.545 align:middle line:-1
到这些特定图形中的每一个类

00:38:31.612 --> 00:38:32.846 align:middle line:-1
（图形类）

00:38:32.913 --> 00:38:36.183 align:middle line:-2
对它们中的每个来说
本身就非常强大

00:38:36.250 --> 00:38:37.951 align:middle line:-1
有趣的是

00:38:38.018 --> 00:38:41.788 align:middle line:-1
你可以将这两个特征组合在一起

00:38:41.855 --> 00:38:44.024 align:middle line:-1
来形成一个完整的性能矩阵

00:38:44.091 --> 00:38:47.461 align:middle line:-2
你可以对如何
针对硬件环境调整你的资源

00:38:47.528 --> 00:38:49.830 align:middle line:-1
进行最后的校准

00:38:49.897 --> 00:38:51.932 align:middle line:-1
（完整性能矩阵）

00:38:51.999 --> 00:38:53.333 align:middle line:-1
这是如何实现的呢？

00:38:54.368 --> 00:38:58.038 align:middle line:-2
我想通过一个简单的例子
来向你们解释一下

00:38:58.105 --> 00:39:00.174 align:middle line:-2
这对于我们理解所做的事情来说
很关键

00:38:58.105 --> 00:39:00.174 align:middle line:-2
这对于我们理解所做的事情来说
很关键

00:39:00.240 --> 00:39:02.676 align:middle line:-1
它可以帮助你理解应该如何使用它

00:39:03.243 --> 00:39:06.213 align:middle line:-2
在本例中
我们提供了三种特殊的资源

00:39:06.280 --> 00:39:11.151 align:middle line:-1
一个是供低性能设备所用的资源

00:39:11.218 --> 00:39:13.187 align:middle line:-1
然后我们提供了两种优化的资源

00:39:13.253 --> 00:39:16.657 align:middle line:-2
一个支持使用Metal 3的
3GB内存以上的设备

00:39:16.723 --> 00:39:19.660 align:middle line:-2
一个支持使用Metal 4的
2GB内存的设备

00:39:20.561 --> 00:39:24.598 align:middle line:-2
假设我是从
iPhone 8 Plus

00:39:24.665 --> 00:39:27.134 align:middle line:-1
选择的资源

00:39:27.634 --> 00:39:30.637 align:middle line:-2
我是以Metal 4的
4GB内存开始的

00:39:31.238 --> 00:39:35.175 align:middle line:-2
我找了一下 在4GB内存
层级什么都没有找到

00:39:36.009 --> 00:39:39.580 align:middle line:-1
接下来我就会降一个内存层级

00:39:39.646 --> 00:39:43.116 align:middle line:-1
并且在3GB内存层级进行查找

00:39:44.451 --> 00:39:46.920 align:middle line:-1
我在这找到了这个资源

00:39:48.088 --> 00:39:49.623 align:middle line:-1
我要选择它

00:39:49.690 --> 00:39:51.959 align:middle line:-1
重要的是

00:39:52.025 --> 00:39:56.697 align:middle line:-2
我已经在3GB的Metal 3
设备上选择了这个资源

00:39:56.763 --> 00:39:58.131 align:middle line:-1
尽管有一个资源

00:39:58.198 --> 00:40:01.134 align:middle line:-1
刚好匹配我的GPU类

00:39:58.198 --> 00:40:01.134 align:middle line:-1
刚好匹配我的GPU类

00:40:01.502 --> 00:40:06.440 align:middle line:-1
但是因为在我们做图形类之前

00:40:06.507 --> 00:40:09.009 align:middle line:-2
我们更喜欢并以内存优先顺序
扫描事物 所以我们将首先选择它

00:40:09.076 --> 00:40:09.977 align:middle line:-1
这非常重要

00:40:10.043 --> 00:40:12.946 align:middle line:-2
因为我们确定内存是表现
设备整体性能的

00:40:13.013 --> 00:40:15.582 align:middle line:-1
最重要方式

00:40:15.649 --> 00:40:19.486 align:middle line:-2
所以 当我们在通过选择矩阵选择时
我们更倾向于选择它

00:40:21.488 --> 00:40:24.124 align:middle line:-2
这就是它的工作原理
你觉得怎么使用它呢？

00:40:24.858 --> 00:40:28.362 align:middle line:-2
内存实际上代表了
你的设备的总体空间

00:40:28.695 --> 00:40:31.732 align:middle line:-1
而且是性能的最佳聚合指标

00:40:31.798 --> 00:40:34.701 align:middle line:-2
这是一个非常好的选择
通过使用更大或更丰富的资源

00:40:34.768 --> 00:40:37.437 align:middle line:-2
更详细的资料
比磁盘空间更大的资料

00:40:37.504 --> 00:40:38.839 align:middle line:-1
以及占有更多储存空间

00:40:38.906 --> 00:40:41.942 align:middle line:-1
当它们在内存中拓展用于渲染时

00:40:42.609 --> 00:40:45.746 align:middle line:-2
丰富的用户体验通常
需要更高的内存

00:40:45.812 --> 00:40:47.915 align:middle line:-2
更高质量的图形
需要更精细的要求

00:40:47.981 --> 00:40:50.417 align:middle line:-1
因为它记录设备的原始处理能力

00:40:50.484 --> 00:40:52.686 align:middle line:-1
包括CPU和GPU

00:40:52.753 --> 00:40:54.755 align:middle line:-1
因此它适合处理更复杂的资源

00:40:55.455 --> 00:40:58.725 align:middle line:-2
也许 你使用了着色器
该着色器利用了

00:40:58.792 --> 00:41:00.961 align:middle line:-2
某些仅在特定GPU上
可用的某些功能

00:40:58.792 --> 00:41:00.961 align:middle line:-2
某些仅在特定GPU上
可用的某些功能

00:41:01.028 --> 00:41:05.566 align:middle line:-2
或者你放置的资源需要
比其他处理更多的运算

00:41:06.433 --> 00:41:08.535 align:middle line:-1
我想举两个简单的例子

00:41:09.203 --> 00:41:11.271 align:middle line:-2
作为思考的重点
以及它如何起作用

00:41:11.338 --> 00:41:12.940 align:middle line:-1
（使用性能类）

00:41:13.006 --> 00:41:16.443 align:middle line:-2
我想举例介绍下
NSDataAsset

00:41:16.944 --> 00:41:19.880 align:middle line:-2
NSDataAsset是资产目录
中的一个简单部分

00:41:19.947 --> 00:41:21.181 align:middle line:-1
但是它非常强大

00:41:21.248 --> 00:41:23.851 align:middle line:-2
它主要是提供一个
灵活的容器的方法

00:41:23.917 --> 00:41:27.154 align:middle line:-1
你可以在资源目录中的任何文件中

00:41:27.221 --> 00:41:29.223 align:middle line:-1
放置内容变量

00:41:29.790 --> 00:41:30.891 align:middle line:-1
这不一定是一个图像

00:41:30.958 --> 00:41:32.125 align:middle line:-1
不一定是一个非常具体的格式

00:41:32.192 --> 00:41:33.193 align:middle line:-1
这可以是任何东西

00:41:33.527 --> 00:41:37.231 align:middle line:-2
但是你可以将其在app精简中
与资源目录一起使用

00:41:37.297 --> 00:41:40.934 align:middle line:-2
将任意的数据发送到
不同的性能类中

00:41:41.001 --> 00:41:44.605 align:middle line:-1
例如游戏中的剪切场景视频

00:41:45.873 --> 00:41:48.308 align:middle line:-1
你可能会提供一个很好的视频

00:41:48.375 --> 00:41:50.978 align:middle line:-2
你可以把它放在
性能范围的中间层级

00:41:51.945 --> 00:41:54.314 align:middle line:-2
然后你就有了一个
非常棒的高分辨率

00:41:54.381 --> 00:41:55.816 align:middle line:-1
它甚至可能是HDR 谁知道呢？

00:41:55.883 --> 00:41:59.219 align:middle line:-1
你可以将视频放在性能范围

00:41:59.286 --> 00:42:00.954 align:middle line:-1
的合适象限内

00:41:59.286 --> 00:42:00.954 align:middle line:-1
的合适象限内

00:42:01.021 --> 00:42:04.591 align:middle line:-1
然后在低端 你可以放置静态图像

00:42:04.658 --> 00:42:07.794 align:middle line:-2
或是简单的图像序列 这些图像序列
不会占用设备上的任何时间

00:42:07.861 --> 00:42:09.997 align:middle line:-1
或过多的资源

00:42:10.063 --> 00:42:12.232 align:middle line:-1
你可以为仍然使用旧设备的用户

00:42:12.299 --> 00:42:14.535 align:middle line:-1
提供良好且响应迅速的用户体验

00:42:16.003 --> 00:42:17.004 align:middle line:-1
这是其中一个例子

00:42:17.070 --> 00:42:19.373 align:middle line:-1
另一个更有趣的例子是plist

00:42:19.439 --> 00:42:21.241 align:middle line:-1
为何我把plist放入资源目录？

00:42:21.308 --> 00:42:24.444 align:middle line:-2
似乎有比资源目录
更好的方式来部署plist

00:42:24.511 --> 00:42:28.615 align:middle line:-2
比如说 当你将它与
NSDataAsset结合使用时

00:42:28.682 --> 00:42:31.318 align:middle line:-2
你可以考虑使用plist来
调整你的app

00:42:32.186 --> 00:42:35.989 align:middle line:-2
并在你的NSDataAsset中
使用不同的配置参数

00:42:36.056 --> 00:42:40.327 align:middle line:-2
这些参数根据你编入plist的
性能等级进行调整

00:42:40.394 --> 00:42:42.095 align:middle line:-1
例如 如果你有

00:42:43.130 --> 00:42:45.933 align:middle line:-1
一个渲染人群的app

00:42:45.999 --> 00:42:48.902 align:middle line:-1
你可以根据底层硬件的性能

00:42:48.969 --> 00:42:50.270 align:middle line:-1
设置人群的大小

00:42:50.337 --> 00:42:53.807 align:middle line:-1
你的代码将根据当时运行的设备

00:42:53.874 --> 00:42:56.910 align:middle line:-1
自动进行自我调整

00:42:57.644 --> 00:43:00.747 align:middle line:-2
这就是有关如何使用
性能类的方法

00:42:57.644 --> 00:43:00.747 align:middle line:-2
这就是有关如何使用
性能类的方法

00:43:02.883 --> 00:43:05.452 align:middle line:-1
接下来我想介绍下精灵地图集

00:43:06.053 --> 00:43:09.823 align:middle line:-1
精灵地图集是在几年前推出的

00:43:10.324 --> 00:43:14.127 align:middle line:-2
用来支持SpriteKit
游戏中的SpriteKit

00:43:14.194 --> 00:43:15.195 align:middle line:-1
（精灵地图集）

00:43:15.262 --> 00:43:16.096 align:middle line:-1
那么…

00:43:16.463 --> 00:43:20.534 align:middle line:-2
我不打算在SpriteKit
游戏的背景下讨论它们

00:43:20.601 --> 00:43:23.837 align:middle line:-1
我将在常规app的环境中讨论它们

00:43:25.372 --> 00:43:28.509 align:middle line:-1
它们有一些属性

00:43:28.575 --> 00:43:30.978 align:middle line:-2
跟Will介绍过的
自动化图像打包很相似

00:43:31.044 --> 00:43:33.480 align:middle line:-2
你要采集精灵地图集中的
所有相关图像

00:43:33.547 --> 00:43:35.015 align:middle line:-1
并将它们打包成一个单元

00:43:35.082 --> 00:43:36.717 align:middle line:-1
它们会立即被加载

00:43:36.783 --> 00:43:40.320 align:middle line:-2
然后包含在该地图集中的
所有引用的图像

00:43:40.387 --> 00:43:44.391 align:middle line:-1
都只是轻量级引用地图集中的位置

00:43:45.425 --> 00:43:46.360 align:middle line:-1
这很棒

00:43:48.295 --> 00:43:49.463 align:middle line:-1
但关键问题所在就是

00:43:49.530 --> 00:43:52.366 align:middle line:-2
你并不需要
使用SpriteKit来访问它们

00:43:52.432 --> 00:43:54.334 align:middle line:-1
你可以就将其作为分组机制使用

00:43:54.401 --> 00:43:56.270 align:middle line:-2
因为Sprite地图集与
自动化图像打包的不同是

00:43:56.336 --> 00:43:59.339 align:middle line:-1
你可以控制分组

00:43:59.640 --> 00:44:01.074 align:middle line:-1
并且可以为其分配名称

00:43:59.640 --> 00:44:01.074 align:middle line:-1
并且可以为其分配名称

00:44:01.141 --> 00:44:02.042 align:middle line:-1
你可以处理它

00:44:02.109 --> 00:44:05.345 align:middle line:-2
你可以控制它们
并以某种方式进行管理

00:44:06.146 --> 00:44:08.782 align:middle line:-2
不过你还是可以通过使用标准化的
UIImage和NSImage API

00:44:08.849 --> 00:44:12.553 align:middle line:-1
来访问里面的图像

00:44:12.619 --> 00:44:13.854 align:middle line:-1
还有它里面的名称

00:44:13.921 --> 00:44:14.755 align:middle line:-1
另外

00:44:15.289 --> 00:44:17.858 align:middle line:-2
还有一种使用SpriteKit
框架的有趣方式

00:44:17.925 --> 00:44:20.327 align:middle line:-2
即使你构建的不是
SpriteKit app

00:44:20.627 --> 00:44:21.628 align:middle line:-1
但是通过利用

00:44:21.695 --> 00:44:24.998 align:middle line:-2
SKTextureAtlas
名叫预加载栅格化地图集的API

00:44:25.065 --> 00:44:28.068 align:middle line:-1
如果你需要载入大量的图片

00:44:28.135 --> 00:44:31.939 align:middle line:-2
需要很快的加载
并且需要立即使用

00:44:32.005 --> 00:44:33.340 align:middle line:-1
那么这个API

00:44:33.407 --> 00:44:36.176 align:middle line:-1
会预先加载或从磁盘加载并解码

00:44:36.243 --> 00:44:38.011 align:middle line:-1
在内存中做好准备

00:44:38.712 --> 00:44:41.882 align:middle line:-1
并为一个已命名的地图集

00:44:42.382 --> 00:44:44.751 align:middle line:-2
异步回调一个
已完成处理的回调完成句柄

00:44:44.818 --> 00:44:45.752 align:middle line:-1
这很棒

00:44:46.386 --> 00:44:47.454 align:middle line:-1
但我要提醒你

00:44:47.521 --> 00:44:49.756 align:middle line:-1
不要随意使用这个API

00:44:50.657 --> 00:44:53.227 align:middle line:-1
因为它会完全按照它所说的去做

00:44:53.827 --> 00:44:56.930 align:middle line:-1
这意味着它可能会消耗大量的

00:44:56.997 --> 00:45:00.901 align:middle line:-1
I/O和内存来加载所有这些图像

00:44:56.997 --> 00:45:00.901 align:middle line:-1
I/O和内存来加载所有这些图像

00:45:00.968 --> 00:45:03.804 align:middle line:-1
所以请确保你会马上使用它们

00:45:03.871 --> 00:45:04.905 align:middle line:-1
这就是正确的选择

00:45:05.305 --> 00:45:07.374 align:middle line:-1
否则就会有没用的东西

00:45:10.077 --> 00:45:13.447 align:middle line:-1
精灵地图集的另一个强大之处在于

00:45:13.514 --> 00:45:18.285 align:middle line:-1
其中的任何图像都具有所有

00:45:18.352 --> 00:45:21.288 align:middle line:-2
在代码资源目录中
任何其他常规图像集的所有功能

00:45:21.355 --> 00:45:23.090 align:middle line:-1
包括所有的目录功能

00:45:23.624 --> 00:45:25.158 align:middle line:-1
所有压缩设置

00:45:25.459 --> 00:45:27.694 align:middle line:-1
以及所有的app精简功能

00:45:27.761 --> 00:45:31.098 align:middle line:-2
我们会注意自动
分割和整理你提供的

00:45:31.164 --> 00:45:32.065 align:middle line:-1
所有图像

00:45:32.666 --> 00:45:34.701 align:middle line:-1
按照像素格式

00:45:34.768 --> 00:45:37.337 align:middle line:-2
不同的设备特征
和不同的压缩类型分割它们

00:45:37.404 --> 00:45:39.173 align:middle line:-1
并确保所有内容都得到热处理

00:45:39.239 --> 00:45:40.307 align:middle line:-1
然后适当地进行精简

00:45:40.374 --> 00:45:44.144 align:middle line:-2
以便数据以正确的方式
传送到正确的设备

00:45:46.980 --> 00:45:49.416 align:middle line:-1
这些是关于部署的一些有趣的细节

00:45:49.483 --> 00:45:50.984 align:middle line:-1
我们在这项工作中的最后阶段

00:45:51.385 --> 00:45:53.320 align:middle line:-1
因此 我想提醒你

00:45:53.387 --> 00:45:54.922 align:middle line:-1
优化app资产的重要事项

00:45:54.988 --> 00:45:58.458 align:middle line:-1
首先 我认为Xcode资源目录

00:45:58.525 --> 00:46:01.828 align:middle line:-2
确实是管理你的app中
图像资源的最佳选择

00:45:58.525 --> 00:46:01.828 align:middle line:-2
确实是管理你的app中
图像资源的最佳选择

00:46:01.895 --> 00:46:06.066 align:middle line:-1
今年你只需使用我们新的压缩算法

00:46:06.133 --> 00:46:08.402 align:middle line:-2
就可以使占用的
磁盘空间减少10%到20%

00:46:08.735 --> 00:46:11.271 align:middle line:-1
无论你采用何种部署目标

00:46:11.338 --> 00:46:14.474 align:middle line:-2
你在iOS 12平台上的用户
都会获得这些优势

00:46:14.541 --> 00:46:16.743 align:middle line:-1
这要归功于app精简的改进

00:46:16.810 --> 00:46:20.113 align:middle line:-1
现在可以优化最新的操作系统

00:46:20.714 --> 00:46:23.784 align:middle line:-1
而且 我们拥有大量的目录功能

00:46:23.851 --> 00:46:26.086 align:middle line:-2
你可以使用这些功能
来调整app的资源

00:46:26.153 --> 00:46:28.222 align:middle line:-1
来适应用户使用的设备

00:46:29.823 --> 00:46:34.261 align:middle line:-2
要了解相关的更多信息
请看看这个链接

00:46:34.328 --> 00:46:35.696 align:middle line:-1
（更多内容）

00:46:35.762 --> 00:46:37.264 align:middle line:-1
希望你们今天过得愉快

00:46:37.664 --> 00:46:38.565 align:middle line:-1
谢谢大家
