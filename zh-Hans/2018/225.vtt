WEBVTT

00:00:07.516 --> 00:00:15.500 A:middle
［ 音乐 ］

00:00:22.516 --> 00:00:29.546 A:middle
［ 掌声 ］

00:00:30.046 --> 00:00:30.906 A:middle
&gt;&gt; 下午好

00:00:30.906 --> 00:00:32.576 A:middle
欢迎来到

00:00:32.576 --> 00:00:33.536 A:middle
UICollectionView 之旅

00:00:34.336 --> 00:00:35.556 A:middle
我是 Steve Breen 我

00:00:35.556 --> 00:00:36.726 A:middle
把这个放在这 我是

00:00:36.726 --> 00:00:38.686 A:middle
UIKit 团队的一名结构工程师

00:00:39.766 --> 00:00:41.516 A:middle
今天舞台上除了我

00:00:41.516 --> 00:00:42.896 A:middle
还有我的同事 Mohammed

00:00:42.896 --> 00:00:45.636 A:middle
Jisrawi 他也是 UIKit 团队的

00:00:48.906 --> 00:00:49.836 A:middle
所以今天我们将做

00:00:49.836 --> 00:00:50.936 A:middle
一些有点不同的事

00:00:51.516 --> 00:00:52.966 A:middle
我们从我们的设计师 Breanka［ 音译 ］

00:00:52.966 --> 00:00:54.296 A:middle
中获得了一些规格

00:00:54.296 --> 00:00:55.496 A:middle
我们将用这些规格建立一个 App

00:00:56.006 --> 00:00:58.876 A:middle
这将会应用到 UICollectionView

00:00:58.876 --> 00:00:59.756 A:middle
的许多功能当中

00:01:00.156 --> 00:01:02.086 A:middle
现在 当我们完成建立

00:01:02.086 --> 00:01:03.916 A:middle
我们的 App 需要的所有工作

00:01:03.916 --> 00:01:05.266 A:middle
我们将接触到

00:01:05.266 --> 00:01:08.616 A:middle
广泛的话题和 UICollectionView 有关 包括

00:01:08.886 --> 00:01:11.606 A:middle
布局 更新和动画

00:01:12.356 --> 00:01:14.026 A:middle
所以我们要涉及很多方面

00:01:14.026 --> 00:01:15.326 A:middle
让我们直接进入正题吧

00:01:17.116 --> 00:01:19.106 A:middle
好 所以这是我们从设计师那里得到

00:01:19.106 --> 00:01:20.526 A:middle
的第一个规格

00:01:20.716 --> 00:01:21.916 A:middle
看起来像 FriendFeed

00:01:21.916 --> 00:01:22.406 A:middle
想象一下

00:01:22.406 --> 00:01:24.336 A:middle
一个很小的柱状布局

00:01:24.996 --> 00:01:28.826 A:middle
看起来很简单

00:01:28.826 --> 00:01:28.976 A:middle
好

00:01:29.076 --> 00:01:30.086 A:middle
好 这看起来很棒

00:01:30.526 --> 00:01:31.526 A:middle
所以我们看到了这个

00:01:31.626 --> 00:01:33.296 A:middle
看起来很棒的花式镶嵌布局

00:01:33.446 --> 00:01:34.786 A:middle
这正是我们的

00:01:34.786 --> 00:01:35.436 A:middle
FriendFeed 的内容

00:01:36.176 --> 00:01:37.966 A:middle
好的 Mohammed 既然你

00:01:37.966 --> 00:01:38.826 A:middle
将要为我们写所有

00:01:38.826 --> 00:01:39.936 A:middle
代码 快速教我们

00:01:39.936 --> 00:01:41.806 A:middle
怎样使用这些功能

00:01:41.806 --> 00:01:42.476 A:middle
你设计这些的想法

00:01:42.516 --> 00:01:43.046 A:middle
是什么

00:01:43.256 --> 00:01:44.096 A:middle
&gt;&gt; 你知道的 我是

00:01:44.096 --> 00:01:45.526 A:middle
第一次看到这些 但是

00:01:45.716 --> 00:01:47.346 A:middle
它们看起来都是不错的 CollectionView

00:01:47.346 --> 00:01:48.096 A:middle
候选人

00:01:48.166 --> 00:01:49.186 A:middle
我认为用这个有

00:01:49.186 --> 00:01:50.146 A:middle
很多乐趣

00:01:50.146 --> 00:01:50.956 A:middle
&gt;&gt; 好的 这看起来很棒

00:01:51.716 --> 00:01:52.746 A:middle
好

00:01:52.746 --> 00:01:55.626 A:middle
所以在我们钻研代码

00:01:55.626 --> 00:01:56.686 A:middle
Mohammed 开始带领我们

00:01:56.686 --> 00:01:58.566 A:middle
浏览之前 需要

00:01:58.786 --> 00:02:00.196 A:middle
涉及三个关于 CollectionView 我们

00:01:58.786 --> 00:02:00.196 A:middle
涉及三个关于 CollectionView 我们

00:02:00.196 --> 00:02:01.596 A:middle
要理解的三个概念

00:02:01.596 --> 00:02:02.766 A:middle
然后再钻研代码

00:02:02.766 --> 00:02:04.236 A:middle
让我们开始吧 我们

00:02:04.236 --> 00:02:05.896 A:middle
将要谈论布局

00:02:06.006 --> 00:02:09.936 A:middle
数据源和委托

00:02:10.036 --> 00:02:11.496 A:middle
好的 所以 首先让我们

00:02:11.496 --> 00:02:13.086 A:middle
谈论一些关于布局的事情

00:02:13.646 --> 00:02:15.566 A:middle
如果你第一次

00:02:15.566 --> 00:02:16.706 A:middle
开始研究 UICollectionView 的定义

00:02:16.706 --> 00:02:18.876 A:middle
而且你对

00:02:18.876 --> 00:02:20.546 A:middle
UITableView 很熟悉

00:02:20.546 --> 00:02:21.716 A:middle
你会立马注意到在

00:02:21.716 --> 00:02:22.936 A:middle
API 中有很多熟悉的地方

00:02:22.936 --> 00:02:25.676 A:middle
你有一个委托和一个数据源

00:02:25.676 --> 00:02:26.686 A:middle
所有这些看起来都很

00:02:26.686 --> 00:02:28.856 A:middle
熟悉 但是这个布局

00:02:28.856 --> 00:02:30.796 A:middle
概念很独特

00:02:30.846 --> 00:02:32.306 A:middle
而且不同于

00:02:32.306 --> 00:02:33.176 A:middle
UICollectionView

00:02:33.176 --> 00:02:34.146 A:middle
你可以把它看做 UICollectionView

00:02:34.146 --> 00:02:35.656 A:middle
的超能力

00:02:36.846 --> 00:02:38.146 A:middle
它允许 CollectionView

00:02:38.146 --> 00:02:39.746 A:middle
从内容中抽象出

00:02:39.746 --> 00:02:40.936 A:middle
与内容本身分离的

00:02:41.336 --> 00:02:43.326 A:middle
视觉安排

00:02:44.416 --> 00:02:45.816 A:middle
布局是所有关于

00:02:46.146 --> 00:02:47.216 A:middle
内容安排在哪里的事情

00:02:48.946 --> 00:02:52.206 A:middle
现在 每个单独的项都是由

00:02:52.206 --> 00:02:53.046 A:middle
UICollectionView 的

00:02:53.046 --> 00:02:54.066 A:middle
布局属性

00:02:54.066 --> 00:02:56.646 A:middle
指定 比如像

00:02:56.646 --> 00:02:59.116 A:middle
界限 中心和帧这样的属性

00:02:59.656 --> 00:03:00.716 A:middle
你可以把它看做一套

00:02:59.656 --> 00:03:00.716 A:middle
你可以把它看做一套

00:03:00.716 --> 00:03:02.566 A:middle
你可以使用的特性 用来定义

00:03:02.566 --> 00:03:03.866 A:middle
这些可以展示的项目

00:03:03.896 --> 00:03:06.206 A:middle
你甚至可以自定义它们 通过

00:03:06.206 --> 00:03:07.886 A:middle
打印你的 UICollectionView 布局

00:03:07.886 --> 00:03:08.826 A:middle
属性中的子类

00:03:08.826 --> 00:03:10.676 A:middle
把这些都包含在你的

00:03:10.676 --> 00:03:11.546 A:middle
设计当中

00:03:12.876 --> 00:03:14.996 A:middle
好 所以当用户

00:03:14.996 --> 00:03:16.496 A:middle
滚动浏览屏幕上的

00:03:16.496 --> 00:03:19.636 A:middle
内容 布局被认为是不能改变的

00:03:20.266 --> 00:03:22.186 A:middle
现在如果你需要改变这个

00:03:22.186 --> 00:03:23.716 A:middle
比如你将要

00:03:23.716 --> 00:03:24.916 A:middle
改变一个布局的外观

00:03:24.916 --> 00:03:26.616 A:middle
你要使用

00:03:26.616 --> 00:03:28.116 A:middle
无效化机制

00:03:28.116 --> 00:03:29.256 A:middle
Mohammed 将会带领我们

00:03:29.256 --> 00:03:31.526 A:middle
快速浏览一下

00:03:31.526 --> 00:03:33.936 A:middle
好的 现在 关于布局是一个

00:03:33.996 --> 00:03:35.066 A:middle
单独的抽象的很棒的一件事是

00:03:35.066 --> 00:03:37.226 A:middle
我们可以

00:03:37.226 --> 00:03:38.306 A:middle
从一个布局转换到另一个

00:03:38.306 --> 00:03:40.616 A:middle
布局中 当你在不同布局中

00:03:40.616 --> 00:03:42.026 A:middle
移动 会有一个动画效果

00:03:42.026 --> 00:03:44.526 A:middle
布局 A 不必

00:03:44.526 --> 00:03:46.156 A:middle
知道任何关于

00:03:46.446 --> 00:03:47.076 A:middle
布局 B 的事情

00:03:47.286 --> 00:03:48.056 A:middle
它们只是

00:03:48.056 --> 00:03:49.526 A:middle
声明这个布局将变成什么样子

00:03:49.526 --> 00:03:50.396 A:middle
然后转换就发生了

00:03:51.986 --> 00:03:54.926 A:middle
好 所以 CollectionViewLayout 是

00:03:54.926 --> 00:03:56.656 A:middle
一个抽象类别 正因如此

00:03:56.656 --> 00:03:58.686 A:middle
这意味着不能直接

00:03:58.686 --> 00:04:00.976 A:middle
被使用 但是 CollectionViewLayout 的

00:03:58.686 --> 00:04:00.976 A:middle
被使用 但是 CollectionViewLayout 的

00:04:00.976 --> 00:04:02.726 A:middle
子类可以直接被使用

00:04:04.036 --> 00:04:05.646 A:middle
幸运的是 我们会提供一个

00:04:06.556 --> 00:04:08.896 A:middle
UICollectionViewFlowLayout

00:04:08.896 --> 00:04:10.566 A:middle
如果你之前用过 CollectionView

00:04:10.566 --> 00:04:11.376 A:middle
你可能对它很熟悉

00:04:11.986 --> 00:04:13.736 A:middle
现在 CollectionViewLayout 上

00:04:13.736 --> 00:04:15.026 A:middle
有很多定制点

00:04:15.026 --> 00:04:17.906 A:middle
包括一些我们一会儿要讲的

00:04:17.906 --> 00:04:19.666 A:middle
特性 但是你

00:04:19.666 --> 00:04:21.176 A:middle
也可以使用委托进行

00:04:21.176 --> 00:04:23.646 A:middle
自定义 我们马上

00:04:23.646 --> 00:04:24.616 A:middle
会谈论到 CollectionViewDelegate

00:04:24.616 --> 00:04:27.656 A:middle
但是 CollectionViewFlowLayout 将会

00:04:28.216 --> 00:04:30.156 A:middle
指定一些额外的东西

00:04:30.156 --> 00:04:32.026 A:middle
扩展到 CollectionViewDelegate

00:04:34.496 --> 00:04:35.986 A:middle
好的 所以 Flow 是关于什么的

00:04:35.986 --> 00:04:37.746 A:middle
它是一个基于线的布局

00:04:37.746 --> 00:04:39.946 A:middle
系统 正因如此

00:04:39.946 --> 00:04:41.796 A:middle
它可以包括多种

00:04:41.796 --> 00:04:43.666 A:middle
你可能享受到的不同设计

00:04:48.286 --> 00:04:49.176 A:middle
让我们浏览一下

00:04:49.176 --> 00:04:51.406 A:middle
解释什么是基于线的系统

00:04:51.476 --> 00:04:54.416 A:middle
的最好方法是像这样

00:04:54.416 --> 00:04:55.856 A:middle
给出一个例子 让我们开始吧

00:04:56.556 --> 00:04:57.936 A:middle
好的 所以在这我们可以看到 我们得到了

00:04:57.936 --> 00:04:59.486 A:middle
一个垂直的滚动集合

00:04:59.486 --> 00:05:01.396 A:middle
视图 我们将模拟

00:04:59.486 --> 00:05:01.396 A:middle
视图 我们将模拟

00:05:01.396 --> 00:05:02.786 A:middle
Flow 布局是什么样的

00:05:02.786 --> 00:05:04.086 A:middle
当它展示出这个内容时

00:05:04.606 --> 00:05:04.936 A:middle
好的

00:05:05.866 --> 00:05:07.806 A:middle
这是我们的第一个项目 我们

00:05:07.806 --> 00:05:10.036 A:middle
在顶部的前沿开始

00:05:10.416 --> 00:05:12.126 A:middle
我们开始沿着一条线

00:05:12.126 --> 00:05:14.326 A:middle
布局我们的项目

00:05:14.326 --> 00:05:15.216 A:middle
现在看这条线

00:05:15.216 --> 00:05:18.006 A:middle
这条线和滚动轴垂直

00:05:18.006 --> 00:05:20.126 A:middle
我们垂直滚动 所以这个线是水平的

00:05:21.366 --> 00:05:22.796 A:middle
好了 现在注意到

00:05:22.796 --> 00:05:24.266 A:middle
在这条线的空白处

00:05:24.266 --> 00:05:25.646 A:middle
填满了项目 我们将

00:05:25.756 --> 00:05:28.046 A:middle
下降到另一条线

00:05:28.046 --> 00:05:29.696 A:middle
继续布局我们的内容

00:05:30.216 --> 00:05:32.306 A:middle
最终 我们落到了

00:05:32.306 --> 00:05:35.366 A:middle
最后一条线 我们得到了所有的内容

00:05:36.756 --> 00:05:38.596 A:middle
现在如果我进行一些指示

00:05:38.596 --> 00:05:39.976 A:middle
来突出显示

00:05:39.976 --> 00:05:41.556 A:middle
这些水平线的地方

00:05:42.496 --> 00:05:44.926 A:middle
让我们谈谈一些已有的定义

00:05:45.206 --> 00:05:46.586 A:middle
作为自定义 Flow 的方法

00:05:47.306 --> 00:05:49.986 A:middle
首先是行间距的概念

00:05:50.906 --> 00:05:52.076 A:middle
正如你在这看到的箭头

00:05:52.076 --> 00:05:53.586 A:middle
行间距将要成为

00:05:53.586 --> 00:05:55.536 A:middle
这些水平线之间的间距

00:05:56.676 --> 00:06:00.166 A:middle
相似的是 项目之间的间距

00:05:56.676 --> 00:06:00.166 A:middle
相似的是 项目之间的间距

00:06:00.166 --> 00:06:03.426 A:middle
指的是这些沿着这个布局线 项目之间的间距

00:06:03.616 --> 00:06:06.176 A:middle
在 Flow 布局中我们有两个属性 让你指定

00:06:06.496 --> 00:06:07.996 A:middle
他们之间的最小值

00:06:08.536 --> 00:06:11.006 A:middle
好的 所以让我们巩固一下

00:06:11.006 --> 00:06:13.736 A:middle
我们的直觉 然后旋转整个画面

00:06:13.736 --> 00:06:15.786 A:middle
让我们开始于

00:06:15.786 --> 00:06:17.276 A:middle
顶部的前沿

00:06:17.956 --> 00:06:20.756 A:middle
现在 这个是水平滚动 好了 所以我们

00:06:20.756 --> 00:06:24.496 A:middle
将要画一个垂直的布局线

00:06:24.496 --> 00:06:25.606 A:middle
当我们到达这个区域的底部

00:06:25.606 --> 00:06:27.716 A:middle
我们就填满了这条线 回到顶部

00:06:28.646 --> 00:06:30.676 A:middle
好的 这个图案现在非常熟悉了

00:06:31.526 --> 00:06:32.196 A:middle
继续

00:06:32.196 --> 00:06:33.386 A:middle
这是我们的所有内容

00:06:34.116 --> 00:06:36.236 A:middle
现在我们有了垂直布局线

00:06:36.926 --> 00:06:38.856 A:middle
所以按照这个方向 我们的

00:06:39.226 --> 00:06:40.596 A:middle
行间距是这样的

00:06:41.876 --> 00:06:44.426 A:middle
我们的项目之间的间距是这样的

00:06:45.266 --> 00:06:46.186 A:middle
当你在使用 Flow 布局时

00:06:46.186 --> 00:06:47.086 A:middle
记住这个很关键

00:06:48.426 --> 00:06:49.636 A:middle
好的 所以这就是布局

00:06:50.366 --> 00:06:52.316 A:middle
让我们谈论一点

00:06:52.316 --> 00:06:54.996 A:middle
数据来源 如果你使用

00:06:54.996 --> 00:06:56.746 A:middle
TableView 这个应该看起来

00:06:56.746 --> 00:06:57.486 A:middle
很熟悉

00:06:57.486 --> 00:06:58.606 A:middle
这是一个很简单的图案

00:06:59.436 --> 00:07:00.936 A:middle
他们分享相似的 API

00:06:59.436 --> 00:07:00.936 A:middle
他们分享相似的 API

00:07:00.936 --> 00:07:03.416 A:middle
好 所以如果布局是

00:07:03.416 --> 00:07:05.766 A:middle
关于内容摆放在哪里的所有事情

00:07:06.276 --> 00:07:07.756 A:middle
数据源就是内容是什么

00:07:07.916 --> 00:07:08.986 A:middle
内容本身是什么

00:07:09.836 --> 00:07:11.816 A:middle
有三种核心办法以供思考

00:07:11.816 --> 00:07:12.746 A:middle
第一个是可选的

00:07:12.846 --> 00:07:13.686 A:middle
在 CollectionView 中的许多部分

00:07:13.686 --> 00:07:16.026 A:middle
如果你不提供这个

00:07:16.026 --> 00:07:18.086 A:middle
我们就会认为你有一个

00:07:19.336 --> 00:07:21.446 A:middle
相似的是 我们在这一部分

00:07:21.446 --> 00:07:24.556 A:middle
有很多项目 这将会告诉你

00:07:24.556 --> 00:07:25.346 A:middle
每个单独部分的项目数量

00:07:25.346 --> 00:07:26.986 A:middle
因为它们可以有所有不同的项目

00:07:27.536 --> 00:07:29.026 A:middle
最后一个 出售

00:07:29.026 --> 00:07:30.206 A:middle
项目索引路径就是

00:07:30.206 --> 00:07:31.546 A:middle
你为你的客户提供

00:07:31.546 --> 00:07:32.836 A:middle
你将要展示的真实内容

00:07:33.506 --> 00:07:35.686 A:middle
好的 这就是数据源

00:07:36.076 --> 00:07:37.736 A:middle
好的 在我们和 Mohammed 钻研

00:07:37.736 --> 00:07:38.846 A:middle
代码之前 我们将要谈论的

00:07:39.086 --> 00:07:42.086 A:middle
三个话题中的最后一个是委托

00:07:42.726 --> 00:07:45.786 A:middle
好的 所以使用委托是可选的

00:07:47.226 --> 00:07:48.576 A:middle
现在 CollectionView 是

00:07:48.576 --> 00:07:50.036 A:middle
UIScrollView 中的一个子类

00:07:50.476 --> 00:07:52.256 A:middle
所以我们使用

00:07:52.686 --> 00:07:54.276 A:middle
由 ScrollView 超类

00:07:54.276 --> 00:07:56.696 A:middle
提供的相同委托 但是我们扩展它

00:07:57.526 --> 00:07:58.646 A:middle
所以如果你需要修改

00:07:58.906 --> 00:08:00.116 A:middle
滚动行为 你可以

00:07:58.906 --> 00:08:00.116 A:middle
滚动行为 你可以

00:08:00.116 --> 00:08:01.426 A:middle
在相同的委托中来进行

00:08:01.426 --> 00:08:03.826 A:middle
也可以使用

00:08:03.826 --> 00:08:06.216 A:middle
一些 UICollectionViewDelegate 中的

00:08:06.216 --> 00:08:08.496 A:middle
方法 提供一些细粒度控制

00:08:08.616 --> 00:08:11.176 A:middle
当用户和你的内容交互时

00:08:11.176 --> 00:08:12.686 A:middle
控制高亮和选中

00:08:13.206 --> 00:08:15.796 A:middle
我们也会进入一个 API

00:08:15.796 --> 00:08:17.086 A:middle
让你知道 有一些东西

00:08:17.086 --> 00:08:18.016 A:middle
出现在屏幕上

00:08:18.016 --> 00:08:19.426 A:middle
WillDisplayItem 和

00:08:19.426 --> 00:08:20.636 A:middle
DidEndDisplayingItem

00:08:21.116 --> 00:08:24.816 A:middle
好的 所以在我们钻研代码

00:08:24.816 --> 00:08:26.196 A:middle
开始 UICollectionView 之前

00:08:26.196 --> 00:08:28.156 A:middle
有三个重要概念

00:08:28.266 --> 00:08:30.936 A:middle
我们需要谈论一下

00:08:30.936 --> 00:08:32.775 A:middle
所以让我们切换到

00:08:32.775 --> 00:08:34.226 A:middle
Mohammed 的 Dev Box

00:08:34.496 --> 00:08:35.395 A:middle
让他向我们展示下它是怎么工作的

00:08:35.556 --> 00:08:35.846 A:middle
Mohammed

00:08:35.846 --> 00:08:38.746 A:middle
&gt;&gt; 好的 所以

00:08:38.746 --> 00:08:40.596 A:middle
两个列布局屏幕中的第一个

00:08:40.596 --> 00:08:42.706 A:middle
就是使用 CollectionViewFlowLayout 的

00:08:42.706 --> 00:08:44.626 A:middle
一个绝佳案例

00:08:45.106 --> 00:08:46.376 A:middle
我们可以完成

00:08:46.376 --> 00:08:47.896 A:middle
我们需要的任何事情

00:08:47.896 --> 00:08:49.996 A:middle
这也会是我们

00:08:50.106 --> 00:08:52.036 A:middle
开始使用 UICollectionView 的一种很好方式

00:08:54.596 --> 00:08:56.686 A:middle
所以现在当我们可以用一个 Flow 布局

00:08:56.686 --> 00:08:58.896 A:middle
完成整个设计目标时

00:08:58.896 --> 00:09:00.216 A:middle
我实际上

00:08:58.896 --> 00:09:00.216 A:middle
我实际上

00:09:00.216 --> 00:09:01.036 A:middle
是来到了 CollectionViewFlowLayout 的

00:09:01.036 --> 00:09:02.566 A:middle
子类因为

00:09:02.566 --> 00:09:03.346 A:middle
我们将要再做一些

00:09:03.346 --> 00:09:04.576 A:middle
额外的定制化服务

00:09:04.756 --> 00:09:06.596 A:middle
所以我将要开始

00:09:07.646 --> 00:09:10.436 A:middle
创立一个我的

00:09:10.436 --> 00:09:12.066 A:middle
ColumnFlowLayout 分类的实例

00:09:12.066 --> 00:09:12.916 A:middle
我准备好了

00:09:13.756 --> 00:09:15.276 A:middle
我将要使用这个实例

00:09:15.276 --> 00:09:17.276 A:middle
来建立我的 CollectionView

00:09:17.276 --> 00:09:18.946 A:middle
我将要移动这个

00:09:18.946 --> 00:09:19.956 A:middle
CollectionView 并且

00:09:19.956 --> 00:09:21.576 A:middle
设置一些视图属性 比如

00:09:21.576 --> 00:09:23.356 A:middle
自动调整掩码 背景

00:09:23.356 --> 00:09:25.356 A:middle
颜色 因为它是

00:09:25.356 --> 00:09:26.876 A:middle
ScrollView 我也可以设置

00:09:26.876 --> 00:09:28.296 A:middle
一些 ScrollView 的属性

00:09:28.296 --> 00:09:29.406 A:middle
这一切只是为了让它

00:09:29.406 --> 00:09:31.126 A:middle
看起来和感受起来就像我想为

00:09:31.276 --> 00:09:33.086 A:middle
大家在我们的 App 上所呈现的那样

00:09:33.426 --> 00:09:34.786 A:middle
在把 CollectionView 添加到

00:09:34.786 --> 00:09:36.596 A:middle
我的视图层以后 我将要

00:09:36.596 --> 00:09:38.816 A:middle
注册我的 PersonCell 类

00:09:38.816 --> 00:09:40.706 A:middle
在 CollectionView 上使用独特的

00:09:40.706 --> 00:09:42.536 A:middle
标识符 所以我们可以

00:09:42.536 --> 00:09:45.126 A:middle
在 App 中设计单元格

00:09:45.126 --> 00:09:46.696 A:middle
然后我将要建立

00:09:46.696 --> 00:09:47.866 A:middle
这个 View Controller 作为这个

00:09:47.866 --> 00:09:49.586 A:middle
CollectionView 的数据来源 所以

00:09:49.586 --> 00:09:51.186 A:middle
我们可以提供给它一些信息

00:09:51.186 --> 00:09:52.496 A:middle
关于将要展示多少单元格

00:09:52.496 --> 00:09:54.616 A:middle
以及在它的单元格上将要

00:09:54.616 --> 00:09:56.146 A:middle
展示什么样的数据

00:09:56.516 --> 00:09:59.346 A:middle
接下来我将要把它设置为

00:09:59.346 --> 00:10:00.956 A:middle
委托 所以我们可以

00:09:59.346 --> 00:10:00.956 A:middle
委托 所以我们可以

00:10:00.956 --> 00:10:02.066 A:middle
处理单元格的选择

00:10:02.986 --> 00:10:04.196 A:middle
所以既然我们已经建立起来这些

00:10:04.196 --> 00:10:05.976 A:middle
我们实际上需要遵循

00:10:05.976 --> 00:10:07.216 A:middle
这两种协议

00:10:07.876 --> 00:10:10.036 A:middle
所以让我们先遵循

00:10:10.036 --> 00:10:12.606 A:middle
数据源 并且我们有

00:10:12.676 --> 00:10:14.816 A:middle
两种要求我们执行的方法

00:10:14.946 --> 00:10:17.906 A:middle
这些当中的第一个是

00:10:17.976 --> 00:10:20.656 A:middle
Section 中的项目数

00:10:20.656 --> 00:10:22.696 A:middle
回到我们人口布阵

00:10:22.816 --> 00:10:23.926 A:middle
当中的人数或者项目数

00:10:23.926 --> 00:10:26.956 A:middle
来展示我们的

00:10:26.956 --> 00:10:27.996 A:middle
数据模型体

00:10:28.666 --> 00:10:30.586 A:middle
第二个我们需要执行的

00:10:30.586 --> 00:10:31.566 A:middle
方法是

00:10:32.106 --> 00:10:34.456 A:middle
CellForItemAtIndexPath

00:10:34.456 --> 00:10:36.226 A:middle
我们可以从 CollectionView 中脱离

00:10:36.226 --> 00:10:37.726 A:middle
单元格队列使用我们独特的

00:10:37.726 --> 00:10:41.106 A:middle
标识符 穿过一个

00:10:41.106 --> 00:10:42.526 A:middle
从我们的人口布阵脱离出去的

00:10:42.526 --> 00:10:43.976 A:middle
人和物体 来到单元格展示

00:10:44.136 --> 00:10:47.126 A:middle
我们的数据 然后

00:10:47.126 --> 00:10:48.576 A:middle
回到单元格

00:10:50.426 --> 00:10:52.566 A:middle
事情到这圆满完成

00:10:52.566 --> 00:10:54.686 A:middle
我们接下来只需从

00:10:54.756 --> 00:10:56.396 A:middle
委托协议中挑选一种

00:10:56.396 --> 00:10:58.066 A:middle
可供选择的方法 所以

00:10:58.066 --> 00:10:58.836 A:middle
我们可以处理选择

00:10:59.336 --> 00:11:00.826 A:middle
所以我们将要添加

00:10:59.336 --> 00:11:00.826 A:middle
所以我们将要添加

00:11:00.926 --> 00:11:04.226 A:middle
DidSelectItemAtIndexPath

00:11:04.226 --> 00:11:06.186 A:middle
在其中我们将用示例

00:11:06.186 --> 00:11:07.716 A:middle
讲解 FeedView 控制器这

00:11:07.716 --> 00:11:09.246 A:middle
将要成为我们的第二屏幕 如果

00:11:09.246 --> 00:11:10.056 A:middle
我们没有一个实例

00:11:10.056 --> 00:11:11.886 A:middle
接下来我们需要

00:11:12.136 --> 00:11:14.406 A:middle
穿过一个人 所以我们

00:11:14.406 --> 00:11:16.566 A:middle
知道要展示谁的图像

00:11:17.116 --> 00:11:19.386 A:middle
接下来我们要把它放到

00:11:19.386 --> 00:11:20.366 A:middle
我们的导航控制器当中

00:11:21.256 --> 00:11:24.136 A:middle
好的 所以让我们建立这个

00:11:24.176 --> 00:11:27.006 A:middle
然后转换到模拟器中来看看

00:11:29.256 --> 00:11:29.976 A:middle
好的

00:11:30.516 --> 00:11:33.606 A:middle
［ 掌声和欢呼声 ］

00:11:34.106 --> 00:11:35.836 A:middle
好的 所以可以看到

00:11:35.836 --> 00:11:37.446 A:middle
屏幕上有了我们的 CollectionView

00:11:37.546 --> 00:11:39.816 A:middle
我们也有了一些单元格

00:11:39.816 --> 00:11:41.196 A:middle
你可以看到它们 虽然它们

00:11:41.196 --> 00:11:42.096 A:middle
是扁平的

00:11:42.146 --> 00:11:44.026 A:middle
它们的大小并不合适 所以

00:11:44.026 --> 00:11:45.116 A:middle
我们将对它们做一些

00:11:45.116 --> 00:11:46.786 A:middle
我们认为我们需要做的

00:11:46.786 --> 00:11:47.656 A:middle
自定义

00:11:47.996 --> 00:11:51.066 A:middle
所以让我们回到 Xcode 中

00:11:51.066 --> 00:11:55.916 A:middle
让我们在这打开我们的

00:11:55.996 --> 00:11:59.906 A:middle
子集列 我们之前放在一起的

00:12:00.046 --> 00:12:01.936 A:middle
ColumnFlowLayout Class

00:12:03.106 --> 00:12:06.536 A:middle
让我们看看我们

00:12:06.536 --> 00:12:07.176 A:middle
在这需要做什么

00:12:07.176 --> 00:12:10.236 A:middle
所以我早已准备了

00:12:10.236 --> 00:12:12.916 A:middle
一种重写布局存根的方法

00:12:13.506 --> 00:12:15.756 A:middle
现在不论什么时候布局无效

00:12:15.756 --> 00:12:17.266 A:middle
就调用 UICollectionView LayoutsPrepare

00:12:22.636 --> 00:12:24.646 A:middle
只要 CollectionView 的边界大小改变

00:12:24.646 --> 00:12:27.336 A:middle
我们的布局就无效了

00:12:27.336 --> 00:12:29.626 A:middle
所以如果我们的 App 在手机上旋转

00:12:29.626 --> 00:12:32.446 A:middle
或者我们的 App 在 iPad 上重新调整大小

00:12:33.996 --> 00:12:35.976 A:middle
所以在这里进行自定义

00:12:35.976 --> 00:12:39.366 A:middle
很棒 这种自定义把

00:12:39.366 --> 00:12:41.506 A:middle
CollectionView 考虑到其中了

00:12:41.506 --> 00:12:42.986 A:middle
在我们的例子中 我们想要我们的单元格

00:12:42.986 --> 00:12:45.456 A:middle
拥有像 CollectionView 一样的

00:12:45.456 --> 00:12:46.756 A:middle
很多功能

00:12:47.266 --> 00:12:48.886 A:middle
我们也可以让

00:12:48.886 --> 00:12:51.236 A:middle
CollectionView 知道我们想要

00:12:51.236 --> 00:12:53.146 A:middle
我们的项目变多大 通过

00:12:53.146 --> 00:12:54.436 A:middle
指明项目的大小属性

00:12:54.516 --> 00:12:55.876 A:middle
所以我将要继续

00:12:55.876 --> 00:12:56.296 A:middle
在这里做这个

00:12:57.426 --> 00:12:58.586 A:middle
所以我要把我的

00:12:58.586 --> 00:13:01.086 A:middle
CollectionView 的项目大小

00:12:58.586 --> 00:13:01.086 A:middle
CollectionView 的项目大小

00:13:01.276 --> 00:13:03.586 A:middle
设置为 CG 大小 宽度也设置成

00:13:03.586 --> 00:13:04.886 A:middle
CollectionView 的边缘宽度

00:13:04.886 --> 00:13:07.206 A:middle
插入布局边缘

00:13:07.206 --> 00:13:08.996 A:middle
我们将要把它的高度

00:13:08.996 --> 00:13:10.946 A:middle
设置成 70 点

00:13:10.946 --> 00:13:12.736 A:middle
以此来匹配我们的设计

00:13:14.046 --> 00:13:14.856 A:middle
既然我们已经到这了

00:13:14.856 --> 00:13:15.746 A:middle
我将要在这做

00:13:15.836 --> 00:13:17.536 A:middle
一些不同的事情

00:13:17.536 --> 00:13:18.816 A:middle
使它们看起来美观

00:13:19.296 --> 00:13:21.326 A:middle
我要在顶部

00:13:21.326 --> 00:13:22.816 A:middle
填充一个 sectionInset

00:13:22.896 --> 00:13:24.526 A:middle
来匹配我们的项目内

00:13:24.646 --> 00:13:26.636 A:middle
间距 我将要把这个布局的

00:13:26.776 --> 00:13:28.216 A:middle
sectionInsertReference

00:13:28.216 --> 00:13:30.106 A:middle
属性设置到安全区域

00:13:30.106 --> 00:13:32.256 A:middle
所以一切都整齐地

00:13:32.256 --> 00:13:33.846 A:middle
安置在 CollectionView 的

00:13:33.846 --> 00:13:34.956 A:middle
安全区域内

00:13:35.616 --> 00:13:37.526 A:middle
好的 让我们再一次

00:13:37.526 --> 00:13:39.546 A:middle
回到模拟器中 看看

00:13:39.546 --> 00:13:40.746 A:middle
我们正确构建的

00:13:40.746 --> 00:13:41.546 A:middle
布局长什么样子

00:13:41.816 --> 00:13:42.086 A:middle
好的

00:13:43.656 --> 00:13:44.926 A:middle
这看起来很棒

00:13:44.926 --> 00:13:47.056 A:middle
这看起来就像我们的规格

00:13:47.056 --> 00:13:48.626 A:middle
我认为我们的设计者将会非常开心

00:13:48.626 --> 00:13:52.316 A:middle
如果我们把它旋转成横屏

00:13:52.396 --> 00:13:53.426 A:middle
我们可以看到我们的单元格大小很合适

00:13:53.426 --> 00:13:54.866 A:middle
所以我们知道我们的

00:13:55.206 --> 00:13:56.956 A:middle
无效代码

00:13:56.956 --> 00:13:58.166 A:middle
随时准备再次被调用

00:13:59.756 --> 00:14:01.176 A:middle
现在一切都准备好了

00:13:59.756 --> 00:14:01.176 A:middle
现在一切都准备好了

00:14:01.176 --> 00:14:04.316 A:middle
你可能会想 我们并没有做到最好

00:14:04.316 --> 00:14:07.976 A:middle
它看起来没有非常棒

00:14:08.486 --> 00:14:09.736 A:middle
我们可能想要做一些

00:14:09.736 --> 00:14:10.696 A:middle
更有趣的事情 比如

00:14:10.696 --> 00:14:12.216 A:middle
展示多列布局

00:14:12.216 --> 00:14:14.806 A:middle
因为我们有了一些可获得的间距

00:14:15.336 --> 00:14:16.936 A:middle
现在流式布局使这个

00:14:16.936 --> 00:14:17.876 A:middle
变得如此简单

00:14:18.166 --> 00:14:19.926 A:middle
如果你记得之前 Steve 的解释

00:14:19.926 --> 00:14:21.366 A:middle
流式布局是怎样

00:14:21.486 --> 00:14:22.666 A:middle
安排它的布局

00:14:22.746 --> 00:14:24.536 A:middle
流式布局会在

00:14:24.536 --> 00:14:26.656 A:middle
移动到下一条线之前

00:14:26.656 --> 00:14:29.946 A:middle
安装尽可能多的项目

00:14:30.526 --> 00:14:33.396 A:middle
所以使用这个 我们可以

00:14:33.876 --> 00:14:36.086 A:middle
搞清楚布局

00:14:36.086 --> 00:14:37.626 A:middle
如果我们改变我们的项目大小

00:14:37.626 --> 00:14:38.826 A:middle
我们就可以获得很多列

00:14:39.506 --> 00:14:41.996 A:middle
所以如果我们回到 Xcode 中

00:14:41.996 --> 00:14:44.446 A:middle
回到我们这里的布局

00:14:44.446 --> 00:14:46.986 A:middle
如果我们仅仅改变我们计算项目

00:14:46.986 --> 00:14:47.976 A:middle
大小的方式

00:14:47.976 --> 00:14:50.886 A:middle
所以我将要移除

00:14:50.886 --> 00:14:52.156 A:middle
这个 将要

00:14:52.906 --> 00:14:54.216 A:middle
用一些和数学相关的东西

00:14:54.296 --> 00:14:55.336 A:middle
来替代它

00:14:56.336 --> 00:14:57.926 A:middle
所以我将要开始使用

00:14:58.006 --> 00:15:00.536 A:middle
与我之前获得的相同的可用宽度

00:14:58.006 --> 00:15:00.536 A:middle
与我之前获得的相同的可用宽度

00:15:00.536 --> 00:15:02.466 A:middle
这是由边距插入的边界

00:15:02.466 --> 00:15:05.546 A:middle
和一些对最小列宽的

00:15:05.546 --> 00:15:07.726 A:middle
任意定义

00:15:07.856 --> 00:15:11.156 A:middle
是 300 点

00:15:11.696 --> 00:15:14.106 A:middle
然后取这些数值中的

00:15:14.106 --> 00:15:15.796 A:middle
两个数值 使用它们

00:15:15.796 --> 00:15:17.476 A:middle
来计算一个我认为可以安装

00:15:17.476 --> 00:15:18.986 A:middle
在可用空间中的

00:15:18.986 --> 00:15:21.146 A:middle
最大列值

00:15:21.146 --> 00:15:23.096 A:middle
我将使用这个数值来除以

00:15:23.096 --> 00:15:24.536 A:middle
可用宽度来

00:15:24.536 --> 00:15:26.546 A:middle
计算出一个最佳单元宽度

00:15:26.546 --> 00:15:29.816 A:middle
这可能会超过 300 点

00:15:30.626 --> 00:15:32.346 A:middle
我将要把这个数值带到

00:15:32.346 --> 00:15:33.636 A:middle
我现在正在使用的作为我的项目

00:15:33.636 --> 00:15:33.966 A:middle
大小的 CT 大小中

00:15:34.886 --> 00:15:37.166 A:middle
好的 所以现在让我们再次回到

00:15:37.166 --> 00:15:39.546 A:middle
我们的模拟器中 看看我们

00:15:39.546 --> 00:15:40.676 A:middle
更新的布局是什么样子

00:15:42.246 --> 00:15:43.806 A:middle
好的 所以一切都一模一样

00:15:43.806 --> 00:15:44.466 A:middle
我们没有打破它

00:15:44.736 --> 00:15:47.756 A:middle
这是一个好的开始 如果我们

00:15:47.756 --> 00:15:50.146 A:middle
想要横过来

00:15:50.146 --> 00:15:51.416 A:middle
我们就会有多列并排

00:15:51.536 --> 00:15:52.136 A:middle
这正是我们想要的

00:15:53.436 --> 00:15:55.186 A:middle
你怎么想呢 Steve

00:15:55.656 --> 00:15:56.306 A:middle
&gt;&gt; 看起来很棒

00:15:56.306 --> 00:15:57.596 A:middle
我们得到了一个很棒的可改变的

00:15:57.596 --> 00:15:58.706 A:middle
柱形布局

00:15:58.706 --> 00:15:59.726 A:middle
没有花太多力气

00:16:00.266 --> 00:16:00.436 A:middle
&gt;&gt; 没有

00:16:00.536 --> 00:16:01.486 A:middle
&gt;&gt; 接下来我们的设计是什么呢

00:16:02.036 --> 00:16:02.906 A:middle
&gt;&gt; 好的 既然我们已经轻松

00:16:02.906 --> 00:16:04.366 A:middle
进入我们的朋友列表中

00:16:04.366 --> 00:16:05.446 A:middle
现在该开始

00:16:05.446 --> 00:16:07.846 A:middle
想想

00:16:07.846 --> 00:16:08.306 A:middle
App 的花式镶嵌布局了

00:16:08.336 --> 00:16:08.686 A:middle
&gt;&gt; 好

00:16:08.686 --> 00:16:09.566 A:middle
很棒

00:16:09.566 --> 00:16:09.676 A:middle
&gt;&gt; 是的

00:16:09.676 --> 00:16:10.816 A:middle
&gt;&gt; 让我们回到

00:16:10.816 --> 00:16:13.076 A:middle
幻灯片 稍微

00:16:13.076 --> 00:16:16.926 A:middle
聊一聊

00:16:17.136 --> 00:16:19.726 A:middle
好的 让我们看一下

00:16:19.726 --> 00:16:21.686 A:middle
这里的布局或者设计

00:16:21.686 --> 00:16:22.506 A:middle
看看我们可以做什么

00:16:22.506 --> 00:16:23.816 A:middle
所以我们的第一个意向

00:16:23.816 --> 00:16:25.006 A:middle
我不知道你的 但是我的是

00:16:25.006 --> 00:16:25.956 A:middle
我能否用 Flow

00:16:26.206 --> 00:16:27.216 A:middle
我懂了 准备好了

00:16:27.276 --> 00:16:28.036 A:middle
让我们开始使用它

00:16:29.256 --> 00:16:30.796 A:middle
所以让我们简单看一下

00:16:30.796 --> 00:16:32.786 A:middle
这个设计 看看 Flow 对于

00:16:32.786 --> 00:16:33.946 A:middle
我们来说是否有意义

00:16:34.966 --> 00:16:36.726 A:middle
在这个特殊的区域有

00:16:36.726 --> 00:16:39.626 A:middle
这三张照片 我将迅速放大

00:16:40.276 --> 00:16:40.626 A:middle
好

00:16:41.756 --> 00:16:43.496 A:middle
所以在现在这个例子中

00:16:43.496 --> 00:16:45.206 A:middle
我们左边有一张非常大的照片

00:16:45.276 --> 00:16:47.656 A:middle
右边有一个垂直的堆叠

00:16:48.446 --> 00:16:49.836 A:middle
所以在 Flow 领域

00:16:49.836 --> 00:16:50.886 A:middle
因为它是基于线条的 我们将要

00:16:50.886 --> 00:16:52.446 A:middle
把左边那个大一点的项目

00:16:53.076 --> 00:16:54.186 A:middle
移动到下一个项目

00:16:54.186 --> 00:16:55.306 A:middle
所在的地方 然后再安排

00:16:55.306 --> 00:16:57.386 A:middle
另一个项目 然后再跳到

00:16:57.386 --> 00:16:58.116 A:middle
下一条线中

00:16:58.606 --> 00:16:59.686 A:middle
但是我们没有完成

00:16:59.686 --> 00:17:00.686 A:middle
我们还要处理这个

00:16:59.686 --> 00:17:00.686 A:middle
我们还要处理这个

00:17:00.686 --> 00:17:01.296 A:middle
垂直的堆栈

00:17:01.296 --> 00:17:03.056 A:middle
所以这对于 Flow 来说

00:17:03.056 --> 00:17:04.326 A:middle
行不通 因为事实证明

00:17:04.326 --> 00:17:07.226 A:middle
它并不是一个真的基于线的布局

00:17:09.796 --> 00:17:10.766 A:middle
但是这个练习的经历

00:17:10.766 --> 00:17:12.205 A:middle
还是有用的 所以 你知道

00:17:12.205 --> 00:17:13.566 A:middle
让我们先开始 Flow

00:17:15.096 --> 00:17:16.776 A:middle
好的 所以在这个例子中

00:17:16.776 --> 00:17:18.506 A:middle
我们将要创建 我们自己的自定义布局

00:17:19.685 --> 00:17:20.796 A:middle
我们有点害怕

00:17:20.796 --> 00:17:21.876 A:middle
不用怕 这并不复杂

00:17:21.876 --> 00:17:23.925 A:middle
我们已经有了四种基本方法

00:17:23.925 --> 00:17:25.356 A:middle
来处理这个 我将要

00:17:25.356 --> 00:17:27.056 A:middle
提出另外一种

00:17:27.056 --> 00:17:28.276 A:middle
让人自豪的方法

00:17:29.676 --> 00:17:31.566 A:middle
好的 四种方法 让我们开始吧

00:17:32.836 --> 00:17:34.076 A:middle
我想说的第一种方法

00:17:34.076 --> 00:17:36.346 A:middle
关于 CollectionView 的内容大小

00:17:37.306 --> 00:17:39.286 A:middle
现在 在我们提到 CollectionView 是

00:17:39.286 --> 00:17:40.736 A:middle
UIScrollView 的一个子集之前回忆

00:17:40.736 --> 00:17:42.126 A:middle
一下 UIScrollView 的

00:17:42.126 --> 00:17:44.036 A:middle
一个特征就是

00:17:44.036 --> 00:17:45.576 A:middle
你有一个可视化区域和一个

00:17:45.576 --> 00:17:47.636 A:middle
很大的内容区域 并且你有一个

00:17:47.636 --> 00:17:49.096 A:middle
很棒的 iOS 体验

00:17:49.096 --> 00:17:52.666 A:middle
可以在其内部移动你的内容 所以

00:17:52.756 --> 00:17:53.896 A:middle
CollectionView 需要知道怎样

00:17:53.896 --> 00:17:55.396 A:middle
告诉 ScrollView

00:17:55.396 --> 00:17:56.836 A:middle
我的内容有多大

00:17:57.276 --> 00:17:59.856 A:middle
好的 所以我们如何得到这个尺寸

00:18:00.656 --> 00:18:01.986 A:middle
想象一下一个长方形

00:18:01.986 --> 00:18:03.546 A:middle
包含这个布局将要

00:18:03.546 --> 00:18:04.646 A:middle
为你的 CollectionView 定义

00:18:04.646 --> 00:18:06.196 A:middle
所有内容

00:18:06.626 --> 00:18:09.406 A:middle
我们想要这样的大小

00:18:09.406 --> 00:18:11.596 A:middle
好的 这就是 CollectionView

00:18:11.596 --> 00:18:12.436 A:middle
的内容大小

00:18:13.556 --> 00:18:15.326 A:middle
接下来我们有两种

00:18:15.326 --> 00:18:18.246 A:middle
提供布局属性的方法

00:18:19.376 --> 00:18:20.516 A:middle
第一种是

00:18:20.516 --> 00:18:21.826 A:middle
LayoutAttributesForElements（在

00:18:21.826 --> 00:18:22.116 A:middle
矩形中）

00:18:23.186 --> 00:18:24.606 A:middle
现在这个被 CollectionView 定期调用

00:18:24.606 --> 00:18:25.996 A:middle
当用户第一次滚动浏览

00:18:25.996 --> 00:18:26.856 A:middle
你的内容或者展示时

00:18:26.856 --> 00:18:30.916 A:middle
它需要知道在屏幕上展示 什么

00:18:31.906 --> 00:18:33.966 A:middle
所以这个查询是由一个几何区域构成的

00:18:35.686 --> 00:18:38.166 A:middle
好的 这是 API

00:18:38.276 --> 00:18:39.596 A:middle
LayoutAttributesForItem

00:18:39.596 --> 00:18:42.046 A:middle
AtIndexPath 你可以想象

00:18:42.046 --> 00:18:43.366 A:middle
它只是在寻找一个单独的项目

00:18:43.496 --> 00:18:44.876 A:middle
给我这个属性

00:18:45.876 --> 00:18:47.416 A:middle
好的 当 Mohammed 带着我们浏览的时候

00:18:47.416 --> 00:18:48.446 A:middle
我们会看到更多东西

00:18:48.446 --> 00:18:50.116 A:middle
但是对于这两个 API 来说

00:18:50.116 --> 00:18:52.936 A:middle
需要注意的是 性能最重要

00:18:57.136 --> 00:18:58.956 A:middle
好的 所以我们四个

00:18:59.136 --> 00:19:01.906 A:middle
核心自定义布局子集中的第四个

00:18:59.136 --> 00:19:01.906 A:middle
核心自定义布局子集中的第四个

00:19:01.976 --> 00:19:04.106 A:middle
就是 Prepare 方法

00:19:04.106 --> 00:19:05.396 A:middle
现在 Mohammed 已经讲了

00:19:05.396 --> 00:19:06.706 A:middle
一些这方面的事情

00:19:06.706 --> 00:19:08.266 A:middle
每当布局无效时

00:19:08.266 --> 00:19:09.346 A:middle
就调用这个

00:19:09.406 --> 00:19:11.226 A:middle
所以这是计算一切的

00:19:11.226 --> 00:19:12.436 A:middle
有利时机 比如

00:19:12.436 --> 00:19:13.486 A:middle
你想要缓存的布局属性

00:19:13.486 --> 00:19:16.206 A:middle
和你的内容大小

00:19:16.206 --> 00:19:18.976 A:middle
之后很快就会要求这些事情

00:19:23.456 --> 00:19:25.326 A:middle
好的 所以我们值得骄傲的

00:19:25.326 --> 00:19:27.066 A:middle
API 让我们谈论一下它吧

00:19:27.066 --> 00:19:28.316 A:middle
这是一个为边界变更设置的

00:19:28.316 --> 00:19:29.856 A:middle
ShouldInvalidateLayout

00:19:30.766 --> 00:19:33.046 A:middle
所以每次 CollectionView 的

00:19:33.046 --> 00:19:34.126 A:middle
边界改变时

00:19:34.126 --> 00:19:34.876 A:middle
都会被调用

00:19:35.066 --> 00:19:36.366 A:middle
好的 再一次 它是 CollectionView

00:19:36.366 --> 00:19:38.566 A:middle
是 UIScrollView 的一个子集

00:19:38.566 --> 00:19:41.216 A:middle
所以边界发生变化 究竟是什么意思

00:19:41.216 --> 00:19:43.206 A:middle
当一个 ScrollView 边界发生改变

00:19:43.206 --> 00:19:45.406 A:middle
原点可以在滚动期间

00:19:45.406 --> 00:19:47.246 A:middle
发生改变

00:19:47.246 --> 00:19:48.546 A:middle
当 App 大小改变

00:19:48.546 --> 00:19:50.366 A:middle
或者 CollectionView 的大小改变时

00:19:50.366 --> 00:19:51.726 A:middle
其大小也会发生改变

00:19:51.726 --> 00:19:53.996 A:middle
所以这将会在滚动过程中被调用

00:19:55.116 --> 00:19:56.996 A:middle
是的 就像表情符号

00:19:56.996 --> 00:19:58.196 A:middle
这经常被调用

00:19:58.196 --> 00:20:00.126 A:middle
所以在这里做出正确的决定

00:19:58.196 --> 00:20:00.126 A:middle
所以在这里做出正确的决定

00:20:00.126 --> 00:20:00.906 A:middle
非常重要

00:20:01.466 --> 00:20:03.176 A:middle
好的 所以

00:20:03.176 --> 00:20:04.296 A:middle
UICollectionViewLayout 中的

00:20:04.296 --> 00:20:07.056 A:middle
默认执行将返回 false

00:20:07.746 --> 00:20:08.666 A:middle
所以如果你需要让它做

00:20:08.666 --> 00:20:10.906 A:middle
一些不同的事情 你的机会到了

00:20:11.906 --> 00:20:13.576 A:middle
作为示例的一种方式

00:20:13.906 --> 00:20:16.106 A:middle
如果原点改变

00:20:16.106 --> 00:20:18.876 A:middle
UICollectionViewLayout 将返回 false

00:20:18.876 --> 00:20:19.706 A:middle
好的 所以用户只是

00:20:19.706 --> 00:20:20.636 A:middle
在滚动浏览你的内容

00:20:20.636 --> 00:20:21.606 A:middle
我们不会无效

00:20:21.606 --> 00:20:22.726 A:middle
把它变成默认状态

00:20:23.366 --> 00:20:25.446 A:middle
但是如果 iPad 旋转

00:20:25.446 --> 00:20:26.856 A:middle
手机旋转 你的 App

00:20:26.856 --> 00:20:28.136 A:middle
大小就发生了改变

00:20:28.436 --> 00:20:29.316 A:middle
它即将返回 true

00:20:30.566 --> 00:20:32.596 A:middle
现在有一点例外

00:20:32.596 --> 00:20:33.786 A:middle
比如浮动的页眉和页脚

00:20:33.786 --> 00:20:34.346 A:middle
对吧

00:20:34.346 --> 00:20:35.606 A:middle
当你在滚动你的内容时

00:20:35.606 --> 00:20:37.056 A:middle
我们必须重新计算这些

00:20:37.376 --> 00:20:39.146 A:middle
要做一个自定义的无效

00:20:39.146 --> 00:20:40.196 A:middle
来考虑这些事情

00:20:40.826 --> 00:20:41.846 A:middle
好的 理论已经足够多了

00:20:42.536 --> 00:20:44.936 A:middle
让我们回到我们的

00:20:44.936 --> 00:20:47.116 A:middle
开发机器当中

00:20:47.116 --> 00:20:48.616 A:middle
让 Mohammed 带领我们了解一下

00:20:48.616 --> 00:20:49.376 A:middle
在用代码建立这个奇特自定义

00:20:49.406 --> 00:20:51.316 A:middle
UICollectionViewLayout 的时候

00:20:51.316 --> 00:20:52.206 A:middle
看起来会是什么样子

00:20:53.916 --> 00:20:55.486 A:middle
&gt;&gt; 好的 让我们直接进入

00:20:55.486 --> 00:20:55.746 A:middle
正题吧

00:20:56.136 --> 00:20:57.886 A:middle
所以我已经把

00:20:58.156 --> 00:21:00.506 A:middle
另一个我们将要为这个布局使用的

00:20:58.156 --> 00:21:00.506 A:middle
另一个我们将要为这个布局使用的

00:21:00.506 --> 00:21:01.416 A:middle
布局子集放到一起

00:21:01.416 --> 00:21:03.336 A:middle
你可能会注意到

00:21:03.336 --> 00:21:04.426 A:middle
它是 UICollectionViewLayout 的

00:21:04.426 --> 00:21:06.276 A:middle
一个子集

00:21:06.276 --> 00:21:07.736 A:middle
不是 CollectionViewLayout 的

00:21:07.736 --> 00:21:09.906 A:middle
一个子集

00:21:09.906 --> 00:21:11.596 A:middle
这就是 Steve 之前向我们

00:21:11.636 --> 00:21:13.786 A:middle
解释的原因

00:21:14.146 --> 00:21:16.006 A:middle
UICollectionViewLayout 并没有

00:21:16.006 --> 00:21:17.356 A:middle
真正满足我们

00:21:17.356 --> 00:21:19.446 A:middle
自定义的镶嵌布局设计

00:21:20.906 --> 00:21:22.076 A:middle
所以我在这做的第一件事

00:21:22.076 --> 00:21:23.626 A:middle
是我要建立一些

00:21:23.626 --> 00:21:25.246 A:middle
实例变量

00:21:25.246 --> 00:21:26.646 A:middle
我将用它们来保存

00:21:26.646 --> 00:21:28.176 A:middle
一些稍后可以参考的

00:21:28.176 --> 00:21:29.366 A:middle
关键信息

00:21:30.706 --> 00:21:32.946 A:middle
第一个是内容绑定的

00:21:32.946 --> 00:21:34.816 A:middle
CG 矩形 我将要

00:21:34.816 --> 00:21:37.476 A:middle
用它来保持

00:21:37.516 --> 00:21:39.396 A:middle
我的 CollectionView 内

00:21:39.396 --> 00:21:40.226 A:middle
所有项的代表性边界

00:21:40.776 --> 00:21:43.366 A:middle
第二个是缓存

00:21:43.366 --> 00:21:46.106 A:middle
属性数列 我将要使用这个来保存我的

00:21:46.516 --> 00:21:48.336 A:middle
布局属性 所以

00:21:48.336 --> 00:21:50.086 A:middle
当性能重要的时候 我可以快速查阅它们

00:21:51.496 --> 00:21:52.916 A:middle
所以我们将为这个布局

00:21:52.916 --> 00:21:54.396 A:middle
再次开始执行我们的

00:21:54.396 --> 00:21:55.836 A:middle
Prepare 类函数

00:21:56.846 --> 00:21:59.776 A:middle
Prepare 是我们做大部分工作的

00:21:59.776 --> 00:22:01.116 A:middle
理想场所

00:21:59.776 --> 00:22:01.116 A:middle
理想场所

00:22:01.326 --> 00:22:03.086 A:middle
因为每次失效都会调用

00:22:03.146 --> 00:22:04.086 A:middle
Prepare

00:22:04.686 --> 00:22:06.616 A:middle
我们可以在这建立我们自己的布局

00:22:06.756 --> 00:22:08.696 A:middle
然后避免做任何

00:22:08.696 --> 00:22:10.626 A:middle
繁重的布局工作或者任何繁重

00:22:10.626 --> 00:22:12.776 A:middle
的经常被调用的

00:22:12.776 --> 00:22:13.976 A:middle
布局数学函数

00:22:18.486 --> 00:22:19.696 A:middle
所以我们要在这儿做很多事情

00:22:19.956 --> 00:22:21.836 A:middle
首先 我们将重置我们的

00:22:21.836 --> 00:22:23.086 A:middle
缓存属性和我们的

00:22:23.086 --> 00:22:24.816 A:middle
内容界限只为了清除

00:22:24.816 --> 00:22:26.956 A:middle
以前失效的

00:22:26.956 --> 00:22:28.276 A:middle
所有陈旧信息

00:22:29.576 --> 00:22:32.196 A:middle
接下来 我们要为

00:22:32.196 --> 00:22:33.426 A:middle
我们的 CollectionView 中的每一个项目

00:22:33.426 --> 00:22:34.056 A:middle
做一些事情

00:22:35.346 --> 00:22:36.736 A:middle
这些当中的第一个实际上是

00:22:36.786 --> 00:22:38.536 A:middle
准备这些属性

00:22:38.536 --> 00:22:39.626 A:middle
但是现在我不会

00:22:39.626 --> 00:22:41.506 A:middle
深入研究

00:22:41.506 --> 00:22:42.836 A:middle
具体布局的内容 因为

00:22:42.836 --> 00:22:43.676 A:middle
这对你而言

00:22:43.676 --> 00:22:44.076 A:middle
会有所不同

00:22:44.466 --> 00:22:46.376 A:middle
这是你将要

00:22:46.376 --> 00:22:47.606 A:middle
计算大小

00:22:47.606 --> 00:22:49.506 A:middle
位置和转换的地方

00:22:49.506 --> 00:22:52.976 A:middle
使你的单元格 符合你的设计需求

00:22:53.746 --> 00:22:54.886 A:middle
但是在我们完成

00:22:54.886 --> 00:22:55.646 A:middle
这些属性以后

00:22:55.646 --> 00:22:57.706 A:middle
我们将要在这做很多关键的事情

00:22:58.176 --> 00:22:59.676 A:middle
第一 我们将要缓存它们

00:22:59.786 --> 00:23:00.576 A:middle
我们将要把它们放在我们的

00:22:59.786 --> 00:23:00.576 A:middle
我们将要把它们放在我们的

00:23:00.576 --> 00:23:01.936 A:middle
缓存的属性数组以便我们

00:23:01.936 --> 00:23:03.536 A:middle
不久后可以快速抓住它们

00:23:04.086 --> 00:23:06.486 A:middle
第二个是 我们将

00:23:06.486 --> 00:23:08.406 A:middle
把他们的框架和我们的

00:23:08.406 --> 00:23:10.426 A:middle
内容界限矩形结合起来

00:23:10.426 --> 00:23:11.996 A:middle
以便于我们的内容界限保持更新

00:23:13.896 --> 00:23:15.266 A:middle
所以既然我们的 Prepare 已经出现

00:23:15.266 --> 00:23:16.366 A:middle
并且运行 我们需要

00:23:16.366 --> 00:23:18.546 A:middle
在我们需要使一切运转的

00:23:18.546 --> 00:23:20.206 A:middle
布局中执行

00:23:20.406 --> 00:23:21.536 A:middle
剩余的方法

00:23:22.416 --> 00:23:25.686 A:middle
所以这些当中的第一个

00:23:25.686 --> 00:23:27.186 A:middle
CollectionView 内容大小

00:23:27.596 --> 00:23:29.036 A:middle
在这其中 如果我们在 Prepare 中正确地

00:23:29.036 --> 00:23:30.986 A:middle
完成了我们的工作 我们可以

00:23:30.986 --> 00:23:33.006 A:middle
返回我们的内容界限作为大小

00:23:35.556 --> 00:23:37.286 A:middle
下一个是为边界改变设置的

00:23:37.286 --> 00:23:38.306 A:middle
shouldInvalidateLayout

00:23:39.576 --> 00:23:40.876 A:middle
现在既然我们的布局中不

00:23:40.876 --> 00:23:43.036 A:middle
包含任何当我们滚动时

00:23:43.036 --> 00:23:44.946 A:middle
失效的元素

00:23:44.946 --> 00:23:47.486 A:middle
所以没有任何浮动的

00:23:47.486 --> 00:23:48.966 A:middle
标题 浮动页脚或者

00:23:48.966 --> 00:23:49.566 A:middle
类似的东西

00:23:50.106 --> 00:23:51.896 A:middle
我们只想在 CollectionView 的大小变化范围

00:23:51.896 --> 00:23:54.276 A:middle
发生变化时无效

00:23:54.706 --> 00:23:56.276 A:middle
所以如果我们的新的大小边界

00:23:56.276 --> 00:23:58.076 A:middle
不等于

00:23:58.076 --> 00:23:59.606 A:middle
我们的 CollectionView 的大小边界

00:23:59.606 --> 00:24:01.856 A:middle
我们目前的大小边界 我们就会返回 true

00:23:59.606 --> 00:24:01.856 A:middle
我们目前的大小边界 我们就会返回 true

00:24:03.876 --> 00:24:05.366 A:middle
在那之后 我们将执行

00:24:05.366 --> 00:24:06.616 A:middle
LayoutAttributesForItem

00:24:06.616 --> 00:24:08.846 A:middle
AtIndexPath 在这里 再一次

00:24:08.846 --> 00:24:09.886 A:middle
因为在我们的 Prepare 函数中

00:24:09.886 --> 00:24:10.906 A:middle
我们已经准备了所有属性

00:24:10.906 --> 00:24:12.846 A:middle
我们只能把握

00:24:12.846 --> 00:24:15.616 A:middle
从我们的数组中回应

00:24:15.786 --> 00:24:17.936 A:middle
RequestAtIndexPath 的特别属性

00:24:18.116 --> 00:24:21.236 A:middle
最后 我们将执行

00:24:22.256 --> 00:24:23.786 A:middle
LayoutAttributesForElements

00:24:23.786 --> 00:24:24.166 A:middle
InRect

00:24:25.316 --> 00:24:26.776 A:middle
现在这个方法

00:24:26.776 --> 00:24:27.656 A:middle
被带有不同

00:24:27.656 --> 00:24:29.096 A:middle
查询矩阵的 CollectionView

00:24:29.096 --> 00:24:31.676 A:middle
定期调用 这个矩形可能会比

00:24:31.676 --> 00:24:32.486 A:middle
我们的 CollectionView 更大

00:24:32.616 --> 00:24:36.566 A:middle
我们的 CollectionView 只要求一些列

00:24:36.566 --> 00:24:37.926 A:middle
匹配特定区域的属性

00:24:38.676 --> 00:24:41.746 A:middle
我们的工作是返回一个数组

00:24:41.896 --> 00:24:44.386 A:middle
该数组包含所有属性

00:24:44.786 --> 00:24:46.266 A:middle
这些属性与所有

00:24:46.306 --> 00:24:47.576 A:middle
将要在我们的 CollectionView 矩形中出现的

00:24:47.576 --> 00:24:48.866 A:middle
所有项目相对应

00:24:50.296 --> 00:24:52.766 A:middle
所以我们可以简单地

00:24:52.846 --> 00:24:54.836 A:middle
通过过滤属性框架上的

00:24:54.836 --> 00:24:57.616 A:middle
缓存属性数组

00:24:57.616 --> 00:25:00.216 A:middle
来回答这个问题

00:24:57.616 --> 00:25:00.216 A:middle
来回答这个问题

00:25:00.216 --> 00:25:02.396 A:middle
所以如果我们的属性

00:25:02.476 --> 00:25:04.466 A:middle
有一个与我们的查询矩阵相交的框架

00:25:04.466 --> 00:25:06.566 A:middle
我们可以返回它们

00:25:06.566 --> 00:25:08.826 A:middle
好的 所以让我们回到

00:25:08.826 --> 00:25:11.786 A:middle
Sim 看看我们的布局变成了什么样子

00:25:12.626 --> 00:25:14.106 A:middle
所以我将要挑选其中的一个

00:25:14.106 --> 00:25:15.806 A:middle
Feed 在这

00:25:15.806 --> 00:25:17.586 A:middle
我们有我们的布局

00:25:17.586 --> 00:25:19.086 A:middle
我们的图像可以很好地加载到

00:25:19.086 --> 00:25:21.146 A:middle
这个花式镶嵌结构中

00:25:21.146 --> 00:25:23.706 A:middle
如果我们想要旋转成横屏

00:25:23.706 --> 00:25:25.246 A:middle
你可以看到我们的单元格已经

00:25:25.246 --> 00:25:26.996 A:middle
调整了大小 所以我们已正确更新

00:25:26.996 --> 00:25:28.036 A:middle
所有内容 我们已经将其

00:25:28.036 --> 00:25:29.466 A:middle
无效化 这真的很棒

00:25:32.286 --> 00:25:36.876 A:middle
所以这看起来很像我们的规格

00:25:36.876 --> 00:25:39.306 A:middle
但是滚动性能并不是很好 对吗

00:25:39.436 --> 00:25:39.636 A:middle
&gt;&gt; 不是很好

00:25:39.636 --> 00:25:40.786 A:middle
&gt;&gt; 很差

00:25:41.826 --> 00:25:43.116 A:middle
所以你可能早已有了一个

00:25:43.116 --> 00:25:44.286 A:middle
关于接下来怎么进行的主意

00:25:44.386 --> 00:25:45.536 A:middle
让我们回到代码中

00:25:45.536 --> 00:25:47.946 A:middle
看看接下来会发生什么

00:25:49.176 --> 00:25:50.386 A:middle
所以如果我们在

00:25:50.386 --> 00:25:51.666 A:middle
这的矩形中看看我们的布局属性或

00:25:51.666 --> 00:25:54.386 A:middle
元素 要记得这种

00:25:54.386 --> 00:25:55.946 A:middle
方法在滚动时

00:25:55.946 --> 00:25:56.836 A:middle
经常被调用

00:25:58.616 --> 00:26:01.376 A:middle
所以这里的这个函数

00:25:58.616 --> 00:26:01.376 A:middle
所以这里的这个函数

00:26:01.376 --> 00:26:03.656 A:middle
正在过滤我们的整个数组

00:26:03.656 --> 00:26:05.036 A:middle
你可能会想

00:26:05.036 --> 00:26:06.666 A:middle
当我们的 CollectionView 的项目数增加

00:26:06.666 --> 00:26:08.096 A:middle
会变得非常高耗

00:26:08.416 --> 00:26:09.476 A:middle
所以在我们的 App 中

00:26:09.476 --> 00:26:11.106 A:middle
我们的照片越多

00:26:11.106 --> 00:26:13.096 A:middle
我们的滚动进程将会越慢

00:26:14.296 --> 00:26:15.506 A:middle
所以如果你发现你自己遇到

00:26:15.506 --> 00:26:17.146 A:middle
这种情况 它帮助你

00:26:17.146 --> 00:26:18.766 A:middle
后退 想想你

00:26:18.766 --> 00:26:20.776 A:middle
布局的属性 想想

00:26:20.776 --> 00:26:21.976 A:middle
你是否可以找到任何

00:26:21.976 --> 00:26:23.466 A:middle
优化机会

00:26:24.296 --> 00:26:28.476 A:middle
所以我们的布局要求

00:26:28.476 --> 00:26:31.226 A:middle
每个单元 App 紧邻或者

00:26:31.226 --> 00:26:32.856 A:middle
低于它的前一个单元格

00:26:33.536 --> 00:26:34.976 A:middle
所以这意味着我们的

00:26:34.976 --> 00:26:37.926 A:middle
属性已经按照

00:26:37.926 --> 00:26:39.126 A:middle
它们框架的最小 y 值

00:26:39.126 --> 00:26:41.736 A:middle
在缓存的属性数组中排序了

00:26:43.456 --> 00:26:45.736 A:middle
所以我们有一个排序数组 所以我们

00:26:45.736 --> 00:26:48.006 A:middle
可以通过做一些

00:26:48.006 --> 00:26:49.206 A:middle
二进制的搜索来加速搜索

00:26:49.206 --> 00:26:51.826 A:middle
而不是像现在我们正在做的

00:26:51.826 --> 00:26:52.506 A:middle
线型过滤器

00:26:53.386 --> 00:26:57.786 A:middle
所以让我们删除我们的

00:26:57.786 --> 00:27:00.216 A:middle
慢执行 让我们

00:26:57.786 --> 00:27:00.216 A:middle
慢执行 让我们

00:27:00.216 --> 00:27:01.936 A:middle
用一些本应该更快的东西来替代它

00:27:03.856 --> 00:27:06.196 A:middle
所以我会逐步介绍

00:27:06.196 --> 00:27:07.226 A:middle
不必担心

00:27:08.216 --> 00:27:10.066 A:middle
所以我们在这要做的

00:27:10.066 --> 00:27:12.606 A:middle
第一件事是我们调用

00:27:13.476 --> 00:27:15.136 A:middle
我们已经准备好的

00:27:15.316 --> 00:27:16.656 A:middle
二进制搜索函数

00:27:16.656 --> 00:27:17.986 A:middle
它在我们的数组和

00:27:17.986 --> 00:27:20.526 A:middle
我们的查询矩阵中

00:27:20.526 --> 00:27:20.806 A:middle
引入了一些列索引

00:27:22.276 --> 00:27:25.956 A:middle
如果它发现了一组

00:27:25.956 --> 00:27:27.086 A:middle
在我们的矩阵中包含一个框架的属性

00:27:27.086 --> 00:27:30.586 A:middle
它将作为我们数组中的索引

00:27:30.586 --> 00:27:34.616 A:middle
返回属性 然后从该索引开始

00:27:34.616 --> 00:27:36.856 A:middle
我们可以简单地通过在

00:27:36.856 --> 00:27:39.016 A:middle
我们的数组中上下循环

00:27:39.016 --> 00:27:41.736 A:middle
并拾取属性

00:27:41.736 --> 00:27:43.736 A:middle
来构建其余部分

00:27:43.736 --> 00:27:46.376 A:middle
的属性集 直到我们退出查询矩阵

00:27:46.376 --> 00:27:47.506 A:middle
直到我们找到

00:27:47.506 --> 00:27:49.176 A:middle
在我们的矩阵之外的属性

00:27:49.886 --> 00:27:51.466 A:middle
这应该快得多了

00:27:51.946 --> 00:27:53.056 A:middle
在你的数组中

00:27:53.056 --> 00:27:53.416 A:middle
有成千上万的项目

00:27:53.416 --> 00:27:56.566 A:middle
你不可能通过成千上万个项目

00:27:56.566 --> 00:27:57.886 A:middle
循环成千上万次

00:27:58.576 --> 00:28:00.626 A:middle
好的 让我们再次回到

00:27:58.576 --> 00:28:00.626 A:middle
好的 让我们再次回到

00:28:00.626 --> 00:28:02.436 A:middle
Sim 中 让我们看看

00:28:02.436 --> 00:28:04.196 A:middle
更快的滚动算法是什么样子

00:28:07.056 --> 00:28:09.676 A:middle
让我们把这个弹出来的打开 然后轻点一下

00:28:10.116 --> 00:28:11.096 A:middle
更快了

00:28:11.816 --> 00:28:13.206 A:middle
你怎么看 Steve

00:28:13.826 --> 00:28:14.326 A:middle
&gt;&gt; 好多了

00:28:14.326 --> 00:28:14.906 A:middle
好的 很棒

00:28:14.906 --> 00:28:16.216 A:middle
所以我们现在已经有了

00:28:16.216 --> 00:28:16.906 A:middle
两种布局

00:28:17.246 --> 00:28:17.936 A:middle
接下来是什么呢

00:28:18.776 --> 00:28:20.426 A:middle
&gt;&gt; 所以我们有了两个屏幕

00:28:20.426 --> 00:28:22.756 A:middle
这位我们这里的

00:28:22.756 --> 00:28:24.366 A:middle
朋友列表留下了我们的

00:28:24.366 --> 00:28:24.516 A:middle
更新动画

00:28:24.936 --> 00:28:25.446 A:middle
&gt;&gt; 很棒

00:28:25.496 --> 00:28:25.706 A:middle
好的

00:28:25.706 --> 00:28:26.676 A:middle
好的 让我们回到

00:28:27.096 --> 00:28:28.836 A:middle
幻灯片中 让我们浏览一下

00:28:28.836 --> 00:28:30.786 A:middle
我想我们的设计师会称它为

00:28:30.786 --> 00:28:32.426 A:middle
非常酷的更新动画

00:28:33.266 --> 00:28:35.046 A:middle
好的 这里有一个视频

00:28:35.046 --> 00:28:36.446 A:middle
让我们浏览一下

00:28:36.946 --> 00:28:38.176 A:middle
看看这个非常酷炫的

00:28:38.176 --> 00:28:39.086 A:middle
更新动画是什么样子

00:28:39.536 --> 00:28:41.756 A:middle
好的 所以我们这里有一些元素

00:28:41.756 --> 00:28:44.966 A:middle
我们看到最后一个项目更新了

00:28:44.966 --> 00:28:46.246 A:middle
我猜有人发了一张

00:28:46.246 --> 00:28:48.136 A:middle
照片 我们有在这得到了另一个项目

00:28:48.136 --> 00:28:51.706 A:middle
它看起来 是第三个项目涂片

00:28:51.706 --> 00:28:52.546 A:middle
不会在这里

00:28:52.686 --> 00:28:55.316 A:middle
好的 所以我们在这里有

00:28:55.316 --> 00:28:56.696 A:middle
三个基本操作正在进行 对吧

00:28:56.696 --> 00:28:59.586 A:middle
我们重新下载 移动 删除

00:29:00.216 --> 00:29:01.386 A:middle
我们为什么不回到

00:29:01.386 --> 00:29:03.616 A:middle
开发机器 Mohammed

00:29:03.776 --> 00:29:04.996 A:middle
你何不给我们展示一下 这个是怎么操作的呢

00:29:06.096 --> 00:29:08.416 A:middle
&gt;&gt; 当然

00:29:08.636 --> 00:29:11.226 A:middle
好的 所以我们

00:29:11.226 --> 00:29:13.216 A:middle
同时做了很多动画的更新

00:29:14.036 --> 00:29:15.606 A:middle
所以你可能会认识到

00:29:15.606 --> 00:29:17.206 A:middle
UICollectionView 和 UITableView 提供给

00:29:17.206 --> 00:29:19.576 A:middle
我们 一个多么伟大的工具

00:29:19.576 --> 00:29:21.236 A:middle
正是执行批量更新 API

00:29:21.936 --> 00:29:24.266 A:middle
它基本上可以允许我们

00:29:24.266 --> 00:29:26.636 A:middle
通过集合视图

00:29:26.636 --> 00:29:28.036 A:middle
可以在动画执行的同时

00:29:28.036 --> 00:29:29.736 A:middle
执行一组更新

00:29:30.606 --> 00:29:33.226 A:middle
所以我要给

00:29:33.486 --> 00:29:34.126 A:middle
CollectionView PerformBatchUpdates

00:29:34.186 --> 00:29:36.426 A:middle
添加一个调用 并且注意

00:29:36.426 --> 00:29:37.646 A:middle
我在关闭这里做了

00:29:37.646 --> 00:29:38.896 A:middle
我的数据源更新和

00:29:38.896 --> 00:29:40.856 A:middle
我的 CollectionView 的更新

00:29:41.256 --> 00:29:43.196 A:middle
这实际上是一种最佳方式

00:29:43.196 --> 00:29:45.486 A:middle
协调我的更新

00:29:45.606 --> 00:29:47.576 A:middle
并保持事物的整齐同步

00:29:47.576 --> 00:29:49.676 A:middle
避免事物不一致

00:29:50.836 --> 00:29:53.356 A:middle
所以 首先 我在我的数据源上

00:29:53.356 --> 00:29:57.586 A:middle
更新了我的最后一个项目

00:29:57.666 --> 00:29:59.476 A:middle
我把第二个项目移动到最后

00:29:59.476 --> 00:30:01.316 A:middle
一个项目中 选中最后一个项目

00:29:59.476 --> 00:30:01.316 A:middle
一个项目中 选中最后一个项目

00:30:01.316 --> 00:30:02.416 A:middle
移动到最顶端

00:30:02.416 --> 00:30:04.086 A:middle
然后我要求 CollectionView

00:30:04.086 --> 00:30:05.926 A:middle
执行我想要的动画

00:30:06.766 --> 00:30:08.706 A:middle
好的 让我们再次回到 Sim

00:30:08.706 --> 00:30:10.846 A:middle
看看我们的更新是什么样子

00:30:10.846 --> 00:30:13.166 A:middle
所以我们已经通过

00:30:13.166 --> 00:30:14.426 A:middle
右上角的更新按钮

00:30:14.426 --> 00:30:17.856 A:middle
连接了我们的更新代码

00:30:18.056 --> 00:30:19.556 A:middle
&gt;&gt; 怎么样了

00:30:20.876 --> 00:30:23.526 A:middle
&gt;&gt; 有点尴尬

00:30:23.556 --> 00:30:25.456 A:middle
这发生了什么

00:30:25.456 --> 00:30:26.126 A:middle
&gt;&gt; 你知道的 我写

00:30:26.126 --> 00:30:27.026 A:middle
iOS 很长时间了

00:30:27.026 --> 00:30:28.596 A:middle
我之前见过这个影片

00:30:29.076 --> 00:30:31.396 A:middle
&gt;&gt; 是的 在舞台上发生这种事情

00:30:31.596 --> 00:30:34.586 A:middle
很糟糕

00:30:34.586 --> 00:30:36.096 A:middle
你知道的 我们的时间马上要

00:30:36.096 --> 00:30:37.756 A:middle
用完了 我们为什么不

00:30:37.756 --> 00:30:39.256 A:middle
调用重新下载数据 我们可以

00:30:39.636 --> 00:30:41.966 A:middle
回去 然后为 V2 做动画

00:30:41.966 --> 00:30:42.396 A:middle
&gt;&gt; 真的吗

00:30:43.516 --> 00:30:47.816 A:middle
［ 掌声 ］

00:30:48.316 --> 00:30:50.756 A:middle
你知道的 我们可以的 但是

00:30:50.756 --> 00:30:51.846 A:middle
接下来我们将会丢失这个非常酷炫的

00:30:51.846 --> 00:30:53.426 A:middle
更新动画 我们的用户

00:30:53.426 --> 00:30:55.036 A:middle
期待这些生动的界面

00:30:56.016 --> 00:30:56.206 A:middle
对吗

00:30:56.666 --> 00:30:57.766 A:middle
&gt;&gt; 是的 你说的对

00:30:57.766 --> 00:30:58.286 A:middle
你知道吗

00:30:58.286 --> 00:30:58.996 A:middle
他们值得更好的

00:30:59.446 --> 00:31:00.526 A:middle
&gt;&gt; 我喜欢你思考问题的方式

00:30:59.446 --> 00:31:00.526 A:middle
&gt;&gt; 我喜欢你思考问题的方式

00:31:00.676 --> 00:31:01.426 A:middle
好的 让我们快速

00:31:01.426 --> 00:31:03.256 A:middle
回到幻灯片中

00:31:03.256 --> 00:31:04.426 A:middle
让我们看看我们是否保存了我们

00:31:04.876 --> 00:31:06.736 A:middle
非常酷炫的动画更新

00:31:07.846 --> 00:31:08.736 A:middle
你之前已经看过了

00:31:08.876 --> 00:31:09.246 A:middle
好的

00:31:09.246 --> 00:31:11.286 A:middle
所以首先让我们仔细研究一下

00:31:11.286 --> 00:31:12.596 A:middle
这个调试异常 然后看看

00:31:12.596 --> 00:31:14.446 A:middle
它试图想告诉我们什么

00:31:14.446 --> 00:31:14.706 A:middle
好的

00:31:15.566 --> 00:31:16.436 A:middle
所以这里说的是 我们

00:31:16.436 --> 00:31:18.276 A:middle
正试图从 0-3 的

00:31:18.576 --> 00:31:20.716 A:middle
相同索引路径执行删除和

00:31:20.716 --> 00:31:21.766 A:middle
移动操作

00:31:21.766 --> 00:31:22.756 A:middle
所以如果我记的对的话 这刚刚是

00:31:22.756 --> 00:31:23.656 A:middle
第四个项目

00:31:23.656 --> 00:31:25.046 A:middle
我们重新下载 然后移动它

00:31:25.046 --> 00:31:27.806 A:middle
我们刚刚没有删除它 我们删除了

00:31:27.806 --> 00:31:29.386 A:middle
第三个项目 0-2 对

00:31:31.396 --> 00:31:33.026 A:middle
&gt;&gt; 所以 这是怎么回事

00:31:33.026 --> 00:31:34.326 A:middle
好的 在我们开始这个之前

00:31:34.326 --> 00:31:36.876 A:middle
让我们回去

00:31:36.876 --> 00:31:38.146 A:middle
匆匆看一眼 PerformBatchUpdates

00:31:38.146 --> 00:31:41.196 A:middle
API 讨论一些高级原则

00:31:41.196 --> 00:31:41.456 A:middle
好的

00:31:41.456 --> 00:31:43.496 A:middle
所以正如 Mohammed 之前提到的那样

00:31:43.496 --> 00:31:45.356 A:middle
当他介绍这个 API 的时候

00:31:45.356 --> 00:31:47.156 A:middle
这个 API 的目的便是

00:31:47.156 --> 00:31:48.826 A:middle
我们可以同时处理多种更新

00:31:48.826 --> 00:31:50.486 A:middle
让一切充满生气

00:31:50.486 --> 00:31:51.786 A:middle
获得这样一种

00:31:51.786 --> 00:31:53.526 A:middle
很棒的体验

00:31:54.296 --> 00:31:55.646 A:middle
也正如他所提到的那样

00:31:55.646 --> 00:31:57.556 A:middle
在 CollectionView

00:31:57.606 --> 00:31:59.516 A:middle
更新关闭中

00:31:59.516 --> 00:32:00.466 A:middle
执行数据源更新和

00:31:59.516 --> 00:32:00.466 A:middle
执行数据源更新和

00:32:00.526 --> 00:32:02.466 A:middle
你的 CollectionView 更新非常重要

00:32:03.276 --> 00:32:04.566 A:middle
现在 我所说的关于

00:32:04.566 --> 00:32:05.826 A:middle
CollectionView 的这些也同样适用于

00:32:05.826 --> 00:32:06.316 A:middle
TableView

00:32:06.316 --> 00:32:07.386 A:middle
所以如果你想要在你的 App 上

00:32:07.386 --> 00:32:09.136 A:middle
安装 TableViews 所有的这些信息

00:32:09.136 --> 00:32:10.256 A:middle
都是一致的

00:32:11.496 --> 00:32:13.856 A:middle
好的 让我们多观察一下

00:32:14.406 --> 00:32:16.136 A:middle
CollectionView 更新时

00:32:16.136 --> 00:32:16.976 A:middle
你插入 移动和删除

00:32:16.976 --> 00:32:19.186 A:middle
这些顺序

00:32:19.246 --> 00:32:20.586 A:middle
在你的更新关闭中

00:32:20.586 --> 00:32:21.016 A:middle
并不重要

00:32:21.736 --> 00:32:22.556 A:middle
把它们放在任何你想要放的地方

00:32:23.666 --> 00:32:25.046 A:middle
然而 当你改变结构时

00:32:25.046 --> 00:32:26.176 A:middle
现在你的数据源会更新

00:32:26.176 --> 00:32:27.176 A:middle
提供你的数据源或者

00:32:27.176 --> 00:32:31.306 A:middle
支持数据源的数据源很重要

00:32:32.456 --> 00:32:34.906 A:middle
好的 最好用一个例子

00:32:34.906 --> 00:32:36.146 A:middle
来展示 所以我将

00:32:36.146 --> 00:32:38.086 A:middle
列举一个例子 这个例子包含两个数组

00:32:38.086 --> 00:32:39.106 A:middle
每个数组有三个元素

00:32:39.106 --> 00:32:41.946 A:middle
我们将强化我们这方面的直觉

00:32:41.946 --> 00:32:43.796 A:middle
展示一个删除和一个插入

00:32:44.006 --> 00:32:45.406 A:middle
但是首先我们将

00:32:45.406 --> 00:32:46.916 A:middle
先执行一次删除

00:32:46.996 --> 00:32:48.846 A:middle
然后再执行第二个删除

00:32:48.846 --> 00:32:49.666 A:middle
我们将颠倒顺序

00:32:49.666 --> 00:32:51.196 A:middle
只是为了

00:32:51.196 --> 00:32:52.156 A:middle
增强我们的直觉

00:32:52.266 --> 00:32:53.076 A:middle
我一直这样做

00:32:53.076 --> 00:32:53.646 A:middle
画画 对

00:32:53.826 --> 00:32:54.786 A:middle
好的

00:32:54.786 --> 00:32:56.056 A:middle
所以我们删除第一个项目

00:32:57.246 --> 00:33:00.346 A:middle
然后我们现在要在索引一插入

00:32:57.246 --> 00:33:00.346 A:middle
然后我们现在要在索引一插入

00:33:01.186 --> 00:33:02.526 A:middle
好的 在第二个例子中

00:33:02.526 --> 00:33:03.846 A:middle
我们颠倒顺序

00:33:03.846 --> 00:33:05.626 A:middle
先插入然后再进行删除

00:33:06.526 --> 00:33:08.436 A:middle
所以我们的直觉依然存在 确实

00:33:08.436 --> 00:33:09.356 A:middle
我们得到了一个完全不同的结果

00:33:09.456 --> 00:33:10.426 A:middle
这可能并不是一件好事

00:33:10.496 --> 00:33:10.936 A:middle
好的

00:33:12.376 --> 00:33:14.776 A:middle
让我们把这个和

00:33:14.776 --> 00:33:15.986 A:middle
CollectionView 的更新做一下对比

00:33:16.126 --> 00:33:17.806 A:middle
现在这里有两组

00:33:17.806 --> 00:33:18.816 A:middle
批量更新提交的

00:33:18.816 --> 00:33:21.256 A:middle
CollectionView 更新

00:33:21.256 --> 00:33:22.396 A:middle
我已经删除了数据源更新

00:33:22.396 --> 00:33:23.926 A:middle
只是为了保持幻灯片的整洁

00:33:24.996 --> 00:33:25.906 A:middle
但是我在第一个上面做了插入和

00:33:25.906 --> 00:33:28.766 A:middle
删除 在第二个上面先删除再插入

00:33:28.766 --> 00:33:30.406 A:middle
顺序是不同的

00:33:30.406 --> 00:33:31.696 A:middle
但这会给你完全

00:33:31.696 --> 00:33:32.326 A:middle
相同的结果

00:33:33.426 --> 00:33:34.376 A:middle
我们都是工程师

00:33:34.376 --> 00:33:35.956 A:middle
我们想知道为什么

00:33:35.956 --> 00:33:36.286 A:middle
为什么是这样

00:33:36.286 --> 00:33:38.066 A:middle
好的 让我们谈谈吧

00:33:38.676 --> 00:33:39.796 A:middle
这是怎么发生的呢

00:33:39.796 --> 00:33:40.766 A:middle
为什么排序对于

00:33:40.766 --> 00:33:42.166 A:middle
发送到 CollectionView 的

00:33:42.166 --> 00:33:43.106 A:middle
更新并不重要

00:33:43.106 --> 00:33:44.296 A:middle
当然这是针对你的数据源而言的

00:33:44.296 --> 00:33:46.446 A:middle
好的 让我们通过操作

00:33:46.446 --> 00:33:47.926 A:middle
来完成这些操作

00:33:47.926 --> 00:33:50.346 A:middle
所以第一个是要删除

00:33:50.346 --> 00:33:52.506 A:middle
这是按降序索引路径顺序

00:33:52.586 --> 00:33:53.196 A:middle
进行的过程

00:33:53.196 --> 00:33:55.536 A:middle
现在让我们谈谈索引路径

00:33:55.716 --> 00:33:57.576 A:middle
所以首先

00:33:57.576 --> 00:33:58.586 A:middle
在批量更新开始之前

00:33:58.586 --> 00:33:59.946 A:middle
你在考虑

00:33:59.946 --> 00:34:01.206 A:middle
在 PerformBatchUpdate 中发生了什么

00:33:59.946 --> 00:34:01.206 A:middle
在 PerformBatchUpdate 中发生了什么

00:34:01.206 --> 00:34:02.786 A:middle
你的数据源处于之前状态

00:34:04.046 --> 00:34:05.466 A:middle
现在一旦所有事情

00:34:05.466 --> 00:34:07.156 A:middle
在批量更新中完成

00:34:07.276 --> 00:34:08.025 A:middle
你将处于一个后续状态

00:34:08.606 --> 00:34:10.906 A:middle
好的 所以对于删除而言

00:34:10.966 --> 00:34:13.275 A:middle
索引路径总是指向前级

00:34:13.686 --> 00:34:15.326 A:middle
所以这就是删除

00:34:15.326 --> 00:34:18.226 A:middle
所以插入是按

00:34:18.335 --> 00:34:20.255 A:middle
升序索引路径顺序进行处理的

00:34:20.846 --> 00:34:23.346 A:middle
因此 插入中的索引

00:34:23.346 --> 00:34:25.376 A:middle
路径总是指向

00:34:25.446 --> 00:34:27.116 A:middle
最终状态或者

00:34:27.255 --> 00:34:28.206 A:middle
后更新阶段

00:34:29.636 --> 00:34:30.946 A:middle
所以 移动是这两者的结合

00:34:30.946 --> 00:34:31.436 A:middle
对吧

00:34:31.436 --> 00:34:33.485 A:middle
你有一个来和一个去的索引

00:34:33.485 --> 00:34:35.235 A:middle
路径 来是处于

00:34:35.235 --> 00:34:39.366 A:middle
之前状态 好的 去是处于后续状态

00:34:39.806 --> 00:34:42.545 A:middle
重新加载 现在如果你愿意

00:34:42.545 --> 00:34:44.186 A:middle
重新加载算一个超级命令

00:34:44.186 --> 00:34:46.096 A:middle
它实际上可以分解成为

00:34:46.096 --> 00:34:47.876 A:middle
一个删除和一个插入

00:34:48.416 --> 00:34:51.266 A:middle
重新加载中指定的

00:34:51.266 --> 00:34:55.016 A:middle
索引路径是关于前状态的

00:34:56.126 --> 00:34:57.776 A:middle
好的 所以既然我们已经

00:34:57.776 --> 00:34:59.106 A:middle
了解了重新加载是干什么的

00:34:59.106 --> 00:35:00.946 A:middle
这种洞察力可以告诉我们

00:34:59.106 --> 00:35:00.946 A:middle
这种洞察力可以告诉我们

00:35:00.946 --> 00:35:02.426 A:middle
在我们的 App 中

00:35:02.756 --> 00:35:04.466 A:middle
发生了什么错误

00:35:05.476 --> 00:35:06.516 A:middle
因为最后个项目

00:35:06.516 --> 00:35:07.696 A:middle
重新加载中的删除和

00:35:07.696 --> 00:35:10.376 A:middle
项目的移动概念相冲突

00:35:10.476 --> 00:35:10.796 A:middle
好的

00:35:10.846 --> 00:35:12.006 A:middle
所以当我们回到代码中

00:35:12.006 --> 00:35:14.396 A:middle
我们可以一分钟内解决这个问题

00:35:14.396 --> 00:35:15.906 A:middle
好的 我不打算检查

00:35:15.906 --> 00:35:17.866 A:middle
这些 但是你可以稍后解释

00:35:17.866 --> 00:35:18.996 A:middle
只是把它放在这里作参考

00:35:18.996 --> 00:35:22.346 A:middle
这些都会导致 CollectionView 崩溃

00:35:22.726 --> 00:35:23.576 A:middle
不要这样做

00:35:23.716 --> 00:35:27.486 A:middle
我们如何获取所有这些

00:35:27.486 --> 00:35:29.176 A:middle
知识并简化它

00:35:29.176 --> 00:35:30.746 A:middle
以这样一种方式来使用它

00:35:30.746 --> 00:35:32.456 A:middle
我们总是可以从给定的

00:35:32.456 --> 00:35:34.016 A:middle
CollectionView 或 TableView

00:35:34.016 --> 00:35:35.026 A:middle
中应用我们的数据源更新

00:35:35.026 --> 00:35:36.826 A:middle
并确保所有的东西都同步

00:35:37.056 --> 00:35:37.426 A:middle
好的

00:35:37.496 --> 00:35:38.796 A:middle
所以这是四项基本的原则

00:35:39.446 --> 00:35:40.176 A:middle
所以首先你想要

00:35:40.176 --> 00:35:41.466 A:middle
分解这些动作

00:35:41.466 --> 00:35:42.336 A:middle
删除然后插入

00:35:42.556 --> 00:35:44.776 A:middle
简单 将所有删除和插入

00:35:44.776 --> 00:35:45.796 A:middle
组合到两个

00:35:45.796 --> 00:35:48.536 A:middle
单独的列表中

00:35:48.536 --> 00:35:50.546 A:middle
首先在索引路径上

00:35:50.546 --> 00:35:52.396 A:middle
按降序顺序进行删除

00:35:52.396 --> 00:35:54.176 A:middle
最后按升序索引路径

00:35:54.246 --> 00:35:55.636 A:middle
应用这些插入

00:35:55.776 --> 00:35:59.586 A:middle
做到这一点 就很好往下进行了

00:35:59.816 --> 00:36:00.826 A:middle
重新加载数据怎么样

00:35:59.816 --> 00:36:00.826 A:middle
重新加载数据怎么样

00:36:00.826 --> 00:36:02.466 A:middle
我知道 Mohammed 说我们

00:36:02.466 --> 00:36:04.676 A:middle
可以做到这一点 我们完成了 每个人都笑了

00:36:04.676 --> 00:36:05.586 A:middle
我很确定我大喊了

00:36:05.586 --> 00:36:07.456 A:middle
情况就是这样 但是关于

00:36:07.456 --> 00:36:08.606 A:middle
重新加载数据的事实却是你没有

00:36:08.606 --> 00:36:09.926 A:middle
获得这些很棒的动画

00:36:09.926 --> 00:36:11.826 A:middle
这真的是一个强有力的做法

00:36:12.516 --> 00:36:13.816 A:middle
所以 我们真的想让我们的

00:36:13.816 --> 00:36:15.286 A:middle
App 变得活泼生动

00:36:15.286 --> 00:36:16.686 A:middle
使我们的客户 获得很棒的感受

00:36:16.686 --> 00:36:19.496 A:middle
所以 这是在特殊情况下使用的

00:36:20.356 --> 00:36:21.576 A:middle
好吧 Mohammed 让我们快速

00:36:21.576 --> 00:36:23.416 A:middle
切换回来 看看我们能否

00:36:23.416 --> 00:36:24.536 A:middle
在代码中解决这个问题

00:36:24.536 --> 00:36:26.046 A:middle
并保存完全酷炫的

00:36:26.566 --> 00:36:27.236 A:middle
更新动画

00:36:27.676 --> 00:36:29.666 A:middle
&gt;&gt; 好的 是时候赎罪了

00:36:29.666 --> 00:36:29.766 A:middle
&gt;&gt; 是的

00:36:29.766 --> 00:36:32.066 A:middle
&gt;&gt; 所以让我们使用

00:36:32.066 --> 00:36:33.446 A:middle
刚刚 Steve 分享给我们的

00:36:33.446 --> 00:36:34.966 A:middle
指导原则来修复我们的更新动画

00:36:35.156 --> 00:36:36.756 A:middle
所以让我们删除这里的

00:36:36.756 --> 00:36:37.556 A:middle
所有执行

00:36:37.746 --> 00:36:40.456 A:middle
如果你还记得 我们的更新

00:36:40.456 --> 00:36:44.066 A:middle
包括重新加载 删除 和移动

00:36:44.066 --> 00:36:46.916 A:middle
我们的重新加载和移动

00:36:46.916 --> 00:36:49.086 A:middle
处于相同的索引路径

00:36:49.296 --> 00:36:50.386 A:middle
它们在同样的地方开始

00:36:50.386 --> 00:36:52.326 A:middle
这就是我们的冲突所在

00:36:52.796 --> 00:36:55.396 A:middle
所以我们需要先分开这两个

00:36:55.956 --> 00:36:57.926 A:middle
因此让我们重新载入

00:36:57.926 --> 00:36:59.706 A:middle
自己的调用来执行

00:36:59.706 --> 00:37:03.546 A:middle
批量更新 然后在这

00:36:59.706 --> 00:37:03.546 A:middle
批量更新 然后在这

00:37:04.506 --> 00:37:06.176 A:middle
我只是在更新我的数据源 再一次

00:37:06.496 --> 00:37:09.216 A:middle
和之前一样 在 CollectionView 上

00:37:09.216 --> 00:37:09.806 A:middle
调用重新加载的项目

00:37:10.336 --> 00:37:12.496 A:middle
我只是在没有动画关闭

00:37:12.496 --> 00:37:14.156 A:middle
的 UI 视图中执行它

00:37:14.686 --> 00:37:16.376 A:middle
如果你仔细查看

00:37:16.376 --> 00:37:18.336 A:middle
我们的规范

00:37:18.336 --> 00:37:19.716 A:middle
它实际上是非动画的

00:37:19.716 --> 00:37:20.436 A:middle
初始重新加载

00:37:22.026 --> 00:37:24.236 A:middle
好的 所以接下来 我们必须

00:37:24.236 --> 00:37:25.266 A:middle
处理剩余的

00:37:25.266 --> 00:37:29.716 A:middle
更新 删除和移动

00:37:29.936 --> 00:37:32.386 A:middle
让我们来解释一下

00:37:32.386 --> 00:37:35.766 A:middle
我们在索引二处删除

00:37:35.766 --> 00:37:38.176 A:middle
然后把项目从索引三

00:37:38.176 --> 00:37:40.376 A:middle
移动到索引零处

00:37:41.386 --> 00:37:43.256 A:middle
因此如果我们使用

00:37:43.256 --> 00:37:44.886 A:middle
我们刚刚学到的指导原则来

00:37:44.886 --> 00:37:47.146 A:middle
分解我们的动作 这就变成了

00:37:47.146 --> 00:37:50.046 A:middle
索引二进行删除

00:37:50.046 --> 00:37:53.506 A:middle
索引三进行删除

00:37:53.506 --> 00:37:56.066 A:middle
把项目插入到索引三至索引零

00:37:57.496 --> 00:38:00.836 A:middle
所以现在我们有两套操作

00:37:57.496 --> 00:38:00.836 A:middle
所以现在我们有两套操作

00:38:00.836 --> 00:38:02.766 A:middle
我们有删除和插入

00:38:03.146 --> 00:38:04.826 A:middle
我们可以相应地处理它们

00:38:05.566 --> 00:38:07.246 A:middle
首先 我们按照降序顺序

00:38:07.246 --> 00:38:08.776 A:middle
执行删除操作

00:38:08.946 --> 00:38:11.516 A:middle
因此我们首先要在索引三处

00:38:11.656 --> 00:38:13.756 A:middle
进行删除 然后

00:38:13.756 --> 00:38:15.546 A:middle
抓住来自那里的人 以便

00:38:15.546 --> 00:38:16.476 A:middle
以后我们可以插入它们

00:38:17.376 --> 00:38:22.876 A:middle
接下来我们将要删除 在索引二处的项目

00:38:23.126 --> 00:38:24.756 A:middle
接下来我们需要按照升序的顺序来

00:38:24.756 --> 00:38:26.366 A:middle
处理我们的插入

00:38:26.526 --> 00:38:27.916 A:middle
我们只有一个 所以我们就

00:38:27.916 --> 00:38:30.266 A:middle
继续 插入它

00:38:30.266 --> 00:38:31.586 A:middle
最后 我们会要求

00:38:31.586 --> 00:38:34.296 A:middle
CollectionView 执行

00:38:34.296 --> 00:38:35.446 A:middle
我们想要的动画

00:38:35.816 --> 00:38:38.466 A:middle
现在 注意 我仍在调用

00:38:38.466 --> 00:38:39.116 A:middle
此处的移动

00:38:39.116 --> 00:38:40.966 A:middle
我没有把它分解成

00:38:40.966 --> 00:38:42.726 A:middle
它的组件动作 因为

00:38:42.726 --> 00:38:43.836 A:middle
我们仍然想要 Collection View

00:38:44.046 --> 00:38:45.476 A:middle
播放正确的动画

00:38:45.476 --> 00:38:46.296 A:middle
如果我们用我们的数据源

00:38:46.386 --> 00:38:47.906 A:middle
做出了正确的事情

00:38:47.906 --> 00:38:49.086 A:middle
那么 CollectionView 会根据动画做出

00:38:49.156 --> 00:38:50.616 A:middle
正确的思考

00:38:51.376 --> 00:38:51.756 A:middle
好的

00:38:51.846 --> 00:38:53.826 A:middle
让我们回到模拟器中

00:38:53.826 --> 00:38:56.826 A:middle
看看当它工作时

00:38:56.826 --> 00:38:58.066 A:middle
我们的更新是什么样子

00:38:58.936 --> 00:38:59.966 A:middle
好的

00:39:00.536 --> 00:39:01.146 A:middle
这里什么也没有

00:39:01.986 --> 00:39:02.176 A:middle
&gt;&gt; 哇

00:39:02.826 --> 00:39:02.976 A:middle
&gt;&gt; 很棒

00:39:03.516 --> 00:39:07.716 A:middle
［ 掌声 ］

00:39:08.216 --> 00:39:09.296 A:middle
我将要重新加载

00:39:09.296 --> 00:39:11.126 A:middle
绕场慢跑一圈庆祝胜利

00:39:11.126 --> 00:39:13.696 A:middle
让我们继续吧

00:39:13.946 --> 00:39:15.446 A:middle
这看起来和我们的规格完全一样

00:39:15.446 --> 00:39:16.356 A:middle
不是吗

00:39:16.356 --> 00:39:17.956 A:middle
&gt;&gt; 很棒 了不起

00:39:17.986 --> 00:39:18.206 A:middle
好的

00:39:18.906 --> 00:39:19.766 A:middle
让我们圆满完成它

00:39:19.766 --> 00:39:21.496 A:middle
我们涵盖了大量内容

00:39:21.496 --> 00:39:22.796 A:middle
你能回到幻灯片中吗

00:39:23.906 --> 00:39:25.716 A:middle
我想发布一个调用来执行

00:39:25.716 --> 00:39:28.576 A:middle
所以如果你对构建自定义布局

00:39:29.036 --> 00:39:30.636 A:middle
感到紧张或焦虑

00:39:30.636 --> 00:39:32.106 A:middle
请采用我们今天刚刚

00:39:32.106 --> 00:39:33.586 A:middle
应用的内容 然后返回

00:39:33.906 --> 00:39:35.196 A:middle
研究并建立那些自定义

00:39:35.196 --> 00:39:36.376 A:middle
布局 建立行之有效的

00:39:36.806 --> 00:39:38.016 A:middle
CollectionView 解决方案

00:39:38.016 --> 00:39:39.806 A:middle
如果在你的 App 中

00:39:39.806 --> 00:39:41.016 A:middle
重新加载的数据导出都是

00:39:41.016 --> 00:39:42.396 A:middle
你正在失去

00:39:42.396 --> 00:39:43.596 A:middle
这些灰色的动画

00:39:44.016 --> 00:39:45.046 A:middle
它们会检查这些事情

00:39:45.046 --> 00:39:46.376 A:middle
看看为什么你不理解这些

00:39:46.376 --> 00:39:47.596 A:middle
或者不明白

00:39:47.686 --> 00:39:48.966 A:middle
为什么会发生这些事情

00:39:48.966 --> 00:39:52.376 A:middle
并修复这些地方

00:39:52.546 --> 00:39:54.056 A:middle
好的 所以想获取更多消息

00:39:54.056 --> 00:39:55.286 A:middle
你可以看到幻灯片这儿

00:39:55.286 --> 00:39:55.536 A:middle
有链接

00:39:56.266 --> 00:39:57.236 A:middle
并且明天上午 9 点

00:39:57.236 --> 00:39:59.346 A:middle
我们也有一个 CollectionView 的实验

00:39:59.346 --> 00:40:00.746 A:middle
如果你有任何

00:39:59.346 --> 00:40:00.746 A:middle
如果你有任何

00:40:00.746 --> 00:40:01.476 A:middle
关于你的 CollectionViews 的问题或评论

00:40:01.476 --> 00:40:02.706 A:middle
请顺便来

00:40:02.706 --> 00:40:03.316 A:middle
找我们聊一聊

00:40:03.316 --> 00:40:05.096 A:middle
Mohammed 和我都会在这

00:40:05.666 --> 00:40:07.376 A:middle
谢谢大家来参加

00:40:07.376 --> 00:40:08.386 A:middle
我希望你们能享受

00:40:08.386 --> 00:40:08.976 A:middle
接下来的会议

00:40:09.516 --> 00:40:13.500 A:middle
［ 掌声 ］
