WEBVTT

00:00:06.516 --> 00:00:15.500 A:middle
[ 音乐 ]

00:00:20.516 --> 00:00:25.176 A:middle
[ 掌声 ]

00:00:25.676 --> 00:00:26.356 A:middle
&gt;&gt; 大家好

00:00:27.316 --> 00:00:29.336 A:middle
欢迎来到 221 号讨论会

00:00:29.336 --> 00:00:29.906 A:middle
“TextKit Best Practices（最佳实践）”

00:00:29.906 --> 00:00:31.086 A:middle
我是 Donna Tom

00:00:31.086 --> 00:00:32.826 A:middle
一名 TextKit 工程师

00:00:32.826 --> 00:00:35.076 A:middle
我的同事 Emily Van Haren

00:00:35.076 --> 00:00:36.116 A:middle
今天也会和我一起介绍

00:00:36.116 --> 00:00:36.806 A:middle
她来自创作工具组

00:00:37.036 --> 00:00:38.796 A:middle
我们非常激动能够

00:00:38.796 --> 00:00:39.756 A:middle
和大家分享

00:00:39.756 --> 00:00:41.286 A:middle
运用 TextKit 的一些最佳实践

00:00:41.676 --> 00:00:42.746 A:middle
让我们开始吧

00:00:43.416 --> 00:00:45.786 A:middle
首先 我们将回顾一下

00:00:45.786 --> 00:00:47.616 A:middle
运用 TextKit 的一些关键概念

00:00:48.466 --> 00:00:49.916 A:middle
然后 我们会通过一些

00:00:49.916 --> 00:00:51.316 A:middle
例子来说明如何

00:00:51.316 --> 00:00:52.596 A:middle
把这些关键概念运用到

00:00:52.596 --> 00:00:52.663 A:middle
你的 App 中

00:00:53.916 --> 00:00:55.316 A:middle
最后 我们将以一些

00:00:55.316 --> 00:00:56.716 A:middle
在正确性 性能

00:00:56.716 --> 00:00:59.116 A:middle
以及安全领域的最佳实践结束

00:01:00.496 --> 00:01:03.496 A:middle
现在让我们从关键概念开始吧

00:01:03.496 --> 00:01:04.346 A:middle
为了确保我们进度相同

00:01:04.385 --> 00:01:06.496 A:middle
我们将从最基础的内容开始

00:01:07.526 --> 00:01:08.616 A:middle
什么是 TextKit

00:01:09.126 --> 00:01:12.016 A:middle
你的第一反应可能是

00:01:12.296 --> 00:01:13.626 A:middle
去在 Xcode 中打开一个

00:01:13.626 --> 00:01:15.276 A:middle
新的 Playground 并且输入

00:01:15.426 --> 00:01:17.716 A:middle
“import TextKit”

00:01:17.716 --> 00:01:19.116 A:middle
除非你已经试过这样做

00:01:19.116 --> 00:01:19.796 A:middle
并且发现没有用

00:01:20.216 --> 00:01:23.236 A:middle
这是因为 TextKit

00:01:23.236 --> 00:01:24.456 A:middle
与其他你可能已经用过的框架相比

00:01:24.456 --> 00:01:25.406 A:middle
有些不同

00:01:26.306 --> 00:01:27.116 A:middle
你不必导入任何东西

00:01:27.116 --> 00:01:28.336 A:middle
就可以使用它

00:01:29.376 --> 00:01:30.776 A:middle
UIKit 和 AppKit 中的

00:01:30.776 --> 00:01:32.866 A:middle
文本控件都是建立在

00:01:32.866 --> 00:01:33.246 A:middle
TextKit 上面的

00:01:33.806 --> 00:01:34.946 A:middle
所以 如果你曾使用过

00:01:34.946 --> 00:01:37.026 A:middle
label textField 或者 textView

00:01:37.066 --> 00:01:38.846 A:middle
你其实已经使用过 TextKit 了

00:01:39.846 --> 00:01:40.796 A:middle
TextKit 还集成了

00:01:40.796 --> 00:01:42.386 A:middle
强大的底层技术

00:01:42.596 --> 00:01:44.146 A:middle
比如 Core Text Core Graphics

00:01:44.296 --> 00:01:46.036 A:middle
和 Foundation 来让你的 App

00:01:46.036 --> 00:01:47.756 A:middle
能够轻松且完美地显示文本

00:01:49.176 --> 00:01:50.396 A:middle
每次你使用这些

00:01:50.396 --> 00:01:51.806 A:middle
内置控件之一的时候 你都是在

00:01:51.806 --> 00:01:53.416 A:middle
使用 TextKit 的功能去

00:01:53.416 --> 00:01:55.156 A:middle
显示或编辑文本 以一种完全

00:01:55.156 --> 00:01:56.826 A:middle
国际化 可本地化

00:01:56.826 --> 00:01:58.186 A:middle
的方式 并且没有

00:01:58.186 --> 00:01:59.426 A:middle
直接运用这些底层

00:01:59.426 --> 00:02:01.086 A:middle
技术或者理解

00:01:59.426 --> 00:02:01.086 A:middle
技术或者理解

00:02:01.086 --> 00:02:02.566 A:middle
复杂的脚本

00:02:02.626 --> 00:02:04.356 A:middle
还有很多

00:02:04.356 --> 00:02:05.706 A:middle
你还能顺带获得很多额外的东西

00:02:05.706 --> 00:02:06.736 A:middle
比如你在这里看到的

00:02:06.736 --> 00:02:07.146 A:middle
这些显示特性

00:02:07.796 --> 00:02:10.346 A:middle
至于编辑 你也会

00:02:10.346 --> 00:02:11.636 A:middle
获得所有 OS 所支持的

00:02:11.636 --> 00:02:12.646 A:middle
技术服务

00:02:12.766 --> 00:02:14.466 A:middle
比如辅助功能

00:02:14.466 --> 00:02:15.186 A:middle
拼写检查等等

00:02:15.886 --> 00:02:16.946 A:middle
你可以充分利用

00:02:16.946 --> 00:02:18.276 A:middle
所有这些出色的功能

00:02:18.406 --> 00:02:19.566 A:middle
而无需编写

00:02:19.566 --> 00:02:21.486 A:middle
一行代码 这真的很棒

00:02:22.486 --> 00:02:23.716 A:middle
有了这么多触手可及的

00:02:23.716 --> 00:02:24.406 A:middle
功能供你选择

00:02:24.406 --> 00:02:25.986 A:middle
你怎么决定

00:02:25.986 --> 00:02:27.646 A:middle
使用哪一个控件呢

00:02:28.196 --> 00:02:29.246 A:middle
那我们就来讨论一下

00:02:29.756 --> 00:02:30.796 A:middle
如何为你的情况选择

00:02:30.796 --> 00:02:31.636 A:middle
合适的控件

00:02:31.946 --> 00:02:32.956 A:middle
你可能会有

00:02:32.956 --> 00:02:33.926 A:middle
不同的选择 取决于

00:02:33.926 --> 00:02:36.046 A:middle
你是在使用 UIKit 还是 AppKit

00:02:36.436 --> 00:02:37.506 A:middle
所以让我们分别讨论一下

00:02:37.506 --> 00:02:38.166 A:middle
好的

00:02:38.696 --> 00:02:40.466 A:middle
让我们从 UIKit 开始

00:02:41.006 --> 00:02:44.846 A:middle
首先 你会考虑你是否需要文本输入

00:02:45.346 --> 00:02:47.476 A:middle
如果你不需要文本输入

00:02:47.476 --> 00:02:49.006 A:middle
那接下来你考虑你是否

00:02:49.006 --> 00:02:50.406 A:middle
需要选择或滚动

00:02:50.976 --> 00:02:53.376 A:middle
如果你不需要这些

00:02:53.676 --> 00:02:54.916 A:middle
那你应该使用 UILabel

00:02:55.666 --> 00:02:57.276 A:middle
UILabels 适用于

00:02:57.276 --> 00:02:58.936 A:middle
少量的文本 比如几个字

00:02:58.936 --> 00:02:59.656 A:middle
或者几行字

00:03:01.136 --> 00:03:02.096 A:middle
如果你有比这更多的文本

00:03:02.136 --> 00:03:03.696 A:middle
或者你需要

00:03:03.826 --> 00:03:04.546 A:middle
选择或者滚动的功能

00:03:04.546 --> 00:03:05.966 A:middle
那你需要使用

00:03:05.966 --> 00:03:07.676 A:middle
禁用编辑的

00:03:07.676 --> 00:03:08.116 A:middle
UITextView

00:03:08.116 --> 00:03:10.286 A:middle
现在我们回到顶端

00:03:10.286 --> 00:03:12.456 A:middle
如果你需要文本输入 那么

00:03:12.456 --> 00:03:13.626 A:middle
考虑你是否需要安全的

00:03:13.626 --> 00:03:14.186 A:middle
文本输入

00:03:14.186 --> 00:03:15.336 A:middle
这会像密码栏一样

00:03:15.336 --> 00:03:16.936 A:middle
其中文本被隐藏起来

00:03:16.936 --> 00:03:18.666 A:middle
复制被禁用

00:03:19.236 --> 00:03:21.806 A:middle
如果你需要这样

00:03:21.806 --> 00:03:23.726 A:middle
你就应该使用 UITextField 因为它是

00:03:23.726 --> 00:03:25.076 A:middle
唯一支持安全文本

00:03:25.246 --> 00:03:26.026 A:middle
输入的控件

00:03:26.476 --> 00:03:29.346 A:middle
否则 想想你

00:03:29.456 --> 00:03:30.886 A:middle
想输入的文本有多少

00:03:32.076 --> 00:03:33.016 A:middle
如果你想要像表单栏输入那样

00:03:33.016 --> 00:03:34.466 A:middle
只需要一行的

00:03:34.466 --> 00:03:36.076 A:middle
那就使用

00:03:36.076 --> 00:03:36.836 A:middle
UITextField

00:03:37.126 --> 00:03:38.686 A:middle
UITextField 仅支持

00:03:38.766 --> 00:03:41.716 A:middle
一行文本输入

00:03:41.936 --> 00:03:42.996 A:middle
如果你需要比这更多的文本

00:03:43.176 --> 00:03:44.556 A:middle
你可以使用 UITextView

00:03:45.106 --> 00:03:47.976 A:middle
对于 AppKit 来说

00:03:47.976 --> 00:03:49.206 A:middle
同样需要这样的决策过程

00:03:49.206 --> 00:03:51.006 A:middle
这个过程和 UIKit 的很像

00:03:51.006 --> 00:03:52.656 A:middle
但是有些小小的不同

00:03:53.406 --> 00:03:55.496 A:middle
你也要从考虑是否

00:03:55.496 --> 00:03:57.036 A:middle
需要文本输入开始

00:03:57.596 --> 00:04:00.526 A:middle
AppKit 没有标签控件

00:03:57.596 --> 00:04:00.526 A:middle
AppKit 没有标签控件

00:04:00.716 --> 00:04:02.106 A:middle
所以 如果你需要展示文本

00:04:03.116 --> 00:04:04.546 A:middle
那就使用 NSTextField

00:04:04.546 --> 00:04:05.546 A:middle
你可以禁用编辑和选择

00:04:05.546 --> 00:04:07.036 A:middle
来获得和标签一样的效果

00:04:07.036 --> 00:04:10.566 A:middle
现在回到顶端

00:04:10.566 --> 00:04:12.286 A:middle
如果你需要文本输入

00:04:12.456 --> 00:04:13.526 A:middle
问问自己是否需要

00:04:13.526 --> 00:04:13.806 A:middle
安全文本输入

00:04:13.806 --> 00:04:15.856 A:middle
如果需要 那你可以使用

00:04:15.986 --> 00:04:16.766 A:middle
NSSecureTextField

00:04:17.176 --> 00:04:19.296 A:middle
否则 我们会问

00:04:19.296 --> 00:04:20.596 A:middle
我们最喜欢的问题

00:04:20.596 --> 00:04:22.346 A:middle
你想要多少文本

00:04:23.176 --> 00:04:25.116 A:middle
NSTextView 对展示

00:04:25.116 --> 00:04:26.556 A:middle
大量文本进行了优化

00:04:26.946 --> 00:04:28.416 A:middle
所以 如果你有大量文本要处理

00:04:28.416 --> 00:04:30.506 A:middle
你应该使用 NSTextView

00:04:31.126 --> 00:04:32.556 A:middle
否则 你可以使用

00:04:32.556 --> 00:04:33.216 A:middle
NSTextField

00:04:33.946 --> 00:04:34.986 A:middle
与 UIKit 不同

00:04:34.986 --> 00:04:36.926 A:middle
NSTextField

00:04:36.976 --> 00:04:38.136 A:middle
支持多行文字

00:04:39.056 --> 00:04:40.086 A:middle
但是它更适用于

00:04:40.086 --> 00:04:41.556 A:middle
短一些的字符串

00:04:41.556 --> 00:04:43.076 A:middle
因此如果你有大量的文本的话

00:04:43.076 --> 00:04:45.766 A:middle
仍然应该使用 NSTextView

00:04:45.896 --> 00:04:47.616 A:middle
好 你们中的和 TextKit 打过几次交道的人

00:04:47.616 --> 00:04:49.336 A:middle
可能已经注意到

00:04:49.336 --> 00:04:50.266 A:middle
这个流程图缺少了一个选项

00:04:50.266 --> 00:04:51.896 A:middle
那就是字符串绘制优化

00:04:53.096 --> 00:04:54.416 A:middle
你可以通过在你的

00:04:54.416 --> 00:04:56.016 A:middle
NSString 或者 NSAttributedString 下

00:04:56.296 --> 00:04:58.396 A:middle
直接调用 draw(at: CGPoint)

00:04:58.466 --> 00:04:59.296 A:middle
或 draw(in: CGRect)

00:04:59.296 --> 00:05:00.236 A:middle
来进行字符串绘制

00:04:59.296 --> 00:05:00.236 A:middle
来进行字符串绘制

00:05:01.146 --> 00:05:02.366 A:middle
你们中的一些人可能会为了

00:05:02.366 --> 00:05:03.696 A:middle
避免在 Kit 层级上使用过多的

00:05:03.846 --> 00:05:05.236 A:middle
视图对象所带来的性能收益

00:05:05.236 --> 00:05:06.276 A:middle
来使用它

00:05:07.606 --> 00:05:08.446 A:middle
因此 如果你想要用这个方法

00:05:08.446 --> 00:05:10.826 A:middle
请务必记住下面的几点提示

00:05:11.696 --> 00:05:12.686 A:middle
你应该用它来处理

00:05:12.686 --> 00:05:13.676 A:middle
少量的静态文本

00:05:14.166 --> 00:05:14.926 A:middle
并且你应该限制

00:05:14.926 --> 00:05:16.396 A:middle
调用 draw() 方法的频率

00:05:17.236 --> 00:05:18.186 A:middle
如果你频繁地调用字符串

00:05:18.186 --> 00:05:20.296 A:middle
绘制方法

00:05:20.296 --> 00:05:21.626 A:middle
你获得的性能表现可能不如

00:05:21.896 --> 00:05:23.706 A:middle
使用标签或文本栏

00:05:23.846 --> 00:05:25.006 A:middle
因为这些控件能提供

00:05:25.006 --> 00:05:26.516 A:middle
更好的缓存 特别是

00:05:26.516 --> 00:05:27.306 A:middle
使用自动布局的情况下

00:05:27.306 --> 00:05:29.216 A:middle
如果你正在绘制一个

00:05:29.216 --> 00:05:31.056 A:middle
有很多自定义属性的

00:05:31.056 --> 00:05:33.176 A:middle
属性文本字符串 这也会

00:05:33.176 --> 00:05:34.366 A:middle
减慢你的字符串绘制

00:05:34.366 --> 00:05:35.756 A:middle
因为文本系统

00:05:35.756 --> 00:05:36.936 A:middle
需要在渲染之前

00:05:36.936 --> 00:05:38.966 A:middle
验证所有的属性

00:05:38.966 --> 00:05:40.386 A:middle
因此 为了最佳性能表现

00:05:40.386 --> 00:05:41.326 A:middle
你应该在绘制之前

00:05:41.326 --> 00:05:42.906 A:middle
剥离额外的属性

00:05:42.906 --> 00:05:44.776 A:middle
只保留那些

00:05:44.776 --> 00:05:46.706 A:middle
需要去决定的视觉表现属性

00:05:46.706 --> 00:05:48.506 A:middle
比如字体或颜色

00:05:49.076 --> 00:05:51.996 A:middle
最后你要知道

00:05:51.996 --> 00:05:53.146 A:middle
如果使用字符串绘制

00:05:53.146 --> 00:05:54.546 A:middle
你会失去所有这些

00:05:54.546 --> 00:05:55.746 A:middle
文本控件提供的额外功能

00:05:55.746 --> 00:05:57.286 A:middle
因此只要可能的话

00:05:57.286 --> 00:05:59.166 A:middle
你应该一直使用文本控件

00:05:59.726 --> 00:06:02.706 A:middle
所以现在你知道

00:05:59.726 --> 00:06:02.706 A:middle
所以现在你知道

00:06:02.706 --> 00:06:03.966 A:middle
仅仅通过 TextKit 的内置控件

00:06:03.966 --> 00:06:04.796 A:middle
你可以做些什么了

00:06:05.596 --> 00:06:06.686 A:middle
但是如果你需要的

00:06:06.766 --> 00:06:07.716 A:middle
比这些控件所提供的更多

00:06:08.206 --> 00:06:08.986 A:middle
你需要文本堆栈中

00:06:08.986 --> 00:06:11.276 A:middle
找到正确的定制点

00:06:12.376 --> 00:06:14.036 A:middle
与 Cocoa 很像 TextKit

00:06:14.036 --> 00:06:16.766 A:middle
是基于 MVC 设计模式的

00:06:17.316 --> 00:06:19.356 A:middle
文本系统可以

00:06:19.356 --> 00:06:20.946 A:middle
被分为三个阶段

00:06:20.946 --> 00:06:22.256 A:middle
直接与 MVC 对应

00:06:22.386 --> 00:06:25.236 A:middle
分别是存储 显示和布局

00:06:25.996 --> 00:06:27.446 A:middle
我们现在来仔细看看

00:06:27.446 --> 00:06:28.916 A:middle
构成了各个阶段

00:06:28.916 --> 00:06:29.946 A:middle
的 TextKit 对象

00:06:30.346 --> 00:06:32.176 A:middle
我们从存储开始

00:06:32.466 --> 00:06:35.746 A:middle
它对应的是 Model（模型）

00:06:35.746 --> 00:06:36.866 A:middle
NSTextStorage 存储着你的

00:06:36.866 --> 00:06:38.026 A:middle
字符串数据和属性

00:06:38.746 --> 00:06:40.166 A:middle
它是 NSMutableAttributedString 的

00:06:40.166 --> 00:06:41.806 A:middle
一个子类 因此你可以用

00:06:41.806 --> 00:06:43.146 A:middle
你已经熟悉的

00:06:43.146 --> 00:06:44.046 A:middle
使用 attributedString 的方式

00:06:44.046 --> 00:06:45.046 A:middle
来使用它

00:06:46.036 --> 00:06:47.256 A:middle
我的同事 Emily

00:06:47.256 --> 00:06:48.666 A:middle
将会在稍后

00:06:48.666 --> 00:06:49.896 A:middle
展示一些强大的方法

00:06:49.896 --> 00:06:51.246 A:middle
来自定义 NSTextStorage

00:06:51.246 --> 00:06:52.146 A:middle
期待一下吧

00:06:53.706 --> 00:06:55.716 A:middle
NSTextContainer 会为

00:06:55.716 --> 00:06:56.906 A:middle
你的文本将要被展示的几何区域

00:06:56.906 --> 00:06:57.866 A:middle
建立模型

00:06:58.586 --> 00:07:00.006 A:middle
默认情况下 它是一个矩形

00:06:58.586 --> 00:07:00.006 A:middle
默认情况下 它是一个矩形

00:07:00.306 --> 00:07:01.596 A:middle
但你也可以自定义

00:07:01.596 --> 00:07:02.746 A:middle
文本布局的走向或者形状

00:07:02.876 --> 00:07:03.486 A:middle
就像这里展示的一样

00:07:04.096 --> 00:07:06.186 A:middle
要了解更多详细的

00:07:06.186 --> 00:07:07.216 A:middle
关于存储对象的信息

00:07:07.266 --> 00:07:08.806 A:middle
看看这些以往优秀的

00:07:08.806 --> 00:07:11.246 A:middle
WWDC 讨论会内容和文件

00:07:11.246 --> 00:07:12.656 A:middle
这些能在讨论会结束时的

00:07:12.656 --> 00:07:16.596 A:middle
更多信息链接中找到

00:07:17.396 --> 00:07:18.676 A:middle
接下来是显示阶段

00:07:18.966 --> 00:07:21.276 A:middle
它对应着视图

00:07:21.276 --> 00:07:22.626 A:middle
我们已经讨论了

00:07:22.626 --> 00:07:23.746 A:middle
一些显示阶段的内容

00:07:23.746 --> 00:07:24.736 A:middle
在我们讨论选择

00:07:24.736 --> 00:07:25.396 A:middle
正确控件的时候

00:07:25.766 --> 00:07:26.436 A:middle
因此为获得更多的信息

00:07:26.436 --> 00:07:27.876 A:middle
你可以再一次查看

00:07:27.876 --> 00:07:29.186 A:middle
这些文件和资源

00:07:29.186 --> 00:07:30.796 A:middle
这些也可以

00:07:30.796 --> 00:07:31.986 A:middle
在讨论会的结尾的

00:07:31.986 --> 00:07:35.166 A:middle
更多信息链接中获得

00:07:35.426 --> 00:07:36.586 A:middle
最后 我们讨论下布局阶段

00:07:36.586 --> 00:07:38.446 A:middle
它对应着控件

00:07:39.026 --> 00:07:41.836 A:middle
NSLayoutManager 是这个阶段中

00:07:41.836 --> 00:07:42.656 A:middle
唯一的组成部分

00:07:42.656 --> 00:07:44.806 A:middle
它是一头野兽

00:07:46.036 --> 00:07:47.386 A:middle
这是个褒义词

00:07:47.726 --> 00:07:49.656 A:middle
因为它的功能实在是太棒了

00:07:50.146 --> 00:07:52.056 A:middle
因此它是整个运作的大脑

00:07:52.056 --> 00:07:53.296 A:middle
它协调所有阶段中的

00:07:53.296 --> 00:07:55.996 A:middle
变化 并且控制着布局过程

00:07:56.066 --> 00:07:59.296 A:middle
所以这里简要介绍一下

00:07:59.296 --> 00:08:00.546 A:middle
布局过程是怎样进行的

00:07:59.296 --> 00:08:00.546 A:middle
布局过程是怎样进行的

00:08:01.426 --> 00:08:03.166 A:middle
文字布局发生在

00:08:03.216 --> 00:08:04.596 A:middle
系统修复文本存储的属性之后

00:08:04.596 --> 00:08:06.006 A:middle
来消除不一致

00:08:06.006 --> 00:08:08.206 A:middle
比如确定字符串中

00:08:08.206 --> 00:08:09.626 A:middle
所有的字符

00:08:09.626 --> 00:08:11.206 A:middle
都使用支持

00:08:11.246 --> 00:08:12.626 A:middle
显示该字符的字体

00:08:13.086 --> 00:08:14.906 A:middle
所以在这个例子中

00:08:14.906 --> 00:08:15.996 A:middle
Times New Roman 被指定到

00:08:16.056 --> 00:08:17.566 A:middle
整个字符串

00:08:18.096 --> 00:08:19.486 A:middle
但是这个字体并不支持

00:08:19.936 --> 00:08:21.906 A:middle
显示日文汉字或者表情符号

00:08:23.136 --> 00:08:24.536 A:middle
因此在属性修正后

00:08:24.536 --> 00:08:25.446 A:middle
你的文本存储

00:08:25.476 --> 00:08:26.876 A:middle
看起来会像这样

00:08:26.876 --> 00:08:28.146 A:middle
日文字符被

00:08:28.376 --> 00:08:29.346 A:middle
分配了适当的日文字体

00:08:29.346 --> 00:08:31.186 A:middle
表情符号被

00:08:31.186 --> 00:08:32.476 A:middle
分配了的表情符号字体

00:08:32.476 --> 00:08:33.145 A:middle
好的

00:08:33.856 --> 00:08:36.006 A:middle
一旦属性被修正了

00:08:36.006 --> 00:08:37.666 A:middle
布局过程就开始了

00:08:37.666 --> 00:08:39.606 A:middle
我们可以认为布局

00:08:39.666 --> 00:08:42.866 A:middle
分为两步 字形生成和字形布局

00:08:44.256 --> 00:08:45.366 A:middle
一旦它们被布局好了

00:08:45.646 --> 00:08:46.456 A:middle
就可以显示了

00:08:47.086 --> 00:08:48.606 A:middle
但是 等一下

00:08:48.946 --> 00:08:49.356 A:middle
什么是字形

00:08:50.206 --> 00:08:51.226 A:middle
让我们回顾一下

00:08:52.146 --> 00:08:53.296 A:middle
字形是一种代表一个

00:08:53.296 --> 00:08:54.536 A:middle
或多个字符的

00:08:54.536 --> 00:08:55.046 A:middle
视觉符号

00:08:55.536 --> 00:08:56.916 A:middle
正如你在这里看到的那样

00:08:56.916 --> 00:08:58.056 A:middle
字符与字形之间的映射

00:08:58.056 --> 00:09:00.066 A:middle
并不总是一对一的

00:08:58.056 --> 00:09:00.066 A:middle
并不总是一对一的

00:09:01.476 --> 00:09:03.286 A:middle
字符串 “ffi” 有

00:09:03.386 --> 00:09:04.996 A:middle
三个字符 但是它可以

00:09:04.996 --> 00:09:06.476 A:middle
由连起来的单个

00:09:06.556 --> 00:09:07.096 A:middle
字形表示

00:09:07.096 --> 00:09:09.726 A:middle
其实反过来也可以

00:09:10.456 --> 00:09:11.626 A:middle
这里有一个 “ñ”

00:09:11.846 --> 00:09:13.436 A:middle
这是一个单独的字符

00:09:13.436 --> 00:09:14.436 A:middle
它可以由多个字形表示

00:09:14.436 --> 00:09:16.786 A:middle
一个 “n”

00:09:16.786 --> 00:09:17.226 A:middle
一个波浪号

00:09:18.836 --> 00:09:20.416 A:middle
回到我们的图中

00:09:20.416 --> 00:09:22.456 A:middle
我们的 NSLayoutManager

00:09:22.456 --> 00:09:24.726 A:middle
执行字形生成和字形布局

00:09:25.486 --> 00:09:27.036 A:middle
在字形生成这一步中

00:09:27.036 --> 00:09:28.096 A:middle
布局管理器（Layout Manager）会

00:09:28.096 --> 00:09:29.446 A:middle
获取字符并确定

00:09:29.476 --> 00:09:30.396 A:middle
需要绘制的字形

00:09:31.276 --> 00:09:32.716 A:middle
在字形布局这一步

00:09:32.716 --> 00:09:34.056 A:middle
布局管理器会定位好这些字形

00:09:34.056 --> 00:09:35.646 A:middle
以在你的视图中显示

00:09:36.116 --> 00:09:38.416 A:middle
从以往 WWDC 讨论会和文档中

00:09:38.416 --> 00:09:39.876 A:middle
还可以学到很多

00:09:39.876 --> 00:09:42.216 A:middle
关于布局管理器的知识

00:09:42.596 --> 00:09:45.596 A:middle
你可以在 没错

00:09:45.596 --> 00:09:46.936 A:middle
讨论会结尾的更多

00:09:47.596 --> 00:09:49.416 A:middle
信息链接中

00:09:49.576 --> 00:09:51.976 A:middle
好的 现在你了解了

00:09:51.976 --> 00:09:53.096 A:middle
文本系统的阶段

00:09:53.466 --> 00:09:54.296 A:middle
并且你知道了 TextKit

00:09:54.296 --> 00:09:55.666 A:middle
构成每个阶段的组件

00:09:57.276 --> 00:09:58.796 A:middle
所以现在让我们来看看

00:09:58.796 --> 00:10:00.336 A:middle
如何为这些组件选择正确的配置

00:09:58.796 --> 00:10:00.336 A:middle
如何为这些组件选择正确的配置

00:10:00.336 --> 00:10:02.876 A:middle
来创造不同的效果

00:10:03.376 --> 00:10:05.466 A:middle
这是你的标准配置

00:10:05.466 --> 00:10:07.666 A:middle
当你从 “界面构建器（界面构建器）”

00:10:07.746 --> 00:10:08.816 A:middle
中拖放文本视图时

00:10:08.816 --> 00:10:10.116 A:middle
你会自动获取

00:10:10.116 --> 00:10:11.896 A:middle
每个组件中的一个

00:10:11.896 --> 00:10:12.306 A:middle
像这里一样

00:10:13.216 --> 00:10:14.416 A:middle
大多数时候

00:10:14.416 --> 00:10:17.286 A:middle
这对你来说就足够了

00:10:17.566 --> 00:10:19.046 A:middle
如果你想要一个多页或一个

00:10:19.046 --> 00:10:20.776 A:middle
多栏布局 你可以

00:10:20.776 --> 00:10:22.426 A:middle
使用多对文本容器和

00:10:22.426 --> 00:10:24.076 A:middle
文本视图

00:10:24.076 --> 00:10:24.756 A:middle
每页或每列一对

00:10:25.656 --> 00:10:26.856 A:middle
你可以将所有这些都绑定到

00:10:26.916 --> 00:10:28.166 A:middle
相同的文本存储中的

00:10:28.166 --> 00:10:29.526 A:middle
相同的布局管理器上

00:10:29.526 --> 00:10:30.866 A:middle
这样它们就能在

00:10:30.866 --> 00:10:31.856 A:middle
后台存储中 共享

00:10:31.936 --> 00:10:32.166 A:middle
布局信息了

00:10:32.746 --> 00:10:35.016 A:middle
如果你想要让每个视图

00:10:35.016 --> 00:10:36.156 A:middle
呈现不同的视图 你也可以做到

00:10:36.156 --> 00:10:37.906 A:middle
只要使用多个布局管理器

00:10:37.906 --> 00:10:38.576 A:middle
就可以了

00:10:39.006 --> 00:10:40.416 A:middle
再次说明 因为文本

00:10:40.416 --> 00:10:41.726 A:middle
共享相同的后台存储

00:10:42.246 --> 00:10:43.626 A:middle
更新该文本将更新

00:10:43.626 --> 00:10:44.186 A:middle
所有视图

00:10:44.886 --> 00:10:47.796 A:middle
我们现在不会讨论过多

00:10:47.796 --> 00:10:48.636 A:middle
关于这些配置的细节

00:10:48.636 --> 00:10:49.986 A:middle
因为之前已经有一个

00:10:49.986 --> 00:10:50.926 A:middle
讨论会介绍过了

00:10:50.926 --> 00:10:52.496 A:middle
你可以去看看

00:10:52.546 --> 00:10:54.686 A:middle
WWDC 2010 讨论会中的 “Advanced Cocoa

00:10:54.686 --> 00:10:55.996 A:middle
Text Tips and Tricks”

00:10:55.996 --> 00:10:57.836 A:middle
你可以在讨论会结尾的

00:10:57.836 --> 00:11:02.476 A:middle
更多信息链接中找到它

00:10:57.836 --> 00:11:02.476 A:middle
更多信息链接中找到它

00:11:02.626 --> 00:11:02.946 A:middle
好的

00:11:04.036 --> 00:11:04.946 A:middle
我们已经看过了内置

00:11:04.946 --> 00:11:05.576 A:middle
文本控件

00:11:06.296 --> 00:11:07.236 A:middle
我们已经看过了

00:11:07.236 --> 00:11:07.766 A:middle
TextKit 的组件

00:11:07.976 --> 00:11:09.016 A:middle
我们已经讲过了如何

00:11:09.016 --> 00:11:10.336 A:middle
配置这些组件

00:11:10.336 --> 00:11:11.066 A:middle
以实现不同的效果

00:11:11.066 --> 00:11:12.956 A:middle
在你了解了这些知识以后

00:11:12.956 --> 00:11:14.406 A:middle
现在你已经可以做很多事情了

00:11:14.636 --> 00:11:15.586 A:middle
但是如果你想要更多

00:11:16.196 --> 00:11:17.056 A:middle
你需要自己扩展

00:11:17.056 --> 00:11:18.596 A:middle
并自定义 TextKit 的某些部分

00:11:19.766 --> 00:11:21.076 A:middle
所以现在我们会谈一谈

00:11:21.076 --> 00:11:22.166 A:middle
选择正确的方式

00:11:22.166 --> 00:11:23.766 A:middle
来做到这一点

00:11:24.826 --> 00:11:26.516 A:middle
选择正确的方式

00:11:26.556 --> 00:11:28.036 A:middle
就像构建文本工具箱一样

00:11:28.616 --> 00:11:29.806 A:middle
这就像因为需要一把锤子

00:11:29.806 --> 00:11:30.606 A:middle
所以你去了商店一样

00:11:30.606 --> 00:11:32.056 A:middle
当你到了商店

00:11:32.056 --> 00:11:34.216 A:middle
你发现有大量的锤子供选择

00:11:34.966 --> 00:11:36.086 A:middle
但你想选择

00:11:36.216 --> 00:11:38.206 A:middle
能够完成这项工作的锤子

00:11:38.286 --> 00:11:39.526 A:middle
最理想的是能满足你需求的

00:11:39.526 --> 00:11:40.346 A:middle
最便宜的锤子

00:11:40.896 --> 00:11:43.416 A:middle
这些是我们可以

00:11:43.566 --> 00:11:44.456 A:middle
得到的锤子

00:11:45.396 --> 00:11:46.836 A:middle
委托就是一种

00:11:46.836 --> 00:11:48.866 A:middle
标准的羊角锤可以用来

00:11:48.866 --> 00:11:49.626 A:middle
完成各种任务

00:11:50.316 --> 00:11:51.466 A:middle
委托们有很多

00:11:51.466 --> 00:11:52.566 A:middle
不同的自定义钩子

00:11:52.706 --> 00:11:53.766 A:middle
大多数时候它

00:11:53.766 --> 00:11:56.206 A:middle
就能帮你完成任务

00:11:56.426 --> 00:11:58.446 A:middle
通知就像是球头锤

00:11:58.596 --> 00:11:59.666 A:middle
它的末端是一个球

00:11:59.666 --> 00:12:03.196 A:middle
而不是羊角 所以它更专业化

00:11:59.666 --> 00:12:03.196 A:middle
而不是羊角 所以它更专业化

00:12:03.296 --> 00:12:04.866 A:middle
适合某些特定的任务

00:12:04.866 --> 00:12:06.466 A:middle
但它并不像委托那样

00:12:06.466 --> 00:12:07.956 A:middle
是一个全能的锤子

00:12:08.506 --> 00:12:12.106 A:middle
最后 子类是你的大锤

00:12:13.496 --> 00:12:14.596 A:middle
大锤非常强大

00:12:14.596 --> 00:12:16.096 A:middle
你可以将它用于

00:12:16.096 --> 00:12:17.596 A:middle
任何你需要锤子的任务

00:12:17.596 --> 00:12:19.136 A:middle
但在很多时候

00:12:19.136 --> 00:12:20.756 A:middle
使用它会有些大材小用

00:12:21.386 --> 00:12:23.396 A:middle
接下来 我想

00:12:23.396 --> 00:12:24.606 A:middle
邀请 Emily 向我们展示如何

00:12:24.606 --> 00:12:25.936 A:middle
使用这些不同种类的锤子

00:12:26.326 --> 00:12:26.656 A:middle
Emily

00:12:27.516 --> 00:12:32.166 A:middle
[ 掌声 ]

00:12:32.666 --> 00:12:33.216 A:middle
&gt;&gt; 谢谢你 Donna

00:12:34.396 --> 00:12:36.106 A:middle
因此 作为开发人员

00:12:36.106 --> 00:12:37.506 A:middle
我们有一系列控件

00:12:37.566 --> 00:12:39.676 A:middle
各种配置

00:12:40.106 --> 00:12:41.036 A:middle
以及大量的自定义选项供我们选择

00:12:41.036 --> 00:12:42.786 A:middle
以实现我们

00:12:42.786 --> 00:12:43.266 A:middle
所需的功能

00:12:44.156 --> 00:12:45.406 A:middle
所以我们的工具箱

00:12:45.496 --> 00:12:47.656 A:middle
储备充足 那么我们要

00:12:47.656 --> 00:12:48.346 A:middle
如何选择工具呢

00:12:49.066 --> 00:12:51.696 A:middle
我们一起来看看

00:12:51.696 --> 00:12:52.886 A:middle
一些 App 示例

00:12:52.886 --> 00:12:54.326 A:middle
它们套用了 TextKit 的强大功能

00:12:55.326 --> 00:12:56.326 A:middle
这样的 App 示例并不难找

00:12:56.326 --> 00:12:58.436 A:middle
因为几乎我们使用的每个 App

00:12:58.496 --> 00:13:00.536 A:middle
都需要显示或

00:12:58.496 --> 00:13:00.536 A:middle
都需要显示或

00:13:01.436 --> 00:13:01.586 A:middle
编辑文本

00:13:03.336 --> 00:13:04.666 A:middle
我们首先看看

00:13:04.666 --> 00:13:05.776 A:middle
两个我们都熟悉的 App

00:13:05.826 --> 00:13:07.826 A:middle
然后一步一步

00:13:07.826 --> 00:13:08.846 A:middle
构建我们

00:13:08.846 --> 00:13:09.136 A:middle
自己的 App

00:13:09.706 --> 00:13:12.086 A:middle
我们要看的第一个 App

00:13:12.086 --> 00:13:13.816 A:middle
是 iOS 上的 “Apple News”

00:13:14.576 --> 00:13:15.906 A:middle
这是一个漂亮的 App

00:13:15.906 --> 00:13:18.926 A:middle
在个性化以及甄选的

00:13:18.926 --> 00:13:19.936 A:middle
文章中显示文本

00:13:20.646 --> 00:13:23.586 A:middle
下面这个例子

00:13:23.586 --> 00:13:25.326 A:middle
是在 “Spotlight” 标签页中

00:13:25.366 --> 00:13:26.106 A:middle
“Featured” 栏目中的一篇文章

00:13:27.186 --> 00:13:29.616 A:middle
现在 App 的顶部显示了

00:13:29.616 --> 00:13:31.016 A:middle
关于这篇文章的一些细节

00:13:32.046 --> 00:13:33.846 A:middle
我们如何才能用 TextKit

00:13:33.846 --> 00:13:34.976 A:middle
重现这个外观和风格呢

00:13:38.176 --> 00:13:39.356 A:middle
所以让我们考虑一下

00:13:39.356 --> 00:13:41.156 A:middle
早些时候 Donna 向我们展示的流程图

00:13:41.156 --> 00:13:42.386 A:middle
以便选择最适合

00:13:42.386 --> 00:13:43.416 A:middle
本示例的控件

00:13:43.986 --> 00:13:47.186 A:middle
我们有不少文本控件

00:13:47.186 --> 00:13:49.506 A:middle
可供选择

00:13:49.596 --> 00:13:50.946 A:middle
但由于我们想要

00:13:50.946 --> 00:13:52.776 A:middle
显示的文本很少

00:13:52.876 --> 00:13:54.946 A:middle
所以我们将在每一行都使用标签

00:13:54.946 --> 00:13:58.806 A:middle
我们可以看到

00:13:58.806 --> 00:14:00.446 A:middle
在检查器面板中

00:13:58.806 --> 00:14:00.446 A:middle
在检查器面板中

00:14:00.446 --> 00:14:01.256 A:middle
有很多定制选项

00:14:01.846 --> 00:14:03.756 A:middle
我们继续

00:14:03.756 --> 00:14:05.076 A:middle
将文本更改为 “Spotlight”

00:14:05.716 --> 00:14:07.776 A:middle
并把字体

00:14:08.226 --> 00:14:09.336 A:middle
改为 “Body”

00:14:09.926 --> 00:14:12.616 A:middle
我们还要勾选

00:14:12.616 --> 00:14:14.546 A:middle
“Dynamic Type” 这可以让

00:14:14.546 --> 00:14:15.866 A:middle
启用辅助功能设置的用户

00:14:15.866 --> 00:14:17.956 A:middle
能以适合它们需要的

00:14:18.026 --> 00:14:19.236 A:middle
字体大小和样式

00:14:19.236 --> 00:14:20.306 A:middle
来查看文本

00:14:21.026 --> 00:14:23.266 A:middle
现在我们可以在

00:14:23.266 --> 00:14:24.216 A:middle
界面构建器中

00:14:24.216 --> 00:14:25.966 A:middle
自定义这个标签 但我们也可以

00:14:25.966 --> 00:14:27.196 A:middle
在 Swift 代码中

00:14:27.276 --> 00:14:27.596 A:middle
看到所有这些属性

00:14:28.826 --> 00:14:30.616 A:middle
我们可以在运行时

00:14:30.616 --> 00:14:31.626 A:middle
动态设置文本和

00:14:31.846 --> 00:14:33.036 A:middle
排版属性

00:14:33.036 --> 00:14:36.266 A:middle
现在回到界面构建器

00:14:36.866 --> 00:14:38.646 A:middle
我们将继续添加两个标签

00:14:40.206 --> 00:14:41.536 A:middle
现在一切都很好

00:14:42.146 --> 00:14:44.786 A:middle
但我们还需要做一件事

00:14:46.286 --> 00:14:47.586 A:middle
所以回头看 Apple News

00:14:47.716 --> 00:14:48.876 A:middle
我们可以看到右边的文字

00:14:48.876 --> 00:14:50.246 A:middle
实际上显示

00:14:50.246 --> 00:14:51.416 A:middle
以两种不同的颜色

00:14:51.516 --> 00:14:53.676 A:middle
一部分是黑色的 一部分是白色的

00:14:55.006 --> 00:14:56.016 A:middle
现在我们可以实现这一点

00:14:56.016 --> 00:14:57.876 A:middle
用两个单独的标签 但如果我们

00:14:57.876 --> 00:15:00.066 A:middle
只想使用一个标签

00:14:57.876 --> 00:15:00.066 A:middle
只想使用一个标签

00:15:00.066 --> 00:15:01.486 A:middle
在界面构建器中

00:15:01.486 --> 00:15:02.356 A:middle
是无法实现的

00:15:02.836 --> 00:15:06.156 A:middle
那么我们怎么做到这一点呢

00:15:06.546 --> 00:15:07.646 A:middle
我们可以利用

00:15:07.646 --> 00:15:09.216 A:middle
NSAttributedString 强大而

00:15:09.216 --> 00:15:10.056 A:middle
灵活的功能

00:15:11.856 --> 00:15:13.556 A:middle
attributedString 是

00:15:13.556 --> 00:15:15.026 A:middle
一串字符 它可以将属性

00:15:15.026 --> 00:15:17.236 A:middle
应用于一定范围内的字符

00:15:18.076 --> 00:15:19.246 A:middle
你可以轻松地获取一些属性

00:15:19.246 --> 00:15:21.506 A:middle
比如默认字体

00:15:21.506 --> 00:15:23.766 A:middle
和文本颜色一样 但我们可以

00:15:23.766 --> 00:15:24.796 A:middle
用我们自己的值重写

00:15:24.796 --> 00:15:25.156 A:middle
这些属性

00:15:25.956 --> 00:15:27.216 A:middle
在这种情况下 我们将把

00:15:27.216 --> 00:15:28.426 A:middle
字符串的部分文本颜色

00:15:28.426 --> 00:15:28.756 A:middle
设置为白色

00:15:28.756 --> 00:15:32.796 A:middle
要具体查看属性字符串

00:15:32.926 --> 00:15:34.386 A:middle
我们将使用

00:15:34.556 --> 00:15:35.646 A:middle
在 NSMutableAttributedString 中的

00:15:35.706 --> 00:15:37.606 A:middle
addAttribute() 方法

00:15:37.606 --> 00:15:39.376 A:middle
来讲我们想要的范围内的文本

00:15:39.376 --> 00:15:40.266 A:middle
设置成白色

00:15:41.506 --> 00:15:42.816 A:middle
这一次 我们将

00:15:42.816 --> 00:15:44.476 A:middle
在我们的标签上设置

00:15:44.476 --> 00:15:44.796 A:middle
属性文本属性

00:15:45.256 --> 00:15:49.586 A:middle
在运行时

00:15:50.066 --> 00:15:50.246 A:middle
这看起来很酷

00:15:51.336 --> 00:15:53.516 A:middle
UILabels 对这类文本来说

00:15:53.516 --> 00:15:55.846 A:middle
是很棒的选择

00:15:55.846 --> 00:15:56.876 A:middle
如果我们看看屏幕底部

00:15:56.876 --> 00:15:57.846 A:middle
我们会看到

00:15:57.966 --> 00:15:58.366 A:middle
一个标题

00:15:58.546 --> 00:15:59.666 A:middle
这也是文本

00:15:59.666 --> 00:16:01.516 A:middle
但它有比较大

00:15:59.666 --> 00:16:01.516 A:middle
但它有比较大

00:16:01.516 --> 00:16:02.216 A:middle
占了很多行

00:16:02.826 --> 00:16:05.956 A:middle
使这个文本不同的另一点是

00:16:05.956 --> 00:16:06.976 A:middle
它是可以

00:16:06.976 --> 00:16:07.616 A:middle
被选中的

00:16:08.206 --> 00:16:10.676 A:middle
那么这次我们应该使用

00:16:10.676 --> 00:16:11.166 A:middle
哪种控件呢

00:16:12.376 --> 00:16:14.076 A:middle
文本栏和文本视图

00:16:14.076 --> 00:16:16.246 A:middle
都支持选择

00:16:16.246 --> 00:16:18.206 A:middle
但文本栏通常

00:16:18.206 --> 00:16:18.706 A:middle
仅用于一行

00:16:19.306 --> 00:16:21.596 A:middle
因此 在这种情况下 由于我们的

00:16:21.596 --> 00:16:22.716 A:middle
标题可以跨越多行

00:16:22.716 --> 00:16:25.206 A:middle
因此我们将使用

00:16:26.386 --> 00:16:26.496 A:middle
文本视图

00:16:26.716 --> 00:16:28.126 A:middle
当我们将文本视图

00:16:28.126 --> 00:16:29.596 A:middle
放到 Storyboard 上时 我们可以看到

00:16:29.596 --> 00:16:31.046 A:middle
我们默认会得到

00:16:31.236 --> 00:16:31.706 A:middle
大量的测试文本

00:16:32.606 --> 00:16:33.456 A:middle
我们继续来

00:16:33.456 --> 00:16:35.286 A:middle
检查器面板中

00:16:35.366 --> 00:16:35.626 A:middle
更改文本

00:16:37.236 --> 00:16:38.096 A:middle
我们还要改变字体

00:16:38.166 --> 00:16:39.396 A:middle
使它看起来更

00:16:39.396 --> 00:16:40.166 A:middle
像 “Apple News”

00:16:40.806 --> 00:16:43.276 A:middle
我们希望禁用

00:16:43.276 --> 00:16:44.316 A:middle
编辑功能 因为

00:16:44.316 --> 00:16:45.646 A:middle
标题不应该被编辑

00:16:46.246 --> 00:16:49.386 A:middle
UITextView 默认支持滚动

00:16:49.426 --> 00:16:51.336 A:middle
因为它们是

00:16:51.336 --> 00:16:52.136 A:middle
UIScrollView 的子类

00:16:53.156 --> 00:16:54.746 A:middle
但是 如果我们希望我们的文本视图

00:16:54.746 --> 00:16:57.046 A:middle
在自动布局中良好运行

00:16:57.046 --> 00:16:58.126 A:middle
我们应该禁用滚动

00:16:59.066 --> 00:17:00.456 A:middle
因此 这将允许

00:16:59.066 --> 00:17:00.456 A:middle
因此 这将允许

00:17:00.456 --> 00:17:02.466 A:middle
我们的文本视图的边界调整大小

00:17:03.256 --> 00:17:05.296 A:middle
以适应文本

00:17:05.455 --> 00:17:07.465 A:middle
最后 这个白色背景

00:17:07.496 --> 00:17:09.056 A:middle
真的需要删去

00:17:09.906 --> 00:17:10.826 A:middle
所以我们要把它

00:17:10.826 --> 00:17:11.506 A:middle
设置为透明

00:17:12.675 --> 00:17:13.886 A:middle
界面构建器使得

00:17:13.886 --> 00:17:15.205 A:middle
自定这个文本视图非常容易

00:17:15.246 --> 00:17:16.695 A:middle
但是和之前的标签一样

00:17:16.695 --> 00:17:18.596 A:middle
我们可以在代码中

00:17:18.596 --> 00:17:19.076 A:middle
设置所有这些

00:17:20.026 --> 00:17:21.586 A:middle
因此 在 Swift 中我们可以

00:17:21.586 --> 00:17:23.036 A:middle
在运行时动态设置

00:17:23.036 --> 00:17:24.906 A:middle
文本和格式属性

00:17:26.386 --> 00:17:27.506 A:middle
我们现在看过了 Apple News

00:17:27.506 --> 00:17:28.546 A:middle
并选择了正确的控件

00:17:29.396 --> 00:17:30.196 A:middle
现在我们要看看另一个

00:17:30.196 --> 00:17:32.096 A:middle
我们都熟悉的 App

00:17:32.096 --> 00:17:33.216 A:middle
并选择正确的配置

00:17:33.216 --> 00:17:36.786 A:middle
那就是“文本编辑”

00:17:37.516 --> 00:17:39.476 A:middle
“文本编辑” 是 macOS 上的一个 App

00:17:40.286 --> 00:17:42.136 A:middle
用于处理显示和编辑

00:17:42.196 --> 00:17:43.406 A:middle
富文本内容

00:17:44.946 --> 00:17:46.156 A:middle
但大多数人不知道

00:17:46.346 --> 00:17:48.396 A:middle
“文本编辑” 实际上是

00:17:48.396 --> 00:17:50.526 A:middle
NSTextView 套上了一个壳子

00:17:51.826 --> 00:17:52.906 A:middle
我想花一点时间

00:17:52.906 --> 00:17:54.646 A:middle
感叹一下 TextKit 给我们带来了

00:17:54.646 --> 00:17:56.436 A:middle
多少额外的好处

00:17:57.006 --> 00:17:59.156 A:middle
所以这是检查器栏

00:17:59.526 --> 00:18:00.956 A:middle
我们通过勾选

00:17:59.526 --> 00:18:00.956 A:middle
我们通过勾选

00:18:00.986 --> 00:18:02.456 A:middle
界面构建器中的复选框

00:18:02.456 --> 00:18:02.796 A:middle
就可以轻松获得

00:18:03.396 --> 00:18:04.716 A:middle
正下方是一个标尺视图

00:18:04.716 --> 00:18:06.456 A:middle
我们也可以轻松获得它

00:18:06.696 --> 00:18:09.006 A:middle
只要简单地启用它即可

00:18:09.006 --> 00:18:10.116 A:middle
而下面的所有内容

00:18:10.206 --> 00:18:12.996 A:middle
其实只是一个文本视图

00:18:13.206 --> 00:18:15.296 A:middle
更准确地说 是一个文本视图

00:18:15.296 --> 00:18:17.346 A:middle
加上文本容器 布局管理器

00:18:17.346 --> 00:18:18.066 A:middle
还有文本存储

00:18:18.866 --> 00:18:19.756 A:middle
这是 NSTextView 和

00:18:19.756 --> 00:18:21.216 A:middle
UITextView 的

00:18:21.216 --> 00:18:24.966 A:middle
标准配置

00:18:24.966 --> 00:18:27.056 A:middle
但相似之处也就这些

00:18:27.646 --> 00:18:30.556 A:middle
例如 表格

00:18:30.556 --> 00:18:31.896 A:middle
只在 NSTextView 中受支持

00:18:32.696 --> 00:18:34.386 A:middle
再次感叹一下 我们免费

00:18:34.636 --> 00:18:36.336 A:middle
获得的强大功能

00:18:36.336 --> 00:18:37.576 A:middle
TextKit 提供了一个表格编辑器

00:18:37.576 --> 00:18:38.746 A:middle
为我们完成所有

00:18:39.556 --> 00:18:39.646 A:middle
繁冗的工作

00:18:42.476 --> 00:18:44.026 A:middle
当我们使用“文本编辑”时

00:18:44.026 --> 00:18:45.596 A:middle
我们经常编辑大量的文本

00:18:46.686 --> 00:18:48.026 A:middle
有时候我们会粘贴很多

00:18:48.026 --> 00:18:49.446 A:middle
示例文本 来看看我们是否

00:18:49.446 --> 00:18:50.666 A:middle
也免费获得了拼写检查器

00:18:51.396 --> 00:18:52.776 A:middle
但我们真的想看到的是

00:18:52.936 --> 00:18:54.126 A:middle
当我们使用格式菜单

00:18:54.126 --> 00:18:55.976 A:middle
选择“按页面换行”时

00:18:56.466 --> 00:18:58.706 A:middle
最终看起来会

00:18:58.706 --> 00:18:59.626 A:middle
有点像一个页面

00:18:59.926 --> 00:19:00.716 A:middle
我们可以看到文本容器

00:18:59.926 --> 00:19:00.716 A:middle
我们可以看到文本容器

00:19:00.756 --> 00:19:02.956 A:middle
已被调整大小

00:19:02.956 --> 00:19:06.056 A:middle
以匹配一张纸的尺寸

00:19:06.176 --> 00:19:07.696 A:middle
现在 如果我们向下滚动

00:19:07.696 --> 00:19:08.866 A:middle
我们可以看到文本会

00:19:08.866 --> 00:19:09.946 A:middle
从第一页跳到第二页

00:19:10.886 --> 00:19:12.116 A:middle
标准配置

00:19:12.116 --> 00:19:13.266 A:middle
并不真的支持

00:19:13.266 --> 00:19:13.636 A:middle
这样的布局

00:19:15.066 --> 00:19:16.626 A:middle
显然 这个布局使用了

00:19:16.626 --> 00:19:18.326 A:middle
两个文本视图和文本容器

00:19:19.076 --> 00:19:20.006 A:middle
但它们仍然

00:19:20.106 --> 00:19:21.276 A:middle
由相同的布局管理器和文本存储管理

00:19:21.276 --> 00:19:22.626 A:middle
这使得文本

00:19:22.626 --> 00:19:24.176 A:middle
可以从一个页面跳到

00:19:25.016 --> 00:19:26.566 A:middle
另一个页面

00:19:26.776 --> 00:19:27.926 A:middle
现在 如果你想了解更多

00:19:27.926 --> 00:19:29.276 A:middle
关于文本编辑是如何工作的信息

00:19:29.276 --> 00:19:31.136 A:middle
你其实可以在指南和示例代码库中

00:19:31.136 --> 00:19:32.546 A:middle
找到它的源代码

00:19:32.546 --> 00:19:36.046 A:middle
所以我们选择了正确的控件

00:19:36.046 --> 00:19:37.666 A:middle
我们选择了正确的配置

00:19:37.666 --> 00:19:39.716 A:middle
但有时我们

00:19:39.716 --> 00:19:41.016 A:middle
实际上需要使用锤子控件

00:19:41.096 --> 00:19:42.126 A:middle
以达到我们想要的效果

00:19:43.346 --> 00:19:44.386 A:middle
但是 我们如何决定

00:19:44.386 --> 00:19:45.076 A:middle
使用哪个锤子呢

00:19:45.806 --> 00:19:49.006 A:middle
我们将尝试为任务

00:19:49.006 --> 00:19:50.166 A:middle
挑选合适的锤子

00:19:50.306 --> 00:19:51.526 A:middle
在我们接下来一起

00:19:51.526 --> 00:19:53.146 A:middle
构建一个日记 App 的过程中

00:19:54.516 --> 00:19:55.876 A:middle
我们从把今天的日期

00:19:55.946 --> 00:19:57.056 A:middle
放到窗口上开始

00:19:58.316 --> 00:19:59.546 A:middle
我们在 AppKit 中没有 UILabels

00:19:59.546 --> 00:20:01.226 A:middle
但是我们可以使文本栏

00:19:59.546 --> 00:20:01.226 A:middle
但是我们可以使文本栏

00:20:01.226 --> 00:20:02.476 A:middle
像标签一样工作

00:20:03.716 --> 00:20:05.766 A:middle
我们所需要做的就是禁用编辑

00:20:06.366 --> 00:20:09.116 A:middle
现在 对于窗口的日记内容部分

00:20:09.116 --> 00:20:10.976 A:middle
我们将使用 textView

00:20:12.206 --> 00:20:13.676 A:middle
所以在检查器中 我们可以确保

00:20:13.676 --> 00:20:16.916 A:middle
文本视图是可编辑和可选的

00:20:16.916 --> 00:20:18.596 A:middle
并支持富文本和撤销

00:20:18.596 --> 00:20:21.916 A:middle
我们还要

00:20:21.916 --> 00:20:23.006 A:middle
在窗口底部添加几个

00:20:23.006 --> 00:20:24.056 A:middle
文本栏 来显示

00:20:24.056 --> 00:20:25.566 A:middle
写了多少个单词

00:20:26.166 --> 00:20:29.746 A:middle
现在 当我们运行我们的 App 时 我们希望

00:20:29.746 --> 00:20:30.766 A:middle
底部的字数统计随之变化

00:20:30.766 --> 00:20:32.836 A:middle
所以让我们来为这个任务

00:20:32.886 --> 00:20:33.676 A:middle
找到合适的锤子

00:20:33.676 --> 00:20:39.266 A:middle
我们可以选择委托通知或子类

00:20:39.266 --> 00:20:41.796 A:middle
但在这种情况下 我们将

00:20:41.796 --> 00:20:42.636 A:middle
使用小锤子

00:20:42.916 --> 00:20:43.756 A:middle
我们将监听

00:20:43.756 --> 00:20:45.226 A:middle
来自文本存储的通知

00:20:46.726 --> 00:20:47.886 A:middle
我们可以从文本存储中

00:20:47.886 --> 00:20:49.496 A:middle
获取单词的数量

00:20:50.686 --> 00:20:51.246 A:middle
当我们收到通知时

00:20:51.246 --> 00:20:52.886 A:middle
我们可以更新

00:20:52.886 --> 00:20:54.556 A:middle
文本栏的

00:20:54.556 --> 00:20:55.026 A:middle
字符串值属性

00:20:55.586 --> 00:20:58.726 A:middle
当我们开始输入时 我们可以

00:20:58.756 --> 00:20:59.726 A:middle
看到字数改变

00:21:00.326 --> 00:21:03.446 A:middle
如果我们想强调部分文本

00:21:03.446 --> 00:21:05.806 A:middle
我们可以使用键盘快捷键

00:21:05.806 --> 00:21:07.586 A:middle
或菜单来应用

00:21:07.586 --> 00:21:08.616 A:middle
格式 比如粗体

00:21:09.166 --> 00:21:11.846 A:middle
但是如果我们能够支持

00:21:11.846 --> 00:21:13.946 A:middle
现代文本排版工具会更好

00:21:13.946 --> 00:21:15.746 A:middle
比如 Markdown

00:21:15.746 --> 00:21:17.346 A:middle
它使用命令字符

00:21:17.406 --> 00:21:18.406 A:middle
来指定格式

00:21:19.206 --> 00:21:20.566 A:middle
如果我们在一段内容前后

00:21:20.786 --> 00:21:22.536 A:middle
分别添加两个星号

00:21:22.536 --> 00:21:23.366 A:middle
我们希望结果是粗体的

00:21:24.216 --> 00:21:26.426 A:middle
但我们应该使用

00:21:27.816 --> 00:21:28.216 A:middle
哪种锤子呢

00:21:28.336 --> 00:21:29.276 A:middle
我们想知道什么时候

00:21:29.276 --> 00:21:31.396 A:middle
发生变化 并且我们想知道

00:21:31.396 --> 00:21:32.586 A:middle
变化发生在哪里

00:21:32.616 --> 00:21:33.846 A:middle
但通知并没有真正

00:21:33.846 --> 00:21:35.286 A:middle
给我们提供很多关于

00:21:35.286 --> 00:21:35.896 A:middle
这种改变的信息

00:21:37.416 --> 00:21:38.456 A:middle
所以我们将使用更大的锤子

00:21:38.456 --> 00:21:40.076 A:middle
并实现 textStorage() 委托

00:21:40.076 --> 00:21:44.286 A:middle
具体是 _ didProcessEditing: 方法

00:21:45.226 --> 00:21:46.786 A:middle
我们可以从现有的字体中

00:21:47.016 --> 00:21:47.946 A:middle
创建一个新的粗体字体

00:21:48.646 --> 00:21:50.026 A:middle
而且 我们可以将该字体

00:21:50.026 --> 00:21:51.426 A:middle
直接添加到我们的 textStorage

00:21:51.426 --> 00:21:52.646 A:middle
用于我们想要加粗的范围

00:21:53.176 --> 00:21:55.586 A:middle
现在 当我们插入最后一个星号时

00:21:55.586 --> 00:21:57.696 A:middle
我们可以将其加粗

00:21:58.346 --> 00:22:01.126 A:middle
我们现在对这个

00:21:58.346 --> 00:22:01.126 A:middle
我们现在对这个

00:22:01.126 --> 00:22:02.426 A:middle
Markdown 功能非常满意

00:22:02.586 --> 00:22:04.856 A:middle
那么如果我们尝试插入

00:22:04.856 --> 00:22:05.476 A:middle
代码片段呢

00:22:06.756 --> 00:22:07.996 A:middle
在 Markdown 中是这样的

00:22:09.256 --> 00:22:10.516 A:middle
如果我们添加最后一个反引号

00:22:10.636 --> 00:22:12.766 A:middle
我们希望它看起来像一个代码块

00:22:14.136 --> 00:22:15.156 A:middle
它应该有一个背景和

00:22:15.156 --> 00:22:16.346 A:middle
一个表示 Swift Code 的标头

00:22:17.716 --> 00:22:18.906 A:middle
这实际上是一项复杂的任务

00:22:18.906 --> 00:22:22.006 A:middle
所以我们需要两把大锤

00:22:23.386 --> 00:22:25.526 A:middle
第一个是 NSTextStorage 子类

00:22:26.556 --> 00:22:27.946 A:middle
当我们子类化 NSTextStorage 时

00:22:27.946 --> 00:22:30.706 A:middle
我们需要实现四个必要的方法

00:22:31.236 --> 00:22:32.806 A:middle
我们通过对一个可变字符串的

00:22:32.856 --> 00:22:34.946 A:middle
局部实例进行操作来做到这一点

00:22:34.946 --> 00:22:37.996 A:middle
我们需要注意

00:22:37.996 --> 00:22:39.056 A:middle
replaceCharacters() 方法

00:22:39.836 --> 00:22:42.066 A:middle
我们可以将 NSTextBlock 添加

00:22:42.066 --> 00:22:42.876 A:middle
到我们的段落样式中

00:22:43.406 --> 00:22:46.046 A:middle
然后我们将

00:22:46.046 --> 00:22:47.546 A:middle
该段落样式添加到

00:22:47.546 --> 00:22:49.116 A:middle
我们文本存储中

00:22:49.116 --> 00:22:49.496 A:middle
代码块的范围内

00:22:50.256 --> 00:22:51.746 A:middle
现在 NSTextBlock 本身

00:22:51.746 --> 00:22:53.906 A:middle
不会自己做任何自定义绘制

00:22:54.596 --> 00:22:56.766 A:middle
所以我们也需要对它

00:22:57.916 --> 00:22:57.996 A:middle
进行子类化

00:22:58.226 --> 00:23:00.846 A:middle
我们的 NSTextBlock 子类需要

00:22:58.226 --> 00:23:00.846 A:middle
我们的 NSTextBlock 子类需要

00:23:00.846 --> 00:23:02.756 A:middle
在顶部有一些

00:23:02.756 --> 00:23:04.626 A:middle
额外的留白

00:23:04.626 --> 00:23:07.346 A:middle
还需要一个浅灰色背景

00:23:07.546 --> 00:23:08.906 A:middle
我们将重写 drawBackground()

00:23:09.566 --> 00:23:11.346 A:middle
并使用字符串绘制来绘制

00:23:11.346 --> 00:23:12.666 A:middle
标头 Swift Code

00:23:13.606 --> 00:23:14.836 A:middle
实际上这些我们想

00:23:14.836 --> 00:23:16.386 A:middle
让文本块看起来

00:23:16.386 --> 00:23:18.886 A:middle
像一个代码片段所需要做的

00:23:18.986 --> 00:23:20.216 A:middle
现在回到我们的 customTextStorage

00:23:20.216 --> 00:23:21.866 A:middle
我们可以创建

00:23:21.866 --> 00:23:23.076 A:middle
新代码块的实例

00:23:24.256 --> 00:23:27.286 A:middle
而不是使用纯文本块

00:23:27.856 --> 00:23:31.476 A:middle
最后 我们还要

00:23:31.476 --> 00:23:32.896 A:middle
告诉我们的 textView 使用

00:23:32.896 --> 00:23:34.606 A:middle
我们的 customTextStorage

00:23:34.606 --> 00:23:36.076 A:middle
所以我们要在布局管理器中

00:23:36.116 --> 00:23:37.096 A:middle
把原来的文本存储替换掉

00:23:37.706 --> 00:23:41.076 A:middle
现在这变成了一个真正的

00:23:41.076 --> 00:23:42.266 A:middle
所见即所得的 Markdown 编辑器了

00:23:43.126 --> 00:23:44.366 A:middle
现在在大多数 Markdown 编辑器上

00:23:44.366 --> 00:23:45.556 A:middle
都有的一个功能是

00:23:45.666 --> 00:23:47.726 A:middle
并排视图

00:23:47.726 --> 00:23:49.046 A:middle
左侧是编辑区域

00:23:49.046 --> 00:23:50.016 A:middle
右侧是渲染版本

00:23:51.516 --> 00:23:52.996 A:middle
我们可以通过使用

00:23:52.996 --> 00:23:54.426 A:middle
两个文本视图来实现

00:23:55.936 --> 00:23:57.946 A:middle
我们停用右侧视图的编辑功能

00:23:58.866 --> 00:24:00.376 A:middle
现在我们有两个文本视图

00:23:58.866 --> 00:24:00.376 A:middle
现在我们有两个文本视图

00:24:00.376 --> 00:24:01.596 A:middle
虽然我们希望它们显示

00:24:01.696 --> 00:24:03.546 A:middle
相同的内容 但我们还希望

00:24:03.546 --> 00:24:04.286 A:middle
右边视图能够看起来不太一样

00:24:05.916 --> 00:24:07.176 A:middle
所以我们需要一个像这样的配置

00:24:07.176 --> 00:24:08.806 A:middle
两个视图的文本存储器相同

00:24:08.806 --> 00:24:11.666 A:middle
而所有其他都不同

00:24:14.096 --> 00:24:16.506 A:middle
为此 我们

00:24:16.506 --> 00:24:17.996 A:middle
将用左侧的文本存储

00:24:18.066 --> 00:24:19.106 A:middle
把右侧的替换掉

00:24:20.616 --> 00:24:21.506 A:middle
现在让我们看看

00:24:21.536 --> 00:24:21.766 A:middle
这是什么样子

00:24:22.286 --> 00:24:25.326 A:middle
现在这真的很酷

00:24:25.526 --> 00:24:26.626 A:middle
如果我们在左侧添加任何字符

00:24:26.626 --> 00:24:28.826 A:middle
它们将立即显示在右侧

00:24:29.726 --> 00:24:31.056 A:middle
现在通常右手边

00:24:31.906 --> 00:24:33.166 A:middle
并没有真正显示 Markdown 字符

00:24:33.166 --> 00:24:35.406 A:middle
但由于这是一个

00:24:35.406 --> 00:24:38.036 A:middle
共享文本存储 这意味着我们

00:24:38.036 --> 00:24:39.196 A:middle
必须隐藏字符

00:24:39.406 --> 00:24:40.486 A:middle
在布局过程中

00:24:40.486 --> 00:24:44.236 A:middle
因为我们需要这样做

00:24:44.236 --> 00:24:45.846 A:middle
所以我们实际上只有一个选择

00:24:45.916 --> 00:24:48.486 A:middle
那就是实现

00:24:49.016 --> 00:24:50.746 A:middle
NSLayoutManager 委托上的

00:24:51.176 --> 00:24:52.746 A:middle
shouldGenerateGlyphs() 方法

00:24:53.796 --> 00:24:55.196 A:middle
这将允许我们介入

00:24:55.316 --> 00:24:57.446 A:middle
字形生成过程

00:24:58.036 --> 00:24:59.776 A:middle
因此 我们可以

00:24:59.776 --> 00:25:01.986 A:middle
获取即将布局的字形

00:24:59.776 --> 00:25:01.986 A:middle
获取即将布局的字形

00:25:01.986 --> 00:25:03.446 A:middle
并且如果它们表示 Markdown

00:25:03.446 --> 00:25:05.446 A:middle
命令字符 我们可以将

00:25:05.446 --> 00:25:07.356 A:middle
.null 属性应用于该字形

00:25:08.096 --> 00:25:09.216 A:middle
现在 这将让字形

00:25:09.216 --> 00:25:10.516 A:middle
在布局过程中被

00:25:10.516 --> 00:25:12.526 A:middle
彻底消除 而不会更改

00:25:12.526 --> 00:25:13.756 A:middle
底层的文本存储

00:25:14.306 --> 00:25:19.096 A:middle
然后 我们将使用新的字形

00:25:19.096 --> 00:25:20.686 A:middle
并告诉布局管理器

00:25:20.686 --> 00:25:22.046 A:middle
我们想要用这些新的属性

00:25:22.106 --> 00:25:23.116 A:middle
来呈现这些字形

00:25:27.096 --> 00:25:29.106 A:middle
这真的很酷

00:25:29.106 --> 00:25:30.416 A:middle
所以左侧显示了

00:25:30.416 --> 00:25:31.436 A:middle
可编辑版本

00:25:31.436 --> 00:25:32.626 A:middle
包含所有 Markdown 字符

00:25:32.956 --> 00:25:34.576 A:middle
而右侧没有显示

00:25:34.576 --> 00:25:36.306 A:middle
任何 Markdown 字符

00:25:36.306 --> 00:25:37.686 A:middle
全部使用相同的文本存储

00:25:38.286 --> 00:25:40.836 A:middle
现在构建一个并排的

00:25:40.836 --> 00:25:42.046 A:middle
Markdown 编辑器 并不是

00:25:42.096 --> 00:25:44.256 A:middle
我们每天都在做的事情

00:25:44.256 --> 00:25:45.536 A:middle
但是很开心看到

00:25:45.536 --> 00:25:47.856 A:middle
TextKit 的可自定义度是多么高

00:25:47.856 --> 00:25:48.816 A:middle
以及它是如何与现实的例子结合的

00:25:49.536 --> 00:25:51.626 A:middle
如果你想了解更多

00:25:51.626 --> 00:25:53.026 A:middle
关于如何使用和自定义

00:25:53.066 --> 00:25:54.816 A:middle
TextKit 的信息 请查看我们出色的

00:25:54.816 --> 00:25:55.576 A:middle
编程指南

00:25:56.286 --> 00:25:58.186 A:middle
然后 我要把现场交给 Donna

00:25:59.516 --> 00:26:06.066 A:middle
[ 掌声 ]

00:25:59.516 --> 00:26:06.066 A:middle
[ 掌声 ]

00:26:06.566 --> 00:26:07.236 A:middle
&gt;&gt; 谢谢 Emily

00:26:08.056 --> 00:26:09.056 A:middle
这些例子真的

00:26:09.056 --> 00:26:09.536 A:middle
非常酷

00:26:09.666 --> 00:26:10.786 A:middle
我真的希望你能够

00:26:10.786 --> 00:26:11.706 A:middle
采用她展示的一些技术

00:26:11.706 --> 00:26:13.876 A:middle
并在你自己的 App 中使用它们

00:26:14.596 --> 00:26:16.086 A:middle
但现在让我们稍微转换一下

00:26:16.416 --> 00:26:17.226 A:middle
并讨论一些

00:26:17.266 --> 00:26:19.766 A:middle
使用文本的最佳做法

00:26:21.756 --> 00:26:23.196 A:middle
关于正确性

00:26:23.796 --> 00:26:24.996 A:middle
如果你的文本没有

00:26:24.996 --> 00:26:26.716 A:middle
按照你期望的方式呈现

00:26:26.716 --> 00:26:28.596 A:middle
它可能与属性字符串上的

00:26:28.596 --> 00:26:29.806 A:middle
不完整或不正确的

00:26:29.806 --> 00:26:30.556 A:middle
属性有关

00:26:31.946 --> 00:26:33.636 A:middle
所以我们来看看一个例子

00:26:33.636 --> 00:26:35.066 A:middle
在实践中看到这一点

00:26:36.116 --> 00:26:37.466 A:middle
假设我们有一个 UITextView

00:26:37.666 --> 00:26:39.536 A:middle
它带有一些属性文本

00:26:39.536 --> 00:26:40.846 A:middle
写着 “Don't hate.”

00:26:40.846 --> 00:26:42.636 A:middle
这段文本的格式是

00:26:42.706 --> 00:26:44.266 A:middle
Comic Sans 字体 24 号大小

00:26:44.766 --> 00:26:46.746 A:middle
我们希望以编程的方式

00:26:46.746 --> 00:26:48.946 A:middle
把它设置成粗体

00:26:48.946 --> 00:26:50.736 A:middle
因为如果有

00:26:50.736 --> 00:26:52.396 A:middle
任何比 Comic Sans 令人讨厌的字体

00:26:52.396 --> 00:26:54.396 A:middle
那一定是 Comic Sans Bold

00:26:54.776 --> 00:26:58.316 A:middle
所以乍一看

00:26:58.316 --> 00:26:59.696 A:middle
编写这样的代码似乎是合理的

00:27:00.716 --> 00:27:02.746 A:middle
现在 我们有我们的原始字体

00:27:03.386 --> 00:27:05.326 A:middle
我们将使用一个 fontDescriptor

00:27:05.326 --> 00:27:06.796 A:middle
来创建原始字体

00:27:06.796 --> 00:27:08.376 A:middle
的粗体版本

00:27:09.936 --> 00:27:11.796 A:middle
然后 我们要

00:27:11.796 --> 00:27:13.196 A:middle
使用原始文本

00:27:13.526 --> 00:27:14.526 A:middle
初始化可变属性字符串

00:27:14.526 --> 00:27:16.866 A:middle
我们要将我们的

00:27:16.866 --> 00:27:18.876 A:middle
新字体或新的粗体字体应用于

00:27:18.876 --> 00:27:20.586 A:middle
单词 “Don't”

00:27:20.586 --> 00:27:21.496 A:middle
这是前五个字符

00:27:21.496 --> 00:27:22.986 A:middle
然后我们将设置

00:27:22.986 --> 00:27:24.386 A:middle
我们的 UITextView 的属性文本属性

00:27:24.386 --> 00:27:25.996 A:middle
来使用这个新的

00:27:25.996 --> 00:27:28.566 A:middle
属性字符串 但是我们这样做时

00:27:28.606 --> 00:27:30.096 A:middle
我们会看到

00:27:30.096 --> 00:27:32.186 A:middle
应用于该单词的新的粗体字体

00:27:32.186 --> 00:27:34.416 A:middle
确实像我们预期的那样

00:27:34.416 --> 00:27:35.676 A:middle
但字符串其余的部分

00:27:35.676 --> 00:27:36.986 A:middle
不知道为什么丢失了原始字体

00:27:37.506 --> 00:27:39.696 A:middle
现在 那些不喜欢

00:27:39.696 --> 00:27:40.966 A:middle
Comic Sans 的人可能会为此感到高兴

00:27:40.966 --> 00:27:43.676 A:middle
但结果是错误的

00:27:43.806 --> 00:27:45.296 A:middle
所以这是一个悲伤的故事

00:27:46.456 --> 00:27:47.926 A:middle
那么为什么会这样呢

00:27:48.506 --> 00:27:51.046 A:middle
为了回答这个问题 让我们

00:27:51.046 --> 00:27:52.196 A:middle
仔细看看我们是如何

00:27:52.196 --> 00:27:53.476 A:middle
初始化我们的

00:27:53.546 --> 00:27:53.856 A:middle
属性字符串的

00:27:55.226 --> 00:27:56.806 A:middle
所以请注意 我们要使用

00:27:56.966 --> 00:27:58.526 A:middle
纯文本字符串来初始化它

00:27:58.526 --> 00:27:59.616 A:middle
并且我们使用的

00:27:59.616 --> 00:28:01.516 A:middle
初始化程序没有属性信息

00:27:59.616 --> 00:28:01.516 A:middle
初始化程序没有属性信息

00:28:01.516 --> 00:28:04.046 A:middle
当你创建一个新的

00:28:04.046 --> 00:28:05.646 A:middle
属性字符串 并且你没有

00:28:05.646 --> 00:28:06.526 A:middle
提供任何属性信息时

00:28:06.526 --> 00:28:08.626 A:middle
新的属性字符串

00:28:08.626 --> 00:28:10.226 A:middle
会使用默认的属性

00:28:11.026 --> 00:28:11.926 A:middle
默认字体是

00:28:11.926 --> 00:28:13.136 A:middle
Helvetica 12 号

00:28:13.686 --> 00:28:15.876 A:middle
为了回顾发生了什么

00:28:16.166 --> 00:28:17.366 A:middle
我们开始

00:28:17.366 --> 00:28:19.036 A:middle
从这个原始的属性字符串

00:28:19.036 --> 00:28:20.566 A:middle
将字体 Comic Sans 24 应用于

00:28:20.566 --> 00:28:21.356 A:middle
整个范围

00:28:21.866 --> 00:28:24.986 A:middle
然后我们创建了这个新的

00:28:24.986 --> 00:28:26.416 A:middle
属性字符串

00:28:26.416 --> 00:28:27.506 A:middle
并使用默认属性

00:28:27.506 --> 00:28:27.966 A:middle
进行了初始化

00:28:28.856 --> 00:28:30.156 A:middle
并且我们将粗字体应用于

00:28:30.156 --> 00:28:31.226 A:middle
新字符串上的 “Don't”

00:28:31.276 --> 00:28:33.016 A:middle
结果就是这里这个

00:28:33.016 --> 00:28:34.896 A:middle
不正确的结果 其中

00:28:34.896 --> 00:28:36.296 A:middle
“Don't” 以 Comic Sans 粗体 24 号显示

00:28:36.296 --> 00:28:37.886 A:middle
但字符串的其余部分

00:28:37.886 --> 00:28:39.366 A:middle
处于默认字体

00:28:39.366 --> 00:28:40.146 A:middle
Helvetica 12

00:28:40.726 --> 00:28:43.916 A:middle
有两种不同的方法

00:28:43.916 --> 00:28:44.776 A:middle
可以让它们正确地显示

00:28:44.776 --> 00:28:46.826 A:middle
一种方法是

00:28:46.826 --> 00:28:47.916 A:middle
避免将纯文本

00:28:47.916 --> 00:28:49.086 A:middle
和属性文本混合在一起

00:28:50.146 --> 00:28:51.416 A:middle
因此 通过使用原始字符串

00:28:51.416 --> 00:28:52.446 A:middle
来初始化我们的新属性字符串

00:28:52.446 --> 00:28:53.676 A:middle
我们要把

00:28:53.676 --> 00:28:54.816 A:middle
那些原始属性保留下来

00:28:55.296 --> 00:28:56.326 A:middle
然后我们再应用我们的新属性

00:28:56.326 --> 00:28:57.606 A:middle
而不会看到这个

00:28:57.606 --> 00:28:59.176 A:middle
重设的默认效果

00:28:59.696 --> 00:29:03.746 A:middle
但是 避免混合纯文本和属性文本

00:28:59.696 --> 00:29:03.746 A:middle
但是 避免混合纯文本和属性文本

00:29:03.746 --> 00:29:04.256 A:middle
并不总是可行的

00:29:04.576 --> 00:29:06.156 A:middle
因此 如果你必须将其混合

00:29:06.736 --> 00:29:08.096 A:middle
则可以在从纯文本字符串中

00:29:08.096 --> 00:29:09.876 A:middle
创建新的属性字符串时

00:29:09.876 --> 00:29:11.846 A:middle
明确提供属性

00:29:11.846 --> 00:29:13.596 A:middle
如果我们确保

00:29:13.656 --> 00:29:14.526 A:middle
从原始文本中应用相同的属性

00:29:14.526 --> 00:29:15.716 A:middle
我们就会得到

00:29:15.716 --> 00:29:16.356 A:middle
正确的结果

00:29:16.886 --> 00:29:19.816 A:middle
但是你应该知道

00:29:19.816 --> 00:29:20.896 A:middle
重设效果会发生

00:29:20.896 --> 00:29:22.126 A:middle
在任何具有默认值

00:29:22.126 --> 00:29:23.736 A:middle
而不仅仅是字体的属性的情况下

00:29:24.816 --> 00:29:26.106 A:middle
如你所见

00:29:26.106 --> 00:29:27.676 A:middle
有很多属性都具有默认值

00:29:27.676 --> 00:29:30.746 A:middle
所以我想特别提醒一下

00:29:30.746 --> 00:29:31.986 A:middle
这里的 “Paragraph style（段落风格）”

00:29:31.986 --> 00:29:33.506 A:middle
因为它是一个隐蔽的

00:29:33.506 --> 00:29:34.096 A:middle
重置点

00:29:35.056 --> 00:29:36.466 A:middle
为了明白为什么

00:29:36.466 --> 00:29:37.256 A:middle
我们将重新回顾一下前面的例子

00:29:37.406 --> 00:29:38.496 A:middle
但不是改变字体

00:29:38.496 --> 00:29:39.826 A:middle
我们将改变段落风格

00:29:39.826 --> 00:29:41.576 A:middle
来屏蔽 “hate” 这个词

00:29:41.576 --> 00:29:43.746 A:middle
因为没有人喜欢仇恨

00:29:44.376 --> 00:29:45.786 A:middle
所以我们希望我们的文本看起来像这样

00:29:45.856 --> 00:29:47.886 A:middle
但是当我们运行这段代码时

00:29:48.716 --> 00:29:49.836 A:middle
我们将得到

00:29:50.686 --> 00:29:51.696 A:middle
一个这样的结果

00:29:51.696 --> 00:29:53.526 A:middle
所有文本的格式都是 Helvetica 12

00:29:53.526 --> 00:29:55.136 A:middle
使用默认的段落风格

00:29:55.136 --> 00:29:56.866 A:middle
默认的换行模式 和默认的自动断词

00:29:57.566 --> 00:29:59.016 A:middle
又一次 对于那些

00:29:59.016 --> 00:29:59.956 A:middle
讨厌 Comic Sans 的人来说 真是太棒了

00:29:59.956 --> 00:30:01.056 A:middle
因为它已经被完全地

00:29:59.956 --> 00:30:01.056 A:middle
因为它已经被完全地

00:30:01.056 --> 00:30:02.136 A:middle
从字符串中移除了

00:30:02.226 --> 00:30:03.976 A:middle
但它=这是错误的

00:30:04.086 --> 00:30:05.446 A:middle
但是这次错误的原因

00:30:05.446 --> 00:30:06.276 A:middle
与上次不同

00:30:06.826 --> 00:30:08.586 A:middle
为了更好地理解这不同

00:30:08.586 --> 00:30:09.796 A:middle
让我们回顾一下

00:30:09.796 --> 00:30:11.686 A:middle
属性修复发生在

00:30:11.686 --> 00:30:13.296 A:middle
布局之前 这时候

00:30:13.296 --> 00:30:15.236 A:middle
系统会修复不一致的属性

00:30:16.216 --> 00:30:17.196 A:middle
在我们的属性字符串中

00:30:17.286 --> 00:30:18.546 A:middle
我们有一个

00:30:18.546 --> 00:30:19.906 A:middle
包含多个段落样式的单个段落

00:30:19.906 --> 00:30:22.646 A:middle
这显然非常不一致

00:30:23.496 --> 00:30:24.996 A:middle
因此 当系统修复

00:30:24.996 --> 00:30:26.426 A:middle
此字符串的属性时

00:30:26.426 --> 00:30:27.086 A:middle
它将采用

00:30:27.086 --> 00:30:28.976 A:middle
它找到的第一段样式

00:30:28.976 --> 00:30:30.206 A:middle
并将其应用于整个段落

00:30:31.236 --> 00:30:32.296 A:middle
这就会导致

00:30:32.296 --> 00:30:34.096 A:middle
我们的属性字符串

00:30:34.096 --> 00:30:35.386 A:middle
以默认段落样式显示

00:30:35.946 --> 00:30:39.906 A:middle
关键是要明确你的属性

00:30:39.906 --> 00:30:42.216 A:middle
特别是在混合纯文本和

00:30:42.216 --> 00:30:42.926 A:middle
属性文本时

00:30:43.836 --> 00:30:44.916 A:middle
所以通过这样做

00:30:44.916 --> 00:30:46.346 A:middle
你就能避免它出现

00:30:46.346 --> 00:30:47.216 A:middle
默认属性的重置效果

00:30:47.826 --> 00:30:49.406 A:middle
对于 AppKit 开发人员来说

00:30:49.406 --> 00:30:51.126 A:middle
如果你正在为 App 更新

00:30:51.126 --> 00:30:52.176 A:middle
深色模式

00:30:52.176 --> 00:30:52.696 A:middle
这一点尤其重要

00:30:53.286 --> 00:30:54.526 A:middle
因此通过使用

00:30:54.526 --> 00:30:56.056 A:middle
带有动态颜色的显式属性

00:30:56.056 --> 00:30:57.886 A:middle
如 NSColor.textColor

00:30:57.946 --> 00:30:59.216 A:middle
可以确保你的文本

00:30:59.216 --> 00:31:00.146 A:middle
会根据环境用正确的

00:30:59.216 --> 00:31:00.146 A:middle
会根据环境用正确的

00:31:00.316 --> 00:31:03.116 A:middle
颜色绘制

00:31:03.216 --> 00:31:03.786 A:middle
继续

00:31:04.316 --> 00:31:05.416 A:middle
下一个话题是性能

00:31:06.306 --> 00:31:07.116 A:middle
如果你使用大量文本

00:31:07.116 --> 00:31:08.656 A:middle
一个提高 App 性能的

00:31:08.656 --> 00:31:10.046 A:middle
好方法是

00:31:10.046 --> 00:31:11.636 A:middle
使用非连续布局

00:31:11.636 --> 00:31:14.076 A:middle
为了明白这意味着什么

00:31:14.076 --> 00:31:15.276 A:middle
让我们重新回顾

00:31:15.336 --> 00:31:16.766 A:middle
布局过程

00:31:17.826 --> 00:31:18.856 A:middle
我们说过布局过程

00:31:18.896 --> 00:31:20.436 A:middle
包括字形生成

00:31:20.526 --> 00:31:21.386 A:middle
和字形布局

00:31:22.806 --> 00:31:24.046 A:middle
所以对于连续布局

00:31:24.266 --> 00:31:25.416 A:middle
布局管理器

00:31:25.416 --> 00:31:26.716 A:middle
在文本存储开头就开始

00:31:26.716 --> 00:31:27.946 A:middle
执行字形生成和

00:31:27.986 --> 00:31:29.496 A:middle
字形布局了

00:31:30.286 --> 00:31:32.426 A:middle
它以从头到尾的顺序进行

00:31:33.786 --> 00:31:34.986 A:middle
所以如果有人使用你的 App

00:31:35.026 --> 00:31:37.556 A:middle
滚动到文本视图中间的某个点

00:31:37.556 --> 00:31:38.966 A:middle
那么布局管理器

00:31:38.966 --> 00:31:41.056 A:middle
必须为红色矩形

00:31:41.056 --> 00:31:42.316 A:middle
所指示区域之前的所有字形

00:31:42.316 --> 00:31:44.596 A:middle
生成并布局字形

00:31:45.166 --> 00:31:46.726 A:middle
并且请注意

00:31:46.726 --> 00:31:47.846 A:middle
这还包括你从

00:31:47.846 --> 00:31:49.016 A:middle
屏幕顶部滚动回到

00:31:49.016 --> 00:31:50.116 A:middle
文本存储起点之间

00:31:50.176 --> 00:31:51.596 A:middle
所有你看不见的文本

00:31:52.696 --> 00:31:54.186 A:middle
所以如果你有很多文本

00:31:54.236 --> 00:31:56.406 A:middle
那么这个可怜的用户

00:31:56.406 --> 00:31:57.756 A:middle
可能需要等待你的 App 一段时间

00:31:57.756 --> 00:31:59.946 A:middle
让它完成布局

00:31:59.946 --> 00:32:01.626 A:middle
但幸运的是

00:31:59.946 --> 00:32:01.626 A:middle
但幸运的是

00:32:01.626 --> 00:32:03.616 A:middle
我们可以通过使用非连续布局

00:32:03.616 --> 00:32:03.916 A:middle
来避免这种情况

00:32:04.966 --> 00:32:06.896 A:middle
正如其名称所暗示的那样

00:32:06.896 --> 00:32:08.286 A:middle
使用非连续布局

00:32:08.286 --> 00:32:10.216 A:middle
布局管理器无需

00:32:10.216 --> 00:32:11.656 A:middle
从文本存储开始

00:32:11.716 --> 00:32:12.896 A:middle
顺序地进行字形

00:32:12.896 --> 00:32:13.296 A:middle
生成和布局

00:32:14.166 --> 00:32:15.626 A:middle
所以现在当这个使用你 App 的人

00:32:15.626 --> 00:32:16.756 A:middle
滚动到文本视图的中间时

00:32:17.026 --> 00:32:18.956 A:middle
布局管理器可以

00:32:18.956 --> 00:32:20.016 A:middle
立即为该中间部分

00:32:20.016 --> 00:32:22.696 A:middle
执行字形生成和布局

00:32:23.346 --> 00:32:25.696 A:middle
所以如果你的文本存储中

00:32:25.696 --> 00:32:26.886 A:middle
有很多文本

00:32:26.886 --> 00:32:28.376 A:middle
使用非连续布局可以

00:32:28.376 --> 00:32:29.276 A:middle
为你带来巨大的性能提升

00:32:29.776 --> 00:32:32.476 A:middle
那么你如何启用

00:32:33.266 --> 00:32:33.366 A:middle
这个功能呢

00:32:33.836 --> 00:32:35.946 A:middle
非连续布局是

00:32:35.946 --> 00:32:37.366 A:middle
NSLayoutManager 的一个属性

00:32:37.366 --> 00:32:39.346 A:middle
对于 NSTextView

00:32:39.346 --> 00:32:41.346 A:middle
你可以使用布局管理器

00:32:41.346 --> 00:32:42.486 A:middle
来访问文本

00:32:42.486 --> 00:32:43.436 A:middle
然后在其中设置该属性

00:32:44.006 --> 00:32:46.896 A:middle
对于 UITextView

00:32:46.896 --> 00:32:47.786 A:middle
你通常不需要做任何事情

00:32:47.786 --> 00:32:48.756 A:middle
因为这是默认开启的

00:32:48.756 --> 00:32:51.946 A:middle
但只需要记住一件重要的事情

00:32:53.006 --> 00:32:54.926 A:middle
由于 UITextView 是 UIScrollView 的子类

00:32:55.416 --> 00:32:57.806 A:middle
因此非连续布局

00:32:57.846 --> 00:32:59.586 A:middle
需要启用滚动

00:32:59.586 --> 00:33:00.106 A:middle
才能生效

00:32:59.586 --> 00:33:00.106 A:middle
才能生效

00:33:01.266 --> 00:33:02.776 A:middle
这是因为当你禁用滚动时

00:33:02.776 --> 00:33:04.366 A:middle
询求你的文本视图

00:33:04.366 --> 00:33:06.086 A:middle
所包含的内容大小

00:33:06.086 --> 00:33:07.116 A:middle
需要布局

00:33:07.116 --> 00:33:08.376 A:middle
所有的文本

00:33:08.906 --> 00:33:09.776 A:middle
所以你根本

00:33:09.776 --> 00:33:10.716 A:middle
不会获得

00:33:10.716 --> 00:33:11.726 A:middle
非连续布局的

00:33:11.726 --> 00:33:12.156 A:middle
性能优势

00:33:12.816 --> 00:33:15.636 A:middle
这把我们引导了一个

00:33:15.636 --> 00:33:16.376 A:middle
很重要的问题上

00:33:17.186 --> 00:33:18.236 A:middle
当你使用非连续布局时

00:33:18.236 --> 00:33:19.696 A:middle
你应该避免一次

00:33:19.696 --> 00:33:20.916 A:middle
请求全部或者大多数文本的布局

00:33:20.916 --> 00:33:23.136 A:middle
因为这样做

00:33:23.136 --> 00:33:24.116 A:middle
从根本上就

00:33:24.116 --> 00:33:25.026 A:middle
违背了我们的初衷

00:33:25.086 --> 00:33:27.516 A:middle
所以如果你只有一个文本容器

00:33:27.516 --> 00:33:28.926 A:middle
不要要求

00:33:28.926 --> 00:33:29.956 A:middle
整个容器的布局

00:33:30.796 --> 00:33:31.866 A:middle
并且不要要求

00:33:31.866 --> 00:33:33.196 A:middle
包含文本结尾的大范围字符

00:33:33.196 --> 00:33:37.106 A:middle
或字形的布局

00:33:37.366 --> 00:33:38.526 A:middle
我们并没有深入

00:33:38.526 --> 00:33:39.406 A:middle
研究文本性能的主题

00:33:39.406 --> 00:33:42.076 A:middle
因为 我在去年的 WWDC 2017 上针对这一点

00:33:42.386 --> 00:33:44.826 A:middle
进行了一次非常棒的演讲

00:33:44.826 --> 00:33:45.766 A:middle
那就是框架效率的不完整性

00:33:46.186 --> 00:33:47.226 A:middle
你可以在讨论会结束时

00:33:47.226 --> 00:33:48.576 A:middle
通过更多信息链接

00:33:48.576 --> 00:33:49.306 A:middle
访问该视频

00:33:49.306 --> 00:33:50.026 A:middle
好的

00:33:51.396 --> 00:33:53.876 A:middle
现在是时候谈论

00:33:53.876 --> 00:33:55.006 A:middle
每个人最喜欢的话题

00:33:55.206 --> 00:33:55.666 A:middle
安全

00:33:56.406 --> 00:33:59.486 A:middle
你可能已经注意到

00:33:59.486 --> 00:34:00.526 A:middle
最近有一些事件发生在互联网上

00:33:59.486 --> 00:34:00.526 A:middle
最近有一些事件发生在互联网上

00:34:00.526 --> 00:34:02.456 A:middle
某些人利用我们软件中的错误

00:34:02.456 --> 00:34:07.346 A:middle
来给使用我们产品的人们制造麻烦

00:34:08.896 --> 00:34:10.016 A:middle
作为回应

00:34:10.016 --> 00:34:11.416 A:middle
我们正在继续设计

00:34:11.606 --> 00:34:12.956 A:middle
抵御这类攻击的技术

00:34:12.956 --> 00:34:16.036 A:middle
但今天我想谈谈

00:34:16.036 --> 00:34:17.326 A:middle
我们如何共同努力

00:34:17.326 --> 00:34:18.755 A:middle
为这些攻击

00:34:18.755 --> 00:34:20.025 A:middle
提供更强大的防御

00:34:20.815 --> 00:34:21.626 A:middle
所以你可能已经听说过

00:34:21.626 --> 00:34:24.126 A:middle
纵深防御的概念

00:34:24.706 --> 00:34:26.056 A:middle
如果你不熟悉

00:34:26.056 --> 00:34:27.856 A:middle
这些术语的话 纵深防御

00:34:27.856 --> 00:34:30.706 A:middle
就是创建多层保护

00:34:30.706 --> 00:34:31.226 A:middle
来抵御威胁

00:34:31.226 --> 00:34:33.926 A:middle
这个概念已经存在了几个世纪了

00:34:34.096 --> 00:34:35.556 A:middle
你可以在中世纪城堡的设计中

00:34:35.556 --> 00:34:36.275 A:middle
看到它

00:34:36.826 --> 00:34:38.056 A:middle
城堡周围的地上没有树木

00:34:38.085 --> 00:34:39.906 A:middle
所以你可以看到袭击者来了

00:34:39.906 --> 00:34:41.656 A:middle
还有一个护城河

00:34:41.656 --> 00:34:42.525 A:middle
可以让城堡更加难以接近

00:34:42.525 --> 00:34:43.545 A:middle
并且可以防止敌人在

00:34:43.545 --> 00:34:44.306 A:middle
下面挖隧道

00:34:44.306 --> 00:34:46.876 A:middle
而墙壁是另一道防线

00:34:47.076 --> 00:34:48.166 A:middle
它们很高

00:34:48.166 --> 00:34:49.096 A:middle
所以很难攀爬

00:34:49.956 --> 00:34:50.926 A:middle
并且在墙壁和顶部

00:34:50.926 --> 00:34:52.456 A:middle
有很多垛口

00:34:52.456 --> 00:34:54.255 A:middle
让防御者能在

00:34:54.255 --> 00:34:55.406 A:middle
有防御的地方

00:34:55.406 --> 00:34:55.886 A:middle
向攻击者开火

00:34:57.096 --> 00:34:58.796 A:middle
这些保护中单独

00:34:58.796 --> 00:35:00.176 A:middle
任何一种都可能不足以

00:34:58.796 --> 00:35:00.176 A:middle
任何一种都可能不足以

00:35:00.296 --> 00:35:01.836 A:middle
抵御攻击

00:35:01.836 --> 00:35:03.556 A:middle
但它们组合在一起

00:35:03.676 --> 00:35:04.356 A:middle
就提供了强有力的防御

00:35:05.066 --> 00:35:07.796 A:middle
就像城堡一样

00:35:07.796 --> 00:35:09.246 A:middle
我们在这里为攻击

00:35:09.246 --> 00:35:11.126 A:middle
提供了多层防御

00:35:11.126 --> 00:35:12.246 A:middle
但没没有人会阻止

00:35:12.316 --> 00:35:13.376 A:middle
你在你的 App 或框架中

00:35:13.376 --> 00:35:14.636 A:middle
采取自己的

00:35:14.636 --> 00:35:15.106 A:middle
防御措施

00:35:15.776 --> 00:35:17.266 A:middle
通过这样做

00:35:17.266 --> 00:35:18.596 A:middle
你可以添加另一层保护

00:35:18.596 --> 00:35:19.936 A:middle
并提高产品安全性

00:35:20.406 --> 00:35:21.066 A:middle
这是共赢

00:35:21.646 --> 00:35:23.216 A:middle
那么让我们来谈谈

00:35:23.866 --> 00:35:25.466 A:middle
你可以在这里做什么

00:35:25.676 --> 00:35:26.556 A:middle
而我希望你考虑的是

00:35:26.556 --> 00:35:28.626 A:middle
在你的 App 或框架中

00:35:28.626 --> 00:35:30.506 A:middle
设置文本输入限制

00:35:31.426 --> 00:35:32.766 A:middle
现在我想强调

00:35:32.766 --> 00:35:33.766 A:middle
这可能并不总是

00:35:33.816 --> 00:35:34.456 A:middle
有意义的

00:35:34.756 --> 00:35:36.106 A:middle
因此举例来说

00:35:36.106 --> 00:35:37.606 A:middle
如果你的 App 是

00:35:37.606 --> 00:35:38.736 A:middle
Emily 之前展示的那种

00:35:38.736 --> 00:35:40.336 A:middle
日记 App 的创作工具

00:35:40.336 --> 00:35:42.066 A:middle
那么对该文本的长度设置限制

00:35:42.066 --> 00:35:42.986 A:middle
并没有任何意义

00:35:43.296 --> 00:35:44.276 A:middle
所以如果没有意义

00:35:44.516 --> 00:35:45.626 A:middle
你就不应该这样做

00:35:46.416 --> 00:35:47.996 A:middle
但相比之下

00:35:47.996 --> 00:35:49.436 A:middle
如果你的手机 App 有一个

00:35:49.436 --> 00:35:50.886 A:middle
用于为帐户分配昵称的

00:35:50.886 --> 00:35:52.676 A:middle
文本域 那么你可能会想

00:35:52.676 --> 00:35:53.816 A:middle
在这里应该设定怎样的限制

00:35:53.816 --> 00:35:54.266 A:middle
才合理

00:35:54.846 --> 00:35:57.456 A:middle
设置这些限制是个好主意

00:35:57.456 --> 00:35:58.926 A:middle
因为所有文本输入

00:35:58.926 --> 00:36:00.916 A:middle
都有潜在的风险

00:35:58.926 --> 00:36:00.916 A:middle
都有潜在的风险

00:36:02.086 --> 00:36:03.926 A:middle
当你允许文本输入时

00:36:03.926 --> 00:36:05.906 A:middle
你就允许了复制和粘贴

00:36:05.906 --> 00:36:08.206 A:middle
你不知道其中会被

00:36:08.206 --> 00:36:08.986 A:middle
粘贴哪种文本

00:36:10.126 --> 00:36:10.926 A:middle
它可能是任何东西

00:36:10.926 --> 00:36:12.016 A:middle
它可能是一个

00:36:12.016 --> 00:36:12.766 A:middle
带有恶意字符组合的字符串

00:36:12.766 --> 00:36:14.436 A:middle
或者它可能只是

00:36:14.436 --> 00:36:15.816 A:middle
一个非常

00:36:16.126 --> 00:36:19.236 A:middle
非常长的字符串

00:36:20.566 --> 00:36:21.796 A:middle
即使像这样的长字符串

00:36:21.796 --> 00:36:23.116 A:middle
本身可能不是恶意的

00:36:23.116 --> 00:36:24.336 A:middle
它也可能会导致你的 App

00:36:24.336 --> 00:36:25.526 A:middle
冻结或卡住

00:36:26.296 --> 00:36:27.386 A:middle
如果你有一个文本域

00:36:27.676 --> 00:36:29.276 A:middle
是为了一行输入设计的

00:36:29.276 --> 00:36:30.816 A:middle
但有人想将“战争与和平”的

00:36:30.816 --> 00:36:32.126 A:middle
全部内容粘贴进去

00:36:32.126 --> 00:36:33.536 A:middle
这大约有 310 万个

00:36:33.856 --> 00:36:35.106 A:middle
英文字符

00:36:35.106 --> 00:36:37.576 A:middle
这是否合理

00:36:39.636 --> 00:36:41.226 A:middle
可能并不

00:36:42.316 --> 00:36:43.916 A:middle
所以这是一个很好的例子

00:36:43.916 --> 00:36:45.106 A:middle
它可以让你能强制增加

00:36:45.106 --> 00:36:46.656 A:middle
你自己的限制

00:36:47.926 --> 00:36:49.376 A:middle
以下是

00:36:49.376 --> 00:36:50.926 A:middle
设定这些限制的推荐方法

00:36:51.766 --> 00:36:52.856 A:middle
你希望在输入字符串

00:36:52.926 --> 00:36:54.756 A:middle
在文本域上设置之前进行验证

00:36:55.186 --> 00:36:56.846 A:middle
对于 UITextFields

00:36:56.846 --> 00:36:57.706 A:middle
你可以通过

00:36:57.986 --> 00:36:59.066 A:middle
使用 UITextFieldDelegate 来完成此操作

00:36:59.936 --> 00:37:01.356 A:middle
对于 NSTextFields

00:36:59.936 --> 00:37:01.356 A:middle
对于 NSTextFields

00:37:01.356 --> 00:37:03.126 A:middle
你应该使用自定义的 NSFormatter

00:37:03.126 --> 00:37:04.426 A:middle
来实现你的验证逻辑

00:37:04.426 --> 00:37:07.656 A:middle
而且我们还有一些额外的

00:37:07.796 --> 00:37:09.706 A:middle
安全增强功能即将推出

00:37:10.386 --> 00:37:11.396 A:middle
因此请在发布说明中注意它们

00:37:11.396 --> 00:37:12.816 A:middle
如果你有任何问题

00:37:12.816 --> 00:37:13.856 A:middle
请在本周的实验室中

00:37:13.856 --> 00:37:14.526 A:middle
联系我们

00:37:15.176 --> 00:37:16.666 A:middle
好的

00:37:16.876 --> 00:37:18.886 A:middle
时间要到了

00:37:18.886 --> 00:37:19.456 A:middle
所以让我们回顾一下

00:37:20.436 --> 00:37:21.516 A:middle
你知道如何选择正确的控件

00:37:21.516 --> 00:37:23.286 A:middle
自定义点

00:37:23.786 --> 00:37:25.466 A:middle
和自定义方法

00:37:25.466 --> 00:37:26.626 A:middle
并了解在正确性

00:37:26.626 --> 00:37:27.646 A:middle
性能和安全性方面

00:37:27.646 --> 00:37:29.876 A:middle
遵循的最佳实践

00:37:30.626 --> 00:37:32.066 A:middle
使用这些知识和 TextKit

00:37:32.066 --> 00:37:34.216 A:middle
去创伟大的东西吧

00:37:35.636 --> 00:37:36.946 A:middle
等等

00:37:36.946 --> 00:37:38.066 A:middle
这里是超级重要的

00:37:38.066 --> 00:37:39.346 A:middle
更多信息链接

00:37:39.346 --> 00:37:40.506 A:middle
你可以在这里找到

00:37:40.506 --> 00:37:41.766 A:middle
我们今天引用的

00:37:41.766 --> 00:37:42.596 A:middle
所有过去的优秀讨论会和文档

00:37:43.096 --> 00:37:44.326 A:middle
请在星期四和星期五来

00:37:44.326 --> 00:37:45.036 A:middle
我们实验室参观

00:37:45.596 --> 00:37:47.396 A:middle
谢谢 希望你们可以享受讨论会的

00:37:47.396 --> 00:37:47.976 A:middle
其余部分

00:37:48.016 --> 00:37:50.000 A:middle
[ 掌声 ]
