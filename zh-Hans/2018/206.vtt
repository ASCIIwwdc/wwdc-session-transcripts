WEBVTT

00:00:17.784 --> 00:00:21.488 align:middle line:0
（watchOS新特性
演讲206）

00:00:23.123 --> 00:00:24.124 align:middle line:-1
嗨

00:00:28.595 --> 00:00:29.463 align:middle line:-1
大家好

00:00:31.231 --> 00:00:35.269 align:middle line:-2
下午好 感谢你们参加
“watchOS新特性”演讲

00:00:35.903 --> 00:00:38.772 align:middle line:-2
本次演讲中
我们将以高层次概要讲述新特性

00:00:38.839 --> 00:00:42.009 align:middle line:-1
让开发人员、设计师

00:00:42.075 --> 00:00:44.978 align:middle line:-1
和产品主管可以利用这些特性

00:00:45.045 --> 00:00:46.647 align:middle line:-1
为用户提供良好的使用体验

00:00:46.880 --> 00:00:49.650 align:middle line:-2
我们还会深入了解
新API和界面生成器

00:00:49.716 --> 00:00:51.318 align:middle line:-1
的细节内容

00:00:52.019 --> 00:00:53.520 align:middle line:-1
我是Lori Hylan-Cho

00:00:53.820 --> 00:00:57.257 align:middle line:-2
我是Watch框架开发团队成员
今天很高兴来到这里

00:00:57.324 --> 00:00:59.526 align:middle line:-1
和大家分享一些新特性

00:00:59.593 --> 00:01:02.763 align:middle line:-2
这些特性能帮助watchOS 5
提供良好的用户体验

00:00:59.593 --> 00:01:02.763 align:middle line:-2
这些特性能帮助watchOS 5
提供良好的用户体验

00:01:04.831 --> 00:01:08.335 align:middle line:-2
自从2015年以来
我们走过了很长的一段路

00:01:08.969 --> 00:01:12.339 align:middle line:-1
良好的手表体验涉及到多个方面

00:01:12.406 --> 00:01:14.775 align:middle line:-2
Watch app是其中的
一个很重要的环节

00:01:15.809 --> 00:01:20.647 align:middle line:-2
通知、信息推送
和Siri Shortcuts互相配合

00:01:20.714 --> 00:01:24.551 align:middle line:-2
提供流畅的手表体验
用户可以进行简单高效的操作

00:01:24.618 --> 00:01:27.487 align:middle line:-2
在合适的时间
获得需要的信息

00:01:29.056 --> 00:01:30.757 align:middle line:-1
当然Series 3手表

00:01:30.824 --> 00:01:33.627 align:middle line:-1
支持蜂窝网络新的Wi-Fi选项

00:01:33.694 --> 00:01:36.129 align:middle line:-1
让你能够直接通过手表上网

00:01:36.196 --> 00:01:39.366 align:middle line:-2
越来越多的穿戴式手表
正在摆脱对手机的依赖

00:01:39.700 --> 00:01:42.936 align:middle line:-1
因此必须提供完整的手表体验

00:01:44.004 --> 00:01:46.840 align:middle line:-2
让我们来看看
watchOS 5的新特性

00:01:46.907 --> 00:01:50.110 align:middle line:-1
它们帮助你提供良好的手表体验

00:01:53.080 --> 00:01:56.116 align:middle line:-2
问Apple Watch任何用户
他们最喜欢手表的什么

00:01:56.183 --> 00:01:59.119 align:middle line:-2
他们首先想到的功能之一
是通知功能

00:01:59.620 --> 00:02:01.955 align:middle line:-2
今年我们进一步
丰富了通知功能

00:01:59.620 --> 00:02:01.955 align:middle line:-2
今年我们进一步
丰富了通知功能

00:02:02.022 --> 00:02:03.624 align:middle line:-1
加入一些重要改进

00:02:05.826 --> 00:02:08.395 align:middle line:-2
从watchOS 1开始
就支持使用图片和文本

00:02:08.461 --> 00:02:10.697 align:middle line:-1
创建动态通知

00:02:10.764 --> 00:02:13.600 align:middle line:-2
但是当通知到达时
如果用户未看到通知

00:02:14.301 --> 00:02:16.203 align:middle line:-1
可能会永远错过它

00:02:16.270 --> 00:02:19.373 align:middle line:-2
因为Notification Center
仅显示静态内容

00:02:20.007 --> 00:02:22.976 align:middle line:-2
这样设计的目的
是为了在通知到达时

00:02:23.043 --> 00:02:24.511 align:middle line:-1
相比于在Notification Center显示

00:02:24.578 --> 00:02:27.047 align:middle line:-1
有更多的时间显示通知

00:02:28.949 --> 00:02:33.320 align:middle line:-2
在watchOS 5中 我们将尽
最大努力显示美观的动态通知

00:02:33.787 --> 00:02:37.357 align:middle line:-2
而不需要你们更改代码
或重新进行编译

00:02:38.292 --> 00:02:40.894 align:middle line:-1
我们努力让它变得更好

00:02:41.261 --> 00:02:43.330 align:middle line:-1
而且也能够在Notification Center

00:02:43.397 --> 00:02:45.899 align:middle line:-1
显示动态通知

00:02:45.966 --> 00:02:48.302 align:middle line:-1
接下来我要介绍两个特性

00:02:50.304 --> 00:02:52.806 align:middle line:-1
第一个是分组通知

00:02:53.440 --> 00:02:56.743 align:middle line:-2
你可能已经知道
可以为每个通知设置

00:02:56.810 --> 00:02:59.847 align:middle line:-1
多个类别和不同的通知界面

00:03:00.080 --> 00:03:03.717 align:middle line:-2
你们可能已经设定了
线程ID和推送通知

00:03:03.784 --> 00:03:05.819 align:middle line:-1
从iOS发送通知到手表

00:03:07.855 --> 00:03:09.790 align:middle line:-2
在watchOS 5中
这将导致

00:03:09.857 --> 00:03:12.960 align:middle line:-1
在Notification Center自动分组通知

00:03:13.026 --> 00:03:14.628 align:middle line:-1
上幅幻灯片已经展示这一点

00:03:15.662 --> 00:03:20.234 align:middle line:-2
指定类别和线程ID
还开启另外一种可能

00:03:21.802 --> 00:03:24.805 align:middle line:-2
即获得与内置信息app
相同的行为模式

00:03:24.872 --> 00:03:27.140 align:middle line:-1
当原始通知显示在屏幕上时

00:03:27.207 --> 00:03:29.710 align:middle line:-1
具有相同线程ID的新通知到达时

00:03:30.143 --> 00:03:32.412 align:middle line:-1
会被追加到现有界面

00:03:33.413 --> 00:03:36.083 align:middle line:-1
这种分组操作是可选的

00:03:36.149 --> 00:03:37.918 align:middle line:-1
让你能够使用同一个通知接口控制器

00:03:37.985 --> 00:03:41.388 align:middle line:-1
多次调用句柄

00:03:43.957 --> 00:03:45.526 align:middle line:-1
要使用这些行为

00:03:45.592 --> 00:03:49.263 align:middle line:-1
应该在界面Storyboard中

00:03:49.329 --> 00:03:50.397 align:middle line:-1
选择通知类别

00:03:51.198 --> 00:03:54.468 align:middle line:-2
在属性检查器中
选中句柄分组框

00:03:55.602 --> 00:03:59.540 align:middle line:-2
当原始通知显示在屏幕上时
如果具有匹配类别和线程ID的

00:03:59.907 --> 00:04:02.543 align:middle line:-1
通知到达

00:03:59.907 --> 00:04:02.543 align:middle line:-1
通知到达

00:04:02.843 --> 00:04:04.945 align:middle line:-1
将会在现有通知界面控制器上

00:04:05.012 --> 00:04:07.681 align:middle line:-2
再次调用
didReceiveNotification

00:04:07.915 --> 00:04:10.918 align:middle line:-2
因此 你应该准备
在现有通知界面上

00:04:10.984 --> 00:04:15.255 align:middle line:-2
追加内容
也许需要添加一个空白行

00:04:15.322 --> 00:04:17.757 align:middle line:-1
在现有标签上显示新的消息正文

00:04:17.824 --> 00:04:21.327 align:middle line:-2
或者为表格添加一个行
正如你在前一个例子中看到的那样

00:04:24.398 --> 00:04:28.802 align:middle line:-2
对于didReceiveNotification
它的签名已经在watchOS 5中发生变化

00:04:29.536 --> 00:04:32.806 align:middle line:-2
这个版本的completionHandler
已经被弃用

00:04:34.174 --> 00:04:36.443 align:middle line:-1
从而变得更加简单

00:04:37.177 --> 00:04:39.079 align:middle line:-1
这样我们就可以知道

00:04:39.146 --> 00:04:41.748 align:middle line:-1
你已经完成通知数据处理

00:04:41.815 --> 00:04:44.518 align:middle line:-1
并且准备在屏幕上显示通知

00:04:45.352 --> 00:04:48.455 align:middle line:-1
你们应该尽量简单地

00:04:48.522 --> 00:04:52.459 align:middle line:-2
显示通知
提高处理速度

00:04:54.795 --> 00:04:58.198 align:middle line:-2
另外要注意的是
用户需要抬起手腕

00:04:58.265 --> 00:05:01.869 align:middle line:-2
在通知到达时
看到所有具有相同线程ID的通知

00:04:58.265 --> 00:05:01.869 align:middle line:-2
在通知到达时
看到所有具有相同线程ID的通知

00:05:02.302 --> 00:05:04.638 align:middle line:-1
如果你处理通知类别的

00:05:04.705 --> 00:05:06.206 align:middle line:-1
分组和动态界面

00:05:06.273 --> 00:05:10.077 align:middle line:-2
当用户轻点分组和Notification Center时
将会在表盘上显示

00:05:10.143 --> 00:05:12.713 align:middle line:-1
所有具有相同线程ID的消息

00:05:13.714 --> 00:05:16.183 align:middle line:-1
如果该线程上的其他消息到达

00:05:16.250 --> 00:05:19.753 align:middle line:-2
将会实时追加这些消息
并且显示在长形界面中

00:05:24.591 --> 00:05:25.659 align:middle line:-1
还有一项重大改进

00:05:26.460 --> 00:05:29.763 align:middle line:-2
在watchOS 5中
可以在你发送的通知中

00:05:29.830 --> 00:05:32.132 align:middle line:-1
直接加入app一些特性

00:05:32.199 --> 00:05:34.568 align:middle line:-2
在通知中加入一些元素
使用户能够在通知中

00:05:34.635 --> 00:05:36.937 align:middle line:-1
与内容进行交互

00:05:38.972 --> 00:05:43.076 align:middle line:-2
例如 可以让用户
支付打车费 评价司机

00:05:43.143 --> 00:05:45.512 align:middle line:-2
通知用户
告知他们的账单即将到期

00:05:45.579 --> 00:05:49.449 align:middle line:-2
延长停车时间
让餐厅不仅能够

00:05:49.516 --> 00:05:51.718 align:middle line:-1
确认订餐

00:05:51.785 --> 00:05:54.555 align:middle line:-2
而且还知道
将会有三人来进餐 而不是四人

00:05:56.823 --> 00:05:58.258 align:middle line:-1
让我们来看看这是如何运作的

00:05:58.992 --> 00:06:01.895 align:middle line:-2
如果你要创建
新的通知界面控制器

00:05:58.992 --> 00:06:01.895 align:middle line:-2
如果你要创建
新的通知界面控制器

00:06:01.962 --> 00:06:05.799 align:middle line:-2
将会自动为你创建
一个动态交互式界面

00:06:07.835 --> 00:06:11.371 align:middle line:-2
如果已经为你的通知类别
创建一个交互式界面

00:06:11.438 --> 00:06:14.675 align:middle line:-2
请在Watch app界面
Storyboard中选择类别

00:06:14.741 --> 00:06:17.744 align:middle line:-1
然后选中“交互式界面”复选框

00:06:21.949 --> 00:06:25.085 align:middle line:-2
对于这两种界面
你会发现旧动态界面选项仍然被选中

00:06:25.152 --> 00:06:27.988 align:middle line:-1
同时 还选中了动态交互选项

00:06:28.722 --> 00:06:31.325 align:middle line:-2
在watchOS 5中
当通知首次到达时

00:06:31.391 --> 00:06:35.329 align:middle line:-2
将会显示动态界面而且也会在
Notification Center显示

00:06:35.395 --> 00:06:36.530 align:middle line:-1
前面我讲过这一点

00:06:37.698 --> 00:06:40.868 align:middle line:-2
早期版本的watchOS
也将会显示动态界面

00:06:40.934 --> 00:06:43.604 align:middle line:-1
因此你需要保持向后兼容

00:06:46.607 --> 00:06:49.243 align:middle line:-1
创建动态交互式界面控制器之后

00:06:49.309 --> 00:06:51.278 align:middle line:-1
可以从对象库中添加按钮 开关

00:06:51.345 --> 00:06:53.547 align:middle line:-1
和其他交互控件

00:06:53.614 --> 00:06:55.582 align:middle line:-1
现在 它们作为弹出菜单

00:06:55.649 --> 00:06:56.950 align:middle line:-1
出现在屏幕上

00:07:00.687 --> 00:07:03.957 align:middle line:-1
甚至可以为通知添加手势识别功能

00:07:04.024 --> 00:07:06.527 align:middle line:-2
但是你应该知道
系统手势的优先级

00:07:06.593 --> 00:07:10.564 align:middle line:-2
高于你在同一区域
添加的任何手势

00:07:16.436 --> 00:07:18.805 align:middle line:-1
在设计通知界面之后

00:07:18.872 --> 00:07:20.841 align:middle line:-1
在代码中设置交互控件

00:07:20.908 --> 00:07:24.778 align:middle line:-2
类似于app中的
交互控件设置方式

00:07:25.279 --> 00:07:26.180 align:middle line:-1
在这里可以看到

00:07:26.246 --> 00:07:30.217 align:middle line:-1
我在动态交互式界面中

00:07:30.284 --> 00:07:32.119 align:middle line:-1
添加向上按钮的操作

00:07:32.186 --> 00:07:34.788 align:middle line:-1
每点击按钮一次

00:07:34.855 --> 00:07:36.490 align:middle line:-1
时间将会增加15分钟

00:07:39.026 --> 00:07:40.594 align:middle line:-1
在点击这些按钮时

00:07:40.661 --> 00:07:43.030 align:middle line:-2
你可能已经忘记
在点击时 通知功能

00:07:43.096 --> 00:07:45.566 align:middle line:-1
始终会启动你的app

00:07:46.233 --> 00:07:51.338 align:middle line:-2
对于常规动态和静态通知
的确是这样的

00:07:51.572 --> 00:07:53.640 align:middle line:-1
但是对于动态交互式通知

00:07:53.707 --> 00:07:56.243 align:middle line:-1
我们必须禁止此行为

00:07:56.310 --> 00:07:58.045 align:middle line:-1
因为现在我们设置了交互控件

00:07:59.079 --> 00:08:01.882 align:middle line:-2
如有必要
仍然可以在交互式通知中

00:07:59.079 --> 00:08:01.882 align:middle line:-2
如有必要
仍然可以在交互式通知中

00:08:01.949 --> 00:08:02.850 align:middle line:-1
启动你的app

00:08:02.916 --> 00:08:06.019 align:middle line:-2
你必须进行显式操作
调用一个新方法

00:08:06.353 --> 00:08:08.789 align:middle line:-2
performNotification
DefaultAction

00:08:11.758 --> 00:08:15.028 align:middle line:-2
同样地 如果在通知界面中
加入一个按钮

00:08:15.095 --> 00:08:17.931 align:middle line:-1
这个按钮在接受操作之后

00:08:18.198 --> 00:08:19.099 align:middle line:-1
如同本例中所做的那样

00:08:19.166 --> 00:08:21.902 align:middle line:-2
我们点击“延长”按钮
这应该会撤消通知

00:08:21.969 --> 00:08:24.671 align:middle line:-1
延长我的租赁时间并且撤消通知

00:08:25.072 --> 00:08:27.708 align:middle line:0
应该在按钮IB操作函数末尾

00:08:27.774 --> 00:08:31.011 align:middle line:0
调用
performDismissAction

00:08:34.047 --> 00:08:37.251 align:middle line:-1
还可以使用标准操作按钮

00:08:37.317 --> 00:08:38.652 align:middle line:-1
处理更改和通知正文

00:08:39.119 --> 00:08:41.889 align:middle line:-1
因为操作按钮始终会撤消通知

00:08:43.657 --> 00:08:45.192 align:middle line:-1
等等 你可能在想

00:08:45.392 --> 00:08:48.529 align:middle line:-1
所有通知界面共享操作按钮

00:08:48.595 --> 00:08:50.764 align:middle line:-1
如果没有交互元素

00:08:50.831 --> 00:08:52.733 align:middle line:-1
那么一些按钮可能没有意义

00:08:53.534 --> 00:08:57.371 align:middle line:-2
作为watchOS 5中的新特性
现在你可以调整在运行时

00:08:57.437 --> 00:08:58.906 align:middle line:-1
显示的操作按钮

00:09:01.341 --> 00:09:05.279 align:middle line:-2
通知界面控制器有一个
新notificationActions属性

00:09:05.345 --> 00:09:06.747 align:middle line:-1
此属性返回操作数组

00:09:06.813 --> 00:09:08.782 align:middle line:-1
并显示给通知

00:09:09.249 --> 00:09:13.720 align:middle line:-1
可以在didReceive notification回调中

00:09:13.787 --> 00:09:15.956 align:middle line:-2
将这个属性设置为
UNNotificationAction对象数组

00:09:16.390 --> 00:09:19.293 align:middle line:-1
这让你能够灵活地添加或删除按钮

00:09:19.359 --> 00:09:21.161 align:middle line:-1
以满足交互界面需求

00:09:23.130 --> 00:09:25.032 align:middle line:-1
在未来版本中

00:09:25.098 --> 00:09:27.668 align:middle line:-2
我们将允许
在调用didReceive notification后

00:09:27.734 --> 00:09:29.903 align:middle line:-1
随时更改操作

00:09:30.304 --> 00:09:33.340 align:middle line:-1
让你能够根据用户的交互操作

00:09:33.407 --> 00:09:35.442 align:middle line:-1
在交互通知界面中

00:09:35.509 --> 00:09:37.744 align:middle line:-1
更改操作按钮

00:09:40.781 --> 00:09:43.483 align:middle line:-1
因此 通知和通知创建方法

00:09:43.550 --> 00:09:45.819 align:middle line:-1
发生了很大的改变

00:09:46.753 --> 00:09:49.890 align:middle line:-1
接下来我还要讲两件事情

00:09:52.392 --> 00:09:55.062 align:middle line:-1
关键报警是一种新类型的通知

00:09:55.128 --> 00:09:58.065 align:middle line:-1
会触发振动和提示音

00:09:58.131 --> 00:10:01.134 align:middle line:-1
即使你的手表处于静音免打扰模式

00:09:58.131 --> 00:10:01.134 align:middle line:-1
即使你的手表处于静音免打扰模式

00:10:01.568 --> 00:10:04.738 align:middle line:-2
因此它们可以用于
发送特别紧急的信息

00:10:05.672 --> 00:10:08.475 align:middle line:-2
如果Watch app
与医疗器械相关联

00:10:08.542 --> 00:10:12.546 align:middle line:-2
或者用于紧急事件
这种类型的通知将会适合你

00:10:13.881 --> 00:10:16.683 align:middle line:-1
关键报警需要app授权

00:10:17.217 --> 00:10:19.686 align:middle line:-1
并且获得用户的显式许可

00:10:19.753 --> 00:10:21.855 align:middle line:-1
以区分于常规通知

00:10:24.391 --> 00:10:28.295 align:middle line:-1
与关键报警相反的是静默通知

00:10:28.729 --> 00:10:32.566 align:middle line:-1
通知出现在屏幕上时

00:10:32.633 --> 00:10:34.101 align:middle line:-1
不会打扰用户

00:10:34.468 --> 00:10:38.605 align:middle line:-2
你可以选择直接发送通知到
Notification Center

00:10:39.273 --> 00:10:41.675 align:middle line:-1
你会发现将不会显示图标

00:10:41.742 --> 00:10:43.710 align:middle line:-1
发送的通知

00:10:43.777 --> 00:10:45.812 align:middle line:-1
也位于Notification Center之内

00:10:46.647 --> 00:10:49.116 align:middle line:-1
但是 从屏幕上方扫动

00:10:49.183 --> 00:10:51.051 align:middle line:-1
将会显示静默发送的通知

00:10:56.290 --> 00:10:59.893 align:middle line:-1
如果选择在app中静默发送通知

00:10:59.960 --> 00:11:03.530 align:middle line:-1
你不必在app首次启动时

00:10:59.960 --> 00:11:03.530 align:middle line:-1
你不必在app首次启动时

00:11:03.597 --> 00:11:05.132 align:middle line:-1
提醒用户允许发送通知

00:11:05.966 --> 00:11:08.702 align:middle line:-1
相反 你可以请求临时权限

00:11:09.369 --> 00:11:12.406 align:middle line:-2
这样 用户将会知道
你的app将会

00:11:12.472 --> 00:11:14.808 align:middle line:-1
发送什么类型的通知

00:11:14.875 --> 00:11:17.177 align:middle line:-2
以及他们是否想要
在通知到达时查看通知

00:11:19.413 --> 00:11:21.949 align:middle line:-2
作为开发人员
无论你选择哪个选项

00:11:22.015 --> 00:11:26.119 align:middle line:-2
用户都可以控制
他们接收通知的方式

00:11:26.854 --> 00:11:30.457 align:middle line:-1
可以选择静默发送通知

00:11:30.524 --> 00:11:34.061 align:middle line:-2
在Notification Center
滑扫通知、更改通知

00:11:34.127 --> 00:11:37.197 align:middle line:-1
或更改通知偏好和设置

00:11:41.401 --> 00:11:44.705 align:middle line:-1
总的来说 现在通知变得更加动态

00:11:45.105 --> 00:11:48.976 align:middle line:-2
在通知到达时能够看到
Notification Center

00:11:49.042 --> 00:11:51.578 align:middle line:-1
看到动态界面

00:11:52.379 --> 00:11:56.350 align:middle line:-2
我们还首次在手表上
提供按线程ID分组的功能

00:11:57.251 --> 00:11:59.786 align:middle line:-2
因此 你可以设计
像前面所述的那些动态通知

00:11:59.853 --> 00:12:01.255 align:middle line:-1
与内置的消息app一样

00:11:59.853 --> 00:12:01.255 align:middle line:-1
与内置的消息app一样

00:12:02.556 --> 00:12:04.958 align:middle line:-1
你可以在app发送的通知中

00:12:05.025 --> 00:12:07.861 align:middle line:-1
加入更多的app功能

00:12:07.928 --> 00:12:10.197 align:middle line:-1
利用交互式控件和操作按钮

00:12:10.264 --> 00:12:11.698 align:middle line:-1
可以在运行时定义它们

00:12:12.766 --> 00:12:15.302 align:middle line:-1
还可以选择所发送通知的

00:12:15.369 --> 00:12:17.471 align:middle line:-1
紧急级别

00:12:18.572 --> 00:12:20.741 align:middle line:-1
要了解关于通知的更多信息

00:12:22.209 --> 00:12:24.678 align:middle line:-1
可以参加一个演讲

00:12:25.145 --> 00:12:27.848 align:middle line:-2
我强烈建议参加
“设计通知”演讲

00:12:28.115 --> 00:12:30.817 align:middle line:-1
这个演讲将会介绍一些不错的技巧

00:12:30.884 --> 00:12:33.153 align:middle line:-2
指导你们设计
高效率的交互式通知

00:12:36.924 --> 00:12:37.858 align:middle line:-1
好的

00:12:37.925 --> 00:12:41.361 align:middle line:-1
我们已经讨论了通知功能

00:12:41.428 --> 00:12:43.230 align:middle line:-1
现在让我们把注意力转向

00:12:43.297 --> 00:12:46.366 align:middle line:-2
一些新的特性
它们帮你设计具有吸引力的app

00:12:47.334 --> 00:12:50.103 align:middle line:-1
首先来看本地声音播放

00:12:52.039 --> 00:12:55.475 align:middle line:-2
你们一些人曾经尝试过
在手表上播放音频

00:12:55.542 --> 00:12:59.246 align:middle line:-1
利用URL会话下载文件到手表

00:12:59.313 --> 00:13:02.316 align:middle line:-2
然后使用WKAudioFileQueuePlayer
进行播放

00:12:59.313 --> 00:13:02.316 align:middle line:-2
然后使用WKAudioFileQueuePlayer
进行播放

00:13:03.417 --> 00:13:06.553 align:middle line:-2
在watchOS 5中
我们简化了手表的

00:13:06.620 --> 00:13:08.255 align:middle line:-1
音频app开发工作

00:13:08.322 --> 00:13:11.024 align:middle line:-1
带来更好的使用体验

00:13:13.327 --> 00:13:16.163 align:middle line:-2
在watchOS 5中
我们提供一个新的背景模式

00:13:16.230 --> 00:13:18.165 align:middle line:-1
用于播放本地音乐文件

00:13:18.532 --> 00:13:21.768 align:middle line:-1
现在你可以专注于app的主要用途

00:13:21.835 --> 00:13:25.772 align:middle line:-2
即音频
让你能够开发

00:13:25.939 --> 00:13:29.109 align:middle line:-1
单纯的音频播放app

00:13:35.382 --> 00:13:39.486 align:middle line:-2
我们还提供直接AVAudioPlayer
和AVAudioEngine API访问

00:13:39.553 --> 00:13:41.855 align:middle line:-2
这意味着你可以使用
你已经很熟悉的

00:13:41.922 --> 00:13:43.357 align:middle line:-1
方法和属性

00:13:43.423 --> 00:13:46.326 align:middle line:-1
如果你开发iOS音频播放app

00:13:46.827 --> 00:13:50.831 align:middle line:-2
事实上 你可以在
iOS app和Watch app之间共享代码

00:13:50.898 --> 00:13:53.634 align:middle line:-2
通过将回放相关代码
迁移到框架

00:13:55.002 --> 00:13:57.171 align:middle line:-1
不同于iOS的是

00:13:58.172 --> 00:14:00.440 align:middle line:-1
在手表上播放长格式音频

00:13:58.172 --> 00:14:00.440 align:middle line:-1
在手表上播放长格式音频

00:14:00.507 --> 00:14:04.545 align:middle line:-1
需要耳机或外置扬声器

00:14:04.611 --> 00:14:07.181 align:middle line:-1
与内置音乐app播放音频一样

00:14:08.248 --> 00:14:12.419 align:middle line:-2
因此 蓝牙路由
是会话激活过程的一部分

00:14:12.486 --> 00:14:15.822 align:middle line:-1
如果将路由共享规则设置为长格式

00:14:17.257 --> 00:14:21.128 align:middle line:-2
将会通过Apple无线芯片
自动连接到耳机

00:14:21.195 --> 00:14:23.797 align:middle line:-2
例如AirPods
或Beats Studio 3

00:14:24.064 --> 00:14:25.365 align:middle line:-1
如果它们正在使用之中

00:14:25.699 --> 00:14:29.269 align:middle line:-2
将会显示一个路由选择器
让用户选择其他耳机

00:14:29.336 --> 00:14:30.671 align:middle line:-1
或蓝牙扬声器

00:14:30.737 --> 00:14:34.374 align:middle line:-2
当你在会话中调用activateWithOptions
completion API时

00:14:34.441 --> 00:14:35.342 align:middle line:-1
这是一项新特性

00:14:38.278 --> 00:14:41.381 align:middle line:-2
也可以使用
MPNowPlayingInfoCenter API

00:14:41.448 --> 00:14:43.283 align:middle line:-1
将app的播放信息

00:14:43.584 --> 00:14:45.919 align:middle line:-2
推送给
nowPlaying app

00:14:45.986 --> 00:14:50.157 align:middle line:-2
这意味着 你的app信息将会显示在
nowPlaying通知栏中

00:14:53.260 --> 00:14:55.062 align:middle line:-1
你可以处理你的app

00:14:55.128 --> 00:14:56.563 align:middle line:-1
媒体远程控制指令

00:14:56.763 --> 00:14:58.298 align:middle line:-1
例如播放 暂停

00:14:58.632 --> 00:15:00.033 align:middle line:-1
上一曲 下一曲

00:14:58.632 --> 00:15:00.033 align:middle line:-1
上一曲 下一曲

00:15:00.267 --> 00:15:02.102 align:middle line:-1
甚至点赞和吐槽

00:15:05.405 --> 00:15:06.440 align:middle line:-1
最后同样重要的是

00:15:06.507 --> 00:15:10.577 align:middle line:-2
现在可以在你的自定义
回放用户界面中控制音量

00:15:10.978 --> 00:15:12.646 align:middle line:-1
界面构建器对象库中

00:15:13.113 --> 00:15:15.883 align:middle line:-1
提供新的音量控制视图

00:15:19.686 --> 00:15:23.624 align:middle line:-2
在静止时 控件自动使用
app的颜色

00:15:23.690 --> 00:15:26.026 align:middle line:-1
当转动数码表冠时

00:15:26.193 --> 00:15:27.895 align:middle line:-1
会响应系统音量

00:15:27.961 --> 00:15:29.429 align:middle line:-1
控制中的颜色变化

00:15:32.332 --> 00:15:36.670 align:middle line:-2
有一个演讲专门介绍
创建watchOS音频app

00:15:36.737 --> 00:15:41.475 align:middle line:-2
强烈建议你们参加此演讲
了解新API的详细信息

00:15:41.542 --> 00:15:43.744 align:middle line:-1
最佳的音频处理方法

00:15:44.278 --> 00:15:46.813 align:middle line:-1
我们还准备在星期四

00:15:46.880 --> 00:15:50.117 align:middle line:-2
讨论watchOS运行时
背景音频和连通性实验室

00:15:52.753 --> 00:15:55.722 align:middle line:-1
如果app的主要功能不是播放音频

00:15:55.789 --> 00:15:58.759 align:middle line:-2
但是你的app将受益于
在系统其它位置上

00:15:58.825 --> 00:16:00.360 align:middle line:-1
控制音频的功能

00:15:58.825 --> 00:16:00.360 align:middle line:-1
控制音频的功能

00:16:00.561 --> 00:16:02.462 align:middle line:-1
无论是在Watch或手机上

00:16:03.497 --> 00:16:06.600 align:middle line:-2
比如在锻炼app中
在锻炼时 你可以左扫动

00:16:06.667 --> 00:16:08.168 align:middle line:-1
看到nowPlaying控件

00:16:08.702 --> 00:16:12.206 align:middle line:-2
现在你们能够将
nowPlayingView

00:16:12.272 --> 00:16:14.408 align:middle line:-1
嵌入你们的app

00:16:16.643 --> 00:16:19.012 align:middle line:-2
你可以在对象库
和界面构建器中找到

00:16:19.079 --> 00:16:20.214 align:middle line:-1
nowPlayingView

00:16:20.914 --> 00:16:23.016 align:middle line:-1
它将会铺满屏幕

00:16:23.083 --> 00:16:25.419 align:middle line:-1
适应各种页面布局app

00:16:26.687 --> 00:16:29.089 align:middle line:-2
nowPlayingView
是系统级控件

00:16:29.156 --> 00:16:32.092 align:middle line:-1
用于控制来自于其它app的音频

00:16:32.159 --> 00:16:34.761 align:middle line:-1
它会显示用户正在听什么

00:16:34.828 --> 00:16:36.830 align:middle line:-2
在Apple Watch
还是在iPhone上

00:16:39.867 --> 00:16:42.936 align:middle line:-1
这里我想介绍其他一些新选项

00:16:43.003 --> 00:16:44.671 align:middle line:-1
和行为变化

00:16:45.305 --> 00:16:49.476 align:middle line:-2
在以前版本的watchOS中
如果添加一个38毫米资产

00:16:49.543 --> 00:16:53.080 align:middle line:-2
但是忘记为42毫米设备
添加同样的资产

00:16:53.447 --> 00:16:55.949 align:middle line:-1
大尺寸设备上将会丢失资产

00:16:56.683 --> 00:16:59.987 align:middle line:-2
现在 资产将会自动
缩小到38毫米尺寸

00:17:00.053 --> 00:17:02.489 align:middle line:-1
如果没有42毫米尺寸

00:17:04.223 --> 00:17:07.895 align:middle line:-1
也不需要提供不同的尺寸

00:17:07.961 --> 00:17:11.098 align:middle line:-1
相反 你只需要

00:17:11.164 --> 00:17:14.367 align:middle line:-2
在资产类型全局选择中
添加一个PDF

00:17:14.434 --> 00:17:17.905 align:middle line:-2
将新的“自动缩放”选项
设置为自动

00:17:23.877 --> 00:17:27.047 align:middle line:0
这样 将会在合适的时间

00:17:27.114 --> 00:17:28.248 align:middle line:0
和合适的位置
显示尺寸合适的资产

00:17:30.651 --> 00:17:34.988 align:middle line:-2
我们还在字体菜单中提供
标题文本样式 让你有更多的选项

00:17:35.055 --> 00:17:38.392 align:middle line:-1
以多样化显示界面文本

00:17:39.226 --> 00:17:42.095 align:middle line:-1
这些文本样式兼容动态字体格式

00:17:42.162 --> 00:17:44.364 align:middle line:-1
可以变大或变小

00:17:44.431 --> 00:17:48.035 align:middle line:-2
用户可以更改字体大小和设置
它们可以按比例缩放

00:17:49.970 --> 00:17:53.607 align:middle line:-1
我们通过界面生成器和API

00:17:53.674 --> 00:17:54.808 align:middle line:-1
大标题样式

00:17:58.779 --> 00:18:01.915 align:middle line:-1
我在开发一个滑雪锻炼app

00:17:58.779 --> 00:18:01.915 align:middle line:-1
我在开发一个滑雪锻炼app

00:18:01.982 --> 00:18:04.117 align:middle line:-1
正好可以借此机会讨论

00:18:04.184 --> 00:18:06.286 align:middle line:-2
我们针对watchOS 5
锻炼功能所进行的改进

00:18:07.521 --> 00:18:10.457 align:middle line:-2
在本版本中 我们完全重写了
Workout API

00:18:10.524 --> 00:18:14.061 align:middle line:-2
使它变得更简单
更可靠和更具有灵活性

00:18:14.461 --> 00:18:17.631 align:middle line:-2
我们通过一个内置
锻炼app来使用这个API

00:18:18.565 --> 00:18:21.134 align:middle line:-1
希望你们的锻炼app也使用它

00:18:23.370 --> 00:18:27.541 align:middle line:-1
现在 更容易开始锻炼和收集数据

00:18:27.608 --> 00:18:30.777 align:middle line:-1
在HK锻炼会话中

00:18:30.844 --> 00:18:32.746 align:middle line:-1
使用新的初始化函数

00:18:32.813 --> 00:18:34.548 align:middle line:-1
新的Workout Builder API

00:18:36.016 --> 00:18:37.551 align:middle line:-1
创建锻炼会话

00:18:38.252 --> 00:18:41.655 align:middle line:-2
从会话中获得生成器
然后开始收集数据

00:18:42.022 --> 00:18:43.223 align:middle line:-1
就是这么简单

00:18:44.424 --> 00:18:47.461 align:middle line:-1
代码是这样的

00:18:47.528 --> 00:18:50.063 align:middle line:-1
你使用healthStore

00:18:50.130 --> 00:18:51.899 align:middle line:-2
和workoutConfiguration
创建并且配置一个会话

00:18:51.965 --> 00:18:53.600 align:middle line:-1
包括活动类别

00:18:54.935 --> 00:18:58.572 align:middle line:-2
获取与会话关联的
HK Live Workout实时锻炼生成器

00:18:59.373 --> 00:19:00.741 align:middle line:-1
然后开始收集数据

00:18:59.373 --> 00:19:00.741 align:middle line:-1
然后开始收集数据

00:19:02.042 --> 00:19:05.779 align:middle line:-1
将会自动收集锻炼相关数据

00:19:05.846 --> 00:19:08.248 align:middle line:-1
即使发生暂停和恢复

00:19:08.315 --> 00:19:12.186 align:middle line:-2
从而提供正确和一致的
HK锻炼信息

00:19:12.252 --> 00:19:13.921 align:middle line:-1
以及正确的锻炼时间

00:19:16.323 --> 00:19:18.292 align:middle line:-1
任何app都不是完美的

00:19:18.692 --> 00:19:21.828 align:middle line:-2
如果在活跃锻炼会话期间
你的app崩溃

00:19:21.895 --> 00:19:23.797 align:middle line:-1
将会自动重新启动

00:19:28.268 --> 00:19:31.972 align:middle line:-2
只需使用HKHealthStore
recoverActiveWorkoutSession

00:19:32.039 --> 00:19:32.873 align:middle line:-1
API

00:19:32.940 --> 00:19:37.477 align:middle line:-2
会话和生成器
就会还原到先前状态

00:19:40.314 --> 00:19:42.916 align:middle line:-2
如果想要详细了解
新的Workout API

00:19:42.983 --> 00:19:45.686 align:middle line:-1
以及健康和健身数据收集方法

00:19:45.752 --> 00:19:47.988 align:middle line:-2
可以查阅
新的Workout使用方法

00:19:48.255 --> 00:19:52.059 align:middle line:-2
或参加明天下午的健康和
健身技术实验室

00:19:54.995 --> 00:19:55.896 align:middle line:-1
接下来

00:19:56.063 --> 00:19:57.764 align:middle line:-2
通过使用
Siri Shortcuts

00:19:57.831 --> 00:20:00.501 align:middle line:-2
现在你的app
在Siri表盘上有一个显示位置

00:19:57.831 --> 00:20:00.501 align:middle line:-2
现在你的app
在Siri表盘上有一个显示位置

00:20:01.435 --> 00:20:02.936 align:middle line:-1
在Keynote演讲中已经讲过

00:20:03.070 --> 00:20:06.006 align:middle line:-2
Siri Shortcuts
是为了帮助用户更轻松完成

00:20:06.073 --> 00:20:09.443 align:middle line:-1
他们经常执行的任务

00:20:10.944 --> 00:20:14.014 align:middle line:-1
在Siri表盘上…常用任务

00:20:14.081 --> 00:20:15.782 align:middle line:-1
出现在合适的位置和时间

00:20:15.916 --> 00:20:18.685 align:middle line:-1
开发人员只需要很少的工作

00:20:19.586 --> 00:20:21.488 align:middle line:-2
我想重点介绍
如何使用Shortcuts

00:20:21.555 --> 00:20:24.892 align:middle line:-2
来提供良好的手表体验
使用体验的差异取决于

00:20:24.958 --> 00:20:27.227 align:middle line:-1
是否安装了app

00:20:29.463 --> 00:20:31.932 align:middle line:-2
首先来看
良好的快捷方式是什么样的

00:20:33.166 --> 00:20:36.403 align:middle line:-2
顾名思义 快捷方式是
为了帮助手表用户

00:20:36.503 --> 00:20:40.107 align:middle line:-2
看到有用的信息
快速执行常用任务

00:20:40.674 --> 00:20:41.842 align:middle line:-1
无论任务是否会

00:20:41.909 --> 00:20:44.344 align:middle line:-2
在特定屏幕上启动app
显示预设定的选项

00:20:44.845 --> 00:20:47.648 align:middle line:-1
或获得令人满意的app执行结果

00:20:47.714 --> 00:20:51.418 align:middle line:-2
例如订购早餐咖啡
预订餐厅桌席

00:20:51.485 --> 00:20:53.587 align:middle line:-1
或补充你的巧克力供应

00:20:54.721 --> 00:20:58.392 align:middle line:-2
信息一目了然
只需要一两次点击操作

00:21:00.928 --> 00:21:04.364 align:middle line:-2
快捷方式以用户活动或
用户意图为基础

00:21:05.032 --> 00:21:07.568 align:middle line:-2
如果需要启动app
并进入特定上下文

00:21:07.634 --> 00:21:10.037 align:middle line:-1
例如 直接进入屏幕界面

00:21:10.571 --> 00:21:12.239 align:middle line:-1
记录他们的饮食量

00:21:12.306 --> 00:21:14.408 align:middle line:-1
这时适合使用

00:21:14.474 --> 00:21:15.876 align:middle line:-1
基于用户活动的快捷方式

00:21:18.111 --> 00:21:20.314 align:middle line:-1
对于不需要启动app的任务

00:21:20.380 --> 00:21:23.717 align:middle line:-1
例如 经常性的咖啡订购

00:21:23.784 --> 00:21:25.953 align:middle line:-2
则更适合使用
基于用户意图的快捷方式

00:21:26.887 --> 00:21:28.822 align:middle line:-1
如果你的快捷方式是基于意图的

00:21:28.889 --> 00:21:31.825 align:middle line:-2
当你在Siri界面上
点击快捷方式盘面时

00:21:31.892 --> 00:21:33.927 align:middle line:-1
将会显示快速确认屏幕

00:21:34.795 --> 00:21:36.563 align:middle line:-1
你想要订购咖啡吗？

00:21:37.197 --> 00:21:39.600 align:middle line:-1
如果支持后台运行

00:21:39.666 --> 00:21:42.903 align:middle line:-2
在用户确认后
将会运行 而不启动app

00:21:43.437 --> 00:21:46.240 align:middle line:-2
如果不支持后台运行
将会启动或恢复app

00:21:46.306 --> 00:21:47.608 align:middle line:-1
执行你的意图

00:21:50.010 --> 00:21:52.379 align:middle line:-1
在预测快捷方式的显示内容时

00:21:52.446 --> 00:21:55.716 align:middle line:-1
考虑了用户以往的app交互方式

00:21:56.316 --> 00:21:58.719 align:middle line:-1
在用户执行app的主要功能时

00:21:58.785 --> 00:22:01.388 align:middle line:-1
你应该记录用户的意图或操作

00:21:58.785 --> 00:22:01.388 align:middle line:-1
你应该记录用户的意图或操作

00:22:02.089 --> 00:22:06.493 align:middle line:-1
像Audible这样的音频app

00:22:06.560 --> 00:22:10.764 align:middle line:-2
当用户开始或播放音频列表时
将会记录IN媒体和音频播放意图

00:22:13.934 --> 00:22:17.404 align:middle line:-2
Siri表盘上的快捷方式界面
以信息相关性为基础

00:22:17.604 --> 00:22:21.108 align:middle line:-1
最相关的项目显示在最上方

00:22:21.175 --> 00:22:22.943 align:middle line:-1
不相关的项目显示在下方

00:22:24.878 --> 00:22:28.182 align:middle line:-2
以往的用户交互意图
无论是否已执行或记录的

00:22:28.582 --> 00:22:30.083 align:middle line:-1
以及记录的用户活动

00:22:30.150 --> 00:22:33.987 align:middle line:-1
都会用于搜索和预测

00:22:34.388 --> 00:22:35.556 align:middle line:-1
并且表明相关性

00:22:36.190 --> 00:22:38.058 align:middle line:-1
但是 如果要显示在Siri表盘上

00:22:38.125 --> 00:22:40.527 align:middle line:-1
必须提供明确的系统提示

00:22:40.594 --> 00:22:42.729 align:middle line:-1
通过创建相关的快捷方式

00:22:42.996 --> 00:22:44.498 align:middle line:-2
告知在什么时候
或位置显示快捷方式

00:22:47.034 --> 00:22:48.435 align:middle line:-1
相关快捷方式包括

00:22:48.502 --> 00:22:51.238 align:middle line:-2
基于用户活动或意图的
Siri Shortcuts

00:22:51.605 --> 00:22:55.042 align:middle line:-2
一个可选的手表模板
定义快捷方式盘面上将会显示

00:22:55.108 --> 00:22:57.511 align:middle line:-1
标题、副标题和图片

00:22:58.178 --> 00:23:01.849 align:middle line:-2
和一个相关性解释器
说明在什么时间、位置

00:22:58.178 --> 00:23:01.849 align:middle line:-2
和一个相关性解释器
说明在什么时间、位置

00:23:01.915 --> 00:23:05.185 align:middle line:-2
或情况下
应该显示快捷方式

00:23:07.554 --> 00:23:10.724 align:middle line:-2
我们已经讨论基于
用户活动和用户意图的快捷方式

00:23:10.791 --> 00:23:13.861 align:middle line:-2
现在来看相关性快捷方式
的另外两个方面

00:23:16.296 --> 00:23:20.067 align:middle line:-2
手表模块是一个可选的
IN默认卡片模板

00:23:20.133 --> 00:23:24.137 align:middle line:-1
包括标题、可选标题和可选图片

00:23:24.905 --> 00:23:28.842 align:middle line:-2
如果你不提供手表模板
我们将通过IN快捷方式

00:23:28.909 --> 00:23:30.310 align:middle line:-1
提供必要的信息

00:23:30.577 --> 00:23:34.281 align:middle line:-1
但是你应该提供信息字符串

00:23:34.348 --> 00:23:37.851 align:middle line:-2
这样 当用户点击快捷方式盘面时
就知道他们将会获取什么内容

00:23:40.721 --> 00:23:44.591 align:middle line:-2
相关性解释器说明
在什么时间、地点或情况下

00:23:44.658 --> 00:23:46.560 align:middle line:-1
快捷方式最具有价值

00:23:47.594 --> 00:23:50.731 align:middle line:-2
考虑一下在什么时候和地点
将会需要你的快捷方式

00:23:51.131 --> 00:23:55.335 align:middle line:-2
是用户随时需要查看
或点击的信息吗？

00:23:56.003 --> 00:23:58.472 align:middle line:-2
还是仅在特定日期和时间
才需要这些信息？

00:23:59.173 --> 00:24:00.874 align:middle line:-1
或者与位置有关？

00:23:59.173 --> 00:24:00.874 align:middle line:-1
或者与位置有关？

00:24:02.776 --> 00:24:05.846 align:middle line:-2
由于相关性快捷方式
使用一组相关性解释器

00:24:06.213 --> 00:24:08.682 align:middle line:-1
因此可以指定多种相关性

00:24:09.016 --> 00:24:13.187 align:middle line:-2
例如 可以为快捷方式
指定时间和地点相关性

00:24:15.722 --> 00:24:19.193 align:middle line:-1
这些相关性解释器会提醒系统

00:24:19.660 --> 00:24:21.695 align:middle line:-1
当用户与你的内容交互时

00:24:21.995 --> 00:24:24.131 align:middle line:-1
系统会记录用户的操作

00:24:24.798 --> 00:24:27.201 align:middle line:-2
如果用户没有与Siri界面上
显示的快捷方式

00:24:27.267 --> 00:24:30.137 align:middle line:-2
进行交互
将会取消相关性

00:24:32.840 --> 00:24:34.474 align:middle line:-1
在你创建快捷方式后

00:24:34.541 --> 00:24:37.811 align:middle line:-2
接下来需要把它们放入
相关性快捷方式库

00:24:37.945 --> 00:24:40.414 align:middle line:-1
Siri表盘将选择性使用它们

00:24:41.415 --> 00:24:45.819 align:middle line:-2
iOS app和Watch app
都可以提供快捷方式

00:24:46.887 --> 00:24:50.924 align:middle line:-2
iOS相关性快捷方式定期
从iPhone同步到Apple Watch

00:24:51.325 --> 00:24:54.828 align:middle line:-2
在显示手表相关快捷方式时
可能会对它们进行合并

00:24:56.029 --> 00:24:58.465 align:middle line:-1
如果你的手表支持iOS快捷方式

00:24:58.665 --> 00:25:00.501 align:middle line:-1
Watch app将会处理执行

00:24:58.665 --> 00:25:00.501 align:middle line:-1
Watch app将会处理执行

00:25:01.235 --> 00:25:04.171 align:middle line:-2
如果不支持
或者未安装Watch app

00:25:05.706 --> 00:25:08.575 align:middle line:-2
将通过英特网
在手机上执行快捷方式

00:25:11.411 --> 00:25:15.182 align:middle line:-2
相关性快捷方式
可以显示在Siri表盘上

00:25:15.249 --> 00:25:20.320 align:middle line:-2
而不需要watchOS支持
如果它们是基于意图的快捷方式

00:25:20.721 --> 00:25:22.456 align:middle line:-1
并且支持后台运行

00:25:22.756 --> 00:25:25.225 align:middle line:-1
可以运行 而不需要

00:25:25.526 --> 00:25:26.727 align:middle line:-1
访问单独的加密数据

00:25:28.095 --> 00:25:32.266 align:middle line:-2
再次说明 这些快捷方式将会
通过英特网在iPhone上执行

00:25:32.733 --> 00:25:35.636 align:middle line:-2
Watch app始终能够带来
最丰富的用户体验

00:25:35.702 --> 00:25:37.504 align:middle line:-1
可以本地处理快捷方式

00:25:37.804 --> 00:25:39.273 align:middle line:-1
通过启动app

00:25:39.473 --> 00:25:42.009 align:middle line:-1
或者在后台执行意图

00:25:44.144 --> 00:25:47.114 align:middle line:-2
你应该定期更新
你的相关性快捷方式

00:25:47.681 --> 00:25:49.316 align:middle line:-1
如果用户启动你的app

00:25:49.750 --> 00:25:52.452 align:middle line:-2
例如在Siri界面
点击一个快捷方式

00:25:53.053 --> 00:25:55.622 align:middle line:-1
运行时将会完成更新

00:25:56.323 --> 00:25:58.458 align:middle line:-1
提供即视信息的快捷方式

00:25:58.525 --> 00:26:00.861 align:middle line:-2
对于用户来说很有用
它们无需启动app

00:25:58.525 --> 00:26:00.861 align:middle line:-2
对于用户来说很有用
它们无需启动app

00:26:01.228 --> 00:26:04.331 align:middle line:-2
回忆一下前面的饮食
和天气app例子

00:26:04.598 --> 00:26:05.632 align:middle line:-1
只需要看一下表盘

00:26:05.699 --> 00:26:08.669 align:middle line:-1
就可知道温度是72度 多云

00:26:08.902 --> 00:26:09.736 align:middle line:-1
不必进行点击

00:26:11.238 --> 00:26:12.573 align:middle line:-1
为了更好实现这个功能

00:26:12.906 --> 00:26:15.075 align:middle line:-1
我们添加了一个后台刷新任务：

00:26:15.142 --> 00:26:18.111 align:middle line:-2
WKRelevantShortcut
RefreshBackgroundTask

00:26:19.179 --> 00:26:22.783 align:middle line:-2
当你使用此任务时
应该检查你的数据是否需要更新

00:26:22.850 --> 00:26:26.119 align:middle line:-1
然后提供新的相关性快捷方式

00:26:27.421 --> 00:26:29.423 align:middle line:-1
在安排这些后台任务时

00:26:29.489 --> 00:26:31.391 align:middle line:-1
我们会考虑用户活动

00:26:31.625 --> 00:26:35.095 align:middle line:-1
和信息查看次数

00:26:38.699 --> 00:26:42.703 align:middle line:-2
如果基于意图的快捷方式
当app在后台运行时

00:26:42.769 --> 00:26:45.072 align:middle line:-2
快捷方式的意图
可能会更新app

00:26:46.540 --> 00:26:49.710 align:middle line:-1
由于意图扩展是一个独立于

00:26:49.776 --> 00:26:51.178 align:middle line:-1
WatchKit扩展的过程

00:26:51.445 --> 00:26:54.748 align:middle line:-2
现在我们提供一个
新的刷新后台任务 名为

00:26:54.815 --> 00:26:57.985 align:middle line:-2
WKIntentDidRun
RefreshBackgroundTask

00:26:58.418 --> 00:27:02.656 align:middle line:-2
以运行你的主扩展
并且在你的意图执行之后

00:26:58.418 --> 00:27:02.656 align:middle line:-2
以运行你的主扩展
并且在你的意图执行之后

00:27:02.723 --> 00:27:06.293 align:middle line:-1
更新任何可能过时的快照或通知内容

00:27:09.029 --> 00:27:12.766 align:middle line:-2
现在 只需要转动手腕
点击就可以看到快捷方式

00:27:13.867 --> 00:27:16.737 align:middle line:-2
你应该知道 用户可以在
手机上设置快捷方式短语

00:27:16.803 --> 00:27:19.339 align:middle line:-1
使用它们随时执行快捷方式

00:27:20.507 --> 00:27:23.076 align:middle line:-2
这些快捷方式短语
被同步到Apple Watch

00:27:23.143 --> 00:27:25.946 align:middle line:-1
这样你可以进行方便的操作

00:27:26.013 --> 00:27:28.715 align:middle line:-1
比如说 在菲尔咖啡

00:27:28.782 --> 00:27:31.785 align:middle line:-1
订购薄荷味莫吉托咖啡

00:27:33.220 --> 00:27:36.690 align:middle line:-2
不需要在Siri表盘上显示
快捷方式界面

00:27:36.857 --> 00:27:39.660 align:middle line:-2
就可以使用快捷方式短语
调用你的快捷方式

00:27:41.662 --> 00:27:46.300 align:middle line:-2
总结一下 你们可以使用
Siri Shortcuts

00:27:46.366 --> 00:27:48.302 align:middle line:-1
提供相关的信息

00:27:49.236 --> 00:27:52.973 align:middle line:-2
在iPhone和Apple Watch上
创建相关性快捷方式

00:27:53.040 --> 00:27:54.508 align:middle line:-1
将它们添加到快捷方式库

00:27:54.575 --> 00:27:56.777 align:middle line:-2
从而可以在Siri表盘上
选择性使用它们

00:27:57.644 --> 00:28:02.049 align:middle line:-2
最后 你的watchOS app
将会为用户带来最佳使用体验

00:27:57.644 --> 00:28:02.049 align:middle line:-2
最后 你的watchOS app
将会为用户带来最佳使用体验

00:28:02.649 --> 00:28:05.853 align:middle line:-2
他们能够在手表上
使用快捷方式做更多的事情

00:28:07.688 --> 00:28:09.890 align:middle line:-2
如果想要详细了解
Siri Shortcuts

00:28:10.457 --> 00:28:13.493 align:middle line:-1
建议你们观看一个演讲或实验室

00:28:14.361 --> 00:28:18.298 align:middle line:-2
尤其是关于Siri表盘上的
快捷方式的演讲

00:28:18.365 --> 00:28:22.035 align:middle line:-2
此演讲更详细地讲解
今天我提到的API

00:28:24.771 --> 00:28:26.940 align:middle line:-1
今天我们讲了很多的内容

00:28:27.641 --> 00:28:28.575 align:middle line:-1
这是我们讲过的内容

00:28:29.343 --> 00:28:33.580 align:middle line:-2
希望你们通过创建
动态交互式通知界面

00:28:33.814 --> 00:28:37.518 align:middle line:-2
使你们的通知更有吸引力
支持更多交互操作

00:28:38.585 --> 00:28:41.021 align:middle line:-2
现在 使用AV基础API
媒体远程控制指令

00:28:41.088 --> 00:28:44.391 align:middle line:-1
可以在后台播放音频

00:28:44.458 --> 00:28:46.159 align:middle line:-1
访问nowPlaying信息

00:28:47.461 --> 00:28:49.997 align:middle line:-2
利用新的
Workout Builder API

00:28:50.063 --> 00:28:52.032 align:middle line:-1
可以增强锻炼app的可靠性

00:28:52.933 --> 00:28:55.502 align:middle line:-1
通过创建相关性快捷方式

00:28:55.569 --> 00:28:57.471 align:middle line:-2
可以在Siri表盘上
提供有价值的信息

00:28:59.940 --> 00:29:02.676 align:middle line:-1
如果对今天的内容

00:28:59.940 --> 00:29:02.676 align:middle line:-1
如果对今天的内容

00:29:03.043 --> 00:29:05.012 align:middle line:-1
或你的watchOS开发工作

00:29:05.412 --> 00:29:08.348 align:middle line:-2
有任何疑问
请拜访我们的实验室

00:29:08.715 --> 00:29:10.684 align:middle line:-1
我们想要看看你在做些什么

00:29:11.051 --> 00:29:13.887 align:middle line:-2
欢迎来访
祝你们在WWDC上收获良多
