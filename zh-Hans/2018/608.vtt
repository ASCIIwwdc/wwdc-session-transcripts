WEBVTT

00:00:07.516 --> 00:00:15.500 A:middle
[ 音乐 ]

00:00:21.516 --> 00:00:26.116 A:middle
[ 掌声 ]

00:00:26.616 --> 00:00:27.566 A:middle
&gt;&gt; 大家好

00:00:27.926 --> 00:00:28.396 A:middle
欢迎你们

00:00:29.436 --> 00:00:30.756 A:middle
今天我非常激动

00:00:30.756 --> 00:00:31.066 A:middle
来到这里

00:00:31.606 --> 00:00:32.716 A:middle
让我们开始吧

00:00:34.046 --> 00:00:35.946 A:middle
着色器是图形的重要部分

00:00:35.946 --> 00:00:37.906 A:middle
它们能帮助你

00:00:37.956 --> 00:00:41.166 A:middle
开发好看的游戏和 App

00:00:41.506 --> 00:00:42.996 A:middle
考虑到大规模并行

00:00:42.996 --> 00:00:45.026 A:middle
执行环境

00:00:45.026 --> 00:00:46.306 A:middle
使用着色器非常不容易

00:00:47.076 --> 00:00:48.076 A:middle
在开发过程中

00:00:48.076 --> 00:00:49.556 A:middle
很多事可能会出错

00:00:49.556 --> 00:00:51.886 A:middle
即便你

00:00:51.886 --> 00:00:53.236 A:middle
纠正了错误

00:00:53.296 --> 00:00:54.406 A:middle
它们还必须运行得很快

00:00:55.446 --> 00:00:57.426 A:middle
我叫 Alp 今天我将

00:00:57.626 --> 00:00:59.426 A:middle
向你们展示强大的工具

00:00:59.426 --> 00:01:02.126 A:middle
和工作流来帮助你们对 Metal 着色器

00:00:59.426 --> 00:01:02.126 A:middle
和工作流来帮助你们对 Metal 着色器

00:01:02.296 --> 00:01:04.105 A:middle
进行调试和性能分析

00:01:04.626 --> 00:01:07.526 A:middle
让我们首先来谈一下 Metal

00:01:08.836 --> 00:01:10.426 A:middle
Metal 不仅是

00:01:10.426 --> 00:01:12.206 A:middle
帧和语言

00:01:12.626 --> 00:01:15.556 A:middle
我们有 Metal kits

00:01:15.556 --> 00:01:17.956 A:middle
和 Metal Performance shaders

00:01:17.956 --> 00:01:19.166 A:middle
并且我们有强大的工具使你的

00:01:19.166 --> 00:01:21.376 A:middle
开发过程高效 简单

00:01:22.426 --> 00:01:24.956 A:middle
完全融入工具的

00:01:24.956 --> 00:01:26.776 A:middle
Metal 系统跟踪

00:01:26.776 --> 00:01:29.306 A:middle
可以让你看到 CPU

00:01:29.306 --> 00:01:31.646 A:middle
和 GPU 是如何并行工作的

00:01:31.646 --> 00:01:33.066 A:middle
以及 App 的程序运行时间

00:01:34.496 --> 00:01:36.346 A:middle
这是第一款能

00:01:36.346 --> 00:01:37.696 A:middle
对 App 进行性能分析并看到

00:01:37.696 --> 00:01:38.436 A:middle
你的瓶颈所在的强大工具

00:01:38.986 --> 00:01:42.196 A:middle
但我今天的主题是

00:01:42.196 --> 00:01:44.106 A:middle
Metal 帧调试器

00:01:46.596 --> 00:01:48.516 A:middle
它能让你

00:01:48.516 --> 00:01:51.116 A:middle
通过游戏的一帧或计算机上传

00:01:51.116 --> 00:01:53.096 A:middle
来捕捉 Metal 的工作

00:01:53.636 --> 00:01:55.366 A:middle
单步调试过程

00:01:56.996 --> 00:01:59.556 A:middle
检查状态和资源

00:02:00.656 --> 00:02:03.806 A:middle
它提供强大的性能分析特征

00:02:03.806 --> 00:02:07.186 A:middle
让你看到 GPU 计数器和管线数据

00:02:07.706 --> 00:02:09.746 A:middle
它完全集成入 Xcode

00:02:09.746 --> 00:02:12.586 A:middle
为你提供了

00:02:13.006 --> 00:02:15.866 A:middle
对 Metal 工作量进行调试和性能分析的地方

00:02:16.356 --> 00:02:22.196 A:middle
今年 我们为 Metal 帧调试器增加了一些内容

00:02:23.006 --> 00:02:26.756 A:middle
有了依存查看器 现在你可以看到

00:02:26.756 --> 00:02:28.926 A:middle
编码器之间是如何共同工作的

00:02:28.926 --> 00:02:31.026 A:middle
以及它们如何通过资源利用

00:02:31.026 --> 00:02:32.096 A:middle
互相连接

00:02:33.026 --> 00:02:35.076 A:middle
这是一款强大的工具

00:02:35.076 --> 00:02:36.336 A:middle
引导你的工作量

00:02:36.336 --> 00:02:37.296 A:middle
让你明白

00:02:37.536 --> 00:02:40.136 A:middle
如何共同工作来

00:02:40.506 --> 00:02:42.356 A:middle
制作那一帧

00:02:42.356 --> 00:02:45.876 A:middle
明天上午十点 我们有 Metal 游戏性能优化讨论

00:02:45.876 --> 00:02:48.966 A:middle
其中一部分将谈到

00:02:48.966 --> 00:02:49.656 A:middle
依存查看器

00:02:50.656 --> 00:02:53.126 A:middle
但是今天我将围绕几何查看器

00:02:53.756 --> 00:02:57.936 A:middle
着色器调试器和增强版阴影性能分析器

00:02:58.576 --> 00:03:00.216 A:middle
我将展示在日常阴影元素中

00:02:58.576 --> 00:03:00.216 A:middle
我将展示在日常阴影元素中

00:03:00.216 --> 00:03:04.066 A:middle
对你们有帮助的工作量

00:03:04.516 --> 00:03:06.736 A:middle
那么让我们从

00:03:06.736 --> 00:03:07.336 A:middle
几何查看器开始

00:03:11.786 --> 00:03:15.286 A:middle
顶点阶段 是图形管线中的第一阶段

00:03:16.196 --> 00:03:18.126 A:middle
如果这一步出问题

00:03:18.126 --> 00:03:19.526 A:middle
它会弄乱你的整个图像

00:03:20.016 --> 00:03:22.416 A:middle
所以需要

00:03:22.926 --> 00:03:25.346 A:middle
在调试着色器前

00:03:25.346 --> 00:03:27.216 A:middle
排除一些顶点问题

00:03:27.756 --> 00:03:31.556 A:middle
在顶点阶段中

00:03:31.616 --> 00:03:33.446 A:middle
需要检查一些东西

00:03:33.636 --> 00:03:35.906 A:middle
主要是顶点输入

00:03:35.906 --> 00:03:38.076 A:middle
指数和顶点输出

00:03:39.116 --> 00:03:41.256 A:middle
去年的 Xcode 9

00:03:41.256 --> 00:03:43.226 A:middle
我们介绍了输入属性视图

00:03:43.226 --> 00:03:45.096 A:middle
所有数据都结合在

00:03:45.266 --> 00:03:47.166 A:middle
其中的桌面视图格式上

00:03:48.146 --> 00:03:50.036 A:middle
但是想要真正不与 3D 关联

00:03:50.546 --> 00:03:54.006 A:middle
来调试这样的视觉数据还是

00:03:54.006 --> 00:03:55.356 A:middle
很困难的

00:03:56.296 --> 00:03:58.966 A:middle
所以这就是为什么今年

00:03:58.966 --> 00:04:01.006 A:middle
我们结合了所有这些数据

00:03:58.966 --> 00:04:01.006 A:middle
我们结合了所有这些数据

00:04:01.006 --> 00:04:02.896 A:middle
并且创造了一个你们可以

00:04:02.896 --> 00:04:04.526 A:middle
看见并检查它的地方

00:04:05.196 --> 00:04:06.986 A:middle
现在我想向你们介绍

00:04:06.986 --> 00:04:11.000 A:middle
几何查看器

00:04:12.516 --> 00:04:15.616 A:middle
[ 掌声 ]

00:04:16.116 --> 00:04:17.886 A:middle
&gt;&gt; 几何查看器是一个新工具

00:04:17.886 --> 00:04:19.166 A:middle
可以以 3D 形式看到

00:04:19.166 --> 00:04:21.146 A:middle
转换后顶点数据

00:04:21.146 --> 00:04:22.896 A:middle
这样你实际上就可以

00:04:22.896 --> 00:04:24.116 A:middle
知道顶点输出

00:04:25.106 --> 00:04:27.126 A:middle
同时它为你提供

00:04:27.126 --> 00:04:29.876 A:middle
数据输入指数和输出

00:04:30.236 --> 00:04:31.136 A:middle
这样你可以实际上

00:04:31.136 --> 00:04:32.706 A:middle
把它关联回 3D

00:04:33.956 --> 00:04:35.526 A:middle
你能在每次绘图调用使用它

00:04:35.886 --> 00:04:37.266 A:middle
就像附件和绑定资源一样

00:04:37.266 --> 00:04:39.176 A:middle
因此你就有

00:04:39.466 --> 00:04:41.996 A:middle
一个地方来查看所有的

00:04:41.996 --> 00:04:42.996 A:middle
顶点问题

00:04:44.506 --> 00:04:47.336 A:middle
现在让我们来看看三个

00:04:47.336 --> 00:04:49.226 A:middle
常见的顶点问题

00:04:49.226 --> 00:04:50.516 A:middle
让我们看看如何用

00:04:50.516 --> 00:04:52.306 A:middle
几何查看器解决它们

00:04:52.886 --> 00:04:56.256 A:middle
那么这是第一个问题

00:04:56.706 --> 00:04:58.506 A:middle
我将要绘图调用

00:04:58.506 --> 00:05:00.496 A:middle
画一棵树 正如你所看到的

00:04:58.506 --> 00:05:00.496 A:middle
画一棵树 正如你所看到的

00:05:00.496 --> 00:05:03.236 A:middle
三角形的一些顶点

00:05:03.236 --> 00:05:05.876 A:middle
到了屏幕外面

00:05:05.876 --> 00:05:06.956 A:middle
导致这个三角形歪了

00:05:07.916 --> 00:05:09.246 A:middle
只要用几何查看器

00:05:09.596 --> 00:05:10.676 A:middle
你可以点击看上去

00:05:10.676 --> 00:05:11.296 A:middle
有问题的三角形

00:05:12.076 --> 00:05:13.966 A:middle
并且只要用下面的查看器

00:05:14.396 --> 00:05:17.466 A:middle
你能看到这些顶点

00:05:17.596 --> 00:05:21.096 A:middle
所有的输入和输出数据

00:05:24.796 --> 00:05:27.906 A:middle
而在第二种情况中

00:05:27.906 --> 00:05:29.736 A:middle
我调用相同的绘图

00:05:29.736 --> 00:05:31.386 A:middle
但这次这棵树

00:05:31.386 --> 00:05:33.386 A:middle
完全没有了

00:05:33.386 --> 00:05:34.636 A:middle
只要用几何查看器

00:05:34.776 --> 00:05:38.456 A:middle
和自由运动的相机

00:05:38.586 --> 00:05:40.426 A:middle
你能看到这棵树

00:05:40.426 --> 00:05:42.086 A:middle
完全被画在 Frustum 外面

00:05:43.536 --> 00:05:45.006 A:middle
所以这就能解释为什么它不在

00:05:45.006 --> 00:05:45.816 A:middle
屏幕上

00:05:46.716 --> 00:05:48.526 A:middle
那么用几何查看器

00:05:48.526 --> 00:05:50.706 A:middle
检测这样的情况就

00:05:50.706 --> 00:05:53.416 A:middle
非常简单 并且对于最后一种情况

00:05:54.526 --> 00:05:56.296 A:middle
有时甚至不可能

00:05:56.296 --> 00:05:57.946 A:middle
在 3D 中形成

00:05:58.176 --> 00:05:59.156 A:middle
可见的三角形

00:05:59.726 --> 00:06:01.576 A:middle
这些情况都难以调试

00:05:59.726 --> 00:06:01.576 A:middle
这些情况都难以调试

00:06:01.716 --> 00:06:04.476 A:middle
你可能有退化的三角形

00:06:04.476 --> 00:06:05.946 A:middle
因为你让

00:06:05.946 --> 00:06:07.716 A:middle
许多顶点

00:06:07.716 --> 00:06:08.656 A:middle
进入了相同位置

00:06:09.296 --> 00:06:11.146 A:middle
或者在顶点输出位置

00:06:11.146 --> 00:06:12.666 A:middle
可能有无穷大和 NaN

00:06:12.666 --> 00:06:14.086 A:middle
这对 GPU 来说

00:06:14.086 --> 00:06:15.716 A:middle
是未定义行为

00:06:16.736 --> 00:06:18.906 A:middle
好在对于几何查看器

00:06:19.196 --> 00:06:22.566 A:middle
能探测这些情况 并给你提供一个问题按钮

00:06:22.916 --> 00:06:30.736 A:middle
只要点击按钮 你就可以看到问题清单

00:06:31.356 --> 00:06:35.466 A:middle
在这种情况下 它找到了几个退化的三角形

00:06:36.476 --> 00:06:38.466 A:middle
点击其中一个三角形

00:06:38.466 --> 00:06:39.126 A:middle
你能直接看到数据

00:06:40.126 --> 00:06:42.046 A:middle
只要看看这些数据

00:06:42.046 --> 00:06:44.036 A:middle
我就看出我的两个顶点

00:06:44.036 --> 00:06:46.286 A:middle
正在到达原点

00:06:46.286 --> 00:06:48.556 A:middle
所以它是一个退化的三角形

00:06:50.366 --> 00:06:52.526 A:middle
那么正如你在这所有示例中看到的

00:06:52.526 --> 00:06:55.186 A:middle
几何查看器

00:06:55.216 --> 00:06:57.666 A:middle
是一个能够快速检查所有

00:06:57.666 --> 00:06:59.016 A:middle
几何相关问题的

00:06:59.016 --> 00:07:01.186 A:middle
强大工具

00:06:59.016 --> 00:07:01.186 A:middle
强大工具

00:07:01.186 --> 00:07:02.486 A:middle
如果问题出在输入上

00:07:03.036 --> 00:07:04.556 A:middle
那么你必须回过头去

00:07:04.696 --> 00:07:05.286 A:middle
检查你的模型

00:07:05.766 --> 00:07:07.246 A:middle
但如果问题出在输出上

00:07:07.246 --> 00:07:09.646 A:middle
那么你必须调试

00:07:09.646 --> 00:07:10.426 A:middle
顶点着色器

00:07:11.336 --> 00:07:13.326 A:middle
这就将引入下一个话题

00:07:15.976 --> 00:07:18.076 A:middle
调试着色器

00:07:18.076 --> 00:07:18.686 A:middle
使用新的着色器调试器

00:07:20.196 --> 00:07:21.496 A:middle
着色器很难调试

00:07:22.556 --> 00:07:24.386 A:middle
它们有复杂的数学代码

00:07:24.386 --> 00:07:25.736 A:middle
和大量的矢量运算

00:07:26.446 --> 00:07:28.556 A:middle
并且它们高度平行

00:07:28.776 --> 00:07:30.196 A:middle
你正在写的着色器代码

00:07:30.526 --> 00:07:32.716 A:middle
每隔每帧

00:07:32.806 --> 00:07:33.736 A:middle
就会执行百万次

00:07:33.736 --> 00:07:37.706 A:middle
这是 Unity 《死者之书》样片

00:07:37.706 --> 00:07:39.016 A:middle
中的一个场景

00:07:39.016 --> 00:07:41.056 A:middle
这周早些时候我们在 Keynote

00:07:41.056 --> 00:07:42.466 A:middle
和国情咨文中见过

00:07:43.296 --> 00:07:45.486 A:middle
在这个场景的每一帧中

00:07:46.426 --> 00:07:48.246 A:middle
一千万个顶点位置

00:07:48.246 --> 00:07:51.196 A:middle
在所有不同通道

00:07:51.196 --> 00:07:54.236 A:middle
呈现出六千万个三角形

00:07:54.236 --> 00:07:54.776 A:middle
每一帧

00:07:55.866 --> 00:07:57.696 A:middle
所以当你的着色器出现了问题

00:07:57.696 --> 00:08:00.846 A:middle
你将很难发现 问题出在哪儿

00:07:57.696 --> 00:08:00.846 A:middle
你将很难发现 问题出在哪儿

00:08:00.846 --> 00:08:02.766 A:middle
哪个着色器有问题

00:08:02.766 --> 00:08:04.556 A:middle
哪部分着色器编码有问题

00:08:05.496 --> 00:08:07.426 A:middle
所以为了帮你调试着色器

00:08:07.426 --> 00:08:10.146 A:middle
现在我非常高兴地

00:08:10.236 --> 00:08:12.156 A:middle
向你们介绍全新的

00:08:12.156 --> 00:08:14.736 A:middle
着色器调试器 [掌声]

00:08:20.986 --> 00:08:23.106 A:middle
着色器调试器是一个能调试所有

00:08:23.306 --> 00:08:25.276 A:middle
Metal 着色器的新工具

00:08:25.946 --> 00:08:27.666 A:middle
为你在成千上万个线程中

00:08:27.666 --> 00:08:29.606 A:middle
提供丰富可视化效果

00:08:29.646 --> 00:08:33.456 A:middle
并且它能展示来自 GPU

00:08:33.456 --> 00:08:35.596 A:middle
而不是模拟器的实时数据

00:08:36.285 --> 00:08:39.546 A:middle
它提供了你自由的设置方式

00:08:39.546 --> 00:08:40.946 A:middle
这样你能轻松地跟随

00:08:40.946 --> 00:08:42.716 A:middle
自己的操作

00:08:42.716 --> 00:08:44.285 A:middle
根本无需断点

00:08:45.726 --> 00:08:47.836 A:middle
它完全集成到

00:08:47.836 --> 00:08:49.456 A:middle
Metal 帧调试器 这样

00:08:49.716 --> 00:08:51.766 A:middle
你拥有了调试着色器

00:08:51.766 --> 00:08:52.846 A:middle
所需的一切

00:08:53.776 --> 00:08:55.896 A:middle
现在我将把舞台交给

00:08:55.896 --> 00:08:57.966 A:middle
我的同事 Xavier 由他为你们

00:08:58.246 --> 00:09:01.330 A:middle
操作展示着色器性能分析器 Xavier

00:08:58.246 --> 00:09:01.330 A:middle
操作展示着色器性能分析器 Xavier

00:09:02.516 --> 00:09:05.076 A:middle
[ 掌声 ]

00:09:05.576 --> 00:09:06.536 A:middle
&gt;&gt; 谢谢 Alp

00:09:07.066 --> 00:09:08.936 A:middle
大家下午好

00:09:09.046 --> 00:09:10.606 A:middle
今天的演示 我想制造

00:09:10.606 --> 00:09:11.976 A:middle
一个看起来很酷的水模拟

00:09:11.976 --> 00:09:14.326 A:middle
但是正如你们所见

00:09:14.666 --> 00:09:16.156 A:middle
出现了一些几何问题

00:09:17.036 --> 00:09:18.646 A:middle
我是 Xavier

00:09:18.646 --> 00:09:20.226 A:middle
非常高兴能向你展示如何

00:09:20.226 --> 00:09:21.806 A:middle
使用全新的着色器调试器

00:09:21.946 --> 00:09:22.906 A:middle
和几何查看器

00:09:23.226 --> 00:09:25.016 A:middle
来确定和解决几何问题

00:09:25.016 --> 00:09:27.966 A:middle
那么我们将

00:09:27.966 --> 00:09:28.836 A:middle
从我们的朋友捕捉开始

00:09:28.836 --> 00:09:31.066 A:middle
你们可以轻松

00:09:31.066 --> 00:09:32.566 A:middle
通过点击调试栏中的

00:09:32.676 --> 00:09:33.786 A:middle
向上切割按钮来做到

00:09:34.316 --> 00:09:38.426 A:middle
现在我们已经捕捉到了帧

00:09:38.426 --> 00:09:40.516 A:middle
可以开始调试我们的问题了

00:09:40.986 --> 00:09:44.006 A:middle
由于碰到了几何问题

00:09:44.006 --> 00:09:45.526 A:middle
我们将用到

00:09:45.526 --> 00:09:46.686 A:middle
全新的几何查看器

00:09:49.396 --> 00:09:51.406 A:middle
几何查看器能让你

00:09:51.406 --> 00:09:54.806 A:middle
导航和检查 绘图调用的几何

00:09:56.516 --> 00:09:58.306 A:middle
水面应该是平滑的

00:09:58.306 --> 00:10:00.456 A:middle
但是我们可以看到

00:09:58.306 --> 00:10:00.456 A:middle
但是我们可以看到

00:10:00.576 --> 00:10:01.596 A:middle
有一个陡峭的悬崖

00:10:02.416 --> 00:10:04.966 A:middle
让我们挑一个 看起来有问题的三角形

00:10:04.966 --> 00:10:06.276 A:middle
比如这一个

00:10:06.686 --> 00:10:08.596 A:middle
现在让我们选中底部

00:10:08.656 --> 00:10:11.126 A:middle
这个破损的顶点

00:10:11.476 --> 00:10:13.686 A:middle
你可以在这里使用这个表格

00:10:13.686 --> 00:10:14.456 A:middle
轻松地做到这一点

00:10:14.456 --> 00:10:17.816 A:middle
那么现在我们找到了

00:10:17.816 --> 00:10:20.316 A:middle
破损的顶点 让我们

00:10:20.316 --> 00:10:21.346 A:middle
找到输入位置

00:10:21.636 --> 00:10:24.666 A:middle
可以看到所有

00:10:24.666 --> 00:10:26.496 A:middle
输入位置对于这个三角形的

00:10:26.496 --> 00:10:27.846 A:middle
所有顶点来说

00:10:27.906 --> 00:10:30.316 A:middle
都很相似 事实上 白色的

00:10:30.316 --> 00:10:32.126 A:middle
坐标完全一致

00:10:32.546 --> 00:10:34.616 A:middle
所以这看起来是正确的

00:10:34.616 --> 00:10:35.346 A:middle
也被检测到了

00:10:35.766 --> 00:10:39.216 A:middle
鉴于输入正确

00:10:39.216 --> 00:10:40.556 A:middle
但我们可以看到这儿 在 3D 视图中

00:10:40.556 --> 00:10:43.076 A:middle
输出是错误的

00:10:43.076 --> 00:10:44.566 A:middle
那么问题一定就是

00:10:44.566 --> 00:10:44.946 A:middle
顶点着色器

00:10:45.616 --> 00:10:46.686 A:middle
那么让我们用全新的着色器调试器

00:10:46.686 --> 00:10:48.176 A:middle
来调试和解决这个问题

00:10:48.176 --> 00:10:52.556 A:middle
只要点击调试按钮

00:10:52.556 --> 00:10:54.046 A:middle
就在右下方的角落里

00:10:54.556 --> 00:10:59.896 A:middle
这样一来 我们现在在着色器调试器中了

00:11:00.026 --> 00:11:01.196 A:middle
非常简单

00:11:05.496 --> 00:11:06.916 A:middle
你在着色器调试器中

00:11:06.916 --> 00:11:08.926 A:middle
注意到的第一件事是

00:11:08.926 --> 00:11:10.796 A:middle
除了源代码之外

00:11:11.136 --> 00:11:12.126 A:middle
你还能看到所有行中

00:11:12.126 --> 00:11:14.066 A:middle
被修改过的变量

00:11:14.066 --> 00:11:16.426 A:middle
如果想要关于变量的

00:11:16.426 --> 00:11:17.926 A:middle
更多细节

00:11:18.276 --> 00:11:19.716 A:middle
你只要打开细节视图

00:11:19.716 --> 00:11:21.956 A:middle
点击这个细节视图按钮

00:11:21.956 --> 00:11:23.006 A:middle
就在这儿

00:11:24.836 --> 00:11:27.366 A:middle
细节视图将会用源代码语言

00:11:27.366 --> 00:11:29.186 A:middle
向你展示变量的

00:11:29.186 --> 00:11:30.276 A:middle
所有值

00:11:30.826 --> 00:11:33.136 A:middle
不仅如此

00:11:33.136 --> 00:11:35.036 A:middle
还包括你正在调试的

00:11:35.036 --> 00:11:36.316 A:middle
三角形的所有顶点

00:11:36.316 --> 00:11:37.216 A:middle
变量的值

00:11:37.216 --> 00:11:42.646 A:middle
在调试导航窗口中

00:11:42.646 --> 00:11:43.856 A:middle
你能看到

00:11:43.856 --> 00:11:46.106 A:middle
历史记录 他可以显示

00:11:46.106 --> 00:11:47.636 A:middle
着色器从头到尾

00:11:47.636 --> 00:11:50.816 A:middle
做过什么

00:11:51.166 --> 00:11:53.126 A:middle
正如你所见 我们可以非常简单地

00:11:53.176 --> 00:11:54.686 A:middle
使用方向键

00:11:54.686 --> 00:11:55.806 A:middle
单步调试代码

00:11:57.916 --> 00:11:59.566 A:middle
你们可能已经注意到了

00:11:59.566 --> 00:12:01.726 A:middle
当我用导航仪导航时

00:11:59.566 --> 00:12:01.726 A:middle
当我用导航仪导航时

00:12:02.056 --> 00:12:03.406 A:middle
它在源代码中的位置

00:12:03.406 --> 00:12:04.226 A:middle
被高亮了

00:12:04.796 --> 00:12:06.756 A:middle
这个操作是双向的

00:12:07.056 --> 00:12:08.556 A:middle
你可以选中一行你的

00:12:08.556 --> 00:12:10.136 A:middle
源代码 它在调试导航仪中

00:12:10.136 --> 00:12:11.876 A:middle
的位置将被选中

00:12:12.396 --> 00:12:15.466 A:middle
在任何时候 你只要打开变量视图

00:12:15.466 --> 00:12:17.096 A:middle
这儿在底部

00:12:17.096 --> 00:12:18.686 A:middle
就能看到所有

00:12:18.686 --> 00:12:20.836 A:middle
范围内存在的变量

00:12:20.836 --> 00:12:24.806 A:middle
那么我们已经更加了解

00:12:24.806 --> 00:12:26.096 A:middle
着色器调试器了

00:12:26.216 --> 00:12:27.276 A:middle
让我们来调试我们的问题

00:12:30.436 --> 00:12:32.686 A:middle
水是由产生的

00:12:32.716 --> 00:12:34.356 A:middle
位移矢量计算的

00:12:34.446 --> 00:12:36.056 A:middle
其稍后会添加到我们的

00:12:36.056 --> 00:12:36.676 A:middle
最终位置

00:12:37.566 --> 00:12:38.826 A:middle
让我们通过打开这个

00:12:38.826 --> 00:12:39.986 A:middle
细节视图

00:12:39.986 --> 00:12:41.776 A:middle
来进一步了解

00:12:42.266 --> 00:12:42.366 A:middle
这个位移矢量

00:12:46.536 --> 00:12:48.616 A:middle
在这个细节视图里我们可以看到

00:12:48.856 --> 00:12:51.206 A:middle
正在调试的

00:12:51.206 --> 00:12:52.576 A:middle
顶点的正确坐标

00:12:52.686 --> 00:12:54.116 A:middle
是一个很大的负数

00:12:54.416 --> 00:12:55.816 A:middle
与其他正确顶点

00:12:55.816 --> 00:12:57.976 A:middle
中的正数相比

00:12:58.256 --> 00:13:00.416 A:middle
那么接下来的问题就是我们

00:12:58.256 --> 00:13:00.416 A:middle
那么接下来的问题就是我们

00:13:00.416 --> 00:13:02.116 A:middle
如何计算这个位移矢量

00:13:02.116 --> 00:13:05.556 A:middle
所以 让我们用调试导航仪

00:13:05.806 --> 00:13:07.046 A:middle
运行函数

00:13:07.046 --> 00:13:09.000 A:middle
看看到底正在发生什么

00:13:17.086 --> 00:13:18.236 A:middle
看这里 甚至不用读代码

00:13:18.236 --> 00:13:19.906 A:middle
我们已经可以

00:13:19.906 --> 00:13:21.696 A:middle
发现有地方出错了

00:13:22.156 --> 00:13:24.176 A:middle
有一个变量的值

00:13:24.176 --> 00:13:25.966 A:middle
不是数字 并且这

00:13:25.966 --> 00:13:27.706 A:middle
很可能破坏进一步

00:13:27.706 --> 00:13:28.136 A:middle
的数学运算

00:13:28.666 --> 00:13:30.276 A:middle
让我们来检查一下这一切

00:13:30.276 --> 00:13:30.826 A:middle
为什么会发生

00:13:31.356 --> 00:13:32.846 A:middle
如果我们在这个调试器中检查

00:13:32.846 --> 00:13:34.796 A:middle
会发现我们正在

00:13:34.796 --> 00:13:37.096 A:middle
对这个负数进行操作

00:13:37.096 --> 00:13:40.036 A:middle
这就是导致 NaN 的原因

00:13:40.806 --> 00:13:42.316 A:middle
所以我们已经找到了原因

00:13:42.316 --> 00:13:43.956 A:middle
我们可以很快解决这个问题

00:13:43.956 --> 00:13:45.396 A:middle
通过对调这两行

00:13:45.396 --> 00:13:48.966 A:middle
这样 我们就不会对负数

00:13:48.966 --> 00:13:49.786 A:middle
进行操作了

00:13:50.526 --> 00:13:55.686 A:middle
现在 我们已经调整了着色器

00:13:55.686 --> 00:13:56.946 A:middle
让我们试一下这些改变

00:13:56.946 --> 00:13:58.166 A:middle
点击这儿 重载变化按钮

00:13:58.166 --> 00:14:05.696 A:middle
在调试栏中 重载着色器将使用

00:13:58.166 --> 00:14:05.696 A:middle
在调试栏中 重载着色器将使用

00:14:05.756 --> 00:14:06.976 A:middle
新着色器运行代码

00:14:06.976 --> 00:14:08.566 A:middle
这样你就能

00:14:08.566 --> 00:14:10.096 A:middle
立刻检验结果

00:14:11.356 --> 00:14:15.916 A:middle
现在我们可以看到 水平面光滑了

00:14:17.266 --> 00:14:18.876 A:middle
但是让我们实际检验一遍

00:14:19.166 --> 00:14:27.706 A:middle
只要点击 调试栏中的继续按钮

00:14:27.706 --> 00:14:28.656 A:middle
然后我们能看到 [ 掌声响起 ]

00:14:29.446 --> 00:14:31.826 A:middle
我们的水模拟完全正确

00:14:34.456 --> 00:14:36.306 A:middle
在这个演示中

00:14:36.306 --> 00:14:37.896 A:middle
我们已经看到如何拿一帧

00:14:37.896 --> 00:14:39.846 A:middle
如何用全新的

00:14:39.846 --> 00:14:41.606 A:middle
几何查看器寻找损坏的顶点

00:14:41.606 --> 00:14:43.506 A:middle
如何用全新的

00:14:43.506 --> 00:14:45.636 A:middle
着色器调试器调试和修复

00:14:45.636 --> 00:14:46.696 A:middle
顶点着色器

00:14:46.966 --> 00:14:47.976 A:middle
谢谢 我将把舞台交还给 Alp

00:14:48.516 --> 00:14:57.016 A:middle
[ 掌声 ]

00:14:57.516 --> 00:14:58.226 A:middle
&gt;&gt; 很酷 对吧

00:14:58.636 --> 00:15:00.426 A:middle
谢谢 Xavier

00:14:58.636 --> 00:15:00.426 A:middle
谢谢 Xavier

00:15:01.646 --> 00:15:02.836 A:middle
现在你已经看过着色器调试器

00:15:02.836 --> 00:15:04.676 A:middle
的作用 让我们进一步

00:15:04.676 --> 00:15:06.666 A:middle
看看如何使用

00:15:06.666 --> 00:15:08.636 A:middle
这个工具解决调试需求

00:15:09.246 --> 00:15:10.476 A:middle
首先

00:15:11.326 --> 00:15:13.196 A:middle
我们来谈谈如何

00:15:13.196 --> 00:15:16.656 A:middle
进入着色器调试器

00:15:16.696 --> 00:15:18.736 A:middle
这儿我已经捕捉了一帧

00:15:18.896 --> 00:15:20.316 A:middle
并且在进行最后一次调用

00:15:20.776 --> 00:15:23.176 A:middle
然后你将选中绘图调用或

00:15:23.176 --> 00:15:25.486 A:middle
发送调用

00:15:25.746 --> 00:15:27.606 A:middle
调试栏上的调试着色器按钮

00:15:27.666 --> 00:15:29.706 A:middle
将被启用

00:15:30.126 --> 00:15:31.576 A:middle
你能轻松进入着色器调试器

00:15:32.636 --> 00:15:34.416 A:middle
点击按钮将会出现一个视图

00:15:34.646 --> 00:15:35.676 A:middle
你可以选择你

00:15:35.706 --> 00:15:36.506 A:middle
感兴趣的线程

00:15:37.906 --> 00:15:39.246 A:middle
选择线程意味着

00:15:39.336 --> 00:15:41.166 A:middle
不同的事情 这取决于

00:15:41.166 --> 00:15:42.126 A:middle
你正在调试的着色器

00:15:42.126 --> 00:15:42.636 A:middle
的类型

00:15:43.726 --> 00:15:45.996 A:middle
对于片元着色器

00:15:46.196 --> 00:15:47.956 A:middle
你将用像素检视器

00:15:47.956 --> 00:15:49.976 A:middle
选中你想要调试的像素

00:15:50.966 --> 00:15:53.176 A:middle
对于顶点着色器

00:15:53.176 --> 00:15:54.596 A:middle
你将用我们刚刚看到的

00:15:54.596 --> 00:15:56.446 A:middle
几何查看器来选中

00:15:56.446 --> 00:15:57.636 A:middle
你想要调试的顶点

00:15:58.166 --> 00:16:01.236 A:middle
对于计算能力

00:15:58.166 --> 00:16:01.236 A:middle
对于计算能力

00:16:01.236 --> 00:16:03.286 A:middle
你将用控制键来选择

00:16:03.286 --> 00:16:04.516 A:middle
你感兴趣的线程

00:16:05.176 --> 00:16:07.166 A:middle
然后只要点击调试按钮

00:16:07.166 --> 00:16:08.906 A:middle
就大功告成了

00:16:09.596 --> 00:16:10.556 A:middle
你在着色器调试器中了

00:16:11.556 --> 00:16:12.696 A:middle
当你在里面时

00:16:12.696 --> 00:16:14.666 A:middle
你可以很轻松地

00:16:14.666 --> 00:16:16.686 A:middle
检查任何你感兴趣的变量

00:16:17.846 --> 00:16:19.936 A:middle
你只需找到 变量所在的那一行源代码

00:16:19.936 --> 00:16:22.836 A:middle
那就是你需要做的一切

00:16:22.996 --> 00:16:24.256 A:middle
你不需要任何断点

00:16:24.546 --> 00:16:25.926 A:middle
你不需要单步执行代码

00:16:26.566 --> 00:16:28.356 A:middle
那一行中

00:16:28.356 --> 00:16:30.376 A:middle
修改的变量的值

00:16:30.376 --> 00:16:31.716 A:middle
将在工具栏中显示

00:16:32.946 --> 00:16:34.406 A:middle
正如大家在演示中看到的那样

00:16:34.406 --> 00:16:35.836 A:middle
我们高亮了 NaN

00:16:35.956 --> 00:16:38.976 A:middle
和无穷大

00:16:38.976 --> 00:16:40.576 A:middle
因此很容易找到

00:16:40.576 --> 00:16:41.466 A:middle
一般性错误

00:16:42.636 --> 00:16:43.806 A:middle
你可以用工具栏中的

00:16:43.806 --> 00:16:45.826 A:middle
按钮来启用

00:16:45.826 --> 00:16:47.816 A:middle
细节视图

00:16:47.816 --> 00:16:49.486 A:middle
并得到变量的完整详细细节

00:16:49.946 --> 00:16:53.356 A:middle
这非常有用

00:16:53.356 --> 00:16:54.696 A:middle
特别是如果你想视察

00:16:54.696 --> 00:16:56.196 A:middle
复杂的结构并且想要

00:16:56.196 --> 00:16:57.786 A:middle
潜入不同的组件

00:16:59.396 --> 00:17:02.136 A:middle
或者你可以将鼠标停在任何

00:16:59.396 --> 00:17:02.136 A:middle
或者你可以将鼠标停在任何

00:17:02.136 --> 00:17:03.346 A:middle
源代码里的变量上

00:17:03.346 --> 00:17:05.776 A:middle
你立刻就能看到

00:17:05.776 --> 00:17:07.866 A:middle
变量在当时的值

00:17:08.685 --> 00:17:11.256 A:middle
如果你正在从纹理中采样

00:17:11.526 --> 00:17:13.366 A:middle
就像我们这个例子

00:17:13.526 --> 00:17:15.726 A:middle
并且想快速检测

00:17:15.726 --> 00:17:17.715 A:middle
该纹理是否正确

00:17:17.715 --> 00:17:20.506 A:middle
那么这将尤其有用

00:17:20.626 --> 00:17:23.016 A:middle
就像在 CPU 调试器中

00:17:23.705 --> 00:17:24.626 A:middle
你能够看到

00:17:24.626 --> 00:17:26.796 A:middle
变量视图

00:17:26.796 --> 00:17:29.876 A:middle
向你显示范围内所有变量

00:17:30.046 --> 00:17:32.496 A:middle
因此检视变量

00:17:32.496 --> 00:17:33.656 A:middle
是调试着色器的

00:17:33.656 --> 00:17:35.856 A:middle
核心部分 但是那仅是

00:17:35.856 --> 00:17:36.396 A:middle
故事的一半

00:17:37.096 --> 00:17:38.696 A:middle
你还想知道

00:17:38.726 --> 00:17:40.376 A:middle
你的代码的

00:17:40.376 --> 00:17:40.996 A:middle
执行顺序是什么

00:17:41.536 --> 00:17:42.896 A:middle
着色器调试器也使之

00:17:42.896 --> 00:17:43.866 A:middle
变得相当简单

00:17:44.486 --> 00:17:46.876 A:middle
当你进入着色器调试器后

00:17:46.876 --> 00:17:48.356 A:middle
在调试导航仪中

00:17:48.356 --> 00:17:50.386 A:middle
你会看到着色器

00:17:50.386 --> 00:17:52.316 A:middle
为你选中的线程

00:17:52.316 --> 00:17:53.546 A:middle
执行的所有

00:17:53.546 --> 00:17:53.946 A:middle
源代码行

00:17:55.906 --> 00:17:58.276 A:middle
你可以选中想要的任意一行

00:17:58.276 --> 00:17:59.856 A:middle
并直接导航到该行

00:18:00.866 --> 00:18:03.156 A:middle
这也提供了独特的

00:18:03.156 --> 00:18:04.486 A:middle
执行经验让你

00:18:04.486 --> 00:18:06.656 A:middle
能够仅用光标键

00:18:06.656 --> 00:18:08.326 A:middle
遍历代码

00:18:09.206 --> 00:18:10.776 A:middle
函数在导航器中是

00:18:10.776 --> 00:18:12.306 A:middle
成组的 因此你只需

00:18:12.306 --> 00:18:17.166 A:middle
扩展并运行它们

00:18:17.166 --> 00:18:18.676 A:middle
这也使反向调试

00:18:18.746 --> 00:18:21.046 A:middle
成为了可能 这是

00:18:21.046 --> 00:18:22.976 A:middle
调节着色器的一种

00:18:22.976 --> 00:18:23.526 A:middle
非常有用的方式

00:18:23.866 --> 00:18:25.326 A:middle
只要找到有错误值的变量

00:18:25.326 --> 00:18:27.476 A:middle
然后反向运行

00:18:27.476 --> 00:18:29.266 A:middle
看看哪里

00:18:29.336 --> 00:18:33.396 A:middle
出了错以及出错的原因

00:18:33.596 --> 00:18:35.026 A:middle
你还可以使用过滤

00:18:35.946 --> 00:18:37.686 A:middle
过滤是集中的好办法

00:18:37.686 --> 00:18:41.576 A:middle
你可以过滤任何

00:18:41.576 --> 00:18:42.716 A:middle
着色器代码中

00:18:42.746 --> 00:18:43.506 A:middle
你感兴趣的东西

00:18:44.396 --> 00:18:46.336 A:middle
过滤器将与函数调用

00:18:46.486 --> 00:18:50.046 A:middle
变量 资源 相匹配

00:18:50.996 --> 00:18:53.676 A:middle
你的着色器代码可能会跨越

00:18:53.676 --> 00:18:55.936 A:middle
许多不同文件

00:18:55.936 --> 00:18:58.046 A:middle
但如果你使用过滤器

00:18:58.046 --> 00:18:59.686 A:middle
它只会执行与着色器相匹配的内容

00:18:59.686 --> 00:19:05.966 A:middle
因此这是一个集中的好方法

00:18:59.686 --> 00:19:05.966 A:middle
因此这是一个集中的好方法

00:19:06.166 --> 00:19:08.286 A:middle
到目前为止我们所看到的

00:19:08.406 --> 00:19:09.686 A:middle
都针对调试单一线程

00:19:09.686 --> 00:19:12.706 A:middle
但如果是其他线程呢

00:19:14.346 --> 00:19:16.156 A:middle
着色器调试器也让你

00:19:16.156 --> 00:19:18.276 A:middle
能够基于你选中的初始线程来

00:19:18.276 --> 00:19:20.596 A:middle
访问其他线程

00:19:21.866 --> 00:19:23.926 A:middle
这意味着对于顶点着色器

00:19:24.456 --> 00:19:27.846 A:middle
你将获得选中顶点的基元

00:19:28.156 --> 00:19:30.056 A:middle
对于片元着色器 你将获得直接

00:19:30.056 --> 00:19:31.996 A:middle
角度区域以及选定的像素

00:19:33.436 --> 00:19:35.316 A:middle
对于计算能力 你将获得

00:19:35.316 --> 00:19:38.326 A:middle
选中的计算线程的所有线程组

00:19:38.326 --> 00:19:39.836 A:middle
这样你能够获取

00:19:40.106 --> 00:19:43.696 A:middle
与线程组内存有关的所有变量

00:19:43.936 --> 00:19:46.476 A:middle
现在我们来看看获取

00:19:46.476 --> 00:19:48.966 A:middle
其他线程将如何帮助你调试

00:19:48.966 --> 00:19:49.786 A:middle
片元着色器

00:19:50.336 --> 00:19:54.766 A:middle
那么当你的代码执行

00:19:55.106 --> 00:19:56.606 A:middle
上百万不同的像素时

00:19:57.576 --> 00:20:00.196 A:middle
在单个像素中查看单个变量

00:19:57.576 --> 00:20:00.196 A:middle
在单个像素中查看单个变量

00:20:00.196 --> 00:20:02.056 A:middle
可能无法帮助你

00:20:02.056 --> 00:20:02.716 A:middle
解决所有情况

00:20:03.546 --> 00:20:05.136 A:middle
我举个例子

00:20:05.506 --> 00:20:08.016 A:middle
我正在计算梯度

00:20:08.016 --> 00:20:09.476 A:middle
而且我看不见单一梯度值

00:20:09.796 --> 00:20:11.546 A:middle
但是我不知道

00:20:11.546 --> 00:20:13.256 A:middle
这个梯度值对我的像素

00:20:13.256 --> 00:20:14.776 A:middle
到底好不好

00:20:15.756 --> 00:20:18.306 A:middle
只要点击一下

00:20:18.336 --> 00:20:21.106 A:middle
打开细节视图 我就能在茫茫像素中

00:20:21.106 --> 00:20:23.136 A:middle
看到我的像素

00:20:23.136 --> 00:20:25.036 A:middle
的梯度值

00:20:25.316 --> 00:20:27.596 A:middle
现在我知道这个梯度不对

00:20:27.596 --> 00:20:29.296 A:middle
因为我能

00:20:29.296 --> 00:20:31.236 A:middle
清楚地看到它不平滑

00:20:32.216 --> 00:20:34.146 A:middle
正如你看到的 细节视图能

00:20:34.176 --> 00:20:35.716 A:middle
帮助你了解着色器

00:20:36.536 --> 00:20:40.376 A:middle
并为它分辨好或不好的值

00:20:40.916 --> 00:20:44.506 A:middle
你能快速进入任何

00:20:44.506 --> 00:20:47.116 A:middle
其他像素 立即查看

00:20:47.116 --> 00:20:49.196 A:middle
那个像素的变量值

00:20:49.796 --> 00:20:54.036 A:middle
你还可以用这个视图

00:20:54.286 --> 00:20:56.926 A:middle
切换线程

00:20:57.036 --> 00:20:58.826 A:middle
切换线程非常适合

00:20:58.826 --> 00:21:00.596 A:middle
比较 这样你就能

00:20:58.826 --> 00:21:00.596 A:middle
比较 这样你就能

00:21:00.596 --> 00:21:02.566 A:middle
清楚地看到好的和不好的像素

00:21:03.006 --> 00:21:04.456 A:middle
你能在它们之间快速跳转

00:21:04.456 --> 00:21:07.116 A:middle
并且查看后台像素的活动

00:21:08.666 --> 00:21:10.526 A:middle
一旦切换线程

00:21:10.526 --> 00:21:12.306 A:middle
我们就更新了执行历史和

00:21:12.306 --> 00:21:14.456 A:middle
变量视图

00:21:14.456 --> 00:21:15.806 A:middle
这样你能充分调试

00:21:15.806 --> 00:21:17.606 A:middle
新选中的线程

00:21:19.096 --> 00:21:20.596 A:middle
这会变得更好

00:21:21.716 --> 00:21:23.276 A:middle
细节视图还能让你

00:21:23.276 --> 00:21:24.836 A:middle
了解散度

00:21:26.256 --> 00:21:29.706 A:middle
无论何时你开启细节视图

00:21:29.706 --> 00:21:31.716 A:middle
右手侧的蒙版

00:21:31.716 --> 00:21:34.716 A:middle
就会始终显示

00:21:34.786 --> 00:21:36.556 A:middle
其他线程执行的相同

00:21:36.556 --> 00:21:37.226 A:middle
代码情况

00:21:38.686 --> 00:21:40.456 A:middle
在这个例子中

00:21:40.556 --> 00:21:43.776 A:middle
是有条件的 只要看看蒙版

00:21:43.776 --> 00:21:45.416 A:middle
我就知道

00:21:45.416 --> 00:21:47.796 A:middle
在这里面大约执行了

00:21:48.086 --> 00:21:49.786 A:middle
一半线程

00:21:49.786 --> 00:21:51.786 A:middle
如果是有条件的话

00:21:51.786 --> 00:21:52.046 A:middle
以对角线形状执行

00:21:53.556 --> 00:21:57.276 A:middle
现在为了展示如何

00:21:57.276 --> 00:21:59.196 A:middle
用细节视图解决片元着色器

00:21:59.196 --> 00:22:00.946 A:middle
中的问题

00:21:59.196 --> 00:22:00.946 A:middle
中的问题

00:22:00.946 --> 00:22:02.916 A:middle
我将邀请 Xavier

00:22:02.916 --> 00:22:03.366 A:middle
重回舞台

00:22:03.746 --> 00:22:04.136 A:middle
Xavier

00:22:05.516 --> 00:22:08.596 A:middle
[ 掌声 ]

00:22:09.096 --> 00:22:09.476 A:middle
&gt;&gt; 谢谢 Alp

00:22:10.136 --> 00:22:11.486 A:middle
在第一个演示中解决了

00:22:11.486 --> 00:22:13.086 A:middle
几何问题后

00:22:13.316 --> 00:22:15.606 A:middle
我加入了高亮作为过程和效果

00:22:16.176 --> 00:22:17.986 A:middle
但是结果却并不尽如人意

00:22:18.646 --> 00:22:19.936 A:middle
因此采取帧捕捉

00:22:19.936 --> 00:22:20.706 A:middle
来调试这个问题

00:22:25.756 --> 00:22:27.506 A:middle
在这儿的视图

00:22:27.506 --> 00:22:30.016 A:middle
我们可以看到

00:22:30.096 --> 00:22:31.356 A:middle
高亮实际上

00:22:31.356 --> 00:22:33.886 A:middle
是在底部产生暗色区域的地方

00:22:34.336 --> 00:22:36.246 A:middle
所以让我们用着色器调试器

00:22:36.346 --> 00:22:37.526 A:middle
来调试和解决这个问题

00:22:38.756 --> 00:22:40.746 A:middle
通过不按 我打开了

00:22:40.886 --> 00:22:42.796 A:middle
像素检视器

00:22:42.796 --> 00:22:45.096 A:middle
这能让你选中你想要调试的像素

00:22:45.776 --> 00:22:47.736 A:middle
因此 这儿我们将选中

00:22:47.736 --> 00:22:49.576 A:middle
一个像素 比如说这个

00:22:49.576 --> 00:22:52.876 A:middle
然后启动着色器调试器

00:22:52.876 --> 00:22:54.636 A:middle
你需要点击这里的调试按钮

00:22:54.636 --> 00:22:55.566 A:middle
在底部右侧的角落里

00:22:58.216 --> 00:22:59.556 A:middle
现在我们就在调试

00:22:59.556 --> 00:23:00.296 A:middle
帧和着色器了

00:22:59.556 --> 00:23:00.296 A:middle
帧和着色器了

00:23:05.416 --> 00:23:07.656 A:middle
可以看到

00:23:07.726 --> 00:23:09.186 A:middle
高亮从三种不同的

00:23:09.186 --> 00:23:10.416 A:middle
步骤中生成

00:23:10.976 --> 00:23:12.346 A:middle
让我们用细节视图

00:23:12.346 --> 00:23:14.126 A:middle
来迅速了解正在发生什么

00:23:14.516 --> 00:23:16.466 A:middle
我们首先从比较近的

00:23:16.466 --> 00:23:17.416 A:middle
第一个开始看

00:23:17.876 --> 00:23:21.676 A:middle
可以看到这儿 我们正在

00:23:21.676 --> 00:23:23.336 A:middle
从原始色彩中取样

00:23:23.336 --> 00:23:25.576 A:middle
这看上去没问题

00:23:25.986 --> 00:23:29.056 A:middle
接着往下看

00:23:29.176 --> 00:23:30.596 A:middle
这儿我们正在一个方向中

00:23:30.676 --> 00:23:31.716 A:middle
累加高亮

00:23:31.716 --> 00:23:33.696 A:middle
让我们打开

00:23:33.696 --> 00:23:35.436 A:middle
细节视图来看看结果

00:23:35.926 --> 00:23:39.246 A:middle
从细节视图中可以看到

00:23:39.246 --> 00:23:42.776 A:middle
在底部 已经有了暗色区域

00:23:42.896 --> 00:23:45.556 A:middle
就在这儿 那么问题

00:23:45.556 --> 00:23:46.696 A:middle
一定出在我们

00:23:46.696 --> 00:23:48.066 A:middle
累加高亮的过程中

00:23:48.726 --> 00:23:51.016 A:middle
你可以看到 细节视图

00:23:51.016 --> 00:23:52.136 A:middle
是一款了解你着色器的

00:23:52.376 --> 00:23:55.186 A:middle
强大工具 甚至不需要看代码

00:23:56.396 --> 00:23:58.376 A:middle
让我们用调试导航仪

00:23:58.476 --> 00:24:00.056 A:middle
看看第一个像素

00:23:58.476 --> 00:24:00.056 A:middle
看看第一个像素

00:24:00.056 --> 00:24:01.396 A:middle
到底发生了什么

00:24:01.866 --> 00:24:06.386 A:middle
看这儿

00:24:06.386 --> 00:24:08.106 A:middle
这个函数主要是一个

00:24:08.106 --> 00:24:09.316 A:middle
迭代几次的循环

00:24:09.456 --> 00:24:13.326 A:middle
从 brightnessMap 中累加样本

00:24:13.326 --> 00:24:14.946 A:middle
循环仅在着色器调试器中

00:24:14.946 --> 00:24:16.976 A:middle
被高亮了 这意味着

00:24:16.976 --> 00:24:18.666 A:middle
你可以用着色器调试器

00:24:18.666 --> 00:24:20.426 A:middle
导用迭代

00:24:20.426 --> 00:24:24.086 A:middle
然后和源代码一起获取

00:24:24.316 --> 00:24:27.266 A:middle
在每次迭代中的变量值

00:24:27.796 --> 00:24:31.596 A:middle
如果我们关注这儿 会看到

00:24:31.596 --> 00:24:32.786 A:middle
当我导向

00:24:32.786 --> 00:24:34.606 A:middle
不同迭代时

00:24:34.606 --> 00:24:35.046 A:middle
值会变化

00:24:37.016 --> 00:24:39.656 A:middle
但是真正强大的是

00:24:39.656 --> 00:24:41.466 A:middle
将这与细节视图结合起来

00:24:42.186 --> 00:24:44.196 A:middle
那么这儿 我们将

00:24:44.196 --> 00:24:45.566 A:middle
打开细节视图来看看最终的

00:24:45.566 --> 00:24:47.226 A:middle
色彩 这也是我们

00:24:47.226 --> 00:24:48.666 A:middle
累加高亮的地方

00:24:51.536 --> 00:24:53.556 A:middle
现在让我们用调试导航仪

00:24:53.556 --> 00:24:54.476 A:middle
进行迭代

00:24:55.326 --> 00:24:57.906 A:middle
正如我们看到的 当我迭代时

00:24:58.056 --> 00:24:59.346 A:middle
我们开始为最后的色彩

00:24:59.346 --> 00:25:00.946 A:middle
累加高亮

00:24:59.346 --> 00:25:00.946 A:middle
累加高亮

00:25:01.536 --> 00:25:03.296 A:middle
但是当我继续

00:25:03.296 --> 00:25:05.106 A:middle
向循环末尾迭代时 我们

00:25:05.106 --> 00:25:07.236 A:middle
实际上可以看到 出现了一个图案

00:25:07.766 --> 00:25:09.986 A:middle
那么让我们来看看为什么

00:25:09.986 --> 00:25:10.506 A:middle
会发生这种情况

00:25:14.116 --> 00:25:15.806 A:middle
正如在调试器中

00:25:16.156 --> 00:25:18.176 A:middle
我们实际上可以看到

00:25:18.176 --> 00:25:19.116 A:middle
权重是负的

00:25:19.626 --> 00:25:21.076 A:middle
这就是为什么

00:25:21.076 --> 00:25:23.206 A:middle
在最终呈现时

00:25:23.206 --> 00:25:25.146 A:middle
色彩是分散的

00:25:25.146 --> 00:25:25.346 A:middle
而不是积累在一起的

00:25:26.436 --> 00:25:28.286 A:middle
现在我们已经找到了

00:25:28.476 --> 00:25:30.056 A:middle
问题所在

00:25:30.056 --> 00:25:31.586 A:middle
让我迅速解决它

00:25:34.616 --> 00:25:36.296 A:middle
现在让我们检验结果

00:25:36.296 --> 00:25:38.036 A:middle
只要签入

00:25:38.036 --> 00:25:39.716 A:middle
重载变化按钮

00:25:39.716 --> 00:25:42.776 A:middle
在调试栏中

00:25:42.776 --> 00:25:46.366 A:middle
我们可以看到 现在已经没有其他载体了

00:25:46.656 --> 00:25:48.496 A:middle
但是 让我们在实际操作中看一下

00:25:48.496 --> 00:25:50.036 A:middle
只要点击继续按钮

00:25:54.556 --> 00:25:56.686 A:middle
好了 现在我们的高亮

00:25:56.686 --> 00:25:57.346 A:middle
看上去不错

00:25:58.066 --> 00:26:00.146 A:middle
这只是使用着色器调试器

00:25:58.066 --> 00:26:00.146 A:middle
这只是使用着色器调试器

00:26:00.146 --> 00:26:01.516 A:middle
和它强大的细节视图

00:26:01.516 --> 00:26:05.376 A:middle
来调试 [ 音质不清晰 ] 着色器的一个例子

00:26:05.896 --> 00:26:06.426 A:middle
谢谢大家

00:26:06.426 --> 00:26:07.466 A:middle
把舞台交还给 Alp

00:26:08.516 --> 00:26:11.646 A:middle
[ 掌声 ]

00:26:12.146 --> 00:26:12.766 A:middle
&gt;&gt; 谢谢 Xavier

00:26:14.316 --> 00:26:16.316 A:middle
现在我们已经看到了

00:26:16.316 --> 00:26:17.196 A:middle
着色器调试器的一切

00:26:17.196 --> 00:26:19.996 A:middle
我们来总结一下

00:26:19.996 --> 00:26:22.526 A:middle
到目前为止谈了什么

00:26:22.716 --> 00:26:25.036 A:middle
着色器调试器是专门

00:26:25.036 --> 00:26:26.496 A:middle
针对调试 Metal 着色器

00:26:26.496 --> 00:26:28.736 A:middle
设计的 考虑到

00:26:28.736 --> 00:26:30.236 A:middle
GPU 的高并行本质

00:26:30.236 --> 00:26:33.666 A:middle
大家也都看到

00:26:33.666 --> 00:26:36.066 A:middle
它对修补非数字和无穷大

00:26:36.066 --> 00:26:37.796 A:middle
的高亮的漏洞

00:26:37.796 --> 00:26:40.456 A:middle
非常有用 很容易发现

00:26:40.456 --> 00:26:43.036 A:middle
一般性错误 并且能让你

00:26:43.036 --> 00:26:45.136 A:middle
更好地了解着色器

00:26:45.976 --> 00:26:47.426 A:middle
有了细节视图

00:26:47.426 --> 00:26:48.836 A:middle
你甚至不需要读代码

00:26:49.116 --> 00:26:50.726 A:middle
了解你的着色器正在做什么

00:26:51.756 --> 00:26:53.996 A:middle
同时它还为着色器开发

00:26:53.996 --> 00:26:56.066 A:middle
提供了绝佳的环境

00:26:56.766 --> 00:26:58.016 A:middle
只要进入着色器调试器

00:26:58.306 --> 00:27:01.356 A:middle
并开始编辑 读取

00:26:58.306 --> 00:27:01.356 A:middle
并开始编辑 读取

00:27:01.476 --> 00:27:03.426 A:middle
即可快速迭代你的结果

00:27:03.916 --> 00:27:07.486 A:middle
着色器调试器支持搭载 iOS

00:27:07.806 --> 00:27:10.726 A:middle
macOS 和 tvOS 的最新硬件

00:27:12.066 --> 00:27:14.456 A:middle
接下来该欣赏

00:27:14.956 --> 00:27:15.660 A:middle
Xcode 10 了

00:27:17.516 --> 00:27:21.546 A:middle
[ 掌声 ]

00:27:22.046 --> 00:27:23.286 A:middle
&gt;&gt; 现在我们已经看到了

00:27:23.286 --> 00:27:24.866 A:middle
如何使用几何查看器和

00:27:24.866 --> 00:27:26.726 A:middle
着色器调试器来调试

00:27:26.726 --> 00:27:28.896 A:middle
着色器问题 现在让我们将目光转向

00:27:28.896 --> 00:27:30.836 A:middle
如何让着色器

00:27:30.836 --> 00:27:32.426 A:middle
运行得更快

00:27:36.276 --> 00:27:39.796 A:middle
因此优化 GPU 的使用

00:27:39.796 --> 00:27:42.266 A:middle
很重要 因为你想让 App

00:27:42.406 --> 00:27:44.196 A:middle
运行得更快

00:27:44.196 --> 00:27:46.166 A:middle
消耗更少的电量 并且有更好的

00:27:46.166 --> 00:27:46.866 A:middle
用户体验

00:27:47.416 --> 00:27:49.556 A:middle
但在开始优化前

00:27:50.016 --> 00:27:53.876 A:middle
必须知道优化内容是什么

00:27:54.236 --> 00:27:56.366 A:middle
如果你有 GPU 限制

00:27:56.366 --> 00:27:57.576 A:middle
典型的 Metal 工作量有许多

00:27:57.576 --> 00:27:58.406 A:middle
不同通道

00:27:59.106 --> 00:28:01.236 A:middle
知道专注哪条通道

00:27:59.106 --> 00:28:01.236 A:middle
知道专注哪条通道

00:28:01.236 --> 00:28:02.846 A:middle
是非常重要的

00:28:03.646 --> 00:28:05.876 A:middle
好消息是我们有强大的

00:28:05.876 --> 00:28:07.756 A:middle
内置在 Metal 帧调试器中的

00:28:07.756 --> 00:28:11.386 A:middle
性能分析工具 来帮助你解决问题

00:28:11.576 --> 00:28:13.636 A:middle
GPU 计数器可以给你的 App

00:28:13.636 --> 00:28:15.476 A:middle
带来极佳的表现

00:28:16.406 --> 00:28:17.846 A:middle
可以看到 时间

00:28:17.946 --> 00:28:19.946 A:middle
编码或绘图调用

00:28:19.946 --> 00:28:21.896 A:middle
并且提供不同的计数器

00:28:21.896 --> 00:28:23.786 A:middle
显示瓶颈

00:28:25.066 --> 00:28:26.686 A:middle
从这儿 一旦你知道了

00:28:26.856 --> 00:28:28.616 A:middle
扩展型通道 你就能

00:28:28.616 --> 00:28:30.276 A:middle
继续得到管线数据

00:28:31.076 --> 00:28:33.446 A:middle
你会为你的着色器

00:28:33.646 --> 00:28:36.486 A:middle
进行很好的编译 为你提供

00:28:36.486 --> 00:28:38.926 A:middle
指令类型

00:28:39.676 --> 00:28:42.566 A:middle
使用着色器性能分析器

00:28:42.986 --> 00:28:44.846 A:middle
能让你看到绘图调用

00:28:44.896 --> 00:28:47.136 A:middle
和每个管线状态

00:28:48.366 --> 00:28:48.536 A:middle
的定时

00:28:48.826 --> 00:28:51.896 A:middle
那么今天我将重点谈谈

00:28:51.986 --> 00:28:53.736 A:middle
着色器性能分析器 并且我将展示

00:28:53.736 --> 00:28:55.296 A:middle
能帮助你们优化着色器的

00:28:55.296 --> 00:28:57.016 A:middle
工作流程

00:28:57.516 --> 00:29:02.176 A:middle
一旦你在 Metal

00:28:57.516 --> 00:29:02.176 A:middle
一旦你在 Metal

00:29:02.176 --> 00:29:04.306 A:middle
帧调试器中

00:29:04.306 --> 00:29:06.156 A:middle
即将被性能导航器读取

00:29:06.156 --> 00:29:07.826 A:middle
你将看到根据执行时间分类的

00:29:08.226 --> 00:29:10.666 A:middle
所有管线状态

00:29:11.446 --> 00:29:13.806 A:middle
这是一个能够看到我们正在优化的

00:29:13.806 --> 00:29:16.786 A:middle
所有扩展型管线的地方

00:29:18.036 --> 00:29:19.766 A:middle
这儿用这些管线状态

00:29:19.766 --> 00:29:21.366 A:middle
你还能看到

00:29:21.366 --> 00:29:23.016 A:middle
绘图调用 这样就能

00:29:23.016 --> 00:29:24.836 A:middle
直接导向其中一个

00:29:24.836 --> 00:29:25.656 A:middle
看看它正在画什么

00:29:26.166 --> 00:29:29.486 A:middle
如果你是 iOS 或 tvOS 系统

00:29:30.466 --> 00:29:31.806 A:middle
只要前往着色器源

00:29:32.076 --> 00:29:32.966 A:middle
就能看到每行

00:29:32.966 --> 00:29:33.976 A:middle
执行成本

00:29:34.846 --> 00:29:36.286 A:middle
它非常好地展示了

00:29:36.626 --> 00:29:40.456 A:middle
在着色器中 你在哪儿花费的时间最多

00:29:40.456 --> 00:29:40.966 A:middle
按行计算

00:29:41.996 --> 00:29:44.056 A:middle
一旦你进入到着色器源代码中

00:29:44.056 --> 00:29:46.046 A:middle
就可以开始

00:29:46.046 --> 00:29:48.086 A:middle
编辑你的代码并重载

00:29:48.086 --> 00:29:50.326 A:middle
看看计时器是否

00:29:50.796 --> 00:29:51.776 A:middle
有任何时间差异

00:29:52.816 --> 00:29:54.726 A:middle
或者你可以仅仅进入着色器

00:29:54.726 --> 00:29:55.096 A:middle
调试器

00:29:56.136 --> 00:29:57.736 A:middle
如果你想优化

00:29:57.736 --> 00:29:58.586 A:middle
一个算法或者刚刚

00:29:58.586 --> 00:30:00.676 A:middle
通过一个控制流

00:29:58.586 --> 00:30:00.676 A:middle
通过一个控制流

00:30:00.676 --> 00:30:02.166 A:middle
并且当我知道你究竟能不能优化

00:30:02.166 --> 00:30:06.196 A:middle
那么这是一个极好的工作流

00:30:06.196 --> 00:30:08.906 A:middle
因此着色器性能分析器能

00:30:08.906 --> 00:30:10.596 A:middle
极大地帮助你优化着色器

00:30:10.596 --> 00:30:13.336 A:middle
但现在我们将它在 A11 做得

00:30:13.336 --> 00:30:17.330 A:middle
更优秀

00:30:18.096 --> 00:30:19.286 A:middle
现在所有的二进制芯片

00:30:19.606 --> 00:30:21.366 A:middle
A11 被完全设计为

00:30:21.366 --> 00:30:23.486 A:middle
GPU 现在我们有硬件支持

00:30:23.486 --> 00:30:24.826 A:middle
让你能够更深入

00:30:24.826 --> 00:30:26.366 A:middle
了解你的着色器

00:30:27.696 --> 00:30:27.816 A:middle
正在做什么

00:30:28.046 --> 00:30:30.126 A:middle
现在有了 A11 你就能通过

00:30:30.126 --> 00:30:32.596 A:middle
图表 看到每行

00:30:32.686 --> 00:30:34.496 A:middle
被执行的成本分析

00:30:35.096 --> 00:30:37.106 A:middle
那么着色器包含不同的

00:30:37.106 --> 00:30:39.706 A:middle
执行单元 如果你重度使用

00:30:39.706 --> 00:30:41.526 A:middle
它们中的一个 很可能

00:30:41.526 --> 00:30:42.716 A:middle
会因此碰上瓶颈

00:30:43.936 --> 00:30:46.096 A:middle
算术逻辑单元和内存

00:30:46.096 --> 00:30:48.456 A:middle
分析能让你看到

00:30:48.926 --> 00:30:50.776 A:middle
在不同执行单元

00:30:50.776 --> 00:30:51.996 A:middle
花费的时间

00:30:53.516 --> 00:30:56.516 A:middle
为了确保精确指令在 A11 中更高效

00:30:56.516 --> 00:30:57.876 A:middle
我们做了很多工作

00:30:58.366 --> 00:31:00.136 A:middle
使用健康 溢出

00:30:58.366 --> 00:31:00.136 A:middle
使用健康 溢出

00:31:00.186 --> 00:31:02.026 A:middle
很可能极大增加你的

00:31:02.346 --> 00:31:03.296 A:middle
GPU 预算

00:31:03.526 --> 00:31:07.596 A:middle
你能看到的

00:31:07.596 --> 00:31:08.786 A:middle
另外一个类型是同步

00:31:08.886 --> 00:31:10.786 A:middle
这个类型

00:31:10.786 --> 00:31:12.006 A:middle
很重要

00:31:12.006 --> 00:31:13.696 A:middle
因为你希望着色器

00:31:13.696 --> 00:31:16.246 A:middle
核心忙于运转 而不是

00:31:16.246 --> 00:31:17.396 A:middle
等待同步

00:31:18.266 --> 00:31:20.776 A:middle
在你的着色器代码中

00:31:20.776 --> 00:31:21.826 A:middle
如果正在从纹理 缓冲区中读取数据

00:31:21.826 --> 00:31:24.616 A:middle
或者正在用原子或栅栏

00:31:24.616 --> 00:31:26.886 A:middle
你可能需要暂停

00:31:27.046 --> 00:31:28.286 A:middle
等待同步

00:31:29.576 --> 00:31:32.196 A:middle
我们还能让你看到

00:31:32.196 --> 00:31:36.396 A:middle
内联函数的成本 从着色器中调用

00:31:36.946 --> 00:31:39.286 A:middle
这样你能直接

00:31:39.286 --> 00:31:40.646 A:middle
导向成本最高的

00:31:40.646 --> 00:31:42.706 A:middle
函数 并且开始

00:31:46.326 --> 00:31:47.000 A:middle
优化它 [ 掌声 ]

00:31:48.886 --> 00:31:51.166 A:middle
&gt;&gt; 欢迎来到 Apple 设计的

00:31:51.166 --> 00:31:52.566 A:middle
A11 仿生芯片

00:31:53.056 --> 00:31:54.786 A:middle
我们能提供比以往更好的

00:31:54.786 --> 00:31:55.666 A:middle
性能分析数据

00:31:56.346 --> 00:31:58.256 A:middle
今年我们将介绍

00:31:58.256 --> 00:32:00.456 A:middle
即使在内联函数中

00:31:58.256 --> 00:32:00.456 A:middle
即使在内联函数中

00:32:00.456 --> 00:32:02.386 A:middle
也引入了每行定时信息

00:32:02.386 --> 00:32:03.326 A:middle
和指令类型

00:32:03.966 --> 00:32:05.546 A:middle
我是 Max 我将

00:32:05.546 --> 00:32:07.686 A:middle
帮助你获得最优的着色器

00:32:09.796 --> 00:32:12.500 A:middle
性能 [ 掌声 ]

00:32:13.776 --> 00:32:15.846 A:middle
所以我再次捕捉了同样的

00:32:15.846 --> 00:32:17.946 A:middle
水模拟 但这次

00:32:18.206 --> 00:32:19.636 A:middle
是在我的 iPhone 上

00:32:20.636 --> 00:32:23.736 A:middle
让我们来通过性能

00:32:23.736 --> 00:32:25.046 A:middle
看看帧的变化

00:32:25.566 --> 00:32:28.216 A:middle
现在我们看到按时间排序的帧使用的

00:32:28.216 --> 00:32:30.066 A:middle
一列管线

00:32:30.106 --> 00:32:32.546 A:middle
我们可以很容易看到

00:32:32.866 --> 00:32:34.066 A:middle
噪声管线

00:32:34.116 --> 00:32:35.876 A:middle
正在消耗大量时间

00:32:37.046 --> 00:32:39.716 A:middle
发现了这一点 我们看到

00:32:39.716 --> 00:32:41.226 A:middle
几乎所有时间都被用在

00:32:41.226 --> 00:32:42.176 A:middle
片元着色器上

00:32:42.736 --> 00:32:44.456 A:middle
但是今年我们更进一步

00:32:45.096 --> 00:32:48.896 A:middle
我们能看到在

00:32:48.896 --> 00:32:51.046 A:middle
着色器调用的

00:32:51.046 --> 00:32:53.306 A:middle
里面的每个函数花费的时间

00:32:53.816 --> 00:32:56.766 A:middle
只要点击这儿前往

00:32:56.766 --> 00:32:58.126 A:middle
源代码文件 就能直接

00:32:58.126 --> 00:32:59.256 A:middle
跳转到正确的那一行

00:32:59.506 --> 00:33:01.536 A:middle
这就是我们检查的第一步

00:32:59.506 --> 00:33:01.536 A:middle
这就是我们检查的第一步

00:33:04.256 --> 00:33:07.306 A:middle
那么现在在右手侧

00:33:07.306 --> 00:33:08.716 A:middle
看到的就是

00:33:08.716 --> 00:33:10.446 A:middle
我们在这个函数

00:33:10.446 --> 00:33:11.666 A:middle
内部花的时间百分比

00:33:11.666 --> 00:33:14.196 A:middle
进一步就能看到

00:33:14.196 --> 00:33:16.326 A:middle
我们在每一行

00:33:16.326 --> 00:33:17.846 A:middle
花费的时间比例

00:33:19.186 --> 00:33:20.916 A:middle
注意 着色器性能分析器

00:33:20.916 --> 00:33:23.386 A:middle
适用与优化后的代码

00:33:23.386 --> 00:33:24.786 A:middle
因此编程器可以对指令

00:33:24.786 --> 00:33:26.946 A:middle
重新排序 并且某些行

00:33:26.946 --> 00:33:28.786 A:middle
可能没有定时信息

00:33:29.536 --> 00:33:32.366 A:middle
接下来就到定时信息了

00:33:32.866 --> 00:33:34.386 A:middle
我们有指令类型

00:33:34.526 --> 00:33:37.346 A:middle
让我们来看一看

00:33:37.606 --> 00:33:39.626 A:middle
大家能看到算术逻辑单元 在做数学运算时

00:33:39.626 --> 00:33:41.986 A:middle
花费了时间

00:33:41.986 --> 00:33:43.346 A:middle
我们正在从内存 纹理中读取

00:33:43.346 --> 00:33:45.696 A:middle
但是引起我关注的是

00:33:45.696 --> 00:33:46.986 A:middle
在同步中

00:33:46.986 --> 00:33:48.536 A:middle
花费的时间

00:33:48.936 --> 00:33:50.966 A:middle
尤其是在这儿等待内存的时间

00:33:51.586 --> 00:33:53.316 A:middle
这意味着我们的 GPU 不能

00:33:53.316 --> 00:33:55.336 A:middle
很快地读取数据 并且不能

00:33:55.336 --> 00:33:57.216 A:middle
通过在其他线程中 执行算术逻辑单元工作

00:33:57.216 --> 00:33:58.866 A:middle
来隐藏这个延迟

00:34:00.236 --> 00:34:01.806 A:middle
那么让我们来弄清楚原因

00:34:02.326 --> 00:34:06.696 A:middle
只要根据性能数字

00:34:06.696 --> 00:34:08.456 A:middle
我们来到了这一行

00:34:08.456 --> 00:34:11.196 A:middle
在这儿 我们花了超过一半的

00:34:11.196 --> 00:34:13.235 A:middle
在着色器内时间

00:34:14.016 --> 00:34:15.176 A:middle
再次看看

00:34:15.176 --> 00:34:17.275 A:middle
指令类型

00:34:17.275 --> 00:34:18.755 A:middle
我们能看到同步

00:34:18.755 --> 00:34:21.286 A:middle
花费了很长时间

00:34:21.866 --> 00:34:22.346 A:middle
但是为什么

00:34:26.176 --> 00:34:28.166 A:middle
这儿我们使用了

00:34:28.936 --> 00:34:30.255 A:middle
靠偏移量从色彩纹理中

00:34:30.255 --> 00:34:32.766 A:middle
读取的色彩值

00:34:34.356 --> 00:34:36.045 A:middle
这个偏移量是从这里的

00:34:36.045 --> 00:34:37.085 A:middle
噪声纹理中读取的

00:34:37.406 --> 00:34:39.786 A:middle
那么我们读取了一个相依纹理

00:34:39.906 --> 00:34:42.545 A:middle
直到获得纹理读取后的

00:34:42.545 --> 00:34:44.706 A:middle
数据 GPU 才能处理

00:34:45.106 --> 00:34:47.396 A:middle
那么我们对此可以做些什么呢

00:34:47.846 --> 00:34:50.596 A:middle
好吧 不从噪声纹理中读取

00:34:50.596 --> 00:34:52.536 A:middle
我们反而可以在 GPU 中

00:34:52.536 --> 00:34:55.025 A:middle
直接计算噪声值

00:34:55.886 --> 00:34:59.136 A:middle
我来演示一下

00:34:59.266 --> 00:35:01.226 A:middle
现在更新我的着色器

00:34:59.266 --> 00:35:01.226 A:middle
现在更新我的着色器

00:35:02.126 --> 00:35:03.806 A:middle
着色器现在被送到

00:35:03.806 --> 00:35:06.286 A:middle
我们编写的设备中了

00:35:06.286 --> 00:35:09.106 A:middle
然后整帧将重新运行

00:35:09.106 --> 00:35:11.106 A:middle
并重新进行性能分析 因为只要改变

00:35:11.106 --> 00:35:12.896 A:middle
一个着色器或一个线程就有可能

00:35:12.896 --> 00:35:15.006 A:middle
影响你整个 GPU 时序

00:35:16.496 --> 00:35:18.926 A:middle
一旦完成 我们来看一下

00:35:20.336 --> 00:35:22.606 A:middle
我们看到 现在在着色器中

00:35:22.796 --> 00:35:24.376 A:middle
只花了 3 毫秒

00:35:24.376 --> 00:35:26.166 A:middle
而原先需要 20 多毫秒

00:35:26.846 --> 00:35:29.866 A:middle
但我们再看看指令类型

00:35:30.586 --> 00:35:35.496 A:middle
这儿能看到我们几乎

00:35:35.496 --> 00:35:37.206 A:middle
完全消除了同步时间

00:35:37.206 --> 00:35:39.116 A:middle
并且保持 GPU

00:35:39.116 --> 00:35:41.256 A:middle
高速运转

00:35:42.526 --> 00:35:44.396 A:middle
总而言之

00:35:44.396 --> 00:35:45.506 A:middle
当你在着色器中发现了瓶颈

00:35:45.506 --> 00:35:47.516 A:middle
每行定时信息会

00:35:47.516 --> 00:35:49.706 A:middle
明确告诉你

00:35:49.706 --> 00:35:51.226 A:middle
问题所在

00:35:51.226 --> 00:35:53.396 A:middle
指令类型帮助你

00:35:53.396 --> 00:35:54.516 A:middle
发现原因

00:35:55.316 --> 00:35:56.146 A:middle
这就是我要介绍的部分

00:35:56.626 --> 00:35:57.576 A:middle
将舞台交还给我的同事 Alp

00:35:58.516 --> 00:36:04.216 A:middle
[ 掌声 ]

00:35:58.516 --> 00:36:04.216 A:middle
[ 掌声 ]

00:36:04.716 --> 00:36:06.006 A:middle
&gt;&gt; 谢谢 Max

00:36:06.006 --> 00:36:08.596 A:middle
结束之前

00:36:08.596 --> 00:36:10.786 A:middle
我想谈谈最后一件事

00:36:10.786 --> 00:36:12.546 A:middle
让你更轻松地使用

00:36:12.546 --> 00:36:14.466 A:middle
这些新的强大工具

00:36:15.696 --> 00:36:18.596 A:middle
希望你们已经离线

00:36:18.596 --> 00:36:20.016 A:middle
编写完了着色器

00:36:20.166 --> 00:36:21.226 A:middle
这样就不用为在线编写

00:36:21.226 --> 00:36:23.126 A:middle
而花费运行时间了

00:36:23.936 --> 00:36:25.576 A:middle
如果你们正在离线编写

00:36:25.576 --> 00:36:27.236 A:middle
着色器 现在我们有一个

00:36:27.236 --> 00:36:29.956 A:middle
全新的编译程序选项可以将

00:36:29.956 --> 00:36:31.496 A:middle
着色器源码保存到建立的

00:36:31.496 --> 00:36:33.196 A:middle
Metal 源中

00:36:33.196 --> 00:36:34.156 A:middle
这样无论何地 你们都能通过

00:36:34.156 --> 00:36:36.316 A:middle
这些工具 处理着色器源码

00:36:37.306 --> 00:36:38.916 A:middle
如果你们正在用

00:36:38.916 --> 00:36:41.406 A:middle
Xcode Project 编写着色器

00:36:41.406 --> 00:36:42.826 A:middle
你们能直接转到 Build Settings

00:36:42.826 --> 00:36:43.906 A:middle
并且启用这一选项

00:36:44.736 --> 00:36:46.756 A:middle
或者你们正在用命令行编写

00:36:46.756 --> 00:36:48.876 A:middle
那么就可以直接让 Metal 编译器

00:36:49.106 --> 00:36:51.356 A:middle
运行 MO 选项

00:36:52.356 --> 00:36:56.186 A:middle
但请记住只有在调试生成时 才启用它

00:36:56.186 --> 00:36:58.296 A:middle
这样你就不会误把着色器源码

00:36:58.296 --> 00:37:00.526 A:middle
和你的 App 一起推送出去

00:36:58.296 --> 00:37:00.526 A:middle
和你的 App 一起推送出去

00:37:00.946 --> 00:37:02.256 A:middle
好了

00:37:03.316 --> 00:37:07.726 A:middle
让我们来总结一下今天的内容

00:37:07.916 --> 00:37:09.056 A:middle
我们首先说了几何查看器

00:37:09.056 --> 00:37:11.866 A:middle
它能让你

00:37:11.866 --> 00:37:13.686 A:middle
查看所有与顶点

00:37:13.686 --> 00:37:16.266 A:middle
相关的问题 并且调试

00:37:16.266 --> 00:37:18.376 A:middle
画面问题 请记住

00:37:18.376 --> 00:37:19.646 A:middle
首先要检查几何查看器

00:37:19.646 --> 00:37:21.276 A:middle
确保在调试着色器前

00:37:21.276 --> 00:37:23.216 A:middle
你的几何图形

00:37:23.216 --> 00:37:24.736 A:middle
没有问题

00:37:25.476 --> 00:37:27.906 A:middle
然后我们提到了着色器调试器

00:37:27.906 --> 00:37:30.096 A:middle
这是一款能调试所有

00:37:30.096 --> 00:37:31.986 A:middle
Metal 着色器的强大工具

00:37:32.656 --> 00:37:33.816 A:middle
可以很好地修补漏洞

00:37:34.786 --> 00:37:36.546 A:middle
让你了解和开发

00:37:36.546 --> 00:37:37.876 A:middle
着色器

00:37:38.376 --> 00:37:40.956 A:middle
通过着色器性能分析工具

00:37:41.486 --> 00:37:43.286 A:middle
你甚至可以更进一步

00:37:43.416 --> 00:37:45.706 A:middle
看到 GPU 正在用 A11 仿生芯片

00:37:45.706 --> 00:37:48.746 A:middle
做什么

00:37:49.696 --> 00:37:51.786 A:middle
如果想要了解更多信息

00:37:51.926 --> 00:37:52.526 A:middle
请查看链接

00:37:53.606 --> 00:37:55.486 A:middle
明天上午十点

00:37:55.486 --> 00:37:57.326 A:middle
我们将谈谈 Metal 游戏

00:37:57.326 --> 00:37:59.226 A:middle
性能优化方面 届时

00:37:59.226 --> 00:38:00.976 A:middle
我们将谈论在游戏中

00:37:59.226 --> 00:38:00.976 A:middle
我们将谈论在游戏中

00:38:00.976 --> 00:38:02.376 A:middle
发现的常见

00:38:02.376 --> 00:38:04.506 A:middle
性能问题和可供大家使用的

00:38:04.506 --> 00:38:06.636 A:middle
检测和修补问题的工具

00:38:06.946 --> 00:38:07.236 A:middle
谢谢大家 [ 掌声 ]
