WEBVTT

00:00:07.516 --> 00:00:14.500 A:middle
[ 音乐 ]

00:00:18.316 --> 00:00:21.796 A:middle
&gt;&gt; 女士们 先生们

00:00:21.796 --> 00:00:22.946 A:middle
有请软件副总裁

00:00:22.946 --> 00:00:23.976 A:middle
Sebastian Marineau-Mes

00:00:24.516 --> 00:00:31.796 A:middle
[ 掌声 ]

00:00:32.296 --> 00:00:34.136 A:middle
&gt;&gt; 大家下午好

00:00:34.606 --> 00:00:36.046 A:middle
欢迎各位出席

00:00:36.046 --> 00:00:38.416 A:middle
WWDC 2018 的下午讨论会

00:00:39.166 --> 00:00:40.906 A:middle
今天上午的讨论会

00:00:40.906 --> 00:00:42.226 A:middle
十分精彩

00:00:42.446 --> 00:00:43.476 A:middle
我想你们都喜欢

00:00:43.476 --> 00:00:44.446 A:middle
上午的讲演吧

00:00:44.546 --> 00:00:45.456 A:middle
我们展示了很多

00:00:45.456 --> 00:00:46.086 A:middle
很棒的内容

00:00:46.086 --> 00:00:48.166 A:middle
我想你们已经看到

00:00:48.166 --> 00:00:49.736 A:middle
2018 年是热切关注

00:00:49.736 --> 00:00:51.516 A:middle
整个生态系统的基础的一年

00:00:51.516 --> 00:00:53.586 A:middle
我们拓宽了

00:00:53.586 --> 00:00:55.816 A:middle
关键技术领域的边界

00:00:56.636 --> 00:01:00.326 A:middle
我们引入了大量的 API 和功能 从而提供了

00:00:56.636 --> 00:01:00.326 A:middle
我们引入了大量的 API 和功能 从而提供了

00:01:00.326 --> 00:01:02.356 A:middle
许多全新的体验

00:01:02.356 --> 00:01:06.566 A:middle
涵盖机器学习 AR 高性能图形处理

00:01:06.566 --> 00:01:08.446 A:middle
新的开发工具等等

00:01:08.446 --> 00:01:09.236 A:middle
领域十分广泛

00:01:10.146 --> 00:01:13.456 A:middle
API 中的许多改进 都适用于我们

00:01:13.456 --> 00:01:15.396 A:middle
所有的操作系统

00:01:15.396 --> 00:01:16.736 A:middle
因此每个操作系统都得以共同发展

00:01:17.116 --> 00:01:18.856 A:middle
此外 iCloud 提供了

00:01:18.856 --> 00:01:20.496 A:middle
一种结构 使我们的所有设备

00:01:20.496 --> 00:01:23.836 A:middle
都能获得统一且一致的体验

00:01:24.956 --> 00:01:27.166 A:middle
在 iOS 12 中 我们看到了大量

00:01:27.166 --> 00:01:28.126 A:middle
令人难以置信的新功能

00:01:28.126 --> 00:01:29.706 A:middle
包括 AR 中的新功能

00:01:29.706 --> 00:01:31.476 A:middle
“信息” App 中的相机特效

00:01:31.476 --> 00:01:32.906 A:middle
FaceTime 群聊

00:01:33.276 --> 00:01:35.756 A:middle
屏幕使用时间数据

00:01:35.976 --> 00:01:38.136 A:middle
功能更丰富的“照片” App

00:01:38.136 --> 00:01:40.946 A:middle
当然还有对性能的显著提升

00:01:41.906 --> 00:01:44.186 A:middle
在 macOS 中

00:01:44.186 --> 00:01:46.266 A:middle
我们很兴奋地引入了深色模式

00:01:46.556 --> 00:01:48.246 A:middle
桌面上“访达”全新的功能

00:01:48.736 --> 00:01:51.246 A:middle
诸如“News”和“股市”的新 App

00:01:51.246 --> 00:01:53.306 A:middle
重新构思设计的 Mac 版 App Store

00:01:53.306 --> 00:01:55.146 A:middle
增强的隐私和安全保护

00:01:55.146 --> 00:01:58.406 A:middle
watchOS 5 带来了

00:01:58.496 --> 00:01:59.876 A:middle
可定制的互动通知功能

00:01:59.876 --> 00:02:02.166 A:middle
对 App 内容的支持

00:01:59.876 --> 00:02:02.166 A:middle
对 App 内容的支持

00:02:02.166 --> 00:02:03.906 A:middle
Siri 表盘中的“捷径”功能

00:02:04.006 --> 00:02:05.966 A:middle
背景音频模式

00:02:05.966 --> 00:02:08.626 A:middle
以及改进的体能训练 API

00:02:08.626 --> 00:02:12.526 A:middle
在 Apple tvOS 中

00:02:12.526 --> 00:02:14.276 A:middle
我们加入了对“杜比全景声”的支持

00:02:14.276 --> 00:02:16.016 A:middle
这样视频 App 就可以提供

00:02:16.016 --> 00:02:16.736 A:middle
沉浸式的音频体验

00:02:16.736 --> 00:02:18.386 A:middle
我们在今天早上 体验了一下效果 真的很棒

00:02:18.886 --> 00:02:20.636 A:middle
iOS 设备的安全密码共享

00:02:20.636 --> 00:02:22.596 A:middle
使你可以轻松地在 Apple TV App

00:02:22.596 --> 00:02:23.686 A:middle
VPP 支持以及

00:02:23.686 --> 00:02:26.376 A:middle
UIKit 和 TV MLKit 的增强功能之间

00:02:26.376 --> 00:02:28.416 A:middle
进行操作

00:02:28.416 --> 00:02:30.816 A:middle
从而更轻松地构建

00:02:30.816 --> 00:02:32.136 A:middle
视觉和体验俱佳的

00:02:32.136 --> 00:02:33.296 A:middle
原生 App

00:02:34.526 --> 00:02:36.526 A:middle
我们创造了优秀的平台

00:02:36.526 --> 00:02:38.156 A:middle
真正影响世界的

00:02:38.466 --> 00:02:39.676 A:middle
是你们的 App

00:02:39.676 --> 00:02:40.866 A:middle
我们的生态系统的

00:02:40.866 --> 00:02:42.196 A:middle
广度和规模

00:02:42.196 --> 00:02:44.126 A:middle
使我们成为用户生活中

00:02:44.126 --> 00:02:46.166 A:middle
必不可少的一部分

00:02:47.016 --> 00:02:48.386 A:middle
无论是帮助他们探索创造力

00:02:48.386 --> 00:02:52.956 A:middle
与最关心的人取得联系

00:02:52.956 --> 00:02:54.276 A:middle
还是改变医疗保健服务的提供方式

00:02:54.276 --> 00:02:56.656 A:middle
我们共同关注

00:02:56.656 --> 00:02:58.536 A:middle
用户生活中

00:02:58.536 --> 00:03:00.416 A:middle
十分重要的方方面面

00:02:58.536 --> 00:03:00.416 A:middle
十分重要的方方面面

00:03:00.416 --> 00:03:02.396 A:middle
并为他们提供了出色的体验

00:03:03.586 --> 00:03:04.966 A:middle
我们认为 当技术改善每一个人的生活的时候

00:03:05.016 --> 00:03:07.576 A:middle
它才是最强大的

00:03:08.506 --> 00:03:10.116 A:middle
因此 我们自始至终致力于

00:03:10.116 --> 00:03:13.456 A:middle
让每一款 Apple 产品都可用且易用

00:03:14.176 --> 00:03:15.826 A:middle
为了使我们的平台

00:03:16.226 --> 00:03:18.026 A:middle
以及你们所有的 App

00:03:18.026 --> 00:03:19.816 A:middle
都方便使用

00:03:19.816 --> 00:03:21.166 A:middle
我们提供了强大的功能

00:03:21.166 --> 00:03:22.496 A:middle
并且希望你们能一直利用这些功能

00:03:22.866 --> 00:03:24.996 A:middle
因为这对那些用户来说 是非常重要的

00:03:26.416 --> 00:03:28.166 A:middle
我们的用户也将他们的

00:03:28.166 --> 00:03:29.786 A:middle
最宝贵的数据托付给我们

00:03:30.216 --> 00:03:31.676 A:middle
所以在 Apple 我们不断深入地思考

00:03:31.676 --> 00:03:33.096 A:middle
隐私和安全问题

00:03:33.566 --> 00:03:35.216 A:middle
我想邀请 Katie 上台

00:03:35.216 --> 00:03:36.846 A:middle
与你们继续讨论这一点

00:03:36.846 --> 00:03:36.976 A:middle
Katie

00:03:37.516 --> 00:03:45.096 A:middle
[ 掌声 ]

00:03:45.596 --> 00:03:46.246 A:middle
&gt;&gt; 谢谢 Sebastian

00:03:46.246 --> 00:03:49.176 A:middle
提到隐私我们就会考虑

00:03:49.176 --> 00:03:51.066 A:middle
如何在我们的产品和服务中

00:03:51.066 --> 00:03:52.646 A:middle
建立隐私保护

00:03:52.646 --> 00:03:54.376 A:middle
可能会有很多细节

00:03:54.376 --> 00:03:55.586 A:middle
需要考虑

00:03:55.906 --> 00:03:57.006 A:middle
但是要考虑的首要内容是

00:03:57.006 --> 00:03:58.836 A:middle
信任

00:03:58.836 --> 00:04:01.776 A:middle
我们所有人都要确保

00:03:58.836 --> 00:04:01.776 A:middle
我们所有人都要确保

00:04:01.776 --> 00:04:03.306 A:middle
用户可以信任我们

00:04:03.306 --> 00:04:06.306 A:middle
能够保护他们

00:04:06.306 --> 00:04:07.426 A:middle
最敏感的数据

00:04:08.056 --> 00:04:09.946 A:middle
从财务数据到通讯

00:04:09.946 --> 00:04:12.446 A:middle
再到位置信息和照片

00:04:12.446 --> 00:04:15.556 A:middle
随着科技越来越

00:04:15.556 --> 00:04:17.476 A:middle
融入我们的生活

00:04:17.476 --> 00:04:19.516 A:middle
信任变得愈发重要

00:04:20.016 --> 00:04:22.146 A:middle
那么 如何与用户建立信任呢

00:04:22.946 --> 00:04:25.366 A:middle
我们将重点放在四个关键因素上

00:04:25.366 --> 00:04:26.996 A:middle
让我为你们逐个举例展示

00:04:28.286 --> 00:04:30.136 A:middle
我们不需要用户

00:04:30.206 --> 00:04:32.186 A:middle
在“地图” App 上登录

00:04:32.186 --> 00:04:34.296 A:middle
而是使用旋转随机标识符

00:04:34.676 --> 00:04:36.016 A:middle
在实现相关功能时

00:04:36.016 --> 00:04:38.366 A:middle
它不能关联到特定的 Apple ID

00:04:39.636 --> 00:04:41.926 A:middle
我们使用设备内置智能

00:04:41.926 --> 00:04:43.906 A:middle
来支持强大的功能

00:04:43.906 --> 00:04:46.046 A:middle
比如“照片” App 中的搜索功能和“回忆”相册

00:04:46.576 --> 00:04:50.146 A:middle
不需要云分析照片就可以实现

00:04:50.326 --> 00:04:52.846 A:middle
我们设计了面容 ID

00:04:53.006 --> 00:04:55.106 A:middle
所有的面容 ID 数据

00:04:55.106 --> 00:04:56.886 A:middle
都受 Secure Enclave 的加密和保护

00:04:56.886 --> 00:04:58.226 A:middle
且永远不会离开你的设备

00:04:59.636 --> 00:05:01.266 A:middle
当我们收集用户数据

00:04:59.636 --> 00:05:01.266 A:middle
当我们收集用户数据

00:05:01.816 --> 00:05:03.076 A:middle
或允许第三方

00:05:03.076 --> 00:05:05.186 A:middle
收集照片等数据时

00:05:05.186 --> 00:05:06.376 A:middle
我们要确保一切在

00:05:06.376 --> 00:05:07.046 A:middle
用户同意的情况下进行

00:05:07.176 --> 00:05:09.886 A:middle
让我们深入了解一下

00:05:09.886 --> 00:05:12.266 A:middle
透明和控制

00:05:12.916 --> 00:05:14.386 A:middle
当请求访问位置

00:05:14.386 --> 00:05:16.026 A:middle
或照片时

00:05:16.026 --> 00:05:18.036 A:middle
你们一定看到过这些警报

00:05:18.036 --> 00:05:20.506 A:middle
这个警报包含一个

00:05:20.506 --> 00:05:21.326 A:middle
目的字符串

00:05:21.596 --> 00:05:23.606 A:middle
它是由你们提供的字符串

00:05:23.606 --> 00:05:25.236 A:middle
用来解释

00:05:25.236 --> 00:05:27.446 A:middle
请求数据的原因

00:05:27.516 --> 00:05:28.366 A:middle
以及你会用数据去做什么

00:05:29.316 --> 00:05:31.036 A:middle
一个好的字符串

00:05:31.036 --> 00:05:32.966 A:middle
包含一个清晰的解释

00:05:32.966 --> 00:05:36.566 A:middle
说明它将启用哪些特性

00:05:36.566 --> 00:05:38.236 A:middle
以及改进哪些功能

00:05:39.636 --> 00:05:42.186 A:middle
你的解释越具体

00:05:42.186 --> 00:05:44.206 A:middle
用户们就越有可能

00:05:44.206 --> 00:05:45.936 A:middle
授予访问权限

00:05:47.516 --> 00:05:48.876 A:middle
我们认为

00:05:48.876 --> 00:05:51.276 A:middle
确保用户知晓

00:05:51.276 --> 00:05:53.016 A:middle
他们的数据将被如何使用

00:05:53.016 --> 00:05:53.966 A:middle
是十分重要的

00:05:54.636 --> 00:05:56.756 A:middle
App 审核现在更加关注

00:05:56.756 --> 00:05:58.426 A:middle
这些目的字符串

00:05:59.106 --> 00:06:01.176 A:middle
如果你们有一个这样的目的字符串

00:05:59.106 --> 00:06:01.176 A:middle
如果你们有一个这样的目的字符串

00:06:01.176 --> 00:06:03.256 A:middle
它显然是无效的

00:06:03.256 --> 00:06:05.686 A:middle
那么你们可能会被

00:06:05.686 --> 00:06:06.666 A:middle
App 审核拒绝

00:06:06.666 --> 00:06:10.736 A:middle
这个字符串从技术上解释了

00:06:10.736 --> 00:06:12.326 A:middle
如何使用数据

00:06:12.976 --> 00:06:15.656 A:middle
但是它缺乏细节

00:06:15.656 --> 00:06:17.566 A:middle
以至于用户很难

00:06:17.566 --> 00:06:20.286 A:middle
做出决定

00:06:20.356 --> 00:06:22.806 A:middle
有些用户可能会担心

00:06:22.806 --> 00:06:24.326 A:middle
App 的麦克风的访问权限

00:06:24.586 --> 00:06:27.366 A:middle
但它可能是

00:06:27.366 --> 00:06:29.436 A:middle
你的 App 中的关键功能

00:06:30.116 --> 00:06:31.706 A:middle
这就是为什么

00:06:31.706 --> 00:06:33.386 A:middle
我们需要一个清晰的

00:06:33.436 --> 00:06:35.876 A:middle
目的字符串

00:06:35.876 --> 00:06:39.496 A:middle
来解释如何使用数据

00:06:39.646 --> 00:06:41.476 A:middle
优秀的功能

00:06:41.476 --> 00:06:42.946 A:middle
不应以牺牲隐私为代价

00:06:43.436 --> 00:06:45.506 A:middle
相反地 它可以通过告知用户

00:06:45.506 --> 00:06:47.276 A:middle
你们将如何保护他们的数据

00:06:47.276 --> 00:06:48.176 A:middle
以及如何使用这些数据

00:06:48.176 --> 00:06:48.976 A:middle
从而为隐私安全提供保障

00:06:54.276 --> 00:06:56.426 A:middle
我们也非常关心安全问题

00:06:56.846 --> 00:06:58.436 A:middle
为了保护设备上

00:06:58.506 --> 00:07:00.706 A:middle
App 和云中的

00:06:58.506 --> 00:07:00.706 A:middle
App 和云中的

00:07:00.706 --> 00:07:03.176 A:middle
所有敏感数据

00:07:03.176 --> 00:07:06.076 A:middle
我们应从整体上 考虑安全问题

00:07:06.806 --> 00:07:09.336 A:middle
我们提供的技术

00:07:09.336 --> 00:07:11.556 A:middle
可以让你们更容易地构建

00:07:11.616 --> 00:07:12.976 A:middle
安全的 App

00:07:13.076 --> 00:07:14.606 A:middle
以下是一些关于

00:07:14.606 --> 00:07:16.016 A:middle
我们所提供的技术的例子

00:07:17.336 --> 00:07:20.876 A:middle
在 iOS 上 我们默认

00:07:20.876 --> 00:07:22.316 A:middle
自动加密 App 数据

00:07:23.416 --> 00:07:25.736 A:middle
通过网络

00:07:25.736 --> 00:07:27.506 A:middle
“App Transport Security（App 传输安全）”

00:07:27.506 --> 00:07:29.186 A:middle
意味着你无需再修补

00:07:29.186 --> 00:07:29.816 A:middle
客户端网络库

00:07:31.516 --> 00:07:33.506 A:middle
接下来是 CloudKit

00:07:33.506 --> 00:07:35.836 A:middle
在云中 CloudKit 安全地跨设备

00:07:35.936 --> 00:07:37.856 A:middle
存储和同步数据

00:07:39.186 --> 00:07:40.736 A:middle
使你们可以专注于为用户

00:07:40.736 --> 00:07:42.546 A:middle
构建良好的体验

00:07:42.866 --> 00:07:44.186 A:middle
而不必担心

00:07:44.186 --> 00:07:46.446 A:middle
管理帐户状态

00:07:46.446 --> 00:07:47.326 A:middle
或帐户凭证

00:07:48.076 --> 00:07:50.456 A:middle
它使你能够获得

00:07:50.456 --> 00:07:51.876 A:middle
最佳的类内安全保障

00:07:51.876 --> 00:07:54.026 A:middle
最佳的类内安全保障

00:07:54.026 --> 00:07:56.466 A:middle
包括内置的双重认证

00:07:57.256 --> 00:07:59.076 A:middle
自双重认证在三年前推出以来

00:07:59.076 --> 00:08:01.546 A:middle
超过三分之二的

00:07:59.076 --> 00:08:01.546 A:middle
超过三分之二的

00:08:01.546 --> 00:08:03.766 A:middle
Apple ID 帐户

00:08:03.766 --> 00:08:05.536 A:middle
采用了双重认证

00:08:06.506 --> 00:08:08.956 A:middle
与其他行业相比

00:08:08.956 --> 00:08:10.206 A:middle
这是一个巨大的成功

00:08:10.576 --> 00:08:13.196 A:middle
我们发现他们只有不到 10% 的帐户

00:08:13.196 --> 00:08:15.796 A:middle
受到双因素认证的保护

00:08:16.686 --> 00:08:18.556 A:middle
但这对我们很重要

00:08:19.206 --> 00:08:21.866 A:middle
我们一直致力于

00:08:21.866 --> 00:08:24.126 A:middle
确保用户帐户的安全

00:08:24.686 --> 00:08:26.396 A:middle
这样即使别人知道你的密码

00:08:26.396 --> 00:08:28.906 A:middle
你也是唯一

00:08:28.906 --> 00:08:30.566 A:middle
可以访问你的帐户的人

00:08:31.146 --> 00:08:35.216 A:middle
在 iOS 12 中

00:08:35.216 --> 00:08:36.836 A:middle
我们想让你和你的用户

00:08:37.015 --> 00:08:39.826 A:middle
能够更加方便和安全地使用密码

00:08:41.416 --> 00:08:42.956 A:middle
我们都知道

00:08:42.956 --> 00:08:44.646 A:middle
一个安全的密码对于

00:08:44.976 --> 00:08:47.236 A:middle
保证信息和身份的安全

00:08:47.236 --> 00:08:48.546 A:middle
至关重要

00:08:49.926 --> 00:08:51.936 A:middle
但密码可能很难记住

00:08:51.936 --> 00:08:54.586 A:middle
所以用户会倾向

00:08:54.586 --> 00:08:55.656 A:middle
使用弱密码或重复使用密码

00:08:56.416 --> 00:08:59.506 A:middle
这也给开发人员带来了问题

00:09:00.606 --> 00:09:03.236 A:middle
用户可能会放弃注册帐户

00:09:03.306 --> 00:09:05.076 A:middle
你还必须要处理

00:09:05.076 --> 00:09:06.386 A:middle
密码重置请求

00:09:07.536 --> 00:09:09.276 A:middle
但最糟糕的是

00:09:09.276 --> 00:09:10.736 A:middle
过弱的密码

00:09:10.736 --> 00:09:13.026 A:middle
可能导致帐户被盗

00:09:13.766 --> 00:09:18.036 A:middle
我们有了一个解决方案

00:09:18.036 --> 00:09:19.926 A:middle
iOS 12 可以让你们和你们的用户

00:09:19.926 --> 00:09:21.696 A:middle
通过创建 存储和自动填充密码

00:09:21.976 --> 00:09:24.116 A:middle
来轻松地使用强

00:09:24.406 --> 00:09:26.606 A:middle
且独特的密码

00:09:27.426 --> 00:09:29.826 A:middle
但真正了不起的是

00:09:30.076 --> 00:09:31.816 A:middle
它也可以在你的

00:09:31.816 --> 00:09:34.066 A:middle
iOS App 中使用

00:09:34.066 --> 00:09:35.936 A:middle
这样无论用户在哪里创建帐户

00:09:35.936 --> 00:09:38.016 A:middle
他们都能够得到一个强密码

00:09:38.016 --> 00:09:39.766 A:middle
并且同步到所有的设备上

00:09:39.766 --> 00:09:42.586 A:middle
自动提供强密码

00:09:42.586 --> 00:09:44.396 A:middle
非常简单

00:09:45.066 --> 00:09:46.206 A:middle
事实上 你们可以不需要

00:09:46.206 --> 00:09:48.696 A:middle
在你们的 App 中做任何改变

00:09:48.696 --> 00:09:51.396 A:middle
为了确保它能正常工作

00:09:51.396 --> 00:09:53.736 A:middle
你们需要把你们的 App 和域名关联起来

00:09:54.416 --> 00:09:55.786 A:middle
如果你们采用了通用链接

00:09:56.196 --> 00:09:57.966 A:middle
你们可能已经这样做了

00:09:59.326 --> 00:10:00.316 A:middle
然后你们需要标记

00:09:59.326 --> 00:10:00.316 A:middle
然后你们需要标记

00:10:00.316 --> 00:10:00.976 A:middle
用户名和密码字段

00:10:01.056 --> 00:10:04.056 A:middle
如果密码不符合

00:10:04.056 --> 00:10:06.786 A:middle
你们的 App 的要求

00:10:06.786 --> 00:10:10.016 A:middle
你们甚至可以定制密码

00:10:10.216 --> 00:10:11.886 A:middle
此外 我们也让用户

00:10:11.886 --> 00:10:13.866 A:middle
更容易地获取密码

00:10:14.796 --> 00:10:16.596 A:middle
他们只需询问 Siri

00:10:16.596 --> 00:10:17.806 A:middle
一旦经过认证

00:10:17.996 --> 00:10:19.666 A:middle
就能看到他们的密码清单

00:10:21.126 --> 00:10:23.256 A:middle
最重要的是

00:10:23.256 --> 00:10:25.486 A:middle
为了帮助清除旧密码

00:10:26.216 --> 00:10:27.556 A:middle
你们可以轻松地判断

00:10:27.556 --> 00:10:29.826 A:middle
你们的密码是否在

00:10:29.826 --> 00:10:31.516 A:middle
现有帐户中被重复使用

00:10:31.516 --> 00:10:32.456 A:middle
现有帐户中被重复使用

00:10:33.176 --> 00:10:35.846 A:middle
你们的 iPhone 会标记这些密码

00:10:35.876 --> 00:10:37.456 A:middle
然后引领你们访问相关网站

00:10:37.456 --> 00:10:39.136 A:middle
你们可以在那里

00:10:39.136 --> 00:10:41.326 A:middle
将其替换为强密码

00:10:44.076 --> 00:10:45.796 A:middle
现在 处理那些

00:10:45.796 --> 00:10:47.076 A:middle
发送给你们和你们的用户的

00:10:47.076 --> 00:10:49.326 A:middle
一次性验证码

00:10:49.616 --> 00:10:52.106 A:middle
也变得更加容易

00:10:53.646 --> 00:10:54.886 A:middle
它们会自动出现在

00:10:54.886 --> 00:10:57.176 A:middle
快速输入栏中 你们只需轻点一下

00:10:57.176 --> 00:10:58.856 A:middle
就可以填入它们

00:10:59.516 --> 00:11:05.876 A:middle
[ 掌声 ]

00:10:59.516 --> 00:11:05.876 A:middle
[ 掌声 ]

00:11:06.376 --> 00:11:08.026 A:middle
我们还为第三方密码管理器

00:11:08.026 --> 00:11:10.306 A:middle
创建了一个新的扩展功能

00:11:10.306 --> 00:11:12.586 A:middle
使它们能够为 “Safari 浏览器” 中的

00:11:12.586 --> 00:11:15.966 A:middle
自动填充和 App 提供密码

00:11:16.516 --> 00:11:22.646 A:middle
[ 掌声 ]

00:11:23.146 --> 00:11:24.906 A:middle
这些功能

00:11:24.906 --> 00:11:27.896 A:middle
在 iOS Mac

00:11:28.176 --> 00:11:30.616 A:middle
甚至 Apple TV 上

00:11:30.616 --> 00:11:33.376 A:middle
都能提供很好的体验

00:11:33.586 --> 00:11:36.146 A:middle
我们非常关心隐私和安全

00:11:36.146 --> 00:11:38.906 A:middle
它们是我们所有产品的基础

00:11:39.566 --> 00:11:42.686 A:middle
因此 我们为你们提供了

00:11:42.686 --> 00:11:44.696 A:middle
在此基础上构建 App 的能力

00:11:45.076 --> 00:11:47.726 A:middle
从而保护并保障安全性

00:11:47.726 --> 00:11:48.536 A:middle
以及赢得用户的信任

00:11:49.156 --> 00:11:50.976 A:middle
现在 让我们请回 Sebastian

00:11:51.516 --> 00:11:57.976 A:middle
[ 掌声 ]

00:11:58.476 --> 00:11:59.266 A:middle
&gt;&gt; 谢谢 Katie

00:11:59.586 --> 00:12:00.856 A:middle
这些新的密码功能

00:11:59.586 --> 00:12:00.856 A:middle
这些新的密码功能

00:12:00.856 --> 00:12:02.436 A:middle
是不是很神奇

00:12:02.736 --> 00:12:03.676 A:middle
非常 非常棒

00:12:03.676 --> 00:12:04.326 A:middle
棒极了

00:12:04.456 --> 00:12:05.046 A:middle
谢谢大家

00:12:06.096 --> 00:12:07.996 A:middle
我们向我们的用户承诺

00:12:07.996 --> 00:12:10.076 A:middle
提供优秀的体验

00:12:10.256 --> 00:12:11.606 A:middle
我们通常将

00:12:11.606 --> 00:12:14.326 A:middle
认为出色的体验

00:12:14.326 --> 00:12:15.336 A:middle
应该是优秀的创新功能

00:12:16.556 --> 00:12:17.926 A:middle
但同样重要的是

00:12:17.926 --> 00:12:19.556 A:middle
不要在不可预知和缓慢的软件中

00:12:19.556 --> 00:12:21.576 A:middle
妥协了愉悦的体验

00:12:22.436 --> 00:12:24.956 A:middle
这是 Apple 工程团队的首要任务

00:12:25.586 --> 00:12:27.326 A:middle
我们开发工具和实践

00:12:27.326 --> 00:12:28.396 A:middle
来帮助我们实现这一点

00:12:28.396 --> 00:12:30.576 A:middle
我们将这些工具提供给你们

00:12:30.636 --> 00:12:32.396 A:middle
这样你们就可以

00:12:32.396 --> 00:12:34.376 A:middle
在 App 中应用它们

00:12:35.306 --> 00:12:36.586 A:middle
大量的工具和技术可供你们使用

00:12:36.586 --> 00:12:38.956 A:middle
从而帮助你们

00:12:38.956 --> 00:12:40.976 A:middle
使代码更加可靠和稳定

00:12:41.326 --> 00:12:42.356 A:middle
对于你们的 App 来说

00:12:42.356 --> 00:12:43.066 A:middle
可预测性十分重要

00:12:43.596 --> 00:12:45.006 A:middle
当然 让你们的 App 快速地运行

00:12:45.006 --> 00:12:46.406 A:middle
同样至关重要

00:12:46.406 --> 00:12:47.746 A:middle
为此 我们为你们提供了

00:12:47.746 --> 00:12:49.706 A:middle
许多的性能工具

00:12:50.586 --> 00:12:51.696 A:middle
我们都知道

00:12:51.696 --> 00:12:55.416 A:middle
跨越复杂系统和 App

00:12:55.686 --> 00:12:56.456 A:middle
的性能优化是一项挑战

00:12:56.986 --> 00:12:59.696 A:middle
今年 我们在这方面做了很多工作

00:12:59.986 --> 00:13:02.806 A:middle
我们开发了许多新的工具和技术

00:12:59.986 --> 00:13:02.806 A:middle
我们开发了许多新的工具和技术

00:13:02.806 --> 00:13:03.936 A:middle
并希望为你们带来

00:13:03.936 --> 00:13:04.736 A:middle
这些强大的新功能

00:13:05.496 --> 00:13:07.696 A:middle
在 Xcode 10 中

00:13:07.696 --> 00:13:09.276 A:middle
我们扩展了 Instruments 的功能

00:13:09.496 --> 00:13:10.856 A:middle
使你们能够

00:13:10.856 --> 00:13:12.216 A:middle
对自己的自定义工具和工作流

00:13:12.216 --> 00:13:13.466 A:middle
进行更丰富的操作

00:13:14.286 --> 00:13:15.706 A:middle
这一切都是从一个

00:13:15.706 --> 00:13:16.806 A:middle
旧有的 API 开始的

00:13:17.106 --> 00:13:18.246 A:middle
你们有些人可能知道

00:13:18.246 --> 00:13:19.196 A:middle
并使用过它

00:13:19.616 --> 00:13:21.126 A:middle
我知道我应该感到内疚

00:13:21.596 --> 00:13:24.316 A:middle
printf 它就像 API 中瑞士军刀

00:13:24.316 --> 00:13:25.816 A:middle
我们使用它来

00:13:25.816 --> 00:13:27.276 A:middle
调试和跟踪代码

00:13:27.276 --> 00:13:28.166 A:middle
但我们都知道它效率很低

00:13:28.676 --> 00:13:30.156 A:middle
两年前 我们为你们带来了

00:13:30.156 --> 00:13:32.546 A:middle
一个叫做 os_log 的新 API

00:13:32.906 --> 00:13:34.266 A:middle
它是一种高效和高性能的 API

00:13:34.266 --> 00:13:36.266 A:middle
可以在系统的

00:13:36.266 --> 00:13:38.006 A:middle
各个层面中

00:13:38.006 --> 00:13:38.626 A:middle
捕获日志和跟踪点

00:13:39.076 --> 00:13:41.366 A:middle
它高效且轻量

00:13:41.366 --> 00:13:42.836 A:middle
如果你们还没有使用过它

00:13:42.836 --> 00:13:43.436 A:middle
你们真的应该试试

00:13:43.436 --> 00:13:43.926 A:middle
它很棒

00:13:44.566 --> 00:13:47.466 A:middle
今年 我们基于 os_log

00:13:47.466 --> 00:13:49.336 A:middle
加入了 os_signpost

00:13:50.016 --> 00:13:51.326 A:middle
它是一种功能强大的技术

00:13:51.376 --> 00:13:53.656 A:middle
为你们的 App 提供了丰富的

00:13:53.656 --> 00:13:55.776 A:middle
其格式能够被 Instruments 解译的

00:13:55.776 --> 00:13:57.606 A:middle
上下文数据

00:13:57.606 --> 00:13:59.996 A:middle
因此 你们可以使用 os_signpost

00:13:59.996 --> 00:14:01.816 A:middle
跟踪你们的代码

00:13:59.996 --> 00:14:01.816 A:middle
跟踪你们的代码

00:14:01.816 --> 00:14:03.786 A:middle
也可以使用它

00:14:03.936 --> 00:14:05.986 A:middle
标记函数的关键部分

00:14:06.586 --> 00:14:08.226 A:middle
一旦你获得了数据

00:14:08.226 --> 00:14:09.986 A:middle
就到了内置的自定义 Instruments 可视化

00:14:10.306 --> 00:14:12.266 A:middle
大显身手的时候了

00:14:13.256 --> 00:14:14.756 A:middle
现在我们有了这个新的

00:14:14.756 --> 00:14:16.656 A:middle
自定义 Instruments 支持

00:14:16.656 --> 00:14:18.086 A:middle
我认为 只有通过展示

00:14:18.086 --> 00:14:19.556 A:middle
才能向你们证明它的强大

00:14:19.846 --> 00:14:21.236 A:middle
接下来 Ken 将向你们展示

00:14:21.236 --> 00:14:21.886 A:middle
这个工具能做些什么

00:14:21.886 --> 00:14:21.976 A:middle
Ken

00:14:22.516 --> 00:14:28.066 A:middle
[ 掌声 ]

00:14:28.566 --> 00:14:29.536 A:middle
&gt;&gt; 谢谢 Sebastian

00:14:30.176 --> 00:14:31.416 A:middle
我正在开发我的

00:14:31.416 --> 00:14:33.086 A:middle
太阳系探索 App

00:14:33.656 --> 00:14:35.186 A:middle
但我注意到了

00:14:35.186 --> 00:14:36.746 A:middle
一些存在的性能问题

00:14:36.996 --> 00:14:38.506 A:middle
App 在更新数据的过程中

00:14:38.506 --> 00:14:39.646 A:middle
每当它启动

00:14:39.646 --> 00:14:40.846 A:middle
或者当我像这样按 command-R 时

00:14:41.126 --> 00:14:43.106 A:middle
你们可以看到

00:14:43.106 --> 00:14:45.306 A:middle
UI 会变得很不稳定

00:14:45.756 --> 00:14:46.576 A:middle
行星在围绕轨道

00:14:46.576 --> 00:14:47.766 A:middle
运行的时候

00:14:47.766 --> 00:14:48.486 A:middle
会断断续续

00:14:48.936 --> 00:14:49.786 A:middle
然而更新完成后

00:14:49.786 --> 00:14:52.006 A:middle
又变得十分流畅

00:14:52.556 --> 00:14:53.556 A:middle
所以我想搞清楚

00:14:53.556 --> 00:14:54.126 A:middle
问题的所在

00:14:55.166 --> 00:14:56.996 A:middle
回到我的代码中

00:14:57.906 --> 00:15:00.426 A:middle
PlanetUpdateService.swift

00:14:57.906 --> 00:15:00.426 A:middle
PlanetUpdateService.swift

00:15:00.426 --> 00:15:02.106 A:middle
这是处理

00:15:02.106 --> 00:15:03.056 A:middle
数据更新的文件

00:15:03.056 --> 00:15:05.096 A:middle
我想添加一些日志

00:15:05.176 --> 00:15:06.926 A:middle
一些 signpost 来帮助我弄明白

00:15:06.926 --> 00:15:08.266 A:middle
代码中到底发生了什么

00:15:08.266 --> 00:15:10.696 A:middle
我将从添加一个

00:15:10.746 --> 00:15:11.506 A:middle
日志句柄开始

00:15:11.676 --> 00:15:13.566 A:middle
我将使用新的

00:15:13.566 --> 00:15:17.296 A:middle
pointsOfInterest 类别

00:15:17.396 --> 00:15:20.166 A:middle
这是一个特殊的新类别

00:15:20.676 --> 00:15:22.276 A:middle
我用它记录的任何东西

00:15:22.346 --> 00:15:24.846 A:middle
都会自动显示在 Instruments 里面

00:15:25.426 --> 00:15:27.256 A:middle
我想要分析的第一件是

00:15:27.256 --> 00:15:30.596 A:middle
启动这个更新时 发生了什么

00:15:30.596 --> 00:15:32.276 A:middle
它是在这个方法中发生的

00:15:32.276 --> 00:15:33.756 A:middle
我要在这里加上

00:15:33.756 --> 00:15:34.906 A:middle
第一个 log 语句

00:15:34.906 --> 00:15:36.186 A:middle
“Requesting planet data（请求行星数据）”

00:15:36.186 --> 00:15:38.176 A:middle
我们之后就能看到

00:15:39.296 --> 00:15:40.656 A:middle
然后我真正想知道的是

00:15:40.656 --> 00:15:43.156 A:middle
处理和解析所有这些

00:15:43.156 --> 00:15:45.706 A:middle
我正在使用的数据

00:15:45.776 --> 00:15:46.666 A:middle
需要多长时间

00:15:47.476 --> 00:15:50.336 A:middle
这些任务是在这里完成的

00:15:50.796 --> 00:15:52.476 A:middle
为了更直观一些

00:15:52.476 --> 00:15:53.906 A:middle
我要添加一些 signpost

00:15:54.476 --> 00:15:55.866 A:middle
第一个 signpost 将是一个

00:15:56.666 --> 00:15:58.946 A:middle
begin 类别的 signpost

00:15:58.946 --> 00:16:00.966 A:middle
放在我开始任务之前

00:15:58.946 --> 00:16:00.966 A:middle
放在我开始任务之前

00:16:00.966 --> 00:16:02.526 A:middle
然后 我将在这里

00:16:02.526 --> 00:16:05.206 A:middle
添加另一个 signpost

00:16:05.206 --> 00:16:06.226 A:middle
也就是在我结束任务之后

00:16:06.456 --> 00:16:08.166 A:middle
它是一个 end 类别的 signpost

00:16:08.166 --> 00:16:09.986 A:middle
这将为我创建 一个时间区间

00:16:10.706 --> 00:16:11.646 A:middle
自动计算时间差

00:16:11.646 --> 00:16:13.436 A:middle
并直暴露过 Instruments

00:16:13.436 --> 00:16:14.196 A:middle
显示出来

00:16:15.056 --> 00:16:16.626 A:middle
让我们在 Instruments 中分析一下

00:16:16.626 --> 00:16:18.486 A:middle
看看我们能得到什么样的数据

00:16:19.296 --> 00:16:21.236 A:middle
所以我们选择 “Product”-

00:16:21.386 --> 00:16:22.546 A:middle
“Profile（分析）”

00:16:22.806 --> 00:16:24.086 A:middle
Xcode 会构建我的 App

00:16:24.876 --> 00:16:26.456 A:middle
启动 Instruments

00:16:26.486 --> 00:16:30.066 A:middle
然后我们会在这里 看到数据流

00:16:30.486 --> 00:16:31.506 A:middle
在这里 你们可以看到

00:16:31.506 --> 00:16:32.536 A:middle
pointsOfInterest 的轨迹

00:16:33.156 --> 00:16:34.596 A:middle
我用 pointsOfInterest 类别

00:16:34.596 --> 00:16:35.376 A:middle
记录的所有东西

00:16:35.376 --> 00:16:37.236 A:middle
都显示在这里

00:16:37.236 --> 00:16:39.566 A:middle
这是我的数据 我想放大

00:16:39.566 --> 00:16:40.816 A:middle
所以我需要按住 Option 键

00:16:40.816 --> 00:16:42.026 A:middle
然后点按并拖拽

00:16:42.026 --> 00:16:43.016 A:middle
这样我们可以更清楚地观察

00:16:43.746 --> 00:16:45.086 A:middle
我们在这里可以看到一个小标志

00:16:45.086 --> 00:16:46.766 A:middle
上面写着请求行星数据

00:16:47.326 --> 00:16:48.876 A:middle
这是我在代码中添加的

00:16:48.876 --> 00:16:50.136 A:middle
第一个日志的结果

00:16:51.056 --> 00:16:52.506 A:middle
这里的蓝条

00:16:52.996 --> 00:16:55.376 A:middle
是我处理和解析数据的地方

00:16:55.626 --> 00:16:56.866 A:middle
这些就是我添加的

00:16:56.866 --> 00:16:58.126 A:middle
signpost 的结果

00:16:58.906 --> 00:17:00.406 A:middle
当我看到这个的时候

00:16:58.906 --> 00:17:00.406 A:middle
当我看到这个的时候

00:17:00.406 --> 00:17:02.626 A:middle
我想我马上就知道 问题出在哪里了

00:17:02.886 --> 00:17:04.256 A:middle
每次我在这里

00:17:04.306 --> 00:17:05.756 A:middle
处理并解析数据时

00:17:05.756 --> 00:17:07.336 A:middle
我都可以看到主线程的 CPU 使用量

00:17:07.336 --> 00:17:08.846 A:middle
出现相应的峰值

00:17:08.846 --> 00:17:11.096 A:middle
对我来说 这是一个明显的危险信号

00:17:11.096 --> 00:17:13.376 A:middle
因为我可能正在主线程上

00:17:13.376 --> 00:17:15.126 A:middle
进行分析和处理

00:17:15.746 --> 00:17:17.326 A:middle
这将导致不尽流畅的 UI

00:17:18.066 --> 00:17:19.876 A:middle
你们可以看到

00:17:19.876 --> 00:17:21.256 A:middle
通过一个日志语句和几个 signpost

00:17:21.256 --> 00:17:23.876 A:middle
我已经能够对我的 App 的性能

00:17:23.876 --> 00:17:26.236 A:middle
进行一些非常深入的了解

00:17:26.486 --> 00:17:28.465 A:middle
借助新的工具

00:17:28.465 --> 00:17:29.866 A:middle
你们能做的事情不仅这些

00:17:30.286 --> 00:17:32.516 A:middle
在 Xcode 10 中有一个新的模板

00:17:32.516 --> 00:17:34.366 A:middle
可以让你们创建一个

00:17:34.546 --> 00:17:37.296 A:middle
完全自定义的 Instruments 包

00:17:37.786 --> 00:17:38.836 A:middle
我的一个团队伙伴

00:17:38.836 --> 00:17:40.286 A:middle
已经着手创建了一个 Instruments 包

00:17:40.286 --> 00:17:41.686 A:middle
它基于一些网络

00:17:41.686 --> 00:17:43.386 A:middle
一些他在我们的网络框架中

00:17:43.596 --> 00:17:44.006 A:middle
添加过的 signpost

00:17:44.456 --> 00:17:45.516 A:middle
我的“下载”文件夹里有

00:17:45.516 --> 00:17:46.796 A:middle
他发给我的最新版本

00:17:47.236 --> 00:17:50.056 A:middle
所以让我打开它

00:17:50.056 --> 00:17:51.576 A:middle
当我打开的时候

00:17:51.576 --> 00:17:52.446 A:middle
Instruments 会询问我是否安装

00:17:53.036 --> 00:17:54.376 A:middle
那么我选择 “Install（安装）”

00:17:54.786 --> 00:17:56.056 A:middle
现在你们可以看到

00:17:56.056 --> 00:17:56.756 A:middle
我有了一个新的模板

00:17:56.756 --> 00:17:57.636 A:middle
这里是我的模板选择器

00:17:57.636 --> 00:17:58.696 A:middle
叫做 “Solar System（太阳系）”

00:17:58.696 --> 00:17:59.866 A:middle
我需要连按它

00:17:59.866 --> 00:18:02.516 A:middle
之后我们再一次开始

00:17:59.866 --> 00:18:02.516 A:middle
之后我们再一次开始

00:18:02.516 --> 00:18:03.126 A:middle
记录数据

00:18:04.136 --> 00:18:05.826 A:middle
就像之前一样

00:18:05.826 --> 00:18:07.136 A:middle
我需要跟踪 pointsOfInterest

00:18:07.136 --> 00:18:08.126 A:middle
这里有我想要

00:18:08.126 --> 00:18:08.896 A:middle
观察的数据

00:18:09.436 --> 00:18:11.356 A:middle
但是现在 我有了更多

00:18:11.356 --> 00:18:13.096 A:middle
关于我所发出的网络请求

00:18:13.096 --> 00:18:15.076 A:middle
的详细信息

00:18:15.536 --> 00:18:16.506 A:middle
同样地 我需要放大一下

00:18:16.506 --> 00:18:16.976 A:middle
这样我们可以看得更清楚一些

00:18:22.406 --> 00:18:24.136 A:middle
这个定制的 Instruments 包

00:18:24.466 --> 00:18:26.536 A:middle
使我能够

00:18:26.536 --> 00:18:28.706 A:middle
清楚地看到

00:18:28.706 --> 00:18:30.566 A:middle
我是如何使用这个框架的

00:18:31.016 --> 00:18:32.426 A:middle
例如这里

00:18:32.626 --> 00:18:34.226 A:middle
它向我展示了

00:18:34.226 --> 00:18:35.746 A:middle
我每 0.1 秒平均发出了

00:18:35.746 --> 00:18:37.506 A:middle
多少个网络请求

00:18:38.226 --> 00:18:39.456 A:middle
然后在这里

00:18:39.456 --> 00:18:41.256 A:middle
这个跟踪显示了

00:18:41.256 --> 00:18:43.536 A:middle
关于每个网络请求的详细信息

00:18:43.796 --> 00:18:44.726 A:middle
耗时多久

00:18:45.026 --> 00:18:46.326 A:middle
它甚至用红色突出显示

00:18:46.326 --> 00:18:47.396 A:middle
重复的请求

00:18:47.756 --> 00:18:48.766 A:middle
在这些地方

00:18:48.946 --> 00:18:50.386 A:middle
我不止一次请求

00:18:50.386 --> 00:18:51.816 A:middle
相同的数据

00:18:51.816 --> 00:18:53.066 A:middle
看起来大约超过一半的时间

00:18:53.146 --> 00:18:55.406 A:middle
我都在做这样的事情

00:18:55.666 --> 00:18:56.836 A:middle
所以我一直在浪费

00:18:56.836 --> 00:18:58.056 A:middle
大量的性能

00:18:58.536 --> 00:18:59.816 A:middle
这些正是我需要的信息

00:18:59.816 --> 00:19:01.796 A:middle
帮助我更有效地

00:18:59.816 --> 00:19:01.796 A:middle
帮助我更有效地

00:19:01.796 --> 00:19:04.086 A:middle
使用这个框架

00:19:04.766 --> 00:19:07.126 A:middle
signpost 和定制工具

00:19:07.126 --> 00:19:09.146 A:middle
是两种非常好的方法

00:19:09.146 --> 00:19:10.926 A:middle
让你们可以在 Instruments 中

00:19:10.926 --> 00:19:12.516 A:middle
查看你们的数据

00:19:12.856 --> 00:19:13.566 A:middle
那么这就是

00:19:13.566 --> 00:19:14.316 A:middle
新的性能工具

00:19:14.476 --> 00:19:14.976 A:middle
Sebastian

00:19:15.516 --> 00:19:19.546 A:middle
[ 掌声 ]

00:19:20.046 --> 00:19:20.356 A:middle
&gt;&gt; 好的

00:19:20.706 --> 00:19:21.476 A:middle
谢谢 Ken

00:19:21.476 --> 00:19:23.866 A:middle
这真是一个精彩的演示

00:19:23.866 --> 00:19:25.276 A:middle
这些出色的工具

00:19:25.276 --> 00:19:27.046 A:middle
能帮助你们所有人

00:19:27.556 --> 00:19:28.856 A:middle
让 App 运行得更快

00:19:29.796 --> 00:19:32.396 A:middle
现在总结一下

00:19:32.396 --> 00:19:33.886 A:middle
我们刚刚回顾了许多

00:19:33.886 --> 00:19:35.726 A:middle
优秀的工具和最佳的实践

00:19:35.726 --> 00:19:37.626 A:middle
可以帮助我们使我们的用户满意

00:19:37.896 --> 00:19:38.746 A:middle
并保持他们的信任

00:19:39.656 --> 00:19:41.676 A:middle
现在 我想把我们的注意力

00:19:41.676 --> 00:19:42.976 A:middle
转移到 Mac 上

00:19:43.186 --> 00:19:46.516 A:middle
OS X 是 17 年前被推出的

00:19:46.516 --> 00:19:48.336 A:middle
我们一直在推动这个平台

00:19:48.336 --> 00:19:49.366 A:middle
向前发展

00:19:50.016 --> 00:19:53.346 A:middle
Leopard 支持了 64 位操作

00:19:53.346 --> 00:19:54.386 A:middle
OS X Mountain Lion

00:19:54.386 --> 00:19:56.246 A:middle
引入了 Gatekeeper

00:19:56.246 --> 00:19:56.976 A:middle
这是 Mac 安全方面的关键一步

00:19:57.046 --> 00:19:59.296 A:middle
我们的主要任务之一

00:19:59.296 --> 00:20:00.626 A:middle
就是利用最新的技术

00:19:59.296 --> 00:20:00.626 A:middle
就是利用最新的技术

00:20:00.626 --> 00:20:02.546 A:middle
通过扩展 Mac 的功能

00:20:02.546 --> 00:20:04.436 A:middle
来推动 Mac 的发展

00:20:05.146 --> 00:20:06.236 A:middle
但是 当我们推动平台发展时

00:20:06.236 --> 00:20:08.096 A:middle
我们有时不得不

00:20:08.096 --> 00:20:09.866 A:middle
放弃旧有的功能

00:20:10.166 --> 00:20:12.376 A:middle
以确保我们不会阻碍它的发展

00:20:13.476 --> 00:20:14.986 A:middle
去年我们宣布

00:20:14.986 --> 00:20:16.976 A:middle
High Sierra 是最后一个

00:20:16.976 --> 00:20:19.046 A:middle
完全支持 32 位 App 的

00:20:19.046 --> 00:20:20.766 A:middle
macOS 版本

00:20:21.586 --> 00:20:23.276 A:middle
今年我们宣布

00:20:23.276 --> 00:20:25.326 A:middle
macOS Mojave 是最后一个

00:20:25.326 --> 00:20:28.076 A:middle
支持 32 位的版本

00:20:29.346 --> 00:20:30.946 A:middle
因此 当我们在明年

00:20:30.946 --> 00:20:33.286 A:middle
移除 32 位的支持时

00:20:33.356 --> 00:20:35.256 A:middle
这些 32 位的框架也将被移除

00:20:35.256 --> 00:20:36.726 A:middle
例如 QuickTime 框架

00:20:37.036 --> 00:20:38.796 A:middle
和 Apple Java 框架

00:20:39.336 --> 00:20:42.746 A:middle
接下来让我们讨论一下

00:20:42.746 --> 00:20:43.126 A:middle
Mac 的安全问题

00:20:43.696 --> 00:20:45.186 A:middle
Gatekeeper 在阻挡大规模的

00:20:45.186 --> 00:20:46.576 A:middle
恶意软件攻击的方面做得很好

00:20:46.576 --> 00:20:49.786 A:middle
今年我们想进一步推进

00:20:50.666 --> 00:20:52.086 A:middle
我们在扩展用户可决定的权限

00:20:52.436 --> 00:20:54.176 A:middle
强化运行时安全

00:20:54.176 --> 00:20:56.006 A:middle
并推出新的认证服务

00:20:56.246 --> 00:20:57.966 A:middle
让我们将更详细地讨论一下

00:20:59.296 --> 00:21:00.986 A:middle
正如你们今天上午所听到的

00:20:59.296 --> 00:21:00.986 A:middle
正如你们今天上午所听到的

00:21:00.986 --> 00:21:02.086 A:middle
我们正在扩展

00:21:02.086 --> 00:21:04.666 A:middle
对敏感系统资源的保护

00:21:05.976 --> 00:21:06.816 A:middle
我们已经添加了摄像头和麦克风的监管

00:21:06.816 --> 00:21:08.676 A:middle
现在 我们需要征得用户的同意

00:21:08.676 --> 00:21:10.936 A:middle
才能使用 API

00:21:10.936 --> 00:21:12.626 A:middle
并直接访问所有这些资源

00:21:13.606 --> 00:21:14.706 A:middle
这在实践中意味着什么呢

00:21:15.636 --> 00:21:17.846 A:middle
这意味着 根据用户同意与否

00:21:17.846 --> 00:21:19.466 A:middle
你的 App 必须

00:21:19.466 --> 00:21:22.156 A:middle
适当地处理

00:21:22.156 --> 00:21:22.986 A:middle
可能的拒绝或失败

00:21:24.796 --> 00:21:26.076 A:middle
正如 Katie 提到的

00:21:26.076 --> 00:21:27.456 A:middle
提供有意义的目的字符串

00:21:27.456 --> 00:21:28.546 A:middle
也是一个很棒的想法

00:21:28.546 --> 00:21:30.316 A:middle
这样当用户

00:21:30.316 --> 00:21:31.226 A:middle
面对这些对话时

00:21:31.266 --> 00:21:33.326 A:middle
他们能够理解为什么

00:21:33.326 --> 00:21:34.756 A:middle
你们的 App 需要访问权限

00:21:35.396 --> 00:21:37.996 A:middle
我们还将进一步保护

00:21:37.996 --> 00:21:39.806 A:middle
敏感的用户数据

00:21:40.456 --> 00:21:42.036 A:middle
只有像备份工具

00:21:42.036 --> 00:21:44.106 A:middle
这样的专用 App

00:21:44.106 --> 00:21:45.006 A:middle
才需要访问这类数据

00:21:45.416 --> 00:21:46.396 A:middle
在“安全性与隐私”的

00:21:46.396 --> 00:21:48.336 A:middle
系统偏好设置面板中

00:21:48.336 --> 00:21:50.666 A:middle
我们通过直接征求用户同意

00:21:50.666 --> 00:21:53.776 A:middle
来保护这些位置

00:21:53.946 --> 00:21:55.236 A:middle
接下来 我们将介绍

00:21:55.236 --> 00:21:57.246 A:middle
运行时保护的增强

00:21:58.086 --> 00:21:58.876 A:middle
许多人想要用一种方法

00:21:58.876 --> 00:22:01.036 A:middle
将 SIP 保护扩展到

00:21:58.876 --> 00:22:01.036 A:middle
将 SIP 保护扩展到

00:22:01.146 --> 00:22:03.146 A:middle
自己的 App 中

00:22:03.886 --> 00:22:05.896 A:middle
在我们新的增强的运行时中

00:22:05.936 --> 00:22:07.446 A:middle
有一个新的安全基线

00:22:07.736 --> 00:22:09.466 A:middle
就是有风险的功能

00:22:09.826 --> 00:22:10.726 A:middle
需要被选择

00:22:11.376 --> 00:22:12.456 A:middle
除了强大的代码验证之外

00:22:12.456 --> 00:22:14.656 A:middle
它还保护了 App

00:22:14.656 --> 00:22:16.606 A:middle
不受代码注入的影响等

00:22:17.526 --> 00:22:18.826 A:middle
增强的运行时

00:22:18.826 --> 00:22:19.906 A:middle
完全向后兼容

00:22:20.146 --> 00:22:21.816 A:middle
它是通过 Xcode 中的

00:22:21.896 --> 00:22:23.176 A:middle
一个简单开关来选择的

00:22:24.636 --> 00:22:25.876 A:middle
最后 我们将介绍

00:22:25.876 --> 00:22:28.446 A:middle
已认证 App 的概念

00:22:28.996 --> 00:22:30.416 A:middle
它是一个

00:22:30.416 --> 00:22:32.036 A:middle
开发人员 ID 程序的扩展

00:22:32.036 --> 00:22:34.596 A:middle
针对那些发布在 Mac App Store 之外的 App

00:22:34.596 --> 00:22:35.896 A:middle
它有两个主要目标

00:22:36.406 --> 00:22:38.266 A:middle
第一个目标是

00:22:38.266 --> 00:22:40.356 A:middle
在恶意软件传播给我们的用户之前

00:22:40.356 --> 00:22:41.746 A:middle
能够比现在更快地检测到它们

00:22:42.346 --> 00:22:43.736 A:middle
第二个目标是

00:22:43.826 --> 00:22:45.026 A:middle
提供更细粒度的撤销功能

00:22:45.026 --> 00:22:46.846 A:middle
以便我们可以撤销某个

00:22:46.846 --> 00:22:48.256 A:middle
受损 App 的特定版本

00:22:48.256 --> 00:22:50.246 A:middle
而无需撤销

00:22:50.246 --> 00:22:52.946 A:middle
整个签名证书

00:22:53.786 --> 00:22:54.816 A:middle
这是它的工作原理

00:22:55.316 --> 00:22:56.846 A:middle
你们修复了漏洞

00:22:56.846 --> 00:22:57.866 A:middle
然后像以前一样构建你们的 App

00:22:57.866 --> 00:22:59.126 A:middle
用你们的

00:22:59.126 --> 00:23:00.426 A:middle
开发人员 ID 证书签名

00:22:59.126 --> 00:23:00.426 A:middle
开发人员 ID 证书签名

00:23:01.096 --> 00:23:02.356 A:middle
但在发布给用户之前

00:23:02.356 --> 00:23:04.156 A:middle
你们需要将 App 提交给

00:23:04.156 --> 00:23:05.626 A:middle
开发人员 ID 认证服务

00:23:06.336 --> 00:23:08.336 A:middle
经过认证之后

00:23:08.526 --> 00:23:09.986 A:middle
你们就可以通过现有的渠道发布 App

00:23:11.186 --> 00:23:13.266 A:middle
如果你们的用户在他们的系统上

00:23:13.266 --> 00:23:15.536 A:middle
运行这个 App

00:23:15.536 --> 00:23:16.826 A:middle
macOS Mojave 将与认证服务进行核对

00:23:16.826 --> 00:23:18.006 A:middle
以确保这个 App 通过认证

00:23:18.006 --> 00:23:21.056 A:middle
且不是恶意 App

00:23:22.106 --> 00:23:25.026 A:middle
这个服务不同于 App 审核

00:23:25.026 --> 00:23:26.186 A:middle
由于认证服务的缘故

00:23:26.186 --> 00:23:27.926 A:middle
目前还不需要新的

00:23:27.926 --> 00:23:29.906 A:middle
针对开发人员 ID App 的准则

00:23:30.256 --> 00:23:32.216 A:middle
它专门用于

00:23:32.216 --> 00:23:34.726 A:middle
在安全层面上分析 App

00:23:35.996 --> 00:23:37.796 A:middle
未来的 macOS 版本

00:23:37.796 --> 00:23:40.316 A:middle
将要求所有的开发人员 ID App

00:23:40.316 --> 00:23:41.546 A:middle
在安装之前

00:23:41.546 --> 00:23:43.136 A:middle
必须经过认证服务

00:23:43.216 --> 00:23:44.356 A:middle
所以希望你们做好准备

00:23:44.356 --> 00:23:46.616 A:middle
这个特性已在 Beta 版中投入使用

00:23:46.616 --> 00:23:48.596 A:middle
我们鼓励你们试用一下

00:23:48.596 --> 00:23:49.876 A:middle
并为我们提供反馈

00:23:50.996 --> 00:23:52.136 A:middle
这些就是在 macOS Mojave 中

00:23:52.186 --> 00:23:54.846 A:middle
对 Gatekeeper 的增强

00:23:55.276 --> 00:23:56.796 A:middle
现在让我们换个话题

00:23:56.796 --> 00:23:58.626 A:middle
谈谈 macOS 的用户体验

00:23:59.056 --> 00:24:01.746 A:middle
为此 我想邀请 Kristen 上台

00:23:59.056 --> 00:24:01.746 A:middle
为此 我想邀请 Kristen 上台

00:24:01.746 --> 00:24:01.976 A:middle
Kristen

00:24:02.516 --> 00:24:05.546 A:middle
[ 掌声 ]

00:24:06.046 --> 00:24:06.906 A:middle
&gt;&gt; 谢谢 Sebastian

00:24:06.906 --> 00:24:07.766 A:middle
很高兴来到这里

00:24:08.556 --> 00:24:09.806 A:middle
我们在 macOS Mojave 中

00:24:09.806 --> 00:24:11.546 A:middle
加入了很多很棒的功能

00:24:11.546 --> 00:24:12.656 A:middle
包括对访达 屏幕快照

00:24:12.896 --> 00:24:14.836 A:middle
以及桌面文档的改进

00:24:15.116 --> 00:24:17.046 A:middle
我想特别强调其中一个

00:24:17.046 --> 00:24:18.166 A:middle
你们作为开发人员

00:24:18.166 --> 00:24:19.536 A:middle
可以利用的功能

00:24:19.536 --> 00:24:20.956 A:middle
它就是 Quick Actions

00:24:21.646 --> 00:24:26.746 A:middle
使用访达的 Quick Actions 功能

00:24:26.746 --> 00:24:28.296 A:middle
我们将你需要的工具

00:24:28.296 --> 00:24:29.826 A:middle
根据你需要的场景 嵌入到访达的

00:24:29.826 --> 00:24:30.846 A:middle
预览面板中

00:24:31.826 --> 00:24:33.766 A:middle
你可以在文件上

00:24:33.826 --> 00:24:35.166 A:middle
执行一些常见的操作

00:24:35.166 --> 00:24:35.866 A:middle
而不需要离开访达

00:24:36.586 --> 00:24:38.646 A:middle
针对不同的文件类型

00:24:38.646 --> 00:24:39.626 A:middle
支持不同的操作

00:24:39.626 --> 00:24:46.366 A:middle
你们可以看到这里的视频和 PDF

00:24:47.416 --> 00:24:48.876 A:middle
而且不仅仅局限于内置的操作

00:24:49.326 --> 00:24:51.296 A:middle
我们知道专业用户

00:24:51.296 --> 00:24:52.196 A:middle
喜欢创建自己的操作

00:24:52.776 --> 00:24:54.766 A:middle
这些操作也可以

00:24:54.976 --> 00:24:57.356 A:middle
显示在访达中

00:24:57.536 --> 00:24:58.856 A:middle
你作为开发人员能够通过 App 扩展

00:24:58.856 --> 00:25:00.496 A:middle
从你们的 App 中

00:24:58.856 --> 00:25:00.496 A:middle
从你们的 App 中

00:25:00.496 --> 00:25:02.636 A:middle
提供自定义操作

00:25:03.466 --> 00:25:05.366 A:middle
作为终端用户

00:25:05.366 --> 00:25:07.376 A:middle
你们还可以将 shell 脚本

00:25:07.376 --> 00:25:09.146 A:middle
Applesscripts 和 Automator 操作

00:25:09.146 --> 00:25:11.496 A:middle
合并到 Automator 中

00:25:11.496 --> 00:25:12.186 A:middle
以创建一个操作包

00:25:12.246 --> 00:25:14.816 A:middle
这些操作包

00:25:14.816 --> 00:25:17.046 A:middle
将基于文件类型

00:25:17.046 --> 00:25:18.726 A:middle
显示在访达中

00:25:19.456 --> 00:25:20.986 A:middle
这些自定义操作

00:25:20.986 --> 00:25:23.216 A:middle
在访达中拥有一席之地

00:25:23.216 --> 00:25:24.726 A:middle
在触控栏中更是如此

00:25:25.176 --> 00:25:26.346 A:middle
触控栏经过自定义后

00:25:26.346 --> 00:25:26.996 A:middle
变得更加出色

00:25:27.346 --> 00:25:28.686 A:middle
你们可以自定义触控栏

00:25:28.686 --> 00:25:29.906 A:middle
能够随时或在按下某个按钮时

00:25:29.906 --> 00:25:31.576 A:middle
显示这些操作

00:25:33.006 --> 00:25:35.546 A:middle
接下来 在今天上午的主题演讲中

00:25:35.626 --> 00:25:37.566 A:middle
你们看到了另一项

00:25:37.566 --> 00:25:39.906 A:middle
我们非常感兴趣的技术

00:25:39.906 --> 00:25:42.796 A:middle
一种可以将 iOS App

00:25:43.856 --> 00:25:44.626 A:middle
引入 Mac 的简单方法

00:25:44.896 --> 00:25:46.076 A:middle
我们在 “News” “股市”

00:25:46.076 --> 00:25:48.016 A:middle
“语音备忘录”和“家庭”

00:25:48.016 --> 00:25:49.426 A:middle
这四款 App 中

00:25:49.976 --> 00:25:52.486 A:middle
开发这一技术

00:25:53.216 --> 00:25:57.076 A:middle
这些 App 利用了 UIKit

00:25:57.336 --> 00:25:59.376 A:middle
它是一种可以交付

00:25:59.376 --> 00:26:01.746 A:middle
优秀 Mac App 的新方法

00:25:59.376 --> 00:26:01.746 A:middle
优秀 Mac App 的新方法

00:26:01.746 --> 00:26:03.396 A:middle
当然 AppKit 是我们

00:26:03.396 --> 00:26:04.846 A:middle
主要的原生框架

00:26:04.846 --> 00:26:06.846 A:middle
它充分地利用了 Mac

00:26:06.846 --> 00:26:07.596 A:middle
提供的所有功能

00:26:07.936 --> 00:26:11.066 A:middle
我们绝不能忽略这一点

00:26:11.066 --> 00:26:12.286 A:middle
然而我们注意到

00:26:12.286 --> 00:26:14.186 A:middle
很多人都有 iOS App

00:26:14.186 --> 00:26:15.396 A:middle
却没有提供原生的 Mac 体验

00:26:15.396 --> 00:26:17.306 A:middle
针对这种情况

00:26:17.306 --> 00:26:18.476 A:middle
我们向你们介绍一种

00:26:18.476 --> 00:26:20.436 A:middle
能够把你们的 App

00:26:20.436 --> 00:26:21.226 A:middle
移植到 Mac 上的简单方法

00:26:22.346 --> 00:26:24.206 A:middle
那么我们怎么做呢

00:26:25.216 --> 00:26:27.016 A:middle
这些 UIKit App

00:26:27.016 --> 00:26:28.576 A:middle
在原生堆栈上的

00:26:28.576 --> 00:26:29.026 A:middle
原生环境中运行

00:26:29.196 --> 00:26:30.856 A:middle
如果你们仔细观察

00:26:30.856 --> 00:26:32.446 A:middle
你们会发现 UIKit App 下面的堆栈

00:26:32.446 --> 00:26:34.206 A:middle
和 AppKit App 下面的堆栈

00:26:34.206 --> 00:26:35.976 A:middle
有很多共同点

00:26:35.976 --> 00:26:37.616 A:middle
事实上 这些环境是建立在

00:26:37.616 --> 00:26:39.336 A:middle
一个共同的基础之上的

00:26:39.596 --> 00:26:40.816 A:middle
然而随着时间的推移 这些基础已经

00:26:40.816 --> 00:26:41.676 A:middle
在一定程度上分散了

00:26:42.826 --> 00:26:44.696 A:middle
我们正在利用这个机会

00:26:44.846 --> 00:26:46.466 A:middle
对底层进行合并

00:26:47.136 --> 00:26:48.546 A:middle
这对之前不曾接触这项技术的

00:26:48.546 --> 00:26:49.886 A:middle
开发人员来说是一个好消息

00:26:49.886 --> 00:26:51.186 A:middle
因为它可以让你们更容易地

00:26:51.186 --> 00:26:52.836 A:middle
编写可移植的代码

00:26:53.466 --> 00:26:56.336 A:middle
这些 App 具有所有

00:26:56.336 --> 00:26:59.026 A:middle
典型的 Mac 特性

00:26:59.026 --> 00:26:59.976 A:middle
现在我想向你们展示一下

00:27:14.046 --> 00:27:15.466 A:middle
你已经看到了 iPad 的

00:27:15.946 --> 00:27:17.306 A:middle
新“股市” App

00:27:17.846 --> 00:27:19.426 A:middle
我现在运行的是这个 App 的 Mac 版本

00:27:19.426 --> 00:27:20.906 A:middle
它是基于同样的资源构建的

00:27:22.046 --> 00:27:23.356 A:middle
鼠标事件被映射到 UI 事件

00:27:23.356 --> 00:27:25.336 A:middle
因此我可以在关注列表中

00:27:25.336 --> 00:27:27.116 A:middle
点按一个股票代号

00:27:27.586 --> 00:27:28.636 A:middle
来查看更多的信息

00:27:29.306 --> 00:27:30.896 A:middle
我可以在交互式图表上

00:27:30.896 --> 00:27:32.366 A:middle
移动鼠标

00:27:32.366 --> 00:27:34.056 A:middle
来查看某个时间点的价格

00:27:34.056 --> 00:27:35.416 A:middle
我还可以点按并拖动

00:27:35.416 --> 00:27:37.086 A:middle
来查看一段时间内的股价变化

00:27:37.736 --> 00:27:39.406 A:middle
我可以在 App 中

00:27:39.406 --> 00:27:40.626 A:middle
点按一篇文章并打开它

00:27:40.626 --> 00:27:42.666 A:middle
既然这是一个 Mac 窗口

00:27:42.666 --> 00:27:44.766 A:middle
我当然可以任意调整大小

00:27:45.266 --> 00:27:46.686 A:middle
也可以全屏显示

00:27:46.766 --> 00:27:49.816 A:middle
另一个事件映射的例子是

00:27:49.816 --> 00:27:51.466 A:middle
我可以使用两指滚动

00:27:51.466 --> 00:27:52.296 A:middle
来滑动网页

00:27:52.516 --> 00:27:54.216 A:middle
如果我想复制一些文本

00:27:54.216 --> 00:27:57.126 A:middle
我可以选择它 选中它

00:27:57.126 --> 00:28:02.686 A:middle
然后拖拽到我的“备忘录” App 中

00:27:57.126 --> 00:28:02.686 A:middle
然后拖拽到我的“备忘录” App 中

00:28:03.016 --> 00:28:04.426 A:middle
在这个备忘录中

00:28:04.586 --> 00:28:06.406 A:middle
我有一个新闻文章的链接

00:28:06.406 --> 00:28:07.826 A:middle
我可以点按它

00:28:07.826 --> 00:28:09.736 A:middle
然后它就会直接在 “News” App 中打开

00:28:10.126 --> 00:28:12.666 A:middle
我们用一些项目

00:28:12.786 --> 00:28:15.826 A:middle
填充了这个 App 的菜单项

00:28:16.126 --> 00:28:17.286 A:middle
例如 我可以进入 “File（文件）” 菜单

00:28:17.286 --> 00:28:19.446 A:middle
然后选择 “Follow Channel（关注频道）”

00:28:20.316 --> 00:28:22.406 A:middle
请注意 ESPN 是如何

00:28:22.406 --> 00:28:24.096 A:middle
直接过渡到侧边栏中的

00:28:24.916 --> 00:28:26.366 A:middle
在工具栏中可以看到

00:28:26.366 --> 00:28:28.136 A:middle
另一个 Mac 技术

00:28:28.136 --> 00:28:29.606 A:middle
下面的内容为这里的渲染

00:28:29.606 --> 00:28:31.206 A:middle
提供了一些红色

00:28:31.886 --> 00:28:33.256 A:middle
我们在工具栏中

00:28:33.256 --> 00:28:34.996 A:middle
有一些窗口的控件

00:28:34.996 --> 00:28:36.906 A:middle
包括分享按钮

00:28:36.906 --> 00:28:38.266 A:middle
这样我就可以点按

00:28:38.266 --> 00:28:39.396 A:middle
并向朋友分享这篇文章

00:28:40.176 --> 00:28:44.186 A:middle
这就是我们对 Mac 上的

00:28:44.526 --> 00:28:44.966 A:middle
UIKit App 的简要介绍

00:28:45.516 --> 00:28:50.636 A:middle
[ 掌声 ]

00:28:51.136 --> 00:28:51.676 A:middle
谢谢大家

00:28:53.376 --> 00:28:54.686 A:middle
我们一直在开发这一项技术

00:28:54.716 --> 00:28:56.266 A:middle
并努力对它

00:28:56.266 --> 00:28:57.756 A:middle
进行全面的审查

00:28:57.756 --> 00:28:59.316 A:middle
我们计划在明年

00:28:59.316 --> 00:29:00.856 A:middle
将其提供给你们

00:28:59.316 --> 00:29:00.856 A:middle
将其提供给你们

00:29:00.856 --> 00:29:02.886 A:middle
和你们的 App

00:29:04.496 --> 00:29:09.216 A:middle
接下来 深色模式

00:29:09.406 --> 00:29:12.196 A:middle
深色模式是 macOS Mojave 的

00:29:12.196 --> 00:29:13.966 A:middle
一项重要更新

00:29:13.966 --> 00:29:14.576 A:middle
我们觉得它看起来十分惊艳

00:29:14.576 --> 00:29:15.956 A:middle
让我们简要地了解一下

00:29:20.076 --> 00:29:21.276 A:middle
窗口背景为深色

00:29:21.566 --> 00:29:23.786 A:middle
使得内容更为突出

00:29:24.346 --> 00:29:26.216 A:middle
侧边栏是半透明的

00:29:26.456 --> 00:29:28.556 A:middle
内容显示变得更为生动

00:29:28.976 --> 00:29:31.456 A:middle
并与窗口下面的内容

00:29:31.486 --> 00:29:33.076 A:middle
形成对比

00:29:33.076 --> 00:29:36.506 A:middle
在一些情况下 我们发现

00:29:36.506 --> 00:29:38.356 A:middle
改变图标很有必要

00:29:38.356 --> 00:29:40.136 A:middle
比如你们可以看到这个

00:29:40.186 --> 00:29:42.236 A:middle
颜色稍微变深的照片图标

00:29:42.236 --> 00:29:44.126 A:middle
和这个深色的废纸篓图标

00:29:45.136 --> 00:29:46.346 A:middle
这里还有一些

00:29:46.346 --> 00:29:46.946 A:middle
非常微妙的细节

00:29:47.756 --> 00:29:49.176 A:middle
窗口的背景

00:29:49.176 --> 00:29:50.536 A:middle
也受桌面颜色的

00:29:50.536 --> 00:29:52.096 A:middle
轻微影响

00:29:53.716 --> 00:29:55.316 A:middle
为了向你们展示这个特性

00:29:55.316 --> 00:29:57.296 A:middle
这个窗口被置于

00:29:57.296 --> 00:29:57.976 A:middle
两张差别很大的桌面图片之上

00:29:59.736 --> 00:30:01.446 A:middle
在左边

00:29:59.736 --> 00:30:01.446 A:middle
在左边

00:30:01.446 --> 00:30:02.976 A:middle
蓝色桌面图片上的窗口

00:30:03.066 --> 00:30:05.166 A:middle
有轻微的蓝色色调

00:30:05.666 --> 00:30:07.346 A:middle
而在右边

00:30:07.346 --> 00:30:08.516 A:middle
橙色桌面图片上的窗口

00:30:08.516 --> 00:30:10.366 A:middle
有轻微的橙色色调

00:30:10.996 --> 00:30:12.406 A:middle
这不是半透明的

00:30:12.406 --> 00:30:13.596 A:middle
我们实际上

00:30:13.596 --> 00:30:14.776 A:middle
是从桌面获取平均的颜色

00:30:14.816 --> 00:30:16.966 A:middle
然后将其混合到不透明的背景中

00:30:16.966 --> 00:30:18.536 A:middle
这样 你们的窗口就能够

00:30:18.536 --> 00:30:20.056 A:middle
在各种桌面图片上

00:30:20.056 --> 00:30:21.436 A:middle
都看起来协调美观

00:30:21.436 --> 00:30:24.946 A:middle
让我们看看 为了支持深色模式

00:30:24.946 --> 00:30:26.986 A:middle
你们需要在 App 中进行的操作

00:30:28.656 --> 00:30:30.516 A:middle
因为我们想要确保

00:30:30.516 --> 00:30:31.806 A:middle
与你们的 App 保持兼容

00:30:31.806 --> 00:30:32.986 A:middle
所以我们不会自动为你们选择

00:30:33.396 --> 00:30:34.836 A:middle
对深色模式的支持

00:30:35.106 --> 00:30:36.426 A:middle
你们需要构建

00:30:36.426 --> 00:30:38.726 A:middle
macOS Mojave SDK

00:30:40.046 --> 00:30:42.026 A:middle
例如 这就是 “Keynote 讲演”

00:30:42.026 --> 00:30:43.906 A:middle
在 Mojave 上构建后

00:30:44.046 --> 00:30:46.096 A:middle
首次运行时的样子

00:30:47.026 --> 00:30:48.696 A:middle
它有一个深色的工具栏

00:30:48.696 --> 00:30:50.326 A:middle
但它在其他方面并没有按照

00:30:50.386 --> 00:30:51.756 A:middle
我们希望的方式 应用深色模式

00:30:53.146 --> 00:30:54.506 A:middle
格式部分的

00:30:54.506 --> 00:30:55.606 A:middle
背景颜色太浅

00:30:56.396 --> 00:30:58.866 A:middle
工具栏控件变得

00:30:58.866 --> 00:31:00.696 A:middle
模糊且难以阅读

00:30:58.866 --> 00:31:00.696 A:middle
模糊且难以阅读

00:31:01.096 --> 00:31:02.546 A:middle
侧边栏用的是错误的材料

00:31:02.546 --> 00:31:05.016 A:middle
它过于半透明

00:31:05.016 --> 00:31:11.246 A:middle
在控件的选定部分中

00:31:11.246 --> 00:31:12.906 A:middle
我们发现在白色背景上

00:31:13.086 --> 00:31:14.056 A:middle
存在白色的 Glyph

00:31:15.626 --> 00:31:17.266 A:middle
然而好消息是

00:31:17.266 --> 00:31:20.426 A:middle
这些问题都很容易解决

00:31:20.776 --> 00:31:22.426 A:middle
我们有简单的 API

00:31:22.426 --> 00:31:23.426 A:middle
来支持深色模式的所有需求

00:31:23.426 --> 00:31:25.536 A:middle
事实上 其中的大多数

00:31:25.536 --> 00:31:26.846 A:middle
已经存在多年了

00:31:26.846 --> 00:31:29.916 A:middle
我们只需要做少量的添加

00:31:29.916 --> 00:31:30.576 A:middle
NSColor

00:31:32.246 --> 00:31:34.376 A:middle
带有 backgroundColor 属性的

00:31:34.376 --> 00:31:35.796 A:middle
容器视图

00:31:36.926 --> 00:31:39.036 A:middle
针对材料的 NSVisualEffectView

00:31:40.606 --> 00:31:42.366 A:middle
模板图形

00:31:42.366 --> 00:31:44.476 A:middle
以及一种新的方式来着色你们的内容

00:31:46.316 --> 00:31:48.456 A:middle
我们用这些 API 更新了 Keynote 讲演

00:31:48.456 --> 00:31:50.476 A:middle
结果就是这样

00:31:51.196 --> 00:31:51.976 A:middle
看起来很棒

00:31:54.696 --> 00:31:56.416 A:middle
这些都是非常简单的改变

00:31:56.666 --> 00:31:58.436 A:middle
我们邀请你们今天来试试

00:31:59.006 --> 00:32:00.236 A:middle
如果你们已经遵循了 在系统颜色中

00:31:59.006 --> 00:32:00.236 A:middle
如果你们已经遵循了 在系统颜色中

00:32:00.236 --> 00:32:02.076 A:middle
使用素材目录的最佳实践

00:32:02.076 --> 00:32:03.596 A:middle
那么你们可能会

00:32:03.596 --> 00:32:05.136 A:middle
惊喜地发现

00:32:05.186 --> 00:32:06.646 A:middle
你们已经非常接近成功了

00:32:07.306 --> 00:32:08.556 A:middle
由于这些技术仍然可以

00:32:08.556 --> 00:32:10.486 A:middle
在以前的版本中使用

00:32:10.756 --> 00:32:12.146 A:middle
所以你们可以应用它们

00:32:12.146 --> 00:32:12.866 A:middle
并轻松地进行向后兼容

00:32:13.706 --> 00:32:14.976 A:middle
当然 这取决于

00:32:14.976 --> 00:32:16.456 A:middle
你们的 App 中

00:32:16.456 --> 00:32:18.256 A:middle
有多少自定义控件

00:32:18.256 --> 00:32:20.356 A:middle
但对于我们的一些 App 来说

00:32:20.356 --> 00:32:21.786 A:middle
仅需要一天就可以完成

00:32:22.006 --> 00:32:23.346 A:middle
我们也为你们提供了

00:32:23.346 --> 00:32:24.096 A:middle
一些有用的工具

00:32:24.096 --> 00:32:26.536 A:middle
我想有请 Matthew

00:32:26.656 --> 00:32:28.306 A:middle
来到讲台

00:32:28.306 --> 00:32:30.296 A:middle
并向你们展示 Xcode 10

00:32:30.296 --> 00:32:31.976 A:middle
如何支持深色模式的应用等内容

00:32:32.516 --> 00:32:38.726 A:middle
[ 掌声 ]

00:32:39.226 --> 00:32:39.916 A:middle
&gt;&gt; 谢谢 Kristen

00:32:40.676 --> 00:32:42.166 A:middle
我们今年发布的 Xcode 版本

00:32:42.166 --> 00:32:43.486 A:middle
关注的是生产力

00:32:44.156 --> 00:32:45.116 A:middle
工作流的改进

00:32:45.266 --> 00:32:47.236 A:middle
性能的改进

00:32:47.236 --> 00:32:50.586 A:middle
以及对所有 SDK 新特性的支持

00:32:50.586 --> 00:32:51.906 A:middle
当然

00:32:51.906 --> 00:32:54.566 A:middle
Xcode 在 macOS Mojave 上运行时

00:32:54.566 --> 00:32:55.556 A:middle
提供了全新的外观和使用感受

00:32:56.006 --> 00:32:57.956 A:middle
让我们先来看看

00:32:57.956 --> 00:32:59.676 A:middle
Xcode 如何让你们的 Mac App

00:32:59.676 --> 00:33:01.976 A:middle
在深色模式下 也拥有出色的外观

00:32:59.676 --> 00:33:01.976 A:middle
在深色模式下 也拥有出色的外观

00:33:06.046 --> 00:33:08.826 A:middle
现在我们回到了太阳系 App

00:33:09.576 --> 00:33:10.886 A:middle
我们已经把它转换成深色模式

00:33:10.886 --> 00:33:12.896 A:middle
到目前为止我们已经 取得了很大的进展

00:33:13.356 --> 00:33:15.036 A:middle
但还有一些改进

00:33:15.036 --> 00:33:15.936 A:middle
我需要在这里完成

00:33:16.716 --> 00:33:17.786 A:middle
设计程序为我们提供了一个

00:33:17.786 --> 00:33:19.746 A:middle
颜色更深的地球图形

00:33:20.036 --> 00:33:21.806 A:middle
我可以在

00:33:22.006 --> 00:33:23.786 A:middle
这两个硬编码的方框里

00:33:23.786 --> 00:33:24.466 A:middle
改变颜色

00:33:25.286 --> 00:33:27.006 A:middle
Xcode 的素材目录

00:33:27.056 --> 00:33:27.546 A:middle
使这变得很容易

00:33:28.166 --> 00:33:29.866 A:middle
我们从这个图形开始

00:33:31.026 --> 00:33:32.406 A:middle
我需要切换到素材标签页

00:33:32.406 --> 00:33:34.066 A:middle
我们可以看到

00:33:34.066 --> 00:33:35.946 A:middle
我已经定义了

00:33:35.996 --> 00:33:37.116 A:middle
所有颜色的深色变量

00:33:38.496 --> 00:33:39.896 A:middle
我将选择

00:33:39.896 --> 00:33:41.576 A:middle
包含所有图形的组

00:33:41.686 --> 00:33:43.026 A:middle
比如 我想为这个行星图形

00:33:43.026 --> 00:33:45.276 A:middle
添加一个深色变体 非常简单

00:33:46.126 --> 00:33:46.796 A:middle
我选择它

00:33:47.426 --> 00:33:49.416 A:middle
进入检查器并添加一个

00:33:49.416 --> 00:33:50.096 A:middle
深色变体

00:33:50.586 --> 00:33:52.246 A:middle
我的设计师已经把这些素材发给了我

00:33:52.246 --> 00:33:53.596 A:middle
所以我可以把它们

00:33:53.596 --> 00:33:56.676 A:middle
从我的下载文件夹中取出

00:33:56.676 --> 00:33:57.146 A:middle
并放到目录中

00:33:58.176 --> 00:33:58.866 A:middle
就是这样

00:33:59.536 --> 00:34:00.786 A:middle
当我回到我的界面时

00:33:59.536 --> 00:34:00.786 A:middle
当我回到我的界面时

00:34:00.786 --> 00:34:02.346 A:middle
你们将看到 更新后的地球图形

00:34:02.346 --> 00:34:03.886 A:middle
已经匹配了

00:34:04.206 --> 00:34:05.386 A:middle
界面构建器画布的外观

00:34:07.176 --> 00:34:08.886 A:middle
我已经指定了我需要的

00:34:08.886 --> 00:34:10.096 A:middle
所有颜色变体

00:34:10.666 --> 00:34:12.246 A:middle
为了更新这些方框

00:34:12.246 --> 00:34:14.126 A:middle
我只选择这两个框

00:34:14.126 --> 00:34:15.666 A:middle
进入检查器并将填充颜色

00:34:15.666 --> 00:34:17.966 A:middle
更改为目录中的一个颜色

00:34:18.596 --> 00:34:20.136 A:middle
我们选择 badgeBackgroundColor

00:34:21.356 --> 00:34:22.846 A:middle
很好 现在我的界面

00:34:22.846 --> 00:34:23.466 A:middle
看起来十分漂亮

00:34:24.485 --> 00:34:26.255 A:middle
在设计界面时

00:34:26.255 --> 00:34:27.545 A:middle
我通常喜欢检查其他的外观

00:34:27.545 --> 00:34:29.466 A:middle
因为我需要

00:34:29.466 --> 00:34:30.565 A:middle
评估我的进展

00:34:31.326 --> 00:34:32.795 A:middle
所以我们需要使用界面构建器

00:34:33.835 --> 00:34:34.896 A:middle
在底部

00:34:34.896 --> 00:34:36.516 A:middle
这个新的外观栏允许我

00:34:36.516 --> 00:34:38.576 A:middle
在外观之间切换

00:34:39.356 --> 00:34:40.255 A:middle
我只要选择左边的外观

00:34:40.255 --> 00:34:41.485 A:middle
就可以看到

00:34:41.485 --> 00:34:43.565 A:middle
我的 App 的浅色外观

00:34:44.266 --> 00:34:46.076 A:middle
这样我就可以很容易地评估我的进展

00:34:46.906 --> 00:34:49.466 A:middle
让我们运行这个 App

00:34:49.466 --> 00:34:50.136 A:middle
看看结果怎么样

00:34:51.295 --> 00:34:52.536 A:middle
我们需要更新我们的素材

00:34:52.536 --> 00:34:53.766 A:middle
并启动 App

00:34:54.505 --> 00:34:55.916 A:middle
我们在这里可以看到

00:34:55.916 --> 00:34:57.106 A:middle
App 启动了

00:34:58.046 --> 00:34:59.606 A:middle
很好 看起来很不错

00:35:00.226 --> 00:35:02.406 A:middle
这个 App 已经能够

00:35:02.406 --> 00:35:04.226 A:middle
以深色模式启动 进而匹配了我的系统

00:35:04.916 --> 00:35:06.466 A:middle
在我开发 App 的过程中

00:35:06.466 --> 00:35:07.556 A:middle
我也可以改变它的外观

00:35:08.486 --> 00:35:09.866 A:middle
在调试栏的下面

00:35:09.866 --> 00:35:11.516 A:middle
是一个新的外观切换开关

00:35:11.516 --> 00:35:13.476 A:middle
我也可以在触控栏中使用它

00:35:13.476 --> 00:35:15.146 A:middle
并访问所有的外观

00:35:15.666 --> 00:35:17.366 A:middle
我可以选择浅色模式 深色模式

00:35:17.366 --> 00:35:19.566 A:middle
甚至高对比度模式

00:35:19.566 --> 00:35:21.196 A:middle
来评估辅助功能

00:35:21.966 --> 00:35:23.766 A:middle
现在我选择了浅色模式

00:35:23.766 --> 00:35:25.816 A:middle
我们加载这些素材

00:35:25.816 --> 00:35:27.446 A:middle
我的 App 就会处于浅色模式

00:35:28.436 --> 00:35:30.496 A:middle
只需使用素材目录

00:35:30.496 --> 00:35:32.186 A:middle
界面构建器

00:35:32.186 --> 00:35:33.946 A:middle
和我们的调试工具

00:35:33.946 --> 00:35:35.176 A:middle
你们就可以让你们的 App

00:35:35.176 --> 00:35:36.566 A:middle
在黑暗模式下也拥有出色的外观

00:35:37.516 --> 00:35:45.566 A:middle
[ 掌声 ]

00:35:46.066 --> 00:35:47.796 A:middle
我知道你们中的许多人

00:35:47.796 --> 00:35:49.456 A:middle
一直想要

00:35:49.566 --> 00:35:50.646 A:middle
在 Xcode 中显示暗色模式

00:35:51.396 --> 00:35:52.616 A:middle
它已经成为呼声最高的

00:35:52.616 --> 00:35:54.076 A:middle
请求之一

00:35:54.076 --> 00:35:55.296 A:middle
事实上 就在几周前

00:35:55.296 --> 00:35:56.686 A:middle
App Store 中出现了一条

00:35:56.686 --> 00:35:58.596 A:middle
关于诉求这个功能的评论

00:35:58.856 --> 00:36:00.436 A:middle
这个用户叫做

00:35:58.856 --> 00:36:00.436 A:middle
这个用户叫做

00:36:00.436 --> 00:36:02.456 A:middle
Ronnie Bo Bonnie

00:36:02.456 --> 00:36:03.436 A:middle
这是真的

00:36:03.436 --> 00:36:04.216 A:middle
并不是我编造的

00:36:04.556 --> 00:36:05.556 A:middle
但我只是想花点时间 然后说

00:36:05.556 --> 00:36:07.436 A:middle
Ronnie 如果你也在这里的话

00:36:07.436 --> 00:36:09.536 A:middle
你不用出卖自己的灵魂了

00:36:10.516 --> 00:36:12.516 A:middle
[ 笑声 ]

00:36:13.516 --> 00:36:15.866 A:middle
[ 掌声 ]

00:36:16.366 --> 00:36:17.586 A:middle
我们也做出了其他的一些

00:36:17.586 --> 00:36:18.906 A:middle
针对设计工具的改进

00:36:18.906 --> 00:36:19.666 A:middle
今天与你们分享

00:36:21.286 --> 00:36:23.256 A:middle
基于表格的 UI 比如“偏好设置”和“检查器”

00:36:23.256 --> 00:36:25.996 A:middle
在 Mac App 中是很常见的

00:36:26.036 --> 00:36:27.816 A:middle
Cocoa 的 NSGridView

00:36:27.816 --> 00:36:30.396 A:middle
是布局它们的最佳系统

00:36:30.516 --> 00:36:31.766 A:middle
所以我们将 NSGridView 的功能

00:36:31.876 --> 00:36:33.656 A:middle
引入到界面构建器中

00:36:33.656 --> 00:36:35.496 A:middle
这样你们就可以

00:36:35.496 --> 00:36:37.166 A:middle
像在电子表格中

00:36:37.506 --> 00:36:39.126 A:middle
设计表格一样

00:36:39.126 --> 00:36:39.606 A:middle
设计基于列和行的 UI

00:36:40.636 --> 00:36:41.676 A:middle
拖放内容 [ 掌声 ]

00:36:42.206 --> 00:36:42.696 A:middle
是的

00:36:44.786 --> 00:36:48.696 A:middle
你们可以为此鼓掌

00:36:48.806 --> 00:36:49.756 A:middle
电子表格可以很酷

00:36:49.756 --> 00:36:52.866 A:middle
你们可以拖放内容

00:36:52.906 --> 00:36:54.476 A:middle
使用符合环境操作

00:36:54.476 --> 00:36:56.296 A:middle
并获得诸如从右到左的布局

00:36:56.356 --> 00:36:57.436 A:middle
等内容的系统访问

00:36:58.456 --> 00:36:59.476 A:middle
在设计界面时

00:36:59.476 --> 00:37:01.166 A:middle
库是一个重要的工具

00:36:59.476 --> 00:37:01.166 A:middle
库是一个重要的工具

00:37:01.266 --> 00:37:02.796 A:middle
我们为你们提供一个

00:37:02.796 --> 00:37:04.046 A:middle
全新的工作流

00:37:04.676 --> 00:37:05.956 A:middle
因为现在的库已经

00:37:06.126 --> 00:37:07.466 A:middle
与检查器分离了

00:37:08.246 --> 00:37:09.596 A:middle
你们现在可以把库移动到

00:37:09.596 --> 00:37:10.906 A:middle
任何你们想要的地方

00:37:11.556 --> 00:37:13.196 A:middle
可以调整大小

00:37:13.196 --> 00:37:13.666 A:middle
以匹配你们的布局

00:37:14.286 --> 00:37:15.846 A:middle
还可以在工作时

00:37:15.846 --> 00:37:17.276 A:middle
保持库的开启

00:37:17.276 --> 00:37:18.966 A:middle
或者在完成时 自动关闭库

00:37:19.516 --> 00:37:25.066 A:middle
[ 掌声 ]

00:37:25.566 --> 00:37:26.896 A:middle
这个库可以很好地处理

00:37:26.896 --> 00:37:28.176 A:middle
我们所有的内容类型

00:37:28.246 --> 00:37:31.596 A:middle
包括媒体和代码片段

00:37:31.596 --> 00:37:32.746 A:middle
最后 有了我们的设计工具

00:37:32.746 --> 00:37:33.876 A:middle
你们会发现

00:37:33.876 --> 00:37:35.636 A:middle
它们变得更灵活

00:37:35.636 --> 00:37:37.536 A:middle
拥有更快的文档加载速度

00:37:37.536 --> 00:37:39.436 A:middle
和更具响应性的画布交互

00:37:40.666 --> 00:37:42.056 A:middle
我们也将大量的精力

00:37:42.056 --> 00:37:43.706 A:middle
放在我们的源代码编辑工具

00:37:43.756 --> 00:37:46.716 A:middle
使它们能够保持快速 流畅

00:37:46.716 --> 00:37:47.286 A:middle
并不断提供有用的信息

00:37:47.286 --> 00:37:49.706 A:middle
我们从性能出发

00:37:49.706 --> 00:37:50.626 A:middle
使得编辑器能够

00:37:50.626 --> 00:37:52.246 A:middle
以更快的速度加载大型文档

00:37:52.306 --> 00:37:55.996 A:middle
同时保持 每秒 60 帧每秒的平滑滚动

00:37:57.016 --> 00:37:58.596 A:middle
接下来

00:37:58.666 --> 00:38:00.516 A:middle
我们对 SourceKit 的

00:37:58.666 --> 00:38:00.516 A:middle
我们对 SourceKit 的

00:38:00.516 --> 00:38:01.856 A:middle
稳定性加倍

00:38:01.856 --> 00:38:02.736 A:middle
并增强语言集成的坚固性

00:38:03.146 --> 00:38:04.966 A:middle
所以现在 更多精彩的注释

00:38:04.966 --> 00:38:06.296 A:middle
将不再处于编辑器周围

00:38:06.296 --> 00:38:07.966 A:middle
而是存在于编辑器之中

00:38:09.516 --> 00:38:15.786 A:middle
[ 掌声 ]

00:38:16.286 --> 00:38:17.766 A:middle
自动补全和导航

00:38:17.826 --> 00:38:19.646 A:middle
是两个基本的工作流

00:38:19.646 --> 00:38:20.686 A:middle
我们在这两个方面都做了改进

00:38:21.596 --> 00:38:23.106 A:middle
自动补全现在提供了

00:38:23.106 --> 00:38:24.896 A:middle
更有针对性的结果

00:38:24.896 --> 00:38:27.076 A:middle
并限制了高置信匹配的完成

00:38:28.046 --> 00:38:29.466 A:middle
当使用“跳转到定义”

00:38:29.466 --> 00:38:31.496 A:middle
进行导航时

00:38:31.496 --> 00:38:32.956 A:middle
目的地列表现在将提供

00:38:32.956 --> 00:38:34.676 A:middle
类似于文件和行信息的环境细节

00:38:34.676 --> 00:38:36.276 A:middle
以帮助你们轻松到达

00:38:36.276 --> 00:38:37.576 A:middle
你想要去的地方

00:38:38.516 --> 00:38:43.166 A:middle
[ 掌声 ]

00:38:43.666 --> 00:38:44.576 A:middle
你们将在 “Action（操作）” 菜单中的

00:38:44.576 --> 00:38:46.096 A:middle
“Callers” 选项中

00:38:46.096 --> 00:38:48.136 A:middle
看到相同的环境信息

00:38:48.136 --> 00:38:49.976 A:middle
这是一个让你们在项目之间

00:38:49.976 --> 00:38:51.646 A:middle
迅速切换的完美方式

00:38:52.456 --> 00:38:54.756 A:middle
去年 我们为包括 Swift 的

00:38:54.756 --> 00:38:56.436 A:middle
所有语言

00:38:56.506 --> 00:38:57.156 A:middle
引入了重构

00:38:57.156 --> 00:38:59.286 A:middle
而你们 也就是 Swift 社区

00:38:59.486 --> 00:39:01.126 A:middle
抓住了这个机会

00:38:59.486 --> 00:39:01.126 A:middle
抓住了这个机会

00:39:01.126 --> 00:39:02.536 A:middle
并增加了一些新的操作

00:39:03.936 --> 00:39:05.606 A:middle
这些操作简化了

00:39:05.606 --> 00:39:07.526 A:middle
常见的编程场景

00:39:07.526 --> 00:39:08.956 A:middle
并直接构建到 Xcode 之中

00:39:09.446 --> 00:39:10.336 A:middle
点按一下就可使用

00:39:11.766 --> 00:39:13.526 A:middle
重构只是你们在项目中

00:39:13.526 --> 00:39:15.266 A:middle
修改源代码的

00:39:15.356 --> 00:39:16.196 A:middle
众多方法之一

00:39:16.846 --> 00:39:17.876 A:middle
为了更容易地跟踪

00:39:17.876 --> 00:39:19.806 A:middle
你们的更改

00:39:19.806 --> 00:39:21.326 A:middle
我们引入了一个

00:39:21.326 --> 00:39:22.056 A:middle
源代码控制更改栏

00:39:23.336 --> 00:39:24.706 A:middle
更改栏位于

00:39:24.706 --> 00:39:25.896 A:middle
编辑器的左侧

00:39:25.896 --> 00:39:27.326 A:middle
它是一些突出显示的

00:39:27.326 --> 00:39:29.156 A:middle
自上次退出后发生变化的代码行

00:39:29.946 --> 00:39:31.896 A:middle
标志的样式和颜色

00:39:31.896 --> 00:39:33.576 A:middle
反映了更改的类型

00:39:33.576 --> 00:39:35.326 A:middle
使你很容易地

00:39:35.326 --> 00:39:37.046 A:middle
看到你所做的更改

00:39:37.046 --> 00:39:38.516 A:middle
团队成员所做的更改

00:39:38.516 --> 00:39:41.016 A:middle
以及可能存在冲突的更改

00:39:41.836 --> 00:39:44.466 A:middle
这个特性

00:39:45.516 --> 00:39:49.586 A:middle
[ 掌声 ]

00:39:50.086 --> 00:39:51.796 A:middle
是的 我也认为这个特性非常棒

00:39:51.796 --> 00:39:53.966 A:middle
现在我想给你们演示一下

00:39:55.886 --> 00:39:57.336 A:middle
我们回到

00:39:57.336 --> 00:39:59.686 A:middle
太阳系 App

00:39:59.686 --> 00:40:00.906 A:middle
我想在我们的一个源文件中

00:39:59.686 --> 00:40:00.906 A:middle
我想在我们的一个源文件中

00:40:00.906 --> 00:40:03.236 A:middle
做一些改变

00:40:03.346 --> 00:40:04.946 A:middle
那就是我们的 sceneViewController

00:40:05.676 --> 00:40:07.166 A:middle
我将在编辑器中

00:40:07.166 --> 00:40:08.446 A:middle
向下滚动到

00:40:08.446 --> 00:40:09.206 A:middle
我想要进行更改的地方

00:40:09.816 --> 00:40:10.996 A:middle
我们可以看到在左边

00:40:11.076 --> 00:40:12.716 A:middle
就在行数的左边

00:40:12.716 --> 00:40:14.896 A:middle
源代码控制更改栏

00:40:14.896 --> 00:40:16.206 A:middle
指示了一些

00:40:16.206 --> 00:40:18.436 A:middle
团队成员所做的上游更改

00:40:19.106 --> 00:40:21.576 A:middle
事实上 如果我对这行进行更改

00:40:21.616 --> 00:40:22.926 A:middle
你们将看到标志变为红色

00:40:23.276 --> 00:40:24.346 A:middle
为了突出显示冲突

00:40:24.976 --> 00:40:26.626 A:middle
如果我把光标放在这个标志上

00:40:26.626 --> 00:40:27.596 A:middle
你们会看到

00:40:27.666 --> 00:40:28.996 A:middle
它突出显示了

00:40:29.036 --> 00:40:30.356 A:middle
已经发生变化并且正在产生冲突的

00:40:30.356 --> 00:40:31.166 A:middle
字符的范围

00:40:32.106 --> 00:40:33.976 A:middle
如果我点按这个标志

00:40:34.146 --> 00:40:35.776 A:middle
它会弹出一个操作菜单

00:40:35.776 --> 00:40:36.726 A:middle
其中有对这个变化的描述

00:40:36.726 --> 00:40:38.546 A:middle
以及我可以进行的操作

00:40:38.546 --> 00:40:40.986 A:middle
我看到我的团队成员在这里

00:40:40.986 --> 00:40:42.556 A:middle
添加了更多的描述性的注释

00:40:43.316 --> 00:40:44.896 A:middle
我想我会采取他的更改方案

00:40:45.246 --> 00:40:46.576 A:middle
因此我将使用 “Action（操作）”菜单

00:40:46.576 --> 00:40:48.946 A:middle
来丢弃我的更改 并在上方的

00:40:48.946 --> 00:40:50.546 A:middle
“Source Controll（源代码控制）”菜单中

00:40:50.606 --> 00:40:51.656 A:middle
把他的更改 Pull 过来

00:40:53.046 --> 00:40:55.146 A:middle
这是他的更改

00:40:55.146 --> 00:40:56.216 A:middle
有十分具体的注释

00:40:56.916 --> 00:40:58.276 A:middle
我可以滚动到编辑器的底部

00:40:58.276 --> 00:40:59.036 A:middle
看看还有什么

00:40:59.036 --> 00:41:01.096 A:middle
我想看的东西

00:40:59.036 --> 00:41:01.096 A:middle
我想看的东西

00:41:01.976 --> 00:41:02.976 A:middle
这是 Xcode 10 的另一个新特性

00:41:02.976 --> 00:41:04.696 A:middle
我们的编辑器现在支持

00:41:04.726 --> 00:41:05.376 A:middle
超范围滚动功能

00:41:06.516 --> 00:41:11.976 A:middle
[ 掌声 ]

00:41:12.476 --> 00:41:13.706 A:middle
回到我想修改的代码行

00:41:13.746 --> 00:41:15.226 A:middle
我想把这些硬编码的函数

00:41:15.226 --> 00:41:16.616 A:middle
转换成

00:41:16.656 --> 00:41:20.406 A:middle
从素材目录中 提取颜色的属性

00:41:21.376 --> 00:41:23.636 A:middle
我想改变其中的三个

00:41:23.636 --> 00:41:25.546 A:middle
由于这些注释

00:41:25.546 --> 00:41:26.336 A:middle
它们现在有点分散了

00:41:27.076 --> 00:41:29.066 A:middle
没有关系 在 Xcode 10 中

00:41:29.066 --> 00:41:30.196 A:middle
我们改进了代码折叠问题

00:41:31.066 --> 00:41:32.356 A:middle
你们现在可以

00:41:32.356 --> 00:41:33.206 A:middle
随意折叠代码

00:41:33.686 --> 00:41:34.856 A:middle
我们还重新引入了

00:41:34.856 --> 00:41:35.636 A:middle
代码折叠条

00:41:35.756 --> 00:41:36.716 A:middle
就在行数的右边

00:41:36.716 --> 00:41:37.966 A:middle
我可以点按

00:41:38.516 --> 00:41:42.546 A:middle
[ 掌声 ]

00:41:43.046 --> 00:41:43.876 A:middle
从而将代码折叠起来

00:41:44.326 --> 00:41:45.446 A:middle
现在我们有了这个

00:41:45.506 --> 00:41:47.923 A:middle
漂亮且简洁的折叠展示

00:41:48.546 --> 00:41:50.206 A:middle
这是我想要改变的

00:41:50.206 --> 00:41:51.686 A:middle
第一个函数

00:41:51.686 --> 00:41:52.916 A:middle
我发现所有这些函数都

00:41:52.916 --> 00:41:54.256 A:middle
非常相似

00:41:54.256 --> 00:41:55.326 A:middle
所以如果我能同时改变它们

00:41:55.326 --> 00:41:57.176 A:middle
那就太好了

00:41:58.226 --> 00:42:07.626 A:middle
我现在通过多光标编辑 也能实现这点了

00:41:58.226 --> 00:42:07.626 A:middle
我现在通过多光标编辑 也能实现这点了

00:42:08.126 --> 00:42:09.326 A:middle
多光标编辑的关键是

00:42:09.326 --> 00:42:11.506 A:middle
两个手指 “Control” 和 “Shift”

00:42:11.956 --> 00:42:13.806 A:middle
我需要按住这两个键

00:42:13.836 --> 00:42:15.086 A:middle
然后依次点按

00:42:15.086 --> 00:42:16.456 A:middle
每个函数的开头

00:42:17.326 --> 00:42:18.766 A:middle
我们将使用范围选择

00:42:18.766 --> 00:42:20.166 A:middle
将它们改为 var

00:42:20.606 --> 00:42:22.246 A:middle
我们把它们换成冒号

00:42:22.736 --> 00:42:24.786 A:middle
到目前为止我们做得都很好

00:42:25.896 --> 00:42:27.726 A:middle
现在我突然发现

00:42:27.726 --> 00:42:29.356 A:middle
我将目录中的颜色和这里的属性

00:42:29.546 --> 00:42:31.426 A:middle
起了相同的名称

00:42:32.006 --> 00:42:33.606 A:middle
我们只需要选择这些名字

00:42:33.606 --> 00:42:34.236 A:middle
并复制它们

00:42:34.926 --> 00:42:35.716 A:middle
现在让我们执行

00:42:35.716 --> 00:42:37.136 A:middle
并改变它们

00:42:37.836 --> 00:42:39.256 A:middle
我们再放置三个光标

00:42:39.256 --> 00:42:41.196 A:middle
全部选中

00:42:41.196 --> 00:42:43.506 A:middle
输入 named:

00:42:43.506 --> 00:42:45.876 A:middle
粘贴这些颜色

00:42:45.876 --> 00:42:46.766 A:middle
这样我们就将它们全部改变了

00:42:46.766 --> 00:42:47.916 A:middle
快了三倍

00:42:48.516 --> 00:42:55.016 A:middle
[ 掌声 ]

00:42:55.516 --> 00:42:56.876 A:middle
多光标编辑

00:42:56.876 --> 00:42:59.066 A:middle
也很适合列选择

00:42:59.626 --> 00:43:01.206 A:middle
这里是所有

00:42:59.626 --> 00:43:01.206 A:middle
这里是所有

00:43:01.206 --> 00:43:02.516 A:middle
我用 weak 定义的 IBOutlets

00:43:03.006 --> 00:43:04.666 A:middle
如果我按住 option 键

00:43:05.066 --> 00:43:06.766 A:middle
将它们全部选中

00:43:06.766 --> 00:43:08.806 A:middle
[ 欢呼声 ]

00:43:09.226 --> 00:43:10.266 A:middle
然后把它们

00:43:10.266 --> 00:43:12.346 A:middle
转换成 unowned [ 掌声 ]

00:43:12.966 --> 00:43:13.896 A:middle
就像这样

00:43:13.896 --> 00:43:15.316 A:middle
我可以进行修改

00:43:15.316 --> 00:43:16.516 A:middle
然后使用源代码控制条

00:43:16.516 --> 00:43:17.786 A:middle
确保我得到了我想要的修改

00:43:18.546 --> 00:43:19.916 A:middle
这些就是我们在 Xcode 10 中

00:43:19.916 --> 00:43:21.156 A:middle
所添加的一些出色的

00:43:21.486 --> 00:43:22.846 A:middle
新的编辑功能

00:43:23.516 --> 00:43:30.246 A:middle
[ 掌声 ]

00:43:30.746 --> 00:43:32.066 A:middle
除了性能和稳定性方面的

00:43:32.066 --> 00:43:33.246 A:middle
改进之外

00:43:33.246 --> 00:43:35.106 A:middle
我们还增加了

00:43:35.106 --> 00:43:36.356 A:middle
源代码控制更改条

00:43:36.356 --> 00:43:36.946 A:middle
和多光标编辑

00:43:37.276 --> 00:43:39.156 A:middle
Xcode 10 会不断提升

00:43:39.156 --> 00:43:41.366 A:middle
我们的源代码编辑体验

00:43:41.906 --> 00:43:43.846 A:middle
除了源代码控制更改栏之外

00:43:43.846 --> 00:43:45.456 A:middle
我们还扩展了

00:43:45.456 --> 00:43:47.456 A:middle
源代码控制集成

00:43:47.456 --> 00:43:50.426 A:middle
首先 我们将冲突解决系统

00:43:50.426 --> 00:43:52.286 A:middle
与 Git 统一起来

00:43:52.286 --> 00:43:54.106 A:middle
使结果更准确

00:43:54.106 --> 00:43:56.266 A:middle
更可预测

00:43:56.316 --> 00:43:57.316 A:middle
且速度更快

00:43:58.466 --> 00:44:00.376 A:middle
接下来 我们增强了

00:43:58.466 --> 00:44:00.376 A:middle
接下来 我们增强了

00:44:00.376 --> 00:44:02.146 A:middle
Pull 操作以支持 Rebase

00:44:02.446 --> 00:44:03.896 A:middle
这样你们将可以重放

00:44:03.896 --> 00:44:04.656 A:middle
不同分支之间的变化 [ 掌声 ]

00:44:04.656 --> 00:44:05.976 A:middle
是的 我们可以为此鼓掌

00:44:06.516 --> 00:44:08.896 A:middle
[ 掌声 ]

00:44:09.396 --> 00:44:10.726 A:middle
你们可以轻松地重放

00:44:10.726 --> 00:44:12.106 A:middle
在分支之间的更改

00:44:12.106 --> 00:44:13.346 A:middle
而不必进行不必要的 Merge

00:44:13.976 --> 00:44:15.786 A:middle
为了保证连接的安全

00:44:15.786 --> 00:44:17.116 A:middle
Xcode 将帮助你们

00:44:17.116 --> 00:44:19.836 A:middle
创建 SSH 密钥

00:44:19.836 --> 00:44:21.786 A:middle
并将它们直接上载到服务帐户

00:44:22.516 --> 00:44:26.516 A:middle
[ 掌声 ]

00:44:27.016 --> 00:44:29.006 A:middle
这对于我们的服务集成来说

00:44:29.086 --> 00:44:30.466 A:middle
是一个完美的补充

00:44:30.466 --> 00:44:32.196 A:middle
因为除了 GitHub

00:44:32.376 --> 00:44:33.916 A:middle
我们今年还增加了两个新的服务

00:44:34.676 --> 00:44:35.616 A:middle
对 Atlassian 的

00:44:35.676 --> 00:44:37.566 A:middle
Bitbucket 云和 Bitbucket 服务器的支持

00:44:38.516 --> 00:44:42.246 A:middle
[ 掌声 ]

00:44:42.746 --> 00:44:44.766 A:middle
以及对 GitLab.com 的支持

00:44:45.096 --> 00:44:45.846 A:middle
和自托管

00:44:46.516 --> 00:44:49.816 A:middle
[ 掌声 ]

00:44:50.316 --> 00:44:51.836 A:middle
看来这里有很多源代码控制的爱好者

00:44:52.606 --> 00:44:54.366 A:middle
这两个功能都很棒

00:44:54.496 --> 00:44:55.786 A:middle
因为它们的 WEB 接口

00:44:55.786 --> 00:44:57.976 A:middle
将直接检入 Xcode

00:44:59.386 --> 00:45:01.006 A:middle
正如 Sebastian 前面提到的

00:44:59.386 --> 00:45:01.006 A:middle
正如 Sebastian 前面提到的

00:45:01.006 --> 00:45:02.626 A:middle
我们热衷于为你们提供

00:45:02.626 --> 00:45:04.186 A:middle
优秀的工具来调试和优化

00:45:04.476 --> 00:45:05.696 A:middle
你们的 App

00:45:06.056 --> 00:45:07.556 A:middle
今年 我们重点关注了

00:45:07.556 --> 00:45:09.536 A:middle
工具的可用性和性能

00:45:09.536 --> 00:45:12.456 A:middle
我们从低级调试器

00:45:12.456 --> 00:45:13.536 A:middle
LLDB 开始

00:45:13.966 --> 00:45:15.656 A:middle
LLDB 在控制台

00:45:15.656 --> 00:45:16.966 A:middle
和 Xcode 的变量视图中

00:45:16.966 --> 00:45:19.146 A:middle
具有更快的启动速度

00:45:19.146 --> 00:45:20.186 A:middle
和更精确的对变量的访问

00:45:21.676 --> 00:45:23.176 A:middle
接下来 我们将调试符号的

00:45:23.176 --> 00:45:25.246 A:middle
下载速度提高了 5 倍

00:45:25.246 --> 00:45:26.496 A:middle
所以现在的下载时长是以秒记

00:45:26.496 --> 00:45:26.976 A:middle
而不是以分钟记

00:45:27.516 --> 00:45:33.146 A:middle
[ 掌声 ]

00:45:33.646 --> 00:45:34.646 A:middle
我们增强了

00:45:34.646 --> 00:45:35.966 A:middle
内存调试工具

00:45:35.966 --> 00:45:37.106 A:middle
使其能够更快地加载和保存文档

00:45:37.106 --> 00:45:39.176 A:middle
并提供了全新且紧凑的布局

00:45:39.176 --> 00:45:40.646 A:middle
以帮助你们同时查看

00:45:40.646 --> 00:45:42.746 A:middle
更多的 App

00:45:43.886 --> 00:45:45.456 A:middle
今年春天的早些时候

00:45:45.456 --> 00:45:47.936 A:middle
我们介绍了能源诊断报告

00:45:48.416 --> 00:45:49.826 A:middle
它们就像崩溃日志

00:45:49.826 --> 00:45:50.606 A:middle
但是针对能源使用

00:45:51.266 --> 00:45:52.796 A:middle
这些报告在 iOS 上

00:45:52.836 --> 00:45:54.656 A:middle
自动收集

00:45:54.656 --> 00:45:57.086 A:middle
用于 App Store App 的试运行

00:45:57.086 --> 00:45:59.106 A:middle
并会展现前台和

00:45:59.106 --> 00:46:00.016 A:middle
后台使用的细节

00:45:59.106 --> 00:46:00.016 A:middle
后台使用的细节

00:46:01.086 --> 00:46:02.576 A:middle
这些报告显示在整理器中

00:46:02.576 --> 00:46:04.326 A:middle
内容包括用来说明事件的

00:46:04.326 --> 00:46:05.916 A:middle
堆栈框架

00:46:06.896 --> 00:46:08.196 A:middle
和崩溃日志一样

00:46:08.196 --> 00:46:09.876 A:middle
你们可以在项目中打开这些报告

00:46:09.876 --> 00:46:11.446 A:middle
导航你们的代码

00:46:11.446 --> 00:46:13.756 A:middle
然后找到并修复问题

00:46:15.006 --> 00:46:16.646 A:middle
除此之外

00:46:16.646 --> 00:46:19.456 A:middle
我们在测试方面也有一些改进

00:46:19.806 --> 00:46:21.346 A:middle
今年春天的早些时候

00:46:21.386 --> 00:46:23.116 A:middle
我们增强了 “Code Coverage（代码覆盖）”

00:46:23.116 --> 00:46:24.466 A:middle
添加了一个命令行工具

00:46:24.466 --> 00:46:26.456 A:middle
来访问覆盖数据

00:46:26.456 --> 00:46:28.476 A:middle
并允许你们选择

00:46:28.476 --> 00:46:29.396 A:middle
收集覆盖的单个目标

00:46:30.286 --> 00:46:31.436 A:middle
这意味着你们的覆盖报告

00:46:31.436 --> 00:46:33.176 A:middle
现在可以主动设置为针对

00:46:33.176 --> 00:46:35.106 A:middle
你们正在编写和测试的区域

00:46:36.266 --> 00:46:38.106 A:middle
除此之外

00:46:38.106 --> 00:46:40.216 A:middle
我们今年还增加两个新的

00:46:40.216 --> 00:46:41.676 A:middle
测试工作流 实际上是三个

00:46:42.466 --> 00:46:44.226 A:middle
首先 你们现在可以

00:46:44.226 --> 00:46:45.976 A:middle
在测试包中自动包含

00:46:45.976 --> 00:46:47.986 A:middle
或排除新的测试

00:46:48.616 --> 00:46:50.486 A:middle
接下来 你们可以

00:46:50.486 --> 00:46:51.626 A:middle
以随机的顺序执行测试

00:46:51.626 --> 00:46:53.306 A:middle
从而最小化

00:46:53.306 --> 00:46:54.506 A:middle
偶然因素的影响

00:46:55.536 --> 00:46:56.726 A:middle
我们今年最大的变化是

00:46:56.726 --> 00:46:58.496 A:middle
现在 你们可以在 Xcode 中

00:46:58.496 --> 00:47:00.906 A:middle
并行执行测试

00:46:58.496 --> 00:47:00.906 A:middle
并行执行测试

00:47:01.516 --> 00:47:07.066 A:middle
[ 掌声 ]

00:47:07.566 --> 00:47:09.236 A:middle
去年 你们可以使用 Xcodebuild

00:47:09.236 --> 00:47:11.056 A:middle
对多个设备进行并行测试

00:47:11.056 --> 00:47:13.366 A:middle
将所有相同的测试

00:47:13.366 --> 00:47:15.056 A:middle
发送到每个设备上

00:47:15.056 --> 00:47:17.126 A:middle
如果你们想要使用持续集成

00:47:17.126 --> 00:47:18.476 A:middle
并达到最广泛的测试规模

00:47:18.476 --> 00:47:19.886 A:middle
它是最适合的方法

00:47:20.956 --> 00:47:22.146 A:middle
当你们使用 Xcode 时

00:47:22.326 --> 00:47:24.556 A:middle
你们通常只关注于单个配置

00:47:24.966 --> 00:47:25.916 A:middle
但在测试时

00:47:25.916 --> 00:47:27.586 A:middle
你们希望尽快完成

00:47:28.696 --> 00:47:30.406 A:middle
Xcode 10 通过并行测试

00:47:30.406 --> 00:47:33.376 A:middle
极大地改进了

00:47:33.376 --> 00:47:34.016 A:middle
这个配置的测试速度

00:47:35.126 --> 00:47:36.536 A:middle
在后台 Xcode 创建了

00:47:36.536 --> 00:47:38.706 A:middle
Mac App 的副本

00:47:38.826 --> 00:47:40.906 A:middle
或者 iOS 模拟器的克隆

00:47:41.156 --> 00:47:42.866 A:middle
然后将测试套件

00:47:42.866 --> 00:47:43.106 A:middle
发送给它们

00:47:44.496 --> 00:47:45.756 A:middle
这意味着你们将

00:47:45.826 --> 00:47:47.716 A:middle
继续测试单个配置

00:47:47.716 --> 00:47:49.856 A:middle
但是将在很短的时间内完成

00:47:51.096 --> 00:47:51.926 A:middle
并行测试可以

00:47:51.966 --> 00:47:53.286 A:middle
根据你们的机器容量

00:47:53.286 --> 00:47:55.106 A:middle
自动进行伸缩

00:47:55.106 --> 00:47:57.316 A:middle
这意味着在 iMac Pro 上

00:47:57.316 --> 00:47:57.876 A:middle
它会表现得非常棒

00:47:59.796 --> 00:48:00.846 A:middle
你们可能会问 具体有多棒呢

00:47:59.796 --> 00:48:00.846 A:middle
你们可能会问 具体有多棒呢

00:48:01.266 --> 00:48:02.776 A:middle
好吧 我们来看看另一个演示

00:48:03.506 --> 00:48:07.896 A:middle
我们将再次回到我们的太阳系项目

00:48:08.956 --> 00:48:11.986 A:middle
这里我们看到了

00:48:12.056 --> 00:48:13.826 A:middle
我们之前运行的 Mac 测试的测试日志

00:48:14.406 --> 00:48:15.866 A:middle
耗时大约 14 秒

00:48:16.986 --> 00:48:18.016 A:middle
现在让我们用并行测试

00:48:18.016 --> 00:48:19.206 A:middle
来运行它

00:48:19.416 --> 00:48:20.276 A:middle
我将点按并按住工具栏

00:48:20.276 --> 00:48:22.416 A:middle
选择 “Test...(测试)”操作

00:48:23.016 --> 00:48:24.216 A:middle
然后会跳出方案列表

00:48:25.696 --> 00:48:27.266 A:middle
在选项中 我将点按

00:48:27.316 --> 00:48:29.246 A:middle
“Execute in parallel（以并行方式执行）”

00:48:29.246 --> 00:48:31.236 A:middle
点按 “Test（测试）”

00:48:31.236 --> 00:48:32.386 A:middle
然后我们将构建并行测试

00:48:32.386 --> 00:48:33.676 A:middle
如果你们看看

00:48:33.676 --> 00:48:35.246 A:middle
右下角的文件

00:48:35.246 --> 00:48:37.076 A:middle
会发现我们已经启动了测试

00:48:37.076 --> 00:48:38.596 A:middle
我们现在启动了许多不同的进程

00:48:38.596 --> 00:48:39.786 A:middle
每一个都对应一个我们的测试套件

00:48:39.866 --> 00:48:41.746 A:middle
然后收集结果

00:48:42.996 --> 00:48:44.116 A:middle
如果我们看一下测试日志

00:48:44.116 --> 00:48:45.966 A:middle
它的完成速度几乎是

00:48:45.966 --> 00:48:46.646 A:middle
原来的四倍

00:48:47.516 --> 00:48:53.676 A:middle
[ 掌声 ]

00:48:54.176 --> 00:48:55.376 A:middle
由于并行测试对单元测试

00:48:55.376 --> 00:48:57.376 A:middle
非常有效

00:48:57.486 --> 00:48:58.546 A:middle
它对 UI 测试也会非常有效

00:48:59.786 --> 00:49:01.986 A:middle
我将选择 App 的

00:48:59.786 --> 00:49:01.986 A:middle
我将选择 App 的

00:49:01.986 --> 00:49:04.316 A:middle
iOS 版本

00:49:04.316 --> 00:49:04.936 A:middle
然后开始测试

00:49:05.526 --> 00:49:06.936 A:middle
在后台

00:49:06.936 --> 00:49:08.156 A:middle
我们将克隆

00:49:08.156 --> 00:49:10.236 A:middle
活动的模拟器

00:49:10.236 --> 00:49:11.686 A:middle
然后为每个模拟器

00:49:11.686 --> 00:49:13.126 A:middle
设置调试会话

00:49:13.126 --> 00:49:14.816 A:middle
然后切换到运行

00:49:14.816 --> 00:49:15.776 A:middle
所有这些模拟器的空间

00:49:16.676 --> 00:49:17.846 A:middle
你们将会看到

00:49:17.846 --> 00:49:19.456 A:middle
我们在每个模拟器上

00:49:19.456 --> 00:49:20.916 A:middle
安装不同的测试套件

00:49:20.916 --> 00:49:22.696 A:middle
并在每个模拟器上启动不同的测试集

00:49:23.556 --> 00:49:25.386 A:middle
我可以在所有这些设备上

00:49:25.386 --> 00:49:27.756 A:middle
更快地运行

00:49:27.756 --> 00:49:28.986 A:middle
所有相同的测试

00:49:28.986 --> 00:49:30.716 A:middle
这使我能够添加更多的测试

00:49:30.716 --> 00:49:31.706 A:middle
并做出一个更好的 App

00:49:32.556 --> 00:49:34.316 A:middle
这就是 Xcode 10 中

00:49:34.316 --> 00:49:36.796 A:middle
快得像鬼畜一样的并行测试

00:49:37.516 --> 00:49:46.216 A:middle
[ 掌声 ]

00:49:46.716 --> 00:49:47.976 A:middle
去年 我们介绍了

00:49:48.026 --> 00:49:49.646 A:middle
用 Swift 编写的

00:49:49.826 --> 00:49:50.626 A:middle
新的构建系统的预览版

00:49:51.516 --> 00:49:52.466 A:middle
对此 许多人在自己的项目中

00:49:52.466 --> 00:49:54.186 A:middle
进行了尝试 并提供了积极的反馈

00:49:54.426 --> 00:49:56.546 A:middle
现在我可以高兴地说

00:49:56.546 --> 00:49:58.156 A:middle
我们的新型构建系统

00:49:58.456 --> 00:49:59.306 A:middle
已经适用于所有项目

00:50:00.006 --> 00:50:01.116 A:middle
除了更高的可靠性

00:50:01.116 --> 00:50:03.656 A:middle
和稳定性之外

00:50:03.656 --> 00:50:05.916 A:middle
我们还关注总体的构建性能

00:50:06.796 --> 00:50:07.936 A:middle
你们将发现 构建系统现在可以

00:50:07.936 --> 00:50:09.906 A:middle
更快地进行重新构建

00:50:10.136 --> 00:50:11.976 A:middle
更好地处理并行任务 并且使用更少的内存

00:50:11.976 --> 00:50:14.436 A:middle
构建系统现在包含

00:50:14.436 --> 00:50:16.476 A:middle
新的更丰富的诊断信息

00:50:16.646 --> 00:50:17.946 A:middle
以帮助你们调整项目配置

00:50:17.986 --> 00:50:19.516 A:middle
从而实现最佳的

00:50:19.516 --> 00:50:21.026 A:middle
构建性能

00:50:21.446 --> 00:50:23.746 A:middle
让我们继续构建性能的话题

00:50:23.746 --> 00:50:24.956 A:middle
我想谈谈

00:50:24.956 --> 00:50:26.466 A:middle
最新版本的另一个核心组件

00:50:26.466 --> 00:50:29.396 A:middle
Swift 4.2

00:50:29.766 --> 00:50:31.156 A:middle
在过去的一年里

00:50:31.156 --> 00:50:33.016 A:middle
我们对 Swift 项目的编译时间

00:50:33.086 --> 00:50:34.786 A:middle
进行了稳步的改进

00:50:35.936 --> 00:50:37.126 A:middle
我们对一些开放源代码的

00:50:37.126 --> 00:50:39.526 A:middle
iOS App 进行了采样

00:50:39.526 --> 00:50:40.666 A:middle
与旧版本相比

00:50:40.666 --> 00:50:42.776 A:middle
使用 Xcode 10 调试构建版本的性能

00:50:42.776 --> 00:50:46.996 A:middle
通常是之前的两倍

00:50:46.996 --> 00:50:49.566 A:middle
至于发布的构建版本

00:50:49.566 --> 00:50:52.316 A:middle
通过使用新的尺寸优化

00:50:52.316 --> 00:50:54.306 A:middle
代码大小可以最多减少 30%

00:50:54.306 --> 00:50:55.906 A:middle
这对于蜂窝网络下载来说

00:50:55.906 --> 00:50:56.436 A:middle
是一个很好的消息

00:50:57.976 --> 00:51:00.056 A:middle
除此之外

00:50:57.976 --> 00:51:00.056 A:middle
除此之外

00:51:00.056 --> 00:51:02.306 A:middle
Swift 还添加了一些新功能

00:51:02.306 --> 00:51:04.576 A:middle
并对运行时语言进行改进

00:51:05.326 --> 00:51:06.126 A:middle
其中一些是很拗口的 API

00:51:06.126 --> 00:51:09.276 A:middle
比如 “Synthesized hashtable conformance”

00:51:10.786 --> 00:51:12.436 A:middle
尝试这些 API 的最佳位置是

00:51:12.436 --> 00:51:14.906 A:middle
Xcode 中的 Playgrounds

00:51:15.596 --> 00:51:16.976 A:middle
因为 Xcode Playgrounds 现在

00:51:16.976 --> 00:51:18.676 A:middle
包含了新的

00:51:18.676 --> 00:51:20.506 A:middle
类似速降的交互

00:51:20.506 --> 00:51:21.996 A:middle
允许你们在不重新启动

00:51:22.316 --> 00:51:23.726 A:middle
Playground 会话的情况下

00:51:23.726 --> 00:51:24.486 A:middle
评估新的代码行

00:51:26.516 --> 00:51:30.186 A:middle
[ 掌声 ]

00:51:30.686 --> 00:51:31.756 A:middle
这是我们太阳系视图的

00:51:31.756 --> 00:51:32.346 A:middle
一个 Playground

00:51:32.346 --> 00:51:34.216 A:middle
为移动到下一个行星

00:51:34.506 --> 00:51:36.466 A:middle
而添加的新代码行

00:51:36.466 --> 00:51:38.616 A:middle
将被评估

00:51:38.616 --> 00:51:39.386 A:middle
并在 Playground 继续运行时

00:51:39.386 --> 00:51:39.536 A:middle
返回结果

00:51:42.046 --> 00:51:43.896 A:middle
所有这些

00:51:43.896 --> 00:51:45.546 A:middle
对运行时语言和工具的添加

00:51:45.786 --> 00:51:47.646 A:middle
使得作为 Xcode 10 的一部分的 Swift

00:51:48.046 --> 00:51:49.206 A:middle
保持着不断进步的步伐

00:51:49.206 --> 00:51:52.036 A:middle
我们还有另一个版本

00:51:52.036 --> 00:51:52.796 A:middle
即将与你们见面

00:51:52.796 --> 00:51:55.646 A:middle
Swift 5

00:51:55.986 --> 00:51:57.806 A:middle
Swift 5 的主要焦点在于更广泛的应用

00:51:57.806 --> 00:51:59.856 A:middle
使 Swift 成为

00:51:59.886 --> 00:52:01.166 A:middle
OS 的一部分

00:51:59.886 --> 00:52:01.166 A:middle
OS 的一部分

00:52:01.796 --> 00:52:03.216 A:middle
当我们发布新的 OS 版本时

00:52:03.216 --> 00:52:04.946 A:middle
App 将不再需要

00:52:04.946 --> 00:52:06.336 A:middle
包含 Swift 运行时

00:52:06.336 --> 00:52:08.046 A:middle
从而获得

00:52:08.086 --> 00:52:09.636 A:middle
更小的下载 [ 掌声 ]

00:52:09.636 --> 00:52:09.846 A:middle
和更快的启动

00:52:10.516 --> 00:52:15.586 A:middle
[ 掌声 ]

00:52:16.086 --> 00:52:17.216 A:middle
我们对此也感到非常兴奋

00:52:17.216 --> 00:52:18.666 A:middle
我们在这个目标上

00:52:18.706 --> 00:52:19.976 A:middle
取得了巨大的进展

00:52:20.396 --> 00:52:21.626 A:middle
你们会在明年初的

00:52:21.696 --> 00:52:23.956 A:middle
看到它的发布

00:52:24.536 --> 00:52:27.996 A:middle
Xcode 10 包含了

00:52:27.996 --> 00:52:29.566 A:middle
大量的生产力改进

00:52:29.886 --> 00:52:31.626 A:middle
以及在工具的性能 坚固性

00:52:31.626 --> 00:52:33.496 A:middle
和稳定性方面的

00:52:33.496 --> 00:52:35.846 A:middle
大幅提升

00:52:36.436 --> 00:52:37.736 A:middle
所有这些都能帮助你们

00:52:37.736 --> 00:52:40.586 A:middle
更快地完成高质量的工作

00:52:40.626 --> 00:52:42.246 A:middle
这就是 Xcode 10

00:52:43.516 --> 00:52:50.656 A:middle
[ 掌声 ]

00:52:51.156 --> 00:52:52.576 A:middle
接下来 我想邀请 John

00:52:52.576 --> 00:52:54.236 A:middle
来与你们讨论

00:52:54.236 --> 00:52:54.816 A:middle
关于机器学习的新内容

00:52:55.356 --> 00:52:55.636 A:middle
John

00:52:56.321 --> 00:52:58.321 A:middle
[ 掌声 ]

00:52:58.626 --> 00:52:59.306 A:middle
&gt;&gt; 谢谢 Matthew

00:53:02.286 --> 00:53:03.236 A:middle
机器学习是

00:53:03.236 --> 00:53:04.556 A:middle
操作系统

00:53:04.556 --> 00:53:06.736 A:middle
和许多 App 的基础

00:53:07.276 --> 00:53:09.206 A:middle
我们的目标是

00:53:09.346 --> 00:53:12.476 A:middle
提供简单易用的 API

00:53:12.476 --> 00:53:14.826 A:middle
使每个人都能使用“机器学习”

00:53:15.726 --> 00:53:17.356 A:middle
你们都做得非常出色

00:53:17.356 --> 00:53:19.606 A:middle
不断为你们的 App 注入

00:53:19.606 --> 00:53:21.886 A:middle
创新的特性和智慧

00:53:22.456 --> 00:53:26.426 A:middle
去年 我们引入了 Core ML

00:53:26.926 --> 00:53:29.196 A:middle
及其基本性能框架

00:53:29.196 --> 00:53:31.096 A:middle
以及高层级的视觉

00:53:31.096 --> 00:53:32.946 A:middle
和自然语言处理

00:53:33.306 --> 00:53:34.506 A:middle
首先 我想向你们展示

00:53:34.506 --> 00:53:35.336 A:middle
我们在视觉和自然语言处理方面

00:53:35.336 --> 00:53:37.706 A:middle
所做的一些改进

00:53:38.776 --> 00:53:42.826 A:middle
如果我们想要拍摄

00:53:42.826 --> 00:53:43.906 A:middle
带有深度的照片

00:53:43.906 --> 00:53:46.436 A:middle
我们现在提供了

00:53:46.436 --> 00:53:47.996 A:middle
支持物体检测

00:53:48.546 --> 00:53:50.126 A:middle
和包围框的 API

00:53:50.186 --> 00:53:51.306 A:middle
就像图片中标记的那样

00:53:52.546 --> 00:53:55.396 A:middle
我们可以做脸部检测

00:53:55.396 --> 00:53:56.446 A:middle
人脸关键点检测

00:53:57.546 --> 00:53:59.846 A:middle
像这个二维码这样的条形码

00:53:59.846 --> 00:54:01.886 A:middle
也可以在图像中被检测到

00:53:59.846 --> 00:54:01.886 A:middle
也可以在图像中被检测到

00:54:03.276 --> 00:54:05.476 A:middle
除了我们之前提供的

00:54:05.536 --> 00:54:06.906 A:middle
可以检测深度的 API

00:54:07.576 --> 00:54:08.876 A:middle
我们现在支持人形分割

00:54:08.876 --> 00:54:10.936 A:middle
所以你们可以从照片中

00:54:10.936 --> 00:54:12.576 A:middle
删除一个人

00:54:12.636 --> 00:54:13.296 A:middle
并将他们从背景中

00:54:13.296 --> 00:54:15.736 A:middle
分离出来

00:54:15.736 --> 00:54:16.536 A:middle
或者在背景中替换成一些

00:54:16.536 --> 00:54:17.926 A:middle
不同的东西

00:54:19.926 --> 00:54:21.586 A:middle
对于自然语言处理

00:54:21.586 --> 00:54:23.836 A:middle
我们有一个全新且易于使用的

00:54:23.836 --> 00:54:24.796 A:middle
基于 Swift 的 API

00:54:26.876 --> 00:54:28.696 A:middle
你们可以将

00:54:28.696 --> 00:54:30.846 A:middle
像这样简单的句子

00:54:30.846 --> 00:54:32.676 A:middle
自动地识别为英文

00:54:34.226 --> 00:54:35.596 A:middle
通过简单的 API

00:54:37.116 --> 00:54:38.346 A:middle
你们可以对句子进行拆分

00:54:38.386 --> 00:54:40.086 A:middle
并将其转换为语法元素

00:54:40.336 --> 00:54:43.416 A:middle
除此之外

00:54:43.416 --> 00:54:45.256 A:middle
你们还可以进行命名实体识别

00:54:46.046 --> 00:54:47.596 A:middle
这句话被检测到

00:54:47.596 --> 00:54:49.096 A:middle
是在说 Apple 这个组织

00:54:49.096 --> 00:54:50.096 A:middle
以及一个

00:54:50.096 --> 00:54:51.506 A:middle
位于圣何塞的地点

00:54:51.506 --> 00:54:54.726 A:middle
你们可能认为 对于英文这样的语言

00:54:54.726 --> 00:54:56.666 A:middle
实现这点并不困难

00:54:56.666 --> 00:54:59.106 A:middle
但是我们支持更多的语言

00:54:59.516 --> 00:55:01.866 A:middle
包括法语 德语 日语

00:54:59.516 --> 00:55:01.866 A:middle
包括法语 德语 日语

00:55:01.866 --> 00:55:03.186 A:middle
以及这里举例的简体中文

00:55:03.186 --> 00:55:07.836 A:middle
现在我们来看看 Core ML

00:55:08.456 --> 00:55:09.876 A:middle
它是我们的

00:55:09.876 --> 00:55:11.106 A:middle
机器学习技术的基础

00:55:12.676 --> 00:55:13.986 A:middle
就在一年前

00:55:13.986 --> 00:55:15.146 A:middle
我们在这里引入了 Core ML

00:55:15.866 --> 00:55:17.016 A:middle
从那以后

00:55:17.016 --> 00:55:18.876 A:middle
我们应用了所有主要的

00:55:18.876 --> 00:55:20.876 A:middle
机器学习的训练框架和格式

00:55:21.716 --> 00:55:23.126 A:middle
仅仅在一年内就实现这一点

00:55:23.126 --> 00:55:24.366 A:middle
令人难以置信

00:55:24.366 --> 00:55:26.796 A:middle
但我们不想就此停止

00:55:28.266 --> 00:55:29.936 A:middle
我们将引入 Core ML 2

00:55:29.936 --> 00:55:33.026 A:middle
我们专注于让模型

00:55:33.026 --> 00:55:35.376 A:middle
执行得更快

00:55:35.376 --> 00:55:37.546 A:middle
体型更小

00:55:37.616 --> 00:55:38.736 A:middle
并且让它们更容易自定义

00:55:39.956 --> 00:55:40.866 A:middle
我们知道这些

00:55:40.906 --> 00:55:43.576 A:middle
是我们最需要的特性

00:55:43.576 --> 00:55:46.676 A:middle
为了查看性能改进

00:55:46.676 --> 00:55:48.336 A:middle
我们添加了一个

00:55:48.336 --> 00:55:48.906 A:middle
新的批处理 API

00:55:49.896 --> 00:55:52.356 A:middle
以前你们不得不

00:55:52.356 --> 00:55:53.786 A:middle
对每个映像进行推理

00:55:54.196 --> 00:55:55.836 A:middle
并在 CPU 和 GPU 之间传递它们

00:55:55.836 --> 00:55:58.526 A:middle
而现在 你们可以将这些推理请求

00:55:58.526 --> 00:56:00.196 A:middle
打包在一起

00:55:58.526 --> 00:56:00.196 A:middle
打包在一起

00:56:00.196 --> 00:56:02.566 A:middle
并利用 CPU 和 GPU 的

00:56:02.696 --> 00:56:04.066 A:middle
全部性能进行处理

00:56:05.076 --> 00:56:06.486 A:middle
通过这种技术

00:56:06.486 --> 00:56:07.866 A:middle
以及对其下的

00:56:07.866 --> 00:56:09.036 A:middle
Metal 性能着色器的增强

00:56:09.756 --> 00:56:11.866 A:middle
我们可以在像 Resnet

00:56:11.866 --> 00:56:13.596 A:middle
这样的大型网络上

00:56:13.596 --> 00:56:14.846 A:middle
获得高达 30% 的性能改进

00:56:15.536 --> 00:56:16.826 A:middle
但是如果你们使用的是小型网络

00:56:16.826 --> 00:56:17.806 A:middle
就像在 iOS 上使用的那种

00:56:17.806 --> 00:56:20.316 A:middle
我们观察到的结果是

00:56:20.316 --> 00:56:21.796 A:middle
当使用 MobileNet 运行时

00:56:21.876 --> 00:56:22.906 A:middle
API 会有高达 4 倍的性能改进

00:56:23.646 --> 00:56:25.536 A:middle
我们并没有就此止步

00:56:26.566 --> 00:56:27.806 A:middle
我们想要让模型更小

00:56:27.806 --> 00:56:30.386 A:middle
所以我们现在支持量化

00:56:30.886 --> 00:56:32.806 A:middle
我们使用一个

00:56:32.806 --> 00:56:35.856 A:middle
以 FP32 制式发布的模型

00:56:36.626 --> 00:56:37.866 A:middle
比如这个来自 MobileNet 的例子

00:56:37.866 --> 00:56:40.216 A:middle
将它调整到 Int 8 制式

00:56:40.216 --> 00:56:42.756 A:middle
然后它的大小将成功从 17MB

00:56:42.756 --> 00:56:44.566 A:middle
减少到小于 5MB

00:56:45.546 --> 00:56:46.926 A:middle
这对于与 App 绑定的模型来说

00:56:46.926 --> 00:56:48.636 A:middle
是一个不少的节省

00:56:48.636 --> 00:56:53.676 A:middle
你们可以通过

00:56:54.066 --> 00:56:55.566 A:middle
“Lookup tabel quantization” 等功能

00:56:55.566 --> 00:56:56.646 A:middle
进行进一步的简化

00:56:56.726 --> 00:56:58.616 A:middle
我们还支持许多其他功能

00:56:58.616 --> 00:57:01.146 A:middle
包括对“Custom models（自定义模型）”的支持

00:56:58.616 --> 00:57:01.146 A:middle
包括对“Custom models（自定义模型）”的支持

00:57:01.146 --> 00:57:03.396 A:middle
以及一个非常流行的功能

00:57:03.396 --> 00:57:05.366 A:middle
“Flexible shapes（柔性形状）”

00:57:05.656 --> 00:57:06.826 A:middle
你们不再需要

00:57:06.826 --> 00:57:08.376 A:middle
为每一个你们想要进行推理的形状

00:57:08.376 --> 00:57:09.266 A:middle
提供一个模型

00:57:09.586 --> 00:57:11.396 A:middle
你们仅需发布一个模型

00:57:11.396 --> 00:57:13.076 A:middle
然后我们简单的 API

00:57:13.076 --> 00:57:17.076 A:middle
将为你处理一切

00:57:17.296 --> 00:57:18.936 A:middle
现在让我们谈谈 Create ML

00:57:19.006 --> 00:57:21.776 A:middle
一个全新的 易于使用的

00:57:21.776 --> 00:57:23.336 A:middle
机器学习训练框架

00:57:24.096 --> 00:57:25.926 A:middle
它汇集了机器学习

00:57:25.926 --> 00:57:28.276 A:middle
Swift Xcode

00:57:28.276 --> 00:57:29.716 A:middle
和 Xcode Playgrounds 的强大功能

00:57:31.536 --> 00:57:33.166 A:middle
使你们不必再从互联网下载包

00:57:33.166 --> 00:57:34.206 A:middle
并通过冗长

00:57:34.206 --> 00:57:35.256 A:middle
复杂的教程

00:57:35.256 --> 00:57:36.616 A:middle
来训练一个模型

00:57:38.406 --> 00:57:39.636 A:middle
我们支持特征层面训练

00:57:39.636 --> 00:57:41.586 A:middle
例如图形分类

00:57:41.586 --> 00:57:43.076 A:middle
和自然语言处理

00:57:44.256 --> 00:57:45.736 A:middle
如果你们想深入研究

00:57:45.736 --> 00:57:47.336 A:middle
机器学习

00:57:47.336 --> 00:57:49.226 A:middle
我们也支持传统类型的算法

00:57:49.276 --> 00:57:50.576 A:middle
比如线性回归

00:57:50.576 --> 00:57:52.336 A:middle
增强树模型

00:57:52.336 --> 00:57:53.516 A:middle
以及传统的数据处理

00:57:53.666 --> 00:57:56.106 A:middle
但是我们认为人们会想要

00:57:56.106 --> 00:57:57.906 A:middle
更多地使用这些

00:57:57.906 --> 00:57:59.476 A:middle
特征类型的训练

00:57:59.476 --> 00:58:00.596 A:middle
所以让我们来看看这些例子

00:57:59.476 --> 00:58:00.596 A:middle
所以让我们来看看这些例子

00:58:01.986 --> 00:58:05.106 A:middle
对于自然语言处理

00:58:05.106 --> 00:58:06.976 A:middle
你们现在可以拥有自己的

00:58:06.976 --> 00:58:08.816 A:middle
自定义自然语言模型

00:58:08.816 --> 00:58:10.646 A:middle
该模型可以进行

00:58:10.996 --> 00:58:12.096 A:middle
文本分类 单词标记

00:58:12.096 --> 00:58:12.886 A:middle
并支持多种语言

00:58:12.886 --> 00:58:16.576 A:middle
你们可以用非常小的数据集

00:58:16.576 --> 00:58:18.236 A:middle
训练一个模型

00:58:18.236 --> 00:58:20.536 A:middle
做情感分析

00:58:20.536 --> 00:58:22.636 A:middle
比如电影评论

00:58:22.636 --> 00:58:23.766 A:middle
你们只需要在

00:58:23.766 --> 00:58:25.046 A:middle
字符串中训练正负

00:58:25.046 --> 00:58:26.766 A:middle
然后建立自己的自定义图形

00:58:26.796 --> 00:58:27.796 A:middle
自定义文本分类器

00:58:28.846 --> 00:58:31.786 A:middle
你们也可以用这样的方法

00:58:32.266 --> 00:58:34.196 A:middle
进行领域分析

00:58:34.196 --> 00:58:36.226 A:middle
训练一个模型来理解

00:58:36.226 --> 00:58:37.286 A:middle
在给定的句子中你们谈论的

00:58:37.286 --> 00:58:39.316 A:middle
是一家酒店还是一家餐厅

00:58:40.026 --> 00:58:43.636 A:middle
我们认为 到目前为止

00:58:43.636 --> 00:58:44.986 A:middle
图形分类是

00:58:45.036 --> 00:58:46.126 A:middle
人们想要做的

00:58:46.126 --> 00:58:49.256 A:middle
最受欢迎的训练

00:58:49.256 --> 00:58:50.616 A:middle
所以我们把重点放在这上面

00:58:51.646 --> 00:58:52.896 A:middle
一般来说

00:58:52.896 --> 00:58:55.466 A:middle
如果你们用一个很小的数据集

00:58:55.466 --> 00:58:56.526 A:middle
来训练一个非常大的模型

00:58:56.526 --> 00:58:58.086 A:middle
因为作为开发人员

00:58:58.086 --> 00:58:59.246 A:middle
你们可能只能访问到这样的数据

00:58:59.426 --> 00:59:01.096 A:middle
那么你们的模型将不会得到很好的训练

00:58:59.426 --> 00:59:01.096 A:middle
那么你们的模型将不会得到很好的训练

00:59:01.096 --> 00:59:02.456 A:middle
它们会被过度供给

00:59:02.456 --> 00:59:03.236 A:middle
然后你们就会得到糟糕的预测

00:59:03.846 --> 00:59:06.506 A:middle
Apple 在使用

00:59:06.506 --> 00:59:08.646 A:middle
数百万的照片数据

00:59:08.646 --> 00:59:10.696 A:middle
训练非常大的模型的方面

00:59:10.746 --> 00:59:12.856 A:middle
有着十分丰富的经验

00:59:13.236 --> 00:59:14.786 A:middle
我们想把所有的经验

00:59:14.786 --> 00:59:16.416 A:middle
传授给你们

00:59:16.746 --> 00:59:19.136 A:middle
通过一种叫做迁移学习的技术

00:59:19.136 --> 00:59:21.896 A:middle
你们可以训练自己的

00:59:22.156 --> 00:59:23.896 A:middle
自定义图形分类器

00:59:25.206 --> 00:59:27.506 A:middle
我们把模型打包到

00:59:27.506 --> 00:59:28.956 A:middle
我们的 OS 中

00:59:28.956 --> 00:59:29.666 A:middle
这样就不需要你们交付了

00:59:30.096 --> 00:59:32.116 A:middle
然后获取你们的数据

00:59:32.116 --> 00:59:33.336 A:middle
并通过 Creat ML 使用迁移学习

00:59:33.336 --> 00:59:35.366 A:middle
然后增强我们的模型

00:59:36.706 --> 00:59:38.076 A:middle
这意味着你们只需要

00:59:38.136 --> 00:59:39.166 A:middle
交付模型中被增强的那部分

00:59:39.166 --> 00:59:41.636 A:middle
这为你们的 App

00:59:41.636 --> 00:59:43.516 A:middle
带来了十分可观的节省

00:59:44.926 --> 00:59:45.926 A:middle
很多开发人员

00:59:45.926 --> 00:59:47.626 A:middle
需要构建大约 100MB 规模的模型

00:59:47.626 --> 00:59:48.606 A:middle
仅仅为了向他们的 App 中

00:59:48.606 --> 00:59:50.396 A:middle
添加一个智能功能

00:59:50.396 --> 00:59:52.526 A:middle
我们帮助他们提高了效率

00:59:53.376 --> 00:59:54.506 A:middle
现在 通过迁移学习

00:59:54.506 --> 00:59:55.886 A:middle
他们可以把模型的大小

00:59:55.886 --> 00:59:57.726 A:middle
缩减到 3MB

00:59:58.516 --> 01:00:05.856 A:middle
[ 掌声 ]

00:59:58.516 --> 01:00:05.856 A:middle
[ 掌声 ]

01:00:06.356 --> 01:00:08.296 A:middle
如果你们能够了解

01:00:08.296 --> 01:00:09.716 A:middle
在 Xcode 和 Xcode Playground 中

01:00:09.716 --> 01:00:11.726 A:middle
实现这一点的方法

01:00:11.726 --> 01:00:13.166 A:middle
那就更酷了

01:00:13.166 --> 01:00:14.186 A:middle
所以我想邀请 Lizzie 上来给你们演示一下

01:00:14.856 --> 01:00:16.856 A:middle
[ 掌声 ]

01:00:17.196 --> 01:00:17.406 A:middle
Lizzie

01:00:18.746 --> 01:00:19.276 A:middle
&gt;&gt; 谢谢 John

01:00:20.196 --> 01:00:21.506 A:middle
让我们来看看

01:00:21.506 --> 01:00:23.456 A:middle
如何创建一个 App

01:00:23.456 --> 01:00:24.936 A:middle
来对不同类型的花进行分类

01:00:25.686 --> 01:00:26.986 A:middle
我将使用一种

01:00:27.136 --> 01:00:28.146 A:middle
最先进的图形分类器模型

01:00:28.146 --> 01:00:29.516 A:middle
叫做 Inception B3

01:00:29.516 --> 01:00:31.726 A:middle
但是这种方法有两个问题

01:00:31.726 --> 01:00:33.076 A:middle
但是这种方法有两个问题

01:00:33.506 --> 01:00:35.486 A:middle
第一个问题是这个模型很大

01:00:35.486 --> 01:00:39.076 A:middle
它在我们的 App 中占了 100MB 的内存

01:00:39.076 --> 01:00:40.916 A:middle
第二个问题是

01:00:40.916 --> 01:00:42.986 A:middle
即使这个模型

01:00:43.046 --> 01:00:44.976 A:middle
支持 1000 个分类

01:00:45.136 --> 01:00:47.396 A:middle
它也不能正确分类一个玫瑰

01:00:48.076 --> 01:00:49.826 A:middle
一般来说我要做的就是

01:00:49.826 --> 01:00:51.276 A:middle
切换到新的开发环境

01:00:51.276 --> 01:00:52.936 A:middle
下载一个开源的

01:00:52.996 --> 01:00:54.466 A:middle
机器学习库

01:00:54.466 --> 01:00:56.586 A:middle
然后花几个小时 训练一个新的模型

01:00:57.376 --> 01:00:59.686 A:middle
但是现在有了 Create ML 的强大功能

01:00:59.796 --> 01:01:02.656 A:middle
你们现在可以在几分钟内

01:00:59.796 --> 01:01:02.656 A:middle
你们现在可以在几分钟内

01:01:02.896 --> 01:01:04.826 A:middle
在 Xcode 中完成这项工作

01:01:04.826 --> 01:01:05.866 A:middle
我将切换到一个新的 Playground

01:01:05.866 --> 01:01:08.226 A:middle
并导入 CreatMLUI

01:01:09.506 --> 01:01:11.296 A:middle
下一步是定义一个 builder

01:01:11.296 --> 01:01:14.066 A:middle
它可以构建

01:01:14.066 --> 01:01:15.006 A:middle
图形分类器模型

01:01:16.256 --> 01:01:18.066 A:middle
然后 为了启用

01:01:18.066 --> 01:01:20.166 A:middle
这个模型的拖放交互

01:01:20.166 --> 01:01:21.796 A:middle
我们可以在实况视图中

01:01:21.856 --> 01:01:22.136 A:middle
显示这个构建器

01:01:22.736 --> 01:01:24.286 A:middle
请看一下旁边

01:01:24.326 --> 01:01:26.146 A:middle
我们得到了一个提示

01:01:26.146 --> 01:01:26.886 A:middle
告诉我们拖如图形来开始训练

01:01:28.366 --> 01:01:30.936 A:middle
在我的桌面上

01:01:30.936 --> 01:01:32.506 A:middle
我有很多不同的

01:01:32.506 --> 01:01:35.096 A:middle
花的图片

01:01:35.096 --> 01:01:36.676 A:middle
并根据它们的名字

01:01:36.676 --> 01:01:37.776 A:middle
整理在不同的文件夹中

01:01:38.596 --> 01:01:39.686 A:middle
我们有雏菊 朱槿

01:01:40.026 --> 01:01:43.656 A:middle
当然还有玫瑰

01:01:45.416 --> 01:01:46.566 A:middle
现在我要做的是

01:01:46.566 --> 01:01:48.636 A:middle
把这个文件夹拖到 UI 中

01:01:49.466 --> 01:01:50.936 A:middle
很快 一个图形分类器模型

01:01:50.936 --> 01:01:52.816 A:middle
通过 GPU 的加速

01:01:52.896 --> 01:01:55.646 A:middle
开始在 Mac 上训练

01:01:55.726 --> 01:01:58.156 A:middle
我马上就能看到

01:01:58.156 --> 01:02:00.116 A:middle
这个训练数据集的准确度

01:01:58.156 --> 01:02:00.116 A:middle
这个训练数据集的准确度

01:02:00.546 --> 01:02:01.856 A:middle
但我真正想知道的是

01:02:01.856 --> 01:02:03.586 A:middle
它对没有出现过的花朵

01:02:03.636 --> 01:02:05.186 A:middle
的分类表现如何

01:02:05.316 --> 01:02:07.156 A:middle
我把其中的一些放在这里

01:02:07.206 --> 01:02:09.146 A:middle
然后把它们拖进来

01:02:09.246 --> 01:02:10.796 A:middle
让模型开始分析

01:02:10.796 --> 01:02:12.346 A:middle
这些新的图片

01:02:13.076 --> 01:02:15.266 A:middle
当我滚动界面时

01:02:15.456 --> 01:02:16.996 A:middle
你们可以看到

01:02:16.996 --> 01:02:18.556 A:middle
每种花的实际标签

01:02:18.556 --> 01:02:19.436 A:middle
以及模型的预测结果

01:02:20.676 --> 01:02:24.486 A:middle
在这个数据集中 95% 的准确度 是相当不错的

01:02:25.236 --> 01:02:26.886 A:middle
我现在想做的是

01:02:26.886 --> 01:02:27.986 A:middle
把它添加到我的 App 中

01:02:27.986 --> 01:02:29.456 A:middle
你们只需拖拽一下

01:02:29.456 --> 01:02:31.406 A:middle
就可以了

01:02:34.096 --> 01:02:34.736 A:middle
我添加好了

01:02:34.856 --> 01:02:36.616 A:middle
我们看看这个新的模型

01:02:36.616 --> 01:02:38.926 A:middle
可以发现

01:02:39.116 --> 01:02:40.016 A:middle
它只有 50KB

01:02:40.566 --> 01:02:41.866 A:middle
这是节省了很多空间

01:02:42.396 --> 01:02:44.226 A:middle
所以我会删除

01:02:45.516 --> 01:02:52.046 A:middle
[ 掌声 ]

01:02:52.546 --> 01:02:53.966 A:middle
我会删除这个 100MB 的模型

01:02:53.966 --> 01:02:55.496 A:middle
并初始化这个

01:02:55.496 --> 01:02:56.966 A:middle
新的图形分类器

01:02:58.986 --> 01:03:01.976 A:middle
如果我重新运行这个 App

01:02:58.986 --> 01:03:01.976 A:middle
如果我重新运行这个 App

01:03:02.046 --> 01:03:04.196 A:middle
它就会将这个新的模型

01:03:04.346 --> 01:03:05.026 A:middle
绑定到 App 中

01:03:05.696 --> 01:03:07.276 A:middle
我们可以对它进行测试

01:03:07.346 --> 01:03:08.806 A:middle
看看它是否能够正确地预测

01:03:09.176 --> 01:03:10.626 A:middle
我们训练过的图片

01:03:10.626 --> 01:03:13.116 A:middle
或者同样类型的

01:03:13.116 --> 01:03:13.806 A:middle
花的新图片

01:03:14.376 --> 01:03:16.146 A:middle
的确 它可以正确地

01:03:16.146 --> 01:03:17.416 A:middle
对玫瑰进行分类

01:03:18.366 --> 01:03:19.546 A:middle
让我们再试试朱槿的分类

01:03:19.546 --> 01:03:22.006 A:middle
经过我们的训练

01:03:22.006 --> 01:03:23.346 A:middle
以及与 App 的整合后

01:03:23.346 --> 01:03:25.703 A:middle
它也可以正确地分辨这类图片

01:03:25.996 --> 01:03:27.366 A:middle
正如你们所看到的

01:03:27.366 --> 01:03:29.536 A:middle
我们已经能够

01:03:29.536 --> 01:03:31.676 A:middle
通过 Swift 和 Xcode

01:03:31.786 --> 01:03:33.056 A:middle
在很少的时间内

01:03:33.286 --> 01:03:37.536 A:middle
用 Create ML 训练我们的分类器模型 且模型的

01:03:37.726 --> 01:03:38.036 A:middle
大小十分轻量

01:03:38.816 --> 01:03:39.746 A:middle
下面有请 John

01:03:40.516 --> 01:03:43.296 A:middle
[ 掌声 ]

01:03:43.796 --> 01:03:44.146 A:middle
&gt;&gt; 谢谢 Lizzie

01:03:47.296 --> 01:03:49.106 A:middle
这难道不酷吗

01:03:49.106 --> 01:03:50.496 A:middle
仅仅使用三行的 Swift

01:03:50.496 --> 01:03:52.776 A:middle
就在 Mac 上用几秒钟的时间

01:03:53.066 --> 01:03:57.176 A:middle
训练了一个自定义图像分类器

01:03:57.386 --> 01:03:59.836 A:middle
我们已经讨论了新的

01:03:59.836 --> 01:04:01.446 A:middle
视觉和自然语言处理 API

01:03:59.836 --> 01:04:01.446 A:middle
视觉和自然语言处理 API

01:04:01.446 --> 01:04:02.626 A:middle
以及我们所做的一些增强

01:04:02.626 --> 01:04:05.196 A:middle
我们对 Core ML 2 的改进

01:04:05.196 --> 01:04:06.866 A:middle
能够使模型变得更小 更快

01:04:06.866 --> 01:04:08.486 A:middle
且支持更多的自定义

01:04:08.486 --> 01:04:10.526 A:middle
Create ML 方面

01:04:10.526 --> 01:04:12.546 A:middle
我们为 Mac 加入了

01:04:12.546 --> 01:04:16.546 A:middle
全新的机器学习训练框架

01:04:16.756 --> 01:04:17.746 A:middle
现在我想谈一谈

01:04:17.746 --> 01:04:19.016 A:middle
我们在 OS 中构建的

01:04:19.066 --> 01:04:20.046 A:middle
另一个智能领域

01:04:20.046 --> 01:04:23.296 A:middle
那就是“捷径”

01:04:23.296 --> 01:04:25.106 A:middle
你们可以通过 Siri

01:04:25.106 --> 01:04:26.196 A:middle
暴露 App 中的

01:04:26.196 --> 01:04:27.776 A:middle
关键功能

01:04:27.866 --> 01:04:31.176 A:middle
你们甚至可以使用语音命令

01:04:31.176 --> 01:04:34.646 A:middle
暴露这些关键功能

01:04:36.316 --> 01:04:38.606 A:middle
此前在 OS 中的

01:04:38.606 --> 01:04:40.536 A:middle
为 Apple 软件

01:04:40.536 --> 01:04:42.846 A:middle
建议功能和操作的部分特性

01:04:42.846 --> 01:04:44.856 A:middle
如今可以通过“捷径”而实现

01:04:46.266 --> 01:04:47.906 A:middle
所有这些预测都是在设备上

01:04:47.906 --> 01:04:49.576 A:middle
通过机器学习做出的

01:04:49.856 --> 01:04:51.486 A:middle
从而保护了用户的隐私

01:04:53.456 --> 01:04:54.666 A:middle
你们可能会问

01:04:54.666 --> 01:04:55.526 A:middle
如何应用“捷径”

01:04:56.666 --> 01:04:57.956 A:middle
你们中的许多人

01:04:57.956 --> 01:05:00.306 A:middle
已经应用了一些

01:04:57.956 --> 01:05:00.306 A:middle
已经应用了一些

01:05:00.356 --> 01:05:01.936 A:middle
NSUserActivity 的功能

01:05:01.936 --> 01:05:03.096 A:middle
比如“聚焦”搜索和“接力”

01:05:03.256 --> 01:05:05.976 A:middle
如果你就是他们中的一员

01:05:06.026 --> 01:05:07.496 A:middle
现在只需添加这一行代码

01:05:07.496 --> 01:05:09.206 A:middle
就可以使它们

01:05:09.206 --> 01:05:10.796 A:middle
支持系统的预测

01:05:11.016 --> 01:05:12.496 A:middle
[ 掌声 ]

01:05:12.496 --> 01:05:13.436 A:middle
没错 仅仅一行代码

01:05:13.436 --> 01:05:18.016 A:middle
但是如果你们想要体验

01:05:18.046 --> 01:05:20.376 A:middle
完整且丰富的“捷径”功能

01:05:20.376 --> 01:05:21.826 A:middle
你们需要使用加强的

01:05:21.826 --> 01:05:22.756 A:middle
新 SiriKit 的 Intents API

01:05:23.996 --> 01:05:26.406 A:middle
它可以使 App

01:05:28.046 --> 01:05:29.606 A:middle
丰富的内联功能

01:05:29.606 --> 01:05:32.106 A:middle
集成在 Siri 中

01:05:32.106 --> 01:05:33.726 A:middle
并支持自定义语音触发和响应

01:05:34.126 --> 01:05:35.866 A:middle
更重要的是

01:05:35.906 --> 01:05:37.776 A:middle
它可以更有针对性地预测

01:05:37.776 --> 01:05:39.736 A:middle
这些“捷径”在未来的何时

01:05:39.866 --> 01:05:41.616 A:middle
会引起用户的兴趣

01:05:42.786 --> 01:05:45.856 A:middle
一个优秀的“捷径”

01:05:45.856 --> 01:05:47.276 A:middle
应该能加速并增加

01:05:47.276 --> 01:05:49.886 A:middle
与 App 的连接

01:05:50.656 --> 01:05:53.826 A:middle
应该被更频繁地使用

01:05:54.686 --> 01:05:56.566 A:middle
例如在 TeamSnap 中

01:05:56.566 --> 01:05:58.426 A:middle
你们希望能够

01:05:58.456 --> 01:06:00.656 A:middle
检查孩子在每个周六早上的

01:05:58.456 --> 01:06:00.656 A:middle
检查孩子在每个周六早上的

01:06:00.656 --> 01:06:01.536 A:middle
足球比赛日程

01:06:02.526 --> 01:06:03.796 A:middle
理想情况下 我们希望这个功能

01:06:03.796 --> 01:06:05.976 A:middle
能够集成在 Siri UI 中

01:06:06.046 --> 01:06:08.196 A:middle
并被直接处理

01:06:08.196 --> 01:06:09.336 A:middle
而无需进入 App

01:06:09.336 --> 01:06:11.296 A:middle
如果这是你们想要做的事情

01:06:11.376 --> 01:06:13.826 A:middle
你们现在完全可以实现它

01:06:14.176 --> 01:06:15.806 A:middle
在创建“捷径”时

01:06:16.046 --> 01:06:17.686 A:middle
你们需要做三件简单的事情

01:06:18.336 --> 01:06:19.636 A:middle
显然 你们需要定义这个“捷径”

01:06:19.636 --> 01:06:21.066 A:middle
而且需要为

01:06:21.066 --> 01:06:22.246 A:middle
用户真正感兴趣的操作

01:06:22.246 --> 01:06:23.366 A:middle
定义它

01:06:24.516 --> 01:06:25.716 A:middle
当这些“捷径”出现时

01:06:25.716 --> 01:06:27.446 A:middle
即使它们在 App 中

01:06:27.446 --> 01:06:29.346 A:middle
你们也需要递交

01:06:29.346 --> 01:06:30.496 A:middle
因为我们需要这个信号

01:06:30.496 --> 01:06:32.106 A:middle
在将来预测这些“捷径”

01:06:32.106 --> 01:06:34.196 A:middle
当然 当这些“捷径”出现时

01:06:34.196 --> 01:06:35.566 A:middle
你需要处理它们

01:06:35.566 --> 01:06:38.676 A:middle
如果你们已经完成了这些操作

01:06:38.676 --> 01:06:40.436 A:middle
你们会惊喜地发现

01:06:40.436 --> 01:06:41.916 A:middle
你们可以直接与

01:06:41.916 --> 01:06:43.496 A:middle
HomePod 中的“捷径”进行互动

01:06:44.246 --> 01:06:45.626 A:middle
所以现在 你们不用拿起手机

01:06:45.626 --> 01:06:47.166 A:middle
只需要在 HomePod 那里

01:06:47.166 --> 01:06:48.816 A:middle
向 Siri 询问

01:06:48.816 --> 01:06:50.656 A:middle
孩子的球员名单

01:06:50.656 --> 01:06:53.426 A:middle
它就会借助 App 中的信息回复你

01:06:53.696 --> 01:06:55.766 A:middle
如果你们也想

01:06:55.766 --> 01:06:57.096 A:middle
让你们的“捷径”

01:06:57.096 --> 01:06:59.016 A:middle
在 Siri 表盘上显示

01:06:59.016 --> 01:07:01.046 A:middle
你们可以采用这个新的 Relevant API

01:06:59.016 --> 01:07:01.046 A:middle
你们可以采用这个新的 Relevant API

01:07:02.066 --> 01:07:06.026 A:middle
这就是“捷径”

01:07:06.026 --> 01:07:08.056 A:middle
一种可以暴露 App 的关键功能

01:07:08.056 --> 01:07:09.606 A:middle
并可以通过 Siri

01:07:09.846 --> 01:07:12.016 A:middle
提高用户参与度的 强大的新方法

01:07:13.686 --> 01:07:15.246 A:middle
现在 我想邀请 Jeremy 上台

01:07:15.246 --> 01:07:17.676 A:middle
与你们谈谈关于 Metal 的新内容

01:07:17.866 --> 01:07:18.046 A:middle
Jeremy

01:07:19.516 --> 01:07:22.816 A:middle
[ 掌声 ]

01:07:23.316 --> 01:07:23.816 A:middle
&gt;&gt; 谢谢 John

01:07:24.646 --> 01:07:26.526 A:middle
Metal 是 Apple 现代的

01:07:26.526 --> 01:07:27.616 A:middle
性能强大

01:07:27.856 --> 01:07:29.056 A:middle
且高效的编程接口

01:07:29.056 --> 01:07:30.646 A:middle
它接通了 Apple 所有平台的核心

01:07:30.646 --> 01:07:32.626 A:middle
也就是 GPU

01:07:32.626 --> 01:07:33.636 A:middle
利用了它强大的能力

01:07:34.076 --> 01:07:35.716 A:middle
它加速了高级 3D 图形

01:07:35.716 --> 01:07:37.526 A:middle
以及通用数据的

01:07:37.526 --> 01:07:38.976 A:middle
并行计算

01:07:39.756 --> 01:07:41.306 A:middle
自我们在 2014 年推出 Metal 以来

01:07:41.306 --> 01:07:43.416 A:middle
我们看到它已被广泛用于

01:07:43.416 --> 01:07:44.916 A:middle
流畅且高性能的 UI

01:07:44.916 --> 01:07:47.246 A:middle
现代 3D 游戏

01:07:47.246 --> 01:07:49.266 A:middle
高级计算摄影

01:07:49.266 --> 01:07:51.396 A:middle
以及最新的

01:07:51.396 --> 01:07:53.256 A:middle
AR 和 VR 体验

01:07:53.936 --> 01:07:54.866 A:middle
去年秋天

01:07:54.866 --> 01:07:56.926 A:middle
当我们推出最新款 iPhone 时

01:07:56.926 --> 01:07:58.506 A:middle
我们在 A11 Bionic 芯片的支持下

01:07:58.506 --> 01:08:00.096 A:middle
非常兴奋地揭开了了 Metal 的新章节

01:07:58.506 --> 01:08:00.096 A:middle
非常兴奋地揭开了了 Metal 的新章节

01:08:00.096 --> 01:08:02.556 A:middle
Apple 利用多年

01:08:02.846 --> 01:08:05.176 A:middle
在硬件和软件设计方面

01:08:05.176 --> 01:08:07.166 A:middle
深厚的专业知识的芯片

01:08:07.276 --> 01:08:09.246 A:middle
发布了针对 Metal 2 优化的

01:08:09.246 --> 01:08:11.586 A:middle
自行设计的 GPU

01:08:11.766 --> 01:08:14.246 A:middle
它具有切片式着色

01:08:14.286 --> 01:08:15.776 A:middle
和图块等

01:08:15.776 --> 01:08:17.076 A:middle
创新的新特性

01:08:17.076 --> 01:08:18.305 A:middle
并以更快的性能

01:08:18.305 --> 01:08:20.046 A:middle
和更低的功耗

01:08:20.046 --> 01:08:22.106 A:middle
推动了 GPU 编程的发展

01:08:22.106 --> 01:08:24.406 A:middle
现在你们的 App 可以

01:08:24.406 --> 01:08:26.106 A:middle
直接使用 Metal 处理 3D 图形

01:08:26.106 --> 01:08:27.386 A:middle
和 GPU 计算

01:08:27.555 --> 01:08:29.136 A:middle
此外 Metal 还为 Apple 的

01:08:29.136 --> 01:08:31.126 A:middle
针对图形 媒体和数据处理的许多系统框架

01:08:31.345 --> 01:08:33.015 A:middle
提供了强大的支持

01:08:33.015 --> 01:08:35.256 A:middle
让我为你们举一些例子

01:08:35.256 --> 01:08:37.716 A:middle
我们的 iOS 摄像头框架

01:08:37.716 --> 01:08:38.886 A:middle
使用 Metal 计算深度信息

01:08:38.886 --> 01:08:41.196 A:middle
识别照片中的人物

01:08:41.196 --> 01:08:42.676 A:middle
并在这张华丽的

01:08:42.716 --> 01:08:44.145 A:middle
人像模式图片中

01:08:44.145 --> 01:08:45.395 A:middle
产生景深效果

01:08:46.176 --> 01:08:47.786 A:middle
开发人员 Epic Games

01:08:47.786 --> 01:08:49.216 A:middle
利用我们在所有平台上

01:08:49.216 --> 01:08:50.805 A:middle
对 Metal 的广泛支持

01:08:50.805 --> 01:08:52.026 A:middle
在 iPhone iPad 和 Mac 上

01:08:52.106 --> 01:08:55.116 A:middle
发布了他们的畅销游戏 《堡垒之夜》

01:08:56.486 --> 01:08:58.796 A:middle
AMD 的受 Metal 加速的

01:08:58.796 --> 01:08:59.395 A:middle
Radeon ProRender 插件

01:08:59.395 --> 01:09:01.805 A:middle
现在正在 Maxon Cinema4D 和

01:08:59.395 --> 01:09:01.805 A:middle
现在正在 Maxon Cinema4D 和

01:09:01.805 --> 01:09:03.946 A:middle
Autodesk Maya 中

01:09:03.946 --> 01:09:05.566 A:middle
驱动高性能的 3D 内容创建

01:09:05.566 --> 01:09:08.876 A:middle
和专业编辑

01:09:09.466 --> 01:09:11.526 A:middle
像《Gravity Sketch》这样的 App

01:09:11.526 --> 01:09:13.256 A:middle
正在使用 Metal

01:09:13.256 --> 01:09:14.946 A:middle
为新一代的艺术家提供

01:09:14.946 --> 01:09:17.106 A:middle
沉浸式的专业 VR 编辑功能

01:09:18.696 --> 01:09:20.055 A:middle
Metal 的机器学习加速功能

01:09:20.055 --> 01:09:21.816 A:middle
使《BeCasso》等 iOS App

01:09:21.816 --> 01:09:23.386 A:middle
能够将你们的照片

01:09:23.386 --> 01:09:25.826 A:middle
转化为美丽的画作

01:09:26.225 --> 01:09:27.506 A:middle
并在 macOS 的

01:09:27.616 --> 01:09:29.515 A:middle
Pixelmator Pro 中

01:09:29.515 --> 01:09:31.435 A:middle
驱动自动和智能的图像编辑

01:09:32.225 --> 01:09:33.055 A:middle
这些只是其中一部分例子

01:09:33.055 --> 01:09:34.996 A:middle
因为开发人员对 Metal 的

01:09:34.996 --> 01:09:37.446 A:middle
应用非常惊人

01:09:37.446 --> 01:09:38.486 A:middle
现在已经有超过 40 万个 App

01:09:38.546 --> 01:09:40.886 A:middle
使用 Metal API

01:09:42.395 --> 01:09:44.316 A:middle
所有运行 iOS 12

01:09:44.376 --> 01:09:46.536 A:middle
和 macOS Mojave 的系统

01:09:46.536 --> 01:09:48.185 A:middle
均支持 Metal

01:09:48.185 --> 01:09:49.716 A:middle
包括过去至少 5 年间发布的

01:09:49.716 --> 01:09:51.296 A:middle
所有 iOS 设备和 Mac

01:09:52.326 --> 01:09:53.856 A:middle
这意味着现在有

01:09:53.856 --> 01:09:56.326 A:middle
超过 10 亿个 Metal 系统

01:09:56.326 --> 01:09:56.976 A:middle
可以支持你们的 App 和游戏

01:09:57.106 --> 01:10:00.886 A:middle
由于 Metal 广泛支持

01:09:57.106 --> 01:10:00.886 A:middle
由于 Metal 广泛支持

01:10:00.886 --> 01:10:04.626 A:middle
Apple 所有的桌面和移动平台

01:10:04.626 --> 01:10:06.106 A:middle
我们现在正从 macOS Mojave

01:10:06.106 --> 01:10:08.476 A:middle
iOS 12 和 Apple tvOS 12 开始

01:10:08.476 --> 01:10:10.686 A:middle
弃用旧有的

01:10:10.686 --> 01:10:12.026 A:middle
OpenGL 和 OpenCL GPU 框架

01:10:12.116 --> 01:10:14.786 A:middle
使用这些旧有 API 的 App

01:10:14.786 --> 01:10:15.916 A:middle
仍然可以在这些

01:10:15.916 --> 01:10:17.256 A:middle
系统版本中运行

01:10:17.256 --> 01:10:18.766 A:middle
但随着我们对旧有技术逐步的淘汰

01:10:18.766 --> 01:10:19.966 A:middle
弃用是必须迈出的第一步

01:10:20.096 --> 01:10:21.156 A:middle
因此如果你们还没有着手

01:10:21.156 --> 01:10:22.256 A:middle
我们建议你们

01:10:22.256 --> 01:10:23.676 A:middle
尽快将 App 转变为 Metal

01:10:23.676 --> 01:10:24.806 A:middle
我们将在不久的将来

01:10:24.806 --> 01:10:27.186 A:middle
就这一转变

01:10:27.186 --> 01:10:27.786 A:middle
进行更多的讨论

01:10:28.716 --> 01:10:29.906 A:middle
在你们转变 App 的过程中

01:10:29.906 --> 01:10:30.966 A:middle
我们可以提供帮助

01:10:31.296 --> 01:10:33.016 A:middle
与其他的 GPU

01:10:33.016 --> 01:10:34.726 A:middle
编程 API 相比

01:10:34.726 --> 01:10:35.856 A:middle
Metal API 更易于使用

01:10:35.856 --> 01:10:37.246 A:middle
也更易于掌握

01:10:37.496 --> 01:10:38.856 A:middle
它包含了一种

01:10:38.856 --> 01:10:41.186 A:middle
熟悉且强大的 C++ GPU 着色语言

01:10:41.436 --> 01:10:43.126 A:middle
我们还为 Metal 的使用

01:10:43.126 --> 01:10:44.426 A:middle
提供了一整套

01:10:44.426 --> 01:10:46.666 A:middle
高级调试和性能分析工具

01:10:46.666 --> 01:10:49.076 A:middle
这些都内置在 Xcode 中

01:10:49.076 --> 01:10:51.286 A:middle
我们还提供了具有高级分析功能的

01:10:51.286 --> 01:10:52.456 A:middle
GPU 性能计数器

01:10:52.456 --> 01:10:53.746 A:middle
来识别你们最宝贵的

01:10:53.746 --> 01:10:55.506 A:middle
着色代码行

01:10:55.506 --> 01:10:57.476 A:middle
一个用于导航 Metal 函数调用的

01:10:57.476 --> 01:10:58.646 A:middle
可视化 API 调试器

01:10:58.646 --> 01:11:00.666 A:middle
以及 Metal 系统跟踪

01:10:58.646 --> 01:11:00.666 A:middle
以及 Metal 系统跟踪

01:11:00.666 --> 01:11:02.226 A:middle
用于将你们的 Metal 命令

01:11:02.226 --> 01:11:03.506 A:middle
放在系统上发生的

01:11:03.506 --> 01:11:04.506 A:middle
所有其他事件的环境中

01:11:04.996 --> 01:11:07.476 A:middle
今年 我们很兴奋地宣布

01:11:07.516 --> 01:11:08.956 A:middle
两个强大的工具

01:11:08.956 --> 01:11:10.586 A:middle
一个是新的 Metal 依赖查看器

01:11:10.586 --> 01:11:11.776 A:middle
你们可以调查你们的

01:11:11.776 --> 01:11:13.326 A:middle
复杂且多通道的渲染和命令编码器

01:11:13.326 --> 01:11:15.526 A:middle
另一个是全新的

01:11:15.526 --> 01:11:17.666 A:middle
交互式 GPU 源代码

01:11:17.666 --> 01:11:19.306 A:middle
着色调试器

01:11:19.306 --> 01:11:20.806 A:middle
你们可以将 Metal 代码

01:11:20.806 --> 01:11:22.966 A:middle
探索到像素级别

01:11:24.036 --> 01:11:25.046 A:middle
你们一定想看到

01:11:25.046 --> 01:11:26.596 A:middle
这些新工具的作用

01:11:26.596 --> 01:11:28.756 A:middle
所以我想邀请 Seth 为你们做一个演示

01:11:29.346 --> 01:11:29.556 A:middle
Seth

01:11:30.516 --> 01:11:35.466 A:middle
[ 掌声 ]

01:11:35.966 --> 01:11:36.496 A:middle
&gt;&gt; 谢谢 John

01:11:37.416 --> 01:11:39.556 A:middle
Xcode 的 GP 调试器

01:11:39.556 --> 01:11:41.216 A:middle
是用于开发 Metal App 的工具

01:11:41.576 --> 01:11:43.306 A:middle
在左侧的调试导航器中

01:11:43.306 --> 01:11:44.646 A:middle
你们可以看到在框架中所使用的

01:11:44.646 --> 01:11:45.926 A:middle
所有 Metal API 代码

01:11:46.126 --> 01:11:46.906 A:middle
和绘制代码

01:11:46.906 --> 01:11:48.956 A:middle
在右边你们可以看到

01:11:48.956 --> 01:11:51.406 A:middle
所选的绘制代码的结果

01:11:51.406 --> 01:11:53.186 A:middle
主编辑器向你们展示了

01:11:53.186 --> 01:11:54.656 A:middle
所有的缓冲区 纹理

01:11:54.656 --> 01:11:56.196 A:middle
和绘制代码所需的

01:11:56.196 --> 01:11:57.316 A:middle
其他资源

01:11:57.576 --> 01:11:59.086 A:middle
我们将介绍在 Xcode 10 中全新的

01:11:59.086 --> 01:12:00.096 A:middle
依赖查看器

01:11:59.086 --> 01:12:00.096 A:middle
依赖查看器

01:12:00.096 --> 01:12:01.556 A:middle
我们可以使用它来了解

01:12:01.556 --> 01:12:04.236 A:middle
复杂的渲染层

01:12:04.236 --> 01:12:06.166 A:middle
是如何组合成场景的

01:12:07.706 --> 01:12:09.136 A:middle
它为你们提供一个

01:12:09.136 --> 01:12:12.296 A:middle
框架的蓝图

01:12:12.296 --> 01:12:14.276 A:middle
从而解释和理解

01:12:14.276 --> 01:12:15.666 A:middle
在一个 App 中复杂的渲染图

01:12:15.746 --> 01:12:17.696 A:middle
例如 Unity 在这里展示的

01:12:17.696 --> 01:12:19.406 A:middle
令人惊叹的《死亡之书》

01:12:20.016 --> 01:12:24.656 A:middle
我可以缩小来查看更多细节

01:12:24.816 --> 01:12:26.486 A:middle
前面的渲染层

01:12:26.486 --> 01:12:28.696 A:middle
显示在顶部

01:12:28.696 --> 01:12:30.426 A:middle
后面的渲染层显示在底部

01:12:31.296 --> 01:12:32.206 A:middle
这些线表示

01:12:32.206 --> 01:12:34.176 A:middle
路径之间的依赖

01:12:34.876 --> 01:12:36.136 A:middle
选中的路径

01:12:36.376 --> 01:12:37.426 A:middle
用蓝色高亮显示

01:12:38.306 --> 01:12:40.096 A:middle
正如你们所见

01:12:40.096 --> 01:12:41.616 A:middle
由于这里有超过 100 张渲染路径

01:12:41.616 --> 01:12:43.146 A:middle
这个场景中显然有很多依赖关系

01:12:44.496 --> 01:12:46.516 A:middle
尽管这个场景看起来已经很好

01:12:47.026 --> 01:12:48.756 A:middle
但仍有提升的空间

01:12:49.256 --> 01:12:50.736 A:middle
所以我做了一个额外的渲染层

01:12:50.736 --> 01:12:52.076 A:middle
镜头光晕

01:12:52.076 --> 01:12:54.336 A:middle
但是你们可以看到

01:12:54.336 --> 01:12:55.806 A:middle
结果看起来并不好

01:12:55.806 --> 01:12:57.156 A:middle
太绿了

01:12:58.176 --> 01:13:03.376 A:middle
让我们放大 选择一个像素

01:12:58.176 --> 01:13:03.376 A:middle
让我们放大 选择一个像素

01:13:03.416 --> 01:13:06.186 A:middle
然后启动新的着色调试器

01:13:06.186 --> 01:13:08.566 A:middle
一个强大的交互式工具

01:13:08.566 --> 01:13:09.956 A:middle
从而根据视觉效果

01:13:09.956 --> 01:13:10.476 A:middle
调试着色器[ 音质不清晰 ]

01:13:11.206 --> 01:13:14.676 A:middle
在主编辑器中

01:13:14.676 --> 01:13:15.156 A:middle
我可以看到源代码

01:13:15.816 --> 01:13:17.396 A:middle
在右边的侧边栏中

01:13:17.526 --> 01:13:19.126 A:middle
我可以看到每一行代码

01:13:19.256 --> 01:13:21.176 A:middle
所涉及的变量

01:13:21.176 --> 01:13:22.806 A:middle
此外 我可以展开

01:13:22.806 --> 01:13:25.316 A:middle
其中的任何一行 来查看更多的细节

01:13:26.146 --> 01:13:27.876 A:middle
这两个视图将所选的

01:13:27.876 --> 01:13:29.486 A:middle
像素周围的区域可视化

01:13:30.316 --> 01:13:31.906 A:middle
并与框架附件中

01:13:31.906 --> 01:13:34.496 A:middle
高亮显示的区域相对应

01:13:36.016 --> 01:13:37.986 A:middle
左边的视图

01:13:37.986 --> 01:13:39.336 A:middle
显示变量值

01:13:39.336 --> 01:13:41.576 A:middle
右边的视图

01:13:41.726 --> 01:13:44.276 A:middle
显示像素 执行蒙版

01:13:44.336 --> 01:13:45.946 A:middle
它表示这一行代码

01:13:45.996 --> 01:13:48.156 A:middle
所执行的像素

01:13:48.326 --> 01:13:49.766 A:middle
这是一种非常强大的方法

01:13:49.826 --> 01:13:52.256 A:middle
来调试 GPU 上

01:13:52.256 --> 01:13:53.756 A:middle
大量的着色器并行执行

01:13:53.756 --> 01:13:57.586 A:middle
你们可以看到

01:13:57.586 --> 01:13:59.016 A:middle
执行蒙版的形状

01:13:59.516 --> 01:14:00.596 A:middle
与视觉异常的形状相匹配

01:13:59.516 --> 01:14:00.596 A:middle
与视觉异常的形状相匹配

01:14:00.596 --> 01:14:02.296 A:middle
这告诉我

01:14:02.296 --> 01:14:05.426 A:middle
问题存在于这一行代码中

01:14:05.426 --> 01:14:06.386 A:middle
现在我知道问题出在哪里了

01:14:06.386 --> 01:14:07.806 A:middle
这就是我的具体错误

01:14:07.806 --> 01:14:09.456 A:middle
我应该使用

01:14:09.456 --> 01:14:10.606 A:middle
镜头光晕的矢量长度

01:14:10.606 --> 01:14:12.556 A:middle
而不是它的颜色

01:14:12.556 --> 01:14:13.976 A:middle
这将很容易修复

01:14:17.286 --> 01:14:18.916 A:middle
我可以点击更新着色器的按钮

01:14:18.916 --> 01:14:20.576 A:middle
来快速应用修复

01:14:20.716 --> 01:14:22.386 A:middle
重新编译着色器

01:14:22.386 --> 01:14:23.836 A:middle
并将其配置到 GPU 上

01:14:24.026 --> 01:14:26.876 A:middle
这里我们可以看到

01:14:26.876 --> 01:14:28.266 A:middle
我的镜头光晕被修复了

01:14:28.266 --> 01:14:28.776 A:middle
场景看起来很酷

01:14:29.516 --> 01:14:36.246 A:middle
[ 掌声 ]

01:14:36.746 --> 01:14:37.936 A:middle
这就是 Xcode 10 中

01:14:37.936 --> 01:14:39.946 A:middle
新的依赖查看器

01:14:39.946 --> 01:14:41.626 A:middle
和 GP 着色调试器

01:14:41.626 --> 01:14:42.856 A:middle
为你们提供强大的新工具来构建

01:14:42.856 --> 01:14:43.416 A:middle
Metal App

01:14:44.066 --> 01:14:44.446 A:middle
Jeremy

01:14:45.276 --> 01:14:47.496 A:middle
&gt;&gt; 好的 [ 掌声 ]

01:14:47.496 --> 01:14:47.776 A:middle
谢谢 Seth

01:14:50.806 --> 01:14:52.036 A:middle
除了这些神奇的新工具外

01:14:52.036 --> 01:14:53.396 A:middle
我们还将继续讨论 Metal

01:14:53.396 --> 01:14:55.266 A:middle
在 iOS 12

01:14:55.266 --> 01:14:57.276 A:middle
和 macOS Mojave 中的

01:14:57.276 --> 01:14:58.606 A:middle
一些全新的功能

01:14:58.606 --> 01:15:00.856 A:middle
我今天将着重介绍其中的三个

01:14:58.606 --> 01:15:00.856 A:middle
我今天将着重介绍其中的三个

01:15:01.526 --> 01:15:03.096 A:middle
“GPU-Driven Command Encoding”

01:15:03.416 --> 01:15:04.556 A:middle
“Machine Learning Training Acceleration”

01:15:04.556 --> 01:15:06.576 A:middle
以及 “Ray Tracing”

01:15:07.496 --> 01:15:09.466 A:middle
首先是 GPU 驱动的命令编码

01:15:09.676 --> 01:15:11.606 A:middle
在之前 你们的 App 会使用 CPU

01:15:11.606 --> 01:15:13.536 A:middle
对 GPU 命令进行编码

01:15:13.536 --> 01:15:14.936 A:middle
然后在 GPU 上

01:15:14.936 --> 01:15:16.686 A:middle
执行这些命令

01:15:17.086 --> 01:15:18.196 A:middle
虽然 Metal 可以使

01:15:18.196 --> 01:15:20.326 A:middle
这种编码非常快

01:15:20.326 --> 01:15:21.426 A:middle
但是它仍然会因为

01:15:21.456 --> 01:15:23.086 A:middle
CPU 和 GPU 之间同步的瓶颈

01:15:23.086 --> 01:15:24.246 A:middle
而受到影响

01:15:24.746 --> 01:15:26.506 A:middle
在 iOS 12 和 macOS Mojave 中

01:15:26.506 --> 01:15:28.026 A:middle
你们可以直接在 GPU 上

01:15:28.026 --> 01:15:29.836 A:middle
对这些命令进行编码

01:15:29.836 --> 01:15:32.046 A:middle
从而节省宝贵的 CPU 时间

01:15:32.046 --> 01:15:34.806 A:middle
以供游戏和 App 使用

01:15:35.276 --> 01:15:36.746 A:middle
由于你们使用的是

01:15:36.746 --> 01:15:38.476 A:middle
一个计算着色器

01:15:38.476 --> 01:15:39.886 A:middle
来在 GPU 上处理这些命令

01:15:39.886 --> 01:15:41.016 A:middle
所以你们也可以

01:15:41.016 --> 01:15:42.386 A:middle
并行地构造

01:15:42.386 --> 01:15:44.076 A:middle
大量的命令

01:15:44.076 --> 01:15:47.976 A:middle
从而获得更佳的渲染性能和复杂性

01:15:48.966 --> 01:15:50.876 A:middle
接下来 我想分享

01:15:50.876 --> 01:15:52.526 A:middle
关于 Metal 对机器学习的支持

01:15:52.716 --> 01:15:54.036 A:middle
的最新进展

01:15:54.396 --> 01:15:57.186 A:middle
在 iOS 12 和 macOS Mojave 中

01:15:57.186 --> 01:15:59.936 A:middle
我们为现有的 Metal 性能着色库

01:15:59.936 --> 01:16:01.876 A:middle
增加了大量

01:15:59.936 --> 01:16:01.876 A:middle
增加了大量

01:16:01.876 --> 01:16:03.566 A:middle
全新的计算内核

01:16:03.966 --> 01:16:05.626 A:middle
经过优化后 它们可以在 iOS

01:16:05.626 --> 01:16:07.196 A:middle
和 Mac 设备的本地 GPU 上

01:16:07.196 --> 01:16:09.926 A:middle
支持机器学习训练

01:16:10.246 --> 01:16:11.646 A:middle
新的 Metal 性能着色器

01:16:11.646 --> 01:16:14.076 A:middle
在机器学习训练时的性能改进

01:16:14.076 --> 01:16:15.706 A:middle
是令人惊叹的

01:16:15.706 --> 01:16:17.116 A:middle
训练速度快了

01:16:17.166 --> 01:16:18.456 A:middle
一个数量级

01:16:19.376 --> 01:16:20.846 A:middle
我们也非常高兴地宣布

01:16:20.846 --> 01:16:21.826 A:middle
我们一直在与 Google 合作

01:16:21.866 --> 01:16:22.796 A:middle
并将在今年的晚些时候

01:16:22.796 --> 01:16:24.676 A:middle
将 Metal 加速引入 TensorFlow

01:16:24.676 --> 01:16:25.966 A:middle
早期的性能结果显示

01:16:25.966 --> 01:16:27.226 A:middle
相较于以前

01:16:27.226 --> 01:16:29.406 A:middle
执行的速度快了 20 倍

01:16:29.406 --> 01:16:31.236 A:middle
这是一个惊人的进步

01:16:32.316 --> 01:16:33.936 A:middle
[ 掌声 ] 是的 非常棒

01:16:34.516 --> 01:16:36.756 A:middle
[ 掌声 ]

01:16:37.256 --> 01:16:38.796 A:middle
最后 射线跟踪

01:16:38.796 --> 01:16:39.866 A:middle
这是一个有较长历史的技术

01:16:39.866 --> 01:16:41.746 A:middle
它可以实现令人

01:16:41.806 --> 01:16:44.076 A:middle
难以置信的逼真场景

01:16:44.076 --> 01:16:45.646 A:middle
通常用于高端渲染

01:16:45.646 --> 01:16:46.336 A:middle
和 3D 产品设计

01:16:46.716 --> 01:16:48.116 A:middle
然而一般来说

01:16:48.116 --> 01:16:49.466 A:middle
它必须离线完成

01:16:49.466 --> 01:16:51.206 A:middle
因为它的计算成本非常高

01:16:51.346 --> 01:16:54.796 A:middle
现在让我快速地描述一下原因

01:16:55.126 --> 01:16:56.196 A:middle
首先 你们需要通过数学建模

01:16:56.196 --> 01:16:58.036 A:middle
模拟光线从光源发出

01:16:58.036 --> 01:17:00.636 A:middle
在物体上反射穿过场景

01:16:58.036 --> 01:17:00.636 A:middle
在物体上反射穿过场景

01:17:00.636 --> 01:17:02.676 A:middle
朝向屏幕

01:17:02.676 --> 01:17:03.686 A:middle
并进入你们的眼睛的过程

01:17:04.326 --> 01:17:05.756 A:middle
并且为了获得越来越高的分辨率

01:17:05.756 --> 01:17:07.126 A:middle
你们需要添加

01:17:07.126 --> 01:17:09.796 A:middle
越来越多的射线

01:17:10.866 --> 01:17:14.206 A:middle
直到达到理想的分辨率

01:17:14.206 --> 01:17:15.486 A:middle
直到达到理想的分辨率

01:17:15.486 --> 01:17:17.626 A:middle
这个简单的 1000 * 1000 的图形

01:17:17.626 --> 01:17:19.776 A:middle
就需要接近 600 万束射线才能生成

01:17:20.756 --> 01:17:22.066 A:middle
每一束射线都必须

01:17:22.066 --> 01:17:23.256 A:middle
经过至少两组

01:17:23.256 --> 01:17:25.726 A:middle
昂贵的数学计算处理

01:17:26.136 --> 01:17:27.496 A:middle
首先 你们需要确定

01:17:27.496 --> 01:17:28.606 A:middle
一条给定的射线是否

01:17:28.606 --> 01:17:30.226 A:middle
与场景中一个特定的三角形相交

01:17:30.576 --> 01:17:31.966 A:middle
其次 你们需要应用

01:17:31.966 --> 01:17:33.266 A:middle
一个依据材料特定的着色器

01:17:33.266 --> 01:17:35.106 A:middle
来生成像素

01:17:35.986 --> 01:17:38.716 A:middle
最初 这两个操作

01:17:38.716 --> 01:17:39.696 A:middle
都是由 CPU 执行的

01:17:39.936 --> 01:17:41.656 A:middle
然而 虽然 GPU 可以

01:17:41.656 --> 01:17:43.336 A:middle
轻松地处理像素阴影

01:17:43.336 --> 01:17:45.036 A:middle
可对 CPU 来说

01:17:45.036 --> 01:17:46.506 A:middle
光线与三角形的相交

01:17:46.506 --> 01:17:47.716 A:middle
本身就是一个很大的瓶颈

01:17:47.716 --> 01:17:49.026 A:middle
并且 要将其有效地移动到 GPU 上

01:17:49.026 --> 01:17:50.386 A:middle
也是一个难题

01:17:51.546 --> 01:17:52.876 A:middle
但是新的 Metal 射线-三角形求交器

01:17:52.876 --> 01:17:55.016 A:middle
为你们解决了这个问题

01:17:55.276 --> 01:17:56.726 A:middle
有了这个新的 API

01:17:56.726 --> 01:17:58.306 A:middle
你们可以在一个

01:17:58.306 --> 01:18:00.106 A:middle
非常简单易用的包中

01:17:58.306 --> 01:18:00.106 A:middle
非常简单易用的包中

01:18:00.106 --> 01:18:01.336 A:middle
获得高达 10 倍的性能提升

01:18:01.336 --> 01:18:03.336 A:middle
且一切都已针对 iOS

01:18:03.516 --> 01:18:05.376 A:middle
和 macOS 的 GPU 进行了预先优化

01:18:06.186 --> 01:18:07.956 A:middle
只需简单的几行代码

01:18:07.956 --> 01:18:09.216 A:middle
只需简单的几行代码

01:18:09.216 --> 01:18:12.216 A:middle
和许多 GPU 计算操作一样

01:18:12.216 --> 01:18:13.896 A:middle
射线跟踪是一种

01:18:13.896 --> 01:18:15.086 A:middle
能够有效地根据

01:18:15.086 --> 01:18:16.376 A:middle
GPU 的可用性能

01:18:16.376 --> 01:18:18.356 A:middle
达到不同水平效果的操作

01:18:18.356 --> 01:18:20.066 A:middle
所以我们可以借助

01:18:20.066 --> 01:18:21.936 A:middle
Metal 2 对外部 GPU 的支持

01:18:21.936 --> 01:18:23.216 A:middle
来获得更多的性能

01:18:23.216 --> 01:18:25.806 A:middle
你们一定要看一下它的效果

01:18:25.976 --> 01:18:27.076 A:middle
我想邀请 Rav

01:18:27.076 --> 01:18:29.406 A:middle
来做一个快速的演示 Rav

01:18:30.516 --> 01:18:34.016 A:middle
[ 掌声 ]

01:18:34.516 --> 01:18:35.106 A:middle
&gt;&gt; 谢谢 Jeremy

01:18:35.806 --> 01:18:37.716 A:middle
好的 让我们打开这个

01:18:37.716 --> 01:18:39.296 A:middle
Amazon Lumberyard 的小酒馆场景

01:18:39.476 --> 01:18:41.316 A:middle
的射线跟踪渲染

01:18:41.626 --> 01:18:43.536 A:middle
并使用 CPU

01:18:43.536 --> 01:18:44.956 A:middle
来执行相交计算

01:18:45.516 --> 01:18:47.186 A:middle
这个执行在优化后

01:18:47.316 --> 01:18:49.496 A:middle
可以在 iMac Pro 的

01:18:49.496 --> 01:18:50.686 A:middle
所有 10 个内核上运行

01:18:51.776 --> 01:18:52.786 A:middle
我们还添加了一个小的基准测试

01:18:52.786 --> 01:18:54.296 A:middle
对射线跟踪算法

01:18:54.296 --> 01:18:56.116 A:middle
进行 80 次迭代的过程

01:18:56.116 --> 01:18:58.116 A:middle
进行计时

01:18:59.016 --> 01:19:01.016 A:middle
对于这种环境来说

01:18:59.016 --> 01:19:01.016 A:middle
对于这种环境来说

01:19:01.016 --> 01:19:03.206 A:middle
这需要进行超过 60 亿次的

01:19:03.206 --> 01:19:04.066 A:middle
相交测试

01:19:04.736 --> 01:19:05.676 A:middle
你们可以看到

01:19:05.676 --> 01:19:09.566 A:middle
我们需要大约 12 秒才能在 CPU 上完成

01:19:09.626 --> 01:19:12.556 A:middle
现在我们使用 iMac Pro 中内置的 GPU 上的

01:19:12.556 --> 01:19:14.286 A:middle
新 Metal 射线-三角形求交器

01:19:14.286 --> 01:19:15.796 A:middle
并将所需的时间

01:19:15.796 --> 01:19:17.506 A:middle
与之前进行比较

01:19:17.686 --> 01:19:19.816 A:middle
你们可以马上看到

01:19:19.816 --> 01:19:21.546 A:middle
速度快了很多

01:19:21.546 --> 01:19:23.926 A:middle
我们只需要 1.3 秒

01:19:23.926 --> 01:19:24.606 A:middle
就能完成同样的工作量

01:19:24.986 --> 01:19:26.256 A:middle
太棒了 我再来做一次

01:19:26.256 --> 01:19:26.646 A:middle
开始

01:19:28.436 --> 01:19:29.266 A:middle
完成了

01:19:30.046 --> 01:19:32.306 A:middle
获得了近乎 10 倍的性能提升

01:19:32.336 --> 01:19:34.836 A:middle
简直令人惊叹

01:19:35.356 --> 01:19:36.816 A:middle
当然 我们并没有就此停止

01:19:36.816 --> 01:19:39.296 A:middle
正如 Jeremy 提到的

01:19:39.296 --> 01:19:40.916 A:middle
射线跟踪非常适合

01:19:40.916 --> 01:19:43.336 A:middle
跨多个 GPU 的并行处理

01:19:43.336 --> 01:19:44.976 A:middle
因此我可以启用一个

01:19:44.976 --> 01:19:46.556 A:middle
已经连接到 iMac Pro 上的外部 GPU

01:19:46.626 --> 01:19:50.006 A:middle
并将渲染时间缩短一半

01:19:50.176 --> 01:19:52.316 A:middle
你们可能注意到我们添加了一条绿线

01:19:52.316 --> 01:19:53.676 A:middle
这是为了能够直观地观察

01:19:53.796 --> 01:19:55.106 A:middle
我们如何在两个

01:19:55.106 --> 01:19:56.326 A:middle
GPU 之间分配工作负载

01:19:56.326 --> 01:19:59.026 A:middle
在这种情况下

01:19:59.026 --> 01:20:00.776 A:middle
每个 GPU 渲染一半的帧

01:19:59.026 --> 01:20:00.776 A:middle
每个 GPU 渲染一半的帧

01:20:01.416 --> 01:20:02.946 A:middle
这是一个很大的进步

01:20:03.456 --> 01:20:05.006 A:middle
但是正如 Jeremy 所说

01:20:05.006 --> 01:20:06.626 A:middle
你们不可能永远只有 2 个 GPU

01:20:07.186 --> 01:20:09.266 A:middle
所以让我们再添加 2 个

01:20:09.266 --> 01:20:12.306 A:middle
现在共有 4 个 GPU 在渲染场景

01:20:12.756 --> 01:20:15.496 A:middle
这就是 iMac Pro 的

01:20:15.496 --> 01:20:17.836 A:middle
超过 40 万亿次的计算能力

01:20:17.936 --> 01:20:20.286 A:middle
我们现在渲染场景的速度

01:20:20.446 --> 01:20:23.186 A:middle
比 CPU 快了 30 倍

01:20:23.616 --> 01:20:25.466 A:middle
我们认为这真的很棒

01:20:27.516 --> 01:20:34.266 A:middle
[ 掌声 ]

01:20:34.766 --> 01:20:35.896 A:middle
由于射线跟踪

01:20:35.896 --> 01:20:37.076 A:middle
非常适合渲染阴影

01:20:37.076 --> 01:20:38.376 A:middle
我将关闭这里的几个灯

01:20:38.376 --> 01:20:40.276 A:middle
来突出阴影效果

01:20:40.276 --> 01:20:41.826 A:middle
你们就可以真正理解

01:20:41.916 --> 01:20:43.226 A:middle
图像在 GPU 上

01:20:43.226 --> 01:20:44.856 A:middle
聚集的速度有多快

01:20:45.526 --> 01:20:48.126 A:middle
因此我们相信

01:20:48.156 --> 01:20:49.916 A:middle
新的 Metal 射线-三角形求交器

01:20:49.916 --> 01:20:52.566 A:middle
以及 macOS 上

01:20:52.566 --> 01:20:53.926 A:middle
对外部 GPU 的支持

01:20:53.926 --> 01:20:55.496 A:middle
将使那些能够利用射线跟踪技术的 App

01:20:55.496 --> 01:20:57.566 A:middle
进行一些新的工作流

01:20:58.116 --> 01:20:58.406 A:middle
谢谢大家

01:20:58.856 --> 01:20:59.486 A:middle
交回给你 Jeremy [ 掌声 ]

01:21:02.196 --> 01:21:04.306 A:middle
&gt;&gt; 好的 真是太棒了

01:21:04.406 --> 01:21:04.936 A:middle
谢谢 Rav 这就是

01:21:06.066 --> 01:21:08.116 A:middle
iOS 12 和 macOS Mojave 中的 Metal 2

01:21:08.116 --> 01:21:10.466 A:middle
它是一款易于使用

01:21:10.466 --> 01:21:12.216 A:middle
统一了 3D 图形

01:21:12.216 --> 01:21:14.466 A:middle
和 GPU 计算的 API

01:21:14.466 --> 01:21:16.046 A:middle
广泛支持 Apple 的所有产品

01:21:16.146 --> 01:21:18.926 A:middle
包括 A11 Bionic

01:21:18.926 --> 01:21:20.186 A:middle
和 Apple 设计的 GPU

01:21:21.086 --> 01:21:22.716 A:middle
GPU 开发工具集成到 Xcode

01:21:22.716 --> 01:21:24.206 A:middle
和所有新特性中

01:21:24.206 --> 01:21:27.016 A:middle
以支持最新的机器学习训练

01:21:27.016 --> 01:21:28.966 A:middle
和射线跟踪技术

01:21:29.376 --> 01:21:30.546 A:middle
这是将你们的 App

01:21:30.546 --> 01:21:31.686 A:middle
转移到 Metal 的最佳时机

01:21:31.686 --> 01:21:32.826 A:middle
我们迫不及待地想看看

01:21:32.856 --> 01:21:33.656 A:middle
你们接下来会创造的成果

01:21:33.856 --> 01:21:34.196 A:middle
谢谢大家

01:21:35.276 --> 01:21:37.126 A:middle
现在 我想请上 Mike Rockwell

01:21:37.126 --> 01:21:40.676 A:middle
来讨论一些 AR 最新进展

01:21:40.676 --> 01:21:40.876 A:middle
谢谢

01:21:41.516 --> 01:21:43.706 A:middle
[ 掌声 ]

01:21:44.206 --> 01:21:44.926 A:middle
&gt;&gt; 谢谢 Jeremy

01:21:47.936 --> 01:21:49.786 A:middle
对 Apple 的 AR 来说

01:21:49.786 --> 01:21:51.306 A:middle
去年是了不起的一年

01:21:51.896 --> 01:21:53.876 A:middle
随着 ARKit 在 WWDC 上的首次亮相

01:21:53.876 --> 01:21:57.866 A:middle
iOS 成为了世界上

01:21:57.866 --> 01:22:01.186 A:middle
最大的 AR 平台

01:21:57.866 --> 01:22:01.186 A:middle
最大的 AR 平台

01:22:01.696 --> 01:22:03.146 A:middle
目前已有数亿个

01:22:03.296 --> 01:22:06.576 A:middle
支持 AR 的 iOS 设备

01:22:06.576 --> 01:22:08.006 A:middle
而且这个数字正在迅速增长

01:22:09.066 --> 01:22:09.966 A:middle
正如 Craig 在上午

01:22:09.966 --> 01:22:12.336 A:middle
向你们展示的

01:22:12.336 --> 01:22:14.446 A:middle
在 iOS 12 系统中

01:22:14.446 --> 01:22:16.386 A:middle
我们进一步实现了

01:22:16.386 --> 01:22:17.326 A:middle
AR 在操作系统中的高度集成

01:22:18.126 --> 01:22:20.696 A:middle
我们现在可以在“信息” “News”

01:22:20.696 --> 01:22:22.946 A:middle
“Safari 浏览器” 等 App 中

01:22:22.946 --> 01:22:26.606 A:middle
通过新的 Quick Look 查看器来体验 AR 内容

01:22:27.456 --> 01:22:29.516 A:middle
为此 我们必须为 AR

01:22:29.516 --> 01:22:31.246 A:middle
创建一个针对其

01:22:31.296 --> 01:22:32.996 A:middle
进行优化的文件格式

01:22:32.996 --> 01:22:35.066 A:middle
我们与 Pixar 和 Adobe

01:22:35.066 --> 01:22:37.836 A:middle
合作创建了一种新的移动 AR 格式

01:22:37.836 --> 01:22:39.886 A:middle
叫做 USDZ

01:22:40.176 --> 01:22:43.616 A:middle
它基于在整个行业中

01:22:43.616 --> 01:22:45.256 A:middle
用于专业内容创作的

01:22:45.256 --> 01:22:46.786 A:middle
通用场景描述格式

01:22:47.286 --> 01:22:48.726 A:middle
它对移动设备进行了优化

01:22:48.726 --> 01:22:50.916 A:middle
支持丰富的

01:22:50.916 --> 01:22:52.416 A:middle
3D 素材和动画

01:22:53.576 --> 01:22:57.596 A:middle
使用 USDZ 十分简单

01:22:58.016 --> 01:22:59.526 A:middle
在网络上

01:22:59.526 --> 01:23:01.596 A:middle
只需要几行 HTML

01:22:59.526 --> 01:23:01.596 A:middle
只需要几行 HTML

01:23:01.596 --> 01:23:03.976 A:middle
并且它也支持在 SceneKit 中

01:23:03.976 --> 01:23:06.196 A:middle
使用 Model I/O

01:23:06.196 --> 01:23:07.346 A:middle
因此你们可以在 App 中

01:23:07.346 --> 01:23:08.236 A:middle
轻松地使用它

01:23:09.596 --> 01:23:11.266 A:middle
我们还一直与

01:23:11.266 --> 01:23:12.736 A:middle
内容创建工具方面的业界翘楚

01:23:12.736 --> 01:23:14.116 A:middle
密切合作

01:23:14.116 --> 01:23:15.366 A:middle
为了给 USDZ 提供本地支持

01:23:16.406 --> 01:23:17.986 A:middle
正如你们今天上午听到的

01:23:17.986 --> 01:23:18.986 A:middle
Abhay 说他十分了解

01:23:18.986 --> 01:23:21.836 A:middle
Adobe 在这个方向的最新进展

01:23:21.836 --> 01:23:22.886 A:middle
所以我想邀请他现在上台

01:23:22.886 --> 01:23:24.666 A:middle
跟你们聊一聊

01:23:25.226 --> 01:23:25.676 A:middle
Abhay

01:23:26.516 --> 01:23:29.546 A:middle
[ 掌声 ]

01:23:30.046 --> 01:23:30.516 A:middle
&gt;&gt; 谢谢 Mike

01:23:32.996 --> 01:23:34.226 A:middle
很高兴回到讲台上

01:23:35.276 --> 01:23:36.186 A:middle
正如你们在今天上午的

01:23:36.186 --> 01:23:38.116 A:middle
主题演讲中所听到的

01:23:38.116 --> 01:23:40.866 A:middle
Adobe 的 Creative Cloud

01:23:40.866 --> 01:23:42.806 A:middle
以及 ARKit 将能够重新想象

01:23:42.806 --> 01:23:44.236 A:middle
并融合数字世界和现实世界

01:23:45.176 --> 01:23:47.496 A:middle
这需要对新的

01:23:47.496 --> 01:23:49.566 A:middle
设计交互模型

01:23:49.566 --> 01:23:50.656 A:middle
进行彻底的重新思考

01:23:52.086 --> 01:23:54.506 A:middle
今天早些时候

01:23:54.506 --> 01:23:56.546 A:middle
我们宣布了一种用于

01:23:56.546 --> 01:23:58.986 A:middle
创建 AR 体验的新系统 Project Aero

01:23:59.646 --> 01:24:02.286 A:middle
它将 Photoshop 和 Dimension 等

01:23:59.646 --> 01:24:02.286 A:middle
它将 Photoshop 和 Dimension 等

01:24:02.286 --> 01:24:03.916 A:middle
常见的 Creative Cloud App 的

01:24:03.916 --> 01:24:06.736 A:middle
一些特性注入到 ARKit 中

01:24:07.646 --> 01:24:11.816 A:middle
借助于 Creative Cloud 和 iOS

01:24:11.816 --> 01:24:13.076 A:middle
你们将首次可以

01:24:13.236 --> 01:24:14.606 A:middle
在 AR 中进行

01:24:14.606 --> 01:24:16.066 A:middle
“所见即所得”的编辑

01:24:16.066 --> 01:24:20.626 A:middle
和你们想的一样

01:24:20.626 --> 01:24:21.956 A:middle
我们也认为

01:24:21.956 --> 01:24:24.046 A:middle
ARKit 绝对是 AR 的主导平台

01:24:24.206 --> 01:24:26.236 A:middle
我们很高兴能与

01:24:26.236 --> 01:24:28.576 A:middle
Apple 紧密合作

01:24:28.576 --> 01:24:31.216 A:middle
共同探索和推进

01:24:31.216 --> 01:24:32.936 A:middle
沉浸式设计的发展

01:24:33.526 --> 01:24:38.226 A:middle
但是要充分实现 AR 的潜力

01:24:38.226 --> 01:24:39.326 A:middle
你们需要投身于

01:24:39.326 --> 01:24:40.066 A:middle
整个生态系统中

01:24:40.416 --> 01:24:42.056 A:middle
所以今天 我们宣布

01:24:42.056 --> 01:24:43.956 A:middle
Adobe 将与

01:24:43.956 --> 01:24:46.396 A:middle
Apple 和 Pixar 一起

01:24:46.646 --> 01:24:50.996 A:middle
本地支持 USDZ 格式

01:24:50.996 --> 01:24:51.063 A:middle
[ 掌声 ]

01:24:51.063 --> 01:24:54.466 A:middle
AR 是一种独特的媒介

01:24:54.466 --> 01:24:56.056 A:middle
它允许交互内容

01:24:56.106 --> 01:24:58.396 A:middle
扩展到屏幕之外

01:24:58.396 --> 01:25:00.036 A:middle
我们周围的物理空间

01:24:58.396 --> 01:25:00.036 A:middle
我们周围的物理空间

01:25:00.036 --> 01:25:02.106 A:middle
实际上变成了一个

01:25:02.106 --> 01:25:03.666 A:middle
创造性的画布

01:25:04.106 --> 01:25:05.506 A:middle
我们来看一下

01:25:07.516 --> 01:26:23.516 A:middle
[ 音乐 ]

01:25:07.516 --> 01:26:23.516 A:middle
[ 音乐 ]

01:26:24.016 --> 01:26:25.046 A:middle
[ 掌声 ]

01:26:25.046 --> 01:26:25.596 A:middle
非常酷

01:26:29.816 --> 01:26:32.876 A:middle
究其核心 Aero 项目是 Adobe

01:26:32.926 --> 01:26:34.456 A:middle
愿景和使命的一部分

01:26:34.456 --> 01:26:36.686 A:middle
希望能够真正将

01:26:36.836 --> 01:26:38.376 A:middle
沉浸式内容的创造民主化

01:26:39.186 --> 01:26:40.266 A:middle
正如你们在视频中所看到的

01:26:40.266 --> 01:26:42.906 A:middle
创造者和开发人员

01:26:42.906 --> 01:26:44.266 A:middle
将能够无缝地协作

01:26:44.266 --> 01:26:46.566 A:middle
并借助于这些工具

01:26:46.566 --> 01:26:50.906 A:middle
提供广泛的 AR 体验

01:26:51.056 --> 01:26:53.356 A:middle
请继续关注

01:26:53.356 --> 01:26:55.136 A:middle
我们即将召开的 Adobe MAX 大会

01:26:55.136 --> 01:26:56.526 A:middle
获知 Aero 项目的更多最新进展

01:26:57.286 --> 01:26:58.576 A:middle
就个人而言

01:26:58.576 --> 01:26:59.806 A:middle
我们与 Apple 的合作

01:26:59.806 --> 01:27:02.246 A:middle
令我感到十分的兴奋

01:26:59.806 --> 01:27:02.246 A:middle
令我感到十分的兴奋

01:27:02.246 --> 01:27:04.476 A:middle
因为我们在共同探索

01:27:04.476 --> 01:27:06.556 A:middle
这个新兴而强大的

01:27:06.556 --> 01:27:07.616 A:middle
新叙事媒介的无限可能

01:27:07.706 --> 01:27:08.476 A:middle
谢谢大家

01:27:08.526 --> 01:27:08.976 A:middle
交给你了 Mike

01:27:09.516 --> 01:27:12.166 A:middle
[ 掌声 ]

01:27:12.666 --> 01:27:13.226 A:middle
&gt;&gt; 谢谢 Abhay

01:27:14.546 --> 01:27:15.516 A:middle
简直太棒了

01:27:15.736 --> 01:27:16.776 A:middle
令人惊叹

01:27:17.386 --> 01:27:20.096 A:middle
当然 Apple 的 AR 基础

01:27:20.096 --> 01:27:21.316 A:middle
是 ARKit

01:27:21.966 --> 01:27:23.676 A:middle
ARKit 具备

01:27:23.676 --> 01:27:25.626 A:middle
可靠的设备位置定位

01:27:25.626 --> 01:27:27.986 A:middle
精确的照明和尺寸估计

01:27:27.986 --> 01:27:30.606 A:middle
这使得创建 AR App 变得更加容易

01:27:31.616 --> 01:27:32.946 A:middle
iPhone X 提供了

01:27:32.946 --> 01:27:34.616 A:middle
突破性的面部追踪

01:27:34.806 --> 01:27:36.746 A:middle
在过去 这需要专门定制的硬件

01:27:38.116 --> 01:27:39.806 A:middle
在最初的版本发布后

01:27:39.806 --> 01:27:41.306 A:middle
我们很快跟进了 ARKit 1.5

01:27:41.306 --> 01:27:43.866 A:middle
增加了 2D 图像触发器

01:27:43.866 --> 01:27:45.206 A:middle
高分辨率的背景摄像头

01:27:45.206 --> 01:27:46.856 A:middle
以及暂停

01:27:46.856 --> 01:27:49.216 A:middle
和恢复跟踪的功能

01:27:49.216 --> 01:27:50.096 A:middle
如此一来 在你接到来电时

01:27:50.096 --> 01:27:52.006 A:middle
就不必重启 AR 会话

01:27:52.746 --> 01:27:54.366 A:middle
我非常兴奋地告诉你们

01:27:54.366 --> 01:27:56.576 A:middle
我们下一个跨越式的前进

01:27:56.576 --> 01:28:00.706 A:middle
ARKit 2

01:27:56.576 --> 01:28:00.706 A:middle
ARKit 2

01:28:00.706 --> 01:28:03.076 A:middle
ARKit 2 提供了很多的改进

01:28:03.076 --> 01:28:06.116 A:middle
包括提升的

01:28:06.116 --> 01:28:07.946 A:middle
面部跟踪功能

01:28:07.946 --> 01:28:11.826 A:middle
新增了注视和舌头的跟踪能力

01:28:12.386 --> 01:28:13.786 A:middle
这些高要求的功能

01:28:13.786 --> 01:28:14.766 A:middle
允许你们把面部动画的逼真程度

01:28:14.766 --> 01:28:16.726 A:middle
带到一个新的水平

01:28:17.566 --> 01:28:18.846 A:middle
事实证明

01:28:18.846 --> 01:28:20.706 A:middle
孩子们在玩动画表情时的

01:28:20.706 --> 01:28:22.226 A:middle
第一件事就是伸出舌头

01:28:22.226 --> 01:28:23.536 A:middle
我想你们很多人也是这样

01:28:23.536 --> 01:28:24.886 A:middle
这就是为什么 我们要新增这项功能

01:28:28.366 --> 01:28:29.956 A:middle
为了更准确地将物体

01:28:29.956 --> 01:28:31.636 A:middle
融入到场景中

01:28:31.636 --> 01:28:33.346 A:middle
我们添加了环境纹理贴图

01:28:33.726 --> 01:28:36.206 A:middle
ARKit 基于摄像头在现实世界中

01:28:36.206 --> 01:28:37.986 A:middle
看到的场景创建纹理贴图

01:28:37.986 --> 01:28:41.346 A:middle
请注意 这个球反射的是

01:28:41.346 --> 01:28:42.466 A:middle
桌子上的那张真实的图片

01:28:43.046 --> 01:28:44.966 A:middle
但是摄像头看不到的场景

01:28:44.966 --> 01:28:45.706 A:middle
该怎么办呢

01:28:46.346 --> 01:28:47.896 A:middle
通过机器学习

01:28:47.896 --> 01:28:49.286 A:middle
我们在数千个典型的环境中

01:28:49.456 --> 01:28:51.356 A:middle
训练了一个神经网络

01:28:51.786 --> 01:28:53.826 A:middle
这使得 ARKit 能够

01:28:53.826 --> 01:28:55.876 A:middle
虚构场景的其他部分

01:28:56.406 --> 01:28:57.336 A:middle
这意味着你们会得到一些

01:28:57.416 --> 01:28:58.906 A:middle
十分可信的反射

01:28:58.906 --> 01:28:59.846 A:middle
比如头顶的灯光

01:28:59.846 --> 01:29:01.026 A:middle
即使摄像头根本没有

01:28:59.846 --> 01:29:01.026 A:middle
即使摄像头根本没有

01:29:01.236 --> 01:29:02.676 A:middle
在环境中看到灯光

01:29:02.676 --> 01:29:04.346 A:middle
你们也可以在球上看到反射

01:29:06.706 --> 01:29:09.016 A:middle
我们扩展了 2D 图像检测功能

01:29:09.016 --> 01:29:11.486 A:middle
从而支持在三维空间中

01:29:11.486 --> 01:29:14.446 A:middle
跟踪这些图像

01:29:15.166 --> 01:29:17.246 A:middle
所以现在你们可以跟踪

01:29:17.306 --> 01:29:18.606 A:middle
粘在图片上的 3D 物体

01:29:18.606 --> 01:29:19.996 A:middle
在现实世界中的移动

01:29:20.366 --> 01:29:24.856 A:middle
不仅是平面的移动 也可以是立体的移动

01:29:27.516 --> 01:29:33.336 A:middle
[ 掌声 ]

01:29:33.836 --> 01:29:37.306 A:middle
ARKit 现在可以检测 3D 物体

01:29:37.796 --> 01:29:39.896 A:middle
你们可以通过 API

01:29:40.426 --> 01:29:42.416 A:middle
或者我们提供的简单开发工具

01:29:42.416 --> 01:29:46.596 A:middle
来扫描物体

01:29:46.596 --> 01:29:48.606 A:middle
然后这些映射可以用于

01:29:48.606 --> 01:29:49.786 A:middle
识别这些物体及其位置

01:29:49.786 --> 01:29:51.756 A:middle
并触发与环境相关的

01:29:51.756 --> 01:29:53.976 A:middle
AR 体验

01:29:56.516 --> 01:29:59.206 A:middle
[ 掌声 ]

01:29:59.706 --> 01:30:01.566 A:middle
ARKit 2 的一个

01:29:59.706 --> 01:30:01.566 A:middle
ARKit 2 的一个

01:30:01.566 --> 01:30:03.576 A:middle
非常重要的特性是

01:30:03.576 --> 01:30:04.936 A:middle
支持一致性体验

01:30:05.356 --> 01:30:06.356 A:middle
你们可以在视频中看到

01:30:06.356 --> 01:30:07.866 A:middle
我们绘制了一个环境

01:30:07.866 --> 01:30:09.386 A:middle
然后放置了一个 3D 物体

01:30:10.276 --> 01:30:12.416 A:middle
这个映射可以被保存

01:30:12.416 --> 01:30:14.196 A:middle
然后用于识别空间

01:30:14.196 --> 01:30:16.066 A:middle
并重新定位到

01:30:16.066 --> 01:30:18.776 A:middle
相同的坐标系中

01:30:18.806 --> 01:30:20.736 A:middle
而且不仅局限在那个设备上

01:30:20.936 --> 01:30:22.206 A:middle
你们还可以将这些映射

01:30:22.296 --> 01:30:23.856 A:middle
共享给其他设备

01:30:23.856 --> 01:30:25.706 A:middle
从而获得完全相同的体验

01:30:26.396 --> 01:30:27.936 A:middle
你们将有能力创建出

01:30:27.936 --> 01:30:29.686 A:middle
能够提供一致性体验的 App

01:30:29.686 --> 01:30:31.586 A:middle
这意味着

01:30:31.586 --> 01:30:32.446 A:middle
你们可以多次获得这个体验

01:30:33.366 --> 01:30:34.836 A:middle
例如 你们可以在家里

01:30:34.836 --> 01:30:36.416 A:middle
放一个展示家人图片和艺术品的

01:30:36.416 --> 01:30:38.266 A:middle
AR 图钉板

01:30:38.856 --> 01:30:41.096 A:middle
而且你们可以 在不使用云的情况下

01:30:41.096 --> 01:30:42.726 A:middle
分享这些映射

01:30:43.186 --> 01:30:45.046 A:middle
你们的设备可以

01:30:45.226 --> 01:30:48.416 A:middle
进行本地端对端分享

01:30:49.206 --> 01:30:50.596 A:middle
我们提供的另一个功能是

01:30:50.596 --> 01:30:51.916 A:middle
你们将可以实时

01:30:51.916 --> 01:30:55.006 A:middle
分享这些映射

01:30:55.866 --> 01:30:57.596 A:middle
这让你们可以创建

01:30:57.926 --> 01:31:00.036 A:middle
多人 AR 游戏

01:30:57.926 --> 01:31:00.036 A:middle
多人 AR 游戏

01:31:00.746 --> 01:31:02.376 A:middle
为了测验这项功能

01:31:02.376 --> 01:31:04.126 A:middle
我们创建了一个新的游戏

01:31:04.126 --> 01:31:04.816 A:middle
叫做《SwiftShot》

01:31:05.226 --> 01:31:07.076 A:middle
我将用一个视频

01:31:07.076 --> 01:31:08.556 A:middle
向你们展示

01:31:09.516 --> 01:31:45.186 A:middle
[ 音乐 ]

01:31:45.686 --> 01:31:47.286 A:middle
《SwiftShot》是一款非常棒的游戏

01:31:47.286 --> 01:31:48.546 A:middle
我们也将它带到了今天的展会中

01:31:48.546 --> 01:31:49.806 A:middle
如果你们还没有机会体验

01:31:49.806 --> 01:31:51.416 A:middle
我们提供了一个 AR 游戏区

01:31:51.606 --> 01:31:53.636 A:middle
我们希望与您共享它

01:31:53.636 --> 01:31:54.806 A:middle
因此你们可以

01:31:54.806 --> 01:31:56.396 A:middle
凭开放许可证

01:31:56.396 --> 01:31:58.926 A:middle
下载完整的源代码

01:31:58.926 --> 01:32:00.496 A:middle
你们可以测试它

01:31:58.926 --> 01:32:00.496 A:middle
你们可以测试它

01:32:00.496 --> 01:32:01.256 A:middle
并根据需要进行修改

01:32:01.256 --> 01:32:02.056 A:middle
我们迫不及待地想看看

01:32:02.056 --> 01:32:03.646 A:middle
你们在《SwiftShot》上所做的创意

01:32:05.046 --> 01:32:08.376 A:middle
这就是 ARKit 2

01:32:08.376 --> 01:32:10.616 A:middle
改进的脸部跟踪

01:32:10.616 --> 01:32:13.186 A:middle
环境纹理贴图

01:32:13.186 --> 01:32:15.696 A:middle
图像检测和跟踪

01:32:16.146 --> 01:32:18.566 A:middle
3D 物体检测

01:32:18.566 --> 01:32:20.726 A:middle
一致性体验以及多用户体验

01:32:21.786 --> 01:32:23.926 A:middle
它与整个操作系统

01:32:23.956 --> 01:32:26.106 A:middle
的 USDZ 相结合

01:32:26.106 --> 01:32:28.766 A:middle
使 iOS 12 成为迄今为止

01:32:28.766 --> 01:32:29.926 A:middle
最强大的 AR 平台

01:32:30.326 --> 01:32:31.756 A:middle
我们很高兴今天能把这项技术 展示给你们

01:32:31.756 --> 01:32:33.216 A:middle
而且迫不及待地想知道

01:32:33.216 --> 01:32:34.706 A:middle
你们会创造出怎么样的成果

01:32:35.426 --> 01:32:37.176 A:middle
请允许我请回 Sebastian

01:32:37.416 --> 01:32:37.786 A:middle
谢谢大家

01:32:38.516 --> 01:32:42.726 A:middle
[ 掌声 ]

01:32:43.226 --> 01:32:43.996 A:middle
&gt;&gt; 谢谢 Mike

01:32:45.156 --> 01:32:47.946 A:middle
我想我们今天看到了

01:32:47.946 --> 01:32:49.556 A:middle
很多令人激动的新技术

01:32:49.556 --> 01:32:50.636 A:middle
我希望你们对此

01:32:50.636 --> 01:32:52.216 A:middle
感到十分兴奋

01:32:53.076 --> 01:32:54.716 A:middle
我们让利用机器学习

01:32:54.716 --> 01:32:56.406 A:middle
变得更容易

01:32:56.406 --> 01:32:58.456 A:middle
用 ARKit 构建新的出色体验

01:32:58.456 --> 01:32:59.666 A:middle
用 Metal 进行高性能图形处理

01:32:59.716 --> 01:33:01.546 A:middle
借助深色模式

01:32:59.716 --> 01:33:01.546 A:middle
借助深色模式

01:33:01.546 --> 01:33:02.946 A:middle
推进了 Mac 发展的一大步

01:33:02.946 --> 01:33:04.156 A:middle
我知道你们对此都无比的喜欢

01:33:04.156 --> 01:33:05.916 A:middle
这一切都得益于

01:33:05.916 --> 01:33:07.136 A:middle
我们的开发工具的巨大进步

01:33:07.136 --> 01:33:09.366 A:middle
这些工具使得我们

01:33:09.366 --> 01:33:10.526 A:middle
能够充分利用这些

01:33:10.696 --> 01:33:12.236 A:middle
非常强大的技术

01:33:12.916 --> 01:33:15.026 A:middle
我们还讨论了

01:33:15.066 --> 01:33:17.156 A:middle
应该如何专注于

01:33:17.156 --> 01:33:18.966 A:middle
对用户最重要的东西

01:33:20.056 --> 01:33:21.286 A:middle
所有这些优秀的技术和工具

01:33:21.286 --> 01:33:23.216 A:middle
都可以在今天作为开发人员预览版

01:33:23.216 --> 01:33:26.716 A:middle
供 WWDC 与会者帐户使用

01:33:26.716 --> 01:33:27.986 A:middle
有没有人已经开始下载了

01:33:29.286 --> 01:33:29.826 A:middle
没有几个人吗

01:33:29.826 --> 01:33:31.276 A:middle
好吧 你们得抓紧时间了

01:33:31.526 --> 01:33:32.666 A:middle
这个发布可是限量的

01:33:34.966 --> 01:33:36.556 A:middle
请尽快开始下载

01:33:36.556 --> 01:33:37.456 A:middle
请尽快开始下载

01:33:37.816 --> 01:33:40.146 A:middle
同时 请充分利用这一周

01:33:40.146 --> 01:33:41.636 A:middle
在这次大会上

01:33:41.736 --> 01:33:42.906 A:middle
我们将会举办超过 100 个讨论会

01:33:42.906 --> 01:33:44.636 A:middle
深入探讨所有这些主题

01:33:45.126 --> 01:33:46.336 A:middle
它们都是十分精彩的讨论会

01:33:46.706 --> 01:33:48.106 A:middle
我们还建议你们

01:33:48.106 --> 01:33:49.976 A:middle
充分利用我们所有的实验室

01:33:49.976 --> 01:33:51.276 A:middle
因为你们可以

01:33:51.276 --> 01:33:52.456 A:middle
从在场的许多

01:33:52.456 --> 01:33:53.986 A:middle
Apple 工程师那里得到帮助

01:33:54.266 --> 01:33:56.306 A:middle
他们将回答你们的所有问题

01:33:57.206 --> 01:33:59.906 A:middle
我希望你们能享受这次的大会

01:33:59.906 --> 01:34:01.996 A:middle
期待着本周能与你们见面

01:33:59.906 --> 01:34:01.996 A:middle
期待着本周能与你们见面

01:34:02.166 --> 01:34:02.586 A:middle
谢谢大家

01:34:03.508 --> 01:34:05.508 A:middle
[ 掌声 ]
