WEBVTT

00:00:07.516 --> 00:00:15.500 A:middle
[ 音乐 ]

00:00:20.456 --> 00:00:22.976 A:middle
&gt;&gt; 各位 上午好

00:00:23.516 --> 00:00:27.016 A:middle
[ 掌声 ]

00:00:27.516 --> 00:00:28.696 A:middle
欢迎大家参加今年的

00:00:28.696 --> 00:00:30.586 A:middle
关于 HTTP 流媒体网络传输协议（HLS）的会议

00:00:31.486 --> 00:00:32.786 A:middle
我是 Emil Andriescu

00:00:33.476 --> 00:00:35.286 A:middle
今天我们将讨论

00:00:35.286 --> 00:00:37.516 A:middle
测量和优化 HLS 性能

00:00:38.516 --> 00:00:40.226 A:middle
首先 让我们思考一下

00:00:40.226 --> 00:00:42.936 A:middle
为什么我们应该关注它

00:00:42.936 --> 00:00:44.796 A:middle
以及为什么它对于 App 很重要

00:00:45.336 --> 00:00:48.646 A:middle
假设在一个星期六的晚上

00:00:48.646 --> 00:00:50.276 A:middle
你们坐在舒适的沙发上

00:00:50.276 --> 00:00:52.076 A:middle
熟练地浏览了所有的评论

00:00:52.076 --> 00:00:53.676 A:middle
确定了要观看的视频

00:00:53.676 --> 00:00:55.446 A:middle
爆米花也已经准备好了

00:00:55.886 --> 00:00:58.046 A:middle
你们迫不及待地轻点播放键

00:00:58.046 --> 00:01:01.526 A:middle
但是这时发生了这样的事

00:00:58.046 --> 00:01:01.526 A:middle
但是这时发生了这样的事

00:01:02.916 --> 00:01:05.336 A:middle
面对这种神秘且永无止境的动画

00:01:05.336 --> 00:01:07.376 A:middle
你们会问自己

00:01:07.376 --> 00:01:09.096 A:middle
还有什么比这更糟糕的呢

00:01:10.506 --> 00:01:12.296 A:middle
让我们面对它 你们知道吗

00:01:12.296 --> 00:01:13.136 A:middle
它其实是一个播放错误

00:01:13.706 --> 00:01:17.846 A:middle
但是客户真正期望

00:01:17.906 --> 00:01:20.306 A:middle
HLS 会提供什么样的体验呢

00:01:21.016 --> 00:01:22.126 A:middle
他们期待清晰的图像

00:01:22.256 --> 00:01:24.176 A:middle
高保真的音质

00:01:24.176 --> 00:01:26.506 A:middle
以及轻点播放键时

00:01:26.506 --> 00:01:28.686 A:middle
即时的媒体反应

00:01:29.466 --> 00:01:31.096 A:middle
然而 互联网上流媒体 App

00:01:31.096 --> 00:01:32.836 A:middle
的性能表现总是受网络的影响

00:01:32.836 --> 00:01:35.616 A:middle
那么我们该如何调和呢

00:01:36.696 --> 00:01:38.656 A:middle
HLS 的设计

00:01:38.656 --> 00:01:40.176 A:middle
就是为了解决这个问题

00:01:40.176 --> 00:01:42.246 A:middle
即在不可预知的

00:01:42.516 --> 00:01:43.786 A:middle
网络环境中

00:01:43.786 --> 00:01:46.166 A:middle
提供最好的

00:01:46.166 --> 00:01:47.156 A:middle
不间断的流媒体体验

00:01:47.156 --> 00:01:48.406 A:middle
所以我们为什么今天在这里

00:01:48.666 --> 00:01:49.576 A:middle
还有很多理由

00:01:50.006 --> 00:01:52.696 A:middle
如今 HLS 已经发展成一个

00:01:52.696 --> 00:01:54.336 A:middle
更动态的生态系统

00:01:54.546 --> 00:01:56.566 A:middle
它支持新的功能

00:01:56.566 --> 00:01:58.376 A:middle
如 I-frame 播放

00:01:58.376 --> 00:02:00.896 A:middle
新媒体格式 当然还有新的编解码器

00:01:58.376 --> 00:02:00.896 A:middle
新媒体格式 当然还有新的编解码器

00:02:01.336 --> 00:02:03.316 A:middle
与此同时

00:02:03.316 --> 00:02:05.896 A:middle
我们不断地添加强大的

00:02:06.046 --> 00:02:08.985 A:middle
iOS tvOS 以及 macOS 的 API

00:02:09.316 --> 00:02:12.236 A:middle
比如你们可以针对你们的目标用户

00:02:12.236 --> 00:02:13.946 A:middle
优化和调整播放

00:02:13.946 --> 00:02:15.786 A:middle
并提供更丰富的用户体验

00:02:16.876 --> 00:02:18.686 A:middle
交付模式和传输协议

00:02:18.726 --> 00:02:20.136 A:middle
也在不断发展

00:02:20.136 --> 00:02:22.186 A:middle
因此重要的是

00:02:22.186 --> 00:02:23.776 A:middle
结合观察

00:02:23.776 --> 00:02:26.046 A:middle
在移动设备上或客厅中

00:02:26.046 --> 00:02:27.506 A:middle
内容被消费的情况

00:02:27.776 --> 00:02:33.996 A:middle
以判断服务器端的性能

00:02:34.216 --> 00:02:36.266 A:middle
考虑到所有这些指标

00:02:36.266 --> 00:02:37.616 A:middle
你们如何确定

00:02:37.616 --> 00:02:39.616 A:middle
你们为观众提供的用户体验

00:02:39.616 --> 00:02:41.016 A:middle
是最好的呢

00:02:41.016 --> 00:02:43.256 A:middle
第一步是

00:02:43.256 --> 00:02:47.296 A:middle
结合你们对内容 App

00:02:47.296 --> 00:02:48.796 A:middle
或交付的更改

00:02:49.056 --> 00:02:51.056 A:middle
理解并量化用户体验

00:02:52.176 --> 00:02:53.866 A:middle
我们认为在这一方面

00:02:53.866 --> 00:02:55.456 A:middle
确定哪种配置是最优的方法

00:02:55.906 --> 00:02:57.416 A:middle
应该是测量

00:02:57.416 --> 00:02:58.996 A:middle
而不是猜测

00:03:00.246 --> 00:03:01.416 A:middle
那么这个会议将是什么内容呢

00:03:02.176 --> 00:03:03.846 A:middle
首先 我们想要建立一种

00:03:03.846 --> 00:03:05.456 A:middle
共同的语言

00:03:05.456 --> 00:03:06.946 A:middle
来讨论流媒体服务的质量

00:03:07.636 --> 00:03:09.436 A:middle
然后我们想讨论

00:03:09.436 --> 00:03:11.156 A:middle
如何客观地度量

00:03:11.156 --> 00:03:12.836 A:middle
App 的流媒体性能

00:03:13.766 --> 00:03:15.266 A:middle
第三 我们希望

00:03:15.266 --> 00:03:17.796 A:middle
帮助你们识别

00:03:17.796 --> 00:03:19.746 A:middle
并解决一些

00:03:19.746 --> 00:03:20.906 A:middle
影响流媒体服务质量的问题

00:03:22.416 --> 00:03:24.196 A:middle
最后 我们想修正

00:03:24.196 --> 00:03:25.606 A:middle
主播放列表

00:03:25.976 --> 00:03:27.486 A:middle
这是因为

00:03:27.616 --> 00:03:29.376 A:middle
我们在流媒体质量中

00:03:29.596 --> 00:03:31.056 A:middle
看到的许多问题

00:03:31.056 --> 00:03:33.226 A:middle
实际上根源于

00:03:33.256 --> 00:03:34.626 A:middle
主播放列表的编写

00:03:35.446 --> 00:03:37.216 A:middle
在详细讨论之前

00:03:37.216 --> 00:03:38.916 A:middle
让我们先简要概述一下

00:03:38.916 --> 00:03:40.246 A:middle
HLS 播放会话

00:03:41.216 --> 00:03:42.736 A:middle
正如你们所期望的

00:03:42.736 --> 00:03:44.426 A:middle
它从下载一个主播放列表开始

00:03:44.896 --> 00:03:47.396 A:middle
一旦 AVPlayer 开始读取播放列表

00:03:47.396 --> 00:03:50.176 A:middle
它就知道这个播放列表指向的是什么内容

00:03:50.416 --> 00:03:51.496 A:middle
在这种情况下

00:03:51.496 --> 00:03:53.836 A:middle
我们有两个比特率 1 兆比特和 2 兆比特

00:03:53.836 --> 00:03:55.546 A:middle
AVPlayer 会选择其中的一个

00:03:55.546 --> 00:03:57.406 A:middle
然后下载

00:03:57.406 --> 00:03:58.846 A:middle
一个媒体播放列表

00:03:58.846 --> 00:03:59.816 A:middle
以及附加的

00:03:59.816 --> 00:04:01.806 A:middle
例如密钥的工件

00:03:59.816 --> 00:04:01.806 A:middle
例如密钥的工件

00:04:01.806 --> 00:04:03.026 A:middle
然后继续下载

00:04:03.026 --> 00:04:05.216 A:middle
媒体片段

00:04:05.216 --> 00:04:06.596 A:middle
直到缓冲层足够播放

00:04:07.106 --> 00:04:10.446 A:middle
这种情况出现时

00:04:10.446 --> 00:04:11.916 A:middle
AVPlayeItem

00:04:11.916 --> 00:04:14.516 A:middle
将通过设置

00:04:14.516 --> 00:04:16.176 A:middle
playbackLikeyToKeepUp == true 的方式

00:04:16.176 --> 00:04:17.766 A:middle
来传达对播放性能的预测

00:04:18.406 --> 00:04:20.466 A:middle
如果你预先将

00:04:20.546 --> 00:04:22.125 A:middle
AVPlayer 速率设置为 1

00:04:22.125 --> 00:04:24.026 A:middle
那么你正在使用

00:04:24.026 --> 00:04:26.426 A:middle
AVPlayer 的自动播放功能

00:04:26.426 --> 00:04:27.886 A:middle
该播放器将立即开始播放

00:04:28.476 --> 00:04:29.946 A:middle
我们称之为时间间隔

00:04:29.946 --> 00:04:30.786 A:middle
启动时间

00:04:31.666 --> 00:04:33.426 A:middle
从这一点开始

00:04:33.426 --> 00:04:35.516 A:middle
挂钟（也称为实时时钟）

00:04:35.866 --> 00:04:37.516 A:middle
将和 PlayerItem.timebase

00:04:37.516 --> 00:04:39.076 A:middle
以相同的速度前进

00:04:39.436 --> 00:04:41.396 A:middle
有一个条件

00:04:41.396 --> 00:04:43.786 A:middle
即内容必须以

00:04:43.786 --> 00:04:46.056 A:middle
与 AVPlayer 使用的内容

00:04:46.056 --> 00:04:47.926 A:middle
相同或更快的速度到达

00:04:48.586 --> 00:04:49.916 A:middle
如果这样不行

00:04:49.966 --> 00:04:52.036 A:middle
AVPlayer 会尝试

00:04:52.036 --> 00:04:53.336 A:middle
切换到这里的 1 兆比特

00:04:53.766 --> 00:04:55.426 A:middle
如果网络仍然不能

00:04:55.426 --> 00:04:57.446 A:middle
在 1 兆比特时保持实时速度

00:04:57.726 --> 00:04:59.276 A:middle
那么缓冲区将最终耗尽

00:04:59.276 --> 00:05:01.566 A:middle
AVPlayer 没有选择

00:04:59.276 --> 00:05:01.566 A:middle
AVPlayer 没有选择

00:05:01.566 --> 00:05:03.006 A:middle
它需要停止播放

00:05:03.006 --> 00:05:04.926 A:middle
我们将这种事件称为卡顿

00:05:05.816 --> 00:05:07.246 A:middle
播放器将保持这种状态

00:05:07.246 --> 00:05:09.196 A:middle
不仅直到数据

00:05:09.196 --> 00:05:10.776 A:middle
再次开始流动

00:05:10.776 --> 00:05:11.996 A:middle
而且直到有足够的缓冲区

00:05:11.996 --> 00:05:13.796 A:middle
为 PlayItem 触发

00:05:13.796 --> 00:05:15.346 A:middle
另一个积极的

00:05:15.416 --> 00:05:18.596 A:middle
播放性能预测之后

00:05:18.596 --> 00:05:19.576 A:middle
播放将正常继续

00:05:20.666 --> 00:05:22.166 A:middle
现在让我们讨论一下

00:05:22.456 --> 00:05:24.176 A:middle
如何量化这种会话中的

00:05:24.176 --> 00:05:25.116 A:middle
用户体验

00:05:26.216 --> 00:05:27.926 A:middle
我们通过定义一组

00:05:27.926 --> 00:05:29.526 A:middle
关键性能指标 也就是 KPI

00:05:29.526 --> 00:05:30.396 A:middle
来实现这一点

00:05:31.056 --> 00:05:32.596 A:middle
我们选择了其中 5 个

00:05:32.596 --> 00:05:34.166 A:middle
我们认为是 HLS 中

00:05:34.196 --> 00:05:35.556 A:middle
最具代表性的 KPI

00:05:36.946 --> 00:05:38.776 A:middle
你们可能会问

00:05:38.776 --> 00:05:40.436 A:middle
我的用户需要花多少时间

00:05:40.836 --> 00:05:42.996 A:middle
等待播放

00:05:42.996 --> 00:05:47.166 A:middle
1 秒吗 还是 5 秒或30 秒

00:05:47.486 --> 00:05:49.036 A:middle
这是用户体验的

00:05:49.036 --> 00:05:50.486 A:middle
一个重要方面

00:05:51.336 --> 00:05:53.906 A:middle
此外 播放卡顿

00:05:53.906 --> 00:05:55.616 A:middle
就像我们刚才看到的那样

00:05:55.616 --> 00:05:56.966 A:middle
也会对用户造成干扰

00:05:57.076 --> 00:05:59.156 A:middle
我们关心这两者发生的频率

00:05:59.156 --> 00:06:00.936 A:middle
但也许更重要的是

00:05:59.156 --> 00:06:00.936 A:middle
但也许更重要的是

00:06:00.936 --> 00:06:02.646 A:middle
从卡顿中恢复

00:06:02.676 --> 00:06:04.126 A:middle
需要多长时间

00:06:05.126 --> 00:06:09.126 A:middle
然而 在不了解未来的情况下

00:06:09.126 --> 00:06:11.136 A:middle
最好的策略是

00:06:11.136 --> 00:06:12.666 A:middle
以最低的可用比特率交付内容

00:06:13.106 --> 00:06:14.666 A:middle
但那当然不是我们想要的

00:06:14.666 --> 00:06:16.076 A:middle
我们希望提供

00:06:16.076 --> 00:06:18.206 A:middle
最好的音频和视频质量

00:06:18.206 --> 00:06:19.356 A:middle
同时仍不卡顿

00:06:19.686 --> 00:06:21.116 A:middle
所以 在卡顿的风险

00:06:21.116 --> 00:06:23.136 A:middle
以及媒体质量之间

00:06:23.136 --> 00:06:24.526 A:middle
有一个明显的权衡

00:06:24.626 --> 00:06:28.566 A:middle
为此 我们需要另一个

00:06:28.566 --> 00:06:29.776 A:middle
可以衡量整体媒体质量的会话

00:06:30.736 --> 00:06:32.976 A:middle
最后 播放错误

00:06:32.976 --> 00:06:33.806 A:middle
我已经讨论过这点

00:06:34.166 --> 00:06:36.166 A:middle
它们比卡顿更具破坏性

00:06:36.826 --> 00:06:39.806 A:middle
我们如何跟踪

00:06:39.806 --> 00:06:40.276 A:middle
播放错误呢

00:06:41.196 --> 00:06:42.866 A:middle
好的 让我们从启动时间开始讲起

00:06:43.676 --> 00:06:45.526 A:middle
有很多种 API

00:06:45.526 --> 00:06:48.296 A:middle
你可以用来获取或计算启动时间

00:06:48.666 --> 00:06:50.786 A:middle
首先 不要使用将 AVPlayer.status 更改为

00:06:51.046 --> 00:06:52.836 A:middle
.readyToPlay 这种方法

00:06:52.836 --> 00:06:53.796 A:middle
这并没有告诉你

00:06:53.836 --> 00:06:56.256 A:middle
播放将要开始

00:06:56.446 --> 00:06:58.086 A:middle
然而 如果你正在使用自动播放

00:06:58.086 --> 00:06:59.346 A:middle
那么你可以预先设置

00:06:59.346 --> 00:07:00.726 A:middle
播放器的速率

00:06:59.346 --> 00:07:00.726 A:middle
播放器的速率

00:07:00.726 --> 00:07:02.716 A:middle
你可以将 AVPlayerItem.status 更改为

00:07:02.716 --> 00:07:04.506 A:middle
.readyToPlay

00:07:04.506 --> 00:07:06.606 A:middle
或者将

00:07:06.606 --> 00:07:08.536 A:middle
AVPlayerItem.isPlaybackLikelyToKeepUp

00:07:08.536 --> 00:07:09.516 A:middle
更改为 true

00:07:09.516 --> 00:07:11.026 A:middle
这些都是可观测的属性

00:07:12.176 --> 00:07:13.836 A:middle
这样做之后

00:07:13.886 --> 00:07:15.876 A:middle
你就可以知道播放即将开始

00:07:15.876 --> 00:07:16.916 A:middle
但是播放可能需要

00:07:17.076 --> 00:07:19.616 A:middle
几毫秒才会开始

00:07:19.876 --> 00:07:21.346 A:middle
所以我们向你们推荐两种方法

00:07:21.346 --> 00:07:23.766 A:middle
一种是将 AVPlayer.timeControlStatus

00:07:23.766 --> 00:07:25.056 A:middle
更改为 .Playing

00:07:25.056 --> 00:07:26.836 A:middle
另一种是跟踪

00:07:26.836 --> 00:07:28.376 A:middle
AVplayerItem.timebase

00:07:28.376 --> 00:07:30.086 A:middle
而且会有一个通知允许你这么做

00:07:30.596 --> 00:07:34.526 A:middle
AVPlayer 依靠探试法来避免卡顿

00:07:34.526 --> 00:07:36.696 A:middle
但我们知道

00:07:36.696 --> 00:07:38.026 A:middle
有时它们是不可避免的

00:07:38.846 --> 00:07:40.946 A:middle
你可以通过观察

00:07:40.946 --> 00:07:43.946 A:middle
AVPlayerItemPlaybackStalled 的通知

00:07:43.946 --> 00:07:44.736 A:middle
来监控卡顿

00:07:45.136 --> 00:07:46.816 A:middle
这里的建议是计数

00:07:46.876 --> 00:07:48.126 A:middle
卡顿的出现

00:07:48.736 --> 00:07:49.776 A:middle
当然 如果你想要

00:07:49.776 --> 00:07:52.346 A:middle
比较和合计

00:07:52.346 --> 00:07:54.466 A:middle
不同时长的会话的

00:07:54.466 --> 00:07:56.016 A:middle
卡顿行为

00:07:56.016 --> 00:07:57.096 A:middle
那么你需要将其正常化

00:07:57.096 --> 00:07:57.826 A:middle
这又该如何做到呢

00:07:58.296 --> 00:08:00.056 A:middle
我们建议你使用

00:07:58.296 --> 00:08:00.056 A:middle
我们建议你使用

00:08:00.296 --> 00:08:01.996 A:middle
总观看时长

00:08:01.996 --> 00:08:04.636 A:middle
并计算卡顿率

00:08:04.636 --> 00:08:09.326 A:middle
以单位观看时间内的卡顿次数为单位 例如卡顿/小时

00:08:09.926 --> 00:08:13.976 A:middle
对用户来说

00:08:13.976 --> 00:08:16.296 A:middle
30 秒的卡顿

00:08:16.296 --> 00:08:17.206 A:middle
比 1 秒的卡顿更糟糕

00:08:17.436 --> 00:08:19.296 A:middle
这就是为什么我们也关心

00:08:19.506 --> 00:08:21.356 A:middle
再缓冲时间或卡顿时长

00:08:22.276 --> 00:08:23.716 A:middle
通过测量

00:08:23.716 --> 00:08:25.026 A:middle
播放卡顿的通知

00:08:25.026 --> 00:08:26.956 A:middle
以及当 PlayerItem.timebase 变为 1 时

00:08:26.956 --> 00:08:28.566 A:middle
之间的时间间隔

00:08:28.566 --> 00:08:31.306 A:middle
你就可以计算出

00:08:31.306 --> 00:08:32.206 A:middle
准确的卡顿时长

00:08:32.936 --> 00:08:34.956 A:middle
此外 通过使用

00:08:34.956 --> 00:08:37.206 A:middle
会话的播放时长

00:08:37.206 --> 00:08:38.746 A:middle
你也可以对总时长进行正常化

00:08:39.025 --> 00:08:40.106 A:middle
那么 你可能想知道

00:08:40.106 --> 00:08:41.356 A:middle
我是如何计算

00:08:41.356 --> 00:08:43.006 A:middle
一个会话的播放时长的

00:08:43.395 --> 00:08:45.636 A:middle
答案是通过访问日志

00:08:45.636 --> 00:08:46.596 A:middle
让我们来看看怎么做

00:08:47.686 --> 00:08:49.866 A:middle
这是一段代码

00:08:50.806 --> 00:08:52.396 A:middle
首先 我们从 PlayerItem 中

00:08:52.396 --> 00:08:54.126 A:middle
获得对访问日志的引用

00:08:55.096 --> 00:08:57.386 A:middle
我们迭代访问日志中的事件

00:08:57.386 --> 00:08:59.316 A:middle
并简单地

00:08:59.316 --> 00:09:02.156 A:middle
计算每个

00:08:59.316 --> 00:09:02.156 A:middle
计算每个

00:09:02.156 --> 00:09:02.456 A:middle
event.durationWatched

00:09:02.456 --> 00:09:04.466 A:middle
就是这样 我们计算了

00:09:04.466 --> 00:09:05.406 A:middle
一个会话的总播放时长

00:09:05.936 --> 00:09:07.416 A:middle
现在你可能会想

00:09:07.416 --> 00:09:08.576 A:middle
这个事件是什么

00:09:08.576 --> 00:09:09.946 A:middle
访问日志中的事件

00:09:09.946 --> 00:09:10.456 A:middle
是什么意思呢

00:09:10.726 --> 00:09:12.206 A:middle
那么 让我们看看

00:09:12.206 --> 00:09:14.486 A:middle
AVPlayerItemAccessLog 是如何工作的

00:09:15.306 --> 00:09:16.976 A:middle
AVPlayerItemAccessLog 提供了

00:09:16.976 --> 00:09:18.876 A:middle
你的会话的历史记录

00:09:19.476 --> 00:09:21.196 A:middle
它最初是 null

00:09:21.196 --> 00:09:23.476 A:middle
但是当播放开始时

00:09:23.476 --> 00:09:25.476 A:middle
你将收到一个

00:09:25.476 --> 00:09:27.086 A:middle
AVPlayerItemNewAccessLogEntry 通知

00:09:27.086 --> 00:09:29.396 A:middle
到那时你将拥有一个访问日志

00:09:29.916 --> 00:09:30.946 A:middle
你将看到

00:09:30.946 --> 00:09:33.136 A:middle
访问日志中的事件

00:09:33.856 --> 00:09:36.426 A:middle
包含关于不同方面的信息

00:09:36.426 --> 00:09:38.436 A:middle
例如 当前变体 URL 当前比特率

00:09:38.436 --> 00:09:41.326 A:middle
播放时长

00:09:41.326 --> 00:09:45.636 A:middle
卡顿次数等等这些值

00:09:45.636 --> 00:09:49.326 A:middle
初始化为负值或 null

00:09:49.906 --> 00:09:52.316 A:middle
当播放开始时

00:09:52.316 --> 00:09:53.706 A:middle
它们会依据实际的测量数据

00:09:53.706 --> 00:09:56.406 A:middle
和正在播放的实际变量 URL 进行更新

00:09:56.406 --> 00:09:59.016 A:middle
两种情况下

00:09:59.016 --> 00:10:00.576 A:middle
我们会向访问日志中添加新事件

00:09:59.016 --> 00:10:00.576 A:middle
我们会向访问日志中添加新事件

00:10:00.576 --> 00:10:02.886 A:middle
一种是变量切换

00:10:02.886 --> 00:10:04.916 A:middle
就像在本例中一样

00:10:04.916 --> 00:10:05.806 A:middle
另一种是播放查找

00:10:06.256 --> 00:10:08.056 A:middle
但是在添加新事件之前

00:10:08.126 --> 00:10:10.036 A:middle
旧的事件不再可变

00:10:10.416 --> 00:10:11.926 A:middle
然后我们才能添加新事件

00:10:12.226 --> 00:10:13.606 A:middle
现在请记住

00:10:13.606 --> 00:10:16.066 A:middle
当播放开始时

00:10:16.066 --> 00:10:17.876 A:middle
这些值会不断更新

00:10:17.876 --> 00:10:20.286 A:middle
所以上一个事件中的值

00:10:21.436 --> 00:10:22.976 A:middle
并不是可观察的属性

00:10:25.116 --> 00:10:26.966 A:middle
我们也提到我们关心的

00:10:26.966 --> 00:10:29.466 A:middle
媒体质量

00:10:29.956 --> 00:10:31.566 A:middle
我们应如何计算它呢

00:10:33.376 --> 00:10:35.326 A:middle
衡量用户

00:10:35.326 --> 00:10:36.966 A:middle
是否获得最好的

00:10:36.966 --> 00:10:38.346 A:middle
媒体质量的一种方法

00:10:38.346 --> 00:10:40.136 A:middle
当然是看视频比特率

00:10:40.636 --> 00:10:42.646 A:middle
这里我们不关心

00:10:42.646 --> 00:10:44.416 A:middle
启动时间或卡顿时长

00:10:44.416 --> 00:10:46.026 A:middle
所以我们把它们去掉

00:10:46.396 --> 00:10:47.946 A:middle
我们还剩下播放状态

00:10:48.446 --> 00:10:50.066 A:middle
在这个例子中

00:10:50.066 --> 00:10:52.426 A:middle
我们看到我们在 2 兆比特的变量上

00:10:52.426 --> 00:10:55.536 A:middle
播放的时间更长

00:10:55.576 --> 00:10:56.476 A:middle
而 1 兆比特的时间更短

00:10:57.016 --> 00:10:59.166 A:middle
按时间加权每一个比特率

00:10:59.466 --> 00:11:01.326 A:middle
我们可以获得一个

00:10:59.466 --> 00:11:01.326 A:middle
我们可以获得一个

00:11:01.326 --> 00:11:02.766 A:middle
视频质量的单一值

00:11:02.766 --> 00:11:04.956 A:middle
并对此在不同的会话中进行比较

00:11:06.046 --> 00:11:07.226 A:middle
我们称这个度量为

00:11:07.226 --> 00:11:09.206 A:middle
时间加权的指示比特率

00:11:09.586 --> 00:11:11.706 A:middle
计算它就像计算

00:11:11.836 --> 00:11:14.266 A:middle
总时长一样简单

00:11:15.116 --> 00:11:17.496 A:middle
再一次 我们获得了

00:11:17.496 --> 00:11:19.176 A:middle
对 PlayerItems 的访问日志的引用

00:11:19.546 --> 00:11:21.526 A:middle
我们迭代日志中的事件

00:11:21.846 --> 00:11:23.526 A:middle
我们也计算了

00:11:23.526 --> 00:11:25.026 A:middle
相对于我们之前计算过的

00:11:25.026 --> 00:11:26.936 A:middle
totalDurationWatched 的每个事件的

00:11:26.936 --> 00:11:29.396 A:middle
时间权重 最后

00:11:29.586 --> 00:11:31.126 A:middle
我们计算得出了加权比特率值

00:11:31.526 --> 00:11:33.036 A:middle
现在请记住

00:11:33.036 --> 00:11:35.546 A:middle
有些属性可能没有初始化

00:11:35.546 --> 00:11:36.516 A:middle
所以在代码中

00:11:36.516 --> 00:11:39.206 A:middle
应进行适当的检查

00:11:41.076 --> 00:11:44.286 A:middle
另一个你绝对应该跟踪的事件

00:11:44.376 --> 00:11:45.306 A:middle
当然是播放失败

00:11:45.866 --> 00:11:47.526 A:middle
为此 你需要观察

00:11:47.526 --> 00:11:48.796 A:middle
AVPlayerItem.status

00:11:49.646 --> 00:11:51.256 A:middle
如果它的值更改为 false

00:11:51.256 --> 00:11:52.986 A:middle
则意味着 AVPlayer

00:11:52.986 --> 00:11:54.746 A:middle
遇到不可恢复的错误

00:11:55.666 --> 00:11:56.926 A:middle
有没有将这种观察

00:11:56.926 --> 00:11:58.576 A:middle
转换成 KPI 的好方法呢

00:11:59.736 --> 00:12:02.856 A:middle
一种方法是

00:11:59.736 --> 00:12:02.856 A:middle
一种方法是

00:12:03.026 --> 00:12:04.636 A:middle
观察失败的会话

00:12:04.636 --> 00:12:06.526 A:middle
占总会话的百分比

00:12:06.526 --> 00:12:07.436 A:middle
但是可能

00:12:07.436 --> 00:12:08.206 A:middle
还有其他的方法

00:12:08.856 --> 00:12:10.636 A:middle
这里我想强调的一点是

00:12:10.636 --> 00:12:12.596 A:middle
并非你的流中的

00:12:12.596 --> 00:12:14.246 A:middle
所有错误都是致命的

00:12:14.376 --> 00:12:16.316 A:middle
有些可能会影响媒体质量

00:12:16.536 --> 00:12:18.066 A:middle
而有些错误

00:12:18.066 --> 00:12:19.386 A:middle
用户甚至可能无法察觉

00:12:19.676 --> 00:12:21.046 A:middle
但是尽管如此

00:12:21.046 --> 00:12:23.806 A:middle
如果存在错误

00:12:23.806 --> 00:12:25.656 A:middle
它们就反映了你的流存在问题

00:12:25.876 --> 00:12:29.286 A:middle
那么 我该如何深入了解

00:12:29.286 --> 00:12:30.626 A:middle
流中出现了什么问题呢

00:12:31.176 --> 00:12:32.986 A:middle
答案就来自

00:12:32.986 --> 00:12:34.586 A:middle
PlayerItemErrorLog

00:12:35.436 --> 00:12:37.046 A:middle
AVPlayerItemErrorLog

00:12:37.156 --> 00:12:38.756 A:middle
错误日志记录了

00:12:38.756 --> 00:12:40.636 A:middle
对用户造成不同程度影响的错误

00:12:41.136 --> 00:12:43.626 A:middle
它的工作方式

00:12:43.836 --> 00:12:45.446 A:middle
与访问日志类似

00:12:45.446 --> 00:12:47.426 A:middle
只是事件表示错误

00:12:47.426 --> 00:12:48.806 A:middle
而不是播放器的访问状态

00:12:49.936 --> 00:12:52.766 A:middle
它们涉及很多方面

00:12:52.766 --> 00:12:54.586 A:middle
如交付问题 网络问题

00:12:54.586 --> 00:12:57.476 A:middle
内容编写错误等等

00:12:57.666 --> 00:12:59.476 A:middle
例如 它们可以让你了解

00:12:59.476 --> 00:13:01.076 A:middle
发生卡顿的原因

00:12:59.476 --> 00:13:01.076 A:middle
发生卡顿的原因

00:13:01.076 --> 00:13:03.296 A:middle
比如媒体文件

00:13:03.296 --> 00:13:05.286 A:middle
在大约 10 秒内没有响应

00:13:05.886 --> 00:13:09.126 A:middle
我们之前讨论了

00:13:09.126 --> 00:13:11.006 A:middle
你可以在每次会话中跟踪的启动时间

00:13:11.646 --> 00:13:12.876 A:middle
我们建议你查看一下

00:13:12.876 --> 00:13:14.256 A:middle
你的 App 的

00:13:14.286 --> 00:13:15.666 A:middle
启动时间分布

00:13:16.346 --> 00:13:18.086 A:middle
我们还讨论了卡顿的发生

00:13:18.086 --> 00:13:19.906 A:middle
以及卡顿时长

00:13:20.926 --> 00:13:22.356 A:middle
我们也提到了

00:13:22.436 --> 00:13:23.816 A:middle
时间加权表示的比特率

00:13:23.816 --> 00:13:25.716 A:middle
可以很好地表示

00:13:25.716 --> 00:13:27.946 A:middle
整个会话的媒体质量

00:13:27.946 --> 00:13:29.526 A:middle
最后 你可能希望

00:13:29.526 --> 00:13:30.916 A:middle
尽可能降低

00:13:30.916 --> 00:13:32.806 A:middle
失败会话的百分比

00:13:36.716 --> 00:13:39.066 A:middle
请记住 并非所有的 KPI

00:13:39.066 --> 00:13:41.606 A:middle
都可以在会话中进行比较

00:13:42.246 --> 00:13:44.256 A:middle
一个例子就是

00:13:44.256 --> 00:13:46.476 A:middle
AVPlayerFoundation

00:13:46.476 --> 00:13:48.696 A:middle
使用屏幕上的 AVPlayer 层大小

00:13:48.916 --> 00:13:51.116 A:middle
来评估 HLS 的模糊变体

00:13:51.686 --> 00:13:53.246 A:middle
例如

00:13:53.336 --> 00:13:55.556 A:middle
如果你有 10 个 ATP 的内容

00:13:55.556 --> 00:13:57.486 A:middle
它可能不会显示在 200 像素的视图上

00:13:57.486 --> 00:13:58.856 A:middle
但这并不意味着

00:13:58.856 --> 00:14:01.486 A:middle
用户体验了很差的图像质量

00:13:58.856 --> 00:14:01.486 A:middle
用户体验了很差的图像质量

00:14:02.026 --> 00:14:03.826 A:middle
接下怎么做

00:14:03.966 --> 00:14:05.366 A:middle
我们建议你

00:14:05.366 --> 00:14:07.276 A:middle
收集附加的上下文信息

00:14:07.346 --> 00:14:08.886 A:middle
以及流化度量

00:14:09.466 --> 00:14:10.876 A:middle
这将允许你

00:14:10.926 --> 00:14:12.556 A:middle
稍后在对 App

00:14:12.776 --> 00:14:14.296 A:middle
有意义的类中

00:14:14.296 --> 00:14:15.106 A:middle
对回放会话进行分区

00:14:16.396 --> 00:14:18.726 A:middle
作为 HLS 目录示例的一部分

00:14:18.726 --> 00:14:20.306 A:middle
本节的示例代码

00:14:20.306 --> 00:14:21.786 A:middle
可在 Apple 开发人员

00:14:21.786 --> 00:14:23.136 A:middle
网站上获得

00:14:24.276 --> 00:14:26.776 A:middle
现在 请允许我欢迎 Zhenheng Li

00:14:26.776 --> 00:14:28.026 A:middle
她将与你们讨论

00:14:28.026 --> 00:14:29.636 A:middle
如何提高 HLS 的性能

00:14:29.636 --> 00:14:29.976 A:middle
谢谢大家

00:14:30.516 --> 00:14:34.666 A:middle
[ 掌声 ]

00:14:35.166 --> 00:14:43.626 A:middle
&gt;&gt; 谢谢 Emil 大家好

00:14:43.736 --> 00:14:44.816 A:middle
我是 Zhenheng

00:14:45.376 --> 00:14:50.236 A:middle
我们已经讨论了

00:14:50.556 --> 00:14:52.636 A:middle
所有用户最关心的 KPI

00:14:53.256 --> 00:14:55.166 A:middle
在这部分的讨论中

00:14:55.246 --> 00:14:57.076 A:middle
我们将着重探讨如何

00:14:57.076 --> 00:14:57.416 A:middle
改进这些 API

00:14:57.456 --> 00:15:00.376 A:middle
我们将在三个方面进行更深入的研究

00:14:57.456 --> 00:15:00.376 A:middle
我们将在三个方面进行更深入的研究

00:15:00.976 --> 00:15:04.036 A:middle
第一 如何减少启动时间

00:15:05.136 --> 00:15:07.486 A:middle
第二 如何调查和

00:15:07.486 --> 00:15:08.346 A:middle
避免卡顿

00:15:09.186 --> 00:15:11.736 A:middle
第三 如何调查和

00:15:11.736 --> 00:15:12.906 A:middle
避免错误

00:15:13.506 --> 00:15:14.276 A:middle
让我们开始吧

00:15:15.756 --> 00:15:18.166 A:middle
什么可以导致播放延迟开始呢

00:15:19.006 --> 00:15:20.596 A:middle
下面是用户

00:15:20.596 --> 00:15:23.056 A:middle
从点按播放键

00:15:23.056 --> 00:15:25.536 A:middle
到视频开始的操作示例

00:15:27.096 --> 00:15:28.606 A:middle
App 创建每个资源

00:15:28.606 --> 00:15:31.026 A:middle
并开始对资源进行检查

00:15:31.026 --> 00:15:33.756 A:middle
以确定资源的时长

00:15:34.146 --> 00:15:37.226 A:middle
和可授予的媒体选项

00:15:38.106 --> 00:15:40.016 A:middle
下载主播放列表

00:15:40.516 --> 00:15:42.526 A:middle
和 [ 音质不清晰 ] 播放列表

00:15:42.526 --> 00:15:44.946 A:middle
需要在设备和

00:15:45.136 --> 00:15:47.656 A:middle
内容服务器之间来回运行几次

00:15:48.606 --> 00:15:53.696 A:middle
然后 App 会创建 AVPlayer 和 AVPlayerItem

00:15:54.646 --> 00:15:55.426 A:middle
开始缓冲

00:15:56.966 --> 00:15:59.096 A:middle
有时 缓冲会被中断

00:15:59.096 --> 00:16:01.716 A:middle
内容被加密

00:15:59.096 --> 00:16:01.716 A:middle
内容被加密

00:16:02.606 --> 00:16:04.386 A:middle
它需要在设备

00:16:04.436 --> 00:16:06.216 A:middle
和密钥服务器之间

00:16:06.216 --> 00:16:07.846 A:middle
进行几次往返

00:16:07.846 --> 00:16:08.776 A:middle
以获取解密密钥

00:16:09.576 --> 00:16:11.256 A:middle
一旦密钥被获取

00:16:12.876 --> 00:16:14.306 A:middle
缓冲便会恢复

00:16:15.046 --> 00:16:17.756 A:middle
然而 它也可能再次被中断

00:16:18.346 --> 00:16:20.846 A:middle
假设这个 App 提供了一个特性

00:16:20.936 --> 00:16:22.986 A:middle
可以从之前播放的

00:16:22.986 --> 00:16:24.506 A:middle
断点处恢复

00:16:25.546 --> 00:16:27.816 A:middle
App 为用户

00:16:27.816 --> 00:16:28.876 A:middle
在播放器上

00:16:28.916 --> 00:16:31.116 A:middle
设置一个 sic 时间[ 音质不清晰 ]

00:16:32.096 --> 00:16:34.366 A:middle
播放器将丢弃

00:16:34.366 --> 00:16:36.396 A:middle
现有的缓冲区

00:16:36.396 --> 00:16:37.966 A:middle
并从新的位置开始下载

00:16:38.656 --> 00:16:39.856 A:middle
第 100 个片段

00:16:41.776 --> 00:16:43.516 A:middle
它还可能再一次被打断

00:16:44.026 --> 00:16:47.246 A:middle
用户在 App 中

00:16:47.326 --> 00:16:49.356 A:middle
拥有语言首选项设置

00:16:50.186 --> 00:16:52.316 A:middle
她或他更喜欢西班牙语

00:16:53.226 --> 00:16:56.966 A:middle
因此 App 在 PlayerItem 上

00:16:57.996 --> 00:16:59.656 A:middle
设置 MediaSelection

00:16:59.656 --> 00:17:01.906 A:middle
丢弃现有的音频缓冲区

00:16:59.656 --> 00:17:01.906 A:middle
丢弃现有的音频缓冲区

00:17:01.906 --> 00:17:05.266 A:middle
播放器开始下载不同的语言变量

00:17:05.266 --> 00:17:08.736 A:middle
几秒钟后

00:17:08.736 --> 00:17:11.965 A:middle
PlayerItem 通知 isPlaybackLikeToKeepUp

00:17:11.996 --> 00:17:14.626 A:middle
App 设置一个速率

00:17:15.376 --> 00:17:17.746 A:middle
播放开始 并从断点继续

00:17:18.465 --> 00:17:20.856 A:middle
这一段时间 用户都在等待

00:17:22.165 --> 00:17:28.266 A:middle
所以正如我们所看到的启动

00:17:28.266 --> 00:17:30.686 A:middle
以及在设备 内容服务器

00:17:31.076 --> 00:17:33.436 A:middle
和密钥服务器之间运行

00:17:33.896 --> 00:17:34.796 A:middle
还有 AVPlayer 和

00:17:35.326 --> 00:17:37.726 A:middle
App 之间的往返

00:17:37.726 --> 00:17:39.556 A:middle
均需要一些耗时的操作

00:17:40.156 --> 00:17:42.236 A:middle
通常 AVPlayer 和 App

00:17:42.236 --> 00:17:43.266 A:middle
在不同的进程中

00:17:44.446 --> 00:17:46.176 A:middle
那么 App 如何

00:17:46.516 --> 00:17:48.506 A:middle
测量时间成本和启动时间呢

00:17:49.536 --> 00:17:52.776 A:middle
它可以测量在 API 调用

00:17:52.776 --> 00:17:55.426 A:middle
与 Player/PlayerItem

00:17:55.426 --> 00:17:56.936 A:middle
状态更改通知之间

00:17:57.156 --> 00:17:58.916 A:middle
所花费的时间

00:17:59.516 --> 00:18:02.836 A:middle
每个 PlayerItem 也提供

00:17:59.516 --> 00:18:02.836 A:middle
每个 PlayerItem 也提供

00:18:02.936 --> 00:18:05.546 A:middle
访问日志中的启动时间

00:18:06.146 --> 00:18:09.416 A:middle
这个时间是

00:18:09.456 --> 00:18:11.986 A:middle
由 AVPlayeritem 测量的

00:18:11.986 --> 00:18:13.476 A:middle
只表示缓存的时间

00:18:14.506 --> 00:18:15.816 A:middle
它从开始媒体下载时开始测量

00:18:15.816 --> 00:18:17.896 A:middle
并在第一个播放

00:18:17.896 --> 00:18:20.376 A:middle
被选定开始时结束

00:18:21.676 --> 00:18:23.366 A:middle
我们的用户希望视频快速启动

00:18:23.366 --> 00:18:26.876 A:middle
最多几秒钟内完成

00:18:27.366 --> 00:18:29.546 A:middle
有很多方法可以做到这一点

00:18:30.236 --> 00:18:33.606 A:middle
一种方法是

00:18:33.606 --> 00:18:36.006 A:middle
我们可以在用户点按播放键之前

00:18:36.826 --> 00:18:39.886 A:middle
将一些操作移动到另一个阶段

00:18:40.676 --> 00:18:43.776 A:middle
例如 可以将 AV 资源创建

00:18:44.556 --> 00:18:46.266 A:middle
和检查移出

00:18:46.966 --> 00:18:50.376 A:middle
密钥获取可以被移出

00:18:51.756 --> 00:18:54.456 A:middle
因此 当用户开始视频播放时

00:18:54.456 --> 00:18:58.616 A:middle
等待的时间会更少

00:18:59.296 --> 00:19:00.886 A:middle
那么我们将这些操作

00:18:59.296 --> 00:19:00.886 A:middle
那么我们将这些操作

00:19:00.886 --> 00:19:01.866 A:middle
移到哪里呢

00:19:03.916 --> 00:19:06.156 A:middle
当你的用户正在查看

00:19:06.156 --> 00:19:09.286 A:middle
视频目录或视频信息时

00:19:09.776 --> 00:19:11.336 A:middle
在用户决定播放之前

00:19:12.356 --> 00:19:15.026 A:middle
就可以提前

00:19:15.026 --> 00:19:17.696 A:middle
创建并检查 AV 资源了

00:19:17.916 --> 00:19:19.926 A:middle
去年我们引入了

00:19:19.926 --> 00:19:21.446 A:middle
AVContentKeySession 的 API

00:19:22.346 --> 00:19:25.646 A:middle
这个新的 API 将媒体负载

00:19:25.646 --> 00:19:27.056 A:middle
与密钥获取分离开来

00:19:27.596 --> 00:19:29.836 A:middle
它为 App 提供了

00:19:29.836 --> 00:19:31.326 A:middle
对密钥管理的全面控制

00:19:31.926 --> 00:19:35.336 A:middle
它提供了优化密钥获取的方法

00:19:35.336 --> 00:19:39.316 A:middle
例如将多个密钥请求打包回

00:19:39.816 --> 00:19:40.686 A:middle
密钥服务器

00:19:41.566 --> 00:19:43.346 A:middle
如果你碰巧采用

00:19:43.346 --> 00:19:45.906 A:middle
AVContentKeySession

00:19:45.906 --> 00:19:47.686 A:middle
并花费几个小时的工程时间

00:19:48.566 --> 00:19:50.886 A:middle
你的用户将会注意到

00:19:50.886 --> 00:19:52.356 A:middle
启动时间变得更快

00:19:53.476 --> 00:19:56.136 A:middle
现在我们已经将创建 AV 资源

00:19:56.186 --> 00:19:58.436 A:middle
和密钥获取的工作

00:19:58.436 --> 00:19:59.316 A:middle
从启动时间中移出

00:19:59.896 --> 00:20:03.256 A:middle
那么剩下的主要是

00:19:59.896 --> 00:20:03.256 A:middle
那么剩下的主要是

00:20:03.306 --> 00:20:05.906 A:middle
AVPlayerItem 缓冲时间

00:20:05.906 --> 00:20:08.576 A:middle
以及 AVPlayer

00:20:08.576 --> 00:20:10.286 A:middle
和 App 之间的通信时间

00:20:11.356 --> 00:20:14.686 A:middle
通常情况下

00:20:14.906 --> 00:20:18.266 A:middle
由于播放查找或媒体选项等等因素

00:20:19.176 --> 00:20:20.346 A:middle
App 可以避免缓冲

00:20:20.906 --> 00:20:24.036 A:middle
我们甚至可以尝试

00:20:24.036 --> 00:20:26.736 A:middle
减少播放器

00:20:26.736 --> 00:20:28.136 A:middle
和 App 之间的往返次数

00:20:29.186 --> 00:20:31.646 A:middle
这样 启动时间将进一步减少

00:20:33.056 --> 00:20:33.806 A:middle
我们来看一下

00:20:34.386 --> 00:20:38.386 A:middle
当你创建 AVPlayerItem 时

00:20:38.996 --> 00:20:42.246 A:middle
如果你知道

00:20:42.246 --> 00:20:44.016 A:middle
用户打算在哪里开始回放

00:20:45.056 --> 00:20:47.176 A:middle
请设置 PlayerItem 上的当前时间

00:20:47.846 --> 00:20:49.106 A:middle
如果你知道媒体选项

00:20:49.106 --> 00:20:51.476 A:middle
都是如何设置的

00:20:51.476 --> 00:20:53.966 A:middle
比如要下载哪一种语言进行播放

00:20:53.966 --> 00:20:56.956 A:middle
那么在你将 AVPlayerItem 放置到

00:20:56.956 --> 00:20:58.906 A:middle
播放器上之前也要设置它

00:20:59.806 --> 00:21:01.456 A:middle
AVPlayer 也是如此

00:20:59.806 --> 00:21:01.456 A:middle
AVPlayer 也是如此

00:21:02.006 --> 00:21:03.946 A:middle
一旦用户点按播放键

00:21:05.106 --> 00:21:07.336 A:middle
在为 AVPlayerItem

00:21:07.336 --> 00:21:11.406 A:middle
开始下载之前设置速率

00:21:12.086 --> 00:21:13.496 A:middle
因此 只要 PlayerItem

00:21:13.496 --> 00:21:16.586 A:middle
有足够的内容播放

00:21:16.586 --> 00:21:18.176 A:middle
播放就会自动开始

00:21:19.016 --> 00:21:22.386 A:middle
总而言之

00:21:22.646 --> 00:21:23.366 A:middle
即在缓冲之前设置 AVPlayer

00:21:24.486 --> 00:21:27.476 A:middle
在将 PlayerItem 设置到播放器之前

00:21:28.366 --> 00:21:31.646 A:middle
设置 AVPlayer速率

00:21:31.696 --> 00:21:36.096 A:middle
很多 App 都提供了一个特性

00:21:36.096 --> 00:21:38.626 A:middle
即允许用户

00:21:39.176 --> 00:21:41.696 A:middle
选择多个视频

00:21:41.746 --> 00:21:43.936 A:middle
然后一个接一个地播放

00:21:43.936 --> 00:21:45.576 A:middle
比如狂热地观看电视节目

00:21:46.756 --> 00:21:48.636 A:middle
我们已经看到了

00:21:48.636 --> 00:21:50.986 A:middle
例如每个视频分配一个播放器和一个 PlayerItem

00:21:50.986 --> 00:21:52.266 A:middle
的这种实现

00:21:52.846 --> 00:21:54.616 A:middle
每个新视频都

00:21:54.746 --> 00:21:57.036 A:middle
需要一个启动缓冲时间

00:21:57.706 --> 00:21:59.686 A:middle
你可以使用 AVQueuePlayer

00:22:00.236 --> 00:22:02.956 A:middle
以减少新视频的

00:22:02.956 --> 00:22:03.936 A:middle
缓冲时间

00:22:05.576 --> 00:22:07.916 A:middle
创建多个 PlayerItem

00:22:08.426 --> 00:22:10.706 A:middle
将它们全部包含在播放队列中

00:22:11.256 --> 00:22:14.356 A:middle
在播放器

00:22:14.356 --> 00:22:17.796 A:middle
播放当前项目的过程中

00:22:17.796 --> 00:22:19.186 A:middle
当媒体下载结束时

00:22:19.186 --> 00:22:22.246 A:middle
播放器将开始

00:22:22.246 --> 00:22:23.626 A:middle
下载下一个项目

00:22:24.226 --> 00:22:26.016 A:middle
同时当前项目仍在播放

00:22:27.346 --> 00:22:30.666 A:middle
因此 一旦当前事件

00:22:30.666 --> 00:22:32.656 A:middle
播放到最后

00:22:32.706 --> 00:22:34.916 A:middle
下一个 PlayerItem 将立即开始播放

00:22:35.526 --> 00:22:39.446 A:middle
因此一定要使用 AVQueuePlayer

00:22:39.446 --> 00:22:42.086 A:middle
来播放多个项目

00:22:42.086 --> 00:22:44.826 A:middle
并提前将第二个 AVPlayerItem 编入队列

00:22:47.406 --> 00:22:48.266 A:middle
那么还剩下些什么呢

00:22:49.516 --> 00:22:50.266 A:middle
缓冲时间

00:22:51.446 --> 00:22:55.086 A:middle
首先 什么决定了网络缓冲时间

00:22:55.696 --> 00:22:56.566 A:middle
有四个因素

00:22:57.796 --> 00:23:00.886 A:middle
变量的选择

00:22:57.796 --> 00:23:00.886 A:middle
变量的选择

00:23:01.136 --> 00:23:04.556 A:middle
内容的比特率

00:23:04.556 --> 00:23:06.696 A:middle
播放列表目标时长

00:23:06.696 --> 00:23:09.276 A:middle
当然还有 网络带宽

00:23:09.806 --> 00:23:13.706 A:middle
让我们看几个

00:23:13.706 --> 00:23:14.776 A:middle
缓冲时间的例子

00:23:16.286 --> 00:23:19.016 A:middle
首先 这是一个简单的主播放列表

00:23:19.396 --> 00:23:22.236 A:middle
它将一个 ATP 视频

00:23:22.236 --> 00:23:24.386 A:middle
设置在 5 mbps 左右的下载速度

00:23:24.386 --> 00:23:26.656 A:middle
假设网络带宽

00:23:26.656 --> 00:23:28.986 A:middle
在 6 mbps 左右

00:23:28.986 --> 00:23:31.896 A:middle
我们的目标时长是 10 秒

00:23:32.886 --> 00:23:35.116 A:middle
在大多数情况下

00:23:35.186 --> 00:23:38.556 A:middle
PlayerItem 会在通知播放

00:23:39.446 --> 00:23:41.216 A:middle
需要开始之前

00:23:41.216 --> 00:23:42.526 A:middle
缓冲一个片段

00:23:42.636 --> 00:23:46.336 A:middle
然而 相同的主播放列表

00:23:46.336 --> 00:23:48.816 A:middle
在几乎相同的网络条件下

00:23:48.816 --> 00:23:51.676 A:middle
用户可能会

00:23:51.676 --> 00:23:54.246 A:middle
观察到较慢的启动

00:23:55.996 --> 00:23:58.216 A:middle
请记住 原因是

00:23:58.216 --> 00:24:00.256 A:middle
网络带宽改变

00:23:58.216 --> 00:24:00.256 A:middle
网络带宽改变

00:24:00.256 --> 00:24:02.366 A:middle
内容比特率也会改变

00:24:02.776 --> 00:24:04.506 A:middle
在这种情况下

00:24:04.506 --> 00:24:06.176 A:middle
有一些片段需要更长的时间来下载

00:24:06.566 --> 00:24:08.106 A:middle
因此播放器需要更久的时间来启动

00:24:09.086 --> 00:24:11.946 A:middle
要解决这个问题

00:24:13.286 --> 00:24:14.916 A:middle
提供一个低比特率的变量

00:24:14.916 --> 00:24:15.236 A:middle
可能会有所帮助

00:24:16.896 --> 00:24:19.936 A:middle
播放器就可以选择

00:24:20.426 --> 00:24:23.586 A:middle
调低比特率并更快启动

00:24:24.336 --> 00:24:26.056 A:middle
当其他信息均缺失时

00:24:26.056 --> 00:24:29.026 A:middle
所列出的第一个变量

00:24:29.026 --> 00:24:30.946 A:middle
将是你的启动变量

00:24:31.586 --> 00:24:35.536 A:middle
在这个例子中 有两个变量

00:24:36.216 --> 00:24:37.466 A:middle
在相同的网络条件下

00:24:37.506 --> 00:24:40.106 A:middle
首先列出较低比特率的变量

00:24:40.636 --> 00:24:43.666 A:middle
播放器将会启动更快

00:24:45.196 --> 00:24:50.086 A:middle
并且在网络带宽

00:24:50.086 --> 00:24:52.646 A:middle
足够的情况下快速切换

00:24:53.936 --> 00:24:58.466 A:middle
总之 为了减少网络缓冲时间

00:24:58.466 --> 00:25:00.306 A:middle
我们应该明智地

00:24:58.466 --> 00:25:00.306 A:middle
我们应该明智地

00:25:00.306 --> 00:25:01.736 A:middle
选择初始变量

00:25:02.936 --> 00:25:04.516 A:middle
更低的内容比特率

00:25:05.266 --> 00:25:07.676 A:middle
意味着更短的缓冲时间

00:25:07.676 --> 00:25:09.826 A:middle
但也同时是视频质量的折衷

00:25:11.406 --> 00:25:13.486 A:middle
如果你正在提供

00:25:13.486 --> 00:25:16.366 A:middle
多种媒体格式

00:25:16.496 --> 00:25:19.646 A:middle
例如 HDR 和 SDR 视频

00:25:19.646 --> 00:25:22.976 A:middle
或者立体声音频和多声道音频

00:25:22.976 --> 00:25:26.276 A:middle
请确保每种媒体格式的初始版本

00:25:26.316 --> 00:25:29.246 A:middle
都处于类似的比特率级别

00:25:29.246 --> 00:25:32.216 A:middle
以便你的用户

00:25:32.216 --> 00:25:33.706 A:middle
将拥有类似的体验

00:25:34.066 --> 00:25:36.166 A:middle
无论他们进行

00:25:36.166 --> 00:25:37.826 A:middle
何种类型的观看设置

00:25:38.536 --> 00:25:42.216 A:middle
这就是我要讲的关于减少启动时间的内容

00:25:42.746 --> 00:25:43.926 A:middle
我们的视频已经开始播放了

00:25:45.556 --> 00:25:47.566 A:middle
现在我们来谈谈卡顿

00:25:48.526 --> 00:25:51.186 A:middle
需要明确的是

00:25:51.186 --> 00:25:53.396 A:middle
尤其是当网络带宽特别低的时候

00:25:53.396 --> 00:25:55.456 A:middle
卡顿就可能发生

00:25:56.176 --> 00:25:58.116 A:middle
所以在这部分的演讲中

00:25:58.116 --> 00:25:59.796 A:middle
让我们关注如何调查卡顿

00:25:59.906 --> 00:26:03.636 A:middle
以及如何改进 或避免卡顿

00:25:59.906 --> 00:26:03.636 A:middle
以及如何改进 或避免卡顿

00:26:04.196 --> 00:26:08.696 A:middle
App 是如何调查卡顿的呢

00:26:09.246 --> 00:26:12.616 A:middle
App 应该一直在

00:26:12.616 --> 00:26:14.416 A:middle
监听卡顿通知

00:26:16.296 --> 00:26:20.286 A:middle
App 也应该检查

00:26:20.286 --> 00:26:23.096 A:middle
AVPlayer.status

00:26:23.456 --> 00:26:27.546 A:middle
例如 isPlayBackLikelyToKeepUp

00:26:27.546 --> 00:26:30.106 A:middle
AVPlayerItem 还提供

00:26:30.106 --> 00:26:32.006 A:middle
错误日志和访问日志

00:26:32.576 --> 00:26:33.666 A:middle
当暂停发生时

00:26:33.906 --> 00:26:37.846 A:middle
App 应该时刻关注

00:26:37.846 --> 00:26:38.996 A:middle
对那些日志的检查

00:26:39.546 --> 00:26:43.896 A:middle
接下来让我们看两个卡顿的例子

00:26:44.716 --> 00:26:49.096 A:middle
首先 App 已收到了卡顿通知

00:26:49.616 --> 00:26:51.956 A:middle
也应该收到了

00:26:52.076 --> 00:26:54.116 A:middle
错误日志

00:26:55.126 --> 00:26:58.236 A:middle
错误注释会告诉你

00:26:58.396 --> 00:27:00.886 A:middle
所发生的事情的详细信息

00:26:58.396 --> 00:27:00.886 A:middle
所发生的事情的详细信息

00:27:01.456 --> 00:27:03.266 A:middle
在这种情况下它的记录是

00:27:03.266 --> 00:27:05.206 A:middle
“15 秒内未收到媒体文件”

00:27:06.406 --> 00:27:09.056 A:middle
App 检查访问日志

00:27:09.056 --> 00:27:12.286 A:middle
以找出发生卡顿时

00:27:12.346 --> 00:27:14.856 A:middle
AVPlayer 正在播放的内容

00:27:15.846 --> 00:27:17.886 A:middle
它会记录详细的信息

00:27:17.886 --> 00:27:20.046 A:middle
比如播放器

00:27:20.046 --> 00:27:23.186 A:middle
正在播放什么内容以及 URI

00:27:24.506 --> 00:27:26.036 A:middle
indicatedBitrate 指的是

00:27:26.036 --> 00:27:27.046 A:middle
内容比特率

00:27:27.416 --> 00:27:30.656 A:middle
这里具体是 36 mbps

00:27:30.656 --> 00:27:31.756 A:middle
它是一个 4K 内容

00:27:32.606 --> 00:27:35.166 A:middle
observedBitrate 指的是

00:27:35.356 --> 00:27:36.766 A:middle
当前的网络带宽

00:27:37.066 --> 00:27:39.616 A:middle
这里具体是 2.8 mbps

00:27:40.236 --> 00:27:45.276 A:middle
显然网络带宽跟不上

00:27:45.316 --> 00:27:47.286 A:middle
内容比特率

00:27:47.916 --> 00:27:50.536 A:middle
所以要处理变化的网络情况

00:27:50.536 --> 00:27:53.686 A:middle
请记得提供一套

00:27:53.686 --> 00:27:54.706 A:middle
完整的比特率层

00:27:55.226 --> 00:27:57.436 A:middle
你的一些用户的网络

00:27:57.436 --> 00:27:58.966 A:middle
可能连接较慢

00:27:58.966 --> 00:28:01.336 A:middle
或者你的用户可能正忙

00:27:58.966 --> 00:28:01.336 A:middle
或者你的用户可能正忙

00:28:01.336 --> 00:28:03.306 A:middle
比如在查看视频时

00:28:03.596 --> 00:28:04.886 A:middle
使用蜂窝网络

00:28:05.746 --> 00:28:07.236 A:middle
如果你提供多种视频

00:28:07.236 --> 00:28:09.846 A:middle
和多种媒体格式

00:28:10.616 --> 00:28:12.216 A:middle
那么每个编解码组合

00:28:12.216 --> 00:28:15.826 A:middle
都需要自己的一组层

00:28:16.806 --> 00:28:20.166 A:middle
并不是所有的卡顿

00:28:20.166 --> 00:28:21.096 A:middle
都是由于网络环境造成的

00:28:22.356 --> 00:28:23.416 A:middle
让我们来看看这个

00:28:24.536 --> 00:28:26.986 A:middle
卡顿发生了

00:28:26.986 --> 00:28:28.486 A:middle
然而错误日志中却有了不同的记录

00:28:29.786 --> 00:28:32.756 A:middle
“播放列表文件

00:28:32.756 --> 00:28:34.956 A:middle
连续两次没有改变”

00:28:35.976 --> 00:28:37.976 A:middle
如果你在那个时候检查访问日志

00:28:37.976 --> 00:28:40.986 A:middle
播放器正在线播放

00:28:42.336 --> 00:28:44.456 A:middle
indicatedBitrate 很低

00:28:44.996 --> 00:28:48.296 A:middle
内容比特率是 400 kbps

00:28:48.296 --> 00:28:51.546 A:middle
而网络带宽是 3.7 mbps

00:28:51.956 --> 00:28:53.646 A:middle
这看起来像是一个

00:28:53.646 --> 00:28:54.586 A:middle
内容交付问题

00:28:57.016 --> 00:28:59.156 A:middle
因此 为了减少或避免

00:28:59.156 --> 00:29:01.696 A:middle
由于内容交付而造成的卡顿

00:28:59.156 --> 00:29:01.696 A:middle
由于内容交付而造成的卡顿

00:29:01.696 --> 00:29:04.626 A:middle
内容服务器和 CDN

00:29:04.626 --> 00:29:07.166 A:middle
必须无延迟地

00:29:07.166 --> 00:29:08.246 A:middle
交付媒体文件 片段和密钥

00:29:09.196 --> 00:29:11.776 A:middle
至少每一个目标时长

00:29:11.776 --> 00:29:15.446 A:middle
更新实时播放列表 CDN 缓存

00:29:15.666 --> 00:29:17.576 A:middle
必须加以配置

00:29:17.576 --> 00:29:22.416 A:middle
以交付最新的播放列表 避免过时

00:29:22.466 --> 00:29:26.086 A:middle
同步播放列表之间的不连续序号

00:29:27.996 --> 00:29:29.466 A:middle
使用正确的 HTTP 状态代码

00:29:29.466 --> 00:29:33.096 A:middle
进而清楚地指示服务器端失败

00:29:35.416 --> 00:29:36.856 A:middle
这就是所有关于卡顿的内容

00:29:37.336 --> 00:29:38.026 A:middle
那么错误又是怎么回事

00:29:39.206 --> 00:29:42.066 A:middle
我们应该如何调查错误呢

00:29:42.066 --> 00:29:44.746 A:middle
有几种方法可供选择

00:29:45.906 --> 00:29:49.346 A:middle
我们有来自 AVPlayerItem 的

00:29:49.346 --> 00:29:51.226 A:middle
错误日志和访问日志

00:29:52.186 --> 00:29:55.486 A:middle
我们也有来自

00:29:55.486 --> 00:29:57.196 A:middle
每个 Player 和

00:29:57.516 --> 00:30:00.506 A:middle
PlayerItem 的错误属性

00:29:57.516 --> 00:30:00.506 A:middle
PlayerItem 的错误属性

00:30:02.016 --> 00:30:04.066 A:middle
此外 我们还为你们提供了

00:30:04.066 --> 00:30:06.176 A:middle
一些媒体验证工具

00:30:06.486 --> 00:30:08.926 A:middle
来检测内容问题

00:30:09.536 --> 00:30:11.076 A:middle
让我们一个一个地看

00:30:11.686 --> 00:30:15.086 A:middle
AVPlayerItemErrorLog

00:30:15.086 --> 00:30:17.696 A:middle
Emil 对此已经与我们讨论了一些

00:30:19.146 --> 00:30:21.056 A:middle
这种类型的错误日志

00:30:21.056 --> 00:30:22.906 A:middle
表明网络或

00:30:22.906 --> 00:30:25.186 A:middle
内容格式存在问题

00:30:25.746 --> 00:30:28.136 A:middle
然而这些问题并不总是致命的

00:30:28.726 --> 00:30:31.666 A:middle
当错误被指示出来时

00:30:31.856 --> 00:30:33.406 A:middle
播放可能是完全

00:30:33.626 --> 00:30:34.446 A:middle
没问题的

00:30:36.516 --> 00:30:40.356 A:middle
但是 App 显示了在错误注释中的检查结果

00:30:40.706 --> 00:30:42.796 A:middle
以查找更多的细节

00:30:42.796 --> 00:30:46.486 A:middle
比如这个我们之前见过的

00:30:46.486 --> 00:30:48.766 A:middle
“15 秒内未收到媒体文件”

00:30:49.476 --> 00:30:54.286 A:middle
这表明你的用户可能已经

00:30:54.286 --> 00:30:55.096 A:middle
或者即将观察到卡顿

00:30:56.916 --> 00:31:00.206 A:middle
下一个是 HTTP 错误

00:30:56.916 --> 00:31:00.206 A:middle
下一个是 HTTP 错误

00:31:00.206 --> 00:31:01.336 A:middle
它记录“文件没有找到”

00:31:01.916 --> 00:31:03.716 A:middle
这表明了

00:31:03.716 --> 00:31:04.566 A:middle
内容交付的问题

00:31:05.376 --> 00:31:07.696 A:middle
用户可能会观察到音频丢失或视频丢失

00:31:07.916 --> 00:31:13.926 A:middle
甚至同时观察到这两者

00:31:13.926 --> 00:31:15.516 A:middle
[ 音质不清晰 ] 变量的

00:31:15.516 --> 00:31:16.206 A:middle
指定带宽

00:31:16.576 --> 00:31:17.836 A:middle
这个很有趣

00:31:18.096 --> 00:31:19.856 A:middle
它指示了卡顿的风险

00:31:20.236 --> 00:31:22.546 A:middle
然而当错误被指示时

00:31:22.616 --> 00:31:25.296 A:middle
播放可能没有问题

00:31:25.836 --> 00:31:28.336 A:middle
它意味着

00:31:28.336 --> 00:31:30.466 A:middle
某些片段的比特率

00:31:30.466 --> 00:31:32.556 A:middle
比主播放列表中指定的比特率要高

00:31:32.996 --> 00:31:36.276 A:middle
最后一个例子

00:31:37.046 --> 00:31:39.626 A:middle
加密格式错误 “不支持的加密格式”

00:31:40.026 --> 00:31:42.316 A:middle
这可能指示了一个

00:31:42.316 --> 00:31:43.926 A:middle
播放失败

00:31:44.816 --> 00:31:47.926 A:middle
当我们有 AVPlayer 和 PlayerItem 的错误时

00:31:47.926 --> 00:31:49.556 A:middle
所有列出的这些

00:31:49.556 --> 00:31:52.006 A:middle
以及这里没有提到的

00:31:52.006 --> 00:31:54.966 A:middle
其他错误信息 都非常有用

00:31:55.816 --> 00:31:57.046 A:middle
让我们看一下

00:31:59.016 --> 00:32:00.476 A:middle
App 应该观察

00:31:59.016 --> 00:32:00.476 A:middle
App 应该观察

00:32:01.076 --> 00:32:03.476 A:middle
AVPlayerItem.status

00:32:04.006 --> 00:32:05.576 A:middle
和 AVPlayerItem 的错误属性

00:32:05.576 --> 00:32:08.086 A:middle
以查找此类错误

00:32:09.146 --> 00:32:10.816 A:middle
这些便是致命错误

00:32:11.916 --> 00:32:13.056 A:middle
当错误被指示

00:32:13.406 --> 00:32:15.106 A:middle
且播放已经终止时

00:32:15.106 --> 00:32:17.586 A:middle
我们该怎么办呢

00:32:18.306 --> 00:32:19.626 A:middle
我们如何找出原因

00:32:20.206 --> 00:32:22.016 A:middle
这有一个例子

00:32:22.806 --> 00:32:24.576 A:middle
App 观察到

00:32:24.986 --> 00:32:27.706 A:middle
PlayerItem.status

00:32:27.706 --> 00:32:29.346 A:middle
已经改成失败状态

00:32:30.286 --> 00:32:35.636 A:middle
然后 App 对 AVPlayer 的错误属性

00:32:35.636 --> 00:32:37.766 A:middle
和 AVPlayerItem的 错误日志

00:32:37.766 --> 00:32:39.416 A:middle
进行检查

00:32:41.376 --> 00:32:45.766 A:middle
这个就是

00:32:45.766 --> 00:32:46.716 A:middle
PlayerItem 的错误属性

00:32:47.146 --> 00:32:49.056 A:middle
它提供了一些有用的信息

00:32:50.206 --> 00:32:52.296 A:middle
来自于 AVFoundationErrorDomain 的

00:32:52.296 --> 00:32:53.026 A:middle
错误代码

00:32:53.746 --> 00:32:56.536 A:middle
它还提供了一些提示

00:32:56.536 --> 00:32:59.246 A:middle
检查了 AVPlayerItem 的

00:32:59.246 --> 00:33:00.516 A:middle
错误日志

00:32:59.246 --> 00:33:00.516 A:middle
错误日志

00:33:01.526 --> 00:33:05.446 A:middle
相对应的 AVPlayer 错误日志

00:33:05.446 --> 00:33:07.766 A:middle
可以提供更多细节

00:33:08.506 --> 00:33:10.706 A:middle
它会告诉你日期 时间

00:33:10.706 --> 00:33:13.786 A:middle
以及在什么 URI 上

00:33:13.786 --> 00:33:14.396 A:middle
有什么类型的错误

00:33:14.396 --> 00:33:18.066 A:middle
在这里错误是“不支持的加密格式”

00:33:19.056 --> 00:33:22.226 A:middle
它还告诉你

00:33:22.566 --> 00:33:24.496 A:middle
当发生错误时

00:33:24.606 --> 00:33:29.356 A:middle
设备处于哪种类型的网络接口

00:33:29.606 --> 00:33:31.776 A:middle
下一种错误类型 HDCP

00:33:33.006 --> 00:33:34.796 A:middle
如果你正在提供

00:33:34.796 --> 00:33:38.086 A:middle
需要 HDCP 保护的内容

00:33:38.086 --> 00:33:39.666 A:middle
你的 App 应该注意

00:33:39.666 --> 00:33:43.186 A:middle
这个十分长的属性名

00:33:43.736 --> 00:33:45.776 A:middle
IsOutputObscuredDueTo

00:33:46.076 --> 00:33:48.066 A:middle
InsufficientExternalProtection

00:33:49.236 --> 00:33:50.566 A:middle
此属性的值变化为 2 时

00:33:50.566 --> 00:33:52.726 A:middle
意味着三件事情

00:33:54.166 --> 00:33:57.996 A:middle
当前项目需要外部保护

00:33:58.726 --> 00:34:01.696 A:middle
设备不满足保护级别

00:33:58.726 --> 00:34:01.696 A:middle
设备不满足保护级别

00:34:02.326 --> 00:34:04.506 A:middle
用户将会观察到

00:34:04.506 --> 00:34:06.566 A:middle
或已经观察到视频丢失

00:34:06.566 --> 00:34:07.866 A:middle
例如通过 [ 音质不清晰 ]

00:34:08.866 --> 00:34:13.255 A:middle
为了避免这个问题

00:34:13.255 --> 00:34:16.565 A:middle
你的主播放列表应该提供

00:34:16.565 --> 00:34:19.226 A:middle
至少一个不需要 HDCP

00:34:19.226 --> 00:34:21.926 A:middle
作为回退的变量

00:34:22.626 --> 00:34:24.656 A:middle
请记住 并不是所有的用户

00:34:24.876 --> 00:34:27.326 A:middle
都有 HDCP 支持的

00:34:27.326 --> 00:34:28.065 A:middle
查看设置

00:34:28.996 --> 00:34:31.436 A:middle
App 用户界面

00:34:31.436 --> 00:34:33.706 A:middle
应反映属性的变化

00:34:33.706 --> 00:34:35.116 A:middle
以便及时提示用户

00:34:36.496 --> 00:34:38.766 A:middle
许多播放问题

00:34:38.766 --> 00:34:40.616 A:middle
都是由创建内容引起的

00:34:41.176 --> 00:34:43.396 A:middle
比如在 [ 音质不清晰 ] 切换时

00:34:43.396 --> 00:34:46.166 A:middle
声音和视频出现了

00:34:46.376 --> 00:34:46.916 A:middle
中断或故障

00:34:48.085 --> 00:34:49.076 A:middle
除了我们讨论过的

00:34:49.076 --> 00:34:50.815 A:middle
错误调查

00:34:50.815 --> 00:34:53.146 A:middle
和错误处理之外

00:34:53.146 --> 00:34:55.755 A:middle
我们还建议你们使用

00:34:55.755 --> 00:34:58.656 A:middle
我们的媒体流验证器

00:34:58.656 --> 00:35:01.256 A:middle
它可以在开发者网站中获得

00:34:58.656 --> 00:35:01.256 A:middle
它可以在开发者网站中获得

00:35:02.026 --> 00:35:03.826 A:middle
这就是我今天想说的全部内容

00:35:04.606 --> 00:35:08.806 A:middle
现在让我们欢迎我的同事 Eryk Vershen

00:35:10.136 --> 00:35:12.006 A:middle
来谈谈如何以正确的方式

00:35:12.676 --> 00:35:14.166 A:middle
编写主播放列表 谢谢大家

00:35:15.516 --> 00:35:18.500 A:middle
[ 掌声 ]

00:35:25.046 --> 00:35:25.976 A:middle
&gt;&gt; 谢谢你 Zhenheng

00:35:26.346 --> 00:35:27.336 A:middle
我是 Eryk Vershen

00:35:27.336 --> 00:35:29.566 A:middle
我是一名从事于 HLS 工具的工程师

00:35:29.566 --> 00:35:31.596 A:middle
我们已经讨论了

00:35:31.596 --> 00:35:33.606 A:middle
如何衡量

00:35:33.826 --> 00:35:35.406 A:middle
流媒体 App 的性能表现

00:35:35.406 --> 00:35:36.236 A:middle
以及如何解决相关问题

00:35:36.746 --> 00:35:38.166 A:middle
然而 获得成功且无错误的

00:35:38.786 --> 00:35:40.436 A:middle
播放体验的

00:35:40.436 --> 00:35:42.656 A:middle
关键元素之一

00:35:42.656 --> 00:35:44.636 A:middle
是确保你的

00:35:44.636 --> 00:35:45.566 A:middle
主播放列表是正确的

00:35:46.246 --> 00:35:47.826 A:middle
主播放列表

00:35:47.826 --> 00:35:49.216 A:middle
使得播放器

00:35:49.216 --> 00:35:51.426 A:middle
在播放之前和播放期间

00:35:51.476 --> 00:35:53.226 A:middle
做出明智的决定

00:35:53.756 --> 00:35:55.196 A:middle
所以确保它的正确是十分重要的

00:35:56.466 --> 00:35:57.846 A:middle
让我们开始吧 我的建议是

00:35:58.046 --> 00:35:59.246 A:middle
不不 这只是个玩笑

00:35:59.646 --> 00:36:01.066 A:middle
我想我需要给你们

00:35:59.646 --> 00:36:01.066 A:middle
我想我需要给你们

00:36:01.066 --> 00:36:02.356 A:middle
更多的背景知识

00:36:02.356 --> 00:36:03.476 A:middle
来理解 Roger 的意思

00:36:04.426 --> 00:36:06.086 A:middle
我们希望你们

00:36:06.086 --> 00:36:07.706 A:middle
把所有的编码选项

00:36:07.756 --> 00:36:09.666 A:middle
都放到你的主播放列表中

00:36:09.666 --> 00:36:11.796 A:middle
并且尽可能完整地描述它们

00:36:12.556 --> 00:36:14.296 A:middle
假设你在问我这个问题

00:36:14.846 --> 00:36:17.876 A:middle
这是一个关键问题

00:36:17.876 --> 00:36:19.296 A:middle
也是你们必须解决的主要问题

00:36:20.316 --> 00:36:22.866 A:middle
首先 你需要记住

00:36:22.866 --> 00:36:24.396 A:middle
一个主播放列表不能仅仅因为有效

00:36:24.396 --> 00:36:26.826 A:middle
就被判定是正确的

00:36:27.446 --> 00:36:28.686 A:middle
我就见过

00:36:28.686 --> 00:36:30.596 A:middle
像这样的主播放列表

00:36:30.996 --> 00:36:32.576 A:middle
它在语法上是正确的

00:36:32.576 --> 00:36:33.756 A:middle
却几乎没用

00:36:34.356 --> 00:36:36.616 A:middle
好的 那这个怎么样

00:36:36.616 --> 00:36:37.956 A:middle
它有更多的变量

00:36:38.816 --> 00:36:41.386 A:middle
好一点 但还是很糟糕

00:36:41.856 --> 00:36:42.836 A:middle
我们还能播放这个视频吗

00:36:42.836 --> 00:36:43.986 A:middle
它使用什么编解码器

00:36:44.266 --> 00:36:45.156 A:middle
它是 HDR 吗

00:36:45.156 --> 00:36:46.166 A:middle
它是 60 fps 吗

00:36:46.916 --> 00:36:48.316 A:middle
你需要告诉我们一切

00:36:48.316 --> 00:36:50.096 A:middle
我们想要你告诉我们一切

00:36:50.716 --> 00:36:52.256 A:middle
比如 平均带宽

00:36:52.536 --> 00:36:54.486 A:middle
平均带宽

00:36:54.486 --> 00:36:56.396 A:middle
使我们能够更好地决定

00:36:56.396 --> 00:36:57.616 A:middle
切换到哪个变量

00:36:58.446 --> 00:36:59.396 A:middle
它能更好地预测

00:36:59.396 --> 00:37:00.626 A:middle
我们是否能

00:36:59.396 --> 00:37:00.626 A:middle
我们是否能

00:37:00.626 --> 00:37:01.306 A:middle
与流保持同步

00:37:02.276 --> 00:37:04.276 A:middle
编解码器使我们能够过滤掉

00:37:04.276 --> 00:37:06.416 A:middle
不能播放的东西

00:37:06.416 --> 00:37:08.806 A:middle
分辨率使我们能够

00:37:08.806 --> 00:37:10.156 A:middle
对选择哪种变量

00:37:10.156 --> 00:37:11.236 A:middle
做出正确的决定

00:37:12.086 --> 00:37:13.806 A:middle
请记住 直到我们需要

00:37:13.806 --> 00:37:15.776 A:middle
我们才会查看

00:37:15.776 --> 00:37:17.436 A:middle
媒体播放列表或媒体片段

00:37:17.816 --> 00:37:19.246 A:middle
所以你需要提前在你的

00:37:19.466 --> 00:37:20.846 A:middle
主播放列表中

00:37:20.846 --> 00:37:21.406 A:middle
告诉我们一些事情

00:37:22.616 --> 00:37:25.406 A:middle
这是一个简单的

00:37:25.406 --> 00:37:26.266 A:middle
主播放列表的例子

00:37:26.766 --> 00:37:28.306 A:middle
这个播放列表使得播放器

00:37:28.306 --> 00:37:30.266 A:middle
适应带宽的变化

00:37:30.266 --> 00:37:31.876 A:middle
并正确地选择

00:37:31.876 --> 00:37:32.816 A:middle
使用哪种变量

00:37:33.756 --> 00:37:36.436 A:middle
我们在这里所做的一切

00:37:36.436 --> 00:37:38.066 A:middle
对于用户来说都是不可见的

00:37:38.066 --> 00:37:39.896 A:middle
它只会让流播放得更好

00:37:41.156 --> 00:37:43.516 A:middle
好的 让我们来看一个常见的问题

00:37:43.516 --> 00:37:45.546 A:middle
你的流正在播放

00:37:45.546 --> 00:37:46.876 A:middle
但你没有在快进中看到任何图像

00:37:46.876 --> 00:37:48.186 A:middle
或者 你没有在搓擦条中

00:37:48.186 --> 00:37:49.496 A:middle
看到缩略图

00:37:50.826 --> 00:37:52.656 A:middle
这是 Apple TV 的搓擦条

00:37:53.616 --> 00:37:55.356 A:middle
你可以看到你的内容有多长

00:37:55.596 --> 00:37:56.586 A:middle
你也可以看到你在内容中的位置

00:37:56.586 --> 00:37:57.826 A:middle
以及你想去的位置

00:37:58.756 --> 00:37:59.976 A:middle
为了得到缩略图

00:37:59.976 --> 00:38:02.126 A:middle
你需要给我们一个

00:37:59.976 --> 00:38:02.126 A:middle
你需要给我们一个

00:38:02.126 --> 00:38:04.316 A:middle
I-frame 播放列表

00:38:04.356 --> 00:38:06.226 A:middle
I-frame 播放列表允许我们

00:38:06.506 --> 00:38:09.166 A:middle
在你的 iPad

00:38:09.206 --> 00:38:10.646 A:middle
或 iPhone 上提供

00:38:10.646 --> 00:38:13.526 A:middle
快进和回放中的图像

00:38:14.046 --> 00:38:15.616 A:middle
为了讨论

00:38:15.616 --> 00:38:17.526 A:middle
I-frame 播放列表

00:38:17.616 --> 00:38:18.986 A:middle
我们首先需要讨论一下

00:38:18.986 --> 00:38:19.716 A:middle
普通视频

00:38:20.516 --> 00:38:22.286 A:middle
这是一种在 HLS 中

00:38:22.866 --> 00:38:24.406 A:middle
可视化常规视频片段的方法

00:38:25.076 --> 00:38:26.796 A:middle
每个段都有

00:38:26.796 --> 00:38:28.136 A:middle
若干帧的内容

00:38:28.136 --> 00:38:30.266 A:middle
所以它有一个总帧数

00:38:30.266 --> 00:38:31.776 A:middle
也有一个特定的平均比特率

00:38:31.776 --> 00:38:34.346 A:middle
这个比特率在每个片段中

00:38:34.866 --> 00:38:36.176 A:middle
都是不同的

00:38:36.516 --> 00:38:38.586 A:middle
由于压缩技术

00:38:38.586 --> 00:38:40.096 A:middle
视频中的大多数帧

00:38:40.096 --> 00:38:41.326 A:middle
只能依照其他帧

00:38:41.326 --> 00:38:42.756 A:middle
进行解码

00:38:43.676 --> 00:38:45.436 A:middle
但是 I-frame

00:38:45.436 --> 00:38:47.056 A:middle
其中的 I 代表的是

00:38:47.056 --> 00:38:48.536 A:middle
内部编码的帧

00:38:48.536 --> 00:38:49.876 A:middle
它们是可独立解码的帧

00:38:49.876 --> 00:38:52.126 A:middle
也是允许其他帧进行解码的基本帧

00:38:52.996 --> 00:38:54.846 A:middle
正如我在这里展示的

00:38:54.846 --> 00:38:56.716 A:middle
在一个片段中

00:38:56.716 --> 00:38:58.696 A:middle
你可能有多个 I-frame

00:38:58.696 --> 00:39:02.836 A:middle
并且 I-frame 不需要

00:38:58.696 --> 00:39:02.836 A:middle
并且 I-frame 不需要

00:39:02.836 --> 00:39:03.826 A:middle
以固定间隔排列

00:39:05.676 --> 00:39:07.366 A:middle
I-frame 播放列表

00:39:07.366 --> 00:39:09.036 A:middle
是一个只指向 I-frame 内容的

00:39:09.036 --> 00:39:10.806 A:middle
播放列表

00:39:10.806 --> 00:39:12.926 A:middle
也就是说 它只下载 I-frame 数据

00:39:13.236 --> 00:39:14.786 A:middle
当我们讨论

00:39:14.786 --> 00:39:16.016 A:middle
一个 I-frame 的时长时

00:39:16.016 --> 00:39:17.536 A:middle
我们指的是从这个 I-frame

00:39:17.536 --> 00:39:19.626 A:middle
到下一个 I-frame 的时间

00:39:20.456 --> 00:39:21.596 A:middle
我已经将这个特殊的 I-frame 组

00:39:21.596 --> 00:39:23.956 A:middle
从正常的内容中

00:39:23.956 --> 00:39:24.976 A:middle
提取出来了

00:39:24.976 --> 00:39:26.986 A:middle
但是你也可以制作一个

00:39:26.986 --> 00:39:28.156 A:middle
所谓高密度的

00:39:28.156 --> 00:39:29.066 A:middle
I-frame 播放列表

00:39:29.996 --> 00:39:31.376 A:middle
你不能仅仅从

00:39:31.376 --> 00:39:32.886 A:middle
正常内容中将它提取出来

00:39:32.886 --> 00:39:33.696 A:middle
相反 你需要刻意地

00:39:33.946 --> 00:39:35.696 A:middle
用间隔更加均匀的

00:39:35.696 --> 00:39:36.846 A:middle
I-frame 来制作

00:39:37.516 --> 00:39:38.756 A:middle
这样会更有效

00:39:38.756 --> 00:39:40.716 A:middle
它允许我们在快进的时候

00:39:40.716 --> 00:39:42.736 A:middle
为你提供一个更加平滑的体验

00:39:44.376 --> 00:39:45.576 A:middle
现在 我给你们看一个

00:39:45.576 --> 00:39:47.866 A:middle
没有添加 I-frame 的主播放列表

00:39:49.236 --> 00:39:51.956 A:middle
请注意 I-frame 播放列表

00:39:51.956 --> 00:39:53.816 A:middle
与普通播放列表的标签

00:39:53.816 --> 00:39:56.336 A:middle
几乎完全相同

00:39:56.946 --> 00:39:58.656 A:middle
唯一的区别是

00:39:58.656 --> 00:39:59.906 A:middle
I-frame 播放列表不支持

00:39:59.906 --> 00:40:01.786 A:middle
帧速率这个属性

00:39:59.906 --> 00:40:01.786 A:middle
帧速率这个属性

00:40:02.096 --> 00:40:02.886 A:middle
因为在那个上下文中

00:40:02.886 --> 00:40:04.136 A:middle
它没有任何意义

00:40:04.986 --> 00:40:06.166 A:middle
对于你的 I-frame 播放列表而言

00:40:06.166 --> 00:40:07.936 A:middle
一个好的测试

00:40:07.936 --> 00:40:08.746 A:middle
是尝试直接播放它

00:40:09.346 --> 00:40:11.376 A:middle
也就是说

00:40:11.376 --> 00:40:13.116 A:middle
将 I-frame 播放列表的 URI

00:40:13.116 --> 00:40:13.846 A:middle
粘贴到 Safari 浏览器中

00:40:14.316 --> 00:40:16.496 A:middle
它应该以 1 倍的速度播放

00:40:16.496 --> 00:40:18.136 A:middle
你会看到 I-frame

00:40:18.136 --> 00:40:20.916 A:middle
一个接一个地

00:40:20.916 --> 00:40:22.216 A:middle
在一个缓慢变化的序列中显示

00:40:23.596 --> 00:40:24.886 A:middle
现在我还要指出

00:40:24.886 --> 00:40:26.266 A:middle
比特率方面的区别

00:40:27.036 --> 00:40:28.516 A:middle
请注意 I-frame 的比特率

00:40:28.516 --> 00:40:30.796 A:middle
比正常的比特率要低得多

00:40:30.936 --> 00:40:33.806 A:middle
应该一直是这样的

00:40:34.256 --> 00:40:36.326 A:middle
谈到比特率

00:40:36.616 --> 00:40:39.366 A:middle
我们已经在 HLS 规范中

00:40:39.436 --> 00:40:40.766 A:middle
定义了如何计算

00:40:40.766 --> 00:40:41.616 A:middle
峰值比特率

00:40:42.396 --> 00:40:43.976 A:middle
一定要这样做

00:40:43.976 --> 00:40:44.986 A:middle
否则你可能会得到

00:40:45.086 --> 00:40:46.616 A:middle
片段超过

00:40:46.616 --> 00:40:49.436 A:middle
指定带宽的错误

00:40:50.026 --> 00:40:52.306 A:middle
现在 我们不再讨论视频

00:40:52.306 --> 00:40:54.986 A:middle
将话题转向音频

00:40:55.426 --> 00:40:57.046 A:middle
对此最常见的问题是

00:40:57.046 --> 00:40:58.606 A:middle
我如何支持多种语言

00:40:59.306 --> 00:41:00.986 A:middle
界面是这个样子

00:40:59.306 --> 00:41:00.986 A:middle
界面是这个样子

00:41:01.296 --> 00:41:03.846 A:middle
我有一个语言列表

00:41:03.846 --> 00:41:05.146 A:middle
用户可以从中选择一种语言

00:41:06.336 --> 00:41:08.786 A:middle
这是一个样本播放列表

00:41:09.036 --> 00:41:10.746 A:middle
我们所做的就是

00:41:10.746 --> 00:41:13.836 A:middle
在每个视频变量上

00:41:13.836 --> 00:41:17.356 A:middle
添加一个

00:41:17.356 --> 00:41:19.976 A:middle
音频属性

00:41:19.976 --> 00:41:21.966 A:middle
我们也添加了

00:41:21.966 --> 00:41:22.716 A:middle
带有组 ID 的媒体标签

00:41:23.126 --> 00:41:27.646 A:middle
组 ID 是一个标签

00:41:27.646 --> 00:41:30.496 A:middle
它允许你将音频展示

00:41:30.596 --> 00:41:32.876 A:middle
与视频变量关联起来

00:41:33.546 --> 00:41:34.996 A:middle
请注意这两个

00:41:34.996 --> 00:41:37.266 A:middle
音频版本之间

00:41:37.266 --> 00:41:38.316 A:middle
有很多不同之处

00:41:38.846 --> 00:41:40.266 A:middle
就像对待你的变量一样 我们希望你

00:41:40.266 --> 00:41:42.196 A:middle
尽可能详细地

00:41:42.196 --> 00:41:43.726 A:middle
描述你的媒体

00:41:44.626 --> 00:41:46.216 A:middle
在媒体标签上

00:41:46.216 --> 00:41:47.396 A:middle
有两个属性

00:41:47.396 --> 00:41:49.446 A:middle
令人们困扰

00:41:49.446 --> 00:41:51.096 A:middle
那就是 Default 和 Autoselect

00:41:52.306 --> 00:41:56.376 A:middle
好的 Autoselect 指的是

00:41:56.376 --> 00:41:57.426 A:middle
播放器中的媒体选择代码

00:41:57.426 --> 00:42:00.576 A:middle
可以在用户没有

00:41:57.426 --> 00:42:00.576 A:middle
可以在用户没有

00:42:00.576 --> 00:42:02.596 A:middle
任何特殊输入的情况下

00:42:02.596 --> 00:42:03.586 A:middle
进行选择

00:42:04.316 --> 00:42:05.836 A:middle
大多数情况下

00:42:05.836 --> 00:42:07.436 A:middle
你会将 Autoselect 设置为 yes

00:42:08.506 --> 00:42:10.066 A:middle
如果你没有设置

00:42:10.066 --> 00:42:11.156 A:middle
用户将不得不做出一个明确的选择

00:42:11.156 --> 00:42:13.546 A:middle
从而进行视频的播放

00:42:15.276 --> 00:42:17.496 A:middle
另一方面 Default 是指

00:42:17.496 --> 00:42:19.496 A:middle
当用户没有提供首选语言时

00:42:19.496 --> 00:42:20.916 A:middle
所进行的选择

00:42:22.216 --> 00:42:23.406 A:middle
一般来说

00:42:23.406 --> 00:42:25.566 A:middle
它应该是你的视频的原始语言

00:42:26.066 --> 00:42:27.186 A:middle
并且 Default

00:42:27.186 --> 00:42:28.986 A:middle
必须是可自动选择的

00:42:28.986 --> 00:42:30.436 A:middle
因为系统必须进行选择

00:42:31.136 --> 00:42:33.696 A:middle
这里的 Default

00:42:33.696 --> 00:42:35.326 A:middle
与默认的视频变量没有关系

00:42:35.326 --> 00:42:38.426 A:middle
它是演示组中的默认值

00:42:39.916 --> 00:42:43.166 A:middle
好的 我有多种语言

00:42:43.166 --> 00:42:44.496 A:middle
但我真的想要一些

00:42:44.566 --> 00:42:45.496 A:middle
多声道音频

00:42:45.496 --> 00:42:47.186 A:middle
我有 5.1 声道音频

00:42:48.126 --> 00:42:50.086 A:middle
好的 首先要记住的是

00:42:50.086 --> 00:42:52.126 A:middle
并不是所有的设备

00:42:52.126 --> 00:42:53.156 A:middle
都能播放多声道音频

00:42:53.516 --> 00:42:56.606 A:middle
你还需要为用户提供

00:42:56.606 --> 00:42:58.236 A:middle
立体声选项

00:42:58.826 --> 00:43:00.066 A:middle
你应该把这件事看成

00:42:58.826 --> 00:43:00.066 A:middle
你应该把这件事看成

00:43:00.066 --> 00:43:01.676 A:middle
填满一个矩阵

00:43:02.256 --> 00:43:04.516 A:middle
你需要拥有

00:43:04.676 --> 00:43:05.796 A:middle
涵盖每种语言的每种格式

00:43:07.456 --> 00:43:10.296 A:middle
你可能会说 好吧

00:43:10.296 --> 00:43:14.076 A:middle
我没有法语版多声道的原版音频

00:43:14.076 --> 00:43:16.206 A:middle
我没有法语版的 5.1 声道音频

00:43:16.396 --> 00:43:17.616 A:middle
在这种情况下

00:43:17.616 --> 00:43:19.936 A:middle
你仍应该把你的立体声内容

00:43:19.936 --> 00:43:22.546 A:middle
放到那个组中

00:43:23.786 --> 00:43:25.396 A:middle
你需要填满

00:43:25.396 --> 00:43:26.906 A:middle
在这个矩阵中的每个槽

00:43:27.586 --> 00:43:31.116 A:middle
我们再来看一个播放列表

00:43:31.256 --> 00:43:34.666 A:middle
这个播放列表

00:43:34.666 --> 00:43:36.626 A:middle
和之前的例子一样

00:43:36.626 --> 00:43:38.256 A:middle
只是我改变了组 ID

00:43:38.256 --> 00:43:39.566 A:middle
而且这样没有问题

00:43:39.566 --> 00:43:41.426 A:middle
因为组 ID 只是用来

00:43:41.426 --> 00:43:43.686 A:middle
连接音频

00:43:43.686 --> 00:43:44.806 A:middle
和视频变量的

00:43:45.406 --> 00:43:48.356 A:middle
我们有了多声道组

00:43:48.356 --> 00:43:50.396 A:middle
然后我用法语

00:43:50.396 --> 00:43:52.956 A:middle
把它设置为立体声

00:43:52.956 --> 00:43:54.986 A:middle
在这你可以看到如何做到这点

00:43:55.566 --> 00:43:58.146 A:middle
你需要做的是确保

00:43:58.146 --> 00:44:00.306 A:middle
编解码器标签指示了

00:43:58.146 --> 00:44:00.306 A:middle
编解码器标签指示了

00:44:00.716 --> 00:44:04.096 A:middle
所有可能出现在该演示组中的

00:44:04.096 --> 00:44:07.766 A:middle
不同的编解码器

00:44:08.086 --> 00:44:09.126 A:middle
请注意 我们需要复制

00:44:09.126 --> 00:44:11.506 A:middle
我们的视频变量

00:44:12.196 --> 00:44:13.986 A:middle
现在我们有两个条目

00:44:13.986 --> 00:44:16.186 A:middle
一个条目指向其中一个音频组

00:44:16.536 --> 00:44:17.416 A:middle
另一个条目

00:44:17.416 --> 00:44:18.256 A:middle
则指向另一个音频组

00:44:18.476 --> 00:44:19.286 A:middle
在后面的幻灯片中

00:44:19.286 --> 00:44:21.596 A:middle
你会再次看到这种重复

00:44:22.936 --> 00:44:25.856 A:middle
假设我有几个不同音频比特率的音频

00:44:25.856 --> 00:44:27.566 A:middle
但不是 5.1 声道的

00:44:27.566 --> 00:44:30.616 A:middle
我有一些高比特率音频

00:44:30.616 --> 00:44:32.176 A:middle
而且我知道我需要

00:44:32.176 --> 00:44:35.476 A:middle
为一些用户提供

00:44:35.786 --> 00:44:36.326 A:middle
低比特率音频

00:44:36.996 --> 00:44:38.566 A:middle
所以在展示方面

00:44:38.736 --> 00:44:41.386 A:middle
和我们之前所谈到的类似

00:44:41.596 --> 00:44:42.636 A:middle
我们仍然需要一个矩阵

00:44:42.636 --> 00:44:43.676 A:middle
并用每种语言

00:44:44.046 --> 00:44:45.996 A:middle
来填充每一个比特率变量

00:44:47.126 --> 00:44:48.606 A:middle
由于这两者都是 AAC

00:44:48.606 --> 00:44:50.266 A:middle
我们可以认为它们是相同格式的

00:44:50.706 --> 00:44:52.426 A:middle
如果我想要另一种格式

00:44:52.886 --> 00:44:55.556 A:middle
我所做的就是

00:44:55.556 --> 00:44:56.606 A:middle
扩展这个矩阵

00:44:57.096 --> 00:44:58.306 A:middle
我想提出一点

00:44:58.306 --> 00:44:59.256 A:middle
我一直说语言是为了便利

00:44:59.256 --> 00:45:00.296 A:middle
但是你们应该记住

00:44:59.256 --> 00:45:00.296 A:middle
但是你们应该记住

00:45:00.296 --> 00:45:01.876 A:middle
这里涉及的

00:45:01.876 --> 00:45:03.906 A:middle
唯一的属性是名称属性

00:45:04.466 --> 00:45:06.616 A:middle
而不是语言属性

00:45:07.056 --> 00:45:09.286 A:middle
在这个播放列表中

00:45:09.286 --> 00:45:10.726 A:middle
我不会给你们展示媒体标签

00:45:10.726 --> 00:45:11.776 A:middle
但我将展示

00:45:11.776 --> 00:45:13.876 A:middle
带有音频组名称的视频变量

00:45:14.416 --> 00:45:16.426 A:middle
你需要将你的低比特率视频

00:45:16.426 --> 00:45:18.006 A:middle
与你的低比特率音频相关联

00:45:18.006 --> 00:45:21.476 A:middle
同时将高比特率视频

00:45:21.476 --> 00:45:22.936 A:middle
与高比特率音频相关联

00:45:23.986 --> 00:45:26.346 A:middle
你总是需要将它们像这样分开

00:45:27.036 --> 00:45:29.316 A:middle
如果你有一套

00:45:29.316 --> 00:45:30.556 A:middle
配有低比特率音频的

00:45:30.556 --> 00:45:31.866 A:middle
完整视频变量

00:45:31.866 --> 00:45:33.716 A:middle
和一套配有高比特率音频的

00:45:33.716 --> 00:45:35.016 A:middle
完整视频变量

00:45:35.016 --> 00:45:36.156 A:middle
那么这种情况是完全错误的

00:45:36.156 --> 00:45:37.786 A:middle
因为如果你这样做

00:45:37.786 --> 00:45:39.876 A:middle
你就会在

00:45:39.876 --> 00:45:41.816 A:middle
高视频比特率和低音频比特率变量

00:45:41.816 --> 00:45:42.726 A:middle
之间跳跃

00:45:43.236 --> 00:45:49.376 A:middle
在这里 我添加了 AC3 内容

00:45:50.006 --> 00:45:51.876 A:middle
再次注意

00:45:51.876 --> 00:45:54.446 A:middle
我们必须复制我们的视频变量条目

00:45:54.446 --> 00:45:56.176 A:middle
但是它们指向

00:45:56.176 --> 00:45:57.346 A:middle
相同的视频播放列表

00:45:58.196 --> 00:45:59.926 A:middle
也要注意视频变量中的

00:45:59.926 --> 00:46:02.536 A:middle
比特率也在变化

00:45:59.926 --> 00:46:02.536 A:middle
比特率也在变化

00:46:02.826 --> 00:46:03.926 A:middle
这是因为

00:46:03.926 --> 00:46:06.486 A:middle
与视频变量

00:46:06.486 --> 00:46:07.496 A:middle
相关的比特率

00:46:07.496 --> 00:46:08.966 A:middle
是视频本身

00:46:08.966 --> 00:46:11.806 A:middle
以及任何相关展示的比特率

00:46:12.406 --> 00:46:16.056 A:middle
现在让我们

00:46:16.056 --> 00:46:18.406 A:middle
再次讨论一下视频

00:46:18.406 --> 00:46:19.896 A:middle
因为我想要具有多个视频格式

00:46:19.896 --> 00:46:22.756 A:middle
我想要 HEVC

00:46:23.186 --> 00:46:25.366 A:middle
这样我就可以以同样的比特率

00:46:25.366 --> 00:46:26.816 A:middle
获得更好的质量

00:46:26.816 --> 00:46:28.196 A:middle
或者我想要杜比视界（Dolby Vision）

00:46:28.196 --> 00:46:29.266 A:middle
这样我就可以获得 HDR 内容

00:46:29.806 --> 00:46:33.936 A:middle
同样 我们需要填一个矩阵

00:46:34.116 --> 00:46:35.556 A:middle
在这种情况下

00:46:35.556 --> 00:46:37.886 A:middle
无论我们选择哪种视频格式

00:46:37.886 --> 00:46:39.406 A:middle
我们都需要设置一组

00:46:39.496 --> 00:46:40.136 A:middle
合理的变量

00:46:40.626 --> 00:46:42.576 A:middle
所以这里的行是基于质量的层

00:46:42.576 --> 00:46:46.006 A:middle
我们需要

00:46:46.006 --> 00:46:47.906 A:middle
用每一层中每一个格式的变量

00:46:47.906 --> 00:46:49.466 A:middle
来填充矩阵

00:46:50.846 --> 00:46:52.956 A:middle
我们不需要

00:46:52.956 --> 00:46:57.496 A:middle
在旧格式中填写

00:46:57.496 --> 00:46:58.686 A:middle
更高的层

00:46:58.686 --> 00:46:59.906 A:middle
你可以节省一下

00:47:00.336 --> 00:47:02.876 A:middle
但与音频类似

00:47:02.876 --> 00:47:04.586 A:middle
并不是所有设备

00:47:04.586 --> 00:47:06.516 A:middle
都支持杜比视界（Dolby Vision）等功能

00:47:06.516 --> 00:47:10.476 A:middle
因此你需要提供一个 H.264 变体作为备用

00:47:11.476 --> 00:47:12.586 A:middle
有一个主要的点需要记住

00:47:12.586 --> 00:47:13.806 A:middle
在每一列中

00:47:13.806 --> 00:47:16.066 A:middle
你都需要让比特率形成一个良好的递进

00:47:16.616 --> 00:47:19.266 A:middle
这个播放列表

00:47:19.266 --> 00:47:20.876 A:middle
有点太大了

00:47:20.876 --> 00:47:21.946 A:middle
不能在一张幻灯片上显示

00:47:21.946 --> 00:47:22.806 A:middle
所以我要把它分成三张幻灯片

00:47:23.276 --> 00:47:25.686 A:middle
这一部分向你展示 H.264 的变量

00:47:26.336 --> 00:47:29.946 A:middle
在这张幻灯片中 我们展示了 HEVC 变量

00:47:30.026 --> 00:47:31.906 A:middle
请注意 任何变量

00:47:31.906 --> 00:47:34.206 A:middle
都有其指向的

00:47:34.206 --> 00:47:36.046 A:middle
视频播放列表

00:47:36.046 --> 00:47:37.926 A:middle
这是我们的杜比视界（Dolby Vision）变量

00:47:37.926 --> 00:47:40.016 A:middle
这里的一切变量

00:47:40.016 --> 00:47:40.956 A:middle
都有相同的音频组

00:47:41.336 --> 00:47:42.976 A:middle
如果我们想要

00:47:42.976 --> 00:47:45.216 A:middle
含有多种音频格式

00:47:45.216 --> 00:47:47.146 A:middle
我们需要为每种音频格式

00:47:47.146 --> 00:47:49.466 A:middle
复制视频变量

00:47:49.796 --> 00:47:51.326 A:middle
同样 这不会增加

00:47:51.326 --> 00:47:53.206 A:middle
视频播放列表的数量

00:47:53.646 --> 00:47:54.566 A:middle
只会增加

00:47:54.566 --> 00:47:56.666 A:middle
播放列表中条目的数量

00:47:57.696 --> 00:48:00.016 A:middle
好的 我们几乎完成了

00:47:57.696 --> 00:48:00.016 A:middle
好的 我们几乎完成了

00:48:00.436 --> 00:48:02.366 A:middle
最后一点关于一般字幕

00:48:02.366 --> 00:48:03.316 A:middle
和可隐藏式字幕

00:48:03.316 --> 00:48:05.946 A:middle
你可能可以猜到

00:48:05.946 --> 00:48:06.536 A:middle
它是如何工作的

00:48:07.316 --> 00:48:09.676 A:middle
我们的变量

00:48:10.206 --> 00:48:12.316 A:middle
需要指向我们正在使用的

00:48:12.446 --> 00:48:13.616 A:middle
一般字幕和可隐藏式字幕

00:48:14.096 --> 00:48:15.946 A:middle
所以我们需要

00:48:15.946 --> 00:48:18.686 A:middle
为视频变量添加一个属性

00:48:18.686 --> 00:48:20.166 A:middle
我们也需要描述这个展示

00:48:20.826 --> 00:48:24.146 A:middle
请注意可隐藏式字幕的展示

00:48:24.146 --> 00:48:25.456 A:middle
没有 URI 属性

00:48:26.526 --> 00:48:28.456 A:middle
这告诉系统

00:48:28.456 --> 00:48:30.396 A:middle
可隐藏式字幕的数据

00:48:30.616 --> 00:48:33.516 A:middle
存在于在视频内容中

00:48:33.516 --> 00:48:34.396 A:middle
而不是在单独的播放列表中

00:48:34.946 --> 00:48:38.216 A:middle
那么没错

00:48:38.216 --> 00:48:38.816 A:middle
“正确的做法是

00:48:38.816 --> 00:48:39.456 A:middle
把一切都交给我们”

00:48:39.616 --> 00:48:41.666 A:middle
现在你应该更加明白我的意思了

00:48:42.476 --> 00:48:44.836 A:middle
好的 请允许我快速地总结一下

00:48:44.836 --> 00:48:46.186 A:middle
我们今天的演讲

00:48:47.036 --> 00:48:48.236 A:middle
Emil 谈到了

00:48:48.236 --> 00:48:49.976 A:middle
关键性能指标

00:48:49.976 --> 00:48:51.406 A:middle
关于如何获取或计算这些值

00:48:51.406 --> 00:48:52.156 A:middle
以及它们的含义

00:48:52.776 --> 00:48:55.246 A:middle
Zhenheng 谈到了

00:48:55.246 --> 00:48:57.476 A:middle
减少启动时间的方法

00:48:57.476 --> 00:49:00.426 A:middle
以及如何解决

00:48:57.476 --> 00:49:00.426 A:middle
以及如何解决

00:49:00.426 --> 00:49:01.206 A:middle
卡顿和其他错误

00:49:01.336 --> 00:49:02.896 A:middle
我则谈到了

00:49:02.896 --> 00:49:03.756 A:middle
如何制作主播放列表

00:49:04.216 --> 00:49:06.156 A:middle
我想简单地提一下

00:49:06.156 --> 00:49:07.586 A:middle
HLS 验证工具

00:49:08.266 --> 00:49:10.466 A:middle
它们可以发现

00:49:10.466 --> 00:49:12.316 A:middle
很多与主播放列表和媒体播放列表有关的问题

00:49:12.566 --> 00:49:14.446 A:middle
值得你花时间去使用

00:49:15.616 --> 00:49:17.816 A:middle
一如既往地 你可以从

00:49:17.816 --> 00:49:20.316 A:middle
WWDC App 或者

00:49:20.366 --> 00:49:21.496 A:middle
开发者网站中获得更多信息

00:49:21.946 --> 00:49:22.906 A:middle
这就是我们今天要讲的全部内容

00:49:23.136 --> 00:49:24.706 A:middle
非常感谢各位的关注和时间

00:49:25.508 --> 00:49:27.508 A:middle
[ 掌声 ]
