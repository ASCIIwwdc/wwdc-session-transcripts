WEBVTT

00:00:07.516 --> 00:00:17.156 A:middle
[ 音乐 ]

00:00:17.656 --> 00:00:18.916 A:middle
&gt;&gt; 大家早上好

00:00:19.016 --> 00:00:20.436 A:middle
[ 掌声 ]

00:00:20.436 --> 00:00:23.206 A:middle
哇 谢谢

00:00:24.616 --> 00:00:26.046 A:middle
欢迎来到升级版的深色模式

00:00:26.696 --> 00:00:27.786 A:middle
我是 Matt Jacobson

00:00:27.786 --> 00:00:29.336 A:middle
我的同事 Jeff Nadeau

00:00:29.336 --> 00:00:30.366 A:middle
一会儿也会上台来

00:00:30.966 --> 00:00:33.286 A:middle
我们都是 Apple Cocoa 框架团队的工程师

00:00:34.516 --> 00:00:36.576 A:middle
我今天非常激动能够

00:00:36.576 --> 00:00:39.076 A:middle
与你们谈谈 Mojave 里

00:00:39.076 --> 00:00:40.086 A:middle
超赞的深色模式

00:00:40.666 --> 00:00:45.976 A:middle
你们已经

00:00:45.976 --> 00:00:48.326 A:middle
从昨天的介绍会上

00:00:48.326 --> 00:00:50.266 A:middle
了解了如何

00:00:50.266 --> 00:00:51.936 A:middle
将你的 App 改为深色模式

00:00:52.526 --> 00:00:54.356 A:middle
比如在 macOS 10.14 SDK

00:00:54.356 --> 00:00:55.456 A:middle
上对 App 进行重建

00:00:55.456 --> 00:00:58.676 A:middle
使用动态色彩

00:00:58.676 --> 00:01:00.966 A:middle
来代替静态或硬编码色彩

00:00:58.676 --> 00:01:00.966 A:middle
来代替静态或硬编码色彩

00:01:01.916 --> 00:01:04.796 A:middle
正确使用模板图像和素材

00:01:05.456 --> 00:01:07.516 A:middle
最重要的是

00:01:07.516 --> 00:01:09.876 A:middle
利用 Xcode 10 的新功能

00:01:09.876 --> 00:01:11.966 A:middle
来定义深色模式专用的

00:01:11.966 --> 00:01:14.216 A:middle
自定义颜色和图像素材

00:01:15.176 --> 00:01:17.636 A:middle
如果你需要再回顾一下

00:01:17.636 --> 00:01:18.726 A:middle
这些话题 那么我十分推荐

00:01:18.726 --> 00:01:20.236 A:middle
你之后再去

00:01:20.236 --> 00:01:22.026 A:middle
看看昨天介绍会的视频

00:01:24.486 --> 00:01:27.296 A:middle
只需利用那些技巧

00:01:27.296 --> 00:01:28.686 A:middle
大多数 UI 在深色模式中

00:01:28.716 --> 00:01:29.266 A:middle
就会看起来很棒

00:01:29.586 --> 00:01:31.386 A:middle
其实 我们的一些系统 App

00:01:31.386 --> 00:01:33.326 A:middle
并不需要额外的改变 这非常好

00:01:34.636 --> 00:01:36.016 A:middle
但在某些情况下

00:01:36.016 --> 00:01:37.436 A:middle
只凭那些技巧还不够

00:01:37.756 --> 00:01:38.626 A:middle
这就是我们

00:01:38.626 --> 00:01:39.686 A:middle
在这场会上要讲的内容

00:01:43.696 --> 00:01:46.956 A:middle
今天我们将涵盖六个主要的方面

00:01:47.716 --> 00:01:49.806 A:middle
首先是外观系统

00:01:50.266 --> 00:01:51.826 A:middle
它是怎样运作的

00:01:51.826 --> 00:01:53.596 A:middle
要如何在自定义视图里使用它

00:01:54.716 --> 00:01:57.236 A:middle
第二是素材 什么是素材

00:01:57.236 --> 00:01:59.406 A:middle
如何才能在你的 UI 里

00:01:59.406 --> 00:02:01.836 A:middle
充分利用它

00:01:59.406 --> 00:02:01.836 A:middle
充分利用它

00:02:02.006 --> 00:02:03.296 A:middle
接下来的部分由 Jeff 介绍

00:02:03.296 --> 00:02:05.296 A:middle
他将谈谈 “Vibrant Blending（动态混合）”

00:02:05.296 --> 00:02:06.716 A:middle
这种方法很棒

00:02:06.716 --> 00:02:08.446 A:middle
会让你的视图看起来更好

00:02:09.696 --> 00:02:11.576 A:middle
他还会讲到用一些

00:02:11.576 --> 00:02:13.336 A:middle
叫做背景风格的东西

00:02:13.446 --> 00:02:14.236 A:middle
对选择做出正确的反应

00:02:15.526 --> 00:02:17.096 A:middle
最后 他会综合起来

00:02:17.526 --> 00:02:19.376 A:middle
说说如何

00:02:19.596 --> 00:02:21.036 A:middle
当你在旧的 macOS 版本上

00:02:21.036 --> 00:02:22.916 A:middle
使用你的 App 时

00:02:22.916 --> 00:02:25.006 A:middle
仍然能支持深色模式

00:02:25.006 --> 00:02:26.956 A:middle
还有一些小技巧和方法

00:02:27.026 --> 00:02:28.796 A:middle
来帮你改进 App 的深色模式

00:02:30.346 --> 00:02:30.966 A:middle
好了

00:02:30.966 --> 00:02:33.006 A:middle
我们开始吧

00:02:33.146 --> 00:02:36.296 A:middle
在 Mojave 中 你的 App

00:02:36.296 --> 00:02:39.106 A:middle
无论在浅色还是深色模式都要看起来很棒

00:02:40.026 --> 00:02:41.626 A:middle
这个时候你就要

00:02:41.626 --> 00:02:42.726 A:middle
用到一个叫做

00:02:42.916 --> 00:02:44.006 A:middle
NSAppearance 的东西

00:02:45.186 --> 00:02:47.396 A:middle
NSAppearance 是整个 Cocoa 都在

00:02:47.596 --> 00:02:49.906 A:middle
使用的主题系统

00:02:49.906 --> 00:02:51.966 A:middle
关键是你只需要

00:02:51.966 --> 00:02:53.416 A:middle
保持一个单一的视图层级

00:02:53.416 --> 00:02:55.066 A:middle
NSAppearance 就会让你的 App

00:02:55.066 --> 00:02:57.536 A:middle
在浅色和深色模式中都很好看

00:02:59.186 --> 00:03:01.956 A:middle
好了 除了用作深色模式的核心外

00:02:59.186 --> 00:03:01.956 A:middle
好了 除了用作深色模式的核心外

00:03:01.956 --> 00:03:03.976 A:middle
我们已经使用

00:03:03.976 --> 00:03:05.426 A:middle
NSAppearance 好几年了

00:03:05.426 --> 00:03:08.316 A:middle
同时它还是一些特性的基础

00:03:08.316 --> 00:03:10.636 A:middle
如 macOS 的高对比度模式

00:03:10.636 --> 00:03:12.376 A:middle
以及为触控栏

00:03:12.616 --> 00:03:14.266 A:middle
这个出色的硬件

00:03:14.266 --> 00:03:15.266 A:middle
设计的 UI

00:03:16.116 --> 00:03:20.056 A:middle
我们先前已经有了一个主要外观

00:03:20.196 --> 00:03:21.726 A:middle
为 Aqua 窗口

00:03:21.726 --> 00:03:23.546 A:middle
准备的浅色外观

00:03:23.546 --> 00:03:24.226 A:middle
叫做 Aqua

00:03:24.816 --> 00:03:26.336 A:middle
当然 在 10.14 里

00:03:26.336 --> 00:03:27.806 A:middle
我们要引入一种新的外观

00:03:27.806 --> 00:03:29.636 A:middle
用于深色模式下的 Aqua 窗口

00:03:30.166 --> 00:03:30.966 A:middle
叫做 darkAqua

00:03:32.346 --> 00:03:33.916 A:middle
这些对象包括所有

00:03:33.916 --> 00:03:35.556 A:middle
视图绘制所需的素材

00:03:36.336 --> 00:03:38.036 A:middle
因此 只要你使用

00:03:38.036 --> 00:03:39.886 A:middle
系统动态色彩

00:03:39.886 --> 00:03:42.226 A:middle
标准效果 或已命名的图像

00:03:42.226 --> 00:03:43.606 A:middle
甚至只是标准的 Cocoa 控件

00:03:43.786 --> 00:03:45.746 A:middle
这些对象都会为你提供素材

00:03:46.166 --> 00:03:49.436 A:middle
只要你关联了 macOS 10.14 SDK

00:03:49.436 --> 00:03:51.486 A:middle
AppKit 就会自动地

00:03:51.486 --> 00:03:53.646 A:middle
基于系统偏好设置里

00:03:53.646 --> 00:03:55.136 A:middle
用户对浅色或深色的选择

00:03:55.136 --> 00:03:56.796 A:middle
为你所有的视图和窗口

00:03:56.796 --> 00:03:59.326 A:middle
提供相应外观

00:04:00.046 --> 00:04:02.056 A:middle
这是我们可爱的

00:04:02.356 --> 00:04:03.786 A:middle
《Chameleon Wrangler》App

00:04:03.896 --> 00:04:06.916 A:middle
是 Rachel 和 Taylor

00:04:06.916 --> 00:04:08.646 A:middle
在之前的介绍会中创建的

00:04:08.776 --> 00:04:10.096 A:middle
你可以看到 如果我们将它与 macOS 10.14

00:04:10.096 --> 00:04:13.046 A:middle
SDK 关联  AppKit 就会开始运行

00:04:13.106 --> 00:04:14.506 A:middle
并自动给它设置

00:04:14.506 --> 00:04:15.526 A:middle
darkAqua 外观

00:04:16.676 --> 00:04:18.196 A:middle
这样很好 但如果

00:04:18.196 --> 00:04:20.005 A:middle
我们想要改变外观呢

00:04:20.296 --> 00:04:22.106 A:middle
比如说 我们想要改变

00:04:22.676 --> 00:04:25.986 A:middle
这个笔记的视图

00:04:26.736 --> 00:04:29.136 A:middle
在深色的外观下

00:04:29.136 --> 00:04:30.946 A:middle
我们也许想要让

00:04:30.946 --> 00:04:32.636 A:middle
笔记的视图仍然是浅色的

00:04:33.856 --> 00:04:37.146 A:middle
这时 你就可以利用

00:04:37.146 --> 00:04:38.786 A:middle
NSAppearanceCustomization

00:04:39.626 --> 00:04:41.026 A:middle
这是一个协议

00:04:41.026 --> 00:04:42.386 A:middle
但它不是那种需要

00:04:42.386 --> 00:04:44.376 A:middle
你在 App 中应用的协议

00:04:45.266 --> 00:04:47.486 A:middle
它已在 NSView 和 NSWindow 中应用了

00:04:47.786 --> 00:04:50.226 A:middle
在 Mojave 中

00:04:50.226 --> 00:04:52.116 A:middle
NSApplication 也会遵循这个协议

00:04:53.086 --> 00:04:54.556 A:middle
它是个相当简单的协议

00:04:54.706 --> 00:04:55.956 A:middle
只添加了两项属性

00:04:56.466 --> 00:04:58.946 A:middle
第一是 appearance

00:04:58.946 --> 00:05:00.336 A:middle
这里你可以重写

00:04:58.946 --> 00:05:00.336 A:middle
这里你可以重写

00:05:00.336 --> 00:05:02.386 A:middle
一个特定对象的外观

00:05:03.346 --> 00:05:05.066 A:middle
它是一个可选择的 NSAppearance

00:05:05.116 --> 00:05:07.696 A:middle
因为如果你将它的参数

00:05:07.696 --> 00:05:09.216 A:middle
设置为 “nil” 那么

00:05:09.216 --> 00:05:10.716 A:middle
该对象只会继承

00:05:10.916 --> 00:05:11.886 A:middle
父对象的外观

00:05:13.496 --> 00:05:15.346 A:middle
第二个是 effectiveAppearance

00:05:15.346 --> 00:05:17.356 A:middle
这是一个

00:05:17.476 --> 00:05:19.456 A:middle
只读属性

00:05:19.456 --> 00:05:21.806 A:middle
你可以用它来找到一个视图

00:05:22.006 --> 00:05:22.976 A:middle
会用什么外观来绘制

00:05:23.516 --> 00:05:26.986 A:middle
当然 要利用这个

00:05:26.986 --> 00:05:28.346 A:middle
你得有个正确的

00:05:28.346 --> 00:05:30.086 A:middle
NSAppearance 对象

00:05:30.086 --> 00:05:32.216 A:middle
你可以用 NSAppearance 中的

00:05:32.216 --> 00:05:34.456 A:middle
named: 初始化语句来轻松完成

00:05:34.896 --> 00:05:38.416 A:middle
根据你想要的外观

00:05:38.416 --> 00:05:40.166 A:middle
只要传入“.aqua”或“.darkAqua”

00:05:41.576 --> 00:05:42.996 A:middle
你就能继续

00:05:42.996 --> 00:05:44.396 A:middle
将其指定为

00:05:44.396 --> 00:05:45.886 A:middle
所要定制的对象的

00:05:45.886 --> 00:05:46.936 A:middle
外观属性

00:05:47.106 --> 00:05:49.046 A:middle
在这个例子中

00:05:49.136 --> 00:05:51.466 A:middle
我们将指定 Aqua 外观

00:05:51.466 --> 00:05:52.826 A:middle
给 textView 的外观属性

00:05:52.826 --> 00:05:54.996 A:middle
现在 它就变成浅色外观了

00:05:54.996 --> 00:05:59.836 A:middle
好的 这个很简单 所以

00:05:59.836 --> 00:06:00.986 A:middle
我们来看下一种情况

00:05:59.836 --> 00:06:00.986 A:middle
我们来看下一种情况

00:06:02.186 --> 00:06:04.626 A:middle
你可能会有一个窗口

00:06:04.836 --> 00:06:06.076 A:middle
像这样悬浮在某个

00:06:06.076 --> 00:06:07.026 A:middle
特定视图下

00:06:07.936 --> 00:06:09.306 A:middle
你可能想要

00:06:09.306 --> 00:06:11.236 A:middle
将它的外观与其所在的视图

00:06:11.236 --> 00:06:12.016 A:middle
保持一致

00:06:12.886 --> 00:06:15.196 A:middle
那么 我们可以直接指定

00:06:15.196 --> 00:06:16.446 A:middle
Aqua 外观给这个窗口

00:06:16.476 --> 00:06:17.756 A:middle
就像刚刚那样

00:06:18.766 --> 00:06:20.316 A:middle
但是 我们真正想要的

00:06:20.616 --> 00:06:21.636 A:middle
不仅如此

00:06:21.636 --> 00:06:23.196 A:middle
我们想要它

00:06:23.196 --> 00:06:26.576 A:middle
继承视图中的外观 我们

00:06:26.576 --> 00:06:28.716 A:middle
就可以这样做 首先 AppKit

00:06:28.716 --> 00:06:30.316 A:middle
会自动地在一些常用窗口中

00:06:30.316 --> 00:06:31.696 A:middle
继承视图的外观

00:06:31.696 --> 00:06:34.586 A:middle
如菜单 弹出框

00:06:34.626 --> 00:06:36.546 A:middle
工具提示和工作表

00:06:36.546 --> 00:06:38.156 A:middle
因此你不需要担心这些窗口

00:06:39.286 --> 00:06:40.966 A:middle
但是 对于这样的自定义窗口

00:06:41.476 --> 00:06:43.266 A:middle
在 Mojave 中有一个新的 API

00:06:43.266 --> 00:06:45.436 A:middle
可以供你使用

00:06:46.746 --> 00:06:48.256 A:middle
叫做 appearanceSource

00:06:49.486 --> 00:06:51.746 A:middle
这是一种

00:06:51.746 --> 00:06:54.446 A:middle
能使任何对象都遵循

00:06:54.446 --> 00:06:55.976 A:middle
NSAppearanceCustomization 协议的属性

00:06:55.976 --> 00:06:57.386 A:middle
包括视图和窗口

00:06:57.386 --> 00:07:00.506 A:middle
你只要为其指定

00:06:57.386 --> 00:07:00.506 A:middle
你只要为其指定

00:07:00.506 --> 00:07:03.926 A:middle
appearanceSource 属性

00:07:04.496 --> 00:07:06.176 A:middle
该窗口就会从该对象中

00:07:06.176 --> 00:07:07.526 A:middle
继承视图的外观

00:07:08.146 --> 00:07:11.516 A:middle
那么 在这里 我们将 testView

00:07:11.516 --> 00:07:12.636 A:middle
指定到该子窗口的

00:07:12.636 --> 00:07:14.926 A:middle
appearanceSource 属性

00:07:14.926 --> 00:07:16.816 A:middle
这样一来

00:07:16.816 --> 00:07:18.186 A:middle
textView 的外观就会

00:07:18.186 --> 00:07:20.746 A:middle
一直继承该视图的外观

00:07:22.476 --> 00:07:24.826 A:middle
其实 你可以将外观系统

00:07:24.826 --> 00:07:27.316 A:middle
想象成一种层级结构

00:07:27.986 --> 00:07:29.666 A:middle
与你可能比较熟悉的

00:07:29.706 --> 00:07:30.926 A:middle
视图层级类似

00:07:31.016 --> 00:07:32.726 A:middle
但要将其扩展到窗口

00:07:32.726 --> 00:07:33.756 A:middle
以及 App

00:07:34.896 --> 00:07:37.196 A:middle
当我们要求 AppKit 给出一个

00:07:37.196 --> 00:07:38.686 A:middle
视图的有效外观时

00:07:39.916 --> 00:07:41.806 A:middle
AppKit 就会沿着这个

00:07:41.806 --> 00:07:43.646 A:middle
层级结构走下去

00:07:43.646 --> 00:07:45.116 A:middle
直到找到一个

00:07:45.116 --> 00:07:47.486 A:middle
有具体外观的对象

00:07:47.486 --> 00:07:48.546 A:middle
那便是我们使用的外观

00:07:49.096 --> 00:07:53.326 A:middle
好 现在 我们知道了对象如何

00:07:53.376 --> 00:07:54.406 A:middle
获得外观 以及外观系统

00:07:54.406 --> 00:07:55.876 A:middle
是如何运作的

00:07:55.876 --> 00:07:57.156 A:middle
下面我们就来谈谈如何在你的

00:07:57.156 --> 00:07:58.676 A:middle
自定义视图和控件中使用它

00:07:59.156 --> 00:08:00.876 A:middle
举个例子

00:07:59.156 --> 00:08:00.876 A:middle
举个例子

00:08:00.876 --> 00:08:02.736 A:middle
如果我想要让这个

00:08:02.736 --> 00:08:04.956 A:middle
自定标头视图

00:08:04.956 --> 00:08:07.176 A:middle
在浅色和深色的外观下

00:08:07.176 --> 00:08:07.956 A:middle
使用不同的颜色

00:08:09.246 --> 00:08:11.136 A:middle
现在 我们已经知道在 Xcode 10 里

00:08:11.426 --> 00:08:13.366 A:middle
我可以进入素材目录编辑器

00:08:13.366 --> 00:08:15.656 A:middle
为浅色或暗色主题

00:08:15.656 --> 00:08:17.566 A:middle
设置特定的色彩素材

00:08:18.266 --> 00:08:21.676 A:middle
但怎样在我的自定视图中使用它呢

00:08:22.886 --> 00:08:24.866 A:middle
好 下面我要演示的这个方法

00:08:24.866 --> 00:08:26.916 A:middle
看起来很靠谱 但其实行不通

00:08:26.916 --> 00:08:27.486 A:middle
我会告诉你为什么

00:08:28.516 --> 00:08:30.156 A:middle
首先 我们将给我们的视图

00:08:30.156 --> 00:08:31.196 A:middle
添加一个 NSColor 属性

00:08:32.535 --> 00:08:34.916 A:middle
初始化状态下 我们将用该颜色

00:08:34.916 --> 00:08:37.736 A:middle
填充我们的图层

00:08:38.216 --> 00:08:41.606 A:middle
而如果颜色改变了

00:08:41.606 --> 00:08:43.316 A:middle
我们也将开始更新相应的图层

00:08:44.646 --> 00:08:45.546 A:middle
让我们来试试

00:08:46.936 --> 00:08:48.356 A:middle
好 在浅色模式下看起来很好

00:08:48.356 --> 00:08:51.666 A:middle
但是如果我们转为暗的状态

00:08:51.666 --> 00:08:52.726 A:middle
就能看到我们的颜色其实

00:08:52.726 --> 00:08:53.786 A:middle
并没有改变

00:08:55.016 --> 00:08:56.316 A:middle
这是因为即使

00:08:56.316 --> 00:08:59.016 A:middle
我们的 NSColor 是动态的

00:08:59.016 --> 00:09:00.906 A:middle
所得到的 cgColor 也是静态的

00:08:59.016 --> 00:09:00.906 A:middle
所得到的 cgColor 也是静态的

00:09:00.906 --> 00:09:02.816 A:middle
它不会随外观而改变

00:09:03.806 --> 00:09:05.666 A:middle
因为我们在初始化程序段中

00:09:05.666 --> 00:09:08.076 A:middle
已经设置了图层

00:09:08.076 --> 00:09:09.206 A:middle
那么在外观改变时

00:09:09.206 --> 00:09:11.396 A:middle
我们无法运行任何代码

00:09:11.946 --> 00:09:14.616 A:middle
重点就是

00:09:14.616 --> 00:09:15.686 A:middle
要把你随外观改变的内容

00:09:15.846 --> 00:09:19.086 A:middle
放到特定的区域

00:09:19.666 --> 00:09:21.576 A:middle
具体来说 就是使用 NSView 中的

00:09:21.576 --> 00:09:23.936 A:middle
updateConstraints() layout() draw()

00:09:23.986 --> 00:09:26.336 A:middle
以及 updateLayer() 方法

00:09:27.616 --> 00:09:29.406 A:middle
这样的话 当外观改变时

00:09:29.486 --> 00:09:30.956 A:middle
如有需要 AppKit 就会自动

00:09:31.196 --> 00:09:32.446 A:middle
调用这些方法

00:09:32.996 --> 00:09:34.246 A:middle
如果你需要手动地

00:09:34.246 --> 00:09:36.586 A:middle
触发它们 你当然可以一直使用

00:09:36.966 --> 00:09:38.296 A:middle
needsUpdateConstraints

00:09:38.596 --> 00:09:39.926 A:middle
needsLayout

00:09:39.926 --> 00:09:42.026 A:middle
和 needsDisplay 这些属性

00:09:42.026 --> 00:09:45.806 A:middle
AppKit 会自动调用它们

00:09:46.146 --> 00:09:47.296 A:middle
好 现在回到我们的例子

00:09:48.616 --> 00:09:50.196 A:middle
与其重写 init

00:09:50.856 --> 00:09:53.666 A:middle
我们可以执行 updateLayer()

00:09:53.666 --> 00:09:56.726 A:middle
接着 就可以放心地通过

00:09:57.056 --> 00:09:59.346 A:middle
向我们的 NSColor 请求一个 cgColor

00:09:59.346 --> 00:10:00.796 A:middle
来填充我们的图层

00:09:59.346 --> 00:10:00.796 A:middle
来填充我们的图层

00:10:01.836 --> 00:10:03.436 A:middle
如果只有颜色变了

00:10:03.606 --> 00:10:05.356 A:middle
而那里的图层却没有更新

00:10:05.356 --> 00:10:07.306 A:middle
我们就只需要将

00:10:07.386 --> 00:10:08.946 A:middle
needsDisplay 属性设置为真

00:10:09.426 --> 00:10:12.446 A:middle
AppKit 会自动回来并调用

00:10:12.446 --> 00:10:12.906 A:middle
updateLayer()

00:10:14.336 --> 00:10:15.076 A:middle
好 现在再看

00:10:16.536 --> 00:10:17.426 A:middle
在浅色的状态仍然看起来很好

00:10:17.426 --> 00:10:21.496 A:middle
现在 在深色的状态下

00:10:21.496 --> 00:10:22.896 A:middle
它的颜色正如我们所愿

00:10:22.896 --> 00:10:24.706 A:middle
效果很棒

00:10:25.976 --> 00:10:27.216 A:middle
好 如果我们想

00:10:27.216 --> 00:10:28.146 A:middle
做一些更复杂的东西怎么办

00:10:28.146 --> 00:10:29.826 A:middle
如果仅仅用

00:10:29.826 --> 00:10:31.486 A:middle
动态色彩或者图像

00:10:31.706 --> 00:10:32.576 A:middle
可能不太容易表达

00:10:33.656 --> 00:10:35.796 A:middle
例如 也许我想要

00:10:35.796 --> 00:10:38.546 A:middle
在 Chloe 美丽的脸庞后

00:10:38.936 --> 00:10:40.416 A:middle
加点这种白色的光晕

00:10:40.416 --> 00:10:43.796 A:middle
但只是在深色模式下我会怎么做呢

00:10:44.806 --> 00:10:46.476 A:middle
好 这种情况下

00:10:46.476 --> 00:10:49.166 A:middle
我们在 Mojave 中会有新的 API

00:10:49.166 --> 00:10:50.876 A:middle
你可以用它来与你的

00:10:50.876 --> 00:10:51.686 A:middle
视图外观相比对

00:10:51.786 --> 00:10:52.686 A:middle
我来示范一下

00:10:53.856 --> 00:10:56.676 A:middle
在这个视图下

00:10:56.676 --> 00:10:58.846 A:middle
我会重写 layout() 方法 并开启

00:10:58.846 --> 00:11:00.916 A:middle
effectiveAppearance.bestMatch(from:)

00:10:58.846 --> 00:11:00.916 A:middle
effectiveAppearance.bestMatch(from:)

00:11:01.356 --> 00:11:05.286 A:middle
我会通过一个数组

00:11:05.286 --> 00:11:06.796 A:middle
该数组有我的视图

00:11:06.796 --> 00:11:08.916 A:middle
所知道的全部外观的名字

00:11:08.976 --> 00:11:11.276 A:middle
在这里是 Aqua 和 darkAqua

00:11:11.806 --> 00:11:14.326 A:middle
接着就只需要

00:11:14.666 --> 00:11:17.416 A:middle
给这些外观一一执行动作了

00:11:17.716 --> 00:11:19.366 A:middle
那么 对于 Aqua 外观

00:11:19.676 --> 00:11:21.616 A:middle
我会只把我含有 Chole 大头照的

00:11:21.616 --> 00:11:23.856 A:middle
imageView 作为一个子视图

00:11:24.456 --> 00:11:27.856 A:middle
而对于 darkAqua 外观 我不仅

00:11:27.856 --> 00:11:28.786 A:middle
要用 imageView

00:11:28.786 --> 00:11:31.606 A:middle
还要在后面加上 glowView

00:11:33.736 --> 00:11:35.766 A:middle
最后 我会执行一个默认 case

00:11:35.766 --> 00:11:38.146 A:middle
这是为了我的视图

00:11:38.146 --> 00:11:40.266 A:middle
所不了解的默认外观而设

00:11:40.266 --> 00:11:43.006 A:middle
包括将来 Apple

00:11:43.006 --> 00:11:44.436 A:middle
可能发布的外观

00:11:45.076 --> 00:11:47.536 A:middle
好的 让我们看看现在

00:11:47.536 --> 00:11:48.236 A:middle
看起来怎么样

00:11:48.636 --> 00:11:50.696 A:middle
现在 是浅色的外观下

00:11:50.696 --> 00:11:52.106 A:middle
没有光晕 是我们想要的

00:11:52.836 --> 00:11:54.696 A:middle
切换到深色外观

00:11:54.696 --> 00:11:55.006 A:middle
就有光晕了

00:11:55.276 --> 00:11:56.266 A:middle
很好 好的

00:11:58.116 --> 00:11:59.596 A:middle
下面让我们谈谈

00:11:59.596 --> 00:12:00.746 A:middle
高对比度

00:11:59.596 --> 00:12:00.746 A:middle
高对比度

00:12:01.606 --> 00:12:02.716 A:middle
我之前说过

00:12:02.746 --> 00:12:05.256 A:middle
我们已经将 NSAppearance

00:12:05.256 --> 00:12:07.596 A:middle
用作 macOS 的高对比度模式了

00:12:08.176 --> 00:12:10.056 A:middle
为了支持深色模式

00:12:10.106 --> 00:12:11.196 A:middle
所做的一切

00:12:11.196 --> 00:12:12.586 A:middle
带来的好处之一就是

00:12:12.586 --> 00:12:14.416 A:middle
让支持高对比度

00:12:14.416 --> 00:12:19.546 A:middle
变得十分容易

00:12:19.756 --> 00:12:21.636 A:middle
提醒一下 高对比度是

00:12:21.636 --> 00:12:23.356 A:middle
通过勾选系统偏好设置里的

00:12:23.486 --> 00:12:25.496 A:middle
“提高对比度”复选框来实现的

00:12:26.056 --> 00:12:29.586 A:middle
在这种模式下 色彩改变了

00:12:29.586 --> 00:12:31.346 A:middle
所以控件边界

00:12:31.346 --> 00:12:32.946 A:middle
和其他各种边界

00:12:32.946 --> 00:12:36.366 A:middle
都更容易看到

00:12:36.856 --> 00:12:38.696 A:middle
现在 这种模式下

00:12:38.786 --> 00:12:41.286 A:middle
AppKit 会自动将 Aqua

00:12:41.286 --> 00:12:43.036 A:middle
和 darkAqua 外观替换为

00:12:43.236 --> 00:12:44.656 A:middle
高对比度外观

00:12:45.186 --> 00:12:46.576 A:middle
而这些高对比度外观

00:12:46.576 --> 00:12:48.296 A:middle
继承了他们的

00:12:48.296 --> 00:12:50.326 A:middle
正常对比度的版本

00:12:50.836 --> 00:12:53.236 A:middle
那么 这就意味着

00:12:53.236 --> 00:12:54.706 A:middle
你所编写的任何利用

00:12:54.706 --> 00:12:56.366 A:middle
深色模式的代码

00:12:56.396 --> 00:12:58.226 A:middle
都会自动适用于

00:12:58.276 --> 00:12:58.456 A:middle
高对比度的深色模式

00:13:00.056 --> 00:13:01.676 A:middle
但你还可以更进一步

00:13:02.606 --> 00:13:04.496 A:middle
在 Xcode 10 中

00:13:04.616 --> 00:13:06.216 A:middle
如果你在素材目录编辑器中选中

00:13:06.216 --> 00:13:08.576 A:middle
这个 “High Contrast（高对比度）”复选框

00:13:08.576 --> 00:13:10.876 A:middle
你可以特别为该外观的

00:13:10.876 --> 00:13:13.136 A:middle
高对比度版本

00:13:13.296 --> 00:13:16.486 A:middle
指定颜色和图像素材

00:13:17.076 --> 00:13:20.166 A:middle
你也可以在代码中使用

00:13:20.166 --> 00:13:21.656 A:middle
那些外观的名字

00:13:21.656 --> 00:13:24.676 A:middle
你也许会忍不住想

00:13:24.736 --> 00:13:26.286 A:middle
唔 很好 我只要把它们传入

00:13:26.286 --> 00:13:27.716 A:middle
NSAppearance 主题就好了

00:13:27.716 --> 00:13:29.156 A:middle
然后我会获得 NSAppearance 对象

00:13:29.156 --> 00:13:31.836 A:middle
再继续做点什么 但这行不通

00:13:32.876 --> 00:13:34.036 A:middle
那些外观

00:13:34.036 --> 00:13:35.706 A:middle
只在系统偏好设置中可用

00:13:36.396 --> 00:13:39.236 A:middle
而你能做的是把它们

00:13:39.236 --> 00:13:41.296 A:middle
传给 bestMatch(from:)

00:13:41.296 --> 00:13:42.846 A:middle
像之前我们在深色模式做的那样

00:13:42.846 --> 00:13:45.246 A:middle
执行自定义编程行为

00:13:48.166 --> 00:13:50.476 A:middle
好的 我们再来说说子图层

00:13:51.256 --> 00:13:52.316 A:middle
我知道你们许多人

00:13:52.506 --> 00:13:56.736 A:middle
都有管理着子图层的视图

00:13:56.736 --> 00:13:58.146 A:middle
我们要注意 关于深色模式的

00:13:58.656 --> 00:13:59.866 A:middle
一些很重要的东西

00:14:01.236 --> 00:14:03.316 A:middle
首先 你需要知道

00:14:03.566 --> 00:14:05.466 A:middle
自定义子图层不会

00:14:05.716 --> 00:14:07.936 A:middle
自动继承你的视图的外观

00:14:08.586 --> 00:14:12.456 A:middle
现在 最简单的修补方法

00:14:12.536 --> 00:14:13.656 A:middle
就是将他们从子图层

00:14:13.726 --> 00:14:15.476 A:middle
转换为子视图

00:14:15.626 --> 00:14:17.606 A:middle
如果这么做了 那么 AppKit 就会

00:14:17.606 --> 00:14:19.056 A:middle
自动处理

00:14:19.226 --> 00:14:22.096 A:middle
那些视图的外观继承

00:14:22.096 --> 00:14:23.826 A:middle
就像其他视图一样

00:14:25.226 --> 00:14:27.186 A:middle
否则 你就必须

00:14:27.186 --> 00:14:29.136 A:middle
手动管理那些图层

00:14:29.136 --> 00:14:30.266 A:middle
用几种我下面提到的技巧

00:14:30.266 --> 00:14:33.686 A:middle
viewDidChangeEffectiveAppearance()

00:14:33.686 --> 00:14:35.076 A:middle
以及代表当前外观的

00:14:35.076 --> 00:14:35.576 A:middle
NSAppearance.current

00:14:36.146 --> 00:14:39.856 A:middle
好 先是 viewDidChange

00:14:39.856 --> 00:14:40.996 A:middle
EffectiveAppearance()

00:14:41.416 --> 00:14:43.886 A:middle
这是一种 NSView 中的新方法

00:14:44.186 --> 00:14:47.226 A:middle
你可以进行重写来发现

00:14:47.226 --> 00:14:48.896 A:middle
视图的有效外观

00:14:48.896 --> 00:14:49.746 A:middle
什么时候发生改变

00:14:51.166 --> 00:14:52.246 A:middle
这是执行所有

00:14:52.326 --> 00:14:53.906 A:middle
可能需要的

00:14:53.906 --> 00:14:56.276 A:middle
自定义禁用或释放

00:14:56.276 --> 00:14:57.826 A:middle
任何不再相关的缓存的好时机

00:14:58.636 --> 00:15:00.246 A:middle
但是记住 你不需要

00:14:58.636 --> 00:15:00.246 A:middle
但是记住 你不需要

00:15:00.246 --> 00:15:02.136 A:middle
使这里的视图本身失效

00:15:02.576 --> 00:15:04.546 A:middle
AppKit 会自动为你完成这点

00:15:07.236 --> 00:15:09.726 A:middle
第二点 “当前外观”的概念

00:15:10.536 --> 00:15:12.796 A:middle
现在 这是一个线程局部变量

00:15:12.796 --> 00:15:14.766 A:middle
你可以通过一个

00:15:14.796 --> 00:15:16.976 A:middle
NSAppearance 上的类属性来访问

00:15:17.536 --> 00:15:20.196 A:middle
如果你比较熟悉

00:15:20.196 --> 00:15:21.576 A:middle
如 NSGraphicsContext.current

00:15:21.576 --> 00:15:22.836 A:middle
或 NSProgress.current 这样的概念

00:15:22.836 --> 00:15:24.516 A:middle
你就已经明白了

00:15:24.516 --> 00:15:25.516 A:middle
我在说什么

00:15:25.976 --> 00:15:27.836 A:middle
如果你不熟悉 只要记住

00:15:27.956 --> 00:15:29.416 A:middle
这是用作解决

00:15:29.416 --> 00:15:32.326 A:middle
动态色彩和图片的外观

00:15:34.076 --> 00:15:35.856 A:middle
AppKit 会在我们调用那些

00:15:35.856 --> 00:15:37.386 A:middle
我们之前所说的

00:15:37.386 --> 00:15:39.146 A:middle
特殊的 NSView 方法之前

00:15:39.146 --> 00:15:40.866 A:middle
自动为你

00:15:40.866 --> 00:15:41.806 A:middle
建立当前外观

00:15:41.986 --> 00:15:44.286 A:middle
如 updateConstraints() layout() draw()

00:15:44.286 --> 00:15:47.116 A:middle
以及 updateLayer() 方法 但你也可以

00:15:47.166 --> 00:15:49.076 A:middle
在必要时

00:15:49.076 --> 00:15:50.656 A:middle
自己进行建立

00:15:50.656 --> 00:15:51.796 A:middle
那我们来看一个例子

00:15:51.796 --> 00:15:52.046 A:middle
说明你为什么可能这样做

00:15:55.396 --> 00:15:57.146 A:middle
好 这是一个包括了

00:15:57.146 --> 00:15:58.576 A:middle
一些子图层的自定义视图

00:16:00.416 --> 00:16:02.066 A:middle
我会重写这个新的

00:16:02.266 --> 00:16:03.206 A:middle
viewDidChange

00:16:03.206 --> 00:16:05.966 A:middle
EffectiveAppearance() 方法

00:16:05.966 --> 00:16:07.416 A:middle
再给我的子图层设置

00:16:07.416 --> 00:16:08.176 A:middle
NeedsDisplay()

00:16:08.986 --> 00:16:10.626 A:middle
而如果我没有进行这些设置

00:16:10.626 --> 00:16:12.586 A:middle
我的子图层不会随着

00:16:12.586 --> 00:16:14.066 A:middle
视图的有效外观的变化而更新

00:16:14.156 --> 00:16:15.106 A:middle
它只会保持原样

00:16:15.136 --> 00:16:19.096 A:middle
接着在我的图层委托子程序里

00:16:19.096 --> 00:16:21.106 A:middle
我会保存当前外观

00:16:21.106 --> 00:16:22.996 A:middle
以备之后使用

00:16:22.996 --> 00:16:24.546 A:middle
接着我会继续

00:16:24.546 --> 00:16:26.286 A:middle
把我的当前外观

00:16:26.336 --> 00:16:27.376 A:middle
设置成 effectiveAppearance

00:16:27.906 --> 00:16:31.706 A:middle
然后我就可以继续更新我的图层了

00:16:32.316 --> 00:16:34.306 A:middle
这时 如果我之前没有

00:16:34.306 --> 00:16:36.316 A:middle
设置当前外观

00:16:36.316 --> 00:16:38.016 A:middle
那这个代码就不会使用

00:16:38.016 --> 00:16:39.456 A:middle
我视图的外观 那样看起来

00:16:39.456 --> 00:16:40.346 A:middle
就不对了

00:16:41.556 --> 00:16:42.956 A:middle
最后 到这一步 我只要

00:16:42.956 --> 00:16:45.136 A:middle
还原先前的当前外观

00:16:48.726 --> 00:16:49.826 A:middle
如果你在管理图层的话

00:16:49.826 --> 00:16:51.676 A:middle
这里还需要注意一点

00:16:52.686 --> 00:16:54.036 A:middle
你或许已经有一些

00:16:54.256 --> 00:16:55.696 A:middle
看起来像之前两个例子之一

00:16:56.296 --> 00:16:57.506 A:middle
要么你要将

00:16:57.506 --> 00:16:59.306 A:middle
一个图层的内容设置为

00:16:59.306 --> 00:17:01.896 A:middle
某个 NSImage 要么你就要使用

00:16:59.306 --> 00:17:01.896 A:middle
某个 NSImage 要么你就要使用

00:17:01.896 --> 00:17:04.226 A:middle
layerContents(forContentsScale:) API

00:17:04.226 --> 00:17:06.636 A:middle
来用某个图像为你的图层

00:17:06.715 --> 00:17:08.246 A:middle
创建一个 layer.contents

00:17:09.876 --> 00:17:11.276 A:middle
如果你有这样的代码

00:17:11.276 --> 00:17:12.726 A:middle
你要知道图像不会

00:17:12.726 --> 00:17:15.326 A:middle
自动继承外观

00:17:15.856 --> 00:17:19.256 A:middle
像之前一样 最好的修补方法就是

00:17:19.256 --> 00:17:20.286 A:middle
把它切换成视图

00:17:20.286 --> 00:17:21.935 A:middle
在这里要用 NSImageView

00:17:22.286 --> 00:17:23.776 A:middle
NSImageView 会自动处理到

00:17:23.776 --> 00:17:25.266 A:middle
这个细节 包括许多其他细节

00:17:25.266 --> 00:17:30.576 A:middle
因此你最好这么做

00:17:30.766 --> 00:17:32.676 A:middle
否则 你就要为你的图层

00:17:32.676 --> 00:17:35.266 A:middle
从 NSImage 中

00:17:35.266 --> 00:17:35.786 A:middle
创建一个 CGImage

00:17:36.466 --> 00:17:37.776 A:middle
这时 你需要用

00:17:37.776 --> 00:17:40.166 A:middle
NSImage 中的 cgImage(forProposedRect:

00:17:40.786 --> 00:17:43.886 A:middle
context: hints:) API

00:17:44.496 --> 00:17:46.056 A:middle
同时 你要注意

00:17:46.186 --> 00:17:47.506 A:middle
应该在当前外观正确的时候

00:17:47.776 --> 00:17:49.536 A:middle
来做这件事情

00:17:49.776 --> 00:17:51.406 A:middle
因此 最好在你的 updateLayer() 方法里

00:17:51.406 --> 00:17:52.486 A:middle
完成这些

00:17:52.766 --> 00:17:55.596 A:middle
好了 这就是外观

00:17:56.486 --> 00:17:57.856 A:middle
下面我们来谈谈素材

00:17:57.946 --> 00:18:00.046 A:middle
好 你大概已经听过

00:17:57.946 --> 00:18:00.046 A:middle
好 你大概已经听过

00:18:00.466 --> 00:18:02.636 A:middle
素材是现在

00:18:02.636 --> 00:18:04.356 A:middle
Mac UI 的一个重要部分

00:18:04.356 --> 00:18:06.146 A:middle
但你也许有过疑惑

00:18:06.146 --> 00:18:09.596 A:middle
素材究竟是什么

00:18:09.596 --> 00:18:10.586 A:middle
那么我就从它的定义开始

00:18:11.816 --> 00:18:13.436 A:middle
素材是使用

00:18:13.496 --> 00:18:15.726 A:middle
一些效果的动态背景

00:18:15.726 --> 00:18:18.136 A:middle
比如模糊 渐变

00:18:18.516 --> 00:18:21.856 A:middle
着色和半透明

00:18:21.856 --> 00:18:24.276 A:middle
它们为你的 UI 提供

00:18:24.276 --> 00:18:26.806 A:middle
深度 环境

00:18:26.806 --> 00:18:28.206 A:middle
同时还有点美化作用

00:18:28.726 --> 00:18:31.626 A:middle
这是一个相当典型的 Mac 桌面

00:18:31.656 --> 00:18:33.606 A:middle
你可以看到我们使用了

00:18:33.606 --> 00:18:35.076 A:middle
这些素材效果的

00:18:35.076 --> 00:18:36.476 A:middle
所有的地方

00:18:36.596 --> 00:18:38.000 A:middle
而其实 这些不是全部

00:18:41.286 --> 00:18:42.986 A:middle
现在 AppKit 会自动地

00:18:42.986 --> 00:18:44.936 A:middle
为一些常见的地方

00:18:44.936 --> 00:18:47.096 A:middle
提供素材 如标题栏

00:18:47.096 --> 00:18:49.166 A:middle
窗口背景

00:18:49.986 --> 00:18:52.696 A:middle
表格视图 侧边栏 弹出框

00:18:52.696 --> 00:18:56.136 A:middle
以及菜单 还有其他的地方

00:18:56.336 --> 00:18:58.366 A:middle
但你也可以自己创建一种素材

00:18:58.366 --> 00:19:00.426 A:middle
并将其添加到你的 UI 中

00:18:58.366 --> 00:19:00.426 A:middle
并将其添加到你的 UI 中

00:19:01.136 --> 00:19:02.156 A:middle
这就要用到一种视图

00:19:02.356 --> 00:19:03.676 A:middle
叫作 NSVisualEffectView

00:19:04.466 --> 00:19:07.206 A:middle
如果你不熟悉它 很简单

00:19:07.206 --> 00:19:09.466 A:middle
它是一种显示素材的视图

00:19:10.676 --> 00:19:11.836 A:middle
如果你想使用这种视图

00:19:12.346 --> 00:19:14.136 A:middle
你要注意三个

00:19:14.136 --> 00:19:15.406 A:middle
需要设置的主要属性

00:19:15.446 --> 00:19:17.696 A:middle
而我将依次地进行介绍

00:19:17.836 --> 00:19:19.556 A:middle
包括 state blendingMode

00:19:19.556 --> 00:19:20.636 A:middle
和 material

00:19:23.046 --> 00:19:24.206 A:middle
首先是 state 属性

00:19:24.766 --> 00:19:27.336 A:middle
它决定了素材

00:19:27.336 --> 00:19:29.786 A:middle
是否使用活动窗口外观

00:19:30.246 --> 00:19:31.776 A:middle
默认情况下

00:19:31.776 --> 00:19:33.366 A:middle
素材会匹配包含它的窗口

00:19:33.366 --> 00:19:34.916 A:middle
当这个窗口活动时

00:19:34.916 --> 00:19:36.256 A:middle
素材也会看起来出于活动状态

00:19:36.556 --> 00:19:37.926 A:middle
当窗口不活动时

00:19:37.926 --> 00:19:39.106 A:middle
素材也会不活动

00:19:39.686 --> 00:19:42.456 A:middle
但是你也可以将

00:19:42.866 --> 00:19:44.776 A:middle
特定的部分指定为活动或不活动

00:19:44.776 --> 00:19:46.076 A:middle
如果你想要

00:19:46.076 --> 00:19:47.006 A:middle
手动控制的话

00:19:49.546 --> 00:19:51.076 A:middle
第二个 blendingMode 属性

00:19:51.776 --> 00:19:53.846 A:middle
这个属性控制着

00:19:53.846 --> 00:19:55.886 A:middle
素材是否会穿透

00:19:55.886 --> 00:19:56.646 A:middle
窗口的背后

00:19:56.856 --> 00:19:58.146 A:middle
下面我来给你演示一下

00:19:59.676 --> 00:20:02.106 A:middle
这是“预览” App 用了两种

00:19:59.676 --> 00:20:02.106 A:middle
这是“预览” App 用了两种

00:20:02.106 --> 00:20:03.146 A:middle
不同的素材

00:20:04.406 --> 00:20:06.236 A:middle
一个是 这个标题栏素材

00:20:06.236 --> 00:20:09.146 A:middle
如果我们把它掀开

00:20:09.146 --> 00:20:10.726 A:middle
就能看到它混合了

00:20:10.726 --> 00:20:12.286 A:middle
窗口里的内容

00:20:12.286 --> 00:20:14.056 A:middle
包括里面的彩色图像

00:20:14.916 --> 00:20:16.506 A:middle
所以 它没有穿透到

00:20:16.506 --> 00:20:17.956 A:middle
窗口的后面

00:20:19.036 --> 00:20:20.366 A:middle
这是一个侧边栏素材

00:20:20.366 --> 00:20:22.216 A:middle
如果我们将它掀开

00:20:23.656 --> 00:20:24.856 A:middle
我们就能看到它将

00:20:24.856 --> 00:20:26.506 A:middle
窗口后面的内容模糊了

00:20:26.506 --> 00:20:27.786 A:middle
所以穿透到了窗口后面

00:20:28.006 --> 00:20:29.926 A:middle
因而它可以看到

00:20:29.966 --> 00:20:32.526 A:middle
其背后的窗口 还有桌面

00:20:40.666 --> 00:20:42.516 A:middle
好的 默认情况下 一个视觉效果视图

00:20:42.516 --> 00:20:43.946 A:middle
将会处于穿透窗口模式

00:20:43.946 --> 00:20:46.756 A:middle
但你可以用

00:20:46.756 --> 00:20:48.066 A:middle
blendingMode 属性来控制它

00:20:48.516 --> 00:20:51.436 A:middle
最后是 material 属性

00:20:52.236 --> 00:20:53.876 A:middle
该属性封装了

00:20:53.876 --> 00:20:55.976 A:middle
对素材效果的定义

00:20:56.836 --> 00:20:57.546 A:middle
这是什么意思呢

00:20:58.476 --> 00:21:00.366 A:middle
也就是模糊 半透明

00:20:58.476 --> 00:21:00.366 A:middle
也就是模糊 半透明

00:21:00.496 --> 00:21:03.246 A:middle
渐变以及着色的具体方法

00:21:03.246 --> 00:21:05.246 A:middle
这些都取决于

00:21:05.246 --> 00:21:06.216 A:middle
material 属性

00:21:07.316 --> 00:21:08.506 A:middle
现在 我们先开始在

00:21:08.506 --> 00:21:10.916 A:middle
Yosemite 里使用素材时

00:21:11.006 --> 00:21:12.726 A:middle
我们有两种主要素材

00:21:12.966 --> 00:21:14.586 A:middle
一种浅色的 一种深色的

00:21:14.586 --> 00:21:15.876 A:middle
开始这两种素材很好用

00:21:15.876 --> 00:21:18.276 A:middle
但之后我们已经

00:21:18.276 --> 00:21:19.736 A:middle
扩大了系统中

00:21:19.736 --> 00:21:21.196 A:middle
素材的使用

00:21:22.026 --> 00:21:23.576 A:middle
那么在深色模式中

00:21:23.576 --> 00:21:24.716 A:middle
仅仅指定一种素材为亮或暗

00:21:24.716 --> 00:21:28.086 A:middle
不再具有实质性的意义

00:21:28.776 --> 00:21:29.976 A:middle
相反 我们有一种叫

00:21:29.976 --> 00:21:31.806 A:middle
语义素材的东西

00:21:32.666 --> 00:21:33.616 A:middle
如果你熟悉

00:21:33.686 --> 00:21:36.066 A:middle
语义色彩的话

00:21:36.276 --> 00:21:37.406 A:middle
就知道它们的命名

00:21:37.406 --> 00:21:39.406 A:middle
取决于其使用的地方

00:21:39.536 --> 00:21:40.366 A:middle
而不在于它们看起来像什么

00:21:41.686 --> 00:21:43.506 A:middle
语义素材也是这样

00:21:44.486 --> 00:21:46.096 A:middle
例如 菜单素材

00:21:46.166 --> 00:21:47.456 A:middle
会一直看起来像

00:21:47.456 --> 00:21:49.626 A:middle
系统环境菜单

00:21:49.626 --> 00:21:50.706 A:middle
不论是浅色还是深色模式

00:21:51.386 --> 00:21:55.086 A:middle
在 Mojave 中 我们引进了

00:21:55.086 --> 00:21:57.716 A:middle
更多的语义素材

00:21:58.716 --> 00:21:59.976 A:middle
这样你就总可以

00:21:59.976 --> 00:22:02.056 A:middle
在特定用例下

00:21:59.976 --> 00:22:02.056 A:middle
在特定用例下

00:22:02.056 --> 00:22:02.476 A:middle
使用正确的素材

00:22:02.626 --> 00:22:06.296 A:middle
其实 这些语义素材

00:22:06.346 --> 00:22:08.996 A:middle
是现在我们使用素材时

00:22:08.996 --> 00:22:10.726 A:middle
喜欢用的方法

00:22:10.726 --> 00:22:12.836 A:middle
我们淘汰了一些非语义素材

00:22:12.836 --> 00:22:14.896 A:middle
如浅色 深色

00:22:15.186 --> 00:22:16.636 A:middle
中浅色 或者极深色

00:22:17.866 --> 00:22:19.026 A:middle
如果你正在用这些素材

00:22:19.026 --> 00:22:21.506 A:middle
那你最好赶快

00:22:21.506 --> 00:22:23.296 A:middle
切换到一个适用于

00:22:23.296 --> 00:22:24.786 A:middle
你的用例的

00:22:24.866 --> 00:22:25.846 A:middle
语义素材中

00:22:29.476 --> 00:22:30.876 A:middle
现在给你大概展示一下

00:22:30.876 --> 00:22:32.366 A:middle
在整个系统里 我们会在哪里

00:22:32.366 --> 00:22:33.676 A:middle
使用这些语义素材

00:22:34.456 --> 00:22:35.726 A:middle
这是“访达”使用的

00:22:35.726 --> 00:22:37.406 A:middle
标题栏和侧边栏素材

00:22:39.396 --> 00:22:41.156 A:middle
这是“邮件”使用的标头视图

00:22:41.156 --> 00:22:43.236 A:middle
和内容背景素材

00:22:45.656 --> 00:22:47.396 A:middle
这是《Chameleon Wrangler》App

00:22:47.396 --> 00:22:48.266 A:middle
所使用的

00:22:48.266 --> 00:22:49.776 A:middle
页面背景素材

00:22:50.346 --> 00:22:54.426 A:middle
这是系统偏好设置

00:22:54.426 --> 00:22:56.056 A:middle
所使用的窗口背景素材

00:22:57.276 --> 00:22:58.236 A:middle
现在 关于这个

00:22:58.236 --> 00:22:59.666 A:middle
窗口背景素材

00:22:59.716 --> 00:23:00.886 A:middle
你大概有所耳闻

00:22:59.716 --> 00:23:00.886 A:middle
你大概有所耳闻

00:23:00.886 --> 00:23:03.116 A:middle
它是 Mojave 里新的特殊的

00:23:03.226 --> 00:23:04.186 A:middle
桌面着色素材之一

00:23:04.186 --> 00:23:06.616 A:middle
而它们运作的方法

00:23:06.896 --> 00:23:09.476 A:middle
就是基于窗口在屏幕上的位置

00:23:09.476 --> 00:23:11.406 A:middle
从桌面图片中挑出

00:23:11.406 --> 00:23:12.776 A:middle
一小块色彩

00:23:13.366 --> 00:23:14.706 A:middle
这里的目的是要

00:23:14.796 --> 00:23:16.726 A:middle
将你的窗口融入

00:23:16.726 --> 00:23:18.186 A:middle
系统里其他部分的窗口

00:23:18.726 --> 00:23:24.166 A:middle
那么 要得到这些根据桌面着色的素材

00:23:24.166 --> 00:23:25.226 A:middle
最简单的方法

00:23:25.226 --> 00:23:26.396 A:middle
就是使用 NSWindow

00:23:26.516 --> 00:23:28.926 A:middle
NSScrollView  NSTableView

00:23:29.086 --> 00:23:30.946 A:middle
和 NSCollectionView 中的

00:23:30.976 --> 00:23:31.846 A:middle
自动支持

00:23:32.196 --> 00:23:33.886 A:middle
这些对象的

00:23:33.886 --> 00:23:35.666 A:middle
默认配置与这个

00:23:35.666 --> 00:23:37.226 A:middle
桌面着色效果同时进行

00:23:37.716 --> 00:23:42.956 A:middle
你也可以通过设置 NSBox

00:23:42.956 --> 00:23:45.856 A:middle
获取这些素材

00:23:45.856 --> 00:23:48.156 A:middle
只需要把它的类型设为自定义

00:23:48.286 --> 00:23:50.016 A:middle
并选择其中的一个填充色彩即可

00:23:50.286 --> 00:23:51.726 A:middle
它会使用相应的

00:23:51.826 --> 00:23:53.406 A:middle
NSVisualEffectView 素材

00:23:54.816 --> 00:23:55.736 A:middle
下面是例子

00:23:56.486 --> 00:23:58.866 A:middle
我会把 boxType 设置为自定义

00:23:59.336 --> 00:24:00.806 A:middle
然后我会将它的填充色彩

00:23:59.336 --> 00:24:00.806 A:middle
然后我会将它的填充色彩

00:24:00.856 --> 00:24:02.746 A:middle
设定为 underPageBackgroundColor

00:24:03.286 --> 00:24:05.366 A:middle
当然 我也可以用

00:24:05.366 --> 00:24:06.986 A:middle
NSVisualEffectView 我可以将

00:24:06.986 --> 00:24:08.506 A:middle
它的素材属性设置为

00:24:08.506 --> 00:24:09.906 A:middle
underPageBackground 素材

00:24:10.116 --> 00:24:11.296 A:middle
那么 使用 NSBox 的好处

00:24:11.416 --> 00:24:13.506 A:middle
就是它可以一直

00:24:13.506 --> 00:24:15.956 A:middle
向后兼容至 Leopard

00:24:17.076 --> 00:24:18.086 A:middle
另一方面 visualEffectView

00:24:18.086 --> 00:24:19.086 A:middle
则给了我们更大的发挥空间

00:24:19.086 --> 00:24:21.346 A:middle
稍后我会给你一个

00:24:21.346 --> 00:24:22.246 A:middle
相关的例子

00:24:22.826 --> 00:24:26.906 A:middle
提醒一下

00:24:26.906 --> 00:24:28.356 A:middle
这些素材会在浅色状态下

00:24:28.496 --> 00:24:30.656 A:middle
显示未着色的色彩

00:24:31.156 --> 00:24:33.946 A:middle
在深色状态下 它们才会显示

00:24:33.946 --> 00:24:35.026 A:middle
桌面着色效果

00:24:35.726 --> 00:24:37.366 A:middle
但是要记住 着色效果

00:24:37.366 --> 00:24:39.046 A:middle
可能会被禁用

00:24:39.176 --> 00:24:40.026 A:middle
原因是这样

00:24:40.706 --> 00:24:45.826 A:middle
在 Mojave 中你可以给系统

00:24:45.926 --> 00:24:47.376 A:middle
选择一个强调色

00:24:47.896 --> 00:24:52.276 A:middle
如果你将它切换为石墨色

00:24:52.386 --> 00:24:55.276 A:middle
你就会看到

00:24:55.276 --> 00:24:56.696 A:middle
所有的控件都失去了

00:24:56.696 --> 00:24:59.806 A:middle
它们的色彩强调

00:25:00.116 --> 00:25:01.646 A:middle
但这些桌面着色素材

00:25:01.796 --> 00:25:03.166 A:middle
也会失去它们的着色

00:25:04.616 --> 00:25:06.476 A:middle
所以无论如何要确保

00:25:06.476 --> 00:25:07.866 A:middle
你不要指望

00:25:07.866 --> 00:25:11.866 A:middle
桌面着色一直可用

00:25:12.106 --> 00:25:16.036 A:middle
默认情况下 visualEffectView

00:25:16.336 --> 00:25:18.226 A:middle
会在像这样的矩形框里

00:25:18.226 --> 00:25:19.536 A:middle
显示它的素材

00:25:19.956 --> 00:25:20.886 A:middle
这样挺好的

00:25:21.796 --> 00:25:23.046 A:middle
但是如果我想要用这个素材

00:25:23.046 --> 00:25:24.586 A:middle
显示一个自定义 UI 元素

00:25:24.586 --> 00:25:26.796 A:middle
比如说一个这样的对话气泡

00:25:27.416 --> 00:25:28.086 A:middle
我要怎么做呢

00:25:29.276 --> 00:25:32.016 A:middle
下面这种方法看似有用

00:25:32.016 --> 00:25:33.496 A:middle
实则行不通

00:25:33.496 --> 00:25:34.176 A:middle
我来演示一下为什么

00:25:35.606 --> 00:25:38.276 A:middle
我们先在 NSView 上

00:25:38.276 --> 00:25:42.226 A:middle
执行 draw() 方法

00:25:42.226 --> 00:25:44.436 A:middle
然后获取我的自定义对话气泡

00:25:44.786 --> 00:25:45.426 A:middle
NSBezierPath

00:25:45.936 --> 00:25:48.716 A:middle
接着我会在路径中执行 fill() 方法

00:25:48.716 --> 00:25:51.926 A:middle
参数为 controlBackgroundColor

00:25:52.696 --> 00:25:52.806 A:middle
参数为 controlBackgroundColor

00:25:53.016 --> 00:25:54.916 A:middle
好了 如果这么做

00:25:54.916 --> 00:25:56.486 A:middle
它就会像这样

00:25:56.486 --> 00:25:58.796 A:middle
看起来还不错

00:25:58.796 --> 00:26:01.296 A:middle
但如果我们放大看

00:25:58.796 --> 00:26:01.296 A:middle
但如果我们放大看

00:26:01.296 --> 00:26:02.696 A:middle
就会发现对话框并没有

00:26:02.746 --> 00:26:04.476 A:middle
我们想要的桌面着色效果

00:26:04.476 --> 00:26:05.676 A:middle
这只是单纯的灰色

00:26:07.096 --> 00:26:07.986 A:middle
这是怎么回事

00:26:09.376 --> 00:26:11.766 A:middle
因为 这种效果是由

00:26:11.766 --> 00:26:13.136 A:middle
Quartz 窗口服务器提供的

00:26:13.136 --> 00:26:14.876 A:middle
我们许多其他的素材效果也一样

00:26:15.746 --> 00:26:16.876 A:middle
这就意味着

00:26:16.976 --> 00:26:19.216 A:middle
它与你的 App 之间

00:26:19.216 --> 00:26:20.856 A:middle
是异步更新的

00:26:20.906 --> 00:26:23.706 A:middle
对性能表现来说这样

00:26:23.706 --> 00:26:25.516 A:middle
但也意味着你不能直接

00:26:25.516 --> 00:26:27.396 A:middle
使用那个颜色绘制视图

00:26:27.396 --> 00:26:28.476 A:middle
或是获取它的 RGB 值

00:26:29.916 --> 00:26:31.676 A:middle
相反 你可以用

00:26:31.676 --> 00:26:33.546 A:middle
NSVisualEffectView 的

00:26:33.546 --> 00:26:35.806 A:middle
maskImage 属性来实现类似的效果

00:26:37.106 --> 00:26:40.276 A:middle
maskImage 是 NSVisualEffectView 中

00:26:40.596 --> 00:26:43.336 A:middle
一种可选的 NSImage

00:26:44.026 --> 00:26:45.696 A:middle
而 NSVisualEffectView 则会利用它来

00:26:45.696 --> 00:26:47.706 A:middle
覆盖它的素材

00:26:47.706 --> 00:26:48.386 A:middle
或者说是它显示的素材

00:26:49.646 --> 00:26:50.996 A:middle
除了使用标准的

00:26:50.996 --> 00:26:53.126 A:middle
基于图案的图像外

00:26:53.126 --> 00:26:56.506 A:middle
你还可以用 Drawing-handler 图像来模拟

00:26:56.506 --> 00:26:56.996 A:middle
素材绘制

00:26:56.996 --> 00:26:59.356 A:middle
下面请看个例子

00:27:00.466 --> 00:27:01.896 A:middle
回到我的视图中

00:27:01.896 --> 00:27:04.736 A:middle
我会重写 layout() 方法

00:27:04.736 --> 00:27:05.816 A:middle
继续添加一个

00:27:05.816 --> 00:27:06.816 A:middle
NSVisualEffectView

00:27:07.896 --> 00:27:09.716 A:middle
并将其素材设置为

00:27:09.716 --> 00:27:11.786 A:middle
contentBackground 素材

00:27:12.916 --> 00:27:14.616 A:middle
接着 我用 NSImage(size: flipped:)

00:27:14.616 --> 00:27:17.176 A:middle
生成一个初始化程序代码块

00:27:17.356 --> 00:27:20.516 A:middle
来创建一个 Drawing-handler 图像

00:27:22.076 --> 00:27:24.306 A:middle
这里 我设置成白色

00:27:24.416 --> 00:27:25.686 A:middle
但什么颜色并不重要

00:27:25.686 --> 00:27:27.426 A:middle
只要它是不透明的就行

00:27:27.426 --> 00:27:29.426 A:middle
之后 我会继续填充

00:27:29.486 --> 00:27:32.796 A:middle
我的路径

00:27:32.956 --> 00:27:34.956 A:middle
然后在 NSVisualEffectView 上

00:27:34.956 --> 00:27:36.846 A:middle
将该图像设置为 maskImage

00:27:37.676 --> 00:27:39.006 A:middle
好了

00:27:39.276 --> 00:27:41.606 A:middle
现在我们来看看

00:27:41.846 --> 00:27:42.666 A:middle
看起来好很多

00:27:43.616 --> 00:27:44.626 A:middle
它有桌面着色了

00:27:45.706 --> 00:27:47.936 A:middle
并且 如果对比起来看

00:27:47.936 --> 00:27:51.476 A:middle
我们就能看到不同了

00:27:51.636 --> 00:27:53.356 A:middle
那么 这个技巧对任何素材

00:27:53.466 --> 00:27:55.626 A:middle
都适用 但是要记住

00:27:55.626 --> 00:27:57.256 A:middle
只有图像的 Alpha 通道

00:27:57.256 --> 00:27:58.596 A:middle
被用来制作蒙版

00:27:58.726 --> 00:28:00.496 A:middle
这点和模板图像类似

00:27:58.726 --> 00:28:00.496 A:middle
这点和模板图像类似

00:28:01.386 --> 00:28:03.886 A:middle
而且蒙版仅仅会

00:28:03.886 --> 00:28:06.626 A:middle
覆盖素材 而非任何子视图

00:28:06.626 --> 00:28:07.926 A:middle
或 NSVisualEffectView 的

00:28:07.926 --> 00:28:08.696 A:middle
其他继承视图

00:28:10.096 --> 00:28:12.516 A:middle
有一个通用的技术可以

00:28:12.516 --> 00:28:15.156 A:middle
为 maskImage 创建一个

00:28:15.156 --> 00:28:16.406 A:middle
可调整大小的图像

00:28:16.406 --> 00:28:18.246 A:middle
那就是用 NSImage 中的

00:28:18.246 --> 00:28:19.796 A:middle
capInsets 和 resizingMode 属性

00:28:20.206 --> 00:28:22.706 A:middle
这对性能十分有利

00:28:24.176 --> 00:28:25.846 A:middle
好 接下来的部分 我将交给 Jeff

00:28:25.846 --> 00:28:26.886 A:middle
他将和我们谈谈

00:28:26.886 --> 00:28:27.856 A:middle
“Vibrant Blending（动态混合）”

00:28:28.506 --> 00:28:31.316 A:middle
[ 掌声 ] Jeff

00:28:33.336 --> 00:28:34.436 A:middle
&gt;&gt; 好的 谢谢 Matt

00:28:35.466 --> 00:28:36.506 A:middle
好 现在我们已经

00:28:36.506 --> 00:28:38.076 A:middle
对素材有所了解

00:28:38.076 --> 00:28:39.666 A:middle
下面我要谈的

00:28:39.666 --> 00:28:40.906 A:middle
是在那些素材前面的东西

00:28:41.446 --> 00:28:42.646 A:middle
特别是那些我们

00:28:42.646 --> 00:28:44.696 A:middle
通过抓取部分背景

00:28:44.696 --> 00:28:46.466 A:middle
并创建出很棒的

00:28:46.466 --> 00:28:47.626 A:middle
模糊效果的素材 所以

00:28:48.786 --> 00:28:50.846 A:middle
如果我们再进入《Chameleon Wrangler》App

00:28:51.036 --> 00:28:52.786 A:middle
我们这里已经有了 UI

00:28:52.786 --> 00:28:54.756 A:middle
这是我们的情绪指示器

00:28:54.756 --> 00:28:56.156 A:middle
接着 我们将记录

00:28:56.156 --> 00:28:58.226 A:middle
我们各种爬行动物的情绪

00:28:58.996 --> 00:29:00.786 A:middle
它在一个弹出框中

00:28:58.996 --> 00:29:00.786 A:middle
它在一个弹出框中

00:29:00.786 --> 00:29:01.806 A:middle
意味着它会

00:29:01.806 --> 00:29:03.846 A:middle
自动地将该弹出框素材

00:29:03.846 --> 00:29:04.746 A:middle
作为基底素材

00:29:05.256 --> 00:29:07.636 A:middle
而当我们拉下这个基底素材

00:29:07.636 --> 00:29:08.676 A:middle
我们想要的是

00:29:08.676 --> 00:29:10.576 A:middle
我们的内容能够

00:29:10.576 --> 00:29:13.166 A:middle
从各种背景中凸现出来

00:29:13.776 --> 00:29:14.736 A:middle
就像这样

00:29:15.256 --> 00:29:16.706 A:middle
那么 我们就要用一种

00:29:16.706 --> 00:29:17.806 A:middle
叫做 “Vibrancy（动态化）”的效果

00:29:18.386 --> 00:29:20.456 A:middle
那么 什么是 Vibrancy

00:29:20.846 --> 00:29:22.996 A:middle
它就是一种混合模式

00:29:22.996 --> 00:29:24.456 A:middle
我们将这种模式运用到内容中

00:29:24.456 --> 00:29:26.266 A:middle
将其背后的内容统一地

00:29:26.266 --> 00:29:28.326 A:middle
提亮或变暗

00:29:28.536 --> 00:29:30.136 A:middle
这和色彩的减淡或加深

00:29:30.136 --> 00:29:31.266 A:middle
颇为相似

00:29:31.266 --> 00:29:32.516 A:middle
你也许在你常用的照片编辑器

00:29:32.516 --> 00:29:33.746 A:middle
或设计工具中见过它

00:29:34.406 --> 00:29:35.686 A:middle
我们来仔细看看

00:29:36.726 --> 00:29:38.226 A:middle
这里我们有一个 Glyph

00:29:38.226 --> 00:29:39.716 A:middle
它是一种中等灰色

00:29:39.716 --> 00:29:42.876 A:middle
大概是 50% 的灰色 但完全不透明

00:29:44.206 --> 00:29:45.706 A:middle
当我们使用针对深色素材的

00:29:45.706 --> 00:29:47.296 A:middle
动态混合效果时

00:29:47.296 --> 00:29:48.896 A:middle
这时我们称之为提亮效果

00:29:48.896 --> 00:29:51.606 A:middle
我们能看到

00:29:51.606 --> 00:29:53.256 A:middle
其实并不是 Glyph 的

00:29:53.256 --> 00:29:54.586 A:middle
不透明度下降了

00:29:54.586 --> 00:29:55.686 A:middle
而是它背后的内容

00:29:55.916 --> 00:29:57.586 A:middle
通过使用

00:29:58.066 --> 00:29:59.976 A:middle
该灰色值的亮度被提亮了

00:29:59.976 --> 00:30:03.366 A:middle
其实 我们可以看看它

00:29:59.976 --> 00:30:03.366 A:middle
其实 我们可以看看它

00:30:03.366 --> 00:30:04.866 A:middle
在一系列灰色值上是怎样的

00:30:04.866 --> 00:30:06.236 A:middle
这里我们有从 0% 到 100% 的

00:30:06.236 --> 00:30:08.666 A:middle
灰色色盘 它们都是

00:30:08.666 --> 00:30:09.456 A:middle
完全不透明的

00:30:10.396 --> 00:30:11.326 A:middle
现在我们使用提亮效果

00:30:11.326 --> 00:30:12.736 A:middle
我们看到一些

00:30:12.736 --> 00:30:14.946 A:middle
有趣的事情发生了

00:30:15.106 --> 00:30:16.466 A:middle
看看右下侧的灰色

00:30:16.506 --> 00:30:19.196 A:middle
变成了 100% 的亮色

00:30:19.196 --> 00:30:20.626 A:middle
因为我们给内容的背后

00:30:20.626 --> 00:30:23.056 A:middle
添加了白色的亮度

00:30:23.186 --> 00:30:24.076 A:middle
它就变成了这样

00:30:24.176 --> 00:30:25.346 A:middle
没有更亮的颜色了

00:30:26.466 --> 00:30:27.516 A:middle
但再看左上角

00:30:27.516 --> 00:30:29.726 A:middle
我们之前绘制的是黑色

00:30:29.726 --> 00:30:31.216 A:middle
无法进行任何提亮了

00:30:31.216 --> 00:30:33.076 A:middle
这意味着它完全消失了

00:30:33.076 --> 00:30:33.956 A:middle
事实上 如果不是我在那儿

00:30:33.956 --> 00:30:34.976 A:middle
画了一个圈儿

00:30:34.976 --> 00:30:35.516 A:middle
你都无法看到它

00:30:35.936 --> 00:30:37.716 A:middle
而中间的这些 我们能看到

00:30:37.716 --> 00:30:39.016 A:middle
不同程度的提亮

00:30:39.016 --> 00:30:40.576 A:middle
我们能用这个来

00:30:40.576 --> 00:30:42.126 A:middle
在我们的 App 中创建一个

00:30:42.496 --> 00:30:43.296 A:middle
内容层级结构

00:30:44.526 --> 00:30:45.976 A:middle
但这种效果从哪里来呢

00:30:47.176 --> 00:30:48.076 A:middle
这时我们的老朋友

00:30:48.076 --> 00:30:49.266 A:middle
NSAppearance 又派上了用场

00:30:50.356 --> 00:30:52.086 A:middle
我们有两种特殊的

00:30:52.086 --> 00:30:53.216 A:middle
动态的 NSAppearance 对象

00:30:53.546 --> 00:30:56.976 A:middle
vibrantDark 和 vibrantLight

00:30:57.066 --> 00:30:58.676 A:middle
他们都是完整的包

00:30:58.676 --> 00:31:00.086 A:middle
不仅包括

00:30:58.676 --> 00:31:00.086 A:middle
不仅包括

00:31:00.086 --> 00:31:01.786 A:middle
我们用作提亮或调暗效果的

00:31:01.786 --> 00:31:03.236 A:middle
精确的公式

00:31:03.236 --> 00:31:05.306 A:middle
而且还有一套

00:31:05.306 --> 00:31:06.876 A:middle
已被设计用在

00:31:06.876 --> 00:31:07.806 A:middle
该混合模式中的

00:31:07.806 --> 00:31:10.126 A:middle
控件图案和颜色定义

00:31:10.646 --> 00:31:13.426 A:middle
但你的代码要如何使用它呢

00:31:14.176 --> 00:31:15.436 A:middle
其实很简单

00:31:16.356 --> 00:31:18.286 A:middle
在你的 NSView 子类别中

00:31:18.286 --> 00:31:19.676 A:middle
你可以重写 allowsVibrancy 属性

00:31:19.676 --> 00:31:22.206 A:middle
将其返回为真

00:31:22.206 --> 00:31:23.206 A:middle
混合效果就会

00:31:23.206 --> 00:31:24.546 A:middle
自动应用到

00:31:24.546 --> 00:31:25.906 A:middle
你的视图及其

00:31:25.906 --> 00:31:28.000 A:middle
所有继承视图的绘制当中

00:31:29.946 --> 00:31:31.046 A:middle
特别的是 当你在这个

00:31:31.046 --> 00:31:33.116 A:middle
动态的环境中绘制时

00:31:33.116 --> 00:31:34.566 A:middle
你应该采用内置的

00:31:34.566 --> 00:31:35.886 A:middle
LabelColor 之一 取决于

00:31:35.886 --> 00:31:37.166 A:middle
内容的突显度

00:31:37.996 --> 00:31:38.976 A:middle
vibrantDark 和

00:31:38.976 --> 00:31:39.896 A:middle
vibrantLight 都有所有

00:31:39.896 --> 00:31:41.166 A:middle
这四种颜色的很好的定义

00:31:41.166 --> 00:31:42.636 A:middle
让你能够

00:31:42.636 --> 00:31:44.036 A:middle
创建很好的层级结构

00:31:45.476 --> 00:31:47.176 A:middle
但是 你也不是必须使用这些颜色

00:31:47.176 --> 00:31:48.696 A:middle
你可以使用任意你喜欢的颜色

00:31:48.696 --> 00:31:50.336 A:middle
但是我们最好不要

00:31:50.336 --> 00:31:51.866 A:middle
使用非灰度颜色

00:31:52.546 --> 00:31:53.936 A:middle
要避免使用非灰度颜色

00:31:53.976 --> 00:31:55.736 A:middle
因为一旦使用它们

00:31:56.126 --> 00:31:57.696 A:middle
混合效果就会

00:31:57.746 --> 00:31:59.696 A:middle
影响到你的颜色的设计意图

00:31:59.696 --> 00:32:00.876 A:middle
还会用一种你不想要的

00:31:59.696 --> 00:32:00.876 A:middle
还会用一种你不想要的

00:32:00.876 --> 00:32:02.366 A:middle
方式去冲染你的颜色

00:32:03.376 --> 00:32:04.726 A:middle
稍后我会给你一个例子

00:32:06.866 --> 00:32:08.836 A:middle
那么 再打开 App

00:32:09.236 --> 00:32:11.496 A:middle
我们可以继续在我们的视图上

00:32:11.496 --> 00:32:13.066 A:middle
重写 allowsVibrancy

00:32:13.066 --> 00:32:14.116 A:middle
在这里我们就只需要

00:32:14.116 --> 00:32:15.826 A:middle
在包含整个弹出框和

00:32:15.826 --> 00:32:18.806 A:middle
指示器的视图上设置它

00:32:19.246 --> 00:32:20.326 A:middle
现在我们来看看

00:32:21.896 --> 00:32:24.106 A:middle
好了 滑块看起来很棒

00:32:24.106 --> 00:32:25.946 A:middle
完全如我们所愿

00:32:25.946 --> 00:32:27.326 A:middle
但是这些表情是怎么回事

00:32:28.016 --> 00:32:28.756 A:middle
他们都被冲淡了

00:32:30.146 --> 00:32:32.286 A:middle
这是因为

00:32:32.286 --> 00:32:34.336 A:middle
我们在整个指示器视图上

00:32:34.336 --> 00:32:36.946 A:middle
设置 allowsVibrancy 时

00:32:36.946 --> 00:32:37.726 A:middle
我们不仅在该视图上

00:32:37.726 --> 00:32:39.636 A:middle
获得了动态混合

00:32:39.716 --> 00:32:41.056 A:middle
还包括了这些子视图

00:32:42.216 --> 00:32:43.456 A:middle
这里的修复方法很简单

00:32:44.016 --> 00:32:45.646 A:middle
我们只要将

00:32:45.646 --> 00:32:47.266 A:middle
allowsVibrancy 的定义

00:32:47.266 --> 00:32:49.086 A:middle
局部化到绘制滑块的部分

00:32:49.086 --> 00:32:50.386 A:middle
我们就能获得我们想要的效果

00:32:50.806 --> 00:32:52.146 A:middle
我们的滑块是动态绘制的

00:32:52.556 --> 00:32:53.786 A:middle
而表情按钮的颜色

00:32:53.836 --> 00:32:55.846 A:middle
也是我们想要的

00:32:57.366 --> 00:32:58.286 A:middle
当你进行动态绘制时

00:32:58.286 --> 00:32:59.536 A:middle
你往往只想要

00:32:59.536 --> 00:33:01.376 A:middle
在绘制你确实

00:32:59.536 --> 00:33:01.376 A:middle
在绘制你确实

00:33:01.656 --> 00:33:03.136 A:middle
想要动态化的内容的

00:33:03.136 --> 00:33:04.026 A:middle
叶视图上

00:33:04.026 --> 00:33:04.416 A:middle
应用 Vibrancy

00:33:05.476 --> 00:33:06.596 A:middle
并且 如果你有绘制

00:33:06.596 --> 00:33:08.186 A:middle
混合内容的视图

00:33:08.186 --> 00:33:09.296 A:middle
那就意味着你可能想要

00:33:09.296 --> 00:33:10.656 A:middle
将你的绘制

00:33:10.656 --> 00:33:12.596 A:middle
分成一些兄弟视图

00:33:12.596 --> 00:33:14.406 A:middle
以在你想要的粒度层级

00:33:14.406 --> 00:33:15.606 A:middle
应用 Vibrancy

00:33:17.616 --> 00:33:19.016 A:middle
而且 你还应该避免

00:33:19.016 --> 00:33:21.346 A:middle
将动态和非动态的视图相重叠

00:33:22.716 --> 00:33:24.736 A:middle
因为如果重叠了

00:33:24.736 --> 00:33:26.116 A:middle
混合模式将发生冲突

00:33:26.116 --> 00:33:27.336 A:middle
而一些你的内容就会以

00:33:27.336 --> 00:33:28.976 A:middle
一种你并不想要的

00:33:29.116 --> 00:33:31.396 A:middle
混合模式绘制

00:33:31.506 --> 00:33:33.306 A:middle
还有 不要通过将 Cocoa 控件

00:33:33.306 --> 00:33:34.696 A:middle
编入子集来

00:33:34.696 --> 00:33:35.516 A:middle
重写 allowsVibrancy

00:33:36.046 --> 00:33:37.146 A:middle
我前面提到过

00:33:37.146 --> 00:33:38.476 A:middle
vibrantLight

00:33:38.476 --> 00:33:40.156 A:middle
和 vibrantDark 外观是由

00:33:40.156 --> 00:33:41.786 A:middle
专门为混合模式指定的

00:33:41.786 --> 00:33:43.186 A:middle
控件图案和色彩所设计的

00:33:43.186 --> 00:33:45.046 A:middle
如果你移除这个混合模式

00:33:45.046 --> 00:33:47.096 A:middle
图案的对比度

00:33:47.096 --> 00:33:48.296 A:middle
就不尽如人意

00:33:48.296 --> 00:33:49.966 A:middle
因为我们使用

00:33:49.966 --> 00:33:51.396 A:middle
该混合模式

00:33:51.396 --> 00:33:52.636 A:middle
来让它们在素材中突出

00:33:52.636 --> 00:33:54.466 A:middle
因此你应该

00:33:54.466 --> 00:33:56.216 A:middle
只在你确实在重写绘制

00:33:56.216 --> 00:33:57.286 A:middle
且你知道哪种混合模式

00:33:57.286 --> 00:33:58.646 A:middle
或者非混合模式

00:33:58.646 --> 00:34:00.066 A:middle
适合你正在进行的

00:33:58.646 --> 00:34:00.066 A:middle
适合你正在进行的

00:34:00.066 --> 00:34:01.006 A:middle
绘制的情况下

00:34:01.006 --> 00:34:02.176 A:middle
对 allowsVibrancy

00:34:02.176 --> 00:34:02.646 A:middle
进行重写

00:34:03.536 --> 00:34:04.256 A:middle
这就是 Vibrancy

00:34:05.366 --> 00:34:06.316 A:middle
接下来 我要谈谈

00:34:06.316 --> 00:34:07.566 A:middle
背景风格

00:34:07.846 --> 00:34:09.085 A:middle
特别是我们用于选定的

00:34:09.085 --> 00:34:10.766 A:middle
背景风格

00:34:11.886 --> 00:34:12.726 A:middle
这里我们有一个

00:34:12.726 --> 00:34:14.706 A:middle
在 Aqua Cocoa App 中

00:34:14.706 --> 00:34:15.606 A:middle
非常典型的情况

00:34:16.556 --> 00:34:18.386 A:middle
在这个例子中 有一条

00:34:18.386 --> 00:34:20.775 A:middle
取“邮件” App 的消息

00:34:20.775 --> 00:34:22.126 A:middle
我们能看到

00:34:22.126 --> 00:34:23.775 A:middle
当我们在选定状态时

00:34:23.775 --> 00:34:25.646 A:middle
我们需要让这个表格行里的内容反色

00:34:26.036 --> 00:34:28.775 A:middle
来在蓝色的选择背景下

00:34:28.775 --> 00:34:29.656 A:middle
看起来自然

00:34:30.206 --> 00:34:32.786 A:middle
但如果我们

00:34:32.786 --> 00:34:36.025 A:middle
添加了 darkAqua 的话

00:34:36.025 --> 00:34:37.366 A:middle
就能看到我们并不能

00:34:37.366 --> 00:34:38.235 A:middle
单纯进行反色了

00:34:38.396 --> 00:34:39.815 A:middle
它们看起来不一致

00:34:40.216 --> 00:34:41.416 A:middle
因而我们需要对这些状态

00:34:41.416 --> 00:34:42.556 A:middle
进行语义化描述

00:34:43.206 --> 00:34:45.286 A:middle
如果对 Cocoa 熟悉的话

00:34:45.286 --> 00:34:48.216 A:middle
你可能已经看到了

00:34:48.216 --> 00:34:50.496 A:middle
NSView.BackgroundStyle 枚举

00:34:50.496 --> 00:34:51.726 A:middle
这其中包括很多个 Case

00:34:51.726 --> 00:34:54.036 A:middle
包括浅色和深色

00:34:54.036 --> 00:34:54.996 A:middle
并且 NSTableView 会自动

00:34:54.996 --> 00:34:56.226 A:middle
在 NSTableRowView 和 NSTableCellView 上

00:34:56.226 --> 00:34:58.816 A:middle
以及 NSTableCellView 的

00:34:58.816 --> 00:35:00.176 A:middle
直接子视图的

00:34:58.816 --> 00:35:00.176 A:middle
直接子视图的

00:35:00.176 --> 00:35:02.426 A:middle
所有控件上自动进行设置

00:35:03.856 --> 00:35:05.286 A:middle
传统情况下

00:35:05.286 --> 00:35:07.376 A:middle
我们会在未被选定行

00:35:07.376 --> 00:35:09.146 A:middle
设置了浅色的背景风格

00:35:09.146 --> 00:35:10.666 A:middle
在被选定行设置了深色的

00:35:11.206 --> 00:35:13.336 A:middle
但是现在 在这个

00:35:13.336 --> 00:35:15.416 A:middle
背景总是深色的

00:35:15.416 --> 00:35:16.586 A:middle
全新的漂亮的主题中

00:35:16.586 --> 00:35:18.526 A:middle
以前的命名便

00:35:18.526 --> 00:35:20.006 A:middle
不再有意义

00:35:20.006 --> 00:35:22.096 A:middle
所以我们要将它们分别重新命名为

00:35:22.096 --> 00:35:23.426 A:middle
“normal（普通）”和 “emphasized（强调）”

00:35:24.006 --> 00:35:25.616 A:middle
这些是更为语义化的描述

00:35:25.616 --> 00:35:27.356 A:middle
能够更好地匹配这些

00:35:27.356 --> 00:35:29.266 A:middle
应用在新版的 Cocoa App 中

00:35:29.266 --> 00:35:31.076 A:middle
枚举 Case 的方式

00:35:32.636 --> 00:35:33.866 A:middle
关于背景风格

00:35:33.866 --> 00:35:35.146 A:middle
我们还做了一些更新

00:35:35.396 --> 00:35:37.196 A:middle
包括 NSTableView 现在会

00:35:37.196 --> 00:35:38.446 A:middle
自动地将背景风格

00:35:38.446 --> 00:35:40.806 A:middle
循环设置在

00:35:40.806 --> 00:35:41.796 A:middle
表格行中的所有控件上

00:35:41.796 --> 00:35:43.586 A:middle
而不仅只是

00:35:43.586 --> 00:35:44.946 A:middle
你 cellView 中的

00:35:44.946 --> 00:35:45.496 A:middle
直接子视图上

00:35:46.006 --> 00:35:46.996 A:middle
所以 如果你已经了解了

00:35:46.996 --> 00:35:48.316 A:middle
那个背景风格

00:35:48.316 --> 00:35:49.556 A:middle
并试着将其应用到所有的子视图上

00:35:49.556 --> 00:35:51.036 A:middle
因为你想要为布局用一个堆叠视图

00:35:51.036 --> 00:35:52.226 A:middle
或是其他什么东西

00:35:52.226 --> 00:35:53.886 A:middle
你不再需要

00:35:53.886 --> 00:35:55.346 A:middle
在 Mojave 上进行这些

00:35:56.086 --> 00:35:58.286 A:middle
之前手动完成这些的人

00:35:58.286 --> 00:35:59.196 A:middle
正在鼓掌

00:35:59.196 --> 00:35:59.996 A:middle
谢谢 我曾经也是

00:36:01.376 --> 00:36:03.176 A:middle
此外 全部的四种 LabelColor

00:36:03.176 --> 00:36:05.306 A:middle
都自动适应到了

00:36:05.336 --> 00:36:07.416 A:middle
背景风格当中

00:36:07.416 --> 00:36:08.426 A:middle
这意味着你可以

00:36:08.426 --> 00:36:09.876 A:middle
创建一次你的内容层级

00:36:10.026 --> 00:36:11.606 A:middle
并语义化地描述它

00:36:11.606 --> 00:36:12.796 A:middle
那么它会在所有的这些环境中

00:36:12.796 --> 00:36:13.726 A:middle
看起来很棒

00:36:14.396 --> 00:36:17.086 A:middle
你也可以手动使用

00:36:17.086 --> 00:36:18.396 A:middle
这些强调的变体

00:36:18.396 --> 00:36:19.256 A:middle
举个例子

00:36:19.496 --> 00:36:20.826 A:middle
这是一个

00:36:20.826 --> 00:36:22.836 A:middle
看起来有点像“访达”里的图标视图

00:36:23.686 --> 00:36:25.366 A:middle
我们有两个标签

00:36:25.366 --> 00:36:26.546 A:middle
它们分别是 labelColor

00:36:26.686 --> 00:36:27.856 A:middle
和 secondaryLabelColor

00:36:28.796 --> 00:36:30.066 A:middle
我们想要在他们后面

00:36:30.066 --> 00:36:31.236 A:middle
绘制一个自定义选定效果

00:36:31.236 --> 00:36:32.306 A:middle
因此我们有了这个自定义的

00:36:32.306 --> 00:36:33.806 A:middle
基于 Bezier 路径的选定效果

00:36:33.806 --> 00:36:34.936 A:middle
我们也许会用另一个

00:36:34.936 --> 00:36:36.936 A:middle
已选定控件颜色来填充它

00:36:36.936 --> 00:36:39.216 A:middle
我们还想要在这个强调的风格中

00:36:40.146 --> 00:36:42.406 A:middle
将我们的标签与主要变体

00:36:42.466 --> 00:36:43.646 A:middle
及次要变体相匹配

00:36:44.596 --> 00:36:45.926 A:middle
这很简单

00:36:46.456 --> 00:36:47.676 A:middle
我们需要做的就是

00:36:47.676 --> 00:36:49.086 A:middle
在我们的文本域

00:36:49.086 --> 00:36:50.796 A:middle
将背景风格设为强调

00:36:50.796 --> 00:36:51.716 A:middle
这样它们会自动地

00:36:51.716 --> 00:36:53.456 A:middle
提供这个强调变体

00:36:53.916 --> 00:36:56.396 A:middle
很棒的是因为 我们已经将它描述成这样

00:36:56.396 --> 00:36:58.826 A:middle
当我们切换为深色模式时

00:36:58.826 --> 00:37:00.106 A:middle
一切就会如我们所愿

00:36:58.826 --> 00:37:00.106 A:middle
一切就会如我们所愿

00:37:00.106 --> 00:37:01.026 A:middle
我们不需要

00:37:01.026 --> 00:37:04.466 A:middle
再做什么

00:37:04.466 --> 00:37:05.846 A:middle
关于选定 最后要注意一下

00:37:06.906 --> 00:37:08.736 A:middle
通常你在侧边栏 菜单

00:37:08.736 --> 00:37:10.966 A:middle
及弹出框中所见到的选定素材

00:37:10.966 --> 00:37:15.546 A:middle
都跟随着 Mojave 上的强调色 偏好设置

00:37:16.186 --> 00:37:17.226 A:middle
这就意味着

00:37:17.226 --> 00:37:18.446 A:middle
如果我们绘制一个自定义蓝色

00:37:18.446 --> 00:37:20.116 A:middle
选定效果

00:37:20.116 --> 00:37:20.326 A:middle
它会不适应

00:37:21.426 --> 00:37:22.436 A:middle
而这时 你要用

00:37:22.436 --> 00:37:23.446 A:middle
NSVisualEffectView

00:37:23.756 --> 00:37:24.826 A:middle
它有一个特殊的选择素材

00:37:24.826 --> 00:37:26.726 A:middle
适用于这种情况

00:37:26.726 --> 00:37:27.696 A:middle
使用 NSVisualEffectView

00:37:27.696 --> 00:37:28.666 A:middle
该素材就会如你所愿

00:37:28.666 --> 00:37:30.000 A:middle
自动跟随偏好选项

00:37:33.716 --> 00:37:35.476 A:middle
好 最后一部分是重头戏

00:37:35.476 --> 00:37:36.676 A:middle
小技巧和方法

00:37:36.676 --> 00:37:38.156 A:middle
但在此之前 我想就

00:37:38.156 --> 00:37:39.316 A:middle
向后兼容谈几句

00:37:39.316 --> 00:37:40.996 A:middle
因为我们知道你们中的许多人

00:37:40.996 --> 00:37:42.446 A:middle
特别是使用 Mac 的人

00:37:42.446 --> 00:37:43.856 A:middle
喜欢将你们的 App

00:37:43.856 --> 00:37:45.256 A:middle
向后兼容到之前发布的

00:37:45.256 --> 00:37:47.016 A:middle
macOS 版本当中

00:37:47.016 --> 00:37:48.086 A:middle
要确保你在向后兼容时

00:37:48.086 --> 00:37:49.446 A:middle
无需进行任何必要的妥协

00:37:49.876 --> 00:37:51.456 A:middle
就可以使用深色模式

00:37:51.456 --> 00:37:52.456 A:middle
这十分重要

00:37:52.976 --> 00:37:56.186 A:middle
所以我会讲讲几个 API

00:37:56.186 --> 00:37:57.146 A:middle
检测它们的向后兼容情况

00:37:57.146 --> 00:37:59.076 A:middle
从系统颜色开始

00:37:59.506 --> 00:38:00.856 A:middle
所以 这里是我们所支持的

00:37:59.506 --> 00:38:00.856 A:middle
所以 这里是我们所支持的

00:38:00.856 --> 00:38:02.186 A:middle
系统颜色的样本

00:38:02.246 --> 00:38:03.686 A:middle
它们对外观来说是动态的

00:38:04.006 --> 00:38:05.076 A:middle
这里我要强调的是

00:38:05.076 --> 00:38:06.446 A:middle
高亮为绿色的部分

00:38:06.446 --> 00:38:07.586 A:middle
都至少已经在 10.10 Yosemite 里

00:38:07.586 --> 00:38:10.406 A:middle
出现过了

00:38:10.406 --> 00:38:12.896 A:middle
其中的很多甚至出现得更早

00:38:12.896 --> 00:38:15.426 A:middle
这就意味着我们希望

00:38:15.426 --> 00:38:17.166 A:middle
你可以使用

00:38:17.166 --> 00:38:18.416 A:middle
足够多的色彩

00:38:18.416 --> 00:38:20.046 A:middle
几乎可以描述

00:38:20.046 --> 00:38:22.206 A:middle
你所喜欢的任何 UI

00:38:22.206 --> 00:38:24.586 A:middle
并且它们已经直接可以向后兼容了

00:38:26.336 --> 00:38:28.266 A:middle
就自定义色彩而言

00:38:28.266 --> 00:38:29.576 A:middle
我们现在更偏爱的

00:38:29.576 --> 00:38:32.146 A:middle
定义它们的方式是使用素材目录

00:38:32.146 --> 00:38:33.936 A:middle
而这早在 10.13 就已经可用了

00:38:35.326 --> 00:38:37.376 A:middle
现在 如果要给你的任何素材

00:38:37.646 --> 00:38:39.276 A:middle
添加特定的深色变体

00:38:39.596 --> 00:38:41.246 A:middle
当你进行向后兼容时

00:38:41.246 --> 00:38:42.776 A:middle
这些深色变体都会

00:38:42.776 --> 00:38:43.816 A:middle
在之前版本的操作系统上

00:38:43.816 --> 00:38:45.786 A:middle
被忽略掉

00:38:45.786 --> 00:38:46.996 A:middle
所以那就是一个

00:38:47.036 --> 00:38:48.336 A:middle
内建的向后兼容解决方案

00:38:49.116 --> 00:38:50.126 A:middle
但是如果我想要再回去

00:38:50.126 --> 00:38:52.556 A:middle
对甚至比 10.13 更早的版本进行兼容

00:38:52.556 --> 00:38:55.256 A:middle
你可以用这样的方法

00:38:55.396 --> 00:38:56.776 A:middle
创建一个自定义色彩属性

00:38:57.826 --> 00:38:59.386 A:middle
这里我们只是封装

00:38:59.386 --> 00:39:01.116 A:middle
可用性检查

00:38:59.386 --> 00:39:01.116 A:middle
可用性检查

00:39:01.116 --> 00:39:02.816 A:middle
以在支持素材目录的操作系统上

00:39:02.816 --> 00:39:04.526 A:middle
使用我们的素材目录色彩

00:39:04.526 --> 00:39:05.856 A:middle
我们可以继续放一个

00:39:05.856 --> 00:39:07.516 A:middle
硬编码回调颜色

00:39:07.516 --> 00:39:09.106 A:middle
给那些旧的操作系统

00:39:09.506 --> 00:39:13.006 A:middle
桌面着色素材

00:39:13.006 --> 00:39:13.976 A:middle
是 Mojave 里的另一个新特点

00:39:13.976 --> 00:39:16.116 A:middle
如果你想要把

00:39:16.116 --> 00:39:17.556 A:middle
这些素材直接

00:39:17.556 --> 00:39:19.166 A:middle
编为 NSVisualEffectView

00:39:19.166 --> 00:39:20.546 A:middle
当然这只能在 10.14 上进行

00:39:20.546 --> 00:39:23.256 A:middle
但我们已经提供了

00:39:23.256 --> 00:39:24.526 A:middle
我们已经有一些类提供了

00:39:24.556 --> 00:39:25.256 A:middle
这些素材

00:39:25.256 --> 00:39:26.476 A:middle
包括 NSWindow

00:39:26.896 --> 00:39:28.236 A:middle
NSScrollView 以及 NSTableView

00:39:28.236 --> 00:39:29.966 A:middle
这些在最开始的时候

00:39:29.966 --> 00:39:32.336 A:middle
就已经提供给大家了

00:39:32.856 --> 00:39:35.456 A:middle
其实 有的在 macOS 10.0 之前就有了

00:39:35.776 --> 00:39:37.636 A:middle
因此 如果你正确地

00:39:37.636 --> 00:39:40.156 A:middle
进行设置

00:39:40.156 --> 00:39:41.956 A:middle
那么在之前的操作系统上

00:39:41.956 --> 00:39:43.686 A:middle
他们也会显示出

00:39:43.686 --> 00:39:44.626 A:middle
特殊的 NSColor

00:39:44.626 --> 00:39:46.866 A:middle
正如你所期望的那样

00:39:46.866 --> 00:39:48.116 A:middle
接着 如果你在 Mojave 上运行它

00:39:48.116 --> 00:39:49.786 A:middle
你会自动得到那个素材

00:39:50.866 --> 00:39:52.886 A:middle
当然 NSBox

00:39:52.886 --> 00:39:53.876 A:middle
自定义风格让你能够

00:39:53.876 --> 00:39:55.786 A:middle
设置一个填充色彩

00:39:56.316 --> 00:39:58.406 A:middle
并将它向后兼容到 Leopard 10.5 当中

00:39:58.406 --> 00:39:59.096 A:middle
NSCollectionView 也是一样

00:39:59.496 --> 00:40:00.556 A:middle
而无论你用的是

00:39:59.496 --> 00:40:00.556 A:middle
而无论你用的是

00:40:00.556 --> 00:40:01.626 A:middle
之前的 NSCollectionView API

00:40:01.746 --> 00:40:03.406 A:middle
还是最新的版本

00:40:03.406 --> 00:40:05.016 A:middle
都不会影响它的工作

00:40:05.016 --> 00:40:07.776 A:middle
当然我们希望你用新的版本

00:40:08.396 --> 00:40:11.706 A:middle
最后是 启动深色模式

00:40:12.266 --> 00:40:14.386 A:middle
通常这只是在关联了

00:40:14.386 --> 00:40:17.426 A:middle
10.14 SDK 之后才可以进行

00:40:17.426 --> 00:40:19.966 A:middle
但是你也看到了 其实

00:40:19.966 --> 00:40:21.376 A:middle
创建一个深色模式下的 App

00:40:21.376 --> 00:40:23.126 A:middle
所需要的工具

00:40:23.126 --> 00:40:24.876 A:middle
并非 10.14 SDK 上专有

00:40:24.876 --> 00:40:26.866 A:middle
你完全可以

00:40:26.866 --> 00:40:28.466 A:middle
用现有的 10.13 SDK

00:40:28.466 --> 00:40:30.126 A:middle
来进行创建

00:40:31.246 --> 00:40:33.356 A:middle
那么 如果在某种情况下

00:40:33.356 --> 00:40:34.396 A:middle
你无法更新你的 SDK

00:40:34.396 --> 00:40:36.446 A:middle
我们有个 Info.plist Key

00:40:36.446 --> 00:40:38.036 A:middle
你可以用它

00:40:38.036 --> 00:40:39.326 A:middle
进入深色模式

00:40:39.926 --> 00:40:42.286 A:middle
它叫做 NSRequiresAquaSystemAppearance

00:40:42.576 --> 00:40:43.706 A:middle
如果将其设为 “NO”

00:40:43.706 --> 00:40:45.206 A:middle
那么就启动了深色模式

00:40:45.206 --> 00:40:46.706 A:middle
即使你使用的是

00:40:46.706 --> 00:40:47.926 A:middle
之前的 SDK

00:40:48.546 --> 00:40:50.176 A:middle
当然我们十分希望你

00:40:50.446 --> 00:40:51.396 A:middle
能更新你的 SDK

00:40:51.396 --> 00:40:52.696 A:middle
因为这是一个更明智的选择

00:40:53.586 --> 00:40:55.276 A:middle
你也可以将该秘钥设为 “YES”

00:40:55.276 --> 00:40:57.136 A:middle
使其暂时失效

00:40:57.136 --> 00:40:58.916 A:middle
我想强调一下 只是暂时

00:40:59.326 --> 00:41:00.586 A:middle
你可以利用它给你的时间

00:40:59.326 --> 00:41:00.586 A:middle
你可以利用它给你的时间

00:41:00.586 --> 00:41:01.956 A:middle
来获取一个完美

00:41:01.956 --> 00:41:03.506 A:middle
支持深色模式的

00:41:03.506 --> 00:41:05.146 A:middle
更新版本

00:41:07.876 --> 00:41:09.576 A:middle
最后是 一些技巧和方法

00:41:11.416 --> 00:41:13.126 A:middle
首先

00:41:13.126 --> 00:41:15.196 A:middle
当你更新你的 App 时

00:41:15.196 --> 00:41:16.016 A:middle
你可以彻底审查

00:41:16.016 --> 00:41:17.866 A:middle
你对 NSColor 的使用情况

00:41:17.906 --> 00:41:21.066 A:middle
你只需要通过搜索你的代码库

00:41:21.066 --> 00:41:22.606 A:middle
并查看你使用它的地方

00:41:23.156 --> 00:41:24.066 A:middle
你可能会发现

00:41:24.066 --> 00:41:25.866 A:middle
一些可以升级的地方

00:41:25.866 --> 00:41:27.756 A:middle
来优化你的

00:41:27.756 --> 00:41:28.786 A:middle
深色模式体验

00:41:28.786 --> 00:41:30.536 A:middle
比如说 这里

00:41:30.536 --> 00:41:31.856 A:middle
我们发现在一些地方

00:41:31.856 --> 00:41:33.016 A:middle
我们正在使用非动态的

00:41:33.046 --> 00:41:34.886 A:middle
命名色彩以及一些

00:41:34.886 --> 00:41:36.126 A:middle
包含硬编码的色彩

00:41:36.386 --> 00:41:37.556 A:middle
当我们遇到这些情况时

00:41:37.586 --> 00:41:39.756 A:middle
可以选择以下

00:41:39.756 --> 00:41:41.956 A:middle
两种方案中的其中一种

00:41:42.456 --> 00:41:44.876 A:middle
第一种 也许有一种

00:41:44.876 --> 00:41:46.226 A:middle
内建系统色彩

00:41:46.226 --> 00:41:47.746 A:middle
它能描述我想要的效果

00:41:47.746 --> 00:41:48.976 A:middle
在外观中也是完全动态的

00:41:49.376 --> 00:41:51.596 A:middle
或者 第二种

00:41:51.596 --> 00:41:53.006 A:middle
这是一个自定义色彩

00:41:53.006 --> 00:41:54.576 A:middle
它对我的 App 来说非常重要

00:41:55.286 --> 00:41:57.066 A:middle
第一种情况非常简单

00:41:57.066 --> 00:41:58.236 A:middle
我们之前在这个标签上使用黑色

00:41:58.236 --> 00:41:59.526 A:middle
之后我们可以

00:41:59.526 --> 00:42:00.696 A:middle
将其转为 labelColor

00:41:59.526 --> 00:42:00.696 A:middle
将其转为 labelColor

00:42:00.696 --> 00:42:02.106 A:middle
这样一来

00:42:02.106 --> 00:42:02.996 A:middle
它就是完全动态的了

00:42:03.956 --> 00:42:05.756 A:middle
但在第二种情况中

00:42:05.756 --> 00:42:06.816 A:middle
我们也许发现这个色彩

00:42:06.816 --> 00:42:07.906 A:middle
对我们的 App 是十分重要的

00:42:07.906 --> 00:42:09.476 A:middle
把它放入素材目录

00:42:09.476 --> 00:42:11.386 A:middle
是一个很好的想法

00:42:12.576 --> 00:42:13.646 A:middle
我们不仅清理了我们的代码

00:42:13.646 --> 00:42:15.286 A:middle
因为我们从代码中

00:42:15.286 --> 00:42:16.466 A:middle
删掉了这些乱七八糟的数字

00:42:16.466 --> 00:42:17.746 A:middle
并将它们放入一个数据驱动源中

00:42:18.396 --> 00:42:20.186 A:middle
我们还可以接着为该色彩

00:42:20.396 --> 00:42:22.616 A:middle
设置一个深色变体

00:42:22.616 --> 00:42:24.206 A:middle
这样我们就能嵌入

00:42:24.206 --> 00:42:25.286 A:middle
对深色模式的支持了

00:42:28.136 --> 00:42:29.716 A:middle
另一个常见的问题来源是

00:42:29.716 --> 00:42:30.866 A:middle
离屏绘制

00:42:31.526 --> 00:42:33.266 A:middle
要进行离屏绘制

00:42:33.406 --> 00:42:34.226 A:middle
你需要确保

00:42:34.226 --> 00:42:35.266 A:middle
你对外观

00:42:35.266 --> 00:42:36.736 A:middle
以及其他绘制条件

00:42:36.736 --> 00:42:37.676 A:middle
十分敏感

00:42:38.216 --> 00:42:39.546 A:middle
关于这个 有个情况很常见

00:42:39.546 --> 00:42:41.386 A:middle
就是用 NSImage 中的 lockFocus API

00:42:41.386 --> 00:42:44.246 A:middle
来试着绘制自定义 NSImage

00:42:45.246 --> 00:42:46.266 A:middle
这种情况下 我们要

00:42:46.266 --> 00:42:47.656 A:middle
试着画一个带标记的图像

00:42:48.726 --> 00:42:49.906 A:middle
我们有一个基础图像

00:42:49.906 --> 00:42:50.906 A:middle
但由于我们的蜥蜴有了一些新的改变

00:42:50.906 --> 00:42:52.036 A:middle
我们需要在它的头像上

00:42:52.036 --> 00:42:53.286 A:middle
添加一个标记

00:42:53.926 --> 00:42:55.786 A:middle
在这个例子里

00:42:55.786 --> 00:42:57.776 A:middle
我们创建一个 NSImage

00:42:57.776 --> 00:42:59.796 A:middle
并在它上面调用 lockFocus() 之后进行绘制

00:43:00.736 --> 00:43:02.206 A:middle
但问题是

00:43:02.206 --> 00:43:03.816 A:middle
一旦我们使用了 lockFocus

00:43:04.196 --> 00:43:05.656 A:middle
我们就失去了许多语义

00:43:05.856 --> 00:43:07.906 A:middle
我们现在只有一个位图表示

00:43:08.466 --> 00:43:10.496 A:middle
如果外观发生了改变

00:43:10.756 --> 00:43:12.086 A:middle
或者其他许多情况改变了

00:43:12.086 --> 00:43:13.106 A:middle
包括我们所说的

00:43:13.106 --> 00:43:14.436 A:middle
基底比例系数

00:43:14.436 --> 00:43:15.606 A:middle
比如你将窗口从一个

00:43:15.606 --> 00:43:16.966 A:middle
视网膜显示屏移动到了

00:43:16.966 --> 00:43:18.926 A:middle
一个非视网膜显示屏

00:43:18.926 --> 00:43:19.706 A:middle
突然 这个绘制就过时了

00:43:20.846 --> 00:43:22.106 A:middle
所以 更好地解决方法就是

00:43:22.106 --> 00:43:24.596 A:middle
使用基于代码块的 NSImage

00:43:24.866 --> 00:43:27.386 A:middle
用图像初始化程序

00:43:27.586 --> 00:43:28.796 A:middle
和 NSImage(size: flipped: )绘制处理程序

00:43:29.656 --> 00:43:31.516 A:middle
你可以直接进行

00:43:31.516 --> 00:43:32.516 A:middle
与之前一样的绘制

00:43:32.516 --> 00:43:34.426 A:middle
但要在这个代码块中进行

00:43:34.716 --> 00:43:36.286 A:middle
当你给这种图像指定

00:43:36.286 --> 00:43:38.286 A:middle
一个 NSImageView 时

00:43:38.286 --> 00:43:39.466 A:middle
这个代码块会自动重新运行

00:43:39.466 --> 00:43:41.796 A:middle
如果外观发生变化

00:43:41.796 --> 00:43:43.636 A:middle
比例系数发生变化

00:43:43.666 --> 00:43:45.036 A:middle
色彩空间发生变化

00:43:45.036 --> 00:43:45.946 A:middle
其实任何东西发生变化都会导致它重新运行

00:43:46.706 --> 00:43:48.006 A:middle
这是一个好消息

00:43:48.006 --> 00:43:49.816 A:middle
因为如果我们的标记填充色彩

00:43:49.816 --> 00:43:51.336 A:middle
是一个动态色彩

00:43:51.336 --> 00:43:52.296 A:middle
那么它就会一直处理为

00:43:52.296 --> 00:43:53.196 A:middle
正确的外观

00:43:54.696 --> 00:43:55.906 A:middle
还有一些其他的方法

00:43:55.906 --> 00:43:56.546 A:middle
也许能帮你进行

00:43:56.546 --> 00:43:57.206 A:middle
离屏绘制

00:43:57.906 --> 00:43:59.056 A:middle
你也许在通过

00:43:59.056 --> 00:44:00.646 A:middle
NSGraphicsContext

00:43:59.056 --> 00:44:00.646 A:middle
NSGraphicsContext

00:44:00.776 --> 00:44:02.036 A:middle
或 CGBitmapContext

00:44:02.036 --> 00:44:03.326 A:middle
制作自定义位图图形环境

00:44:03.876 --> 00:44:04.866 A:middle
根据你在做的事情

00:44:04.866 --> 00:44:06.546 A:middle
这些也许还可以

00:44:06.546 --> 00:44:07.856 A:middle
用一个基于代码块的

00:44:07.856 --> 00:44:09.066 A:middle
NSImage 来替换

00:44:09.556 --> 00:44:11.796 A:middle
再者 如果使用参数为 NSRect

00:44:11.796 --> 00:44:13.826 A:middle
的 cacheDisplay() 方法

00:44:13.826 --> 00:44:15.676 A:middle
来将你的图片缓存为

00:44:15.676 --> 00:44:18.186 A:middle
一个位图表示

00:44:18.186 --> 00:44:19.356 A:middle
那么要注意

00:44:19.356 --> 00:44:20.656 A:middle
这种方法并不会捕捉到一些

00:44:21.006 --> 00:44:22.966 A:middle
我们更进阶的渲染技术

00:44:22.966 --> 00:44:25.356 A:middle
比如素材和模糊

00:44:25.356 --> 00:44:26.466 A:middle
如果你的外观改变了

00:44:26.466 --> 00:44:27.546 A:middle
那么这种创建绘图的方法

00:44:27.546 --> 00:44:28.856 A:middle
也就过时了

00:44:28.856 --> 00:44:33.376 A:middle
要注意这点

00:44:33.506 --> 00:44:35.676 A:middle
你也许还会碰上另一种情况

00:44:36.996 --> 00:44:38.826 A:middle
如果你有一个 NSAttributedString 或

00:44:38.866 --> 00:44:40.416 A:middle
NSTextStorage

00:44:40.416 --> 00:44:41.806 A:middle
而你在手动操作这些属性

00:44:42.166 --> 00:44:44.926 A:middle
在这里 我将我的属性设置为

00:44:44.926 --> 00:44:47.226 A:middle
一个带着字体的词典

00:44:48.166 --> 00:44:49.316 A:middle
然后就会呈现出这样的效果

00:44:49.316 --> 00:44:51.496 A:middle
甚至当你切换为深色模式时

00:44:51.496 --> 00:44:52.596 A:middle
你的文本仍在绘制黑色

00:44:52.596 --> 00:44:53.526 A:middle
这里发生了什么

00:44:54.666 --> 00:44:56.286 A:middle
好 我们错过了一个前景颜色属性

00:44:56.286 --> 00:44:58.536 A:middle
当文本绘制引擎

00:44:58.536 --> 00:45:00.136 A:middle
遇到一系列的

00:44:58.536 --> 00:45:00.136 A:middle
遇到一系列的

00:45:00.136 --> 00:45:02.956 A:middle
没有一个前景颜色属性的属性字符串时

00:45:02.956 --> 00:45:04.956 A:middle
它便会默认为黑色

00:45:04.956 --> 00:45:06.596 A:middle
这就是它一直默认的颜色

00:45:06.596 --> 00:45:08.006 A:middle
并且它还会继续

00:45:08.006 --> 00:45:09.296 A:middle
为了兼容而保持

00:45:09.296 --> 00:45:10.016 A:middle
默认颜色

00:45:11.036 --> 00:45:12.596 A:middle
修复方法之一是

00:45:12.596 --> 00:45:13.586 A:middle
给我们的一个动态系统色彩

00:45:13.586 --> 00:45:15.726 A:middle
明确地设置一个前景颜色

00:45:15.726 --> 00:45:17.436 A:middle
接着就会产生我们

00:45:17.436 --> 00:45:18.236 A:middle
所期待的效果

00:45:19.616 --> 00:45:21.596 A:middle
但是还有一种更好的方法

00:45:21.596 --> 00:45:22.596 A:middle
如果你手动绘制

00:45:22.596 --> 00:45:24.196 A:middle
属性字符串

00:45:24.196 --> 00:45:25.776 A:middle
你应该切换成一个 Cocoa 控件

00:45:25.776 --> 00:45:27.256 A:middle
比如一个 NSTextField

00:45:27.536 --> 00:45:28.426 A:middle
它将自动为你完成这些

00:45:28.426 --> 00:45:30.876 A:middle
或者 如果你正在

00:45:30.876 --> 00:45:32.386 A:middle
操作一个 textView 的存储

00:45:32.386 --> 00:45:36.376 A:middle
我们有新的 API

00:45:36.376 --> 00:45:38.256 A:middle
叫做 performValidatedReplacement

00:45:38.256 --> 00:45:40.636 A:middle
它会在 textView 上产生不错的效果

00:45:40.966 --> 00:45:42.846 A:middle
如果你继续用一个 textView 中的

00:45:43.026 --> 00:45:45.336 A:middle
属性字符串

00:45:45.336 --> 00:45:47.976 A:middle
来代替一个字符串

00:45:47.976 --> 00:45:50.336 A:middle
那它就会用 textView 中的正在使用属性

00:45:50.406 --> 00:45:51.456 A:middle
填充任何缺失的属性

00:45:51.456 --> 00:45:54.666 A:middle
所以你可以继续

00:45:54.666 --> 00:45:55.776 A:middle
制定新的属性字符串

00:45:55.776 --> 00:45:56.936 A:middle
而不用手动

00:45:57.036 --> 00:46:00.000 A:middle
合并所有的属性

00:46:03.376 --> 00:46:04.546 A:middle
这是我们在一些地方

00:46:04.546 --> 00:46:05.776 A:middle
所遇到的问题

00:46:06.296 --> 00:46:07.526 A:middle
即将外观设置在了

00:46:07.526 --> 00:46:08.666 A:middle
“Interface Builder（界面构建器）”里

00:46:09.346 --> 00:46:10.246 A:middle
如果你继续创建

00:46:10.246 --> 00:46:11.576 A:middle
并调试你的 App

00:46:11.576 --> 00:46:13.646 A:middle
并且 你的 App 中的某些地方

00:46:13.686 --> 00:46:15.596 A:middle
并没有切换过来

00:46:15.596 --> 00:46:18.136 A:middle
也许是因为你的界面构建器中有这个

00:46:18.136 --> 00:46:20.496 A:middle
硬编码的 Aqua 外观

00:46:20.746 --> 00:46:21.976 A:middle
这个很容易被忽视

00:46:22.016 --> 00:46:23.756 A:middle
因为在今天之前

00:46:23.756 --> 00:46:24.956 A:middle
你一直都是在用 Aqua 运行程序

00:46:25.366 --> 00:46:26.536 A:middle
因此你并没有注意到这点

00:46:27.056 --> 00:46:29.226 A:middle
这个修复方法也很简单

00:46:29.866 --> 00:46:30.976 A:middle
如果你将这个

00:46:30.976 --> 00:46:32.696 A:middle
在弹出菜单里

00:46:32.696 --> 00:46:34.206 A:middle
设置回“Inherited（继承）”选项

00:46:34.206 --> 00:46:36.146 A:middle
你的视图会自动进行继承它的父辈

00:46:36.696 --> 00:46:40.516 A:middle
还有一个特殊的例子是

00:46:40.626 --> 00:46:41.556 A:middle
NSVisualEffectView

00:46:41.916 --> 00:46:42.966 A:middle
如果你在界面构建器里

00:46:42.966 --> 00:46:44.646 A:middle
或者在代码里

00:46:44.646 --> 00:46:45.866 A:middle
有一个 visualEffectView

00:46:45.866 --> 00:46:47.516 A:middle
你很可能要将两种动态的外观中的一种

00:46:47.516 --> 00:46:49.656 A:middle
设置在它上面

00:46:49.746 --> 00:46:51.936 A:middle
好消息是

00:46:51.936 --> 00:46:55.086 A:middle
在 macOS 10.14 中不再需要这样设置

00:46:55.436 --> 00:46:56.606 A:middle
而 NSVisualEffectView 将自动

00:46:56.676 --> 00:46:58.076 A:middle
根据他所继承的外观

00:46:58.076 --> 00:47:00.516 A:middle
选择正确的动态外观

00:46:58.076 --> 00:47:00.516 A:middle
选择正确的动态外观

00:47:00.886 --> 00:47:02.246 A:middle
所以 如果它继承了 darkAqua

00:47:02.366 --> 00:47:03.526 A:middle
它就会选择 vibrantDark

00:47:03.826 --> 00:47:05.176 A:middle
而如果继承了 Aqua

00:47:05.176 --> 00:47:05.916 A:middle
就会选择 vibrantLight

00:47:06.146 --> 00:47:08.666 A:middle
修补方法是这样

00:47:08.666 --> 00:47:10.186 A:middle
在界面构建器中

00:47:10.186 --> 00:47:11.606 A:middle
你可以将其设置为 “Inherited”

00:47:11.606 --> 00:47:12.666 A:middle
然后在代码里

00:47:12.666 --> 00:47:14.236 A:middle
你可以设置外观 “nil”

00:47:14.236 --> 00:47:14.806 A:middle
或者删除你的重写

00:47:15.126 --> 00:47:20.086 A:middle
说到界面构建器

00:47:20.086 --> 00:47:22.016 A:middle
它是一个很棒的工具

00:47:22.016 --> 00:47:23.766 A:middle
可以很好地用来设计和

00:47:23.766 --> 00:47:24.656 A:middle
预览你的视图

00:47:25.206 --> 00:47:27.136 A:middle
比如说 这里有一个视图

00:47:27.136 --> 00:47:28.726 A:middle
确切地说是一个

00:47:28.726 --> 00:47:30.596 A:middle
使用界面构建器设计工具的自定义视图

00:47:30.986 --> 00:47:32.086 A:middle
我在渲染一个渐变的同时

00:47:32.086 --> 00:47:34.026 A:middle
我就能直接在画布中看到它

00:47:34.326 --> 00:47:35.926 A:middle
默认情况下

00:47:35.926 --> 00:47:37.886 A:middle
画布会自动用它当前的外观模式

00:47:37.886 --> 00:47:39.496 A:middle
来预览我的自定视图

00:47:39.496 --> 00:47:41.426 A:middle
在这里是深色模式

00:47:42.336 --> 00:47:43.596 A:middle
但是看看下面

00:47:43.596 --> 00:47:45.306 A:middle
这有一个新的切换开关

00:47:45.306 --> 00:47:46.646 A:middle
你可以把它切换为

00:47:46.646 --> 00:47:47.906 A:middle
浅色外观

00:47:47.906 --> 00:47:48.986 A:middle
这样你可以预览你的视图

00:47:48.986 --> 00:47:50.426 A:middle
在任意外观中的样子了

00:47:50.936 --> 00:47:52.936 A:middle
多亏了界面构建器

00:47:52.936 --> 00:47:54.156 A:middle
对素材目录颜色的

00:47:54.156 --> 00:47:56.446 A:middle
良好支持

00:47:56.446 --> 00:47:57.876 A:middle
我们才能使用我们的

00:47:57.876 --> 00:47:59.436 A:middle
自定义素材目录颜色

00:47:59.436 --> 00:48:01.116 A:middle
它们有浅色和深色的变体

00:47:59.436 --> 00:48:01.116 A:middle
它们有浅色和深色的变体

00:48:01.116 --> 00:48:03.116 A:middle
我们可以在画布中实时预览

00:48:03.696 --> 00:48:04.776 A:middle
如果你看到那里有个

00:48:04.776 --> 00:48:05.966 A:middle
固定在弹出按钮前的

00:48:05.966 --> 00:48:07.156 A:middle
小箭头按钮

00:48:07.156 --> 00:48:08.096 A:middle
你可以用它来追踪

00:48:08.096 --> 00:48:09.396 A:middle
直接进入到你的

00:48:09.396 --> 00:48:10.936 A:middle
素材目录的定义中

00:48:10.936 --> 00:48:12.866 A:middle
你可以实时看到一切变化

00:48:13.816 --> 00:48:15.106 A:middle
你可以直接这样做

00:48:15.106 --> 00:48:16.416 A:middle
不用构建或者重新编译

00:48:16.456 --> 00:48:18.136 A:middle
当你构建并运行时

00:48:18.136 --> 00:48:20.646 A:middle
你会在你的调试工具栏中

00:48:20.646 --> 00:48:22.646 A:middle
看到一个新的东西

00:48:22.646 --> 00:48:24.056 A:middle
它会产生菜单

00:48:24.056 --> 00:48:25.766 A:middle
让你为你的 App 选择外观

00:48:26.446 --> 00:48:27.636 A:middle
这样很方便

00:48:27.636 --> 00:48:29.096 A:middle
你可以预览你的 App

00:48:29.096 --> 00:48:30.746 A:middle
在各种外观下的样子

00:48:30.746 --> 00:48:32.426 A:middle
不用重新配置整个系统

00:48:33.686 --> 00:48:34.886 A:middle
你不仅可以选择浅色还是深色

00:48:34.886 --> 00:48:36.056 A:middle
也可以选择

00:48:36.056 --> 00:48:37.066 A:middle
高对比度变体

00:48:37.066 --> 00:48:38.996 A:middle
并对它们进行测试

00:48:40.146 --> 00:48:41.276 A:middle
同时 如果你有一台

00:48:41.276 --> 00:48:42.796 A:middle
带触控栏的 Mac

00:48:42.796 --> 00:48:44.476 A:middle
它也会在你的触控栏出现

00:48:44.476 --> 00:48:45.566 A:middle
你甚至不需要离开 App

00:48:45.566 --> 00:48:47.156 A:middle
回到 Xcode 中 就可以

00:48:47.746 --> 00:48:48.000 A:middle
完成这个操作

00:48:50.316 --> 00:48:51.326 A:middle
最后 我想谈谈

00:48:51.326 --> 00:48:53.176 A:middle
Xcode 中的一个很棒的工具

00:48:53.176 --> 00:48:54.326 A:middle
它非常适合被用于调试

00:48:54.326 --> 00:48:55.426 A:middle
深色模式下的 App

00:48:56.346 --> 00:48:58.676 A:middle
这是我们的 App

00:48:58.676 --> 00:48:59.996 A:middle
看起来还不错

00:48:59.996 --> 00:49:01.536 A:middle
没什么不对的地方

00:48:59.996 --> 00:49:01.536 A:middle
没什么不对的地方

00:49:02.286 --> 00:49:04.156 A:middle
但是当我稍微来回

00:49:04.156 --> 00:49:06.586 A:middle
滑动几下 哦

00:49:06.586 --> 00:49:07.476 A:middle
我发现了一些

00:49:07.476 --> 00:49:08.236 A:middle
意想不到的事

00:49:08.346 --> 00:49:09.326 A:middle
这里有一个浅色的背景

00:49:09.426 --> 00:49:11.516 A:middle
隐藏在背后某处

00:49:11.516 --> 00:49:12.936 A:middle
而如果不是这个小小的滑动

00:49:12.936 --> 00:49:14.056 A:middle
我们很难看到它

00:49:14.776 --> 00:49:16.446 A:middle
这是应该使用 “View Debugger（视图调试器）”

00:49:16.446 --> 00:49:17.446 A:middle
的一个很好的例子

00:49:18.686 --> 00:49:19.606 A:middle
用视图调试器的

00:49:19.606 --> 00:49:22.026 A:middle
扩展 3D 视图

00:49:22.026 --> 00:49:23.336 A:middle
就能很容易地

00:49:23.416 --> 00:49:24.686 A:middle
看到我们那个不太对的视图

00:49:25.606 --> 00:49:26.786 A:middle
在这个例子中 我们能看到

00:49:26.786 --> 00:49:27.756 A:middle
虽然我们的集合视图

00:49:27.756 --> 00:49:29.266 A:middle
显示出我们想要的背景

00:49:29.416 --> 00:49:31.116 A:middle
但在它后面的滚动视图的

00:49:31.116 --> 00:49:33.526 A:middle
背景却仍然是浅色的

00:49:33.526 --> 00:49:35.556 A:middle
我们可以选出这部分

00:49:35.556 --> 00:49:37.396 A:middle
并用 Inspector 来检查

00:49:37.396 --> 00:49:38.226 A:middle
它是如何配置的

00:49:38.226 --> 00:49:39.606 A:middle
在这里 我们可以确定

00:49:39.606 --> 00:49:40.726 A:middle
没错 它有一个

00:49:40.726 --> 00:49:42.156 A:middle
硬编码的白色

00:49:42.156 --> 00:49:43.776 A:middle
这很好处理

00:49:44.916 --> 00:49:46.036 A:middle
视图调试器在 Xcode 10 中

00:49:46.036 --> 00:49:47.276 A:middle
做了很多优化

00:49:47.276 --> 00:49:48.756 A:middle
能够很好地调试

00:49:48.756 --> 00:49:49.836 A:middle
深色模式的 App

00:49:50.666 --> 00:49:53.096 A:middle
包括色彩

00:49:53.146 --> 00:49:54.326 A:middle
它们现在可以显示出色彩的名字

00:49:54.326 --> 00:49:55.756 A:middle
包括动态系统色彩

00:49:55.756 --> 00:49:57.416 A:middle
和你的素材目录色彩

00:49:57.416 --> 00:49:59.016 A:middle
这样你可以分辨出

00:49:59.096 --> 00:50:00.546 A:middle
这些 RGB 成分来自哪里

00:49:59.096 --> 00:50:00.546 A:middle
这些 RGB 成分来自哪里

00:50:00.546 --> 00:50:02.476 A:middle
它还会显示你的

00:50:02.476 --> 00:50:03.896 A:middle
NSAppearance 视图的配置

00:50:04.206 --> 00:50:06.946 A:middle
包括它要绘制的外观

00:50:06.946 --> 00:50:08.586 A:middle
以及在该对象上

00:50:08.586 --> 00:50:10.196 A:middle
是否有任何

00:50:10.196 --> 00:50:12.000 A:middle
NSAppearance 的局部重写

00:50:14.496 --> 00:50:16.396 A:middle
好了 我们已经涉及了

00:50:16.396 --> 00:50:17.806 A:middle
非常多的内容

00:50:17.806 --> 00:50:18.836 A:middle
让我们快速回顾一下

00:50:18.836 --> 00:50:19.096 A:middle
确保我们能记住

00:50:19.926 --> 00:50:21.436 A:middle
我们从 NSAppearance 开始

00:50:21.906 --> 00:50:23.526 A:middle
用它顺利地

00:50:23.526 --> 00:50:25.226 A:middle
绘制了基于主题的

00:50:25.226 --> 00:50:26.486 A:middle
自定义视图

00:50:27.596 --> 00:50:28.796 A:middle
然后我们学习了如何

00:50:28.796 --> 00:50:30.356 A:middle
使用全新的 NSVisualEffectView

00:50:30.356 --> 00:50:31.906 A:middle
素材的调色盘

00:50:31.966 --> 00:50:33.506 A:middle
来增加我们 UI 的深度并美化它

00:50:34.306 --> 00:50:35.686 A:middle
我们谈到了如何在一些

00:50:35.686 --> 00:50:37.026 A:middle
有趣的环境中绘图

00:50:37.026 --> 00:50:39.176 A:middle
包括 Vibrancy 和选定

00:50:39.516 --> 00:50:40.826 A:middle
之后谈到通过一些方法

00:50:40.826 --> 00:50:42.056 A:middle
Xcode 可以帮你

00:50:42.056 --> 00:50:43.406 A:middle
设计和调试你的 App 的

00:50:43.406 --> 00:50:44.566 A:middle
深色模式

00:50:44.916 --> 00:50:46.196 A:middle
你可以像往常一样 前往

00:50:46.196 --> 00:50:47.886 A:middle
developer.apple.com

00:50:47.886 --> 00:50:49.286 A:middle
再次观看此次讨论会的视频

00:50:49.286 --> 00:50:51.196 A:middle
也可以观看任何

00:50:51.196 --> 00:50:52.166 A:middle
相关的资源

00:50:52.576 --> 00:50:54.186 A:middle
我们今天有个特别的

00:50:54.186 --> 00:50:58.106 A:middle
Cocoa 和深色模式实验室

00:50:58.106 --> 00:50:59.266 A:middle
在下午 2:00 进行

00:50:59.266 --> 00:51:00.326 A:middle
届时不仅会有 Cocoa 的工程师

00:50:59.266 --> 00:51:00.326 A:middle
届时不仅会有 Cocoa 的工程师

00:51:00.326 --> 00:51:01.426 A:middle
帮助你解决代码问题

00:51:01.426 --> 00:51:02.836 A:middle
还有人机界面设计师

00:51:02.836 --> 00:51:03.766 A:middle
帮助你解决

00:51:03.766 --> 00:51:04.936 A:middle
你的设计问题

00:51:05.286 --> 00:51:07.136 A:middle
所以先去吃午饭吧

00:51:07.136 --> 00:51:08.646 A:middle
思考一下深色模式

00:51:08.646 --> 00:51:09.676 A:middle
然后再来与我们相会

00:51:09.996 --> 00:51:11.086 A:middle
最后 我们还有一个

00:51:11.086 --> 00:51:12.546 A:middle
额外的 Cocoa 实验室

00:51:12.546 --> 00:51:14.000 A:middle
在周五上午 11:00

00:51:14.496 --> 00:51:14.696 A:middle
好的

00:51:14.746 --> 00:51:15.466 A:middle
谢谢大家

00:51:16.346 --> 00:51:18.000 A:middle
[ 掌声 ]
