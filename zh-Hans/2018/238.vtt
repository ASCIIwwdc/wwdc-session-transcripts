WEBVTT

00:00:07.516 --> 00:00:16.500 A:middle
[ 音乐 ]

00:00:19.296 --> 00:00:20.086 A:middle
&gt;&gt; 大家好

00:00:20.226 --> 00:00:21.616 A:middle
我叫 Jeremy 是

00:00:21.616 --> 00:00:23.366 A:middle
tvOS 团队的一名工程师

00:00:23.866 --> 00:00:25.066 A:middle
今天 我很高兴

00:00:25.066 --> 00:00:26.586 A:middle
能与大家分享

00:00:26.586 --> 00:00:29.236 A:middle
tvOS 12 中 TVMLKit 的新内容

00:00:29.776 --> 00:00:32.706 A:middle
如果你不熟悉 TVMLKit

00:00:32.706 --> 00:00:34.366 A:middle
这是 Apple 的一个高级框架

00:00:34.366 --> 00:00:37.506 A:middle
可以快速构建基于内容的 tvOS App

00:00:38.016 --> 00:00:39.826 A:middle
它无需额外设置 就已经

00:00:39.826 --> 00:00:41.416 A:middle
符合我们的 Human Interface Guidelines

00:00:41.766 --> 00:00:42.996 A:middle
让你的 App 外表

00:00:42.996 --> 00:00:44.776 A:middle
美观 体验合理

00:00:45.536 --> 00:00:47.406 A:middle
TVMLKit 使用 JavaScript 来驱动

00:00:47.406 --> 00:00:49.526 A:middle
App 逻辑 还使用了一种

00:00:49.526 --> 00:00:51.226 A:middle
基于 XML 的标记（markup）语言

00:00:51.226 --> 00:00:53.876 A:middle
按照你的规定 渲染成

00:00:53.876 --> 00:00:55.326 A:middle
屏幕上的用户界面（UI）

00:00:57.226 --> 00:00:59.346 A:middle
其实 大家熟知的

00:00:59.346 --> 00:01:01.996 A:middle
一些常用 App 就是

00:00:59.346 --> 00:01:01.996 A:middle
一些常用 App 就是

00:01:01.996 --> 00:01:03.216 A:middle
用 TVMLKit 构建的

00:01:04.146 --> 00:01:06.336 A:middle
此外 还有数千款 App Store 中的 App

00:01:06.336 --> 00:01:07.046 A:middle
也是如此

00:01:09.006 --> 00:01:10.706 A:middle
我们先来谈谈

00:01:10.706 --> 00:01:12.006 A:middle
我们为 TVMLKit

00:01:12.006 --> 00:01:14.046 A:middle
进行的改进 我今天

00:01:14.306 --> 00:01:15.606 A:middle
想先谈谈其中的三点

00:01:16.336 --> 00:01:18.176 A:middle
首先 我们改进了

00:01:18.176 --> 00:01:20.006 A:middle
网页检查器（Web Inspector）

00:01:20.006 --> 00:01:22.816 A:middle
方便你更好地找出 App 中的错误 并深入

00:01:23.116 --> 00:01:24.446 A:middle
地进行分析

00:01:26.056 --> 00:01:28.716 A:middle
去年以来 我们添加了许多新特性 并做了许多改进

00:01:28.716 --> 00:01:29.986 A:middle
以改善 TVMLKit 的框架

00:01:30.196 --> 00:01:32.676 A:middle
今天 我会讲到其中三点

00:01:32.676 --> 00:01:34.936 A:middle
我们会提到

00:01:34.936 --> 00:01:37.006 A:middle
全新的网页检查器

00:01:37.006 --> 00:01:39.506 A:middle
它改进了调试过程

00:01:39.506 --> 00:01:41.176 A:middle
更新了功能更为强大的

00:01:41.176 --> 00:01:42.416 A:middle
数据绑定构建

00:01:43.026 --> 00:01:45.716 A:middle
并添加了全新的自定义 TVMLKit 上播放

00:01:45.716 --> 00:01:47.196 A:middle
体验的方法

00:01:47.786 --> 00:01:50.446 A:middle
我们先来谈谈网页检查器

00:01:50.876 --> 00:01:53.156 A:middle
tvOS 11 加强了对

00:01:53.156 --> 00:01:54.466 A:middle
网页检查器的支持 能够

00:01:54.466 --> 00:01:56.156 A:middle
让你进一步分析

00:01:56.156 --> 00:01:57.236 A:middle
使用 TVMLKit 的 App

00:01:57.966 --> 00:01:59.506 A:middle
自此 我们进一步增强了

00:01:59.506 --> 00:02:01.976 A:middle
这方面的支持

00:01:59.506 --> 00:02:01.976 A:middle
这方面的支持

00:02:02.476 --> 00:02:05.596 A:middle
tvOS 11.3 中 除了可以

00:02:05.596 --> 00:02:06.996 A:middle
在元素中显示注册

00:02:06.996 --> 00:02:08.616 A:middle
事件监听器 现在你也可以

00:02:08.616 --> 00:02:09.886 A:middle
暂时将其禁用

00:02:10.985 --> 00:02:13.166 A:middle
这对调试很有帮助

00:02:13.166 --> 00:02:14.456 A:middle
因为现在你可以随意启用

00:02:14.456 --> 00:02:16.166 A:middle
或禁用事件处理器了

00:02:20.436 --> 00:02:22.476 A:middle
在网络标签页下

00:02:22.476 --> 00:02:23.516 A:middle
XHR 中除了文稿资源

00:02:23.516 --> 00:02:25.416 A:middle
还有图像资源

00:02:25.806 --> 00:02:27.206 A:middle
这样 你就可以看到

00:02:27.206 --> 00:02:29.336 A:middle
正在加载的图像

00:02:29.336 --> 00:02:30.576 A:middle
以及其他信息 例如

00:02:30.576 --> 00:02:32.436 A:middle
加载耗时 以及时间分配的情况

00:02:32.946 --> 00:02:35.806 A:middle
如果你想看到

00:02:35.806 --> 00:02:37.076 A:middle
实际传输的

00:02:37.076 --> 00:02:40.236 A:middle
图像 你可以使用这一功能

00:02:40.746 --> 00:02:42.206 A:middle
但请注意

00:02:42.206 --> 00:02:43.386 A:middle
你必须先

00:02:43.386 --> 00:02:45.206 A:middle
打开网页检查器

00:02:45.806 --> 00:02:47.026 A:middle
因为它不能显示

00:02:47.026 --> 00:02:47.876 A:middle
已加载的图像

00:02:49.636 --> 00:02:51.496 A:middle
最后 也是我

00:02:51.496 --> 00:02:53.086 A:middle
最喜欢的特性 就是

00:02:53.086 --> 00:02:53.396 A:middle
检查按钮

00:02:54.176 --> 00:02:55.596 A:middle
点击之后 就会显示

00:02:55.596 --> 00:02:56.916 A:middle
当前关注的视图中

00:02:56.916 --> 00:02:59.186 A:middle
所包含的临近元素

00:03:00.946 --> 00:03:02.576 A:middle
如果你的元素树为收起状态

00:03:03.036 --> 00:03:05.156 A:middle
网页检查器会将其展开

00:03:05.156 --> 00:03:07.016 A:middle
找出具体元素 并高亮显示

00:03:09.596 --> 00:03:11.966 A:middle
要使用网页检查器 你可以

00:03:11.966 --> 00:03:13.636 A:middle
下载并安装 macOS 的

00:03:13.636 --> 00:03:15.616 A:middle
最新版本 或安装

00:03:15.616 --> 00:03:16.966 A:middle
Safari 技术预览版

00:03:17.796 --> 00:03:19.176 A:middle
欲知更多关于使用

00:03:19.176 --> 00:03:21.406 A:middle
网页检查器的信息 可以

00:03:21.406 --> 00:03:23.296 A:middle
观看我们去年的关于

00:03:23.296 --> 00:03:24.876 A:middle
通过 tvOS App 来使用网页检查器的演讲

00:03:28.516 --> 00:03:30.636 A:middle
接下来 我们谈谈数据绑定

00:03:33.696 --> 00:03:35.176 A:middle
在我们谈到

00:03:35.176 --> 00:03:36.646 A:middle
具体的新特性之前

00:03:36.766 --> 00:03:38.566 A:middle
我先来大概介绍一下数据绑定

00:03:39.236 --> 00:03:40.576 A:middle
数据绑定借助

00:03:40.576 --> 00:03:42.746 A:middle
模板标记文件中的

00:03:42.746 --> 00:03:44.346 A:middle
表达式 帮你将

00:03:44.346 --> 00:03:46.166 A:middle
数据轻松转化为 UI 元素

00:03:47.356 --> 00:03:48.876 A:middle
这很重要 因为

00:03:48.876 --> 00:03:50.706 A:middle
这可以让数据

00:03:50.906 --> 00:03:52.066 A:middle
与布局逻辑

00:03:52.066 --> 00:03:53.796 A:middle
和 App

00:03:53.796 --> 00:03:55.116 A:middle
逻辑相分离

00:03:57.526 --> 00:03:58.776 A:middle
因此 数据绑定

00:03:58.776 --> 00:04:00.126 A:middle
模板可以减少

00:03:58.776 --> 00:04:00.126 A:middle
模板可以减少

00:04:00.126 --> 00:04:02.566 A:middle
将数据转换为 TVML 文稿时

00:04:02.566 --> 00:04:04.556 A:middle
所需的 JavaScript 代码量

00:04:04.556 --> 00:04:06.116 A:middle
因为框架可以替你

00:04:06.776 --> 00:04:07.016 A:middle
完成这项工作

00:04:07.016 --> 00:04:10.646 A:middle
事实上 这种替你编写文稿的方式

00:04:10.646 --> 00:04:13.236 A:middle
能够确保最佳性能 你也不必

00:04:13.236 --> 00:04:15.076 A:middle
担心该用什么 API

00:04:16.456 --> 00:04:17.926 A:middle
我们来看一个

00:04:17.926 --> 00:04:19.266 A:middle
具体的例子

00:04:19.856 --> 00:04:21.026 A:middle
假如你想生成一个

00:04:21.026 --> 00:04:23.596 A:middle
横幅 其中包括标题和描述

00:04:24.136 --> 00:04:26.706 A:middle
这是不使用数据绑定的

00:04:26.706 --> 00:04:28.546 A:middle
通常做法

00:04:30.996 --> 00:04:32.386 A:middle
首先 要获取

00:04:32.386 --> 00:04:33.666 A:middle
显示给用户的

00:04:33.666 --> 00:04:35.146 A:middle
相关数据 本例中

00:04:35.146 --> 00:04:36.856 A:middle
就是标题和描述

00:04:38.656 --> 00:04:40.596 A:middle
获取之后 要将数据

00:04:40.596 --> 00:04:42.406 A:middle
传递给一段写好的

00:04:42.406 --> 00:04:43.666 A:middle
JavaScript 代码

00:04:43.666 --> 00:04:45.126 A:middle
让代码来处理数据

00:04:45.126 --> 00:04:47.766 A:middle
并生成最终的文稿

00:04:49.306 --> 00:04:52.336 A:middle
借助数据绑定

00:04:52.336 --> 00:04:53.666 A:middle
就可以去掉 JavaScript 处理

00:04:53.666 --> 00:04:55.526 A:middle
这一步 并在模板中

00:04:55.526 --> 00:04:57.206 A:middle
设置绑定参数

00:04:57.206 --> 00:04:58.956 A:middle
TVMLKit 可以

00:04:58.956 --> 00:05:00.556 A:middle
按照设置 替你填入数据

00:04:58.956 --> 00:05:00.556 A:middle
按照设置 替你填入数据

00:05:00.556 --> 00:05:01.876 A:middle
并生成文稿

00:05:02.786 --> 00:05:04.616 A:middle
实际上 你的 App

00:05:04.616 --> 00:05:05.676 A:middle
只需要负责

00:05:05.676 --> 00:05:08.186 A:middle
获取和交换数据

00:05:08.186 --> 00:05:09.866 A:middle
完全不需要考虑编辑 DOM

00:05:11.076 --> 00:05:13.936 A:middle
简而言之 这就是数据绑定如何工作

00:05:13.936 --> 00:05:14.906 A:middle
以及它如何帮助你减少代码量

00:05:17.516 --> 00:05:20.626 A:middle
去年 我们引入了数据绑定的概念

00:05:20.626 --> 00:05:22.356 A:middle
以及其他核心概念 例如

00:05:22.636 --> 00:05:23.896 A:middle
绑定元素属性

00:05:23.896 --> 00:05:25.896 A:middle
绑定元素的

00:05:25.896 --> 00:05:28.146 A:middle
文本内容 当然

00:05:28.146 --> 00:05:29.516 A:middle
还有将区块（section）中的

00:05:29.516 --> 00:05:31.546 A:middle
条目（items）绑定在搁架（shelf）网格

00:05:31.816 --> 00:05:32.456 A:middle
或列表中

00:05:33.266 --> 00:05:35.016 A:middle
我们再用一个例子来

00:05:35.016 --> 00:05:36.796 A:middle
快速回顾这些概念

00:05:39.756 --> 00:05:40.946 A:middle
这个数据绑定模板

00:05:40.946 --> 00:05:42.316 A:middle
对应一个

00:05:42.316 --> 00:05:43.666 A:middle
图像元素 其中的

00:05:43.666 --> 00:05:45.046 A:middle
绑定表达式

00:05:45.046 --> 00:05:47.796 A:middle
以 @ 开头 后面是属性名

00:05:47.796 --> 00:05:49.806 A:middle
和想要绑定的特性

00:05:50.236 --> 00:05:52.466 A:middle
接下来 我们来看看

00:05:52.466 --> 00:05:54.456 A:middle
生成元素文本内容的例子

00:05:55.946 --> 00:05:57.406 A:middle
这个例子中 标题元素

00:05:57.406 --> 00:05:58.856 A:middle
有对应的数据

00:05:58.856 --> 00:06:01.126 A:middle
应当填充在元素中

00:05:58.856 --> 00:06:01.126 A:middle
应当填充在元素中

00:06:03.356 --> 00:06:05.976 A:middle
标题元素的数据绑定模板

00:06:05.976 --> 00:06:07.386 A:middle
包含文本内容绑定

00:06:07.386 --> 00:06:09.836 A:middle
以及这一绑定所映射的特性

00:06:13.186 --> 00:06:15.376 A:middle
最后我们来谈谈条目绑定

00:06:15.836 --> 00:06:17.356 A:middle
这种绑定方式

00:06:17.356 --> 00:06:19.256 A:middle
稍有不同 它涉及到

00:06:19.256 --> 00:06:20.886 A:middle
一组想要展示的数据

00:06:21.586 --> 00:06:23.156 A:middle
它仅适用于搁架 列表

00:06:23.156 --> 00:06:24.696 A:middle
或网格中的区块

00:06:26.656 --> 00:06:27.796 A:middle
这个例子中 有一个数组

00:06:27.796 --> 00:06:30.736 A:middle
数据以树形列表条目的形式存在

00:06:31.236 --> 00:06:32.636 A:middle
最后的结果

00:06:32.636 --> 00:06:34.836 A:middle
应当是一个由

00:06:34.836 --> 00:06:35.656 A:middle
锁定的列表条目（listItemLockup）组成的区块

00:06:37.246 --> 00:06:39.586 A:middle
区块对应的数据绑定模板

00:06:39.586 --> 00:06:41.696 A:middle
应包括两项 分别是

00:06:41.696 --> 00:06:43.366 A:middle
条目的绑定及其所映射的特性

00:06:43.366 --> 00:06:46.336 A:middle
以及一个原型

00:06:46.336 --> 00:06:48.016 A:middle
用来转化数组中的

00:06:48.136 --> 00:06:49.006 A:middle
数据对象

00:06:49.636 --> 00:06:51.296 A:middle
这里 数据

00:06:51.296 --> 00:06:52.826 A:middle
绑定模板对应的

00:06:52.826 --> 00:06:53.836 A:middle
是锁定的列表条目

00:06:55.976 --> 00:06:57.236 A:middle
这就是我们在

00:06:57.236 --> 00:06:59.556 A:middle
tvOS 11 中引入的树状绑定结构体

00:06:59.736 --> 00:07:01.366 A:middle
欲知更多信息

00:06:59.736 --> 00:07:01.366 A:middle
欲知更多信息

00:07:01.366 --> 00:07:02.736 A:middle
请观看我们去年 WWDC 上名为

00:07:02.736 --> 00:07:05.116 A:middle
Advances in TVMLKit 的会议

00:07:08.246 --> 00:07:11.436 A:middle
今年 我们进一步扩充了功能

00:07:11.996 --> 00:07:13.366 A:middle
首先 我们添加了

00:07:13.366 --> 00:07:14.896 A:middle
子元素绑定（children binding）

00:07:14.896 --> 00:07:17.076 A:middle
以更接近原生的方式

00:07:17.076 --> 00:07:17.876 A:middle
绑定元素的子元素

00:07:19.406 --> 00:07:20.986 A:middle
为方便你管理

00:07:20.986 --> 00:07:22.526 A:middle
DOM 我们添加了一些

00:07:22.526 --> 00:07:25.276 A:middle
特殊元素 即片段和规则

00:07:25.836 --> 00:07:27.446 A:middle
这些我们会深入探讨

00:07:27.446 --> 00:07:29.076 A:middle
让我们首先谈谈子元素绑定

00:07:32.246 --> 00:07:33.526 A:middle
子元素绑定是一种

00:07:33.526 --> 00:07:35.106 A:middle
更为原生的条目绑定

00:07:35.996 --> 00:07:37.966 A:middle
条目绑定为一些

00:07:37.966 --> 00:07:39.936 A:middle
特殊情境进行了优化 例如

00:07:39.936 --> 00:07:42.046 A:middle
包含搁板 框架或列表的区块

00:07:42.276 --> 00:07:44.316 A:middle
以更高效地

00:07:44.316 --> 00:07:45.836 A:middle
处理大数据的集合

00:07:46.826 --> 00:07:48.706 A:middle
它们可以在这些元素之外使用

00:07:49.686 --> 00:07:51.766 A:middle
其他情况下 使用子元素绑定

00:07:54.116 --> 00:07:56.136 A:middle
背后的原因很简单

00:07:56.206 --> 00:07:57.976 A:middle
子元素绑定能生成

00:07:57.976 --> 00:07:59.736 A:middle
目标元素的子元素

00:08:02.356 --> 00:08:04.986 A:middle
运作方式与条目绑定相同

00:08:05.566 --> 00:08:09.086 A:middle
你需要使用原型 来定义

00:08:09.186 --> 00:08:13.526 A:middle
数据转换成的元素 该元素将

00:08:13.526 --> 00:08:15.536 A:middle
作为模板

00:08:15.536 --> 00:08:16.976 A:middle
以生成最终的 DOM

00:08:20.346 --> 00:08:22.286 A:middle
让我们举个例子 来解释工作原理

00:08:23.256 --> 00:08:24.766 A:middle
让我回到之前

00:08:24.766 --> 00:08:26.916 A:middle
数组中树状条目的例子

00:08:27.536 --> 00:08:32.546 A:middle
数据与原来相同 但这次是三个

00:08:32.546 --> 00:08:33.655 A:middle
不同的菜单条目

00:08:34.346 --> 00:08:36.326 A:middle
这些条目将用在菜单栏中

00:08:37.676 --> 00:08:40.466 A:middle
这是我们预期的最终结果

00:08:40.836 --> 00:08:42.796 A:middle
大致是一个包含菜单栏树条目的

00:08:42.796 --> 00:08:43.635 A:middle
菜单栏

00:08:46.026 --> 00:08:47.846 A:middle
这是构建模板的

00:08:47.846 --> 00:08:50.876 A:middle
非常简便的方式

00:08:50.876 --> 00:08:52.686 A:middle
可以看到

00:08:52.686 --> 00:08:54.236 A:middle
与条目绑定类似

00:08:54.756 --> 00:08:56.196 A:middle
这里也使用了原型

00:08:56.196 --> 00:08:58.386 A:middle
将数据映射到元素 这里也有

00:08:58.386 --> 00:08:59.516 A:middle
绑定表达式

00:09:00.526 --> 00:09:03.186 A:middle
唯一的区别在于 这里的元素

00:09:03.416 --> 00:09:04.416 A:middle
不是区块

00:09:05.036 --> 00:09:07.066 A:middle
子元素绑定 可以用于任何元素

00:09:10.166 --> 00:09:11.636 A:middle
只要你希望自动生成

00:09:11.636 --> 00:09:13.196 A:middle
全部子元素 这种解决方案

00:09:13.196 --> 00:09:14.716 A:middle
就很好

00:09:15.456 --> 00:09:16.656 A:middle
但有时 你可能

00:09:16.656 --> 00:09:18.326 A:middle
只想生成部分的

00:09:18.326 --> 00:09:19.016 A:middle
子元素

00:09:19.146 --> 00:09:20.996 A:middle
例如 这个自动

00:09:20.996 --> 00:09:22.886 A:middle
流传输 App 包含一个正在播放的

00:09:22.886 --> 00:09:23.476 A:middle
菜单条目（nowPlayingMenuItem）

00:09:24.186 --> 00:09:25.406 A:middle
这是一个

00:09:25.406 --> 00:09:27.386 A:middle
特殊菜单条目 应该

00:09:27.386 --> 00:09:29.686 A:middle
常驻菜单栏 但是

00:09:29.686 --> 00:09:32.016 A:middle
仅在后台有音频

00:09:32.016 --> 00:09:33.896 A:middle
播放时才显示

00:09:36.716 --> 00:09:38.376 A:middle
但这里 我们还是

00:09:38.376 --> 00:09:39.556 A:middle
希望菜单栏条目都能

00:09:39.556 --> 00:09:40.186 A:middle
绑定数据

00:09:40.986 --> 00:09:42.996 A:middle
为此 我们需要

00:09:42.996 --> 00:09:44.386 A:middle
将菜单栏划分为

00:09:44.386 --> 00:09:46.326 A:middle
依赖数据与不依赖数据

00:09:46.326 --> 00:09:47.006 A:middle
两部分

00:09:47.626 --> 00:09:51.776 A:middle
这里 我们就要运用片段

00:09:51.966 --> 00:09:52.946 A:middle
那么 什么是片段呢

00:09:54.376 --> 00:09:56.066 A:middle
片段是渲染器

00:09:56.216 --> 00:09:57.436 A:middle
不可见的隐形元素

00:09:58.216 --> 00:10:00.056 A:middle
它可以帮助你管理 DOM

00:09:58.216 --> 00:10:00.056 A:middle
它可以帮助你管理 DOM

00:10:01.366 --> 00:10:02.796 A:middle
但片段的特殊之处

00:10:02.796 --> 00:10:05.346 A:middle
就在于 它的子元素是可见的

00:10:08.176 --> 00:10:10.586 A:middle
又因为片段是元素

00:10:10.586 --> 00:10:12.086 A:middle
而子元素绑定可以应用于任何

00:10:12.086 --> 00:10:14.526 A:middle
元素 因此片段可以

00:10:14.526 --> 00:10:15.816 A:middle
应用子元素绑定

00:10:18.576 --> 00:10:19.926 A:middle
我们再回到我们想要的

00:10:19.926 --> 00:10:21.486 A:middle
数据最终形态 以及

00:10:21.486 --> 00:10:22.696 A:middle
数据的初始状态

00:10:23.126 --> 00:10:24.626 A:middle
这里有菜单栏条目

00:10:25.436 --> 00:10:27.046 A:middle
很适合放在

00:10:27.046 --> 00:10:29.336 A:middle
片段中 这一点很棒

00:10:29.336 --> 00:10:31.676 A:middle
因为这样 我们就可以应用子元素绑定了

00:10:34.806 --> 00:10:36.896 A:middle
现在 我们将

00:10:36.896 --> 00:10:38.456 A:middle
绑定数据的部分放在

00:10:38.456 --> 00:10:41.766 A:middle
片段中 菜单栏仍然保留正在播放

00:10:41.766 --> 00:10:42.356 A:middle
菜单条目

00:10:42.656 --> 00:10:44.336 A:middle
因为渲染器只能看到

00:10:44.336 --> 00:10:45.756 A:middle
片段的子元素

00:10:45.756 --> 00:10:48.076 A:middle
这段代码仍能渲染成

00:10:48.076 --> 00:10:49.536 A:middle
格式正确的菜单栏

00:10:52.576 --> 00:10:53.946 A:middle
对于用来

00:10:53.946 --> 00:10:56.416 A:middle
映射到 UI

00:10:56.536 --> 00:10:58.496 A:middle
元素的数据本身

00:10:58.496 --> 00:11:00.376 A:middle
可能的情况是

00:10:58.496 --> 00:11:00.376 A:middle
可能的情况是

00:11:00.376 --> 00:11:02.406 A:middle
有些数据保持不变

00:11:02.406 --> 00:11:04.516 A:middle
有些则始终变化

00:11:05.606 --> 00:11:07.296 A:middle
比方说

00:11:07.296 --> 00:11:10.186 A:middle
这段代码 对应

00:11:10.186 --> 00:11:12.366 A:middle
一个有封面图像

00:11:12.496 --> 00:11:15.496 A:middle
有标题 还有播放进度的视频

00:11:17.726 --> 00:11:19.316 A:middle
有时候 我们想

00:11:19.316 --> 00:11:21.236 A:middle
基于这些信息

00:11:21.236 --> 00:11:22.716 A:middle
来显示不同的 UI

00:11:23.176 --> 00:11:25.576 A:middle
如果还没有

00:11:25.576 --> 00:11:27.596 A:middle
开始播放 进度

00:11:27.596 --> 00:11:29.796 A:middle
自然为零 只显示

00:11:29.796 --> 00:11:31.596 A:middle
视频的封面图像

00:11:31.596 --> 00:11:34.576 A:middle
和视频的标题就可以了

00:11:36.086 --> 00:11:37.766 A:middle
但如果我们开始看

00:11:37.766 --> 00:11:39.326 A:middle
视频 播放进度自然

00:11:39.326 --> 00:11:40.226 A:middle
会大于零

00:11:41.126 --> 00:11:43.606 A:middle
为此 我们既要显示不变的元素

00:11:44.526 --> 00:11:45.836 A:middle
即封面图像和标题

00:11:47.076 --> 00:11:48.586 A:middle
还要凸显出

00:11:48.586 --> 00:11:50.736 A:middle
视频正在播放

00:11:51.376 --> 00:11:53.506 A:middle
也就是要显示进度条 随着播放进度的

00:11:53.506 --> 00:11:55.646 A:middle
百分比进展 而逐渐填满

00:11:57.546 --> 00:12:00.526 A:middle
同样地 我们现在有两种使用情景 它们的数据

00:11:57.546 --> 00:12:00.526 A:middle
同样地 我们现在有两种使用情景 它们的数据

00:12:00.526 --> 00:12:02.556 A:middle
不同 同时我们也想

00:12:02.556 --> 00:12:04.416 A:middle
显示不同的外观

00:12:05.146 --> 00:12:06.756 A:middle
第一种情境中

00:12:06.756 --> 00:12:08.816 A:middle
我们有锁定的图像和标题

00:12:09.926 --> 00:12:11.556 A:middle
第二种情境中

00:12:11.556 --> 00:12:13.896 A:middle
我们添加了额外的一个叠层和进度条

00:12:17.046 --> 00:12:17.916 A:middle
一般来说

00:12:17.916 --> 00:12:19.456 A:middle
App 逻辑会根据

00:12:19.496 --> 00:12:21.126 A:middle
数据 生成不同的

00:12:21.126 --> 00:12:24.016 A:middle
x 值 但借助规则

00:12:24.016 --> 00:12:25.356 A:middle
你可以用一个

00:12:25.356 --> 00:12:27.076 A:middle
静态模板 生成

00:12:27.076 --> 00:12:28.606 A:middle
任何一种

00:12:28.636 --> 00:12:29.526 A:middle
最终文稿

00:12:31.126 --> 00:12:32.096 A:middle
那么 什么是规则

00:12:32.446 --> 00:12:35.236 A:middle
规则使用数据状态

00:12:35.236 --> 00:12:38.186 A:middle
来重新生成最终文档

00:12:38.416 --> 00:12:40.756 A:middle
从而改善 UI

00:12:41.806 --> 00:12:43.296 A:middle
规则是不可见元素

00:12:43.516 --> 00:12:44.746 A:middle
渲染器看不到规则

00:12:45.246 --> 00:12:47.236 A:middle
但规则却可以影响正在生成的文稿

00:12:49.296 --> 00:12:50.716 A:middle
规则内的任何操作

00:12:50.716 --> 00:12:53.616 A:middle
都会应用于

00:12:53.726 --> 00:12:55.476 A:middle
规则所在的姊妹元素

00:12:56.476 --> 00:12:57.756 A:middle
要展示这一点

00:12:57.756 --> 00:12:59.396 A:middle
最好的办法是举例

00:12:59.396 --> 00:13:00.286 A:middle
展示设置过程

00:12:59.396 --> 00:13:00.286 A:middle
展示设置过程

00:13:02.836 --> 00:13:04.286 A:middle
我们来看看 需要

00:13:04.476 --> 00:13:06.756 A:middle
什么样的规则 才能

00:13:06.756 --> 00:13:08.106 A:middle
构建我们想要的原型

00:13:08.106 --> 00:13:10.036 A:middle
实现刚才例子中的效果

00:13:10.536 --> 00:13:11.976 A:middle
首先 我们将原型

00:13:11.976 --> 00:13:13.386 A:middle
定义为 UI 预期外观的

00:13:13.386 --> 00:13:15.116 A:middle
最小公约数

00:13:15.116 --> 00:13:16.446 A:middle
也就是最基本单位

00:13:17.276 --> 00:13:18.916 A:middle
这里就包括

00:13:18.916 --> 00:13:20.016 A:middle
图像和标题

00:13:21.716 --> 00:13:23.196 A:middle
但你可能还注意到

00:13:23.196 --> 00:13:25.216 A:middle
我们还为进度条

00:13:25.216 --> 00:13:25.896 A:middle
准备了占位符

00:13:26.566 --> 00:13:28.056 A:middle
占位符也是一种

00:13:28.056 --> 00:13:29.426 A:middle
特殊元素 它对渲染器

00:13:29.426 --> 00:13:31.096 A:middle
不可见 这个例子中

00:13:31.366 --> 00:13:32.876 A:middle
规则会将占位符

00:13:32.876 --> 00:13:35.426 A:middle
作为数据状态符合时的替换目标

00:13:36.886 --> 00:13:39.026 A:middle
现在 我们将规则加入

00:13:40.136 --> 00:13:42.466 A:middle
这组规则应用于姊妹元素

00:13:42.466 --> 00:13:43.976 A:middle
包裹在 rules 标签中

00:13:47.606 --> 00:13:48.926 A:middle
匹配数据状态的

00:13:48.926 --> 00:13:51.426 A:middle
单个规则会封装成

00:13:51.516 --> 00:13:54.186 A:middle
特定元素

00:13:54.606 --> 00:13:56.776 A:middle
一旦匹配特定数据状态

00:13:56.806 --> 00:13:59.166 A:middle
特定元素就会生效

00:14:00.396 --> 00:14:01.696 A:middle
而匹配的方式

00:14:01.826 --> 00:14:03.766 A:middle
则是利用状态属性的

00:14:03.766 --> 00:14:04.526 A:middle
查询指令

00:14:07.266 --> 00:14:09.186 A:middle
如果数据状态匹配

00:14:09.186 --> 00:14:10.876 A:middle
那么特定元素的

00:14:10.876 --> 00:14:12.696 A:middle
子元素便成为

00:14:12.696 --> 00:14:14.346 A:middle
应用于规则姊妹元素的

00:14:14.346 --> 00:14:16.146 A:middle
一系列操作

00:14:16.556 --> 00:14:18.606 A:middle
这里 我们希望

00:14:18.606 --> 00:14:19.996 A:middle
占位符能够被

00:14:19.996 --> 00:14:21.846 A:middle
叠层元素及其子元素取代

00:14:25.956 --> 00:14:27.666 A:middle
TVMLKit 分析元素的

00:14:27.666 --> 00:14:29.106 A:middle
标签属性 从而

00:14:29.106 --> 00:14:30.936 A:middle
匹配被取代的元素

00:14:31.676 --> 00:14:33.456 A:middle
实际取代过程中

00:14:33.676 --> 00:14:35.356 A:middle
首先会匹配标签

00:14:35.776 --> 00:14:37.256 A:middle
之后会比较元素的名称

00:14:38.146 --> 00:14:40.726 A:middle
如果元素名不同 它便会将元素

00:14:40.726 --> 00:14:42.786 A:middle
完全取代 这里

00:14:43.086 --> 00:14:44.776 A:middle
占位符变成了叠层

00:14:45.736 --> 00:14:47.236 A:middle
但如果元素名

00:14:47.236 --> 00:14:49.046 A:middle
匹配 新内容

00:14:49.386 --> 00:14:51.476 A:middle
就会添加到已有内容之后

00:14:53.426 --> 00:14:55.586 A:middle
现在 我们就有了一个简单的

00:14:55.586 --> 00:14:56.986 A:middle
规则模板 可以根据

00:14:56.986 --> 00:14:58.806 A:middle
提供的数据状态 生成

00:14:58.806 --> 00:15:00.416 A:middle
两种不同的输出

00:14:58.806 --> 00:15:00.416 A:middle
两种不同的输出

00:15:02.136 --> 00:15:04.016 A:middle
实际上 你可以调用

00:15:04.016 --> 00:15:05.606 A:middle
App 逻辑 来决定

00:15:05.606 --> 00:15:07.276 A:middle
元素如何显示 并生成

00:15:07.276 --> 00:15:08.916 A:middle
专门的静态模板

00:15:09.596 --> 00:15:11.216 A:middle
应用于将要

00:15:11.586 --> 00:15:14.196 A:middle
转化为 UI 的各种元素

00:15:15.556 --> 00:15:16.846 A:middle
接下来换个话题 我们来

00:15:16.876 --> 00:15:18.506 A:middle
谈谈 TVMLKit 中的播放

00:15:19.296 --> 00:15:20.896 A:middle
TVMLKit 早就提供了

00:15:20.966 --> 00:15:22.486 A:middle
扩展接口 方便你

00:15:22.486 --> 00:15:24.226 A:middle
自定义 UI

00:15:24.226 --> 00:15:26.326 A:middle
包括个别界面

00:15:26.326 --> 00:15:28.226 A:middle
和整套模板

00:15:29.126 --> 00:15:31.276 A:middle
tvOS 12 中 我们将这一功能

00:15:31.276 --> 00:15:32.586 A:middle
扩展到回放流程

00:15:32.976 --> 00:15:34.586 A:middle
让你完全控制播放体验

00:15:34.726 --> 00:15:37.416 A:middle
以及相关的其他用户体验

00:15:41.046 --> 00:15:43.976 A:middle
这些功能适用于

00:15:44.046 --> 00:15:45.176 A:middle
现有的不同播放风格

00:15:45.176 --> 00:15:47.786 A:middle
既包括嵌入式播放

00:15:47.866 --> 00:15:48.656 A:middle
也包括全屏播放

00:15:51.676 --> 00:15:53.106 A:middle
为此 你需要提供

00:15:53.106 --> 00:15:55.006 A:middle
TVPlayer 对象 以及与其

00:15:55.006 --> 00:15:57.916 A:middle
相关的 UI  作为 UIViewController

00:16:01.156 --> 00:16:03.016 A:middle
这很类似

00:16:03.016 --> 00:16:04.486 A:middle
JavaScript 的 API

00:16:04.626 --> 00:16:06.256 A:middle
与你们的 JavaScript

00:16:06.406 --> 00:16:08.276 A:middle
开发者沟通时 能省去不少麻烦

00:16:09.556 --> 00:16:11.856 A:middle
最后 我们还提供了

00:16:11.856 --> 00:16:13.066 A:middle
有限 JavaScript 桥

00:16:13.066 --> 00:16:13.736 A:middle
（Limited JavaScript Bridge）

00:16:13.736 --> 00:16:15.206 A:middle
该功能可以连通

00:16:15.336 --> 00:16:17.866 A:middle
原生代码和 JavaScript 代码

00:16:20.536 --> 00:16:23.916 A:middle
我们来谈谈 TVPlayer

00:16:23.916 --> 00:16:25.736 A:middle
这是自定义

00:16:25.736 --> 00:16:27.766 A:middle
播放体验的基础

00:16:28.996 --> 00:16:32.466 A:middle
TVPlayer 是一个 AVPlayer

00:16:32.466 --> 00:16:33.886 A:middle
公共适配器 适配于回放

00:16:33.886 --> 00:16:34.336 A:middle
流程（Playback Pipeline）

00:16:35.396 --> 00:16:36.916 A:middle
这意味着 TVPlayer

00:16:36.916 --> 00:16:38.506 A:middle
可以转换一般的

00:16:38.506 --> 00:16:40.506 A:middle
AVPlayer 回调

00:16:40.506 --> 00:16:41.746 A:middle
并由 JavaScript 接收

00:16:45.316 --> 00:16:47.306 A:middle
TVPlayer 还可以

00:16:47.306 --> 00:16:48.726 A:middle
将自定义事件

00:16:48.726 --> 00:16:51.276 A:middle
发送给 JavaScript

00:16:51.276 --> 00:16:52.526 A:middle
默认情况下 它可以

00:16:52.576 --> 00:16:54.806 A:middle
将 AVPlayer 的事件作为

00:16:54.806 --> 00:16:55.536 A:middle
播放事件处理

00:16:55.656 --> 00:16:57.976 A:middle
其他事件都由你来发送

00:17:02.046 --> 00:17:03.616 A:middle
JavaScript 为播放器

00:17:03.616 --> 00:17:05.306 A:middle
作出的改动均为 KVO 可观察

00:17:05.496 --> 00:17:06.656 A:middle
你可以知道

00:17:06.656 --> 00:17:08.306 A:middle
你的 JavaScript 开发者 进行了哪些改动

00:17:09.705 --> 00:17:11.526 A:middle
最后 TVPlayer 对象

00:17:11.806 --> 00:17:13.506 A:middle
播放媒体时会按照

00:17:13.506 --> 00:17:15.546 A:middle
顺序 从第一个媒体

00:17:15.546 --> 00:17:16.746 A:middle
一直播放到

00:17:16.746 --> 00:17:17.976 A:middle
播放列表中最后一个媒体

00:17:20.945 --> 00:17:22.175 A:middle
无论是否需要播放器

00:17:22.576 --> 00:17:24.256 A:middle
TV Application Controller Delegate

00:17:24.256 --> 00:17:25.945 A:middle
都会要求 TVPlayer

00:17:25.945 --> 00:17:27.506 A:middle
你需要返回一个实例

00:17:27.566 --> 00:17:29.646 A:middle
才能参与

00:17:29.646 --> 00:17:30.496 A:middle
回放流程

00:17:34.076 --> 00:17:35.066 A:middle
回放流程的下一步

00:17:35.066 --> 00:17:36.406 A:middle
就是要将回放

00:17:36.406 --> 00:17:37.826 A:middle
以 UI 的形式

00:17:37.826 --> 00:17:39.236 A:middle
显示在屏幕上

00:17:39.736 --> 00:17:42.066 A:middle
这随时可能发生

00:17:42.066 --> 00:17:44.936 A:middle
可以是全屏回放 也可以是嵌入式回放

00:17:45.426 --> 00:17:47.016 A:middle
你完全可以

00:17:47.016 --> 00:17:48.406 A:middle
创建自己的 UI

00:17:49.186 --> 00:17:51.826 A:middle
如果 TVMLKit 需要

00:17:51.826 --> 00:17:53.646 A:middle
UI 那么 TVInterfaceCreating

00:17:53.646 --> 00:17:54.316 A:middle
就会要求获得

00:17:54.316 --> 00:17:55.616 A:middle
一个视图控制器（view controller）

00:17:56.246 --> 00:17:58.046 A:middle
TVInterfaceCreating 还会向视图控制器

00:17:58.046 --> 00:18:00.336 A:middle
传递对 TVPlayer 的引用 负责

00:17:58.046 --> 00:18:00.336 A:middle
传递对 TVPlayer 的引用 负责

00:18:00.336 --> 00:18:01.806 A:middle
在视图中播放媒体

00:18:04.726 --> 00:18:05.476 A:middle
接下来 使用 TVPlayer

00:18:05.476 --> 00:18:07.226 A:middle
及与其相关的 UI 时

00:18:07.666 --> 00:18:10.596 A:middle
有一些事情需要注意

00:18:12.266 --> 00:18:13.246 A:middle
首先 你应当

00:18:13.246 --> 00:18:15.266 A:middle
亲自处理所有 'should' 事件

00:18:16.026 --> 00:18:17.156 A:middle
这类事件一般

00:18:17.156 --> 00:18:19.246 A:middle
与广告相关 基本是一个

00:18:19.246 --> 00:18:20.786 A:middle
UI 方面的问题

00:18:20.786 --> 00:18:22.656 A:middle
应当由你的

00:18:22.656 --> 00:18:23.446 A:middle
原生代码处理

00:18:25.676 --> 00:18:27.266 A:middle
如果你使用 FairPlay 加密

00:18:27.266 --> 00:18:29.836 A:middle
视频播放

00:18:29.836 --> 00:18:32.456 A:middle
你需要使用 AVContentKeySession

00:18:32.456 --> 00:18:33.486 A:middle
来加载密钥

00:18:34.006 --> 00:18:36.326 A:middle
欲知更多关于

00:18:36.326 --> 00:18:38.406 A:middle
AVContentKeySession 的信息 请观看

00:18:38.406 --> 00:18:39.866 A:middle
我们去年的讲座

00:18:39.866 --> 00:18:42.166 A:middle
Advances in HTTP Live Streaming 以及

00:18:42.166 --> 00:18:43.086 A:middle
今年的一场关于

00:18:43.086 --> 00:18:44.646 A:middle
AVContentKeySession 最佳

00:18:44.646 --> 00:18:45.206 A:middle
实践的讲座

00:18:47.456 --> 00:18:49.826 A:middle
最后 如果你的 JavaScript

00:18:49.826 --> 00:18:51.586 A:middle
开发者使用叠层和

00:18:51.586 --> 00:18:53.526 A:middle
互动叠层 这些必须要

00:18:53.526 --> 00:18:54.856 A:middle
进行设置

00:18:55.556 --> 00:18:56.896 A:middle
这些属于 UI 既然

00:18:56.896 --> 00:18:57.856 A:middle
你要构建自己的 UI

00:18:57.856 --> 00:18:59.896 A:middle
就需要亲自处理

00:19:04.206 --> 00:19:06.166 A:middle
总之 我们为

00:19:06.166 --> 00:19:09.746 A:middle
TVMLKit 和 tvOS 12 做出了

00:19:10.176 --> 00:19:11.876 A:middle
如下改动 首先

00:19:11.876 --> 00:19:13.256 A:middle
数据绑定更为

00:19:13.256 --> 00:19:15.406 A:middle
强大 你可以借此构建

00:19:15.406 --> 00:19:17.676 A:middle
任何依赖数据的模板

00:19:18.316 --> 00:19:19.936 A:middle
我们鼓励大家 一定要试一试

00:19:21.376 --> 00:19:22.986 A:middle
其次 如果你一直希望

00:19:22.986 --> 00:19:24.716 A:middle
能够自定义

00:19:24.716 --> 00:19:26.146 A:middle
回放体验

00:19:26.146 --> 00:19:27.886 A:middle
现在你就可以通过实现

00:19:27.886 --> 00:19:29.356 A:middle
自己的原生回放来体验了

00:19:31.246 --> 00:19:32.566 A:middle
欲知更多关于本会议的信息

00:19:32.566 --> 00:19:35.226 A:middle
请访问屏幕上的网站

00:19:37.286 --> 00:19:40.326 A:middle
谢谢大家参加 2018 年 WWDC

00:19:41.166 --> 00:19:41.506 A:middle
谢谢
