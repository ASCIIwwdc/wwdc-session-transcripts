WEBVTT

00:00:19.319 --> 00:00:24.224 align:middle
构建丰富的Playground
创建引人入胜的Swift在Xcode 7的内容

00:00:25.692 --> 00:00:26.527 align:middle
早上好！

00:00:31.765 --> 00:00:32.833 align:middle
感谢大家来到今天

00:00:32.900 --> 00:00:35.135 align:middle
关于Rich Playground编写的
讲座环节

00:00:35.202 --> 00:00:37.638 align:middle
我叫 山姆
是 Xcode 团队的一名工程师

00:00:39.540 --> 00:00:41.241 align:middle
那么 现在Playground
已经推出大约一年了

00:00:41.308 --> 00:00:44.011 align:middle
而我们已经被你们
用它所做的事情震撼了

00:00:44.411 --> 00:00:46.980 align:middle
我们已经看到了各种东西
有人写出了他们的第一个“Hello, world”

00:00:47.047 --> 00:00:50.050 align:middle
更有人在Playgrounds中
写出了多本书

00:00:50.117 --> 00:00:51.685 align:middle
反应是非常惊人的

00:00:53.053 --> 00:00:54.721 align:middle
那么今天我将谈几个内容

00:00:55.756 --> 00:00:57.224 align:middle
我们将讨论 自去年以来

00:00:57.291 --> 00:00:59.359 align:middle
我们在Playground上
增加的一些新特性

00:00:59.593 --> 00:01:02.829 align:middle
以及我们已经更新的
一些现有特性

00:00:59.593 --> 00:01:02.829 align:middle
以及我们已经更新的
一些现有特性

00:01:03.530 --> 00:01:05.299 align:middle
我们也将涉及一些
小建议和窍门

00:01:05.364 --> 00:01:08.302 align:middle
它们能帮助您编写出
真真正正的丰富的Playgrounds

00:01:08.368 --> 00:01:10.671 align:middle
您希望与世界上的其他人
分享的Playgrounds

00:01:11.872 --> 00:01:13.073 align:middle
而作为一点奖励

00:01:13.674 --> 00:01:17.644 align:middle
我们将解决WWDC的出席者中
一个常见的问题

00:01:18.111 --> 00:01:21.582 align:middle
那就是如何玩遍旧金山

00:01:22.950 --> 00:01:23.917 align:middle
那么问题是什么呢？

00:01:25.052 --> 00:01:27.054 align:middle
这个嘛 旧金山是一个大地方

00:01:28.355 --> 00:01:29.489 align:middle
有很多可看的东西

00:01:29.823 --> 00:01:33.660 align:middle
但实际上在讲座环节之间
你不会有太多的时间去做这件事

00:01:33.727 --> 00:01:36.463 align:middle
您还有实验室活动
还要写您的下一个伟大的app

00:01:37.297 --> 00:01:39.833 align:middle
而你多半恰好在本周末
要赶航班

00:01:39.900 --> 00:01:41.668 align:middle
所以这里有个终结点

00:01:42.769 --> 00:01:43.937 align:middle
而作为工程师

00:01:44.438 --> 00:01:48.041 align:middle
我们希望在解决问题的时候
尽可能地高效

00:01:48.542 --> 00:01:50.611 align:middle
在这个问题的语境下 这意味着

00:01:50.878 --> 00:01:52.846 align:middle
我们不希望走不必要的路

00:01:53.881 --> 00:01:55.415 align:middle
那么我们将如何解决这个问题？

00:01:55.883 --> 00:01:58.418 align:middle
这个么
一旦我们知道我们想要参观的地方

00:01:58.819 --> 00:02:00.821 align:middle
我们会从Moscone Center出发

00:01:58.819 --> 00:02:00.821 align:middle
我们会从Moscone Center出发

00:02:00.888 --> 00:02:03.790 align:middle
以可能的最快的方式
遍历所有我们想看的地方

00:02:04.057 --> 00:02:07.160 align:middle
而且要赶在我们
冲向旧金山国际机场之前看完

00:02:07.828 --> 00:02:10.364 align:middle
那么为了做到这个
我们将建立一个Playground

00:02:10.797 --> 00:02:13.600 align:middle
那么 闲话少叙
让我们进入正题

00:02:22.176 --> 00:02:23.010 align:middle
好了

00:02:23.510 --> 00:02:25.979 align:middle
那么我这里 已经有了一个
已为我们设置好的Playground

00:02:26.046 --> 00:02:28.382 align:middle
而我们将快速地花一点时间
查看一下我们已有的东西

00:02:28.682 --> 00:02:30.918 align:middle
首先我们这里有一个地点结构体

00:02:31.418 --> 00:02:34.421 align:middle
地点将是我们
希望在旧金山参观的地方

00:02:34.955 --> 00:02:37.958 align:middle
它们将有一个字符串形式的名字

00:02:38.225 --> 00:02:41.428 align:middle
以及位置
以 CLLocationCoordinate2D 表示

00:02:43.030 --> 00:02:45.199 align:middle
接下来我们有一个城市结构体

00:02:45.699 --> 00:02:49.369 align:middle
那么在我们这个问题的语境下
它将代表旧金山

00:02:50.404 --> 00:02:52.573 align:middle
而且我们可以把这认为是
一个地点的集合

00:02:52.639 --> 00:02:54.308 align:middle
它是我们用来放这些东西的类型

00:02:54.608 --> 00:02:57.411 align:middle
那么在内部
我们有一系列的地点

00:02:57.911 --> 00:03:01.381 align:middle
然后我们在这里有一个函数 通过它
我们可以向我们的城市添加地点

00:02:57.911 --> 00:03:01.381 align:middle
然后我们在这里有一个函数 通过它
我们可以向我们的城市添加地点

00:03:02.316 --> 00:03:04.418 align:middle
那么让我们往下进行
创建我们的城市

00:03:05.319 --> 00:03:06.787 align:middle
我们将把它叫做“旧金山”

00:03:08.021 --> 00:03:10.924 align:middle
如我刚才所言
我们需要从某处开始我们的旅行

00:03:10.991 --> 00:03:14.027 align:middle
因此我们将继续往下进行
为Moscone Center创建一个地点

00:03:14.094 --> 00:03:15.195 align:middle
就是我们将出发的地方

00:03:15.896 --> 00:03:17.297 align:middle
那么让我们在那里创建Moscone

00:03:18.232 --> 00:03:21.068 align:middle
最后我们终于要向我们的城市
添加地点了

00:03:23.003 --> 00:03:25.405 align:middle
那么 你们中间
熟悉Playgrounds的朋友会记得

00:03:25.472 --> 00:03:27.241 align:middle
对于每行被执行的代码

00:03:27.407 --> 00:03:29.610 align:middle
我们在这里的结果侧边栏
都会得到一个结果

00:03:30.277 --> 00:03:32.479 align:middle
因此我们会看到
我们的addPlace函数被调用

00:03:32.546 --> 00:03:35.349 align:middle
而且我们似乎是要
将Moscone Center传递给它

00:03:36.049 --> 00:03:39.219 align:middle
但是 如果您继续往下看
下面我们创建了城市和地点

00:03:39.653 --> 00:03:40.854 align:middle
我们所要获取的就是类型

00:03:41.855 --> 00:03:45.125 align:middle
因此这是非常方便的
但是我们也想更具有描述性

00:03:45.192 --> 00:03:47.494 align:middle
尤其是我们将要
创建更多的几个地点时

00:03:47.728 --> 00:03:49.696 align:middle
如果我们一个地点接一个地点地
逐一参观

00:03:49.930 --> 00:03:51.765 align:middle
我们将不能区分这些东西

00:03:52.599 --> 00:03:55.502 align:middle
那么对于我们的地点来说
最具描述性的东西就是名称

00:03:55.569 --> 00:03:59.273 align:middle
那么我们如何让名称
返回到我们的结果侧边栏呢？

00:03:59.940 --> 00:04:01.708 align:middle
我们有一个新的协议
来解决那个问题

00:03:59.940 --> 00:04:01.708 align:middle
我们有一个新的协议
来解决那个问题

00:04:01.875 --> 00:04:04.178 align:middle
叫作CustomStringConvertible

00:04:04.545 --> 00:04:08.615 align:middle
那么我能做的就是
在这里为我的地点扩展结构体

00:04:08.949 --> 00:04:11.618 align:middle
表明我将
执行CustomStringConvertible

00:04:12.119 --> 00:04:13.987 align:middle
而你能看到
现在我这里有个错误

00:04:14.421 --> 00:04:16.490 align:middle
因为它们实际上还不符合协议

00:04:17.291 --> 00:04:18.992 align:middle
因此 为了实际符合协议

00:04:19.059 --> 00:04:21.661 align:middle
我们需要执行一个现成的属性

00:04:21.728 --> 00:04:23.130 align:middle
叫作 description

00:04:24.264 --> 00:04:26.033 align:middle
而那将返回一个字符串

00:04:26.099 --> 00:04:28.468 align:middle
而对我们来说
我们希望返回我们的地名

00:04:28.735 --> 00:04:30.070 align:middle
因为那是最具描述性的东西

00:04:30.737 --> 00:04:33.640 align:middle
您现在可以看到如果你回顾下面
我们创建地点的地方

00:04:34.308 --> 00:04:37.044 align:middle
这里我们有Moscone Center
而不仅是类型名

00:04:37.811 --> 00:04:39.446 align:middle
那么这对我们的城市意味着什么？

00:04:40.080 --> 00:04:42.683 align:middle
多半最具描述性的东西

00:04:42.883 --> 00:04:45.886 align:middle
是返回当前城市内的地点清单

00:04:46.119 --> 00:04:47.754 align:middle
以便我们能够看到旅行的进展

00:04:48.589 --> 00:04:51.191 align:middle
因此我们将往下进行
为城市进行这个操作

00:04:51.925 --> 00:04:54.261 align:middle
执行那里的
CustomStringConvertible

00:04:55.762 --> 00:04:58.866 align:middle
并继续往下进行返回描述

00:05:00.100 --> 00:05:02.402 align:middle
对于它 我们将返回
places.description

00:05:02.469 --> 00:05:04.805 align:middle
因此它将给出
我们一系列地点的描述

00:05:05.873 --> 00:05:08.442 align:middle
那么现在您可以看到
当我们最初创建San Francisco时

00:05:08.575 --> 00:05:10.277 align:middle
实际上里面没有任何东西

00:05:10.644 --> 00:05:12.212 align:middle
因此我们这里获得了一个空阵列

00:05:12.880 --> 00:05:16.416 align:middle
但是然后当我们对其添加地点后
我们得到了Moscone Center

00:05:16.550 --> 00:05:18.185 align:middle
那么当我们创建越来越多的地点时

00:05:18.252 --> 00:05:20.787 align:middle
我们将在结果侧边栏内
看到越来越多的东西

00:05:22.656 --> 00:05:24.391 align:middle
因此 关于Playgrounds
很酷的事情之一就是

00:05:24.458 --> 00:05:28.495 align:middle
你总能更进一步地查看
获得关于某个结果的更多信息

00:05:28.762 --> 00:05:31.698 align:middle
只须点击结果旁边的
这个Quick Look按钮即可

00:05:32.065 --> 00:05:34.368 align:middle
那么 我就点击查看
Moscone Center

00:05:34.768 --> 00:05:37.437 align:middle
我们看到了关于我们的地点的
更多一些信息

00:05:38.138 --> 00:05:40.941 align:middle
我们有地名和经纬度

00:05:41.708 --> 00:05:43.310 align:middle
这对于调试是非常方便的

00:05:43.677 --> 00:05:48.515 align:middle
但是 经纬度对我没有实际帮助
我对制图学不是那么在行

00:05:48.582 --> 00:05:50.817 align:middle
我不知道如何在世界上定位这些东西

00:05:51.318 --> 00:05:53.520 align:middle
因此我想看到更直观一点的东西

00:05:53.587 --> 00:05:56.924 align:middle
某种让人大声喊出的东西
“呀 那就是要找的地方”

00:05:57.491 --> 00:05:59.726 align:middle
而对我来说
没有什么能比一个蓝色大圆点

00:05:59.793 --> 00:06:02.029 align:middle
下面加个名字
更能让我喊出地名来了

00:05:59.793 --> 00:06:02.029 align:middle
下面加个名字
更能让我喊出地名来了

00:06:02.095 --> 00:06:03.697 align:middle
我也会在地图上加上这个东西

00:06:04.398 --> 00:06:05.599 align:middle
那么我们要怎么实现呢？

00:06:05.966 --> 00:06:09.102 align:middle
通常当我们希望
做有些定制化或直观的事情时

00:06:09.169 --> 00:06:10.204 align:middle
我们会创建一个视图

00:06:10.604 --> 00:06:13.574 align:middle
那么我们将继续往下进行
在这里创建一个UI View子类

00:06:14.541 --> 00:06:16.577 align:middle
而我们已经设置了它的一些内容

00:06:17.711 --> 00:06:20.147 align:middle
让我们快速地查看一下
我们在这里都有些什么

00:06:21.014 --> 00:06:23.417 align:middle
我们这里有个类叫做 View

00:06:24.151 --> 00:06:25.853 align:middle
它将是一个UI View子类

00:06:26.420 --> 00:06:30.057 align:middle
我们在内部有另一个视图
它将成为我们的蓝色大圆点视图

00:06:30.858 --> 00:06:33.994 align:middle
然后我们有一个名称标签
以显示我们的地名

00:06:34.661 --> 00:06:38.565 align:middle
然后当我们创建这个东西时
我们将让它决定它的大小

00:06:38.999 --> 00:06:40.400 align:middle
最后 在layout子视图中

00:06:40.467 --> 00:06:43.070 align:middle
我们将放置这些东西
以便当蓝色圆点位于顶部

00:06:43.136 --> 00:06:44.004 align:middle
而文本位于下部

00:06:45.506 --> 00:06:48.075 align:middle
那么我们先创建其中一个
看一下它是什么样子

00:06:49.910 --> 00:06:51.778 align:middle
而且我们将让Quick Look弹出

00:06:53.614 --> 00:06:57.384 align:middle
妙极了 那开始更像是一个
我能在地图上看到的地点了

00:06:58.652 --> 00:07:00.921 align:middle
但是我们实际上
要怎样把这些东西合在一起

00:06:58.652 --> 00:07:00.921 align:middle
但是我们实际上
要怎样把这些东西合在一起

00:07:01.355 --> 00:07:03.123 align:middle
以便当我们快速查看地点时

00:07:03.190 --> 00:07:04.892 align:middle
我们实际上会看到视图返回？

00:07:05.926 --> 00:07:07.861 align:middle
为了实现那个目的
我们有另一个新的协议

00:07:07.961 --> 00:07:11.265 align:middle
该协议叫做
CustomPlaygroundQuickLookable

00:07:11.832 --> 00:07:14.067 align:middle
CustomPlaygroundQuickLookable
所做的就是

00:07:14.134 --> 00:07:16.236 align:middle
如果您执行了要求的方法

00:07:16.737 --> 00:07:19.339 align:middle
它将让您 返回另一个type

00:07:19.406 --> 00:07:22.643 align:middle
作为您的type或其他type的
Quick Look 显示的内容

00:07:22.709 --> 00:07:25.946 align:middle
因此那可能是一个贝塞尔曲线
或某种颜色

00:07:26.313 --> 00:07:28.182 align:middle
但是对于我们的情况
我们希望返回视图

00:07:29.183 --> 00:07:32.986 align:middle
因此我将要继续往下进行的就是
为我们的地点创建一个扩展

00:07:34.454 --> 00:07:35.455 align:middle
并且表明

00:07:35.889 --> 00:07:39.226 align:middle
它将执行
CustomPlaygroundQuickLookable

00:07:39.927 --> 00:07:43.030 align:middle
那么我们这里又有一个错误
因为那我们实际上还未遵从那个协议

00:07:43.297 --> 00:07:44.865 align:middle
因此我们将通过执行

00:07:44.932 --> 00:07:47.801 align:middle
CustomPlaygroundQuickLook
添加对它的遵从

00:07:48.902 --> 00:07:50.971 align:middle
那么我们将向那个这个方法内返回

00:07:51.205 --> 00:07:54.575 align:middle
一个反映该视图的
PlaygroundQuickLook

00:07:55.142 --> 00:07:58.912 align:middle
现在 因为我们已经设置了一个扩展
我们可以读取我们的地名

00:07:58.979 --> 00:08:01.648 align:middle
因此 我们可以往下进行
并将地名 赋给那里的初始值

00:07:58.979 --> 00:08:01.648 align:middle
因此 我们可以往下进行
并将地名 赋给那里的初始值

00:08:02.416 --> 00:08:06.153 align:middle
那么现在 当我们快速查看地点时
我们就该看到了

00:08:06.653 --> 00:08:08.555 align:middle
妙极了
我们有了Moscone Center

00:08:08.622 --> 00:08:11.325 align:middle
一切都开始看上起更像个地名了

00:08:12.526 --> 00:08:14.728 align:middle
但是 我们这里还有点代码它似乎

00:08:14.795 --> 00:08:17.397 align:middle
与我们的Playground
其它部分格格不入

00:08:18.131 --> 00:08:21.201 align:middle
我们想把这些内容移开
因为实际上没有其他人关注它

00:08:21.268 --> 00:08:24.204 align:middle
它无助于展示我们所做的工作

00:08:24.805 --> 00:08:27.274 align:middle
那么对这些内容
我们将继续往下进行...

00:08:27.341 --> 00:08:29.877 align:middle
首先我们将删除这里的地点视图
因为我们并不需要它

00:08:30.644 --> 00:08:32.679 align:middle
并且我们将截取这里的这个

00:08:33.046 --> 00:08:33.914 align:middle
我们所声明的视图

00:08:34.881 --> 00:08:39.385 align:middle
并将它直接放在
我们的地点扩展里面

00:08:41.087 --> 00:08:42.289 align:middle
清除这里的一些空白

00:08:43.390 --> 00:08:46.260 align:middle
那么当Playground重新执行时
您应该看到...

00:08:46.426 --> 00:08:47.961 align:middle
妙极了
真是我们以前看到的样子

00:08:48.095 --> 00:08:51.465 align:middle
但是现在 那个视图代码
正好全部嵌入在我们的扩展内

00:08:51.532 --> 00:08:53.333 align:middle
因此它是精致而干净的

00:08:54.801 --> 00:08:56.303 align:middle
这对我们的城市意味着什么呢？

00:08:56.737 --> 00:09:00.874 align:middle
如果我们遵循这样一种模式
希望看看当前我们城市里面有些什么

00:08:56.737 --> 00:09:00.874 align:middle
如果我们遵循这样一种模式
希望看看当前我们城市里面有些什么

00:09:01.208 --> 00:09:03.610 align:middle
那么我们会希望看看
我们的城市里面有些什么地方

00:09:04.344 --> 00:09:05.846 align:middle
那么这将是默认发生的

00:09:05.913 --> 00:09:07.781 align:middle
所以 如果我们点击
Moscone Center的快速查看

00:09:07.848 --> 00:09:09.616 align:middle
我们会发现那里有了个“Place”

00:09:09.983 --> 00:09:12.920 align:middle
而且我们可以看到
Moscone Center那里的蓝点

00:09:12.986 --> 00:09:15.856 align:middle
但是... 随着我们添加更多地点

00:09:15.923 --> 00:09:18.492 align:middle
它不会对我们有太大帮助
它只是会被列入清单而已

00:09:18.859 --> 00:09:23.230 align:middle
我们希望对这些东西的相对位置
有一个直观的印象

00:09:23.297 --> 00:09:26.366 align:middle
因此我们开始着手解决
如果我们在Moscone Center

00:09:26.433 --> 00:09:29.236 align:middle
我们多半不会
直接去Golden Gate Bridge

00:09:29.303 --> 00:09:31.738 align:middle
我们首先多半会去
类似Coit Tower的地方

00:09:32.873 --> 00:09:36.109 align:middle
为此我们创建了另一个扩展
这次是 City 的扩展

00:09:36.176 --> 00:09:39.813 align:middle
它将仍然是
CustomPlaygroundQuickLookable

00:09:40.380 --> 00:09:42.583 align:middle
我们将在这里创建
我已经有了一些现成的代码

00:09:43.383 --> 00:09:44.852 align:middle
我们将快速地查看一下它

00:09:45.552 --> 00:09:46.887 align:middle
那么它是一个City的扩展

00:09:46.954 --> 00:09:49.189 align:middle
我以同样的方式执行了
CustomPlaygroundQuickLookable

00:09:49.523 --> 00:09:53.493 align:middle
我们已经通过执行这里的CustomPlayground
QuickLook方法而遵从了协议

00:09:53.894 --> 00:09:55.729 align:middle
然后在内部我将创建一个视图

00:09:56.063 --> 00:09:58.732 align:middle
根据它们的经纬度
算出这些东西

00:09:58.799 --> 00:10:00.834 align:middle
应该在视图中的位置

00:09:58.799 --> 00:10:00.834 align:middle
应该在视图中的位置

00:10:02.102 --> 00:10:04.972 align:middle
那么现在 当我们快速查看City时
我们应该看到...

00:10:06.139 --> 00:10:09.676 align:middle
妙极了！Moscone Center在那里的
一个空地图的东边

00:10:10.410 --> 00:10:11.745 align:middle
但是我们将创建一张图片

00:10:11.812 --> 00:10:13.780 align:middle
表明我们我们将在这里
实际看到的东西

00:10:15.015 --> 00:10:17.150 align:middle
那么既然我们已经有了这个

00:10:17.651 --> 00:10:18.852 align:middle
我们将添加更多几个地点

00:10:19.119 --> 00:10:20.020 align:middle
但是在那之前

00:10:20.287 --> 00:10:24.324 align:middle
我想让这里的地图视图
一直保持打开状态 或至少可见

00:10:24.691 --> 00:10:27.361 align:middle
当我检查代码的时候
我将打开并关闭它多次

00:10:28.095 --> 00:10:31.832 align:middle
为此我们有这个很酷的小东西
叫做“内嵌结果”

00:10:32.132 --> 00:10:35.002 align:middle
那么 紧靠这个快速查看按钮
如果我点击Show Result

00:10:35.435 --> 00:10:40.307 align:middle
那将会把“快速查看”
直接放在生成它的这行代码下面

00:10:41.308 --> 00:10:44.278 align:middle
那么我可以继续在Playground的工作
并查看它的持续运行

00:10:44.344 --> 00:10:46.213 align:middle
以及了解实际发生的事情

00:10:47.047 --> 00:10:50.050 align:middle
而很酷的事情是目前它还很小

00:10:50.350 --> 00:10:53.453 align:middle
因此我们可以选定并向外拖拽它
就像我们拖拽任何其他窗口一样

00:10:53.587 --> 00:10:55.055 align:middle
随意调整到希望的大小

00:10:56.156 --> 00:10:58.792 align:middle
我们可以开始处理
我们在Playground上的其他内容

00:10:58.859 --> 00:10:59.893 align:middle
添加地点

00:11:00.127 --> 00:11:01.795 align:middle
我们会看到它们
出现在我们的地图上

00:11:03.130 --> 00:11:04.331 align:middle
那么我们希望看到什么呢？

00:11:05.199 --> 00:11:08.402 align:middle
我听说过Golden Gate Bridge
是很酷而且很出名的

00:11:08.702 --> 00:11:10.170 align:middle
因此我将往下进行并尝试一下

00:11:10.604 --> 00:11:12.606 align:middle
我们将把它添加到我们想看的地点

00:11:13.073 --> 00:11:14.274 align:middle
而当Playground重新执行的时候

00:11:14.341 --> 00:11:17.144 align:middle
我们将看到它基于Golden Gate Bridge
的实际位置

00:11:17.611 --> 00:11:20.013 align:middle
我们将把它放在西北部

00:11:20.180 --> 00:11:23.650 align:middle
如果我对
旧金山地理的了解是正确的

00:11:23.917 --> 00:11:24.918 align:middle
我想那就没错

00:11:26.153 --> 00:11:29.156 align:middle
我们还想看些什么？
Sutro Tower 怎么样？

00:11:29.223 --> 00:11:31.658 align:middle
它有点像是是来自于
电影《世界大战》里面的东西

00:11:31.825 --> 00:11:32.860 align:middle
我将把它加入

00:11:33.694 --> 00:11:35.929 align:middle
并放在地点中

00:11:36.597 --> 00:11:38.131 align:middle
我将加入 Sutro Tower

00:11:38.799 --> 00:11:40.200 align:middle
Playground 重新执行

00:11:40.534 --> 00:11:43.237 align:middle
然后我们就会看到
下方也即南边的Sutro Tower

00:11:44.104 --> 00:11:46.940 align:middle
那么我们已经开始真正了解
我们的地点是如何创建的

00:11:47.007 --> 00:11:51.578 align:middle
而随着我们添加越来越多这些地点
根据它们所在的位置 我们将看出

00:11:51.645 --> 00:11:53.113 align:middle
如何游览这些地点

00:11:53.547 --> 00:11:55.883 align:middle
现在我将继续往下进行
并切换到前面的幻灯片

00:11:57.784 --> 00:11:58.986 align:middle
那么您可能已经注意到了

00:11:59.686 --> 00:12:02.089 align:middle
我们的Playground到末尾时
变得有点冗长

00:11:59.686 --> 00:12:02.089 align:middle
我们的Playground到末尾时
变得有点冗长

00:12:02.155 --> 00:12:04.858 align:middle
我们有些视图代码和一些扩展

00:12:05.392 --> 00:12:09.196 align:middle
而且有很多并没有帮助我们
描述问题的内容

00:12:09.930 --> 00:12:11.665 align:middle
它还不是那么完美

00:12:12.165 --> 00:12:13.700 align:middle
那么我们应该做的就是

00:12:13.767 --> 00:12:16.670 align:middle
直接把大量代码
从Playground主体中取出

00:12:16.904 --> 00:12:18.505 align:middle
但仍然把它留在附近以便使用

00:12:19.439 --> 00:12:22.776 align:middle
那么为了向您展示我们如何操作的
我想邀请我的同事 康纳 上台

00:12:33.954 --> 00:12:34.788 align:middle
谢谢你 山姆！

00:12:34.955 --> 00:12:35.789 align:middle
大家好！

00:12:35.889 --> 00:12:38.492 align:middle
我叫 康纳
是 Xcode 团队的一名工程师

00:12:39.026 --> 00:12:42.196 align:middle
今天我将和大家谈谈
如何让您的Playgrounds更加强大

00:12:42.629 --> 00:12:45.032 align:middle
并更专注于手头的问题

00:12:45.732 --> 00:12:47.835 align:middle
为了达到这个目的
让我们直接进入一个演示程序

00:12:47.901 --> 00:12:50.671 align:middle
在里面我将查看
山姆 刚才开始的Playground

00:12:51.004 --> 00:12:53.707 align:middle
并为找到穿越旧金山的最佳路径
添加一些支持

00:12:54.074 --> 00:12:55.776 align:middle
同时也让目标更加明确

00:12:56.276 --> 00:12:57.477 align:middle
现在让我们来看看演示吧

00:13:08.822 --> 00:13:10.591 align:middle
好了 那么我们已经在Xcode中了

00:13:11.191 --> 00:13:14.661 align:middle
如果您注意到的话 我们的Playground
与 山姆 刚才向您展示的基本相同

00:13:14.728 --> 00:13:17.331 align:middle
我们开始先为旧金山创建一个city

00:13:18.131 --> 00:13:21.668 align:middle
我们创建几个地点
然后将它们添加到city

00:13:22.436 --> 00:13:26.440 align:middle
用这个内嵌结果结束
以表明您到目前创建了哪些内容

00:13:27.407 --> 00:13:30.077 align:middle
不过如果您注意到的话
有一个重大区别

00:13:30.244 --> 00:13:33.013 align:middle
那就是整个Playground
现在正好占据一个屏幕

00:13:34.081 --> 00:13:36.617 align:middle
然而 在地点构造体内
我仍在使用我的自定义 city

00:13:36.917 --> 00:13:38.819 align:middle
而尽管Swift编译器很棒

00:13:39.052 --> 00:13:41.622 align:middle
它也不能凭空创建出构造体

00:13:41.889 --> 00:13:43.524 align:middle
因此 我们将转而采用我们在

00:13:43.590 --> 00:13:47.094 align:middle
Xcode 6.3中添加的一个特性
叫做“辅助资源”

00:13:48.061 --> 00:13:50.797 align:middle
“辅助资源”
是额外的Swift源文件

00:13:50.931 --> 00:13:52.666 align:middle
它们被嵌入在您的Playground内部

00:13:53.100 --> 00:13:55.369 align:middle
而且被预先编译到
一个单独的Swift模块中

00:13:56.703 --> 00:13:58.205 align:middle
因为它们不需要具备互动性

00:13:58.272 --> 00:14:00.807 align:middle
它们可以比Playground本身
有更好的表现

00:13:58.272 --> 00:14:00.807 align:middle
它们可以比Playground本身
有更好的表现

00:14:01.608 --> 00:14:03.710 align:middle
此外 由于它们位于一个单独模块内

00:14:03.777 --> 00:14:05.212 align:middle
您可以利用读取控制

00:14:05.546 --> 00:14:10.951 align:middle
来确保只显示那些您希望
Playground可见的辅助资源

00:14:11.018 --> 00:14:14.555 align:middle
因此 您可以在辅助资源中
隐藏大量的内部执行细节

00:14:15.722 --> 00:14:17.824 align:middle
为了找到它们
我们将继续进行并打开浏览器

00:14:19.059 --> 00:14:21.495 align:middle
在您的PC中
我们在顶部有Playground

00:14:21.862 --> 00:14:24.231 align:middle
然后 在Playground内
我们有sources文件夹

00:14:24.431 --> 00:14:27.367 align:middle
在sources文件夹内
我们有一批Swift 源文件

00:14:28.535 --> 00:14:30.938 align:middle
我可以打开一个
这里我们有city.swift

00:14:31.004 --> 00:14:35.509 align:middle
而它大体上是与 山姆
刚才处理的构造体是一样的

00:14:35.576 --> 00:14:36.977 align:middle
只是有些小的修改

00:14:37.945 --> 00:14:40.180 align:middle
首先 我将把它标为 public

00:14:40.948 --> 00:14:45.085 align:middle
因为我们想让city能够
被主Playground自身使用

00:14:45.919 --> 00:14:48.622 align:middle
我也添加了对城市的
旅行时间的支持

00:14:48.689 --> 00:14:52.726 align:middle
以便于我们能够实际追踪
游览城市的每个地点所需的时间

00:14:54.461 --> 00:14:58.398 align:middle
如果我们看一下place.swift
我们发现这里有同样的基本的东西

00:14:58.565 --> 00:15:00.133 align:middle
因此 与我们以前的同样的构造体

00:14:58.565 --> 00:15:00.133 align:middle
因此 与我们以前的同样的构造体

00:15:00.367 --> 00:15:01.902 align:middle
只是被修改而成为public

00:15:02.035 --> 00:15:05.772 align:middle
并有其他一些修改
以便与更新后的city构造体协同工作

00:15:06.974 --> 00:15:09.810 align:middle
有几个其他的辅助资源文件
我不会去探讨它们

00:15:09.877 --> 00:15:12.212 align:middle
一个与属性列表的序列化有关

00:15:12.546 --> 00:15:16.350 align:middle
另一个是我从我做过的其他项目
收集来的各种实用工具

00:15:16.683 --> 00:15:19.219 align:middle
它将在我执行我们的算法的时候
帮我的忙

00:15:20.354 --> 00:15:21.655 align:middle
现在让我们回到主Playground

00:15:23.457 --> 00:15:26.293 align:middle
那么这里我们看到
我们有了一个城市的起点

00:15:26.360 --> 00:15:27.928 align:middle
我们在开始建立某些东西

00:15:28.328 --> 00:15:30.697 align:middle
但是我想参观更多地点
而不只是这两个

00:15:30.964 --> 00:15:35.302 align:middle
而我们也希望有
在不同地点之间的旅行时间

00:15:35.936 --> 00:15:38.505 align:middle
我可以用代码形式全部添加它们
但是那还不够好

00:15:38.572 --> 00:15:40.707 align:middle
因为我们在Playground上方
将会有一堆代码

00:15:40.774 --> 00:15:42.943 align:middle
它们对我们将要展示的东西
并无益处

00:15:44.077 --> 00:15:46.914 align:middle
因此 我将利用Playgrounds中的
另一个特性

00:15:46.980 --> 00:15:48.649 align:middle
叫做“嵌入式资源”

00:15:49.583 --> 00:15:53.320 align:middle
“嵌入式资源”是被复制到
Playground内的文件

00:15:53.720 --> 00:15:56.623 align:middle
Playground本身在运行的时候
可以使用这些文件

00:15:56.690 --> 00:15:58.959 align:middle
作为主 bundle 的资源

00:15:59.793 --> 00:16:02.763 align:middle
而且它们也驻留在浏览器中
在这个小Resources文件夹内

00:15:59.793 --> 00:16:02.763 align:middle
而且它们也驻留在浏览器中
在这个小Resources文件夹内

00:16:03.297 --> 00:16:05.499 align:middle
我将要做的就是把一个plist

00:16:05.566 --> 00:16:09.336 align:middle
从定义旧金山这个城市的
Finder中拖进来

00:16:10.204 --> 00:16:13.173 align:middle
因此我将继续并执行这个操作
我有了SanFrancisco.plist

00:16:13.841 --> 00:16:14.942 align:middle
我可以把它拖到这里来

00:16:15.509 --> 00:16:17.711 align:middle
它就会在Playground文件内被复制

00:16:17.845 --> 00:16:20.714 align:middle
这意味着当你决定
与其他某人共享你的Playground时

00:16:20.781 --> 00:16:23.183 align:middle
我们无须担心
任何外部文件引用的中断

00:16:23.350 --> 00:16:25.786 align:middle
它全部都在那里面
因此你可将其作为独立单元发送

00:16:26.687 --> 00:16:28.689 align:middle
让我们看一下这个plist的样子

00:16:29.823 --> 00:16:32.726 align:middle
首先 我们有一系列地点

00:16:33.560 --> 00:16:36.763 align:middle
每个地点将一组经纬度
映射到一个地名

00:16:38.031 --> 00:16:39.933 align:middle
然后让我们在这个文件里
向下滚动一点

00:16:40.334 --> 00:16:43.103 align:middle
在这里我们会看到
有一系列的旅行时间

00:16:43.704 --> 00:16:46.340 align:middle
而旅行时间则将两个地点映射

00:16:46.406 --> 00:16:48.842 align:middle
到两个地点之间
旅行所需的时间和分钟数

00:16:49.910 --> 00:16:54.515 align:middle
这些时间是使用iOS 9内的
trans directions创建的

00:16:55.449 --> 00:16:57.718 align:middle
不过即使我将这些东西
称作目的地和出发地

00:16:58.051 --> 00:17:00.320 align:middle
我将把它进行一些简化

00:16:58.051 --> 00:17:00.320 align:middle
我将把它进行一些简化

00:17:00.387 --> 00:17:05.626 align:middle
并且假定 从A点到B点所需的时间
与从B点到A点所需的时间相同

00:17:05.992 --> 00:17:08.829 align:middle
因此这实际上是双向旅行时间

00:17:10.263 --> 00:17:11.964 align:middle
现在切换回主Playground

00:17:12.598 --> 00:17:14.535 align:middle
这里并不需要全部代码

00:17:15.002 --> 00:17:17.069 align:middle
我将选取其中的大部分将其删除

00:17:17.804 --> 00:17:21.575 align:middle
并替换为一个调用
加载我的城市San Francisco

00:17:22.843 --> 00:17:25.345 align:middle
从调用这个城市初始值开始

00:17:25.579 --> 00:17:27.714 align:middle
调用contentsOfPropertyListAtURL

00:17:28.080 --> 00:17:31.185 align:middle
它将做的不过就是查看主bundle

00:17:31.518 --> 00:17:35.656 align:middle
以便为特定的资源获取URL
这个资源即San Francisco plist

00:17:36.390 --> 00:17:40.460 align:middle
我们知道
我们刚把它加入了Playground

00:17:40.928 --> 00:17:42.796 align:middle
因此我将把它强制拆包为可选型

00:17:42.863 --> 00:17:45.399 align:middle
以便把它传递给我的初始值

00:17:46.867 --> 00:17:50.838 align:middle
此外 这个初始值也经过更新
以便利用Swift 2的错误处理特性

00:17:51.405 --> 00:17:53.140 align:middle
因此我将向编译器表明

00:17:53.207 --> 00:17:55.442 align:middle
我知道我可以通过Try这个关键字
并在末尾加上一个感叹号

00:17:55.509 --> 00:17:56.777 align:middle
抛出一个错误

00:17:56.844 --> 00:17:59.112 align:middle
因为我不想 增加大量的无助于

00:17:59.479 --> 00:18:02.182 align:middle
我将在Playground中所展示内容的
错误处理代码

00:17:59.479 --> 00:18:02.182 align:middle
我将在Playground中所展示内容的
错误处理代码

00:18:02.349 --> 00:18:04.251 align:middle
此外 我知道这个plist是正确的

00:18:04.451 --> 00:18:06.753 align:middle
因此我这样加载它是没有问题的

00:18:08.288 --> 00:18:09.723 align:middle
我们可以通过内嵌形式显示它

00:18:10.457 --> 00:18:11.692 align:middle
让我们把它放大一些

00:18:13.427 --> 00:18:15.295 align:middle
那么这里就是我们的城市

00:18:15.729 --> 00:18:19.266 align:middle
我们有Moscone Center
Coit Tower 渔夫码头

00:18:19.333 --> 00:18:23.136 align:middle
Painted Ladies, SutroTower
金门公园 金门大桥

00:18:23.570 --> 00:18:25.873 align:middle
以及虽然不在我们的地图上
但仍然在那里的

00:18:26.073 --> 00:18:27.774 align:middle
旧金山国际机场

00:18:27.841 --> 00:18:30.277 align:middle
而且你可以看到连通机场的
所有路线

00:18:31.445 --> 00:18:33.547 align:middle
很棒 现在我们有了一个
我们可以使用的城市

00:18:33.814 --> 00:18:37.818 align:middle
但是现在在我看来
我想把这个Quick Look弄得更好一点

00:18:38.118 --> 00:18:40.821 align:middle
通过为我即将参观的所有地点
增加一些图标

00:18:41.922 --> 00:18:43.690 align:middle
碰巧的是在我的桌面电脑内

00:18:44.091 --> 00:18:45.292 align:middle
我有这个图片文件夹

00:18:45.893 --> 00:18:49.663 align:middle
而如果我把它打开你会看到
这里我有一组用于每个地点的图标

00:18:50.864 --> 00:18:52.399 align:middle
那么我将选取那些图标

00:18:52.666 --> 00:18:55.402 align:middle
并也也把它们
拖拽到Resources文件夹内

00:18:55.969 --> 00:18:59.573 align:middle
正像plist一样 它们将被复制到那里
并提供给我的Playground使用

00:19:00.340 --> 00:19:03.310 align:middle
我还确实需要更新我的Quick Look
以便利用这些图片

00:19:03.744 --> 00:19:07.581 align:middle
因此我将继续并在辅助编辑器中
更新 place.swift 文件

00:19:07.648 --> 00:19:08.682 align:middle
通过点击它即可

00:19:10.450 --> 00:19:12.819 align:middle
然后我会发现这个位置视图

00:19:13.153 --> 00:19:17.858 align:middle
我们要利用这些图片
更新作为初始值的蓝色圆点

00:19:18.692 --> 00:19:20.227 align:middle
那么我可以选取所有那些代码

00:19:21.762 --> 00:19:24.131 align:middle
并更新我们的地点视图

00:19:24.998 --> 00:19:27.234 align:middle
我们将从获取与之关联的图片开始

00:19:27.901 --> 00:19:30.838 align:middle
创建一个图片视图
然后设置几个属性 然后将其返回

00:19:31.672 --> 00:19:33.006 align:middle
现在当我保存这个文件时

00:19:33.674 --> 00:19:35.976 align:middle
Xcode 将注意到
辅助资源已发生变化

00:19:36.043 --> 00:19:38.512 align:middle
并将自动重新编译
它们的Swift 模块

00:19:39.146 --> 00:19:42.549 align:middle
一旦编译结束
我们将重新运行Playground

00:19:42.816 --> 00:19:45.219 align:middle
Quick Look将会自动更新

00:19:45.285 --> 00:19:48.055 align:middle
我所要做的不过是
进行编辑并存储到磁盘

00:19:49.323 --> 00:19:51.325 align:middle
棒极了
Quick Look 看起来好多了

00:19:51.391 --> 00:19:52.759 align:middle
让我们切换回标准编辑器

00:19:52.826 --> 00:19:54.695 align:middle
并开始研究我们的算法

00:19:55.195 --> 00:19:56.296 align:middle
我仍将隐藏浏览器

00:19:56.363 --> 00:19:58.365 align:middle
因为我不需要它
而且我想要额外的空间

00:20:01.502 --> 00:20:04.771 align:middle
因此我们将执行暴力算法
来找到我们通往旧金山之路

00:20:05.138 --> 00:20:06.473 align:middle
而为了开始这一过程

00:20:06.740 --> 00:20:08.775 align:middle
我们需要获取通往旧金山的所有路线

00:20:09.476 --> 00:20:11.912 align:middle
因此我们将从这个开始
而我们所做的就是

00:20:11.979 --> 00:20:14.948 align:middle
通过我们在city结构体上的city方法
调用所有路线

00:20:15.015 --> 00:20:17.117 align:middle
告诉它我们希望
从Moscone Center开始

00:20:17.451 --> 00:20:18.886 align:middle
并且我们希望在机场结束

00:20:19.119 --> 00:20:22.923 align:middle
而如果你看一下右边的侧边栏
我们发现我们有720条路线

00:20:24.525 --> 00:20:26.293 align:middle
然后我将执行算法

00:20:28.328 --> 00:20:33.066 align:middle
这里我们将从几个变量开始
它们将存放我们的结果

00:20:33.267 --> 00:20:35.702 align:middle
一个用于最佳旅行时间
一个用于最佳路线

00:20:36.904 --> 00:20:40.207 align:middle
然后我们将迭代所有穿城路线

00:20:40.807 --> 00:20:42.643 align:middle
为每个路线获取旅行时间

00:20:44.077 --> 00:20:46.180 align:middle
然后我们将把它
与我们的最佳旅行时间相比较

00:20:46.246 --> 00:20:48.382 align:middle
如果必要的话
更新我们的结果变量

00:20:49.583 --> 00:20:53.887 align:middle
最后 我们会在这里
看到穿过城市的最佳旅行时间

00:20:53.954 --> 00:20:55.155 align:middle
那么我们将把它内嵌显示

00:20:55.455 --> 00:20:59.026 align:middle
并且我们将看到如果我们从不停留
并设法在所有交通工具之间转车

00:20:59.092 --> 00:21:02.763 align:middle
在这些地点之间需要 235 分钟

00:20:59.092 --> 00:21:02.763 align:middle
在这些地点之间需要 235 分钟

00:21:04.398 --> 00:21:07.467 align:middle
我们也可以为线路添加内嵌显示
因此我们可以看到

00:21:07.534 --> 00:21:10.637 align:middle
我们将从Moscone Center出发
正如我们所期待那样

00:21:10.838 --> 00:21:13.440 align:middle
然后我们将直接前往
Painted Ladies和Sutro Tower

00:21:13.707 --> 00:21:15.776 align:middle
然后到金门公园和金门大桥

00:21:16.376 --> 00:21:18.812 align:middle
然后我们将前往渔夫码头
以及 Coit Tower

00:21:18.946 --> 00:21:23.183 align:middle
最后抵达旧金山国际机场
搭乘我们的班机

00:21:24.551 --> 00:21:26.720 align:middle
那么很棒
我们已经有了我需要的

00:21:27.187 --> 00:21:29.189 align:middle
游览景点的全部信息

00:21:29.256 --> 00:21:31.992 align:middle
那么现在让我们切换回幻灯片
来解决那个问题

00:21:50.110 --> 00:21:52.779 align:middle
刚才我为大家展示了
如何使用Playgrounds中的

00:21:52.846 --> 00:21:55.115 align:middle
辅助资源和嵌入式资源特性

00:21:55.382 --> 00:21:58.652 align:middle
以便在让它高度专注于
您希望实现的任务的同时

00:21:58.719 --> 00:22:00.721 align:middle
让您的Playground更加强大

00:21:58.719 --> 00:22:00.721 align:middle
让您的Playground更加强大

00:22:02.055 --> 00:22:03.757 align:middle
我这里有些非常有趣的东西

00:22:03.824 --> 00:22:06.894 align:middle
我想在会议结束回家时
与人分享

00:22:07.294 --> 00:22:10.631 align:middle
但是它还不够精炼
还不足以示人

00:22:11.665 --> 00:22:13.867 align:middle
然而 我们已经
在Xcode 7中添加了很多不错的特性

00:22:13.934 --> 00:22:16.670 align:middle
这让您能够比以往更好地
分享您的 Playground

00:22:17.137 --> 00:22:19.640 align:middle
那么现在
我想邀请我的同事 马特 上台

00:22:20.007 --> 00:22:22.543 align:middle
向您展示这些特性
谢谢大家！

00:22:29.082 --> 00:22:30.717 align:middle
非常感谢 康纳！
嗨 大家好！

00:22:30.784 --> 00:22:33.820 align:middle
我叫 马特
也是Xcode团队的一名工程师

00:22:34.321 --> 00:22:36.490 align:middle
我觉得 康纳 和 山姆
已经做得很棒了

00:22:36.557 --> 00:22:38.859 align:middle
他们搭建了一个
令人惊叹的 Playground

00:22:38.926 --> 00:22:42.529 align:middle
向人们展示
如何以最佳方式游览旧金山

00:22:42.996 --> 00:22:45.199 align:middle
但它还未完成
不能与世界分享

00:22:45.265 --> 00:22:47.401 align:middle
因此我将为您提供几个建议和窍门

00:22:47.568 --> 00:22:49.970 align:middle
让您的 Playground
更加丰富 也更吸引人

00:22:50.037 --> 00:22:52.706 align:middle
以便让您把它放在互联网上
人们也会很喜欢它

00:23:03.050 --> 00:23:04.618 align:middle
那么您在这里
可以看到我们有了Playground

00:23:04.685 --> 00:23:06.453 align:middle
康纳 刚刚完成了在它上面的工作

00:23:06.954 --> 00:23:09.790 align:middle
而且 康纳 也写了
一个非常简单的算法

00:23:10.190 --> 00:23:13.560 align:middle
它遍历旧金山这座城市中的
所有可能路线

00:23:13.894 --> 00:23:15.229 align:middle
并将其互相比较

00:23:15.762 --> 00:23:18.332 align:middle
而这对于你们大家是很不错的
因为我们这里已经由 康纳

00:23:18.398 --> 00:23:20.267 align:middle
在执行算法的时候
讲解了路线的每一步

00:23:20.901 --> 00:23:22.636 align:middle
然而 当我们将它
与全世界分享的时候

00:23:22.703 --> 00:23:25.339 align:middle
遗憾的是并不是每个人
都在这里参加 WWDC

00:23:25.606 --> 00:23:28.742 align:middle
因此我们要添加一点信息
一点上下文

00:23:28.909 --> 00:23:30.978 align:middle
以便今后查看此Playground的人

00:23:31.044 --> 00:23:33.146 align:middle
会明白我们到底是怎样
达到这一步的

00:23:34.548 --> 00:23:37.451 align:middle
因此我们在Xcode 6.3中
推出了一个新特性

00:23:37.684 --> 00:23:39.586 align:middle
叫做Playground标记注释

00:23:39.753 --> 00:23:41.722 align:middle
而那让您对您的Playground

00:23:41.788 --> 00:23:44.791 align:middle
添加富文本格式的漂亮的显示

00:23:45.092 --> 00:23:46.493 align:middle
以便人们能够更好地理解

00:23:46.560 --> 00:23:49.563 align:middle
您究竟是如何得到
你想要的 Playground 的

00:23:50.430 --> 00:23:54.835 align:middle
那么再给我一点空间
我将先把QuickLook放在一边

00:23:56.003 --> 00:23:59.339 align:middle
而且我将把Playground顶部的注释

00:23:59.940 --> 00:24:03.377 align:middle
用一些关于游览旧金山的信息替换

00:23:59.940 --> 00:24:03.377 align:middle
用一些关于游览旧金山的信息替换

00:24:03.777 --> 00:24:05.612 align:middle
现在您可以看到
这看上去非常像个注释

00:24:05.679 --> 00:24:07.681 align:middle
您可以把它放在
您的源文件的其他任何地方

00:24:07.748 --> 00:24:13.320 align:middle
但是 富文本标记注释
和其他注释的最大区别是冒号

00:24:13.787 --> 00:24:16.456 align:middle
我们在注释中的
第一个星号后面有个冒号

00:24:16.690 --> 00:24:19.560 align:middle
而且我们也可以对单行注释这样做

00:24:19.760 --> 00:24:21.328 align:middle
也在这里添加一个冒号

00:24:22.029 --> 00:24:23.463 align:middle
而当我来到上边的编辑器菜单

00:24:23.864 --> 00:24:25.699 align:middle
并选择Show Rendered Markup

00:24:26.233 --> 00:24:27.301 align:middle
您会发现它重新渲染

00:24:27.367 --> 00:24:30.437 align:middle
而且现在我们有了这些
好看而丰富的文本块

00:24:30.637 --> 00:24:33.707 align:middle
我们可以用它们来解释
我们的Playground中正在发生什么

00:24:34.775 --> 00:24:36.743 align:middle
我们实际上也可以
重新安排它们的格式

00:24:37.444 --> 00:24:39.313 align:middle
因此 如果我切换回Raw Markup

00:24:41.014 --> 00:24:42.216 align:middle
我可以使用一个井字符号

00:24:42.783 --> 00:24:46.053 align:middle
表明我们希望有一个标题
显示“Exploring San Francisco”

00:24:46.153 --> 00:24:49.456 align:middle
而且我可以使用星号
比如在“most efficient”前后

00:24:49.957 --> 00:24:52.059 align:middle
来表明我们希望
这些内容是斜体的

00:24:52.826 --> 00:24:54.094 align:middle
因此如果我再次执行它

00:24:55.095 --> 00:24:57.531 align:middle
您会看到我们有了个不错的
大号字体的粗体标题

00:24:57.598 --> 00:24:59.967 align:middle
精确地解释我们将要讨论的内容

00:25:00.234 --> 00:25:01.435 align:middle
所以那是一个不错的开端

00:25:01.802 --> 00:25:03.570 align:middle
我也想给它加上更多一点注释

00:25:04.238 --> 00:25:06.940 align:middle
介绍这个Playground里面
正在发生的事情

00:25:07.741 --> 00:25:09.076 align:middle
例如 所有的路线

00:25:09.142 --> 00:25:12.713 align:middle
“所有的穿城路线”有点含糊
而且有点神秘

00:25:12.946 --> 00:25:14.681 align:middle
因此我将添加一点

00:25:16.950 --> 00:25:19.152 align:middle
关于这些路线如何计算出来的信息

00:25:20.587 --> 00:25:23.891 align:middle
而算法本身很可能也使用了一些解释

00:25:24.825 --> 00:25:26.126 align:middle
因此我们将把算法记录下来

00:25:27.361 --> 00:25:29.730 align:middle
而如果我再次切换
回到已被渲染的标记

00:25:30.364 --> 00:25:34.334 align:middle
您会看到现在我们开始获得
某种看起来更像是一本书的东西

00:25:34.401 --> 00:25:37.538 align:middle
某种用户可以坐下来
查看 通读并理解的东西

00:25:37.604 --> 00:25:39.406 align:middle
我们甚至有一个不错的
以粗体字显示的列表

00:25:39.473 --> 00:25:42.576 align:middle
我们通过在每行开头插入一个星号
来实现这个效果

00:25:44.211 --> 00:25:45.078 align:middle
因此那是非常棒的

00:25:46.380 --> 00:25:48.048 align:middle
但是它还不够丰富

00:25:48.115 --> 00:25:51.251 align:middle
我们想把它让它更进一步
因此为了实现目标

00:25:51.318 --> 00:25:54.922 align:middle
我们将采用我们很久以前
在Playgrounds上推出的一个特性

00:25:54.988 --> 00:25:58.525 align:middle
它现在在Xcode 7上的效果更好
那就是“实时视图”

00:25:59.193 --> 00:26:01.128 align:middle
因此我已经斗胆写了一个实时视图

00:25:59.193 --> 00:26:01.128 align:middle
因此我已经斗胆写了一个实时视图

00:26:01.361 --> 00:26:03.697 align:middle
我已经把它加入了附属资源

00:26:04.198 --> 00:26:07.501 align:middle
而我们先从把它
与这个Playground一道展示开始

00:26:07.568 --> 00:26:10.370 align:middle
以视觉化地呈现
这个算法的工作机制

00:26:11.638 --> 00:26:15.275 align:middle
那么使用实时视图的第一步是
您需要导入XCPlayground

00:26:15.342 --> 00:26:18.679 align:middle
它是一个有很多确实很棒的功能的模块

00:26:18.745 --> 00:26:21.181 align:middle
它们让您用 Playground
做一些非常酷的事情

00:26:21.248 --> 00:26:24.284 align:middle
现在也欢迎您在辅助资源中做这件事

00:26:24.351 --> 00:26:27.588 align:middle
比如创建一个 helper 方法
用它显示您的实时视图

00:26:27.654 --> 00:26:29.456 align:middle
您不必在主Playground中做那件事

00:26:29.523 --> 00:26:32.492 align:middle
但是我将在这里做这件事
只是为了更清楚地表明它的工作原理

00:26:34.328 --> 00:26:37.130 align:middle
一旦我们获取了我们的旧金山这个城市
我们就准备好显示它

00:26:37.297 --> 00:26:39.233 align:middle
因此我将实例化一个视图控制器

00:26:40.567 --> 00:26:42.102 align:middle
有了我们的新的城市视图控制器

00:26:42.970 --> 00:26:45.272 align:middle
我将把旧金山这个城市传递进来

00:26:46.940 --> 00:26:50.077 align:middle
然后我将使用XCPShowView函数

00:26:52.012 --> 00:26:53.247 align:middle
将城市名赋值给它

00:26:54.915 --> 00:26:56.783 align:middle
并传入我们的视图控制器的视图

00:26:58.185 --> 00:26:59.520 align:middle
那么如果我现在切换回去

00:26:59.586 --> 00:27:02.990 align:middle
并在Playground重新执行后
显示我们的辅助编辑器

00:26:59.586 --> 00:27:02.990 align:middle
并在Playground重新执行后
显示我们的辅助编辑器

00:27:03.690 --> 00:27:08.195 align:middle
我们将看到一个实时视图
看上起正像是旧金山市

00:27:13.400 --> 00:27:14.701 align:middle
您可以看出我们使用了

00:27:14.768 --> 00:27:17.671 align:middle
我们已添加更多内容的
更丰富的 Quick Looks

00:27:17.804 --> 00:27:20.507 align:middle
而且我们把它们设置在
看起来更真实的背景上面

00:27:20.574 --> 00:27:22.276 align:middle
以便避免人们太分不清方向

00:27:23.577 --> 00:27:25.412 align:middle
那么这就是第一步
但是我们也希望展示

00:27:25.479 --> 00:27:27.548 align:middle
算法本身是如何工作的

00:27:27.781 --> 00:27:29.783 align:middle
而为了达到这个目的
我们将添加一些代码

00:27:30.717 --> 00:27:33.554 align:middle
当我们预演我们的算法时
它会更新实时视图

00:27:34.254 --> 00:27:38.258 align:middle
因此这里我们有一个循环
它对所有线路进行迭代

00:27:38.458 --> 00:27:41.528 align:middle
而我将用我的
视图控制器上的方法替换它

00:27:42.162 --> 00:27:44.998 align:middle
这个方法叫做
VisualizePathIteration

00:27:45.399 --> 00:27:47.901 align:middle
而我写它的时候用了尾随闭包

00:27:48.802 --> 00:27:50.838 align:middle
以便能够实际更新它
因此它看起来

00:27:50.904 --> 00:27:53.774 align:middle
几乎与我们最初的循环代码
完全类似

00:27:54.274 --> 00:27:56.410 align:middle
而且我还将在这里添加一行

00:27:56.977 --> 00:27:58.712 align:middle
告诉视图代码控制器：

00:27:58.846 --> 00:28:00.480 align:middle
一旦我们发现更好的路线

00:27:58.846 --> 00:28:00.480 align:middle
一旦我们发现更好的路线

00:28:00.547 --> 00:28:03.383 align:middle
我们希望显示那条路线
尤其是在我们的地图上

00:28:06.286 --> 00:28:07.921 align:middle
因此它会从头到尾再执行一次

00:28:09.723 --> 00:28:10.724 align:middle
而你也会因此看到

00:28:11.992 --> 00:28:16.864 align:middle
当我们在旧金山全城遍历所有路线
我们将以视觉化形式展示它们

00:28:17.464 --> 00:28:20.400 align:middle
而这是很不错的
因为现在正在阅读这个程序的人们

00:28:20.467 --> 00:28:25.138 align:middle
可以实际看到我们是如何得到答案
如何找到最佳穿城路线的

00:28:27.374 --> 00:28:28.809 align:middle
不过您可能注意到了某些东西

00:28:29.476 --> 00:28:32.079 align:middle
那就是它将检查大量的路线

00:28:32.346 --> 00:28:36.483 align:middle
实际上它将检查 720 条路线
正如 康纳 早些时候指出

00:28:36.717 --> 00:28:38.185 align:middle
而那是相当多了

00:28:38.585 --> 00:28:42.122 align:middle
实际上 实时视图默认运行30秒

00:28:42.189 --> 00:28:46.360 align:middle
您可以使用Playground右下角的
控制条进行更改

00:28:46.994 --> 00:28:51.164 align:middle
而那甚至不足以遍历
旧金山市的所有穿城路线

00:28:51.231 --> 00:28:52.833 align:middle
现在我们已经将其人工减慢了一些

00:28:52.900 --> 00:28:55.669 align:middle
因此 当我们在实时视图上
迭代它们时您可以看到那些路线

00:28:56.303 --> 00:28:58.605 align:middle
但是我觉得的当人们看到路线时
他们会说...

00:28:58.739 --> 00:29:00.073 align:middle
哦 一定有条更好的路线

00:28:58.739 --> 00:29:00.073 align:middle
哦 一定有条更好的路线

00:29:00.674 --> 00:29:01.542 align:middle
实际上确实有

00:29:01.608 --> 00:29:05.279 align:middle
而且我们也乐于从一开始
就把它展示给我们的用户们

00:29:06.280 --> 00:29:07.581 align:middle
因此我们将使用另一种算法

00:29:08.015 --> 00:29:10.350 align:middle
它是“最近邻近似算法”

00:29:10.417 --> 00:29:11.585 align:middle
而它将做的就是

00:29:11.818 --> 00:29:14.321 align:middle
假定我们从 Moscone 出发

00:29:14.621 --> 00:29:16.623 align:middle
我们查看我们想参观的所有地点

00:29:16.690 --> 00:29:18.659 align:middle
然后我们选择最近的一个
并去往那里

00:29:19.092 --> 00:29:20.060 align:middle
然后从那个地点开始

00:29:20.127 --> 00:29:22.329 align:middle
我们将选择下一个最近的地点
并将从那里继续

00:29:22.896 --> 00:29:23.730 align:middle
而如果我愿意

00:29:23.897 --> 00:29:27.367 align:middle
我可以在这个Playground文件的正下方
执行那一操作

00:29:27.935 --> 00:29:30.938 align:middle
但是那将开始变得有点难以理解
而且不是那么专注于目标了

00:29:31.004 --> 00:29:32.739 align:middle
Playgrounds的妙处之一在于

00:29:32.806 --> 00:29:35.709 align:middle
它们是由目标非常非常明确的
内容片段组成的

00:29:35.776 --> 00:29:37.444 align:middle
因此我们希望能够维持这一特点

00:29:38.145 --> 00:29:40.881 align:middle
而为了达到这个目的
我们在Xcode 7中有一个全新的特性

00:29:40.948 --> 00:29:41.949 align:middle
叫做 Pages

00:29:42.149 --> 00:29:45.719 align:middle
它让您在单一Playground文件中
有多页内容

00:29:46.787 --> 00:29:48.989 align:middle
因此为了达到那一目的
我们将打开浏览器

00:29:50.591 --> 00:29:53.293 align:middle
在左下角我们将点击加号按钮

00:29:53.894 --> 00:29:55.762 align:middle
并选择 New Page

00:29:56.530 --> 00:29:59.766 align:middle
而那将在同样的Playground中
创建一个全新的页面

00:30:00.667 --> 00:30:02.469 align:middle
我将把这个页面叫做
Nearest Neighbor

00:30:04.404 --> 00:30:06.273 align:middle
这是根据我们
即将使用的算法而命名的

00:30:07.774 --> 00:30:10.677 align:middle
然后我们将把我们
最初的 Playground

00:30:12.045 --> 00:30:13.413 align:middle
重命名为Getting Around

00:30:16.250 --> 00:30:17.885 align:middle
此外 Pages 的很酷的一点是

00:30:17.951 --> 00:30:19.753 align:middle
就像是辅助资源

00:30:19.820 --> 00:30:22.789 align:middle
以及您可以在顶层水平
加入Playground中资源一样

00:30:23.056 --> 00:30:24.691 align:middle
你也可以在单页的基础上那么做

00:30:24.758 --> 00:30:29.863 align:middle
你可以看到我可以展开
这些Playground页面中的任何一个

00:30:29.930 --> 00:30:31.632 align:middle
而且我们可以嵌入它们自己的来源

00:30:32.165 --> 00:30:34.601 align:middle
例如 任何名称相同的资源

00:30:34.668 --> 00:30:37.404 align:middle
都将优先于更大的
Playground 中的那些资源

00:30:37.471 --> 00:30:39.907 align:middle
所以如果您希望
在每个页面上有不同的印记

00:30:39.973 --> 00:30:42.543 align:middle
或者在您将讲授的
每个页面上的概念上

00:30:42.609 --> 00:30:45.879 align:middle
有特定的图片
您可以非常容易地做到

00:30:46.980 --> 00:30:49.449 align:middle
那么现在我将切换到最近邻页面

00:30:50.517 --> 00:30:52.052 align:middle
切换回 Raw Markup 页面

00:30:52.553 --> 00:30:55.856 align:middle
我已经写好了算法
因此我将径直把它粘贴进来

00:30:58.192 --> 00:31:01.929 align:middle
那么我们这里是一个带有
最近邻近似算法的Playground

00:30:58.192 --> 00:31:01.929 align:middle
那么我们这里是一个带有
最近邻近似算法的Playground

00:31:02.296 --> 00:31:04.464 align:middle
而且您可以看出
当它运行的时候

00:31:05.566 --> 00:31:08.268 align:middle
它会检查少得多的穿城路线

00:31:10.437 --> 00:31:12.673 align:middle
不过 这不是一个最优算法

00:31:12.940 --> 00:31:16.243 align:middle
原因是它不一定会找到我们的
最佳穿城路线

00:31:16.510 --> 00:31:19.346 align:middle
但是您可以看出它已经完成了
非常酷

00:31:19.513 --> 00:31:23.817 align:middle
因此这是一个不错的方法
表明对此问题可能不止一个答案

00:31:24.785 --> 00:31:25.853 align:middle
而如果我们执行它

00:31:27.955 --> 00:31:28.922 align:middle
的话我们也可以表明

00:31:31.124 --> 00:31:34.294 align:middle
我们从哪里获得的这条路线

00:31:34.361 --> 00:31:39.233 align:middle
我们实际上是在维基百科上
发现的关于这个算法的信息

00:31:40.767 --> 00:31:42.803 align:middle
遗憾的是 我缩进得有点太远了

00:31:47.040 --> 00:31:48.809 align:middle
我们可以直接在Playground中
嵌入一个链接

00:31:48.876 --> 00:31:52.179 align:middle
它将把我们带到解释此算法
如何工作的页面

00:31:52.713 --> 00:31:55.716 align:middle
我们也可以在单一Playground中
链接不同页面

00:31:56.016 --> 00:31:59.553 align:middle
并回到我们早些时候发现的最优路线

00:32:00.687 --> 00:32:03.657 align:middle
而实际上 当我们查看路线的数量

00:32:03.724 --> 00:32:05.559 align:middle
我们所走的穿过城市的不同路线

00:32:05.626 --> 00:32:07.761 align:middle
以及该算法的执行所花费的时间时

00:32:08.028 --> 00:32:09.863 align:middle
我们检查了这页上的720条路线

00:32:09.930 --> 00:32:13.267 align:middle
并发现了一条仅比另一个页面上
快21分钟的路线

00:32:13.567 --> 00:32:15.669 align:middle
那么这给了人们一个参考框架
他们会说：

00:32:15.969 --> 00:32:17.371 align:middle
或许有其他方法做这件事

00:32:17.437 --> 00:32:20.507 align:middle
而他们可以用Playground
自己试验

00:32:20.574 --> 00:32:21.408 align:middle
这是非常棒的

00:32:23.043 --> 00:32:24.545 align:middle
而那将在Playgrounds中

00:32:24.978 --> 00:32:27.848 align:middle
添加标记 页面以及
实时视图等部分

00:32:36.123 --> 00:32:40.394 align:middle
那么我们在Xcode 7的Playgrounds中
有了大量的真正令人惊叹的新特性

00:32:40.460 --> 00:32:42.029 align:middle
我们向您展示了
定制化的Quick Looks

00:32:42.095 --> 00:32:44.031 align:middle
它将让您选择自定义的数据类型

00:32:44.097 --> 00:32:47.234 align:middle
并让它们与内置类型一样
生灵活现

00:32:47.835 --> 00:32:49.369 align:middle
我们也有内嵌结果

00:32:49.503 --> 00:32:50.971 align:middle
它们就在Playground内部

00:32:51.038 --> 00:32:53.841 align:middle
因此您既可以让一些结果
直接显示在产生它们的各行代码间

00:32:53.907 --> 00:32:57.177 align:middle
也可以在与他人 分享您的 Playground 时
让另一些结果随Playground显示

00:32:57.578 --> 00:32:59.379 align:middle
我们还有辅助资源这一特性

00:32:59.446 --> 00:33:04.718 align:middle
您可以把附属于您的Playground的
但并不像主Playground内的代码

00:32:59.446 --> 00:33:04.718 align:middle
您可以把附属于您的Playground的
但并不像主Playground内的代码

00:33:04.985 --> 00:33:06.286 align:middle
那样有启发性的代码 放在一边

00:33:06.353 --> 00:33:10.257 align:middle
以便您的用户只看到
你愿意他们看到的API 和实际功能

00:33:10.924 --> 00:33:13.527 align:middle
我们还有“嵌入式资源”特性
借此您可以嵌入图片

00:33:13.594 --> 00:33:16.864 align:middle
并让东西更活灵活现更吸引人

00:33:17.497 --> 00:33:19.366 align:middle
我们还有全新的标记注释特性

00:33:19.566 --> 00:33:22.002 align:middle
当您不能与用户在一起时
它们真的是一个不错的

00:33:22.069 --> 00:33:24.371 align:middle
指导您的用户
通读Playground的方式

00:33:24.705 --> 00:33:26.907 align:middle
经过改进的
比以往任何时候都好的实时视图

00:33:27.441 --> 00:33:31.311 align:middle
以及那些 让您在单一Playground中
覆盖多个话题的页面

00:33:31.378 --> 00:33:34.815 align:middle
同时不偏离任何一个主题的重心
这是确确实实非常酷的

00:33:35.549 --> 00:33:38.986 align:middle
那么那就是我们在Xcode 7的
Playgrounds中的内容

00:33:44.358 --> 00:33:46.560 align:middle
如想了解更多信息
您可以访问我们的网站

00:33:46.627 --> 00:33:49.162 align:middle
我们那里有文稿和开发者论坛

00:33:49.396 --> 00:33:53.200 align:middle
您也可以和斯特凡·乐塞
我们的开发者工具宣传官交谈

00:33:53.800 --> 00:33:55.736 align:middle
我们还有几个相关的讲座环节
将要进行

00:33:56.036 --> 00:33:58.906 align:middle
包括《Swift在实践中》
它将是在明天下午举行

00:33:58.972 --> 00:34:01.141 align:middle
以及《在Swift中 如何使用
数值类型来打造更好的app》

00:33:58.972 --> 00:34:01.141 align:middle
以及《在Swift中 如何使用
数值类型来打造更好的app》

00:34:01.208 --> 00:34:03.310 align:middle
此外还有本周的《Xcode中的新特性》
以及《Swift中的新特性》

00:34:03.377 --> 00:34:04.811 align:middle
等环节都 将是很棒的

00:34:04.878 --> 00:34:07.714 align:middle
非常感谢大家！
请欣赏 WWDC 的剩余内容！
