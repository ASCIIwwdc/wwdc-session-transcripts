WEBVTT

00:00:19.319 --> 00:00:24.391 align:middle
从iPad iOS 9的多任务开始

00:00:25.158 --> 00:00:27.394 align:middle
今天我很高兴能在这里

00:00:27.995 --> 00:00:30.964 align:middle
为您介绍iPad上的多任务执行

00:00:32.064 --> 00:00:36.003 align:middle
我的名字是彼得·哈加斯
我是一名UIKit的框架工程师

00:00:36.904 --> 00:00:39.540 align:middle
待会儿我的同事会加入我们

00:00:40.040 --> 00:00:42.342 align:middle
他们是雅各布·肖和库尔特·雷维斯

00:00:42.576 --> 00:00:45.612 align:middle
所以您可以看到
UIKit的这次演说也是“多任务”

00:00:47.447 --> 00:00:49.783 align:middle
多任务执行是一个巨大的功能

00:00:50.384 --> 00:00:52.953 align:middle
所以我们把它分成三部分来介绍

00:00:53.453 --> 00:00:54.655 align:middle
这是第一部分

00:00:56.056 --> 00:00:57.057 align:middle
明天下午您可以听到

00:00:57.391 --> 00:01:03.463 align:middle
我们带给iPad和iOS 9的
所有伟大且全新的媒体功能介绍

00:00:57.391 --> 00:01:03.463 align:middle
我们带给iPad和iOS 9的
所有伟大且全新的媒体功能介绍

00:01:04.063 --> 00:01:06.466 align:middle
并能了解
picture-in-picture视频

00:01:07.000 --> 00:01:11.638 align:middle
以及在多任务执行时app如何与其它
app一起使用摄像头

00:01:12.873 --> 00:01:16.844 align:middle
明天下午之后还有一个关于您的app
非常棒的讲座

00:01:17.377 --> 00:01:22.916 align:middle
在与其它app一起在iPad上
执行多任务时如何成为杰出的“公民”

00:01:23.483 --> 00:01:27.054 align:middle
我非常推荐您明天去这两场讲座都去听

00:01:30.157 --> 00:01:33.660 align:middle
今天我们要讨论三个主题

00:01:35.028 --> 00:01:38.165 align:middle
第一 在您的app上的多任务执行

00:01:39.066 --> 00:01:39.933 align:middle
是什么

00:01:40.534 --> 00:01:43.403 align:middle
您为什么要采用它
您如何采用它

00:01:44.071 --> 00:01:46.206 align:middle
以及在UIKit的层面上
它意味着什么？

00:01:47.674 --> 00:01:51.512 align:middle
第二 我们对UIKit做出的改变

00:01:52.312 --> 00:01:55.816 align:middle
它让您使用多任务执行变得非常简单

00:01:57.184 --> 00:02:02.122 align:middle
第三是做出了
最新的也最棒的UIKit API

00:01:57.184 --> 00:02:02.122 align:middle
第三是做出了
最新的也最棒的UIKit API

00:02:02.556 --> 00:02:06.293 align:middle
来确保您的app在多任务执行时
能真正出彩

00:02:06.827 --> 00:02:07.761 align:middle
让我们开始吧

00:02:12.766 --> 00:02:14.268 align:middle
正如您在Keynote上看到的

00:02:14.368 --> 00:02:18.705 align:middle
多任务执行为iPad用户
带来了一种很棒的新体验

00:02:20.174 --> 00:02:22.009 align:middle
他们可以做一件自己喜欢的事情

00:02:22.209 --> 00:02:23.410 align:middle
比如浏览网页

00:02:24.144 --> 00:02:27.581 align:middle
然后从右侧滑入
来与另一个app进行交互

00:02:29.183 --> 00:02:32.653 align:middle
我们把这种模式
叫作“slide over”

00:02:41.962 --> 00:02:46.533 align:middle
然后用户可以把
分配器滑动到屏幕的左侧

00:02:47.234 --> 00:02:49.870 align:middle
在上方点击以并排显示app

00:02:51.238 --> 00:02:52.639 align:middle
如您在Keynote上看到的

00:02:52.706 --> 00:02:55.375 align:middle
我们把这种模式
叫作“Split View”

00:02:56.810 --> 00:02:58.679 align:middle
鉴于你们都是iOS开发者

00:02:58.979 --> 00:03:00.581 align:middle
我敢肯定你们都非常熟悉

00:02:58.979 --> 00:03:00.581 align:middle
我敢肯定你们都非常熟悉

00:03:00.647 --> 00:03:03.450 align:middle
我们的UI Splitview Controller API

00:03:04.151 --> 00:03:05.219 align:middle
我可以肯定地告诉您

00:03:05.285 --> 00:03:07.321 align:middle
它跟Split View
是完全不同的

00:03:10.290 --> 00:03:13.360 align:middle
用户可以拖动两个应用程序
之间的分配器

00:03:14.361 --> 00:03:18.098 align:middle
并调整它们的大小以获取一个
50/50Split View界面

00:03:25.405 --> 00:03:28.642 align:middle
然后他们就可以保留分配器
并持续拖动到左侧

00:03:29.376 --> 00:03:30.911 align:middle
来使用边上这个app

00:03:31.144 --> 00:03:34.414 align:middle
在这个案例里 全屏显示的是地图

00:03:36.016 --> 00:03:38.619 align:middle
然后他们可能会选择滑入另一个app

00:03:38.919 --> 00:03:41.121 align:middle
或再次从侧面滑入同一个app

00:03:42.523 --> 00:03:45.592 align:middle
通过iPad上iOS 9的
多任务执行

00:03:46.193 --> 00:03:48.829 align:middle
用户掌控他们的体验

00:03:49.563 --> 00:03:53.634 align:middle
掌控运行中的app以及其运行大小

00:03:55.369 --> 00:04:00.908 align:middle
iPad和iOS9的多任务执行
还有一个很酷的特征

00:03:55.369 --> 00:04:00.908 align:middle
iPad和iOS9的多任务执行
还有一个很酷的特征

00:04:01.775 --> 00:04:04.511 align:middle
就是
picture-in-picture视频

00:04:05.646 --> 00:04:10.083 align:middle
关于这个您都可以在明天的
媒体多任务执行讲座中听到

00:04:11.552 --> 00:04:18.257 align:middle
今天我们要解释您的app如何使用
split view和slide over

00:04:19.726 --> 00:04:21.995 align:middle
为了了解如何使用它们

00:04:22.429 --> 00:04:23.864 align:middle
我们有必要先讲一讲

00:04:24.264 --> 00:04:27.801 align:middle
在UIKit app中
正变得越来越重要的一样东西

00:04:28.669 --> 00:04:30.470 align:middle
以及它的适应性

00:04:38.145 --> 00:04:42.649 align:middle
在过去 我们曾经鼓励您
把您的app做成普遍通用的

00:04:43.350 --> 00:04:47.855 align:middle
这意味着相同的app可以
在iPhone和iPad上运行

00:04:49.857 --> 00:04:52.860 align:middle
去年我们介绍给您一个简单的方法

00:04:53.393 --> 00:04:57.698 align:middle
来查看您应该向您的用户
提供什么类型的界面

00:04:59.066 --> 00:05:02.769 align:middle
通过介绍水平尺寸等级

00:04:59.066 --> 00:05:02.769 align:middle
通过介绍水平尺寸等级

00:05:05.372 --> 00:05:10.878 align:middle
去年 iPhone竖直时
拥有紧凑的水平尺寸

00:05:12.112 --> 00:05:16.083 align:middle
它们按传统方式显示
一个单列的内容

00:05:17.618 --> 00:05:21.555 align:middle
而iPad拥有常规的水平尺寸

00:05:22.656 --> 00:05:26.059 align:middle
许多苹果本身的系统app都以此指示

00:05:26.126 --> 00:05:28.896 align:middle
它们应该显示多列内容

00:05:30.163 --> 00:05:33.767 align:middle
并更改呈现给用户的信息格式

00:05:36.637 --> 00:05:40.207 align:middle
另外 在去年的全球研发大会上

00:05:40.974 --> 00:05:44.611 align:middle
这个设置在横向时也是适用的

00:05:45.812 --> 00:05:47.981 align:middle
iPhone用紧凑的水平尺寸

00:05:48.582 --> 00:05:51.218 align:middle
iPad用常规的水平尺寸

00:05:52.853 --> 00:05:56.323 align:middle
那就是去年的全球研发大会

00:05:58.158 --> 00:05:59.726 align:middle
但是如果您仔细观察

00:05:59.960 --> 00:06:04.698 align:middle
去年还有一个很明显的消息
如果您用显微镜看的话

00:05:59.960 --> 00:06:04.698 align:middle
去年还有一个很明显的消息
如果您用显微镜看的话

00:06:05.465 --> 00:06:09.069 align:middle
我们当时在提示您
为iPhone 6+做好准备

00:06:11.772 --> 00:06:13.707 align:middle
就像我们现有的iPhone手机一样

00:06:14.241 --> 00:06:18.512 align:middle
iPhone 6+也有紧凑的
水平尺寸

00:06:20.214 --> 00:06:22.015 align:middle
但是当旋转为横向时

00:06:23.016 --> 00:06:26.053 align:middle
它就是常规的水平尺寸了

00:06:27.020 --> 00:06:32.726 align:middle
这是第一次一个app在运行时
就可以有不同的尺寸

00:06:34.428 --> 00:06:36.563 align:middle
我们就那样来到了今年

00:06:38.165 --> 00:06:40.968 align:middle
同样的 如果您接受了今年的邀请

00:06:41.502 --> 00:06:43.036 align:middle
然后画了线条并且旋转它

00:06:43.103 --> 00:06:45.806 align:middle
你知道在逻辑上来说这是合理的
它就形成了一个“P”

00:06:46.139 --> 00:06:48.509 align:middle
“iPad的多任务执行”中的
这个“P”字

00:06:48.976 --> 00:06:49.977 align:middle
显而易见

00:06:56.316 --> 00:06:57.150 align:middle
谢谢

00:06:57.751 --> 00:07:01.388 align:middle
那么iPad的多任务执行如何与适应
性达到协调呢？

00:06:57.751 --> 00:07:01.388 align:middle
那么iPad的多任务执行如何与适应
性达到协调呢？

00:07:03.323 --> 00:07:06.026 align:middle
让我们举一个
slide over app的例子

00:07:07.694 --> 00:07:10.230 align:middle
用户从右侧显示屏滑过

00:07:11.798 --> 00:07:16.036 align:middle
app以紧凑的水平尺寸出现

00:07:17.204 --> 00:07:21.675 align:middle
这显示了我们通常拥有的
iPhone体验

00:07:23.177 --> 00:07:26.647 align:middle
接着用户可能会选择
把他们的app调整为全屏显示

00:07:27.147 --> 00:07:31.218 align:middle
这样它会就变成常规的横向尺寸

00:07:31.652 --> 00:07:34.388 align:middle
并显示它传统的
iPad UI

00:07:35.622 --> 00:07:39.960 align:middle
两个以前从不可能在iPad上
发生的事情 现在发生了

00:07:41.061 --> 00:07:46.767 align:middle
首先
app开始以紧凑的水平尺寸类显示

00:07:47.301 --> 00:07:49.970 align:middle
这在以前的iPad上是完全不可能的

00:07:51.004 --> 00:07:55.776 align:middle
第二 当用户调整它时
app的尺寸级别也产生改变

00:07:56.276 --> 00:07:59.279 align:middle
这也是全新的iOS 9功能

00:08:06.520 --> 00:08:09.890 align:middle
所以 这为您的app
和您的用户带来了什么？

00:08:10.991 --> 00:08:13.393 align:middle
让我们从这些用户的观点来看看

00:08:15.395 --> 00:08:21.468 align:middle
他们可以浏览网络并与iPad上他们
喜爱的另一个app进行交互

00:08:22.703 --> 00:08:24.037 align:middle
因此 他们会从右侧滑入

00:08:24.438 --> 00:08:27.774 align:middle
他们会想在这个列表中看到app

00:08:30.511 --> 00:08:35.249 align:middle
通过在您的app采用多任务执行
在iPad和iOS 9中

00:08:36.216 --> 00:08:39.019 align:middle
您可以让用户更频繁地进入您的app

00:08:40.020 --> 00:08:45.559 align:middle
在使用其他喜欢的iPad app时
花更多的时间在您的app上

00:08:46.393 --> 00:08:50.197 align:middle
并以您可能从来没有想象过的
全新的方式

00:08:50.597 --> 00:08:52.566 align:middle
与其他的app一起使用您的app

00:08:53.667 --> 00:08:58.505 align:middle
用户会希望所有在他们的iPad上的
app都支持多任务执行

00:08:59.006 --> 00:09:01.008 align:middle
而我们就在这里帮您采用它

00:08:59.006 --> 00:09:01.008 align:middle
而我们就在这里帮您采用它

00:09:02.409 --> 00:09:07.181 align:middle
让我们来看看 添加多任务执行到您的
iOS app有多么容易

00:09:08.182 --> 00:09:10.717 align:middle
我有好消息告诉大家
这真的很简单

00:09:11.818 --> 00:09:14.588 align:middle
您所需要做的就是
使用Xcode7测试版

00:09:15.689 --> 00:09:17.357 align:middle
并创建一个新的项目

00:09:18.192 --> 00:09:20.527 align:middle
所有用Xcode 7创建的新项目

00:09:20.861 --> 00:09:23.697 align:middle
都默认启用iPad多任务程序

00:09:24.264 --> 00:09:26.934 align:middle
而且您所写的所有代码
都会在多任务执行中运行

00:09:27.234 --> 00:09:28.936 align:middle
仅此而已
就只是做一个新项目

00:09:31.238 --> 00:09:34.975 align:middle
现在就在这场讲座之前
台下的一些我的同事提醒我

00:09:35.042 --> 00:09:38.946 align:middle
有一两个现有的app可以
选择采用多任务执行

00:09:39.680 --> 00:09:42.182 align:middle
而对于这些app也很简单

00:09:42.583 --> 00:09:45.118 align:middle
您只需要按照
三个简单的步骤来做

00:09:47.020 --> 00:09:50.891 align:middle
首先 使用iOS 9 SDK
创建您的app

00:09:51.592 --> 00:09:55.028 align:middle
您可以在Xcode的构建设置里
这么做

00:09:57.097 --> 00:10:02.936 align:middle
其次
支持全方位app的iPad版本

00:09:57.097 --> 00:10:02.936 align:middle
其次
支持全方位app的iPad版本

00:10:04.771 --> 00:10:07.875 align:middle
在去年的会议上我们鼓励您去思考

00:10:08.008 --> 00:10:11.912 align:middle
随着简单界限大小的变换环境如何变化

00:10:12.513 --> 00:10:15.048 align:middle
而这个建议也将保持在iOS 9中

00:10:16.216 --> 00:10:20.387 align:middle
因为一个多重任务的大小调整
只是一个范围的大小变化

00:10:21.822 --> 00:10:27.394 align:middle
但是 因为用户掌控着
他们手里的iPad的环境

00:10:27.728 --> 00:10:33.267 align:middle
在多重任务里您的iPad app要
支持所有的环境是非常重要的

00:10:35.469 --> 00:10:40.440 align:middle
最后
第三样您需要做的是使用启动记事板

00:10:41.775 --> 00:10:45.512 align:middle
去年介绍的
启动记事板对您来说是一个伟大的程式

00:10:45.579 --> 00:10:48.015 align:middle
它帮您的app明确
一个记事板的启用外观

00:10:48.482 --> 00:10:50.384 align:middle
这个外观适用于iOS支持的

00:10:50.918 --> 00:10:57.024 align:middle
所有大小 配置 方位 装置

00:10:58.492 --> 00:11:01.862 align:middle
在iPad的多重任务
所支持多种不同的尺寸下

00:10:58.492 --> 00:11:01.862 align:middle
在iPad的多重任务
所支持多种不同的尺寸下

00:11:02.429 --> 00:11:05.599 align:middle
使用启动记事板是
将其加入的一个必要条件

00:11:07.167 --> 00:11:08.302 align:middle
其中一个要点是

00:11:09.069 --> 00:11:11.738 align:middle
如果您的app需要一个全屏的体验

00:11:12.172 --> 00:11:15.843 align:middle
您可以在您的信息栏中
使用UI全屏按键

00:11:16.243 --> 00:11:17.444 align:middle
选择退出

00:11:25.452 --> 00:11:27.888 align:middle
现在我们已经知道用您现有的项目

00:11:28.188 --> 00:11:31.758 align:middle
创建或添加一个新的多任务执行项目
是多么简单

00:11:32.492 --> 00:11:35.762 align:middle
让我们看看它在您的ipad
和UIKit级别上是如何运作的

00:11:36.330 --> 00:11:39.032 align:middle
有一些非常重要的变化
是您应该注意的

00:11:40.934 --> 00:11:44.838 align:middle
在过去 UI屏幕边界会返回

00:11:45.205 --> 00:11:48.675 align:middle
装置整个展示的可视范围

00:11:49.710 --> 00:11:51.778 align:middle
这也发生在iOS 9上

00:11:53.080 --> 00:11:59.186 align:middle
无论您的app正在全屏操作
或在多重任务中被重新调整了尺寸

00:12:00.521 --> 00:12:04.591 align:middle
一个真正重要的改变是
该UI窗口边界

00:12:04.825 --> 00:12:06.760 align:middle
好吧
它返回您的窗口边界

00:12:07.528 --> 00:12:12.866 align:middle
但是您的窗口边界不总是
与该设置的屏幕边界相同

00:12:13.433 --> 00:12:17.104 align:middle
例如 当您的app
在多任务执行中被调整大小

00:12:18.539 --> 00:12:20.174 align:middle
另一个重要改变是

00:12:20.674 --> 00:12:25.779 align:middle
您的窗口框架原点总是在左上角

00:12:26.246 --> 00:12:27.114 align:middle
（0,0）

00:12:27.714 --> 00:12:30.417 align:middle
<br/>
不管您在屏幕的左侧运行

00:12:32.319 --> 00:12:33.720 align:middle
还是在右侧运行

00:12:34.988 --> 00:12:39.593 align:middle
我们不希望您担心
您在屏幕的哪一边运行

00:12:39.660 --> 00:12:41.628 align:middle
或者
您正在运行其他哪些程序等等

00:12:42.095 --> 00:12:45.666 align:middle
我们只希望您关注您的app使用体验

00:12:48.035 --> 00:12:50.704 align:middle
现在让我们来谈谈
在您的app被调整的时候

00:12:51.238 --> 00:12:54.341 align:middle
哪些不同类型的转移可以发生

00:12:55.175 --> 00:12:59.680 align:middle
举个例子 在iOS9中完美表现
多任务执行的app

00:13:00.480 --> 00:13:02.282 align:middle
全新的Notes app

00:13:03.617 --> 00:13:05.419 align:middle
这是在iPad上
新的Notes app

00:13:05.485 --> 00:13:08.121 align:middle
作为一个slide over
app在运行

00:13:09.356 --> 00:13:12.860 align:middle
您会发现它看起来很像
iPhone的Notes app

00:13:13.994 --> 00:13:16.396 align:middle
它显示单列的UI

00:13:18.031 --> 00:13:22.769 align:middle
我们称之为横向尺寸紧凑级

00:13:24.571 --> 00:13:27.207 align:middle
随后 用户可能会调整我们的app

00:13:28.375 --> 00:13:35.182 align:middle
而在某一点我们会改变哪个级别的体验
是我们需要提供给用户的

00:13:37.117 --> 00:13:40.888 align:middle
请注意
现在的Notes显示两列的内容

00:13:42.523 --> 00:13:47.694 align:middle
这是相同的常规水平尺寸
就如我们之前看到的那样

00:13:50.831 --> 00:13:54.735 align:middle
请留意注释如何改变了
该app的信息架构

00:13:55.235 --> 00:13:59.473 align:middle
以在左侧显示您的注意列表
并在右侧显示一个注释

00:14:00.374 --> 00:14:05.712 align:middle
这类型的变换
是您应该使用尺寸转换来影响的

00:14:08.182 --> 00:14:11.151 align:middle
关于这转换
有重要的一点需要注意

00:14:11.585 --> 00:14:15.522 align:middle
并不是所有的尺寸调整
都会导致尺寸变化

00:14:16.990 --> 00:14:22.129 align:middle
例如 如果Notes在iPad上以
split view运行

00:14:23.163 --> 00:14:25.265 align:middle
而用户稍微调整了该app

00:14:26.767 --> 00:14:28.902 align:middle
这不会改变尺寸级别

00:14:30.137 --> 00:14:33.640 align:middle
它将仍然显示一个单列UI

00:14:36.009 --> 00:14:38.111 align:middle
为了不改变用户体验

00:14:39.146 --> 00:14:44.117 align:middle
Notes使用这个新尺寸来影响
其视图的定位和排版

00:14:45.752 --> 00:14:48.422 align:middle
再看看
我们把app弄得稍微小了一点

00:14:49.223 --> 00:14:51.692 align:middle
仍然是单列UI

00:14:54.261 --> 00:14:58.098 align:middle
UIKit已对我们当前的API
作出了一些重要的变化

00:14:58.498 --> 00:15:00.701 align:middle
以使您的app更容易地采用它

00:14:58.498 --> 00:15:00.701 align:middle
以使您的app更容易地采用它

00:15:02.002 --> 00:15:05.873 align:middle
我们鼓励您使用的其中一种技术是
是自动排版

00:15:06.607 --> 00:15:10.310 align:middle
UIKit和AppKit的
声明视图布局体系

00:15:11.845 --> 00:15:16.416 align:middle
自动布局让您
使用限制来定位您的观点

00:15:17.084 --> 00:15:22.456 align:middle
然后当范围更改时
自动排版将重新设置适当的中心和框架

00:15:22.890 --> 00:15:24.224 align:middle
这真的很容易使用

00:15:25.459 --> 00:15:31.031 align:middle
在新的iOS 9里
我们增加了一些伟大的新限制便利

00:15:31.365 --> 00:15:34.301 align:middle
API创建自动排版限制
变得非常简单

00:15:35.469 --> 00:15:39.640 align:middle
此外 如果您使用领先和尾部排版属性

00:15:40.274 --> 00:15:44.311 align:middle
在您的app里
您将得到很多从右到左的免费语言支持

00:15:53.120 --> 00:15:58.392 align:middle
我们看到的另一个
帮助app调整的重要领域

00:15:59.226 --> 00:16:01.161 align:middle
是以易读性的形式呈现的

00:15:59.226 --> 00:16:01.161 align:middle
是以易读性的形式呈现的

00:16:02.462 --> 00:16:05.566 align:middle
我们在UIView上引入新的API

00:16:06.233 --> 00:16:07.601 align:middle
“可读性内容指南”

00:16:08.969 --> 00:16:11.171 align:middle
这将返回一个UI排版指南

00:16:11.672 --> 00:16:15.242 align:middle
它代表着一个UIView的可阅范围

00:16:16.810 --> 00:16:22.182 align:middle
这意味着 如果您使用这个可读性内容
指南定位您的观点

00:16:22.449 --> 00:16:24.885 align:middle
它们将总是保持在可阅宽度内

00:16:25.619 --> 00:16:26.453 align:middle
举个例子

00:16:28.055 --> 00:16:30.791 align:middle
在这个app示例中
我们采用了可阅性内容指南

00:16:31.625 --> 00:16:35.095 align:middle
视图是全尺寸
它的尺寸是整个iPad

00:16:35.996 --> 00:16:39.600 align:middle
但可阅性内容指南
提供了足够的间隔

00:16:40.167 --> 00:16:42.970 align:middle
以确保文字是
是很容易被阅读的

00:16:45.005 --> 00:16:47.274 align:middle
可阅性内容指南的一个很大的特点

00:16:47.508 --> 00:16:49.576 align:middle
是会自动调整

00:16:49.977 --> 00:16:53.647 align:middle
这取决于当前app的尺寸级别和装置

00:16:55.449 --> 00:16:57.951 align:middle
它与动态类型也配合地相当完美

00:16:58.252 --> 00:17:00.954 align:middle
这是我们鼓励所有app采用的

00:16:58.252 --> 00:17:00.954 align:middle
这是我们鼓励所有app采用的

00:17:02.155 --> 00:17:05.392 align:middle
您可以决定是否使用自动排版

00:17:07.361 --> 00:17:11.131 align:middle
许多iOS app中常见的组件
是UI表视图

00:17:11.665 --> 00:17:14.968 align:middle
我们想让可阅性在那里也很容易被使用

00:17:16.002 --> 00:17:19.138 align:middle
所以我们在UI表视图推出了新的工具

00:17:19.806 --> 00:17:23.010 align:middle
“可阅宽度决定单元排版间隔”

00:17:24.243 --> 00:17:26.012 align:middle
当此属性设置为是时

00:17:26.680 --> 00:17:31.151 align:middle
您的表视图的单元内容外观
将有排版的间隔

00:17:31.218 --> 00:17:34.988 align:middle
相对于那些边距设定这样的内容制定

00:17:35.556 --> 00:17:38.692 align:middle
是给用户一个合适的可阅的宽度

00:17:40.327 --> 00:17:43.530 align:middle
这意味着 通过简单地使用排版边距

00:17:43.597 --> 00:17:46.099 align:middle
在您的UI表视图的单元内容呈现中

00:17:47.167 --> 00:17:53.507 align:middle
其内容在您的单元中 会以一个合适的
宽度在iPad上全屏运行

00:17:55.742 --> 00:17:58.679 align:middle
或在一个
例如纵向iPhone的小屏幕上运行

00:18:00.581 --> 00:18:04.718 align:middle
现在 我们已经谈到了多任务执行的
一些很大的改进

00:18:05.385 --> 00:18:08.522 align:middle
我想把它交给我的朋友兼同事雅各布肖

00:18:09.022 --> 00:18:13.460 align:middle
来谈谈UIKit里什么在改变以及
一些您的app应该遵循的最佳实践

00:18:13.694 --> 00:18:14.528 align:middle
雅各布？

00:18:20.601 --> 00:18:21.435 align:middle
谢谢 彼得

00:18:22.936 --> 00:18:27.474 align:middle
我想告诉大家
一些为了支持多任务执行的iOS改变

00:18:28.041 --> 00:18:31.979 align:middle
还有一些运作已变更的app的
最佳实践

00:18:34.081 --> 00:18:34.915 align:middle
所以去年我们要求

00:18:35.582 --> 00:18:39.887 align:middle
您通过使用特征和尺寸
让您的app普遍通用

00:18:40.921 --> 00:18:42.589 align:middle
您可以看到更多的相关信息

00:18:42.990 --> 00:18:45.926 align:middle
呈现在“与UIKit创建普遍化应用
套件”去年的谈论中

00:18:47.461 --> 00:18:51.431 align:middle
那么现在iPad的多任务执行
就在这里到底发生了什么变化？

00:18:52.399 --> 00:18:54.434 align:middle
其实答案是没有多少

00:18:55.536 --> 00:18:57.171 align:middle
仅此而已
请尽情享受这会谈

00:18:59.773 --> 00:19:02.709 align:middle
好吧 所以有几个重要的变更
是您必须要牢记的

00:18:59.773 --> 00:19:02.709 align:middle
好吧 所以有几个重要的变更
是您必须要牢记的

00:19:03.076 --> 00:19:05.379 align:middle
这能给您的app一个很棒的
多任务执行体验

00:19:05.812 --> 00:19:07.114 align:middle
让我们来谈谈当中的一些要素

00:19:08.415 --> 00:19:09.950 align:middle
让我们先从方位开始谈起

00:19:11.485 --> 00:19:14.188 align:middle
你们有多少人的app代码
看起来是这样的？

00:19:15.055 --> 00:19:16.924 align:middle
没关系
这是一个免判定区域

00:19:18.759 --> 00:19:20.727 align:middle
这种代码在过去有很大的意义

00:19:21.995 --> 00:19:25.832 align:middle
它让您的app在纵向或横向时
有一个不同的排版

00:19:26.366 --> 00:19:29.336 align:middle
以便真正最佳地利用空间
这是您可以用到的

00:19:30.804 --> 00:19:34.408 align:middle
但是您要想想这如何运行于
iPad上的多任务执行

00:19:35.242 --> 00:19:38.912 align:middle
例如 这里
虽然iPad本身就是横向的

00:19:39.980 --> 00:19:42.716 align:middle
我们并不希望
在这里使用横向版本的排版

00:19:43.383 --> 00:19:45.485 align:middle
因为我们有太多的垂直空间

00:19:46.220 --> 00:19:48.822 align:middle
这让我们使用以前的排版更合理

00:19:48.889 --> 00:19:50.457 align:middle
我们称那为纵向排版

00:19:51.758 --> 00:19:57.364 align:middle
因此在多任务执行中最好避免过度考虑
尤其是关于界面方位要素的

00:19:58.198 --> 00:20:01.168 align:middle
让我们来看看您可以怎么做
来应对这种变化

00:19:58.198 --> 00:20:01.168 align:middle
让我们来看看您可以怎么做
来应对这种变化

00:20:02.603 --> 00:20:03.737 align:middle
为了更好地理解这一点

00:20:04.204 --> 00:20:07.241 align:middle
让我们来仔细看看
在旋转过程中发生了什么

00:20:08.208 --> 00:20:10.444 align:middle
首先让我们来看看
一个iPhone的旋转

00:20:11.712 --> 00:20:15.749 align:middle
当装置旋转时
您的app将被调整并与其一起旋转

00:20:16.650 --> 00:20:20.487 align:middle
而实际上我们可以把这个转化
分成两部分

00:20:22.256 --> 00:20:25.759 align:middle
首先
您的app被调整成新的内容的尺寸

00:20:26.894 --> 00:20:29.863 align:middle
然后它实际上是旋转了方向
其实只是用户看到了正面

00:20:31.532 --> 00:20:35.936 align:middle
现在我们可以在iPad上做一些相似
的旋转 包括多任务执行

00:20:37.070 --> 00:20:40.007 align:middle
再次 这是旋转本身的样子

00:20:40.941 --> 00:20:44.578 align:middle
我们首先可以将它拆开为
首先是内容调整尺寸

00:20:46.246 --> 00:20:47.214 align:middle
然后是旋转

00:20:48.949 --> 00:20:53.153 align:middle
现在当用户在查看此旋转时
这两个变化将同时发生

00:20:53.754 --> 00:20:56.490 align:middle
但是不妨想想把
它们当作两次独立的变更

00:20:57.391 --> 00:20:59.026 align:middle
这样做的一个很大的好处是

00:20:59.593 --> 00:21:02.429 align:middle
您确实可以用多任务执行的尺寸调整
共享很多东西

00:20:59.593 --> 00:21:02.429 align:middle
您确实可以用多任务执行的尺寸调整
共享很多东西

00:21:03.263 --> 00:21:05.032 align:middle
在这里 相同的事情正在发生

00:21:05.399 --> 00:21:07.935 align:middle
只是尺寸调整部分而不包括旋转

00:21:08.802 --> 00:21:10.370 align:middle
因此当用户调整app时

00:21:11.738 --> 00:21:13.640 align:middle
它仅仅是一个内容边界尺寸变化

00:21:15.242 --> 00:21:18.679 align:middle
因此在过去如果您使用的是界面方位

00:21:19.146 --> 00:21:24.151 align:middle
明确地说我会鼓励您做而不是去思考您
该怎么处理相关的视图尺寸变化

00:21:24.618 --> 00:21:25.886 align:middle
针对于这类型的排版变更

00:21:26.854 --> 00:21:30.757 align:middle
另一个很好的选择就是考虑
使用垂直或水平尺寸

00:21:31.625 --> 00:21:35.229 align:middle
不管用其中哪一种方法都能让您的应用
程序非常契合地运行多任务执行

00:21:37.097 --> 00:21:39.399 align:middle
那么接下来就让我们一起来仔细看看

00:21:39.766 --> 00:21:42.169 align:middle
类似旋转和多任务执行的
尺寸调整的转变

00:21:43.804 --> 00:21:47.474 align:middle
以前我们有提及
您的应用程序的相关旋转

00:21:48.942 --> 00:21:52.713 align:middle
但是这些回调都明确地运行
界面的方位变更

00:21:53.447 --> 00:21:56.817 align:middle
因此相对的
在iOS 8我们推出了新的相关回调

00:21:57.117 --> 00:21:59.853 align:middle
以针对特性组合或视图尺寸的变化

00:22:00.621 --> 00:22:02.589 align:middle
我们强烈鼓励您使用这些

00:22:03.991 --> 00:22:07.861 align:middle
现在为了更好地了解
这类旋转转移的发生

00:22:08.262 --> 00:22:11.832 align:middle
让我们来看看时间表在这当中的转变

00:22:12.799 --> 00:22:13.834 align:middle
让我们从旋转开始谈起

00:22:15.235 --> 00:22:19.139 align:middle
现在我们可以把这个旋转转移
分成几个不同的阶段

00:22:20.107 --> 00:22:22.876 align:middle
首先我们将设置即将产生的变更

00:22:24.111 --> 00:22:27.181 align:middle
然后我们将创建我们将给用户
展示的动画

00:22:28.148 --> 00:22:29.850 align:middle
然后我们将实际运行这些动画

00:22:30.117 --> 00:22:33.987 align:middle
而这一阶段是旋转发生时
该用户实际看到的部分

00:22:35.222 --> 00:22:37.758 align:middle
接着当一切都完成后
我们要进行一些清理

00:22:39.226 --> 00:22:43.330 align:middle
现在当转移中的尺寸与其尺寸级别
实际上为您的app变更了

00:22:43.664 --> 00:22:45.699 align:middle
此为最后的“设置”阶段

00:22:47.134 --> 00:22:49.570 align:middle
所以现在我们已看见各阶段的这种转变

00:22:49.770 --> 00:22:51.405 align:middle
让我们来看看这些回调又怎么融入

00:22:52.806 --> 00:22:55.576 align:middle
所有转移回调都发生于

00:22:55.642 --> 00:22:57.978 align:middle
这些转移的“设置”阶段

00:22:59.313 --> 00:23:04.318 align:middle
现在同样的 当尺寸改变时
这被称作“特征组合已变更”

00:22:59.313 --> 00:23:04.318 align:middle
现在同样的 当尺寸改变时
这被称作“特征组合已变更”

00:23:04.518 --> 00:23:06.220 align:middle
在您的视图和视图控制器里

00:23:08.055 --> 00:23:13.260 align:middle
现在两个转移回调不只给您
有关即将发生的更改的信息

00:23:13.760 --> 00:23:16.029 align:middle
它们也给您的app带来一个转移协调

00:23:16.730 --> 00:23:21.735 align:middle
转移协调可以使用的API
来添加自己要运行的动画区块

00:23:22.069 --> 00:23:24.004 align:middle
作为主要动画的一部分

00:23:24.905 --> 00:23:28.208 align:middle
如果您那么做
它们将设置于“创建动画”阶段

00:23:29.877 --> 00:23:33.280 align:middle
同样的 如果您添加完整区块
到转移协调它们将在最后运行

00:23:33.514 --> 00:23:36.016 align:middle
作为“清理”阶段的一部分

00:23:36.817 --> 00:23:40.954 align:middle
现在请留意 在您的app的
“运行动画”的明确阶段没有任何回调

00:23:41.588 --> 00:23:45.259 align:middle
这是因为它一般能比较好地
执行您想要的那些任务

00:23:45.592 --> 00:23:48.529 align:middle
不论是在这些转移的开始或最末端

00:23:49.930 --> 00:23:53.400 align:middle
所以现在我们谈过了旋转转移
和一切事件发生的时间表

00:23:53.901 --> 00:23:56.270 align:middle
让我们一起来看看
多任务执行的尺寸调整

00:23:57.704 --> 00:24:00.774 align:middle
现在这个转移过程中
我们先进行一些设置

00:23:57.704 --> 00:24:00.774 align:middle
现在这个转移过程中
我们先进行一些设置

00:24:01.775 --> 00:24:03.277 align:middle
然后再创建一些动画

00:24:03.911 --> 00:24:05.779 align:middle
好了
希望您能看见这里的这个图像

00:24:06.113 --> 00:24:07.414 align:middle
这些都是完全相同的阶段

00:24:07.848 --> 00:24:11.251 align:middle
而回调完全以与多任务执行的尺寸调整
相同的方式发生

00:24:11.785 --> 00:24:14.154 align:middle
这就是关于新回调的特别好的地方

00:24:14.855 --> 00:24:19.426 align:middle
它允许您使用
和多重任务尺寸调整相同的旋转代码

00:24:21.562 --> 00:24:25.799 align:middle
现在有一个重要的内容要牢记
尤其是关于转移的尺寸调整

00:24:26.834 --> 00:24:31.271 align:middle
那就是您的app有一个时间限制
来让您进行想要的变更

00:24:32.372 --> 00:24:33.540 align:middle
就像使app的启动

00:24:33.607 --> 00:24:37.144 align:middle
如果您的app花费过长时间
来做出这些变更它将会被中止

00:24:38.212 --> 00:24:40.013 align:middle
但我敢肯定
这不会发生在你们任何人身上

00:24:42.082 --> 00:24:44.017 align:middle
因此有一点要记住

00:24:44.184 --> 00:24:46.653 align:middle
如果您在您里的转移回调
同时执行这两种

00:24:46.954 --> 00:24:51.158 align:middle
那“将转换到特征组合”会发生在
“视角将转移到尺寸”之前

00:24:51.592 --> 00:24:52.893 align:middle
这是非常有用的
要牢记

00:24:53.861 --> 00:24:57.831 align:middle
然而如彼得之前提到的
有一些多任务执行的尺寸调整当中

00:24:58.165 --> 00:24:59.900 align:middle
您的app只有尺寸会更改

00:25:00.267 --> 00:25:02.002 align:middle
而尺寸级别是保持不变的

00:25:02.936 --> 00:25:05.405 align:middle
当这种情况发生时特征组合不会改变

00:25:05.906 --> 00:25:08.642 align:middle
所以我们不会采用
特征组合的回调之类的方法

00:25:09.243 --> 00:25:11.278 align:middle
我们只能称之为“视角将转移到尺寸”

00:25:12.212 --> 00:25:15.816 align:middle
您仍然可以使用转移协调的API

00:25:16.116 --> 00:25:18.585 align:middle
以添加到动画和完成块

00:25:20.187 --> 00:25:21.788 align:middle
现在类似的有一些情况下

00:25:22.089 --> 00:25:24.191 align:middle
就只有特征组合
会在您的app上发生变化

00:25:24.391 --> 00:25:25.592 align:middle
但尺寸将保持不变

00:25:26.393 --> 00:25:29.997 align:middle
这很可能发生
例如当您改写视图控制器的特征组合时

00:25:31.532 --> 00:25:33.033 align:middle
所以您在实施这些回调时

00:25:33.433 --> 00:25:37.304 align:middle
请确保它们当中只有仅仅一个被调用
因为事实上其它也可能被同时调用

00:25:38.539 --> 00:25:39.540 align:middle
这就是转移

00:25:41.108 --> 00:25:42.809 align:middle
接下来让我们看看窗口

00:25:43.243 --> 00:25:45.112 align:middle
特别是UI窗口

00:25:46.580 --> 00:25:48.282 align:middle
一般情况下当您的app被启动后

00:25:48.549 --> 00:25:51.552 align:middle
您将创建一个新的UI窗口
并给它一个框架

00:25:51.618 --> 00:25:54.755 align:middle
这同等于您的主界面画面界限

00:25:56.056 --> 00:25:57.057 align:middle
那么当这种情况发生时

00:25:57.257 --> 00:25:59.760 align:middle
如果用户调整您的
多任务执行过程中的app

00:26:00.093 --> 00:26:02.896 align:middle
那么该用户界面窗口的框架
将自动调整其尺寸

00:26:03.163 --> 00:26:04.598 align:middle
以匹配新的app尺寸

00:26:05.599 --> 00:26:09.002 align:middle
而这将继续下去
只要用户调整您的app就会发生

00:26:10.370 --> 00:26:12.105 align:middle
但是如果您创建一个UI窗口

00:26:12.339 --> 00:26:14.641 align:middle
它的大小不同于屏幕上的界限

00:26:15.309 --> 00:26:19.112 align:middle
就在您的app被调整尺寸的时候
那么我们会把窗口调整到相同的尺寸

00:26:20.547 --> 00:26:21.415 align:middle
正如彼得所说

00:26:21.949 --> 00:26:26.353 align:middle
原先的UI窗口处在左上角
即使您的app被调整了尺寸

00:26:26.720 --> 00:26:29.523 align:middle
因此所有的UI窗口都将在
您app的其余部分运行

00:26:31.358 --> 00:26:34.728 align:middle
现在一般来说
在过去做一个全屏尺寸的窗口

00:26:35.596 --> 00:26:38.265 align:middle
您必须要创建UI窗口
并明确给它一个框架

00:26:38.465 --> 00:26:40.567 align:middle
这还要同等于主UI屏幕的界限

00:26:41.502 --> 00:26:43.837 align:middle
而您仍然可以做到这一点
凭借iPad的多任务执行

00:26:44.371 --> 00:26:46.507 align:middle
但在iOS 9
我们已经把这变得更简单

00:26:47.274 --> 00:26:49.343 align:middle
现在您可以创建一个新的UI窗口

00:26:49.543 --> 00:26:51.078 align:middle
而不经过任何的明确框架

00:26:51.612 --> 00:26:54.147 align:middle
我们将正确地调整其尺寸
以符合您的app当前使用状况

00:26:54.448 --> 00:26:55.916 align:middle
再自动调整其尺寸

00:26:56.183 --> 00:26:58.252 align:middle
用于所有的多任务执行尺寸调整

00:27:00.053 --> 00:27:02.789 align:middle
好的
现在让我们一起来看看这绪论

00:27:05.359 --> 00:27:08.662 align:middle
在iOS 8中
我们引入了UI演示控制器

00:27:09.229 --> 00:27:11.965 align:middle
这是一个了不起的类别
它用来制作特制的个性化演示

00:27:12.499 --> 00:27:14.601 align:middle
或用于运行自带系统的演示

00:27:15.402 --> 00:27:18.105 align:middle
您可以看到“进去看看演示控制器”

00:27:18.272 --> 00:27:22.576 align:middle
这是去年WWDC的一个讲座
您可以了解更多信息关于这类使用

00:27:24.244 --> 00:27:26.680 align:middle
一个关于演示控制器的重大事件为

00:27:27.047 --> 00:27:29.550 align:middle
多任务执行是对自适应性的支持

00:27:31.318 --> 00:27:35.856 align:middle
因此举例来说
您可以在iPad上展现弹出式演示

00:27:37.224 --> 00:27:38.926 align:middle
当您的app的尺寸级别变更

00:27:39.459 --> 00:27:42.162 align:middle
在这种情况下
比如紧凑的水平尺寸

00:27:42.563 --> 00:27:46.767 align:middle
就会自动变换该演示文稿
为一种适当的风格

00:27:47.634 --> 00:27:50.070 align:middle
所以在这里
我们已经适应了一个全屏模式的风格

00:27:51.338 --> 00:27:53.140 align:middle
而这种情况发生在装置之间

00:27:53.874 --> 00:27:57.711 align:middle
例如如果您在iPhone上
执行同样的弹出式演示

00:27:58.178 --> 00:28:01.682 align:middle
这也会自动以全屏幕模式的风格展示

00:27:58.178 --> 00:28:01.682 align:middle
这也会自动以全屏幕模式的风格展示

00:28:03.283 --> 00:28:04.952 align:middle
在iPhone 6+的景观方面

00:28:05.219 --> 00:28:08.322 align:middle
我们同样会把它
做成一种表格来展示给您

00:28:09.556 --> 00:28:11.925 align:middle
而且所有的这些改变在您的
app当中自动发生

00:28:12.159 --> 00:28:14.061 align:middle
只要通过使用
“视图控制器演示”就可以

00:28:22.236 --> 00:28:25.339 align:middle
然而您可能也想要深入了解
这些变化是怎么发生的

00:28:26.840 --> 00:28:28.075 align:middle
例如在这个app中

00:28:28.775 --> 00:28:30.511 align:middle
当我们在全屏模式中以弹出式窗口演示

00:28:31.011 --> 00:28:35.883 align:middle
我们希望
在导航栏显示一个“完成”按键

00:28:36.316 --> 00:28:38.185 align:middle
以便用户可以关闭该演示

00:28:39.319 --> 00:28:42.022 align:middle
但是当我们使用原生的弹窗呈现风格时

00:28:42.256 --> 00:28:43.857 align:middle
我们并不需要显示那个“完成” 按键

00:28:44.091 --> 00:28:47.361 align:middle
因为用户可以通过
点击弹窗外的任何地方来关闭它

00:28:48.662 --> 00:28:50.030 align:middle
而且我们可以做出这类的变更

00:28:50.497 --> 00:28:53.133 align:middle
借助“自适应演示控制授权”API

00:28:54.434 --> 00:28:58.639 align:middle
事实上在iOS 8.3中
我们引入了一些新的方法到这个草案中

00:28:59.573 --> 00:29:05.546 align:middle
当您的视图控制器演示被采用时
这些方法让您能控制更多发生的变更

00:28:59.573 --> 00:29:05.546 align:middle
当您的视图控制器演示被采用时
这些方法让您能控制更多发生的变更

00:29:06.747 --> 00:29:09.449 align:middle
这样您可以做类似于隐藏和显示导航栏

00:29:09.716 --> 00:29:11.718 align:middle
或其他任何对您的app有用的变更

00:29:13.220 --> 00:29:16.857 align:middle
现在最后关于弹窗演示
请务必要特别记住的是

00:29:17.291 --> 00:29:22.262 align:middle
从弹窗出来的箭头
指向那个弹窗正确的来源

00:29:23.497 --> 00:29:24.831 align:middle
这特别重要

00:29:25.032 --> 00:29:31.538 align:middle
尤其当您的app
在横向紧凑和常规尺寸级别中适应时

00:29:32.439 --> 00:29:35.809 align:middle
您可以很容易地做到
用一个弹窗演示控制器API

00:29:36.443 --> 00:29:37.744 align:middle
不论是设置工具条按键对象

00:29:38.245 --> 00:29:40.414 align:middle
还是在源代码方阵当中设置源代码视图

00:29:41.882 --> 00:29:42.816 align:middle
这就是演示的呈现了

00:29:43.784 --> 00:29:47.821 align:middle
我最后想要告诉您
关于多任务执行当中键盘的变更

00:29:49.423 --> 00:29:51.658 align:middle
现在当用户用您的app
进行多任务执行

00:29:52.926 --> 00:29:55.629 align:middle
如果他们点击到文字区域
像地图中的搜索条

00:29:56.496 --> 00:30:00.567 align:middle
那么键盘会确实地出现在
用户正在交互的所有app的顶端

00:29:56.496 --> 00:30:00.567 align:middle
那么键盘会确实地出现在
用户正在交互的所有app的顶端

00:30:01.301 --> 00:30:02.503 align:middle
这意味着它对您真的很重要

00:30:02.569 --> 00:30:06.306 align:middle
它让您要考虑是否要把您app
的一部分移出键盘

00:30:06.573 --> 00:30:08.175 align:middle
以确保用户依然可以与它们交互

00:30:09.176 --> 00:30:12.412 align:middle
您可以通过UI键盘 通知API实施

00:30:12.813 --> 00:30:13.881 align:middle
就像您在过去做的一样

00:30:15.482 --> 00:30:18.385 align:middle
您可以用这些通知变更您的app

00:30:18.785 --> 00:30:20.988 align:middle
比如设置滚动浏览内容插图

00:30:21.388 --> 00:30:24.157 align:middle
或者移动重要的UI元素以维持可见度

00:30:25.125 --> 00:30:26.527 align:middle
所以举例来说 在这个app当中

00:30:26.960 --> 00:30:31.865 align:middle
我们可能想要移动评论和评价视图
以确保其仍然可见

00:30:33.200 --> 00:30:34.735 align:middle
而且这真的是一项重要的变更

00:30:34.935 --> 00:30:38.372 align:middle
因为在过去
您的app唯一能够与键盘交互的时候

00:30:38.572 --> 00:30:40.340 align:middle
就是它明确地自己显示出键盘时

00:30:41.208 --> 00:30:42.509 align:middle
但现在有了多任务执行

00:30:42.776 --> 00:30:46.046 align:middle
用户采用的其他app
就可以促使键盘显现

00:30:46.480 --> 00:30:47.481 align:middle
所以您会想要考虑

00:30:47.614 --> 00:30:50.918 align:middle
是否app中的任意一个视图
都需要移动其UI

00:30:51.051 --> 00:30:52.786 align:middle
以在键盘显示的时候仍维持可见度

00:30:54.488 --> 00:30:57.624 align:middle
以下是一些有关iPad多任务执行的
变更和最佳实践

00:30:58.325 --> 00:30:59.660 align:middle
几个重要的事项要牢记

00:31:00.460 --> 00:31:05.232 align:middle
在您的app旋转的时候
务必考虑其尺寸和尺寸级别而不是方位

00:31:06.433 --> 00:31:09.069 align:middle
还有要思考您如何
针对位置转移变化做出协调

00:31:09.203 --> 00:31:11.738 align:middle
比如旋转和
多任务执行的尺寸调整时

00:31:12.439 --> 00:31:15.042 align:middle
最后使用自适应弹窗演示

00:31:15.142 --> 00:31:17.544 align:middle
好让您的app契合运行于
我们所有的装置

00:31:17.611 --> 00:31:20.080 align:middle
以及它被使用的各种环境当中

00:31:21.048 --> 00:31:22.916 align:middle
现在我要交给库尔特雷维斯

00:31:23.083 --> 00:31:25.319 align:middle
让他来告诉你们如何
最有效地利用多任务执行

00:31:31.191 --> 00:31:32.025 align:middle
谢谢

00:31:32.292 --> 00:31:33.594 align:middle
谢谢您 雅各布
谢谢您 彼特

00:31:34.561 --> 00:31:38.832 align:middle
那么现在您知道您的app如何
以及为什么能够采用多任务执行了

00:31:39.533 --> 00:31:41.301 align:middle
您知道什么改变了
其实并不多

00:31:41.768 --> 00:31:43.470 align:middle
您知道该去做什么
不该去做什么

00:31:44.204 --> 00:31:47.875 align:middle
那我在这里告诉大家你们的app该如
何有效利用多任务执行

00:31:47.941 --> 00:31:50.344 align:middle
并传送一流的体验给您的用户

00:31:51.812 --> 00:31:55.649 align:middle
您的app确实需要自适应性设计

00:31:56.083 --> 00:31:58.218 align:middle
而我将重申三我们之前说过的事情

00:31:58.886 --> 00:32:01.054 align:middle
首先 您的app应该是普遍通用的

00:31:58.886 --> 00:32:01.054 align:middle
首先 您的app应该是普遍通用的

00:32:01.288 --> 00:32:03.690 align:middle
您的app应当能在
iPhone和iPad上运行

00:32:05.192 --> 00:32:09.663 align:middle
其次 不要再想像这是
iPhone和iPad的用户体验

00:32:09.763 --> 00:32:13.200 align:middle
想象它们是紧凑和常规宽度

00:32:13.534 --> 00:32:16.770 align:middle
因为现在紧凑宽度
已经可以在iPad上体验得到

00:32:18.238 --> 00:32:21.808 align:middle
最后 使用自适应性
在它们之间进行更换

00:32:21.909 --> 00:32:23.710 align:middle
尤其在用户调整您的app尺寸时

00:32:24.945 --> 00:32:27.247 align:middle
这样设计的自适应性的挑战

00:32:27.314 --> 00:32:30.784 align:middle
是为了让您的app能自行适应
各类动态的尺寸变化

00:32:31.752 --> 00:32:35.689 align:middle
接着我会给您两样东西
事实上为六大策略

00:32:36.657 --> 00:32:42.062 align:middle
您的app可以采用以使其更加灵活
以及更能适应动态的尺寸变更

00:32:42.696 --> 00:32:44.765 align:middle
接下来我会谈及可能出现的一些细节

00:32:45.299 --> 00:32:47.434 align:middle
一些您在采用多任务执行中
可能会遇到的事项

00:32:47.768 --> 00:32:49.570 align:middle
和如何处理这些事项的指导方针

00:32:50.704 --> 00:32:51.638 align:middle
那么我们开始

00:32:52.005 --> 00:32:54.775 align:middle
第一条策略 灵活

00:32:55.876 --> 00:32:58.278 align:middle
不要辛苦地编码尺寸
不要擅自假设

00:32:58.545 --> 00:33:00.948 align:middle
您的app应当着眼于它的尺寸

00:32:58.545 --> 00:33:00.948 align:middle
您的app应当着眼于它的尺寸

00:33:01.715 --> 00:33:02.883 align:middle
并在那个基础上做些什么

00:33:03.851 --> 00:33:05.986 align:middle
而且它应该对尺寸变化有所反应

00:33:07.087 --> 00:33:11.892 align:middle
唯一能找出您的app灵活与否的方法
是真正地去尝试尝试延伸

00:33:12.359 --> 00:33:14.328 align:middle
我们在这里做一些运动一点点的热身

00:33:14.394 --> 00:33:16.897 align:middle
您会发现有一张瑜伽垫
就在您座位前方的地面上

00:33:17.264 --> 00:33:18.131 align:middle
请把它拿出来！

00:33:18.632 --> 00:33:20.934 align:middle
不
不幸的是我只是在说您的app

00:33:21.301 --> 00:33:22.503 align:middle
但我们还是会做同样的事情

00:33:22.736 --> 00:33:24.638 align:middle
我们会让您的app做一个热身练习

00:33:25.539 --> 00:33:27.808 align:middle
我们会运行所有的多任务执行场景

00:33:28.675 --> 00:33:31.478 align:middle
而且我们会小心地观察您app的UI

00:33:31.678 --> 00:33:33.514 align:middle
请留意
哪些好用 哪些不好用

00:33:35.182 --> 00:33:37.150 align:middle
当您在做这个时
集中注意力到布局排版上

00:33:37.351 --> 00:33:38.318 align:middle
您的视图是什么

00:33:38.452 --> 00:33:42.356 align:middle
不要担心这些动画或其它类似的
特别是如果您是在模拟器上这么做

00:33:42.456 --> 00:33:44.858 align:middle
因为您的体验会跟真的装置上不一样

00:33:46.093 --> 00:33:46.960 align:middle
让我们开始吧

00:33:48.195 --> 00:33:49.830 align:middle
您的app采用了多任务执行

00:33:50.731 --> 00:33:52.566 align:middle
您可以开始
用Slide Over启动它

00:33:53.467 --> 00:33:54.868 align:middle
然后变更您的app尺寸为更大

00:33:54.935 --> 00:33:55.869 align:middle
这是一个尺寸变更

00:33:56.770 --> 00:33:59.540 align:middle
再让它变大
它会变成全屏 另外的尺寸改变

00:34:00.474 --> 00:34:02.209 align:middle
现在Slide Over
另一个app

00:34:02.476 --> 00:34:04.178 align:middle
并按下按键
以使用Split View

00:34:04.344 --> 00:34:05.312 align:middle
您的app会变小

00:34:06.580 --> 00:34:08.482 align:middle
最后让我们旋转整个iPad

00:34:09.315 --> 00:34:10.817 align:middle
这样我们就得到一个尺寸变化

00:34:11.451 --> 00:34:13.920 align:middle
这会产生旋转
方位也会变更

00:34:14.221 --> 00:34:15.222 align:middle
而且这是动画的

00:34:16.223 --> 00:34:18.358 align:middle
那么这就是所有
可能发生到您的app上的事项

00:34:18.425 --> 00:34:21.161 align:middle
而且您应该在app所有地方进行尝试

00:34:21.527 --> 00:34:22.896 align:middle
以确保它可以处理这些事情

00:34:23.830 --> 00:34:26.400 align:middle
当您尝试这个时或许您会
发现有些东西 好用有一些不好用

00:34:27.234 --> 00:34:31.572 align:middle
所以为了帮助修复这些
不好用的东西 好好听着

00:34:33.139 --> 00:34:35.576 align:middle
第二条策略
使用自动布局排版

00:34:35.641 --> 00:34:36.610 align:middle
这应该并不奇怪

00:34:36.677 --> 00:34:39.446 align:middle
这是为了让您的app UI
变得灵活的方法之一

00:34:40.614 --> 00:34:43.283 align:middle
所有您需要做的就是
提供视图和限制条件

00:34:43.717 --> 00:34:45.485 align:middle
系统会考虑所有的限制条件

00:34:46.053 --> 00:34:47.621 align:middle
并在那些基础上设置您的视图框架

00:34:47.688 --> 00:34:49.322 align:middle
所以您不用辛苦地编码任何事项

00:34:50.690 --> 00:34:55.829 align:middle
您也可以使用页边距和UIK给您提供
的指导方针来构建这些限制条件

00:34:56.830 --> 00:35:01.101 align:middle
而且在iOS 9中 有新的API
可以促使这整个过程更便利

00:34:56.830 --> 00:35:01.101 align:middle
而且在iOS 9中 有新的API
可以促使这整个过程更便利

00:35:02.536 --> 00:35:03.770 align:middle
那么想更多了解这个

00:35:04.304 --> 00:35:07.674 align:middle
请参考星期四的两个自动布局排版的讲
座 我保证您会学到很多

00:35:10.244 --> 00:35:12.946 align:middle
那么让我们看看不久前的这个例子

00:35:17.050 --> 00:35:17.885 align:middle
我们有...

00:35:20.754 --> 00:35:21.588 align:middle
不好意思

00:35:22.055 --> 00:35:24.958 align:middle
我们有这个app显示一些文字
而且它有这些可阅性页边距

00:35:27.227 --> 00:35:30.531 align:middle
现在当您的视图尺寸变大时
这将如何运行

00:35:30.597 --> 00:35:32.366 align:middle
但可阅性内容指南变小了

00:35:33.333 --> 00:35:35.369 align:middle
我们并不希望您的app有所顾虑

00:35:35.602 --> 00:35:39.907 align:middle
“这是一个iPad 它又大又宽
我需要用不同的方式处理这些页边距”

00:35:39.973 --> 00:35:42.109 align:middle
您只需要用这个指导方针
它就会自动运行

00:35:42.910 --> 00:35:44.344 align:middle
所以这就是
如何在代码中做这个

00:35:45.712 --> 00:35:48.115 align:middle
首先做一个标签
我们会把我们的文字放在里面

00:35:49.416 --> 00:35:51.518 align:middle
第二步
标签来到了一些超级视图里

00:35:52.119 --> 00:35:54.821 align:middle
我们会从超级视图中
得到可阅性内容指南

00:35:56.156 --> 00:35:59.826 align:middle
现在我们会设置一些限制条件让此标签
适合该可阅性内容指南

00:36:00.694 --> 00:36:02.262 align:middle
那么这些限制条件是一个排列

00:36:02.629 --> 00:36:05.632 align:middle
而我们实施的第一项就是
让这个标签引领锚杆

00:36:05.699 --> 00:36:06.733 align:middle
这是引领的一侧

00:36:07.301 --> 00:36:11.038 align:middle
相当于这个可阅性内容指南的引领锚杆
为引领的一侧

00:36:12.306 --> 00:36:15.976 align:middle
记住这是使用新的iOS 9的
方便API

00:36:17.077 --> 00:36:19.847 align:middle
我们对两个侧边的拖拽锚
都做出同样的运行

00:36:19.980 --> 00:36:23.083 align:middle
现在这个标签的宽度会匹配
可阅性内容指南的宽度

00:36:24.318 --> 00:36:27.221 align:middle
接下来我们需要做的所有事项
就是激活这两条限制条件

00:36:27.487 --> 00:36:28.789 align:middle
再让自动布局完成其余的事项

00:36:28.856 --> 00:36:30.157 align:middle
我们并不需要做完所有的事项

00:36:31.692 --> 00:36:33.560 align:middle
当然我也可以用Xcode做这个

00:36:33.627 --> 00:36:36.830 align:middle
我可以用我的画板进行设计
这会将我引导到下一个策略

00:36:37.397 --> 00:36:40.167 align:middle
充分利用Xcode支持的
尺寸级别

00:36:40.968 --> 00:36:44.171 align:middle
您可以设置您的UI在不同的尺寸级别
中运行不同的事项

00:36:44.872 --> 00:36:46.974 align:middle
比如说使用
Interface Builder

00:36:47.040 --> 00:36:49.076 align:middle
当您在编辑一个画板或者XIB文件时

00:36:49.877 --> 00:36:53.480 align:middle
您可以从不同的尺寸级别
添加或删除用户限制条件

00:36:54.414 --> 00:36:57.618 align:middle
而且您也可以改变视图的属性
比如字体的大小等等

00:36:58.719 --> 00:37:00.888 align:middle
您也可以使用资产目录的优势

00:36:58.719 --> 00:37:00.888 align:middle
您也可以使用资产目录的优势

00:37:00.954 --> 00:37:05.125 align:middle
让应用不同版本的图片
处于不同的尺寸级别

00:37:06.260 --> 00:37:10.330 align:middle
记住这不仅可应用在
您第一次初始化加载您的UI

00:37:10.764 --> 00:37:12.733 align:middle
同样也可以用在动态尺寸变更时

00:37:13.166 --> 00:37:17.304 align:middle
我们记住这所有的幕后事项
当尺寸变更时我们都会使用这些

00:37:18.872 --> 00:37:19.840 align:middle
我再举个例子

00:37:20.541 --> 00:37:22.843 align:middle
这里我已经做好了画板
也设置了有两个视图的UI

00:37:23.443 --> 00:37:25.679 align:middle
这有一张图片和一些文字

00:37:25.846 --> 00:37:28.315 align:middle
我把它们并排在一起
我让限制条件来执行这事项

00:37:29.650 --> 00:37:31.852 align:middle
我在默认的UI运行我的app

00:37:32.252 --> 00:37:34.087 align:middle
使用的是“任意宽度”级别

00:37:35.155 --> 00:37:38.325 align:middle
我想要做一个版本
那会有一点有别于紧凑尺寸级别

00:37:38.759 --> 00:37:41.461 align:middle
那么我要做的就是点击控制
我变更它到紧凑宽度

00:37:42.596 --> 00:37:44.064 align:middle
我得到了同样的两个视图

00:37:44.198 --> 00:37:46.767 align:middle
但我改变了我的限制条件
让这个布局排版变得不一样

00:37:47.034 --> 00:37:49.136 align:middle
现在图片在顶部 文字在底部

00:37:50.604 --> 00:37:53.841 align:middle
我通过点击控制底部做这个
将它改变到紧凑级别

00:37:53.941 --> 00:37:58.445 align:middle
而且您还可以看到有蓝色文字在告诉我
正处于一个不同的 更特殊的模式

00:38:00.314 --> 00:38:02.382 align:middle
现在我可以在这个点运行我的app

00:38:02.616 --> 00:38:04.284 align:middle
并尝试改变它的尺寸看看会发生什么

00:38:04.985 --> 00:38:06.954 align:middle
但很好的是
实际上我并不需要真的这么做

00:38:07.054 --> 00:38:09.857 align:middle
我可以在Xcode看到动态的预览

00:38:10.958 --> 00:38:13.060 align:middle
仅仅使用Xcode中的窗格助理功能

00:38:13.493 --> 00:38:19.800 align:middle
您就可以同时处于不同的配置下
在您的记事板中拥有不止一个预览

00:38:20.501 --> 00:38:22.202 align:middle
所以这里我用iPad三分之一宽度

00:38:22.469 --> 00:38:26.073 align:middle
即Slide Over和
app时所发生的事 即紧凑布局

00:38:27.174 --> 00:38:30.677 align:middle
在我看着iPad全屏的同时
也看着其他的布局排版

00:38:31.678 --> 00:38:33.680 align:middle
所以您想做多少次这预览
就可以做多少次

00:38:33.981 --> 00:38:35.616 align:middle
仅仅点击角上的“+”按键

00:38:36.283 --> 00:38:37.885 align:middle
并选择iPhone上的任意尺寸

00:38:37.951 --> 00:38:40.454 align:middle
iPad上的任意尺寸的
多任务执行配置

00:38:40.787 --> 00:38:42.623 align:middle
您可以立刻看见它们
而且它们都是动态的

00:38:49.363 --> 00:38:50.831 align:middle
我们也可以使用资产目录

00:38:51.665 --> 00:38:52.566 align:middle
我会展示它如何运行

00:38:53.166 --> 00:38:55.869 align:middle
这里我已经有一个资产目录
我在看着一个特定的资产

00:38:56.837 --> 00:39:00.874 align:middle
我会把这设置为普遍通用的
以便它能在所有的装置上运行

00:38:56.837 --> 00:39:00.874 align:middle
我会把这设置为普遍通用的
以便它能在所有的装置上运行

00:39:02.009 --> 00:39:05.579 align:middle
然后我会做和之前差不多的步骤
我会设置两个不同的版本

00:39:06.180 --> 00:39:09.483 align:middle
一个默认的用于任何宽度
另一个用于紧凑宽度

00:39:10.784 --> 00:39:12.486 align:middle
现在您可以看见
我已经取得这两个图片

00:39:12.553 --> 00:39:13.820 align:middle
这是两个不同的版本

00:39:14.454 --> 00:39:19.726 align:middle
我可以拉一个大星星来运行
用于任何通常宽度的配置

00:39:20.594 --> 00:39:23.664 align:middle
我拉一个小点的图片作为紧凑宽度

00:39:25.766 --> 00:39:26.633 align:middle
这就是Xcode

00:39:27.401 --> 00:39:30.103 align:middle
现在您也可以顺便在文档或代码

00:39:30.304 --> 00:39:32.840 align:middle
如果您有兴趣的话 试试看这么做

00:39:33.340 --> 00:39:35.542 align:middle
就这么使用自适应性回调的优势

00:39:36.510 --> 00:39:37.477 align:middle
以下是运行的方法

00:39:37.945 --> 00:39:39.146 align:middle
如果您在一个视图控制器中

00:39:39.680 --> 00:39:42.616 align:middle
您可以重载“将转移到特征组合”

00:39:43.350 --> 00:39:46.253 align:middle
我们会给您更换的新组合

00:39:47.821 --> 00:39:50.224 align:middle
又或者您可以重载
“视图将转移到尺寸”

00:39:50.290 --> 00:39:52.559 align:middle
我们就会给您更换的的尺寸

00:39:53.927 --> 00:39:59.199 align:middle
现在比如说我想要我的app
根据不同水平尺寸级有不同的UI

00:39:59.867 --> 00:40:03.504 align:middle
我们来重载“将转移到特征组合”

00:39:59.867 --> 00:40:03.504 align:middle
我们来重载“将转移到特征组合”

00:40:05.005 --> 00:40:06.206 align:middle
我们必须要做的第一件事

00:40:06.874 --> 00:40:09.743 align:middle
叫“超级无敌”
让系统进行常规运行

00:40:11.011 --> 00:40:12.112 align:middle
然后我们添加我们的代码

00:40:12.579 --> 00:40:15.382 align:middle
我们将查看这个新组合的水平尺寸级别

00:40:16.617 --> 00:40:19.086 align:middle
并且根据它是哪个级别
我们会做一些不同的事

00:40:20.053 --> 00:40:21.321 align:middle
这里是您存放代码的地方

00:40:22.589 --> 00:40:26.360 align:middle
如为紧凑级别
变更您的UI以用于紧凑宽度

00:40:26.994 --> 00:40:29.530 align:middle
如为常规级别
变更您的UI以用于常规宽度

00:40:30.230 --> 00:40:33.834 align:middle
如无所显示那就意味着我们在
创建和摧毁之间

00:40:34.067 --> 00:40:34.902 align:middle
那就什么也不要做

00:40:36.837 --> 00:40:41.008 align:middle
现在比如说我有那个类似的更换
但我想要它和其他事项一起进行

00:40:41.475 --> 00:40:43.977 align:middle
比方说当我旋转iPad时

00:40:44.478 --> 00:40:47.614 align:middle
我想要在改变的同时
让动画旋转到侧边

00:40:48.582 --> 00:40:49.416 align:middle
是这样的

00:40:50.150 --> 00:40:51.785 align:middle
我们以同样的方式开始

00:40:52.619 --> 00:40:54.121 align:middle
用“超级无敌”同样的方法重载

00:40:54.955 --> 00:40:57.157 align:middle
然后不直接做这个变换

00:40:57.524 --> 00:40:58.525 align:middle
我们提供一个区块

00:40:59.126 --> 00:41:01.595 align:middle
然后再把我们的变化放在该区块当中

00:40:59.126 --> 00:41:01.595 align:middle
然后再把我们的变化放在该区块当中

00:41:02.362 --> 00:41:04.064 align:middle
在这里我们得到一个区块
叫做“动画”

00:41:04.331 --> 00:41:06.633 align:middle
接着我们使用这个代码变更里面的UI

00:41:08.202 --> 00:41:12.372 align:middle
然后把这个区块
放到协调的“动画侧边的转移”方法里

00:41:13.307 --> 00:41:18.545 align:middle
这个方法会关注该区块
并在动画设置完成的同时调用它

00:41:19.112 --> 00:41:22.015 align:middle
您在当中完成的一些更换都会由该区块
自动地转换成动画

00:41:23.984 --> 00:41:26.053 align:middle
这就是如何在低水平的代码中运行

00:41:27.154 --> 00:41:30.424 align:middle
我会讲一些高级API
尤其是UIKit提供给您的

00:41:35.596 --> 00:41:38.699 align:middle
首先正如雅各布之前提到的
自适应演示控制器

00:41:39.967 --> 00:41:43.704 align:middle
其次
是经典的UI表格视图和UI组合视图

00:41:43.804 --> 00:41:46.473 align:middle
这些让您能在小事物的基础上
建立一个更大的UI

00:41:46.540 --> 00:41:49.376 align:middle
就像一个组合中的一个单行或单个元素

00:41:50.944 --> 00:41:53.680 align:middle
同样是iOS 9的新功能
有个叫做UI堆栈视图

00:41:54.481 --> 00:41:55.883 align:middle
这能让您创建一个视图列表

00:41:55.949 --> 00:41:58.752 align:middle
并把它们放到一个垂直的堆栈
或者水平的队列中

00:41:59.152 --> 00:42:01.154 align:middle
以及设置一些它们如何放置的参数

00:41:59.152 --> 00:42:01.154 align:middle
以及设置一些它们如何放置的参数

00:42:01.922 --> 00:42:05.025 align:middle
同样的想了解更多的话
请查看第一个自动布局的相关讲座

00:42:06.894 --> 00:42:10.397 align:middle
高级API的最后一点是
它大得足以拥有自己的数字

00:42:10.998 --> 00:42:12.699 align:middle
那就是UI Split
View控制器

00:42:13.867 --> 00:42:17.538 align:middle
我们在日常的app中用得很多
比如邮件 信息和注释

00:42:18.305 --> 00:42:21.408 align:middle
如果它对您的app也有用
那就使用它

00:42:22.809 --> 00:42:24.344 align:middle
我把邮件作为一个例子

00:42:24.511 --> 00:42:26.380 align:middle
这里我们看着全屏iPad

00:42:26.880 --> 00:42:29.416 align:middle
您可以看到该app被分成两个部分

00:42:29.983 --> 00:42:33.987 align:middle
注意这有别于您看见的
split view多任务执行

00:42:34.054 --> 00:42:34.988 align:middle
这是一个app

00:42:36.823 --> 00:42:40.160 align:middle
那么我们有一侧是可以查看的信息列表

00:42:40.427 --> 00:42:41.261 align:middle
您可以选择一个

00:42:42.229 --> 00:42:45.999 align:middle
另一方面我们有一个视图
展示了相关细节

00:42:46.266 --> 00:42:47.868 align:middle
在这情况下这是一个特定的信息

00:42:49.770 --> 00:42:53.974 align:middle
所以如果您的app
能处理一个相同或类似的配置

00:42:54.041 --> 00:42:57.044 align:middle
我们极力推荐您采用Split
View控制器

00:42:57.110 --> 00:42:59.980 align:middle
因为它会在多任务执行当中
为您处理很多事项

00:43:00.080 --> 00:43:01.582 align:middle
我稍后会展示一些

00:43:02.583 --> 00:43:03.784 align:middle
但首先这是您如何采用它

00:43:04.885 --> 00:43:07.487 align:middle
您在您的app内创建一个UI
Split View控制器

00:43:07.654 --> 00:43:11.124 align:middle
这是典型的根视图控制器
是您最高等级的UI

00:43:12.626 --> 00:43:15.295 align:middle
它是一个容器视图控制器
并且有子控制器

00:43:15.462 --> 00:43:18.565 align:middle
我们称它们为主控制器
和二级视图控制器

00:43:19.900 --> 00:43:25.138 align:middle
在邮件里
有一个表格视图包括了信息列表

00:43:26.139 --> 00:43:29.710 align:middle
而在二级控制器的一侧
有一个自定义的视图显示您的信息

00:43:30.210 --> 00:43:31.645 align:middle
当中的一条信息填充在其中

00:43:31.712 --> 00:43:33.113 align:middle
您提供视图控制器

00:43:33.947 --> 00:43:36.850 align:middle
UI Split View控制器

00:43:36.917 --> 00:43:40.554 align:middle
专门决定在哪里及在什么时候
显示这两个视图控制器

00:43:42.089 --> 00:43:43.090 align:middle
回到邮件

00:43:43.390 --> 00:43:47.160 align:middle
在全屏时我们有很多的空间
我们可以并列呈现这些空间

00:43:47.961 --> 00:43:49.630 align:middle
如果用户切换到一个不同的app

00:43:50.130 --> 00:43:53.901 align:middle
然后从侧面把邮件滑动出来的话
会发生什么呢？

00:43:54.935 --> 00:43:57.971 align:middle
在那种情况下
它是紧凑宽度 空间更小

00:43:58.505 --> 00:44:00.741 align:middle
那么这个Split View控制器
就会做出自行调适

00:43:58.505 --> 00:44:00.741 align:middle
那么这个Split View控制器
就会做出自行调适

00:44:01.008 --> 00:44:05.312 align:middle
这决定了它会显示二级视图控制器
以启动这个邮件信息

00:44:06.213 --> 00:44:09.216 align:middle
也提供导航控制器

00:44:09.883 --> 00:44:11.418 align:middle
以返回其它列表或主列表

00:44:12.352 --> 00:44:15.889 align:middle
一旦用户选择了其中之一
他们就可以再次回到之前的二级列表

00:44:17.090 --> 00:44:20.827 align:middle
这些视图控制器依然是独立的
它们并不需要做这些选择

00:44:24.298 --> 00:44:25.632 align:middle
所以这里要注意的事项是

00:44:25.699 --> 00:44:29.203 align:middle
这里有着我们之前看到的两个完全相同
的视图控制器

00:44:29.570 --> 00:44:31.238 align:middle
不同之处在于它们变小了

00:44:32.372 --> 00:44:35.309 align:middle
而且我们在以不同的方式导航运行

00:44:37.177 --> 00:44:38.545 align:middle
因此如果您想要尝试这个

00:44:38.912 --> 00:44:40.614 align:middle
您必须确定在您的电脑中有这个代码

00:44:40.948 --> 00:44:44.751 align:middle
只需要做一个新的Xcode
在其中做一个新的iOS应用程序

00:44:45.319 --> 00:44:47.521 align:middle
并使用“主从复合应用程序”的模板

00:44:48.021 --> 00:44:49.890 align:middle
它就会自动设置一个画板

00:44:49.957 --> 00:44:51.758 align:middle
其中包括一个
Split View控制器

00:44:52.159 --> 00:44:53.527 align:middle
以及每个侧边的视图控制器

00:44:54.394 --> 00:44:56.296 align:middle
您可以在这上面创建您自己的app

00:44:56.597 --> 00:44:59.333 align:middle
或者你也可以仅把它作为一个测试台来
使用搭配Split View控制器

00:44:59.399 --> 00:45:00.234 align:middle
再看看它能做什么

00:44:59.399 --> 00:45:00.234 align:middle
再看看它能做什么

00:45:02.202 --> 00:45:03.804 align:middle
这就是我会给您的6条策略

00:45:07.941 --> 00:45:10.777 align:middle
请尽情合理地混搭它们
以在您的app当中发挥作用

00:45:11.979 --> 00:45:14.648 align:middle
您可以看看我们的代码示例以比较实例

00:45:15.015 --> 00:45:18.285 align:middle
这是一个app叫做“自适应图片”
您可以在开发者网站上搜索它

00:45:19.720 --> 00:45:22.789 align:middle
在所有型号的
iPhone和iPad上

00:45:22.856 --> 00:45:25.192 align:middle
以及iPad的多任务执行上测试它
看看它能做什么

00:45:27.194 --> 00:45:28.228 align:middle
这就是策略

00:45:28.295 --> 00:45:31.031 align:middle
如果您使用这些
您的app会开始做出合适的尺寸调整

00:45:31.398 --> 00:45:32.666 align:middle
这或许会运行得很好

00:45:33.200 --> 00:45:35.068 align:middle
但您也可能会遇到一些新事情

00:45:36.203 --> 00:45:39.573 align:middle
所以一旦您采用了多任务执行
这些新事情很可能就是一些小陷阱

00:45:40.140 --> 00:45:41.875 align:middle
我会给您一些指导方针来妥善处理它们

00:45:43.243 --> 00:45:45.012 align:middle
第一条指南 也是最重要的

00:45:45.946 --> 00:45:47.981 align:middle
用户控制您的app尺寸

00:45:48.849 --> 00:45:51.251 align:middle
用户总是掌握着它们的大小

00:45:52.252 --> 00:45:54.922 align:middle
所以您的app不能制止尺寸变换发生

00:45:55.155 --> 00:45:57.858 align:middle
我知道有时候这很不方便
但这也是您的app所不能阻止的

00:45:58.892 --> 00:46:01.728 align:middle
同时您的app不能促使尺寸的变化

00:45:58.892 --> 00:46:01.728 align:middle
同时您的app不能促使尺寸的变化

00:46:02.262 --> 00:46:05.432 align:middle
您不能说“我的app现在想要全屏”
这种方式没有用

00:46:06.934 --> 00:46:10.337 align:middle
而且我想说
尺寸变化可以在任何时候发生

00:46:10.504 --> 00:46:13.740 align:middle
用户可能在任何时间
选择改变app的尺寸

00:46:13.874 --> 00:46:15.042 align:middle
这就像按Home键一样

00:46:15.209 --> 00:46:16.410 align:middle
他们可以在任何时间这么做

00:46:17.644 --> 00:46:19.246 align:middle
那么我们该如何应对尺寸变化？

00:46:19.379 --> 00:46:22.449 align:middle
好的 我们的指南是保持用户导向

00:46:23.050 --> 00:46:24.218 align:middle
不要让用户迷茫

00:46:25.419 --> 00:46:27.888 align:middle
我会用一个真实的
app具体实例解释这状况

00:46:28.789 --> 00:46:30.090 align:middle
我有一个待做事务列表app

00:46:30.824 --> 00:46:32.726 align:middle
它有一个我需要完成的事项串

00:46:33.393 --> 00:46:34.895 align:middle
而且我已经把它们分成三个目录

00:46:34.995 --> 00:46:36.830 align:middle
家 工作和学校

00:46:38.031 --> 00:46:39.499 align:middle
现在我将要穿上我的设计帽

00:46:39.900 --> 00:46:43.537 align:middle
我选择做一些UI
用于常规宽度和紧凑宽度

00:46:44.938 --> 00:46:48.141 align:middle
在常规宽度 我想 “好的
把它们放在滚动视图中是合理的

00:46:48.208 --> 00:46:49.209 align:middle
我们把它们彼此叠放

00:46:49.743 --> 00:46:51.378 align:middle
我们让用户滚动浏览它们”

00:46:54.615 --> 00:46:59.753 align:middle
在紧凑宽度 我想 “好的
我们一次仅显示目录中的其中一个

00:47:00.954 --> 00:47:05.058 align:middle
每个都在不同的页面
而且让用户滚动页面

00:47:05.492 --> 00:47:07.127 align:middle
但一次只有一个是可见的”

00:47:08.829 --> 00:47:09.696 align:middle
那么这很好

00:47:10.163 --> 00:47:11.064 align:middle
我有了两个UI

00:47:11.131 --> 00:47:14.001 align:middle
但现在我需要想该怎样
从一个到另一个地变化

00:47:15.235 --> 00:47:17.237 align:middle
比如说我正在查看学校

00:47:18.472 --> 00:47:21.175 align:middle
而用户把app的尺寸更换成常规宽度

00:47:21.475 --> 00:47:22.309 align:middle
我该怎么做？

00:47:23.110 --> 00:47:27.414 align:middle
好 如果我仅仅做一个新的滚动视图
并把我的事项放进去

00:47:27.781 --> 00:47:30.417 align:middle
它很有可能滚动到非常顶端
在(0,0)位置

00:47:31.051 --> 00:47:32.953 align:middle
学校于是变得不可见了

00:47:33.554 --> 00:47:35.622 align:middle
那用户可能迷茫了
我们并不想那么做

00:47:36.423 --> 00:47:40.861 align:middle
app应当选择并制作一个好的选择和
滚动以便相同的事项再度可见

00:47:40.928 --> 00:47:41.929 align:middle
所以学校是可见的

00:47:43.030 --> 00:47:46.099 align:middle
这不会自动发生
您的app需要做出相应的选择

00:47:48.035 --> 00:47:51.071 align:middle
比如说用户持续使用app
他们往下滚动一点

00:47:51.738 --> 00:47:53.207 align:middle
他们写一些代码再完成运行

00:47:53.340 --> 00:47:54.508 align:middle
很好
今天写了一些代码

00:47:55.242 --> 00:47:59.379 align:middle
然后他们决定
把app的尺寸调整成紧凑类

00:48:00.414 --> 00:48:01.248 align:middle
我们该怎么做？

00:48:02.449 --> 00:48:05.219 align:middle
您会看到所有的三个目录都
同时出现在屏幕上

00:48:05.485 --> 00:48:08.422 align:middle
所以我们可以做一个示范
让它们中的任意一个可见

00:48:09.323 --> 00:48:10.924 align:middle
但在这个示范中 这或许很合理

00:48:11.058 --> 00:48:12.893 align:middle
当他们最后一次
检查工作中完成的事情时

00:48:13.927 --> 00:48:16.063 align:middle
他们依然看着它并且没有作出任何控制

00:48:16.430 --> 00:48:18.065 align:middle
那我们应该选择去那个页面

00:48:18.832 --> 00:48:23.270 align:middle
不过这里有app必须做的决定
而您的app也必须做出类似的决定

00:48:29.009 --> 00:48:30.544 align:middle
所以保持用户至上

00:48:31.645 --> 00:48:32.946 align:middle
千万不要做出突然的改变

00:48:33.280 --> 00:48:35.115 align:middle
尤其当一个尺寸改变到另一个尺寸时

00:48:35.249 --> 00:48:36.550 align:middle
尝试保持同一事项是可见的

00:48:37.918 --> 00:48:39.853 align:middle
您或许需要用新的方式来
呈现你的聪明才智

00:48:40.153 --> 00:48:44.224 align:middle
您或许需要做点什么
比如持续留意用户最近最常看或点击的

00:48:44.691 --> 00:48:45.926 align:middle
这是您之前不需要做的

00:48:47.494 --> 00:48:49.029 align:middle
再说这也是特别重要的

00:48:49.096 --> 00:48:53.867 align:middle
尤其当您从大尺寸更换成小尺寸
因为您不能显示之前的一切事项

00:48:55.736 --> 00:48:59.139 align:middle
所以说调整尺寸在这里
是另一件可能会发生的新事情

00:49:00.140 --> 00:49:02.042 align:middle
尤其一旦您的app采用了多任务执行

00:49:03.043 --> 00:49:05.512 align:middle
譬如说您的app处于非活动状态
用户按下Home键

00:49:06.613 --> 00:49:09.416 align:middle
随后您app的尺寸可能会有变更

00:49:09.716 --> 00:49:13.086 align:middle
该系统或许会依据不同的尺寸级别
做一个app的屏幕截图

00:49:14.421 --> 00:49:18.158 align:middle
当这发生时
和之前相同的自适应方式就会被调用

00:49:19.159 --> 00:49:21.662 align:middle
但没有什么是可见的
用户不会看到任何东西

00:49:22.563 --> 00:49:23.463 align:middle
当这完成后

00:49:23.730 --> 00:49:26.333 align:middle
系统将恢复到原始尺寸

00:49:27.234 --> 00:49:30.504 align:middle
现在这或许有点棘手 但我已经给了您
一些相关的指南去妥善处理

00:49:30.637 --> 00:49:31.905 align:middle
接下来我会多展示一个实例

00:49:32.639 --> 00:49:33.640 align:middle
我又拿出了我的app

00:49:34.608 --> 00:49:38.212 align:middle
我处于活跃状态
它是紧凑宽度而我在看着工作页面

00:49:38.979 --> 00:49:40.414 align:middle
现在用户按了Home键

00:49:41.849 --> 00:49:44.451 align:middle
系统会马上做屏幕截图

00:49:44.985 --> 00:49:48.222 align:middle
现在这不是一个新事情了
我们已经做这个很久了

00:49:48.889 --> 00:49:50.924 align:middle
即将发生的是用户会截这个屏幕截图

00:49:51.024 --> 00:49:52.893 align:middle
接着该app会恢复活跃状态

00:49:53.627 --> 00:49:57.764 align:middle
我们会先展示该屏幕截图
再像之前那样淡出到实时的app

00:49:58.098 --> 00:50:00.601 align:middle
记住这个屏幕截图就在这里
我们在工作当中它是紫色的

00:49:58.098 --> 00:50:00.601 align:middle
记住这个屏幕截图就在这里
我们在工作当中它是紫色的

00:50:02.169 --> 00:50:03.804 align:middle
现在有了多任务执行

00:50:04.471 --> 00:50:08.475 align:middle
系统会调整我们的尺寸至常规尺寸
并截个屏幕截图为己用

00:50:10.043 --> 00:50:12.546 align:middle
现在系统将把我们的尺寸
调整成紧凑类别

00:50:13.547 --> 00:50:15.449 align:middle
此刻app必须做出选择了

00:50:15.616 --> 00:50:18.852 align:middle
我会给您展示如果做了不好的选择和好
的选择分别会发生什么

00:50:19.419 --> 00:50:20.888 align:middle
以及这两者之间的不同

00:50:21.421 --> 00:50:22.856 align:middle
我们先做不好的选择

00:50:24.324 --> 00:50:25.192 align:middle
我们回到紧凑类别

00:50:25.259 --> 00:50:28.362 align:middle
我的app决定“好的 家在顶端
所以我们会再一次显示家”

00:50:29.663 --> 00:50:31.265 align:middle
app稍微保持一会儿不活跃状态

00:50:31.665 --> 00:50:33.567 align:middle
接着用户返回并重新激活了app

00:50:34.501 --> 00:50:37.337 align:middle
然后系统再次显示了步骤3的屏幕截图

00:50:38.005 --> 00:50:40.607 align:middle
记住我们紫色是在工作
这是相同的屏幕截图

00:50:41.975 --> 00:50:47.948 align:middle
现在这个在家里在家里的系统会从这个
淡出到活跃状态的app

00:50:48.749 --> 00:50:49.616 align:middle
这看起来不太好

00:50:49.850 --> 00:50:53.720 align:middle
这真的是一个丑陋的的动画
而且没有做到用户想要的

00:50:54.221 --> 00:50:55.923 align:middle
他们在一个地方
然后离开app

00:50:56.023 --> 00:50:57.491 align:middle
接着又返回
于是显示了其它地方

00:50:57.558 --> 00:50:58.392 align:middle
这不好

00:50:59.626 --> 00:51:01.828 align:middle
所以我们应该做的是从头再来

00:50:59.626 --> 00:51:01.828 align:middle
所以我们应该做的是从头再来

00:51:02.930 --> 00:51:05.999 align:middle
我们在常规宽度
系统将把我们的尺寸调整至紧凑类别

00:51:06.934 --> 00:51:08.001 align:middle
我们应当调整尺寸...

00:51:08.068 --> 00:51:12.840 align:middle
我们应当把app调整回
原先不活跃时的状态

00:51:13.974 --> 00:51:16.410 align:middle
然后用户激活这个app

00:51:17.177 --> 00:51:19.112 align:middle
系统显示屏幕截图
这是相同的事项

00:51:19.746 --> 00:51:21.915 align:middle
我们淡出到活跃的app
这是同样的事项

00:51:21.982 --> 00:51:22.816 align:middle
无缝连接

00:51:23.684 --> 00:51:25.352 align:middle
那么这就是您想要处理问题的方式

00:51:26.887 --> 00:51:31.525 align:middle
当app不活跃而且尺寸又变换时
保持同样的外观

00:51:32.192 --> 00:51:33.227 align:middle
您可以这么做...

00:51:34.461 --> 00:51:38.532 align:middle
当您的app处于不活跃状态时
记住您的尺寸和状态 在哪一页

00:51:40.000 --> 00:51:42.669 align:middle
当您的尺寸变换时
而您仍处于不活跃状态

00:51:43.237 --> 00:51:45.539 align:middle
并且尺寸又返回到最初尺寸

00:51:46.273 --> 00:51:49.243 align:middle
那个应用记得您的状态
回到最初的页面

00:51:54.281 --> 00:51:55.782 align:middle
那么我们进入最后的两项指南

00:51:55.849 --> 00:52:00.654 align:middle
这会关系到接下来我们将谈及的
多任务执行相关讲座

00:51:55.849 --> 00:52:00.654 align:middle
这会关系到接下来我们将谈及的
多任务执行相关讲座

00:52:00.721 --> 00:52:02.589 align:middle
不过首先我想介绍一些术语

00:52:03.757 --> 00:52:04.958 align:middle
那么有两个app在运行中

00:52:05.659 --> 00:52:08.896 align:middle
主app是那个全屏启动的

00:52:09.463 --> 00:52:12.099 align:middle
这就是您一般在app运行时所想的

00:52:13.200 --> 00:52:16.170 align:middle
当您Slide Over另一个
app 我们称作第二app

00:52:17.304 --> 00:52:21.074 align:middle
现在不管您怎样调整app的尺寸
它们都保持不变 它们始终是一样的

00:52:22.242 --> 00:52:24.978 align:middle
通常我们用完全相同的方式
对待这些app

00:52:25.045 --> 00:52:26.680 align:middle
它们确实没有太大区别

00:52:27.047 --> 00:52:32.085 align:middle
区别就发生在当我们讨论资源时
那不可被轻易共享的两个app

00:52:33.187 --> 00:52:35.289 align:middle
其中之一可能是一个终端显示

00:52:36.256 --> 00:52:41.261 align:middle
如果您用AppleTV衔接把您的
iPad插入电视或使用飞机镜像

00:52:41.862 --> 00:52:46.600 align:middle
您可以在iPad和外接屏幕上
同时显示UI

00:52:47.901 --> 00:52:52.039 align:middle
使用多任务执行只有主app
可以看见外接显示

00:52:52.306 --> 00:52:54.141 align:middle
不是第二app

00:52:55.876 --> 00:53:01.415 align:middle
通常app使用外接显示会在iPad
和外接显示屏上分隔它们的UI

00:52:55.876 --> 00:53:01.415 align:middle
通常app使用外接显示会在iPad
和外接显示屏上分隔它们的UI

00:53:01.481 --> 00:53:04.151 align:middle
当一个显示屏被激活
又或者当用户接入装置时

00:53:04.718 --> 00:53:05.552 align:middle
那是他们所期待的

00:53:05.619 --> 00:53:08.155 align:middle
他们只是接入什么装置
然后就会期待什么事情会发生

00:53:08.322 --> 00:53:10.424 align:middle
现在的多任务执行有一个怪癖

00:53:11.358 --> 00:53:12.960 align:middle
比如说您的app是第二app

00:53:13.961 --> 00:53:17.064 align:middle
当用户快速调整其尺寸至主app时

00:53:17.264 --> 00:53:18.265 align:middle
只要它处于全屏幕状态

00:53:19.566 --> 00:53:22.336 align:middle
这时候您的app就会得到一个通知

00:53:22.469 --> 00:53:25.839 align:middle
说有屏幕可用
并且外接屏幕可用

00:53:26.874 --> 00:53:31.879 align:middle
如果您的app选择快速打开其UI
并且在iPad和其他屏幕分隔显示

00:53:32.279 --> 00:53:34.815 align:middle
这或许不是用户所希望的
但这完全取决于您的app

00:53:35.516 --> 00:53:36.817 align:middle
那么在您的app中试一试

00:53:37.150 --> 00:53:39.086 align:middle
确保您所做是对用户有用途的事项

00:53:41.688 --> 00:53:43.357 align:middle
最后一项指南是关于性能方面的

00:53:43.423 --> 00:53:46.393 align:middle
同样的我们有关于这方面的完整讲座
所以我只会提及一些要点

00:53:47.294 --> 00:53:48.228 align:middle
我们之前说过

00:53:48.929 --> 00:53:52.533 align:middle
如果您的app对于尺寸转换无法做出
适当的应对 它将会被终止

00:53:52.666 --> 00:53:55.969 align:middle
所以在尺寸变更时
尽您所能少运行程序

00:53:58.005 --> 00:53:59.673 align:middle
如果您有任何做起来比较慢的事项

00:53:59.740 --> 00:54:04.411 align:middle
采用完成区块和“视图将转移到尺寸”
或“将转移至特征组合”

00:53:59.740 --> 00:54:04.411 align:middle
采用完成区块和“视图将转移到尺寸”
或“将转移至特征组合”

00:54:05.612 --> 00:54:07.281 align:middle
r同样的在动画区块当中

00:54:08.282 --> 00:54:11.218 align:middle
不要任何做多余的布局排版
也不要调用“在需要时布局”

00:54:11.818 --> 00:54:15.923 align:middle
系统会在适当的时候做出布局排版
并且妥善利用这点优势

00:54:16.123 --> 00:54:20.127 align:middle
仅仅调用“设置必要布局”来完成布局
因为布局相当耗费时间

00:54:22.663 --> 00:54:24.898 align:middle
这就是策略
这就是指导方针

00:54:24.965 --> 00:54:28.402 align:middle
现在您已经知道很多关于如何让
您的app更优秀地运行多任务执行

00:54:31.438 --> 00:54:34.508 align:middle
您已经知道怎样和为什么要在
您的app当中采用多任务执行

00:54:35.709 --> 00:54:38.412 align:middle
您知道自适应性
自从iOS 8就已开始普及

00:54:38.679 --> 00:54:40.814 align:middle
我们在iOS 9当中做的
并不是一个很大的延伸

00:54:41.748 --> 00:54:46.320 align:middle
您知道怎么提供好的用户体验

00:54:46.386 --> 00:54:47.421 align:middle
您有技术

00:54:48.255 --> 00:54:51.959 align:middle
因此您的用户想要采用多任务执行
让他们使用吧

00:54:53.627 --> 00:54:55.596 align:middle
想了解更多信息
请查看我们的文档

00:54:55.662 --> 00:54:58.732 align:middle
特别是
“在iPad采用多重任务处理改进”

00:54:59.399 --> 00:55:00.467 align:middle
查看我们的代码示例

00:54:59.399 --> 00:55:00.467 align:middle
查看我们的代码示例

00:55:01.268 --> 00:55:04.505 align:middle
您可以和DTS
即研发这论坛的技术支持对话

00:55:04.938 --> 00:55:07.641 align:middle
一般的查询 请询问库尔特罗赫特
他是我们的传道士

00:55:08.141 --> 00:55:10.677 align:middle
如果您有更多问题
我们还有更多的讲座

00:55:11.211 --> 00:55:14.781 align:middle
再说一次如果您想找到
picture-in-picture或共享相机

00:55:14.915 --> 00:55:17.284 align:middle
请到去“媒体为基础的多任务执行
app概要”

00:55:17.985 --> 00:55:20.120 align:middle
如果您想知道怎样做一个好公民

00:55:20.187 --> 00:55:23.624 align:middle
比如通过app共享CPU或存档资源

00:55:24.358 --> 00:55:26.159 align:middle
请去“优化您的多任务执行APP”

00:55:27.327 --> 00:55:29.763 align:middle
最后到“Cocoa Touch
与多任务执行室”来拜访我们吧

00:55:29.830 --> 00:55:31.231 align:middle
我们会针对您的app协助您

00:55:32.432 --> 00:55:34.935 align:middle
感谢大家今天的到来
一起与多任务执行向前迈
