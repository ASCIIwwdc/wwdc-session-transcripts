WEBVTT

00:00:19.520 --> 00:00:24.324 align:middle line:-2
HomeKit的新内容

00:00:26.293 --> 00:00:27.261 align:middle
谢谢

00:00:30.597 --> 00:00:31.832 align:middle
大家好 下午好

00:00:32.332 --> 00:00:33.166 align:middle
欢迎

00:00:33.667 --> 00:00:34.601 align:middle
感谢你们的到来

00:00:35.903 --> 00:00:37.437 align:middle
我叫Anush Nadathur

00:00:37.905 --> 00:00:39.773 align:middle
来自智能家居 是一名软件工程师

00:00:40.941 --> 00:00:43.877 align:middle
今天我和我的同事Naveen
要和大家聊一聊

00:00:43.944 --> 00:00:46.113 align:middle
iOS 9版中智能家居的新功能

00:00:47.814 --> 00:00:50.784 align:middle
在过去几年间 我们已经目睹了

00:00:50.851 --> 00:00:53.220 align:middle
家居设备市场的增长

00:00:54.321 --> 00:00:57.491 align:middle
这为我们提供了一个巨大的机会

00:00:58.025 --> 00:01:02.763 align:middle
来影响人们在使用这些设备时的体验

00:00:58.025 --> 00:01:02.763 align:middle
来影响人们在使用这些设备时的体验

00:01:02.829 --> 00:01:04.498 align:middle
使他们的家居生活更加舒适

00:01:07.067 --> 00:01:11.839 align:middle
Apple在iOS8引入了智能家居
我们可以共同努力借助它

00:01:12.539 --> 00:01:16.143 align:middle
让更多的人体验家庭自动化并为客户

00:01:17.644 --> 00:01:21.081 align:middle
提供一致的用户体验

00:01:22.749 --> 00:01:24.585 align:middle
去年我们成功地举行了一次讲座

00:01:25.385 --> 00:01:29.523 align:middle
如果您没有参加
我们现在可以简要地回顾一下

00:01:32.626 --> 00:01:36.730 align:middle
智能家居提供一个通用协议

00:01:36.797 --> 00:01:40.000 align:middle
让所有由它控制的设备都能够运行并

00:01:40.400 --> 00:01:42.002 align:middle
与iOS交互访问

00:01:43.070 --> 00:01:47.341 align:middle
在这个协议中 我们定义了许多

00:01:47.908 --> 00:01:50.077 align:middle
常用的家居配件

00:01:52.212 --> 00:01:54.414 align:middle
但是 这个协议也有一定的灵活性

00:01:54.481 --> 00:01:59.887 align:middle
让你可以以概要文件自定义配件功能

00:02:00.554 --> 00:02:02.356 align:middle
同时实现智能家居的功能

00:02:05.325 --> 00:02:07.561 align:middle
智能家居的主要功能之一是

00:02:07.628 --> 00:02:10.597 align:middle
提供一个覆盖所有智能家居应用程序

00:02:10.663 --> 00:02:12.533 align:middle
共同视图

00:02:13.133 --> 00:02:16.870 align:middle
也就是说
用过app A又切换到app B

00:02:17.204 --> 00:02:18.672 align:middle
这两者可以获取相同的家居数据

00:02:19.273 --> 00:02:21.341 align:middle
这一点对我们的客户来说至关重要

00:02:21.408 --> 00:02:23.610 align:middle
因为这样可以提供一致的用户体验

00:02:23.677 --> 00:02:25.612 align:middle
这正是我们所追求的

00:02:26.880 --> 00:02:30.984 align:middle
如果你的配件执行
Apple的一个概要文件

00:02:31.518 --> 00:02:33.487 align:middle
就可以直接用上Siri

00:02:35.455 --> 00:02:40.460 align:middle
是的 iOS的智能家居框架

00:02:40.594 --> 00:02:43.363 align:middle
提供了一个自然的家居模式

00:02:44.131 --> 00:02:48.802 align:middle
所以我们有描述房间区域的对象

00:02:48.869 --> 00:02:51.138 align:middle
这种对象是房间的集合体 当然

00:02:51.205 --> 00:02:52.573 align:middle
也是你能控制的端口的集合

00:02:54.474 --> 00:02:57.778 align:middle
如果客户的数据不安全 失去私密性

00:02:58.011 --> 00:03:00.781 align:middle
以上这些就都失去了意义

00:02:58.011 --> 00:03:00.781 align:middle
以上这些就都失去了意义

00:03:01.615 --> 00:03:06.753 align:middle
智能家居从设计之初
就充分考虑了私密性和安全性

00:03:07.721 --> 00:03:10.324 align:middle
iOS和智能家居配件之间的

00:03:10.390 --> 00:03:13.193 align:middle
所有交流都是点对点加密的

00:03:13.927 --> 00:03:17.364 align:middle
而且我们从不使用跨越不同会话的密钥

00:03:17.464 --> 00:03:21.735 align:middle
所以即使你有密钥 也不能用它来

00:03:21.802 --> 00:03:23.670 align:middle
获取过去或将来的数据

00:03:25.305 --> 00:03:28.876 align:middle
所有家庭设备上的数据都是以

00:03:28.942 --> 00:03:30.210 align:middle
当地设备上的密钥加密

00:03:30.577 --> 00:03:32.913 align:middle
所以你的数据是完全私有的 安全的

00:03:34.815 --> 00:03:36.817 align:middle
这是iOS 8版中智能家居的情况

00:03:37.351 --> 00:03:39.486 align:middle
接下来要讲的是我们有什么新的进展

00:03:41.255 --> 00:03:45.893 align:middle
我会介绍iOS9
版智能家居的功能和优化

00:03:46.426 --> 00:03:48.161 align:middle
Naveen会介绍

00:03:48.362 --> 00:03:51.231 align:middle
配件空间的更新情况

00:03:53.500 --> 00:03:54.635 align:middle
现在让我们言归正传

00:03:58.839 --> 00:04:01.842 align:middle
iOS 9版的
智能家居有一些非常棒的功能

00:03:58.839 --> 00:04:01.842 align:middle
iOS 9版的
智能家居有一些非常棒的功能

00:04:02.643 --> 00:04:08.849 align:middle
我们还根据去年
从开发者那里的反馈进行了几处优化

00:04:09.550 --> 00:04:11.151 align:middle
所以让反馈来得更猛烈些吧

00:04:11.351 --> 00:04:12.219 align:middle
我们欢迎之至

00:04:13.787 --> 00:04:17.024 align:middle
我们从一项看似很小

00:04:18.024 --> 00:04:20.494 align:middle
但是对你的日常生活
有巨大促进作用的改变开始

00:04:22.362 --> 00:04:25.232 align:middle
例如卧室里有一盏灯

00:04:26.233 --> 00:04:28.635 align:middle
我们把它移到客厅

00:04:29.570 --> 00:04:33.040 align:middle
在iOS 8版里

00:04:33.674 --> 00:04:36.376 align:middle
我们会把这种变化通知你的app

00:04:37.177 --> 00:04:40.547 align:middle
由家庭经理进行家居更新委托回调

00:04:41.315 --> 00:04:43.851 align:middle
现在的版本不仅告诉你家里发生了变化

00:04:43.951 --> 00:04:46.820 align:middle
还为你提供一组新的对象 可利用他们

00:04:46.887 --> 00:04:49.723 align:middle
弄清楚家里究竟有什么变化

00:04:51.191 --> 00:04:56.930 align:middle
我们一直力求更好
所以在iOS 9中智能家居将

00:04:56.997 --> 00:04:59.833 align:middle
保留你原有的对象只对有变化的性能

00:04:59.900 --> 00:05:01.034 align:middle
进行更新

00:04:59.900 --> 00:05:01.034 align:middle
进行更新

00:05:02.836 --> 00:05:04.071 align:middle
谢谢

00:05:06.507 --> 00:05:08.809 align:middle
也就是说在我们的例子中

00:05:09.309 --> 00:05:10.878 align:middle
你只会收到一个委托回调

00:05:10.944 --> 00:05:13.280 align:middle
内容是家居环境有更新

00:05:14.147 --> 00:05:15.916 align:middle
我觉得这会简化你的代码库

00:05:15.983 --> 00:05:18.352 align:middle
使你可以关注你的app的功能

00:05:19.319 --> 00:05:22.589 align:middle
这并不是我们增加的唯一的一处优化

00:05:22.756 --> 00:05:25.359 align:middle
下面我们用一个例子说说另一处优化

00:05:26.860 --> 00:05:30.831 align:middle
假设我有一个客厅
我还有一张客厅的照片

00:05:31.365 --> 00:05:33.200 align:middle
我想把这张照片用在我的app里

00:05:33.433 --> 00:05:36.203 align:middle
这就是说你要能够关联

00:05:36.270 --> 00:05:39.806 align:middle
并找到一个代表房间的智能家居组件

00:05:39.873 --> 00:05:41.642 align:middle
这个组件在app改版时依然有效

00:05:43.310 --> 00:05:48.549 align:middle
现在 智能家居中的房间
是以一个HMRoom类别代表

00:05:49.349 --> 00:05:53.387 align:middle
它有名字的属性名字不是一成不变的

00:05:53.820 --> 00:05:55.822 align:middle
所以任何智能家居
app都可以对其进行更改

00:05:56.957 --> 00:05:59.760 align:middle
要解决我们的问题
我们需要更具持久性的东西

00:06:00.827 --> 00:06:04.565 align:middle
所以在iOS 9中我们
在智能家居所有的相关类别中

00:06:04.898 --> 00:06:07.701 align:middle
引入了持久识别符

00:06:11.939 --> 00:06:13.006 align:middle
谢谢

00:06:13.407 --> 00:06:15.909 align:middle
所以在这些类别中 你就会有个独有的

00:06:15.976 --> 00:06:18.378 align:middle
持久识别符属性

00:06:19.146 --> 00:06:22.983 align:middle
这些应用只此一家 现在你可以用其

00:06:23.050 --> 00:06:27.754 align:middle
应用它关联你的app中的数据

00:06:28.255 --> 00:06:29.890 align:middle
将它与智能家居组件关联

00:06:32.759 --> 00:06:36.630 align:middle
接下来我想聊聊iOS8种的用户管理

00:06:37.764 --> 00:06:41.702 align:middle
在iOS8中你的app
有以下三个应用程序界面

00:06:42.102 --> 00:06:46.373 align:middle
让用户管理家中的人
可以添加用户移除用户

00:06:46.440 --> 00:06:48.408 align:middle
列出家中所有的用户

00:06:49.042 --> 00:06:51.912 align:middle
在iOS 9中我们不再开发这种功能

00:06:52.479 --> 00:06:57.985 align:middle
而代以一个更简洁的界面
用一个完成处理程序管理用户

00:06:58.819 --> 00:07:02.222 align:middle
这个应用程序界面
可以用一个完整的视图控制器

00:06:58.819 --> 00:07:02.222 align:middle
这个应用程序界面
可以用一个完整的视图控制器

00:07:02.456 --> 00:07:06.159 align:middle
让用户管理家中所有人

00:07:08.562 --> 00:07:11.965 align:middle
开发者需要把
这个新应用程序界面搬到iOS 9里

00:07:12.366 --> 00:07:15.836 align:middle
这样我们的客户就可以获得更丰富的

00:07:16.370 --> 00:07:17.404 align:middle
家庭共享体验

00:07:20.007 --> 00:07:22.976 align:middle
我还要谈谈一个与此有关的话题

00:07:24.311 --> 00:07:27.080 align:middle
当其他用户与你共用一个智能家居

00:07:27.681 --> 00:07:30.551 align:middle
他们能够控制家里其他配件

00:07:31.151 --> 00:07:33.287 align:middle
但是他们不能更改任何设置

00:07:34.888 --> 00:07:39.993 align:middle
要获得良好用户体验你的app需要有

00:07:40.060 --> 00:07:41.828 align:middle
只与该用户相关的功能

00:07:42.996 --> 00:07:44.565 align:middle
要实现这一点你现在需要

00:07:44.631 --> 00:07:46.633 align:middle
了解该用户的权限级别

00:07:46.700 --> 00:07:49.303 align:middle
所以 例如如果他们不是管理员

00:07:50.237 --> 00:07:53.006 align:middle
你就不能让他们编辑房间名称

00:07:54.508 --> 00:07:57.144 align:middle
我们接下来会展示程序界面
你就明白我所描述的情况了

00:07:58.245 --> 00:08:02.316 align:middle
我们要在HMHome增加一个新属性

00:07:58.245 --> 00:08:02.316 align:middle
我们要在HMHome增加一个新属性

00:08:02.883 --> 00:08:07.287 align:middle
当前用户代表当前在设备上登录的用户

00:08:08.789 --> 00:08:12.693 align:middle
你可以利用这个属性
并使用HMHome上的一个新功能

00:08:13.460 --> 00:08:15.229 align:middle
家庭用户的访问控制

00:08:15.963 --> 00:08:19.499 align:middle
又回到了HMHome的访问控制对象

00:08:20.267 --> 00:08:23.470 align:middle
这个对象封装了该用户的所有权限

00:08:24.471 --> 00:08:25.772 align:middle
我们具体解释一下

00:08:26.840 --> 00:08:29.710 align:middle
它有管理性能 如果你是这家的管理员

00:08:30.310 --> 00:08:31.612 align:middle
就可以设定管理属性

00:08:32.011 --> 00:08:34.948 align:middle
现在能更新你apps并利用这一性能

00:08:35.349 --> 00:08:37.851 align:middle
与该用户共享相关功能

00:08:40.486 --> 00:08:46.894 align:middle
让我们说一说
iOS 8版里一个伟大功能 场景

00:08:47.728 --> 00:08:51.798 align:middle
现在场景使我们的客户可以

00:08:52.132 --> 00:08:53.767 align:middle
用一个简单的命令控制多个访问

00:08:54.268 --> 00:08:57.437 align:middle
所以我可以设置一个夜晚场景
仅用一个单独的命令

00:08:57.738 --> 00:09:01.875 align:middle
关掉所有的灯
启动家里的安全措施把温度调节到

00:08:57.738 --> 00:09:01.875 align:middle
关掉所有的灯
启动家里的安全措施把温度调节到

00:09:01.942 --> 00:09:05.012 align:middle
适宜的水平 只用一个操作

00:09:05.812 --> 00:09:07.281 align:middle
这是一个非常强大的功能

00:09:07.881 --> 00:09:11.518 align:middle
在iOS 9里我们希望客户
更多地使用这项功能

00:09:11.952 --> 00:09:15.489 align:middle
要做到这一点
我们正在引入预定义场景

00:09:16.823 --> 00:09:20.761 align:middle
大多数人每天都会做四件事

00:09:21.895 --> 00:09:26.433 align:middle
它们就是起床 离开家 回家

00:09:27.067 --> 00:09:28.302 align:middle
和上床睡觉

00:09:29.603 --> 00:09:32.806 align:middle
现在 你明白这四个预定义场景是什么

00:09:32.873 --> 00:09:34.308 align:middle
你可以给他们设定具体内容

00:09:35.275 --> 00:09:38.312 align:middle
这样在你的app里你就可以提出建议

00:09:38.712 --> 00:09:42.916 align:middle
可以用有实际意义的动作

00:09:43.150 --> 00:09:44.318 align:middle
设置这四个预定义场景

00:09:45.552 --> 00:09:48.121 align:middle
为了让客户有良好的体验

00:09:48.622 --> 00:09:50.657 align:middle
预定义场景是不能删除的

00:09:52.159 --> 00:09:54.061 align:middle
我们来看一下应用程序界面

00:09:55.629 --> 00:10:00.434 align:middle
智能家居的每个场景都是由一个
HM行动组对象表示的

00:09:55.629 --> 00:10:00.434 align:middle
智能家居的每个场景都是由一个
HM行动组对象表示的

00:10:01.702 --> 00:10:04.404 align:middle
我们已经增加了一个新的属性
操作设定类型

00:10:04.505 --> 00:10:08.842 align:middle
用来描述你在app里
设置的场景

00:10:10.444 --> 00:10:15.916 align:middle
我们有四个常数分别对应
之前谈到的四个预定义场景

00:10:16.950 --> 00:10:19.620 align:middle
我们还另有一个类型 由用户定义

00:10:19.887 --> 00:10:23.223 align:middle
这个场景由你的app自行创建 设置

00:10:24.925 --> 00:10:28.562 align:middle
在家居环境中 怎样进入预定义场景？

00:10:29.530 --> 00:10:35.302 align:middle
在HMHome类别里
这些场景是作为操作设定属性自动植入

00:10:37.137 --> 00:10:39.540 align:middle
我们还有一个快捷界面

00:10:39.973 --> 00:10:41.975 align:middle
内置行动类型组

00:10:42.476 --> 00:10:44.111 align:middle
这个界面采用操作设定类型

00:10:45.245 --> 00:10:47.514 align:middle
并返回一组对应

00:10:47.681 --> 00:10:51.985 align:middle
一个预定义场景的HM操作设定对象

00:10:54.988 --> 00:10:56.757 align:middle
程序界面就是这样 但是我们还想要

00:10:56.823 --> 00:10:59.826 align:middle
使这些场景更便于客户操作

00:11:01.195 --> 00:11:06.967 align:middle
所以在iOS 9里Siri
与这些场景配合得更好

00:11:08.435 --> 00:11:11.672 align:middle
现在Siri可以识别所有场景名称

00:11:11.872 --> 00:11:14.508 align:middle
只要说出场景名称

00:11:14.608 --> 00:11:16.243 align:middle
就可以对其进行操作

00:11:16.310 --> 00:11:19.246 align:middle
这是客户使用场景的非常好的方式

00:11:23.050 --> 00:11:26.887 align:middle
现在我们要讲的是如何给你的家居

00:11:27.221 --> 00:11:29.356 align:middle
增加配件

00:11:32.059 --> 00:11:35.329 align:middle
假设我有两个出自同一生产商家居配件

00:11:35.395 --> 00:11:37.965 align:middle
可以用生产商的名字和型号作为

00:11:38.031 --> 00:11:40.467 align:middle
配件名称的一部分

00:11:40.968 --> 00:11:43.070 align:middle
当我将这个配件添加到家居设置中时

00:11:43.437 --> 00:11:45.472 align:middle
我可以随时查看
配件的包装 确保

00:11:46.106 --> 00:11:48.141 align:middle
添加正确的设备

00:11:49.676 --> 00:11:52.479 align:middle
但是对我们的客户来说
更好的用户体验是

00:11:52.646 --> 00:11:54.715 align:middle
通过给出某种指示

00:11:54.781 --> 00:11:57.084 align:middle
来提供更多的配件信息

00:11:58.252 --> 00:12:01.288 align:middle
比如说我们可以给它们视觉线索

00:11:58.252 --> 00:12:01.288 align:middle
比如说我们可以给它们视觉线索

00:12:02.122 --> 00:12:04.558 align:middle
显示一个能说明

00:12:04.625 --> 00:12:09.897 align:middle
正在添加的配件类型的图标
这样的体验就更好

00:12:10.531 --> 00:12:11.665 align:middle
要获得这种功能

00:12:11.865 --> 00:12:14.902 align:middle
我们正在向iOS 9添加配件类别

00:12:16.236 --> 00:12:21.241 align:middle
在安装配件时
你的app就可以获取这种信息

00:12:21.675 --> 00:12:24.378 align:middle
所以你在浏览并找到这些配件时

00:12:24.611 --> 00:12:26.213 align:middle
就能获取这些信息

00:12:27.314 --> 00:12:31.285 align:middle
它指定该配件的主要类别

00:12:33.453 --> 00:12:36.990 align:middle
-现在看看这个功能的界面
我们正在引入一个新的类别

00:12:37.457 --> 00:12:39.026 align:middle
HM配件类型

00:12:41.228 --> 00:12:45.065 align:middle
它有一个属性类别类型
可以给出关于该类别的

00:12:45.132 --> 00:12:47.100 align:middle
更多信息 所以在我们的例子中

00:12:47.601 --> 00:12:49.336 align:middle
你会找到灯泡类别类型

00:12:50.270 --> 00:12:51.705 align:middle
风扇类别类型

00:12:53.173 --> 00:12:56.710 align:middle
进入这个类别要用到HM配件

00:12:56.777 --> 00:12:58.712 align:middle
类别属性

00:12:59.012 --> 00:13:01.448 align:middle
这个属性在浏览这些配件时就可以找到

00:12:59.012 --> 00:13:01.448 align:middle
这个属性在浏览这些配件时就可以找到

00:13:02.049 --> 00:13:06.053 align:middle
我们建议客户在初次安装时

00:13:06.119 --> 00:13:08.589 align:middle
就使用这个新功能优化用户体验

00:13:17.064 --> 00:13:20.667 align:middle
现在我们开始讲一下HomeKit
和Apple Watch(苹果表)

00:13:23.303 --> 00:13:27.975 align:middle
是的 正如我们周一所讲的内容

00:13:28.809 --> 00:13:31.044 align:middle
目前HomeKit
适用在 Watch OS系统中

00:13:31.812 --> 00:13:33.747 align:middle
好啦
这意味着你现在可以出门跑步去啦

00:13:33.814 --> 00:13:37.284 align:middle
没有iPhone
如果你有苹果手表回来

00:13:37.351 --> 00:13:38.919 align:middle
你就能够

00:13:38.986 --> 00:13:40.454 align:middle
打开房门 回到室内

00:13:41.121 --> 00:13:42.589 align:middle
这样很酷么

00:13:48.095 --> 00:13:52.499 align:middle
在您的iOS系统的设备上保存着
你们家庭所有的数据可以镜像储存

00:13:52.833 --> 00:13:55.836 align:middle
到手表中
你就能够在你的手机上进行编辑啦

00:13:55.903 --> 00:13:58.005 align:middle
以及这些数据会
与您的手表数据产生同步变化

00:14:00.574 --> 00:14:05.312 align:middle
您能够从手表上看到你的家内情况
控制家里的设备附件

00:14:05.512 --> 00:14:07.314 align:middle
以及在所有屏幕上进行操作

00:14:08.482 --> 00:14:11.552 align:middle
我们不能等待看到你将会

00:14:11.618 --> 00:14:13.287 align:middle
为我们的客户提供创新性体验

00:14:13.654 --> 00:14:15.189 align:middle
安装有HomeKit的苹果手表

00:14:18.058 --> 00:14:23.764 align:middle
最后
我想谈论一下OS 9系统新典型特征

00:14:25.432 --> 00:14:26.533 align:middle
以及我本人对此真心高兴

00:14:26.600 --> 00:14:28.001 align:middle
因为我在此投入了大量的时间

00:14:31.305 --> 00:14:33.273 align:middle
我们开始讲一下触发器

00:14:34.575 --> 00:14:38.278 align:middle
在iOS 8系统之中
我们设置了一个定时触发器

00:14:38.345 --> 00:14:41.748 align:middle
以便让你们通过操作屏幕调整某天时间

00:14:41.815 --> 00:14:47.721 align:middle
我能够设置一个
每天下午7点执行动作的夜晚屏幕

00:14:48.956 --> 00:14:50.924 align:middle
如果我们这样做后 但是会发生什么呢

00:14:52.593 --> 00:14:55.195 align:middle
我回到家中 不能够打开大门

00:14:55.963 --> 00:14:57.164 align:middle
现在就发生一个事件

00:14:59.199 --> 00:15:01.301 align:middle
让我们假设现在时间是下午6点钟之前

00:14:59.199 --> 00:15:01.301 align:middle
让我们假设现在时间是下午6点钟之前

00:15:01.568 --> 00:15:04.071 align:middle
在紧挨着大门安装了一个动作传感器

00:15:04.805 --> 00:15:06.473 align:middle
检测到动作指令 动作传感器会被激活

00:15:07.574 --> 00:15:09.543 align:middle
如果设置了我已经到达家门口的屏幕

00:15:09.877 --> 00:15:11.812 align:middle
我希望自动地执行上述动作

00:15:12.179 --> 00:15:14.414 align:middle
你家大门将会打开 欢迎您回家

00:15:15.182 --> 00:15:17.451 align:middle
我很高兴地告诉您们
使用iOS 9系统

00:15:18.252 --> 00:15:19.620 align:middle
运用事件触发器

00:15:21.488 --> 00:15:24.725 align:middle
一个或者多个事件激活一个触发器

00:15:25.659 --> 00:15:27.594 align:middle
让我们探讨我们支持哪些种类的事件

00:15:27.661 --> 00:15:31.198 align:middle
设置了一些与设备附件状态对应的事件

00:15:31.265 --> 00:15:34.635 align:middle
这将会对应于我们家的大门打开状态

00:15:35.536 --> 00:15:38.138 align:middle
以及设置了基于geofence事件

00:15:38.472 --> 00:15:40.307 align:middle
因此你能够设置事件

00:15:40.374 --> 00:15:42.776 align:middle
对应着我离开家和达到家里的时间

00:15:43.810 --> 00:15:48.315 align:middle
让我们仔细检查这些内容
然后我们把这些编入API之中

00:15:50.817 --> 00:15:53.687 align:middle
针对某一设备附件所处的状态
我们将新建新的归类

00:15:53.787 --> 00:15:55.422 align:middle
HM典型事件

00:15:56.857 --> 00:15:58.559 align:middle
以及带领给你们所想要的典型特征

00:15:58.625 --> 00:16:02.596 align:middle
成为该事件的源和触发值

00:15:58.625 --> 00:16:02.596 align:middle
成为该事件的源和触发值

00:16:02.663 --> 00:16:04.765 align:middle
当那种典型特征满足你所设定的值

00:16:04.965 --> 00:16:06.967 align:middle
事件将会自动为你开启

00:16:09.436 --> 00:16:14.808 align:middle
针对基于定位的事件
我们将会设置HM定位事件类

00:16:14.908 --> 00:16:16.109 align:middle
来讨论CLRegion

00:16:16.510 --> 00:16:21.081 align:middle
当满足一定要求
你们能够对CLRegion设定配置

00:16:21.582 --> 00:16:24.151 align:middle
HM定位事件类将会自动开始

00:16:25.285 --> 00:16:29.756 align:middle
让我们回顾一下我们大门被打开的例子

00:16:29.857 --> 00:16:31.925 align:middle
以及把这件事作为一个典型特征事件

00:16:32.726 --> 00:16:34.027 align:middle
下面是你操作的方法

00:16:35.863 --> 00:16:38.565 align:middle
生成一个HM典型特征事件类

00:16:39.032 --> 00:16:42.135 align:middle
设置大门的当前状态典型特征

00:16:42.202 --> 00:16:44.071 align:middle
作为一个你希望设置的典型特征

00:16:44.538 --> 00:16:48.041 align:middle
以及设置一个触发值
只是设置大门开启状态的参数

00:16:48.509 --> 00:16:51.345 align:middle
现在事件将会触发

00:16:51.411 --> 00:16:54.248 align:middle
一旦大门打开
当一部分事件触发器事件将会开启

00:16:56.517 --> 00:16:58.051 align:middle
我曾谈到条件

00:16:58.752 --> 00:17:03.724 align:middle
在特定触发器的屏幕得到执行的条件

00:16:58.752 --> 00:17:03.724 align:middle
在特定触发器的屏幕得到执行的条件

00:17:04.391 --> 00:17:07.461 align:middle
我们支持三类条件：基于时间

00:17:08.028 --> 00:17:11.498 align:middle
能够有相应部分对应于下午6点之前

00:17:12.398 --> 00:17:14.667 align:middle
我们同样会支持设备附件的所处的状态

00:17:14.734 --> 00:17:17.371 align:middle
这将由我们的动作传感器检测到动作

00:17:18.070 --> 00:17:20.840 align:middle
最后我同样设置一天之内的重要事件

00:17:21.441 --> 00:17:22.542 align:middle
就像日出和日落

00:17:24.344 --> 00:17:28.080 align:middle
仔细检查其中的每一项
和领会如何在API生成它们

00:17:29.750 --> 00:17:33.086 align:middle
条件按照提示进行预设

00:17:33.187 --> 00:17:34.955 align:middle
在API中NS提示

00:17:35.756 --> 00:17:39.193 align:middle
以及我们对所有这些设置了便捷措施

00:17:39.259 --> 00:17:40.961 align:middle
你不必对此担心

00:17:41.228 --> 00:17:43.964 align:middle
生成这些非常简单

00:17:44.097 --> 00:17:49.169 align:middle
在HMEventTrigger类
我们进行类方法提示

00:17:49.269 --> 00:17:52.940 align:middle
在部件之中预设时间到点
之前对触发器产生触发进行评估

00:17:53.373 --> 00:17:55.709 align:middle
那样会安装
一个你能够设置的NS预设时间部件

00:17:55.976 --> 00:17:57.911 align:middle
例如你能够使用这些

00:17:58.879 --> 00:18:01.048 align:middle
生成一个下午6点钟之前的条件

00:17:58.879 --> 00:18:01.048 align:middle
生成一个下午6点钟之前的条件

00:18:01.982 --> 00:18:04.585 align:middle
设置有一个设置有后预设时间后部件

00:18:05.219 --> 00:18:07.855 align:middle
我们同样设置有第三个用来做出提示

00:18:07.921 --> 00:18:11.592 align:middle
预设时间组件的评估触发器产生触发

00:18:12.192 --> 00:18:13.293 align:middle
这种功能非常有用

00:18:13.360 --> 00:18:14.995 align:middle
你能够使用这种功能生成条件

00:18:15.062 --> 00:18:18.365 align:middle
为某特定日期 例如 设置为星期天

00:18:20.801 --> 00:18:24.004 align:middle
让我们仔细查看一下例子
生成我们想要的条件

00:18:24.071 --> 00:18:29.076 align:middle
设置为下午6点钟之前
首先我们生成一个NS预设时间部件

00:18:29.309 --> 00:18:34.381 align:middle
以及设置小时特性为下午6点钟 其次

00:18:34.848 --> 00:18:37.885 align:middle
我们只是使用Ns预设时间部件
并且一直保留

00:18:37.951 --> 00:18:39.853 align:middle
到方便的API提示

00:18:39.920 --> 00:18:43.624 align:middle
在预设时间部件
发生动作对触发器进行评估

00:18:43.991 --> 00:18:46.326 align:middle
以及这将会给你一个NS提示

00:18:46.393 --> 00:18:51.932 align:middle
对应于下午6点钟之前
其次设备附件所处的状态

00:18:54.134 --> 00:18:58.472 align:middle
同样在HMEventTrigger
类上设置了一个方便的API

00:18:58.872 --> 00:19:03.610 align:middle
也就是说
提示对典型特征触发器进行评估

00:18:58.872 --> 00:19:03.610 align:middle
也就是说
提示对典型特征触发器进行评估

00:19:04.011 --> 00:19:07.147 align:middle
考虑到这些典型特征和所需要的匹配值

00:19:07.214 --> 00:19:10.651 align:middle
满足这些将会进行评估的条件

00:19:11.852 --> 00:19:13.420 align:middle
因此对于我们的动作传感器

00:19:13.887 --> 00:19:16.790 align:middle
在此你将如何生成一个条件

00:19:17.224 --> 00:19:19.126 align:middle
对应于检测动作

00:19:20.761 --> 00:19:22.362 align:middle
只是称方便为API

00:19:22.429 --> 00:19:26.333 align:middle
设置了大门传感器
典型特征作为一个典型特征源

00:19:26.400 --> 00:19:28.502 align:middle
以及设定了匹配值

00:19:28.769 --> 00:19:29.937 align:middle
并设置为正确值

00:19:30.037 --> 00:19:31.972 align:middle
这将意味着动作已经被检测到

00:19:32.306 --> 00:19:33.607 align:middle
它就这么简单

00:19:35.108 --> 00:19:37.444 align:middle
最后一天之中最为重要的事件

00:19:37.845 --> 00:19:39.947 align:middle
我们对此设置了两个方便的API:

00:19:41.582 --> 00:19:44.785 align:middle
在重要事件发生之前提示评价触发器

00:19:44.852 --> 00:19:47.654 align:middle
这样采取可供选择的补偿参数

00:19:47.721 --> 00:19:49.156 align:middle
补偿参数属于NS的预约部件

00:19:50.190 --> 00:19:52.793 align:middle
以及其次的是你们可以查猜测到

00:19:52.860 --> 00:19:55.529 align:middle
在重要事件发生
之后提示对触发开关进行评估

00:19:57.397 --> 00:19:59.066 align:middle
我们设置了两个常数

00:19:59.132 --> 00:20:01.301 align:middle
对重要事件进行界定：日出与日落

00:19:59.132 --> 00:20:01.301 align:middle
对重要事件进行界定：日出与日落

00:20:02.402 --> 00:20:05.272 align:middle
让我们仔细检查一下例子的条件

00:20:06.273 --> 00:20:09.510 align:middle
为将会对应于事件触发器

00:20:09.576 --> 00:20:12.880 align:middle
设置在日落三十分钟之前

00:20:13.914 --> 00:20:15.148 align:middle
我们将会如何进行操作呢?

00:20:15.449 --> 00:20:18.218 align:middle
首先你们生成一个NS预设时间组件

00:20:18.552 --> 00:20:20.888 align:middle
以及设置分钟数为负三十

00:20:22.422 --> 00:20:24.992 align:middle
那么现在只是使用我们的方便API

00:20:25.058 --> 00:20:29.263 align:middle
在重要事件发生之前提示进行评估

00:20:29.997 --> 00:20:32.165 align:middle
设置日落为重要事件

00:20:32.566 --> 00:20:34.835 align:middle
以及设置个像上面步骤生成的补偿参数

00:20:35.736 --> 00:20:39.706 align:middle
通过这样方式
就能够在屏幕上对大门进行执行

00:20:40.274 --> 00:20:43.443 align:middle
如果事件在下午五点半之后触发

00:20:44.311 --> 00:20:47.681 align:middle
只要在下午五点半之前触发
它将会在屏幕上进行操作

00:20:49.049 --> 00:20:54.288 align:middle
将能够触发我们设置的事件触发开关

00:20:55.155 --> 00:20:56.490 align:middle
以及随后我们会得到条件

00:20:56.557 --> 00:20:58.091 align:middle
我们如何将这些联系在一起呢？

00:20:58.992 --> 00:21:01.495 align:middle
当你生成
HMEventTrigger类

00:20:58.992 --> 00:21:01.495 align:middle
当你生成
HMEventTrigger类

00:21:01.995 --> 00:21:04.231 align:middle
以及方法因此而得名

00:21:05.532 --> 00:21:08.702 align:middle
你们能够设置
一个或者多个事件来激发触发器

00:21:09.369 --> 00:21:11.338 align:middle
一旦触发器激活

00:21:11.405 --> 00:21:13.473 align:middle
我们对相应的条件进行评估

00:21:13.707 --> 00:21:16.844 align:middle
条件可以选择
如果你没有设置条件

00:21:18.245 --> 00:21:20.147 align:middle
他就是我们假设其为正确的

00:21:20.347 --> 00:21:24.685 align:middle
以及我们将一直
在事件触发器相关的屏幕上操作

00:21:25.185 --> 00:21:28.522 align:middle
一旦任何一个事件被激活

00:21:29.923 --> 00:21:34.161 align:middle
现在我们
对先前谈及到的整个例子进行仔细检查

00:21:35.395 --> 00:21:38.832 align:middle
已经生成一个典型特征事件 对应于

00:21:39.066 --> 00:21:40.667 align:middle
大门被锁

00:21:41.301 --> 00:21:43.804 align:middle
我们生成两个条件
其中一个是下午6点钟之前

00:21:44.505 --> 00:21:46.840 align:middle
和动作传感器检测到动作

00:21:47.841 --> 00:21:50.844 align:middle
如何把他们联系在一起
和产生我们的事件触发器呢?

00:21:51.512 --> 00:21:54.114 align:middle
第一件事是
你需要做的是生成一个复合提示

00:21:54.181 --> 00:21:56.617 align:middle
因为我们需要我们的所有两个条件

00:21:57.451 --> 00:21:59.753 align:middle
到此截止和进行评估

00:21:59.820 --> 00:22:02.789 align:middle
两个条件必须正确才能在的屏幕上执行

00:21:59.820 --> 00:22:02.789 align:middle
两个条件必须正确才能在的屏幕上执行

00:22:03.824 --> 00:22:06.960 align:middle
为此只需要使用NS复合提示和提示

00:22:07.027 --> 00:22:09.863 align:middle
和使用次一级提示
进行提示以及设置了两个次一次提示

00:22:09.930 --> 00:22:11.098 align:middle
如我们之前一样进行生成

00:22:12.032 --> 00:22:16.270 align:middle
接着生成一个事件触发器的目标
并且给以命名

00:22:16.336 --> 00:22:20.707 align:middle
到家之后和正对事件
能够激活这个触发器

00:22:20.774 --> 00:22:22.910 align:middle
只是设置了某一个元素的区间

00:22:22.976 --> 00:22:26.513 align:middle
就是大门的典型特征

00:22:26.580 --> 00:22:27.414 align:middle
对应到被锁住

00:22:29.516 --> 00:22:31.985 align:middle
最后我们只是需要

00:22:32.519 --> 00:22:34.788 align:middle
联系到到家预设的屏幕

00:22:34.855 --> 00:22:36.190 align:middle
到这个事件触发器

00:22:36.456 --> 00:22:40.928 align:middle
在我们家中使用我们方便的API
内置式动作设置设置到家一项

00:22:41.361 --> 00:22:45.232 align:middle
现在回到预设值的屏幕

00:22:45.299 --> 00:22:50.170 align:middle
对应于到家添加到事件触发器

00:22:50.571 --> 00:22:51.638 align:middle
它就这么简单

00:22:52.506 --> 00:22:56.043 align:middle
现在
我刚才谈到的这个例子进行一次演示

00:22:56.877 --> 00:22:57.911 align:middle
如何使用我们设置的

00:22:57.978 --> 00:23:00.647 align:middle
HomeKitAccessory
Simulator

00:22:57.978 --> 00:23:00.647 align:middle
HomeKitAccessory
Simulator

00:23:00.714 --> 00:23:03.250 align:middle
设置HomeKit目录举例的app

00:23:05.319 --> 00:23:07.221 align:middle
这早已在Swift中重新编写了程序

00:23:15.929 --> 00:23:16.763 align:middle
我们设置了

00:23:16.830 --> 00:23:19.333 align:middle
HomeKitAccessory
Simulator

00:23:19.733 --> 00:23:23.403 align:middle
这模拟了HomeKit曾经应用过
的辅助程序通过开发人员

00:23:23.937 --> 00:23:25.772 align:middle
开发了HomeKit的应用程序

00:23:25.973 --> 00:23:30.143 align:middle
以及到这里
我们设置了HomeKit例子app

00:23:30.744 --> 00:23:33.914 align:middle
就是你们所知道的
你们能够使用的app

00:23:33.981 --> 00:23:35.716 align:middle
进入所有的HomeKit API

00:23:36.083 --> 00:23:38.018 align:middle
我想向你们演示事件触发器

00:23:38.819 --> 00:23:44.157 align:middle
你们能够看出
我有一个门锁和动作传感器

00:23:44.591 --> 00:23:46.793 align:middle
以及在其后面安装有灯光的连接装置

00:23:46.860 --> 00:23:48.295 align:middle
安放在它的后面

00:23:48.962 --> 00:23:52.032 align:middle
以及我们在我们家项下加载了我的附件

00:23:57.104 --> 00:24:01.842 align:middle
因此让我们下翻页至app屏幕部分

00:23:57.104 --> 00:24:01.842 align:middle
因此让我们下翻页至app屏幕部分

00:24:01.909 --> 00:24:05.979 align:middle
以及我们在这个
app的两个预设屏幕中进行了设置

00:24:06.713 --> 00:24:09.750 align:middle
我设置了“再见 我的家”
对应着离开房屋

00:24:10.884 --> 00:24:12.452 align:middle
让我们看一下是什么样子呢

00:24:12.619 --> 00:24:16.156 align:middle
也就是将光线设置为黑色

00:24:16.223 --> 00:24:18.458 align:middle
所有灯光的电源被切断

00:24:19.226 --> 00:24:21.995 align:middle
我继续进行 点击取消键
因为不想 对此做出改变

00:24:22.062 --> 00:24:27.334 align:middle
让我们继续“您好房屋”与回家对应

00:24:27.534 --> 00:24:28.769 align:middle
让我们看一下它像什么

00:24:29.803 --> 00:24:35.242 align:middle
现在打开灯光 开启收录机灯光

00:24:35.309 --> 00:24:37.377 align:middle
为绿色 后打开厨房灯光为蓝色

00:24:39.246 --> 00:24:41.048 align:middle
让我们试图看一下两个屏幕

00:24:41.114 --> 00:24:42.716 align:middle
处于动作状态 观察所发生的情况

00:24:43.984 --> 00:24:45.919 align:middle
因此当我操作“再见 房屋”

00:24:46.220 --> 00:24:48.055 align:middle
关掉两种灯光

00:24:49.990 --> 00:24:53.060 align:middle
以及当我操作
“你好 房屋”这对应于

00:24:53.126 --> 00:24:54.528 align:middle
我回到家中 这样就会

00:24:54.595 --> 00:24:56.463 align:middle
在连接装置之后打开两种灯光

00:24:58.565 --> 00:25:00.434 align:middle
现在让我们模拟离开房屋的情况

00:24:58.565 --> 00:25:00.434 align:middle
现在让我们模拟离开房屋的情况

00:25:00.701 --> 00:25:02.603 align:middle
以及现在生成我们的事件触发器

00:25:05.973 --> 00:25:08.308 align:middle
我将继续往下进入app的触发器章节

00:25:09.209 --> 00:25:10.711 align:middle
和选择增加触发器

00:25:11.111 --> 00:25:12.946 align:middle
你将面临着三种选择

00:25:13.013 --> 00:25:16.283 align:middle
以我们自己为例子 大门被打开

00:25:16.483 --> 00:25:18.118 align:middle
这就是我们的触发器的源

00:25:18.852 --> 00:25:20.654 align:middle
对应于典型特征 因此我将继续向下

00:25:20.721 --> 00:25:22.022 align:middle
和选择典型特征

00:25:24.458 --> 00:25:26.326 align:middle
我现在给他命名

00:25:31.899 --> 00:25:33.767 align:middle
因此这就是我自身事件的触发器的命名

00:25:34.134 --> 00:25:35.135 align:middle
以及现在我们继续往下

00:25:35.202 --> 00:25:37.571 align:middle
和选择典型特征对应于

00:25:37.638 --> 00:25:39.273 align:middle
大门被锁住

00:25:39.339 --> 00:25:42.676 align:middle
继续往下进入
典型特征事件app典型特征事件

00:25:43.510 --> 00:25:44.645 align:middle
不好意思

00:25:44.745 --> 00:25:46.513 align:middle
因而增加典型特征项

00:25:46.580 --> 00:25:52.319 align:middle
以及现在
继续往下探讨大门被锁和选择继续操作

00:25:52.653 --> 00:25:54.755 align:middle
这将会对应着大门被打开

00:25:55.756 --> 00:25:58.725 align:middle
我将返回和敲击完成

00:26:00.394 --> 00:26:03.430 align:middle
因此 现在我已经完成大门被打开

00:26:03.497 --> 00:26:04.498 align:middle
作为我的触发器的源

00:26:05.199 --> 00:26:07.000 align:middle
紧接着 让我们添加我们的两个条件

00:26:07.901 --> 00:26:09.670 align:middle
为此 让我们继续往下进入条件部分

00:26:10.637 --> 00:26:13.941 align:middle
添加条件以及因为在下午6点钟前使用

00:26:14.007 --> 00:26:14.975 align:middle
意味着 这就是时间

00:26:19.012 --> 00:26:22.516 align:middle
进入时间部分 我们面临两种选择

00:26:22.583 --> 00:26:24.484 align:middle
添加基于时间的条件

00:26:24.551 --> 00:26:27.120 align:middle
当然其中一个 最为重要的事件日出

00:26:27.187 --> 00:26:30.858 align:middle
和日落 但是将采用下午6点钟为例

00:26:33.927 --> 00:26:35.596 align:middle
我想要选择之前时间

00:26:36.697 --> 00:26:38.298 align:middle
我将继续进行 点击保存键

00:26:38.999 --> 00:26:41.034 align:middle
现在我捕捉第一个条件

00:26:41.735 --> 00:26:43.003 align:middle
让我们完成第二个条件

00:26:43.070 --> 00:26:45.239 align:middle
它是动作传感器检测到动作

00:26:48.175 --> 00:26:49.576 align:middle
继续添加第二个条件

00:26:49.643 --> 00:26:51.245 align:middle
现在我将继续选择典型特征

00:26:51.311 --> 00:26:54.381 align:middle
因为这是一个附件 意味着我很需要

00:26:54.448 --> 00:26:57.017 align:middle
抓住典型特征 作为那个条件的源

00:27:00.454 --> 00:27:02.990 align:middle
选择条件 查找传感器

00:27:04.024 --> 00:27:07.127 align:middle
和设置将会被检测到的动作

00:27:09.062 --> 00:27:10.964 align:middle
我们返回和点击完成

00:27:12.065 --> 00:27:16.570 align:middle
打开这些我自己的事件触发器
给它命名给它提供我的事件源

00:27:17.371 --> 00:27:18.572 align:middle
规定我的两个条件

00:27:18.639 --> 00:27:19.706 align:middle
两个都得满足

00:27:20.274 --> 00:27:23.477 align:middle
我将他们两个联系在一起
我只是需要将回家的屏幕与此相联系

00:27:25.846 --> 00:27:27.414 align:middle
让我们继续往下进入屏幕部分

00:27:27.814 --> 00:27:29.449 align:middle
之时选择“你好 房屋”

00:27:31.585 --> 00:27:33.320 align:middle
继续 点击完成

00:27:33.453 --> 00:27:35.622 align:middle
现在保存整个事件触发器

00:27:37.090 --> 00:27:38.959 align:middle
观察处于动作状态中的事件触发器

00:27:39.893 --> 00:27:41.228 align:middle
为此 首先我们将要继续往下

00:27:41.295 --> 00:27:43.397 align:middle
和打开我的大门
和可以观察一下所发生的情况

00:27:46.133 --> 00:27:48.702 align:middle
这里我有一个想法 显示大门的状态

00:27:48.769 --> 00:27:50.504 align:middle
及动作传感器 是更为容易的

00:27:50.571 --> 00:27:52.206 align:middle
看到连接设备的后面所发生的事情

00:27:53.874 --> 00:27:55.642 align:middle
如果点击不安全 它将对应于

00:27:55.709 --> 00:27:57.077 align:middle
打开大门 啥事都没发生

00:27:57.144 --> 00:27:58.212 align:middle
那为什么会是那样呢？

00:27:59.313 --> 00:28:02.249 align:middle
大门打开 以便引起事件被激活

00:27:59.313 --> 00:28:02.249 align:middle
大门打开 以便引起事件被激活

00:28:03.350 --> 00:28:06.119 align:middle
时间设置在下午6点钟之前
因此我的条件之一会得到满足

00:28:06.320 --> 00:28:09.623 align:middle
但是第二个条件得不到满足
因为你们能够看得到

00:28:10.023 --> 00:28:11.592 align:middle
动作检测被设置为：无需监测

00:28:14.595 --> 00:28:15.796 align:middle
所以这正如希望的那样工作

00:28:15.863 --> 00:28:18.031 align:middle
我希望本屏幕指令不会被执行

00:28:18.332 --> 00:28:21.301 align:middle
现在让我们继续往下
接近大门以及设置动作

00:28:21.869 --> 00:28:23.604 align:middle
开始检测和观察什么情况发生

00:28:24.938 --> 00:28:27.341 align:middle
我将继续往前和打开大门

00:28:28.342 --> 00:28:29.309 align:middle
你可以进门啦

00:28:30.143 --> 00:28:33.514 align:middle
这样就可以打开开关
开启照明以及执行我到家的屏幕

00:28:34.014 --> 00:28:34.948 align:middle
这样不是很酷吗?

00:28:35.015 --> 00:28:38.952 align:middle
这是一个可怕的特征
但是我每天都得从事这种工作

00:28:45.425 --> 00:28:49.096 align:middle
但这项工作真正令人激动的是

00:28:49.630 --> 00:28:51.832 align:middle
当我看到那个灯一直亮着时
它给你的正是

00:28:51.965 --> 00:28:54.368 align:middle
你知道那种幸福的感觉

00:28:57.871 --> 00:29:01.708 align:middle
对于你们
这些使用过配件模拟器的人来说

00:28:57.871 --> 00:29:01.708 align:middle
对于你们
这些使用过配件模拟器的人来说

00:29:03.710 --> 00:29:05.312 align:middle
你看到这里有一个运动传感器

00:29:05.412 --> 00:29:07.414 align:middle
这在iOS 9中是新的功能

00:29:08.048 --> 00:29:10.784 align:middle
我们增加了新的配件类型

00:29:11.585 --> 00:29:14.888 align:middle
要了解这个新配件以及为配件类型

00:29:14.955 --> 00:29:17.991 align:middle
增加的新功能
我想有请Naveen来为我们作介绍

00:29:38.212 --> 00:29:42.216 align:middle
谢谢 大家下午好

00:29:42.416 --> 00:29:44.685 align:middle
我是Naveen
Kommareddi 我来介绍

00:29:45.252 --> 00:29:48.989 align:middle
有关HomeKit
配件在iOS 9中的更多功能

00:29:49.590 --> 00:29:52.759 align:middle
首先介绍蓝牙低功耗

00:29:53.727 --> 00:29:59.132 align:middle
HomeKit配件和
新配件类型的远程访问 新功能

00:29:59.733 --> 00:30:02.202 align:middle
以及增强功能

00:29:59.733 --> 00:30:02.202 align:middle
以及增强功能

00:30:03.070 --> 00:30:05.839 align:middle
让我们先看一下如何实现远程访问

00:30:06.940 --> 00:30:11.345 align:middle
通过远程访问
你可以 控制你的配件

00:30:11.411 --> 00:30:12.746 align:middle
即便你离开了你的房子

00:30:14.047 --> 00:30:16.416 align:middle
好 让我们举一个例子

00:30:16.483 --> 00:30:18.318 align:middle
房子里
恒温器安装有HomeKit配件

00:30:18.819 --> 00:30:20.554 align:middle
你可以安全地连接它

00:30:21.922 --> 00:30:24.224 align:middle
但如果你离开了你的房子怎么办？

00:30:24.625 --> 00:30:26.460 align:middle
你如何控制这个恒温器？

00:30:26.527 --> 00:30:28.562 align:middle
假设你准备回家了
但你如何在回家之前

00:30:28.629 --> 00:30:30.464 align:middle
就把温度设置好呢？

00:30:31.031 --> 00:30:32.232 align:middle
你怎样才能安全地连接呢？

00:30:33.300 --> 00:30:35.435 align:middle
没错 iOS 8支持远程访问

00:30:36.036 --> 00:30:39.473 align:middle
只要有一台第三代的苹果电视就可以

00:30:40.140 --> 00:30:43.677 align:middle
所有你需要做的
就是使用同一个苹果ID进行登录

00:30:43.877 --> 00:30:46.613 align:middle
即你在iOS设备上使用的ID

00:30:46.914 --> 00:30:51.218 align:middle
而且你必须能安全地访问你的配件

00:30:52.452 --> 00:30:55.622 align:middle
现在这很不错
但如果你没有苹果电视怎么办？

00:30:56.356 --> 00:31:00.327 align:middle
因为我们知道并不是每一个
我们的客户都可能有一台苹果电视

00:30:56.356 --> 00:31:00.327 align:middle
因为我们知道并不是每一个
我们的客户都可能有一台苹果电视

00:31:05.165 --> 00:31:09.469 align:middle
所以我很高兴地宣布在iOS 9中

00:31:10.437 --> 00:31:13.273 align:middle
我们支持HomeKit配件协议

00:31:13.340 --> 00:31:14.942 align:middle
HAP和iCloud

00:31:20.047 --> 00:31:20.948 align:middle
谢谢大家

00:31:21.548 --> 00:31:23.884 align:middle
是的 这真令人兴奋不已
这意味着

00:31:24.751 --> 00:31:27.521 align:middle
你现在可以控制你的配件

00:31:27.588 --> 00:31:30.157 align:middle
而且无论你在什么地方
你都可以从它们那里得到通知

00:31:30.524 --> 00:31:32.226 align:middle
即使你没有苹果电视

00:31:33.327 --> 00:31:35.095 align:middle
让我们暂停一下
想想这到底意味着什么

00:31:35.829 --> 00:31:37.464 align:middle
对于配件制造商

00:31:38.131 --> 00:31:43.403 align:middle
他们想为他们的
配件提供安全的远程访问功能

00:31:43.704 --> 00:31:45.772 align:middle
你知道 这是一个很难解决的问题

00:31:47.040 --> 00:31:51.144 align:middle
我们构建并配置了
一个专门的iCloud服务

00:31:51.545 --> 00:31:55.582 align:middle
以安全地在iOS设备
和配件之间传递HAP消息

00:31:55.983 --> 00:31:58.952 align:middle
我们按比例构建了基础设施

00:31:59.019 --> 00:32:03.056 align:middle
通过运行
服务来处理数以亿计的HAP消息

00:31:59.019 --> 00:32:03.056 align:middle
通过运行
服务来处理数以亿计的HAP消息

00:32:05.459 --> 00:32:08.228 align:middle
我们想的是：怎样才能做得更好？

00:32:09.763 --> 00:32:13.867 align:middle
因此要使用这种服务 配件制造商

00:32:13.934 --> 00:32:18.071 align:middle
以及我们所有的
客户现在都可以免费地得到它

00:32:22.276 --> 00:32:23.377 align:middle
好的 非常感谢

00:32:25.579 --> 00:32:28.549 align:middle
但最重要的是 私密性和安全性

00:32:28.982 --> 00:32:33.787 align:middle
即iOS设备和配件之间端至端连接

00:32:34.221 --> 00:32:39.426 align:middle
必须拥有安全的HAP
而且隐私得到保证

00:32:39.860 --> 00:32:43.931 align:middle
即使是苹果公司也无法看到通信内容

00:32:44.631 --> 00:32:46.200 align:middle
这是非常重要的

00:32:48.468 --> 00:32:52.539 align:middle
现在随着
HAP支持iCloud和苹果电视

00:32:52.739 --> 00:32:55.709 align:middle
我们的客户
现在可以更方便地随时访问

00:32:56.009 --> 00:32:57.010 align:middle
他们的配件

00:32:58.612 --> 00:33:02.683 align:middle
远程访问就讲到这儿
下面我接着讲蓝牙低功耗配件

00:32:58.612 --> 00:33:02.683 align:middle
远程访问就讲到这儿
下面我接着讲蓝牙低功耗配件

00:33:04.985 --> 00:33:07.754 align:middle
我们正在与多个合作伙伴一起合作

00:33:07.855 --> 00:33:10.357 align:middle
以研发更多安装有HomeKit的

00:33:10.591 --> 00:33:11.658 align:middle
低功耗蓝牙配件

00:33:12.593 --> 00:33:15.028 align:middle
让我们举一个蓝牙门锁的例子

00:33:16.530 --> 00:33:21.969 align:middle
假设处在这个
蓝牙低功耗配件的接收范围之内

00:33:22.035 --> 00:33:24.104 align:middle
比方说一个门锁
在20至30英尺范围之内

00:33:24.404 --> 00:33:27.374 align:middle
你可以安全地连接和控制它

00:33:29.009 --> 00:33:30.644 align:middle
如果你的距离很远

00:33:30.911 --> 00:33:33.180 align:middle
比如在你的房子
或后院的某个角落怎么办？

00:33:33.714 --> 00:33:36.683 align:middle
你将如何安全地
连接到这个配件并控制它？

00:33:38.318 --> 00:33:43.590 align:middle
要是有种装置或功能
把这两个端点连接在一起不是非常棒？

00:33:44.558 --> 00:33:47.461 align:middle
在iOS 9中
你完全可以做得到这一点

00:33:47.528 --> 00:33:49.263 align:middle
即通过HAP安全隧道技术

00:33:51.198 --> 00:33:55.769 align:middle
HAP安全隧道技术
可以使中间设备连接至

00:33:56.904 --> 00:34:02.376 align:middle
蓝牙低功耗配件并将其公开为

00:33:56.904 --> 00:34:02.376 align:middle
蓝牙低功耗配件并将其公开为

00:34:02.442 --> 00:34:08.982 align:middle
通过Wi-Fi连接iOS设备神器

00:34:09.850 --> 00:34:13.420 align:middle
有了一种HomeKit配件的设备

00:34:14.454 --> 00:34:19.193 align:middle
它采用HAP安全隧道
技术为你提供范围扩展功能

00:34:22.062 --> 00:34:25.766 align:middle
而这个范围扩展装置更强的功能是

00:34:25.831 --> 00:34:28.835 align:middle
还能够通过远程访问连接到蓝牙配件

00:34:28.902 --> 00:34:30.070 align:middle
以及任何其它的蓝牙配件

00:34:30.137 --> 00:34:31.672 align:middle
只要它们都安装了HomeKit

00:34:32.572 --> 00:34:37.543 align:middle
这意味着你不仅可以连接你的配件

00:34:37.610 --> 00:34:39.012 align:middle
无论它们在你房子的什么地方

00:34:39.446 --> 00:34:42.549 align:middle
而且无论你是在家里还是外出
你都可以连接到它们

00:34:44.318 --> 00:34:46.620 align:middle
我们达到了保证隐私和安全的目的

00:34:47.487 --> 00:34:48.822 align:middle
通过中间设备实现端到端连接

00:34:48.889 --> 00:34:51.891 align:middle
HAP也是安全的

00:34:52.793 --> 00:34:54.161 align:middle
而且隐私得到了维护

00:34:54.862 --> 00:34:56.897 align:middle
因为这个中间设备
也就是范围扩展装置

00:34:57.364 --> 00:34:59.800 align:middle
无法看到通信内容

00:35:01.902 --> 00:35:03.270 align:middle
我们并没有就此止步

00:35:03.437 --> 00:35:05.939 align:middle
我们加入了更多的增强功能

00:35:06.406 --> 00:35:08.308 align:middle
首先介绍一下通知功能

00:35:10.544 --> 00:35:13.213 align:middle
你的蓝牙低功耗配件现在完全支持

00:35:13.313 --> 00:35:14.615 align:middle
通知功能

00:35:15.649 --> 00:35:17.251 align:middle
无论它们在什么连接状态下

00:35:17.918 --> 00:35:19.820 align:middle
因此无论是断开或连接

00:35:19.887 --> 00:35:23.490 align:middle
它们都可以发送
HAP通知到你的iOS设备上

00:35:23.957 --> 00:35:25.158 align:middle
这真的很有用

00:35:26.126 --> 00:35:28.629 align:middle
我们还增加了对元数据的支持

00:35:29.429 --> 00:35:33.634 align:middle
自定义特征可以将自己完整地描述

00:35:34.134 --> 00:35:35.903 align:middle
到HomeKit应用程序上

00:35:37.704 --> 00:35:40.707 align:middle
我们增加了对多种传输的支持

00:35:41.575 --> 00:35:45.379 align:middle
有了这个功能
你的HomeKit配件现在可以

00:35:45.846 --> 00:35:50.083 align:middle
通过IP或蓝牙低功耗配件同时工作

00:35:50.717 --> 00:35:53.787 align:middle
而且iOS设备将能够识别出

00:35:54.087 --> 00:35:55.722 align:middle
这是同一个配件

00:35:55.789 --> 00:35:59.626 align:middle
不论这个配件是
采用何种传输与iOS设备进行通信

00:36:00.794 --> 00:36:02.196 align:middle
这真是一个引人关注的功能

00:36:05.098 --> 00:36:08.702 align:middle
让我们继续介绍最后一个话题

00:36:09.269 --> 00:36:11.071 align:middle
也就是配件类型

00:36:11.972 --> 00:36:16.643 align:middle
在去年的iOS 8中
我们增加了支持多种配件的功能

00:36:17.411 --> 00:36:21.014 align:middle
这在你的房子里最常见
比如你的灯、

00:36:21.081 --> 00:36:24.251 align:middle
风扇、开关、插头、车库门等等

00:36:25.586 --> 00:36:27.187 align:middle
现在增加对配件类型的原生支持

00:36:27.254 --> 00:36:30.891 align:middle
这在iOS中是一个渐进的过程

00:36:31.692 --> 00:36:34.628 align:middle
而且在iOS 9中
我们增加了支持更多的设备

00:36:35.162 --> 00:36:41.168 align:middle
就可以在你的房子里连接更多的配件

00:36:44.238 --> 00:36:46.139 align:middle
我们以窗帘为例

00:36:46.206 --> 00:36:52.846 align:middle
你现在可以使用iOS控制
遮阳篷、百叶窗以及电动门窗

00:36:54.414 --> 00:36:56.550 align:middle
报警系统也是一个新的配件类别

00:36:56.817 --> 00:36:59.353 align:middle
对于这种类型的配件
有多家制造商...

00:36:59.820 --> 00:37:02.756 align:middle
包括报警系统和
安全系统供应商都要求iOS能提供

00:36:59.820 --> 00:37:02.756 align:middle
包括报警系统和
安全系统供应商都要求iOS能提供

00:37:02.890 --> 00:37:04.525 align:middle
原生支持 我们满足了他们的要求

00:37:04.925 --> 00:37:08.795 align:middle
但我们也发现
报警系统虽然确实可以做到非常复杂

00:37:09.162 --> 00:37:13.100 align:middle
带有很多功能
但我们所做的只是选取关键的

00:37:13.166 --> 00:37:16.336 align:middle
并在报警系统服务中最常用的功能

00:37:16.803 --> 00:37:18.672 align:middle
现在 作为配件制造商

00:37:19.473 --> 00:37:23.544 align:middle
可以通过自定义特征增加更多的功能
这当然没问题

00:37:25.279 --> 00:37:28.949 align:middle
由于报警系统通常与传感器相连接

00:37:29.316 --> 00:37:32.186 align:middle
增加了支持多种传感器类型的功能：

00:37:32.920 --> 00:37:36.023 align:middle
运动、空气质量、烟雾是其中几种

00:37:37.524 --> 00:37:38.892 align:middle
但最后同样重要的是...

00:37:38.959 --> 00:37:40.961 align:middle
这是一种
让我感到非常兴奋的配件类型...

00:37:41.528 --> 00:37:43.030 align:middle
可编程开关

00:37:44.264 --> 00:37:47.835 align:middle
可编程开关是HomeKit设备

00:37:48.168 --> 00:37:50.804 align:middle
其主要目的是生成事件

00:37:52.639 --> 00:37:56.677 align:middle
iOS使得这个配件引人注目

00:37:56.977 --> 00:37:58.111 align:middle
为了更好地了解这个配件

00:37:58.245 --> 00:37:59.813 align:middle
让我给大家举一个例子

00:38:01.615 --> 00:38:04.484 align:middle
假设现在到了睡觉时间
你躺在你的床上

00:38:05.385 --> 00:38:07.921 align:middle
你关闭了你的电子设备
它们正在房子里的某个地方充电

00:38:08.856 --> 00:38:11.425 align:middle
但你不知道你的房子是否是安全的

00:38:11.892 --> 00:38:14.294 align:middle
你的灯在房子的
远处角落里可能已经关闭了电源

00:38:15.362 --> 00:38:16.663 align:middle
但你担心没有关灯

00:38:16.997 --> 00:38:19.433 align:middle
你有了这个可编程开关

00:38:20.367 --> 00:38:22.369 align:middle
整个开关只有一个简单的按钮

00:38:22.803 --> 00:38:24.104 align:middle
现在你按下这个按钮

00:38:24.872 --> 00:38:26.106 align:middle
它就会生成一个事件

00:38:26.540 --> 00:38:29.776 align:middle
大家现在都知道
我们的iOS 9支持事件触发

00:38:30.711 --> 00:38:36.683 align:middle
因此我们的用户
可以将这个事件映射到一个触发器

00:38:37.684 --> 00:38:41.421 align:middle
以执行这个神奇的预定义的晚安模式

00:38:42.623 --> 00:38:44.925 align:middle
现在有了iOS
无论开关在哪里 无论手机在哪里

00:38:45.125 --> 00:38:47.594 align:middle
它都会连接到这个触发器
并魔法般地执行所有的事件

00:38:48.061 --> 00:38:49.496 align:middle
功能强大但操作简单

00:38:51.398 --> 00:38:56.069 align:middle
可编程开关和所有的其他新配件类型

00:38:56.336 --> 00:38:58.405 align:middle
正如Anush所说都可以在

00:38:58.472 --> 00:39:01.108 align:middle
我们的HomeKit
配件模拟器升级版本中用得到

00:38:58.472 --> 00:39:01.108 align:middle
我们的HomeKit
配件模拟器升级版本中用得到

00:39:02.676 --> 00:39:05.012 align:middle
作为开发者 你们可以开发

00:39:05.145 --> 00:39:06.713 align:middle
支持这些新配件类型的app

00:39:07.915 --> 00:39:09.816 align:middle
HomeKit配件模拟器是

00:39:09.950 --> 00:39:12.352 align:middle
你们作为开发者和配件制造商

00:39:12.920 --> 00:39:14.821 align:middle
可使用的多个工具中的一个

00:39:15.956 --> 00:39:18.292 align:middle
我们还有HomeKit配件测试仪

00:39:18.692 --> 00:39:22.663 align:middle
它也可以通过升级后而用于支持

00:39:23.163 --> 00:39:24.631 align:middle
我们今天所讲的许多新功能

00:39:25.432 --> 00:39:28.669 align:middle
现在让我花一分钟时间谈谈
HomeKit配件测试仪也叫HAT

00:39:29.536 --> 00:39:31.972 align:middle
我们强烈要求你们 作为配件制造商

00:39:32.439 --> 00:39:36.510 align:middle
你们需要在整个
开发周期里以独占的方式使用HAT

00:39:36.910 --> 00:39:40.881 align:middle
因为通过这种方式
你将确保你的配件兼容于

00:39:41.315 --> 00:39:46.587 align:middle
HomeKit规范并且确保

00:39:46.653 --> 00:39:50.624 align:middle
你的配件可以
在过去和未来的iOS版本上工作

00:39:51.258 --> 00:39:53.560 align:middle
HAT还可提供调试信息

00:39:54.061 --> 00:39:56.763 align:middle
这在使用iOS时可能无法提供给你

00:39:57.431 --> 00:40:01.201 align:middle
但最重要的原因是
我们可以在苹果手机上使用HAT

00:39:57.431 --> 00:40:01.201 align:middle
但最重要的原因是
我们可以在苹果手机上使用HAT

00:40:01.368 --> 00:40:03.003 align:middle
来验证的你的配件

00:40:04.838 --> 00:40:07.274 align:middle
HAT也是

00:40:07.674 --> 00:40:12.312 align:middle
专门提供给
苹果MFi计划成员的工具之一

00:40:13.280 --> 00:40:15.449 align:middle
如果你已经是这个计划的一名会员

00:40:16.049 --> 00:40:19.353 align:middle
能够在将来通过MFi门户网站

00:40:19.620 --> 00:40:21.955 align:middle
得到更新的规范和工具

00:40:23.323 --> 00:40:25.359 align:middle
如果你不是MFi计划的会员

00:40:26.293 --> 00:40:29.830 align:middle
在制造一个HomeKit配件
那么你需要通过注册成为一名会员

00:40:30.063 --> 00:40:33.200 align:middle
这样你就能够下载规范和工具

00:40:33.700 --> 00:40:35.469 align:middle
在这里我们为你提供了一个链接

00:40:37.938 --> 00:40:42.109 align:middle
总地来说
今天你们学到了许多新的功能

00:40:42.176 --> 00:40:45.812 align:middle
比如HomeKit、
苹果手表、事件触发器、

00:40:46.046 --> 00:40:48.882 align:middle
远程访问新方法 以及

00:40:48.949 --> 00:40:50.551 align:middle
蓝牙低功耗配件的几个新功能

00:40:51.385 --> 00:40:54.121 align:middle
我们的苹果员工
对所有这些功能真地感到很兴奋

00:40:54.388 --> 00:40:57.391 align:middle
我们迫不及待地想
看看你们将如何利用这些功能

00:40:58.458 --> 00:41:01.762 align:middle
如果你们还有其他问题
有关HomeKit的任何问题

00:40:58.458 --> 00:41:01.762 align:middle
如果你们还有其他问题
有关HomeKit的任何问题

00:41:02.663 --> 00:41:04.531 align:middle
你们可以从我们这里得到更多的信息

00:41:05.966 --> 00:41:07.868 align:middle
非常感谢大家的聆听
