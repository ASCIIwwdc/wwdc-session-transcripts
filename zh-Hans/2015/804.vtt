WEBVTT

00:00:28.495 --> 00:00:29.329 align:middle
嗨 大家好

00:00:29.997 --> 00:00:31.665 align:middle
我叫
安东尼奥安东尼奥·卡瑞多尼

00:00:31.865 --> 00:00:35.402 align:middle
我是San Francisco字体
设计小组的一名成员

00:00:35.502 --> 00:00:37.971 align:middle
很荣幸在此为
大家介绍这种字体

00:00:39.039 --> 00:00:42.543 align:middle
在今天的介绍中我们将会了解到
San Francisco字体

00:00:43.744 --> 00:00:46.380 align:middle
它们的设计过程及这些字体对我们
的平台具有哪些意义

00:00:47.047 --> 00:00:48.916 align:middle
我们将会看到若干新功能

00:00:49.183 --> 00:00:52.152 align:middle
并学习如何利用这些功能让你
所设计的app应用变得更出色

00:00:52.386 --> 00:00:54.688 align:middle
这种变化将体现在
代码和设计两个层面上

00:00:56.056 --> 00:00:59.960 align:middle
最后我们会讲到在app应用中

00:01:00.494 --> 00:01:04.697 align:middle
加入这些新字体时
可能会遇到的 API 隐患

00:01:05.799 --> 00:01:06.834 align:middle
现在开始进入正题

00:01:09.369 --> 00:01:10.504 align:middle
文字随处可见

00:01:12.806 --> 00:01:17.311 align:middle
而文字存在的前提则是字体

00:01:19.346 --> 00:01:20.981 align:middle
其实字体本身也具有表现力

00:01:23.517 --> 00:01:29.356 align:middle
好字体能让你的app应用
内容和用户界面更加美观

00:01:29.823 --> 00:01:31.358 align:middle
它们看起来会更顺眼

00:01:34.228 --> 00:01:36.597 align:middle
你无时无刻不在阅读字体

00:01:37.464 --> 00:01:41.502 align:middle
在不同的屏幕上
在不同的设备上

00:01:42.503 --> 00:01:43.804 align:middle
阅读不同磅值的字体

00:01:44.538 --> 00:01:46.707 align:middle
另外你在阅读时的视觉环境也不尽相同

00:01:46.773 --> 00:01:49.676 align:middle
有时是明亮环境
有时是远距离环境

00:01:50.010 --> 00:01:51.912 align:middle
还有各种屏幕尺寸和分辨率

00:01:52.613 --> 00:01:58.585 align:middle
因此我们有必要改善平台上的字体样式

00:01:59.152 --> 00:02:03.390 align:middle
于是全新字体
San Francisco便应运而生了

00:01:59.152 --> 00:02:03.390 align:middle
于是全新字体
San Francisco便应运而生了

00:02:05.392 --> 00:02:11.999 align:middle
San Francisco是加州Apple
公司设计的一款全新字体样式

00:02:13.367 --> 00:02:17.104 align:middle
外观风格简单而优美

00:02:18.539 --> 00:02:23.477 align:middle
San Francisco以其连续
流畅的字形表现力和易读性

00:02:24.077 --> 00:02:25.846 align:middle
实现了整个平台的高度统一

00:02:26.747 --> 00:02:28.615 align:middle
这是它的外观

00:02:30.284 --> 00:02:33.787 align:middle
San Francisco
在字体样式中属于grotesque

00:02:33.854 --> 00:02:35.956 align:middle
Grotesque也称为
sans serif

00:02:37.224 --> 00:02:39.626 align:middle
请看字体分类图

00:02:40.427 --> 00:02:43.063 align:middle
San Francisco设计
包含两个子类别

00:02:44.331 --> 00:02:47.367 align:middle
其中SF用于iOS和OS X

00:02:47.835 --> 00:02:49.770 align:middle
SF Compact
用于苹果的手表系统

00:02:51.371 --> 00:02:56.443 align:middle
这两个类别又各自包含两种字体
“文字”类和“显示”类

00:02:56.510 --> 00:02:57.978 align:middle
两者都属于视觉尺寸

00:02:58.045 --> 00:02:59.813 align:middle
稍后我会具体介绍

00:03:00.881 --> 00:03:04.251 align:middle
其中文字类字体共有6种字重

00:03:04.718 --> 00:03:07.588 align:middle
显示类字体共有9种字重

00:03:08.422 --> 00:03:12.593 align:middle
刚才我说过
SF用于iOS和OS X

00:03:13.327 --> 00:03:15.963 align:middle
而SF Compact是
用在苹果的手表系统

00:03:18.031 --> 00:03:20.200 align:middle
现在我们了解一下两者的不同之处

00:03:22.102 --> 00:03:26.406 align:middle
SF和SF Compact
在设计上采用了孪生理念

00:03:26.507 --> 00:03:28.141 align:middle
也就是说它们相似而不相同

00:03:28.809 --> 00:03:32.613 align:middle
二者的主要区别在于
对圆形部分的处理方式

00:03:34.548 --> 00:03:38.819 align:middle
SF字体是完全圆滑的
SF Compact则略带扁平效果

00:03:39.586 --> 00:03:41.555 align:middle
这样的设计能达到双重目的

00:03:42.022 --> 00:03:46.593 align:middle
前者实现了风格化
而更重要的是后者具备了功能性

00:03:46.994 --> 00:03:52.499 align:middle
这些扁平的侧面提供了更大的字母间距
在文字较小时更容易阅读

00:03:53.300 --> 00:04:00.174 align:middle
当这个看似不起眼的功能
在文字中一遍又一遍地重复时

00:03:53.300 --> 00:04:00.174 align:middle
当这个看似不起眼的功能
在文字中一遍又一遍地重复时

00:04:00.407 --> 00:04:02.042 align:middle
就能带来明显的效果

00:04:03.777 --> 00:04:06.380 align:middle
现在我们来看比例问题

00:04:06.446 --> 00:04:09.183 align:middle
SF和SF Compact
的比例区别并不明显

00:04:09.616 --> 00:04:11.285 align:middle
所以我就以SF为例解释一下

00:04:12.452 --> 00:04:16.322 align:middle
我会提到一些字体方面的专业的词汇
大家可能对这些词汇已经很熟悉了

00:04:17.257 --> 00:04:21.528 align:middle
拉丁文的设计以基准线作为标准

00:04:22.996 --> 00:04:26.934 align:middle
小写字母的对齐
标准叫做x height

00:04:27.000 --> 00:04:28.802 align:middle
即小写x的高度

00:04:29.703 --> 00:04:31.672 align:middle
大写字母以大写X作为对齐标准

00:04:33.140 --> 00:04:39.680 align:middle
此外还有一个概念叫“下伸部分”
它是基准线以下小写字母的对齐位置

00:04:42.316 --> 00:04:44.985 align:middle
在比例问题上

00:04:45.252 --> 00:04:51.458 align:middle
SF字族可以兼容我们之前
发布的所有UI字体量度

00:04:51.792 --> 00:04:55.796 align:middle
因此你的app应用不会出现
明显的垂直回流问题

00:04:55.863 --> 00:04:58.365 align:middle
实际上垂直回流问题根本不会出现

00:04:59.700 --> 00:05:04.271 align:middle
在这些所兼容的垂直量度中
我们进行了比例上的细微改动

00:04:59.700 --> 00:05:04.271 align:middle
在这些所兼容的垂直量度中
我们进行了比例上的细微改动

00:05:04.738 --> 00:05:08.141 align:middle
比方说我们把大写字母变得短了一些

00:05:08.775 --> 00:05:12.045 align:middle
这样做是为了
改善大小写混合设置的显示效果

00:05:13.714 --> 00:05:17.351 align:middle
与此同时我们还把
x height的高度增加了一些

00:05:17.718 --> 00:05:20.187 align:middle
从而使小写字母和大写字母更接近

00:05:20.921 --> 00:05:22.723 align:middle
这样不但大小写混合设置的效果更好

00:05:22.823 --> 00:05:24.525 align:middle
还能让小写字母看起来更大一些

00:05:24.591 --> 00:05:28.562 align:middle
这就是大家平时看到的
更加清晰易读的效果

00:05:29.563 --> 00:05:32.065 align:middle
最后一点
数字是与大写字母对齐的

00:05:36.803 --> 00:05:41.508 align:middle
SF属于一种泛欧洲字体
它包含了拉丁文

00:05:41.975 --> 00:05:47.347 align:middle
而拉丁文又包含着
波兰语 冰岛语 匈牙利文语

00:05:47.681 --> 00:05:50.951 align:middle
甚至像越南语那样
需要叠加音的语言

00:05:51.718 --> 00:05:57.524 align:middle
另外它还包含俄语里所使用的
西里尔文以及希腊文

00:06:01.094 --> 00:06:02.596 align:middle
这就是San Francisco

00:06:03.063 --> 00:06:07.201 align:middle
这就是我们在加州Apple
公司设计的一款全新字体

00:06:10.204 --> 00:06:13.240 align:middle
iOS和OS X采用的字体类别
叫做 SF

00:06:14.274 --> 00:06:16.577 align:middle
苹果手表系统采用的是
SF Compact

00:06:18.312 --> 00:06:21.281 align:middle
这两种字体类别有着不同的比例
对不起 是相似的比例

00:06:22.249 --> 00:06:23.650 align:middle
但它们在设计上却有所不同

00:06:24.351 --> 00:06:29.556 align:middle
今天大家就可以下载到这两种字体

00:06:30.157 --> 00:06:31.158 align:middle
其实现在就可以

00:06:31.825 --> 00:06:37.297 align:middle
在Apple网站的字体页面上
developer.apple.com/fonts

00:06:38.232 --> 00:06:39.900 align:middle
请注意
这些字体目前还只是预览版

00:06:40.901 --> 00:06:43.670 align:middle
等到OS系统最终确定
以后才会发布最终版本

00:06:46.340 --> 00:06:47.608 align:middle
在继续讲解

00:06:48.809 --> 00:06:53.680 align:middle
San Francisco字体
的优秀创意 “视觉尺寸”之前

00:06:54.181 --> 00:06:56.750 align:middle
我想先为大家介绍
一些设计领域的基本原理

00:06:59.720 --> 00:07:02.556 align:middle
视觉感知基本上属于错觉

00:06:59.720 --> 00:07:02.556 align:middle
视觉感知基本上属于错觉

00:07:03.457 --> 00:07:04.992 align:middle
在理解这句话的时候

00:07:05.592 --> 00:07:08.262 align:middle
请设想在你眼前有两个形状
一个方形和一个圆形

00:07:09.029 --> 00:07:13.433 align:middle
为了让两个形状看起来高度相等

00:07:15.068 --> 00:07:18.505 align:middle
需要把它们并列排放
上下准确对齐

00:07:19.139 --> 00:07:21.909 align:middle
但实际上
圆形看起来很短

00:07:22.743 --> 00:07:25.679 align:middle
为了弥补这一缺陷就要
使用一点迷惑性的手段

00:07:26.280 --> 00:07:29.750 align:middle
也就是说
要让圆形更大些

00:07:30.517 --> 00:07:33.554 align:middle
在字体领域里我们会说
用圆形“冲越”方形

00:07:35.489 --> 00:07:41.995 align:middle
换句话说 想让两个形状看起来相似
通常要让它们相异

00:07:43.030 --> 00:07:45.399 align:middle
这个原理不仅适用于形状本身

00:07:46.133 --> 00:07:49.069 align:middle
还适用于形状周围的空间

00:07:49.136 --> 00:07:51.071 align:middle
我用刻度标记的方式
让大家看得更清楚些

00:07:51.572 --> 00:07:57.711 align:middle
大家会看到
在屏幕中间插入文字时

00:07:58.212 --> 00:07:59.546 align:middle
文字的位置看起来会很低

00:08:00.380 --> 00:08:01.215 align:middle
正如刚才所讲到的

00:08:02.015 --> 00:08:04.885 align:middle
想要形状看起来相似
需要进行差异化处理

00:08:06.153 --> 00:08:09.156 align:middle
顺便普及一个小知识
你们知道这个字符是什么吗？

00:08:09.256 --> 00:08:10.390 align:middle
它叫什么？

00:08:11.191 --> 00:08:12.960 align:middle
英镑符号还是井号？

00:08:13.360 --> 00:08:16.296 align:middle
意大利语叫cancelletto
意思是“小门”

00:08:17.064 --> 00:08:18.966 align:middle
当然它属于数字符号

00:08:20.067 --> 00:08:25.672 align:middle
由四条线相交组成的数字符号

00:08:26.039 --> 00:08:27.574 align:middle
而这四条线的交汇处

00:08:28.475 --> 00:08:30.577 align:middle
中间的这部分区域
当字体尺寸较小的时候

00:08:30.644 --> 00:08:33.246 align:middle
该区域会变得很暗
甚至是一团黑

00:08:33.580 --> 00:08:35.883 align:middle
所以当字体较小时你很难看到它

00:08:36.616 --> 00:08:41.522 align:middle
这时还是需要调整一下

00:08:41.955 --> 00:08:47.461 align:middle
不必去动四条线的交汇处
只要让中间的方块变大一点

00:08:48.395 --> 00:08:52.733 align:middle
这就是San Francisco
字体的重磅值井字符

00:08:53.066 --> 00:08:55.569 align:middle
以上是我们在字体
设计中经常采用方法

00:08:58.038 --> 00:09:00.574 align:middle
这就是刚才所说的
视觉感知即与错觉相关

00:08:58.038 --> 00:09:00.574 align:middle
这就是刚才所说的
视觉感知即与错觉相关

00:09:01.575 --> 00:09:05.379 align:middle
明白了这个道理
我们再来讲视觉尺寸

00:09:06.547 --> 00:09:09.850 align:middle
在刚才看到的分类图中
它在这个分支上

00:09:12.052 --> 00:09:16.423 align:middle
假设有一小段文字
用两种不同的字体尺寸显示出来

00:09:16.823 --> 00:09:18.792 align:middle
顺便说一下
这个单词没有任何实际意义

00:09:19.092 --> 00:09:23.830 align:middle
它只是字体设计人员用来查看字体
及其组合样态

00:09:23.897 --> 00:09:25.699 align:middle
因为其中包含着一些扁形和圆形

00:09:26.567 --> 00:09:32.272 align:middle
当你看着它的时候你会发现
这段文字在小字号状态下清晰度不好

00:09:32.339 --> 00:09:35.375 align:middle
这是因为对于grotesque
这种字体样式

00:09:35.442 --> 00:09:37.778 align:middle
它的字母显示正常并且字母间距很小

00:09:38.512 --> 00:09:41.148 align:middle
如果我用模糊处理
来模拟低清晰度效果的话

00:09:41.448 --> 00:09:42.482 align:middle
较小的字体...

00:09:43.750 --> 00:09:46.587 align:middle
在较小的这部分字母
开始变得混淆不清了 对吗？

00:09:47.354 --> 00:09:50.691 align:middle
这种情况下
我们想要的效果应该是这样的

00:09:51.558 --> 00:09:54.695 align:middle
也就是说要微调一下
以便让小字体也能清晰显示

00:09:56.129 --> 00:09:59.266 align:middle
大家可能觉得我只不过是让它动了起来
并稍微增加了一些宽度

00:09:59.666 --> 00:10:03.136 align:middle
其实我是在变换字体
所呈现给你的整体印象

00:09:59.666 --> 00:10:03.136 align:middle
其实我是在变换字体
所呈现给你的整体印象

00:10:04.872 --> 00:10:10.310 align:middle
在解释“显示”和“文字”
这两种字体的区别之前

00:10:10.711 --> 00:10:14.081 align:middle
请记住
此处的“显示”并非指显示器屏幕

00:10:14.147 --> 00:10:16.550 align:middle
它在字形领域代表字体大小
而“文字”是指文本的大小

00:10:16.650 --> 00:10:20.320 align:middle
所以“显示”字体用于较大的字号
“文字”字体用于较小的字号

00:10:21.321 --> 00:10:24.157 align:middle
在解释两者区别之前
我首先介绍负空间的概念

00:10:24.525 --> 00:10:27.861 align:middle
负空间是指字母内侧 周围

00:10:28.929 --> 00:10:30.297 align:middle
和轮廓内部的空间

00:10:30.998 --> 00:10:35.035 align:middle
负空间是分辨形状
和阅读形状的关键之处

00:10:36.036 --> 00:10:37.971 align:middle
在刚才的示例下方区域中

00:10:39.039 --> 00:10:44.711 align:middle
对于文字来说 其周边空间的面积
几乎是字体显示面积的两倍

00:10:46.246 --> 00:10:50.684 align:middle
因此包括San Francisco
在内的grotesque字体样式

00:10:50.851 --> 00:10:51.818 align:middle
都面临着同一个问题

00:10:52.085 --> 00:10:54.922 align:middle
它们的形状在足够大时看起来确实漂亮

00:10:56.557 --> 00:10:59.393 align:middle
但在结构上却过于相似
所以很容易造成混淆

00:10:59.893 --> 00:11:01.128 align:middle
如果将两者叠加起来

00:10:59.893 --> 00:11:01.128 align:middle
如果将两者叠加起来

00:11:02.863 --> 00:11:06.133 align:middle
你会发现它们的整体形态是完全相同的

00:11:06.200 --> 00:11:09.837 align:middle
在顶部和底部都有弯曲部分

00:11:10.671 --> 00:11:14.174 align:middle
它们都含有两个这样的区域
我们称之为反向对称区

00:11:15.075 --> 00:11:18.312 align:middle
反向对称区的位置基本大小基本一致

00:11:19.179 --> 00:11:21.381 align:middle
另外在中间位置还有这样的半横区

00:11:22.449 --> 00:11:26.119 align:middle
半横区的形状实际上
是由这些圆圈所界定的

00:11:26.820 --> 00:11:29.756 align:middle
如果空气能够进入到字母里面的话
那么气流就是从这些圆圈进去的

00:11:30.958 --> 00:11:33.527 align:middle
在改变显示字体时

00:11:33.727 --> 00:11:37.331 align:middle
文字字体和显示字体
具体处理过程是这样的

00:11:37.531 --> 00:11:39.066 align:middle
我们举例说明

00:11:42.803 --> 00:11:44.304 align:middle
以小写字母a为例

00:11:44.471 --> 00:11:46.406 align:middle
其实要改变的是冲越部分

00:11:46.473 --> 00:11:48.876 align:middle
因为当字体尺寸较小时

00:11:48.942 --> 00:11:52.379 align:middle
我们要让圆边部分
能够从x height上突显出来

00:11:53.180 --> 00:11:54.982 align:middle
同时还要打开此处的圆圈

00:11:56.650 --> 00:11:59.253 align:middle
对小写g的底部区域
也采取同样的处理方式

00:12:02.256 --> 00:12:05.292 align:middle
小写s
也是打开这里的圆圈

00:12:06.927 --> 00:12:12.366 align:middle
处理字母r时
我们把它右上角的弯转部分加大

00:12:13.433 --> 00:12:16.737 align:middle
小写f和小写t也有类似的形状区域

00:12:16.803 --> 00:12:18.805 align:middle
因此处理方法相同
但这两个字母更大 更高一些

00:12:19.907 --> 00:12:21.275 align:middle
小写i就比较有趣了

00:12:21.341 --> 00:12:25.746 align:middle
因为当字号很小时
i头顶上的圆点看起来

00:12:25.812 --> 00:12:29.483 align:middle
好像和下半部分的竖线顶撞在一起

00:12:29.550 --> 00:12:32.486 align:middle
所以我们就把它调大 调高一些

00:12:34.054 --> 00:12:38.292 align:middle
SF和SF Compact
有两种截然不同的字族

00:12:38.492 --> 00:12:42.329 align:middle
分别叫做“显示”和“字体”
它们用于不同的字体磅值

00:12:42.729 --> 00:12:47.134 align:middle
系统能够在这两个字族之间自动转换
所以不需要用户自己选择

00:12:48.435 --> 00:12:50.137 align:middle
这就是视觉尺寸

00:12:52.072 --> 00:12:52.906 align:middle
谢谢

00:12:58.579 --> 00:13:03.383 align:middle
San Francisco
有两种视觉尺寸 文字和显示

00:12:58.579 --> 00:13:03.383 align:middle
San Francisco
有两种视觉尺寸 文字和显示

00:13:03.851 --> 00:13:05.919 align:middle
系统会在20磅时
自动切换文字和显示字体

00:13:06.486 --> 00:13:09.756 align:middle
这一点对平台的代码编写
不会产生任何影响

00:13:09.990 --> 00:13:13.193 align:middle
不过对于app设计而言
还是很有必要了解这一点

00:13:13.260 --> 00:13:17.064 align:middle
因为Photoshop Sketch
或其他类似的软件程序

00:13:17.130 --> 00:13:18.365 align:middle
不会自动执行字体切换

00:13:18.532 --> 00:13:20.701 align:middle
这种情况下
你就要自己更改字体

00:13:22.903 --> 00:13:26.473 align:middle
讲完了视觉尺寸

00:13:27.307 --> 00:13:31.178 align:middle
我想介绍一下和文字尺寸有关的
另一个概念 字间距

00:13:33.413 --> 00:13:37.784 align:middle
字间距在字母的负空间里起到调节作用

00:13:38.785 --> 00:13:42.523 align:middle
看屏幕上的动画演示 大家可能会认为
哦 原来是字符串的偶距变了

00:13:42.890 --> 00:13:46.827 align:middle
没错 基本上就是这样
字间距和字偶距的区别很小

00:13:47.728 --> 00:13:49.263 align:middle
字间距是

00:13:49.329 --> 00:13:55.235 align:middle
正向或反向调节所有字符

00:13:56.036 --> 00:14:00.574 align:middle
而字偶距只是调节两字母之间的距离
也就是相邻字母的距离

00:13:56.036 --> 00:14:00.574 align:middle
而字偶距只是调节两字母之间的距离
也就是相邻字母的距离

00:14:01.808 --> 00:14:03.343 align:middle
这就是两者的区别所在

00:14:04.711 --> 00:14:07.314 align:middle
字间距是普遍调整
字偶距是局部调整

00:14:11.185 --> 00:14:13.921 align:middle
San Francisco
的每种字体都内置一个字间距表

00:14:15.189 --> 00:14:21.495 align:middle
该字间距表带有具体的字符尺寸
并且定义了磅值和字间距值

00:14:22.329 --> 00:14:24.198 align:middle
就是这种效果 对吧？

00:14:24.264 --> 00:14:28.802 align:middle
它能让较小的文字更宽松
也能让较大的文字更紧凑

00:14:30.003 --> 00:14:32.840 align:middle
就像刚才我说的那样

00:14:32.906 --> 00:14:35.876 align:middle
若使用新San Francisco
字体进行编码 可以不用了解上述原理

00:14:35.943 --> 00:14:38.912 align:middle
如果使用Photoshop
绘制app应用的话

00:14:39.046 --> 00:14:41.014 align:middle
再次记住软件本身不会自动切换字体

00:14:43.483 --> 00:14:46.720 align:middle
这时就可以下载这样一份
带有系统字体的字间距表

00:14:47.387 --> 00:14:49.122 align:middle
下载地址和我刚才
给出的页面地址一样

00:14:52.059 --> 00:14:53.460 align:middle
以上是关于字间距的内容

00:14:56.163 --> 00:15:00.334 align:middle
接下来我要讲的是字重

00:14:56.163 --> 00:15:00.334 align:middle
接下来我要讲的是字重

00:15:04.671 --> 00:15:10.511 align:middle
字重这一概念用来描述
字母笔画的粗细程度

00:15:12.379 --> 00:15:16.016 align:middle
在San Francisco
和SF Compact字族里

00:15:16.083 --> 00:15:20.821 align:middle
两者的文字字体都有6种字重

00:15:21.355 --> 00:15:25.425 align:middle
另外再加上斜体
就构成了9种显示字体

00:15:25.893 --> 00:15:31.198 align:middle
大家可能会问
为什么显示字体字重比文字字体重更多

00:15:32.199 --> 00:15:36.870 align:middle
这是因为极粗字体
其实只是为了标题而设计的

00:15:37.571 --> 00:15:40.774 align:middle
所以在20磅以下使用
就没有多大意义可言了

00:15:43.110 --> 00:15:47.047 align:middle
有些字重是新增加到平台上的

00:15:47.114 --> 00:15:48.215 align:middle
以前几乎找不到它们

00:15:50.083 --> 00:15:53.554 align:middle
即便原有的字重也很难获取

00:15:53.921 --> 00:15:58.659 align:middle
现在我们提供了新的API
大家可以从中获取所有字重和系统字体

00:15:59.326 --> 00:16:01.228 align:middle
它们都包含在UIKit
和AppKit里

00:15:59.326 --> 00:16:01.228 align:middle
它们都包含在UIKit
和AppKit里

00:16:01.295 --> 00:16:05.232 align:middle
且已是systemFontOfSize
里面的一个新参数

00:16:08.001 --> 00:16:10.771 align:middle
这些是它们使用的引数

00:16:12.639 --> 00:16:16.710 align:middle
有了这些字重
接下来的问题的就是如何使用它们

00:16:16.910 --> 00:16:19.413 align:middle
我指的不是在编码方面
而是在设计方面

00:16:20.681 --> 00:16:23.884 align:middle
通过使用字重
可以实现三个主要目标

00:16:24.251 --> 00:16:25.485 align:middle
首先是差异化

00:16:25.552 --> 00:16:28.989 align:middle
你可以让一段文字产生差别
并制作层级效果

00:16:30.190 --> 00:16:31.925 align:middle
第二个目标是相似性

00:16:33.327 --> 00:16:35.395 align:middle
第三个是实现风格化效果

00:16:35.462 --> 00:16:37.698 align:middle
这样文字就具备了表现力

00:16:38.465 --> 00:16:39.433 align:middle
请看屏幕

00:16:41.802 --> 00:16:43.136 align:middle
假设有一段文字

00:16:43.437 --> 00:16:45.072 align:middle
现在要将其中的某个单词突出显示

00:16:45.606 --> 00:16:48.475 align:middle
把它设成动态 链接或强调效果

00:16:48.775 --> 00:16:50.644 align:middle
这时字重就能派上用场了

00:16:52.613 --> 00:16:55.716 align:middle
另外 它还可以为列表制作层级效果

00:16:55.782 --> 00:17:02.556 align:middle
比如我想把第一行文字做成列表的标题
而下面的部分是列表的具体内容

00:16:55.782 --> 00:17:02.556 align:middle
比如我想把第一行文字做成列表的标题
而下面的部分是列表的具体内容

00:17:03.891 --> 00:17:07.761 align:middle
字重还有一个巧妙的功能
制作相似效果

00:17:08.595 --> 00:17:09.896 align:middle
请看这个示例

00:17:09.963 --> 00:17:13.599 align:middle
Apple手表系统的
Glances模拟界面

00:17:13.800 --> 00:17:16.869 align:middle
上面是一个较大的数字
下面是几个较小的文字

00:17:17.771 --> 00:17:22.309 align:middle
如果把它们设成相同字重
看起来会有头重脚轻的感觉

00:17:22.910 --> 00:17:25.546 align:middle
如果要制作相似效果
让其产生平衡感

00:17:25.612 --> 00:17:28.214 align:middle
就需要使用不同的字重
以此来达到相似的目的

00:17:29.116 --> 00:17:32.619 align:middle
所以我们下面的字体从light
变成regular 效果就好多了

00:17:34.621 --> 00:17:35.856 align:middle
记住这个方法

00:17:35.923 --> 00:17:38.992 align:middle
字号大时 字重调重一些
字号小时 字重调轻一些

00:17:39.359 --> 00:17:44.331 align:middle
这样一来就能达到
相似而协调的理想效果

00:17:46.567 --> 00:17:48.969 align:middle
最后 字重还能帮助提高文字的表现力

00:17:49.136 --> 00:17:52.005 align:middle
为了解释这个问题
我制作了一款新式app应用

00:17:52.840 --> 00:17:54.408 align:middle
叫做“蜜蜂天气预报”

00:17:54.842 --> 00:17:57.377 align:middle
一款蜜蜂风格的小软件

00:17:58.011 --> 00:18:02.516 align:middle
我想让它看起来简单粗犷一些

00:17:58.011 --> 00:18:02.516 align:middle
我想让它看起来简单粗犷一些

00:18:03.016 --> 00:18:06.653 align:middle
但我想说的是
如果保持界面布局不变

00:18:06.987 --> 00:18:09.323 align:middle
在布局不变的情况下
只改动字重

00:18:09.990 --> 00:18:13.026 align:middle
整个界面在风格上将会截然不同
表现力完全不一样

00:18:13.861 --> 00:18:17.264 align:middle
如果你觉得
哦 肯定是颜色的问题

00:18:17.931 --> 00:18:19.633 align:middle
没关系
我还做了一个斑马版的

00:18:20.167 --> 00:18:22.769 align:middle
这个就完全能证明我是对的

00:18:24.137 --> 00:18:27.374 align:middle
虽然字重能改变风格和效果

00:18:28.909 --> 00:18:31.044 align:middle
但别忘了

00:18:31.945 --> 00:18:37.050 align:middle
文字是有字体的
易读性最重要

00:18:38.452 --> 00:18:41.088 align:middle
你可以制作层级效果
清晰连贯的层级效果

00:18:42.089 --> 00:18:43.690 align:middle
如果不喜欢自己做的话

00:18:43.991 --> 00:18:45.959 align:middle
可以使用iOS准备
的一套现成系统

00:18:46.493 --> 00:18:50.531 align:middle
里面已经设置了层级
以及字体尺寸和字重

00:18:51.031 --> 00:18:52.699 align:middle
它们就是文字样式API

00:18:52.966 --> 00:18:56.537 align:middle
主要用于功能很多的
Dynamic Type

00:18:57.070 --> 00:18:59.873 align:middle
用户可以进入它的偏好设置

00:19:00.274 --> 00:19:03.577 align:middle
改变字体大小
然后app应用就会做出相应改变

00:19:05.345 --> 00:19:07.614 align:middle
在使用字重时请记住

00:19:07.714 --> 00:19:11.985 align:middle
iOS和watchOS系统
中都有一个设定选项

00:19:12.419 --> 00:19:16.290 align:middle
用于改变用户设备上的字重

00:19:16.890 --> 00:19:20.394 align:middle
如果你使用的字体很粗

00:19:20.928 --> 00:19:23.463 align:middle
那很可能已经达到了极限

00:19:24.231 --> 00:19:28.902 align:middle
相反 如果你使用的字体很细
那么文字的易读性就会好一些

00:19:29.403 --> 00:19:33.607 align:middle
字重的使用没有固定的标准方法

00:19:34.341 --> 00:19:38.879 align:middle
但这些基本原理还是能
起到一些抛砖引玉的作用

00:19:40.647 --> 00:19:44.051 align:middle
以上讲的是
San Francisco字族的字重

00:19:45.185 --> 00:19:49.656 align:middle
还有更多的字重
和包含字重的API供大家使用

00:19:51.258 --> 00:19:54.461 align:middle
刚才介绍的易读性
层级和精细质量效果

00:19:54.761 --> 00:19:57.631 align:middle
等基本原理同样
适用于这些字重和API

00:20:01.068 --> 00:20:07.808 align:middle
下面是San Francisco
字族的另一个功能 字形功能

00:20:11.512 --> 00:20:17.518 align:middle
功能赋予字体生命力
因为它们是嵌入字体内部的行为片段

00:20:19.052 --> 00:20:22.055 align:middle
其主要作用是用来表达复杂文字

00:20:22.756 --> 00:20:26.527 align:middle
同时也可以通过它们
来获得字体的外延形状

00:20:27.294 --> 00:20:29.329 align:middle
对获取外延形状来说
有时字形功能是唯一途径

00:20:29.396 --> 00:20:32.099 align:middle
有时字形功能是更加便捷的途径

00:20:33.133 --> 00:20:35.068 align:middle
我们通过示例来了解
它们功能的实际作用

00:20:35.636 --> 00:20:37.704 align:middle
首先看分数的显示

00:20:38.539 --> 00:20:41.208 align:middle
比如在设计过程中
需要把它加到app应用里

00:20:41.542 --> 00:20:42.409 align:middle
这时你会想

00:20:43.343 --> 00:20:46.213 align:middle
肯定可以在Unicode找到该符号

00:20:46.747 --> 00:20:50.617 align:middle
但不知道San Francisco里面有没有

00:20:50.884 --> 00:20:52.786 align:middle
于是你找了一下还真找到了
直接把它打出来

00:20:53.020 --> 00:20:53.854 align:middle
很好

00:20:54.488 --> 00:20:56.690 align:middle
不过要是这种情况的话又该怎么办呢？

00:20:57.357 --> 00:20:59.226 align:middle
字体里面没有
Unicode里也没有

00:21:00.027 --> 00:21:06.867 align:middle
你可以用迭代法
用这个字符串来写代码

00:21:07.234 --> 00:21:08.302 align:middle
然后复制成其它形状

00:21:09.169 --> 00:21:12.973 align:middle
再把这些形状逐个排好位置

00:21:13.807 --> 00:21:18.879 align:middle
必要时调整一下字重
让整体效果看起来更加相似 匀称

00:21:19.479 --> 00:21:22.349 align:middle
也许你会想到字体里面是有分号线的

00:21:22.416 --> 00:21:24.585 align:middle
那就到San Francisco里面去找一找
找到了

00:21:24.651 --> 00:21:25.485 align:middle
直接放进去

00:21:26.353 --> 00:21:29.857 align:middle
就这样你写了一大堆代码
其实根本不用这么麻烦

00:21:29.957 --> 00:21:35.262 align:middle
因为分数功能会
自动执行这一操作

00:21:36.430 --> 00:21:39.132 align:middle
该功能适用于任意分数

00:21:40.067 --> 00:21:41.802 align:middle
就像这个数字

00:21:41.935 --> 00:21:47.641 align:middle
我不可能设计出
一个65/324这么大的连字符

00:21:48.141 --> 00:21:53.447 align:middle
实际上它是由小号数字和分号线组成的
系统能够根据实际字体

00:21:54.448 --> 00:21:58.185 align:middle
将数字和分号线组合在一起

00:21:58.852 --> 00:22:04.525 align:middle
这样做的好处在于
它们都是独立的形状 可以调整字间距

00:21:58.852 --> 00:22:04.525 align:middle
这样做的好处在于
它们都是独立的形状 可以调整字间距

00:22:05.926 --> 00:22:08.529 align:middle
功能的种类还有很多

00:22:08.629 --> 00:22:11.031 align:middle
大家可以在Typography面板
里启用这些功能

00:22:11.098 --> 00:22:14.301 align:middle
该面板是OS X字体
面板中的一个用户界面

00:22:15.602 --> 00:22:19.339 align:middle
另外也可以通过代码来启用功能
毕竟在座各位使用代码的时候比较多

00:22:20.307 --> 00:22:26.713 align:middle
我用新的systemFontOfSize
字重API实现了轻字重效果

00:22:27.848 --> 00:22:29.716 align:middle
这是字体描述符

00:22:30.617 --> 00:22:34.688 align:middle
找到以后就可以为它添加各种属性

00:22:35.155 --> 00:22:37.791 align:middle
某些属性本身就是字形功能

00:22:38.458 --> 00:22:41.695 align:middle
每次可以打开一个功能
或者关闭一个功能

00:22:41.762 --> 00:22:44.398 align:middle
也可以批量处理多个功能

00:22:45.265 --> 00:22:48.402 align:middle
有了字体描述符
就可以用它创建另一个UIFont

00:22:49.036 --> 00:22:49.870 align:middle
或者NSFont

00:22:51.738 --> 00:22:54.942 align:middle
此外还有其他功能供大家使用

00:22:55.008 --> 00:22:59.613 align:middle
比如高体字和上角标
或者矮体字和下角表

00:23:01.882 --> 00:23:07.187 align:middle
或在数字和大写字母之间输入数学符号

00:23:07.254 --> 00:23:10.224 align:middle
或其它符号时所使用的大写形式

00:23:11.925 --> 00:23:15.362 align:middle
San Francisco字体的
某些功能在设计上确实非常特殊

00:23:15.562 --> 00:23:16.797 align:middle
我来具体解释一下

00:23:17.965 --> 00:23:20.100 align:middle
首先是垂直居中冒号

00:23:21.502 --> 00:23:25.839 align:middle
默认状态下它是与小写字母对齐的
所以顶靠在基准线上

00:23:26.206 --> 00:23:30.711 align:middle
但在对时间显示进行排版设计时
我们希望它能垂直居中于数字之间

00:23:31.445 --> 00:23:34.882 align:middle
因此我们在iOS的表盘设计中
全部采用了这种居中垂直法

00:23:35.315 --> 00:23:39.319 align:middle
既用在OS X的标题栏
也用在啊Apple手表系统

00:23:39.920 --> 00:23:41.788 align:middle
还用在秒表程序上

00:23:42.489 --> 00:23:48.562 align:middle
后来我们决定把该功能设成自动生效
这样能为UI设计的时间显示带来便利

00:23:51.298 --> 00:23:54.334 align:middle
当然必要时
你也可以退出该功能

00:23:54.401 --> 00:23:58.272 align:middle
退出的功能代码和
和启用代码基本是一样的

00:23:59.206 --> 00:24:03.110 align:middle
另外一个功能是6和9的替代形状

00:23:59.206 --> 00:24:03.110 align:middle
另外一个功能是6和9的替代形状

00:24:03.944 --> 00:24:08.682 align:middle
这两个形状当字体较大时看起来很漂亮
采用的是grotesque字体

00:24:09.283 --> 00:24:12.653 align:middle
但是它们却存在视觉混淆问题

00:24:12.986 --> 00:24:16.957 align:middle
当它们以小字体并列显示
或者与8并列示时就会变得混淆不清

00:24:18.225 --> 00:24:23.931 align:middle
因此我们在San Francisco字体
中设计了6和9的替代形状

00:24:24.164 --> 00:24:25.566 align:middle
看起来更加平直化

00:24:26.200 --> 00:24:30.170 align:middle
这种设计被应用在
Apple手表系统的小表盘上

00:24:30.604 --> 00:24:33.941 align:middle
以及Apple手表背面的序列号上

00:24:34.408 --> 00:24:37.711 align:middle
其实在任何序列号不易分辨的情况下
你都可以使用这一功能

00:24:37.978 --> 00:24:39.179 align:middle
让6和9显示地更加清晰

00:24:40.047 --> 00:24:42.783 align:middle
因为使用时要取决其它数字的实际大小

00:24:43.083 --> 00:24:45.686 align:middle
所以我们没有把该功能设为自动开启

00:24:46.620 --> 00:24:50.224 align:middle
如果需要的话可以使用
这段功能代码来启动它

00:24:53.360 --> 00:24:55.729 align:middle
接下来
我要把两种理念结合起来

00:24:55.796 --> 00:24:58.298 align:middle
第一种是我们刚刚看到的字形功能

00:24:58.732 --> 00:25:00.834 align:middle
第二种是我们先前讲过的视觉尺寸

00:24:58.732 --> 00:25:00.834 align:middle
第二种是我们先前讲过的视觉尺寸

00:25:02.836 --> 00:25:05.572 align:middle
显示字体和文字字体
在设计上的区别很大

00:25:05.639 --> 00:25:10.010 align:middle
因此我们不得不将
磅值纳入到考虑范围内

00:25:10.544 --> 00:25:12.813 align:middle
在设计过程中
如果用显示字体来表达分数

00:25:12.880 --> 00:25:15.082 align:middle
那么使用卷曲形的6不会有任何问题

00:25:15.482 --> 00:25:19.253 align:middle
但如果是文字字体的话
最好能换成另一种形状

00:25:19.319 --> 00:25:22.222 align:middle
因为如果将磅值设为12

00:25:22.456 --> 00:25:24.525 align:middle
那么分数部分的磅值就应该是6
对吧？

00:25:25.092 --> 00:25:26.660 align:middle
所以我们采取了不同的设计方式

00:25:26.994 --> 00:25:28.762 align:middle
并且让它们间隔更远一些

00:25:29.196 --> 00:25:32.733 align:middle
我们在 San Francisco字体中
专门进行了很多这样形状的处理

00:25:32.799 --> 00:25:39.406 align:middle
目的就是将文本和显示区别开来
从而让文字更加美观或者更加易读

00:25:42.209 --> 00:25:44.178 align:middle
这些就是字形功能

00:25:44.778 --> 00:25:46.914 align:middle
它们是被嵌入文字内部的行为作用

00:25:48.448 --> 00:25:52.085 align:middle
有些功能是由系统字体默认开启的

00:25:52.819 --> 00:25:55.656 align:middle
而其它功能则需要大家自己启用

00:25:59.092 --> 00:26:02.996 align:middle
接下来我们谈谈数字

00:25:59.092 --> 00:26:02.996 align:middle
接下来我们谈谈数字

00:26:03.163 --> 00:26:06.366 align:middle
不是app里面的数字
而是字体里面的数字

00:26:07.601 --> 00:26:12.239 align:middle
字体设计人员花费大量
时间去研究数字的形状

00:26:12.306 --> 00:26:15.309 align:middle
想让数字更加美观 实用更加完善

00:26:16.310 --> 00:26:19.146 align:middle
不过我想谈谈数字的间距

00:26:19.213 --> 00:26:20.147 align:middle
它们的宽度问题

00:26:21.949 --> 00:26:23.417 align:middle
默认状态下
对于我们的平台而言

00:26:23.483 --> 00:26:27.120 align:middle
数字采用的是等宽式设计
就是说它们的宽度完全相同

00:26:28.789 --> 00:26:33.594 align:middle
对于编排表格之类的设计非常适用

00:26:33.961 --> 00:26:37.164 align:middle
等宽数字简单方便
因为它们很容易对齐

00:26:37.798 --> 00:26:40.801 align:middle
而且还可以用来制作多行样式

00:26:42.436 --> 00:26:45.672 align:middle
但它并非San Francisco
字体中唯一的数字形式

00:26:46.139 --> 00:26:49.042 align:middle
我们还设计了一种比例数字

00:26:49.376 --> 00:26:53.080 align:middle
使每个数字都有其“自然”宽度

00:26:54.248 --> 00:26:58.919 align:middle
某些情况下
我们的确需要等宽数字

00:27:01.388 --> 00:27:06.426 align:middle
比如像这样有小数的时候

00:27:06.493 --> 00:27:10.531 align:middle
会有摆动效果
等宽数字能保持静止不动

00:27:11.865 --> 00:27:16.870 align:middle
当然有时也需要在静态标签里使用数字

00:27:16.937 --> 00:27:20.774 align:middle
比如说一条数据 一个电话号码

00:27:21.341 --> 00:27:26.880 align:middle
收件箱阅读提示
或者Email地址以及URL网址

00:27:27.347 --> 00:27:31.285 align:middle
这时最好使用比例数字

00:27:32.653 --> 00:27:37.858 align:middle
现在我们用数字内容比较多的
日历程序来做个演示

00:27:39.126 --> 00:27:42.462 align:middle
请看我们在这款应用中所使用的数字
以及我们的编排设计方式

00:27:42.796 --> 00:27:47.034 align:middle
它们没有任何对齐标准
只与文字保持一致

00:27:47.267 --> 00:27:52.506 align:middle
也就是说 我们可以使用
应该使用 也确实使用了比例数字

00:27:55.709 --> 00:27:58.745 align:middle
了解这一点
我们就能实现质的飞跃

00:27:59.413 --> 00:28:02.082 align:middle
就能改变我们的平台默认样式

00:27:59.413 --> 00:28:02.082 align:middle
就能改变我们的平台默认样式

00:28:02.182 --> 00:28:07.154 align:middle
为大家提供默认状态下的比例数字
并将等宽数字设为可选功能

00:28:08.422 --> 00:28:11.358 align:middle
Apple手表已经率先
采用了这种设计方式

00:28:11.825 --> 00:28:14.027 align:middle
系统默认使用比例数字

00:28:15.295 --> 00:28:17.531 align:middle
但这毕竟是一次重大变更
可能会对布局产生影响

00:28:17.831 --> 00:28:21.235 align:middle
有鉴于此
我们制定了一些规则

00:28:22.736 --> 00:28:25.639 align:middle
如果app应用
未链接到iOS 10.11

00:28:25.873 --> 00:28:28.041 align:middle
对不起
是OS X 10.11和iOS 9

00:28:28.342 --> 00:28:32.513 align:middle
默认使用的仍是等宽数字
系统会自动启用等宽数字

00:28:34.081 --> 00:28:38.886 align:middle
但如果是重新编译
则会使用比例数字

00:28:39.987 --> 00:28:45.325 align:middle
在AppKit中有款新的快捷API
它提取了这一功能代码

00:28:45.526 --> 00:28:48.395 align:middle
就是刚才给大家看的那段代码
所以用起来会更方便

00:28:52.099 --> 00:28:55.068 align:middle
最后我们来了解一下潜在隐患的问题

00:28:55.135 --> 00:28:59.139 align:middle
我们的字体API
同时包含了新旧字体

00:29:01.775 --> 00:29:04.578 align:middle
细心的人可能会留意到

00:29:04.645 --> 00:29:08.048 align:middle
在预览版的OS X和iOS系统中

00:29:08.515 --> 00:29:12.753 align:middle
SF字体的名称前面有一个小点

00:29:13.587 --> 00:29:17.191 align:middle
这个小点是用来告诉大家
该字体是Apple的独家字体

00:29:17.558 --> 00:29:20.294 align:middle
所以不要过于相信它的稳定性

00:29:22.329 --> 00:29:25.098 align:middle
我们曾经见过一些框架开发人员

00:29:25.199 --> 00:29:27.067 align:middle
使用他们自己的字体加载代码

00:29:27.134 --> 00:29:29.469 align:middle
比如游戏框架的开发人员就是这样

00:29:29.970 --> 00:29:32.206 align:middle
之所以这样做是因为

00:29:32.539 --> 00:29:35.843 align:middle
他们觉得字体就存放在文件系统中
的某个具体位置上

00:29:36.343 --> 00:29:37.477 align:middle
这种想法是很危险的

00:29:37.878 --> 00:29:43.584 align:middle
我们希望大家在字体路径
的处理方式上能宽泛一些

00:29:43.650 --> 00:29:47.688 align:middle
就是说可以通过
Core text访问字体文件

00:29:47.754 --> 00:29:51.024 align:middle
而不必到文件系统里面查找

00:29:52.960 --> 00:29:56.830 align:middle
另外如果要通过
名称来获取字体文件的话

00:29:57.431 --> 00:30:00.300 align:middle
可以使用fontWithName API
里面全都是用户字体

00:29:57.431 --> 00:30:00.300 align:middle
可以使用fontWithName API
里面全都是用户字体

00:30:00.367 --> 00:30:03.136 align:middle
如果你有自己的字体
可以这样写出来完全没问题

00:30:03.637 --> 00:30:05.339 align:middle
但如果你对某个系统字体执行了实例化

00:30:05.572 --> 00:30:09.109 align:middle
然后再提取它的名称
并尝试建立另外一个字体

00:30:09.610 --> 00:30:13.413 align:middle
这时会导致所有的
系统自动设置完全退出

00:30:13.480 --> 00:30:18.552 align:middle
自动功能 字体大小行为
自动间距等等都会退出

00:30:18.619 --> 00:30:20.921 align:middle
所以建议大家不要这样操作

00:30:21.455 --> 00:30:23.991 align:middle
其实我们可以调用字体描述符

00:30:24.458 --> 00:30:29.396 align:middle
用它来实现某个字体功能

00:30:29.463 --> 00:30:32.699 align:middle
这是使用字体对象的推荐方案

00:30:35.169 --> 00:30:37.104 align:middle
最后在视觉尺寸问题上

00:30:37.171 --> 00:30:42.442 align:middle
我们仍然在挑战一些
字体显示方面的旧观念

00:30:42.809 --> 00:30:46.113 align:middle
比如在设计过程中
把一个单词的磅值设为15

00:30:46.380 --> 00:30:51.585 align:middle
将其比例放大后
再重新使用相同的字体对象

00:30:51.919 --> 00:30:57.824 align:middle
这时你可能在用
比如说120磅来显示15磅的字体

00:30:58.425 --> 00:31:03.497 align:middle
那么就要对120磅的字体
重新执行实例化

00:30:58.425 --> 00:31:03.497 align:middle
那么就要对120磅的字体
重新执行实例化

00:31:03.564 --> 00:31:05.465 align:middle
这样才能得到正确的字体行为

00:31:08.769 --> 00:31:13.941 align:middle
希望大家能把字体当作一种宽泛的对象
并使用系统API来获取字体

00:31:15.375 --> 00:31:18.846 align:middle
具备了视觉属性
字体便能够打破旧有观念

00:31:20.214 --> 00:31:25.819 align:middle
基于系统字体的API将会
一直提供正确的字体行为

00:31:25.886 --> 00:31:28.288 align:middle
所以大家尽管放心使用

00:31:30.090 --> 00:31:32.226 align:middle
以上就是今天的全部内容

00:31:32.292 --> 00:31:34.261 align:middle
我们介绍了
新的San Francisco字体

00:31:34.328 --> 00:31:38.165 align:middle
及San Francisco的优秀创意 视觉尺寸
还有其它一些概念

00:31:38.732 --> 00:31:42.870 align:middle
介绍了自动字符间距和字体字重
及San Francisco的各种功能

00:31:43.337 --> 00:31:46.573 align:middle
还有即将在平台上普及的
数字显示方面的重大变更

00:31:46.640 --> 00:31:50.143 align:middle
这将使用比例数字作为默认显示

00:31:50.511 --> 00:31:53.814 align:middle
最后我们介绍了API的潜在隐患

00:31:54.648 --> 00:31:58.485 align:middle
如果您有任何问题
可以联系 迈克 或 柯特

00:31:59.052 --> 00:32:00.954 align:middle
或者访问我们的开发者网站

00:31:59.052 --> 00:32:00.954 align:middle
或者访问我们的开发者网站

00:32:02.623 --> 00:32:05.225 align:middle
稍后的演讲是手表设计的要诀和技巧

00:32:05.592 --> 00:32:08.395 align:middle
之后是文字与字体实验室
届时会有答疑环节

00:32:08.962 --> 00:32:10.564 align:middle
谢谢大家
