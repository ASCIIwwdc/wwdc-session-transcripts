WEBVTT

00:00:22.055 --> 00:00:25.959 align:middle
网络扩展和VPN新功能

00:00:32.499 --> 00:00:33.767 align:middle
谢谢

00:00:34.268 --> 00:00:35.369 align:middle
大家早上好

00:00:35.502 --> 00:00:37.171 align:middle
欢迎大家学习第717课

00:00:37.738 --> 00:00:41.074 align:middle
我叫杰米·伍德今天我和
同事汤米·保利一起

00:00:41.308 --> 00:00:44.144 align:middle
我们是Apple核心操作系统
网络部门的网络工程师

00:00:44.912 --> 00:00:48.115 align:middle
我们很高兴向你们介绍

00:00:48.415 --> 00:00:50.017 align:middle
网络扩展和VPN的新功能

00:00:51.785 --> 00:00:55.722 align:middle
你们可能会问什么是网络扩展框架？

00:00:55.789 --> 00:00:58.025 align:middle
它能为我提供什么功能

00:00:58.225 --> 00:00:59.660 align:middle
供我的App使用？

00:01:00.694 --> 00:01:04.230 align:middle
网络扩展框架提供大量的API

00:01:04.765 --> 00:01:07.901 align:middle
可以定义和扩展Apple平台

00:01:07.968 --> 00:01:08.969 align:middle
的核心网络功能

00:01:09.803 --> 00:01:12.005 align:middle
让我们来看一些具体的例子

00:01:12.072 --> 00:01:15.442 align:middle
来了解如何使用
网络扩展API创建App

00:01:16.710 --> 00:01:19.780 align:middle
如果贵公司在公共区域
部署Wifi热点

00:01:20.147 --> 00:01:24.618 align:middle
就像酒店、机场和咖啡馆一样

00:01:25.385 --> 00:01:28.789 align:middle
你可以使用任何热点
帮助器 API来创建APP

00:01:28.856 --> 00:01:30.424 align:middle
以连接到Wi-Fi热点

00:01:32.326 --> 00:01:34.995 align:middle
如果贵公司创建一个专用vpn服务

00:01:35.162 --> 00:01:37.764 align:middle
让你的用户安全地浏览互联网内容

00:01:38.432 --> 00:01:42.135 align:middle
可使用
NEVPN管理器API创建APP

00:01:42.202 --> 00:01:44.004 align:middle
以连接到你的个人VPN服务

00:01:45.873 --> 00:01:49.176 align:middle
如果你的公司
创建远程访问VPN服务器

00:01:49.877 --> 00:01:52.646 align:middle
可以使用任何隧道系列API

00:01:52.880 --> 00:01:55.015 align:middle
创建APP以连接到VPN服务器

00:01:56.984 --> 00:02:01.955 align:middle
最后 如果你的学校想要
创建网络内容过滤器供学校使用

00:01:56.984 --> 00:02:01.955 align:middle
最后 如果你的学校想要
创建网络内容过滤器供学校使用

00:02:02.022 --> 00:02:03.957 align:middle
以保护学生安全地上网

00:02:04.825 --> 00:02:07.694 align:middle
你可以使用过滤器提供者系列API

00:02:07.761 --> 00:02:11.732 align:middle
创建APP过滤网络内容

00:02:15.335 --> 00:02:22.176 align:middle
今天的课程我将会讲解网络扩展API

00:02:23.677 --> 00:02:27.614 align:middle
让我们来深入讲解热点帮助器API

00:02:32.186 --> 00:02:38.325 align:middle
热点帮助器API用于创建APP
以连接到Wi-Fi热点

00:02:40.594 --> 00:02:42.029 align:middle
你们可能已经知道

00:02:42.095 --> 00:02:44.398 align:middle
一些API可用于创建APP

00:02:44.598 --> 00:02:46.533 align:middle
来连接到Wi-Fi热点

00:02:46.600 --> 00:02:48.802 align:middle
它们包括
CNSetSupportedSSID

00:02:48.869 --> 00:02:51.004 align:middle
CNMarkPortalOnline
API

00:02:51.405 --> 00:02:53.440 align:middle
但是这些API具有局限性

00:02:55.742 --> 00:03:00.514 align:middle
其中一个问题是可以传递给
CNSetSupportedSSID

00:02:55.742 --> 00:03:00.514 align:middle
其中一个问题是可以传递给
CNSetSupportedSSID

00:03:00.581 --> 00:03:02.482 align:middle
的热点列表数量受到限制

00:03:02.583 --> 00:03:05.752 align:middle
如果你有一个WiFi热点全局网络

00:03:05.819 --> 00:03:08.322 align:middle
并且想将你的APP
连接到网络 你很快就会

00:03:08.388 --> 00:03:09.623 align:middle
达到数量限值

00:03:11.225 --> 00:03:12.593 align:middle
另一个缺点是

00:03:12.659 --> 00:03:15.028 align:middle
为了调用
CNMarkPortalOnline

00:03:15.162 --> 00:03:17.130 align:middle
用户必须手动运行应用程序

00:03:17.965 --> 00:03:22.836 align:middle
更糟糕的是并不会有提示信息
来提示用户运行APP

00:03:23.270 --> 00:03:24.972 align:middle
这不利于用户体验

00:03:25.072 --> 00:03:26.907 align:middle
用户并不知道他们需要进入APP

00:03:26.974 --> 00:03:28.642 align:middle
才能连接到WiFi热点

00:03:30.210 --> 00:03:34.548 align:middle
因此我们引入热点帮助器API

00:03:34.781 --> 00:03:36.350 align:middle
来解决这些限制问题

00:03:37.317 --> 00:03:39.920 align:middle
实现方法是首先将你的APP

00:03:39.987 --> 00:03:41.722 align:middle
作为一个热点帮助器注册到系统

00:03:42.990 --> 00:03:46.994 align:middle
然后当设备进入WiFi网络范围之内

00:03:47.060 --> 00:03:50.464 align:middle
扫描WiFi网络或者用户选择他

00:03:50.531 --> 00:03:54.968 align:middle
进行连接时 系统将调用你的APP

00:03:55.035 --> 00:03:57.004 align:middle
在后台运行APP调用你的APP

00:03:57.538 --> 00:04:00.474 align:middle
让你的APP有机会声明为具有
一定机密等级的Wi-Fi热点

00:03:57.538 --> 00:04:00.474 align:middle
让你的APP有机会声明为具有
一定机密等级的Wi-Fi热点

00:04:00.874 --> 00:04:03.911 align:middle
机密等级包括高、中或低

00:04:04.444 --> 00:04:07.714 align:middle
如果声明为高机密等级的热点

00:04:08.215 --> 00:04:09.883 align:middle
系统将会提醒你

00:04:09.950 --> 00:04:12.586 align:middle
进行WiFi热点身份验证

00:04:13.287 --> 00:04:15.522 align:middle
它会定期要求你

00:04:15.722 --> 00:04:17.891 align:middle
保持身份验证会话

00:04:19.493 --> 00:04:22.029 align:middle
热点帮助器API还允许你

00:04:22.563 --> 00:04:28.535 align:middle
在设置APP时
标注在Wi-Fi管理器中

00:04:29.369 --> 00:04:32.139 align:middle
显示的WiFi网络
你可以使用APP名称

00:04:32.206 --> 00:04:34.708 align:middle
或公司名称标注这些WiFi网络

00:04:36.076 --> 00:04:38.245 align:middle
这就是热点帮助器API的功能

00:04:38.645 --> 00:04:40.814 align:middle
你可以使用这个API来创建APP

00:04:40.881 --> 00:04:43.016 align:middle
无缝连接到Wi-Fi热点

00:04:45.886 --> 00:04:48.121 align:middle
接着来看NEVPN管理器API

00:04:48.522 --> 00:04:50.591 align:middle
你可以使用这个API创建APP

00:04:50.958 --> 00:04:53.060 align:middle
连接到个人VPN服务
用户可以使用此服务

00:04:53.126 --> 00:04:55.495 align:middle
安全浏览互联网内容

00:04:57.998 --> 00:05:01.902 align:middle
NEVPN管理器
API是并不是iOS 9的新功能

00:04:57.998 --> 00:05:01.902 align:middle
NEVPN管理器
API是并不是iOS 9的新功能

00:05:02.302 --> 00:05:04.938 align:middle
iOS 8已经有这个API

00:05:05.539 --> 00:05:09.776 align:middle
我们对这个API进行增强
让这个API可用于

00:05:09.943 --> 00:05:11.945 align:middle
OS X和
OS X El Capitan

00:05:13.647 --> 00:05:16.884 align:middle
方法是先使用NEVPN管理器API

00:05:16.950 --> 00:05:19.653 align:middle
在平台上配置和控制

00:05:20.254 --> 00:05:21.321 align:middle
内置IPSEC客户端

00:05:23.223 --> 00:05:25.959 align:middle
你可以创建一个个人VPN配置

00:05:26.026 --> 00:05:29.296 align:middle
稍后我会讲解个人VPN配置是什么

00:05:31.498 --> 00:05:34.334 align:middle
内置IPSEC
客户端支持IKE v1

00:05:34.401 --> 00:05:36.503 align:middle
和IKE v2密钥交换协议

00:05:36.570 --> 00:05:38.172 align:middle
你可以使用其中一项协议

00:05:39.940 --> 00:05:44.811 align:middle
你可以配置VPN
以便在特定网络条件下自动连接

00:05:48.148 --> 00:05:51.185 align:middle
作为iOS 9和OS X El Capitan
中的新功能

00:05:51.251 --> 00:05:53.587 align:middle
你可以配置http代理

00:05:53.654 --> 00:05:57.157 align:middle
通过VPN隧道传输http流量

00:06:00.160 --> 00:06:04.064 align:middle
多个个人VPN配置可以共存

00:06:04.131 --> 00:06:05.933 align:middle
并且与企业VPN协作

00:06:06.333 --> 00:06:09.036 align:middle
假设用户使用你的APP

00:06:09.102 --> 00:06:10.504 align:middle
连接你的个人VPN服务

00:06:10.771 --> 00:06:13.307 align:middle
他们可以安全地互联网内容

00:06:13.807 --> 00:06:17.344 align:middle
并且可以访问公司内部网络的内容

00:06:18.212 --> 00:06:20.914 align:middle
当他们连接企业VPN时

00:06:22.749 --> 00:06:25.452 align:middle
所有供内部人员

00:06:25.519 --> 00:06:26.887 align:middle
使用的信息

00:06:26.954 --> 00:06:28.555 align:middle
将使用企业VPN传输

00:06:29.156 --> 00:06:30.457 align:middle
其他任何不经过

00:06:30.524 --> 00:06:31.592 align:middle
企业VPN传输的内容

00:06:31.658 --> 00:06:33.360 align:middle
将继续通过个人VPN传输

00:06:33.727 --> 00:06:35.229 align:middle
个人VPN保持连接状态

00:06:35.562 --> 00:06:37.631 align:middle
继续通过隧道传输流量

00:06:39.633 --> 00:06:45.272 align:middle
是NEVPN管理器API提供的功能

00:06:46.773 --> 00:06:49.877 align:middle
我们还对NEVPN管理器
进行了其他方面的增强

00:06:49.943 --> 00:06:51.879 align:middle
即增强了IKE v2协议支持

00:06:52.412 --> 00:06:55.482 align:middle
IKE v2是一个很不错的隧道协议

00:06:55.983 --> 00:06:58.085 align:middle
在这版本中我们让它变得更好

00:06:59.920 --> 00:07:01.255 align:middle
现在我们还支持MOBIKE

00:06:59.920 --> 00:07:01.255 align:middle
现在我们还支持MOBIKE

00:07:01.855 --> 00:07:07.294 align:middle
我们可以将IKE v2隧道流量

00:07:07.728 --> 00:07:09.563 align:middle
从一个网络接口0转到另一个网络接口

00:07:09.963 --> 00:07:12.933 align:middle
例如如果你的隧道

00:07:12.999 --> 00:07:16.436 align:middle
通过WiFi接口连接但是当用户走出

00:07:16.503 --> 00:07:17.538 align:middle
WiFi网络范围时

00:07:17.604 --> 00:07:20.340 align:middle
设备可切换到蜂窝网络接口

00:07:21.008 --> 00:07:23.143 align:middle
IKE v2隧道将无缝切换数据传输

00:07:25.546 --> 00:07:26.380 align:middle
非常不错

00:07:30.684 --> 00:07:33.253 align:middle
现在我们全面支持IPv6

00:07:33.320 --> 00:07:35.155 align:middle
无论是在IKE v2隧道之内或之外

00:07:37.224 --> 00:07:39.126 align:middle
现在我们还支持IKE报文分割

00:07:39.493 --> 00:07:44.398 align:middle
从而使IKE v2隧道
能够在各种网络环境中更可靠地工作

00:07:46.166 --> 00:07:48.135 align:middle
另外还支持IKE重定向

00:07:48.202 --> 00:07:50.037 align:middle
使你能够平衡
IKE v2服务器的负载

00:07:51.605 --> 00:07:54.007 align:middle
在进行这些增强之后

00:07:54.074 --> 00:07:55.075 align:middle
此协议变得更好用了

00:07:55.142 --> 00:07:56.510 align:middle
IKE v2的性能更优化

00:07:56.810 --> 00:08:00.013 align:middle
能够在各种网络环境中更可靠地运行

00:07:56.810 --> 00:08:00.013 align:middle
能够在各种网络环境中更可靠地运行

00:08:03.116 --> 00:08:04.985 align:middle
现在让我们来看一些代码

00:08:05.052 --> 00:08:06.854 align:middle
该如何使用NEVPN管理器API？

00:08:06.920 --> 00:08:08.856 align:middle
在这里我展示一些代码

00:08:08.922 --> 00:08:12.659 align:middle
代码的功能是这个个人VPN配置

00:08:15.596 --> 00:08:18.699 align:middle
每个使用
NEVPN管理器API的APP

00:08:18.765 --> 00:08:21.368 align:middle
访问一个个人VPN配置

00:08:21.435 --> 00:08:24.605 align:middle
这个配置使用一个
NEVPN管理器对象表示

00:08:25.205 --> 00:08:27.474 align:middle
首先我获得共享管理器对象的引用

00:08:28.275 --> 00:08:30.544 align:middle
而且系统上的所有VPN配置

00:08:30.611 --> 00:08:32.578 align:middle
存储在网络扩展首选项之中

00:08:33.046 --> 00:08:35.048 align:middle
当我在代码中处理配置之前

00:08:35.515 --> 00:08:40.821 align:middle
我需要调用完成处理操作
从首选项中载入这个配置

00:08:42.722 --> 00:08:46.493 align:middle
在完成处理操作中
我首先要做的是进行检查

00:08:46.560 --> 00:08:48.295 align:middle
查看我的配置是否存在

00:08:48.829 --> 00:08:51.965 align:middle
我查看管理器对象上的协议资产

00:08:52.533 --> 00:08:54.801 align:middle
如果它显示为nil就说明还没有配置

00:08:55.002 --> 00:08:55.936 align:middle
我需要设置一个配置

00:08:56.470 --> 00:08:58.438 align:middle
在这里我将设置一个IKE v2配置

00:08:59.206 --> 00:09:04.912 align:middle
然后填入所有的
IKE v2专有配置参数

00:08:59.206 --> 00:09:04.912 align:middle
然后填入所有的
IKE v2专有配置参数

00:09:06.647 --> 00:09:09.216 align:middle
完成后我将在管理器对象上

00:09:09.283 --> 00:09:13.086 align:middle
设置协议资产并且启用VPN配置

00:09:13.187 --> 00:09:14.188 align:middle
在系统上

00:09:14.521 --> 00:09:17.257 align:middle
一次只能启用一个VPN配置

00:09:20.260 --> 00:09:22.029 align:middle
完成之后我将保存首选项

00:09:22.095 --> 00:09:24.831 align:middle
将配置保存到

00:09:24.898 --> 00:09:26.066 align:middle
网络扩展首选项之中

00:09:26.133 --> 00:09:27.935 align:middle
并应用系统配置

00:09:28.168 --> 00:09:29.336 align:middle
以使用这些配置

00:09:30.270 --> 00:09:33.106 align:middle
在这里你可以使用API手动启动

00:09:33.173 --> 00:09:37.411 align:middle
和停止VPN隧道检索VPN隧道状态

00:09:37.678 --> 00:09:38.879 align:middle
以确定是否连接

00:09:38.946 --> 00:09:39.947 align:middle
或断开连接等

00:09:41.215 --> 00:09:44.985 align:middle
但是为了良好的用户体验
我们还需要

00:09:45.118 --> 00:09:47.321 align:middle
配置按需连接

00:09:48.222 --> 00:09:50.958 align:middle
利用按需连接功能你可以设置规则

00:09:51.358 --> 00:09:53.393 align:middle
说明何时应该自动连接VPN

00:09:54.962 --> 00:09:57.965 align:middle
因此在本例中我需要设置一个规则

00:09:58.131 --> 00:10:01.301 align:middle
规定当设备位于WiFi网络之内时

00:09:58.131 --> 00:10:01.301 align:middle
规定当设备位于WiFi网络之内时

00:10:01.368 --> 00:10:02.336 align:middle
应该连接我的VPN

00:10:03.804 --> 00:10:04.905 align:middle
因此首先要做的事情是

00:10:04.972 --> 00:10:08.041 align:middle
我需要创建一个按需连接规则对象

00:10:08.609 --> 00:10:10.911 align:middle
这个规则说明

00:10:11.044 --> 00:10:13.180 align:middle
当符合这个规则时将会连接VPN

00:10:16.083 --> 00:10:19.953 align:middle
接下来 我需要为我的规则
设置接口类型匹配条件

00:10:20.988 --> 00:10:24.625 align:middle
当它提示设备位于
特定类型的网络接口上时

00:10:25.192 --> 00:10:26.026 align:middle
即符合此条规则

00:10:26.093 --> 00:10:27.895 align:middle
我将这个网络接口类型
设置为Wi-Fi

00:10:28.095 --> 00:10:30.664 align:middle
当设备位于WiFi网络上时
即符合此条规则

00:10:32.165 --> 00:10:34.067 align:middle
我将设置按需连接规则组

00:10:34.168 --> 00:10:36.036 align:middle
以包含这条新规则

00:10:36.503 --> 00:10:38.872 align:middle
并将结果保存到首选项之中

00:10:39.606 --> 00:10:43.777 align:middle
现在当设备位于WiFi网络上时
将会自动连接我的VPN

00:10:48.048 --> 00:10:49.816 align:middle
这就是NEVPN管理器API的功能

00:10:50.117 --> 00:10:51.952 align:middle
你可以使用这个API创建APP

00:10:52.019 --> 00:10:54.021 align:middle
来连接到你的个人VPN服务

00:10:55.455 --> 00:10:56.957 align:middle
让我们来继续了解

00:10:57.024 --> 00:10:59.526 align:middle
隧道提供者系列API

00:10:59.993 --> 00:11:02.362 align:middle
你可以使用这些API创建APP

00:10:59.993 --> 00:11:02.362 align:middle
你可以使用这些API创建APP

00:11:02.696 --> 00:11:04.631 align:middle
以连接到企业VPN服务器

00:11:08.135 --> 00:11:11.905 align:middle
为此 你需要创建一个自定义VPN

00:11:11.972 --> 00:11:12.840 align:middle
协议提供者

00:11:13.674 --> 00:11:16.109 align:middle
这实质上是自定义隧道协议

00:11:16.176 --> 00:11:18.879 align:middle
的客户端侧实现

00:11:21.215 --> 00:11:23.550 align:middle
这些协议提供者作为APP扩展运行

00:11:23.617 --> 00:11:25.853 align:middle
它们在后台运行处理后台流量

00:11:27.688 --> 00:11:31.091 align:middle
你可以创建两种类型的隧道提供者

00:11:31.158 --> 00:11:32.993 align:middle
你可以创建一个数据包隧道提供者

00:11:33.660 --> 00:11:36.263 align:middle
这些隧道在IP层传输数据

00:11:38.065 --> 00:11:40.934 align:middle
你可以创建 或者说
你能够创建一个App代理提供者

00:11:41.435 --> 00:11:43.303 align:middle
在APP层通过隧道传输数据

00:11:46.340 --> 00:11:48.942 align:middle
隧道提供者系列
API中的一些API允许你

00:11:49.009 --> 00:11:52.346 align:middle
在你的APP中配置和控制协议提供者

00:11:52.479 --> 00:11:54.948 align:middle
这与VPN管理器API相似可配置

00:11:55.015 --> 00:11:57.951 align:middle
和控制IPSEC客户端API允许你

00:11:58.018 --> 00:12:01.021 align:middle
配置和控制你的自定义协议提供者

00:11:58.018 --> 00:12:01.021 align:middle
配置和控制你的自定义协议提供者

00:12:05.359 --> 00:12:08.962 align:middle
让我们来深入了解
NEPacket隧道提供者API

00:12:09.329 --> 00:12:10.230 align:middle
它的原理是怎样的？

00:12:10.964 --> 00:12:15.502 align:middle
假设有一个NEPacket
隧道提供者在系统上运行

00:12:16.103 --> 00:12:18.272 align:middle
而且它已经连接到VPN服务器

00:12:18.338 --> 00:12:21.675 align:middle
并且提供一个
通向某个内部网络的隧道

00:12:22.976 --> 00:12:28.382 align:middle
这样 你的APP将会尝试连接到
内部网络中的某个资源

00:12:29.616 --> 00:12:31.118 align:middle
APP将会打开网络连接

00:12:31.185 --> 00:12:35.155 align:middle
创建一个
socket并建立TCP/IP连接

00:12:36.023 --> 00:12:41.128 align:middle
TCP/IP链路数据包
将路由到UTUN0接口

00:12:41.562 --> 00:12:45.732 align:middle
这是一个虚拟接口它并不通过物理网络

00:12:45.799 --> 00:12:49.303 align:middle
发送数据包而是将数据包转发到

00:12:49.503 --> 00:12:50.971 align:middle
NEPacket隧道提供者

00:12:52.639 --> 00:12:54.842 align:middle
数据隧道提供者接受这些数据包

00:12:54.908 --> 00:12:57.477 align:middle
将它们封装为隧道协议格式

00:12:58.045 --> 00:13:00.113 align:middle
发送到隧道服务器

00:12:58.045 --> 00:13:00.113 align:middle
发送到隧道服务器

00:13:00.681 --> 00:13:02.316 align:middle
隧道服务器解封这些数据包

00:13:02.382 --> 00:13:04.251 align:middle
将它们发送到内部网络

00:13:04.318 --> 00:13:06.386 align:middle
然后转送到最终目的地

00:13:07.020 --> 00:13:09.690 align:middle
返回数据包经过服务器的封装

00:13:09.890 --> 00:13:12.960 align:middle
被传输给提供者提供者解封它们

00:13:13.427 --> 00:13:16.296 align:middle
通过UTUN0接口
将它们注入到网络传输堆栈

00:13:16.363 --> 00:13:18.398 align:middle
然后通过TCP/IP协议栈

00:13:18.465 --> 00:13:21.068 align:middle
将数据包返回给应用程序

00:13:22.202 --> 00:13:24.471 align:middle
这就是其基本工作原理

00:13:24.838 --> 00:13:27.708 align:middle
NEPacket隧道提供者有很多的

00:13:27.774 --> 00:13:29.810 align:middle
UTUN0接口控制功能

00:13:30.344 --> 00:13:32.980 align:middle
最重要的是它可以指定路由

00:13:33.146 --> 00:13:37.985 align:middle
IP目的地将被路由至UTUN0接口

00:13:38.051 --> 00:13:38.986 align:middle
并经过隧道

00:13:40.187 --> 00:13:42.823 align:middle
数据包隧道提供者
可以指定虚拟地址

00:13:42.890 --> 00:13:45.792 align:middle
以分配给接口另外还可指定DNS

00:13:45.859 --> 00:13:47.761 align:middle
和应该使用的代理设置

00:13:47.828 --> 00:13:49.296 align:middle
以用于路由经过隧道的数据流量

00:13:52.232 --> 00:13:55.135 align:middle
接下来汤米·保利
将为我们简要介绍

00:13:55.269 --> 00:13:57.437 align:middle
如何创建一个
NEPacket 隧道提供者

00:14:03.210 --> 00:14:07.714 align:middle
谢谢杰米我们很高兴告诉你们
现在你们可以编写自己的

00:14:07.781 --> 00:14:10.150 align:middle
自定义VPN协议提供者

00:14:10.217 --> 00:14:13.053 align:middle
为了帮助你们做到这一点
我想向你们介绍

00:14:13.754 --> 00:14:16.456 align:middle
如何创建数据包隧道提供者

00:14:17.057 --> 00:14:19.626 align:middle
我从一个Xcode项目开始

00:14:19.693 --> 00:14:22.162 align:middle
在这个项目中已经有一个APP

00:14:22.229 --> 00:14:25.899 align:middle
APP使用管理器API创建一个配置

00:14:25.966 --> 00:14:27.334 align:middle
我们将跳过这个部分

00:14:27.601 --> 00:14:29.603 align:middle
假设我已经实现一个框架

00:14:29.970 --> 00:14:33.607 align:middle
来进行我的自定义协议协商

00:14:33.974 --> 00:14:36.210 align:middle
我将介绍如何构建这个新扩展

00:14:36.577 --> 00:14:38.545 align:middle
并将所有部分组合起来 好的

00:14:41.915 --> 00:14:43.851 align:middle
这是我的项目

00:14:45.519 --> 00:14:48.488 align:middle
首先要做的事情是
为你的扩展添加一个新目标

00:14:49.489 --> 00:14:52.659 align:middle
为此我们需要在OS X El
Capitan中

00:14:53.160 --> 00:14:56.997 align:middle
将这个目标添加到网络扩展框架之中

00:14:57.898 --> 00:15:02.769 align:middle
这样在你的系统上
如果你访问系统、库、框架

00:14:57.898 --> 00:15:02.769 align:middle
这样在你的系统上
如果你访问系统、库、框架

00:15:03.270 --> 00:15:04.671 align:middle
网络扩展框架

00:15:05.839 --> 00:15:09.977 align:middle
你将会进入资源文件夹
我们提供一个模板安装程序

00:15:10.043 --> 00:15:12.479 align:middle
适用于这些目标类型

00:15:13.647 --> 00:15:14.681 align:middle
你可以进入安装程序

00:15:15.682 --> 00:15:17.951 align:middle
我为这个用户进行安装

00:15:21.054 --> 00:15:22.456 align:middle
现在我们看到这些模块

00:15:22.523 --> 00:15:26.193 align:middle
如果进入我的项目在应用扩展下方

00:15:27.995 --> 00:15:30.964 align:middle
尝试创建一个新目标
现在我有四个新目标类型

00:15:31.431 --> 00:15:34.968 align:middle
还有App Proxy
提供者可用于应用层VPN

00:15:35.435 --> 00:15:39.206 align:middle
这里有两个过滤器控件
和一个数据提供者

00:15:39.606 --> 00:15:41.308 align:middle
让我能够进行数据过滤

00:15:41.375 --> 00:15:43.911 align:middle
稍后我将会讲解数据过滤
还有一个数据包隧道提供者

00:15:44.578 --> 00:15:49.349 align:middle
在这个例子中 我的协议
为我的VPN使用IP级隧道

00:15:49.416 --> 00:15:50.984 align:middle
我将选择数据包隧道提供者

00:15:53.887 --> 00:15:58.792 align:middle
我们在Swift中写入它的名称
称为数据包隧道

00:16:01.562 --> 00:16:03.430 align:middle
很好 现在我有了一个新目标

00:16:03.497 --> 00:16:05.999 align:middle
我可以开始构建我的VPN提供者

00:16:08.001 --> 00:16:10.204 align:middle
让我们进入实际代码编写

00:16:11.305 --> 00:16:13.607 align:middle
我的协议基于UDP协议

00:16:14.274 --> 00:16:16.143 align:middle
它使用UDP协议与服务器对话

00:16:16.210 --> 00:16:18.512 align:middle
并通过隧道传输系统数据流量

00:16:20.347 --> 00:16:24.484 align:middle
我已经细化
NEPacket隧道提供者类

00:16:25.452 --> 00:16:28.288 align:middle
在我的扩展中将会调用这个类

00:16:28.355 --> 00:16:29.957 align:middle
以启动和停止我的VPN

00:16:30.390 --> 00:16:32.726 align:middle
在这里 我需要覆盖的最重要函数

00:16:32.793 --> 00:16:35.362 align:middle
startTunnelwithOptions
函数

00:16:35.596 --> 00:16:39.766 align:middle
当用户或系统要自动启动你的VPN时
将会调用这个函数

00:16:41.201 --> 00:16:45.005 align:middle
你会发现
它调用这个函数并传递其结果值

00:16:45.439 --> 00:16:49.610 align:middle
你可以使用这个函数来通知系统

00:16:49.676 --> 00:16:50.911 align:middle
你已经完成设置VPN

00:16:50.978 --> 00:16:53.580 align:middle
当你调用这个函数时
系统将知道你已经完成连接

00:16:53.647 --> 00:16:54.848 align:middle
而且准备就绪

00:16:57.484 --> 00:17:00.254 align:middle
前面我说过我的协议基于UDP

00:16:57.484 --> 00:17:00.254 align:middle
前面我说过我的协议基于UDP

00:17:00.587 --> 00:17:04.558 align:middle
在开始时 我想要
建立与服务器之间的UDP连接

00:17:06.960 --> 00:17:11.632 align:middle
为此需要创建一个NWUDP会话对象

00:17:12.299 --> 00:17:17.538 align:middle
这是我们已经为网络扩展框架
添加的众多便利性网络API之一

00:17:18.070 --> 00:17:19.406 align:middle
它可以帮助你

00:17:19.473 --> 00:17:22.675 align:middle
可靠高效地进行连接

00:17:23.143 --> 00:17:24.611 align:middle
因此UDP会话让我能够

00:17:24.678 --> 00:17:27.446 align:middle
连接到一个主机

00:17:27.513 --> 00:17:29.550 align:middle
它将为我完成所有的DNS解析工作

00:17:29.983 --> 00:17:33.187 align:middle
并且异步通知我是否已经准备就绪

00:17:33.887 --> 00:17:39.626 align:middle
我可以同时读写多个数据报文

00:17:39.693 --> 00:17:41.361 align:middle
以实现最高效的连接

00:17:43.430 --> 00:17:45.399 align:middle
现在让我们来实现这个函数

00:17:47.935 --> 00:17:49.736 align:middle
我首先要做的事情是

00:17:49.803 --> 00:17:51.471 align:middle
确定连接目标

00:17:51.538 --> 00:17:53.841 align:middle
我查看一下配置来获取服务器地址

00:17:54.241 --> 00:17:56.610 align:middle
这可能是一个IP地址或是主机名称

00:17:59.012 --> 00:18:01.915 align:middle
我这里加入一个NW主机端点

00:17:59.012 --> 00:18:01.915 align:middle
我这里加入一个NW主机端点

00:18:02.216 --> 00:18:05.853 align:middle
这是一个容器对象它接收地址

00:18:05.919 --> 00:18:08.322 align:middle
或主机名称并且将它们与

00:18:08.689 --> 00:18:09.923 align:middle
协议端口进行组合

00:18:13.193 --> 00:18:19.299 align:middle
然后我调用这个函数
开始DNS解析过程

00:18:19.733 --> 00:18:21.368 align:middle
建立服务器连接

00:18:22.603 --> 00:18:24.838 align:middle
此时系统开始执行这些操作

00:18:24.905 --> 00:18:27.641 align:middle
然后我等待需要读取和写入的事件

00:18:29.910 --> 00:18:34.248 align:middle
我执行KeyVO
以观察UDP会话的状态属性

00:18:34.314 --> 00:18:35.449 align:middle
以获得这些临时值

00:18:37.017 --> 00:18:40.120 align:middle
此至我的启动调用基本完成

00:18:40.187 --> 00:18:42.289 align:middle
我最后要做的事情是

00:18:42.456 --> 00:18:44.591 align:middle
保存在开始位置编写的此函数

00:18:44.925 --> 00:18:48.028 align:middle
因为我还没有完成我的VPN连接

00:18:48.962 --> 00:18:52.065 align:middle
因此我要声明一个
pendingStartCompletion

00:18:53.901 --> 00:18:56.870 align:middle
稍后我会保存它

00:18:58.305 --> 00:18:59.907 align:middle
好了 现在我要跳过

00:18:59.973 --> 00:19:02.009 align:middle
与服务器协商的部分

00:18:59.973 --> 00:19:02.009 align:middle
与服务器协商的部分

00:19:02.075 --> 00:19:05.212 align:middle
假设协议已经知道如何这样做

00:19:05.612 --> 00:19:08.749 align:middle
现在我将跳到已经分配地址

00:19:08.815 --> 00:19:09.850 align:middle
和其他网络设置的部分

00:19:09.917 --> 00:19:13.554 align:middle
将这些设置应用于系统并让系统知道

00:19:13.620 --> 00:19:14.988 align:middle
我们将要使用VPN

00:19:15.856 --> 00:19:20.861 align:middle
这是我编写的自定义函数

00:19:20.928 --> 00:19:22.930 align:middle
它说明我已经建立连接

00:19:24.164 --> 00:19:25.866 align:middle
接下来我要做的是

00:19:25.933 --> 00:19:29.169 align:middle
创建
NEPacketTunnelnetworksettings

00:19:29.236 --> 00:19:30.571 align:middle
这是一系列的设置

00:19:30.637 --> 00:19:32.105 align:middle
我可以在系统中应用这些设置

00:19:33.140 --> 00:19:35.876 align:middle
我可以设定IPv4设置

00:19:35.943 --> 00:19:37.778 align:middle
我已经指定了地址和子网

00:19:39.580 --> 00:19:41.381 align:middle
以及路由设置

00:19:41.448 --> 00:19:43.584 align:middle
在这个例子中
我想使用系统的默认路由

00:19:43.951 --> 00:19:47.287 align:middle
但是我也可以
设置一个较长的隧道分离路由列表

00:19:49.489 --> 00:19:52.860 align:middle
我可以定义隧道使用的开销字节

00:19:53.327 --> 00:19:55.963 align:middle
对于每个数据包规定使用多少字节

00:19:56.263 --> 00:19:57.931 align:middle
进行加密和封装

00:19:58.065 --> 00:20:02.069 align:middle
这样系统就知道
所发送的数据包的大小

00:19:58.065 --> 00:20:02.069 align:middle
这样系统就知道
所发送的数据包的大小

00:20:03.837 --> 00:20:05.973 align:middle
最后 我可以设定DNS设置

00:20:06.340 --> 00:20:09.309 align:middle
我可以设定分配的DNS服务器或域

00:20:10.777 --> 00:20:12.246 align:middle
为了将这些设置应用于系统

00:20:12.446 --> 00:20:15.082 align:middle
我只需调用此函数

00:20:15.549 --> 00:20:18.118 align:middle
在调用完成之后
我得到一个回调处理程序

00:20:18.552 --> 00:20:21.355 align:middle
让我知道已经成功应用设置

00:20:21.421 --> 00:20:23.957 align:middle
然后我可以调用此函数

00:20:24.024 --> 00:20:25.859 align:middle
让系统知道我已经启用VPN

00:20:26.927 --> 00:20:29.396 align:middle
这个功能很不错 我已经完成连接

00:20:29.897 --> 00:20:33.100 align:middle
但是现在我还不能
设置向前和向后数据传输路由

00:20:33.267 --> 00:20:35.402 align:middle
让我们来看看代码

00:20:38.872 --> 00:20:42.176 align:middle
前面杰米讲过
它的实现方法是这样的

00:20:42.242 --> 00:20:43.443 align:middle
我们有一个虚拟接口

00:20:43.911 --> 00:20:47.814 align:middle
将数据包发送给协议提供者

00:20:48.682 --> 00:20:49.983 align:middle
后者将数据发送给服务器

00:20:50.050 --> 00:20:51.485 align:middle
从服务器接收返回的数据包时

00:20:51.552 --> 00:20:53.554 align:middle
我们重新将数据包注入堆栈

00:20:54.988 --> 00:20:57.257 align:middle
我们首先从输出数据流开始

00:21:00.827 --> 00:21:03.230 align:middle
数据包隧道提供者具有
一个名为数据包流的属性

00:21:03.463 --> 00:21:04.531 align:middle
它表示你可以

00:21:04.598 --> 00:21:06.700 align:middle
读取和写入的虚拟接口

00:21:07.968 --> 00:21:10.304 align:middle
如果我调用此函数

00:21:11.138 --> 00:21:17.244 align:middle
系统将使用一组已经
发送至网络的数据包进行回调

00:21:20.881 --> 00:21:23.350 align:middle
我可以将这些数据包发送至
我的协议处理程序进行封装

00:21:23.617 --> 00:21:25.652 align:middle
和加密 然后生成

00:21:25.752 --> 00:21:28.355 align:middle
一组新的加密数据包流量

00:21:30.123 --> 00:21:33.193 align:middle
我可以轻松地将它们作为多个数据报文

00:21:33.727 --> 00:21:36.897 align:middle
一次性写入UDP会话以发送给服务器

00:21:37.731 --> 00:21:39.600 align:middle
这是在向外发送数据包时所需做的全部

00:21:41.535 --> 00:21:42.970 align:middle
接收数据包的方式与此类似

00:21:43.704 --> 00:21:47.241 align:middle
这里有一个函数接收UDP服务器

00:21:47.941 --> 00:21:50.377 align:middle
返回的数据包

00:21:54.448 --> 00:21:56.683 align:middle
我只需要将它们发送给我的协议

00:21:56.750 --> 00:22:00.921 align:middle
就可以解封它们生成IP数据包 然后

00:21:56.750 --> 00:22:00.921 align:middle
就可以解封它们生成IP数据包 然后

00:22:00.988 --> 00:22:02.956 align:middle
我可以将它们写入数据流量属性

00:22:07.227 --> 00:22:10.264 align:middle
现在 我建立了一个连接

00:22:10.330 --> 00:22:12.332 align:middle
并且可以进行读取和写入

00:22:14.034 --> 00:22:15.969 align:middle
让我们来看看实际效果

00:22:19.139 --> 00:22:21.475 align:middle
好的 这是我的设备

00:22:21.542 --> 00:22:24.745 align:middle
会看到我已经安装我的VPN APP

00:22:26.580 --> 00:22:28.515 align:middle
你会看到如果我进入Safari

00:22:28.582 --> 00:22:30.417 align:middle
尝试访问内部网站

00:22:30.617 --> 00:22:32.452 align:middle
现在我确实可以访问内部网站

00:22:35.789 --> 00:22:39.893 align:middle
我可以进入“我的VPN”APP
我点击“start VPN”

00:22:41.361 --> 00:22:42.362 align:middle
APP所做的事情是

00:22:42.429 --> 00:22:45.966 align:middle
在后台启动隧道数据包提供者

00:22:46.733 --> 00:22:50.571 align:middle
你可以看到状态栏中显示VPN图标

00:22:50.637 --> 00:22:52.873 align:middle
它实际上已经启动并建立连接

00:22:54.474 --> 00:22:56.143 align:middle
我可以返回Safari

00:22:56.210 --> 00:22:58.512 align:middle
看到我的内部网页已经加载

00:22:59.012 --> 00:23:03.283 align:middle
这表明我们在Swift中
编写的VPN协议提供者程序

00:22:59.012 --> 00:23:03.283 align:middle
这表明我们在Swift中
编写的VPN协议提供者程序

00:23:03.483 --> 00:23:05.619 align:middle
完全正常地运行 就是这么简单

00:23:11.425 --> 00:23:12.726 align:middle
交给杰米

00:23:14.494 --> 00:23:15.762 align:middle
好的 谢谢Tommy

00:23:16.263 --> 00:23:19.433 align:middle
刚才Tommy向我们介绍如何
创建一个数据包隧道提供者

00:23:19.967 --> 00:23:22.202 align:middle
这不仅容易实现而且功能十分强大

00:23:24.571 --> 00:23:27.007 align:middle
讨论Packet
Tunnel Provider对象

00:23:27.074 --> 00:23:30.811 align:middle
我想花一点时间介绍用于托管
APP的Per-App VPN

00:23:31.578 --> 00:23:37.251 align:middle
Per-App VPN十分适合
BYOD应用也就是使用你自己的设备

00:23:37.784 --> 00:23:40.621 align:middle
在BYOD应用中公司员工

00:23:40.687 --> 00:23:42.689 align:middle
希望使用他们自己的个人设备

00:23:42.923 --> 00:23:44.758 align:middle
连接他们的设备到公司的内部网络

00:23:44.825 --> 00:23:46.059 align:middle
访问网络资源

00:23:46.627 --> 00:23:48.996 align:middle
而且 他们不希望
他们的所有互联网访问流量

00:23:49.062 --> 00:23:51.198 align:middle
都通过企业VPN进行路由

00:23:51.999 --> 00:23:56.136 align:middle
另外  企业希望为员工提供访问权限

00:23:56.203 --> 00:23:58.238 align:middle
同时想要限制某些应用程序

00:23:58.472 --> 00:24:00.340 align:middle
访问他们的内部网络

00:23:58.472 --> 00:24:00.340 align:middle
访问他们的内部网络

00:24:01.341 --> 00:24:04.811 align:middle
这时适合使用Per-App VPN

00:24:05.579 --> 00:24:07.848 align:middle
利用Per-App VPN
你可以设置VPN

00:24:07.915 --> 00:24:11.151 align:middle
仅允许某些特定的托管应用使用VPN

00:24:12.653 --> 00:24:15.889 align:middle
这种设置方法是
使用Apple自己的MDM

00:24:15.956 --> 00:24:17.524 align:middle
MDM的含义是托管设备管理协议

00:24:18.926 --> 00:24:22.863 align:middle
你将设备注册到一个MDM服务

00:24:23.230 --> 00:24:25.032 align:middle
这个MDM服务就能够

00:24:25.332 --> 00:24:28.902 align:middle
提供相应的配置包括VPN配置

00:24:29.436 --> 00:24:31.371 align:middle
和托管应用程序

00:24:32.139 --> 00:24:36.610 align:middle
MDM服务还可以将这些托管应用程序

00:24:36.677 --> 00:24:39.646 align:middle
与Per-App VPN
配置进行关联以发送

00:24:39.713 --> 00:24:41.448 align:middle
Per-App VPN部署

00:24:43.183 --> 00:24:48.922 align:middle
现在我们支持Per-App VPN
实际上我们一直都通过

00:24:48.989 --> 00:24:51.024 align:middle
自定义App代理提供者支持它

00:24:51.625 --> 00:24:55.495 align:middle
在iOS 9和OS X
El Capitan中通过自定义

00:24:55.796 --> 00:24:58.999 align:middle
数据包隧道提供者
支持Per-App VPN

00:24:59.433 --> 00:25:03.937 align:middle
并且通过平台内置IPSEC客户端
支持Per-App VPN

00:24:59.433 --> 00:25:03.937 align:middle
并且通过平台内置IPSEC客户端
支持Per-App VPN

00:25:05.806 --> 00:25:10.244 align:middle
现在来看Per-App VPN
如何在网络数据路径中运行

00:25:11.011 --> 00:25:13.981 align:middle
有一个数据包隧道提供者它和前面一样

00:25:14.815 --> 00:25:18.252 align:middle
我们还有一个UTUN0接口
数据流量被路由到这个接口

00:25:19.152 --> 00:25:21.088 align:middle
另外有一个托管APP

00:25:21.355 --> 00:25:23.524 align:middle
链接到VPN配置

00:25:24.358 --> 00:25:29.229 align:middle
不同于按IP地址
将数据流量路由到UTUN0接口

00:25:29.296 --> 00:25:34.601 align:middle
现在将会按应用程序
将数据流量路由到UTUN0接口

00:25:35.068 --> 00:25:37.971 align:middle
只有这个托管应用程序才能访问VPN

00:25:38.572 --> 00:25:41.808 align:middle
如果用户使用其他非托管应用程序

00:25:42.309 --> 00:25:44.578 align:middle
在物理接口之外

00:25:44.645 --> 00:25:45.946 align:middle
连接到网络

00:25:46.013 --> 00:25:49.917 align:middle
即使它想要连接到与托管应用程序
相同的目标IP也不会成功

00:25:51.518 --> 00:25:54.021 align:middle
Per-App VPN的工作原理

00:25:54.354 --> 00:25:56.390 align:middle
Tommy将向我们简要介绍

00:25:56.456 --> 00:25:58.325 align:middle
如何配置Per-App VPN

00:25:58.992 --> 00:26:00.794 align:middle
好的 谢谢杰米

00:25:58.992 --> 00:26:00.794 align:middle
好的 谢谢杰米

00:26:01.361 --> 00:26:02.930 align:middle
让我们感到兴奋的是

00:26:03.197 --> 00:26:06.700 align:middle
现在每个人只需要
编写一个自定义协议程序

00:26:06.867 --> 00:26:09.303 align:middle
或者使用内置的IPSEC协议

00:26:09.469 --> 00:26:13.340 align:middle
就可以部署Per-App VPN
来提供良好的UID解决方案

00:26:15.342 --> 00:26:20.914 align:middle
前面杰米讲过
我们通过MDM(托管设备管理协议)

00:26:21.148 --> 00:26:26.920 align:middle
创建这些Per-App配置MDM将
选择VPN的配置文件

00:26:27.654 --> 00:26:29.890 align:middle
并且将托管应用程序

00:26:29.957 --> 00:26:31.191 align:middle
与这个VPN相关联

00:26:32.259 --> 00:26:36.964 align:middle
现在我将介绍如何修改
现有的VPN配置文件

00:26:37.264 --> 00:26:39.199 align:middle
使它配合Per-App VPN工作

00:26:39.299 --> 00:26:40.901 align:middle
这个配置文件

00:26:40.968 --> 00:26:43.437 align:middle
配置我刚才创建的APP

00:26:47.908 --> 00:26:50.544 align:middle
让我们来看VPN配置文件

00:26:50.611 --> 00:26:51.478 align:middle
这里有很多的内容

00:26:51.545 --> 00:26:52.813 align:middle
现在并不需要理解它们

00:26:52.880 --> 00:26:55.616 align:middle
我将高亮标出一些独特的部分

00:26:55.682 --> 00:26:57.918 align:middle
只需要进行三处修改

00:26:57.985 --> 00:27:00.821 align:middle
就可以让这个配置文件
配合Per-App VPN工作

00:26:57.985 --> 00:27:00.821 align:middle
就可以让这个配置文件
配合Per-App VPN工作

00:27:01.922 --> 00:27:03.290 align:middle
第一处是负载类型

00:27:03.590 --> 00:27:07.027 align:middle
通常情况下它是
com.Apple.vpn.managed

00:27:08.662 --> 00:27:15.035 align:middle
只需要在末尾加上applayer
就可设定为Per-App VPN

00:27:15.202 --> 00:27:17.538 align:middle
前面我们说过有多种类型的提供者

00:27:17.604 --> 00:27:20.274 align:middle
可以配合Per-App VPN工作

00:27:20.607 --> 00:27:22.809 align:middle
我们需要说明你想要使用哪种类型

00:27:23.210 --> 00:27:27.114 align:middle
在VPN负载内部我们用一个新的键值

00:27:27.181 --> 00:27:28.282 align:middle
表示提供者类型

00:27:28.982 --> 00:27:31.952 align:middle
你可以指定数据包隧道或App代理

00:27:32.119 --> 00:27:36.223 align:middle
在本例中你看到我的APP
使用数据包隧道协议

00:27:36.757 --> 00:27:38.125 align:middle
我指定了这个协议

00:27:39.660 --> 00:27:42.930 align:middle
最后一个
需要添加的字段名是VPN UUID

00:27:43.931 --> 00:27:47.000 align:middle
是一个任意字符串

00:27:47.234 --> 00:27:53.373 align:middle
作为VPN配置与
托管APP之间的关联符

00:27:53.440 --> 00:27:58.078 align:middle
当MDM服务器选择
托管APP时 将会使用

00:27:58.178 --> 00:27:59.980 align:middle
相同的VPN UUID标记它们

00:28:00.180 --> 00:28:04.785 align:middle
这样系统就知道只有这些APP才能

00:28:04.852 --> 00:28:06.320 align:middle
通过那个VPN路由数据流量

00:28:07.821 --> 00:28:10.924 align:middle
这个配置文件应该可以用于
Per-App VPN

00:28:13.327 --> 00:28:16.496 align:middle
我们希望你们能够创建

00:28:16.563 --> 00:28:18.465 align:middle
支持Per-App VPN的APP

00:28:19.199 --> 00:28:21.835 align:middle
希望你们能够轻松地利用它来进行开发

00:28:22.436 --> 00:28:24.037 align:middle
在你们进行开发时可能无法获得

00:28:24.104 --> 00:28:25.939 align:middle
一个完整的MDM解决方案

00:28:27.040 --> 00:28:31.845 align:middle
我们只能为你们提供开发版本支持

00:28:31.945 --> 00:28:32.946 align:middle
而不是发行版本支持

00:28:33.881 --> 00:28:36.416 align:middle
在信息Plist中指定将哪些APP

00:28:37.284 --> 00:28:39.586 align:middle
与你的VPN配置相关联

00:28:39.653 --> 00:28:41.688 align:middle
能够让你更容易地
测试Per-App VPN

00:28:43.457 --> 00:28:48.262 align:middle
让我们来看你的APP
的信息Plist 它很简短

00:28:48.328 --> 00:28:53.467 align:middle
我们看到一个新的键值名称为
NETest App Mapping

00:28:53.834 --> 00:28:55.569 align:middle
这是一个数组字典

00:28:55.636 --> 00:28:58.605 align:middle
键值与前面所述的UUID 相同

00:28:58.672 --> 00:29:01.708 align:middle
这个关联符将配置与APP关联在一起

00:28:58.672 --> 00:29:01.708 align:middle
这个关联符将配置与APP关联在一起

00:29:02.910 --> 00:29:08.248 align:middle
在数组内你可以指定想要
数据流量强制经过VPN的

00:29:08.348 --> 00:29:11.218 align:middle
APP的字符串束标识符

00:29:11.685 --> 00:29:13.754 align:middle
在本例中我将使用Box APP

00:29:15.656 --> 00:29:17.124 align:middle
让我们来看看它是什么样的

00:29:17.191 --> 00:29:21.195 align:middle
我已经在我的设备上安装
配置文件和信息Plist

00:29:23.430 --> 00:29:25.199 align:middle
这里有一个配置

00:29:25.699 --> 00:29:27.134 align:middle
用于我的Per-App VPN

00:29:27.201 --> 00:29:31.471 align:middle
你可以看到我
我设置为自定义数据包隧道协议

00:29:32.506 --> 00:29:36.910 align:middle
这里还列出了关联的APPBox

00:29:36.977 --> 00:29:38.779 align:middle
VPN配置内的一个关联APP

00:29:39.112 --> 00:29:41.415 align:middle
只需要进行设置
就可以让Per-App VPN

00:29:41.481 --> 00:29:44.351 align:middle
配合你的协议工作 谢谢

00:29:49.623 --> 00:29:50.757 align:middle
好的 谢谢Tommy

00:29:50.991 --> 00:29:54.494 align:middle
Per-App VPN十分适合

00:29:54.561 --> 00:29:57.164 align:middle
BYOD部署能够为公司员工

00:29:57.231 --> 00:29:58.799 align:middle
提供良好的用户体验

00:29:58.866 --> 00:30:00.801 align:middle
我们强烈鼓励你部署它

00:29:58.866 --> 00:30:00.801 align:middle
我们强烈鼓励你部署它

00:30:03.704 --> 00:30:08.509 align:middle
接下来我想介绍
NEApp代理提供者API

00:30:09.243 --> 00:30:12.980 align:middle
现在任何App代理提供者
都可以独占性地配合

00:30:13.247 --> 00:30:14.548 align:middle
Per-App VPN工作

00:30:15.616 --> 00:30:17.918 align:middle
让我们来看它们是如何工作的

00:30:17.985 --> 00:30:19.987 align:middle
以及它们与数据包隧道提供者之间区别

00:30:20.487 --> 00:30:24.358 align:middle
我们有一个托管APP
一个在系统上系统运行的

00:30:25.092 --> 00:30:26.793 align:middle
APP代理提供者APP想要连接到

00:30:26.860 --> 00:30:28.729 align:middle
内部网络资源

00:30:29.396 --> 00:30:32.866 align:middle
不同于将IP
数据包路由到UTUN0接口

00:30:34.268 --> 00:30:37.137 align:middle
托管APP写入到其socket的

00:30:37.204 --> 00:30:40.007 align:middle
数据被直接转发到代理提供者

00:30:41.241 --> 00:30:45.212 align:middle
在那里 NEApp代理提供者
可以将数据发送到代理服务器

00:30:45.879 --> 00:30:47.147 align:middle
代理服务器的返回数据

00:30:47.214 --> 00:30:50.250 align:middle
将被发送回代理提供者

00:30:50.450 --> 00:30:51.952 align:middle
后者将数据注入socket

00:30:52.019 --> 00:30:53.820 align:middle
然后发送给APP

00:30:55.055 --> 00:31:00.060 align:middle
添加NEApp代理提供者API原因

00:30:55.055 --> 00:31:00.060 align:middle
添加NEApp代理提供者API原因

00:31:00.394 --> 00:31:01.662 align:middle
实际上跟服务器有关

00:31:01.762 --> 00:31:03.964 align:middle
你可以连接到这些透明的

00:31:04.031 --> 00:31:04.965 align:middle
网络代理服务器

00:31:05.499 --> 00:31:10.537 align:middle
这些服务器通常比配置完好的
IP层VPN更容易部署

00:31:11.038 --> 00:31:15.776 align:middle
你不必配置虚拟IP
以分配给UTUN0接口

00:31:16.376 --> 00:31:19.213 align:middle
而且它们的扩展性更好

00:31:19.446 --> 00:31:21.782 align:middle
我们提供NEApp代理提供者API

00:31:21.849 --> 00:31:23.817 align:middle
来连接到这些服务器

00:31:26.386 --> 00:31:30.557 align:middle
iOS 9和
OS X El Capitan中的

00:31:30.757 --> 00:31:35.996 align:middle
APP代理提供者新增功能是
不仅能够代理TCP流量

00:31:36.063 --> 00:31:37.364 align:middle
而且能够代理UDP流量

00:31:40.667 --> 00:31:41.935 align:middle
这里有一个托管APP

00:31:42.002 --> 00:31:45.305 align:middle
用它来描述在物理接口之外进行连接

00:31:47.641 --> 00:31:51.879 align:middle
这是
NETunnel提供者系列API

00:31:52.112 --> 00:31:54.948 align:middle
你可以使用这些API为你的隧道协议

00:31:55.015 --> 00:31:56.216 align:middle
创建客户端

00:31:56.416 --> 00:31:58.785 align:middle
用于连接到企业VPN服务器

00:32:00.921 --> 00:32:01.788 align:middle
现在让我们来看

00:32:01.855 --> 00:32:04.157 align:middle
NEFilter提供者系列API

00:32:04.291 --> 00:32:06.760 align:middle
我们可以使用这些API为学校创建

00:32:06.827 --> 00:32:07.961 align:middle
网络内容过滤解决方案

00:32:09.963 --> 00:32:13.834 align:middle
目前学校可以
使用几种方法利用iOS设备

00:32:14.234 --> 00:32:15.369 align:middle
进行网络内容过滤

00:32:17.671 --> 00:32:22.376 align:middle
他们可以部署现场内容过滤器
将设备放在他们的局域网内

00:32:23.010 --> 00:32:25.479 align:middle
将所有互联网流量路由

00:32:25.546 --> 00:32:26.780 align:middle
经过内容过滤器

00:32:27.281 --> 00:32:28.982 align:middle
过滤内容

00:32:29.316 --> 00:32:31.218 align:middle
其缺点是 这种方法

00:32:31.285 --> 00:32:32.986 align:middle
只能在学校局域网内使用

00:32:33.153 --> 00:32:35.989 align:middle
如果学生想要把学校iPad

00:32:36.190 --> 00:32:38.325 align:middle
或iPhone带回家
当他们回家后他们要么

00:32:38.659 --> 00:32:43.997 align:middle
完全不能浏览互联网内容
或者互联网内容将不会过滤

00:32:44.364 --> 00:32:45.866 align:middle
这样可不好

00:32:47.401 --> 00:32:49.336 align:middle
为了解决这种问题

00:32:49.403 --> 00:32:52.139 align:middle
学校可以部署代理将它放入互联网接口

00:32:52.606 --> 00:32:54.942 align:middle
将所有互联网流量路由经过代理

00:32:55.008 --> 00:32:56.276 align:middle
以进行流量过滤

00:32:56.877 --> 00:33:00.914 align:middle
其缺点是学校必须部署和维护代理

00:32:56.877 --> 00:33:00.914 align:middle
其缺点是学校必须部署和维护代理

00:33:01.515 --> 00:33:04.384 align:middle
并不是所有的学校
都有足够的资源来这样做

00:33:06.286 --> 00:33:08.622 align:middle
另一个解决方案是使用全隧道VPN

00:33:08.822 --> 00:33:11.091 align:middle
与全局代理一样它也有很多问题

00:33:11.158 --> 00:33:13.293 align:middle
而且可能更难以部署和维护

00:33:14.361 --> 00:33:16.463 align:middle
对学校来说最好的解决方案是

00:33:16.530 --> 00:33:18.765 align:middle
在设备上过滤网络内容

00:33:18.966 --> 00:33:20.167 align:middle
在离开设备之前

00:33:20.400 --> 00:33:23.203 align:middle
和实际提供给用户之前

00:33:24.438 --> 00:33:28.942 align:middle
NEFilter提供者
系列API允许这样做

00:33:31.144 --> 00:33:35.115 align:middle
目前NEFilter提供者
API只能在iOS中使用

00:33:36.049 --> 00:33:37.784 align:middle
通过使用API可以执行

00:33:37.851 --> 00:33:41.321 align:middle
网络内容态评估

00:33:43.891 --> 00:33:46.994 align:middle
能够随时更新过滤规则

00:33:47.561 --> 00:33:49.730 align:middle
例如 限制网络下载

00:33:51.565 --> 00:33:53.767 align:middle
当用户访问一些禁止访问的内容时

00:33:53.834 --> 00:33:56.637 align:middle
你可以发送一个
可自定义的禁止访问页面

00:33:56.770 --> 00:33:58.772 align:middle
提示禁止访问这些内容

00:34:03.043 --> 00:34:06.880 align:middle
目前NEFilter提供者
只能在受监管设备上运行

00:34:06.947 --> 00:34:08.482 align:middle
其目标用户是学校

00:34:08.782 --> 00:34:11.985 align:middle
学校拥有自己的设备并对设备加锁

00:34:12.052 --> 00:34:15.022 align:middle
使学生不能安装新的APP或更改设置

00:34:15.755 --> 00:34:17.658 align:middle
这时过滤器提供者正好派上用场

00:34:20.194 --> 00:34:23.764 align:middle
让我们来看
过滤器提供者如何在数据路径中工作

00:34:24.630 --> 00:34:27.501 align:middle
有个NEFilter数据提供者扩展

00:34:27.568 --> 00:34:28.969 align:middle
运行在系统上

00:34:29.335 --> 00:34:32.306 align:middle
它的作用是允许和禁止

00:34:32.371 --> 00:34:34.608 align:middle
网络内容经过系统

00:34:36.076 --> 00:34:38.612 align:middle
由于它能够访问所有网络内容

00:34:38.911 --> 00:34:40.914 align:middle
我们已经锁定这个数据提供者

00:34:40.981 --> 00:34:42.114 align:middle
让它在只读沙盒中运行

00:34:42.649 --> 00:34:43.984 align:middle
它不能访问网络

00:34:44.318 --> 00:34:46.520 align:middle
而只能读取磁盘

00:34:48.755 --> 00:34:51.891 align:middle
我们还提供另外一个扩展

00:34:51.992 --> 00:34:54.928 align:middle
即NEFilter控制提供者
它的作用是

00:34:54.995 --> 00:34:57.331 align:middle
为过滤器数据提供者提供数据

00:34:57.397 --> 00:34:58.498 align:middle
使过滤器能够发挥作用

00:34:58.732 --> 00:35:00.834 align:middle
例如互联网下载规则

00:34:58.732 --> 00:35:00.834 align:middle
例如互联网下载规则

00:35:01.168 --> 00:35:02.803 align:middle
要求将下载数据定入到

00:35:02.970 --> 00:35:04.705 align:middle
数据提供者可以访问的磁盘位置

00:35:07.808 --> 00:35:11.612 align:middle
现在假设用户使用
Web kit 运行一个APP

00:35:12.079 --> 00:35:17.951 align:middle
是吧
在它们的UI中有个UI Web视图

00:35:18.018 --> 00:35:19.586 align:middle
进入Web kit 的所有内容

00:35:19.653 --> 00:35:22.890 align:middle
被传输给过滤器提供者

00:35:22.956 --> 00:35:25.125 align:middle
他决定允许或禁止该数据

00:35:27.461 --> 00:35:30.764 align:middle
并非所有APP都使用Web kit

00:35:31.431 --> 00:35:34.301 align:middle
有一些APP使用其他网络API

00:35:34.368 --> 00:35:36.837 align:middle
例如NSURL会话NSURL连接

00:35:37.070 --> 00:35:38.472 align:middle
以及部分Network API

00:35:39.072 --> 00:35:43.911 align:middle
对于这些API
我们在socket层中添加一个挂钩

00:35:43.977 --> 00:35:45.913 align:middle
将流量引导至过滤器数据提供者

00:35:45.979 --> 00:35:48.348 align:middle
这样数据提供者就进行允许/禁止决定

00:35:50.184 --> 00:35:52.920 align:middle
你可以看到过滤器控制提供者

00:35:52.986 --> 00:35:54.855 align:middle
和数据提供者一起在设备上

00:35:54.922 --> 00:35:58.458 align:middle
提供全面的内容过滤解决方案

00:36:00.594 --> 00:36:02.095 align:middle
因此对于Web kit APP来说

00:36:02.729 --> 00:36:04.998 align:middle
当数据提供者做出禁止决定

00:36:05.065 --> 00:36:07.968 align:middle
禁止某些内容访问操作时

00:36:08.702 --> 00:36:12.272 align:middle
数据提供者可以命令Web kit

00:36:12.506 --> 00:36:14.007 align:middle
显示禁止访问页面

00:36:14.341 --> 00:36:15.943 align:middle
这是一个禁止访问页面示例

00:36:16.677 --> 00:36:20.447 align:middle
你可以使用API通过多种方式

00:36:20.514 --> 00:36:21.715 align:middle
自定义这个禁止访问页面

00:36:21.782 --> 00:36:23.550 align:middle
你可以更改显示内容结构

00:36:23.817 --> 00:36:25.953 align:middle
例如可以显示学校名称

00:36:26.520 --> 00:36:29.623 align:middle
可以自定义这个请求访问链接

00:36:30.123 --> 00:36:32.292 align:middle
你可选择不显示链接

00:36:32.359 --> 00:36:35.128 align:middle
不向用户提供内容访问选项

00:36:35.896 --> 00:36:39.132 align:middle
如果你需要显示内容可以显示链接文本

00:36:39.600 --> 00:36:40.968 align:middle
和链接目标

00:36:41.168 --> 00:36:45.138 align:middle
这个目标指向
Web服务用户可以访问此服务

00:36:45.205 --> 00:36:46.507 align:middle
请求访问被禁止的内容

00:36:48.575 --> 00:36:52.212 align:middle
这就是NEFilter
提供者系列API的原理

00:36:52.412 --> 00:36:55.249 align:middle
你可以使用这些API为学校
创建功能强大、全面的

00:36:55.682 --> 00:36:59.086 align:middle
基于设备的网络内容过滤解决方案

00:37:01.922 --> 00:37:06.894 align:middle
这是今天网络扩展API的所有内容

00:37:07.895 --> 00:37:10.330 align:middle
你可以使用这些APP

00:37:10.797 --> 00:37:12.966 align:middle
开发一些不错的APP

00:37:13.333 --> 00:37:17.271 align:middle
你可以开发APP以便于
使用Wi-Fi热点、个人VPN服务

00:37:17.871 --> 00:37:19.439 align:middle
企业远程访问VPN

00:37:19.706 --> 00:37:22.242 align:middle
还可以为学校开发基于设备的

00:37:22.309 --> 00:37:23.510 align:middle
网络内容过滤解决方案

00:37:24.912 --> 00:37:27.614 align:middle
你可以看到这些API功能很强大

00:37:27.881 --> 00:37:32.786 align:middle
你可以使用这些API扩展和
自定义Apple平台的核心网络功能

00:37:33.754 --> 00:37:36.890 align:middle
因为这些是非常强大的API要求你们

00:37:36.957 --> 00:37:39.293 align:middle
具备一定的能力来熟练使用它们

00:37:40.427 --> 00:37:42.062 align:middle
为了使用NEVPN管理器API

00:37:42.129 --> 00:37:45.599 align:middle
你需要在项目设置的Xcode中

00:37:45.866 --> 00:37:47.901 align:middle
选择个人VPN功能

00:37:50.270 --> 00:37:54.241 align:middle
为了使用热点
帮助器API、NETunnel系列

00:37:54.308 --> 00:37:57.211 align:middle
API和
NEFilter提供者系列API

00:37:57.711 --> 00:38:00.113 align:middle
你需要查看其他一些专门资料

00:37:57.711 --> 00:38:00.113 align:middle
你需要查看其他一些专门资料

00:38:00.848 --> 00:38:03.450 align:middle
你可以发送电子邮件至
networkextension@Apple.com

00:38:03.517 --> 00:38:05.118 align:middle
来索取这些资料

00:38:05.853 --> 00:38:07.588 align:middle
发送一份问卷调查给你你需要填写问卷

00:38:07.855 --> 00:38:12.492 align:middle
并寄回给我们让我们能够处理你的请求

00:38:12.693 --> 00:38:15.863 align:middle
我们很高兴将这些API介绍给你们

00:38:15.929 --> 00:38:17.931 align:middle
我们期待收到你们的请求

00:38:18.565 --> 00:38:20.334 align:middle
为你们提供这些API

00:38:23.537 --> 00:38:25.272 align:middle
你们需要做的是

00:38:26.039 --> 00:38:27.875 align:middle
设置Captive
Network APP端口

00:38:27.941 --> 00:38:33.814 align:middle
以使用NEHotspot帮助器
它可无缝连接

00:38:35.315 --> 00:38:38.519 align:middle
在你的个人VPN APP中
使用NEManager API

00:38:38.886 --> 00:38:41.855 align:middle
为使用你的个人VPN的用户提供

00:38:42.055 --> 00:38:43.991 align:middle
无缝的用户体验

00:38:46.093 --> 00:38:47.694 align:middle
你可以使用NETunnel

00:38:47.761 --> 00:38:52.165 align:middle
提供者来创建功能强大的
自定义企业VPN APP

00:38:53.300 --> 00:38:54.535 align:middle
来连接到你的VPN服务器

00:38:56.470 --> 00:38:58.805 align:middle
你可以使用MDM来部署
Per-App VPN

00:38:58.872 --> 00:39:01.642 align:middle
提供良好的BYOD用户体验

00:38:58.872 --> 00:39:01.642 align:middle
提供良好的BYOD用户体验

00:39:04.178 --> 00:39:06.713 align:middle
还可以
使用NEFilter提供者API

00:39:06.780 --> 00:39:10.484 align:middle
为学校创建动态的
基于设备的网络内容过滤解决方案

00:39:13.754 --> 00:39:15.556 align:middle
在这里你可以获得更多的信息

00:39:15.622 --> 00:39:18.559 align:middle
但是 这些文档还没有发布
它们即将发布

00:39:18.625 --> 00:39:21.628 align:middle
请经常在开发者网站上搜索相关内容

00:39:22.462 --> 00:39:24.631 align:middle
另外示例代码还不是很完善

00:39:25.032 --> 00:39:26.934 align:middle
请经常搜索简单的隧道应用示例

00:39:27.367 --> 00:39:29.303 align:middle
我们会发布一些不错的示例代码

00:39:29.369 --> 00:39:30.938 align:middle
但是目前还没有完成

00:39:31.505 --> 00:39:33.273 align:middle
请经常搜索它们

00:39:36.143 --> 00:39:38.345 align:middle
如果你想了解更多信息

00:39:38.712 --> 00:39:41.949 align:middle
请参与开发论坛
联系开发人员技术支持部门

00:39:42.516 --> 00:39:45.052 align:middle
可以联系我们的主要讲师
保罗·丹博

00:39:45.619 --> 00:39:51.024 align:middle
可将网络扩展相关问题发送到这个地址

00:39:54.294 --> 00:39:55.395 align:middle
还有其他一些讲座

00:39:55.462 --> 00:39:57.064 align:middle
也希望你们给予关注

00:39:57.130 --> 00:39:58.665 align:middle
特别介绍今天上午11:00

00:39:58.832 --> 00:40:02.369 align:middle
举行的其他核心操作系统网络功能讲座

00:39:58.832 --> 00:40:02.369 align:middle
举行的其他核心操作系统网络功能讲座

00:40:02.436 --> 00:40:04.238 align:middle
将会介绍APP开发和下一代网络

00:40:05.572 --> 00:40:07.508 align:middle
谢谢你们参加讲座 祝你们愉快
