WEBVTT

00:00:19.620 --> 00:00:23.724 align:middle
MapKit的最新内容

00:00:28.195 --> 00:00:29.229 align:middle
大家下午好

00:00:29.463 --> 00:00:30.964 align:middle
欢迎来到206号讲座

00:00:31.231 --> 00:00:32.732 align:middle
本次讲座是关于
《MapKit的最新内容》

00:00:33.300 --> 00:00:34.501 align:middle
我是苏米特·隆卡尔

00:00:34.568 --> 00:00:36.303 align:middle
我是在地图团队工作的软件工程师

00:00:36.670 --> 00:00:39.239 align:middle
今天下午的讲座内容很多

00:00:39.439 --> 00:00:41.241 align:middle
那我们闲话少说直接开始

00:00:42.509 --> 00:00:45.546 align:middle
开始之前
我们先来看看今天的讲座日程

00:00:46.079 --> 00:00:50.350 align:middle
今天第一个话题是
现有MapKit API的功能改进

00:00:50.584 --> 00:00:52.886 align:middle
这里我主要介绍新功能

00:00:53.120 --> 00:00:54.888 align:middle
不好意思 我主要探讨

00:00:55.789 --> 00:00:59.026 align:middle
我们新增的API功能
以支持现有的功能

00:00:59.259 --> 00:01:01.261 align:middle
之后
我会谈谈Transit

00:00:59.259 --> 00:01:01.261 align:middle
之后
我会谈谈Transit

00:01:01.562 --> 00:01:04.798 align:middle
我们主要关注MapKit中
的Transit问题

00:01:05.199 --> 00:01:07.100 align:middle
最后是Flyover

00:01:07.434 --> 00:01:09.937 align:middle
Flyover是
MapKit中的全新Map Type

00:01:10.003 --> 00:01:13.307 align:middle
iOS 6起
可以运用在iOS的应用中

00:01:13.540 --> 00:01:15.309 align:middle
现在我们就展示给大家看

00:01:15.576 --> 00:01:18.312 align:middle
关于这个话题
我们还准备了许多演示

00:01:18.579 --> 00:01:21.315 align:middle
这样大家可以看到所有这些新
增API是怎样工作的

00:01:21.782 --> 00:01:22.716 align:middle
大致是这些

00:01:22.783 --> 00:01:24.651 align:middle
接下来我们直接
介绍今天首个话题

00:01:24.818 --> 00:01:26.587 align:middle
现有API的改进

00:01:30.991 --> 00:01:33.627 align:middle
根据诸位开发人员的提议和要求

00:01:33.827 --> 00:01:35.729 align:middle
今年我们下大力气

00:01:35.796 --> 00:01:38.932 align:middle
确保大家和你们的应用能够充
分利用MapKit的功能

00:01:39.900 --> 00:01:45.205 align:middle
这些新增的API可以使你在
应用中自定义MapKit

00:01:45.472 --> 00:01:47.541 align:middle
同样可以改善用户体验

00:01:47.841 --> 00:01:49.376 align:middle
对于像诸位这样的开发人员来说

00:01:49.443 --> 00:01:51.578 align:middle
这意味着诸位会减少编码量

00:01:51.912 --> 00:01:53.847 align:middle
我们现在来逐个看这些API

00:01:54.214 --> 00:01:56.884 align:middle
先来看看
Pin Color Customization

00:01:59.119 --> 00:02:02.022 align:middle
MapKit图钉也叫
MKAnnotationView

00:01:59.119 --> 00:02:02.022 align:middle
MapKit图钉也叫
MKAnnotationView

00:02:02.189 --> 00:02:04.758 align:middle
从一开始它们就是
MapKit的重要组成部分

00:02:05.192 --> 00:02:09.429 align:middle
它们可以在地图上
确定任何单个图钉的具体位置

00:02:09.863 --> 00:02:13.467 align:middle
但谈及自定义的时候
我们却没有太多可以修改的

00:02:13.734 --> 00:02:18.172 align:middle
你只能将之设为
红色或绿色或紫色

00:02:18.438 --> 00:02:19.706 align:middle
你没有其他选择

00:02:19.773 --> 00:02:24.144 align:middle
从iOS3起 你只有这三种选择

00:02:24.611 --> 00:02:28.715 align:middle
现在我们来看
可以实现自定义的新款API

00:02:29.149 --> 00:02:30.217 align:middle
我们把它设定为

00:02:30.284 --> 00:02:32.986 align:middle
MKPinAnnotationView
的属性

00:02:33.253 --> 00:02:34.655 align:middle
叫做pinTintColor

00:02:34.721 --> 00:02:39.259 align:middle
在iOS上 叫做UIColor
在OS X上 是NSColor

00:02:39.660 --> 00:02:42.429 align:middle
之后我們也称其为
UIColor和NSColor

00:02:42.596 --> 00:02:45.732 align:middle
这意味着在地图上你有
数百万不同颜色可以选择

00:02:47.167 --> 00:02:50.370 align:middle
我希望借此机会指出旧版API

00:02:50.437 --> 00:02:52.940 align:middle
即图钉颜色设置的不足之处

00:02:53.307 --> 00:02:55.576 align:middle
因此如果你的应用软件
还在用这款API

00:02:55.843 --> 00:02:58.979 align:middle
一定要升级到
我们正在介绍的最新版API

00:02:59.680 --> 00:03:02.583 align:middle
这就是关于
图钉颜色自定义的内容

00:02:59.680 --> 00:03:02.583 align:middle
这就是关于
图钉颜色自定义的内容

00:03:02.649 --> 00:03:04.952 align:middle
接下来是
Callout自定义

00:03:05.018 --> 00:03:06.920 align:middle
在详细介绍
callouts前

00:03:06.987 --> 00:03:09.089 align:middle
先来说说什么是
callout

00:03:09.456 --> 00:03:11.458 align:middle
对于已经使用这个功能
很久的朋友来说

00:03:11.692 --> 00:03:13.627 align:middle
就当是温故而知新吧

00:03:14.027 --> 00:03:15.229 align:middle
那什么是callout呢

00:03:15.429 --> 00:03:19.099 align:middle
callout就是点击注释
时 跳出来的那个白色气泡

00:03:19.499 --> 00:03:21.835 align:middle
主要由四部分构成

00:03:22.102 --> 00:03:23.036 align:middle
其一是标题

00:03:23.370 --> 00:03:26.473 align:middle
其二 紧接在标题下面的副标题

00:03:26.807 --> 00:03:29.676 align:middle
然后是右辅助视图和左辅助视图

00:03:30.177 --> 00:03:35.015 align:middle
通常情况下这四部分足以
向我们展示和提供该点

00:03:35.082 --> 00:03:40.320 align:middle
和它们所代表的座标的信息

00:03:40.787 --> 00:03:43.657 align:middle
但是当内容数量增加时就会出现问题

00:03:44.224 --> 00:03:46.994 align:middle
例如 在这个callout中

00:03:47.461 --> 00:03:50.464 align:middle
你可以看到副标题就附在这点上

00:03:51.064 --> 00:03:55.035 align:middle
那么怎么才能自定义callout
来满足应用需求呢

00:03:55.335 --> 00:03:58.338 align:middle
事实证明 这也是研发人员一
直以来试图解决的问题

00:03:59.339 --> 00:04:00.908 align:middle
有时遇到这样的问题

00:03:59.339 --> 00:04:00.908 align:middle
有时遇到这样的问题

00:04:01.508 --> 00:04:04.778 align:middle
在地图软件中点击那个点后

00:04:05.012 --> 00:04:07.414 align:middle
会跳出类似这样的东西

00:04:07.714 --> 00:04:10.450 align:middle
点击注释时你会得到一个POI

00:04:10.517 --> 00:04:12.419 align:middle
和带有Yelp点评
功能的callout

00:04:12.653 --> 00:04:16.957 align:middle
为了实现类似的行为

00:04:17.190 --> 00:04:19.091 align:middle
我们见过开发人员做过这样的事情

00:04:19.493 --> 00:04:21.461 align:middle
他们把Emojis放入副标题中

00:04:21.728 --> 00:04:23.430 align:middle
我是说 这种办法
对这类情况还是可以的

00:04:23.797 --> 00:04:27.134 align:middle
可是当处理更复杂的情况
比如像这种情况又会怎样呢？

00:04:27.434 --> 00:04:29.570 align:middle
结果发现这不是个好的办法

00:04:29.937 --> 00:04:32.973 align:middle
为了解决这个问题
我们来介绍一个新的办法

00:04:33.407 --> 00:04:36.877 align:middle
它可以帮你自定义callout

00:04:37.110 --> 00:04:40.747 align:middle
我们这里介绍的属性叫做
detailCalloutAccessoryView

00:04:40.814 --> 00:04:45.452 align:middle
在iOS上 会用到UIView
在OS X上 则是NSView

00:04:45.819 --> 00:04:48.155 align:middle
那么这是个UIView和NSView

00:04:48.322 --> 00:04:50.991 align:middle
这意谓着可以更大限度地实现自定义

00:04:51.191 --> 00:04:53.493 align:middle
那么即便想使用也可以这么做

00:04:53.894 --> 00:04:58.065 align:middle
这会开启无数
自定义callout的可能

00:04:58.565 --> 00:05:03.837 align:middle
同时这些callout都
支持从右到左的语言自动排版

00:04:58.565 --> 00:05:03.837 align:middle
同时这些callout都
支持从右到左的语言自动排版

00:05:03.904 --> 00:05:07.674 align:middle
也就是说所有的功能已准备好
只需你输入一行代码即可

00:05:08.041 --> 00:05:11.612 align:middle
我们来快速看看示例代码
以及怎么在应用中使用

00:05:12.112 --> 00:05:16.650 align:middle
这里我有一个回调函数
当你点击注释时就会执行该函数

00:05:17.384 --> 00:05:21.488 align:middle
先来设置
detailCalloutAccessory属性

00:05:21.655 --> 00:05:24.925 align:middle
detailCalloutAccessoryView
属性 作为UIImageView

00:05:24.992 --> 00:05:28.328 align:middle
大家来看 我放了一个泰姬陵
的图片在callout中

00:05:28.662 --> 00:05:31.632 align:middle
这些就是自定义
callout所要做的

00:05:31.832 --> 00:05:32.666 align:middle
怎么样 很棒吧？

00:05:38.172 --> 00:05:40.707 align:middle
正如我刚才所说的这只是
UIView和NSView

00:05:40.841 --> 00:05:43.043 align:middle
我们非常高兴
能为大家提供这个功能

00:05:43.110 --> 00:05:45.479 align:middle
来看看你们能用它做些什么

00:05:45.913 --> 00:05:48.415 align:middle
希望我们很快就能看到结果

00:05:48.949 --> 00:05:51.051 align:middle
这就是关于Callout
自定义的所有内容

00:05:51.251 --> 00:05:53.453 align:middle
我们来继续讲地图自定义

00:05:54.788 --> 00:05:58.559 align:middle
在这个特定的话题中
我们将介绍新版API

00:05:58.725 --> 00:06:01.328 align:middle
它可以帮助大家控制
在Map View上进行的内容

00:05:58.725 --> 00:06:01.328 align:middle
它可以帮助大家控制
在Map View上进行的内容

00:06:01.395 --> 00:06:03.530 align:middle
比如在你所有的应用程序中
有个地图程序

00:06:03.864 --> 00:06:05.999 align:middle
怎样才能控制
Map View的内容呢？

00:06:06.600 --> 00:06:10.871 align:middle
如今这些API在地图程序中
已经使用了好多年

00:06:11.104 --> 00:06:12.706 align:middle
现在我们就给大家看看

00:06:13.207 --> 00:06:15.242 align:middle
首先来看交通状况

00:06:15.943 --> 00:06:18.946 align:middle
现在你可以在Map View中
显示任何交通高峰

00:06:19.012 --> 00:06:23.050 align:middle
你只需要在
Map View上插面小旗

00:06:23.116 --> 00:06:24.718 align:middle
这个叫做
shows Traffic

00:06:24.818 --> 00:06:25.853 align:middle
与交通状况功能相似的

00:06:26.086 --> 00:06:28.922 align:middle
我们还要介绍
显示或隐藏比例尺的方法

00:06:29.356 --> 00:06:34.661 align:middle
你可以在Map View
左上角显示或隐藏比例尺

00:06:34.728 --> 00:06:37.798 align:middle
同样的
你还可以显示或隐藏指南针

00:06:38.999 --> 00:06:43.170 align:middle
你可能注意到了这些API与
现有的API很相似

00:06:43.237 --> 00:06:46.039 align:middle
比如showsPointsOfInterest
或showsBuilding

00:06:46.106 --> 00:06:48.342 align:middle
我们相信通过使用这些API

00:06:48.509 --> 00:06:51.545 align:middle
你可以在自己的应用中
自定义Map View

00:06:51.912 --> 00:06:53.947 align:middle
并获得实现棒的用户体验

00:06:54.448 --> 00:06:55.816 align:middle
这就是地图自定义

00:06:57.951 --> 00:07:00.787 align:middle
除了地图和这些谈过的API外

00:06:57.951 --> 00:07:00.787 align:middle
除了地图和这些谈过的API外

00:07:01.188 --> 00:07:03.590 align:middle
我们对MapKit也有很多改进

00:07:04.324 --> 00:07:05.993 align:middle
首先是时区支持

00:07:06.293 --> 00:07:09.329 align:middle
我们在MK地图项增添了时区属性

00:07:09.596 --> 00:07:12.933 align:middle
使用这个属性可以获得相关的时区

00:07:13.267 --> 00:07:15.202 align:middle
可以和CLGeocoder一起使用

00:07:15.602 --> 00:07:18.605 align:middle
因此你可以用一个特定的坐标
找到相关的时区

00:07:18.939 --> 00:07:21.074 align:middle
你也可以和MK本地搜索一起使用

00:07:21.408 --> 00:07:26.647 align:middle
这样就可以搜索感兴趣的区域
或任何你想查找的内容

00:07:26.713 --> 00:07:29.082 align:middle
还可以找到相关时区

00:07:29.683 --> 00:07:32.653 align:middle
此外
我们还对MapKit做了诸多改进

00:07:32.719 --> 00:07:34.421 align:middle
以实现更好的Swift兼容性

00:07:34.621 --> 00:07:36.590 align:middle
同时我们还增加了
WatchKit支持

00:07:37.090 --> 00:07:40.994 align:middle
从而可以在手表上
启动你自己的地图程序

00:07:41.361 --> 00:07:46.567 align:middle
这些就是我们对MapKit
做的所有改进

00:07:47.000 --> 00:07:48.268 align:middle
我们来继续讲下一个话题

00:07:48.435 --> 00:07:50.737 align:middle
同时这也是我个人最喜欢的话题
Transit

00:07:54.208 --> 00:07:57.211 align:middle
昨天的讲座很令人兴奋

00:07:57.277 --> 00:08:00.814 align:middle
同时我们也推出了地图程序
的新功能 Transit

00:07:57.277 --> 00:08:00.814 align:middle
同时我们也推出了地图程序
的新功能 Transit

00:08:01.081 --> 00:08:04.351 align:middle
今天我们主要介绍这对于
MapKit而言意味什么

00:08:04.852 --> 00:08:07.221 align:middle
在这个功能方面
我们已经做了许多工作

00:08:07.554 --> 00:08:12.726 align:middle
在设计该功能时
我们将用户放在开发过程的中心位置

00:08:13.260 --> 00:08:17.397 align:middle
为了在你的应用程序中提供类似的体验

00:08:17.598 --> 00:08:21.969 align:middle
我们希望同过地图软件给你
提供相似的体验

00:08:22.202 --> 00:08:23.470 align:middle
和你...

00:08:24.071 --> 00:08:29.076 align:middle
我们采用MapsTransit的
入口来实现这一点

00:08:29.343 --> 00:08:30.744 align:middle
我们来逐个看这个入口

00:08:31.078 --> 00:08:33.981 align:middle
首先
可以应用Transit ETA

00:08:34.381 --> 00:08:37.583 align:middle
如果你之前使用过
MKDirections协议

00:08:37.650 --> 00:08:40.354 align:middle
MKDirection类型
和相关的API的话

00:08:40.419 --> 00:08:45.792 align:middle
那么你也许知道我们支持汽车和步行
这两种交通方式

00:08:46.059 --> 00:08:51.198 align:middle
你可以针对这两种交通类型
提出方向和ETA请求

00:08:51.365 --> 00:08:53.800 align:middle
今年我们添加了新的交通方式

00:08:53.934 --> 00:08:56.170 align:middle
MKDirectionsTransportType
和Transit

00:08:56.236 --> 00:09:00.407 align:middle
有这个TransportType
就可以应用ETA

00:08:56.236 --> 00:09:00.407 align:middle
有这个TransportType
就可以应用ETA

00:09:00.807 --> 00:09:05.712 align:middle
我要指出的是
你将只为Transit应用ETAs

00:09:06.046 --> 00:09:08.081 align:middle
你不会获得Transit方向

00:09:08.415 --> 00:09:10.350 align:middle
我们进入示例代码之前

00:09:11.084 --> 00:09:15.522 align:middle
来看一下可以怎样
从ETA之外获得什么

00:09:15.589 --> 00:09:19.660 align:middle
比如你可以获得预计到达时间
和预计离开时间

00:09:19.993 --> 00:09:25.566 align:middle
考虑到交通频率的性质
大多数都取决于时间和地点

00:09:25.832 --> 00:09:28.302 align:middle
因此提供这一信息就变得非常重要

00:09:28.669 --> 00:09:30.370 align:middle
我们相信通过这些信息

00:09:30.537 --> 00:09:35.342 align:middle
你会为程序用户群提供很棒的用户体验

00:09:35.843 --> 00:09:37.277 align:middle
我们来看示例代码

00:09:37.377 --> 00:09:39.546 align:middle
怎样才能应用
这些Transit ETA

00:09:40.080 --> 00:09:43.150 align:middle
这里我有个辅助函数
getTransitETA

00:09:43.617 --> 00:09:46.420 align:middle
那我先
生成MKDirectionsRequest

00:09:46.820 --> 00:09:49.056 align:middle
之后我将设置起点和目的地

00:09:49.590 --> 00:09:53.026 align:middle
一旦完成
我将交通类型设置为Transit

00:09:53.293 --> 00:09:55.963 align:middle
因为我们感兴趣的是
获得Transit ETA

00:09:56.730 --> 00:09:59.499 align:middle
使用刚刚生成的函数

00:09:59.566 --> 00:10:01.468 align:middle
我将要创建
MKDirections对象

00:09:59.566 --> 00:10:01.468 align:middle
我将要创建
MKDirections对象

00:10:01.802 --> 00:10:03.203 align:middle
我叫它ETA计算程序

00:10:03.270 --> 00:10:05.572 align:middle
随着Completion
Handler确定终点

00:10:05.639 --> 00:10:07.407 align:middle
同时在CompletionHandler上

00:10:07.474 --> 00:10:08.976 align:middle
我将处理
从服务器反馈回来的信息

00:10:09.910 --> 00:10:11.545 align:middle
这就是Transit ̨ETA

00:10:11.612 --> 00:10:13.514 align:middle
现在既然我们
具备了Transit ETA

00:10:13.647 --> 00:10:16.483 align:middle
那为了提供完整的体验
我们会介绍一种方法

00:10:16.550 --> 00:10:19.453 align:middle
来启动地图软件
进入Transit模式

00:10:19.920 --> 00:10:23.757 align:middle
到目前为止你可以在地图软件上
通过不同的启动方式

00:10:24.057 --> 00:10:25.959 align:middle
甚至其他相关的软件来启动运行

00:10:26.193 --> 00:10:28.595 align:middle
此外MKLaunchOptions
DirectionsModeKey

00:10:28.662 --> 00:10:33.700 align:middle
将给你指出哪些地图软件模式可以使用

00:10:34.101 --> 00:10:37.738 align:middle
现在我们支持Driving方式
和步行方式

00:10:37.838 --> 00:10:41.742 align:middle
在iOS 9中我们
还引入Transit模式

00:10:42.142 --> 00:10:48.715 align:middle
通过这个模式
你可以从你的程序中启动地图应用

00:10:49.082 --> 00:10:50.918 align:middle
我们快速来看这里的示例代码

00:10:51.418 --> 00:10:55.189 align:middle
那么我这里有个辅助公式
openInMapsTransit

00:10:55.255 --> 00:10:56.690 align:middle
这是一个使用坐标的公式

00:10:58.458 --> 00:11:03.130 align:middle
我基本上先要用那个解析坐标
生成MK地图项

00:10:58.458 --> 00:11:03.130 align:middle
我基本上先要用那个解析坐标
生成MK地图项

00:11:03.530 --> 00:11:08.302 align:middle
之后我会用Transit模式设置
生成字典启动选项

00:11:08.735 --> 00:11:09.670 align:middle
一旦完成

00:11:10.003 --> 00:11:14.708 align:middle
我只需在地图程序上使用
openInMapsWithLaunchOptions

00:11:14.975 --> 00:11:18.245 align:middle
基本上这是在Transit
模式上启动地图程序

00:11:18.512 --> 00:11:21.415 align:middle
并且是以在地图上
设置的内容作为目的地

00:11:21.982 --> 00:11:23.650 align:middle
这部分内容就是这些了

00:11:23.884 --> 00:11:25.586 align:middle
让我们来看看这些API是怎么运行的

00:11:36.830 --> 00:11:42.369 align:middle
好的 为了这次演示 我创建了一个
旧金山城市的旅游应用程序

00:11:42.936 --> 00:11:47.307 align:middle
基本上只是个加上了
一些注释的简单地图视图

00:11:47.608 --> 00:11:50.344 align:middle
我来快速运行一下
你们可以看到现在我有什么

00:11:53.413 --> 00:11:56.049 align:middle
正如大家所见
我们有张旧金山的地图

00:11:56.116 --> 00:11:58.118 align:middle
我用地标做了几个不同注释

00:11:58.652 --> 00:11:59.753 align:middle
比如这里是苏特洛讯号塔

00:12:00.521 --> 00:12:04.291 align:middle
这里是金门大桥还有所有这些

00:12:04.658 --> 00:12:07.661 align:middle
我还随意设置了这些图钉的颜色

00:12:07.761 --> 00:12:09.830 align:middle
所以如果我向下滚动到...

00:12:11.532 --> 00:12:12.833 align:middle
viewForAnnotation
callback

00:12:12.900 --> 00:12:15.536 align:middle
你们可以看到我设置了
图钉颜色属性

00:12:15.869 --> 00:12:17.571 align:middle
来自定义这些图钉颜色

00:12:18.105 --> 00:12:18.939 align:middle
好了

00:12:19.339 --> 00:12:22.910 align:middle
随着演示的进行
我们要尝试更多的自定义

00:12:23.410 --> 00:12:29.183 align:middle
接下来 我要在副标题
加上Transit ETA

00:12:29.616 --> 00:12:32.653 align:middle
为了实现这个内容
我创建了个简单的辅助公式

00:12:33.754 --> 00:12:36.156 align:middle
我把它拖拽到这里

00:12:36.690 --> 00:12:40.427 align:middle
这样就有了个可以简单处理

00:12:40.494 --> 00:12:43.597 align:middle
当地地标注释的辅助公式

00:12:44.097 --> 00:12:47.100 align:middle
然后我要这个位子生成
MKDirectionsRequest

00:12:47.801 --> 00:12:51.371 align:middle
大家可以看到我已经生成了
一个MKDirectionsRequest

00:12:51.572 --> 00:12:55.742 align:middle
之后我在只需在应用中
设置个起点和目的地

00:12:56.710 --> 00:12:59.313 align:middle
最后我把交通类型
设置为Transit

00:12:59.379 --> 00:13:01.548 align:middle
因为我们感兴趣的是
Transit ETA

00:12:59.379 --> 00:13:01.548 align:middle
因为我们感兴趣的是
Transit ETA

00:13:01.982 --> 00:13:03.317 align:middle
一旦具备这些
我将继续

00:13:03.383 --> 00:13:05.052 align:middle
生成MKDirection对象

00:13:08.455 --> 00:13:11.491 align:middle
在这个位置我用该应用创建了
MKDirection对象

00:13:12.593 --> 00:13:14.561 align:middle
在CompletionHandler中

00:13:14.928 --> 00:13:18.932 align:middle
我将副标题的注释设置为我们
预计的到达时间

00:13:20.467 --> 00:13:25.439 align:middle
在地图视图上加注释前
我将快速地调试这个功能

00:13:25.873 --> 00:13:30.310 align:middle
我们称这个功能为
LandMarkPin

00:13:31.578 --> 00:13:33.780 align:middle
好的 我们来运行一下

00:13:38.318 --> 00:13:42.489 align:middle
好了 从Moscone West
会议中心到市政厅

00:13:42.923 --> 00:13:46.326 align:middle
坐公共交通工具大约要22分钟
我们在看看其他图钉

00:13:46.693 --> 00:13:48.028 align:middle
到轮渡大厦 是17分钟

00:13:48.395 --> 00:13:50.998 align:middle
非常好
这能通过使用Transit

00:13:51.231 --> 00:13:55.736 align:middle
给用户提供一些类似需要多
少时间到达目的地的初步信息

00:13:56.170 --> 00:13:58.605 align:middle
但是为了提供
完整的Transit体验

00:13:58.972 --> 00:14:01.942 align:middle
我们还要想办法
将它们运用在地图程序中

00:13:58.972 --> 00:14:01.942 align:middle
我们还要想办法
将它们运用在地图程序中

00:14:02.075 --> 00:14:03.177 align:middle
为了实现这次演示的目的

00:14:03.243 --> 00:14:07.114 align:middle
我要将rightcallout
Accessoryview

00:14:07.181 --> 00:14:08.382 align:middle
放在我的callout中

00:14:08.448 --> 00:14:11.919 align:middle
同时当我点击时
可以用户直接转换到地图程序

00:14:13.086 --> 00:14:18.058 align:middle
我们快速结束这块内容并回过
头继续callback模式

00:14:19.560 --> 00:14:22.095 align:middle
我将在我的
AnnotationView

00:14:22.162 --> 00:14:24.865 align:middle
设置rightCalloutAccessoryView

00:14:28.669 --> 00:14:31.605 align:middle
这是我之前添加的
rightCalloutAccessoryView

00:14:31.672 --> 00:14:32.539 align:middle
让我们试一下

00:14:40.180 --> 00:14:41.014 align:middle
好了

00:14:41.081 --> 00:14:43.584 align:middle
你可以看到rightCallout
AccessoryView

00:14:43.650 --> 00:14:46.420 align:middle
这里已经添加了公交车图标
但没出现任何数据

00:14:46.486 --> 00:14:49.223 align:middle
因为我们还没有点击
callback模式

00:14:49.623 --> 00:14:52.159 align:middle
这套公式每次操作都需要
callout的辅助控制

00:14:52.593 --> 00:14:55.262 align:middle
我们快速把这些内容
添加在这里

00:15:00.434 --> 00:15:01.802 align:middle
这个就是已经执行了的

00:15:01.869 --> 00:15:04.505 align:middle
每次操作都需要
callout辅助控制的

00:15:04.571 --> 00:15:05.572 align:middle
callback模式

00:15:06.340 --> 00:15:09.109 align:middle
我一旦这样 就会加入代码

00:15:09.676 --> 00:15:12.813 align:middle
在地图应用中启动
给定的地图项

00:15:13.447 --> 00:15:18.218 align:middle
这里我先来
用模式Key生成字典对象

00:15:18.385 --> 00:15:20.754 align:middle
模式键设成Transit

00:15:21.121 --> 00:15:23.991 align:middle
然后 从以往的设置
获取坐标

00:15:24.057 --> 00:15:27.261 align:middle
我准备生成MKMapItem

00:15:27.561 --> 00:15:30.797 align:middle
一旦完成
我就会在地图项中打开启动选项

00:15:30.864 --> 00:15:34.635 align:middle
把这个地图项
变为Transit模式

00:15:35.235 --> 00:15:37.838 align:middle
我们快点继续
再次运行应用

00:15:41.608 --> 00:15:42.442 align:middle
好了

00:15:44.645 --> 00:15:47.381 align:middle
来看轮渡大厦

00:15:49.116 --> 00:15:50.617 align:middle
点击这里

00:15:50.684 --> 00:15:53.887 align:middle
地图应用
进入了Transit模式

00:15:53.954 --> 00:15:57.758 align:middle
可以看到需要
乘坐18分钟的40路公交

00:15:57.824 --> 00:16:01.929 align:middle
再回到示例app
试试其他的内容

00:15:57.824 --> 00:16:01.929 align:middle
再回到示例app
试试其他的内容

00:16:02.629 --> 00:16:05.165 align:middle
来看苏特洛讯号塔的结果
好了

00:16:05.232 --> 00:16:06.366 align:middle
这就是获得的结果

00:16:08.202 --> 00:16:10.003 align:middle
根据Transti的结果
需要45分钟

00:16:10.637 --> 00:16:11.705 align:middle
相当远

00:16:11.772 --> 00:16:14.842 align:middle
哦 明白了
出了点问题

00:16:14.908 --> 00:16:18.245 align:middle
公交站移位了
也许就是需要那么久的原因

00:16:18.679 --> 00:16:22.282 align:middle
无论怎样 这就是在MapKit中的
Transit体验

00:16:23.784 --> 00:16:28.255 align:middle
我想谈谈怎样实现刚说过的
自定义callout

00:16:28.589 --> 00:16:32.359 align:middle
我们继续来看
怎样在示例app中

00:16:32.459 --> 00:16:35.028 align:middle
应用这些callout

00:16:36.330 --> 00:16:40.767 align:middle
好了 首先 我们来谈谈
callback模式

00:16:40.834 --> 00:16:43.470 align:middle
每次点击注释就会得到调用

00:16:44.104 --> 00:16:49.376 align:middle
在这里 我会在视图上
设置具体的回调辅助属性

00:16:49.676 --> 00:16:55.015 align:middle
为路标所准备的数据中
我有部分图像

00:16:55.949 --> 00:16:59.219 align:middle
在Callout高级设置中
设置UIImageView

00:16:59.286 --> 00:17:01.421 align:middle
来看在注释中是什么样子

00:16:59.286 --> 00:17:01.421 align:middle
来看在注释中是什么样子

00:17:02.256 --> 00:17:05.259 align:middle
在这里
读出图像数据

00:17:05.325 --> 00:17:08.428 align:middle
从解析的plist文件中
读出图像名称

00:17:08.862 --> 00:17:10.430 align:middle
接着生成UIImage

00:17:10.830 --> 00:17:13.200 align:middle
然后生成
UIImageView

00:17:13.267 --> 00:17:15.135 align:middle
在detailCallout
AccessoryView中设置

00:17:15.502 --> 00:17:16.970 align:middle
我们就来运行这个

00:17:21.241 --> 00:17:23.410 align:middle
好了 很好

00:17:23.510 --> 00:17:25.244 align:middle
我现在有了
金门大桥的图像

00:17:25.311 --> 00:17:26.880 align:middle
我们继续来看

00:17:27.314 --> 00:17:28.182 align:middle
就这样

00:17:28.248 --> 00:17:30.851 align:middle
这是非常漂亮的
金门大桥图像

00:17:31.051 --> 00:17:32.085 align:middle
来看看还有什么

00:17:33.520 --> 00:17:34.721 align:middle
还有轮渡大厦的图像

00:17:36.823 --> 00:17:38.358 align:middle
这就是目前的位置

00:17:39.393 --> 00:17:40.227 align:middle
很好

00:17:40.794 --> 00:17:44.865 align:middle
没有泛美金字塔图像

00:17:45.332 --> 00:17:46.400 align:middle
从这里可知

00:17:46.934 --> 00:17:51.805 align:middle
当我们设置
具体的回调辅助视图

00:17:52.239 --> 00:17:54.675 align:middle
我们总能获得优先级
或副标题

00:17:55.142 --> 00:17:57.811 align:middle
对金门大桥而言
我们添加了细节

00:17:57.878 --> 00:17:58.912 align:middle
因而我们也有了副标题

00:17:59.313 --> 00:18:02.783 align:middle
但是一旦设置detailCall
outAccessoryView

00:17:59.313 --> 00:18:02.783 align:middle
但是一旦设置detailCall
outAccessoryView

00:18:02.950 --> 00:18:04.518 align:middle
它就会获得优先级或副标题

00:18:05.152 --> 00:18:08.155 align:middle
对于部分其他地标
我现在没有图像

00:18:08.222 --> 00:18:09.957 align:middle
我们可以在这里加上文本

00:18:11.291 --> 00:18:14.862 align:middle
我已经生成了文本视图

00:18:15.596 --> 00:18:17.898 align:middle
那么我这里有自定义文本视图

00:18:18.332 --> 00:18:21.168 align:middle
基本上我刚设置过高和宽

00:18:21.668 --> 00:18:24.905 align:middle
这样可以通过具体的回调

00:18:26.406 --> 00:18:28.575 align:middle
辅助视图显示内容

00:18:28.909 --> 00:18:32.346 align:middle
与图像类似 我可以从
归档这些地标建筑的

00:18:32.880 --> 00:18:34.681 align:middle
plist文件中读出数据

00:18:35.249 --> 00:18:37.651 align:middle
我把这些
detailTextView

00:18:37.718 --> 00:18:40.621 align:middle
设置成
detailCalloutAccessoryView

00:18:40.687 --> 00:18:42.556 align:middle
好
我再快速地来运行一次

00:18:48.428 --> 00:18:50.764 align:middle
好了 很好
我们来看一下

00:18:51.565 --> 00:18:56.103 align:middle
正如大家所见在苏特洛讯号塔
下面有不错的文本视图

00:18:56.703 --> 00:18:57.804 align:middle
我们再来看看其他内容

00:18:58.438 --> 00:19:00.407 align:middle
市政厅也是一样 文本也不错

00:18:58.438 --> 00:19:00.407 align:middle
市政厅也是一样 文本也不错

00:19:03.010 --> 00:19:05.746 align:middle
这里我希望回调副标题

00:19:05.879 --> 00:19:09.550 align:middle
回调UIImageView
再回调TextView

00:19:11.351 --> 00:19:13.987 align:middle
这就是这个API的
所有出彩的地方

00:19:14.288 --> 00:19:16.823 align:middle
我们非常高兴为大家介绍它

00:19:17.524 --> 00:19:20.227 align:middle
并且坚信各位
能实现出色的应用

00:19:26.366 --> 00:19:29.536 align:middle
那么从这个演示中学到的是

00:19:30.037 --> 00:19:31.972 align:middle
如何来自定义这些图钉颜色

00:19:32.573 --> 00:19:34.441 align:middle
我们学到如何自定义回调

00:19:35.375 --> 00:19:37.477 align:middle
也学到如何应用
Transit ETA

00:19:37.911 --> 00:19:43.150 align:middle
以及如何将用户带到地图应用
以便提供丰富的交通体验

00:19:43.884 --> 00:19:44.952 align:middle
我这边就是要介绍这些

00:19:45.285 --> 00:19:47.721 align:middle
再来看Flyover
有请伊丽莎白

00:19:52.926 --> 00:19:53.760 align:middle
好的

00:19:57.130 --> 00:19:58.966 align:middle
我们来谈谈Flyover

00:19:59.867 --> 00:20:01.301 align:middle
我是伊丽莎白·林奎斯特

00:19:59.867 --> 00:20:01.301 align:middle
我是伊丽莎白·林奎斯特

00:20:01.368 --> 00:20:03.370 align:middle
也是在地图团队工作的工程师

00:20:03.637 --> 00:20:06.673 align:middle
今天我给大家介绍这些内容

00:20:08.175 --> 00:20:09.743 align:middle
首先
Flyover是什么？

00:20:11.278 --> 00:20:13.013 align:middle
怎样在应用中发挥作用？

00:20:14.414 --> 00:20:17.351 align:middle
在使用Flyover时
怎么设置正确的区域

00:20:17.417 --> 00:20:18.685 align:middle
并处理摄像头？

00:20:20.020 --> 00:20:24.925 align:middle
我还会介绍Flyover与现有部分
MapKit API怎样配合

00:20:26.260 --> 00:20:29.329 align:middle
首先Flyover具体
是指什么？

00:20:30.130 --> 00:20:31.932 align:middle
例如说这是Flyover

00:20:35.335 --> 00:20:40.474 align:middle
这里是各种城市和地标的
高度真实3D模型

00:20:41.241 --> 00:20:44.545 align:middle
在世界各地哪儿都有
这样的东西

00:20:46.613 --> 00:20:51.151 align:middle
自从iOS 6起
在地图应用中都可以找到

00:20:52.119 --> 00:20:54.054 align:middle
我们现在为大家提供机会

00:20:54.121 --> 00:20:57.824 align:middle
为用户展示这些互动3D视图

00:21:00.360 --> 00:21:05.666 align:middle
大家可能注意到
在地图应用中并没有卫星图像

00:21:05.732 --> 00:21:08.202 align:middle
有的是位于代表地面的

00:21:09.269 --> 00:21:13.540 align:middle
3D立体图上方的平面卫星图

00:21:14.174 --> 00:21:16.743 align:middle
在你们的app中也是这种情况

00:21:18.812 --> 00:21:21.882 align:middle
Flyover的另一个重要特点是:

00:21:22.149 --> 00:21:27.721 align:middle
它是在球体上展示
而不是像其他2D地图类型那样展示

00:21:28.255 --> 00:21:32.192 align:middle
这就意味着要如何处理区域设置

00:21:32.960 --> 00:21:35.963 align:middle
这部分内容我稍后会介绍

00:21:37.531 --> 00:21:42.002 align:middle
那么在应用中怎样才能获得
Flyover视图呢？

00:21:43.370 --> 00:21:46.807 align:middle
如果以前用过MapKit
那么一定会熟悉MK地图类型

00:21:46.874 --> 00:21:50.010 align:middle
这是在MK地图视图上设置的属性

00:21:50.077 --> 00:21:52.913 align:middle
是为了选择将要显示的数据类型

00:21:53.780 --> 00:21:56.483 align:middle
我们有普通地图的标准

00:21:57.651 --> 00:22:00.954 align:middle
还有卫星地图
是从上到下的卫星视图

00:21:57.651 --> 00:22:00.954 align:middle
还有卫星地图
是从上到下的卫星视图

00:22:02.089 --> 00:22:06.193 align:middle
还有在卫星视图中加入了道路

00:22:06.260 --> 00:22:09.496 align:middle
标签和兴趣点的混合地图

00:22:10.864 --> 00:22:13.467 align:middle
我们现在为大家
介绍两种新的地图类型

00:22:14.034 --> 00:22:17.070 align:middle
Satellite Flyover
和Hybrid Flyover

00:22:17.671 --> 00:22:20.574 align:middle
为了在app中显示这类内容

00:22:21.008 --> 00:22:23.610 align:middle
只需将地图视图中的地图类型

00:22:23.710 --> 00:22:27.014 align:middle
设置为
Satellite Flyover即可

00:22:28.515 --> 00:22:33.987 align:middle
如果想添加诸如标签 兴趣点
道路和国界等内容

00:22:34.655 --> 00:22:38.192 align:middle
可以使用Hybrid
Flyover地图类型

00:22:39.927 --> 00:22:44.464 align:middle
我说过在使用Flyover时
有些内容需要考虑

00:22:44.531 --> 00:22:48.135 align:middle
其中重要的一项是
怎样设置地图的可见区域

00:22:49.236 --> 00:22:54.341 align:middle
大家可能对使用矩形的几种
MapKit方法比较熟悉

00:22:54.408 --> 00:22:57.644 align:middle
如MKCoordinateRegion
和MKMapRect

00:22:57.945 --> 00:23:00.414 align:middle
以便设置和获得地图的可见区域

00:22:57.945 --> 00:23:00.414 align:middle
以便设置和获得地图的可见区域

00:23:01.148 --> 00:23:06.620 align:middle
不过地图视图的可见区域
并非总是矩形

00:23:07.588 --> 00:23:10.424 align:middle
在iOS 7中
我们介绍可以查看

00:23:10.490 --> 00:23:12.092 align:middle
有斜度的地图视图

00:23:12.159 --> 00:23:14.228 align:middle
这样可以从一定角度查看地图

00:23:14.728 --> 00:23:15.963 align:middle
当你这么做时

00:23:17.030 --> 00:23:20.200 align:middle
可见区域就不会是完全的矩形

00:23:21.034 --> 00:23:23.904 align:middle
在Flyover中就是这种情况

00:23:23.971 --> 00:23:26.673 align:middle
这样也可以
看到倾斜的地图视图

00:23:28.008 --> 00:23:31.545 align:middle
现在将这个区域缩小来看

00:23:31.612 --> 00:23:34.114 align:middle
这样就可以看到
可见区域的实际形状

00:23:34.915 --> 00:23:39.686 align:middle
我们在这里需要做的是
定义地图的可见区域为矩形

00:23:39.853 --> 00:23:44.024 align:middle
这就包括我们在屏幕上
实际看到的内容

00:23:44.258 --> 00:23:46.927 align:middle
就是本例中的蓝色矩形

00:23:48.128 --> 00:23:50.998 align:middle
在Flyover中
就是这么做

00:23:51.298 --> 00:23:56.370 align:middle
可见区域都定义为矩形
也就是在屏幕上所包括的区域

00:23:58.972 --> 00:24:04.278 align:middle
在Flyover中
视图不必为了不是矩形而倾斜

00:23:58.972 --> 00:24:04.278 align:middle
在Flyover中
视图不必为了不是矩形而倾斜

00:24:04.912 --> 00:24:07.915 align:middle
如果有一片区域是这样 而且还相当大

00:24:08.148 --> 00:24:11.652 align:middle
在本例中
可以试着把可见区域设置成蓝色矩形

00:24:11.718 --> 00:24:13.387 align:middle
最后就会是这样

00:24:15.422 --> 00:24:19.793 align:middle
这里的点就是
矩形显示将一直成为近似值

00:24:19.860 --> 00:24:22.496 align:middle
因为Flyover是出现在球体上

00:24:23.664 --> 00:24:27.034 align:middle
同样如果面积很大的区域

00:24:27.301 --> 00:24:29.469 align:middle
有部分区域实际上不会显示

00:24:29.536 --> 00:24:33.040 align:middle
在这种情况下
部分可见区域实际是球体后面

00:24:35.409 --> 00:24:40.113 align:middle
即便这是个别情况
矩形区域设置在

00:24:40.180 --> 00:24:43.150 align:middle
Flyover中依然奏效
在倾斜地图视图中

00:24:43.917 --> 00:24:46.620 align:middle
如果是从上到下的视图需要放大很多

00:24:47.054 --> 00:24:48.956 align:middle
建议要确保你是通过

00:24:49.022 --> 00:24:54.261 align:middle
MKMapCamera
在展示这个世界的相应部分

00:24:55.829 --> 00:25:00.133 align:middle
MKMapCamera早在2013年的
iOS 7中就已推出

00:24:55.829 --> 00:25:00.133 align:middle
MKMapCamera早在2013年的
iOS 7中就已推出

00:25:00.400 --> 00:25:03.136 align:middle
想了解MKMapCamera的
更多详情

00:25:03.203 --> 00:25:04.805 align:middle
以及普遍的地区设置问题

00:25:05.272 --> 00:25:08.342 align:middle
我推荐大家看看
《将MapKit放入透视图》

00:25:08.408 --> 00:25:10.444 align:middle
这是2013年的讲座内容

00:25:11.945 --> 00:25:15.616 align:middle
但是我要简要介绍
MKMapCamera的功能

00:25:16.850 --> 00:25:18.919 align:middle
它有四个基本属性

00:25:20.354 --> 00:25:25.425 align:middle
中间坐标代表想在屏幕中间
显示的世界上的位置

00:25:26.593 --> 00:25:29.930 align:middle
朝向是摄像头所朝的方向

00:25:31.031 --> 00:25:35.369 align:middle
斜度是你看地图视角的倾斜程度

00:25:36.003 --> 00:25:39.773 align:middle
还有高度是你希望摄像头所处位置

00:25:39.840 --> 00:25:41.642 align:middle
在地图上方的高度是以米为单位

00:25:43.343 --> 00:25:46.713 align:middle
还有一个便捷的
MKMapCamera初始化器

00:25:47.247 --> 00:25:49.483 align:middle
这会令中心坐标和你希望摄像头

00:25:50.184 --> 00:25:53.420 align:middle
所在位置的视点坐标

00:25:54.087 --> 00:25:57.791 align:middle
你所希望摄像头处的高度

00:25:58.091 --> 00:26:02.262 align:middle
这样就可以获得从视点坐标
看到中心坐标的摄像头位置

00:25:58.091 --> 00:26:02.262 align:middle
这样就可以获得从视点坐标
看到中心坐标的摄像头位置

00:26:03.463 --> 00:26:07.835 align:middle
不过 在Flyover中
有地面 建筑

00:26:07.901 --> 00:26:09.937 align:middle
和各种有趣的内容

00:26:10.370 --> 00:26:14.508 align:middle
这就意味着高度

00:26:15.075 --> 00:26:16.944 align:middle
实际上并不像
你想象中的那么简单

00:26:18.078 --> 00:26:20.614 align:middle
例如
这是在建筑上方的高度么？

00:26:20.681 --> 00:26:21.982 align:middle
这是地面上的高度么？

00:26:22.149 --> 00:26:23.217 align:middle
还是海平面高度？

00:26:23.617 --> 00:26:26.854 align:middle
这并非是中心坐标和
摄像头之间的距离

00:26:26.920 --> 00:26:30.157 align:middle
摄像头实际上在这种情况下
更容易测量

00:26:30.490 --> 00:26:33.994 align:middle
我们就在这里添加了
MKMapCamera的新初始化器

00:26:34.528 --> 00:26:37.297 align:middle
我们来快速了解一下这是怎么实现的

00:26:38.966 --> 00:26:40.667 align:middle
先从中心坐标开始

00:26:40.734 --> 00:26:42.803 align:middle
也就是你希望在屏幕中间的位置

00:26:43.537 --> 00:26:46.473 align:middle
接着确定一个距离以米为单位

00:26:46.540 --> 00:26:50.143 align:middle
你希望中心坐标和摄像头所在
位置之间的距离

00:26:50.511 --> 00:26:53.113 align:middle
注意这与海拔高度不同

00:26:54.848 --> 00:26:58.819 align:middle
还要确定斜度
也就是希望摄像头所处的角度

00:26:59.586 --> 00:27:02.155 align:middle
还有朝向准备看的方向

00:26:59.586 --> 00:27:02.155 align:middle
还有朝向准备看的方向

00:27:03.190 --> 00:27:05.926 align:middle
通过这个初始化器

00:27:05.993 --> 00:27:08.896 align:middle
你可以完全不必担心在摄像头下方的

00:27:08.962 --> 00:27:12.799 align:middle
地面或建筑会发生什么情况

00:27:14.401 --> 00:27:17.137 align:middle
我先放一段短的演示

00:27:17.204 --> 00:27:19.206 align:middle
来看可以用Flyover
完成哪些很酷的事情

00:27:23.277 --> 00:27:26.547 align:middle
好的
苏米特刚刚给大家看了旅游应用

00:27:27.114 --> 00:27:30.984 align:middle
我的Mac上也有类似应用

00:27:31.785 --> 00:27:33.420 align:middle
可以看到这里的地标

00:27:36.356 --> 00:27:37.758 align:middle
例如悬崖小屋

00:27:38.692 --> 00:27:44.131 align:middle
大家可能还记得有些位置
我们还没有真实的图像

00:27:44.198 --> 00:27:47.034 align:middle
那我觉得可以
用Flyover进行补足

00:27:48.235 --> 00:27:49.703 align:middle
我想做的是

00:27:49.770 --> 00:27:52.773 align:middle
在我的callouts中添加

00:27:52.840 --> 00:27:54.174 align:middle
detailCallout
AccessoryView

00:27:54.675 --> 00:27:57.911 align:middle
我将使用MKMap
以便为Flyover

00:27:57.978 --> 00:28:03.083 align:middle
为设置成detailCallout
AccessoryView的图像

00:27:57.978 --> 00:28:03.083 align:middle
为设置成detailCallout
AccessoryView的图像

00:28:04.351 --> 00:28:06.453 align:middle
MKMap快照非常有用

00:28:06.520 --> 00:28:08.722 align:middle
当你只需要地图的静态图像时

00:28:08.922 --> 00:28:10.624 align:middle
当你不要与它互动时都是如此

00:28:11.892 --> 00:28:14.828 align:middle
我还会为这个快照加上几个选项

00:28:14.895 --> 00:28:16.663 align:middle
最重要的是要把mapType

00:28:16.730 --> 00:28:19.833 align:middle
设置成
Satellite Flyover

00:28:22.636 --> 00:28:26.507 align:middle
我会使用新的初始化器
生成MKMapCamera

00:28:27.074 --> 00:28:29.710 align:middle
来看注释部分的坐标

00:28:30.744 --> 00:28:35.682 align:middle
我接着使用这些选项
生成MKMap快照器

00:28:36.984 --> 00:28:41.488 align:middle
启动快照器如果也已完成且没有错误

00:28:41.555 --> 00:28:45.559 align:middle
我就在detailCallout
AccessoryView生成图像

00:28:47.528 --> 00:28:49.696 align:middle
我们当然要调用这个功能

00:28:55.035 --> 00:28:58.205 align:middle
好的
我们来看效果如何

00:29:00.874 --> 00:29:05.479 align:middle
如果我没记错悬崖小屋是我们
还没有图像的那个

00:29:06.380 --> 00:29:07.781 align:middle
来看 现在有了

00:29:17.391 --> 00:29:19.560 align:middle
好的
我们应该还有另外几处

00:29:19.626 --> 00:29:21.161 align:middle
例如市政厅

00:29:21.562 --> 00:29:23.697 align:middle
相当酷
不过 Flyover视图

00:29:23.764 --> 00:29:25.265 align:middle
当时是可以互动的

00:29:25.766 --> 00:29:28.669 align:middle
我觉得可以在视图中添加一点动画效果

00:29:29.503 --> 00:29:31.438 align:middle
我生成一个新的
ViewController

00:29:31.505 --> 00:29:35.275 align:middle
这个还太常用
不过其中有MKMapView

00:29:37.044 --> 00:29:41.615 align:middle
我会在其中添加部分有用的常数

00:29:42.416 --> 00:29:44.952 align:middle
然后我来设置地图视图

00:29:49.423 --> 00:29:53.794 align:middle
大家还注意到我给Satellite
Flyover 设置了地图类型

00:29:54.595 --> 00:29:58.866 align:middle
还把OS X中可见的指南针
和缩放控制进行隐藏

00:30:01.335 --> 00:30:04.738 align:middle
我还生成了
MKMapCamera

00:30:04.805 --> 00:30:06.373 align:middle
初始状态是地标的坐标

00:30:07.841 --> 00:30:09.510 align:middle
我需要的设置就是这些

00:30:10.777 --> 00:30:15.716 align:middle
接着我准备再生成几个
MKMapCamera

00:30:17.150 --> 00:30:21.622 align:middle
首先
是一个稍稍向下倾斜的斜度摄像头

00:30:22.389 --> 00:30:24.591 align:middle
这里还加上了旋转

00:30:24.658 --> 00:30:26.727 align:middle
这样可以稍作旋转

00:30:27.494 --> 00:30:31.932 align:middle
因为MKMapCamera
在MKMapView具有动画属性

00:30:32.366 --> 00:30:35.135 align:middle
我会做些动画处理
以便在这两个之间进行切换

00:30:38.005 --> 00:30:44.444 align:middle
这里我先添加一段短的动画效果
把摄像头设置成斜度摄像头

00:30:44.811 --> 00:30:49.783 align:middle
再把视图向下倾斜一点
再加稍长的动画内容

00:30:49.850 --> 00:30:51.752 align:middle
也会做少许旋转动作

00:30:53.120 --> 00:30:54.821 align:middle
在主ViewController中

00:30:54.888 --> 00:30:59.860 align:middle
我加入了rightCallout
AccessoryView

00:31:00.060 --> 00:31:02.729 align:middle
这可以打开
新的View Controller

00:31:04.198 --> 00:31:06.466 align:middle
我们再加上按钮

00:31:18.979 --> 00:31:21.949 align:middle
好的
我们再来看悬崖小屋 就像这样

00:31:22.082 --> 00:31:26.920 align:middle
这里有个小按钮可以稍稍倾斜

00:31:28.989 --> 00:31:29.957 align:middle
再做旋转

00:31:43.403 --> 00:31:45.472 align:middle
这个非常有趣
我们也来看看这个

00:31:45.539 --> 00:31:46.707 align:middle
因为我觉得非常酷

00:31:49.810 --> 00:31:51.812 align:middle
就这样
泛美金字塔也好了

00:31:59.920 --> 00:32:03.090 align:middle
好的现在我们看到了
Flyover的部分功能

00:31:59.920 --> 00:32:03.090 align:middle
好的现在我们看到了
Flyover的部分功能

00:32:03.357 --> 00:32:05.058 align:middle
那我们回到讲座中来

00:32:05.959 --> 00:32:08.529 align:middle
一开始时我就说过
我想说说

00:32:08.629 --> 00:32:11.565 align:middle
现有MapKit API的
部分功能

00:32:11.632 --> 00:32:13.433 align:middle
看看它们怎么和
Flyover怎么配合

00:32:14.535 --> 00:32:16.670 align:middle
我先从MK注释讲起

00:32:17.504 --> 00:32:21.441 align:middle
MK注释用于注释地图的单一坐标

00:32:21.909 --> 00:32:25.445 align:middle
最常见的情况
是我们今天使用的图钉

00:32:26.446 --> 00:32:29.983 align:middle
如果是用标准地图类型显示建筑

00:32:31.251 --> 00:32:33.720 align:middle
注释就是位于最上面的部分

00:32:34.421 --> 00:32:38.292 align:middle
在使用Flyover时
地图类型时就是这种情况

00:32:38.692 --> 00:32:42.729 align:middle
当使用Flyover时
无论发现什么

00:32:43.130 --> 00:32:47.034 align:middle
注释将出现在任何建筑 树木
大船 雕塑的上方

00:32:48.368 --> 00:32:51.071 align:middle
接下来是MKOverlay

00:32:51.905 --> 00:32:56.476 align:middle
叠加图层是用于强调地图的区域
而不是单一的坐标

00:32:57.311 --> 00:33:02.216 align:middle
如果是在标准地图类型的3D地图中

00:32:57.311 --> 00:33:02.216 align:middle
如果是在标准地图类型的3D地图中

00:33:03.650 --> 00:33:07.354 align:middle
你会注意到建筑阻隔了叠加图层

00:33:08.155 --> 00:33:11.191 align:middle
Flyover也是同样如此

00:33:11.558 --> 00:33:16.096 align:middle
Flyover的建筑和树木
会阻隔任何叠加层

00:33:16.964 --> 00:33:18.232 align:middle
就像是这样

00:33:21.502 --> 00:33:27.474 align:middle
不过叠加层会拉到地面的上方
这样就会跟着地势走

00:33:28.642 --> 00:33:29.576 align:middle
就像是这样

00:33:30.677 --> 00:33:33.780 align:middle
我觉得为了在app中
用到Flyover

00:33:33.847 --> 00:33:37.050 align:middle
大家需要掌握的就是这些

00:33:37.117 --> 00:33:39.453 align:middle
我真是迫不及待
想看看大家的成果

00:33:41.255 --> 00:33:43.957 align:middle
总结一下今天所讲的内容

00:33:44.458 --> 00:33:48.795 align:middle
我们对自定义图钉 callouts
和显示带有交通状况 指南针

00:33:48.862 --> 00:33:52.232 align:middle
和比例尺的地图增加了几种新方法

00:33:53.500 --> 00:33:55.969 align:middle
还增添了Transit ETA请求

00:33:56.036 --> 00:34:00.140 align:middle
以及启动地图app中的显示
Transit方向的功能

00:33:56.036 --> 00:34:00.140 align:middle
以及启动地图app中的显示
Transit方向的功能

00:34:01.041 --> 00:34:05.312 align:middle
我们还增加了Satellite Flyover
和Hybrid Flyover地图类型

00:34:05.379 --> 00:34:09.683 align:middle
这样可以在app中高度真实地显示
地面的3D模型和卫星图像

00:34:11.851 --> 00:34:13.554 align:middle
若想了解更多详情可以看今天

00:34:13.620 --> 00:34:16.723 align:middle
MapKit文件资料
和开发人员论坛

00:34:17.757 --> 00:34:18.592 align:middle
感谢大家光临
