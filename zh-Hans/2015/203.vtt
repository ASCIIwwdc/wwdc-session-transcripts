WEBVTT

00:00:21.088 --> 00:00:24.625 align:middle
《HealthKit最新内容》

00:00:25.459 --> 00:00:27.828 align:middle
大家好
欢迎来到《HealthKit最新内容》讲座

00:00:27.895 --> 00:00:32.466 align:middle
这是帮大家了解今年在SDK中
最新内容的绝好机会

00:00:32.966 --> 00:00:35.335 align:middle
我是香农·谭
是iOS工程师

00:00:35.402 --> 00:00:38.672 align:middle
稍后我的同事
艾伦·肖特利奇也会上台

00:00:39.206 --> 00:00:41.675 align:middle
我们很激动能帮助
大家搭建有效应用

00:00:41.742 --> 00:00:44.912 align:middle
来帮助数百万民众
能过上更健康更好的生活

00:00:47.814 --> 00:00:49.383 align:middle
我们先从讲座的路线图开始

00:00:49.449 --> 00:00:51.852 align:middle
今天我们将谈到几项不同的内容

00:00:52.819 --> 00:00:54.955 align:middle
我们将快速
过一遍HealthKit

00:00:55.122 --> 00:00:59.426 align:middle
还会介绍在iOS 8.2中
引入的单位偏好API

00:01:00.027 --> 00:01:01.995 align:middle
并会谈到iOS 9的糖尿一族

00:01:02.062 --> 00:01:04.897 align:middle
可以用到HealthKit
支持的软件的全新功能

00:01:05.933 --> 00:01:10.404 align:middle
接下来艾伦会上台来介绍数据源
删除和Workout会话

00:01:11.004 --> 00:01:12.873 align:middle
最后我们会介绍
WatchKit的演示

00:01:14.741 --> 00:01:16.343 align:middle
先来谈谈HealthKit的背景

00:01:18.011 --> 00:01:20.547 align:middle
现在个人健康是个非常活跃的领域

00:01:20.747 --> 00:01:22.316 align:middle
在App Store中

00:01:22.382 --> 00:01:24.952 align:middle
有许多app都是在帮助
用户获得并保持健康状态

00:01:25.786 --> 00:01:27.955 align:middle
运动跟踪器和智能手表

00:01:28.021 --> 00:01:31.225 align:middle
这类设备可以记录大量极为
私人的相关数据

00:01:31.859 --> 00:01:35.028 align:middle
HealthKit框架使存储和提取
这类信息变得非常容易

00:01:35.095 --> 00:01:40.834 align:middle
它可以提供丰富的API
来保存健康和健身数据并在应用间分享

00:01:41.101 --> 00:01:45.672 align:middle
同时还能在极为隐私的环境下
使用加密数据库中确保安全

00:01:47.074 --> 00:01:49.009 align:middle
对于app开发人员而言
这意味着什么？

00:01:49.309 --> 00:01:50.744 align:middle
意味着当你使用
HealthKit时

00:01:50.811 --> 00:01:54.281 align:middle
你可以跳过编写自定义编码
来分享存储和同步数据

00:01:54.348 --> 00:01:57.484 align:middle
而可以更多关注app体验的核心功能

00:01:58.185 --> 00:02:00.120 align:middle
同时还是更出色的生态系统的组成部分

00:01:58.185 --> 00:02:00.120 align:middle
同时还是更出色的生态系统的组成部分

00:02:02.956 --> 00:02:06.126 align:middle
最后 有了HealthKit
还诞生了Health app

00:02:06.193 --> 00:02:08.262 align:middle
这可以提供
HealthKit的全视图

00:02:08.895 --> 00:02:10.797 align:middle
在iOS 9中
我们增加了更多视图

00:02:10.864 --> 00:02:15.569 align:middle
以便于用户存储 总结并关联数据

00:02:20.941 --> 00:02:24.111 align:middle
我们来谈谈支持这些
出色的Health应用的数据类型

00:02:25.379 --> 00:02:29.383 align:middle
目前在HealthKit
有着许多数据类型

00:02:29.449 --> 00:02:31.952 align:middle
其中涵盖了个人健康的方方面面

00:02:32.586 --> 00:02:35.556 align:middle
我们试着将数据类型尽可能的
广泛和有效

00:02:37.624 --> 00:02:38.559 align:middle
有个常见问题

00:02:38.625 --> 00:02:42.896 align:middle
Apple怎样能在有限的开发时间内
对需要添加的数据类型进行优先安排

00:02:44.398 --> 00:02:47.434 align:middle
我们最重要的优先级考虑是存在硬件

00:02:47.835 --> 00:02:51.071 align:middle
例如可以自动跟踪体重状况的蓝牙秤

00:02:51.538 --> 00:02:54.741 align:middle
可以测量你的睡眠情况的
Sleeptracker

00:02:55.209 --> 00:02:57.744 align:middle
我们发现自动量化的健康数据

00:02:57.811 --> 00:03:00.147 align:middle
并同步到设备上的
HealthKit很强大

00:02:57.811 --> 00:03:00.147 align:middle
并同步到设备上的
HealthKit很强大

00:03:02.616 --> 00:03:05.018 align:middle
我们也根据存在的软件添加数据类型

00:03:05.085 --> 00:03:08.956 align:middle
是否已有的流行app可以围绕
这些数据类型生成体验

00:03:10.657 --> 00:03:13.093 align:middle
最后我们会考虑顾客和开发人员的反馈

00:03:16.630 --> 00:03:18.098 align:middle
为支持我们对数据类型的讨论

00:03:18.165 --> 00:03:19.600 align:middle
我们现在来看
它们的结构

00:03:20.467 --> 00:03:22.236 align:middle
HealthKit中的
每个对象都有个类型

00:03:22.302 --> 00:03:24.505 align:middle
每个类型都会继承HK对象类型

00:03:25.072 --> 00:03:27.574 align:middle
特征类型不会随着时间而改变

00:03:27.808 --> 00:03:29.309 align:middle
如血型或出生日期

00:03:30.277 --> 00:03:32.112 align:middle
随着时间而改变的类型叫做样本类型

00:03:32.179 --> 00:03:33.080 align:middle
我们会介绍两种

00:03:33.580 --> 00:03:36.617 align:middle
数量样本有着数量和单位 比如体重

00:03:37.050 --> 00:03:41.221 align:middle
类别样本可以枚举若干不同的值
如睡眠分析

00:03:41.288 --> 00:03:43.323 align:middle
你可以是处于几种睡眠状态之一

00:03:44.324 --> 00:03:46.527 align:middle
当然这是在回顾已有的信息

00:03:46.593 --> 00:03:48.662 align:middle
如果想要了解
更多HealthKit的构成

00:03:48.962 --> 00:03:51.164 align:middle
我们建议大家看看去年的讲座

00:03:51.298 --> 00:03:52.599 align:middle
《HealthKit介绍》

00:03:56.370 --> 00:03:59.006 align:middle
我提到了数量样本
包括数量和单位

00:03:59.339 --> 00:04:02.643 align:middle
我将花些时间来介绍新的
单位偏好API

00:03:59.339 --> 00:04:02.643 align:middle
我将花些时间来介绍新的
单位偏好API

00:04:03.277 --> 00:04:08.715 align:middle
虽然这款API不是iOS 9的内容
但在iOS 8.2讲座中我们介绍过

00:04:08.916 --> 00:04:10.350 align:middle
我们现在还想提一下

00:04:14.221 --> 00:04:15.956 align:middle
大家可能注意到在iOS 8.2

00:04:16.023 --> 00:04:18.291 align:middle
在Health app中
有个新的单位窗格

00:04:19.660 --> 00:04:23.463 align:middle
根据yoghurt的地区
和位置来显示单元

00:04:23.697 --> 00:04:25.666 align:middle
但是用户可以整理输入这行数据

00:04:25.899 --> 00:04:30.037 align:middle
用自己的单位偏好覆盖默认的设置

00:04:32.272 --> 00:04:35.742 align:middle
在iOS 8.2中
HK Health Store里有新的类扩展

00:04:35.809 --> 00:04:37.978 align:middle
你可以用来发现单位偏好

00:04:38.345 --> 00:04:39.213 align:middle
我们建议这么做

00:04:39.279 --> 00:04:41.715 align:middle
这样你在app UI中
显示的单位就会

00:04:41.782 --> 00:04:44.117 align:middle
与用户希望在Apple Health
看到的相匹配

00:04:44.751 --> 00:04:48.989 align:middle
最后每当单位偏好发生改变时
就会启动新的通知

00:04:49.857 --> 00:04:53.594 align:middle
现在我们探讨回顾了
HealthKit中的单位数据类型

00:04:53.660 --> 00:04:56.930 align:middle
我们再来看在iOS 9中
可用的新数据类型

00:04:57.431 --> 00:04:59.032 align:middle
首先是水摄取量

00:05:01.802 --> 00:05:06.206 align:middle
我相信大家都知道
有人会随身带个巨大水瓶

00:05:06.273 --> 00:05:08.108 align:middle
别人要是问起来
他会解释说

00:05:08.642 --> 00:05:11.078 align:middle
每天补水对健康很重要

00:05:11.144 --> 00:05:13.580 align:middle
若是整天都觉得很渴
也许的确很糟

00:05:14.281 --> 00:05:18.385 align:middle
在App Store有许多app
会温和地督促你增加水摄取量

00:05:18.452 --> 00:05:23.557 align:middle
甚至会有部分设备和传感器
如蓝牙水瓶 可以跟踪你的水摄取量

00:05:24.191 --> 00:05:27.561 align:middle
很多人都希望确保自己每天的饮水
可以达到8个8盎司杯

00:05:27.794 --> 00:05:29.196 align:middle
或是两升的推荐标准

00:05:29.263 --> 00:05:33.300 align:middle
如果运动强度较大有脱水风险
人们可能会需要更多水

00:05:34.034 --> 00:05:37.538 align:middle
因此我们在HealthKit中增加
新的数量类型Dietary Water

00:05:37.604 --> 00:05:38.739 align:middle
这是单位是体积

00:05:39.206 --> 00:05:44.278 align:middle
它的字面意思是指膳食水
这类型也可以跟踪通过食物摄取的水分

00:05:48.515 --> 00:05:50.217 align:middle
接下来的类型
是UV Exposure

00:05:51.818 --> 00:05:55.656 align:middle
紫外线辐射存在于日光当中
对人体健康产生正面和负面的作用

00:05:56.490 --> 00:05:58.358 align:middle
它还可以促进维生素D的形成

00:05:58.892 --> 00:06:01.595 align:middle
还可以改善情绪和健康水平

00:05:58.892 --> 00:06:01.595 align:middle
还可以改善情绪和健康水平

00:06:02.229 --> 00:06:04.698 align:middle
但过度暴露在紫外线下会产生负面作用

00:06:06.333 --> 00:06:10.771 align:middle
会对人体产生负面影响 如晒伤
或长期影响 如皮肤损伤或白内障

00:06:10.838 --> 00:06:14.942 align:middle
如果你要在阳光下呆上一段时间
那么了解何时有晒伤风险会很有帮助

00:06:17.077 --> 00:06:20.981 align:middle
还有一些很精巧的设备
可以跟踪人暴露在紫外线照射下的情况

00:06:21.048 --> 00:06:23.283 align:middle
针对这类app和传感器

00:06:23.350 --> 00:06:25.619 align:middle
我们添加了新的数量类型
UV Exposure

00:06:26.019 --> 00:06:29.556 align:middle
其中的值是标量
代表紫外线指数是从0到12

00:06:30.123 --> 00:06:31.658 align:middle
代表从最无害到最危险

00:06:35.596 --> 00:06:39.032 align:middle
当然紫外线照射并非是衡量
我们的日晒风险的最理想方式

00:06:39.399 --> 00:06:41.034 align:middle
这可能会取决于你所穿的衣服

00:06:41.535 --> 00:06:43.637 align:middle
你所用的防晒霜或你的皮肤类型

00:06:44.137 --> 00:06:46.273 align:middle
针对最后一点
我们在HealthKit中

00:06:46.340 --> 00:06:49.209 align:middle
增加了新的特征类型
Fitzpatrick Skin Type

00:06:49.576 --> 00:06:56.083 align:middle
这代表了根据菲氏量表的个人
皮肤类型来反映晒伤或晒黑的情况

00:06:56.750 --> 00:07:00.587 align:middle
iOS 8.3的表情符号
就是根据菲氏量表做成

00:06:56.750 --> 00:07:00.587 align:middle
iOS 8.3的表情符号
就是根据菲氏量表做成

00:07:00.787 --> 00:07:05.058 align:middle
左边的所有都是1型
代表很容易晒伤的很浅肤色

00:07:05.359 --> 00:07:10.864 align:middle
右边的都是永远不会晒伤或严重晒黑的
深棕色或黑色皮肤

00:07:14.134 --> 00:07:17.104 align:middle
因为Fitzpatrick Skin Type
是特征类型

00:07:17.171 --> 00:07:20.607 align:middle
因此它与大家可能用过的类别
或数量样本都不相同

00:07:20.807 --> 00:07:22.843 align:middle
它可以通过Health Store
直接访问

00:07:23.277 --> 00:07:25.779 align:middle
并返回枚举的简单包装类

00:07:30.784 --> 00:07:35.789 align:middle
现在我想来谈谈在生殖健康类别下
我们添加的全新数据类型

00:07:41.428 --> 00:07:43.030 align:middle
当想到量化健康时

00:07:43.096 --> 00:07:47.868 align:middle
我们会想到技术驱动项目
如运动跟踪器和智能手表

00:07:48.602 --> 00:07:51.238 align:middle
我们会想到
用HealthKit同步健身数据

00:07:51.305 --> 00:07:53.974 align:middle
也许会将营养成分自动输入美食日记

00:07:54.875 --> 00:07:57.444 align:middle
但是生殖健康是很重要的健康内容

00:07:58.412 --> 00:08:04.017 align:middle
很多跟踪记录健康数据的女性都知道
月经周期是令人兴奋或相当重要的数据

00:07:58.412 --> 00:08:04.017 align:middle
很多跟踪记录健康数据的女性都知道
月经周期是令人兴奋或相当重要的数据

00:08:04.351 --> 00:08:08.455 align:middle
对于许多想要怀孕生子的夫妻
和许多不想要孩子的夫妻来说

00:08:08.922 --> 00:08:14.428 align:middle
排卵期 理解荷尔蒙变化
或紊乱的监测结果是非常重要的信息

00:08:16.630 --> 00:08:20.267 align:middle
也许谈论这些敏感甚至私密的
数据会令人感觉有些奇怪

00:08:20.801 --> 00:08:25.639 align:middle
可是当我们谈到技术改善生活时
这些都是非常关键重要而有意义的信息

00:08:25.939 --> 00:08:30.110 align:middle
它帮助女性理解并了解自己的身体状况
从而可以控制健康情况

00:08:31.211 --> 00:08:32.946 align:middle
它可以帮助并已帮助数百万人

00:08:33.013 --> 00:08:36.416 align:middle
在了解可靠信息的基础上
对生育和计划生育做出决策

00:08:38.217 --> 00:08:39.919 align:middle
跟踪排卵期的app是

00:08:39.986 --> 00:08:43.590 align:middle
App Store中Health和Fitness
类别下最受欢迎的app产品

00:08:43.890 --> 00:08:46.527 align:middle
这也是HealthKit
第一大开发要求

00:08:47.194 --> 00:08:50.063 align:middle
我们很兴奋能在
iOS 9中为这些app提供支持

00:08:54.935 --> 00:08:56.670 align:middle
在生殖健康方面有着许多因素

00:08:57.037 --> 00:08:59.106 align:middle
我们先从6个新类型开始

00:08:59.339 --> 00:09:03.944 align:middle
这些都是公开内容
也许对想要宝宝的人或是不想怀孕

00:08:59.339 --> 00:09:03.944 align:middle
这些都是公开内容
也许对想要宝宝的人或是不想怀孕

00:09:04.211 --> 00:09:07.648 align:middle
或希望对自己的健康状况全面了解的人
都会有所帮助

00:09:10.250 --> 00:09:11.818 align:middle
第一种是
Basal Body Temperature

00:09:11.885 --> 00:09:14.154 align:middle
针对每种类型
我们会在Apple Health中

00:09:14.221 --> 00:09:17.191 align:middle
添加控制图给大家看到数据视觉化

00:09:20.427 --> 00:09:22.896 align:middle
基础体温是身体在休息状态下的温度

00:09:22.963 --> 00:09:25.098 align:middle
通常是在清晨测量

00:09:25.165 --> 00:09:29.336 align:middle
它呈现双相变化
在排卵后会稍稍上升

00:09:30.003 --> 00:09:32.806 align:middle
人们常常会在同一时间
一连数月跟踪基础体温

00:09:33.073 --> 00:09:36.543 align:middle
这样就会得出周期图形
并可以大体预测下一个周期的时间

00:09:37.077 --> 00:09:39.046 align:middle
一般都是用铅笔和纸张记录的

00:09:39.213 --> 00:09:41.181 align:middle
这种跟踪排卵的办法由来已久

00:09:43.984 --> 00:09:49.223 align:middle
还有一种跟踪或检测排卵期的常见办法
是测量宫颈粘液质量

00:09:50.757 --> 00:09:52.826 align:middle
与基础体温的变化相反

00:09:52.893 --> 00:09:55.128 align:middle
宫颈粘液是在排卵期之前发生变化

00:09:55.896 --> 00:09:58.632 align:middle
在HealthKit中这是类别样本

00:09:58.699 --> 00:10:00.601 align:middle
其中会列出医学一般
会接受的宫颈粘液状态

00:09:58.699 --> 00:10:00.601 align:middle
其中会列出医学一般
会接受的宫颈粘液状态

00:10:03.937 --> 00:10:07.040 align:middle
我们添加的下一个类型是
Ovulation Test Results

00:10:08.575 --> 00:10:12.513 align:middle
对女性来说
黄体生成素激增会导致排卵

00:10:13.580 --> 00:10:17.784 align:middle
用户可以购买家庭测试套装和LH试纸
来测量LH高峰

00:10:19.419 --> 00:10:24.324 align:middle
在HealthKit
这种类别样本测量结果是阴性或阳性

00:10:28.662 --> 00:10:31.498 align:middle
经期是否健康是极其重要的指标

00:10:32.032 --> 00:10:36.737 align:middle
医生经常会问及女性末次经期的时间
以及生理周期的规律性情况

00:10:37.070 --> 00:10:43.143 align:middle
帮助人们记录经期情况的App
非常受欢迎而且种类繁多

00:10:44.178 --> 00:10:46.780 align:middle
在HealthKit中
我们添加了类别样本

00:10:48.582 --> 00:10:51.185 align:middle
我们还添加了新的元数据秘钥

00:10:52.186 --> 00:10:54.188 align:middle
Menstrual Cycle Starts

00:10:54.254 --> 00:10:57.858 align:middle
因为上次经期的时间和周期规律性
是重要的医学信息

00:10:57.925 --> 00:11:00.994 align:middle
我们要让app便于计算这类信息才行

00:10:57.925 --> 00:11:00.994 align:middle
我们要让app便于计算这类信息才行

00:11:02.796 --> 00:11:05.632 align:middle
我们让所有的客户端
都记录这个布林元数据秘钥

00:11:05.699 --> 00:11:07.568 align:middle
如果我们看不到就会抛出异常

00:11:10.037 --> 00:11:11.271 align:middle
我们再来看元数据

00:11:11.672 --> 00:11:15.742 align:middle
元数据是提供HealthKit对象
额外信息的字典

00:11:15.809 --> 00:11:17.578 align:middle
可以帮助扩展规定的对象类型

00:11:17.644 --> 00:11:19.913 align:middle
并为HealthKit
添加具体app信息

00:11:21.014 --> 00:11:25.252 align:middle
字典秘钥是你可以生成的字符串
或是Apple预定义的秘钥

00:11:25.719 --> 00:11:28.856 align:middle
预定义秘钥可便于在不同的应用中分享

00:11:29.389 --> 00:11:31.491 align:middle
我们现在来生成包含

00:11:32.392 --> 00:11:33.594 align:middle
重要信息的元数据字典

00:11:34.094 --> 00:11:37.164 align:middle
在最后保存到
HealthKit之前

00:11:37.264 --> 00:11:38.565 align:middle
我们生成样本时

00:11:38.632 --> 00:11:41.435 align:middle
会将样本放入适当的数值类型
并传递到元数据

00:11:45.772 --> 00:11:47.674 align:middle
接下来的两个类型是类别样本

00:11:47.741 --> 00:11:51.678 align:middle
但与HealthKit现有类别样本不同
它们只有单一的值

00:11:51.879 --> 00:11:54.681 align:middle
HK Category Value
Not Applicable

00:11:55.682 --> 00:11:58.919 align:middle
这些类别样本
有数据 元数据和其他属性

00:11:58.986 --> 00:12:02.256 align:middle
它们无法列入多个值

00:11:58.986 --> 00:12:02.256 align:middle
它们无法列入多个值

00:12:03.524 --> 00:12:05.526 align:middle
因此这些类型中首先是阴道出血

00:12:05.926 --> 00:12:10.030 align:middle
这是指在经期以外发生的少量出血

00:12:10.564 --> 00:12:11.798 align:middle
因此它与
经期不同

00:12:14.468 --> 00:12:16.537 align:middle
我们添加的第二类型是性生活

00:12:17.771 --> 00:12:24.144 align:middle
性生活在许多排卵跟踪应用中
也是相关的重要信息

00:12:24.711 --> 00:12:26.847 align:middle
我们在HealthKit中
也增加了相应支持

00:12:27.447 --> 00:12:30.150 align:middle
还新添了可选预定义元数据秘钥

00:12:30.217 --> 00:12:32.352 align:middle
Sexual Activity Protection Use

00:12:32.419 --> 00:12:36.123 align:middle
这是指预防性传播疾病或防止怀孕

00:12:40.427 --> 00:12:41.562 align:middle
我们来总结一下

00:12:41.762 --> 00:12:45.566 align:middle
刚说过在iOS 9增加的新数据类型

00:12:45.766 --> 00:12:49.436 align:middle
Water Intake和UV Exposure
和Fitzpatrick Skin Type

00:12:49.503 --> 00:12:51.939 align:middle
以及6种新的生殖健康类型

00:12:52.806 --> 00:12:59.012 align:middle
我们希望看到大家在自己的应用设备中
会创造性地使用这些数据类型

00:13:00.147 --> 00:13:03.217 align:middle
现在有请艾伦来介绍数据源部分

00:13:09.923 --> 00:13:10.757 align:middle
谢谢 香农

00:13:11.725 --> 00:13:13.026 align:middle
大家好 我是艾伦

00:13:13.093 --> 00:13:15.896 align:middle
是Apple HealthKit
团队的软件工程师

00:13:17.464 --> 00:13:18.532 align:middle
我们刚刚听过香农

00:13:18.765 --> 00:13:22.402 align:middle
介绍了iOS 9中的
HealthKit新类型

00:13:22.870 --> 00:13:27.374 align:middle
我来讲讲大家用iOS 9的
HealthKit还能做些什么

00:13:28.275 --> 00:13:31.912 align:middle
我要介绍的第一部分改变
是关于数据源

00:13:34.581 --> 00:13:37.351 align:middle
HealthKit可以通过
不同的源保存数据

00:13:37.818 --> 00:13:42.456 align:middle
可以从用户iPhone中的
Motion代码处理器或连接的蓝牙

00:13:42.890 --> 00:13:45.225 align:middle
心率监测器自动提取样本

00:13:46.193 --> 00:13:50.163 align:middle
也可以是来自
Health app手动输入的样本

00:13:50.631 --> 00:13:54.835 align:middle
或由诸位这样的开发人员
创建的应用保存的样本

00:13:56.870 --> 00:14:00.007 align:middle
知道HealthKit的数据
是来自哪里很重要

00:13:56.870 --> 00:14:00.007 align:middle
知道HealthKit的数据
是来自哪里很重要

00:14:00.073 --> 00:14:03.977 align:middle
特别是如果你在使用数据进行
医学或研究工作时 更是如此

00:14:04.611 --> 00:14:07.147 align:middle
那么怎样判定HealthKit的
数据是来自哪里呢？

00:14:09.650 --> 00:14:13.487 align:middle
HK对象类是所有
存储在HealthKit的根类

00:14:14.021 --> 00:14:17.925 align:middle
在iOS 8中
它有数据源相关的两个属性

00:14:19.326 --> 00:14:20.928 align:middle
其一是Source属性

00:14:21.595 --> 00:14:24.932 align:middle
它代表着用哪个应用保存该对象

00:14:26.700 --> 00:14:28.468 align:middle
第二个属性是元数据

00:14:29.203 --> 00:14:35.075 align:middle
开发人员常用元数据存储
生成对象的外部设备信息

00:14:36.009 --> 00:14:40.681 align:middle
这些信息可以是外部设备的名称
或厂商名称

00:14:41.982 --> 00:14:44.651 align:middle
在iOS 9中
我们引入了两个新属性

00:14:44.718 --> 00:14:47.554 align:middle
可以提供对象来自何处的更丰富信息

00:14:49.389 --> 00:14:52.159 align:middle
这些新属性中第一个是
Source Revision属性

00:14:52.559 --> 00:14:54.261 align:middle
而且替代了Source属性

00:14:54.962 --> 00:15:01.869 align:middle
除了代表生成样本的应用
它还带着保存对象的app版本

00:14:54.962 --> 00:15:01.869 align:middle
除了代表生成样本的应用
它还带着保存对象的app版本

00:15:03.036 --> 00:15:05.172 align:middle
第二个是Device属性

00:15:05.739 --> 00:15:10.143 align:middle
会返回代表生成对象的外部设备的对象

00:15:11.078 --> 00:15:15.082 align:middle
它本意是替代外部设备相关的元数据

00:15:17.985 --> 00:15:21.955 align:middle
我们再来看看
HK Source Revision类

00:15:22.623 --> 00:15:24.992 align:middle
它有两个属性源代码

00:15:25.926 --> 00:15:27.194 align:middle
同样代表着...

00:15:27.427 --> 00:15:28.262 align:middle
不好意思

00:15:28.662 --> 00:15:33.967 align:middle
代表着保存数据的应用
这样它也包括版本字符串

00:15:35.435 --> 00:15:37.237 align:middle
当你在HealthKit中
保存数据时

00:15:37.838 --> 00:15:41.308 align:middle
HealthKit会自动
为它赋值HK源代码修改

00:15:42.276 --> 00:15:47.447 align:middle
版本字符串来自app的
Info plist中的束版本输入

00:15:49.049 --> 00:15:51.752 align:middle
在iOS 9之前
保存在HealthKit的对象

00:15:51.818 --> 00:15:53.086 align:middle
将会有空版本字符串

00:15:56.023 --> 00:15:57.824 align:middle
我们来谈谈HK Device

00:15:58.825 --> 00:16:01.929 align:middle
HK Device类包括若干

00:15:58.825 --> 00:16:01.929 align:middle
HK Device类包括若干

00:16:01.995 --> 00:16:06.166 align:middle
代表硬件设备不同方面的字符串

00:16:06.266 --> 00:16:10.370 align:middle
例如名称厂家 版本信息 等等

00:16:11.538 --> 00:16:17.878 align:middle
当你创建设备时
你需要向用户提供尽可能多的适用属性

00:16:17.945 --> 00:16:23.784 align:middle
并向其他应用提供对象来自哪里的信息

00:16:26.753 --> 00:16:33.327 align:middle
如果你app保存的对象
是由app设备上内置的感应器生成

00:16:33.894 --> 00:16:37.197 align:middle
你可以在HK Device上
使用本地设备类方法

00:16:37.397 --> 00:16:41.902 align:middle
以获取一个设备来代表你的
app运行的设备

00:16:45.105 --> 00:16:48.475 align:middle
我们先来看怎样在设备上保存样本

00:16:49.309 --> 00:16:53.580 align:middle
首先你要创建具备所有适用属性的设备

00:16:54.915 --> 00:17:00.487 align:middle
接下来使用一个采用设备的
HK样本子类

00:16:54.915 --> 00:17:00.487 align:middle
接下来使用一个采用设备的
HK样本子类

00:17:00.554 --> 00:17:02.689 align:middle
初始化方法实例化样本

00:17:03.624 --> 00:17:04.491 align:middle
最后和之前一样

00:17:05.025 --> 00:17:07.961 align:middle
你可以把对象
保存到HealthKit

00:17:10.731 --> 00:17:15.502 align:middle
查询来自某个源代码修改
或设备的对象也很容易

00:17:16.270 --> 00:17:22.142 align:middle
你可以用新介绍的谓词便捷方法来面对
iOS 9中的HK Query

00:17:25.244 --> 00:17:30.918 align:middle
这里的示例是查询在之前版本
应用中保存的对象

00:17:32.753 --> 00:17:38.458 align:middle
首先我们用默认源代码
生成源代码修改和1.0版本的字符串

00:17:40.627 --> 00:17:47.467 align:middle
之后对谓词实例化
以匹配有着源代码修改的所有样本

00:17:49.069 --> 00:17:52.072 align:middle
最后我们会执行HK样本查询

00:17:52.739 --> 00:17:58.045 align:middle
它会返回给我们
用应用版本1生成的所有对象

00:18:05.485 --> 00:18:09.056 align:middle
现在我们介绍了在HealthKit
保存对象的新方法

00:18:09.156 --> 00:18:11.325 align:middle
再来介绍一些删除对象的方法

00:18:13.894 --> 00:18:16.730 align:middle
iOS 8只有一种 删除对象的方法

00:18:16.797 --> 00:18:20.000 align:middle
这就是HK Health Store中的
Delete Object方法

00:18:20.534 --> 00:18:22.102 align:middle
它会删除单独的对象

00:18:22.736 --> 00:18:28.208 align:middle
这很简单
但若一次删除多个样本就会有些麻烦

00:18:28.475 --> 00:18:31.912 align:middle
我们现在引入了两种新的便捷方法
来删除对象

00:18:33.814 --> 00:18:35.115 align:middle
第一种是
HK Health Store的方法

00:18:35.182 --> 00:18:37.451 align:middle
这可以删除一组对象

00:18:38.118 --> 00:18:41.555 align:middle
每当你有之前查询过的样本系列

00:18:41.622 --> 00:18:43.357 align:middle
并想将之全部删除时
可以用这个

00:18:44.057 --> 00:18:47.561 align:middle
例如 你也许想用HK Device

00:18:47.728 --> 00:18:51.765 align:middle
而不是元数据
将之前版本的app保存样本做转移

00:18:52.933 --> 00:18:56.170 align:middle
一旦您保存了以往对象的新拷贝

00:18:56.236 --> 00:18:59.306 align:middle
你可用Delete Objects
删除所有旧对象

00:19:01.108 --> 00:19:03.777 align:middle
我们要介绍的第二个新方法就是

00:19:03.877 --> 00:19:05.846 align:middle
Delete Objects Of Type

00:19:06.380 --> 00:19:08.882 align:middle
因此它会删除匹配给定谓词的
所有对象

00:19:09.550 --> 00:19:13.253 align:middle
这样做很高效
因为你在删除对象之前不必查询

00:19:20.561 --> 00:19:27.100 align:middle
你并非总是要删除对象
有时你也会需要了解何时删除的对象

00:19:27.701 --> 00:19:30.204 align:middle
也许是用户或是另外的应用做了删除

00:19:31.238 --> 00:19:33.473 align:middle
如果你的app
与HealthKit同步

00:19:33.807 --> 00:19:36.443 align:middle
一旦从HealthKit的数据库
删除对象

00:19:36.510 --> 00:19:39.213 align:middle
你最好从你的数据库把对象删除

00:19:39.646 --> 00:19:43.050 align:middle
在iOS 8没有简单的办法
来实现这点

00:19:43.517 --> 00:19:45.118 align:middle
我们引入了新方法

00:19:45.185 --> 00:19:49.957 align:middle
通过Anchored Object Query类
查询 在iOS 9中删除的对象

00:19:52.726 --> 00:19:54.061 align:middle
HK Anchored Object Query

00:19:54.161 --> 00:19:56.964 align:middle
有带有结果
处理器代码块的新初始程序

00:19:57.297 --> 00:20:01.034 align:middle
其中的参数包括
新样本和删除的样本

00:19:57.297 --> 00:20:01.034 align:middle
其中的参数包括
新样本和删除的样本

00:20:02.202 --> 00:20:03.670 align:middle
现在当你执行这个查询时

00:20:04.137 --> 00:20:09.543 align:middle
HealthKit会返回
自上次你运行锚定对象查询后

00:20:09.977 --> 00:20:12.179 align:middle
匹配谓词的生成或删除的所有样本

00:20:12.546 --> 00:20:14.581 align:middle
这是由你所提供的锚来表明

00:20:18.719 --> 00:20:23.257 align:middle
删除的对象
通过HK Deleted Object类的

00:20:23.524 --> 00:20:26.393 align:middle
实例来代表其中携带了
删除对象的UID

00:20:27.761 --> 00:20:28.729 align:middle
为节省空间

00:20:28.795 --> 00:20:33.867 align:middle
删除对象仅在被永久销毁前有限时间内
存储在HealthKit中

00:20:37.171 --> 00:20:41.742 align:middle
这意味着如果你有功能
需要取决于查询被删除的对象

00:20:42.009 --> 00:20:47.548 align:middle
你应该注册背景升级
以确保你的app会因删除而启动

00:20:48.282 --> 00:20:52.119 align:middle
你可以使用iOS 8中的
Enable Background Delivery For Type方法

00:20:52.186 --> 00:20:58.525 align:middle
它会因iOS 9中的
删除和样本生成而启动

00:21:01.628 --> 00:21:04.698 align:middle
现在我们回到
HK Anchored Object Query

00:21:04.765 --> 00:21:09.469 align:middle
来谈谈在iOS 9中
针对类的第二个新添内容

00:21:09.837 --> 00:21:11.538 align:middle
即Update Handler属性

00:21:13.073 --> 00:21:13.907 align:middle
一旦提供

00:21:14.174 --> 00:21:20.814 align:middle
当生成或删除匹配谓词的更多样本时
在结果处理器之后就会调用代码块

00:21:23.784 --> 00:21:28.622 align:middle
有着更新处理器的HK锚定对象查询
会继续无限期运行

00:21:28.689 --> 00:21:32.759 align:middle
直至你在HK Health Store
用Stop Query停止它

00:21:33.961 --> 00:21:35.529 align:middle
在本次讲座稍后的部分

00:21:35.929 --> 00:21:37.664 align:middle
你会看到这是

00:21:37.731 --> 00:21:40.234 align:middle
处理来自HealthKit的
数据流的有效方法

00:21:41.034 --> 00:21:45.806 align:middle
例如你可能会想从HealthKit
显示用户的最新心率数据

00:21:46.306 --> 00:21:48.542 align:middle
你可以使用更新处理器来实现

00:21:49.209 --> 00:21:50.210 align:middle
大家也许注意到

00:21:50.410 --> 00:21:54.081 align:middle
Apple最近推出了新的硬件
它可以读取佩戴者的心率

00:21:54.715 --> 00:21:57.985 align:middle
如果能从该设备上直接运行这个查询
会不会很酷？

00:21:58.619 --> 00:22:00.020 align:middle
而你的确可以

00:21:58.619 --> 00:22:00.020 align:middle
而你的确可以

00:22:01.755 --> 00:22:06.527 align:middle
今年除了在iOS 9在
对HealthKit做了改进

00:22:07.027 --> 00:22:09.429 align:middle
我们还带来了
WatchKit app的框架

00:22:17.704 --> 00:22:21.275 align:middle
watchOS上的HealthKit
与iOS的HealthKit非常像

00:22:21.708 --> 00:22:24.511 align:middle
你所熟悉的几乎所有
HealthKit API

00:22:24.678 --> 00:22:26.380 align:middle
在watchOS中也都可用

00:22:27.447 --> 00:22:33.320 align:middle
你可以用习惯的相同查询和方法
来存储和提取健康数据

00:22:34.188 --> 00:22:38.091 align:middle
但是因为在新平台上
性能相当重要

00:22:38.592 --> 00:22:42.963 align:middle
只有有限的HealthKit
历史数据 在Watch上可用

00:22:44.097 --> 00:22:46.967 align:middle
我们还会介绍崭新的健身API

00:22:47.301 --> 00:22:49.703 align:middle
这可以在Watch上记录锻炼数据

00:22:51.638 --> 00:22:54.808 align:middle
最后
在Watch的HealthKit中

00:22:54.875 --> 00:22:58.078 align:middle
保存的数据会自动同步到用户的手机上

00:23:00.714 --> 00:23:03.217 align:middle
当你的app将锻炼数据
保存到Apple Watch时

00:23:03.383 --> 00:23:06.687 align:middle
消耗的能量也会在运动环中记录

00:23:07.354 --> 00:23:13.060 align:middle
你的用户一定会喜欢佩戴Watch时
使用你的app

00:23:14.027 --> 00:23:15.529 align:middle
大家可以在这些截屏中看到

00:23:16.330 --> 00:23:17.397 align:middle
你保存的锻炼数据

00:23:17.798 --> 00:23:22.669 align:middle
将会在iOS的Daily Summary
和Activity app显示

00:23:25.839 --> 00:23:29.710 align:middle
在我进一步探讨锻炼前
我先要介绍有关隐私问题

00:23:30.577 --> 00:23:34.147 align:middle
我们相当重视用户的
HealthKit数据的隐私性

00:23:34.348 --> 00:23:37.951 align:middle
所以和iOS一样
我们自然会在Watch对之妥善保护

00:23:38.452 --> 00:23:43.524 align:middle
我们需要申请访问权
才能使用HealthKit数据

00:23:45.826 --> 00:23:47.528 align:middle
当你的app申请授权时

00:23:47.794 --> 00:23:50.664 align:middle
弹出框会同时出现
在Watch和用户的手机

00:23:50.964 --> 00:23:52.733 align:middle
来授权你的app可以访问

00:23:54.835 --> 00:24:00.140 align:middle
假设 如果你的手机应用已经授权
存储并提取距离样本

00:23:54.835 --> 00:24:00.140 align:middle
假设 如果你的手机应用已经授权
存储并提取距离样本

00:24:00.707 --> 00:24:05.879 align:middle
那么也会授权Watch app存储
并提取距离样本

00:24:07.548 --> 00:24:10.751 align:middle
一旦WatchKit app得到
授权可以使用HealthKit数据

00:24:10.984 --> 00:24:13.420 align:middle
你可能就想记录锻炼数据

00:24:15.556 --> 00:24:16.523 align:middle
我们引入了全新的

00:24:16.723 --> 00:24:19.927 align:middle
HK Workout Session类
来实现这一点

00:24:20.594 --> 00:24:24.998 align:middle
有了HK Workout Session
你可以明确用户从事的运动类型

00:24:25.399 --> 00:24:30.237 align:middle
该信息将帮助Apple Watch
更准确地记录用户的运动情况

00:24:31.338 --> 00:24:33.774 align:middle
在会话中你的app会位于前景

00:24:34.007 --> 00:24:37.277 align:middle
每当用户抬起手腕
检查锻炼的进度时

00:24:37.544 --> 00:24:39.046 align:middle
你的app就会在
前面居中的位置

00:24:40.314 --> 00:24:43.283 align:middle
注意在任何具体时间中
只有一个锻炼会话可以运行

00:24:43.650 --> 00:24:47.187 align:middle
如果用户在另一个应用
开始了另外的锻炼

00:24:47.454 --> 00:24:48.856 align:middle
你的锻炼会话就会结束

00:24:52.159 --> 00:24:53.994 align:middle
我们现在来看
HK Workout Session

00:24:55.596 --> 00:24:59.199 align:middle
你会用运动类型和位置类型
实例化锻炼会话

00:25:00.234 --> 00:25:04.938 align:middle
位置类型表明运动是否发生
在室内还是户外

00:25:07.040 --> 00:25:08.542 align:middle
你还可以设置委托

00:25:10.444 --> 00:25:13.747 align:middle
这可以实现告知你锻炼状态发生了改变

00:25:17.651 --> 00:25:22.089 align:middle
那么HK Workout Session
委托协议有着两种方式

00:25:23.857 --> 00:25:27.361 align:middle
每当锻炼发生改变时
就会调用第一种

00:25:27.861 --> 00:25:31.131 align:middle
例如从Not Started到Running
或从Running到Ended

00:25:31.865 --> 00:25:35.169 align:middle
这是个不错的机会
可以记录锻炼的开始和结束日期

00:25:35.502 --> 00:25:38.605 align:middle
同时还可以开始或停止
任何可能的数据查询

00:25:41.775 --> 00:25:44.344 align:middle
只要出现错误
就会调用第二种方法

00:25:45.646 --> 00:25:47.514 align:middle
会在第一种方法之外再调用它

00:25:48.315 --> 00:25:50.717 align:middle
并会表明你的锻炼会话已经结束

00:25:54.021 --> 00:25:56.390 align:middle
开始和停止锻炼会话其实很简单

00:25:56.590 --> 00:25:58.025 align:middle
你只需要在HK Health Store

00:25:58.091 --> 00:26:00.460 align:middle
调用Start Workout Session
或Stop Workout Session

00:25:58.091 --> 00:26:00.460 align:middle
调用Start Workout Session
或Stop Workout Session

00:26:01.428 --> 00:26:03.564 align:middle
现在我来快速解释一下

00:26:03.797 --> 00:26:07.401 align:middle
怎样用这些新款API
搭建WatchKit app

00:26:15.776 --> 00:26:17.945 align:middle
我已经搭建了一个
简单的WatchKit应用

00:26:18.145 --> 00:26:20.347 align:middle
我要给大家看一下
这个app怎么用

00:26:23.483 --> 00:26:26.920 align:middle
它可以让用户规定从事的运动形式

00:26:27.454 --> 00:26:28.322 align:middle
例如跑步

00:26:28.722 --> 00:26:29.590 align:middle
我选择跑步

00:26:30.557 --> 00:26:34.461 align:middle
一旦选定了运动类型
它们就会选择位置类型

00:26:38.098 --> 00:26:39.366 align:middle
户外或室内

00:26:40.634 --> 00:26:41.568 align:middle
我选的是户外

00:26:42.636 --> 00:26:46.607 align:middle
这是进行会话的视图
它会显示该锻炼的几项指标

00:26:48.041 --> 00:26:51.712 align:middle
在会话视图中什么都没有
因为我们没连上HealthKit

00:26:52.045 --> 00:26:52.980 align:middle
我们现在就动手

00:26:57.284 --> 00:27:01.221 align:middle
在Xcode中
我们看到我的运动界面控制器

00:26:57.284 --> 00:27:01.221 align:middle
在Xcode中
我们看到我的运动界面控制器

00:27:02.089 --> 00:27:06.560 align:middle
这是第一个我们刚看到的视图
用户选择所从事的运动类型

00:27:07.294 --> 00:27:12.332 align:middle
这是我申请授权访问
HealthKit数据的绝好机会

00:27:13.500 --> 00:27:15.669 align:middle
我现在马上
就在这里...

00:27:16.036 --> 00:27:18.739 align:middle
不好意思
是Will Activate方法

00:27:22.576 --> 00:27:27.581 align:middle
首先我实例化了要分享的一组类型
其中就包括锻炼类型

00:27:28.782 --> 00:27:33.587 align:middle
接着我要从HealthKit
读取一系列类型

00:27:34.188 --> 00:27:39.893 align:middle
例如长途单车 长途步行
还有跑步能量消耗以及用户的心率

00:27:41.128 --> 00:27:44.097 align:middle
最后我们调用并申请授权来分享类型

00:27:44.231 --> 00:27:46.200 align:middle
这和iOS中一样

00:27:47.201 --> 00:27:53.140 align:middle
现在我们需要在配套的应用中
做点什么来完成这个申请

00:27:54.474 --> 00:27:57.044 align:middle
在配套app的app委托中

00:27:57.811 --> 00:28:01.515 align:middle
我将要执行新的UI应用委托方式

00:27:57.811 --> 00:28:01.515 align:middle
我将要执行新的UI应用委托方式

00:28:04.484 --> 00:28:07.020 align:middle
应用应该申请健康授权

00:28:08.622 --> 00:28:13.160 align:middle
我只需要为完成扩展调用处理授权

00:28:13.493 --> 00:28:15.762 align:middle
这会提示用户为我的app授权

00:28:17.397 --> 00:28:18.532 align:middle
我们来看这个操作

00:28:27.808 --> 00:28:28.642 align:middle
大家可以看到

00:28:28.709 --> 00:28:35.115 align:middle
用户会在Watch和手机上都得到
提示打开我的app并授权

00:28:37.451 --> 00:28:39.987 align:middle
这是熟悉的健康授权表格

00:28:40.721 --> 00:28:43.457 align:middle
我批准app访问它所需的任何内容

00:28:44.658 --> 00:28:45.492 align:middle
并点击Allow

00:28:46.760 --> 00:28:48.962 align:middle
现在我们得到授权
可使用HealthKit数据

00:28:51.498 --> 00:28:52.799 align:middle
接下来

00:28:53.333 --> 00:28:56.069 align:middle
我们需要在用户点击Start时
开始锻炼会话

00:28:57.437 --> 00:28:59.806 align:middle
我这里有
Workout Session Manager类

00:28:59.873 --> 00:29:03.744 align:middle
这就是负责管理
我和HealthKit互动的地方

00:28:59.873 --> 00:29:03.744 align:middle
这就是负责管理
我和HealthKit互动的地方

00:29:07.514 --> 00:29:10.517 align:middle
这是个很大的类
但是我们只会执行其中的一部分

00:29:12.119 --> 00:29:15.656 align:middle
我们点击Start
调用Start Workout方法

00:29:16.657 --> 00:29:21.261 align:middle
我希望开始之前在构造器上
实例化的锻炼会话

00:29:26.867 --> 00:29:28.735 align:middle
我们只需要在
包含锻炼会话的

00:29:28.869 --> 00:29:32.272 align:middle
HK Health Store调用
Start Workout Session

00:29:33.740 --> 00:29:39.880 align:middle
现在我们需要执行锻炼会话委托协议
这样我们就会得知锻炼状态发生的改变

00:29:42.683 --> 00:29:46.286 align:middle
因为这是在背景提示中
调用我在处理状态

00:29:46.353 --> 00:29:47.921 align:middle
改变前 我在回调主队列

00:29:50.357 --> 00:29:54.528 align:middle
如果会话状态改为Running
我会调用Workout Did方式

00:29:54.962 --> 00:29:58.031 align:middle
如果它改为Ended
我会调用Workout Did End

00:30:02.102 --> 00:30:04.037 align:middle
我们继续
Workout Did Start

00:30:05.472 --> 00:30:09.710 align:middle
我们需要
为HealthKit数据进行查询

00:30:09.776 --> 00:30:11.144 align:middle
以便在锻炼中显示

00:30:12.446 --> 00:30:14.014 align:middle
其中的一个指标是距离

00:30:14.081 --> 00:30:18.051 align:middle
我需要查询
从HealthKit搜集距离数据

00:30:18.185 --> 00:30:20.988 align:middle
并把它累计到锻炼会话进度中

00:30:21.889 --> 00:30:27.528 align:middle
我将会生成助手方式
在这里生成查询

00:30:27.594 --> 00:30:31.031 align:middle
我们还会使用HK Anchored Object
用升级处理器来查询

00:30:36.537 --> 00:30:38.872 align:middle
所以我编写了
Create Streaming Distance Query

00:30:38.939 --> 00:30:40.274 align:middle
它采用了锻炼开始日期

00:30:42.142 --> 00:30:44.244 align:middle
我们首先做的是生成一个谓词

00:30:44.811 --> 00:30:48.282 align:middle
可以匹配所有查询
不好意思...

00:30:48.482 --> 00:30:52.886 align:middle
是锻炼开始日期后的所有样本

00:30:54.288 --> 00:31:00.527 align:middle
接下来通过结果处理器
我实例化了HK锚定对象查询

00:30:54.288 --> 00:31:00.527 align:middle
接下来通过结果处理器
我实例化了HK锚定对象查询

00:31:00.594 --> 00:31:03.130 align:middle
并调用了
Add Distance Samples方法

00:31:04.097 --> 00:31:06.533 align:middle
Add Distance Samples
在这里执行

00:31:07.801 --> 00:31:09.369 align:middle
它回调了主提示

00:31:09.770 --> 00:31:14.474 align:middle
并在我的总跑步距离中添加了距离样本

00:31:14.775 --> 00:31:19.780 align:middle
也将样本添加到我在锻炼过程中
积累的一组样本中

00:31:22.049 --> 00:31:25.452 align:middle
同样在结果处理器中
我们调用Add Distance Samples

00:31:25.919 --> 00:31:29.823 align:middle
并在更新处理器中
我们做了完全一样的内容

00:31:30.257 --> 00:31:31.959 align:middle
最后我们返回距离查询

00:31:33.560 --> 00:31:37.331 align:middle
现在这已经在
Workout Did Start中使用了

00:31:43.904 --> 00:31:47.341 align:middle
Workout Did Start
注意到锻炼的开始日期

00:31:47.808 --> 00:31:52.613 align:middle
接着它生成查询要了解流距离
运动能量和心率等

00:31:54.147 --> 00:31:59.620 align:middle
它执行了我们生成的所有查询
然后告知UI锻炼开始

00:32:00.888 --> 00:32:02.756 align:middle
我们来看怎样来实现

00:32:12.833 --> 00:32:14.468 align:middle
我再次选定跑步

00:32:15.302 --> 00:32:16.136 align:middle
是户外跑步

00:32:17.504 --> 00:32:19.740 align:middle
正如大家所见
计时器在走

00:32:21.041 --> 00:32:27.948 align:middle
我也在累计模拟距离样本
也显示了部分卡路里样本

00:32:29.149 --> 00:32:32.519 align:middle
这样用户可以在app的这个地方看到
他们的距离 卡路里 心率等

00:32:34.087 --> 00:32:38.592 align:middle
最后我们想要支持用户的是
停止并保存锻炼数据

00:32:39.893 --> 00:32:43.130 align:middle
我有个Force Touch菜单
其中只有一个Save按钮

00:32:44.164 --> 00:32:46.333 align:middle
在锻炼结束时
用户可以点击按钮

00:32:47.601 --> 00:32:50.304 align:middle
我们还没有执行它
所以锻炼还在继续

00:32:51.038 --> 00:32:52.072 align:middle
现在我们就动手执行

00:32:58.712 --> 00:33:01.481 align:middle
这里是
Stop Workout And Save方法

00:32:58.712 --> 00:33:01.481 align:middle
这里是
Stop Workout And Save方法

00:33:01.849 --> 00:33:06.320 align:middle
每当用户点击Force Touch
菜单按钮 UI就会调用这个方法

00:33:07.521 --> 00:33:09.056 align:middle
我会在这里停止锻炼会话

00:33:14.194 --> 00:33:16.697 align:middle
只要调用
Stop Workout Session即可

00:33:18.198 --> 00:33:21.368 align:middle
我们需要将状态改变到结束状态

00:33:22.703 --> 00:33:25.506 align:middle
我们相应调用
Workout Did End

00:33:29.576 --> 00:33:32.479 align:middle
这里大家可能想到了
我需要停止查询

00:33:32.880 --> 00:33:34.081 align:middle
接着保存锻炼结果

00:33:39.653 --> 00:33:40.954 align:middle
我们会注意到锻炼的结束日期

00:33:42.055 --> 00:33:43.390 align:middle
我们会停止所有的查询

00:33:44.658 --> 00:33:46.460 align:middle
我们会告知UI锻炼停止

00:33:47.261 --> 00:33:48.395 align:middle
然后我们会保存锻炼结果

00:33:52.199 --> 00:33:54.501 align:middle
将锻炼结果保存到
HealthKit也相当简单

00:33:59.373 --> 00:34:03.744 align:middle
首先我要做的是
打开开始和结束日期

00:33:59.373 --> 00:34:03.744 align:middle
首先我要做的是
打开开始和结束日期

00:34:04.478 --> 00:34:07.915 align:middle
我在Workout Did Start
和Workout Did End见到过

00:34:07.981 --> 00:34:10.284 align:middle
我来使用Swift的最新守护语句

00:34:10.350 --> 00:34:12.018 align:middle
如果这些是零值
则会提早返回

00:34:13.853 --> 00:34:20.827 align:middle
接下来用户从事的运动类型的
开始和结束日期 消耗总能量和距离

00:34:20.893 --> 00:34:22.795 align:middle
将锻炼实例化

00:34:26.166 --> 00:34:30.603 align:middle
我还通过在锻炼期间积累的
所有样本生成了一个数组

00:34:30.938 --> 00:34:34.174 align:middle
因为我们想让这些样本在保存
并锻炼结果后与之关联

00:34:36.976 --> 00:34:39.279 align:middle
然后我会将锻炼结果
保存到HealthKit之中

00:34:40.147 --> 00:34:43.050 align:middle
一旦完成
我将会在锻炼结果中加入样本

00:34:44.685 --> 00:34:46.853 align:middle
现在我们就来看一下

00:34:55.529 --> 00:34:58.632 align:middle
我再次选择跑步类型
是户外跑步

00:35:00.200 --> 00:35:01.468 align:middle
我的锻炼在继续

00:35:02.769 --> 00:35:06.139 align:middle
一旦获得几个指标
我就会保存

00:35:08.375 --> 00:35:11.678 align:middle
我将要保存锻炼完成

00:35:12.713 --> 00:35:15.516 align:middle
现在我们将锻炼结果
保存到HealthKit

00:35:15.582 --> 00:35:18.085 align:middle
我们来看下在配套app中显示

00:35:20.621 --> 00:35:22.523 align:middle
这就是我们3卡路里的锻炼结果

00:35:22.990 --> 00:35:23.891 align:middle
做了不少工作

00:35:32.299 --> 00:35:36.703 align:middle
好的
我们总结一下刚才演示中的内容

00:35:37.471 --> 00:35:41.675 align:middle
首先我们请求授权访问
用户的HealthKit数据

00:35:43.243 --> 00:35:46.813 align:middle
接下来我们使用
HK Workout Session记录锻炼结果

00:35:47.381 --> 00:35:50.717 align:middle
我们通过HK Anchored Object Query
从HealthKit提取样本

00:35:51.418 --> 00:35:55.756 align:middle
最后保存HK锻炼数据到
HealthKit并将样本与之关联

00:35:59.159 --> 00:36:01.895 align:middle
这就是iOS 9中
HealthKit的新增内容

00:35:59.159 --> 00:36:01.895 align:middle
这就是iOS 9中
HealthKit的新增内容

00:36:02.596 --> 00:36:05.365 align:middle
我们今天先介绍了单位偏好API

00:36:05.732 --> 00:36:11.271 align:middle
可以实现在app中依照用户喜爱的
单位显示HealthKit数据

00:36:12.472 --> 00:36:15.309 align:middle
接下来我们讲了
HealthKit储存的新数据类型

00:36:15.542 --> 00:36:17.945 align:middle
例如Water Intake
UV Exposure

00:36:18.011 --> 00:36:19.947 align:middle
以及与生殖健康相关的信息

00:36:21.782 --> 00:36:24.885 align:middle
接着还说到源代码修改和设备

00:36:24.952 --> 00:36:28.522 align:middle
这可以为HealthKit中
数据从哪里来提供更丰富的信息

00:36:30.090 --> 00:36:34.728 align:middle
我们还介绍了删除样本以及
查询删掉的样本的新方法

00:36:35.262 --> 00:36:38.365 align:middle
最后我们探讨了
HK Workout Session API

00:36:38.432 --> 00:36:40.934 align:middle
并介绍了如何
用它搭建WatchKit app

00:36:43.537 --> 00:36:46.740 align:middle
我们觉得大家会喜欢在iOS 9中
对HealthKit所做的改进

00:36:46.807 --> 00:36:48.709 align:middle
我们真想看到大家能用它搭建出什么

00:36:50.110 --> 00:36:54.348 align:middle
若想了解更多详情
可以访问开发人员文档资料

00:36:54.414 --> 00:36:57.618 align:middle
位置在
developer.apple.com/healthKit

00:36:57.684 --> 00:36:59.152 align:middle
或是联系技术支持

00:36:59.820 --> 00:37:02.723 align:middle
一般性的问题可以联系
healthkit@apple.com

00:36:59.820 --> 00:37:02.723 align:middle
一般性的问题可以联系
healthkit@apple.com

00:37:02.990 --> 00:37:05.392 align:middle
感谢大家
希望你们会喜欢大会的其余部分
