WEBVTT

00:00:19.319 --> 00:00:23.757 align:middle
深入WatchKit 第二部分

00:00:27.861 --> 00:00:28.862 align:middle
诸位早上好

00:00:30.631 --> 00:00:32.098 align:middle
我叫 内森·德弗里斯

00:00:32.165 --> 00:00:34.635 align:middle
过一会儿您会见到
我的同事 科洛·张

00:00:35.235 --> 00:00:38.205 align:middle
我们这里将为大家献
深入WatchKit第二部分的讲座

00:00:38.972 --> 00:00:40.674 align:middle
在上一节课 也就是第一部分中

00:00:40.908 --> 00:00:43.377 align:middle
我们谈到了watchOS 1
和watchOS 2

00:00:43.477 --> 00:00:45.646 align:middle
在架构上的区别

00:00:45.946 --> 00:00:47.814 align:middle
以及它与您的应用的相关性

00:00:48.382 --> 00:00:50.484 align:middle
在此讲座中我们将更深入地查看

00:00:50.551 --> 00:00:54.555 align:middle
这一新的架构上的改变
所支持的新的API

00:00:54.888 --> 00:00:57.624 align:middle
它们让您的手表app和扩展成为可能

00:00:59.159 --> 00:01:02.796 align:middle
现在开始 我将先讲一点
非常激动人心的的事情

00:00:59.159 --> 00:01:02.796 align:middle
现在开始 我将先讲一点
非常激动人心的的事情

00:01:03.197 --> 00:01:07.701 align:middle
我们将在app内支持Digital
Crown体验 这将会很棒

00:01:09.102 --> 00:01:11.138 align:middle
接下来我们将谈一下

00:01:11.205 --> 00:01:15.275 align:middle
关于短视频以及音频内容的文本回放

00:01:15.509 --> 00:01:20.147 align:middle
以及后台播放的
较长类型的音乐和播客等等

00:01:20.214 --> 00:01:21.648 align:middle
这也是一个很出色的新API

00:01:23.417 --> 00:01:25.552 align:middle
接下来我们将谈谈音频录制

00:01:25.719 --> 00:01:28.155 align:middle
您现在可以从自己的手腕上录制音频

00:01:28.222 --> 00:01:30.224 align:middle
然后将音频片段发送给朋友发到服务器

00:01:30.290 --> 00:01:33.794 align:middle
在互联网上分享它们等等

00:01:35.128 --> 00:01:37.564 align:middle
最后我们将谈一下

00:01:37.631 --> 00:01:40.467 align:middle
在手表商存储敏感数据

00:01:40.701 --> 00:01:44.705 align:middle
现在既然您的手表
对它显示的所有信息全权负责

00:01:45.138 --> 00:01:49.176 align:middle
重要的一点是牢记
你将要存储的敏感数据

00:01:50.210 --> 00:01:51.211 align:middle
那么让我们开始讲座

00:01:52.913 --> 00:01:56.216 align:middle
Digital Crown
是一种全新的用户输入机制

00:01:56.517 --> 00:02:00.954 align:middle
它让您灵活地而且非常有触感地

00:01:56.517 --> 00:02:00.954 align:middle
它让您灵活地而且非常有触感地

00:02:01.021 --> 00:02:05.659 align:middle
使用Digital Crown
在屏幕上滚动并选择元素

00:02:06.393 --> 00:02:09.263 align:middle
它确实是一种与设备互动的
极好的方式

00:02:09.997 --> 00:02:13.934 align:middle
让我们看一下Digital
Crown支持的一些最重要的互动

00:02:15.636 --> 00:02:18.138 align:middle
首先 您最熟悉的一个

00:02:18.472 --> 00:02:19.973 align:middle
当然是滚动

00:02:20.941 --> 00:02:24.111 align:middle
把您的手指放在Crown 上面
慢慢转动 慢慢滚动

00:02:24.344 --> 00:02:26.647 align:middle
或者快速地轻轻拂动借助惯性滚动

00:02:26.713 --> 00:02:28.582 align:middle
它是一种真正自然而然的体验

00:02:28.882 --> 00:02:31.418 align:middle
就像是我们过去所做的
Multi-Touch 滚动一样

00:02:32.686 --> 00:02:36.156 align:middle
接下来您可以使用Digital
Crown选择可选项

00:02:36.390 --> 00:02:38.225 align:middle
这是与iOS类似的选择器样式

00:02:38.292 --> 00:02:41.528 align:middle
但是在手表上您可以
使用Digital Crown

00:02:42.329 --> 00:02:45.566 align:middle
这里我将在活动设置UI内
选择我的年龄

00:02:46.066 --> 00:02:49.403 align:middle
这里有一个表单
展示了三个不同的选择器

00:02:49.469 --> 00:02:53.740 align:middle
让我有一个简洁而精确的UI
能够在一个单一模式的表单内

00:02:53.807 --> 00:02:56.109 align:middle
选择我的出生年月日

00:02:58.979 --> 00:03:03.784 align:middle
接下来我们有一种
不同的呈现选项以供选择的方式

00:02:58.979 --> 00:03:03.784 align:middle
接下来我们有一种
不同的呈现选项以供选择的方式

00:03:04.151 --> 00:03:06.019 align:middle
在很多情况下

00:03:06.086 --> 00:03:10.424 align:middle
你选择的选项有一种更为独特或具体的

00:03:10.490 --> 00:03:11.525 align:middle
呈现数据的方式

00:03:11.692 --> 00:03:14.962 align:middle
在这种情况下 我将设定
一个45分钟的定时器

00:03:15.195 --> 00:03:18.031 align:middle
那么我们认为
设定时间时以一种时间特有的方式

00:03:18.098 --> 00:03:20.634 align:middle
对信息进行布局是合乎情理的

00:03:21.068 --> 00:03:23.504 align:middle
在这种情况下它是一个60秒的表盘

00:03:23.570 --> 00:03:26.907 align:middle
因此 转动Crown会表明
随着你转过每一个分钟数

00:03:27.007 --> 00:03:28.342 align:middle
你的进度是怎样的

00:03:29.009 --> 00:03:31.645 align:middle
在你的每个应用中你将需要找到

00:03:31.712 --> 00:03:34.848 align:middle
你将向用户呈现的选择的呈现方式

00:03:34.915 --> 00:03:36.550 align:middle
要以与数据相关的方式

00:03:36.617 --> 00:03:37.784 align:middle
因此要牢记这一点

00:03:38.752 --> 00:03:43.056 align:middle
最后因为Crown
提供流畅精确连续的动作

00:03:43.290 --> 00:03:48.529 align:middle
这里我们可以使用 Crown

00:03:48.595 --> 00:03:50.564 align:middle
在连续的数值内循环

00:03:50.631 --> 00:03:52.499 align:middle
比如正在播放的glance中的音量

00:03:53.534 --> 00:03:57.304 align:middle
那么
这些就是Crown所支持的几个

00:03:57.371 --> 00:04:00.240 align:middle
最重要的互动
而能够为您的应用提供这些特性

00:03:57.371 --> 00:04:00.240 align:middle
最重要的互动
而能够为您的应用提供这些特性

00:04:00.307 --> 00:04:01.341 align:middle
也让我们倍感激动

00:04:02.809 --> 00:04:06.647 align:middle
那么我们先从最重要的互动
回退一点

00:04:06.713 --> 00:04:08.715 align:middle
Digital Crown
有哪些优势呢？

00:04:08.916 --> 00:04:11.418 align:middle
我们认为Digital Crown

00:04:11.485 --> 00:04:15.022 align:middle
是一个极其直观的体验
当你戴上 Apple Watch

00:04:15.189 --> 00:04:18.591 align:middle
你急于尝试的第一个东西
就是Digital Crown

00:04:18.926 --> 00:04:21.728 align:middle
人们喜欢摆弄它
而且以非常自然而然的方式

00:04:21.795 --> 00:04:23.697 align:middle
与屏幕上的内容互动

00:04:25.432 --> 00:04:29.436 align:middle
然后 也是非常重要的一点
它让UI维持可见状态

00:04:29.770 --> 00:04:31.638 align:middle
在不让你自己的手指阻挡屏幕的情况下

00:04:31.705 --> 00:04:33.674 align:middle
你可以看到你在与什么互动

00:04:34.007 --> 00:04:37.411 align:middle
因此 使用 Digital
Crown接触各种互动

00:04:37.511 --> 00:04:41.148 align:middle
让您的用户可以清晰地
在系统内进行导航定位

00:04:43.016 --> 00:04:45.819 align:middle
第三点
它是一个非常精确的输入机制

00:04:46.286 --> 00:04:48.889 align:middle
如果我们回顾刚才的定时器的例子

00:04:49.056 --> 00:04:52.793 align:middle
你无法想像
只用触摸方式在0-60之间

00:04:52.860 --> 00:04:54.828 align:middle
对定时器进行调整

00:04:54.962 --> 00:04:57.564 align:middle
借助 Crown 你可以
非常精确地调整

00:04:57.631 --> 00:05:00.634 align:middle
一个 2、3、或4分钟的定时器

00:04:57.631 --> 00:05:00.634 align:middle
一个 2、3、或4分钟的定时器

00:05:00.701 --> 00:05:03.203 align:middle
或迅速创建一个60分钟的定时器

00:05:03.270 --> 00:05:05.205 align:middle
只需对
Digital Crown轻点几下

00:05:06.406 --> 00:05:07.574 align:middle
最后它是有可玩性的

00:05:07.774 --> 00:05:10.077 align:middle
这是一种有趣的体验

00:05:10.444 --> 00:05:15.215 align:middle
它非常具有触感
我们认为用户会喜欢它的

00:05:15.282 --> 00:05:17.885 align:middle
那么我们在watchOS
2中将会暴 露什么呢

00:05:18.886 --> 00:05:20.587 align:middle
这个特性将是大家非常熟悉的

00:05:20.821 --> 00:05:24.458 align:middle
它是与我们在系统中别处使用的
相同样式的选择器

00:05:24.525 --> 00:05:26.393 align:middle
比如complication 编辑

00:05:26.460 --> 00:05:27.728 align:middle
以及活动设置中

00:05:28.228 --> 00:05:30.597 align:middle
我们将其称为WK界面选择器

00:05:30.664 --> 00:05:32.766 align:middle
而且也在watchOS 2应用提供

00:05:33.467 --> 00:05:37.171 align:middle
这里我们有一个选择器特有的样式
或者列表样式

00:05:37.804 --> 00:05:41.675 align:middle
这非常适合选择一系列的选项

00:05:42.042 --> 00:05:44.378 align:middle
以文本方式显示的选项

00:05:44.711 --> 00:05:47.347 align:middle
以一种列表的方式同时会有些上下文

00:05:47.414 --> 00:05:48.949 align:middle
提示你在选择中的位置

00:05:50.450 --> 00:05:52.553 align:middle
接下来我们有堆叠样式

00:05:52.619 --> 00:05:55.255 align:middle
堆叠样式非常适合于

00:05:55.322 --> 00:05:59.259 align:middle
视觉化图形化的数据呈现方式

00:05:59.359 --> 00:06:02.529 align:middle
它可能是照片可能是消息应用中的贴纸

00:05:59.359 --> 00:06:02.529 align:middle
它可能是照片可能是消息应用中的贴纸

00:06:02.896 --> 00:06:05.098 align:middle
这真的是很不错
如果你希望在某个地点

00:06:05.165 --> 00:06:06.934 align:middle
集中展示您的数据的话

00:06:07.201 --> 00:06:09.970 align:middle
您可以像手翻书一样
使用Digital Crown

00:06:10.604 --> 00:06:14.508 align:middle
最后我们看下次序样式选择器

00:06:15.309 --> 00:06:17.344 align:middle
这个选择器确实是非常棒的

00:06:17.411 --> 00:06:20.113 align:middle
我会激动地看到
你们将能够用这个东西做些什么

00:06:20.781 --> 00:06:23.817 align:middle
这里我用它创建了个表情符号选择界面

00:06:23.884 --> 00:06:27.821 align:middle
那么如果你转动Digital
Crown会在不同的表情间循环

00:06:28.422 --> 00:06:31.959 align:middle
这一特性也被用来
创建您自己的滑动条 旋钮

00:06:32.025 --> 00:06:34.895 align:middle
计量表甚至游戏如果你足够有创意的话

00:06:35.429 --> 00:06:36.797 align:middle
那么那就是次序样式

00:06:36.864 --> 00:06:39.600 align:middle
三种样式是列表堆叠和次序

00:06:41.368 --> 00:06:44.204 align:middle
让我们谈一下关于我们所谓的聚焦样式

00:06:44.838 --> 00:06:49.409 align:middle
除了选择器的三种视觉样式以外

00:06:49.776 --> 00:06:53.347 align:middle
这些样式也都支持聚焦样式

00:06:53.680 --> 00:06:54.581 align:middle
那是什么意思呢？

00:06:55.282 --> 00:06:57.718 align:middle
那么我们这里有一个例子
它是另一种表情符号选择 UI

00:06:58.752 --> 00:07:03.290 align:middle
通过这个 UI 我们有机会选择
一张脸和一只手

00:06:58.752 --> 00:07:03.290 align:middle
通过这个 UI 我们有机会选择
一张脸和一只手

00:07:03.824 --> 00:07:07.227 align:middle
在本例中并不能立刻看出
转动 Crown将会起何作用

00:07:07.294 --> 00:07:09.796 align:middle
甚至屏幕上有两个选择器
也不明显

00:07:10.430 --> 00:07:13.934 align:middle
我们能做的就是
更改默认的聚焦样式

00:07:14.001 --> 00:07:16.503 align:middle
让这两个选择器变成轮廓样式

00:07:17.137 --> 00:07:19.139 align:middle
这样做会让选择器显示轮廓

00:07:19.206 --> 00:07:21.341 align:middle
表明它是一个互动元素

00:07:21.675 --> 00:07:24.711 align:middle
而且以系统的绿色
清楚地显示

00:07:24.978 --> 00:07:29.783 align:middle
所选中或聚焦的元素是可以用
Digital Crown编辑的

00:07:30.484 --> 00:07:34.388 align:middle
现在当我点击屏幕上的另一个项目时

00:07:34.855 --> 00:07:37.090 align:middle
我看到聚焦轮廓发生变化

00:07:37.157 --> 00:07:39.660 align:middle
我知道转动Digital
Crown会起到什么作用

00:07:41.028 --> 00:07:43.030 align:middle
对于聚焦轮廓 你可以有一种

00:07:43.096 --> 00:07:45.199 align:middle
额外水平的控制

00:07:45.799 --> 00:07:48.936 align:middle
如果你的选择器中的项目
需要更多的上下文

00:07:49.002 --> 00:07:53.473 align:middle
来描述其中的内容 我们可以使用
带有说明文字的轮廓聚焦样式

00:07:54.041 --> 00:07:56.510 align:middle
这让您创建一个类似于

00:07:56.577 --> 00:07:59.279 align:middle
Complication
编辑UI的UI

00:07:59.346 --> 00:08:00.747 align:middle
你会希望显示一个突出的方框

00:07:59.346 --> 00:08:00.747 align:middle
你会希望显示一个突出的方框

00:08:00.814 --> 00:08:03.250 align:middle
它清楚地表明你目前选中的

00:08:03.317 --> 00:08:04.618 align:middle
项目是什么

00:08:06.019 --> 00:08:08.722 align:middle
而且同样 如果我移动到另一个

00:08:08.789 --> 00:08:11.191 align:middle
将重心移到另一个选择器上
你会注意到

00:08:11.258 --> 00:08:13.160 align:middle
说明文字也会跟随移动

00:08:14.061 --> 00:08:17.297 align:middle
我在这里实现这种效果的方式
是让选择器中的每个项目

00:08:17.364 --> 00:08:19.099 align:middle
有同样的说明文字

00:08:19.166 --> 00:08:20.634 align:middle
但是对选择器中的每个项目

00:08:20.701 --> 00:08:22.102 align:middle
你也可以有不同的说明文字

00:08:23.470 --> 00:08:25.072 align:middle
现在有些其他有用的方式

00:08:25.138 --> 00:08:29.142 align:middle
来提供上下文同时用户与
Digital Crown维持互动

00:08:29.543 --> 00:08:31.411 align:middle
其中之一是显示

00:08:31.478 --> 00:08:34.780 align:middle
上下文指示器即Digital
Crown指示器的系统样式

00:08:35.448 --> 00:08:37.951 align:middle
它被显示在
Digital Crown 旁边

00:08:38.018 --> 00:08:40.287 align:middle
而随着
用户转动Digital Crown

00:08:40.354 --> 00:08:44.658 align:middle
它为用户提供可选值范围的上下文

00:08:45.459 --> 00:08:48.662 align:middle
它也显示他们目前已经使用过多少数值

00:08:48.729 --> 00:08:52.866 align:middle
因此 当你的选择器不一定
会显示你在选择中的位置

00:08:52.933 --> 00:08:56.436 align:middle
它将有利于确定你自己的方位

00:08:56.703 --> 00:08:58.906 align:middle
即通过可视化元素来确定

00:09:01.008 --> 00:09:02.809 align:middle
对于希望显示更为

00:09:02.876 --> 00:09:04.912 align:middle
定制化的progress UI应用

00:09:05.245 --> 00:09:07.381 align:middle
它们并不希望显示
这个小小的Crown指示器

00:09:07.447 --> 00:09:10.984 align:middle
我们有很不错的新方式
帮助您营造那些体验

00:09:11.585 --> 00:09:15.022 align:middle
这里是另外一个例子
最好是通过例子进行展示

00:09:16.523 --> 00:09:18.959 align:middle
在本例中 我在屏幕中央
有一个选择器

00:09:19.026 --> 00:09:22.462 align:middle
它让我在0 到100% 进行调整

00:09:23.497 --> 00:09:26.433 align:middle
因此随着我转动
DigitalCrown会看到数值

00:09:26.500 --> 00:09:28.368 align:middle
会以10%的幅度跳升

00:09:29.403 --> 00:09:30.370 align:middle
这是有点酷的

00:09:30.437 --> 00:09:34.374 align:middle
但我们不知道
下限是 0 上限是 100

00:09:34.842 --> 00:09:36.710 align:middle
它不是一个非常视觉化的体验

00:09:36.777 --> 00:09:38.545 align:middle
它不是一个令人愉悦的体验

00:09:39.012 --> 00:09:40.647 align:middle
我们可以使用上下文指示器

00:09:40.714 --> 00:09:44.251 align:middle
但是在我们的app中我们将
使用一个略有不同的UI来显示进度

00:09:44.318 --> 00:09:47.054 align:middle
这个UI与您的应用更具相关性

00:09:47.821 --> 00:09:52.025 align:middle
这里我选择使用
一个弧形或环形进度条样式的 UI

00:09:52.092 --> 00:09:56.063 align:middle
当我旋转DigitalCrown时
我已经让选择器与我的UI中的

00:09:56.129 --> 00:10:01.201 align:middle
另一个界面要素相协调
因此随着我在选择器的项目间切换

00:09:56.129 --> 00:10:01.201 align:middle
另一个界面要素相协调
因此随着我在选择器的项目间切换

00:10:01.268 --> 00:10:04.271 align:middle
它会将图像更新

00:10:05.272 --> 00:10:08.775 align:middle
借助这个互相协调的图像API
您可以营造出各种

00:10:08.842 --> 00:10:11.645 align:middle
美妙Digital Crown体验

00:10:13.247 --> 00:10:16.683 align:middle
因此 有各种不同的
旋钮 铃铛 哨子

00:10:16.750 --> 00:10:20.354 align:middle
你可以配置到 WK 界面选择器上

00:10:20.721 --> 00:10:22.089 align:middle
这就是如何创建选择器

00:10:22.222 --> 00:10:24.057 align:middle
现在让我们直接跳到那一步看看

00:10:25.492 --> 00:10:28.195 align:middle
那么 对于已经
熟悉watchOS 1的朋友

00:10:28.395 --> 00:10:31.465 align:middle
这是一个非常简单明了的过程

00:10:31.532 --> 00:10:35.702 align:middle
如果您到storyboard
选择一个界面控制器

00:10:35.769 --> 00:10:38.605 align:middle
您可以简单地
直接将一个新的选择器对象

00:10:38.672 --> 00:10:41.308 align:middle
从对象库里面拖拽出来
放入你的 storyboard

00:10:42.576 --> 00:10:46.780 align:middle
一旦你有了选择器
你当然就可以配置它的各种属性

00:10:46.980 --> 00:10:49.950 align:middle
我们已经谈到了这些

00:10:50.017 --> 00:10:51.985 align:middle
如样式次序和堆叠聚焦样式

00:10:52.553 --> 00:10:57.791 align:middle
不管你是否喜欢可选的Digital
Crown指示器被显示出来

00:10:58.759 --> 00:11:01.061 align:middle
在本例中 我将使用列表样式

00:10:58.759 --> 00:11:01.061 align:middle
在本例中 我将使用列表样式

00:11:01.128 --> 00:11:04.331 align:middle
带说明文字的轮廓样式
以及一个被禁用的指示器

00:11:04.398 --> 00:11:07.634 align:middle
因为我将向我自己提供数据

00:11:07.701 --> 00:11:09.303 align:middle
或者由于有了我将提交的数据

00:11:09.369 --> 00:11:10.904 align:middle
我觉得上下文是没有必要的

00:11:12.906 --> 00:11:15.642 align:middle
接下来 我们需要
进入界面控制器代码部分

00:11:15.709 --> 00:11:18.178 align:middle
而且我们需要为选择器
创建一个IB插座变量

00:11:18.245 --> 00:11:22.516 align:middle
那么可以在storyboard里面
将我们的代码和对象相关联

00:11:22.583 --> 00:11:24.218 align:middle
这给了我们一种对选择器的参照物

00:11:25.853 --> 00:11:28.021 align:middle
最后我们回到storyboard

00:11:28.088 --> 00:11:29.289 align:middle
并将这两个东西关联起来

00:11:29.556 --> 00:11:31.758 align:middle
那么只有类似于

00:11:31.825 --> 00:11:34.061 align:middle
创建按钮和图像等简单的几步

00:11:34.127 --> 00:11:36.230 align:middle
有了选择器
它们是非常容易创建的

00:11:38.232 --> 00:11:40.501 align:middle
那么现在我们有了一个选择器
也把它连接上了

00:11:40.567 --> 00:11:43.637 align:middle
我们已经将其创建并使其运行
而这就是我们所得到的

00:11:44.238 --> 00:11:46.640 align:middle
它可能是世界上最无用的选择器

00:11:47.441 --> 00:11:49.743 align:middle
转动Digital Crown
迅速地进行导航定位

00:11:49.810 --> 00:11:51.311 align:middle
尽管其中空无一物 棒极了！

00:11:52.513 --> 00:11:55.916 align:middle
那么我们需要做的就是
配置我们称之为“项目”的东西

00:11:55.983 --> 00:11:57.417 align:middle
正如你们从标题上可以看到的

00:11:58.285 --> 00:12:02.055 align:middle
为了进行配置
现在既然我们已经通过IB插座变量

00:11:58.285 --> 00:12:02.055 align:middle
为了进行配置
现在既然我们已经通过IB插座变量

00:12:02.122 --> 00:12:04.791 align:middle
有了对选择器的参考 可以
简单调用set items API

00:12:04.858 --> 00:12:08.695 align:middle
并指定一系列的WK选择器项目

00:12:09.530 --> 00:12:11.498 align:middle
这些是非常简单的对象

00:12:11.565 --> 00:12:13.267 align:middle
只带有一些可选属性

00:12:13.534 --> 00:12:17.104 align:middle
这里我将使用title(标题)属性
caption(说明文字)属性

00:12:17.171 --> 00:12:21.041 align:middle
以及accessory(附属)属性

00:12:21.108 --> 00:12:23.644 align:middle
我将在手表上呈现的视觉样式

00:12:24.912 --> 00:12:28.515 align:middle
现在如果我希望对选择器的每行所显示
的内容拥有完全控制

00:12:28.882 --> 00:12:32.986 align:middle
我还可使用这些各不相同的

00:12:33.086 --> 00:12:34.488 align:middle
WK选择器项目的内容图标属性

00:12:34.821 --> 00:12:37.157 align:middle
这将让有拥有对选择器中

00:12:37.324 --> 00:12:38.892 align:middle
每个项目所显示内容的全面控制

00:12:40.160 --> 00:12:42.362 align:middle
对于堆叠和次序样式

00:12:42.563 --> 00:12:44.398 align:middle
内容图标用于

00:12:44.531 --> 00:12:47.167 align:middle
定义那两个选择器中显示的内容

00:12:47.467 --> 00:12:48.635 align:middle
因此 对于那两个样式

00:12:48.702 --> 00:12:50.704 align:middle
您将仅需使用内容图标属性

00:12:52.940 --> 00:12:56.009 align:middle
关于在watchOS 2中的新内容
我们有一个新的API

00:12:56.076 --> 00:13:00.347 align:middle
用于指定你希望
在您的 UI 中显示的图像

00:12:56.076 --> 00:13:00.347 align:middle
用于指定你希望
在您的 UI 中显示的图像

00:13:00.581 --> 00:13:03.851 align:middle
对应于选择器或您将在以后见到的
一些其他的对象

00:13:04.451 --> 00:13:08.589 align:middle
这个被称为WK image 类

00:13:09.189 --> 00:13:11.959 align:middle
而我将给出几个例子
告诉您如何使用这个类

00:13:13.026 --> 00:13:14.561 align:middle
最常见的例子将是

00:13:14.628 --> 00:13:17.631 align:middle
内已有的图像加入到应用中

00:13:17.965 --> 00:13:20.667 align:middle
在自己的资源目录或框架本身

00:13:21.034 --> 00:13:22.870 align:middle
那么你就能使用WK图像

00:13:22.936 --> 00:13:27.007 align:middle
图像名称API
将这些图像上传到应用中

00:13:27.074 --> 00:13:28.542 align:middle
然后它们就能显示

00:13:28.609 --> 00:13:32.179 align:middle
扩展所要做的就是指定图像的名称

00:13:33.580 --> 00:13:37.784 align:middle
从互联网Companion下载了
图像的情况

00:13:37.851 --> 00:13:40.754 align:middle
对于您的扩展已通过
watchconnectivity

00:13:41.355 --> 00:13:45.425 align:middle
您要做的
并不是把那些图像数据转换为图像

00:13:45.659 --> 00:13:48.762 align:middle
而是在扩展内对图像解码

00:13:48.829 --> 00:13:53.333 align:middle
并将图像数据传递到应用中
从而节省用于解码的必要内存开销

00:13:53.567 --> 00:13:56.336 align:middle
在应用中 数据将被转换为图像
然后就可以显示出来

00:13:57.371 --> 00:14:01.008 align:middle
这前两个创建图像的方法是首选

00:13:57.371 --> 00:14:01.008 align:middle
这前两个创建图像的方法是首选

00:14:01.074 --> 00:14:02.643 align:middle
如果你已经有了图像数据的话

00:14:02.709 --> 00:14:05.746 align:middle
在您的扩展内创建UI图像
是不必要的也是没有意义的

00:14:05.946 --> 00:14:09.149 align:middle
因为它们是由应用显示的

00:14:10.717 --> 00:14:13.420 align:middle
最后一种情况是你确实需要UI图像

00:14:13.687 --> 00:14:15.923 align:middle
现在既然手表上提供了核心图形

00:14:16.123 --> 00:14:19.960 align:middle
您可以用它将定制特效渲染到

00:14:20.160 --> 00:14:22.362 align:middle
即将用在
您的WK选择器项目中的图像内

00:14:23.130 --> 00:14:26.033 align:middle
那么这里我将使用WK image
后面加上image API

00:14:26.099 --> 00:14:27.734 align:middle
它是用来获取UI image对象的

00:14:29.703 --> 00:14:32.639 align:middle
现在我们看一个
已经配置了项目的选择器

00:14:32.706 --> 00:14:35.309 align:middle
而转动Digital Crown
将在那些项目间移动

00:14:35.642 --> 00:14:37.711 align:middle
但是在您你的应用中

00:14:37.878 --> 00:14:39.813 align:middle
知道选定的项目
何时发生变化是有帮助的

00:14:40.080 --> 00:14:44.418 align:middle
为了做到这一点 我们使用一个
与按钮滑动条或开关类似的技巧

00:14:44.718 --> 00:14:46.320 align:middle
通过关联一个IB动作实现

00:14:47.421 --> 00:14:51.358 align:middle
现在 尤其对于选择器的IB动作

00:14:51.425 --> 00:14:54.094 align:middle
是一个需要一个单一参数的方法

00:14:54.461 --> 00:14:58.765 align:middle
这个参数是个整型值代表在您的阵列中

00:14:58.832 --> 00:15:02.269 align:middle
所选定项目的索引
阵列是我们用set items指定

00:14:58.832 --> 00:15:02.269 align:middle
所选定项目的索引
阵列是我们用set items指定

00:15:03.070 --> 00:15:04.538 align:middle
那么 在这种情况下

00:15:04.872 --> 00:15:09.443 align:middle
我将使用提供
给我的选中索引将选择器项目编入索引

00:15:09.710 --> 00:15:13.347 align:middle
而且我将印出那个选择器项目的标题

00:15:14.548 --> 00:15:17.284 align:middle
因此
确实是很容易处理选定项目和变化的

00:15:17.851 --> 00:15:18.986 align:middle
需要注意的一件事情是

00:15:19.052 --> 00:15:21.121 align:middle
为了应对项目的变化

00:15:21.388 --> 00:15:23.090 align:middle
你不希望做特别重要的工作

00:15:23.457 --> 00:15:25.592 align:middle
正如您在核心互动部分看到的

00:15:25.659 --> 00:15:28.829 align:middle
迅速转动Crown快速在项目间移动

00:15:29.129 --> 00:15:31.832 align:middle
因此您选择器动作将被非常迅速地调用

00:15:32.266 --> 00:15:34.935 align:middle
如果您正在做非常重要的事情
我建议您暂停

00:15:35.002 --> 00:15:39.072 align:middle
直到您在经过一小段时间后
仍未收到选择器动作的调用为止

00:15:39.139 --> 00:15:40.807 align:middle
然后您再做重要的工作

00:15:40.874 --> 00:15:43.243 align:middle
比如更新您的桌面视图等等

00:15:45.212 --> 00:15:47.114 align:middle
接下来我们看一下图像协调

00:15:47.414 --> 00:15:49.883 align:middle
它让你创建那些定制的

00:15:50.117 --> 00:15:53.020 align:middle
好看的互动你的界面的很多部分

00:15:53.086 --> 00:15:54.555 align:middle
与选择器相互协调

00:15:54.621 --> 00:15:56.590 align:middle
随着它的数值变化而变化

00:15:57.624 --> 00:15:59.826 align:middle
它的设置也是非常简单的

00:16:00.027 --> 00:16:03.931 align:middle
在这个实例
我在屏幕中央有个选择器显示70%

00:16:04.598 --> 00:16:08.902 align:middle
轮廓环形进度条是一个
WKInterfaceGroup类

00:16:09.169 --> 00:16:10.737 align:middle
是选择器的父类

00:16:12.139 --> 00:16:14.541 align:middle
一个非常简单非常容易设置的UI

00:16:15.742 --> 00:16:17.644 align:middle
现在 为了在代码中对它进行设置

00:16:17.711 --> 00:16:20.881 align:middle
我们需要做的就是创建一组动态图像

00:16:20.948 --> 00:16:22.749 align:middle
它们将由选择器管理

00:16:23.617 --> 00:16:27.254 align:middle
因此这里我们创建了一个
progressImages 变量

00:16:27.821 --> 00:16:32.492 align:middle
并将UI的动态化
图像与图像API配合使用

00:16:32.593 --> 00:16:36.263 align:middle
来指定我们已经使用代码画出的

00:16:36.330 --> 00:16:40.267 align:middle
或者已存在于我们的
资源目录内的一系列进度图标

00:16:41.068 --> 00:16:42.769 align:middle
我们将为它指定持续时间为0

00:16:42.836 --> 00:16:46.640 align:middle
但选择器将自动在整个动画过程中搜索

00:16:47.140 --> 00:16:49.510 align:middle
然后最后在过程界面群组内搜索

00:16:49.576 --> 00:16:53.113 align:middle
它是存放环形进度条地方 调用set
BackgroundImage

00:16:53.180 --> 00:16:55.382 align:middle
以便将动态图像设置为背景图像

00:16:56.450 --> 00:17:00.287 align:middle
最后调用选择器上
set Coordinated Animations

00:16:56.450 --> 00:17:00.287 align:middle
最后调用选择器上
set Coordinated Animations

00:17:00.454 --> 00:17:02.990 align:middle
为它提供一个不同的界面对象的清单

00:17:03.056 --> 00:17:04.892 align:middle
我们希望当你在选择器内部移动的时候

00:17:04.958 --> 00:17:07.094 align:middle
选择器对这些对象进行协调

00:17:07.794 --> 00:17:09.663 align:middle
在这个实例中
我们只有一个单一群组

00:17:10.130 --> 00:17:12.465 align:middle
但我们可以指定多个群组

00:17:12.766 --> 00:17:14.902 align:middle
一个图像内一个群组诸如此类

00:17:15.169 --> 00:17:18.070 align:middle
这可以支持任意多的对象只要你愿意

00:17:19.839 --> 00:17:23.810 align:middle
随着在WK界面选择器的各项目间切换

00:17:24.111 --> 00:17:27.214 align:middle
我们与任何关联的群组和图像相协调

00:17:27.513 --> 00:17:31.418 align:middle
指定哪个图像
将显示在特定的界面对象上

00:17:31.985 --> 00:17:35.889 align:middle
在这个例子中
我把项目和图像的编号相匹配

00:17:36.023 --> 00:17:37.291 align:middle
但是过一会我要向你展示

00:17:37.591 --> 00:17:39.960 align:middle
不一定是需要这样的

00:17:40.494 --> 00:17:42.829 align:middle
因此 那就是你如何
让图像与选择器相协调

00:17:44.231 --> 00:17:46.466 align:middle
现在 为了完成这部分的内容

00:17:46.533 --> 00:17:51.104 align:middle
我想我应该为你们做一个小小的演示
表明在你们的应用中如何实现这些

00:17:53.507 --> 00:17:55.509 align:middle
那么让我把它设置好

00:17:57.511 --> 00:17:59.580 align:middle
这里有一个我早些时候创建的小app

00:18:00.380 --> 00:18:02.616 align:middle
它显示了各种不同的选择器样式

00:18:02.683 --> 00:18:04.718 align:middle
你们可以创建这些样式

00:18:04.918 --> 00:18:07.621 align:middle
而最后一个用于演示如何进行协调

00:18:08.222 --> 00:18:10.490 align:middle
那么让我们从列表样式选择器开始

00:18:11.358 --> 00:18:14.094 align:middle
在这个特别的例子里我创建了个选择器

00:18:14.161 --> 00:18:15.729 align:middle
它的辅助图像是使用核心图形

00:18:15.796 --> 00:18:17.631 align:middle
选取随机颜色绘制的

00:18:18.098 --> 00:18:20.634 align:middle
而我这里有很多项目

00:18:20.701 --> 00:18:23.804 align:middle
您可以看到
在这些项目间滚动是非常流畅的

00:18:24.538 --> 00:18:28.609 align:middle
每次项目发生变化时
我也将在storyboard内

00:18:28.775 --> 00:18:31.478 align:middle
更新一个单独的界面要素

00:18:31.712 --> 00:18:34.147 align:middle
这是一个简单的标签
而我将更新它的文本

00:18:34.882 --> 00:18:38.485 align:middle
那么为了应对已选中项目的变化

00:18:38.552 --> 00:18:40.254 align:middle
这些事情是非常容易做到的

00:18:40.554 --> 00:18:43.423 align:middle
实际上只有那些更重要的事情
你才希望将其延后再做

00:18:44.525 --> 00:18:46.260 align:middle
那么让我们回到顶层菜单

00:18:46.960 --> 00:18:48.495 align:middle
并进入堆叠模式

00:18:48.996 --> 00:18:50.898 align:middle
这里我也将使用核心图形

00:18:50.964 --> 00:18:54.768 align:middle
来渲染以随机颜色绘制的随机方块

00:18:54.835 --> 00:18:57.938 align:middle
而在这里你将看到
我可以非常流畅非常快速地

00:18:58.238 --> 00:19:01.808 align:middle
浏览在这个堆叠样式选择器中的图像

00:18:58.238 --> 00:19:01.808 align:middle
浏览在这个堆叠样式选择器中的图像

00:19:02.876 --> 00:19:06.146 align:middle
也请注意
随着转动Digital Crown

00:19:06.680 --> 00:19:10.317 align:middle
在右上角你将看到Digital
Crown指示器会显示

00:19:10.384 --> 00:19:12.753 align:middle
我在这么一堆项目间的进度

00:19:13.153 --> 00:19:14.054 align:middle
它确实是很有用的

00:19:16.290 --> 00:19:18.725 align:middle
第三个例子是一个次序样式

00:19:19.193 --> 00:19:22.663 align:middle
我想我将会展示那种
你们能够用次序样式实现的内容

00:19:22.729 --> 00:19:25.732 align:middle
因为符号表情的例子明显地展示了
你能够用它来做些什么

00:19:26.166 --> 00:19:30.337 align:middle
这里我可以营造一种引人入胜的体验

00:19:30.404 --> 00:19:33.540 align:middle
使用色盘选择随机颜色

00:19:33.974 --> 00:19:35.876 align:middle
在这里
我转动Digital Crown

00:19:35.943 --> 00:19:39.680 align:middle
我将按照颜色出现的顺序选择不同图像

00:19:40.848 --> 00:19:44.618 align:middle
所以这是很酷的
并且请注意它也支持惯性操作

00:19:44.685 --> 00:19:47.754 align:middle
那么我可以持续拂动Crown
而它将在各个数值间快速移动

00:19:49.556 --> 00:19:52.025 align:middle
最后 让我们谈一下协调

00:19:53.093 --> 00:19:56.096 align:middle
这里我已经用一个左右选择器
建立了一个例子

00:19:56.897 --> 00:19:58.932 align:middle
在这个例子里
我让左边的选择器作为焦点

00:19:59.533 --> 00:20:04.671 align:middle
当我转动Digital Crown
我将在左侧的12个选项之间移动

00:19:59.533 --> 00:20:04.671 align:middle
当我转动Digital Crown
我将在左侧的12个选项之间移动

00:20:05.272 --> 00:20:07.207 align:middle
如我聚焦在右侧的选择器

00:20:07.574 --> 00:20:09.743 align:middle
现在我将在60个项目之间移动

00:20:10.043 --> 00:20:15.349 align:middle
你可以看到这可能是一个大概的
定时器UI的样子

00:20:16.617 --> 00:20:17.951 align:middle
那么需要注意的一件事是

00:20:18.018 --> 00:20:20.120 align:middle
两个选择器都有同样的协调良好的图标

00:20:20.187 --> 00:20:25.559 align:middle
我的这个协调良好的图标右边的选择器
包括60个不同的弧形进度条

00:20:26.260 --> 00:20:30.230 align:middle
但我左边的这个选择器也可使用

00:20:30.297 --> 00:20:32.099 align:middle
同样的进度条图像

00:20:32.466 --> 00:20:35.302 align:middle
这确实是一盒非常方便的技巧

00:20:35.369 --> 00:20:38.505 align:middle
如果你希望保存
你正在选择器之间使用的资源的数量

00:20:39.606 --> 00:20:41.642 align:middle
那么 这就是演示的全部内容

00:20:51.118 --> 00:20:52.953 align:middle
那么 来总结一下您学到的

00:20:53.020 --> 00:20:55.722 align:middle
关于Digital Crown内容
一些你能够为用户提供的

00:20:55.789 --> 00:20:57.925 align:middle
watchOS 2中的新的体验

00:20:58.692 --> 00:21:01.161 align:middle
我们有三个全新的可定制化样式

00:20:58.692 --> 00:21:01.161 align:middle
我们有三个全新的可定制化样式

00:21:01.228 --> 00:21:03.764 align:middle
即 列表 堆叠和次序

00:21:04.131 --> 00:21:07.401 align:middle
每个都是为了显示
不同类型的信息而量身定制的

00:21:07.701 --> 00:21:12.272 align:middle
因此您应该根据您的app中
用户的互动对象选择使用哪一个

00:21:13.407 --> 00:21:16.443 align:middle
这些样式中的每个都支持聚焦和指示器

00:21:16.777 --> 00:21:20.180 align:middle
因此
当你在选择器内的项目之间切换时

00:21:20.380 --> 00:21:23.884 align:middle
我们通过演示聚焦
向您展示了Crown将会做些什么

00:21:23.951 --> 00:21:25.586 align:middle
而且我们也支持

00:21:25.652 --> 00:21:29.423 align:middle
显示标准的
Digital Crown指示器

00:21:29.857 --> 00:21:32.559 align:middle
最后 为了创建真正定制化的

00:21:32.626 --> 00:21:36.196 align:middle
引人入胜的界面
同时使用量身定做的图形

00:21:36.263 --> 00:21:39.132 align:middle
你可以使用图像动画协调API

00:21:39.199 --> 00:21:44.304 align:middle
以便将您的界面的其他部分
与正被编辑的选择器同步

00:21:45.005 --> 00:21:47.140 align:middle
话到此处
我要有请科洛上台接替我

00:21:47.274 --> 00:21:50.344 align:middle
她将讲一下
watchOS 2上的媒体回放

00:21:50.477 --> 00:21:51.478 align:middle
非常感谢诸位！

00:21:59.086 --> 00:21:59.920 align:middle
嗨大家好

00:22:00.587 --> 00:22:06.860 align:middle
我在这里讲一下
watchOS 2的更多新特性

00:22:07.928 --> 00:22:09.663 align:middle
首先是媒体回放

00:22:12.933 --> 00:22:17.938 align:middle
那么让我为大家展示一下
watchOS 2的新媒体播放器内

00:22:18.238 --> 00:22:20.674 align:middle
播放一段简单的视频是什么样的

00:22:22.009 --> 00:22:23.310 align:middle
首先加载内容

00:22:23.610 --> 00:22:27.848 align:middle
一旦用户按下“播放”
图标它将开始播放

00:22:29.149 --> 00:22:32.219 align:middle
而且任何时候用户
都可以转动DigitalCrown

00:22:32.286 --> 00:22:35.989 align:middle
以调整音量
而且如果你轻敲屏幕

00:22:36.056 --> 00:22:38.025 align:middle
播放器控制器将会出现

00:22:39.793 --> 00:22:41.728 align:middle
而对于仅有音频的内容

00:22:41.795 --> 00:22:45.732 align:middle
我们也有一个专用的内置UI

00:22:47.134 --> 00:22:50.204 align:middle
两种情况下的音频都将被引导到

00:22:50.270 --> 00:22:51.872 align:middle
选定的输出源

00:22:52.739 --> 00:22:55.976 align:middle
那可能是
您的Apple Watch扬声器

00:22:56.343 --> 00:22:58.445 align:middle
或者已被配对的蓝牙设备

00:22:59.213 --> 00:23:02.015 align:middle
现在让我为您展示
如何在代码中实现

00:22:59.213 --> 00:23:02.015 align:middle
现在让我为您展示
如何在代码中实现

00:23:03.884 --> 00:23:06.954 align:middle
比如你试图从你的界面控制器

00:23:07.020 --> 00:23:08.956 align:middle
呈现这个媒体播放器

00:23:10.290 --> 00:23:12.292 align:middle
你做的第一件事

00:23:12.359 --> 00:23:15.395 align:middle
是弄清楚内容的URL

00:23:16.029 --> 00:23:20.501 align:middle
假如您有一个来自于
您的扩展框架的简单影片

00:23:20.767 --> 00:23:24.671 align:middle
这是你如何为内容找出它的URL

00:23:25.005 --> 00:23:28.208 align:middle
你也可以使用远程URL

00:23:28.575 --> 00:23:32.546 align:middle
如果是那样
媒体播放器将会为您处理下载

00:23:33.146 --> 00:23:39.353 align:middle
此外 它还将用进度指示器更新UI

00:23:40.921 --> 00:23:44.024 align:middle
而对于URL我们可以在之后决定

00:23:44.091 --> 00:23:46.693 align:middle
如何播放内容

00:23:47.160 --> 00:23:48.896 align:middle
这里我们提供了几个选择

00:23:49.162 --> 00:23:51.698 align:middle
第一个是自动播放

00:23:52.266 --> 00:23:57.137 align:middle
当它被设置为真的时候
一旦媒体播放器出现在屏幕上

00:23:57.204 --> 00:23:58.672 align:middle
并且内容被加载

00:23:59.406 --> 00:24:01.575 align:middle
回放就将自动开始

00:23:59.406 --> 00:24:01.575 align:middle
回放就将自动开始

00:24:02.776 --> 00:24:05.345 align:middle
接下来我使用start time

00:24:06.079 --> 00:24:09.683 align:middle
我让它在视频的3秒钟标记处开始

00:24:10.751 --> 00:24:15.055 align:middle
这是确实有用的如果回放在之前暂停

00:24:15.222 --> 00:24:18.125 align:middle
用户回到播放器

00:24:18.192 --> 00:24:21.061 align:middle
你希望从同样的点继续回放

00:24:22.296 --> 00:24:27.768 align:middle
这里使用的第三个选项是视频重力

00:24:28.101 --> 00:24:34.208 align:middle
关键取决于一旦视频出现在播放器中
如何调整它的大小

00:24:34.975 --> 00:24:37.678 align:middle
有了所有这些信息 现在你调用

00:24:37.744 --> 00:24:40.681 align:middle
present Media Player
Controller With URL

00:24:41.248 --> 00:24:43.283 align:middle
而且你可以指定
completion handler

00:24:43.350 --> 00:24:45.485 align:middle
它将告诉你回放是如何结束的

00:24:46.620 --> 00:24:50.557 align:middle
而那说明了从你的代码内
呈现一个媒体播放器是多么容易

00:24:51.258 --> 00:24:53.760 align:middle
在另外一些情况下cases
for example

00:24:53.827 --> 00:25:00.000 align:middle
比如在社交媒体app中
你希望在某种上下文内嵌入一小段视频

00:25:00.934 --> 00:25:02.870 align:middle
我们有你需要的对象

00:25:03.971 --> 00:25:08.809 align:middle
在watchOS 2中现在你有这个
WKInterfaceMovie

00:25:09.243 --> 00:25:11.845 align:middle
你可以把它插入到一个UI中

00:25:13.680 --> 00:25:17.351 align:middle
这个对象有一个播放器图标
覆盖在一个海报图片上

00:25:17.417 --> 00:25:18.986 align:middle
这张图片代表了你的内容

00:25:19.586 --> 00:25:25.359 align:middle
一旦用户轻击播放图标
我在开头向你展示的媒体播放器

00:25:25.659 --> 00:25:27.661 align:middle
就会自动出现在这里

00:25:27.728 --> 00:25:29.630 align:middle
而你不必写任何代码

00:25:31.665 --> 00:25:33.700 align:middle
那么让我向你展示
如何在 Xcode 里做到

00:25:34.601 --> 00:25:37.471 align:middle
在新的Xcode里面
你将发现这个影片对象

00:25:37.638 --> 00:25:38.872 align:middle
它就在你的对象库里面

00:25:39.439 --> 00:25:41.909 align:middle
你可以将其拖拽
并放在你的Storyboard里面

00:25:42.509 --> 00:25:46.680 align:middle
而你可以使用这个属性检查器

00:25:46.747 --> 00:25:51.051 align:middle
来自定义这个影片对象

00:25:51.451 --> 00:25:55.756 align:middle
你可以指定视频重力或者海报图片

00:25:57.191 --> 00:25:59.626 align:middle
如果愿意对它进行动态配置

00:25:59.693 --> 00:26:01.662 align:middle
你也可以在代码内实现它

00:25:59.693 --> 00:26:01.662 align:middle
你也可以在代码内实现它

00:26:02.362 --> 00:26:07.000 align:middle
假定在你的代码内有内容的成员变量

00:26:08.202 --> 00:26:09.837 align:middle
而且你有内容的URL

00:26:09.903 --> 00:26:13.540 align:middle
以及代表影片的图片

00:26:14.474 --> 00:26:18.111 align:middle
IB插座变量从interface
builder拖拽过来

00:26:18.579 --> 00:26:22.683 align:middle
它代表你正在使用的影片对象

00:26:23.517 --> 00:26:28.121 align:middle
万一你希望更新你的UI
或者你的内容必须发生变化

00:26:28.255 --> 00:26:29.690 align:middle
你可以使用这个方法

00:26:29.857 --> 00:26:32.125 align:middle
来配置你的影片对象

00:26:33.327 --> 00:26:39.199 align:middle
因为AppleWatch的硬件与其
他iOS设备有很大不同

00:26:39.466 --> 00:26:43.804 align:middle
我们有几种专用媒体格式

00:26:43.871 --> 00:26:47.674 align:middle
你应该将其用于任何你试图

00:26:47.875 --> 00:26:49.643 align:middle
在Apple Watch播放的内容

00:26:50.410 --> 00:26:54.314 align:middle
如果你的内容 以全屏幕模式播放最佳

00:26:54.748 --> 00:26:58.886 align:middle
那么建议的分辨率是208乘260

00:26:59.453 --> 00:27:05.425 align:middle
如果你的内容实际上
最适合以16:9的长宽比播放

00:26:59.453 --> 00:27:05.425 align:middle
如果你的内容实际上
最适合以16:9的长宽比播放

00:27:06.026 --> 00:27:09.830 align:middle
建议的分辨率则是320乘180

00:27:10.731 --> 00:27:13.834 align:middle
如果你遵照这套媒体规格

00:27:14.067 --> 00:27:17.871 align:middle
你就能预期得到最佳的回放性能

00:27:19.439 --> 00:27:23.443 align:middle
那就是如何在你的app中
播放音频和视频 就那么简单

00:27:23.944 --> 00:27:28.382 align:middle
我想讲的下一个特性是
长格式的音频回放

00:27:29.516 --> 00:27:33.987 align:middle
到目前为止我为您展示的特性
都为您呈现了某种UI

00:27:34.421 --> 00:27:37.691 align:middle
而一旦这种UI被关闭回放也将停止

00:27:38.425 --> 00:27:40.360 align:middle
长格式的音频就不同了

00:27:41.862 --> 00:27:45.699 align:middle
它并不伴随你的app的任何内置UI

00:27:47.534 --> 00:27:49.169 align:middle
就是说你可以创建你自己的UI

00:27:49.970 --> 00:27:52.706 align:middle
而一旦你的UI被关闭

00:27:53.273 --> 00:27:56.410 align:middle
回放实际上仍在后台持续

00:27:57.711 --> 00:28:03.517 align:middle
这种特性的一个常见的使用实例
是播客app或音乐app

00:27:57.711 --> 00:28:03.517 align:middle
这种特性的一个常见的使用实例
是播客app或音乐app

00:28:03.717 --> 00:28:09.690 align:middle
用户可能正在跑步
或通勤过程中听音乐

00:28:11.391 --> 00:28:13.961 align:middle
这一特性的音频将只会

00:28:14.027 --> 00:28:16.663 align:middle
被引导到已配对的蓝牙设备

00:28:17.297 --> 00:28:19.633 align:middle
而回放状态则将会在

00:28:20.133 --> 00:28:21.835 align:middle
正在播放glance中更新

00:28:22.469 --> 00:28:25.839 align:middle
因此用户控制回放是非常方便的

00:28:28.342 --> 00:28:30.043 align:middle
现在让我为您展示这个API

00:28:30.444 --> 00:28:33.614 align:middle
如果您熟悉
AVFoundation API

00:28:33.780 --> 00:28:36.016 align:middle
您会觉得这些是很眼熟的

00:28:37.451 --> 00:28:42.756 align:middle
假如你有正打算播放的音频的URL

00:28:42.956 --> 00:28:44.992 align:middle
您可以创建一个像这样的资源

00:28:46.593 --> 00:28:51.031 align:middle
有了这个属性
你可以创建音频文件播放器项目

00:28:52.199 --> 00:28:57.771 align:middle
播放器项目有该属性的呈现状态

00:28:58.438 --> 00:29:01.074 align:middle
而且你可以使用KVO来监听这一状态

00:28:58.438 --> 00:29:01.074 align:middle
而且你可以使用KVO来监听这一状态

00:29:02.409 --> 00:29:04.811 align:middle
就像是AV
Foundation API一样

00:29:05.812 --> 00:29:09.516 align:middle
用它你可以创建一个播放器
并且调用play命令来播放它

00:29:09.917 --> 00:29:10.984 align:middle
超级简单

00:29:11.485 --> 00:29:15.322 align:middle
对于我刚才提到的例子-播客app

00:29:16.790 --> 00:29:22.429 align:middle
您可以创建一份
你打算播放的项目的清单

00:29:22.963 --> 00:29:28.502 align:middle
而如果你希望为用户
提供一种天衣无缝的收听体验

00:29:28.936 --> 00:29:31.638 align:middle
那就不要
使用AudioFilePlayer

00:29:31.705 --> 00:29:34.208 align:middle
而是要使用Audio
File QueuePlayer

00:29:34.274 --> 00:29:36.610 align:middle
那将让你达到想要的目的

00:29:37.945 --> 00:29:40.480 align:middle
就像是在其他iOS设备上一样

00:29:41.415 --> 00:29:45.452 align:middle
如果你希望创建后台模式的回放

00:29:46.420 --> 00:29:50.490 align:middle
您需要在app的
Info P-list内启用它

00:29:50.724 --> 00:29:54.661 align:middle
正如在Xcode中一样
超级简单

00:29:56.063 --> 00:29:59.166 align:middle
现在我将用一点时间为您讲述

00:29:59.233 --> 00:30:03.637 align:middle
应该在您的app中的什么位置
存放你的所有这些媒体数据

00:29:59.233 --> 00:30:03.637 align:middle
应该在您的app中的什么位置
存放你的所有这些媒体数据

00:30:04.137 --> 00:30:08.041 align:middle
如你所知在Apple
Watch上的app由两部分组成

00:30:08.242 --> 00:30:11.211 align:middle
一部分是app另一部分是扩展

00:30:11.912 --> 00:30:13.547 align:middle
而当扩展被安装的时候

00:30:13.881 --> 00:30:17.651 align:middle
扩展框架将位于app框架之内

00:30:18.318 --> 00:30:23.991 align:middle
每个部分都有一个
用于存放动态数据的容器

00:30:24.825 --> 00:30:27.194 align:middle
而每个容器只能由

00:30:27.528 --> 00:30:29.796 align:middle
每个独立组件访问

00:30:31.098 --> 00:30:34.902 align:middle
因此假定你有一张你希望
用在你的app中的静态图片

00:30:35.202 --> 00:30:39.540 align:middle
而且你希望使用WK image
加上图片名称来引用它

00:30:39.806 --> 00:30:43.477 align:middle
您应该把它放在app框架内的
一个资源目录内

00:30:44.211 --> 00:30:46.013 align:middle
如果你有其他资源

00:30:46.113 --> 00:30:50.951 align:middle
比如音频或视频回放以及你希望

00:30:51.018 --> 00:30:56.890 align:middle
在代码内直接操纵的图片数据
你应该将其放在扩展框架内

00:30:56.957 --> 00:30:59.092 align:middle
以便能够为它们创建URL

00:31:00.661 --> 00:31:06.133 align:middle
现在 在其他情况下
如果你希望在回放时加入动态内容

00:31:07.034 --> 00:31:09.636 align:middle
你可以使用
watchconnectivity

00:31:09.703 --> 00:31:12.239 align:middle
来从iPhone获取那些内容

00:31:12.906 --> 00:31:18.846 align:middle
或者你可以使用NSURL进程从互联
网上下载您的内容

00:31:19.813 --> 00:31:21.815 align:middle
对这些内容 你不能把它们

00:31:21.949 --> 00:31:24.184 align:middle
放在我这里为你展示的
两个容器内的任何一个里面

00:31:24.785 --> 00:31:30.057 align:middle
因为它们将不会被app或扩展读取

00:31:30.657 --> 00:31:33.160 align:middle
那么你需要做的
就是创建一个app群组

00:31:33.460 --> 00:31:35.529 align:middle
它将为您提供一个共享容器

00:31:35.796 --> 00:31:38.866 align:middle
用于存储这些数据
而且它们也将可以被二者读取

00:31:40.701 --> 00:31:45.839 align:middle
那么这就是您需要知道的全部内容
而如果你希望了解更多

00:31:45.906 --> 00:31:49.209 align:middle
关于app群组的知识请查阅这个文稿

00:31:50.944 --> 00:31:54.348 align:middle
接下来我要讲的特性是音频录制

00:31:54.982 --> 00:31:59.853 align:middle
让我们看一下UI
然后看它是如何实际工作的

00:32:00.521 --> 00:32:02.990 align:middle
一旦用户按下录音按钮

00:32:04.291 --> 00:32:07.261 align:middle
录制就会开始而且波形将会被更新

00:32:08.729 --> 00:32:10.998 align:middle
只须通过一个功能调用
你可以就可以实现这个操作

00:32:14.034 --> 00:32:17.671 align:middle
在您的界面控制器次类里面
您可以调用

00:32:17.938 --> 00:32:20.174 align:middle
present Audio
Recording

00:32:20.240 --> 00:32:22.142 align:middle
Controller
无须插入特别URL

00:32:22.242 --> 00:32:23.744 align:middle
并指定URL

00:32:24.077 --> 00:32:27.648 align:middle
现在您知道这个URL将指向共享容器

00:32:28.582 --> 00:32:31.018 align:middle
然后你决定预设

00:32:31.151 --> 00:32:33.220 align:middle
过一会我将谈一下预设

00:32:34.354 --> 00:32:37.891 align:middle
然后你可以
为此录音操作指定最大持续时间

00:32:38.759 --> 00:32:41.595 align:middle
如果你希望控制文件大小的话
这确实是有用的

00:32:42.496 --> 00:32:44.498 align:middle
现在我把它设置为60秒

00:32:45.899 --> 00:32:49.436 align:middle
你也可以自定义动作标题

00:32:49.703 --> 00:32:52.539 align:middle
它显示UI在右上角的

00:32:53.540 --> 00:32:55.809 align:middle
假定你的app提供一种

00:32:55.876 --> 00:32:59.479 align:middle
将此录音输出给他人的功能

00:33:00.280 --> 00:33:03.317 align:middle
可以对其进行自定义
比如发送就是比较合适的

00:33:03.951 --> 00:33:05.786 align:middle
否则默认将会是完成

00:33:06.286 --> 00:33:08.455 align:middle
也可指定
completion handler

00:33:08.522 --> 00:33:10.724 align:middle
它将告诉你是否内容被保存

00:33:11.058 --> 00:33:12.159 align:middle
以及是否有任何错误

00:33:13.327 --> 00:33:14.595 align:middle
让我们回到URL

00:33:14.995 --> 00:33:19.233 align:middle
URL包含了文件名称
而文件的扩展名实际上

00:33:19.299 --> 00:33:23.203 align:middle
决定了我们将为生成输出
使用什么样的编码解码器

00:33:24.538 --> 00:33:30.310 align:middle
这些是
我们支持的文件类型MP4和4A

00:33:30.477 --> 00:33:35.382 align:middle
它们将分别使用AAC编码解码器
波形将使用PCM编码解码器

00:33:35.782 --> 00:33:41.288 align:middle
我们支持三种不同的预设
窄带语音 宽带语音和高质量音频

00:33:41.588 --> 00:33:43.557 align:middle
每种都有不同的采样率

00:33:43.991 --> 00:33:46.126 align:middle
而根据您选择的编码解码器

00:33:46.393 --> 00:33:47.895 align:middle
输出波特率将会不同

00:33:48.962 --> 00:33:53.300 align:middle
如你所料 输出质量越高

00:33:53.634 --> 00:33:55.903 align:middle
输出文件就会越大

00:33:58.005 --> 00:34:00.340 align:middle
因此它取决于您的使用场合

00:33:58.005 --> 00:34:00.340 align:middle
因此它取决于您的使用场合

00:34:00.574 --> 00:34:03.477 align:middle
因此 如果你的录音是作为语音备忘

00:34:04.011 --> 00:34:07.047 align:middle
预设为窄带语音将是最适合您的

00:34:07.881 --> 00:34:10.851 align:middle
如果您试图录制更高质量的音频

00:34:10.918 --> 00:34:13.120 align:middle
或许是出于后期处理的目的

00:34:13.687 --> 00:34:17.056 align:middle
那么你可能会考虑预设为高质量的音频

00:34:17.824 --> 00:34:19.226 align:middle
通过这些预设

00:34:19.293 --> 00:34:22.161 align:middle
录音操作变得非常简单明了

00:34:22.228 --> 00:34:23.697 align:middle
可以根据您的需求进行自定义

00:34:26.266 --> 00:34:28.135 align:middle
接下来我将谈一下安全性

00:34:29.268 --> 00:34:32.206 align:middle
在watchOS 2中
您现在可以使用Keychain

00:34:32.272 --> 00:34:36.643 align:middle
存储您的用户的敏感数据

00:34:37.678 --> 00:34:40.414 align:middle
你可以设定那些数据可以被读取

00:34:40.480 --> 00:34:42.748 align:middle
只有当设备解锁后

00:34:43.784 --> 00:34:50.489 align:middle
用户输入争取的密码后app
watch会自动在设备上解锁

00:34:50.556 --> 00:34:53.126 align:middle
当Apple Watch
在用户的手腕上时

00:34:54.527 --> 00:34:58.732 align:middle
然后数据就是您一直可以读取的了

00:34:59.166 --> 00:35:03.070 align:middle
直到用户将手表从他们的手腕上取下

00:34:59.166 --> 00:35:03.070 align:middle
直到用户将手表从他们的手腕上取下

00:35:05.038 --> 00:35:10.377 align:middle
这确实会是有帮助的 如果您将为表盘
创建一个complication

00:35:11.211 --> 00:35:14.815 align:middle
而在complication 中
您可能会显示一些用户数据

00:35:15.682 --> 00:35:17.317 align:middle
它们是敏感的

00:35:18.452 --> 00:35:22.923 align:middle
那么这对于使用Keychain
保护那些数据来说确实是非常重要的

00:35:23.690 --> 00:35:26.193 align:middle
有一件我想让大家牢记的事情是

00:35:26.760 --> 00:35:29.429 align:middle
您在Apple Watch上
所创建的Keychain

00:35:29.496 --> 00:35:32.332 align:middle
并不参与Keychain SYNC同步

00:35:32.999 --> 00:35:34.935 align:middle
它们并不是图标Keychain

00:35:35.869 --> 00:35:41.175 align:middle
尽管其使用方法
是与其他平台完全相同的

00:35:42.342 --> 00:35:46.980 align:middle
这是一个创建Keychain的例子
它用来存储用户的凭证

00:35:47.414 --> 00:35:49.750 align:middle
假定您有一个安全密码

00:35:50.417 --> 00:35:51.852 align:middle
而且你希望存储它

00:35:51.919 --> 00:35:57.057 align:middle
让它只有在设备解锁时才可读取

00:35:57.558 --> 00:35:59.426 align:middle
您可以做类似这样的事情

00:35:59.660 --> 00:36:04.565 align:middle
并且调用add来添加这些属性

00:35:59.660 --> 00:36:04.565 align:middle
并且调用add来添加这些属性

00:36:05.666 --> 00:36:07.301 align:middle
那样您
就会创建一个Keychain

00:36:10.003 --> 00:36:12.806 align:middle
总结一下我们今天的讲座

00:36:14.074 --> 00:36:18.979 align:middle
开始时大家听内森
向您介绍了选择器的一些新样式

00:36:20.447 --> 00:36:23.984 align:middle
每个都可以
被Digital Crown控制

00:36:24.051 --> 00:36:25.285 align:middle
使用是非常有趣的

00:36:26.320 --> 00:36:30.958 align:middle
然后大家听我
讲了音频和视频播放器

00:36:31.792 --> 00:36:35.963 align:middle
而且您也可以在后台播放长格式的音频

00:36:36.997 --> 00:36:41.134 align:middle
对于音频录制
现在您可以只用几行代码就可以实现

00:36:42.469 --> 00:36:46.340 align:middle
最后 在watchOS 2里面
您可以使用Keychain

00:36:46.406 --> 00:36:47.875 align:middle
来保护您的用户数据

00:36:49.476 --> 00:36:53.080 align:middle
如果您需要更多信息 请看这张幻灯片

00:36:53.547 --> 00:36:57.818 align:middle
里面有个您应该参考的示例代码文稿

00:36:58.452 --> 00:37:03.390 align:middle
本周还有几个讲座

00:36:58.452 --> 00:37:03.390 align:middle
本周还有几个讲座

00:37:04.157 --> 00:37:08.328 align:middle
您可以亲临现场或观看录像的相关课程

00:37:08.695 --> 00:37:09.796 align:middle
感谢您的倾听
