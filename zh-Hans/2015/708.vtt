WEBVTT

00:00:22.089 --> 00:00:26.560 align:middle
调试能量的问题

00:00:28.462 --> 00:00:29.396 align:middle
你们好

00:00:31.532 --> 00:00:32.399 align:middle
嗨
大家好

00:00:32.933 --> 00:00:33.767 align:middle
早上好

00:00:34.401 --> 00:00:36.703 align:middle
希望你们在苹果全球开发者大会上愉快

00:00:37.871 --> 00:00:39.006 align:middle
我叫Abhinav Pathak

00:00:39.072 --> 00:00:40.941 align:middle
和我的同事
Pai-Han Huang

00:00:41.008 --> 00:00:43.110 align:middle
将要谈谈调试能量的问题

00:00:44.211 --> 00:00:46.547 align:middle
我们将向你们显示我们现有的工具

00:00:47.181 --> 00:00:50.951 align:middle
以及我们今年特意
为iOS构建的新的工具

00:00:51.552 --> 00:00:56.223 align:middle
使用这些工具
你发现你的应用程序中的能量问题

00:00:56.390 --> 00:00:59.159 align:middle
另一方面就是了解决这些问题
客户就会真正喜欢你的程序

00:01:00.928 --> 00:01:01.762 align:middle
让我们开始

00:01:03.163 --> 00:01:04.230 align:middle
红色的电池图标

00:01:04.331 --> 00:01:07.267 align:middle
当它出现的时候我们都很憎恨它

00:01:08.468 --> 00:01:09.837 align:middle
客户也很憎恨它

00:01:11.271 --> 00:01:17.411 align:middle
具有良好的电池寿命对于
精彩的用户体验是十分重要的

00:01:18.579 --> 00:01:24.985 align:middle
一次又一次证明
人们所想要的最重要特色是电池的寿命

00:01:26.420 --> 00:01:28.622 align:middle
在Apple
为确保客户获得良好的电池寿命

00:01:28.922 --> 00:01:32.059 align:middle
我们做出了很大的努力

00:01:32.926 --> 00:01:38.932 align:middle
然而通常客户运行的应用程序

00:01:38.999 --> 00:01:41.935 align:middle
是从它们的设备中吸走能量的主要原因

00:01:43.470 --> 00:01:44.905 align:middle
为了帮助我们的客户了解

00:01:45.372 --> 00:01:49.443 align:middle
哪个程序消耗电池能量
哪个程序耗能最大

00:01:49.776 --> 00:01:56.016 align:middle
几年前针对OS X侧
我们就有了活动监测能量影响工具

00:01:56.517 --> 00:01:57.417 align:middle
在这里你可以看到

00:01:57.484 --> 00:02:03.657 align:middle
每个应用程序瞬间及一段时间内的影响

00:01:57.484 --> 00:02:03.657 align:middle
每个应用程序瞬间及一段时间内的影响

00:02:03.724 --> 00:02:06.693 align:middle
这样用户就可以了解
他们的设备发生了什么

00:02:07.995 --> 00:02:12.165 align:middle
在iSO 8
我们引入了电池使用用户界面

00:02:12.232 --> 00:02:13.634 align:middle
一个面向用户的UI

00:02:14.234 --> 00:02:18.372 align:middle
在这里他们可以看到
最后24小时以及最后7天内

00:02:18.805 --> 00:02:23.644 align:middle
能量在他们所
使用的不同的应用程序中的分解比例

00:02:25.579 --> 00:02:28.815 align:middle
排在前面的应用程序可能有正当的理由

00:02:28.882 --> 00:02:31.785 align:middle
“嗨 我喜欢这个应用程序
所以我一直在用”

00:02:32.986 --> 00:02:35.889 align:middle
为了使客户更好地了解
这里的关键因素是什么

00:02:36.490 --> 00:02:41.161 align:middle
今年我们在它的顶部包括了一个
单独触发器

00:02:41.228 --> 00:02:44.531 align:middle
在这里他们可以切换
并且看到使用了多少应用程序

00:02:45.065 --> 00:02:47.167 align:middle
获得多少屏幕时间

00:02:47.367 --> 00:02:49.169 align:middle
以及它在后台运行使用了多少

00:02:49.570 --> 00:02:52.172 align:middle
然后他们就可以进行评估
“嗨 我用它用的多”

00:02:52.306 --> 00:02:54.374 align:middle
或者“嗨 这个程序消耗了很多能量”

00:02:56.543 --> 00:03:02.649 align:middle
这个讲座就是关于
如果你的应用程序在列表中名列前茅

00:02:56.543 --> 00:03:02.649 align:middle
这个讲座就是关于
如果你的应用程序在列表中名列前茅

00:03:03.150 --> 00:03:07.855 align:middle
你怎样把它降下来
同时不影响用户的使用的问题

00:03:08.655 --> 00:03:11.191 align:middle
这个讲座也针对通常耗能很少的人们

00:03:11.258 --> 00:03:15.095 align:middle
如何才能耗能更少
并且获得完美的客户体验

00:03:16.730 --> 00:03:19.366 align:middle
为了更好地进行概括

00:03:19.600 --> 00:03:21.635 align:middle
我们将快速介绍
能量的基本原理和最佳范例

00:03:21.702 --> 00:03:24.271 align:middle
我们将对早晨的讲座进行总结

00:03:25.339 --> 00:03:27.841 align:middle
我们将向你展示能量调试流程

00:03:28.041 --> 00:03:31.245 align:middle
以及我们用来调试能量的工具

00:03:32.212 --> 00:03:33.413 align:middle
我们将进行演示

00:03:33.680 --> 00:03:39.386 align:middle
我们为这次讲座
专门构建的样本程序中修复能量问题

00:03:39.586 --> 00:03:45.726 align:middle
向你展示修复能源问题是多么简单
然后我们就将结束这次讲座

00:03:49.463 --> 00:03:50.297 align:middle
就这么简单

00:03:50.364 --> 00:03:52.533 align:middle
每个人都知道
能量101

00:03:52.799 --> 00:03:54.601 align:middle
能量等于功率乘以时间

00:03:55.269 --> 00:03:56.670 align:middle
我们现在看到这里有个图表

00:03:57.070 --> 00:03:59.106 align:middle
X轴是时间
Y轴是功率

00:03:59.173 --> 00:04:01.308 align:middle
这是一个应用程序使用波形图

00:03:59.173 --> 00:04:01.308 align:middle
这是一个应用程序使用波形图

00:04:01.608 --> 00:04:02.442 align:middle
发生了什么

00:04:02.509 --> 00:04:06.313 align:middle
我们说一个用户启动一个应用程序
一堆活动在后台支持这个程序

00:04:06.547 --> 00:04:07.648 align:middle
然后该程序就悬停

00:04:08.782 --> 00:04:10.517 align:middle
最重要的一点是

00:04:10.584 --> 00:04:15.923 align:middle
图表下面的整个区域
都是这个特定的应用程序的能量消耗

00:04:18.325 --> 00:04:20.394 align:middle
能量是由功率和时间来决定的

00:04:20.861 --> 00:04:22.362 align:middle
为了进一步说明这一点

00:04:22.663 --> 00:04:25.332 align:middle
我们在这里取两个长方形

00:04:25.666 --> 00:04:30.003 align:middle
它们消耗的功率是不同的
消耗的时间也是不同的

00:04:30.237 --> 00:04:31.772 align:middle
但是他们的能量消耗是相同的

00:04:34.608 --> 00:04:35.509 align:middle
第二个概念

00:04:37.911 --> 00:04:40.480 align:middle
有些叫做固定成本的东西
有些东西叫做动态成本

00:04:40.814 --> 00:04:44.251 align:middle
我们在系统中的许多的硬件组件

00:04:44.518 --> 00:04:47.654 align:middle
如果你要使用它们
我们必须将它们引入一种

00:04:47.721 --> 00:04:49.523 align:middle
它们可以开始服务于你的请求的状态

00:04:50.490 --> 00:04:55.329 align:middle
相比休眠转态
这些状态消耗能量很大

00:04:55.829 --> 00:04:58.966 align:middle
一旦将它们引入
它们就做你要求它做的工作

00:04:59.433 --> 00:05:02.603 align:middle
然后我们让它们保持等待状态

00:04:59.433 --> 00:05:02.603 align:middle
然后我们让它们保持等待状态

00:05:02.870 --> 00:05:04.304 align:middle
你知道的
将会有更多的工作出现

00:05:04.605 --> 00:05:06.273 align:middle
一旦我们看到没有出现工作出现

00:05:06.440 --> 00:05:09.176 align:middle
我们让它们平静下来
进入睡眠

00:05:10.944 --> 00:05:14.014 align:middle
固定成本可以是非常非常昂贵

00:05:14.448 --> 00:05:17.451 align:middle
我们在整个的讲座中
都将追踪这个固定成本

00:05:17.518 --> 00:05:20.220 align:middle
只要它开始影响你的应用程序

00:05:22.322 --> 00:05:28.195 align:middle
当说到降低能量的使用方法
有三条非常简单的你需要遵守的规则

00:05:28.795 --> 00:05:30.764 align:middle
第一个规则
永远不要做

00:05:31.798 --> 00:05:34.835 align:middle
客户真的需要完成那个工作吗？

00:05:35.469 --> 00:05:38.105 align:middle
如果你不做它
固定成本 动态成本 能量功率时间

00:05:38.205 --> 00:05:40.307 align:middle
我们说到的所有的一切东西都是零

00:05:41.141 --> 00:05:41.975 align:middle
真了不起

00:05:43.710 --> 00:05:45.412 align:middle
如果你必须做
就少做点

00:05:45.812 --> 00:05:50.083 align:middle
用最少的工作量来满足客户的需要

00:05:51.885 --> 00:05:53.420 align:middle
下一个就是
在一个更好的时间去做

00:05:54.021 --> 00:05:57.291 align:middle
一个客户在野外拍摄照片

00:05:57.357 --> 00:05:59.259 align:middle
我难道需要现在
就把照片上传到服务器上面

00:05:59.660 --> 00:06:03.363 align:middle
也许应该有些耐心
等到用户将电源插头接上再说

00:05:59.660 --> 00:06:03.363 align:middle
也许应该有些耐心
等到用户将电源插头接上再说

00:06:05.566 --> 00:06:07.100 align:middle
第三点就是要高效地去做

00:06:07.167 --> 00:06:12.272 align:middle
什么是最有效的算法
或者我用最好的办法来服务这个请求

00:06:12.773 --> 00:06:17.511 align:middle
我们可以看到这些不断地
在我们讲座的不同部分中出现

00:06:20.781 --> 00:06:24.184 align:middle
这些问题需要插入我们所具有的
能量调试流程和工具才能解决

00:06:24.918 --> 00:06:27.955 align:middle
让我们来看看能量调试流程是什么样子

00:06:28.155 --> 00:06:30.457 align:middle
它与正常的软件工程调试很相似

00:06:30.891 --> 00:06:33.060 align:middle
你都做些什么
你编写代码并构建它

00:06:34.161 --> 00:06:35.996 align:middle
你在一个非常简单的调试器上运行代码

00:06:36.063 --> 00:06:39.366 align:middle
该调试器将向你
显示你的代码中的高级别问题是什么

00:06:39.833 --> 00:06:43.537 align:middle
你可以很容易地识别 修复很多问题
然后你再重新运行它

00:06:44.972 --> 00:06:46.640 align:middle
然而有些问题很难

00:06:47.040 --> 00:06:50.978 align:middle
你不断进行修改并说，
“给我一个集中调试器，好吗？”

00:06:51.111 --> 00:06:52.179 align:middle
“嗨 我有内存问题”

00:06:52.246 --> 00:06:54.448 align:middle
让我获得一个针对内存的集中工具

00:06:54.515 --> 00:06:58.752 align:middle
可以直接针对我的程序代码的确切行
问题在哪？

00:06:59.920 --> 00:07:01.121 align:middle
一旦你用这个完成了调试

00:06:59.920 --> 00:07:01.121 align:middle
一旦你用这个完成了调试

00:07:01.455 --> 00:07:03.524 align:middle
你将它发给你的客户
你的客户就可以使用了

00:07:05.425 --> 00:07:10.364 align:middle
在OSX一侧有Xcode
在这里你可以编写和构建你的程序

00:07:12.232 --> 00:07:16.170 align:middle
作为通用调试器的一部分
在Xcode的内部有能量调试工具

00:07:16.236 --> 00:07:17.671 align:middle
我们马上就要谈到这种调试工具

00:07:18.105 --> 00:07:21.608 align:middle
这些说明最主要的是
告诉你的应用程序是如何运转的

00:07:23.544 --> 00:07:26.346 align:middle
作为仪器的一部分
我们有集中工具

00:07:26.413 --> 00:07:27.381 align:middle
一旦你识别

00:07:27.447 --> 00:07:31.218 align:middle
你会说“嗨 系统的这部分有问题
让我过来修复这个问题”

00:07:31.985 --> 00:07:34.555 align:middle
至于客户会受到能量消耗的影响

00:07:34.855 --> 00:07:36.056 align:middle
他们可以过来看看

00:07:37.791 --> 00:07:39.092 align:middle
在我们进入到工具之前

00:07:39.560 --> 00:07:42.362 align:middle
让我们来看看
在OSX上的能量调试优先级

00:07:42.930 --> 00:07:46.266 align:middle
原因就是该工具非常关注
能量调试优先级

00:07:46.333 --> 00:07:50.504 align:middle
因为它们能向你指出
你需要修复你的问题的确切位置

00:07:52.139 --> 00:07:58.512 align:middle
OSX上的优先级是CPU和GPU

00:07:59.546 --> 00:08:02.049 align:middle
它们有很高的固定成本

00:07:59.546 --> 00:08:02.049 align:middle
它们有很高的固定成本

00:08:03.083 --> 00:08:07.054 align:middle
要将它转入它们可以为你服务
或者你的请求在空闲转态

00:08:07.754 --> 00:08:13.227 align:middle
消耗的功率是它们在休眠状态下的十倍

00:08:14.528 --> 00:08:15.662 align:middle
一旦它们在空闲状态

00:08:15.729 --> 00:08:17.364 align:middle
如果你使用了百分之一的CPU

00:08:17.631 --> 00:08:20.968 align:middle
那就是要比最高空闲功率
消耗多百分之十

00:08:21.602 --> 00:08:23.136 align:middle
从那时起 指数增加

00:08:23.403 --> 00:08:27.508 align:middle
百分之十的CPU 2倍的空闲状态
百分之百的CPU 一百倍的空闲状态

00:08:28.942 --> 00:08:30.177 align:middle
这里的规则很简单

00:08:30.310 --> 00:08:33.179 align:middle
如果你不需要 就不要惊醒CPU

00:08:33.413 --> 00:08:34.948 align:middle
让这头大熊睡去吧 不要去挑拨它

00:08:37.717 --> 00:08:40.953 align:middle
我们在Xcode中的工具
我管它叫能量计量器

00:08:42.121 --> 00:08:44.725 align:middle
它打印出你的能量报告
就像是这个样子

00:08:44.892 --> 00:08:45.726 align:middle
你如何到达那儿

00:08:46.093 --> 00:08:50.063 align:middle
你如果在运行你的应用程序
你点击调试分析部分

00:08:50.497 --> 00:08:52.399 align:middle
你一点击那儿
你就会看到一群计量器

00:08:52.833 --> 00:08:54.334 align:middle
点击能量影响计量器

00:08:54.968 --> 00:08:55.869 align:middle
你就会看到那个报告

00:08:56.670 --> 00:08:57.704 align:middle
你在报告中看到什么

00:09:00.574 --> 00:09:06.446 align:middle
最主要的是
你会看到你是否是OSX中的坏公民

00:09:07.014 --> 00:09:11.084 align:middle
最根本的是
是否你正在使用超高CPU

00:09:11.952 --> 00:09:14.121 align:middle
如果你在阻止

00:09:14.454 --> 00:09:18.125 align:middle
你的应用程序在后台中
且用户看不到它

00:09:18.792 --> 00:09:22.196 align:middle
系统会尝试让你进入App Nap中
这是一种后台悬置状态

00:09:22.563 --> 00:09:24.264 align:middle
而你正在阻止系统那样做

00:09:24.665 --> 00:09:26.233 align:middle
你并没有积极服务于任何请求

00:09:26.500 --> 00:09:27.734 align:middle
但是你消耗了很多的能量

00:09:28.836 --> 00:09:31.672 align:middle
空闲阻止
你不让CPU进入空闲状态

00:09:31.939 --> 00:09:34.408 align:middle
如果它不能进入空闲状态
它就不能进行休眠状态

00:09:35.008 --> 00:09:38.679 align:middle
一旦进入休眠状态
CPU唤醒开销就会说

00:09:38.846 --> 00:09:42.082 align:middle
“嗨 负责把这个家伙唤醒”

00:09:43.750 --> 00:09:46.954 align:middle
你一旦找出了最可能发生问题的地方

00:09:47.254 --> 00:09:50.357 align:middle
你能做的就只能在报告的下面

00:09:50.424 --> 00:09:53.227 align:middle
你有我们刚才所描述的事情

00:09:53.694 --> 00:09:56.964 align:middle
但是你有这些可以跳入工具的按钮

00:09:57.431 --> 00:10:00.767 align:middle
这些工具专门为每个区域使用的

00:09:57.431 --> 00:10:00.767 align:middle
这些工具专门为每个区域使用的

00:10:01.268 --> 00:10:07.074 align:middle
你知道的它们能够帮助你定位
哪行代码正在导致很高的CPU的使用

00:10:07.474 --> 00:10:09.810 align:middle
哪行代码正在导致唤醒开销

00:10:10.444 --> 00:10:12.779 align:middle
你可以继续调试你的程序

00:10:14.882 --> 00:10:17.718 align:middle
说到减少OSX上的能量

00:10:18.318 --> 00:10:20.954 align:middle
我们再次强调我们的三个简单的规则
永远不要做 做得少一些

00:10:21.822 --> 00:10:23.223 align:middle
你想要合并所有的计时器

00:10:23.390 --> 00:10:25.325 align:middle
你不想不断地唤醒系统

00:10:26.226 --> 00:10:27.261 align:middle
最小化CPU唤醒

00:10:28.295 --> 00:10:29.496 align:middle
在最佳时间唤醒

00:10:29.696 --> 00:10:33.100 align:middle
使用后台活动调度程序API

00:10:33.166 --> 00:10:35.002 align:middle
在这个调度程序
你可以指定许多的参数

00:10:35.302 --> 00:10:37.204 align:middle
并且可以让系统来替你选择最佳的时间

00:10:38.438 --> 00:10:39.373 align:middle
有效地去做

00:10:39.706 --> 00:10:43.744 align:middle
在工作队列中设置最佳的工作优先级
QoS工作优先级

00:10:44.511 --> 00:10:45.646 align:middle
编写一个计算程序算法

00:10:49.216 --> 00:10:50.517 align:middle
我们接着说iOS

00:10:51.318 --> 00:10:55.088 align:middle
CPU仍然是主要的能量消耗

00:10:56.223 --> 00:10:59.993 align:middle
但是由于这些设备
与OSX中的设备是不同的

00:11:00.227 --> 00:11:05.933 align:middle
其它的几样东西也在起作用

00:11:06.600 --> 00:11:10.370 align:middle
首先是两个外围
定位和连网

00:11:10.504 --> 00:11:14.508 align:middle
它们与CPU一样
在一些情况下很费能量

00:11:16.210 --> 00:11:19.680 align:middle
接下来
当一个应用程序在后台中运行时

00:11:19.746 --> 00:11:23.116 align:middle
你的程序会消耗所有这三个硬件

00:11:23.317 --> 00:11:25.118 align:middle
它会消耗许多的能量

00:11:25.485 --> 00:11:31.058 align:middle
你并没有显示能量
但是所有其它的组件消耗能量都很巨大

00:11:31.925 --> 00:11:34.194 align:middle
让我们来一个个看一下

00:11:35.996 --> 00:11:38.398 align:middle
定位能量通常是这样起作用的

00:11:38.532 --> 00:11:40.000 align:middle
它的功率并不很高

00:11:40.167 --> 00:11:45.005 align:middle
功率被你已经调用的API
及你所调用程序的精确度的数据所消耗

00:11:46.073 --> 00:11:49.643 align:middle
时间组件很大
那就导致了能量变得巨大

00:11:51.545 --> 00:11:55.482 align:middle
说到修复定位
同样的原则 从来不做

00:11:56.116 --> 00:11:59.119 align:middle
只有你真的需要它时
只做连续定位

00:11:59.186 --> 00:12:01.088 align:middle
用户就会真的请求它

00:11:59.186 --> 00:12:01.088 align:middle
用户就会真的请求它

00:12:01.421 --> 00:12:03.824 align:middle
请在完成时就立即停止

00:12:03.891 --> 00:12:07.194 align:middle
一旦你获得了定位
一旦你的请求获得满足 就停止

00:12:08.996 --> 00:12:10.597 align:middle
下面是是高效地去做

00:12:10.664 --> 00:12:12.199 align:middle
你需要的最精确是什么

00:12:12.266 --> 00:12:15.636 align:middle
你需要知道三英尺之内的
用户在地球的位置吗？

00:12:16.036 --> 00:12:18.772 align:middle
或者为晴空万里城市预测气候吗？

00:12:20.240 --> 00:12:21.408 align:middle
你到底想要做些什么

00:12:21.842 --> 00:12:24.244 align:middle
我们进入到定位网站

00:12:24.311 --> 00:12:28.549 align:middle
我们说“嗨
这里有一批人们想要使用范例”

00:12:28.949 --> 00:12:35.923 align:middle
每个使用范例我们都设计了API
目的是更好地服务于开发者你

00:12:36.757 --> 00:12:40.527 align:middle
试着读一下这些API
什么是你真正想要的

00:12:40.594 --> 00:12:44.698 align:middle
我们将为你做好能源管理工作

00:12:47.434 --> 00:12:49.403 align:middle
说到连网

00:12:50.437 --> 00:12:52.739 align:middle
类似的原则
从来不做 消减传输

00:12:53.340 --> 00:12:55.175 align:middle
你能缓存吗？
你能压缩吗？

00:12:55.609 --> 00:12:58.512 align:middle
你需要在最小的组成要素上
最高质量的媒体吗？

00:13:01.748 --> 00:13:03.951 align:middle
你能在更好的时间去做吗？
你考虑过容忍吗？

00:13:04.184 --> 00:13:05.052 align:middle
什么时候需要它？

00:13:05.586 --> 00:13:07.621 align:middle
你能将它标为任意吗？

00:13:08.188 --> 00:13:10.591 align:middle
你将它标为任意的时刻
就是系统接管的时刻

00:13:10.924 --> 00:13:13.994 align:middle
你可以规定
在接下来的6小时或12个小时内

00:13:14.127 --> 00:13:16.363 align:middle
我需要将这个上载或下载

00:13:16.730 --> 00:13:20.367 align:middle
系统就会计算出什么是
最佳的时间来为你做这个工作

00:13:20.434 --> 00:13:22.870 align:middle
一旦工作完成 系统就会告诉你
嗨 工作干完了

00:13:25.105 --> 00:13:26.740 align:middle
做的更加有效些

00:13:27.174 --> 00:13:28.642 align:middle
合并传输

00:13:29.076 --> 00:13:31.879 align:middle
让我们来看个例子
这个是什么意思

00:13:32.412 --> 00:13:36.717 align:middle
我们说你有个同步数据到服务器的请求
用户在使用你的应用程序

00:13:36.783 --> 00:13:40.654 align:middle
因为数据在设备上产生
用户只能周期性地同步

00:13:41.722 --> 00:13:42.656 align:middle
很简单的解决方案

00:13:43.557 --> 00:13:47.361 align:middle
当数据正在设备上产生的时候
只需要不断地推送它

00:13:48.629 --> 00:13:49.596 align:middle
这会发生什么

00:13:50.030 --> 00:13:51.999 align:middle
每推送一次
你提供了数据

00:13:52.533 --> 00:13:56.537 align:middle
你发送你的10比特 100比特
射频停留了很长的时间

00:13:56.603 --> 00:13:57.504 align:middle
然后它睡着了

00:13:58.005 --> 00:13:59.506 align:middle
下一次推送
相同的现象在重复

00:14:01.175 --> 00:14:04.044 align:middle
固定成本在那个阶段是很高的

00:14:05.145 --> 00:14:05.979 align:middle
你如何来修复它呢

00:14:06.580 --> 00:14:07.414 align:middle
非常简单

00:14:07.681 --> 00:14:08.882 align:middle
合并所有的传输

00:14:09.283 --> 00:14:11.718 align:middle
让用户与该设备进行互动构建一个状态

00:14:12.052 --> 00:14:14.655 align:middle
然后偶尔将状态发送到云上

00:14:15.222 --> 00:14:18.892 align:middle
这样你就只支付了一次固定价格的费用

00:14:25.165 --> 00:14:26.066 align:middle
下来讨论后台

00:14:26.700 --> 00:14:29.736 align:middle
首先 当你的应用程序在后台运行时

00:14:29.837 --> 00:14:31.939 align:middle
它耗尽了用户的能量

00:14:32.973 --> 00:14:35.909 align:middle
如果没有必要
不要在后台中做任何事情

00:14:37.411 --> 00:14:41.715 align:middle
如果你需要去做它
尽快调用你的任务完成处理器

00:14:43.283 --> 00:14:48.255 align:middle
这个任务完成处理器是在向系统表示说
“嗨 我完成了

00:14:48.722 --> 00:14:50.824 align:middle
请悬置我吧
请让设备睡觉吧”

00:14:52.726 --> 00:14:53.560 align:middle
做得更有效率些

00:14:53.760 --> 00:14:57.965 align:middle
正如你所知
有许多的后台API可以帮系统忙

00:14:58.198 --> 00:15:02.002 align:middle
在你发现的最佳时间
最佳的能量消耗周期

00:14:58.198 --> 00:15:02.002 align:middle
在你发现的最佳时间
最佳的能量消耗周期

00:15:02.970 --> 00:15:06.306 align:middle
请替我做这个工作
系统就会替你去做

00:15:08.909 --> 00:15:11.378 align:middle
让我们回到iOS上的能量调试流程

00:15:11.879 --> 00:15:14.982 align:middle
我们目前只有Xcode
在这里你编写和构建你的代码

00:15:16.250 --> 00:15:20.487 align:middle
客户拥有电池使用用户UI
他们可以看到程序是如何节约能量的

00:15:23.023 --> 00:15:26.059 align:middle
到目前为止
我们有开发的工具

00:15:26.493 --> 00:15:28.962 align:middle
叫做能量诊断工具

00:15:29.029 --> 00:15:32.132 align:middle
它可以对你的程序的行为做初步诊断

00:15:32.733 --> 00:15:33.867 align:middle
让我们来看看这个工具

00:15:35.035 --> 00:15:35.936 align:middle
你怎样才能使能它呢

00:15:36.303 --> 00:15:39.840 align:middle
你进入到设置
开发者来到记录窗口

00:15:40.707 --> 00:15:43.544 align:middle
你打开这里的能量触发器

00:15:43.677 --> 00:15:45.412 align:middle
然后你就说
“嗨 开始记录”

00:15:47.414 --> 00:15:48.549 align:middle
一旦你开始记录

00:15:48.882 --> 00:15:51.151 align:middle
就像你的用户那样
使用你的应用程序

00:15:51.552 --> 00:15:56.089 align:middle
持续上几个小时
12个小时 24个小时 几天

00:15:56.623 --> 00:15:59.259 align:middle
一旦你完成了
只要点击按钮 结束记录

00:16:03.397 --> 00:16:08.035 align:middle
下面将你的设备与Mac连接
进入工具 选择能量诊断

00:16:08.101 --> 00:16:10.671 align:middle
然后说“嗨 导入你刚才的记录数据”

00:16:11.438 --> 00:16:14.808 align:middle
你一旦那样做
你就获得像这样的图片

00:16:16.476 --> 00:16:22.850 align:middle
这里试图想向你说明当你在使用时

00:16:23.116 --> 00:16:25.385 align:middle
那些占用大量性能硬件的状态

00:16:25.752 --> 00:16:29.256 align:middle
你会看到GPU的状态
你会看到Wi-Fi 蓝牙

00:16:29.423 --> 00:16:33.427 align:middle
你会看到它们呆了多长时间
什么时候在上面 什么时候离开等等

00:16:33.827 --> 00:16:36.196 align:middle
你将会看到有多少数据包
从每个接口中发出

00:16:36.263 --> 00:16:37.598 align:middle
CPU的活动性是什么

00:16:38.098 --> 00:16:42.102 align:middle
在顶部 你将会看到能量使用等级
是20中的多少量

00:16:42.169 --> 00:16:44.505 align:middle
如果你是20中的20
相信我 你有麻烦了

00:16:45.072 --> 00:16:47.174 align:middle
这是非常非常高的能量消耗

00:16:47.474 --> 00:16:49.076 align:middle
你希望靠近1

00:16:51.044 --> 00:16:54.081 align:middle
如果你想要做长期的实验
这个工具是很不错的

00:16:54.681 --> 00:16:58.952 align:middle
但是它不能做的是它不能告诉你
为什么硬件能量在上升

00:16:59.253 --> 00:17:01.622 align:middle
你请求它了吗？
你在哪儿请求它了？

00:16:59.253 --> 00:17:01.622 align:middle
你请求它了吗？
你在哪儿请求它了？

00:17:02.055 --> 00:17:05.125 align:middle
它并没有精确定位
没有细致到进入你的代码

00:17:07.194 --> 00:17:08.095 align:middle
为解决这个问题

00:17:08.694 --> 00:17:10.797 align:middle
今年我们引入了

00:17:12.232 --> 00:17:18.070 align:middle
在iOS上
的能量计量器以及一些工具

00:17:18.438 --> 00:17:22.542 align:middle
这可以用来精确定位产生问题的代码

00:17:24.578 --> 00:17:27.181 align:middle
为了进行详细说明
让我们来进行演示

00:17:27.580 --> 00:17:32.286 align:middle
我的同事Pai-Han Huang
将来谈谈这个

00:17:37.191 --> 00:17:42.262 align:middle
好 在这个演示中
我将谈谈这个能量故障工具的主要特点

00:17:43.430 --> 00:17:44.264 align:middle
演示应用程序

00:17:44.498 --> 00:17:50.337 align:middle
向你展示如何使用这个新工具来识别
和提高你的应用程序的能量效率

00:17:51.405 --> 00:17:52.306 align:middle
作为一名开发者

00:17:52.906 --> 00:17:56.710 align:middle
我喜欢这些新的工具
因为它们易于使用 有效

00:17:57.377 --> 00:17:58.412 align:middle
因此在演示结束后

00:17:58.512 --> 00:18:03.250 align:middle
我希望你们和我一样
将这些新的工具用到项目设计中

00:17:58.512 --> 00:18:03.250 align:middle
我希望你们和我一样
将这些新的工具用到项目设计中

00:18:04.618 --> 00:18:06.987 align:middle
演示主要有两部分组成

00:18:07.454 --> 00:18:11.658 align:middle
一个是新工具箱
另外一个是演示应用程序

00:18:12.159 --> 00:18:15.429 align:middle
首先让我来向你们介绍新的工具箱

00:18:21.435 --> 00:18:25.372 align:middle
我们看到的是
iOS能量计量器的屏幕截图

00:18:25.439 --> 00:18:31.011 align:middle
是其它新能量调试工具的入口点

00:18:33.013 --> 00:18:34.681 align:middle
它在哪儿呢？

00:18:35.549 --> 00:18:39.386 align:middle
它实际上
在Xcode调试导航器的内部

00:18:39.953 --> 00:18:41.588 align:middle
你可以在这儿看见

00:18:42.923 --> 00:18:44.858 align:middle
在你通过Xcode
启动了你的应用程序后

00:18:45.325 --> 00:18:49.062 align:middle
你就会自动地进入到这里

00:18:50.097 --> 00:18:53.734 align:middle
当你点击它的时候
它就会将你带到屏幕的右手侧

00:18:55.903 --> 00:19:01.909 align:middle
能量计量器能将代码的能量影响可视化

00:18:55.903 --> 00:19:01.909 align:middle
能量计量器能将代码的能量影响可视化

00:19:02.342 --> 00:19:05.612 align:middle
瞬间的和实例的平均的
能量影响也可以实现

00:19:06.713 --> 00:19:13.353 align:middle
因此首先是你的代码瞬间的能量影响
可以在那里的场计量器中看到

00:19:17.691 --> 00:19:21.128 align:middle
在这个图表中有三个不同的区域

00:19:21.795 --> 00:19:24.631 align:middle
在里程表中 最下面的一个
当指针指向一个绿色区域

00:19:25.065 --> 00:19:28.035 align:middle
它表明你的代码的能量影响
实际上是合理的

00:19:28.869 --> 00:19:32.272 align:middle
祝贺你
你是iOS生态系统的好公民

00:19:33.140 --> 00:19:34.408 align:middle
但是我仍然要建议你

00:19:34.641 --> 00:19:39.079 align:middle
去看看这些新的工具
看看你如何能使你的客户更加快乐

00:19:40.280 --> 00:19:43.317 align:middle
当指针向上移动时
它就进入了黄色区域

00:19:44.451 --> 00:19:47.521 align:middle
在黄色区域中
你的代码的能量影响是很大的

00:19:48.255 --> 00:19:51.058 align:middle
很有可能你没有仔细对待它

00:19:51.892 --> 00:19:55.729 align:middle
在电池使用用户界面中
你的应用程序会显示很高能量消耗

00:19:56.430 --> 00:20:02.402 align:middle
因此请使用新的能量调试工具来
看看如何提高你的代码的能量效率

00:19:56.430 --> 00:20:02.402 align:middle
因此请使用新的能量调试工具来
看看如何提高你的代码的能量效率

00:20:03.403 --> 00:20:07.574 align:middle
但是如果指针在继续向上移动
你进入了红色区域

00:20:08.308 --> 00:20:13.080 align:middle
红色区域表示
代码的能量影响是很大的

00:20:13.947 --> 00:20:17.017 align:middle
它意味着只要稍微使用你的应用程序

00:20:17.985 --> 00:20:22.155 align:middle
用户会很明显地感到
设备上的电池有明显地下降

00:20:22.756 --> 00:20:25.259 align:middle
所以请使用新的工具

00:20:25.592 --> 00:20:26.493 align:middle
请使用新的工具！

00:20:28.061 --> 00:20:32.299 align:middle
对不起 我表示道歉
我那样不太好 我总是抗议

00:20:32.766 --> 00:20:34.735 align:middle
那些不认真对待电池寿命的人

00:20:35.502 --> 00:20:37.671 align:middle
我向你承诺 我是个非常不错的人

00:20:37.738 --> 00:20:40.407 align:middle
请来今天下午的最后一个讲座
我们来谈谈

00:20:41.275 --> 00:20:42.109 align:middle
好么？

00:20:45.379 --> 00:20:48.482 align:middle
但是速度计能向你提供

00:20:48.549 --> 00:20:52.886 align:middle
应用程序的瞬间能量影响的整个信息

00:20:53.620 --> 00:20:55.122 align:middle
如果你想看到更多的分解信息

00:20:56.890 --> 00:20:59.459 align:middle
你应该看这儿

00:21:00.460 --> 00:21:01.395 align:middle
能量影响分段

00:21:02.396 --> 00:21:05.666 align:middle
这个图表每秒钟就要刷新一次

00:21:06.867 --> 00:21:10.370 align:middle
如果你的应用程序给CPU

00:21:10.871 --> 00:21:12.940 align:middle
定位或连网引入了任何的工作负载

00:21:13.407 --> 00:21:19.346 align:middle
你就会看到一个方块
显示在对应的时隙中的顶部的三行中

00:21:20.581 --> 00:21:22.616 align:middle
正如前面的讲座中所提到的

00:21:23.150 --> 00:21:26.653 align:middle
你的应用程序不只是
在前台能够消耗掉大量的功率

00:21:26.920 --> 00:21:28.255 align:middle
在后台也一样

00:21:28.956 --> 00:21:32.092 align:middle
因此基于此次观察
我们有了第四条有关后台规则

00:21:33.026 --> 00:21:36.330 align:middle
当你的应用程序呆在后台不离开

00:21:37.064 --> 00:21:40.334 align:middle
你就会看到移动的方块显示在第四行上

00:21:41.368 --> 00:21:44.204 align:middle
在这个图表的上面
你就会看到一系列的彩色条

00:21:46.607 --> 00:21:47.975 align:middle
它们就像是这个

00:21:49.142 --> 00:21:49.977 align:middle
有两种颜色

00:21:50.777 --> 00:21:53.947 align:middle
红色表示开销

00:21:54.481 --> 00:22:00.521 align:middle
用提供的系统资源如射频模块
来进行你的应用程序的工作的能量

00:21:54.481 --> 00:22:00.521 align:middle
用提供的系统资源如射频模块
来进行你的应用程序的工作的能量

00:22:01.121 --> 00:22:05.359 align:middle
它也与早期的讲座中
硬件的固定成本相対映

00:22:07.728 --> 00:22:08.562 align:middle
对于蓝条

00:22:08.929 --> 00:22:14.401 align:middle
它表示由你的应用程序引入
用来服务工作负荷的能量

00:22:16.436 --> 00:22:19.873 align:middle
除了瞬间信息
我们还提供平均信息

00:22:20.140 --> 00:22:24.912 align:middle
例如像这个 百分率的平均开销

00:22:27.381 --> 00:22:30.017 align:middle
这个家伙向你展示了平均的能量影响

00:22:31.985 --> 00:22:36.356 align:middle
在底部 你会看到一系列有关图标

00:22:36.423 --> 00:22:39.626 align:middle
CPU、 定位、连网和后台的说明

00:22:40.027 --> 00:22:43.096 align:middle
它还提供一些你如何优化它们的建议

00:22:44.431 --> 00:22:45.532 align:middle
但是请记住

00:22:46.166 --> 00:22:48.368 align:middle
iOS能量计量器的设计是为了

00:22:49.169 --> 00:22:53.841 align:middle
使你迅速高层次地了解代码的能量影响

00:22:54.708 --> 00:22:57.644 align:middle
如果你想要更详细的信息 更加分解

00:22:58.212 --> 00:23:00.047 align:middle
那么请在这个按钮上点击

00:22:58.212 --> 00:23:00.047 align:middle
那么请在这个按钮上点击

00:23:01.014 --> 00:23:05.752 align:middle
在你点击这个按钮后
它就会将你弹到对应的工具中

00:23:05.953 --> 00:23:10.057 align:middle
为你的应用程序提供分解的能量信息

00:23:11.391 --> 00:23:12.693 align:middle
这是iOS能量计量器

00:23:13.227 --> 00:23:17.164 align:middle
让我简单地向你介绍工具

00:23:18.398 --> 00:23:20.367 align:middle
工具
你们很多人都使用过它们

00:23:20.834 --> 00:23:21.902 align:middle
它看起来很相似

00:23:22.236 --> 00:23:26.139 align:middle
例如 你看这个在屏幕上的是定位工具

00:23:27.040 --> 00:23:27.875 align:middle
我们如何开始

00:23:29.476 --> 00:23:35.382 align:middle
我们以触发这个按钮来开始
记录它然后停止

00:23:37.184 --> 00:23:41.421 align:middle
在你记录后
你将会看到像这样的系统活动

00:23:43.190 --> 00:23:48.629 align:middle
你就会明白为什么
你看到这样的活动性

00:23:48.829 --> 00:23:53.534 align:middle
例如在这里你会看到定位服务
它正在努力请求定位

00:23:54.902 --> 00:23:57.070 align:middle
如果你想要更多 更详细的信息

00:23:58.138 --> 00:24:00.140 align:middle
到这儿 扩展细节

00:23:58.138 --> 00:24:00.140 align:middle
到这儿 扩展细节

00:24:00.707 --> 00:24:02.576 align:middle
然后你将使用这个家伙

00:24:04.711 --> 00:24:05.812 align:middle
代码堆栈

00:24:07.814 --> 00:24:10.984 align:middle
这就是对工具的介绍

00:24:11.084 --> 00:24:14.087 align:middle
接下来让我来简单地说下演示程序

00:24:16.456 --> 00:24:18.825 align:middle
屏幕上你将会看到
我们的演示程序的屏幕截图

00:24:19.026 --> 00:24:20.194 align:middle
我们管它叫能量兄弟

00:24:21.094 --> 00:24:23.230 align:middle
因此作为一名iOS能量软件工程师

00:24:23.363 --> 00:24:27.801 align:middle
我迫切地想知道是否
我能够在每个地方提高我的能量效率

00:24:28.101 --> 00:24:30.637 align:middle
不只是我的电话
而且是我的日常生活

00:24:31.605 --> 00:24:33.640 align:middle
能量兄弟可以很好地满足我的需求

00:24:33.974 --> 00:24:35.342 align:middle
例如
我可以用它拍摄一张图片

00:24:36.176 --> 00:24:41.982 align:middle
它会从我拍摄的图片中
提取能量计的信息

00:24:42.850 --> 00:24:45.152 align:middle
它会询问我的设备的定位

00:24:46.420 --> 00:24:48.755 align:middle
根据我的定位获取气象信息

00:24:49.489 --> 00:24:53.527 align:middle
将气象信息与我的使用相关联
显示在屏幕上

00:24:55.128 --> 00:24:57.931 align:middle
结构是这样的
有个集中数据管理器

00:24:59.700 --> 00:25:04.505 align:middle
如果我从那儿导入一张图
它就尝试着对它进行采集

00:24:59.700 --> 00:25:04.505 align:middle
如果我从那儿导入一张图
它就尝试着对它进行采集

00:25:05.572 --> 00:25:06.840 align:middle
并且基于定位

00:25:07.908 --> 00:25:14.047 align:middle
它会尝试着寻找一个连网服务
来根据我的定位获得天气信息

00:25:15.048 --> 00:25:20.020 align:middle
然后数据管理器会将这个信息关联
作为一个曲线显示在屏幕上

00:25:21.588 --> 00:25:25.225 align:middle
然后我们试着
给它一张图片看一下这个新工具

00:25:25.592 --> 00:25:29.696 align:middle
是如何帮助我们识别和提高
能量兄弟的能量效率的

00:25:31.965 --> 00:25:34.768 align:middle
在左侧的屏幕上
你将会看到Xcode

00:25:35.235 --> 00:25:37.905 align:middle
右侧是我的测试设备的屏幕截图

00:25:38.705 --> 00:25:42.910 align:middle
好 让我们通过打开项目文件
来启动能量兄弟

00:25:44.511 --> 00:25:47.247 align:middle
它目前正在做的是
在我点击了这个圆形按钮后

00:25:48.182 --> 00:25:53.120 align:middle
它就尝试着构建 发送二进制文件

00:25:53.287 --> 00:25:54.121 align:middle
并为我启动它

00:25:54.855 --> 00:25:56.823 align:middle
一旦它被启动，我们就会看到这个

00:25:57.424 --> 00:25:58.258 align:middle
它在这儿

00:25:58.759 --> 00:26:01.795 align:middle
让我们来调试这里的导航器

00:25:58.759 --> 00:26:01.795 align:middle
让我们来调试这里的导航器

00:26:04.198 --> 00:26:05.332 align:middle
能量影响就在这儿

00:26:05.632 --> 00:26:06.567 align:middle
我们继续

00:26:09.803 --> 00:26:12.005 align:middle
我们最想做的就是

00:26:14.908 --> 00:26:16.977 align:middle
看看这里是否有活动的方块

00:26:17.044 --> 00:26:19.112 align:middle
因为我并没有在用户界面做任何事情

00:26:20.180 --> 00:26:23.116 align:middle
因此看起来没有什么活动的方块

00:26:23.550 --> 00:26:24.384 align:middle
这是个好的现象

00:26:24.618 --> 00:26:28.188 align:middle
因为在应用程序空闲的时候
是不应该有过多的事情发生

00:26:28.522 --> 00:26:29.356 align:middle
这样很好

00:26:29.957 --> 00:26:34.027 align:middle
让我点击“导入图片”导入一张图片

00:26:34.962 --> 00:26:36.897 align:middle
从我的相册中选择一张图片

00:26:38.098 --> 00:26:41.134 align:middle
它将试着提取信息
而我将设置采集

00:26:42.336 --> 00:26:46.540 align:middle
好了 我看到许多的活动出现了

00:26:47.541 --> 00:26:49.877 align:middle
包括CPU 连网和定位

00:26:50.844 --> 00:26:53.347 align:middle
但是从它们当中我立即注意到一件事

00:26:54.047 --> 00:26:56.016 align:middle
那就是定位一直都在进行中

00:26:56.550 --> 00:26:58.085 align:middle
这可不合情理

00:26:58.552 --> 00:27:03.423 align:middle
因为能量兄弟可不是那种
跟踪你跑步锻炼的应用程序

00:26:58.552 --> 00:27:03.423 align:middle
因为能量兄弟可不是那种
跟踪你跑步锻炼的应用程序

00:27:04.291 --> 00:27:07.561 align:middle
那么我为什么需要持续
监控我的设备的定位呢

00:27:07.861 --> 00:27:08.695 align:middle
这太不合理了

00:27:09.429 --> 00:27:13.166 align:middle
因此来看看定位工具将会告诉我们什么

00:27:13.233 --> 00:27:16.537 align:middle
以及我们如何来识别代码行
来改进这种情况

00:27:17.838 --> 00:27:21.875 align:middle
接下来我将要点击定位工具

00:27:22.643 --> 00:27:24.378 align:middle
我说是重启

00:27:25.345 --> 00:27:30.050 align:middle
然后你试着用这个工具
为我启动这个应用程序

00:27:35.923 --> 00:27:38.692 align:middle
好了
让我来重新再次导入图片

00:27:42.062 --> 00:27:43.197 align:middle
设置采集

00:27:43.830 --> 00:27:44.665 align:middle
继续

00:27:45.832 --> 00:27:48.202 align:middle
好了
在屏幕上你可以看到这个

00:27:49.069 --> 00:27:50.504 align:middle
这是定位活动率

00:27:50.971 --> 00:27:52.906 align:middle
它不停地在进行 没有停止

00:27:54.341 --> 00:27:55.175 align:middle
但是它在哪儿

00:27:55.542 --> 00:27:56.777 align:middle
我们在哪儿导入的

00:27:57.678 --> 00:27:59.246 align:middle
看这个

00:28:00.380 --> 00:28:01.815 align:middle
进入到扩展细节

00:28:04.451 --> 00:28:09.756 align:middle
就是这部分
请求定位

00:28:10.123 --> 00:28:12.025 align:middle
那是我们如何请求定位服务

00:28:13.927 --> 00:28:15.195 align:middle
让我们停在这儿

00:28:17.431 --> 00:28:19.399 align:middle
回到Xcode

00:28:21.502 --> 00:28:25.572 align:middle
查找请求定位

00:28:26.473 --> 00:28:27.941 align:middle
好了
它已经在这儿了

00:28:29.877 --> 00:28:31.478 align:middle
那么请求想要做什么呢

00:28:32.880 --> 00:28:36.049 align:middle
首先你想要设置确定视图控制器

00:28:40.487 --> 00:28:44.525 align:middle
在这一片代码中
你想要建立创建一个定位管理器

00:28:45.359 --> 00:28:48.228 align:middle
然后你就要调用起始更新定位

00:28:48.996 --> 00:28:50.297 align:middle
在这一行之后

00:28:50.631 --> 00:28:56.703 align:middle
所发生的是定位服务通过那的一个回调

00:28:57.004 --> 00:28:59.606 align:middle
来周期性地向我们推送位置更新

00:29:02.743 --> 00:29:04.845 align:middle
那么在回调中
让我们看看它做了些什么

00:29:05.846 --> 00:29:10.584 align:middle
首要的事情是你想要看
这里是否有更新的任何东西

00:29:11.018 --> 00:29:14.087 align:middle
如果它是零那是无效的
我们忽视它 返回

00:29:15.355 --> 00:29:16.623 align:middle
然后我们将它保存

00:29:17.024 --> 00:29:22.763 align:middle
我们说“是否定位是水平精度是实际
符合我们的标准和期望”

00:29:22.930 --> 00:29:24.264 align:middle
如果没有
我们返回

00:29:25.399 --> 00:29:26.233 align:middle
如果有

00:29:26.300 --> 00:29:30.037 align:middle
那么我们会试着处理
确定视图控制器内部的定位

00:29:30.737 --> 00:29:31.839 align:middle
然后返回

00:29:32.706 --> 00:29:36.143 align:middle
不断地重复这种回调路径

00:29:36.510 --> 00:29:39.546 align:middle
每当我们从定位服务中
接收到一个回调就这样

00:29:40.247 --> 00:29:41.248 align:middle
推送看起来并不好

00:29:41.748 --> 00:29:42.850 align:middle
那么我们应该怎么做呢？

00:29:43.183 --> 00:29:47.588 align:middle
我们应该做的就是当我们获得了
一个数值时就停止它

00:29:50.691 --> 00:29:52.259 align:middle
就像这一行

00:29:53.460 --> 00:29:58.599 align:middle
我们说当我们获得了一个定位数值更新
我们就将它停止

00:30:00.234 --> 00:30:02.970 align:middle
让我们来看看
再次启动

00:30:03.303 --> 00:30:05.205 align:middle
看看能量计量器将会告诉我们什么

00:30:05.672 --> 00:30:11.111 align:middle
我希望看到的是在我首次接收到
一个成功的定位更新后

00:30:11.178 --> 00:30:14.915 align:middle
我应该将定位停止
并且定位服务不应该永远在进行

00:30:16.817 --> 00:30:18.519 align:middle
让我们等待将它启动

00:30:24.625 --> 00:30:25.459 align:middle
嗯

00:30:27.194 --> 00:30:30.063 align:middle
好 进入到iOS能量计量器

00:30:32.432 --> 00:30:34.201 align:middle
让我再次试着导入一张图片

00:30:35.736 --> 00:30:37.738 align:middle
从图库中选择一张图片

00:30:38.205 --> 00:30:39.139 align:middle
设置采集

00:30:40.841 --> 00:30:45.212 align:middle
好了 定位
一秒 两秒 三秒 四秒 它不见了

00:30:46.547 --> 00:30:49.950 align:middle
只是一行代码就起到了立竿见影的效果

00:30:50.984 --> 00:30:52.986 align:middle
你可以仔细思考下这个场景

00:30:53.287 --> 00:30:56.056 align:middle
所以如果这个应用程序
已经打开了很长时间

00:30:56.823 --> 00:31:00.160 align:middle
想象一下通过修改一行代码
你可以节约多少能量

00:30:56.823 --> 00:31:00.160 align:middle
想象一下通过修改一行代码
你可以节约多少能量

00:31:00.794 --> 00:31:01.695 align:middle
真是令人惊叹

00:31:02.763 --> 00:31:05.999 align:middle
让我们多尝试几次能量兄弟

00:31:06.066 --> 00:31:09.236 align:middle
看看当我们导入另一个
下次会发生什么

00:31:10.671 --> 00:31:12.806 align:middle
好了 我们导入了另一个

00:31:14.241 --> 00:31:17.477 align:middle
我看到定位出现了四秒

00:31:18.245 --> 00:31:19.112 align:middle
但是这次

00:31:20.113 --> 00:31:23.483 align:middle
我注意的大事件是连网服务

00:31:24.718 --> 00:31:25.752 align:middle
这看起来不太好

00:31:26.186 --> 00:31:31.191 align:middle
能量兄弟想要发现连网服务的原因是
它想要获得天气信息

00:31:31.692 --> 00:31:34.962 align:middle
但是我两分钟之前刚查询过

00:31:35.762 --> 00:31:41.935 align:middle
所以天气不会在两分钟内
甚至是一个小时内有很大变化

00:31:42.002 --> 00:31:44.204 align:middle
我可以说天气也不会有多大变化

00:31:44.738 --> 00:31:47.341 align:middle
我们想重新连网的目的是什么

00:31:47.674 --> 00:31:50.911 align:middle
尽管我们早在两分钟之前已经有过请求

00:31:52.045 --> 00:31:55.115 align:middle
因此让我们直接到代码
看看我们如何来修复这个问题

00:31:56.783 --> 00:32:02.256 align:middle
我们实际上请求定位的地方
就在天气文件的内部

00:31:56.783 --> 00:32:02.256 align:middle
我们实际上请求定位的地方
就在天气文件的内部

00:32:02.789 --> 00:32:05.926 align:middle
有个函数叫做获取如果失踪

00:32:06.326 --> 00:32:09.830 align:middle
让我们来看看它在第一部分做些什么

00:32:09.897 --> 00:32:11.298 align:middle
我们尝试着设置一些参数

00:32:11.365 --> 00:32:13.500 align:middle
如日期 基于查询的URL

00:32:13.800 --> 00:32:18.438 align:middle
基于设备定位的URL以及当前日期

00:32:19.339 --> 00:32:22.242 align:middle
以及我是否在今天之内进行过这种查询

00:32:23.110 --> 00:32:26.780 align:middle
你将为定位坐标保留原点坐标

00:32:26.847 --> 00:32:32.452 align:middle
你将要设置一个完全是
一个小时的秒的数目的常数

00:32:33.353 --> 00:32:35.522 align:middle
所以我们应该首先尝试去做的是

00:32:35.956 --> 00:32:37.791 align:middle
如果我们今天已经查询过了

00:32:38.859 --> 00:32:42.396 align:middle
并且从两分钟前
我们最后一次查询起

00:32:42.663 --> 00:32:44.932 align:middle
数据管理器已经提取了天气

00:32:45.499 --> 00:32:46.667 align:middle
那么我们说我们就返回

00:32:49.102 --> 00:32:52.039 align:middle
下来是如果我们今天没有做

00:32:53.040 --> 00:32:55.742 align:middle
并且数据管理器已经提取了天气

00:32:55.976 --> 00:32:56.810 align:middle
那我们还是返回

00:32:58.445 --> 00:33:02.549 align:middle
如果这两种情况都不满足

00:32:58.445 --> 00:33:02.549 align:middle
如果这两种情况都不满足

00:33:03.050 --> 00:33:05.352 align:middle
那么我们就尝试着建立一个

00:33:07.154 --> 00:33:11.124 align:middle
基于定位 日期的任务
我们将在这里下载它

00:33:12.993 --> 00:33:14.161 align:middle
那有什么错么

00:33:15.128 --> 00:33:18.665 align:middle
它出错的原因实际上在这儿

00:33:20.234 --> 00:33:21.068 align:middle
计量器内部

00:33:21.902 --> 00:33:27.140 align:middle
因此我们将添加像这样的另外一种情况

00:33:27.841 --> 00:33:29.877 align:middle
就是说如果我今天已经完成的了这个

00:33:29.943 --> 00:33:33.313 align:middle
并且先前的提取在一个小时之内

00:33:33.580 --> 00:33:34.781 align:middle
那我就不再做它

00:33:36.149 --> 00:33:38.318 align:middle
让我们来再次启动它

00:33:38.585 --> 00:33:42.856 align:middle
来看看如何在能量计量器的内部
看到改进的地方

00:33:43.390 --> 00:33:44.958 align:middle
我们希望看到是这样的

00:33:45.292 --> 00:33:48.328 align:middle
因为我们在如五分钟之前就完成了提取

00:33:49.429 --> 00:33:52.366 align:middle
当我们在下个小时内
再次导入一张照片的时候

00:33:52.432 --> 00:33:54.635 align:middle
就不应该每次都看到任何的连网

00:33:55.135 --> 00:33:58.105 align:middle
让我们来看看能量计量器
是否同意我的理论

00:34:01.341 --> 00:34:02.176 align:middle
好

00:34:03.644 --> 00:34:04.478 align:middle
开始

00:34:07.114 --> 00:34:08.748 align:middle
我尝试导入一张图片

00:34:10.016 --> 00:34:12.853 align:middle
从相册中选一张图片
设置采集

00:34:18.391 --> 00:34:19.493 align:middle
我看到了定位

00:34:19.860 --> 00:34:21.360 align:middle
它像以前呆了四秒钟

00:34:22.161 --> 00:34:24.364 align:middle
但是神奇的是
所有的连网都不见了

00:34:24.531 --> 00:34:27.333 align:middle
这正是我们所希望的

00:34:27.935 --> 00:34:32.172 align:middle
所以这是提高我们的能量兄弟的
能量效率的又一种好办法

00:34:33.674 --> 00:34:35.108 align:middle
除了前台

00:34:35.708 --> 00:34:40.047 align:middle
能量兄弟还可以在后台
消耗大量的电池

00:34:40.480 --> 00:34:47.054 align:middle
让我们看看当能量兄弟实际上在后台时
能量计量器能告诉我们什么

00:34:47.821 --> 00:34:51.091 align:middle
我们通过点击返回主页按钮
将能量兄弟放入后台

00:34:55.128 --> 00:34:59.499 align:middle
我们看到的是这儿

00:35:02.436 --> 00:35:07.307 align:middle
我们看到许多能量兄弟的后台活动

00:35:08.976 --> 00:35:15.449 align:middle
那就意味着只要能量兄弟在后台

00:35:15.516 --> 00:35:17.251 align:middle
设备就不能休眠

00:35:17.684 --> 00:35:21.421 align:middle
这样就会消耗大量的能量
因为保持设备唤醒状态要有固定成本

00:35:22.723 --> 00:35:26.727 align:middle
这并不合理
因为能量兄弟不需要在后台做任何事情

00:35:27.728 --> 00:35:29.129 align:middle
这里出什么错了吗？

00:35:31.832 --> 00:35:37.538 align:middle
当我们真的要转到后台的时候
让我们进入到回调

00:35:39.139 --> 00:35:39.973 align:middle
这就是代码

00:35:41.408 --> 00:35:42.242 align:middle
它做些什么

00:35:43.110 --> 00:35:46.480 align:middle
它做以下事情
你在设法设置后台任务标示符

00:35:47.748 --> 00:35:50.617 align:middle
它们所做的就是为数据管理器存档

00:35:50.817 --> 00:35:53.620 align:middle
就是将所有更改都存入数据管理器中

00:35:54.254 --> 00:35:56.056 align:middle
它们会说等待输入

00:35:56.356 --> 00:35:59.092 align:middle
如果真的要完成它
我们就会在后台任务中编写代码

00:36:01.094 --> 00:36:01.962 align:middle
听起来合理吗？

00:36:02.462 --> 00:36:03.997 align:middle
不合理
为什么不合理？

00:36:04.765 --> 00:36:07.367 align:middle
因为我们的应用程序一直会在后台
对不对？

00:36:07.601 --> 00:36:11.805 align:middle
那么用户如何能够真的通过
用户界面与能量兄弟来进行互动呢

00:36:12.573 --> 00:36:14.107 align:middle
所以根本就没有输入

00:36:14.441 --> 00:36:15.642 align:middle
而我们一直在等

00:36:16.810 --> 00:36:17.878 align:middle
这看起来可不太好

00:36:18.545 --> 00:36:21.882 align:middle
我们应该做的就是我们不应该等

00:36:27.554 --> 00:36:28.488 align:middle
相反的

00:36:30.524 --> 00:36:31.558 align:middle
我们应该做这样的事情

00:36:32.292 --> 00:36:34.661 align:middle
在我们将数据存档到数据管理器后

00:36:35.495 --> 00:36:40.300 align:middle
我们将立即调用后台任务
使后台任务标示符无效

00:36:41.802 --> 00:36:48.041 align:middle
让我们再次启动能量兄弟
来看看能量计量器会告诉我们什么

00:36:49.042 --> 00:36:50.210 align:middle
我们希望的是这样

00:36:50.744 --> 00:36:54.648 align:middle
在我们进行数据管理器中的所有更改后

00:36:54.882 --> 00:36:58.986 align:middle
它就会直接退出它本身
释放控制给助手

00:36:59.119 --> 00:37:01.255 align:middle
它将不会像以前那样一直呆在后台中

00:36:59.119 --> 00:37:01.255 align:middle
它将不会像以前那样一直呆在后台中

00:37:07.895 --> 00:37:10.964 align:middle
好了 进入能量计量器

00:37:13.267 --> 00:37:14.935 align:middle
将能量兄弟放入后台中

00:37:16.036 --> 00:37:19.273 align:middle
我们现在在后台
一秒 两秒 它消失了

00:37:21.308 --> 00:37:22.442 align:middle
这次我们又赢了

00:37:23.143 --> 00:37:28.081 align:middle
所以要记住
我刚才做的一点点现场修复

00:37:28.715 --> 00:37:30.517 align:middle
你就会看到有显著的改进

00:37:30.984 --> 00:37:32.819 align:middle
下来Abhinav将继续向你们介绍

00:37:32.886 --> 00:37:36.323 align:middle
因为我们持续几个小时
甚至一天都是在讲

00:37:36.723 --> 00:37:38.759 align:middle
进行重大的电池改进的内容

00:37:39.459 --> 00:37:42.729 align:middle
我的演示就到这里
下来还是Abhinav

00:37:47.768 --> 00:37:48.869 align:middle
谢谢 Pai-Han

00:37:51.772 --> 00:37:55.375 align:middle
这是个很不错的演示 回到幻灯片看看
演示都发生了什么并做个总结

00:37:55.876 --> 00:38:01.181 align:middle
我们开始使用能量兄弟
无效率的代码我们像用户那样运行

00:37:55.876 --> 00:38:01.181 align:middle
我们开始使用能量兄弟
无效率的代码我们像用户那样运行

00:38:01.248 --> 00:38:02.349 align:middle
看看都发生了什么

00:38:02.416 --> 00:38:03.650 align:middle
这所有的都亮了

00:38:03.851 --> 00:38:06.720 align:middle
糟糕 糟糕 真糟糕
能量消耗太大了

00:38:07.120 --> 00:38:11.258 align:middle
你的应用程序在电池用户界面上
能量消耗很高

00:38:11.658 --> 00:38:12.793 align:middle
我们如何修复它？

00:38:12.860 --> 00:38:16.763 align:middle
我们来到定位 我们说
“嗨 定位被启动了 那么停止”

00:38:17.197 --> 00:38:19.700 align:middle
改了一行代码
定位停止了

00:38:20.167 --> 00:38:22.236 align:middle
让我们看看
之前和之后它看起来是什么样子

00:38:23.470 --> 00:38:28.909 align:middle
如果你聚焦定位时间轴
你就会看到定位一直在进行着

00:38:29.409 --> 00:38:34.381 align:middle
后来只是在每当有关一张图片导入
有实际请求的时候定位才进行

00:38:35.816 --> 00:38:36.750 align:middle
让我们继续说连网

00:38:36.984 --> 00:38:42.422 align:middle
之前每张新图片导入
我们就获得天气信息

00:38:42.623 --> 00:38:45.392 align:middle
那可不好
我们想要消减传输

00:38:45.459 --> 00:38:46.727 align:middle
我们放入了一个很简单的块

00:38:46.793 --> 00:38:49.930 align:middle
嗨 如果这是最近调用的 不要管了

00:38:49.997 --> 00:38:51.465 align:middle
我们不再需要新的信息

00:38:52.266 --> 00:38:54.701 align:middle
那对能量计量器有什么影响

00:38:55.002 --> 00:38:57.437 align:middle
还是两张图片
之前和之后

00:38:57.738 --> 00:38:59.573 align:middle
如果你聚焦连网部分

00:38:59.873 --> 00:39:01.808 align:middle
连网在很长时间内都是高亮的

00:38:59.873 --> 00:39:01.808 align:middle
连网在很长时间内都是高亮的

00:39:02.176 --> 00:39:06.313 align:middle
顶部的红条一直在高亮着
说明连网硬件消耗很大

00:39:06.747 --> 00:39:09.383 align:middle
在应用程序使用期间
消耗了很多的能量

00:39:09.850 --> 00:39:11.885 align:middle
在底部
我们只做了一次连网

00:39:12.786 --> 00:39:15.522 align:middle
那之后
最近刚调用过的就不再做了

00:39:17.658 --> 00:39:19.960 align:middle
后台对话怎么样

00:39:20.093 --> 00:39:23.530 align:middle
当我们进入后台的时候
我们将我们的状态存入数据库

00:39:23.864 --> 00:39:25.966 align:middle
然后说“嗨 让我们等待用户输入”

00:39:26.333 --> 00:39:29.203 align:middle
不是等待用户输入的好地方
目前用户可能在输入任何东西

00:39:30.003 --> 00:39:31.271 align:middle
非常简单的修复

00:39:31.471 --> 00:39:33.073 align:middle
我们说不要等待用户输入了

00:39:33.373 --> 00:39:34.908 align:middle
只需要调用任务完成处理器

00:39:35.309 --> 00:39:38.712 align:middle
告诉系统“嗨 我完成了 悬置我吧
让系统休眠吧”

00:39:39.513 --> 00:39:42.216 align:middle
之前和之后能量计量器
看起来是什么样子呢

00:39:42.282 --> 00:39:44.051 align:middle
让我们集中于后台行

00:39:44.618 --> 00:39:47.421 align:middle
顶部的后台一直在运行

00:39:47.888 --> 00:39:51.258 align:middle
在底部
一旦我们完成了数据库的存档

00:39:51.525 --> 00:39:54.228 align:middle
后台的工作就完成了
我们被悬置了

00:39:54.995 --> 00:39:55.829 align:middle
太神奇了

00:39:56.697 --> 00:39:59.700 align:middle
让我们来看看之前和之后的整个的代码

00:40:00.300 --> 00:40:02.302 align:middle
之前
我们看到一切东西都在发亮

00:40:02.769 --> 00:40:05.405 align:middle
如果这发生在你的程序上
这就是个问题

00:40:06.073 --> 00:40:12.045 align:middle
之后我们进行同样的使用
给用户提供同样的效能和体验

00:40:12.412 --> 00:40:16.950 align:middle
但是硬件上的能量负载却非常非常小

00:40:18.852 --> 00:40:22.289 align:middle
正如我们所承诺的
这个幻灯片最重要的是在开始

00:40:22.422 --> 00:40:23.957 align:middle
如果你的应用程序是顶部的情况

00:40:24.291 --> 00:40:25.259 align:middle
请做些更改

00:40:25.325 --> 00:40:28.595 align:middle
你就会看到
你的程序出现在用户界面的底部

00:40:28.862 --> 00:40:31.899 align:middle
我们所做的就是拿了两个
新安装的iPhone 6

00:40:32.432 --> 00:40:34.268 align:middle
在其中的一个安装了无效率的代码

00:40:34.601 --> 00:40:37.237 align:middle
在第二个安装了经过修复的代码

00:40:37.771 --> 00:40:41.975 align:middle
让它们完成完全相同的工作量
同时也在运行着其它的应用程序

00:40:42.309 --> 00:40:46.713 align:middle
对能量兄弟和其它的应用而言
都是相同的负荷量

00:40:47.381 --> 00:40:53.487 align:middle
我们发现
修复代码要少消耗百分之五十的能量

00:40:54.188 --> 00:40:55.756 align:middle
包括显示能量

00:40:56.123 --> 00:40:57.991 align:middle
两个应用程序都是完全相同的

00:40:59.259 --> 00:41:02.462 align:middle
在右顶部你看到电池用户界面
百分之二十八

00:40:59.259 --> 00:41:02.462 align:middle
在右顶部你看到电池用户界面
百分之二十八

00:41:02.863 --> 00:41:06.033 align:middle
而优化过的代码下降很多

00:41:06.633 --> 00:41:08.402 align:middle
用户获得了完全相同的东西

00:41:10.971 --> 00:41:11.972 align:middle
对这个讲座做个总结

00:41:12.773 --> 00:41:17.711 align:middle
对于获得完美的用户体验
电池寿命确实很重要

00:41:18.278 --> 00:41:20.113 align:middle
设计应用程序时要记住三点

00:41:20.380 --> 00:41:21.582 align:middle
从来不做 尽量少做

00:41:22.382 --> 00:41:23.417 align:middle
更有效率地做

00:41:23.617 --> 00:41:24.484 align:middle
在良好的时间去做

00:41:26.019 --> 00:41:28.322 align:middle
后台应用考虑得更加周全

00:41:29.623 --> 00:41:31.291 align:middle
请尝试新的调试工具

00:41:31.525 --> 00:41:33.627 align:middle
我们有实验室
我现在就说的更加详细些

00:41:34.261 --> 00:41:35.762 align:middle
离开时拿份我们的能量指南

00:41:35.929 --> 00:41:39.299 align:middle
它包含有我们这次讲座
的所有信息甚至更多

00:41:40.300 --> 00:41:41.835 align:middle
将你们的应用程序带到能量实验室

00:41:43.570 --> 00:41:46.540 align:middle
有关你在何处可找到
能量指南的更多信息

00:41:48.275 --> 00:41:49.776 align:middle
请找这次讲座的技术支持联系

00:41:51.411 --> 00:41:53.413 align:middle
最后与这些讨论的相关讲座

00:41:53.614 --> 00:41:57.017 align:middle
主要是我们说过的一些概念
但是更加的详细

00:41:58.752 --> 00:41:59.887 align:middle
谢谢大家来参加讲座
