WEBVTT

00:00:20.387 --> 00:00:23.090 align:middle
构建App跟Researchkit

00:00:30.764 --> 00:00:31.598 align:middle
大家好！

00:00:31.798 --> 00:00:32.766 align:middle
我叫约翰·厄尔

00:00:32.833 --> 00:00:34.835 align:middle
是ResearchKit
团队的一名工程师

00:00:35.269 --> 00:00:37.004 align:middle
今天我要讲讲ResearchKit

00:00:37.337 --> 00:00:39.373 align:middle
以及如何促进App研究

00:00:40.841 --> 00:00:42.509 align:middle
今天 我的谈话内容由四个部分构成

00:00:43.477 --> 00:00:45.879 align:middle
首先要讲讲什么是
ResearchKit

00:00:46.880 --> 00:00:49.283 align:middle
然后再谈几个问题

00:00:49.516 --> 00:00:51.985 align:middle
几个影响App型研究设计的相关问题

00:00:53.153 --> 00:00:55.522 align:middle
虽然我的主旨是在阐述如何使用

00:00:55.822 --> 00:00:57.524 align:middle
ResearchKit构建App时

00:00:57.591 --> 00:00:59.893 align:middle
ResearchKit
在研究App的具体功能

00:01:01.495 --> 00:01:03.630 align:middle
最后 由于它是一个开放源码项目

00:01:04.197 --> 00:01:06.433 align:middle
我要讲讲大家该如何促成
ResearchKit

00:01:10.470 --> 00:01:11.305 align:middle
那我们就开始吧！

00:01:12.439 --> 00:01:14.007 align:middle
什么是ResearchKit？

00:01:14.441 --> 00:01:17.177 align:middle
简而言之它是一个开放源码工程

00:01:17.311 --> 00:01:18.612 align:middle
可以在GitHub上使用

00:01:19.546 --> 00:01:20.881 align:middle
但是如果延伸一下

00:01:21.281 --> 00:01:22.683 align:middle
我们首先需要了解一点动机

00:01:23.684 --> 00:01:26.486 align:middle
即使您以前从未参与过医学研究工作

00:01:27.321 --> 00:01:28.755 align:middle
但是类似工作您可能已经见过

00:01:29.122 --> 00:01:30.824 align:middle
无论是在大学还是在医院

00:01:32.092 --> 00:01:33.594 align:middle
如果您已经参与了一项研究工作

00:01:33.861 --> 00:01:36.263 align:middle
您可能会打电话和调查员碰头

00:01:36.630 --> 00:01:38.899 align:middle
别人给您解释具体工作及其风险和效益

00:01:39.900 --> 00:01:44.638 align:middle
然后您可能要回答
问题采集样本比以往更频繁

00:01:45.539 --> 00:01:47.474 align:middle
现在 这可是一个重量级模型

00:01:48.141 --> 00:01:50.410 align:middle
研究人员已经告诉我们它有三个问题

00:01:52.913 --> 00:01:55.115 align:middle
第一个问题是有限参与

00:01:57.885 --> 00:02:01.188 align:middle
在大学校园内贴传单只是将人员参与

00:01:57.885 --> 00:02:01.188 align:middle
在大学校园内贴传单只是将人员参与

00:02:01.588 --> 00:02:03.357 align:middle
局限在校园附近的居民

00:02:03.957 --> 00:02:07.694 align:middle
进行海量研究则
需要很多研究团队开展合作

00:02:08.362 --> 00:02:11.231 align:middle
这就意味着 如果开展研究
频率也不会太高

00:02:12.999 --> 00:02:16.003 align:middle
第二个问题是数据较主观也不常见

00:02:17.004 --> 00:02:19.606 align:middle
经常是通过调查每月收集一次数据

00:02:20.974 --> 00:02:21.975 align:middle
或者周期更长

00:02:22.576 --> 00:02:24.545 align:middle
这就影响了提出的问题

00:02:25.078 --> 00:02:26.079 align:middle
限制了数据质量

00:02:28.115 --> 00:02:30.150 align:middle
第三个问题是单向通信

00:02:30.951 --> 00:02:35.355 align:middle
您曾经参与的研究工作具体结果
您可能从未听说过除非您认识调查员

00:02:36.790 --> 00:02:38.358 align:middle
这就是我们认为App带来的好处

00:02:40.194 --> 00:02:42.229 align:middle
App Store经销
模式辐射范围很广

00:02:42.496 --> 00:02:45.065 align:middle
可以帮助研究人员接触更多研究对象

00:02:45.632 --> 00:02:48.168 align:middle
因此采用ResearchKit的
前五种研究App

00:02:48.635 --> 00:02:52.172 align:middle
注册参与者超过70,000人
在他们的研究领域中

00:02:52.372 --> 00:02:54.608 align:middle
已经开展了很多研究项目
这也是规模最大的一个

00:02:56.443 --> 00:02:58.912 align:middle
第二 App的数据可以持续流动

00:02:59.213 --> 00:03:02.115 align:middle
这与主观不常见的
人工收集数据形成鲜明对比

00:02:59.213 --> 00:03:02.115 align:middle
这与主观不常见的
人工收集数据形成鲜明对比

00:03:03.317 --> 00:03:05.853 align:middle
最后 App可以局部记录

00:03:05.919 --> 00:03:08.188 align:middle
每个参与者的情况以便向他们反馈

00:03:09.356 --> 00:03:11.425 align:middle
在症状管理方面的具体表现

00:03:12.492 --> 00:03:14.061 align:middle
并有助于保持他们的参与度

00:03:14.261 --> 00:03:15.796 align:middle
而且也不会增加调查人员的工作量

00:03:16.897 --> 00:03:18.932 align:middle
在Apple我们以前
希望为更多研究项目

00:03:18.999 --> 00:03:21.735 align:middle
让这一点成为现实这就是构建
ResearchKit的原因

00:03:22.669 --> 00:03:24.671 align:middle
ResearchKit是一种
开放源码框架

00:03:24.738 --> 00:03:25.973 align:middle
可以在GitHub上使用

00:03:27.107 --> 00:03:29.176 align:middle
使用它 创建研究App更容易

00:03:29.376 --> 00:03:30.477 align:middle
无论是商用App

00:03:30.844 --> 00:03:33.947 align:middle
还是纳入学术研究

00:03:35.282 --> 00:03:38.018 align:middle
现在iOS有了很棒的API

00:03:38.085 --> 00:03:39.520 align:middle
可以用来收集被动数据信息

00:03:39.820 --> 00:03:42.022 align:middle
比如HealthKit
和CoreMotion

00:03:43.190 --> 00:03:44.725 align:middle
但是要成功开展App研究

00:03:44.791 --> 00:03:46.994 align:middle
还有很多方面需要了解

00:03:48.295 --> 00:03:51.298 align:middle
我们希望在这些方面，
ResearchKit对您有所帮助

00:03:51.765 --> 00:03:54.001 align:middle
现在ResearchKit
有三个模块

00:03:55.302 --> 00:03:56.670 align:middle
第一个模块是调查

00:03:57.271 --> 00:03:59.206 align:middle
ResearchKit
提供标准UI模板

00:03:59.473 --> 00:04:02.176 align:middle
可以用来调查iPhone或iPad

00:03:59.473 --> 00:04:02.176 align:middle
可以用来调查iPhone或iPad

00:04:02.676 --> 00:04:05.012 align:middle
我们采用了最常见的健康研究测量工具

00:04:05.479 --> 00:04:08.215 align:middle
对它进行了测试
比如SF12或EQ5D

00:04:09.583 --> 00:04:11.752 align:middle
第二个模块是知情同意

00:04:12.953 --> 00:04:15.756 align:middle
在人体观察研究领域它是一项常规要求

00:04:16.557 --> 00:04:18.692 align:middle
为了让参与者充分了解研究细节

00:04:18.992 --> 00:04:21.562 align:middle
并在此情况下获得参与者的同意

00:04:22.896 --> 00:04:24.498 align:middle
每项研究工作的细节都存在差异

00:04:24.598 --> 00:04:26.500 align:middle
因此ResearchKit
会提供模板

00:04:26.867 --> 00:04:29.236 align:middle
在App过程中可以用来展示这种差异

00:04:31.972 --> 00:04:34.341 align:middle
ResearchKit
的第三个模块是现时任务

00:04:35.375 --> 00:04:37.477 align:middle
现时任务是一种半控测试项目

00:04:37.778 --> 00:04:39.980 align:middle
在此项目中参与者按步骤接受指令

00:04:40.180 --> 00:04:42.216 align:middle
通过装置上的传感器收集数据时

00:04:42.683 --> 00:04:44.117 align:middle
即可执行该任务

00:04:44.852 --> 00:04:46.687 align:middle
例如在这种步态与平衡任务中

00:04:47.554 --> 00:04:51.158 align:middle
我们在来回步行过程中将手机放入口袋

00:04:51.491 --> 00:04:55.596 align:middle
通过加速仪和陀罗仪
可以收集步态评估数据

00:04:56.830 --> 00:04:59.132 align:middle
因此我们了解了
ResearchKit三个方面

00:04:59.466 --> 00:05:03.136 align:middle
调查知情同意和现时任务

00:04:59.466 --> 00:05:03.136 align:middle
调查知情同意和现时任务

00:05:04.438 --> 00:05:06.173 align:middle
在发布ResearchKit同时

00:05:06.773 --> 00:05:10.244 align:middle
与我们合作的调查人员向App
Store 提供了他们自己的App

00:05:11.245 --> 00:05:14.114 align:middle
即使现在我们也在使用这些
Apps收集疾病相关数据

00:05:14.348 --> 00:05:17.618 align:middle
非常广泛比如帕金森病、糖尿病、

00:05:17.885 --> 00:05:20.454 align:middle
心血管疾病、哮喘和乳腺癌

00:05:21.622 --> 00:05:24.691 align:middle
我们已与上述合作机构
共同为这些App

00:05:24.925 --> 00:05:26.059 align:middle
以及这些机构

00:05:26.260 --> 00:05:28.495 align:middle
共享的核心共用库开放了源代码

00:05:30.731 --> 00:05:33.100 align:middle
因此如果需要快速启动
它就能帮助您开始App

00:05:33.433 --> 00:05:35.402 align:middle
那么App究竟具备哪些功能呢？

00:05:36.904 --> 00:05:39.306 align:middle
在适应阶段它们都采用了

00:05:39.373 --> 00:05:41.775 align:middle
ResearchKit的
知情同意模块

00:05:42.409 --> 00:05:44.611 align:middle
但是之后一旦注册参与者

00:05:45.579 --> 00:05:46.947 align:middle
它们会以几种方式采集数据

00:05:48.582 --> 00:05:50.551 align:middle
首先它们采用
ResearchKit的

00:05:51.118 --> 00:05:53.353 align:middle
调查模块和现时任务模块通过排程活动

00:05:53.654 --> 00:05:55.088 align:middle
采集更多主观测量结果

00:05:55.856 --> 00:05:58.492 align:middle
此外它们采用HealthKit
和CoreMotion

00:05:58.692 --> 00:06:02.062 align:middle
通过被动数据采集获得了客观度量值

00:05:58.692 --> 00:06:02.062 align:middle
通过被动数据采集获得了客观度量值

00:06:03.931 --> 00:06:07.901 align:middle
而且 通过加入一份仪表盘标签

00:06:08.368 --> 00:06:09.970 align:middle
解决了单向通信问题

00:06:10.170 --> 00:06:13.807 align:middle
因此参与人员可以查看和跟踪

00:06:14.308 --> 00:06:16.710 align:middle
源自调查结果的两种主观量度值

00:06:16.777 --> 00:06:19.513 align:middle
比如情绪以及源自
HealthKit的

00:06:19.847 --> 00:06:21.715 align:middle
客观度量值如重量参数

00:06:24.384 --> 00:06:27.120 align:middle
因此正是ResearchKit
和App在使用它

00:06:27.888 --> 00:06:29.723 align:middle
但是随着
ResearchKit的开发

00:06:29.790 --> 00:06:31.391 align:middle
我们对构建App型研究项目过程中

00:06:31.525 --> 00:06:34.228 align:middle
涉及的其它方面有了更好的了解

00:06:34.494 --> 00:06:36.029 align:middle
当时我们认为这些对共享至关重要

00:06:36.230 --> 00:06:38.732 align:middle
因此在这里我愿意
和大家一起分享我的一些心得

00:06:40.501 --> 00:06:42.636 align:middle
如果您是一名构建研究
App项目的工程师

00:06:43.237 --> 00:06:45.072 align:middle
可能在项目团队中并不只有您一人

00:06:45.839 --> 00:06:48.108 align:middle
还有很多事情需要其他成员去完成

00:06:48.609 --> 00:06:50.777 align:middle
这里我可以就此作一些简单介绍

00:06:52.479 --> 00:06:57.417 align:middle
也许最重要的就是联系
与您所在单位有关的道德委员会

00:06:57.618 --> 00:07:00.988 align:middle
或机构评审委员会

00:06:57.618 --> 00:07:00.988 align:middle
或机构评审委员会

00:07:01.455 --> 00:07:05.526 align:middle
以便就研究方案

00:07:05.859 --> 00:07:06.994 align:middle
通过某种形式的道德评审

00:07:08.595 --> 00:07:11.398 align:middle
为此您需要决定向该参与者

00:07:11.465 --> 00:07:13.400 align:middle
通报研究情况究竟会意味着什么

00:07:15.669 --> 00:07:17.504 align:middle
您会采用这种纸质形式

00:07:17.804 --> 00:07:19.940 align:middle
并且希望您能够对它进行压缩

00:07:20.274 --> 00:07:21.708 align:middle
最终适合移动App需要

00:07:22.042 --> 00:07:24.511 align:middle
在我们进入ResearchKit
知情同意模块时

00:07:24.578 --> 00:07:25.946 align:middle
我们会详细阐述

00:07:27.814 --> 00:07:32.586 align:middle
接下来 由于ResearchKit
不提供后台服务

00:07:32.886 --> 00:07:35.055 align:middle
您需要计划如何保持研究数据

00:07:35.422 --> 00:07:37.324 align:middle
因此可能需要您本人去调查

00:07:37.658 --> 00:07:39.526 align:middle
或与第三方服务提供商签订合同

00:07:40.627 --> 00:07:45.332 align:middle
任何一种方式您都需要为
数据安全和保密承担责任

00:07:47.968 --> 00:07:51.071 align:middle
最后您还需要策划如何共享研究数据

00:07:51.405 --> 00:07:53.807 align:middle
参与人员可能需要采用仪表盘标签

00:07:53.874 --> 00:07:57.311 align:middle
或其它方式而调查人员则

00:07:57.711 --> 00:08:00.914 align:middle
可能要求您去寻求各方知情同意

00:07:57.711 --> 00:08:00.914 align:middle
可能要求您去寻求各方知情同意

00:08:02.449 --> 00:08:04.184 align:middle
因此如您所见实际App架构之外

00:08:04.251 --> 00:08:05.652 align:middle
还有各种各样的问题

00:08:05.986 --> 00:08:07.955 align:middle
它们将对研究型App设计
产生一定影响

00:08:08.722 --> 00:08:10.190 align:middle
更多相关资源

00:08:10.657 --> 00:08:13.193 align:middle
请登录我们的网站
ResearchKit.org

00:08:13.493 --> 00:08:14.328 align:middle
并且还可参阅

00:08:14.428 --> 00:08:16.463 align:middle
我们的ResearchKit
用户邮寄清单

00:08:16.663 --> 00:08:18.232 align:middle
通过上述网站和清单

00:08:18.298 --> 00:08:20.100 align:middle
可以接触之前也顺利
完成任务的其他研究者

00:08:21.668 --> 00:08:22.903 align:middle
因此无需道别

00:08:22.970 --> 00:08:25.105 align:middle
接下来让我们谈谈使用
ResearchKit构建App

00:08:25.172 --> 00:08:27.207 align:middle
在研究过程中ResearchKit
究竟能够发挥什么作用？

00:08:30.177 --> 00:08:32.880 align:middle
如上所述
ResearchKit有三个模块

00:08:33.447 --> 00:08:35.849 align:middle
调查模块知情同意模块

00:08:36.850 --> 00:08:37.683 align:middle
和现时任务模块

00:08:37.751 --> 00:08:39.586 align:middle
ResearchKit
所有这些模块的

00:08:39.785 --> 00:08:40.921 align:middle
运行模式大致相同

00:08:44.057 --> 00:08:45.926 align:middle
要求用户执行的每项活动

00:08:46.260 --> 00:08:47.361 align:middle
被确定为一项任务

00:08:48.061 --> 00:08:50.364 align:middle
每项任务可以包含一个或几个步骤

00:08:52.032 --> 00:08:54.935 align:middle
为了执行一项任务
您希望就此向用户展示

00:08:55.269 --> 00:08:57.971 align:middle
为此将使用任务视图控制器

00:08:59.039 --> 00:09:02.309 align:middle
一个任务视图控制器就是
一个容器视图控制器

00:08:59.039 --> 00:09:02.309 align:middle
一个任务视图控制器就是
一个容器视图控制器

00:09:02.376 --> 00:09:06.680 align:middle
有点像导航控制器或标签条控制
器这在UI工具箱您可能比较熟悉

00:09:08.749 --> 00:09:12.352 align:middle
在展示任务视图控制器时

00:09:13.086 --> 00:09:14.922 align:middle
将进入该任务的第一步

00:09:15.422 --> 00:09:19.059 align:middle
然后在任务视图控制器内显示
它是一个视图控制器

00:09:19.126 --> 00:09:20.394 align:middle
可以显示该步骤的数据

00:09:21.995 --> 00:09:24.865 align:middle
这一步结束时任务视图控制器将

00:09:24.932 --> 00:09:26.767 align:middle
采集它输出的结果并对该任务所有步骤

00:09:26.834 --> 00:09:28.569 align:middle
输出的数据进行核对

00:09:29.903 --> 00:09:33.874 align:middle
最后当任务完成时
任务视图控制器将通知委托代表

00:09:34.875 --> 00:09:36.009 align:middle
您也会了解任务结果

00:09:37.044 --> 00:09:40.614 align:middle
关于已经通过的步骤
该任务结果将有一个相应步骤结果

00:09:40.948 --> 00:09:41.982 align:middle
如果超过一个步骤

00:09:42.282 --> 00:09:44.117 align:middle
相应会有若干步骤结果

00:09:45.919 --> 00:09:47.955 align:middle
这就是ResearchKit
内的对象模型

00:09:48.222 --> 00:09:51.625 align:middle
现在我们深入了解一下
其中一个核心对象

00:09:51.692 --> 00:09:53.460 align:middle
也就是上述步骤

00:09:54.294 --> 00:09:55.362 align:middle
下面我们看看各个步骤

00:10:00.334 --> 00:10:03.103 align:middle
在ResearchKit内
一个步骤实际对应的

00:10:03.170 --> 00:10:05.939 align:middle
是一项ResearchKit任务中

00:10:06.206 --> 00:10:07.341 align:middle
用于每个页面的基本模板

00:10:08.242 --> 00:10:10.177 align:middle
并且子类是一种步骤

00:10:10.310 --> 00:10:12.312 align:middle
刚好是一个抽象基类
对于ResearchKit不同模块

00:10:12.513 --> 00:10:14.381 align:middle
需要的每个不同步骤而言

00:10:14.448 --> 00:10:16.617 align:middle
可以用于每个不同类型

00:10:16.683 --> 00:10:17.518 align:middle
如调查

00:10:17.584 --> 00:10:20.254 align:middle
因此您可能会收到一项指令
一个调查问题和调查问卷

00:10:20.621 --> 00:10:23.223 align:middle
或者对于其它而言
如现时任务需要倒计时器

00:10:23.624 --> 00:10:27.294 align:middle
对于认知型任务
可能需要玩记忆游戏

00:10:29.263 --> 00:10:33.534 align:middle
因此一般情况下这个基本模板

00:10:34.535 --> 00:10:37.538 align:middle
会在页面中央展示该步骤内容

00:10:38.172 --> 00:10:39.806 align:middle
为此已有预定义要素下面我们会谈及

00:10:40.240 --> 00:10:43.977 align:middle
此外一般还包括向前导航控制器

00:10:44.244 --> 00:10:46.146 align:middle
在步骤视图控制器内显示

00:10:49.783 --> 00:10:51.685 align:middle
从代码来看它的效果如何呢？

00:10:52.519 --> 00:10:57.124 align:middle
将ORKStep作为抽象基类

00:10:57.191 --> 00:10:59.193 align:middle
并且它是该对象内的一个子类

00:10:59.526 --> 00:11:02.062 align:middle
因此我要说说使用
Objective-C

00:10:59.526 --> 00:11:02.062 align:middle
因此我要说说使用
Objective-C

00:11:02.129 --> 00:11:04.264 align:middle
撰写这个框架文件
但从Swift完全可以使用

00:11:04.565 --> 00:11:07.234 align:middle
并且我们还在此基础上
增加了为空性和泛型

00:11:07.301 --> 00:11:09.469 align:middle
因此它可以和Swift 2一起使用

00:11:10.003 --> 00:11:10.838 align:middle
那么基类

00:11:12.439 --> 00:11:15.509 align:middle
有哪些重要特征呢？

00:11:16.977 --> 00:11:19.213 align:middle
第一项特征也是最关键特征即标识符

00:11:19.513 --> 00:11:21.415 align:middle
这是您作为开发人员
需要提供的一串字符

00:11:22.049 --> 00:11:25.285 align:middle
它可能是人工
可读字符串也可能是UUID

00:11:25.352 --> 00:11:26.854 align:middle
或者与本步骤某项记录

00:11:26.920 --> 00:11:29.690 align:middle
以及数据库中相应任务对应的标识符

00:11:31.992 --> 00:11:33.293 align:middle
该标识符的重要性在于

00:11:33.360 --> 00:11:36.096 align:middle
它将该步骤与相应步骤结果连在一起

00:11:36.296 --> 00:11:38.832 align:middle
并且在您的任务语境中
必须是唯一标识符

00:11:40.400 --> 00:11:44.605 align:middle
接下来所有步骤都有一个标题和文本

00:11:45.272 --> 00:11:48.275 align:middle
并且一般来说它们
都适合每个步骤模板中的

00:11:48.342 --> 00:11:49.276 align:middle
同一对应位置

00:11:51.011 --> 00:11:54.681 align:middle
如果您正在写一个问题
例如针对调查中的一个问题步骤

00:11:55.148 --> 00:11:56.683 align:middle
一般来说您会设置一个短标题

00:11:57.017 --> 00:11:59.720 align:middle
并且这个实际问题本身
会对文本特征进行核实

00:12:02.823 --> 00:12:05.292 align:middle
还有一项特征需要说明一下
那就是备选性质

00:12:05.659 --> 00:12:08.662 align:middle
因此调查和ResearchKit
中的每个步骤

00:12:08.729 --> 00:12:10.430 align:middle
或者很多其它步骤可能都属于备选性质

00:12:11.131 --> 00:12:12.466 align:middle
实际上它们默认为备选性质

00:12:12.699 --> 00:12:15.602 align:middle
如果需要关闭它
比如因为需要提供特定答案

00:12:15.836 --> 00:12:16.870 align:middle
您就可以利用这种特征

00:12:18.205 --> 00:12:20.874 align:middle
那就是所谓的步骤
但是为了使用一项步骤

00:12:20.941 --> 00:12:22.042 align:middle
需要将它放入任务文本

00:12:23.710 --> 00:12:27.514 align:middle
现在ResearchKit中的任务
还没有一种抽象基类

00:12:27.581 --> 00:12:28.582 align:middle
相反它只是一份协议

00:12:29.116 --> 00:12:33.120 align:middle
定义了任务视图控制器
与每项任务的互动方式

00:12:34.354 --> 00:12:36.723 align:middle
仍然有一项关键特征即识别符

00:12:37.157 --> 00:12:39.193 align:middle
与在本App中可能收集的
其它任务结果相比

00:12:39.426 --> 00:12:42.930 align:middle
它是该任务结果的唯一识别方式

00:12:45.132 --> 00:12:47.701 align:middle
接下来虽然任务视图控制器需要

00:12:47.768 --> 00:12:50.003 align:middle
了解该任务中下一步骤的具体内容

00:12:50.404 --> 00:12:53.173 align:middle
为此我们根据步骤协议方法
对该步骤进行了定义

00:12:53.407 --> 00:12:55.642 align:middle
其中我们从任务
视图控制器通过了当前步骤

00:12:58.312 --> 00:13:00.080 align:middle
通常情况下您刚好回到下一步骤

00:12:58.312 --> 00:13:00.080 align:middle
通常情况下您刚好回到下一步骤

00:13:00.747 --> 00:13:02.549 align:middle
但有时您想了解...

00:13:02.616 --> 00:13:05.185 align:middle
您想根据现有结果
决定采用哪种测试方案...

00:13:05.586 --> 00:13:07.921 align:middle
需要展示哪一步

00:13:08.055 --> 00:13:10.424 align:middle
例如如果我选了A您希望进入A步

00:13:10.490 --> 00:13:12.526 align:middle
如果我选了B您希望进入B步

00:13:13.694 --> 00:13:17.130 align:middle
为此任务视图控制器将
通过该任务一项结果

00:13:17.364 --> 00:13:20.133 align:middle
您可以用来做出上述
决定的现有任务结果

00:13:22.402 --> 00:13:24.071 align:middle
在寻找该任务的第一个步骤时

00:13:24.338 --> 00:13:26.373 align:middle
任务视图控制器将通过零作为当前步骤

00:13:26.940 --> 00:13:28.675 align:middle
并且该任务完成时

00:13:29.076 --> 00:13:31.378 align:middle
告知任务视图控制器没有其它后续步骤

00:13:31.445 --> 00:13:33.547 align:middle
就此已经没有能够
让您归零的其它步骤了

00:13:35.883 --> 00:13:38.118 align:middle
同样任务视图控制器

00:13:38.185 --> 00:13:40.320 align:middle
可能会询问您的任务：
之前应该有哪些步骤

00:13:40.821 --> 00:13:43.490 align:middle
因此通过方法前步骤
您可以采取一些措施

00:13:43.557 --> 00:13:44.892 align:middle
比如防止后向导航

00:13:46.527 --> 00:13:48.662 align:middle
因此关于任务协议

00:13:48.729 --> 00:13:50.831 align:middle
有多种其它特征和方法

00:13:51.265 --> 00:13:53.734 align:middle
执行一项任务可能比较复杂

00:13:54.134 --> 00:13:57.771 align:middle
因此ResearchKit包括
ORKTask的执行

00:13:58.272 --> 00:14:01.208 align:middle
它是单纯情况下
的ORKOrder任务

00:13:58.272 --> 00:14:01.208 align:middle
它是单纯情况下
的ORKOrder任务

00:14:01.275 --> 00:14:03.377 align:middle
其中您希望采用连续顺序
展示您的各种步骤

00:14:04.011 --> 00:14:06.747 align:middle
因此在这里您通过
一个标识符和一个步骤阵列

00:14:07.447 --> 00:14:09.983 align:middle
即可让这些步骤从只读特征返回

00:14:10.484 --> 00:14:12.186 align:middle
但是任务视图控制器

00:14:12.252 --> 00:14:15.222 align:middle
只是通过ORKtask协议
与它的预订任务互动

00:14:15.489 --> 00:14:19.059 align:middle
因此您可以按步骤呼叫
而不是对该步骤特征进行评估

00:14:20.394 --> 00:14:22.162 align:middle
现在如果您需要条件逻辑

00:14:22.596 --> 00:14:25.432 align:middle
还有一种预订任务版本是它的一个子类

00:14:25.499 --> 00:14:27.267 align:middle
称为ORKNavigable
预订任务

00:14:27.334 --> 00:14:29.236 align:middle
通过它可以明确结果相关述语

00:14:29.303 --> 00:14:30.637 align:middle
以及相应终点步骤

00:14:31.305 --> 00:14:34.141 align:middle
这是最近通过
外部促成方在该框架基础上

00:14:34.541 --> 00:14:36.343 align:middle
增加的内容
今天我没有时间谈论它

00:14:36.577 --> 00:14:38.478 align:middle
但是您有机会
了解GitHub相关细节

00:14:39.179 --> 00:14:40.047 align:middle
任务就谈到这里

00:14:41.415 --> 00:14:44.117 align:middle
但是执行一项任务需要使用
任务视图控制器来展示这项任务

00:14:44.885 --> 00:14:46.453 align:middle
下面让我们看一看任务视图控制器

00:14:47.421 --> 00:14:48.422 align:middle
您将启动一项任务

00:14:49.089 --> 00:14:51.992 align:middle
并且需要经由此项任务
创建一个任务视图控制器

00:14:53.126 --> 00:14:55.729 align:middle
但是您会注意到第二项特征
任务运行UUID

00:14:56.597 --> 00:14:58.298 align:middle
这就是UUID

00:14:58.432 --> 00:15:00.934 align:middle
它是该任务此次特定
运行的唯一识别方式

00:14:58.432 --> 00:15:00.934 align:middle
它是该任务此次特定
运行的唯一识别方式

00:15:01.502 --> 00:15:04.505 align:middle
因此如果这里我们通过零

00:15:04.571 --> 00:15:08.208 align:middle
表明这是一个新任务实例

00:15:08.675 --> 00:15:09.610 align:middle
我们从零开始

00:15:10.110 --> 00:15:12.946 align:middle
但是如果我保存工作成果
假设调查时间很长

00:15:13.113 --> 00:15:16.483 align:middle
假设我希望中途暂停
那么我可能保存

00:15:16.683 --> 00:15:18.519 align:middle
在新任务视图控制器中确定日程

00:15:18.585 --> 00:15:21.889 align:middle
重新启动这项任务时我们一定
会希望恢复以前的工作运行UUID

00:15:21.955 --> 00:15:23.423 align:middle
因为它与任务运行确实相同

00:15:25.659 --> 00:15:27.060 align:middle
然后您需要设立代表

00:15:27.361 --> 00:15:28.829 align:middle
如果希望了解何时完成任务

00:15:29.062 --> 00:15:30.364 align:middle
可以召回代表

00:15:30.764 --> 00:15:32.766 align:middle
但是同样也会召回代表

00:15:32.833 --> 00:15:33.834 align:middle
这样就有机会

00:15:34.001 --> 00:15:35.736 align:middle
对任务视图控制器行为进行定制

00:15:36.069 --> 00:15:38.238 align:middle
例如针对特定步骤
使用新步骤视图控制器

00:15:38.872 --> 00:15:40.874 align:middle
代替默认步骤

00:15:42.876 --> 00:15:45.846 align:middle
此外有些任务可能会输出信息

00:15:46.213 --> 00:15:47.314 align:middle
一种文件输出

00:15:47.548 --> 00:15:50.817 align:middle
例如如果在执行任务时
使用麦克风收集音频数据

00:15:50.951 --> 00:15:52.986 align:middle
那么我们会希望在执行任务过程中

00:15:53.053 --> 00:15:54.288 align:middle
将该数据写入音频文件

00:15:55.656 --> 00:15:57.591 align:middle
在ResearchKit中
为了给予支持

00:15:57.658 --> 00:15:58.959 align:middle
您会给来自该任务的文件输出

00:15:59.026 --> 00:16:01.695 align:middle
应该进入您的任务视图控制器

00:15:59.026 --> 00:16:01.695 align:middle
应该进入您的任务视图控制器

00:16:01.762 --> 00:16:02.829 align:middle
指定一个输出目录

00:16:03.330 --> 00:16:05.766 align:middle
任务完成时您需要处理这些文件

00:16:05.832 --> 00:16:07.334 align:middle
然后负责清理

00:16:08.602 --> 00:16:11.471 align:middle
最后通过程序展示
任务视图控制器并获得类似信息

00:16:12.573 --> 00:16:15.976 align:middle
因此您所看到的这种任务视图控制器

00:16:16.577 --> 00:16:17.911 align:middle
它的行为相当标准

00:16:18.212 --> 00:16:20.480 align:middle
并且任务视图控制器本身

00:16:20.547 --> 00:16:21.949 align:middle
只能控制数量很少的视窗不动产

00:16:22.516 --> 00:16:24.384 align:middle
因此它控制这个导航条

00:16:24.685 --> 00:16:25.919 align:middle
设定进度显示结果

00:16:25.986 --> 00:16:27.921 align:middle
可能还设定一些向后导航控制机构

00:16:28.555 --> 00:16:30.991 align:middle
此外它向步骤视图控制器提供的信息

00:16:31.058 --> 00:16:34.795 align:middle
刚好能够正确显示向前导航控制机构

00:16:36.363 --> 00:16:37.631 align:middle
任务视图控制器到此为止

00:16:38.298 --> 00:16:39.399 align:middle
但是得到结果呢？

00:16:39.666 --> 00:16:41.301 align:middle
让我们看看下面如何获得结果

00:16:42.870 --> 00:16:45.172 align:middle
下面介绍
DidFinishWithReason

00:16:45.239 --> 00:16:46.106 align:middle
代表召回

00:16:46.206 --> 00:16:49.176 align:middle
任务完成时
您的代表将收到该信息

00:16:50.177 --> 00:16:53.380 align:middle
这里您会了解到
任务视图控制器结束的原因

00:16:53.881 --> 00:16:57.684 align:middle
可能结束的其中一项原因是
用户选择了在任务中途保存工作成果

00:16:58.185 --> 00:17:00.921 align:middle
如果是那样您会希望提取恢复数据

00:16:58.185 --> 00:17:00.921 align:middle
如果是那样您会希望提取恢复数据

00:17:01.255 --> 00:17:05.125 align:middle
它是一种不透明
NSData性质 然后保存

00:17:05.692 --> 00:17:08.662 align:middle
因为以后希望继续执行任务时
需要用示例说明新任务视图控制器

00:17:08.729 --> 00:17:11.598 align:middle
并将其传输到专用
初始化程序中的恢复数据

00:17:13.099 --> 00:17:17.003 align:middle
但是通常情况下您会顺利完成任务

00:17:17.304 --> 00:17:19.439 align:middle
因此您希望从
任务视图控制器的结果属性

00:17:19.506 --> 00:17:21.541 align:middle
抓取相关结果并用它解决一些问题

00:17:21.775 --> 00:17:23.844 align:middle
如对它进行序列化发送到服务器

00:17:24.178 --> 00:17:28.315 align:middle
或者可能需要分析以便
向用户展示其中一些信息

00:17:29.750 --> 00:17:31.985 align:middle
最后需要解除该任务视图控制器

00:17:32.586 --> 00:17:34.521 align:middle
因为已经展示了任务视图控制器

00:17:34.588 --> 00:17:35.989 align:middle
还需要为解除控制器承担责任

00:17:38.492 --> 00:17:41.461 align:middle
现在大家了解了
ResearchKit的基本概况

00:17:41.662 --> 00:17:43.430 align:middle
以及使用任务型模式的方法

00:17:44.097 --> 00:17:45.766 align:middle
现在让我们看看它该如何匹配

00:17:45.832 --> 00:17:47.868 align:middle
ResearchKit第一个模块
调查模块

00:17:49.303 --> 00:17:51.872 align:middle
因此ResearchKit中的
调查由三部分构成

00:17:52.105 --> 00:17:55.209 align:middle
指令、调查问题和调查问卷

00:17:55.809 --> 00:17:57.811 align:middle
反之每部分对应一个步骤

00:17:58.412 --> 00:17:59.646 align:middle
因此我们有一个调查问题

00:18:00.814 --> 00:18:04.084 align:middle
我们有一个指令步骤 一个问题步骤
和一个问卷步骤

00:18:05.085 --> 00:18:06.820 align:middle
在ORKStep基类现有内容基础上

00:18:06.887 --> 00:18:09.289 align:middle
我们再增加一些指令步骤

00:18:09.690 --> 00:18:11.792 align:middle
但是问题步骤和
问卷步骤比它们稍微多一些

00:18:12.326 --> 00:18:13.227 align:middle
我们要看看下个环节

00:18:14.761 --> 00:18:16.663 align:middle
这是问题步骤和任何其它步骤一样

00:18:16.730 --> 00:18:19.366 align:middle
它有一个识别符在任务范围内必须唯一

00:18:20.200 --> 00:18:22.836 align:middle
问题步骤也有回答格式

00:18:23.704 --> 00:18:26.340 align:middle
回答格式是ORKAnswer
格式的一个子类

00:18:26.406 --> 00:18:29.009 align:middle
对应希望展示步骤的特定类型

00:18:29.810 --> 00:18:32.579 align:middle
由于各种子类覆盖范围很广

00:18:32.646 --> 00:18:34.615 align:middle
因此我们可能有一个
Boolean回答格式

00:18:34.681 --> 00:18:36.550 align:middle
包括“是/否”问题
文本选择回答格式

00:18:36.750 --> 00:18:38.852 align:middle
提供图像比例尺的图像选择回答格式

00:18:39.186 --> 00:18:41.588 align:middle
或者日期型和时间间隔格式

00:18:41.855 --> 00:18:43.490 align:middle
种类繁多可以在GitHub上查看

00:18:44.658 --> 00:18:46.426 align:middle
问题步骤就谈到这里

00:18:46.660 --> 00:18:47.494 align:middle
那么问卷步骤呢？

00:18:48.695 --> 00:18:52.399 align:middle
这里有一个问卷步骤
并且问卷步骤有一个识别符

00:18:52.733 --> 00:18:54.334 align:middle
而且还有一系列问卷项目

00:18:55.235 --> 00:18:56.370 align:middle
这里是问卷项目

00:18:56.537 --> 00:18:58.105 align:middle
每个文件项目都有一个识别符

00:18:58.338 --> 00:19:01.041 align:middle
在问卷步骤语境内必须唯一

00:18:58.338 --> 00:19:01.041 align:middle
在问卷步骤语境内必须唯一

00:19:03.410 --> 00:19:06.280 align:middle
和问题步骤一样问卷项目也有回答格式

00:19:06.713 --> 00:19:10.751 align:middle
并且在受支持答卷项目中

00:19:10.817 --> 00:19:13.820 align:middle
ResearchKit
支持相同回答格式

00:19:14.054 --> 00:19:16.890 align:middle
例如我们可以将文本选择回答格式与

00:19:17.491 --> 00:19:19.760 align:middle
同一表格的数字答案格式混合在一起

00:19:21.461 --> 00:19:26.700 align:middle
这就是ResearchKit
调查模型对象的对象模型

00:19:27.501 --> 00:19:28.669 align:middle
那么如何获得结果呢？

00:19:30.304 --> 00:19:33.440 align:middle
这是预订任务及其识别符
和一个步骤阵列

00:19:34.541 --> 00:19:37.911 align:middle
完成任务后就会获得任务结果

00:19:38.345 --> 00:19:41.615 align:middle
同样有匹配识别符和一系列结果

00:19:43.283 --> 00:19:45.519 align:middle
如果预订任务启动一个指令步骤

00:19:46.153 --> 00:19:47.988 align:middle
那么指令步骤会有一个识别符

00:19:48.322 --> 00:19:51.058 align:middle
一旦完成任务就会获得步骤结果

00:19:51.325 --> 00:19:52.459 align:middle
及其相应识别符

00:19:53.327 --> 00:19:56.663 align:middle
该步骤结果的结果属性为空

00:19:56.730 --> 00:19:58.832 align:middle
因为在该指令步骤期间
未收集到任何数据

00:19:58.899 --> 00:20:00.534 align:middle
我们要做的就是向它们展示该指令

00:19:58.899 --> 00:20:00.534 align:middle
我们要做的就是向它们展示该指令

00:20:01.969 --> 00:20:03.837 align:middle
虽然这个对象没有什么有用属性

00:20:04.071 --> 00:20:05.272 align:middle
类似开始日期和结束日期

00:20:05.506 --> 00:20:07.374 align:middle
告诉您该指令在页面上持续的时间

00:20:10.110 --> 00:20:11.512 align:middle
此外还可能有一个问题步骤

00:20:12.312 --> 00:20:15.582 align:middle
这个问题步骤有一个识别符

00:20:15.649 --> 00:20:17.384 align:middle
与相应步骤结果匹配

00:20:17.951 --> 00:20:22.556 align:middle
不同于指令步骤结果

00:20:22.756 --> 00:20:24.191 align:middle
实际上会有一个child结果

00:20:24.458 --> 00:20:27.427 align:middle
承载实际答案与答案格式对应

00:20:29.763 --> 00:20:31.198 align:middle
表格结果工作方式极为相似

00:20:31.598 --> 00:20:33.667 align:middle
这里有一个预订任务包含唯一问卷步骤

00:20:34.501 --> 00:20:37.371 align:middle
有两个问卷项目当然在问卷步骤内

00:20:37.671 --> 00:20:38.972 align:middle
识别符必须唯一

00:20:40.474 --> 00:20:42.042 align:middle
收到答案时

00:20:42.476 --> 00:20:44.878 align:middle
会收到任务结果和匹配识别符

00:20:45.879 --> 00:20:49.183 align:middle
还有步骤结果
以及与该问卷步骤匹配的识别符

00:20:50.517 --> 00:20:53.487 align:middle
然后收到相应child问题结果

00:20:53.787 --> 00:20:56.557 align:middle
这次还会收到一系列问题结果
每个问卷项目都有一个结果对应

00:20:56.924 --> 00:20:59.993 align:middle
还有与相应文件项目匹配的识别符

00:21:02.896 --> 00:21:05.766 align:middle
这就是ResearchKit中的
对象模型

00:21:05.832 --> 00:21:08.202 align:middle
以及如何使用调查
并且用来展示调查项目的方法

00:21:09.570 --> 00:21:11.305 align:middle
我要让大家看一看
Xcode简短展示

00:21:17.644 --> 00:21:21.748 align:middle
这里有一个示例App它显示表格视图

00:21:21.815 --> 00:21:24.985 align:middle
和一份有效任务清单
这里我要将一项调查任务

00:21:25.052 --> 00:21:28.388 align:middle
整合在一起让大家看看
我已经提到的一些特征

00:21:30.991 --> 00:21:33.694 align:middle
这里是表格视图控制器

00:21:37.631 --> 00:21:43.403 align:middle
表格视图控制器有一个--
当您选择一行时

00:21:43.637 --> 00:21:45.506 align:middle
它会举例说明任务视图控制器

00:21:45.839 --> 00:21:47.641 align:middle
并显示该任务设定代表

00:21:47.708 --> 00:21:50.310 align:middle
和输出目录完成任务后

00:21:50.911 --> 00:21:56.717 align:middle
我们会在didFinish召回中
显示--我们会解除该任务视图控制器

00:21:58.752 --> 00:22:01.922 align:middle
现在切换到任务枚举这里保留实际任务

00:21:58.752 --> 00:22:01.922 align:middle
现在切换到任务枚举这里保留实际任务

00:22:02.489 --> 00:22:05.392 align:middle
大家看到我定义了
各种情形包括调查情形

00:22:05.826 --> 00:22:08.595 align:middle
并且显示的任务当前为空

00:22:08.662 --> 00:22:10.764 align:middle
但是现在我要将它定义为调查任务

00:22:11.331 --> 00:22:13.133 align:middle
下一步我会创建它

00:22:15.836 --> 00:22:20.741 align:middle
为了创建调查任务我要定义计算属性

00:22:20.941 --> 00:22:23.810 align:middle
调查任务这里我创建了一项预订任务

00:22:23.911 --> 00:22:26.380 align:middle
以及识别符调查并附带一个步骤阵列

00:22:26.713 --> 00:22:27.981 align:middle
现在该阵列为空

00:22:28.315 --> 00:22:29.416 align:middle
我要添加一个指令步骤

00:22:30.184 --> 00:22:32.119 align:middle
现在这个指令步骤有一个识别符

00:22:32.286 --> 00:22:33.654 align:middle
这里我正在生成识别符

00:22:33.720 --> 00:22:36.857 align:middle
因为我知道它们
在该任务内是唯一识别符

00:22:38.759 --> 00:22:39.960 align:middle
我设置了一个标题和文本

00:22:40.260 --> 00:22:41.328 align:middle
将在页面上显示

00:22:41.461 --> 00:22:43.463 align:middle
您会注意到我已经将这些
标注为本地化字符串

00:22:43.597 --> 00:22:47.000 align:middle
因为这些模型对象的内容
实际上已经本地化

00:22:47.067 --> 00:22:49.336 align:middle
如果打算在多个场合使用App

00:22:49.636 --> 00:22:52.105 align:middle
需要将该内容
以及App中需要本地化的

00:22:52.306 --> 00:22:54.141 align:middle
其它项目进行本地化

00:22:55.576 --> 00:22:58.679 align:middle
然后我会添加一个问题步骤

00:22:59.313 --> 00:23:01.949 align:middle
这个问题步骤是一个“是/否”问题

00:22:59.313 --> 00:23:01.949 align:middle
这个问题步骤是一个“是/否”问题

00:23:02.015 --> 00:23:03.317 align:middle
现在有了一个布尔回答格式

00:23:03.684 --> 00:23:06.687 align:middle
它有一个标识符组
和一个标题问题如下：

00:23:06.954 --> 00:23:08.889 align:middle
在一个典型日在您爬完几段楼梯后

00:23:08.956 --> 00:23:10.591 align:middle
您的健康状态对自己是否有所影响？

00:23:10.991 --> 00:23:13.060 align:middle
这是一个非常典型的问题

00:23:13.126 --> 00:23:14.461 align:middle
在普通健康调查问卷中很常见

00:23:15.362 --> 00:23:17.764 align:middle
我们已经提过问卷表格
所以我要增加一个问卷步骤

00:23:18.098 --> 00:23:21.435 align:middle
这是一份问卷 有识别符 有标题

00:23:21.502 --> 00:23:24.004 align:middle
还有一个常见问题：
在上两周您受到以下问题

00:23:24.071 --> 00:23:25.939 align:middle
困扰的频率是多少？

00:23:26.940 --> 00:23:30.878 align:middle
现在我们列出各种问题
每个问题都有一个问卷项目

00:23:31.578 --> 00:23:36.216 align:middle
因此其中每项都是一个问题

00:23:36.383 --> 00:23:38.685 align:middle
采用文本选择回答格式

00:23:38.752 --> 00:23:41.922 align:middle
这是一个多项选择问题
但只能选择一个答案

00:23:42.556 --> 00:23:44.925 align:middle
大家可以看到这里我给的答案

00:23:44.992 --> 00:23:47.728 align:middle
根本不是几天
超过这些天数的一半 几乎是每天

00:23:48.161 --> 00:23:51.798 align:middle
它们也有相应数值这些值将会进行编码

00:23:51.865 --> 00:23:55.736 align:middle
纳入结果对象因此以后可以分析结果

00:23:56.136 --> 00:23:58.472 align:middle
这些同样可能是属性列表类值

00:23:58.539 --> 00:24:00.774 align:middle
它可能是一个整数--宁可是一个s数

00:23:58.539 --> 00:24:00.774 align:middle
它可能是一个整数--宁可是一个s数

00:24:01.108 --> 00:24:02.442 align:middle
或者可能是一个字符串像这样

00:24:04.411 --> 00:24:06.280 align:middle
我们看到了这个兴趣项

00:24:06.680 --> 00:24:08.448 align:middle
我的问题是做事情少有兴趣或快乐

00:24:08.515 --> 00:24:10.350 align:middle
我们会再增加两项

00:24:11.218 --> 00:24:12.753 align:middle
填完表格

00:24:16.356 --> 00:24:18.692 align:middle
设置完毕后我还想做一件事情

00:24:18.759 --> 00:24:20.694 align:middle
让您看看结果，

00:24:20.961 --> 00:24:23.931 align:middle
为此我已为大家构架了UI
所以我们可以研究一下

00:24:23.997 --> 00:24:26.700 align:middle
App自身中的一些结果

00:24:28.001 --> 00:24:30.103 align:middle
这件事情实际在GitHub上的

00:24:30.170 --> 00:24:32.039 align:middle
ORKCatalog
样本App中完成

00:24:32.472 --> 00:24:34.608 align:middle
但是今天我还要序列化到JSON

00:24:34.675 --> 00:24:36.944 align:middle
让大家看看JSON输出效果

00:24:37.611 --> 00:24:42.549 align:middle
为此 我们将回到任务视图控制器委托
DidFinishWithReason

00:24:43.650 --> 00:24:45.719 align:middle
它希望再增加一个步骤 我要把它挪开

00:24:47.754 --> 00:24:50.224 align:middle
我要在任务上添加结论步骤
我忘了做这件事情

00:24:52.593 --> 00:24:53.727 align:middle
所以这是我们的结论步骤

00:24:53.894 --> 00:24:54.828 align:middle
那就回到这里吧

00:24:55.596 --> 00:24:56.597 align:middle
我要打开reason

00:24:57.531 --> 00:24:59.933 align:middle
如果顺利完成任务

00:25:00.200 --> 00:25:02.035 align:middle
我会从任务视图控制器提取结果

00:25:02.836 --> 00:25:04.471 align:middle
然后我想将它序列化到JSON

00:25:04.905 --> 00:25:08.675 align:middle
并且ResearchKit框架本身
不包括任何JSON序列化

00:25:08.742 --> 00:25:12.713 align:middle
我们已经将一些东西
纳入其中一个测试App

00:25:12.779 --> 00:25:15.182 align:middle
以便证明JSON序列化
会用于一项真实App

00:25:15.682 --> 00:25:17.885 align:middle
这里我已将其纳入
现在我可以向大家演示了

00:25:19.820 --> 00:25:23.290 align:middle
所以我会运行它并让大家看看调查项目
在ResearchKit的情况

00:25:32.099 --> 00:25:33.066 align:middle
开始执行任务时

00:25:33.700 --> 00:25:35.469 align:middle
我会立即看到这个指令步骤

00:25:36.503 --> 00:25:37.938 align:middle
还会显示进度

00:25:38.138 --> 00:25:39.373 align:middle
我可以取消该任务

00:25:39.540 --> 00:25:42.843 align:middle
我已经有了标题和文本
也有了导航控制机构

00:25:43.210 --> 00:25:45.179 align:middle
大家看到它已预先生成方便开始启动

00:25:45.245 --> 00:25:46.780 align:middle
从任务视图控制器搭建的框架开始

00:25:46.847 --> 00:25:47.981 align:middle
实现了自动化

00:25:48.949 --> 00:25:50.450 align:middle
我进来时看到了自己的布尔问题

00:25:50.651 --> 00:25:53.053 align:middle
我可以选择自己的答案
如果我选择跳过这个问题

00:25:53.220 --> 00:25:55.622 align:middle
我输入的答案会被清除
如果我返回答案已经没有了

00:25:56.223 --> 00:25:58.091 align:middle
一旦我返回我可以回答一些不同问题

00:25:59.159 --> 00:26:00.861 align:middle
因此我要仔细检查给出答案

00:25:59.159 --> 00:26:00.861 align:middle
因此我要仔细检查给出答案

00:26:01.295 --> 00:26:03.630 align:middle
可能我并未回答全部问题但我可以继续

00:26:04.565 --> 00:26:05.399 align:middle
最后我完成了

00:26:06.099 --> 00:26:07.434 align:middle
我们看看结果吧！

00:26:10.170 --> 00:26:13.540 align:middle
如前所述这里我们看到了任务结果

00:26:13.640 --> 00:26:16.877 align:middle
还有一个起始日期和结束日期
据此可以查看该调查项目持续的时间

00:26:17.477 --> 00:26:19.680 align:middle
我们有了输出目录
一个任务运行UUID

00:26:19.746 --> 00:26:21.381 align:middle
从任务视图控制器开始直接通过

00:26:21.748 --> 00:26:23.817 align:middle
我们也有了任务识别符

00:26:25.485 --> 00:26:27.955 align:middle
child结果阵列包含
一个步骤结果阵列

00:26:28.088 --> 00:26:29.923 align:middle
因此初始指令步骤
我们有了指令步骤结果

00:26:29.990 --> 00:26:32.426 align:middle
初始指令步骤没有children

00:26:32.626 --> 00:26:35.062 align:middle
因为我们未收集到用户提供的附加信息

00:26:36.396 --> 00:26:39.833 align:middle
此外 还有问题步骤结果

00:26:39.900 --> 00:26:41.902 align:middle
包含一个布尔问题结果

00:26:41.969 --> 00:26:43.604 align:middle
以及为我的问题提供的实际答案

00:26:43.670 --> 00:26:44.805 align:middle
这时我回答“是”

00:26:46.039 --> 00:26:50.077 align:middle
然后从这里的答卷步骤
我们得到答卷步骤结果

00:26:50.210 --> 00:26:54.181 align:middle
以及感觉形式标识符和
我输入的每个答案

00:26:54.248 --> 00:26:55.549 align:middle
我回答了前两个问题

00:26:55.849 --> 00:26:59.753 align:middle
我没有回答该表格中的
最后一个问卷项目

00:26:59.820 --> 00:27:02.122 align:middle
大家可以看到这里没有实际答案属性

00:26:59.820 --> 00:27:02.122 align:middle
大家可以看到这里没有实际答案属性

00:27:03.557 --> 00:27:06.226 align:middle
并且最后对于结束指令步骤
我们还有一个步骤结果

00:27:07.661 --> 00:27:10.664 align:middle
现在我要让大家看看
在开发App过程中

00:27:10.731 --> 00:27:14.334 align:middle
如果需要变更调查项目
修改答案格式该有多轻松

00:27:16.803 --> 00:27:19.173 align:middle
我希望做的一件
事情就是改变我的布尔答案格式

00:27:19.540 --> 00:27:21.408 align:middle
或许“是”提供的信息并不充分

00:27:21.475 --> 00:27:23.343 align:middle
或许我的健康状况受到很大影响

00:27:23.410 --> 00:27:24.945 align:middle
或者影响不大

00:27:25.279 --> 00:27:27.648 align:middle
为此我可以切换到文本选择回答格式

00:27:28.081 --> 00:27:30.117 align:middle
针对允许我提供全部答案的每个选项

00:27:30.484 --> 00:27:34.054 align:middle
我可以提供一些细节文本
这样我可以选择“是 影响很大”

00:27:34.121 --> 00:27:35.122 align:middle
或者“是 影响不大”

00:27:37.057 --> 00:27:41.195 align:middle
这里您还要注意一点排他性设置

00:27:41.528 --> 00:27:46.700 align:middle
如果是多选项您可以
将一个或多个选项设为排他性选项

00:27:46.767 --> 00:27:49.236 align:middle
如果选择了一个选项
系统会取消所以其它选项

00:27:50.671 --> 00:27:52.472 align:middle
我也可能希望改变我的答卷步骤

00:27:52.539 --> 00:27:55.475 align:middle
正如大家看到的那样
它是一种垂直卷动的长表格

00:27:55.542 --> 00:27:57.211 align:middle
可能那不是我在App中期望的那样

00:27:57.377 --> 00:27:59.813 align:middle
也许我希望有一些水平滑条

00:27:59.880 --> 00:28:02.382 align:middle
可以用来显示大致相同的内容

00:27:59.880 --> 00:28:02.382 align:middle
可以用来显示大致相同的内容

00:28:02.816 --> 00:28:06.153 align:middle
得到相同答案但是表现方式可以不同

00:28:06.353 --> 00:28:09.089 align:middle
只需切换到ORKScale格式

00:28:09.156 --> 00:28:11.925 align:middle
明确最大值和最小值的说明内容

00:28:12.226 --> 00:28:14.194 align:middle
即可在ResearchKit
内轻松实现

00:28:15.028 --> 00:28:17.097 align:middle
所以我要再次运行并让大家看看效果

00:28:21.502 --> 00:28:22.469 align:middle
又是我们的调查项目

00:28:22.936 --> 00:28:23.770 align:middle
非常相似

00:28:24.037 --> 00:28:26.139 align:middle
在这个步骤我们已经有了不同选项

00:28:27.140 --> 00:28:31.945 align:middle
以前是多选问题现在是滑条

00:28:32.012 --> 00:28:33.280 align:middle
可以用来调整数值

00:28:35.849 --> 00:28:37.584 align:middle
当我完成任务看到结果时

00:28:38.185 --> 00:28:42.356 align:middle
从架构来看结果非常类似
但结果类型不同

00:28:42.689 --> 00:28:44.858 align:middle
因为相应答案格式也不同

00:28:44.925 --> 00:28:46.994 align:middle
所以对这些结果的解释也需要有所变化

00:28:48.562 --> 00:28:50.097 align:middle
ResearchKit
调查就讲到这里

00:28:57.671 --> 00:28:59.339 align:middle
第二个模块是知情同意

00:28:59.540 --> 00:29:02.009 align:middle
ResearchKit
第二个模块是知情同意

00:28:59.540 --> 00:29:02.009 align:middle
ResearchKit
第二个模块是知情同意

00:29:03.377 --> 00:29:04.545 align:middle
我们现在看一下

00:29:04.912 --> 00:29:05.979 align:middle
什么是知情同意？

00:29:10.484 --> 00:29:15.522 align:middle
知情同意是保证参与者
完全明白为何和如何进行调查

00:29:16.557 --> 00:29:17.558 align:middle
调查意味着什么

00:29:17.791 --> 00:29:20.127 align:middle
有何风险和收益的过程

00:29:21.261 --> 00:29:22.930 align:middle
如今 调查通常针对个人

00:29:24.198 --> 00:29:28.635 align:middle
而需要同意什么详细要求
将取决于您的调查标准

00:29:28.702 --> 00:29:31.371 align:middle
也取决于道德审查过程

00:29:33.707 --> 00:29:39.847 align:middle
现在 参与者和调查者
一起审查知情同意书

00:29:39.947 --> 00:29:41.849 align:middle
从起始页到结尾签名

00:29:42.583 --> 00:29:45.452 align:middle
也许您需要在同意过程中签名

00:29:47.221 --> 00:29:49.923 align:middle
最终 知情同意通常是一份法律文件

00:29:52.860 --> 00:29:57.531 align:middle
现在App Store
提交的人类研究必须包括

00:29:57.598 --> 00:29:59.166 align:middle
道德审查的证据

00:29:59.800 --> 00:30:03.637 align:middle
这并不完全意味着您需要
包含像我们要讨论的那个研究

00:29:59.800 --> 00:30:03.637 align:middle
这并不完全意味着您需要
包含像我们要讨论的那个研究

00:30:03.704 --> 00:30:06.874 align:middle
元件中的知情同意模块
那样的知情同意过程

00:30:07.474 --> 00:30:11.478 align:middle
因为低风险研究可能是例外的

00:30:11.745 --> 00:30:14.615 align:middle
一定的高风险研究可能需要亲自工作

00:30:15.983 --> 00:30:18.051 align:middle
但许多案例中假设
Researchkit

00:30:18.118 --> 00:30:19.953 align:middle
可以帮到忙那么研究元件中的知情同意

00:30:20.521 --> 00:30:23.457 align:middle
就是合适的您可以在道德审查过程中

00:30:26.226 --> 00:30:27.561 align:middle
自行决定

00:30:27.928 --> 00:30:30.097 align:middle
那让我们来看看知情同意模块

00:30:32.366 --> 00:30:37.171 align:middle
是如何工作的
Researchkit中

00:30:37.304 --> 00:30:39.640 align:middle
有两个步骤需要
在知情同意文件中被同意

00:30:40.340 --> 00:30:42.876 align:middle
并且这两个步骤都可以

00:30:42.943 --> 00:30:44.745 align:middle
从ORKConsent中获取内容

00:30:44.811 --> 00:30:46.580 align:middle
这个知情同意文件由两个序列组成

00:30:47.080 --> 00:30:48.582 align:middle
第一个是一个部分序列

00:30:48.815 --> 00:30:50.651 align:middle
这些部分序列可能是预定义类型

00:30:50.951 --> 00:30:52.719 align:middle
就像数据采集、隐私、数据使用

00:30:52.920 --> 00:30:56.190 align:middle
这些都是您希望在知情
同意文件中看到的类型

00:30:56.823 --> 00:30:58.425 align:middle
但也有自定义部分

00:30:58.759 --> 00:31:02.095 align:middle
因此Researchkit并不打算
提供一个完整的解决方案

00:30:58.759 --> 00:31:02.095 align:middle
因此Researchkit并不打算
提供一个完整的解决方案

00:31:02.262 --> 00:31:03.463 align:middle
我们提供80%的解决方案

00:31:03.530 --> 00:31:06.600 align:middle
如果您需要给您的App
附加信息您可以自行添加

00:31:07.835 --> 00:31:11.872 align:middle
除了知情同意文件以外
还有一个签名序列

00:31:12.172 --> 00:31:13.740 align:middle
因而我们可能有一个

00:31:13.807 --> 00:31:15.843 align:middle
包含有预填充姓名和图像的调查签名

00:31:17.678 --> 00:31:23.083 align:middle
以及一个我们在调查同意过程中
采集的参与者的签名和图像

00:31:25.185 --> 00:31:28.989 align:middle
让我们看看调查元件中的这些部分

00:31:29.056 --> 00:31:32.860 align:middle
我们有了视觉同意步骤 分享同意步骤

00:31:33.327 --> 00:31:36.697 align:middle
以及检查同意步骤我将稍作详细解释

00:31:39.600 --> 00:31:43.237 align:middle
视觉同意通常在文件中各部分占一屏

00:31:43.770 --> 00:31:46.440 align:middle
有着简洁的动画过渡
稍后我将就这些预定义部分

00:31:46.874 --> 00:31:47.941 align:middle
作个演示

00:31:48.141 --> 00:31:50.677 align:middle
它完全可以定制因此您可以用图像替代

00:31:50.911 --> 00:31:52.913 align:middle
您可以用动画替代

00:31:53.180 --> 00:31:56.283 align:middle
也可以填充知情同意文件中的确切内容

00:31:56.950 --> 00:31:58.185 align:middle
让我们看看如何编码

00:31:59.152 --> 00:32:01.188 align:middle
您将创建一个特别种类的知情同意部分

00:31:59.152 --> 00:32:01.188 align:middle
您将创建一个特别种类的知情同意部分

00:32:01.355 --> 00:32:02.523 align:middle
这种情况下采集数据

00:32:04.157 --> 00:32:05.926 align:middle
然后设置属性

00:32:06.126 --> 00:32:07.628 align:middle
我不用设置标题

00:32:07.728 --> 00:32:10.197 align:middle
因为在iOS的所有语言
都已经进行过本地化

00:32:10.264 --> 00:32:11.732 align:middle
现在我选择的是预定义部分

00:32:12.366 --> 00:32:15.903 align:middle
但如果我不需要预定义部分
或者如果我需要指定我自己的

00:32:15.969 --> 00:32:17.204 align:middle
我也可以这样重写

00:32:18.105 --> 00:32:21.041 align:middle
我可以指定
在视觉同意过程中显示的概要

00:32:21.608 --> 00:32:23.610 align:middle
当用户通过视觉同意
或在浏览整个文件时

00:32:23.677 --> 00:32:25.879 align:middle
点击了“了解更多”的话

00:32:26.413 --> 00:32:30.250 align:middle
我也可以指定内容

00:32:33.320 --> 00:32:35.055 align:middle
此外您可以设置其他事项

00:32:35.389 --> 00:32:37.791 align:middle
可以设置定制图像或者定制动画

00:32:37.991 --> 00:32:40.060 align:middle
定制动画只是一个视频文件

00:32:40.127 --> 00:32:41.361 align:middle
您可以包含进您的App里

00:32:42.296 --> 00:32:44.031 align:middle
如果设置步骤类型的话不管何种错误

00:32:44.097 --> 00:32:46.633 align:middle
您都可以覆盖掉这个定制动画
或者您也可以重新设置一个

00:32:48.235 --> 00:32:49.469 align:middle
一旦您有了同意部分

00:32:49.736 --> 00:32:53.874 align:middle
您就可以把您的文件附到
视觉同意步骤里

00:32:53.941 --> 00:32:55.475 align:middle
来展示您的视觉同意序列

00:32:57.544 --> 00:33:01.215 align:middle
知情同意模块的下一步是分享步骤

00:32:57.544 --> 00:33:01.215 align:middle
知情同意模块的下一步是分享步骤

00:33:02.482 --> 00:33:06.987 align:middle
研究数据采集艰难因此在
可行的多方研究中重复使用是有意义的

00:33:07.521 --> 00:33:10.390 align:middle
所以获取更广泛的同意

00:33:10.724 --> 00:33:12.559 align:middle
可以让您和其他研究者

00:33:13.026 --> 00:33:13.861 align:middle
共享数据

00:33:14.995 --> 00:33:16.864 align:middle
但是那对参与者会有问题

00:33:17.664 --> 00:33:21.068 align:middle
如果数据敏感他们可能只想
协助您的研究而非别人的

00:33:22.369 --> 00:33:24.538 align:middle
这个问题 在我们使用
Researchkit

00:33:24.605 --> 00:33:27.140 align:middle
研发最初的App时就存在

00:33:27.441 --> 00:33:29.376 align:middle
因此我们创建同意分享步骤

00:33:29.643 --> 00:33:32.246 align:middle
我们已经提前
本地化了所有iOS支持的语言

00:33:32.646 --> 00:33:35.816 align:middle
以便我们带入您的机构名称
和几个其他细节

00:33:36.316 --> 00:33:38.151 align:middle
您就可以问参与者

00:33:38.552 --> 00:33:41.321 align:middle
他们是否同意更广泛地分享数据

00:33:46.527 --> 00:33:50.664 align:middle
在初期调查中
超过80%的参与者对此表示同意

00:33:51.365 --> 00:33:53.100 align:middle
但我们仍然认为这是件重要的事项

00:33:53.700 --> 00:33:55.802 align:middle
如果您的需求
包含这样一个广泛同意的话

00:33:57.171 --> 00:33:58.472 align:middle
以上是同意分享步骤

00:33:59.072 --> 00:34:02.176 align:middle
Researchkit知情同意
模块的最后一步

00:33:59.072 --> 00:34:02.176 align:middle
Researchkit知情同意
模块的最后一步

00:34:02.709 --> 00:34:06.647 align:middle
是检查步骤参与者在此检查实际文件

00:34:07.347 --> 00:34:08.447 align:middle
可能输入他们的名字

00:34:08.614 --> 00:34:09.983 align:middle
也可能是手指签名

00:34:10.417 --> 00:34:12.319 align:middle
我们接下来看

00:34:12.886 --> 00:34:13.754 align:middle
这将如何编码

00:34:13.987 --> 00:34:15.856 align:middle
现在您要开始您的同意文件

00:34:16.723 --> 00:34:18.592 align:middle
您需要加一个

00:34:19.092 --> 00:34:20.393 align:middle
您想采集的签名

00:34:20.627 --> 00:34:22.029 align:middle
这是参与者签名

00:34:22.362 --> 00:34:25.331 align:middle
您为参与者在签名线下方设置标题

00:34:25.399 --> 00:34:26.833 align:middle
如果您想生成PDF文件的话

00:34:27.467 --> 00:34:29.636 align:middle
我们就得到一个识别符

00:34:29.703 --> 00:34:32.739 align:middle
如果我们想在知情同意书中

00:34:32.806 --> 00:34:34.842 align:middle
找到一个特别的签名的话
识别符就将进行识别

00:34:37.476 --> 00:34:42.516 align:middle
您可以关闭名字采集或者签名图像采集

00:34:43.382 --> 00:34:47.554 align:middle
我们通过设置命令签名图像来关闭

00:34:50.389 --> 00:34:52.525 align:middle
然后您可以在知情同意文件中添加签名

00:34:53.193 --> 00:34:56.196 align:middle
当您指定了您想收集何种签名时

00:34:57.030 --> 00:34:59.633 align:middle
您就可以把同意文件附到同意检查步骤

00:35:00.634 --> 00:35:02.669 align:middle
您可以使用多个同意检查步骤

00:35:02.736 --> 00:35:07.341 align:middle
如果您有多人在同一设备上
查看同一文件的话这是允许的

00:35:10.577 --> 00:35:13.614 align:middle
这些就是Researchkit中
组成知情同意模块的步骤

00:35:13.947 --> 00:35:16.884 align:middle
但要真的理解
当您运行App时看起来的样子

00:35:16.950 --> 00:35:18.619 align:middle
接下来我将做演示

00:35:28.061 --> 00:35:31.899 align:middle
开始编码知情同意部分

00:35:32.232 --> 00:35:33.901 align:middle
我需要开始创建同意文件

00:35:34.768 --> 00:35:36.570 align:middle
我先做这个 这是我的同意文件

00:35:37.171 --> 00:35:40.607 align:middle
首先我需要在视觉同意中
来展示同意部分

00:35:41.642 --> 00:35:43.810 align:middle
在这里我创建一个同意部分序列

00:35:44.077 --> 00:35:46.113 align:middle
在Type
Overview上我设置了概要

00:35:46.313 --> 00:35:47.314 align:middle
来创建一个同意部分

00:35:47.848 --> 00:35:51.084 align:middle
由于已经本地化过语言了
我不需要设置标题

00:35:55.255 --> 00:35:58.292 align:middle
我来添加更多部分您可以看到这些动画

00:35:58.559 --> 00:36:00.160 align:middle
我再来添加数据采集部分和隐私部分

00:35:58.559 --> 00:36:00.160 align:middle
我再来添加数据采集部分和隐私部分

00:36:00.360 --> 00:36:03.197 align:middle
每一部分都带有
lorem ipsum文本

00:36:05.699 --> 00:36:10.737 align:middle
此外我想展示如何给
同意文件添加实质内容

00:36:10.804 --> 00:36:13.874 align:middle
内容将添加到同意检查文件部分

00:36:14.408 --> 00:36:17.377 align:middle
或者添加到视觉同意部分
在点击“了解更多”时

00:36:17.444 --> 00:36:19.813 align:middle
发现的内容中

00:36:20.414 --> 00:36:22.282 align:middle
您可以直接指定内容属性

00:36:22.482 --> 00:36:25.485 align:middle
它只是文本或者您可以指定HTML

00:36:25.719 --> 00:36:27.921 align:middle
如果您想要HTML的话

00:36:28.989 --> 00:36:30.257 align:middle
这是我的同意部分

00:36:31.091 --> 00:36:33.694 align:middle
我需要一些同意检查步骤的签名

00:36:34.228 --> 00:36:35.696 align:middle
我将添加参与者签名

00:36:36.597 --> 00:36:38.599 align:middle
就像之前幻灯片里我展示的编码

00:36:38.932 --> 00:36:41.935 align:middle
带有不同标题和不同识别

00:36:42.069 --> 00:36:44.238 align:middle
符的带有名字和预定

00:36:44.571 --> 00:36:46.673 align:middle
图像的调查者签名

00:36:47.274 --> 00:36:48.909 align:middle
我将把这些添加到同意书中

00:36:50.711 --> 00:36:52.212 align:middle
然后 我就有了同意文件

00:36:52.746 --> 00:36:55.883 align:middle
我需要创建任务来展示我的同意过程

00:36:56.350 --> 00:36:58.752 align:middle
这是带有识别符同意书的同意任务

00:36:59.152 --> 00:37:00.921 align:middle
我选这个是因为它与调查不同

00:36:59.152 --> 00:37:00.921 align:middle
我选这个是因为它与调查不同

00:37:01.488 --> 00:37:03.156 align:middle
它应当是我阅读

00:37:03.857 --> 00:37:06.226 align:middle
是我能明白我有了
一个步骤序列它目前是空白的

00:37:06.393 --> 00:37:08.295 align:middle
首先我想要一个视觉同意步骤

00:37:08.896 --> 00:37:11.932 align:middle
我添加在这里有识别符的视觉同意书

00:37:11.999 --> 00:37:14.168 align:middle
我从我的电脑属性中传递文件

00:37:15.235 --> 00:37:18.105 align:middle
接下来我将展示同意分享步骤

00:37:19.139 --> 00:37:22.309 align:middle
它仅有几个属性我需要
设定顺序来充分填充文本

00:37:25.979 --> 00:37:27.748 align:middle
最后我需要一个同意检查步骤

00:37:28.148 --> 00:37:29.383 align:middle
从而让参与者

00:37:29.449 --> 00:37:32.486 align:middle
有机会输入他们的签名并检查整个文件

00:37:33.020 --> 00:37:35.856 align:middle
这样我就从同意文件中
获得了第一个签名

00:37:35.923 --> 00:37:37.658 align:middle
我知道是参与者签名

00:37:38.258 --> 00:37:41.261 align:middle
同意文件本身附着
带有独特任务识别符号的

00:37:41.662 --> 00:37:43.830 align:middle
同意检查步骤

00:37:44.898 --> 00:37:47.734 align:middle
有几项我可以在同意检查步骤额外定制

00:37:48.001 --> 00:37:51.138 align:middle
就像用户输入他们的名字
和在确认对话中他们同意时

00:37:51.205 --> 00:37:52.773 align:middle
所展示的文本一样

00:37:53.440 --> 00:37:55.409 align:middle
我已经把这些步骤添加到
我的步骤序列里了

00:37:56.176 --> 00:37:59.913 align:middle
我只需要扩展表格视图来展示任务

00:38:07.421 --> 00:38:10.524 align:middle
制定我想展示的实际任务

00:38:12.659 --> 00:38:14.962 align:middle
我来演示同意部分

00:38:20.834 --> 00:38:22.069 align:middle
我开始知情同意任务时

00:38:22.903 --> 00:38:25.305 align:middle
直接跳到视觉同意步骤

00:38:25.906 --> 00:38:27.741 align:middle
与一些我们看到的步骤相反

00:38:27.941 --> 00:38:31.411 align:middle
视觉同意步骤每一部分有多个界面

00:38:31.712 --> 00:38:34.147 align:middle
这与我的同意文件的开始部分对应

00:38:35.215 --> 00:38:36.216 align:middle
我导航到第二步

00:38:36.283 --> 00:38:40.087 align:middle
当我向下个界面过渡时
我们有美丽的动画

00:38:42.222 --> 00:38:45.025 align:middle
我想说一下这是预定义好的动画

00:38:46.393 --> 00:38:48.996 align:middle
您可以进一步定制屏幕

00:38:49.596 --> 00:38:50.998 align:middle
例如为了使其适用您的App

00:38:51.331 --> 00:38:53.367 align:middle
如果您用UIAppearance
设置色调

00:38:53.600 --> 00:38:56.403 align:middle
那就会覆盖掉屏幕上方的控制按钮

00:38:56.603 --> 00:38:57.704 align:middle
和下方这里的按钮

00:38:57.838 --> 00:38:59.673 align:middle
并改变图像的颜色

00:38:59.740 --> 00:39:03.143 align:middle
对应的动画可以很好地适用于
您创建的App

00:38:59.740 --> 00:39:03.143 align:middle
对应的动画可以很好地适用于
您创建的App

00:39:04.511 --> 00:39:05.879 align:middle
当我进行下一部分

00:39:06.246 --> 00:39:07.648 align:middle
您将看到“了解更多”按钮

00:39:07.981 --> 00:39:12.186 align:middle
当我点击“了解更多”
我能看到特别同意文件中的实质同意

00:39:14.321 --> 00:39:18.258 align:middle
我继续来到内容分享步骤
这只是一个问题步骤

00:39:18.458 --> 00:39:20.127 align:middle
我问是只向您的机构

00:39:20.194 --> 00:39:22.529 align:middle
还是向世界各地的研究者分享数据

00:39:22.796 --> 00:39:26.433 align:middle
我想向所有您认为
合格的研究者分享数据

00:39:27.267 --> 00:39:31.171 align:middle
那么继续我会看到
同意检查步骤它概括了

00:39:31.772 --> 00:39:34.274 align:middle
文件每部分的标题和内容

00:39:34.341 --> 00:39:36.510 align:middle
我只设置一部分内容

00:39:36.743 --> 00:39:40.113 align:middle
但如果您想为您的同意
书设置特别的同意所有内容的话

00:39:40.380 --> 00:39:44.218 align:middle
那就会是一份需要
用户同意的完整的法律文件

00:39:46.420 --> 00:39:48.689 align:middle
现在有时您想在文件中显示的部分

00:39:48.755 --> 00:39:51.625 align:middle
和您在视觉同意书中显示的部分不同

00:39:52.059 --> 00:39:53.927 align:middle
您可以通过只使用文件内的部分

00:39:54.294 --> 00:39:56.697 align:middle
在调查元件中轻易地

00:39:56.763 --> 00:39:58.365 align:middle
让它只出现在同意检查步骤

00:39:58.799 --> 00:40:02.102 align:middle
或者通过使用完全不同的反对代表

00:39:58.799 --> 00:40:02.102 align:middle
或者通过使用完全不同的反对代表

00:40:02.369 --> 00:40:03.637 align:middle
或第三方选择的同意文件

00:40:03.971 --> 00:40:05.839 align:middle
您可以设置HTML检查内容

00:40:06.039 --> 00:40:09.576 align:middle
如果您需要完全定制
它完全支持在同意检查中

00:40:10.444 --> 00:40:11.879 align:middle
显示您自己的HTML

00:40:14.348 --> 00:40:17.050 align:middle
我一旦同意了您就会
看到我提供的自定义文本

00:40:17.684 --> 00:40:18.886 align:middle
我输入我的名字

00:40:23.290 --> 00:40:25.893 align:middle
继续我可以签字这个我做不好

00:40:26.560 --> 00:40:28.462 align:middle
最后当我完成任务时

00:40:28.729 --> 00:40:30.898 align:middle
您就得到了一个结果就像
在Researchkit上的

00:40:30.964 --> 00:40:31.798 align:middle
其他任务一样

00:40:32.199 --> 00:40:34.201 align:middle
这里有一个与视觉同意相应的步骤结果

00:40:34.268 --> 00:40:37.471 align:middle
显示我看视觉同意用了多长时间

00:40:38.739 --> 00:40:41.341 align:middle
因为我回答了“是”

00:40:42.242 --> 00:40:44.411 align:middle
就分享了一个带有
答案“是”的问题步骤

00:40:45.145 --> 00:40:49.249 align:middle
并且您会看到最终同意检查步骤的结果

00:40:49.550 --> 00:40:52.219 align:middle
包括我输入的签名数据

00:40:52.286 --> 00:40:55.589 align:middle
那么如果我在Swift的
实际目标中找我的名字

00:40:56.223 --> 00:40:59.826 align:middle
我就能拉出我签名的具体的UI图像

00:41:01.962 --> 00:41:04.264 align:middle
以上就是Researchkit中的
知情同意部分

00:41:05.299 --> 00:41:06.834 align:middle
在结束这个不值得的

00:41:06.900 --> 00:41:10.671 align:middle
已经学过的知情同意之前

00:41:10.737 --> 00:41:12.873 align:middle
还有其他事项

00:41:12.940 --> 00:41:14.608 align:middle
需要提一下

00:41:15.042 --> 00:41:16.443 align:middle
我将它们分为两类

00:41:16.944 --> 00:41:18.979 align:middle
第一类是知情部分

00:41:21.348 --> 00:41:23.317 align:middle
第一部分是个形式元素

00:41:24.351 --> 00:41:28.689 align:middle
我们已尝试把视觉同意很好地适用于

00:41:28.989 --> 00:41:31.625 align:middle
小的iPhone
形式元素上的同意文件

00:41:33.427 --> 00:41:37.097 align:middle
但是对于您的App您需要
添加额外的定制内容

00:41:37.431 --> 00:41:40.234 align:middle
您需要试着让内容正好适用于那些设备

00:41:41.902 --> 00:41:44.905 align:middle
接下来我鼓励您使用定制部分

00:41:45.439 --> 00:41:47.674 align:middle
即我们在Researchkit的
建议风格部分

00:41:47.741 --> 00:41:48.942 align:middle
输入的内容

00:41:49.376 --> 00:41:52.980 align:middle
您需要表达您实际

00:41:53.046 --> 00:41:57.084 align:middle
需要的代表您的伦理的
您的道德检查过程

00:41:59.186 --> 00:42:03.690 align:middle
接下来您应该开始计划参与者的问题
是否放在同意过程中？

00:41:59.186 --> 00:42:03.690 align:middle
接下来您应该开始计划参与者的问题
是否放在同意过程中？

00:42:03.757 --> 00:42:05.392 align:middle
就是说 在用户完全同意之前

00:42:05.792 --> 00:42:08.161 align:middle
且在他们实质上加入了您的研究之后

00:42:08.328 --> 00:42:10.364 align:middle
也许他们开始参与后会有更多问题呈现

00:42:11.832 --> 00:42:14.468 align:middle
许多已经在使用
Researchkit中的App

00:42:14.635 --> 00:42:18.505 align:middle
最后整合进一个理解小测验

00:42:19.673 --> 00:42:21.341 align:middle
这可能是有点多余的工作

00:42:21.642 --> 00:42:23.510 align:middle
但是得知参与者会真正理解

00:42:23.577 --> 00:42:27.548 align:middle
您在视觉同意中要表达的
也会让您很放心

00:42:28.949 --> 00:42:31.852 align:middle
为达到这个目的

00:42:32.553 --> 00:42:35.222 align:middle
您可以使用与调查模块同样的步骤

00:42:35.455 --> 00:42:36.957 align:middle
然后整合进同意任务即可完成

00:42:38.926 --> 00:42:40.794 align:middle
另一方面 我们得到同意

00:42:41.695 --> 00:42:42.829 align:middle
这里有几个点

00:42:43.830 --> 00:42:45.399 align:middle
一个是身份验证

00:42:45.999 --> 00:42:50.437 align:middle
Researchkit没有验证您的
参与者身份的功能

00:42:50.737 --> 00:42:54.408 align:middle
但是使用Research Kit的
初始App可以用邮件验证

00:42:54.575 --> 00:42:56.543 align:middle
来确保参与者是一个人

00:42:57.644 --> 00:43:01.014 align:middle
但这个研究可能要来
自您的道德检查过程

00:42:57.644 --> 00:43:01.014 align:middle
但这个研究可能要来
自您的道德检查过程

00:43:01.248 --> 00:43:03.050 align:middle
您也许不需要比它差太多

00:43:03.116 --> 00:43:04.952 align:middle
比如您也许需要用第三方服务

00:43:05.018 --> 00:43:06.620 align:middle
来更可靠地识别身份

00:43:07.754 --> 00:43:09.289 align:middle
一旦您有了身份的概念

00:43:09.723 --> 00:43:12.626 align:middle
您可能想要绑定身份和相关的同意记录

00:43:13.026 --> 00:43:15.729 align:middle
这样一来使用一些加密签名就是合理的

00:43:17.464 --> 00:43:18.765 align:middle
以上就是知情同意

00:43:21.401 --> 00:43:24.271 align:middle
在Researchkit中的
第三个模块是主动任务

00:43:28.775 --> 00:43:31.245 align:middle
一个主动任务是半控制的测试

00:43:31.979 --> 00:43:34.014 align:middle
测试中会给予参与者
执行任务的逐步指示

00:43:34.081 --> 00:43:36.984 align:middle
通过设备上传感器
在收集数据的同时执行任务

00:43:37.718 --> 00:43:39.286 align:middle
这些任务的主要

00:43:39.720 --> 00:43:42.022 align:middle
特性是它们是交互的且时间很短

00:43:42.089 --> 00:43:43.490 align:middle
因此他们是分段的任务

00:43:44.825 --> 00:43:47.961 align:middle
在一个ResearchkitApp
中目前最长的任务大约是六分钟

00:43:48.061 --> 00:43:50.230 align:middle
大多数都只有一两分钟

00:43:52.933 --> 00:43:56.069 align:middle
我们看一下Researchkit中
预定义好的任务

00:43:59.006 --> 00:44:02.075 align:middle
这些任务一般有一些指示步骤

00:43:59.006 --> 00:44:02.075 align:middle
这些任务一般有一些指示步骤

00:44:02.142 --> 00:44:04.811 align:middle
用于给您介绍任务基本上就是告诉您

00:44:05.445 --> 00:44:07.147 align:middle
它是什么还有您需要做什么

00:44:07.948 --> 00:44:10.250 align:middle
然后给您某些类别的指示
让您准备去执行

00:44:10.317 --> 00:44:14.488 align:middle
接着是一个主动的步骤
数据在此时被收集

00:44:15.088 --> 00:44:18.258 align:middle
最后当任务完成时我们感谢您的参与

00:44:20.627 --> 00:44:23.363 align:middle
激活步骤是其成为主动任务的原因

00:44:24.064 --> 00:44:29.303 align:middle
在此激活步骤是一个在我们预定义好的
单独主动任务中的基本类别

00:44:29.570 --> 00:44:33.807 align:middle
或是生成我们需要的
每个任务中特殊行为的子类

00:44:34.575 --> 00:44:36.810 align:middle
现在当我们释放
Researchkit时

00:44:37.277 --> 00:44:38.445 align:middle
有五个主动任务

00:44:39.546 --> 00:44:42.182 align:middle
前三个是用传感器收集的数据打开设备

00:44:42.816 --> 00:44:44.585 align:middle
您被要求来回走因此我们就会有

00:44:44.918 --> 00:44:46.553 align:middle
加速计和陀螺仪收集的我们的步态

00:44:46.620 --> 00:44:48.422 align:middle
和平衡任务的数据

00:44:49.089 --> 00:44:51.892 align:middle
我们来设定健康任务
当我们收集心率数据时

00:44:52.059 --> 00:44:54.127 align:middle
被要求走六分钟

00:44:54.995 --> 00:44:56.964 align:middle
然后设定声音任务当我们使用麦克风时

00:44:57.264 --> 00:44:58.732 align:middle
来收集您的声音信息

00:45:00.601 --> 00:45:04.805 align:middle
此外还有两个任务更多认知测量任务

00:45:05.272 --> 00:45:09.009 align:middle
使用更多交互触摸行为

00:45:09.343 --> 00:45:11.778 align:middle
我们有空间记忆任务其中有序列

00:45:11.845 --> 00:45:14.281 align:middle
被要求重复还有点击速度任务

00:45:14.348 --> 00:45:17.251 align:middle
其中您被要求在两个
按钮间快速转换点击

00:45:19.286 --> 00:45:21.321 align:middle
此外在我们释放
Researchkit以后

00:45:21.388 --> 00:45:23.156 align:middle
还增加了两个主动测试

00:45:23.524 --> 00:45:26.126 align:middle
我们有一个听力测试
还有一个反应时间测试

00:45:26.193 --> 00:45:27.194 align:middle
您将收到一个刺激

00:45:27.327 --> 00:45:29.096 align:middle
您必须摇晃设备做出反应

00:45:30.998 --> 00:45:33.567 align:middle
为了帮您树立一个
有关主动任务如何工作的印象

00:45:34.134 --> 00:45:35.702 align:middle
我将给您做一次演示来作为实践

00:45:36.136 --> 00:45:36.970 align:middle
接下来

00:45:48.882 --> 00:45:50.584 align:middle
这是一个很短的演示

00:45:50.651 --> 00:45:54.721 align:middle
因为我只需要给这些
简单的预定义任务一个示例

00:45:55.689 --> 00:45:58.458 align:middle
我将创建这个主动任务计算特性

00:45:59.059 --> 00:46:01.628 align:middle
该任务是两个指头敲击间隔

00:45:59.059 --> 00:46:01.628 align:middle
该任务是两个指头敲击间隔

00:46:01.929 --> 00:46:03.597 align:middle
我只需要设定几个参数

00:46:03.697 --> 00:46:06.600 align:middle
对每个我们提供的不同的
主动任务来说这几个步骤基本相同

00:46:07.835 --> 00:46:09.269 align:middle
您指定一个识别符

00:46:09.403 --> 00:46:10.804 align:middle
在您的研究中它必须是唯一的

00:46:11.705 --> 00:46:13.307 align:middle
您指定一个拟使用说明

00:46:13.407 --> 00:46:16.710 align:middle
作为一个本地化的字符串

00:46:17.244 --> 00:46:19.813 align:middle
它将被代入我们提供
给每个任务的事先预定的内容中

00:46:20.314 --> 00:46:23.016 align:middle
您指定一个时间段
及您需要用户敲击多长时间

00:46:23.750 --> 00:46:25.419 align:middle
还可以定义一些其他的选项

00:46:25.485 --> 00:46:28.522 align:middle
来控制我们是否在
任务开始和结束时包含实际指示步骤

00:46:29.289 --> 00:46:30.991 align:middle
如果我们提供的对您不合适的话

00:46:31.191 --> 00:46:34.528 align:middle
您也许会想提供您自己的指令

00:46:37.097 --> 00:46:39.733 align:middle
现在我们有了主动任务

00:46:39.933 --> 00:46:41.735 align:middle
并且想要把它增加到桌面视图上

00:46:41.935 --> 00:46:43.704 align:middle
我只需要做几个改动来支持它

00:46:44.705 --> 00:46:46.773 align:middle
我把它添加到我的任务列表

00:46:48.909 --> 00:46:51.512 align:middle
作为一个代表任务
提及我的计算属性

00:46:52.045 --> 00:46:54.848 align:middle
当我运行它时我应该有第三个任务

00:46:55.148 --> 00:46:56.750 align:middle
就是两个指头敲击任务

00:46:59.520 --> 00:47:02.256 align:middle
拟使用说明填充在这里

00:46:59.520 --> 00:47:02.256 align:middle
拟使用说明填充在这里

00:47:02.589 --> 00:47:05.726 align:middle
其余内容本地化到
所有iOS支持的语言

00:47:05.792 --> 00:47:09.530 align:middle
我们保持这个到所有
我们添加的主动任务

00:47:11.164 --> 00:47:13.700 align:middle
这里是我们的下一步指示

00:47:13.767 --> 00:47:14.968 align:middle
告诉我们该做什么

00:47:15.035 --> 00:47:16.737 align:middle
我选择按钮来点击

00:47:17.271 --> 00:47:20.407 align:middle
当我进入任务并开始点击前并不计时

00:47:20.474 --> 00:47:21.542 align:middle
我现在开始点击

00:47:22.576 --> 00:47:26.513 align:middle
现在我们看到计时器走得越来越快

00:47:27.114 --> 00:47:28.682 align:middle
任务结束了

00:47:29.449 --> 00:47:31.485 align:middle
当任务结束时我得到一些结果

00:47:31.718 --> 00:47:32.986 align:middle
我们看一下它是如何运作的

00:47:33.854 --> 00:47:39.059 align:middle
因为这是其中一个
认知任务数据没有被写到文件中

00:47:39.493 --> 00:47:41.762 align:middle
数据被存放在内存里

00:47:42.462 --> 00:47:44.431 align:middle
我已经在JSON连载我们看一下

00:47:44.898 --> 00:47:46.567 align:middle
这里有了我们的任务

00:47:46.633 --> 00:47:48.569 align:middle
同样我们有开始和结束日期
和其他各种属性

00:47:49.369 --> 00:47:52.272 align:middle
我们有与介绍指示相对应的步骤结果

00:47:52.706 --> 00:47:55.542 align:middle
我们有与激活步骤相对应的步骤结果

00:47:56.276 --> 00:47:57.744 align:middle
它包含一个子结果

00:47:57.911 --> 00:48:00.981 align:middle
就是两指敲击间隔任务的敲击间隔结果

00:47:57.911 --> 00:48:00.981 align:middle
就是两指敲击间隔任务的敲击间隔结果

00:48:02.249 --> 00:48:05.085 align:middle
反过来它包含着一列样本

00:48:05.319 --> 00:48:07.788 align:middle
样本包含着每次敲击的时间

00:48:08.288 --> 00:48:13.760 align:middle
和屏幕上的坐标位置及识别符
显示我敲击的那个按钮

00:48:14.394 --> 00:48:16.663 align:middle
敲击到按钮外的也记录在此

00:48:17.464 --> 00:48:22.402 align:middle
此外这个结果也有
一些其它属性细节见屏幕

00:48:22.469 --> 00:48:25.539 align:middle
我想讲的是这些位置
对于其它种类的主动任务

00:48:27.007 --> 00:48:28.242 align:middle
对应着什么

00:48:28.575 --> 00:48:31.445 align:middle
您将看到基于文件的结果
那些是带着指向磁盘特定位置的

00:48:31.745 --> 00:48:34.915 align:middle
文件URL的ORKFile结果

00:48:35.449 --> 00:48:38.819 align:middle
它们会出现在您设定
任务控制器时指定的输出目录中

00:48:41.321 --> 00:48:44.124 align:middle
以上就是我的
Researchkit主动任务演示

00:48:51.632 --> 00:48:54.101 align:middle
今天我们讲了
Researchkit的三个模块

00:48:54.168 --> 00:48:57.104 align:middle
调查、知情同意、主动任务

00:48:57.871 --> 00:48:59.840 align:middle
但我想还不能结束

00:49:00.541 --> 00:49:03.443 align:middle
我想Researchkit
随着第三方

00:49:03.677 --> 00:49:06.480 align:middle
就是你们的贡献将会持续扩充

00:49:07.147 --> 00:49:09.550 align:middle
我们持续增加附加功能

00:49:09.816 --> 00:49:12.619 align:middle
使它与我们最新版本的软件同步

00:49:14.188 --> 00:49:16.757 align:middle
因此有你们的贡献它将变得更好

00:49:17.090 --> 00:49:18.325 align:middle
让我们谈谈您可以如何贡献

00:49:25.199 --> 00:49:28.302 align:middle
Researchkit只是
GitHub上的一个开放源码项目

00:49:28.836 --> 00:49:31.104 align:middle
那意味着您可以像
和其他开放源码项目一样

00:49:31.238 --> 00:49:33.106 align:middle
和它进行交互

00:49:34.408 --> 00:49:37.144 align:middle
首先您需要选一个现有议题
或者开始一个新的并且评论它

00:49:37.444 --> 00:49:39.513 align:middle
从中我们得知您正在继续工作

00:49:40.981 --> 00:49:43.183 align:middle
然后您想和我们分享什么事项时

00:49:43.550 --> 00:49:44.785 align:middle
您要交一个pull请求

00:49:44.852 --> 00:49:46.753 align:middle
此时Apple的评审

00:49:47.221 --> 00:49:50.490 align:middle
和我们外部活跃的贡献者将评审

00:49:51.024 --> 00:49:53.927 align:middle
您贡献的质量

00:49:53.994 --> 00:49:56.129 align:middle
它将如何与
Researchkit匹配

00:49:56.263 --> 00:49:57.397 align:middle
及如何融入该项目

00:49:59.499 --> 00:50:02.469 align:middle
迄今为止我们收到的修改中

00:49:59.499 --> 00:50:02.469 align:middle
迄今为止我们收到的修改中

00:50:02.903 --> 00:50:05.472 align:middle
90%已经整合进代码库

00:50:05.939 --> 00:50:07.341 align:middle
我认为这是个良好的起点

00:50:08.108 --> 00:50:10.143 align:middle
让我们的项目可以向前发展

00:50:11.912 --> 00:50:13.680 align:middle
一旦您的修改被整合

00:50:13.747 --> 00:50:15.082 align:middle
尽管这不是结束

00:50:15.782 --> 00:50:16.850 align:middle
此后某个时刻

00:50:18.318 --> 00:50:20.220 align:middle
我们将启动整合过程

00:50:20.287 --> 00:50:22.289 align:middle
从而把Researchkit
带向一个更高版本

00:50:22.356 --> 00:50:25.359 align:middle
事实上我们昨天已经结束了第一个版本

00:50:25.626 --> 00:50:28.061 align:middle
用Researchkit 1

00:50:29.997 --> 00:50:31.999 align:middle
在这个过程中我们会再次

00:50:32.232 --> 00:50:34.134 align:middle
审核您的修改比如可访问性

00:50:34.201 --> 00:50:36.637 align:middle
也会本地化到iOS支持的所有语言

00:50:37.237 --> 00:50:39.473 align:middle
在此请您帮忙

00:50:40.307 --> 00:50:44.111 align:middle
希望工作听起来不算多

00:50:44.278 --> 00:50:45.379 align:middle
您愿意帮忙

00:50:45.646 --> 00:50:48.682 align:middle
让我们再来看看您能贡献的其它领域

00:50:51.852 --> 00:50:54.154 align:middle
我们之前提到其中一个领域

00:50:54.221 --> 00:51:00.194 align:middle
是主动任务我们已经有两个新的
上半月公众贡献的主动任务

00:50:54.221 --> 00:51:00.194 align:middle
是主动任务我们已经有两个新的
上半月公众贡献的主动任务

00:51:02.262 --> 00:51:04.298 align:middle
我们看到还有人贡献了答案格式

00:51:04.364 --> 00:51:08.068 align:middle
有人添加了一个垂直滑块答案表格

00:51:09.002 --> 00:51:13.340 align:middle
有人添加了新的图像捕捉步骤

00:51:16.076 --> 00:51:18.946 align:middle
除此以外我们期望看到更多领域

00:51:19.012 --> 00:51:20.380 align:middle
比如设备支持领域的贡献

00:51:21.048 --> 00:51:26.486 align:middle
所以如果您有硬件设备
您认为可以用于医疗调查研究

00:51:26.720 --> 00:51:28.889 align:middle
您可以为
Researchkit添加支持

00:51:29.323 --> 00:51:31.124 align:middle
来帮助更多研究者在App中使用它

00:51:32.292 --> 00:51:34.928 align:middle
我们也希望添加一些后台集成

00:51:35.229 --> 00:51:36.864 align:middle
因此如果您有后台服务

00:51:36.930 --> 00:51:38.932 align:middle
您认为可以很好地整合进
Researchkit

00:51:38.999 --> 00:51:40.934 align:middle
并且它可以为研究者提供数据存储方案

00:51:41.335 --> 00:51:44.771 align:middle
那么您给Researchkit添加
代码来支持您的后台将是很有意义的

00:51:45.372 --> 00:51:46.874 align:middle
我们知道有一些贡献者

00:51:46.940 --> 00:51:48.242 align:middle
他们已经在做了

00:51:50.711 --> 00:51:53.780 align:middle
现在我们不谈细节 我想多谈一点

00:51:53.847 --> 00:51:58.485 align:middle
主动任务您已看到主动任务的结构

00:52:01.822 --> 00:52:06.760 align:middle
它有指示步骤 倒计时步骤

00:52:07.628 --> 00:52:09.296 align:middle
激活步骤和完成步骤

00:52:10.531 --> 00:52:15.869 align:middle
激活步骤当您实施您的
激活步骤时基础分类中

00:52:16.303 --> 00:52:18.338 align:middle
已经有一些有用的行为

00:52:19.840 --> 00:52:22.976 align:middle
因而激活步骤支持记录配置

00:52:23.277 --> 00:52:24.811 align:middle
当您为了从不同设备的传感器中

00:52:25.045 --> 00:52:26.680 align:middle
自动采集数据

00:52:27.581 --> 00:52:31.251 align:middle
来配置您的激活步骤时
您不用写很多代码

00:52:32.019 --> 00:52:34.688 align:middle
我们仔细看一下这是如何运作的

00:52:37.791 --> 00:52:38.992 align:middle
当下我们有五个

00:52:39.059 --> 00:52:40.794 align:middle
内置于
Researchkit的记录仪

00:52:40.861 --> 00:52:44.164 align:middle
有加速记录 运动记录

00:52:44.231 --> 00:52:46.934 align:middle
有从CoreMotion
采集数据的计步器

00:52:47.601 --> 00:52:49.303 align:middle
有从HealthKid采集数据的

00:52:49.369 --> 00:52:50.537 align:middle
健康质量记录

00:52:50.771 --> 00:52:52.573 align:middle
例如 它可以用来采集心率

00:52:54.808 --> 00:52:56.143 align:middle
我们也有位置记录

00:52:56.210 --> 00:52:58.378 align:middle
我们可以在您激活步骤的过程中

00:52:58.679 --> 00:53:00.781 align:middle
从Core Location
获得信息

00:52:58.679 --> 00:53:00.781 align:middle
从Core Location
获得信息

00:53:02.850 --> 00:53:05.919 align:middle
现在当您在iOS上使用这些时

00:53:05.986 --> 00:53:08.121 align:middle
您需要取得用户的同意来进入数据

00:53:08.655 --> 00:53:10.724 align:middle
Researchkit
不是一个系统框架

00:53:10.791 --> 00:53:12.092 align:middle
它不允许您绕过这些控制

00:53:12.492 --> 00:53:15.095 align:middle
但是我们试着理顺这个过程

00:53:15.162 --> 00:53:18.398 align:middle
如果您使用一个或多个步骤
任务视图控制器会通知

00:53:18.699 --> 00:53:24.505 align:middle
并在指示之后步骤开始前询问许可

00:53:27.040 --> 00:53:29.476 align:middle
所以我稍微讲一下记录器是如何使用的

00:53:29.743 --> 00:53:31.378 align:middle
以Researchkit中这个

00:53:31.545 --> 00:53:33.480 align:middle
六分钟走路的健康步行为例

00:53:34.515 --> 00:53:35.549 align:middle
这是健康步行

00:53:35.782 --> 00:53:37.584 align:middle
它是
ORKActiveStep的子类

00:53:38.452 --> 00:53:40.787 align:middle
当您对ORKActiveStep
做子分类时

00:53:40.854 --> 00:53:42.789 align:middle
您也对激活步骤视图控制器做了子分类

00:53:43.357 --> 00:53:44.958 align:middle
您有一个激活步骤视图控制器

00:53:45.292 --> 00:53:47.327 align:middle
它有个返回指针

00:53:49.296 --> 00:53:52.733 align:middle
现在给健康步行配置了记录器配置

00:53:53.166 --> 00:53:55.636 align:middle
它将有一个带有特定的唯一的

00:53:56.270 --> 00:53:58.205 align:middle
识别符的健康质量记录器

00:53:58.272 --> 00:54:01.775 align:middle
它将与结果匹配您马上就能看到

00:53:58.272 --> 00:54:01.775 align:middle
它将与结果匹配您马上就能看到

00:54:03.010 --> 00:54:05.479 align:middle
这个记录器配置有几个参数

00:54:05.812 --> 00:54:07.047 align:middle
有数量种类

00:54:07.281 --> 00:54:09.183 align:middle
在此就是心率数量种类

00:54:09.650 --> 00:54:13.954 align:middle
有单位 在此就是心率监
视器上的每分钟心跳

00:54:15.455 --> 00:54:17.224 align:middle
您可以配置不止一个记录器

00:54:17.324 --> 00:54:20.127 align:middle
这个例子中就配置了计步器

00:54:20.360 --> 00:54:21.728 align:middle
再次，有了不同的识别符

00:54:22.095 --> 00:54:24.398 align:middle
当您运行健康步行时

00:54:25.866 --> 00:54:27.034 align:middle
您可从记录器中识别结果

00:54:28.235 --> 00:54:31.605 align:middle
当步行开始 您有两个记录器

00:54:32.005 --> 00:54:33.307 align:middle
一个是健康质量记录

00:54:33.674 --> 00:54:34.675 align:middle
一个是计步器

00:54:35.209 --> 00:54:37.744 align:middle
每一个都将用到

00:54:37.911 --> 00:54:41.481 align:middle
健康步行所附加的配置目标模型

00:54:42.983 --> 00:54:45.485 align:middle
当任务完成时您会得到步骤结果

00:54:46.086 --> 00:54:47.454 align:middle
作为您任务结果的一部分

00:54:47.521 --> 00:54:50.457 align:middle
步骤结果将包含两个子文件结果

00:54:50.691 --> 00:54:56.463 align:middle
每一个都是带识别符号的
与配置对应的记录

00:54:56.897 --> 00:55:02.669 align:middle
如前所述文件URL将指向输出
目录的文件在此数据会被记录

00:54:56.897 --> 00:55:02.669 align:middle
如前所述文件URL将指向输出
目录的文件在此数据会被记录

00:55:03.637 --> 00:55:05.572 align:middle
Researchkit中的
实际序列化格式

00:55:05.639 --> 00:55:07.341 align:middle
在这里是JSON

00:55:07.407 --> 00:55:09.109 align:middle
但如果您需要不同的格式

00:55:09.176 --> 00:55:11.011 align:middle
可以直接增加一个不同格式

00:55:13.313 --> 00:55:14.248 align:middle
以上是记录器

00:55:15.148 --> 00:55:19.019 align:middle
现在我已经提到做一个
客户激活步骤时您需要的过程

00:55:19.620 --> 00:55:22.523 align:middle
但我们在结束前还是描述一下

00:55:23.724 --> 00:55:25.392 align:middle
当您要创建您的定制激活步骤时

00:55:26.193 --> 00:55:28.228 align:middle
您先将
ORKActiveStep做子分类

00:55:28.462 --> 00:55:30.163 align:middle
并将激活步骤视图控制器做子分类

00:55:30.497 --> 00:55:32.733 align:middle
通常我们有配对的分类

00:55:33.867 --> 00:55:35.235 align:middle
然后您需要构建UI

00:55:35.936 --> 00:55:37.404 align:middle
如果您需要控制整个屏幕

00:55:37.471 --> 00:55:39.139 align:middle
那就意味着您将彻底覆盖

00:55:39.206 --> 00:55:40.807 align:middle
您的激活步骤视图控制器的UI

00:55:41.175 --> 00:55:43.277 align:middle
或者意味着您要定制视图

00:55:43.510 --> 00:55:46.446 align:middle
使其适合Researchkit
内置的激活步骤模板

00:55:47.781 --> 00:55:52.653 align:middle
如果您需要使用我们已有的
记录器来采集传感器数据

00:55:53.353 --> 00:55:56.190 align:middle
您就得配置一些记录器
并且添加新的结果类别

00:55:56.857 --> 00:56:02.162 align:middle
以认知游戏为例您看到
这里我们有了点击间隔任务

00:55:56.857 --> 00:56:02.162 align:middle
以认知游戏为例您看到
这里我们有了点击间隔任务

00:56:03.664 --> 00:56:07.134 align:middle
那是个我们特别创建的结果类别的例子

00:56:07.768 --> 00:56:09.703 align:middle
当您创建类似这个的激活类别时

00:56:09.770 --> 00:56:12.306 align:middle
您需要相应地创建您自己的类别结构

00:56:12.606 --> 00:56:17.611 align:middle
该类别结构必须可序列化

00:56:17.678 --> 00:56:19.746 align:middle
那将引出您要包括在结果中的一些限制

00:56:22.983 --> 00:56:24.251 align:middle
以上是结果步骤

00:56:24.585 --> 00:56:25.853 align:middle
我们谈到

00:56:26.887 --> 00:56:29.022 align:middle
三个模块和如何给
Researchkit贡献

00:56:30.424 --> 00:56:31.825 align:middle
我想给你们一点想法

00:56:32.326 --> 00:56:36.163 align:middle
首先 Researchkit
是开放源码的

00:56:36.496 --> 00:56:40.400 align:middle
我想让您做一件事复制这个结果

00:56:40.467 --> 00:56:42.469 align:middle
看它如何适用于您的App

00:56:43.537 --> 00:56:45.639 align:middle
因为它是开放源码的您可以做出贡献

00:56:45.906 --> 00:56:47.941 align:middle
可以对医疗研究的未来有所作为

00:56:48.609 --> 00:56:49.710 align:middle
这是真正的要点

00:56:49.877 --> 00:56:52.312 align:middle
这是一个开放源码项目
它会成为您让它成为的样子

00:56:54.147 --> 00:56:57.117 align:middle
还有几个其他领域您可以得到
Researchkit的附加信息

00:56:59.052 --> 00:57:00.487 align:middle
我们的主页

00:56:59.052 --> 00:57:00.487 align:middle
我们的主页

00:57:00.921 --> 00:57:03.257 align:middle
ResearchKit.org

00:57:03.891 --> 00:57:05.826 align:middle
我们有包含在
Researchkit中的

00:57:05.893 --> 00:57:08.529 align:middle
不同项目的链接既有使用
ResearchKit的App

00:57:08.662 --> 00:57:10.664 align:middle
也有我们再次链接的框架本身

00:57:12.232 --> 00:57:15.469 align:middle
举例来说如果您是主调查人员

00:57:15.536 --> 00:57:19.373 align:middle
您想联系到能帮助您的项目的人们

00:57:19.840 --> 00:57:22.709 align:middle
您可以联系我们
ResearchKit@Apple.com

00:57:23.510 --> 00:57:25.712 align:middle
最后关于技术支持我有两个邮箱列表

00:57:25.779 --> 00:57:28.015 align:middle
如果您需要联系正在使用该框架的用户

00:57:28.849 --> 00:57:31.785 align:middle
或者咨询如何使用可以联系
ResearchKit Users

00:57:32.186 --> 00:57:35.255 align:middle
如果是关于如何贡献的问题可以联系
ResearchKit Dev

00:57:36.723 --> 00:57:39.693 align:middle
当您尝试组建一个研究App时
这里有一些相关部分可以帮您

00:57:40.127 --> 00:57:41.762 align:middle
昨天HealthKit有新消息

00:57:42.029 --> 00:57:45.365 align:middle
我们介绍了一些新的数据种类

00:57:45.432 --> 00:57:48.202 align:middle
您可以在线访问

00:57:48.502 --> 00:57:51.705 align:middle
我们今天早上也有HealthKit
和ResearchKit研讨会

00:57:51.772 --> 00:57:53.073 align:middle
明天上午11:00也有

00:57:53.841 --> 00:57:57.845 align:middle
最后有一个健康
和健身的研讨会一共半小时

00:57:57.911 --> 00:57:58.912 align:middle
希望您参与

00:57:59.913 --> 00:58:02.583 align:middle
非常感谢 感谢聆听
