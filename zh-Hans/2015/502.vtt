WEBVTT

00:00:20.020 --> 00:00:21.555 align:middle
HTTP实时流媒体播放的扩展

00:00:25.425 --> 00:00:26.326 align:middle
大家早上好！

00:00:27.427 --> 00:00:31.098 align:middle
欢迎参加今年的全球开发者大会

00:00:31.532 --> 00:00:33.901 align:middle
这是您参加的
第一个真正的讲座环节

00:00:34.601 --> 00:00:35.836 align:middle
因此欢迎您！

00:00:37.137 --> 00:00:39.106 align:middle
今天...
谢谢你

00:00:39.773 --> 00:00:44.411 align:middle
今天我们将讨论
HTTP实时流媒体播放的

00:00:44.678 --> 00:00:46.380 align:middle
一个非常激动人心的扩展

00:00:47.681 --> 00:00:53.453 align:middle
你知道我们一直在关注
究竟是什么阻止了你们

00:00:53.520 --> 00:00:57.591 align:middle
以自己喜欢的方式
使用HLS来部署内容

00:00:58.292 --> 00:01:00.027 align:middle
而内容保护

00:00:58.292 --> 00:01:00.027 align:middle
而内容保护

00:01:00.260 --> 00:01:05.699 align:middle
是指让您的用户观看或收听您的内容

00:01:06.400 --> 00:01:08.635 align:middle
却不授权使用它

00:01:09.203 --> 00:01:14.308 align:middle
一直是一个真正有难度的问题
你们中的很多人曾经不得不设法应对

00:01:15.075 --> 00:01:18.745 align:middle
而且随着比特率的升高
以及分辨率的上升

00:01:18.912 --> 00:01:20.614 align:middle
那些需求将只会增大

00:01:21.481 --> 00:01:27.588 align:middle
那也是我为何
终于能够高兴地宣布

00:01:28.589 --> 00:01:30.390 align:middle
FairPlay流媒体的诞生

00:01:31.692 --> 00:01:32.626 align:middle
那么它是什么？

00:01:34.394 --> 00:01:40.901 align:middle
首先
它是我们最出色的内容保护技术

00:01:41.101 --> 00:01:46.139 align:middle
它的封装方式允许您将其用于
保护您的HLS内容

00:01:47.140 --> 00:01:48.175 align:middle
现在 它已不是新事物了

00:01:48.809 --> 00:01:52.279 align:middle
我们在过去三年一直在

00:01:52.880 --> 00:01:55.082 align:middle
与一些主要内容合作伙伴进行合作

00:01:55.849 --> 00:01:59.553 align:middle
帮助它们在app
或Apple TV上部署FPS

00:02:00.187 --> 00:02:05.158 align:middle
现在它已被用来保护大量的内容

00:02:05.425 --> 00:02:10.597 align:middle
包括一些世界上最热门的
电影和电视节目

00:02:15.836 --> 00:02:21.642 align:middle
现在您可以将它用于iOS
及Apple TV和OS X上

00:02:22.910 --> 00:02:26.513 align:middle
当然
在我们的移动设备上 电池寿命是王道

00:02:27.080 --> 00:02:30.217 align:middle
所以当我们设计
FairPlay流媒体的时候

00:02:31.185 --> 00:02:35.656 align:middle
我们所做的每个决定都是建立在
为您实现良好的电池寿命的基础上的

00:02:35.756 --> 00:02:38.759 align:middle
我们选择的编解码器
我们选择的加密技术

00:02:39.092 --> 00:02:41.929 align:middle
我们的实施方式
甚至我们利用的硬件

00:02:42.329 --> 00:02:45.632 align:middle
所以您会有极大的安全性
也会有很好的电池寿命

00:02:47.000 --> 00:02:52.806 align:middle
而且它也与AirPlay无缝集成
因此它会伴随全面的保护

00:02:54.141 --> 00:02:57.945 align:middle
不过您可能会说：
“好吧 那听上去很不错

00:02:58.412 --> 00:02:59.546 align:middle
但是我有很多内容

00:02:59.680 --> 00:03:04.251 align:middle
我的意思是Apple
将如何让我为这个FPS付费？

00:02:59.680 --> 00:03:04.251 align:middle
我的意思是Apple
将如何让我为这个FPS付费？

00:03:04.318 --> 00:03:07.454 align:middle
它将是按照影片收费？
按每次播放还是统一价格？”

00:03:08.722 --> 00:03:12.326 align:middle
我们反复尝试
最后我们确定采用统一价格

00:03:13.794 --> 00:03:14.628 align:middle
零

00:03:15.996 --> 00:03:19.800 align:middle
如果大家每年向我们
支付99美元的开发者费用

00:03:20.100 --> 00:03:24.838 align:middle
您将不必再向苹果公司支付一分钱
就能尽情使用FPS

00:03:26.240 --> 00:03:31.645 align:middle
那么现在 观众中间任何从事
市场营销的朋友可能会说这样的话：

00:03:31.712 --> 00:03:33.146 align:middle
“哦 那听上去棒极了！”

00:03:33.480 --> 00:03:36.483 align:middle
而坐你旁边的工程师可能会说：
“不 不 真的吗？ 它是什么？”

00:03:36.850 --> 00:03:37.784 align:middle
好了 那么

00:03:38.352 --> 00:03:41.121 align:middle
它实际上是非常简单的

00:03:41.922 --> 00:03:46.326 align:middle
我们所做的就是着手解决了DRM系统

00:03:46.393 --> 00:03:48.962 align:middle
最重要的组成部分 即密钥保护

00:03:49.963 --> 00:03:55.335 align:middle
那么FPS在本质上及实际上是一个
安全的密钥传送系统

00:03:55.669 --> 00:03:59.006 align:middle
它是一种将密钥
从您在互联网上的服务器

00:03:59.473 --> 00:04:01.775 align:middle
转移到设备上的方式

00:03:59.473 --> 00:04:01.775 align:middle
转移到设备上的方式

00:04:02.543 --> 00:04:07.648 align:middle
让您在该设备上使用密钥
同时不让攻击者获取它并解密您的内容

00:04:08.849 --> 00:04:12.920 align:middle
在设计方面
我们让它容易使用和采用

00:04:13.487 --> 00:04:15.822 align:middle
我们认识到你们中的很多人

00:04:15.889 --> 00:04:20.360 align:middle
尤其是当您以流媒体提供
高级内容或订阅内容时

00:04:20.427 --> 00:04:22.963 align:middle
您已经在与某种安全后端对话了

00:04:23.664 --> 00:04:26.233 align:middle
因此我们设计了FPS

00:04:26.300 --> 00:04:30.003 align:middle
让传送这部分工作成为不可知
让您使用的协议成为隐蔽

00:04:30.070 --> 00:04:34.842 align:middle
如果您拥有安全连接
您可以极其容易地采用FPS

00:04:35.342 --> 00:04:37.878 align:middle
如果没有 你也可以使用HTTPS
它是一个很不错的选择

00:04:39.346 --> 00:04:42.683 align:middle
最后 过去很多朋友
问我关于HDCP方面的事情

00:04:43.250 --> 00:04:45.586 align:middle
FPS就是这个问题的答案

00:04:46.987 --> 00:04:51.992 align:middle
如果您的设备连接了电视
或其他外部输入

00:04:52.593 --> 00:04:54.094 align:middle
它一定是HDMI

00:04:54.661 --> 00:04:56.763 align:middle
而HDCP一定是活跃的

00:04:57.164 --> 00:05:00.400 align:middle
否则任何FPS内容播放都会失败

00:04:57.164 --> 00:05:00.400 align:middle
否则任何FPS内容播放都会失败

00:05:01.235 --> 00:05:02.135 align:middle
没有例外

00:05:04.204 --> 00:05:07.207 align:middle
当我们设计它的时候

00:05:07.708 --> 00:05:13.013 align:middle
我们知道有很多商业规则或逻辑的区别
而每个人都有自己的口味

00:05:13.080 --> 00:05:15.382 align:middle
而我们不希望
建立一个庞大而复杂的东西

00:05:15.749 --> 00:05:17.284 align:middle
并迫使你们进入我们的盒子

00:05:17.784 --> 00:05:21.255 align:middle
所以我们建立了
这个密钥传送机制

00:05:21.722 --> 00:05:25.259 align:middle
我们并不是创建了一种
权利表达语言评估工具

00:05:25.325 --> 00:05:28.695 align:middle
或者是一长串您需要遵守的策略

00:05:29.363 --> 00:05:33.667 align:middle
而那意味着
如果您的商业逻辑要求那些东西

00:05:33.734 --> 00:05:35.936 align:middle
您是可以掌控的
您依然是守门员

00:05:36.470 --> 00:05:39.273 align:middle
因此 一旦您为媒体堆栈
赋予了一个FPS密钥

00:05:39.339 --> 00:05:40.774 align:middle
毫无问题
我们将播放它

00:05:40.841 --> 00:05:42.376 align:middle
我们将保护密钥
我们将去播放它

00:05:43.076 --> 00:05:46.146 align:middle
如果您需要实施某种策略实施

00:05:46.246 --> 00:05:50.751 align:middle
或进行用户认证
或对每个设备插槽进行管理

00:05:51.151 --> 00:05:53.987 align:middle
那么您就可以在FPS上那么做

00:05:54.421 --> 00:05:57.224 align:middle
而且它将是非常容易整合的

00:05:58.458 --> 00:06:00.694 align:middle
那么现在让我们讨论一些具体步骤

00:05:58.458 --> 00:06:00.694 align:middle
那么现在让我们讨论一些具体步骤

00:06:01.161 --> 00:06:03.096 align:middle
那就是FPS为您提供的基本功能

00:06:03.430 --> 00:06:06.200 align:middle
让我们讨论一下
您采用它需要采取的步骤

00:06:07.467 --> 00:06:09.002 align:middle
主要有三步

00:06:09.603 --> 00:06:12.039 align:middle
第一步
也极可能是最重要的一步是

00:06:12.372 --> 00:06:15.709 align:middle
由于FPS是一个在线密钥传送协议

00:06:16.343 --> 00:06:20.447 align:middle
您必须在线获取您的密钥
而一旦播放停止密钥即消失

00:06:21.248 --> 00:06:26.386 align:middle
您需要把我们所谓的“密钥安全模块”
集成到您的密钥服务器中

00:06:27.421 --> 00:06:31.024 align:middle
因此那是最重大的一步
稍后我们将详细讨论那个话题

00:06:31.692 --> 00:06:35.462 align:middle
但是第二件事情是
您需向您的应用添加一些代码

00:06:36.029 --> 00:06:39.166 align:middle
称为AV Asset Resource Loader Delegate

00:06:39.766 --> 00:06:45.372 align:middle
那段代码负责将来自
AV Foundation的密钥请求传送到后端

00:06:45.706 --> 00:06:49.610 align:middle
然后将您后端发出的响应
并返回给AV Foundation

00:06:50.310 --> 00:06:52.513 align:middle
最后您需要做的是准备您的内容

00:06:52.579 --> 00:06:57.784 align:middle
而那意味着您需要
使用AES示例加密法将其加密

00:06:58.085 --> 00:07:03.290 align:middle
巧的是 这是我们三年前引入的

00:06:58.085 --> 00:07:03.290 align:middle
巧的是 这是我们三年前引入的

00:07:04.558 --> 00:07:10.864 align:middle
因此与最初HLS使用的传统
整段代码加密不同的是

00:07:11.098 --> 00:07:14.168 align:middle
这种加密法仅加密
每段示例代码中小的片段

00:07:14.434 --> 00:07:19.106 align:middle
这确保了我们能够
在系统基本水平上进行解密工作

00:07:20.140 --> 00:07:22.476 align:middle
因此您需要选择一个内容密钥

00:07:22.543 --> 00:07:24.111 align:middle
将其存放在您的后端数据库内

00:07:24.411 --> 00:07:25.479 align:middle
对您的内容进行加密

00:07:25.746 --> 00:07:28.649 align:middle
然后将对那个密钥的引用加入播放列表

00:07:28.882 --> 00:07:31.652 align:middle
以便当您的那小段代码
接到对密钥的请求时

00:07:31.718 --> 00:07:33.854 align:middle
能够知道向后端请求哪个密钥

00:07:35.155 --> 00:07:40.928 align:middle
那么我接下来将要做的
是进一步详述这三个步骤

00:07:41.328 --> 00:07:45.465 align:middle
在那之前 我想介绍我的一位同事

00:07:45.799 --> 00:07:47.434 align:middle
他是FairPlay团队成员之一

00:07:47.734 --> 00:07:48.936 align:middle
詹保罗 法索里

00:07:50.070 --> 00:07:50.904 align:middle
欢迎！

00:07:56.143 --> 00:07:57.044 align:middle
谢谢你 罗哲斯！

00:07:58.145 --> 00:08:00.214 align:middle
大家早上好！
我叫詹保罗 法索里

00:07:58.145 --> 00:08:00.214 align:middle
大家早上好！
我叫詹保罗 法索里

00:08:00.280 --> 00:08:02.783 align:middle
是Apple的FPS工程师

00:08:03.684 --> 00:08:06.753 align:middle
继罗哲斯所做的概述
我想跟大家谈一下

00:08:06.820 --> 00:08:09.256 align:middle
设计一个FPS系统需要些什么

00:08:09.323 --> 00:08:10.791 align:middle
我想讲的第一件事

00:08:11.291 --> 00:08:17.631 align:middle
是我们所谓的FairPlay流媒体
证书的目的和重要性

00:08:18.365 --> 00:08:23.270 align:middle
接下来
我将识别系统和数据流中的活动要素

00:08:24.638 --> 00:08:27.975 align:middle
然后我将讨论苹果公司将在您
构建的东西中会提供哪些东西

00:08:28.041 --> 00:08:31.144 align:middle
而在您将构建的东西中
我们将先从服务器端讲起

00:08:31.211 --> 00:08:36.683 align:middle
以及如何将Roger刚才所讲的
密钥安全模块集成到您的密钥服务器中

00:08:37.217 --> 00:08:39.586 align:middle
我们将讨论如何测试集成

00:08:40.254 --> 00:08:45.492 align:middle
接下来我们将讨论客户端
以及如何将FPS集成到您的应用中

00:08:45.559 --> 00:08:52.232 align:middle
然后我们将讨论
您将对内容制作工作流的更新

00:08:52.966 --> 00:08:57.337 align:middle
以便将内容加密 并确认
您将对工作流的更改

00:08:59.239 --> 00:09:02.910 align:middle
那么当我们讨论FPS证书的时候

00:08:59.239 --> 00:09:02.910 align:middle
那么当我们讨论FPS证书的时候

00:09:03.010 --> 00:09:05.946 align:middle
我们有那些证书是为了

00:09:06.013 --> 00:09:12.519 align:middle
能够将您的FPS部署
和那里已经存在的部署区分开来

00:09:13.053 --> 00:09:16.290 align:middle
之所以需要它们是因为有了它们

00:09:16.356 --> 00:09:20.494 align:middle
您的客户才可以在他们的设备上
实际播放他们的内容

00:09:21.929 --> 00:09:27.968 align:middle
出于这些原因
保护FPS证书资产资源就十分重要了

00:09:28.202 --> 00:09:30.204 align:middle
不管是当它们被部署在服务器上

00:09:30.270 --> 00:09:31.505 align:middle
还是在您的服务器上被使用

00:09:32.306 --> 00:09:33.674 align:middle
要确保它们得到保护

00:09:34.641 --> 00:09:40.380 align:middle
那么现在继续往下看图表
左边我们已经有了服务器组件

00:09:40.681 --> 00:09:42.216 align:middle
也就是您的密钥服务器

00:09:42.316 --> 00:09:46.119 align:middle
它内部已经集成了FPS密钥安全模块

00:09:46.854 --> 00:09:51.458 align:middle
密钥数据库里面含有
用来为您的流媒体加密内容密钥值

00:09:51.725 --> 00:09:56.029 align:middle
而在右边我们有客户端活动要素
即是您的应用

00:09:56.396 --> 00:09:59.600 align:middle
罗哲斯刚才讲的
AVFoundation Delegate和AVFoundation

00:09:59.666 --> 00:10:03.470 align:middle
已经为我们提供了部分操作系统
即我们的iOS或Mac OS X

00:09:59.666 --> 00:10:03.470 align:middle
已经为我们提供了部分操作系统
即我们的iOS或Mac OS X

00:10:04.938 --> 00:10:09.176 align:middle
那么让我们讨论一下 当用户在您的
应用中点击播放的时候会发生什么

00:10:09.243 --> 00:10:10.544 align:middle
第一件会发生的事情是

00:10:11.011 --> 00:10:13.514 align:middle
您的应用将调用AVFoundation

00:10:13.580 --> 00:10:16.683 align:middle
并为其提供即将赋予
加密内容的m3u8 URL

00:10:17.184 --> 00:10:21.288 align:middle
AVFoundation将从互联网
抽取那个播放列表并对其进行解析

00:10:21.655 --> 00:10:23.790 align:middle
当它注意到内容被加密的时候

00:10:23.857 --> 00:10:28.028 align:middle
它将回调您的Delegate
告诉它需要一个密钥以便播放内容

00:10:29.196 --> 00:10:32.299 align:middle
Delegate将进行处理
它将调入AVFoundation

00:10:32.366 --> 00:10:37.070 align:middle
并请求后者创建
所谓的服务器上下文播放

00:10:37.971 --> 00:10:40.841 align:middle
在FPS术语中
我们将其简称为SPC

00:10:40.908 --> 00:10:41.942 align:middle
而那是什么？

00:10:42.209 --> 00:10:47.414 align:middle
它是一个Delegate的密钥请求
它将用post方法提交给密钥服务器

00:10:48.248 --> 00:10:51.818 align:middle
以便完成其工作并传递内容密钥

00:10:52.186 --> 00:10:53.921 align:middle
这里需要注意的重要一点是

00:10:54.321 --> 00:11:01.061 align:middle
SPC是在客户端上的
FPS传递上下文中创建的

00:10:54.321 --> 00:11:01.061 align:middle
SPC是在客户端上的
FPS传递上下文中创建的

00:11:01.495 --> 00:11:03.964 align:middle
而那是一个特定会话上下文

00:11:05.098 --> 00:11:07.734 align:middle
只有那台设备能够创建它

00:11:07.801 --> 00:11:11.905 align:middle
也只有那台设备能够为其处理
来自于服务器的响应

00:11:11.972 --> 00:11:13.807 align:middle
它是和设备以及会话绑定的

00:11:14.675 --> 00:11:18.212 align:middle
因此当您的服务器准备利用KSM

00:11:18.645 --> 00:11:24.351 align:middle
来破解SPC队列请求
对其格式和加密方法进行验证

00:11:24.718 --> 00:11:27.888 align:middle
并在密钥服务器数据库中
查找对应的内容密钥时

00:11:28.589 --> 00:11:34.828 align:middle
它将把那个内容密钥值
打包为我们所称的内容密钥上下文

00:11:35.162 --> 00:11:36.530 align:middle
或简称为CKC

00:11:37.164 --> 00:11:40.634 align:middle
而您的app delegate
将要执行的最后一步是

00:11:40.701 --> 00:11:43.504 align:middle
将那个CKC
返回给AVFoundation

00:11:44.471 --> 00:11:48.942 align:middle
那么此刻设备已经有了
它对内容的解密和播放所需要的一切

00:11:49.643 --> 00:11:53.947 align:middle
那么现在我们已经谈及了FP系统中的
活动要素和数据流

00:11:54.014 --> 00:11:55.816 align:middle
让我们谈一下Apple将供哪些东西

00:11:56.984 --> 00:11:58.785 align:middle
当然我们提供AVFoundation

00:11:58.852 --> 00:12:03.023 align:middle
在iOS和Mac OS中
AVFoundation的一部分是

00:11:58.852 --> 00:12:03.023 align:middle
在iOS和Mac OS中
AVFoundation的一部分是

00:12:03.090 --> 00:12:05.726 align:middle
您将用于执行delegate的API

00:12:06.527 --> 00:12:09.730 align:middle
我们提供的另一个工具是
developer.apple.com上的

00:12:09.863 --> 00:12:11.865 align:middle
FairPlay Streaming SDK

00:12:11.932 --> 00:12:13.834 align:middle
那个SDK包含一些特定的内容

00:12:13.901 --> 00:12:17.504 align:middle
首先它包含一个协议规范

00:12:18.005 --> 00:12:22.709 align:middle
里面有关于SPC和CKC消息
编写格式的全部详细信息

00:12:23.110 --> 00:12:29.783 align:middle
和您将使用哪些加密原函数
来处理密钥请求 及生成密钥响应

00:12:30.651 --> 00:12:36.757 align:middle
它包含一个在网络控制中心的
对密钥安全模块服务器的引用实施

00:12:37.824 --> 00:12:43.664 align:middle
它包含一整套能够用于服务器部署的
服务器测试矢量和验证工具

00:12:44.398 --> 00:12:47.334 align:middle
它包含一些客户端示例内容

00:12:48.902 --> 00:12:54.842 align:middle
而它包含的最后一点内容是
一套客户端示例代码

00:12:56.376 --> 00:13:01.982 align:middle
因此如罗哲斯指出的
密钥服务器的首要职责是加密

00:12:56.376 --> 00:13:01.982 align:middle
因此如罗哲斯指出的
密钥服务器的首要职责是加密

00:13:02.149 --> 00:13:05.018 align:middle
以及对SPC密钥请求的验证

00:13:05.619 --> 00:13:10.457 align:middle
然后它将根据资源识别符
查找客户希望播放的内容

00:13:10.824 --> 00:13:13.193 align:middle
然后它将生成CKC响应

00:13:13.260 --> 00:13:15.262 align:middle
它是您的密钥安全模块中

00:13:15.329 --> 00:13:17.197 align:middle
将发生的第一个和第三个操作

00:13:18.165 --> 00:13:21.335 align:middle
您有两种执行该操作的方式

00:13:21.401 --> 00:13:23.837 align:middle
您可以使用FPS SDK中
提供的协议规范

00:13:23.904 --> 00:13:27.841 align:middle
从零开始执行这个逻辑系统

00:13:28.542 --> 00:13:33.447 align:middle
或者您也可以直接采用C参考实施

00:13:33.514 --> 00:13:36.950 align:middle
并通过您自己选择的语言

00:13:37.017 --> 00:13:40.654 align:middle
或直接将其集成到现有密钥服务器中
而对其进行定制化处理

00:13:42.356 --> 00:13:45.726 align:middle
那么在执行完集成之后
让我们谈一谈您将如何测试KSM

00:13:46.894 --> 00:13:48.695 align:middle
我们建议您做的第一件事当然是

00:13:48.762 --> 00:13:51.498 align:middle
使用我们提供
作为SDK一部分的测试矢量

00:13:51.965 --> 00:13:55.202 align:middle
来验证KSM将生成的响应的正确性

00:13:55.269 --> 00:14:01.074 align:middle
而您执行此步骤的方式
是使用我们提供的SPC测试矢量

00:13:55.269 --> 00:14:01.074 align:middle
而您执行此步骤的方式
是使用我们提供的SPC测试矢量

00:14:01.508 --> 00:14:04.144 align:middle
将它们提供给KSM执行

00:14:04.545 --> 00:14:08.048 align:middle
然后运行由KSM通过验证工具
产生并输出的CKC

00:14:08.415 --> 00:14:14.488 align:middle
以确保它们不管从加密的角度
或格式的角度都是正确的

00:14:15.522 --> 00:14:16.390 align:middle
需要注意的是

00:14:16.456 --> 00:14:20.694 align:middle
我们在SDK中提供的测试矢量
是基于开发专用凭证的

00:14:20.761 --> 00:14:24.264 align:middle
它们是专为您的开发工作而存在的

00:14:24.331 --> 00:14:28.569 align:middle
它们不可被用于向活跃的客户设备
部署解决方案

00:14:28.635 --> 00:14:32.639 align:middle
为了向活跃的客户设备部署解决方案
您将需要专用于生产目的的FPS凭证

00:14:33.373 --> 00:14:36.577 align:middle
那么既然我们已经谈了服务器端
让我们谈谈客户端

00:14:36.643 --> 00:14:39.346 align:middle
将FPS集成到您的应用中
需要些什么呢？

00:14:39.413 --> 00:14:40.347 align:middle
您应做的第一件事是

00:14:40.414 --> 00:14:44.518 align:middle
用AVAsset注册一个
AVasset Resource Loader delegate

00:14:44.685 --> 00:14:48.388 align:middle
而那个delegate的职责
有三个方面

00:14:48.455 --> 00:14:50.991 align:middle
首先它要做的是生成SPC

00:14:51.291 --> 00:14:53.660 align:middle
这需要通过以下两步完成

00:14:53.727 --> 00:14:54.828 align:middle
首先您将为密钥请求处理

00:14:55.162 --> 00:14:56.330 align:middle
“should Wait For
Loading

00:14:56.396 --> 00:14:59.032 align:middle
Of Requested
Resource”命令

00:14:59.099 --> 00:15:00.267 align:middle
然后您将做的第二步是调用

00:14:59.099 --> 00:15:00.267 align:middle
然后您将做的第二步是调用

00:15:00.334 --> 00:15:02.836 align:middle
“VAsset Resource
Loading Request

00:15:02.903 --> 00:15:04.972 align:middle
Streaming Content
Key Request Data

00:15:05.038 --> 00:15:06.240 align:middle
For App”

00:15:06.306 --> 00:15:07.875 align:middle
以便生成SPC

00:15:08.842 --> 00:15:11.912 align:middle
一旦您获得了那个 SPC
您将把它传送给您的密钥服务器

00:15:12.379 --> 00:15:14.248 align:middle
而当您的密钥服务器做出响应时

00:15:14.314 --> 00:15:15.582 align:middle
您将把CKC响应提供给

00:15:15.649 --> 00:15:17.551 align:middle
“AVAsset Resource
Loading Request”

00:15:18.452 --> 00:15:21.588 align:middle
那么我们就完成了服务器端的执行
也完成了客户端的执行

00:15:21.655 --> 00:15:25.025 align:middle
让我们谈一谈工作流更新中内容制作

00:15:25.692 --> 00:15:28.128 align:middle
为了将内容解密您将必须做些什么？

00:15:28.195 --> 00:15:29.363 align:middle
您应做的第一件事是

00:15:29.429 --> 00:15:33.367 align:middle
去从developer.apple.com
获取HLS加密规范

00:15:33.700 --> 00:15:35.636 align:middle
不管比特流是音频还是视频

00:15:35.702 --> 00:15:39.706 align:middle
它将为您提供您需要了解的
对比特流本身加密的所有细节

00:15:41.275 --> 00:15:45.612 align:middle
一旦您对比特流加密后
您将必须更新m3u8播放列表

00:15:45.679 --> 00:15:47.981 align:middle
首先您采用的是何种加密方式

00:15:48.048 --> 00:15:50.484 align:middle
这是通过
将m3u8列表中的Method标签

00:15:50.951 --> 00:15:53.420 align:middle
设为Sample-AES而实现的

00:15:54.655 --> 00:15:57.491 align:middle
您应向客户端发送的另一个信号是

00:15:57.558 --> 00:15:59.993 align:middle
您希望用FPS来传递密钥的事实

00:16:00.060 --> 00:16:05.465 align:middle
实现的方式则是对m3u8播放列表中
的另一个标签即密钥格式标签进行更新

00:16:05.532 --> 00:16:07.835 align:middle
应把它设为
com.apple.streamingkeydelivery

00:16:10.270 --> 00:16:12.539 align:middle
事实上我们三年多前就开始部署了

00:16:12.606 --> 00:16:16.844 align:middle
这意味着目前在解码器方面
有相当多的第三方支持

00:16:16.910 --> 00:16:22.349 align:middle
您可以选择搭配其中之一作为替代
而不是您亲自更新工作流

00:16:23.417 --> 00:16:25.085 align:middle
一旦您更新了您的工作流

00:16:25.319 --> 00:16:29.389 align:middle
这里是您如何检查
加密工作流的正确性的方法

00:16:30.490 --> 00:16:33.894 align:middle
您大体上可以做两个比较

00:16:35.062 --> 00:16:36.563 align:middle
但它们都是以同样的方式开始的

00:16:36.630 --> 00:16:39.633 align:middle
开始时先从
示例SDK选取一段明文内容

00:16:40.000 --> 00:16:43.971 align:middle
并使其运行通过您的新工作流

00:16:44.771 --> 00:16:50.911 align:middle
然后将其与SDK中相同加密资源对比

00:16:51.578 --> 00:16:57.351 align:middle
也可将其与在HLS媒体文件切割
工具上通过的该资源加密版本进行比较

00:16:57.651 --> 00:17:00.921 align:middle
之所以第二点比较有意思有吸引力
是因为您也可以使用自己的内容

00:16:57.651 --> 00:17:00.921 align:middle
之所以第二点比较有意思有吸引力
是因为您也可以使用自己的内容

00:17:00.988 --> 00:17:02.489 align:middle
而不是示例内容完成检查工作

00:17:03.857 --> 00:17:05.425 align:middle
那么现在我们已经讨论了

00:17:05.492 --> 00:17:09.630 align:middle
客户端开发和服务器端开发所需的工作
以及对您的工作流的更新

00:17:10.564 --> 00:17:12.566 align:middle
接下来我们讨论功能性本地回放

00:17:12.633 --> 00:17:15.636 align:middle
现在我想很大家谈谈
AirPlay中对FPS的支持

00:17:17.069 --> 00:17:23.443 align:middle
我们对FPS和AirPlay的支持
是通过AirPlay视频路径实现的

00:17:23.810 --> 00:17:29.816 align:middle
就是说当您从应用中的
本地回放过渡到Apple TV时

00:17:30.384 --> 00:17:34.421 align:middle
实际上是Apple TV
从互联网上读取内容 是吗？

00:17:34.488 --> 00:17:36.757 align:middle
它不再是发送方的设备了

00:17:37.925 --> 00:17:39.426 align:middle
这里的好消息是

00:17:39.493 --> 00:17:43.430 align:middle
在您的应用中或服务器端
都不需要写任何额外代码了

00:17:43.564 --> 00:17:48.702 align:middle
KSM支持来自于Apple TV

00:17:49.069 --> 00:17:53.173 align:middle
或来自于iOS设备传入的密钥请求

00:17:55.042 --> 00:17:58.612 align:middle
需要明确的是
SPC仍是Apple TV上生成的

00:17:59.146 --> 00:18:03.884 align:middle
而您的密钥服务器上生成的CKC响应
也将在AppleTV上进行处理

00:17:59.146 --> 00:18:03.884 align:middle
而您的密钥服务器上生成的CKC响应
也将在AppleTV上进行处理

00:18:05.152 --> 00:18:10.657 align:middle
然而app仍然负责Apple TV
和密钥服务器之间的消息

00:18:10.724 --> 00:18:12.659 align:middle
因此必须有发送设备的参与

00:18:14.261 --> 00:18:17.364 align:middle
这给了我们与本地回放同水平的安全性

00:18:17.431 --> 00:18:21.502 align:middle
因为SPC和CKC消息
都来自于并终止于

00:18:21.668 --> 00:18:23.904 align:middle
实际播放内容的那个设备

00:18:24.004 --> 00:18:26.406 align:middle
在这种情况下是Apple TV
也即AirPlay

00:18:27.975 --> 00:18:29.743 align:middle
需要注意的一点是

00:18:29.810 --> 00:18:33.847 align:middle
实际上FPS内容将不会
以AirPlay镜像模式执行

00:18:34.281 --> 00:18:36.984 align:middle
那也适用于在您的本地设备上

00:18:37.317 --> 00:18:39.987 align:middle
播放的FPS内容所做的
屏幕截图和音视频录制

00:18:41.355 --> 00:18:44.157 align:middle
在我们谈了关于如何
在您的app上或AirPlay上

00:18:44.858 --> 00:18:47.661 align:middle
在本地消费内容之后

00:18:48.128 --> 00:18:50.264 align:middle
我骄傲地宣布：

00:18:50.330 --> 00:18:53.066 align:middle
今年我们将增加
对El Capitan的FPS支持

00:18:54.668 --> 00:18:59.873 align:middle
这种大家支持
且集成到网站的方式

00:19:00.240 --> 00:19:04.444 align:middle
是通过加密的媒体扩展

00:19:04.912 --> 00:19:07.080 align:middle
它们是HTML5的一部分
是一个W3C规范

00:19:07.147 --> 00:19:08.715 align:middle
您可以从它们的网站下载它

00:19:09.383 --> 00:19:13.187 align:middle
您与EME集成的方式是

00:19:13.253 --> 00:19:16.623 align:middle
将您的JavaScript格式
密钥传递代码写到您的网站上

00:19:17.124 --> 00:19:21.161 align:middle
我们在SDK中
提供了一个这种实施的例子

00:19:21.261 --> 00:19:22.663 align:middle
它更多地是一个小片段

00:19:24.097 --> 00:19:30.437 align:middle
这里的好消息是
不管是在KSM端或AirPlay端

00:19:30.504 --> 00:19:32.673 align:middle
都不需要任何新的代码

00:19:33.106 --> 00:19:34.474 align:middle
它是开箱即用型的

00:19:34.908 --> 00:19:38.145 align:middle
且写好了JavaScript代码后
它将对一切都是完全支持的

00:19:38.212 --> 00:19:39.179 align:middle
现在让我们谈一下

00:19:39.246 --> 00:19:43.450 align:middle
您为了在网页上支持FPS
而将要写的JavaScript代码

00:19:43.650 --> 00:19:46.753 align:middle
您要做的第一件事是
将m3u8 URL设为

00:19:47.054 --> 00:19:51.091 align:middle
HTML5视频标签的来源属性

00:19:51.825 --> 00:19:53.427 align:middle
正像您为一个非加密内容所做的那样

00:19:54.394 --> 00:20:00.634 align:middle
然后为WebKitNeedKey调用
添加视频元素Event Listener

00:19:54.394 --> 00:20:00.634 align:middle
然后为WebKitNeedKey调用
添加视频元素Event Listener

00:20:01.535 --> 00:20:02.402 align:middle
当被触发的时候

00:20:02.569 --> 00:20:07.641 align:middle
那个Event Listener
将把EME内容加密模块设置到FPS

00:20:08.509 --> 00:20:11.378 align:middle
它还将在video/MP4上
创建一个keySession

00:20:11.445 --> 00:20:14.381 align:middle
以便在密钥系统
和您的密钥服务器之间传递消息

00:20:15.115 --> 00:20:16.717 align:middle
您将
web kit key message

00:20:16.783 --> 00:20:19.286 align:middle
向那个keySession
添加Event Handler

00:20:19.786 --> 00:20:25.058 align:middle
那个Event Handler负责
把SPC密钥请求传送到您的服务器上

00:20:25.425 --> 00:20:30.030 align:middle
然后通过更新密钥会话
处理CKC响应

00:20:31.131 --> 00:20:34.701 align:middle
在数据流方面
我们在左侧有非常类似的活动要素

00:20:34.768 --> 00:20:36.703 align:middle
我们在右侧有同样的活动要素

00:20:36.770 --> 00:20:41.241 align:middle
我们现在有Apple提供的
Safari以及EME堆栈

00:20:41.708 --> 00:20:43.377 align:middle
在Safari内我们有您的网站

00:20:43.911 --> 00:20:50.684 align:middle
及您将在网站上支持FPS内容播放和
新写的JavaScript代码片段

00:20:52.786 --> 00:20:56.123 align:middle
让我们讨论下当用户在Safari中
点击Play会发生什么

00:20:56.256 --> 00:20:59.493 align:middle
那么当用户点击play时
将要发生的第一件事是

00:20:59.927 --> 00:21:03.530 align:middle
m3u8将在操作系统中
点击EME和AVFoundation

00:20:59.927 --> 00:21:03.530 align:middle
m3u8将在操作系统中
点击EME和AVFoundation

00:21:03.597 --> 00:21:07.401 align:middle
而EME将会注意到内容已被加密

00:21:07.467 --> 00:21:12.706 align:middle
这将使它触发
Web kit need key message

00:21:12.773 --> 00:21:14.374 align:middle
您的事件监听器将收到这条消息

00:21:16.410 --> 00:21:18.478 align:middle
然后您的事件监听器将创建密钥会话

00:21:18.545 --> 00:21:21.081 align:middle
并将等待Web kit key message

00:21:21.181 --> 00:21:23.183 align:middle
后者又将触发
Event Handler

00:21:23.817 --> 00:21:26.286 align:middle
而Event Handler
将接收到SPC

00:21:26.620 --> 00:21:30.123 align:middle
并将其传给您的密钥服务器
密钥服务器将对其照常处理

00:21:30.190 --> 00:21:32.693 align:middle
包括提取内容密钥和创建内容密钥响应

00:21:33.026 --> 00:21:36.396 align:middle
然后将那个CKC传回
给JavaScript代码

00:21:36.463 --> 00:21:39.900 align:middle
后者再将CKC
向下传递返回给EME层以便播放

00:21:42.202 --> 00:21:43.504 align:middle
正如罗哲斯刚才所说

00:21:43.570 --> 00:21:48.442 align:middle
我们从最初部署该解决方案
到现在已超过三年

00:21:48.909 --> 00:21:55.716 align:middle
这几年间我们学会了一些
如何解决FPS集成问题的秘诀和窍门

00:21:56.250 --> 00:21:58.886 align:middle
而您可能面对的典型问题

00:21:59.586 --> 00:22:03.657 align:middle
如果您的集成工作不幸出错的话
是内容不播放

00:21:59.586 --> 00:22:03.657 align:middle
如果您的集成工作不幸出错的话
是内容不播放

00:22:04.358 --> 00:22:08.095 align:middle
那么您要怎样对那种情况进行调试呢？

00:22:08.262 --> 00:22:11.231 align:middle
我们建议您做的一件事是...

00:22:11.298 --> 00:22:14.935 align:middle
而且这仅限于调试目的
我们不建议您在生产环境中这么做

00:22:15.269 --> 00:22:19.206 align:middle
那就是将您在m3u8播放列表中的
密钥格式设为identity

00:22:19.806 --> 00:22:22.442 align:middle
而不是
com.apple.streamingkeydelivery

00:22:22.509 --> 00:22:23.877 align:middle
这有什么作用呢？

00:22:23.944 --> 00:22:26.713 align:middle
它将同样的内容传送到客户端

00:22:27.214 --> 00:22:31.718 align:middle
但并不是用FPS将内容解密
而是用明文AES密钥解密

00:22:32.586 --> 00:22:35.956 align:middle
而我们最终会是两种情况之一

00:22:36.023 --> 00:22:37.457 align:middle
第一种是您的内容仍不播放

00:22:37.758 --> 00:22:42.196 align:middle
这种情况下很有可能是内容制作问题

00:22:42.529 --> 00:22:45.165 align:middle
而那些问题通常分为四类

00:22:45.566 --> 00:22:48.969 align:middle
或者是您的加密样本存在问题

00:22:49.036 --> 00:22:53.240 align:middle
如果是那种情况
我建议您参考HLS示例加密规范

00:22:53.540 --> 00:22:55.876 align:middle
它可能是PAT/PMT音频设置问题

00:22:56.410 --> 00:23:02.182 align:middle
那些是您需要对采用FPS编码
和加密的音频流采取的步骤

00:22:56.410 --> 00:23:02.182 align:middle
那些是您需要对采用FPS编码
和加密的音频流采取的步骤

00:23:02.249 --> 00:23:04.718 align:middle
需要对一些元数据进行更新

00:23:05.786 --> 00:23:08.188 align:middle
可能是这样的情况
您使用的编解码器不被支持

00:23:08.388 --> 00:23:09.690 align:middle
而且如罗哲斯稍早提到的

00:23:09.756 --> 00:23:14.962 align:middle
目前我们在FPS中支持的是
H.264 AAC 以及加密的AC3

00:23:15.729 --> 00:23:21.869 align:middle
最后 有可能您将在非HLS片段上
重置您的内容密钥

00:23:22.302 --> 00:23:27.474 align:middle
那么我们建议您将密钥
在最细粒度的HLS片段上重置

00:23:27.841 --> 00:23:32.379 align:middle
或者您也可以转换比特率时
更改内容密钥值

00:23:33.914 --> 00:23:37.985 align:middle
如果在您将密钥格式标签
更新为identity之后

00:23:38.051 --> 00:23:40.187 align:middle
您的内容已经可以播放
但可能面临密钥传递问题

00:23:40.721 --> 00:23:45.292 align:middle
如果那样的话
您要做的就是跟踪我们刚才所考查的

00:23:45.893 --> 00:23:50.464 align:middle
图表中的数据流
并确保SPC由客户端正确生成

00:23:50.531 --> 00:23:55.235 align:middle
它被传送到服务器
您的服务器能正确无误处理该密钥请求

00:23:55.502 --> 00:23:57.771 align:middle
您的服务器在数据库中查找正确的密钥

00:23:58.172 --> 00:24:02.142 align:middle
而且服务器能够将内容密钥
封装为内容密钥响应

00:23:58.172 --> 00:24:02.142 align:middle
而且服务器能够将内容密钥
封装为内容密钥响应

00:24:02.209 --> 00:24:06.880 align:middle
而且客户端能够正确无误地
处理那一响应

00:24:08.015 --> 00:24:12.152 align:middle
既然我们已经考查了
在Apple生态系统内

00:24:12.219 --> 00:24:15.055 align:middle
消费FPS内容的各种方式

00:24:15.122 --> 00:24:17.524 align:middle
我想把舞台还给罗哲斯
让他为这节讲座做一个总结

00:24:17.624 --> 00:24:18.926 align:middle
非常感谢大家为此付出的时间

00:24:25.966 --> 00:24:27.067 align:middle
非常感谢谢詹保罗 法索里

00:24:27.501 --> 00:24:29.236 align:middle
那么让我们在这里快速地总结一下

00:24:30.137 --> 00:24:33.874 align:middle
面向HLS的FPS

00:24:34.107 --> 00:24:40.848 align:middle
为您提供业内颇具优势的
HLS内容保护工具

00:24:42.082 --> 00:24:48.355 align:middle
您在iOS上 Apple TV上
以及在OS X上都能使用它

00:24:48.689 --> 00:24:53.627 align:middle
自从iOS 6就开始提供了
因此已有相当程度的兼容性

00:24:54.061 --> 00:24:56.797 align:middle
在Apple TV上也是如此

00:24:57.231 --> 00:24:58.866 align:middle
OS X仍较新

00:24:58.932 --> 00:25:00.868 align:middle
您可以在之后的实验室活动中
跟我们聊聊

00:24:58.932 --> 00:25:00.868 align:middle
您可以在之后的实验室活动中
跟我们聊聊

00:25:00.934 --> 00:25:03.804 align:middle
我们将向您和盘托出
您可以把它用在什么地方

00:25:05.239 --> 00:25:07.341 align:middle
它已被深度集成到OS内部

00:25:07.441 --> 00:25:10.677 align:middle
意味着它能够向下兼容到极低的版本

00:25:10.744 --> 00:25:12.246 align:middle
而且我们也尽可能确保其安全性

00:25:12.446 --> 00:25:14.882 align:middle
它的电源效率也达到了
我们能够达到的极致

00:25:15.215 --> 00:25:18.085 align:middle
而且它有极佳的电池寿命
以及高度的安全性

00:25:19.052 --> 00:25:22.990 align:middle
而且它支持我们所有生态系统特性

00:25:23.357 --> 00:25:28.061 align:middle
比如AirPlay
HDCP HTML5

00:25:28.128 --> 00:25:32.566 align:middle
而且随着不断推出新特性
我们将持续改进它

00:25:36.069 --> 00:25:37.204 align:middle
那么下一步是什么呢？

00:25:38.338 --> 00:25:39.773 align:middle
第一站是在

00:25:40.174 --> 00:25:43.977 align:middle
developer.apple.com
上最新的FPS门户

00:25:44.044 --> 00:25:48.415 align:middle
它现在就在运转中
所以您可以去那里看看

00:25:48.482 --> 00:25:53.921 align:middle
而且您还可以从门户下载SDK
您可以查看概述文件

00:25:53.987 --> 00:25:58.759 align:middle
它会让您对FPS的细节
有一点更深入的见解

00:25:59.259 --> 00:26:04.631 align:middle
而且通过那个站点
您也可以申请生产目的的开发者证书

00:25:59.259 --> 00:26:04.631 align:middle
而且通过那个站点
您也可以申请生产目的的开发者证书

00:26:04.698 --> 00:26:08.769 align:middle
它们对实现iOS设备或Safari

00:26:09.036 --> 00:26:12.539 align:middle
上的来回播放是必要的

00:26:15.742 --> 00:26:22.149 align:middle
我应该提到的下一件事情
在那个站点 在登录页上

00:26:22.516 --> 00:26:27.788 align:middle
你们中间的某些人
可能并没有一个现成的后端

00:26:28.155 --> 00:26:34.261 align:middle
或者一想到将FPS集成到后端
就被这个想法吓到了

00:26:34.661 --> 00:26:38.565 align:middle
那么在那个登录页面上
我们有一个小小的清单

00:26:38.866 --> 00:26:44.004 align:middle
列出了我们的集成合作伙伴
像Irdeto 像Adobe

00:26:44.571 --> 00:26:49.109 align:middle
它们已经为希望使用FPS

00:26:49.176 --> 00:26:54.081 align:middle
保护HLS内容的朋友
建立了一些支持

00:26:55.282 --> 00:26:58.051 align:middle
我建议您也查看一下那些合作伙伴

00:26:58.118 --> 00:27:02.789 align:middle
如果您觉得在FPS设置
及如何使其为您工作方面

00:26:58.118 --> 00:27:02.789 align:middle
如果您觉得在FPS设置
及如何使其为您工作方面

00:27:03.290 --> 00:27:04.124 align:middle
一点帮助的话

00:27:04.525 --> 00:27:06.426 align:middle
我觉得这是很容易做的

00:27:06.493 --> 00:27:09.029 align:middle
但并不是每个人都是业内人士

00:27:09.463 --> 00:27:11.265 align:middle
因此如果您需要的话
我们会为您提供帮助

00:27:12.099 --> 00:27:18.272 align:middle
此外
如果您想让HLS和FPS开始工作

00:27:18.605 --> 00:27:23.410 align:middle
但是感觉仍然存在问题
或者您已经尝试过且遇到了一些问题

00:27:23.777 --> 00:27:25.679 align:middle
如果您不是在WWDC上

00:27:25.979 --> 00:27:29.950 align:middle
那么对您来说最佳的第一站
就是我们的开发者论坛

00:27:30.117 --> 00:27:33.453 align:middle
而且我们实际上
已经建立了目前处于测试阶段

00:27:33.754 --> 00:27:37.824 align:middle
但是我们已建立了一个新的论坛
它是专门面向FPS的

00:27:38.225 --> 00:27:41.228 align:middle
因此请查看一下这个论坛

00:27:41.361 --> 00:27:44.131 align:middle
如果您遇到了困难
或者是有什么问题

00:27:44.398 --> 00:27:48.836 align:middle
很可能其他人也有
同样的问题 同样的困难

00:27:49.102 --> 00:27:51.438 align:middle
而你可能通过查看论坛
就能找到答案

00:27:52.840 --> 00:27:54.374 align:middle
如果那样做失败的话

00:27:54.441 --> 00:27:57.411 align:middle
还有您的非常友好的社区
以及开发者技术支持代表

00:27:57.477 --> 00:27:59.780 align:middle
将乐于为您提供帮助且收费低廉

00:28:01.615 --> 00:28:02.616 align:middle
我想就是这样了

00:28:03.884 --> 00:28:05.052 align:middle
再次感谢您的光临！

00:28:05.352 --> 00:28:06.820 align:middle
希望您在大会期间开心！
