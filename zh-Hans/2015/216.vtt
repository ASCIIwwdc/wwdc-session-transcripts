WEBVTT

00:00:20.487 --> 00:00:27.494 align:middle
用于WatchKit的布局
和动画技术

00:00:33.467 --> 00:00:34.301 align:middle
大家好

00:00:35.936 --> 00:00:37.871 align:middle
欢迎参加会议216

00:00:37.938 --> 00:00:39.673 align:middle
“用于WatchKit的布局
和动画技术”

00:00:39.740 --> 00:00:42.476 align:middle
我叫米格尔·桑切斯
我是一名WatchKit工程师

00:00:42.543 --> 00:00:45.712 align:middle
稍后为你做演讲的
是我的同事汤姆·威特金

00:00:47.247 --> 00:00:51.351 align:middle
今天的日程
是给你们一个WatchKit

00:00:51.418 --> 00:00:53.487 align:middle
布局基本原则的
概述

00:00:54.221 --> 00:00:58.058 align:middle
我会仔细讲一讲
如何使用组来设置

00:00:58.125 --> 00:01:01.261 align:middle
复杂的布局
之后汤姆就会上来

00:00:58.125 --> 00:01:01.261 align:middle
复杂的布局
之后汤姆就会上来

00:01:01.662 --> 00:01:04.665 align:middle
给你们讲一讲Watch OS 1中
现有的动画技术

00:01:04.730 --> 00:01:06.800 align:middle
以及我们在Watch OS 2中
引入的

00:01:06.867 --> 00:01:09.236 align:middle
新的
API

00:01:09.970 --> 00:01:13.073 align:middle
所有的WatchKit开发者
还没有看过平台 但是正在

00:01:13.140 --> 00:01:14.341 align:middle
学习了解布局的人群

00:01:14.408 --> 00:01:17.744 align:middle
当然还有你们中的那些老手
全部都是

00:01:17.811 --> 00:01:19.179 align:middle
本次会议的

00:01:19.646 --> 00:01:22.482 align:middle
目标
听众

00:01:24.384 --> 00:01:26.253 align:middle
我们就从
布局基本原则开始吧

00:01:28.021 --> 00:01:29.656 align:middle
WatchKit布局模型

00:01:29.723 --> 00:01:32.593 align:middle
要我说 自从
WatchKit OS 1之后

00:01:32.659 --> 00:01:34.695 align:middle
布局模型
就没有变过

00:01:35.662 --> 00:01:37.898 align:middle
WatchKit和Watch OS
是不一样的

00:01:37.965 --> 00:01:40.100 align:middle
如果你之前没有用过
它和你已经熟悉的

00:01:40.167 --> 00:01:44.571 align:middle
UIKit和AppKit模型
是不一样的

00:01:45.706 --> 00:01:49.009 align:middle
不同之处在于
在WatchKit中我们使用了一种

00:01:49.076 --> 00:01:53.514 align:middle
基于流的布局
我这样说的意思是

00:01:53.847 --> 00:01:55.916 align:middle
你之前可能已经
看过这个动画了

00:01:55.983 --> 00:01:57.351 align:middle
在 Interface
Builder中

00:01:57.417 --> 00:01:58.752 align:middle
你有WatchKit对象库

00:01:58.819 --> 00:02:00.487 align:middle
和目录

00:01:58.819 --> 00:02:00.487 align:middle
和目录

00:02:00.988 --> 00:02:03.323 align:middle
你可以把它们拖动到
你的控制器上

00:02:04.057 --> 00:02:07.027 align:middle
当你拖动它们的时候
它们就会落到

00:02:07.094 --> 00:02:09.863 align:middle
流上下个可用的
槽上

00:02:09.930 --> 00:02:11.965 align:middle
流一开始是
纵向的

00:02:12.499 --> 00:02:14.401 align:middle
这样你就有了
第二个元素

00:02:14.468 --> 00:02:17.104 align:middle
它会落到它的置位槽上
当然了

00:02:17.171 --> 00:02:21.341 align:middle
如果你引入一个分组对象
并且告诉它使用水平布局

00:02:21.408 --> 00:02:23.477 align:middle
的话
你就可以添加一个水平流

00:02:26.146 --> 00:02:30.584 align:middle
作为一名WatchKit应用程序的
程序员

00:02:30.651 --> 00:02:34.888 align:middle
你写的不是对象创建代码
这一点很重要

00:02:35.088 --> 00:02:37.991 align:middle
你所有的UI创建
都发生在故事板

00:02:38.058 --> 00:02:38.992 align:middle
和Interface
Builder中

00:02:39.059 --> 00:02:42.329 align:middle
我们不提供API
也不会分配你的

00:02:42.396 --> 00:02:43.263 align:middle
典型WatchKit对象

00:02:44.431 --> 00:02:47.067 align:middle
这并不是说
你不能对你的布局层级

00:02:47.134 --> 00:02:51.138 align:middle
对齐 尺寸改变
当然还有你在这里看到的

00:02:51.205 --> 00:02:53.006 align:middle
动画
进行微调

00:02:53.073 --> 00:02:56.009 align:middle
我们来详细
分开讲一下

00:02:56.343 --> 00:02:58.879 align:middle
我们先来讲一讲
对齐和改变尺寸

00:03:00.514 --> 00:03:01.648 align:middle
你所有的WatchKit对象实例

00:03:01.715 --> 00:03:02.649 align:middle
都是WK
InterfaceObject

00:03:02.716 --> 00:03:06.119 align:middle
的子类

00:03:08.121 --> 00:03:09.122 align:middle
这些都有对齐设置

00:03:09.189 --> 00:03:14.061 align:middle
尺寸改变调整的属性

00:03:14.161 --> 00:03:16.029 align:middle
说到对齐

00:03:16.096 --> 00:03:18.498 align:middle
我们说的是包含对象内部的
对齐

00:03:19.299 --> 00:03:22.202 align:middle
这是水平对齐
和纵向对齐

00:03:22.269 --> 00:03:24.137 align:middle
可以是左对齐
居中对齐或者右对齐

00:03:24.838 --> 00:03:29.376 align:middle
对于尺寸改变来说
你会告诉我们 在对你的

00:03:29.443 --> 00:03:33.347 align:middle
对象进行横向 纵向尺寸的
改变

00:03:34.281 --> 00:03:37.251 align:middle
可以是固定的 相对的或者
自动调整 其规则是什么

00:03:40.787 --> 00:03:45.726 align:middle
在Watch OS 2中
自从Watch OS 1之后

00:03:45.792 --> 00:03:47.261 align:middle
Interface Builder
中就可以用

00:03:47.327 --> 00:03:48.629 align:middle
这些属性了
但在Watch OS 2中

00:03:48.695 --> 00:03:50.964 align:middle
我们通过API
提供了更多属性

00:03:51.798 --> 00:03:54.835 align:middle
我们想让你更多地控制
自己的代码 并且能让它们

00:03:54.902 --> 00:03:57.070 align:middle
“动起来”
待会儿你会看到

00:03:57.137 --> 00:03:58.805 align:middle
通过新的枚举类型
我们有了一个新的API

00:03:58.872 --> 00:04:02.376 align:middle
可以设置水平 纵向对齐

00:03:58.872 --> 00:04:02.376 align:middle
可以设置水平 纵向对齐

00:04:03.977 --> 00:04:05.512 align:middle
它对你百依百顺

00:04:05.579 --> 00:04:09.950 align:middle
这里有一个WK蓝色框

00:04:10.017 --> 00:04:12.286 align:middle
可以进行左上角对齐

00:04:12.352 --> 00:04:15.889 align:middle
居中对齐 右下角对齐

00:04:17.791 --> 00:04:19.459 align:middle
至于改变尺寸API

00:04:19.625 --> 00:04:22.062 align:middle
我们已经提到过了
横向 纵向尺寸的改变

00:04:22.796 --> 00:04:26.834 align:middle
对于Watch OS 2来说
我们进一步提供了相对宽度

00:04:26.900 --> 00:04:29.269 align:middle
自动调整API

00:04:29.369 --> 00:04:31.371 align:middle
同样地 它让你能更多地
控制自己的代码了

00:04:33.240 --> 00:04:35.142 align:middle
用图表表示的话
它看起来是这样的：

00:04:35.609 --> 00:04:37.678 align:middle
这是一个固定宽度和高度的

00:04:37.744 --> 00:04:39.346 align:middle
蓝方格

00:04:39.413 --> 00:04:40.247 align:middle
再说一次

00:04:42.416 --> 00:04:45.519 align:middle
已经用过的话

00:04:45.586 --> 00:04:46.987 align:middle
你就应该知道

00:04:47.054 --> 00:04:48.822 align:middle
我们对零值的解释
已经发生了变化

00:04:49.356 --> 00:04:51.058 align:middle
在Watch OS
1中 如果你在代码中

00:04:51.124 --> 00:04:52.893 align:middle
给我们一个零值

00:04:52.960 --> 00:04:55.696 align:middle
我们会把它恢复为故事板
零值但是在Watch OS 2中

00:04:55.996 --> 00:04:58.866 align:middle
我们会把零解释为
绝对零值

00:04:58.932 --> 00:04:59.967 align:middle
这一点不要忘了

00:05:02.336 --> 00:05:06.573 align:middle
假如说你想把矩形的尺寸
调整为包含元素

00:05:06.640 --> 00:05:08.475 align:middle
宽度的
75%

00:05:08.909 --> 00:05:12.746 align:middle
你就可以使用刚才提到的
相对宽度 设一个0.75的值

00:05:12.813 --> 00:05:15.315 align:middle
然后你就得到了宽度的
四分之三

00:05:17.050 --> 00:05:19.586 align:middle
如果你想把它的高度设为
包含元素高度的一半

00:05:19.653 --> 00:05:22.923 align:middle
你也可以
这样做

00:05:24.825 --> 00:05:28.328 align:middle
这些API中的第二个参数是
一个调整值

00:05:28.729 --> 00:05:31.865 align:middle
这个值可以是正的或者负的
当你第一次调整尺寸后

00:05:31.932 --> 00:05:33.734 align:middle
这个值就会生效

00:05:33.800 --> 00:05:37.171 align:middle
在这个例子中
我给宽度增加30

00:05:37.237 --> 00:05:41.208 align:middle
给高度减去30
那么我就得到了下面这个

00:05:43.877 --> 00:05:46.046 align:middle
最后一点
自动调整和自动调整高度

00:05:46.113 --> 00:05:48.982 align:middle
它们的功能
和你预期的应该是一样的

00:05:49.049 --> 00:05:51.251 align:middle
如你所知
根据你的矩形中的内容不同

00:05:51.318 --> 00:05:53.820 align:middle
我们会恰当地改变尺寸

00:05:55.255 --> 00:05:57.724 align:middle
我们接着来讲讲
组元素

00:05:59.026 --> 00:06:01.295 align:middle
你对布局进行微调
实际上就是在这里进行的

00:05:59.026 --> 00:06:01.295 align:middle
你对布局进行微调
实际上就是在这里进行的

00:06:02.062 --> 00:06:07.100 align:middle
WKInterfaceGroup
首先把它当成一个

00:06:07.167 --> 00:06:08.569 align:middle
没有默认内容的容器

00:06:08.802 --> 00:06:11.772 align:middle
它的内容可以是
我稍后举例说明的内容

00:06:12.072 --> 00:06:14.708 align:middle
但是一开始
它就只是一个容器

00:06:15.342 --> 00:06:18.312 align:middle
它是一件可以布置你所有的
元素的工具

00:06:19.546 --> 00:06:20.948 align:middle
这里

00:06:21.014 --> 00:06:23.817 align:middle
你可以选择是要一个水平布局
还是要一个纵向布局

00:06:25.252 --> 00:06:27.454 align:middle
你在这里还可以开始引入
嵌套

00:06:30.691 --> 00:06:33.227 align:middle
你在这里也可以对我们
刚刚看到的包含元素

00:06:33.293 --> 00:06:36.296 align:middle
的对齐 尺寸
进行调整

00:06:37.598 --> 00:06:40.701 align:middle
就像我们刚刚在第一组幻灯片
中看到的那样

00:06:40.767 --> 00:06:42.436 align:middle
我现在要转移到蓝色上面

00:06:42.503 --> 00:06:44.638 align:middle
你可以在Interface
Builder上

00:06:44.705 --> 00:06:46.974 align:middle
放置你的界面
得到了纵向布局

00:06:48.475 --> 00:06:49.643 align:middle
引入一个组

00:06:49.710 --> 00:06:51.245 align:middle
然后在Interface
Builder中说明

00:06:51.311 --> 00:06:53.981 align:middle
你想要水平布局
你就可以开始在那里放置

00:06:54.047 --> 00:06:55.482 align:middle
你的对象了

00:06:57.451 --> 00:06:59.720 align:middle
定义好你的包含层级后

00:07:00.787 --> 00:07:02.356 align:middle
你就可以在你的组内

00:07:02.556 --> 00:07:04.124 align:middle
定义插入物 空格等

00:07:04.191 --> 00:07:05.692 align:middle
事情

00:07:06.493 --> 00:07:09.630 align:middle
你可以在这里定义
左插入物

00:07:09.696 --> 00:07:11.098 align:middle
这些都是点值

00:07:11.899 --> 00:07:15.903 align:middle
左插入物 底部插入物
顶部插入物 右插入物以及

00:07:16.570 --> 00:07:21.275 align:middle
右边 当然还有让你的元素
彼此分割 分离

00:07:21.341 --> 00:07:23.577 align:middle
开来的
空格

00:07:25.546 --> 00:07:29.116 align:middle
对了 别忘了你的顶层
容器对象

00:07:29.183 --> 00:07:30.651 align:middle
也是一个组

00:07:31.185 --> 00:07:33.654 align:middle
你可以在那里设置
插入物

00:07:34.988 --> 00:07:36.056 align:middle
空格

00:07:36.123 --> 00:07:39.660 align:middle
你的组内有几个元素
我们就使用几个空格

00:07:39.726 --> 00:07:42.496 align:middle
这里
你的组内的三个顶层元素

00:07:42.563 --> 00:07:44.631 align:middle
那就来
十个空格

00:07:47.301 --> 00:07:49.937 align:middle
那么一旦你开始用
一旦你开始用嵌套

00:07:50.270 --> 00:07:52.673 align:middle
你就可以实现
复杂的布局

00:07:52.739 --> 00:07:54.241 align:middle
这里有一个简单的例子

00:07:54.708 --> 00:07:57.110 align:middle
如果你想让这两个正方形
堆叠在一起

00:07:57.177 --> 00:07:59.680 align:middle
然后右边跟着
两个正方形

00:08:00.080 --> 00:08:04.318 align:middle
那么你可以先通过
纵向布局使用一个组

00:08:05.018 --> 00:08:06.987 align:middle
然后你再通过水平布局
使用另外一个组

00:08:07.054 --> 00:08:09.590 align:middle
接着你再用第三个组
把这两个组包裹在里面

00:08:09.656 --> 00:08:11.825 align:middle
这样
你就可以实现这两个元素的

00:08:11.892 --> 00:08:12.893 align:middle
水平布局

00:08:13.393 --> 00:08:17.130 align:middle
你的组内
默认是没有内容的

00:08:17.397 --> 00:08:19.833 align:middle
所以它们是透明的
你只能看到你的正方形

00:08:22.236 --> 00:08:24.738 align:middle
我们再来看个例子
这样可以更具体

00:08:24.805 --> 00:08:27.174 align:middle
我会在会议的这一部分介绍
这个例子

00:08:27.241 --> 00:08:30.177 align:middle
之后汤姆就会开始
制成动画

00:08:30.711 --> 00:08:31.812 align:middle
我们这里有WKRecipes

00:08:32.011 --> 00:08:33.780 align:middle
这是一个简单的
食谱查看器

00:08:34.313 --> 00:08:35.381 align:middle
它会把你的食谱列出来

00:08:36.416 --> 00:08:38.552 align:middle
鱼肉卷 匹萨
烤翅

00:08:40.287 --> 00:08:42.722 align:middle
你可以看到你的各种食谱的
原料列表

00:08:42.789 --> 00:08:45.993 align:middle
你可以看到每个食谱
能够做出

00:08:46.059 --> 00:08:47.227 align:middle
几份菜

00:08:47.728 --> 00:08:50.264 align:middle
汤姆在动画那里
还会再讲一下

00:08:50.330 --> 00:08:51.832 align:middle
其他
画面

00:08:52.132 --> 00:08:54.635 align:middle
不过我们现在要看的
是这三个元素的

00:08:54.701 --> 00:08:56.069 align:middle
静态布局

00:08:56.870 --> 00:08:57.804 align:middle
我们该怎么办呢？

00:08:58.972 --> 00:09:02.809 align:middle
我们看到的第一个画面是
一个食谱表

00:08:58.972 --> 00:09:02.809 align:middle
我们看到的第一个画面是
一个食谱表

00:09:02.943 --> 00:09:06.413 align:middle
在WatchKit中 你有一个
表控制器 你可以用它来

00:09:06.480 --> 00:09:09.116 align:middle
对你的行进行配置
但是你需要告诉我们

00:09:09.183 --> 00:09:10.884 align:middle
各个行的
样子是什么

00:09:12.019 --> 00:09:13.587 align:middle
它的结构是什么？

00:09:13.654 --> 00:09:16.790 align:middle
因此我们在这里需要一张
图片和一个标签

00:09:18.926 --> 00:09:20.294 align:middle
我们现在有了一个水平布局

00:09:20.360 --> 00:09:22.262 align:middle
它会自动告诉你

00:09:22.329 --> 00:09:24.665 align:middle
这是一个水平布局的组

00:09:27.601 --> 00:09:30.370 align:middle
这样你就定义好了
包含层次

00:09:30.437 --> 00:09:32.372 align:middle
现在你要对你的空格
进行定义

00:09:32.439 --> 00:09:33.740 align:middle
你的左插入物

00:09:34.241 --> 00:09:35.275 align:middle
底部插入物

00:09:35.676 --> 00:09:37.744 align:middle
顶部插入物以及空格
都搞定了

00:09:39.413 --> 00:09:40.347 align:middle
对齐也没问题了

00:09:41.181 --> 00:09:45.252 align:middle
对吧？你的图片是
垂直居中对齐

00:09:45.786 --> 00:09:50.390 align:middle
但是它是左对齐了
它指向的下个槽

00:09:50.724 --> 00:09:52.960 align:middle
标签也是
纵向对齐

00:09:53.026 --> 00:09:53.961 align:middle
左对齐

00:09:54.061 --> 00:09:57.064 align:middle
注意它是在对应的槽中
左对齐

00:09:57.130 --> 00:09:59.833 align:middle
是的 因为前面有一张图片
所以就在它旁边

00:10:02.302 --> 00:10:04.371 align:middle
我们的图片是方形的

00:10:04.838 --> 00:10:05.939 align:middle
资源

00:10:06.006 --> 00:10:09.243 align:middle
每一边都是30个点的
固定尺寸

00:10:10.043 --> 00:10:12.579 align:middle
标签当然就是
自动调整

00:10:15.282 --> 00:10:18.685 align:middle
从表格行我们可以看出

00:10:19.586 --> 00:10:20.754 align:middle
我们可以使用组

00:10:20.821 --> 00:10:24.458 align:middle
来水平调整尺寸 然后我们
就可以微调对齐

00:10:24.525 --> 00:10:25.659 align:middle
设置一些空格

00:10:26.693 --> 00:10:29.730 align:middle
现在我们再来看看
原料控制器

00:10:30.531 --> 00:10:33.467 align:middle
你们中可能有人注意到
这里有五种辣椒酱

00:10:33.534 --> 00:10:36.103 align:middle
不管单位是什么
哪种煎玉米卷的食谱也用不了

00:10:36.170 --> 00:10:39.840 align:middle
这么多的辣椒酱
但这不是你关注的重点

00:10:42.342 --> 00:10:43.844 align:middle
你应该注意

00:10:43.911 --> 00:10:45.512 align:middle
虽然我们有了表布局

00:10:46.146 --> 00:10:47.147 align:middle
有了行

00:10:47.781 --> 00:10:49.316 align:middle
我们现在又有了圆形元素

00:10:49.516 --> 00:10:50.851 align:middle
我们应该怎样实现？

00:10:52.219 --> 00:10:54.421 align:middle
水平布局
还是一样的

00:10:54.488 --> 00:10:55.389 align:middle
我们有一个组

00:10:55.822 --> 00:10:58.992 align:middle
当然了 我们有标签

00:10:59.059 --> 00:11:01.929 align:middle
不过左上方的那个
红色圆圈是什么？

00:10:59.059 --> 00:11:01.929 align:middle
不过左上方的那个
红色圆圈是什么？

00:11:03.163 --> 00:11:04.998 align:middle
我刚才已经说过了
我们可以嵌套组

00:11:05.065 --> 00:11:06.400 align:middle
所以我们在这里用一个组

00:11:08.001 --> 00:11:09.570 align:middle
现在我们接着移动

00:11:09.636 --> 00:11:13.941 align:middle
移动到组的背景那里

00:11:14.007 --> 00:11:16.543 align:middle
组没有默认内容
但是它们可以有背景

00:11:16.643 --> 00:11:19.580 align:middle
背景可以是
颜色或者图片

00:11:20.247 --> 00:11:22.382 align:middle
我们可以在这个组里
选择图片

00:11:22.583 --> 00:11:26.854 align:middle
然后选择绘制背景的
半径

00:11:27.354 --> 00:11:30.858 align:middle
这样我们就给设置了一个
带有彩色背景的组

00:11:31.325 --> 00:11:34.828 align:middle
原理图是蓝色的
实例是红色的

00:11:34.895 --> 00:11:38.932 align:middle
半径是8 你就得到了
一个漂亮的蓝色圆圈

00:11:39.466 --> 00:11:42.402 align:middle
有了组之后
你就可以在里面嵌套标签

00:11:42.469 --> 00:11:44.204 align:middle
标签在组内是居中的

00:11:44.271 --> 00:11:46.139 align:middle
现在你有了水平居中
和垂直居中

00:11:46.206 --> 00:11:49.076 align:middle
这样你就能看到
概念的构造

00:11:49.142 --> 00:11:50.711 align:middle
我们说的就是这些概念

00:11:53.013 --> 00:11:55.716 align:middle
再说一遍 我有点啰嗦
请原谅我

00:11:55.782 --> 00:11:56.717 align:middle
这是模型

00:11:56.783 --> 00:12:00.053 align:middle
现在你可以定义
微调你的左插入物

00:11:56.783 --> 00:12:00.053 align:middle
现在你可以定义
微调你的左插入物

00:12:00.120 --> 00:12:01.255 align:middle
顶部 底部

00:12:03.790 --> 00:12:04.691 align:middle
和空格

00:12:06.527 --> 00:12:08.896 align:middle
记住 如果组是嵌套的

00:12:10.230 --> 00:12:11.431 align:middle
那么你可以使用嵌套来

00:12:11.498 --> 00:12:13.066 align:middle
实现复杂的布局

00:12:14.868 --> 00:12:17.738 align:middle
你还可以在组内使用背景

00:12:17.804 --> 00:12:20.307 align:middle
不管是颜色
还是图片

00:12:22.709 --> 00:12:24.945 align:middle
最后
我们有份数控制器

00:12:25.012 --> 00:12:27.714 align:middle
数字已经
高亮显示了

00:12:27.781 --> 00:12:30.684 align:middle
是个圆圈
高亮显示了份数

00:12:31.084 --> 00:12:33.120 align:middle
对于你的食谱来说
这个例子中是四份

00:12:34.054 --> 00:12:35.489 align:middle
你们中有人
会想了

00:12:35.722 --> 00:12:37.124 align:middle
这是个圆形布局

00:12:37.191 --> 00:12:38.759 align:middle
这是
怎么实现的？

00:12:38.825 --> 00:12:40.527 align:middle
你刚刚说的是

00:12:40.594 --> 00:12:42.729 align:middle
格状
流布局

00:12:43.664 --> 00:12:47.067 align:middle
我们有十二个圈

00:12:47.134 --> 00:12:49.436 align:middle
一个十二个对象的圆形图案

00:12:50.037 --> 00:12:51.271 align:middle
但是如果我们仔细看一下

00:12:51.338 --> 00:12:55.809 align:middle
这里实际上
只有三个顶层组

00:12:58.111 --> 00:12:59.313 align:middle
这是第一个组

00:13:00.314 --> 00:13:01.181 align:middle
第二个组

00:13:02.783 --> 00:13:03.650 align:middle
第三个组

00:13:05.452 --> 00:13:07.287 align:middle
我们随后在这些组内

00:13:07.354 --> 00:13:08.989 align:middle
使用了更多嵌套

00:13:09.089 --> 00:13:10.524 align:middle
我们来看看
中间的组

00:13:11.892 --> 00:13:13.560 align:middle
抱歉 我来讲讲

00:13:13.627 --> 00:13:16.663 align:middle
顶层组那里
我们的组对齐了

00:13:16.730 --> 00:13:18.165 align:middle
举例来说

00:13:18.232 --> 00:13:21.134 align:middle
顶层组是水平居中对齐

00:13:21.201 --> 00:13:23.337 align:middle
固定尺寸

00:13:24.338 --> 00:13:27.975 align:middle
中间的这个是
自动调整

00:13:28.041 --> 00:13:29.877 align:middle
占去了容器的
整个宽度

00:13:31.645 --> 00:13:36.850 align:middle
第二个组内有更多的组
对吧？

00:13:36.917 --> 00:13:38.919 align:middle
一个组是
纵向布局

00:13:39.620 --> 00:13:41.488 align:middle
一个组是
水平布局

00:13:41.555 --> 00:13:43.724 align:middle
最后
第三个组又是

00:13:44.024 --> 00:13:45.526 align:middle
水平布局

00:13:46.026 --> 00:13:47.594 align:middle
如果我们
仔细看一下各个组

00:13:47.961 --> 00:13:50.664 align:middle
这些组都是由更多的
小组构成的

00:13:53.267 --> 00:13:55.602 align:middle
一旦我们有了
这层定义

00:13:56.403 --> 00:13:59.373 align:middle
我们就可以说明对齐
说明每个圆圈的

00:13:59.506 --> 00:14:00.807 align:middle
精确对齐方式

00:13:59.506 --> 00:14:00.807 align:middle
精确对齐方式

00:14:01.074 --> 00:14:02.643 align:middle
现在你可以清楚地看到

00:14:03.277 --> 00:14:06.346 align:middle
这个圈是
水平向右对齐

00:14:06.880 --> 00:14:08.549 align:middle
顶部垂直对齐

00:14:09.783 --> 00:14:11.585 align:middle
这个圈你就可以
左对齐

00:14:11.652 --> 00:14:12.920 align:middle
居中对齐

00:14:15.322 --> 00:14:17.257 align:middle
另一个圈就可以右下对齐
对吧？

00:14:17.491 --> 00:14:20.794 align:middle
现在你知道了
格状流布局真的很强大

00:14:20.861 --> 00:14:23.397 align:middle
让你实现
想要的东西

00:14:23.564 --> 00:14:26.066 align:middle
这里的整个圆圈
我们遵循的

00:14:26.133 --> 00:14:28.969 align:middle
也是相同的
模式

00:14:31.238 --> 00:14:32.506 align:middle
所以要实现复杂的布局

00:14:33.340 --> 00:14:35.609 align:middle
组嵌套是关键

00:14:37.611 --> 00:14:38.679 align:middle
现在我给了你们绳子

00:14:38.745 --> 00:14:40.280 align:middle
但是我得警告你们

00:14:40.514 --> 00:14:41.648 align:middle
别把自己吊死了

00:14:42.683 --> 00:14:45.986 align:middle
组有可能会被滥用
不是吗？

00:14:46.053 --> 00:14:47.955 align:middle
你要记住这点

00:14:48.021 --> 00:14:49.890 align:middle
如果你试着嵌套所有的事情

00:14:49.957 --> 00:14:50.924 align:middle
你就是在走极端

00:14:51.558 --> 00:14:53.527 align:middle
所以要记住这点

00:14:54.828 --> 00:14:56.363 align:middle
我不能给出
一个精确的数字

00:14:56.430 --> 00:14:58.565 align:middle
这得看你的背景
是什么

00:14:58.632 --> 00:15:00.567 align:middle
你的布局运行的怎样

00:14:58.632 --> 00:15:00.567 align:middle
你的布局运行的怎样

00:15:00.634 --> 00:15:02.769 align:middle
但是不要忘了这些事

00:15:03.637 --> 00:15:04.972 align:middle
演示
开始之前

00:15:05.038 --> 00:15:07.708 align:middle
我说过我们不会给你提供
API

00:15:07.774 --> 00:15:10.043 align:middle
让你们直接创建元素
破坏元素

00:15:11.612 --> 00:15:12.980 align:middle
这些都是在
故事板

00:15:13.046 --> 00:15:13.914 align:middle
和
Interface Builder

00:15:13.981 --> 00:15:14.815 align:middle
中完成的

00:15:14.948 --> 00:15:17.384 align:middle
因此你在Interface
Builder中

00:15:17.451 --> 00:15:18.452 align:middle
创建的任何东西
都是被实例化的

00:15:18.519 --> 00:15:19.353 align:middle
创建好了

00:15:19.453 --> 00:15:22.222 align:middle
当你实例化你的某个
控制器时

00:15:22.422 --> 00:15:26.126 align:middle
你就实例化了里面的
全部元素

00:15:27.728 --> 00:15:29.329 align:middle
可以隐藏
某些元素

00:15:29.396 --> 00:15:31.965 align:middle
某些元素
你可以有这种属性

00:15:32.699 --> 00:15:34.168 align:middle
但是
即使这些元素是隐藏的

00:15:34.735 --> 00:15:36.937 align:middle
你们还是会...
我们还会创建它们

00:15:38.739 --> 00:15:40.374 align:middle
所以你还是
需要承担

00:15:40.440 --> 00:15:41.441 align:middle
创建成本

00:15:41.675 --> 00:15:43.343 align:middle
你可能节省
布局成本

00:15:43.410 --> 00:15:44.645 align:middle
因为我们不会
进行布局

00:15:44.711 --> 00:15:46.280 align:middle
但是挡不住
创建

00:15:46.713 --> 00:15:50.150 align:middle
当你往控制器内添加
一批对象时

00:15:50.217 --> 00:15:51.218 align:middle
不要忘了这一点 好吗？

00:15:51.285 --> 00:15:54.254 align:middle
记住
即使在那个特定的时间

00:15:54.321 --> 00:15:56.957 align:middle
它们是不可见的
它们也还是被创建了出来

00:15:59.126 --> 00:16:00.194 align:middle
最后

00:15:59.126 --> 00:16:00.194 align:middle
最后

00:16:00.694 --> 00:16:04.798 align:middle
就像我向你们展示的组
组的背景图片

00:16:05.732 --> 00:16:06.967 align:middle
记住

00:16:07.434 --> 00:16:10.103 align:middle
在你的Apple Watch上

00:16:10.170 --> 00:16:11.772 align:middle
这些图片是有转换成本的

00:16:13.640 --> 00:16:15.142 align:middle
对于Watch OS 1
app来说

00:16:16.009 --> 00:16:17.911 align:middle
插件是运行在手机上的

00:16:18.712 --> 00:16:20.747 align:middle
图片需要...
我们需要把这些图片

00:16:20.814 --> 00:16:22.416 align:middle
弄到你的Watch上
对吧？

00:16:22.883 --> 00:16:26.086 align:middle
你的用户每次使用你的界面
都是这样

00:16:26.153 --> 00:16:27.154 align:middle
记住这一点

00:16:27.421 --> 00:16:29.389 align:middle
我们有
图像缓存API

00:16:30.757 --> 00:16:32.559 align:middle
你可以告诉我们把某组
特定的图像移过去

00:16:32.626 --> 00:16:35.929 align:middle
但它们还是必须通过
无线传到你的Watch上

00:16:36.663 --> 00:16:38.732 align:middle
在Watch OS 2上
这变得不那么相关了

00:16:38.799 --> 00:16:40.901 align:middle
因为插件是
运行在你的Watch上

00:16:41.468 --> 00:16:43.403 align:middle
但是
你还是需要安装app

00:16:43.470 --> 00:16:45.572 align:middle
你还是需要
安装

00:16:45.639 --> 00:16:46.507 align:middle
一系列资源

00:16:46.573 --> 00:16:49.076 align:middle
从安装角度来说
你的用户

00:16:49.142 --> 00:16:50.477 align:middle
还是会有
转换成本

00:16:52.246 --> 00:16:53.447 align:middle
所以要记住

00:16:53.514 --> 00:16:55.816 align:middle
使用你的图片的
合适尺寸

00:16:56.483 --> 00:16:59.386 align:middle
如果你给我们一幅图片
然后告诉我们在屏幕上

00:16:59.453 --> 00:17:02.222 align:middle
以某个尺寸显示出来
我们就会调整它的大小

00:16:59.453 --> 00:17:02.222 align:middle
以某个尺寸显示出来
我们就会调整它的大小

00:17:03.290 --> 00:17:06.059 align:middle
但是这样做
你就给我们增加了处理周期

00:17:06.193 --> 00:17:07.828 align:middle
给Watch上的
WatchKit

00:17:07.895 --> 00:17:08.896 align:middle
增加了处理周期 对吧？

00:17:08.962 --> 00:17:12.332 align:middle
所以你可以正确调整你的
图像的尺寸大小

00:17:13.032 --> 00:17:15.102 align:middle
要么在手机上
要么在你的服务器上 如果

00:17:15.169 --> 00:17:18.204 align:middle
这些图像碰巧是动态图像
就会对你的

00:17:18.372 --> 00:17:20.907 align:middle
UI渲染
产生影响

00:17:23.076 --> 00:17:24.877 align:middle
最后
如果你有一些图像

00:17:24.944 --> 00:17:26.046 align:middle
需要调整大小

00:17:26.113 --> 00:17:27.146 align:middle
比如说 按钮

00:17:28.582 --> 00:17:30.817 align:middle
你就可以用
你并不需要多个尺寸的图像

00:17:30.884 --> 00:17:32.319 align:middle
你可以使用图像瘦身

00:17:32.386 --> 00:17:35.189 align:middle
你的资源目录 Interf
ace Builder中

00:17:35.255 --> 00:17:37.257 align:middle
有这个UI
你可以对你的图像进行瘦身

00:17:37.324 --> 00:17:38.926 align:middle
告诉我们它们的尺寸发生了
什么改变

00:17:39.326 --> 00:17:40.527 align:middle
我们就会把事情做好

00:17:40.594 --> 00:17:43.330 align:middle
你就可以给我们一组
特定的图像

00:17:43.931 --> 00:17:45.699 align:middle
那么你的UI中不同的尺寸

00:17:45.766 --> 00:17:48.535 align:middle
也就适用了

00:17:50.003 --> 00:17:52.472 align:middle
会议的静态部分就是这些

00:17:52.539 --> 00:17:54.741 align:middle
现在我想
邀请汤姆上来

00:17:55.209 --> 00:17:57.511 align:middle
给这个模型增加动态
元素

00:18:00.681 --> 00:18:01.515 align:middle
太棒了

00:18:03.650 --> 00:18:05.219 align:middle
大家好我是汤姆

00:18:05.285 --> 00:18:06.854 align:middle
我也来自
WatchKit团队

00:18:06.920 --> 00:18:09.857 align:middle
我们会讨论下动画
把动画引入你在

00:18:10.123 --> 00:18:11.758 align:middle
Watch OS 2现有的
app

00:18:11.825 --> 00:18:13.060 align:middle
以及你的新app之中

00:18:13.694 --> 00:18:15.495 align:middle
我们先从Watch
OS 1现有的一些

00:18:15.562 --> 00:18:17.564 align:middle
动画类型
开始说起

00:18:18.932 --> 00:18:20.400 align:middle
表格是很灵活的

00:18:20.834 --> 00:18:23.670 align:middle
表格中的特定的更新
已经做成了动画

00:18:24.238 --> 00:18:25.706 align:middle
如果你插入行

00:18:26.139 --> 00:18:27.441 align:middle
如果你删除行

00:18:27.941 --> 00:18:29.943 align:middle
如果你在某个行中
更新内容

00:18:30.010 --> 00:18:31.078 align:middle
它们真的会动

00:18:31.144 --> 00:18:32.746 align:middle
我们都会谈谈

00:18:34.314 --> 00:18:35.816 align:middle
我们所有的例子
都是在我们的

00:18:35.883 --> 00:18:37.484 align:middle
食谱app
这个背景中发生的

00:18:38.118 --> 00:18:39.853 align:middle
让我们从
食谱列表开始

00:18:40.254 --> 00:18:43.323 align:middle
如果我们能够对列表
进行排序 那就太棒了

00:18:43.390 --> 00:18:47.561 align:middle
或者依据我们指定的等级
进行排序

00:18:47.961 --> 00:18:49.062 align:middle
或者依据字母表进行排序

00:18:50.063 --> 00:18:54.334 align:middle
我们排序的时候
列表是如何排序的

00:18:54.401 --> 00:18:55.335 align:middle
这点并不太清晰

00:18:55.636 --> 00:18:58.539 align:middle
如果我们插入行
然后看到列表是如何排序的

00:18:58.872 --> 00:19:01.275 align:middle
然后过了几秒钟
从UI中除去

00:18:58.872 --> 00:19:01.275 align:middle
然后过了几秒钟
从UI中除去

00:19:01.341 --> 00:19:02.910 align:middle
如果是这样的话
那就太棒了

00:19:02.976 --> 00:19:05.212 align:middle
我们怎么做？

00:19:06.213 --> 00:19:07.181 align:middle
很简单

00:19:07.381 --> 00:19:08.515 align:middle
我们有一张表

00:19:08.582 --> 00:19:11.118 align:middle
我们对插入行 插入索引
进行调用

00:19:11.185 --> 00:19:13.520 align:middle
我们就插入了一行
状态类型

00:19:15.222 --> 00:19:18.225 align:middle
然后我们到行控制器中
更新行上的文字

00:19:19.993 --> 00:19:21.728 align:middle
然后我们设置一个定时器
设置过几秒后

00:19:22.162 --> 00:19:24.031 align:middle
移走行
这样就在这里

00:19:24.631 --> 00:19:25.999 align:middle
实现了
这种方式

00:19:27.668 --> 00:19:31.738 align:middle
因此
插入行 删除行真的能够

00:19:31.805 --> 00:19:33.040 align:middle
增加你的界面的灵活性

00:19:33.841 --> 00:19:35.642 align:middle
需要指出的一点是
你能插入 删除

00:19:35.709 --> 00:19:37.110 align:middle
任何类型的行

00:19:37.644 --> 00:19:40.247 align:middle
比如说
我们这里有一个食谱列表

00:19:40.314 --> 00:19:41.682 align:middle
都是同一类型单元

00:19:42.015 --> 00:19:43.383 align:middle
但是我们现在插入了一个

00:19:43.450 --> 00:19:45.485 align:middle
类型截然不同的行

00:19:45.953 --> 00:19:48.622 align:middle
再说一遍 有了它
你就有了动态十足的内容

00:19:49.122 --> 00:19:50.190 align:middle
就在你的界面内

00:19:51.325 --> 00:19:54.494 align:middle
我还想指出的是
如果你想更新表

00:19:54.695 --> 00:19:56.430 align:middle
而不是制作动画
我们有两个API

00:19:56.496 --> 00:19:58.298 align:middle
如果你们已经用过了
WatchKit

00:19:58.365 --> 00:19:59.766 align:middle
或者Watch OS 1
那么你们应该知道了

00:20:02.269 --> 00:20:04.671 align:middle
接着来看行里的内容

00:20:05.005 --> 00:20:06.173 align:middle
我们可以点击看到

00:20:06.240 --> 00:20:08.575 align:middle
食谱的
详细视图

00:20:08.842 --> 00:20:09.776 align:middle
我们也有一个描述

00:20:10.310 --> 00:20:11.912 align:middle
考虑到Apple
Watch的尺寸

00:20:11.979 --> 00:20:13.547 align:middle
考虑到描述的长度

00:20:13.614 --> 00:20:14.948 align:middle
我们可能不想在那里
一直呈现

00:20:15.015 --> 00:20:16.717 align:middle
完整的
描述

00:20:17.384 --> 00:20:19.887 align:middle
因此我们把描述放到了一个
表的行中

00:20:19.953 --> 00:20:21.488 align:middle
在那里显示有删节的版本

00:20:22.055 --> 00:20:24.224 align:middle
如果你点击那个行

00:20:25.259 --> 00:20:26.827 align:middle
它就会就地展开 展示完整的

00:20:26.894 --> 00:20:28.095 align:middle
描述 这很棒

00:20:28.962 --> 00:20:31.598 align:middle
真的很漂亮

00:20:31.665 --> 00:20:34.001 align:middle
动画真的很漂亮

00:20:34.234 --> 00:20:36.637 align:middle
并且它能给你提供
你想要的信息

00:20:36.703 --> 00:20:37.704 align:middle
分毫不差

00:20:38.839 --> 00:20:39.973 align:middle
我们是怎样实现的？

00:20:40.040 --> 00:20:41.542 align:middle
我要回到我们的
蓝盒那里

00:20:43.110 --> 00:20:44.111 align:middle
这是我们的表的单元

00:20:44.978 --> 00:20:47.381 align:middle
单元内
我们有几个标签

00:20:47.948 --> 00:20:50.017 align:middle
我们有短标签
这是描述的

00:20:50.083 --> 00:20:51.251 align:middle
删节版本

00:20:52.219 --> 00:20:55.189 align:middle
我们还有一个标签 上面写着
“点击显示更多信息”

00:20:56.190 --> 00:20:58.025 align:middle
当然
我们还有第三个标签

00:20:58.458 --> 00:20:59.893 align:middle
这个标签是
完整的描述

00:21:01.195 --> 00:21:02.763 align:middle
所以一开始

00:21:02.829 --> 00:21:06.867 align:middle
我们的单元隐藏了完整描述

00:21:07.267 --> 00:21:10.571 align:middle
标签 我们所做的
就是用户点击单元

00:21:10.771 --> 00:21:12.406 align:middle
我们就把它颠倒过来

00:21:12.940 --> 00:21:15.542 align:middle
我们会取消隐藏
完整描述标签

00:21:15.609 --> 00:21:17.711 align:middle
我们会把其它的隐藏起来

00:21:17.778 --> 00:21:19.479 align:middle
这样 就可以在

00:21:19.546 --> 00:21:21.982 align:middle
WatchKit中
播放动画

00:21:22.282 --> 00:21:23.217 align:middle
就是这么简单

00:21:23.717 --> 00:21:24.885 align:middle
再说一遍 这是代码

00:21:24.952 --> 00:21:26.753 align:middle
就是这么短短几行代码

00:21:27.154 --> 00:21:28.922 align:middle
加在你的应用程序内

00:21:29.256 --> 00:21:31.124 align:middle
就是一次
奇妙的经历

00:21:35.929 --> 00:21:37.631 align:middle
行又重新加载

00:21:37.698 --> 00:21:39.867 align:middle
不管在高度上
它们的内容发生了什么改变

00:21:40.200 --> 00:21:42.002 align:middle
如果你重新加载某个行
但是高度不变

00:21:42.069 --> 00:21:44.137 align:middle
那就没有动画

00:21:45.606 --> 00:21:47.174 align:middle
要实现这个

00:21:47.241 --> 00:21:49.076 align:middle
你的行高就得是自动调整

00:21:49.142 --> 00:21:51.211 align:middle
因为
如果它们的高度是固定

00:21:51.278 --> 00:21:52.679 align:middle
行就不会
真的发生变化

00:21:57.918 --> 00:22:00.120 align:middle
现在我们回到我们的
食谱列表

00:21:57.918 --> 00:22:00.120 align:middle
现在我们回到我们的
食谱列表

00:22:00.187 --> 00:22:02.022 align:middle
看一个不同类型的
动画

00:22:03.290 --> 00:22:05.058 align:middle
回到了我们的单元中

00:22:05.826 --> 00:22:07.194 align:middle
我要唤起这些箭头

00:22:07.761 --> 00:22:10.063 align:middle
就像它展示的这样
如果我们能够增加某种...

00:22:10.264 --> 00:22:11.732 align:middle
让箭头旋转起来
比如说

00:22:12.099 --> 00:22:14.968 align:middle
那就
太棒了

00:22:15.969 --> 00:22:19.206 align:middle
我们可以在一个
动态图像中实现这个

00:22:19.873 --> 00:22:22.209 align:middle
动态图像功能很强大

00:22:22.276 --> 00:22:23.310 align:middle
有了它们

00:22:23.377 --> 00:22:27.314 align:middle
你就可以在给定的时间内
循环一系列的图像

00:22:28.949 --> 00:22:32.519 align:middle
你也可以重复
颠倒动画

00:22:32.853 --> 00:22:34.521 align:middle
WatchKit中
允许的

00:22:34.621 --> 00:22:36.190 align:middle
动画类型
就只有这一种

00:22:36.256 --> 00:22:38.058 align:middle
同样地
它们也很强大

00:22:39.726 --> 00:22:42.896 align:middle
我想指出一点
如果你有一系列的图像

00:22:42.963 --> 00:22:45.332 align:middle
图像的数目会很快增长
它们的加载时间成本

00:22:45.599 --> 00:22:48.902 align:middle
性能成本也会很快增长
并且

00:22:48.969 --> 00:22:51.505 align:middle
内存使用
也会很快增长

00:22:51.972 --> 00:22:53.040 align:middle
记住这一点

00:22:53.106 --> 00:22:55.809 align:middle
尽量减少图像的数量

00:22:55.876 --> 00:22:58.111 align:middle
尽量降低图像的尺寸

00:22:58.178 --> 00:22:59.446 align:middle
这样你才能获得
更好的性能

00:23:02.749 --> 00:23:04.718 align:middle
我还想指出的是

00:23:04.785 --> 00:23:07.120 align:middle
我们在Watch OS
2上的

00:23:07.187 --> 00:23:10.390 align:middle
新选取器对象
允许你用一个“数码皇冠”

00:23:10.591 --> 00:23:13.327 align:middle
在一张动态图像中
整理图像

00:23:13.861 --> 00:23:16.430 align:middle
它的功能很强大
会给你一次奇妙的体验

00:23:17.931 --> 00:23:21.101 align:middle
如果你想获取更多信息
有一个会议

00:23:21.168 --> 00:23:22.903 align:middle
叫做“深入了解WatchKit
第二部分”

00:23:22.970 --> 00:23:26.173 align:middle
你可以了解新选取器对象

00:23:29.042 --> 00:23:31.912 align:middle
这是WatchKit中
现有的功能

00:23:31.979 --> 00:23:34.448 align:middle
我知道很多人
对新东西感兴趣

00:23:34.515 --> 00:23:37.251 align:middle
也就是我们在WatchOS
2中引入的动画API

00:23:38.218 --> 00:23:39.853 align:middle
动画API

00:23:40.888 --> 00:23:44.758 align:middle
允许你把界面对象上的
特定的属性制作成动画

00:23:45.259 --> 00:23:46.994 align:middle
包括不透明度

00:23:48.629 --> 00:23:49.930 align:middle
宽度
高度

00:23:51.832 --> 00:23:54.201 align:middle
对齐
包括从左到右

00:23:54.268 --> 00:23:55.636 align:middle
从上到下或者居中

00:23:57.070 --> 00:23:59.173 align:middle
组上的背景颜色

00:24:00.040 --> 00:24:02.609 align:middle
图像上的颜色 色彩

00:24:02.676 --> 00:24:04.611 align:middle
就像我们幻灯片

00:24:04.678 --> 00:24:06.547 align:middle
和组插入物上面的这样

00:24:07.848 --> 00:24:09.316 align:middle
你可以把很多东西
制作成动画

00:24:11.118 --> 00:24:14.955 align:middle
如果你用过的话 如果你在
iOS上编过程的话

00:24:15.622 --> 00:24:17.558 align:middle
API可能会看起来很熟悉

00:24:17.958 --> 00:24:20.460 align:middle
需要过一段时间
一个动画块

00:24:20.928 --> 00:24:22.596 align:middle
你在动画块内进行的全部更新

00:24:22.663 --> 00:24:25.866 align:middle
就都会在指定时间内
绘制成动画

00:24:27.668 --> 00:24:30.671 align:middle
那我们就来插上一脚
谈一些例子

00:24:31.004 --> 00:24:32.606 align:middle
希望能向你演示一些技巧
希望能向你演示

00:24:32.673 --> 00:24:36.276 align:middle
如何把它整合到
你的WatchKit app上

00:24:38.579 --> 00:24:42.316 align:middle
我们首先回到app的详细视图
看第一个例子

00:24:42.649 --> 00:24:44.651 align:middle
点击
份数画面

00:24:45.419 --> 00:24:48.355 align:middle
我们要添加一个动画
让按铃四周的圆圈

00:24:48.689 --> 00:24:50.657 align:middle
依次
淡出

00:24:51.158 --> 00:24:51.992 align:middle
就像这样

00:24:55.596 --> 00:24:56.430 align:middle
在代码中

00:24:56.964 --> 00:25:00.234 align:middle
我们要依次
通过外环四周的组

00:24:56.964 --> 00:25:00.234 align:middle
我们要依次
通过外环四周的组

00:25:00.300 --> 00:25:01.502 align:middle
因此每个圈都是一个组

00:25:03.103 --> 00:25:06.773 align:middle
我们要创建一个调度块
对我们的动画进行安排

00:25:07.441 --> 00:25:08.408 align:middle
然后在这个块内

00:25:08.876 --> 00:25:11.178 align:middle
我们会把组的端制作成动画

00:25:11.879 --> 00:25:13.380 align:middle
它就会淡入

00:25:13.747 --> 00:25:17.317 align:middle
非常简单
但是效果很棒

00:25:18.185 --> 00:25:21.088 align:middle
我还想指出的是
我们引入了两个新API

00:25:21.588 --> 00:25:24.324 align:middle
显示 消失
它们都位于

00:25:24.391 --> 00:25:25.959 align:middle
WK界面控制器上

00:25:26.426 --> 00:25:27.561 align:middle
这些对你的动画很重要

00:25:27.861 --> 00:25:29.129 align:middle
我再谈一谈

00:25:29.196 --> 00:25:31.498 align:middle
我想指出

00:25:31.565 --> 00:25:32.999 align:middle
它以后
会生效

00:25:36.537 --> 00:25:38.839 align:middle
因此在这个界面

00:25:38.906 --> 00:25:42.009 align:middle
如果你在某个视图出现之前

00:25:42.075 --> 00:25:43.777 align:middle
就开始播放动画的话
使用“不要显示”

00:25:43.977 --> 00:25:45.479 align:middle
就可以激活

00:25:46.213 --> 00:25:48.782 align:middle
我知道很多人
都在使用“立即激活”

00:25:48.849 --> 00:25:50.050 align:middle
来开始动画

00:25:50.117 --> 00:25:52.553 align:middle
因此可能在显示在屏幕之前

00:25:52.686 --> 00:25:54.488 align:middle
就调用了“立即激活”

00:25:54.555 --> 00:25:56.790 align:middle
所以说它不是
开始你的动画的好地方

00:25:57.057 --> 00:25:58.492 align:middle
所以使用“显示”
这个方式吧

00:26:00.627 --> 00:26:02.863 align:middle
同样 你可以用定时器

00:26:02.930 --> 00:26:04.298 align:middle
或者GCD把你动画错开

00:26:04.631 --> 00:26:06.567 align:middle
当你这样做的时候

00:26:06.767 --> 00:26:10.037 align:middle
要记住只有激活后你才能更新
某个控制器

00:26:10.103 --> 00:26:12.739 align:middle
如果你在控制器释放之后
再绘制动画

00:26:13.373 --> 00:26:15.242 align:middle
这些更新就不会真的生效；

00:26:15.309 --> 00:26:16.143 align:middle
所以要记住这点

00:26:16.210 --> 00:26:18.245 align:middle
务必使你的控制器
处于激活状态

00:26:19.580 --> 00:26:23.116 align:middle
此外还要对你的动画
总时长进行记录

00:26:23.483 --> 00:26:25.219 align:middle
如果你加入了
大量的动画

00:26:25.285 --> 00:26:27.154 align:middle
动画时长就会很快增加

00:26:27.855 --> 00:26:30.424 align:middle
很有可能用户和你的app
进行交互的时间

00:26:30.490 --> 00:26:33.894 align:middle
就很短
如果你有一个冗长的动画

00:26:34.027 --> 00:26:37.998 align:middle
那么它就会拖延你的app
的时长

00:26:38.065 --> 00:26:39.132 align:middle
所以要注意这一点

00:26:41.168 --> 00:26:44.304 align:middle
为了方便起见
你可以在故事板中

00:26:44.371 --> 00:26:45.339 align:middle
设置你的初始值

00:26:45.606 --> 00:26:47.374 align:middle
举例来说
在这个界面

00:26:47.441 --> 00:26:51.345 align:middle
所有的这些圈初始
都是隐藏的

00:26:51.411 --> 00:26:53.313 align:middle
一开始初始值都是零

00:26:53.380 --> 00:26:55.015 align:middle
我们就可以把它们写到
故事板中

00:26:55.282 --> 00:26:56.817 align:middle
这样运行时
就不用担心了

00:26:58.886 --> 00:27:00.988 align:middle
我们再来看我们的
第二个例子

00:26:58.886 --> 00:27:00.988 align:middle
我们再来看我们的
第二个例子

00:27:01.221 --> 00:27:03.690 align:middle
这是我们的原料画面

00:27:04.525 --> 00:27:06.960 align:middle
如果我们能让标签飞入
那就太棒了

00:27:07.628 --> 00:27:08.762 align:middle
就像你看到的这样

00:27:10.430 --> 00:27:12.533 align:middle
我们
到蓝盒外面

00:27:15.169 --> 00:27:16.403 align:middle
我们也有了表格行

00:27:17.638 --> 00:27:18.906 align:middle
就像我们之前展示的那样

00:27:18.972 --> 00:27:21.708 align:middle
左边的背景是我们的数字
是个组

00:27:22.409 --> 00:27:23.644 align:middle
右边是我们的
标签

00:27:24.378 --> 00:27:26.547 align:middle
我们现在要在两者之间
增加一个组

00:27:26.613 --> 00:27:28.115 align:middle
我们称之为
“空格组”

00:27:28.649 --> 00:27:31.218 align:middle
组内可以布置内容
功能很强大

00:27:31.285 --> 00:27:32.386 align:middle
但是

00:27:32.452 --> 00:27:34.721 align:middle
组也能影响到
四周的内容

00:27:35.289 --> 00:27:36.456 align:middle
这是因为内容

00:27:36.757 --> 00:27:38.692 align:middle
这是因为我们
在WatchKit内的布局

00:27:38.759 --> 00:27:39.826 align:middle
是基于流的

00:27:40.394 --> 00:27:43.063 align:middle
流内的组会影响到
其他组

00:27:43.630 --> 00:27:45.165 align:middle
举例来说 这里

00:27:45.432 --> 00:27:47.301 align:middle
单元的初始状态是：

00:27:47.367 --> 00:27:50.270 align:middle
“空格组”为全宽
它实际所做的

00:27:50.337 --> 00:27:53.807 align:middle
就是把标签推到屏幕的
边缘

00:27:53.874 --> 00:27:56.910 align:middle
因为你就可以
在内部用了

00:27:56.977 --> 00:27:58.478 align:middle
在你的app内部
水平流

00:27:58.779 --> 00:28:00.480 align:middle
纵向流都会在某种程度上
影响

00:27:58.779 --> 00:28:00.480 align:middle
纵向流都会在某种程度上
影响

00:28:00.547 --> 00:28:01.715 align:middle
布置的事情

00:28:02.549 --> 00:28:03.851 align:middle
当我们绘制动画时

00:28:03.917 --> 00:28:06.587 align:middle
我们所做的 就是更新我们的
“空格组”的宽度

00:28:06.653 --> 00:28:08.488 align:middle
那个标签此时就会进来

00:28:08.722 --> 00:28:10.791 align:middle
因为此时我们会重新计算

00:28:11.258 --> 00:28:12.993 align:middle
流是如何在界面
布置的

00:28:14.795 --> 00:28:16.196 align:middle
因此在代码中

00:28:16.263 --> 00:28:19.099 align:middle
我们一次通过了
我们全部表格行

00:28:20.334 --> 00:28:23.003 align:middle
我们让数字背景
和标签都淡入了

00:28:23.370 --> 00:28:25.239 align:middle
我们还设置了“空格行”的
宽度

00:28:25.606 --> 00:28:26.807 align:middle
我们用一个单一的动画块

00:28:26.874 --> 00:28:28.242 align:middle
把这些都
包在了里面

00:28:28.709 --> 00:28:29.676 align:middle
如果可以的话

00:28:29.743 --> 00:28:31.178 align:middle
你可以通过用
一个单一的动画块

00:28:31.245 --> 00:28:32.646 align:middle
把你全部的动画包在里面

00:28:32.713 --> 00:28:33.680 align:middle
这样来提高性能

00:28:34.014 --> 00:28:35.849 align:middle
但是 就像我刚说的
刚展示的

00:28:35.916 --> 00:28:37.918 align:middle
如果是连续的动画
那没问题

00:28:37.985 --> 00:28:40.854 align:middle
但是要记住
动画太多

00:28:40.921 --> 00:28:42.623 align:middle
会对性能产生
立竿见影的影响

00:28:46.293 --> 00:28:48.595 align:middle
因此不可见的“空格组”
功能确实很强大

00:28:48.829 --> 00:28:51.832 align:middle
你可以跳转它们的宽度
高度 对齐

00:28:51.899 --> 00:28:52.833 align:middle
改变你的布局

00:28:53.467 --> 00:28:57.237 align:middle
还有一件事要指出的是
当你制作动画时 我们实际上

00:28:57.304 --> 00:29:00.774 align:middle
会转送出你的整个界面
我就是这样设置

00:28:57.304 --> 00:29:00.774 align:middle
会转送出你的整个界面
我就是这样设置

00:29:00.841 --> 00:29:04.044 align:middle
那个组的宽度的 标签页实际
上改变了它的位置

00:29:04.511 --> 00:29:08.248 align:middle
即使我自己根本
没有改

00:29:12.252 --> 00:29:13.787 align:middle
现在我们继续来看
第三个例子

00:29:13.854 --> 00:29:16.023 align:middle
这是
最复杂的一个例子

00:29:16.490 --> 00:29:19.359 align:middle
这个画面这里
你可以添加一项注释

00:29:19.793 --> 00:29:23.130 align:middle
如果你点击添加注释
我们会把文本的默认值

00:29:23.197 --> 00:29:24.531 align:middle
输入系统

00:29:25.365 --> 00:29:28.836 align:middle
如果你选择一个选项
我们会插入一个对话框

00:29:29.369 --> 00:29:31.405 align:middle
或者 我们会绘制
一个对话框的动画

00:29:31.572 --> 00:29:34.141 align:middle
我们已经有了一个
非常复杂的动画

00:29:34.575 --> 00:29:36.944 align:middle
但是我们要
更进一步

00:29:37.644 --> 00:29:39.246 align:middle
如果你点击“确认”

00:29:40.948 --> 00:29:42.015 align:middle
我们会绘制一个

00:29:42.082 --> 00:29:43.283 align:middle
确认框

00:29:43.617 --> 00:29:45.786 align:middle
这些都是在一个界面内
都是用了

00:29:46.019 --> 00:29:47.821 align:middle
新的
动画API

00:29:48.856 --> 00:29:51.024 align:middle
我们把这个
分成两个部分

00:29:51.091 --> 00:29:53.327 align:middle
我们先来谈谈
这个对话框

00:29:56.430 --> 00:29:57.631 align:middle
返回了一个线框

00:29:58.832 --> 00:30:00.667 align:middle
在我们的界面内
我们有一个组

00:29:58.832 --> 00:30:00.667 align:middle
在我们的界面内
我们有一个组

00:30:01.134 --> 00:30:02.903 align:middle
我要调用的
就是那个文本容器

00:30:04.438 --> 00:30:06.840 align:middle
在容器内
顶部有我们的文本泡

00:30:06.907 --> 00:30:07.941 align:middle
文本泡内有我们的标签

00:30:08.976 --> 00:30:12.045 align:middle
下面
有我们的确认按钮

00:30:13.647 --> 00:30:14.815 align:middle
当我们绘制动画时

00:30:14.882 --> 00:30:17.885 align:middle
我们的初始状态会把文本

00:30:18.285 --> 00:30:20.153 align:middle
底部右对齐

00:30:20.220 --> 00:30:22.155 align:middle
就像你在这里能看到的这样

00:30:22.222 --> 00:30:23.390 align:middle
按钮淡出了

00:30:24.424 --> 00:30:25.692 align:middle
当我们绘制动画时

00:30:25.759 --> 00:30:27.661 align:middle
我们会更新文本泡的宽度

00:30:27.728 --> 00:30:29.930 align:middle
高度
并且让它和按钮

00:30:30.364 --> 00:30:33.200 align:middle
淡入
就像你在这里看到的一样

00:30:36.270 --> 00:30:37.538 align:middle
我们就可以得到这种特效

00:30:37.604 --> 00:30:40.541 align:middle
就是这么几行代码
我们就可以得到这种特效

00:30:41.108 --> 00:30:43.410 align:middle
就像我说过的
我们在文本泡上更新了

00:30:43.577 --> 00:30:45.946 align:middle
宽度 高度以及开端

00:30:46.713 --> 00:30:48.849 align:middle
因为我们想适应那个标签的
全文

00:30:48.916 --> 00:30:50.417 align:middle
还有自动调整
高度

00:30:50.951 --> 00:30:54.488 align:middle
无论注释有多长
都会适应

00:30:55.889 --> 00:30:59.059 align:middle
我们会通过更新开端
让那个按钮淡入

00:31:00.460 --> 00:31:02.462 align:middle
我们也会更新文本容器的
高度

00:31:02.529 --> 00:31:03.564 align:middle
以便适应所有的事情

00:31:04.865 --> 00:31:07.234 align:middle
并且用一个动画块
把所有一切包裹进来

00:31:09.102 --> 00:31:11.338 align:middle
这就是动画的
第一部分

00:31:12.472 --> 00:31:15.542 align:middle
第二部分是这里
我们展示了一个确认画面

00:31:19.146 --> 00:31:21.081 align:middle
再回到我们的蓝框

00:31:22.950 --> 00:31:25.819 align:middle
这里我们有文本容器
为了清晰起见

00:31:25.886 --> 00:31:27.221 align:middle
我不会在那里包括
对象

00:31:28.021 --> 00:31:30.591 align:middle
但是还是在下面的界面中

00:31:30.657 --> 00:31:31.692 align:middle
我们有另外一个组

00:31:31.758 --> 00:31:34.094 align:middle
我会称之为
“确认容器”

00:31:34.628 --> 00:31:36.964 align:middle
我们在此所做的
就是把界面的不同部分

00:31:37.030 --> 00:31:39.733 align:middle
包裹进
它们各自的组里

00:31:40.000 --> 00:31:42.803 align:middle
这样
我们就可以...

00:31:42.870 --> 00:31:45.706 align:middle
我们就可以隐藏 展开它们

00:31:46.006 --> 00:31:47.841 align:middle
展示界面的
不同部分

00:31:48.342 --> 00:31:51.678 align:middle
举例来说
这是界面的初始状态

00:31:52.112 --> 00:31:53.981 align:middle
因此文本容器
就是全高度

00:31:54.515 --> 00:31:57.818 align:middle
而确认容器实际上
高度为零

00:31:58.118 --> 00:32:00.587 align:middle
因此在屏幕上隐藏了起来

00:31:58.118 --> 00:32:00.587 align:middle
因此在屏幕上隐藏了起来

00:32:01.088 --> 00:32:04.124 align:middle
因为我们设置宽度
设置高度API的新行为

00:32:04.191 --> 00:32:06.793 align:middle
你实际上就可以实现

00:32:06.860 --> 00:32:07.961 align:middle
比零
更高的宽度

00:32:09.062 --> 00:32:10.330 align:middle
当我们绘制动画时

00:32:10.397 --> 00:32:13.100 align:middle
我们所做的就是颠倒
这些的高度

00:32:13.734 --> 00:32:16.703 align:middle
因此文本容器
现在高度为零

00:32:17.237 --> 00:32:19.673 align:middle
而现在确认容器是

00:32:19.740 --> 00:32:22.042 align:middle
屏幕的全高度

00:32:23.877 --> 00:32:25.846 align:middle
在代码中 正如我所说的

00:32:25.913 --> 00:32:28.382 align:middle
我们更新了文本容器的
高度

00:32:29.650 --> 00:32:31.385 align:middle
更新了确认容器的高度

00:32:31.451 --> 00:32:32.553 align:middle
并且把它包裹进了

00:32:32.619 --> 00:32:34.021 align:middle
一个动画块

00:32:34.988 --> 00:32:37.758 align:middle
这样
你就实现了界面的一部分

00:32:37.824 --> 00:32:40.794 align:middle
缩小屏幕 另一部分放大
屏幕的特效

00:32:43.664 --> 00:32:48.335 align:middle
因此我想提一提动画上的
几个注释 算是某种小结

00:32:48.402 --> 00:32:50.504 align:middle
概括
指出你可能会

00:32:50.571 --> 00:32:52.573 align:middle
遇到的一些
陷阱

00:32:54.308 --> 00:32:56.643 align:middle
任何影响改变你的界面元素的
更新

00:32:56.710 --> 00:32:59.112 align:middle
实际上
实际上都会

00:32:59.513 --> 00:33:00.814 align:middle
绘制布局动画

00:32:59.513 --> 00:33:00.814 align:middle
绘制布局动画

00:33:01.348 --> 00:33:04.218 align:middle
比如说
如果你更新某个标签的文本

00:33:04.952 --> 00:33:06.587 align:middle
自动调整

00:33:06.653 --> 00:33:08.922 align:middle
这样做的时候

00:33:08.989 --> 00:33:11.892 align:middle
文本的宽度
或者高度就变了

00:33:11.959 --> 00:33:14.695 align:middle
它实际上会绘制那个标签的
新的帧的动画

00:33:15.362 --> 00:33:18.465 align:middle
然而
你不会绘制文本的应用

00:33:18.532 --> 00:33:20.701 align:middle
的动画
只是调整那个文本的尺寸

00:33:22.836 --> 00:33:25.572 align:middle
如果你立刻播放大量的
动画

00:33:25.873 --> 00:33:30.377 align:middle
或者你的界面内有类型复杂的
布局

00:33:30.644 --> 00:33:32.946 align:middle
那会对性能产生影响
所以千万要记住这点

00:33:33.013 --> 00:33:36.683 align:middle
一定要在硬件上
进行测试

00:33:37.084 --> 00:33:40.287 align:middle
因此模拟器是制作你的
动画

00:33:40.554 --> 00:33:42.055 align:middle
并且确保一切正常的
好方法

00:33:42.322 --> 00:33:43.624 align:middle
但是对于实际性能来说

00:33:43.690 --> 00:33:45.392 align:middle
要看看实际情况
如何

00:33:45.692 --> 00:33:46.793 align:middle
一定要在硬件上进行测试

00:33:46.860 --> 00:33:48.195 align:middle
这点非常重要

00:33:49.696 --> 00:33:51.565 align:middle
还有一点要指出

00:33:51.632 --> 00:33:52.866 align:middle
动画是在你的
应用程序内

00:33:52.933 --> 00:33:54.034 align:middle
生效的

00:33:54.501 --> 00:33:57.838 align:middle
但是 如果你在某个闪现
某个通知内调用它

00:33:58.305 --> 00:34:00.073 align:middle
这些更新仍然
会生效

00:33:58.305 --> 00:34:00.073 align:middle
这些更新仍然
会生效

00:34:00.140 --> 00:34:01.175 align:middle
但是不会绘制成动画

00:34:01.909 --> 00:34:04.077 align:middle
因此
在某个闪现

00:34:04.144 --> 00:34:05.512 align:middle
某个通知内使用它
毫无意义

00:34:07.848 --> 00:34:08.849 align:middle
还有几点

00:34:10.050 --> 00:34:11.185 align:middle
请谨慎使用动画

00:34:11.451 --> 00:34:12.886 align:middle
这是因为动画

00:34:13.020 --> 00:34:15.155 align:middle
绝不应该成为你的界面的
焦点

00:34:15.722 --> 00:34:19.960 align:middle
如果你的界面存在的理由
就是因为动画

00:34:20.027 --> 00:34:21.895 align:middle
那么也许你该
考虑下了

00:34:22.929 --> 00:34:25.699 align:middle
另外 再强调一次
总时长不要太长

00:34:25.966 --> 00:34:30.603 align:middle
你的app内的时间
可能是以秒为单位

00:34:30.670 --> 00:34:32.706 align:middle
所以
不要延长动画

00:34:32.773 --> 00:34:33.739 align:middle
不要超出必要的长度

00:34:34.107 --> 00:34:35.542 align:middle
有一个会议与此相关
很不错

00:34:35.609 --> 00:34:38.110 align:middle
叫做“结合动画设计”
我强烈推荐这个会议

00:34:39.279 --> 00:34:41.748 align:middle
小结一下
对本次谈话做个总结

00:34:41.815 --> 00:34:43.417 align:middle
WatchKit中的布局

00:34:43.483 --> 00:34:45.284 align:middle
与UIKit和
AppKitt是不同的

00:34:45.351 --> 00:34:46.853 align:middle
UIKit和AppKitt在设计时
就指明了

00:34:48.088 --> 00:34:49.857 align:middle
但是运行时非常灵活

00:34:49.922 --> 00:34:53.493 align:middle
我们有很多API
我们又引入了许多新的API

00:34:54.161 --> 00:34:57.931 align:middle
它们可以让你一次更新
你的UI

00:34:59.132 --> 00:35:00.367 align:middle
再说一次 它们是基于流

00:34:59.132 --> 00:35:00.367 align:middle
再说一次 它们是基于流

00:35:00.667 --> 00:35:04.304 align:middle
因此你指定的是
你的对象的

00:35:04.538 --> 00:35:07.841 align:middle
布局探试程序 但是完成布局
的是WatchKit本身

00:35:08.909 --> 00:35:10.244 align:middle
组的功能真的很强大

00:35:10.644 --> 00:35:13.981 align:middle
如你所见
你可以构造非常复杂的界面

00:35:14.481 --> 00:35:17.718 align:middle
你之前可能以为在Watch
Kit中是不可能的

00:35:19.052 --> 00:35:21.989 align:middle
现在
在你的app中添加动画吧

00:35:22.756 --> 00:35:26.059 align:middle
动画能在你的app内增加
生机 反馈

00:35:26.126 --> 00:35:27.661 align:middle
非常棒
我相信你们都了解这一点

00:35:28.328 --> 00:35:30.631 align:middle
我们在WatchKit中已经
有很多方式 让你可以

00:35:32.266 --> 00:35:35.068 align:middle
引入这些动画
在Watch OS 2中

00:35:35.135 --> 00:35:37.304 align:middle
功能就
更加强大了

00:35:38.772 --> 00:35:41.475 align:middle
如果你想获取更多信息
这里有很多资料

00:35:41.542 --> 00:35:42.643 align:middle
和技术支持

00:35:42.709 --> 00:35:44.411 align:middle
我们也会在
developer.Apple.com上

00:35:44.478 --> 00:35:47.247 align:middle
把示例代码当成一个项目
发布出去

00:35:47.981 --> 00:35:51.385 align:middle
如果是普通的问题
我们有福音传道者

00:35:51.451 --> 00:35:52.486 align:middle
杰克·拜伦斯

00:35:52.953 --> 00:35:55.289 align:middle
因此如果你有问题
就问他吧

00:35:56.590 --> 00:35:59.626 align:middle
本周
有很多相关的内容

00:35:59.960 --> 00:36:01.261 align:middle
有些相关的会议正在进行

00:35:59.960 --> 00:36:01.261 align:middle
有些相关的会议正在进行

00:36:01.895 --> 00:36:05.232 align:middle
我想要指出几个
明天上午的“要诀和技巧”

00:36:05.532 --> 00:36:08.735 align:middle
明天下午的
“设计要诀和技巧”

00:36:09.136 --> 00:36:10.404 align:middle
这两个都很不错

00:36:11.305 --> 00:36:12.172 align:middle
谢谢

00:36:14.041 --> 00:36:16.143 align:middle
祝你们在此过得愉快
谢谢
