WEBVTT

00:00:32.232 --> 00:00:33.233 align:middle
文斯·斯派德: 大家好

00:00:33.600 --> 00:00:34.735 align:middle
我是文斯·斯派德

00:00:35.002 --> 00:00:37.037 align:middle
是Cocoa框架的工程师

00:00:37.271 --> 00:00:39.373 align:middle
今天我和大家分享的内容

00:00:39.439 --> 00:00:41.542 align:middle
是《进度报告的最佳实践》

00:00:42.242 --> 00:00:44.511 align:middle
在Cocoa中
用NSProgress代表

00:00:45.712 --> 00:00:48.649 align:middle
我先来介绍 NSProgress

00:00:49.183 --> 00:00:51.151 align:middle
然后我们一起聊聊把
NSProgress

00:00:51.218 --> 00:00:52.252 align:middle
对象组合在一起

00:00:52.853 --> 00:00:55.422 align:middle
接着是如何将
NSProgress作为

00:00:55.489 --> 00:00:57.391 align:middle
取消 暂停和恢复任务的界面

00:00:58.458 --> 00:01:00.827 align:middle
然后再聊聊 NSProgress

00:00:58.458 --> 00:01:00.827 align:middle
然后再聊聊 NSProgress

00:01:00.894 --> 00:01:03.297 align:middle
和用户界面挂钩还要总结出

00:01:03.363 --> 00:01:04.798 align:middle
一些技巧和最佳实践

00:01:07.034 --> 00:01:07.701 align:middle
现在就开始

00:01:09.536 --> 00:01:12.139 align:middle
NSProgress是
Foundation的一个对象

00:01:12.206 --> 00:01:14.341 align:middle
代表某项任务完成

00:01:14.842 --> 00:01:18.512 align:middle
任务可以是下载文档安装app

00:01:19.246 --> 00:01:21.548 align:middle
或者是你自己的应用任务

00:01:22.449 --> 00:01:26.320 align:middle
NSProgress对象的存在
是让你轻松跨越

00:01:26.386 --> 00:01:31.491 align:middle
自己的系统的各种组件报告进度

00:01:31.925 --> 00:01:36.330 align:middle
实际上 有若干 Cocoa API
都在通过NSProgress

00:01:36.396 --> 00:01:39.199 align:middle
汇报进度 如NSBundle
Resource Request

00:01:39.466 --> 00:01:41.401 align:middle
UIDocument
和 NSData

00:01:41.902 --> 00:01:44.238 align:middle
可以通过NSProgress
获取信息

00:01:44.304 --> 00:01:46.974 align:middle
了解那些API在你的
应用中在做什么

00:01:48.609 --> 00:01:50.711 align:middle
NSProgress进行了本地化

00:01:50.944 --> 00:01:53.113 align:middle
可以用它向用户显示信息

00:01:53.180 --> 00:01:54.181 align:middle
告知在发生什么

00:01:54.481 --> 00:01:56.717 align:middle
我们还有办法影响它表述的内容

00:01:56.884 --> 00:01:57.885 align:middle
稍后就来介绍

00:01:59.052 --> 00:02:03.023 align:middle
但是首先来了解
NSProgress的核心属性

00:01:59.052 --> 00:02:03.023 align:middle
但是首先来了解
NSProgress的核心属性

00:02:03.090 --> 00:02:05.893 align:middle
我们有totalUnitCount
是关于要做

00:02:05.959 --> 00:02:08.461 align:middle
多少任务以及completed-
UnitCount

00:02:08.529 --> 00:02:10.330 align:middle
表示多少任务已经完成

00:02:10.663 --> 00:02:12.766 align:middle
在任务发生时这部分会更新

00:02:13.634 --> 00:02:18.939 align:middle
fractionCompleted
是个二元值 从0到1

00:02:19.306 --> 00:02:22.376 align:middle
更新 让你了解距离任务完成还有多久

00:02:23.610 --> 00:02:25.312 align:middle
因此totalUnitCount和

00:02:25.379 --> 00:02:27.281 align:middle
completed-
UnitCount

00:02:27.414 --> 00:02:30.450 align:middle
这些属性所涉及的单位由你来定

00:02:30.817 --> 00:02:34.021 align:middle
是在进度方面需要跟踪的任何单位

00:02:34.388 --> 00:02:38.692 align:middle
也许是字节 文件数
照片 甚至是抽象单位

00:02:38.859 --> 00:02:41.094 align:middle
如部分任务的百分比之类

00:02:41.562 --> 00:02:44.698 align:middle
每个单独NSProgress
对该以什么单位报告

00:02:44.765 --> 00:02:46.233 align:middle
都有自己的想法

00:02:48.335 --> 00:02:51.038 align:middle
如果不清楚总共有多少任务

00:02:51.104 --> 00:02:53.207 align:middle
也就不知道
你的totalUnitCount

00:02:53.440 --> 00:02:55.075 align:middle
可以将进度定为不确定

00:02:55.209 --> 00:02:58.412 align:middle
可以通过设定 completed-
UnitCount

00:02:58.579 --> 00:03:00.981 align:middle
或totalUnitCount
为负值来实现

00:02:58.579 --> 00:03:00.981 align:middle
或totalUnitCount
为负值来实现

00:03:03.083 --> 00:03:04.885 align:middle
接下来 我们谈谈本地化

00:03:05.986 --> 00:03:08.989 align:middle
NSProgress有着两个属性
本地化Description

00:03:09.056 --> 00:03:11.058 align:middle
和本地化Additional
Description

00:03:11.124 --> 00:03:12.326 align:middle
这些都可以向用户显示

00:03:12.926 --> 00:03:16.396 align:middle
可以自己设置但是
NSProgress

00:03:16.463 --> 00:03:18.131 align:middle
会为你默认一些内容

00:03:19.700 --> 00:03:22.269 align:middle
这里的示例是默认
本地化Description

00:03:22.336 --> 00:03:24.471 align:middle
和本地化Additional
Description

00:03:24.538 --> 00:03:27.608 align:middle
NSProgress的
totalUnitCount

00:03:27.674 --> 00:03:30.177 align:middle
是500万多completed-
UnitCount

00:03:30.244 --> 00:03:32.279 align:middle
是41.9万多

00:03:32.746 --> 00:03:36.016 align:middle
默认本地化完成7%

00:03:36.083 --> 00:03:39.219 align:middle
本地化Additional
Description格式

00:03:39.286 --> 00:03:40.587 align:middle
这些数据都很漂亮

00:03:41.788 --> 00:03:43.390 align:middle
这是默认状态

00:03:43.590 --> 00:03:45.025 align:middle
如果想以某种不同的方式

00:03:45.092 --> 00:03:47.060 align:middle
可以自行设置
本地化Description

00:03:47.127 --> 00:03:49.263 align:middle
和本地化 Additional
Description

00:03:49.329 --> 00:03:51.698 align:middle
但是接着需要真正用你的app

00:03:51.765 --> 00:03:53.500 align:middle
所支持的语言进行本地化

00:03:54.668 --> 00:03:57.037 align:middle
其实不必真这么做我们还有两个旋钮

00:03:57.104 --> 00:03:59.306 align:middle
可用于调整这些默认值

00:03:59.673 --> 00:04:01.675 align:middle
首先是通过类型属性

00:03:59.673 --> 00:04:01.675 align:middle
首先是通过类型属性

00:04:02.109 --> 00:04:05.512 align:middle
目前 文档类唯一的选项是
NSProgressKindFile

00:04:06.079 --> 00:04:08.448 align:middle
使用它表明你的单位是字节

00:04:08.515 --> 00:04:10.951 align:middle
那么当NSProgress
单位是字节

00:04:11.185 --> 00:04:12.553 align:middle
就会这样做格式

00:04:12.619 --> 00:04:17.124 align:middle
那么会看到 它显示
5.3兆字节的419千字节

00:04:19.593 --> 00:04:22.229 align:middle
还有一个旋钮可改变
默认本地化Description

00:04:22.296 --> 00:04:24.731 align:middle
是通过用户信息字典的部分键来实现

00:04:25.132 --> 00:04:27.868 align:middle
NSProgress具备用户
信息字典 这里有个方法

00:04:28.202 --> 00:04:31.138 align:middle
Set User Info
Object For Key

00:04:31.205 --> 00:04:32.139 align:middle
这可以实现

00:04:32.206 --> 00:04:33.807 align:middle
在userInfo中设置键和数值

00:04:34.608 --> 00:04:36.944 align:middle
有个键几乎对任何
NSProgress都有用

00:04:37.010 --> 00:04:39.313 align:middle
这就是NSProgress
Estimated

00:04:39.379 --> 00:04:40.981 align:middle
Time
Remaining Key

00:04:41.248 --> 00:04:43.050 align:middle
这里的数值是NSNumber

00:04:43.283 --> 00:04:45.853 align:middle
表示到任务完成时还剩下多少秒钟

00:04:46.887 --> 00:04:50.524 align:middle
大家来看 比如说 如果
我们设定为97秒

00:04:50.591 --> 00:04:53.493 align:middle
本地化Additional
Description现在就包括

00:04:53.794 --> 00:04:56.263 align:middle
这样的信息 格式为剩余1分37秒

00:04:58.265 --> 00:05:00.467 align:middle
还有额外的userInfo键

00:04:58.265 --> 00:05:00.467 align:middle
还有额外的userInfo键

00:05:00.534 --> 00:05:02.302 align:middle
如果将文件设置种类才会用到

00:05:02.870 --> 00:05:04.905 align:middle
首先来看
NSProgress File

00:05:04.972 --> 00:05:06.640 align:middle
Operation
Kind Key

00:05:06.974 --> 00:05:09.309 align:middle
这在告知NSProgress
操作的类型

00:05:09.376 --> 00:05:10.944 align:middle
这是在文档中执行

00:05:11.411 --> 00:05:14.147 align:middle
数值是关于下载解压缩

00:05:14.414 --> 00:05:18.352 align:middle
接受 或复制那么如设置 File
Operation Kind

00:05:18.418 --> 00:05:20.888 align:middle
为NSProgress File
Operation

00:05:20.954 --> 00:05:22.322 align:middle
Kind Downloading

00:05:22.389 --> 00:05:23.991 align:middle
来更新
本地化Description

00:05:24.057 --> 00:05:25.626 align:middle
表示它在下载文件

00:05:27.227 --> 00:05:30.130 align:middle
当Kind是File时 还有个
键可用就是NSProgress

00:05:30.197 --> 00:05:31.832 align:middle
File URL Key

00:05:31.899 --> 00:05:34.902 align:middle
这是所处理文件的NSURL

00:05:35.335 --> 00:05:36.370 align:middle
在设置时

00:05:36.436 --> 00:05:38.739 align:middle
本地化Description
将包括文件名

00:05:38.805 --> 00:05:42.109 align:middle
在本例中是 photos.zip
来自于所提供的URL

00:05:44.077 --> 00:05:47.014 align:middle
如果是运行一组文件
则还有选项

00:05:47.080 --> 00:05:49.216 align:middle
NSProgress File
Total Count Key

00:05:49.283 --> 00:05:51.084 align:middle
和 Completed
Count Key

00:05:51.318 --> 00:05:52.519 align:middle
这里是个示例

00:05:52.586 --> 00:05:54.888 align:middle
我们设置File
Completed Count为7

00:05:54.955 --> 00:05:56.657 align:middle
和 File
Total Count为9

00:05:56.990 --> 00:05:59.560 align:middle
本地化Description
可以使用这个信息

00:05:59.626 --> 00:06:01.828 align:middle
现在显示下载9个文件

00:05:59.626 --> 00:06:01.828 align:middle
现在显示下载9个文件

00:06:02.729 --> 00:06:06.266 align:middle
注意类型仍是File
单位也仍然是字节

00:06:06.333 --> 00:06:08.969 align:middle
就是在处理的文件的总字节数

00:06:10.804 --> 00:06:13.707 align:middle
最后我们有NSProgress
Throughput Key

00:06:14.141 --> 00:06:18.045 align:middle
这是正处理的
文件操作的每秒字节数

00:06:18.445 --> 00:06:22.316 align:middle
比如 下载文件时
速度极快是5万字节每秒

00:06:22.616 --> 00:06:24.885 align:middle
如果我们在用户信息设置吞吐量

00:06:25.252 --> 00:06:26.286 align:middle
NSProgress

00:06:26.353 --> 00:06:28.655 align:middle
可将该信息包括到
本地化Description当中

00:06:28.722 --> 00:06:30.624 align:middle
所以显示为50千字节每秒

00:06:31.825 --> 00:06:34.228 align:middle
所有这些选项都可以真正

00:06:34.294 --> 00:06:35.896 align:middle
提供帮你向用户提供更多信息

00:06:36.330 --> 00:06:38.165 align:middle
告知其在发生什么

00:06:39.266 --> 00:06:41.168 align:middle
而无需你亲自做本地化

00:06:42.503 --> 00:06:46.440 align:middle
我们继续之前先来说说责任职责

00:06:47.574 --> 00:06:49.309 align:middle
NSProgress有两个端

00:06:49.376 --> 00:06:52.412 align:middle
分别是生成端和客户端

00:06:53.046 --> 00:06:54.181 align:middle
在生成端

00:06:55.015 --> 00:07:00.420 align:middle
当生成NSProgress时
你要负责设置它的属性

00:06:55.015 --> 00:07:00.420 align:middle
当生成NSProgress时
你要负责设置它的属性

00:07:00.487 --> 00:07:03.257 align:middle
在任务完成时更新
completedUnitCount

00:07:03.724 --> 00:07:06.326 align:middle
因此在生成时
要设置totalUnitCount

00:07:06.527 --> 00:07:09.263 align:middle
Kind 设置用户信息的键

00:07:09.463 --> 00:07:11.265 align:middle
在任务完成时更新

00:07:11.331 --> 00:07:13.133 align:middle
completedUnitCount

00:07:13.534 --> 00:07:15.869 align:middle
另一方面如若从他人那里

00:07:15.969 --> 00:07:18.071 align:middle
收到NSProgress你是客户端

00:07:18.572 --> 00:07:20.073 align:middle
你可以获得并观察各类属性

00:07:20.140 --> 00:07:21.441 align:middle
totalUnitCount和

00:07:21.508 --> 00:07:22.943 align:middle
completed-
UnitCount

00:07:23.010 --> 00:07:24.411 align:middle
fractionCompleted
或这些

00:07:24.478 --> 00:07:26.013 align:middle
localized-
Description

00:07:26.079 --> 00:07:27.648 align:middle
但是不会设置这些属性

00:07:27.714 --> 00:07:29.583 align:middle
因为这样做会导致与

00:07:29.650 --> 00:07:31.351 align:middle
NSProgress生成器造成混淆

00:07:33.320 --> 00:07:36.423 align:middle
当生成NSProgress时
需要一种办法

00:07:36.490 --> 00:07:39.459 align:middle
将之提供给客户端当
你是客户端时需要办法来获得它

00:07:39.993 --> 00:07:41.361 align:middle
有一种做法

00:07:41.428 --> 00:07:43.497 align:middle
是通过NSProgress报告协议

00:07:43.830 --> 00:07:47.234 align:middle
我们把它加在了
OS X10.11和iOS 9

00:07:47.701 --> 00:07:50.971 align:middle
相当简单 可以定义属性 进度

00:07:52.072 --> 00:07:53.674 align:middle
在Cocoa UIDocument

00:07:53.740 --> 00:07:55.742 align:middle
和NSBundle
ResourceRequest

00:07:55.809 --> 00:07:56.476 align:middle
都会执行

00:07:56.944 --> 00:07:58.579 align:middle
这样会很明显

00:07:59.213 --> 00:08:01.348 align:middle
类会支持进度报告

00:07:59.213 --> 00:08:01.348 align:middle
类会支持进度报告

00:08:02.850 --> 00:08:06.353 align:middle
好 现在 我们
做个演示来看看代码

00:08:08.355 --> 00:08:09.857 align:middle
我们这里有app

00:08:10.090 --> 00:08:11.491 align:middle
相当简单

00:08:11.892 --> 00:08:16.063 align:middle
是个照片 点击
输入按钮就会下载照片

00:08:16.597 --> 00:08:18.632 align:middle
当下载结束时

00:08:19.933 --> 00:08:21.034 align:middle
会向用户显示

00:08:21.735 --> 00:08:23.871 align:start position:10%
用户体验相当糟糕

00:08:23.937 --> 00:08:26.406 align:middle
用户基本上不清楚在发生什么

00:08:26.807 --> 00:08:30.344 align:middle
我们可以通过
向用户报告下载进度来改善效果

00:08:31.812 --> 00:08:37.083 align:middle
如果进入项目就会有下载类

00:08:37.451 --> 00:08:39.453 align:middle
这是用于下载照片

00:08:40.520 --> 00:08:43.724 align:middle
还有初始程序

00:08:43.789 --> 00:08:46.126 align:middle
找到URL来下载

00:08:46.627 --> 00:08:48.962 align:middle
它还具备一个完成处理器 用来调用

00:08:49.029 --> 00:08:51.832 align:middle
下载数据或在出现错误时调用错误

00:08:54.001 --> 00:08:57.004 align:middle
接下来是开始方法 是用来...

00:08:57.070 --> 00:09:00.541 align:middle
用来启动整个下载我们还有若干

00:08:57.070 --> 00:09:00.541 align:middle
用来启动整个下载我们还有若干

00:09:00.607 --> 00:09:03.911 align:middle
针对各种下载功能的私有方法

00:09:05.445 --> 00:09:10.450 align:middle
我们还有这些便捷方法

00:09:10.517 --> 00:09:12.853 align:middle
可以在下载进行时进行调用

00:09:13.420 --> 00:09:15.522 align:middle
我们还有 Will
Begin Download

00:09:17.724 --> 00:09:21.728 align:middle
下载开始时调用并可获得下载的总长度

00:09:22.429 --> 00:09:23.964 align:middle
Did Download Data

00:09:24.198 --> 00:09:27.401 align:middle
在下载完成时定期调用

00:09:28.535 --> 00:09:30.437 align:middle
Did
Finish Download

00:09:30.504 --> 00:09:32.506 align:middle
是在下载完成时调用

00:09:32.739 --> 00:09:35.142 align:middle
Did Fail To
Download 在下载期间

00:09:35.242 --> 00:09:36.743 align:middle
如果出错时 会调用

00:09:37.744 --> 00:09:39.947 align:middle
我们现在要做的是对下载操作

00:09:40.080 --> 00:09:43.083 align:middle
报告进度可以通过

00:09:43.150 --> 00:09:45.853 align:middle
使用NSProgress-
Reporting协议来实现

00:09:46.453 --> 00:09:49.790 align:middle
我们继续来进行类的声明

00:09:50.190 --> 00:09:52.526 align:middle
可以把NSProgress-
Reporting

00:09:52.593 --> 00:09:54.361 align:middle
加入类的名单

00:09:54.995 --> 00:09:59.299 align:middle
为了与NSProgress-
Reporting一致

00:10:00.167 --> 00:10:02.169 align:middle
我们需要
ProgressProperty

00:10:02.269 --> 00:10:04.438 align:middle
我们把它加上
是在NSProgress

00:10:05.072 --> 00:10:06.807 align:middle
在初始程序中我们需要生成

00:10:06.874 --> 00:10:08.609 align:middle
NSProgressObject

00:10:09.576 --> 00:10:10.410 align:middle
因为...

00:10:12.379 --> 00:10:14.848 align:middle
我们还不清楚已经下载了多少

00:10:15.048 --> 00:10:16.917 align:middle
我们会把进度定为不确定

00:10:17.351 --> 00:10:19.319 align:middle
把进度定为不确定 有种方法

00:10:19.386 --> 00:10:22.589 align:middle
是设置
totalUnitCount为负值

00:10:22.956 --> 00:10:25.192 align:middle
那么把totalUnitCount
设为负1

00:10:26.026 --> 00:10:28.262 align:middle
因为我们知道这里在下载文件

00:10:28.695 --> 00:10:33.901 align:middle
可以为NSProgress
提供更多的信息告知在发生什么

00:10:34.401 --> 00:10:36.136 align:middle
我们可以设置Kind

00:10:36.203 --> 00:10:38.105 align:middle
为NSProgress
Kind File

00:10:38.539 --> 00:10:40.474 align:middle
并设置用户信息

00:10:40.541 --> 00:10:43.443 align:middle
NSProgress File
OperationKind Key

00:10:43.510 --> 00:10:44.711 align:middle
为Downloading

00:10:45.979 --> 00:10:48.482 align:middle
现在就生成了
NSProgress 在下载完成后

00:10:48.549 --> 00:10:50.851 align:middle
需要将它更新即可

00:10:51.385 --> 00:10:53.720 align:middle
回到Will
Begin Download方法

00:10:55.489 --> 00:10:57.391 align:middle
这可将所有内容下载下来

00:10:57.457 --> 00:10:59.726 align:middle
我们需要设置
totalUnitCount

00:10:59.793 --> 00:11:01.161 align:middle
to that amount

00:10:59.793 --> 00:11:01.161 align:middle
to that amount

00:11:01.662 --> 00:11:04.865 align:middle
此刻 进度不再是不确定

00:11:05.732 --> 00:11:07.534 align:middle
在Did Download
Data回调

00:11:07.601 --> 00:11:09.136 align:middle
这是进行定期调用设置

00:11:09.203 --> 00:11:11.772 align:middle
completed-
UnitCount

00:11:12.005 --> 00:11:14.007 align:middle
为下载字节数

00:11:15.075 --> 00:11:18.011 align:middle
最后在Did
Download Data回调

00:11:18.846 --> 00:11:21.048 align:middle
可以将completed-
UnitCount

00:11:21.114 --> 00:11:22.883 align:middle
设置为下载的总字节数

00:11:23.250 --> 00:11:24.985 align:middle
以及进度结束的方式

00:11:26.353 --> 00:11:29.623 align:middle
现在用户界面已经在使用

00:11:29.690 --> 00:11:33.360 align:middle
NSProgressReporting
并在寻找需要执行的下载

00:11:33.427 --> 00:11:36.997 align:middle
还会显示进度
当我们搭建并运行app时

00:11:37.064 --> 00:11:38.031 align:middle
我们按下输入按钮

00:11:40.901 --> 00:11:45.239 align:middle
我们有个为用户提供的下载报告进度

00:11:45.305 --> 00:11:48.242 align:middle
感觉要好多了

00:11:49.343 --> 00:11:50.010 align:middle
好

00:11:50.077 --> 00:11:52.779 align:middle
回到幻灯片

00:11:54.715 --> 00:11:55.516 align:middle
文斯·斯派德: 好

00:11:55.582 --> 00:11:57.618 align:middle
这就是
NSProgress的基础内容

00:11:58.118 --> 00:12:00.721 align:middle
现在我们来看
NSProgress为什么强大

00:11:58.118 --> 00:12:00.721 align:middle
现在我们来看
NSProgress为什么强大

00:12:00.787 --> 00:12:03.190 align:middle
是因为它可以在其他进度对象中

00:12:03.257 --> 00:12:04.992 align:middle
构建进度对象

00:12:06.260 --> 00:12:08.929 align:middle
现在因为按下
下载按钮并不意味着

00:12:08.996 --> 00:12:10.697 align:middle
只有一件事在真正发生

00:12:11.098 --> 00:12:13.267 align:middle
可能是下载 验证 解压缩

00:12:13.333 --> 00:12:16.336 align:middle
操作 都在报告操作中运行

00:12:16.770 --> 00:12:19.673 align:middle
但用户只看到一个进度条

00:12:21.041 --> 00:12:23.777 align:middle
就当这些框代表各自的

00:12:23.844 --> 00:12:25.045 align:middle
NSProgress对象

00:12:25.279 --> 00:12:28.115 align:middle
它们各自按照
自己的单位报告其进度

00:12:28.182 --> 00:12:29.883 align:middle
不必担心其他的对象

00:12:30.317 --> 00:12:33.320 align:middle
但是我们希望它们
能组成一个NSProgress

00:12:33.654 --> 00:12:36.223 align:middle
以便我们将之与用户界面挂钩

00:12:36.723 --> 00:12:38.926 align:middle
我们要生成
NSProgress对象

00:12:38.992 --> 00:12:40.460 align:middle
并称之为整体进度

00:12:41.261 --> 00:12:43.597 align:middle
我们可以将其他进度都纳入

00:12:43.664 --> 00:12:45.165 align:middle
整体进度中

00:12:45.532 --> 00:12:47.401 align:middle
整体程序成为另外三个

00:12:47.467 --> 00:12:50.370 align:middle
进度对象的父对象下载 验证

00:12:50.437 --> 00:12:53.140 align:middle
和解压缩进度成为子对象

00:12:53.907 --> 00:12:55.642 align:middle
当子对象完成时

00:12:55.909 --> 00:12:57.344 align:middle
整体程序也会更新

00:12:59.079 --> 00:13:01.882 align:middle
那么为构成NSProgress
对象 我们有这个

00:12:59.079 --> 00:13:01.882 align:middle
那么为构成NSProgress
对象 我们有这个

00:13:01.949 --> 00:13:03.450 align:middle
pendingUnitCount
想法

00:13:03.517 --> 00:13:05.652 align:middle
pendingUnitCount

00:13:05.719 --> 00:13:08.455 align:middle
是赋值给子对象的进度对象的父对象

00:13:08.589 --> 00:13:10.557 align:middle
totalUnitCount的
一部分

00:13:11.258 --> 00:13:13.861 align:middle
pendingUnitCount是
关于父对象的单位

00:13:14.094 --> 00:13:15.562 align:middle
子对象也有自己的单位

00:13:16.063 --> 00:13:18.765 align:middle
比如把父对象的
pendingUnitCount

00:13:18.999 --> 00:13:19.666 align:middle
赋值给子对象

00:13:21.635 --> 00:13:24.905 align:middle
那么 子对象进度结束时

00:13:24.972 --> 00:13:27.908 align:middle
会出现父对象的completed-
UnitCount被相应子对象的

00:13:27.975 --> 00:13:29.977 align:middle
pendingUnitCount
所增加

00:13:30.410 --> 00:13:31.712 align:middle
那么在有子对象的时候

00:13:32.212 --> 00:13:34.748 align:middle
不用手动更新completed-
UnitCount

00:13:35.048 --> 00:13:37.217 align:middle
在子对象结束的时候 这也许会与正在

00:13:37.284 --> 00:13:38.452 align:middle
发生的更新相互冲突

00:13:38.752 --> 00:13:41.088 align:middle
当处于父对象的进度时你非常希望把

00:13:41.154 --> 00:13:43.490 align:middle
整个totalUnitCount
赋值给子对象

00:13:45.092 --> 00:13:47.127 align:middle
我们继续一个组合图

00:13:47.394 --> 00:13:49.196 align:middle
比如要输入一些照片

00:13:49.563 --> 00:13:52.466 align:middle
我们有整体NSProgress对象

00:13:53.700 --> 00:13:56.436 align:middle
共有两个照片那么输入进度的

00:13:56.803 --> 00:13:58.405 align:middle
totalUnitCount为2

00:13:59.473 --> 00:14:01.909 align:middle
它会把全部
totalUnitCount赋值给

00:13:59.473 --> 00:14:01.909 align:middle
它会把全部
totalUnitCount赋值给

00:14:01.975 --> 00:14:05.078 align:middle
它的子对象也就是下面的单独照片进度

00:14:05.746 --> 00:14:09.149 align:middle
每个照片都从整体输入进度中

00:14:09.216 --> 00:14:11.618 align:middle
赋值了一个照片的
pendingUnitCount

00:14:12.886 --> 00:14:15.389 align:middle
现在个体照片进度都很相似

00:14:15.455 --> 00:14:16.590 align:middle
不过单位不同

00:14:16.657 --> 00:14:18.825 align:middle
有个分两步的
totalUnitCount

00:14:19.626 --> 00:14:22.129 align:middle
每一步都要用到一个
pendingUnitCount

00:14:22.196 --> 00:14:24.531 align:middle
一个是下载一个是过滤器

00:14:25.732 --> 00:14:28.235 align:middle
最后我们有了下载和过滤进度

00:14:28.702 --> 00:14:30.070 align:middle
它们都有自己的单位

00:14:30.470 --> 00:14:31.705 align:middle
没有子对象

00:14:31.905 --> 00:14:34.474 align:middle
要手动更新completed-
UnitCount

00:14:36.476 --> 00:14:39.413 align:middle
好我把completed-
Unit Count 放在这里

00:14:39.479 --> 00:14:40.681 align:middle
这是零点

00:14:40.814 --> 00:14:44.551 align:middle
完成部分在底部用百分比显示

00:14:44.618 --> 00:14:46.653 align:middle
因为我们还没有做什么 现在是零值

00:14:47.287 --> 00:14:48.388 align:middle
我们看看 底部的

00:14:48.455 --> 00:14:49.890 align:middle
completed-
UnitCounts

00:14:49.957 --> 00:14:50.958 align:middle
更新后会怎样

00:14:52.426 --> 00:14:55.395 align:middle
大家可以看到因为子对象都完成了

00:14:56.096 --> 00:14:58.065 align:middle
完成部分在父对象中在更新

00:14:58.632 --> 00:15:00.734 align:middle
进度在流向父对象

00:14:58.632 --> 00:15:00.734 align:middle
进度在流向父对象

00:15:01.301 --> 00:15:02.135 align:middle
请注意整体进度的

00:15:02.202 --> 00:15:04.204 align:middle
completed-
UnitCount

00:15:04.271 --> 00:15:05.539 align:middle
还依然是零值

00:15:05.806 --> 00:15:09.176 align:middle
一旦子对象完成而且照片1仍未

00:15:09.476 --> 00:15:12.079 align:middle
完成时 completed-
UnitCount 才会增加

00:15:13.714 --> 00:15:15.449 align:middle
一旦子对象完成

00:15:15.516 --> 00:15:17.117 align:middle
completedUnitCount
被相应子对象的

00:15:17.184 --> 00:15:19.086 align:middle
pendingUnitCount
而增加

00:15:19.419 --> 00:15:22.823 align:middle
大家可以看到输入进度已经完成了

00:15:22.890 --> 00:15:26.393 align:middle
一张照片 因为照片1
现在是100%完成

00:15:28.095 --> 00:15:31.698 align:middle
另一方面 完成部分是根据
pendingUnitCount

00:15:31.765 --> 00:15:33.033 align:middle
和子对象

00:15:33.333 --> 00:15:35.235 align:middle
完成的部分在倍增

00:15:35.669 --> 00:15:38.572 align:middle
它不会等到子对象完成再更新

00:15:40.007 --> 00:15:44.378 align:middle
当所有内容都是100%时
输入进度就得以完成

00:15:45.012 --> 00:15:47.147 align:middle
这个示例就是
当组成NSProgress

00:15:47.214 --> 00:15:49.650 align:middle
对象时 会出现的情况

00:15:50.951 --> 00:15:52.252 align:middle
我们再详细介绍一下

00:15:52.819 --> 00:15:56.023 align:middle
这里是单独照片输入的进度

00:15:56.089 --> 00:15:57.491 align:middle
这里只是一张照片

00:15:58.125 --> 00:16:00.594 align:middle
分为两个步骤下载和过滤器

00:15:58.125 --> 00:16:00.594 align:middle
分为两个步骤下载和过滤器

00:16:00.761 --> 00:16:02.563 align:middle
把totalUnitCount
定为2

00:16:03.163 --> 00:16:05.399 align:middle
假设下载会用到下列的单位之一

00:16:05.465 --> 00:16:07.568 align:middle
过滤器会用到下列单位之一

00:16:08.268 --> 00:16:12.840 align:middle
每个步骤会占用照片整体进度的一半

00:16:13.941 --> 00:16:15.776 align:middle
但是这些操作如果不相等会怎样？

00:16:16.210 --> 00:16:18.812 align:middle
如果我们知道过滤器相对下载时间

00:16:18.879 --> 00:16:22.416 align:middle
要快许多 那么就会
更像是这样的结果？

00:16:23.517 --> 00:16:25.519 align:middle
好 单位可以是任意的

00:16:25.853 --> 00:16:27.955 align:middle
可以认为 实际上有10个步骤

00:16:28.021 --> 00:16:29.823 align:middle
且下载被赋值了其中的9个

00:16:29.923 --> 00:16:31.124 align:middle
过滤器被赋值了1个

00:16:31.892 --> 00:16:33.827 align:middle
现在 随着下载的完成

00:16:34.394 --> 00:16:37.731 align:middle
下载步骤占了输入进度的90%

00:16:37.831 --> 00:16:39.733 align:middle
过滤器占了其余的10%

00:16:40.501 --> 00:16:42.936 align:middle
可以调整进度的单位以便

00:16:43.303 --> 00:16:45.506 align:middle
权衡为子对象赋值的任务

00:16:47.708 --> 00:16:50.444 align:middle
好 我们来看在代码中怎么体现

00:16:51.144 --> 00:16:54.681 align:middle
构建NSProgress对象
可以通过两种方式

00:16:54.948 --> 00:16:57.818 align:middle
第一种方式我马上就会讲到是隐形组合

00:16:58.552 --> 00:17:02.189 align:middle
那么你生成一个父对象的进度对象

00:16:58.552 --> 00:17:02.189 align:middle
那么你生成一个父对象的进度对象

00:17:02.623 --> 00:17:05.025 align:middle
这将是之前的
photoProgress

00:17:06.527 --> 00:17:07.895 align:middle
分为两个步骤

00:17:09.829 --> 00:17:12.633 align:middle
可以把
totalUnitCount定为2

00:17:13.500 --> 00:17:16.904 align:middle
我们想做的是
把下载进度添加为子对象

00:17:17.538 --> 00:17:19.640 align:middle
那么 我们在父对象进度
调用的是Current

00:17:19.705 --> 00:17:21.340 align:middle
With Pending
Unit Count

00:17:21.407 --> 00:17:22.709 align:middle
photoProgress

00:17:22.876 --> 00:17:26.980 align:middle
它的作用是
设置线程本地当前进度

00:17:27.748 --> 00:17:30.083 align:middle
这样photoProgress
就是当前进度

00:17:30.484 --> 00:17:33.453 align:middle
pendingUnitCount
设置为1

00:17:34.087 --> 00:17:37.624 align:middle
基本上是为随后的进度而保留

00:17:37.691 --> 00:17:39.760 align:middle
并加入当前的进度当中

00:17:40.394 --> 00:17:44.364 align:middle
接下来 我们调用下载功能

00:17:44.431 --> 00:17:46.700 align:middle
startDownload

00:17:47.334 --> 00:17:50.337 align:middle
这会生成进度
会用到NSProgress

00:17:50.404 --> 00:17:52.406 align:middle
totalUnitCount
简易构造函数

00:17:52.773 --> 00:17:55.709 align:middle
以及totalUnit简易构造函数

00:17:56.343 --> 00:18:00.013 align:middle
我们将在当前进度中添加生成的进度

00:17:56.343 --> 00:18:00.013 align:middle
我们将在当前进度中添加生成的进度

00:18:00.814 --> 00:18:05.285 align:middle
加入下载 作为
photoProgress的子对象

00:18:06.753 --> 00:18:08.021 align:middle
接下来 我们需要清理一下

00:18:08.088 --> 00:18:09.756 align:middle
那么 我们调用

00:18:10.090 --> 00:18:12.326 align:middle
赋值的当前进度
photoProgress

00:18:12.392 --> 00:18:13.660 align:middle
不再是当前进度

00:18:14.494 --> 00:18:15.329 align:middle
就这样

00:18:15.662 --> 00:18:18.732 align:middle
现在我们用了隐形组件

00:18:18.866 --> 00:18:20.400 align:middle
添加子对象为父对象

00:18:22.936 --> 00:18:25.906 align:middle
在使用隐形组件时需要记住几点

00:18:26.840 --> 00:18:28.809 align:middle
在支持隐形组件时

00:18:29.910 --> 00:18:33.213 align:middle
你想要立刻生成NSProgress

00:18:33.847 --> 00:18:37.317 align:middle
并用到totalUnitCount
简易构造函数

00:18:37.618 --> 00:18:40.320 align:middle
这是因为第一个进度对象

00:18:40.387 --> 00:18:43.790 align:middle
添加到目前的进度会占用整个
pendingUnitCount

00:18:44.391 --> 00:18:46.994 align:middle
如果生成了它 首先你不必担心

00:18:47.060 --> 00:18:48.962 align:middle
存取器问题 或其他调用无意中对

00:18:49.029 --> 00:18:51.131 align:middle
父对象
pendingUnitCount

00:18:51.198 --> 00:18:51.865 align:middle
的占用

00:18:52.966 --> 00:18:54.434 align:middle
当然 要做记录

00:18:54.735 --> 00:18:57.070 align:middle
隐形组件毕竟是隐形

00:18:57.471 --> 00:19:00.874 align:middle
客户端不会知道你
支持隐形组件除非你说出来

00:18:57.471 --> 00:19:00.874 align:middle
客户端不会知道你
支持隐形组件除非你说出来

00:19:03.343 --> 00:19:05.712 align:middle
而且 如果此时未加入

00:19:05.779 --> 00:19:07.447 align:middle
子对象 你调用赋值的
当前进度

00:19:08.148 --> 00:19:10.751 align:middle
pendingUnitCount
就会立即加入

00:19:10.817 --> 00:19:13.020 align:middle
父对象的
completedUnitCount

00:19:13.086 --> 00:19:15.389 align:middle
那么completed-
UnitCount 也会更新

00:19:17.257 --> 00:19:20.961 align:middle
因此 构建NSProgress
对象的第二种方式

00:19:21.028 --> 00:19:23.330 align:middle
在OS X 10.11
和iOS 9中

00:19:23.697 --> 00:19:25.465 align:middle
是新功能 称之为显性组件

00:19:26.200 --> 00:19:31.038 align:middle
那么 你收到一个进度希望
从什么地方添加为子对象

00:19:31.104 --> 00:19:31.939 align:middle
也许是符合

00:19:32.005 --> 00:19:34.808 align:middle
NSProgressReporting
的内容那就是过滤器

00:19:35.843 --> 00:19:38.312 align:middle
现在有你想加入其中的父对象进度

00:19:38.846 --> 00:19:41.582 align:middle
就拿之前的
photoProgress举例

00:19:43.150 --> 00:19:45.586 align:middle
然后会用
pendingUnitCount

00:19:45.652 --> 00:19:47.054 align:middle
调用addChild

00:19:47.721 --> 00:19:49.690 align:middle
在你希望添加的进度当中

00:19:50.991 --> 00:19:55.162 align:middle
并加入子对象进度
filterProgress 这里

00:19:55.229 --> 00:19:56.997 align:middle
在给出
pendingUnitCount

00:19:57.064 --> 00:19:57.865 align:middle
是你想加入其中的

00:19:58.232 --> 00:20:00.834 align:middle
因为这是一个步骤我们想加入
pendingCount 1

00:19:58.232 --> 00:20:00.834 align:middle
因为这是一个步骤我们想加入
pendingCount 1

00:20:01.568 --> 00:20:02.302 align:middle
就这样

00:20:02.503 --> 00:20:06.006 align:middle
现在 进度是父对象进度的子对象

00:20:09.109 --> 00:20:11.812 align:middle
这里是部分指南说明何时使用

00:20:11.879 --> 00:20:13.180 align:middle
显性或隐形组件

00:20:14.248 --> 00:20:17.351 align:middle
如果你的方法
无法返回NSProgress

00:20:17.451 --> 00:20:20.287 align:middle
例如你超越了无法改变的API边界

00:20:20.587 --> 00:20:22.523 align:middle
使用隐形组件并记录下

00:20:22.589 --> 00:20:24.091 align:middle
它支持隐形组件

00:20:24.925 --> 00:20:29.863 align:middle
或 因为显性组件在
OS X 10.11和iOS 9中

00:20:30.330 --> 00:20:33.300 align:middle
在老版本中 必须要用到隐形组件

00:20:33.734 --> 00:20:38.038 align:middle
否则 一般都会想要
使用隐形组件这简单多了

00:20:40.474 --> 00:20:43.177 align:middle
好 我们继续来看组件演示

00:20:45.679 --> 00:20:48.549 align:middle
这里是照片下载类

00:20:48.615 --> 00:20:51.718 align:middle
我们上次就是把进度报告加到其中

00:20:51.785 --> 00:20:55.689 align:middle
如果运行app就会有稍许改动

00:20:56.089 --> 00:20:58.759 align:middle
现在有照片的
CollectionView

00:20:59.092 --> 00:21:00.594 align:middle
而不是单独的照片

00:20:59.092 --> 00:21:00.594 align:middle
而不是单独的照片

00:21:01.161 --> 00:21:03.230 align:middle
那么当我们按下输入

00:21:03.630 --> 00:21:05.832 align:middle
它没有只是下载这些图像

00:21:06.133 --> 00:21:07.968 align:middle
还运行了过滤器

00:21:08.468 --> 00:21:10.037 align:middle
因此 我们没有整体的进度

00:21:10.103 --> 00:21:13.507 align:middle
信息 所以这种体验很是糟糕

00:21:14.575 --> 00:21:19.746 align:middle
我们可以通过
具备操作报告进度来改善体验

00:21:20.781 --> 00:21:21.815 align:middle
我们这就动手

00:21:22.983 --> 00:21:23.884 align:middle
如果具备支持

00:21:23.951 --> 00:21:26.253 align:middle
NSProgressReporting
的下载类

00:21:26.753 --> 00:21:30.090 align:middle
还有具备类方法的过滤器类

00:21:30.157 --> 00:21:32.359 align:middle
可以处理图像并返回过滤后的图像

00:21:33.827 --> 00:21:38.165 align:middle
我们有这个输入类它可以下载

00:21:38.232 --> 00:21:41.101 align:middle
并在下载完成时运行过滤器

00:21:41.502 --> 00:21:43.504 align:middle
因此可以结合进度

00:21:44.071 --> 00:21:47.808 align:middle
比如我们将把下载进度

00:21:48.141 --> 00:21:53.113 align:middle
和过滤器操作的进度相结合

00:21:54.548 --> 00:21:57.551 align:middle
我们现在来看照片输入

00:21:57.618 --> 00:21:59.853 align:middle
这里有个初始程序可以找到URL

00:22:00.420 --> 00:22:03.724 align:middle
并用这个URL生成下载

00:22:04.424 --> 00:22:07.828 align:middle
它还有完成处理器 用来调用

00:22:07.895 --> 00:22:09.630 align:middle
过滤后和下载的图像

00:22:10.230 --> 00:22:11.865 align:middle
或是在出现错误时调用错误

00:22:12.733 --> 00:22:15.702 align:middle
在开始输入时 还有开始方法

00:22:15.969 --> 00:22:19.640 align:middle
这个开发方法对下载设置了

00:22:19.706 --> 00:22:23.210 align:middle
完成处理器并为下载数据

00:22:23.277 --> 00:22:28.715 align:middle
生成UIImage再将图像

00:22:28.782 --> 00:22:30.918 align:middle
传给过滤器 获得过滤后图像

00:22:31.251 --> 00:22:34.154 align:middle
然后用过滤后图像
调用自己的完成处理器

00:22:34.588 --> 00:22:37.524 align:middle
一旦完成处理器设置好就开始下载

00:22:39.059 --> 00:22:42.996 align:middle
这样我们想实现将照片输入报告

00:22:43.063 --> 00:22:47.568 align:middle
的下载和过滤器进度
都包括在内的综合进度

00:22:48.068 --> 00:22:49.236 align:middle
那我们就需要再做一遍

00:22:49.369 --> 00:22:53.607 align:middle
让照片输入类符合
NSProgressReporting

00:22:54.808 --> 00:22:56.510 align:middle
我们再来进行类的声明

00:22:56.977 --> 00:22:59.179 align:middle
并加入
NSProgressReporting

00:23:00.347 --> 00:23:04.218 align:middle
现在 我们需要有
进度属性我们把它加上

00:23:05.185 --> 00:23:07.588 align:middle
还要生成NSProgress对象

00:23:08.121 --> 00:23:12.092 align:middle
这次关于单位我们
要用一些比较抽象的内容

00:23:12.159 --> 00:23:14.561 align:middle
我们已经运行了几次app结果发现

00:23:14.628 --> 00:23:19.833 align:middle
如果让下载占到输入进度的
90%左右这样效果最好

00:23:20.300 --> 00:23:22.402 align:middle
我们把totalUnitCount
定为10

00:23:22.669 --> 00:23:24.838 align:middle
那么 下载
占到totalUnitCount

00:23:24.905 --> 00:23:27.941 align:middle
的9过滤器会用到其余的1

00:23:29.676 --> 00:23:31.144 align:middle
现在是开始方式

00:23:34.047 --> 00:23:37.584 align:middle
因为下载已经和NSProgress
Reporting一致

00:23:37.851 --> 00:23:41.788 align:middle
我们可以从中得到
进度对象并把它加入进度

00:23:42.022 --> 00:23:44.758 align:middle
可以用显性添加子方式来实现

00:23:45.292 --> 00:23:48.128 align:middle
我们调用进度添加子对象下载进度

00:23:48.295 --> 00:23:50.130 align:middle
pendingUnitCount
为9

00:23:51.131 --> 00:23:53.200 align:middle
它占据了进度的90%

00:23:55.169 --> 00:23:58.672 align:middle
我们想做的是把
过滤器的进度加入进度中

00:23:59.339 --> 00:24:01.475 align:middle
但是过滤器是类方法

00:23:59.339 --> 00:24:01.475 align:middle
但是过滤器是类方法

00:24:01.542 --> 00:24:03.744 align:middle
可以处理图像并返回图像

00:24:03.844 --> 00:24:06.246 align:middle
并无明显方法可以从中获得进度

00:24:06.947 --> 00:24:11.618 align:middle
但如果进入照片过滤器类

00:24:11.685 --> 00:24:12.953 align:middle
我们可以看到这里有评论

00:24:13.020 --> 00:24:15.656 align:middle
称它可以支持隐形进度组件

00:24:16.223 --> 00:24:18.325 align:middle
那么我们可以使用隐形进度组件

00:24:18.592 --> 00:24:19.826 align:middle
并把它添加为子对象

00:24:20.928 --> 00:24:23.297 align:middle
我们回到输入开始方法

00:24:24.598 --> 00:24:28.569 align:middle
下载完成处理器可以被调

00:24:28.635 --> 00:24:32.673 align:middle
用到背景线程
在这里 我们会成为当前进度

00:24:33.207 --> 00:24:35.209 align:middle
把pendingUnitCount
定为1

00:24:35.375 --> 00:24:39.680 align:middle
注意 我说过下载的完成处理器

00:24:39.746 --> 00:24:41.648 align:middle
可以被调用到背景线程

00:24:41.882 --> 00:24:45.986 align:middle
但是这没问题 因为我们
在同一线程后会立即调用过滤器

00:24:47.020 --> 00:24:52.059 align:middle
在我们成为
当前进度后 过滤器会运行

00:24:52.125 --> 00:24:55.696 align:middle
并把自己作为当前进度的子对象

00:24:56.563 --> 00:25:01.101 align:middle
一旦返回 我们需要不再是
当前进度因此我们会调用对出当前进度

00:24:56.563 --> 00:25:01.101 align:middle
一旦返回 我们需要不再是
当前进度因此我们会调用对出当前进度

00:25:03.437 --> 00:25:04.204 align:middle
就这样

00:25:04.271 --> 00:25:07.508 align:middle
现在我们把下载和过滤器进度都加入了

00:25:07.574 --> 00:25:08.609 align:middle
输入进度

00:25:09.176 --> 00:25:10.911 align:middle
现在如果运行app按下输入

00:25:16.683 --> 00:25:22.222 align:middle
大家可以看到输入是
各个照片的报告进度

00:25:23.257 --> 00:25:25.392 align:middle
很好 用户对正在发生的事情

00:25:25.459 --> 00:25:27.594 align:middle
掌握更多信息但是也没那么好

00:25:27.661 --> 00:25:30.230 align:middle
我们只需要向用户显示一个进度

00:25:30.731 --> 00:25:31.465 align:middle
我们这就动手

00:25:34.067 --> 00:25:37.171 align:middle
简略一点我们要进入

00:25:37.237 --> 00:25:40.340 align:middle
根View Controller
照片View Controller

00:25:41.041 --> 00:25:43.310 align:middle
这是整体进度属性

00:25:43.710 --> 00:25:47.548 align:middle
它是NSProgress的
客户端 刚得到这个

00:25:47.614 --> 00:25:49.683 align:middle
并且准备和UI挂钩并显示

00:25:50.150 --> 00:25:51.818 align:middle
它不会自己来生成

00:25:53.554 --> 00:25:55.589 align:middle
它还有Album的参考

00:25:55.656 --> 00:25:57.624 align:middle
即我们下载的照片集合

00:25:58.625 --> 00:26:02.129 align:middle
它还有工具栏按钮的IBAction

00:25:58.625 --> 00:26:02.129 align:middle
它还有工具栏按钮的IBAction

00:26:02.196 --> 00:26:03.797 align:middle
本例中 开始输入按钮

00:26:04.231 --> 00:26:08.569 align:middle
和IBAction会调用
相册中的输入照片

00:26:09.903 --> 00:26:14.575 align:middle
如果来看相册这里有一组照片

00:26:15.542 --> 00:26:18.979 align:middle
并通过URL

00:26:19.213 --> 00:26:21.081 align:middle
在主包生成照片

00:26:21.715 --> 00:26:26.920 align:middle
且在输入照片方式中经过每个照片

00:26:27.454 --> 00:26:29.223 align:middle
并调用其开始输入

00:26:30.691 --> 00:26:35.429 align:middle
如果来看照片
我们的照片都有图像URL

00:26:35.495 --> 00:26:37.664 align:middle
这是从初始程序获得

00:26:38.365 --> 00:26:43.604 align:middle
还有UIImage属性
开始可以作为定位符

00:26:44.571 --> 00:26:46.807 align:middle
还有开始输入方法

00:26:46.874 --> 00:26:48.375 align:middle
这是由相册来调用的

00:26:48.442 --> 00:26:50.911 align:middle
它生成我们加入
NSProgressReporting

00:26:50.978 --> 00:26:53.046 align:middle
照片输入类然后设置

00:26:54.014 --> 00:26:55.616 align:middle
该照片输入类的完成处理器

00:26:55.682 --> 00:27:00.320 align:middle
把图像设置成已输入的图像

00:26:55.682 --> 00:27:00.320 align:middle
把图像设置成已输入的图像

00:27:01.522 --> 00:27:03.891 align:middle
然后在 在设置完成处理器后

00:27:03.957 --> 00:27:07.528 align:middle
开始输入并备份以备不时之需

00:27:09.429 --> 00:27:11.198 align:middle
这样我们想

00:27:11.265 --> 00:27:15.135 align:middle
把照片输入进度并把所有发生的输入

00:27:15.202 --> 00:27:18.138 align:middle
都集合到一个进度中

00:27:19.506 --> 00:27:21.508 align:middle
我们再来看
根View Controller

00:27:22.643 --> 00:27:24.111 align:middle
我们可以做的

00:27:24.178 --> 00:27:28.448 align:middle
是我们的输入进度方法
返回NSProgress

00:27:28.882 --> 00:27:31.552 align:middle
我们会把整体进度属性设定为

00:27:31.618 --> 00:27:33.387 align:middle
那个返回的NSProgress

00:27:34.621 --> 00:27:37.224 align:middle
输入照片还并未
返回NSProgress

00:27:37.291 --> 00:27:38.458 align:middle
所以我们需要这么做

00:27:38.992 --> 00:27:42.863 align:middle
我们进入相册输入照片方法

00:27:44.164 --> 00:27:45.432 align:middle
现在是返回空

00:27:45.499 --> 00:27:48.268 align:middle
我们需要让它
返回到NSProgress

00:27:49.970 --> 00:27:52.840 align:middle
然后还要生成我们准备
返回的进度对象

00:27:53.740 --> 00:27:59.246 align:middle
因为进度对象会为相册的每张照片

00:27:59.813 --> 00:28:01.481 align:middle
准备子对象我们希望

00:27:59.813 --> 00:28:01.481 align:middle
准备子对象我们希望

00:28:01.782 --> 00:28:03.984 align:middle
totalUnitCount为
相册中的照片数

00:28:05.953 --> 00:28:08.355 align:middle
然后我们继续并返回

00:28:09.590 --> 00:28:12.759 align:middle
接下来我们要做的是要让我们的照片

00:28:12.826 --> 00:28:15.495 align:middle
开始输入方法也返回一个进度

00:28:16.830 --> 00:28:19.967 align:middle
那么 我们会把它
赋值到本地的可变输入进程

00:28:20.367 --> 00:28:23.871 align:middle
那么 我们添加这个作为子对象

00:28:23.937 --> 00:28:26.173 align:middle
到相册进度把
pendingUnitCount

00:28:26.240 --> 00:28:29.843 align:middle
定为1
因为这是一张照片的输入进度

00:28:32.479 --> 00:28:36.350 align:middle
现在 在我们的照片开始输入方法

00:28:36.850 --> 00:28:38.185 align:middle
当前返回空

00:28:38.352 --> 00:28:40.787 align:middle
我们希望它返回到
NSProgress我们这就动手

00:28:41.588 --> 00:28:45.192 align:middle
因为照片输入已经与
NSProgressReporting

00:28:45.259 --> 00:28:46.260 align:middle
相一致

00:28:46.493 --> 00:28:48.896 align:middle
我们可以把进度属性返回给它

00:28:50.397 --> 00:28:51.298 align:middle
就这样 这就是组件了

00:28:51.465 --> 00:28:56.003 align:middle
我们把整体进度都赋值给了

00:28:56.370 --> 00:29:01.008 align:middle
一个进度...是由所发生的
各自输入的子对象构成

00:28:56.370 --> 00:29:01.008 align:middle
一个进度...是由所发生的
各自输入的子对象构成

00:29:01.375 --> 00:29:04.745 align:middle
各个输入都有下载和过滤器子对象

00:29:05.512 --> 00:29:06.947 align:middle
我们来运行这个app

00:29:10.884 --> 00:29:13.554 align:middle
现在位于底部的是整体进度

00:29:13.754 --> 00:29:16.089 align:middle
在所有这些子对象完成后会进行更新

00:29:17.291 --> 00:29:20.761 align:middle
把小的进度条移开留下的作为练习

00:29:23.564 --> 00:29:24.231 align:middle
好

00:29:27.100 --> 00:29:28.569 align:middle
文斯·斯派德: 好 回到幻灯片

00:29:31.338 --> 00:29:35.342 align:middle
我想谈谈取消 暂停和恢复任务

00:29:36.310 --> 00:29:39.313 align:middle
NSProgress对象
可以作为取消任务的工具栏

00:29:39.479 --> 00:29:42.583 align:middle
NSProgress的生成器
设置可取消

00:29:42.683 --> 00:29:44.685 align:middle
和
cancellationHandler

00:29:44.952 --> 00:29:48.121 align:middle
如果操作在同步完成一些任务

00:29:48.188 --> 00:29:50.357 align:middle
cancellationHandler
并没有真正工作

00:29:50.424 --> 00:29:51.959 align:middle
你还可以取消

00:29:52.025 --> 00:29:53.727 align:middle
NSProgress对象的取消旗标

00:29:55.495 --> 00:29:59.333 align:middle
客户端可以调用取消
NSProgress将设置取消

00:29:59.399 --> 00:30:01.969 align:middle
为真 并触发
cancellationHandler

00:29:59.399 --> 00:30:01.969 align:middle
为真 并触发
cancellationHandler

00:30:02.402 --> 00:30:04.638 align:middle
那么取消任务就会转至子对象

00:30:04.972 --> 00:30:08.041 align:middle
如果子进度有取消任务处理器

00:30:08.275 --> 00:30:09.276 align:middle
这些也会触发

00:30:10.477 --> 00:30:11.578 align:middle
而且是永久性的

00:30:11.645 --> 00:30:14.481 align:middle
一旦进度取消并无非取消功能

00:30:16.984 --> 00:30:19.019 align:middle
暂停任务和取消任务很相似

00:30:19.553 --> 00:30:23.056 align:middle
NSProgress的生成器
沿着暂停任务处理器

00:30:23.123 --> 00:30:24.992 align:middle
和恢复任务处理器设置可暂停

00:30:25.492 --> 00:30:28.362 align:middle
恢复处理器在
OS X 10.11和iOS 9中

00:30:28.428 --> 00:30:29.496 align:middle
是新功能

00:30:30.831 --> 00:30:35.335 align:middle
还可以取消暂停旗标确定是否
进度目前是暂停状态

00:30:37.271 --> 00:30:39.640 align:middle
客户端会调用暂停并设置暂停

00:30:39.706 --> 00:30:42.976 align:middle
调用暂停处理器或调用恢复

00:30:43.043 --> 00:30:45.179 align:middle
再取消暂停触发恢复处理器

00:30:45.546 --> 00:30:47.881 align:middle
暂停任务和恢复任务

00:30:47.948 --> 00:30:50.384 align:middle
也会和取消任务一样转至子对象进度

00:30:51.485 --> 00:30:53.820 align:middle
我们继续做一个演示

00:30:57.324 --> 00:31:01.862 align:middle
如果你的对象 如果你的操作已经支持
取消 暂停和恢复任务

00:30:57.324 --> 00:31:01.862 align:middle
如果你的对象 如果你的操作已经支持
取消 暂停和恢复任务

00:31:01.929 --> 00:31:04.965 align:middle
就可以非常容易地
面对NSProgress

00:31:05.966 --> 00:31:07.968 align:middle
我们回到
照片View Controller

00:31:08.035 --> 00:31:09.736 align:middle
这是根
View Controller

00:31:10.270 --> 00:31:13.006 align:middle
这次app多了几个按钮

00:31:13.073 --> 00:31:16.276 align:middle
如果按下输入还有个取消和暂停按钮

00:31:16.343 --> 00:31:19.179 align:middle
但是现在并未做
任何事情需要把它们连起来

00:31:20.380 --> 00:31:21.114 align:middle
我们这就动手

00:31:23.050 --> 00:31:25.686 align:middle
有IBAction来定义这些按钮

00:31:25.752 --> 00:31:29.223 align:middle
还有取消输入 暂停输入和恢复输入

00:31:29.690 --> 00:31:31.558 align:middle
现在要做的是在所有这些行动中

00:31:31.625 --> 00:31:35.762 align:middle
我们会调用整体进度的取消暂停和恢复

00:31:38.365 --> 00:31:43.937 align:middle
现在一旦...
现在将在任何子对象进度上

00:31:44.004 --> 00:31:46.773 align:middle
调用任何取消暂停或恢复处理器

00:31:47.074 --> 00:31:47.975 align:middle
目前还没有

00:31:48.308 --> 00:31:51.178 align:middle
但是下载会支持取消暂停和恢复任务

00:31:51.512 --> 00:31:53.080 align:middle
我们进入照片下载

00:31:54.147 --> 00:31:57.150 align:middle
如果进入 Will
Begin Download回调

00:31:59.186 --> 00:32:01.021 align:middle
可以加入取消 暂停 恢复

00:31:59.186 --> 00:32:01.021 align:middle
可以加入取消 暂停 恢复

00:32:01.088 --> 00:32:02.956 align:middle
支持这个NSProgress

00:32:03.123 --> 00:32:05.959 align:middle
那么首先设置可取消为真

00:32:06.927 --> 00:32:09.129 align:middle
并设置
cancellationHandler

00:32:09.196 --> 00:32:11.265 align:middle
这里
cancellationHandler

00:32:11.331 --> 00:32:13.233 align:middle
在用NSUser
Canceled Error

00:32:13.300 --> 00:32:15.802 align:middle
调用Failed Download
With Error

00:32:18.438 --> 00:32:21.141 align:middle
我们同样还是可暂停可恢复

00:32:21.208 --> 00:32:24.044 align:middle
那么会把可暂停
设定为真在暂停处理器中

00:32:24.111 --> 00:32:26.313 align:middle
我们称之为Suspend
Download方法

00:32:26.713 --> 00:32:29.316 align:middle
在恢复处理器中我们在
调用Resume Download

00:32:30.017 --> 00:32:31.852 align:middle
现在注意这些都是私有方法

00:32:31.919 --> 00:32:34.288 align:middle
Failed Download
With Error

00:32:34.354 --> 00:32:36.723 align:middle
Suspend Download
和Resume Download

00:32:36.790 --> 00:32:39.393 align:middle
那我们只把这个功能
用于通过NSProgress

00:32:39.459 --> 00:32:41.361 align:middle
取消 暂停和恢复任务

00:32:41.428 --> 00:32:43.497 align:middle
但是这可以是非常强大的互动点

00:32:44.865 --> 00:32:46.667 align:middle
现在 我们运行app压缩 开始输入

00:32:49.603 --> 00:32:55.142 align:middle
暂定 进度 下载自行暂停

00:32:55.943 --> 00:32:58.445 align:middle
我们按下恢复就会恢复

00:32:58.512 --> 00:33:00.480 align:middle
还可以按下取消就会取消

00:32:58.512 --> 00:33:00.480 align:middle
还可以按下取消就会取消

00:33:00.914 --> 00:33:03.483 align:middle
现在是整体进度在发送

00:33:03.550 --> 00:33:06.053 align:middle
为任何可能的子对象触发

00:33:06.119 --> 00:33:08.021 align:middle
cancellationHandler

00:33:09.289 --> 00:33:09.957 align:middle
就这样

00:33:11.525 --> 00:33:12.559 align:middle
回到幻灯片

00:33:18.232 --> 00:33:19.032 align:middle
文斯·斯派德:好

00:33:19.366 --> 00:33:21.702 align:middle
我们先聊聊用户界面

00:33:22.269 --> 00:33:23.904 align:middle
在生成NSProgress对象时

00:33:23.971 --> 00:33:25.572 align:middle
我们都经历过这些问题

00:33:25.639 --> 00:33:28.041 align:middle
但是最终目的是告知用户

00:33:28.108 --> 00:33:30.677 align:middle
现在在发生什么这就是说用户界面

00:33:31.845 --> 00:33:33.614 align:middle
那么所有的NSProgress属性

00:33:33.680 --> 00:33:35.916 align:middle
都是可看的关键值

00:33:36.383 --> 00:33:39.453 align:middle
客户端可以添加
KVO观察者来更新UI

00:33:39.853 --> 00:33:42.990 align:middle
例如 客户可以更新UI视图来查看
NSProgress

00:33:43.090 --> 00:33:45.492 align:middle
作为fraction-
Completed属性

00:33:46.126 --> 00:33:48.829 align:middle
或是更新标签为
localizedDescription

00:33:50.097 --> 00:33:54.601 align:middle
同样要注意 这些KVO
回调也许在主线程中

00:33:54.668 --> 00:33:55.969 align:middle
不必调用

00:33:56.036 --> 00:33:57.671 align:middle
因此如果在更新UIControl

00:33:57.938 --> 00:33:59.773 align:middle
你会希望把任务移到主队列中

00:34:01.475 --> 00:34:04.778 align:middle
这里的示例是加上观察者后的效果

00:34:06.647 --> 00:34:10.984 align:middle
可以在NSProgress为关
键路径调用addObserver

00:34:11.451 --> 00:34:13.654 align:middle
针对fraction-
Completed属性

00:34:14.353 --> 00:34:16.924 align:middle
那么在覆盖观察Value
For Key Path中

00:34:16.989 --> 00:34:20.527 align:middle
我们把部分任务列入主队列

00:34:21.128 --> 00:34:22.829 align:middle
在主队列我们从NSProgress

00:34:22.896 --> 00:34:24.797 align:middle
获得
fractionCompleted

00:34:24.864 --> 00:34:26.900 align:middle
并更新UIProgressView

00:34:27.434 --> 00:34:28.569 align:middle
基本是这样

00:34:28.802 --> 00:34:33.440 align:middle
类似的样式可以用于
更新UI的标签或按钮

00:34:36.176 --> 00:34:39.146 align:middle
好的 最后我们来看
NSProgress的最佳实践

00:34:39.679 --> 00:34:41.949 align:middle
以为讲座题目中提到最佳实践

00:34:42.014 --> 00:34:43.417 align:middle
我最后要抓紧时间介绍一下

00:34:45.452 --> 00:34:47.353 align:middle
首先是完成

00:34:47.821 --> 00:34:50.657 align:middle
不要使用fraction-
Completed 来决定完成

00:34:51.024 --> 00:34:52.993 align:middle
这是个浮点值是由...

00:34:53.060 --> 00:34:54.428 align:middle
是从计算得出

00:34:54.795 --> 00:34:58.332 align:middle
和1.0来比较 不一定正确

00:34:58.632 --> 00:35:00.834 align:middle
而要使用
completedUnitCount

00:34:58.632 --> 00:35:00.834 align:middle
而要使用
completedUnitCount

00:35:00.901 --> 00:35:02.402 align:middle
和totalUnitCount

00:35:02.836 --> 00:35:05.706 align:middle
除非进度不确定
或totalUnitCount为0

00:35:07.774 --> 00:35:10.611 align:middle
另外 进度必须完成这点很重要

00:35:10.677 --> 00:35:12.880 align:middle
父对象的
completedUnitCount

00:35:12.946 --> 00:35:14.948 align:middle
只有在子对象完成后才会更新

00:35:15.315 --> 00:35:19.186 align:middle
同样NSProgress
会优化完成的子对象的方法

00:35:19.253 --> 00:35:21.688 align:middle
这样在任务完成时可以节省内存

00:35:24.124 --> 00:35:27.794 align:middle
之后 NSProgress
对象不得再次使用

00:35:28.128 --> 00:35:29.563 align:middle
一旦完成 就完成了

00:35:29.830 --> 00:35:31.298 align:middle
一旦取消 就取消了

00:35:32.132 --> 00:35:34.134 align:middle
如果需要再次使用
NSProgress

00:35:34.468 --> 00:35:36.937 align:middle
而不是重新来过并提供机制

00:35:37.004 --> 00:35:41.508 align:middle
那么进度的客户端会了解
对象已经取代比如通知

00:35:43.911 --> 00:35:45.512 align:middle
最后 性能表现

00:35:46.914 --> 00:35:48.015 align:middle
不要在小循环更新

00:35:48.081 --> 00:35:49.917 align:middle
completedUnitCount

00:35:49.983 --> 00:35:53.153 align:middle
例如 不要更新下载的每个字节

00:35:53.420 --> 00:35:55.722 align:middle
如果有父对象我们可以调用

00:35:55.789 --> 00:35:57.758 align:middle
来更新
fractionCompleted

00:35:57.824 --> 00:35:59.560 align:middle
这样用时可能会超过预期

00:35:59.626 --> 00:36:03.163 align:middle
因为组件可以任意大 并且很深

00:35:59.626 --> 00:36:03.163 align:middle
因为组件可以任意大 并且很深

00:36:04.831 --> 00:36:06.934 align:middle
但是当你这么做时不要忘记完成进度

00:36:07.000 --> 00:36:09.269 align:middle
一定确保更新
completedUnitCount

00:36:09.336 --> 00:36:10.571 align:middle
为totalUnitCount

00:36:10.637 --> 00:36:13.006 align:middle
否则 你会面对即将完成的进度

00:36:13.207 --> 00:36:13.941 align:middle
这对谁都不好

00:36:15.542 --> 00:36:16.210 align:middle
就这样

00:36:16.844 --> 00:36:20.147 align:middle
我们讲了许多
如果有效使用NSProgress

00:36:20.848 --> 00:36:24.384 align:middle
需要牢记的是这么几点

00:36:24.618 --> 00:36:26.620 align:middle
每个进度都有自己的单位

00:36:27.020 --> 00:36:30.624 align:middle
可以使用隐形或显性

00:36:31.024 --> 00:36:33.126 align:middle
这么做时
pendingUnitCount在

00:36:33.193 --> 00:36:34.595 align:middle
父对象的单元中

00:36:35.662 --> 00:36:38.665 align:middle
同样可以生成
NSProgress或你就是客户端

00:36:39.399 --> 00:36:42.970 align:middle
对于本地化 可以使用类型和用户属性

00:36:43.036 --> 00:36:45.739 align:middle
帮助实现更好的
localizedDescription

00:36:47.508 --> 00:36:50.611 align:middle
NSProgress是取消
暂停和恢复任务的

00:36:50.677 --> 00:36:51.612 align:middle
极好界面

00:36:53.247 --> 00:36:56.750 align:middle
它的所有属性均为
可观察KVO 因此可以使用

00:36:56.950 --> 00:36:58.919 align:middle
用它来更新UI

00:36:59.987 --> 00:37:00.654 align:middle
就是这样

00:36:59.987 --> 00:37:00.654 align:middle
就是这样

00:37:00.721 --> 00:37:03.156 align:middle
若想了解更多详情可以查看文档资料

00:37:03.423 --> 00:37:05.559 align:middle
可以查看NSProgress的标题

00:37:05.626 --> 00:37:06.894 align:middle
其中做了很好的注解

00:37:07.361 --> 00:37:10.063 align:middle
我们还给出了新示例
代码photoProgress

00:37:10.130 --> 00:37:11.932 align:middle
是根据我今天的演示提供的

00:37:12.833 --> 00:37:15.869 align:middle
如果需要任何帮助
可以前往开发人员论坛

00:37:15.936 --> 00:37:17.571 align:middle
或联系开发人员技术支持

00:37:18.138 --> 00:37:20.974 align:middle
如果是一般性咨询
可以电邮联系保罗·马科斯

00:37:21.108 --> 00:37:21.775 align:middle
就是这些

00:37:22.109 --> 00:37:22.776 align:middle
谢谢
