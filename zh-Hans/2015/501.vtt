WEBVTT

00:00:17.384 --> 00:00:19.019 align:middle
大家好 欢迎来到

00:00:19.086 --> 00:00:21.955 align:middle
了解网页开发中WebKit
和Safari的新特性

00:00:22.523 --> 00:00:25.025 align:middle
我是布伦特·福安
下面将由我带领大家

00:00:25.092 --> 00:00:27.861 align:middle
一起了解今年我们所取得的新进展

00:00:28.362 --> 00:00:30.864 align:middle
对于我们来说这是尤为激动人心的一年

00:00:31.231 --> 00:00:34.701 align:middle
因为这么多年以来
我们只收到你们...

00:00:35.169 --> 00:00:38.739 align:middle
的错误报告
以及别人告诉我们的一些事情

00:00:38.805 --> 00:00:41.575 align:middle
但是今年 我们有了自己实验室

00:00:41.642 --> 00:00:44.411 align:middle
让我们可以对完成的所有内容做测试

00:00:44.745 --> 00:00:46.013 align:middle
试着让你们用起来更加方便

00:00:47.181 --> 00:00:50.751 align:middle
无论你的主要目标是将
Safari作为网页开发工具

00:00:51.185 --> 00:00:53.687 align:middle
还是一个更大应用程序中的
嵌入式web视图

00:00:53.754 --> 00:00:55.956 align:middle
我相信你很快就会在演讲中

00:00:56.023 --> 00:00:58.559 align:middle
找到对你有用的内容

00:00:59.326 --> 00:01:02.162 align:middle
首先 我会简短的介绍WebKit

00:00:59.326 --> 00:01:02.162 align:middle
首先 我会简短的介绍WebKit

00:01:02.262 --> 00:01:04.932 align:middle
以及它是怎样应用在
Apple的软件设计中

00:01:06.366 --> 00:01:09.102 align:middle
然后 介绍今年我们在
safari中增加的一些新功能

00:01:10.838 --> 00:01:12.773 align:middle
你将会用到这些新功能

00:01:12.973 --> 00:01:15.609 align:middle
最后 我想介绍一下

00:01:15.676 --> 00:01:19.947 align:middle
关于为iOS和Mac
平台创造的新奇体验

00:01:20.214 --> 00:01:22.349 align:middle
所提到新特性在这些平台都是可用的

00:01:22.683 --> 00:01:27.254 align:middle
如果你利用这些优点
会令你的网站更加吸引人

00:01:27.454 --> 00:01:29.022 align:middle
有利于浏览者浏览

00:01:29.990 --> 00:01:31.391 align:middle
现在我们开始讨论WebKit

00:01:32.492 --> 00:01:34.361 align:middle
WebKit是我们浏览器的引擎

00:01:34.761 --> 00:01:39.099 align:middle
它是一个开源的项目
任何人都可以加入

00:01:41.368 --> 00:01:44.004 align:middle
你可能知道WebKit

00:01:44.137 --> 00:01:47.474 align:middle
是Safari的引擎
但是你也许没意识到它

00:01:47.541 --> 00:01:49.810 align:middle
也被应用在其他的Apple
应用程序里通过我们

00:01:49.877 --> 00:01:51.612 align:middle
所做的一系列事情已经得到实现

00:01:54.081 --> 00:01:57.518 align:middle
WebKit也是iOS
和 OS X的引擎

00:01:57.584 --> 00:01:59.253 align:middle
它们之间只有很细微的差别

00:01:59.686 --> 00:02:00.754 align:middle
因此在接下来的演讲里

00:01:59.686 --> 00:02:00.754 align:middle
因此在接下来的演讲里

00:02:00.821 --> 00:02:02.556 align:middle
除非我明确的提出新特性

00:02:02.623 --> 00:02:04.992 align:middle
仅在某一平台可用

00:02:05.459 --> 00:02:07.261 align:middle
你可以认为它们

00:02:07.327 --> 00:02:09.997 align:middle
可以用在所有的平台

00:02:12.065 --> 00:02:15.235 align:middle
这里有一个重点
如果你是一个Safari web

00:02:15.302 --> 00:02:18.005 align:middle
开发者或者iOS web
浏览器的开发者

00:02:18.138 --> 00:02:20.207 align:middle
你可以用我今天要讲的全部内容

00:02:20.707 --> 00:02:23.510 align:middle
如果你是一个嵌入式网页
视图的app开发人员

00:02:23.577 --> 00:02:24.912 align:middle
你会用到我正在讲的所有特性

00:02:27.681 --> 00:02:30.117 align:middle
如果你只是从事
JavaScriptCore

00:02:30.184 --> 00:02:34.922 align:middle
框架或者OS X自动化工具开发

00:02:34.988 --> 00:02:37.191 align:middle
你可以利用所有的
JavaScript特性

00:02:37.491 --> 00:02:38.792 align:middle
这一部分中我们将会讲到

00:02:41.161 --> 00:02:43.997 align:middle
这就是我们对WebKit的介绍
接下来

00:02:44.398 --> 00:02:45.933 align:middle
将会介绍我们今年开发的新特性

00:02:48.936 --> 00:02:51.438 align:middle
因此我将暂停这一部分的介绍
说一下新的布局

00:02:51.505 --> 00:02:53.440 align:middle
结构和渲染特性

00:02:54.575 --> 00:02:56.476 align:middle
我们更新了一些
JavaScript特性

00:02:56.543 --> 00:03:00.280 align:middle
我们让它支持新的
JavaScript标准和CSS特性

00:02:56.543 --> 00:03:00.280 align:middle
我们让它支持新的
JavaScript标准和CSS特性

00:03:00.347 --> 00:03:02.516 align:middle
这会让你的样式表

00:03:02.583 --> 00:03:04.084 align:middle
维护更加容易 可读性更强

00:03:06.920 --> 00:03:09.323 align:middle
让我们讲一点Safari中

00:03:09.389 --> 00:03:11.792 align:middle
布局和渲染等特性的改进

00:03:12.593 --> 00:03:15.529 align:middle
更准确的说 我想说的是关于
是背景效果的一些改进

00:03:17.030 --> 00:03:18.131 align:middle
在iOS 7的设计中

00:03:18.198 --> 00:03:20.234 align:middle
用户界面的设计做了一些改变

00:03:20.300 --> 00:03:23.170 align:middle
加入了背景模糊效应

00:03:23.737 --> 00:03:27.608 align:middle
举个例子 这里你可以看到主界面图标

00:03:27.674 --> 00:03:29.576 align:middle
像透过毛玻璃一样

00:03:30.644 --> 00:03:32.613 align:middle
这样的叠加增加了一些深度

00:03:33.180 --> 00:03:36.583 align:middle
给你一种感觉
这层后面好像发生了什么

00:03:37.150 --> 00:03:39.786 align:middle
却并没有挡住内容 当我们尝试

00:03:39.853 --> 00:03:42.089 align:middle
通过用户界面去看的时候

00:03:43.724 --> 00:03:45.592 align:middle
后来在OS X Yosemite中

00:03:45.993 --> 00:03:47.794 align:middle
我们提供了相似的背景效应

00:03:48.595 --> 00:03:51.698 align:middle
我们在搜素侧边栏也做了
一点的模糊处理

00:03:52.533 --> 00:03:56.103 align:middle
让文档看起来也像透过毛玻璃一样

00:03:57.604 --> 00:04:02.109 align:middle
这些效果很重要 看起来
像是原生系统的一部分

00:03:57.604 --> 00:04:02.109 align:middle
这些效果很重要 看起来
像是原生系统的一部分

00:04:02.643 --> 00:04:04.211 align:middle
它们就是你想用的一些特性

00:04:04.278 --> 00:04:07.781 align:middle
在你的最终版本的个人网页
当人们通过Mac

00:04:07.848 --> 00:04:09.783 align:middle
或者iOS设备浏览网页时

00:04:10.584 --> 00:04:14.254 align:middle
但更加重要的是
当你想让一个嵌入式的网页视图

00:04:14.321 --> 00:04:18.524 align:middle
成为系统的一部分 或者看起来
像是原生用户界面

00:04:19.459 --> 00:04:20.360 align:middle
你怎么做到的呢？

00:04:22.262 --> 00:04:25.265 align:middle
假如我有一个展示照片的应用程序

00:04:26.266 --> 00:04:28.502 align:middle
显然没有很好的方法生成背景效应

00:04:28.669 --> 00:04:30.003 align:middle
像我们之前看到的那样

00:04:31.071 --> 00:04:34.041 align:middle
我们可以尝试用半透明的覆盖层

00:04:34.241 --> 00:04:37.978 align:middle
但是你看到内容与上
上面的文字有些冲突

00:04:38.412 --> 00:04:42.149 align:middle
你知道后面的东西会让
阅读变得更加困难

00:04:43.417 --> 00:04:46.019 align:middle
但是现在我们有了
CSS滤镜包含了模糊效果

00:04:46.320 --> 00:04:47.621 align:middle
我们可以试一下吗？

00:04:48.922 --> 00:04:50.424 align:middle
当然那是一个不错的效果

00:04:51.391 --> 00:04:53.327 align:middle
但是它并不是我们真正想要的

00:04:53.560 --> 00:04:56.163 align:middle
它唯一的作用就是清除图片的背景

00:04:56.230 --> 00:04:58.332 align:middle
除了这点还有很多其他效果

00:05:00.868 --> 00:05:02.836 align:middle
我们通过观察

00:05:03.270 --> 00:05:06.440 align:middle
发现像你一样开发者仍在
继续努力实现这个效果

00:05:06.507 --> 00:05:08.509 align:middle
他们会这样做 有一个这样的背景图片

00:05:08.575 --> 00:05:11.979 align:middle
先生成一个完全模糊的图片

00:05:12.045 --> 00:05:15.082 align:middle
然后被剪裁和移动覆盖

00:05:15.148 --> 00:05:17.885 align:middle
到想要模糊的元素

00:05:18.685 --> 00:05:22.656 align:middle
这样做很糟糕我的意思是
说我们很吃惊对我们来说

00:05:24.525 --> 00:05:25.926 align:middle
并不是一个好消息让你那样做

00:05:26.560 --> 00:05:31.565 align:middle
这就说明还有其他问题
我们不能让这些背景更加灵活

00:05:31.965 --> 00:05:33.800 align:middle
改变模糊效果一件很困难的事

00:05:33.867 --> 00:05:36.370 align:middle
一旦我们这样做就要重新
渲染所有的事情

00:05:37.905 --> 00:05:41.175 align:middle
因此 我们需要一个
更好的方法使用背景滤镜

00:05:42.809 --> 00:05:47.614 align:middle
背景滤镜允许我们在
CSS中指定背景效果

00:05:48.148 --> 00:05:51.218 align:middle
它也被提出作为W3C标准之一

00:05:51.285 --> 00:05:53.253 align:middle
现在正在审核中

00:05:54.188 --> 00:05:55.489 align:middle
让我们看一下它们如何搭配

00:05:56.356 --> 00:05:59.660 align:middle
假如我们想给元素提供滤镜效果

00:06:01.061 --> 00:06:04.031 align:middle
WebKit将会获取它的范围
在一个关闭背景

00:06:04.531 --> 00:06:05.732 align:middle
中重新渲染

00:06:06.667 --> 00:06:11.171 align:middle
这样很有效率但是渲染过程很消耗资源

00:06:11.705 --> 00:06:14.308 align:middle
所以我们要确保不会过度使用

00:06:15.008 --> 00:06:16.410 align:middle
一旦我们有了背景环境

00:06:16.476 --> 00:06:18.378 align:middle
然后将滤镜应用在上面
就会产生模糊效果

00:06:18.912 --> 00:06:21.849 align:middle
我们把前端的内容放在上面

00:06:22.316 --> 00:06:25.485 align:middle
然后我们可以重新合成完整的场景

00:06:25.552 --> 00:06:28.155 align:middle
你就可以得到想要的模糊效果

00:06:29.823 --> 00:06:32.092 align:middle
一旦我们让模糊效果出现了

00:06:32.526 --> 00:06:34.828 align:middle
就意味着我们就可以灵活的运用

00:06:35.295 --> 00:06:36.663 align:middle
所有的CSS滤镜

00:06:36.864 --> 00:06:38.932 align:middle
我们做到了 我们可以使用

00:06:39.166 --> 00:06:40.701 align:middle
其他的CSS滤镜在这个效果上面

00:06:41.368 --> 00:06:43.203 align:middle
我们可以改变颜色

00:06:44.304 --> 00:06:46.240 align:middle
可以将多个滤镜组合在一起

00:06:46.306 --> 00:06:49.276 align:middle
我们可以同时获得模糊
和灰度效果就像这样

00:06:50.143 --> 00:06:53.780 align:middle
最令人激动的是我们可以把这些

00:06:53.847 --> 00:06:55.349 align:middle
效果放在在动态页面上

00:06:55.716 --> 00:06:59.887 align:middle
因此一行CSS代码可以
让背景模糊滤镜

00:07:00.220 --> 00:07:03.657 align:middle
用在视频上面 多么不可思议

00:07:03.724 --> 00:07:05.792 align:middle
当实现这个功能的时候我很激动

00:07:06.193 --> 00:07:09.530 align:middle
迫不及待的想看到这些
效果出现在你的个人网站

00:07:11.832 --> 00:07:13.901 align:middle
让我们稍微休息一下

00:07:13.967 --> 00:07:18.505 align:middle
另外我们看到的一些问题
是布局和滚动效果的渲染

00:07:20.974 --> 00:07:25.145 align:middle
你已经看到顶端的iTunes横幅

00:07:25.579 --> 00:07:29.583 align:middle
如果你试着玩过的话
就会注意到当你滚动它时

00:07:30.050 --> 00:07:34.521 align:middle
它会以整个步长为单位
移动在你每动一步的时候

00:07:34.922 --> 00:07:37.191 align:middle
你将得到一个完整的
电影标题或者电影截图

00:07:39.026 --> 00:07:41.895 align:middle
我们在IOS端的图片app
也能做到类似的效果

00:07:41.962 --> 00:07:46.166 align:middle
每次当我们看着一张图片想滑到另一张
的时候都能直接滑过一整幅图片

00:07:46.233 --> 00:07:49.970 align:middle
而不会出现前一张的一部分和
后一张的一部分同时显示的情况

00:07:50.971 --> 00:07:56.910 align:middle
这种交互对于图片库或者其他
类似的平铺内容来说是意义重大的

00:07:58.679 --> 00:08:03.283 align:middle
之前人们都是通过
编写复杂的JavaScript语句

00:07:58.679 --> 00:08:03.283 align:middle
之前人们都是通过
编写复杂的JavaScript语句

00:08:03.350 --> 00:08:04.852 align:middle
来实现这种滚动操作

00:08:05.219 --> 00:08:09.723 align:middle
开发者们大刀阔斧得抛弃了
之前浏览器内置的平滑滚动结构

00:08:10.290 --> 00:08:15.662 align:middle
通过人工加入JavaScript语句
将其替换成这种逐帧变化的模式

00:08:16.463 --> 00:08:18.799 align:middle
我们知道它的性能代偿也是不容忽视的

00:08:18.866 --> 00:08:21.468 align:middle
我们发现这样一个问题

00:08:21.869 --> 00:08:24.438 align:middle
你不可能每一帧都通过运行复杂的
JavaScript语句

00:08:24.505 --> 00:08:25.572 align:middle
来获得平滑滚动的效果

00:08:26.707 --> 00:08:28.375 align:middle
所以我们需要另一种方式来实现它

00:08:29.810 --> 00:08:31.345 align:middle
那就是滚动界线点

00:08:33.480 --> 00:08:36.416 align:middle
滚动界线点是一种在
CSS里声明的方法

00:08:36.750 --> 00:08:41.688 align:middle
通过滚动曲线的动画化来呈现滚动区域

00:08:41.855 --> 00:08:44.591 align:middle
它也是一种CSS标准

00:08:47.995 --> 00:08:51.198 align:middle
可以想象一下
我们有某种样式的一个观察孔

00:08:51.265 --> 00:08:53.400 align:middle
有一个盒子可以在里面
看到一系列的相册封面

00:08:53.934 --> 00:08:56.637 align:middle
所以在这张图片里面
还有许多被相册封面遮住

00:08:57.171 --> 00:08:58.872 align:middle
看不清的其他没有显示在屏幕上的图片

00:08:58.972 --> 00:09:02.276 align:middle
但是我想循环播放它们一次播放一张

00:08:58.972 --> 00:09:02.276 align:middle
但是我想循环播放它们一次播放一张

00:09:02.943 --> 00:09:06.580 align:middle
我知道他们尺寸很厚
比如说他们都有300个像素

00:09:07.247 --> 00:09:11.084 align:middle
每次我扫过这些内容时

00:09:11.151 --> 00:09:14.721 align:middle
我希望可以滚动播放
直到看完一整本相册

00:09:19.126 --> 00:09:20.827 align:middle
这一行为可以通过

00:09:21.161 --> 00:09:25.799 align:middle
声明滚动界限点中的x值来实现

00:09:26.500 --> 00:09:31.104 align:middle
我们会告诉它我们想让它
以300个像素为间隔行进

00:09:31.505 --> 00:09:33.574 align:middle
并且用设成300的
像素参数重复这一过程

00:09:34.641 --> 00:09:36.610 align:middle
这个动画就是它所呈现出来的效果

00:09:37.077 --> 00:09:39.847 align:middle
我动手指来扫这些图片

00:09:40.681 --> 00:09:42.649 align:middle
我所滑过的图片数目

00:09:42.716 --> 00:09:44.518 align:middle
取决于我手指动的力度

00:09:44.985 --> 00:09:48.989 align:middle
但是当手指的动作一点点
减慢直到我们停下来时

00:09:49.056 --> 00:09:52.526 align:middle
界面将会停在一个边界完整的图片那儿

00:09:55.162 --> 00:09:59.900 align:middle
在源程序中实现这一效果需要两行代码

00:10:00.834 --> 00:10:04.104 align:middle
我们可以通过把滚动停止类型
设置为强制来打开这个功能

00:10:05.272 --> 00:10:09.009 align:middle
再声明一个300像素的重复间隔

00:10:11.378 --> 00:10:13.914 align:middle
现在我操作一个网站给你们演示一下

00:10:14.114 --> 00:10:17.918 align:middle
你们看当我这样滑的时候 它动了起来

00:10:17.985 --> 00:10:23.223 align:middle
当我轻轻得拉回来并且撒手系统画面会
停留在最近的那个滑动界限点上

00:10:23.323 --> 00:10:25.659 align:middle
所以它们就像是
被橡胶绑着弹回这个位置

00:10:28.262 --> 00:10:30.564 align:middle
你可能已经从它的名字里懂了这些

00:10:30.864 --> 00:10:33.634 align:middle
但是滑动界限点可以
作用于两个维度x轴和y轴

00:10:37.905 --> 00:10:41.341 align:middle
所以到目前为止
我给你们展示的是一个非常简洁的功能

00:10:41.542 --> 00:10:46.513 align:middle
但它不能很好得处理
滚动容器中的内容的大小不一致的情况

00:10:47.681 --> 00:10:49.983 align:middle
所以在我图片元素的大小不一致时

00:10:50.050 --> 00:10:52.619 align:middle
我有一张大小为300像素的方形图片

00:10:52.986 --> 00:10:54.488 align:middle
同时也有一张矩形图片

00:10:55.189 --> 00:10:58.058 align:middle
这个矩形图片或者说它的内容

00:10:59.059 --> 00:11:01.161 align:middle
并不匹配300像素的边界

00:10:59.059 --> 00:11:01.161 align:middle
并不匹配300像素的边界

00:11:01.228 --> 00:11:05.098 align:middle
所以如果我尝试着滚动它
显示出来的效果就不太正常了

00:11:06.166 --> 00:11:09.770 align:middle
而滚动界限机制可以应对这种情况

00:11:11.371 --> 00:11:14.741 align:middle
如果我们把滚动容器视作
我身后的白盒子

00:11:15.776 --> 00:11:17.978 align:middle
这个就是滚动停止终点

00:11:18.612 --> 00:11:23.383 align:middle
我们在滚动图片时会在这一点对齐

00:11:23.951 --> 00:11:25.586 align:middle
它一般默认位于左上角

00:11:25.752 --> 00:11:28.989 align:middle
但我们可以通过标准的
CSS定位语法给它设定位置

00:11:31.158 --> 00:11:34.595 align:middle
与滚动停止终点相伴随的是
滚动停止坐标

00:11:37.097 --> 00:11:40.901 align:middle
这些是滚动容器中每个元素的位置坐标

00:11:41.902 --> 00:11:43.804 align:middle
它们也都默认位于左上角

00:11:44.438 --> 00:11:46.306 align:middle
所以我们可以这样说...

00:11:46.740 --> 00:11:49.409 align:middle
在WebKit中我们能使用这个语法

00:11:49.476 --> 00:11:52.212 align:middle
让滚动停止坐标落在
每个元素的中心位置

00:11:52.846 --> 00:11:58.118 align:middle
我们可以说我们希望滚动容器的中心
能作为我们的目标点我们的终点

00:11:59.052 --> 00:12:00.354 align:middle
你把它们联系到一起的时候

00:11:59.052 --> 00:12:00.354 align:middle
你把它们联系到一起的时候

00:12:00.954 --> 00:12:04.224 align:middle
当你用手指来滚动图片

00:12:04.591 --> 00:12:06.960 align:middle
最终它们能整齐得停在箱子的中心点

00:12:08.595 --> 00:12:14.334 align:middle
实现这一操作的代码并不比
简单的像素循环要复杂

00:12:14.768 --> 00:12:18.805 align:middle
我们强制把这个功能集成在滚动容器里

00:12:19.506 --> 00:12:22.976 align:middle
我们把停止点定位在
滚动容器的中心位置

00:12:24.545 --> 00:12:26.914 align:middle
然后给每一个元素都赋予了位置坐标

00:12:26.980 --> 00:12:29.316 align:middle
在这里我创建了一个类
叫做“photograph”

00:12:29.383 --> 00:12:32.319 align:middle
你知道你可以用它来做你想做的
任何事把它定位在中心位置

00:12:33.820 --> 00:12:36.957 align:middle
这就是产生网页中实际效果的过程

00:12:37.191 --> 00:12:41.562 align:middle
所以对于一系列图片
当我滚动经过它们的时候

00:12:41.628 --> 00:12:43.497 align:middle
我们经常会停在中间位置

00:12:46.033 --> 00:12:49.136 align:middle
接下来有请克里斯上台

00:12:49.203 --> 00:12:50.904 align:middle
用一个神奇的例子

00:12:51.471 --> 00:12:53.807 align:middle
来给大家具体展示一下

00:12:59.880 --> 00:13:04.151 align:middle
感谢布伦特 我叫克里斯·楊
是苹果互动团队的一名开发人员

00:12:59.880 --> 00:13:04.151 align:middle
感谢布伦特 我叫克里斯·楊
是苹果互动团队的一名开发人员

00:13:04.618 --> 00:13:06.787 align:middle
苹果的互动团队在公司做了许多工作

00:13:06.854 --> 00:13:10.858 align:middle
其中之一就是我们负责你们在
Apple.com上看到的许多网页的内容

00:13:11.258 --> 00:13:13.193 align:middle
所以今天我非常兴奋能出现在这里

00:13:13.260 --> 00:13:15.128 align:middle
因为我感觉刚刚布伦特展示的许多功能

00:13:15.195 --> 00:13:18.665 align:middle
对于网页开发者来说是非常激动人心的
我也非常激动得希望自己能够用到它们

00:13:22.402 --> 00:13:24.905 align:middle
来 让我们开始
这里放了一个小的web app

00:13:24.972 --> 00:13:27.307 align:middle
用来展示一些WebKit的新功能

00:13:27.941 --> 00:13:31.578 align:middle
这里有一个图片库 我们可以上下滚动

00:13:31.879 --> 00:13:34.214 align:middle
你可以看到
这里有许多照片的尺寸和其他的不同

00:13:35.082 --> 00:13:37.150 align:middle
我们将鼠标停在这里 点击打开它

00:13:37.718 --> 00:13:39.853 align:middle
它将会在overlay view中打开

00:13:39.920 --> 00:13:43.524 align:middle
使我们能在这些照片中左右滚动

00:13:43.857 --> 00:13:46.627 align:middle
甚至我们可以通过点击这里
在右上角选择我们“喜欢的”图片

00:13:47.561 --> 00:13:50.197 align:middle
这是非常酷的但我想我们可以
通过使用Webkit中的一些新功能

00:13:50.264 --> 00:13:54.501 align:middle
让它变得更好
首先 我想谈一下背景滤波器

00:13:55.335 --> 00:13:59.573 align:middle
大家关注一下在app上方的这个位置
我们把导航元素固定在这里

00:14:00.007 --> 00:14:03.210 align:middle
现在它是实心黑色的被固定在最上面

00:14:03.644 --> 00:14:06.847 align:middle
在我们上下滚动时内容
就被覆盖在它的底下

00:14:07.147 --> 00:14:09.616 align:middle
然后点击进入Safari工具条
它就变得模糊

00:14:10.083 --> 00:14:11.118 align:middle
这真的很酷

00:14:11.185 --> 00:14:15.822 align:middle
但实际上我们可以
通过给这个元素加一个背景过滤器

00:14:15.889 --> 00:14:20.260 align:middle
让它看起来更像是UI的一部分
接下来我会告诉你怎样实现它

00:14:20.327 --> 00:14:22.362 align:middle
你们知道我喜欢在编程的
时候加很多空格

00:14:22.429 --> 00:14:26.099 align:middle
我将会跳过这里的UI和代码
向前再向后一点点

00:14:28.902 --> 00:14:31.371 align:middle
酷 现在我打开了Xcode
以及我的一个CSS文件

00:14:31.438 --> 00:14:36.510 align:middle
我们将要把一些新的
代码加进这个CSS文件中我要开始了

00:14:37.177 --> 00:14:39.580 align:middle
我要在这里粘贴一个新建的导航声明

00:14:39.646 --> 00:14:42.916 align:middle
来指向那个实心黑色的导航条

00:14:43.283 --> 00:14:47.788 align:middle
我们要把背景颜色设置成
透明度为50%的实心黑色

00:14:48.655 --> 00:14:51.091 align:middle
然后我们要加一个背景滤波器
来进行10个像素的模糊

00:14:52.626 --> 00:14:55.562 align:middle
如果我们再返回 将会看到

00:14:55.629 --> 00:14:59.199 align:middle
我们新加的这行代码
将会神奇得呈现出来

00:14:59.266 --> 00:15:01.802 align:middle
当你滚动的时候底下的内容会变模糊

00:14:59.266 --> 00:15:01.802 align:middle
当你滚动的时候底下的内容会变模糊

00:15:02.569 --> 00:15:06.573 align:middle
而文本依旧很清晰Safari
工具条的一切也都不会被影响

00:15:07.007 --> 00:15:08.308 align:middle
我认为这是非常了不起的

00:15:08.375 --> 00:15:10.811 align:middle
这是WebKit团队做出的
一项令人惊叹的成果

00:15:13.180 --> 00:15:17.050 align:middle
非常厉害接下来我想给
你们展示的是滚动停止点

00:15:17.918 --> 00:15:21.221 align:middle
我认为覆叠图库是一个
使用滚动停止点的好例子

00:15:22.122 --> 00:15:24.591 align:middle
记住 当我们这样左右滚动的时候

00:15:24.658 --> 00:15:27.794 align:middle
我们会到达所见内容的左边

00:15:27.861 --> 00:15:29.997 align:middle
而不是精确得对准我们看着的地方

00:15:30.898 --> 00:15:33.433 align:middle
这并没有太大影响
但我们能够改善这一点

00:15:33.500 --> 00:15:35.035 align:middle
通过使用滚动界限点来对准它

00:15:35.102 --> 00:15:37.604 align:middle
我们总是能够看到想要看的图片

00:15:38.839 --> 00:15:41.575 align:middle
所以我会给你们演示如何实现它
让我们回到之前的CSS界面

00:15:42.843 --> 00:15:45.879 align:middle
我将要在覆叠图库里新建一个声明

00:15:45.946 --> 00:15:48.215 align:middle
来强制设定滚动停止类型

00:15:48.682 --> 00:15:51.919 align:middle
以及设置滚动停止点x坐标
让它重复100个像素的视口宽度

00:15:52.286 --> 00:15:53.687 align:middle
所有的照片容器都是这个尺寸

00:15:53.754 --> 00:15:56.690 align:middle
所以我们再次返回看的时候
所有元素都能很好得贴合

00:15:59.793 --> 00:16:03.630 align:middle
如果刷新一下 现在就能非常流畅得

00:15:59.793 --> 00:16:03.630 align:middle
如果刷新一下 现在就能非常流畅得

00:16:03.697 --> 00:16:06.900 align:middle
浏览这些图片了
WebKit控制的滚动效果已经生效

00:16:07.201 --> 00:16:10.537 align:middle
你们看 我碰到了边缘
它们会弹回到正确的位置

00:16:11.305 --> 00:16:14.441 align:middle
这样真的非常棒
正如你们所知 如果没有这个功能

00:16:14.508 --> 00:16:16.944 align:middle
就只能用很长的
JavaScript代码来实现它

00:16:17.010 --> 00:16:19.613 align:middle
我迫不及待得想看到你们
能用它来做点什么这真的是太棒了

00:16:21.515 --> 00:16:23.650 align:middle
你们知道 还有一个东西也很流行

00:16:23.717 --> 00:16:26.587 align:middle
就是你们经常会使用
JavaScript为元素添加样式

00:16:26.887 --> 00:16:30.257 align:middle
那也将是一个关于覆叠的
非常有趣的例子...

00:16:30.357 --> 00:16:32.192 align:middle
用masonry图像库

00:16:32.926 --> 00:16:34.428 align:middle
当我们上下滚动的时候

00:16:34.494 --> 00:16:36.463 align:middle
我们实际上在
JavaScript里生成了网格

00:16:36.530 --> 00:16:40.200 align:middle
所以能以此改变x轴和y轴的坐标个数

00:16:40.667 --> 00:16:43.837 align:middle
我们并不能提前知道每个元素会有多高

00:16:44.638 --> 00:16:47.040 align:middle
但我们可以通过用
JavaScript

00:16:47.107 --> 00:16:48.909 align:middle
在滚动界限点设置重复值来实现它

00:16:48.976 --> 00:16:51.178 align:middle
所以在我们垂直滚动的时候

00:16:51.512 --> 00:16:53.580 align:middle
导航栏将会很好得停在这些元素中间

00:16:53.647 --> 00:16:55.516 align:middle
所以你可以总是专注于应该去做的事情

00:16:56.383 --> 00:16:59.786 align:middle
为了实现它 我们将要跳回
JavaScript 在这里

00:17:00.020 --> 00:17:01.855 align:middle
这是一个新的
JavaScript文件

00:17:03.557 --> 00:17:06.059 align:middle
我们将要把masonry
图库的构造函数

00:17:06.292 --> 00:17:07.828 align:middle
扩展到停止点masonry图库

00:17:09.029 --> 00:17:12.499 align:middle
我们将要做以及正在做的主要就是
添加进一种新方法叫做设置停止点样式

00:17:13.066 --> 00:17:15.169 align:middle
通过它我们把滚动停止模式设置为强制

00:17:15.234 --> 00:17:18.038 align:middle
它将会在y轴设置停止点

00:17:18.137 --> 00:17:22.509 align:middle
并循环y轴上和停止点在
同一高度的所有坐标点

00:17:23.042 --> 00:17:25.779 align:middle
这是一种我们实例化运行时

00:17:26.079 --> 00:17:27.948 align:middle
在构造函数内部设置的变量

00:17:29.550 --> 00:17:30.951 align:middle
我们要做的最后一件事就是

00:17:31.018 --> 00:17:33.820 align:middle
告诉我们的JS文件去使用它
因为我们已经完成了对它的扩展

00:17:33.887 --> 00:17:36.456 align:middle
只需要把它放在这里
用这个来代替masonry图片库

00:17:38.425 --> 00:17:42.663 align:middle
现在当我们更新的时候 你会注意到
导航栏非常合理得置于这些元素中

00:17:42.996 --> 00:17:48.468 align:middle
我们可以抛出它它也总会停在
一个能适应内容的合适的地方

00:17:49.169 --> 00:17:50.470 align:middle
我认为这一点非常棒

00:17:50.537 --> 00:17:52.773 align:middle
现在我想重新请出布伦特上台演讲

00:17:52.840 --> 00:17:54.708 align:middle
他将会谈一些布局和渲染的问题
谢谢

00:17:59.746 --> 00:18:00.881 align:middle
感谢大家 真是太奇妙了

00:17:59.746 --> 00:18:00.881 align:middle
感谢大家 真是太奇妙了

00:18:05.886 --> 00:18:09.590 align:middle
我想回顾一下我们刚刚讲过的一些功能

00:18:09.990 --> 00:18:12.993 align:middle
背景滤波器是非常有效的
它们经过了硬件加速

00:18:13.293 --> 00:18:17.998 align:middle
但是又因渲染过程变得难以触发

00:18:18.065 --> 00:18:19.266 align:middle
所以我们应该认真衡量一下

00:18:19.666 --> 00:18:22.135 align:middle
看看它在你们自己的网站上的运行情况

00:18:22.603 --> 00:18:26.673 align:middle
对于页面内容和tile内容来说
滚动界限是一个福音

00:18:27.040 --> 00:18:30.110 align:middle
但当你想做任何
程序相关的滑动时都需要小心

00:18:30.444 --> 00:18:34.715 align:middle
因为在操作滚动过程时
这两个功能会互相干扰

00:18:34.882 --> 00:18:35.949 align:middle
所以要记住这一点

00:18:38.252 --> 00:18:41.188 align:middle
同时这些会话被封装进了
布局和渲染功能中

00:18:41.788 --> 00:18:43.056 align:middle
现在我的话题将要转到

00:18:43.457 --> 00:18:46.226 align:middle
我们今年在做的一些对
JavaScript的更新

00:18:47.394 --> 00:18:50.364 align:middle
JavaScript ES6
标准非常得奇妙

00:18:50.731 --> 00:18:54.535 align:middle
它通过一些新的方式推进了
JavaScript 的发展

00:18:54.801 --> 00:18:56.770 align:middle
克里斯在他的演示中提到了一些

00:18:59.339 --> 00:19:03.944 align:middle
我想讲一下 我们今年集成的
几个激动人心的新功能

00:18:59.339 --> 00:19:03.944 align:middle
我想讲一下 我们今年集成的
几个激动人心的新功能

00:19:05.179 --> 00:19:08.482 align:middle
去年在我们的会议中我们
谈论过一些添加的新功能

00:19:09.049 --> 00:19:10.784 align:middle
在那之后我们并非原地不动

00:19:11.118 --> 00:19:13.820 align:middle
而是做了惊人的对ES 6的扩展支持

00:19:14.254 --> 00:19:18.058 align:middle
使用了许多东西对象符号和弱集

00:19:18.825 --> 00:19:21.862 align:middle
接下来我要介绍的几样
都是我认为非常非常有用的

00:19:23.897 --> 00:19:25.032 align:middle
首先从我最爱的

00:19:25.899 --> 00:19:26.733 align:middle
模板文本开始

00:19:27.434 --> 00:19:31.972 align:middle
你们是否会经常遇到这样的问题呢

00:19:32.372 --> 00:19:34.174 align:middle
比如当你尝试着构建日志字符串

00:19:34.241 --> 00:19:35.609 align:middle
或者给用户生成什么东西时

00:19:35.909 --> 00:19:37.978 align:middle
你有一群字符串块或者别的东西

00:19:38.045 --> 00:19:39.980 align:middle
想把它们组合在一起

00:19:40.380 --> 00:19:42.883 align:middle
最终你会遇到这样的旧语法样例

00:19:43.383 --> 00:19:46.486 align:middle
我曾经苦于太多的时间耗费

00:19:46.553 --> 00:19:48.589 align:middle
用来寻找丢失的连接运算符

00:19:48.755 --> 00:19:50.657 align:middle
或者寻找我忘记加的右引号

00:19:51.425 --> 00:19:56.396 align:middle
所以在ES6引入这一新的模板文本
语法之后 我内心的喜悦是无以言表的

00:19:57.130 --> 00:20:00.467 align:middle
我们可以用它建立字符串
一些特定的字符串

00:19:57.130 --> 00:20:00.467 align:middle
我们可以用它建立字符串
一些特定的字符串

00:20:00.534 --> 00:20:03.937 align:middle
可以用反引号字符来取代
常规的引用字符串

00:20:04.538 --> 00:20:07.274 align:middle
当我们那样做的时候

00:20:07.741 --> 00:20:10.944 align:middle
那些容易遗落的美元符号 花括号等

00:20:11.144 --> 00:20:13.814 align:middle
就能自动生成了

00:20:14.581 --> 00:20:18.018 align:middle
你甚至可以在语法内部操作

00:20:18.318 --> 00:20:19.887 align:middle
就像在这里我对两个数字求

00:20:20.187 --> 00:20:22.956 align:middle
和它们会得到相同的输出

00:20:23.390 --> 00:20:26.927 align:middle
但我发现第二种更容易阅读

00:20:27.261 --> 00:20:29.363 align:middle
我已经完全被它征服了

00:20:29.429 --> 00:20:31.665 align:middle
现在我写的东西全部都会用这种语法

00:20:31.798 --> 00:20:32.633 align:middle
我爱它

00:20:35.302 --> 00:20:38.438 align:middle
今年引入的另一种能让
写代码变得更容易的方法

00:20:39.106 --> 00:20:41.041 align:middle
是和对象文字创建有关的

00:20:41.408 --> 00:20:43.544 align:middle
你经常会面对这样的情况

00:20:43.610 --> 00:20:45.879 align:middle
我们有一些发生器函数

00:20:46.213 --> 00:20:48.148 align:middle
包含了我们想用的变量名

00:20:48.749 --> 00:20:54.321 align:middle
实际上这些变量名
是我们想赋予给新建对象文字的名字

00:20:54.555 --> 00:20:58.258 align:middle
所以你会傻傻得重复
发送名字 引号 名字

00:20:58.325 --> 00:21:00.060 align:middle
以及类别 引号 类别

00:20:58.325 --> 00:21:00.060 align:middle
以及类别 引号 类别

00:21:00.761 --> 00:21:02.229 align:middle
人们已经习以为常了

00:21:02.663 --> 00:21:05.933 align:middle
但当ES6的设计者引进了一种简写法

00:21:06.934 --> 00:21:09.937 align:middle
在这里你可以用变量名创建对象文字

00:21:10.137 --> 00:21:12.940 align:middle
你不需要提供属性名

00:21:13.006 --> 00:21:15.175 align:middle
它将会使用你所提供的值的名字

00:21:16.143 --> 00:21:18.545 align:middle
在web检查器模式下

00:21:18.612 --> 00:21:21.381 align:middle
我们可以用它来避免上百次重复

00:21:22.149 --> 00:21:24.251 align:middle
你会发现那真是太有用了

00:21:24.318 --> 00:21:26.119 align:middle
我确定 如果你看一下自己写的代码

00:21:26.186 --> 00:21:28.322 align:middle
你会发现许多可以适用的场景

00:21:31.525 --> 00:21:35.762 align:middle
如今JavaScript拥有强大的
面向对象的软件设计功能

00:21:36.463 --> 00:21:38.532 align:middle
但它基于原型的语法

00:21:38.599 --> 00:21:43.103 align:middle
对于那些从Swift或者
C++或者其他类似的语言

00:21:43.170 --> 00:21:45.873 align:middle
转到JavaScript的人来说

00:21:46.173 --> 00:21:48.475 align:middle
似乎有些难以理解

00:21:49.643 --> 00:21:54.314 align:middle
这里我举一个用标准的原型语法
写出的多边形类的简单例子

00:21:55.015 --> 00:21:58.352 align:middle
在ES6中 引入了一种新的语法

00:21:59.353 --> 00:22:03.423 align:middle
一种基于对象和类的语法

00:21:59.353 --> 00:22:03.423 align:middle
一种基于对象和类的语法

00:22:03.490 --> 00:22:06.460 align:middle
看起来和C++或者Swift很像

00:22:07.227 --> 00:22:09.463 align:middle
允许我们把所有东西封装在一起

00:22:09.963 --> 00:22:13.834 align:middle
它变得更加好读
也更容易看出事物之间的关联

00:22:15.102 --> 00:22:19.306 align:middle
这种类语法使用一个特殊的
函数以及一个构造器

00:22:19.773 --> 00:22:22.242 align:middle
为我们进行对象初始化

00:22:22.943 --> 00:22:26.313 align:middle
我们可以把类中的方法
定义成对象的一部分

00:22:28.582 --> 00:22:33.453 align:middle
同时它支持继承我们可以
通过扩展关键字从已有的对象中继承

00:22:34.488 --> 00:22:39.660 align:middle
在继承的时候我们想确保
使用超算符对母类进行初始化

00:22:41.028 --> 00:22:44.932 align:middle
我们可以像在其他面向
对象的语言中那样对方法重载

00:22:45.465 --> 00:22:47.601 align:middle
现在它甚至可以支持静态方法

00:22:47.668 --> 00:22:50.204 align:middle
所以你可以把方法定义在

00:22:50.270 --> 00:22:53.574 align:middle
你不需要使用特定实例对象的类中

00:22:54.842 --> 00:22:58.078 align:middle
最后 这种新的类语法

00:22:58.145 --> 00:23:01.515 align:middle
是和已有的基于原型的语法完全兼容的

00:22:58.145 --> 00:23:01.515 align:middle
是和已有的基于原型的语法完全兼容的

00:23:01.582 --> 00:23:05.586 align:middle
你可以直接使用这种新
语法对基于原型的代码进行扩展

00:23:05.719 --> 00:23:08.155 align:middle
不用重新写任何东西

00:23:08.856 --> 00:23:12.559 align:middle
我认为这是一种巨大的优势
它是一种你可以立即采用的东西

00:23:15.596 --> 00:23:18.832 align:middle
以上就是我对JavaScript
更新功能的简短介绍

00:23:19.099 --> 00:23:22.369 align:middle
我们今年做了许多关于
JavaScript的成果

00:23:22.603 --> 00:23:27.741 align:middle
所以我诚挚地建议你们下载 El
Capitan开发软件试着用一下

00:23:31.345 --> 00:23:34.014 align:middle
我们已经做了许多年的CSS

00:23:34.081 --> 00:23:38.352 align:middle
从许多造成臃肿式规则的
模式中一路走来

00:23:40.988 --> 00:23:45.926 align:middle
今年 我们实施了一些新的
CSS标准旨在与此抗争

00:23:46.527 --> 00:23:48.395 align:middle
使得它的风格更加简单易实现

00:23:50.631 --> 00:23:52.766 align:middle
这是此类演讲中经常会有的一个主题

00:23:52.833 --> 00:23:55.536 align:middle
但我并没有时间讲完我们
今年做的所有成果

00:23:55.602 --> 00:23:59.339 align:middle
anylink、解释占位符、
语言都仅仅是其中的一部分

00:23:59.673 --> 00:24:02.309 align:middle
但我希望你们可以拿到
我们的开发器种子 自己尝试一下

00:23:59.673 --> 00:24:02.309 align:middle
但我希望你们可以拿到
我们的开发器种子 自己尝试一下

00:24:04.878 --> 00:24:05.779 align:middle
所以我想先讲一下

00:24:05.846 --> 00:24:08.348 align:middle
关于最近的一些无前缀的
属性和值的问题

00:24:08.849 --> 00:24:12.019 align:middle
我们对今年这些标准的适用性

00:24:12.085 --> 00:24:13.987 align:middle
以及对一些功能的稳定性都非常满意

00:24:14.188 --> 00:24:17.758 align:middle
所以我们实现了它们的无前缀化
现在你可以在本机格式使用了

00:24:18.592 --> 00:24:21.495 align:middle
同时我们也将继续支持它们在
WebKit里的有前缀格式

00:24:21.562 --> 00:24:23.230 align:middle
所以你现有的网站也能继续使用

00:24:23.497 --> 00:24:25.966 align:middle
我们建议你们切换成
新的WebKit版本

00:24:26.567 --> 00:24:30.370 align:middle
或者切换成能减少你的新代码中
字符串数目的WebKit版本

00:24:32.806 --> 00:24:36.944 align:middle
我知道把这一令人振奋的无前
缀滑动做到顶端是很难的

00:24:37.377 --> 00:24:38.478 align:middle
但是我要尝试一下

00:24:40.380 --> 00:24:44.151 align:middle
这是一种很常见的需求

00:24:44.218 --> 00:24:46.353 align:middle
来识别出你的网址是否正在被

00:24:46.420 --> 00:24:48.021 align:middle
一个支持特定功能的浏览器使用

00:24:48.288 --> 00:24:50.190 align:middle
你是不是会选择使用特定的功能

00:24:50.257 --> 00:24:52.326 align:middle
这取决于浏览器可以做些什么

00:24:56.630 --> 00:24:58.765 align:middle
让我们举个例子

00:24:58.832 --> 00:25:02.369 align:middle
我想对一个网页使用首字下
沉的样式为了实现这样的效果

00:24:58.832 --> 00:25:02.369 align:middle
我想对一个网页使用首字下
沉的样式为了实现这样的效果

00:25:02.803 --> 00:25:05.372 align:middle
我想用一个和那个"C"不同的字体

00:25:05.639 --> 00:25:09.409 align:middle
我想在它周围加间距和额外的填充

00:25:09.476 --> 00:25:11.211 align:middle
我希望它有不同的字号

00:25:12.880 --> 00:25:14.214 align:middle
让它看起来非常有特色

00:25:14.615 --> 00:25:16.717 align:middle
我可以通过WebKit的
首字处理来实现

00:25:16.783 --> 00:25:19.219 align:middle
这是今年WebKit
推出的另一个新功能

00:25:22.089 --> 00:25:24.958 align:middle
但是如果浏览我网页的
浏览器并不支持它

00:25:25.058 --> 00:25:30.230 align:middle
那是非常可怕的...
我的意思是说那是一大损失

00:25:30.531 --> 00:25:32.666 align:middle
如果我知道它的最终显示效果是这样

00:25:32.733 --> 00:25:35.669 align:middle
我将永远不会使用那种字体
我也不会在它旁边留间隔

00:25:35.903 --> 00:25:38.572 align:middle
如果我知道它并不能
呈现我想要的样子的话

00:25:38.839 --> 00:25:40.541 align:middle
我根本什么都不会去做

00:25:42.676 --> 00:25:45.979 align:middle
所以在以前 我们会用一些这样的代码

00:25:46.046 --> 00:25:48.282 align:middle
来测试浏览器 问它

00:25:48.582 --> 00:25:50.250 align:middle
欸 你能支持首字放大的格式吗？

00:25:50.317 --> 00:25:52.653 align:middle
如果你能支持我可以做一些额外的工作

00:25:52.719 --> 00:25:54.888 align:middle
遍历DOM 找到一些
我想添加样式的元素

00:25:54.955 --> 00:25:56.823 align:middle
然后应用这些东西

00:25:57.958 --> 00:25:59.960 align:middle
好 那将需要运行大量的
JavaScript语句

00:26:00.027 --> 00:26:01.828 align:middle
或者导入大量的库来实现它

00:26:03.964 --> 00:26:05.165 align:middle
现在我们根本不需要那样做

00:26:05.699 --> 00:26:09.203 align:middle
今年WebKit支持@supports功能

00:26:09.670 --> 00:26:11.338 align:middle
它允许我们建立一个条件语句

00:26:11.572 --> 00:26:15.409 align:middle
只有当满足条件的时候

00:26:15.475 --> 00:26:16.743 align:middle
才会执行括号内的所有内容

00:26:16.810 --> 00:26:19.479 align:middle
所以在这个我想让WebKit
首字下沉的例子中

00:26:19.813 --> 00:26:24.685 align:middle
我可以把所有特殊样式
存进支持它的语句中

00:26:25.385 --> 00:26:28.388 align:middle
所以当我用一个并不支持
WebKit首字放大的浏览器

00:26:28.455 --> 00:26:29.423 align:middle
点进一个网址的时候

00:26:31.158 --> 00:26:36.163 align:middle
我得到一个比较清淡的效果

00:26:36.463 --> 00:26:40.000 align:middle
但看起来很好它非常得
易读并且看起来不错

00:26:40.501 --> 00:26:42.769 align:middle
如果有人用Safari进入这个网址

00:26:43.303 --> 00:26:45.739 align:middle
他们会看到首字下沉

00:26:46.707 --> 00:26:47.574 align:middle
多么奇妙！

00:26:51.011 --> 00:26:53.180 align:middle
我想讲一些关于减少代码重复的内容

00:26:54.648 --> 00:26:57.084 align:middle
这是一些web检查器实际中的代码

00:26:57.551 --> 00:27:00.454 align:middle
好 我为幻灯片清理它一下

00:26:57.551 --> 00:27:00.454 align:middle
好 我为幻灯片清理它一下

00:27:00.521 --> 00:27:03.457 align:middle
我们有许多像这样的例子

00:27:03.857 --> 00:27:06.793 align:middle
默认值和一系列的类都是...

00:27:06.994 --> 00:27:09.196 align:middle
同一群组的一部分

00:27:09.363 --> 00:27:11.365 align:middle
我们想给它们应用一些样式

00:27:13.800 --> 00:27:16.270 align:middle
但我们在一遍遍得重复默认值

00:27:16.336 --> 00:27:19.840 align:middle
又在其他类中把上述过程重复了几十次

00:27:20.073 --> 00:27:22.609 align:middle
在其他样式中重复了几百次

00:27:23.010 --> 00:27:25.679 align:middle
它最终变得超出负荷

00:27:26.980 --> 00:27:30.884 align:middle
所以CSS4的开发者们约定

00:27:31.051 --> 00:27:33.887 align:middle
和创造了匹配伪类

00:27:34.488 --> 00:27:40.127 align:middle
它所做的是允许我们编程定义出

00:27:40.661 --> 00:27:42.362 align:middle
默认值所有可能的排列

00:27:42.429 --> 00:27:47.067 align:middle
比如像一个类和一系列
选择符的排列情况

00:27:47.801 --> 00:27:51.371 align:middle
这就取代了那些无谓的重复

00:27:52.906 --> 00:27:54.241 align:middle
而是用一行程序来替换它们

00:27:55.242 --> 00:27:59.346 align:middle
和写代码相比我唯一更喜欢
做的事情就是删除代码

00:27:59.413 --> 00:28:01.281 align:middle
这真是太奇妙了！

00:27:59.413 --> 00:28:01.281 align:middle
这真是太奇妙了！

00:28:01.348 --> 00:28:05.185 align:middle
因为我们可以避免大量的重复代码

00:28:05.252 --> 00:28:07.421 align:middle
我们实现这些改变
做到避免重复的那一天

00:28:07.487 --> 00:28:09.890 align:middle
是web检查器史上值得纪念的日子

00:28:12.960 --> 00:28:15.762 align:middle
这些是今年CSS的一些新功能

00:28:16.864 --> 00:28:20.601 align:middle
我们也已经完成了
关于Safari的提高方面的讨论

00:28:23.470 --> 00:28:25.739 align:middle
所以我现在想切换一下话题

00:28:25.806 --> 00:28:29.109 align:middle
再谈论一点如何在OS X
和IOS上创造出奇特的体验

00:28:29.977 --> 00:28:33.213 align:middle
在座的各位中有多少

00:28:33.280 --> 00:28:36.350 align:middle
拥有仅面向桌面的网站？

00:28:36.917 --> 00:28:38.752 align:middle
或者你们专门为桌面做过什么东西么？

00:28:39.152 --> 00:28:39.987 align:middle
一两个

00:28:40.554 --> 00:28:43.757 align:middle
其他人更多得可能
是做面向移动端的东西

00:28:43.824 --> 00:28:45.192 align:middle
也就是IOS和Safari

00:28:46.393 --> 00:28:51.832 align:middle
所以我的演讲的最大目的
就是希望你们可以使用

00:28:51.899 --> 00:28:56.837 align:middle
本次提到过的
这些新开发出来的web标准功能

00:28:56.904 --> 00:28:59.273 align:middle
我希望能使你们接受这些

00:28:59.706 --> 00:29:01.942 align:middle
特别为Mac和IOS端设计的东西

00:28:59.706 --> 00:29:01.942 align:middle
特别为Mac和IOS端设计的东西

00:29:02.276 --> 00:29:08.148 align:middle
通过这些技术的支持你会让用户惊喜

00:29:08.215 --> 00:29:11.218 align:middle
在我们的整个生态系统中
和用户建立更紧密的联系

00:29:13.620 --> 00:29:17.191 align:middle
AirPlay是从IOS 4中
开始在IOS中上线的

00:29:17.257 --> 00:29:19.626 align:middle
IOS 4之后我们在
Safari中对它提供支持

00:29:21.228 --> 00:29:25.032 align:middle
但是今年 我们开放AirPlay
的平台中包括Safari

00:29:25.165 --> 00:29:29.970 align:middle
和OS X 它允许用户

00:29:30.804 --> 00:29:34.007 align:middle
直接在手机中使用Apple TV

00:29:34.441 --> 00:29:38.212 align:middle
它的API和在IOS中引入的相同

00:29:38.278 --> 00:29:40.881 align:middle
所以如果你从2013年
就开始使用这一支持

00:29:40.948 --> 00:29:42.249 align:middle
你就已经完成了这个工作

00:29:42.449 --> 00:29:45.619 align:middle
或者如果你使用我们的媒体控制插件

00:29:46.053 --> 00:29:47.354 align:middle
你现在就已经得到了相关支持

00:29:47.621 --> 00:29:50.724 align:middle
但如果你不是的话

00:29:50.791 --> 00:29:54.394 align:middle
我建议你看看我们2013的WWDC
在那里我们提到了许多细节

00:29:54.461 --> 00:29:56.096 align:middle
关于如何支持AirPlay协议

00:30:00.467 --> 00:30:01.602 align:middle
多重任务处理

00:30:01.668 --> 00:30:04.605 align:middle
昨天我们在iPad上看到
多重任务处理的时候不是觉得很酷吗？

00:30:06.740 --> 00:30:08.909 align:middle
在昨天之前你有一个好主意

00:30:08.976 --> 00:30:12.246 align:middle
当你在iPad上浏览内容的时候
你想到了那个好主意

00:30:12.646 --> 00:30:14.248 align:middle
你们曾经都可以占用整个屏幕

00:30:14.448 --> 00:30:17.918 align:middle
但是现在分配给你们来
演示内容的屏幕只有三分之二

00:30:17.985 --> 00:30:22.523 align:middle
或者一半 或者三分之一

00:30:24.157 --> 00:30:27.628 align:middle
这种设计已经变得非常重要

00:30:28.428 --> 00:30:30.964 align:middle
让用户来控制视图的尺寸

00:30:31.698 --> 00:30:34.568 align:middle
iPad现在看起来更像是桌面了

00:30:37.037 --> 00:30:39.406 align:middle
这是一种非常重要 非常有价值的设计

00:30:39.473 --> 00:30:44.378 align:middle
我们明天会用整个
演讲来介绍它 在同一时间同一地点

00:30:45.045 --> 00:30:48.015 align:middle
既然你们今天都能来到这里
我知道你们一定能做到早起

00:30:48.282 --> 00:30:50.751 align:middle
我建议你们明天来听一下这个讲座

00:30:50.817 --> 00:30:53.620 align:middle
“使用Safari对响应式web
设计进行传输与调试”

00:30:53.687 --> 00:30:56.323 align:middle
它将会介绍Safari在web
检查器中新加的一些工具和功能

00:30:56.390 --> 00:30:59.259 align:middle
当你尝试使用这些风格的时候

00:30:59.326 --> 00:31:01.595 align:middle
它可以带来许多便利

00:30:59.326 --> 00:31:01.595 align:middle
它可以带来许多便利

00:31:02.029 --> 00:31:04.264 align:middle
这里也将会有一个关于
多重任务处理的讲座

00:31:04.331 --> 00:31:08.235 align:middle
针对一些在iPad和IOS 9中的
基于媒体的app也非常有趣

00:31:11.471 --> 00:31:13.874 align:middle
我们昨天讲了
picture-in-picture

00:31:16.143 --> 00:31:18.412 align:middle
iPad是一个浏览内容的好工具

00:31:19.313 --> 00:31:21.915 align:middle
在昨天之前你们有一个好主意

00:31:21.982 --> 00:31:25.786 align:middle
就是你们的内容
可以通过这种全屏模式来浏览

00:31:26.820 --> 00:31:30.724 align:middle
但现在我们有一个新的方式
也就是我们的picture-in-picture模式

00:31:31.258 --> 00:31:34.127 align:middle
让你可以把孩子们的
照片压缩进一个小箱子

00:31:34.194 --> 00:31:36.630 align:middle
放在你日历中巨大的空角落里

00:31:41.268 --> 00:31:43.470 align:middle
这是一个很强大的功能

00:31:43.637 --> 00:31:47.674 align:middle
我们拥有--我们把它
定义为呈现模式下的WebKit

00:31:47.741 --> 00:31:50.110 align:middle
我们支持你们所熟悉的全屏

00:31:51.111 --> 00:31:55.048 align:middle
内联了你们那些可以在页面本身

00:31:56.583 --> 00:31:59.586 align:middle
以及在picture-in-picture
也就是我们的新模式中展出的内容

00:32:00.153 --> 00:32:03.090 align:middle
所以这里有一系列你们
可能要担心的问题

00:32:05.926 --> 00:32:10.330 align:middle
WebKit缺省WebKit媒体控制
会支持箱子外面的picture-in-picture模式

00:32:10.898 --> 00:32:12.533 align:middle
但如果你想写自己的媒体控制

00:32:12.599 --> 00:32:15.903 align:middle
你需要使用呈现模式下的
API来控制它们

00:32:16.436 --> 00:32:19.973 align:middle
在我们的开发者文件中介绍了

00:32:20.040 --> 00:32:22.843 align:middle
怎样把它们用于你自己的网页中

00:32:23.844 --> 00:32:25.512 align:middle
这里有一些你需要考虑的问题

00:32:26.513 --> 00:32:30.217 align:middle
当一个查看器开始观察

00:32:30.284 --> 00:32:32.352 align:middle
你在全屏视频模式的内容时

00:32:32.619 --> 00:32:34.655 align:middle
页面可能会跳出由
播放窗口完全遮盖的模式

00:32:34.721 --> 00:32:37.391 align:middle
因为查看器能够退出全屏模式

00:32:37.457 --> 00:32:40.027 align:middle
并在你不知情的情况下变成
picture-in-picture模式

00:32:40.093 --> 00:32:42.763 align:middle
所以如果你有机会关掉特定的功能

00:32:42.829 --> 00:32:45.432 align:middle
或者在视频播放的时候
把网页内容隐藏起来

00:32:45.832 --> 00:32:49.269 align:middle
当它们变成picture-in-picture模式时
可能看起来就不太对了

00:32:49.403 --> 00:32:52.072 align:middle
由于媒体可以在非常小的窗口下播放

00:32:52.372 --> 00:32:55.742 align:middle
我们强烈建议你们用
HTTP实时流媒体技术

00:32:55.876 --> 00:32:57.611 align:middle
或者用HLS传输媒体流

00:32:58.345 --> 00:33:03.483 align:middle
HLS允许我们的媒体引擎选择位编码

00:32:58.345 --> 00:33:03.483 align:middle
HLS允许我们的媒体引擎选择位编码

00:33:03.550 --> 00:33:08.055 align:middle
可以根据播放窗口的大小来
自动匹配编码率

00:33:08.388 --> 00:33:12.292 align:middle
它也考虑进设备中的
网络情况和电量情况

00:33:12.693 --> 00:33:16.296 align:middle
通过使用它你将能保证

00:33:16.730 --> 00:33:18.899 align:middle
最好的用户体验

00:33:18.966 --> 00:33:22.135 align:middle
因为它照顾到了许多细节

00:33:23.370 --> 00:33:26.840 align:middle
在星期三我们可以看到令人惊叹的关于
在iPad上的IOS 9系统

00:33:26.907 --> 00:33:28.942 align:middle
基于媒体的app中
进行多任务处理的内容

00:33:30.010 --> 00:33:31.778 align:middle
如果你今年并没有听过我太多讲座

00:33:31.845 --> 00:33:34.414 align:middle
你可以看看我和Jer
去年讲高级web媒体的视频

00:33:34.481 --> 00:33:37.751 align:middle
我们提到了许多HLS的细节

00:33:39.186 --> 00:33:41.722 align:middle
最后 我想谈论一些
令我非常赞叹的东西

00:33:42.022 --> 00:33:43.657 align:middle
我们的Force Touch触控板

00:33:44.825 --> 00:33:47.261 align:middle
在三月的时候我们兴奋得展示了

00:33:47.327 --> 00:33:49.229 align:middle
使用了这一新硬件的新产品

00:33:50.097 --> 00:33:52.966 align:middle
它让我们可以识别出第二级的点击

00:33:53.066 --> 00:33:55.769 align:middle
我们叫做Force Click
我们真的为此感到兴奋

00:33:57.871 --> 00:34:01.642 align:middle
在添加新的用户交互功能的过程中
我们获得了许多乐趣

00:33:57.871 --> 00:34:01.642 align:middle
在添加新的用户交互功能的过程中
我们获得了许多乐趣

00:34:01.708 --> 00:34:06.880 align:middle
像这种字典模式向上看
它向我们介绍了“氟橡胶”是什么

00:34:07.514 --> 00:34:12.786 align:middle
我们添加了一个看链接后面的
内容的新方式不需要离开网页

00:34:13.219 --> 00:34:15.789 align:middle
我知道你们都能想到更好的方法

00:34:15.856 --> 00:34:18.425 align:middle
来把这个硬件应用在网页内容中

00:34:18.559 --> 00:34:21.261 align:middle
所以我们想要给你们最大化的
对这个硬件的接触机会

00:34:21.328 --> 00:34:23.931 align:middle
让它出现在你们自己的网页中
为你们提供服务

00:34:25.431 --> 00:34:27.801 align:middle
让我来简单介绍一下它的具体功能

00:34:28.402 --> 00:34:31.237 align:middle
对于一个普通的触控板

00:34:31.304 --> 00:34:33.841 align:middle
当用户用一定的力下压的时候

00:34:34.474 --> 00:34:36.342 align:middle
我们可以视作鼠标键下沉

00:34:36.877 --> 00:34:40.112 align:middle
当用户保持下压 然后弹起来

00:34:40.681 --> 00:34:43.083 align:middle
我们也从那个压力中释放出来

00:34:43.350 --> 00:34:46.119 align:middle
这视作鼠标键复原
而那个过程可以视作一次单击

00:34:47.621 --> 00:34:52.259 align:middle
我们扩展了这个模型用它来
支撑Force Click的操作

00:34:52.592 --> 00:34:55.696 align:middle
通过用WebKit给所有的
鼠标行为都加入一个力度属性

00:34:55.795 --> 00:34:58.298 align:middle
它能告诉你在触控板上
使用了多大的力度

00:34:58.899 --> 00:35:02.002 align:middle
同时我们也能添加一系列

00:34:58.899 --> 00:35:02.002 align:middle
同时我们也能添加一系列

00:35:02.069 --> 00:35:04.671 align:middle
你可以注册的新事件 来处理它

00:35:06.406 --> 00:35:08.275 align:middle
让我们返回到最后一张幻灯片

00:35:08.342 --> 00:35:10.177 align:middle
在这个我们曾经抬起 放下鼠标的地方

00:35:10.511 --> 00:35:13.380 align:middle
我们触发了一个鼠标的力
这可以启动事件

00:35:13.680 --> 00:35:18.785 align:middle
这是调用阻止默认行为到
事件本身的一次好机会

00:35:18.852 --> 00:35:21.088 align:middle
它会防止我们调用字典
或者通过链接预览

00:35:21.154 --> 00:35:23.924 align:middle
来查询逻辑如果你想自己做的话

00:35:26.527 --> 00:35:28.795 align:middle
在放下鼠标之后

00:35:28.996 --> 00:35:32.032 align:middle
如果用户继续按力度达到了第二个等级

00:35:32.099 --> 00:35:34.201 align:middle
我们把它视作一次
force click

00:35:34.268 --> 00:35:36.170 align:middle
我们启动了这一鼠标向下按的事件

00:35:37.871 --> 00:35:40.407 align:middle
当用户用力来让鼠标复原时

00:35:40.474 --> 00:35:42.042 align:middle
我们收到鼠标上移的力

00:35:42.342 --> 00:35:45.212 align:middle
所以 这一机制和
鼠标上下点击是一样的

00:35:45.279 --> 00:35:47.948 align:middle
我们也有鼠标按下 鼠标抬起的过程

00:35:49.650 --> 00:35:53.086 align:middle
在这整个过程中

00:35:53.287 --> 00:35:56.423 align:middle
在鼠标上升下按时
我们发出力来改变状态

00:35:56.490 --> 00:35:59.993 align:middle
我们这样做是为了用户
不用通过移动手指

00:36:00.227 --> 00:36:01.995 align:middle
就能改变压力

00:36:02.462 --> 00:36:04.064 align:middle
改变他们用力的量

00:36:04.131 --> 00:36:07.534 align:middle
所以这里并没有设置
可以记录鼠标移动的力的事件

00:36:08.836 --> 00:36:13.240 align:middle
注意我们也定义了两个图层和两个常量

00:36:13.307 --> 00:36:14.975 align:middle
来把力的等级定义为

00:36:15.042 --> 00:36:17.277 align:middle
常规点击和用力点击

00:36:17.611 --> 00:36:23.016 align:middle
我们强烈建议你们可以使用
这些常量来代替捕捉数值

00:36:23.317 --> 00:36:25.385 align:middle
因为当规范成熟时这些可能会发生变化

00:36:26.920 --> 00:36:29.489 align:middle
所以 在你们自己的网站中
展示一下怎样利用它们吧

00:36:30.157 --> 00:36:32.259 align:middle
我将愉快得再次邀请克里斯上台

00:36:33.160 --> 00:36:34.127 align:middle
给我们做另一个演示

00:36:39.099 --> 00:36:41.068 align:middle
好 感谢布伦特

00:36:41.401 --> 00:36:44.538 align:middle
像刚刚布伦特介绍的
Force Touch那样

00:36:44.605 --> 00:36:47.508 align:middle
这里有许多很酷的东西供你尝试
它们可以切实提升你的网站质量

00:36:47.741 --> 00:36:52.946 align:middle
如果你们记得 我们之前看过的
那个演示我们点进这个覆叠图层

00:36:53.013 --> 00:36:54.982 align:middle
可以选择自己“最喜欢”的图片

00:36:55.649 --> 00:36:58.085 align:middle
那是非常容易的但也是一项进步

00:36:58.151 --> 00:37:00.387 align:middle
我认为如果我们真的可以通过

00:36:58.151 --> 00:37:00.387 align:middle
我认为如果我们真的可以通过

00:37:00.454 --> 00:37:03.123 align:middle
Force Touch
触控板提升用户体验

00:37:03.190 --> 00:37:05.692 align:middle
我们就能给他们创造更多的交互体验

00:37:07.027 --> 00:37:10.130 align:middle
所以当我在台下的时候

00:37:10.197 --> 00:37:14.434 align:middle
我改动了几处代码我所做的是
扩展了界限点masonry图片库

00:37:14.501 --> 00:37:16.203 align:middle
来创建一个使用力度提升的图片库

00:37:16.436 --> 00:37:18.472 align:middle
我们将要用它来添加
一些和力度有关的事件

00:37:18.539 --> 00:37:21.175 align:middle
再做一些关于力度变化的动画

00:37:22.342 --> 00:37:23.443 align:middle
有几点需要指出

00:37:23.510 --> 00:37:25.679 align:middle
其中最重要的一条是我们
可以在鼠标的事件数据中

00:37:25.746 --> 00:37:27.981 align:middle
得到最小力和最大力的数值

00:37:28.315 --> 00:37:31.718 align:middle
而鼠标事件数据就是我们在
用力让鼠标上移下移时记录的力

00:37:32.152 --> 00:37:33.754 align:middle
正如布伦特刚刚说过的那样

00:37:34.855 --> 00:37:40.394 align:middle
我要讲的另一点就是
我们将要绑定一些事件侦听器

00:37:40.460 --> 00:37:43.630 align:middle
来侦听我们所绑定和更新的力度事件

00:37:44.131 --> 00:37:46.233 align:middle
我刚刚跳出了所要进行的事件

00:37:46.300 --> 00:37:48.535 align:middle
所以它现在什么也没做
我们要一步一步得开始

00:37:50.204 --> 00:37:53.073 align:middle
酷 首先 我想开始
给鼠标一个下按的力

00:37:53.207 --> 00:37:56.810 align:middle
在这个事件中我们要做的是
运行一下我写的这个程序

00:37:56.877 --> 00:37:58.645 align:middle
它可以在力值范围为真时被调用

00:37:58.979 --> 00:38:01.648 align:middle
这段程序所做的是在
页面中添加进CSS属性

00:37:58.979 --> 00:38:01.648 align:middle
这段程序所做的是在
页面中添加进CSS属性

00:38:01.715 --> 00:38:04.251 align:middle
来保证我们的CSS转场效果不会被

00:38:04.318 --> 00:38:06.486 align:middle
我们自己用JavaScript
写的动画所干扰

00:38:06.553 --> 00:38:09.189 align:middle
由于我们可以从改变
触控力度的事件中得到许多力度数据

00:38:09.256 --> 00:38:13.360 align:middle
我们不想它们互相干扰所以最基本
要确定的是转场中设置了很多东西

00:38:14.561 --> 00:38:17.931 align:middle
我们要做的下一件事就是
看看kit鼠标下压发生了什么变化

00:38:19.299 --> 00:38:20.734 align:middle
我们这里做了很少的事

00:38:20.801 --> 00:38:24.571 align:middle
事实上我们从WebKit里的这些
事件的力属度性值中获得力度数据

00:38:24.938 --> 00:38:29.476 align:middle
我们将要创建一个进程要看看最小力
和最大力的值之间的差距有多少

00:38:30.277 --> 00:38:32.980 align:middle
我们实际上将要用动画演示
在最大最小值之间的一些东西

00:38:33.046 --> 00:38:35.582 align:middle
所以你将看到
我们将会回来做一些有趣的事

00:38:36.517 --> 00:38:38.485 align:middle
我们在这个过程中做的最基础的事情

00:38:38.585 --> 00:38:41.488 align:middle
可以说是我们选出了“最喜欢”的图片
可以说是我们做完了动画

00:38:43.357 --> 00:38:44.691 align:middle
当我们返回并且更新

00:38:45.559 --> 00:38:48.128 align:middle
如果你看着这张照片
你会看到当我现在上下按压触摸板

00:38:48.195 --> 00:38:52.366 align:middle
我们实际上在根据我给
触控板的压力缩放这张照片

00:38:52.900 --> 00:38:54.868 align:middle
这真的很酷 非常具有交互性

00:38:54.935 --> 00:38:56.270 align:middle
它添加了一个新的图层

00:38:57.437 --> 00:38:58.405 align:middle
在我这样下压的时候

00:38:58.472 --> 00:39:01.408 align:middle
你会看到这里出现了一个心形
意味着我对这张照片选择了“喜欢”

00:38:58.472 --> 00:39:01.408 align:middle
你会看到这里出现了一个心形
意味着我对这张照片选择了“喜欢”

00:39:01.475 --> 00:39:03.010 align:middle
但事实上我的手指还没有落下

00:39:03.277 --> 00:39:06.580 align:middle
当我上拉的时候你会看到
我们进入了覆叠视图

00:39:06.847 --> 00:39:08.649 align:middle
那可能不是我们想要的效果

00:39:08.715 --> 00:39:10.951 align:middle
而这一点击事件依旧在执行

00:39:11.018 --> 00:39:13.887 align:middle
那是因为我们并没有阻止
任何浏览器中的默认行为

00:39:14.321 --> 00:39:17.391 align:middle
为了那样做 我们事实上刚刚
返回添加了一行快速代码

00:39:18.692 --> 00:39:21.061 align:middle
即将实现鼠标点击行为

00:39:21.428 --> 00:39:23.263 align:middle
我们基本上只是希望能默认阻止调用

00:39:23.630 --> 00:39:27.034 align:middle
一定要明白OS交互系统
并不会和开发者们进行交互

00:39:27.100 --> 00:39:29.670 align:middle
你能得到全部的控制权

00:39:31.405 --> 00:39:33.640 align:middle
所以如果我们返回 可以再试一遍

00:39:33.874 --> 00:39:36.476 align:middle
在我们的力度达到这个等级之后
什么都不会发生

00:39:36.944 --> 00:39:38.679 align:middle
我们必须再重新设置一遍

00:39:38.745 --> 00:39:40.747 align:middle
在此之前 我们必须移除

00:39:40.814 --> 00:39:43.951 align:middle
用JavaScript设置好的
全部样式确认一切都能真的顺畅运行

00:39:46.053 --> 00:39:48.121 align:middle
所以我们可以只填充进
鼠标单击的那部分

00:39:49.556 --> 00:39:53.126 align:middle
我们这样做的目的是为了
移除许多之前设置的样式

00:39:53.193 --> 00:39:55.963 align:middle
要保证所有加进去的
CSS属性都已经被删除

00:39:56.029 --> 00:39:58.198 align:middle
恢复成了默认模式
就像我们从来没有碰过它一样

00:40:00.400 --> 00:40:01.735 align:middle
好 用这个新的交互界面

00:40:01.802 --> 00:40:06.273 align:middle
我们可以在照片上徘徊
打开动画 就像这样

00:40:08.342 --> 00:40:11.078 align:middle
我们得到了添加“喜欢”的照片的功能

00:40:11.144 --> 00:40:14.181 align:middle
我们依然可以通过一次普通的
鼠标点击来进入图片库

00:40:14.615 --> 00:40:16.950 align:middle
我认为这真的很酷我也很兴奋能看到

00:40:17.017 --> 00:40:18.652 align:middle
你们用这个新技术来做些什么

00:40:19.186 --> 00:40:21.321 align:middle
现在 我将重新有请布伦特上台
谢谢大家

00:40:26.727 --> 00:40:27.561 align:middle
感谢克里斯

00:40:28.795 --> 00:40:32.833 align:middle
我觉得你们也会赞同这个硬件的使用
会成为一个非常伟大的方式

00:40:34.301 --> 00:40:38.972 align:middle
我想要介绍几个使用Force
Touch触控板的绝佳实例

00:40:39.673 --> 00:40:41.775 align:middle
希望你们能经常使用鼠标力常量

00:40:41.875 --> 00:40:44.111 align:middle
和并不难编码的数字值

00:40:44.178 --> 00:40:48.882 align:middle
因为我们希望它们可以在
导航的过程中直接改变

00:40:50.017 --> 00:40:52.486 align:middle
使这个功能更加完整

00:40:53.120 --> 00:40:56.723 align:middle
请记住 遗憾的是并不是所有的用户
都有Force Touch硬件

00:40:57.090 --> 00:41:01.728 align:middle
所以我们可以把它视作一个捷径

00:40:57.090 --> 00:41:01.728 align:middle
所以我们可以把它视作一个捷径

00:41:01.795 --> 00:41:03.864 align:middle
或者是给拥有这个软件的
用户的额外福利

00:41:04.164 --> 00:41:06.400 align:middle
用它来驱动动画或者给内容提供一些

00:41:06.466 --> 00:41:08.669 align:middle
你也可以通过其他方式
来实现的更简便的方式

00:41:10.737 --> 00:41:14.708 align:middle
这将在Mac和IOS中
带来令人惊喜的体验

00:41:16.577 --> 00:41:19.179 align:middle
这也是今天演讲中的主体

00:41:19.513 --> 00:41:21.181 align:middle
我想做几点总结

00:41:22.149 --> 00:41:24.351 align:middle
我们谈论了背景过滤器

00:41:24.418 --> 00:41:28.088 align:middle
这是一个很神奇的硬件方式
能加速你网站上的背景过滤效果

00:41:28.455 --> 00:41:30.157 align:middle
滚动停止点使你

00:41:31.158 --> 00:41:34.528 align:middle
用几行CSS就实现平铺滚动

00:41:35.395 --> 00:41:38.665 align:middle
我们也探讨了JavaScript
里令人惊喜的的新的类语法

00:41:39.399 --> 00:41:42.736 align:middle
CSS中的@supports 函数
可以用来封装样式

00:41:43.337 --> 00:41:47.708 align:middle
并且拥有一些仅当
特定功能可用时才被执行的样式

00:41:48.442 --> 00:41:52.212 align:middle
我们谈论了一点关于从Safari
变到OS X里的AirPlay

00:41:52.746 --> 00:41:56.216 align:middle
以及picture-in-picture
还有IOS多重任务处理

00:41:56.283 --> 00:41:59.887 align:middle
以及介绍了一些你可以去参加的演讲
还有这个新的Force Touch APU

00:42:01.655 --> 00:42:04.725 align:middle
想了解更多信息可以下载相关文档

00:42:04.791 --> 00:42:06.159 align:middle
我们欢迎大家

00:42:06.226 --> 00:42:09.730 align:middle
进入www.WebKit.org网站
关注WebKit项目

00:42:10.097 --> 00:42:12.533 align:middle
加入我们吧
看看我们在做些什么

00:42:12.599 --> 00:42:14.868 align:middle
突破黑暗看看明年

00:42:14.935 --> 00:42:17.037 align:middle
会出现一些什么新的功能先睹为快吧

00:42:18.505 --> 00:42:20.307 align:middle
对于一般的询问我建议你们

00:42:20.374 --> 00:42:22.543 align:middle
了解一下我们的WebKit宣传者

00:42:22.609 --> 00:42:24.311 align:middle
当你们有问题想要了解

00:42:24.811 --> 00:42:28.582 align:middle
或者你想传达给我们什么信息的时候

00:42:28.649 --> 00:42:30.150 align:middle
可以在WebKit团队中找他

00:42:31.285 --> 00:42:33.887 align:middle
谢谢你们今天早上来听我的演讲

00:42:33.954 --> 00:42:36.557 align:middle
希望你们能在这周的WWDC中
度过美好的时光

00:42:37.891 --> 00:42:38.725 align:middle
谢谢
