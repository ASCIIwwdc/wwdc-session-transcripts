WEBVTT

00:00:20.053 --> 00:00:25.192 align:middle
使用 ClockKit
建立Complications

00:00:31.765 --> 00:00:36.136 align:middle
嗨大家好我是伊莉莎
我旁边这位是保罗

00:00:36.737 --> 00:00:40.974 align:middle
我们将告诉你们什么是Complications
以及您如何来制作他们

00:00:45.012 --> 00:00:49.683 align:middle
所谓的Complications
是一些小信息件

00:00:49.750 --> 00:00:53.187 align:middle
就是在您的钟面上
显示正确的时间

00:00:54.888 --> 00:00:56.490 align:middle
在您看到的这个钟面上

00:00:57.057 --> 00:00:59.326 align:middle
如果我们把时间
从方程式中移出

00:01:00.861 --> 00:01:03.363 align:middle
剩下来的一切就叫做
Complications

00:01:04.665 --> 00:01:08.068 align:middle
所以这儿您看到的
都是建立OS系统但是

00:01:08.402 --> 00:01:12.873 align:middle
在Watch OS 2 里您可以开始为钟面
创造属于您的 Complications

00:01:13.607 --> 00:01:15.642 align:middle
我们将会告诉您该怎么做

00:01:16.510 --> 00:01:21.048 align:middle
我将会举例来
创建一个Complication

00:01:21.114 --> 00:01:24.117 align:middle
在一场足球比赛中

00:01:24.184 --> 00:01:26.820 align:middle
来显示即将到来的比赛

00:01:27.521 --> 00:01:30.057 align:middle
因此让我们看看...

00:01:30.524 --> 00:01:33.193 align:middle
你们已经建立的想象这样
一个Complication

00:01:33.694 --> 00:01:35.829 align:middle
它看起来像会去选择它

00:01:36.363 --> 00:01:38.665 align:middle
那么聚焦于中间的钟面

00:01:39.600 --> 00:01:41.668 align:middle
如果您是在用力触摸屏幕

00:01:44.071 --> 00:01:45.639 align:middle
您可以定制钟面

00:01:46.907 --> 00:01:48.842 align:middle
向右滑动可以让您

00:01:49.309 --> 00:01:52.346 align:middle
开始打造出您独特的
Complications

00:01:52.746 --> 00:01:54.348 align:middle
转到数字顶部

00:01:57.551 --> 00:01:58.752 align:middle
可以选出一个Complication

00:01:59.052 --> 00:02:00.988 align:middle
因此如果我们滚动到列表的结尾

00:01:59.052 --> 00:02:00.988 align:middle
因此如果我们滚动到列表的结尾

00:02:01.221 --> 00:02:06.059 align:middle
我们会看到我们尚未建成的
足球比赛Complication

00:02:06.593 --> 00:02:07.461 align:middle
我们可能选择它

00:02:08.127 --> 00:02:10.430 align:middle
我们能看到现场数据

00:02:10.497 --> 00:02:12.900 align:middle
显示在钟面上

00:02:13.300 --> 00:02:16.203 align:middle
您将如何提供数据

00:02:16.470 --> 00:02:18.338 align:middle
去安置这些
Complications

00:02:20.507 --> 00:02:21.708 align:middle
正如您面对面看到的

00:02:21.775 --> 00:02:25.345 align:middle
我们所有的时钟
都有一个一致的外观和感觉

00:02:25.412 --> 00:02:26.713 align:middle
正是这点

00:02:26.780 --> 00:02:30.184 align:middle
使得和钟表保持互动是愉快的
这正是我们想要做的

00:02:30.250 --> 00:02:33.187 align:middle
在保持那种一致性时

00:02:34.321 --> 00:02:38.258 align:middle
那些正在手表上运行的扩展

00:02:38.325 --> 00:02:41.695 align:middle
将会以文本和图片的形式

00:02:42.229 --> 00:02:44.464 align:middle
为这些Complications
提供数据

00:02:47.601 --> 00:02:51.371 align:middle
然后钟面实际上会以某种方式移动

00:02:51.438 --> 00:02:53.106 align:middle
以配合其他页面

00:02:56.410 --> 00:02:57.945 align:middle
因此如果我在

00:02:58.946 --> 00:03:01.815 align:middle
我的手表上安装了这种
Complications

00:02:58.946 --> 00:03:01.815 align:middle
我的手表上安装了这种
Complications

00:03:03.150 --> 00:03:05.085 align:middle
每次我举起手腕

00:03:05.152 --> 00:03:07.154 align:middle
我都会立马去看它

00:03:09.523 --> 00:03:12.025 align:middle
这是一个伟大的事情
这是伟大的事情之一

00:03:12.092 --> 00:03:13.794 align:middle
关于建立Complications

00:03:13.861 --> 00:03:15.762 align:middle
同时它也呈现了一种挑战

00:03:16.196 --> 00:03:17.464 align:middle
因为随着时间的流逝

00:03:17.531 --> 00:03:20.133 align:middle
在Complications
展示的信息需要更新

00:03:20.200 --> 00:03:21.835 align:middle
因为它是可见的

00:03:23.370 --> 00:03:25.506 align:middle
一旦您举起手腕

00:03:25.572 --> 00:03:26.673 align:middle
随着时间屏的打开

00:03:26.740 --> 00:03:29.710 align:middle
更新需求就已经发生了

00:03:31.311 --> 00:03:32.846 align:middle
如果您想一下

00:03:32.913 --> 00:03:35.015 align:middle
这个表可以有
五个Complications

00:03:35.082 --> 00:03:36.216 align:middle
展示在这个单独的钟面上

00:03:36.283 --> 00:03:38.919 align:middle
我们不可能有时间
把它们都开启

00:03:39.620 --> 00:03:40.854 align:middle
拉新数据

00:03:41.522 --> 00:03:44.424 align:middle
可能会涉及网络请求

00:03:44.825 --> 00:03:46.360 align:middle
或者让所有的人

00:03:46.426 --> 00:03:48.896 align:middle
都在屏幕上带着数据及时返回

00:03:49.363 --> 00:03:51.064 align:middle
来解决这个问题

00:03:51.131 --> 00:03:54.301 align:middle
我们正在进行的是
提前以时间轴的形式

00:03:54.635 --> 00:03:57.037 align:middle
为您的Complications
收集数据

00:03:57.738 --> 00:04:00.974 align:middle
因此你们要给我们
一个时间轴的数据

00:03:57.738 --> 00:04:00.974 align:middle
因此你们要给我们
一个时间轴的数据

00:04:02.342 --> 00:04:04.878 align:middle
时间线的多少取决于

00:04:04.945 --> 00:04:06.280 align:middle
您申请的数据密度

00:04:08.649 --> 00:04:11.552 align:middle
和我们一天内看手表的方式

00:04:12.252 --> 00:04:15.489 align:middle
每次我看它Complication
s就已经更新了

00:04:15.556 --> 00:04:18.058 align:middle
显示的是在那个时刻有意义的信息

00:04:22.796 --> 00:04:26.099 align:middle
现在
时间轴真的是一个非常强大的概念

00:04:26.166 --> 00:04:29.036 align:middle
保罗待会将会和我们谈论这个话题

00:04:29.303 --> 00:04:31.572 align:middle
但是我想提及它带给我们的
另一种形势

00:04:31.905 --> 00:04:34.341 align:middle
就是Time Travel的特点

00:04:34.842 --> 00:04:38.679 align:middle
Time Travel是一个我们
在Watch OS2里介绍的新特点

00:04:38.745 --> 00:04:41.782 align:middle
使您能够正确地转换表冠

00:04:41.849 --> 00:04:44.985 align:middle
在钟面您能够看到您的Complic
ations会是什么样子

00:04:45.052 --> 00:04:46.620 align:middle
它展示了一天当中的不同时间

00:04:46.687 --> 00:04:49.656 align:middle
因此您可以提前去看看
下一场比赛什么时候会开始

00:04:49.857 --> 00:04:54.127 align:middle
或者一个小时以前我参加了什么会议
诸如此类

00:04:54.661 --> 00:04:59.032 align:middle
因此为了看到手表是怎么和这个Com
plication工作的

00:04:59.333 --> 00:05:01.635 align:middle
这里没有多余的工作
您不得不去

00:04:59.333 --> 00:05:01.635 align:middle
这里没有多余的工作
您不得不去

00:05:01.702 --> 00:05:03.003 align:middle
做到这一点

00:05:03.070 --> 00:05:05.239 align:middle
通过数据线的形式提供您的数据

00:05:05.873 --> 00:05:09.510 align:middle
我们可以免费
使Time Travel成真

00:05:11.078 --> 00:05:14.948 align:middle
着手行动吧因此您可以在任何时候开始
一个新的Xcode工程

00:05:15.015 --> 00:05:18.151 align:middle
或者把一个老工程转换成
您可以选择的Watch OS 2

00:05:19.453 --> 00:05:23.390 align:middle
来加一个Complication

00:05:24.725 --> 00:05:27.427 align:middle
您可以检查下那个盒子
那将成为Xcode的来源

00:05:27.494 --> 00:05:30.163 align:middle
以自动生成您需要的文本

00:05:30.230 --> 00:05:32.566 align:middle
和设置的东西
超级容易

00:05:33.700 --> 00:05:35.302 align:middle
您不需要做其他的事情

00:05:36.069 --> 00:05:41.141 align:middle
如果您浏览到您的Watchkit
App推广的一般信息

00:05:45.612 --> 00:05:47.714 align:middle
♠您提供我们待会将会讨论到的数据来
源课程

00:05:47.781 --> 00:05:51.418 align:middle
您也可以检验

00:05:51.552 --> 00:05:54.254 align:middle
那些您想支持的
Complications家族

00:05:54.321 --> 00:05:57.858 align:middle
这些Complications家族
到底是什么？

00:05:59.726 --> 00:06:03.764 align:middle
在WatchOs上的Complic
ations 看起来是不同的方式

00:05:59.726 --> 00:06:03.764 align:middle
在WatchOs上的Complic
ations 看起来是不同的方式

00:06:03.830 --> 00:06:06.433 align:middle
在不同的钟面上
我们把它们

00:06:06.500 --> 00:06:07.935 align:middle
分为了五种不同的家族

00:06:08.001 --> 00:06:10.337 align:middle
你们可以分别选择是否支持每一个家族

00:06:10.404 --> 00:06:11.605 align:middle
因此

00:06:11.672 --> 00:06:13.907 align:middle
我想向你们演示
这些家族的样子

00:06:15.676 --> 00:06:16.944 align:middle
这是模块画面

00:06:17.811 --> 00:06:20.714 align:middle
在它上面有两个
Complications家族

00:06:24.718 --> 00:06:29.389 align:middle
小模块化家庭给您一些
方形的小模块

00:06:29.456 --> 00:06:34.061 align:middle
小Complications
大模块化家族

00:06:34.261 --> 00:06:36.096 align:middle
就是在模块中间的那个

00:06:36.163 --> 00:06:37.664 align:middle
可以展示清楚的效果和更多的数据

00:06:37.731 --> 00:06:40.234 align:middle
因此我们一直集中精力在这个例子上

00:06:43.103 --> 00:06:45.939 align:middle
很多类似模块也
支持Complications

00:06:46.473 --> 00:06:49.209 align:middle
这些Complications
在实用家族

00:06:49.676 --> 00:06:54.615 align:middle
有一种适用各种类似小角落的Util
itarian Small模块

00:06:54.681 --> 00:06:58.252 align:middle
还有一种Utilitarian
Large模板

00:06:58.552 --> 00:07:00.888 align:middle
能沿着底部展现整个区域

00:06:58.552 --> 00:07:00.888 align:middle
能沿着底部展现整个区域

00:07:02.589 --> 00:07:07.561 align:middle
最后 在彩色模板有一个单独的家族

00:07:07.628 --> 00:07:08.962 align:middle
我们称它为小环形

00:07:12.833 --> 00:07:14.101 align:middle
这是它用代码的样子

00:07:14.535 --> 00:07:18.405 align:middle
正如您所期待的那样
这是一个详细的介绍

00:07:22.009 --> 00:07:22.776 align:middle
好吧

00:07:22.843 --> 00:07:27.114 align:middle
因此当用户在某一方面启动您的Com
plications时

00:07:27.414 --> 00:07:29.683 align:middle
他们会选择将它作为一个特定的位置

00:07:29.750 --> 00:07:33.020 align:middle
只要那个Complication出
现那个位置就会被连接

00:07:33.086 --> 00:07:34.588 align:middle
而且会出现一个特别的家族

00:07:35.589 --> 00:07:38.725 align:middle
您应该被告知您正在为这个
家族提供数据

00:07:39.092 --> 00:07:40.327 align:middle
那是因为您需要这么做

00:07:40.394 --> 00:07:42.829 align:middle
去决定如何把那些数据展现出来

00:07:43.130 --> 00:07:46.400 align:middle
并且这里有一些方法可以为每一个家族

00:07:46.500 --> 00:07:47.968 align:middle
展现您的数据

00:07:48.035 --> 00:07:49.803 align:middle
另外我想要向您展示

00:07:49.870 --> 00:07:51.738 align:middle
我们的设计师已经创造和收集到的样板

00:07:52.272 --> 00:07:55.642 align:middle
对于小模块化的
Complications家族

00:07:55.976 --> 00:07:57.411 align:middle
我们有这些样板

00:07:58.745 --> 00:08:02.115 align:middle
在整个不同的模板里

00:07:58.745 --> 00:08:02.115 align:middle
在整个不同的模板里

00:08:02.182 --> 00:08:06.353 align:middle
您可以有小文本、两个不同排的文本、
一个图像和文本

00:08:06.420 --> 00:08:09.790 align:middle
您可以做一个大的文本
或一个大的图片

00:08:09.990 --> 00:08:13.393 align:middle
这些填充在底部附近的一个环里

00:08:13.460 --> 00:08:16.530 align:middle
可以显示表格里一些事情的进展

00:08:16.597 --> 00:08:20.667 align:middle
这一个可以在0和1之间
变化的浮点数字

00:08:20.734 --> 00:08:23.504 align:middle
您可以把文本或图像放在里面

00:08:23.570 --> 00:08:25.706 align:middle
最后有一个模板可以让您做类似的事情

00:08:25.772 --> 00:08:27.841 align:middle
显示一项体育成绩

00:08:30.477 --> 00:08:32.913 align:middle
Modular large也有
很多不同的方式

00:08:32.980 --> 00:08:35.315 align:middle
可以让您布局您的数据

00:08:35.381 --> 00:08:39.086 align:middle
有一个简单的标准三行模板

00:08:39.553 --> 00:08:41.121 align:middle
可以使用一个可选图像

00:08:41.822 --> 00:08:43.690 align:middle
您可以做一个列样式模板

00:08:44.124 --> 00:08:46.994 align:middle
或两个不同的列样式模板

00:08:47.528 --> 00:08:50.330 align:middle
实际上 您可以做一个大的模板

00:08:50.397 --> 00:08:52.566 align:middle
这是一种适用于厨房定时或日期文本

00:08:52.633 --> 00:08:56.236 align:middle
以及许多其他
您可以用它做到的事情

00:08:58.272 --> 00:09:01.975 align:middle
实用的小模板大多数都是平的

00:08:58.272 --> 00:09:01.975 align:middle
实用的小模板大多数都是平的

00:09:02.176 --> 00:09:03.810 align:middle
并且在边角处有一个可选的图像

00:09:03.977 --> 00:09:05.479 align:middle
但是您也可以用一个大一些的图像

00:09:05.546 --> 00:09:09.349 align:middle
您也可以用Utilitarian
Small做这个风格

00:09:10.784 --> 00:09:13.587 align:middle
Utilitarian Large
仅有一个模板

00:09:13.654 --> 00:09:16.390 align:middle
一个可选图像
和一些相近的文本

00:09:18.425 --> 00:09:21.795 align:middle
最后 CircularSmall
的模板是相似的

00:09:21.862 --> 00:09:24.731 align:middle
对比ModularSmall的模板
有一些尺寸方面的不同

00:09:24.798 --> 00:09:28.769 align:middle
所以 您在Watch OS 2
进入模板

00:09:31.605 --> 00:09:34.374 align:middle
我要去看一下在代码中的意思

00:09:34.608 --> 00:09:36.877 align:middle
所以让我们缩小

00:09:37.945 --> 00:09:40.447 align:middle
我们的足球俱乐部的数字

00:09:40.514 --> 00:09:42.115 align:middle
Modular large模板

00:09:42.182 --> 00:09:43.717 align:middle
这有四块

00:09:45.118 --> 00:09:47.621 align:middle
有一个标题图像

00:09:49.690 --> 00:09:50.791 align:middle
您可以提供标题文本

00:09:52.793 --> 00:09:55.529 align:middle
然后两行正文文本

00:09:58.765 --> 00:10:01.835 align:middle
您可能已经注意到了那有很多Comp
lication模板

00:09:58.765 --> 00:10:01.835 align:middle
您可能已经注意到了那有很多Comp
lication模板

00:10:01.902 --> 00:10:05.339 align:middle
所有这些对应子类

00:10:05.405 --> 00:10:08.742 align:middle
对于CLKComplication
模板这是所有父类

00:10:08.809 --> 00:10:12.246 align:middle
您可以选择用哪一个

00:10:12.312 --> 00:10:14.314 align:middle
和如何填写它的各种性能

00:10:14.381 --> 00:10:15.215 align:middle
所以这很简单

00:10:15.782 --> 00:10:18.952 align:middle
因此这是CLK
Complication模板之一

00:10:19.019 --> 00:10:22.389 align:middle
Modular Large
标准模板有一点大

00:10:22.890 --> 00:10:25.492 align:middle
但是它能传递一个非常重要的

00:10:25.559 --> 00:10:27.361 align:middle
以名义命名的信息权

00:10:27.528 --> 00:10:29.162 align:middle
这个模板是为

00:10:29.229 --> 00:10:32.666 align:middle
Modular Large
Complication家族创建的

00:10:32.900 --> 00:10:34.968 align:middle
当您被问到的时候
这个真的很关键

00:10:35.035 --> 00:10:38.005 align:middle
提供Complication
特定家族数据

00:10:38.305 --> 00:10:40.707 align:middle
您提供的模板符合这个家族

00:10:40.774 --> 00:10:43.110 align:middle
这是我们为什么已经把家族姓名

00:10:43.177 --> 00:10:44.044 align:middle
建立到了班级名里

00:10:44.111 --> 00:10:45.879 align:middle
这里是为了消除这个困惑

00:10:46.513 --> 00:10:49.116 align:middle
看起来

00:10:49.183 --> 00:10:52.085 align:middle
像这样出现在环形面显然是不管用的

00:10:54.321 --> 00:10:56.690 align:middle
现在 您可能注意到了
这里还有一些有点奇怪的地方

00:10:58.125 --> 00:11:01.562 align:middle
我们有一个图像和三个文本的特性

00:10:58.125 --> 00:11:01.562 align:middle
我们有一个图像和三个文本的特性

00:11:01.628 --> 00:11:05.065 align:middle
但是它们不是代码
里的UI图像和NS串

00:11:06.300 --> 00:11:10.571 align:middle
我们有图像提供和文字提供业务

00:11:10.704 --> 00:11:12.072 align:middle
这里正在发生什么？

00:11:15.342 --> 00:11:16.610 align:middle
那么让我们进入下一个部分

00:11:16.677 --> 00:11:18.745 align:middle
您是如何提供文本和图像的？

00:11:18.812 --> 00:11:20.714 align:middle
我想解释下这些课程是为了什么

00:11:20.781 --> 00:11:21.982 align:middle
以及它们可以为您做什么

00:11:23.817 --> 00:11:24.952 align:middle
让我们从图像开始

00:11:27.454 --> 00:11:32.626 align:middle
这里在彩色编辑屏幕里是我们的
Complications

00:11:32.693 --> 00:11:35.963 align:middle
因此用户能够定制他们想要
看到的Complications

00:11:36.029 --> 00:11:37.931 align:middle
他们可以挑选
Complications

00:11:37.998 --> 00:11:38.932 align:middle
在那个课程里

00:11:39.032 --> 00:11:41.502 align:middle
他们也可以定制界面的样子和感觉

00:11:41.568 --> 00:11:43.704 align:middle
包括改变颜色

00:11:45.038 --> 00:11:49.309 align:middle
当您给您的
Complications提供图像

00:11:49.543 --> 00:11:52.246 align:middle
这些图像必须已参与同一个颜色主题

00:11:52.312 --> 00:11:54.114 align:middle
那是用户已经选择了的他们的界面

00:11:54.648 --> 00:11:58.218 align:middle
他们需要能够正如
您看到的那样改变颜色

00:12:00.087 --> 00:12:02.923 align:middle
因此这里我们的足球服可以转变成

00:12:02.990 --> 00:12:04.458 align:middle
任何用户正在选择的颜色

00:12:07.661 --> 00:12:12.533 align:middle
因此一个图像提供程序是一类属性排序

00:12:12.599 --> 00:12:14.668 align:middle
它能够成功达到这样的效果

00:12:15.502 --> 00:12:17.504 align:middle
所以您可以提供一个背景图片

00:12:17.571 --> 00:12:19.239 align:middle
您也可以把它做为模板图像

00:12:19.306 --> 00:12:22.142 align:middle
一张图像只允许包含阿尔法信息

00:12:22.242 --> 00:12:23.477 align:middle
而没有属于它自身的颜色

00:12:23.544 --> 00:12:25.913 align:middle
它可能是像素
也可以是任何您想要的颜色

00:12:25.979 --> 00:12:28.048 align:middle
但是我们将只关注阿尔法通道

00:12:29.383 --> 00:12:31.985 align:middle
它将会根据客户选择的颜色
作出相应的转变

00:12:33.153 --> 00:12:34.621 align:middle
但是您可以稍微比这个多做一些

00:12:34.922 --> 00:12:37.491 align:middle
您可以选择

00:12:38.025 --> 00:12:40.861 align:middle
提供一个背景图像和一个前景图
这些图像将被放在彼此的顶部

00:12:40.928 --> 00:12:42.696 align:middle
背景图将会根据界面的颜色而改变颜色

00:12:42.763 --> 00:12:47.434 align:middle
前景图将被浮于背景图上

00:12:48.368 --> 00:12:50.871 align:middle
您可以在您的图片上获得更多的细节

00:12:51.104 --> 00:12:53.240 align:middle
您也可以选择
把您的前景图变黑

00:12:54.808 --> 00:12:56.009 align:middle
让我们看一看这样子的代码

00:12:56.610 --> 00:12:58.011 align:middle
您给我们背景图

00:12:58.478 --> 00:13:00.447 align:middle
您给我们一张可选择的前景图

00:12:58.478 --> 00:13:00.447 align:middle
您给我们一张可选择的前景图

00:13:03.150 --> 00:13:06.887 align:middle
您能够选择您背景图的颜色

00:13:06.954 --> 00:13:09.523 align:middle
对于大部分将要决定的颜色

00:13:09.756 --> 00:13:11.491 align:middle
那些用户已经选择好了

00:13:11.892 --> 00:13:14.528 align:middle
因此背景图代表了

00:13:14.595 --> 00:13:17.231 align:middle
您想要您的背景图是什么颜色
如果您能够选择的话

00:13:17.631 --> 00:13:19.933 align:middle
另外还有一些背景将会被任命

00:13:20.267 --> 00:13:21.969 align:middle
但是只要它们出现在

00:13:22.035 --> 00:13:24.972 align:middle
被用户选择了颜色的界面上
您的选择就是无效的

00:13:25.038 --> 00:13:27.407 align:middle
因此在这儿提供的颜色
仅仅是一个选择的参考

00:13:30.511 --> 00:13:32.779 align:middle
好吧 这就是图像提供者

00:13:32.846 --> 00:13:34.381 align:middle
那么现在文本提供者又是什么呢？

00:13:37.251 --> 00:13:38.051 align:middle
这真是酷

00:13:38.118 --> 00:13:40.287 align:middle
能告诉您一些关于它们的信息
我真的很激动

00:13:40.354 --> 00:13:44.024 align:middle
当我们开始构建
Complications时

00:13:44.091 --> 00:13:46.760 align:middle
在Watch OS 1里

00:13:46.827 --> 00:13:50.364 align:middle
我们挑战了大部分

00:13:50.430 --> 00:13:55.035 align:middle
归咎于Complications
的微不足道的事实

00:13:55.102 --> 00:13:57.604 align:middle
在其它UI中

00:13:57.671 --> 00:13:59.273 align:middle
您经常为您所有的平台创建

00:13:59.339 --> 00:14:04.077 align:middle
它们当中的一些甚至小到只有44像素
我们正试图

00:13:59.339 --> 00:14:04.077 align:middle
它们当中的一些甚至小到只有44像素
我们正试图

00:14:04.144 --> 00:14:07.414 align:middle
找寻可以用到这个如此小的空间上的
合适的信息

00:14:07.714 --> 00:14:10.250 align:middle
但是在没有把您的文本缩小的情况下

00:14:10.317 --> 00:14:11.351 align:middle
它是很有挑战性的

00:14:11.852 --> 00:14:16.523 align:middle
举一个很好的例子
关于文本提供者的主意

00:14:16.590 --> 00:14:18.792 align:middle
因为空间非常有限

00:14:22.029 --> 00:14:24.598 align:middle
我们想借用一些我们已经做过的工作

00:14:24.665 --> 00:14:28.101 align:middle
来解决如何在小的空间里
设计出一个合适的文本的问题

00:14:28.635 --> 00:14:31.738 align:middle
因此我们引荐文本提供者做为
你们的一种思路

00:14:31.805 --> 00:14:34.208 align:middle
以此来向我们声明您的目的

00:14:34.274 --> 00:14:37.411 align:middle
而不是总是给我们一个格式化字符串

00:14:38.178 --> 00:14:40.814 align:middle
然后我们会处理格式细节

00:14:40.881 --> 00:14:42.649 align:middle
为您找出合适的字符串

00:14:43.684 --> 00:14:46.920 align:middle
拿日期格式来举例说明

00:14:48.589 --> 00:14:51.625 align:middle
这里有一个CLK日期格式
提供商为您做的文本

00:14:51.692 --> 00:14:53.260 align:middle
我想要向您展示什么是对您有用的

00:14:53.961 --> 00:14:56.196 align:middle
假设您想要在您的Complications里

00:14:56.263 --> 00:14:59.366 align:middle
在一行内设置时间是：
星期三 9月23日

00:15:01.335 --> 00:15:03.871 align:middle
现在
空间非常拮据

00:15:03.937 --> 00:15:07.341 align:middle
但又有如此多的内容
在您大多数的文本里

00:15:07.508 --> 00:15:12.746 align:middle
您显然不会喜欢看到类似这种

00:15:13.080 --> 00:15:15.449 align:middle
我们已经丢失了这一类的大批信息

00:15:16.116 --> 00:15:18.685 align:middle
这比截取更好

00:15:18.752 --> 00:15:22.923 align:middle
如果我们能够转而
依靠持续增长的字符串

00:15:22.990 --> 00:15:25.125 align:middle
这一类仍然在增长的字符串

00:15:25.492 --> 00:15:28.562 align:middle
例如我们可以开始
缩短一些字符串

00:15:29.863 --> 00:15:31.398 align:middle
您可以缩短更多的字符串

00:15:32.199 --> 00:15:35.135 align:middle
如果那样做仍然不奏效
我们甚至可以开始丢弃一些字符串

00:15:35.202 --> 00:15:36.837 align:middle
而不是截取一些

00:15:37.638 --> 00:15:41.909 align:middle
我们更乐意看到9月23日
而不是星期三点点点

00:15:42.409 --> 00:15:47.381 align:middle
最后 为了把日期显示出来
我们可能只有更少的空间

00:15:47.447 --> 00:15:49.583 align:middle
来应对我们突然放下的内容

00:15:50.417 --> 00:15:54.121 align:middle
这是CLK日期文本编辑器
可以为您做的事情

00:15:55.189 --> 00:15:57.724 align:middle
您有一个日期想要显示

00:15:58.192 --> 00:16:00.928 align:middle
或者您有一个单位想要完美地展示

00:15:58.192 --> 00:16:00.928 align:middle
或者您有一个单位想要完美地展示

00:16:01.795 --> 00:16:04.631 align:middle
正如这个例子当中的星期几、月和日

00:16:06.533 --> 00:16:09.970 align:middle
您创造了一个文本体编辑器
从一些碎片中

00:16:10.637 --> 00:16:12.773 align:middle
那些文本编辑器

00:16:13.273 --> 00:16:15.075 align:middle
可以被粘贴到这些样本当中

00:16:15.275 --> 00:16:18.879 align:middle
并且使这些样本根据不同的内容
看上去也不一样

00:16:19.112 --> 00:16:20.214 align:middle
因此这里我们要说的是

00:16:20.981 --> 00:16:25.419 align:middle
在Modular Large Complication里
显示一个他们当中比较长的日期

00:16:27.454 --> 00:16:29.990 align:middle
这里有相同的文本编辑器

00:16:30.057 --> 00:16:31.758 align:middle
制造了非常相似的代码

00:16:32.492 --> 00:16:37.130 align:middle
显示了在进一步约束空间下
不同级别的内容

00:16:37.598 --> 00:16:41.335 align:middle
另外这儿还有相同的文本编辑器
编辑出日期

00:16:41.401 --> 00:16:43.837 align:middle
在这些Circular Small
Complications里

00:16:44.137 --> 00:16:46.507 align:middle
没有任何地方都有的截面字符串

00:16:46.573 --> 00:16:50.210 align:middle
没有不得不做的工作
在您现在看到的代码范围之外

00:16:51.712 --> 00:16:53.480 align:middle
就是文本编辑器

00:16:54.314 --> 00:16:56.016 align:middle
同样也有其他类型的文本编辑器

00:16:56.450 --> 00:17:00.554 align:middle
您很有可能打不开
编辑时间要用到的文本编辑器

00:16:56.450 --> 00:17:00.554 align:middle
您很有可能打不开
编辑时间要用到的文本编辑器

00:17:00.621 --> 00:17:04.391 align:middle
会允许您随意编辑文本

00:17:06.792 --> 00:17:09.463 align:middle
但是它比NSString更好

00:17:09.530 --> 00:17:11.365 align:middle
因为除了能编辑出您想看到的内容

00:17:11.565 --> 00:17:14.434 align:middle
您也能够编辑出一个比较小的版本

00:17:14.501 --> 00:17:17.604 align:middle
在截取出理想的字符串之前
我们通常会退一步选择编辑较小的文本

00:17:19.439 --> 00:17:20.674 align:middle
这里有一个时间编辑器

00:17:20.741 --> 00:17:23.010 align:middle
时间格式很好

00:17:23.143 --> 00:17:25.612 align:middle
您获得了很好的小写的代码
与系统的其他部件都相匹配

00:17:25.679 --> 00:17:27.214 align:middle
如果没有足够的适合的空间

00:17:27.281 --> 00:17:29.082 align:middle
您会丢弃AM/PM

00:17:29.683 --> 00:17:32.986 align:middle
正如您在日出/日落
Complication里看到的

00:17:33.053 --> 00:17:35.789 align:middle
正在底部使用的这类文档编辑器

00:17:38.825 --> 00:17:41.762 align:middle
也有一种时间间隔文本编辑器

00:17:42.229 --> 00:17:45.299 align:middle
这类编辑器对时间格式的文本很好

00:17:45.399 --> 00:17:47.467 align:middle
您在日期Complication
会用到它

00:17:47.701 --> 00:17:50.070 align:middle
它也有一些很不错的格式特点

00:17:50.637 --> 00:17:54.508 align:middle
如果在第一天早上
它看起来是这个样子

00:17:54.575 --> 00:17:56.243 align:middle
第二天下午的话会是这个样子

00:17:56.710 --> 00:17:59.313 align:middle
如果两天都是下午
那就很灵活

00:17:59.379 --> 00:18:01.081 align:middle
丢掉多余的AM/PM
符号

00:17:59.379 --> 00:18:01.081 align:middle
丢掉多余的AM/PM
符号

00:18:01.148 --> 00:18:03.016 align:middle
是为了使效果看起来更好

00:18:03.684 --> 00:18:06.620 align:middle
在一个有限的版本里它同样可能不好做

00:18:06.687 --> 00:18:08.856 align:middle
如果这种效果不合适

00:18:09.456 --> 00:18:12.960 align:middle
这种小版本的编辑器就是有用的
我们鼓励你们用这个

00:18:13.961 --> 00:18:17.664 align:middle
还有一点我想告诉大家

00:18:18.632 --> 00:18:22.002 align:middle
在我说出它之前
让我向您演示它解决的问题

00:18:22.603 --> 00:18:26.106 align:middle
这里您看到我们
数字化的月亮相位

00:18:26.173 --> 00:18:28.008 align:middle
Modular Large
Complication

00:18:30.177 --> 00:18:32.980 align:middle
在这个相位底部第三行

00:18:33.046 --> 00:18:35.983 align:middle
在月亮相位Complication
那里它告诉我们时间的总数

00:18:36.049 --> 00:18:39.186 align:middle
是截止到月落时 时和分的条款

00:18:39.386 --> 00:18:41.488 align:middle
因此今天月落在2:19

00:18:41.955 --> 00:18:43.724 align:middle
在三小时一分钟之前

00:18:44.458 --> 00:18:46.126 align:middle
从11:18开始

00:18:46.593 --> 00:18:50.564 align:middle
这个字符串在11:19时
随着时间记号的改变

00:18:50.631 --> 00:18:54.168 align:middle
显示了3小时11:20时的内容
也显示了2小时59分的内容

00:18:54.601 --> 00:18:55.269 align:middle
还有更多

00:18:57.037 --> 00:18:59.473 align:middle
现在 想像一下
如果您正在创造一个时间轴

00:19:00.440 --> 00:19:02.376 align:middle
去放置这个Complication

00:19:03.777 --> 00:19:06.547 align:middle
您需要提供一个新的模板

00:19:06.613 --> 00:19:08.348 align:middle
对一整天的每一分钟

00:19:09.216 --> 00:19:10.450 align:middle
就需要很多个模板

00:19:11.852 --> 00:19:13.220 align:middle
也有可能更糟糕

00:19:13.520 --> 00:19:16.356 align:middle
因为月亮相位
Complication记号

00:19:16.423 --> 00:19:17.257 align:middle
是随着分钟记录的

00:19:17.758 --> 00:19:20.460 align:middle
如果时间轴的记号随着秒数变化而记录
会怎么样呢？

00:19:20.861 --> 00:19:22.896 align:middle
想象下得需要多少模板啊

00:19:22.963 --> 00:19:25.465 align:middle
这很可能远远超过我们
合理的贮藏

00:19:25.933 --> 00:19:27.734 align:middle
造成难以置信的浪费

00:19:28.202 --> 00:19:31.238 align:middle
因为这些字符串

00:19:31.305 --> 00:19:33.073 align:middle
是可以从两条信息里推导出的

00:19:33.574 --> 00:19:36.777 align:middle
即您正在裁剪的日期和您正在用的日期

00:19:37.811 --> 00:19:39.413 align:middle
我们知道现在的日期

00:19:39.513 --> 00:19:40.547 align:middle
这就是我们正在做的

00:19:40.614 --> 00:19:41.715 align:middle
我们的手表

00:19:42.049 --> 00:19:45.519 align:middle
所以我们想要给您
一种可以制造这种字符串的方法

00:19:45.719 --> 00:19:49.456 align:middle
它不用在您的时间轴
放置大量

00:19:49.723 --> 00:19:50.958 align:middle
多余的信息

00:19:51.291 --> 00:19:53.627 align:middle
这就是相应的时间编辑器可以做的

00:19:56.396 --> 00:19:58.031 align:middle
这正是
我们在尝试它代码时候的样子

00:19:58.098 --> 00:20:00.934 align:middle
去制造第三条您在这里看到的文本线

00:19:58.098 --> 00:20:00.934 align:middle
去制造第三条您在这里看到的文本线

00:20:01.101 --> 00:20:03.570 align:middle
您将会从日落里获得时间

00:20:04.771 --> 00:20:06.907 align:middle
我们将会
选择我们想要展示的单元

00:20:06.974 --> 00:20:09.176 align:middle
实际上我将会在下一个屏幕里
显示很多不同的

00:20:09.243 --> 00:20:11.311 align:middle
您可以利用的单元

00:20:12.513 --> 00:20:13.914 align:middle
我们将选择一种风格
另外 再一次

00:20:13.981 --> 00:20:15.249 align:middle
我将会向您展示可能的风格

00:20:15.315 --> 00:20:17.451 align:middle
现在您看到的是自然风格

00:20:19.753 --> 00:20:21.755 align:middle
您可以做一个这些元素的

00:20:21.822 --> 00:20:22.956 align:middle
相应的时间编辑器

00:20:24.258 --> 00:20:25.893 align:middle
然后您设置下文本编辑器

00:20:26.159 --> 00:20:28.295 align:middle
把您正文的文本编辑器
作为您的模板

00:20:29.463 --> 00:20:31.164 align:middle
钟面在做其它工作的时候

00:20:31.231 --> 00:20:34.468 align:middle
它总是会展示相对的日期到日期

00:20:34.535 --> 00:20:37.337 align:middle
那是您在无需为
您做进一步工作的每一刻

00:20:37.404 --> 00:20:38.238 align:middle
给予我们的

00:20:40.340 --> 00:20:42.376 align:middle
这就是一些我们可以提供的风格

00:20:42.442 --> 00:20:44.545 align:middle
正如您看到的
如果看着自然风格和偏置式风格

00:20:44.611 --> 00:20:49.883 align:middle
您可以得到一个细分

00:20:49.950 --> 00:20:52.419 align:middle
相对日期或者非常课程相对日期

00:20:52.486 --> 00:20:54.254 align:middle
这取决于您想要看到的日期

00:20:54.621 --> 00:20:57.624 align:middle
取决您想要展示
多久前的日期

00:20:57.991 --> 00:21:01.261 align:middle
我们显示星期几、时间、月、年等等

00:20:57.991 --> 00:21:01.261 align:middle
我们显示星期几、时间、月、年等等

00:21:01.762 --> 00:21:03.030 align:middle
所有的方法分秒就可以做到

00:21:04.731 --> 00:21:07.367 align:middle
好吧
这就是文本编辑器和图像编辑器

00:21:07.868 --> 00:21:09.870 align:middle
我要总结下它们是怎么用的

00:21:09.937 --> 00:21:11.471 align:middle
您把您的内容给我们

00:21:12.506 --> 00:21:15.576 align:middle
您从很多个可能模版当中

00:21:15.642 --> 00:21:17.344 align:middle
选择一个

00:21:17.411 --> 00:21:19.413 align:middle
与您被问道的
Complication家族

00:21:19.479 --> 00:21:20.247 align:middle
相匹配

00:21:20.314 --> 00:21:21.215 align:middle
并提供数据给我们

00:21:22.816 --> 00:21:25.152 align:middle
然后您放置那些

00:21:25.686 --> 00:21:27.054 align:middle
图像编辑器和文本编辑器

00:21:29.289 --> 00:21:31.091 align:middle
然后您以时间轴的形式

00:21:31.325 --> 00:21:35.095 align:middle
将那些完整的字符串传递给我们

00:21:35.162 --> 00:21:37.698 align:middle
为了谈到更多如何形成时间轴的方面

00:21:37.764 --> 00:21:38.632 align:middle
我想要邀请保罗

00:21:41.134 --> 00:21:41.835 align:middle
这就是保罗

00:21:43.437 --> 00:21:44.104 align:middle
好极了！

00:21:45.506 --> 00:21:48.642 align:middle
掌声

00:21:48.942 --> 00:21:49.810 align:middle
大家好

00:21:50.444 --> 00:21:52.813 align:middle
像伊莉莎提到的
为了您的Complication

00:21:52.880 --> 00:21:54.982 align:middle
我们将会以时间轴的形式
聚集我们的数据

00:21:55.282 --> 00:21:56.617 align:middle
时间轴有益于两件事

00:21:57.117 --> 00:22:00.287 align:middle
崭新的Time Travel特色

00:21:57.117 --> 00:22:00.287 align:middle
崭新的Time Travel特色

00:22:00.354 --> 00:22:02.422 align:middle
和我们将向用户现时呈现的内容

00:22:02.489 --> 00:22:03.690 align:middle
毫无延迟的腕表功能

00:22:05.058 --> 00:22:08.128 align:middle
让我们看看关于如何考虑时间轴和
Complications

00:22:08.929 --> 00:22:11.164 align:middle
我们现在开始通过在这创造一个天气
Complication

00:22:11.231 --> 00:22:12.032 align:middle
在左下角 57度

00:22:12.466 --> 00:22:15.302 align:middle
因为现在手表显示10:00AM

00:22:15.636 --> 00:22:17.604 align:middle
我们的气象员说

00:22:17.671 --> 00:22:20.641 align:middle
在这个地方
外面温度是57度

00:22:20.908 --> 00:22:23.610 align:middle
事实上 我们有今天一直到下午七点的

00:22:23.677 --> 00:22:25.512 align:middle
这个地方的天气预报

00:22:26.013 --> 00:22:27.047 align:middle
可以利用

00:22:28.415 --> 00:22:31.818 align:middle
对于时间轴我们并没有描述一个范围
我们结合实际数据

00:22:31.885 --> 00:22:33.220 align:middle
我们想要展现时间上的一个点

00:22:33.754 --> 00:22:34.855 align:middle
因此让我们滑动到那边

00:22:35.255 --> 00:22:37.624 align:middle
随着一天时钟的前进

00:22:38.058 --> 00:22:40.160 align:middle
我们将会展示您提供到钟面时间轴上的

00:22:40.227 --> 00:22:41.895 align:middle
最近的数据

00:22:42.496 --> 00:22:46.400 align:middle
因此当过了11AM
我们将会把天气预报更新到55度

00:22:47.634 --> 00:22:50.204 align:middle
随着时间慢慢接近中午11:59

00:22:50.270 --> 00:22:52.773 align:middle
接近59秒
天气仍然是55度

00:22:54.341 --> 00:22:56.076 align:middle
一旦时间到了12点我们就会更新模板

00:22:56.610 --> 00:22:59.112 align:middle
这个和Time Travel工作
的特色是相似的

00:22:59.680 --> 00:23:02.583 align:middle
由于可以为用户导航一整天的内容
我们将会展示在您的时间轴上的

00:22:59.680 --> 00:23:02.583 align:middle
由于可以为用户导航一整天的内容
我们将会展示在您的时间轴上的

00:23:02.649 --> 00:23:04.785 align:middle
最近的节点的数据

00:23:05.652 --> 00:23:08.989 align:middle
因此当我们过了1:00PM
我们将会把更新温度到54度

00:23:10.824 --> 00:23:13.427 align:middle
其它Complication是一些
容易理解的例子

00:23:13.493 --> 00:23:14.795 align:middle
因为您的数据完美地匹配了

00:23:15.095 --> 00:23:16.964 align:middle
在时间轴上的流畅时间

00:23:17.865 --> 00:23:19.233 align:middle
让我们看一些比较复杂的内容

00:23:19.299 --> 00:23:21.368 align:middle
通过在这建立日期
Complication

00:23:22.202 --> 00:23:23.971 align:middle
如果您是幸运的
您的日期

00:23:24.037 --> 00:23:24.838 align:middle
会有很多间隔

00:23:26.073 --> 00:23:27.441 align:middle
今天我去吃了午餐

00:23:27.608 --> 00:23:28.842 align:middle
接着我将去理发

00:23:29.409 --> 00:23:31.011 align:middle
然后接下来我看到时间合适
我就会去

00:23:31.078 --> 00:23:32.212 align:middle
跟我的朋友看一场电影

00:23:33.914 --> 00:23:35.315 align:middle
我们可以心无旁骛地做这些事情

00:23:35.682 --> 00:23:38.252 align:middle
我们接通
我们想要展现的这些事件模板

00:23:38.318 --> 00:23:39.353 align:middle
来让它们开始

00:23:39.419 --> 00:23:40.954 align:middle
并让它们清楚事件结束的时间

00:23:42.422 --> 00:23:44.024 align:middle
让我们看看在实践中
这是如何进行的

00:23:44.625 --> 00:23:46.627 align:middle
今天中午的时候
我们会看到我们吃了午餐

00:23:47.528 --> 00:23:49.363 align:middle
而一旦午餐结束
在1:00PM

00:23:49.429 --> 00:23:51.465 align:middle
我们就看不到腕表上显示
吃午餐的内容了

00:23:51.999 --> 00:23:53.400 align:middle
这真是个糟糕的用户体验

00:23:54.568 --> 00:23:56.703 align:middle
更糟糕的是尽管越来越接近
4:00PM

00:23:56.770 --> 00:23:58.939 align:middle
我却不知道

00:23:59.006 --> 00:24:00.107 align:middle
我需要开车去理发

00:23:59.006 --> 00:24:00.107 align:middle
我需要开车去理发

00:24:00.774 --> 00:24:02.943 align:middle
您从来不想
删除那个为您做头发的人

00:24:04.278 --> 00:24:06.647 align:middle
现在太晚了 我要去烫头发

00:24:06.713 --> 00:24:07.915 align:middle
手表也不好好工作了

00:24:09.583 --> 00:24:10.918 align:middle
让我们这样设置

00:24:11.485 --> 00:24:12.686 align:middle
第一个错误是

00:24:12.920 --> 00:24:14.221 align:middle
假设我们记录了那些

00:24:14.721 --> 00:24:16.657 align:middle
在时间轴上不用的时间框

00:24:17.157 --> 00:24:18.358 align:middle
所以让我们丢掉那些时间框

00:24:19.526 --> 00:24:21.428 align:middle
显示事件时不再有用

00:24:21.495 --> 00:24:23.330 align:middle
在一个日期
Complication里

00:24:23.897 --> 00:24:26.700 align:middle
我们本应该把模板放置在
前一个事件结束的时候

00:24:26.934 --> 00:24:29.436 align:middle
这样您就有充足的时间
去设置您的下一个事件

00:24:32.773 --> 00:24:34.274 align:middle
事实上
发生在这儿的第一件事

00:24:34.341 --> 00:24:35.943 align:middle
并没有前一事件
因此它可能是有用的

00:24:36.109 --> 00:24:37.711 align:middle
为了获得充分的提醒

00:24:37.778 --> 00:24:38.846 align:middle
您在午夜标记出它

00:24:38.912 --> 00:24:39.980 align:middle
当您在早上醒来的时候

00:24:40.047 --> 00:24:43.483 align:middle
我们应该让我们的用户知道
在接下来这一天

00:24:43.550 --> 00:24:44.918 align:middle
他们没有什么事情可担心

00:24:44.985 --> 00:24:46.486 align:middle
用我们的提示不会再有问题

00:24:47.788 --> 00:24:48.755 align:middle
这是如何工作的？

00:24:49.523 --> 00:24:51.525 align:middle
中午的时候我们像以前一样
我们知道要吃午餐

00:24:51.992 --> 00:24:54.127 align:middle
而一旦午餐结束
我们有充足的提示时间

00:24:54.194 --> 00:24:55.596 align:middle
来提示我们需要去理发

00:24:56.496 --> 00:24:57.464 align:middle
我们将会和朋友见面

00:24:57.965 --> 00:24:59.299 align:middle
因为我们没有错过任何一件事

00:24:59.933 --> 00:25:01.235 align:middle
当我们看完一场电影的时候

00:24:59.933 --> 00:25:01.235 align:middle
当我们看完一场电影的时候

00:25:01.301 --> 00:25:03.303 align:middle
我们可以回家
并且知道我们没有错过任何事情

00:25:05.472 --> 00:25:06.773 align:middle
因此您怎么让您的数据

00:25:06.840 --> 00:25:09.176 align:middle
成为您的代码

00:25:09.810 --> 00:25:11.912 align:middle
您将用到Complication
时间轴入门

00:25:12.546 --> 00:25:14.715 align:middle
伊莉莎早先时候描述了生成模板

00:25:14.781 --> 00:25:16.450 align:middle
要用到本文编辑器和图片编辑器

00:25:16.884 --> 00:25:19.286 align:middle
以及我们需要
用一个NSState连接的内容

00:25:20.153 --> 00:25:21.522 align:middle
我们将会
把目标填充到

00:25:21.588 --> 00:25:23.857 align:middle
Conciliation时间轴
的入口

00:25:24.157 --> 00:25:26.560 align:middle
当您递交信息到钟面的时候
我们会校对日期

00:25:27.060 --> 00:25:28.662 align:middle
并且在时间轴上做下笔记
从而知道

00:25:28.729 --> 00:25:30.864 align:middle
当时间到了那个点的时候
要去展示相应的模板

00:25:32.266 --> 00:25:33.800 align:middle
您可以看到目标做成代码的样子

00:25:33.867 --> 00:25:35.202 align:middle
用时间属性和

00:25:35.269 --> 00:25:37.171 align:middle
Complication模板属性

00:25:39.773 --> 00:25:42.109 align:middle
那么您实际上是怎么
和我们交流这些数据的呢？

00:25:42.609 --> 00:25:44.444 align:middle
在您的工程里
您将会有一个目标

00:25:44.511 --> 00:25:46.914 align:middle
即实现CLK
Complication数据源协议

00:25:48.015 --> 00:25:49.316 align:middle
这个目标

00:25:49.383 --> 00:25:53.320 align:middle
被注解在您的Xcode
WatchKit扩展目标设定上

00:25:53.387 --> 00:25:55.489 align:middle
在您设置您的工程的时候
正如伊莉莎向您展示的

00:25:56.089 --> 00:25:58.025 align:middle
您将会在您的目标上
获得成串的指令

00:25:58.892 --> 00:26:00.827 align:middle
他们通常是每个
Complication

00:25:58.892 --> 00:26:00.827 align:middle
他们通常是每个
Complication

00:26:00.894 --> 00:26:03.530 align:middle
另外我们会给您一个
CLKComplication目标

00:26:03.597 --> 00:26:05.499 align:middle
那个目标包含一个
您想要切换到的家族属性

00:26:05.832 --> 00:26:07.067 align:middle
这点上您得决定这个

00:26:07.134 --> 00:26:09.736 align:middle
是Modular large吗？
我应该用哪一个模板？

00:26:09.803 --> 00:26:11.071 align:middle
是Modular Small吗？

00:26:11.138 --> 00:26:12.973 align:middle
哪一个文本编辑器
需要和我选择的这个模板相匹配？

00:26:14.675 --> 00:26:16.977 align:middle
另外除了用Complication

00:26:17.044 --> 00:26:18.712 align:middle
这个您感兴趣的
提供内容外

00:26:18.779 --> 00:26:20.480 align:middle
我们也会给您一个处理器

00:26:20.914 --> 00:26:23.116 align:middle
您将会用这个处理器给我们
提供要求的数据

00:26:23.183 --> 00:26:24.384 align:middle
让我们知道您在做运行

00:26:24.852 --> 00:26:26.220 align:middle
这是非常重要的

00:26:26.286 --> 00:26:28.722 align:middle
因为您会想有机会更新您的背景内容

00:26:29.022 --> 00:26:30.224 align:middle
您想要知道什么时候做运行

00:26:32.860 --> 00:26:34.394 align:middle
因此让我们开始建设我们的时间轴

00:26:34.795 --> 00:26:36.630 align:middle
您可以看到钟面在您的左面

00:26:36.697 --> 00:26:37.965 align:middle
您的延展在右边

00:26:38.031 --> 00:26:40.000 align:middle
我们想要通过按钮建立时间轴

00:26:42.736 --> 00:26:43.937 align:middle
在您的延展内容里

00:26:44.004 --> 00:26:46.306 align:middle
您可以看到您的
Complication控制对象

00:26:46.707 --> 00:26:49.610 align:middle
现在 这是Xcode为您
创造的默认对象

00:26:49.877 --> 00:26:52.346 align:middle
去执行Complication
数据源协议

00:26:52.880 --> 00:26:54.781 align:middle
这是我们将要沟通的对象

00:26:58.185 --> 00:27:00.487 align:middle
因此当我们开始的时候
我们会询问您

00:26:58.185 --> 00:27:00.487 align:middle
因此当我们开始的时候
我们会询问您

00:27:00.554 --> 00:27:03.624 align:middle
现在应该展示哪一个时间轴入口

00:27:04.691 --> 00:27:07.661 align:middle
您需要打包好一个时间轴
然后通过电缆和处理器

00:27:07.728 --> 00:27:08.996 align:middle
发送给我们

00:27:09.329 --> 00:27:11.565 align:middle
然后我们就会
把它添加到正确的时间轴

00:27:12.599 --> 00:27:14.935 align:middle
在所有我们询问的问题列表里
有个非常重要的提示

00:27:15.602 --> 00:27:17.037 align:middle
我们提出下一个问题是基于

00:27:17.104 --> 00:27:18.939 align:middle
上一个问题您已经提供给我们的信息

00:27:19.173 --> 00:27:21.375 align:middle
因此
我们将逐渐把时间轴建立起来

00:27:21.875 --> 00:27:23.477 align:middle
我们需要非常精确的数据

00:27:23.877 --> 00:27:26.480 align:middle
您不要盲目地
标注当前的NS日期为这一记录

00:27:26.914 --> 00:27:30.150 align:middle
但如果您需要10:00AM
而预先数据是10:30AM

00:27:30.217 --> 00:27:32.019 align:middle
您就应该标注这个
Complication

00:27:32.085 --> 00:27:33.387 align:middle
时间轴记录为10:00AM

00:27:35.355 --> 00:27:36.456 align:middle
因此这个功能

00:27:36.523 --> 00:27:39.660 align:middle
我们将会获取目前的时间轴记录
为Complication

00:27:40.594 --> 00:27:43.230 align:middle
再次强调 我们将给您一个
CLKComplication

00:27:43.297 --> 00:27:45.499 align:middle
这里有一个家庭属性您应该切换到

00:27:45.566 --> 00:27:47.801 align:middle
决定哪个模板、哪个文本和图像编辑器
是您想要的

00:27:49.436 --> 00:27:51.238 align:middle
并提供一个需要时间轴记录的处理器

00:27:51.305 --> 00:27:54.641 align:middle
当您完成了复查您应该做好标记

00:27:55.475 --> 00:27:57.578 align:middle
现在我们有您的目前记录

00:27:57.644 --> 00:27:58.912 align:middle
我们需要更新您的时间轴

00:27:58.979 --> 00:28:00.514 align:middle
为未来和过去

00:27:58.979 --> 00:28:00.514 align:middle
为未来和过去

00:28:00.581 --> 00:28:02.349 align:middle
我们开始看看未来吧
过了特定的一天后

00:28:03.317 --> 00:28:07.721 align:middle
我们会一直问您的时间轴里有什么

00:28:08.188 --> 00:28:09.890 align:middle
这一天具体是哪天

00:28:09.957 --> 00:28:11.592 align:middle
取决于您之前交给我们的数码

00:28:12.025 --> 00:28:13.560 align:middle
而这些数码还在
我们的高速缓存中

00:28:14.194 --> 00:28:17.798 align:middle
所以我们会把这个日期告诉你们
然后你们

00:28:17.865 --> 00:28:19.833 align:middle
要整理好过了这个日期后的

00:28:19.900 --> 00:28:22.202 align:middle
一堆CLKComplication
时间轴的数据

00:28:22.603 --> 00:28:26.974 align:middle
有一个好方法是把每一天的数据整理好

00:28:27.040 --> 00:28:28.976 align:middle
当您把这些数据交给我们时
我们会把它们

00:28:29.042 --> 00:28:30.878 align:middle
加入您的时间轴
而如果我们觉得

00:28:30.944 --> 00:28:32.779 align:middle
需要存储更多的数据
我们会再通知您

00:28:33.313 --> 00:28:36.283 align:middle
如果您有更多的数据
就能轻松愉快地把它们交给我们

00:28:38.252 --> 00:28:39.520 align:middle
如果我们一直跟您要数据

00:28:39.586 --> 00:28:41.154 align:middle
可是您已经没有数据可提供了

00:28:41.522 --> 00:28:45.058 align:middle
您可以交一个空的NSArray或无

00:28:45.225 --> 00:28:47.094 align:middle
我们就知道了

00:28:48.161 --> 00:28:51.965 align:middle
随着时间的流逝
您的数据会逐渐过时

00:28:52.032 --> 00:28:55.402 align:middle
所以为了补充我们的数据
我们在未来可能得再向您要数据

00:28:57.704 --> 00:28:58.972 align:middle
而这个未来就在

00:28:59.039 --> 00:29:01.375 align:middle
我们需要为Complication
获得时间轴条目的时候

00:28:59.039 --> 00:29:01.375 align:middle
我们需要为Complication
获得时间轴条目的时候

00:29:02.009 --> 00:29:03.977 align:middle
我们会把令我们感到好奇的
Complication交给您

00:29:04.044 --> 00:29:05.479 align:middle
所以您可以看看它的家族性能

00:29:07.314 --> 00:29:10.317 align:middle
当然 之后我们会给您一个日期
但这个日期当天并不被包括在内

00:29:10.584 --> 00:29:14.288 align:middle
您就要整理这个日期之后的
时间轴行列

00:29:16.123 --> 00:29:18.091 align:middle
为了确保我们不会有过多的数据

00:29:18.158 --> 00:29:20.627 align:middle
我们会给您一个指定的数量

00:29:21.195 --> 00:29:25.933 align:middle
所以
不要放超出数量的数据进去

00:29:26.433 --> 00:29:29.369 align:middle
如果您放了 我们会消除它们
并且我们不能保证不会更改数据

00:29:29.436 --> 00:29:31.271 align:middle
而您也不会想了解发生了什么事

00:29:32.573 --> 00:29:34.875 align:middle
当然
负责这些数据的人也不会想了解

00:29:36.677 --> 00:29:41.415 align:middle
我们有个日期功能
它能把旧的数据分出来

00:29:43.717 --> 00:29:46.486 align:middle
而且根据您负责的
Complication种类

00:29:46.553 --> 00:29:48.422 align:middle
Time Travel可能会不同

00:29:48.922 --> 00:29:51.458 align:middle
比如说预计未来的
Complication

00:29:51.525 --> 00:29:53.093 align:middle
不能翻看过去的资料

00:29:53.360 --> 00:29:55.762 align:middle
再比如由于我们还没把股票
Complication

00:29:56.063 --> 00:29:57.698 align:middle
给完美地完成

00:29:57.764 --> 00:29:59.066 align:middle
而只能查阅已有资料里的股票

00:29:59.366 --> 00:30:02.102 align:middle
因此
我们会要求您设定好您支持的方向

00:29:59.366 --> 00:30:02.102 align:middle
因此
我们会要求您设定好您支持的方向

00:30:03.103 --> 00:30:05.873 align:middle
比如天气预报
Complication

00:30:05.939 --> 00:30:07.207 align:middle
我们会说我们只支持未来

00:30:07.741 --> 00:30:09.743 align:middle
我们的时间轴只看未来

00:30:10.043 --> 00:30:11.545 align:middle
如果那名用户查看过去的资料

00:30:11.612 --> 00:30:12.779 align:middle
我们就会把您的资料暗化

00:30:12.846 --> 00:30:14.882 align:middle
好让大家知道
那里没东西可看

00:30:15.282 --> 00:30:17.017 align:middle
相对的
股票Complication

00:30:17.117 --> 00:30:18.585 align:middle
可以说您只支持过去

00:30:18.652 --> 00:30:20.187 align:middle
我们就会把您未来的资料暗化

00:30:22.256 --> 00:30:24.858 align:middle
您可能不想使用
Time Travel

00:30:24.925 --> 00:30:27.294 align:middle
但又还是想把资料放进钟面上

00:30:27.995 --> 00:30:30.430 align:middle
在这种情况下
您可以不提供资料

00:30:31.265 --> 00:30:32.733 align:middle
我们还是会把您的资料呈现出来

00:30:32.833 --> 00:30:34.935 align:middle
但是一旦进入Time Travel
我们就会把它们暗化

00:30:35.235 --> 00:30:36.970 align:middle
您或许

00:30:37.037 --> 00:30:38.405 align:middle
知道一些想在未来呈现的信息

00:30:38.472 --> 00:30:40.874 align:middle
我们可能向您要求对未来的咨询

00:30:40.941 --> 00:30:43.710 align:middle
即便您不改Time Travel

00:30:44.278 --> 00:30:47.247 align:middle
我们也绝对不会向您要求对过去的咨询
因为时间不会倒流

00:30:49.850 --> 00:30:51.919 align:middle
而如果您想利用
Time Travel

00:30:51.985 --> 00:30:54.388 align:middle
到过去和未来的话

00:30:56.356 --> 00:30:57.925 align:middle
要索取一个功能

00:30:57.991 --> 00:31:02.062 align:middle
就是为Complication获取
支持Time Travel的指令

00:30:57.991 --> 00:31:02.062 align:middle
就是为Complication获取
支持Time Travel的指令

00:31:02.930 --> 00:31:06.667 align:middle
把这个Complication
和可以克服这些指令的处理器

00:31:08.802 --> 00:31:09.703 align:middle
告诉我们

00:31:09.770 --> 00:31:12.105 align:middle
您支持的是过去还是未来

00:31:12.439 --> 00:31:14.575 align:middle
不是唯一需要Time Travel
Complication处理的事

00:31:14.641 --> 00:31:16.944 align:middle
比如说我们的天气预报
Complication

00:31:17.010 --> 00:31:18.245 align:middle
只能预报到7点的天气

00:31:18.312 --> 00:31:20.013 align:middle
但Time Travel
可以做到更好

00:31:20.414 --> 00:31:21.715 align:middle
那我们来看看会发生什么事吧

00:31:22.749 --> 00:31:25.085 align:middle
我们Time Travel
到4点时还有数据

00:31:25.152 --> 00:31:26.820 align:middle
所有的Complications
都在更新

00:31:27.521 --> 00:31:29.756 align:middle
但一到7:09
就是刚过7点

00:31:30.257 --> 00:31:32.593 align:middle
我们就不希望用户认为
我们的温度数据还是有效的

00:31:32.659 --> 00:31:35.596 align:middle
所以我们要暗化它们
并拿出您的Complication

00:31:37.731 --> 00:31:39.299 align:middle
而我们知道暗化的方法就是

00:31:39.366 --> 00:31:41.401 align:middle
在您时间轴的尾端或前面

00:31:41.468 --> 00:31:43.003 align:middle
向您发问

00:31:43.070 --> 00:31:44.505 align:middle
同时这又取决于您支持的方向

00:31:45.672 --> 00:31:48.075 align:middle
如果您支持未来
我们会在建立时问您

00:31:48.141 --> 00:31:49.576 align:middle
是否支持未来

00:31:49.643 --> 00:31:51.645 align:middle
那您就得返还我们NS日期

00:31:53.280 --> 00:31:55.549 align:middle
相对的如果您是支持过去的
Time Travel

00:31:55.616 --> 00:31:57.684 align:middle
您可以提供我们另一个NS日期

00:32:01.455 --> 00:32:02.689 align:middle
而我们也会对应地去调整

00:32:04.057 --> 00:32:07.661 align:middle
而我们用来了解该用
Time Travel走多远的功能

00:32:08.061 --> 00:32:10.531 align:middle
是“为Complication
获取时间轴和日期”

00:32:11.565 --> 00:32:13.333 align:middle
我们会把Complication和

00:32:13.400 --> 00:32:15.936 align:middle
能接受您时间轴尾端的
NS日期的处理器交给您

00:32:17.070 --> 00:32:18.172 align:middle
相对的

00:32:18.505 --> 00:32:21.275 align:middle
我们有时间轴开始日期
来确定您的时间轴该在哪里开始

00:32:23.143 --> 00:32:26.213 align:middle
所以如果用户在定制
Complication和钟面

00:32:26.380 --> 00:32:28.282 align:middle
而他们想选您的
Complication

00:32:28.749 --> 00:32:31.118 align:middle
他们会选择
比如Modular Large

00:32:31.251 --> 00:32:32.853 align:middle
并使用表冠来

00:32:32.920 --> 00:32:35.422 align:middle
设定旧金山的足球
Complication

00:32:35.889 --> 00:32:37.491 align:middle
在这里
您会看见几样

00:32:37.558 --> 00:32:39.226 align:middle
有关定制的东西

00:32:40.561 --> 00:32:42.763 align:middle
您的Complication条目里

00:32:42.829 --> 00:32:43.897 align:middle
有您应用程序的名字

00:32:43.964 --> 00:32:45.165 align:middle
这是系统提供的

00:32:46.300 --> 00:32:48.802 align:middle
既然我们来到了Modular
Large插槽我们就能

00:32:48.869 --> 00:32:50.771 align:middle
提供一个
Modular Large模板

00:32:51.171 --> 00:32:53.040 align:middle
这个模板会形容我们的
用户希望看到什么

00:32:53.106 --> 00:32:54.341 align:middle
并给予他们正确的信息

00:32:54.575 --> 00:32:56.810 align:middle
好让他们选择我们的
Complication

00:32:58.378 --> 00:33:00.113 align:middle
他们选好Complication后

00:32:58.378 --> 00:33:00.113 align:middle
他们选好Complication后

00:33:00.414 --> 00:33:02.316 align:middle
就会回到切换器和实时钟面

00:33:02.382 --> 00:33:06.987 align:middle
我们会开始向您要求数据和填充时间轴

00:33:07.054 --> 00:33:08.422 align:middle
我们会把这些定制模板

00:33:08.488 --> 00:33:10.457 align:middle
称为占位符模板

00:33:11.058 --> 00:33:13.493 align:middle
我们会在安装和高速缓存时向您发问

00:33:13.560 --> 00:33:15.429 align:middle
以确保我们不需要在定制时

00:33:15.495 --> 00:33:16.430 align:middle
多次启动

00:33:17.364 --> 00:33:20.334 align:middle
因此安装时

00:33:20.567 --> 00:33:25.072 align:middle
我们会索取所有您负责的
Complication占位符模板

00:33:25.472 --> 00:33:26.273 align:middle
然后您再把

00:33:26.340 --> 00:33:28.342 align:middle
时钟Complication
模板交给我们

00:33:28.542 --> 00:33:29.877 align:middle
在我们使用这个的时候

00:33:29.977 --> 00:33:31.645 align:middle
底部没有时间轴

00:33:32.746 --> 00:33:34.648 align:middle
而我们在这里
也不用时间轴条目

00:33:34.715 --> 00:33:36.617 align:middle
这只是个
Complication模板

00:33:36.683 --> 00:33:38.385 align:middle
因为它和日期没有关联

00:33:38.852 --> 00:33:40.721 align:middle
所以这个功能是由
Complication开启的

00:33:40.787 --> 00:33:43.123 align:middle
为Complication
获取Placeholer功能

00:33:43.190 --> 00:33:46.593 align:middle
现在
您已习惯这个方程式和处理器

00:33:47.961 --> 00:33:49.830 align:middle
既然您已经非常熟悉

00:33:50.097 --> 00:33:52.399 align:middle
如何建造自己的时间轴
那我就把伊莉莎 布洛克带上台

00:33:53.166 --> 00:33:55.202 align:middle
告诉您如何
用数码建造它

00:34:00.674 --> 00:34:01.408 align:middle
好的

00:34:02.042 --> 00:34:03.443 align:middle
我这里有个项目

00:34:03.510 --> 00:34:05.979 align:middle
我只做了一点

00:34:06.046 --> 00:34:08.014 align:middle
我们要做一个
Complication

00:34:08.282 --> 00:34:11.185 align:middle
就是我们全程一直放照片给您看的
那个Complication

00:34:14.221 --> 00:34:17.357 align:middle
我们来看看
Xcode项目究竟怎么用

00:34:17.424 --> 00:34:20.159 align:middle
我创造了一个新的项目并
把几个资源带进来

00:34:20.360 --> 00:34:22.396 align:middle
包括一个我曾设计的模拟

00:34:22.596 --> 00:34:24.164 align:middle
好让我们设计这个时间轴

00:34:25.532 --> 00:34:27.801 align:middle
我把它做得

00:34:29.770 --> 00:34:31.938 align:middle
可以在Complication
里使用

00:34:32.005 --> 00:34:34.842 align:middle
所以如果我把它弄过来... 啊！

00:34:38.312 --> 00:34:40.981 align:middle
我的手表的常规设施

00:34:41.047 --> 00:34:41.882 align:middle
在那里

00:34:42.549 --> 00:34:44.318 align:middle
如果我放大
您可以看到

00:34:44.650 --> 00:34:46.954 align:middle
上半部分有我的数据来源

00:34:47.054 --> 00:34:48.889 align:middle
现在在Xcode里看起来有点丑

00:34:48.956 --> 00:34:50.891 align:middle
但如果您点击它
您会发现

00:34:50.958 --> 00:34:52.893 align:middle
它正指向我们的
Complication

00:34:52.960 --> 00:34:55.629 align:middle
而我除了
Modular Large外

00:34:55.696 --> 00:34:58.298 align:middle
暂时不用其他的家族

00:34:58.365 --> 00:35:00.133 align:middle
好让我们的演示看起来更简单

00:34:58.365 --> 00:35:00.133 align:middle
好让我们的演示看起来更简单

00:35:00.200 --> 00:35:01.368 align:middle
我们只专注于创作

00:35:01.435 --> 00:35:02.903 align:middle
Modular Large
Complication

00:35:02.970 --> 00:35:05.539 align:middle
我们建议您

00:35:05.606 --> 00:35:07.674 align:middle
学会支持越多的家族越好

00:35:07.741 --> 00:35:09.810 align:middle
因为您的用户会想要有

00:35:09.877 --> 00:35:12.880 align:middle
更多选择
那么您支持的家族越多

00:35:12.946 --> 00:35:14.748 align:middle
他们就越有可能在手表里

00:35:14.815 --> 00:35:17.718 align:middle
使用您的作品

00:35:19.887 --> 00:35:20.587 align:middle
所以

00:35:21.655 --> 00:35:23.557 align:middle
当您创作这个Xcode

00:35:24.992 --> 00:35:25.659 align:middle
Xcode

00:35:26.059 --> 00:35:27.961 align:middle
而您想使用
Complications

00:35:28.028 --> 00:35:31.598 align:middle
Xcode会做一个控制
Complication的东西

00:35:32.466 --> 00:35:34.134 align:middle
它们有存根能让您用所有的方法

00:35:34.201 --> 00:35:35.435 align:middle
来执行控制

00:35:35.969 --> 00:35:37.538 align:middle
所以非常有用

00:35:37.604 --> 00:35:40.040 align:middle
我们可以看到它

00:35:40.107 --> 00:35:42.509 align:middle
然后利用它来提供我们需要的信息

00:35:42.910 --> 00:35:45.379 align:middle
所以我会从底部这里开始

00:35:45.445 --> 00:35:48.982 align:middle
我要多加点空行

00:35:50.050 --> 00:35:51.018 align:middle
才可以看见这个

00:35:51.084 --> 00:35:52.686 align:middle
为Complication获取
Placeholder模板

00:35:52.753 --> 00:35:55.489 align:middle
我要从这里开始
这样我们就可以

00:35:55.556 --> 00:35:59.059 align:middle
看到保罗在荧幕上展现的
Complication的模样

00:36:00.093 --> 00:36:03.530 align:middle
我要拿掉Xcode提供的样板

00:36:03.997 --> 00:36:05.399 align:middle
然后

00:36:06.900 --> 00:36:09.002 align:middle
我们要做一个
Complication模板

00:36:11.271 --> 00:36:14.374 align:middle
即Modular Large
Standard Body模板

00:36:16.109 --> 00:36:18.846 align:middle
我要给它一个图样
一个足球的图样

00:36:19.079 --> 00:36:21.949 align:middle
我的图样是UI图样

00:36:22.015 --> 00:36:25.118 align:middle
我要用这个图样做一个图像提供

00:36:25.185 --> 00:36:27.454 align:middle
但我暂时不会管背景颜色

00:36:28.088 --> 00:36:29.857 align:middle
让我们来看看那个图像怎样

00:36:29.923 --> 00:36:31.525 align:middle
我把它放在XCode里

00:36:31.592 --> 00:36:35.462 align:middle
而我可以在Finder里开启它

00:36:35.529 --> 00:36:39.600 align:middle
这是预习

00:36:39.700 --> 00:36:41.435 align:middle
让我把它放大

00:36:43.537 --> 00:36:46.740 align:middle
在这里您可以发现这是个模板图像

00:36:46.907 --> 00:36:47.841 align:middle
它是单色的

00:36:48.075 --> 00:36:49.510 align:middle
它有个阿尔法
一个阿尔法通道

00:36:49.576 --> 00:36:51.445 align:middle
您就是要这个格式的图像

00:36:51.512 --> 00:36:53.514 align:middle
才可以好好地上色

00:36:56.950 --> 00:36:58.252 align:middle
好的
这就是我们的图像

00:36:59.152 --> 00:37:02.155 align:middle
我们得加点文字

00:36:59.152 --> 00:37:02.155 align:middle
我们得加点文字

00:37:02.222 --> 00:37:05.058 align:middle
我的标题是“比赛时间”

00:37:05.225 --> 00:37:07.327 align:middle
而我第一个文字提供会写

00:37:07.394 --> 00:37:08.996 align:middle
“2015女子比赛”

00:37:09.897 --> 00:37:11.932 align:middle
我不会再写第二个文字提供

00:37:12.032 --> 00:37:13.867 align:middle
因为这个模板让我有这个选择权

00:37:13.934 --> 00:37:17.538 align:middle
而我的目的是

00:37:17.771 --> 00:37:18.972 align:middle
把第一行字和第二行连起来

00:37:19.039 --> 00:37:21.074 align:middle
只要不用第二个文字提供
这就会自动形成

00:37:22.809 --> 00:37:26.847 align:middle
我们只需要这一点数码
就可以创建并运用这个

00:37:27.281 --> 00:37:29.983 align:middle
然后我们应该就可以
在编辑那里拿到我们的

00:37:30.050 --> 00:37:31.351 align:middle
Complication了

00:37:31.952 --> 00:37:35.322 align:middle
所以我会转到模拟器那里

00:37:37.057 --> 00:37:41.128 align:middle
然后让我再次确保安装已经完成

00:37:41.195 --> 00:37:42.629 align:middle
好 这就是我们的应用程序
这很好

00:37:43.230 --> 00:37:47.401 align:middle
我要按下模拟器

00:37:49.036 --> 00:37:51.672 align:middle
定制过去... 啊！

00:37:51.772 --> 00:37:53.273 align:middle
Complication那里

00:37:53.473 --> 00:37:55.943 align:middle
其实您知道吗？我想我还是先...

00:37:56.009 --> 00:38:00.380 align:middle
就如保罗刚才说的那样
占位符模板只用一次

00:37:56.009 --> 00:38:00.380 align:middle
就如保罗刚才说的那样
占位符模板只用一次

00:38:00.447 --> 00:38:03.016 align:middle
也就是当您的应用程序第一次被安装后

00:38:03.383 --> 00:38:06.453 align:middle
如果您要这么做

00:38:06.587 --> 00:38:10.490 align:middle
您就要先卸载才可以...
啊 这是...

00:38:11.525 --> 00:38:14.261 align:middle
确保它被丢弃... 啊！

00:38:14.461 --> 00:38:16.830 align:middle
好了！
所以要确保它已经卸载了

00:38:20.534 --> 00:38:21.435 align:middle
消失了

00:38:21.969 --> 00:38:23.904 align:middle
然后我们会让它再出现

00:38:24.238 --> 00:38:27.574 align:middle
这样我们的数码

00:38:28.008 --> 00:38:30.410 align:middle
才会再向您索取占位符模板
我们再试一次

00:38:40.087 --> 00:38:43.891 align:middle
让它不在这里... 好的

00:38:55.469 --> 00:38:56.703 align:middle
我们会再加载回去

00:38:59.940 --> 00:39:01.408 align:middle
然后再试一次

00:38:59.940 --> 00:39:01.408 align:middle
然后再试一次

00:39:14.688 --> 00:39:16.657 align:middle
耶！好了

00:39:18.192 --> 00:39:18.892 align:middle
好的

00:39:20.060 --> 00:39:21.228 align:middle
所以我们有了我们的模板

00:39:22.196 --> 00:39:24.498 align:middle
现在我们
能选Complication了

00:39:24.565 --> 00:39:26.099 align:middle
那我就

00:39:26.767 --> 00:39:27.668 align:middle
直接出来

00:39:28.035 --> 00:39:30.204 align:middle
当然您可以看到这个
Complication

00:39:30.270 --> 00:39:31.872 align:middle
并没有出现也没有呈现更新的讯息

00:39:31.939 --> 00:39:33.006 align:middle
因为我们

00:39:33.240 --> 00:39:34.441 align:middle
还没写好这方面的程序

00:39:35.475 --> 00:39:36.210 align:middle
所以

00:39:37.811 --> 00:39:39.913 align:middle
它会和占位符模板粘在一起

00:39:39.980 --> 00:39:41.381 align:middle
因为那就是它所有的信息

00:39:41.748 --> 00:39:43.851 align:middle
我们回到数码那里

00:39:43.917 --> 00:39:46.587 align:middle
然后加入能实行协议的部分

00:39:49.256 --> 00:39:51.358 align:middle
好 让我们来看看

00:39:51.425 --> 00:39:52.893 align:middle
我正在用的模型

00:39:52.960 --> 00:39:54.094 align:middle
我要切换到顶部这里

00:39:54.461 --> 00:39:57.397 align:middle
我有个模型这个模型是用
Objective-C写的

00:39:57.731 --> 00:40:00.601 align:middle
您可以把Objective-C
和Swift一起用

00:39:57.731 --> 00:40:00.601 align:middle
您可以把Objective-C
和Swift一起用

00:40:00.667 --> 00:40:03.704 align:middle
这样您就可以拿其他项目的数码

00:40:03.770 --> 00:40:07.641 align:middle
放到Watch OS2应用程序里

00:40:07.708 --> 00:40:10.444 align:middle
但要在您的Swift桥接报头

00:40:10.511 --> 00:40:12.546 align:middle
加个顶

00:40:12.613 --> 00:40:14.214 align:middle
就可以用了
这很酷吧

00:40:14.281 --> 00:40:16.583 align:middle
所以这里是我的足球比赛模拟

00:40:16.650 --> 00:40:18.752 align:middle
而这些家伙有个日期信息
也就是

00:40:18.819 --> 00:40:19.753 align:middle
比赛开始的日期

00:40:20.087 --> 00:40:22.789 align:middle
他们有个团队介绍
所以能告诉您

00:40:23.290 --> 00:40:26.460 align:middle
哪个队员和哪个团队在比赛

00:40:26.660 --> 00:40:30.297 align:middle
它也能告诉我

00:40:30.364 --> 00:40:32.533 align:middle
第一场比赛和最后一场比赛
什么时候开始

00:40:32.599 --> 00:40:35.235 align:middle
而在每一个比赛中都可以告诉我
上一场和下一场比赛是什么

00:40:35.936 --> 00:40:37.171 align:middle
所以有了这个

00:40:38.105 --> 00:40:39.773 align:middle
我们就可以

00:40:39.840 --> 00:40:42.142 align:middle
开始写填充这个
Complication的数码了

00:40:45.312 --> 00:40:47.080 align:middle
我会写两个辅助方法

00:40:47.447 --> 00:40:50.918 align:middle
来解决两个需要我们回答的问题

00:40:50.984 --> 00:40:53.453 align:middle
简单地说就是我们
在这个Complication里

00:40:53.520 --> 00:40:54.621 align:middle
必须回答的两个设计问题

00:40:54.855 --> 00:40:57.824 align:middle
第一题是我们的模板
看起来到底是什么样的？

00:40:57.891 --> 00:41:00.694 align:middle
对付这个
我会写个方法

00:40:57.891 --> 00:41:00.694 align:middle
对付这个
我会写个方法

00:41:00.761 --> 00:41:03.564 align:middle
不仅能拿足球比赛

00:41:04.665 --> 00:41:05.566 align:middle
还可以

00:41:06.567 --> 00:41:08.902 align:middle
做出个CLK
Complication模板的东西

00:41:09.403 --> 00:41:11.171 align:middle
所以它还蛮直接的

00:41:11.405 --> 00:41:13.106 align:middle
我们要做一个... 没事...

00:41:15.142 --> 00:41:18.345 align:middle
做个Modular
Large标准的模板

00:41:18.412 --> 00:41:20.747 align:middle
就像我们刚才做占位符一样

00:41:21.348 --> 00:41:25.352 align:middle
还有把刚才那个足球图像
变成图像提供的

00:41:25.419 --> 00:41:27.588 align:middle
然后这个

00:41:27.654 --> 00:41:28.689 align:middle
我们得有三行字

00:41:28.755 --> 00:41:31.425 align:middle
所以顶部是比赛时间

00:41:31.592 --> 00:41:35.462 align:middle
我正用CLK 时间文字提供来弄这个

00:41:38.465 --> 00:41:40.100 align:middle
第一行字

00:41:40.167 --> 00:41:42.102 align:middle
则会告诉我们哪个团队在比赛

00:41:42.169 --> 00:41:44.638 align:middle
而我正在做一个简单的文字提供

00:41:45.005 --> 00:41:46.840 align:middle
和我的团队介绍

00:41:47.908 --> 00:41:49.109 align:middle
最后

00:41:49.843 --> 00:41:53.814 align:middle
第三行是组织描述

00:41:54.481 --> 00:41:55.849 align:middle
我们现在有个模板

00:41:56.917 --> 00:41:58.452 align:middle
我们也得决定

00:41:58.519 --> 00:42:00.654 align:middle
我们要怎样在我们的时间轴上
安排这些模板

00:41:58.519 --> 00:42:00.654 align:middle
我们要怎样在我们的时间轴上
安排这些模板

00:42:01.088 --> 00:42:04.525 align:middle
保罗刚才说的幼稚方法就是

00:42:04.591 --> 00:42:09.296 align:middle
把开始的日期和时间轴的日期

00:42:09.463 --> 00:42:11.265 align:middle
配在一起

00:42:11.331 --> 00:42:13.901 align:middle
但有个缺点

00:42:13.967 --> 00:42:16.170 align:middle
就是您将无法在您的
Complication上

00:42:16.236 --> 00:42:18.372 align:middle
看到哪一场球赛即将开始

00:42:18.438 --> 00:42:21.208 align:middle
您只能看到过去有
哪些比赛在什么时候开始

00:42:21.475 --> 00:42:24.645 align:middle
所以我们
要和保罗一样对付日历

00:42:24.878 --> 00:42:27.114 align:middle
把这些条目移到更远的未来

00:42:27.314 --> 00:42:29.383 align:middle
我们要确保每一个条目的开始是

00:42:29.449 --> 00:42:32.119 align:middle
在上一场比赛结束时

00:42:32.519 --> 00:42:35.455 align:middle
因此我们要决定一场球赛要花多少时间

00:42:35.789 --> 00:42:37.491 align:middle
我觉得它大概有90分钟

00:42:37.558 --> 00:42:38.892 align:middle
所以我要用一个

00:42:40.160 --> 00:42:42.496 align:middle
我们一会儿可以更改的数据
这样就算我们弄错了也可以轻易修改

00:42:42.563 --> 00:42:45.866 align:middle
我们决定了比赛时间长达90分钟

00:42:47.167 --> 00:42:49.036 align:middle
然后我们可以用时间轴条目

00:42:50.337 --> 00:42:53.273 align:middle
匹配日期这个方法

00:42:53.507 --> 00:42:56.376 align:middle
它会推算出每一场比赛究竟

00:42:56.677 --> 00:42:58.812 align:middle
要在时间轴的哪个地方出现

00:43:01.682 --> 00:43:04.651 align:middle
那我们现在要知道的是

00:43:04.818 --> 00:43:06.153 align:middle
某个比赛之前的比赛是什么？

00:43:06.653 --> 00:43:07.754 align:middle
如果之前还有一个比赛

00:43:07.821 --> 00:43:12.092 align:middle
那我们就会用那场比赛的尾端来
当这场比赛的时间轴日期

00:43:13.594 --> 00:43:14.761 align:middle
所以如果有这个比赛

00:43:16.363 --> 00:43:18.866 align:middle
我们会把这个比赛的日期

00:43:19.266 --> 00:43:21.168 align:middle
加上我们设定的时间

00:43:25.539 --> 00:43:28.275 align:middle
如果我们不那么做
那就表示这是时间轴上第一个比赛

00:43:28.342 --> 00:43:30.177 align:middle
而我已经决定

00:43:30.244 --> 00:43:31.411 align:middle
要把第一场比赛

00:43:31.478 --> 00:43:33.313 align:middle
在开场前六小时就显示出来

00:43:33.380 --> 00:43:36.517 align:middle
但很明显的
您可以做其他的事

00:43:36.583 --> 00:43:38.585 align:middle
来匹配您的使用

00:43:38.652 --> 00:43:40.554 align:middle
以上就是

00:43:40.621 --> 00:43:41.955 align:middle
那两种方法

00:43:42.289 --> 00:43:45.692 align:middle
现在我们只需要阅读和实践

00:43:45.759 --> 00:43:47.961 align:middle
刚才保罗说的每一个协议方法

00:43:48.362 --> 00:43:49.830 align:middle
我们从头开始吧

00:43:49.897 --> 00:43:51.665 align:middle
我们这里有时间轴构造

00:43:51.732 --> 00:43:52.833 align:middle
而第一个方法就是

00:43:52.900 --> 00:43:55.903 align:middle
为Complication获取
支持Time Travel的指令

00:43:56.970 --> 00:44:00.007 align:middle
默认的XCode模板

00:43:56.970 --> 00:44:00.007 align:middle
默认的XCode模板

00:44:00.073 --> 00:44:02.309 align:middle
是能让您的时间轴前进和后退的

00:44:02.376 --> 00:44:03.644 align:middle
我们现在要的就是这个

00:44:03.744 --> 00:44:05.045 align:middle
所以我们不会碰它

00:44:06.446 --> 00:44:07.714 align:middle
我们下一个步骤

00:44:07.781 --> 00:44:09.283 align:middle
就是想好时间轴要在什么时候开始

00:44:09.716 --> 00:44:13.487 align:middle
由于我们已经写好了这些辅助方法
所以能轻而易举地解决问题

00:44:13.754 --> 00:44:15.989 align:middle
我会用‘无’来拿掉处理器

00:44:16.256 --> 00:44:18.292 align:middle
然后我们要想好开始的日期

00:44:18.358 --> 00:44:22.029 align:middle
也就是第一场足球比赛的条目日期

00:44:23.263 --> 00:44:26.233 align:middle
还有别忘了要把处理器拿出来

00:44:26.300 --> 00:44:29.403 align:middle
我们下一步

00:44:29.469 --> 00:44:31.038 align:middle
是要想结束的日期

00:44:32.005 --> 00:44:34.808 align:middle
而这个日期应该是

00:44:34.908 --> 00:44:36.710 align:middle
最后一场比赛过后

00:44:37.211 --> 00:44:40.080 align:middle
这样我们才能拿到最后一场比赛的信息

00:44:40.814 --> 00:44:44.351 align:middle
我们要把这个日期加上比赛时间

00:44:44.418 --> 00:44:46.887 align:middle
这就是我们结束的日期

00:44:46.954 --> 00:44:49.122 align:middle
我们会用处理器来完成这个步骤

00:44:50.991 --> 00:44:53.160 align:middle
下一个方法是我们一整场演说
都没提过的

00:44:53.227 --> 00:44:55.562 align:middle
但却非常重要的方法

00:44:55.896 --> 00:44:58.232 align:middle
尤其如果您的咨询有任何一点敏感性

00:44:58.599 --> 00:45:01.335 align:middle
如果用户的手表没被开启

00:44:58.599 --> 00:45:01.335 align:middle
如果用户的手表没被开启

00:45:01.401 --> 00:45:03.003 align:middle
您不会希望敏感的信息呈现在屏幕上

00:45:03.070 --> 00:45:04.972 align:middle
因为那就表示他们已经把手表摘下了

00:45:05.172 --> 00:45:06.473 align:middle
而别人很可能会找到它

00:45:06.540 --> 00:45:09.443 align:middle
如果您的Complication
上有敏感信息

00:45:09.510 --> 00:45:13.180 align:middle
您可以使用这个方式

00:45:13.247 --> 00:45:14.748 align:middle
来确保手表被锁好时不会呈现信息

00:45:15.082 --> 00:45:18.519 align:middle
但足球比赛的时间轴并不是敏感信息

00:45:18.585 --> 00:45:21.321 align:middle
所以我放任它为之前的设定

00:45:21.388 --> 00:45:24.591 align:middle
让它即使在锁住的情况下也呈现信息

00:45:26.059 --> 00:45:27.628 align:middle
接下来

00:45:27.694 --> 00:45:29.329 align:middle
我们要填充

00:45:30.597 --> 00:45:31.999 align:middle
时间轴

00:45:32.633 --> 00:45:34.201 align:middle
这是非常重要的部分

00:45:34.935 --> 00:45:36.236 align:middle
我们得把现时的条目放进去

00:45:36.303 --> 00:45:38.705 align:middle
我们得告诉自己... 告诉手表

00:45:38.772 --> 00:45:40.807 align:middle
如何把时间轴往后移

00:45:40.874 --> 00:45:43.010 align:middle
也得告诉它如何往前移

00:45:43.377 --> 00:45:44.678 align:middle
我从往前移开始说

00:45:45.379 --> 00:45:46.847 align:middle
我们来到底下这里

00:45:47.447 --> 00:45:51.685 align:middle
我们想要做的是建造一个

00:45:52.019 --> 00:45:55.622 align:middle
从我们收到条目的第一天一直往前走

00:45:55.689 --> 00:45:56.857 align:middle
走到未来的条目数组

00:45:58.559 --> 00:46:00.928 align:middle
我的战略是做个数组

00:45:58.559 --> 00:46:00.928 align:middle
我的战略是做个数组

00:46:01.428 --> 00:46:04.398 align:middle
做好后再用处理器

00:46:09.870 --> 00:46:12.439 align:middle
我们要查看每一个比赛

00:46:13.073 --> 00:46:15.609 align:middle
然后找到一个在我们开始
写数码后才开始的比赛

00:46:15.676 --> 00:46:17.578 align:middle
由那个比赛开始创建模板

00:46:17.644 --> 00:46:19.646 align:middle
然后把它们放到这个数组里

00:46:20.314 --> 00:46:22.149 align:middle
我会从

00:46:24.852 --> 00:46:27.221 align:middle
第一场比赛开始

00:46:28.055 --> 00:46:29.456 align:middle
而我也已经把它变成选项了

00:46:29.690 --> 00:46:31.792 align:middle
这并不是因为第一场比赛
的结果可能是‘无’

00:46:32.025 --> 00:46:34.328 align:middle
而是因为我们要把它们

00:46:34.394 --> 00:46:36.763 align:middle
换成下一场比赛

00:46:36.830 --> 00:46:39.032 align:middle
直到所有比赛结束然后数据就会变成零

00:46:39.099 --> 00:46:40.868 align:middle
那我们就知道什么时候要停了

00:46:43.670 --> 00:46:46.039 align:middle
接下来 我们要... 啊！

00:46:49.476 --> 00:46:54.047 align:middle
虽然这里有场比赛

00:46:54.114 --> 00:46:56.583 align:middle
但我们得拿到显示比赛的日期

00:46:56.783 --> 00:46:59.219 align:middle
这个就是这场比赛的显示日期

00:47:01.855 --> 00:47:04.791 align:middle
现在我们要把这个日期
和我们拿到的日期

00:47:04.858 --> 00:47:06.760 align:middle
也就是我们应该填充时间轴条目的日期

00:47:06.827 --> 00:47:08.328 align:middle
来做比较

00:47:09.530 --> 00:47:12.065 align:middle
如果它们的时间是往后退

00:47:12.132 --> 00:47:14.201 align:middle
那表示我们的日期对了

00:47:14.268 --> 00:47:16.737 align:middle
所以我们要开始把
这些时间轴条目放回去

00:47:17.104 --> 00:47:19.006 align:middle
这里我们就要填充一个时间轴条目

00:47:19.373 --> 00:47:20.307 align:middle
这很直接

00:47:20.374 --> 00:47:22.109 align:middle
我们做个模板给这场比赛

00:47:23.177 --> 00:47:24.978 align:middle
那是我们的辅助方法

00:47:26.446 --> 00:47:29.516 align:middle
我们在开始的日期制造条目
这条目是我们之前算出来的

00:47:29.583 --> 00:47:30.851 align:middle
然后制造那个模板

00:47:33.420 --> 00:47:34.655 align:middle
我们追加到我们的数组

00:47:36.924 --> 00:47:39.459 align:middle
然后要小心不要做太多个

00:47:39.526 --> 00:47:40.661 align:middle
我们已经超过极限了

00:47:41.728 --> 00:47:42.796 align:middle
我们要在极限之内

00:47:45.065 --> 00:47:47.734 align:middle
既然我们现在加了东西到数组里

00:47:48.535 --> 00:47:51.471 align:middle
就要检查数组看看它是否超过极限
如果超过了 我们就停止

00:47:53.440 --> 00:47:54.241 align:middle
最后

00:47:54.608 --> 00:47:56.310 align:middle
为了启动这个循环

00:47:56.376 --> 00:47:58.745 align:middle
我们必须拿下一个又一个

00:47:58.812 --> 00:48:00.214 align:middle
我们刚刚处理的比赛

00:47:58.812 --> 00:48:00.214 align:middle
我们刚刚处理的比赛

00:48:01.582 --> 00:48:03.884 align:middle
把它们填充在

00:48:04.151 --> 00:48:07.054 align:middle
时间轴里我们设定的
日期过后的其他条目

00:48:07.221 --> 00:48:09.423 align:middle
我们也可以做另一件非常类似的事

00:48:09.723 --> 00:48:12.593 align:middle
来填充之前的数据

00:48:12.693 --> 00:48:14.595 align:middle
就是复制我们刚刚写好的数码

00:48:16.897 --> 00:48:19.132 align:middle
然后往上移到在日期前

00:48:19.199 --> 00:48:21.468 align:middle
为Complication
获取时间轴条目

00:48:21.535 --> 00:48:22.402 align:middle
这个方法

00:48:23.170 --> 00:48:25.606 align:middle
把它复制在这里
然后更改三样东西

00:48:26.106 --> 00:48:28.075 align:middle
我们要做一模一样的东西

00:48:28.141 --> 00:48:29.776 align:middle
但我们会从最后一个条目

00:48:30.544 --> 00:48:31.411 align:middle
开始往前移

00:48:31.478 --> 00:48:34.915 align:middle
或者说从最后一场比赛开始
移到第一场比赛

00:48:35.282 --> 00:48:37.851 align:middle
我们从最后一个比赛开始

00:48:38.752 --> 00:48:40.587 align:middle
然后底下这里循环发生的地方

00:48:41.054 --> 00:48:42.489 align:middle
我们会拿前面的

00:48:45.792 --> 00:48:48.195 align:middle
最后 我们只在

00:48:48.262 --> 00:48:50.163 align:middle
它们还没超过我们的日期前用它们

00:48:50.230 --> 00:48:55.435 align:middle
所以必须让顺序倒过来

00:48:56.270 --> 00:48:58.405 align:middle
这就是我们的方法

00:48:58.605 --> 00:49:03.443 align:middle
我们最后要写的是获取
现时时间轴条目的方法

00:48:58.605 --> 00:49:03.443 align:middle
我们最后要写的是获取
现时时间轴条目的方法

00:49:03.510 --> 00:49:07.481 align:middle
我们可以很聪明地

00:49:07.548 --> 00:49:08.949 align:middle
利用我们之前写的方法

00:49:09.149 --> 00:49:12.252 align:middle
因为索取现时的条目基本上就是

00:49:12.319 --> 00:49:15.255 align:middle
要拿某个日期（现在）前的条目

00:49:16.523 --> 00:49:18.025 align:middle
就是我们现在要呈现的条目

00:49:18.392 --> 00:49:21.595 align:middle
所以我要采用
在日期前为Complication

00:49:21.662 --> 00:49:23.297 align:middle
获取时间轴条目方法

00:49:23.363 --> 00:49:24.765 align:middle
就是我们刚写好的那个

00:49:27.334 --> 00:49:29.803 align:middle
我要把日期设为当下

00:49:32.940 --> 00:49:34.374 align:middle
我要把极限设为一

00:49:34.441 --> 00:49:35.909 align:middle
因为我们这里只需要一个

00:49:37.277 --> 00:49:41.248 align:middle
然后当我启动处理器后

00:49:41.315 --> 00:49:44.384 align:middle
我会拿数组里的第一个条目并把它放回

00:49:44.585 --> 00:49:47.221 align:middle
获取现时时间轴条目方法的处理器

00:49:50.057 --> 00:49:51.925 align:middle
所以我们可以放心启动这个

00:49:51.992 --> 00:49:54.895 align:middle
而我会启动它

00:49:54.962 --> 00:49:57.231 align:middle
然后迅速换到还在启动的模拟器那里

00:49:57.297 --> 00:49:58.599 align:middle
它还在呈现

00:50:00.934 --> 00:50:02.936 align:middle
我们之前填充的占位符模板

00:50:03.337 --> 00:50:07.241 align:middle
所以只要我启动这个
它就会废止模拟器里的时间轴

00:50:07.774 --> 00:50:11.111 align:middle
然后重新询问

00:50:11.178 --> 00:50:13.313 align:middle
每一个方法我们现在都已经执行过了

00:50:13.380 --> 00:50:15.415 align:middle
所以我们可以拿到数据了
好了 来吧

00:50:15.482 --> 00:50:17.284 align:middle
启动
然后转移

00:50:17.718 --> 00:50:19.086 align:middle
现在我们应该

00:50:19.152 --> 00:50:19.920 align:middle
看到

00:50:21.955 --> 00:50:22.789 align:middle
我们的东西被填充

00:50:23.290 --> 00:50:24.925 align:middle
然后这里我们有实质的数据

00:50:24.992 --> 00:50:25.826 align:middle
这告诉我们...

00:50:32.032 --> 00:50:34.568 align:middle
这告诉我们比赛在11点开始

00:50:34.635 --> 00:50:36.203 align:middle
这是正确的行为 您记得吗？

00:50:36.270 --> 00:50:37.504 align:middle
我们就是要看

00:50:37.571 --> 00:50:39.373 align:middle
11点到12:30的比赛

00:50:39.439 --> 00:50:41.141 align:middle
90分钟后

00:50:41.508 --> 00:50:43.277 align:middle
如果我们把
Time Travel往前

00:50:43.343 --> 00:50:46.146 align:middle
直到12:30

00:50:46.213 --> 00:50:48.916 align:middle
我们应该可以看到下一个比赛的更改

00:50:49.283 --> 00:50:52.252 align:middle
所以Time Travel到3点
都还能发挥作用

00:50:52.319 --> 00:50:53.987 align:middle
我们应该可以开始看见再下一个比赛

00:50:54.054 --> 00:50:54.922 align:middle
啊 我超时了

00:50:55.656 --> 00:50:58.292 align:middle
我们的Time Travel有效

00:50:58.492 --> 00:51:00.627 align:middle
而我们主要要做的

00:50:58.492 --> 00:51:00.627 align:middle
而我们主要要做的

00:51:00.694 --> 00:51:02.796 align:middle
是写好三个最重要的方法

00:51:03.030 --> 00:51:05.132 align:middle
这样就能有个实用的
Complication

00:51:05.199 --> 00:51:08.335 align:middle
现在我会交给保罗来告诉我们

00:51:08.402 --> 00:51:11.405 align:middle
如何安排Complication

00:51:11.572 --> 00:51:13.707 align:middle
来实时更新世上的信息

00:51:23.050 --> 00:51:23.851 align:middle
谢谢伊莉莎

00:51:27.354 --> 00:51:30.157 align:middle
既然我们的
Complication都弄好了

00:51:30.224 --> 00:51:31.658 align:middle
我们要确保的就是

00:51:31.725 --> 00:51:33.861 align:middle
我们显示的东西是正确的

00:51:34.394 --> 00:51:36.230 align:middle
所以Watch OS2里有很多方式

00:51:36.296 --> 00:51:37.898 align:middle
可以让您把世上每一个角落的信息

00:51:37.965 --> 00:51:40.167 align:middle
都收集到您的手表里

00:51:41.034 --> 00:51:43.871 align:middle
您可以使用新的Watch
Connectivity APIs

00:51:43.937 --> 00:51:46.607 align:middle
来和其他iOS应用程序沟通
并索取更多资料到您的手表里

00:51:46.840 --> 00:51:50.210 align:middle
或者直接使用
NSURLSession和网站沟通

00:51:50.277 --> 00:51:51.445 align:middle
并把信息带进手表里

00:51:53.013 --> 00:51:55.682 align:middle
假设我们的Complication
时间轴已经设立好了

00:51:55.949 --> 00:51:57.551 align:middle
而且我们和网站沟通了

00:51:57.618 --> 00:51:58.919 align:middle
并拿到了新的信息

00:52:00.187 --> 00:52:02.389 align:middle
如果那些信息已经废止了
我们原有的信息

00:52:02.456 --> 00:52:05.025 align:middle
我们就要告诉钟面刷新时间轴

00:52:05.792 --> 00:52:10.264 align:middle
我们可以进入
时钟Complications服务器

00:52:11.231 --> 00:52:13.233 align:middle
它是我们和钟面沟通的接口

00:52:14.001 --> 00:52:15.402 align:middle
我们可以

00:52:15.469 --> 00:52:18.205 align:middle
要求钟面刷新我们的数据

00:52:18.272 --> 00:52:19.973 align:middle
然后丢掉之前所有的信息

00:52:20.040 --> 00:52:22.743 align:middle
然后以寻找现时时间轴的方法

00:52:22.809 --> 00:52:25.145 align:middle
重新启动我们的沟通渠道

00:52:26.046 --> 00:52:26.780 align:middle
您可能已经发现

00:52:26.847 --> 00:52:30.150 align:middle
这是个毁灭性有点大的动作

00:52:30.250 --> 00:52:32.386 align:middle
如果您有个股票
Complication

00:52:32.452 --> 00:52:34.688 align:middle
而您之前的数据还有用的话

00:52:35.622 --> 00:52:37.090 align:middle
钟面现在可不会向您二次确认了

00:52:37.391 --> 00:52:38.825 align:middle
那其实是您的责任

00:52:38.892 --> 00:52:40.894 align:middle
您必须告诉我们是要废止

00:52:40.961 --> 00:52:42.930 align:middle
还是延长您的信息

00:52:43.530 --> 00:52:44.698 align:middle
所以除了丢掉信息

00:52:44.765 --> 00:52:46.800 align:middle
您还可以要求延长信息

00:52:49.069 --> 00:52:51.738 align:middle
这样我们就不会要求您刷新所有东西

00:52:51.805 --> 00:52:56.109 align:middle
反而会在尾段
附加最新的信息

00:53:01.415 --> 00:53:03.283 align:middle
那这些在数码里会是什么样的呢？

00:53:03.350 --> 00:53:05.118 align:middle
您可以进入Complication

00:53:05.185 --> 00:53:07.754 align:middle
我是说时钟Complication
服务器共享实例

00:53:08.589 --> 00:53:11.959 align:middle
您可以在这里询问所有
活动的Complication

00:53:12.426 --> 00:53:14.828 align:middle
有一个活动Complication
现在就能在

00:53:14.895 --> 00:53:16.997 align:middle
您的钟面上被看到

00:53:17.798 --> 00:53:20.167 align:middle
而任何一个Complication
都会给予您

00:53:20.234 --> 00:53:22.402 align:middle
向服务器要求

00:53:22.469 --> 00:53:24.771 align:middle
延长或刷新时间轴的权利

00:53:26.607 --> 00:53:29.510 align:middle
所以很棒
我们知道我们有责任告诉手表

00:53:29.910 --> 00:53:32.613 align:middle
我们需要更新信息
但我们什么时候才有机会那么做？

00:53:34.081 --> 00:53:36.183 align:middle
其实只要您的程序在进行着

00:53:36.517 --> 00:53:38.986 align:middle
您就可以通过时钟
Complication服务

00:53:39.052 --> 00:53:39.786 align:middle
和手表沟通

00:53:40.521 --> 00:53:44.391 align:middle
这会在几种时候发生
比如当您手表里有最重要的应用程序时

00:53:45.659 --> 00:53:47.895 align:middle
但您还是有机会
通过呼唤后台启动

00:53:48.195 --> 00:53:49.863 align:middle
甚至通过新表的

00:53:50.664 --> 00:53:55.169 align:middle
iOS伴侣应用程序的
Connectivity APIs

00:53:55.369 --> 00:53:59.439 align:middle
来唤醒程序
好让电话接收您传送的信息

00:54:00.941 --> 00:54:04.811 align:middle
但由于它们都是在后台启动程序的
所以不能经常使用

00:54:05.179 --> 00:54:09.449 align:middle
如果您在后台加很多工
您就会把钱花光

00:54:09.983 --> 00:54:11.318 align:middle
而在您把钱存回来前

00:54:11.385 --> 00:54:14.688 align:middle
您都无法更新您的
Complication直到晚上

00:54:16.657 --> 00:54:19.560 align:middle
若想更了解
Watch Connectivity APIs

00:54:19.626 --> 00:54:21.995 align:middle
请到介绍Watch
Connectivity会话课

00:54:22.396 --> 00:54:26.500 align:middle
我们还在这手表里加了一个很酷的功能
来支持Complication数据的使用

00:54:28.368 --> 00:54:31.939 align:middle
我们再来经由Complication数据
来源协议来谈谈

00:54:32.005 --> 00:54:33.774 align:middle
如何利用后台功能

00:54:34.141 --> 00:54:36.910 align:middle
来更新Complication数据

00:54:37.511 --> 00:54:40.147 align:middle
您只需要让处理器给我们一个日期

00:54:40.914 --> 00:54:43.417 align:middle
我们就会把它运用在
所有的Complication上

00:54:43.483 --> 00:54:44.952 align:middle
而不是其中一个Complication

00:54:45.886 --> 00:54:47.988 align:middle
拿到这个日期时
我们会把它

00:54:48.589 --> 00:54:50.023 align:middle
当成提示
所以如果有金钱资助

00:54:50.090 --> 00:54:51.425 align:middle
或系统的状况良好

00:54:51.491 --> 00:54:52.726 align:middle
我们就会在后台启动这时

00:54:53.227 --> 00:54:57.865 align:middle
您的数据会从WatchConnectivity
和NSURL进入手表

00:54:58.198 --> 00:55:02.369 align:middle
而确保信息已被更新
和要求让手表更新信息

00:54:58.198 --> 00:55:02.369 align:middle
而确保信息已被更新
和要求让手表更新信息

00:55:02.436 --> 00:55:04.171 align:middle
是您的责任

00:55:06.039 --> 00:55:08.775 align:middle
我们的Complication课程
已接近尾声了

00:55:09.343 --> 00:55:12.913 align:middle
我们希望您已经学会如何建造时间轴

00:55:13.113 --> 00:55:16.483 align:middle
及如何将模板
和其他相关的内容提供给我们

00:55:17.317 --> 00:55:19.887 align:middle
还有如何利用Watch OS

00:55:19.953 --> 00:55:23.056 align:middle
来制造并输入信息到文字提供里

00:55:24.358 --> 00:55:27.060 align:middle
学会如何轻松地刷新数据

00:55:28.595 --> 00:55:31.298 align:middle
如果您是不常用后台更新的
良好市民

00:55:31.532 --> 00:55:33.367 align:middle
您会有更多机会使用手表

00:55:34.401 --> 00:55:37.171 align:middle
若想得到更多资料
请查看您的文件和示例代码

00:55:37.604 --> 00:55:40.240 align:middle
我们有良好的技术支持和老师

00:55:41.208 --> 00:55:43.810 align:middle
也有很多很棒的课让您
更了解WatchKit

00:55:44.311 --> 00:55:44.978 align:middle
谢谢！
