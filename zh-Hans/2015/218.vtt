WEBVTT

00:00:19.286 --> 00:00:23.824 align:middle
欢迎来到自动布局迷宫 第一部分

00:00:26.860 --> 00:00:27.995 align:middle
哇

00:00:28.629 --> 00:00:29.830 align:middle
大家早上好

00:00:29.897 --> 00:00:30.731 align:middle
早上好

00:00:31.031 --> 00:00:32.198 align:middle
我是杰森·姚

00:00:32.266 --> 00:00:33.834 align:middle
是界面设计器工程师

00:00:33.901 --> 00:00:36.703 align:middle
我和iOS键盘工程师卡西亚
一起给大家来介绍

00:00:37.037 --> 00:00:39.072 align:middle
《欢迎来到自动布局迷宫》

00:00:40.374 --> 00:00:43.443 align:middle
作为开发人员
大家都想设计出

00:00:43.510 --> 00:00:45.512 align:middle
令用户惊喜的漂亮
且出彩的app

00:00:46.213 --> 00:00:49.049 align:middle
布局出色会让你的
app棋高一着

00:00:49.116 --> 00:00:51.318 align:middle
用户也会对你
大加赞赏

00:00:51.952 --> 00:00:54.454 align:middle
需要面对所有
不同的设备

00:00:54.521 --> 00:00:57.324 align:middle
配置以及
多任务处理

00:00:57.424 --> 00:01:00.360 align:middle
和本地化
要面面俱到确有难度

00:00:57.424 --> 00:01:00.360 align:middle
和本地化
要面面俱到确有难度

00:01:00.627 --> 00:01:02.963 align:middle
幸好 有个工具
可以帮忙Auto Layout

00:01:08.168 --> 00:01:11.738 align:middle
Auto Layout从本质而言
就是将大量的数据

00:01:12.039 --> 00:01:16.143 align:middle
加以约束
将其转化为等式

00:01:16.476 --> 00:01:18.846 align:middle
运用线性代数
构成一系列框架

00:01:20.447 --> 00:01:23.016 align:middle
可以实现
所规定的布局

00:01:23.450 --> 00:01:25.819 align:middle
现在有了Auto Layout
你会发现它的强大

00:01:25.886 --> 00:01:30.891 align:middle
和灵活功能 不过貌似
有时也会有些神秘

00:01:31.491 --> 00:01:33.894 align:middle
所以才会安排
今天的讲座 发现并

00:01:33.961 --> 00:01:36.129 align:middle
揭开了解Auto Layout的
神秘面纱所在

00:01:37.965 --> 00:01:42.002 align:middle
我们会介绍若干
诀窍和技巧

00:01:42.503 --> 00:01:47.407 align:middle
通过学习 帮助大家
节约开发时间

00:01:47.708 --> 00:01:49.042 align:middle
让大家不至于沮丧

00:01:49.109 --> 00:01:50.110 align:middle
现在就开始

00:01:50.611 --> 00:01:53.647 align:middle
如果不了解Auto Layout
无论你是新人还是老手

00:01:53.714 --> 00:01:55.315 align:middle
都有必要
参加本次讲座

00:01:57.284 --> 00:01:59.753 align:middle
如果需要温故知新
可以看看WWDC

00:02:00.254 --> 00:02:01.121 align:middle
以往的讲座

00:02:01.989 --> 00:02:03.190 align:middle
我们来看
概要部分

00:02:05.125 --> 00:02:06.360 align:middle
讲座分两部分

00:02:06.693 --> 00:02:09.329 align:middle
上午的半天讲座
现在就开始

00:02:09.530 --> 00:02:12.866 align:middle
下午的部分是在
同一地点 晚些时候开始

00:02:14.101 --> 00:02:15.903 align:middle
我们现在开始
了解第一个谜题

00:02:16.737 --> 00:02:20.207 align:middle
第一谜题
可维护布局

00:02:22.509 --> 00:02:24.378 align:middle
现在 如果你在用
Auto Layout

00:02:24.444 --> 00:02:27.080 align:middle
那么很快就会发现
需要涉及到约束内容

00:02:27.648 --> 00:02:31.652 align:middle
设想在两个视图之间
建立关系

00:02:32.252 --> 00:02:35.022 align:middle
可以在一边加标签
在另一边加包裹

00:02:35.355 --> 00:02:39.793 align:middle
确定间距是多少
在父视图中

00:02:39.860 --> 00:02:40.961 align:middle
具体在什么位置

00:02:41.028 --> 00:02:43.797 align:middle
并沿着基线
做出美观的安排

00:02:44.698 --> 00:02:47.234 align:middle
现在无论规格变动的是
运行时间或是

00:02:47.801 --> 00:02:50.737 align:middle
设计时间
Auto Layout都可以实现

00:02:53.207 --> 00:02:54.541 align:middle
设想一个更为复杂的例子

00:02:55.108 --> 00:02:56.210 align:middle
这里是App Store

00:02:56.276 --> 00:02:58.078 align:middle
还有GarageBand
显示为app

00:02:58.245 --> 00:02:59.580 align:middle
其中有若干
控件

00:03:00.247 --> 00:03:03.517 align:middle
上端有标签
和一些按钮

00:03:03.584 --> 00:03:06.587 align:middle
一侧还有图标
中间是段控件

00:03:06.653 --> 00:03:09.122 align:middle
在底部是
几个预览图像

00:03:09.823 --> 00:03:11.925 align:middle
可以使用Auto Layout
把内容铺开

00:03:12.292 --> 00:03:13.794 align:middle
适应不同的大小

00:03:14.027 --> 00:03:15.963 align:middle
约束大致
是这个样子

00:03:20.467 --> 00:03:22.469 align:middle
现在来看
可维护部分

00:03:23.904 --> 00:03:26.540 align:middle
假设你不是
创建布局的

00:03:26.607 --> 00:03:27.508 align:middle
开发人员

00:03:28.342 --> 00:03:30.544 align:middle
可是老板
过来说

00:03:30.711 --> 00:03:34.047 align:middle
我要一个新的控件
就在基础内容下边

00:03:34.214 --> 00:03:35.382 align:middle
在星级评分上面

00:03:35.949 --> 00:03:36.984 align:middle
那该怎么动手开始呢？

00:03:37.818 --> 00:03:39.453 align:middle
你可能要查看
这一区域的

00:03:39.520 --> 00:03:41.188 align:middle
控件
看看约束规则

00:03:41.622 --> 00:03:44.191 align:middle
试着插入
自己的按钮 打乱布局

00:03:44.591 --> 00:03:46.660 align:middle
再重新组合
希望没有问题

00:03:47.995 --> 00:03:49.630 align:middle
正如大家所想
还有更为

00:03:49.730 --> 00:03:51.865 align:middle
可维护的方法
就是Stack View

00:03:53.467 --> 00:03:57.771 align:middle
这是iOS 9的新增功能
比以前Mac上还要好用

00:03:58.505 --> 00:04:00.974 align:middle
Stack View能让你
线性安排视图

00:03:58.505 --> 00:04:00.974 align:middle
Stack View能让你
线性安排视图

00:04:02.509 --> 00:04:04.444 align:middle
Stack View在两个平台上
有校验位

00:04:06.079 --> 00:04:08.282 align:middle
是在Auto Layout
上方搭建

00:04:10.017 --> 00:04:13.854 align:middle
可以管理子视图的
约束

00:04:13.921 --> 00:04:15.722 align:middle
当加入用户约束时
你就不用再管理

00:04:15.789 --> 00:04:17.257 align:middle
就可运行顺畅

00:04:18.858 --> 00:04:22.529 align:middle
可以有水平或
垂直定位或是坐标轴

00:04:23.797 --> 00:04:25.532 align:middle
以及其他
自定义属性

00:04:25.966 --> 00:04:27.067 align:middle
比如对齐等等

00:04:28.202 --> 00:04:30.404 align:middle
这里有全部的
水平堆栈视图

00:04:30.470 --> 00:04:32.539 align:middle
这里是上端
中心 底部

00:04:32.739 --> 00:04:33.707 align:middle
和基线对齐的示例

00:04:33.774 --> 00:04:35.042 align:middle
还有其他的
对齐功能

00:04:35.843 --> 00:04:39.012 align:middle
以及矢量堆栈视图

00:04:39.479 --> 00:04:42.883 align:middle
这里是填充示例
左对齐 居中和右对齐

00:04:44.051 --> 00:04:47.054 align:middle
现在 需要注意
一个属性

00:04:47.120 --> 00:04:49.223 align:middle
相当酷
就是分布属性

00:04:49.289 --> 00:04:51.358 align:middle
这也是NSStackView
和iOS 9的

00:04:51.425 --> 00:04:53.427 align:middle
新功能

00:04:54.561 --> 00:04:57.831 align:middle
这可以实现
沿着坐标轴分布

00:04:58.832 --> 00:05:02.202 align:middle
还可以完成
相当复杂的行为

00:04:58.832 --> 00:05:02.202 align:middle
还可以完成
相当复杂的行为

00:05:02.436 --> 00:05:04.338 align:middle
不需要理会
任何约束规则

00:05:05.072 --> 00:05:06.473 align:middle
这里是填充示例

00:05:07.241 --> 00:05:08.575 align:middle
这样我们来
填充堆栈视图

00:05:09.343 --> 00:05:12.045 align:middle
等量填充
按比例填充

00:05:12.112 --> 00:05:15.349 align:middle
根据子视图内容大小
以及等距

00:05:15.482 --> 00:05:17.384 align:middle
还有其他
分布选项

00:05:18.051 --> 00:05:21.688 align:middle
可以搭建 谢谢

00:05:26.226 --> 00:05:28.228 align:middle
可以从堆栈视图
来搭建 我给大家

00:05:28.295 --> 00:05:30.397 align:middle
Interface Builder
内部的演示

00:05:40.674 --> 00:05:41.508 align:middle
好

00:05:41.575 --> 00:05:42.676 align:middle
要装载Xcode

00:05:43.410 --> 00:05:45.913 align:middle
加上视图控制器
设置场景

00:05:45.979 --> 00:05:47.047 align:middle
我只需从
Object Library

00:05:47.114 --> 00:05:48.515 align:middle
和Media Library

00:05:48.582 --> 00:05:50.350 align:middle
拖拽一系列整包
控件和图像

00:05:50.417 --> 00:05:52.286 align:middle
大家可以看到
这些都是顶层标签

00:05:52.352 --> 00:05:53.420 align:middle
按钮和图像

00:05:53.987 --> 00:05:57.558 align:middle
现在我们继续
把这些加入布局

00:05:58.492 --> 00:06:02.696 align:middle
首先来选择
按钮和标签

00:05:58.492 --> 00:06:02.696 align:middle
首先来选择
按钮和标签

00:06:03.096 --> 00:06:04.965 align:middle
大家要注意
在IB画布上的

00:06:05.032 --> 00:06:07.935 align:middle
新按钮Stack
View按钮上的Embed

00:06:08.435 --> 00:06:11.705 align:middle
点击它的时候
就可以生成堆栈视图

00:06:11.805 --> 00:06:14.641 align:middle
确定我的对齐安排
和坐标轴

00:06:21.315 --> 00:06:23.150 align:middle
现在来调整
属性

00:06:23.483 --> 00:06:26.420 align:middle
可以看到Property Inspector
在这里

00:06:29.389 --> 00:06:32.192 align:middle
还有坐标轴
对齐方式 分布

00:06:32.259 --> 00:06:33.493 align:middle
间距以及
部分选项

00:06:33.560 --> 00:06:35.362 align:middle
大家会注意到
这里还有个加号

00:06:35.762 --> 00:06:38.599 align:middle
可以把iOS 9的尺寸
变成可类化

00:06:40.567 --> 00:06:44.037 align:middle
现在我们继续
来调整对齐安排

00:06:44.104 --> 00:06:47.875 align:middle
以前用过Auto Layout
来处理约束功能的朋友

00:06:47.941 --> 00:06:50.544 align:middle
会注意到
我们现在只需

00:06:50.611 --> 00:06:53.647 align:middle
把它从右对齐
改为左对齐

00:06:55.082 --> 00:06:56.183 align:middle
不需要碰任何约束

00:06:57.050 --> 00:07:00.220 align:middle
我们继续 将整包的其他
视图在这里做堆栈

00:06:57.050 --> 00:07:00.220 align:middle
我们继续 将整包的其他
视图在这里做堆栈

00:07:00.287 --> 00:07:03.557 align:middle
我会继续
点击我的评级

00:07:04.525 --> 00:07:08.095 align:middle
堆栈是水平方向
创建水平堆栈视图

00:07:08.161 --> 00:07:10.130 align:middle
那我继续
把这个拖拽到

00:07:10.664 --> 00:07:11.598 align:middle
第一个堆栈视图

00:07:12.666 --> 00:07:16.470 align:middle
现在来选择
图标和头部

00:07:17.938 --> 00:07:20.140 align:middle
点击Stack View按钮
最后

00:07:20.707 --> 00:07:24.711 align:middle
前三个控件和
我的布局就基本搞定

00:07:31.718 --> 00:07:33.854 align:middle
我们来继续
调整部分属性

00:07:33.921 --> 00:07:35.622 align:middle
选中上层
堆栈视图

00:07:36.456 --> 00:07:39.626 align:middle
我来继续
先调整对齐方式

00:07:39.693 --> 00:07:43.597 align:middle
不是居中 而是填充
那就真是

00:07:43.664 --> 00:07:44.865 align:middle
在整个堆栈视图填充

00:07:44.932 --> 00:07:46.800 align:middle
我还要做延伸
那么这就

00:07:46.867 --> 00:07:49.269 align:middle
有点
间距有点太大

00:07:49.603 --> 00:07:54.374 align:middle
比如说是20点
也许是25

00:07:57.044 --> 00:08:00.447 align:middle
然后在标签和按钮
的堆栈视图

00:07:57.044 --> 00:08:00.447 align:middle
然后在标签和按钮
的堆栈视图

00:08:00.514 --> 00:08:03.283 align:middle
加点间距
我来继续

00:08:03.350 --> 00:08:05.586 align:middle
点击
改变间距

00:08:05.652 --> 00:08:08.188 align:middle
我们再加上
大约5点

00:08:08.589 --> 00:08:12.793 align:middle
我想在图标和头部
之间增加间距

00:08:13.093 --> 00:08:14.394 align:middle
我可以继续

00:08:14.461 --> 00:08:16.730 align:middle
选择使用文档大纲的
堆栈视图

00:08:17.431 --> 00:08:21.635 align:middle
或者可以按下
键盘的Control-Shift

00:08:22.503 --> 00:08:25.772 align:middle
点击图标
用鼠标点击

00:08:25.839 --> 00:08:26.740 align:middle
所有视图

00:08:28.876 --> 00:08:31.044 align:middle
我们点击
离我最近的堆栈视图

00:08:31.111 --> 00:08:36.049 align:middle
水平方向的
再调高25点

00:08:36.283 --> 00:08:37.751 align:middle
我们继续 运行一下

00:08:42.054 --> 00:08:45.025 align:middle
大家看 这就是我的布局
但我们还没有把它

00:08:45.092 --> 00:08:46.527 align:middle
放在父视图里
我们会在这里

00:08:46.593 --> 00:08:48.028 align:middle
运用
约束

00:08:48.996 --> 00:08:52.466 align:middle
我来继续
将堆栈视图

00:08:52.533 --> 00:08:54.468 align:middle
放在上端
用左对齐

00:08:55.135 --> 00:08:58.672 align:middle
大家要注意
IB画布上的

00:08:59.973 --> 00:09:03.744 align:middle
另一个按钮
可以打开Pin菜单

00:08:59.973 --> 00:09:03.744 align:middle
另一个按钮
可以打开Pin菜单

00:09:03.810 --> 00:09:05.479 align:middle
以及弹出窗口

00:09:05.612 --> 00:09:08.448 align:middle
以便加入左对齐
上端约束

00:09:08.749 --> 00:09:10.250 align:middle
点击Add按钮时

00:09:11.618 --> 00:09:13.086 align:middle
就会
加入约束

00:09:13.420 --> 00:09:16.290 align:middle
现在 我们还想
加入底部和右对齐

00:09:16.690 --> 00:09:18.258 align:middle
但是在
Interface Builder

00:09:18.325 --> 00:09:19.426 align:middle
还有另一个
技巧可以使用

00:09:19.593 --> 00:09:21.495 align:middle
可以在两个视图
中间拖拽

00:09:21.562 --> 00:09:23.230 align:middle
我准备从堆栈视图
拖拽到

00:09:23.830 --> 00:09:26.667 align:middle
父视图
并选中Trailing Space

00:09:26.733 --> 00:09:27.868 align:middle
到Container Margin

00:09:28.435 --> 00:09:29.636 align:middle
这就会添加
约束

00:09:29.736 --> 00:09:33.307 align:middle
熟悉菜单的朋友
可以看到

00:09:33.373 --> 00:09:35.108 align:middle
这里有多了
另外几个功能

00:09:36.610 --> 00:09:39.847 align:middle
我们会在底部
添加另外一个约束

00:09:40.480 --> 00:09:42.015 align:middle
在底部的布局指南中
添加垂直间距

00:09:42.850 --> 00:09:44.718 align:middle
现在双击
约束

00:09:45.819 --> 00:09:49.857 align:middle
设置约束
使之紧靠边缘

00:09:52.059 --> 00:09:53.560 align:middle
现在运行一下

00:09:55.329 --> 00:09:57.197 align:middle
就可以看到和父视图吻合

00:09:57.264 --> 00:09:59.032 align:middle
这里有点不对劲

00:09:59.333 --> 00:10:01.068 align:middle
来看一下
段控件

00:09:59.333 --> 00:10:01.068 align:middle
来看一下
段控件

00:10:01.435 --> 00:10:02.469 align:middle
有点太长

00:10:02.636 --> 00:10:03.504 align:middle
是什么情况？

00:10:03.770 --> 00:10:06.773 align:middle
实际上 如果做旋转
会有些压扁变形

00:10:08.609 --> 00:10:13.113 align:middle
上端的堆栈视图中
是在看子视图的方向

00:10:13.180 --> 00:10:14.848 align:middle
所有这些都有着
同样的优先级

00:10:15.115 --> 00:10:17.050 align:middle
同样的内容吸附性
优先级

00:10:17.117 --> 00:10:19.152 align:middle
以及内容
压缩阻力优先级

00:10:19.686 --> 00:10:22.556 align:middle
稍后 我们会
详细介绍这方面内容

00:10:22.623 --> 00:10:24.992 align:middle
不过现在大家需要了解
要告知

00:10:25.058 --> 00:10:26.660 align:middle
Stack View
哪一个会赢

00:10:26.960 --> 00:10:30.330 align:middle
我只需选择
段控件

00:10:30.964 --> 00:10:34.101 align:middle
进入大小检测器
选择优先级部分

00:10:35.202 --> 00:10:37.771 align:middle
继续 调整吸附性
优先级

00:10:38.071 --> 00:10:40.307 align:middle
因为我希望 段控件
吸附性更大些

00:10:41.542 --> 00:10:44.344 align:middle
把250改成260

00:10:44.711 --> 00:10:46.813 align:middle
只需要比默认值
调高一点即可

00:10:48.248 --> 00:10:52.586 align:middle
与之相似 我想
调整压缩阻力 不要出杂音

00:10:52.853 --> 00:10:58.058 align:middle
我来继续提高
垂直内容压缩阻力

00:10:58.125 --> 00:11:00.761 align:middle
从750改到760

00:10:58.125 --> 00:11:00.761 align:middle
从750改到760

00:11:01.328 --> 00:11:02.696 align:middle
现在运行一下

00:11:04.131 --> 00:11:05.666 align:middle
看起来好多了

00:11:07.801 --> 00:11:08.936 align:middle
要记住 谢谢

00:11:09.002 --> 00:11:10.337 align:middle
谢谢

00:11:14.141 --> 00:11:15.709 align:middle
还记得最开始的问题么？

00:11:16.610 --> 00:11:18.445 align:middle
老板想让我们
加上新的控件

00:11:19.379 --> 00:11:21.148 align:middle
这里就是具体做法

00:11:21.215 --> 00:11:24.852 align:middle
告诉老板 没问题
可以搞定

00:11:25.185 --> 00:11:28.222 align:middle
然后回到桌旁
打开故事板

00:11:29.756 --> 00:11:30.724 align:middle
搜索控件

00:11:30.791 --> 00:11:32.125 align:middle
本例中 我们
会用按钮...

00:11:32.459 --> 00:11:34.294 align:middle
从图像库里
把它拖拽出来

00:11:34.795 --> 00:11:38.065 align:middle
再找到准备
放入的堆栈视图放进去

00:11:39.032 --> 00:11:40.300 align:middle
然后去找杯咖啡

00:11:49.142 --> 00:11:52.613 align:middle
我还想指出一点
Stack View处理

00:11:52.679 --> 00:11:54.181 align:middle
子视图的Hidden效果极好

00:11:55.015 --> 00:11:56.183 align:middle
可以在程序里设置或通过

00:11:56.250 --> 00:11:58.051 align:middle
Interface Builder
设置

00:11:58.118 --> 00:12:02.322 align:middle
看似是崩溃
或是取自视图层

00:11:58.118 --> 00:12:02.322 align:middle
看似是崩溃
或是取自视图层

00:12:02.389 --> 00:12:03.991 align:middle
但它仍属于
Stack View

00:12:04.591 --> 00:12:08.462 align:middle
如果我标出Hidden 大家看
一切都会因此做调整

00:12:08.729 --> 00:12:10.430 align:middle
我们觉得 大家
会认为这些是有用的内容

00:12:14.801 --> 00:12:17.171 align:middle
这是Stack View的演示

00:12:23.310 --> 00:12:25.879 align:middle
我还要说明
动画效果也非常容易

00:12:26.980 --> 00:12:28.048 align:middle
大概是这样

00:12:29.550 --> 00:12:33.987 align:middle
使用带有Duration块的
UIView Animate

00:12:34.054 --> 00:12:35.789 align:middle
继续来调整
子视图的Hidden属性

00:12:35.856 --> 00:12:36.957 align:middle
我们会特殊处理这些

00:12:37.157 --> 00:12:39.826 align:middle
或者可以把其他
可动画的属性加在这里

00:12:39.893 --> 00:12:41.962 align:middle
进行调整
包括堆栈视图

00:12:42.362 --> 00:12:43.864 align:middle
本身的属性

00:12:44.198 --> 00:12:47.201 align:middle
例如 调整坐标轴
这样是

00:12:47.267 --> 00:12:48.468 align:middle
在水平和垂直之间

00:12:48.769 --> 00:12:50.003 align:middle
你会看到
有些内容非常酷

00:12:56.276 --> 00:12:59.213 align:middle
当然 在Cocoa中
是这样子的

00:12:59.279 --> 00:13:01.281 align:middle
使用
NSAnimationContext

00:12:59.279 --> 00:13:01.281 align:middle
使用
NSAnimationContext

00:13:01.348 --> 00:13:02.482 align:middle
运行动画组

00:13:05.252 --> 00:13:06.620 align:middle
大家看到了什么？

00:13:06.920 --> 00:13:08.488 align:middle
我们先来看
API

00:13:09.423 --> 00:13:11.625 align:middle
很简单 都很熟悉
非常简单

00:13:12.226 --> 00:13:13.861 align:middle
有坐标轴
或者是指定方向

00:13:13.994 --> 00:13:16.697 align:middle
来描述堆栈
视图是水平还是垂直

00:13:17.231 --> 00:13:18.866 align:middle
我们看到了
分布 对齐

00:13:19.233 --> 00:13:21.001 align:middle
和间距属性

00:13:21.635 --> 00:13:23.437 align:middle
接着就有办法
添加新的

00:13:23.504 --> 00:13:24.471 align:middle
堆栈内容

00:13:24.638 --> 00:13:25.806 align:middle
添加并安排子视图

00:13:25.873 --> 00:13:27.875 align:middle
还可以插入
并删除

00:13:28.542 --> 00:13:31.011 align:middle
希望大家注意
Arrange Subview属性

00:13:32.312 --> 00:13:37.918 align:middle
这个属性可以恢复
属于堆栈视图的

00:13:38.852 --> 00:13:40.254 align:middle
所有视图
的子集

00:13:40.621 --> 00:13:43.290 align:middle
可以恢复目前堆栈
的视图

00:13:44.892 --> 00:13:47.694 align:middle
意思是说
可以实现没有被

00:13:47.761 --> 00:13:50.397 align:middle
Stack View
堆栈的视图

00:13:50.464 --> 00:13:52.699 align:middle
例如装饰器或叠加层
并实现洁净的视图层次

00:13:52.766 --> 00:13:54.568 align:middle
我们觉得 大家
会认为这些是有用的内容

00:13:55.569 --> 00:14:00.007 align:middle
在这些情况下大家只需要调用Add
Subview即可

00:13:55.569 --> 00:14:00.007 align:middle
在这些情况下大家只需要调用Add
Subview即可

00:14:01.375 --> 00:14:02.509 align:middle
在这里我们看到什么？

00:14:03.243 --> 00:14:06.813 align:middle
Stack View很容易设计
很容易维护

00:14:08.182 --> 00:14:10.851 align:middle
相信大家会
构建很多这类东西

00:14:11.585 --> 00:14:14.321 align:middle
因为Stack View
是关于布局

00:14:16.256 --> 00:14:20.027 align:middle
因此不需要
修改自己的背景

00:14:20.294 --> 00:14:21.929 align:middle
我们可以实现
部分优化

00:14:22.162 --> 00:14:24.865 align:middle
因此我们有了特殊的
Transform Layer类

00:14:24.932 --> 00:14:28.101 align:middle
不需要自我修改就可以让
Stack View运行更快

00:14:28.202 --> 00:14:30.170 align:middle
比正常视图
更有表现力

00:14:30.704 --> 00:14:31.972 align:middle
因此是轻量级的

00:14:38.812 --> 00:14:41.782 align:middle
我们讨论过的示例
是有着许多约束的

00:14:42.449 --> 00:14:45.552 align:middle
有着些许
维护难度

00:14:46.486 --> 00:14:48.288 align:middle
从四个到若干堆栈视图都有涉及
这读起来要好得多

00:14:49.556 --> 00:14:52.826 align:middle
我们觉得大家可以用
堆栈视图设计出

00:14:53.260 --> 00:14:56.330 align:middle
大部分用户界面
所以建议从Stack View开始

00:14:56.830 --> 00:14:58.165 align:middle
使用所需约束

00:14:58.599 --> 00:14:59.800 align:middle
这就是Stack View

00:15:06.039 --> 00:15:09.877 align:middle
有些情况下
不只要用到Stack View

00:15:10.844 --> 00:15:11.945 align:middle
就需要...

00:15:12.012 --> 00:15:14.715 align:middle
我想邀请朋友
卡西亚来聊聊

00:15:14.781 --> 00:15:16.483 align:middle
布局引擎

00:15:22.322 --> 00:15:23.757 align:middle
大家好
我是卡西亚

00:15:23.824 --> 00:15:26.693 align:middle
我在iOS Keyboards
Team就职 我来这里和大家

00:15:26.760 --> 00:15:28.896 align:middle
聊聊适当的处理
和提供布局引擎

00:15:28.962 --> 00:15:31.965 align:middle
它有些任性
只希望是由你来完成

00:15:32.032 --> 00:15:34.268 align:middle
如果大家处理正确
它就可以正确完成任务

00:15:34.968 --> 00:15:37.237 align:middle
正如大家
在本周中所见

00:15:37.304 --> 00:15:39.806 align:middle
我们有新的自适配环境
以及所有

00:15:39.873 --> 00:15:43.043 align:middle
不同屏幕
大小的iPhone

00:15:43.110 --> 00:15:46.213 align:middle
关键的一点在于
在所有这些环境下

00:15:46.280 --> 00:15:47.848 align:middle
对布局属性进行规划

00:15:47.915 --> 00:15:50.951 align:middle
而不是花费太多时间
在每个屏幕上

00:15:51.018 --> 00:15:51.952 align:middle
进行重复

00:15:52.386 --> 00:15:53.954 align:middle
大多数人
一想到约束

00:15:54.021 --> 00:15:55.455 align:middle
都是这么认为

00:15:55.756 --> 00:15:58.091 align:middle
你生成部分视图
用不同方式

00:15:58.158 --> 00:16:01.461 align:middle
创建部分约束
相当于是把它们扔进黑洞

00:15:58.158 --> 00:16:01.461 align:middle
创建部分约束
相当于是把它们扔进黑洞

00:16:01.995 --> 00:16:02.829 align:middle
会出现问题

00:16:03.497 --> 00:16:04.831 align:middle
在布局会弹出
另一端

00:16:05.199 --> 00:16:07.568 align:middle
希望是你的 也可能不是

00:16:07.634 --> 00:16:11.572 align:middle
今天我真正想做的是
试着解开

00:16:11.638 --> 00:16:13.807 align:middle
部分谜团

00:16:13.874 --> 00:16:16.109 align:middle
那么每次都会
碰到布局

00:16:16.176 --> 00:16:18.478 align:middle
首先 我们来谈谈
改变约束

00:16:19.746 --> 00:16:22.082 align:middle
我谈到改变约束时
主要是在谈论

00:16:22.149 --> 00:16:24.318 align:middle
激活和关闭
约束

00:16:24.918 --> 00:16:26.720 align:middle
以前用过
Auto Layout的朋友

00:16:26.787 --> 00:16:29.389 align:middle
以及也许还记得
我们起初的

00:16:29.456 --> 00:16:31.925 align:middle
对视图增加和删除
给出的约束的概念

00:16:32.359 --> 00:16:33.627 align:middle
不要再这么做了

00:16:33.727 --> 00:16:35.696 align:middle
激活和关闭
更好些

00:16:35.762 --> 00:16:38.799 align:middle
这是二者NSLayout
约束的类方法

00:16:39.366 --> 00:16:42.636 align:middle
使用
激活和关闭

00:16:42.703 --> 00:16:44.037 align:middle
有一些
真正的好处

00:16:44.371 --> 00:16:45.873 align:middle
约束发现
自己的容器

00:16:45.939 --> 00:16:47.140 align:middle
这样更有效率

00:16:47.641 --> 00:16:49.109 align:middle
你不必拥有
自己布局中的

00:16:49.176 --> 00:16:50.577 align:middle
所有视图
才能以便使用

00:16:51.311 --> 00:16:53.914 align:middle
这其实可以总结成
不要再使用

00:16:53.981 --> 00:16:55.082 align:middle
添加和删除

00:16:55.549 --> 00:16:56.884 align:middle
要用激活和关闭

00:16:57.584 --> 00:17:00.654 align:middle
考虑改变约束时
还需要

00:16:57.584 --> 00:17:00.654 align:middle
考虑改变约束时
还需要

00:17:01.021 --> 00:17:03.357 align:middle
注意
几个问题

00:17:04.424 --> 00:17:07.361 align:middle
第一 永远不要关闭
self.view.constraints

00:17:07.426 --> 00:17:08.996 align:middle
中的所有内容

00:17:09.195 --> 00:17:10.664 align:middle
如果有谁真这么做了

00:17:10.731 --> 00:17:13.032 align:middle
可能会遇到
一些奇怪的问题

00:17:13.634 --> 00:17:15.702 align:middle
那个数组中的
并非所有的约束都属于你

00:17:16.569 --> 00:17:18.605 align:middle
比如在视图中
用于自行设置的功能

00:17:18.972 --> 00:17:20.641 align:middle
那就会出现
奇怪的问题

00:17:21.241 --> 00:17:22.342 align:middle
所以不要这么做

00:17:22.843 --> 00:17:24.310 align:middle
一会儿就会知道答案

00:17:25.078 --> 00:17:27.614 align:middle
相反只需要
对需要稍后修改的约束

00:17:27.681 --> 00:17:30.484 align:middle
进行参考
无论是在约束数组

00:17:30.551 --> 00:17:32.586 align:middle
还是在
单独的约束中均是如此

00:17:32.686 --> 00:17:35.055 align:middle
这样就按照自己想要的方式
管理内容了

00:17:35.155 --> 00:17:37.391 align:middle
我们先来看
改变约束

00:17:44.031 --> 00:17:47.100 align:middle
这里是个 iPad app
我在里面做了

00:17:47.167 --> 00:17:52.139 align:middle
一组行星
都按照iPad设置好了

00:17:52.206 --> 00:17:54.074 align:middle
还有iPhone模式

00:17:54.141 --> 00:17:55.976 align:middle
多任务处理
应该没有问题

00:17:56.610 --> 00:17:59.012 align:middle
只是我并没有当真
删除任何约束

00:17:59.613 --> 00:18:02.049 align:middle
所以当我从漂亮的
垂直简约布局回到

00:17:59.613 --> 00:18:02.049 align:middle
所以当我从漂亮的
垂直简约布局回到

00:18:02.115 --> 00:18:04.852 align:middle
平常的布局时
之前所有

00:18:04.918 --> 00:18:06.553 align:middle
漂亮的曲线
都会消失不见

00:18:07.321 --> 00:18:09.289 align:middle
我可能
首先想做的是

00:18:09.356 --> 00:18:12.125 align:middle
进行修正

00:18:12.192 --> 00:18:15.963 align:middle
删除父视图中的
所有约束

00:18:19.466 --> 00:18:20.934 align:middle
当我这么做时
还需要重新

00:18:21.001 --> 00:18:22.936 align:middle
激活任何
共享约束

00:18:26.440 --> 00:18:29.943 align:middle
但是如果尝试这种方式
你将看到

00:18:30.110 --> 00:18:31.645 align:middle
会出现各种
令人兴奋的事情

00:18:32.579 --> 00:18:34.314 align:middle
这里又是我的正常布局
非常好

00:18:34.915 --> 00:18:37.184 align:middle
现在还是很好

00:18:38.852 --> 00:18:40.521 align:middle
嗯 不太好了

00:18:41.121 --> 00:18:43.524 align:middle
如果我返回
正常布局

00:18:43.590 --> 00:18:46.126 align:middle
我其实不希望
这些行星有那么大

00:18:46.493 --> 00:18:47.928 align:middle
这不是
我的本意

00:18:48.562 --> 00:18:49.897 align:middle
怎么才能妥当处理呢？

00:18:49.963 --> 00:18:52.799 align:middle
我准备花些时间
抓取这个代码 这样

00:18:52.866 --> 00:18:55.702 align:middle
就不必看我把全文再打一遍了出来了

00:18:56.103 --> 00:18:58.071 align:middle
那么在特性集合中
已经改变了 只需要

00:18:58.138 --> 00:19:02.543 align:middle
查看每个环境下
你需要改变的

00:18:58.138 --> 00:19:02.543 align:middle
查看每个环境下
你需要改变的

00:19:02.609 --> 00:19:04.711 align:middle
另一组约束
是否激活

00:19:05.012 --> 00:19:07.147 align:middle
我现在有两个数组
各有8个约束

00:19:07.481 --> 00:19:10.584 align:middle
以区分行星的
垂直

00:19:10.918 --> 00:19:12.719 align:middle
对齐状况

00:19:12.953 --> 00:19:14.721 align:middle
如果我查看
确认是激活状态

00:19:14.988 --> 00:19:17.524 align:middle
删除或关闭
我不再需要的内容

00:19:17.591 --> 00:19:21.061 align:middle
再激活新的部分
现在看上去好多了

00:19:23.530 --> 00:19:24.998 align:middle
正常

00:19:28.368 --> 00:19:29.736 align:middle
还是正常

00:19:30.637 --> 00:19:33.707 align:middle
简约再回到正常

00:19:34.141 --> 00:19:35.542 align:middle
这就是我
实际要的结果

00:19:39.046 --> 00:19:40.047 align:middle
哦 谢谢大家

00:19:40.547 --> 00:19:42.482 align:middle
Auto Layout
很酷的一点是

00:19:42.549 --> 00:19:44.852 align:middle
你还可以将
约束改变做动画处理

00:19:45.352 --> 00:19:49.389 align:middle
这里有个双击手势
可在正常和简约布局间

00:19:49.456 --> 00:19:53.093 align:middle
进行动画处理
如果父视图需要的话

00:19:53.160 --> 00:19:56.663 align:middle
只要在调用布局时
拖拽激活和关闭

00:19:56.730 --> 00:19:58.565 align:middle
进入动画块即可

00:19:59.066 --> 00:20:02.769 align:middle
大家会看到 如果我双击
就可以在这组视图和

00:19:59.066 --> 00:20:02.769 align:middle
大家会看到 如果我双击
就可以在这组视图和

00:20:03.003 --> 00:20:05.839 align:middle
两行代码之间
轻松移动

00:20:06.373 --> 00:20:09.877 align:middle
如果想来点花样
可以参照所有

00:20:09.943 --> 00:20:12.980 align:middle
这些单独的约束
使用关键帧动画

00:20:13.647 --> 00:20:16.850 align:middle
给app中的内容
加点料

00:20:17.951 --> 00:20:19.486 align:middle
这就是

00:20:19.553 --> 00:20:21.455 align:middle
适当激活
和关闭约束

00:20:21.588 --> 00:20:24.791 align:middle
我们对改变约束
了解了哪些内容？

00:20:25.325 --> 00:20:26.226 align:middle
对 第一点

00:20:26.293 --> 00:20:28.896 align:middle
不要关闭
self.view.constraints

00:20:28.962 --> 00:20:30.030 align:middle
对此我们非常清楚了

00:20:30.430 --> 00:20:31.965 align:middle
参考约束
将在将来

00:20:32.032 --> 00:20:33.100 align:middle
带来影响

00:20:33.467 --> 00:20:35.369 align:middle
会让所有内容
都运行地更好

00:20:35.435 --> 00:20:36.870 align:middle
可以实现很酷的效果
比如动画

00:20:37.337 --> 00:20:39.673 align:middle
大家也可以将
改变约束做动画处理

00:20:40.040 --> 00:20:42.176 align:middle
只要拖拽入
View Animation块即可

00:20:42.543 --> 00:20:43.710 align:middle
相当非常酷

00:20:43.777 --> 00:20:45.546 align:middle
我们现在还处于
设计布局的

00:20:45.612 --> 00:20:47.514 align:middle
基础部分
我们仍然还有视图

00:20:47.581 --> 00:20:49.550 align:middle
和约束并把他们
放入布局引擎

00:20:50.117 --> 00:20:52.319 align:middle
但是如果要为
布局引擎提供更多信息

00:20:52.386 --> 00:20:56.223 align:middle
在所有这些
自适配环境下

00:20:56.290 --> 00:20:58.125 align:middle
我们可以获得很多
更好的结果

00:20:59.359 --> 00:21:02.296 align:middle
我们已经把所有
约束都安排好

00:20:59.359 --> 00:21:02.296 align:middle
我们已经把所有
约束都安排好

00:21:02.362 --> 00:21:03.864 align:middle
现在我想讲一讲
大小尺寸

00:21:04.898 --> 00:21:06.934 align:middle
那么谜题三
就是视图大小

00:21:08.335 --> 00:21:10.037 align:middle
有两种不同方法
来规定视图大小

00:21:10.237 --> 00:21:11.605 align:middle
这显而易见

00:21:11.672 --> 00:21:14.741 align:middle
我希望视图宽200点
高300点

00:21:15.309 --> 00:21:17.344 align:middle
相反 还可以有
不同方式

00:21:17.411 --> 00:21:21.281 align:middle
生成约束
以便和我们现在

00:21:21.381 --> 00:21:23.884 align:middle
所有不同的
环境相匹配

00:21:23.951 --> 00:21:26.720 align:middle
我们先从
其中的内部内容尺寸开始

00:21:27.354 --> 00:21:29.656 align:middle
许多视图都有这个
如标签和图像视图

00:21:30.190 --> 00:21:32.559 align:middle
基本上就是
具备内容后视图

00:21:32.626 --> 00:21:34.761 align:middle
应该具备的
尺寸大小

00:21:35.696 --> 00:21:38.665 align:middle
引擎看着它
试图解决这个

00:21:39.199 --> 00:21:43.403 align:middle
尺寸的布局问题
就会生成

00:21:43.470 --> 00:21:45.072 align:middle
内部尺寸约束

00:21:45.806 --> 00:21:48.876 align:middle
不过 它无法确保
布局大小 因为自适配

00:21:48.942 --> 00:21:51.378 align:middle
这类问题所致
它需要少许

00:21:51.445 --> 00:21:52.779 align:middle
伸缩视图

00:21:52.913 --> 00:21:55.549 align:middle
用户不希望出现
这类情况

00:21:55.616 --> 00:21:56.950 align:middle
但你可能会
在这里那里有几个

00:21:57.017 --> 00:21:58.118 align:middle
多余的空隙点

00:21:58.919 --> 00:22:02.055 align:middle
可以用这个来
展示你的视图

00:21:58.919 --> 00:22:02.055 align:middle
可以用这个来
展示你的视图

00:22:02.122 --> 00:22:04.024 align:middle
表明你不一定
确定标签

00:22:04.091 --> 00:22:06.126 align:middle
要这么宽才行

00:22:06.193 --> 00:22:07.961 align:middle
就是和内容
一样宽

00:22:09.263 --> 00:22:11.131 align:middle
但是如果需要定义
特定的视图尺寸

00:22:11.965 --> 00:22:13.200 align:middle
那就从约束开始

00:22:13.901 --> 00:22:15.702 align:middle
这样做
非常容易

00:22:16.069 --> 00:22:18.172 align:middle
视图应该是
我的父视图的宽度一半

00:22:18.672 --> 00:22:19.806 align:middle
这里应该是
我的父视图的

00:22:19.873 --> 00:22:20.774 align:middle
的高度的四分之三

00:22:21.141 --> 00:22:22.743 align:middle
这个应该是
和旁边的视图等大

00:22:23.810 --> 00:22:26.480 align:middle
但是如果绝对需要的话
还可以覆盖

00:22:26.547 --> 00:22:27.714 align:middle
内部内容尺寸

00:22:28.048 --> 00:22:30.284 align:middle
这样做 只能
是出于两个原因

00:22:30.784 --> 00:22:33.020 align:middle
其一是你无法
从约束那里

00:22:33.086 --> 00:22:34.087 align:middle
获得尺寸信息

00:22:35.022 --> 00:22:38.192 align:middle
其二可能是如果你在
视图中使用了自定义绘图

00:22:38.258 --> 00:22:40.394 align:middle
但在很多情况下
你还可以设置

00:22:40.794 --> 00:22:43.363 align:middle
这个视图的约束
而不必去做任何

00:22:43.430 --> 00:22:45.399 align:middle
需要覆盖内部
内容尺寸的事情

00:22:45.933 --> 00:22:47.868 align:middle
如果确实覆盖了
内部内容尺寸

00:22:47.935 --> 00:22:50.170 align:middle
你还要负责
在出现滑动类改变

00:22:50.470 --> 00:22:53.173 align:middle
或文本改变的时候
使之失效

00:22:53.240 --> 00:22:55.609 align:middle
这样你需要获得
动态文本 本地化

00:22:55.676 --> 00:22:59.546 align:middle
或任何这类需要
导致视图

00:22:59.613 --> 00:23:01.315 align:middle
需要重新计算
内部尺寸的内容

00:22:59.613 --> 00:23:01.315 align:middle
需要重新计算
内部尺寸的内容

00:23:02.149 --> 00:23:05.352 align:middle
我们现在来看
用约束设置视图

00:23:05.419 --> 00:23:07.421 align:middle
而不使用任何
特殊点的尺寸

00:23:07.487 --> 00:23:08.856 align:middle
都是在关系当中

00:23:09.022 --> 00:23:10.457 align:middle
这里是个
标准图像视图

00:23:11.024 --> 00:23:13.126 align:middle
我希望在这是
视图的主要部分

00:23:13.760 --> 00:23:16.797 align:middle
因此我想让宽度
等于它所在

00:23:16.864 --> 00:23:18.565 align:middle
视图的四分之三

00:23:18.632 --> 00:23:20.534 align:middle
这意味着在它
所在的每个环境

00:23:20.767 --> 00:23:22.402 align:middle
宽度都是
该视图的四分之三

00:23:22.703 --> 00:23:23.971 align:middle
先来设置

00:23:25.072 --> 00:23:27.975 align:middle
然后获得这一比例
我是从

00:23:28.075 --> 00:23:31.311 align:middle
父视图计算
再乘以1.5

00:23:31.378 --> 00:23:33.046 align:middle
来得到
高度值

00:23:33.647 --> 00:23:35.282 align:middle
这样在多任务处理时
可以在所有设备

00:23:35.349 --> 00:23:38.385 align:middle
和所有模式下
获得一致的布局

00:23:39.486 --> 00:23:43.390 align:middle
因此视图尺寸
很重要 对比例

00:23:43.457 --> 00:23:45.859 align:middle
依赖性越高
获得优质布局的可能性越大

00:23:45.926 --> 00:23:48.362 align:middle
这将非常便于你
在所有这些

00:23:48.428 --> 00:23:50.330 align:middle
我们提供的不同
屏幕上放置内容

00:23:50.764 --> 00:23:52.900 align:middle
很多人在考虑
尺寸视图时

00:23:52.966 --> 00:23:55.636 align:middle
都会考虑到一个问题
就是自适应调整视图

00:23:56.203 --> 00:23:58.772 align:middle
特别是自适应
调整表视图单元格

00:23:59.640 --> 00:24:02.743 align:middle
这些单元格从
其内容中获得高度

00:23:59.640 --> 00:24:02.743 align:middle
这些单元格从
其内容中获得高度

00:24:03.243 --> 00:24:05.646 align:middle
所以不必在表视图中
从上到下

00:24:05.712 --> 00:24:06.780 align:middle
都是一个单元格大小

00:24:06.847 --> 00:24:08.549 align:middle
可以根据
其中的内容

00:24:08.615 --> 00:24:09.716 align:middle
确定不同的大小

00:24:10.284 --> 00:24:11.518 align:middle
实际上不必

00:24:11.585 --> 00:24:13.820 align:middle
自己计算
每行的高度

00:24:14.221 --> 00:24:15.489 align:middle
约束可以帮助
完成这些工作

00:24:15.689 --> 00:24:19.426 align:middle
所以自适应调整

00:24:20.194 --> 00:24:21.995 align:middle
需要从约束中获得大小尺寸

00:24:22.429 --> 00:24:24.064 align:middle
这里也不是以点来计

00:24:24.131 --> 00:24:25.933 align:middle
而是按照比例
是依赖例如

00:24:25.999 --> 00:24:28.068 align:middle
内部内容尺寸这类东西
帮你完成

00:24:28.368 --> 00:24:32.172 align:middle
表视图单元格
已经定义好宽度

00:24:32.239 --> 00:24:33.373 align:middle
所以只需要考虑高度

00:24:33.841 --> 00:24:35.809 align:middle
可以利用比例
来完成

00:24:36.343 --> 00:24:37.678 align:middle
这里是个表视图单元格

00:24:38.011 --> 00:24:40.781 align:middle
标签应该是
图像视图的两倍宽

00:24:41.481 --> 00:24:43.717 align:middle
中间有一点
空隙

00:24:44.985 --> 00:24:48.488 align:middle
因此当我的标签因为
文本内容多更高些时

00:24:49.289 --> 00:24:52.259 align:middle
表视图单元格会
相应增加与之适应

00:24:53.193 --> 00:24:55.696 align:middle
我们现在来看个
短的演示了解是怎么回事

00:25:02.369 --> 00:25:04.872 align:middle
好这里是表视图单元格
我已经

00:25:04.938 --> 00:25:06.540 align:middle
设置了
水平方向束缚

00:25:07.140 --> 00:25:09.243 align:middle
那么如果就这样
设计和运行

00:25:09.309 --> 00:25:12.145 align:middle
结果不会完全
符合我的预期

00:25:13.747 --> 00:25:15.616 align:middle
所有内容都会
有些变形

00:25:15.682 --> 00:25:17.751 align:middle
预计的表视图
高度为60

00:25:17.818 --> 00:25:19.520 align:middle
所以默认
画在这里

00:25:19.920 --> 00:25:22.956 align:middle
我想做的是
告诉表视图单元格

00:25:23.323 --> 00:25:28.195 align:middle
如果标签内容增加
它也要随之改变

00:25:28.262 --> 00:25:33.600 align:middle
我通过把顶锚和底锚
放在一起来实现

00:25:34.001 --> 00:25:36.470 align:middle
那么标签就会继续
拉动表视图

00:25:36.537 --> 00:25:38.305 align:middle
单元格的尺寸
使其更高

00:25:38.872 --> 00:25:42.843 align:middle
顶边距 底边距
到容器边缘

00:25:43.177 --> 00:25:44.378 align:middle
来看看效果怎样

00:25:47.247 --> 00:25:48.582 align:middle
好多了

00:25:49.116 --> 00:25:50.617 align:middle
但还是和我
想要的不太一样

00:25:50.751 --> 00:25:53.086 align:middle
因为我们是
这样的单元格

00:25:53.420 --> 00:25:55.055 align:middle
而在图像中切掉了

00:25:55.122 --> 00:25:56.590 align:middle
一部分 因为标签
不够高

00:25:57.124 --> 00:25:59.793 align:middle
为解决这个问题
我们可以利用

00:25:59.893 --> 00:26:02.329 align:middle
视图可以延伸至
内部内容尺寸以外的特性

00:25:59.893 --> 00:26:02.329 align:middle
视图可以延伸至
内部内容尺寸以外的特性

00:26:02.396 --> 00:26:05.832 align:middle
告诉标签
它应该至少

00:26:05.899 --> 00:26:08.435 align:middle
和图像一样高才行

00:26:09.336 --> 00:26:11.705 align:middle
所以标签会
在周围多一些间隙

00:26:11.772 --> 00:26:17.344 align:middle
可以允许
从图像的高度开始

00:26:17.578 --> 00:26:19.146 align:middle
再有所延伸
至合适高度为止

00:26:19.213 --> 00:26:20.914 align:middle
大家看不到
额外的间距

00:26:20.981 --> 00:26:22.316 align:middle
文本位置很好
都是居中

00:26:22.783 --> 00:26:25.052 align:middle
但是标签仍在
定义表视图

00:26:25.118 --> 00:26:27.387 align:middle
单元格的高度

00:26:28.288 --> 00:26:29.623 align:middle
现在看起来好多了

00:26:29.790 --> 00:26:31.792 align:middle
我所有的单元格
大小都合适

00:26:32.326 --> 00:26:34.127 align:middle
我可以看到
想看的所有内容

00:26:34.194 --> 00:26:36.530 align:middle
在创建自适应
调整的表视图单元格时

00:26:36.597 --> 00:26:38.432 align:middle
需要做的就是
这些

00:26:39.132 --> 00:26:41.468 align:middle
只要确认所有内容
都完全定义即可

00:26:47.040 --> 00:26:49.443 align:middle
谢谢好
那么关于视图大小

00:26:49.510 --> 00:26:50.644 align:middle
我们讲了些什么呢？

00:26:50.711 --> 00:26:52.079 align:middle
部分视图具备
内部内容尺寸

00:26:52.145 --> 00:26:54.147 align:middle
利用这个属性
来定义其他

00:26:54.214 --> 00:26:55.382 align:middle
视图的关系

00:26:55.449 --> 00:26:57.818 align:middle
可能的话 约束应该
定义大小

00:26:58.218 --> 00:27:00.654 align:middle
如果不能 则要覆盖
内部内容尺寸

00:26:58.218 --> 00:27:00.654 align:middle
如果不能 则要覆盖
内部内容尺寸

00:27:01.021 --> 00:27:03.590 align:middle
但是要确保这么做时
将内部内容尺寸设为无效

00:27:03.891 --> 00:27:05.626 align:middle
对于自适应调整
视图 需要

00:27:05.692 --> 00:27:07.361 align:middle
完全在约束中
定义尺寸

00:27:08.495 --> 00:27:09.730 align:middle
在哪里设计
布局呢？

00:27:09.930 --> 00:27:11.365 align:middle
我们有
原始信息

00:27:12.165 --> 00:27:14.001 align:middle
我们会加上
部分尺寸约束

00:27:14.768 --> 00:27:16.537 align:middle
从我们放在
一起的视图

00:27:16.603 --> 00:27:18.005 align:middle
得出内部内容尺寸

00:27:18.205 --> 00:27:19.506 align:middle
接下来是什么？

00:27:19.573 --> 00:27:22.476 align:middle
怎样帮助布局
引擎了解我们需要什么？

00:27:22.910 --> 00:27:24.144 align:middle
我们要给出一些优先级

00:27:24.878 --> 00:27:27.514 align:middle
这就是谜题5

00:27:27.948 --> 00:27:30.083 align:middle
如果接触
Auto Layout已有一段时间

00:27:30.150 --> 00:27:31.451 align:middle
可能会遇到过
这样的情况

00:27:31.518 --> 00:27:33.987 align:middle
即视图没有
按照父视图所设置

00:27:34.054 --> 00:27:35.756 align:middle
位于相应位置

00:27:36.223 --> 00:27:38.825 align:middle
也许在每次设计和运行中
都会有所不同

00:27:39.126 --> 00:27:41.828 align:middle
或是在旋转或
修改尺寸后 都会有所不同

00:27:42.296 --> 00:27:43.830 align:middle
这就是歧义

00:27:44.464 --> 00:27:46.166 align:middle
出现这种情况
可能是由于两种不同原因

00:27:46.733 --> 00:27:48.435 align:middle
一是在你需要
的方向中

00:27:48.502 --> 00:27:50.070 align:middle
并没有
足够的约束

00:27:50.671 --> 00:27:54.641 align:middle
例如 我想把Saturn
放在中间的位置

00:27:54.708 --> 00:27:57.778 align:middle
就是这些虚线上
但是当我运行

00:27:57.845 --> 00:28:00.747 align:middle
app时 它却跑到
左边或右边

00:27:57.845 --> 00:28:00.747 align:middle
app时 它却跑到
左边或右边

00:28:01.281 --> 00:28:02.783 align:middle
这也许是说明
我没有足够的

00:28:02.850 --> 00:28:05.519 align:middle
水平约束告知
引擎该把Saturn放在哪儿

00:28:05.686 --> 00:28:07.487 align:middle
垂直方向 看似还好
那不错

00:28:07.921 --> 00:28:10.791 align:middle
还有一个因素
可能导致如此是

00:28:10.858 --> 00:28:12.059 align:middle
这是等值不需要的优先级

00:28:12.492 --> 00:28:15.462 align:middle
等值所需的优先级
会调用不合格的约束

00:28:15.896 --> 00:28:17.731 align:middle
如果布局引擎不能如此
解决视图问题的话

00:28:18.098 --> 00:28:21.201 align:middle
等值不需要的优先级
是指引擎

00:28:21.268 --> 00:28:22.603 align:middle
已经为替你做了选择

00:28:23.437 --> 00:28:26.006 align:middle
它已经尽力
做出好的选择

00:28:26.640 --> 00:28:28.442 align:middle
但是它确实不知道
你想要什么

00:28:28.642 --> 00:28:31.445 align:middle
所以需要提供
更多的内容来实现目的

00:28:32.646 --> 00:28:33.981 align:middle
优先级怎么起作用呢?

00:28:34.648 --> 00:28:37.618 align:middle
区间是从1到1000
我们还有几个常数

00:28:37.684 --> 00:28:40.254 align:middle
帮助平衡
优先级

00:28:40.387 --> 00:28:42.990 align:middle
布局优先级
需要的是1000

00:28:43.657 --> 00:28:46.393 align:middle
默认高度为750
默认低点是250

00:28:47.060 --> 00:28:49.463 align:middle
在可视化格式语言中
是这样的效果

00:28:49.530 --> 00:28:52.866 align:middle
只需要在希望使用的
数字前加上@符号即可

00:28:52.999 --> 00:28:54.501 align:middle
在Interface Builder中
可以直接

00:28:54.568 --> 00:28:55.969 align:middle
把它固定在文本域中

00:28:56.737 --> 00:28:59.439 align:middle
如果使用显性约束
这就是属性

00:29:00.073 --> 00:29:01.875 align:middle
你可以实际上
运用这些常数

00:29:02.142 --> 00:29:04.111 align:middle
或数字或是
二者组合

00:29:04.811 --> 00:29:07.714 align:middle
进行比较时
优先级最高的会胜出

00:29:08.582 --> 00:29:11.585 align:middle
我们先来看看
在内容优先级

00:29:11.652 --> 00:29:13.153 align:middle
上下文中
的情况

00:29:13.754 --> 00:29:15.155 align:middle
但是必须注意的是

00:29:15.222 --> 00:29:18.892 align:middle
这个系统有着
安排内部视图的部分属性

00:29:19.393 --> 00:29:22.796 align:middle
在iOS中 我们的系统
布局尺寸符合50的大小

00:29:23.063 --> 00:29:26.166 align:middle
有若干窗口
优先级在500左右

00:29:26.233 --> 00:29:30.437 align:middle
490 500和510
OS X会用到

00:29:30.637 --> 00:29:32.673 align:middle
如果来看
NSLayoutConstraint头部

00:29:32.739 --> 00:29:34.041 align:middle
你会看到
这些数字具体是多少

00:29:34.107 --> 00:29:35.776 align:middle
如果把这些
数字设置为等值

00:29:35.843 --> 00:29:37.511 align:middle
最后会出现
歧义的情况

00:29:37.578 --> 00:29:38.679 align:middle
大家可能会遇到

00:29:38.745 --> 00:29:40.881 align:middle
你想要使用比
系统采用的

00:29:40.948 --> 00:29:42.716 align:middle
优先级稍高
或稍低的值

00:29:43.483 --> 00:29:44.818 align:middle
内容优先级

00:29:45.519 --> 00:29:47.287 align:middle
这些就是视图
处理内容的方法

00:29:47.955 --> 00:29:50.123 align:middle
默认状态都是
设置为Not Required

00:29:50.824 --> 00:29:52.326 align:middle
你不应该
设置为Required

00:29:53.093 --> 00:29:54.761 align:middle
内容需要
能移动一点

00:29:54.962 --> 00:29:55.896 align:middle
我们有动态文本

00:29:55.963 --> 00:29:56.864 align:middle
有本地化

00:29:56.930 --> 00:30:00.167 align:middle
可能还要让用户
可以选择不同的图像 像这样

00:29:56.930 --> 00:30:00.167 align:middle
可能还要让用户
可以选择不同的图像 像这样

00:30:00.501 --> 00:30:02.436 align:middle
还需要具备
一点自由调整的空间

00:30:02.503 --> 00:30:04.238 align:middle
不能说一直都是
这样的大小

00:30:04.471 --> 00:30:06.707 align:middle
最后都会是
不合乎要求的约束

00:30:07.407 --> 00:30:10.210 align:middle
但是未经修正
的相同优先级

00:30:10.277 --> 00:30:11.778 align:middle
会导致歧义 我刚说过

00:30:12.179 --> 00:30:14.948 align:middle
我们来看看
使用内容吸附性

00:30:15.015 --> 00:30:16.583 align:middle
优先级的实例
这是我们所拥有的

00:30:16.650 --> 00:30:18.018 align:middle
两种内容
优先级之一

00:30:18.852 --> 00:30:20.721 align:middle
这里是
文本域和按钮

00:30:21.688 --> 00:30:23.557 align:middle
文本域都
偏到了这边

00:30:23.624 --> 00:30:24.925 align:middle
按钮都
分散开了

00:30:24.992 --> 00:30:28.128 align:middle
这是因为
它们的默认内容

00:30:28.195 --> 00:30:30.430 align:middle
吸附性优先级都是250

00:30:31.064 --> 00:30:32.566 align:middle
引擎需要
做出选择

00:30:32.633 --> 00:30:35.435 align:middle
它不清楚
答案是这个还是这个

00:30:36.436 --> 00:30:39.940 align:middle
你实际上可以告诉它
每次应该选择哪个答案

00:30:40.007 --> 00:30:43.143 align:middle
而不是根据情况
选择这个或那个

00:30:43.410 --> 00:30:47.147 align:middle
如果把按钮的
内容吸附性优先级

00:30:47.214 --> 00:30:49.850 align:middle
下调到249
就会得到第一个布局

00:30:50.250 --> 00:30:53.854 align:middle
这是因为引擎
看到约束

00:30:53.921 --> 00:30:55.355 align:middle
和优先级
觉得 嗯

00:30:55.622 --> 00:30:57.891 align:middle
文本视图吸附性
优先级相当重要

00:30:58.392 --> 00:31:00.594 align:middle
但是按钮吸附性优先级
没那么重要

00:30:58.392 --> 00:31:00.594 align:middle
但是按钮吸附性优先级
没那么重要

00:31:00.928 --> 00:31:02.963 align:middle
我可以继续
从内容中伸出一块

00:31:03.330 --> 00:31:06.466 align:middle
填充视图的
水平部分

00:31:07.467 --> 00:31:08.669 align:middle
同时 如果
用到按钮

00:31:08.735 --> 00:31:11.171 align:middle
并把内容吸附性
优先级置于

00:31:11.238 --> 00:31:13.440 align:middle
文本域之上
就会得到另一种解决方案

00:31:13.740 --> 00:31:15.042 align:middle
因为引擎会觉得

00:31:15.108 --> 00:31:17.311 align:middle
现在我要紧密
吸附按钮文本

00:31:17.377 --> 00:31:19.379 align:middle
这就意味着
我可以伸长文本域

00:31:19.680 --> 00:31:21.114 align:middle
以便解决布局问题

00:31:21.715 --> 00:31:23.116 align:middle
在调整这类
发生歧义的情况时

00:31:23.183 --> 00:31:26.386 align:middle
所需要做的
就是这些

00:31:26.587 --> 00:31:28.956 align:middle
还有一类
内容优先级

00:31:29.022 --> 00:31:30.257 align:middle
是压缩阻力

00:31:30.824 --> 00:31:35.329 align:middle
这是视图多大程度上
可以阻止内容的压扁

00:31:35.896 --> 00:31:39.266 align:middle
顺便说一下 压扁在这里
是个技术术语

00:31:39.333 --> 00:31:41.568 align:middle
需要给人留下深刻印象时
可以随便使用

00:31:42.302 --> 00:31:47.040 align:middle
图像视图的压缩阻力
和水平方向的

00:31:47.107 --> 00:31:49.142 align:middle
标签默认
为750

00:31:49.209 --> 00:31:51.778 align:middle
这个优先级相当高
因为平时

00:31:51.845 --> 00:31:53.113 align:middle
你希望看到所有内容

00:31:53.780 --> 00:31:55.649 align:middle
但是如果要本地化
这个app该怎么办？

00:31:56.216 --> 00:31:58.285 align:middle
如果有了这两个
彼此竞争的因素

00:31:58.552 --> 00:32:00.554 align:middle
而所用的语言中
“红色”这个词

00:31:58.552 --> 00:32:00.554 align:middle
而所用的语言中
“红色”这个词

00:32:00.621 --> 00:32:01.555 align:middle
非常长 比如波兰语

00:32:02.189 --> 00:32:03.223 align:middle
则可能会被剪裁

00:32:03.290 --> 00:32:05.359 align:middle
这就是引擎
必须做出的决定之一

00:32:05.759 --> 00:32:08.195 align:middle
它可能会收缩
图形视图或是剪裁标签

00:32:08.262 --> 00:32:10.464 align:middle
它并不清楚
你真正要做什么

00:32:10.531 --> 00:32:11.698 align:middle
所以它自行做决定

00:32:12.399 --> 00:32:14.468 align:middle
如果希望标签
一直都能显示全部内容

00:32:14.535 --> 00:32:16.336 align:middle
少许收缩图像
也可以

00:32:16.603 --> 00:32:20.474 align:middle
你只需要把
标签内容压缩阻力

00:32:20.541 --> 00:32:22.209 align:middle
优先级设置的
略高于

00:32:22.276 --> 00:32:25.679 align:middle
图像视图即可
现在就可以看到整个视图

00:32:25.746 --> 00:32:28.916 align:middle
在做本地化时
需要做这些调整

00:32:28.982 --> 00:32:31.451 align:middle
以确保观众
可以看到全部

00:32:31.518 --> 00:32:32.553 align:middle
文本内容

00:32:34.254 --> 00:32:36.089 align:middle
这些就是优先级

00:32:37.591 --> 00:32:39.326 align:middle
它们可以帮你
解决不满意度问题

00:32:40.227 --> 00:32:42.763 align:middle
这会导致
你在设计和运行时

00:32:42.930 --> 00:32:45.365 align:middle
一切都出现问题
日志会相当难看

00:32:45.599 --> 00:32:48.101 align:middle
因此它们会很有用
但是需要注意

00:32:48.168 --> 00:32:49.236 align:middle
竞争性优先级

00:32:49.603 --> 00:32:51.972 align:middle
如果存在竞争性
就会出现歧义 如大家所见

00:32:52.573 --> 00:32:54.508 align:middle
当你这么做时 结果是
各屏幕和窗口间的

00:32:54.575 --> 00:32:55.976 align:middle
更多一致性

00:32:56.743 --> 00:32:58.879 align:middle
如果优先级
用的很好

00:32:58.946 --> 00:33:00.013 align:middle
就可以得到正确的布局

00:32:58.946 --> 00:33:00.013 align:middle
就可以得到正确的布局

00:33:00.380 --> 00:33:02.716 align:middle
有时候 只需要
对吸附性

00:33:02.783 --> 00:33:04.551 align:middle
或压缩阻力
稍作调整

00:33:05.185 --> 00:33:08.055 align:middle
现在 在设计布局时
我们为约束和

00:33:08.155 --> 00:33:10.190 align:middle
内容加上了
部分优先级

00:33:10.991 --> 00:33:14.194 align:middle
为了解决这个布局问题
我们还需要什么？

00:33:14.795 --> 00:33:15.829 align:middle
对齐安排

00:33:16.363 --> 00:33:17.931 align:middle
那么 如果已经用过
Auto Layout 那你会对

00:33:17.998 --> 00:33:19.166 align:middle
视图对齐安排很熟悉

00:33:19.233 --> 00:33:21.201 align:middle
它们会需要某些
水平对齐

00:33:21.268 --> 00:33:23.470 align:middle
这样就会知道如何
彼此关联

00:33:23.537 --> 00:33:24.738 align:middle
还有垂直对齐

00:33:25.239 --> 00:33:28.642 align:middle
我这里会主要介绍
对齐文本

00:33:29.476 --> 00:33:33.447 align:middle
首先 在文本视图中
我们有基线

00:33:33.514 --> 00:33:34.815 align:middle
的概念
这就是在

00:33:34.882 --> 00:33:37.518 align:middle
文本底部下方的线条

00:33:38.218 --> 00:33:40.554 align:middle
文本视图有着第一条基线

00:33:40.621 --> 00:33:43.690 align:middle
和最后一条基线的
对齐安排

00:33:44.057 --> 00:33:47.728 align:middle
第一条基线就在
第一行文本下方

00:33:47.961 --> 00:33:50.430 align:middle
最后一条基线
则是在最后一行文本下方

00:33:50.964 --> 00:33:54.501 align:middle
单行文本视图
这两个值彼此相等

00:33:54.968 --> 00:33:58.172 align:middle
所以在很多情况下
文本对齐效果

00:33:58.238 --> 00:34:00.374 align:middle
胜过顶部或底部
并对动态文本大小

00:33:58.238 --> 00:34:00.374 align:middle
胜过顶部或底部
并对动态文本大小

00:34:00.440 --> 00:34:01.875 align:middle
这类内容有帮助

00:34:02.342 --> 00:34:05.145 align:middle
通过它 可以更好地控制
改变视图

00:34:05.379 --> 00:34:06.547 align:middle
以及内容需要变化

00:34:06.613 --> 00:34:08.248 align:middle
例如 如果在按钮旁
有个标签

00:34:08.315 --> 00:34:10.851 align:middle
并且是底部对齐
在这种情况下

00:34:10.918 --> 00:34:12.585 align:middle
按钮边缘
有些大

00:34:12.652 --> 00:34:14.087 align:middle
因为是在
填充一些多余的间距

00:34:14.821 --> 00:34:18.058 align:middle
如果我加上两行
文本 按钮就可能

00:34:18.125 --> 00:34:20.427 align:middle
变得模糊不清

00:34:21.128 --> 00:34:23.197 align:middle
我想变成居中对齐

00:34:23.263 --> 00:34:26.400 align:middle
或是变成消息那样
放在底部

00:34:26.800 --> 00:34:28.435 align:middle
靠近文本
最后一行

00:34:28.502 --> 00:34:30.070 align:middle
效果则好些

00:34:30.137 --> 00:34:33.473 align:middle
如果我是依照最后基线
对齐 无论

00:34:33.540 --> 00:34:36.443 align:middle
文本视图做什么
按钮还将与

00:34:36.510 --> 00:34:37.777 align:middle
最后的基线对齐

00:34:37.844 --> 00:34:39.580 align:middle
当然也可以根据
第一条基线这么做

00:34:39.646 --> 00:34:41.815 align:middle
如果你想要
的视图是这样

00:34:41.882 --> 00:34:44.784 align:middle
如果视图在不断变化
它也在和周围的

00:34:44.851 --> 00:34:46.186 align:middle
视图保持对齐状态

00:34:46.920 --> 00:34:51.425 align:middle
文本对齐的另一个
重要内容是左对齐和右对齐

00:34:51.491 --> 00:34:53.460 align:middle
这对所有类型视图
都很重要

00:34:53.860 --> 00:34:56.330 align:middle
但是对本地化
用处相当大

00:34:56.763 --> 00:34:59.299 align:middle
如果是在用
从左到右的语言

00:34:59.366 --> 00:35:01.335 align:middle
在编写app时
对布局运用

00:34:59.366 --> 00:35:01.335 align:middle
在编写app时
对布局运用

00:35:01.401 --> 00:35:04.438 align:middle
左右约束
语言本地化时

00:35:04.505 --> 00:35:06.306 align:middle
用的是从右到左
这怎样结果

00:35:06.373 --> 00:35:07.941 align:middle
就会很奇怪

00:35:08.075 --> 00:35:09.443 align:middle
效果
就像是这样

00:35:10.110 --> 00:35:11.578 align:middle
所有内容都
各自到位

00:35:12.346 --> 00:35:14.248 align:middle
但是无法正常阅读

00:35:14.381 --> 00:35:16.383 align:middle
我以前是通过
图像视图了解文本

00:35:16.450 --> 00:35:19.286 align:middle
现在是从另一个方向
阅读文本

00:35:19.353 --> 00:35:20.654 align:middle
而且是在
图像视图上面

00:35:20.721 --> 00:35:22.055 align:middle
这不是我想要的

00:35:22.122 --> 00:35:25.425 align:middle
如果你在左对齐和
右对齐用的是

00:35:25.492 --> 00:35:28.795 align:middle
同样的约束
左边是左对齐和

00:35:28.862 --> 00:35:31.532 align:middle
右边是右对齐
那就会形成正确的布局

00:35:31.598 --> 00:35:34.968 align:middle
切换到不同
于最初的

00:35:35.035 --> 00:35:37.504 align:middle
语言走向时
所有内容的读取

00:35:37.571 --> 00:35:39.840 align:middle
都会按照你最初
设计的思路实现

00:35:40.440 --> 00:35:43.243 align:middle
因此就常用左对齐
和右对齐好了

00:35:43.510 --> 00:35:45.345 align:middle
也许会有
某些情况

00:35:45.412 --> 00:35:46.747 align:middle
需要你使用
左和右

00:35:46.914 --> 00:35:48.448 align:middle
现在我还
不知道熟悉有哪些情况

00:35:48.515 --> 00:35:49.783 align:middle
大家肯定曾
遇到过这种情况

00:35:50.284 --> 00:35:52.619 align:middle
但是如果需要用
左和右

00:35:52.953 --> 00:35:56.023 align:middle
小心不要和
左对齐和右对齐混淆

00:35:56.089 --> 00:35:58.025 align:middle
因为当环境
发生改变

00:35:58.091 --> 00:36:00.294 align:middle
最后可能会
导致令人不满的约束

00:35:58.091 --> 00:36:00.294 align:middle
最后可能会
导致令人不满的约束

00:36:01.461 --> 00:36:02.596 align:middle
好 关于对齐问题

00:36:02.663 --> 00:36:05.999 align:middle
的最后内容是
对齐矩形

00:36:06.733 --> 00:36:08.435 align:middle
对齐矩形很重要

00:36:08.502 --> 00:36:10.571 align:middle
因为引擎就是
计算这些数值

00:36:11.104 --> 00:36:12.840 align:middle
引擎会把所有
约束考虑在内

00:36:13.207 --> 00:36:15.576 align:middle
计算对齐矩形
在根据这些

00:36:15.642 --> 00:36:17.110 align:middle
实际安排视图

00:36:17.778 --> 00:36:20.480 align:middle
那么对齐矩形是什么？

00:36:20.547 --> 00:36:23.250 align:middle
通常就是视图的
框架 但也不总是如此

00:36:24.051 --> 00:36:26.320 align:middle
它不仅是视图
周围的框架

00:36:26.386 --> 00:36:28.488 align:middle
还包括视图的
关键性内容

00:36:28.922 --> 00:36:30.390 align:middle
也就是你真正
需要对齐的内容

00:36:30.924 --> 00:36:32.359 align:middle
例如 我们有个
复选框

00:36:32.426 --> 00:36:33.827 align:middle
如果和其他视图一起
在做居中

00:36:33.894 --> 00:36:35.896 align:middle
对齐
你可能需要

00:36:35.963 --> 00:36:38.298 align:middle
根据圆心对齐
而不是在

00:36:38.365 --> 00:36:40.367 align:middle
复选框中心对齐
整个勾选

00:36:40.434 --> 00:36:41.602 align:middle
可能要
稍稍高一些

00:36:42.035 --> 00:36:43.971 align:middle
带有阴影的按钮
也是如此

00:36:44.338 --> 00:36:46.306 align:middle
需要去除那些
多余的点

00:36:46.373 --> 00:36:48.742 align:middle
并关注内容的
主要部分

00:36:49.176 --> 00:36:51.512 align:middle
当视图发生改变时
它也不会变化

00:36:51.912 --> 00:36:53.780 align:middle
当你安排视图时
并想强调

00:36:53.847 --> 00:36:56.283 align:middle
或取消强调某些内容
这不会影响

00:36:56.350 --> 00:36:58.218 align:middle
布局的其他部分
导致出现变形

00:36:59.286 --> 00:37:00.888 align:middle
如果的确需要改变

00:36:59.286 --> 00:37:00.888 align:middle
如果的确需要改变

00:37:01.121 --> 00:37:04.525 align:middle
这种情况其实很少见
我们可以覆盖

00:37:04.658 --> 00:37:06.593 align:middle
可用的对齐矩形
边界间距

00:37:06.994 --> 00:37:09.429 align:middle
基本上这相当于
告知引擎

00:37:09.496 --> 00:37:11.598 align:middle
不管你算出的对齐矩形
是什么

00:37:11.798 --> 00:37:13.901 align:middle
边界间距是这样的
要用这个数值

00:37:13.967 --> 00:37:17.804 align:middle
在布局中 这种情况
非常少见

00:37:17.871 --> 00:37:19.173 align:middle
不过如果需要 可以用这个方法

00:37:19.840 --> 00:37:23.343 align:middle
为了解引擎
实际的计算结果

00:37:23.510 --> 00:37:26.013 align:middle
可以使用Xcode的Debug菜单
中的视图调试选项

00:37:26.079 --> 00:37:27.748 align:middle
将之拖入视图

00:37:28.415 --> 00:37:31.118 align:middle
再选定ShowAlignment
Rectangle即可

00:37:31.185 --> 00:37:33.420 align:middle
这会将黄色对齐
矩形拖入视图

00:37:34.021 --> 00:37:36.924 align:middle
还可以通过
具体视图的框架

00:37:36.990 --> 00:37:38.625 align:middle
对齐矩形来实现

00:37:39.593 --> 00:37:41.461 align:middle
在第二部分的
调试布局部分

00:37:41.528 --> 00:37:44.498 align:middle
我们会谈到更多详情
如果想要了解

00:37:44.565 --> 00:37:46.500 align:middle
这些都是如何工作
一定要记得参加

00:37:47.835 --> 00:37:49.436 align:middle
关于对齐 我们介绍了

00:37:49.503 --> 00:37:51.104 align:middle
文本与其他内容
不大相同

00:37:51.171 --> 00:37:54.474 align:middle
在准备app时
大家想要确认可以

00:37:54.541 --> 00:37:56.844 align:middle
做动态文本
和本地化

00:37:56.910 --> 00:37:58.779 align:middle
Auto Layout
可以助你一臂之力

00:37:59.313 --> 00:38:00.747 align:middle
如果需要将有趣的

00:37:59.313 --> 00:38:00.747 align:middle
如果需要将有趣的

00:38:00.814 --> 00:38:02.382 align:middle
具体视图安放在
具体框架中

00:38:02.449 --> 00:38:05.853 align:middle
还可以借机
覆盖对齐矩形

00:38:05.919 --> 00:38:07.487 align:middle
边界间距

00:38:08.255 --> 00:38:09.656 align:middle
有关布局 我们讲到哪里了？

00:38:10.224 --> 00:38:13.894 align:middle
好现在是对齐部分
如果有必要的话

00:38:13.961 --> 00:38:15.696 align:middle
我们覆盖了两个
对齐矩形边界间距

00:38:16.864 --> 00:38:19.800 align:middle
现在就让引擎来
完成工作

00:38:20.534 --> 00:38:21.668 align:middle
把所有内容都
放在里面

00:38:22.769 --> 00:38:24.004 align:middle
布局引擎
会进行思考

00:38:24.071 --> 00:38:29.276 align:middle
计算对齐矩形
然后用来实际设计布局

00:38:30.143 --> 00:38:33.380 align:middle
现在的布局
正如你所愿

00:38:33.714 --> 00:38:34.548 align:middle
适合各种屏幕大小

00:38:34.615 --> 00:38:35.883 align:middle
相信我 这就是
你想要的布局

00:38:38.051 --> 00:38:39.086 align:middle
我们来看一下

00:38:39.152 --> 00:38:41.054 align:middle
我们总结一下
今天所讲的内容

00:38:41.822 --> 00:38:44.691 align:middle
堆栈视图是设计
可维护布局的好办法

00:38:44.992 --> 00:38:48.295 align:middle
在所有设备和尺寸
均可适用

00:38:48.795 --> 00:38:52.332 align:middle
如果适当激活
并关闭约束的话

00:38:52.399 --> 00:38:54.468 align:middle
大家都可以使用
可以获得动态

00:38:54.535 --> 00:38:58.138 align:middle
有趣的布局
而在每个屏幕上

00:38:58.205 --> 00:39:00.073 align:middle
无需太多设计工作

00:38:58.205 --> 00:39:00.073 align:middle
无需太多设计工作

00:39:01.175 --> 00:39:05.179 align:middle
决定具体尺寸后
使用约束

00:39:05.712 --> 00:39:11.084 align:middle
当绝对必要时
可以覆盖内部内容尺寸

00:39:11.151 --> 00:39:14.488 align:middle
使用优先级
实现最后的小调整

00:39:15.055 --> 00:39:17.991 align:middle
最后 可以不仅仅做顶部
底部和居中对齐

00:39:18.192 --> 00:39:20.627 align:middle
特别是当你看着文本
考虑进行本地化

00:39:20.694 --> 00:39:22.329 align:middle
和动态文本时更是如此

00:39:22.930 --> 00:39:24.965 align:middle
若想了解
更多详情

00:39:25.032 --> 00:39:26.767 align:middle
我们还有部分文档资料

00:39:27.201 --> 00:39:29.603 align:middle
如果想试试动画效果
可以下载

00:39:29.670 --> 00:39:32.272 align:middle
这些行星示例代码
当然 也可以

00:39:32.339 --> 00:39:36.844 align:middle
前往论坛或者
索性联系我们的开发顾问

00:39:37.177 --> 00:39:40.247 align:middle
下午
是《Auto Layout谜题》

00:39:40.314 --> 00:39:43.150 align:middle
第二部分内容会深度介绍布局周期
的内容以及更多

00:39:43.483 --> 00:39:47.621 align:middle
关于不符合预期的布局
调试内容

00:39:47.688 --> 00:39:49.590 align:middle
我们还有其他的
相关讲座

00:39:50.090 --> 00:39:51.892 align:middle
祝大家过得愉快
谢谢
