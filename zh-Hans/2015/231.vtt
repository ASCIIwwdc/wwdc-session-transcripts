WEBVTT

00:00:20.087 --> 00:00:24.458 align:middle
Cocoa Touch最优方案讲座

00:00:33.934 --> 00:00:38.805 align:middle
大家好 非常感谢你们来参加
Cocoa Touch最优方案讲座

00:00:39.573 --> 00:00:42.442 align:middle
我叫 盧克·黑斯特曼
是UIKit一名工程师

00:00:42.676 --> 00:00:45.412 align:middle
今天我很荣幸为你演示一些

00:00:45.479 --> 00:00:49.583 align:middle
巧妙的程序片段和各种实用的建议

00:00:49.850 --> 00:00:52.152 align:middle
现在和将来你都可以在所

00:00:52.419 --> 00:00:54.855 align:middle
编写的应用程序中直接地进行应用

00:00:56.123 --> 00:01:00.694 align:middle
所以我将向你展示一系列主题

00:00:56.123 --> 00:01:00.694 align:middle
所以我将向你展示一系列主题

00:01:00.761 --> 00:01:03.230 align:middle
这些主题都是和
开发Cocoa Touch应用程序

00:01:03.297 --> 00:01:04.897 align:middle
密切相关的每个主题

00:01:05.299 --> 00:01:10.604 align:middle
我都会教你们一系列的最佳实用技巧

00:01:11.538 --> 00:01:16.977 align:middle
那些主题分别为
第一 应用程序生命周期

00:01:17.678 --> 00:01:21.215 align:middle
之后是视图和视图控制器 自动布局

00:01:21.982 --> 00:01:24.551 align:middle
最后一个是表格和集合视图

00:01:25.219 --> 00:01:27.421 align:middle
当我讲这些主题的时候

00:01:27.821 --> 00:01:31.592 align:middle
有一系列的目标我会随着我要讲授的

00:01:32.159 --> 00:01:35.162 align:middle
巧妙的程序片段传授给你们

00:01:35.562 --> 00:01:36.396 align:middle
因为...

00:01:37.164 --> 00:01:41.201 align:middle
我们所作的一切
其目标都是要完成几个基本理念

00:01:41.268 --> 00:01:43.136 align:middle
而一定也都是你希望
应用程序所能体现的

00:01:43.203 --> 00:01:46.440 align:middle
第一 你要想办法让你的应用程序
实现峰值性能

00:01:46.673 --> 00:01:48.542 align:middle
你要你的应用程序如丝般顺滑

00:01:48.709 --> 00:01:50.511 align:middle
看起来就像一个
摇滚明星程序开发员

00:01:50.577 --> 00:01:52.079 align:middle
并且人人都喜欢你

00:01:53.714 --> 00:01:57.317 align:middle
你也想让你所开发
应用程序提供一流的用户体验

00:01:57.751 --> 00:01:59.186 align:middle
那样 每人都会觉得

00:01:59.253 --> 00:02:01.221 align:middle
你开发的应用程序看起来
精美且令人赞叹

00:01:59.253 --> 00:02:01.221 align:middle
你开发的应用程序看起来
精美且令人赞叹

00:02:01.922 --> 00:02:05.359 align:middle
最后 你还要把你的程序代码写好

00:02:05.425 --> 00:02:07.327 align:middle
使之能够最大程度地适应未来的发展

00:02:07.594 --> 00:02:10.597 align:middle
这样当未来版本的iOS 推出时
你需要写比较少的

00:02:10.663 --> 00:02:14.701 align:middle
代码就能使你的应用程序
适应于这些新版本的iOS

00:02:15.402 --> 00:02:16.803 align:middle
那些就是我们讲解这些主题时

00:02:16.870 --> 00:02:18.005 align:middle
心中要牢记的目标

00:02:18.438 --> 00:02:21.141 align:middle
而现在我首先要
谈到应用程序的生命周期

00:02:22.109 --> 00:02:26.280 align:middle
我要向你们讲授的第一个最优方案

00:02:26.547 --> 00:02:29.750 align:middle
与使用者第一次使用应用软件体验有关

00:02:29.816 --> 00:02:31.718 align:middle
也就是软件启动时的体验

00:02:32.019 --> 00:02:35.756 align:middle
因此与应用软件有关的
第一个最优方案是要使之能够快速启动

00:02:36.690 --> 00:02:40.060 align:middle
这也就是在用户点击你的图标时
你的应用如何能够显得有反应

00:02:40.127 --> 00:02:43.263 align:middle
而且你的应用也能做好准备
马上即可与用户进行互动

00:02:43.330 --> 00:02:45.999 align:middle
而使你能够快速启动一个应用程序
的方法其实非常简单

00:02:46.066 --> 00:02:49.770 align:middle
就是要能够迅速从
ApplicationDidFinishLaunching

00:02:49.903 --> 00:02:51.572 align:middle
这一用户界面应用程序委托事件返回

00:02:52.272 --> 00:02:54.741 align:middle
这个在做法上实在简单

00:02:54.808 --> 00:02:56.944 align:middle
我肯定你们全都知道如何去做了

00:02:57.878 --> 00:03:01.715 align:middle
给所有运行时间
长的工作设置一个应用程序

00:02:57.878 --> 00:03:01.715 align:middle
给所有运行时间
长的工作设置一个应用程序

00:03:01.782 --> 00:03:04.618 align:middle
从ApplicationDidFinishLaunching
中挪到他处发派以实现延迟执行

00:03:04.685 --> 00:03:07.888 align:middle
因为要完成尽可能少的工作就返回

00:03:08.288 --> 00:03:11.325 align:middle
你要建立起一个基本的用户界面
使你的用户可以与之互动

00:03:11.725 --> 00:03:16.930 align:middle
然后返回
无论从一个数据库或者网络来加载数据

00:03:17.364 --> 00:03:19.366 align:middle
ApplicationDidFinishLaunching
来延迟完成其执行

00:03:21.268 --> 00:03:24.037 align:middle
如果需要太多时间启动
当然你的应用程序将被中止

00:03:24.104 --> 00:03:26.173 align:middle
因为你的程序看起来
已在系统中停止了运行

00:03:26.240 --> 00:03:29.910 align:middle
所以你确实需要从那个状态尽快返回

00:03:30.277 --> 00:03:32.980 align:middle
做出一个反应良好的应用程序

00:03:33.180 --> 00:03:35.015 align:middle
不是能做到启动快就可以了

00:03:35.249 --> 00:03:38.519 align:middle
我们要完成的比这要多
我们要让我们的应用程序一直反应良好

00:03:39.386 --> 00:03:42.189 align:middle
所以我要深入到这一技术中来讲解

00:03:42.256 --> 00:03:45.759 align:middle
反应良好总的来讲意味着什么
这样我们才能构造

00:03:45.826 --> 00:03:48.195 align:middle
一种技术方法做到不只
在应用程序启动时能快速完成

00:03:48.262 --> 00:03:50.264 align:middle
而且在该程序的整个
生命周期中都会反应良好

00:03:50.330 --> 00:03:52.666 align:middle
所以 尽管我刚刚谈过将所有这些工作

00:03:52.733 --> 00:03:55.536 align:middle
从ApplicationDidFinishLaunching
去除挪到他处推迟完成执行

00:03:55.602 --> 00:03:57.237 align:middle
但是有关最优方案

00:03:57.304 --> 00:03:59.306 align:middle
我真正想说的并不只是异步执行

00:04:00.040 --> 00:04:02.342 align:middle
真正要做的关键是
要将运行时间长的工作区别对待

00:04:02.609 --> 00:04:04.545 align:middle
将它们放到某个后台队列中异步执行

00:04:04.912 --> 00:04:06.947 align:middle
如果你需要从某个数据库加载数据

00:04:07.014 --> 00:04:08.015 align:middle
或者你需要连接网络

00:04:08.382 --> 00:04:10.417 align:middle
那些都是可以放到后台进行的工作

00:04:10.918 --> 00:04:13.954 align:middle
所以如果我们再考虑
ApplicationDidFinishLaunching

00:04:14.021 --> 00:04:16.255 align:middle
这一方法
而我们有这种非常简单的方法

00:04:16.322 --> 00:04:18.858 align:middle
来调用一个单纯的
ApplicationDidFinishLaunching

00:04:20.127 --> 00:04:24.164 align:middle
你知道我们通过Application
DidFinishLaunching直接加载数据

00:04:24.231 --> 00:04:25.699 align:middle
而我刚刚说过 推迟执行这一任务

00:04:25.766 --> 00:04:27.835 align:middle
好吧所以我们可以简单地完成这一步

00:04:28.135 --> 00:04:31.471 align:middle
我们将其发派出去 就算做完了

00:04:31.538 --> 00:04:33.941 align:middle
这个任务就不在
ApplicationDidFinishLaunching中了

00:04:34.007 --> 00:04:37.578 align:middle
我们就能够迅速启动
而启动时一切也就会更好

00:04:37.945 --> 00:04:43.417 align:middle
但是那样仍会产生
随后阻断总执行队列的可能性

00:04:43.483 --> 00:04:45.519 align:middle
且会因此阻断与用户之间的互动

00:04:46.019 --> 00:04:49.323 align:middle
事实上最好的
做法是时将那个工作转移到

00:04:49.389 --> 00:04:53.160 align:middle
一个后台执行队列中
这样当那个任务开始执行时

00:04:53.594 --> 00:04:55.696 align:middle
与用户之间的互动可以继续进行

00:04:55.996 --> 00:04:58.365 align:middle
而你的应用程序看起来也总是反应良好

00:04:59.266 --> 00:05:02.603 align:middle
所以这种讲任务通过
后台执行队列发派的技术

00:04:59.266 --> 00:05:02.603 align:middle
所以这种讲任务通过
后台执行队列发派的技术

00:05:02.669 --> 00:05:06.773 align:middle
可以在应用程序执行的任何时候应用
而不仅仅限于启动之时

00:05:07.641 --> 00:05:11.044 align:middle
然后 你把那项
在后台进行的数据有关的工作

00:05:11.311 --> 00:05:12.279 align:middle
而当那个工作完成时

00:05:12.346 --> 00:05:14.581 align:middle
其执行就回到主执行队列

00:05:14.648 --> 00:05:17.317 align:middle
与像视图和视图启动器这样的
UIKit 元素进行互动

00:05:18.552 --> 00:05:20.254 align:middle
所以这样才是真的反应良好

00:05:20.587 --> 00:05:22.789 align:middle
接着你要做的是

00:05:22.856 --> 00:05:28.328 align:middle
除了在用户第一次启动 应用程序时
你要保证程序反应良好之外

00:05:28.829 --> 00:05:30.931 align:middle
还要保证在用户第二次启动
程序仍然反应良好

00:05:31.231 --> 00:05:32.933 align:middle
而要实现这一目标就要使

00:05:32.999 --> 00:05:37.104 align:middle
在用户退出你的程序时
该应用程序并不简单的结束

00:05:37.171 --> 00:05:39.806 align:middle
而是进入一种iOS上的暂停执行状态

00:05:40.407 --> 00:05:44.111 align:middle
所以要在用户第二次打开你的程序时
想要特别快的话

00:05:44.711 --> 00:05:47.181 align:middle
只需要让你的程序能从
上次的暂停状态继续执行就行

00:05:47.514 --> 00:05:50.717 align:middle
而这需要那个应用程序仍在内存中

00:05:51.451 --> 00:05:54.655 align:middle
所以 我们要看看系统内存的情况

00:05:55.155 --> 00:05:57.424 align:middle
我们确定系统内存的一部分
是由被操作系统内核

00:05:57.491 --> 00:05:59.092 align:middle
和各种操作系统的进程所占用

00:05:59.693 --> 00:06:02.796 align:middle
系统内存的一大块将会是
由前台应用程序所占用

00:05:59.693 --> 00:06:02.796 align:middle
系统内存的一大块将会是
由前台应用程序所占用

00:06:03.830 --> 00:06:07.835 align:middle
之后 还有不少会是由后台应用所占用

00:06:08.869 --> 00:06:11.405 align:middle
现在 你会注意到在整个图像中

00:06:11.471 --> 00:06:13.407 align:middle
会有某个后台
应用程序占用比其他任何进程

00:06:13.473 --> 00:06:14.875 align:middle
都多的内存

00:06:15.609 --> 00:06:18.078 align:middle
你的应用程序不要成为那样否则

00:06:18.545 --> 00:06:20.714 align:middle
你不像这样的原因是

00:06:21.315 --> 00:06:25.752 align:middle
程序会第一个结束运行
当应用程序需要额外的内存时

00:06:26.486 --> 00:06:30.858 align:middle
所以你要让你的应用程序
使用用户界面应用程序

00:06:30.924 --> 00:06:33.660 align:middle
的委托方法获知何时
自己要进入后台运行

00:06:34.127 --> 00:06:36.363 align:middle
之后就要释放不需要的内存资源

00:06:36.430 --> 00:06:40.434 align:middle
使其进入后台运行时所需的内存量
能够尽可能的小在使用拆分视图时

00:06:40.901 --> 00:06:42.436 align:middle
更加重要的是

00:06:42.736 --> 00:06:47.608 align:middle
同时运行会有多个前台应用程序

00:06:48.175 --> 00:06:50.811 align:middle
当第二个前台应用程序启动时

00:06:51.078 --> 00:06:53.947 align:middle
那种占用很多内存的应用程序
不会继续存在下去

00:06:54.815 --> 00:06:56.149 align:middle
所以你不想你的程序是那样的

00:06:57.017 --> 00:06:59.653 align:middle
所以这就是怎样
保证做到超级反应良好

00:06:59.720 --> 00:07:02.155 align:middle
且考虑你的应用程序在其
整个生命周期中的性能表现

00:06:59.720 --> 00:07:02.155 align:middle
且考虑你的应用程序在其
整个生命周期中的性能表现

00:07:02.289 --> 00:07:05.893 align:middle
我想要谈的与一般应用程序编程

00:07:05.959 --> 00:07:07.694 align:middle
有关的最优方案是

00:07:07.761 --> 00:07:08.962 align:middle
利用各种框架

00:07:10.030 --> 00:07:14.101 align:middle
这也许是我能给你的最基本的最优方案

00:07:14.168 --> 00:07:15.235 align:middle
这就是：去做！

00:07:15.302 --> 00:07:17.304 align:middle
一定要利用Apple提供的各种框架

00:07:17.905 --> 00:07:21.041 align:middle
经年累月地努力以构建优良的框架结构

00:07:21.141 --> 00:07:23.010 align:middle
使你能够在其上开发应用程序

00:07:23.410 --> 00:07:25.846 align:middle
这样做有几个基本优势

00:07:25.913 --> 00:07:27.181 align:middle
我相信你对此已经熟悉

00:07:27.714 --> 00:07:29.583 align:middle
它可以降低你的维护负担

00:07:29.816 --> 00:07:33.587 align:middle
你知道吗？例如如果你使用
用户界面导航控制器

00:07:33.921 --> 00:07:37.391 align:middle
当新的版本推出时
你就不需要维护那一导航控制器

00:07:37.691 --> 00:07:40.394 align:middle
但如果你建造你自己的导航控制器
那就必须自己对其维护升级

00:07:40.460 --> 00:07:43.997 align:middle
且当我们对那部分进行改进升级时
你会免费获得那些改进升级

00:07:44.331 --> 00:07:45.365 align:middle
例如你们知道

00:07:45.432 --> 00:07:49.002 align:middle
两个版本以前导航控制器增加了一个

00:07:49.303 --> 00:07:51.271 align:middle
使用滑动手势的新的功能

00:07:51.672 --> 00:07:54.842 align:middle
在导航控制器上建立的应用
都免费获得了这一改进的功能

00:07:55.342 --> 00:07:57.578 align:middle
如果你用自己的导航控制器
你就必须自己去实现它

00:07:57.644 --> 00:08:00.981 align:middle
否则 你的应用程序就会感觉起来
与系统的其余部分不相符合

00:07:57.644 --> 00:08:00.981 align:middle
否则 你的应用程序就会感觉起来
与系统的其余部分不相符合

00:08:01.515 --> 00:08:05.252 align:middle
所以 你需要这样做因为你需要能够

00:08:05.319 --> 00:08:09.056 align:middle
集中精力于把什么能使你的应用程序
真正特别的地方做好

00:08:09.122 --> 00:08:10.123 align:middle
这是我们都想看到的

00:08:10.190 --> 00:08:13.660 align:middle
想要你利用时间写出神奇的应用程序

00:08:13.927 --> 00:08:17.397 align:middle
而不是花费你的宝贵时间做本来
可以留给我们的构架很好地完成的事情

00:08:17.731 --> 00:08:19.299 align:middle
这就是我们要鼓励你做的事情

00:08:20.501 --> 00:08:22.135 align:middle
当然在你集中精力做那些时

00:08:22.202 --> 00:08:25.439 align:middle
你需要时刻牢记的是

00:08:25.506 --> 00:08:27.574 align:middle
怎样进行版本控制

00:08:27.875 --> 00:08:30.344 align:middle
所以我们常被问到的最大的问题是：

00:08:30.644 --> 00:08:33.780 align:middle
我们的应用应该能够部署
在多少不同的版本上？

00:08:34.181 --> 00:08:36.183 align:middle
我们给你的建议是

00:08:36.517 --> 00:08:40.419 align:middle
以两个最重要的iOS版本为目标

00:08:40.821 --> 00:08:43.690 align:middle
所以 从今秋当iOS 9推出时起

00:08:43.756 --> 00:08:46.126 align:middle
这两个版本就意味着iOS 8和9

00:08:46.693 --> 00:08:49.563 align:middle
这种做法会让你获得这一最佳组合

00:08:49.630 --> 00:08:53.300 align:middle
你既能获得大量的用户
又不需要担负过重的维护负担而

00:08:53.734 --> 00:08:56.103 align:middle
必须为过去的好几个
iOS版本而进行部署

00:08:56.170 --> 00:08:57.638 align:middle
还不得不处理的有关的之中事宜

00:08:58.839 --> 00:09:02.342 align:middle
在这个过程中您可能会发现你自己

00:08:58.839 --> 00:09:02.342 align:middle
在这个过程中您可能会发现你自己

00:09:02.743 --> 00:09:06.513 align:middle
有时需要用特别
的程序逻辑来检查程序是在

00:09:06.580 --> 00:09:07.781 align:middle
哪个版本的系统上运行

00:09:08.315 --> 00:09:11.485 align:middle
而另一个的最佳实做法是要确保

00:09:11.552 --> 00:09:16.223 align:middle
你的程序中包含基于
不同系统版本的回退应变功能

00:09:16.590 --> 00:09:19.693 align:middle
这意味着绝对不要编写这样的代码

00:09:19.760 --> 00:09:22.095 align:middle
你先检查某个特定的版本

00:09:22.162 --> 00:09:24.565 align:middle
比如iOS 9然后才做某事

00:09:24.998 --> 00:09:26.366 align:middle
如果你做一个这样的检查

00:09:26.433 --> 00:09:28.869 align:middle
就肯定会给你的程序
带来一个缺陷

00:09:29.169 --> 00:09:31.505 align:middle
因为当比如iOS 9.1

00:09:31.672 --> 00:09:34.608 align:middle
发布时就会使这一检查返回失败的结果

00:09:35.275 --> 00:09:39.046 align:middle
与此不同
你应该知道iOS 9中的一切

00:09:39.112 --> 00:09:44.418 align:middle
都将会在未来的版本之中得以保存
在iOS 9版本中实现的任何逻辑

00:09:44.484 --> 00:09:47.921 align:middle
都要在该版本及其后的版本中得以保留

00:09:48.689 --> 00:09:51.592 align:middle
甚至更好
如果你是在用Swift来编程

00:09:51.859 --> 00:09:55.229 align:middle
你就可以利用的
其新的带有＃号的新的表达法

00:09:55.462 --> 00:09:59.533 align:middle
把您所有的有关版本的
代码放到一个代码块中

00:09:59.600 --> 00:10:02.402 align:middle
编译器就可以理解并辨明并最终告知你

00:09:59.600 --> 00:10:02.402 align:middle
编译器就可以理解并辨明并最终告知你

00:10:02.469 --> 00:10:05.906 align:middle
你的程序是否对某个版本
来讲编译器可以理解和解释的块

00:10:06.840 --> 00:10:09.710 align:middle
把所有特定版本的编码转换成
无论你最终使用了哪一种技术

00:10:09.776 --> 00:10:12.212 align:middle
都要考虑清楚
你是否需要一个Else子句

00:10:12.579 --> 00:10:14.348 align:middle
因为你不想犯一些

00:10:14.414 --> 00:10:16.950 align:middle
控键逻辑错误

00:10:17.150 --> 00:10:20.387 align:middle
而这又是应用程序系统的核心部分

00:10:20.587 --> 00:10:25.859 align:middle
但是倘若版本不符
将导致必要的工作无法进展

00:10:26.059 --> 00:10:31.198 align:middle
同时还会在该版本中出现
你意料不到的故障

00:10:32.232 --> 00:10:35.302 align:middle
这对于一般的应用程序的
寿命周期而言是基本的最优方案

00:10:35.903 --> 00:10:38.839 align:middle
下面我们来说一下视图和视图
控制器的最优方案

00:10:39.506 --> 00:10:42.042 align:middle
我第一个要提出的想法是关于

00:10:42.109 --> 00:10:44.912 align:middle
现代设备的布局的

00:10:46.246 --> 00:10:49.016 align:middle
大家都知到去年秋天
我们推出了iPhone 6

00:10:49.283 --> 00:10:52.452 align:middle
和iPhone 6 Plus
我敢保证你们也都知道

00:10:52.519 --> 00:10:55.889 align:middle
这次我们运用了全新的四维视图效果

00:10:56.190 --> 00:11:00.093 align:middle
在iOS设备中的手机应用软件

00:10:56.190 --> 00:11:00.093 align:middle
在iOS设备中的手机应用软件

00:11:00.160 --> 00:11:01.328 align:middle
是没有这个视觉效果的

00:11:02.329 --> 00:11:06.166 align:middle
当你把这个维度效果添加到苹果手机上

00:11:06.233 --> 00:11:09.937 align:middle
而早前这项技术已运用到iPad上

00:11:10.070 --> 00:11:13.140 align:middle
可能手机软件也需要四维视图效果

00:11:13.207 --> 00:11:16.476 align:middle
就要运用矩阵
在iPad Air 2上拆分视图时

00:11:17.644 --> 00:11:19.379 align:middle
它的矩阵是相当大的

00:11:19.479 --> 00:11:21.949 align:middle
因此 再建立布局就没有意义了

00:11:22.015 --> 00:11:25.853 align:middle
那是用于建立特殊维度的

00:11:25.919 --> 00:11:27.955 align:middle
你的视图控制器已经存在了

00:11:28.288 --> 00:11:33.861 align:middle
相反 作为基础需求布局比例早就完成

00:11:34.528 --> 00:11:38.098 align:middle
我们要专门避免
在我们的视图和视图管理器的

00:11:38.432 --> 00:11:40.634 align:middle
布局中的硬编码值

00:11:41.468 --> 00:11:45.839 align:middle
如果我们只是想象一下视图
简单地在视图里加入一个标签

00:11:46.406 --> 00:11:51.778 align:middle
如果只是简单把布局设
成260点宽其余页边距为30点

00:11:51.845 --> 00:11:56.717 align:middle
那么早在几十年以前就拥有这个技术了

00:11:58.118 --> 00:12:01.021 align:middle
我们没有这么做是因为我们想要考虑

00:11:58.118 --> 00:12:01.021 align:middle
我们没有这么做是因为我们想要考虑

00:12:01.455 --> 00:12:02.856 align:middle
清楚维度比例

00:12:02.923 --> 00:12:04.324 align:middle
任何一个维度都要精确地计算

00:12:04.391 --> 00:12:07.728 align:middle
如果宽度计算了布局遭到破坏

00:12:07.794 --> 00:12:11.365 align:middle
还是无法正常运转
是因为相位差没有意义了

00:12:11.965 --> 00:12:15.369 align:middle
所以如果把这个想成一个居中的标签

00:12:15.903 --> 00:12:18.705 align:middle
那么在维数增加的情况下是有意义的

00:12:18.805 --> 00:12:21.608 align:middle
我们还会提到这个例子 在我讲

00:12:21.675 --> 00:12:23.243 align:middle
关于“自动布局”最优方案时

00:12:24.811 --> 00:12:28.982 align:middle
我想提一下有关我们在iOS8中

00:12:29.049 --> 00:12:31.752 align:middle
提到的应用程序界面
它能帮你成比例的布局

00:12:32.286 --> 00:12:34.655 align:middle
原因是一定程度上为了摒弃

00:12:34.721 --> 00:12:36.823 align:middle
屏幕旋转的想法

00:12:37.257 --> 00:12:40.827 align:middle
你们知道
我们想让你们不再考虑屏幕旋转的问题

00:12:41.195 --> 00:12:43.230 align:middle
事实上我想要告诉你们的是

00:12:43.297 --> 00:12:45.832 align:middle
如果你们在设计app时 有这种想法

00:12:45.899 --> 00:12:48.635 align:middle
考虑横竖屏的问题

00:12:48.702 --> 00:12:50.404 align:middle
或者和设计师讨论这个问题

00:12:50.470 --> 00:12:52.406 align:middle
“横屏”“竖屏”都是他们想出来的

00:12:53.106 --> 00:12:54.741 align:middle
那你就大错特错了

00:12:55.108 --> 00:12:57.311 align:middle
我们只从尺寸的角度考虑问题

00:12:58.212 --> 00:13:00.581 align:middle
所以尺寸类别就是为了帮助我们

00:12:58.212 --> 00:13:00.581 align:middle
所以尺寸类别就是为了帮助我们

00:13:02.182 --> 00:13:05.485 align:middle
从尺寸的角度考虑问题
进而成比例地布局

00:13:06.019 --> 00:13:08.622 align:middle
同时我们也意识到并接受

00:13:09.356 --> 00:13:11.425 align:middle
存在一些关于尺寸的阀值

00:13:12.059 --> 00:13:15.696 align:middle
原因是我们的基本用户界面改变了

00:13:16.029 --> 00:13:19.099 align:middle
如iPhone 4S中的设置选项

00:13:19.166 --> 00:13:21.268 align:middle
是一个很简易的单栏桌面视图

00:13:22.069 --> 00:13:26.240 align:middle
到了iPhone 5
仍然是一个桌面视图 只是高了一点儿

00:13:26.773 --> 00:13:29.343 align:middle
同样iPhone6的也只是高了一点
宽了一点

00:13:29.443 --> 00:13:30.811 align:middle
但基本上还是一个桌面视图

00:13:31.011 --> 00:13:33.380 align:middle
而iPhone6 Plus
也只是更大了一些

00:13:34.047 --> 00:13:36.149 align:middle
可是在我们把它过渡到iPad时

00:13:36.717 --> 00:13:39.520 align:middle
我们跨越了一定的宽度阀值

00:13:40.020 --> 00:13:44.925 align:middle
因此这个视图完全变了样

00:13:44.992 --> 00:13:48.762 align:middle
现在变成了两栏的滚动内容

00:13:49.096 --> 00:13:51.098 align:middle
因此我们在这方面有所突破

00:13:51.298 --> 00:13:55.435 align:middle
实际上你会发现我们跨越了同样的阀值

00:13:55.636 --> 00:13:57.371 align:middle
在我们看iPhone6时

00:13:57.437 --> 00:13:59.406 align:middle
而且可能我得用脏话来形容这个阀值

00:14:03.443 --> 00:14:06.013 align:middle
竖屏模式尺寸类别
也就是我们说的应用程序界面

00:14:06.280 --> 00:14:08.749 align:middle
对于我们苹果公司
为了与你们的app衔接

00:14:09.183 --> 00:14:11.985 align:middle
就会跨过那些基本阀值

00:14:12.486 --> 00:14:16.924 align:middle
而这也是为了让你们能应对阀值并考虑

00:14:16.990 --> 00:14:19.693 align:middle
使用一个彻底改变的用户界面

00:14:19.760 --> 00:14:20.627 align:middle
来应对那些阀值

00:14:20.861 --> 00:14:23.997 align:middle
你将收到那些阈值改变的通知

00:14:24.064 --> 00:14:28.902 align:middle
因为规格类打包在对象中
UITraitCollection

00:14:28.969 --> 00:14:31.038 align:middle
视图控制器可访问这些对象

00:14:32.105 --> 00:14:33.240 align:middle
所以这就是布局

00:14:33.507 --> 00:14:35.809 align:middle
我要传授给你的下一个最优方案是

00:14:35.876 --> 00:14:37.678 align:middle
在类中使用属性

00:14:37.744 --> 00:14:40.714 align:middle
作为UI视图标签的替代

00:14:41.148 --> 00:14:45.152 align:middle
所以我的意思是
如果你正在使用带有标签的视图

00:14:45.219 --> 00:14:47.921 align:middle
或设置UI视图标签的应用程序接口
且正在装载代码

00:14:47.988 --> 00:14:50.691 align:middle
我要鼓励你抛弃这些

00:14:51.391 --> 00:14:53.393 align:middle
原因就是

00:14:55.262 --> 00:14:59.032 align:middle
谢谢
我真的很高兴有人为此而开心

00:15:02.202 --> 00:15:04.505 align:middle
所以我的意思是 原因很显然

00:15:04.571 --> 00:15:08.542 align:middle
它只是一个整数
它与其他代码有潜在的冲突

00:15:08.609 --> 00:15:10.244 align:middle
也许它是你所写的其它代码

00:15:10.310 --> 00:15:12.179 align:middle
也许它是你团队中的新成员

00:15:12.246 --> 00:15:14.448 align:middle
他还不知道你认真管理的整数

00:15:14.882 --> 00:15:18.018 align:middle
也许它是你所使用的框架

00:15:18.085 --> 00:15:20.020 align:middle
你却看不到

00:15:21.054 --> 00:15:22.689 align:middle
无论这些冲突何时发生

00:15:22.756 --> 00:15:24.825 align:middle
你都接收不到
编译器发出的有关警告信息

00:15:25.058 --> 00:15:26.226 align:middle
编译器无法推断出

00:15:26.293 --> 00:15:27.594 align:middle
你的整数管理

00:15:28.629 --> 00:15:31.965 align:middle
如果你既没有收到编译器的警告信息

00:15:32.299 --> 00:15:35.035 align:middle
也没有收到运行错误

00:15:35.102 --> 00:15:36.770 align:middle
无法说明
带标签视图使用上的信息

00:15:36.837 --> 00:15:40.140 align:middle
你最多可以收到
由未被认出的选择符导致的崩溃

00:15:40.407 --> 00:15:41.909 align:middle
你无法知道发生了什么

00:15:42.809 --> 00:15:47.614 align:middle
作为替代 声明类属性

00:15:47.881 --> 00:15:51.885 align:middle
这样你就可以与之后需要使用
的那些视图产生实质性的联系

00:15:52.553 --> 00:15:58.125 align:middle
举一个简单的代码示例
假设我写了一些代码

00:15:58.192 --> 00:16:00.994 align:middle
来生成图像视图
然后以一千这个标签跟踪这段代码

00:15:58.192 --> 00:16:00.994 align:middle
来生成图像视图
然后以一千这个标签跟踪这段代码

00:16:01.061 --> 00:16:02.863 align:middle
因为我以我所有的聪明才智确信

00:16:02.930 --> 00:16:07.100 align:middle
别人绝不会用到一千这个标签

00:16:08.802 --> 00:16:11.638 align:middle
但是这之后我看了我的演讲
我说不不

00:16:12.105 --> 00:16:14.508 align:middle
让我创建一个实际属性

00:16:14.842 --> 00:16:16.476 align:middle
将它声明为UI图像视图

00:16:16.543 --> 00:16:19.179 align:middle
然后我保持一个指向这个视图的引用

00:16:19.513 --> 00:16:22.482 align:middle
这个引用也有更好的类型信息

00:16:22.649 --> 00:16:25.886 align:middle
因为只带有标签的视图是类型UI视图

00:16:26.353 --> 00:16:29.122 align:middle
由于使用定义属性类型的UI图像视图

00:16:29.323 --> 00:16:31.558 align:middle
编译器事实上可以推断出我做了什么

00:16:31.625 --> 00:16:33.527 align:middle
并且在出现错误时帮我解决问题

00:16:34.061 --> 00:16:35.829 align:middle
请注意

00:16:36.363 --> 00:16:39.266 align:middle
视图和视图控制器的最优方案是

00:16:39.333 --> 00:16:41.768 align:middle
时间设定具备决定性意义

00:16:43.036 --> 00:16:47.007 align:middle
也就是说
对于你们那些已经处于某种位置

00:16:47.107 --> 00:16:51.879 align:middle
可以做一些事情沿着系统动画去做

00:16:52.379 --> 00:16:55.582 align:middle
或者你有些工作想要做

00:16:55.649 --> 00:16:58.185 align:middle
而动画已经完成 所以你只能

00:16:58.252 --> 00:17:02.456 align:middle
乖乖地去猜到底那个动画要花多长时间

00:16:58.252 --> 00:17:02.456 align:middle
乖乖地去猜到底那个动画要花多长时间

00:17:02.523 --> 00:17:04.691 align:middle
也许实施起来
就像一个NSTimer定时器

00:17:05.025 --> 00:17:07.027 align:middle
老老实实地为你守时

00:17:07.661 --> 00:17:09.496 align:middle
好吧 你并不想那样做 因为

00:17:09.563 --> 00:17:12.031 align:middle
那样的话 App里会产生不确定性

00:17:12.098 --> 00:17:14.134 align:middle
尤其是关于可能性

00:17:14.201 --> 00:17:17.037 align:middle
动画的时间设置可能每一集都不同

00:17:17.570 --> 00:17:19.540 align:middle
你真的是不过时的反义词

00:17:19.606 --> 00:17:21.108 align:middle
如果你真的在做这些事相反

00:17:21.575 --> 00:17:25.179 align:middle
利用UI视图过渡协调器

00:17:25.479 --> 00:17:30.284 align:middle
在UI视图控制器的API
去了解何为时间设定

00:17:30.350 --> 00:17:31.785 align:middle
你所拥有的动画有何时间设定

00:17:32.319 --> 00:17:33.453 align:middle
这能够让你

00:17:33.520 --> 00:17:35.255 align:middle
做你想要的任何动画 随便你想要的

00:17:35.322 --> 00:17:38.025 align:middle
视图控制器过渡

00:17:39.293 --> 00:17:43.330 align:middle
你当然知道何时那种过渡会完成

00:17:44.131 --> 00:17:47.935 align:middle
其中内置支持可撤销动画

00:17:48.302 --> 00:17:49.803 align:middle
和交互动画

00:17:50.070 --> 00:17:52.940 align:middle
如果你再想象导航轻扫手势一下

00:17:53.373 --> 00:17:56.310 align:middle
用户可以前后移动手掌来

00:17:56.376 --> 00:18:01.849 align:middle
改变速度、方向 甚至决定不要
弹出视图控制器并全部取消

00:17:56.376 --> 00:18:01.849 align:middle
改变速度、方向 甚至决定不要
弹出视图控制器并全部取消

00:18:02.516 --> 00:18:06.253 align:middle
如果你使用过渡协调器
那么你准备好要处理所有这些

00:18:07.554 --> 00:18:09.723 align:middle
我们来谈一谈自动布局的最优方案

00:18:10.991 --> 00:18:13.727 align:middle
自动布局是一种工具
我敢肯定大家很多人都知道 也喜欢用

00:18:13.794 --> 00:18:17.064 align:middle
它是一种内置的设计上是

00:18:17.130 --> 00:18:20.300 align:middle
要帮助你适应

00:18:20.767 --> 00:18:23.770 align:middle
并以你的代码实现不过时
我们打算现在要谈一谈这方面

00:18:23.837 --> 00:18:26.540 align:middle
不过时是一个目标
是自动布局工具的目标之一

00:18:27.274 --> 00:18:29.209 align:middle
但首先 我要简短说一下

00:18:29.276 --> 00:18:33.280 align:middle
有一些最优方案可以带来高性能
给你的自动布局工具带来高性能

00:18:33.680 --> 00:18:37.184 align:middle
这就要有个开头管理你自己的约束
从这里开始

00:18:37.384 --> 00:18:39.152 align:middle
用最高效的方式去管理
效率越高越好

00:18:40.254 --> 00:18:45.659 align:middle
你做事的方式就是把所有约束想象出来
想象到你的视图里

00:18:45.993 --> 00:18:51.131 align:middle
然后识别这些约束
它们在视图的整个生命时间都可能变化

00:18:52.032 --> 00:18:54.601 align:middle
当识别到发生什么变化时有意义的就是

00:18:55.102 --> 00:18:59.039 align:middle
你就会能够做出有目标的变化

00:19:00.174 --> 00:19:03.043 align:middle
而不是改变事物
不是改变不必改变的事物

00:19:03.110 --> 00:19:06.280 align:middle
因为当你保持一些事情恒定不变时

00:19:06.680 --> 00:19:09.683 align:middle
你就让自动布局引擎来最优化这些事情

00:19:09.750 --> 00:19:12.719 align:middle
这些不会变化的事情

00:19:12.786 --> 00:19:16.557 align:middle
因而自动布局工具不必进行若干计算
而你的app布局也更快速

00:19:16.623 --> 00:19:18.659 align:middle
这一点尤其重要

00:19:18.725 --> 00:19:21.695 align:middle
如果你在卷轴期间重新布局的话

00:19:21.762 --> 00:19:23.330 align:middle
或者其他有些事情用户交互

00:19:24.665 --> 00:19:27.401 align:middle
部分用户交互 确定无疑的最优方案

00:19:27.467 --> 00:19:29.703 align:middle
而这是最糟实践而最优方案是

00:19:29.770 --> 00:19:31.371 align:middle
要避免最糟实践

00:19:31.872 --> 00:19:34.308 align:middle
把所有约束从视图中清除出去

00:19:35.209 --> 00:19:38.545 align:middle
这点不仅对于App执行自动布局引擎

00:19:38.612 --> 00:19:40.547 align:middle
的性能表现不好

00:19:40.614 --> 00:19:42.516 align:middle
在做尽可能多工作时

00:19:43.050 --> 00:19:46.486 align:middle
它同时还是潜在的兼容性问题

00:19:46.553 --> 00:19:51.058 align:middle
因为未来版本iOS可能有额外的约束

00:19:51.124 --> 00:19:53.527 align:middle
框架已经添加了这些额外的约束

00:19:53.594 --> 00:19:55.295 align:middle
你只要调用删除所有约束 就可以删除

00:19:55.796 --> 00:19:58.365 align:middle
你想要避免调用“删除所有约束”

00:19:58.432 --> 00:20:00.200 align:middle
在视图上尽量避免 越多越好

00:19:58.432 --> 00:20:00.200 align:middle
在视图上尽量避免 越多越好

00:20:01.835 --> 00:20:05.472 align:middle
把这些捆绑在一起这种做法就是能够

00:20:05.539 --> 00:20:07.474 align:middle
高效地管理约束

00:20:07.541 --> 00:20:10.043 align:middle
通过用同样的策略明确地表达

00:20:10.110 --> 00:20:14.581 align:middle
我们刚刚谈过通过替换视图标签

00:20:14.882 --> 00:20:18.585 align:middle
让实际属性指出这些视图

00:20:18.652 --> 00:20:20.454 align:middle
或你可能需要的约束

00:20:20.521 --> 00:20:22.823 align:middle
在视图的整个生命期进行改变

00:20:23.590 --> 00:20:26.360 align:middle
那么让我们看一下这个非常简单的实例

00:20:26.693 --> 00:20:29.997 align:middle
是关于如何写入更新视图的约束码

00:20:30.330 --> 00:20:32.699 align:middle
而且这使最简单的事成为可能

00:20:32.933 --> 00:20:35.836 align:middle
这是在说嘿 我需要更新我的约束

00:20:36.036 --> 00:20:37.471 align:middle
让我只是将它们全部移除

00:20:37.738 --> 00:20:39.406 align:middle
然后我会重新计算 并把它们添加回去

00:20:40.841 --> 00:20:41.775 align:middle
我们并不想这么做

00:20:41.842 --> 00:20:43.243 align:middle
这不是最佳实用方法

00:20:43.610 --> 00:20:47.915 align:middle
最佳实用方法是如果我们有一个约束

00:20:48.248 --> 00:20:51.351 align:middle
如它需要被更改的话 可以移除它

00:20:52.519 --> 00:20:56.089 align:middle
仅需重建那个约束 然后把它添加回去

00:20:56.790 --> 00:20:59.193 align:middle
自动布局引擎
再次识别到无法更改的约束

00:20:59.293 --> 00:21:02.196 align:middle
而且它可为我们优化

00:20:59.293 --> 00:21:02.196 align:middle
而且它可为我们优化

00:21:03.931 --> 00:21:07.401 align:middle
因此我为您们设计了下一组最佳方法

00:21:07.467 --> 00:21:09.703 align:middle
关于约束是围绕这一思想

00:21:09.770 --> 00:21:13.807 align:middle
就是当您描述约束时您有多具体

00:21:14.374 --> 00:21:16.710 align:middle
总之 您想要您的约束

00:21:16.777 --> 00:21:21.315 align:middle
尽可能准确描述您的布局

00:21:21.648 --> 00:21:23.884 align:middle
也就是说
您要说出若要获取您想要的布局

00:21:23.951 --> 00:21:27.154 align:middle
需要做什么
以及您不想要又该怎么做

00:21:27.221 --> 00:21:29.022 align:middle
换句话说您说的要详尽

00:21:30.023 --> 00:21:35.963 align:middle
而且关于这个特殊性问题

00:21:36.029 --> 00:21:40.200 align:middle
双方也存在潜在问题
我将在此一一讲解

00:21:40.267 --> 00:21:43.003 align:middle
第一个就是执行问题

00:21:43.437 --> 00:21:48.208 align:middle
因此第一个就是
添加双重约束到您的视图中

00:21:48.575 --> 00:21:52.579 align:middle
双重视图约束指的是当你删除它们时

00:21:53.080 --> 00:21:55.048 align:middle
布局将会完全相同

00:21:55.115 --> 00:21:58.252 align:middle
因为它们已经隐含在那里

00:21:58.952 --> 00:22:01.188 align:middle
而且当您使用它时
它就会引发布局引擎

00:21:58.952 --> 00:22:01.188 align:middle
而且当您使用它时
它就会引发布局引擎

00:22:01.255 --> 00:22:03.323 align:middle
去完成更多的工作
因为它正在为

00:22:03.390 --> 00:22:05.225 align:middle
这些约束解决问题
因为它们在那里

00:22:05.292 --> 00:22:06.960 align:middle
但它不需要实际解决

00:22:08.128 --> 00:22:11.698 align:middle
可以在简单的布局中看到这一实例

00:22:12.299 --> 00:22:14.468 align:middle
我在超级视图中获取了一些视图

00:22:15.269 --> 00:22:21.408 align:middle
首先我会通过做一个纵轴描述这个布局

00:22:21.775 --> 00:22:26.146 align:middle
并且说 嘿
在我的顶视图和底视图之间有些边界

00:22:26.480 --> 00:22:29.183 align:middle
我在对齐选项中赋值以指明

00:22:29.249 --> 00:22:31.919 align:middle
这两个视图的左侧也是对齐的

00:22:32.719 --> 00:22:35.322 align:middle
然后我说
好的 让我们进入横向维度

00:22:35.689 --> 00:22:39.193 align:middle
我为顶视图提供了一些间距

00:22:39.526 --> 00:22:41.895 align:middle
因此现在我了解它的左边界是什么

00:22:42.362 --> 00:22:45.065 align:middle
然后我想 好的
我已经指定好这个底视图

00:22:45.132 --> 00:22:48.101 align:middle
同时我也指定好底视图的边界

00:22:48.869 --> 00:22:52.005 align:middle
但是我刚才在按钮视图的左边界制造了

00:22:52.072 --> 00:22:55.642 align:middle
我并不需要的边界

00:22:56.176 --> 00:22:58.846 align:middle
已知顶部视图的边界

00:22:59.379 --> 00:23:02.416 align:middle
我也知道 按钮的左边界

00:22:59.379 --> 00:23:02.416 align:middle
我也知道 按钮的左边界

00:23:02.482 --> 00:23:04.885 align:middle
并且顶部视图将对齐

00:23:05.485 --> 00:23:09.356 align:middle
如果我没有指定按钮视图的左边界

00:23:09.423 --> 00:23:14.094 align:middle
这个视图层将准确的成为相同的布局

00:23:14.428 --> 00:23:17.064 align:middle
所以外部约束只会导致

00:23:17.130 --> 00:23:18.332 align:middle
引擎做不需要它做的事

00:23:19.333 --> 00:23:21.034 align:middle
解决了这个问题之后我们可以更快

00:23:22.603 --> 00:23:24.805 align:middle
下一个问题是

00:23:24.872 --> 00:23:27.241 align:middle
过度设定约束将导致

00:23:27.307 --> 00:23:30.744 align:middle
的实际不是性能问题而是适用性问题

00:23:30.811 --> 00:23:32.846 align:middle
这对应用是个潜在的隐患

00:23:33.280 --> 00:23:35.749 align:middle
在约束不够灵活时就会发生适用性问题

00:23:36.416 --> 00:23:40.354 align:middle
如果我们考虑硬编码值
我们知道我们不想这么做

00:23:40.988 --> 00:23:42.389 align:middle
让我们回到这个例子

00:23:42.456 --> 00:23:46.393 align:middle
回到视图中的标签

00:23:47.160 --> 00:23:51.365 align:middle
我们可以再一次描述它的约束条件为

00:23:51.431 --> 00:23:55.903 align:middle
距离左边有30点宽260点

00:23:56.336 --> 00:23:58.172 align:middle
但是这些硬编码值

00:23:58.705 --> 00:24:02.409 align:middle
让我们看起来死板和僵化

00:23:58.705 --> 00:24:02.409 align:middle
让我们看起来死板和僵化

00:24:02.476 --> 00:24:04.545 align:middle
与作为面向未来的先进工具

00:24:04.811 --> 00:24:07.214 align:middle
的自动布局技术的整体思路相违背

00:24:08.182 --> 00:24:11.785 align:middle
我们真正想做的是用视图所在

00:24:11.852 --> 00:24:13.687 align:middle
本地坐标系中
的位置和大小定义约束条件

00:24:14.188 --> 00:24:18.792 align:middle
所以应该使用父视图
在本地坐标系的位置和大小

00:24:19.059 --> 00:24:22.596 align:middle
来定义视图边界的最小约束条件

00:24:24.398 --> 00:24:27.968 align:middle
所以来讨论定义约束条件的另一面

00:24:28.168 --> 00:24:30.671 align:middle
设定不足的约束

00:24:30.737 --> 00:24:33.907 align:middle
你也不会想这么做的
肯定想已经设定好了所有你需要的约束

00:24:34.608 --> 00:24:38.045 align:middle
考虑下 会发生什么？

00:24:38.111 --> 00:24:41.582 align:middle
如果设定不足约束 我们会引入歧义

00:24:42.249 --> 00:24:46.053 align:middle
让我们回到将要设定的约束

00:24:46.119 --> 00:24:49.890 align:middle
如果我设定这个标签的左右边界

00:24:50.390 --> 00:24:54.194 align:middle
然后再设定一个上边界有些东西不见了

00:24:54.261 --> 00:24:55.963 align:middle
非常明显

00:24:56.230 --> 00:24:58.632 align:middle
我们没有设定底部边界 原本应该设的

00:24:59.032 --> 00:25:03.036 align:middle
因此我们引入了歧义

00:24:59.032 --> 00:25:03.036 align:middle
因此我们引入了歧义

00:25:04.104 --> 00:25:06.173 align:middle
这意味着我的视图

00:25:06.240 --> 00:25:09.576 align:middle
在不同时间运行
程序时将以不同的方式出现

00:25:09.643 --> 00:25:11.411 align:middle
假设这是一个表单元

00:25:11.478 --> 00:25:13.247 align:middle
当我调用刷新数据时

00:25:13.313 --> 00:25:14.715 align:middle
它变了 我很迷惑

00:25:15.249 --> 00:25:17.584 align:middle
它可能随IOS不同版本发生变化

00:25:17.651 --> 00:25:21.555 align:middle
或者因为不同宇宙射线击中手机设备

00:25:22.022 --> 00:25:22.923 align:middle
谁知道呢？

00:25:23.190 --> 00:25:25.492 align:middle
我们不想要未定义的行为

00:25:25.826 --> 00:25:28.295 align:middle
我们不想要我们的视图看起来这样

00:25:28.862 --> 00:25:30.697 align:middle
我们想要它按照我们设定的高度

00:25:32.165 --> 00:25:34.735 align:middle
所以请确定你完全定义了你的约束条件

00:25:35.435 --> 00:25:37.504 align:middle
我想以练习的形式给你一个

00:25:37.738 --> 00:25:39.673 align:middle
调试自动布局代码的最优方案

00:25:40.807 --> 00:25:44.945 align:middle
你可以使用布局歧义检测的UI视图

00:25:45.312 --> 00:25:47.514 align:middle
如果你想在调试时找出

00:25:47.581 --> 00:25:51.285 align:middle
视图未能正确布局的原因

00:25:51.752 --> 00:25:53.253 align:middle
调用布局歧义检测

00:25:53.687 --> 00:25:56.590 align:middle
它帮你找到视图中存在的歧义

00:25:57.724 --> 00:26:00.894 align:middle
你还可以在窗口调用这个方法

00:25:57.724 --> 00:26:00.894 align:middle
你还可以在窗口调用这个方法

00:26:01.495 --> 00:26:05.966 align:middle
它会告诉你视图树上
的任意视图是否有歧义布局

00:26:06.500 --> 00:26:07.701 align:middle
这非常方便

00:26:09.036 --> 00:26:11.805 align:middle
你可以调用自动布局跟踪的UI视图

00:26:12.406 --> 00:26:16.410 align:middle
得到一张包含视图树所有约束的图片

00:26:17.110 --> 00:26:19.880 align:middle
使用那些约束去找到歧义

00:26:21.715 --> 00:26:23.584 align:middle
真正有趣的最优方案是

00:26:23.951 --> 00:26:28.689 align:middle
用正确方式的去使用这些方法
把它们放在单元实验中

00:26:29.823 --> 00:26:35.929 align:middle
你可以想象在你的应用中的每个视图树
每个基本的活动

00:26:36.797 --> 00:26:40.734 align:middle
都可以调用布局歧义检测窗口

00:26:41.468 --> 00:26:43.737 align:middle
如果它有布局歧义

00:26:44.071 --> 00:26:47.140 align:middle
你可以调用UI视图自动布局

00:26:47.608 --> 00:26:51.578 align:middle
跟踪找到存在歧义的约束条件

00:26:52.045 --> 00:26:54.181 align:middle
将它们打包到报告

00:26:54.314 --> 00:26:58.652 align:middle
这既能让你知道这个实验中

00:26:58.719 --> 00:27:01.088 align:middle
什么时候存在歧义

00:26:58.719 --> 00:27:01.088 align:middle
什么时候存在歧义

00:27:01.321 --> 00:27:04.558 align:middle
也能为后来学习并发现问题的人
提供调试信息

00:27:05.158 --> 00:27:07.794 align:middle
这就是自动布局apps

00:27:07.861 --> 00:27:08.829 align:middle
最优方案

00:27:16.336 --> 00:27:17.171 align:middle
好的

00:27:17.237 --> 00:27:21.508 align:middle
我将转到我们最后一个最优方案的话题

00:27:21.775 --> 00:27:23.577 align:middle
关于表视图和聚合视图

00:27:24.011 --> 00:27:29.516 align:middle
我知道这对几乎所有IOS应用都重要

00:27:29.850 --> 00:27:31.852 align:middle
当然它对我也很重要

00:27:32.286 --> 00:27:36.089 align:middle
最优方案的第一步
是使用自适应大小单元格

00:27:36.156 --> 00:27:40.260 align:middle
当你需要单元格中的内容
可以变化的时候

00:27:40.327 --> 00:27:42.829 align:middle
或者需要一个随内容变化大小的单元格

00:27:44.264 --> 00:27:49.269 align:middle
我相信你们大多数人在开发生涯中都

00:27:49.469 --> 00:27:50.871 align:middle
会遇到这样的场景

00:27:51.138 --> 00:27:55.008 align:middle
在已有内容的基础表视图中

00:27:55.209 --> 00:27:56.577 align:middle
你突然意识到 哦...

00:27:57.177 --> 00:28:00.347 align:middle
根据不同的内容每一个单元格都需要
不同的高度

00:27:57.177 --> 00:28:00.347 align:middle
根据不同的内容每一个单元格都需要
不同的高度

00:28:00.414 --> 00:28:03.016 align:middle
我不能让每个单元格只有一个高度

00:28:04.084 --> 00:28:06.687 align:middle
iOS8中引入的自适应大小单元格

00:28:06.753 --> 00:28:10.290 align:middle
将会使这些转换工作变得简单

00:28:10.591 --> 00:28:14.228 align:middle
自适应大小单元格在表视图中
可以根据内容变化高度

00:28:15.195 --> 00:28:18.131 align:middle
现在我将开始讲解这个最优方案

00:28:18.365 --> 00:28:21.068 align:middle
告诉你如何在你的应用中使用它

00:28:21.802 --> 00:28:23.504 align:middle
它就像我们刚才在

00:28:23.570 --> 00:28:25.439 align:middle
自动布局中说到的那样启动

00:28:25.772 --> 00:28:27.741 align:middle
需要完全设定你的约束

00:28:28.809 --> 00:28:31.945 align:middle
如果你想使用所有我讲过的技巧

00:28:32.446 --> 00:28:37.084 align:middle
考虑到自动布局系统

00:28:37.451 --> 00:28:41.522 align:middle
将宽度作为输入

00:28:42.222 --> 00:28:44.725 align:middle
因为表视图是固定宽度

00:28:44.925 --> 00:28:46.527 align:middle
所以你的单元格将会是这个宽度

00:28:47.227 --> 00:28:50.797 align:middle
随后自动布局系统会输出单元格高度值

00:28:51.532 --> 00:28:54.134 align:middle
如果未完全设定约束条件

00:28:54.201 --> 00:28:56.270 align:middle
这里会存在歧义

00:28:56.336 --> 00:28:58.906 align:middle
就不会得到你想要的那个高度

00:29:01.008 --> 00:29:03.844 align:middle
如果我们使用表视图单元格的简单例子

00:29:04.111 --> 00:29:05.179 align:middle
它真的很简单

00:29:05.646 --> 00:29:09.016 align:middle
我们只需要设定我们内容的边界

00:29:09.082 --> 00:29:10.751 align:middle
在这个例子中只是个标签

00:29:11.084 --> 00:29:12.853 align:middle
它具有固定的内容尺寸

00:29:12.920 --> 00:29:15.055 align:middle
所以当我们设定它的边界时

00:29:15.255 --> 00:29:18.725 align:middle
完全定义了这个单元格的约束条件

00:29:18.792 --> 00:29:21.628 align:middle
我们将得到我们要的尺寸

00:29:23.330 --> 00:29:26.433 align:middle
你可能还有一些更复杂的单元格

00:29:26.500 --> 00:29:28.368 align:middle
我认为这是一个简单的例子

00:29:29.002 --> 00:29:33.273 align:middle
然而有时你会发现 嘿

00:29:33.540 --> 00:29:35.042 align:middle
我已经设定了我所有的约束条件

00:29:35.108 --> 00:29:37.344 align:middle
但是我没有得到我想要的高度

00:29:38.212 --> 00:29:40.380 align:middle
这里有个技巧

00:29:40.647 --> 00:29:43.450 align:middle
关于增加内容视图的约束条件的技巧

00:29:43.750 --> 00:29:45.919 align:middle
这个约束条件用来设定内容视图的高度

00:29:45.986 --> 00:29:47.654 align:middle
实际上你正在使用

00:29:47.921 --> 00:29:49.990 align:middle
内容视图的高度约束条件

00:29:50.457 --> 00:29:52.693 align:middle
然后你就能以
内容的形式设定约束条件了

00:29:52.759 --> 00:29:56.129 align:middle
这里我要说 嘿
内容视图的高度应当等于

00:29:56.196 --> 00:29:59.633 align:middle
标签高度加上我的顶和按钮的边界

00:30:00.367 --> 00:30:02.936 align:middle
在这里 这是重复工作

00:30:03.003 --> 00:30:05.038 align:middle
我不需要这样做

00:30:05.372 --> 00:30:07.040 align:middle
我会得到同样的东西

00:30:07.441 --> 00:30:10.410 align:middle
但是如果你的应用中
你没得到你想要的结果

00:30:11.111 --> 00:30:13.847 align:middle
并且你在视图上加了一个高度约束

00:30:14.348 --> 00:30:18.085 align:middle
导致单元格高度变化

00:30:18.919 --> 00:30:20.921 align:middle
这表明你的约束条件

00:30:22.256 --> 00:30:26.827 align:middle
不符合你所需效果的设计逻辑

00:30:27.261 --> 00:30:30.497 align:middle
这有个伟大的工具
你可以用它来找到错误

00:30:31.465 --> 00:30:35.169 align:middle
现在 你可以考虑

00:30:35.235 --> 00:30:38.906 align:middle
如何让单元格变化以动画的方式呈现
你知道

00:30:40.174 --> 00:30:42.976 align:middle
使用自适应大小单元格和自动布局

00:30:44.111 --> 00:30:48.982 align:middle
现在你可以想象你如果有一些单元格

00:30:49.049 --> 00:30:52.986 align:middle
需要根据内容变化
你可能采取非常原始的方法

00:30:53.420 --> 00:30:56.456 align:middle
更新你的模型然后调用刷新数据

00:30:57.724 --> 00:30:59.560 align:middle
如果你这样做 单元格会变成这样

00:30:59.626 --> 00:31:02.563 align:middle
它会出现在表格的新位置

00:30:59.626 --> 00:31:02.563 align:middle
它会出现在表格的新位置

00:31:02.863 --> 00:31:08.402 align:middle
确实达到了目的 但是这不符合

00:31:08.468 --> 00:31:09.536 align:middle
你想要的用户体验

00:31:09.603 --> 00:31:11.705 align:middle
它看上去不那么精美和平滑

00:31:12.573 --> 00:31:16.877 align:middle
你想要的是
单元格高度的变化的动画效果

00:31:17.211 --> 00:31:20.180 align:middle
单元格周围的东西应该以动画的方式

00:31:20.681 --> 00:31:23.350 align:middle
平滑的移动到它们的位置

00:31:23.417 --> 00:31:24.985 align:middle
必须让用户能理解发生了什么

00:31:26.653 --> 00:31:28.655 align:middle
让我们演示下如何做

00:31:29.323 --> 00:31:30.457 align:middle
谢天谢地 它非常简单

00:31:31.491 --> 00:31:34.661 align:middle
任何时候你想要一个类变换

00:31:34.728 --> 00:31:36.997 align:middle
在表视图中以动画显示

00:31:37.364 --> 00:31:43.470 align:middle
可用表视图API来开始更新和更新块

00:31:43.537 --> 00:31:47.074 align:middle
第一步是调用表视图开始更新

00:31:47.407 --> 00:31:50.110 align:middle
不管你是否使用
自适应大小单元格都要做这一步

00:31:50.177 --> 00:31:53.313 align:middle
这是在表视图中
实现类变换动画效果的通用步骤

00:31:54.481 --> 00:31:56.116 align:middle
然后更新你的模型

00:31:56.850 --> 00:31:57.851 align:middle
很简单

00:31:59.052 --> 00:32:02.856 align:middle
第三步
如果你在改变一个屏幕单元格的高度

00:31:59.052 --> 00:32:02.856 align:middle
第三步
如果你在改变一个屏幕单元格的高度

00:32:03.357 --> 00:32:05.692 align:middle
你可以点击这个单元格

00:32:05.759 --> 00:32:08.061 align:middle
触发索引路径行的表视图单元格

00:32:08.595 --> 00:32:10.364 align:middle
然后改变单元格的内容

00:32:10.430 --> 00:32:12.366 align:middle
需要的话还可以改变约束条件

00:32:12.633 --> 00:32:13.800 align:middle
有些时候人们认为需要

00:32:13.867 --> 00:32:16.403 align:middle
调用重新加载索引路径行

00:32:16.470 --> 00:32:17.604 align:middle
不需要这样做

00:32:17.671 --> 00:32:20.507 align:middle
它不会给你良好的体验

00:32:20.974 --> 00:32:23.010 align:middle
实际上你只需要点击单元格

00:32:23.076 --> 00:32:24.111 align:middle
并改变它的内容

00:32:24.811 --> 00:32:25.946 align:middle
做完这些后

00:32:26.580 --> 00:32:28.916 align:middle
点表视图结束更新

00:32:29.516 --> 00:32:33.820 align:middle
表视图此时重新计算所有行的类

00:32:34.354 --> 00:32:36.423 align:middle
包括调用所有的在屏幕上的行

00:32:36.490 --> 00:32:38.926 align:middle
以从自动布局信息获得它们高度

00:32:39.459 --> 00:32:42.429 align:middle
如你所见 所有的东西以动画效果呈现

00:32:42.829 --> 00:32:45.933 align:middle
开始更新 结束更新是关键

00:32:48.168 --> 00:32:51.638 align:middle
最后一个我想分享给你的最优方案是

00:32:51.705 --> 00:32:56.910 align:middle
自定义聚合视图布局

00:32:56.977 --> 00:33:00.614 align:middle
自己失效 然后非常快的重新绘制

00:32:56.977 --> 00:33:00.614 align:middle
自己失效 然后非常快的重新绘制

00:33:01.148 --> 00:33:03.116 align:middle
我知道很多人

00:33:03.183 --> 00:33:05.552 align:middle
会写自定义聚合视图布局

00:33:05.853 --> 00:33:08.222 align:middle
在用户滚动的时候 对视图本身

00:33:08.288 --> 00:33:10.591 align:middle
做做这个 改改那个

00:33:10.691 --> 00:33:13.560 align:middle
它们很难跟上布局的改变

00:33:14.161 --> 00:33:17.030 align:middle
恩 我将告诉你图形应用如何

00:33:17.097 --> 00:33:21.101 align:middle
完成这个工作 然后你就能把这项技术

00:33:21.201 --> 00:33:24.004 align:middle
应用到你的自定义布局中了

00:33:25.372 --> 00:33:28.909 align:middle
图形布局有这样的头部

00:33:28.976 --> 00:33:31.912 align:middle
为聚合视图的辅助视图

00:33:32.513 --> 00:33:35.616 align:middle
当用户滚屏 甚至单元格移动时

00:33:35.682 --> 00:33:39.953 align:middle
头视图留在屏幕原来的位置上

00:33:41.121 --> 00:33:44.124 align:middle
这是我所知道的很多人

00:33:44.191 --> 00:33:46.293 align:middle
在聚合视图中完成上述工作的基本思路

00:33:46.760 --> 00:33:50.264 align:middle
图形布局可以

00:33:50.564 --> 00:33:54.635 align:middle
UI CollectionView
无效上下文实例做到这个

00:33:54.701 --> 00:33:58.572 align:middle
UI CollectionView
中有这个API

00:34:00.040 --> 00:34:02.809 align:middle
这个步骤非常简单

00:34:03.310 --> 00:34:04.878 align:middle
第一步非常明显

00:34:05.846 --> 00:34:08.715 align:middle
坐标改变后图片视图布局重新绘制

00:34:08.782 --> 00:34:10.817 align:middle
所以用户滚屏时

00:34:11.552 --> 00:34:13.253 align:middle
图形布局重新绘制

00:34:13.620 --> 00:34:15.322 align:middle
就变得轻而易举这是简单的部分

00:34:15.389 --> 00:34:17.925 align:middle
问题是我们如何让它变快

00:34:17.991 --> 00:34:24.063 align:middle
答案是图形布局建立目标视图重绘过程

00:34:24.598 --> 00:34:28.235 align:middle
让聚合视图知道只有头视图

00:34:29.101 --> 00:34:32.539 align:middle
会进行重绘

00:34:32.840 --> 00:34:37.543 align:middle
而其它的单元格不会重绘

00:34:37.844 --> 00:34:41.681 align:middle
这让聚合视图能尽快的完成整个操作

00:34:42.081 --> 00:34:45.953 align:middle
它如此快 这个操作只在

00:34:46.119 --> 00:34:48.455 align:middle
帧速率很快的时候重复

00:34:48.522 --> 00:34:52.092 align:middle
尽管每一帧布局都会重绘

00:34:52.525 --> 00:34:55.395 align:middle
所以如果你在使用自定义布局时

00:34:55.728 --> 00:34:57.531 align:middle
有性能要求

00:34:58.398 --> 00:35:00.901 align:middle
你可以在布局时使用这项技术

00:34:58.398 --> 00:35:00.901 align:middle
你可以在布局时使用这项技术

00:35:01.235 --> 00:35:02.503 align:middle
总的来说

00:35:02.569 --> 00:35:04.938 align:middle
UI CollectionView
无效上下文是

00:35:05.005 --> 00:35:08.075 align:middle
克服性能问题的关键

00:35:08.208 --> 00:35:10.177 align:middle
所以我建议你用用这个API

00:35:12.045 --> 00:35:18.385 align:middle
好了 我已经讲了一整套最优方案

00:35:19.253 --> 00:35:23.590 align:middle
我们讨论了性能以及
如何让你的应用启动时快速响应

00:35:23.657 --> 00:35:25.659 align:middle
在它的生命周期内如何

00:35:25.993 --> 00:35:28.529 align:middle
让你的自动布局尽可能的快

00:35:29.630 --> 00:35:32.900 align:middle
我们讨论了用户体验是你的最大目标

00:35:32.966 --> 00:35:36.937 align:middle
跨越无数不同设备实现

00:35:37.004 --> 00:35:39.273 align:middle
表视图的动画效果

00:35:39.840 --> 00:35:45.345 align:middle
我还分享了如何编写
面向未来版本

00:35:45.412 --> 00:35:49.049 align:middle
代码的技巧

00:35:50.017 --> 00:35:53.487 align:middle
现在我建议你以这些话为参考

00:35:53.754 --> 00:35:57.457 align:middle
你可以回头看看这些视频
在你构建你未来的应用时

00:35:57.524 --> 00:36:01.328 align:middle
这里有非常多的最优方案
你可以用它们

00:35:57.524 --> 00:36:01.328 align:middle
这里有非常多的最优方案
你可以用它们

00:36:01.395 --> 00:36:05.265 align:middle
作为进入相关文档的跳板

00:36:05.532 --> 00:36:08.202 align:middle
查找我提到的API的相关文档

00:36:08.468 --> 00:36:13.540 align:middle
你将能将这些最优方案
部署到你未来的应用中

00:36:13.807 --> 00:36:16.243 align:middle
谢谢

00:36:16.677 --> 00:36:18.812 align:middle
很高兴在WWDC与你们分享

00:36:18.879 --> 00:36:21.381 align:middle
希望今天下午你们能得到充分休息
