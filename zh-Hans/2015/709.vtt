WEBVTT

00:00:20.554 --> 00:00:21.855 align:middle
定制

00:00:26.593 --> 00:00:30.163 align:middle
大家好
欢迎参加709会议

00:00:30.931 --> 00:00:32.665 align:middle
我是维普尔·普拉卡什

00:00:32.866 --> 00:00:36.270 align:middle
还有我的同事戴夫·萨利姆
和詹森·道格拉斯

00:00:36.770 --> 00:00:41.842 align:middle
我们将和大家一起深入
看看iOS 9的新搜索API

00:00:42.409 --> 00:00:43.944 align:middle
正如你在Keynote中所见

00:00:44.745 --> 00:00:46.747 align:middle
应用的内容中的深链接

00:00:47.047 --> 00:00:50.751 align:middle
现在可以整合到
Spotlight 搜索结果之中

00:00:51.318 --> 00:00:52.753 align:middle
这着实让人兴奋

00:00:53.720 --> 00:00:56.390 align:middle
因为iOS用户
大多数时间都在app内

00:00:56.523 --> 00:00:58.091 align:middle
这里也是内容的展示场所

00:00:58.425 --> 00:01:01.361 align:middle
而且也是人们现在数字生活的居住地

00:00:58.425 --> 00:01:01.361 align:middle
而且也是人们现在数字生活的居住地

00:01:01.828 --> 00:01:06.433 align:middle
我们非常想通过搜索将
所有这些内容整合到一起

00:01:07.067 --> 00:01:13.073 align:middle
在你的app内创建广告式尺寸统一的
索引页面

00:01:13.340 --> 00:01:17.144 align:middle
从而在Spotlight显示出来
这不是我们要的做的事

00:01:17.644 --> 00:01:22.382 align:middle
这种指向网络的索引方法行得通
因为尺寸统一

00:01:22.583 --> 00:01:25.552 align:middle
但是对于app搜索而言
这种方法却不对

00:01:26.587 --> 00:01:33.093 align:middle
我们要做的是提供一种体验
开发者可以精确选择搜索的内容

00:01:33.560 --> 00:01:39.099 align:middle
结果呈现方式以及
用户点击结果后会跳转的位置

00:01:39.933 --> 00:01:42.569 align:middle
我认为通过搜索API已经做到这点了

00:01:42.769 --> 00:01:44.905 align:middle
方法简单且轻便

00:01:46.440 --> 00:01:49.309 align:middle
搜索API的目标是

00:01:49.510 --> 00:01:55.916 align:middle
让你的app内的内容
在搜索时候更为深入人心

00:01:56.750 --> 00:02:02.155 align:middle
而且搜索结果会同时出现在
Spotlight和Safari中

00:01:56.750 --> 00:02:02.155 align:middle
而且搜索结果会同时出现在
Spotlight和Safari中

00:02:04.157 --> 00:02:08.428 align:middle
在iOS8系统上
我们也通过类似的方法

00:02:08.495 --> 00:02:10.597 align:middle
提供Spotlight搜索建议

00:02:11.465 --> 00:02:14.601 align:middle
当用户在Safari地址栏
输入一条请求后

00:02:14.668 --> 00:02:15.736 align:middle
你会从网络上看到结果

00:02:15.802 --> 00:02:18.705 align:middle
比如Maps Wikipedia
和App Store

00:02:19.039 --> 00:02:23.377 align:middle
用户可以点击搜索结果
然后直接跳转到搜索内容

00:02:23.944 --> 00:02:29.449 align:middle
在iOS 9中
用户可以直接跳转到你的app内容

00:02:31.885 --> 00:02:38.158 align:middle
这也是我们提供的提高曝光率
和分销的另一种方法

00:02:38.792 --> 00:02:42.863 align:middle
App内部的公共深链接
现在可以在搜索结果中显示

00:02:43.096 --> 00:02:46.200 align:middle
这样用户就没有必要安装你的应用了

00:02:47.901 --> 00:02:49.102 align:middle
这真是超级棒啊

00:02:51.438 --> 00:02:55.809 align:middle
这样你的app就能
通过一种全新的曝光方式

00:02:56.176 --> 00:02:59.580 align:middle
让潜在的数百万iOS用户看到

00:03:06.854 --> 00:03:09.756 align:middle
让我们看看这是如何工作的
请看一下例子

00:03:11.325 --> 00:03:15.662 align:middle
我们邀请了
Airbnb人员看这些API

00:03:15.729 --> 00:03:18.599 align:middle
而且他们能够在几个小时内进行整合

00:03:19.199 --> 00:03:22.903 align:middle
他们所做的是
他们找到用户的保留信息

00:03:23.270 --> 00:03:25.806 align:middle
以及在平台产生的通讯

00:03:26.039 --> 00:03:28.041 align:middle
然后在搜索API之中加以索引

00:03:28.842 --> 00:03:32.880 align:middle
现在当我在Napa查找
我的保留信息的时候

00:03:32.946 --> 00:03:37.417 align:middle
我在Spotlight上输入
然后保留信息就是第一个搜索结果

00:03:38.252 --> 00:03:39.353 align:middle
这里还有日期

00:03:40.721 --> 00:03:41.588 align:middle
非常酷

00:03:43.290 --> 00:03:47.427 align:middle
这里有日期 客人数量 描述
而且当我点击后

00:03:48.161 --> 00:03:51.532 align:middle
我可以跳转到app内容
进行更丰富的体验

00:03:52.766 --> 00:03:56.270 align:middle
在这里你可以看到
另一个结果是第二条结果

00:03:56.336 --> 00:04:01.041 align:middle
这是保留信息是伺服器发出的信息

00:03:56.336 --> 00:04:01.041 align:middle
这是保留信息是伺服器发出的信息

00:04:01.375 --> 00:04:06.747 align:middle
如你所见
我可以阅读这条信息 这非常有用

00:04:06.947 --> 00:04:09.016 align:middle
而且右边还有一个调用字符

00:04:09.850 --> 00:04:11.785 align:middle
当他们索引的时候

00:04:12.019 --> 00:04:16.990 align:middle
数据会被编入到伺服器电话号码

00:04:17.457 --> 00:04:21.428 align:middle
然后Spotlight会检索到
进行调用

00:04:21.962 --> 00:04:23.130 align:middle
正如预期的一样

00:04:24.731 --> 00:04:25.599 align:middle
它会进行调用

00:04:27.201 --> 00:04:33.273 align:middle
这样通过完美功能整合
从而实现搜索API

00:04:33.340 --> 00:04:34.608 align:middle
让我看看另一个例子

00:04:36.176 --> 00:04:38.645 align:middle
这里是LinkedIn
一款专业的社交App

00:04:39.112 --> 00:04:41.248 align:middle
在这个例子中

00:04:41.648 --> 00:04:42.983 align:middle
我的第一级网络

00:04:43.250 --> 00:04:47.554 align:middle
我在LinkedIn上的所有通讯
都被添加到搜索索引中

00:04:47.888 --> 00:04:54.061 align:middle
同样的可按照内嵌式联系方式
和内嵌式信息获取到这些信息

00:04:58.265 --> 00:05:00.901 align:middle
现在搜索API
不仅仅局限于内容搜索了

00:04:58.265 --> 00:05:00.901 align:middle
现在搜索API
不仅仅局限于内容搜索了

00:05:01.468 --> 00:05:03.170 align:middle
一种非常有用的情况是

00:05:03.704 --> 00:05:08.842 align:middle
在App内容的搜索位置
设置导航点和导航功能

00:05:10.944 --> 00:05:13.514 align:middle
看一个例子
看看Health是如何做到的

00:05:14.281 --> 00:05:17.751 align:middle
它对所有的对话中的深链接进行索引

00:05:18.118 --> 00:05:20.320 align:middle
如果我想要看看我已经走了几步

00:05:20.387 --> 00:05:22.222 align:middle
我在Spotlight中输入步数

00:05:22.689 --> 00:05:25.692 align:middle
获得深链接 点击
然后直接跳转到步数画面

00:05:31.798 --> 00:05:32.733 align:middle
我认为这很酷

00:05:32.799 --> 00:05:39.006 align:middle
用户最常使用Spotlight的是
进行app查找和安装

00:05:39.439 --> 00:05:41.575 align:middle
在iOS 9系统中
我们相信在app内部

00:05:42.409 --> 00:05:47.848 align:middle
进行直接的深导航以后
将会非常受欢迎

00:05:49.950 --> 00:05:55.789 align:middle
在所有的情况下
直接从你的设备索引中搜索结果

00:05:55.856 --> 00:06:00.627 align:middle
这些深链接会放在设备索引中
而且不会跨设备索引

00:05:55.856 --> 00:06:00.627 align:middle
这些深链接会放在设备索引中
而且不会跨设备索引

00:06:01.161 --> 00:06:03.864 align:middle
那么如果用户
还没安装你的app呢？

00:06:05.966 --> 00:06:10.804 align:middle
我们在Apple云服务器上
保留了大量的深链接索引

00:06:11.471 --> 00:06:16.510 align:middle
我们可以从这些索引之中进行无缝查找

00:06:19.046 --> 00:06:22.282 align:middle
我们想出了一个
共享这些索引的绝佳方法

00:06:23.650 --> 00:06:28.989 align:middle
开发者可以标注公共内容为公共

00:06:29.523 --> 00:06:31.325 align:middle
而且一旦有足够的用户检索到

00:06:31.792 --> 00:06:34.394 align:middle
那么深链接会提交到云索引

00:06:35.028 --> 00:06:37.831 align:middle
这样你的app所有用户都可以检索到

00:06:38.332 --> 00:06:43.804 align:middle
而且如果深链接有相关的网页链接
那么iOS所有用户都可以访问

00:06:46.640 --> 00:06:47.474 align:middle
现在

00:06:48.809 --> 00:06:51.345 align:middle
对app进行检索和爬取

00:06:52.546 --> 00:06:56.016 align:middle
在某种意义上已经毫无意义
但是对网页而言则不是

00:06:56.083 --> 00:07:00.053 align:middle
如果你的应用将内容复制到网站上

00:06:56.083 --> 00:07:00.053 align:middle
如果你的应用将内容复制到网站上

00:07:00.821 --> 00:07:07.027 align:middle
我们可以打开网络
对网站进行索引 找到深链接

00:07:07.394 --> 00:07:11.465 align:middle
然后放到云索引中
这样就能无缝进行搜索

00:07:14.034 --> 00:07:19.373 align:middle
无缝设备搜索和云搜索的逻辑

00:07:19.439 --> 00:07:21.909 align:middle
对于app搜索而言非常重要

00:07:22.509 --> 00:07:25.245 align:middle
在app中有很多内容是私密的

00:07:25.913 --> 00:07:29.249 align:middle
而且有些是公共的内容
内容只能之二者中的一者

00:07:29.716 --> 00:07:34.655 align:middle
使用这种方法是创建一个无缝搜索接口

00:07:34.988 --> 00:07:38.792 align:middle
这样用户可以知道搜索结果是
来自设备索引还是云索引

00:07:39.259 --> 00:07:40.627 align:middle
请看看这个例子

00:07:42.596 --> 00:07:46.600 align:middle
我搜索一个音乐节
“northern lights”

00:07:46.667 --> 00:07:49.169 align:middle
我从EventBrite应用
云索引中找到一个结果

00:07:50.170 --> 00:07:53.006 align:middle
我没有必要安装该app
因为这个结果有一个网页链接

00:07:53.340 --> 00:07:54.274 align:middle
我点击链接

00:07:56.476 --> 00:07:59.780 align:middle
这样我可以在Safari中打开链接

00:07:59.880 --> 00:08:03.450 align:middle
你注意到了
作为EventBride用户

00:07:59.880 --> 00:08:03.450 align:middle
你注意到了
作为EventBride用户

00:08:04.251 --> 00:08:06.887 align:middle
这个巧妙的app标语
会鼓励我下载app

00:08:07.321 --> 00:08:09.857 align:middle
然后进行更丰富地内容体验

00:08:10.524 --> 00:08:11.658 align:middle
这正是我现在做的

00:08:12.626 --> 00:08:14.428 align:middle
想象一下
如果这是你的app

00:08:15.028 --> 00:08:21.301 align:middle
以这种交际性的方式
将你的内容呈现给iOS用户

00:08:21.368 --> 00:08:26.073 align:middle
而用户找的正是你的应用提供的内容
那不是很棒吗？

00:08:28.842 --> 00:08:31.478 align:middle
这里我有一个例子
我搜索裸关节扭伤

00:08:31.979 --> 00:08:35.249 align:middle
我不想要在我的设备上
安装医疗类的app

00:08:36.250 --> 00:08:40.254 align:middle
我通过app搜索
找到多个基于app的结果

00:08:40.787 --> 00:08:46.994 align:middle
而且是用户之前
已经查找过的感兴趣的

00:08:47.861 --> 00:08:48.829 align:middle
我可以点击

00:08:50.497 --> 00:08:51.365 align:middle
安装app

00:08:51.732 --> 00:08:54.935 align:middle
然后再app内继续查找

00:08:57.504 --> 00:08:59.740 align:middle
那么工作原理是什么呢？

00:09:01.175 --> 00:09:03.343 align:middle
App搜索有三个API

00:09:04.978 --> 00:09:06.446 align:middle
各自独立却又相关

00:09:06.847 --> 00:09:11.718 align:middle
这些API可适用于不同用户情况下的
进行App搜索

00:09:13.053 --> 00:09:14.755 align:middle
首先是
NSUserActivity

00:09:14.821 --> 00:09:19.126 align:middle
这是发布到iOS 8系统上
Handoff APi的扩展

00:09:20.327 --> 00:09:23.530 align:middle
当我们查看信息存取模式

00:09:23.864 --> 00:09:30.070 align:middle
然后搜索时
呈现给用户的是之前他们看到的

00:09:30.904 --> 00:09:32.206 align:middle
而且现在需要的
NSUserActivity

00:09:32.539 --> 00:09:36.310 align:middle
让搜索这种信息和检索更为简单

00:09:36.577 --> 00:09:41.782 align:middle
这相当于是浏览器
保留了你的浏览记录

00:09:42.149 --> 00:09:46.253 align:middle
然后用户活动保留了app历史格式
从而使之变为可被检索到

00:09:48.555 --> 00:09:50.791 align:middle
第二个API是
CoreSpotlight

00:09:50.858 --> 00:09:53.961 align:middle
这是一款非常好用的工具

00:09:54.761 --> 00:09:58.031 align:middle
用于对app的内容进行综合检索

00:09:58.765 --> 00:10:02.836 align:middle
所有iOS 9的内置式app
包括Mail Notes Calendar

00:09:58.765 --> 00:10:02.836 align:middle
所有iOS 9的内置式app
包括Mail Notes Calendar

00:10:03.136 --> 00:10:05.739 align:middle
都是使用CoreSpotlight

00:10:07.274 --> 00:10:11.979 align:middle
这让你可以对设备索引进行底层访问

00:10:12.379 --> 00:10:16.450 align:middle
相当于一款数据库API
你可以添加和移除项目

00:10:17.417 --> 00:10:20.153 align:middle
而且这也是用户在你的APP内部

00:10:20.387 --> 00:10:24.658 align:middle
进行私密内容检索的最好方法

00:10:25.759 --> 00:10:28.962 align:middle
第三个API是web markup

00:10:29.963 --> 00:10:33.133 align:middle
这指的是APP复制内容到一个网站上

00:10:33.800 --> 00:10:37.738 align:middle
你可以使用深链接注释信息
标记网站内容

00:10:37.804 --> 00:10:40.541 align:middle
我们会到网页上抓取内容

00:10:41.041 --> 00:10:42.142 align:middle
然后放到云索引

00:10:42.509 --> 00:10:47.181 align:middle
这样就能够通过
iOS 9搜索无缝呈现给用户

00:10:50.617 --> 00:10:53.020 align:middle
这里是大会剩下的安排表

00:10:54.054 --> 00:10:56.790 align:middle
我们会深入看看每一个API

00:10:57.925 --> 00:10:58.792 align:middle
说明其工作原理

00:10:59.693 --> 00:11:04.431 align:middle
然后我们会看看在App内采用
这些API的最好的方法

00:10:59.693 --> 00:11:04.431 align:middle
然后我们会看看在App内采用
这些API的最好的方法

00:11:07.701 --> 00:11:10.437 align:middle
我们接下来会谈谈
NSUserActivity和CoreSpotlight

00:11:10.504 --> 00:11:11.605 align:middle
我想邀请戴夫·萨利姆

00:11:21.682 --> 00:11:22.950 align:middle
大家好
我是戴夫·萨利姆

00:11:23.517 --> 00:11:25.352 align:middle
是App搜索的一名开发者

00:11:26.687 --> 00:11:29.122 align:middle
我们刚才了解了一些

00:11:29.690 --> 00:11:33.260 align:middle
关于如何让你的app变得可被搜索
和曝光的新特性

00:11:34.194 --> 00:11:38.131 align:middle
现在我们会谈谈这些API
以及如何善用这些功能

00:11:40.834 --> 00:11:43.570 align:middle
首先我们先看看
NSUserActivity

00:11:45.105 --> 00:11:45.939 align:middle
先来点背景资料

00:11:46.139 --> 00:11:50.677 align:middle
在iOS 8系统引入NSUserActivity
是为了支持Handoff功能

00:11:51.612 --> 00:11:53.213 align:middle
Handoff功能是非常棒的功能

00:11:53.313 --> 00:11:57.951 align:middle
可以让你远程启动
以及查看另一台设备上的应用

00:11:59.253 --> 00:12:01.722 align:middle
NSUserActivity
使用轻量化设计

00:11:59.253 --> 00:12:01.722 align:middle
NSUserActivity
使用轻量化设计

00:12:01.788 --> 00:12:04.591 align:middle
用于捕捉之后可以被恢复的应用状态

00:12:06.760 --> 00:12:08.428 align:middle
现在在iOS 9中

00:12:09.263 --> 00:12:12.699 align:middle
我们添加了
NSUserActivity新功能

00:12:12.999 --> 00:12:16.336 align:middle
这样能够从iOS搜索
和Safari中进行索引和搜索

00:12:18.038 --> 00:12:21.008 align:middle
你需要具备关联元数据
和活动的能力

00:12:21.542 --> 00:12:22.976 align:middle
这样才能描述活动

00:12:23.477 --> 00:12:27.681 align:middle
而且这些信息可以用于检索
和提供丰富的搜索结果

00:12:28.815 --> 00:12:30.617 align:middle
当用户查看你的搜索结果的时候

00:12:31.118 --> 00:12:34.388 align:middle
你的app会启动
然后将搜索结果传递给活动

00:12:35.322 --> 00:12:39.259 align:middle
你可以继续恢复app状态
让用户回到内容页面

00:12:40.661 --> 00:12:42.563 align:middle
让我们看看一个例子

00:12:42.829 --> 00:12:45.532 align:middle
看看NSUserActivity
是如何被添加到索引中的

00:12:47.000 --> 00:12:51.438 align:middle
这里我们有一个食谱app
当用户在app内浏览食谱的时候

00:12:51.672 --> 00:12:53.240 align:middle
我们创建一个
NSUserActivity

00:12:53.307 --> 00:12:54.308 align:middle
用于捕捉器状态

00:12:54.842 --> 00:12:57.778 align:middle
和提供所需的信息
然后返回到食谱中

00:12:59.313 --> 00:13:02.449 align:middle
然后我们使用来自食谱的资料

00:12:59.313 --> 00:13:02.449 align:middle
然后我们使用来自食谱的资料

00:13:02.850 --> 00:13:05.552 align:middle
比如标题 描述
甚至是缩略图描述该活动

00:13:07.054 --> 00:13:11.191 align:middle
然后我们通知系统
该活动表示的是用户的当前状态

00:13:11.859 --> 00:13:14.061 align:middle
然后该活动会被添加到设备内置索引中

00:13:16.029 --> 00:13:17.531 align:middle
这样当一名用户使用app的时候

00:13:18.098 --> 00:13:22.069 align:middle
我们使用相同的方式
创建活动 描述活动

00:13:22.169 --> 00:13:25.606 align:middle
然后通知系统
这些活动表示用户当前状态

00:13:26.039 --> 00:13:28.442 align:middle
这些活动会被添加到设备内置索引

00:13:31.678 --> 00:13:37.384 align:middle
让我们看看用于支持App搜索的
NSUserActivity的新旧属性

00:13:38.852 --> 00:13:43.056 align:middle
首先现在我们有使用
指派活动权限的属性

00:13:43.857 --> 00:13:47.160 align:middle
其中之一是关于Handoff的属性
默认情况下Handoff是激活的

00:13:47.427 --> 00:13:51.131 align:middle
如果你选择不启动Handoff
你可以在这里设置为False

00:13:51.932 --> 00:13:56.069 align:middle
还有一个用于搜索的属性
可以允许活动进行设备内置索引

00:13:57.171 --> 00:14:00.140 align:middle
还有一个用于公共索引属性
稍后我们会谈谈

00:13:57.171 --> 00:14:00.140 align:middle
还有一个用于公共索引属性
稍后我们会谈谈

00:14:02.242 --> 00:14:04.144 align:middle
接下来要如何描述你的活动呢？

00:14:04.578 --> 00:14:06.547 align:middle
首先是要给活动设定一个标题

00:14:07.447 --> 00:14:11.151 align:middle
这个标题可用于索引和显示搜索结果

00:14:12.219 --> 00:14:15.889 align:middle
你还可以提供活动描述关键字
这些关键字也可以被索引

00:14:16.523 --> 00:14:18.192 align:middle
为了更全面地描述你的活动

00:14:18.559 --> 00:14:21.228 align:middle
你可以使用在
CoreSpotlight中引入的新类别

00:14:21.595 --> 00:14:23.564 align:middle
称之为
CSSearchableItem.attributeSet

00:14:23.630 --> 00:14:26.533 align:middle
使用这个类别可以让你使用设置属性
快速进行活动描述

00:14:26.900 --> 00:14:30.437 align:middle
你可以在NSUserActivity中的
contentAttributes属性中进行设置

00:14:31.538 --> 00:14:35.509 align:middle
如果你想要设置
在特定日期之前不显示你的活动

00:14:35.943 --> 00:14:37.945 align:middle
你可以设置一个到期日

00:14:40.414 --> 00:14:47.054 align:middle
另外如果你的活动内容可以保存到网上
或者你支持Safari的通用链接

00:14:47.621 --> 00:14:49.189 align:middle
设置网页URL属性

00:14:49.556 --> 00:14:53.660 align:middle
然后系统会在Safari
或者app内启动你的活动

00:14:57.464 --> 00:14:59.499 align:middle
现在让我看看如何创建活动

00:15:02.202 --> 00:15:05.072 align:middle
这里我们可以举一个关于
NSUserActivity的例子

00:15:05.739 --> 00:15:07.441 align:middle
而且我们在这里会设置一个活动类型

00:15:08.342 --> 00:15:12.412 align:middle
这是你设置的唯一字符串
同样也是你告诉系统的字符串

00:15:12.779 --> 00:15:15.749 align:middle
让系统明白你的app可以处理什么活动

00:15:17.050 --> 00:15:19.086 align:middle
我们推荐你对这些字符串类型

00:15:19.386 --> 00:15:21.188 align:middle
设置反向DNS类注释
这样确保其唯一性

00:15:23.056 --> 00:15:24.758 align:middle
接下来我们的活动需要一个标题

00:15:25.359 --> 00:15:29.763 align:middle
再一次标题可用于索引
而且可作为搜索结果的显示标题

00:15:31.431 --> 00:15:35.402 align:middle
接下来我们要在useriInfo
属性上设置一个词典

00:15:35.469 --> 00:15:38.338 align:middle
其中应包括重新创建状态所需的信息

00:15:41.875 --> 00:15:44.711 align:middle
接下来我们要设置
eligibleForSearch为True

00:15:44.778 --> 00:15:46.713 align:middle
启动活动设备内置索引

00:15:49.016 --> 00:15:51.985 align:middle
该活动代表用户的当前状态

00:15:52.319 --> 00:15:55.122 align:middle
然后我们通过活动
becomeCurrent属性通知系统

00:15:55.455 --> 00:15:57.724 align:middle
然后该活动会被添加到设备内置索引中

00:15:59.426 --> 00:16:01.228 align:middle
在用户看来
这过程看起来是怎么样的呢？

00:15:59.426 --> 00:16:01.228 align:middle
在用户看来
这过程看起来是怎么样的呢？

00:16:01.461 --> 00:16:05.933 align:middle
现在用户可以返回到
你的app索引得到的搜索结果

00:16:08.502 --> 00:16:12.306 align:middle
在这里我们可以明白标题属性
是如何映射到搜索结果的标题的

00:16:15.042 --> 00:16:18.345 align:middle
而且如果你使用contentAttributes
输入更多的信息

00:16:18.612 --> 00:16:20.180 align:middle
我们就可以得到更丰富的结果

00:16:22.482 --> 00:16:24.918 align:middle
所以当用户点击其中一个搜索结果时
会发生什么呢？

00:16:26.520 --> 00:16:29.122 align:middle
会调用应用内的
一个UI应用指派方法

00:16:29.690 --> 00:16:31.191 align:middle
和Handoff调用的是同一个

00:16:31.592 --> 00:16:35.062 align:middle
这里我们看到的是
continueUserActivity restorationHandler

00:16:35.128 --> 00:16:37.464 align:middle
然后我们传递搜索结果活动

00:16:40.100 --> 00:16:46.206 align:middle
我们可以查看其活动类型
然后可以使用用户信息继续恢复状态

00:16:48.675 --> 00:16:52.112 align:middle
所以现在用户可以点击活动的结果

00:16:53.313 --> 00:16:56.817 align:middle
然后你可以将结果恢复到适当的状态

00:16:59.853 --> 00:17:01.955 align:middle
App搜索内的
NSUserActivity

00:16:59.853 --> 00:17:01.955 align:middle
App搜索内的
NSUserActivity

00:17:02.623 --> 00:17:06.960 align:middle
是让用户返回到
之前浏览内容的好工具

00:17:08.295 --> 00:17:09.695 align:middle
我们想要更进一步

00:17:10.631 --> 00:17:12.199 align:middle
所以在我们设计这项功能的时候

00:17:12.598 --> 00:17:14.734 align:middle
我们查看了App Store内
很多app

00:17:15.469 --> 00:17:20.773 align:middle
我们注意到很多app内容
其他用户也会看到

00:17:22.442 --> 00:17:23.310 align:middle
所以我们在想

00:17:24.178 --> 00:17:29.116 align:middle
如果我们可以让活动代表公共内容

00:17:29.850 --> 00:17:31.818 align:middle
然后让这些内容可让所有用户搜索到

00:17:32.186 --> 00:17:34.788 align:middle
而不仅仅是那些之前浏览过的用户
这样的话不是更棒吗？

00:17:37.457 --> 00:17:40.561 align:middle
这正是我们通过
NSUserActivity和公共索引做到的

00:17:42.229 --> 00:17:43.330 align:middle
那么工作原理是什么呢？

00:17:43.730 --> 00:17:46.834 align:middle
当用户在你的app内导航
到公共内容的时候

00:17:47.668 --> 00:17:50.470 align:middle
你会创建NSUserActivities
用于捕捉状态

00:17:51.805 --> 00:17:53.473 align:middle
然后你可以指派内容为公共内容

00:17:55.709 --> 00:17:59.112 align:middle
当用户查看这些活动的搜索结果的时候

00:18:00.948 --> 00:18:02.616 align:middle
该活动会和我们的云索引进行共享

00:18:03.750 --> 00:18:05.886 align:middle
然后让app的所有用户
都可以进行搜索

00:18:06.220 --> 00:18:08.288 align:middle
而不仅仅是那些之前
浏览过的用户才能搜索

00:18:09.489 --> 00:18:11.859 align:middle
如果你的活动保存到网站上

00:18:12.159 --> 00:18:14.061 align:middle
那么你可以设置
webpageURL属性

00:18:14.761 --> 00:18:19.132 align:middle
这样可以极大增加被
iOS的Safari搜索到的机会

00:18:21.401 --> 00:18:25.072 align:middle
所以让我们看看
要如何指派一项活动为公共活动

00:18:25.939 --> 00:18:28.375 align:middle
我们可以启动之前看到的那个活动

00:18:29.776 --> 00:18:31.378 align:middle
然后我们可以额外设置一项属性

00:18:32.079 --> 00:18:35.549 align:middle
这里我们设置
eligibleForPublicIndexing为True

00:18:35.616 --> 00:18:38.352 align:middle
然后我们指派该活动为公共

00:18:40.187 --> 00:18:42.656 align:middle
虽然我们已经设置该属性为True

00:18:43.824 --> 00:18:48.495 align:middle
但这不是说该活动的内容
会被立即分享到我们的云索索引中

00:18:51.565 --> 00:18:53.433 align:middle
对于被共享的一项活动

00:18:53.967 --> 00:18:58.705 align:middle
首先需要在搜索结果中
出现而且要和用户产生互动

00:19:02.009 --> 00:19:06.013 align:middle
我们可以使用零知识
证明方法跟踪这些互动

00:19:06.313 --> 00:19:08.649 align:middle
这个方法可以确保活动内容的私密性

00:19:09.249 --> 00:19:10.817 align:middle
直到满足互动阀值

00:19:13.320 --> 00:19:14.354 align:middle
所以更详细地说

00:19:15.155 --> 00:19:18.759 align:middle
当用户和被指派为公共的活动
搜索结果进行互动的时候

00:19:19.660 --> 00:19:23.463 align:middle
会发送活动的一个单项Hash
到我们的云索引中

00:19:25.666 --> 00:19:30.771 align:middle
当云索引多次调用同一hash之后

00:19:31.271 --> 00:19:34.308 align:middle
活动的内容才会
和我们的云索引进行共享

00:19:36.844 --> 00:19:39.246 align:middle
我们在设计该方式的时候
还考虑到其他的方面

00:19:39.613 --> 00:19:42.583 align:middle
首先是用户隐私

00:19:43.150 --> 00:19:48.322 align:middle
第二是防止其他用户的数据意外
和云索引产生共享

00:19:50.991 --> 00:19:55.896 align:middle
另外对于这里的大部分人而言
NSUserActivity eligibleForSearch

00:19:55.996 --> 00:19:59.833 align:middle
和eligibleForPublicIndexing
属性是默认为false的

00:20:00.067 --> 00:20:00.968 align:middle
对这里每个人来说

00:20:01.635 --> 00:20:04.471 align:middle
只有对活动中代表内容
和特性的属性指派为公共后

00:20:05.105 --> 00:20:08.876 align:middle
才能让app的其他用户看到

00:20:13.947 --> 00:20:17.851 align:middle
现在让我们来看看采用
NSUserActivity获得的额外好处

00:20:18.652 --> 00:20:20.020 align:middle
首先是Handoff功能

00:20:20.854 --> 00:20:23.457 align:middle
采用API你可以
为Handoff添加支持

00:20:23.524 --> 00:20:28.762 align:middle
如果你选择 你可以允许
用户在一台设备上开启一项活动

00:20:28.829 --> 00:20:30.364 align:middle
而在另外一台设备里继续活动

00:20:34.401 --> 00:20:37.070 align:middle
另外两点是关于Siri的新特性

00:20:39.540 --> 00:20:44.578 align:middle
正如主题中展示的向左滑主页
代表用户的Siri建议

00:20:45.812 --> 00:20:49.683 align:middle
除了建议联系人和建议应用
以及和附近地点

00:20:50.450 --> 00:20:52.853 align:middle
应用中的活动也可以被建议

00:20:53.554 --> 00:20:56.690 align:middle
这里我们看到一条
对即将到来的日历事件的建议

00:20:57.391 --> 00:21:00.127 align:middle
和一条对恢复播客的建议

00:20:57.391 --> 00:21:00.127 align:middle
和一条对恢复播客的建议

00:21:02.663 --> 00:21:05.098 align:middle
下一个是Siri智能提醒

00:21:05.999 --> 00:21:10.737 align:middle
现在用户可以让Siri
提醒他们应用里的具体内容

00:21:11.905 --> 00:21:15.676 align:middle
以及记录在提醒事项里各种活动的时间

00:21:16.443 --> 00:21:19.980 align:middle
这是一种很容易让用户回到
他们想要被提醒的内容的方式

00:21:21.748 --> 00:21:23.750 align:middle
应用搜索的内
NSUserActivity

00:21:25.219 --> 00:21:28.622 align:middle
让用户可以更加容易地返回到
他们之前所访问的内容

00:21:30.023 --> 00:21:33.160 align:middle
并且让应用里的公共内容更容易被找到

00:21:37.931 --> 00:21:41.969 align:middle
接下来让我们谈谈
下一个可搜索应用内容的API

00:21:42.436 --> 00:21:44.204 align:middle
那就是CoreSpotlight

00:21:47.608 --> 00:21:50.344 align:middle
CoreSpotlight
是iOS 9里的一个全新框架

00:21:52.012 --> 00:21:54.448 align:middle
它提供一个数据库式的API

00:21:54.748 --> 00:21:57.150 align:middle
你可以添加 更新 删除项目

00:21:58.519 --> 00:22:02.689 align:middle
你使用CoreSpotlight
在iOS中进行索引的项目

00:21:58.519 --> 00:22:02.689 align:middle
你使用CoreSpotlight
在iOS中进行索引的项目

00:22:03.790 --> 00:22:07.594 align:middle
而且可用于内置应用
包括Messages Mail Calendar Notes

00:22:08.161 --> 00:22:11.932 align:middle
你明白用CoreSpotlight
可以索引的内容

00:22:14.668 --> 00:22:15.769 align:middle
让我们来看看这个API

00:22:17.871 --> 00:22:20.174 align:middle
首先我们从
CSSearchableItem开始

00:22:21.041 --> 00:22:23.810 align:middle
这表示的是我们想要索引的个别项目

00:22:25.846 --> 00:22:29.616 align:middle
接下来我们关联一个
CSSearchableItemAttributeSet

00:22:30.184 --> 00:22:33.086 align:middle
这是一种通过设置属性
描述项目的简单方法

00:22:35.956 --> 00:22:39.660 align:middle
然后我们将CSSearchItem
传递给CSSearchableIndex

00:22:39.927 --> 00:22:42.462 align:middle
这样项目就被添加到设备内置的索引上

00:22:47.935 --> 00:22:49.469 align:middle
我们来看看如何创建一个项目

00:22:52.339 --> 00:22:56.043 align:middle
首先我们从创建
CSSearchableItemAttributeSet开始

00:22:56.810 --> 00:22:58.679 align:middle
这里我们有一个关于图像的

00:23:03.016 --> 00:23:06.220 align:middle
接下来我们在属性设置里设置一些属性

00:23:06.820 --> 00:23:07.821 align:middle
用于我们要索引的项目

00:23:08.021 --> 00:23:10.591 align:middle
这里我们设置一个标题和一个描述

00:23:11.959 --> 00:23:15.762 align:middle
这里我们将看到标题和描述是如何
映射到搜索结果的

00:23:19.566 --> 00:23:21.869 align:middle
接下来我们创建
CSSearchableItem

00:23:22.903 --> 00:23:24.605 align:middle
并且我们提供一个独唯一的标识符

00:23:24.771 --> 00:23:29.843 align:middle
应用可以将该标识符用于
参考我们想要索引的实际数据

00:23:31.712 --> 00:23:33.413 align:middle
我们可以提供一个域标识符

00:23:33.580 --> 00:23:36.216 align:middle
这是一种将项目分组到一起的方法

00:23:36.383 --> 00:23:38.652 align:middle
在这个例子中
我们要为索引一张照片

00:23:38.785 --> 00:23:44.124 align:middle
我们想要将相同标识符的所有照片
分到一起并用一个相册表示

00:23:45.292 --> 00:23:48.996 align:middle
并且我们提供一个属性设置
用于描述刚刚创建的项目

00:23:52.633 --> 00:23:55.202 align:middle
接下来我们在
CSSearchableIndex进行项目索引

00:23:55.269 --> 00:23:57.571 align:middle
称为indexSearchableItems

00:23:57.638 --> 00:24:00.207 align:middle
传递给索引的项目

00:23:57.638 --> 00:24:00.207 align:middle
传递给索引的项目

00:24:03.043 --> 00:24:04.444 align:middle
这对用户来说看起来像什么呢？

00:24:05.112 --> 00:24:07.181 align:middle
用户们现在进入iOS搜索

00:24:07.614 --> 00:24:09.850 align:middle
然后在应用里返回搜索结果

00:24:10.484 --> 00:24:12.886 align:middle
这些搜索结果已使用
CoreSpotlight索引

00:24:17.157 --> 00:24:22.596 align:middle
这就是属性设置上的属性
映射到搜索结果的方式

00:24:25.432 --> 00:24:28.936 align:middle
当用户点击搜索结果的时候
将发生什么呢

00:24:31.705 --> 00:24:34.241 align:middle
应用里的一个UI应用
指派方法将被调用

00:24:34.942 --> 00:24:36.510 align:middle
与Handoff调用的方法一致

00:24:40.113 --> 00:24:43.617 align:middle
这里我们再次看到
ContinuousUserActivity RestorationHandler

00:24:43.684 --> 00:24:47.454 align:middle
这次你知道CoreSpotlight项目
启动了你的应用

00:24:48.555 --> 00:24:51.959 align:middle
因为活动类型被设置为
CSSearchableItemAction

00:24:53.227 --> 00:24:57.698 align:middle
并且当我们初始化可搜索项目时

00:24:58.265 --> 00:25:00.968 align:middle
所用的唯一标识符在用户信息里的

00:24:58.265 --> 00:25:00.968 align:middle
所用的唯一标识符在用户信息里的

00:25:01.101 --> 00:25:04.905 align:middle
CSSearchableItem
ActivityIdentifier可以使用

00:25:07.474 --> 00:25:09.409 align:middle
因此用户可以点击搜索结果

00:25:10.344 --> 00:25:13.213 align:middle
你可以将正确的上下文返回给用户

00:25:17.150 --> 00:25:19.186 align:middle
现在我们来谈谈索引维护

00:25:20.254 --> 00:25:22.689 align:middle
索引支持更新项目

00:25:23.790 --> 00:25:24.625 align:middle
随着时间的推移

00:25:25.425 --> 00:25:32.266 align:middle
项目标题 描述可能改变
用户可能更新代表项目的某些领域

00:25:32.599 --> 00:25:37.137 align:middle
你可以通过调用
用于索引项目的方法进行更新

00:25:37.604 --> 00:25:40.274 align:middle
使用唯一的标识符创建一个

00:25:40.774 --> 00:25:44.411 align:middle
你想要更新的CSSearchableItem
关联到一个更新的

00:25:44.478 --> 00:25:46.980 align:middle
CSSearchableItemAttributeSet

00:25:47.047 --> 00:25:49.683 align:middle
并且为项目索引
调用CSSearchableItems

00:25:52.419 --> 00:25:55.155 align:middle
另外一种常用的维护例行程序
是删除项目

00:25:55.956 --> 00:26:00.127 align:middle
删除任何不再与上下文相关的项目
是一个好做法

00:25:55.956 --> 00:26:00.127 align:middle
删除任何不再与上下文相关的项目
是一个好做法

00:26:00.627 --> 00:26:02.896 align:middle
我们支持多种删除项目的方式

00:26:03.730 --> 00:26:05.365 align:middle
首先你可以通过标识符来删除

00:26:06.300 --> 00:26:08.502 align:middle
你可以传递标识符数列

00:26:09.236 --> 00:26:11.205 align:middle
从而删除带有标识符的可搜索项目

00:26:12.773 --> 00:26:14.341 align:middle
这些项目将从你的上下文中被删除

00:26:16.543 --> 00:26:18.412 align:middle
你可以通过域标识符来删除

00:26:18.712 --> 00:26:21.148 align:middle
你可以看见早前我们创建项目的时候

00:26:21.982 --> 00:26:24.985 align:middle
可以用域标识符将项目分组到一起

00:26:26.720 --> 00:26:29.022 align:middle
当调用
deleteSearchableItems的时候

00:26:29.122 --> 00:26:33.227 align:middle
你可以传递标识符将分组的项目删除

00:26:35.195 --> 00:26:36.029 align:middle
最后

00:26:36.096 --> 00:26:37.798 align:middle
你可以通过调用

00:26:38.532 --> 00:26:43.937 align:middle
deleteAllSearchableItems WithCompletion
处理器将所有的项目从上下文中删除

00:26:46.940 --> 00:26:51.845 align:middle
现在我们来看一个演示如何轻松地
将CoreSpotlight添加到应用

00:26:52.946 --> 00:26:55.983 align:middle
我们的演示应用是一个图片
查看器

00:26:56.383 --> 00:26:59.486 align:middle
我将向你们展示如何轻松地
通过标题索引项目

00:27:00.621 --> 00:27:04.057 align:middle
并且我们将看看
搜索和修复的用户体验

00:27:12.866 --> 00:27:16.336 align:middle
这里我们有Xcode
和IPhone模拟器

00:27:17.137 --> 00:27:18.472 align:middle
首先我们启动应用

00:27:19.773 --> 00:27:21.208 align:middle
以便对它是什么样子有一个概念

00:27:22.309 --> 00:27:24.444 align:middle
这里我们有一些照片

00:27:25.512 --> 00:27:27.147 align:middle
每张照片下方都有一个标题

00:27:28.282 --> 00:27:29.583 align:middle
这里有一些漂亮的日落

00:27:30.951 --> 00:27:32.619 align:middle
好的 让我们看看如何轻松地

00:27:33.053 --> 00:27:35.656 align:middle
用照片的标题为这些照片编索引

00:27:37.024 --> 00:27:38.192 align:middle
进入Spotlight

00:27:38.992 --> 00:27:40.794 align:middle
我们有一个方法为项目编索引

00:27:41.595 --> 00:27:44.932 align:middle
并且当数据模型初始化的时候

00:27:46.934 --> 00:27:50.771 align:middle
我们将在数据存储中列举所有的照片

00:27:51.238 --> 00:27:54.041 align:middle
并且使用CoreSpotlight
添加每张照片

00:27:55.475 --> 00:27:59.012 align:middle
我们将创建属性设置

00:28:00.113 --> 00:28:03.650 align:middle
然后开始描述照片

00:28:03.884 --> 00:28:09.389 align:middle
这里我们为照片创建一个
CSSearchableItemAttributeSet

00:28:10.390 --> 00:28:15.863 align:middle
然后我们把数据模型里的标题
设置到属性设置里的标题属性

00:28:18.131 --> 00:28:20.400 align:middle
同样也包括基于标题的描述

00:28:26.006 --> 00:28:27.875 align:middle
下一步我们将创建项目本身

00:28:28.675 --> 00:28:30.644 align:middle
这里我们传递一个唯一的标识符

00:28:31.345 --> 00:28:35.883 align:middle
它代表我们可以用于
参考数据存储中的图片

00:28:41.054 --> 00:28:45.526 align:middle
然后我们调用
indexSearchableItems

00:28:46.026 --> 00:28:49.162 align:middle
将项目传递到
CSSearchableIndex

00:28:50.731 --> 00:28:52.165 align:middle
现在让我们建立
并运行这个应用

00:28:53.066 --> 00:28:54.401 align:middle
现在我们回到应用

00:28:55.202 --> 00:28:59.473 align:middle
当我们初始化应用的时候
它调用索引项目

00:28:59.840 --> 00:29:05.913 align:middle
并且列举照片集里所有照片
并将每张照片添加到设备内置索引

00:28:59.840 --> 00:29:05.913 align:middle
并且列举照片集里所有照片
并将每张照片添加到设备内置索引

00:29:07.814 --> 00:29:10.350 align:middle
现在我们可以进入到iOS搜索

00:29:11.151 --> 00:29:14.154 align:middle
并且我记得我在那里看到
一些漂亮的日落

00:29:14.221 --> 00:29:18.992 align:middle
我们可以从应用的结果里

00:29:19.293 --> 00:29:21.995 align:middle
看到这些以日落为标题的日落照片

00:29:23.597 --> 00:29:24.865 align:middle
点击其中的一个结果

00:29:25.732 --> 00:29:29.503 align:middle
它允许我们将应用存储到
适合该项目的上下文中

00:29:37.778 --> 00:29:41.982 align:middle
这就是如何轻松地使用
CoreSpotlight来为项目编索引

00:29:42.950 --> 00:29:47.154 align:middle
CoreSpotlight里的
一些额外功能支持批处理

00:29:47.921 --> 00:29:51.124 align:middle
你可以选择为大量的项目编索引

00:29:51.458 --> 00:29:52.860 align:middle
并且在批处理中分别索引

00:29:53.360 --> 00:29:58.298 align:middle
索引支持保存批处理进程状态
并进行检索

00:29:58.365 --> 00:30:00.400 align:middle
这样你就可以继续上次的操作

00:29:58.365 --> 00:30:00.400 align:middle
这样你就可以继续上次的操作

00:30:01.568 --> 00:30:04.004 align:middle
它同样支持指派和拓展

00:30:04.371 --> 00:30:09.209 align:middle
这样索引就可以与前景 背景通讯
或者在尚未运行的状态下进行通讯

00:30:10.310 --> 00:30:12.246 align:middle
它支持数据保护类

00:30:12.646 --> 00:30:16.550 align:middle
这样你就可以为你的索引信息
选择合适的安全策略

00:30:17.851 --> 00:30:21.688 align:middle
CoreSpotlight可以
很轻松地采用数据库式的API

00:30:22.322 --> 00:30:26.527 align:middle
这样你可以用于从你的应用中
索引任何功能或上下文

00:30:28.829 --> 00:30:30.497 align:middle
现在我将现场交给詹森·道格拉斯

00:30:30.564 --> 00:30:32.599 align:middle
让他来谈谈第三种API
web markup

00:30:43.944 --> 00:30:44.778 align:middle
大家好

00:30:45.212 --> 00:30:46.380 align:middle
我叫詹森·道格拉斯

00:30:46.446 --> 00:30:47.614 align:middle
我来自Siri团队

00:30:47.848 --> 00:30:49.383 align:middle
我们将谈谈web markup

00:30:51.118 --> 00:30:55.455 align:middle
已经有两种不可思议超棒的的方法
使你的应用内容

00:30:55.522 --> 00:30:59.560 align:middle
在NSUserActivity和
CoreSpotlight可搜索到

00:30:59.626 --> 00:31:02.229 align:middle
而第三套APIs
就是web markup

00:30:59.626 --> 00:31:02.229 align:middle
而第三套APIs
就是web markup

00:31:02.596 --> 00:31:06.733 align:middle
用于应用内容的检索
对于网站而言同样适用

00:31:09.469 --> 00:31:12.439 align:middle
标记这种联系的关键在于
移动深链接

00:31:12.739 --> 00:31:15.843 align:middle
一个深链接像是一个URL
而不是一个关联内容的网页

00:31:16.176 --> 00:31:20.581 align:middle
即关联到应用内部的具体内容

00:31:24.184 --> 00:31:25.652 align:middle
早前你看过这个示意图

00:31:26.019 --> 00:31:32.526 align:middle
当时我们为从设备中获取的公共项目
设置设备内置索引和云索引

00:31:33.994 --> 00:31:35.896 align:middle
为了抓取网站内容

00:31:35.963 --> 00:31:38.465 align:middle
现在Apple有一个网页抓取器
叫做AppleBot

00:31:38.832 --> 00:31:42.336 align:middle
AppleBot会查找网页
然后多次抓取应用网页

00:31:43.103 --> 00:31:45.572 align:middle
对于许多这样的内容
你无需做什么

00:31:45.672 --> 00:31:48.075 align:middle
如果你的网站支持移动深链接

00:31:48.642 --> 00:31:51.845 align:middle
那么我们可以继续找到这些内容

00:31:51.979 --> 00:31:54.915 align:middle
并让它们可被iOS搜索
和Safari上搜索到

00:31:56.950 --> 00:31:59.453 align:middle
当这些内容从网站上撤出

00:31:59.686 --> 00:32:04.391 align:middle
就像你看到的 我们将直接在
搜索和Safari上显露出来

00:31:59.686 --> 00:32:04.391 align:middle
就像你看到的 我们将直接在
搜索和Safari上显露出来

00:32:05.893 --> 00:32:11.331 align:middle
当用户点击其中一个结果
它们直接深链接到你的应用中的内容

00:32:11.398 --> 00:32:13.066 align:middle
用户就可以看到
来自搜索结果的内容

00:32:15.135 --> 00:32:18.071 align:middle
你可以发现有一个连接到你应用的链接

00:32:18.405 --> 00:32:19.406 align:middle
这是免费的

00:32:19.673 --> 00:32:22.509 align:middle
你不用在应用内
特别做什么才能使用到这链接

00:32:23.477 --> 00:32:27.781 align:middle
用户只需点击左上角的链接
他们就会被带回到搜索

00:32:27.848 --> 00:32:29.950 align:middle
这使得它无缝往返

00:32:33.220 --> 00:32:38.392 align:middle
使用web markup只需四个
简单步骤就可让你的应用内容被搜索到

00:32:39.560 --> 00:32:40.394 align:middle
第一步

00:32:41.028 --> 00:32:45.232 align:middle
确保Apple可以发现你的网站
并索引你的网站

00:32:46.667 --> 00:32:51.271 align:middle
第二步
确保你的网站包含移动深链接标记

00:32:53.207 --> 00:32:56.944 align:middle
下一步
确保你的应用可以处理打开这些深链接

00:32:58.879 --> 00:33:01.515 align:middle
最后
虽是可选项目但我们强烈推荐

00:32:58.879 --> 00:33:01.515 align:middle
最后
虽是可选项目但我们强烈推荐

00:33:01.748 --> 00:33:03.750 align:middle
就是为结构数据添加标记

00:33:03.884 --> 00:33:06.053 align:middle
我们等下会谈谈这是什么

00:33:06.119 --> 00:33:09.556 align:middle
这样可以让你的搜索结果
看起来丰富从而吸引用户

00:33:11.859 --> 00:33:14.895 align:middle
因此第一步
让你的网站容易被Apple发现

00:33:15.529 --> 00:33:19.499 align:middle
我们将抓取网页同时找寻网站有深链接
确保我们可以找到应用网站

00:33:19.566 --> 00:33:25.472 align:middle
最简单的方法是当你提交网站
给iTunes Connect时

00:33:25.739 --> 00:33:27.708 align:middle
用它作为你的支持或营销URL

00:33:30.143 --> 00:33:33.080 align:middle
当你提交应用的时候
会有两个文本框

00:33:33.380 --> 00:33:34.214 align:middle
这很容易

00:33:34.414 --> 00:33:38.986 align:middle
我们使用它作为找寻
移动深链接的开始点

00:33:42.189 --> 00:33:46.693 align:middle
下一件事情就是确保
你的网站已经有深链接标记

00:33:47.494 --> 00:33:50.063 align:middle
最普遍的做法你之前可能已经看过

00:33:50.497 --> 00:33:52.232 align:middle
某种被叫做
Smart App Banners的东西

00:33:52.299 --> 00:33:53.867 align:middle
它们已经存在一段时间

00:33:53.934 --> 00:33:57.404 align:middle
这是一个简单的&lt;meta&gt;标签
用于指定应用

00:33:57.471 --> 00:34:00.007 align:middle
并且说明深链接URL是什么样

00:33:57.471 --> 00:34:00.007 align:middle
并且说明深链接URL是什么样

00:34:01.008 --> 00:34:04.311 align:middle
当用户访问Safari应用网站时
他们会看到一个横幅广告

00:34:04.711 --> 00:34:06.113 align:middle
如果用户还没有安装该应用

00:34:06.180 --> 00:34:08.581 align:middle
广告允许用户直接
进入应用商店进行安装

00:34:08.849 --> 00:34:12.252 align:middle
如果已经安装
你可以直接点击视图按钮

00:34:12.518 --> 00:34:14.955 align:middle
直接在你的应用里查看内容

00:34:15.822 --> 00:34:17.757 align:middle
如果你想了解更多关于
Smart App Banners

00:34:17.824 --> 00:34:21.862 align:middle
请查看Safari网站内容指南
里面有更多信息

00:34:24.764 --> 00:34:29.101 align:middle
在iOS 9里有一个新特性
叫做Universal Links

00:34:29.436 --> 00:34:31.938 align:middle
它是一种比Smart App Banners
更好的方法

00:34:33.139 --> 00:34:39.545 align:middle
自定义URL方案有一些优势
之前你可能已经用于深连接了

00:34:40.781 --> 00:34:42.416 align:middle
第一个优势是唯一性

00:34:43.050 --> 00:34:46.920 align:middle
许多应用支持自定义

00:34:46.987 --> 00:34:49.022 align:middle
他们可能对相同
自定义URL方案产生冲突

00:34:49.089 --> 00:34:51.425 align:middle
但使用通用链接的话就不会有冲突

00:34:51.692 --> 00:34:55.495 align:middle
因为我们使用应用网站
作为唯一的识别方法

00:34:56.563 --> 00:34:57.564 align:middle
这也很安全

00:34:58.298 --> 00:35:03.036 align:middle
因为可以说一个应用属于某个特定网站
而这是我们设置好的

00:34:58.298 --> 00:35:03.036 align:middle
因为可以说一个应用属于某个特定网站
而这是我们设置好的

00:35:03.670 --> 00:35:06.940 align:middle
将签字证书上载到网站

00:35:07.140 --> 00:35:08.775 align:middle
然后当用户安装应用时

00:35:09.142 --> 00:35:13.714 align:middle
我们可以检查证书
并确保这二者是关联在一起的

00:35:15.816 --> 00:35:16.817 align:middle
这样做也非常灵活

00:35:17.217 --> 00:35:22.523 align:middle
因此不论是在网站内还是
通过应用进行控制 用户可以控制行为

00:35:22.589 --> 00:35:26.527 align:middle
从而用户可以额轻而易举地
切换行为并选择他们最想要的默认值

00:35:27.060 --> 00:35:32.866 align:middle
这意味着可以在不使用JavaScript
的情况下询问用户要什么

00:35:33.166 --> 00:35:35.402 align:middle
另一个不使用
Javascript的优势是

00:35:35.469 --> 00:35:39.239 align:middle
这是深连接的一种比较复杂的类型
我们要花很多时间来理解

00:35:39.306 --> 00:35:44.311 align:middle
使用通用链接可以确保
我们能正确地解析深连接

00:35:45.445 --> 00:35:47.581 align:middle
最后一个优势是普遍性

00:35:48.282 --> 00:35:54.488 align:middle
一个通用链接是一个单独的URL
可用于网站内容以及应用内容

00:35:54.755 --> 00:35:59.426 align:middle
你不需要有两个不同的URL
一个用于网站 另一个用于深链接内容

00:36:03.530 --> 00:36:04.965 align:middle
如果使用通用链接

00:36:05.299 --> 00:36:08.969 align:middle
我们仍需通过web markup
来了解深链接

00:36:09.036 --> 00:36:11.405 align:middle
所以你想要使用
Smart App Banners

00:36:11.738 --> 00:36:13.707 align:middle
或者其他支持方案

00:36:14.007 --> 00:36:20.480 align:middle
这同样确保了如果用户没有安装应用
他们仍可以发现应用并安装

00:36:20.747 --> 00:36:24.651 align:middle
因为通用链接的一个特点
是一旦你安装应用通用链接就会被启用

00:36:25.552 --> 00:36:30.958 align:middle
想要了解更多的话
我强烈建议你查看无缝连接到你的应用

00:36:31.191 --> 00:36:32.059 align:middle
明天会开始的部分

00:36:35.963 --> 00:36:40.767 align:middle
下一步是说我们支持深链接

00:36:41.134 --> 00:36:42.870 align:middle
它的替代方案之一是Twitter卡

00:36:43.604 --> 00:36:48.242 align:middle
Twitter卡也使用meta标签
和Facebook应用链接

00:36:48.742 --> 00:36:51.144 align:middle
除了支持智能应用横幅外

00:36:51.545 --> 00:36:53.280 align:middle
我们同样支持这些

00:36:53.347 --> 00:36:57.918 align:middle
并且我们将添加到
其它以后可能出现的流行标准

00:37:02.155 --> 00:37:04.892 align:middle
最后确保你的应用可以打开深连接

00:37:06.260 --> 00:37:09.897 align:middle
过去你可能对此很熟悉
你可能已经在你的应用里这么做了

00:37:10.130 --> 00:37:12.399 align:middle
你已经确保实现了openURL

00:37:13.534 --> 00:37:16.069 align:middle
这里有一个简单的
使用openURL的例子

00:37:16.803 --> 00:37:17.638 align:middle
在我们的例子中

00:37:17.738 --> 00:37:19.473 align:middle
我们有一个URL

00:37:19.540 --> 00:37:22.676 align:middle
它可以查看配置文件
而且有一个配置文件ID

00:37:23.477 --> 00:37:26.880 align:middle
我们用NSURL组件进行URL解析

00:37:28.015 --> 00:37:32.653 align:middle
然后将配置文件ID
从查询参数传到视图控制器

00:37:33.053 --> 00:37:37.391 align:middle
这是一个例子说明
如何简单在你的应用指中支持深链接

00:37:41.495 --> 00:37:44.731 align:middle
现在我想谈谈之前我提及的
结构化数据

00:37:45.799 --> 00:37:49.369 align:middle
结构化数据是
基于移动深链接之外的一些东西

00:37:49.736 --> 00:37:53.340 align:middle
它让我们理解并解析搜索结果信息

00:37:53.941 --> 00:37:57.711 align:middle
解析自由格式的网页文本
是一件困难的任务

00:37:57.778 --> 00:37:59.580 align:middle
结构化数据能提供极大帮助

00:38:00.380 --> 00:38:03.951 align:middle
而且还可以确保搜索结果更为显眼

00:38:04.218 --> 00:38:10.891 align:middle
而不仅仅在结果中出现
图片 评级和其它关键事项的文本

00:38:11.291 --> 00:38:12.960 align:middle
这同样还可以帮助你提高排名

00:38:13.360 --> 00:38:16.263 align:middle
因为我们知道结果丰富可以吸引用户

00:38:16.563 --> 00:38:18.932 align:middle
比起其它结果
我们更能凸显该结果

00:38:21.602 --> 00:38:25.272 align:middle
所以添加这种结构化数据类型
标准之一是开放式图表

00:38:25.973 --> 00:38:31.011 align:middle
使用开放式图表可以从结果中指定
一张图片 一段音频甚至一段影像文件

00:38:31.311 --> 00:38:33.547 align:middle
你只需简单地将标记放置于网页之中

00:38:33.614 --> 00:38:37.184 align:middle
然后我们将把它
与在同个页面的深链接关联

00:38:40.988 --> 00:38:45.058 align:middle
另一种很普遍的结构化数据形式
是schema.org

00:38:45.826 --> 00:38:50.030 align:middle
我们会马上添加支持

00:38:50.831 --> 00:38:53.600 align:middle
一个普通的schema.org
是AggregateRatings

00:38:53.667 --> 00:38:55.569 align:middle
主要用于排名和评论

00:38:56.336 --> 00:38:57.771 align:middle
这个例子中我们会展示

00:38:58.005 --> 00:39:01.708 align:middle
使用schema.org微数据
添加AggregateRanging标记

00:38:58.005 --> 00:39:01.708 align:middle
使用schema.org微数据
添加AggregateRanging标记

00:39:02.242 --> 00:39:03.911 align:middle
而且我们还支持RDFA

00:39:05.112 --> 00:39:10.918 align:middle
因为JSON-LD基于网站的执行方式

00:39:11.385 --> 00:39:14.621 align:middle
我们在以后会提供支持
并进行解析和设置兼容

00:39:17.891 --> 00:39:20.761 align:middle
现在让我们来详细分析一个例子
看看实际上是如何运行的

00:39:21.094 --> 00:39:22.596 align:middle
这里有一个airbnb结果

00:39:23.130 --> 00:39:25.032 align:middle
第一件事也是最明显的事

00:39:25.299 --> 00:39:28.235 align:middle
我们使用标准HTML&lt;标题&gt;
标签进行解析

00:39:29.002 --> 00:39:30.270 align:middle
然后我们进一步来解析标题

00:39:31.171 --> 00:39:33.073 align:middle
这里显示的每晚价格

00:39:33.440 --> 00:39:34.942 align:middle
我们可以做到这一点

00:39:35.275 --> 00:39:41.748 align:middle
是因为我们已经把报价模式添加到网页
并且把它关联到酒店

00:39:42.850 --> 00:39:46.820 align:middle
我们可以解析价格以及计价货币
并直接显示在结果中

00:39:49.156 --> 00:39:53.994 align:middle
我们也可以通过schema.org的
AggregateRanging展示评论数量

00:39:54.795 --> 00:39:57.431 align:middle
并且用星进行排名

00:39:59.933 --> 00:40:04.071 align:middle
最后使用开放式图表的图像标签
展示图片

00:39:59.933 --> 00:40:04.071 align:middle
最后使用开放式图表的图像标签
展示图片

00:40:08.008 --> 00:40:11.612 align:middle
现在谈谈我们在schema.org
上支持的一些模式

00:40:12.412 --> 00:40:14.681 align:middle
第一个是AggregateRatings

00:40:15.816 --> 00:40:18.051 align:middle
另外是报价价格

00:40:18.585 --> 00:40:22.856 align:middle
或者如果你有一个用户消费型网站
你提供销售的商品

00:40:23.490 --> 00:40:26.693 align:middle
正如我们看到的酒店预定

00:40:28.028 --> 00:40:32.699 align:middle
价格范围 如果没有固定价格的话
还有许多与价格相关的因素

00:40:33.834 --> 00:40:38.572 align:middle
比如喜好 风景 评论等

00:40:40.073 --> 00:40:46.713 align:middle
同样interactionCount将会被
schema.org里的新模式取代

00:40:46.780 --> 00:40:49.183 align:middle
这个我们也同样支持

00:40:49.349 --> 00:40:52.853 align:middle
如果你正考虑从interactionCount
转移到Actions

00:40:54.421 --> 00:40:56.723 align:middle
对于像公司等这样的商业组织

00:40:57.291 --> 00:41:03.597 align:middle
你可以将地址与电话号码等
联系信息关联起来

00:40:57.291 --> 00:41:03.597 align:middle
你可以将地址与电话号码等
联系信息关联起来

00:41:03.664 --> 00:41:06.900 align:middle
稍后我们将看看这样做如何
使你的搜索结果更加丰富

00:41:08.602 --> 00:41:11.338 align:middle
Recipes
这是一目了然的SearchActions

00:41:13.040 --> 00:41:17.344 align:middle
如果你的网站有一个搜索登录页面

00:41:18.178 --> 00:41:19.980 align:middle
使用特别方式进行标记

00:41:20.047 --> 00:41:23.450 align:middle
这样我们也能处理搜索结果
只是方式稍微不同而已

00:41:23.517 --> 00:41:25.719 align:middle
我们知道
这是一个搜索登陆页面

00:41:27.321 --> 00:41:28.856 align:middle
最后是ImageObjects

00:41:28.922 --> 00:41:31.124 align:middle
这仅仅是针对图像的

00:41:34.228 --> 00:41:36.063 align:middle
现在我想谈谈Actions

00:41:36.730 --> 00:41:41.401 align:middle
Actions是一种运用结构化数据
使得你的结果可执行的方法

00:41:42.970 --> 00:41:46.340 align:middle
在支持启动的时候有一系列的操作

00:41:46.507 --> 00:41:51.311 align:middle
第一步是拨打电话号码获取地址

00:41:52.212 --> 00:41:54.014 align:middle
并播放音频或视频文件

00:41:58.519 --> 00:42:00.787 align:middle
这些例子的第一步是拨打电话号码

00:41:58.519 --> 00:42:00.787 align:middle
这些例子的第一步是拨打电话号码

00:42:01.321 --> 00:42:07.060 align:middle
正如我们之前在组织模式里看到的
你可以添加电话作为一项属性

00:42:07.661 --> 00:42:13.100 align:middle
当我们看到这个电话号码后可以解析它
并直接在结果中放置一个拨号按钮

00:42:13.500 --> 00:42:15.736 align:middle
现在你的结果已经可以执行拨号了

00:42:17.771 --> 00:42:20.607 align:middle
另一种是
使用AudioObject模式

00:42:21.475 --> 00:42:25.179 align:middle
使用AudioObject
你可以指定一个URL到音频文件

00:42:25.445 --> 00:42:31.585 align:middle
且用户可以在结果中播放文件
无须深链接到应用中再从里面进行播放

00:42:34.254 --> 00:42:35.889 align:middle
最后获取方向

00:42:36.590 --> 00:42:41.061 align:middle
提供一个邮政地址
使我们可以允许用户直接导航

00:42:41.295 --> 00:42:43.263 align:middle
而不需要深链接到应用

00:42:43.630 --> 00:42:48.635 align:middle
这样做的好处是使得结果
更有可能与用户互动

00:42:49.369 --> 00:42:54.107 align:middle
如果一个用户看到结果清单
并且可以直接执行想要的操作

00:42:54.308 --> 00:42:56.510 align:middle
他们更有可能会点击你的结果

00:43:01.215 --> 00:43:04.117 align:middle
所以我们在这里展示了
许多不同的模式 标记

00:43:04.551 --> 00:43:09.857 align:middle
我们将在今年晚些时候添加测试工具
用于测试网站上的标记

00:43:10.791 --> 00:43:13.627 align:middle
这些将在今年晚些时候
出现在开发者网站上

00:43:13.961 --> 00:43:19.166 align:middle
我们将有对深链接标记和
搜索结构化数据标记的测试工具

00:43:21.101 --> 00:43:23.704 align:middle
最后当你添加移动深链接

00:43:24.004 --> 00:43:29.309 align:middle
或结构化数据到网站

00:43:29.776 --> 00:43:34.448 align:middle
我只想要鼓励大家多用一些资源
进行资源检查这些资源提供许多信息

00:43:34.781 --> 00:43:37.718 align:middle
并且我们希望能够助你一臂之力

00:43:38.619 --> 00:43:39.453 align:middle
谢谢

00:43:47.594 --> 00:43:48.929 align:middle
现在我将把这里交还给维普尔

00:43:56.069 --> 00:44:02.709 align:middle
这是三个简单 强大 灵活的方式
让iOS 9里的应用可被搜索到

00:43:56.069 --> 00:44:02.709 align:middle
这是三个简单 强大 灵活的方式
让iOS 9里的应用可被搜索到

00:44:05.279 --> 00:44:06.246 align:middle
你应该使用哪一个

00:44:06.513 --> 00:44:12.986 align:middle
这取决于你想要创建的内容性质的功能
以及想要的搜索体验类型

00:44:13.687 --> 00:44:18.458 align:middle
CoreSpotlight
用于设备上的私人数据索引

00:44:19.259 --> 00:44:23.597 align:middle
你可以使用CoreSpotlight
来彻底索引应用里的数据

00:44:24.598 --> 00:44:28.202 align:middle
如果你正建立或者
说你有一个社交网络应用

00:44:28.268 --> 00:44:32.840 align:middle
你想要索引所有用户发出和接收的信息

00:44:33.207 --> 00:44:35.209 align:middle
CoreSpotlight
是最适合的工具

00:44:36.043 --> 00:44:39.346 align:middle
web markup适用于
映射应用内容到网页上的情况

00:44:39.746 --> 00:44:42.783 align:middle
如果你这么做了
你当然要使用这个标记

00:44:42.850 --> 00:44:49.056 align:middle
因为它为你的应用和内容
提供更多被用户发现的机会

00:44:49.223 --> 00:44:50.624 align:middle
而这些用户还没有安装你的应用

00:44:51.859 --> 00:44:55.429 align:middle
NSUserActivity
可用于应用内公共

00:44:55.762 --> 00:44:59.299 align:middle
或私人内容以及索引导航点

00:45:00.300 --> 00:45:03.303 align:middle
现在有另一种风格的
NSUserActivity

00:45:03.370 --> 00:45:04.771 align:middle
那就是戴夫谈及到的公共索引

00:45:05.439 --> 00:45:06.573 align:middle
这玩意儿真的非常强大

00:45:06.807 --> 00:45:11.278 align:middle
如果你的应用有百万甚至是上亿项目

00:45:11.979 --> 00:45:15.082 align:middle
你可以使用公共索引
从根本上移动这些项目

00:45:15.282 --> 00:45:17.184 align:middle
并在苹果云索引里索引

00:45:20.621 --> 00:45:22.956 align:middle
这些API各自千秋

00:45:24.324 --> 00:45:26.159 align:middle
但是又能配合使用

00:45:28.195 --> 00:45:32.499 align:middle
在相同的应用 相同的内容里
你可以采用多个API

00:45:33.867 --> 00:45:35.035 align:middle
唯一要记住的事情是

00:45:36.436 --> 00:45:42.776 align:middle
在多个地方被索引的项目
你需要赋予其相同的ID

00:45:43.410 --> 00:45:44.811 align:middle
从而关联这些项目

00:45:45.312 --> 00:45:47.181 align:middle
如果你使用所有这三个API

00:45:49.483 --> 00:45:51.418 align:middle
最常用的ID是URL

00:45:52.953 --> 00:45:56.823 align:middle
你可以设置CSSearchableItems
UniqueIdentifier到URL

00:45:56.890 --> 00:45:59.359 align:middle
然后NSUserActivity
关联到该唯一标识符

00:45:59.426 --> 00:46:01.228 align:middle
然后网页URL关联到URL

00:45:59.426 --> 00:46:01.228 align:middle
然后网页URL关联到URL

00:46:01.962 --> 00:46:05.465 align:middle
如果你同时使用
NSUserActivity和CoreSpotlight

00:46:05.532 --> 00:46:09.670 align:middle
这是一种很普遍的组合模式
你只是需要确保它们有相同的ID

00:46:11.438 --> 00:46:16.577 align:middle
这有助于搜寻复制结果
也有助于项目排名

00:46:18.212 --> 00:46:19.513 align:middle
让我们来谈谈排名

00:46:22.182 --> 00:46:25.886 align:middle
搜索的真正魅力在于
基于用户输入的一些信息

00:46:26.520 --> 00:46:29.189 align:middle
提供最相关的结果

00:46:29.623 --> 00:46:31.825 align:middle
到这里我们已经做了许多

00:46:32.993 --> 00:46:38.232 align:middle
相关性和排名是一种复杂的功能
指的是配对查询和项目

00:46:38.532 --> 00:46:43.136 align:middle
这里说的绝大多数
对于开发者和用户是完全透明的

00:46:45.105 --> 00:46:45.939 align:middle
然而

00:46:47.241 --> 00:46:52.880 align:middle
这里的一个重要的排名因素是
与内容和结果的互动

00:46:52.946 --> 00:46:58.485 align:middle
你可以做的是帮助确保搜索
抓取所有这些互动

00:47:00.654 --> 00:47:02.155 align:middle
我们有三种互动类型

00:47:02.823 --> 00:47:05.425 align:middle
一是URL广泛度

00:47:07.194 --> 00:47:11.131 align:middle
这是通过web markup索引
的可应用内容

00:47:12.399 --> 00:47:16.803 align:middle
它是基于你添加到模式当中的质量指标

00:47:16.870 --> 00:47:23.410 align:middle
比如排名 喜好 评论以及网页链接
图表中URL的位置

00:47:24.344 --> 00:47:30.250 align:middle
URL基于广泛度提高排名
并且这是自动发生的

00:47:31.952 --> 00:47:33.253 align:middle
第二种互动

00:47:34.321 --> 00:47:38.158 align:middle
是应用内内容被查看的频率

00:47:39.693 --> 00:47:43.330 align:middle
抓取该频率的唯一方法
是通过NSUserActivity

00:47:43.397 --> 00:47:46.867 align:middle
这就是为什么我们一直鼓励你
采用NSUserActivity

00:47:47.768 --> 00:47:49.970 align:middle
第三种也是最重要的

00:47:50.037 --> 00:47:51.772 align:middle
互动形式是搜索结果参与度

00:47:52.940 --> 00:47:54.842 align:middle
当搜索结果展示给用户的时候

00:47:55.375 --> 00:47:56.610 align:middle
不管他们是否点击结果

00:47:57.377 --> 00:48:00.647 align:middle
或者他们是否对结果中的描述感到满意

00:47:57.377 --> 00:48:00.647 align:middle
或者他们是否对结果中的描述感到满意

00:48:00.714 --> 00:48:04.484 align:middle
我们称为无声参与并通过解析环节抓取

00:48:08.589 --> 00:48:11.258 align:middle
从而获得优化关联性的快速清单

00:48:11.325 --> 00:48:12.159 align:middle
首先

00:48:12.492 --> 00:48:15.395 align:middle
继续你现在在做的事情
开发出优秀的应用和内容

00:48:15.462 --> 00:48:20.434 align:middle
搜索系统本来就是设计
用于发现最好内容的

00:48:21.401 --> 00:48:24.171 align:middle
你可以帮助我们确保所有的互动

00:48:24.238 --> 00:48:26.507 align:middle
都可以通过
NSUserActivity抓取到

00:48:26.940 --> 00:48:29.877 align:middle
在可执行的地方使用公共索引
NSUserActivity

00:48:30.477 --> 00:48:35.549 align:middle
因为根据用户数据
我们现在可以抓取内容的参与度

00:48:36.583 --> 00:48:41.788 align:middle
采用模式标记的方法
标记处互动计数和质量指示

00:48:42.222 --> 00:48:45.826 align:middle
最后遵守用户界面指南
我稍后将谈到它

00:48:48.962 --> 00:48:55.302 align:middle
突显优秀内容另一方面
是去除不相关的内容

00:48:55.836 --> 00:48:57.538 align:middle
我们在这方面也已经做了许多工作

00:49:00.474 --> 00:49:03.644 align:middle
如果恶意或不好的应用滥发索引邮件

00:49:04.344 --> 00:49:09.216 align:middle
我们将对结果进行降级
或完全压制这些搜索结果

00:49:09.583 --> 00:49:15.222 align:middle
最重要的方法
是参与度显示比

00:49:15.289 --> 00:49:20.194 align:middle
即搜索中展示的结果数量
和参与的次数的比值

00:49:20.761 --> 00:49:22.896 align:middle
低参与度将会被压制

00:49:23.230 --> 00:49:28.068 align:middle
而高参与度将有助于
提升结果在搜索中的排名

00:49:30.103 --> 00:49:33.307 align:middle
获取高参与度的最好方式是

00:49:33.941 --> 00:49:36.610 align:middle
遵守用户指南中的一些建议

00:49:38.779 --> 00:49:40.714 align:middle
你在iOS 9中
可以注意到的一件事情是

00:49:40.781 --> 00:49:45.786 align:middle
即使是来自内置应用的搜索结果
内容也很详实且丰富

00:49:45.853 --> 00:49:50.257 align:middle
这是因为我们发现更丰富的结果
意味着更高的参与度

00:49:52.092 --> 00:49:55.329 align:middle
这里有几件事情提供一个缩略图

00:49:55.462 --> 00:50:00.267 align:middle
提供一个精心构建的易被阅读的描述
以及排名和操作

00:49:55.462 --> 00:50:00.267 align:middle
提供一个精心构建的易被阅读的描述
以及排名和操作

00:50:01.602 --> 00:50:04.037 align:middle
缩略图里的图像效果非常强大

00:50:04.271 --> 00:50:08.175 align:middle
当用户他们点击结果后
他们会感受到所看到的

00:50:08.509 --> 00:50:10.477 align:middle
提供一个好的缩略图

00:50:11.044 --> 00:50:13.380 align:middle
提供用户找寻的关键信息

00:50:14.615 --> 00:50:19.086 align:middle
例如如果用户正找寻一个订舱号
一个在描述中提及的参考号

00:50:19.319 --> 00:50:22.389 align:middle
这样搜索任务可以在搜索中完成

00:50:25.492 --> 00:50:29.229 align:middle
另一个强大的功能是支持关键字

00:50:29.730 --> 00:50:32.799 align:middle
在所有的API里
你可以提供一串关键字

00:50:33.100 --> 00:50:35.602 align:middle
然后进行搜索

00:50:35.836 --> 00:50:39.373 align:middle
种类关键字是非常非常实用的

00:50:40.574 --> 00:50:42.543 align:middle
当用户找寻一种具体的“票”时

00:50:42.709 --> 00:50:46.280 align:middle
它们可能键入票的类型
而不是票的名称

00:50:46.580 --> 00:50:49.383 align:middle
当他们找寻蛋白质的时候
他们可能键入食谱

00:50:49.583 --> 00:50:54.354 align:middle
这让用户感受到一个神奇的智能体验

00:50:55.822 --> 00:51:02.729 align:middle
其它实用的关键字类型
是同义词和缩写词

00:50:55.822 --> 00:51:02.729 align:middle
其它实用的关键字类型
是同义词和缩写词

00:51:02.796 --> 00:51:05.232 align:middle
用户想关键字越少越好

00:51:05.532 --> 00:51:07.467 align:middle
所以他们可能输入sf giants

00:51:07.835 --> 00:51:08.902 align:middle
而非
San Francisco Giants

00:51:08.969 --> 00:51:11.705 align:middle
你可以通过关键字提供相关回调

00:51:16.543 --> 00:51:17.578 align:middle
同样重要的是

00:51:18.512 --> 00:51:23.050 align:middle
启动行为
这指的是用户点击结果所发生的事

00:51:23.350 --> 00:51:25.586 align:middle
你想把用户直接带到搜索内容里面

00:51:25.719 --> 00:51:29.723 align:middle
而且没有插入式广告 没有弹出广告

00:51:30.023 --> 00:51:34.194 align:middle
没有屏幕广告 而且加载页面很快

00:51:35.095 --> 00:51:41.435 align:middle
测量和估计从点击到内容展示的
时间是很重要的

00:51:41.568 --> 00:51:43.237 align:middle
并将该使用作为排名的一个因素

00:51:45.873 --> 00:51:47.541 align:middle
这里有两个例子

00:51:47.608 --> 00:51:49.476 align:middle
一个是对的
一个是错的

00:51:50.244 --> 00:51:52.179 align:middle
让我为你展示如何做

00:52:03.891 --> 00:52:05.459 align:middle
我确定没有人的应用会这么做

00:52:10.364 --> 00:52:15.502 align:middle
用户会很沮丧
而且你想要找到完全避免的方法

00:52:19.540 --> 00:52:20.974 align:middle
我们来谈谈接下来怎么做

00:52:22.543 --> 00:52:26.914 align:middle
当然了你可以对
你的应用内容进行全面索引

00:52:27.247 --> 00:52:30.918 align:middle
这是我们发现的在搜索上下文方面
非常实用的一些事情

00:52:31.084 --> 00:52:35.355 align:middle
你可以通过NSUserActivity
抓取任何用户过去查看的内容

00:52:35.656 --> 00:52:40.561 align:middle
或用户创建的内容 或评级过的内容
或在应用内创建的清单

00:52:41.061 --> 00:52:44.198 align:middle
人们想要返回到任何他们过去做的事情

00:52:45.999 --> 00:52:49.436 align:middle
导航点和功能是非常非常实用的工具

00:52:51.338 --> 00:52:55.676 align:middle
用户可能想要查找

00:52:55.976 --> 00:52:58.378 align:middle
应用里的新信息 新内容

00:52:58.745 --> 00:53:01.048 align:middle
你可能想要在搜索中查找这些

00:52:58.745 --> 00:53:01.048 align:middle
你可能想要在搜索中查找这些

00:53:02.449 --> 00:53:03.450 align:middle
你可以进行创新式的

00:53:05.285 --> 00:53:07.054 align:middle
或者主动地进行项目索引

00:53:07.321 --> 00:53:09.423 align:middle
而这些正是用户想要查看的

00:53:09.523 --> 00:53:15.462 align:middle
假设我买了一张音乐节的票
但我可能对区域内另一场音乐节感兴趣

00:53:15.696 --> 00:53:21.435 align:middle
你可以使用你的应用解析
得到有趣的内容并将其放入索引

00:53:21.969 --> 00:53:24.605 align:middle
API非常灵活

00:53:25.472 --> 00:53:29.409 align:middle
而且允许你创建非常新奇的搜索体验

00:53:29.476 --> 00:53:31.845 align:middle
这方面有无穷的可能性

00:53:36.016 --> 00:53:39.853 align:middle
总结一下
让我们看看我们在这个部分谈及的内容

00:53:40.254 --> 00:53:43.924 align:middle
我们介绍了用于索引深链接

00:53:44.157 --> 00:53:48.662 align:middle
和应用搜索的快速设备内置和云架构

00:53:49.162 --> 00:53:54.168 align:middle
我们向你展示三个API
以及你可以采用的深链接方法

00:53:56.470 --> 00:53:59.540 align:middle
我们向你展示了好的内容
丰富的搜索结果

00:53:59.740 --> 00:54:02.142 align:middle
以及内容到结果的快速互动方式

00:53:59.740 --> 00:54:02.142 align:middle
以及内容到结果的快速互动方式

00:54:02.809 --> 00:54:04.978 align:middle
是如何改善搜索体验的

00:54:06.446 --> 00:54:11.051 align:middle
API可以抓取你的内容

00:54:11.218 --> 00:54:14.621 align:middle
并展示给世界各地的iOS用户

00:54:19.226 --> 00:54:20.594 align:middle
我们还有更多的信息

00:54:21.395 --> 00:54:26.233 align:middle
如果你想要了解详细信息
你可以前往搜索文档首页

00:54:26.500 --> 00:54:29.303 align:middle
我们的论坛上有更多关于互动的内容

00:54:32.272 --> 00:54:37.711 align:middle
我建议你前往詹森介绍的
无缝连接环节

00:54:43.951 --> 00:54:46.019 align:middle
我们有两个实验

00:54:46.186 --> 00:54:51.491 align:middle
一个将在我完成讲说的时候马上开始
大家可以加入我们

00:54:51.758 --> 00:54:53.560 align:middle
另一个是在星期五举行

00:54:54.795 --> 00:54:58.532 align:middle
我们希望在星期五的时候看到

00:54:58.799 --> 00:55:02.536 align:middle
大家在WWCD整合搜索API的成果

00:54:58.799 --> 00:55:02.536 align:middle
大家在WWCD整合搜索API的成果

00:55:04.071 --> 00:55:05.906 align:middle
这就是应用搜索的全部内容
