WEBVTT

00:00:19.353 --> 00:00:24.224 align:middle
国际用户界面新UIKit支持

00:00:30.197 --> 00:00:31.431 align:middle
大家
下午好！

00:00:31.498 --> 00:00:33.233 align:middle
欢迎参加

00:00:33.300 --> 00:00:35.502 align:middle
“国际用户界面新UIKit支持”
这个会议

00:00:35.569 --> 00:00:38.539 align:middle
我叫萨拉·拉迪 我是一名
国际利用软件工程师

00:00:38.605 --> 00:00:41.208 align:middle
和很多其他人一样
我也十分想以我的母语

00:00:41.275 --> 00:00:43.243 align:middle
来使用你们开发的
令人惊艳的app

00:00:43.310 --> 00:00:46.980 align:middle
但是我在App Store中
就是找不到那些很棒的

00:00:47.047 --> 00:00:48.549 align:middle
app的本地化版本

00:00:49.349 --> 00:00:53.453 align:middle
我的母语是阿拉伯语

00:00:53.520 --> 00:00:55.355 align:middle
在我从小长大的国家里

00:00:55.422 --> 00:00:57.157 align:middle
那里 我们的书写习惯
不是从右到左

00:00:57.891 --> 00:01:01.428 align:middle
智能手机变得流行之前
我们并不用考虑

00:00:57.891 --> 00:01:01.428 align:middle
智能手机变得流行之前
我们并不用考虑

00:01:01.495 --> 00:01:03.497 align:middle
从右往左的布局

00:01:03.931 --> 00:01:07.634 align:middle
因此 只要对
文本渲染

00:01:07.935 --> 00:01:09.369 align:middle
和字体提供支持就足够了

00:01:10.204 --> 00:01:13.607 align:middle
但是在今天
有了这些电子设备

00:01:14.041 --> 00:01:16.009 align:middle
人们开始使用
越来越多的电子书

00:01:16.376 --> 00:01:19.112 align:middle
他们和自己的设备
进行了越来越多的交互

00:01:19.847 --> 00:01:23.283 align:middle
因此在你们的app中仅仅
对文本提供支持已经不够了

00:01:23.450 --> 00:01:26.720 align:middle
对这些本地化提供支持时
考虑你的app的布局、流

00:01:27.087 --> 00:01:30.691 align:middle
就变得
越来越重要了

00:01:31.859 --> 00:01:35.495 align:middle
就像我一样
有一百万的用户都想

00:01:36.430 --> 00:01:38.832 align:middle
以他们的母语来使用
自己的app

00:01:39.700 --> 00:01:43.303 align:middle
这是一个巨大的机遇
你可以在世界的这些区域

00:01:43.370 --> 00:01:44.738 align:middle
拓展你的市场

00:01:46.607 --> 00:01:49.610 align:middle
这里有一个实例
这是Apple在迪拜的一个广告

00:01:49.676 --> 00:01:51.879 align:middle
位于世界上最大的
建筑物之一

00:01:52.412 --> 00:01:54.081 align:middle
由此你就可以了解

00:01:54.147 --> 00:01:56.250 align:middle
Apple在中东的
存在

00:01:58.385 --> 00:02:00.587 align:middle
那么我们今天
要谈些什么呢？

00:01:58.385 --> 00:02:00.587 align:middle
那么我们今天
要谈些什么呢？

00:02:01.054 --> 00:02:03.056 align:middle
我们主要要谈谈...

00:02:04.458 --> 00:02:07.294 align:middle
不好意思

00:02:07.361 --> 00:02:09.263 align:middle
我们主要要谈谈

00:02:09.329 --> 00:02:11.932 align:middle
与从右到左用户界面
相关的挑战

00:02:12.933 --> 00:02:15.602 align:middle
然后我们会介绍下
新UIKit支持

00:02:16.103 --> 00:02:18.172 align:middle
我们为从右到左的语言
添加了UIKit支持

00:02:18.238 --> 00:02:21.008 align:middle
这样 我们就可以
让你就可以毫不费力地

00:02:21.074 --> 00:02:24.278 align:middle
支持
从右到左

00:02:24.811 --> 00:02:27.181 align:middle
然后我们会谈谈
你的定制布局

00:02:27.247 --> 00:02:29.583 align:middle
谈谈你如何可以通过
自动布局、在你的定制布局中

00:02:29.650 --> 00:02:32.819 align:middle
添加从右到左支持
之后我们会介绍下我们刚刚

00:02:32.886 --> 00:02:37.925 align:middle
加到iOS 9上的新API
然后再谈一些

00:02:37.991 --> 00:02:40.727 align:middle
异常情况
希望会议结束时

00:02:40.794 --> 00:02:44.831 align:middle
我可以看到更多的app在
App Store中本地化为

00:02:44.898 --> 00:02:47.067 align:middle
阿拉伯语和希伯来语
不好意思

00:02:49.570 --> 00:02:51.805 align:middle
让我们开始吧
先来看一个概述

00:02:52.539 --> 00:02:55.542 align:middle
当你用从左到右的语言
设计你的app时

00:02:56.043 --> 00:02:59.112 align:middle
比如说英语
你总是先把

00:02:59.646 --> 00:03:02.783 align:middle
最重要的
元素

00:02:59.646 --> 00:03:02.783 align:middle
最重要的
元素

00:03:02.850 --> 00:03:04.351 align:middle
放到屏幕的左侧

00:03:05.118 --> 00:03:07.054 align:middle
之后
如果你还有其他元素

00:03:07.187 --> 00:03:09.189 align:middle
它们就会自然地
从左边流到右边

00:03:09.489 --> 00:03:10.991 align:middle
我们这样做的原因

00:03:11.058 --> 00:03:14.194 align:middle
是因为布局本身开始跟随
脚本的

00:03:14.261 --> 00:03:16.163 align:middle
读写
方向

00:03:16.630 --> 00:03:20.000 align:middle
因此如果你是从右到左
设计你的app、反转脚本

00:03:20.067 --> 00:03:23.704 align:middle
这就完全说得通了
因为脚本的读写顺序

00:03:23.770 --> 00:03:25.372 align:middle
就是从右到左

00:03:27.875 --> 00:03:32.279 align:middle
此外 UI镜像概念
也不仅仅适用于静态UI

00:03:32.346 --> 00:03:34.515 align:middle
它同样适用于动态UI

00:03:34.715 --> 00:03:36.083 align:middle
比如 你在你的app中

00:03:36.149 --> 00:03:39.186 align:middle
手势导航、
导航动画

00:03:39.486 --> 00:03:42.122 align:middle
比如这里
后退按钮总是

00:03:42.189 --> 00:03:43.724 align:middle
位于屏幕的左侧

00:03:44.091 --> 00:03:47.828 align:middle
因此 在从右到左的环境中写作时
不仅后退按钮应该

00:03:47.895 --> 00:03:50.264 align:middle
位于右侧
相应的手势和动画

00:03:50.330 --> 00:03:52.199 align:middle
同样也应该
位于右侧

00:03:55.135 --> 00:03:56.937 align:middle
那么UIKit有什么新特性呢？

00:03:57.771 --> 00:04:02.176 align:middle
在iOS 9
UIKit上 发送方控制器完全支持

00:03:57.771 --> 00:04:02.176 align:middle
在iOS 9
UIKit上 发送方控制器完全支持

00:04:02.242 --> 00:04:03.410 align:middle
用户界面镜像

00:04:03.577 --> 00:04:05.412 align:middle
这就意味着
但你的app在从右到左的

00:04:05.546 --> 00:04:09.082 align:middle
环境中运行时
它们会自动替你翻转过来

00:04:09.316 --> 00:04:13.153 align:middle
整个系统和我们所有的
原生app都完全支持

00:04:13.220 --> 00:04:16.589 align:middle
从右到左的UI 因此
不用担心你的app会不一致

00:04:18.125 --> 00:04:21.428 align:middle
我们来看看原生app中的
一些标准控件

00:04:22.162 --> 00:04:24.264 align:middle
我们就从UI表格视图开始吧

00:04:25.465 --> 00:04:28.268 align:middle
这个例子取自
“设置”app

00:04:28.335 --> 00:04:31.171 align:middle
我们使用了一个
库存UI表格视图

00:04:31.371 --> 00:04:34.708 align:middle
你可以在这里看到
我们的设备运行语言是英语

00:04:34.775 --> 00:04:37.678 align:middle
因此图表位于
屏幕的左侧

00:04:37.845 --> 00:04:40.981 align:middle
标签是左对齐
表格视图附件位于

00:04:41.048 --> 00:04:44.218 align:middle
右侧 现在
把我的语言改成希伯来语

00:04:44.284 --> 00:04:48.722 align:middle
举例来说 它会自动替我
翻转表格视图单元

00:04:49.022 --> 00:04:51.491 align:middle
所以现在所有的图标
都到了右侧

00:04:51.758 --> 00:04:55.495 align:middle
文本标签在图标左侧
右对齐了

00:04:55.562 --> 00:04:58.165 align:middle
表格附件也到了
左侧

00:04:59.666 --> 00:05:01.702 align:middle
接下来是导航控件

00:04:59.666 --> 00:05:01.702 align:middle
接下来是导航控件

00:05:02.269 --> 00:05:04.304 align:middle
这是一个取自
手机app的实例

00:05:04.371 --> 00:05:07.207 align:middle
你可以看到后退按钮现在
位于屏幕的右侧

00:05:07.274 --> 00:05:09.610 align:middle
并且
导航手势和动画

00:05:09.676 --> 00:05:12.179 align:middle
都来自屏幕的
右边

00:05:12.479 --> 00:05:15.249 align:middle
如果你仔细看
还有UI表格

00:05:15.315 --> 00:05:18.218 align:middle
底部的UI表格
也翻转过来了

00:05:18.285 --> 00:05:20.387 align:middle
所以现在“收藏夹”
到了右侧

00:05:21.788 --> 00:05:25.325 align:middle
下一个 跟踪手势
这是另一个取自“时钟”app

00:05:25.392 --> 00:05:29.663 align:middle
的一个UI表格视图的实例
你可以看到幻灯片

00:05:29.963 --> 00:05:33.500 align:middle
滑到上方的手势
来自屏幕的左边

00:05:34.434 --> 00:05:37.404 align:middle
如果你使用库存UI表格视图
然后启用

00:05:37.471 --> 00:05:39.173 align:middle
滑到上方的手势
就可以免费实现了

00:05:41.842 --> 00:05:44.578 align:middle
那么如果在
你的app中允许从右到左支持呢？

00:05:44.978 --> 00:05:47.548 align:middle
如果你已经在你的app
进行了这项本地化

00:05:48.015 --> 00:05:50.651 align:middle
那么你只需要
链接到iOS 9即可

00:05:50.918 --> 00:05:52.619 align:middle
然后测试你的app

00:05:52.686 --> 00:05:55.255 align:middle
确保你的定制布局
按预期运作

00:05:56.957 --> 00:05:59.459 align:middle
但是如果你是首次添加

00:05:59.526 --> 00:06:01.461 align:middle
这项本地化
那么我们建议你

00:05:59.526 --> 00:06:01.461 align:middle
这项本地化
那么我们建议你

00:06:01.528 --> 00:06:04.798 align:middle
把你的storyboards改为
自动布局这一基础步骤

00:06:04.865 --> 00:06:08.202 align:middle
这样当你添加本地化时

00:06:08.402 --> 00:06:12.472 align:middle
XCode就会快速为你创建
基础字符串

00:06:12.573 --> 00:06:15.242 align:middle
你就可以导出它们
然后进行翻译

00:06:15.442 --> 00:06:18.846 align:middle
翻译完毕后 你就可以
通过XCode再次把它们导入

00:06:19.246 --> 00:06:22.349 align:middle
这样 当你运行你的app时
你就会看到

00:06:22.416 --> 00:06:25.752 align:middle
你的翻译被自动集成了
并且

00:06:25.819 --> 00:06:27.321 align:middle
你的布局也翻转过来了

00:06:29.189 --> 00:06:31.058 align:middle
我们再来谈谈测试

00:06:32.826 --> 00:06:36.663 align:middle
即使没有这些本地化项目、
对翻译进行集成

00:06:36.730 --> 00:06:40.667 align:middle
XCode也会大大简化
你对从右到左的布局的测试

00:06:41.068 --> 00:06:42.803 align:middle
当你来到XCode结构中

00:06:43.070 --> 00:06:46.173 align:middle
把你的应用程序的语言
从系统语言改为

00:06:46.440 --> 00:06:48.108 align:middle
从右到左的语言时

00:06:48.175 --> 00:06:50.444 align:middle
它就会为你模拟一个
从右到左的环境

00:06:50.511 --> 00:06:53.480 align:middle
你就可以看到你的app
是否已经为从右到左

00:06:53.580 --> 00:06:55.816 align:middle
这种环境
做好准备了

00:06:56.450 --> 00:06:58.886 align:middle
我们想向你展示下
我们刚刚谈到的这些内容

00:06:58.952 --> 00:07:01.655 align:middle
我会请我的同事
阿尔坦·阿哈默德

00:06:58.952 --> 00:07:01.655 align:middle
我会请我的同事
阿尔坦·阿哈默德

00:07:01.722 --> 00:07:03.156 align:middle
上台给你做个演示

00:07:15.502 --> 00:07:17.304 align:middle
<br/>
太好了 谢谢 萨拉

00:07:18.438 --> 00:07:23.310 align:middle
我要向你们展示一个app
来当例子 这是我写的

00:07:23.410 --> 00:07:26.046 align:middle
这是我写的一个简单的
食谱app 我想为你们添加

00:07:26.113 --> 00:07:28.448 align:middle
一个从右到左的本地化
让你们看看

00:07:28.515 --> 00:07:30.551 align:middle
借助我们添加到iOS 9的新东西

00:07:30.918 --> 00:07:34.188 align:middle
这有多么容易

00:07:34.288 --> 00:07:37.424 align:middle
这是app
相当直接

00:07:37.491 --> 00:07:39.993 align:middle
这里有一个表格视图
底部有一个标签栏

00:07:40.594 --> 00:07:43.063 align:middle
如果我们点击其中的
一个单元

00:07:43.130 --> 00:07:44.965 align:middle
我们就可以看到那个食谱的
详细视图

00:07:45.032 --> 00:07:47.501 align:middle
我们在这里有一些定制标签
和类似的东西

00:07:47.568 --> 00:07:50.971 align:middle
是通过自动布局布置的
还有一个集合视图

00:07:51.038 --> 00:07:54.675 align:middle
展示了那个食谱的一些照片
用户就是要照着这个食谱

00:07:54.741 --> 00:07:56.310 align:middle
来制作美食

00:07:58.512 --> 00:08:03.450 align:middle
既然我们准备好向我们的
app添加一个从右到左的

00:07:58.512 --> 00:08:03.450 align:middle
既然我们准备好向我们的
app添加一个从右到左的

00:08:03.517 --> 00:08:06.553 align:middle
本地化 我们就想
先看看它长什么样

00:08:06.620 --> 00:08:09.990 align:middle
但是在对任何翻译
进行集成之前

00:08:10.057 --> 00:08:11.992 align:middle
或者在做任何此类事之前
我们想先看看

00:08:12.059 --> 00:08:14.528 align:middle
添加了新的变更之后
我们的app成了什么样子

00:08:15.028 --> 00:08:17.865 align:middle
要照着萨拉所说的做
我要到XCode中对屏幕菜单

00:08:17.998 --> 00:08:22.736 align:middle
进行编辑
从应用程序语言下拉菜单中

00:08:22.803 --> 00:08:25.239 align:middle
我要选择从右到左的
伪语言

00:08:26.340 --> 00:08:29.443 align:middle
这样会让那些UI
发生改变

00:08:29.510 --> 00:08:31.211 align:middle
而不用真正加载
任何翻译

00:08:31.645 --> 00:08:33.780 align:middle
还有一项额外的优点

00:08:33.847 --> 00:08:36.416 align:middle
如果我的母语不是
一种从右到左的语言

00:08:36.482 --> 00:08:39.919 align:middle
我也可以在英语中看到
我的app带有从右到左的UI

00:08:39.986 --> 00:08:41.755 align:middle
是什么样子 这样
在我进行任何翻译之前

00:08:41.822 --> 00:08:45.492 align:middle
我就不用学习那些语言 或者
找一个母语人士帮我复审

00:08:46.159 --> 00:08:48.729 align:middle
我来把它关掉
并且再次运行app

00:08:51.098 --> 00:08:51.932 align:middle
搞定了

00:08:51.999 --> 00:08:56.003 align:middle
一行代码都没写
我就把所有的这些变更引入了

00:08:56.069 --> 00:08:57.504 align:middle
我的app
我可以发现

00:08:57.571 --> 00:08:58.872 align:middle
东西看上去很不错

00:08:59.373 --> 00:09:04.044 align:middle
我们查看下我们的app
看看发生了哪些变动

00:08:59.373 --> 00:09:04.044 align:middle
我们查看下我们的app
看看发生了哪些变动

00:09:04.111 --> 00:09:07.014 align:middle
因为我用的是标准表格视图
单元类型 即第I类

00:09:07.748 --> 00:09:11.118 align:middle
文本标签位于
右侧

00:09:11.718 --> 00:09:14.521 align:middle
V形图案位于左侧
并且指向左侧

00:09:14.955 --> 00:09:16.623 align:middle
就连底部的标签栏
也翻转过来了

00:09:16.690 --> 00:09:19.860 align:middle
如同从右到左的用户
预期的那样

00:09:19.993 --> 00:09:21.495 align:middle
现在第一个标签到了
最右边

00:09:22.196 --> 00:09:25.999 align:middle
如果你再看看导航栏
你会发现之前位于右侧的

00:09:26.066 --> 00:09:28.068 align:middle
导航按钮现在
也翻转过来了

00:09:28.135 --> 00:09:29.903 align:middle
如果我点击其中的一个
单元

00:09:30.270 --> 00:09:32.172 align:middle
我就会发现
因为我用的是自动布局

00:09:32.239 --> 00:09:33.674 align:middle
受前后
约束

00:09:33.974 --> 00:09:37.144 align:middle
文字对齐和整个UI
都翻转过来了

00:09:37.811 --> 00:09:40.881 align:middle
这里 有件很酷的事情
要注意 集合视图

00:09:40.948 --> 00:09:42.649 align:middle
因为我用的是库存集合视图、
默认的

00:09:42.716 --> 00:09:46.086 align:middle
集合视图流布局
集合视图也翻转过来了

00:09:46.153 --> 00:09:48.622 align:middle
因此
现在第一张照片到了右侧

00:09:48.856 --> 00:09:52.693 align:middle
而后面的项目则
接到了左边

00:09:53.126 --> 00:09:55.796 align:middle
正如萨拉所指出的那样
导航也颠倒过来了

00:09:55.863 --> 00:09:59.099 align:middle
如果我点击这个后退按钮
你可以看看我到了哪里

00:09:59.399 --> 00:10:01.835 align:middle
导航从右侧出现了
事实上

00:09:59.399 --> 00:10:01.835 align:middle
导航从右侧出现了
事实上

00:10:02.202 --> 00:10:04.771 align:middle
如果我们尝试滑动
我们也能看到同样的效果

00:10:06.039 --> 00:10:06.840 align:middle
太棒了

00:10:06.907 --> 00:10:10.177 align:middle
我已经在我的app中检查了
这些新的从右到左的变更

00:10:10.244 --> 00:10:11.945 align:middle
看起来很不错
我准备好添加

00:10:12.012 --> 00:10:13.280 align:middle
翻译、

00:10:13.580 --> 00:10:15.249 align:middle
看看

00:10:15.315 --> 00:10:17.384 align:middle
过程是什么
样子的

00:10:18.752 --> 00:10:20.254 align:middle
那么
我要选择我的项目

00:10:20.320 --> 00:10:23.457 align:middle
在项目导航中
我要去到编辑器中

00:10:23.524 --> 00:10:26.393 align:middle
这里 你可以看到一些
与本地化相关的选项

00:10:26.460 --> 00:10:29.162 align:middle
那么
我要添加本地化

00:10:29.429 --> 00:10:30.764 align:middle
我来选择阿拉伯语

00:10:31.598 --> 00:10:36.203 align:middle
XCode向我显示了一个对话框
开始工作了

00:10:36.270 --> 00:10:40.073 align:middle
这样就会创建
我需要翻译的

00:10:40.140 --> 00:10:42.643 align:middle
本地资源文件

00:10:43.911 --> 00:10:47.714 align:middle
下一步需要从我的项目中
导出

00:10:47.781 --> 00:10:50.350 align:middle
字符串
那么我们再回到编辑器菜单

00:10:50.417 --> 00:10:51.919 align:middle
点击本地化导出

00:10:52.352 --> 00:10:54.254 align:middle
XCode问我
要导出到哪里

00:10:54.721 --> 00:10:57.357 align:middle
我选择桌面
然后点击“保存”

00:10:58.192 --> 00:11:01.962 align:middle
现在XCode从我的项目中
取出了所有的字符串

00:10:58.192 --> 00:11:01.962 align:middle
现在XCode从我的项目中
取出了所有的字符串

00:11:02.296 --> 00:11:04.164 align:middle
并且打包进了一个
XLIFF文档

00:11:04.231 --> 00:11:07.367 align:middle
这是软件翻译
常见的文件格式

00:11:07.668 --> 00:11:09.036 align:middle
并且把文件放到了桌面上

00:11:09.670 --> 00:11:14.241 align:middle
我可以把这个文件发给一位
翻译人员

00:11:14.341 --> 00:11:16.643 align:middle
翻译人员会替我
正确翻译完毕

00:11:16.710 --> 00:11:18.912 align:middle
然后返回给我一个
翻译好的XLIFF的文件

00:11:20.380 --> 00:11:24.418 align:middle
非常棒 翻译人员
搞定了翻译部分

00:11:25.719 --> 00:11:27.187 align:middle
我准备好
导入本地化了

00:11:27.254 --> 00:11:29.890 align:middle
我回到编辑器中
导入本地化

00:11:31.024 --> 00:11:34.228 align:middle
找到我的翻译好的XLIFF文件夹
这是我阿拉伯语、

00:11:34.294 --> 00:11:37.564 align:middle
里面有译文的XLIFF文件
点击“输入”

00:11:38.632 --> 00:11:44.137 align:middle
XCode开始运行 取走全部译文
并且把它们整合到我的项目中

00:11:45.272 --> 00:11:49.810 align:middle
现在我们的UI和译文
都准备就绪了

00:11:51.211 --> 00:11:55.182 align:middle
最后一步
我要返回编辑结构菜单

00:11:56.016 --> 00:11:56.783 align:middle
这次我要选择阿拉伯语

00:11:56.850 --> 00:11:59.853 align:middle
而不是从右到左的伪语言
因为我写入了本地化

00:12:00.187 --> 00:12:02.122 align:middle
阿拉伯语
显示了出来

00:12:04.892 --> 00:12:07.494 align:middle
关闭 再次运行app

00:12:10.864 --> 00:12:11.698 align:middle
搞定了

00:12:12.232 --> 00:12:13.834 align:middle
现在
我有了翻译过的字符串

00:12:13.901 --> 00:12:16.336 align:middle
我的导航控件标题
翻译过了

00:12:17.437 --> 00:12:20.440 align:middle
我的标签栏项目也
翻译成了阿拉伯语

00:12:20.507 --> 00:12:23.210 align:middle
正如用户预期的那样
我可以给我

00:12:23.277 --> 00:12:27.447 align:middle
说阿拉伯语的客户
提供一个完整的

00:12:27.514 --> 00:12:29.183 align:middle
从右到左的
用户体验

00:12:29.516 --> 00:12:31.251 align:middle
这里
还有一个额外的好处

00:12:31.318 --> 00:12:35.122 align:middle
因为我是用日期组件
格式化程序来

00:12:35.656 --> 00:12:38.992 align:middle
格式化我的准备时间
和烹制时间

00:12:39.159 --> 00:12:42.329 align:middle
实际上 我也得到了
它们的本地化版本

00:12:42.396 --> 00:12:46.233 align:middle
使用数字和日期格式化程序
的无缝插件

00:12:47.935 --> 00:12:48.769 align:middle
可以了

00:12:48.836 --> 00:12:50.637 align:middle
把你现有的从左到右app
转变成

00:12:50.704 --> 00:12:53.740 align:middle
从右到左的app
就是

00:12:53.807 --> 00:12:55.075 align:middle
这么简单

00:12:55.409 --> 00:12:56.376 align:middle
我要请保罗上来

00:12:56.443 --> 00:12:58.946 align:middle
请他再来讲讲
你应该如何转变

00:12:59.313 --> 00:13:00.547 align:middle
你的定制UI

00:12:59.313 --> 00:13:00.547 align:middle
你的定制UI

00:13:11.058 --> 00:13:13.493 align:middle
就像萨拉
和阿尔坦向你们演示的

00:13:13.560 --> 00:13:17.030 align:middle
如果你用的是库存UIKit控件
那么向你的应用程序中添加

00:13:17.097 --> 00:13:19.600 align:middle
一个从右到左的本地化
就会非常容易

00:13:20.267 --> 00:13:22.536 align:middle
但是如果你的情况比较复杂
那该怎么办呢？

00:13:23.437 --> 00:13:26.540 align:middle
首先 在我们开始之前
我想回顾下我们进行的

00:13:26.607 --> 00:13:29.176 align:middle
一些API变更 这样
如果你正在定制化UI控件

00:13:29.443 --> 00:13:32.145 align:middle
你就可以更加容易地
支持从右到左的本地化

00:13:32.746 --> 00:13:36.216 align:middle
如果你正在用UI文本框
那么左视图、右视图、

00:13:36.316 --> 00:13:38.819 align:middle
左视图模式、右视图模式
就会自动为你镜像成

00:13:38.886 --> 00:13:40.888 align:middle
从右到左 这样
你就不需要做其它事情了

00:13:41.321 --> 00:13:43.991 align:middle
你唯一需要注意的是
矩形边界方法

00:13:44.057 --> 00:13:45.158 align:middle
它们不会变

00:13:46.727 --> 00:13:49.530 align:middle
当你在设置separatorIns
ets时 表格视图中

00:13:49.596 --> 00:13:51.598 align:middle
左右测量会自动
替你翻转过来

00:13:51.665 --> 00:13:53.534 align:middle
不需要你自己
做任何其它工作

00:13:55.636 --> 00:13:58.105 align:middle
如果你正在用滑块
最小、最大值图像

00:13:58.172 --> 00:14:00.707 align:middle
会自动替你
翻转过来

00:13:58.172 --> 00:14:00.707 align:middle
会自动替你
翻转过来

00:14:00.774 --> 00:14:03.810 align:middle
这是因为 在从右到左的语境中
滑块的最小值位于右侧

00:14:05.312 --> 00:14:07.881 align:middle
你唯一需要注意的是
矩形边界方法

00:14:07.948 --> 00:14:09.917 align:middle
当它们
翻转时

00:14:10.017 --> 00:14:13.020 align:middle
如果你正在X轴上定制
偏移

00:14:13.086 --> 00:14:15.455 align:middle
如果你在从右到左的
语境中运行

00:14:15.522 --> 00:14:17.925 align:middle
你就需要确保它们正确
对从右到左做出解释

00:14:18.792 --> 00:14:21.662 align:middle
最后 对于像你在演示中
看到的导航栏来说

00:14:22.329 --> 00:14:25.799 align:middle
我们会自动为你翻转左侧栏
按钮项目和右侧栏按钮项目

00:14:25.866 --> 00:14:29.503 align:middle
但是
如果你在这些API之外

00:14:29.570 --> 00:14:32.940 align:middle
添加子视图
你就需要确保它们摆放正确

00:14:33.006 --> 00:14:35.375 align:middle
不然
你就会出现重叠的内容

00:14:36.810 --> 00:14:39.980 align:middle
我们再来谈谈一些你可能
用在你的应用程序上的

00:14:40.047 --> 00:14:42.449 align:middle
定制UI
谈谈应该如何正确处理它们

00:14:42.950 --> 00:14:45.219 align:middle
就像你之前看到的
标准单元类型会自动

00:14:45.285 --> 00:14:47.254 align:middle
替你翻转
不需要你做其它工作

00:14:47.855 --> 00:14:49.957 align:middle
这就意味着
如果你有定制布局

00:14:50.023 --> 00:14:51.758 align:middle
你就需要确保
它们也翻转过来了

00:14:52.092 --> 00:14:53.794 align:middle
以便它们
和OS的其它部分、

00:14:54.094 --> 00:14:56.396 align:middle
和你的应用程序中可能的
其它表格视图单元类型

00:14:56.463 --> 00:14:57.497 align:middle
保持一致

00:14:57.965 --> 00:15:01.335 align:middle
当然 你可以通过在
你的布局中简单映射帧

00:14:57.965 --> 00:15:01.335 align:middle
当然 你可以通过在
你的布局中简单映射帧

00:15:01.401 --> 00:15:04.004 align:middle
来实现这一点
但是我们建议你

00:15:04.071 --> 00:15:05.672 align:middle
使用前后约束
自动布局

00:15:05.739 --> 00:15:08.308 align:middle
就可以了
因为这样就不需要你做任何

00:15:08.375 --> 00:15:11.011 align:middle
其它的事情
无论是从左到右还是

00:15:11.078 --> 00:15:14.081 align:middle
从右到左 你都可以有
一模一样的界面、代码处理

00:15:14.848 --> 00:15:17.050 align:middle
对于集合视图来说
情况也很类似

00:15:17.117 --> 00:15:18.552 align:middle
就像我们在演示中看到的

00:15:18.619 --> 00:15:21.088 align:middle
集合视图流布局自动支持
从右到左

00:15:21.154 --> 00:15:24.057 align:middle
只要对项目重排序
从右流到左即可

00:15:24.791 --> 00:15:28.128 align:middle
这就意味着 如果你是在做定制
集合视图布局

00:15:28.195 --> 00:15:30.931 align:middle
你需要确保它在X轴上
也正确翻转了

00:15:31.598 --> 00:15:34.902 align:middle
一般来说 我们今天推荐你
用子类集合视图流布局

00:15:34.968 --> 00:15:36.036 align:middle
而不是从头开始

00:15:36.103 --> 00:15:38.472 align:middle
写你自己的
布局代码

00:15:39.273 --> 00:15:41.675 align:middle
实际上
明天下午就有个会议

00:15:41.742 --> 00:15:44.311 align:middle
会讲讲如何很好地
实现这一点

00:15:44.378 --> 00:15:46.847 align:middle
会议上还会讲讲你可能
想在Cocoa Touch中

00:15:46.914 --> 00:15:48.615 align:middle
进行的其它本地化

00:15:49.149 --> 00:15:51.919 align:middle
那么 在这次演示中
我们已经

00:15:51.985 --> 00:15:53.921 align:middle
多次提到了
自动布局

00:15:53.987 --> 00:15:55.822 align:middle
但是你们可能
不熟悉这项技术

00:15:56.423 --> 00:16:00.127 align:middle
“自动布局”是一种
通过使用一组约束

00:15:56.423 --> 00:16:00.127 align:middle
“自动布局”是一种
通过使用一组约束

00:16:00.360 --> 00:16:02.563 align:middle
而不是使用帧 向你的UI
放置元素的一种方式

00:16:02.896 --> 00:16:06.900 align:middle
自从iOS 6之后就可以用来
让你更方便地支持不同的

00:16:06.967 --> 00:16:10.771 align:middle
iPhone、iPad屏幕尺寸
支持不同的

00:16:10.871 --> 00:16:12.573 align:middle
尺寸
等级

00:16:13.040 --> 00:16:14.975 align:middle
新的split-view
多任务处理

00:16:15.242 --> 00:16:18.545 align:middle
让你的应用程序
更容易

00:16:18.612 --> 00:16:20.147 align:middle
兼容这项新技术

00:16:20.914 --> 00:16:22.883 align:middle
最后
即使在从右到左本地化之前

00:16:23.450 --> 00:16:25.152 align:middle
“自动布局”也能
让你

00:16:25.219 --> 00:16:26.954 align:middle
更容易支持附加的
本地化

00:16:27.321 --> 00:16:29.256 align:middle
这是因为
一旦你有了一组很好的约束

00:16:29.590 --> 00:16:31.491 align:middle
添加一项新的本地化
就不过是

00:16:31.558 --> 00:16:33.427 align:middle
翻译字符串罢了
你不需要

00:16:33.493 --> 00:16:35.762 align:middle
写任何特殊代码
来正确配置布局

00:16:35.829 --> 00:16:38.832 align:middle
如果我在XCode中有什么
约束

00:16:38.899 --> 00:16:41.502 align:middle
在英语中看起来是
一模一样的 这毫无疑问

00:16:41.568 --> 00:16:44.204 align:middle
当我在俄语中运行时
它看起来可能是这样的

00:16:44.671 --> 00:16:46.773 align:middle
如果我为一种长度是英语的
两倍的语言

00:16:46.840 --> 00:16:49.309 align:middle
添加本地化
那么

00:16:49.576 --> 00:16:50.777 align:middle
我并不需要
做其它事情

00:16:50.844 --> 00:16:52.346 align:middle
因为约束会替我
处理

00:16:52.412 --> 00:16:53.881 align:middle
所有的
UI定位

00:16:54.515 --> 00:16:57.584 align:middle
现在 从右到左这样做
还有另外一个原因

00:16:58.619 --> 00:17:03.090 align:middle
你的布局会自动
翻转

00:16:58.619 --> 00:17:03.090 align:middle
你的布局会自动
翻转

00:17:03.156 --> 00:17:04.691 align:middle
你不需要
做任何其它事情

00:17:05.259 --> 00:17:07.895 align:middle
现在
你可以在storyboards、

00:17:08.228 --> 00:17:10.797 align:middle
代码中使用自动布局
或者使用两者的组合

00:17:10.964 --> 00:17:13.599 align:middle
这样 你的约束和storyboar
d就有了一个出口

00:17:13.901 --> 00:17:16.537 align:middle
当由于某种原因
你需要改变你的UI时

00:17:16.603 --> 00:17:18.405 align:middle
你就可以以编程方式
来对它们进行处理

00:17:20.540 --> 00:17:22.709 align:middle
我们刚才讲了
前后

00:17:22.776 --> 00:17:24.711 align:middle
同样地 你对它们可能也
不熟悉

00:17:25.412 --> 00:17:27.781 align:middle
其实就是 当你并排有
两个标签

00:17:28.182 --> 00:17:29.583 align:middle
并且它们之间有水平
约束时

00:17:29.650 --> 00:17:32.419 align:middle
你就可以把它们指定为
从左到右

00:17:32.486 --> 00:17:33.854 align:middle
或者指定为从前往后

00:17:33.921 --> 00:17:36.957 align:middle
不同之处在于
从左到右是不会变的

00:17:37.591 --> 00:17:40.394 align:middle
另一方面 从前往后
在从左到右的本地化中

00:17:40.460 --> 00:17:41.762 align:middle
看起来像是从左到右

00:17:41.995 --> 00:17:44.298 align:middle
但是实际上
在从右到左的本地化中

00:17:44.364 --> 00:17:46.133 align:middle
它是映射了你的UI和布局

00:17:46.700 --> 00:17:49.069 align:middle
当你在storyboards中
创建约束时

00:17:49.336 --> 00:17:51.672 align:middle
如果你创建的是默认的
水平约束

00:17:52.105 --> 00:17:54.074 align:middle
那么它们就已经是
从前往后了

00:17:54.141 --> 00:17:55.442 align:middle
你并不需要
做任何其它事

00:17:56.844 --> 00:17:59.012 align:middle
类似地
如果你在代码中创建约束

00:17:59.079 --> 00:18:00.781 align:middle
并且你用的是
可视化格式语言

00:17:59.079 --> 00:18:00.781 align:middle
并且你用的是
可视化格式语言

00:18:01.181 --> 00:18:04.585 align:middle
那么同样地
水平约束也会默认为从前往后

00:18:05.052 --> 00:18:07.721 align:middle
但是 如果你明确地
创建约束

00:18:08.121 --> 00:18:10.824 align:middle
或者你是在iOS 9上使用新的
布局定位器API

00:18:11.391 --> 00:18:14.261 align:middle
那么当你创建约束时
你就需要确保

00:18:14.328 --> 00:18:15.796 align:middle
你选择了
正确的属性

00:18:18.198 --> 00:18:22.603 align:middle
你在这个演示中看到的动画
都会为全部库存控件翻转过来

00:18:22.970 --> 00:18:26.540 align:middle
这就意味着
如果你在你的UI中有定制动画

00:18:26.607 --> 00:18:28.775 align:middle
那么你就需要确保
它们也正确翻转过来了

00:18:28.842 --> 00:18:30.978 align:middle
当然了 如果你愿意的话
你可以使用帧

00:18:31.478 --> 00:18:35.616 align:middle
但是我们建议你使用
带有从前往后的约束的

00:18:35.682 --> 00:18:37.217 align:middle
自动布局
来代替帧

00:18:37.284 --> 00:18:40.521 align:middle
然后改变那些约束的
定值即可

00:18:40.721 --> 00:18:43.423 align:middle
这样就可以自动完成
从左到右以及从右到左

00:18:43.490 --> 00:18:45.726 align:middle
而不需要任何
附加的代码

00:18:45.792 --> 00:18:47.928 align:middle
这里有一个实例
你可以看看是怎样实现的

00:18:48.462 --> 00:18:52.299 align:middle
假如说
我想改变某个约束的定值

00:18:52.366 --> 00:18:54.568 align:middle
在这里 我有一个持续时间

00:18:54.635 --> 00:18:56.870 align:middle
我要把偏移量改成一个
不同的值

00:18:56.937 --> 00:19:00.040 align:middle
开始动画之前 我要调用layout
IfNeeded

00:18:56.937 --> 00:19:00.040 align:middle
开始动画之前 我要调用layout
IfNeeded

00:19:00.107 --> 00:19:02.543 align:middle
确保帧的起始位置
是正确的

00:19:03.410 --> 00:19:05.412 align:middle
然后我会调用一个隐式
动画块

00:19:05.479 --> 00:19:08.115 align:middle
在动画块里面我可以改变
约束的实际常数

00:19:08.182 --> 00:19:10.817 align:middle
然后再次调用
layoutIfNeeded

00:19:10.884 --> 00:19:12.085 align:middle
这样就更新了帧

00:19:12.386 --> 00:19:14.555 align:middle
因为它位于隐式
动画块里面

00:19:14.621 --> 00:19:16.023 align:middle
变更也就会被
制成动画

00:19:16.423 --> 00:19:19.226 align:middle
你可以在这里看到
这里并没有为从右到左

00:19:19.293 --> 00:19:22.429 align:middle
或者从左到右写特例
只有一组单一的代码

00:19:22.496 --> 00:19:24.331 align:middle
代码在两种语境下
都运行的十分完美

00:19:25.966 --> 00:19:27.501 align:middle
现在 我们再来谈谈手势

00:19:27.568 --> 00:19:30.537 align:middle
就像你已经看过的
表格视图和导航

00:19:30.604 --> 00:19:31.972 align:middle
我们把标准手势翻转过来了

00:19:32.406 --> 00:19:36.176 align:middle
但是 手势识别器API自身
却不会变

00:19:36.410 --> 00:19:38.579 align:middle
原因在于
手势识别器

00:19:38.645 --> 00:19:40.414 align:middle
本身是
很抽象的

00:19:40.480 --> 00:19:42.516 align:middle
我们在框架层次是不可能
知道你使用

00:19:42.583 --> 00:19:45.085 align:middle
手势识别器的
目的

00:19:46.019 --> 00:19:49.823 align:middle
作为一名开发者
这对你们意味着当你们使用

00:19:49.890 --> 00:19:52.025 align:middle
手势识别器时、当你们对
手势事件做出响应时

00:19:52.092 --> 00:19:54.061 align:middle
你们只需要注意
使用手势识别器的

00:19:54.795 --> 00:19:56.330 align:middle
实际用途
即可

00:19:57.331 --> 00:19:59.499 align:middle
举例来说
如果你使用你的手势识别器

00:19:59.766 --> 00:20:02.769 align:middle
在屏幕上绘图
你就需要保留原样

00:19:59.766 --> 00:20:02.769 align:middle
在屏幕上绘图
你就需要保留原样

00:20:02.870 --> 00:20:05.405 align:middle
这是因为母语为从右到左的用户
不会倒着画

00:20:06.273 --> 00:20:08.909 align:middle
但是 还是举例来说
如果你的表格视图单元

00:20:08.976 --> 00:20:10.544 align:middle
有定制手势识别器
你就需要确保

00:20:10.611 --> 00:20:12.813 align:middle
你把它翻转过来
因为表格视图样式的

00:20:12.880 --> 00:20:14.715 align:middle
布局
已经翻转过来了

00:20:16.617 --> 00:20:20.754 align:middle
类似地
如果你用的是导航手势

00:20:20.821 --> 00:20:23.257 align:middle
你也需要把它们翻转过来
就像我们之前看到的

00:20:23.323 --> 00:20:24.925 align:middle
前后
实际上颠倒了

00:20:24.992 --> 00:20:26.927 align:middle
这里 要记住的
最重要的事情是

00:20:26.994 --> 00:20:29.730 align:middle
不论你在做什么
你都需要确保手势

00:20:29.796 --> 00:20:32.933 align:middle
能够正确追踪手势下方的
UI

00:20:33.200 --> 00:20:35.869 align:middle
当你从左划到右
但是UI却从右移到了左

00:20:35.936 --> 00:20:37.804 align:middle
你肯定不希望
出现这种情况

00:20:37.871 --> 00:20:39.072 align:middle
因为这会让人
晕头转向

00:20:39.740 --> 00:20:42.743 align:middle
而如果你用“自动布局”
你的工作就可以大大简化

00:20:42.809 --> 00:20:45.546 align:middle
我想把阿尔坦再请回来
请她对我们刚刚

00:20:45.612 --> 00:20:47.581 align:middle
谈到的事情
做一个演示

00:20:54.154 --> 00:20:56.156 align:middle line:-3
<br/>
谢谢 保罗

00:20:56.223 --> 00:20:58.392 align:middle
当保罗做演讲时
我又考虑了下我的app

00:21:02.196 --> 00:21:05.599 align:middle
我决定

00:21:05.666 --> 00:21:08.669 align:middle
增加一些定制UI

00:21:09.269 --> 00:21:14.141 align:middle
因此我就创建了一个很酷的
定制表格视图单元子类

00:21:14.208 --> 00:21:16.243 align:middle
是通过“自动布局”
布置的

00:21:16.577 --> 00:21:17.477 align:middle
相当直接

00:21:17.544 --> 00:21:20.414 align:middle
这一行中有一些
更多信息文本标签

00:21:20.714 --> 00:21:23.016 align:middle
这里有一张漂亮的图片
这样用户就可以看到他们

00:21:23.083 --> 00:21:25.252 align:middle
将要烹饪的美食的图片

00:21:25.319 --> 00:21:29.256 align:middle
左侧还有一个很酷的小
收藏夹视图

00:21:29.323 --> 00:21:31.992 align:middle
这样用户就可以通过划动
单元 把它拖出来

00:21:32.326 --> 00:21:34.962 align:middle
和我们现在在表格视图单元
上有的

00:21:35.028 --> 00:21:37.564 align:middle
库存swipeToDelete手势
很类似

00:21:38.098 --> 00:21:41.602 align:middle
如果他们拖的足够远
那么图片顶部会出现一颗

00:21:41.668 --> 00:21:43.670 align:middle
小星星
告诉他们这张食谱

00:21:43.737 --> 00:21:45.906 align:middle
已经添加到了收藏夹了

00:21:46.807 --> 00:21:49.343 align:middle
我们来看看在从左到右的

00:21:49.409 --> 00:21:52.579 align:middle
语境中、在英语中
它是什么样子的

00:21:53.113 --> 00:21:58.552 align:middle
太好了 我的app现在看起来
更有生机、

00:21:58.619 --> 00:22:01.755 align:middle
更有魅力了
这是一张照片

00:21:58.619 --> 00:22:01.755 align:middle
更有魅力了
这是一张照片

00:22:02.122 --> 00:22:07.361 align:middle
这里有一些文本标签
实际上 如果我把单元

00:22:07.427 --> 00:22:10.264 align:middle
拖动的足够远
收藏夹视图就显示出来了

00:22:10.330 --> 00:22:14.134 align:middle
如果我完成这个手势
小星星就显示出来了

00:22:14.368 --> 00:22:18.605 align:middle
太好了 刚才保罗演讲时
我趁机

00:22:18.672 --> 00:22:21.542 align:middle
学习了
阿拉伯语

00:22:21.875 --> 00:22:24.511 align:middle
并且向我的app添加了
阿拉伯语本地化

00:22:24.945 --> 00:22:27.614 align:middle
那么在这个演示中 我们就要
在阿拉伯语中运行app

00:22:27.881 --> 00:22:29.550 align:middle
这就是我们的从右到左语言

00:22:29.917 --> 00:22:32.286 align:middle
我要返回
编辑结构菜单

00:22:32.653 --> 00:22:36.890 align:middle
这次选择“阿拉伯语”
点击“回车” 运行app

00:22:39.793 --> 00:22:42.296 align:middle
哇！这是因为我用了带前后约束的
自动布局

00:22:42.362 --> 00:22:44.698 align:middle
所有的事情
都翻转过来了

00:22:44.765 --> 00:22:47.100 align:middle
现在图片
到了右侧

00:22:47.301 --> 00:22:48.735 align:middle
文本标签都成了
右对齐

00:22:48.802 --> 00:22:49.903 align:middle
位置也都正确

00:22:50.237 --> 00:22:53.674 align:middle
当然了 V形图案属于库存
它的位置没变

00:22:54.041 --> 00:22:57.711 align:middle
格式化程序插件、
持续时间和数字

00:22:57.778 --> 00:23:00.848 align:middle
都为阿拉伯语正确进行了
本地化

00:22:57.778 --> 00:23:00.848 align:middle
都为阿拉伯语正确进行了
本地化

00:23:01.615 --> 00:23:03.317 align:middle
不过我们还没有看
定制手势

00:23:03.383 --> 00:23:05.452 align:middle
我们来看看

00:23:05.719 --> 00:23:08.488 align:middle
因为整个单元都是
从右到左布置

00:23:08.822 --> 00:23:12.659 align:middle
用户期望滑动收藏夹的
方向也是

00:23:12.726 --> 00:23:16.763 align:middle
如此
当然更是因为整个系统的

00:23:16.830 --> 00:23:18.832 align:middle
划动删除手势
也翻转过来了

00:23:19.233 --> 00:23:20.868 align:middle
这样他们就知道
它是来自左侧

00:23:20.934 --> 00:23:23.504 align:middle
不论你的定制手势是什么
用户都会期待

00:23:23.570 --> 00:23:24.738 align:middle
手势
从右开始

00:23:25.439 --> 00:23:27.941 align:middle
我们来朝着这个方向滑动下
看看对于这个例子中的

00:23:28.008 --> 00:23:31.178 align:middle
一个从右到左用户来说
会发生什么

00:23:31.845 --> 00:23:34.414 align:middle
你可以看到
事情并未像预期的那样运行

00:23:34.648 --> 00:23:37.951 align:middle
我划动了
但是视图没有显示

00:23:38.018 --> 00:23:39.920 align:middle
表格单元视图以为我
点的是它

00:23:40.320 --> 00:23:41.989 align:middle
因此给我展示了
详细视图

00:23:42.055 --> 00:23:43.423 align:middle
这可不太说得通

00:23:44.391 --> 00:23:46.293 align:middle
发生这种事情的
原因是

00:23:46.360 --> 00:23:49.863 align:middle
我的代码中有一个
隐含假定

00:23:50.230 --> 00:23:52.232 align:middle
超出了那个划动的
定向性

00:23:52.833 --> 00:23:55.702 align:middle
我期望划动是
从左到右

00:23:56.136 --> 00:23:58.305 align:middle
或者换句话说
是沿着正的X方向

00:23:59.239 --> 00:24:02.242 align:middle
事实上
如果我朝着那个方向划动

00:23:59.239 --> 00:24:02.242 align:middle
事实上
如果我朝着那个方向划动

00:24:02.309 --> 00:24:04.311 align:middle
那个视图确实可以
显示出来

00:24:04.578 --> 00:24:07.481 align:middle
但是 它显示的方向
和我手指拖动的方向

00:24:07.548 --> 00:24:09.683 align:middle
是
相反的

00:24:10.050 --> 00:24:12.586 align:middle
这对用户来说
可不太说得通

00:24:12.986 --> 00:24:16.089 align:middle
你肯定想避免出现
此类情况

00:24:16.857 --> 00:24:20.060 align:middle
那就让我们回到
表格视图单元子类

00:24:20.127 --> 00:24:23.497 align:middle
看看我们能不能找到
问题所在

00:24:24.364 --> 00:24:26.733 align:middle
这里你可以看到
我有两项手势识别器

00:24:26.800 --> 00:24:28.168 align:middle
相关的方法

00:24:28.235 --> 00:24:30.771 align:middle
第一个是手势识别器
应该开始的方法

00:24:31.405 --> 00:24:33.373 align:middle
我采用这种方法的
原因是

00:24:33.440 --> 00:24:36.076 align:middle
就像我之前说过的那样
我想要对定制手势以及

00:24:36.143 --> 00:24:38.111 align:middle
库存表格视图手势
都提供支持

00:24:38.645 --> 00:24:41.448 align:middle
那么在这里
如果用户滑动的方向

00:24:41.515 --> 00:24:44.818 align:middle
和我的手势方向一致
我就让我的手势识别器启动

00:24:45.152 --> 00:24:47.654 align:middle
如果用户朝着swipeToDele
te的方向滑动

00:24:47.721 --> 00:24:50.057 align:middle
那么我就什么也不做
让表格视图自行处理

00:24:50.924 --> 00:24:53.660 align:middle
那么在这里你可以看到
我有手势识别器的X翻译

00:24:53.961 --> 00:24:56.597 align:middle
如果翻译大于零值
或者大于从左到右

00:24:56.663 --> 00:25:01.001 align:middle
那么我就会
启动我的手势识别器

00:24:56.663 --> 00:25:01.001 align:middle
那么我就会
启动我的手势识别器

00:25:01.301 --> 00:25:03.637 align:middle
那么我们在这里需要做的
就是校验我们是否运行在

00:25:03.704 --> 00:25:06.974 align:middle
从右到左的语境中
如果是的话

00:25:07.040 --> 00:25:10.110 align:middle
我们就需要查找相反方向的
翻译

00:25:10.377 --> 00:25:13.413 align:middle
要知道我是否允许在
从右到左的

00:25:13.480 --> 00:25:16.450 align:middle
本地化中
我要使用我们加到iOS上

00:25:16.583 --> 00:25:19.019 align:middle
的新API
保罗很快会讲到这一点

00:25:19.086 --> 00:25:22.990 align:middle
不过因为
我们现在正好需要 那我就先用了

00:25:23.056 --> 00:25:25.792 align:middle
我先声明一个叫做

00:25:25.859 --> 00:25:28.795 align:middle
isLeftToRightLayo
ut的新常数

00:25:30.330 --> 00:25:33.901 align:middle
我要为语义内容属性
使用一个新的

00:25:33.967 --> 00:25:38.038 align:middle
用户界面布局方向
我要在我的

00:25:38.305 --> 00:25:41.875 align:middle
视图语义内容属性中
解析我们加到 iOS 9的API

00:25:42.142 --> 00:25:45.212 align:middle
这会返回一个解算过的
布局方向 对这个视图来说

00:25:45.279 --> 00:25:50.017 align:middle
是从左到右还是从右到左
如果返回的方向是

00:25:50.083 --> 00:25:51.852 align:middle
从左到右
那么我就知道 我是在

00:25:51.919 --> 00:25:53.187 align:middle
从左到右的本地化中运行

00:25:54.421 --> 00:25:57.858 align:middle
校验翻译之前
下一步要做的是

00:25:57.925 --> 00:26:00.460 align:middle
我要查看下我的
isLeftToRight变量

00:25:57.925 --> 00:26:00.460 align:middle
我要查看下我的
isLeftToRight变量

00:26:00.794 --> 00:26:03.330 align:middle
如果是从左到右 那么
我们像往常一样继续即可

00:26:04.264 --> 00:26:07.334 align:middle
如果是从右到左 那么我们
就要寻找小于零或者位于

00:26:07.401 --> 00:26:09.069 align:middle
导航X中的翻译

00:26:09.570 --> 00:26:12.172 align:middle
这里的第二个方法

00:26:12.239 --> 00:26:15.943 align:middle
是这个updateFavorite
ButtonPosition方法

00:26:16.009 --> 00:26:19.246 align:middle
那么在这里
我们实际上就对约束的常数

00:26:19.313 --> 00:26:22.216 align:middle
进行了处理
并且在屏幕上显示了那个视图

00:26:22.282 --> 00:26:25.185 align:middle
在这里你还可以看到
我应该允许拖动

00:26:25.252 --> 00:26:28.288 align:middle
收藏夹按钮常数

00:26:28.355 --> 00:26:30.724 align:middle
这样就可以告诉下面的代码
是否应该开始显示

00:26:30.791 --> 00:26:35.262 align:middle
那个视图了
同样地 我们会校正的X翻译

00:26:35.629 --> 00:26:38.198 align:middle
解决方法也很类似
我们把这个校验拿过来

00:26:39.533 --> 00:26:42.369 align:middle
放到这里

00:26:42.436 --> 00:26:45.572 align:middle
然后校验从左到右布局

00:26:45.639 --> 00:26:47.808 align:middle
校验相反方向的翻译

00:26:47.875 --> 00:26:49.743 align:middle
并且校验
从右到左

00:26:50.844 --> 00:26:53.914 align:middle
这里的最后一位是这个distanc
ePulled变量

00:26:53.981 --> 00:26:58.418 align:middle
因此 distancePulled
变量 或者常量

00:26:58.485 --> 00:27:03.690 align:middle
会告诉下面的代码
用户在单元上指头拖动了多远

00:26:58.485 --> 00:27:03.690 align:middle
会告诉下面的代码
用户在单元上指头拖动了多远

00:27:04.358 --> 00:27:06.927 align:middle
现在我们就可以接受一个
负的翻译了

00:27:06.994 --> 00:27:09.997 align:middle
distancePulled变量也
成为负的 这样

00:27:10.063 --> 00:27:12.399 align:middle
没有什么意义
因为它表达了一个绝对值的

00:27:12.466 --> 00:27:15.669 align:middle
分类
要纠正这一点

00:27:15.736 --> 00:27:19.506 align:middle
我们就也要获取翻译的
绝对值

00:27:19.873 --> 00:27:21.408 align:middle
这样就可以替我们解决问题

00:27:22.176 --> 00:27:25.078 align:middle
做了这些变更后
我们再来运行下app

00:27:25.579 --> 00:27:28.015 align:middle
看看情况怎样

00:27:29.716 --> 00:27:31.952 align:middle
好了 这里的一切
看起来都不错

00:27:32.252 --> 00:27:34.788 align:middle
现在如果我把我的手指

00:27:34.855 --> 00:27:38.692 align:middle
拖过去 那么事情就会像
从右到左的用户期望的那样了

00:27:38.892 --> 00:27:40.327 align:middle
就是这样
你就是只需要确保

00:27:40.394 --> 00:27:42.663 align:middle
留意你的代码中的
此类

00:27:42.729 --> 00:27:45.399 align:middle
假设
这就是从右到左的关键所在

00:27:45.465 --> 00:27:47.701 align:middle
有时候
事情

00:27:47.768 --> 00:27:50.103 align:middle
就是
这么简单

00:27:50.571 --> 00:27:53.273 align:middle
把你的定制手势和UI

00:27:53.340 --> 00:27:56.443 align:middle
转变为从右到左 就只需要做这些

00:27:56.510 --> 00:27:59.146 align:middle
我们请回保罗
请他再讲一些异常

00:27:59.213 --> 00:28:01.415 align:middle
以及
最佳做法

00:27:59.213 --> 00:28:01.415 align:middle
以及
最佳做法

00:28:08.188 --> 00:28:11.358 align:middle
<br/>
好的 谢谢 阿尔坦

00:28:11.425 --> 00:28:14.194 align:middle
我们来讲一些异常
讲讲我们引入iOS 9的

00:28:14.261 --> 00:28:16.430 align:middle
一些
新API

00:28:17.531 --> 00:28:18.799 align:middle
其中一个就是我们在

00:28:18.866 --> 00:28:21.935 align:middle
阿尔坦的演示中看到的
语义内容属性API

00:28:22.069 --> 00:28:23.770 align:middle
那么在我们开始之前
我们先来谈谈

00:28:23.837 --> 00:28:25.572 align:middle
什么是
语义内容属性

00:28:26.540 --> 00:28:29.576 align:middle
语义内容属性是
UI视图的一项新属性

00:28:30.310 --> 00:28:34.181 align:middle
用途是确保所有的UI在
从右到左和从左到右的

00:28:34.248 --> 00:28:37.918 align:middle
语境中都能正确显示
因为有时候并不是所有的

00:28:37.985 --> 00:28:40.053 align:middle
UI都会翻转
我们就需要确保我们

00:28:40.120 --> 00:28:42.356 align:middle
可以对此
进行指定

00:28:42.789 --> 00:28:45.492 align:middle
那么
默认语义内容属性是未指明的

00:28:46.727 --> 00:28:49.263 align:middle
在从右到左本地化中会
翻转

00:28:49.329 --> 00:28:51.832 align:middle
而在从左到右的本地化中则
保持不变

00:28:52.766 --> 00:28:55.335 align:middle
但是我们还有一些你可以
设置的附加属性类型

00:28:55.402 --> 00:28:57.571 align:middle
可以阻止翻转发生
不管是出于历史原因还是

00:28:57.638 --> 00:29:01.041 align:middle
出于
其它原因

00:28:57.638 --> 00:29:01.041 align:middle
出于
其它原因

00:29:01.341 --> 00:29:03.544 align:middle
可以管理从右到左的用户的
异常

00:29:04.411 --> 00:29:06.680 align:middle
最后一点
前后约束的

00:29:06.747 --> 00:29:08.515 align:middle
分辨率 实际上是
基于

00:29:08.582 --> 00:29:10.050 align:middle
语义内容
属性的

00:29:10.617 --> 00:29:12.486 align:middle
要记住
这一点

00:29:13.187 --> 00:29:15.055 align:middle
首先是回放

00:29:15.622 --> 00:29:19.526 align:middle
这里的想法是
如果你有某种回放控件

00:29:19.793 --> 00:29:21.995 align:middle
你就用它来取代那个控件的
语义内容属性

00:29:22.062 --> 00:29:23.997 align:middle
或者取代那一组控件
来进行回放

00:29:24.064 --> 00:29:25.599 align:middle
然它们保持
从左到右

00:29:25.666 --> 00:29:28.735 align:middle
就像你在这个新的
音乐app中看到的一样

00:29:28.802 --> 00:29:32.439 align:middle
我们的进度条
以及回放控件

00:29:32.506 --> 00:29:34.808 align:middle
它们都保持了从左到右
并不会翻转

00:29:35.876 --> 00:29:37.477 align:middle
下一个是空间

00:29:37.945 --> 00:29:41.281 align:middle
是为了注释控制
对应某种直接UI操纵的

00:29:41.348 --> 00:29:44.818 align:middle
注释控制
你的游戏中可能有一个

00:29:44.885 --> 00:29:47.554 align:middle
游戏手柄
按上方向键就向上移动

00:29:47.621 --> 00:29:51.058 align:middle
按左方向键就往左移动
或者是文本对齐的类似操作

00:29:51.391 --> 00:29:54.828 align:middle
因此我们在页面app这里
有一个分段控件

00:29:54.895 --> 00:29:56.463 align:middle
你就可以设置文本上的
对齐方式

00:29:56.897 --> 00:29:59.266 align:middle
即使运行在从右到左的
本地化中 左对齐文本

00:29:59.333 --> 00:30:01.301 align:middle
也会停留在
左侧

00:29:59.333 --> 00:30:01.301 align:middle
也会停留在
左侧

00:30:01.635 --> 00:30:04.271 align:middle
我们不要动它了

00:30:04.671 --> 00:30:07.140 align:middle
最后
对于你们那些想更明确的人

00:30:07.207 --> 00:30:09.443 align:middle
我们还有这些
forceLeftToRight

00:30:09.510 --> 00:30:12.112 align:middle
和RightToLeftand
从右到左属性类型

00:30:12.179 --> 00:30:14.114 align:middle
你从它们的名字就可以
知道它们的功能

00:30:14.181 --> 00:30:17.851 align:middle
forceRighToLeft会对
从左到右的本地化中的布局产生影响

00:30:17.918 --> 00:30:21.221 align:middle
其它则只有当你在从右到左的语境中运
行app时才会产生影响

00:30:21.288 --> 00:30:23.590 align:middle
对于这些我最后要说的是
如果你想用它们

00:30:23.657 --> 00:30:25.325 align:middle
请到实验室
和我们谈谈

00:30:25.392 --> 00:30:26.960 align:middle
或者在
开发者论坛发帖

00:30:27.027 --> 00:30:29.863 align:middle
以便我们确认你没有
做错什么事情、

00:30:29.930 --> 00:30:32.900 align:middle
确认现有的API
不能很好地满足你的需求

00:30:32.966 --> 00:30:35.102 align:middle
也许我们漏了添加一种
API

00:30:35.169 --> 00:30:37.771 align:middle
你就可以
告诉我们

00:30:39.173 --> 00:30:43.243 align:middle
我想再谈谈
当你支持从右到左时的

00:30:43.310 --> 00:30:45.445 align:middle
UI和文本的
最佳做法

00:30:46.013 --> 00:30:48.515 align:middle
你要确保自己时刻在做的
一件事是

00:30:48.582 --> 00:30:51.451 align:middle
就像我们在演示中看到的
那样 使用格式化程序

00:30:51.752 --> 00:30:53.587 align:middle
对于阿拉伯语来说
这尤其重要

00:30:53.654 --> 00:30:55.956 align:middle
因为不同的说阿拉伯语的
国家 对于一年中的

00:30:56.023 --> 00:30:59.259 align:middle
月份
使用的是不同的单词

00:30:59.493 --> 00:31:01.628 align:middle
你需要确保正确
向你的全部用户

00:30:59.493 --> 00:31:01.628 align:middle
你需要确保正确
向你的全部用户

00:31:01.695 --> 00:31:03.463 align:middle
显示这些
不论他们是在哪个地区、

00:31:03.530 --> 00:31:05.432 align:middle
哪个国家用

00:31:05.499 --> 00:31:06.800 align:middle
事实上 明天有场

00:31:06.867 --> 00:31:09.102 align:middle
“国际化中有什么新料”
演讲

00:31:09.169 --> 00:31:11.939 align:middle
就在一大早、上午九点
他们会讲一下所有现有的

00:31:12.005 --> 00:31:14.775 align:middle
格式化程序
以及iOS 9上可用的一些

00:31:14.842 --> 00:31:17.211 align:middle
新
格式化程序API

00:31:18.679 --> 00:31:21.114 align:middle
但是 你还是需要确保
如果对于手势识别器

00:31:21.348 --> 00:31:24.451 align:middle
你有某种布局或者逻辑分支
就像我们看到的

00:31:24.518 --> 00:31:27.588 align:middle
那样
那么你绝不应该用NSLocale、

00:31:27.654 --> 00:31:30.657 align:middle
NSbundle或者NSForma
tter来进行确认

00:31:31.792 --> 00:31:33.594 align:middle
你可能看到过
这样的代码

00:31:33.660 --> 00:31:36.496 align:middle
你想要知道自己是否运行在从右到左的
本地化中

00:31:36.563 --> 00:31:38.999 align:middle
你查找下首选语言
选择最上面的那种语言

00:31:39.066 --> 00:31:41.635 align:middle
看看它的书写方向是不是
从右到左 然后就搞定了！

00:31:42.736 --> 00:31:44.571 align:middle
你绝对不应该
这样做

00:31:45.138 --> 00:31:47.374 align:middle
这样很容易
搞砸

00:31:48.141 --> 00:31:50.244 align:middle
你不会想
这样做的

00:31:50.310 --> 00:31:52.913 align:middle
如果你想知道自己的app是否运行在
从右到左的语境中

00:31:53.580 --> 00:31:56.316 align:middle
你应该使用我们在这个
演示中看到的这个新API

00:31:56.717 --> 00:31:59.253 align:middle
语义内容属性
用户界面布局方向

00:31:59.820 --> 00:32:02.456 align:middle
进入你感兴趣的
视图的语义内容属性

00:31:59.820 --> 00:32:02.456 align:middle
进入你感兴趣的
视图的语义内容属性

00:32:02.523 --> 00:32:05.826 align:middle
看看
它是怎样布局的

00:32:05.893 --> 00:32:09.563 align:middle
这样你就知道了UI布局的方向
是从左到右

00:32:09.630 --> 00:32:10.564 align:middle
还是从右到左

00:32:11.131 --> 00:32:14.067 align:middle
当然了 与此相反的是
你不能把它用于

00:32:14.134 --> 00:32:15.936 align:middle
区域设置、格式设置

00:32:16.870 --> 00:32:20.274 align:middle
这里有一个实例
在某种程度上和上一个

00:32:20.340 --> 00:32:22.476 align:middle
幻灯片的意图一样
不过这个实例是正确的

00:32:22.543 --> 00:32:24.611 align:middle
我们得到了
视图的语义属性

00:32:25.179 --> 00:32:27.814 align:middle
我们请求布局方向
如果正好是从右到左

00:32:27.881 --> 00:32:30.517 align:middle
也许
我们就可以采用定制逻辑

00:32:31.919 --> 00:32:34.121 align:middle
处理文本时
大多数情况下

00:32:34.188 --> 00:32:36.657 align:middle
你需要让对齐和定向性
保持

00:32:36.723 --> 00:32:38.559 align:middle
它们的
默认值

00:32:39.059 --> 00:32:42.496 align:middle
这是iOS 9上的新变动
现在默认就是自然对齐

00:32:42.563 --> 00:32:44.831 align:middle
因此你不需要动
从左到右的语言中的

00:32:44.898 --> 00:32:47.334 align:middle
左对齐文本
不需要动从右到左的语言中的

00:32:47.401 --> 00:32:49.036 align:middle
右对齐
文本

00:32:50.103 --> 00:32:52.573 align:middle
类似地
你绝不应该去动基本

00:32:52.639 --> 00:32:55.642 align:middle
书写方向 除非你是在文本编辑器中
进行书写

00:32:56.009 --> 00:32:57.678 align:middle
自从iOS 7后
默认就是这样了

00:32:57.978 --> 00:33:01.248 align:middle
可能对99%的应用程序来说
你都绝不应该

00:32:57.978 --> 00:33:01.248 align:middle
可能对99%的应用程序来说
你都绝不应该

00:33:01.315 --> 00:33:03.584 align:middle
去碰这个值、
改变默认值

00:33:04.518 --> 00:33:09.056 align:middle
此外 你也不应该把这些
用于布局代码分支

00:33:09.122 --> 00:33:11.758 align:middle
而应该用我们在上一个
幻灯片中看到的API

00:33:13.627 --> 00:33:17.130 align:middle
最后 我要谈谈图像
对于从右到左的布局方向

00:33:17.197 --> 00:33:20.501 align:middle
来说 我们有了新API和UI图像
叫做imageflipped

00:33:21.134 --> 00:33:23.670 align:middle
它的功能是：
当你处于从右到左的语境时

00:33:23.737 --> 00:33:27.007 align:middle
它会自动为你
水平翻转图片 因此图片在

00:33:27.074 --> 00:33:30.010 align:middle
从右到左布局方向中会翻转
在从左到右的布局中则不变

00:33:30.077 --> 00:33:32.079 align:middle
然后在从右到左布局方向中
翻转过来

00:33:32.613 --> 00:33:34.548 align:middle
这是基于包含图片的
图片视图的

00:33:34.615 --> 00:33:36.617 align:middle
语义
内容属性

00:33:37.050 --> 00:33:40.120 align:middle
一般来说
你只有在定向图片或者

00:33:40.187 --> 00:33:43.891 align:middle
表达某种UI上
才会用它

00:33:44.091 --> 00:33:46.493 align:middle
这样说从右到左的语言的
用户

00:33:46.560 --> 00:33:48.662 align:middle
才不会看到自己的照片
成了镜中的照片

00:33:48.762 --> 00:33:52.399 align:middle
如果你在自己的应用程序中
看到错误或者V形图案

00:33:52.466 --> 00:33:55.135 align:middle
举例来说 就像我们在
Safari工具栏看到的

00:33:55.202 --> 00:33:57.571 align:middle
后退按钮、前进按钮
你需要确保它们会翻转过来

00:33:57.838 --> 00:33:58.972 align:middle
因为所有的

00:33:59.039 --> 00:34:02.809 align:middle
定向性概念都已经
从右翻转到了左

00:33:59.039 --> 00:34:02.809 align:middle
定向性概念都已经
从右翻转到了左

00:34:02.976 --> 00:34:05.812 align:middle
类似地 如果你有某种代表
UI的图标

00:34:07.014 --> 00:34:10.083 align:middle
举例来说 一个列表
在新的地图app的

00:34:10.150 --> 00:34:13.219 align:middle
通行功能中
我们有这个图标

00:34:13.286 --> 00:34:16.123 align:middle
让你可以看到操作步骤
因为它在某种程度上

00:34:16.190 --> 00:34:18.625 align:middle
代表了表格视图
在表格视图中

00:34:18.692 --> 00:34:19.893 align:middle
图标位于右侧

00:34:19.960 --> 00:34:21.562 align:middle
你可以看到
图标已经翻转过来了

00:34:22.196 --> 00:34:24.398 align:middle
更微妙的是
我们也把方向指南中的

00:34:24.598 --> 00:34:26.867 align:middle
人物翻转过来了
因为如果我们不这么做

00:34:26.934 --> 00:34:29.036 align:middle
那么人物看起来就像是在
脱离屏幕边缘

00:34:29.101 --> 00:34:31.572 align:middle
那么就和其它的布局
不怎么相符了

00:34:32.206 --> 00:34:35.842 align:middle
我想再把阿尔坦请回来
请她给你们

00:34:35.909 --> 00:34:37.210 align:middle
快速
做个演示

00:34:44.051 --> 00:34:46.719 align:middle
<br/>
最后一个演示了 我保证

00:34:55.495 --> 00:34:56.929 align:middle
好的

00:34:57.231 --> 00:34:58.699 align:middle
很棒

00:34:58.799 --> 00:35:02.336 align:middle
我刚刚学到了很多
关于我们添加的这个新的、

00:34:58.799 --> 00:35:02.336 align:middle
我刚刚学到了很多
关于我们添加的这个新的、

00:35:02.402 --> 00:35:05.005 align:middle
很酷的新API的知识
我决定把我的定制表格视图

00:35:05.072 --> 00:35:08.008 align:middle
单元中的定制推向
新高度

00:35:08.375 --> 00:35:12.779 align:middle
添加一个定制V形图案
实际上 它是一个披萨片

00:35:13.680 --> 00:35:18.652 align:middle
这个披萨片将会
引导我们的用户到

00:35:18.719 --> 00:35:19.720 align:middle
下个画面

00:35:20.220 --> 00:35:23.123 align:middle
既然我们现在都已经熟悉了
从右到左

00:35:23.190 --> 00:35:26.126 align:middle
那么我们就直接在阿拉伯语中
运行我们的app

00:35:26.760 --> 00:35:29.129 align:middle
就不再向你们展示它在
英语中是什么样了

00:35:29.196 --> 00:35:31.732 align:middle
因为我们已经过了那个阶段

00:35:34.334 --> 00:35:38.405 align:middle
太好了 因为我用了自动布局
和前后限制

00:35:38.472 --> 00:35:40.541 align:middle
把披萨片放到了那个
图片视图

00:35:40.807 --> 00:35:42.442 align:middle
它的位置就是
正确的了

00:35:42.509 --> 00:35:45.279 align:middle
它位于单元左侧上方
和从右到左的用户

00:35:45.345 --> 00:35:46.313 align:middle
期待的一模一样

00:35:46.647 --> 00:35:51.485 align:middle
然后 很明显你可以看到
披萨片指的方向是错误的

00:35:52.085 --> 00:35:54.755 align:middle
保罗之前谈到的
正是这种

00:35:54.821 --> 00:35:56.323 align:middle
定向
图片

00:35:56.590 --> 00:35:58.592 align:middle
我们就可以使用
图片翻转API

00:35:58.692 --> 00:36:00.127 align:middle
来进行纠正

00:35:58.692 --> 00:36:00.127 align:middle
来进行纠正

00:36:00.861 --> 00:36:03.764 align:middle
让我们回到那个图表视图
单元子类

00:36:05.432 --> 00:36:07.501 align:middle
这里你可以看到
我的所有的[不知所云]方法

00:36:07.568 --> 00:36:11.371 align:middle
这些所有的出口
我的所有出口都会加载

00:36:12.039 --> 00:36:14.341 align:middle
并且准备就绪
那么我要做的第一件事

00:36:14.408 --> 00:36:17.277 align:middle
给我的定制V形图案图片
获取一个基准

00:36:18.345 --> 00:36:21.582 align:middle
customChevronImag
eView.image

00:36:21.648 --> 00:36:25.285 align:middle
既然我已经有了
我要把它放回到

00:36:25.352 --> 00:36:30.123 align:middle
图片视图
但是做了一个小的变更

00:36:30.190 --> 00:36:32.125 align:middle
我要在UI图片上
为从右到左的布局

00:36:32.192 --> 00:36:33.894 align:middle
方向方法
调用

00:36:33.961 --> 00:36:35.362 align:middle
图片翻转

00:36:36.396 --> 00:36:38.365 align:middle
这会让你的图片在
从左到右的本地化中

00:36:38.432 --> 00:36:41.902 align:middle
不受
影响

00:36:42.269 --> 00:36:45.205 align:middle
但是在从右到左的本地化中
会水平翻转

00:36:45.272 --> 00:36:46.607 align:middle
在这里
重点要记住的是

00:36:46.907 --> 00:36:50.744 align:middle
因为这种方法已经替你
弄好了

00:36:50.811 --> 00:36:53.747 align:middle
你就不需要担心对它进行
集成了 它是从左到右

00:36:53.814 --> 00:36:57.217 align:middle
还是从右到左？
校验下 就像我之前那样

00:36:57.651 --> 00:36:59.753 align:middle
在任何本地化中
你都可以信心十足地

00:36:59.820 --> 00:37:01.522 align:middle
调用这种方法
然后你可以确信

00:36:59.820 --> 00:37:01.522 align:middle
调用这种方法
然后你可以确信

00:37:01.588 --> 00:37:02.656 align:middle
它是不会出错的

00:37:03.657 --> 00:37:05.158 align:middle
就这样
需要我们做的就这些

00:37:05.225 --> 00:37:07.594 align:middle
做完了这个变更
我们再来运行一次app

00:37:10.831 --> 00:37:11.899 align:middle
完美的比萨饼

00:37:12.165 --> 00:37:14.601 align:middle
我们的V形图案
翻转过来了

00:37:15.035 --> 00:37:15.802 align:middle
谢谢

00:37:18.338 --> 00:37:21.341 align:middle
我们的V形图案翻转过来了
我们的app看上去也很棒

00:37:21.408 --> 00:37:24.444 align:middle
我们有了翻译
定制手势看上去也很漂亮

00:37:24.511 --> 00:37:25.712 align:middle
我们就准备就绪了

00:37:25.779 --> 00:37:28.782 align:middle
把你的app本地化为从右到左
就是这么简单

00:37:29.116 --> 00:37:32.653 align:middle
萨拉该你了
给大家讲完这次会议

00:37:37.691 --> 00:37:39.726 align:middle
谢谢你萨拉
演示很棒

00:37:39.927 --> 00:37:42.229 align:middle
我们很快会把萨拉今天给我们
做的演示

00:37:42.296 --> 00:37:45.265 align:middle
更新到
网上

00:37:45.332 --> 00:37:47.734 align:middle
如果你漏掉了会议的某些内容
你可以

00:37:47.801 --> 00:37:50.103 align:middle
下载这个简单的代码
然后看看它

00:37:50.804 --> 00:37:56.310 align:middle
会议结束之前
我来总结一下

00:37:56.376 --> 00:37:58.712 align:middle
当你为从右到左的语言
设计你的app时

00:37:58.779 --> 00:38:02.249 align:middle
这些语言的母语用户
期待UI也是从右到左

00:37:58.779 --> 00:38:02.249 align:middle
这些语言的母语用户
期待UI也是从右到左

00:38:02.316 --> 00:38:04.651 align:middle
有了我们添加到iOS 9上的
新原生UIKit支持

00:38:04.718 --> 00:38:08.055 align:middle
这就是一个
绝佳的机遇

00:38:08.555 --> 00:38:11.525 align:middle
对你来说 就是添加
这个本地化的好机会

00:38:11.592 --> 00:38:16.163 align:middle
不费吹灰之力
我们还添加了新API

00:38:16.296 --> 00:38:20.968 align:middle
对于不说母语的开发者
以及说母语的开发者来说

00:38:21.034 --> 00:38:22.970 align:middle
都会
非常简单

00:38:23.570 --> 00:38:26.340 align:middle
你也可以借此接触到
数以百万计的

00:38:26.406 --> 00:38:27.875 align:middle
新用户、新市场

00:38:29.610 --> 00:38:34.081 align:middle
要获取更多信息
请访问我们的资料网站

00:38:34.147 --> 00:38:37.551 align:middle
网址是developer.Apple.com
我们有国际化资料

00:38:37.618 --> 00:38:39.753 align:middle
还有本地化
资料

00:38:40.020 --> 00:38:42.856 align:middle
如果你有问题
你可以把它们贴到开发者论坛

00:38:43.790 --> 00:38:46.927 align:middle
我们也建议你们参加
那些相关的会议

00:38:46.994 --> 00:38:49.696 align:middle
我强烈推荐明天上午9 00的
“国际化中有什么新料”

00:38:49.763 --> 00:38:52.332 align:middle
再次
谢谢你们

00:38:52.399 --> 00:38:54.601 align:middle
谢谢你们来参会
祝你们下午过得愉快！

00:38:54.668 --> 00:38:56.703 align:middle
谢谢！
