WEBVTT

00:00:06.516 --> 00:00:16.500 A:middle
[ Music ]

00:00:22.516 --> 00:00:30.756 A:middle
[ Applause ]

00:00:31.256 --> 00:00:33.646 A:middle
&gt;&gt; Good afternoon.

00:00:34.516 --> 00:00:35.556 A:middle
My name is Shane.

00:00:35.956 --> 00:00:37.156 A:middle
I'm with the Darwin Runtime

00:00:37.156 --> 00:00:37.476 A:middle
team.

00:00:37.756 --> 00:00:39.146 A:middle
And I'd like to welcome you to

00:00:39.146 --> 00:00:40.856 A:middle
measuring performance using

00:00:40.856 --> 00:00:41.226 A:middle
logging.

00:00:42.616 --> 00:00:44.676 A:middle
So we heard a lot about

00:00:44.766 --> 00:00:46.086 A:middle
performance on Monday.

00:00:46.706 --> 00:00:47.696 A:middle
Performance is one of those

00:00:47.696 --> 00:00:49.526 A:middle
things that's key to a great

00:00:49.526 --> 00:00:50.516 A:middle
user experience.

00:00:50.936 --> 00:00:52.816 A:middle
People love it when their games

00:00:52.906 --> 00:00:54.176 A:middle
and their apps are fast,

00:00:54.936 --> 00:00:56.126 A:middle
dynamic, and responsive.

00:00:57.416 --> 00:01:02.066 A:middle
But software is complex so that


00:00:57.416 --> 00:01:02.066 A:middle
But software is complex so that

00:01:02.066 --> 00:01:04.036 A:middle
means that when your app is

00:01:04.036 --> 00:01:04.916 A:middle
trying to do something,

00:01:05.036 --> 00:01:06.596 A:middle
sometimes a ton of things can be

00:01:06.596 --> 00:01:09.876 A:middle
going on and that means you can

00:01:09.876 --> 00:01:11.486 A:middle
find some performance wins in

00:01:11.486 --> 00:01:12.746 A:middle
some pretty unlikely places.

00:01:13.716 --> 00:01:16.106 A:middle
But doing so, unearthing those

00:01:16.106 --> 00:01:18.066 A:middle
of performance wins requires an

00:01:18.136 --> 00:01:20.076 A:middle
understanding, sometimes a deep

00:01:20.076 --> 00:01:21.616 A:middle
understanding of what it is your

00:01:21.616 --> 00:01:22.416 A:middle
program is doing.

00:01:23.046 --> 00:01:24.746 A:middle
It requires you to know when

00:01:24.746 --> 00:01:26.376 A:middle
your code is executing exactly,

00:01:26.506 --> 00:01:28.126 A:middle
how long a particular operation

00:01:28.126 --> 00:01:28.696 A:middle
is taking.

00:01:29.546 --> 00:01:31.256 A:middle
So this is one place where a

00:01:31.406 --> 00:01:33.226 A:middle
good tool can make a real

00:01:33.376 --> 00:01:33.706 A:middle
difference.

00:01:34.536 --> 00:01:36.146 A:middle
And we know that building better

00:01:36.146 --> 00:01:37.816 A:middle
tools, making them available to

00:01:37.816 --> 00:01:39.936 A:middle
you, is one of the ways that we

00:01:39.936 --> 00:01:41.136 A:middle
can help you be a more

00:01:41.136 --> 00:01:42.116 A:middle
productive developer.

00:01:42.776 --> 00:01:44.416 A:middle
So today I'm going to talk about

00:01:44.416 --> 00:01:45.236 A:middle
one of those tools.

00:01:45.636 --> 00:01:47.076 A:middle
Today, I'm going to talk about

00:01:47.406 --> 00:01:48.226 A:middle
signposts.

00:01:48.796 --> 00:01:50.796 A:middle
Signposts are a new member of

00:01:50.796 --> 00:01:51.756 A:middle
the OSLog family.

00:01:52.696 --> 00:01:54.636 A:middle
And we're making them available

00:01:54.636 --> 00:01:56.296 A:middle
to you in macOS.

00:01:56.436 --> 00:01:57.436 A:middle
We're making them available to

00:01:57.436 --> 00:01:58.206 A:middle
you in iOs.

00:01:58.296 --> 00:01:59.866 A:middle
And you can use them in Swift


00:02:00.196 --> 00:02:02.596 A:middle
and in C, but the coolest thing

00:02:02.736 --> 00:02:04.236 A:middle
is we've integrated them with

00:02:04.426 --> 00:02:04.936 A:middle
Instruments.

00:02:05.466 --> 00:02:06.606 A:middle
So that means Instruments can

00:02:06.606 --> 00:02:07.766 A:middle
take the data that signposts

00:02:07.766 --> 00:02:09.936 A:middle
produce and give you a deep

00:02:09.936 --> 00:02:11.356 A:middle
understanding of what it is your

00:02:11.356 --> 00:02:12.136 A:middle
program is doing.

00:02:13.496 --> 00:02:15.476 A:middle
So first a little history.

00:02:16.556 --> 00:02:18.396 A:middle
We introduced OSLog a couple of

00:02:18.396 --> 00:02:18.926 A:middle
years ago.

00:02:19.696 --> 00:02:21.826 A:middle
It's our modern take on a

00:02:21.826 --> 00:02:22.746 A:middle
logging facility.

00:02:23.006 --> 00:02:23.986 A:middle
It's our way of getting

00:02:24.186 --> 00:02:25.596 A:middle
debugging information out of the

00:02:25.596 --> 00:02:26.076 A:middle
system.

00:02:26.456 --> 00:02:29.186 A:middle
And it was built with our goals

00:02:29.356 --> 00:02:31.316 A:middle
of efficiency and privacy in

00:02:31.316 --> 00:02:31.586 A:middle
mind.

00:02:32.696 --> 00:02:34.146 A:middle
Here you can see an example of

00:02:34.146 --> 00:02:35.796 A:middle
OSLog code where I've just

00:02:35.796 --> 00:02:37.256 A:middle
created a simple log handle and

00:02:37.256 --> 00:02:39.566 A:middle
posted a hello world to it.

00:02:40.326 --> 00:02:43.016 A:middle
Signposts extend the OSLog API,

00:02:43.796 --> 00:02:44.536 A:middle
but they do it for the

00:02:44.536 --> 00:02:45.576 A:middle
performance use case.

00:02:45.816 --> 00:02:46.486 A:middle
And that means they are

00:02:46.486 --> 00:02:48.156 A:middle
conveying performance related

00:02:48.156 --> 00:02:49.676 A:middle
information, and they're

00:02:49.756 --> 00:02:51.026 A:middle
integrated with our developer

00:02:51.026 --> 00:02:52.846 A:middle
tools and that means you can

00:02:52.936 --> 00:02:53.876 A:middle
annotate your code with

00:02:53.876 --> 00:02:55.486 A:middle
signposts and then pull up

00:02:55.486 --> 00:02:56.546 A:middle
Instruments and see something

00:02:56.546 --> 00:02:57.176 A:middle
like this.

00:02:58.526 --> 00:02:59.866 A:middle
So Instruments is showing you


00:03:00.406 --> 00:03:02.266 A:middle
this beautiful visualization of

00:03:02.266 --> 00:03:03.736 A:middle
a timeline of what your program

00:03:03.736 --> 00:03:04.906 A:middle
is doing and the signpost

00:03:04.906 --> 00:03:05.596 A:middle
activity there.

00:03:06.046 --> 00:03:07.186 A:middle
And then on the bottom there's

00:03:07.186 --> 00:03:09.486 A:middle
that table with statistical

00:03:09.546 --> 00:03:11.316 A:middle
aggregation and analysis of the

00:03:11.316 --> 00:03:13.216 A:middle
signpost data, slicing and

00:03:13.216 --> 00:03:15.056 A:middle
dicing to see what your

00:03:15.056 --> 00:03:16.706 A:middle
program's behavior is really

00:03:16.876 --> 00:03:17.126 A:middle
like.

00:03:18.506 --> 00:03:20.476 A:middle
In this session, I'll talk about

00:03:20.706 --> 00:03:21.986 A:middle
adopting signposts into your

00:03:21.986 --> 00:03:23.366 A:middle
code and show you some of what

00:03:23.366 --> 00:03:24.086 A:middle
they're capable of.

00:03:24.536 --> 00:03:25.226 A:middle
And then we're going to

00:03:25.226 --> 00:03:26.836 A:middle
demonstrate the new Instrument

00:03:26.836 --> 00:03:29.436 A:middle
signpost visualization to give

00:03:29.436 --> 00:03:31.296 A:middle
you an idea how signposts and

00:03:31.296 --> 00:03:33.976 A:middle
Instruments work together.

00:03:34.096 --> 00:03:34.736 A:middle
So let's start.

00:03:35.556 --> 00:03:37.856 A:middle
I'm going to start with a really

00:03:37.996 --> 00:03:38.946 A:middle
basic example.

00:03:39.766 --> 00:03:42.466 A:middle
Imagine that this is your app.

00:03:43.116 --> 00:03:44.586 A:middle
And what you're trying to

00:03:44.586 --> 00:03:46.836 A:middle
investigate is the amount of

00:03:46.896 --> 00:03:48.116 A:middle
time a particular part of the

00:03:48.116 --> 00:03:49.456 A:middle
interface takes to refresh.

00:03:49.966 --> 00:03:51.856 A:middle
And you know to do that you want

00:03:51.856 --> 00:03:53.566 A:middle
to load some images and put them

00:03:53.566 --> 00:03:54.176 A:middle
on the screen.

00:03:54.696 --> 00:03:57.576 A:middle
So once again, an abstract,

00:03:57.576 --> 00:03:59.086 A:middle
simple view of this app might be

00:03:59.086 --> 00:04:00.626 A:middle
that you're doing the work to


00:03:59.086 --> 00:04:00.626 A:middle
that you're doing the work to

00:04:00.626 --> 00:04:01.346 A:middle
grab an asset.

00:04:01.486 --> 00:04:02.456 A:middle
And after you've gotten them

00:04:02.456 --> 00:04:04.296 A:middle
all, the interface is refreshed.

00:04:05.436 --> 00:04:07.116 A:middle
What a signpost allows us to do

00:04:07.176 --> 00:04:09.466 A:middle
is to mark the beginning and the

00:04:09.466 --> 00:04:11.196 A:middle
end of a piece of work and then

00:04:11.196 --> 00:04:12.586 A:middle
associate those two points in

00:04:12.586 --> 00:04:14.046 A:middle
time, those two log events with

00:04:14.046 --> 00:04:14.476 A:middle
each other.

00:04:15.326 --> 00:04:18.086 A:middle
And they do it with an os

00:04:18.086 --> 00:04:19.106 A:middle
signpost function call.

00:04:19.305 --> 00:04:20.516 A:middle
There are two calls.

00:04:20.616 --> 00:04:22.806 A:middle
One with .begin and one with

00:04:23.016 --> 00:04:23.296 A:middle
.end.

00:04:23.726 --> 00:04:25.776 A:middle
Here I've represented the begin

00:04:25.776 --> 00:04:26.976 A:middle
with that arrow with the b

00:04:26.976 --> 00:04:27.526 A:middle
underneath it.

00:04:27.926 --> 00:04:29.446 A:middle
And I represented the end with

00:04:29.446 --> 00:04:31.626 A:middle
the arrow with the e under it.

00:04:31.626 --> 00:04:32.936 A:middle
And then we're going to relate

00:04:32.936 --> 00:04:34.126 A:middle
those two points to each other

00:04:34.126 --> 00:04:36.296 A:middle
to give you a sense of what the

00:04:36.366 --> 00:04:37.486 A:middle
elapsed time is for that

00:04:37.486 --> 00:04:37.736 A:middle
interval.

00:04:37.736 --> 00:04:39.276 A:middle
All right.

00:04:40.126 --> 00:04:42.246 A:middle
In code, there's this simple

00:04:42.246 --> 00:04:44.076 A:middle
implementation of that algorithm

00:04:44.556 --> 00:04:45.886 A:middle
where for each element in our

00:04:45.886 --> 00:04:47.236 A:middle
interface, we're going to fetch

00:04:47.236 --> 00:04:49.296 A:middle
that asset and that's the piece

00:04:49.296 --> 00:04:50.496 A:middle
of operation that we're

00:04:50.646 --> 00:04:51.506 A:middle
interested in measuring.

00:04:52.426 --> 00:04:53.786 A:middle
So to incorporate signpost into

00:04:53.786 --> 00:04:55.716 A:middle
this code base, we're going to

00:04:55.716 --> 00:04:57.396 A:middle
simply import the module

00:04:57.596 --> 00:04:58.986 A:middle
os.signpost that contains that

00:04:58.986 --> 00:04:59.636 A:middle
functionality.


00:05:00.506 --> 00:05:02.496 A:middle
And then because signposts are

00:05:02.496 --> 00:05:04.146 A:middle
part of the OSLog functionality,

00:05:04.586 --> 00:05:05.946 A:middle
we're going to create a log

00:05:05.946 --> 00:05:06.276 A:middle
handle.

00:05:06.796 --> 00:05:08.406 A:middle
Here, this log handle takes two

00:05:08.406 --> 00:05:09.746 A:middle
arguments, a subsystem and a

00:05:09.746 --> 00:05:10.296 A:middle
category.

00:05:11.216 --> 00:05:13.896 A:middle
The subsystem is just probably

00:05:13.896 --> 00:05:14.566 A:middle
the same throughout your

00:05:14.566 --> 00:05:15.096 A:middle
project.

00:05:15.516 --> 00:05:16.596 A:middle
It looks a lot like your bundle

00:05:16.596 --> 00:05:16.676 A:middle
ID.

00:05:16.676 --> 00:05:18.666 A:middle
And it represents the component

00:05:18.666 --> 00:05:19.996 A:middle
or the piece of software, maybe

00:05:19.996 --> 00:05:20.776 A:middle
the framework that you're

00:05:20.776 --> 00:05:21.246 A:middle
working on.

00:05:22.816 --> 00:05:24.726 A:middle
The category is used to relate

00:05:25.346 --> 00:05:27.266 A:middle
-- to group related operations

00:05:27.266 --> 00:05:28.586 A:middle
together or related signposts.

00:05:29.136 --> 00:05:30.236 A:middle
And you'll see why that could be

00:05:30.236 --> 00:05:33.096 A:middle
useful later in the session.

00:05:33.256 --> 00:05:34.596 A:middle
Once we have that log handle,

00:05:35.416 --> 00:05:36.316 A:middle
we're just going to make two

00:05:36.316 --> 00:05:37.516 A:middle
calls to os signpost.

00:05:37.826 --> 00:05:38.536 A:middle
One with .begin.

00:05:38.536 --> 00:05:39.036 A:middle
One with .end.

00:05:39.036 --> 00:05:41.486 A:middle
We're going to pass that log

00:05:41.486 --> 00:05:42.876 A:middle
handle into those calls.

00:05:42.876 --> 00:05:44.566 A:middle
And then for the third argument,

00:05:44.956 --> 00:05:46.686 A:middle
we have a signpost name.

00:05:47.826 --> 00:05:49.396 A:middle
The signpost name is a string

00:05:49.396 --> 00:05:51.156 A:middle
literal that identifies the

00:05:51.186 --> 00:05:52.996 A:middle
interval that identifies the

00:05:53.056 --> 00:05:54.246 A:middle
operation that we're interested

00:05:54.246 --> 00:05:54.676 A:middle
in measuring.

00:05:55.696 --> 00:05:57.326 A:middle
That string literal is used to

00:05:57.326 --> 00:05:59.346 A:middle
match up the begin point that

00:05:59.346 --> 00:06:00.806 A:middle
we've annotated or that gets


00:05:59.346 --> 00:06:00.806 A:middle
we've annotated or that gets

00:06:00.806 --> 00:06:02.756 A:middle
marked up with that os signpost

00:06:02.966 --> 00:06:04.606 A:middle
begin called and the end point.

00:06:05.026 --> 00:06:07.416 A:middle
So on our timeline, it just

00:06:07.416 --> 00:06:08.086 A:middle
looks like this.

00:06:08.086 --> 00:06:09.676 A:middle
At the beginning of each piece

00:06:09.676 --> 00:06:11.696 A:middle
of work, we've dropped an os

00:06:11.696 --> 00:06:12.246 A:middle
signpost.

00:06:12.366 --> 00:06:13.336 A:middle
At the end of each piece of

00:06:13.336 --> 00:06:14.306 A:middle
work, we've dropped an os

00:06:14.306 --> 00:06:14.776 A:middle
signpost.

00:06:15.086 --> 00:06:16.646 A:middle
And because those string

00:06:16.646 --> 00:06:17.756 A:middle
literals at the begin and end

00:06:17.756 --> 00:06:19.286 A:middle
call sites line up with each

00:06:19.286 --> 00:06:20.526 A:middle
other, we can match those two

00:06:20.526 --> 00:06:20.856 A:middle
together.

00:06:20.856 --> 00:06:23.266 A:middle
But what if we're interested in

00:06:23.266 --> 00:06:25.346 A:middle
also measuring the entire amount

00:06:25.346 --> 00:06:26.836 A:middle
of time the whole operation,

00:06:26.836 --> 00:06:27.866 A:middle
that whole refresh took?

00:06:28.526 --> 00:06:31.236 A:middle
Well, in our code, we're just

00:06:31.236 --> 00:06:32.966 A:middle
going to add another pair of os

00:06:32.966 --> 00:06:34.646 A:middle
signpost begin and end calls.

00:06:34.836 --> 00:06:35.346 A:middle
Pretty simple.

00:06:35.836 --> 00:06:37.196 A:middle
And this time I've given it a

00:06:37.306 --> 00:06:38.446 A:middle
different string literal, so a

00:06:38.556 --> 00:06:39.756 A:middle
different signpost name.

00:06:39.836 --> 00:06:41.616 A:middle
This time refresh panel to

00:06:41.616 --> 00:06:43.206 A:middle
indicate that this is a separate

00:06:43.206 --> 00:06:44.486 A:middle
interval, separate from the one

00:06:44.486 --> 00:06:45.166 A:middle
inside the loop.

00:06:47.236 --> 00:06:50.536 A:middle
In our timeline, we're just

00:06:50.536 --> 00:06:51.846 A:middle
marking two additional

00:06:51.846 --> 00:06:52.656 A:middle
signposts.

00:06:54.166 --> 00:06:55.606 A:middle
And that matching string literal

00:06:55.606 --> 00:06:57.296 A:middle
of refresh panel will let the

00:06:57.296 --> 00:06:58.426 A:middle
system know that those two

00:06:58.426 --> 00:07:01.156 A:middle
points are associated with each


00:06:58.426 --> 00:07:01.156 A:middle
points are associated with each

00:07:01.156 --> 00:07:01.326 A:middle
other.

00:07:02.846 --> 00:07:03.136 A:middle
All right.

00:07:03.926 --> 00:07:05.796 A:middle
It's not a super simple example.

00:07:06.226 --> 00:07:07.876 A:middle
If your program ever does step

00:07:07.906 --> 00:07:09.736 A:middle
one and then step two then step

00:07:09.736 --> 00:07:11.046 A:middle
three in a sequential fashion

00:07:11.166 --> 00:07:11.816 A:middle
then that would work.

00:07:12.256 --> 00:07:14.706 A:middle
But in our systems, often we

00:07:14.706 --> 00:07:16.026 A:middle
have a lot of work that happens

00:07:16.026 --> 00:07:16.686 A:middle
asynchronously.

00:07:17.146 --> 00:07:17.386 A:middle
Right.

00:07:17.796 --> 00:07:19.816 A:middle
So instead of having step one,

00:07:19.816 --> 00:07:21.066 A:middle
step two, step three, we're

00:07:21.066 --> 00:07:23.136 A:middle
often kicking things off in

00:07:23.136 --> 00:07:24.796 A:middle
sequence, right, and then

00:07:24.796 --> 00:07:25.956 A:middle
letting them complete later.

00:07:26.296 --> 00:07:27.106 A:middle
So that means that these

00:07:27.736 --> 00:07:28.766 A:middle
operations can happen

00:07:28.766 --> 00:07:29.346 A:middle
concurrently.

00:07:29.346 --> 00:07:30.086 A:middle
They can overlap.

00:07:31.226 --> 00:07:32.786 A:middle
In that case, we need to give

00:07:32.786 --> 00:07:34.046 A:middle
some additional piece of

00:07:34.046 --> 00:07:35.636 A:middle
information to the system in

00:07:35.636 --> 00:07:36.836 A:middle
order for it to tell those

00:07:36.836 --> 00:07:38.126 A:middle
signposts apart from each other.

00:07:39.156 --> 00:07:42.096 A:middle
And to do that, so far we've

00:07:42.096 --> 00:07:43.366 A:middle
only used that name.

00:07:43.716 --> 00:07:43.886 A:middle
Right.

00:07:43.886 --> 00:07:45.726 A:middle
That name will match up the end

00:07:45.726 --> 00:07:46.566 A:middle
and the beginning point.

00:07:47.276 --> 00:07:48.436 A:middle
So that string literal so far

00:07:48.436 --> 00:07:50.026 A:middle
has identified intervals, but it

00:07:50.026 --> 00:07:51.236 A:middle
hasn't given us a way to

00:07:51.236 --> 00:07:53.036 A:middle
discriminate between overlapping

00:07:53.036 --> 00:07:53.436 A:middle
intervals.

00:07:54.236 --> 00:07:55.346 A:middle
To do that, we're going to add

00:07:55.346 --> 00:07:56.606 A:middle
another piece of data to our

00:07:56.606 --> 00:07:58.516 A:middle
signpost calls called a signpost

00:07:58.516 --> 00:07:58.816 A:middle
ID.


00:08:00.256 --> 00:08:02.196 A:middle
The signpost ID will tell the

00:08:02.196 --> 00:08:04.076 A:middle
system that these are the same

00:08:04.076 --> 00:08:06.516 A:middle
kind of operation but each one

00:08:06.546 --> 00:08:07.586 A:middle
is different from each other.

00:08:08.366 --> 00:08:11.276 A:middle
So if two operations overlap but

00:08:11.276 --> 00:08:12.376 A:middle
they have different signpost

00:08:12.376 --> 00:08:13.446 A:middle
IDs, the system will know that

00:08:13.486 --> 00:08:14.686 A:middle
they're two different intervals.

00:08:15.096 --> 00:08:16.516 A:middle
As long as you pass the same

00:08:16.516 --> 00:08:18.046 A:middle
signpost ID at the begin call

00:08:18.046 --> 00:08:19.196 A:middle
site and the end call site,

00:08:19.626 --> 00:08:21.096 A:middle
those two signposts will be

00:08:21.316 --> 00:08:22.546 A:middle
associated with each other.

00:08:23.596 --> 00:08:25.936 A:middle
You can make signpost IDs with

00:08:25.936 --> 00:08:27.196 A:middle
this constructor here that takes

00:08:27.196 --> 00:08:29.666 A:middle
a log handle, but you can also

00:08:29.666 --> 00:08:31.736 A:middle
make them with an object.

00:08:32.606 --> 00:08:33.765 A:middle
This could be useful if you have

00:08:33.765 --> 00:08:35.226 A:middle
some object that represents the

00:08:35.226 --> 00:08:36.426 A:middle
work that you're trying to do

00:08:36.895 --> 00:08:38.515 A:middle
and the same signpost ID will be

00:08:38.515 --> 00:08:39.736 A:middle
generated as long as you use the

00:08:39.736 --> 00:08:41.456 A:middle
same instance of that object.

00:08:41.826 --> 00:08:42.756 A:middle
So this means you don't have to

00:08:42.806 --> 00:08:44.386 A:middle
carry or store the signpost ID

00:08:44.386 --> 00:08:44.876 A:middle
around.

00:08:44.876 --> 00:08:46.316 A:middle
You can just use the object

00:08:46.316 --> 00:08:46.756 A:middle
that's handy.

00:08:48.966 --> 00:08:51.646 A:middle
Visually, you can think of

00:08:51.646 --> 00:08:53.616 A:middle
signpost IDs as allowing us to

00:08:53.616 --> 00:08:55.086 A:middle
pass a little bit of extra

00:08:55.086 --> 00:08:56.926 A:middle
context to each signpost call

00:08:57.926 --> 00:09:00.576 A:middle
which can relate the begin and


00:08:57.926 --> 00:09:00.576 A:middle
which can relate the begin and

00:09:00.576 --> 00:09:01.776 A:middle
end markers for a particular

00:09:01.776 --> 00:09:03.036 A:middle
operation with each other.

00:09:03.716 --> 00:09:04.916 A:middle
And this is important because

00:09:04.916 --> 00:09:06.336 A:middle
not only can these operations

00:09:06.336 --> 00:09:08.116 A:middle
overlap, but they often take

00:09:08.186 --> 00:09:11.896 A:middle
differing amounts of time.

00:09:12.116 --> 00:09:14.236 A:middle
Let's see this in our code

00:09:14.236 --> 00:09:14.666 A:middle
example.

00:09:15.716 --> 00:09:16.466 A:middle
So here's our code.

00:09:16.466 --> 00:09:18.026 A:middle
I'm going to transform that

00:09:18.026 --> 00:09:20.066 A:middle
synchronous fetch async call in

00:09:20.066 --> 00:09:21.036 A:middle
to an asynchronous one.

00:09:21.946 --> 00:09:23.266 A:middle
So here I'm just going to give

00:09:23.396 --> 00:09:24.436 A:middle
it a completion handler.

00:09:24.436 --> 00:09:25.756 A:middle
This is a closure that will run

00:09:25.846 --> 00:09:26.846 A:middle
after the fetch asset is

00:09:26.846 --> 00:09:27.236 A:middle
complete.

00:09:28.446 --> 00:09:29.486 A:middle
And then I've also added a

00:09:29.486 --> 00:09:30.946 A:middle
closure, a completion handler

00:09:31.346 --> 00:09:33.236 A:middle
for running after all the assets

00:09:33.416 --> 00:09:34.076 A:middle
have been fetched.

00:09:35.006 --> 00:09:36.676 A:middle
In each case, I've moved that os

00:09:36.676 --> 00:09:38.266 A:middle
signpost end call inside of a

00:09:38.306 --> 00:09:40.426 A:middle
closure to indicate that that's

00:09:40.426 --> 00:09:42.256 A:middle
when I want that marked period

00:09:42.256 --> 00:09:42.916 A:middle
of time to end.

00:09:44.266 --> 00:09:44.526 A:middle
Okay.

00:09:45.796 --> 00:09:47.426 A:middle
So because we think that these

00:09:48.296 --> 00:09:49.616 A:middle
intervals will overlap with each

00:09:49.616 --> 00:09:51.046 A:middle
other, we're going to create new

00:09:51.076 --> 00:09:52.456 A:middle
signpost IDs for each of them.

00:09:52.876 --> 00:09:54.416 A:middle
Notice in the top example I've

00:09:54.606 --> 00:09:55.756 A:middle
created one with the constructor

00:09:55.756 --> 00:09:56.576 A:middle
taking a log handle.

00:09:56.686 --> 00:09:58.106 A:middle
And the second one, I've made

00:09:58.106 --> 00:09:59.776 A:middle
off that object that is being

00:09:59.776 --> 00:10:00.666 A:middle
worked on, the element.


00:09:59.776 --> 00:10:00.666 A:middle
worked on, the element.

00:10:01.116 --> 00:10:03.436 A:middle
And then I simply pass those

00:10:03.436 --> 00:10:06.226 A:middle
signpost IDs into the call sites

00:10:06.676 --> 00:10:07.126 A:middle
and we're done.

00:10:07.876 --> 00:10:10.706 A:middle
You can think of signpost as

00:10:10.706 --> 00:10:12.146 A:middle
being organized as a kind of

00:10:12.146 --> 00:10:13.846 A:middle
classification or hierarchy.

00:10:14.336 --> 00:10:14.566 A:middle
Right.

00:10:15.066 --> 00:10:16.616 A:middle
All these operations are related

00:10:16.616 --> 00:10:17.936 A:middle
together by the log handle

00:10:18.036 --> 00:10:19.396 A:middle
meaning that log category.

00:10:20.106 --> 00:10:21.456 A:middle
And then for each operation that

00:10:21.456 --> 00:10:22.706 A:middle
we're interested in, we've given

00:10:22.706 --> 00:10:23.616 A:middle
it a signpost name.

00:10:25.096 --> 00:10:26.786 A:middle
Then because those signposts

00:10:26.986 --> 00:10:28.256 A:middle
could overlap with each other,

00:10:28.256 --> 00:10:29.626 A:middle
we've given them that signpost

00:10:29.626 --> 00:10:32.016 A:middle
ID that tells the system that

00:10:32.016 --> 00:10:34.656 A:middle
that's a specific instance of

00:10:34.656 --> 00:10:35.136 A:middle
that interval.

00:10:36.596 --> 00:10:39.396 A:middle
This interface was built

00:10:39.666 --> 00:10:42.836 A:middle
specifically to be flexible so

00:10:42.836 --> 00:10:44.196 A:middle
you control all the arguments

00:10:44.196 --> 00:10:45.996 A:middle
into your begin site and your

00:10:45.996 --> 00:10:46.416 A:middle
end site.

00:10:46.416 --> 00:10:47.956 A:middle
You control that signpost name,

00:10:47.956 --> 00:10:49.466 A:middle
the log handle you give it, and

00:10:50.616 --> 00:10:51.036 A:middle
the ID.

00:10:51.036 --> 00:10:52.276 A:middle
We've done this because as long

00:10:52.276 --> 00:10:53.966 A:middle
as you can give the same

00:10:54.126 --> 00:10:55.656 A:middle
arguments at the begin site and

00:10:55.656 --> 00:10:57.406 A:middle
the end site, those two

00:10:57.406 --> 00:10:58.756 A:middle
signposts will get matched with

00:10:58.756 --> 00:10:59.126 A:middle
each other.

00:10:59.526 --> 00:11:00.576 A:middle
That means your begin and end


00:10:59.526 --> 00:11:00.576 A:middle
That means your begin and end

00:11:00.576 --> 00:11:01.586 A:middle
sites can be in separate

00:11:01.586 --> 00:11:02.096 A:middle
functions.

00:11:02.736 --> 00:11:03.816 A:middle
They can be associated with

00:11:03.816 --> 00:11:04.776 A:middle
separate objects.

00:11:04.816 --> 00:11:05.946 A:middle
They may even live in separate

00:11:05.946 --> 00:11:06.646 A:middle
source files.

00:11:07.356 --> 00:11:08.746 A:middle
We've done this because we want

00:11:08.746 --> 00:11:09.986 A:middle
you to be able to adopt it into

00:11:09.986 --> 00:11:10.556 A:middle
your code base.

00:11:10.856 --> 00:11:12.366 A:middle
And so whatever entry and exit

00:11:12.366 --> 00:11:14.576 A:middle
conventions you have, you can

00:11:14.626 --> 00:11:17.726 A:middle
use these calls.

00:11:17.876 --> 00:11:20.886 A:middle
So that's how to measure

00:11:20.886 --> 00:11:22.366 A:middle
intervals with signposts.

00:11:22.906 --> 00:11:24.516 A:middle
You may want to convey some

00:11:24.516 --> 00:11:25.716 A:middle
additional information, some

00:11:25.716 --> 00:11:26.916 A:middle
additional performance relevant

00:11:26.916 --> 00:11:27.926 A:middle
information along with your

00:11:27.926 --> 00:11:28.496 A:middle
signposts.

00:11:28.496 --> 00:11:30.396 A:middle
And for that, we have a way to

00:11:30.396 --> 00:11:32.306 A:middle
add metadata to signpost calls.

00:11:33.526 --> 00:11:35.486 A:middle
So here's your basic signpost

00:11:35.516 --> 00:11:35.796 A:middle
call.

00:11:36.106 --> 00:11:37.256 A:middle
To that, we can add an

00:11:37.256 --> 00:11:38.576 A:middle
additional string literal

00:11:38.576 --> 00:11:39.056 A:middle
parameter.

00:11:39.796 --> 00:11:40.846 A:middle
This allows you to add some

00:11:40.846 --> 00:11:42.626 A:middle
context to your begin and end

00:11:42.626 --> 00:11:43.316 A:middle
call sites.

00:11:44.366 --> 00:11:46.016 A:middle
Perhaps you have multiple begin

00:11:46.206 --> 00:11:47.896 A:middle
and exit points for a particular

00:11:47.896 --> 00:11:50.416 A:middle
operation, but the string

00:11:50.416 --> 00:11:52.476 A:middle
literal is also an OSLog format

00:11:52.476 --> 00:11:52.756 A:middle
string.

00:11:53.226 --> 00:11:54.756 A:middle
And that means I can use it to

00:11:54.756 --> 00:11:56.746 A:middle
pass additional data into the

00:11:56.746 --> 00:11:57.406 A:middle
signpost.

00:11:57.686 --> 00:11:59.226 A:middle
So here, for example, I've used

00:11:59.226 --> 00:12:01.096 A:middle
that %d to pass in four


00:11:59.226 --> 00:12:01.096 A:middle
that %d to pass in four

00:12:01.096 --> 00:12:01.556 A:middle
integers.

00:12:02.806 --> 00:12:04.846 A:middle
But because it's an OSLog format

00:12:04.846 --> 00:12:06.986 A:middle
string, I can also use it to

00:12:06.986 --> 00:12:08.316 A:middle
pass many arguments of different

00:12:08.316 --> 00:12:08.626 A:middle
types.

00:12:08.786 --> 00:12:09.766 A:middle
So here I've passed in some

00:12:09.766 --> 00:12:10.796 A:middle
floating-point numbers.

00:12:10.916 --> 00:12:12.266 A:middle
And I've even used the format

00:12:12.266 --> 00:12:14.726 A:middle
specifier to tell the system how

00:12:14.726 --> 00:12:15.736 A:middle
much precision I want.

00:12:16.246 --> 00:12:19.396 A:middle
You can pass dynamic strings in

00:12:19.396 --> 00:12:20.446 A:middle
with the string literal

00:12:20.446 --> 00:12:20.926 A:middle
formatter.

00:12:21.746 --> 00:12:23.086 A:middle
And that'll let us pass in

00:12:23.086 --> 00:12:24.186 A:middle
information that comes from a

00:12:24.186 --> 00:12:25.656 A:middle
function call or comes from a

00:12:25.656 --> 00:12:26.596 A:middle
user entered piece of

00:12:26.596 --> 00:12:27.186 A:middle
information.

00:12:28.046 --> 00:12:30.036 A:middle
And we reference that format

00:12:30.036 --> 00:12:31.756 A:middle
string literal with a fixed

00:12:31.756 --> 00:12:33.516 A:middle
amount of storage which means

00:12:33.516 --> 00:12:34.906 A:middle
that you can feel free to make

00:12:34.906 --> 00:12:36.746 A:middle
it as long and as human readable

00:12:36.746 --> 00:12:37.136 A:middle
as you like.

00:12:39.136 --> 00:12:41.356 A:middle
This human readable string is

00:12:41.356 --> 00:12:42.346 A:middle
the same one that will be

00:12:42.346 --> 00:12:43.656 A:middle
rendered up in the Instruments.

00:12:44.046 --> 00:12:45.246 A:middle
So you can feel free to give it

00:12:45.246 --> 00:12:45.986 A:middle
some context.

00:12:45.986 --> 00:12:47.106 A:middle
I've given it here for the

00:12:47.106 --> 00:12:48.006 A:middle
various arguments.

00:12:48.446 --> 00:12:49.866 A:middle
And Instruments will be able to

00:12:49.866 --> 00:12:51.146 A:middle
show that full rendered string,

00:12:51.576 --> 00:12:53.146 A:middle
or it still has programmatic

00:12:53.146 --> 00:12:54.806 A:middle
access to the data that's

00:12:55.296 --> 00:12:55.486 A:middle
attached.

00:12:57.756 --> 00:12:59.816 A:middle
In addition to metadata for

00:12:59.816 --> 00:13:01.226 A:middle
those intervals, you may want to


00:12:59.816 --> 00:13:01.226 A:middle
those intervals, you may want to

00:13:01.226 --> 00:13:03.496 A:middle
add individual points in time.

00:13:04.156 --> 00:13:06.236 A:middle
That is, in addition to the

00:13:06.236 --> 00:13:08.246 A:middle
begin signpost and the end

00:13:08.246 --> 00:13:09.356 A:middle
signpost, you may have a

00:13:09.356 --> 00:13:10.726 A:middle
signpost that's not tethered to

00:13:10.786 --> 00:13:12.646 A:middle
a particular time interval but

00:13:12.646 --> 00:13:14.406 A:middle
rather just some fixed moment.

00:13:14.636 --> 00:13:16.596 A:middle
And for that, we have an os

00:13:16.596 --> 00:13:17.946 A:middle
signpost with the event type.

00:13:18.886 --> 00:13:20.136 A:middle
The os signpost with the event

00:13:20.136 --> 00:13:21.926 A:middle
type call looks just like the

00:13:21.926 --> 00:13:23.676 A:middle
same as the begin and end, this

00:13:23.676 --> 00:13:24.966 A:middle
time with the event type.

00:13:25.706 --> 00:13:27.376 A:middle
And it marks a single point in

00:13:27.376 --> 00:13:27.706 A:middle
time.

00:13:28.656 --> 00:13:29.806 A:middle
You could use this within the

00:13:29.806 --> 00:13:32.186 A:middle
context of an interval or maybe

00:13:32.186 --> 00:13:33.266 A:middle
because you want to track

00:13:33.266 --> 00:13:34.506 A:middle
something that's independent of

00:13:34.506 --> 00:13:35.606 A:middle
an interval like a user

00:13:35.606 --> 00:13:36.176 A:middle
interaction.

00:13:36.966 --> 00:13:39.436 A:middle
So for that fetch asset interval

00:13:39.436 --> 00:13:41.066 A:middle
we're talking about, maybe you

00:13:41.066 --> 00:13:42.206 A:middle
want to know when you've

00:13:42.206 --> 00:13:43.556 A:middle
connected to the service that

00:13:43.596 --> 00:13:44.616 A:middle
provides that asset.

00:13:45.066 --> 00:13:45.906 A:middle
Or maybe you want to know when

00:13:45.906 --> 00:13:47.336 A:middle
you've received a few bytes of

00:13:47.336 --> 00:13:47.466 A:middle
it.

00:13:48.416 --> 00:13:49.636 A:middle
You can use this to update the

00:13:49.636 --> 00:13:51.056 A:middle
status or progress of a

00:13:51.056 --> 00:13:52.556 A:middle
particular interval many times

00:13:52.596 --> 00:13:54.706 A:middle
throughout that time of that

00:13:54.706 --> 00:13:54.986 A:middle
interval.

00:13:56.426 --> 00:13:58.416 A:middle
Or you might be tracking maybe a

00:13:58.416 --> 00:14:00.776 A:middle
triggering event like maybe a


00:13:58.416 --> 00:14:00.776 A:middle
triggering event like maybe a

00:14:00.776 --> 00:14:02.336 A:middle
user interface interaction like

00:14:02.336 --> 00:14:04.196 A:middle
somebody has just swiped to

00:14:04.196 --> 00:14:05.276 A:middle
update that interface.

00:14:05.816 --> 00:14:07.206 A:middle
Although, if you're really

00:14:07.206 --> 00:14:08.306 A:middle
investigating in a performance

00:14:08.336 --> 00:14:09.846 A:middle
problem, they might be swiping a

00:14:09.846 --> 00:14:11.916 A:middle
lot so this might be what you

00:14:11.916 --> 00:14:12.436 A:middle
see instead.

00:14:14.786 --> 00:14:17.136 A:middle
If you have signpost enabled,

00:14:17.636 --> 00:14:18.686 A:middle
they're usually on by default,

00:14:19.396 --> 00:14:20.366 A:middle
but I'd like to talk about

00:14:20.486 --> 00:14:21.786 A:middle
conditionally turning them on

00:14:21.836 --> 00:14:22.216 A:middle
and off.

00:14:23.986 --> 00:14:25.546 A:middle
First I'd like to emphasize that

00:14:25.546 --> 00:14:26.766 A:middle
we built signpost to be

00:14:26.906 --> 00:14:27.536 A:middle
lightweight.

00:14:28.066 --> 00:14:29.986 A:middle
That means we've done a lot of

00:14:29.986 --> 00:14:31.776 A:middle
work to optimize them at emit

00:14:31.896 --> 00:14:32.146 A:middle
time.

00:14:32.666 --> 00:14:33.376 A:middle
We've done this through some

00:14:33.376 --> 00:14:34.796 A:middle
compiler optimizations that make

00:14:34.796 --> 00:14:36.546 A:middle
sure that work is done in front

00:14:36.606 --> 00:14:37.436 A:middle
instead of runtime.

00:14:37.926 --> 00:14:39.416 A:middle
We've also deferred a lot of our

00:14:39.416 --> 00:14:40.796 A:middle
work so that they're done on the

00:14:40.796 --> 00:14:41.656 A:middle
Instruments backend.

00:14:41.946 --> 00:14:43.406 A:middle
And that means that while

00:14:43.406 --> 00:14:44.376 A:middle
signposts are being emitted,

00:14:44.376 --> 00:14:45.796 A:middle
they should take very few system

00:14:45.796 --> 00:14:46.416 A:middle
resources.

00:14:46.876 --> 00:14:47.896 A:middle
We've done this because we want

00:14:47.896 --> 00:14:49.456 A:middle
to minimize the impact to

00:14:49.456 --> 00:14:50.436 A:middle
whatever your code is running.

00:14:50.916 --> 00:14:52.096 A:middle
And we've also done it because

00:14:52.096 --> 00:14:53.236 A:middle
we want to make sure that even

00:14:53.236 --> 00:14:55.076 A:middle
if you have very small time

00:14:55.076 --> 00:14:56.946 A:middle
span, you can emit a lot of

00:14:56.946 --> 00:14:57.866 A:middle
signposts to get some

00:14:57.866 --> 00:14:58.976 A:middle
fine-grained measurements.


00:15:00.236 --> 00:15:01.566 A:middle
But you may want to be able to

00:15:01.566 --> 00:15:03.066 A:middle
turn your signposts off.

00:15:03.406 --> 00:15:05.186 A:middle
Maybe you want to eliminate as

00:15:05.186 --> 00:15:06.836 A:middle
much overhead as you can from a

00:15:06.836 --> 00:15:07.656 A:middle
particular code path.

00:15:08.176 --> 00:15:10.186 A:middle
Or you might have two categories

00:15:10.186 --> 00:15:11.386 A:middle
of signposts, both of which are

00:15:11.386 --> 00:15:13.126 A:middle
super-high volume and you really

00:15:13.126 --> 00:15:14.546 A:middle
are only interested in debugging

00:15:14.546 --> 00:15:16.016 A:middle
one or the other at a given

00:15:16.016 --> 00:15:17.096 A:middle
point in time.

00:15:17.876 --> 00:15:19.536 A:middle
Well, to do that we're going to

00:15:19.536 --> 00:15:20.806 A:middle
take advantage of a feature of

00:15:20.856 --> 00:15:23.266 A:middle
OSLog, the disabled log handle.

00:15:24.136 --> 00:15:25.896 A:middle
So the disabled log handle is a

00:15:26.386 --> 00:15:27.226 A:middle
simple handle.

00:15:27.276 --> 00:15:30.036 A:middle
And what it does is every OSLog

00:15:30.096 --> 00:15:31.846 A:middle
and os signpost call made

00:15:31.846 --> 00:15:33.766 A:middle
against that handle will just

00:15:33.766 --> 00:15:35.226 A:middle
turn into something very close

00:15:35.226 --> 00:15:35.736 A:middle
to a no-op.

00:15:36.556 --> 00:15:38.186 A:middle
In fact, if you adopt this in C,

00:15:38.466 --> 00:15:39.576 A:middle
we'll even do the check for you

00:15:39.626 --> 00:15:41.506 A:middle
in line and then we won't even

00:15:41.506 --> 00:15:42.346 A:middle
evaluate the rest of the

00:15:42.346 --> 00:15:42.856 A:middle
arguments.

00:15:43.546 --> 00:15:45.246 A:middle
So you can just change this

00:15:45.246 --> 00:15:46.156 A:middle
handle at runtime.

00:15:46.566 --> 00:15:47.746 A:middle
Let me show you an example.

00:15:48.426 --> 00:15:51.226 A:middle
So we're going to go back to the

00:15:51.226 --> 00:15:52.816 A:middle
very first example code that we

00:15:52.816 --> 00:15:53.146 A:middle
had.

00:15:53.146 --> 00:15:54.846 A:middle
And you see that initialization

00:15:54.846 --> 00:15:56.066 A:middle
of that log handle up top.

00:15:56.896 --> 00:15:59.066 A:middle
Well, instead I'm going to make

00:15:59.106 --> 00:16:00.596 A:middle
that initialization conditional.


00:15:59.106 --> 00:16:00.596 A:middle
that initialization conditional.

00:16:01.076 --> 00:16:02.866 A:middle
So I'm either going to assign it

00:16:02.976 --> 00:16:04.546 A:middle
to the normal os log constructor

00:16:05.066 --> 00:16:05.906 A:middle
or I'm going to assign it to

00:16:05.906 --> 00:16:07.196 A:middle
that disabled log handle.

00:16:07.776 --> 00:16:11.126 A:middle
If we take the first path, all

00:16:11.126 --> 00:16:12.776 A:middle
the os signpost calls will work

00:16:12.776 --> 00:16:14.546 A:middle
as I described, but if we take

00:16:14.546 --> 00:16:15.996 A:middle
the second path, those os

00:16:15.996 --> 00:16:17.256 A:middle
signpost calls will turn into

00:16:17.256 --> 00:16:18.026 A:middle
near no-ops.

00:16:18.876 --> 00:16:21.696 A:middle
So as I said before, notice that

00:16:21.696 --> 00:16:22.886 A:middle
I didn't have to call any of my

00:16:22.886 --> 00:16:24.196 A:middle
call -- I didn't have to change

00:16:24.196 --> 00:16:25.126 A:middle
any of my call sites.

00:16:25.126 --> 00:16:25.976 A:middle
I only had to change the

00:16:25.976 --> 00:16:26.756 A:middle
initialization.

00:16:27.566 --> 00:16:29.346 A:middle
And I made the initialization

00:16:29.346 --> 00:16:31.066 A:middle
conditional on an environment

00:16:31.066 --> 00:16:31.446 A:middle
variable.

00:16:31.696 --> 00:16:32.716 A:middle
This is the kind of thing that

00:16:32.716 --> 00:16:34.046 A:middle
you can set up in your Xcode

00:16:34.046 --> 00:16:35.136 A:middle
scheme while you're debugging

00:16:35.136 --> 00:16:37.236 A:middle
your program.

00:16:37.836 --> 00:16:39.126 A:middle
Now I said you didn't have to

00:16:39.126 --> 00:16:40.346 A:middle
change in the call sites, but

00:16:40.346 --> 00:16:41.326 A:middle
maybe you have some

00:16:41.326 --> 00:16:42.916 A:middle
functionality that is

00:16:43.036 --> 00:16:44.506 A:middle
instrumentation specific.

00:16:44.586 --> 00:16:46.346 A:middle
That is, it might be expensive

00:16:46.346 --> 00:16:47.586 A:middle
but it might only be used for

00:16:47.586 --> 00:16:48.086 A:middle
while debugging.

00:16:48.926 --> 00:16:50.976 A:middle
So in that case, you can check a

00:16:50.976 --> 00:16:52.486 A:middle
particular log handle to see if

00:16:52.486 --> 00:16:53.736 A:middle
signposts are turned on for it

00:16:54.076 --> 00:16:55.126 A:middle
with the signposts enabled

00:16:55.126 --> 00:16:55.536 A:middle
property.

00:16:56.036 --> 00:16:57.256 A:middle
The signposts enabled property

00:16:57.256 --> 00:16:58.656 A:middle
can then be used to gate that

00:16:58.656 --> 00:17:00.526 A:middle
additional operation.


00:16:58.656 --> 00:17:00.526 A:middle
additional operation.

00:17:02.586 --> 00:17:02.876 A:middle
Okay.

00:17:03.426 --> 00:17:05.076 A:middle
So all the examples that I've

00:17:05.076 --> 00:17:06.646 A:middle
shown so far have been in Swift,

00:17:07.356 --> 00:17:09.976 A:middle
but signposts are also available

00:17:10.695 --> 00:17:11.175 A:middle
in C.

00:17:13.086 --> 00:17:13.925 A:middle
All the functionality I've

00:17:13.955 --> 00:17:15.476 A:middle
talked about so far is

00:17:15.476 --> 00:17:17.266 A:middle
available: the long handles,

00:17:17.675 --> 00:17:18.665 A:middle
emitting the three different

00:17:18.665 --> 00:17:21.236 A:middle
kinds of signposts, and managing

00:17:21.236 --> 00:17:22.476 A:middle
your signpost identifiers.

00:17:23.066 --> 00:17:23.816 A:middle
For those of you who are

00:17:23.816 --> 00:17:25.726 A:middle
interested in adopting in C, I

00:17:25.726 --> 00:17:26.636 A:middle
encourage you to read the header

00:17:26.636 --> 00:17:26.876 A:middle
doc.

00:17:26.876 --> 00:17:28.086 A:middle
and header doc covers all this

00:17:28.086 --> 00:17:29.566 A:middle
information that I have but from

00:17:29.566 --> 00:17:30.896 A:middle
a C developer's perspective.

00:17:32.236 --> 00:17:32.806 A:middle
All right.

00:17:33.476 --> 00:17:34.876 A:middle
Now you've seen how to adopt

00:17:34.876 --> 00:17:35.866 A:middle
signposts in your code.

00:17:36.356 --> 00:17:38.006 A:middle
And maybe you have a mental

00:17:38.006 --> 00:17:39.386 A:middle
model of what they represent.

00:17:39.956 --> 00:17:41.436 A:middle
So I would love for you to see

00:17:41.436 --> 00:17:43.126 A:middle
how signposts work in concert

00:17:43.306 --> 00:17:43.926 A:middle
with Instruments.

00:17:44.486 --> 00:17:45.936 A:middle
And for that, I'm going to turn

00:17:45.936 --> 00:17:46.906 A:middle
it over for the rest of the

00:17:46.906 --> 00:17:48.416 A:middle
session to my colleague, Chad.

00:17:49.016 --> 00:17:49.276 A:middle
Thank you.

00:17:50.516 --> 00:17:56.796 A:middle
[ Applause ]

00:17:57.296 --> 00:17:57.926 A:middle
&gt;&gt; All right.

00:17:58.646 --> 00:17:59.246 A:middle
Thank you, Shane.


00:18:00.486 --> 00:18:02.606 A:middle
Now today I want to show you and

00:18:02.606 --> 00:18:04.036 A:middle
demonstrate for you three new

00:18:04.036 --> 00:18:05.016 A:middle
important features in

00:18:05.016 --> 00:18:06.776 A:middle
Instruments 10 to help you work

00:18:06.776 --> 00:18:07.616 A:middle
with signpost data.

00:18:08.506 --> 00:18:09.896 A:middle
The first is the new os signpost

00:18:09.896 --> 00:18:10.436 A:middle
instrument.

00:18:10.686 --> 00:18:11.656 A:middle
And that instrument allows you

00:18:11.656 --> 00:18:13.186 A:middle
to record, visualize, and

00:18:13.186 --> 00:18:14.986 A:middle
analyze all of the signpost

00:18:14.986 --> 00:18:16.736 A:middle
activity in your application.

00:18:17.636 --> 00:18:19.446 A:middle
The next feature is points of

00:18:19.446 --> 00:18:20.036 A:middle
interest.

00:18:20.036 --> 00:18:20.846 A:middle
I'll talk a little bit about

00:18:20.846 --> 00:18:22.316 A:middle
what points of interest are and

00:18:22.426 --> 00:18:23.946 A:middle
when you might want to emit one.

00:18:24.396 --> 00:18:26.026 A:middle
And then I'm also going to show

00:18:26.026 --> 00:18:27.636 A:middle
you the new custom instruments

00:18:27.636 --> 00:18:29.086 A:middle
feature and how you can use it

00:18:29.086 --> 00:18:31.946 A:middle
with os signposts to get a more,

00:18:32.286 --> 00:18:34.536 A:middle
I guess, refined presentation of

00:18:34.536 --> 00:18:35.386 A:middle
your signposts.

00:18:35.986 --> 00:18:37.616 A:middle
So let's take a look at that in

00:18:37.616 --> 00:18:38.346 A:middle
a demonstration.

00:18:39.116 --> 00:18:39.216 A:middle
Okay.

00:18:42.626 --> 00:18:44.526 A:middle
Now to start with, we're going

00:18:44.526 --> 00:18:46.206 A:middle
to take a look at our example

00:18:46.206 --> 00:18:47.106 A:middle
application first.

00:18:47.256 --> 00:18:48.386 A:middle
And that is our Trailblazer

00:18:48.386 --> 00:18:48.986 A:middle
application.

00:18:50.046 --> 00:18:53.016 A:middle
This app is -- shows you the

00:18:53.016 --> 00:18:54.056 A:middle
local hiking trails.

00:18:54.476 --> 00:18:56.626 A:middle
And it basically downloads these

00:18:56.656 --> 00:18:58.376 A:middle
beautiful images for you as we

00:18:58.376 --> 00:18:58.756 A:middle
scroll.

00:18:59.916 --> 00:19:01.476 A:middle
Now you'll notice that initially


00:18:59.916 --> 00:19:01.476 A:middle
Now you'll notice that initially

00:19:01.566 --> 00:19:03.216 A:middle
we have a white background and

00:19:03.216 --> 00:19:04.426 A:middle
then the image comes in later

00:19:04.426 --> 00:19:04.896 A:middle
and fills in.

00:19:04.896 --> 00:19:06.486 A:middle
And this is a pretty common

00:19:06.486 --> 00:19:08.296 A:middle
pattern in an application like

00:19:08.296 --> 00:19:08.536 A:middle
this.

00:19:08.536 --> 00:19:09.526 A:middle
And sometimes it's implemented

00:19:09.526 --> 00:19:12.466 A:middle
with a future or a promise but

00:19:12.466 --> 00:19:13.796 A:middle
this pattern -- as much as it

00:19:13.896 --> 00:19:15.746 A:middle
helps with performance, it's

00:19:15.746 --> 00:19:16.976 A:middle
also pretty difficult to

00:19:16.976 --> 00:19:17.496 A:middle
profile.

00:19:17.556 --> 00:19:19.176 A:middle
And the reason for that is

00:19:19.176 --> 00:19:19.896 A:middle
because there are a lot of

00:19:19.896 --> 00:19:21.226 A:middle
asynchronous activities going

00:19:21.226 --> 00:19:21.486 A:middle
on.

00:19:21.876 --> 00:19:23.796 A:middle
As the user scrolls, there are

00:19:23.796 --> 00:19:25.206 A:middle
downloads that are in-flight at

00:19:25.206 --> 00:19:25.996 A:middle
the same time.

00:19:25.996 --> 00:19:27.316 A:middle
And if the user scrolls really

00:19:27.316 --> 00:19:29.226 A:middle
quickly like this then the

00:19:29.226 --> 00:19:31.646 A:middle
download may not complete before

00:19:31.776 --> 00:19:33.066 A:middle
the image cell needs to be

00:19:33.066 --> 00:19:33.536 A:middle
reused.

00:19:34.066 --> 00:19:35.256 A:middle
And so then we have to cancel

00:19:35.256 --> 00:19:35.826 A:middle
that download.

00:19:36.076 --> 00:19:37.986 A:middle
If we fail to do that, then we

00:19:37.986 --> 00:19:40.236 A:middle
end up with several downloads

00:19:40.236 --> 00:19:41.326 A:middle
running in parallel that we

00:19:41.326 --> 00:19:42.276 A:middle
didn't really want.

00:19:42.936 --> 00:19:44.196 A:middle
So let's take a look at how we

00:19:44.196 --> 00:19:46.416 A:middle
can use signposts to analyze the

00:19:46.416 --> 00:19:47.866 A:middle
application of our Trailblazer.

00:19:48.546 --> 00:19:51.326 A:middle
Now inside the trail cell, we

00:19:51.326 --> 00:19:53.026 A:middle
have a method called

00:19:53.206 --> 00:19:54.956 A:middle
startImageDownload.

00:19:55.286 --> 00:19:56.486 A:middle
And this is invoked when we need

00:19:56.486 --> 00:19:58.736 A:middle
to download that new image, and

00:19:58.996 --> 00:20:00.726 A:middle
it's passed in the image name


00:19:58.996 --> 00:20:00.726 A:middle
it's passed in the image name

00:20:01.016 --> 00:20:01.856 A:middle
that should be downloaded.

00:20:02.506 --> 00:20:03.666 A:middle
Now we have a download helper

00:20:04.256 --> 00:20:05.896 A:middle
class here that we create an

00:20:05.896 --> 00:20:07.386 A:middle
instance of an pass in the name

00:20:07.386 --> 00:20:08.546 A:middle
and set ourself as the delegate

00:20:08.546 --> 00:20:09.626 A:middle
so it'll call us back when it's

00:20:09.656 --> 00:20:10.136 A:middle
downloaded.

00:20:10.136 --> 00:20:13.486 A:middle
And in this case, since the

00:20:13.486 --> 00:20:15.386 A:middle
downloader represents the

00:20:15.566 --> 00:20:16.816 A:middle
concurrent activity that's going

00:20:16.816 --> 00:20:19.016 A:middle
on, this asynchronous work, it's

00:20:19.016 --> 00:20:20.836 A:middle
a great basis for a signpost ID.

00:20:21.046 --> 00:20:22.046 A:middle
So we're going to create our

00:20:22.046 --> 00:20:24.656 A:middle
signpost ID using our downloader

00:20:24.756 --> 00:20:25.156 A:middle
object.

00:20:26.606 --> 00:20:27.746 A:middle
Now to start our signposts,

00:20:27.746 --> 00:20:28.926 A:middle
we're going to do an os signpost

00:20:28.926 --> 00:20:29.356 A:middle
begin.

00:20:29.656 --> 00:20:30.886 A:middle
And we're going to send it to

00:20:30.886 --> 00:20:32.836 A:middle
our networking log handle so

00:20:32.876 --> 00:20:34.606 A:middle
take a real quick look at our

00:20:34.606 --> 00:20:35.616 A:middle
networking log handle.

00:20:35.926 --> 00:20:37.516 A:middle
You see we're using our

00:20:37.516 --> 00:20:39.446 A:middle
Trailblazer bundle ID and a

00:20:39.446 --> 00:20:40.906 A:middle
category of networking.

00:20:41.606 --> 00:20:45.786 A:middle
Now we're going to pass an image

00:20:45.786 --> 00:20:47.896 A:middle
or, sorry, a signpost name of

00:20:47.896 --> 00:20:49.086 A:middle
background image so that way we

00:20:49.086 --> 00:20:50.216 A:middle
can see all of our background

00:20:50.216 --> 00:20:51.106 A:middle
image downloads.

00:20:51.106 --> 00:20:52.936 A:middle
And it will pass that signpost

00:20:52.936 --> 00:20:53.756 A:middle
ID that we created.

00:20:53.816 --> 00:20:56.356 A:middle
And we'll attach some metadata

00:20:56.356 --> 00:20:59.206 A:middle
to begin to convey the name of

00:20:59.206 --> 00:21:00.456 A:middle
the image that we are


00:20:59.206 --> 00:21:00.456 A:middle
the image that we are

00:21:00.606 --> 00:21:01.016 A:middle
downloading.

00:21:01.636 --> 00:21:02.476 A:middle
So then we'll start our

00:21:02.476 --> 00:21:04.556 A:middle
download, and we'll set our

00:21:04.796 --> 00:21:06.526 A:middle
property to track that.

00:21:06.526 --> 00:21:07.226 A:middle
We have it currently

00:21:07.366 --> 00:21:08.096 A:middle
runningDownloader.

00:21:09.196 --> 00:21:10.406 A:middle
Now when that finishes, we'll

00:21:10.406 --> 00:21:11.906 A:middle
get this didReceiveImage

00:21:11.986 --> 00:21:12.736 A:middle
callback here.

00:21:13.126 --> 00:21:15.266 A:middle
And we'll set our image view to

00:21:15.266 --> 00:21:16.266 A:middle
the image that we received.

00:21:17.376 --> 00:21:19.086 A:middle
And we'll call end on the

00:21:19.086 --> 00:21:19.686 A:middle
signpost.

00:21:19.926 --> 00:21:21.316 A:middle
And we'll use the exact same log

00:21:21.316 --> 00:21:23.266 A:middle
handle, the same name, the same

00:21:23.266 --> 00:21:25.666 A:middle
signpost ID but this time we're

00:21:25.666 --> 00:21:27.686 A:middle
going to attach some end

00:21:27.686 --> 00:21:29.286 A:middle
metadata to say finished with

00:21:29.286 --> 00:21:29.846 A:middle
size.

00:21:30.726 --> 00:21:32.686 A:middle
And you'll notice here that

00:21:33.296 --> 00:21:35.896 A:middle
we've annotated this particular

00:21:35.896 --> 00:21:37.526 A:middle
parameter with Xcode colon

00:21:37.526 --> 00:21:38.406 A:middle
size-in-bytes.

00:21:38.406 --> 00:21:40.056 A:middle
And what this does is it tells

00:21:40.336 --> 00:21:42.276 A:middle
Xcode and Instruments that this

00:21:42.276 --> 00:21:43.676 A:middle
argument should be treated as a

00:21:43.676 --> 00:21:45.566 A:middle
size-in-bytes for both display

00:21:45.716 --> 00:21:46.536 A:middle
and analysis.

00:21:47.756 --> 00:21:48.756 A:middle
Now these are called engineering

00:21:48.756 --> 00:21:49.166 A:middle
types.

00:21:49.166 --> 00:21:50.336 A:middle
And they can be read about in

00:21:50.336 --> 00:21:51.656 A:middle
the Instruments developer help

00:21:51.656 --> 00:21:52.986 A:middle
guide which is under the help

00:21:52.986 --> 00:21:54.206 A:middle
menu in Instruments.

00:21:54.956 --> 00:21:57.676 A:middle
Now once we've completed our

00:21:57.676 --> 00:21:59.026 A:middle
downloading, we can set that

00:21:59.026 --> 00:21:59.556 A:middle
back to nil.


00:22:00.106 --> 00:22:02.366 A:middle
Now there are two ways that we

00:22:02.366 --> 00:22:03.656 A:middle
can finish a download.

00:22:03.656 --> 00:22:05.766 A:middle
That was the success path.

00:22:06.036 --> 00:22:07.576 A:middle
And then we have to consider the

00:22:07.576 --> 00:22:08.206 A:middle
cancel path.

00:22:08.896 --> 00:22:11.176 A:middle
So in prepare for reuse, if we

00:22:11.176 --> 00:22:12.136 A:middle
currently have a running

00:22:12.136 --> 00:22:13.656 A:middle
downloader, we're going to need

00:22:13.716 --> 00:22:15.486 A:middle
to first cancel that downloader.

00:22:16.316 --> 00:22:17.406 A:middle
So in that case, we're going to

00:22:17.406 --> 00:22:18.916 A:middle
emit an end for the interval,

00:22:19.106 --> 00:22:20.936 A:middle
and we're going to use that same

00:22:21.306 --> 00:22:23.376 A:middle
logging handle, signpost name,

00:22:23.956 --> 00:22:24.766 A:middle
signpost ID.

00:22:25.296 --> 00:22:27.046 A:middle
And we're going to use cancelled

00:22:27.046 --> 00:22:29.456 A:middle
as the end metadata to separate

00:22:29.456 --> 00:22:30.496 A:middle
it from when we finish

00:22:30.496 --> 00:22:31.066 A:middle
successfully.

00:22:32.116 --> 00:22:33.606 A:middle
Now that's enough to actually do

00:22:33.606 --> 00:22:34.356 A:middle
some profiling.

00:22:34.356 --> 00:22:35.936 A:middle
So we're going to go over here

00:22:35.996 --> 00:22:38.146 A:middle
to a product profile.

00:22:38.146 --> 00:22:40.086 A:middle
And that will start up

00:22:40.086 --> 00:22:43.876 A:middle
Instruments once we've finished

00:22:43.916 --> 00:22:44.816 A:middle
building and installing.

00:22:44.816 --> 00:22:46.956 A:middle
That will start up Instruments

00:22:46.956 --> 00:22:47.146 A:middle
here.

00:22:47.266 --> 00:22:49.666 A:middle
And we can create a new blank

00:22:49.666 --> 00:22:50.156 A:middle
document.

00:22:50.536 --> 00:22:52.456 A:middle
Then we can go to the library,

00:22:52.546 --> 00:22:54.156 A:middle
and I can show you how to use

00:22:54.156 --> 00:22:56.126 A:middle
that new os signpost instrument.

00:22:56.646 --> 00:22:58.556 A:middle
So we have our new os signpost

00:22:58.556 --> 00:22:59.256 A:middle
instrument here.

00:22:59.386 --> 00:23:02.046 A:middle
And we'll just drag and drop


00:22:59.386 --> 00:23:02.046 A:middle
And we'll just drag and drop

00:23:02.046 --> 00:23:03.806 A:middle
that out into the trace.

00:23:04.186 --> 00:23:05.116 A:middle
We'll make a little bit of room

00:23:05.116 --> 00:23:07.176 A:middle
here for it and then we will

00:23:07.176 --> 00:23:08.376 A:middle
press record.

00:23:08.646 --> 00:23:12.226 A:middle
And I'll bring our iPhone back

00:23:12.396 --> 00:23:13.556 A:middle
up here to the beginning.

00:23:13.876 --> 00:23:14.066 A:middle
All right.

00:23:14.066 --> 00:23:15.076 A:middle
So now we'll do some scrolling

00:23:15.076 --> 00:23:16.226 A:middle
and then we'll also do some

00:23:16.226 --> 00:23:17.126 A:middle
really, really quick scrolling.

00:23:17.196 --> 00:23:19.816 A:middle
And then we'll let that settle

00:23:19.816 --> 00:23:20.116 A:middle
down.

00:23:20.576 --> 00:23:22.236 A:middle
Now we can go back to

00:23:22.236 --> 00:23:23.326 A:middle
Instruments and see what kind of

00:23:23.326 --> 00:23:24.096 A:middle
data we recorded.

00:23:24.796 --> 00:23:26.286 A:middle
So I'm going to stop the

00:23:26.286 --> 00:23:26.776 A:middle
recording.

00:23:27.636 --> 00:23:29.716 A:middle
And now you'll notice here that,

00:23:30.006 --> 00:23:31.406 A:middle
in the track view, we have a

00:23:31.406 --> 00:23:33.206 A:middle
visualization of all of our

00:23:33.206 --> 00:23:34.636 A:middle
background image intervals.

00:23:34.636 --> 00:23:35.706 A:middle
Now that's the signpost name.

00:23:35.996 --> 00:23:37.706 A:middle
Now if we hold down the option

00:23:37.706 --> 00:23:40.236 A:middle
key and we zoom in, you can see

00:23:40.646 --> 00:23:41.546 A:middle
there are intervals.

00:23:41.766 --> 00:23:43.946 A:middle
And intervals are annotated with

00:23:43.946 --> 00:23:45.846 A:middle
the start metadata and the end

00:23:45.846 --> 00:23:47.176 A:middle
metadata.

00:23:48.126 --> 00:23:50.106 A:middle
Now if we zoom back out and then

00:23:50.386 --> 00:23:52.066 A:middle
take a look at the trace here

00:23:52.066 --> 00:23:54.786 A:middle
again, we'll notice that we have

00:23:54.876 --> 00:23:57.546 A:middle
no more than five images that

00:23:57.546 --> 00:23:58.466 A:middle
are running downloads in

00:23:58.466 --> 00:23:59.546 A:middle
parallel, which is a good thing.


00:24:00.006 --> 00:24:01.296 A:middle
That means that our cancellation

00:24:01.296 --> 00:24:01.646 A:middle
worked.

00:24:01.646 --> 00:24:04.276 A:middle
And if we want to confirm that,

00:24:04.276 --> 00:24:05.346 A:middle
we can come in here and you can

00:24:05.346 --> 00:24:07.606 A:middle
see that a lot of these

00:24:07.606 --> 00:24:09.536 A:middle
intervals have metadata that

00:24:09.536 --> 00:24:11.346 A:middle
says that it was cancelled in

00:24:11.416 --> 00:24:11.936 A:middle
the download.

00:24:12.706 --> 00:24:14.506 A:middle
Now if you want to take -- if

00:24:14.506 --> 00:24:16.716 A:middle
you want to look at a numerical

00:24:17.076 --> 00:24:18.346 A:middle
-- or let's say you want to look

00:24:18.346 --> 00:24:19.586 A:middle
at the durations of these

00:24:19.586 --> 00:24:22.196 A:middle
intervals then you can come down

00:24:22.246 --> 00:24:23.166 A:middle
here to the summary of

00:24:23.166 --> 00:24:23.726 A:middle
intervals.

00:24:24.126 --> 00:24:26.726 A:middle
And we see a breakdown by

00:24:26.726 --> 00:24:28.886 A:middle
category and then by signpost

00:24:28.886 --> 00:24:30.616 A:middle
name and then by the start

00:24:30.616 --> 00:24:32.026 A:middle
message and then by the end

00:24:32.026 --> 00:24:32.456 A:middle
message.

00:24:33.386 --> 00:24:35.326 A:middle
So if we make this a little bit

00:24:35.326 --> 00:24:38.056 A:middle
smaller, you can see that we

00:24:38.056 --> 00:24:41.306 A:middle
made 93 image download requests.

00:24:42.236 --> 00:24:43.986 A:middle
Of those, 12 were for location

00:24:43.986 --> 00:24:44.236 A:middle
one.

00:24:45.426 --> 00:24:46.506 A:middle
Of those 12, seven were

00:24:46.506 --> 00:24:48.776 A:middle
cancelled and five finished with

00:24:48.806 --> 00:24:50.736 A:middle
a size of 3.31 megabytes.

00:24:52.006 --> 00:24:53.036 A:middle
Now if you look over here, these

00:24:53.036 --> 00:24:54.716 A:middle
are the statistics about our

00:24:54.716 --> 00:24:55.386 A:middle
durations.

00:24:55.776 --> 00:24:58.496 A:middle
And you can see that the minimum

00:24:58.736 --> 00:25:00.506 A:middle
and the average of the cancelled


00:24:58.736 --> 00:25:00.506 A:middle
and the average of the cancelled

00:25:01.106 --> 00:25:02.966 A:middle
intervals is significantly

00:25:02.966 --> 00:25:04.816 A:middle
smaller than when we finished

00:25:05.066 --> 00:25:06.056 A:middle
with the full downloads.

00:25:06.056 --> 00:25:07.086 A:middle
And that's exactly what you

00:25:07.086 --> 00:25:08.466 A:middle
would expect to see in this

00:25:08.466 --> 00:25:08.826 A:middle
pattern.

00:25:09.866 --> 00:25:11.086 A:middle
Now if you want to see all of

00:25:11.086 --> 00:25:12.926 A:middle
the cancelled events because

00:25:12.926 --> 00:25:13.966 A:middle
you're interested in seeing

00:25:13.966 --> 00:25:16.186 A:middle
those, you can put this -- focus

00:25:16.216 --> 00:25:19.586 A:middle
arrow and it will take you to a

00:25:19.586 --> 00:25:21.586 A:middle
list view where you can see all

00:25:21.586 --> 00:25:24.186 A:middle
the places where location one

00:25:24.186 --> 00:25:25.626 A:middle
had an end message of cancelled.

00:25:26.386 --> 00:25:28.156 A:middle
And as we go through this,

00:25:28.156 --> 00:25:29.146 A:middle
you'll see that the inspection

00:25:29.146 --> 00:25:30.636 A:middle
head on the top of the trace

00:25:31.016 --> 00:25:32.566 A:middle
will move forward to each one of

00:25:32.566 --> 00:25:33.206 A:middle
those intervals.

00:25:33.336 --> 00:25:35.066 A:middle
So you can track all the failure

00:25:35.066 --> 00:25:36.086 A:middle
cases if that's what you're

00:25:36.086 --> 00:25:36.556 A:middle
interested in.

00:25:36.666 --> 00:25:40.076 A:middle
Now that's a great way to view

00:25:40.316 --> 00:25:42.756 A:middle
the times of those intervals,

00:25:42.756 --> 00:25:44.096 A:middle
the timing of those intervals.

00:25:44.456 --> 00:25:46.926 A:middle
But what if you wanted to do an

00:25:46.926 --> 00:25:48.536 A:middle
analysis of the metadata?

00:25:49.316 --> 00:25:50.886 A:middle
What if you wanted to determine

00:25:51.046 --> 00:25:53.426 A:middle
how many bytes of image data

00:25:53.426 --> 00:25:54.406 A:middle
that we've downloaded over the

00:25:54.526 --> 00:25:54.916 A:middle
network?

00:25:55.696 --> 00:25:57.906 A:middle
Well, we've emitted metadata

00:25:57.906 --> 00:25:59.946 A:middle
messages like finished with size

00:25:59.996 --> 00:26:01.026 A:middle
and then the size.


00:25:59.996 --> 00:26:01.026 A:middle
and then the size.

00:26:01.026 --> 00:26:02.516 A:middle
It would be great if we could

00:26:02.576 --> 00:26:04.536 A:middle
total that argument up.

00:26:05.266 --> 00:26:06.546 A:middle
So if you want to do that, you

00:26:06.546 --> 00:26:07.256 A:middle
can come over here to the

00:26:07.256 --> 00:26:09.286 A:middle
summary of metadata statistics.

00:26:10.616 --> 00:26:11.696 A:middle
You can see that we have it

00:26:11.696 --> 00:26:13.276 A:middle
broken down by the subsystem,

00:26:13.826 --> 00:26:15.326 A:middle
the category, and then the

00:26:15.326 --> 00:26:17.076 A:middle
format string and then below the

00:26:17.076 --> 00:26:18.636 A:middle
format string, the arguments

00:26:18.636 --> 00:26:19.606 A:middle
within that format string.

00:26:19.816 --> 00:26:20.996 A:middle
And since our format string only

00:26:20.996 --> 00:26:22.926 A:middle
has one, that's simply arg0.

00:26:22.926 --> 00:26:26.216 A:middle
Now Instruments has totaled this

00:26:26.216 --> 00:26:26.416 A:middle
up.

00:26:26.416 --> 00:26:27.896 A:middle
And it knows that this is a

00:26:27.896 --> 00:26:28.776 A:middle
size-in-bytes.

00:26:28.776 --> 00:26:29.866 A:middle
And so it gives us a nice

00:26:29.866 --> 00:26:31.986 A:middle
calculation of 80 megabytes.

00:26:32.036 --> 00:26:33.626 A:middle
So we've downloaded 80 megabytes

00:26:33.656 --> 00:26:34.856 A:middle
of image data total.

00:26:35.046 --> 00:26:37.666 A:middle
Now you can see the different

00:26:37.666 --> 00:26:38.186 A:middle
columns here.

00:26:38.186 --> 00:26:39.196 A:middle
You've got it min, max, average,

00:26:39.196 --> 00:26:40.166 A:middle
and standard deviation.

00:26:40.256 --> 00:26:41.776 A:middle
So this is a great way to take a

00:26:41.846 --> 00:26:43.976 A:middle
look at just statistical

00:26:43.976 --> 00:26:45.556 A:middle
analysis of the values that

00:26:45.556 --> 00:26:46.636 A:middle
you're conveying through your

00:26:46.666 --> 00:26:47.706 A:middle
metadata.

00:26:48.306 --> 00:26:49.296 A:middle
Now Shane mentioned that

00:26:49.296 --> 00:26:51.766 A:middle
signposts were very lightweight

00:26:52.056 --> 00:26:54.596 A:middle
and that is totally true except

00:26:54.806 --> 00:26:55.916 A:middle
when you run Instruments the way

00:26:55.916 --> 00:26:56.816 A:middle
I just ran Instruments.

00:26:57.016 --> 00:27:00.056 A:middle
In what we call immediate mode,


00:26:57.016 --> 00:27:00.056 A:middle
In what we call immediate mode,

00:27:00.056 --> 00:27:01.166 A:middle
which is the default recording

00:27:01.166 --> 00:27:03.126 A:middle
mode, Instruments is trying to

00:27:03.126 --> 00:27:05.876 A:middle
show and record the data in near

00:27:05.906 --> 00:27:06.416 A:middle
real time.

00:27:07.056 --> 00:27:07.926 A:middle
And so when it goes into

00:27:07.926 --> 00:27:09.556 A:middle
immediate mode recording, all

00:27:09.626 --> 00:27:11.636 A:middle
the signposts have to be sent

00:27:11.636 --> 00:27:12.826 A:middle
directly to Instruments.

00:27:13.326 --> 00:27:15.106 A:middle
And we have to bypass all of

00:27:15.106 --> 00:27:16.176 A:middle
those optimizations that you get

00:27:16.176 --> 00:27:18.136 A:middle
from buffering in the operating

00:27:18.136 --> 00:27:18.486 A:middle
system.

00:27:19.196 --> 00:27:21.966 A:middle
Now with our signposts -- with

00:27:21.966 --> 00:27:23.576 A:middle
our signposts application here,

00:27:24.036 --> 00:27:25.546 A:middle
we're not really emitting enough

00:27:25.546 --> 00:27:27.176 A:middle
intervals to really notice that

00:27:27.176 --> 00:27:29.186 A:middle
overhead, but if you have a game

00:27:29.186 --> 00:27:30.156 A:middle
engine and you want to emit

00:27:30.156 --> 00:27:32.146 A:middle
thousands of signposts per

00:27:32.146 --> 00:27:34.106 A:middle
second, that overhead will start

00:27:34.106 --> 00:27:34.836 A:middle
to build up.

00:27:35.266 --> 00:27:37.336 A:middle
So in order to work around that,

00:27:37.756 --> 00:27:39.376 A:middle
what you can do is change the

00:27:39.376 --> 00:27:41.176 A:middle
recording mode of Instruments

00:27:41.616 --> 00:27:42.736 A:middle
before you take your recording.

00:27:43.286 --> 00:27:45.016 A:middle
And the way you do that is by

00:27:45.016 --> 00:27:46.956 A:middle
holding down on the record

00:27:46.956 --> 00:27:48.656 A:middle
button and selecting recording

00:27:48.656 --> 00:27:49.266 A:middle
options.

00:27:50.706 --> 00:27:52.496 A:middle
And then in this section here

00:27:52.646 --> 00:27:55.326 A:middle
for the global options, you can

00:27:55.326 --> 00:27:56.566 A:middle
see that we have our immediate

00:27:56.566 --> 00:27:57.176 A:middle
mode selected.

00:27:57.496 --> 00:27:58.976 A:middle
And we can change that to last

00:27:58.976 --> 00:27:59.876 A:middle
five second mode.


00:28:00.436 --> 00:28:01.656 A:middle
Now this is often called

00:28:01.656 --> 00:28:02.376 A:middle
windowed mode.

00:28:03.206 --> 00:28:04.736 A:middle
And what it tells the operating

00:28:04.736 --> 00:28:05.416 A:middle
system and the recording

00:28:05.416 --> 00:28:07.416 A:middle
technology is that we don't need

00:28:07.416 --> 00:28:08.306 A:middle
every single event.

00:28:08.306 --> 00:28:09.386 A:middle
We just want the last five

00:28:09.386 --> 00:28:10.046 A:middle
seconds worth.

00:28:10.366 --> 00:28:11.786 A:middle
And when you do that,

00:28:11.786 --> 00:28:12.946 A:middle
Instruments will step out of the

00:28:12.946 --> 00:28:14.066 A:middle
way and let the operating system

00:28:14.066 --> 00:28:15.416 A:middle
do what it does.

00:28:15.836 --> 00:28:16.966 A:middle
Now this is a very common mode.

00:28:16.966 --> 00:28:18.296 A:middle
We use this in system trace.

00:28:18.296 --> 00:28:19.976 A:middle
We use this in metal system

00:28:19.976 --> 00:28:20.906 A:middle
trace and the new game

00:28:20.906 --> 00:28:21.806 A:middle
performance template.

00:28:22.276 --> 00:28:23.736 A:middle
And so it's a very common way to

00:28:23.736 --> 00:28:25.136 A:middle
look for stutters and hangs in

00:28:25.136 --> 00:28:25.776 A:middle
your application.

00:28:25.846 --> 00:28:26.646 A:middle
All right.

00:28:27.256 --> 00:28:30.916 A:middle
So that is our os signpost

00:28:30.996 --> 00:28:31.426 A:middle
instrument.

00:28:32.756 --> 00:28:34.416 A:middle
Now let's talk about points of

00:28:34.416 --> 00:28:34.756 A:middle
interest.

00:28:36.046 --> 00:28:38.216 A:middle
Now if we come back to our

00:28:38.326 --> 00:28:39.476 A:middle
Trailblazer application here,

00:28:40.216 --> 00:28:43.176 A:middle
you notice that when I tap on a

00:28:43.176 --> 00:28:45.166 A:middle
trail, it pushes a detail.

00:28:46.026 --> 00:28:47.326 A:middle
If I go back and tap on a

00:28:47.326 --> 00:28:48.676 A:middle
different trail, it'll push a

00:28:48.676 --> 00:28:49.316 A:middle
different detail.

00:28:50.476 --> 00:28:53.186 A:middle
Now it would be great if we

00:28:53.326 --> 00:28:55.026 A:middle
could track every time these

00:28:55.026 --> 00:28:56.516 A:middle
detail views come forward

00:28:56.896 --> 00:28:57.986 A:middle
because then we can tell what

00:28:57.986 --> 00:28:59.266 A:middle
our user is trying to do, and we

00:28:59.266 --> 00:29:00.856 A:middle
can tell where our user is in


00:28:59.266 --> 00:29:00.856 A:middle
can tell where our user is in

00:29:00.856 --> 00:29:01.606 A:middle
the application.

00:29:02.626 --> 00:29:04.466 A:middle
Now you could certainly do this

00:29:04.466 --> 00:29:07.246 A:middle
with a signpost, but you'd have

00:29:07.296 --> 00:29:08.526 A:middle
to drag in the os signpost

00:29:08.526 --> 00:29:10.366 A:middle
instrument and record all of the

00:29:10.366 --> 00:29:11.556 A:middle
signpost activity on the

00:29:11.556 --> 00:29:12.146 A:middle
application.

00:29:12.146 --> 00:29:14.316 A:middle
And it sort of dilutes how

00:29:14.316 --> 00:29:16.456 A:middle
important these user navigation

00:29:16.456 --> 00:29:17.086 A:middle
events are.

00:29:17.756 --> 00:29:19.386 A:middle
So what we allow you to do is

00:29:19.386 --> 00:29:20.826 A:middle
promote them to what are called

00:29:20.936 --> 00:29:21.796 A:middle
points of interest.

00:29:22.566 --> 00:29:23.746 A:middle
Now if I go to our code for the

00:29:23.746 --> 00:29:26.636 A:middle
detail controller and we look at

00:29:26.636 --> 00:29:28.406 A:middle
our viewDidAppear method, you

00:29:28.406 --> 00:29:31.006 A:middle
can see that I'm posting -- I'm

00:29:31.006 --> 00:29:32.426 A:middle
creating an os signpost event

00:29:33.076 --> 00:29:34.296 A:middle
saying that a detail appeared

00:29:34.696 --> 00:29:36.136 A:middle
and with the name of the detail.

00:29:37.186 --> 00:29:38.206 A:middle
Now this is sent to a special

00:29:38.206 --> 00:29:39.486 A:middle
log handle that we've created

00:29:39.486 --> 00:29:40.516 A:middle
called points of interest.

00:29:40.986 --> 00:29:42.116 A:middle
And the way that you create that

00:29:42.556 --> 00:29:43.836 A:middle
is by creating a log handle with

00:29:43.946 --> 00:29:46.166 A:middle
your subsystem identifier and

00:29:46.256 --> 00:29:47.976 A:middle
the systems points of interest

00:29:47.976 --> 00:29:48.466 A:middle
category.

00:29:48.666 --> 00:29:49.946 A:middle
So this is a special category

00:29:49.946 --> 00:29:50.886 A:middle
that Instruments will be looking

00:29:50.886 --> 00:29:51.196 A:middle
for.

00:29:51.656 --> 00:29:52.896 A:middle
And when it sees points here,

00:29:53.246 --> 00:29:55.746 A:middle
it'll place them into the points

00:29:55.786 --> 00:29:57.196 A:middle
of interest instrument.

00:29:57.336 --> 00:29:59.856 A:middle
So if we come back here and take

00:29:59.856 --> 00:30:01.636 A:middle
a time profile, you can see that


00:29:59.856 --> 00:30:01.636 A:middle
a time profile, you can see that

00:30:01.636 --> 00:30:03.636 A:middle
we have our points of interest

00:30:03.636 --> 00:30:04.576 A:middle
instrument automatically

00:30:04.576 --> 00:30:04.976 A:middle
included.

00:30:05.146 --> 00:30:08.706 A:middle
And if we do a recording and we

00:30:08.936 --> 00:30:11.246 A:middle
do that same basic action, we go

00:30:11.246 --> 00:30:12.636 A:middle
into the Matt Davis Trail and

00:30:12.636 --> 00:30:13.426 A:middle
then we'll come back here to

00:30:13.426 --> 00:30:15.536 A:middle
Skyline Trail and then we'll go

00:30:15.536 --> 00:30:17.466 A:middle
back and we'll do one more for

00:30:17.466 --> 00:30:17.896 A:middle
good measure.

00:30:19.366 --> 00:30:20.856 A:middle
Now when you go back to

00:30:21.236 --> 00:30:25.176 A:middle
Instruments, you can see that we

00:30:25.176 --> 00:30:26.276 A:middle
have those points of interest

00:30:26.606 --> 00:30:27.806 A:middle
prominently displayed.

00:30:27.806 --> 00:30:29.776 A:middle
So you can see where your user

00:30:29.776 --> 00:30:31.036 A:middle
was in the navigation of your

00:30:31.036 --> 00:30:31.236 A:middle
app.

00:30:31.236 --> 00:30:32.406 A:middle
And you can correlate this with

00:30:32.406 --> 00:30:33.316 A:middle
other performance data.

00:30:33.986 --> 00:30:34.986 A:middle
And so points of interest are

00:30:34.986 --> 00:30:37.236 A:middle
really a way for you to pick and

00:30:37.236 --> 00:30:38.626 A:middle
choose some of the most

00:30:38.626 --> 00:30:40.546 A:middle
important points of interest in

00:30:40.546 --> 00:30:42.016 A:middle
your application and make them

00:30:42.016 --> 00:30:44.036 A:middle
available to every developer

00:30:44.036 --> 00:30:45.446 A:middle
that's on your team or in your

00:30:45.446 --> 00:30:46.306 A:middle
development community.

00:30:46.566 --> 00:30:47.736 A:middle
And they can be seen right here

00:30:47.736 --> 00:30:48.596 A:middle
in the points of interest.

00:30:49.956 --> 00:30:50.156 A:middle
All right.

00:30:50.156 --> 00:30:51.756 A:middle
So that is the points of

00:30:51.756 --> 00:30:53.596 A:middle
interest instrument and how you

00:30:53.596 --> 00:30:54.956 A:middle
create points of interest from

00:30:54.956 --> 00:30:55.646 A:middle
signposts.

00:30:56.966 --> 00:30:58.926 A:middle
Now another great feature of

00:30:59.276 --> 00:31:01.006 A:middle
Instruments 10 is the ability


00:30:59.276 --> 00:31:01.006 A:middle
Instruments 10 is the ability

00:31:01.006 --> 00:31:02.376 A:middle
for you to create custom

00:31:02.376 --> 00:31:03.026 A:middle
instruments.

00:31:03.576 --> 00:31:05.096 A:middle
And so to demonstrate what you

00:31:05.096 --> 00:31:06.456 A:middle
can do with custom instruments

00:31:06.456 --> 00:31:08.816 A:middle
in os signpost, we've created,

00:31:08.816 --> 00:31:11.256 A:middle
as part of our project, a

00:31:11.256 --> 00:31:12.836 A:middle
Trailblazer instruments package.

00:31:13.916 --> 00:31:15.336 A:middle
Now I'm going to build and run

00:31:15.336 --> 00:31:16.226 A:middle
that now.

00:31:16.306 --> 00:31:20.306 A:middle
And you'll see when we do that,

00:31:20.586 --> 00:31:21.996 A:middle
we start a separate copy of

00:31:21.996 --> 00:31:24.566 A:middle
Instruments that has our just

00:31:24.566 --> 00:31:25.796 A:middle
built package installed.

00:31:25.796 --> 00:31:28.796 A:middle
And if we bring that version

00:31:28.796 --> 00:31:30.666 A:middle
forward, we'll see that we now

00:31:30.726 --> 00:31:32.356 A:middle
have a Trailblazer networking

00:31:32.856 --> 00:31:33.826 A:middle
trace template.

00:31:33.826 --> 00:31:36.296 A:middle
And if we choose that, we can

00:31:36.456 --> 00:31:38.046 A:middle
see that we have a Trailblazer

00:31:38.046 --> 00:31:39.616 A:middle
networking instrument in our

00:31:39.616 --> 00:31:40.246 A:middle
trace document.

00:31:41.546 --> 00:31:43.266 A:middle
And let's take a recording and

00:31:43.326 --> 00:31:44.226 A:middle
see what the difference is

00:31:44.226 --> 00:31:46.666 A:middle
between our points of interest

00:31:46.666 --> 00:31:48.176 A:middle
or, I'm sorry, our os signpost

00:31:48.376 --> 00:31:49.736 A:middle
and what this custom instrument

00:31:49.736 --> 00:31:50.016 A:middle
can do.

00:31:50.106 --> 00:31:51.086 A:middle
So we'll do the same type of

00:31:51.086 --> 00:31:51.416 A:middle
thing.

00:31:51.956 --> 00:31:53.156 A:middle
We'll do some basic downloading.

00:31:53.246 --> 00:31:57.046 A:middle
And then we'll come back and

00:31:57.046 --> 00:31:58.086 A:middle
we'll analyze our trace.

00:31:59.036 --> 00:32:00.656 A:middle
Now the presentation here is


00:31:59.036 --> 00:32:00.656 A:middle
Now the presentation here is

00:32:00.656 --> 00:32:01.646 A:middle
significantly different.

00:32:01.786 --> 00:32:02.946 A:middle
So let's zoom in and take a look

00:32:02.946 --> 00:32:04.676 A:middle
at it.

00:32:04.676 --> 00:32:07.076 A:middle
You'll notice here on the left,

00:32:07.076 --> 00:32:08.066 A:middle
instead of breaking it down by

00:32:08.066 --> 00:32:09.396 A:middle
signpost name, we've broken it

00:32:09.396 --> 00:32:10.376 A:middle
down by the image being

00:32:10.376 --> 00:32:10.906 A:middle
downloaded.

00:32:11.416 --> 00:32:13.466 A:middle
So now we can see that image two

00:32:13.656 --> 00:32:16.606 A:middle
was downloaded at this point and

00:32:16.606 --> 00:32:17.406 A:middle
at this point.

00:32:18.256 --> 00:32:20.456 A:middle
Now we've labeled each one with

00:32:20.716 --> 00:32:21.896 A:middle
the size in megabytes of the

00:32:21.896 --> 00:32:22.386 A:middle
download.

00:32:22.996 --> 00:32:25.546 A:middle
And we've also colored them red

00:32:25.546 --> 00:32:27.576 A:middle
if the download size is larger

00:32:27.576 --> 00:32:28.896 A:middle
than 3 1/2 megabytes.

00:32:29.656 --> 00:32:31.846 A:middle
So this is a custom graph that

00:32:31.846 --> 00:32:33.226 A:middle
we created as part of our custom

00:32:33.226 --> 00:32:33.636 A:middle
instrument.

00:32:33.956 --> 00:32:35.536 A:middle
Now we've also defined some

00:32:35.536 --> 00:32:36.446 A:middle
details down here.

00:32:36.536 --> 00:32:38.516 A:middle
We've got a very simple list of

00:32:38.516 --> 00:32:39.716 A:middle
our download events.

00:32:39.836 --> 00:32:41.266 A:middle
And, again, you can navigate

00:32:41.266 --> 00:32:42.516 A:middle
through the trace with those.

00:32:43.476 --> 00:32:46.116 A:middle
And we also have -- let me see

00:32:46.116 --> 00:32:47.036 A:middle
if I can get this back into

00:32:47.096 --> 00:32:47.796 A:middle
focus here.

00:32:47.996 --> 00:32:50.846 A:middle
We also have a summary for all

00:32:50.846 --> 00:32:51.466 A:middle
the downloads.

00:32:51.536 --> 00:32:52.096 A:middle
Very simple.

00:32:52.506 --> 00:32:53.596 A:middle
We just want to do a count and a

00:32:53.596 --> 00:32:54.016 A:middle
sum.

00:32:54.226 --> 00:32:56.136 A:middle
And then we also have this cool

00:32:56.136 --> 00:32:57.266 A:middle
thing called Timeslice.

00:32:58.026 --> 00:32:59.806 A:middle
And in a Timeslice view, what


00:33:00.226 --> 00:33:01.746 A:middle
we're trying to do is answer

00:33:01.746 --> 00:33:02.716 A:middle
that question I was asking

00:33:02.716 --> 00:33:04.146 A:middle
before of how many of these

00:33:04.146 --> 00:33:05.636 A:middle
things are actually running in

00:33:05.636 --> 00:33:06.096 A:middle
parallel?

00:33:06.676 --> 00:33:07.656 A:middle
Well, if you want to take a look

00:33:07.656 --> 00:33:08.506 A:middle
at the intervals running in

00:33:08.506 --> 00:33:09.736 A:middle
parallel, you just scrub the

00:33:09.736 --> 00:33:11.876 A:middle
inspection head over here

00:33:11.876 --> 00:33:13.216 A:middle
through time, and you can see

00:33:13.216 --> 00:33:14.886 A:middle
exactly what is intersecting

00:33:15.276 --> 00:33:16.976 A:middle
that inspection head at any

00:33:16.976 --> 00:33:18.196 A:middle
given point in time.

00:33:18.706 --> 00:33:20.016 A:middle
So it's a great and a different

00:33:20.016 --> 00:33:21.556 A:middle
way to look at your signpost

00:33:21.556 --> 00:33:21.746 A:middle
data.

00:33:23.036 --> 00:33:24.556 A:middle
Now if you are working with

00:33:24.556 --> 00:33:26.056 A:middle
others on a project or you're

00:33:26.056 --> 00:33:26.776 A:middle
part of the development

00:33:26.776 --> 00:33:28.606 A:middle
community, using a custom

00:33:28.606 --> 00:33:29.646 A:middle
instrument is a great way to

00:33:29.646 --> 00:33:31.606 A:middle
take the signpost data and

00:33:31.606 --> 00:33:33.336 A:middle
reshape it in a way that someone

00:33:33.386 --> 00:33:35.286 A:middle
else can use and interpret

00:33:35.286 --> 00:33:36.126 A:middle
without having to know the

00:33:36.126 --> 00:33:37.956 A:middle
details of how your code works

00:33:37.956 --> 00:33:38.926 A:middle
so they are a very important

00:33:38.926 --> 00:33:39.216 A:middle
feature.

00:33:39.576 --> 00:33:42.746 A:middle
Now the great news is that to

00:33:42.746 --> 00:33:44.246 A:middle
create an instrument like that,

00:33:44.956 --> 00:33:46.926 A:middle
the entire package definition is

00:33:46.926 --> 00:33:51.636 A:middle
about 115 lines of XML and so

00:33:51.716 --> 00:33:53.386 A:middle
custom instruments is very

00:33:53.386 --> 00:33:55.236 A:middle
expressive and very powerful but

00:33:55.236 --> 00:33:56.506 A:middle
also very easy.

00:33:57.466 --> 00:33:59.876 A:middle
And that is the conclusion of

00:33:59.876 --> 00:34:00.226 A:middle
our demo.


00:33:59.876 --> 00:34:00.226 A:middle
our demo.

00:34:01.516 --> 00:34:08.536 A:middle
[ Applause ]

00:34:09.036 --> 00:34:10.666 A:middle
So in today's session, we took a

00:34:10.666 --> 00:34:13.065 A:middle
look at the signpost API, and we

00:34:13.065 --> 00:34:14.545 A:middle
showed you how to use it to

00:34:14.896 --> 00:34:16.216 A:middle
annotate interesting periods of

00:34:16.216 --> 00:34:17.536 A:middle
activity and intervals inside

00:34:17.536 --> 00:34:18.235 A:middle
your application.

00:34:19.005 --> 00:34:20.126 A:middle
We showed you how to collect

00:34:20.126 --> 00:34:21.835 A:middle
metadata and get that metadata

00:34:22.076 --> 00:34:23.065 A:middle
into Instruments for

00:34:23.065 --> 00:34:24.826 A:middle
visualization and analysis.

00:34:25.406 --> 00:34:27.916 A:middle
And we showed you how to combine

00:34:28.246 --> 00:34:29.755 A:middle
custom instruments in os

00:34:29.755 --> 00:34:32.646 A:middle
signpost to create a more

00:34:32.786 --> 00:34:34.045 A:middle
tailored presentation of your

00:34:34.045 --> 00:34:34.856 A:middle
signpost data.

00:34:36.056 --> 00:34:38.626 A:middle
Now all this really comes down

00:34:38.686 --> 00:34:41.085 A:middle
to us being able to give you the

00:34:41.085 --> 00:34:42.346 A:middle
kind of information that you

00:34:42.346 --> 00:34:44.686 A:middle
need to help you tune the

00:34:44.686 --> 00:34:46.106 A:middle
performance of your application.

00:34:46.485 --> 00:34:47.856 A:middle
And so we're really excited to

00:34:47.856 --> 00:34:49.946 A:middle
see how you use os signpost and

00:34:49.946 --> 00:34:51.866 A:middle
Instruments together to improve

00:34:51.866 --> 00:34:53.076 A:middle
the user experience of your

00:34:53.076 --> 00:34:53.656 A:middle
application.

00:34:54.985 --> 00:34:56.576 A:middle
That is the content for today.

00:34:57.016 --> 00:34:58.856 A:middle
For more information, you can

00:34:58.856 --> 00:35:00.946 A:middle
come see us in a lab, technology


00:34:58.856 --> 00:35:00.946 A:middle
come see us in a lab, technology

00:35:00.946 --> 00:35:03.546 A:middle
lab 8 at 3:00 today.

00:35:03.546 --> 00:35:05.896 A:middle
And I also have session 410,

00:35:05.896 --> 00:35:06.996 A:middle
creating custom instruments

00:35:07.076 --> 00:35:08.876 A:middle
tomorrow where I'll be going

00:35:08.876 --> 00:35:10.106 A:middle
over the details of how custom

00:35:10.106 --> 00:35:11.686 A:middle
instruments works and show you

00:35:11.686 --> 00:35:13.156 A:middle
how we created our Trailblazer

00:35:13.156 --> 00:35:14.836 A:middle
networking instruments package.

00:35:15.696 --> 00:35:16.386 A:middle
Thank you very much.

00:35:16.386 --> 00:35:16.996 A:middle
Enjoy the rest of your

00:35:16.996 --> 00:35:17.936 A:middle
conference.

00:35:18.516 --> 00:35:24.480 A:middle
[ Applause ]
