WEBVTT

00:00:06.516 --> 00:00:16.500 A:middle
[ Music ]

00:00:22.136 --> 00:00:23.776 A:middle
&gt;&gt; Welcome to session 508,

00:00:24.066 --> 00:00:25.576 A:middle
Getting and Using a MapKit JS

00:00:25.576 --> 00:00:25.916 A:middle
Key.

00:00:26.406 --> 00:00:27.806 A:middle
I'm Eric Gelinas from the MapKit

00:00:27.806 --> 00:00:28.396 A:middle
JS team.

00:00:29.156 --> 00:00:31.106 A:middle
In this video, we will learn how

00:00:31.106 --> 00:00:33.206 A:middle
MapKit JS authorization works,

00:00:33.716 --> 00:00:36.526 A:middle
create a MapKit JS key, create

00:00:36.526 --> 00:00:38.336 A:middle
an authorization token, and in

00:00:38.336 --> 00:00:40.926 A:middle
the end we'll make a map.

00:00:40.926 --> 00:00:42.066 A:middle
Let's dive into how

00:00:42.066 --> 00:00:44.256 A:middle
authorization works in MapKit

00:00:45.616 --> 00:00:45.696 A:middle
JS.

00:00:45.926 --> 00:00:47.076 A:middle
Anything you host on the web,

00:00:47.076 --> 00:00:48.936 A:middle
including MapKit JS is in plain

00:00:48.936 --> 00:00:49.346 A:middle
text.

00:00:49.926 --> 00:00:51.206 A:middle
One of the great things about

00:00:51.206 --> 00:00:52.476 A:middle
the web is the ability to learn

00:00:52.476 --> 00:00:54.036 A:middle
techniques from others simply by

00:00:54.036 --> 00:00:54.826 A:middle
viewing source.

00:00:56.246 --> 00:00:57.936 A:middle
Just open the web inspector and

00:00:57.936 --> 00:00:58.746 A:middle
see how it's done.

00:00:59.236 --> 00:01:00.216 A:middle
See a map you like?


00:00:59.236 --> 00:01:00.216 A:middle
See a map you like?

00:01:00.626 --> 00:01:02.016 A:middle
View its source, see how it

00:01:02.016 --> 00:01:02.526 A:middle
works.

00:01:02.916 --> 00:01:04.135 A:middle
It's certainly how I learned.

00:01:05.846 --> 00:01:07.396 A:middle
Unfortunately, that sometimes

00:01:07.396 --> 00:01:08.596 A:middle
means that your API

00:01:08.596 --> 00:01:10.006 A:middle
authorization credentials can

00:01:10.006 --> 00:01:11.796 A:middle
get copied and used by mistake

00:01:11.796 --> 00:01:14.076 A:middle
without your permission and that

00:01:14.076 --> 00:01:16.106 A:middle
unauthorized use can count

00:01:16.106 --> 00:01:17.316 A:middle
against your usage limits.

00:01:18.196 --> 00:01:19.846 A:middle
Once the limit is reached, your

00:01:19.846 --> 00:01:21.526 A:middle
site may no longer be able to

00:01:21.526 --> 00:01:22.426 A:middle
display maps.

00:01:23.216 --> 00:01:24.946 A:middle
The MapKit JS authorization

00:01:24.946 --> 00:01:26.066 A:middle
system is designed to give you

00:01:26.066 --> 00:01:27.456 A:middle
more control over how your

00:01:27.456 --> 00:01:28.566 A:middle
credentials are used.

00:01:29.106 --> 00:01:31.806 A:middle
You can set a time when access

00:01:31.806 --> 00:01:34.306 A:middle
should expire and restrict

00:01:34.306 --> 00:01:35.966 A:middle
access to a specific domain.

00:01:36.306 --> 00:01:38.306 A:middle
It's the web and others will

00:01:38.306 --> 00:01:39.576 A:middle
still be able to view course and

00:01:39.576 --> 00:01:40.386 A:middle
poke around in the web

00:01:40.386 --> 00:01:42.436 A:middle
inspector, but if somebody ends

00:01:42.436 --> 00:01:43.666 A:middle
up with your credentials for any

00:01:43.666 --> 00:01:45.016 A:middle
reason, there will be limits on

00:01:45.016 --> 00:01:45.936 A:middle
how they can use it.

00:01:47.476 --> 00:01:50.076 A:middle
Let's discuss how MapKit JS

00:01:50.076 --> 00:01:51.406 A:middle
authorization works at a high

00:01:51.406 --> 00:01:51.836 A:middle
level.

00:01:52.896 --> 00:01:54.956 A:middle
Once you have a MapKit JS key,

00:01:55.436 --> 00:01:56.916 A:middle
you'll save it somewhere safe.

00:01:57.586 --> 00:01:58.796 A:middle
This will never be shared over

00:01:58.796 --> 00:01:59.236 A:middle
the web.

00:01:59.446 --> 00:02:01.616 A:middle
Instead, you'll create tokens


00:01:59.446 --> 00:02:01.616 A:middle
Instead, you'll create tokens

00:02:01.786 --> 00:02:03.216 A:middle
with restrictions and signed

00:02:03.216 --> 00:02:03.916 A:middle
with your key.

00:02:04.626 --> 00:02:06.346 A:middle
This token is what you will use

00:02:06.346 --> 00:02:09.256 A:middle
to authorize with the MapKit JS

00:02:10.436 --> 00:02:10.556 A:middle
API.

00:02:10.886 --> 00:02:12.506 A:middle
So, let's see how creating a

00:02:12.506 --> 00:02:14.056 A:middle
MapKit JS key works.

00:02:14.646 --> 00:02:17.066 A:middle
A MapKit JS key is your

00:02:17.066 --> 00:02:18.176 A:middle
credential to use with the

00:02:18.176 --> 00:02:19.466 A:middle
MapKit JS API.

00:02:20.576 --> 00:02:21.846 A:middle
This is a one-time set-up.

00:02:21.956 --> 00:02:22.486 A:middle
Here's how.

00:02:23.276 --> 00:02:24.536 A:middle
Create a maps identifier.

00:02:25.566 --> 00:02:27.616 A:middle
Create a MapKit JS key and

00:02:27.616 --> 00:02:28.546 A:middle
associate it what that

00:02:28.546 --> 00:02:29.236 A:middle
identifier.

00:02:29.766 --> 00:02:32.026 A:middle
And download your key and save

00:02:32.026 --> 00:02:33.096 A:middle
it to a save place.

00:02:34.696 --> 00:02:36.396 A:middle
Before we start, head over to

00:02:36.396 --> 00:02:38.876 A:middle
developer.apple.com/account and

00:02:38.876 --> 00:02:39.376 A:middle
log in.

00:02:40.486 --> 00:02:41.866 A:middle
From there, click on

00:02:41.866 --> 00:02:43.766 A:middle
Certificates, IDs, and Profiles

00:02:43.766 --> 00:02:44.706 A:middle
in the left-hand menu.

00:02:47.106 --> 00:02:48.786 A:middle
Our first step is to create a

00:02:48.786 --> 00:02:49.856 A:middle
maps identifier.

00:02:50.436 --> 00:02:52.206 A:middle
This identifies your project in

00:02:52.206 --> 00:02:54.486 A:middle
the Apple Developer website, but

00:02:54.486 --> 00:02:56.216 A:middle
it also serves to track usage

00:02:56.216 --> 00:02:56.706 A:middle
limits.

00:02:58.946 --> 00:03:00.866 A:middle
You may want to create different


00:02:58.946 --> 00:03:00.866 A:middle
You may want to create different

00:03:00.866 --> 00:03:02.366 A:middle
identifiers for production and

00:03:02.366 --> 00:03:03.546 A:middle
development environments.

00:03:04.376 --> 00:03:05.846 A:middle
To create a maps identifier,

00:03:06.636 --> 00:03:09.196 A:middle
select Maps IDs from the menu.

00:03:10.326 --> 00:03:12.236 A:middle
Click the + button in the upper

00:03:12.236 --> 00:03:12.626 A:middle
right.

00:03:13.936 --> 00:03:15.096 A:middle
Give this identifier a

00:03:15.096 --> 00:03:15.786 A:middle
description.

00:03:16.336 --> 00:03:17.336 A:middle
The description should be the

00:03:17.336 --> 00:03:19.056 A:middle
name of your website as it will

00:03:19.056 --> 00:03:19.866 A:middle
appear to users.

00:03:21.426 --> 00:03:22.916 A:middle
Give this identifier a unique

00:03:22.916 --> 00:03:23.306 A:middle
ID.

00:03:23.866 --> 00:03:25.626 A:middle
We recommend using reverse

00:03:25.626 --> 00:03:27.676 A:middle
domain style for this ID and it

00:03:27.676 --> 00:03:28.786 A:middle
will need to start with the

00:03:28.786 --> 00:03:29.836 A:middle
string maps.

00:03:32.106 --> 00:03:32.916 A:middle
For example,

00:03:33.286 --> 00:03:37.926 A:middle
maps.com.yourdomainname.yourapp.

00:03:40.446 --> 00:03:41.926 A:middle
Now we'll create a MapKit JS

00:03:41.926 --> 00:03:42.306 A:middle
key.

00:03:42.816 --> 00:03:44.286 A:middle
This key is a secret shared

00:03:44.286 --> 00:03:46.136 A:middle
between you and Apple and should

00:03:46.136 --> 00:03:47.396 A:middle
never be stored in front end

00:03:47.396 --> 00:03:48.966 A:middle
code, checked into source

00:03:48.966 --> 00:03:50.716 A:middle
control, or shared with others.

00:03:52.086 --> 00:03:54.776 A:middle
First, click on All under the

00:03:54.776 --> 00:03:56.526 A:middle
Keys subheading in the left-hand

00:03:56.526 --> 00:03:56.836 A:middle
menu.

00:03:58.396 --> 00:04:00.886 A:middle
Then, click the + icon in the


00:03:58.396 --> 00:04:00.886 A:middle
Then, click the + icon in the

00:04:00.886 --> 00:04:01.296 A:middle
header.

00:04:02.716 --> 00:04:04.826 A:middle
Then, give this new key a name.

00:04:06.936 --> 00:04:09.166 A:middle
Then check the MapKit JS

00:04:09.166 --> 00:04:09.906 A:middle
checkbox.

00:04:11.376 --> 00:04:12.986 A:middle
Then, click the Configure

00:04:12.986 --> 00:04:13.376 A:middle
button.

00:04:13.716 --> 00:04:15.456 A:middle
Now that you've created a new

00:04:15.456 --> 00:04:18.026 A:middle
key, we can associate it with

00:04:18.026 --> 00:04:19.446 A:middle
the maps identifier you created

00:04:19.446 --> 00:04:22.476 A:middle
earlier from the maps drop-down

00:04:22.676 --> 00:04:23.036 A:middle
menu.

00:04:23.496 --> 00:04:25.826 A:middle
Maps identifiers can only be

00:04:25.826 --> 00:04:27.336 A:middle
associated with one key at a

00:04:27.336 --> 00:04:27.586 A:middle
time.

00:04:28.996 --> 00:04:30.386 A:middle
When you've selected your maps

00:04:30.386 --> 00:04:32.196 A:middle
identifier, click Continue.

00:04:33.846 --> 00:04:36.416 A:middle
Finally, review your changes

00:04:36.416 --> 00:04:38.716 A:middle
when prompted and click Confirm.

00:04:40.896 --> 00:04:41.946 A:middle
Your key is now ready to

00:04:41.946 --> 00:04:42.486 A:middle
download.

00:04:43.166 --> 00:04:44.546 A:middle
Click the Download button to

00:04:44.546 --> 00:04:46.206 A:middle
save your auth key file to your

00:04:46.206 --> 00:04:46.726 A:middle
computer.

00:04:47.226 --> 00:04:48.726 A:middle
You can only download this file

00:04:48.726 --> 00:04:50.226 A:middle
once, so keep it in a safe

00:04:50.226 --> 00:04:50.766 A:middle
place.

00:04:51.236 --> 00:04:52.996 A:middle
If you do lose it, you'll need

00:04:52.996 --> 00:04:54.416 A:middle
to create a new key and then

00:04:54.416 --> 00:04:55.606 A:middle
revoke the old key.

00:04:57.196 --> 00:04:59.146 A:middle
When downloaded, your auth key

00:04:59.146 --> 00:05:00.396 A:middle
file will look something like


00:04:59.146 --> 00:05:00.396 A:middle
file will look something like

00:05:00.396 --> 00:05:00.856 A:middle
this.

00:05:01.356 --> 00:05:04.106 A:middle
As I said before, this key is

00:05:04.106 --> 00:05:05.576 A:middle
meant to be a secret between you

00:05:05.576 --> 00:05:06.136 A:middle
and Apple.

00:05:07.066 --> 00:05:08.516 A:middle
This is the only time you'll be

00:05:08.516 --> 00:05:10.006 A:middle
able to download your auth key

00:05:10.006 --> 00:05:10.446 A:middle
file.

00:05:10.906 --> 00:05:12.416 A:middle
We recommend you quickly save it

00:05:12.416 --> 00:05:13.236 A:middle
somewhere safe.

00:05:14.296 --> 00:05:16.576 A:middle
If you ever lose your key or it

00:05:16.576 --> 00:05:18.426 A:middle
is compromised, you can always

00:05:18.426 --> 00:05:19.816 A:middle
come back to the Apple Developer

00:05:19.816 --> 00:05:21.436 A:middle
website to revoke it and create

00:05:21.436 --> 00:05:21.946 A:middle
a new key.

00:05:25.306 --> 00:05:26.976 A:middle
You just created a MapKit JS

00:05:26.976 --> 00:05:27.356 A:middle
key.

00:05:27.386 --> 00:05:29.536 A:middle
Now we will create authorization

00:05:29.536 --> 00:05:31.246 A:middle
tokens which can be used to

00:05:31.246 --> 00:05:33.066 A:middle
authorize MapKit JS over the

00:05:33.066 --> 00:05:33.326 A:middle
web.

00:05:36.296 --> 00:05:38.246 A:middle
Tokens are created containing

00:05:38.246 --> 00:05:40.086 A:middle
your developer credentials and

00:05:40.086 --> 00:05:41.626 A:middle
are signed with your auth key

00:05:41.626 --> 00:05:42.116 A:middle
file.

00:05:43.026 --> 00:05:44.586 A:middle
Claims are added to this token,

00:05:44.776 --> 00:05:46.256 A:middle
which are used by Apple to

00:05:46.256 --> 00:05:48.386 A:middle
verify a client's authorization.

00:05:49.846 --> 00:05:51.576 A:middle
Let's dive deeper into how to

00:05:51.576 --> 00:05:53.406 A:middle
make authorization tokens.

00:05:55.316 --> 00:05:57.426 A:middle
MapKit JS authorization tokens

00:05:57.426 --> 00:06:00.786 A:middle
are based on JSON Web Tokens RFC


00:05:57.426 --> 00:06:00.786 A:middle
are based on JSON Web Tokens RFC

00:06:00.786 --> 00:06:04.416 A:middle
7519, or JWT for short.

00:06:04.996 --> 00:06:06.256 A:middle
This is an industry standard

00:06:06.256 --> 00:06:07.856 A:middle
designed to specifically

00:06:08.456 --> 00:06:10.406 A:middle
transmit authorization claims

00:06:10.406 --> 00:06:11.046 A:middle
over the web.

00:06:12.186 --> 00:06:14.036 A:middle
You can find more information on

00:06:14.036 --> 00:06:16.316 A:middle
this standard at jwt.io.

00:06:17.886 --> 00:06:19.266 A:middle
There you will also find

00:06:19.266 --> 00:06:21.756 A:middle
libraries for signing JWT tokens

00:06:21.756 --> 00:06:23.386 A:middle
in most programming languages.

00:06:25.226 --> 00:06:27.466 A:middle
All JWT tokens are made of the

00:06:27.466 --> 00:06:28.666 A:middle
following three parts.

00:06:28.946 --> 00:06:33.216 A:middle
A header, a payload, and a

00:06:33.216 --> 00:06:36.376 A:middle
signature separated by periods

00:06:36.376 --> 00:06:38.876 A:middle
and each Base64 URL encoded,

00:06:39.196 --> 00:06:41.056 A:middle
making a token which can easily

00:06:41.056 --> 00:06:42.696 A:middle
be passed to a request header.

00:06:44.806 --> 00:06:46.726 A:middle
We have two recommended JWT

00:06:46.726 --> 00:06:47.996 A:middle
configurations for your

00:06:47.996 --> 00:06:50.256 A:middle
authorization token: short-lived

00:06:50.256 --> 00:06:52.376 A:middle
tokens and long-lived tokens.

00:06:54.716 --> 00:06:56.006 A:middle
Let's start with short-lived

00:06:56.006 --> 00:06:56.536 A:middle
tokens.

00:06:57.076 --> 00:06:58.726 A:middle
These authorization tokens offer

00:06:58.726 --> 00:07:00.206 A:middle
the most protection against


00:06:58.726 --> 00:07:00.206 A:middle
the most protection against

00:07:00.206 --> 00:07:02.186 A:middle
misuse by ensuring that

00:07:02.186 --> 00:07:03.966 A:middle
authorization tokens can't be

00:07:03.966 --> 00:07:05.896 A:middle
used for long if copied from

00:07:05.896 --> 00:07:06.596 A:middle
your source code.

00:07:07.836 --> 00:07:09.196 A:middle
This approach requires that you

00:07:09.196 --> 00:07:11.026 A:middle
provide a server endpoint to

00:07:11.026 --> 00:07:13.126 A:middle
respond to requests for MapKit

00:07:13.126 --> 00:07:14.946 A:middle
JS for new authorization tokens.

00:07:15.716 --> 00:07:17.776 A:middle
MapKit will refresh from this

00:07:17.776 --> 00:07:19.436 A:middle
endpoint any time it needs to

00:07:19.436 --> 00:07:21.196 A:middle
authorize throughout a user's

00:07:21.196 --> 00:07:21.706 A:middle
session.

00:07:23.376 --> 00:07:25.766 A:middle
First, the payload must contain

00:07:25.916 --> 00:07:28.676 A:middle
an ISS claim, which is your

00:07:28.676 --> 00:07:30.476 A:middle
Apple Developer Program ID.

00:07:30.476 --> 00:07:34.066 A:middle
You can find your Team ID in the

00:07:34.066 --> 00:07:35.716 A:middle
account section of the Apple

00:07:35.716 --> 00:07:36.726 A:middle
Developer website.

00:07:36.996 --> 00:07:40.696 A:middle
An IAT claim, which is when this

00:07:40.696 --> 00:07:42.796 A:middle
authorization token was issued

00:07:42.796 --> 00:07:43.586 A:middle
in seconds.

00:07:43.826 --> 00:07:47.146 A:middle
An EXP claim, which is when this

00:07:47.146 --> 00:07:48.846 A:middle
authorization token is meant to

00:07:48.846 --> 00:07:50.166 A:middle
expire in seconds.

00:07:50.976 --> 00:07:52.536 A:middle
For short-lived tokens, we

00:07:52.536 --> 00:07:53.736 A:middle
recommend 30 minutes.

00:07:54.196 --> 00:07:56.516 A:middle
And, finally, a claim of origin.

00:07:57.156 --> 00:07:59.526 A:middle
This can restrict browser access

00:07:59.816 --> 00:08:01.536 A:middle
by matching the origin header


00:07:59.816 --> 00:08:01.536 A:middle
by matching the origin header

00:08:01.536 --> 00:08:01.946 A:middle
string.

00:08:03.026 --> 00:08:04.506 A:middle
Though this claim is optional,

00:08:04.646 --> 00:08:06.436 A:middle
we recommend it be used for all

00:08:06.436 --> 00:08:08.316 A:middle
authorization tokens, especially

00:08:08.316 --> 00:08:08.926 A:middle
in production.

00:08:10.506 --> 00:08:12.806 A:middle
Second, the auth key file

00:08:12.806 --> 00:08:14.546 A:middle
contents which you downloaded

00:08:14.546 --> 00:08:15.056 A:middle
earlier.

00:08:15.726 --> 00:08:17.756 A:middle
This full file including white

00:08:17.756 --> 00:08:19.696 A:middle
space, header, and footer,

00:08:20.046 --> 00:08:21.296 A:middle
should be used to sign this

00:08:21.296 --> 00:08:21.776 A:middle
token.

00:08:22.406 --> 00:08:24.516 A:middle
See the documentation for your

00:08:24.516 --> 00:08:26.526 A:middle
JWT signing library for

00:08:26.526 --> 00:08:27.816 A:middle
instructions specific to your

00:08:27.816 --> 00:08:28.686 A:middle
programming language.

00:08:29.986 --> 00:08:32.275 A:middle
Finally, the header section of

00:08:32.275 --> 00:08:35.535 A:middle
the JWT token will contain a KID

00:08:35.535 --> 00:08:38.035 A:middle
claim, which is your MapKit JS

00:08:38.035 --> 00:08:38.606 A:middle
key ID.

00:08:38.606 --> 00:08:40.876 A:middle
Note that this is not the same

00:08:40.876 --> 00:08:42.236 A:middle
as your maps identifier.

00:08:42.486 --> 00:08:45.836 A:middle
A TYP claim, which should be the

00:08:45.836 --> 00:08:48.806 A:middle
string JWT to identify this is a

00:08:48.806 --> 00:08:51.936 A:middle
JWT-style token, and an ALG

00:08:51.936 --> 00:08:53.856 A:middle
claim, which is the hashing

00:08:53.856 --> 00:08:54.926 A:middle
algorithm to use.

00:08:55.566 --> 00:09:00.306 A:middle
This must be set to ES256, which


00:08:55.566 --> 00:09:00.306 A:middle
This must be set to ES256, which

00:09:00.306 --> 00:09:02.276 A:middle
when passed to your JWT signing

00:09:02.276 --> 00:09:05.326 A:middle
library will output a JWT token

00:09:05.656 --> 00:09:07.756 A:middle
ready to be used by MapKit JS.

00:09:08.656 --> 00:09:09.996 A:middle
Since short-lived tokens may

00:09:09.996 --> 00:09:11.706 A:middle
expire before your user is done

00:09:11.706 --> 00:09:13.336 A:middle
with their session, your server

00:09:13.336 --> 00:09:14.926 A:middle
will need to provide an endpoint

00:09:14.926 --> 00:09:16.916 A:middle
for MapKit JS which will respond

00:09:16.916 --> 00:09:18.316 A:middle
to requests to new tokens.

00:09:18.936 --> 00:09:20.426 A:middle
Later, I'll show you how to make

00:09:20.426 --> 00:09:21.906 A:middle
MapKit JS aware of your

00:09:21.906 --> 00:09:23.856 A:middle
endpoint, but for now, here's an

00:09:23.856 --> 00:09:25.286 A:middle
example of an endpoint that I've

00:09:25.286 --> 00:09:27.326 A:middle
created as an express JS route.

00:09:28.556 --> 00:09:30.546 A:middle
This route simply returns a new

00:09:30.546 --> 00:09:32.626 A:middle
access token set to expire in

00:09:32.626 --> 00:09:35.496 A:middle
1800 seconds or 30 minutes every

00:09:35.496 --> 00:09:36.256 A:middle
time it's called.

00:09:36.946 --> 00:09:38.326 A:middle
Regardless of your token's

00:09:38.326 --> 00:09:40.976 A:middle
expiry, MapKit JS will call this

00:09:40.976 --> 00:09:42.456 A:middle
endpoint any time it needs to

00:09:42.456 --> 00:09:44.176 A:middle
authorize throughout a user's

00:09:44.176 --> 00:09:44.966 A:middle
active session.

00:09:46.786 --> 00:09:48.236 A:middle
Since your endpoint needs to

00:09:48.236 --> 00:09:49.896 A:middle
return a new token every time

00:09:49.896 --> 00:09:51.566 A:middle
it's called, you'll need to let

00:09:51.566 --> 00:09:53.166 A:middle
browsers know not to cache.

00:09:53.876 --> 00:09:55.426 A:middle
You can do this by setting cache

00:09:55.426 --> 00:09:56.316 A:middle
control headers.

00:09:57.856 --> 00:09:59.506 A:middle
If set up correctly, you should

00:09:59.506 --> 00:10:00.556 A:middle
have a route on your server


00:09:59.506 --> 00:10:00.556 A:middle
have a route on your server

00:10:00.556 --> 00:10:02.126 A:middle
which returns a token looking

00:10:02.126 --> 00:10:03.076 A:middle
something like this.

00:10:05.576 --> 00:10:06.956 A:middle
A long-lived token is different.

00:10:07.556 --> 00:10:09.096 A:middle
Its expiry is set much further

00:10:09.096 --> 00:10:09.336 A:middle
out.

00:10:09.926 --> 00:10:11.536 A:middle
You can use the same token for

00:10:11.536 --> 00:10:12.956 A:middle
many requests over a longer

00:10:12.956 --> 00:10:13.696 A:middle
period of time.

00:10:14.446 --> 00:10:15.876 A:middle
This type of token doesn't

00:10:15.876 --> 00:10:18.126 A:middle
require a server since the token

00:10:18.126 --> 00:10:19.936 A:middle
is not likely to expire during a

00:10:19.936 --> 00:10:20.776 A:middle
user's session.

00:10:21.396 --> 00:10:23.866 A:middle
For that reason, it can be

00:10:23.866 --> 00:10:25.886 A:middle
easily used on static websites

00:10:25.886 --> 00:10:27.146 A:middle
or in development environments.

00:10:28.006 --> 00:10:29.846 A:middle
You can sync expiration and

00:10:29.846 --> 00:10:31.916 A:middle
renewal of this token with your

00:10:31.916 --> 00:10:32.756 A:middle
release cycle.

00:10:33.276 --> 00:10:34.776 A:middle
We strongly recommend that you

00:10:34.776 --> 00:10:36.236 A:middle
attach an origin claim to

00:10:36.236 --> 00:10:37.246 A:middle
long-lived tokens.

00:10:37.666 --> 00:10:38.676 A:middle
Let's see how this is done.

00:10:38.676 --> 00:10:42.246 A:middle
In this example, we set

00:10:42.246 --> 00:10:43.946 A:middle
long-lived tokens to expire in

00:10:43.946 --> 00:10:44.656 A:middle
six months.

00:10:45.356 --> 00:10:47.216 A:middle
As I said before, you can tailor

00:10:47.216 --> 00:10:48.326 A:middle
this to your application's

00:10:48.326 --> 00:10:48.746 A:middle
needs.

00:10:49.366 --> 00:10:51.006 A:middle
For example, if your team has a

00:10:51.006 --> 00:10:53.246 A:middle
two-week release cycle, you can

00:10:53.246 --> 00:10:54.966 A:middle
set your expectation to sync

00:10:54.966 --> 00:10:57.186 A:middle
with that or even add a couple

00:10:57.186 --> 00:10:58.166 A:middle
weeks as a buffer.

00:10:59.626 --> 00:11:02.246 A:middle
Setting the origin claim is


00:10:59.626 --> 00:11:02.246 A:middle
Setting the origin claim is

00:11:02.246 --> 00:11:03.656 A:middle
always recommended, but

00:11:03.656 --> 00:11:05.296 A:middle
especially on tokens with long

00:11:05.296 --> 00:11:05.956 A:middle
expiry.

00:11:06.276 --> 00:11:07.756 A:middle
This is your strongest defense

00:11:07.756 --> 00:11:08.826 A:middle
against misuse of your

00:11:08.826 --> 00:11:09.426 A:middle
credentials.

00:11:11.236 --> 00:11:12.886 A:middle
Now with this token handy, we're

00:11:12.886 --> 00:11:13.756 A:middle
ready to make a map.

00:11:15.546 --> 00:11:17.096 A:middle
The simplest example of this is

00:11:17.096 --> 00:11:18.586 A:middle
to create an HTML page,

00:11:19.266 --> 00:11:21.946 A:middle
including a script tag linking

00:11:21.946 --> 00:11:24.376 A:middle
to MapKit JS on the Apple CDN.

00:11:26.116 --> 00:11:27.286 A:middle
Remember when I said that I

00:11:27.286 --> 00:11:28.476 A:middle
would show you how to make

00:11:28.476 --> 00:11:30.446 A:middle
MapKit JS aware of your token

00:11:30.446 --> 00:11:31.036 A:middle
endpoint?

00:11:31.116 --> 00:11:33.426 A:middle
That happens when you provide a

00:11:33.426 --> 00:11:35.166 A:middle
callback function when you

00:11:35.166 --> 00:11:36.776 A:middle
initialize MapKit JS.

00:11:37.586 --> 00:11:39.736 A:middle
For short-lived tokens, MapKit

00:11:39.736 --> 00:11:41.316 A:middle
JS will fetch new tokens as

00:11:41.316 --> 00:11:42.886 A:middle
needed throughout an active

00:11:42.886 --> 00:11:43.686 A:middle
user's session.

00:11:46.326 --> 00:11:48.866 A:middle
Note that when MapKit JS invokes

00:11:48.866 --> 00:11:50.726 A:middle
your callback function, it'll

00:11:50.726 --> 00:11:52.676 A:middle
pass it a function, which for

00:11:52.676 --> 00:11:54.256 A:middle
this example we're calling done.

00:11:55.166 --> 00:11:56.826 A:middle
Call this function with your new

00:11:56.826 --> 00:11:58.956 A:middle
token to allow MapKit JS to

00:11:58.956 --> 00:12:00.706 A:middle
proceed with the authorization


00:11:58.956 --> 00:12:00.706 A:middle
proceed with the authorization

00:12:00.706 --> 00:12:01.306 A:middle
process.

00:12:03.366 --> 00:12:04.516 A:middle
If you're using long-lived

00:12:04.516 --> 00:12:06.416 A:middle
tokens, simply call the done

00:12:06.416 --> 00:12:08.136 A:middle
function immediately in the body

00:12:08.136 --> 00:12:09.846 A:middle
of the authorization callback

00:12:09.846 --> 00:12:10.406 A:middle
function.

00:12:11.146 --> 00:12:12.936 A:middle
MapKit JS will use the same

00:12:12.936 --> 00:12:14.846 A:middle
long-lived token any time it

00:12:14.846 --> 00:12:16.756 A:middle
needs to refresh its

00:12:16.756 --> 00:12:17.536 A:middle
authorization.

00:12:19.526 --> 00:12:21.976 A:middle
Finally, set a map container and

00:12:21.976 --> 00:12:23.016 A:middle
center for your map.

00:12:25.896 --> 00:12:27.656 A:middle
Now, let's start our server and

00:12:27.656 --> 00:12:28.756 A:middle
see this all in action.

00:12:31.176 --> 00:12:32.206 A:middle
If everything is set up

00:12:32.206 --> 00:12:33.996 A:middle
correctly, your browser should

00:12:33.996 --> 00:12:34.756 A:middle
display a map.

00:12:36.686 --> 00:12:37.836 A:middle
If you're using short-lived

00:12:37.836 --> 00:12:40.276 A:middle
tokens in the web inspector, you

00:12:40.276 --> 00:12:42.576 A:middle
should see a server endpoint

00:12:42.576 --> 00:12:44.466 A:middle
being called, returning an

00:12:44.466 --> 00:12:45.626 A:middle
authorization token.

00:12:46.876 --> 00:12:48.516 A:middle
Now that MapKit JS has its

00:12:48.516 --> 00:12:49.996 A:middle
authorization, it'll do the

00:12:49.996 --> 00:12:50.416 A:middle
rest.

00:12:51.146 --> 00:12:53.816 A:middle
MapKit JS will request from your

00:12:53.916 --> 00:12:55.166 A:middle
route whenever it needs a new

00:12:55.166 --> 00:12:55.666 A:middle
token.

00:12:57.896 --> 00:12:59.926 A:middle
So now you know how MapKit JS

00:12:59.926 --> 00:13:01.066 A:middle
authorization works.


00:12:59.926 --> 00:13:01.066 A:middle
authorization works.

00:13:02.086 --> 00:13:03.756 A:middle
You know how to create a MapKit

00:13:03.756 --> 00:13:07.016 A:middle
JS key, create an authorization

00:13:07.016 --> 00:13:09.836 A:middle
token, as well as how to make a

00:13:09.836 --> 00:13:11.706 A:middle
map initialized with your new

00:13:11.706 --> 00:13:12.176 A:middle
token.

00:13:14.346 --> 00:13:17.056 A:middle
Remember, get your MapKit JS key

00:13:17.056 --> 00:13:18.476 A:middle
and store it in a safe place.

00:13:19.086 --> 00:13:21.106 A:middle
Only send authorization tokens

00:13:21.166 --> 00:13:21.736 A:middle
over the web.

00:13:22.846 --> 00:13:24.466 A:middle
If a key becomes compromised,

00:13:24.806 --> 00:13:26.556 A:middle
revoke it on the Apple Developer

00:13:26.556 --> 00:13:28.426 A:middle
website as soon as you've

00:13:28.426 --> 00:13:30.246 A:middle
created and updated your website

00:13:30.246 --> 00:13:31.076 A:middle
with a replacement.

00:13:32.866 --> 00:13:35.006 A:middle
For more information, visit

00:13:35.066 --> 00:13:41.316 A:middle
developer.apple.com/wwdc18/508.

00:13:41.316 --> 00:13:44.846 A:middle
Have a look at our session,

00:13:44.996 --> 00:13:46.546 A:middle
Introducing MapKit JS, in the

00:13:46.546 --> 00:13:48.806 A:middle
Executive Ballroom on Tuesday at

00:13:48.806 --> 00:13:49.776 A:middle
5:00 PM.

00:13:50.856 --> 00:13:51.296 A:middle
Thank you.
