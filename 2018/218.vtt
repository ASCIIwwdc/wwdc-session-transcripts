WEBVTT

00:00:07.516 --> 00:00:17.156 A:middle
[ Music ]

00:00:17.656 --> 00:00:18.916 A:middle
&gt;&gt; Good morning, everyone.

00:00:19.016 --> 00:00:20.436 A:middle
[ Applause ]

00:00:20.436 --> 00:00:20.666 A:middle
Wow.

00:00:22.786 --> 00:00:23.206 A:middle
Thank you.

00:00:24.616 --> 00:00:26.046 A:middle
Welcome to Advanced Dark Mode.

00:00:26.696 --> 00:00:27.786 A:middle
I'm Matt Jacobson.

00:00:27.786 --> 00:00:29.336 A:middle
I'll be joined later on stage by

00:00:29.336 --> 00:00:30.366 A:middle
my colleague, Jeff Nadeau.

00:00:30.966 --> 00:00:32.136 A:middle
We're engineers in the Cocoa

00:00:32.136 --> 00:00:33.286 A:middle
Frameworks group at Apple.

00:00:34.516 --> 00:00:36.576 A:middle
We are super excited to talk to

00:00:36.576 --> 00:00:39.076 A:middle
you today about the awesome Dark

00:00:39.076 --> 00:00:40.086 A:middle
Mode in Mojave.

00:00:40.666 --> 00:00:45.976 A:middle
Now, in the intro session

00:00:45.976 --> 00:00:48.326 A:middle
yesterday, you learned all the

00:00:48.326 --> 00:00:50.266 A:middle
things you need to get started

00:00:50.266 --> 00:00:51.936 A:middle
adapting your app for Dark Mode,

00:00:52.526 --> 00:00:54.356 A:middle
like rebuilding on the macOS

00:00:54.356 --> 00:00:55.456 A:middle
10.14 SDK.

00:00:55.456 --> 00:00:58.676 A:middle
Making use of dynamic colors

00:00:58.676 --> 00:01:00.426 A:middle
instead of static or hardcoded


00:00:58.676 --> 00:01:00.426 A:middle
instead of static or hardcoded

00:01:00.426 --> 00:01:00.966 A:middle
colors.

00:01:01.916 --> 00:01:03.406 A:middle
Making correct use of template

00:01:03.406 --> 00:01:04.796 A:middle
images and materials.

00:01:05.456 --> 00:01:07.516 A:middle
And, most of all, making use of

00:01:07.516 --> 00:01:09.876 A:middle
the new features in Xcode 10 to

00:01:09.876 --> 00:01:11.966 A:middle
define custom color and image

00:01:11.966 --> 00:01:14.046 A:middle
assets specifically for Dark

00:01:14.046 --> 00:01:14.216 A:middle
Mode.

00:01:15.176 --> 00:01:17.636 A:middle
Now, if you need a review on any

00:01:17.636 --> 00:01:18.726 A:middle
of those topics, I highly

00:01:18.726 --> 00:01:20.236 A:middle
recommend going back and

00:01:20.236 --> 00:01:21.406 A:middle
watching the intro session on

00:01:21.406 --> 00:01:22.026 A:middle
video later.

00:01:24.486 --> 00:01:27.296 A:middle
Now, most UI will look great in

00:01:27.296 --> 00:01:28.686 A:middle
Dark Mode using just those

00:01:28.716 --> 00:01:29.266 A:middle
techniques.

00:01:29.586 --> 00:01:31.386 A:middle
In fact, some of our system apps

00:01:31.386 --> 00:01:32.796 A:middle
required no other changes.

00:01:32.796 --> 00:01:33.326 A:middle
It was great.

00:01:34.636 --> 00:01:36.016 A:middle
But we know some cases will

00:01:36.016 --> 00:01:37.436 A:middle
require a little bit more work

00:01:37.756 --> 00:01:38.626 A:middle
and that's what we're going to

00:01:38.626 --> 00:01:39.686 A:middle
get into in this session.

00:01:43.696 --> 00:01:46.266 A:middle
We're going to cover six main

00:01:46.266 --> 00:01:46.956 A:middle
areas today.

00:01:47.716 --> 00:01:49.806 A:middle
First, the appearance system,

00:01:50.266 --> 00:01:51.826 A:middle
how it works, and how you can

00:01:51.826 --> 00:01:53.086 A:middle
make use of it in your custom

00:01:53.086 --> 00:01:53.596 A:middle
views.

00:01:54.716 --> 00:01:57.236 A:middle
Second, materials, what they

00:01:57.236 --> 00:01:59.406 A:middle
are, and how you can best make

00:01:59.406 --> 00:02:01.836 A:middle
use of them in your UI.


00:01:59.406 --> 00:02:01.836 A:middle
use of them in your UI.

00:02:02.006 --> 00:02:03.296 A:middle
Then I'll hand it over to Jeff

00:02:03.296 --> 00:02:05.296 A:middle
and he'll talk about vibrant

00:02:05.296 --> 00:02:06.716 A:middle
blending, which is an awesome

00:02:06.716 --> 00:02:07.946 A:middle
way to make your views look

00:02:08.056 --> 00:02:08.446 A:middle
great.

00:02:09.696 --> 00:02:11.576 A:middle
As well as reacting correctly to

00:02:11.576 --> 00:02:13.336 A:middle
selection using something called

00:02:13.446 --> 00:02:14.236 A:middle
background style.

00:02:15.526 --> 00:02:17.096 A:middle
Finally, he'll wrap it up with

00:02:17.526 --> 00:02:19.376 A:middle
some discussion on how to back

00:02:19.596 --> 00:02:21.036 A:middle
deploy your app to older

00:02:21.036 --> 00:02:22.916 A:middle
versions of macOS while still

00:02:22.916 --> 00:02:25.006 A:middle
supporting Dark Mode, as well as

00:02:25.006 --> 00:02:26.956 A:middle
some general tips and tricks for

00:02:27.026 --> 00:02:28.606 A:middle
polishing your apps for Dark

00:02:28.606 --> 00:02:28.796 A:middle
Mode.

00:02:30.346 --> 00:02:30.966 A:middle
All right.

00:02:30.966 --> 00:02:33.006 A:middle
Let's get started.

00:02:33.146 --> 00:02:36.296 A:middle
So, in Mojave, your app will

00:02:36.296 --> 00:02:38.886 A:middle
need to look great in light and

00:02:38.886 --> 00:02:39.106 A:middle
dark.

00:02:40.026 --> 00:02:41.626 A:middle
And the way you'll do that is

00:02:41.626 --> 00:02:42.726 A:middle
using something called

00:02:42.916 --> 00:02:44.006 A:middle
NSAppearance.

00:02:45.186 --> 00:02:47.396 A:middle
NSAppearance is the theme system

00:02:47.596 --> 00:02:49.906 A:middle
used throughout Cocoa and the

00:02:49.906 --> 00:02:51.966 A:middle
key part about it is you only

00:02:51.966 --> 00:02:53.416 A:middle
have to maintain a single view

00:02:53.416 --> 00:02:55.066 A:middle
hierarchy and NSAppearance will

00:02:55.066 --> 00:02:57.176 A:middle
help it look great in light and

00:02:57.176 --> 00:02:57.536 A:middle
dark.

00:02:59.186 --> 00:03:01.956 A:middle
Now, in addition to being at the


00:02:59.186 --> 00:03:01.956 A:middle
Now, in addition to being at the

00:03:01.956 --> 00:03:03.976 A:middle
core of Dark Mode, we've already

00:03:03.976 --> 00:03:05.426 A:middle
been using NSAppearance for

00:03:05.426 --> 00:03:06.936 A:middle
several years and it's underlied

00:03:06.936 --> 00:03:08.316 A:middle
[phonetic] such features as the

00:03:08.316 --> 00:03:10.636 A:middle
high contrast mode of macOS as

00:03:10.636 --> 00:03:12.376 A:middle
well as the touch bar UI

00:03:12.616 --> 00:03:14.266 A:middle
designed specifically for that

00:03:14.266 --> 00:03:15.266 A:middle
awesome piece of hardware.

00:03:16.116 --> 00:03:20.056 A:middle
Now, previously we've had one

00:03:20.196 --> 00:03:21.726 A:middle
main appearance, one main light

00:03:21.726 --> 00:03:23.546 A:middle
appearance for aqua windows and

00:03:23.546 --> 00:03:24.226 A:middle
we called aqua.

00:03:24.816 --> 00:03:26.336 A:middle
And, of course, in 10.14, we're

00:03:26.336 --> 00:03:27.806 A:middle
introducing a second appearance

00:03:27.806 --> 00:03:29.636 A:middle
for aqua windows for Dark Mode

00:03:30.166 --> 00:03:30.966 A:middle
called darkAqua.

00:03:32.346 --> 00:03:33.916 A:middle
These objects contain all the

00:03:33.916 --> 00:03:35.556 A:middle
assets that views draw with.

00:03:36.336 --> 00:03:38.036 A:middle
So, any time you use system

00:03:38.036 --> 00:03:39.886 A:middle
dynamic colors or standard

00:03:39.886 --> 00:03:42.226 A:middle
effects or named images or even

00:03:42.226 --> 00:03:43.606 A:middle
just standard Cocoa controls,

00:03:43.786 --> 00:03:45.076 A:middle
this is where all that stuff is

00:03:45.166 --> 00:03:45.746 A:middle
coming from.

00:03:46.166 --> 00:03:49.436 A:middle
And AppKit will automatically

00:03:49.436 --> 00:03:51.486 A:middle
provide appearances for all of

00:03:51.486 --> 00:03:53.646 A:middle
you views and windows based on

00:03:53.646 --> 00:03:55.136 A:middle
the user's light/dark preference

00:03:55.136 --> 00:03:56.796 A:middle
in system preferences once you

00:03:56.796 --> 00:03:59.326 A:middle
link on the macOS 10.14 SDK.


00:04:00.046 --> 00:04:02.056 A:middle
So, here's our beautiful

00:04:02.356 --> 00:04:03.786 A:middle
Chameleon Wrangler app that

00:04:03.896 --> 00:04:06.916 A:middle
Rachel and Taylor created in the

00:04:06.916 --> 00:04:08.646 A:middle
intro session and you can see

00:04:08.776 --> 00:04:10.096 A:middle
once we linked it on the macOS

00:04:10.096 --> 00:04:13.046 A:middle
10.14 SDK, AppKit went ahead and

00:04:13.106 --> 00:04:14.506 A:middle
automatically gave it the

00:04:14.506 --> 00:04:15.526 A:middle
darkAqua appearance.

00:04:16.676 --> 00:04:18.196 A:middle
Now, that's great, but what if

00:04:18.196 --> 00:04:19.315 A:middle
we want to change the

00:04:19.315 --> 00:04:20.005 A:middle
appearance?

00:04:20.296 --> 00:04:22.106 A:middle
For example, what if we wanted

00:04:22.676 --> 00:04:25.266 A:middle
to change the appearance of this

00:04:25.266 --> 00:04:25.986 A:middle
notes view?

00:04:26.736 --> 00:04:29.136 A:middle
We might think that in the dark

00:04:29.136 --> 00:04:30.946 A:middle
appearance we still might want

00:04:30.946 --> 00:04:32.636 A:middle
the notes view to appear light.

00:04:33.856 --> 00:04:35.626 A:middle
Well, you can do that using

00:04:35.626 --> 00:04:37.146 A:middle
something called

00:04:37.146 --> 00:04:38.786 A:middle
NSAppearanceCustomization.

00:04:39.626 --> 00:04:41.026 A:middle
Now, this is a protocol, but

00:04:41.026 --> 00:04:42.386 A:middle
it's not a protocol you have to

00:04:42.386 --> 00:04:43.616 A:middle
go off and adopt in your

00:04:43.616 --> 00:04:44.376 A:middle
applications.

00:04:45.266 --> 00:04:47.486 A:middle
It's already adopted by NSView

00:04:47.786 --> 00:04:50.226 A:middle
and NSWindow and, in Mojave,

00:04:50.226 --> 00:04:52.116 A:middle
NSApplication conforms as well.

00:04:53.086 --> 00:04:54.556 A:middle
It's a pretty simple protocol.

00:04:54.706 --> 00:04:55.956 A:middle
It just adds two properties.

00:04:56.466 --> 00:04:58.946 A:middle
First property is appearance and

00:04:58.946 --> 00:05:00.336 A:middle
this is where you can override


00:04:58.946 --> 00:05:00.336 A:middle
this is where you can override

00:05:00.336 --> 00:05:01.916 A:middle
the appearance for a particular

00:05:01.916 --> 00:05:02.386 A:middle
object.

00:05:03.346 --> 00:05:05.066 A:middle
Now, it's an optional

00:05:05.116 --> 00:05:07.696 A:middle
NSAppearance because, if you set

00:05:07.696 --> 00:05:09.216 A:middle
it to nil, the object will

00:05:09.216 --> 00:05:10.716 A:middle
simply inherit its appearance

00:05:10.916 --> 00:05:11.886 A:middle
from its ancestors.

00:05:13.496 --> 00:05:15.346 A:middle
There's also effective

00:05:15.346 --> 00:05:17.356 A:middle
appearance and this is a

00:05:17.476 --> 00:05:19.456 A:middle
read-only property that you can

00:05:19.456 --> 00:05:21.806 A:middle
use to find out what appearance

00:05:22.006 --> 00:05:22.976 A:middle
a view will draw with.

00:05:23.516 --> 00:05:26.986 A:middle
And of course, to use this,

00:05:26.986 --> 00:05:28.346 A:middle
you'll have to get the right

00:05:28.346 --> 00:05:30.086 A:middle
NSAppearance object and you can

00:05:30.086 --> 00:05:32.216 A:middle
do that pretty easily using the

00:05:32.216 --> 00:05:34.456 A:middle
NSAppearance named initializer.

00:05:34.896 --> 00:05:38.416 A:middle
Just pass aqua or darkAqua based

00:05:38.416 --> 00:05:40.166 A:middle
on which appearance you want and

00:05:41.576 --> 00:05:42.996 A:middle
then you can go ahead and just

00:05:42.996 --> 00:05:44.396 A:middle
assign that to the appearance

00:05:44.396 --> 00:05:45.886 A:middle
property of the object that

00:05:45.886 --> 00:05:46.936 A:middle
you'd like to customize.

00:05:47.106 --> 00:05:49.046 A:middle
So, in this case, we'll assign

00:05:49.136 --> 00:05:51.466 A:middle
the aqua appearance to the

00:05:51.466 --> 00:05:52.826 A:middle
appearance property of the text

00:05:52.826 --> 00:05:54.416 A:middle
view and now it uses the light

00:05:54.416 --> 00:05:54.996 A:middle
appearance.

00:05:54.996 --> 00:05:55.646 A:middle
All right.

00:05:56.956 --> 00:05:59.836 A:middle
That was pretty easy, so let's

00:05:59.836 --> 00:06:00.986 A:middle
take a look at another case.


00:05:59.836 --> 00:06:00.986 A:middle
take a look at another case.

00:06:02.186 --> 00:06:04.626 A:middle
You might have a window that

00:06:04.836 --> 00:06:06.076 A:middle
kind of hangs off of a

00:06:06.076 --> 00:06:07.026 A:middle
particular view.

00:06:07.936 --> 00:06:09.306 A:middle
And you probably want its

00:06:09.306 --> 00:06:11.236 A:middle
appearance to match the view it

00:06:11.236 --> 00:06:12.016 A:middle
hangs off of.

00:06:12.886 --> 00:06:15.196 A:middle
Now, we could just assign the

00:06:15.196 --> 00:06:16.446 A:middle
aqua appearance to this window

00:06:16.476 --> 00:06:17.756 A:middle
just like we did to the view,

00:06:18.766 --> 00:06:20.316 A:middle
but what we really want is

00:06:20.616 --> 00:06:21.636 A:middle
something a little stronger.

00:06:21.636 --> 00:06:23.196 A:middle
We want its appearance to

00:06:23.196 --> 00:06:26.576 A:middle
inherit from the view and we can

00:06:26.576 --> 00:06:28.716 A:middle
do that-- first of all, AppKit

00:06:28.716 --> 00:06:30.316 A:middle
will automatically do this for

00:06:30.316 --> 00:06:31.696 A:middle
us for a number of common

00:06:31.696 --> 00:06:34.586 A:middle
windows, like menus, popovers,

00:06:34.626 --> 00:06:36.546 A:middle
tool tips, and sheets, so you

00:06:36.546 --> 00:06:37.456 A:middle
don't have to worry about it in

00:06:37.456 --> 00:06:38.156 A:middle
those cases.

00:06:39.286 --> 00:06:40.966 A:middle
But, for custom cases like this,

00:06:41.476 --> 00:06:43.266 A:middle
there's new API in Mojave that

00:06:43.266 --> 00:06:45.436 A:middle
you can use to do this.

00:06:46.746 --> 00:06:48.256 A:middle
It's called Appearance Source.

00:06:49.486 --> 00:06:51.746 A:middle
Now, this is a property that

00:06:51.746 --> 00:06:54.446 A:middle
takes any object that conforms

00:06:54.446 --> 00:06:54.776 A:middle
to that

00:06:54.856 --> 00:06:55.976 A:middle
NSAppearanceCustomization

00:06:55.976 --> 00:06:57.386 A:middle
protocol-- so, views and

00:06:57.386 --> 00:07:00.506 A:middle
windows-- and you just assign it


00:06:57.386 --> 00:07:00.506 A:middle
windows-- and you just assign it

00:07:00.506 --> 00:07:03.926 A:middle
to the appearanceSource property

00:07:04.496 --> 00:07:06.176 A:middle
and the window will inherit its

00:07:06.176 --> 00:07:07.526 A:middle
appearance from that object.

00:07:08.146 --> 00:07:11.516 A:middle
So, in this case, we'll assign

00:07:11.516 --> 00:07:12.636 A:middle
the text view to the

00:07:12.636 --> 00:07:14.926 A:middle
appearanceSource property of

00:07:14.926 --> 00:07:16.816 A:middle
that child window and now it's

00:07:16.816 --> 00:07:18.186 A:middle
appearance will always inherit

00:07:18.186 --> 00:07:19.956 A:middle
from that view no matter what it

00:07:20.656 --> 00:07:20.746 A:middle
is.

00:07:22.476 --> 00:07:24.826 A:middle
In fact, you should think of the

00:07:24.826 --> 00:07:26.616 A:middle
appearance system as a sort of

00:07:26.616 --> 00:07:27.316 A:middle
hierarchy.

00:07:27.986 --> 00:07:29.666 A:middle
Similar to the view hierarchy

00:07:29.706 --> 00:07:30.926 A:middle
you're probably familiar with,

00:07:31.016 --> 00:07:32.726 A:middle
but extending to windows and the

00:07:32.726 --> 00:07:33.756 A:middle
application as well.

00:07:34.896 --> 00:07:37.196 A:middle
And when we ask AppKit for a

00:07:37.196 --> 00:07:38.686 A:middle
view's effective appearance,

00:07:39.916 --> 00:07:41.806 A:middle
AppKit will simply walk up this

00:07:41.806 --> 00:07:43.646 A:middle
hierarchy until it finds an

00:07:43.646 --> 00:07:45.116 A:middle
object with a specified

00:07:45.116 --> 00:07:47.486 A:middle
appearance and that's the

00:07:47.486 --> 00:07:48.546 A:middle
appearance we'll use.

00:07:49.096 --> 00:07:49.196 A:middle
OK.

00:07:50.476 --> 00:07:53.326 A:middle
So, now that we know how objects

00:07:53.376 --> 00:07:54.406 A:middle
get an appearance and how the

00:07:54.406 --> 00:07:55.876 A:middle
appearance system works, let's

00:07:55.876 --> 00:07:57.156 A:middle
talk about how you can use it in

00:07:57.156 --> 00:07:58.676 A:middle
your custom views and controls.

00:07:59.156 --> 00:08:00.876 A:middle
Here's an example.


00:07:59.156 --> 00:08:00.876 A:middle
Here's an example.

00:08:00.876 --> 00:08:02.736 A:middle
Let's say I wanted this custom

00:08:02.736 --> 00:08:04.956 A:middle
header view here to use a

00:08:04.956 --> 00:08:07.176 A:middle
different color in light and

00:08:07.176 --> 00:08:07.956 A:middle
dark appearance.

00:08:09.246 --> 00:08:11.136 A:middle
Now, we already know in Xcode 10

00:08:11.426 --> 00:08:13.366 A:middle
I can go into the asset catalog

00:08:13.366 --> 00:08:15.656 A:middle
editor and specify specific

00:08:15.656 --> 00:08:17.566 A:middle
color assets for light and dark.

00:08:18.266 --> 00:08:21.036 A:middle
But then how do I use that in my

00:08:21.036 --> 00:08:21.676 A:middle
custom view?

00:08:22.886 --> 00:08:24.866 A:middle
Well, here's one way that seems

00:08:24.866 --> 00:08:26.916 A:middle
tempting but won't work and I'll

00:08:26.916 --> 00:08:27.486 A:middle
show you why.

00:08:28.516 --> 00:08:30.156 A:middle
First, we'll add an NSColor

00:08:30.156 --> 00:08:31.196 A:middle
property to our view.

00:08:32.535 --> 00:08:34.916 A:middle
And in init, we'll use that

00:08:34.916 --> 00:08:37.736 A:middle
color to populate our layer.

00:08:38.216 --> 00:08:41.606 A:middle
And if the color changes, we'll

00:08:41.606 --> 00:08:42.846 A:middle
go ahead and update our layer

00:08:42.846 --> 00:08:43.316 A:middle
there too.

00:08:44.646 --> 00:08:45.546 A:middle
Let's try that out.

00:08:46.936 --> 00:08:48.356 A:middle
OK. It looks pretty good in

00:08:48.356 --> 00:08:51.666 A:middle
light, but if we switch to dark,

00:08:51.666 --> 00:08:52.726 A:middle
we can see our color didn't

00:08:52.726 --> 00:08:53.786 A:middle
actually change.

00:08:55.016 --> 00:08:56.316 A:middle
And that's because even though

00:08:56.316 --> 00:08:59.016 A:middle
our NSColor is dynamic, the CG

00:08:59.016 --> 00:09:00.496 A:middle
color that we get from it is


00:08:59.016 --> 00:09:00.496 A:middle
color that we get from it is

00:09:00.496 --> 00:09:00.906 A:middle
static.

00:09:00.906 --> 00:09:02.146 A:middle
It won't change for the

00:09:02.146 --> 00:09:02.816 A:middle
appearance.

00:09:03.806 --> 00:09:05.666 A:middle
And, since we configured our

00:09:05.666 --> 00:09:08.076 A:middle
layer in our initializer, we

00:09:08.076 --> 00:09:09.206 A:middle
didn't get a chance to run any

00:09:09.206 --> 00:09:10.916 A:middle
code when the appearance

00:09:10.916 --> 00:09:11.396 A:middle
changed.

00:09:11.946 --> 00:09:14.616 A:middle
Now, the key takeaway from this

00:09:14.616 --> 00:09:15.686 A:middle
is you need to do your

00:09:15.846 --> 00:09:17.766 A:middle
appearance sensitive work in

00:09:17.886 --> 00:09:19.086 A:middle
specific areas.

00:09:19.666 --> 00:09:21.576 A:middle
Specifically, the update

00:09:21.576 --> 00:09:23.936 A:middle
constraints, layout, draw, and

00:09:23.986 --> 00:09:26.336 A:middle
update layer methods of NSView.

00:09:27.616 --> 00:09:29.406 A:middle
Now, AppKit will automatically

00:09:29.486 --> 00:09:30.956 A:middle
call these methods as needed

00:09:31.196 --> 00:09:32.446 A:middle
when the appearance changes.

00:09:32.996 --> 00:09:34.246 A:middle
And if you need to trigger them

00:09:34.246 --> 00:09:35.746 A:middle
manually, of course you can

00:09:35.846 --> 00:09:36.586 A:middle
always use the

00:09:36.966 --> 00:09:38.296 A:middle
needsUpdateConstraints,

00:09:38.596 --> 00:09:39.926 A:middle
needsLayout, and

00:09:39.926 --> 00:09:42.026 A:middle
needsDisplayProperties and

00:09:42.026 --> 00:09:44.306 A:middle
AppKit will automatically call

00:09:45.696 --> 00:09:45.806 A:middle
them.

00:09:46.146 --> 00:09:46.896 A:middle
So, let's go back to our

00:09:46.896 --> 00:09:47.296 A:middle
example.

00:09:48.616 --> 00:09:50.196 A:middle
Instead of overriding init,

00:09:50.856 --> 00:09:53.666 A:middle
we'll implement updateLayer and

00:09:53.666 --> 00:09:56.726 A:middle
there we can go ahead and safely

00:09:57.056 --> 00:09:59.346 A:middle
populate our layer by asking our

00:09:59.346 --> 00:10:00.796 A:middle
NSColor for a CG color.


00:09:59.346 --> 00:10:00.796 A:middle
NSColor for a CG color.

00:10:01.836 --> 00:10:03.436 A:middle
And if our color changes,

00:10:03.606 --> 00:10:05.356 A:middle
instead of updating our layer

00:10:05.356 --> 00:10:07.306 A:middle
right there, we'll just set the

00:10:07.386 --> 00:10:08.946 A:middle
needsDisplay property to true.

00:10:09.426 --> 00:10:10.776 A:middle
AppKit will come back around

00:10:10.856 --> 00:10:12.446 A:middle
automatically and call

00:10:12.446 --> 00:10:12.906 A:middle
updateLayer.

00:10:14.336 --> 00:10:15.076 A:middle
So, let's run it again.

00:10:16.536 --> 00:10:17.426 A:middle
Still looks good in light.

00:10:17.426 --> 00:10:21.496 A:middle
And now it uses the correct

00:10:21.496 --> 00:10:22.896 A:middle
color in dark just like we

00:10:22.896 --> 00:10:24.706 A:middle
wanted, so that's great.

00:10:25.976 --> 00:10:27.216 A:middle
Now, what if we want to do

00:10:27.216 --> 00:10:28.146 A:middle
something a little more

00:10:28.146 --> 00:10:29.826 A:middle
complicated that might not be

00:10:29.826 --> 00:10:31.486 A:middle
expressible just with dynamic

00:10:31.706 --> 00:10:32.576 A:middle
colors or images?

00:10:33.656 --> 00:10:35.796 A:middle
For example, maybe I would like

00:10:35.796 --> 00:10:38.546 A:middle
to add this nice white glow

00:10:38.936 --> 00:10:40.416 A:middle
behind Chloe's beautiful face

00:10:40.416 --> 00:10:42.206 A:middle
here, but only in Dark Mode.

00:10:43.166 --> 00:10:43.796 A:middle
How would I do that?

00:10:44.806 --> 00:10:46.476 A:middle
Well, for cases like that, we

00:10:46.476 --> 00:10:49.166 A:middle
have new API in Mojave that you

00:10:49.166 --> 00:10:50.876 A:middle
can use to match against your

00:10:50.876 --> 00:10:51.686 A:middle
view's appearance.

00:10:51.786 --> 00:10:52.686 A:middle
Let me show you how it works.

00:10:53.856 --> 00:10:56.676 A:middle
So, in this view, I'll override

00:10:56.676 --> 00:10:58.846 A:middle
the layout method and I'll

00:10:58.846 --> 00:11:00.916 A:middle
switch on effectiveAppearance


00:10:58.846 --> 00:11:00.916 A:middle
switch on effectiveAppearance

00:11:01.356 --> 00:11:05.286 A:middle
bestMatch(from:, I'll pass an

00:11:05.286 --> 00:11:06.796 A:middle
array with all of the appearance

00:11:06.796 --> 00:11:08.576 A:middle
names that my view happens to

00:11:08.576 --> 00:11:08.916 A:middle
know about.

00:11:08.976 --> 00:11:11.276 A:middle
In this case, aqua and darkAqua.

00:11:11.806 --> 00:11:14.326 A:middle
Then it's just a matter of

00:11:14.666 --> 00:11:16.606 A:middle
implementing behavior for each

00:11:16.606 --> 00:11:17.416 A:middle
of those appearances.

00:11:17.716 --> 00:11:19.366 A:middle
So, for the aqua appearance,

00:11:19.676 --> 00:11:21.616 A:middle
I'll simply use my imageView

00:11:21.616 --> 00:11:23.856 A:middle
with Chloe's face as a subview.

00:11:24.456 --> 00:11:27.856 A:middle
And for darkAqua, I'll not only

00:11:27.856 --> 00:11:28.786 A:middle
use that imageView, but I'll

00:11:28.786 --> 00:11:30.946 A:middle
also through my glowView behind

00:11:31.536 --> 00:11:31.606 A:middle
it.

00:11:33.736 --> 00:11:35.766 A:middle
Finally, I'll implement a

00:11:35.766 --> 00:11:38.146 A:middle
default case and this is for

00:11:38.146 --> 00:11:40.266 A:middle
appearances my view doesn't know

00:11:40.266 --> 00:11:41.586 A:middle
about and that includes

00:11:41.636 --> 00:11:43.006 A:middle
potential appearances Apple

00:11:43.006 --> 00:11:44.026 A:middle
might come out with in the

00:11:44.086 --> 00:11:44.436 A:middle
future.

00:11:45.076 --> 00:11:45.176 A:middle
OK.

00:11:46.056 --> 00:11:47.536 A:middle
Let's take a look at what it

00:11:47.536 --> 00:11:48.236 A:middle
looks like.

00:11:48.636 --> 00:11:50.696 A:middle
So, there it is in light, no

00:11:50.696 --> 00:11:52.106 A:middle
glow, that's what we wanted.

00:11:52.836 --> 00:11:54.696 A:middle
Switch to dark and we have that

00:11:54.696 --> 00:11:55.006 A:middle
glow.

00:11:55.276 --> 00:11:55.666 A:middle
That's great.

00:11:56.106 --> 00:11:56.266 A:middle
All right.

00:11:58.116 --> 00:11:59.596 A:middle
Let's talk for a minute about

00:11:59.596 --> 00:12:00.746 A:middle
high contrast.


00:11:59.596 --> 00:12:00.746 A:middle
high contrast.

00:12:01.606 --> 00:12:02.716 A:middle
So, I said before that we've

00:12:02.746 --> 00:12:05.256 A:middle
been using NSAppearance for the

00:12:05.256 --> 00:12:07.596 A:middle
high contrast mode of macOS.

00:12:08.176 --> 00:12:10.056 A:middle
And one of the nice side effects

00:12:10.106 --> 00:12:11.196 A:middle
of doing all this work to

00:12:11.196 --> 00:12:12.586 A:middle
support Dark Mode is it makes it

00:12:12.586 --> 00:12:14.416 A:middle
really easy to support high

00:12:14.416 --> 00:12:19.546 A:middle
contrast really well as well.

00:12:19.756 --> 00:12:21.636 A:middle
As a reminder, high contrast is

00:12:21.636 --> 00:12:23.356 A:middle
enabled through the increase

00:12:23.486 --> 00:12:24.846 A:middle
contrast checkbox in system

00:12:24.846 --> 00:12:25.496 A:middle
preferences.

00:12:26.056 --> 00:12:29.586 A:middle
And in this mode, colors are

00:12:29.586 --> 00:12:31.346 A:middle
changed so that control bounds

00:12:31.346 --> 00:12:32.946 A:middle
and other kinds of boundaries

00:12:32.946 --> 00:12:36.366 A:middle
are more easy to see.

00:12:36.856 --> 00:12:38.696 A:middle
Now, in this mode, AppKit

00:12:38.786 --> 00:12:41.286 A:middle
automatically replaces the aqua

00:12:41.286 --> 00:12:43.036 A:middle
and darkAqua appearances with

00:12:43.236 --> 00:12:44.656 A:middle
high contrast counterparts.

00:12:45.186 --> 00:12:46.576 A:middle
Now, these high contrast

00:12:46.576 --> 00:12:48.296 A:middle
appearances inherit from their

00:12:48.296 --> 00:12:50.326 A:middle
normal contrast versions.

00:12:50.836 --> 00:12:53.236 A:middle
So, what that means is any code

00:12:53.236 --> 00:12:54.706 A:middle
you've written to take advantage

00:12:54.706 --> 00:12:56.366 A:middle
of Dark Mode will automatically

00:12:56.396 --> 00:12:58.226 A:middle
apply in high contrast Dark

00:12:58.276 --> 00:12:58.456 A:middle
Mode.


00:13:00.056 --> 00:13:01.676 A:middle
But you can go even further.

00:13:02.606 --> 00:13:04.496 A:middle
In Xcode 10, if you check this

00:13:04.616 --> 00:13:06.216 A:middle
high contrast checkbox in the

00:13:06.216 --> 00:13:08.576 A:middle
asset catalog editor, it'll

00:13:08.576 --> 00:13:10.876 A:middle
allow you to specify color and

00:13:10.876 --> 00:13:13.136 A:middle
image assets specifically for

00:13:13.296 --> 00:13:15.766 A:middle
the high contrast versions of

00:13:15.766 --> 00:13:16.486 A:middle
the appearances.

00:13:17.076 --> 00:13:20.166 A:middle
Now, you can also use those

00:13:20.166 --> 00:13:21.656 A:middle
appearance names in code.

00:13:21.656 --> 00:13:24.676 A:middle
You might be temped to think,

00:13:24.736 --> 00:13:26.286 A:middle
well, great, I'll just pass them

00:13:26.286 --> 00:13:27.716 A:middle
to NSAppearance themed and I'll

00:13:27.716 --> 00:13:29.156 A:middle
get the NSAppearance object and

00:13:29.156 --> 00:13:31.296 A:middle
I'll do something with that, but

00:13:31.296 --> 00:13:31.836 A:middle
that won't work.

00:13:32.876 --> 00:13:34.036 A:middle
Those appearances are only

00:13:34.036 --> 00:13:35.126 A:middle
available through system

00:13:35.126 --> 00:13:35.706 A:middle
preferences.

00:13:36.396 --> 00:13:39.236 A:middle
But what you can do is pass them

00:13:39.236 --> 00:13:41.296 A:middle
to bestMatch(from:) just like we

00:13:41.296 --> 00:13:42.846 A:middle
did before for Dark Mode to

00:13:42.846 --> 00:13:44.816 A:middle
implement custom programmatic

00:13:44.816 --> 00:13:45.246 A:middle
behavior.

00:13:48.166 --> 00:13:48.276 A:middle
OK.

00:13:48.516 --> 00:13:49.706 A:middle
Let's talk for a minute about

00:13:49.706 --> 00:13:50.476 A:middle
sublayers.

00:13:51.256 --> 00:13:52.316 A:middle
I know a lot of you out there

00:13:52.506 --> 00:13:54.646 A:middle
have views that manage their own

00:13:54.646 --> 00:13:56.736 A:middle
sublayers and there are

00:13:56.736 --> 00:13:58.146 A:middle
important things to be aware of

00:13:58.656 --> 00:13:59.866 A:middle
for Dark Mode.


00:14:01.236 --> 00:14:03.316 A:middle
Primarily, you need to know that

00:14:03.566 --> 00:14:05.466 A:middle
custom sublayers will not

00:14:05.716 --> 00:14:07.066 A:middle
inherit your view's appearance

00:14:07.156 --> 00:14:07.936 A:middle
automatically.

00:14:08.586 --> 00:14:12.456 A:middle
Now, the easiest fix for this is

00:14:12.536 --> 00:14:13.656 A:middle
to switch them from being

00:14:13.726 --> 00:14:15.476 A:middle
sublayers to subviews.

00:14:15.626 --> 00:14:17.606 A:middle
If you do that, AppKit will

00:14:17.606 --> 00:14:19.056 A:middle
automatically handle the

00:14:19.226 --> 00:14:22.096 A:middle
appearance inheritance for those

00:14:22.096 --> 00:14:23.826 A:middle
views, just like any other view.

00:14:25.226 --> 00:14:27.186 A:middle
Otherwise, you'll have to manage

00:14:27.186 --> 00:14:29.136 A:middle
those layers manually using a

00:14:29.136 --> 00:14:30.266 A:middle
couple techniques that I'll talk

00:14:30.266 --> 00:14:31.866 A:middle
about now, viewDidChange

00:14:31.866 --> 00:14:33.686 A:middle
EffectiveAppearance and the

00:14:33.686 --> 00:14:35.076 A:middle
concept of the current

00:14:35.076 --> 00:14:35.576 A:middle
appearance.

00:14:36.146 --> 00:14:39.856 A:middle
So, first viewDidChange

00:14:39.856 --> 00:14:40.996 A:middle
EffectiveAppearance.

00:14:41.416 --> 00:14:43.886 A:middle
This is a new method on NSView

00:14:44.186 --> 00:14:47.226 A:middle
that you can override to find

00:14:47.226 --> 00:14:48.896 A:middle
out when your view's effective

00:14:48.896 --> 00:14:49.746 A:middle
appearance changes.

00:14:51.166 --> 00:14:52.246 A:middle
Now, this is a good time to

00:14:52.326 --> 00:14:53.906 A:middle
perform any custom invalidation

00:14:53.906 --> 00:14:56.276 A:middle
you might need to do or drop any

00:14:56.276 --> 00:14:57.426 A:middle
caches that are no longer

00:14:57.426 --> 00:14:57.826 A:middle
relevant.

00:14:58.636 --> 00:15:00.246 A:middle
But remember you don't need to


00:14:58.636 --> 00:15:00.246 A:middle
But remember you don't need to

00:15:00.246 --> 00:15:02.136 A:middle
invalidate the view itself here,

00:15:02.576 --> 00:15:03.736 A:middle
AppKit will do that for you

00:15:03.776 --> 00:15:04.546 A:middle
automatically.

00:15:07.236 --> 00:15:08.676 A:middle
Second, the concept of the

00:15:08.896 --> 00:15:09.726 A:middle
current appearance.

00:15:10.536 --> 00:15:12.796 A:middle
Now, this is a thread local

00:15:12.796 --> 00:15:14.766 A:middle
variable that you can access

00:15:14.796 --> 00:15:16.076 A:middle
through a class property on

00:15:16.076 --> 00:15:16.976 A:middle
NSAppearance.

00:15:17.536 --> 00:15:20.196 A:middle
If you're familiar with concepts

00:15:20.196 --> 00:15:21.576 A:middle
like the current NSGraphics

00:15:21.576 --> 00:15:22.836 A:middle
context or the current

00:15:22.836 --> 00:15:24.516 A:middle
NSProgress, you already know

00:15:24.516 --> 00:15:25.516 A:middle
what I'm talking about.

00:15:25.976 --> 00:15:27.836 A:middle
If not, just remember that this

00:15:27.956 --> 00:15:29.416 A:middle
is the appearance used to

00:15:29.416 --> 00:15:31.476 A:middle
resolve dynamic colors and

00:15:32.096 --> 00:15:32.326 A:middle
images.

00:15:34.076 --> 00:15:35.856 A:middle
AppKit will set up the current

00:15:35.856 --> 00:15:37.386 A:middle
appearance automatically for you

00:15:37.386 --> 00:15:39.146 A:middle
before we call any of those

00:15:39.146 --> 00:15:40.866 A:middle
special NSView methods we talked

00:15:40.866 --> 00:15:41.806 A:middle
about before, like

00:15:41.986 --> 00:15:44.286 A:middle
updateConstraints, layout, draw,

00:15:44.286 --> 00:15:47.116 A:middle
and updateLayer, but you can

00:15:47.166 --> 00:15:49.076 A:middle
also set it up yourself where

00:15:49.076 --> 00:15:50.656 A:middle
necessary and let's take a look

00:15:50.656 --> 00:15:51.796 A:middle
at an example why you might do

00:15:51.796 --> 00:15:52.046 A:middle
that.

00:15:55.396 --> 00:15:57.146 A:middle
So, here's a custom that

00:15:57.146 --> 00:15:58.576 A:middle
maintains some sublayers.


00:16:00.416 --> 00:16:02.066 A:middle
I'll override this new

00:16:02.266 --> 00:16:03.206 A:middle
viewDidChange

00:16:03.206 --> 00:16:05.966 A:middle
EffectiveAppearance method and

00:16:05.966 --> 00:16:07.416 A:middle
I'll set my sublayer

00:16:07.416 --> 00:16:08.176 A:middle
needsDisplay.

00:16:08.986 --> 00:16:10.626 A:middle
Now, if I didn't do this, my

00:16:10.626 --> 00:16:12.586 A:middle
sublayer wouldn't update when my

00:16:12.586 --> 00:16:13.626 A:middle
view's effective appearance

00:16:13.626 --> 00:16:14.066 A:middle
changed.

00:16:14.156 --> 00:16:15.106 A:middle
It would just stay the same.

00:16:15.136 --> 00:16:19.096 A:middle
And then in my layer delegate

00:16:19.096 --> 00:16:21.106 A:middle
routine, I'll save off the

00:16:21.106 --> 00:16:22.996 A:middle
current appearance for later and

00:16:22.996 --> 00:16:24.546 A:middle
then I'll go ahead and set the

00:16:24.546 --> 00:16:26.286 A:middle
current appearance to my view's

00:16:26.336 --> 00:16:27.376 A:middle
effective appearance.

00:16:27.906 --> 00:16:31.276 A:middle
Then I can go ahead and update

00:16:31.276 --> 00:16:31.706 A:middle
my layer.

00:16:32.316 --> 00:16:34.306 A:middle
Now, if I hadn't set the current

00:16:34.306 --> 00:16:36.316 A:middle
appearance before this, this

00:16:36.316 --> 00:16:38.016 A:middle
code wouldn't be using my view's

00:16:38.016 --> 00:16:39.456 A:middle
appearance and so it would end

00:16:39.456 --> 00:16:40.346 A:middle
up looking wrong.

00:16:41.556 --> 00:16:42.956 A:middle
Finally, when I'm done, I'll

00:16:42.956 --> 00:16:44.626 A:middle
just restore the old current

00:16:44.626 --> 00:16:45.136 A:middle
appearance.

00:16:48.726 --> 00:16:49.826 A:middle
Here's another thing to be aware

00:16:49.826 --> 00:16:51.676 A:middle
of if you're managing layers.

00:16:52.686 --> 00:16:54.036 A:middle
You might have code that looks

00:16:54.256 --> 00:16:55.696 A:middle
like one of these two examples.

00:16:56.296 --> 00:16:57.506 A:middle
Either you're setting the

00:16:57.506 --> 00:16:59.306 A:middle
contents of a layer to an

00:16:59.306 --> 00:17:01.896 A:middle
NSImage or you're using the


00:16:59.306 --> 00:17:01.896 A:middle
NSImage or you're using the

00:17:01.896 --> 00:17:04.226 A:middle
layer contents for content scale

00:17:04.226 --> 00:17:06.636 A:middle
API to create layer contents

00:17:06.715 --> 00:17:08.246 A:middle
from an image for your layer.

00:17:09.876 --> 00:17:11.276 A:middle
If you have code like this, you

00:17:11.276 --> 00:17:12.726 A:middle
should know that the image will

00:17:12.726 --> 00:17:14.626 A:middle
not automatically inherit the

00:17:14.626 --> 00:17:15.326 A:middle
appearance.

00:17:15.856 --> 00:17:19.256 A:middle
As before, the best fix is to

00:17:19.256 --> 00:17:20.286 A:middle
switch to views.

00:17:20.286 --> 00:17:21.935 A:middle
In this case, NSImageView.

00:17:22.286 --> 00:17:23.776 A:middle
NSImageView will take care of

00:17:23.776 --> 00:17:25.266 A:middle
this detail as well as a bunch

00:17:25.266 --> 00:17:28.046 A:middle
of others automatically, so do

00:17:28.046 --> 00:17:30.576 A:middle
that if you can.

00:17:30.766 --> 00:17:32.676 A:middle
Otherwise, you'll need to create

00:17:32.676 --> 00:17:35.266 A:middle
a CGImage from your NSImage for

00:17:35.266 --> 00:17:35.786 A:middle
your layer.

00:17:36.466 --> 00:17:37.776 A:middle
And you'll do that using the

00:17:37.776 --> 00:17:40.166 A:middle
cgImage(forProposedRect:,

00:17:40.786 --> 00:17:43.886 A:middle
context:, hints: API on NSImage.

00:17:44.496 --> 00:17:46.056 A:middle
And you'll have to be careful to

00:17:46.186 --> 00:17:47.506 A:middle
do this at a point where the

00:17:47.776 --> 00:17:49.536 A:middle
current appearance is correct.

00:17:49.776 --> 00:17:51.406 A:middle
So, a good place to do it is in

00:17:51.406 --> 00:17:52.486 A:middle
your updateLayer method.

00:17:52.766 --> 00:17:55.596 A:middle
All right, so that's appearance.

00:17:56.486 --> 00:17:57.856 A:middle
Now let's talk about materials.

00:17:57.946 --> 00:18:00.046 A:middle
Now, you've probably heard that


00:17:57.946 --> 00:18:00.046 A:middle
Now, you've probably heard that

00:18:00.466 --> 00:18:02.636 A:middle
materials are one of the

00:18:02.636 --> 00:18:04.356 A:middle
building blocks of the modern

00:18:04.356 --> 00:18:06.146 A:middle
Mac UI, but you may have

00:18:06.146 --> 00:18:07.466 A:middle
wondered to yourself, well, what

00:18:07.466 --> 00:18:09.596 A:middle
exactly is a material, so let's

00:18:09.596 --> 00:18:10.586 A:middle
start with a definition.

00:18:11.816 --> 00:18:13.436 A:middle
Materials are dynamic

00:18:13.496 --> 00:18:15.726 A:middle
backgrounds that make use of

00:18:15.726 --> 00:18:18.136 A:middle
effects like blurs, gradient,

00:18:18.516 --> 00:18:21.856 A:middle
tinting, translucency, and they

00:18:21.856 --> 00:18:24.276 A:middle
provide a sense of depth or

00:18:24.276 --> 00:18:26.806 A:middle
context to your UI, as well as

00:18:26.806 --> 00:18:28.206 A:middle
just a bit of added beauty.

00:18:28.726 --> 00:18:31.626 A:middle
Here's a pretty typical Mac

00:18:31.656 --> 00:18:33.606 A:middle
desktop and you can see all the

00:18:33.606 --> 00:18:35.076 A:middle
different places where we're

00:18:35.076 --> 00:18:36.476 A:middle
using these material effects--

00:18:36.596 --> 00:18:37.896 A:middle
actually, this isn't even all of

00:18:37.896 --> 00:18:38.000 A:middle
them.

00:18:41.286 --> 00:18:42.986 A:middle
Now, AppKit automatically

00:18:42.986 --> 00:18:44.936 A:middle
provides materials in a number

00:18:44.936 --> 00:18:47.096 A:middle
of common places, like the title

00:18:47.096 --> 00:18:49.166 A:middle
bars and backgrounds of windows,

00:18:49.986 --> 00:18:52.696 A:middle
table views, sidebars, popovers,

00:18:52.696 --> 00:18:55.246 A:middle
menus, and even other places as

00:18:56.016 --> 00:18:56.136 A:middle
well.

00:18:56.336 --> 00:18:58.366 A:middle
But you can create a material

00:18:58.366 --> 00:19:00.426 A:middle
yourself and add it to your UI


00:18:58.366 --> 00:19:00.426 A:middle
yourself and add it to your UI

00:19:01.136 --> 00:19:02.156 A:middle
using a view called

00:19:02.356 --> 00:19:03.676 A:middle
NSVisualEffectView.

00:19:04.466 --> 00:19:05.416 A:middle
If you're not familiar with

00:19:05.416 --> 00:19:07.206 A:middle
NSVisualEffectView, quite

00:19:07.206 --> 00:19:09.016 A:middle
simply, it's a view that shows a

00:19:09.016 --> 00:19:09.466 A:middle
material.

00:19:10.676 --> 00:19:11.836 A:middle
And if you want to use one,

00:19:12.346 --> 00:19:14.136 A:middle
you'll need to be aware of three

00:19:14.136 --> 00:19:15.406 A:middle
main properties that you'll have

00:19:15.446 --> 00:19:17.156 A:middle
to set up and I'll go through

00:19:17.156 --> 00:19:17.696 A:middle
these in order.

00:19:17.836 --> 00:19:19.556 A:middle
The state, blendingMode, and

00:19:19.556 --> 00:19:20.636 A:middle
material properties.

00:19:23.046 --> 00:19:24.206 A:middle
So, first, the state property.

00:19:24.766 --> 00:19:27.336 A:middle
This controls whether the

00:19:27.336 --> 00:19:29.536 A:middle
material uses the active window

00:19:29.536 --> 00:19:29.786 A:middle
look.

00:19:30.246 --> 00:19:31.776 A:middle
Now, by default, the material

00:19:31.776 --> 00:19:33.366 A:middle
will just match its containing

00:19:33.366 --> 00:19:34.916 A:middle
window and so when that window

00:19:34.916 --> 00:19:36.256 A:middle
is active it'll look active.

00:19:36.556 --> 00:19:37.926 A:middle
When the window's inactive, the

00:19:37.926 --> 00:19:39.106 A:middle
material will look inactive.

00:19:39.686 --> 00:19:42.456 A:middle
But you can also specify this

00:19:42.866 --> 00:19:44.776 A:middle
specifically to be active or

00:19:44.776 --> 00:19:46.076 A:middle
inactive if you'd like to

00:19:46.076 --> 00:19:47.006 A:middle
control it manually.

00:19:49.546 --> 00:19:50.556 A:middle
Second, the blendingMode

00:19:50.556 --> 00:19:51.076 A:middle
property.

00:19:51.776 --> 00:19:53.846 A:middle
This property controls whether

00:19:53.846 --> 00:19:55.886 A:middle
the material punches through the

00:19:55.886 --> 00:19:56.646 A:middle
back of the window.

00:19:56.856 --> 00:19:57.926 A:middle
Let me show you what I mean by

00:19:57.926 --> 00:19:58.146 A:middle
that.

00:19:59.676 --> 00:20:02.106 A:middle
Here's a preview using two


00:19:59.676 --> 00:20:02.106 A:middle
Here's a preview using two

00:20:02.106 --> 00:20:03.146 A:middle
different materials.

00:20:04.406 --> 00:20:06.236 A:middle
For one, this title bar

00:20:06.236 --> 00:20:09.146 A:middle
material, if we peel it back, we

00:20:09.146 --> 00:20:10.726 A:middle
can see that it's blending the

00:20:10.726 --> 00:20:12.286 A:middle
contents within the window,

00:20:12.286 --> 00:20:13.826 A:middle
including that color image

00:20:13.826 --> 00:20:14.056 A:middle
there.

00:20:14.916 --> 00:20:16.506 A:middle
So, it's not punching through

00:20:16.506 --> 00:20:17.956 A:middle
the back of the window.

00:20:19.036 --> 00:20:20.366 A:middle
There's also the sidebar

00:20:20.366 --> 00:20:22.216 A:middle
material and if we peel it back

00:20:23.656 --> 00:20:24.856 A:middle
we can see it's blurring the

00:20:24.856 --> 00:20:26.506 A:middle
contents behind the window, so

00:20:26.506 --> 00:20:27.786 A:middle
it's punching through the back

00:20:28.006 --> 00:20:29.926 A:middle
so it can see to the windows

00:20:29.966 --> 00:20:31.626 A:middle
behind it as well as the

00:20:32.306 --> 00:20:32.526 A:middle
desktop.

00:20:40.666 --> 00:20:42.516 A:middle
So, by default, a visual effect

00:20:42.516 --> 00:20:43.946 A:middle
view will be in behind window

00:20:43.946 --> 00:20:46.756 A:middle
mode, but you can control that

00:20:46.756 --> 00:20:48.066 A:middle
using the blendingMode property.

00:20:48.516 --> 00:20:51.436 A:middle
Finally, the material property.

00:20:52.236 --> 00:20:53.876 A:middle
This property encapsulates the

00:20:53.876 --> 00:20:55.976 A:middle
material effect definition.

00:20:56.836 --> 00:20:57.546 A:middle
What do I mean by that?

00:20:58.476 --> 00:21:00.366 A:middle
That means the exact recipe of


00:20:58.476 --> 00:21:00.366 A:middle
That means the exact recipe of

00:21:00.496 --> 00:21:03.246 A:middle
blur, translucency, gradience,

00:21:03.246 --> 00:21:05.246 A:middle
tinting-- that all depends on

00:21:05.246 --> 00:21:06.216 A:middle
the material property.

00:21:07.316 --> 00:21:08.506 A:middle
Now, when we first started using

00:21:08.506 --> 00:21:10.916 A:middle
materials in Yosemite, we had

00:21:11.006 --> 00:21:12.726 A:middle
two main materials, the light

00:21:12.966 --> 00:21:14.586 A:middle
and dark materials, and those

00:21:14.586 --> 00:21:15.876 A:middle
served us really well at the

00:21:15.876 --> 00:21:18.276 A:middle
time, but since then we've

00:21:18.276 --> 00:21:19.736 A:middle
really expanded our use of

00:21:19.736 --> 00:21:21.196 A:middle
materials across the system.

00:21:22.026 --> 00:21:23.576 A:middle
And now with Dark Mode, it no

00:21:23.576 --> 00:21:24.716 A:middle
longer really makes sense to

00:21:24.716 --> 00:21:26.716 A:middle
specify a material just as light

00:21:27.086 --> 00:21:28.086 A:middle
or dark.

00:21:28.776 --> 00:21:29.976 A:middle
Instead, we have something

00:21:29.976 --> 00:21:31.806 A:middle
called semantic materials.

00:21:32.666 --> 00:21:33.616 A:middle
Now, if you're familiar with

00:21:33.686 --> 00:21:36.066 A:middle
semantic colors, you know that

00:21:36.276 --> 00:21:37.406 A:middle
they're named after where

00:21:37.406 --> 00:21:39.406 A:middle
they're used, not necessarily

00:21:39.536 --> 00:21:40.366 A:middle
what they look like.

00:21:41.686 --> 00:21:42.876 A:middle
Same thing for semantic

00:21:42.876 --> 00:21:43.506 A:middle
materials.

00:21:44.486 --> 00:21:46.096 A:middle
The menu material, for example,

00:21:46.166 --> 00:21:47.456 A:middle
will always look like system

00:21:47.456 --> 00:21:49.626 A:middle
contextual menus, regardless of

00:21:49.626 --> 00:21:50.706 A:middle
light versus dark.

00:21:51.386 --> 00:21:55.086 A:middle
And in Mojave, we're introducing

00:21:55.086 --> 00:21:57.716 A:middle
a bunch more semantic materials

00:21:58.716 --> 00:21:59.976 A:middle
so that you can always use the

00:21:59.976 --> 00:22:02.056 A:middle
right one for your specific use


00:21:59.976 --> 00:22:02.056 A:middle
right one for your specific use

00:22:02.056 --> 00:22:02.476 A:middle
case.

00:22:02.626 --> 00:22:06.296 A:middle
In fact, these semantic

00:22:06.346 --> 00:22:08.996 A:middle
materials are now our preferred

00:22:08.996 --> 00:22:10.726 A:middle
way of using materials and we're

00:22:10.726 --> 00:22:12.836 A:middle
deprecating these non-semantic

00:22:12.836 --> 00:22:14.896 A:middle
materials like light, dark,

00:22:15.186 --> 00:22:16.636 A:middle
medium light, and ultra dark.

00:22:17.866 --> 00:22:19.026 A:middle
If you're using one of these

00:22:19.026 --> 00:22:21.506 A:middle
materials, now is a great time

00:22:21.506 --> 00:22:23.296 A:middle
to go ahead and switch over to a

00:22:23.296 --> 00:22:24.786 A:middle
semantic material that's right

00:22:24.866 --> 00:22:25.846 A:middle
for your use case.

00:22:29.476 --> 00:22:30.876 A:middle
Just to give you an idea of

00:22:30.876 --> 00:22:32.366 A:middle
where we're using these semantic

00:22:32.366 --> 00:22:33.676 A:middle
materials across the system,

00:22:34.456 --> 00:22:35.726 A:middle
here's the Finder using the

00:22:35.726 --> 00:22:37.406 A:middle
title bar and sidebar materials.

00:22:39.396 --> 00:22:41.156 A:middle
Here's Mail using the header

00:22:41.156 --> 00:22:42.516 A:middle
view and content background

00:22:42.516 --> 00:22:43.236 A:middle
materials.

00:22:45.656 --> 00:22:47.396 A:middle
Here's our Chameleon Wrangler

00:22:47.396 --> 00:22:48.266 A:middle
app using the

00:22:48.266 --> 00:22:49.776 A:middle
underPageBackground material.

00:22:50.346 --> 00:22:54.426 A:middle
And here's system preferences

00:22:54.426 --> 00:22:55.546 A:middle
using the window background

00:22:55.546 --> 00:22:56.056 A:middle
material.

00:22:57.276 --> 00:22:58.236 A:middle
Now, of course this window

00:22:58.236 --> 00:22:59.666 A:middle
background material, as you've

00:22:59.716 --> 00:23:00.886 A:middle
probably heard, is one of these


00:22:59.716 --> 00:23:00.886 A:middle
probably heard, is one of these

00:23:00.886 --> 00:23:03.116 A:middle
special desktop-tinted materials

00:23:03.226 --> 00:23:04.186 A:middle
new in Mojave.

00:23:04.186 --> 00:23:06.616 A:middle
And the way these work is they

00:23:06.896 --> 00:23:09.476 A:middle
pick up a slight tint from the

00:23:09.476 --> 00:23:11.406 A:middle
desktop picture based on the

00:23:11.406 --> 00:23:12.776 A:middle
window's location onscreen.

00:23:13.366 --> 00:23:14.706 A:middle
And the idea here is to help

00:23:14.796 --> 00:23:16.726 A:middle
your window blend in with the

00:23:16.726 --> 00:23:17.736 A:middle
windows on the rest of the

00:23:17.736 --> 00:23:18.186 A:middle
system.

00:23:18.726 --> 00:23:24.166 A:middle
Again, the easiest way to get

00:23:24.166 --> 00:23:25.226 A:middle
one of these desktop-tinted

00:23:25.226 --> 00:23:26.396 A:middle
materials is to use the

00:23:26.516 --> 00:23:28.926 A:middle
automatic support in NSWindow,

00:23:29.086 --> 00:23:30.946 A:middle
NSScrollView, NSTableView, and

00:23:30.976 --> 00:23:31.846 A:middle
NSCollectionView.

00:23:32.196 --> 00:23:33.886 A:middle
The default configurations of

00:23:33.886 --> 00:23:35.666 A:middle
these objects will come with

00:23:35.666 --> 00:23:37.226 A:middle
this desktop-tinted effect.

00:23:37.716 --> 00:23:42.956 A:middle
You can also configure NSBox to

00:23:42.956 --> 00:23:45.856 A:middle
get these materials by setting

00:23:45.856 --> 00:23:48.156 A:middle
its type to custom and selecting

00:23:48.286 --> 00:23:50.016 A:middle
one of these fill colors.

00:23:50.286 --> 00:23:51.726 A:middle
It'll use the corresponding

00:23:51.826 --> 00:23:53.406 A:middle
NSVisualEffectView material.

00:23:54.816 --> 00:23:55.736 A:middle
Here's an example.

00:23:56.486 --> 00:23:58.866 A:middle
I'll set my box's type to custom

00:23:59.336 --> 00:24:00.806 A:middle
and then I'll set its fillColor


00:23:59.336 --> 00:24:00.806 A:middle
and then I'll set its fillColor

00:24:00.856 --> 00:24:02.746 A:middle
to the underPageBackgroundColor.

00:24:03.286 --> 00:24:05.366 A:middle
Of course, I can also use

00:24:05.366 --> 00:24:06.986 A:middle
NSVisualEffectView, I can set

00:24:06.986 --> 00:24:08.506 A:middle
it's material property to the

00:24:08.506 --> 00:24:09.906 A:middle
underPageBackground material.

00:24:10.116 --> 00:24:11.296 A:middle
Now, the advantage of using

00:24:11.416 --> 00:24:13.506 A:middle
NSBox is it's back-deployable

00:24:13.506 --> 00:24:15.416 A:middle
actually all the way back to

00:24:15.416 --> 00:24:15.956 A:middle
Leopard.

00:24:17.076 --> 00:24:18.086 A:middle
VisualEffectView, on the other

00:24:18.086 --> 00:24:19.086 A:middle
hand, gives you a little more

00:24:19.086 --> 00:24:21.346 A:middle
flexibility and I'll give you an

00:24:21.346 --> 00:24:22.246 A:middle
example of that later.

00:24:22.826 --> 00:24:26.906 A:middle
So, just as a reminder, these

00:24:26.906 --> 00:24:28.356 A:middle
materials will show their

00:24:28.496 --> 00:24:30.656 A:middle
untinted color in light.

00:24:31.156 --> 00:24:33.946 A:middle
And in dark, they'll show that

00:24:33.946 --> 00:24:35.026 A:middle
desktop-tinting effect.

00:24:35.726 --> 00:24:37.366 A:middle
But remember that the tint

00:24:37.366 --> 00:24:39.046 A:middle
effect can be disabled.

00:24:39.176 --> 00:24:40.026 A:middle
Let me show you why.

00:24:40.706 --> 00:24:45.826 A:middle
So, in Mojave, you can choose an

00:24:45.926 --> 00:24:47.376 A:middle
accent color for the system.

00:24:47.896 --> 00:24:52.276 A:middle
And if I switch this over to

00:24:52.386 --> 00:24:55.276 A:middle
graphite, you'll probably first

00:24:55.276 --> 00:24:56.696 A:middle
notice that all the controls

00:24:56.696 --> 00:24:59.806 A:middle
lost their colored accents, but


00:25:00.116 --> 00:25:01.646 A:middle
those desktop-tinted materials

00:25:01.796 --> 00:25:03.166 A:middle
also lost their tint.

00:25:04.616 --> 00:25:06.476 A:middle
So, just make sure you're not

00:25:06.476 --> 00:25:07.866 A:middle
depending on that tint being

00:25:07.866 --> 00:25:11.866 A:middle
there in any way.

00:25:12.106 --> 00:25:16.036 A:middle
Now, VisualEffectView by default

00:25:16.336 --> 00:25:18.226 A:middle
will show its material in its

00:25:18.226 --> 00:25:19.536 A:middle
frame rectangle like this.

00:25:19.956 --> 00:25:20.886 A:middle
And that's pretty great, but

00:25:21.796 --> 00:25:23.046 A:middle
what if I wanted to show a

00:25:23.046 --> 00:25:24.586 A:middle
custom UI element with this

00:25:24.586 --> 00:25:26.476 A:middle
material, like say a chat

00:25:26.476 --> 00:25:26.796 A:middle
bubble.

00:25:27.416 --> 00:25:28.086 A:middle
How would I do that?

00:25:29.276 --> 00:25:32.016 A:middle
Well, here's one way that seems

00:25:32.016 --> 00:25:33.496 A:middle
tempting, but won't work, and

00:25:33.496 --> 00:25:34.176 A:middle
I'll show you why.

00:25:35.606 --> 00:25:38.276 A:middle
We'll first implement the draw

00:25:38.276 --> 00:25:42.226 A:middle
method on NSView and then I'll

00:25:42.226 --> 00:25:44.436 A:middle
go get my custom chat bubble

00:25:44.786 --> 00:25:45.426 A:middle
BezierPath.

00:25:45.936 --> 00:25:48.716 A:middle
And then I'll fill with the

00:25:48.716 --> 00:25:51.926 A:middle
controlBackgroundColor in that

00:25:52.696 --> 00:25:52.806 A:middle
path.

00:25:53.016 --> 00:25:54.916 A:middle
Now, if you do that, you'll find

00:25:54.916 --> 00:25:56.486 A:middle
it looks something like this and

00:25:56.486 --> 00:25:58.796 A:middle
it looks pretty good, but if we

00:25:58.796 --> 00:26:01.296 A:middle
zoom in closely, you'll see that


00:25:58.796 --> 00:26:01.296 A:middle
zoom in closely, you'll see that

00:26:01.296 --> 00:26:02.696 A:middle
the bubbles are not getting that

00:26:02.746 --> 00:26:04.166 A:middle
desktop-tinting effect that we

00:26:04.166 --> 00:26:04.476 A:middle
want.

00:26:04.476 --> 00:26:05.676 A:middle
It's just a plain gray.

00:26:07.096 --> 00:26:07.986 A:middle
So, what went wrong?

00:26:09.376 --> 00:26:11.766 A:middle
Well, this effect is provided by

00:26:11.766 --> 00:26:13.136 A:middle
the Quartz window server like a

00:26:13.136 --> 00:26:14.376 A:middle
lot of our other material

00:26:14.376 --> 00:26:14.876 A:middle
effects.

00:26:15.746 --> 00:26:16.876 A:middle
And what this means is it

00:26:16.976 --> 00:26:19.216 A:middle
updates asynchronously from your

00:26:19.216 --> 00:26:20.856 A:middle
application and this is great

00:26:20.906 --> 00:26:23.706 A:middle
for performance, but it also

00:26:23.706 --> 00:26:25.516 A:middle
means that you can't directly

00:26:25.516 --> 00:26:27.396 A:middle
draw with that color or get it's

00:26:27.396 --> 00:26:28.476 A:middle
RGB values.

00:26:29.916 --> 00:26:31.676 A:middle
Instead, you can use the

00:26:31.676 --> 00:26:33.546 A:middle
maskImage property of

00:26:33.546 --> 00:26:35.156 A:middle
VisualEffectView to do something

00:26:35.196 --> 00:26:35.806 A:middle
very similar.

00:26:37.106 --> 00:26:40.276 A:middle
maskImage is an optional NSImage

00:26:40.596 --> 00:26:43.336 A:middle
on VisualEffectView that

00:26:44.026 --> 00:26:45.696 A:middle
VisualEffectView will use to

00:26:45.696 --> 00:26:47.706 A:middle
mask its material, the material

00:26:47.706 --> 00:26:48.386 A:middle
that it shows.

00:26:49.646 --> 00:26:50.996 A:middle
And in addition to using

00:26:50.996 --> 00:26:53.126 A:middle
standard art-based images, you

00:26:53.126 --> 00:26:54.866 A:middle
can use drawing handler images

00:26:55.006 --> 00:26:56.506 A:middle
to simulate drawing with the

00:26:56.506 --> 00:26:56.996 A:middle
material.

00:26:56.996 --> 00:26:59.356 A:middle
Let me show you an example.


00:27:00.466 --> 00:27:01.896 A:middle
So, I'll go back to my view,

00:27:01.896 --> 00:27:04.736 A:middle
I'll override layout, and I'll

00:27:04.736 --> 00:27:05.816 A:middle
go ahead and add a

00:27:05.816 --> 00:27:06.816 A:middle
VisualEffectView.

00:27:07.896 --> 00:27:09.716 A:middle
I'll set its material to the

00:27:09.716 --> 00:27:11.786 A:middle
contentBackground material, and

00:27:12.916 --> 00:27:14.616 A:middle
then I'll create a drawing

00:27:14.616 --> 00:27:17.176 A:middle
handler image using the NSImage

00:27:17.356 --> 00:27:19.816 A:middle
size flipped initializer that

00:27:19.816 --> 00:27:20.516 A:middle
takes a block.

00:27:22.076 --> 00:27:24.306 A:middle
In it, I'll set the white

00:27:24.416 --> 00:27:25.686 A:middle
color-- this color doesn't

00:27:25.686 --> 00:27:27.056 A:middle
really matter as long as its

00:27:27.056 --> 00:27:27.426 A:middle
opaque.

00:27:27.426 --> 00:27:29.426 A:middle
And then I'll go ahead and fill

00:27:29.486 --> 00:27:32.796 A:middle
with my path.

00:27:32.956 --> 00:27:34.956 A:middle
Then I'll set that image ask the

00:27:34.956 --> 00:27:36.146 A:middle
maskImage on my

00:27:36.146 --> 00:27:36.846 A:middle
VisualEffectView.

00:27:37.676 --> 00:27:39.006 A:middle
All right.

00:27:39.276 --> 00:27:41.606 A:middle
Let's look at it now.

00:27:41.846 --> 00:27:42.666 A:middle
Looks a lot better.

00:27:43.616 --> 00:27:44.626 A:middle
It's desktop-tinted.

00:27:45.706 --> 00:27:47.936 A:middle
And, if we look side by side, we

00:27:47.936 --> 00:27:51.476 A:middle
can really see the difference.

00:27:51.636 --> 00:27:53.356 A:middle
So, this technique works with

00:27:53.466 --> 00:27:55.626 A:middle
any material, but just remember

00:27:55.626 --> 00:27:57.256 A:middle
that only the alpha channel of

00:27:57.256 --> 00:27:58.596 A:middle
the image is used for the mask.

00:27:58.726 --> 00:27:59.976 A:middle
This is similar to template

00:27:59.976 --> 00:28:00.496 A:middle
images.


00:27:59.976 --> 00:28:00.496 A:middle
images.

00:28:01.386 --> 00:28:03.886 A:middle
And the mask only masks the

00:28:03.886 --> 00:28:06.626 A:middle
material, not any subviews or

00:28:06.626 --> 00:28:07.926 A:middle
other descendent views of the

00:28:07.926 --> 00:28:08.696 A:middle
VisualEffectView.

00:28:10.096 --> 00:28:12.516 A:middle
A common technique is to provide

00:28:12.516 --> 00:28:15.156 A:middle
a resizable image for this-- for

00:28:15.156 --> 00:28:16.406 A:middle
the maskImage using the

00:28:16.406 --> 00:28:18.246 A:middle
capInsets and resizingMode

00:28:18.246 --> 00:28:19.796 A:middle
properties of NSImage.

00:28:20.206 --> 00:28:22.046 A:middle
And this is really good for

00:28:22.046 --> 00:28:22.706 A:middle
performance.

00:28:24.176 --> 00:28:24.496 A:middle
OK.

00:28:24.646 --> 00:28:25.846 A:middle
With that, I'll hand it off to

00:28:25.846 --> 00:28:26.886 A:middle
Jeff, who is going to talk about

00:28:26.886 --> 00:28:27.856 A:middle
vibrant blending.

00:28:28.506 --> 00:28:30.506 A:middle
[ Applause ]

00:28:30.996 --> 00:28:31.316 A:middle
Jeff.

00:28:33.336 --> 00:28:33.666 A:middle
&gt;&gt; All right.

00:28:33.726 --> 00:28:34.436 A:middle
Thank you, Matt.

00:28:35.466 --> 00:28:36.506 A:middle
So, now that we've had a look at

00:28:36.506 --> 00:28:38.076 A:middle
our great materials, I want to

00:28:38.076 --> 00:28:39.666 A:middle
cover the things that we draw in

00:28:39.666 --> 00:28:40.906 A:middle
front of those materials,

00:28:41.446 --> 00:28:42.646 A:middle
particularly the materials that

00:28:42.646 --> 00:28:44.696 A:middle
we use that pull in part of the

00:28:44.696 --> 00:28:46.466 A:middle
background and provide that

00:28:46.466 --> 00:28:47.626 A:middle
really awesome blur effect.

00:28:48.786 --> 00:28:50.846 A:middle
So, if we revisit our Chameleon

00:28:51.036 --> 00:28:52.786 A:middle
Wrangler application, we have

00:28:52.786 --> 00:28:53.916 A:middle
this UI here, it's our

00:28:53.916 --> 00:28:54.756 A:middle
mood-o-meter.

00:28:54.756 --> 00:28:56.156 A:middle
It's where we go to record how

00:28:56.156 --> 00:28:57.836 A:middle
our various reptiles are

00:28:57.836 --> 00:28:58.226 A:middle
feeling.

00:28:58.996 --> 00:29:00.786 A:middle
And it's in a popover, which


00:28:58.996 --> 00:29:00.786 A:middle
And it's in a popover, which

00:29:00.786 --> 00:29:01.806 A:middle
means that it's automatically

00:29:01.806 --> 00:29:03.846 A:middle
getting that awesome popover

00:29:03.846 --> 00:29:04.746 A:middle
material backing.

00:29:05.256 --> 00:29:07.636 A:middle
And what we want when we're

00:29:07.636 --> 00:29:08.676 A:middle
drawing over this backing

00:29:08.676 --> 00:29:10.576 A:middle
material is for our content to

00:29:10.576 --> 00:29:12.236 A:middle
really stand out on top of that

00:29:12.236 --> 00:29:13.166 A:middle
varied background.

00:29:13.776 --> 00:29:14.736 A:middle
Something like this.

00:29:15.256 --> 00:29:16.706 A:middle
And we do that with an effect

00:29:16.706 --> 00:29:17.806 A:middle
that we call vibrancy.

00:29:18.386 --> 00:29:20.456 A:middle
So, what is vibrancy?

00:29:20.846 --> 00:29:22.996 A:middle
It's a blending mode that we

00:29:22.996 --> 00:29:24.456 A:middle
apply to the content that

00:29:24.456 --> 00:29:26.266 A:middle
uniformly lightens or darkens

00:29:26.266 --> 00:29:28.326 A:middle
the content behind it.

00:29:28.536 --> 00:29:30.136 A:middle
It's very similar to a color

00:29:30.136 --> 00:29:31.266 A:middle
dodge or burn that you might

00:29:31.266 --> 00:29:32.516 A:middle
have seen in your favorite photo

00:29:32.516 --> 00:29:33.746 A:middle
editor or design tool.

00:29:34.406 --> 00:29:35.686 A:middle
But let's take a closer look.

00:29:36.726 --> 00:29:38.226 A:middle
Here we have a glyph that's

00:29:38.226 --> 00:29:39.716 A:middle
drawing in about a medium gray,

00:29:39.716 --> 00:29:42.296 A:middle
about a 50% gray, but at 100%

00:29:42.296 --> 00:29:42.876 A:middle
opacity.

00:29:44.206 --> 00:29:45.706 A:middle
And when we apply the vibrant

00:29:45.706 --> 00:29:47.296 A:middle
blending effect that we use

00:29:47.296 --> 00:29:48.896 A:middle
against dark materials, which we

00:29:48.896 --> 00:29:51.606 A:middle
call a lightening effect, we can

00:29:51.606 --> 00:29:53.256 A:middle
see that it's not that the

00:29:53.256 --> 00:29:54.586 A:middle
opacity has dropped on our

00:29:54.586 --> 00:29:55.686 A:middle
glyph, but we're actually

00:29:55.916 --> 00:29:57.586 A:middle
lightening the content behind it

00:29:58.066 --> 00:29:59.626 A:middle
using the lightness of that gray

00:29:59.626 --> 00:29:59.976 A:middle
value.

00:29:59.976 --> 00:30:03.366 A:middle
And in fact, when we look at how


00:29:59.976 --> 00:30:03.366 A:middle
And in fact, when we look at how

00:30:03.366 --> 00:30:04.866 A:middle
this works on a range of gray

00:30:04.866 --> 00:30:06.236 A:middle
values-- here we have swatches

00:30:06.236 --> 00:30:08.666 A:middle
going from 0% to 100% gray, all

00:30:08.666 --> 00:30:09.456 A:middle
totally opaque.

00:30:10.396 --> 00:30:11.326 A:middle
When we apply our lightening

00:30:11.326 --> 00:30:12.736 A:middle
effect, we can see a number of

00:30:12.736 --> 00:30:13.876 A:middle
interesting things have

00:30:14.436 --> 00:30:14.946 A:middle
happened.

00:30:15.106 --> 00:30:16.466 A:middle
Down on the bottom right side,

00:30:16.506 --> 00:30:19.196 A:middle
we have 100% light, and because

00:30:19.196 --> 00:30:20.626 A:middle
we have added the lightness of

00:30:20.626 --> 00:30:23.056 A:middle
white to the content behind, it

00:30:23.186 --> 00:30:24.076 A:middle
just remains white.

00:30:24.176 --> 00:30:25.346 A:middle
There is nowhere further to go.

00:30:26.466 --> 00:30:27.516 A:middle
But on the top left where we

00:30:27.516 --> 00:30:29.726 A:middle
were drawing black, there was no

00:30:29.726 --> 00:30:31.216 A:middle
lightness to add, which means

00:30:31.216 --> 00:30:33.076 A:middle
that it completely disappears.

00:30:33.076 --> 00:30:33.956 A:middle
In fact, you wouldn't be able to

00:30:33.956 --> 00:30:34.976 A:middle
see it if I didn't have an

00:30:34.976 --> 00:30:35.516 A:middle
outline there.

00:30:35.936 --> 00:30:37.716 A:middle
And in-between we can see that

00:30:37.716 --> 00:30:39.016 A:middle
we have varying degrees of

00:30:39.016 --> 00:30:40.576 A:middle
lightening which we can use to

00:30:40.576 --> 00:30:42.126 A:middle
establish a hierarchy of content

00:30:42.496 --> 00:30:43.296 A:middle
in our application.

00:30:44.526 --> 00:30:45.696 A:middle
But where does this effect come

00:30:45.696 --> 00:30:45.976 A:middle
from?

00:30:47.176 --> 00:30:48.076 A:middle
Well, it's our old friend

00:30:48.076 --> 00:30:49.266 A:middle
NSAppearance, it turns out.

00:30:50.356 --> 00:30:52.086 A:middle
We have two special vibrant

00:30:52.086 --> 00:30:53.216 A:middle
NSAppearance objects,

00:30:53.546 --> 00:30:56.976 A:middle
vibrantDark and vibrantLight and

00:30:57.066 --> 00:30:58.676 A:middle
these are a complete package.

00:30:58.676 --> 00:31:00.086 A:middle
Not only do they include the


00:30:58.676 --> 00:31:00.086 A:middle
Not only do they include the

00:31:00.086 --> 00:31:01.786 A:middle
exact formula that we use for

00:31:01.786 --> 00:31:03.236 A:middle
that lightening or darkening

00:31:03.236 --> 00:31:05.306 A:middle
effect, but they also have a set

00:31:05.306 --> 00:31:06.876 A:middle
of control artwork and color

00:31:06.876 --> 00:31:07.806 A:middle
definitions that have been

00:31:07.806 --> 00:31:09.596 A:middle
designed to work great with that

00:31:09.636 --> 00:31:10.126 A:middle
blend mode.

00:31:10.646 --> 00:31:13.426 A:middle
But how does your code use it?

00:31:14.176 --> 00:31:15.436 A:middle
Well, it's very simple.

00:31:16.356 --> 00:31:18.286 A:middle
In your NSView subclass, you can

00:31:18.286 --> 00:31:19.676 A:middle
override the allowsVibrancy

00:31:19.676 --> 00:31:22.206 A:middle
property to return true and the

00:31:22.206 --> 00:31:23.206 A:middle
blending effect is going to

00:31:23.206 --> 00:31:24.546 A:middle
automatically apply to your

00:31:24.546 --> 00:31:25.906 A:middle
views drawing and also the

00:31:25.906 --> 00:31:27.456 A:middle
drawing of all of its

00:31:27.676 --> 00:31:28.000 A:middle
descendants.

00:31:29.946 --> 00:31:31.046 A:middle
Typically, when you're drawing

00:31:31.046 --> 00:31:33.116 A:middle
in this vibrant context, you

00:31:33.116 --> 00:31:34.566 A:middle
want to use one of the built-in

00:31:34.566 --> 00:31:35.886 A:middle
label colors, depending on the

00:31:35.886 --> 00:31:37.166 A:middle
prominence of your content.

00:31:37.996 --> 00:31:38.976 A:middle
Both vibrantDark and

00:31:38.976 --> 00:31:39.896 A:middle
vibrantLight have great

00:31:39.896 --> 00:31:41.166 A:middle
definitions for all four of

00:31:41.166 --> 00:31:42.636 A:middle
these colors that allow you to

00:31:42.636 --> 00:31:44.036 A:middle
establish that nice hierarchy.

00:31:45.476 --> 00:31:46.616 A:middle
However, you don't have to use

00:31:46.616 --> 00:31:47.176 A:middle
these colors.

00:31:47.176 --> 00:31:48.696 A:middle
You can use any color that you'd

00:31:48.696 --> 00:31:50.336 A:middle
like, but we prefer to use

00:31:50.336 --> 00:31:51.866 A:middle
non-grayscale colors.

00:31:52.546 --> 00:31:53.936 A:middle
Avoid non-grayscale colors

00:31:53.976 --> 00:31:55.736 A:middle
because, if you use them, the

00:31:56.126 --> 00:31:57.696 A:middle
blending effect is going to

00:31:57.746 --> 00:31:59.696 A:middle
impact the design intent of your

00:31:59.696 --> 00:32:00.876 A:middle
color and it's going to wash it


00:31:59.696 --> 00:32:00.876 A:middle
color and it's going to wash it

00:32:00.876 --> 00:32:01.846 A:middle
out in a way that is not

00:32:01.846 --> 00:32:02.366 A:middle
desirable.

00:32:03.376 --> 00:32:04.456 A:middle
I'll show you an example of that

00:32:04.456 --> 00:32:04.726 A:middle
later.

00:32:06.866 --> 00:32:08.836 A:middle
So, revisiting our application,

00:32:09.236 --> 00:32:11.496 A:middle
we can go ahead and override

00:32:11.496 --> 00:32:13.066 A:middle
allowsVibrancy on our view and

00:32:13.066 --> 00:32:14.116 A:middle
in this case we're going to just

00:32:14.116 --> 00:32:15.826 A:middle
set it on the view that contains

00:32:15.826 --> 00:32:18.256 A:middle
our entire meter in the entire

00:32:18.256 --> 00:32:18.806 A:middle
popover.

00:32:19.246 --> 00:32:20.136 A:middle
And let's see what that looks

00:32:20.136 --> 00:32:20.326 A:middle
like.

00:32:21.896 --> 00:32:23.796 A:middle
Well, our slider looks pretty

00:32:23.796 --> 00:32:24.106 A:middle
good.

00:32:24.106 --> 00:32:25.946 A:middle
It's exactly what we expected.

00:32:25.946 --> 00:32:27.326 A:middle
But what happened to the faces?

00:32:28.016 --> 00:32:28.756 A:middle
They're all washed out.

00:32:30.146 --> 00:32:32.286 A:middle
And what happened here is that

00:32:32.286 --> 00:32:34.336 A:middle
when we set allowsVibrancy on

00:32:34.336 --> 00:32:36.946 A:middle
the overall meter view, not only

00:32:36.946 --> 00:32:37.726 A:middle
are we getting the vibrant

00:32:37.726 --> 00:32:39.636 A:middle
blending on that view, but also

00:32:39.716 --> 00:32:41.056 A:middle
both of these subviews.

00:32:42.216 --> 00:32:43.086 A:middle
And the fix here is pretty

00:32:43.086 --> 00:32:43.456 A:middle
simple.

00:32:44.016 --> 00:32:45.646 A:middle
If we localize our definition of

00:32:45.646 --> 00:32:47.266 A:middle
allowsVibrancy to just the part

00:32:47.266 --> 00:32:49.086 A:middle
that's drawing the slider, we

00:32:49.086 --> 00:32:50.386 A:middle
get exactly what we expected.

00:32:50.806 --> 00:32:52.146 A:middle
Our slider is drawing vibrantly

00:32:52.556 --> 00:32:53.786 A:middle
and the colors in our face

00:32:53.836 --> 00:32:55.296 A:middle
buttons look exactly the way

00:32:55.296 --> 00:32:55.846 A:middle
that we wanted.

00:32:57.366 --> 00:32:58.286 A:middle
When you're drawing vibrantly,

00:32:58.286 --> 00:32:59.536 A:middle
typically you'd want to apply

00:32:59.536 --> 00:33:01.376 A:middle
vibrancy to only the leaf views


00:32:59.536 --> 00:33:01.376 A:middle
vibrancy to only the leaf views

00:33:01.656 --> 00:33:03.136 A:middle
that are drawing the content

00:33:03.136 --> 00:33:04.026 A:middle
that you actually want to have

00:33:04.026 --> 00:33:04.416 A:middle
vibrant.

00:33:05.476 --> 00:33:06.596 A:middle
And, if you have views that are

00:33:06.596 --> 00:33:08.186 A:middle
drawing a mix of content, that

00:33:08.186 --> 00:33:09.296 A:middle
means that you probably want to

00:33:09.296 --> 00:33:10.656 A:middle
break your drawing out into

00:33:10.656 --> 00:33:12.596 A:middle
separate sibling views that you

00:33:12.596 --> 00:33:14.406 A:middle
can use to apply vibrancy at the

00:33:14.406 --> 00:33:15.606 A:middle
granularity that you want.

00:33:17.616 --> 00:33:19.016 A:middle
Further, you should avoid

00:33:19.016 --> 00:33:20.266 A:middle
overlapping vibrant and

00:33:20.266 --> 00:33:21.346 A:middle
non-vibrant views.

00:33:22.716 --> 00:33:24.736 A:middle
If you do this, the blending

00:33:24.736 --> 00:33:26.116 A:middle
modes can clash and you might

00:33:26.116 --> 00:33:27.336 A:middle
find that some of your content

00:33:27.336 --> 00:33:28.976 A:middle
is drawing with a blend mode

00:33:29.116 --> 00:33:31.396 A:middle
that it didn't expect.

00:33:31.506 --> 00:33:33.306 A:middle
Further, don't subclass Cocoa

00:33:33.306 --> 00:33:34.696 A:middle
controls just to override

00:33:34.696 --> 00:33:35.516 A:middle
allowsVibrancy.

00:33:36.046 --> 00:33:37.146 A:middle
I mentioned earlier that the

00:33:37.146 --> 00:33:38.476 A:middle
vibrantLight and vibrantDark

00:33:38.476 --> 00:33:40.156 A:middle
appearances have been designed

00:33:40.156 --> 00:33:41.786 A:middle
with control artwork and colors

00:33:41.786 --> 00:33:43.186 A:middle
that were designed specially for

00:33:43.186 --> 00:33:45.046 A:middle
the blend mode and if you remove

00:33:45.046 --> 00:33:47.096 A:middle
that blend mode, the contrast on

00:33:47.096 --> 00:33:48.296 A:middle
that artwork is not going to be

00:33:48.296 --> 00:33:49.966 A:middle
what you expected because we're

00:33:49.966 --> 00:33:51.396 A:middle
using the blend mode to provide

00:33:51.396 --> 00:33:52.636 A:middle
a lot of that pop against the

00:33:52.636 --> 00:33:54.466 A:middle
material, so you should only

00:33:54.466 --> 00:33:56.216 A:middle
override allows vibrancy if

00:33:56.216 --> 00:33:57.286 A:middle
you're actually overriding

00:33:57.286 --> 00:33:58.646 A:middle
drawing and you know what

00:33:58.646 --> 00:34:00.066 A:middle
vibrant blend mode or


00:33:58.646 --> 00:34:00.066 A:middle
vibrant blend mode or

00:34:00.066 --> 00:34:01.006 A:middle
non-vibrant blend mode is

00:34:01.006 --> 00:34:02.176 A:middle
appropriate for the drawing that

00:34:02.176 --> 00:34:02.646 A:middle
you're doing.

00:34:03.536 --> 00:34:04.256 A:middle
That's vibrancy.

00:34:05.366 --> 00:34:06.316 A:middle
Next, I want to talk a little

00:34:06.316 --> 00:34:07.566 A:middle
bit about background styles,

00:34:07.846 --> 00:34:09.085 A:middle
specifically the ones that we

00:34:09.085 --> 00:34:10.766 A:middle
use for selections.

00:34:11.886 --> 00:34:12.726 A:middle
So, here we have a pretty

00:34:12.726 --> 00:34:14.706 A:middle
typical situation in a aqua

00:34:14.706 --> 00:34:15.606 A:middle
Cocoa application.

00:34:16.556 --> 00:34:18.386 A:middle
In this case, it's a message

00:34:18.386 --> 00:34:20.775 A:middle
from the Mail application and we

00:34:20.775 --> 00:34:22.126 A:middle
can see that when we have a

00:34:22.126 --> 00:34:23.775 A:middle
selection state, we need our

00:34:23.775 --> 00:34:25.646 A:middle
content inside of this table row

00:34:26.036 --> 00:34:28.775 A:middle
to invert to look good against

00:34:28.775 --> 00:34:29.656 A:middle
that blue selection.

00:34:30.206 --> 00:34:32.786 A:middle
But when we add darkAqua into

00:34:32.786 --> 00:34:36.025 A:middle
the mix, we can see that we

00:34:36.025 --> 00:34:37.366 A:middle
can't just naively invert our

00:34:37.366 --> 00:34:38.235 A:middle
content anymore.

00:34:38.396 --> 00:34:39.226 A:middle
That's not going to work

00:34:39.226 --> 00:34:39.815 A:middle
uniformly.

00:34:40.216 --> 00:34:41.416 A:middle
And so we need to describe these

00:34:41.416 --> 00:34:42.556 A:middle
states semantically.

00:34:43.206 --> 00:34:45.286 A:middle
Now, if you're familiar with

00:34:45.286 --> 00:34:48.216 A:middle
Cocoa, you've probably seen the

00:34:48.216 --> 00:34:50.496 A:middle
NSView.BackgroundStyle enum and

00:34:50.496 --> 00:34:51.726 A:middle
that includes a couple of cases,

00:34:51.726 --> 00:34:54.036 A:middle
including light and dark, and

00:34:54.036 --> 00:34:54.996 A:middle
NSTableView sets this

00:34:54.996 --> 00:34:56.226 A:middle
automatically on the

00:34:56.226 --> 00:34:58.816 A:middle
TableRowView, TableCellView, and

00:34:58.816 --> 00:35:00.176 A:middle
also all of the controls that


00:34:58.816 --> 00:35:00.176 A:middle
also all of the controls that

00:35:00.176 --> 00:35:01.676 A:middle
are immediate subviews of your

00:35:01.676 --> 00:35:02.426 A:middle
TableCellView.

00:35:03.856 --> 00:35:05.286 A:middle
Now, traditionally, we have set

00:35:05.286 --> 00:35:07.376 A:middle
the light background style on

00:35:07.376 --> 00:35:09.146 A:middle
unselected rows and the dark

00:35:09.146 --> 00:35:10.346 A:middle
background style on selected

00:35:10.346 --> 00:35:10.666 A:middle
ones.

00:35:11.206 --> 00:35:13.336 A:middle
But, in the face of this

00:35:13.336 --> 00:35:15.416 A:middle
brand-new, beautiful theme where

00:35:15.416 --> 00:35:16.586 A:middle
the background is effectively

00:35:16.586 --> 00:35:18.526 A:middle
always dark, these names don't

00:35:18.526 --> 00:35:20.006 A:middle
make sense anymore and so we've

00:35:20.006 --> 00:35:22.096 A:middle
renamed them to normal and

00:35:22.096 --> 00:35:23.426 A:middle
emphasized, respectively.

00:35:24.006 --> 00:35:25.616 A:middle
And these are just more semantic

00:35:25.616 --> 00:35:27.356 A:middle
descriptions that better match

00:35:27.356 --> 00:35:29.266 A:middle
the way that these enum cases

00:35:29.266 --> 00:35:30.496 A:middle
are used in a modern Cocoa

00:35:30.496 --> 00:35:31.076 A:middle
application.

00:35:32.636 --> 00:35:33.866 A:middle
We also have some additional

00:35:33.866 --> 00:35:35.146 A:middle
updates with background styles,

00:35:35.396 --> 00:35:37.196 A:middle
including that TableView will

00:35:37.196 --> 00:35:38.446 A:middle
now automatically set that

00:35:38.446 --> 00:35:40.806 A:middle
background style recursively on

00:35:40.806 --> 00:35:41.796 A:middle
all of the controls in your

00:35:41.796 --> 00:35:43.586 A:middle
table row, not just the ones

00:35:43.586 --> 00:35:44.946 A:middle
that are immediate subviews of

00:35:44.946 --> 00:35:45.496 A:middle
your CellView.

00:35:46.006 --> 00:35:46.996 A:middle
And so, if you've been catching

00:35:46.996 --> 00:35:48.316 A:middle
that background style and trying

00:35:48.316 --> 00:35:49.556 A:middle
to forward it along to all these

00:35:49.556 --> 00:35:51.036 A:middle
subviews because you wanted to

00:35:51.036 --> 00:35:52.226 A:middle
use a stacked view or something

00:35:52.226 --> 00:35:53.886 A:middle
for layout, you no longer have

00:35:53.886 --> 00:35:55.346 A:middle
to do that on Mojave.

00:35:56.086 --> 00:35:58.286 A:middle
That's the applause of somebody

00:35:58.286 --> 00:35:59.196 A:middle
who's done this manually.

00:35:59.196 --> 00:35:59.996 A:middle
Thank you, I agree.


00:36:01.376 --> 00:36:03.176 A:middle
Further, all four of our label

00:36:03.176 --> 00:36:05.306 A:middle
colors now automatically adapt

00:36:05.336 --> 00:36:07.416 A:middle
to the background style, which

00:36:07.416 --> 00:36:08.426 A:middle
means that you can just set up

00:36:08.426 --> 00:36:09.876 A:middle
your content hierarchy once,

00:36:10.026 --> 00:36:11.606 A:middle
describe it semantically, and

00:36:11.606 --> 00:36:12.796 A:middle
it's going to look great in both

00:36:12.796 --> 00:36:13.726 A:middle
of these contexts.

00:36:14.396 --> 00:36:17.086 A:middle
You can also use these

00:36:17.086 --> 00:36:18.396 A:middle
emphasized variants manually and

00:36:18.396 --> 00:36:19.256 A:middle
I'll give you an example.

00:36:19.496 --> 00:36:20.826 A:middle
So, here we have something that

00:36:20.826 --> 00:36:22.206 A:middle
looks a little bit like the icon

00:36:22.206 --> 00:36:22.836 A:middle
view in Finder.

00:36:23.686 --> 00:36:25.366 A:middle
And we've got two labels that

00:36:25.366 --> 00:36:26.546 A:middle
are ascribed with label color

00:36:26.686 --> 00:36:27.856 A:middle
and secondary label color.

00:36:28.796 --> 00:36:30.066 A:middle
And we want to draw a custom

00:36:30.066 --> 00:36:31.236 A:middle
selection behind them, so we've

00:36:31.236 --> 00:36:32.306 A:middle
got this custom Bezier

00:36:32.306 --> 00:36:33.806 A:middle
path-based selection, maybe

00:36:33.806 --> 00:36:34.936 A:middle
we're filling it with alternate

00:36:34.936 --> 00:36:36.936 A:middle
selected control color, and we

00:36:36.936 --> 00:36:39.216 A:middle
want our labels to match the

00:36:40.146 --> 00:36:42.406 A:middle
primary and secondary variants

00:36:42.466 --> 00:36:43.646 A:middle
in this emphasized style.

00:36:44.596 --> 00:36:45.926 A:middle
And to get that is very simple.

00:36:46.456 --> 00:36:47.676 A:middle
All we have to do is set the

00:36:47.676 --> 00:36:49.086 A:middle
background style to emphasized

00:36:49.086 --> 00:36:50.796 A:middle
on both of our text fields and

00:36:50.796 --> 00:36:51.716 A:middle
they're automatically going to

00:36:51.716 --> 00:36:52.986 A:middle
provide this nice emphasized

00:36:52.986 --> 00:36:53.456 A:middle
variant.

00:36:53.916 --> 00:36:55.346 A:middle
And the great thing is that now

00:36:55.346 --> 00:36:56.396 A:middle
that we've described it this

00:36:56.396 --> 00:36:58.826 A:middle
way, when we switch into Dark

00:36:58.826 --> 00:37:00.106 A:middle
Mode, everything just works.


00:36:58.826 --> 00:37:00.106 A:middle
Mode, everything just works.

00:37:00.106 --> 00:37:01.026 A:middle
We don't have to do anything

00:37:01.026 --> 00:37:04.466 A:middle
special to support that.

00:37:04.466 --> 00:37:05.846 A:middle
One final note on selections.

00:37:06.906 --> 00:37:08.736 A:middle
The selection material that you

00:37:08.736 --> 00:37:10.966 A:middle
commonly see in sidebars, menus,

00:37:10.966 --> 00:37:13.696 A:middle
and popovers now follows the

00:37:13.696 --> 00:37:15.086 A:middle
accent color preference on

00:37:15.086 --> 00:37:15.546 A:middle
Mojave.

00:37:16.186 --> 00:37:17.226 A:middle
And what that means is that if

00:37:17.226 --> 00:37:18.446 A:middle
you're drawing a custom blue

00:37:18.446 --> 00:37:20.116 A:middle
selection, it's not going to fit

00:37:20.116 --> 00:37:20.326 A:middle
in.

00:37:21.426 --> 00:37:22.436 A:middle
Instead, you should use

00:37:22.436 --> 00:37:23.446 A:middle
NSVisualEffectView.

00:37:23.756 --> 00:37:24.826 A:middle
It has a special selection

00:37:24.826 --> 00:37:26.726 A:middle
material just for this and when

00:37:26.726 --> 00:37:27.696 A:middle
you use this it's going to

00:37:27.696 --> 00:37:28.666 A:middle
automatically follow the

00:37:28.666 --> 00:37:30.000 A:middle
preference, as you expect.

00:37:33.716 --> 00:37:35.476 A:middle
Now, before I get into the

00:37:35.476 --> 00:37:36.676 A:middle
exciting part, the tips and the

00:37:36.676 --> 00:37:38.156 A:middle
tricks, I want to say a couple

00:37:38.156 --> 00:37:39.316 A:middle
of words about backward

00:37:39.316 --> 00:37:40.996 A:middle
deployment because we know that

00:37:40.996 --> 00:37:42.446 A:middle
many of you, especially on the

00:37:42.446 --> 00:37:43.856 A:middle
Mac, like to deploy your

00:37:43.856 --> 00:37:45.256 A:middle
applications back to previous

00:37:45.256 --> 00:37:47.016 A:middle
releases of macOS and it was

00:37:47.016 --> 00:37:48.086 A:middle
important to us to make sure

00:37:48.086 --> 00:37:49.446 A:middle
that you could adopt Dark Mode

00:37:49.876 --> 00:37:51.456 A:middle
without necessarily compromising

00:37:51.456 --> 00:37:52.456 A:middle
on your backward deployment.

00:37:52.976 --> 00:37:55.136 A:middle
And so I'm going to step through

00:37:55.136 --> 00:37:56.186 A:middle
a couple of APIs and just

00:37:56.186 --> 00:37:57.146 A:middle
examine them for backward

00:37:57.146 --> 00:37:58.576 A:middle
deployment, starting with system

00:37:58.576 --> 00:37:59.076 A:middle
colors.

00:37:59.506 --> 00:38:00.856 A:middle
So, here's a sampling of the


00:37:59.506 --> 00:38:00.856 A:middle
So, here's a sampling of the

00:38:00.856 --> 00:38:02.186 A:middle
system colors that we support

00:38:02.246 --> 00:38:03.146 A:middle
that are dynamic for the

00:38:03.146 --> 00:38:03.686 A:middle
appearance.

00:38:04.006 --> 00:38:05.076 A:middle
And what I want to highlight

00:38:05.076 --> 00:38:06.446 A:middle
here is that the ones

00:38:06.446 --> 00:38:07.586 A:middle
highlighted in green have been

00:38:07.586 --> 00:38:10.406 A:middle
available since at least 10.10

00:38:10.406 --> 00:38:12.076 A:middle
Yosemite, many of them actually

00:38:12.076 --> 00:38:12.896 A:middle
far further back.

00:38:12.896 --> 00:38:15.426 A:middle
And that means that we think

00:38:15.426 --> 00:38:17.166 A:middle
that you have a great vocabulary

00:38:17.166 --> 00:38:18.416 A:middle
of colors available to you to

00:38:18.416 --> 00:38:20.046 A:middle
describe more or less any UI

00:38:20.046 --> 00:38:22.206 A:middle
that you'd like and that all

00:38:22.206 --> 00:38:23.936 A:middle
supports backward deployment out

00:38:23.936 --> 00:38:24.586 A:middle
of the box.

00:38:26.336 --> 00:38:28.266 A:middle
For custom colors, our modern

00:38:28.266 --> 00:38:29.576 A:middle
preferred solution for defining

00:38:29.576 --> 00:38:32.146 A:middle
them is asset catalogs and these

00:38:32.146 --> 00:38:33.936 A:middle
are available back to 10.13.

00:38:35.326 --> 00:38:37.376 A:middle
Now, when you do specify dark

00:38:37.646 --> 00:38:39.276 A:middle
variants for any of your assets,

00:38:39.596 --> 00:38:41.246 A:middle
when you back deploy them, those

00:38:41.246 --> 00:38:42.776 A:middle
dark variants are safely ignored

00:38:42.776 --> 00:38:43.816 A:middle
on previous versions of the

00:38:43.816 --> 00:38:45.786 A:middle
operating system, so that's a--

00:38:45.786 --> 00:38:46.996 A:middle
that's a solution that has

00:38:47.036 --> 00:38:48.156 A:middle
backward deployment built right

00:38:48.156 --> 00:38:48.336 A:middle
in.

00:38:49.116 --> 00:38:50.126 A:middle
But if you want to deploy back

00:38:50.126 --> 00:38:52.556 A:middle
further than 10.13, you can use

00:38:52.556 --> 00:38:55.256 A:middle
a technique like this where you

00:38:55.396 --> 00:38:56.776 A:middle
write a custom color property.

00:38:57.826 --> 00:38:59.386 A:middle
And here we just encapsulate the

00:38:59.386 --> 00:39:01.116 A:middle
availability check to use our


00:38:59.386 --> 00:39:01.116 A:middle
availability check to use our

00:39:01.116 --> 00:39:02.816 A:middle
asset catalog color on operating

00:39:02.816 --> 00:39:04.526 A:middle
systems that support it and then

00:39:04.526 --> 00:39:05.856 A:middle
we can go ahead and put in a

00:39:05.856 --> 00:39:07.516 A:middle
hardcoded fallback color for

00:39:07.516 --> 00:39:09.106 A:middle
those older operating systems.

00:39:09.506 --> 00:39:13.006 A:middle
Desktop-tinted materials is

00:39:13.006 --> 00:39:13.976 A:middle
another great new thing in

00:39:13.976 --> 00:39:16.116 A:middle
Mojave and if you want to

00:39:16.116 --> 00:39:17.556 A:middle
address those materials directly

00:39:17.556 --> 00:39:19.166 A:middle
with VisualEffectView, of course

00:39:19.166 --> 00:39:20.546 A:middle
that's only available starting

00:39:20.546 --> 00:39:23.256 A:middle
in 10.14, but we've been

00:39:23.256 --> 00:39:24.526 A:middle
providing-- but we have classes

00:39:24.556 --> 00:39:25.256 A:middle
that are providing these

00:39:25.256 --> 00:39:26.476 A:middle
materials automatically,

00:39:26.896 --> 00:39:28.236 A:middle
including Window, ScrollView,

00:39:28.236 --> 00:39:29.966 A:middle
and TableView, which have been

00:39:29.966 --> 00:39:31.626 A:middle
available since essentially the

00:39:31.626 --> 00:39:32.336 A:middle
beginning of time.

00:39:32.856 --> 00:39:34.266 A:middle
In fact, some of these predate

00:39:34.416 --> 00:39:35.456 A:middle
macOS 10.0.

00:39:35.776 --> 00:39:37.636 A:middle
And so, if you configure them

00:39:37.636 --> 00:39:40.156 A:middle
correctly, they're going to on

00:39:40.156 --> 00:39:41.956 A:middle
previous operating systems show

00:39:41.956 --> 00:39:43.686 A:middle
that special NSColor which looks

00:39:43.686 --> 00:39:44.626 A:middle
exactly the way that you would

00:39:44.626 --> 00:39:46.866 A:middle
expect in previous versions and

00:39:46.866 --> 00:39:48.116 A:middle
then when you run it on Mojave

00:39:48.116 --> 00:39:48.736 A:middle
you're going to get that

00:39:48.736 --> 00:39:49.786 A:middle
material automatically.

00:39:50.866 --> 00:39:52.886 A:middle
And of course NSBox, the custom

00:39:52.886 --> 00:39:53.876 A:middle
style that allows you to set a

00:39:53.876 --> 00:39:55.786 A:middle
fill color, deploys back to

00:39:56.316 --> 00:39:58.406 A:middle
Leopard 10.5 and so does

00:39:58.406 --> 00:39:59.096 A:middle
NSCollectionView.

00:39:59.496 --> 00:40:00.556 A:middle
And this works whether you're


00:39:59.496 --> 00:40:00.556 A:middle
And this works whether you're

00:40:00.556 --> 00:40:01.626 A:middle
using the legacy

00:40:01.746 --> 00:40:03.406 A:middle
NSCollectionView API or the

00:40:03.406 --> 00:40:05.016 A:middle
modern one, although we'd prefer

00:40:05.016 --> 00:40:07.776 A:middle
that you use the modern one.

00:40:08.396 --> 00:40:11.706 A:middle
Finally, enabling Dark Mode is

00:40:12.266 --> 00:40:14.386 A:middle
generally gated on linking

00:40:14.386 --> 00:40:17.426 A:middle
against the 10.14 SDK, but, as

00:40:17.426 --> 00:40:19.966 A:middle
you can see, really, the tools

00:40:19.966 --> 00:40:21.376 A:middle
that you need to develop a great

00:40:21.376 --> 00:40:23.126 A:middle
Dark Mode application aren't

00:40:23.126 --> 00:40:24.876 A:middle
necessarily specific to the

00:40:24.876 --> 00:40:26.866 A:middle
10.14 SDK and you could have

00:40:26.866 --> 00:40:28.466 A:middle
developed one just using the

00:40:28.466 --> 00:40:30.126 A:middle
10.13 SDK that you have today.

00:40:31.246 --> 00:40:33.356 A:middle
And so, if you have a situation

00:40:33.356 --> 00:40:34.396 A:middle
where you can't necessarily

00:40:34.396 --> 00:40:36.446 A:middle
update your SDK, we have an

00:40:36.446 --> 00:40:38.036 A:middle
Info.plist key that you can use

00:40:38.036 --> 00:40:39.326 A:middle
to opt-in to Dark Mode.

00:40:39.926 --> 00:40:40.396 A:middle
It's called

00:40:40.506 --> 00:40:42.286 A:middle
NSRequiresAquaSystemAppearance

00:40:42.576 --> 00:40:43.706 A:middle
and if you set that to NO

00:40:43.706 --> 00:40:45.206 A:middle
explicitly, then that's going to

00:40:45.206 --> 00:40:46.706 A:middle
enable Dark Mode even if you're

00:40:46.706 --> 00:40:47.926 A:middle
linking on an earlier SDK,

00:40:48.546 --> 00:40:50.176 A:middle
although we very strongly prefer

00:40:50.446 --> 00:40:51.396 A:middle
that you update your SDK.

00:40:51.396 --> 00:40:52.696 A:middle
It's a far better solution.

00:40:53.586 --> 00:40:55.276 A:middle
You can also set this key to YES

00:40:55.276 --> 00:40:57.136 A:middle
to disable it temporarily-- and

00:40:57.136 --> 00:40:58.916 A:middle
I want to emphasize temporarily.

00:40:59.326 --> 00:41:00.586 A:middle
This is a key that you can use


00:40:59.326 --> 00:41:00.586 A:middle
This is a key that you can use

00:41:00.586 --> 00:41:01.956 A:middle
to give yourself time to really

00:41:01.956 --> 00:41:03.506 A:middle
build a great polished update

00:41:03.506 --> 00:41:05.146 A:middle
for supporting Dark Mode.

00:41:07.876 --> 00:41:09.576 A:middle
Finally, some tips and tricks.

00:41:11.416 --> 00:41:13.126 A:middle
First of all, when you're

00:41:13.126 --> 00:41:15.196 A:middle
updating your application, one

00:41:15.196 --> 00:41:16.016 A:middle
of the greatest things that you

00:41:16.016 --> 00:41:17.866 A:middle
can do is just audit your use of

00:41:17.906 --> 00:41:20.366 A:middle
NSColor just by searching

00:41:20.366 --> 00:41:21.066 A:middle
through your code base and

00:41:21.066 --> 00:41:22.606 A:middle
seeing where you're using it.

00:41:23.156 --> 00:41:24.066 A:middle
And you're going to find a

00:41:24.066 --> 00:41:25.866 A:middle
couple situations that you can

00:41:25.866 --> 00:41:27.756 A:middle
use to upgrade to make your Dark

00:41:27.756 --> 00:41:28.786 A:middle
Mode experience a lot better.

00:41:28.786 --> 00:41:30.536 A:middle
And so, for example here, we can

00:41:30.536 --> 00:41:31.856 A:middle
find places where we're using

00:41:31.856 --> 00:41:33.016 A:middle
named colors that are not

00:41:33.046 --> 00:41:34.886 A:middle
dynamic and also colors that

00:41:34.886 --> 00:41:36.126 A:middle
have hardcoded components.

00:41:36.386 --> 00:41:37.556 A:middle
And when we encounter these

00:41:37.586 --> 00:41:39.756 A:middle
kinds of situations, we can look

00:41:39.756 --> 00:41:41.446 A:middle
at these and decide one of two

00:41:41.446 --> 00:41:41.956 A:middle
things.

00:41:42.456 --> 00:41:44.876 A:middle
One, maybe there is a built-in

00:41:44.876 --> 00:41:46.226 A:middle
system color that describes what

00:41:46.226 --> 00:41:47.746 A:middle
I'm going for and is fully

00:41:47.746 --> 00:41:48.976 A:middle
dynamic for the appearance.

00:41:49.376 --> 00:41:51.596 A:middle
Or, two, this is a custom color

00:41:51.596 --> 00:41:53.006 A:middle
that I think is really important

00:41:53.006 --> 00:41:53.936 A:middle
to be specific to my

00:41:53.936 --> 00:41:54.576 A:middle
application.

00:41:55.286 --> 00:41:56.496 A:middle
And so the first case is pretty

00:41:56.496 --> 00:41:57.066 A:middle
straightforward.

00:41:57.066 --> 00:41:58.236 A:middle
We were using black color for

00:41:58.236 --> 00:41:59.526 A:middle
this label and we can just

00:41:59.526 --> 00:42:00.696 A:middle
switch that to labelColor and


00:41:59.526 --> 00:42:00.696 A:middle
switch that to labelColor and

00:42:00.696 --> 00:42:02.106 A:middle
that's going to be fully dynamic

00:42:02.106 --> 00:42:02.996 A:middle
and do what we expect.

00:42:03.956 --> 00:42:05.756 A:middle
But in the second case, we might

00:42:05.756 --> 00:42:06.816 A:middle
decide that this color is

00:42:06.816 --> 00:42:07.906 A:middle
actually really special to our

00:42:07.906 --> 00:42:09.476 A:middle
app and that's a really great

00:42:09.476 --> 00:42:10.526 A:middle
candidate for moving into the

00:42:10.526 --> 00:42:11.386 A:middle
asset catalog.

00:42:12.576 --> 00:42:13.646 A:middle
Not only does this clean up our

00:42:13.646 --> 00:42:15.286 A:middle
code because we get all of these

00:42:15.286 --> 00:42:16.466 A:middle
magic numbers out of our code

00:42:16.466 --> 00:42:17.746 A:middle
and into a data-driven source,

00:42:18.396 --> 00:42:20.186 A:middle
but we can also then set a dark

00:42:20.396 --> 00:42:22.616 A:middle
variant for that color and so we

00:42:22.616 --> 00:42:24.206 A:middle
get great Dark Mode support

00:42:24.206 --> 00:42:25.286 A:middle
built in.

00:42:28.136 --> 00:42:29.716 A:middle
Another common source of issues

00:42:29.716 --> 00:42:30.866 A:middle
is offscreen drawing.

00:42:31.526 --> 00:42:33.266 A:middle
To do offscreen drawing, you

00:42:33.406 --> 00:42:34.226 A:middle
have to make sure that you're

00:42:34.226 --> 00:42:35.266 A:middle
being sensitive to the

00:42:35.266 --> 00:42:36.736 A:middle
appearance and also other

00:42:36.736 --> 00:42:37.676 A:middle
drawing conditions.

00:42:38.216 --> 00:42:39.546 A:middle
One really common case of this

00:42:39.546 --> 00:42:41.386 A:middle
is using the NSImage lockFocus

00:42:41.386 --> 00:42:43.456 A:middle
API to try and draw custom

00:42:43.496 --> 00:42:44.246 A:middle
NSImages.

00:42:45.246 --> 00:42:46.266 A:middle
In this case, we're going to go

00:42:46.266 --> 00:42:47.656 A:middle
ahead and try and draw this

00:42:48.726 --> 00:42:49.906 A:middle
badged image where we have a

00:42:49.906 --> 00:42:50.906 A:middle
base image and we're applying a

00:42:50.906 --> 00:42:52.036 A:middle
badge because something new is

00:42:52.036 --> 00:42:53.286 A:middle
happening with our lizard.

00:42:53.926 --> 00:42:55.786 A:middle
And, in this case, we're

00:42:55.786 --> 00:42:57.776 A:middle
creating an NSImage, calling

00:42:57.776 --> 00:42:59.366 A:middle
lockFocus on it, and then doing

00:42:59.366 --> 00:42:59.796 A:middle
our drawing.


00:43:00.736 --> 00:43:02.206 A:middle
And the problem with this is

00:43:02.206 --> 00:43:03.816 A:middle
that once we've used lockFocus,

00:43:04.196 --> 00:43:05.656 A:middle
we lose a lot of the semantics.

00:43:05.856 --> 00:43:07.116 A:middle
We just have a single bitmap

00:43:07.116 --> 00:43:07.906 A:middle
representation.

00:43:08.466 --> 00:43:10.496 A:middle
And so if the appearance changes

00:43:10.756 --> 00:43:12.086 A:middle
or if many other conditions

00:43:12.086 --> 00:43:13.106 A:middle
change, including say the

00:43:13.106 --> 00:43:14.436 A:middle
backing scale factor because

00:43:14.436 --> 00:43:15.606 A:middle
you've moved your window from a

00:43:15.606 --> 00:43:16.966 A:middle
Retina display to a non-Retina

00:43:16.966 --> 00:43:18.926 A:middle
display, suddenly this drawing

00:43:18.926 --> 00:43:19.706 A:middle
is going to be stale.

00:43:20.846 --> 00:43:22.106 A:middle
So, a better solution is to use

00:43:22.106 --> 00:43:24.596 A:middle
the block-based image-- image

00:43:24.866 --> 00:43:27.386 A:middle
initializer, NSImage size

00:43:27.586 --> 00:43:28.796 A:middle
flipped drawing handler.

00:43:29.656 --> 00:43:31.516 A:middle
And we can just do the exact

00:43:31.516 --> 00:43:32.516 A:middle
same drawing that we were doing

00:43:32.516 --> 00:43:34.036 A:middle
before, but inside of this

00:43:34.086 --> 00:43:34.426 A:middle
block.

00:43:34.716 --> 00:43:36.286 A:middle
And when you assign this kind of

00:43:36.286 --> 00:43:38.286 A:middle
image to an NSImageView, you're

00:43:38.286 --> 00:43:39.466 A:middle
automatically going to have this

00:43:39.466 --> 00:43:41.796 A:middle
block rerun when the appearance

00:43:41.796 --> 00:43:43.636 A:middle
changes, scale factor changes,

00:43:43.666 --> 00:43:45.036 A:middle
color gamut changes-- anything

00:43:45.036 --> 00:43:45.946 A:middle
changes, essentially.

00:43:46.706 --> 00:43:48.006 A:middle
And so that's great news because

00:43:48.006 --> 00:43:49.816 A:middle
if our, say, badge fill color is

00:43:49.816 --> 00:43:51.336 A:middle
a dynamic color, it's going to

00:43:51.336 --> 00:43:52.296 A:middle
always resolve against the

00:43:52.296 --> 00:43:53.196 A:middle
correct appearance.

00:43:54.696 --> 00:43:55.906 A:middle
There are a couple of other ways

00:43:55.906 --> 00:43:56.546 A:middle
that you might be doing

00:43:56.546 --> 00:43:57.206 A:middle
offscreen drawing.

00:43:57.906 --> 00:43:59.056 A:middle
You might be making custom

00:43:59.056 --> 00:44:00.646 A:middle
bitmap graphics contexts using


00:43:59.056 --> 00:44:00.646 A:middle
bitmap graphics contexts using

00:44:00.776 --> 00:44:02.036 A:middle
NSGraphicsContext or

00:44:02.036 --> 00:44:03.326 A:middle
CGBitmapContext.

00:44:03.876 --> 00:44:04.866 A:middle
And, depending on what you're

00:44:04.866 --> 00:44:06.546 A:middle
doing, these might also be great

00:44:06.546 --> 00:44:07.856 A:middle
candidates for replacing with a

00:44:07.856 --> 00:44:09.066 A:middle
block-based NSImage.

00:44:09.556 --> 00:44:11.796 A:middle
Further, if you're using the

00:44:11.796 --> 00:44:13.826 A:middle
NSView cacheDisplay in Rect

00:44:13.826 --> 00:44:15.676 A:middle
method to cache your image to a

00:44:15.676 --> 00:44:18.186 A:middle
bitmap rep, just be aware that

00:44:18.186 --> 00:44:19.356 A:middle
this method is not going to

00:44:19.356 --> 00:44:20.656 A:middle
capture some of our more

00:44:21.006 --> 00:44:22.966 A:middle
advanced rendering techniques

00:44:22.966 --> 00:44:25.356 A:middle
like materials and blurs and

00:44:25.356 --> 00:44:26.466 A:middle
it's also just another way that

00:44:26.466 --> 00:44:27.546 A:middle
you can produce drawing that

00:44:27.546 --> 00:44:28.856 A:middle
goes stale when the appearance

00:44:28.856 --> 00:44:33.376 A:middle
changes, so be aware of that.

00:44:33.506 --> 00:44:34.426 A:middle
Here's another situation that

00:44:34.426 --> 00:44:35.366 A:middle
you might find yourself running

00:44:35.366 --> 00:44:35.676 A:middle
into.

00:44:36.996 --> 00:44:37.626 A:middle
If you have an

00:44:37.626 --> 00:44:38.826 A:middle
NSAttributedString or

00:44:38.866 --> 00:44:40.416 A:middle
NSTextStorage and you're

00:44:40.416 --> 00:44:41.806 A:middle
manipulating those attributes

00:44:42.166 --> 00:44:44.156 A:middle
manually-- say I am in this

00:44:44.156 --> 00:44:44.926 A:middle
case, I've just set my

00:44:44.926 --> 00:44:46.086 A:middle
attributes to just be a

00:44:46.086 --> 00:44:47.226 A:middle
dictionary with a font in it--

00:44:48.166 --> 00:44:48.816 A:middle
you might find that this

00:44:48.816 --> 00:44:49.316 A:middle
happens.

00:44:49.316 --> 00:44:51.496 A:middle
Your text is drawing black even

00:44:51.496 --> 00:44:52.596 A:middle
when you switch into Dark Mode

00:44:52.596 --> 00:44:53.526 A:middle
and what has happened here?

00:44:54.666 --> 00:44:56.286 A:middle
Well, we're missing a foreground

00:44:56.286 --> 00:44:58.536 A:middle
color attribute and when the

00:44:58.536 --> 00:45:00.136 A:middle
text drawing engine encounters a


00:44:58.536 --> 00:45:00.136 A:middle
text drawing engine encounters a

00:45:00.136 --> 00:45:01.956 A:middle
range of attributed strings that

00:45:02.006 --> 00:45:02.956 A:middle
doesn't have a foreground

00:45:02.956 --> 00:45:04.956 A:middle
attribute, it defaults to black.

00:45:04.956 --> 00:45:06.596 A:middle
And this is what it has always

00:45:06.596 --> 00:45:08.006 A:middle
defaulted to and it's going to

00:45:08.006 --> 00:45:09.296 A:middle
continue to be the default for

00:45:09.296 --> 00:45:10.016 A:middle
compatibility.

00:45:11.036 --> 00:45:12.596 A:middle
So, one way to fix this is to

00:45:12.596 --> 00:45:13.586 A:middle
set a foreground color

00:45:13.586 --> 00:45:15.726 A:middle
explicitly to one of our dynamic

00:45:15.726 --> 00:45:17.436 A:middle
system colors, and that's going

00:45:17.436 --> 00:45:18.236 A:middle
to do what you expect.

00:45:19.616 --> 00:45:21.596 A:middle
But a better alternative is that

00:45:21.596 --> 00:45:22.596 A:middle
if you're doing manual

00:45:22.596 --> 00:45:24.196 A:middle
attributed string drawing, you

00:45:24.196 --> 00:45:25.776 A:middle
should switch to a Cocoa

00:45:25.776 --> 00:45:27.256 A:middle
control, like an NSTextField,

00:45:27.536 --> 00:45:28.426 A:middle
which does this for you

00:45:28.426 --> 00:45:30.876 A:middle
automatically, or, if you're

00:45:30.876 --> 00:45:32.386 A:middle
manipulating the storage of a

00:45:32.386 --> 00:45:36.376 A:middle
textView, we have new API called

00:45:36.376 --> 00:45:38.256 A:middle
performValidatedReplacement on

00:45:38.256 --> 00:45:40.256 A:middle
textView that does a nice thing

00:45:40.256 --> 00:45:40.636 A:middle
for you.

00:45:40.966 --> 00:45:42.846 A:middle
If you go ahead and replace a

00:45:43.026 --> 00:45:45.336 A:middle
string with an attributed string

00:45:45.336 --> 00:45:47.976 A:middle
in your textView, it will fill

00:45:47.976 --> 00:45:50.336 A:middle
in any missing attributes with

00:45:50.406 --> 00:45:51.456 A:middle
the typing attributes from the

00:45:51.456 --> 00:45:54.666 A:middle
textView, so that way you can go

00:45:54.666 --> 00:45:55.776 A:middle
ahead and specify your new

00:45:55.776 --> 00:45:56.936 A:middle
attributed string without having

00:45:57.036 --> 00:45:58.776 A:middle
to manually merge all your

00:45:58.776 --> 00:46:00.000 A:middle
attributes together.


00:46:03.376 --> 00:46:04.546 A:middle
Here's something else that we've

00:46:04.546 --> 00:46:05.776 A:middle
encountered in a couple places,

00:46:06.296 --> 00:46:07.526 A:middle
which is appearances that are

00:46:07.526 --> 00:46:08.666 A:middle
set in Interface Builder.

00:46:09.346 --> 00:46:10.246 A:middle
So, if you're going ahead and

00:46:10.246 --> 00:46:11.576 A:middle
building and debugging your

00:46:11.576 --> 00:46:12.796 A:middle
application and you find that

00:46:12.796 --> 00:46:13.646 A:middle
there's some part of your app

00:46:13.686 --> 00:46:15.596 A:middle
that just isn't switching, you

00:46:15.596 --> 00:46:17.506 A:middle
might have this in your

00:46:17.506 --> 00:46:18.136 A:middle
Interface Builder.

00:46:18.136 --> 00:46:20.496 A:middle
A hardcoded aqua appearance.

00:46:20.746 --> 00:46:21.976 A:middle
And it's easy to miss, because

00:46:22.016 --> 00:46:23.756 A:middle
before today, essentially, you

00:46:23.756 --> 00:46:24.956 A:middle
were always running under aqua,

00:46:25.366 --> 00:46:26.536 A:middle
so you didn't notice it.

00:46:27.056 --> 00:46:29.226 A:middle
And the fix for this is easy.

00:46:29.866 --> 00:46:30.976 A:middle
If you set this back to the

00:46:30.976 --> 00:46:32.696 A:middle
Inherited option in the pop-up

00:46:32.696 --> 00:46:34.206 A:middle
menu, your view's going to

00:46:34.206 --> 00:46:35.596 A:middle
automatically inherit from its

00:46:35.596 --> 00:46:36.146 A:middle
ancestor.

00:46:36.696 --> 00:46:40.516 A:middle
An extra special case of this is

00:46:40.626 --> 00:46:41.556 A:middle
NSVisualEffectView.

00:46:41.916 --> 00:46:42.966 A:middle
It's very likely that if you

00:46:42.966 --> 00:46:44.646 A:middle
have a VisualEffectView in

00:46:44.646 --> 00:46:45.866 A:middle
Interface Builder or even in

00:46:45.866 --> 00:46:47.516 A:middle
code, you're setting one of the

00:46:47.516 --> 00:46:49.656 A:middle
two vibrant appearances on it

00:46:49.746 --> 00:46:51.936 A:middle
and the great news is that in

00:46:51.936 --> 00:46:54.446 A:middle
macOS 10.14 this is no longer

00:46:54.446 --> 00:46:55.086 A:middle
necessary.

00:46:55.436 --> 00:46:56.606 A:middle
NSVisualEffectView will

00:46:56.676 --> 00:46:58.076 A:middle
automatically pick the right

00:46:58.076 --> 00:46:59.576 A:middle
vibrant appearance based on the

00:46:59.576 --> 00:47:00.516 A:middle
appearance it's inheriting.


00:46:59.576 --> 00:47:00.516 A:middle
appearance it's inheriting.

00:47:00.886 --> 00:47:02.246 A:middle
So, if it inherits darkAqua,

00:47:02.366 --> 00:47:03.526 A:middle
it's going to choose vibrantDark

00:47:03.826 --> 00:47:05.176 A:middle
and if it inherits aqua, it'll

00:47:05.176 --> 00:47:05.916 A:middle
choose vibrantLight.

00:47:06.146 --> 00:47:08.666 A:middle
And so the fix for this is easy.

00:47:08.666 --> 00:47:10.186 A:middle
In Interface builder, you can

00:47:10.186 --> 00:47:11.606 A:middle
set this to inherited and then

00:47:11.606 --> 00:47:12.666 A:middle
in code you can set the

00:47:12.666 --> 00:47:14.236 A:middle
appearance to nil or just delete

00:47:14.236 --> 00:47:14.806 A:middle
your override.

00:47:15.126 --> 00:47:18.476 A:middle
Interface-- speaking of

00:47:18.476 --> 00:47:20.086 A:middle
Interface Builder, Interface

00:47:20.086 --> 00:47:22.016 A:middle
Builder is a great tool for

00:47:22.016 --> 00:47:23.766 A:middle
designing and previewing your

00:47:23.766 --> 00:47:24.656 A:middle
views visually.

00:47:25.206 --> 00:47:27.136 A:middle
And so, for example, here I have

00:47:27.136 --> 00:47:28.726 A:middle
a view that is actually a custom

00:47:28.726 --> 00:47:30.596 A:middle
view using IB designable.

00:47:30.986 --> 00:47:32.086 A:middle
So, I'm rendering a gradient

00:47:32.086 --> 00:47:33.316 A:middle
here and I can see it right here

00:47:33.316 --> 00:47:34.026 A:middle
in the canvas.

00:47:34.326 --> 00:47:35.926 A:middle
And, by default, my canvas is

00:47:35.926 --> 00:47:37.886 A:middle
previewing my custom designable

00:47:37.886 --> 00:47:39.496 A:middle
view using the canvas's

00:47:39.496 --> 00:47:41.426 A:middle
appearance, in this case dark.

00:47:42.336 --> 00:47:43.596 A:middle
But down at the bottom, we have

00:47:43.596 --> 00:47:45.306 A:middle
a new toggle that lets you go

00:47:45.306 --> 00:47:46.646 A:middle
ahead and set it to the light

00:47:46.646 --> 00:47:47.906 A:middle
appearance so that you can

00:47:47.906 --> 00:47:48.986 A:middle
preview the way that your view

00:47:48.986 --> 00:47:50.426 A:middle
looks in either appearance.

00:47:50.936 --> 00:47:52.936 A:middle
And thanks to Interface

00:47:52.936 --> 00:47:54.156 A:middle
Builder's great support for

00:47:54.156 --> 00:47:56.446 A:middle
asset catalog colors, we can

00:47:56.446 --> 00:47:57.876 A:middle
actually use our custom asset

00:47:57.876 --> 00:47:59.436 A:middle
catalog colors, which have dark

00:47:59.436 --> 00:48:01.116 A:middle
and light variants, and we can


00:47:59.436 --> 00:48:01.116 A:middle
and light variants, and we can

00:48:01.116 --> 00:48:03.116 A:middle
preview them in the canvas live.

00:48:03.696 --> 00:48:04.776 A:middle
And if you see there's a little

00:48:04.776 --> 00:48:05.966 A:middle
arrow button built into that

00:48:05.966 --> 00:48:07.156 A:middle
pop-up button and you can use

00:48:07.156 --> 00:48:08.096 A:middle
that to follow it and go

00:48:08.096 --> 00:48:09.396 A:middle
straight to the definition in

00:48:09.396 --> 00:48:10.936 A:middle
your asset catalog, so you can

00:48:10.936 --> 00:48:12.866 A:middle
see live as you're changing it.

00:48:13.816 --> 00:48:15.106 A:middle
And you can do this all without

00:48:15.106 --> 00:48:16.416 A:middle
even building and recompiling.

00:48:16.456 --> 00:48:18.136 A:middle
When you do build and run,

00:48:18.136 --> 00:48:20.646 A:middle
you're going to see a new item

00:48:20.646 --> 00:48:22.646 A:middle
in your Debug Bar and it

00:48:22.646 --> 00:48:24.056 A:middle
produces a menu that allows you

00:48:24.056 --> 00:48:25.016 A:middle
to choose the appearance for

00:48:25.016 --> 00:48:25.766 A:middle
your application.

00:48:26.446 --> 00:48:27.636 A:middle
And this is really handy for

00:48:27.636 --> 00:48:29.096 A:middle
previewing your app in various

00:48:29.096 --> 00:48:30.746 A:middle
appearances without having to go

00:48:30.746 --> 00:48:31.966 A:middle
and reconfigure your entire

00:48:31.966 --> 00:48:32.426 A:middle
system.

00:48:33.686 --> 00:48:34.886 A:middle
Not only can you choose light

00:48:34.886 --> 00:48:36.056 A:middle
and dark, but you can also

00:48:36.056 --> 00:48:37.066 A:middle
choose the high contrast

00:48:37.066 --> 00:48:38.996 A:middle
variants and test those as well.

00:48:40.146 --> 00:48:41.276 A:middle
And, if you have a Touch Bar

00:48:41.276 --> 00:48:42.796 A:middle
Mac, this appears in the

00:48:42.796 --> 00:48:44.476 A:middle
expanded Debug Bar as well, so

00:48:44.476 --> 00:48:45.566 A:middle
you can do this without even

00:48:45.566 --> 00:48:47.156 A:middle
leaving your app to go back to

00:48:47.746 --> 00:48:48.000 A:middle
Xcode.

00:48:50.316 --> 00:48:51.326 A:middle
Finally, I want to talk about

00:48:51.326 --> 00:48:53.176 A:middle
one last tool in Xcode that is

00:48:53.176 --> 00:48:54.326 A:middle
really great for debugging your

00:48:54.326 --> 00:48:55.426 A:middle
Dark Mode applications.

00:48:56.346 --> 00:48:58.676 A:middle
So, here we have our app and

00:48:58.676 --> 00:48:59.766 A:middle
really things are looking pretty

00:48:59.766 --> 00:48:59.996 A:middle
good.

00:48:59.996 --> 00:49:01.536 A:middle
There's nothing out of place,


00:48:59.996 --> 00:49:01.536 A:middle
There's nothing out of place,

00:49:02.286 --> 00:49:04.156 A:middle
but I find that when I scroll

00:49:04.156 --> 00:49:06.586 A:middle
and rubber band a bit, oh, I'm

00:49:06.586 --> 00:49:07.476 A:middle
revealing something that I

00:49:07.476 --> 00:49:08.236 A:middle
didn't expect.

00:49:08.346 --> 00:49:09.326 A:middle
There's a light background

00:49:09.426 --> 00:49:11.516 A:middle
hiding back there somewhere, but

00:49:11.516 --> 00:49:12.936 A:middle
it's hard to see without doing

00:49:12.936 --> 00:49:14.056 A:middle
that little scroll gesture.

00:49:14.776 --> 00:49:16.446 A:middle
And this is a great case for

00:49:16.446 --> 00:49:17.446 A:middle
using the View Debugger.

00:49:18.686 --> 00:49:19.606 A:middle
Using the View Debugger's

00:49:19.606 --> 00:49:22.026 A:middle
expanded 3D view, the view

00:49:22.026 --> 00:49:23.336 A:middle
that's drawing unexpectedly is

00:49:23.416 --> 00:49:24.686 A:middle
really easy to spot.

00:49:25.606 --> 00:49:26.786 A:middle
And in this case, we can see

00:49:26.786 --> 00:49:27.756 A:middle
that although our collection

00:49:27.756 --> 00:49:29.266 A:middle
view was drawing the background

00:49:29.416 --> 00:49:31.116 A:middle
that we expected, the scroll

00:49:31.116 --> 00:49:32.696 A:middle
view behind it still has a light

00:49:32.696 --> 00:49:33.526 A:middle
background for some reason.

00:49:33.526 --> 00:49:35.556 A:middle
And when we select it, we can

00:49:35.556 --> 00:49:37.396 A:middle
use the Inspector to see how

00:49:37.396 --> 00:49:38.226 A:middle
it's being configured.

00:49:38.226 --> 00:49:39.606 A:middle
And in this case, we can verify

00:49:39.606 --> 00:49:40.726 A:middle
that, yeah, it's just drawing a

00:49:40.726 --> 00:49:42.156 A:middle
hardcoded white color and that's

00:49:42.156 --> 00:49:43.776 A:middle
a really easy fix.

00:49:44.916 --> 00:49:46.036 A:middle
The View Debugger has made a

00:49:46.036 --> 00:49:47.276 A:middle
number of enhancements in Xcode

00:49:47.276 --> 00:49:48.756 A:middle
10 that are great for debugging

00:49:48.756 --> 00:49:49.836 A:middle
Dark Mode applications,

00:49:50.666 --> 00:49:53.096 A:middle
including colors.

00:49:53.146 --> 00:49:54.326 A:middle
They can now show you the names

00:49:54.326 --> 00:49:55.756 A:middle
of colors, both dynamic system

00:49:55.756 --> 00:49:57.416 A:middle
colors and your asset catalog

00:49:57.416 --> 00:49:59.016 A:middle
colors, so you can identify

00:49:59.096 --> 00:50:00.546 A:middle
where these RGB components are


00:49:59.096 --> 00:50:00.546 A:middle
where these RGB components are

00:50:00.546 --> 00:50:02.476 A:middle
coming from, and it'll show you

00:50:02.476 --> 00:50:03.896 A:middle
the configuration of your view

00:50:04.206 --> 00:50:05.956 A:middle
for NSAppearance, including the

00:50:05.956 --> 00:50:06.946 A:middle
appearance that it's going to

00:50:06.946 --> 00:50:08.586 A:middle
draw with as well as whether

00:50:08.586 --> 00:50:10.196 A:middle
there's any local overrides of

00:50:10.196 --> 00:50:12.000 A:middle
NSAppearance on that object.

00:50:14.496 --> 00:50:16.396 A:middle
So, we have covered an awful lot

00:50:16.396 --> 00:50:17.806 A:middle
of content and so let's rewind

00:50:17.806 --> 00:50:18.836 A:middle
and make sure that we remember

00:50:18.836 --> 00:50:19.096 A:middle
it all.

00:50:19.926 --> 00:50:21.436 A:middle
We started off with NSAppearance

00:50:21.906 --> 00:50:23.526 A:middle
and leveraging it effectively to

00:50:23.526 --> 00:50:25.226 A:middle
draw your custom views that

00:50:25.226 --> 00:50:26.486 A:middle
adapt based on the theme.

00:50:27.596 --> 00:50:28.796 A:middle
Then we learned how to add depth

00:50:28.796 --> 00:50:30.356 A:middle
and beauty to our UI using our

00:50:30.356 --> 00:50:31.906 A:middle
new and updated palette of

00:50:31.966 --> 00:50:33.506 A:middle
NSVisualEffectView materials.

00:50:34.306 --> 00:50:35.686 A:middle
We talked about drawing in a

00:50:35.686 --> 00:50:37.026 A:middle
couple of interesting contexts,

00:50:37.026 --> 00:50:39.176 A:middle
both vibrancy and selections,

00:50:39.516 --> 00:50:40.826 A:middle
and then we walked through some

00:50:40.826 --> 00:50:42.056 A:middle
of the great ways that Xcode can

00:50:42.056 --> 00:50:43.406 A:middle
help you design and debug your

00:50:43.406 --> 00:50:44.566 A:middle
Dark Mode applications.

00:50:44.916 --> 00:50:46.196 A:middle
As always, you can go to

00:50:46.196 --> 00:50:47.886 A:middle
developer.apple.com to re-watch

00:50:47.886 --> 00:50:49.286 A:middle
the video for this talk and see

00:50:49.286 --> 00:50:51.196 A:middle
any related resources and we

00:50:51.196 --> 00:50:52.166 A:middle
have labs today.

00:50:52.576 --> 00:50:54.186 A:middle
We have a special Cocoa and Dark

00:50:54.186 --> 00:50:58.106 A:middle
Mode Lab, it's at 2:00, and not

00:50:58.106 --> 00:50:59.266 A:middle
only will we have Cocoa

00:50:59.266 --> 00:51:00.326 A:middle
engineers onsite to help you


00:50:59.266 --> 00:51:00.326 A:middle
engineers onsite to help you

00:51:00.326 --> 00:51:01.426 A:middle
with your code, but we'll also

00:51:01.426 --> 00:51:02.836 A:middle
have human interface designers

00:51:02.836 --> 00:51:03.766 A:middle
onsite to help you with your

00:51:03.766 --> 00:51:04.936 A:middle
design questions as well.

00:51:05.286 --> 00:51:07.136 A:middle
So, go get lunch, think about

00:51:07.136 --> 00:51:08.646 A:middle
Dark Mode the entire time, and

00:51:08.646 --> 00:51:09.676 A:middle
then come see us.

00:51:09.996 --> 00:51:11.086 A:middle
And then, finally, we have an

00:51:11.086 --> 00:51:12.546 A:middle
additional Cocoa Lab on Friday

00:51:12.546 --> 00:51:14.000 A:middle
at 11:00 as well.

00:51:14.496 --> 00:51:14.696 A:middle
All right.

00:51:14.746 --> 00:51:15.466 A:middle
Thank you very much.

00:51:16.346 --> 00:51:18.000 A:middle
[ Applause ]
