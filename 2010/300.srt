1
00:00:06,500 --> 00:00:09,450
[ Applause ]

2
00:00:09,450 --> 00:00:10,910
>> Good afternoon.

3
00:00:14,630 --> 00:00:18,250
It was only two short years ago
that they introduced the iPhone SDK,

4
00:00:18,250 --> 00:00:24,920
and developers like you have downloaded
it more than 2 million times.

5
00:00:26,470 --> 00:00:31,940
You guys have created more than
225,000 apps for the App Store.

6
00:00:31,940 --> 00:00:39,750
And users of iPhones, iPods, and now, iPads,
have downloaded them more than 5 billion times.

7
00:00:39,750 --> 00:00:46,800
The fact is, there are now almost 100 million
devices out there that are running the iOS,

8
00:00:46,800 --> 00:00:51,250
with customers that are ready to buy your apps.

9
00:00:51,250 --> 00:00:56,210
The App Store we created has turned into huge advantage.

10
00:00:56,210 --> 00:01:03,680
It is a global market space that is available on every one
of those almost 100 million devices making it very easy

11
00:01:03,680 --> 00:01:07,180
for your customers to find and purchase your apps.

12
00:01:08,310 --> 00:01:16,370
And of course, behind this vibrant market space, they are
the Xcode Tools that you use everyday to create these apps.

13
00:01:17,630 --> 00:01:22,350
And in this session, we want to talk
about what's new in the Xcode Tools.

14
00:01:23,800 --> 00:01:32,470
Let's start with the iPhone SDK 4 that is available for
you today and contains the latest version of Xcode 3.2.

15
00:01:32,470 --> 00:01:38,900
Since we last met here in this room about a
year ago, the iPhone tools have advanced a lot.

16
00:01:38,900 --> 00:01:44,010
Everything related to packaging, testing, and
distribution of apps is now easier and faster.

17
00:01:44,010 --> 00:01:47,320
Let me just give you one example.

18
00:01:47,320 --> 00:01:55,480
Uploading applications from Xcode to a device is now done
incrementally, which means that it very quick for you

19
00:01:55,480 --> 00:02:00,960
to launch your applications on your
devices and test them natively.

20
00:02:00,960 --> 00:02:07,060
Even games that tend to have very large amounts of
resources now have very quick added debug interfaces.

21
00:02:07,060 --> 00:02:15,890
But I think the future you might like best in the latest
iPhone tools is that now, you can simply take your devices,

22
00:02:15,890 --> 00:02:20,050
plug them into your computer, enter
your IP developer ID and password,

23
00:02:20,050 --> 00:02:22,530
and you immediately get a fully provisioned device.

24
00:02:22,530 --> 00:02:24,510
It's ready for development.

25
00:02:24,510 --> 00:02:31,060
[ Applause ]

26
00:02:31,060 --> 00:02:32,090
It's instant setup.

27
00:02:32,090 --> 00:02:36,410
And the instant setup works across multiple
devices and multiple members of the team,

28
00:02:36,410 --> 00:02:41,320
so that you can immediately share and test
your applications with all your coworkers.

29
00:02:41,320 --> 00:02:46,650
So to show you how simple it is to set up a
device now, I'd like to ask Todd Fernandez

30
00:02:46,650 --> 00:02:48,510
to come up on stage and give you the first demo.

31
00:02:48,510 --> 00:02:56,040
[ Applause ]

32
00:02:56,040 --> 00:02:57,190
>> Thank you, Andreas.

33
00:02:57,190 --> 00:03:02,530
Getting started developing on a device is
now as simple as connecting it to your Mac

34
00:03:02,530 --> 00:03:05,600
and telling Xcode you want to use it for development.

35
00:03:05,600 --> 00:03:17,940
You enter your developer program log in information,
submit the request, and there's no step 3.

36
00:03:19,140 --> 00:03:21,910
I simply end up with a device that's ready for development.

37
00:03:21,910 --> 00:03:23,510
It's that simple.

38
00:03:23,510 --> 00:03:30,040
[ Applause ]

39
00:03:30,040 --> 00:03:32,220
But it also works great for teams.

40
00:03:32,220 --> 00:03:35,920
As new engineers and new devices join your team,

41
00:03:35,920 --> 00:03:40,990
Xcode always maintains a single provisioning
profile containing all team members,

42
00:03:40,990 --> 00:03:46,290
all their devices which will work to develop any app.

43
00:03:46,290 --> 00:03:52,120
Now that our device is ready, let's
open our project and build our app.

44
00:03:53,190 --> 00:03:58,280
This project builds a universal app called Picture
Viewer, and you'll see it throughout this session.

45
00:03:58,280 --> 00:04:05,470
I'm going to build and run it on the device, and of course,

46
00:04:05,470 --> 00:04:09,790
I'm using LLVM to compile it which
is now available in the new SDK.

47
00:04:09,790 --> 00:04:15,060
So take advantage of its faster build
times and much more precise diagnostics.

48
00:04:15,060 --> 00:04:18,890
That will be very helpful for those
of you with errors in your code.

49
00:04:18,890 --> 00:04:20,940
[ Laughter ]

50
00:04:20,940 --> 00:04:26,430
Because Picture Viewer includes many megabytes of
photos, it takes a few seconds to upload to the device.

51
00:04:26,430 --> 00:04:32,320
I think I'm going to have to ask
all of you to turn off your Wi-Fi.

52
00:04:32,320 --> 00:04:34,730
[ Laughter ]

53
00:04:34,730 --> 00:04:41,970
Picture Viewer is a very simple app, it loads a
series of photos on to a virtual table and allows me

54
00:04:41,970 --> 00:04:44,990
to tap on each one to show at full screen.

55
00:04:44,990 --> 00:04:46,950
Now, that's a great photo.

56
00:04:46,950 --> 00:04:50,860
It's reminding me of the vacation I'm
finally going to take later this summer.

57
00:04:50,860 --> 00:04:51,860
Alright, you get the idea.

58
00:04:51,860 --> 00:04:59,160
But I want to improve that launch
experience by adding a launch image.

59
00:04:59,160 --> 00:05:02,400
I conveniently have a launch image in my project.

60
00:05:02,400 --> 00:05:11,510
I just need to add a reference to it in the apps Info.plist.

61
00:05:11,510 --> 00:05:16,700
Now, when I build and run again, you'll see that
the upload is instantaneous because the only thing

62
00:05:16,700 --> 00:05:19,470
that needs to be uploaded is that single file.

63
00:05:19,470 --> 00:05:22,500
And there's my launch screen.

64
00:05:22,500 --> 00:05:29,030
[ Applause ]

65
00:05:29,030 --> 00:05:35,310
This small change saves huge amounts of time for
those of you with large resources in your app.

66
00:05:36,620 --> 00:05:42,220
We've also simplified how you choose the
destination where you want to build and run your app.

67
00:05:42,220 --> 00:05:46,880
We've been building on the device, and now, I
want to see how my app looks in the simulator.

68
00:05:46,880 --> 00:05:49,680
So simply choose simulator and build and run again.

69
00:05:49,680 --> 00:05:57,270
And as you may have seen briefly, the iPhone Simulator in
the new SDK now allows you to simulate the new iPhone 4.

70
00:05:57,270 --> 00:06:05,160
And now, in the new SDK that same build can be run
in the Simulator against older versions of the OS,

71
00:06:05,160 --> 00:06:10,030
just like you're used to on devices, so that
I can see how my app looks on iPad as well.

72
00:06:10,030 --> 00:06:18,390
I simply choose iPad Simulator 3.2 and build and run again.

73
00:06:21,640 --> 00:06:23,310
And there it is on iPad.

74
00:06:23,310 --> 00:06:30,890
Well, now that we've built our app, it's
time to think about distributing it.

75
00:06:30,890 --> 00:06:37,550
And the way you get started in that process
is to use the new Build and Archive command.

76
00:06:38,860 --> 00:06:45,070
Xcode will build your app if it's not
up-to-date, and then create the archive.

77
00:06:45,070 --> 00:06:51,300
Archive preserve your ability to symbolicate the crash
reports form this specific build of your application.

78
00:06:51,300 --> 00:06:55,550
And more importantly, since it will help
prevent those crash reports in the first place,

79
00:06:55,550 --> 00:07:03,420
allows you to continue testing your application until you're
ready to distribute those exact bits without rebuilding.

80
00:07:03,420 --> 00:07:08,690
This is really important, because as Steve mentioned
this morning, your app crashing is actually one

81
00:07:08,690 --> 00:07:12,680
of the most common reasons why your app is
not approved during those first seven days.

82
00:07:12,680 --> 00:07:17,730
And we have now made it really
easy for you to avoid that fate.

83
00:07:18,760 --> 00:07:24,170
Now, in order to show you the distribution
features with this archive that I built,

84
00:07:24,170 --> 00:07:26,940
I need a distribution provisioning profile.

85
00:07:28,100 --> 00:07:34,450
Developer profiles are another great feature that allows
you to export all of your provisioning information

86
00:07:34,450 --> 00:07:39,540
into a single file which you can then import
on a new development system to get you--

87
00:07:39,540 --> 00:07:41,680
your devices ready for development immediately.

88
00:07:41,680 --> 00:07:44,380
And I'm going to take advantage of it

89
00:07:44,380 --> 00:07:49,500
to import the distribution provisioning profile
I need to show you the sharing features.

90
00:07:49,500 --> 00:07:55,320
[ Pause ]

91
00:07:55,320 --> 00:07:59,170
Xcode now provides a number of ways to share your app.

92
00:07:59,170 --> 00:08:05,030
But before we get there, Validate Application
actually runs many of the same tests that will be run

93
00:08:05,030 --> 00:08:09,120
on your app once you submit it for App Store review.

94
00:08:09,120 --> 00:08:12,800
Again, Xcode leads me through the entire process.

95
00:08:12,800 --> 00:08:19,870
I enter my iTunes connect log in information, I choose the
distribution provisioning profile and application I want

96
00:08:19,870 --> 00:08:27,020
to validate, Xcode resigns the app, packages it
up, uploads its iTunes Connect with a test or run,

97
00:08:27,020 --> 00:08:30,680
and then reports the results back to me right here in Xcode.

98
00:08:30,680 --> 00:08:34,240
And it appears that I've forgotten to
include an iPad size version of my icon.

99
00:08:34,240 --> 00:08:37,280
And Xcode even tells me how to fix it.

100
00:08:37,280 --> 00:08:42,680
This is really great because it allows you to
find and fix common problems like this very early

101
00:08:42,680 --> 00:08:49,090
in your development process well before
your ready to submit to App Store.

102
00:08:49,090 --> 00:08:54,590
Now once your app passes validation, there are a number
of ways that you can distribute your app more widely.

103
00:08:54,590 --> 00:09:02,090
Xcode can package up your app and simply save it to disk to
distribute however you choose, or you can have it attached

104
00:09:02,090 --> 00:09:06,000
to an email to send out to your beta testers.

105
00:09:06,000 --> 00:09:09,330
Alternatively, you can take advantage
of one of the new enterprise features

106
00:09:09,330 --> 00:09:14,120
that Steve mentioned this morning
to distribute your enterprise app.

107
00:09:14,120 --> 00:09:18,990
Again, Xcode will create the files that you need in
order to post your app on your corporate internet

108
00:09:18,990 --> 00:09:22,890
so that your employees can download
it wirelessly to all of their devices.

109
00:09:22,890 --> 00:09:29,780
So once you're done, all this testing,
your sure your app is ready to go,

110
00:09:29,780 --> 00:09:34,710
you can use the last button to submit it to iTunes Connect.

111
00:09:34,710 --> 00:09:38,510
All of the same test that were run when you
did validate application will be run again.

112
00:09:38,510 --> 00:09:43,480
And if they all pass, your app will be
forwarded for review for the App Store

113
00:09:43,480 --> 00:09:47,710
where it can begin making its contribution
to those next billion downloads.

114
00:09:47,710 --> 00:09:49,450
Back to you, Andreas.

115
00:09:50,500 --> 00:09:55,360
[ Applause ]

116
00:09:55,360 --> 00:10:00,890
>> So that was a quick tour of the latest iPhone
Tools and the instant setup process for your devices.

117
00:10:00,890 --> 00:10:05,080
As you can see a lot has been accomplished
in the Tools over the last year.

118
00:10:05,080 --> 00:10:08,510
And Xcode 3 is ready for you to get to start.

119
00:10:08,510 --> 00:10:13,170
To start working on your next iPhone and iPad projects.

120
00:10:13,170 --> 00:10:18,380
And I can't wait to see with what kind of
great new stuff you are going to come up with.

121
00:10:19,910 --> 00:10:23,820
But you know, we also have something
new to share with you today.

122
00:10:23,820 --> 00:10:27,480
And I would like to use the remainder
of this session to give you a sneak peek

123
00:10:27,480 --> 00:10:32,100
at the next big thing we've been
working on which is Xcode 4.

124
00:10:33,500 --> 00:10:41,790
[ Applause ]

125
00:10:41,790 --> 00:10:43,500
This is Xcode 4.

126
00:10:43,500 --> 00:10:48,030
[ Laughter ]

127
00:10:48,030 --> 00:10:52,560
[ Applause ]

128
00:10:52,560 --> 00:10:56,200
Xcode 4 is built upon the proven
foundation of our fast source editor,

129
00:10:56,200 --> 00:10:59,700
our robust build system, and our powerful compilers.

130
00:10:59,700 --> 00:11:03,780
But the user interface and workflow are completely new.

131
00:11:03,780 --> 00:11:09,350
There's so much new stuff in Xcode 4 that I could probably
be up here on stage all day long to talk to you about it.

132
00:11:09,350 --> 00:11:11,560
But of course I won't get quite that much time.

133
00:11:11,560 --> 00:11:16,560
So we're going to focus on eight of the
top features that make Xcode 4 amazing.

134
00:11:16,560 --> 00:11:24,460
[Laughter] It's only going to be eight.

135
00:11:24,460 --> 00:11:30,720
[Laughter] So to explain the first one, I'm
going to go back to Xcode 3 one more time.

136
00:11:30,720 --> 00:11:34,610
The Xcode 3 user interface has served us
very well over the last several years.

137
00:11:34,610 --> 00:11:40,670
But when we started working on Xcode 4, we had a very
specific problem in mind that we wanted to solve.

138
00:11:40,670 --> 00:11:43,710
In the project windows, of course,
you get most of your work done.

139
00:11:43,710 --> 00:11:48,350
But while you proceed through your development
process, you have to branch out in traditional windows.

140
00:11:48,350 --> 00:11:53,220
For example to perform Find, or to interact
with the Debugger, or to edit base settings.

141
00:11:53,220 --> 00:11:58,690
So you're going to edit them and you find
yourself juggling multiple windows on the screen.

142
00:11:58,690 --> 00:12:04,500
So, the first key feature of Xcode 4 is that all core
development tasks are handed within one single window.

143
00:12:04,500 --> 00:12:13,130
[ Applause ]

144
00:12:13,130 --> 00:12:15,930
The vast majority of space in this
window is given to the editor.

145
00:12:15,930 --> 00:12:19,540
So it stays focused on your content.

146
00:12:19,540 --> 00:12:25,920
And on the left side of the editor, you find the new
Xcode navigators which organize your project information.

147
00:12:25,920 --> 00:12:28,910
There are several navigators that support the entire--

148
00:12:28,910 --> 00:12:33,490
that support all the different
phases of your development process.

149
00:12:33,490 --> 00:12:39,270
You can mange projects and files, you can browse
classes and methods, you can perform searches,

150
00:12:39,270 --> 00:12:45,430
you can work through bid errors, you can track debugging
information, and you can view things like bid logs.

151
00:12:46,760 --> 00:12:51,580
And all of that is presented to you in
one consistent way in the navigator area.

152
00:12:51,580 --> 00:12:55,530
In fact, Xcode 4 allows you to manage
multiple projects within the same window.

153
00:12:55,530 --> 00:12:58,730
So can you-- you can make changes
across all your frameworks, libraries,

154
00:12:58,730 --> 00:13:02,200
plug-ins, and application at the same time.

155
00:13:04,870 --> 00:13:10,620
You could match up the functionality to perform the most
common development task into the new streamline Toolbar

156
00:13:10,620 --> 00:13:17,180
which is cleaner but still does more, and right underneath
the Toolbar, you find a new Jump bar which shows you

157
00:13:17,180 --> 00:13:23,320
where you currently are in your project, but also allows
you to click and navigate to other parts in your project.

158
00:13:23,320 --> 00:13:28,150
Feature number two, as you might have already guessed
from the screenshot I showed you a few moments ago,

159
00:13:28,150 --> 00:13:32,610
is Interface Builder fully integrated into the Xcode IDE.

160
00:13:32,610 --> 00:13:35,520
[ Applause ]

161
00:13:35,520 --> 00:13:38,710
>> There's no more standalone Interface
Builder application anymore.

162
00:13:38,710 --> 00:13:42,950
Everything you'd be able to do with
the standalone application is now part

163
00:13:42,950 --> 00:13:46,280
of the Xcode design and editing experience.

164
00:13:46,280 --> 00:13:52,730
But since it's now one application, the interface editor has
access to all the class information in your project index,

165
00:13:52,730 --> 00:13:57,280
which makes it much easier for you to keep your
interface files and your source code in sync.

166
00:13:57,280 --> 00:14:09,520
The edit-- the Inspectors and the Library at the right side
of the window, and with that all of IB is now part of Xcode.

167
00:14:09,520 --> 00:14:14,290
Feature number three, is the Xcode Assistant.

168
00:14:14,290 --> 00:14:22,320
When you're making changes to your source or to your
interfaces, these changes never have an isolation.

169
00:14:22,320 --> 00:14:26,260
Often, changes affect many different files at the same time.

170
00:14:26,260 --> 00:14:31,210
And so, there are a lot of things that you need to know
or research before you can complete making a change.

171
00:14:31,210 --> 00:14:37,890
For example, you might have to know how subclasses are
affected by a change you're making the super class,

172
00:14:37,890 --> 00:14:40,350
or you might have to check the definition of a category.

173
00:14:40,350 --> 00:14:45,350
And of course, you always have to keep your
header and implementation files perfectly in sync.

174
00:14:45,350 --> 00:14:47,630
And that's why we created the Assistant.

175
00:14:47,630 --> 00:14:51,750
The Assistant organizes the information
on your project index and brings it to you

176
00:14:51,750 --> 00:14:54,730
in the editor in a context-sensitive manner.

177
00:14:54,730 --> 00:14:59,630
Xcode basically hands you the information you're
looking for without you even asking for it.

178
00:14:59,630 --> 00:15:06,250
And to related content, simply shows up as a split
editor taking advantage of the additional space

179
00:15:06,250 --> 00:15:09,920
that we now have available in the single builder layout.

180
00:15:09,920 --> 00:15:13,710
The Assistant really shines with Interface Builder.

181
00:15:13,710 --> 00:15:18,520
But now, you can work on your GUI
and your source code side by side.

182
00:15:18,520 --> 00:15:21,190
It also works really well for things like data models.

183
00:15:21,190 --> 00:15:24,910
But now, you can easily access the
classes that are back in your models.

184
00:15:24,910 --> 00:15:31,140
So the Assistant brings you a ton of
information from the project index.

185
00:15:31,140 --> 00:15:34,490
And to show you how it works in practice,
I'm going to ask Matt Firlik to come

186
00:15:34,490 --> 00:15:38,500
up on stage and give you our first demo of Xcode 4.

187
00:15:38,500 --> 00:15:45,610
[ Applause ]

188
00:15:45,610 --> 00:15:46,440
>> Thank you, Andreas.

189
00:15:46,440 --> 00:15:50,240
I'm really excited to be the first to show
you some of the new features of Xcode 4.

190
00:15:50,240 --> 00:15:54,590
So let's jump right in.

191
00:15:54,590 --> 00:16:00,040
What you see here is the picture of your application,
Todd showed you just a moment ago, now open in Xcode 4.

192
00:16:00,040 --> 00:16:05,200
You can see immediately the dramatically
refined and streamline UI of Xcode 4.

193
00:16:05,200 --> 00:16:11,710
We've simplified the Toolbar to provide you just
the controls you need right at your finger tips.

194
00:16:11,710 --> 00:16:16,950
On the left hand side of the Toolbar, we provide you all
the controls for running and debugging your application.

195
00:16:16,950 --> 00:16:21,950
And we've taken all those settings, all
the context, around running and bug--

196
00:16:21,950 --> 00:16:29,680
debugging your application, and brought it down into a pop
up, where picking the thing you want is just one click.

197
00:16:29,680 --> 00:16:33,250
The center of the Toolbar is host to the activity view.

198
00:16:33,250 --> 00:16:37,360
This is where we show you the current status of
your project, as well as activities that are going

199
00:16:37,360 --> 00:16:40,950
on in the project like finding, building, and such.

200
00:16:40,950 --> 00:16:45,060
You'll see here, as I start to build my project,
it shows me the dynamic display of what's going on,

201
00:16:45,060 --> 00:16:49,280
it shows me the state when it's
done, and shows me the results.

202
00:16:49,280 --> 00:16:55,930
It's built successfully and with no issues, which
is exactly how your projects are all the time.

203
00:16:55,930 --> 00:17:01,340
The right hand side of the Toolbar is host to the controls
to allow me to configure the user interface to bring

204
00:17:01,340 --> 00:17:05,540
in different elements, to allow me to
adjust my workflow based on what I'm doing.

205
00:17:05,540 --> 00:17:08,300
We'll see those in a little bit.

206
00:17:08,300 --> 00:17:16,190
Most of the window's dedicated to navigation and to editing,
two primary tasks that you guys have experience with a lot.

207
00:17:16,190 --> 00:17:18,760
The left hand side is host to the navigators.

208
00:17:18,760 --> 00:17:23,280
Here, we're seeing the project navigator
showing me the structure of my projects.

209
00:17:23,280 --> 00:17:26,850
Now, the navigators provide you different axis of
information depending on what you want to look at.

210
00:17:26,850 --> 00:17:32,100
I can easily use the chooser at the top of
the navigator to select the symbol navigator.

211
00:17:32,100 --> 00:17:37,410
And now, I'm looking at my project with a symbolic
representation, allowing me to select anything I want.

212
00:17:37,410 --> 00:17:43,190
So whether you're looking at issues, find results, build
information, the navigators are your source of information

213
00:17:43,190 --> 00:17:48,720
to get those and allows you to change your
point of view without changing your context.

214
00:17:48,720 --> 00:17:52,320
Now, we feel that navigation is such a
critical element, we've integrated it directly

215
00:17:52,320 --> 00:17:55,210
into all the editors in the form of the Jump bar.

216
00:17:55,210 --> 00:18:01,760
Now, the Jump bar is across the top of my editor here and
provides me access to all kinds of navigation options.

217
00:18:01,760 --> 00:18:07,490
If I want to navigate inside the file I'm in, I can grab
the right hand most item and select a different piece.

218
00:18:07,490 --> 00:18:11,750
In this case, it's a different method
within this file and I can jump right to it.

219
00:18:11,750 --> 00:18:15,450
But say, what I wanted was not something in
this file, but it's a related header file

220
00:18:15,450 --> 00:18:17,510
or another file in the group that this file is in.

221
00:18:17,510 --> 00:18:23,880
I can select the note previous to that and
select any other file and move directly to it.

222
00:18:23,880 --> 00:18:30,050
In fact the Jump bar provides me the entire structure of
my project, such that I can grab any note here and navigate

223
00:18:30,050 --> 00:18:32,630
to any file I want with just a single click.

224
00:18:32,630 --> 00:18:35,450
And it's that easy to move about in your project.

225
00:18:35,450 --> 00:18:41,510
The Jump bar actually goes a step further and provides a
list of related files, both based on the context I'm in

226
00:18:41,510 --> 00:18:44,350
and the file that's currently being presented.

227
00:18:44,350 --> 00:18:49,940
So I have access to the recent files, unsaved files,
but I also have access to counter parts of this file,

228
00:18:49,940 --> 00:18:54,960
in this case, the header, but also, super
classes, siblings, and include files.

229
00:18:54,960 --> 00:19:01,270
This kind of navigation right at your fingertips is so
critical, but so powerful, that I can actually decide

230
00:19:01,270 --> 00:19:05,220
to use the control here in the Toolbar
and collapse the Navigator completely.

231
00:19:05,220 --> 00:19:09,030
And now, I have access to all the navigation
I want to get to and have the editor taking

232
00:19:09,030 --> 00:19:11,900
out the full window for my particular use.

233
00:19:11,900 --> 00:19:16,980
And this is actually great for all of you people who
think differently about line-wrapping and turn it off.

234
00:19:16,980 --> 00:19:18,250
This is great for you.

235
00:19:18,250 --> 00:19:19,720
Yeah, I know you're out there.

236
00:19:19,720 --> 00:19:22,000
This is a great view for you.

237
00:19:22,000 --> 00:19:27,190
Now, we've brought together-- we brought together-- we
brought forward all of the great editors from Xcode 3.

238
00:19:27,190 --> 00:19:29,880
This is the powerful source code
editor with all the features

239
00:19:29,880 --> 00:19:33,600
like code completion, code folding, all the syntax coloring.

240
00:19:33,600 --> 00:19:39,230
Well, we also made improvements to a number of editors
and added some new ones that I'd like to show you.

241
00:19:39,230 --> 00:19:42,950
I'll use the Jump bar and select a data model.

242
00:19:42,950 --> 00:19:46,450
And here, you see the diagram representation
of my data model with the source list here

243
00:19:46,450 --> 00:19:48,810
that allows me to click through and select each item.

244
00:19:48,810 --> 00:19:53,540
And while this view is great for kind of the high level
view, I can also switch to an integrated form view

245
00:19:53,540 --> 00:19:56,060
that gives me access to all the
properties of my core data model,

246
00:19:56,060 --> 00:20:00,070
so that it's really easy to modify it and configure it.

247
00:20:00,070 --> 00:20:04,420
Now, many of the assets that you work with
in your development process require editing.

248
00:20:04,420 --> 00:20:05,000
But some don't.

249
00:20:05,000 --> 00:20:12,030
For example, resources like images and movies, or
PDFs or other documents that you have in your project.

250
00:20:12,030 --> 00:20:17,700
Xcode 4 integrates technologies like PDF Kit and
the Quick Look technologies to provide viewers now

251
00:20:17,700 --> 00:20:20,250
for all the standard data types you guys work with.

252
00:20:20,250 --> 00:20:25,810
So, whether you are for example looking at the startup
movie that your graphic designer presented to you,

253
00:20:25,810 --> 00:20:29,140
it will run when you're application runs.

254
00:20:29,140 --> 00:20:33,320
Or, you're looking at the PDF document
that your manager sent you

255
00:20:33,320 --> 00:20:38,270
to describe all the different features
that your application needs to support.

256
00:20:38,270 --> 00:20:43,600
Or if you're just actually looking at the keynote
presentation that defines all the different features

257
00:20:43,600 --> 00:20:48,540
about the application you need to demo next, those are
all integrated directly in the Xcode as primary workflow.

258
00:20:48,540 --> 00:20:49,780
[ Applause ]

259
00:20:49,780 --> 00:20:56,190
Now as the picture in picture describes here
a little bit, one of the greatest advancements

260
00:20:56,190 --> 00:20:59,490
of Xcode 4 is the integration of Interface Builder.

261
00:20:59,490 --> 00:21:03,710
So, let's take a look at the Preferences
NIB file for this application.

262
00:21:03,710 --> 00:21:07,720
I will select it from the Jump bar and here it is.

263
00:21:07,720 --> 00:21:11,200
Here's the Interface Builder canvas with my interface.

264
00:21:11,200 --> 00:21:13,610
I can move it around on the canvas here.

265
00:21:13,610 --> 00:21:18,520
Along the left side of the editor is the Dock
which provides me access to the top level objects.

266
00:21:18,520 --> 00:21:25,340
I can click in the Dock and bring in other views and I
can select as many as I want so I can bring in 2 or 3

267
00:21:25,340 --> 00:21:30,370
and pick the items I want to use or I
can just focus on any number of items.

268
00:21:30,370 --> 00:21:33,880
Now the Dock also gives me access
to the structure of my document.

269
00:21:33,880 --> 00:21:38,540
By clicking the button down here at the bottom of the
Dock it will expand and it now shows me the outline view.

270
00:21:38,540 --> 00:21:44,540
That I can expand this and now see all the different
items within my interface and select them directly.

271
00:21:44,540 --> 00:21:47,870
Now, you may have noticed that the Jump
bar across the top has been updating too.

272
00:21:47,870 --> 00:21:50,450
It provides the same kind of navigational affordance.

273
00:21:50,450 --> 00:21:54,320
So now if I wanted to select any view
within my NIB file I can instantly pick it

274
00:21:54,320 --> 00:21:56,560
from the Jump bar and have it selected.

275
00:21:56,560 --> 00:21:59,310
So, it's that easy to continue navigating.

276
00:21:59,310 --> 00:22:02,530
Now, as we're working with our interface
files we know we need two utilities,

277
00:22:02,530 --> 00:22:08,470
we need the inspectors to modify attributes of our
interface and we need the library to add new items.

278
00:22:08,470 --> 00:22:13,440
So, I'll click on the upper right here of the
toolbar and I'll bring those utilities in.

279
00:22:13,440 --> 00:22:18,050
So, now we see the inspectors across the
top and the library across the bottom.

280
00:22:18,050 --> 00:22:21,810
Now the inspectors and the library work as you
would expect them to from Interface Builder 3.

281
00:22:21,810 --> 00:22:25,240
I can select for example, the view
that's on the left hand side here

282
00:22:25,240 --> 00:22:30,260
and let's change its background color
to something well, not too offensive.

283
00:22:30,260 --> 00:22:30,980
And it's just like that.

284
00:22:30,980 --> 00:22:36,800
I can also select for example all the text labels
here and let's choose to align them to the other side.

285
00:22:36,800 --> 00:22:39,840
So the inspectors are very natural and very fluid.

286
00:22:39,840 --> 00:22:45,690
Now, you'll also use the library down here switching
to the Object's tab to add elements to your interface.

287
00:22:45,690 --> 00:22:48,250
Let's drag another slider up into my interface.

288
00:22:48,250 --> 00:22:49,290
Just like that, we'll drop it in.

289
00:22:49,290 --> 00:22:51,930
It's exactly where we want it to go.

290
00:22:51,930 --> 00:22:54,570
And you can also use the library to change other parameters.

291
00:22:54,570 --> 00:23:00,540
For example, I'll switch the library to its media group
which shows me all the images that are within my project

292
00:23:00,540 --> 00:23:06,210
and I'll scroll down here and let's find that wood
grain and just drop it on my interface and there we go.

293
00:23:06,210 --> 00:23:12,330
So the library and the inspectors are still
very, very fluid right here in Interface Builder.

294
00:23:12,330 --> 00:23:18,860
Now being an integrated editor, the Interface Builder
content also has access to related information.

295
00:23:18,860 --> 00:23:21,750
If I pop open the related pop up
here, we'll see that in addition

296
00:23:21,750 --> 00:23:25,970
to the recent files we had before
we now also have top level objects.

297
00:23:25,970 --> 00:23:29,250
These are the classes that correspond
to all the objects in my interface.

298
00:23:29,250 --> 00:23:33,720
So I can instantly switch to them and get access
to them as I want to start refining my interface,

299
00:23:33,720 --> 00:23:37,210
making it really easy to move between
source code and my interface.

300
00:23:37,210 --> 00:23:41,420
But we wanted to take this a step further, and
this is where the Xcode Assistant comes in.

301
00:23:41,420 --> 00:23:45,620
I'm going to close this view and I'm
going to turn on the Xcode Assistant

302
00:23:45,620 --> 00:23:48,720
by clicking this button in the upper toolbar here.

303
00:23:48,720 --> 00:23:53,290
Now, you'll see that I have my
interface and the source code right here.

304
00:23:53,290 --> 00:23:57,020
Now this is more than just a secondary editor,
this is the editor that brought me the content

305
00:23:57,020 --> 00:23:59,360
that was most relevant to what I was working on.

306
00:23:59,360 --> 00:24:03,900
In this case it's the file's owner class, it's the
class of the control I'm going to be using most often.

307
00:24:03,900 --> 00:24:07,960
So here I can start adding outlets and add
in actions right as I refine my interface,

308
00:24:07,960 --> 00:24:10,290
bringing these two together so they feel as one.

309
00:24:10,290 --> 00:24:13,770
But we wanted to take this a step further.

310
00:24:14,880 --> 00:24:18,920
As I'm making connections in my interface
normally, you would do that by control dragging

311
00:24:18,920 --> 00:24:24,230
from let's say this picker view to one
of the objects in the interface here.

312
00:24:24,230 --> 00:24:28,260
But to make this truly feel like one, I'm
proud to announce to you now that instead

313
00:24:28,260 --> 00:24:31,750
of dragging two objects you can now drag directly to--

314
00:24:31,750 --> 00:24:32,550
[ Applause ]

315
00:24:32,550 --> 00:24:35,500
>> Yup. Directly to source code.

316
00:24:35,500 --> 00:24:44,100
[ Cheers and Applause ]

317
00:24:44,100 --> 00:24:46,850
>> And this truly allows you to
design in the way that you think.

318
00:24:46,850 --> 00:24:49,760
I know you guys all want to see that
again so let's take the slider [laughter]

319
00:24:49,760 --> 00:24:52,820
that I just added in and let's connect this up.

320
00:24:52,820 --> 00:24:56,140
But to really show you exactly how fluid
this is, you'll note that this time

321
00:24:56,140 --> 00:24:58,530
when I'm dragging there is no outlet there.

322
00:24:58,530 --> 00:25:01,500
But as I pop in, here's the insertion point.

323
00:25:01,500 --> 00:25:11,030
[ Applause ]

324
00:25:11,030 --> 00:25:13,190
>> And, of course, this works for actions too.

325
00:25:13,190 --> 00:25:18,870
So, while the assistant change to the implementation file
for this, let's scroll down to where I want this to go,

326
00:25:18,870 --> 00:25:22,570
and I'll control-drag right into the source, let it drop.

327
00:25:22,570 --> 00:25:27,950
We'll call this the adjust load-rate
method, hit return and there it is.

328
00:25:27,950 --> 00:25:31,500
So, now, we're bound up with our action
and we're bound up with our outlets.

329
00:25:31,500 --> 00:25:36,610
[ Applause ]

330
00:25:36,610 --> 00:25:40,240
>> Now, we wanted to bring some of the elements
of Interface Builder into the rest of the IDE.

331
00:25:40,240 --> 00:25:44,340
So, you'll actually note down here in the
Library, there's a code snippet section.

332
00:25:44,340 --> 00:25:48,390
This is where we'll provide you some great
snippets, but you can also add your own.

333
00:25:48,390 --> 00:25:54,630
I've added a method for working with sliders that tells me
when I hit the min and max value, so I can just grab that,

334
00:25:54,630 --> 00:25:58,780
drag it right into my source code here,
and drop it, and there's my method.

335
00:25:58,780 --> 00:26:00,810
[Background Applause] So, now the different
items where dragging and dropping work

336
00:26:00,810 --> 00:26:04,250
for your interfaces and for your source code.

337
00:26:04,250 --> 00:26:09,140
Now, the Xcode 4 Assistant shines, its
genius actually comes out more when we start

338
00:26:09,140 --> 00:26:11,530
to see the different content it can provide.

339
00:26:11,530 --> 00:26:15,830
Here, I've been looking at the file's
owner streaming my controller class.

340
00:26:15,830 --> 00:26:17,400
But there are other content we can look at.

341
00:26:17,400 --> 00:26:22,900
I'm going to change the group here from
showing me the top level objects to automatic.

342
00:26:22,900 --> 00:26:26,760
And you'll note in doing so, it's not
going to adjust based on my selection.

343
00:26:26,760 --> 00:26:29,450
So, now, we're saying it selected
the adjust load-rate method.

344
00:26:29,450 --> 00:26:34,280
If I click one of the other sliders, it's
going to jump to its method and therein.

345
00:26:34,280 --> 00:26:37,000
So, it makes it really, really easy,
really, really fluid to start working

346
00:26:37,000 --> 00:26:39,310
with these editors as pairs in exactly what you think.

347
00:26:39,310 --> 00:26:42,030
If you want to modify the action, click on the button.

348
00:26:42,030 --> 00:26:47,930
You want to modify the view, click on the view, and the
Xcode Assistant will bring you exactly what you want.

349
00:26:47,930 --> 00:26:51,060
And the Xcode Assistant actually
works great for all kinds of editors.

350
00:26:51,060 --> 00:26:54,210
I'm going to switch back to the
data model I was looking at before.

351
00:26:54,210 --> 00:26:59,460
And now you see that there's going to be the data model on
the left and the corresponding runtime class on the right.

352
00:26:59,460 --> 00:27:04,940
As I pick a different entity, the editor
updates to show me exactly what I need.

353
00:27:04,940 --> 00:27:07,990
And the collaborative editing works
exactly as you'd expect here.

354
00:27:07,990 --> 00:27:15,130
I can go and select, for example, two properties in the list
and just copy them, and I just go right over my source code,

355
00:27:15,130 --> 00:27:20,080
no trick up my sleeve, and I'll just paste
interfaces, and there's the interfaces that we had.

356
00:27:20,080 --> 00:27:23,050
I can even have the Assistant switch
to the implementation file,

357
00:27:23,050 --> 00:27:27,270
and we can now paste the attribute
implementations right there.

358
00:27:27,270 --> 00:27:30,930
So, the editors truly take you to where you need to be.

359
00:27:30,930 --> 00:27:35,070
The Assistant is also very fluid and allows
you to move between content very seamlessly.

360
00:27:35,070 --> 00:27:41,250
Here, I'm looking at the data model and the source code, but
if I decide to shift my attention to this file on the right,

361
00:27:41,250 --> 00:27:45,180
I can simply say Navigate and Promote,
and it's going to move that file--

362
00:27:45,180 --> 00:27:48,020
the left hand editor, and now I
can look at its counterparts.

363
00:27:48,020 --> 00:27:50,230
In this case, the implementation file.

364
00:27:50,230 --> 00:27:53,700
Or I could decide to look at siblings and
move through all of the other entities

365
00:27:53,700 --> 00:27:57,180
from my model here if I wanted to refine their interfaces.

366
00:27:57,180 --> 00:28:02,730
So, as you can see, it's the combination of the
integrated Interface Builder and the Xcode 4 Assistant

367
00:28:02,730 --> 00:28:05,140
that makes editing truly amazing in Xcode 4.

368
00:28:05,140 --> 00:28:06,500
Thank you.

369
00:28:06,500 --> 00:28:12,120
[ Applause ]

370
00:28:12,120 --> 00:28:14,830
>> So, as you can see, Xcode 4 is all new.

371
00:28:14,830 --> 00:28:20,100
The interface has been completely redesigned to
keep you focused on your code and interface files,

372
00:28:20,100 --> 00:28:23,180
and the Assistant really helps you understand your projects,

373
00:28:23,180 --> 00:28:27,410
and just keeping all the different parts
of your projects perfectly in sync.

374
00:28:27,410 --> 00:28:33,310
And with that, let's move to on our feature
number 4, which is the LLVM Compiler 2.0.

375
00:28:34,470 --> 00:28:39,340
I've been talking to you about LLVM for a number of
years now, but in case you're not yet familiar with it,

376
00:28:39,340 --> 00:28:43,900
it's our next generation compiler
technology which is replacing GCC.

377
00:28:46,670 --> 00:28:49,010
LLVM is an open source project.

378
00:28:49,010 --> 00:28:54,010
It's hosted at LLVM.org and has contributors
from all across the industry that is led

379
00:28:54,010 --> 00:28:57,040
by the engineers in Apple's compiler team.

380
00:28:57,040 --> 00:29:00,650
Let me just list a few of the highlights of LLVM.

381
00:29:00,650 --> 00:29:05,040
First of all, it's fast.

382
00:29:05,040 --> 00:29:12,760
The typical Objective-C application on the Mac compiles
more than twice as fast with LLVM than it did with GCC.

383
00:29:12,760 --> 00:29:15,800
So that alone is a great reason to make the switch to LLVM

384
00:29:15,800 --> 00:29:19,340
because it saves you a lot of time
doing a long day of engineering.

385
00:29:20,500 --> 00:29:26,300
But not only is LLVM is very fast, it
also produces better and faster code.

386
00:29:26,300 --> 00:29:32,210
Defined very consistently that LLVM generated
code easily outperforms GCC generated code.

387
00:29:32,210 --> 00:29:34,590
Let me show you a few numbers.

388
00:29:35,840 --> 00:29:41,610
This chart shows how much faster LLVM generated
code runs and compares them to GCC, in this case,

389
00:29:41,610 --> 00:29:45,710
when running a number of benchmarks
from the OpenSSL test suite.

390
00:29:45,710 --> 00:29:49,120
OpenSLL contains numbers where it
performs critical pieces of code.

391
00:29:49,120 --> 00:29:55,910
And what you can see here is that
LLVM runs that code up to 25% faster.

392
00:29:55,910 --> 00:30:00,840
Now, this year, we're also making
LLVM available for the iPhone.

393
00:30:00,840 --> 00:30:06,350
And so, I thought I'd share the same set
of data with you that we found for the iOS.

394
00:30:06,350 --> 00:30:10,070
As you can see here, LLVM produces even better results.

395
00:30:10,070 --> 00:30:15,370
LLVM generated code runs up to 60% faster than GCC code.

396
00:30:15,370 --> 00:30:19,840
And so with a very simple change in your
project just by switching to the new compiler.

397
00:30:19,840 --> 00:30:25,820
You have the potential to gain a lot of performance for
your applications, and I recommend that you give it a try.

398
00:30:28,110 --> 00:30:35,410
Our third area the LLVM, its real value over
GCC is when it comes to diagnostic messages.

399
00:30:35,410 --> 00:30:40,630
LLVM error messages are a lot more precise and
they contain exact range information instead

400
00:30:40,630 --> 00:30:44,710
so that Xcode can pinpoint the exact location of
the piece of code that caused an error or warning.

401
00:30:44,710 --> 00:30:49,650
And we can show it to you, the nice highlight
as you can see here in the screenshot.

402
00:30:49,650 --> 00:31:00,500
But the real big news on the LLVM for this year is that in
addition to Objective-C and C, we're adding support for C++.

403
00:31:00,500 --> 00:31:06,180
[ Applause ]

404
00:31:06,180 --> 00:31:14,590
So LLVM is now a complete replacement
for GCC compiling C, Objective-C and C++.

405
00:31:14,590 --> 00:31:18,170
But LLVM is much more than a static compiler.

406
00:31:18,170 --> 00:31:25,130
And starting with Xcode 4, LLVM is now fully integrated with
the Xcode IDE to provide the source editor and other parts

407
00:31:25,130 --> 00:31:27,560
of Xcode with a complete understanding of your code.

408
00:31:27,560 --> 00:31:34,340
LLVM is now the engine behind things like syntax
coloring, the Xcode assistant, and also code completion.

409
00:31:34,340 --> 00:31:39,340
With LLVM, code completion is now
syntax-- I'm sorry, is now context aware.

410
00:31:39,340 --> 00:31:43,560
So, it allows the IDE to present much more
precisely how it can complete your code.

411
00:31:43,560 --> 00:31:48,860
And that of course works for all
the languages that LLVM supports.

412
00:31:48,860 --> 00:31:56,500
So that means that our support for C++ in the
source editor has just taken it huge leap forward.

413
00:31:56,500 --> 00:32:02,730
[ Applause ]

414
00:32:02,730 --> 00:32:07,980
Now integrating LLVM into Xcode has allowed
us to create another very profound feature.

415
00:32:07,980 --> 00:32:10,350
So feature number 5, Fix-it.

416
00:32:10,350 --> 00:32:15,920
[ Laughter ]

417
00:32:15,920 --> 00:32:20,010
>> All of us take it for granted that when
we enter something in the word processor,

418
00:32:20,010 --> 00:32:24,830
the computer immediately checks our spelling
and alerts us that we are making a mistake.

419
00:32:24,830 --> 00:32:30,160
With Fix-it, you're getting that exact behavior
now in Xcode when you're entering your source code.

420
00:32:30,160 --> 00:32:36,540
Xcode immediately checks your code and alerts
you if you're introducing an error or warning.

421
00:32:36,540 --> 00:32:38,870
And you can do even better than that.

422
00:32:38,870 --> 00:32:43,300
Since now we have such a complete understanding
of your code, it can even suggest fixes for you,

423
00:32:43,300 --> 00:32:45,750
so with just a click of a button,
you can correct your source code.

424
00:32:45,750 --> 00:32:46,290
[ Applause ]

425
00:32:46,290 --> 00:32:57,650
>> Fix-it can correct dozens of common coding mistakes, for
example, misspelled symbol names or mismatched parenthesis,

426
00:32:57,650 --> 00:33:00,280
or simple things like missing semicolons.

427
00:33:02,000 --> 00:33:06,930
And while Fix-it works right while you type,
I also wanted to remind you that last year,

428
00:33:06,930 --> 00:33:12,120
we did another feature that's based on LLVM
technologies, and that's the static analyzer.

429
00:33:12,120 --> 00:33:16,140
The static analyzer goes far beyond
the regular compiler analysis.

430
00:33:16,140 --> 00:33:21,090
It runs a deep check of many of your
code pass and it can find errors

431
00:33:21,090 --> 00:33:24,690
like memory management issues over
hundreds of lines of code.

432
00:33:24,690 --> 00:33:30,290
And when it finds a bug, it shows it to you with
a nice set of arrows that guide you step by step

433
00:33:30,290 --> 00:33:34,850
through your program to show you
how you introduced your bug.

434
00:33:34,850 --> 00:33:40,060
And now to show you our C++ code
completion, Fix-it, and the static analyzer,

435
00:33:40,060 --> 00:33:43,500
I'm going ask Mike Ferris to come
up on stage for our next demo.

436
00:33:43,500 --> 00:33:48,860
[ Applause ]

437
00:33:48,860 --> 00:33:50,430
>> Thank you, Andreas.

438
00:33:51,570 --> 00:33:58,760
I want to show you how great C++
code completion is in Xcode 4.

439
00:33:58,760 --> 00:34:06,180
Xcode 4 lets you jack hammer through
even complex C++ to make sure

440
00:34:06,180 --> 00:34:10,270
that we are always offering you
exactly the right completions.

441
00:34:10,270 --> 00:34:16,600
I'm going to dereference this pointer that I'm grabbing
out of the vector, and at this point Xcode has traversed

442
00:34:16,600 --> 00:34:23,050
through several instantiations of several different
templates using operator overloads and every step

443
00:34:23,050 --> 00:34:28,230
of the way, it has offered me the appropriate completions.

444
00:34:28,230 --> 00:34:35,760
[ Applause ]

445
00:34:35,760 --> 00:34:38,720
Xcode also pays attention to little details.

446
00:34:38,720 --> 00:34:47,820
So as I add to the switch, Xcode knows the
possible completions and it offers them to me.

447
00:34:47,820 --> 00:34:54,850
And as I add a second case, notice that Xcode has
narrowed the list down to offer me only the completions

448
00:34:54,850 --> 00:34:57,070
that aren't already covered in the switch.

449
00:34:57,070 --> 00:34:59,810
[ Applause ]

450
00:34:59,810 --> 00:35:02,520
I really love the little details like that.

451
00:35:03,790 --> 00:35:09,970
Because Xcode's indexing engine is based on
the LLVM compiler, we get amazing accuracy.

452
00:35:09,970 --> 00:35:13,690
And that's not the only editor
feature that's based on this stuff.

453
00:35:13,690 --> 00:35:18,140
This accuracy also applies to stuff like jump to definition.

454
00:35:18,140 --> 00:35:22,260
Here I have two calls to a function called myMin.

455
00:35:22,260 --> 00:35:28,390
If I jump to the definition of the first one, it
goes to the general template function definition.

456
00:35:28,390 --> 00:35:32,170
But watch as I jump to the definition of the second one.

457
00:35:32,170 --> 00:35:35,790
Xcode knows that there is a template
specialization that's being used in that case

458
00:35:35,790 --> 00:35:37,740
and so it will take me to that correctly.

459
00:35:37,740 --> 00:35:37,800
[ Applause ]

460
00:35:37,800 --> 00:35:47,050
Now let's talk about something that's brand new in Xcode 4.

461
00:35:47,050 --> 00:35:48,820
Andreas told you about Fix-it.

462
00:35:48,820 --> 00:35:51,470
I'm going to show it to you.

463
00:35:51,470 --> 00:36:00,990
I'm a terrible typist but Xcode knows when I
get something wrong and it alerts me to that.

464
00:36:00,990 --> 00:36:10,490
I can click on the error icon to find out exactly what the
problem is and I can even have Xcode just correct it for me.

465
00:36:10,490 --> 00:36:14,040
[ Applause ]

466
00:36:14,040 --> 00:36:16,340
Misspellings are just the beginning though.

467
00:36:16,340 --> 00:36:19,890
Here's another common C pitfall.

468
00:36:19,890 --> 00:36:26,200
We're seeing is the code completion again here
and as I type the rest of this conditional,

469
00:36:26,200 --> 00:36:31,610
again Xcode thinks that there may be something a
little fishy going on and so I'll click on the icon.

470
00:36:31,610 --> 00:36:36,560
This time Xcode is giving me multiple choices because
I might have meant to make a comparison instead

471
00:36:36,560 --> 00:36:42,140
of an assignment here or maybe I really did mean to do
the assignment but I should just be more clear about it.

472
00:36:42,140 --> 00:36:47,410
In this case I meant to do the comparison
so again I'll have Xcode fix that for me.

473
00:36:47,410 --> 00:36:50,950
Finally, let's look at a C++ example.

474
00:36:50,950 --> 00:37:00,900
Here I'm adding a copy constructor to this class and
as I finish, once again Xcode has flagged the problem.

475
00:37:00,900 --> 00:37:05,980
Now this time I actually know exactly what's going on
here and so I'm just going to use a keyboard command

476
00:37:05,980 --> 00:37:12,490
which will fix the last mistake that I
made while letting me continue to work.

477
00:37:12,490 --> 00:37:18,870
[ Applause ]

478
00:37:18,870 --> 00:37:23,000
Fix-it finds areas immediately and helps you to fix them.

479
00:37:23,000 --> 00:37:27,490
Static analysis on the other hand can
help you to find bugs in your application.

480
00:37:27,490 --> 00:37:34,960
I'm going to analyze this project and see if they
can come up with any errors and it switched me

481
00:37:34,960 --> 00:37:38,980
to the issue navigator to show me the problem that it found.

482
00:37:38,980 --> 00:37:42,900
I can click on that to go to the source
of the problem and it's telling me

483
00:37:42,900 --> 00:37:47,240
that I am using a reference counted
object after it's released.

484
00:37:47,240 --> 00:37:54,990
This is a subtle bug in this case but I can explore
by clicking on the message bubble and it will take me

485
00:37:54,990 --> 00:37:58,050
into this and I can walk through it step by step.

486
00:37:58,050 --> 00:38:05,930
The arrows show me the path that the code is
taking and each step it explains what's happening.

487
00:38:05,930 --> 00:38:11,880
So in the first step I am returning an object that has
a refcount, that sounds right, and then I'm releasing it

488
00:38:11,880 --> 00:38:15,410
and then I go back up to the top of this loop.

489
00:38:15,410 --> 00:38:20,440
Now step 4 is where the problem occurs
and if I look at the arrows I can see

490
00:38:20,440 --> 00:38:24,990
that I never go inside the first
conditional where I'm allocating the string

491
00:38:24,990 --> 00:38:27,380
and yet somehow I'm releasing this thing.

492
00:38:27,380 --> 00:38:28,230
Well, what am I releasing?

493
00:38:28,230 --> 00:38:31,310
It turns out that what I'm releasing is
the string from the first pass of the loop

494
00:38:31,310 --> 00:38:37,780
which I already released the first time through the loop,
and so I could fix that if I just cleaned up after myself

495
00:38:37,780 --> 00:38:45,890
after releasing the string and made sure that it wasn't
around for me to talk to again after I'm done with it.

496
00:38:45,890 --> 00:38:47,780
I think I fixed this bug.

497
00:38:47,780 --> 00:38:50,480
Let's see if Xcode agrees.

498
00:38:50,480 --> 00:38:56,080
Yeah. So, that's one less bug waiting
for my customers to find.

499
00:38:56,080 --> 00:38:57,390
[Applause] Andreas?

500
00:39:02,540 --> 00:39:07,020
>> So as you can see LLVM now aids you
throughout the entire development process.

501
00:39:07,020 --> 00:39:09,170
It helps you write code with Code Completion.

502
00:39:09,170 --> 00:39:11,760
It presents Fix-it if you're making a mistake.

503
00:39:11,760 --> 00:39:16,710
It compiles your code and it even runs a
static analysis to find deep coding errors,

504
00:39:16,710 --> 00:39:20,550
deep logic errors that are very hard
to find without the static analyzer.

505
00:39:20,550 --> 00:39:26,110
So, let's move on to our feature
number 6, the Version Editor.

506
00:39:26,110 --> 00:39:31,370
One of the most common requests from our
community is better support for source control.

507
00:39:31,370 --> 00:39:36,730
And the most widely used source control system
out there in our community is Subversion.

508
00:39:36,730 --> 00:39:40,650
So, Xcode 4 has a great improved support for Subversion.

509
00:39:40,650 --> 00:39:44,930
But over the last several years we've
also seen developers very quickly moving

510
00:39:44,930 --> 00:39:47,180
to distributed source control management systems.

511
00:39:47,180 --> 00:39:49,930
And the most popular one out there is Git.

512
00:39:49,930 --> 00:39:50,070
[ Applause ]

513
00:39:50,070 --> 00:40:02,760
So in Xcode 4, you're adding support for Git
alongside with our support for Subversion.

514
00:40:02,760 --> 00:40:07,020
And all the operations of this support for
Subversion, biggest support equally weighed for Git.

515
00:40:07,020 --> 00:40:11,900
It ranges from the normal checkout, commit, and
update workflows to somewhat advanced operations

516
00:40:11,900 --> 00:40:17,480
that they're introducing the Xcode 4,
like support for branching and merging.

517
00:40:17,480 --> 00:40:21,140
But Xcode 4 goes far beyond the standard SCM operations.

518
00:40:21,140 --> 00:40:25,190
We wanted to make it really easy for you to
understand how a code has changed over time,

519
00:40:25,190 --> 00:40:27,780
and that's why we're introducing the Version Editor.

520
00:40:27,780 --> 00:40:33,400
It allows you to view multiple iterations of
your files side by side in comparison view.

521
00:40:33,400 --> 00:40:39,490
And you can even go back in time that the head of a
simple timeline that shows up in the middle of the editor.

522
00:40:39,490 --> 00:40:47,560
[ Applause ]

523
00:40:47,560 --> 00:40:51,360
So simply by dragging a slide in this
timeline, you can see how it will changed

524
00:40:51,360 --> 00:40:54,270
and you can go back more and more iterations in time.

525
00:40:54,270 --> 00:40:57,880
The easiest way to explain it a bit
better to you is to show you another demo.

526
00:40:57,880 --> 00:41:01,490
So I'm going to ask Max Drukman to come up
on stage to show you the Version Editor.

527
00:41:01,490 --> 00:41:06,160
[ Applause ]

528
00:41:06,160 --> 00:41:08,520
>> Thank you, Andreas.

529
00:41:08,520 --> 00:41:09,450
Good afternoon everybody.

530
00:41:09,450 --> 00:41:11,590
Let's demo.

531
00:41:13,540 --> 00:41:19,830
Alright. So here we have the two projects
that we're demoing with in this session today.

532
00:41:19,830 --> 00:41:24,200
One checked out of Subversion and one from Git.

533
00:41:24,200 --> 00:41:30,810
I have some local changes here which you can
tell by the M annotations they're modified files.

534
00:41:30,810 --> 00:41:36,330
Now, I have modified files sort of
sprinkled throughout these two projects,

535
00:41:36,330 --> 00:41:40,220
but I want to concentrate on just
the ones that are modified.

536
00:41:40,220 --> 00:41:44,890
I can filter in the navigator to see just those.

537
00:41:44,890 --> 00:41:49,930
So at the bottom of the navigator is a filter
bar which allows me to click on a button

538
00:41:49,930 --> 00:41:53,820
to just see the files with source control status.

539
00:41:53,820 --> 00:41:58,720
So it's that quick to narrow down and
see exactly what I want to work on.

540
00:41:58,720 --> 00:42:00,670
So let's select one.

541
00:42:00,670 --> 00:42:02,760
And now I'm going to go to the Version Editor.

542
00:42:02,760 --> 00:42:11,090
Now, the Version Editor shows me a comparison view, so on
the left is my file as it exists on disk on my machine,

543
00:42:11,090 --> 00:42:16,160
and on the right is the latest version from the
repository, whether, it be Git or Subversion.

544
00:42:16,160 --> 00:42:22,460
Now I can look at other source
control aspects of my file as well.

545
00:42:22,460 --> 00:42:32,870
For instance the log, which is the source control life of my
file, or blame, which shows me line by line who the authors

546
00:42:32,870 --> 00:42:37,670
of this file are just in case I
need to know that information.

547
00:42:37,670 --> 00:42:41,220
[ Laughter ]

548
00:42:41,220 --> 00:42:48,310
I can go through and look at this aspect of each
file, of course, and if I see a revision that has

549
00:42:48,310 --> 00:42:56,260
in particular interest to me, I can click on the arrow
button to go directly to a comparison against that version.

550
00:42:56,260 --> 00:43:02,320
Now, at the bottom of the Version
Editor is another jump bar.

551
00:43:02,320 --> 00:43:07,320
Instead of showing the structure of my
projects, it's showing me the structure

552
00:43:07,320 --> 00:43:14,970
of the SCM system, so I can see branches and revisions.

553
00:43:14,970 --> 00:43:19,500
Again, I can get right to exactly what I'm after.

554
00:43:19,500 --> 00:43:25,570
And as Andreas showed you, there's a
timeline, which allows me to scrub through

555
00:43:25,570 --> 00:43:31,340
and see all the revisions, along
with it the commit information.

556
00:43:31,340 --> 00:43:41,470
I can slide the version on the left or even slide it on
the right so I can compare any two versions of my file,

557
00:43:41,470 --> 00:43:45,100
not just now to then but then to then as well.

558
00:43:45,100 --> 00:43:55,520
And of course, because it's an
editor, well, it's a live editor.

559
00:43:55,520 --> 00:44:04,960
I can edit and make new differences and
see them show up as I'm making my edits.

560
00:44:04,960 --> 00:44:05,070
Okay.

561
00:44:05,070 --> 00:44:05,220
[ Laughter ]

562
00:44:05,220 --> 00:44:05,370
[ Applause ]

563
00:44:05,370 --> 00:44:11,010
>> Alright, well, how about this one?

564
00:44:11,010 --> 00:44:11,460
[ Laughter ]

565
00:44:11,460 --> 00:44:21,900
>> I can reach back in time and grab some code that I never
should have deleted in the first place and bring it forward

566
00:44:21,900 --> 00:44:29,080
and edit my current file with it, so I can go back and
correct any mistakes that might have come into play.

567
00:44:29,080 --> 00:44:34,980
[ Applause ]

568
00:44:34,980 --> 00:44:35,940
>> That's the Version Editor.

569
00:44:35,940 --> 00:44:38,300
I think you're going to love it.

570
00:44:38,300 --> 00:44:43,210
Now, there's one more edit I need
to make before I'm through.

571
00:44:43,210 --> 00:44:47,530
It has been pointed out to me that some
deprecated API made its way into both

572
00:44:47,530 --> 00:44:51,380
of these projects, and let's not dwell on who put it there.

573
00:44:51,380 --> 00:44:54,870
Let's just say that it's up to me to fix the mess I made.

574
00:44:54,870 --> 00:45:05,240
Now, what I want to do now is use the search
navigator to find where the problems are.

575
00:45:05,240 --> 00:45:14,690
I'm going to switch the search navigator and I'm
going to look for the API, which is NSString, string,

576
00:45:14,690 --> 00:45:22,230
we'll see string, and you'll see that the
navigator is presenting me with some search options.

577
00:45:22,230 --> 00:45:26,250
So there are different strategies
that I can use to search with.

578
00:45:26,250 --> 00:45:30,950
I'll go ahead and accept the default one.

579
00:45:30,950 --> 00:45:39,290
Now, I have a few changes here, and so let me go
through and not just find them but replace them.

580
00:45:39,290 --> 00:45:44,980
So, I'm going to go for something more 21st century.

581
00:45:44,980 --> 00:45:57,560
Let's go NSString stringWithUTF8String, because
sometimes it's not cool to be old school.

582
00:45:57,560 --> 00:46:00,940
So now I've got my replace loaded up.

583
00:46:00,940 --> 00:46:09,200
I can select a single occurrence and click Replace and
replace just that occurrence, or I can select the whole file

584
00:46:09,200 --> 00:46:13,710
and click Replace and replace all
the occurrences in that file.

585
00:46:13,710 --> 00:46:18,560
Since I'm done with this file, I can click
Delete and remove it from the navigator

586
00:46:18,560 --> 00:46:21,190
so that I can concentrate on what I have left to do.

587
00:46:21,190 --> 00:46:24,620
This is great for working incrementally.

588
00:46:24,620 --> 00:46:30,240
And of course, I can click Replace
All to replace all of the occurrences.

589
00:46:30,240 --> 00:46:35,800
Now, since this is a navigator,
I can use it to navigate, right?

590
00:46:35,800 --> 00:46:37,310
Pretty simple.

591
00:46:37,310 --> 00:46:42,710
But think of it as a navigator that you
get to make for yourself using search

592
00:46:42,710 --> 00:46:47,110
and it gets really cool when you do that.

593
00:46:47,110 --> 00:46:51,360
So now I've made edits to some files.

594
00:46:51,360 --> 00:46:55,400
I can filter the navigator on that as well.

595
00:46:55,400 --> 00:47:01,630
If I turn off the source control filter
and turn on the unsaved files filter,

596
00:47:01,630 --> 00:47:04,580
I can see just the files that needs saving.

597
00:47:04,580 --> 00:47:12,040
And so I can use that to navigate around as well, but I
think I did a pretty good job here, if I do say so myself.

598
00:47:12,040 --> 00:47:14,970
So, I'm going to go ahead and save these.

599
00:47:14,970 --> 00:47:16,340
I'll do Save All.

600
00:47:16,340 --> 00:47:23,020
And now the navigator clears out because nothing meets
the filter criteria, all my files are successfully saved.

601
00:47:23,020 --> 00:47:25,960
But they're all still there, don't worry.

602
00:47:25,960 --> 00:47:31,590
Now, I'm done with my edits, so it's time to commit.

603
00:47:31,590 --> 00:47:35,870
Let's go to Source Control, Commit.

604
00:47:35,870 --> 00:47:42,030
And now, here is where I can see, again,
all of the files that are modified.

605
00:47:42,030 --> 00:47:49,200
On the left I have a navigator that shows me
those files, and I can look at those files

606
00:47:49,200 --> 00:47:52,270
in the project structure, as you see here.

607
00:47:52,270 --> 00:48:00,820
In the on-disk structure as they show up in the finder, or
as a flat list if you don't care about structure at all.

608
00:48:00,820 --> 00:48:05,330
And on the right is a comparison view.

609
00:48:05,330 --> 00:48:12,240
Now, just like with the Version Editor, this is
live, so I can actually delete that bit of garbage

610
00:48:12,240 --> 00:48:16,330
that you thought I was going to check in.

611
00:48:16,330 --> 00:48:18,370
[ Laughter ]

612
00:48:18,370 --> 00:48:20,410
[ Applause ]

613
00:48:20,410 --> 00:48:25,000
Now, not only that, but I now have
a new unsaved change to that file.

614
00:48:25,000 --> 00:48:30,030
Because I just deleted that bit of
garbage, I can just hit Save right here.

615
00:48:30,030 --> 00:48:35,590
I don't have to back out, get out of my
workflow in order to do last minute changes.

616
00:48:35,590 --> 00:48:38,330
So now, all I need is a commit message.

617
00:48:38,330 --> 00:48:47,090
Commit to get and subversion at the same time!

618
00:48:47,090 --> 00:48:55,040
And now, when I click the Commit button,
Xcode will save my changes to both Git

619
00:48:55,040 --> 00:48:58,770
and Subversion at the same time, which is very cool.

620
00:48:58,770 --> 00:49:00,460
Back to you, Andreas.

621
00:49:00,460 --> 00:49:02,950
[ Applause ]

622
00:49:02,950 --> 00:49:08,200
>> So all the features Max showed you are
going to support it for Git and Subversion.

623
00:49:08,200 --> 00:49:12,750
And I could tell you from our own experience that the
Version Editor is a great help into trying to track

624
00:49:12,750 --> 00:49:16,670
down regressions that happened
several iterations ago in your code.

625
00:49:17,870 --> 00:49:22,470
Feature number 7 is a brand new Debugger.

626
00:49:22,470 --> 00:49:29,120
[ Applause ]

627
00:49:29,120 --> 00:49:32,950
This is a screenshot of the new
debugging experience in Xcode 4.

628
00:49:32,950 --> 00:49:37,180
There are 2 navigators that are dedicated to debugging,
and there's also an additional area that comes

629
00:49:37,180 --> 00:49:42,090
up from the bottom of the window to give
you access to critical debug information.

630
00:49:43,220 --> 00:49:49,600
Now integrated in Xcode 4 in a very fundamental
way is the ability to debug multiple threads.

631
00:49:49,600 --> 00:49:54,020
So Xcode will show you the stack
traces of all threads in the navigator.

632
00:49:54,020 --> 00:50:03,370
And then even though it's about dispatch queues, so it
makes it very easy for you to debug GCD applications.

633
00:50:03,370 --> 00:50:07,050
[ Applause ]

634
00:50:07,050 --> 00:50:10,060
Now, with more threads come many, many more stack frames.

635
00:50:10,060 --> 00:50:17,580
So we built a great new way into Xcode 4 to compress
stack traces by simply hiding uninteresting symbols.

636
00:50:17,580 --> 00:50:20,540
For example, you can typically assume
that the bug you are tracking is not

637
00:50:20,540 --> 00:50:23,550
in the system log which you are running against.

638
00:50:23,550 --> 00:50:31,040
So you can simply-- [Laughter] So with a very simple gesture in
Xcode 4, you can hide those symbols and focus only

639
00:50:31,040 --> 00:50:35,630
on your own code without losing any relevant information.

640
00:50:35,630 --> 00:50:42,580
The debug area at the bottom of the window
gives you control over your program execution.

641
00:50:42,580 --> 00:50:50,260
You can now step by line, by instruction and also by thread,
and all of that with a much more precise variable display.

642
00:50:50,260 --> 00:50:56,290
The new Xcode 4 Debugger is context-aware so it even
has an automatic filter to only show you the variables

643
00:50:56,290 --> 00:51:01,830
that are currently in the scope of your
debug state and all of that works on top

644
00:51:01,830 --> 00:51:05,350
of our low-level debug engine which as you know is GDB.

645
00:51:05,350 --> 00:51:10,540
Now, a few moments ago, I used the term brand
new debugger and I'm very pleased to tell you

646
00:51:10,540 --> 00:51:13,370
that it didn't just mean a new user interface.

647
00:51:13,370 --> 00:51:20,310
Today, we're introducing a new low-level
debugger which we're naming LLDB.

648
00:51:20,310 --> 00:51:20,370
[ Applause ]

649
00:51:20,370 --> 00:51:22,580
LLDB has a lot in common with LLVM.

650
00:51:22,580 --> 00:51:27,390
Among other things, it's designed
for performance right from the start.

651
00:51:27,390 --> 00:51:33,650
For example, LLDB can load symbols
up to three times faster than GDB.

652
00:51:33,650 --> 00:51:35,930
[ Applause ]

653
00:51:35,930 --> 00:51:41,400
And this chart shows you the amount of memory used by
the debugger itself and we're stopping at breakpoint

654
00:51:41,400 --> 00:51:43,250
for very, very large corporate application.

655
00:51:43,250 --> 00:51:49,710
As you can see here, LLDB is almost 3 times as memory
efficient as GDB and what these numbers mean is

656
00:51:49,710 --> 00:51:56,260
that LLDB will give you much faster debugger
startup time and much more stepping speed.

657
00:51:56,260 --> 00:52:03,450
Now, I'm also very pleased to tell you that later today,
we are going to hand over the code of LLDB to LLVM.org.

658
00:52:03,450 --> 00:52:09,450
So we're going to contribute our debugger to
the LLVM community alongside with our compiler.

659
00:52:09,450 --> 00:52:17,400
[ Applause ]

660
00:52:17,400 --> 00:52:26,070
And to show you our new debugging experience, I'm going
to ask Dave Payne to come up on stage for our next demo.

661
00:52:26,070 --> 00:52:31,020
>> So I'd like to show you some of the cool new features
that we have in the Xcode 4 debugging environment

662
00:52:31,020 --> 00:52:35,180
and I'm very proud to tell you that throughout
this entire demo that I'm going to do,

663
00:52:35,180 --> 00:52:41,250
I'll be using our new debugging engine
LLDB that we've been working very hard on.

664
00:52:41,250 --> 00:52:43,250
So, let's get started.

665
00:52:46,320 --> 00:52:53,120
So, I'm going to launch the picture of your
application again and note at this point

666
00:52:53,120 --> 00:52:56,950
that we are showing the project
navigator in the navigator area.

667
00:52:56,950 --> 00:53:01,790
Let me go ahead and launch, come up in the simulator.

668
00:53:01,790 --> 00:53:07,390
Now, I've got a breakpoint set at
handling the tap action in my application.

669
00:53:07,390 --> 00:53:12,540
Watch what happens in the navigator
area when I tap on a photo.

670
00:53:12,540 --> 00:53:21,300
So we hit my breakpoint and the debug navigator
automatically switches over just showing me all the threads

671
00:53:21,300 --> 00:53:25,060
in my application and the backtrace
of the currently active thread.

672
00:53:25,060 --> 00:53:32,430
Now, I can twiddle open any of the other threads here
and we see that many of them are actually threads

673
00:53:32,430 --> 00:53:39,980
that the system has added for us for things
like handling GCD and idle work queue threads.

674
00:53:39,980 --> 00:53:48,980
So, on both Mac OS X and in iOS 4, as GCD comes into
it, there can be a lot more threads in your application.

675
00:53:48,980 --> 00:53:55,090
But a lot of times I'm not interested in all that
detail so by clicking on the Hide Thread button

676
00:53:55,090 --> 00:54:01,410
down at the bottom here, I can focus onto
just those threads that are interesting to me,

677
00:54:01,410 --> 00:54:08,540
so those that have my debug symbols in
them or any threads that I've crashed in.

678
00:54:08,540 --> 00:54:14,540
But, still, there's a lot of deep
layering in Mac OS X and iPhone software,

679
00:54:14,540 --> 00:54:19,260
so backtraces of a single thread can still be very complex.

680
00:54:19,260 --> 00:54:24,740
So, scrub through with this stack compression slider.

681
00:54:24,740 --> 00:54:28,290
Note again what happens in the debug navigator here.

682
00:54:28,290 --> 00:54:37,530
Hide all the symbols within a single library or even all
those symbols across libraries or go even deeper than that.

683
00:54:37,530 --> 00:54:44,230
So I'm going to the default level here which is
to show the symbols that I have source code for.

684
00:54:44,230 --> 00:54:50,760
So my debug symbols as well as those system
symbols that I'm directly interacting with.

685
00:54:50,760 --> 00:54:55,450
So focus on just the things that I care about here.

686
00:54:55,450 --> 00:55:00,000
So let's move down to the debug
area down at the bottom here.

687
00:55:00,000 --> 00:55:06,250
In addition to the standard debugging controls:
Pause, Continue, Step, we have a Jump bar here as well

688
00:55:06,250 --> 00:55:12,730
that lets me move between the individual stack
frames or between all the threads and symbols there.

689
00:55:12,730 --> 00:55:15,960
We have a Variables View.

690
00:55:15,960 --> 00:55:23,730
We have a console area on the right side where we're
showing a log message that I had on the breakpoint

691
00:55:23,730 --> 00:55:32,010
or I can directly interact with the low-level
debugger to do more detailed things that I'd like.

692
00:55:32,010 --> 00:55:35,670
But let's focus on the Variables View.

693
00:55:35,670 --> 00:55:40,130
So, we note that we have a long
list of variables that are relevant

694
00:55:40,130 --> 00:55:44,170
in this function, but that's a pretty complicated list.

695
00:55:44,170 --> 00:55:50,200
What I'd really like to do is switch over to the auto
variables mode so that I see only those variables

696
00:55:50,200 --> 00:55:54,630
that are relevant to the lines of source
code that I'm currently executing.

697
00:55:54,630 --> 00:55:56,400
So, as I step through the code.

698
00:55:56,400 --> 00:56:04,050
It automatically updates what variables are being
shown based on what code we're currently at.

699
00:56:04,050 --> 00:56:09,530
So, this is taking advantage of the
power of the Xcode indexer to do this.

700
00:56:09,530 --> 00:56:16,890
Now, let me go over to the breakpoint navigator
and I have another breakpoint I'm going to enable.

701
00:56:16,890 --> 00:56:22,300
So, what this does is such a breakpoint
on drawing each frame of my graphics.

702
00:56:22,300 --> 00:56:28,350
So let me go ahead and continue through
my app and continue a couple times.

703
00:56:28,350 --> 00:56:30,880
Aren't those graphics cool?

704
00:56:30,880 --> 00:56:34,630
Well, it would be cool if I could actually see them.

705
00:56:34,630 --> 00:56:41,280
So, if I go to the Window Behavior
menu, I can bring my target application

706
00:56:41,280 --> 00:56:47,260
to the front while I'm still indexing [applause]
or still working with Xcode in the background.

707
00:56:49,610 --> 00:56:57,300
So now, as I step through, we can actually see
the graphics changing on the screen step by step.

708
00:56:57,300 --> 00:56:58,820
So, this is great.

709
00:56:58,820 --> 00:57:06,030
Lets you see what you're doing in your target application
while you're also interacting with the full screen Xcode.

710
00:57:06,030 --> 00:57:14,490
We've packed so many features in here that
really likes having full-sized windows.

711
00:57:14,490 --> 00:57:21,350
So, let's move to a somewhat more complicated example.

712
00:57:21,350 --> 00:57:26,010
We have another application that scales graphics for us,

713
00:57:26,010 --> 00:57:30,970
so we have a number of images being
shown once I start showing them.

714
00:57:30,970 --> 00:57:32,770
Let's process the images.

715
00:57:32,770 --> 00:57:35,090
Shows a number of images and scales them.

716
00:57:35,090 --> 00:57:39,020
Now, I happen to know that this application uses GCD.

717
00:57:39,020 --> 00:57:45,590
So, I have another breakpoint that I can
enable that is on my scale image routine.

718
00:57:45,590 --> 00:57:57,000
So, let's go ahead and process the images
again and we hit the breakpoint, great.

719
00:57:57,000 --> 00:58:05,260
So, let's continue a couple of times and
now, let's take a look at some things here.

720
00:58:05,260 --> 00:58:15,170
So, we have over on the PC annotation,
we see a little badge here.

721
00:58:15,170 --> 00:58:20,840
Thread 7, hit a breakpoint but we see a 3 that
indicates that on this multiprocessor system,

722
00:58:20,840 --> 00:58:26,680
we've actually simultaneously hit three
breakpoints in a single line of code.

723
00:58:26,680 --> 00:58:32,660
So, Xcode is coming right out and showing me this.

724
00:58:32,660 --> 00:58:38,620
If I move back to take a look at the Debug navigator
again, we again see that we're seeing all the threads

725
00:58:38,620 --> 00:58:44,420
that are relevant to me at this point but now, it's
more interesting with my multithreaded application

726
00:58:44,420 --> 00:58:50,770
but because this is using GCD, I can
switch the sort order to be by queue.

727
00:58:50,770 --> 00:58:53,520
So now, all of those threads that are associated

728
00:58:53,520 --> 00:58:59,410
with the mipmap queue are sorted
together so I can concentrate on those.

729
00:58:59,410 --> 00:59:04,330
So, I can see that I've got several threads in that area.

730
00:59:04,330 --> 00:59:11,030
So, one of the other things about debugging
through multithreaded code, typically,

731
00:59:11,030 --> 00:59:19,170
when you do a step over in multithreaded code, actually
any code, the Debugger lets all the threads continue.

732
00:59:19,170 --> 00:59:23,880
It's implicitly set a breakpoint on the next
line of code and it's often kind of confusing

733
00:59:23,880 --> 00:59:30,880
when you get thrown completely out of context because it
hits another breakpoint in a completely different thread

734
00:59:30,880 --> 00:59:37,750
but we've created a solution for that which is that I
can hold down the Control Shift keys as I hit the Step

735
00:59:37,750 --> 00:59:42,820
Over button and I'll be stepping through
just a single thread at one time.

736
00:59:42,820 --> 00:59:44,450
So, that lets me focus--

737
00:59:44,450 --> 00:59:50,140
[ Applause ]

738
00:59:50,140 --> 00:59:54,850
Let's me focus on just what I care
about at that particular point in time.

739
00:59:54,850 --> 00:59:58,450
Okay, that's the debugging experience all working with LLDB.

740
00:59:58,450 --> 00:59:59,450
Thanks, Andreas.

741
00:59:59,450 --> 01:00:06,450
[ Applause ]

742
01:00:06,450 --> 01:00:07,180
>> Alright.

743
01:00:07,180 --> 01:00:10,050
So, that's some cool stuff in our new debugging experience.

744
01:00:10,050 --> 01:00:14,050
And of course after debugging, you want to tune
the applications and that brings me to our eighth

745
01:00:14,050 --> 01:00:18,720
and final feature of today which
is the new version of Instruments.

746
01:00:18,720 --> 01:00:21,260
Instruments is a partner application to Xcode.

747
01:00:21,260 --> 01:00:24,600
It's focused on performance analysis and profiling.

748
01:00:24,600 --> 01:00:30,170
The next version of Instruments is going to adopt the number
of the features you've already seen in the Xcode 4 IDE.

749
01:00:30,170 --> 01:00:34,020
For example, it's going to use the Jump bar
to quickly move around a user interface,

750
01:00:34,020 --> 01:00:37,520
that's going to use stack compression
in looking at code trees.

751
01:00:37,520 --> 01:00:41,040
But we're also adding a number of
new-based Instruments to your applications

752
01:00:41,040 --> 01:00:44,470
so that you can learn even more about them.

753
01:00:44,470 --> 01:00:49,720
First of all, we're going to add a new, a
brand new instrument focused on OpenGL ES.

754
01:00:49,720 --> 01:00:55,290
It's very good at making very precise
recommendations for how to tune your OpenGL code.

755
01:00:55,290 --> 01:00:59,540
Second, we are extending our Memory Allocations instrument.

756
01:00:59,540 --> 01:01:04,910
It has always been very good at finding memory leaks
but in the next version, you're also going to be able

757
01:01:04,910 --> 01:01:08,630
to find unattended memory growth
that is strictly speaking on a leak

758
01:01:08,630 --> 01:01:14,320
but still represents unattended memory growth
for example, in filling up large caches.

759
01:01:14,320 --> 01:01:17,400
Third, the Time Profiler instrument
that so far has only been available

760
01:01:17,400 --> 01:01:20,830
for the Mac is now also available for the iPhone.

761
01:01:20,830 --> 01:01:24,750
Time Profiler is the best way for you to
collect time samples of your applications.

762
01:01:24,750 --> 01:01:29,250
It has very, very low overhead and
gets you very precise measurements.

763
01:01:29,250 --> 01:01:34,400
And fourth, we're adding support for
full system trace into Instruments.

764
01:01:34,400 --> 01:01:38,590
That way, you can not just look at one single
application but learn about your entire system

765
01:01:38,590 --> 01:01:42,890
and see how applications interact with each other
and with the kernel of the OS you are running on.

766
01:01:42,890 --> 01:01:45,560
And to show you these new features in Instruments,

767
01:01:45,560 --> 01:01:49,290
I'm going to ask Steve Lewallen to
come up for our last demo of the day.

768
01:01:49,290 --> 01:01:51,630
[ Applause ]

769
01:01:51,630 --> 01:01:56,140
>> Good afternoon.

770
01:01:56,140 --> 01:02:02,050
So, as Andreas mentioned, Instruments has a new feature
called Heap Shot and Heap Shot allows you to look

771
01:02:02,050 --> 01:02:05,190
for abandoned memory and let me show you what I mean.

772
01:02:05,190 --> 01:02:12,480
I'm going to go to my demo machine here and in my Xcode 4
workspace, I have the picture viewer app you've been seeing.

773
01:02:12,480 --> 01:02:21,660
I'm going to launch that from Xcode 4 while simultaneously
having Instruments analyze it to demonstrate Heap Shot.

774
01:02:21,660 --> 01:02:27,790
Now, while this is setting up and Instruments is
gathering some data on our picture application,

775
01:02:27,790 --> 01:02:32,380
let me explain what abandoned memory
is because this isn't leaked memory.

776
01:02:32,380 --> 01:02:37,590
You still have a reference to it but you may not
need it anymore and as the chart that's developing

777
01:02:37,590 --> 01:02:41,690
in the screen suggests, it may be building up overtime.

778
01:02:41,690 --> 01:02:43,750
So, we have enough data here.

779
01:02:43,750 --> 01:02:50,920
Let me stop this trace and let's use Heap
Shot to find out why it's growing like that.

780
01:02:50,920 --> 01:02:55,630
Well to use Heap Shot, the first thing I need to
do is establish a baseline of where my heap is

781
01:02:55,630 --> 01:02:58,580
because I want to compare it later to other Heap Shots.

782
01:02:58,580 --> 01:03:00,670
So, I move my inspection head and mark the heap there.

783
01:03:00,670 --> 01:03:02,500
We've got a baseline.

784
01:03:02,500 --> 01:03:05,540
Now, I'll go to the next place where heap has grown some.

785
01:03:05,540 --> 01:03:13,420
My memory growth has occurred at a steady state and I'll
take another Heap Shot and then one more for good measure.

786
01:03:13,420 --> 01:03:15,480
Alright, what do we have here?

787
01:03:15,480 --> 01:03:23,580
Well, our Heap Shots represent about a meg of
heap growth each and if I twist one of these open,

788
01:03:23,580 --> 01:03:28,850
they contain all of the data that was
allocated since the previous Heap Shot,

789
01:03:28,850 --> 01:03:31,430
in this case, when Heap Shot 1 was taken.

790
01:03:31,430 --> 01:03:34,120
That's still alive when I quit my app.

791
01:03:34,120 --> 01:03:36,720
So, I allocated and just stayed around until the app quit.

792
01:03:36,720 --> 01:03:42,660
We look at the previous Heap Shot, we
can see about the same kind of data.

793
01:03:42,660 --> 01:03:45,660
And in each of these seems like
it has a lot to do with images.

794
01:03:45,660 --> 01:03:47,790
This is an image processing app.

795
01:03:47,790 --> 01:03:50,590
So, let's see what it can tell
me about how I'm using CGImage.

796
01:03:50,590 --> 01:03:57,460
I'll focus in on that and I'll open the extended
detail view up and thanks to stack compression,

797
01:03:57,460 --> 01:04:00,340
a pretty long backtrace has compressed just my own code.

798
01:04:00,340 --> 01:04:02,430
I mean I have four frames in my
own code right in front of me.

799
01:04:02,430 --> 01:04:03,700
It's great.

800
01:04:03,700 --> 01:04:09,510
So, I see that I come in to draw view and it goes
through a rendering step and asks for a texture

801
01:04:09,510 --> 01:04:12,810
and maybe goes out and gets it from the file.

802
01:04:12,810 --> 01:04:15,740
Let me double click on Texture For Index.

803
01:04:15,740 --> 01:04:20,710
Well, this has a texture cache in it.

804
01:04:20,710 --> 01:04:21,380
I remember this.

805
01:04:21,380 --> 01:04:27,790
I put this in here so that this API would return
images faster but I think I suffer from a case

806
01:04:27,790 --> 01:04:34,080
of premature optimization here because I forgot
about the memory growth that this would incur.

807
01:04:34,080 --> 01:04:39,950
So, what I should really do is go back, maybe at a heuristic
or think about how I'm caching this to avoid the problem

808
01:04:39,950 --> 01:04:43,350
that Heap Shot and Instruments is showing me quite clearly.

809
01:04:43,350 --> 01:04:47,830
So, that's Heap Shot and it's very
useful, very simple to use though.

810
01:04:47,830 --> 01:04:53,270
I recommend you take advantage of it
for your Mac and iOS 4 development.

811
01:04:53,270 --> 01:05:00,720
So Andreas also mentioned that we have a new
instrument in Xcode 4 called the OpenGL ES Analyzer.

812
01:05:00,720 --> 01:05:04,380
And the picture of your app just
happens to be an OpenGL app.

813
01:05:04,380 --> 01:05:09,720
So, let's see what that instrument
can tell us about our app.

814
01:05:11,660 --> 01:05:20,110
As you might expect, it can give us basic data of all
sorts, all the raw numbers our number of geo calls,

815
01:05:20,110 --> 01:05:25,060
the number of redundant state changes, a
number of triangles rendered, et cetera.

816
01:05:25,060 --> 01:05:30,040
But this instrument can go further.

817
01:05:30,040 --> 01:05:34,390
It can actually recommend to me how I can improve my app.

818
01:05:34,390 --> 01:05:35,880
Let me show you that.

819
01:05:35,880 --> 01:05:41,430
So I click on one of these and I'll see a recommendation.

820
01:05:41,430 --> 01:05:46,670
In this case, what it's telling me is that, you
know, by providing the app with very large images

821
01:05:46,670 --> 01:05:52,540
and making it scale them down to size, that's using a
lot of resources, it'd be better to provide mipmaps,

822
01:05:52,540 --> 01:05:55,640
or a series of intermediate sized images.

823
01:05:55,640 --> 01:06:02,370
That would make it perform better and a plus would
actually be that the images will look better on screen too.

824
01:06:02,370 --> 01:06:04,670
So that's the OpenGL ES analyzer.

825
01:06:04,670 --> 01:06:08,150
Any OpenGL programmers out there, I really
recommend you take advantage of this.

826
01:06:08,150 --> 01:06:10,690
This is truly an awesome instrument.

827
01:06:10,690 --> 01:06:12,860
So let me close that.

828
01:06:12,860 --> 01:06:19,230
But this does beg the question,
how would one create these mipmaps?

829
01:06:19,230 --> 01:06:27,540
Well, I have a mipmap app for that, and I'm going to show
it to you now but unfortunately it's not running very fast.

830
01:06:27,540 --> 01:06:33,130
And whenever you have a piece of software that isn't
running very fast, use the Time Profiler on it.

831
01:06:33,130 --> 01:06:38,220
That is as Andreas mentioned available
for Mac OS X and the iOS 4 now.

832
01:06:38,220 --> 01:06:43,210
Somebody process these images again
and wait for it to finish

833
01:06:43,210 --> 01:06:46,020
and then I'll quit the app and we'll see what data we have.

834
01:06:46,020 --> 01:06:50,870
When we filter down, adjust my own code we're
spending 80% of our time at scale image.

835
01:06:50,870 --> 01:06:52,900
Let me double click on that.

836
01:06:52,900 --> 01:06:58,560
Well, we're doing various things but most
of the time, is spent on CGContextDrawImage.

837
01:06:58,560 --> 01:07:02,190
Well, there's nothing I can really do about that.

838
01:07:02,190 --> 01:07:06,850
That's a CoreGraphics call and I'm sure those
guys have already totally optimized that.

839
01:07:06,850 --> 01:07:12,060
So Xcode 3, this is as far as it would
take, I could go with my analysis.

840
01:07:12,060 --> 01:07:14,300
I couldn't go any further, I'd be stuck.

841
01:07:14,300 --> 01:07:18,230
But as Andreas mentioned, now in
Xcode 4 we have system trace.

842
01:07:18,230 --> 01:07:23,800
So let's see what system trace can tell
us about this app from its perspective.

843
01:07:23,800 --> 01:07:29,240
Now when I run system trace, I'm going to run it
in what we call deferred mode, new to Instruments.

844
01:07:29,240 --> 01:07:32,680
So if it looks a little bit darker
and different, that's why.

845
01:07:32,680 --> 01:07:38,870
So let's have it start up and we'll put
our little app through its paces again.

846
01:07:42,540 --> 01:07:47,670
Great, now the instrument is going to analyze a
ton of data it has just collected and it's going

847
01:07:47,670 --> 01:07:50,940
to summarize it all for me in these great charts.

848
01:07:50,940 --> 01:07:55,660
This represents a ton of data in the back-end
and you can you can feel free to explore it all.

849
01:07:55,660 --> 01:08:02,170
But it's giving me clues as to what I should look at
and right away this chart VM Fault Durations catches my eye.

850
01:08:02,170 --> 01:08:08,770
It seems very much out of proportion that ZeroFill
should be that much of all my VM operations here.

851
01:08:08,770 --> 01:08:13,760
So, let me cook on this chart which
will take me to the next layer of data.

852
01:08:13,760 --> 01:08:19,890
What it's showing me actually is call
treesassociated with VM operations.

853
01:08:19,890 --> 01:08:22,730
And to me, a performance guy, that's just really amazing.

854
01:08:22,730 --> 01:08:25,090
I have never seen a tool do that for 'em.

855
01:08:25,090 --> 01:08:29,870
So, let's open up ZeroFill and our
old friend Scale Imagine again.

856
01:08:29,870 --> 01:08:34,540
Let me double click on that and we'll
wait for it to collect all the data.

857
01:08:34,540 --> 01:08:45,150
And now it's saying in the context of VM operations, it's
also finding a lot of ZeroFills on CGContextDrawImage.

858
01:08:45,150 --> 01:08:50,590
Well, this is really cool because what Instruments has
done is correlated for me a time profile which clearly

859
01:08:50,590 --> 01:08:57,240
as identify them, spending all my time in this call
with VM operations data where it's clearly identified

860
01:08:57,240 --> 01:09:01,750
that quite a few ZeroFilters going on
behind the scenes when I make this call.

861
01:09:01,750 --> 01:09:06,510
So, if I restructured my code, I think
I could optimize that some and then I go

862
01:09:06,510 --> 01:09:09,440
through Instruments and do the next round of optimization.

863
01:09:09,440 --> 01:09:11,000
So, that is Instruments.

864
01:09:11,000 --> 01:09:11,420
Thank you very much.

865
01:09:11,420 --> 01:09:12,450
Andreas?

866
01:09:12,450 --> 01:09:20,720
[ Applause ]

867
01:09:20,720 --> 01:09:23,110
>> So that was the new version of Instruments.

868
01:09:23,110 --> 01:09:27,220
There's some great new ways to learn
even more about your applications.

869
01:09:27,220 --> 01:09:31,450
And that completes our sneak peek of the Xcode 4 release.

870
01:09:31,450 --> 01:09:38,930
[ Applause ]

871
01:09:38,930 --> 01:09:41,890
I probably don't have to tell you how
excited we are about this new release.

872
01:09:41,890 --> 01:09:43,120
We've been working at it for a while.

873
01:09:43,120 --> 01:09:49,010
We've designed a complete new set of tools, made the entire
tool chain simpler and at the same time more powerful

874
01:09:49,010 --> 01:09:52,150
so that you can write even better applications.

875
01:09:52,150 --> 01:09:57,860
So, please keep using Xcode 3 with the new instant set
up process for your devices to develop the new iPhone

876
01:09:57,860 --> 01:10:03,900
and iPad applications but also take a look at Xcode 4
and let us know what you think about it for the future.

877
01:10:03,900 --> 01:10:05,530
Thank you very much.

878
01:10:05,530 --> 01:10:07,630
[ Applause ]

