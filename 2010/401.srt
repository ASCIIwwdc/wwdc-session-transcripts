1
00:00:06,070 --> 00:00:09,790
>> Graeme Devine: Welcome to game design
and development for the iPhone OS.

2
00:00:09,790 --> 00:00:11,730
My name is Graeme Devine.

3
00:00:11,730 --> 00:00:15,760
Be talking to you a lot today about
game design on the iPhone.

4
00:00:15,760 --> 00:00:20,730
And hopefully a lot of you in the
audience are game designers.

5
00:00:20,730 --> 00:00:26,070
So iPhone OS, it's an incredible
platform for game development.

6
00:00:26,070 --> 00:00:31,500
One of the things that's changed in the last year is
that now you're not only designing games for the iPhone

7
00:00:31,500 --> 00:00:35,150
but you're designing games really for three platforms.

8
00:00:35,150 --> 00:00:38,130
The iPod Touch, the iPhone, and the iPad.

9
00:00:38,130 --> 00:00:48,830
And each of these is incredibly different than prior -- than
just a year ago, you had just a single platform out there.

10
00:00:48,830 --> 00:00:53,940
We're going to talk a lot today about the
technologies that you use to build games

11
00:00:53,940 --> 00:01:00,100
and how we actually apply those technologies to make a
demo game that we're going to show you in just a minute.

12
00:01:01,530 --> 00:01:05,460
So you guys have been pretty busy making games.

13
00:01:05,460 --> 00:01:08,900
50,000 games or more on the App Store.

14
00:01:08,900 --> 00:01:18,290
I think that is absolutely incredible, and thank you so much
for making games so popular on sufficient a great platform.

15
00:01:18,290 --> 00:01:20,980
I think give yourselves a round of applause.

16
00:01:22,510 --> 00:01:27,730
[ Applause ]

17
00:01:27,730 --> 00:01:33,300
>> Graeme Devine: So we introduce
yesterday this brand new concept of iOS 4,

18
00:01:33,300 --> 00:01:38,140
so I still may say iPhone 4, because
I only heard it yesterday.

19
00:01:39,170 --> 00:01:45,780
But we introduced some fantastic new frameworks
in iOS 4 that can be used for you to make games.

20
00:01:45,780 --> 00:01:53,530
Not the least of which is Game Kit which allows you to add
achievements, leaderboards, and best of all the ability

21
00:01:53,530 --> 00:01:58,230
to connect to get two devices together anywhere in the world

22
00:01:58,230 --> 00:02:01,850
and play with your friends all
over the world via the network.

23
00:02:01,850 --> 00:02:08,300
We'll be talking a lot today on our thoughts on how to put
good achievements into games, games that drive game play,

24
00:02:08,300 --> 00:02:14,200
and a little bit about leaderboard set
up and be able to get good networking.

25
00:02:14,200 --> 00:02:19,020
So why are we really here talking to you
about game design, what do we think --

26
00:02:19,020 --> 00:02:22,140
why does Apple's point of view on games really matter?

27
00:02:22,140 --> 00:02:26,430
Well, our platform is absolutely unique.

28
00:02:26,430 --> 00:02:29,410
The fact that we have taken away the controller.

29
00:02:29,410 --> 00:02:36,530
You used to sit for 30 years with a controller
in your hand that connected to a console

30
00:02:36,530 --> 00:02:39,970
that then connected into a television set.

31
00:02:39,970 --> 00:02:43,560
And for many, many years, that's the way we designed games.

32
00:02:43,560 --> 00:02:46,530
And slowly the controller got more and more complicated.

33
00:02:46,530 --> 00:02:55,920
We went from that up, down, left, right, to added 2D
pads and analog stick, 2D pad plus to analog sticks,

34
00:02:55,920 --> 00:03:00,790
then 2D pads plus analog sticks
plus a myriad of controllers.

35
00:03:00,790 --> 00:03:05,940
Last game I worked on I think had
twenty inputs on the controller alone.

36
00:03:05,940 --> 00:03:08,280
Completely changed with the iPhone.

37
00:03:08,280 --> 00:03:13,930
That controller is gone and the abstraction
that a controller is in between you

38
00:03:13,930 --> 00:03:17,010
and the player's world is completely gone as well.

39
00:03:17,010 --> 00:03:21,090
We want to talk a lot today about how
to take that controller out of games

40
00:03:21,090 --> 00:03:25,150
so that you are touching the world directly
and using the touch screen to be able

41
00:03:25,150 --> 00:03:28,460
to interact with the world in front of you.

42
00:03:28,460 --> 00:03:30,610
So this is actually two sessions.

43
00:03:30,610 --> 00:03:32,580
We have a Part One and Part Two.

44
00:03:32,580 --> 00:03:36,820
Part One is really more about design,
making games on the platform.

45
00:03:36,820 --> 00:03:43,920
Why 30 frames a second is so important for every
single game, even if your game is tic-tac-toe,

46
00:03:43,920 --> 00:03:47,860
your game needs to be running at 30 hertz,
and we're going to be talking about that.

47
00:03:47,860 --> 00:03:51,900
We're going to talk about user interface
and how we made the user interface in Quest,

48
00:03:51,900 --> 00:03:54,030
how that new [Inaudible] works on top of OpenGL.

49
00:03:54,030 --> 00:03:58,560
We're going to talk a lot about managing the acid pipe line.

50
00:03:58,560 --> 00:04:05,470
As our games are getting more complicated and full
of more graphics and more sounds and more models,

51
00:04:05,470 --> 00:04:11,230
but our dependency on a single programmer to make builds
is becoming more of a critical point in game development.

52
00:04:11,230 --> 00:04:13,160
And we need to find ways to get around that.

53
00:04:13,160 --> 00:04:17,710
We're going to talk about some of the things that we
did that you can also apply to your games as well.

54
00:04:17,710 --> 00:04:25,460
Finally, this first session, we're going talk a lot
about controls and how to get rid of that joystick.

55
00:04:25,460 --> 00:04:30,250
Part Two, we're actually going to
take a technical deep dive into Quest.

56
00:04:30,250 --> 00:04:33,880
We're going to take a look at the shaders, as
to how we did the [Inaudible]per-pexel lighting,

57
00:04:33,880 --> 00:04:37,050
and we're going to walk down our graphics pipeline.

58
00:04:37,050 --> 00:04:41,660
We're also going to check in with our art department,
Pete, who's a single artist, and we're going to talk

59
00:04:41,660 --> 00:04:46,560
about the acid generation that he went
through in order to be able to make Quest.

60
00:04:46,560 --> 00:04:53,160
And how that itself also made a tremendous
difference in getting towards 30 frames a second.

61
00:04:53,160 --> 00:04:57,560
Finally, we're going to talk about the one
dozen things that we learned that think --

62
00:04:57,560 --> 00:05:00,640
that we think will make a tremendous
difference to all of your games.

63
00:05:00,640 --> 00:05:06,560
And that is the one dozen lessons that I want you to take
home as homework tonight before coming to our labs tomorrow

64
00:05:06,560 --> 00:05:10,250
and talking about how you've applied
that into your source code.

65
00:05:10,250 --> 00:05:14,510
So you've got some homework.

66
00:05:14,510 --> 00:05:15,880
Okay, Quest.

67
00:05:15,880 --> 00:05:19,600
I don't know how many -- you saw it last night,
but we're going to show it again in just a minute.

68
00:05:19,600 --> 00:05:27,470
To reiterate it was two months worth of work by three
programmers and one artist who are incredibly passionate

69
00:05:27,470 --> 00:05:34,330
about making a highly performance application
for the iPod Touch, the iPad, and the iPhone.

70
00:05:34,330 --> 00:05:40,830
Making a game on all three platforms run absolutely
the fastest frames per second we can make it go,

71
00:05:40,830 --> 00:05:44,770
but at the same time make something delicious looking.

72
00:05:44,770 --> 00:05:48,690
Quest also uses the best of Apple technologies.

73
00:05:48,690 --> 00:05:55,020
Uses OpenGL ES in order to be able to
provide per pixel background, ABI Foundation,

74
00:05:55,020 --> 00:06:01,530
to be able to provide a rich surround sound environment,
because a lot of our people out there wear head phones.

75
00:06:01,530 --> 00:06:06,620
Game kits on the phone ought to be able
to connect to people across the world.

76
00:06:06,620 --> 00:06:10,630
UIKit in order to be able to have that beautiful interface.

77
00:06:10,630 --> 00:06:11,720
Simple things like HTTP.

78
00:06:11,720 --> 00:06:15,210
That wasn't simple ten years ago, let me tell you.

79
00:06:15,210 --> 00:06:22,800
The simple things like HTTP that enable us to
get assets easily and quickly onto the phone.

80
00:06:22,800 --> 00:06:28,660
Then finally, interface elements like the Touch Interface
and big accelerometer and playing around with easy ways

81
00:06:28,660 --> 00:06:33,600
in order to be able to change our interface into
games so that they are actually very compelling.

82
00:06:33,600 --> 00:06:40,920
So let me bring Jeff Rutner up to the stage.

83
00:06:40,920 --> 00:06:46,370
We're going to give a demo of Quest running on iPad.

84
00:06:46,370 --> 00:06:52,780
Yesterday we showed it to you on the iPhone
4, today we're showing it to you on the iPad.

85
00:06:52,780 --> 00:06:59,610
So one of the first things you'll notice about
Quest is the very first screen tells a story.

86
00:06:59,610 --> 00:07:02,600
From the title, I kind of know what I'm going to be doing.

87
00:07:02,600 --> 00:07:04,100
It says Quest.

88
00:07:04,100 --> 00:07:05,840
Kind of a big clue there.

89
00:07:05,840 --> 00:07:11,280
From the environment below me, it's kind of a dungeon,
I can already see it's got grates in front of me.

90
00:07:11,280 --> 00:07:14,400
I can kind of tell, wow, I'm going to be in a dungeon.

91
00:07:14,400 --> 00:07:19,920
And there's a guy with a big sword, so you can
immediately guess the weapon you're going to be using.

92
00:07:19,920 --> 00:07:28,760
So that's all UIKit, used to generate that Quest
logo, all the buttons, everything on the screen except

93
00:07:28,760 --> 00:07:32,510
for the OpenGL ES 2.0 background behind you.

94
00:07:32,510 --> 00:07:36,400
And it's absolutely running at an incredible frame rate.

95
00:07:36,400 --> 00:07:40,640
So let's take a look at the achievement list.

96
00:07:40,640 --> 00:07:47,110
And one thing to notice about the achievement
list is we brought it up using a Core Animation.

97
00:07:47,110 --> 00:07:49,790
Core Animation made that flip to just bring it up.

98
00:07:49,790 --> 00:07:57,570
Incredibly easy in order to be able to do transitions
using UIKit over implementing your own UI in OpenGL.

99
00:07:57,570 --> 00:08:00,350
So achievements are something we'll
be talking about later today,

100
00:08:00,350 --> 00:08:04,040
but haven't quite run through and
got the demon slayer achievement.

101
00:08:04,040 --> 00:08:08,200
I seem to remember I won it last night.

102
00:08:08,200 --> 00:08:09,160
Gone again.

103
00:08:09,160 --> 00:08:14,680
So let's jump into the game.

104
00:08:14,680 --> 00:08:22,130
You can see that the game is full lighting
per pixel in the environment and in the world.

105
00:08:22,130 --> 00:08:32,010
This is pushing around 40 to 50,000 triangles per frame, and
millions of triangles per second on all of our platforms.

106
00:08:32,010 --> 00:08:39,930
As the character who is skinned on the GPU runs
around, the GPU is doing all the work to animate him.

107
00:08:39,930 --> 00:08:46,420
The world around the character is lighting him, the lights
around the character are effecting the character's lighting,

108
00:08:46,420 --> 00:08:49,490
and as he walks into shadows, he gets shadowed.

109
00:08:49,490 --> 00:08:57,040
If I press on top of the character
the context menu comes up.

110
00:08:57,040 --> 00:08:58,680
And I can interact with the character.

111
00:08:58,680 --> 00:09:02,980
I can call in a little pet to help me.

112
00:09:02,980 --> 00:09:07,850
One of the things we did was in order to
be able to easily interact with the world,

113
00:09:07,850 --> 00:09:10,670
I want to be able to touch the
world anywhere I want to touch.

114
00:09:10,670 --> 00:09:15,130
So the control for Quest is I just touch
where I want to go, and that's where I go.

115
00:09:15,130 --> 00:09:16,970
If I want to interact with something, I touch on it.

116
00:09:16,970 --> 00:09:20,850
So in order to be able to interact
with my character I just touch on him.

117
00:09:20,850 --> 00:09:23,570
And then the context menu has changed.

118
00:09:23,570 --> 00:09:27,660
The context menu is now relevant because
my pet is there, and I can go tell my pet

119
00:09:27,660 --> 00:09:33,510
to go take my loot back to town or dismiss it.

120
00:09:33,510 --> 00:09:39,910
So let's walk through and take
a look at the final encounter.

121
00:09:39,910 --> 00:09:43,520
You can see as we run around the
world itself tells the story.

122
00:09:43,520 --> 00:09:47,170
Little bit of a demon, kind of hungry.

123
00:09:47,170 --> 00:09:51,000
The world itself tells a story, there's little bits
to go and explore, there's all sorts of exploring,

124
00:09:51,000 --> 00:09:54,080
there's all sorts of deep chasms with red lights down below.

125
00:09:54,080 --> 00:09:55,540
I love that in games.

126
00:09:55,540 --> 00:09:59,870
Whenever I see that I'm like how
do I get down to that red light.

127
00:09:59,870 --> 00:10:03,200
It tells -- it just invites you into the game environment.

128
00:10:03,200 --> 00:10:05,450
I want to be able to see more.

129
00:10:05,450 --> 00:10:13,440
So to interact with this demon, same as interacting
with my character -- he isn't very patient, isn't he?

130
00:10:13,440 --> 00:10:23,540
I go and attack him, use my large sword, pretty
obvious, win my demon slayer achievement, and slay him.

131
00:10:23,540 --> 00:10:27,950
Now that interaction was all done by
interacting by pressing on top of the character.

132
00:10:27,950 --> 00:10:33,500
Now before we finish them, I want to show you one
more piece of UIKit that I think is just fabulous.

133
00:10:33,500 --> 00:10:41,510
By pressing on top of the character's head we bring up
the user interface for the actual character himself.

134
00:10:41,510 --> 00:10:44,800
Now this is all still UIKit.

135
00:10:44,800 --> 00:10:48,270
And what we did with UIKit was we
skinned it and we're going to be talking

136
00:10:48,270 --> 00:10:50,900
about how we did this in this talk this morning.

137
00:10:50,900 --> 00:10:56,290
We skinned it so that it looks just
like the game environment itself.

138
00:10:56,290 --> 00:10:59,060
One of the things we find absolutely compelling

139
00:10:59,060 --> 00:11:05,140
about writing Quest was making the environment,
making all the UI look like the game.

140
00:11:05,140 --> 00:11:11,890
But one of the real benefits about using UIKit
was it gives the game the same user interface

141
00:11:11,890 --> 00:11:16,000
as every other application on that player's phone.

142
00:11:16,000 --> 00:11:20,050
They're already used to play -- you know,
pressing buttons and how they press,

143
00:11:20,050 --> 00:11:23,900
they have expectations about how
things dismiss and how things come up.

144
00:11:23,900 --> 00:11:28,880
So by using UIKit we give them
that same experience automatically.

145
00:11:28,880 --> 00:11:35,020
And it works perfectly on top of OpenGL ES 2.0 backgrounds.

146
00:11:35,020 --> 00:11:43,520
I should also point out that all of this, all of what you're
seeing is just using the same SDK that you have already.

147
00:11:43,520 --> 00:11:45,520
We didn't do anything special.

148
00:11:45,520 --> 00:11:52,210
All we did was start it 4 frames a
second and go all the way up to 40.

149
00:11:52,210 --> 00:11:54,510
Thank you, Jeff.

150
00:11:54,510 --> 00:11:58,070
[ Applause ]

151
00:11:58,070 --> 00:12:04,190
>> Now one of the things that's really hard for
you guys now, well harder, more of a challenge,

152
00:12:04,190 --> 00:12:07,400
is that you have to make games for more than one platform.

153
00:12:07,400 --> 00:12:12,590
You have to make games for the iPod Touch, the iPod Touch
is a challenge because people have their head phones

154
00:12:12,590 --> 00:12:16,170
on all the time, and the audio in
that game is kind of important.

155
00:12:16,170 --> 00:12:17,570
You have to make games for the iPad.

156
00:12:17,570 --> 00:12:22,020
Well you hold your iPad completely differently
than you hold either of the other two devices,

157
00:12:22,020 --> 00:12:26,670
and the interface of that is completely
different and needs to be completely different.

158
00:12:26,670 --> 00:12:29,310
The iPhone, people use this to make phone calls.

159
00:12:29,310 --> 00:12:32,010
And people can interrupt the game play by calling you.

160
00:12:32,010 --> 00:12:34,840
It's really annoying.

161
00:12:34,840 --> 00:12:39,650
Quest runs just great on the iPod Touch.

162
00:12:39,650 --> 00:12:41,720
These are all screen shots from the actual game.

163
00:12:41,720 --> 00:12:44,590
Runs great on the iPad.

164
00:12:44,590 --> 00:12:48,330
Runs fantastic on the new iPhone 4.

165
00:12:48,330 --> 00:12:50,580
Those are all shots from in-game.

166
00:12:50,580 --> 00:12:53,630
Actually about a month ago.

167
00:12:53,630 --> 00:12:55,800
So how did we start?

168
00:12:55,800 --> 00:12:59,740
Obviously, two months ago we didn't have a game running.

169
00:12:59,740 --> 00:13:03,000
So this is an early contact art of Quest.

170
00:13:03,000 --> 00:13:06,320
Two months ago we started with a simple concept.

171
00:13:06,320 --> 00:13:09,400
We are huge nerds and fans of Diablo.

172
00:13:09,400 --> 00:13:15,900
Got to deny -- can't deny that
didn't influence us a little bit.

173
00:13:15,900 --> 00:13:21,230
So we wanted to make a role-playing game
that was set in a dungeon environment.

174
00:13:21,230 --> 00:13:27,640
Now one of the things that we wanted to do was make a rich
environment in a real-time 3D world that we could play with.

175
00:13:27,640 --> 00:13:32,050
And we wanted every screen in the world to tell a story.

176
00:13:32,050 --> 00:13:37,550
So even from the concept art, there's
that little balcony back there behind me.

177
00:13:37,550 --> 00:13:41,160
What's that for, what's on there,
there's a special loop there.

178
00:13:41,160 --> 00:13:47,330
Even if all I did on this first screen was run
from you know, left to right across that bridge,

179
00:13:47,330 --> 00:13:51,750
the fact that there's other stuff
there really drags the user in.

180
00:13:51,750 --> 00:13:56,470
One of the things that's really different about
our platform now is that I am holding the world

181
00:13:56,470 --> 00:13:59,530
in my hands, it is right in front of my face.

182
00:13:59,530 --> 00:14:06,070
So the more you can do to invest people in that world,
to make them wonder about it so that when they aren't

183
00:14:06,070 --> 00:14:11,660
in your game they're like ah, I bet I
can get down to that red shadow area.

184
00:14:11,660 --> 00:14:13,490
The more that they'll come back and play your game.

185
00:14:13,490 --> 00:14:18,430
And this is one of the key things that you want
when you're thinking about game design on the phone,

186
00:14:18,430 --> 00:14:22,210
is how to get the player to press your game twice.

187
00:14:22,210 --> 00:14:25,900
So touching the world is something
that we also thought a lot about.

188
00:14:25,900 --> 00:14:28,890
We wanted our world to be extremely interactive.

189
00:14:28,890 --> 00:14:30,970
To be able to touch the screen.

190
00:14:30,970 --> 00:14:35,340
The major input device onto all of
our devices is that touch screen.

191
00:14:35,340 --> 00:14:40,590
We had to abstract away that joystick and throw it
away so that I can just press the world in front of me.

192
00:14:40,590 --> 00:14:41,510
Supremely important.

193
00:14:41,510 --> 00:14:48,930
You might notice the UI overlay, that we actually
stuck fairly closely to the initial design of the UI.

194
00:14:48,930 --> 00:14:54,900
The mini maps up there, and this is of
course iPad in terms of its aspect ratio.

195
00:14:54,900 --> 00:14:58,430
But if you look at that initial touch design
on the iPad we actually thought we were going

196
00:14:58,430 --> 00:15:01,460
to do something a little bit different early on.

197
00:15:01,460 --> 00:15:08,030
We thought because you hold the iPad in two hands, I'm going
to be holding the iPad in two hands, I can use my two thumbs

198
00:15:08,030 --> 00:15:12,130
for abilities, and I can use the
accelerometer to be able to move my guy around.

199
00:15:12,130 --> 00:15:18,020
You know, try to make gravity roll over
so that you know, has to go downhill.

200
00:15:18,020 --> 00:15:23,380
In the end, we stuck with touch
[Inaudible] touching the world.

201
00:15:23,380 --> 00:15:26,630
And that worked fantastically, but one
of the things I want to encourage you

202
00:15:26,630 --> 00:15:31,090
to do is always think about different ways of input.

203
00:15:31,090 --> 00:15:33,000
That accelerometer is fantastic.

204
00:15:33,000 --> 00:15:36,270
And what works on one device may not work on another.

205
00:15:36,270 --> 00:15:43,840
What works on the iPad there may not work on the iPod or
the accelerometer may work better in some cases on the iPod

206
00:15:43,840 --> 00:15:48,330
because I don't want to touch my main guy.

207
00:15:48,330 --> 00:15:51,380
One of our other early decisions
that really made a difference

208
00:15:51,380 --> 00:15:55,160
to the game development was data-driving our content.

209
00:15:55,160 --> 00:16:00,590
You saw there briefly the console that we can bring
up and we're going to be talking a lot about how

210
00:16:00,590 --> 00:16:05,540
that data drive content and variables
and made game design iteration very fast.

211
00:16:05,540 --> 00:16:14,200
We realized with two months that A, they weren't going to
move the date of WWDC, although I guess [Inaudible] perhaps,

212
00:16:14,200 --> 00:16:22,610
and B, that we needed a way to iterate it very,
very, very quickly on game design, and game ideas,

213
00:16:22,610 --> 00:16:24,790
in that we needed to be able to change things fast.

214
00:16:24,790 --> 00:16:31,870
So we're going to be talking a
lot today about how to data drive.

215
00:16:31,870 --> 00:16:36,130
Also early on, we talked -- we thought
an awful lot about sound, AVFoundation.

216
00:16:36,130 --> 00:16:38,770
AV Foundation is an fantastic.

217
00:16:38,770 --> 00:16:41,700
You can start music with one line of code.

218
00:16:41,700 --> 00:16:46,560
OpenAL. We realized a lot of people
play games with their head phones on.

219
00:16:46,560 --> 00:16:50,530
I don't know how many of you have, like, teenage
daughters that just have these white things

220
00:16:50,530 --> 00:16:53,590
in their ears all the time, but I certainly do.

221
00:16:53,590 --> 00:16:56,700
And they play games constantly with head phones on.

222
00:16:56,700 --> 00:17:02,470
So although the device itself has a single
speaker off to the side, most people play games

223
00:17:02,470 --> 00:17:06,110
or a lot of people play games and
actually hear the 3D world.

224
00:17:06,110 --> 00:17:10,570
And you have to remember they're
holding the world in their hands.

225
00:17:10,570 --> 00:17:14,960
So making the audio work in their
ears just adds to the environment.

226
00:17:14,960 --> 00:17:19,450
Making the world seem real, extremely
important, you have to do a good job.

227
00:17:19,450 --> 00:17:24,400
In order to get a real 3D sound
from it, you have to use OpenAL.

228
00:17:24,400 --> 00:17:30,720
Game center integration on the iPhone is also
something that you need to think about from day one.

229
00:17:30,720 --> 00:17:32,920
I love leaderboards.

230
00:17:32,920 --> 00:17:37,500
I love leaderboards because I can
see how I'm doing against my friends.

231
00:17:37,500 --> 00:17:41,680
What typically happens with me, at any
rate, is I would be working on a game

232
00:17:41,680 --> 00:17:45,490
and I'm in the top ten of the world, which is awesome.

233
00:17:45,490 --> 00:17:49,180
And then a game will come out,
and I'm in the top 100 on day one.

234
00:17:49,180 --> 00:17:54,480
And then certainly with Halo Wars,
I was in the top 100,000 on day two.

235
00:17:54,480 --> 00:17:55,600
And then it fell off quickly.

236
00:17:55,600 --> 00:18:00,630
So to be able to compare myself to my
friends, though, hey, I'm still number three.

237
00:18:00,630 --> 00:18:04,770
Comparison against friends is just fantastic.

238
00:18:04,770 --> 00:18:09,270
Achievements are also something that really drive game play.

239
00:18:09,270 --> 00:18:14,180
And thinking of different achievements
is a real challenging game design.

240
00:18:14,180 --> 00:18:17,780
It's okay to have an achievement
that says hey, I slayed ten demons.

241
00:18:17,780 --> 00:18:19,270
That's a pretty obvious one.

242
00:18:19,270 --> 00:18:26,430
The harder achievements to think of are the ones that -- for
instance in Quest, I'm going to go around in this high level

243
00:18:26,430 --> 00:18:30,340
and complete the level without killing a single monster.

244
00:18:30,340 --> 00:18:35,970
The challenge is to make up achievements
that drive game play in different ways.

245
00:18:35,970 --> 00:18:41,020
Your users will go through the achievement
list and think ah, that's kind of impressive.

246
00:18:41,020 --> 00:18:42,360
I'll do that right now.

247
00:18:42,360 --> 00:18:45,860
And they'll go play your game because
you've offered them some different way

248
00:18:45,860 --> 00:18:50,640
to play the game just be driven purely by an achievement.

249
00:18:50,640 --> 00:18:52,640
And of course networking.

250
00:18:52,640 --> 00:18:53,840
Love networking.

251
00:18:53,840 --> 00:18:58,610
I love collaborative play, I love playing with
four other people, going in killing bad guys.

252
00:18:58,610 --> 00:19:03,170
Networking head-to-head, I hear that works great too.

253
00:19:03,170 --> 00:19:07,730
So early on in Quest we also thought a
lot about the initial character design

254
00:19:07,730 --> 00:19:09,730
and bringing the character up on the screen.

255
00:19:09,730 --> 00:19:11,320
Our character is very cartoony.

256
00:19:11,320 --> 00:19:13,140
There's a very good reason for that.

257
00:19:13,140 --> 00:19:16,450
Cartoony characters can have huge
animations that are overreaching,

258
00:19:16,450 --> 00:19:19,210
I can go do this, which I can never do in real life.

259
00:19:19,210 --> 00:19:20,990
And you can exaggerate the animation.

260
00:19:20,990 --> 00:19:26,940
So when he's running, when he's grabbing, when he's
jumping, when he's being heroic, when he's dying even --

261
00:19:26,940 --> 00:19:30,650
he can be over animated and very obvious.

262
00:19:30,650 --> 00:19:34,250
When he's in that three-quarter
view, making things very obvious.

263
00:19:34,250 --> 00:19:36,340
Very important.

264
00:19:36,340 --> 00:19:40,770
Where he's an animated character, too,
you can also give him a big sword.

265
00:19:40,770 --> 00:19:45,330
Big swords don't really work when you go for photo
realism, but the big sword works for two reasons.

266
00:19:45,330 --> 00:19:48,070
I have a big sword, it's very obvious I have it.

267
00:19:48,070 --> 00:19:51,880
I'm not going wander -- I don't have to
go to an inventory screen to see what kind

268
00:19:51,880 --> 00:19:54,630
of sword I have, I have the big sword in my hand.

269
00:19:54,630 --> 00:19:56,170
It's very obvious when I use it.

270
00:19:56,170 --> 00:19:57,920
I'm going to go strike with my big sword.

271
00:19:57,920 --> 00:20:01,400
If you had a little sharp knife, not so obvious.

272
00:20:01,400 --> 00:20:03,150
And three, it's fun.

273
00:20:03,150 --> 00:20:08,220
So for two months we really did
not iterate much on our character.

274
00:20:08,220 --> 00:20:11,230
We kind of stuck to that initial
thought, that initial design.

275
00:20:11,230 --> 00:20:15,690
So Sergeant Shock here ended up
very close to our initial design.

276
00:20:15,690 --> 00:20:21,700
Our initial level design was also very straight through.

277
00:20:21,700 --> 00:20:26,100
We wanted initial level design that
kind of showed how things work,

278
00:20:26,100 --> 00:20:31,630
so that I could drive through a single
level more or less in one single pass

279
00:20:31,630 --> 00:20:35,610
and actually get from A to B going from side to side.

280
00:20:35,610 --> 00:20:40,800
The side to side is kind of important because
I want to be able to load part of a level in,

281
00:20:40,800 --> 00:20:43,410
then as I move to another part I don't
want to be able to see this first part,

282
00:20:43,410 --> 00:20:46,170
because I'm going to junk it out in memory.

283
00:20:46,170 --> 00:20:52,900
I want the most inviting 3D world with the most polygons
I can throw on the screen at any particular frame.

284
00:20:52,900 --> 00:20:57,080
And if I have a large square level,
it's very hard to do that sometimes,

285
00:20:57,080 --> 00:21:00,760
because you have to go and show
pieces of large square levels.

286
00:21:00,760 --> 00:21:09,720
But if I guide you around a large environment that I can
stream in pieces of, boy, I can load a lot of assets up.

287
00:21:11,350 --> 00:21:16,960
The grid-like system that you saw in a previous screen
too applied to how we actually made the graphics.

288
00:21:16,960 --> 00:21:21,500
Pete's going to talking in the second half a
lot about the grid system that we used to set

289
00:21:21,500 --> 00:21:24,200
up and make all of our environments with.

290
00:21:24,200 --> 00:21:27,460
You can see that the pieces go together.

291
00:21:27,460 --> 00:21:31,810
The doors, the grates, the stairs, they
all fit together, and we were able to make

292
00:21:31,810 --> 00:21:36,200
up levels very easily using this grid-like system.

293
00:21:36,200 --> 00:21:43,500
Also, our team approach was we only had two
months to go, so how do we actually set this up.

294
00:21:43,500 --> 00:21:49,840
We started early on with a game design
document that worked in two ways.

295
00:21:49,840 --> 00:21:53,680
Initially, we had a game design document
that outlined the world that the rest

296
00:21:53,680 --> 00:21:56,450
of my team could kind of see what the world was like.

297
00:21:56,450 --> 00:22:02,910
A story. It was all about Sergeant Shock and his adventures
and all about the world and why he was adventuring

298
00:22:02,910 --> 00:22:06,890
and so forth, so that everyone's
on the same page content-wise.

299
00:22:06,890 --> 00:22:12,650
We also wrote up the encounter that
you just saw in the Quest demo.

300
00:22:12,650 --> 00:22:16,860
And more or less from start to
finish assigned priority to it.

301
00:22:16,860 --> 00:22:19,300
We only have two months to make this thing.

302
00:22:19,300 --> 00:22:24,930
So we assigned priority to everything, and we
would meet twice a week and reassign priority.

303
00:22:24,930 --> 00:22:27,430
And that worked exceptionally well.

304
00:22:27,430 --> 00:22:34,050
Because something that effects every single product
is this wonderful feature called feature creep.

305
00:22:34,050 --> 00:22:36,640
I'm sure a lot of you had that happen in your games.

306
00:22:36,640 --> 00:22:40,620
And what happens is I start making
the world's best tic-tac-toe game,

307
00:22:40,620 --> 00:22:43,340
and tic-tac-toe becomes -- is a wonderful game.

308
00:22:43,340 --> 00:22:44,800
And then I add a fireball to it.

309
00:22:44,800 --> 00:22:51,750
And fireballs scorch the other player's Xs and Os, I
then think that I'll make 3D tic-tac-toe with fireballs,

310
00:22:51,750 --> 00:22:55,550
I'll make -- no, I'll add a fireball gun,
no, I'm just going to take away tic-tac-toe

311
00:22:55,550 --> 00:22:58,850
and I've ended up with a first-person shooter.

312
00:22:58,850 --> 00:23:03,700
That happens, and you know that happens.

313
00:23:03,700 --> 00:23:07,660
But what happened is I still have
tic-tac- toe source code, really.

314
00:23:07,660 --> 00:23:09,830
I haven't made first-person shooter source code.

315
00:23:09,830 --> 00:23:15,540
And tic-tac-toe source code, not going
to work very well, not very robust,

316
00:23:15,540 --> 00:23:23,880
going to be pretty buggy [Inaudible] no feature creep.

317
00:23:23,880 --> 00:23:25,230
[Inaudible] 30 frames per second.

318
00:23:25,230 --> 00:23:27,530
Why is 30 frames a second so important?

319
00:23:27,530 --> 00:23:30,780
You might be thinking my tic-tac-toe
game, my [Inaudible] with friends games,

320
00:23:30,780 --> 00:23:35,390
why do I need to have 30 frames a second,
so fast on the screen when that's happening?

321
00:23:35,390 --> 00:23:37,900
Tic-tac-toe can go 4 frames a sec, I don't care.

322
00:23:37,900 --> 00:23:39,500
Well I say two things about that.

323
00:23:39,500 --> 00:23:45,150
A, you've written a really bad
tic-tac-toe game, and B, you're wrong.

324
00:23:45,150 --> 00:23:51,280
The wonderful thing about our devices, the very
first thing that you all did was go take a photograph

325
00:23:51,280 --> 00:23:55,480
and then you played around with the
photograph on the other side of the glass.

326
00:23:55,480 --> 00:23:56,730
And it felt real.

327
00:23:56,730 --> 00:24:01,770
You felt like you were playing around with a
reel photograph on the other side of the glass.

328
00:24:01,770 --> 00:24:03,700
And it just -- that's the fantastic thing.

329
00:24:03,700 --> 00:24:05,120
That's what sold me on the iPhone.

330
00:24:05,120 --> 00:24:07,230
I thought that's incredible.

331
00:24:07,230 --> 00:24:11,490
And that's what sold every one of your users on the iPhone.

332
00:24:11,490 --> 00:24:15,830
And if your game doesn't feel real on the
other side of the glass when you touch it,

333
00:24:15,830 --> 00:24:18,690
what happens is you get -- start to get lack.

334
00:24:18,690 --> 00:24:20,590
You start to get this laggy thing going on.

335
00:24:20,590 --> 00:24:23,310
I'm going to pick up a tile and I'm going to move it around.

336
00:24:23,310 --> 00:24:27,320
And because my game is not running at 30
frames per second my tile kind of lags around.

337
00:24:27,320 --> 00:24:32,290
And what happens is the player starts to counter
that, starts to go back to try to get the tile,

338
00:24:32,290 --> 00:24:35,240
because there's something wrong with
this tile, it's not keeping up with me.

339
00:24:35,240 --> 00:24:39,980
Then you go back, [Inaudible] then
you're in the worst possible situation.

340
00:24:39,980 --> 00:24:46,700
The person is trying to counter your game design
because you had not hit a frame rate of 30.

341
00:24:46,700 --> 00:24:52,100
30 hertz is incredibly important for
absolutely every single game you make.

342
00:24:52,100 --> 00:24:53,070
It's the new minimum.

343
00:24:53,070 --> 00:24:56,840
And I challenge you all to meet and exceed that.

344
00:24:56,840 --> 00:24:59,770
Of course when your game's not doing anything,
when it's just sitting there and you kind

345
00:24:59,770 --> 00:25:03,890
of wonder what's my next move in
tic-tac-toe, don't go with 30 hertz.

346
00:25:03,890 --> 00:25:07,940
Slow all the way down, save that battery.

347
00:25:07,940 --> 00:25:11,000
Using Apple technology's extremely important in Quest.

348
00:25:11,000 --> 00:25:13,610
And we applied a lot of them to Quest.

349
00:25:13,610 --> 00:25:15,480
Talk about that.

350
00:25:15,480 --> 00:25:21,950
UIKit. Everything on the screen, UI,
both in the menus and in game is UIKit.

351
00:25:21,950 --> 00:25:25,540
We'll talk about that in just a minute and how it worked.

352
00:25:25,540 --> 00:25:28,670
Core Animation comes for free with UIKit.

353
00:25:28,670 --> 00:25:32,060
You just do six lines of code and things twirl around.

354
00:25:32,060 --> 00:25:33,340
Your artist will love you.

355
00:25:33,340 --> 00:25:38,300
He can sit and design things, and he actually
understands the rotation and the matrix and the math.

356
00:25:38,300 --> 00:25:41,920
And he can sit with you and make cool animations.

357
00:25:41,920 --> 00:25:44,290
It's much harder to do that if you roll your own UI.

358
00:25:44,290 --> 00:25:54,020
OpenGL ES 2.0 and its ability to run a little
program every single pixel on the screen.

359
00:25:54,020 --> 00:25:57,970
You have no idea how magical that is, in
order to be able to have pixels shaders.

360
00:25:57,970 --> 00:26:02,040
20 years ago, you had to run one
program that did an an entire screen.

361
00:26:02,040 --> 00:26:06,020
Now you've got a program for a pixel.

362
00:26:06,020 --> 00:26:06,990
It's incredible.

363
00:26:06,990 --> 00:26:15,130
Being able to use HTTP in order to drive changes to
things like my user interface or my models or my textures,

364
00:26:15,130 --> 00:26:20,680
so that I think a connection using an HTTP server and
a little folder on my desktop that I can drop things

365
00:26:20,680 --> 00:26:25,090
into that the artist can change the
entire look of the game if he wants.

366
00:26:25,090 --> 00:26:32,660
So if he doesn't like the Quest logo he can change
it to sci-fi Quest, change it to serenity Quest,

367
00:26:32,660 --> 00:26:35,720
he can sit and drop things and
because we've written a little code

368
00:26:35,720 --> 00:26:40,670
that connects things inside the game it updates
automatically for him in the user interface.

369
00:26:40,670 --> 00:26:46,860
The only way he can tell if his stuff looks good is when
he sees it on the device, make that easy for your artist.

370
00:26:46,860 --> 00:26:49,060
He'll love you for it.

371
00:26:49,060 --> 00:26:56,830
AVFoundation, as I said, this is the one line
of code to start background music in a game.

372
00:26:56,830 --> 00:27:01,440
It's just -- I think that's -- if you're
not using that there's something wrong.

373
00:27:01,440 --> 00:27:03,450
You're making life hard for yourself.

374
00:27:03,450 --> 00:27:07,500
Use AVFoundation for a fantastic
audio environment around you.

375
00:27:07,500 --> 00:27:10,460
An accelerometer.

376
00:27:10,460 --> 00:27:18,330
As I said earlier, the accelerometer is an input device
very different, because I'm holding the world in my hands.

377
00:27:18,330 --> 00:27:22,160
So even if your game is a touch
game I'd encourage you to still look

378
00:27:22,160 --> 00:27:26,800
at that accelerometer feedback because
I'm holding a world in my hands.

379
00:27:26,800 --> 00:27:32,400
So if I tip my world just a little bit, and I take
just a little bit of that tip, and I change things

380
00:27:32,400 --> 00:27:40,700
and I paralyze things just a little bit, that world
suddenly becomes even more 3 dimensional, even more magical.

381
00:27:40,700 --> 00:27:46,920
Just because I paid attention to something I'm getting for
free from the accelerometer input from the user's hands.

382
00:27:46,920 --> 00:27:53,500
And you can really add a lot to your game
by just doing these little simple things.

383
00:27:53,500 --> 00:27:58,660
Game center -- I'm number one on this one --
game center, adding that from the very beginning,

384
00:27:58,660 --> 00:28:02,360
adding leaderboards will drive
people to come back to your games.

385
00:28:02,360 --> 00:28:06,320
If you add the social integration that
challenges people in order to be able to --

386
00:28:06,320 --> 00:28:09,600
I've beaten you now on my leaderboard, you are now number 2.

387
00:28:09,600 --> 00:28:12,840
Well guess what, I'm going to go in
and try to become number 1 again.

388
00:28:12,840 --> 00:28:16,990
I'm going to go and hit play on your game.

389
00:28:16,990 --> 00:28:18,800
Okay, enough of me for a minute.

390
00:28:18,800 --> 00:28:26,780
I'd like to invite Helen to the stage to talk about
user interface and how we approach that design in Quest.

391
00:28:26,780 --> 00:28:28,510
Thank you.

392
00:28:28,510 --> 00:28:33,660
[ Applause ]

393
00:28:33,660 --> 00:28:34,390
>> Helen Ma: Thanks, Graeme.

394
00:28:34,390 --> 00:28:35,460
My name is Helen Ma.

395
00:28:35,460 --> 00:28:40,430
I'm one of the three engineers working on Quest.

396
00:28:40,430 --> 00:28:46,940
I mostly worked on the user interface, which
is what I'm going to talk to you about today.

397
00:28:46,940 --> 00:28:56,850
Now user interface can make -- determines the perceived
quality of your game in the crucial first 30 seconds.

398
00:28:56,850 --> 00:29:02,140
The 30 seconds in which a typical user decides
whether your game is worth playing or not.

399
00:29:02,140 --> 00:29:08,740
Unlike the console or the PC where the player may
have tens or hundreds of titles to choose from,

400
00:29:08,740 --> 00:29:15,670
on iOS they have over 50,000 titles to
choose from in your hand, any time they want.

401
00:29:15,670 --> 00:29:23,230
So the incentive for the [Inaudible] invest a lot
of time in figuring your controls much, much less.

402
00:29:23,230 --> 00:29:26,890
Nobody needs to play a game to get a job done.

403
00:29:26,890 --> 00:29:32,080
The only reason anybody plays any games is
because it's an enjoyable experience for them.

404
00:29:32,080 --> 00:29:35,840
And user interface can make or break that experience.

405
00:29:35,840 --> 00:29:41,290
As Graeme mentioned, we choose UIKit
to implement our user interface.

406
00:29:41,290 --> 00:29:48,470
UIKit, ads you know, is the native
user interface tool kit for iPhone.

407
00:29:48,470 --> 00:29:53,130
For most users it what makes an iPhone an iPhone.

408
00:29:53,130 --> 00:29:59,000
And as you saw in the demo, it works beautifully with
OpenGL and everything else we ship on the platform.

409
00:29:59,000 --> 00:30:08,730
But before we get into that I'd like to show you -- I'd
like to have a quick talk about touch interface and games.

410
00:30:08,730 --> 00:30:12,370
This is a screen shot of what the
Quest UI might have looked like.

411
00:30:12,370 --> 00:30:17,640
You have your multidirectional
pad and you have a button box.

412
00:30:18,780 --> 00:30:20,630
Very straight forward to implement.

413
00:30:20,630 --> 00:30:22,130
But is it the right thing to do.

414
00:30:22,130 --> 00:30:28,680
This [Inaudible] has been with us for the last 30
years, and directional pad even longer than that.

415
00:30:28,680 --> 00:30:38,190
And [Inaudible] service while there, however, they do
not change particularly well to the mobile platform.

416
00:30:38,190 --> 00:30:43,700
Why? Because nobody wants to carry around your
desktop, and your finger is not a mouse button.

417
00:30:43,700 --> 00:30:49,540
New metaphors are now possible with a touch interface.

418
00:30:49,540 --> 00:30:52,410
And we're still very much in the
early days of exploring that.

419
00:30:52,410 --> 00:31:04,220
One particularly useful metaphor that we found is the
looking glass metaphor which simply put is the idea

420
00:31:04,220 --> 00:31:14,500
that you are interacting with a visual world, your game,
with nothing but a piece of glass between you and the game.

421
00:31:14,500 --> 00:31:16,800
This is great for games, because it is fun.

422
00:31:16,800 --> 00:31:23,570
It is unprecedented on any kind of gaming device to be
able to directly touch and interact with the game objects.

423
00:31:23,570 --> 00:31:28,460
So in Quest, instead of using a
directional pad you simply tap on a screen

424
00:31:28,460 --> 00:31:31,340
where you want your character to
go and he starts walking there.

425
00:31:31,340 --> 00:31:36,080
And when you lift your finger off the glass he stops.

426
00:31:36,080 --> 00:31:37,630
Really easy to learn.

427
00:31:37,630 --> 00:31:44,020
Games that require you to go through tutorials
and figure out the controls is not fun.

428
00:31:44,020 --> 00:31:47,960
So now that you know how to move around in
the world, how do you interact with that.

429
00:31:47,960 --> 00:31:52,050
Well, the contextual menu is a
very natural extension for that.

430
00:31:52,050 --> 00:31:59,700
So to interact with any object in your -- in Quest, you
simply hold your finger over the object of your interest

431
00:31:59,700 --> 00:32:04,010
and a contention menu pops up that
shows you what's possible.

432
00:32:04,010 --> 00:32:10,310
You slide your finger over to the
action that you choose, and it's done.

433
00:32:10,310 --> 00:32:13,350
Extremely intuitive to use and also very fun.

434
00:32:13,350 --> 00:32:21,770
Now -- now that you've created this wonderful
illusion, it's important to maintain it at all times.

435
00:32:21,770 --> 00:32:27,600
There are three things you must remember how to
do -- to do, in order to maintain the illusion.

436
00:32:27,600 --> 00:32:32,140
Number one, allow direct manipulation whenever possible.

437
00:32:32,140 --> 00:32:37,800
Trying as much as possible, make sure what
objects in your game are interactable.

438
00:32:37,800 --> 00:32:41,710
Even if it's just something like flicking over.

439
00:32:41,710 --> 00:32:46,570
Every object that interactible
adds to the realism of your game.

440
00:32:46,570 --> 00:32:50,860
Number two, as Graeme mentioned, 30 frames a second.

441
00:32:50,860 --> 00:32:52,540
Real world does not have lag.

442
00:32:52,540 --> 00:32:55,310
As soon as you introduce lag the inclusion will be broken.

443
00:32:55,310 --> 00:32:59,980
And number three, avoid abstractions.

444
00:32:59,980 --> 00:33:04,450
Abstractions such as button bars, visual [Inaudible] pads.

445
00:33:04,450 --> 00:33:10,030
There are things that players must
learn in order to play your game.

446
00:33:10,030 --> 00:33:13,180
Now you may think that directional
pad is pretty straight forward.

447
00:33:13,180 --> 00:33:17,150
But actually it's not to a lot of people,
who are seeing it for the first time.

448
00:33:17,150 --> 00:33:21,600
What's that funny arrow thing doing
there, am I supposed to touch it.

449
00:33:21,600 --> 00:33:26,320
Anyway, when you do touch it, it is -- does it
move the character or does it move the screen.

450
00:33:26,320 --> 00:33:29,760
All these things are not necessary
on the touch interface now.

451
00:33:29,760 --> 00:33:38,510
Now I'd like to bring out Jeffrey [Inaudible]
for a quick demo of user interface.

452
00:33:38,510 --> 00:33:41,430
[ Applause ]

453
00:33:41,430 --> 00:33:48,550
>> Helen Ma: Now before we get into the game I'd like
to just quickly show you the leaderboard achievement UI.

454
00:33:48,550 --> 00:33:57,850
Now you see the animation there, how many lines of
code do you think it would take to do that in OpenGL?

455
00:33:57,850 --> 00:34:01,550
50, 100, I have no idea.

456
00:34:01,550 --> 00:34:03,420
Because UIKit did it for me.

457
00:34:03,420 --> 00:34:06,680
All I had to do was ask for it.

458
00:34:06,680 --> 00:34:11,170
Now let's get into the game.

459
00:34:13,270 --> 00:34:18,950
Now as you can see everything on the screen is UIKit.

460
00:34:18,950 --> 00:34:23,680
And it's -- let's see the contextual menu in action again.

461
00:34:25,750 --> 00:34:30,560
Some of you may be surprised to learn
that that is not a custom control.

462
00:34:30,560 --> 00:34:37,460
That is simply a few UI buttons dressed up.

463
00:34:37,460 --> 00:34:38,630
Extremely easy to do.

464
00:34:38,630 --> 00:34:41,080
It's all public API.

465
00:34:41,080 --> 00:34:48,990
All right, let's take a walk down.

466
00:34:48,990 --> 00:34:50,790
Love how this looks.

467
00:34:50,790 --> 00:34:52,510
Absolutely gorgeous to look at.

468
00:34:52,510 --> 00:35:01,430
[ Background noise ]

469
00:35:01,430 --> 00:35:03,630
>> Helen Ma: Wow, okay.

470
00:35:03,630 --> 00:35:04,610
He looks pretty hungry.

471
00:35:04,610 --> 00:35:07,240
I think he wants to give me his own experience.

472
00:35:07,240 --> 00:35:11,480
All right, more than happy to oblige.

473
00:35:11,480 --> 00:35:14,460
Let's go. Oh, before we start -- never mind.

474
00:35:14,460 --> 00:35:20,790
Can you bring up the character
sheet, I just want to buffer myself.

475
00:35:20,790 --> 00:35:25,120
Grab the fireball and that green thing I forget the name of.

476
00:35:26,590 --> 00:35:31,510
Yeah. Okay, now let's do it.

477
00:35:31,510 --> 00:35:38,540
[ Background noise ]

478
00:35:38,540 --> 00:35:45,620
>> Okay, so before we go, before we wrap up the
demo I just want to quickly show you something.

479
00:35:45,620 --> 00:35:50,660
We said over and over again that this is UIKit.

480
00:35:50,660 --> 00:35:55,660
Now we're going to show you what it looks like
without the skinning, without the extra art work.

481
00:35:59,250 --> 00:36:03,140
This is Quest UI looks like, without the skinning.

482
00:36:03,140 --> 00:36:06,290
UI buttons everywhere.

483
00:36:06,290 --> 00:36:15,540
All you have to do, as you can see, all you have
to do with a bit of great art work you can make --

484
00:36:15,540 --> 00:36:21,750
UIKit can put any style you wish to
deliver for your gaming experience.

485
00:36:21,750 --> 00:36:30,030
On the corner there is an UI scroll view and I'll show
you exactly how we did a mini map later on in the show.

486
00:36:30,030 --> 00:36:30,800
Thanks, Jeff.

487
00:36:30,800 --> 00:36:33,140
[ Applause ]

488
00:36:33,140 --> 00:36:40,710
>> Helen Ma: One of the most frequent heard
comments we had showing off this demo internally was

489
00:36:40,710 --> 00:36:43,420
that people can't believe it's UIKit.

490
00:36:43,420 --> 00:36:51,300
Of course you can do all of this in OpenGL,
programmers have been doing it for years, and it's fine.

491
00:36:51,300 --> 00:36:53,790
But on the iOS now you have a choice.

492
00:36:53,790 --> 00:36:55,030
You don't have to do that.

493
00:36:55,030 --> 00:36:57,060
You can take advantage of UIKit.

494
00:36:57,060 --> 00:37:00,540
And as you saw, it works great.

495
00:37:00,540 --> 00:37:08,350
It will save you countless hours of engineering and key
work and it's easy to take full advantage of Core Animation.

496
00:37:08,350 --> 00:37:11,630
Very few lines of code to do that.

497
00:37:11,630 --> 00:37:15,940
Bottom line for you as programmers is
it's less code for you to write and debug.

498
00:37:15,940 --> 00:37:20,440
Here are the six lines of code it took
to do the character information sheet.

499
00:37:20,440 --> 00:37:27,270
As you may recall, when the character info
sheet came up it had a spin animation.

500
00:37:27,270 --> 00:37:31,760
So to do that, you first tell UIView
that you're about to start animation.

501
00:37:31,760 --> 00:37:35,970
You tell it how long you want animation to be.

502
00:37:35,970 --> 00:37:39,920
Then you set a rotate and scale transformation.

503
00:37:39,920 --> 00:37:42,320
And you state on the view, then you're done.

504
00:37:42,320 --> 00:37:44,400
UIKit does the rest.

505
00:37:44,400 --> 00:37:45,730
Couldn't be simpler.

506
00:37:45,730 --> 00:37:51,420
Next I'm going to show you the
mini map, how we did the mini map.

507
00:37:51,420 --> 00:37:55,560
The mini map is an essential part of any dungeon crawler.

508
00:37:55,560 --> 00:37:57,720
And we've got a pretty nice one.

509
00:38:06,140 --> 00:38:12,250
So to do that you start with mini map which is
the top down two dimensional view of your dungeon.

510
00:38:12,250 --> 00:38:16,980
You put it inside an UI scroll view.

511
00:38:16,980 --> 00:38:20,210
Pretty simple, straight forward to do.

512
00:38:20,210 --> 00:38:28,430
And then you do your transformation -- your translation
from your 3D coordinates into your 2D coordinates.

513
00:38:28,430 --> 00:38:33,140
Then you have a functional mini map right
there, as you saw in the last part of my demo.

514
00:38:33,140 --> 00:38:37,740
However, to make it look the way it does in Quest
you just need to do a couple of extra steps.

515
00:38:37,740 --> 00:38:41,380
Number one, put a fan on top.

516
00:38:42,570 --> 00:38:51,070
Number two, drop the whole thing inside
the container with the mask view.

517
00:38:51,070 --> 00:38:52,120
Then you're done.

518
00:38:52,120 --> 00:38:53,230
Very straight forward.

519
00:38:53,230 --> 00:38:55,650
And it works really well.

520
00:38:55,650 --> 00:39:00,320
Now I'm going to talk to you about
something called a programmer's UI.

521
00:39:00,320 --> 00:39:05,560
It simply means the minimum amount of code --

522
00:39:05,560 --> 00:39:10,160
sorry, the minimum amount of the UI
required for program to keep working.

523
00:39:10,160 --> 00:39:19,130
You say you have a great idea for a game and then you want
to just prototype and get it going as fast as you can.

524
00:39:19,130 --> 00:39:24,160
So to move around, throw some buttons up for that.

525
00:39:24,160 --> 00:39:25,780
Say you want to have some abilities.

526
00:39:25,780 --> 00:39:27,130
More buttons.

527
00:39:27,130 --> 00:39:30,840
Why? Because buttons are easy to do.

528
00:39:30,840 --> 00:39:36,740
And it tends to be really complicated because there's
not a lot of thought how everything fits together.

529
00:39:36,740 --> 00:39:39,190
Your focus is on the game itself.

530
00:39:39,190 --> 00:39:48,780
And then what happens is you're late, you're under some
pressure to ship, and you don't have time later on,

531
00:39:48,780 --> 00:39:54,940
the project around the cycle, to rearrange and
rethink the UI flow, to remiplement the UI.

532
00:39:54,940 --> 00:40:00,910
So you tidy up the project interface that you have
and put a bit of window dressing on it and ship it.

533
00:40:00,910 --> 00:40:04,030
That's not a way to make great user interface.

534
00:40:04,030 --> 00:40:07,500
You need to think about it from
the beginning of your project.

535
00:40:07,500 --> 00:40:12,170
It is such a vital and important
part of your project, of your game,

536
00:40:12,170 --> 00:40:16,750
that you need to make it an integral
part of your development process.

537
00:40:18,320 --> 00:40:23,500
A phrase that you're going to hear a
lot about in this talk is rep iteration.

538
00:40:23,500 --> 00:40:29,380
It simply means the ability to iterate
on your user interface, your game design,

539
00:40:29,380 --> 00:40:32,140
your game play, every aspect of your game play.

540
00:40:32,140 --> 00:40:39,350
Because the amount that you do that is directly
proportional to the quality of the final product.

541
00:40:39,350 --> 00:40:43,070
In Quest we discovered a couple ways to do that.

542
00:40:43,070 --> 00:40:46,210
Number one, data drive the UI.

543
00:40:46,210 --> 00:40:48,520
And number two, load your assets over Wi-Fi.

544
00:40:48,520 --> 00:40:53,760
And we're going to go into detail right now.

545
00:40:53,760 --> 00:40:56,190
So what is data driven UI.

546
00:40:56,190 --> 00:41:02,680
More typically, when you write in your
application, you write a controller code

547
00:41:02,680 --> 00:41:05,090
for each screen that you have in your game.

548
00:41:05,090 --> 00:41:16,940
So for example, you may have menu controllers [Inaudible]
your [Inaudible] perhaps your settings controller.M.

549
00:41:16,940 --> 00:41:19,790
Typically, controller code is not reusable.

550
00:41:19,790 --> 00:41:27,850
And then we fix bugging one of these controllers
you've got to propagate the bug fix in all of them.

551
00:41:27,850 --> 00:41:34,240
What if you were to extract out your
layer information into a data file.

552
00:41:34,240 --> 00:41:35,610
It does a couple of things for you.

553
00:41:35,610 --> 00:41:41,650
Number one, it encourages easy
experimentation with your user interface.

554
00:41:41,650 --> 00:41:46,070
It doesn't take any code change, it should
not take you any code change to move

555
00:41:46,070 --> 00:41:49,330
around user interface elements on your screen.

556
00:41:49,330 --> 00:41:58,910
And because it takes no work it would -- you can do
it easily, and it won't cause you to do it more often.

557
00:41:58,910 --> 00:42:03,820
But more importantly, it allows
non-programmers to work on your UI.

558
00:42:03,820 --> 00:42:11,340
If you implemented the screen layout information
in a Plist like this, and have your program,

559
00:42:11,340 --> 00:42:16,840
have your game derive it's user interface at runtime
from this Plist you can simply hand the Plist

560
00:42:16,840 --> 00:42:20,710
over to non programmers and have them tweak it.

561
00:42:20,710 --> 00:42:25,610
There's one more advantage in doing things this way.

562
00:42:25,610 --> 00:42:34,370
Now that we have the iPad and the iPhone 4,
we have extra resolutions to think about.

563
00:42:34,370 --> 00:42:46,560
It's very tempting to scout out -- scale up your existing
iPhone resolution games to the new resolution and ship it.

564
00:42:46,560 --> 00:42:49,810
But is it the right thing to do.

565
00:42:49,810 --> 00:42:55,310
Well users, having paid for the extra screen real
estate, they expect you to take full advantage

566
00:42:55,310 --> 00:42:58,280
of the extra screen size available to you.

567
00:42:58,280 --> 00:43:06,700
The games that are -- do take advantage of the screen
resolution tend to do it better than the ones that don't.

568
00:43:06,700 --> 00:43:10,580
The second thing I'm going to talk about is Wi-Fi loading.

569
00:43:10,580 --> 00:43:19,810
Now they have your layer information in a separate data
file what about assets, what about things like the model.

570
00:43:19,810 --> 00:43:26,300
The textures, the art, art work for the user interface.

571
00:43:26,300 --> 00:43:31,950
What if you were to put those things on web server
and have your game load these things at runtime.

572
00:43:31,950 --> 00:43:35,160
Doing things this way will free your artist to experiment.

573
00:43:35,160 --> 00:43:41,040
It's very easy to set up a web server, and
all of our shipping devices comes with Wi-Fi.

574
00:43:41,040 --> 00:43:47,030
Your artist and your designers will love you for that.

575
00:43:48,100 --> 00:43:52,700
Now in closing I'd just like to finish up with three things.

576
00:43:52,700 --> 00:43:59,620
Number one, UIKit is great for user interface, and
particularly as you've seen in the demo, for games.

577
00:43:59,620 --> 00:44:04,960
It's extremely flexible, versatile, and it's great.

578
00:44:04,960 --> 00:44:06,770
So use it.

579
00:44:06,770 --> 00:44:13,360
Number two, rep iteration is essential for great
user interface in games, and other aspects.

580
00:44:13,360 --> 00:44:15,970
And we've shown you a couple ways to do that.

581
00:44:15,970 --> 00:44:19,840
And three, don't forget to turn
those things off before you ship.

582
00:44:19,840 --> 00:44:20,910
Thanks for your time.

583
00:44:20,910 --> 00:44:22,580
Now back to Graeme.

584
00:44:24,500 --> 00:44:27,880
[ Applause ]

585
00:44:27,880 --> 00:44:34,180
>> Graeme Devine: Okay, let's talk a
little bit more about making Quest.

586
00:44:34,180 --> 00:44:38,660
And in fact, have a little section
called game design is nitty gritty.

587
00:44:38,660 --> 00:44:43,940
There's lessons that we've learned as we're making Quest as
game designers that are not the technical lessons that I'd

588
00:44:43,940 --> 00:44:46,170
like to go over to close out the session with.

589
00:44:46,170 --> 00:44:50,550
Because game design on our platform
is so different than game design --

590
00:44:50,550 --> 00:44:54,650
the game design experience on any other platform out there.

591
00:44:54,650 --> 00:44:58,490
Heard a lot about controls, haven't you?

592
00:44:58,490 --> 00:45:00,710
Abstracting that control away.

593
00:45:00,710 --> 00:45:05,380
Going over the history that we have right
from the arcade all the way to the sitting

594
00:45:05,380 --> 00:45:09,500
in the home to now, holding the world in my hands.

595
00:45:09,500 --> 00:45:14,580
It is time to move on from abstracting a
controller interface on the touch screen.

596
00:45:14,580 --> 00:45:17,360
The touch screen is the controller.

597
00:45:17,360 --> 00:45:22,470
When users touch the world they feel
so much more in control of the world.

598
00:45:22,470 --> 00:45:25,650
When they touch the things they're
interacting with, it really makes a difference

599
00:45:25,650 --> 00:45:29,500
as to how real that world feels in front of them.

600
00:45:29,500 --> 00:45:37,250
I really encourage you to iterate through your design and
work as much as possible on making a design that interacts

601
00:45:37,250 --> 00:45:41,510
with the world in front of you and
not add a layer of abstraction.

602
00:45:41,510 --> 00:45:46,550
Now layers of abstraction like key
pads, we see those in a lot of games.

603
00:45:46,550 --> 00:45:50,970
And sometimes that works great,
and sometimes that does work.

604
00:45:50,970 --> 00:45:56,010
I'm not saying, you know, strike and
take them out -- well, I guess I am.

605
00:45:57,580 --> 00:46:00,370
But please think about iterating more.

606
00:46:00,370 --> 00:46:06,180
And putting the touch screen instead
of the dual key pad on the screen.

607
00:46:06,180 --> 00:46:09,860
Now I have a little rant here about play testing.

608
00:46:09,860 --> 00:46:15,870
Now when we play test, we play test Quest every single day.

609
00:46:15,870 --> 00:46:22,450
Something you all need to be doing is play
testing your game from about Day Number 2.

610
00:46:22,450 --> 00:46:28,090
If you're not play testing your game on the second
day of production all the way through your submission

611
00:46:28,090 --> 00:46:32,370
to the App Store, if you're writing your game
engine and it's going to be running any day now,

612
00:46:32,370 --> 00:46:35,820
and my game engine is going to be on line
the last week before I ship my game --

613
00:46:35,820 --> 00:46:39,510
then that's exactly the wrong thing to do for a game.

614
00:46:39,510 --> 00:46:42,830
You need to be play testing early,
you need to be play testing often,

615
00:46:42,830 --> 00:46:46,930
and you need to be play testing
every single chance you can get.

616
00:46:46,930 --> 00:46:52,040
More importantly, you need to let
other people play test your game.

617
00:46:52,040 --> 00:46:58,340
And what you need to do there is really,
really hard, it's kind of body over mind --

618
00:46:58,340 --> 00:47:03,100
is not go and grab the controls away
from them, not go and grab the, you know,

619
00:47:03,100 --> 00:47:06,450
iPhone back from them when they do something wrong.

620
00:47:06,450 --> 00:47:12,330
Because what's going to happen is you're going to
give your fabulous game you just stroved on for hours

621
00:47:12,330 --> 00:47:17,130
that has the best user interface ever, and you just
know it's going to be perfect and you I did not have it

622
00:47:17,130 --> 00:47:21,330
to your daughter and she runs into the wall.

623
00:47:21,330 --> 00:47:22,650
And into the wall.

624
00:47:22,650 --> 00:47:23,790
And into the wall.

625
00:47:23,790 --> 00:47:24,580
And into the wall.

626
00:47:24,580 --> 00:47:30,140
And there's a big red button there that
says press here to not run into the wall.

627
00:47:30,140 --> 00:47:38,610
And what you have to do, what you have to
do, is not run, jump over the couch, dive,

628
00:47:38,610 --> 00:47:42,810
take the things out of her hands
and say no, this is how you do it.

629
00:47:42,810 --> 00:47:49,420
You have to observe someone play testing your
game and you're going to have to take that pain.

630
00:47:49,420 --> 00:47:55,450
And you're going to have to take that pain because when
someone buys your app on the App Store you are not there

631
00:47:55,450 --> 00:48:00,300
to dive over the couch and tell
them to press the big red button.

632
00:48:00,300 --> 00:48:05,940
You need to make your game intuitive, and the only
way you will learn to make your game intuitive is

633
00:48:05,940 --> 00:48:13,760
by observing other people play your game and then asking
them nicely afterwards why they ran into the wall so much.

634
00:48:13,760 --> 00:48:16,050
Didn't you see that big red button?

635
00:48:16,050 --> 00:48:19,600
And if it's your daughter, that
might involve an iTunes gift card.

636
00:48:19,600 --> 00:48:24,110
But do this all the time.

637
00:48:24,110 --> 00:48:25,660
Play test.

638
00:48:25,660 --> 00:48:29,370
Play test makes a difference in games.

639
00:48:29,370 --> 00:48:31,710
Okay, rant.

640
00:48:31,710 --> 00:48:32,810
Next rant.

641
00:48:32,810 --> 00:48:35,240
They're in a row.

642
00:48:35,240 --> 00:48:39,350
One second is a very long time to start up a game.

643
00:48:39,350 --> 00:48:48,620
When I press on the icon in my game on my homepage, I
want to be playing a game or at the menu in one second.

644
00:48:49,780 --> 00:48:54,010
One second is a very long time.

645
00:48:54,010 --> 00:49:00,650
If I am waiting 8 seconds or 20 seconds on a loading
screen after I press something on the home screen in order

646
00:49:00,650 --> 00:49:05,860
to be able to get my game, all I am
doing is frustrating my game player.

647
00:49:05,860 --> 00:49:12,800
He or she is getting more and more frustrated
because it's taking so long to load the game.

648
00:49:12,800 --> 00:49:17,790
Not only do you need to optimize for 30 frames
a second when you're actually running the game,

649
00:49:17,790 --> 00:49:21,240
you need to optimize the game start up time.

650
00:49:21,240 --> 00:49:22,840
Two ways to do this.

651
00:49:22,840 --> 00:49:28,400
Only load the assets you need to load in
order to be able to get to that first menu.

652
00:49:28,400 --> 00:49:30,290
We only loaded the first part of the dungeon up.

653
00:49:30,290 --> 00:49:32,730
Jeff's going to go into that in Part Two.

654
00:49:32,730 --> 00:49:36,880
We want that play button there
right away, as quick as possible.

655
00:49:36,880 --> 00:49:38,520
One second or less.

656
00:49:38,520 --> 00:49:41,560
It's very important to have that thing up and running.

657
00:49:41,560 --> 00:49:50,090
And optimize load times, compress textures, anything
you can do to make that load time less than a second.

658
00:49:50,090 --> 00:49:54,580
Players are going to play your game over and over and over.

659
00:49:54,580 --> 00:49:59,220
And you've got to think about their start
up time as the kind of animosity meter.

660
00:49:59,220 --> 00:50:01,250
You know, you kind of build that up over time.

661
00:50:01,250 --> 00:50:07,350
If your game takes 8 seconds to start up, 10
seconds to start up and they're at the bus stop,

662
00:50:07,350 --> 00:50:11,890
eventually they're going to remember that
and they're going to stop playing your game.

663
00:50:11,890 --> 00:50:13,010
One second.

664
00:50:13,010 --> 00:50:19,340
That's how much time you should be expecting to
get to, after I press go to my game starting.

665
00:50:19,340 --> 00:50:24,380
The phone, unfortunately, can ring.

666
00:50:24,380 --> 00:50:28,520
As a matter of fact, it's a phone.

667
00:50:28,520 --> 00:50:34,270
All sorts of things can happen now on our
devices and we need to take care of that.

668
00:50:34,270 --> 00:50:40,430
Our phones can background our tasks, they can press
that, change out an app and go do what they want.

669
00:50:40,430 --> 00:50:45,810
A phone call can come in and they might choose to answer
it instead of completing and getting the achievement.

670
00:50:45,810 --> 00:50:47,050
They might just press the home button.

671
00:50:47,050 --> 00:50:51,070
Their bus has come, they want to
press the home button and wrap on up.

672
00:50:51,070 --> 00:50:56,450
A message might come in that says oops, this
happened, can you go back to the office and get milk.

673
00:50:56,450 --> 00:50:58,820
Why milk's at the office, I don't know.

674
00:50:58,820 --> 00:51:07,250
In the olden days when we made games we would -- first
thing we would do when a game started up, we would say hey,

675
00:51:07,250 --> 00:51:10,420
here's game slots one through ten, choose one.

676
00:51:10,420 --> 00:51:12,100
Game slots are wonderful.

677
00:51:12,100 --> 00:51:16,850
And you'll be sitting in your console and it would be
fantastic, and your mom would yell hey, it's dinner time,

678
00:51:16,850 --> 00:51:21,110
and I'm going to bring up the menu to save a game,
I'm going to choose my save slot 1 through 10.

679
00:51:21,110 --> 00:51:22,320
Or I might just leave it paused.

680
00:51:22,320 --> 00:51:23,780
You know, one of the two.

681
00:51:23,780 --> 00:51:26,520
You do not have that luxury any more.

682
00:51:26,520 --> 00:51:30,900
There is no room for save slots on our platform.

683
00:51:30,900 --> 00:51:37,730
You need to be thinking about saving data constantly
and getting the user back to the same place he was

684
00:51:37,730 --> 00:51:41,440
as quickly as you can, and do that for your user.

685
00:51:41,440 --> 00:51:44,410
Because you don't have a choice.

686
00:51:44,410 --> 00:51:48,650
That home button isn't going to not make your game go away.

687
00:51:48,650 --> 00:51:51,890
Your game gets hold, hey, home
button got pressed, do something.

688
00:51:51,890 --> 00:51:56,580
And more often than not, we're not doing anything.

689
00:51:56,580 --> 00:51:59,360
And as game designers we need to start countering that.

690
00:51:59,360 --> 00:52:03,570
We need to be thinking of a state
save, doing that right there,

691
00:52:03,570 --> 00:52:08,480
so when I start my game up later
I'm right back to where I was.

692
00:52:08,480 --> 00:52:14,050
The game loop.

693
00:52:14,050 --> 00:52:16,210
All sorts of ways to do a game loop.

694
00:52:16,210 --> 00:52:18,940
We get asked about this all the time.

695
00:52:18,940 --> 00:52:23,600
And typical game loop, I render the frame,
the invaders are coming down from the sky

696
00:52:23,600 --> 00:52:27,690
and I have a glorious 3D rendered frame of invaders.

697
00:52:27,690 --> 00:52:29,670
I then run my Game SIM.

698
00:52:29,670 --> 00:52:36,350
And my Game SIM updates my invader positions and
updates my base that's going to fire up into the sky.

699
00:52:36,350 --> 00:52:39,790
And it's a quickly run Game SIM and it's wonderful.

700
00:52:39,790 --> 00:52:45,090
And then because it's the phone, I get those delicate
callbacks with the touch events and so forth.

701
00:52:45,090 --> 00:52:52,060
I go and deal with that and I still have my
user input and get it ready for the next time.

702
00:52:52,060 --> 00:52:54,860
That's the wrong way to do things in games.

703
00:52:54,860 --> 00:52:57,580
I'll tell you why.

704
00:52:57,580 --> 00:53:02,110
Games -- you're introducing there
a whole frame's worth of latency.

705
00:53:02,110 --> 00:53:08,010
If your game is running at 30 frames a second you're
now effectively running at 15 because you've not taken

706
00:53:08,010 --> 00:53:11,860
into account the user's input when
you run that game simulation.

707
00:53:11,860 --> 00:53:17,500
You need to be thinking about this order.

708
00:53:17,500 --> 00:53:23,740
Render my fame of glorious invaders coming
down from the sky, handle user input,

709
00:53:23,740 --> 00:53:27,300
store it and then update it, and then run my Game SIM.

710
00:53:27,300 --> 00:53:33,200
Because now my Game SIM is going to reflect my latest
touches I have on my screen, and my base is going to move

711
00:53:33,200 --> 00:53:35,270
and my fire and it's going to go up in the sky.

712
00:53:35,270 --> 00:53:38,870
And it's going to be rendered in the very next frame.

713
00:53:38,870 --> 00:53:41,960
In the previous slide, it would
not be rendered very next frame

714
00:53:41,960 --> 00:53:47,460
and you would actually introduce
latency needlessly into your game.

715
00:53:47,460 --> 00:53:50,810
We also get asked a lot well how do I -- what do I do

716
00:53:50,810 --> 00:53:54,730
to anchor my game loop, what's
the best anchor I have out there.

717
00:53:54,730 --> 00:53:58,940
And the best anchor is CA display link.

718
00:53:58,940 --> 00:54:03,750
You should all be using CA delay link to
anchor the beginning of your game loop.

719
00:54:03,750 --> 00:54:06,470
Because the first thing you're
going to do is render your frame.

720
00:54:06,470 --> 00:54:13,200
And see your display link comes off the vertical blank on
the device and gives you as much time as you want to load

721
00:54:13,200 --> 00:54:17,430
up your GPU with that wonderful per pixel environment.

722
00:54:17,430 --> 00:54:22,560
If you want to hit 60 hertz you
need to be using CA display link.

723
00:54:22,560 --> 00:54:31,770
Okay, we're going to be back after the break,
so we'll start to get very technical with you.

724
00:54:31,770 --> 00:54:36,360
We're going to talk to you about the
OpenGL ES 2.0 rendering pipeline.

725
00:54:36,360 --> 00:54:42,080
And go into the shaders and how we really
started off at a very slow frame rate.

726
00:54:42,080 --> 00:54:46,540
We're going to talk about that per pixel lighting
go over line by line how we actually did that.

727
00:54:46,540 --> 00:54:51,040
We're going to get with our artist and
have him show us the assets in Quest,

728
00:54:51,040 --> 00:54:54,700
and how those broke down and how they became optimized.

729
00:54:54,700 --> 00:55:00,480
And finally we're going to talk to you about the
dozen things that we really learned from doing Quest

730
00:55:00,480 --> 00:55:05,640
that we really think will make a tremendous
difference in your own games and your own game writing.

