1
00:00:06,050 --> 00:00:07,090
>> Brady Eidson: Good afternoon everyone.

2
00:00:07,090 --> 00:00:12,080
Welcome to session 512, "Using HTML5 Offline Storage."

3
00:00:12,080 --> 00:00:13,280
My name is Brady Eidson.

4
00:00:13,280 --> 00:00:16,120
I'm an Engineer on the Safari and WebKit team.

5
00:00:16,120 --> 00:00:20,660
Today we're going to be talking
about data, all sorts of data,

6
00:00:20,660 --> 00:00:25,690
data that you as web application
developers are all very familiar with.

7
00:00:25,690 --> 00:00:34,800
Things like HTML, JavaScript, and CSS that make up your
web applications, also the media, a lot of the images,

8
00:00:34,800 --> 00:00:41,120
and other UI and artworks that make our
applications feel very modern and very native.

9
00:00:41,120 --> 00:00:48,190
And these are types of data that you developed
and then served your users from a server.

10
00:00:48,190 --> 00:00:52,310
And there's something that you
deliver that make up your application.

11
00:00:52,310 --> 00:00:56,130
Then there's other type of data that
your application creates and relies on.

12
00:00:56,130 --> 00:01:00,900
Things like application state,
windows sizes, window positions.

13
00:01:00,900 --> 00:01:05,260
So when your user returns to the application,
they might want things to look the same.

14
00:01:05,260 --> 00:01:11,480
Then speaking of your users, they have preferences, all
the little knobs and buttons that you give them to tweak

15
00:01:11,480 --> 00:01:13,810
and change the way they use their application.

16
00:01:13,810 --> 00:01:16,360
You know a few other types of things about your users.

17
00:01:16,360 --> 00:01:22,100
You know they're locale, they're
accessibility type settings, some account info,

18
00:01:22,100 --> 00:01:26,210
an e-mail web app for example might have
some e-mail messages an address book.

19
00:01:26,210 --> 00:01:30,400
It might have some sort of social bookmarking
thing and it's getting a little messy.

20
00:01:30,400 --> 00:01:34,430
But it gets a lot messier when we
think about the all the documents

21
00:01:34,430 --> 00:01:38,000
and stuff that your users create
using your web applications.

22
00:01:38,000 --> 00:01:42,680
And it's just getting crazy how
creative a web app can be these days.

23
00:01:42,680 --> 00:01:47,050
It feels a little bit like the Wild West out
there because you have to wrangle all these data

24
00:01:47,050 --> 00:01:50,220
around without some really good supporting technologies.

25
00:01:50,220 --> 00:01:55,890
You've used things like cookies which were designed for
talking to a server but you've crammed a little nuggets

26
00:01:55,890 --> 00:01:58,470
of data into them and it's kind of worked.

27
00:01:58,470 --> 00:02:00,570
And a lot of web developers have turned to plug-ins

28
00:02:00,570 --> 00:02:04,230
to make things work a little bit and
that has its own host of problems.

29
00:02:04,230 --> 00:02:07,670
And this is all keeping the data
local to the browser of course.

30
00:02:07,670 --> 00:02:13,510
And then there's the ultimate solution, package up the data,
shipped it over the cloud, keep it on a server somewhere.

31
00:02:13,510 --> 00:02:16,750
And this makes sense a lot of the time
when you want to sync data to the server.

32
00:02:16,750 --> 00:02:20,710
But sometimes it's just way overblown, overkill.

33
00:02:20,710 --> 00:02:28,200
So we're going to give you a lasso to give you a new
tool to wrangle all this data about in much better ways.

34
00:02:28,200 --> 00:02:33,720
And we're going to do this using open standards
developed by well-respected standard buddies.

35
00:02:33,720 --> 00:02:36,610
You might have heard of this buzz word lately, HTML5.

36
00:02:36,610 --> 00:02:44,550
It's a technology of standards that Apple really believes
in that makes web apps do some pretty cool things.

37
00:02:44,550 --> 00:02:50,490
And one of the great things about HTML5 is every major
browser has announced some amount of support for it

38
00:02:50,490 --> 00:02:55,310
and all these offline data technologies
we're about to talk about are included there.

39
00:02:55,310 --> 00:02:59,350
So Safari specifically, on Mac, on Windows,

40
00:02:59,350 --> 00:03:04,220
and on iOS devices supports everything
we're going to talk about here today.

41
00:03:04,220 --> 00:03:10,340
In addition, to mobile Safari on iOS
devices supporting these technologies,

42
00:03:10,340 --> 00:03:15,420
UIWebView native applications also
support all of these things in iOS 4.

43
00:03:15,420 --> 00:03:22,350
So this is Safari on all sorts of
types of devices, on Macs, on PCs,

44
00:03:22,350 --> 00:03:26,560
and of course the new mobile hotness that runs iOS 4.

45
00:03:26,560 --> 00:03:32,650
And there's something very interesting about
some of these devices, the laptops, the iPads,

46
00:03:32,650 --> 00:03:36,320
iPod touches that they're very portable devices.

47
00:03:36,320 --> 00:03:40,850
Users take them all over the place but they
don't' always have a network connection.

48
00:03:40,850 --> 00:03:44,530
They're not always tethered to the cloud.

49
00:03:44,530 --> 00:03:50,750
So, as web application developers this kind of presents
a problem and some of you might be asking yourself, "OK,

50
00:03:50,750 --> 00:03:52,700
well, so what can I do without the cloud?"

51
00:03:52,700 --> 00:03:55,440
And that's what we're going to learn today.

52
00:03:55,440 --> 00:04:01,560
Today we're going to solve three great-- three
problems that have been plaguing us for a long time.

53
00:04:01,560 --> 00:04:07,430
First, we're going to make our application itself
accessible offline, packaging up all the resources that make

54
00:04:07,430 --> 00:04:13,610
up the application that you author and served to
your users and cut the cloud out of the picture.

55
00:04:13,610 --> 00:04:18,720
Then we're going to talk about a
great way to persist simple data.

56
00:04:18,720 --> 00:04:23,800
This is something that a lot of you have used cookies and
plug-ins for a little nuggets of data and we're just going

57
00:04:23,800 --> 00:04:27,240
to build that right into the browser in a very reliable way.

58
00:04:27,240 --> 00:04:33,780
And then for the more complex data, we're
going to discuss the full on data center

59
00:04:33,780 --> 00:04:37,190
in the browser and we'll get to that at the end.

60
00:04:37,190 --> 00:04:38,380
So first let's start at the beginning.

61
00:04:38,380 --> 00:04:39,860
We have an application.

62
00:04:39,860 --> 00:04:42,430
We need to make it accessible offline.

63
00:04:42,430 --> 00:04:49,910
There's a fantastic new standard called the
HTML5 application cache and it does that for us.

64
00:04:49,910 --> 00:04:52,760
And it makes the entire application accessible offline.

65
00:04:52,760 --> 00:04:57,860
All the HTML and JavaScript, CSS, all
of the media that makes up the UI.

66
00:04:57,860 --> 00:05:02,740
And even though cache is in the name of the
spec don't conflate it with the HTTP cache.

67
00:05:02,740 --> 00:05:08,280
This is a real persistent, reliable
offline store of your application.

68
00:05:08,280 --> 00:05:13,340
The browser will remember everything
and serve things locally

69
00:05:13,340 --> 00:05:19,130
and it won't ever forget it until someone tells it to.

70
00:05:19,130 --> 00:05:23,110
The spec also provides for automated
updates of your application.

71
00:05:23,110 --> 00:05:25,780
You author the content, put it up on a server,

72
00:05:25,780 --> 00:05:30,470
and then the browser handles getting new
versions of that application to your users.

73
00:05:30,470 --> 00:05:37,870
All you have to do is specify a
resource manifest to make this work.

74
00:05:37,870 --> 00:05:42,080
A resource manifest is just a text
file with the list of URLs.

75
00:05:42,080 --> 00:05:49,010
Every URL of every resource in your application has
to somehow be accounted for in the manifest file.

76
00:05:49,010 --> 00:05:54,010
And we'll go into a little more
detail in that in a little bit.

77
00:05:54,010 --> 00:05:56,880
And then there's a little new non-mandatory API.

78
00:05:56,880 --> 00:06:01,120
You can completely ignore if you choose but
there're some events and things you can listen to,

79
00:06:01,120 --> 00:06:07,940
to help you developed your application cache website and
perhaps provide a richer user experience if you so choose.

80
00:06:07,940 --> 00:06:13,600
So there're two fabulous advantages
of using the application cache.

81
00:06:13,600 --> 00:06:20,380
One, I said a couple of times, I'm going to say it again,
your app works offline in a persistent reliable way

82
00:06:20,380 --> 00:06:24,870
but something is not quite so obvious when you're using the
application cache and the browsers remembers every resource

83
00:06:24,870 --> 00:06:31,580
that makes up your app, is that of course
your app still works online but much faster.

84
00:06:31,580 --> 00:06:37,950
When the browser can completely ignore the network and
just served local copies of every resource that makes

85
00:06:37,950 --> 00:06:40,890
up your application, things are blazing fast.

86
00:06:40,890 --> 00:06:42,980
It feels a lot more native.

87
00:06:42,980 --> 00:06:45,670
So how does it work?

88
00:06:45,670 --> 00:06:47,460
We're using the application cache.

89
00:06:47,460 --> 00:06:50,720
How is our web application loaded in the browser?

90
00:06:50,720 --> 00:06:56,690
So, your user visits the URL for your web application
and Safari sees that you've specified a manifest file.

91
00:06:56,690 --> 00:07:00,790
It already has a copy of all the resources and the manifest.

92
00:07:00,790 --> 00:07:06,460
And it just loads the local copies of the
resources completely ignores the server.

93
00:07:06,460 --> 00:07:14,140
So your user is already using your application and
Safari now in the background without any action from you

94
00:07:14,140 --> 00:07:17,980
or your user change the server says,
"Hey, is there any a new manifest file?

95
00:07:17,980 --> 00:07:20,290
Is there a new update for this application?"

96
00:07:20,290 --> 00:07:26,840
And then they'll compare any new manifest the
server passes back to the manifest that has already.

97
00:07:26,840 --> 00:07:35,080
And if they are different by one byte, they must be
different files, each individual resource is revalidated,

98
00:07:35,080 --> 00:07:38,090
all the HTML, JavaScript, CSS media et cetera.

99
00:07:38,090 --> 00:07:41,350
And then the next time your user visits the URL

100
00:07:41,350 --> 00:07:48,280
for your web application they will be using
the new version of it and that's all automatic.

101
00:07:48,280 --> 00:07:53,910
So to show you a demo of how we put a
manifest in and make something work offline,

102
00:07:53,910 --> 00:08:00,470
I'm going to show you a really cool HTM5
game that a developer out there has made

103
00:08:03,820 --> 00:08:06,990
and it really is one of the greatest games of our time.

104
00:08:06,990 --> 00:08:07,710
It's pretty cool.

105
00:08:07,710 --> 00:08:10,270
I'm sure a lot of you will be very familiar with it.

106
00:08:10,270 --> 00:08:12,220
And I'm a big fan T-Spin.

107
00:08:12,220 --> 00:08:14,000
I'm sure you all heard of T-Spin.

108
00:08:14,000 --> 00:08:16,600
Of course this is T-Spin.

109
00:08:16,600 --> 00:08:19,670
This is a very professional reaching app.

110
00:08:19,670 --> 00:08:27,350
It really speaks to the real T-Spin fan because it fetches
that when the next televised professional T-Spin match is.

111
00:08:27,350 --> 00:08:32,410
It fetches that from a server of T-Spin
resources and it lets me know while I'm playing.

112
00:08:32,410 --> 00:08:33,360
So this is really cool.

113
00:08:33,360 --> 00:08:36,660
This is all pure native web technology.

114
00:08:36,660 --> 00:08:42,240
HTML5 standards and it's the same
T-Spin you all know and love.

115
00:08:42,240 --> 00:08:48,310
But there's a problem with this app and I'm viewing
this from a server and all the time like I take my iPad

116
00:08:48,310 --> 00:08:54,470
to the park for example and there's no Wi-Fi there
and I just want to play some T-Spin out in nature

117
00:08:54,470 --> 00:08:59,120
and have the squirrels watch me play and I can't.

118
00:08:59,120 --> 00:09:01,770
So the application cache is designed to solve this problem.

119
00:09:01,770 --> 00:09:08,160
So let's go ahead and see if we can make this
better and work offline using the application cache.

120
00:09:08,160 --> 00:09:11,430
So I've already gone ahead and made
a manifest file for T-Spin here.

121
00:09:11,430 --> 00:09:16,620
And this is the list of all the
URLs that make up the application.

122
00:09:16,620 --> 00:09:23,670
The manifest file has to start with the phrase cache
manifest that both the spec and the browser vendors

123
00:09:23,670 --> 00:09:27,730
who participate in writing the spec want to make
it very strict and explicit that you are opting

124
00:09:27,730 --> 00:09:33,020
in to this application cache manifest because
it's changing the loading model of web pages.

125
00:09:33,020 --> 00:09:37,360
So one of the explicit things you have to do is
start off your manifest file with cache manifest.

126
00:09:37,360 --> 00:09:42,350
The other thing which I'm not going to show you, I've
already done on this server, is reconfigure my web server

127
00:09:42,350 --> 00:09:48,300
to serve the manifest file with
the text/cache-manifest mime type.

128
00:09:48,300 --> 00:09:51,270
It's a specific mime type that will be in the slides later.

129
00:09:51,270 --> 00:09:57,330
And those two things together tell the web browser, "Hey,
this is a savvy web developer using this cool new stuff

130
00:09:57,330 --> 00:09:59,440
and I'm going to start showing their app offline."

131
00:09:59,440 --> 00:10:06,080
So these are all the resources that are critical to make
T-Spin work offline, a lot of JavaScript, a lot of images.

132
00:10:06,080 --> 00:10:11,660
And then down here, we have a section
called the network section.

133
00:10:11,660 --> 00:10:18,560
Now, this is interesting because sometimes
resources don't make sense to be cached offline.

134
00:10:18,560 --> 00:10:23,130
This is the thing like the live feed that tells
me when the next televised match of T-Spin is.

135
00:10:23,130 --> 00:10:25,770
It only ever makes sense to be
getting that from the network.

136
00:10:25,770 --> 00:10:31,010
So to allow the browser to fetch that URL from
the network, I need to list it in the manifest.

137
00:10:31,010 --> 00:10:32,940
So I've gone ahead and done that here.

138
00:10:32,940 --> 00:10:39,980
So then there's on one more change we have to
do to make application cache work with T-Spin.

139
00:10:39,980 --> 00:10:48,140
We have to edit our main HTML file and we
have to go ahead and specify the manifest.

140
00:10:48,140 --> 00:10:51,850
And now the next time the browser fetches this
HTML, it's going to see there's a manifest.

141
00:10:51,850 --> 00:10:57,860
It's going to fetch the manifest file and start
turning on the application cache for the application.

142
00:10:57,860 --> 00:10:59,100
So now we've done this.

143
00:10:59,100 --> 00:11:03,910
I want to go ahead and use my iPad in the
park and have the squirrels watch me play.

144
00:11:03,910 --> 00:11:05,510
So I'm going to go ahead and demo this on the iPad.

145
00:11:05,510 --> 00:11:08,050
Let me go ahead and load Safari here.

146
00:11:08,050 --> 00:11:15,930
I'm going to ahead and visit T-Spin.

147
00:11:15,930 --> 00:11:17,610
So this is a normal situation.

148
00:11:17,610 --> 00:11:19,340
Wi-Fi is a little fuzzy around here.

149
00:11:19,340 --> 00:11:23,410
It's having to download all of these resources
like any web application normally does.

150
00:11:23,410 --> 00:11:25,970
It's taking a little longer than it was earlier.

151
00:11:25,970 --> 00:11:30,640
OK, here we go.

152
00:11:30,640 --> 00:11:38,260
So this web-- this developer who made this awesome game gave
us an iPad formatted control pad here so that's pretty cool.

153
00:11:38,260 --> 00:11:44,760
This is still taking a lot longer than we planned but
it's still progressing and in about 5 seconds I'm going

154
00:11:44,760 --> 00:11:53,290
to fall back and show this to you on
desktop Safari, four, three, two, one, OK.

155
00:11:53,290 --> 00:11:55,710
Let's just go ahead and show this to you on the desktop.

156
00:11:55,710 --> 00:12:03,890
OK, so I'm going to go ahead and bring
up the T-Spin app here in Safari.

157
00:12:03,890 --> 00:12:07,210
So remember, I've enabled the application cache here.

158
00:12:07,210 --> 00:12:10,910
So eventually, I'm going to prove
to you that this does work offline.

159
00:12:10,910 --> 00:12:18,220
But everything works exactly the same as
it use to before and it's pretty cool.

160
00:12:18,220 --> 00:12:20,930
We're loading the next match.

161
00:12:20,930 --> 00:12:23,660
And actually, that's not what I was expecting to happen.

162
00:12:23,660 --> 00:12:31,610
I think I see here the iPad has finished
loading so I'm going to back to that.

163
00:12:31,610 --> 00:12:31,850
OK.

164
00:12:31,850 --> 00:12:34,430
Meanfest, that's exactly what is happening.

165
00:12:34,430 --> 00:12:36,660
Thanks for calling that up.

166
00:12:36,660 --> 00:12:43,570
And that's why we usually drag and drop code instead
of typing it live because that type of thing happens.

167
00:12:44,730 --> 00:12:47,810
OK. So I'm just going to stick with the desktop here.

168
00:12:47,810 --> 00:12:52,280
So let's go ahead and refresh and see work on the desktop.

169
00:12:52,280 --> 00:12:57,720
This is a little debugging aid I've patched in to
those events I described that are non-mandatory.

170
00:12:57,720 --> 00:12:58,380
They're optional.

171
00:12:58,380 --> 00:13:03,970
And it helps me determine the application--
application cache is actually working.

172
00:13:03,970 --> 00:13:06,870
So I'm going to go ahead and start playing it.

173
00:13:06,870 --> 00:13:13,310
And it's working pretty great,
except something weird happened.

174
00:13:13,310 --> 00:13:19,210
It couldn't find the schedule for the next televised match.

175
00:13:19,210 --> 00:13:23,850
So I bet there's probably a problem with the
manifest file that caused that to happened.

176
00:13:23,850 --> 00:13:27,700
So I'm going to ahead and quit Safari
and take a look at my manifest.

177
00:13:27,700 --> 00:13:31,410
And down here, so this was the URL for that live feed.

178
00:13:31,410 --> 00:13:35,520
As I've mentioned a couple of times, every
URL that our application accesses have

179
00:13:35,520 --> 00:13:37,590
to be accounted for in the manifest file somehow.

180
00:13:37,590 --> 00:13:42,280
And this includes the URLs that come from
the network that we aren't caching offline.

181
00:13:42,280 --> 00:13:44,740
I probably have a typo in here.

182
00:13:44,740 --> 00:13:45,980
In fact, I'm almost sure I do.

183
00:13:45,980 --> 00:13:51,050
So I'm going to go ahead and do something you can only do
in the network section and just replace it with an asterisk.

184
00:13:51,050 --> 00:13:56,530
This is telling the application cache mechanism,
"Hey, this application uses a lot of online content.

185
00:13:56,530 --> 00:13:58,760
I just want to allow it to access the web at will."

186
00:13:58,760 --> 00:14:06,210
So I'm going to go ahead and save my manifest file
and go back to Safari and load my game, there again.

187
00:14:06,210 --> 00:14:10,490
So right now, I'm viewing version 1 of the application.

188
00:14:10,490 --> 00:14:13,640
The version I showed you not 20 seconds ago.

189
00:14:13,640 --> 00:14:20,830
But Safari in the background has gone ahead and
refetched the manifest and revalidated all the resources.

190
00:14:20,830 --> 00:14:27,830
So actually, you can see that there's a missing
image here because that was another part

191
00:14:27,830 --> 00:14:31,720
that I forgot to specify, resources, refresh.

192
00:14:31,720 --> 00:14:35,860
Yeah, I think that it was.

193
00:14:35,860 --> 00:14:38,740
So let's quit Safari one more time.

194
00:14:38,740 --> 00:14:41,740
Watch Safari one more time, OK.

195
00:14:41,740 --> 00:14:45,210
So now we're on version 3 of the application.

196
00:14:45,210 --> 00:14:49,290
My script only called for two versions and there we go.

197
00:14:49,290 --> 00:14:56,590
It has refetched the manifest, updated itself
said, "OK, that little refresh spinning.

198
00:14:56,590 --> 00:14:59,540
I can go ahead and cache that so now it's the displayable."

199
00:14:59,540 --> 00:15:06,570
And now that it's allowed any fetch any URL from the network
it's gone ahead and got my next televised match up there.

200
00:15:06,570 --> 00:15:11,740
So now, this is locally cache in the
browser and it will work offline.

201
00:15:11,740 --> 00:15:19,900
So to prove that to you here on the desktop,
I'm going to-- just to prove this to you.

202
00:15:19,900 --> 00:15:21,060
This is on the different display.

203
00:15:21,060 --> 00:15:24,580
I'm going to go ahead and turn off web sharing.

204
00:15:24,580 --> 00:15:28,370
So the web server is now completely disabled.

205
00:15:28,370 --> 00:15:34,360
I'm going to go ahead and go back to
Safari and load it and it works just fined.

206
00:15:34,360 --> 00:15:36,640
You can see my little red debug indicator here.

207
00:15:36,640 --> 00:15:42,710
It says, "Hey, I tried to fine the manifest file but
I can't because the web server isn't there anymore."

208
00:15:42,710 --> 00:15:48,920
So this actually would be working on the
iPad just great with the Wi-Fi disabled.

209
00:15:48,920 --> 00:15:54,480
It would work out in the park with the squirrels
watching me play and that would be pretty cool.

210
00:15:54,480 --> 00:15:59,440
So, I can play T-Spin, one of the most
exciting games of our time anywhere.

211
00:15:59,440 --> 00:16:06,320
[ Applause ]

212
00:16:06,320 --> 00:16:10,150
So the demo is a little rocky, but we did
cover all the points I wanted to cover.

213
00:16:10,150 --> 00:16:12,490
One of which I only mentioned, didn't show you.

214
00:16:12,490 --> 00:16:18,710
You do have to change your server to specify,
to serve the file with the correct mime type.

215
00:16:18,710 --> 00:16:21,960
Then after you have text file, your list of
your URLs you have to go ahead and specify

216
00:16:21,960 --> 00:16:25,950
that in your HTML using the manifest
attribute on the HTML tag.

217
00:16:25,950 --> 00:16:31,950
Now we did proved to you that resources
not in the manifest due fail to load.

218
00:16:31,950 --> 00:16:37,420
That little progress spinning down there in the corner
and the live feed of the next televised T-Spin match

219
00:16:37,420 --> 00:16:39,970
so I can watch the professionals and really tune my game.

220
00:16:39,970 --> 00:16:45,130
Now when I made a change in the manifest file on
the server side and then refresh that in Safari

221
00:16:45,130 --> 00:16:48,470
that is what triggers an update of the application.

222
00:16:48,470 --> 00:16:54,110
So even if you change a resource
like an HTML or JavaScript file,

223
00:16:54,110 --> 00:16:57,800
you do have to go to the manifest file
and change something to force an update.

224
00:16:57,800 --> 00:16:59,680
You can use a comment to do that.

225
00:16:59,680 --> 00:17:03,250
And that update process, it is automatic.

226
00:17:03,250 --> 00:17:04,000
It's in the background.

227
00:17:04,000 --> 00:17:07,810
Safari does it just by the mere
act of the user visiting the URL.

228
00:17:07,810 --> 00:17:09,070
You don't need to worry about it.

229
00:17:09,070 --> 00:17:11,280
Your user doesn't need to worry about it.

230
00:17:11,280 --> 00:17:13,210
It usually just works.

231
00:17:13,210 --> 00:17:20,060
So that's the application cache, a way
to store the entire application offline.

232
00:17:20,060 --> 00:17:24,250
Now some of you web developers are murmuring,
I can hear some murmurs saying, "Well,

233
00:17:24,250 --> 00:17:28,920
that's great now my app works offline
but what about all the data it creates?

234
00:17:28,920 --> 00:17:30,340
All that data we discuss earlier?"

235
00:17:30,340 --> 00:17:34,060
There're a couple of solutions for that.

236
00:17:34,060 --> 00:17:37,930
First, we'll talk about how to persist
simple data, the little nuggets of data

237
00:17:37,930 --> 00:17:42,020
that many web developers are used
to using cookies and plug-ins for.

238
00:17:42,020 --> 00:17:51,620
And there's a great standard in HTML5 web storage
standard which is designed to do just that.

239
00:17:51,620 --> 00:17:59,080
Now on the web storage spec describes a
standard interface for storing items of data.

240
00:17:59,080 --> 00:18:03,130
And these items of data are simply key/value pairs of data.

241
00:18:03,130 --> 00:18:08,200
If you're familiar with cookies which is a key
string and a value string, exact same type of thing.

242
00:18:08,200 --> 00:18:14,140
If you're familiar with Flash's local storage,
exact same type of thing, key/value pairs of data.

243
00:18:14,140 --> 00:18:17,990
It has origin-based security.

244
00:18:17,990 --> 00:18:20,140
This is the standard security model in the web.

245
00:18:20,140 --> 00:18:21,320
It has been for some time.

246
00:18:21,320 --> 00:18:24,280
And recent HTML5 standards have really solidified it.

247
00:18:24,280 --> 00:18:31,200
This means that a page served from a domain you control
has access to its own set of data and only pages served

248
00:18:31,200 --> 00:18:35,870
from the domain you control have access to that
set of data and pages from other domains do not.

249
00:18:35,870 --> 00:18:39,450
So you and your apps own your data.

250
00:18:39,450 --> 00:18:44,200
Now, there's various implementation of this interface.

251
00:18:44,200 --> 00:18:49,870
This simple interface which I'll show you in a moment,
if you already know how to program in JavaScript,

252
00:18:49,870 --> 00:18:52,140
you already know how to use this interface.

253
00:18:52,140 --> 00:18:53,720
There're various implementations of it.

254
00:18:53,720 --> 00:19:00,010
Concrete objects that have the same programming
model but give you a few different abilities.

255
00:19:00,010 --> 00:19:04,000
What implementations am I talking about?

256
00:19:04,000 --> 00:19:07,050
The spec itself describes one called SessionStorage.

257
00:19:07,050 --> 00:19:13,780
SessionStorage allows different browser tabs or windows
to keep completely separate sessions from each other.

258
00:19:13,780 --> 00:19:19,730
So they each have a data store that only
that browser tab or window can get to.

259
00:19:19,730 --> 00:19:23,470
If some of you who've tried to use cookies
for session management and have noticed

260
00:19:23,470 --> 00:19:27,950
that your application can't be used twice and
at the same time, that's the type of problem

261
00:19:27,950 --> 00:19:31,890
that this is intended to resolve-- to solve.

262
00:19:31,890 --> 00:19:35,500
But the much more immediate one is the LocalStorage.

263
00:19:35,500 --> 00:19:41,760
LocalStorage is a global object that all browser tabs
and windows can get at and it's for persistent data.

264
00:19:41,760 --> 00:19:48,910
If you set an item of data on the LocalStorage object
it is saved to the user's hard drive within the browser

265
00:19:48,910 --> 00:19:54,820
and it will stay there persistently and reliably and it
will be there, a day, a week, a month a year from now.

266
00:19:54,820 --> 00:20:01,080
So those are both in the spec. If some of you
started looking at developing Safari extensions,

267
00:20:01,080 --> 00:20:07,750
the Settings and SecureSettings objects in Safari
extensions implement the exact same interface.

268
00:20:07,750 --> 00:20:13,060
So it really is just a simple JavaScript
programming model, the exact same interface

269
00:20:13,060 --> 00:20:16,130
that works for a lot of different situations.

270
00:20:16,130 --> 00:20:18,260
So exactly how does it work?

271
00:20:18,260 --> 00:20:24,760
I think a common thing is probably your user has a session
of using your application and then they're going to quit.

272
00:20:24,760 --> 00:20:28,460
So we need to save some information about
their session so we can restore it later.

273
00:20:28,460 --> 00:20:34,360
So we can do that with LocalStorage and SessionStorage.

274
00:20:34,360 --> 00:20:39,240
Here for example, we're remembering the
window location, the coordinate on the screen

275
00:20:39,240 --> 00:20:41,200
where the window was-- when the user quit.

276
00:20:41,200 --> 00:20:46,470
The way we remember that is by setting the
windowLocation property on the LocalStorage object.

277
00:20:46,470 --> 00:20:47,070
It's that simple.

278
00:20:47,070 --> 00:20:48,270
This is JavaScript programming.

279
00:20:48,270 --> 00:20:54,330
You're setting a property on an object except the
LocalStorage object has a very unique semantic about it

280
00:20:54,330 --> 00:20:58,320
which means the properties persist to
disk and they're going to be there later.

281
00:20:58,320 --> 00:21:04,170
So this is something that a user could quit the browser
and come back a week later and fire up your web app again

282
00:21:04,170 --> 00:21:08,270
and the window location property will
be there on the LocalStorage object.

283
00:21:08,270 --> 00:21:12,090
So that works for properties, you know the name
of beforehand with the dot property notation.

284
00:21:12,090 --> 00:21:19,970
You can use the array, bracket property, access notation
in JavaScript if you want for more variable properties.

285
00:21:19,970 --> 00:21:24,300
These are just JavaScript objects that are
like collections you can iterate over them.

286
00:21:24,300 --> 00:21:28,350
So for example, I want to iterate
over all of the data items stored

287
00:21:28,350 --> 00:21:31,000
in the sessionStorage because we're saving the session out.

288
00:21:31,000 --> 00:21:34,660
So I can just go forth and in sessionStorage.

289
00:21:34,660 --> 00:21:40,810
Then for each item, I'm just going to go ahead and move
it from sessionStorage to localStorage to save it off.

290
00:21:40,810 --> 00:21:47,510
And there's another API, an actual method call on these
storage objects that you can use called setItem to do that.

291
00:21:47,510 --> 00:21:53,520
And course, there's a removeItem for removing
individual items from a storage object

292
00:21:53,520 --> 00:21:56,710
and you can just wipe the whole
thing out at once if you chose.

293
00:21:56,710 --> 00:22:04,600
So to show you a demo of how easy it is to
spice up an already existing app using a little

294
00:22:04,600 --> 00:22:09,900
of this LocalStorage magic, I'd like to invite
one of the finest T-Spin players I know,

295
00:22:09,900 --> 00:22:15,440
up on stage my fellow colleague, Andy Estes,
up on the stage to show you how that works.

296
00:22:15,440 --> 00:22:19,970
[ Applause ]

297
00:22:19,970 --> 00:22:26,230
>>Andy Estes: So, Brady showed us this really
great demo of how we can take our web application

298
00:22:26,230 --> 00:22:32,410
to make it available offline using
the application cache and, you know,

299
00:22:32,410 --> 00:22:34,840
the example he use was this really fun game called T-Spin.

300
00:22:34,840 --> 00:22:36,570
I've been really enjoying playing this.

301
00:22:36,570 --> 00:22:42,670
A childhood favorite game of mine and, you know, now that
it's implemented using these great HTML5 web technologies,

302
00:22:42,670 --> 00:22:45,500
I've really been having a lot of fun playing it.

303
00:22:45,500 --> 00:22:49,370
And to be honest, you know, things have been
getting pretty competitive in the office.

304
00:22:49,370 --> 00:22:55,170
Brady and I are really always kind of jousting
to see who can get top score in this game.

305
00:22:55,170 --> 00:23:00,910
So, you know, one of the nice things that the
developer provided for us here is tracking the score.

306
00:23:00,910 --> 00:23:07,640
So you can see that as I played through
here, right over here it's updating my score.

307
00:23:07,640 --> 00:23:11,740
And, you know, even better, it's tracking my high score.

308
00:23:11,740 --> 00:23:17,320
So, you know, Brady and I can play separate
matches and we can see who gets the highest score.

309
00:23:17,320 --> 00:23:21,680
Now the really nice thing about this
high score is that it's persistent.

310
00:23:21,680 --> 00:23:29,000
So if I were to go and, you know, quit out
Safari and then decide to come back in later,

311
00:23:29,000 --> 00:23:36,250
I can simply go back to the game and
sure enough my high score is remembered.

312
00:23:36,250 --> 00:23:39,250
So this is really interesting, let's take a look at the code

313
00:23:39,250 --> 00:23:44,350
and see how the developer chose to
implement this high score tracking.

314
00:23:44,350 --> 00:23:47,230
So I'm going to leave Safari and go over to Xcode.

315
00:23:47,230 --> 00:23:55,540
And I happened to have access to the
JavaScript of this game of course.

316
00:23:55,540 --> 00:24:01,580
So there is an object in this game called
"High Score" and this object has a constructor.

317
00:24:01,580 --> 00:24:06,670
So when the game starts up this constructor is called
and it's initializing a property called "High Score"

318
00:24:06,670 --> 00:24:09,610
and it's calling its helper function
called retrieveHighScore.

319
00:24:09,610 --> 00:24:13,990
Now presumably, retrieveHighScore is reaching
out into some sort of persistent data store,

320
00:24:13,990 --> 00:24:17,100
where the browser can access and
seeing if a high score is there.

321
00:24:17,100 --> 00:24:20,850
And if so it's pulling it in and
setting this property to that value.

322
00:24:20,850 --> 00:24:26,960
And if for whatever reason we get a null
we'll just initialize high score to zero.

323
00:24:26,960 --> 00:24:35,200
So, then as we go and play the game,
we have additional properties or--

324
00:24:35,200 --> 00:24:39,550
I'm sorry, we have some additional methods on this
object that, you know, each time the score is updated,

325
00:24:39,550 --> 00:24:43,600
what its going to do is it's going to check to
see if that score is higher than the high score

326
00:24:43,600 --> 00:24:50,210
and if it is it will first, you know, set the property
to that new value and then also call storeHighScore.

327
00:24:50,210 --> 00:24:53,540
So storeHighScore is another helper
function like retrieveHighScore.

328
00:24:53,540 --> 00:24:58,330
It's going to go and somehow save this
value off into persistent storage.

329
00:24:58,330 --> 00:25:04,420
So why don't we go and see what
retrieve and storeHighScore are doing.

330
00:25:04,420 --> 00:25:06,870
Let's switch over another file here.

331
00:25:06,870 --> 00:25:09,830
And we see that retrieveHighScore is
calling a function called readCookie,

332
00:25:09,830 --> 00:25:12,390
and storeHighScore is calling a
function called createCookies.

333
00:25:12,390 --> 00:25:14,840
So, ah-ha, we're using cookies.

334
00:25:14,840 --> 00:25:17,340
And Brady covered cookies a little bit.

335
00:25:17,340 --> 00:25:18,620
You know, cookies obviously work.

336
00:25:18,620 --> 00:25:21,420
This game works fine with cookies
but there're a couple disadvantages.

337
00:25:21,420 --> 00:25:25,220
And you know, the first disadvantage is
that it's really kind of the wrong idiom.

338
00:25:25,220 --> 00:25:32,470
Cookies are designed to transmit data between user agents
and servers but we just saw with the application cache

339
00:25:32,470 --> 00:25:36,500
that this application works just fine
offline without any access to a server.

340
00:25:36,500 --> 00:25:40,280
So, you know, a cookie isn't really
appropriate in this case.

341
00:25:40,280 --> 00:25:43,640
And secondly, you know, if we dig in to
the implementation of these two functions,

342
00:25:43,640 --> 00:25:47,300
we'll see that they're actually pretty complicated.

343
00:25:47,300 --> 00:25:53,800
You know, I have to build this particularly
formatted string and set it equal to document.cookie.

344
00:25:53,800 --> 00:25:55,900
It has to have the key/value pair.

345
00:25:55,900 --> 00:25:59,070
It needs to have an expiration date and
a path to send it back to the server.

346
00:25:59,070 --> 00:26:03,040
You know, I care about the key/value pair,
but I don't really care when it expires

347
00:26:03,040 --> 00:26:05,930
or what path that sent to him on the server.

348
00:26:05,930 --> 00:26:09,600
But I have to provide these details,
otherwise, things just wont' work.

349
00:26:09,600 --> 00:26:13,950
And you know, if we look in the read
cookie, things are equally complicated.

350
00:26:13,950 --> 00:26:17,610
You know, I get the string back from document.cookie
that has all the cookies for this domain, you know,

351
00:26:17,610 --> 00:26:20,400
I have to tokenize it based on a semi-colon.

352
00:26:20,400 --> 00:26:23,540
I have to loop through and try to find my key.

353
00:26:23,540 --> 00:26:26,690
I have to worry about if there's
any white space and trim that out.

354
00:26:26,690 --> 00:26:30,990
And then finally, and I'll return the substring
that represents the value for that key.

355
00:26:30,990 --> 00:26:32,190
So this is really complicated.

356
00:26:32,190 --> 00:26:33,920
And what I'm trying to do is something really simple.

357
00:26:33,920 --> 00:26:38,620
I'm trying to just persist and
retrieve a simple key/value pair.

358
00:26:38,620 --> 00:26:44,570
Luckily, LocalStorage provides a really
simple way for us to do this effectively.

359
00:26:44,570 --> 00:26:49,300
So, let's look at what these routines
would like with LocalStorage.

360
00:26:49,300 --> 00:26:51,160
So I'll delete this version.

361
00:26:51,160 --> 00:26:58,140
And if I can find where my second screen is
I'll bring over the LocalStorage version.

362
00:26:58,140 --> 00:26:59,980
And, you know, wow, this is a lot simpler.

363
00:26:59,980 --> 00:27:02,400
It's the same two functions, retrieveHighScore
and storeHighScore.

364
00:27:02,400 --> 00:27:03,520
But they're one line functions.

365
00:27:03,520 --> 00:27:07,920
I went from maybe 40 lines of JavaScript
down to 2 one line functions.

366
00:27:07,920 --> 00:27:12,700
As Brady mentioned, you know, I'm just using
the JavaScript's programming techniques that you

367
00:27:12,700 --> 00:27:14,630
as developers are all quite familiar with.

368
00:27:14,630 --> 00:27:16,580
I have a LocalStorage object.

369
00:27:16,580 --> 00:27:20,940
I'm reading a property called High Score of that object.

370
00:27:20,940 --> 00:27:23,300
You can either use the dot property notation.

371
00:27:23,300 --> 00:27:26,270
You can use the array access notation like I did down here.

372
00:27:26,270 --> 00:27:29,450
You can use them interchangeably and
either one of them will just work.

373
00:27:29,450 --> 00:27:33,840
So we can say that this, you know-- this kind
of code matches the complexity of the problem.

374
00:27:33,840 --> 00:27:38,050
It's a simple problem and we can
use simple code to solve it.

375
00:27:38,050 --> 00:27:40,070
But it would be nice if this actually still works.

376
00:27:40,070 --> 00:27:51,240
So let's say that-- and let's go back into T-Spin
and see if I can actually still play the game.

377
00:27:51,240 --> 00:27:52,230
And sure enough I can.

378
00:27:52,230 --> 00:27:55,250
So my high score is reset because
I'm not using my cookies anymore.

379
00:27:55,250 --> 00:27:58,240
I'm using a local storage property.

380
00:27:58,240 --> 00:28:04,330
But we can see it's updating as I'm
playing and even better I can quit Safari,

381
00:28:04,330 --> 00:28:12,110
I can come back in and yeah, it maintained my high score.

382
00:28:12,110 --> 00:28:14,130
So that's very cool.

383
00:28:14,130 --> 00:28:15,310
[Applause] Thanks.

384
00:28:18,720 --> 00:28:23,370
[Applause] Another really cool thing about
using LocalStorage instead of cookies is

385
00:28:23,370 --> 00:28:27,770
that I can use some features of the Web
Inspector to get a little more information.

386
00:28:27,770 --> 00:28:30,120
So I'm going to pop-up the Web Inspector.

387
00:28:30,120 --> 00:28:33,560
Across the top, I have this tab called storage.

388
00:28:33,560 --> 00:28:39,560
And now that I've set a LocalStorage or-- yeah, a
local storage property, there's now this new item

389
00:28:39,560 --> 00:28:42,390
in this left-hand column called Local Storage.

390
00:28:42,390 --> 00:28:51,580
And if I clicked on it, sure enough I see my key/value pair
that I set in code and I can inspect its current value.

391
00:28:51,580 --> 00:28:54,150
And you know, even better what I can do, like I said Brady

392
00:28:54,150 --> 00:28:56,210
and I been really competitive,
I'm really trying to beat him.

393
00:28:56,210 --> 00:28:58,440
So, let's see.

394
00:28:58,440 --> 00:29:03,580
[ Pause ]

395
00:29:03,580 --> 00:29:07,700
Yeah, I don't think he's going to be able to
beat that one but don't tell him I did that.

396
00:29:07,700 --> 00:29:09,440
Well, alright, back to you Brady.

397
00:29:09,440 --> 00:29:17,070
[ Applause ]

398
00:29:17,070 --> 00:29:17,400
>>Brady Eidson: OK.

399
00:29:17,400 --> 00:29:18,470
Thanks Andy.

400
00:29:18,470 --> 00:29:21,030
So I stepped out for a minute I didn't
see anything he might have done.

401
00:29:21,030 --> 00:29:23,990
He did OK right guys?

402
00:29:23,990 --> 00:29:28,690
Great. OK, so simple programming techniques, simple demo.

403
00:29:28,690 --> 00:29:31,090
And that's just fantastic.

404
00:29:31,090 --> 00:29:36,120
And that's the thing is it really just a
straightforward if you know how to program a JavaScript.

405
00:29:36,120 --> 00:29:42,340
What Andy showed is that you can use the LocalStorage
object to globally and persistent store data.

406
00:29:42,340 --> 00:29:47,430
You can quit the browser, relaunch, the data is
still there and it will be there for the future.

407
00:29:47,430 --> 00:29:52,850
And he also demonstrated, you know, no matter
how you reference the property and his case,

408
00:29:52,850 --> 00:29:59,670
I believe those high score using the dot
property, access the array bracket notation.

409
00:29:59,670 --> 00:30:04,630
Or if you wanted to use the getItem
call that is in the LocalStorage API.

410
00:30:04,630 --> 00:30:08,500
It's all the same property and you
can just choose how you want to code.

411
00:30:08,500 --> 00:30:13,830
So that was web storage, simple stuff,
simple data, simple straightforward solution.

412
00:30:13,830 --> 00:30:16,190
But now I hear some more murmurs in the audience

413
00:30:16,190 --> 00:30:21,170
from some advance web developer saying
"OK, I can store the simple stuff.

414
00:30:21,170 --> 00:30:24,520
But I need something with a little more oomph.

415
00:30:24,520 --> 00:30:31,350
I've got megabytes of data that I'm wrangling around and
it's got structure and it's all this relational data"

416
00:30:31,350 --> 00:30:35,410
and well that's what the data center
and the browser is about.

417
00:30:35,410 --> 00:30:38,360
And by the data center and browser I'm talking

418
00:30:38,360 --> 00:30:47,670
about the HTML5 SQL databases spec. The
SQL databases spec is about real-world SQL.

419
00:30:47,670 --> 00:30:53,290
This is the same structured query language that many
of you are familiar with form working on servers,

420
00:30:53,290 --> 00:30:57,670
working on infrastructure or from
taking databases classes and college.

421
00:30:57,670 --> 00:31:00,120
But it's the real-world SQL.

422
00:31:00,120 --> 00:31:07,750
We're moving on around large amounts of data and
it might take some time to process on that data.

423
00:31:07,750 --> 00:31:11,150
So the API is asynchronous and it is callback-based.

424
00:31:11,150 --> 00:31:16,990
Safari will handle all this stuff on a background thread
and the way you interact with the database mechanism is

425
00:31:16,990 --> 00:31:23,430
by providing some JavaScript callback functions
to take care of things when you need to.

426
00:31:23,430 --> 00:31:28,820
Again, like session storage and local storage,
it has the same origin base security model

427
00:31:28,820 --> 00:31:31,160
that is this standard security model of the web.

428
00:31:31,160 --> 00:31:37,840
Pages served from your domain that you own and control
but the only ones who can get at your set of databases.

429
00:31:37,840 --> 00:31:42,440
So there are some advantages of keeping
it local, keeping databases local.

430
00:31:42,440 --> 00:31:46,380
One is of course the theme of the talk it works offline.

431
00:31:46,380 --> 00:31:51,490
This is a database that is not on some server
that we need to go through the cloud to get to.

432
00:31:51,490 --> 00:31:56,610
This is a database accessible on
our users' machines in the browser.

433
00:31:56,610 --> 00:32:00,210
So this is great in some situations.

434
00:32:00,210 --> 00:32:06,550
But I know a lot of you are thinking, "Well, I have this
complex structure relational data that I need to store it

435
00:32:06,550 --> 00:32:09,290
on the serve-- store it on a server somewhere.

436
00:32:09,290 --> 00:32:13,920
The whole point of my application or my
set up is that I sync this data to a server

437
00:32:13,920 --> 00:32:16,190
and then I sync it back down to the browser later."

438
00:32:16,190 --> 00:32:21,020
Well, you can still use the local database
to cache that data locally and to prepare

439
00:32:21,020 --> 00:32:24,960
for the eventuality where there is no network connection.

440
00:32:24,960 --> 00:32:30,160
And when you do so, you get fantastic benefits
along the lines of better performance.

441
00:32:30,160 --> 00:32:36,520
When the database is being created locally, fetching
results from the rows and tables is just instantaneous.

442
00:32:36,520 --> 00:32:43,120
And then lower latency, we're cutting the network out of
the situation, we don't have to travel across the world,

443
00:32:43,120 --> 00:32:46,430
we don't have to travel through the
airways and Wi-Fi or cellular connections,

444
00:32:46,430 --> 00:32:50,660
we just have to travel through
our machine to the user's disc.

445
00:32:50,660 --> 00:32:52,260
So things are really quick.

446
00:32:52,260 --> 00:32:56,940
And then especially in this portable
devices when we're disabling the radios

447
00:32:56,940 --> 00:33:03,610
and we're not using this power-hungry broadcast to get
at this data because we have a locally cache copy of it,

448
00:33:03,610 --> 00:33:05,650
we can improve battery life by quite a bit.

449
00:33:05,650 --> 00:33:08,120
Radios are very expensive for batteries.

450
00:33:08,120 --> 00:33:12,360
So I'm going to focus on one thing back
on the overview slide really quick.

451
00:33:12,360 --> 00:33:14,770
And that is, real-world SQL.

452
00:33:14,770 --> 00:33:18,620
What do I mean when I say real-world SQL?

453
00:33:18,620 --> 00:33:20,990
I absolutely mean everything you think it means.

454
00:33:20,990 --> 00:33:26,060
I mean there's tables of data that you can
create and drop at will and there's rows

455
00:33:26,060 --> 00:33:30,810
of data you can throw massive amounts of rows at the
database and it will handle them and chew them up

456
00:33:30,810 --> 00:33:34,020
and I'm sure there's indexes when
you know the scheme of your database,

457
00:33:34,020 --> 00:33:36,330
you can provide performance hints to make it work faster.

458
00:33:36,330 --> 00:33:41,600
There're definitely triggers you can install so you can
make things work and stay consistent as data is dropped

459
00:33:41,600 --> 00:33:45,720
and stuff, and you bet there's transactions.

460
00:33:45,720 --> 00:33:47,510
Their built into the API.

461
00:33:47,510 --> 00:33:49,140
We don't let you forget them.

462
00:33:49,140 --> 00:33:57,050
They're so important to performance and consistency that
they're the very fundamental construct of the database API.

463
00:33:57,050 --> 00:33:59,840
So how does this API work?

464
00:33:59,840 --> 00:34:00,850
I'll walk you through it.

465
00:34:00,850 --> 00:34:04,490
Since it's asynchronous, it takes a
little bit of walking through the trails.

466
00:34:04,490 --> 00:34:06,280
So let's follow the bread crumbs.

467
00:34:06,280 --> 00:34:09,260
First, you get a database object to work with.

468
00:34:09,260 --> 00:34:11,960
There's a new call on the window object called openDatabase.

469
00:34:11,960 --> 00:34:13,530
It takes a few arguments.

470
00:34:13,530 --> 00:34:17,460
The only really important one is that
first argument the database identifier.

471
00:34:17,460 --> 00:34:20,500
In this case, we're referring to
the base called "MyDatabase."

472
00:34:20,500 --> 00:34:22,430
And that's the unique identifier for the database.

473
00:34:22,430 --> 00:34:30,050
If I open the same database again in the future, I'll
be getting an access to the same data stored in it.

474
00:34:30,050 --> 00:34:33,580
So when do that openDatabase returns you a database object?

475
00:34:33,580 --> 00:34:35,190
There're a couple things you can do with it.

476
00:34:35,190 --> 00:34:40,650
But by far, the most important
one is start a SQLTransaction.

477
00:34:40,650 --> 00:34:45,990
And the way you do that is by calling
transaction on the database object.

478
00:34:45,990 --> 00:34:48,490
There're a few different flavors of this method but the one

479
00:34:48,490 --> 00:34:54,050
that lets you actually do something useful is
the one that takes a single callback function.

480
00:34:54,050 --> 00:34:58,120
So starting this transaction, it's going
to happen on this background thread,

481
00:34:58,120 --> 00:34:59,760
Safari's going to handle all the heavy lifting.

482
00:34:59,760 --> 00:35:05,870
And then when the transaction is open and ready to go,
that's when your callback function is going to be called.

483
00:35:05,870 --> 00:35:12,240
Your callback function is going to take a single
argument which is an SQLTransaction object.

484
00:35:12,240 --> 00:35:18,390
And this object is where things happen, where SQL is run.

485
00:35:18,390 --> 00:35:24,830
So using this object we can execute
some SQL by calling executeSql.

486
00:35:24,830 --> 00:35:27,120
And this is just a very simple SQL statement.

487
00:35:27,120 --> 00:35:29,790
I'm creating a test table with the test value in it.

488
00:35:29,790 --> 00:35:35,140
But this is where my database experience
and from JavaScript in the browser begins.

489
00:35:35,140 --> 00:35:42,470
So let's go into a little more depth by showing you a demo.

490
00:35:42,470 --> 00:35:50,560
OK, so if any of you have researched the SQL database
spec, Google around for it, one thing you might have run

491
00:35:50,560 --> 00:35:59,440
across is what has become the canonical example of a web
database app that we put together when we first implemented.

492
00:35:59,440 --> 00:36:03,030
And that is of course the WebKit Sticky Notes.

493
00:36:03,030 --> 00:36:07,130
What better thing to store in a
relational database than some sticky notes.

494
00:36:07,130 --> 00:36:09,480
So that's what we use as our demo.

495
00:36:09,480 --> 00:36:12,120
So we see here I got the sticky note I can drag around.

496
00:36:12,120 --> 00:36:14,520
I can put some stuff on it.

497
00:36:14,520 --> 00:36:16,820
I'm on stage mom.

498
00:36:16,820 --> 00:36:20,310
So she can see that later and its
storing this in the database.

499
00:36:20,310 --> 00:36:28,460
Now I can go ahead and quit Safari, relaunch
it, go ahead and go back to the same page

500
00:36:28,460 --> 00:36:33,960
and have the exact same note there as the same
contents and there's actually a lot more data going

501
00:36:33,960 --> 00:36:37,160
on in this note behind the scenes
that you might not be aware of.

502
00:36:37,160 --> 00:36:41,670
First off, it's got the text of course which-- there we go.

503
00:36:41,670 --> 00:36:44,690
But down here, it also has the last modified date.

504
00:36:44,690 --> 00:36:49,400
As I move it around, it remembers
the position of the sticky note.

505
00:36:49,400 --> 00:36:53,380
And then of course, I might want multiple
notes and you'll notice that their stacked,

506
00:36:53,380 --> 00:36:57,870
they have a Z order that shifts
around as I select a new note.

507
00:36:57,870 --> 00:36:59,770
So we also remember the Z order.

508
00:36:59,770 --> 00:37:03,280
So take a quick mental snapshot
here of how these notes look.

509
00:37:03,280 --> 00:37:12,440
I'm going to go ahead and quit Safari, relaunch it, go back
to this page and all of that information, the locations

510
00:37:12,440 --> 00:37:17,230
and the Z orders relations between
them is stored in the database.

511
00:37:17,230 --> 00:37:18,100
So it's pretty cool.

512
00:37:18,100 --> 00:37:21,400
Let's go ahead and bring up the Web Inspector.

513
00:37:21,400 --> 00:37:26,480
As Andy showed you earlier, it can
introspect into local storage pretty well

514
00:37:26,480 --> 00:37:29,940
but it also has a great way to look at the databases.

515
00:37:29,940 --> 00:37:34,730
So I'm guessing by looking at the Web
Inspector here, we called our database Note Test

516
00:37:34,730 --> 00:37:37,450
because that's what shows up in the sidebar here.

517
00:37:37,450 --> 00:37:42,070
And the inside of Note Test is a
table called "WebKit Sticky Notes."

518
00:37:42,070 --> 00:37:44,600
And indeed, these are all the notes that I have on here.

519
00:37:44,600 --> 00:37:52,090
It's got the idea of the note, the text of the note,
the time stamp, their locations, their Z order.

520
00:37:52,090 --> 00:37:53,950
So that's all in the database here.

521
00:37:53,950 --> 00:37:59,660
I can even like I have a little command prompt
here so I can do some stuff in the database

522
00:37:59,660 --> 00:38:02,750
if I want, it has tab completion, helps out.

523
00:38:02,750 --> 00:38:07,090
So the Web Inspector is a great tool to help
you use database in your web application.

524
00:38:07,090 --> 00:38:14,280
So right now we're looking at the sticky notes that
are hosted at webkit.org but I have a local copy

525
00:38:14,280 --> 00:38:16,380
on my laptop because I use these all the time.

526
00:38:16,380 --> 00:38:22,480
I use these to organize my life because I have a
lot of stuff going on and I just need a little help.

527
00:38:22,480 --> 00:38:25,120
So I'm going to ahead and bring up my local copy.

528
00:38:25,120 --> 00:38:30,850
Don't try to pry into my personal life too much but
this is the type of stuff that's on my plate right now.

529
00:38:30,850 --> 00:38:33,250
All the types of things I have to worry about.

530
00:38:33,250 --> 00:38:39,610
But what is really different about my local copy is
that I got it a search box up here because I have

531
00:38:39,610 --> 00:38:44,090
so many sticky notes flying around, it's hard to keep
track of everything that's going on in my life sometimes.

532
00:38:44,090 --> 00:38:46,830
So I know I need to search for things
like I know I need to go shopping

533
00:38:46,830 --> 00:38:50,780
after the WWDC party tonight so
I have a shopping list in here.

534
00:38:50,780 --> 00:38:54,080
I can go ahead and type a search query, OK.

535
00:38:54,080 --> 00:38:57,470
So I just-- "sh" was good enough
so I can see my shopping list.

536
00:38:57,470 --> 00:39:02,010
This is all just standard web technology
here and it made everything I didn't--

537
00:39:02,010 --> 00:39:05,410
I wasn't interested in go away
and I brought up my shopping list.

538
00:39:05,410 --> 00:39:11,670
And as you know it by now I'm obsessed with
T-spin lately especially with beating Andy

539
00:39:11,670 --> 00:39:14,660
because somehow he keeps on putting up amazing scores.

540
00:39:14,660 --> 00:39:17,890
So I have a lot of notes about T-spin.

541
00:39:17,890 --> 00:39:22,200
I had noticed on my shopping list, I have to buy a
strategy guide, I need to make sure to watch that match

542
00:39:22,200 --> 00:39:27,150
on TV tomorrow and so that's what
I have to do regarding T-spin.

543
00:39:27,150 --> 00:39:30,630
So the search box, this really changed my life.

544
00:39:30,630 --> 00:39:33,930
It made using this so much easier.

545
00:39:33,930 --> 00:39:36,900
So let's go ahead and see how I implemented that.

546
00:39:36,900 --> 00:39:42,060
Since all these are in a database, all
I had to do was write a little SQL magic

547
00:39:42,060 --> 00:39:46,090
and a little JavaScript to query the database for matches.

548
00:39:46,090 --> 00:39:51,700
So you can see here at the beginning
of my method I do a little validation

549
00:39:51,700 --> 00:39:54,550
to make sure I'm only performing one search at once

550
00:39:54,550 --> 00:39:59,250
and to make sure I reset everything
to basic if there is no search query.

551
00:39:59,250 --> 00:40:05,380
But then right here, the db.transaction
this is where the magic starts happening.

552
00:40:05,380 --> 00:40:08,960
So right here I'm calling transaction
on the database object like I showed you

553
00:40:08,960 --> 00:40:11,890
on slides and I'm providing my callback function.

554
00:40:11,890 --> 00:40:15,190
It could be a function I wrote somewhere
else in my code but I went ahead

555
00:40:15,190 --> 00:40:18,590
and declared the function inline
here, isn't JavaScript great?

556
00:40:18,590 --> 00:40:21,610
So in my callback function I get a transaction object.

557
00:40:21,610 --> 00:40:26,860
So I go ahead and take that transaction
object and execute some SQL.

558
00:40:26,860 --> 00:40:31,080
Let me make the window a little
bigger here and executes some SQLs.

559
00:40:31,080 --> 00:40:37,350
So this one SQL statement is leveraging the power of
the database to look at all the text of all the notes

560
00:40:37,350 --> 00:40:41,770
and give me the matches of all
the notes that I'm searching for.

561
00:40:41,770 --> 00:40:47,050
So when I execute that statement, this is a different
form of the function call I didn't show you in the slides.

562
00:40:47,050 --> 00:40:49,690
I provide a callback to get the results out of the database

563
00:40:49,690 --> 00:40:52,850
because of course it's useless
if we can't get the results out.

564
00:40:52,850 --> 00:40:56,610
So in this callback, I'm getting a results object.

565
00:40:56,610 --> 00:41:01,380
Now the documentation in the spec and
in this Sticky Notes example code,

566
00:41:01,380 --> 00:41:04,540
you can see what the results of the object is like.

567
00:41:04,540 --> 00:41:06,590
Basically, I get rows of results here.

568
00:41:06,590 --> 00:41:12,440
I can just go ahead and iterate over those rows and look
for the property I'm interested in, here it's the ID,

569
00:41:12,440 --> 00:41:18,070
and then I have those note objects live, I've
already created them from the database already

570
00:41:18,070 --> 00:41:22,260
when I first visited the web app so I can
go ahead and change some classes on them

571
00:41:22,260 --> 00:41:26,930
to pop the matches out and make the non-matches go away.

572
00:41:26,930 --> 00:41:33,010
So you know about 20 lines of JavaScript one SQL
statement leveraging the power of the database

573
00:41:33,010 --> 00:41:38,520
to add a really cool feature to what was
already kind of a pretty cool little demo.

574
00:41:38,520 --> 00:41:41,440
So that's the WebKit Sticky Notes.

575
00:41:41,440 --> 00:41:49,100
[ Applause ]

576
00:41:49,100 --> 00:41:53,610
So as I showed you, SQL queries
available directly from JavaScript.

577
00:41:53,610 --> 00:41:59,500
This is a SQL database and web technology meshed
together and we can do some pretty cool stuff with it

578
00:41:59,500 --> 00:42:03,720
and I think you can do some pretty cool stuff with it too.

579
00:42:03,720 --> 00:42:10,470
We can handle complex relational data in the browser, these
sticky notes have enough little nuggets of data about them

580
00:42:10,470 --> 00:42:16,750
that trying to store them in local storage or cookies
or in a plug-in or wrapping them up and shipping it off

581
00:42:16,750 --> 00:42:21,070
to a server just to fetch them again
later, probably be a little bit of a pain.

582
00:42:21,070 --> 00:42:26,340
So we can store that relation and that
structure locally in the browser from JavaScript.

583
00:42:26,340 --> 00:42:32,050
And what I didn't actually show you
in the demo, but what I've alluded to

584
00:42:32,050 --> 00:42:34,960
and I think you can imagine is definitely true.

585
00:42:34,960 --> 00:42:38,940
When it makes sense to cache this
data or store it locally offline

586
00:42:38,940 --> 00:42:43,090
in our users' machines we get performance
superior to the cloud.

587
00:42:43,090 --> 00:42:48,870
Things-- modern machines are just so fast that handling
the database for one user, piece of cake, no sweat.

588
00:42:48,870 --> 00:42:56,380
And we can ignore the network, the latency and work even
when there isn't a network, then that's pretty great.

589
00:42:56,380 --> 00:43:01,890
So that's everything I had to talk to you about today.

590
00:43:01,890 --> 00:43:08,660
We covered the application cache a standard way to store
the resources that make up your application offline

591
00:43:08,660 --> 00:43:13,350
so your users can use your web application
with no network connection at all.

592
00:43:13,350 --> 00:43:23,390
We talked about the web storage spec a way to sort
key/value pairs of data in a persistent and reliable manner.

593
00:43:23,390 --> 00:43:26,040
And then we talked about the data center and the browser.

594
00:43:26,040 --> 00:43:33,320
SQL databases a full relational database
available to your JavaScript to your apps.

595
00:43:34,480 --> 00:43:40,030
So for more info, you're welcome to contact
Vicki Murley, the Safari Technologies Evangelist.

596
00:43:40,030 --> 00:43:46,340
Each of these three technologies, are in three different
specs that make up the HTML5 family of technology.

597
00:43:46,340 --> 00:43:49,500
So here're the URLs for looking up at those.

598
00:43:49,500 --> 00:43:54,910
We'd love to hear form you at the WebKit Open Source Project
especially to check out that WebKit Sticky Notes demo.

599
00:43:54,910 --> 00:43:58,530
And, of course, the Apple Developer Forums
are always available for your needs.

