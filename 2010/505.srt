1
00:00:06,980 --> 00:00:09,020
>> Timothy Hatcher: Hello, everyone.

2
00:00:09,020 --> 00:00:11,950
Welcome to "Creating Safari Extensions, Part One."

3
00:00:11,950 --> 00:00:17,260
Well, hopefully, after today's session, you'll be
able to get started making Extensions for Safari,

4
00:00:17,260 --> 00:00:26,830
and I'm proud to announce that Safari 5 has everything
you need, as a developer, to start creating Extensions.

5
00:00:26,830 --> 00:00:32,340
And later this summer, there's going to be
a user release that will enable Extensions,

6
00:00:32,340 --> 00:00:36,070
and we want to get your Extensions right away.

7
00:00:36,070 --> 00:00:42,050
Once we get a great number of Extensions in the
Extension Gallery, we're going to show these off

8
00:00:42,050 --> 00:00:45,860
to all your users and let them discover these Extensions.

9
00:00:45,860 --> 00:00:51,720
So, you'll have an immediate audience of
users to find and start using your Extensions.

10
00:00:51,720 --> 00:00:57,650
So, start creating and definitely become
a member of the Safari Developer Program,

11
00:00:57,650 --> 00:01:03,760
and submit your Extension as soon as possible.

12
00:01:03,760 --> 00:01:06,180
So, what are Safari Extensions?

13
00:01:06,180 --> 00:01:11,920
Well, you might have heard, in the State of the
Union, they're all based on standards, open standards,

14
00:01:11,920 --> 00:01:19,770
and these standards are the core of what make up
WebKit, and WebKit powers all of these Extensions,

15
00:01:19,770 --> 00:01:23,340
just like they do your browsing experience.

16
00:01:23,340 --> 00:01:29,050
And there's no native code in Extensions, and
we do this because of a couple of reasons.

17
00:01:29,050 --> 00:01:30,830
There's the security aspect.

18
00:01:30,830 --> 00:01:38,340
Users expect Extensions to be lightweight and
not able to muck around with their system.

19
00:01:38,340 --> 00:01:44,490
So, with all these security features,
there's also cross platform aspects.

20
00:01:44,490 --> 00:01:48,270
So, native code really doesn't port to Windows well.

21
00:01:48,270 --> 00:01:55,470
So, if you write a Mac Extension, all the Windows users that
you could have wouldn't have that, if you use native code.

22
00:01:55,470 --> 00:02:04,460
So HTML5, CSS, and JavaScript really let you broaden
your audience and target both platforms of Safari.

23
00:02:04,460 --> 00:02:07,140
And Extensions are secure.

24
00:02:07,140 --> 00:02:12,810
They're signed with a code-signing certificate
that's free on the Safari Developer Program.

25
00:02:12,810 --> 00:02:18,580
Those things normally aren't free, so we're giving you
a free code-signing certificate for your Extension,

26
00:02:18,580 --> 00:02:25,430
so you can provide secure updates for your users,
with no dialogs they have to click through.

27
00:02:25,430 --> 00:02:31,150
They can just automatically install your
Extensions and trust it's coming from you.

28
00:02:31,150 --> 00:02:37,080
And because it's built on WebKit and
open standards, there's just no crashing.

29
00:02:37,080 --> 00:02:47,580
WebKit never crashes, and [laughter] you're going to have
great code, and you're not going to have any problems

30
00:02:47,580 --> 00:02:50,200
with crashing Safari because of your Extension.

31
00:02:50,200 --> 00:02:55,030
So, let's talk about a little of what you'll learn today.

32
00:02:55,030 --> 00:03:02,400
So, we'll talk about when you want to make a
Safari Extension, what Safari Extensions can do,

33
00:03:02,400 --> 00:03:05,950
and I'll give you a demo on how to build one.

34
00:03:05,950 --> 00:03:08,610
So, let's go ahead and get started.

35
00:03:08,610 --> 00:03:12,590
So, when do you want to make a Safari Extension?

36
00:03:12,590 --> 00:03:15,870
Well, the first one is very simple.

37
00:03:15,870 --> 00:03:19,640
When you want to break out of this
box-- you've built a webpage,

38
00:03:19,640 --> 00:03:26,620
and you just can't do everything you want,
because you're stuck in this yellow box.

39
00:03:26,620 --> 00:03:31,010
But with Extensions, you can extend out.

40
00:03:31,010 --> 00:03:36,250
You can break out of that box, go
into the Toolbar, have Context menus,

41
00:03:36,250 --> 00:03:40,900
have Toolbar items for your users to interact with.

42
00:03:40,900 --> 00:03:47,410
Another aspect of Extensions, when you want to make
one, is if you want to provide a persistent experience.

43
00:03:47,410 --> 00:03:56,600
So, today, if you want to check your email, you have to
open a web browser window, go to your email website, log in,

44
00:03:56,600 --> 00:04:04,920
get set up, and it'll notify you that you have new
messages, but you either have to keep that window open,

45
00:04:04,920 --> 00:04:11,120
or you have to keep closing it, coming back
in, wondering if you have new messages yet.

46
00:04:11,120 --> 00:04:12,470
And, sure enough, you do.

47
00:04:12,470 --> 00:04:17,820
It's from your boss, and you have a fire drill that you
have to deal with, and you don't want to have to wait.

48
00:04:17,820 --> 00:04:19,570
You want to be notified right away.

49
00:04:19,570 --> 00:04:26,110
But web email clients are so popular, you
want that built in right into your browser.

50
00:04:26,110 --> 00:04:31,930
So, with the Safari Extension, you
don't have this reload situation.

51
00:04:31,930 --> 00:04:35,660
You can have a persistent experience for your users.

52
00:04:35,660 --> 00:04:41,720
The Extension can automatically keep your
credentials, without any browser windows open,

53
00:04:41,720 --> 00:04:46,890
and it can also present notifications,
like badging a Toolbar item.

54
00:04:46,890 --> 00:04:54,050
So, when a new message does come in, the user is notified
right away, and they can click on your Toolbar item,

55
00:04:54,050 --> 00:05:00,630
go into the web email client, and they know right
away when that new message from their boss comes in.

56
00:05:00,630 --> 00:05:09,460
And the final great scenario for Extensions,
and when you would want to make one, is mashups.

57
00:05:09,460 --> 00:05:13,890
Usually, mashups require taking
information from one website and another.

58
00:05:13,890 --> 00:05:19,310
So, like, a realty website, and you
want to show a map on that website.

59
00:05:19,310 --> 00:05:23,990
You have to pull down information from both servers.

60
00:05:23,990 --> 00:05:29,400
You usually have to run your own server to combine
that information, and get everything mixed in

61
00:05:29,400 --> 00:05:33,900
and mashed together, and then you
have to present that user, your users,

62
00:05:33,900 --> 00:05:38,260
with another version of the site
with those things mashed together.

63
00:05:38,260 --> 00:05:42,010
But with Extensions, you can cut out that middleman.

64
00:05:42,010 --> 00:05:46,450
You can cut out that middle server
and reduce your infrastructure.

65
00:05:46,450 --> 00:05:49,710
So, you take website A, a realty website.

66
00:05:49,710 --> 00:05:56,820
Your Extension can talk to the server
for a map site, pull down information,

67
00:05:56,820 --> 00:06:00,700
and process it, and inject it back into website A.

68
00:06:00,700 --> 00:06:09,850
So, your-- no secondary server that you have to
process, and preload this information for your users.

69
00:06:09,850 --> 00:06:12,970
So, it's a great way to do mashups.

70
00:06:12,970 --> 00:06:17,310
So, that's the final example of when
you might want to create Extensions.

71
00:06:17,310 --> 00:06:22,000
There's tons more, but those are the
three I wanted to show you today.

72
00:06:22,000 --> 00:06:27,040
So, let's talk about what Safari Extensions can do.

73
00:06:27,040 --> 00:06:37,220
So, to do that, I'm just going to jump in and do a demo.

74
00:06:37,220 --> 00:06:38,680
So, I have Safari 5 here.

75
00:06:38,680 --> 00:06:44,990
I've already enabled Extensions, but I'll show you
how to go about that, if you haven't done it already.

76
00:06:44,990 --> 00:06:52,810
In Safari Preferences, under the Advanced
Preferences, you enable the Develop menu.

77
00:06:52,810 --> 00:07:00,750
This will give you all of Safari's developer tools, like
the Web Inspector, User Agent Switching, things like that.

78
00:07:00,750 --> 00:07:08,610
But we've also built in Extensions under the Develop
menu, because they're a developer feature in Safari 5,

79
00:07:08,610 --> 00:07:13,470
so you need to enable Extensions from the
Develop menu, and that gives you access

80
00:07:13,470 --> 00:07:18,350
to the Extension Builder, which I'll show in a little bit.

81
00:07:18,350 --> 00:07:23,870
So, I have a couple of Extensions installed
here, and I wanted to show you them.

82
00:07:23,870 --> 00:07:28,560
So, I have a wwdc Extension and a Twitter
Extension, and they're both enabled--

83
00:07:28,560 --> 00:07:32,600
well, the Twitter Extension isn't,
so we'll go ahead and enable it.

84
00:07:32,600 --> 00:07:34,470
And you'll see I didn't have to restart.

85
00:07:34,470 --> 00:07:41,650
This Extension was disabled, and I enabled it
immediately, and user interface changed in Safari--

86
00:07:41,650 --> 00:07:46,650
no relaunching the browser, immediate installation.

87
00:07:48,050 --> 00:07:57,230
So, this Twitter Extension talks to Twitter, does a
search for whatever query I typed in, in the Preferences,

88
00:07:57,230 --> 00:08:04,210
and it rotates every ten seconds, and those options
were configurable, presented in Safari's Preferences,

89
00:08:04,210 --> 00:08:08,660
just like you would expect any other Preference in Safari.

90
00:08:08,660 --> 00:08:16,440
And I have a setting to change the background
color of my bar when the mood is happy or sad.

91
00:08:16,440 --> 00:08:21,350
So, you can see how I'm overlaying
the metal with a transparent green,

92
00:08:21,350 --> 00:08:27,150
or no color, when there's no emotion being shown.

93
00:08:27,150 --> 00:08:32,230
And these are actually some quotes that we've
pulled from Twitter from developers like you

94
00:08:32,230 --> 00:08:35,390
that are very excited about building Extensions.

95
00:08:35,390 --> 00:08:42,480
The other Extension I wanted to show
you was the wwdc bar that I built.

96
00:08:42,480 --> 00:08:47,080
This shows you all the sessions that
are currently going on in this timeslot,

97
00:08:47,080 --> 00:08:52,640
and the one that we're in now is
Favorited, so it's expanded by default.

98
00:08:52,640 --> 00:08:58,590
But I can expand, and I'm using CSS3
here to do these animations for me.

99
00:08:58,590 --> 00:09:04,630
I'm not writing any code, except
the couple of lines of CSS it takes.

100
00:09:04,630 --> 00:09:11,970
And if we want more information about a session, we just
click the More Info button, and you can Favorite it,

101
00:09:11,970 --> 00:09:15,810
and take over the whole bar with a custom experience.

102
00:09:15,810 --> 00:09:21,730
So, that's a couple of examples of Safari
Extensions and specifically Extension bars.

103
00:09:26,110 --> 00:09:34,440
So, that's what the Extensions look like,
but what's the architecture underneath that?

104
00:09:34,440 --> 00:09:36,810
Well, we'll start at the high level.

105
00:09:36,810 --> 00:09:40,640
Every web browser has a window or one or more windows.

106
00:09:40,640 --> 00:09:44,120
Web browsers have tabs.

107
00:09:44,120 --> 00:09:46,920
Safari's had tabs for a while.

108
00:09:46,920 --> 00:09:51,690
And every tab has a webpage.

109
00:09:51,690 --> 00:09:57,260
We also provide areas for bars, so we
hold a spot for your Extension bars,

110
00:09:57,260 --> 00:10:04,530
and we also have spots for your Toolbar items,
alongside Safari's native bars and Toolbar items.

111
00:10:04,530 --> 00:10:13,540
When you install an Extension, your Extension brings along a
bunch of assets that get injected into Safari's experience.

112
00:10:13,540 --> 00:10:25,090
So, the Extension can bring along some Toolbar items,
some bars, Context menu items for the content area,

113
00:10:25,090 --> 00:10:30,470
and something we call the Global Page,
and this is like your main execution,

114
00:10:30,470 --> 00:10:37,530
your main code, and some injected CSS, and JavaScript.

115
00:10:37,530 --> 00:10:44,630
So, when the user installs or enables your Extension,
these things move over and get injected into Safari's UI.

116
00:10:44,630 --> 00:10:47,530
And same for the Content Scripts.

117
00:10:47,530 --> 00:10:53,380
They get injected into page loads,
depending on the page that the user loads.

118
00:10:53,380 --> 00:10:56,360
And there's a split.

119
00:10:56,360 --> 00:11:04,160
There's a Web Content Layer and an Application
Layer, and these layers provide a sense of security,

120
00:11:04,160 --> 00:11:10,160
so content in the web area can't break
out and talk to the Application Layer.

121
00:11:10,160 --> 00:11:16,750
It requires some message passing, but the
Global Page and the bars can talk to each other.

122
00:11:16,750 --> 00:11:26,630
They can call functions in each other's code directly, and
the Global Page can send messages to the web content area,

123
00:11:26,630 --> 00:11:29,280
to scripts that you've injected in pages.

124
00:11:29,280 --> 00:11:30,710
And same for the bars.

125
00:11:30,710 --> 00:11:38,120
The Content Scripts can message up, and the bar
can message back with some content, some payload.

126
00:11:38,120 --> 00:11:45,010
So, that's the basic overall architecture
of Safari Extensions.

127
00:11:45,010 --> 00:11:47,960
So, let's dive in and talk about the Application Layer.

128
00:11:47,960 --> 00:11:49,010
This is the top layer.

129
00:11:49,010 --> 00:11:55,550
This is the UI, the user experience layer, where
you see most of the bars and Toolbar items.

130
00:11:55,550 --> 00:12:02,010
Let's first talk about the API a little
bit, before we go into specifics.

131
00:12:02,010 --> 00:12:08,940
So, in JavaScript, we expose a namespace object, and
in JavaScript, there's really no native namespaces,

132
00:12:08,940 --> 00:12:13,560
so every API we've exposed is underneath this object.

133
00:12:13,560 --> 00:12:20,410
And it's window.safari, but since it's on the
window object, you don't need to type out window.

134
00:12:20,410 --> 00:12:25,670
at all. You can just refer to the object as
safari in your code, so it's less typing.

135
00:12:25,670 --> 00:12:30,630
And on that object, we expose three sub objects.

136
00:12:30,630 --> 00:12:38,370
Since the Safari object is just a namespace,
there's an application object for application APIs.

137
00:12:38,370 --> 00:12:42,340
There's an Extension object, which
is like your current Extension,

138
00:12:42,340 --> 00:12:45,900
so you access APIs about your Extension on that object.

139
00:12:45,900 --> 00:12:49,680
And then there's a special property,
called the Self property,

140
00:12:49,680 --> 00:12:53,240
and this will be whatever instance
you're currently running in.

141
00:12:53,240 --> 00:12:56,000
So, if you're in a bar, it's going to be the bar object.

142
00:12:56,000 --> 00:12:58,880
If you're in the Global Page, it's
going to be the Global Page object.

143
00:12:58,880 --> 00:13:02,770
So, you know who you are, and you can break out from there.

144
00:13:02,770 --> 00:13:07,630
These are the three APIs that you're going to use,
because these are the only objects that are on Safari,

145
00:13:07,630 --> 00:13:11,620
and everything else is branched
out from one of these objects.

146
00:13:11,620 --> 00:13:13,680
So, let's talk about windows and tabs.

147
00:13:13,680 --> 00:13:20,650
This is the high level user interface element
in a web browser, and you have access to all

148
00:13:20,650 --> 00:13:23,960
of the windows and tabs, as an Extension developer.

149
00:13:23,960 --> 00:13:28,250
Unlike a webpage, where you only have access
to your window and any windows you open,

150
00:13:28,250 --> 00:13:32,820
you can access all of the windows and tabs.

151
00:13:32,820 --> 00:13:33,860
You can create them.

152
00:13:33,860 --> 00:13:34,900
You can move them around.

153
00:13:34,900 --> 00:13:38,430
You can request them to be closed.

154
00:13:38,430 --> 00:13:45,470
And they serve as a great access point for
everything that you need to do, so event listening,

155
00:13:45,470 --> 00:13:48,940
and they're part of the event listening
hierarchy, so you add event listeners

156
00:13:48,940 --> 00:13:52,690
on tabs, adding event listeners on windows.

157
00:13:52,690 --> 00:13:58,580
Even if your Extension doesn't create, or destroy, or
move around windows, you're still going to be interfacing

158
00:13:58,580 --> 00:14:03,240
with these window and tab objects, because
they're so fundamental to the web browser.

159
00:14:03,240 --> 00:14:08,690
And I talked about the Safari Application object.

160
00:14:08,690 --> 00:14:11,670
Here's one of the APIs that you
have on the Application object.

161
00:14:11,670 --> 00:14:18,390
You can ask for all of the browser windows, and
you get an array back, ordered in front to back.

162
00:14:18,390 --> 00:14:21,010
So, 0 is the front-most window.

163
00:14:21,010 --> 00:14:24,920
And this array can be empty, if there's no windows open.

164
00:14:24,920 --> 00:14:30,520
You can open a new browser window, which
will give you one tab in that browser window,

165
00:14:30,520 --> 00:14:34,540
and you can create more tabs on windows whenever you want.

166
00:14:34,540 --> 00:14:38,780
So, that's windows and tabs.

167
00:14:38,780 --> 00:14:41,670
Now let's talk about bars.

168
00:14:41,670 --> 00:14:46,480
So, if you have a bar like the stock ticker
that was demoed in the State of the Union,

169
00:14:46,480 --> 00:14:49,150
this is where you show a strip of information.

170
00:14:49,150 --> 00:14:50,250
It can be Tools.

171
00:14:50,250 --> 00:14:56,190
It can be moving text like the
Twitter example that I showed.

172
00:14:56,190 --> 00:15:00,400
They're loaded as HTML files once per window.

173
00:15:00,400 --> 00:15:06,240
So, when you create-- when the user creates a new
window, your bar is loaded once for that window,

174
00:15:06,240 --> 00:15:10,230
and they make a new window, you get
another instance of that Toolbar.

175
00:15:11,470 --> 00:15:16,510
They display above Safari's Tab
bar and below the Bookmarks bar.

176
00:15:16,510 --> 00:15:18,850
They're a fixed height of 30px.

177
00:15:18,850 --> 00:15:24,270
So, you have a limited amount of space, but you can
do a lot in that space, as you've seen in the examples

178
00:15:24,270 --> 00:15:28,450
in the State of the Union and the ones I just showed.

179
00:15:28,450 --> 00:15:33,580
And you have access to the Global Page, so you
can share information with the Global Page,

180
00:15:33,580 --> 00:15:37,520
functions and data, and I'll go into that in a little bit.

181
00:15:37,520 --> 00:15:41,920
And if you're in the Global Page,
you can access all the bars.

182
00:15:41,920 --> 00:15:45,710
So, the Extension object has an array of all the bars.

183
00:15:45,710 --> 00:15:48,280
These are the instances of those bars.

184
00:15:48,280 --> 00:15:55,280
So, if you have multiple windows open, and your Extension
only has one bar, you still might have multiple bars

185
00:15:55,280 --> 00:16:01,730
in this array, and that's each
instance of the bar in multiple windows.

186
00:16:01,730 --> 00:16:10,940
And if you're in the bar itself, you can call safari.self,
and that will be that current instance of that bar.

187
00:16:10,940 --> 00:16:21,330
So, Toolbar items, these are displayed right
alongside Safari's normal Toolbar items: Back, Forward,

188
00:16:21,330 --> 00:16:30,350
the Location field, etc. And they're created once per
browser window, just like bars, and they're optional.

189
00:16:30,350 --> 00:16:37,110
Users can choose to remove them at any
time, just like the native Toolbar items.

190
00:16:37,110 --> 00:16:39,790
They're inserted in the Toolbar by default.

191
00:16:39,790 --> 00:16:46,200
You can turn this off, but we recommend that you let
the user see the Toolbar items show up right away.

192
00:16:46,200 --> 00:16:51,150
Only if you have multiple Toolbar items, should
you turn off this feature of inserting by default.

193
00:16:51,150 --> 00:16:54,940
Then, they would have to go into the
customized sheet and customize the Toolbar,

194
00:16:54,940 --> 00:16:58,440
but your users usually don't know
how to customize the Toolbar.

195
00:16:58,440 --> 00:17:03,640
You'll be surprised at the number of requests
you would get, if you didn't have this turned on,

196
00:17:03,640 --> 00:17:06,650
that you're going to be answering questions.

197
00:17:06,650 --> 00:17:07,710
"Where's the Toolbar item?"

198
00:17:07,710 --> 00:17:11,750
So, it's inserted by default.

199
00:17:11,750 --> 00:17:16,160
They're styled to look just like Safari's Toolbar items.

200
00:17:16,160 --> 00:17:19,170
So, on Mac, they're going to have a nice grey gradient.

201
00:17:19,170 --> 00:17:23,380
On Windows, they're going to look a little
different, because the platforms look different.

202
00:17:23,380 --> 00:17:25,830
So, you don't have to worry about that platform difference.

203
00:17:25,830 --> 00:17:29,470
We take care of that for you.

204
00:17:29,470 --> 00:17:31,250
They support numerical badges.

205
00:17:31,250 --> 00:17:38,230
So, if you have an email client, you can have a badge
of unread messages show up or whatever you want to show

206
00:17:38,230 --> 00:17:42,890
to your user as a notification on your Toolbar item.

207
00:17:42,890 --> 00:17:49,240
They send something called a "validate" and "command" event,
and I'll go into these in a little more detail in a couple

208
00:17:49,240 --> 00:17:53,460
of slides, but they basically send
events, when they're clicked,

209
00:17:53,460 --> 00:17:56,300
and they send validate events when they need to be updated.

210
00:17:56,300 --> 00:17:58,210
So, the UI needs to change.

211
00:17:58,210 --> 00:18:02,590
And just like bars, there's an
array on the Extension object,

212
00:18:02,590 --> 00:18:06,040
where you can access all of the
instances of those Toolbar items.

213
00:18:06,040 --> 00:18:12,450
So, even if your Extension only has one Toolbar item,
you still will have multiple instances for each window,

214
00:18:12,450 --> 00:18:19,490
so you can update them independently, or you can
iterate that array and update them all at once.

215
00:18:19,490 --> 00:18:25,800
And when you get one of these events, like the
validate event, it's a great time to update the badge,

216
00:18:25,800 --> 00:18:30,170
so you get a "validate event" right
when those Toolbar items are created.

217
00:18:30,170 --> 00:18:34,540
And in your validate event, you should
disable the item, update the image,

218
00:18:34,540 --> 00:18:40,540
or change the badge to reflect the current
state that you need to show to your user.

219
00:18:40,540 --> 00:18:44,090
So, that's Toolbar items.

220
00:18:44,090 --> 00:18:49,280
Context menu items, Safari provides
a lot of Context menu items,

221
00:18:49,280 --> 00:18:52,190
but we wanted to give you a chance to provide your own.

222
00:18:52,190 --> 00:19:00,680
So, in the Content area of Safari, you can insert
Context menu items just like WebKit and Safari does.

223
00:19:00,680 --> 00:19:06,070
They're appended to the web content's Context menu.

224
00:19:06,070 --> 00:19:09,520
Content Scripts can provide context information.

225
00:19:09,520 --> 00:19:17,630
So, if you right click on an image, you're going to
get an event in the Global Web Application Layer,

226
00:19:17,630 --> 00:19:21,750
but in the Web Layer, you need to
provide information on what was clicked.

227
00:19:21,750 --> 00:19:27,590
So, we provide some APIs that let you pass
information up, so your Application Layer code

228
00:19:27,590 --> 00:19:34,500
in the Global Page can answer these questions,
whether to show the item, what the text should say,

229
00:19:34,500 --> 00:19:37,290
whatever you want to use that information for.

230
00:19:37,290 --> 00:19:41,120
And they send the "contextmenu" event.

231
00:19:41,120 --> 00:19:45,780
Up in the Global Page, or bars, you
can listen to a context menu event,

232
00:19:45,780 --> 00:19:51,710
and that's when you can add items and build up your menu.

233
00:19:51,710 --> 00:19:57,650
And they also send "validate" and "command" events,
just like Toolbar items, and they actually share logic.

234
00:19:57,650 --> 00:20:04,240
So, if you have a Toolbar item and a Context menu item, and
they do the same thing, they can both send the same command,

235
00:20:04,240 --> 00:20:09,230
and you only have to write one piece
of code to handle that command.

236
00:20:09,230 --> 00:20:15,120
And when you get the Context menu event, this
is the function you would use to append an item.

237
00:20:15,120 --> 00:20:21,130
You can also have your Extension come with
prepackaged items, so you don't have to--

238
00:20:21,130 --> 00:20:26,810
if you're adding an item over and over again, you should
just prepackage it, so you don't have to run any code.

239
00:20:26,810 --> 00:20:30,330
So, now let's talk about those command and validate events.

240
00:20:30,330 --> 00:20:33,600
So, if you're familiar with any Cocoa programming on Mac,

241
00:20:33,600 --> 00:20:40,150
you might be familiar with the validate
protocol, and it's very similar to this.

242
00:20:40,150 --> 00:20:42,960
But if you're not, it's very simple to understand.

243
00:20:42,960 --> 00:20:47,710
Validate events are sent whenever
there's an "interesting" user action.

244
00:20:47,710 --> 00:20:51,450
So, the user types in a new URL and navigates.

245
00:20:51,450 --> 00:20:53,490
A new tab is created or closed.

246
00:20:53,490 --> 00:20:54,790
New windows show up.

247
00:20:54,790 --> 00:20:56,810
The item is created and put in the Toolbar.

248
00:20:56,810 --> 00:21:00,890
But you do not need to know what happens.

249
00:21:00,890 --> 00:21:03,130
You just need to validate your interface.

250
00:21:03,130 --> 00:21:08,370
Check whatever state you need in the
browser, whether there's a tab or URL open.

251
00:21:08,370 --> 00:21:14,660
Whatever your Toolbar item cares about, you should
update your user interface in the validate event.

252
00:21:14,660 --> 00:21:21,090
And validate events should disable and update items, like I
said, and that's a good place to also update badge counts.

253
00:21:21,090 --> 00:21:26,650
So, it's your opportunity to update the user
interface right before it's shown to the user

254
00:21:26,650 --> 00:21:30,020
and whenever something happens in the browser.

255
00:21:30,020 --> 00:21:37,810
Analogous to validate events, they're sent when the
user clicks, so these items contain a command string,

256
00:21:37,810 --> 00:21:44,080
and the validate event gets sent with that command string,
and the command event gets sent whenever the user interacts

257
00:21:44,080 --> 00:21:52,380
with that item, so pictured Context menu, or clicks on
the Toolbar, and they send to the same event hierarchy,

258
00:21:52,380 --> 00:21:59,320
so your validate event listeners and your command
event listeners usually are right next to each other.

259
00:21:59,320 --> 00:22:07,150
And they're sent up the hierarchy, and they're-- if you're
familiar with DOM events, the events are just like that.

260
00:22:07,150 --> 00:22:12,050
You use "addEventListener" to listen for these events.

261
00:22:12,050 --> 00:22:17,960
So, you can listen for the validate event on
the application, on the windows, on the tabs,

262
00:22:17,960 --> 00:22:21,740
wherever you want to inject your event listeners.

263
00:22:21,740 --> 00:22:28,500
And when you get an event, like I said, it's a
great place to disable or update the user interface,

264
00:22:28,500 --> 00:22:33,020
and you can just set the Disabled
property on the target of the event,

265
00:22:33,020 --> 00:22:38,210
and the target is the Context menu item or the Toolbar item.

266
00:22:38,210 --> 00:22:39,940
So, that's validate and command events.

267
00:22:39,940 --> 00:22:42,850
Now let's talk about the Global Page.

268
00:22:42,850 --> 00:22:46,070
I've been talking about this in a few of these slides.

269
00:22:46,070 --> 00:22:50,130
This is where you put your main code, and it's loaded once,

270
00:22:50,130 --> 00:22:55,300
when you install the Extension,
and it's not visible to the user.

271
00:22:55,300 --> 00:22:58,620
It's just like a webpage, but it's just hidden.

272
00:22:58,620 --> 00:23:02,010
You have the whole DOM available to you.

273
00:23:02,010 --> 00:23:09,950
You have scripts that you can run in this page, so
it's like your invisible page that you can run code.

274
00:23:09,950 --> 00:23:15,580
You can have DOM elements that you interact with,
that you prep before you send them off somewhere.

275
00:23:15,580 --> 00:23:23,230
And it's really where you put your main logic, so you
can share a whole bunch of code with all your Toolbars.

276
00:23:23,230 --> 00:23:29,850
Since the Global Page is only loaded once, it's
a great place to put large amounts of data.

277
00:23:29,850 --> 00:23:36,440
And if your Toolbar, like the Twitter Extension
and the session Extension that I showed you--

278
00:23:36,440 --> 00:23:42,860
the Global Page is the one that's pulling down that
data from Twitter and the Apple developer site,

279
00:23:42,860 --> 00:23:47,530
and processing it, and telling all the bars to update.

280
00:23:47,530 --> 00:23:52,020
So, the bars are just little-- the user interface parts,

281
00:23:52,020 --> 00:23:57,140
and they get told by the Global Page
to update and show new information.

282
00:23:57,140 --> 00:24:00,050
So, that's a great way to structure your Extension.

283
00:24:00,050 --> 00:24:08,610
So, bars load as quick as possible, and making new windows
in Safari is fast and efficient, and the Global Page,

284
00:24:08,610 --> 00:24:12,660
just like the bars, they can talk to each
other, so they have access to each other.

285
00:24:12,660 --> 00:24:19,010
And if you're in a bar, you can get to
the Global Page with the Extension object.

286
00:24:19,010 --> 00:24:22,000
But the Global Page doesn't really
have anything interesting.

287
00:24:22,000 --> 00:24:22,930
It's not visible.

288
00:24:22,930 --> 00:24:24,640
You can't show and hide it.

289
00:24:24,640 --> 00:24:29,810
There's just no APIs on it, except
one, and that's the content window,

290
00:24:29,810 --> 00:24:32,600
and this is the DOM window of the Global Page.

291
00:24:32,600 --> 00:24:40,400
So, any global variables or functions that you declare in
your Global Page can be accessed from the content window,

292
00:24:40,400 --> 00:24:46,430
and it's just like typing window., except
you're accessing it from the Global Page window.

293
00:24:46,430 --> 00:24:48,560
So, that's the Global Page.

294
00:24:48,560 --> 00:24:54,210
Another feature in the Application
Layer are Settings and Secure Settings.

295
00:24:54,210 --> 00:24:58,790
And if you're familiar with HTML's localStorage,

296
00:24:58,790 --> 00:25:04,510
this is going to look very similar to
you, but there's a few differences.

297
00:25:04,510 --> 00:25:07,140
They're exposed in Safari's Preferences.

298
00:25:07,140 --> 00:25:14,100
As I showed in the Twitter example, I had a bunch of
Preferences, so that your uses can type in new queries.

299
00:25:14,100 --> 00:25:16,670
They can check and uncheck check boxes.

300
00:25:16,670 --> 00:25:18,600
There's dropdown menus.

301
00:25:18,600 --> 00:25:26,660
So, when the user picks one of those settings, it's
just going into a key-value store that your Extension

302
00:25:26,660 --> 00:25:31,710
and only your Extension has access
to, just like localStorage.

303
00:25:31,710 --> 00:25:37,290
And anything that you put in this is automatically
JSON serialized and deserialized for you,

304
00:25:37,290 --> 00:25:42,250
so you can store complex objects,
as long as they're not cyclical,

305
00:25:42,250 --> 00:25:46,360
and you get those back on the other end as a usable object.

306
00:25:46,360 --> 00:25:49,250
You don't have to worry about serializing and deserializing.

307
00:25:49,250 --> 00:25:51,700
We take care of that for you.

308
00:25:51,700 --> 00:25:54,040
Just like Settings, we have some Secure Settings.

309
00:25:54,040 --> 00:26:02,200
So, if you require a level of security for usernames, and
passwords, and credit cards, like the one password guys

310
00:26:02,200 --> 00:26:05,460
that did a great demo in the State of the Union.

311
00:26:05,460 --> 00:26:12,640
You could use Secure Storage, and those automatically
get put into the user's keychain on Mac OS X.

312
00:26:12,640 --> 00:26:15,950
And on Windows, we have a secure store very similar.

313
00:26:15,950 --> 00:26:24,650
And you can have a default value very similar
to Mac OS X's user defaults and iPhone.

314
00:26:24,650 --> 00:26:26,060
You can get a default value.

315
00:26:26,060 --> 00:26:31,300
When the value hasn't been set yet, you can get a
value returned back to you, so you don't have to worry

316
00:26:31,300 --> 00:26:36,490
about instantiating or initializing these defaults.

317
00:26:36,490 --> 00:26:43,120
You just specify them in your Extension,
and they get returned to you automatically.

318
00:26:44,530 --> 00:26:53,740
There's also APIs, so you can set keys,
just like you would HTML5's localStorage,

319
00:26:53,740 --> 00:26:57,470
and you can set rich objects that
you get back on the other end.

320
00:26:57,470 --> 00:27:03,800
And Secure Settings are very similar, but this
example, I'm deleting a setting from Secure Storage.

321
00:27:03,800 --> 00:27:07,680
So, those are a couple of examples how
you use Settings and Secure Settings.

322
00:27:07,680 --> 00:27:11,100
That's it for the Application Layer.

323
00:27:11,100 --> 00:27:13,890
So, let's talk about the Web Content Layer.

324
00:27:13,890 --> 00:27:19,010
This is where everything is in the webpage,
in that box that we were talking about.

325
00:27:19,010 --> 00:27:24,530
And any time you want to talk to the Web Layer, you
have to message pass, and that's for secure reasons,

326
00:27:24,530 --> 00:27:29,330
so your code doesn't inadvertently get
exposed to the webpage and vice versa.

327
00:27:29,330 --> 00:27:36,770
The webpage can't call into your secure
application settings and open the Application Layer.

328
00:27:36,770 --> 00:27:40,190
The APIs are very similar in the Web layer.

329
00:27:40,190 --> 00:27:49,160
There is a Safari namespace object, just like you had in the
Application Layer, that's exposed to your injected scripts.

330
00:27:49,160 --> 00:27:52,980
And there's very similar APIs on that namespace object.

331
00:27:52,980 --> 00:27:58,100
There's an Extension object, and there's a Self property,

332
00:27:58,100 --> 00:28:03,050
but the Extension object is not the same
object that you have in the Application Layer.

333
00:28:03,050 --> 00:28:07,580
You don't have access to Secure
Settings or Settings in this API.

334
00:28:07,580 --> 00:28:13,980
You really only have access to a couple of properties
on this Extension API in the Contents Script.

335
00:28:13,980 --> 00:28:16,010
So, just keep that in mind.

336
00:28:16,010 --> 00:28:20,320
You access them very similarly, but
they're actually distinct objects

337
00:28:20,320 --> 00:28:24,860
and like a completely different branch of the API.

338
00:28:24,860 --> 00:28:30,310
And in Content Scripts, the Self
property will return the webpage.

339
00:28:30,310 --> 00:28:34,470
It's a webpage object, and that's where
you add event listeners and things.

340
00:28:34,470 --> 00:28:37,060
So, Content Scripts.

341
00:28:37,060 --> 00:28:45,670
They're evaluated once per page load, and you
can specify what pages they get injected into.

342
00:28:45,670 --> 00:28:49,980
If you're familiar with Greasemonkey,
this is a very similar concept.

343
00:28:49,980 --> 00:28:52,940
Content Scripts get injected into the page.

344
00:28:52,940 --> 00:28:57,350
You specify what URL patterns you want to match.

345
00:28:57,350 --> 00:29:05,590
And this is going to be talked about in the second part of
this session, so I'm just going to skim over these here.

346
00:29:05,590 --> 00:29:10,480
They load either before or during the load event.

347
00:29:10,480 --> 00:29:16,080
So, you don't have to add event listeners
to run code when the load event happens.

348
00:29:16,080 --> 00:29:24,350
You're getting executed-- the main body of your script is
being executed either during the DOM content loaded phase

349
00:29:24,350 --> 00:29:26,690
or the load phase.

350
00:29:28,290 --> 00:29:29,870
They're isolated.

351
00:29:29,870 --> 00:29:31,090
And what does this mean?

352
00:29:31,090 --> 00:29:36,560
So, no global variables can be accessed from the page.

353
00:29:36,560 --> 00:29:40,150
They can't see anything that you
define in your Content Scripts; and,

354
00:29:40,150 --> 00:29:43,250
likewise, you can't see anything the page defines.

355
00:29:43,250 --> 00:29:50,350
So, if you have a version of jQuery that you want to
use in your Content Scripts, you don't have to worry

356
00:29:50,350 --> 00:29:58,580
about the page also using jQuery, or worse yet, a different
version of jQuery that you might not be able to use.

357
00:29:58,580 --> 00:30:05,130
So, you have complete isolation from the page.

358
00:30:05,130 --> 00:30:06,990
And scripting permissions are the same.

359
00:30:06,990 --> 00:30:15,760
So, think of your Content Scripts as executing
exactly as you would if you put that script

360
00:30:15,760 --> 00:30:19,320
on that web server and executed the code.

361
00:30:19,320 --> 00:30:23,910
You can't do cross domain, XHRs, or anything like that.

362
00:30:23,910 --> 00:30:29,300
And if you need the power of the Application
Layer, all you do is send a message,

363
00:30:29,300 --> 00:30:32,160
and you can get messages back from the Application Layer.

364
00:30:32,160 --> 00:30:39,480
So, if you do need cross domain, XML, HTTP requests,
you can tell your Application Layer to do it

365
00:30:39,480 --> 00:30:43,000
for you and message you back with the result.

366
00:30:43,000 --> 00:30:49,000
So, you really do have the power to do
some amazing things in the Content Scripts.

367
00:30:49,000 --> 00:30:52,220
You just can't do them directly, for security reasons.

368
00:30:52,220 --> 00:31:02,000
So, to send a message to the Global Page, you
tell your webpage, which is the Self object.

369
00:31:02,000 --> 00:31:06,870
You get its tab, and this tab is a proxy object.

370
00:31:06,870 --> 00:31:10,960
It doesn't have any of the APIs available
that you have in the Application Layer.

371
00:31:10,960 --> 00:31:14,640
It only has "dispatchMessage" and "addEventListener."

372
00:31:14,640 --> 00:31:20,330
So, you tell that tab proxy, "Here's
a message, and here's some content."

373
00:31:20,330 --> 00:31:22,980
That gets delivered on the application side.

374
00:31:22,980 --> 00:31:30,520
And if you want to listen for messages in your Content
Script, you add an event listener on the Self object,

375
00:31:30,520 --> 00:31:36,020
and that listens for the message event, and you
register your function, like you would any--

376
00:31:36,020 --> 00:31:42,010
using the DOM addEventListener, but
this is the Extensions addEventListener.

377
00:31:42,010 --> 00:31:44,030
So, that's Content Scripts.

378
00:31:44,030 --> 00:31:48,200
We also allow you to have Content Stylesheets.

379
00:31:48,200 --> 00:31:49,270
They're very similar.

380
00:31:49,270 --> 00:31:51,380
They're loaded once per page.

381
00:31:51,380 --> 00:31:55,470
They match the same whitelist and blacklist of URL patterns.

382
00:31:55,470 --> 00:31:59,360
They're treated as user stylesheets.

383
00:31:59,360 --> 00:32:07,720
So, if you've ever used Safari's User Stylesheet Advance
Preference to make a stylesheet that you affect all pages,

384
00:32:07,720 --> 00:32:13,200
they're treated in the same way,
and all you really need to know is

385
00:32:13,200 --> 00:32:18,200
that your stylesheet doesn't take
precedent over the author's stylesheet.

386
00:32:18,200 --> 00:32:25,230
So, if you have two properties that conflict-- say, the
page wants it to be black, and you want it to be red,

387
00:32:25,230 --> 00:32:30,420
the author is going to win, but you have override power.

388
00:32:30,420 --> 00:32:37,940
You can use the !important keyword on the properties
that you want to say, "I win over the author,"

389
00:32:37,940 --> 00:32:45,190
and that's when you ultimately get the say
over anything the author and the page does.

390
00:32:45,190 --> 00:32:50,560
And you can load relative URLs from your Extension bundle.

391
00:32:50,560 --> 00:32:57,340
So if you have images that you want injected in that page,
you can just refer to them as relative URLs to your bundle,

392
00:32:57,340 --> 00:33:02,090
and they'll automatically just work in
the Content Scripts and stylesheets.

393
00:33:02,090 --> 00:33:04,640
So, that's Content Stylesheets and Scripts.

394
00:33:04,640 --> 00:33:07,470
But what about Full Page Content?

395
00:33:07,470 --> 00:33:13,440
If you want to show a full experience,
very similar to Safari's Top Site feature,

396
00:33:13,440 --> 00:33:18,750
where you have this immersive experience
that your users can interact with.

397
00:33:18,750 --> 00:33:22,590
So, say you have a Toolbar item, and you
want to, when that user clicks on that,

398
00:33:22,590 --> 00:33:29,460
you want to take them to a local immersive experience
that's on their computer, built in to your Extension,

399
00:33:29,460 --> 00:33:32,260
and that's where you use Full Page Content.

400
00:33:32,260 --> 00:33:38,060
And very similarly to Top Sites, there's no
URL shown, because they're just cryptic URLs.

401
00:33:38,060 --> 00:33:49,220
We want the URL to be invisible to the user, so they're
able to type and navigate to content at their whim.

402
00:33:49,220 --> 00:33:56,470
And you load an HTML file from your bundle, using
a special URL that we provide for your Extension,

403
00:33:56,470 --> 00:33:59,930
and they have access to the Content Script APIs.

404
00:33:59,930 --> 00:34:05,530
So, they don't have access to the Application
Layer APIs, because there's still that separation,

405
00:34:05,530 --> 00:34:09,980
but they're available to you in the normal
world, so you don't have to worry about--

406
00:34:09,980 --> 00:34:16,220
you can put your scripts right in the HTML file and
not have to worry about secondary injected scripts.

407
00:34:16,220 --> 00:34:26,000
And to tell your Extension in Safari to load one of these,
you use an API that's available on the Extension object,

408
00:34:26,000 --> 00:34:32,870
the base URI, and that's your URI for your
Extension bundle, and you append a relative path

409
00:34:32,870 --> 00:34:36,010
to that to load an HTML file out of that bundle.

410
00:34:36,010 --> 00:34:43,260
So, in this example, I'm telling the active browser
window's Active Tab, which is the front-most window

411
00:34:43,260 --> 00:34:51,020
and the front-most selected tab, to load this Extension URL,
and that will take them right to your full page experience.

412
00:34:51,020 --> 00:34:56,020
So, that's the Content Layer stuff.

413
00:34:56,020 --> 00:35:00,350
So, now let's show you exactly how
to build one of these Extensions.

414
00:35:00,350 --> 00:35:08,140
I'm going to go ahead and uninstall my Twitter Extension,
because that's the one we're going to be building.

415
00:35:08,140 --> 00:35:12,660
So, I talked about the Extension Builder and
how it's available under the Develop menu.

416
00:35:12,660 --> 00:35:15,940
So, let's go ahead and show it.

417
00:35:17,590 --> 00:35:18,600
Here it is.

418
00:35:18,600 --> 00:35:22,550
It's basically empty until you start creating an Extension.

419
00:35:22,550 --> 00:35:30,350
But the first thing you need to do is install a developer
certificate, and this is the free code-signing certificate

420
00:35:30,350 --> 00:35:33,430
that you can get on the Safari Developer Center.

421
00:35:33,430 --> 00:35:40,820
So, we'll go ahead and install the certificate that
I got, and go ahead and put it into the keychain.

422
00:35:40,820 --> 00:35:43,110
So, here it is.

423
00:35:43,110 --> 00:35:44,860
I'm John Appleseed today.

424
00:35:44,860 --> 00:35:47,090
So, we'll go ahead.

425
00:35:47,090 --> 00:35:49,900
The certificate's installed.

426
00:35:49,900 --> 00:35:55,060
Now, let's go ahead and make a new
Extension in the Extension Builder.

427
00:35:55,060 --> 00:36:01,450
So, in this + button in the corner, you have a menu
that shows up, letting you make a new, brand new,

428
00:36:01,450 --> 00:36:05,920
fresh Extension, or add one that you might
have made earlier, that you just removed,

429
00:36:05,920 --> 00:36:08,190
because you weren't working on it recently.

430
00:36:08,190 --> 00:36:12,770
So, we'll go ahead and make a new Extension,
and we'll go ahead and put it on the Desktop,

431
00:36:12,770 --> 00:36:17,550
and we're going to call it Twitter, and we'll Save.

432
00:36:17,550 --> 00:36:24,680
So, I only typed in one string, but
my Extension is ready to install.

433
00:36:24,680 --> 00:36:29,620
I can install this Extension, except
that it's going to use my keychain item

434
00:36:29,620 --> 00:36:33,710
for my certificate, and now I have an Extension installed.

435
00:36:33,710 --> 00:36:36,720
You'll see it in Safari's Extension Preferences.

436
00:36:36,720 --> 00:36:38,140
It just doesn't do anything yet.

437
00:36:38,140 --> 00:36:44,740
We haven't given it any logic, but
it's a fully functional Extension--

438
00:36:44,740 --> 00:36:50,620
fully functional, doing nothing--
but let's go ahead and build it up.

439
00:36:50,620 --> 00:36:57,020
So, the Extension Builder is, basically, a form
that you fill out, that asks information of you.

440
00:36:57,020 --> 00:37:01,570
Who are you, the author, a description
of the Extension, your website.

441
00:37:01,570 --> 00:37:16,970
So, let's say this is a Twitter Search bar, and we can
provide a website that's optional, and a bundle identifier,

442
00:37:16,970 --> 00:37:20,610
if you're familiar with iPhone and Mac OS X applications.

443
00:37:20,610 --> 00:37:27,930
This is your unique identifier for the Extension,
so it's usually a reverse domain name syntax.

444
00:37:27,930 --> 00:37:30,460
We'll go ahead and leave it as the default.

445
00:37:30,460 --> 00:37:36,050
And an update manifest, this is where you
can provide a URL that we ping your server,

446
00:37:36,050 --> 00:37:42,840
because you're self-hosting these Extensions as
developers, and we can request when new updates are pulled

447
00:37:42,840 --> 00:37:48,740
down from the server, so you can automatically
notify your users of updates with this.

448
00:37:48,740 --> 00:37:51,950
Diversion Information, we're going
to go ahead and leave as the default.

449
00:37:51,950 --> 00:37:55,500
And we'll go ahead and specify an access level.

450
00:37:55,500 --> 00:37:58,900
This blocks XHRs by default.

451
00:37:58,900 --> 00:38:03,120
So, I know we need to access Twitter's Search API.

452
00:38:03,120 --> 00:38:08,960
So, we'll make a new domain pattern of *.Twitter.com.

453
00:38:08,960 --> 00:38:15,740
That will let me access any cross domain
things that you normally wouldn't be able

454
00:38:15,740 --> 00:38:18,310
to do from webpages, from your Global Page.

455
00:38:18,310 --> 00:38:23,000
So, you can access Twitter.com or whatever you put in here.

456
00:38:23,000 --> 00:38:28,720
And I don't need access to secure pages, so this
prevents access and inadvertent access to secure pages.

457
00:38:28,720 --> 00:38:34,550
So, if you really do need access to
HTTPS sites, you can check this checkbox.

458
00:38:34,550 --> 00:38:38,510
So, now, I'm down to the part where I need to specify files.

459
00:38:38,510 --> 00:38:45,870
So, I'm going to go ahead and open up my demo files
here that I've premade, and I have some HTML, CSS,

460
00:38:45,870 --> 00:38:50,390
and JavaScripts, all the things
you need to build an Extension,

461
00:38:50,390 --> 00:38:53,950
that I'm going to drag over into my Extension bundle.

462
00:38:53,950 --> 00:38:59,930
But just to prove that these are JavaScript files and HTML,

463
00:38:59,930 --> 00:39:03,860
this is all the code that I have in
my Twitter Extension's Global Page.

464
00:39:03,860 --> 00:39:04,660
Very simple.

465
00:39:04,660 --> 00:39:10,380
I'll go over the details of this, so you don't
have to worry about looking at this now, but CSS,

466
00:39:10,380 --> 00:39:13,430
and HTML, and JavaScript, all the things you need.

467
00:39:13,430 --> 00:39:20,190
So, I'm going to drag this over to my
Extension and drop them into my bundle.

468
00:39:20,190 --> 00:39:22,940
And the Extension Builder has already put an Info.plist,

469
00:39:22,940 --> 00:39:27,490
and that's like the manifest file
for your Extension in this bundle.

470
00:39:27,490 --> 00:39:31,440
So, let's go ahead and close that, and close this.

471
00:39:31,440 --> 00:39:34,130
So, now you'll see it picked up my icon.

472
00:39:34,130 --> 00:39:40,080
I now have the Twitter icon showing up right here.

473
00:39:40,080 --> 00:39:48,370
So, let's go ahead and associate our Global Page.

474
00:39:48,370 --> 00:39:52,670
It's automatically detected that these are
HTML files, and I need to pick an HTML file.

475
00:39:52,670 --> 00:39:58,620
So, we only show you HTML files, so it's
easy to isolate what your Global Page is.

476
00:39:58,620 --> 00:40:05,470
And now I know my Twitter Extension has a Toolbar,
a bar, so I'm going to make it called Twitter,

477
00:40:05,470 --> 00:40:09,210
and this is what's shown to the user in the View menu.

478
00:40:09,210 --> 00:40:15,330
And I'll go ahead and pick Bar, and that's my
HTML file for my bar, and I'll pick an identifier.

479
00:40:15,330 --> 00:40:21,660
This is your internal identifier, so if you're localizing
your Extension, you don't have to redo your code.

480
00:40:21,660 --> 00:40:27,970
You can always refer to it as the Twitter Bar,
even if it says something else in another language.

481
00:40:27,970 --> 00:40:32,110
So, that's all I need to build my Extension.

482
00:40:32,110 --> 00:40:33,060
I wrote the code.

483
00:40:33,060 --> 00:40:39,140
There's not a whole lot of code, and I've automatically
built it up with the Extension Builder from scratch here.

484
00:40:39,140 --> 00:40:45,800
So, let's go ahead and install it, and we'll
go to the View menu and show my Twitter Bar.

485
00:40:45,800 --> 00:40:48,100
[applause] So, let's see that again.

486
00:40:48,100 --> 00:40:58,880
I had it disabled by default, and
Safari remembered that for me.

487
00:40:58,880 --> 00:41:02,610
So, we'll uninstall and reinstall,
and it shows right back up.

488
00:41:02,610 --> 00:41:06,960
So, you can iterate, and these buttons
let you control the installation.

489
00:41:06,960 --> 00:41:12,740
And if you're iterating in your text editor, and you're
coming back to the Builder, just click the reload button,

490
00:41:12,740 --> 00:41:18,520
and that pulls in the new resources,
re-signs everything, and installs it.

491
00:41:18,520 --> 00:41:25,690
And if you're wanting to distribute your Extension
to your users, you would build it up as a package,

492
00:41:25,690 --> 00:41:28,820
and you would save it on your Desktop or wherever you want.

493
00:41:28,820 --> 00:41:37,840
And here's the built Extension that you can upload to your
web server, and link to, and your users can download that,

494
00:41:37,840 --> 00:41:42,490
and that's also what you would use to
submit to our Safari Extension Gallery.

495
00:41:42,490 --> 00:41:48,090
I want to add a Toolbar item to my Extension
to go into a full page experience that I have.

496
00:41:48,090 --> 00:41:54,280
That's very easy, as well, so let's
go ahead and drag in some more files.

497
00:41:54,280 --> 00:42:02,980
I have a Toolbar Item icon, and the image needs to have
an Alpha Channel, and that's what Safari uses to apply

498
00:42:02,980 --> 00:42:09,250
that look that matches the current system
and some HTML, JavaScript, and CSS.

499
00:42:09,250 --> 00:42:13,550
So, I'm going to drag these over to my Extension.

500
00:42:13,550 --> 00:42:22,630
I'm also going to open up my Extension and
modify the Global Page to add some code.

501
00:42:22,630 --> 00:42:28,250
So, I have just a few lines of code that I
need to add to make this Toolbar item work.

502
00:42:28,250 --> 00:42:33,160
Oops. So we'll put this right at the bottom here.

503
00:42:33,160 --> 00:42:35,260
And this is the command event listener stuff.

504
00:42:35,260 --> 00:42:39,560
And I'll go over these in slides right after this,
so you don't have to worry about looking at it now.

505
00:42:39,560 --> 00:42:43,290
So, that's all I needed to add to
get this Toolbar item to show up.

506
00:42:43,290 --> 00:42:46,450
And let's go ahead and uninstall and reinstall.

507
00:42:46,450 --> 00:42:53,790
Oh, I forgot to associate the Toolbar item,
so let's go ahead and make a new Toolbar item.

508
00:42:53,790 --> 00:43:03,780
We'll call this Twitter Flow, and this is the text
that shows up, like, if it's in the Overflow menu,

509
00:43:03,780 --> 00:43:07,060
and the Palette Label is what you
see in the customized sheet.

510
00:43:07,060 --> 00:43:09,800
And if you don't provide it, it just uses the label.

511
00:43:09,800 --> 00:43:10,770
Same for the Toolbar item.

512
00:43:10,770 --> 00:43:15,590
It'll default to the label, if you leave it
empty, and we will pick our Toolbar item pane.

513
00:43:15,590 --> 00:43:22,170
And we'll give it an identifier that's similar
to the bars, so we'll just call it Twitter,

514
00:43:22,170 --> 00:43:25,780
and we'll tell it the command string
to send, when that command event fires.

515
00:43:25,780 --> 00:43:29,970
When the user clicks on the item,
what command is this going to perform?

516
00:43:29,970 --> 00:43:38,360
So, we'll call this Show Twitter Flow, and that's what
my code is expecting, and it's included by default.

517
00:43:38,360 --> 00:43:43,880
We can turn that off, if we want, but it's recommended
that you keep it on, so your users see the item right away.

518
00:43:43,880 --> 00:43:46,620
So, we'll go ahead and uninstall and reinstall.

519
00:43:46,620 --> 00:43:59,670
And you'll see the Toolbar item has shown up, and
it's injected right next to the Back/Forward buttons.

520
00:43:59,670 --> 00:44:06,500
[applause] And when I click on this, it's going to
take me to my full HTML5 experience that I've made,

521
00:44:06,500 --> 00:44:13,690
using CSS3 animations and transforms,
using 3D transforms, in this case.

522
00:44:13,690 --> 00:44:18,190
And you'll notice the Bar and the Twitter
Flow in the page are synchronized.

523
00:44:18,190 --> 00:44:23,920
The Global Page is the one telling it to change,
so I have a timer in my Global Page updating all

524
00:44:23,920 --> 00:44:27,090
of these user interface elements, so they stay in sync.

525
00:44:27,090 --> 00:44:31,880
So, if I have another window open,
my two Toolbars are in sync.

526
00:44:31,880 --> 00:44:32,450
Wait for it.

527
00:44:32,450 --> 00:44:34,340
There it goes.

528
00:44:34,340 --> 00:44:37,420
So, that's what you should use your Global Page to do,

529
00:44:37,420 --> 00:44:42,890
synchronize all your user interface
elements, make all your bars work together.

530
00:44:42,890 --> 00:44:46,020
So, that's how to build the Twitter Extension.

531
00:44:47,250 --> 00:44:51,120
So, let's dive in, in what I showed you.

532
00:44:51,120 --> 00:44:54,800
So, I showed you the Extension
Builder, and this is the one-stop shop,

533
00:44:54,800 --> 00:44:58,320
where you go and define and build your Extension.

534
00:44:58,320 --> 00:45:05,370
It's everything you need to specify what your
Extension does, hook up all your code, and build it,

535
00:45:05,370 --> 00:45:09,260
and package it, so you can upload it to your servers.

536
00:45:09,260 --> 00:45:15,040
It requires a free code-signing certificate
from the Safari Developer Center,

537
00:45:15,040 --> 00:45:17,310
and it lets you manage multiple Extensions.

538
00:45:17,310 --> 00:45:22,500
I only had one that I showed you, but you can have a
whole sidebar full of Extensions that you're working on.

539
00:45:22,500 --> 00:45:29,040
And the certificate's available at
the Safari Developer Center for free.

540
00:45:29,040 --> 00:45:31,010
So, let's talk about some of the code.

541
00:45:31,010 --> 00:45:37,080
So, I have these bars that I have, and they
need to know what the current Tweet is,

542
00:45:37,080 --> 00:45:41,170
since the Global Page is the one that's
downloading and requesting all the Tweets.

543
00:45:41,170 --> 00:45:44,120
I need to show that Tweet when my Bar loads.

544
00:45:44,120 --> 00:45:48,570
So, when a user creates a new window, my Bar executes.

545
00:45:48,570 --> 00:45:51,740
It needs to show some information right away.

546
00:45:51,740 --> 00:45:59,370
So, this gets called during onload, and it immediately
talks to the Global Page, gets the Content window

547
00:45:59,370 --> 00:46:02,420
to the Global Page, so I can access its global variables.

548
00:46:02,420 --> 00:46:09,410
And on that Global window, I have a Tweet Array, and
this array has all the Tweets that I have available.

549
00:46:09,410 --> 00:46:16,480
And if that array exists, and it has a length-- because
your Bar could still be loaded before the Global Page,

550
00:46:16,480 --> 00:46:21,480
right at startup, so you need to be careful
of using these objects during launch.

551
00:46:21,480 --> 00:46:25,190
So, just be careful when you do that.

552
00:46:25,190 --> 00:46:30,070
And I just tell my Bar to show this Tweet,
and I also access the current Tweet Index.

553
00:46:30,070 --> 00:46:33,480
So, it automatically shows whatever the current Tweet is.

554
00:46:33,480 --> 00:46:40,840
So, if I'm opening a new window, and the Tweet Index is
incremented to the 10th Tweet, it will automatically show

555
00:46:40,840 --> 00:46:44,480
that 10th Tweet to be in sync with all the other windows.

556
00:46:44,480 --> 00:46:47,540
So, that's working from a bar with the Global Page.

557
00:46:47,540 --> 00:46:53,760
Inside the Global Page, when that timer fires,
that I was talking about, it calls Show Tweet,

558
00:46:53,760 --> 00:47:01,240
and it passes in the current Tweet that needs to be shown,
and it gets all of the bars that need to be updated,

559
00:47:01,240 --> 00:47:08,510
iterates over all of them, gets their Content window,
very similar to the API you get from the Global Page

560
00:47:08,510 --> 00:47:17,490
to get the Content window, and it calls the function
Show Tweet in that Bar, so the Bar will show that Tweet.

561
00:47:17,490 --> 00:47:22,720
And it's calling the same function that I had in
my previous slide, that gets called right away

562
00:47:22,720 --> 00:47:26,820
when the Bar loads, but the Global Page can call it, too.

563
00:47:26,820 --> 00:47:29,090
Same thing for the Tweet Flow Tabs.

564
00:47:29,090 --> 00:47:36,790
But since these are not directly callable, like the bars
are, because they're isolated in that content layer,

565
00:47:36,790 --> 00:47:43,000
I have to dispatch a message, telling it to
show the Tweet, and it listens for this message,

566
00:47:43,000 --> 00:47:49,050
takes the Tweet that I passed in my message,
and calls its internal Show Tweet function.

567
00:47:49,050 --> 00:47:57,330
So, it's indirect, but you can pass the same information
that you would, if you were talking to a Bar directly.

568
00:47:57,330 --> 00:48:05,790
And that's the same way you would talk to a Content Script
or any other scripts that you have in the Content area.

569
00:48:05,790 --> 00:48:12,520
So, responding to commands, this is the code that I
dragged in when I wanted to add that Toolbar item,

570
00:48:12,520 --> 00:48:24,240
and I listened for the command event on the application, and
it calls my Perform Command Function when that event fires.

571
00:48:24,240 --> 00:48:30,460
And you should listen, you should check
the command identifier on the event.

572
00:48:30,460 --> 00:48:35,580
If you add more Toolbar items in the future,
you're going to have different commands for those,

573
00:48:35,580 --> 00:48:42,020
but you don't want your code running when one of the
items was clicked, and it was meant for the other.

574
00:48:42,020 --> 00:48:44,970
So, you should always check that command text.

575
00:48:44,970 --> 00:48:46,920
And in this case, I'm using a Switch Statement.

576
00:48:46,920 --> 00:48:50,300
So, even if you have one Toolbar item,
you should always check the command.

577
00:48:50,300 --> 00:48:53,000
And I'm getting the current browser window.

578
00:48:53,000 --> 00:48:58,410
Or if the browser window isn't created, there's
no browser windows, I'm going to make a new one.

579
00:48:58,410 --> 00:49:05,210
But, in reality, this would never happen, because my
Toolbar item had to be in a window before it was clicked.

580
00:49:05,210 --> 00:49:10,440
But you could have the commands fire some
other time, when you don't have a window open,

581
00:49:10,440 --> 00:49:16,260
but this is just for demonstration purposes on
how you can either access the Active window--

582
00:49:16,260 --> 00:49:19,930
if there isn't one already, you can create a new one.

583
00:49:19,930 --> 00:49:29,330
And I tell that window, I tell its Active tab to load
a new URL, and I get the base URI from my Extension,

584
00:49:29,330 --> 00:49:35,620
and load my Tweet Flow HTML file, and it's
that simple to show your full page experience.

585
00:49:35,620 --> 00:49:37,980
So, that's responding to commands.

586
00:49:37,980 --> 00:49:43,450
So, that's basics of how to build an Extension,
and the second session, after this one,

587
00:49:43,450 --> 00:49:47,890
is going to go into more detail on specifics
of Content Scripts and message passing.

588
00:49:47,890 --> 00:49:50,680
So, if you want to stay around for that, you should.

589
00:49:50,680 --> 00:49:55,190
So, in summary, sign up for the Developer program.

590
00:49:55,190 --> 00:49:55,970
It's free.

591
00:49:55,970 --> 00:50:00,690
You have no excuse not to sign up
for it and start building Extensions.

592
00:50:02,040 --> 00:50:04,880
Turn on the Develop menu and enable Extensions.

593
00:50:04,880 --> 00:50:11,130
That's your way to get access to this
Developer feature and start building them today.

594
00:50:11,130 --> 00:50:14,960
And get started with the Extension Builder.

595
00:50:14,960 --> 00:50:19,800
It's the simplest way to build an Extension for any browser.

596
00:50:19,800 --> 00:50:25,550
And developers are just loving it, and I hope you do, too.

597
00:50:25,550 --> 00:50:31,460
So, if you have any questions, Vicki Murley is
the Safari Internet and Technologies evangelist.

598
00:50:31,460 --> 00:50:33,650
You can access the Safari Dev Center.

599
00:50:33,650 --> 00:50:41,000
It's been revamped with a lot of
information, documentation on Extensions.

600
00:50:41,000 --> 00:50:43,380
We have extensive documentation.

601
00:50:43,380 --> 00:50:48,850
They worked their butt off to get you
great documentation on how to build these.

602
00:50:48,850 --> 00:50:51,430
And some great sample code up there.

603
00:50:51,430 --> 00:50:59,570
We have about seven samples of Extensions that you can
play with, and download, and get started building on.

604
00:50:59,570 --> 00:51:01,170
So, we have some related sessions.

605
00:51:01,170 --> 00:51:05,490
We have Part Two coming up right after this,
and immediately after that, in the same room,

606
00:51:05,490 --> 00:51:09,390
you can just keep in your seats and enjoy the ride.

607
00:51:09,390 --> 00:51:13,070
We have some great sessions about
the developer tools coming up, too.

608
00:51:13,070 --> 00:51:17,210
So, you can use those to debug and
experiment with your Extensions.

