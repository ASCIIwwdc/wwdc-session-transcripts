1
00:00:06,720 --> 00:00:11,180
>> Anders Bertelrud: Welcome to 307, Introducing Xcode 4.

2
00:00:11,180 --> 00:00:12,130
I'm Anders Bertelrud.

3
00:00:12,130 --> 00:00:17,540
I'm the Xcode Architect and I'll be joined later on,
on the stage by Brooke Callahan, a dear colleague

4
00:00:17,540 --> 00:00:20,870
and Ron Lue-Sang also dear colleague from the same team.

5
00:00:20,870 --> 00:00:24,760
And together, we're going to give
you a closer look at Xcode 4.

6
00:00:24,760 --> 00:00:29,190
So all of you, I presumed saw the State of
the Union, Developers Tool State of the Union

7
00:00:29,190 --> 00:00:31,080
because there were no other sessions at the same time.

8
00:00:31,080 --> 00:00:38,250
So you've seen Developer Tools, the
Xcode 4 developer preview introduced.

9
00:00:38,250 --> 00:00:39,960
We're going to take a closer in this session.

10
00:00:39,960 --> 00:00:43,730
This is the first Xcode 4 specific
session since the State of the Union.

11
00:00:43,730 --> 00:00:49,720
So, one of the big things in Xcode 4 is that we've
improved the workflow by looking at what most

12
00:00:49,720 --> 00:00:54,640
of our developers do everyday and trying
to take advantage of that in a better UI.

13
00:00:54,640 --> 00:00:58,800
We've of course also put Interface Builder inside the app.

14
00:00:58,800 --> 00:01:05,390
So that was one of the big request we got and actually
let's us tie the tools together in a much better way.

15
00:01:05,390 --> 00:01:09,010
As you've seen a little bit of and you'll see more of here.

16
00:01:09,010 --> 00:01:14,070
We have the Editor Assistant which in the
State of the Union, you saw some examples of.

17
00:01:14,070 --> 00:01:21,090
One of my other colleagues, Matt, showed how to use
Interface Builder documents or Core Data documents

18
00:01:21,090 --> 00:01:22,990
and have source code track that automatically.

19
00:01:22,990 --> 00:01:25,120
So we're pretty excited about those features.

20
00:01:25,120 --> 00:01:26,480
We're using the LLVM compiler.

21
00:01:26,480 --> 00:01:31,130
In this case, it's a lot of flexibility
and power in terms of better indexing,

22
00:01:31,130 --> 00:01:34,990
the static analysis that you've already seen.

23
00:01:34,990 --> 00:01:39,280
This also lets us do Fix-its where, well, if the
compiler can tell you there's a missing semicolon,

24
00:01:39,280 --> 00:01:40,710
why can't it just put one there?

25
00:01:40,710 --> 00:01:43,140
Well, with LLVM, now we can.

26
00:01:43,140 --> 00:01:49,740
And the Version Editor where we can see our disk before
we check them in, etc. There's a new Debugger of course.

27
00:01:49,740 --> 00:01:54,660
So what specifically going to focus on in this session,
we're going to talk about some of all of those.

28
00:01:54,660 --> 00:02:00,770
But I want to talk more about this concept of
workspaces which is similar to the concept you see

29
00:02:00,770 --> 00:02:03,690
in some other IDs and other platforms but not exactly.

30
00:02:03,690 --> 00:02:06,770
So we'll talk about what a workspace
means in the context of Xcode 4.

31
00:02:06,770 --> 00:02:09,850
This was touched on just a little bit
in the State of the Union but it's kind

32
00:02:09,850 --> 00:02:11,300
of important that you see how it fits together.

33
00:02:11,300 --> 00:02:13,110
So we'll spend a bit of time on that.

34
00:02:13,110 --> 00:02:17,660
We're going to talk more about the various
ways to navigate inside of Xcode 4.

35
00:02:17,660 --> 00:02:23,840
A lot of what we try to do here with the improved workflow
is to ease the navigation to take advantage of the lengths

36
00:02:23,840 --> 00:02:29,670
between the various parts of your code, both those
text based like source files and non-text based,

37
00:02:29,670 --> 00:02:36,320
like Core Data files, those kinds of things, so that you
navigate between the various parts in a lot better way.

38
00:02:36,320 --> 00:02:42,460
We'll talk about editing both as it relates
to the related editors, the assistant.

39
00:02:42,460 --> 00:02:47,670
And also some of the specific file tech
editors that have improved in Xcode 4.

40
00:02:47,670 --> 00:02:50,500
We'll talk more about the improved Organizer.

41
00:02:50,500 --> 00:02:53,000
Ron is going to show you some of that.

42
00:02:53,000 --> 00:02:57,620
The Version Editor, we'll talk little bit
more about and again some of the Debugging.

43
00:02:57,620 --> 00:03:05,230
We'll end up by talking some more about the theory of
these new schemes word that we use to describe the future

44
00:03:05,230 --> 00:03:10,500
where you can set up little snippets and workflow, give them
important names that are important to you as a developer

45
00:03:10,500 --> 00:03:12,650
and then run them at various points in your workflow.

46
00:03:12,650 --> 00:03:16,140
So we'll start off by Workspaces.

47
00:03:16,140 --> 00:03:19,710
And I just want to show what's--
where on the workspace window.

48
00:03:19,710 --> 00:03:22,450
Actually at this time, I guess most of you or many

49
00:03:22,450 --> 00:03:27,440
of you have downloaded already the Xcode 4
developer preview and started using it maybe.

50
00:03:27,440 --> 00:03:29,540
That was something of course you
hadn't seen yet in the city.

51
00:03:29,540 --> 00:03:33,920
Can I see how many people are actually using
or have downloaded and tried out Xcode 4.

52
00:03:33,920 --> 00:03:36,590
Wow, cool.

53
00:03:36,590 --> 00:03:43,580
So some of this may be familiar too, but anyway,
we'll-- hopefully, I can show you something new.

54
00:03:43,580 --> 00:03:48,720
Alright, so I'm going to start by launching Xcode

55
00:03:48,720 --> 00:03:53,410
and you see the welcome screen here
where we can do all kinds of stuff.

56
00:03:53,410 --> 00:03:55,860
We have a lot of new templates.

57
00:03:55,860 --> 00:04:02,210
They're improved compared to the ones in Xcode 3 but
they were the basic same types that you've seen before.

58
00:04:02,210 --> 00:04:08,250
For example, you have here iPhone, the Mac
OS X, the library icon here, static library,

59
00:04:08,250 --> 00:04:13,820
kind of looks a mausoleum and-- but
I think it's a library actually.

60
00:04:13,820 --> 00:04:20,000
[Laughter] So-- But it's-- I just want to
show the various types of icons we have here

61
00:04:20,000 --> 00:04:24,660
and all of these represent various customized
templates, some of them with options

62
00:04:24,660 --> 00:04:28,680
that you can have once you pick an application
and you choose whether you use this Core Data,

63
00:04:28,680 --> 00:04:32,630
whether you have a document-based
application, etc. I'm actually not going

64
00:04:32,630 --> 00:04:35,120
to create a new workspace or a new project right now.

65
00:04:35,120 --> 00:04:37,250
Rather, I'm going to create a new workspace.

66
00:04:37,250 --> 00:04:39,560
And what I get by default has been a blank workspace.

67
00:04:39,560 --> 00:04:43,610
I'm going to start out actually in the
Documents folder and what I'm going

68
00:04:43,610 --> 00:04:46,750
to do here-- let's see, let me take my documents.

69
00:04:46,750 --> 00:04:48,680
There we go.

70
00:04:48,680 --> 00:04:52,970
And let me go ahead and call this--
I'm going to call this Baffle.

71
00:04:52,970 --> 00:04:55,350
And what I'm-- hope I can spell.

72
00:04:55,350 --> 00:04:56,530
OK, there we go.

73
00:04:56,530 --> 00:05:04,150
So a couple of years ago when we introduce the iPhone SDK,
one of the guys in our team wrote a little game called

74
00:05:04,150 --> 00:05:12,800
"Baffle" which was for the iOS SDK and what I want to show
you here is creating a workspace using the Mac OS X version

75
00:05:12,800 --> 00:05:19,140
of that project and using Cocoa Touch version iOS project,
putting them on the same workspace and working with them

76
00:05:19,140 --> 00:05:23,130
across the platforms in the same workspace.

77
00:05:23,130 --> 00:05:26,970
You might want to do this if you have two
related projects to share some code for example.

78
00:05:26,970 --> 00:05:32,460
So I'll start by saying, add files, I go
ahead-- just go in here and pick the projects.

79
00:05:32,460 --> 00:05:36,570
I'll go ahead and say, "I'm going to add the Baffle Cocoa."

80
00:05:36,570 --> 00:05:37,580
There are quicker ways.

81
00:05:37,580 --> 00:05:40,580
You can of course just drag in the
icon from the disk but in demos,

82
00:05:40,580 --> 00:05:44,110
I like to use the menus to show people what they can do.

83
00:05:44,110 --> 00:05:48,550
So the other thing I'm going to though
is drag in some non-source code content.

84
00:05:48,550 --> 00:05:50,390
In this case, I have a task file.

85
00:05:50,390 --> 00:05:52,640
So I'm going to ahead and add all this.

86
00:05:52,640 --> 00:05:58,510
So from the left side now, we see the
references to the projects into the task list.

87
00:05:58,510 --> 00:06:02,360
I can view it inline in the editor.

88
00:06:02,360 --> 00:06:07,170
And has it been mentioned, I think and we're going to
talk about in this session, we actually can see anything

89
00:06:07,170 --> 00:06:12,980
that has a Quick Look preview installed for
it where you can view it inside of Xcode.

90
00:06:12,980 --> 00:06:14,600
So we have here a project.

91
00:06:14,600 --> 00:06:15,930
We have here another project.

92
00:06:15,930 --> 00:06:18,810
And I'm just going to navigate down
to one of the source files here.

93
00:06:18,810 --> 00:06:22,530
And just again, give you an overview
of what's on the left side here.

94
00:06:22,530 --> 00:06:24,440
On the left side, we have the navigation area.

95
00:06:24,440 --> 00:06:29,960
Here we show you the various aspects of the projects
that are related to your workspace that you have added

96
00:06:29,960 --> 00:06:34,840
to you workspace and as you add more of them in here,
the navigation area shows you more and more content.

97
00:06:34,840 --> 00:06:41,740
So obviously here, you see the files and we have a heading
row that shows you where the actual projects start.

98
00:06:41,740 --> 00:06:43,990
So you can group projects together also.

99
00:06:43,990 --> 00:06:47,340
If you have 40 plug-ins, you can
put them all in the same group.

100
00:06:47,340 --> 00:06:51,280
You don't have to look at them all the time but
they're still accessible from your workspace.

101
00:06:51,280 --> 00:06:55,110
We have several different navigators here.

102
00:06:55,110 --> 00:06:56,970
We're looking at the project navigator.

103
00:06:56,970 --> 00:07:01,990
There is also the simple navigator and as we switch
to that, it starts counting out the classes in here.

104
00:07:01,990 --> 00:07:07,350
We can actually navigate through what the class
hierarchy is going to look like at runtime as a union

105
00:07:07,350 --> 00:07:11,510
of all the class hierarchies that
are reachable from the project.

106
00:07:11,510 --> 00:07:13,430
There's the search navigator.

107
00:07:13,430 --> 00:07:15,180
We can find and replace from in here.

108
00:07:15,180 --> 00:07:17,860
There was a demo of that in the State of the Union.

109
00:07:17,860 --> 00:07:23,800
The issue navigator here, it shows you a summary of
the errors and warnings produced by the various types

110
00:07:23,800 --> 00:07:26,130
of compilers and translators that we use.

111
00:07:26,130 --> 00:07:32,670
And then we have the debugger navigator,
the breakpoints and the log.

112
00:07:32,670 --> 00:07:34,170
The log one is interesting.

113
00:07:34,170 --> 00:07:38,270
What we've done actually is to keep
historical logs now in Xcode 4.

114
00:07:38,270 --> 00:07:43,490
In Xcode 3, when you quit your project or you
quit Xcode and you started up your project

115
00:07:43,490 --> 00:07:45,740
or if you rebuild, you would lose the previous logs.

116
00:07:45,740 --> 00:07:48,180
Here we actually keep a history and
that can be useful when you go back

117
00:07:48,180 --> 00:07:51,640
and you see well, what [background applause]-- OK, cool.

118
00:07:51,640 --> 00:07:55,540
This feature is for you.

119
00:07:55,540 --> 00:07:57,990
[Laughter] Along the top, we have the scheme popup.

120
00:07:57,990 --> 00:08:01,340
We're going to get back to this
but we have this concept of schemes

121
00:08:01,340 --> 00:08:05,470
which is configurations of running your various products.

122
00:08:05,470 --> 00:08:09,460
And on the right-hand side, we see the
destinations that you can run them on.

123
00:08:09,460 --> 00:08:17,440
Obviously for an iPhone, there is iOS device and simulator,
etc. The activity panel here, the activity viewer,

124
00:08:17,440 --> 00:08:22,290
it shows you any building that's going on,
indexing, search and replace, that kind of thing.

125
00:08:22,290 --> 00:08:27,640
So, we'll show you right upfront-- and if there're
errors or warnings that show up there as well.

126
00:08:27,640 --> 00:08:33,230
We're looking at the standard editor right now which is
the simple one where you just click on the file or navigate

127
00:08:33,230 --> 00:08:37,740
to it in some other way and just shows
you the one file that you've chosen.

128
00:08:37,740 --> 00:08:39,880
As you've seen, we also have the Version Editor.

129
00:08:39,880 --> 00:08:43,980
I wanted to show a couple things here that
may be wasn't apparent-- weren't apparent.

130
00:08:43,980 --> 00:08:49,030
You can change the split orientation
which is sometimes very useful.

131
00:08:49,030 --> 00:08:55,750
And there are other aspects that you can navigate too,
the includes and the super classes and those things.

132
00:08:55,750 --> 00:09:02,950
In the Version Editor, we see the different versions
that exist of the same file that are repository.

133
00:09:02,950 --> 00:09:06,180
And this was touched briefly on the
State of the Union but not talked about.

134
00:09:06,180 --> 00:09:09,990
You can actually scroll or just hover over here
and you actually see the checking comments.

135
00:09:09,990 --> 00:09:15,260
And I find this very useful actually because I can
be able to go to a particular version of repository.

136
00:09:15,260 --> 00:09:21,000
We're using a getRepository on this project here
but it also works with some versions of course.

137
00:09:21,000 --> 00:09:28,060
And finally, on the right side here, we have
the inspector area and we have the library area.

138
00:09:28,060 --> 00:09:33,900
So before I switch-- that's a bit of a-- just an overview
of what are actually the various pieces in the window here.

139
00:09:33,900 --> 00:09:38,880
I'm going to go ahead and run and build-- build
and run and just show what this product is

140
00:09:38,880 --> 00:09:41,130
in case you don't remember from two years ago.

141
00:09:41,130 --> 00:09:42,780
And we have an error.

142
00:09:42,780 --> 00:09:44,690
Guys, what did you do?

143
00:09:44,690 --> 00:09:46,890
I gave the demo drive to you and
you were going to check it out

144
00:09:46,890 --> 00:09:49,650
and make sure everything work,
did you put an error in there?

145
00:09:49,650 --> 00:09:50,620
What is this?

146
00:09:50,620 --> 00:09:55,180
Test this thoroughly and remove before the demo.

147
00:09:55,180 --> 00:09:56,530
Yeah, thank you Ron.

148
00:09:56,530 --> 00:10:00,430
OK. [Laughter] See I'm awake, alright.

149
00:10:00,430 --> 00:10:05,290
You might have noticed-- I can actually go to
the issue navigator just by clicking on here.

150
00:10:05,290 --> 00:10:08,070
I find that kind of convenient whenever an error shows up.

151
00:10:08,070 --> 00:10:12,370
So we'll run again and we'll see if it works this time.

152
00:10:12,370 --> 00:10:14,860
Alright, OK.

153
00:10:14,860 --> 00:10:16,480
So I'll go back to slides.

154
00:10:16,480 --> 00:10:19,290
I do that myself actually.

155
00:10:19,290 --> 00:10:21,940
Here we go.

156
00:10:21,940 --> 00:10:23,490
So what do we see?

157
00:10:23,490 --> 00:10:26,500
I mean, you saw the same thing in the
State of Union but part of the point

158
00:10:26,500 --> 00:10:28,820
of this entry was to talk more about the concepts too.

159
00:10:28,820 --> 00:10:30,690
So I mentioned this concept of workspace.

160
00:10:30,690 --> 00:10:31,330
We've been hearing that.

161
00:10:31,330 --> 00:10:36,950
So workspace a place where you can put references
to the source files that matters to you.

162
00:10:36,950 --> 00:10:42,980
It represents your workflow and so you might create
one for when you're doing your feature development

163
00:10:42,980 --> 00:10:51,470
and you have references to spec files or to may be protocol
definition files and PDF or what have you in file formats.

164
00:10:51,470 --> 00:10:56,350
You can have another one that you've configured for let's
say performance tuning and it has a bunch of schemes

165
00:10:56,350 --> 00:10:58,600
in there that launch instruments
in various interesting ways.

166
00:10:58,600 --> 00:11:01,690
So you can create these just as you like them.

167
00:11:01,690 --> 00:11:07,160
They're loose collection of references to
projects, folders and just PDF documents.

168
00:11:07,160 --> 00:11:10,620
They also contain schemes so you can create these schemes

169
00:11:10,620 --> 00:11:15,900
and as you may have heard about, we
actually have two kinds of schemes.

170
00:11:15,900 --> 00:11:18,580
One is a launch scheme, that's pretty simple.

171
00:11:18,580 --> 00:11:20,780
At the end of it, it just launches your product.

172
00:11:20,780 --> 00:11:23,070
That could be GDB, LDB.

173
00:11:23,070 --> 00:11:25,150
It could be in one of the instruments.

174
00:11:25,150 --> 00:11:29,430
It could be launching in a simulator or
on the device, those kinds of things.

175
00:11:29,430 --> 00:11:35,170
Distribution schemes, they're a little bit different and
that the end product of them is that you get a disk image

176
00:11:35,170 --> 00:11:38,710
or you get some other thing that you can actually deploy.

177
00:11:40,260 --> 00:11:42,490
So I said that the workspace references the files.

178
00:11:42,490 --> 00:11:44,730
It doesn't contain any files.

179
00:11:44,730 --> 00:11:46,540
It doesn't contain any projects.

180
00:11:46,540 --> 00:11:51,580
This means you can have a single project which builds
your application and contains all the source code for it

181
00:11:51,580 --> 00:11:56,060
and you can have multiple workspaces
that all reference the same project.

182
00:11:56,060 --> 00:11:59,570
They just have different workflows associated with them.

183
00:11:59,570 --> 00:12:04,790
And again, this is useful for development versus
bug hunting versus testing and that kind of stuff.

184
00:12:04,790 --> 00:12:10,340
In every workspace, builds into its own
built arena and it has its own index.

185
00:12:10,340 --> 00:12:15,990
And so if you have let's say, one workspace represents
version 1.0 of your project and another one is 2.0,

186
00:12:15,990 --> 00:12:20,860
you can build them independently and even if they have
the same name, you don't have to have the one share--

187
00:12:20,860 --> 00:12:26,410
the one central share, the build folder, that
you had in Xcode 3, just one per workspace.

188
00:12:27,760 --> 00:12:32,190
So what they specifically contain
are the references that I mentioned.

189
00:12:32,190 --> 00:12:36,760
They contain the actual definitions of the schemes
and we'll talk a little bit about sharing those later.

190
00:12:36,760 --> 00:12:38,320
They contain breakpoint definitions.

191
00:12:38,320 --> 00:12:43,520
So you can choose to create breakpoint list or
you can have symbolic breakpoints like NSLog

192
00:12:43,520 --> 00:12:48,140
and you can actually have those be
either private to you or shared.

193
00:12:48,140 --> 00:12:49,830
And they contain the window layout.

194
00:12:49,830 --> 00:12:54,290
So every little disclosure triangle and split setting

195
00:12:54,290 --> 00:12:57,720
and all those things are persevered
when you close the workspace.

196
00:12:57,720 --> 00:13:02,510
The information sharing in a workspace
is on an off to end basis.

197
00:13:02,510 --> 00:13:08,500
So the piece of information in the workspace like
the schemes, you can choose for each one based

198
00:13:08,500 --> 00:13:11,710
on what it means to you to have it shared or not.

199
00:13:11,710 --> 00:13:18,800
And so if you have workspace that a team of 20 people share,
you can have that one workspace and you can configure it

200
00:13:18,800 --> 00:13:22,220
and develop some schemes that you
really put some effort into.

201
00:13:22,220 --> 00:13:27,870
The schemes can contain pre-launch actions and post-launch
actions and pre-build actions and all those kind

202
00:13:27,870 --> 00:13:31,540
of things and you can put some effort into that.

203
00:13:31,540 --> 00:13:38,340
You can check that it's a repository and then every new
user who checks that out will get those schemes by default.

204
00:13:38,340 --> 00:13:39,480
Others you might want to make.

205
00:13:39,480 --> 00:13:42,110
So this is just for you because
it just affects your workflow.

206
00:13:42,110 --> 00:13:47,340
So, there's a check box here in the scheme
manager, shared or not, only for workspace basis.

207
00:13:47,340 --> 00:13:51,800
So not only can you choose to share an entire
workspace but you can choose free scheme

208
00:13:51,800 --> 00:13:54,290
in the workspace whether you want to share it or private.

209
00:13:54,290 --> 00:13:56,950
And the sharing is through the normal means, right.

210
00:13:56,950 --> 00:14:01,300
If it's important to you to share it, you check
it into your SCM or you email or you include it

211
00:14:01,300 --> 00:14:03,750
in your source code distribution if you are open source.

212
00:14:03,750 --> 00:14:06,640
So you might have a workspace that you've really polished.

213
00:14:06,640 --> 00:14:11,880
You've worked on the scripts and it's really got this cool
workflow for running instruments and some interesting ways

214
00:14:11,880 --> 00:14:17,300
with sample data, etc. So you want to check
that as your repository that has value to you.

215
00:14:17,300 --> 00:14:19,780
You'll want to make edits to it overtime.

216
00:14:19,780 --> 00:14:23,000
There are other workspaces like the
one I created on the demo machine here.

217
00:14:23,000 --> 00:14:25,780
I'm probably not going to be using
that app for the demo here.

218
00:14:25,780 --> 00:14:31,330
So that one is one that I just kind of roughly put
together and it sort of a little bit more sketchy.

219
00:14:31,330 --> 00:14:33,360
And I'm not going to file it in an SCM.

220
00:14:33,360 --> 00:14:35,300
I'm going to file it somewhere.

221
00:14:35,300 --> 00:14:37,410
And so I can just throw it away when I'm done with it.

222
00:14:37,410 --> 00:14:40,580
So these workspaces could really be
used in whatever way you want, right?

223
00:14:40,580 --> 00:14:46,550
You can just put one together for a specific
bug and then just toss it afterwards.

224
00:14:46,550 --> 00:14:50,240
What's cool though is that it works across
all of the projects in the workspace.

225
00:14:50,240 --> 00:14:55,510
So as you add a new project in there, the symbol
lookup gets updated, the documentation search,

226
00:14:55,510 --> 00:14:58,230
the index, and all gains knowledge of that project.

227
00:14:58,230 --> 00:15:03,250
So you may be working on debugging an app and you
have some lower level framework you depend on.

228
00:15:03,250 --> 00:15:08,120
You might not have the sources for that handy because
it might come from a different team or whatever.

229
00:15:08,120 --> 00:15:10,550
But you might discover, you know
there might be a bug in here.

230
00:15:10,550 --> 00:15:15,790
So you can just drag the source code for that project in
if you have access to it and then you can step down through

231
00:15:15,790 --> 00:15:19,050
and the symbol updates itself, you
know, index and all those things.

232
00:15:19,050 --> 00:15:23,450
Find and replace works across the projects
and that's of course very handy as well.

233
00:15:23,450 --> 00:15:31,570
The other thing that happens here is we have coordinated
build so that a scheme that's in a workspace can work

234
00:15:31,570 --> 00:15:34,480
across all the different targets without the targets

235
00:15:34,480 --> 00:15:37,220
and the projects actually having to
have any knowledge of each other.

236
00:15:37,220 --> 00:15:43,690
So you can add custom build actions with arbitrary
dependencies that you define at the workspace level

237
00:15:43,690 --> 00:15:47,800
and custom scripts that aren't
actually part of the projects.

238
00:15:47,800 --> 00:15:51,470
And the implicit dependencies is a new feature in Xcode 4.

239
00:15:51,470 --> 00:15:57,060
So without two projects that know about each other,
Xcode 4 will discover dependencies between them.

240
00:15:57,060 --> 00:15:59,980
So I may have a project here which has an application.

241
00:15:59,980 --> 00:16:03,040
I have another one that has a library.

242
00:16:03,040 --> 00:16:06,470
There's an application, the first one
that links the library and the second one,

243
00:16:06,470 --> 00:16:10,790
without modifying either project,
Xcode 4 will determine the dependency.

244
00:16:10,790 --> 00:16:17,740
And actually Xcode 4 uses Xcode 3 project format so
you could just open two Xcode 3 projects in Xcode 4

245
00:16:17,740 --> 00:16:21,040
and it will automatically figure out the
dependencies between them and to you--

246
00:16:21,040 --> 00:16:24,670
without changing the format of the
projects, you get the benefit of 4.0 there.

247
00:16:24,670 --> 00:16:29,380
That was a bit about workspaces,
sort of a theory behind them.

248
00:16:29,380 --> 00:16:31,070
For navigation, again, I showed this.

249
00:16:31,070 --> 00:16:34,080
I kind of want to just call out a couple of things here.

250
00:16:34,080 --> 00:16:40,610
The structure navigator and the whole navigation
area is one of the primary ways in navigating.

251
00:16:40,610 --> 00:16:45,660
There's a filter field that's often overlooked at
the bottom there, especially on the big screen.

252
00:16:45,660 --> 00:16:53,210
You take a look at the bottom you can actually
filter by content and by the file or path,

253
00:16:53,210 --> 00:16:57,450
but you can also filter semantic such
as files that I have modified recently.

254
00:16:57,450 --> 00:17:03,660
The open quickly panel, that was
part of Xcode 3 but in Xcode 4,

255
00:17:03,660 --> 00:17:08,020
it's been enhanced with the symbol
information that we get from the LLVM compiler.

256
00:17:08,020 --> 00:17:12,480
So it does a much better job of actually
finding you the places you're looking for.

257
00:17:12,480 --> 00:17:16,340
A couple of words about editing.

258
00:17:16,340 --> 00:17:21,200
So we showed before that Xcode
automatically knows the related contents.

259
00:17:21,200 --> 00:17:25,100
And again, I just wanted to emphasize this, we
have the three different types of editing behavior.

260
00:17:25,100 --> 00:17:28,100
There's the Standard Editor what you use to from Xcode 3.

261
00:17:28,100 --> 00:17:34,710
The Assistant Editor is the one where the second review
tracks the contents and the selection of the primary one.

262
00:17:34,710 --> 00:17:40,260
And then the Version Editor is the one that lets you
look at your SCM system or look at other changes.

263
00:17:40,260 --> 00:17:45,910
So now to talk a little bit more about editing, I'd
like to ask Brooke Callahan up on the stage please.

264
00:17:45,910 --> 00:17:46,850
[ Background Applause ]

265
00:17:46,850 --> 00:17:49,510
>> Brooke Callahan: Thank you.

266
00:17:49,510 --> 00:17:54,070
[ Applause ]

267
00:17:54,070 --> 00:17:56,020
Thanks Anders.

268
00:17:56,020 --> 00:17:59,530
We've made a lot of improvements to the editing
experience in Xcode 4 that I'm really excited to show you.

269
00:17:59,530 --> 00:18:03,890
There are several new ways to work
with your files including improvements

270
00:18:03,890 --> 00:18:08,510
to the source code editing with the new LLVM Indexer.

271
00:18:08,510 --> 00:18:12,010
Interface Builder as you know is now built in the Xcode.

272
00:18:12,010 --> 00:18:16,680
And the Data Model interface has been
streamlined for your most common tasks.

273
00:18:16,680 --> 00:18:23,290
In addition to that, we've added Hex and Preview
for files that Xcode doesn't otherwise support.

274
00:18:25,240 --> 00:18:27,700
We've also added new ways to work with your editors.

275
00:18:27,700 --> 00:18:35,860
Like the Jump Bar which makes it easy to navigate all
the files in your project as well as inside those files.

276
00:18:35,860 --> 00:18:41,230
And the Assistant Editor which makes it easy to keep related
content open next to the file that you're working on.

277
00:18:42,940 --> 00:18:51,800
Also on the utilities, we have Inspectors and a Library
of file templates, code snippets, objects, media.

278
00:18:51,800 --> 00:18:54,540
So let's see a demo.

279
00:18:54,540 --> 00:18:57,550
So my demo is in the sketch project.

280
00:18:57,550 --> 00:19:02,670
If anyone is not familiar with this,
sketch is an example project we ship.

281
00:19:02,670 --> 00:19:12,550
It's useful for treating simple art with shapes and images.

282
00:19:12,550 --> 00:19:22,270
The sketch project has several classes for each of
different types of shapes that it allows you to create.

283
00:19:22,270 --> 00:19:26,290
I'm going to create a new type of shape, an octagon.

284
00:19:26,290 --> 00:19:31,390
I call this SKT octagon.

285
00:19:32,870 --> 00:19:38,900
And as I'm doing this, you can
see that it's really easy for me

286
00:19:38,900 --> 00:19:44,440
to keep my .m open right next to my
.h as I'm creating this new class.

287
00:19:44,440 --> 00:19:47,570
If I go somewhere else, when I come back, it's right there.

288
00:19:47,570 --> 00:19:52,540
[ Applause ]

289
00:19:52,540 --> 00:19:57,510
[ Pause ]

290
00:19:57,510 --> 00:20:04,630
So I'm going to cheat a little here but here I've
added what I wanted to add to my interface file

291
00:20:04,630 --> 00:20:12,740
and then I can just drag over my decoration
and start having the implementation there.

292
00:20:13,990 --> 00:20:22,340
So, here I've added my first pass at the init method.

293
00:20:22,340 --> 00:20:30,520
My init method takes an edge length so I can
know how long each edge of the octagon is.

294
00:20:30,520 --> 00:20:35,390
And the-- I'm checking for the edge length
to make sure that it's greater than zero.

295
00:20:35,390 --> 00:20:45,300
It wouldn't make sense to have an octagon
with no size but that's not working.

296
00:20:45,300 --> 00:20:48,950
And here we see it-- I'll fix it again.

297
00:20:48,950 --> 00:20:53,570
It will work.

298
00:20:53,570 --> 00:20:59,740
[ Pause ]

299
00:20:59,740 --> 00:21:05,960
So Xcode has already noticed that I'm assigning
to this variable instead of checking it.

300
00:21:05,960 --> 00:21:12,570
So I can just click fix and it will actually
do the validation and return like I'd expect.

301
00:21:12,570 --> 00:21:18,560
[ Pause ]

302
00:21:18,560 --> 00:21:22,740
And that's what's new for source code editing in Xcode 4.

303
00:21:22,740 --> 00:21:25,790
Now let's take a look at an Interface Builder file.

304
00:21:25,790 --> 00:21:32,000
As you see in the-- Interface Builder
files have a canvass to work in.

305
00:21:32,000 --> 00:21:36,060
They also have a dock so you can see the top level objects.

306
00:21:36,060 --> 00:21:43,410
You can expand this into the outline view where you
can browse through the objects or you can simply click

307
00:21:43,410 --> 00:21:52,110
on a jump bar and navigate down to the
objects that you want to work with, like that.

308
00:21:54,000 --> 00:22:03,420
We also have the library from Interface
Builder so you can simply drag out objects

309
00:22:03,420 --> 00:22:10,190
into the canvass and work with them there.

310
00:22:10,190 --> 00:22:21,650
If I want to add an action or outlet for my button,
I can simply control click and drag into the header

311
00:22:21,650 --> 00:22:24,920
and type the name here, or in this case, the button cell.

312
00:22:24,920 --> 00:22:26,570
So one--

313
00:22:26,570 --> 00:22:32,900
[ Pause ]

314
00:22:32,900 --> 00:22:36,440
So that's the outlet and here's an action.

315
00:22:38,570 --> 00:22:46,140
[ Applause ]

316
00:22:46,140 --> 00:22:49,580
Actually, one more thing that I want
to show you was the code snippets.

317
00:22:49,580 --> 00:22:55,330
If you want to-- in the State of the Union, Mike
might showed you using a code snippet but if you want

318
00:22:55,330 --> 00:23:02,460
to actually create a code snippet, you can simply
select some texts like this method which maybe I want

319
00:23:02,460 --> 00:23:11,310
to reuse this text-- this method again, maybe I want to
create some other class like an SKT triangle or whatever.

320
00:23:11,310 --> 00:23:17,770
I'd drag that text into the code library
and now I'd made my own code snippet.

321
00:23:17,770 --> 00:23:20,190
If I hover over this, I'll get an editing window.

322
00:23:20,190 --> 00:23:22,840
I can actually edit the code snippet from here.

323
00:23:22,840 --> 00:23:29,920
I can even give it a name and I can give it a shortcut.

324
00:23:29,920 --> 00:23:36,160
So let's try that out.

325
00:23:36,160 --> 00:23:38,830
So I'm going to take in the shortcut I made.

326
00:23:38,830 --> 00:23:45,570
I'm going to press Escape to bring up the
shortcut and hit Enter and there it is.

327
00:23:45,570 --> 00:23:52,520
[ Applause ]

328
00:23:52,520 --> 00:23:55,390
Alright so that's source code and Interface Builder files.

329
00:23:55,390 --> 00:23:58,270
How about the data model?

330
00:23:58,270 --> 00:24:09,330
Here we see a list of entities of such requests
and configuration for our sketch data model.

331
00:24:09,330 --> 00:24:15,330
It looks like I've got an entity for each
of the classes I have for all my shapes.

332
00:24:16,430 --> 00:24:20,050
So I'm going to make a new entity for my SKT octagon.

333
00:24:20,050 --> 00:24:31,380
Octagon. And I'm going to add in a tribute
for that edge length you saw earlier.

334
00:24:31,380 --> 00:24:40,800
And it looks like I've got an error--
oh, I need to find a type for that, OK.

335
00:24:40,800 --> 00:24:45,990
So that's probably what we know.

336
00:24:45,990 --> 00:24:48,870
One of the common things you do in data model files.

337
00:24:48,870 --> 00:24:58,720
But if I want to change any attributes on-- if
I want to change any settings on my attribute,

338
00:24:58,720 --> 00:25:01,190
I can do that from the data model inspector.

339
00:25:01,190 --> 00:25:04,130
I can also change settings for the entity there.

340
00:25:04,130 --> 00:25:10,390
As you can see while I'm doing this,
the jump bar is tracking my selection,

341
00:25:10,390 --> 00:25:13,570
just like in the Interface Builder file.

342
00:25:13,570 --> 00:25:19,330
[ Pause ]

343
00:25:19,330 --> 00:25:26,230
One more addition to the data model interface in
Xcode 4 is this new support for find and replace.

344
00:25:26,230 --> 00:25:32,570
So if I decide that I want to change
my SKT octagon to a square--

345
00:25:32,570 --> 00:25:41,300
[ Pause ]

346
00:25:41,300 --> 00:25:43,820
-- I can do that from here.

347
00:25:45,620 --> 00:25:50,840
This is really nice when you have a large
data model file because it can be really hard

348
00:25:50,840 --> 00:25:57,380
to find all the different classes and stuff in
there and be able to make changes to them easily.

349
00:25:57,380 --> 00:26:02,870
In this case, this is the type of change
I want to do across my whole workspace.

350
00:26:02,870 --> 00:26:08,720
So I'm going to use the search navigator for that instead.

351
00:26:08,720 --> 00:26:19,790
So, here I'm going to type SKT octagon and here in the
search navigator, I can see each of the places where I've--

352
00:26:19,790 --> 00:26:25,130
each of the references to be octagon class in my project.

353
00:26:25,130 --> 00:26:38,570
And when I go to replace it, I can also see a preview
and I can select or reject any of these that I want.

354
00:26:38,570 --> 00:26:47,770
[ Applause ]

355
00:26:47,770 --> 00:26:56,640
As I'm sure you're aware, this is really nice when doing
find and replace with things like regular expressions

356
00:26:56,640 --> 00:27:03,350
where you have maybe lots of false
positives, anyway moving on.

357
00:27:03,350 --> 00:27:10,470
Xcode traditionally hasn't had great
support for opening files that don't go

358
00:27:10,470 --> 00:27:16,050
through the build system but Xcode 4 changes this.

359
00:27:16,050 --> 00:27:22,840
We can see a preview through using
Quick Look of any file in your project.

360
00:27:22,840 --> 00:27:33,570
And in addition to this, we can also, for any flat
files you have, open them as hex and edit them.

361
00:27:33,570 --> 00:27:41,870
[ Applause ]

362
00:27:41,870 --> 00:27:44,860
Now what about documentation in the editor?

363
00:27:44,860 --> 00:27:51,320
The Quick Look-- oh sorry, Quick
Help has been moved into an inspector

364
00:27:51,320 --> 00:27:56,760
and it works pretty much like you'd expect from Xcode 3.

365
00:27:56,760 --> 00:28:05,770
But in addition to this, we've also
added support for common task--

366
00:28:05,770 --> 00:28:13,390
sorry, help result for common tasks
that people do in the IDE.

367
00:28:13,390 --> 00:28:21,310
Now if I click this one, it's going to
bring up this recipe in the organizer.

368
00:28:21,310 --> 00:28:29,530
Here you see the steps that I need to complete, the task,
as well as a description of what the task is actually doing.

369
00:28:33,450 --> 00:28:39,330
And with that, I'm going to go back to the slides.

370
00:28:39,330 --> 00:28:47,200
So that's what's new [background
applause] with editing in Xcode 4.

371
00:28:47,200 --> 00:28:53,350
[Applause] So now Ron is going to come up.

372
00:28:53,350 --> 00:28:54,330
>> Ron Lue-Sang: Cool.

373
00:28:54,330 --> 00:28:55,570
Thank you, Brooke.

374
00:28:55,570 --> 00:29:01,160
[ Applause ]

375
00:29:01,160 --> 00:29:03,490
There're a lot of people in here, cool.

376
00:29:03,490 --> 00:29:04,660
Everybody OK so far?

377
00:29:04,660 --> 00:29:05,930
You're enjoying the session?

378
00:29:05,930 --> 00:29:07,040
Yeah? Great.

379
00:29:07,040 --> 00:29:07,630
Very good.

380
00:29:07,630 --> 00:29:10,950
I'm always excited seeing all these
stuff no matter how many times I see it.

381
00:29:10,950 --> 00:29:16,300
So, this is great for me too but-- so
we're about halfway through our session.

382
00:29:16,300 --> 00:29:25,420
I'm going to take the next 15 minutes or so and go through
the next three major topics that being the Organizer,

383
00:29:25,420 --> 00:29:28,980
Version Editor, a little bit more
info on the Version Editor,

384
00:29:28,980 --> 00:29:34,660
and finally some info about the UI
we have for debugging in Xcode 4.

385
00:29:34,660 --> 00:29:39,170
And so I'm going to jump straight into demo here.

386
00:29:41,190 --> 00:29:44,160
Pick up where Brooke left off.

387
00:29:46,130 --> 00:29:48,930
Don't save.

388
00:29:48,930 --> 00:29:50,520
OK.

389
00:29:50,520 --> 00:29:56,340
So on the organizer, Brooke left us in the
organizer with the documentation tab up.

390
00:29:56,340 --> 00:30:01,400
Well, we see here that the organizers just a
bunch of tabs with information on each tab, right.

391
00:30:01,400 --> 00:30:12,040
In the documentation tab, we have an easy way to
not only browse all of our documentation, do lots--

392
00:30:12,040 --> 00:30:18,190
do any searches we have where we
want to find API or class information

393
00:30:18,190 --> 00:30:24,470
and we'll see the any sample code-- did I misspell image?

394
00:30:24,470 --> 00:30:26,610
No, there we go.

395
00:30:26,610 --> 00:30:31,480
We can find sample code, abstracts,
API reference, everything.

396
00:30:31,480 --> 00:30:37,880
And once we find that piece of documentation we
love the most, we can go ahead and bookmark it.

397
00:30:37,880 --> 00:30:44,510
So this is a great way to keep all of the documentation
that we're using, that we're reading, well organized.

398
00:30:44,510 --> 00:30:49,010
I think this is a great way to deal with
documentation in Xcode 4 in its own tab and its own tab

399
00:30:49,010 --> 00:30:52,460
and its own window like this in the organizer.

400
00:30:52,460 --> 00:30:58,740
You'll also notice that we get the cool jump
bar in the documentation view the same way

401
00:30:58,740 --> 00:31:03,140
that we get jump bar for our editors in the workspaces.

402
00:31:03,140 --> 00:31:05,930
So we can navigate around using the jump bar here as well.

403
00:31:05,930 --> 00:31:12,780
Alright, form documentation going
to jump over to the iPhone tab.

404
00:31:12,780 --> 00:31:20,030
I'm expecting a lot of you guys are going to try out
iPhone development if you have it already with Xcode 4.

405
00:31:20,030 --> 00:31:25,080
So in Xcode 3 we had the organizer with
iPhone support where you could see information

406
00:31:25,080 --> 00:31:28,280
about your developer profiles and everything.

407
00:31:28,280 --> 00:31:29,360
We have the same thing here.

408
00:31:29,360 --> 00:31:33,860
You can see your provisioning profiles,
device logs, screen shots.

409
00:31:33,860 --> 00:31:42,450
We don't have anything interesting in this-- on this demo
machine but at least we have the sexy Xcode 4 look and feel.

410
00:31:42,450 --> 00:31:44,310
Alright, yes.

411
00:31:44,310 --> 00:31:51,440
[Applause] The next tab, I'm going
to take a look at the repository tab.

412
00:31:51,440 --> 00:31:58,170
So here we can take and look at all of the repositories
that are related to the projects we're working

413
00:31:58,170 --> 00:32:06,160
on whether they're SVN or get, whether they're on the same
workspace, separate work spaces, we can use this as a way

414
00:32:06,160 --> 00:32:11,520
to view where all of our source comes from.

415
00:32:11,520 --> 00:32:14,510
We can take a look at the repository information.

416
00:32:14,510 --> 00:32:21,740
We can look at the repository history,
browse through the individual directories.

417
00:32:21,740 --> 00:32:23,710
Let's see.

418
00:32:23,710 --> 00:32:34,570
And-- So like I was saying [laughter]
in the Xcode 4 developer preview

419
00:32:34,570 --> 00:32:39,010
[ Laughter ]

420
00:32:39,010 --> 00:32:43,450
[ Applause ]

421
00:32:43,450 --> 00:32:51,420
So if we're interested in picking up some extra repository,
we have some URL to get hub that we want to pull source

422
00:32:51,420 --> 00:32:56,030
from the kit, add a new repository reference right here.

423
00:32:56,030 --> 00:32:58,870
Or if we have something that's already checked out,

424
00:32:58,870 --> 00:33:05,860
we can go in and check "Add working copy",
browse to whatever we have checked out.

425
00:33:05,860 --> 00:33:12,800
And Xcode will sniff the directory and figure
out, well, this was checked out using get

426
00:33:12,800 --> 00:33:17,240
and configure the repository entry here automatically.

427
00:33:17,240 --> 00:33:19,700
Pretty neat.

428
00:33:19,700 --> 00:33:22,230
So that's iPhone repositories.

429
00:33:22,230 --> 00:33:24,810
The next tab here, projects.

430
00:33:24,810 --> 00:33:31,480
Well, this is all the project and
workspaces that we've opened in Xcode 4.

431
00:33:31,480 --> 00:33:36,710
This is just a great way of seeing what you've had, what
you've been working on, when the last time you worked

432
00:33:36,710 --> 00:33:45,010
on it was, and where all the drive sources
like the index and log files ended up.

433
00:33:45,010 --> 00:33:47,030
The next tab is archives.

434
00:33:47,030 --> 00:33:48,550
I'm going to come back to this.

435
00:33:48,550 --> 00:33:51,950
It will make more sense near the end of my session, OK?

436
00:33:51,950 --> 00:33:55,100
So just remind me if I happen to forget.

437
00:33:55,100 --> 00:33:56,450
It could happen.

438
00:33:56,450 --> 00:34:03,740
Alright, I'm going to bring up our Baffle workspace again.

439
00:34:03,740 --> 00:34:09,910
So we finished talking about the organizer, the next thing
remember I want to talk about was the Version Editor again.

440
00:34:09,910 --> 00:34:20,500
And this really goes back to the amount of integration with
the SCM system that we've put into the Xcode workspace here.

441
00:34:20,500 --> 00:34:32,830
Being able to see, OK, sure you can make edits
and see immediately in the project navigator

442
00:34:32,830 --> 00:34:36,830
that the edit-- normally see that the edit happens.

443
00:34:36,830 --> 00:34:39,340
We would update the status of the file.

444
00:34:39,340 --> 00:34:48,400
Be able to filter the navigator
based on what files have SCM status.

445
00:34:48,400 --> 00:35:00,160
But using the Version Editor, you can
also see the Continue button [laughter]

446
00:35:00,160 --> 00:35:05,560
and you can also watch me walk over to my next machine.

447
00:35:05,560 --> 00:35:10,230
[ Laughter ]

448
00:35:10,230 --> 00:35:17,810
You know, the main thing is that we get to work really
closely with how the SCM bubbles up to the user,

449
00:35:17,810 --> 00:35:21,300
making the user experience that much better.

450
00:35:21,300 --> 00:35:25,590
So here again, making any changes.

451
00:35:25,590 --> 00:35:29,660
I thought I would try it again.

452
00:35:29,660 --> 00:35:33,220
Let's see.

453
00:35:33,220 --> 00:35:41,490
So now switching to Version Editor again, you'd be able to
see any changes that we've made in the local copy compared

454
00:35:41,490 --> 00:35:47,690
to what's in the repository or comparing, you know,
different versions that are both in the repository.

455
00:35:47,690 --> 00:35:50,590
And that's just using the comparison view.

456
00:35:50,590 --> 00:36:02,370
Now with the log view, you can see the history
of the entire file going backwards in SCM.

457
00:36:02,370 --> 00:36:06,600
And then everybody's favorite, of course, the--

458
00:36:06,600 --> 00:36:14,090
is Blame View where you can actually see
what people have done and how recently.

459
00:36:14,090 --> 00:36:22,530
So you could imagine that we could have figured
out at this point using Blame View what happens

460
00:36:22,530 --> 00:36:29,960
under this demo earlier potentially pointing to Brooke
the-- to Brooke at someone-- the finger at Brooke.

461
00:36:29,960 --> 00:36:37,390
The history view, the log view-- oh,
that doesn't look anything I changed.

462
00:36:37,390 --> 00:36:38,110
I'm not worried about it.

463
00:36:38,110 --> 00:36:43,080
So that's the versions editor again.

464
00:36:43,080 --> 00:36:47,640
And the last thing that I wanted to
talk about briefly was debugging.

465
00:36:47,640 --> 00:36:53,960
So with the debugging UI, let's
just build and run our application.

466
00:36:53,960 --> 00:36:57,740
We don't have breakpoints turned on here,
all we have to do at any point is turn

467
00:36:57,740 --> 00:37:00,810
on breakpoints using the toggle here, right.

468
00:37:00,810 --> 00:37:03,720
On, off. On, off.

469
00:37:03,720 --> 00:37:08,300
Let's go in and set a breakpoint in one of our views.

470
00:37:08,300 --> 00:37:15,470
Let's try highlighting, sure.

471
00:37:15,470 --> 00:37:16,680
So breakpoints are on now.

472
00:37:16,680 --> 00:37:18,440
We set a breakpoint there.

473
00:37:18,440 --> 00:37:19,940
Start a new game.

474
00:37:19,940 --> 00:37:21,010
I like this game actually.

475
00:37:21,010 --> 00:37:29,820
So at the point that we-- let's set
another breakpoint over here, actually.

476
00:37:29,820 --> 00:37:31,560
I like this one better.

477
00:37:31,560 --> 00:37:39,490
[ Pause ]

478
00:37:39,490 --> 00:37:40,570
Oh, you know what?

479
00:37:40,570 --> 00:37:45,760
I'm looking in the wrong project.

480
00:37:45,760 --> 00:37:48,270
Let's try this one.

481
00:37:48,270 --> 00:37:53,350
This one looks like a winner, placing bets?

482
00:37:53,350 --> 00:37:57,720
Yes, OK. [Background applause] Thank you.

483
00:37:57,720 --> 00:37:59,340
I'll be all week.

484
00:37:59,340 --> 00:38:00,690
No, seriously I'll be here all week.

485
00:38:00,690 --> 00:38:10,380
[Laughter] So Xcode has stopped on our
breakpoint and we're here in the debug navigator.

486
00:38:10,380 --> 00:38:13,370
You can see all of the threads that
are running for the application.

487
00:38:13,370 --> 00:38:19,260
And this is something that Dave demoed skillfully
in the State of the Union session on Monday.

488
00:38:19,260 --> 00:38:27,520
You know, being able to filter out the stacks and the
frames in thread in the stacks that aren't interesting here

489
00:38:27,520 --> 00:38:31,780
because we don't have source code, being able
to hide the threads that aren't interesting

490
00:38:31,780 --> 00:38:37,130
because they don't have any frames that
aren't interesting, and being able to switch,

491
00:38:37,130 --> 00:38:42,930
seeing everything by thread, switching
over to seeing them by queue.

492
00:38:42,930 --> 00:38:49,810
So one thing that I like to do though is if I'm
really, really into the source code at this point,

493
00:38:49,810 --> 00:38:55,730
stepping through trying to figure something
out, I'll sometimes hide the navigator.

494
00:38:55,730 --> 00:38:59,260
And navigate just using the debug jump bar here.

495
00:38:59,260 --> 00:39:05,640
So this is a great way of navigating through all
the threads and stacks in the running application.

496
00:39:05,640 --> 00:39:11,670
And there I'm right next to the variables view where I
can see all the values and names and variables that are

497
00:39:11,670 --> 00:39:16,120
in scope, and of course next to my debug console.

498
00:39:16,120 --> 00:39:21,980
So that's how-- that's what I wanted
talk about for debugging for right now.

499
00:39:21,980 --> 00:39:26,150
We're going to run back to slides, cool.

500
00:39:26,150 --> 00:39:34,440
So, that covers the organizer in
Xcode 4, the Version Editor,

501
00:39:34,440 --> 00:39:40,240
as well as some basics about debugging,
the new debugging UI in Xcode 4.

502
00:39:40,240 --> 00:39:43,490
If you want to learn more about the
organizer and the versions editor,

503
00:39:43,490 --> 00:39:47,430
check out the session that's coming
immediately after this one, session 308.

504
00:39:47,430 --> 00:39:50,250
They'll go into more detail about building--

505
00:39:50,250 --> 00:39:55,440
working in Xcode 4, building your application,
and they'll touch more on those topics.

506
00:39:55,440 --> 00:40:01,050
And on Friday morning, there's going to be
a debugging with Xcode 4 session as well.

507
00:40:01,050 --> 00:40:07,650
So the last part of my talk, I'm going
to talk a little bit about schemes.

508
00:40:07,650 --> 00:40:13,190
And this is something that Anders brought
up earlier, you know, Xcode 4 schemes.

509
00:40:13,190 --> 00:40:15,650
It's a new topic in Xcode 4, a new concept.

510
00:40:15,650 --> 00:40:21,250
So I just want to take a few minutes
through slides to discuss what a scheme is

511
00:40:21,250 --> 00:40:25,910
and some of the motivation behind having schemes in general.

512
00:40:25,910 --> 00:40:29,020
I'm going to start off with the definition.

513
00:40:29,020 --> 00:40:31,270
You know, this is the dictionary definition.

514
00:40:31,270 --> 00:40:34,080
The dictionary I have at least for a scheme.

515
00:40:34,080 --> 00:40:42,100
And the part I want to concentrate on is that a scheme
is a plan for obtaining a particular object, right?

516
00:40:42,100 --> 00:40:45,740
A plan for getting a result.

517
00:40:45,740 --> 00:40:52,430
And so, that's all the scheme is in Xcode 4, it's a
plan for taking everything that's in your workspace,

518
00:40:52,430 --> 00:41:01,420
the project contents, your targets and producing
something whether it be build results, some built product,

519
00:41:01,420 --> 00:41:06,990
test results or just your application
actually running, that's the result, right?

520
00:41:06,990 --> 00:41:08,030
So that's what a scheme is.

521
00:41:08,030 --> 00:41:14,970
It's just a plan for Xcode to produce a result
from your projects and contents of your workspace.

522
00:41:14,970 --> 00:41:22,450
Unlike any good scheme, Xcode 4
schemes come with three phases.

523
00:41:22,450 --> 00:41:24,940
The first phase is the build phase.

524
00:41:24,940 --> 00:41:33,220
So this is where we take all of the targets that you
specify and build the built product for those targets.

525
00:41:33,220 --> 00:41:36,770
So the build phase ends up producing your build results.

526
00:41:36,770 --> 00:41:41,720
In the test phase, we'll run all of
your unit test or performance test.

527
00:41:41,720 --> 00:41:47,860
We'll do your testing and then
the third phase, profit, right?

528
00:41:47,860 --> 00:41:55,290
Launch, the launch phase is where we'll
actually take your built application.

529
00:41:55,290 --> 00:41:59,030
Those built during the build phase and launch it.

530
00:41:59,030 --> 00:42:01,750
So that's what the scheme is in Xcode 4.

531
00:42:01,750 --> 00:42:12,280
It's just a plan for building and testing and launching your
application and why this is really useful for developers,

532
00:42:12,280 --> 00:42:18,900
well, this can be really useful for your workflow,
is that you can use these schemes as presets

533
00:42:18,900 --> 00:42:23,100
for the different development scenarios that you might have.

534
00:42:23,100 --> 00:42:31,400
If you could imagine, if you have a small team working
on some project, you know, we have our two-person team

535
00:42:31,400 --> 00:42:34,810
with Jill working hard on implementing new features.

536
00:42:34,810 --> 00:42:40,310
You know, during the feature development phase, you
might be thinking of just building your application

537
00:42:40,310 --> 00:42:43,500
in any related libraries in your workspace.

538
00:42:43,500 --> 00:42:52,520
Building them all, using the debug configuration for their
targets and then when it comes time to run the unit tests,

539
00:42:52,520 --> 00:42:57,880
we would only run Jill's unit test related
to the new features that she's working on.

540
00:42:57,880 --> 00:43:04,660
And if you were to hit the Run button in the work
space, we would want to launch the application

541
00:43:04,660 --> 00:43:08,950
in the launch phase and launch with the debugger.

542
00:43:08,950 --> 00:43:11,610
But this is a different mentality.

543
00:43:11,610 --> 00:43:20,570
This is a different mind set than if we have Jill's
coworker, Jack, hammering a way trying to fix some bugs

544
00:43:20,570 --> 00:43:26,490
and we might want to build the application and
libraries in the debug configuration as well

545
00:43:26,490 --> 00:43:29,500
but there may not be any testing really to do.

546
00:43:29,500 --> 00:43:33,050
There may not be anything in the test phase.

547
00:43:33,050 --> 00:43:40,950
But it's the launch phase where we have the application
launched in the debugger with some debug parameter set

548
00:43:40,950 --> 00:43:43,700
like turning on MallocStackLogging, or something.

549
00:43:43,700 --> 00:43:45,530
So that'd be a different mindset.

550
00:43:45,530 --> 00:43:52,420
And the third hypothetical, if we had another
scheme besides feature development or bug fixing,

551
00:43:52,420 --> 00:43:55,440
we might have a third scheme for performance tuning.

552
00:43:55,440 --> 00:44:04,710
You know, at this point, we would build our application for
release using the release configuration in the build phase.

553
00:44:04,710 --> 00:44:10,500
In the test phase, we would run all of our
unit test related to performance testing,

554
00:44:10,500 --> 00:44:13,680
not the entire regression test suite maybe.

555
00:44:13,680 --> 00:44:21,530
And you could hypothetically-- you could imagine we'd
want to run the application instead of in the debugger,

556
00:44:21,530 --> 00:44:28,820
actually launch with instruments so that you could do some
performance tuning, profiling, so that'd be a third scenario

557
00:44:28,820 --> 00:44:38,730
that we'd be able to switch quickly between
different schemes to adjust to a particular scenario.

558
00:44:38,730 --> 00:44:46,450
Now these three hypothetical schemes that I've
outlined here, this fall under the heading

559
00:44:46,450 --> 00:44:54,030
of what we call launch schemes and we already
mentioned that there are two kinds of schemes, right?

560
00:44:54,030 --> 00:44:57,710
There are launch schemes and there
are also distributions schemes.

561
00:44:57,710 --> 00:45:05,970
The main difference is that launch schemes have a launch
phase and distribution schemes have an archive phase.

562
00:45:05,970 --> 00:45:09,410
So it might be easier to see if we take a concrete example.

563
00:45:09,410 --> 00:45:18,410
You know, again, we're working along and we want to
share what we have so far with friends or, you know,

564
00:45:18,410 --> 00:45:23,270
it's ready to ship, put it up on
our MobileMe site as a disk image.

565
00:45:23,270 --> 00:45:30,550
So we might create a scheme where we create--
we build the application for release,

566
00:45:30,550 --> 00:45:38,660
we run all of our unit test just one last time to make
sure everything still works and in the archive phase,

567
00:45:38,660 --> 00:45:43,550
we might decide to create a disk image out of
the built products, out of our application.

568
00:45:43,550 --> 00:45:47,170
Instead of a launch phase here, we have the archive phase.

569
00:45:47,170 --> 00:45:55,560
So that's really what the schemes are for.

570
00:45:55,560 --> 00:46:02,950
They're a plan that tells Xcode how to create
something out of all the projects in your workspace

571
00:46:02,950 --> 00:46:08,290
and attain a result either test
results or some built products.

572
00:46:08,290 --> 00:46:12,080
And launching the application or
creating an archive of the application.

573
00:46:12,080 --> 00:46:21,430
So with that, I'm going to-- So, here's where we
would switch between the different schemes, right?

574
00:46:21,430 --> 00:46:26,490
This is the example that Anders showed us earlier.

575
00:46:26,490 --> 00:46:31,560
And actually, I think it'll be easier to show how
this all works if I switch over to the demo again.

576
00:46:31,560 --> 00:46:37,770
[ Pause ]

577
00:46:37,770 --> 00:46:44,280
So back here, we have our application Baffle Cocoa.

578
00:46:44,280 --> 00:46:52,410
Now, you'll notice that when Anders created his throw-away
workspace initially, all he had to do is add those projects

579
00:46:52,410 --> 00:46:56,510
to the workspace and he got two launch schemes.

580
00:46:56,510 --> 00:47:03,530
So, every executable that was in the targets he add-- in
the projects that he added resulted in a new launch scheme.

581
00:47:03,530 --> 00:47:05,440
So you don't have to do a lot of
fiddling if all you're going

582
00:47:05,440 --> 00:47:09,460
to do is add a couple of projects and try and run a target.

583
00:47:09,460 --> 00:47:12,210
Try and run an executable out of one of the targets.

584
00:47:12,210 --> 00:47:18,240
What I'm going to do here though is
click on the Manage Scheme's button.

585
00:47:18,240 --> 00:47:25,020
Here you can see the UI we have for choosing
whether or not to share an individual scheme.

586
00:47:25,020 --> 00:47:31,860
And down here, we can ahead and create a new scheme.

587
00:47:31,860 --> 00:47:39,820
So I'll add a scheme-based on the Baffle Cocoa target
in our workspace and I'll make it a distribution scheme.

588
00:47:43,380 --> 00:47:48,180
Go ahead, hit OK and we'll edit the scheme.

589
00:47:48,180 --> 00:47:54,050
So here, we can-- here's what the
editor for schemes looks like.

590
00:47:54,050 --> 00:47:59,460
So we can see all the build phases, all the
info on the build phase, the test phase.

591
00:47:59,460 --> 00:48:04,450
And here, instead of the launch
phase, we have our archive phase.

592
00:48:04,450 --> 00:48:11,100
And we can choose to create and archive
as a disk image or just the application.

593
00:48:11,100 --> 00:48:18,590
And this is what populates the contents of the organizer
that I showed you earlier for the archive's tab.

594
00:48:18,590 --> 00:48:28,380
So every time we-- if we were to create an application
archive type, every time we hit the Play button here,

595
00:48:28,380 --> 00:48:33,300
we would end up creating a new archive and it would
show up in the archive's tab in the organizer.

596
00:48:33,300 --> 00:48:36,150
It's pretty simple.

597
00:48:36,150 --> 00:48:39,490
Makes sense?

598
00:48:39,490 --> 00:48:46,430
OK. And with that, I'd like to ask
Anders to come back up on stage.

599
00:48:46,430 --> 00:48:47,920
That ends my part of the session.

600
00:48:47,920 --> 00:48:48,880
Thanks to everybody.

601
00:48:48,880 --> 00:48:51,560
[Background applause] Anders is
going to close out the session.

602
00:48:51,560 --> 00:48:56,760
[ Applause ]

603
00:48:56,760 --> 00:49:00,550
>> Anders Bertelrud: Thanks Ron.

604
00:49:01,730 --> 00:49:10,160
So what we covered in this introduction to Xcode
4 session, talked a little bit about workspaces,

605
00:49:10,160 --> 00:49:16,010
in particular some of the-- let's say theory behind
them that wasn't apparent at the State of the Union.

606
00:49:16,010 --> 00:49:22,640
So in the motivation for them and some of the uses
of them both as an integral part of your source code

607
00:49:22,640 --> 00:49:28,170
and maybe as something you'll create as a throw-away
collection of projects and temporary schemes.

608
00:49:28,170 --> 00:49:33,270
Some of the navigation, hopefully, you've learned a
little bit more about some of the ways you can navigate

609
00:49:33,270 --> 00:49:37,620
between the various parts of your projects
in the session and there are sessions coming

610
00:49:37,620 --> 00:49:40,070
out that will get even more into depth about that.

611
00:49:40,070 --> 00:49:45,250
For the editing of course, we've been talking
about the assistant editor quite a bit

612
00:49:45,250 --> 00:49:49,350
and we also saw some of the more specific editors.

613
00:49:49,350 --> 00:49:55,570
In terms of the organizer, this is again where you will go
to manage your device if you're doing embedded development.

614
00:49:55,570 --> 00:50:00,710
It's where you can access all the
repositories that Xcode 4 knows about because

615
00:50:00,710 --> 00:50:02,090
of the projects you've been working with.

616
00:50:02,090 --> 00:50:08,900
You can also access information about the
projects there as well as documentation.

617
00:50:08,900 --> 00:50:12,860
The Version Editor again, we support some version and get.

618
00:50:12,860 --> 00:50:17,430
And the Version Editor was a great way to see what
exactly you will be checking in to see who did what.

619
00:50:17,430 --> 00:50:19,160
You might have caught it up there.

620
00:50:19,160 --> 00:50:22,410
But actually, there was a check-in
from some account called "Demo Monkey"

621
00:50:22,410 --> 00:50:25,230
which said, "Let's see how Anders handles this one."

622
00:50:25,230 --> 00:50:27,470
So that must have been the one that added the error.

623
00:50:27,470 --> 00:50:29,900
But I'd-- somebody went under a pseudonym there.

624
00:50:29,900 --> 00:50:31,880
So I'm not quite sure who he was.

625
00:50:31,880 --> 00:50:38,950
For debugging, of course, we have some of the good features
like the automatic filtering of the local variables.

626
00:50:38,950 --> 00:50:44,440
What we're showing you just the locals and ivars and those
kinds of things that are relevant to where these cursor

627
00:50:44,440 --> 00:50:47,240
where the program counter is at the moment.

628
00:50:47,240 --> 00:50:49,750
You'll see more about that in the debugging session.

629
00:50:49,750 --> 00:50:56,700
And of course, schemes which is something new to Xcode
4 and these ways of attaining a goal as Ron said,

630
00:50:56,700 --> 00:51:02,750
which could either be to launch your app in the
configuration for performance tuning or launch your app

631
00:51:02,750 --> 00:51:06,450
with specific debug checks, of
course, for debugging or to hunt

632
00:51:06,450 --> 00:51:10,970
down a particular problem or to
produce an archive or disk image.

633
00:51:10,970 --> 00:51:17,250
I wanted to invite you to join us
on online at the Developer Forums.

634
00:51:17,250 --> 00:51:20,400
Xcode 4 is a developer preview.

635
00:51:20,400 --> 00:51:23,540
Of course didn't-- nothing crashed at all on stage.

636
00:51:23,540 --> 00:51:25,280
I'm happy about that.

637
00:51:25,280 --> 00:51:30,490
So by the time we ship, we intend to
be as polished and solid as marble.

638
00:51:30,490 --> 00:51:36,130
So we're hoping that you guys are going
to provide good bug fixes and bug reports.

639
00:51:36,130 --> 00:51:36,980
We'll do the fixes.

640
00:51:36,980 --> 00:51:45,610
You provide the bug reports with lots of--
sorry, lots of info about how to reproduce.

641
00:51:45,610 --> 00:51:50,620
And also, we would very much welcome your
feedback about the direction we're going,

642
00:51:50,620 --> 00:51:55,620
about what you think about suggestions
for how we can improve the workflow.

643
00:51:55,620 --> 00:52:02,480
This is really about making the product a better IDE for
you guys to develop really cool Mac OS X and iOS apps.

644
00:52:02,480 --> 00:52:08,090
And so, we want to try to do what we can
to make you more productive realizing

645
00:52:08,090 --> 00:52:10,680
that there's a wide variety of development modes out there.

646
00:52:10,680 --> 00:52:14,500
There are a couple more sessions that
are going to be talking about Xcode 4.

647
00:52:14,500 --> 00:52:16,960
One is following immediately in this room.

648
00:52:16,960 --> 00:52:18,960
There's the Developing Your App With Xcode 4.

649
00:52:18,960 --> 00:52:22,450
So if you stay here for that that
starts in about 20 minutes.

650
00:52:22,450 --> 00:52:27,640
And they're-- there'd be more in depth about
some of the topics we talked about here.

651
00:52:27,640 --> 00:52:32,070
There's a specific session of Building and
Distributing Your App and-- With Xcode 4.

652
00:52:32,070 --> 00:52:36,140
Pacific Heights tomorrow in the afternoon also at 3:15.

653
00:52:36,140 --> 00:52:41,770
And then another session in Pacific Heights following that
immediately which is Using Interface Builder in Xcode 4.

654
00:52:41,770 --> 00:52:47,560
That will of course focus mostly on the Interface
Builder editor that's now embedded inside of Xcode 4.

