WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:23.516 --> 00:00:25.876 A:middle
[Applause]

00:00:26.376 --> 00:00:26.866 A:middle
Thanks!

00:00:30.356 --> 00:00:32.195 A:middle
&gt;&gt; KEVIN CATHEY: Good afternoon,
welcome back from lunch.

00:00:32.616 --> 00:00:34.626 A:middle
I guess if you guys are watching
the video you are like, lunch,

00:00:34.936 --> 00:00:36.126 A:middle
I'm eating breakfast right now.

00:00:36.706 --> 00:00:39.226 A:middle
Or whatever meal you just
ate, wherever you came from,

00:00:39.376 --> 00:00:42.476 A:middle
welcome to threading
issues with core data.

00:00:42.476 --> 00:00:44.116 A:middle
I'm just kidding.

00:00:44.256 --> 00:00:46.716 A:middle
No, we are here to talk
about interface builder.

00:00:46.716 --> 00:00:48.806 A:middle
My name is Kevin Cathey I'm one

00:00:48.806 --> 00:00:50.566 A:middle
of the interface builder
engineers and we're going

00:00:50.566 --> 00:00:51.806 A:middle
to do something a
little different today,

00:00:52.436 --> 00:00:53.736 A:middle
we're going to show you
some of the new features

00:00:53.736 --> 00:00:56.576 A:middle
of interface builder but I want
to do two other things, one,

00:00:56.576 --> 00:00:59.016 A:middle
we're going to give you
some more advanced content,

00:00:59.046 --> 00:01:01.556 A:middle
tips and tricks, best
practices, interface builder


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:59.046 --> 00:01:01.556 A:middle
tips and tricks, best
practices, interface builder

00:01:01.556 --> 00:01:04.126 A:middle
under the hood, and then
second we're going to look

00:01:04.126 --> 00:01:07.076 A:middle
at interface builder and how
it helps you through each step

00:01:07.076 --> 00:01:08.896 A:middle
of the development
of your application.

00:01:09.136 --> 00:01:10.926 A:middle
Let me explain a
little bit more.

00:01:11.786 --> 00:01:12.476 A:middle
Here is you.

00:01:12.796 --> 00:01:14.296 A:middle
You have a bright idea.

00:01:15.056 --> 00:01:17.136 A:middle
Now, thankfully there
are some other people

00:01:17.136 --> 00:01:19.236 A:middle
who also think your idea
is pretty bright too,

00:01:19.406 --> 00:01:20.486 A:middle
but here is the problem.

00:01:20.736 --> 00:01:22.086 A:middle
They live all around the world

00:01:22.086 --> 00:01:24.436 A:middle
and they use all different
kinds of Apple products.

00:01:25.376 --> 00:01:26.166 A:middle
What are you doing to do?

00:01:26.166 --> 00:01:28.226 A:middle
First you're going to think
about your application,

00:01:28.686 --> 00:01:30.156 A:middle
what are the features
it's going to have?

00:01:30.156 --> 00:01:33.956 A:middle
What will be the different
clumps of shared functionality

00:01:33.956 --> 00:01:35.096 A:middle
that you're going to have?

00:01:35.096 --> 00:01:38.056 A:middle
When you have those you will
look at an individual scene

00:01:38.346 --> 00:01:40.236 A:middle
and within that scene
you will go down

00:01:40.236 --> 00:01:41.986 A:middle
and actually work
at the view level.

00:01:42.646 --> 00:01:44.156 A:middle
Okay so if we step
back for a second,

00:01:44.736 --> 00:01:47.916 A:middle
going from a view all the way up
to deploying multiple products

00:01:48.016 --> 00:01:50.106 A:middle
in languages, that's
a huge process

00:01:50.596 --> 00:01:53.406 A:middle
and interface builder helps
you save boat loads of time

00:01:53.636 --> 00:01:55.276 A:middle
in each one of those steps.

00:01:56.106 --> 00:01:58.476 A:middle
We can take this entire
process and boil it

00:01:58.476 --> 00:02:01.696 A:middle
down into three main
phases which works out great


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.476 --> 00:02:01.696 A:middle
down into three main
phases which works out great

00:02:01.866 --> 00:02:03.186 A:middle
for an agenda for the session.

00:02:03.796 --> 00:02:05.006 A:middle
We're going to start by talking

00:02:05.006 --> 00:02:06.926 A:middle
about interface builder
at design time.

00:02:07.086 --> 00:02:09.186 A:middle
I'm going to give you
guys some best practices

00:02:09.186 --> 00:02:12.046 A:middle
and then we're going to pull the
hood up a little bit and look

00:02:12.046 --> 00:02:13.776 A:middle
at interface builder
at build time,

00:02:13.776 --> 00:02:16.986 A:middle
and then finally we're going
to spend a large section

00:02:17.026 --> 00:02:19.176 A:middle
of this presentation talking
about interface builder

00:02:19.176 --> 00:02:22.666 A:middle
at run time, both how you can
interact with interface builder

00:02:22.666 --> 00:02:25.746 A:middle
at run time and also how can
you take advantage of many

00:02:25.746 --> 00:02:27.846 A:middle
of the different
run time OS features

00:02:27.896 --> 00:02:29.716 A:middle
for making applications
adaptable.

00:02:30.766 --> 00:02:32.466 A:middle
Let's dive in and start
talking about interface builder

00:02:32.466 --> 00:02:34.856 A:middle
at design time and the best way
to talk about interface builder

00:02:34.856 --> 00:02:36.706 A:middle
at design time is to show
you interface builder

00:02:36.706 --> 00:02:38.216 A:middle
at design time.

00:02:38.686 --> 00:02:40.386 A:middle
Now, before I switch
over to the demo here,

00:02:40.746 --> 00:02:44.046 A:middle
in this demo I'm going to
show you five tips and tricks

00:02:44.046 --> 00:02:45.956 A:middle
and five best practices.

00:02:46.266 --> 00:02:48.276 A:middle
We're going to do that
by adding a new feature

00:02:48.276 --> 00:02:49.436 A:middle
to an application we are working

00:02:49.436 --> 00:02:51.336 A:middle
on which is a road
trip application.

00:02:51.336 --> 00:02:53.616 A:middle
We're going to add a new
tab to it that allows me

00:02:53.616 --> 00:03:00.636 A:middle
to follow my friends who are
currently going on a road trip.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:53.616 --> 00:03:00.636 A:middle
to follow my friends who are
currently going on a road trip.

00:03:00.636 --> 00:03:03.286 A:middle
In this application, I'm
going to be working off

00:03:03.286 --> 00:03:07.486 A:middle
of a specification from my
designer, and I'm enjoying this

00:03:07.486 --> 00:03:09.656 A:middle
for two reasons, one if you
are working with a designer

00:03:09.656 --> 00:03:11.326 A:middle
to help maybe give you
guys some of the lingo

00:03:11.326 --> 00:03:13.466 A:middle
that you might interact with
when working with a designer,

00:03:14.036 --> 00:03:16.276 A:middle
and then secondly if you're
not working with a designer

00:03:16.356 --> 00:03:17.786 A:middle
to show you that
building applications

00:03:17.786 --> 00:03:20.526 A:middle
and the best processes going
into that can be done with

00:03:20.526 --> 00:03:21.416 A:middle
or without a designer.

00:03:22.826 --> 00:03:25.756 A:middle
With a static mock up
like the one you see

00:03:25.756 --> 00:03:29.496 A:middle
on the screen there's two main
pieces of data you will grab

00:03:29.496 --> 00:03:32.686 A:middle
from this, one, the
layout, where things go.

00:03:33.006 --> 00:03:36.016 A:middle
Two, the appearance,
what things look like.

00:03:36.626 --> 00:03:38.466 A:middle
We're going to start by
working on the layout

00:03:38.466 --> 00:03:39.906 A:middle
of the application,
and that brings us

00:03:39.906 --> 00:03:43.356 A:middle
to our best practice number
one, adopting auto layout

00:03:43.356 --> 00:03:45.836 A:middle
and specifically
adopting stack views.

00:03:46.826 --> 00:03:49.616 A:middle
Adopting auto layout means
taking the relationships

00:03:49.616 --> 00:03:51.626 A:middle
between views and
co-defying those

00:03:51.626 --> 00:03:53.346 A:middle
in objects called constraints.

00:03:53.716 --> 00:03:56.346 A:middle
For those of you who have
used auto layout in the past,

00:03:56.486 --> 00:03:57.676 A:middle
you'll know that working

00:03:57.676 --> 00:04:01.006 A:middle
with raw constraints is very
flexible, very powerful.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:57.676 --> 00:04:01.006 A:middle
with raw constraints is very
flexible, very powerful.

00:04:01.486 --> 00:04:02.626 A:middle
It's some other things too.

00:04:02.876 --> 00:04:06.136 A:middle
For example, you will sometimes
need to specify the same sets

00:04:06.136 --> 00:04:08.566 A:middle
of constraints repeatedly
and that's

00:04:08.596 --> 00:04:09.866 A:middle
where stack views
come into play.

00:04:10.426 --> 00:04:13.866 A:middle
If constraints are taking
the old, you know, position

00:04:13.866 --> 00:04:15.756 A:middle
and size information
and abstracting

00:04:15.756 --> 00:04:18.786 A:middle
that into relationships, stack
view takes it a step farther

00:04:18.786 --> 00:04:22.526 A:middle
and takes those relationships
and abstracts it into behaviors.

00:04:22.886 --> 00:04:25.476 A:middle
Let's go ahead and adopt
stack view in our application.

00:04:26.186 --> 00:04:28.416 A:middle
Let me switch over to Xcode.

00:04:28.416 --> 00:04:31.206 A:middle
Here is the beginnings of
our awesome new feature.

00:04:31.556 --> 00:04:35.996 A:middle
Adopting stack view in interface
builder literally I don't think

00:04:35.996 --> 00:04:36.746 A:middle
it could be simpler.

00:04:36.936 --> 00:04:39.576 A:middle
I'm just going to select
the views that I want to put

00:04:39.576 --> 00:04:43.386 A:middle
into a stack view and then
using the stack button down here

00:04:43.386 --> 00:04:45.966 A:middle
in the bottom of the
canvas, I just click it,

00:04:46.516 --> 00:04:47.496 A:middle
and now we have a stack view.

00:04:48.566 --> 00:04:51.436 A:middle
Once we have a stack view,
we can adjust several

00:04:51.436 --> 00:04:53.416 A:middle
of the different properties
that a stack view has.

00:04:53.866 --> 00:04:55.726 A:middle
Now, in tomorrow's auto layout
session they're going to go

00:04:55.726 --> 00:04:57.666 A:middle
into all of the different
properties that stack view has

00:04:58.066 --> 00:04:59.346 A:middle
but one that we're
going to focus

00:04:59.346 --> 00:05:00.646 A:middle
on now is called alignment.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.346 --> 00:05:00.646 A:middle
on now is called alignment.

00:05:01.476 --> 00:05:03.226 A:middle
If I switch back to my mock-up,

00:05:04.546 --> 00:05:06.496 A:middle
you can see that my
designer has specified

00:05:06.746 --> 00:05:09.676 A:middle
to baseline a line these labels.

00:05:10.826 --> 00:05:12.156 A:middle
What is baseline alignment?

00:05:13.346 --> 00:05:15.666 A:middle
Baseline alignment basically
allows you to take text

00:05:16.076 --> 00:05:19.226 A:middle
that is different font sizes and
make it look nice and aligned.

00:05:19.226 --> 00:05:22.396 A:middle
If you have textual objects
like buttons and labels

00:05:22.396 --> 00:05:24.146 A:middle
and segmented controls
you're going to want

00:05:24.146 --> 00:05:28.986 A:middle
to baseline align these versus
using top or center or bottom.

00:05:28.986 --> 00:05:35.096 A:middle
So let's go back to interface
builder and what we can do is

00:05:35.096 --> 00:05:40.176 A:middle
if I go into the attributes
inspector I can change the

00:05:40.176 --> 00:05:43.396 A:middle
alignment of my stack view
to be baseline aligned.

00:05:43.546 --> 00:05:44.856 A:middle
Now, there is first
and last year,

00:05:44.856 --> 00:05:46.416 A:middle
so if you have multi-line text,

00:05:46.716 --> 00:05:48.466 A:middle
you can target either
the first line of text

00:05:48.466 --> 00:05:49.346 A:middle
or the last line of text.

00:05:49.616 --> 00:05:53.776 A:middle
In this case it's single line
so it doesn't really matter

00:05:53.776 --> 00:05:54.856 A:middle
so we'll go with first.

00:05:54.856 --> 00:05:55.426 A:middle
Wonderful.

00:05:56.256 --> 00:05:59.126 A:middle
So let's continue adopting stack
view, I can take this stack

00:05:59.126 --> 00:06:00.666 A:middle
in this label and
put it in stack view


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.126 --> 00:06:00.666 A:middle
in this label and
put it in stack view

00:06:01.216 --> 00:06:02.406 A:middle
and I can add our image view.

00:06:02.406 --> 00:06:05.186 A:middle
As I'm embedding in stack view,

00:06:05.186 --> 00:06:07.996 A:middle
interface builder is
automatically inferring the

00:06:07.996 --> 00:06:10.996 A:middle
different attributes such as the
alignment and the orientation.

00:06:10.996 --> 00:06:14.206 A:middle
Now that we have this
outer stack view we want

00:06:14.206 --> 00:06:16.116 A:middle
to position this
within our table cell

00:06:16.206 --> 00:06:17.076 A:middle
which is not a stack view.

00:06:17.506 --> 00:06:19.876 A:middle
And to do this we're going
to use raw constraints.

00:06:20.896 --> 00:06:26.016 A:middle
I'm going to go to my tie
fighter and go ahead and open

00:06:26.016 --> 00:06:28.966 A:middle
up add constraints and I
want to clarify two things

00:06:28.966 --> 00:06:31.846 A:middle
in this pop-up, the
first is what is

00:06:31.846 --> 00:06:32.886 A:middle
up with the layout margins?

00:06:33.086 --> 00:06:34.016 A:middle
What are these things.

00:06:34.896 --> 00:06:37.326 A:middle
Layout margins are
insets from a view

00:06:37.626 --> 00:06:40.536 A:middle
that by default the system
provides some values for

00:06:40.536 --> 00:06:44.046 A:middle
and if you use the default
layout margins they can be

00:06:44.046 --> 00:06:47.246 A:middle
automatically adapted based upon
different context, for example,

00:06:47.246 --> 00:06:48.396 A:middle
the device or the
view hierarchy.

00:06:49.446 --> 00:06:53.896 A:middle
Generally if you have
content like buttons, labels,

00:06:54.056 --> 00:06:57.116 A:middle
things that people interact
with or see, then you are going

00:06:57.116 --> 00:06:58.876 A:middle
to want to constrain
things to the margins

00:06:58.966 --> 00:07:00.596 A:middle
if it's not constrained
to another sub view.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:58.966 --> 00:07:00.596 A:middle
if it's not constrained
to another sub view.

00:07:01.216 --> 00:07:02.796 A:middle
If you have something like
an image view that kind

00:07:02.796 --> 00:07:05.656 A:middle
of sits behind your
entire table view cell

00:07:05.916 --> 00:07:07.456 A:middle
that makes perfect
sense to constrain it

00:07:07.456 --> 00:07:09.186 A:middle
to the edges instead so even

00:07:09.186 --> 00:07:11.666 A:middle
if those margins change
your imagery will still be

00:07:11.896 --> 00:07:13.816 A:middle
in the background.

00:07:13.846 --> 00:07:16.196 A:middle
If I uncheck constraints,
constraints

00:07:16.196 --> 00:07:18.346 A:middle
and margins you can see larger
values coming into play.

00:07:18.716 --> 00:07:21.336 A:middle
Interface builder defaults
to margins which is helpful

00:07:21.336 --> 00:07:22.356 A:middle
because that's exactly
what I want.

00:07:23.406 --> 00:07:26.036 A:middle
Second thing I want to clarify
is this update frames here

00:07:26.036 --> 00:07:26.766 A:middle
which I am going to use.

00:07:27.186 --> 00:07:28.506 A:middle
Update frames is the process

00:07:28.506 --> 00:07:31.806 A:middle
of interface builder moving
your views in the IB canvas

00:07:31.806 --> 00:07:33.956 A:middle
to match what the constraints
would be at run time.

00:07:34.426 --> 00:07:36.186 A:middle
When I'm adding constraints
I have a couple

00:07:36.186 --> 00:07:37.516 A:middle
of options for doing this.

00:07:38.516 --> 00:07:41.616 A:middle
If I say all frames in
container it means for all

00:07:41.616 --> 00:07:43.016 A:middle
of the sub views in
my table view cell,

00:07:43.016 --> 00:07:45.296 A:middle
move them to where the
constraints would tell them

00:07:45.296 --> 00:07:46.996 A:middle
to be at run time.

00:07:47.416 --> 00:07:50.866 A:middle
However, if I have a really
large view with lots and lots

00:07:50.866 --> 00:07:54.236 A:middle
of sub views, I might only
want to move the things

00:07:54.236 --> 00:07:56.116 A:middle
that I'm currently working
on at that instance,

00:07:56.166 --> 00:07:58.476 A:middle
and that's what this
middle option is,

00:07:58.476 --> 00:08:01.796 A:middle
it only moves the items that
are actually going to be


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.476 --> 00:08:01.796 A:middle
it only moves the items that
are actually going to be

00:08:01.796 --> 00:08:02.966 A:middle
in the new constraints
I'm adding.

00:08:03.786 --> 00:08:05.546 A:middle
Now, I only have one
thing so it doesn't matter

00:08:06.026 --> 00:08:08.986 A:middle
so we will do all frames
and add those constraints

00:08:10.006 --> 00:08:11.586 A:middle
and now we are on our way.

00:08:12.206 --> 00:08:14.956 A:middle
Okay. Next thing I want to
do is change the alignment

00:08:15.016 --> 00:08:17.036 A:middle
of the items inside
the stack view.

00:08:17.446 --> 00:08:19.156 A:middle
Another example of doing that.

00:08:19.156 --> 00:08:21.766 A:middle
I will change that
to fill and now,

00:08:21.886 --> 00:08:24.336 A:middle
that's not exactly what
I'm looking for, right?

00:08:25.306 --> 00:08:28.286 A:middle
Stack views are built
on top of auto layout,

00:08:28.616 --> 00:08:30.386 A:middle
which means that you
can use constraints

00:08:30.386 --> 00:08:32.316 A:middle
to fine tune your layout.

00:08:33.226 --> 00:08:36.376 A:middle
So if I want to make this image
view have a one-on-one ratio,

00:08:36.376 --> 00:08:37.265 A:middle
even though it's
in a stack view,

00:08:37.265 --> 00:08:40.405 A:middle
I can still add constraints
so I can add an aspect ratio

00:08:40.405 --> 00:08:46.436 A:middle
and then change the
multiplier to be one to one.

00:08:46.626 --> 00:08:50.656 A:middle
The next thing I want to do
is add spacing in between

00:08:50.656 --> 00:08:52.866 A:middle
that image view and
the right hand content.

00:08:53.906 --> 00:08:56.246 A:middle
Because my designer would like
there to be some padding there.

00:08:57.196 --> 00:08:59.986 A:middle
Now, the stack view that I
need to change the spacing

00:08:59.986 --> 00:09:03.826 A:middle
on is fully occluded by
labels and other stack views?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.986 --> 00:09:03.826 A:middle
on is fully occluded by
labels and other stack views?

00:09:04.006 --> 00:09:04.786 A:middle
How can I get at it?

00:09:04.886 --> 00:09:06.286 A:middle
There are a couple
of ways you can get

00:09:06.286 --> 00:09:07.776 A:middle
at occluded views in
interface builder.

00:09:08.136 --> 00:09:10.366 A:middle
I could use the jump bar or
I could use the outline view,

00:09:10.566 --> 00:09:12.186 A:middle
but I'm going to show
you my personal favorite

00:09:12.186 --> 00:09:14.216 A:middle
which brings us to
Xcode pro tip number one

00:09:14.586 --> 00:09:15.656 A:middle
which is fast selection.

00:09:16.296 --> 00:09:18.636 A:middle
If I shift right click
or control left click.

00:09:18.636 --> 00:09:21.196 A:middle
I can get a menu of
everything underneath the mouse

00:09:21.196 --> 00:09:23.386 A:middle
at that point and then I
can easily select the thing

00:09:23.386 --> 00:09:24.066 A:middle
that I'm looking for.

00:09:24.066 --> 00:09:28.706 A:middle
Once I have it selected
I can change the spacing

00:09:29.316 --> 00:09:31.486 A:middle
to what I need and there we go.

00:09:32.676 --> 00:09:34.296 A:middle
The last thing I
want to show you

00:09:34.296 --> 00:09:38.236 A:middle
with stack view is how you can
use multiple stack views nested

00:09:38.236 --> 00:09:41.196 A:middle
together to get the exact
layout you are looking for.

00:09:41.736 --> 00:09:43.656 A:middle
If we go back to our
specification here,

00:09:44.986 --> 00:09:48.866 A:middle
you can see this set of labels
our designer would like it

00:09:48.866 --> 00:09:51.766 A:middle
to act as a unit and
be centered vertically

00:09:51.766 --> 00:09:53.136 A:middle
within the table view cell.

00:09:54.166 --> 00:09:56.596 A:middle
We can do this by putting
the right hand content

00:09:56.646 --> 00:09:58.646 A:middle
in another stack view and
adjusting the alignment.

00:09:59.196 --> 00:09:59.866 A:middle
Let me show you that.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:00.916 --> 00:10:04.436 A:middle
I will use my fast selection
again to get to the stack view.

00:10:04.436 --> 00:10:06.976 A:middle
I'm going to embed it
in another stack view.

00:10:08.396 --> 00:10:10.936 A:middle
You can see the blue got a
little darker to show you that,

00:10:11.266 --> 00:10:14.236 A:middle
and now I can change
my alignment to center.

00:10:15.186 --> 00:10:18.196 A:middle
Now, alignment affects the
non-stacking direction.

00:10:18.196 --> 00:10:20.556 A:middle
Because this is a
vertical stack view,

00:10:20.556 --> 00:10:22.636 A:middle
it's going to be adjusting
the horizontal alignment,

00:10:22.636 --> 00:10:24.236 A:middle
but I want to affect
the vertical alignment

00:10:24.236 --> 00:10:26.786 A:middle
so I will change the
access to horizontal.

00:10:27.796 --> 00:10:31.136 A:middle
And you can see with stack views
I can get the exact layout I'm

00:10:31.136 --> 00:10:33.526 A:middle
looking for with very
minimal constraints.

00:10:34.256 --> 00:10:37.916 A:middle
Our recommendation when
adopting auto layout is

00:10:37.916 --> 00:10:41.156 A:middle
to use stack views and to
try to use stack views first

00:10:41.156 --> 00:10:43.736 A:middle
and then only when you need to
actually use raw constraints.

00:10:44.166 --> 00:10:45.596 A:middle
We think you're going
to be able to build most

00:10:45.596 --> 00:10:47.186 A:middle
of your UIs using stack views.

00:10:47.186 --> 00:10:48.396 A:middle
Which makes it easy to build.

00:10:48.396 --> 00:10:50.296 A:middle
It makes it really
easy to experiment

00:10:50.566 --> 00:10:53.416 A:middle
with different layouts without
having to adjust a bunch

00:10:53.416 --> 00:10:55.956 A:middle
of constraints and it also
makes it very maintainable

00:10:55.956 --> 00:10:57.506 A:middle
when you go back
in later and have

00:10:57.506 --> 00:11:01.566 A:middle
to edit one of your documents.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:57.506 --> 00:11:01.566 A:middle
to edit one of your documents.

00:11:03.346 --> 00:11:06.616 A:middle
The next thing we want
to do is start looking

00:11:06.616 --> 00:11:08.516 A:middle
at the appearance
of our application.

00:11:08.726 --> 00:11:09.556 A:middle
And the first thing I'm going

00:11:09.556 --> 00:11:12.496 A:middle
to do is prepare our
canvas for some design time.

00:11:13.696 --> 00:11:16.866 A:middle
To do this I'm going to go
under the edit canvas menu.

00:11:16.866 --> 00:11:18.806 A:middle
And interface builder
has lots of options

00:11:18.806 --> 00:11:20.756 A:middle
for customizing what's
drawn on the canvas.

00:11:21.356 --> 00:11:23.596 A:middle
For example, these blue
backgrounds the stack view is

00:11:24.086 --> 00:11:26.426 A:middle
drawing for me are really
helpful at layout time

00:11:26.426 --> 00:11:29.216 A:middle
so I can see exactly how big
that stack view is going to be,

00:11:29.456 --> 00:11:32.506 A:middle
but at design time I want to
see what it's actually going

00:11:32.506 --> 00:11:33.876 A:middle
to look like at runtime.

00:11:33.876 --> 00:11:36.396 A:middle
So I will just go ahead
and turn those off.

00:11:38.206 --> 00:11:41.906 A:middle
Okay. In the appearance section
of this demo, we are going

00:11:41.906 --> 00:11:44.866 A:middle
to look at three best practices
with using interface builder.

00:11:45.806 --> 00:11:47.346 A:middle
If we go back to
our specification,

00:11:47.346 --> 00:11:48.306 A:middle
we'll see the first one.

00:11:49.896 --> 00:11:53.036 A:middle
Our designer has specified
headline and body instead

00:11:53.036 --> 00:11:56.976 A:middle
of an explicit font
or font size.

00:11:57.246 --> 00:11:57.916 A:middle
What are these?

00:11:58.706 --> 00:12:00.826 A:middle
These are called
dynamic type styles.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.706 --> 00:12:00.826 A:middle
These are called
dynamic type styles.

00:12:01.156 --> 00:12:03.486 A:middle
They are defined by the
system and when you use them,

00:12:03.826 --> 00:12:04.766 A:middle
it allows the system

00:12:04.766 --> 00:12:08.466 A:middle
to automatically adapt what the
effective size and font is going

00:12:08.466 --> 00:12:12.206 A:middle
to be at runtime based upon
your user's preferences.

00:12:12.446 --> 00:12:15.726 A:middle
For example, the user
can adjust accessibility

00:12:15.726 --> 00:12:16.616 A:middle
to have a larger font.

00:12:17.416 --> 00:12:20.096 A:middle
Your application when using
dynamic type will automatically

00:12:20.096 --> 00:12:23.596 A:middle
adapt to those font changes and
if you are using auto layout,

00:12:23.596 --> 00:12:26.176 A:middle
the views will all
flow around it.

00:12:26.296 --> 00:12:28.086 A:middle
So we can adopt this
really easily inside

00:12:28.086 --> 00:12:28.776 A:middle
of interface builder.

00:12:30.146 --> 00:12:32.546 A:middle
I can just select the label I
want to adopt dynamic type for

00:12:32.586 --> 00:12:37.506 A:middle
and the inspector,
I can pick one

00:12:37.506 --> 00:12:41.106 A:middle
of the font styles instead
of an explicit font.

00:12:41.216 --> 00:12:43.466 A:middle
In this case, I will
choose headline.

00:12:43.996 --> 00:12:45.916 A:middle
I have already adopted it
for the rest of my labels

00:12:45.976 --> 00:12:48.766 A:middle
so we are done with
dynamic type.

00:12:50.456 --> 00:12:52.616 A:middle
The next thing we are going
to do is we are going to bring

00:12:52.616 --> 00:12:55.096 A:middle
that image view to
life and we are going

00:12:55.096 --> 00:12:56.886 A:middle
to use two best practices
for this.

00:12:57.156 --> 00:12:59.836 A:middle
One is designables, and
two is inspectables.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:00.606 --> 00:13:04.256 A:middle
Designables allows us to see our
custom drawing code right inside

00:13:04.256 --> 00:13:05.446 A:middle
the interface builder canvas.

00:13:06.196 --> 00:13:07.646 A:middle
So let's go ahead and
get some code for that.

00:13:07.786 --> 00:13:12.256 A:middle
I want to go ahead and open
up the product navigator.

00:13:12.456 --> 00:13:13.836 A:middle
Let's add some files.

00:13:14.226 --> 00:13:15.926 A:middle
Tony, who is going to come

00:13:15.926 --> 00:13:19.296 A:middle
up later just air dropped me
this code, so let's go ahead

00:13:19.296 --> 00:13:21.916 A:middle
and add that to our project,
and I'm going to go ahead

00:13:21.916 --> 00:13:24.556 A:middle
and open this, and
in opening it,

00:13:24.556 --> 00:13:27.416 A:middle
I'm going to show you guys
Xcode pro tip number three,

00:13:27.486 --> 00:13:29.066 A:middle
which is advanced navigation.

00:13:29.816 --> 00:13:34.316 A:middle
If I option shift click this
file, I get a little hud.

00:13:35.346 --> 00:13:38.986 A:middle
This hud allows me to target
where I want to open this file.

00:13:39.526 --> 00:13:42.996 A:middle
So I can choose a new tab,
I can choose a new split.

00:13:43.126 --> 00:13:46.036 A:middle
If I have multiple tabs I can
even target specific splits

00:13:46.036 --> 00:13:47.526 A:middle
within tabs that
aren't even open.

00:13:48.196 --> 00:13:51.256 A:middle
And as I use command I can also
even open it in a new window.

00:13:52.176 --> 00:13:57.616 A:middle
In this case, I'm just going
to do the assistant editor.

00:13:58.076 --> 00:14:01.696 A:middle
Adopting designables is a
really simple two step process.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.076 --> 00:14:01.696 A:middle
Adopting designables is a
really simple two step process.

00:14:02.186 --> 00:14:04.826 A:middle
All you have to do is
mark a subclass of UI view

00:14:04.826 --> 00:14:08.056 A:middle
with IB designable, and
then set that custom class

00:14:08.296 --> 00:14:09.146 A:middle
with an interface builder.

00:14:09.726 --> 00:14:13.436 A:middle
So if we select our image
view or what's going

00:14:13.436 --> 00:14:16.316 A:middle
to be our image view, change
the identity inspector,

00:14:16.356 --> 00:14:19.906 A:middle
and add in our customs
subclass here.

00:14:20.596 --> 00:14:22.446 A:middle
Interface builder is
going to build my project,

00:14:22.966 --> 00:14:27.476 A:middle
launch a process for rendering,
bring in my code, render it

00:14:27.476 --> 00:14:28.936 A:middle
and show me that in the canvas.

00:14:30.536 --> 00:14:32.776 A:middle
And if I change the code,

00:14:32.776 --> 00:14:38.496 A:middle
it's going to automatically take
those new changes, build them,

00:14:39.026 --> 00:14:42.016 A:middle
and apply them within
interface builder as well.

00:14:42.016 --> 00:14:47.606 A:middle
The next thing I want to
go is adopt inspectables.

00:14:48.036 --> 00:14:49.976 A:middle
You can see I have a couple
different properties here marked

00:14:49.976 --> 00:14:50.956 A:middle
add IB inspectable.

00:14:51.126 --> 00:14:52.456 A:middle
When you mark a property

00:14:52.456 --> 00:14:54.886 A:middle
as IB inspectable it
allows interface builder

00:14:54.886 --> 00:14:56.396 A:middle
to generate an inspector
for you.

00:14:57.466 --> 00:15:01.216 A:middle
If I select image view, go
to the attributes inspector,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:57.466 --> 00:15:01.216 A:middle
If I select image view, go
to the attributes inspector,

00:15:02.176 --> 00:15:03.846 A:middle
you can see that those
three properties I marked

00:15:03.846 --> 00:15:05.886 A:middle
as inspectable are showing
up now in our inspector

00:15:06.886 --> 00:15:08.026 A:middle
and we can quickly adopt these.

00:15:09.086 --> 00:15:12.946 A:middle
So I can say I'm going to
add that little image there.

00:15:13.036 --> 00:15:14.066 A:middle
We're going to do
our stroke with.

00:15:14.066 --> 00:15:17.006 A:middle
I think the spec said two,
if I recall correctly.

00:15:18.336 --> 00:15:21.126 A:middle
And we can give it a nice
border color as well.

00:15:22.576 --> 00:15:24.206 A:middle
Now, what's going on
here is that designables

00:15:24.206 --> 00:15:25.726 A:middle
and inspectables
are working together

00:15:25.726 --> 00:15:28.306 A:middle
to help you rapidly
iterate on your design.

00:15:28.546 --> 00:15:32.096 A:middle
I haven't built and ran once and
I can see exactly what I'm going

00:15:32.096 --> 00:15:33.836 A:middle
to get at runtime
because of the power

00:15:33.836 --> 00:15:35.386 A:middle
of designables and inspectables.

00:15:35.916 --> 00:15:41.046 A:middle
And that's our section on
adjusting the appearance

00:15:41.396 --> 00:15:42.736 A:middle
of our application
with the dynamic type,

00:15:43.166 --> 00:15:44.946 A:middle
designables and inspectables.

00:15:47.076 --> 00:15:51.736 A:middle
Now, we all know that our
applications are not made

00:15:51.736 --> 00:15:53.866 A:middle
up of a single scene, okay,

00:15:53.866 --> 00:15:57.686 A:middle
unless you write the flashlight
app, but generally you're going

00:15:57.686 --> 00:15:59.466 A:middle
to have multiple scenes
in your application.

00:15:59.716 --> 00:16:01.236 A:middle
And if I zoom the storyboard


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.716 --> 00:16:01.236 A:middle
And if I zoom the storyboard

00:16:01.236 --> 00:16:04.396 A:middle
out I can see there is a lot
more scenes in my application.

00:16:05.316 --> 00:16:06.796 A:middle
You can bring a scene
into the flow

00:16:06.796 --> 00:16:08.476 A:middle
of your application
using segues.

00:16:09.396 --> 00:16:12.066 A:middle
To make a segue I can control
drag from a view controller

00:16:12.116 --> 00:16:15.256 A:middle
or an object that can initiate
a segue and select the type

00:16:15.256 --> 00:16:17.086 A:middle
of segue I want to add.

00:16:17.356 --> 00:16:19.336 A:middle
In this case I will add
a relationship segue

00:16:19.336 --> 00:16:22.436 A:middle
to add another tab to
our tab bar controller.

00:16:24.306 --> 00:16:26.966 A:middle
Now, once we actually have made
the segue, I realize that I kind

00:16:27.016 --> 00:16:28.296 A:middle
of want to be able to navigate

00:16:28.536 --> 00:16:30.196 A:middle
within this table view
controller, so I am going

00:16:30.196 --> 00:16:32.076 A:middle
to embed this in a
navigation controller.

00:16:32.076 --> 00:16:33.996 A:middle
I will choose the editor menu,

00:16:34.376 --> 00:16:37.696 A:middle
embed and embed this inside
a navigation controller.

00:16:38.786 --> 00:16:40.406 A:middle
I want to point out something

00:16:40.406 --> 00:16:42.236 A:middle
that interface builder
is doing to help us here.

00:16:42.236 --> 00:16:43.626 A:middle
This is another Xcode pro tip.

00:16:44.466 --> 00:16:47.956 A:middle
Interface builder is showing
us a nav bar and a tab bar

00:16:47.956 --> 00:16:49.256 A:middle
for this particular scene.

00:16:49.926 --> 00:16:52.146 A:middle
Now these objects are
not added to the scene,

00:16:52.146 --> 00:16:53.936 A:middle
interface builder has not
added these to your scene

00:16:54.216 --> 00:16:57.436 A:middle
but what it is doing is helping
you see what your application is

00:16:57.436 --> 00:16:59.836 A:middle
going to look like at
runtime given some context.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:00.236 --> 00:17:02.556 A:middle
This makes it really
easy to be able to design

00:17:02.946 --> 00:17:06.496 A:middle
for different contexts without
having to build and run.

00:17:06.576 --> 00:17:08.836 A:middle
You can see what your simulated
metrics are, which is the name

00:17:08.836 --> 00:17:11.596 A:middle
of the feature, by selecting
your view controller.

00:17:11.596 --> 00:17:14.366 A:middle
And then going to the
attributes inspector

00:17:15.356 --> 00:17:17.046 A:middle
and you can see my
simulated metrics.

00:17:17.445 --> 00:17:19.246 A:middle
Now, right now they are
all saying inferred.

00:17:19.455 --> 00:17:21.596 A:middle
Inferred just basically means
use the context around me.

00:17:21.925 --> 00:17:23.536 A:middle
We know we are inside
a tab bar controller,

00:17:23.536 --> 00:17:25.465 A:middle
we know that we're
inside a nav controller

00:17:25.746 --> 00:17:28.096 A:middle
so interface builder
knows which bar to show.

00:17:28.096 --> 00:17:30.376 A:middle
I can override these
to be whatever I need.

00:17:31.386 --> 00:17:34.226 A:middle
So, for example, I could
say actually I want to look

00:17:34.226 --> 00:17:35.736 A:middle
like what is it going
to look like with prompt

00:17:35.736 --> 00:17:36.916 A:middle
if I had prompt text in there?

00:17:36.916 --> 00:17:38.476 A:middle
What if the top bar was black.

00:17:38.476 --> 00:17:40.906 A:middle
I will put this back
on inferred.

00:17:42.376 --> 00:17:46.766 A:middle
All of these metrics do not
affect your actual application

00:17:46.766 --> 00:17:49.016 A:middle
at runtime with one exception

00:17:49.206 --> 00:17:50.996 A:middle
and that's the size
simulated metric.

00:17:51.446 --> 00:17:53.906 A:middle
The size simulated metric
will actually change the size

00:17:53.906 --> 00:17:55.956 A:middle
of your view controller but
generally you're going to put it

00:17:55.956 --> 00:17:58.236 A:middle
into a view controller
hierarchy which will resize it,

00:17:58.746 --> 00:18:01.806 A:middle
but it's also helpful if you
are creating free form view


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.746 --> 00:18:01.806 A:middle
but it's also helpful if you
are creating free form view

00:18:01.806 --> 00:18:03.806 A:middle
controllers, for example, and
want to set your own size.

00:18:04.846 --> 00:18:08.506 A:middle
It's also helpful if you are
wanting to be able to design

00:18:08.506 --> 00:18:10.076 A:middle
with a specific size
in mind even

00:18:10.076 --> 00:18:12.196 A:middle
if your application is going
to run on multiple devices.

00:18:12.816 --> 00:18:17.356 A:middle
The spec I was given was for
iPhone 6 Plus, so I can change

00:18:17.356 --> 00:18:20.536 A:middle
to a 5.5 in screen size
and be able to edit

00:18:21.256 --> 00:18:24.766 A:middle
as if the view controller
was going to be that size.

00:18:25.566 --> 00:18:26.276 A:middle
There's other features

00:18:26.276 --> 00:18:27.916 A:middle
of interface builder we are
not going to talk about today

00:18:28.196 --> 00:18:30.586 A:middle
which allows you to see what
your view controller will look

00:18:30.586 --> 00:18:31.976 A:middle
like on multiple devices

00:18:31.976 --> 00:18:34.306 A:middle
at the same time using
the preview assistant,

00:18:34.706 --> 00:18:37.116 A:middle
but this is really helpful
for just being able to edit

00:18:37.336 --> 00:18:39.006 A:middle
with a particular
context in mind.

00:18:39.066 --> 00:18:39.686 A:middle
All right.

00:18:40.996 --> 00:18:42.586 A:middle
Let's go back to inferred

00:18:42.586 --> 00:18:44.076 A:middle
and let's finish off
our view controller.

00:18:45.536 --> 00:18:47.646 A:middle
Give it a title, your friends.

00:18:48.836 --> 00:18:50.826 A:middle
Let's add some bar button items.

00:18:51.376 --> 00:18:57.536 A:middle
We had add one for being
able to invite a new friend.

00:18:58.076 --> 00:19:00.646 A:middle
And with Xcode 7 I can
add multiple bar items


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:58.076 --> 00:19:00.646 A:middle
And with Xcode 7 I can
add multiple bar items

00:19:00.766 --> 00:19:02.526 A:middle
to my navigation item.

00:19:04.516 --> 00:19:09.716 A:middle
[Applause]

00:19:10.216 --> 00:19:10.936 A:middle
It's the small features, right?

00:19:11.516 --> 00:19:13.606 A:middle
[laughter]

00:19:14.106 --> 00:19:16.906 A:middle
Let's finish off this
by adding a segue

00:19:17.376 --> 00:19:20.306 A:middle
to present this guy
modally, and if you zoom

00:19:20.306 --> 00:19:23.826 A:middle
out we have a great start
to your application.

00:19:25.576 --> 00:19:28.166 A:middle
Just like I would
refactor my code

00:19:28.166 --> 00:19:31.636 A:middle
into separate files based
upon the reuse of it

00:19:31.636 --> 00:19:32.946 A:middle
or related functionality,

00:19:32.946 --> 00:19:35.366 A:middle
I can do the exact same
thing now with interface.

00:19:36.706 --> 00:19:40.096 A:middle
If I just select the view
controllers that I want and go

00:19:40.096 --> 00:19:42.836 A:middle
under the editor menu, I can
select refactor to storyboard.

00:19:43.796 --> 00:19:45.566 A:middle
You can type in a name,
I will call it follow

00:19:45.566 --> 00:19:46.686 A:middle
because this is our follow tab.

00:19:47.226 --> 00:19:49.856 A:middle
Interface builder is going
to create a new storyboard,

00:19:50.046 --> 00:19:52.586 A:middle
move those view controller
scenes into the storyboard

00:19:53.006 --> 00:19:56.546 A:middle
and put a reference to the
scenes in the old storyboard.

00:19:57.096 --> 00:19:59.916 A:middle
Now, it's really easy to
collaborate with storyboards.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:00.516 --> 00:20:06.546 A:middle
[Applause]

00:20:07.046 --> 00:20:07.696 A:middle
And it's the big features.

00:20:08.191 --> 00:20:10.191 A:middle
[laughter]

00:20:10.366 --> 00:20:13.016 A:middle
Let's go back to slides.

00:20:13.216 --> 00:20:15.096 A:middle
We have looked at a number

00:20:15.096 --> 00:20:16.736 A:middle
of different things
here so let's recap.

00:20:17.416 --> 00:20:18.606 A:middle
All right.

00:20:19.546 --> 00:20:22.096 A:middle
I have given you
five best practices.

00:20:22.526 --> 00:20:25.046 A:middle
We have adopted stack
views and dynamic type

00:20:25.046 --> 00:20:26.666 A:middle
to make your applications
adaptable.

00:20:26.666 --> 00:20:30.096 A:middle
We have adopted designables
and inspectables to be able

00:20:30.096 --> 00:20:31.536 A:middle
to rapidly iterate
on your design

00:20:31.536 --> 00:20:32.616 A:middle
without having to build and run.

00:20:33.236 --> 00:20:35.716 A:middle
And finally we have used
storyboard references

00:20:35.716 --> 00:20:38.616 A:middle
to make sure we are properly
modularizing our interface just

00:20:38.616 --> 00:20:39.616 A:middle
like we would do for our code.

00:20:39.616 --> 00:20:42.246 A:middle
I have also given
you a couple of tips

00:20:42.246 --> 00:20:43.786 A:middle
that I hope you guys
are going to find useful

00:20:43.786 --> 00:20:45.386 A:middle
as you're using interface
builder like being able

00:20:45.386 --> 00:20:48.366 A:middle
to select things, being able
to customize the canvas,

00:20:48.856 --> 00:20:51.806 A:middle
open files exactly where you
want them using multiple bar

00:20:51.806 --> 00:20:55.026 A:middle
items and, of course, taking
advantage of simulated metrics

00:20:55.126 --> 00:20:59.056 A:middle
to see at design time what you
are going to get at run time.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:00.056 --> 00:21:01.666 A:middle
But what happens
when I hit build?

00:21:01.666 --> 00:21:04.626 A:middle
Let's talk a little bit about
what interface builder is doing

00:21:04.626 --> 00:21:05.506 A:middle
for you at build time.

00:21:07.086 --> 00:21:08.956 A:middle
Now, to do this we are going
to have to take a step back

00:21:09.096 --> 00:21:11.096 A:middle
and look again at design time

00:21:11.096 --> 00:21:12.826 A:middle
and where we are
going with run time.

00:21:13.406 --> 00:21:16.216 A:middle
At design time you are
working with XML documents.

00:21:16.756 --> 00:21:20.626 A:middle
At build time a process called
IB tool takes these documents

00:21:20.906 --> 00:21:23.716 A:middle
and compiles them
into nib files.

00:21:24.186 --> 00:21:27.546 A:middle
Nib files are small, very
optimized binary files

00:21:27.546 --> 00:21:29.956 A:middle
and it uses a process
called keyed archiving

00:21:29.956 --> 00:21:30.726 A:middle
for creating these.

00:21:31.806 --> 00:21:34.526 A:middle
I have a few examples of
what this could look like.

00:21:35.366 --> 00:21:37.286 A:middle
When interface builder is
compiling a storyboard it's

00:21:37.286 --> 00:21:38.886 A:middle
doing two things first,

00:21:38.886 --> 00:21:41.976 A:middle
it's trying to maximize the
performance of your application

00:21:42.526 --> 00:21:44.556 A:middle
and secondly it's also
minimizing the number

00:21:44.556 --> 00:21:45.826 A:middle
of nib files created.

00:21:46.816 --> 00:21:50.966 A:middle
If I have a view controller with
a view and a bunch of sub views,

00:21:52.256 --> 00:21:53.866 A:middle
interface builder, the
build time is going

00:21:53.866 --> 00:21:55.496 A:middle
to create a nib file
for the view controller

00:21:55.876 --> 00:21:57.906 A:middle
and create a nib
file for the view.

00:21:59.166 --> 00:22:00.586 A:middle
Why two nib files.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.166 --> 00:22:00.586 A:middle
Why two nib files.

00:22:01.476 --> 00:22:03.906 A:middle
By having separate nib files
for both the view controller

00:22:03.906 --> 00:22:06.476 A:middle
and the view, this means the
view hierarchy can be loaded

00:22:06.476 --> 00:22:07.216 A:middle
on demand.

00:22:08.446 --> 00:22:10.606 A:middle
With this other example here,
with the table view controller

00:22:10.606 --> 00:22:13.476 A:middle
and navigation controller
things get even a little

00:22:13.476 --> 00:22:14.036 A:middle
more interesting.

00:22:14.796 --> 00:22:16.876 A:middle
Again, interface builder is
trying to minimize the number

00:22:16.876 --> 00:22:19.816 A:middle
of nib files it's creating with
a relationship segue we know

00:22:19.816 --> 00:22:22.226 A:middle
that those two view
controllers go together,

00:22:22.226 --> 00:22:24.176 A:middle
so we will put those
in the same nib.

00:22:25.226 --> 00:22:28.676 A:middle
Next we are going to give you
a nib file for the table view

00:22:28.926 --> 00:22:31.576 A:middle
and also a nib file
for each of the cells.

00:22:32.326 --> 00:22:35.216 A:middle
So how does this
play out at run time?

00:22:36.606 --> 00:22:40.456 A:middle
When you allocate a storyboard
instance using UI storyboard,

00:22:40.726 --> 00:22:43.946 A:middle
API, initially all you
are allocating memory

00:22:43.946 --> 00:22:46.176 A:middle
for is the UI storyboard
instance itself.

00:22:46.546 --> 00:22:48.326 A:middle
No view controllers
no views yet.

00:22:49.396 --> 00:22:51.426 A:middle
When you instantiate your
initial view controller it will

00:22:51.426 --> 00:22:54.516 A:middle
load the nib for that initial
view controller but, again,

00:22:54.596 --> 00:22:55.846 A:middle
no view hierarchy
has been loaded

00:22:55.846 --> 00:22:57.956 A:middle
yet until someone
actually asks for it.

00:22:59.656 --> 00:23:02.256 A:middle
Similarly, if I gave that
navigation controller


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.656 --> 00:23:02.256 A:middle
Similarly, if I gave that
navigation controller

00:23:02.256 --> 00:23:04.956 A:middle
and table view controller an
identifier then I could use the

00:23:04.956 --> 00:23:07.656 A:middle
instantiate API to
be able to get

00:23:07.656 --> 00:23:09.626 A:middle
that view controller
instance, but, again,

00:23:09.626 --> 00:23:11.076 A:middle
the view has not been
loaded into memory

00:23:11.366 --> 00:23:13.426 A:middle
until someone actually
asks for it.

00:23:14.456 --> 00:23:15.886 A:middle
How about those table
view cells?

00:23:16.006 --> 00:23:16.766 A:middle
This is where it gets fun.

00:23:16.766 --> 00:23:18.326 A:middle
So interface builder is going

00:23:18.326 --> 00:23:22.556 A:middle
to automatically take table view
cells, nibs, and register them

00:23:22.556 --> 00:23:25.256 A:middle
with the table view under
your reuse identifier

00:23:25.256 --> 00:23:26.986 A:middle
that you set, that
table view cell.

00:23:26.986 --> 00:23:30.096 A:middle
Now, what this means is that
these cells are not going

00:23:30.096 --> 00:23:33.536 A:middle
to be loaded until someone
actually DQs the cell

00:23:33.536 --> 00:23:34.516 A:middle
with the identifier.

00:23:34.516 --> 00:23:39.176 A:middle
Now, it also means that once
the nib run time has loaded

00:23:39.176 --> 00:23:42.976 A:middle
that nib file into memory, it
can rapidly instantiate it.

00:23:43.306 --> 00:23:46.856 A:middle
So there are a couple of
take aways for talking

00:23:46.856 --> 00:23:48.796 A:middle
about interface builder
at build time.

00:23:49.316 --> 00:23:50.636 A:middle
The first is performance.

00:23:51.116 --> 00:23:53.456 A:middle
Interface builder is
working on your behalf

00:23:53.806 --> 00:23:56.146 A:middle
to make the performance of your
applications as good as we can.

00:23:57.496 --> 00:23:59.586 A:middle
Nib files are only
loaded on demand


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:00.036 --> 00:24:02.906 A:middle
and nib files themselves are
really small and optimized.

00:24:04.176 --> 00:24:08.396 A:middle
Secondly, interface builder has
reuse of different nib files.

00:24:08.396 --> 00:24:10.556 A:middle
For example, on the table
view cell that's we saw,

00:24:11.066 --> 00:24:13.586 A:middle
once the runtime has
the nib file it's able

00:24:13.586 --> 00:24:17.156 A:middle
to reinstantiate it very very
quickly as new cells are needed.

00:24:18.446 --> 00:24:21.306 A:middle
Finally hopefully you
can see the lifecycle

00:24:21.306 --> 00:24:23.976 A:middle
of how things are happening
between build time and runtime

00:24:24.266 --> 00:24:26.556 A:middle
so you know how to interact
with the different objects

00:24:26.796 --> 00:24:28.676 A:middle
like your view controllers
and your view hierarchies.

00:24:29.186 --> 00:24:33.346 A:middle
We talks about interface
builder at design time.

00:24:33.586 --> 00:24:35.786 A:middle
We have pulled the hood up
a little bit at build time,

00:24:35.786 --> 00:24:38.276 A:middle
but we're going to spend the
rest of the session talking

00:24:38.276 --> 00:24:41.236 A:middle
about interface builder at
runtime and what happens

00:24:41.236 --> 00:24:43.066 A:middle
when you have all those
different products

00:24:43.066 --> 00:24:43.766 A:middle
and languages.

00:24:43.896 --> 00:24:46.066 A:middle
To do that, I'm going to bring
up my colleague, Tony Ricciardi.

00:24:47.516 --> 00:24:49.926 A:middle
[Applause]

00:24:50.426 --> 00:24:50.976 A:middle
&gt;&gt; TONY RICCIARDI:
Thank you Kevin.

00:24:52.856 --> 00:24:53.426 A:middle
Good afternoon.

00:24:54.176 --> 00:24:56.286 A:middle
My name is Tony, and I also
work on interface builder.

00:24:57.026 --> 00:25:00.596 A:middle
So Kevin just gave you
some great best practices


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:57.026 --> 00:25:00.596 A:middle
So Kevin just gave you
some great best practices

00:25:00.596 --> 00:25:04.126 A:middle
for building your UI at design
time and then he gave you a peek

00:25:04.126 --> 00:25:06.366 A:middle
at what happens behind
the scenes at build time.

00:25:06.366 --> 00:25:09.276 A:middle
Now, I'm going to give
you a few examples

00:25:09.276 --> 00:25:13.046 A:middle
of how you can add dynamic
behavior to your UI at run time.

00:25:13.966 --> 00:25:16.656 A:middle
Interface builder supports
three general mechanisms

00:25:16.986 --> 00:25:18.696 A:middle
for controlling your
UI at run time.

00:25:20.036 --> 00:25:21.656 A:middle
First of all, you can
create connections

00:25:21.996 --> 00:25:25.466 A:middle
between your storyboard and your
source code using IB actions

00:25:25.576 --> 00:25:28.276 A:middle
and IB outlets.

00:25:28.446 --> 00:25:31.346 A:middle
You can also customize the
behavior of your segues

00:25:31.526 --> 00:25:33.506 A:middle
or dynamically instantiate

00:25:33.506 --> 00:25:36.296 A:middle
and add view controllers
using the storyboard API.

00:25:38.186 --> 00:25:41.286 A:middle
And finally, you can use
auto layout or size classes

00:25:41.676 --> 00:25:44.156 A:middle
to specify how your
UI adapts as the size

00:25:44.156 --> 00:25:45.176 A:middle
of its container changes.

00:25:46.216 --> 00:25:49.166 A:middle
Let's start with connections.

00:25:49.166 --> 00:25:51.306 A:middle
In Swift, IB outlets are

00:25:51.306 --> 00:25:53.656 A:middle
by default implicitly
unwrapped optionals.

00:25:54.926 --> 00:25:57.296 A:middle
If you have an outlet between
a view controller and one

00:25:57.296 --> 00:26:00.026 A:middle
of the views in its hierarchy
you can safely unwrap


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:57.296 --> 00:26:00.026 A:middle
of the views in its hierarchy
you can safely unwrap

00:26:00.026 --> 00:26:01.946 A:middle
that optional after viewed load.

00:26:03.776 --> 00:26:06.186 A:middle
Sometimes you will have an
additional property stored

00:26:06.186 --> 00:26:08.216 A:middle
on your view controller
that affects the appearance

00:26:08.216 --> 00:26:11.566 A:middle
of that view, and in that
case, you will want to unwrap

00:26:11.616 --> 00:26:14.066 A:middle
that property using
optional chaining

00:26:14.216 --> 00:26:16.386 A:middle
within the did set
observer of that property.

00:26:17.306 --> 00:26:19.986 A:middle
In case your outlet
hasn't been connected yet.

00:26:21.356 --> 00:26:24.926 A:middle
IBAction is allowing you
to respond to events sent

00:26:24.926 --> 00:26:27.736 A:middle
from gesture recognizers
and controls.

00:26:28.246 --> 00:26:30.886 A:middle
You might use an action
just to update some state

00:26:31.066 --> 00:26:34.296 A:middle
without navigating away
from the current view.

00:26:34.776 --> 00:26:37.546 A:middle
You can also use an IBAction
to dynamically choose

00:26:37.546 --> 00:26:39.656 A:middle
which segue you want to
perform after an event.

00:26:43.516 --> 00:26:44.916 A:middle
Next we have the storyboard API.

00:26:45.846 --> 00:26:50.106 A:middle
The class UI storyboard or NS
storyboard on the Mac allows you

00:26:50.106 --> 00:26:52.346 A:middle
to grab a reference
to a storyboard file

00:26:52.346 --> 00:26:54.766 A:middle
and instantiate view controllers
from that storyboard.

00:26:55.366 --> 00:26:57.826 A:middle
It's extremely useful if
you have a reusable piece

00:26:57.826 --> 00:26:59.936 A:middle
of UI you want to
repeatedly instantiate.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:00.566 --> 00:27:03.446 A:middle
It's also the only way you can
connect multiple storyboards

00:27:03.446 --> 00:27:05.296 A:middle
in your app if you
are displaying prior

00:27:05.296 --> 00:27:08.166 A:middle
to iOS 9 or Mac OS 10, 11.

00:27:09.116 --> 00:27:13.296 A:middle
We also have a lot of great
API hooks on UI controller

00:27:13.296 --> 00:27:16.756 A:middle
to allow you to customize
behavior of your segues.

00:27:16.756 --> 00:27:18.506 A:middle
This year we have made
a lot of improvements

00:27:18.566 --> 00:27:20.506 A:middle
to segue unwinding on iOS.

00:27:21.056 --> 00:27:24.846 A:middle
We have made it a lot easier
to subclass UI storyboard segue

00:27:24.846 --> 00:27:25.936 A:middle
or NS storyboard segue.

00:27:25.936 --> 00:27:27.746 A:middle
If you would like to
learn more about that,

00:27:28.026 --> 00:27:29.566 A:middle
please come to our What's New

00:27:29.566 --> 00:27:31.066 A:middle
in Storyboard session
tomorrow morning.

00:27:31.526 --> 00:27:35.456 A:middle
Finally we have adaptability.

00:27:37.066 --> 00:27:39.486 A:middle
Interface builder
supports two technologies

00:27:39.806 --> 00:27:42.506 A:middle
to help you adapt your UI to
different container sizes.

00:27:43.136 --> 00:27:48.076 A:middle
First of all, we have auto
layout which allows you to size

00:27:48.176 --> 00:27:50.846 A:middle
and position your views
relative to each other

00:27:51.226 --> 00:27:54.226 A:middle
so that you are not relying
on hard coded frame values.

00:27:55.496 --> 00:27:57.246 A:middle
In some situations,
you will want

00:27:57.246 --> 00:28:00.886 A:middle
to make a significant change
to your layout as the width


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:57.246 --> 00:28:00.886 A:middle
to make a significant change
to your layout as the width

00:28:01.056 --> 00:28:03.526 A:middle
or height of the container
crosses a certain threshold,

00:28:04.066 --> 00:28:06.876 A:middle
and in those situations we have
another great feature called

00:28:06.876 --> 00:28:11.626 A:middle
size classes which makes
that very easy to do.

00:28:11.876 --> 00:28:13.056 A:middle
Now, I would like
to give you a demo

00:28:13.056 --> 00:28:15.896 A:middle
of how you can apply these
three general techniques to work

00:28:15.896 --> 00:28:17.206 A:middle
with interface builder
at run time.

00:28:17.636 --> 00:28:18.736 A:middle
Let's head over to Xcode.

00:28:26.616 --> 00:28:30.096 A:middle
Today we will be building a UI
to keep track of the activity

00:28:30.096 --> 00:28:32.306 A:middle
of your friends on
their Roadtrip and plan

00:28:32.306 --> 00:28:34.626 A:middle
on integrating this into
Kevin's Roadtrip app later on.

00:28:36.326 --> 00:28:41.136 A:middle
As you can see in this UI,
I have three rows of posts,

00:28:41.806 --> 00:28:45.406 A:middle
and within each row, I
show the top three posts

00:28:45.406 --> 00:28:46.196 A:middle
from that category.

00:28:46.796 --> 00:28:50.816 A:middle
If we take a look at the
storyboard for my app,

00:28:51.356 --> 00:28:53.886 A:middle
you can see I have implemented
this UI using a stack view.

00:28:54.856 --> 00:28:57.426 A:middle
Within this stack view, I
have three container views.

00:28:58.906 --> 00:29:02.726 A:middle
A container view allows you to
embed one view controller inside


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:58.906 --> 00:29:02.726 A:middle
A container view allows you to
embed one view controller inside

00:29:02.726 --> 00:29:04.936 A:middle
of another one, and
that's extremely useful

00:29:04.936 --> 00:29:08.136 A:middle
if you have a reusable piece
of UI like this that you want

00:29:08.136 --> 00:29:10.906 A:middle
to use multiple times
within the same scene.

00:29:11.736 --> 00:29:13.156 A:middle
My embedded view controller

00:29:13.156 --> 00:29:14.706 A:middle
over here has a stack
view of its own.

00:29:15.246 --> 00:29:17.756 A:middle
In this stack view
holds multiple instances

00:29:17.836 --> 00:29:20.136 A:middle
of this post view
controller down here.

00:29:20.876 --> 00:29:23.846 A:middle
The number of posts that I show
in each category is controlled

00:29:23.846 --> 00:29:26.346 A:middle
by a user setting and so
I don't know it statically

00:29:26.346 --> 00:29:26.926 A:middle
at design time.

00:29:27.936 --> 00:29:30.196 A:middle
Instead of using container
views like I do over here,

00:29:30.196 --> 00:29:31.856 A:middle
for this view controller,

00:29:31.856 --> 00:29:34.266 A:middle
I instantiate it using
the storyboard API.

00:29:35.556 --> 00:29:36.976 A:middle
I refer to this view controller

00:29:37.016 --> 00:29:42.256 A:middle
from code using its storyboard
ID up here which I have set

00:29:42.256 --> 00:29:43.716 A:middle
up here in the identity
inspector.

00:29:45.066 --> 00:29:47.096 A:middle
Let's take a look at the
code where I do that.

00:29:47.096 --> 00:29:52.026 A:middle
I'm going to use the jump bar to
navigate to the source code file

00:29:52.026 --> 00:29:53.476 A:middle
for my post stack
view controller.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:01.376 --> 00:30:02.376 A:middle
All right.

00:30:02.376 --> 00:30:03.526 A:middle
So you can see down here

00:30:03.526 --> 00:30:12.846 A:middle
in my view.load method I'm using
the storybook API instantiate

00:30:12.846 --> 00:30:13.996 A:middle
that post view controller.

00:30:15.066 --> 00:30:18.746 A:middle
Specifically, I'm using
the storyboard property

00:30:19.206 --> 00:30:20.986 A:middle
that I'm getting from
UI view controller

00:30:21.916 --> 00:30:24.576 A:middle
and then I'm calling instantiate
view controller with identifier.

00:30:25.316 --> 00:30:29.456 A:middle
And that identifier I pass in
is the same string we just saw

00:30:29.456 --> 00:30:30.406 A:middle
in the identity inspector.

00:30:30.986 --> 00:30:35.396 A:middle
After I add or after I
instantiate the child,

00:30:35.726 --> 00:30:37.816 A:middle
I add it as a child
view controller.

00:30:37.816 --> 00:30:40.066 A:middle
And then I add it's view

00:30:40.256 --> 00:30:41.906 A:middle
as an arranged sub
view of my stacking.

00:30:43.066 --> 00:30:46.626 A:middle
So the storyboard API is
great for instantiating

00:30:46.626 --> 00:30:49.196 A:middle
and adding a child view
controller, but what if you want

00:30:49.796 --> 00:30:51.796 A:middle
to add a sub view
that is not associated

00:30:51.796 --> 00:30:52.746 A:middle
with a different
view controller.

00:30:53.506 --> 00:30:55.336 A:middle
Let's head back to the
storyboard for an example.

00:30:56.896 --> 00:31:00.246 A:middle
If we take a look
up here at the top


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:56.896 --> 00:31:00.246 A:middle
If we take a look
up here at the top

00:31:00.246 --> 00:31:03.616 A:middle
of my activity view controller,
you can see I have a view

00:31:03.616 --> 00:31:04.436 A:middle
up here in the scene doc.

00:31:05.376 --> 00:31:06.286 A:middle
The scene doc allows you

00:31:06.286 --> 00:31:09.366 A:middle
to store top level objects
alongside your view controller

00:31:09.956 --> 00:31:12.106 A:middle
and you might put a view in
your scene doc if you don't want

00:31:12.106 --> 00:31:14.906 A:middle
that view to initially be
part of your view at run time.

00:31:15.996 --> 00:31:18.856 A:middle
In Xcode 7 when you put
a view in your scene doc

00:31:18.856 --> 00:31:22.096 A:middle
and you select it, it
shows up in its own editor

00:31:22.096 --> 00:31:23.016 A:middle
above the view controller.

00:31:24.516 --> 00:31:26.926 A:middle
[Applause]

00:31:27.426 --> 00:31:30.436 A:middle
This means you can now visually
edit your views right here

00:31:30.436 --> 00:31:32.996 A:middle
in the storyboard canvas, even
if they are not initially part

00:31:32.996 --> 00:31:33.706 A:middle
of your view hierarchy.

00:31:34.166 --> 00:31:37.226 A:middle
This view here shows
an error message

00:31:37.226 --> 00:31:38.376 A:middle
if there is a problem
connecting.

00:31:38.916 --> 00:31:42.316 A:middle
So what I want to do now is
create an outlet connection

00:31:42.406 --> 00:31:45.006 A:middle
to this view and
then add it from code

00:31:45.176 --> 00:31:46.106 A:middle
if there is a problem
connecting.

00:31:47.306 --> 00:31:50.196 A:middle
I want to open up the assistant
editor and that's going

00:31:50.196 --> 00:31:53.586 A:middle
to take me to the implementation
for my activity view controller.

00:31:54.166 --> 00:31:56.916 A:middle
And then I'm just
going to control drag

00:31:57.046 --> 00:32:00.726 A:middle
over to the source code and when
I let go, I get a little pop


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:57.046 --> 00:32:00.726 A:middle
over to the source code and when
I let go, I get a little pop

00:32:00.726 --> 00:32:02.926 A:middle
over allowing me to configure
my outlet connection.

00:32:04.246 --> 00:32:07.736 A:middle
But -- the first option
here is whether I want

00:32:07.736 --> 00:32:09.396 A:middle
to make an outlet or
outlet collection.

00:32:10.336 --> 00:32:14.396 A:middle
Outlet collections are great
for adding or removing groups

00:32:14.396 --> 00:32:17.686 A:middle
of sub views or constraints
all at once, but in my case,

00:32:17.816 --> 00:32:19.176 A:middle
I just want to add
a single view,

00:32:19.176 --> 00:32:20.336 A:middle
so I'm going to choose outlet.

00:32:22.246 --> 00:32:23.546 A:middle
Next we can name the connection.

00:32:23.546 --> 00:32:26.006 A:middle
I'm going to call it
connection error view.

00:32:26.676 --> 00:32:33.426 A:middle
And the last option I want to
point out is the storage type,

00:32:34.456 --> 00:32:36.066 A:middle
which can either
be strong or weak.

00:32:37.936 --> 00:32:39.996 A:middle
In general you should
make your outlet strong,

00:32:40.656 --> 00:32:43.516 A:middle
especially if you are connecting
an outlet to a sub view

00:32:43.596 --> 00:32:45.906 A:middle
or to a constraint that's not
always going to be retained

00:32:45.906 --> 00:32:46.696 A:middle
by the view hierarchy.

00:32:47.426 --> 00:32:50.516 A:middle
The only time you really need
to make an outlet weak is

00:32:50.516 --> 00:32:53.156 A:middle
if you have a custom view
that references something back

00:32:53.156 --> 00:32:55.666 A:middle
up the view hierarchy and in
general that's not recommended.

00:32:55.666 --> 00:32:58.926 A:middle
So I'm going to choose strong
and I will click connect

00:32:59.346 --> 00:33:00.756 A:middle
which will generate my outlet.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.346 --> 00:33:00.756 A:middle
which will generate my outlet.

00:33:01.566 --> 00:33:05.916 A:middle
Now, I'm just going
to paste in some code,

00:33:06.296 --> 00:33:09.226 A:middle
and this code is an
implementation of view did load.

00:33:10.276 --> 00:33:14.196 A:middle
And I check if there is a
problem connecting and if it so,

00:33:14.426 --> 00:33:18.566 A:middle
I add my connection error view
to the top of my root stack view

00:33:19.076 --> 00:33:23.516 A:middle
and I'm accessing both
views using outlets.

00:33:23.516 --> 00:33:31.236 A:middle
Let's take a look at
this in the simulator.

00:33:31.236 --> 00:33:32.826 A:middle
So as you can see, there
was a problem connecting,

00:33:33.616 --> 00:33:35.936 A:middle
and now my view is showing up
right at the top as we expected.

00:33:37.316 --> 00:33:40.666 A:middle
So this UI looks great
on a full screen iPad.

00:33:40.696 --> 00:33:43.086 A:middle
What happens if I
run it in split view?

00:33:43.776 --> 00:33:49.296 A:middle
I'm just going to drag the
split to be in the middle

00:33:49.296 --> 00:33:50.096 A:middle
of the screen and let go,

00:33:50.186 --> 00:33:53.416 A:middle
and you can see my UI
is not doing a great job

00:33:53.416 --> 00:33:54.526 A:middle
of adapting to the narrow width.

00:33:56.016 --> 00:33:59.266 A:middle
What I really want is for these
posts to lay out vertically

00:33:59.666 --> 00:34:00.786 A:middle
when the width is compact


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.666 --> 00:34:00.786 A:middle
when the width is compact

00:34:01.746 --> 00:34:04.066 A:middle
so that each post can
get the full width

00:34:04.116 --> 00:34:05.236 A:middle
of the screen to itself.

00:34:05.236 --> 00:34:09.106 A:middle
And at the same time, when we
are back in full screen mode,

00:34:09.335 --> 00:34:11.366 A:middle
I want my stack views
to continue to lay

00:34:11.366 --> 00:34:12.755 A:middle
out horizontally
like they are now.

00:34:14.946 --> 00:34:17.196 A:middle
So to do that, I'm going to
head back to my storyboard,

00:34:17.815 --> 00:34:19.186 A:middle
and I'm going to
close the assistant

00:34:19.186 --> 00:34:20.386 A:middle
to give us a little more room.

00:34:20.996 --> 00:34:24.025 A:middle
And I'm going to select
my stack view and head

00:34:24.025 --> 00:34:25.376 A:middle
over to its attributes
inspector.

00:34:25.916 --> 00:34:31.286 A:middle
You can see currently my stack
view is configured to lay

00:34:31.286 --> 00:34:33.406 A:middle
out horizontally, and next

00:34:33.406 --> 00:34:35.706 A:middle
to this access property
there is a plus button.

00:34:36.565 --> 00:34:39.235 A:middle
This plus button allows you to
add a size class customization.

00:34:40.076 --> 00:34:43.585 A:middle
A size class is an abstract
range of sizes in one

00:34:43.585 --> 00:34:46.456 A:middle
or two dimensions
and in my case I want

00:34:46.505 --> 00:34:49.786 A:middle
to customize this property
for when the width is compact.

00:34:51.356 --> 00:34:53.045 A:middle
And since I don't care
about the height dimension,

00:34:53.126 --> 00:34:53.966 A:middle
I will choose any height.

00:34:55.666 --> 00:34:57.416 A:middle
When I do that, I get a
new row in my inspector

00:34:57.976 --> 00:35:00.736 A:middle
and the value I put here
is going to take effect


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:57.976 --> 00:35:00.736 A:middle
and the value I put here
is going to take effect

00:35:01.016 --> 00:35:05.186 A:middle
when the width is compact
and the height is anything.

00:35:05.186 --> 00:35:06.556 A:middle
I will change that
to vertical now.

00:35:06.556 --> 00:35:13.286 A:middle
And I will run this again.

00:35:13.286 --> 00:35:15.066 A:middle
So once again we
are in full screen

00:35:15.346 --> 00:35:18.486 A:middle
and our stack views are still
laying out horizontally.

00:35:19.166 --> 00:35:21.606 A:middle
Now, let's try this in
split view mode again.

00:35:26.136 --> 00:35:26.286 A:middle
All right.

00:35:26.286 --> 00:35:27.246 A:middle
We got it.

00:35:29.676 --> 00:35:31.816 A:middle
So there you go, now our
accessory view is laying

00:35:31.816 --> 00:35:33.376 A:middle
out vertically like we wanted

00:35:33.546 --> 00:35:35.886 A:middle
and each post gets the full
width of the half screen.

00:35:36.516 --> 00:35:41.396 A:middle
[Applause]

00:35:41.896 --> 00:35:44.136 A:middle
So that was just one way
you can use size classes.

00:35:44.136 --> 00:35:47.826 A:middle
You can override a property
value for single property,

00:35:48.396 --> 00:35:51.676 A:middle
but you can also add and
remove entirely new sub views

00:35:51.676 --> 00:35:53.586 A:middle
or constraints, and if
you want to learn more

00:35:53.586 --> 00:35:55.046 A:middle
about all you can do
with size classes,

00:35:55.256 --> 00:35:56.466 A:middle
we had a fantastic session

00:35:56.466 --> 00:35:58.826 A:middle
on that last year called
building adaptive apps

00:35:58.826 --> 00:36:01.186 A:middle
with UI kit.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:58.826 --> 00:36:01.186 A:middle
with UI kit.

00:36:01.186 --> 00:36:03.326 A:middle
That's all I have for the demo,

00:36:03.326 --> 00:36:04.486 A:middle
so let's head back
to the slides.

00:36:10.656 --> 00:36:13.046 A:middle
Kevin and I just showed you
a ton of great techniques

00:36:13.046 --> 00:36:14.916 A:middle
to help you get the most
out of interface builder.

00:36:15.336 --> 00:36:16.796 A:middle
Let's review the
most important ones.

00:36:17.416 --> 00:36:21.726 A:middle
First of all, you saw how
you can build flexible user

00:36:21.726 --> 00:36:23.306 A:middle
interfaces that don't rely

00:36:23.396 --> 00:36:26.586 A:middle
on hard coded frame values
using auto layout constraints

00:36:26.896 --> 00:36:29.546 A:middle
and stack views.

00:36:29.736 --> 00:36:31.936 A:middle
Then Kevin showed you how
you can rapidly iterate

00:36:31.936 --> 00:36:34.796 A:middle
on the appearance of your
custom views using designables

00:36:34.796 --> 00:36:35.616 A:middle
and inspectables.

00:36:37.756 --> 00:36:39.746 A:middle
We introduced a new feature

00:36:39.746 --> 00:36:43.186 A:middle
to help you modularize your UI
called storyboard references,

00:36:43.186 --> 00:36:46.526 A:middle
and then I showed you how you
can use the storyboard API

00:36:47.096 --> 00:36:49.456 A:middle
to repeatedly instantiate
reusable components.

00:36:51.046 --> 00:36:54.046 A:middle
And finally, you saw how
you can make your UI adapt

00:36:54.236 --> 00:36:57.506 A:middle
to different container
sizes using size classes.

00:36:58.556 --> 00:37:00.976 A:middle
If you would like more
information, you can post


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:58.556 --> 00:37:00.976 A:middle
If you would like more
information, you can post

00:37:00.976 --> 00:37:03.386 A:middle
on the forums or
contact our evangelist

00:37:03.896 --> 00:37:06.976 A:middle
and we also highly recommend
checking out our What's New

00:37:06.976 --> 00:37:08.966 A:middle
in Storyboard session
tomorrow morning as well

00:37:08.966 --> 00:37:10.966 A:middle
as our two auto layout
sessions later that day.

00:37:12.176 --> 00:37:13.456 A:middle
Once again if you
want to learn more

00:37:13.456 --> 00:37:14.876 A:middle
about size classes please check

00:37:14.876 --> 00:37:17.566 A:middle
out our building adaptive
app session from last year.

00:37:18.406 --> 00:37:19.716 A:middle
And finally if you
want to learn more

00:37:19.716 --> 00:37:21.586 A:middle
about troubleshooting
your auto layout

00:37:21.716 --> 00:37:25.426 A:middle
within Xcode we had a great
session on that in 2013.

00:37:25.426 --> 00:37:27.576 A:middle
And thank you all and
please enjoy the rest

00:37:27.576 --> 00:37:27.976 A:middle
of the conference.

00:37:28.516 --> 00:37:31.500 A:middle
[Applause]

