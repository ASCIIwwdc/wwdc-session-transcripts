WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:24.031 --> 00:00:26.031 A:middle
[ Applause ]

00:00:26.046 --> 00:00:27.366 A:middle
&gt;&gt; MIKE HESS: Thank you.

00:00:30.106 --> 00:00:30.656 A:middle
Good afternoon!

00:00:31.116 --> 00:00:33.736 A:middle
I'm Mike Hess and I'm a software
engineer on the iOS Apps

00:00:33.736 --> 00:00:36.746 A:middle
and Frameworks team and I'm here
with Johannes Fortmann to talk

00:00:36.746 --> 00:00:40.326 A:middle
to you about how to make your
document-based apps top notch.

00:00:41.706 --> 00:00:43.786 A:middle
Now we have written some
sample code for you today

00:00:44.226 --> 00:00:47.436 A:middle
which is going to show you how
to build the two main components

00:00:47.516 --> 00:00:49.686 A:middle
of a document-based app.

00:00:50.326 --> 00:00:52.036 A:middle
First, we're going
to show you how

00:00:52.036 --> 00:00:54.276 A:middle
to build a great
Document Browser

00:00:54.636 --> 00:00:57.576 A:middle
which will let your users
quickly find the documents

00:00:57.576 --> 00:00:58.926 A:middle
that they're interested
in working on.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:00.386 --> 00:01:02.036 A:middle
Second, we're going
to show you how

00:01:02.036 --> 00:01:05.666 A:middle
to build a great document
editor that interacts properly

00:01:05.666 --> 00:01:09.076 A:middle
with file coordination to
deal with concurrent readers

00:01:09.076 --> 00:01:11.506 A:middle
and writers such as the
iCloud drive daemon.

00:01:11.906 --> 00:01:13.756 A:middle
We're going to get into
this a little bit later.

00:01:14.736 --> 00:01:17.006 A:middle
First, let's focus on
the Document Browser.

00:01:18.096 --> 00:01:21.046 A:middle
So what is a document-based
app anyways?

00:01:22.796 --> 00:01:26.706 A:middle
Well, we think of a document
as a single, standalone entity

00:01:26.706 --> 00:01:30.646 A:middle
and it is understood to the
user as a single entity.

00:01:31.336 --> 00:01:33.526 A:middle
A document-based app is
just going to be an app

00:01:33.526 --> 00:01:37.366 A:middle
which manages a list of these
documents and presents them

00:01:37.366 --> 00:01:39.696 A:middle
to the users so that
they can view them

00:01:39.696 --> 00:01:41.696 A:middle
or edit them or rename them.

00:01:42.886 --> 00:01:45.466 A:middle
Keynote, for example,
manages a list

00:01:45.546 --> 00:01:47.626 A:middle
of Keynote presentation
documents.

00:01:47.956 --> 00:01:51.386 A:middle
Numbers manages a list of
Numbers spreadsheet documents;

00:01:51.666 --> 00:01:55.426 A:middle
even Garage Band manages a list
of Garage Band song documents.

00:01:55.776 --> 00:02:01.016 A:middle
So we would consider all of
these to be document-based apps.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:55.776 --> 00:02:01.016 A:middle
So we would consider all of
these to be document-based apps.

00:02:01.266 --> 00:02:02.626 A:middle
Now let's get into
how we're going

00:02:02.626 --> 00:02:04.956 A:middle
to build our Document Browser.

00:02:06.486 --> 00:02:09.485 A:middle
There are four main components
of a great Document Browser.

00:02:10.416 --> 00:02:14.246 A:middle
First, we want to
list our documents

00:02:14.246 --> 00:02:16.736 A:middle
in a way that's meaningful
to our users such as here

00:02:16.736 --> 00:02:20.226 A:middle
in our sample code we sort
our documents by file name.

00:02:20.396 --> 00:02:23.656 A:middle
Our user understands
the flow of our app.

00:02:24.736 --> 00:02:27.576 A:middle
Second, we think you
should use thumbnails

00:02:27.646 --> 00:02:30.406 A:middle
for greater document
visibility so that just

00:02:30.406 --> 00:02:34.416 A:middle
at a glance your users can
quickly identify the document

00:02:34.416 --> 00:02:36.036 A:middle
that they're interested
in working on.

00:02:37.356 --> 00:02:41.306 A:middle
Third, we want to display all
documents that are available

00:02:41.306 --> 00:02:44.546 A:middle
to our app, including
documents that exist

00:02:44.546 --> 00:02:47.826 A:middle
in other apps' containers such
as this document in the sample

00:02:48.386 --> 00:02:51.606 A:middle
which exists in the shared
iCloud Drive container.

00:02:53.206 --> 00:02:54.996 A:middle
And fourth, we think
it is a good idea

00:02:54.996 --> 00:02:58.916 A:middle
to store a recently accessed
list of your documents

00:02:58.946 --> 00:03:02.066 A:middle
so that users can quickly
get back to the documents


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:58.946 --> 00:03:02.066 A:middle
so that users can quickly
get back to the documents

00:03:02.066 --> 00:03:03.306 A:middle
that they're currently
working on.

00:03:03.826 --> 00:03:08.876 A:middle
Now let's go into how we're
going to discover our documents

00:03:08.876 --> 00:03:10.316 A:middle
for our Document Browser.

00:03:10.906 --> 00:03:17.686 A:middle
Now, a naive approach might
be to use NSFileManager to try

00:03:17.686 --> 00:03:19.636 A:middle
to list your documents
in the cloud

00:03:19.936 --> 00:03:21.626 A:middle
but these results
are incomplete.

00:03:22.576 --> 00:03:27.536 A:middle
For example, in iCloud there is
a notion of document promises

00:03:27.986 --> 00:03:29.996 A:middle
where there's a document
that exists there

00:03:29.996 --> 00:03:32.656 A:middle
but content has not been
made available locally,

00:03:32.656 --> 00:03:34.246 A:middle
it has not been downloaded
to disk yet,

00:03:34.416 --> 00:03:37.566 A:middle
and NSFileManager does not pick
up these documents properly.

00:03:38.226 --> 00:03:39.716 A:middle
In addition, if you're trying

00:03:39.716 --> 00:03:42.166 A:middle
to list your documents
using NSFileManager,

00:03:42.586 --> 00:03:44.426 A:middle
external documents
are not included

00:03:44.666 --> 00:03:48.596 A:middle
so you're not listing all of the
documents available to your app.

00:03:48.826 --> 00:03:49.996 A:middle
Let's take a quick look at this.

00:03:51.106 --> 00:03:53.576 A:middle
Let's say you're using
the NSFileManager APIs.

00:03:54.826 --> 00:03:57.986 A:middle
If you're using NSFileManager,
you'll properly pick

00:03:57.986 --> 00:04:00.166 A:middle
up document one and
document two here,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:57.986 --> 00:04:00.166 A:middle
up document one and
document two here,

00:04:00.536 --> 00:04:03.486 A:middle
which are completely downloaded
to disk in our app's container.

00:04:04.216 --> 00:04:06.606 A:middle
But you're missing the
result of document 3

00:04:06.836 --> 00:04:08.976 A:middle
which is a document
promise from iCloud,

00:04:09.436 --> 00:04:12.296 A:middle
and you're also missing
document 4 which exists

00:04:12.296 --> 00:04:13.626 A:middle
in another app's container

00:04:13.736 --> 00:04:17.836 A:middle
but our user has granted our
app access to that document.

00:04:17.935 --> 00:04:20.796 A:middle
So you don't really want to
use the NSFileManager APIs

00:04:20.796 --> 00:04:22.136 A:middle
when you're listing
your documents.

00:04:23.696 --> 00:04:26.116 A:middle
Instead, you want to
use NSMetadataQuery.

00:04:27.146 --> 00:04:30.046 A:middle
Let's take a look at how
NSMetadataQuery works.

00:04:31.126 --> 00:04:34.596 A:middle
NSMetadataQuery will pick up all
the documents that are available

00:04:34.596 --> 00:04:38.666 A:middle
to your app, including document
3 which is the document promise,

00:04:38.756 --> 00:04:42.186 A:middle
and document 4 which exists
in another app's container

00:04:42.186 --> 00:04:44.066 A:middle
but the user granted
our app permission

00:04:44.066 --> 00:04:45.716 A:middle
to view that document.

00:04:46.526 --> 00:04:49.086 A:middle
Now it is important to note
here that document 5 which is

00:04:49.086 --> 00:04:50.266 A:middle
in another app's container

00:04:50.466 --> 00:04:52.896 A:middle
but the user has not
granted our app permission

00:04:52.976 --> 00:04:57.656 A:middle
to view is still not included
in the NSMetadataQuery results

00:04:57.686 --> 00:05:00.316 A:middle
because that would be a
privacy leak if we showed


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:57.686 --> 00:05:00.316 A:middle
because that would be a
privacy leak if we showed

00:05:00.316 --> 00:05:02.196 A:middle
that document to the user.

00:05:04.556 --> 00:05:06.566 A:middle
So let's use NSMetadataQuery

00:05:06.566 --> 00:05:08.116 A:middle
for discovering our
documents in the cloud.

00:05:09.576 --> 00:05:11.936 A:middle
Now how does this flow
work from your app?

00:05:12.906 --> 00:05:15.886 A:middle
Well, first of all you're going
to create your NSMetadataQuery.

00:05:17.386 --> 00:05:19.296 A:middle
Then NSMetadataQuery
is going to go

00:05:19.296 --> 00:05:22.106 A:middle
through an initial gather
phase where it lists all

00:05:22.106 --> 00:05:26.106 A:middle
of the documents that are
currently available to your app.

00:05:26.376 --> 00:05:28.716 A:middle
Once this initial gather
phase has completed,

00:05:28.996 --> 00:05:31.006 A:middle
you will get a notification
and then you just have

00:05:31.046 --> 00:05:33.836 A:middle
to display these
initial documents

00:05:33.956 --> 00:05:35.616 A:middle
on your main queue
in your app's UI.

00:05:37.916 --> 00:05:40.416 A:middle
But NSMetadataQuery
doesn't stop there.

00:05:41.256 --> 00:05:45.126 A:middle
In addition, you will receive
update notifications as state

00:05:45.126 --> 00:05:48.326 A:middle
in the cloud changes such as
here the iCloud Drive daemon

00:05:48.896 --> 00:05:52.306 A:middle
downloaded a new document
to our app's container

00:05:52.306 --> 00:05:53.506 A:middle
and we were notified

00:05:53.506 --> 00:05:55.926 A:middle
in our NSMetadataQuery
about this document.

00:05:57.776 --> 00:06:02.706 A:middle
Then you just need to compute
the animations from the changes,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:57.776 --> 00:06:02.706 A:middle
Then you just need to compute
the animations from the changes,

00:06:02.706 --> 00:06:06.746 A:middle
such as here we may want to
insert a CollectionView cell

00:06:07.116 --> 00:06:08.396 A:middle
into our CollectionView,

00:06:08.936 --> 00:06:12.766 A:middle
and then just display this
updated UI on our main thread.

00:06:15.486 --> 00:06:18.196 A:middle
Now that we know how to
discover our documents,

00:06:18.196 --> 00:06:22.216 A:middle
let's get into how we're
going to make our UI better

00:06:22.216 --> 00:06:23.526 A:middle
with document thumbnails.

00:06:28.396 --> 00:06:34.916 A:middle
Now, we think it is a good idea
to display thumbnails in your UI

00:06:34.916 --> 00:06:38.876 A:middle
because it gives visual
context to your user.

00:06:39.676 --> 00:06:43.436 A:middle
That way your user can just at
a glance identify the document

00:06:43.436 --> 00:06:44.466 A:middle
that they're interested
in working

00:06:44.466 --> 00:06:46.306 A:middle
on because they have
a great thumbnail

00:06:46.306 --> 00:06:48.246 A:middle
so they can quickly identify it.

00:06:48.776 --> 00:06:51.616 A:middle
Now new in iOS 9, thumbnails
are actually generated

00:06:51.616 --> 00:06:54.576 A:middle
for you automatically for
certain document types

00:06:54.656 --> 00:06:57.556 A:middle
that are well-known, such as
large image files, for example.

00:06:57.556 --> 00:07:02.936 A:middle
Now let's get into the
workflow of how you might want


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:57.556 --> 00:07:02.936 A:middle
Now let's get into the
workflow of how you might want

00:07:02.936 --> 00:07:06.446 A:middle
to load your thumbnail for
display in your app's UI.

00:07:07.146 --> 00:07:08.986 A:middle
It is important to note here

00:07:08.986 --> 00:07:12.756 A:middle
that loading thumbnails involves
loading a potentially large

00:07:12.756 --> 00:07:16.086 A:middle
amount of data into
memory, which can be slow,

00:07:16.086 --> 00:07:19.766 A:middle
so you don't want to block your
main queue while loading your

00:07:19.766 --> 00:07:20.516 A:middle
thumbnail data.

00:07:21.256 --> 00:07:23.836 A:middle
Let's take an example
workflow, which would work,

00:07:24.316 --> 00:07:26.476 A:middle
which is how our
sample code app does it.

00:07:27.426 --> 00:07:30.096 A:middle
So first in our sample code
we have a CollectionView

00:07:30.096 --> 00:07:33.296 A:middle
and the CollectionView asks us
to load a CollectionView cell.

00:07:34.756 --> 00:07:39.286 A:middle
We're going to go ahead and
schedule a fetch thumbnail job

00:07:39.286 --> 00:07:42.096 A:middle
on a background queue because
we don't have the thumbnail

00:07:42.096 --> 00:07:42.766 A:middle
cached yet.

00:07:43.816 --> 00:07:45.446 A:middle
Now, we're not going to wait

00:07:45.476 --> 00:07:47.676 A:middle
for this fetch thumbnail
job to complete.

00:07:48.256 --> 00:07:51.216 A:middle
We're going to immediately
return a CollectionView cell

00:07:51.216 --> 00:07:53.776 A:middle
with a placeholder image
so that the user knows

00:07:53.816 --> 00:07:55.146 A:middle
that there is something there.

00:07:55.766 --> 00:07:59.446 A:middle
At some point in the future,
the fetch thumbnail job is going

00:07:59.446 --> 00:08:03.436 A:middle
to finish and then we'll just
notify our CollectionView


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.446 --> 00:08:03.436 A:middle
to finish and then we'll just
notify our CollectionView

00:08:03.436 --> 00:08:05.106 A:middle
that it needs to
reload that cell

00:08:05.996 --> 00:08:07.636 A:middle
and then we'll just
display the cell

00:08:08.146 --> 00:08:10.226 A:middle
in our UI with our thumbnail.

00:08:12.426 --> 00:08:13.026 A:middle
All right.

00:08:13.246 --> 00:08:17.666 A:middle
Now that we know how to find
our documents and display them

00:08:17.666 --> 00:08:19.506 A:middle
with great thumbnails,
let's get into how

00:08:19.506 --> 00:08:21.386 A:middle
to manage a recents list.

00:08:22.736 --> 00:08:26.046 A:middle
Now we think you want
to use a recents list

00:08:26.046 --> 00:08:29.676 A:middle
because recently accessed
documents are often the

00:08:29.676 --> 00:08:32.566 A:middle
documents that a user
is currently working on,

00:08:33.626 --> 00:08:37.506 A:middle
so it is a good idea to store
a list of these documents

00:08:37.506 --> 00:08:41.116 A:middle
that your user can
quickly get back to them.

00:08:41.926 --> 00:08:45.446 A:middle
Now, a naïve approach,
again, might be to use NSURLs

00:08:45.446 --> 00:08:48.686 A:middle
to store a recents list of the
recently accessed documents,

00:08:48.786 --> 00:08:51.416 A:middle
but this suffers from
many similar pitfalls

00:08:51.416 --> 00:08:53.536 A:middle
as NSFileManager did earlier.

00:08:54.826 --> 00:08:55.996 A:middle
Let's take a quick look at this.

00:08:56.866 --> 00:09:00.566 A:middle
So let's say we store a list
of NSURLs to our documents


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:56.866 --> 00:09:00.566 A:middle
So let's say we store a list
of NSURLs to our documents

00:09:00.566 --> 00:09:02.326 A:middle
which are the recently
accessed documents.

00:09:02.916 --> 00:09:06.416 A:middle
But then the iCloud Drive daemon
moves the document while our app

00:09:06.596 --> 00:09:09.616 A:middle
isn't running, such as here,
it moved it into a new folder.

00:09:10.816 --> 00:09:14.756 A:middle
The NSURL is now a broken
reference and will not resolve

00:09:14.756 --> 00:09:17.376 A:middle
to the updated location
of our document on disk

00:09:18.096 --> 00:09:22.056 A:middle
so we can't really rely on
this to store our recents list.

00:09:23.556 --> 00:09:26.896 A:middle
The correct way to
store a recents list is

00:09:26.896 --> 00:09:28.656 A:middle
with security scoped bookmarks.

00:09:30.186 --> 00:09:33.996 A:middle
Here, if we store a security
scoped bookmark to this document

00:09:34.566 --> 00:09:37.846 A:middle
and again the iCloud Drive
daemon moves this document

00:09:37.846 --> 00:09:42.786 A:middle
into a folder, the bookmark will
update automatically to resolve

00:09:42.786 --> 00:09:45.816 A:middle
to the document's new
location on disk so we want

00:09:45.816 --> 00:09:48.676 A:middle
to use security scope bookmarks
when managing our recents list.

00:09:48.946 --> 00:09:53.596 A:middle
And with that, I would like
to get into a quick demo

00:09:53.676 --> 00:09:56.406 A:middle
for how we're going to
manage our recents list

00:09:56.506 --> 00:09:57.976 A:middle
and how to load thumbnails.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:07.156 --> 00:10:07.356 A:middle
All right.

00:10:07.596 --> 00:10:09.596 A:middle
Let's go ahead and launch
up our sample code here.

00:10:10.106 --> 00:10:13.356 A:middle
And we haven't loaded
thumbnails yet into our app.

00:10:15.246 --> 00:10:19.216 A:middle
But for example, if I open the
iCloud Drive app using the new

00:10:19.216 --> 00:10:22.336 A:middle
Multitasking feature, we
can tell that the thumbnails

00:10:22.336 --> 00:10:25.996 A:middle
for these documents are
actually there, so we just need

00:10:25.996 --> 00:10:28.796 A:middle
to load them to display
in our app's UI.

00:10:29.486 --> 00:10:38.066 A:middle
Let's go ahead and
look at this in code.

00:10:38.066 --> 00:10:38.326 A:middle
All right.

00:10:38.326 --> 00:10:40.846 A:middle
So first of all, let's
talk about how we're going

00:10:40.846 --> 00:10:42.826 A:middle
to manage our recents
list in code.

00:10:45.486 --> 00:10:50.586 A:middle
The important thing here is

00:10:50.966 --> 00:10:56.936 A:middle
when we're saving our object
here we are bookmarking this

00:10:56.936 --> 00:11:00.166 A:middle
document using the 'bookmark
data with options' method


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:56.936 --> 00:11:00.166 A:middle
document using the 'bookmark
data with options' method

00:11:00.166 --> 00:11:02.616 A:middle
and it is important here
to pass the 'suitable

00:11:02.616 --> 00:11:04.396 A:middle
for bookmark file' option

00:11:04.666 --> 00:11:06.526 A:middle
so that we can resolve
it properly later.

00:11:08.436 --> 00:11:10.486 A:middle
Then on our app launch
we just have

00:11:10.486 --> 00:11:12.796 A:middle
to call the NSURL
Constructor method

00:11:12.796 --> 00:11:15.826 A:middle
of 'by resolving bookmark
data' with the bookmark

00:11:15.826 --> 00:11:19.296 A:middle
that we have saved
previously, and we'll get a URL,

00:11:19.296 --> 00:11:22.396 A:middle
which is the updated location
of our document on disk.

00:11:23.986 --> 00:11:27.746 A:middle
Now, it is important here that
with this returned URL we need

00:11:27.746 --> 00:11:30.786 A:middle
to call 'start accessing
security scope for resource,

00:11:31.186 --> 00:11:33.526 A:middle
in case this document
is a document

00:11:33.526 --> 00:11:36.106 A:middle
in another app's container,
or we won't be able

00:11:36.106 --> 00:11:38.126 A:middle
to read this document because --

00:11:38.186 --> 00:11:39.446 A:middle
read properties from
this document

00:11:39.656 --> 00:11:42.606 A:middle
because this will
extend our Sandbox

00:11:42.926 --> 00:11:44.696 A:middle
to have access to this document.

00:11:47.446 --> 00:11:51.386 A:middle
Now for thumbnails we've written
this great thumbnail cache class

00:11:51.386 --> 00:11:55.946 A:middle
for you in the sample
code, which is going

00:11:55.946 --> 00:11:59.716 A:middle
to cache our thumbnails
for our app.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:01.006 --> 00:12:03.446 A:middle
It takes care of a lot of
the heavy lifting for us,

00:12:03.446 --> 00:12:06.746 A:middle
such as scheduling, thumbnail
loading on background queues,

00:12:06.746 --> 00:12:10.756 A:middle
et cetera, and notifying
our CollectionView

00:12:10.756 --> 00:12:12.346 A:middle
that we need to reload cells.

00:12:13.176 --> 00:12:14.626 A:middle
Now the only thing we
have not implemented

00:12:14.626 --> 00:12:17.186 A:middle
yet is just this block
of code right here,

00:12:17.436 --> 00:12:20.766 A:middle
which will load our
thumbnail from disk.

00:12:21.286 --> 00:12:24.746 A:middle
All we have to do is
call the NSURL method

00:12:24.746 --> 00:12:28.846 A:middle
of 'get promised item resource
value for key' on the URL

00:12:28.846 --> 00:12:31.926 A:middle
of the document with a
thumbnail dictionary key,

00:12:31.926 --> 00:12:33.576 A:middle
and we'll get a dictionary
of thumbnails.

00:12:33.676 --> 00:12:37.346 A:middle
Then we just need to extract
the UIImage from the dictionary

00:12:37.866 --> 00:12:41.986 A:middle
and return it to our thumbnail
class so that we can display it.

00:12:41.986 --> 00:12:43.376 A:middle
Now it is important here

00:12:43.376 --> 00:12:47.016 A:middle
to use the 'get promised item
resource value for key' instead

00:12:47.016 --> 00:12:49.326 A:middle
of the 'get resource
value for key' method

00:12:49.846 --> 00:12:52.626 A:middle
because the document may not
have its content available

00:12:53.026 --> 00:12:58.476 A:middle
locally yet, so we can
display our thumbnail even

00:12:58.476 --> 00:13:00.206 A:middle
if it is not downloaded yet.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.476 --> 00:13:00.206 A:middle
if it is not downloaded yet.

00:13:02.116 --> 00:13:05.496 A:middle
Then all we have
to do is redeploy

00:13:06.306 --> 00:13:10.236 A:middle
and we have some great
thumbnails in our app,

00:13:11.266 --> 00:13:14.796 A:middle
which load in the background so
they don't block our scrolling

00:13:14.796 --> 00:13:17.876 A:middle
as we scroll through
our sample code.

00:13:18.806 --> 00:13:19.316 A:middle
All right.

00:13:19.316 --> 00:13:27.776 A:middle
Let's get back to the slides.

00:13:27.776 --> 00:13:30.556 A:middle
So what have we learned about
building a Document Browser?

00:13:31.386 --> 00:13:33.776 A:middle
First, we learned that we want

00:13:33.776 --> 00:13:37.176 A:middle
to discover our documents using
NSMetadataQuery as opposed

00:13:37.176 --> 00:13:41.916 A:middle
to other methods so that we
can discover all the documents

00:13:41.916 --> 00:13:43.186 A:middle
that are available to our app.

00:13:44.156 --> 00:13:46.896 A:middle
Second, we have learned that
we want to display thumbnails

00:13:46.896 --> 00:13:50.106 A:middle
in our app's UI so that we
can build some great UIs

00:13:50.106 --> 00:13:53.046 A:middle
and our users can just quickly
identify the documents they're

00:13:53.046 --> 00:13:53.586 A:middle
working on.

00:13:54.536 --> 00:13:56.306 A:middle
And finally, we have
learned we want

00:13:56.306 --> 00:13:58.646 A:middle
to store our recents list
using bookmarks as opposed

00:13:58.646 --> 00:14:01.676 A:middle
to other methods so that
users can quickly get back


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.646 --> 00:14:01.676 A:middle
to other methods so that
users can quickly get back

00:14:01.676 --> 00:14:03.756 A:middle
to the documents that
they're currently working on.

00:14:04.286 --> 00:14:06.516 A:middle
And with that, I would like
to welcome Johannes Fortmann

00:14:06.516 --> 00:14:07.746 A:middle
to the stage to talk to you

00:14:07.746 --> 00:14:09.576 A:middle
about building the
document editor.

00:14:10.516 --> 00:14:15.696 A:middle
[ Applause ]

00:14:16.196 --> 00:14:17.846 A:middle
&gt;&gt; JOHANNES FORTMANN:
Thank you, Mike.

00:14:17.846 --> 00:14:19.376 A:middle
Now, Mike has shown you how

00:14:19.376 --> 00:14:22.556 A:middle
to build a beautiful Document
Browser in your application.

00:14:23.076 --> 00:14:26.626 A:middle
And of course that's something
that's very nice for our app

00:14:26.626 --> 00:14:28.356 A:middle
but equally as important

00:14:28.356 --> 00:14:32.416 A:middle
or possibly even more important
is the part of your application

00:14:32.416 --> 00:14:36.436 A:middle
where your user can go and
load and edit documents.

00:14:36.756 --> 00:14:40.126 A:middle
After all, that's why they're
trying to use your application.

00:14:41.246 --> 00:14:45.076 A:middle
Now, before we go into the
whole loading and writing

00:14:45.076 --> 00:14:48.876 A:middle
out change documents, we
have to take a quick detour

00:14:49.226 --> 00:14:51.646 A:middle
into a concept called
file coordination.

00:14:52.696 --> 00:14:54.766 A:middle
Now, what am I talking
about here?

00:14:55.896 --> 00:15:01.646 A:middle
Well, in our new modern
multitasking-based world we have


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:55.896 --> 00:15:01.646 A:middle
Well, in our new modern
multitasking-based world we have

00:15:01.976 --> 00:15:05.126 A:middle
this concept of multiple
apps being able to access

00:15:05.126 --> 00:15:07.026 A:middle
and display the same file.

00:15:07.306 --> 00:15:11.876 A:middle
As an example we could have the
iCloud Drive app displaying an

00:15:11.876 --> 00:15:15.406 A:middle
overview of all the files that
are in your document container

00:15:15.486 --> 00:15:18.666 A:middle
at the same time as
your app is running

00:15:18.776 --> 00:15:21.576 A:middle
and the user is actually
editing this document.

00:15:22.576 --> 00:15:26.086 A:middle
Or as a more conservative
approach,

00:15:26.396 --> 00:15:30.476 A:middle
even if your user is not
actually using this two-up view

00:15:30.476 --> 00:15:34.086 A:middle
of Multitasking, there is
always going to be the case

00:15:34.446 --> 00:15:38.556 A:middle
that the iCloud Drive
syncing daemon may want

00:15:38.556 --> 00:15:41.136 A:middle
to access the document
to sync it

00:15:41.136 --> 00:15:44.046 A:middle
up to the cloud while
your user is editing.

00:15:44.046 --> 00:15:46.826 A:middle
In fact, that is a
really, really common case,

00:15:46.916 --> 00:15:49.656 A:middle
because the user is in the
middle of editing the document,

00:15:50.226 --> 00:15:53.146 A:middle
they're saving this
document to disk,

00:15:53.146 --> 00:15:56.816 A:middle
and of course now it is changed,
so the iCloud Drive daemon wants

00:15:56.816 --> 00:15:59.436 A:middle
to make sure that it is
up-to-date in the cloud.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:00.416 --> 00:16:06.436 A:middle
So that's a really common case.

00:16:06.576 --> 00:16:10.166 A:middle
Let's have a look at this
specific case where your user is

00:16:10.166 --> 00:16:13.506 A:middle
in the middle of editing
the document on disk.

00:16:14.336 --> 00:16:16.966 A:middle
And the way this looks is that
your app is, of course, running.

00:16:17.576 --> 00:16:19.706 A:middle
And the user is making
some edits

00:16:19.856 --> 00:16:22.816 A:middle
and in the meantime your
application is going

00:16:23.016 --> 00:16:27.456 A:middle
through auto-saving,
do periodical writes

00:16:27.646 --> 00:16:29.046 A:middle
of this document to disk.

00:16:29.576 --> 00:16:31.846 A:middle
So we're going to have
a write at some point,

00:16:32.566 --> 00:16:35.746 A:middle
and at a later time we're going
to have like the user's editing,

00:16:35.746 --> 00:16:38.826 A:middle
and changing the document, we're
going to have another write.

00:16:39.876 --> 00:16:43.146 A:middle
Cool. Now let's just
assume for a moment

00:16:43.586 --> 00:16:45.656 A:middle
that our user is
taking full advantage

00:16:45.656 --> 00:16:48.986 A:middle
of the multitasking feature
and is at the same time

00:16:48.986 --> 00:16:51.306 A:middle
as they're editing
this document,

00:16:51.526 --> 00:16:53.416 A:middle
also launching another
application,

00:16:53.716 --> 00:16:57.756 A:middle
and this other application
might have a previous reference

00:16:57.756 --> 00:17:01.596 A:middle
to this document, and will
now immediately doing state


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:57.756 --> 00:17:01.596 A:middle
to this document, and will
now immediately doing state

00:17:01.596 --> 00:17:05.546 A:middle
restoration for example, try to
read this document from disk.

00:17:06.675 --> 00:17:11.036 A:middle
Now as you can see here,
this is a bad situation

00:17:11.586 --> 00:17:14.786 A:middle
because we're reading this
document at the same time

00:17:14.896 --> 00:17:17.296 A:middle
as the other application
is writing it.

00:17:17.726 --> 00:17:19.406 A:middle
Well, that's our
application actually.

00:17:19.886 --> 00:17:22.705 A:middle
So we're going to get this
inconsistent read which,

00:17:22.705 --> 00:17:24.106 A:middle
of course, is very unfortunate.

00:17:24.586 --> 00:17:26.336 A:middle
We're in the middle of
writing this document

00:17:26.336 --> 00:17:28.386 A:middle
at the same time the other
application is reading it.

00:17:28.996 --> 00:17:31.036 A:middle
The data is halfway
written to disk.

00:17:31.036 --> 00:17:32.006 A:middle
The other half is not.

00:17:32.606 --> 00:17:35.176 A:middle
And the other app may
not know what to do

00:17:35.176 --> 00:17:36.916 A:middle
with this weird,
inconsistent data.

00:17:37.596 --> 00:17:38.746 A:middle
That's a bad situation.

00:17:39.266 --> 00:17:44.136 A:middle
And likewise, even if we somehow
manage to live around this,

00:17:44.256 --> 00:17:46.606 A:middle
after our second
write, remember,

00:17:46.606 --> 00:17:48.736 A:middle
we're still in the first
application editing

00:17:48.736 --> 00:17:49.466 A:middle
this document.

00:17:49.646 --> 00:17:54.256 A:middle
The other application will
now still be displaying your

00:17:54.256 --> 00:17:58.886 A:middle
document and this document
is now being displayed

00:17:58.886 --> 00:18:00.996 A:middle
in an old version in
the other application,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.886 --> 00:18:00.996 A:middle
in an old version in
the other application,

00:18:00.996 --> 00:18:04.546 A:middle
so we have got this issue
of having a stale display.

00:18:04.546 --> 00:18:08.006 A:middle
And that is, of course,
very unfortunate.

00:18:08.556 --> 00:18:11.756 A:middle
Now conveniently we have
two solutions for you here.

00:18:12.086 --> 00:18:14.396 A:middle
And that is, first of all,

00:18:14.736 --> 00:18:16.646 A:middle
we have this concept
of file coordination.

00:18:17.216 --> 00:18:21.466 A:middle
File coordination is a
distributed reader/writer

00:18:21.466 --> 00:18:22.196 A:middle
lock mechanism.

00:18:22.476 --> 00:18:26.786 A:middle
And what that means is
that, while there can be

00:18:26.786 --> 00:18:29.726 A:middle
at any time multiple
readers for a document,

00:18:30.216 --> 00:18:32.116 A:middle
there can only ever
be one writer

00:18:32.116 --> 00:18:35.666 A:middle
and the one writer excludes
all other readers from reading.

00:18:37.276 --> 00:18:39.606 A:middle
That means that if both our
applications are using proper

00:18:39.606 --> 00:18:42.966 A:middle
file coordination as they will
if they're using UIDocument,

00:18:43.316 --> 00:18:45.566 A:middle
which implements
these mechanisms,

00:18:46.256 --> 00:18:51.546 A:middle
then our read will
be moved to a time

00:18:51.546 --> 00:18:55.386 A:middle
after our write has
finished and in

00:18:55.386 --> 00:18:58.726 A:middle
such a way we have always
a consistent picture

00:18:58.726 --> 00:18:59.606 A:middle
of this document.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:00.316 --> 00:19:01.136 A:middle
That's very nice.

00:19:02.296 --> 00:19:05.236 A:middle
Now, there is another
mechanism I promised you too.

00:19:05.556 --> 00:19:08.276 A:middle
And the other mechanism
here is NSFilePresentation.

00:19:08.786 --> 00:19:10.996 A:middle
NSFilePresentation
is a distributed

00:19:10.996 --> 00:19:12.016 A:middle
modification mechanism.

00:19:12.776 --> 00:19:16.796 A:middle
What that means is that our file
coordination will automatically

00:19:17.156 --> 00:19:20.286 A:middle
tell every other file
presenter that's been registered

00:19:20.286 --> 00:19:24.306 A:middle
for your document that it
has been written to disk

00:19:24.426 --> 00:19:27.756 A:middle
and that this file presenter
has to go and update itself.

00:19:29.036 --> 00:19:31.526 A:middle
That way we immediately
get a notification

00:19:31.526 --> 00:19:35.446 A:middle
after our second write and we
can be sure to update our UI.

00:19:36.806 --> 00:19:40.686 A:middle
Cool. So that's how we
can be able to make sure

00:19:40.686 --> 00:19:43.886 A:middle
that we have always a consistent
picture of our documents.

00:19:44.416 --> 00:19:45.716 A:middle
But what documents?

00:19:46.246 --> 00:19:49.476 A:middle
Of course, we first need to
create some documents to be able

00:19:49.476 --> 00:19:52.216 A:middle
to actually display and
have the user edit them.

00:19:52.736 --> 00:19:53.726 A:middle
So let's have a look at that.

00:19:54.786 --> 00:19:57.566 A:middle
What are our goals in
creating these documents?

00:19:57.856 --> 00:20:01.276 A:middle
Well, let's imagine as
our sample app implements,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:57.856 --> 00:20:01.276 A:middle
Well, let's imagine as
our sample app implements,

00:20:01.276 --> 00:20:03.676 A:middle
we have this little plus
button in the top right corner,

00:20:04.076 --> 00:20:07.046 A:middle
and this plus button,
well, the user taps it,

00:20:07.196 --> 00:20:10.816 A:middle
we will maybe show a
template dialogue, something,

00:20:11.066 --> 00:20:13.896 A:middle
but in any case at some point
we'll create a new document.

00:20:14.566 --> 00:20:16.796 A:middle
And our main goal here is

00:20:16.996 --> 00:20:22.806 A:middle
to give the user a consistent
display that's up-to-date

00:20:22.806 --> 00:20:23.766 A:middle
at all times.

00:20:24.286 --> 00:20:26.406 A:middle
So it wouldn't help a lot

00:20:26.406 --> 00:20:28.226 A:middle
if the user tapped
this little plus button

00:20:28.626 --> 00:20:31.536 A:middle
and now we wouldn't get an
update in our Document Browser

00:20:31.536 --> 00:20:35.156 A:middle
and the user is confused and
doesn't know what happened

00:20:35.156 --> 00:20:37.726 A:middle
and will possibly tap the
plus button a few more times

00:20:37.726 --> 00:20:40.716 A:middle
and now we have five
different new documents.

00:20:40.946 --> 00:20:46.806 A:middle
Not good. Now that's the
situation that we might end

00:20:47.226 --> 00:20:51.816 A:middle
up in without using file
coordination because, of course,

00:20:51.816 --> 00:20:55.046 A:middle
what this means is that we
create a document on disk

00:20:55.046 --> 00:20:58.426 A:middle
and at some point later the
iCloud Drive daemon notices

00:20:58.426 --> 00:21:01.886 A:middle
that there is a new document
here and informs our app.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.426 --> 00:21:01.886 A:middle
that there is a new document
here and informs our app.

00:21:01.886 --> 00:21:06.226 A:middle
But this delay can be half
a second or something,

00:21:06.306 --> 00:21:08.656 A:middle
possibly even more if the
daemon is busy at this time.

00:21:09.496 --> 00:21:12.326 A:middle
And this exact delay is
what we want to avoid.

00:21:12.996 --> 00:21:17.156 A:middle
Now, conveniently, if you're
using a coordinated operation,

00:21:17.606 --> 00:21:19.626 A:middle
this is done directly for you.

00:21:20.826 --> 00:21:25.866 A:middle
The coordinated operation
works in conjunction

00:21:26.116 --> 00:21:28.526 A:middle
with the NSMetadataQuery
that you're using

00:21:28.526 --> 00:21:34.696 A:middle
to display documents in your
browser, and basically loops

00:21:34.696 --> 00:21:37.586 A:middle
around after the
coordination has finished

00:21:38.026 --> 00:21:40.286 A:middle
and immediately tells
your running query

00:21:40.866 --> 00:21:43.046 A:middle
that there's a new
updated document.

00:21:44.346 --> 00:21:46.886 A:middle
That way we get rid
of this ugly delay.

00:21:48.306 --> 00:21:50.696 A:middle
Of course, there's
another slight caveat here,

00:21:51.296 --> 00:21:53.706 A:middle
which is that since
we're writing to disk,

00:21:53.706 --> 00:21:58.886 A:middle
we're writing anything to disk,
it can take a bit of time.

00:21:58.886 --> 00:22:03.156 A:middle
And of course doing any
operation that can take a bit


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.886 --> 00:22:03.156 A:middle
And of course doing any
operation that can take a bit

00:22:03.156 --> 00:22:06.166 A:middle
of time on the main
queue is unfortunate

00:22:06.206 --> 00:22:09.416 A:middle
because it can block the
main queue and thus look

00:22:09.416 --> 00:22:11.636 A:middle
like a stutter in your
application to the user.

00:22:15.556 --> 00:22:18.606 A:middle
Now, the solution to
this is, of course, easy.

00:22:19.076 --> 00:22:20.586 A:middle
We want to use a
background queue

00:22:20.586 --> 00:22:25.986 A:middle
to dispatch this coordinated
operation and make sure

00:22:25.986 --> 00:22:31.506 A:middle
that our operation is not
blocking the main thread.

00:22:32.336 --> 00:22:34.176 A:middle
Now conveniently we're still --

00:22:34.176 --> 00:22:36.046 A:middle
since we're using this
coordinated operation --

00:22:36.436 --> 00:22:40.946 A:middle
we're still getting the
immediately updated display

00:22:40.946 --> 00:22:45.326 A:middle
in our UI because our
NSMetadataQuery is still

00:22:45.326 --> 00:22:46.326 A:middle
updated directly.

00:22:47.236 --> 00:22:49.456 A:middle
You don't even have to
bounce this information back

00:22:49.496 --> 00:22:51.846 A:middle
to the main queue
because we're updating the

00:22:51.846 --> 00:22:54.086 A:middle
NSMetadataQuery directly.

00:22:54.316 --> 00:22:59.206 A:middle
Cool. Now, another common
operation is deleting a file.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:00.196 --> 00:23:03.636 A:middle
That's a totally reasonable
thing for your user to do.

00:23:03.636 --> 00:23:04.816 A:middle
They're done with this document.

00:23:04.816 --> 00:23:05.766 A:middle
They want to get rid of it

00:23:06.136 --> 00:23:07.696 A:middle
so it doesn't clutter
up their workspace.

00:23:08.246 --> 00:23:12.226 A:middle
And the basic idea behind
deletion is exactly the same.

00:23:12.776 --> 00:23:17.756 A:middle
We'll coordinate a write
on our background queue,

00:23:18.006 --> 00:23:21.896 A:middle
perform the deletion during this
write, and immediately loop back

00:23:21.936 --> 00:23:24.576 A:middle
to the main queue through
the NSMetadataQuery

00:23:24.576 --> 00:23:26.596 A:middle
to update in time.

00:23:28.636 --> 00:23:33.846 A:middle
Cool. So that's how you manage
creating and deleting documents

00:23:33.906 --> 00:23:35.966 A:middle
on your background queue.

00:23:36.346 --> 00:23:40.556 A:middle
So let's have a look at
what you actually want

00:23:40.556 --> 00:23:42.266 A:middle
to do with these documents.

00:23:42.956 --> 00:23:45.726 A:middle
And that, of course, is
you want to display them,

00:23:46.506 --> 00:23:48.556 A:middle
meaning you want to
read and write them.

00:23:49.386 --> 00:23:52.656 A:middle
Now, we strongly,
strongly, strongly suggest

00:23:52.656 --> 00:23:55.486 A:middle
that you use UIDocument for
reading and writing documents.

00:23:56.026 --> 00:24:00.846 A:middle
UIDocument implements both
the NSFileCoordination calls


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:56.026 --> 00:24:00.846 A:middle
UIDocument implements both
the NSFileCoordination calls

00:24:01.016 --> 00:24:04.036 A:middle
to make sure that at
any time you are reading

00:24:04.036 --> 00:24:06.046 A:middle
and writing documents
in a coordinated manner,

00:24:06.046 --> 00:24:12.106 A:middle
as well as implementing
NSFilePresentation to make sure

00:24:12.306 --> 00:24:14.026 A:middle
that you can be immediately
informed

00:24:14.026 --> 00:24:15.396 A:middle
that this document has changed

00:24:15.396 --> 00:24:17.596 A:middle
and can update it
in your display.

00:24:18.946 --> 00:24:20.916 A:middle
So let's have a look at
how to read a document.

00:24:21.646 --> 00:24:25.446 A:middle
You create a UIDocument object
and simply call the 'open

00:24:25.446 --> 00:24:28.306 A:middle
with completion' method on
this UIDocument instance.

00:24:29.026 --> 00:24:33.416 A:middle
And what this method does is it
will take out a coordinated read

00:24:33.686 --> 00:24:35.376 A:middle
on a background worker queue.

00:24:36.456 --> 00:24:39.266 A:middle
That way your application
stays perfectly performant

00:24:39.266 --> 00:24:41.176 A:middle
and responsive, while

00:24:41.176 --> 00:24:45.306 A:middle
at the same time your document
is going to read itself in.

00:24:45.636 --> 00:24:49.526 A:middle
Now all that is there
that's left to do for you,

00:24:49.836 --> 00:24:52.286 A:middle
is that you implement the
'load from contents' method.

00:24:52.716 --> 00:24:55.676 A:middle
And this method will
simply get called

00:24:55.676 --> 00:24:58.306 A:middle
within the coordinated
read so it is encapsulated

00:24:58.306 --> 00:25:01.666 A:middle
by this coordinated read,
meaning it is totally safe


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.306 --> 00:25:01.666 A:middle
by this coordinated read,
meaning it is totally safe

00:25:01.666 --> 00:25:03.716 A:middle
to read anything
you want in there,

00:25:03.716 --> 00:25:05.306 A:middle
from the document, mind you.

00:25:06.136 --> 00:25:09.836 A:middle
And all you have to do is
basically take the contents

00:25:09.836 --> 00:25:14.166 A:middle
and fill in your
document data from them.

00:25:14.456 --> 00:25:17.886 A:middle
Now, there's another method here

00:25:18.126 --> 00:25:20.526 A:middle
that you can alternatively
choose to implement,

00:25:21.506 --> 00:25:25.806 A:middle
which instead of taking a blob
of data, it takes an NSURL

00:25:25.806 --> 00:25:30.476 A:middle
and you can use that method to,
for example, stream document,

00:25:30.476 --> 00:25:34.466 A:middle
there may be situations where
that's more reasonable for you

00:25:34.466 --> 00:25:37.416 A:middle
to do, because, for
example, the document format

00:25:37.416 --> 00:25:40.226 A:middle
on disk is very different
than what you want in memory.

00:25:41.076 --> 00:25:44.796 A:middle
Now, after this is done,
we will simply loop back

00:25:44.796 --> 00:25:47.546 A:middle
to the main queue and
call the completion block

00:25:47.546 --> 00:25:49.176 A:middle
that you provided for us.

00:25:49.246 --> 00:25:53.696 A:middle
And in that completion block,
you can go and, for example,

00:25:53.696 --> 00:25:57.536 A:middle
push your new interface
updated for your document.

00:25:59.856 --> 00:26:03.386 A:middle
Cool. So that's how
reading a document works.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:59.856 --> 00:26:03.386 A:middle
Cool. So that's how
reading a document works.

00:26:03.886 --> 00:26:07.066 A:middle
But as you remember,
Mike told you

00:26:07.066 --> 00:26:09.026 A:middle
about this concept
called promises.

00:26:09.786 --> 00:26:11.966 A:middle
And a promise is
basically a file

00:26:12.286 --> 00:26:15.306 A:middle
that the iCloud Drive
daemon promises

00:26:15.396 --> 00:26:20.496 A:middle
to your app is actually there,
but it is not yet downloaded.

00:26:21.466 --> 00:26:24.116 A:middle
And what that means
is that a read

00:26:24.116 --> 00:26:26.336 A:middle
on this document may
trigger a download.

00:26:27.536 --> 00:26:32.086 A:middle
Now, of course if you've
lived in the real world

00:26:32.136 --> 00:26:37.426 A:middle
as we all have, obviously,
downloads can be terribly slow

00:26:37.426 --> 00:26:41.606 A:middle
at times, and depending how
your document size looks,

00:26:42.266 --> 00:26:43.356 A:middle
this may take a while.

00:26:43.986 --> 00:26:48.796 A:middle
And your user may perceive
this download as a failing

00:26:48.796 --> 00:26:51.736 A:middle
of your app, which is totally
unfair, it is not your fault

00:26:51.736 --> 00:26:54.026 A:middle
that this download is being done

00:26:54.026 --> 00:26:56.906 A:middle
over a slow network
connection and takes a while.

00:26:57.696 --> 00:27:02.836 A:middle
And so, for you, new in
iOS 9, we expose a way


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:57.696 --> 00:27:02.836 A:middle
And so, for you, new in
iOS 9, we expose a way

00:27:02.836 --> 00:27:04.606 A:middle
to display progress

00:27:04.606 --> 00:27:09.656 A:middle
on UIDocuments using the new
NSProgressReporting protocol.

00:27:10.656 --> 00:27:12.626 A:middle
Now, implementing
this is very simple.

00:27:13.126 --> 00:27:16.966 A:middle
The NSProgressReporting protocol
exposes a progress property

00:27:16.966 --> 00:27:20.666 A:middle
on your UIDocument instance, and
this progress property is filled

00:27:20.666 --> 00:27:24.876 A:middle
in by us to display to you
what kind of progress we have.

00:27:25.536 --> 00:27:28.096 A:middle
So it is basically
a simple percentage

00:27:28.096 --> 00:27:29.116 A:middle
of the download state.

00:27:30.356 --> 00:27:35.996 A:middle
Now, we expose this NSProgress
property through a state change,

00:27:36.406 --> 00:27:41.266 A:middle
so the way that you display
this is that you listen

00:27:41.266 --> 00:27:44.996 A:middle
for a state change notification
on your document state,

00:27:46.126 --> 00:27:50.576 A:middle
and when the state changes you
look at the new flag that says,

00:27:50.576 --> 00:27:52.986 A:middle
'hey, I have a progress
that I'm exposing here.'

00:27:52.986 --> 00:27:55.796 A:middle
And then you simply
display this progress.

00:27:56.446 --> 00:28:00.316 A:middle
Now, displaying a progress on,
for example, a UIProgress view,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:56.446 --> 00:28:00.316 A:middle
Now, displaying a progress on,
for example, a UIProgress view,

00:28:00.626 --> 00:28:02.446 A:middle
used to be a little
bit complicated

00:28:02.876 --> 00:28:05.006 A:middle
because it exposes a
property that you have

00:28:05.056 --> 00:28:08.716 A:middle
to key value observe to put
it into this progress view.

00:28:09.376 --> 00:28:13.616 A:middle
And also we realized that, of
course, and also new in iOS 9,

00:28:13.856 --> 00:28:17.256 A:middle
we exposed an observe progress
property on the UIProgress view

00:28:17.696 --> 00:28:22.336 A:middle
that will enable you to just
plump the NSProgress directly

00:28:22.336 --> 00:28:23.246 A:middle
into the progress view.

00:28:23.776 --> 00:28:25.536 A:middle
You simply assign the NSProgress

00:28:25.876 --> 00:28:28.386 A:middle
to the progress view's
'observe progress' property

00:28:28.576 --> 00:28:31.876 A:middle
and it will automatically
update its count [applause].

00:28:33.166 --> 00:28:34.936 A:middle
That's very convenient for you.

00:28:38.196 --> 00:28:43.136 A:middle
Thanks. All that's left
for you to do is to listen

00:28:43.136 --> 00:28:46.356 A:middle
for the next state change
which signals, 'hey,

00:28:46.526 --> 00:28:47.856 A:middle
we're done with this progress.'

00:28:48.716 --> 00:28:50.266 A:middle
And at that point you want

00:28:50.266 --> 00:28:54.346 A:middle
to probably undisplay your
UIProgress view and get ready

00:28:54.346 --> 00:28:57.246 A:middle
for displaying the new
document controller.

00:28:58.806 --> 00:29:01.676 A:middle
Cool. So that's reading
documents.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:58.806 --> 00:29:01.676 A:middle
Cool. So that's reading
documents.

00:29:01.876 --> 00:29:03.716 A:middle
Of course, we also want
to write documents.

00:29:04.356 --> 00:29:08.036 A:middle
And writing documents is very
symmetric to reading documents.

00:29:08.716 --> 00:29:12.126 A:middle
The way we write documents
is that we also take

00:29:12.126 --> 00:29:14.136 A:middle
out a coordinated
file coordination

00:29:14.136 --> 00:29:15.136 A:middle
on a background queue.

00:29:15.786 --> 00:29:18.056 A:middle
Now, this one is
slightly different

00:29:18.056 --> 00:29:19.476 A:middle
in that you're not starting it

00:29:19.966 --> 00:29:23.606 A:middle
but rather UIDocument
will automatically notice

00:29:24.166 --> 00:29:27.826 A:middle
that now is a convenient
time to save the document.

00:29:28.136 --> 00:29:31.896 A:middle
For example, because for a while
there have not been any edits

00:29:31.966 --> 00:29:34.466 A:middle
incoming, or it has been a time

00:29:34.466 --> 00:29:36.536 A:middle
since the document
was last saved,

00:29:37.606 --> 00:29:40.746 A:middle
or the user is putting your
application into the background

00:29:40.746 --> 00:29:42.486 A:middle
so now would be a
really convenient time

00:29:42.486 --> 00:29:43.456 A:middle
to save the document.

00:29:44.106 --> 00:29:47.676 A:middle
But basically the way this
is done is very symmetrical

00:29:47.676 --> 00:29:50.296 A:middle
to reading a document, we
simply call the 'contents

00:29:50.296 --> 00:29:53.036 A:middle
for type' method on your
UIDocument instance,

00:29:53.156 --> 00:29:55.386 A:middle
and you fill in the
NSData instance

00:29:55.456 --> 00:29:56.846 A:middle
that you then return from there.

00:29:57.866 --> 00:29:58.316 A:middle
Very nice.

00:29:58.706 --> 00:30:00.536 A:middle
There is one additional
thing here,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:58.706 --> 00:30:00.536 A:middle
There is one additional
thing here,

00:30:00.536 --> 00:30:03.076 A:middle
and that is that this
is a convenient time

00:30:03.076 --> 00:30:04.006 A:middle
to write a thumbnail.

00:30:04.756 --> 00:30:08.836 A:middle
As Mike told you, for some very
specific document formats we'll

00:30:08.836 --> 00:30:12.936 A:middle
automatically generate
thumbnails, but chances are

00:30:12.936 --> 00:30:16.166 A:middle
that you're not building the
exact thing that we're building,

00:30:16.696 --> 00:30:21.406 A:middle
and thus if you're not
building, using any of our very,

00:30:21.406 --> 00:30:25.346 A:middle
very well-known formats
like images or simple text,

00:30:25.956 --> 00:30:28.896 A:middle
then you will want to out
write thumbnails on your own.

00:30:29.926 --> 00:30:32.466 A:middle
Now, the way you do this is

00:30:32.546 --> 00:30:35.106 A:middle
that we will call the
'file attributes to write

00:30:35.106 --> 00:30:37.876 A:middle
to your own' method
on your UIDocument.

00:30:38.446 --> 00:30:42.836 A:middle
And in that method you simply
return a UIImage instance

00:30:42.936 --> 00:30:45.066 A:middle
as part of your attribute
dictionary.

00:30:45.676 --> 00:30:49.746 A:middle
And this instance we'll
write out contained

00:30:49.746 --> 00:30:53.506 A:middle
in the same coordinated write
that's writing your document.

00:30:54.176 --> 00:30:56.346 A:middle
That means that if the user has

00:30:56.346 --> 00:31:01.936 A:middle
at this time the Document
Browser up in a separate pane,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:56.346 --> 00:31:01.936 A:middle
at this time the Document
Browser up in a separate pane,

00:31:02.206 --> 00:31:04.346 A:middle
they'll not see an
inconsistent state.

00:31:05.106 --> 00:31:08.466 A:middle
Cool. The important thing
here is to keep in mind

00:31:08.466 --> 00:31:10.266 A:middle
that this is being called
on a background queue.

00:31:10.816 --> 00:31:12.576 A:middle
And what that means
is that you cannot

00:31:12.576 --> 00:31:16.156 A:middle
under any circumstances
use UIViews to write --

00:31:16.156 --> 00:31:17.676 A:middle
to render your thumbnail.

00:31:18.216 --> 00:31:21.306 A:middle
UIViews are not thread safe
so you have to make sure

00:31:21.386 --> 00:31:26.016 A:middle
that your thumbnail rendering is
being done using, for example,

00:31:26.016 --> 00:31:28.086 A:middle
Core Graphics, or textKit,

00:31:28.446 --> 00:31:30.996 A:middle
or any of the other thread
safe rendering mechanisms

00:31:30.996 --> 00:31:33.066 A:middle
that we provide on our platform.

00:31:33.176 --> 00:31:35.656 A:middle
In iOS 8, the only mechanism

00:31:35.916 --> 00:31:38.546 A:middle
to access a document
was through a copy.

00:31:38.546 --> 00:31:42.236 A:middle
And the reason for that
is that applications

00:31:42.276 --> 00:31:45.006 A:middle
in general do not have access
to each other's Sandbox.

00:31:45.386 --> 00:31:48.986 A:middle
So if we have two application
Sandboxes, the only way

00:31:49.356 --> 00:31:53.366 A:middle
to move a document from a
Sandbox to another Sandbox was

00:31:53.656 --> 00:31:56.276 A:middle
that the first application
caused a copy to be made

00:31:56.326 --> 00:31:58.146 A:middle
in the other application
Sandbox.

00:31:58.746 --> 00:32:02.676 A:middle
Now, we relaxed this thing
a little bit through the use


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.746 --> 00:32:02.676 A:middle
Now, we relaxed this thing
a little bit through the use

00:32:02.676 --> 00:32:04.536 A:middle
of the 'UIDocument
Menu View Controller,

00:32:05.006 --> 00:32:08.876 A:middle
which allowed your application
to do a pull of a document

00:32:08.876 --> 00:32:10.306 A:middle
in another application's
container.

00:32:11.116 --> 00:32:15.536 A:middle
But in general you could
not simply open a document.

00:32:16.196 --> 00:32:19.306 A:middle
And every open of this
document would cause a copy.

00:32:20.266 --> 00:32:22.736 A:middle
Now, of course, doing all

00:32:22.736 --> 00:32:24.676 A:middle
of these copies is
very inconvenient,

00:32:24.726 --> 00:32:27.756 A:middle
because now you have a
copy of your document

00:32:28.096 --> 00:32:30.576 A:middle
in the other application's
container and the user is going

00:32:30.576 --> 00:32:33.216 A:middle
to modify it so you have a
second version of this document.

00:32:33.686 --> 00:32:36.576 A:middle
And now, for example,
the user is going to want

00:32:36.576 --> 00:32:39.626 A:middle
to open this document
back in your application

00:32:40.166 --> 00:32:42.776 A:middle
and that causes a
third copy to be made.

00:32:43.206 --> 00:32:45.386 A:middle
Now you have these
three different versions

00:32:45.386 --> 00:32:46.716 A:middle
of documents floating around.

00:32:47.396 --> 00:32:50.156 A:middle
And that's very unfortunate,
because the user gets confused

00:32:50.156 --> 00:32:52.866 A:middle
and doesn't know which
version is the most recent.

00:32:54.296 --> 00:32:56.606 A:middle
And it is just not
a great situation.

00:32:57.936 --> 00:33:01.386 A:middle
Now in iOS 9, we have this
nice new mechanism called 'Open


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:57.936 --> 00:33:01.386 A:middle
Now in iOS 9, we have this
nice new mechanism called 'Open

00:33:01.386 --> 00:33:01.936 A:middle
in place.'

00:33:02.876 --> 00:33:05.876 A:middle
And what this means is
that your application,

00:33:05.976 --> 00:33:08.256 A:middle
through use of the document
interaction controller,

00:33:08.866 --> 00:33:14.546 A:middle
can grant another application
access to a document.

00:33:15.346 --> 00:33:18.706 A:middle
And this document is
the exact same document,

00:33:18.706 --> 00:33:22.426 A:middle
this is not a copy but rather
a reference to this document.

00:33:23.556 --> 00:33:24.696 A:middle
What that means is, of course,

00:33:24.696 --> 00:33:28.236 A:middle
that the other application
is able to simply make edits

00:33:28.306 --> 00:33:30.626 A:middle
that are then, through the
magic of file presentation,

00:33:30.676 --> 00:33:37.096 A:middle
are directly reflected in your
application, which, of course,

00:33:37.096 --> 00:33:38.406 A:middle
is very nice for the user.

00:33:38.646 --> 00:33:41.086 A:middle
And this includes
files that are open

00:33:41.086 --> 00:33:43.556 A:middle
from the iCloud Drive
app and from Spotlight.

00:33:44.496 --> 00:33:48.716 A:middle
That means that any time your
user browses their documents

00:33:49.006 --> 00:33:53.796 A:middle
in the iCloud Drive app, we
will directly be able to open

00:33:53.796 --> 00:33:55.076 A:middle
that document in place.

00:33:56.236 --> 00:33:59.126 A:middle
The mechanism behind
this is very similar

00:33:59.126 --> 00:34:01.826 A:middle
to the mechanism used by the
'Document Menu View Controller.'


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.126 --> 00:34:01.826 A:middle
to the mechanism used by the
'Document Menu View Controller.'

00:34:02.466 --> 00:34:04.156 A:middle
That means that if your
application is already

00:34:04.156 --> 00:34:06.936 A:middle
supporting that, it
is super easy for you

00:34:06.936 --> 00:34:08.565 A:middle
to also support this mechanism.

00:34:09.306 --> 00:34:12.646 A:middle
And even if you're not
currently supporting the

00:34:12.646 --> 00:34:15.295 A:middle
UIMenuViewController,
it is super easy for you

00:34:15.295 --> 00:34:19.025 A:middle
to adopt this, because there
is really no big magic here.

00:34:19.025 --> 00:34:20.926 A:middle
You get a URL and put it

00:34:20.926 --> 00:34:23.696 A:middle
into a UIDocument instance
that's you then display.

00:34:24.136 --> 00:34:29.356 A:middle
Let's have a quick look at
how you want to support this.

00:34:29.976 --> 00:34:31.286 A:middle
As I said, it is super simple.

00:34:31.746 --> 00:34:33.916 A:middle
First of all, you have to
tell us that you support it.

00:34:34.476 --> 00:34:36.056 A:middle
Your app, remember,
is not actually,

00:34:36.146 --> 00:34:39.216 A:middle
possibly it may not be launched
at the time we're trying

00:34:39.216 --> 00:34:42.065 A:middle
to figure out whether we want
to open this file in place.

00:34:42.136 --> 00:34:43.616 A:middle
So you have to tell
us beforehand.

00:34:44.275 --> 00:34:48.786 A:middle
And you do that by adopting the
'LS Supports Opening Documents

00:34:48.786 --> 00:34:50.795 A:middle
In Place' key in
your Info.plist.

00:34:51.186 --> 00:34:53.076 A:middle
You simply set that
to yes or true,

00:34:53.076 --> 00:34:55.206 A:middle
depending on whether you
are Objective-C or Swift.

00:34:55.946 --> 00:35:01.476 A:middle
And that tells us that
your application is able


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:55.946 --> 00:35:01.476 A:middle
And that tells us that
your application is able

00:35:01.476 --> 00:35:02.346 A:middle
to handle this.

00:35:03.146 --> 00:35:05.886 A:middle
Now there is also a bit of
code you'll have to write,

00:35:06.546 --> 00:35:09.096 A:middle
and that comes in the form
of a new delegate method.

00:35:10.096 --> 00:35:10.856 A:middle
How does that look?

00:35:11.616 --> 00:35:15.026 A:middle
Well, let's say you already
are opening documents here.

00:35:15.596 --> 00:35:17.846 A:middle
And it is a reasonable
assumption because, well,

00:35:17.846 --> 00:35:19.086 A:middle
you're a document-based app.

00:35:19.366 --> 00:35:21.726 A:middle
So you must be implementing
a method very similar

00:35:21.726 --> 00:35:23.916 A:middle
to the one that we see here.

00:35:24.496 --> 00:35:28.256 A:middle
Your method currently
must be getting an NSURL,

00:35:29.136 --> 00:35:32.366 A:middle
and since that NSURL
is a temporary copy

00:35:32.366 --> 00:35:35.606 A:middle
that the system made for
your app, you have to be able

00:35:35.606 --> 00:35:38.586 A:middle
to copy this into
your own container

00:35:38.586 --> 00:35:40.686 A:middle
and then open this copied file.

00:35:41.116 --> 00:35:46.306 A:middle
And this is what this small
chunk of code here does.

00:35:46.866 --> 00:35:49.456 A:middle
Now, the first thing is to
adopt our new method here.

00:35:50.246 --> 00:35:53.326 A:middle
And this new method is very
similar to the old one.

00:35:53.766 --> 00:35:56.426 A:middle
It simply takes an
options dictionary

00:35:56.996 --> 00:36:01.296 A:middle
that encapsulates the parameters
that the previous method has.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:56.996 --> 00:36:01.296 A:middle
that encapsulates the parameters
that the previous method has.

00:36:01.916 --> 00:36:05.086 A:middle
And, importantly, one of
these parameters is the 'open

00:36:05.086 --> 00:36:05.846 A:middle
in place' key.

00:36:07.076 --> 00:36:10.896 A:middle
Now, all you have to do is have
a look at whether this 'open

00:36:10.896 --> 00:36:16.276 A:middle
in place' key is actually
true, and if this key is true,

00:36:16.276 --> 00:36:18.356 A:middle
then your application should
open this file in place.

00:36:18.796 --> 00:36:20.836 A:middle
That means it should
not make a copy.

00:36:21.636 --> 00:36:23.366 A:middle
Simple, you just
stop doing something

00:36:23.366 --> 00:36:24.586 A:middle
that you must have
been doing before.

00:36:25.346 --> 00:36:29.856 A:middle
And then now that you have
this URL, all you have

00:36:29.856 --> 00:36:33.616 A:middle
to do is go ahead and open it
whichever way you were opening

00:36:33.616 --> 00:36:34.196 A:middle
it before.

00:36:34.736 --> 00:36:38.656 A:middle
And that's how simple it is
to support open in place.

00:36:40.476 --> 00:36:43.006 A:middle
Cool. Let's summarize what
we have learned today.

00:36:43.916 --> 00:36:47.406 A:middle
We have seen how to make your
app very performance responsive

00:36:47.406 --> 00:36:53.346 A:middle
and beautiful using
NSMetadataQuery to display a set

00:36:53.346 --> 00:36:58.126 A:middle
of documents and to update
these documents in time

00:36:58.206 --> 00:36:59.746 A:middle
when changes come
in from the cloud.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:00.086 --> 00:37:02.066 A:middle
We have seen how
to use bookmarks

00:37:02.406 --> 00:37:06.006 A:middle
to implement a recents
mechanism that allows your users

00:37:06.006 --> 00:37:08.896 A:middle
to quickly go back to the
state that they were before --

00:37:08.896 --> 00:37:09.886 A:middle
that they were in before.

00:37:10.486 --> 00:37:12.726 A:middle
And of course, something
we didn't talk about,

00:37:12.726 --> 00:37:14.456 A:middle
but which is entirely
reasonable,

00:37:14.656 --> 00:37:17.206 A:middle
you can also use bookmarks to
implement state restoration,

00:37:17.696 --> 00:37:20.256 A:middle
which allows your users
to directly go back

00:37:20.256 --> 00:37:21.746 A:middle
to the previous state
that they were in.

00:37:22.126 --> 00:37:24.856 A:middle
We have seen how
to use thumbnails

00:37:24.856 --> 00:37:26.176 A:middle
to make your application
beautiful,

00:37:26.536 --> 00:37:30.386 A:middle
and how to implement
progress display to make sure

00:37:30.386 --> 00:37:32.376 A:middle
that your user is always
aware of what happens

00:37:32.376 --> 00:37:33.246 A:middle
in their applications.

00:37:33.336 --> 00:37:36.166 A:middle
And last but not least, we
have seen how easy it is

00:37:36.166 --> 00:37:37.476 A:middle
to implement open-in-place.

00:37:38.136 --> 00:37:41.456 A:middle
Open-in-place is a great new
mechanism that allows your users

00:37:41.746 --> 00:37:47.686 A:middle
to directly open documents in
your application without having

00:37:47.686 --> 00:37:48.736 A:middle
to make multiple copies.

00:37:50.426 --> 00:37:55.026 A:middle
Now all of these concepts
are beautifully displayed

00:37:55.026 --> 00:37:57.156 A:middle
in a sample code that
we published today.

00:37:57.156 --> 00:37:59.436 A:middle
And the sample code is
basically the application

00:37:59.436 --> 00:38:01.416 A:middle
that Mike showed you
previously in the demo.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:59.436 --> 00:38:01.416 A:middle
that Mike showed you
previously in the demo.

00:38:01.906 --> 00:38:03.686 A:middle
It implements all
of these features

00:38:04.146 --> 00:38:09.686 A:middle
that are creating documents,
displaying documents

00:38:09.716 --> 00:38:14.116 A:middle
in a Document Browser, animating
changes on these documents, and,

00:38:14.116 --> 00:38:18.086 A:middle
of course, writing thumbnails,
and, of course, open-in-place.

00:38:19.056 --> 00:38:21.096 A:middle
For technical support, we would

00:38:21.096 --> 00:38:22.716 A:middle
like to direct you
to our forums.

00:38:23.676 --> 00:38:26.096 A:middle
And we also have
amazing documentation

00:38:26.096 --> 00:38:28.516 A:middle
under the link that
you see here.

00:38:28.516 --> 00:38:30.456 A:middle
If you're interested
in learning more

00:38:30.456 --> 00:38:33.446 A:middle
about using the 'UIDocument
Menu View Controller'

00:38:33.966 --> 00:38:38.006 A:middle
to implement the pull mechanism
as opposed to the pull mechanism

00:38:38.006 --> 00:38:39.396 A:middle
that open-in-place implements,

00:38:39.896 --> 00:38:42.496 A:middle
so that your application
can pull documents

00:38:42.496 --> 00:38:45.346 A:middle
from another application's
container,

00:38:45.946 --> 00:38:47.846 A:middle
or if you're generally
interested in how

00:38:47.846 --> 00:38:50.206 A:middle
to implement UIDocument-based
applications,

00:38:50.656 --> 00:38:53.276 A:middle
we'd like to point you to
our session from last year,

00:38:53.276 --> 00:38:58.186 A:middle
that's session 234 last
year, and, of course,

00:38:58.186 --> 00:38:59.286 A:middle
that's online as well.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:00.056 --> 00:39:01.616 A:middle
And with that, thank
you for your time

00:39:01.866 --> 00:39:03.206 A:middle
and have a great afternoon.

00:39:05.516 --> 00:39:16.660 A:middle
[ Applause ]

