WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:23.516 --> 00:00:26.806 A:middle
[ Applause ]

00:00:27.306 --> 00:00:27.906 A:middle
&gt;&gt; JASON YAO: Wow, wow.

00:00:28.666 --> 00:00:29.776 A:middle
Good morning, everybody.

00:00:29.896 --> 00:00:30.466 A:middle
Good morning.

00:00:31.056 --> 00:00:32.266 A:middle
My name is Jason Yao.

00:00:32.266 --> 00:00:33.716 A:middle
I am an interface
builder engineer.

00:00:33.716 --> 00:00:36.696 A:middle
I am going to be presenting with
Kasia, an iOS keyboard engineer.

00:00:37.046 --> 00:00:38.926 A:middle
Welcome to the Mysteries
of Auto Layout.

00:00:40.386 --> 00:00:43.436 A:middle
As developers, you want to
build bold and beautiful apps

00:00:43.496 --> 00:00:45.516 A:middle
that will surprise and
delight your customers.

00:00:46.226 --> 00:00:49.126 A:middle
Having a great layout
will put your app ahead,

00:00:49.126 --> 00:00:51.326 A:middle
and your customers
will reward you for it.

00:00:51.936 --> 00:00:54.476 A:middle
Having to target all
the different devices

00:00:54.516 --> 00:00:57.336 A:middle
and configurations as
well as multitasking

00:00:57.416 --> 00:01:00.376 A:middle
and localization
can be a challenge.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:57.416 --> 00:01:00.376 A:middle
and localization
can be a challenge.

00:01:00.626 --> 00:01:02.966 A:middle
Luckily, you have a tool
to help, Auto Layout.

00:01:08.156 --> 00:01:11.736 A:middle
Auto Layout, in its essence,
takes a large set of inputs

00:01:12.036 --> 00:01:16.156 A:middle
in the form of constraints,
transforms them into equations,

00:01:16.476 --> 00:01:18.856 A:middle
uses linear algebra to
give you a set of frames.

00:01:19.426 --> 00:01:22.896 A:middle
And that will give you the
layout that you've specified.

00:01:23.466 --> 00:01:25.886 A:middle
Now, working with Auto Layout,
you will find it's powerful

00:01:25.886 --> 00:01:30.906 A:middle
and flexible but can seem
somewhat mysterious at times.

00:01:31.476 --> 00:01:33.986 A:middle
And that's why we're
here today, to discover

00:01:34.166 --> 00:01:35.756 A:middle
and unravel the mysteries
of Auto Layout.

00:01:36.276 --> 00:01:42.006 A:middle
We have a number of tips and
techniques to tell you about,

00:01:42.516 --> 00:01:47.416 A:middle
and learning them will save
you hours of development time

00:01:47.706 --> 00:01:48.786 A:middle
and save you from frustration.

00:01:49.416 --> 00:01:50.106 A:middle
Let's get started.

00:01:50.606 --> 00:01:53.726 A:middle
If you are new to Auto Layout,
whether you're new or a veteran,

00:01:53.726 --> 00:01:55.326 A:middle
there is something
in this talk for you.

00:01:55.956 --> 00:01:59.746 A:middle
You can refer to
past WWDC sessions


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:00.266 --> 00:02:01.106 A:middle
if you need a refresher.

00:02:01.976 --> 00:02:02.986 A:middle
Let's take a look
at the outline.

00:02:03.546 --> 00:02:06.366 A:middle
This is a two-part session.

00:02:06.366 --> 00:02:09.316 A:middle
We are covering the morning
half today, right now,

00:02:09.536 --> 00:02:12.856 A:middle
and the afternoon one is in
this very same room later on.

00:02:14.096 --> 00:02:15.896 A:middle
Let's get started with
the first mystery,

00:02:16.726 --> 00:02:20.196 A:middle
mystery number one,
maintainable layouts.

00:02:20.966 --> 00:02:24.456 A:middle
Now, when you are working with
Auto Layout, you are going

00:02:24.456 --> 00:02:27.076 A:middle
to discover very soon you are
going to work with constraints.

00:02:27.656 --> 00:02:31.656 A:middle
Picture developing a
relationship between two views.

00:02:32.246 --> 00:02:35.036 A:middle
You can have a label on one
side, a bundle on the other,

00:02:35.366 --> 00:02:39.866 A:middle
specify how far apart it's going
to be, where it's going to go

00:02:39.866 --> 00:02:40.726 A:middle
into the superview,

00:02:41.026 --> 00:02:43.796 A:middle
and beautifully align
them along their baseline.

00:02:44.696 --> 00:02:47.226 A:middle
Now, whether those
specifications change for you

00:02:47.786 --> 00:02:53.006 A:middle
at runtime or design time,
Auto Layout will do its thing.

00:02:53.206 --> 00:02:54.536 A:middle
Picture a more complex example.

00:02:55.166 --> 00:02:55.956 A:middle
This is the App Store

00:02:56.256 --> 00:02:57.996 A:middle
with GarageBand showing
up as the app.

00:02:58.236 --> 00:02:59.576 A:middle
It has a number of
controls inside.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:00.236 --> 00:03:03.596 A:middle
It has a label at the top and
some buttons, it's got an icon

00:03:03.596 --> 00:03:06.646 A:middle
to one side, a segmented
control in between,

00:03:06.646 --> 00:03:09.116 A:middle
and then some preview
images at the bottom.

00:03:09.826 --> 00:03:11.916 A:middle
We can use Auto Layout
to lay this thing out

00:03:12.276 --> 00:03:13.576 A:middle
and adapt to different sizes.

00:03:14.186 --> 00:03:15.966 A:middle
And the constraints
might look like this.

00:03:20.466 --> 00:03:22.946 A:middle
Now for the maintainability
part.

00:03:23.896 --> 00:03:26.606 A:middle
Pretend that you were
not the developer

00:03:26.606 --> 00:03:27.506 A:middle
who created this layout.

00:03:28.336 --> 00:03:30.546 A:middle
But your boss comes
up to you and says,

00:03:30.716 --> 00:03:34.046 A:middle
I want a new control right
underneath the essentials

00:03:34.226 --> 00:03:35.366 A:middle
and above the star rating.

00:03:35.996 --> 00:03:36.926 A:middle
Where do you start?

00:03:37.826 --> 00:03:39.536 A:middle
You are probably going to
have to examine the controls

00:03:39.536 --> 00:03:41.196 A:middle
in the area, look
at the constraints,

00:03:41.626 --> 00:03:44.206 A:middle
try to insert your
button, break some of them,

00:03:44.576 --> 00:03:46.646 A:middle
and then reassemble it,
hopefully it all works out.

00:03:47.986 --> 00:03:49.646 A:middle
There is a more maintainable
way,

00:03:49.726 --> 00:03:53.236 A:middle
as you've guessed,
that is Stack View.

00:03:53.456 --> 00:03:57.766 A:middle
New to iOS 9 and made even
better than before on the Mac,

00:03:58.516 --> 00:04:00.976 A:middle
Stack View allows you to
arrange your views linearly.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:58.516 --> 00:04:00.976 A:middle
Stack View allows you to
arrange your views linearly.

00:04:01.536 --> 00:04:04.436 A:middle
Stack View has parity
across both platforms.

00:04:05.056 --> 00:04:08.266 A:middle
It is built on top
of Auto Layout.

00:04:10.006 --> 00:04:13.906 A:middle
It manages the constraints
of your subviews for you

00:04:13.906 --> 00:04:15.786 A:middle
so you don't have
to, and it works well

00:04:15.786 --> 00:04:16.946 A:middle
when you add user constraints.

00:04:17.456 --> 00:04:22.516 A:middle
You can have a horizontal or
vertical orientation or axis,

00:04:23.806 --> 00:04:25.546 A:middle
as well as other
customizable properties,

00:04:25.966 --> 00:04:27.076 A:middle
such as the alignment.

00:04:28.196 --> 00:04:30.466 A:middle
Here you have a whole bunch
of horizontal stack views,

00:04:30.466 --> 00:04:32.536 A:middle
and here are examples
of top, center, bottom,

00:04:32.746 --> 00:04:33.766 A:middle
and baseline alignments.

00:04:33.766 --> 00:04:35.036 A:middle
There are other alignments
as well.

00:04:35.846 --> 00:04:39.016 A:middle
As well as vertical stack views.

00:04:39.486 --> 00:04:42.876 A:middle
Here are examples of fill,
leading, center, and trailing.

00:04:44.066 --> 00:04:47.106 A:middle
Now, one of the properties I
want to draw your attention

00:04:47.106 --> 00:04:49.396 A:middle
to is really cool,
distribution property,

00:04:49.396 --> 00:04:51.246 A:middle
and this one is also
new to NSStackView

00:04:51.366 --> 00:04:53.176 A:middle
as well as it's on iOS 9.

00:04:54.546 --> 00:04:57.826 A:middle
This allows you to
distribute along the axis,

00:04:58.816 --> 00:05:02.196 A:middle
and you can do some pretty
complex distribution behaviors


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.816 --> 00:05:02.196 A:middle
and you can do some pretty
complex distribution behaviors

00:05:02.446 --> 00:05:04.336 A:middle
without having to deal
with any constraints.

00:05:05.086 --> 00:05:06.466 A:middle
Here we have examples of fill

00:05:07.246 --> 00:05:08.566 A:middle
so that we are filling
the stack view.

00:05:09.336 --> 00:05:12.106 A:middle
Fill equally, fill
proportionally, which is based

00:05:12.106 --> 00:05:15.346 A:middle
on the content size of the
subviews, and equal spacing.

00:05:15.476 --> 00:05:17.396 A:middle
And there are other
distribution options as well.

00:05:18.066 --> 00:05:20.656 A:middle
So we can build -- Thank you.

00:05:21.516 --> 00:05:25.736 A:middle
[ Applause ]

00:05:26.236 --> 00:05:28.396 A:middle
We can build this out of
stack views, so I am going

00:05:28.396 --> 00:05:29.976 A:middle
to give you a demo inside
of Interface Builder.

00:05:41.066 --> 00:05:41.216 A:middle
All right.

00:05:41.596 --> 00:05:42.676 A:middle
So I've got Xcode loaded.

00:05:43.426 --> 00:05:45.976 A:middle
With a view controller,
and to set up my scene,

00:05:45.976 --> 00:05:47.786 A:middle
all I have done is dragged
a whole bunch of controls

00:05:47.786 --> 00:05:50.416 A:middle
and images out from the Object
Library and Media Library.

00:05:50.416 --> 00:05:52.356 A:middle
You can see they are
all top-level labels,

00:05:52.356 --> 00:05:53.126 A:middle
buttons, and images.

00:05:53.996 --> 00:05:57.566 A:middle
Now we are going to go ahead and
put these things into a layout.

00:05:58.506 --> 00:06:02.696 A:middle
So first I am going to select
my button and my labels.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:58.506 --> 00:06:02.696 A:middle
So first I am going to select
my button and my labels.

00:06:03.086 --> 00:06:04.986 A:middle
Then I am going to draw your
attention to this new button

00:06:05.046 --> 00:06:07.926 A:middle
on the IB canvas, the
Embed in Stack View button.

00:06:08.436 --> 00:06:11.696 A:middle
When you click on it,
it's created my stack view

00:06:11.816 --> 00:06:14.636 A:middle
and affirmed my alignment
and my axis.

00:06:15.516 --> 00:06:20.806 A:middle
[ Applause ]

00:06:21.306 --> 00:06:23.166 A:middle
Now we are going to
tune the properties.

00:06:23.496 --> 00:06:29.206 A:middle
You can see in the
Property Inspector up here

00:06:29.406 --> 00:06:32.266 A:middle
that we have the axis,
alignment, distribution,

00:06:32.266 --> 00:06:33.566 A:middle
and spacing as some
of the options,

00:06:33.566 --> 00:06:35.356 A:middle
and you'll notice
there's also a plus here.

00:06:35.746 --> 00:06:38.596 A:middle
You can make this an
iOS 9 size classable.

00:06:40.576 --> 00:06:44.116 A:middle
We are going to go ahead
and adjust the alignment,

00:06:44.116 --> 00:06:47.956 A:middle
and for the people who have
dealt with constraints before

00:06:47.956 --> 00:06:50.606 A:middle
in Auto Layout, you will
note that all we need

00:06:50.606 --> 00:06:53.646 A:middle
to do now is switch it
from trailing to leading.

00:06:55.066 --> 00:06:56.176 A:middle
Not touching any constraints.

00:06:57.066 --> 00:07:00.276 A:middle
Let's go ahead and stack a whole
bunch of other views in here.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:57.066 --> 00:07:00.276 A:middle
Let's go ahead and stack a whole
bunch of other views in here.

00:07:00.276 --> 00:07:03.546 A:middle
I am going to go ahead
and click on my ratings,

00:07:04.516 --> 00:07:08.146 A:middle
stack them to horizontal --
create a horizontal stack view.

00:07:08.146 --> 00:07:10.136 A:middle
I am going to go
ahead and drag that up

00:07:10.656 --> 00:07:11.586 A:middle
into my first stack view.

00:07:12.676 --> 00:07:16.486 A:middle
Now I am going to select
the icon and the header,

00:07:17.056 --> 00:07:20.156 A:middle
click the Stack View button
for that, and then finally,

00:07:20.696 --> 00:07:24.716 A:middle
the top three controls, and
my layout is nearly there.

00:07:26.516 --> 00:07:31.546 A:middle
[ Applause ]

00:07:32.046 --> 00:07:33.936 A:middle
Now let's go ahead and
tune some properties.

00:07:33.936 --> 00:07:35.636 A:middle
We have the top-level
stack views selected.

00:07:36.466 --> 00:07:40.346 A:middle
I am going to go ahead and
first adjust this alignment not

00:07:40.346 --> 00:07:43.656 A:middle
to center but to fill,
so it's really filled

00:07:43.656 --> 00:07:44.766 A:middle
across the entire stack view.

00:07:45.206 --> 00:07:46.866 A:middle
And I am also going
to spread it out so

00:07:46.866 --> 00:07:49.256 A:middle
that it's a little more --
it's got a little more spacing.

00:07:49.616 --> 00:07:54.386 A:middle
Let's say about 20
points, maybe 25.

00:07:57.056 --> 00:08:00.516 A:middle
Then we will also add some
spacing into the stack view


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:57.056 --> 00:08:00.516 A:middle
Then we will also add some
spacing into the stack view

00:08:00.516 --> 00:08:03.336 A:middle
with the labels and the buttons,
so I am going to go ahead

00:08:03.336 --> 00:08:05.646 A:middle
and click on that and
change its spacing,

00:08:05.646 --> 00:08:08.176 A:middle
and we will give it
about five points.

00:08:08.596 --> 00:08:12.786 A:middle
We also want to add spacing
between the icon and the header,

00:08:13.096 --> 00:08:14.456 A:middle
and I could go ahead and select

00:08:14.456 --> 00:08:16.726 A:middle
that stack view using
the document outline.

00:08:17.436 --> 00:08:21.646 A:middle
Or I can hold down
Control-Shift on my keyboard,

00:08:22.506 --> 00:08:26.296 A:middle
click over the icon, and get
all the views underneath my

00:08:26.296 --> 00:08:26.726 A:middle
mouse click.

00:08:27.266 --> 00:08:31.106 A:middle
So we will click on the
closest stack view to me,

00:08:31.106 --> 00:08:36.046 A:middle
the horizontal one, and increase
that to about 25 points.

00:08:36.556 --> 00:08:37.496 A:middle
Let's go ahead and run this.

00:08:42.046 --> 00:08:45.086 A:middle
You can see it's got my layout,
but we haven't positioned it

00:08:45.086 --> 00:08:46.606 A:middle
yet in the superview,
and this is

00:08:46.606 --> 00:08:47.706 A:middle
where we are going
to use constraints.

00:08:48.996 --> 00:08:52.536 A:middle
I am going to go ahead and
take the stack view and put it

00:08:52.536 --> 00:08:54.476 A:middle
against the top and
leading margins.

00:08:55.146 --> 00:08:57.976 A:middle
Then I am going to draw your
attention to this other button

00:08:57.976 --> 00:09:03.796 A:middle
on the IB canvas that brings
up the Pin menu and brings


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:57.976 --> 00:09:03.796 A:middle
on the IB canvas that brings
up the Pin menu and brings

00:09:03.796 --> 00:09:05.466 A:middle
up a pop-up for being able

00:09:05.616 --> 00:09:08.446 A:middle
to add your leading
and top constraints.

00:09:08.736 --> 00:09:10.246 A:middle
And when I hit the Add button,

00:09:10.856 --> 00:09:13.096 A:middle
it's added the constraints
for me.

00:09:13.406 --> 00:09:16.286 A:middle
Now, we also want to add to
the bottom and the trailing,

00:09:16.836 --> 00:09:17.656 A:middle
but there's another trick

00:09:17.656 --> 00:09:19.756 A:middle
in Interface Builder
that you can do.

00:09:19.756 --> 00:09:21.546 A:middle
You can control-drag
between two views.

00:09:21.546 --> 00:09:23.246 A:middle
So I am going to
control-drag from the stack view

00:09:23.846 --> 00:09:26.736 A:middle
to its superview and
select Trailing Space

00:09:26.736 --> 00:09:27.546 A:middle
to Container Margin.

00:09:28.426 --> 00:09:29.626 A:middle
That's going to add
my constraints.

00:09:29.726 --> 00:09:33.386 A:middle
For those already familiar
with the menu, check it out,

00:09:33.386 --> 00:09:36.426 A:middle
there are a few new
other features in there.

00:09:36.626 --> 00:09:39.836 A:middle
We are going to add another
constraint to the bottom,

00:09:40.486 --> 00:09:42.006 A:middle
vertical spacing to
bottom layout guide.

00:09:42.836 --> 00:09:47.086 A:middle
Now I am going to
double-click on my constraints,

00:09:47.316 --> 00:09:49.846 A:middle
set their constants so they
are flush against the edges,

00:09:50.436 --> 00:09:56.966 A:middle
and now when we run it, you
can see it fits my superview.

00:09:57.526 --> 00:09:59.046 A:middle
Something isn't quite right yet.

00:09:59.346 --> 00:10:01.056 A:middle
Take a look at that
segmented control.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.346 --> 00:10:01.056 A:middle
Take a look at that
segmented control.

00:10:01.426 --> 00:10:02.456 A:middle
It's a little too stretched.

00:10:02.676 --> 00:10:03.476 A:middle
What is going on there?

00:10:03.776 --> 00:10:05.976 A:middle
In fact, if we rotate this,
it's a little too squished.

00:10:06.316 --> 00:10:08.316 A:middle
[ Laughter ]

00:10:08.616 --> 00:10:13.176 A:middle
At the top-level stack view,
it's looking at its subviews,

00:10:13.176 --> 00:10:14.846 A:middle
and all of them have
the same priorities,

00:10:15.116 --> 00:10:17.046 A:middle
the same content-hugging
priority

00:10:17.106 --> 00:10:18.646 A:middle
and content
compression-resistance

00:10:18.646 --> 00:10:19.166 A:middle
priorities.

00:10:19.676 --> 00:10:22.606 A:middle
We will talk more about that
later on in the session,

00:10:22.606 --> 00:10:25.046 A:middle
but for what you need to
know for now is that we need

00:10:25.046 --> 00:10:27.916 A:middle
to tell Stack View which
one is going to win.

00:10:28.036 --> 00:10:30.336 A:middle
All I have to do is select
the segmented control,

00:10:30.966 --> 00:10:34.106 A:middle
go into the sizing inspector,
choose the priority section,

00:10:35.186 --> 00:10:37.776 A:middle
go ahead and adjust my
hugging priority because I want

00:10:38.086 --> 00:10:40.306 A:middle
to have the segmented
control hug tighter,

00:10:41.546 --> 00:10:44.356 A:middle
change it from 250 to 260.

00:10:44.706 --> 00:10:48.436 A:middle
You only need to go a little
bit above its default.

00:10:48.506 --> 00:10:52.576 A:middle
Likewise, I wanted to resist
compression and not get swished,

00:10:52.856 --> 00:10:58.126 A:middle
so I am going to also increase
my vertical content compression

00:10:58.126 --> 00:11:00.776 A:middle
resistance from 750 to 760.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.126 --> 00:11:00.776 A:middle
resistance from 750 to 760.

00:11:01.326 --> 00:11:06.076 A:middle
Now when we run it, it's
looking much better.

00:11:07.816 --> 00:11:09.476 A:middle
Now remember - -- thank you.

00:11:09.536 --> 00:11:09.876 A:middle
Thank you.

00:11:10.516 --> 00:11:13.636 A:middle
[ Applause ]

00:11:14.136 --> 00:11:15.716 A:middle
Remember the original problem?

00:11:16.596 --> 00:11:18.446 A:middle
Our boss wanted us
to add a new control.

00:11:19.386 --> 00:11:21.176 A:middle
So here's what you do.

00:11:21.216 --> 00:11:24.276 A:middle
You tell your boss, it's okay.

00:11:24.356 --> 00:11:24.846 A:middle
I've got it.

00:11:25.186 --> 00:11:28.226 A:middle
Then you go back to your
desk, open up the storyboard,

00:11:29.786 --> 00:11:30.786 A:middle
search for the control --

00:11:30.786 --> 00:11:31.876 A:middle
in this case we will
use a button --

00:11:32.536 --> 00:11:34.306 A:middle
drag it out from
the object library,

00:11:34.786 --> 00:11:38.076 A:middle
and target which stack view
you want to drop it in.

00:11:39.176 --> 00:11:40.076 A:middle
Then you go grab a coffee.

00:11:41.516 --> 00:11:48.646 A:middle
[ Laughter and Applause ]

00:11:49.146 --> 00:11:52.676 A:middle
I would also like to point out
that Stack View handles Hidden

00:11:52.676 --> 00:11:54.196 A:middle
for its subviews really nicely.

00:11:54.196 --> 00:11:57.676 A:middle
You can set it programmatically
or through Interface Builder.

00:11:57.976 --> 00:12:02.376 A:middle
It's like it collapses or is
taken out of the view hierarchy


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:57.976 --> 00:12:02.376 A:middle
It's like it collapses or is
taken out of the view hierarchy

00:12:02.376 --> 00:12:03.986 A:middle
but is still owned
by Stack View.

00:12:04.576 --> 00:12:08.476 A:middle
So if I mark Hidden, you can see
everything adjusts accordingly.

00:12:08.806 --> 00:12:09.976 A:middle
We think you will
find this useful.

00:12:10.516 --> 00:12:14.666 A:middle
[ Applause ]

00:12:15.166 --> 00:12:17.166 A:middle
That is the demo of Stack View.

00:12:18.516 --> 00:12:22.806 A:middle
[ Applause ]

00:12:23.306 --> 00:12:25.886 A:middle
I also wanted to point out that
animation is really easy, too.

00:12:27.016 --> 00:12:28.046 A:middle
This is what it might look like.

00:12:29.566 --> 00:12:34.266 A:middle
Use a UIView Animate with
Duration block and just go ahead

00:12:34.266 --> 00:12:35.856 A:middle
and modify the Hidden
property of the subviews,

00:12:35.856 --> 00:12:36.966 A:middle
and we specially handle those.

00:12:37.156 --> 00:12:39.886 A:middle
Or you can put other
animatable properties in there

00:12:39.886 --> 00:12:42.866 A:middle
for adjustment, including
properties

00:12:42.866 --> 00:12:43.866 A:middle
on the stack view itself.

00:12:44.196 --> 00:12:47.266 A:middle
Try, for instance, adjusting
the axis so it's going

00:12:47.266 --> 00:12:48.476 A:middle
between horizontal and vertical,

00:12:48.766 --> 00:12:50.006 A:middle
and you will see
something pretty cool.

00:12:51.516 --> 00:12:55.766 A:middle
[ Applause ]

00:12:56.266 --> 00:12:59.216 A:middle
And of course, this is what
it looks like on Cocoa.

00:12:59.476 --> 00:13:02.946 A:middle
Use NSAnimationContext,
run animation group.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.476 --> 00:13:02.946 A:middle
Use NSAnimationContext,
run animation group.

00:13:05.256 --> 00:13:06.616 A:middle
So what have we seen?

00:13:06.916 --> 00:13:08.496 A:middle
Let's take a look
at the API first.

00:13:09.436 --> 00:13:11.626 A:middle
It's simple, familiar,
straightforward.

00:13:12.236 --> 00:13:13.866 A:middle
You have your axis
or orientation,

00:13:13.996 --> 00:13:16.686 A:middle
describing whether the stack
view is horizontal or vertical.

00:13:17.236 --> 00:13:18.866 A:middle
We have seen the
distribution, alignment,

00:13:19.216 --> 00:13:20.986 A:middle
and spacing properties.

00:13:21.636 --> 00:13:22.876 A:middle
And then you have
methods for being able

00:13:22.876 --> 00:13:24.476 A:middle
to add new things to be stacked.

00:13:24.636 --> 00:13:25.806 A:middle
Add and arrange subviews.

00:13:25.866 --> 00:13:27.876 A:middle
There's also an insert
and remove.

00:13:28.556 --> 00:13:31.006 A:middle
I want to draw your attention to
the Arrange Subviews property.

00:13:32.296 --> 00:13:37.916 A:middle
This property returns you a
subset of all of the views

00:13:38.856 --> 00:13:40.256 A:middle
that are owned by
the stack view.

00:13:40.606 --> 00:13:43.286 A:middle
It returns you the views that
are currently being stacked.

00:13:44.886 --> 00:13:47.776 A:middle
What that implies is
that you can have views

00:13:47.776 --> 00:13:50.476 A:middle
that are not being stacked by
Stack View, such as decorators

00:13:50.476 --> 00:13:52.776 A:middle
or overlays, and have
a clean view hierarchy,

00:13:52.776 --> 00:13:56.026 A:middle
and we think you will
find that useful.

00:13:56.276 --> 00:13:59.996 A:middle
All you need to do is call Add
Subviews for those other cases.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:01.366 --> 00:14:02.206 A:middle
What have we seen here?

00:14:03.456 --> 00:14:06.816 A:middle
Stack View is easy to
build, easy to maintain,

00:14:08.196 --> 00:14:10.836 A:middle
we believe you are going to
compose a lot of these things,

00:14:11.596 --> 00:14:14.326 A:middle
and because Stack
View is about layout

00:14:15.016 --> 00:14:20.016 A:middle
and therefore it doesn't need
to render its own background,

00:14:20.286 --> 00:14:21.936 A:middle
we've been able to do
some optimizations.

00:14:22.156 --> 00:14:24.926 A:middle
So we have a special Transform
Layer class that doesn't render

00:14:24.926 --> 00:14:28.096 A:middle
on its own that can
make Stack View run fast

00:14:28.216 --> 00:14:30.156 A:middle
and even more performant
than your regular views.

00:14:30.696 --> 00:14:31.976 A:middle
So it is lightweight.

00:14:33.516 --> 00:14:38.296 A:middle
[ Applause ]

00:14:38.796 --> 00:14:41.766 A:middle
We went from an example
with many constraints

00:14:42.446 --> 00:14:45.566 A:middle
and a little bit of difficulty
maintaining it down to just four

00:14:46.476 --> 00:14:48.286 A:middle
and a bunch of stack views,
and this reads a lot nicer.

00:14:49.556 --> 00:14:52.826 A:middle
We feel that you can build
most of your user interfaces

00:14:53.266 --> 00:14:56.336 A:middle
with stack views, so we
recommend start with Stack View

00:14:56.836 --> 00:14:58.156 A:middle
and use constraints as needed.

00:14:58.666 --> 00:14:59.716 A:middle
And that is Stack View.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:00.516 --> 00:15:05.556 A:middle
[ Applause ]

00:15:06.056 --> 00:15:09.886 A:middle
Now, for the cases where you
need more than just Stack View,

00:15:10.846 --> 00:15:11.996 A:middle
you are going to have to --

00:15:11.996 --> 00:15:14.796 A:middle
I would like to invite up
my friend Kasia to talk

00:15:14.796 --> 00:15:16.246 A:middle
about feeding the layout engine.

00:15:17.516 --> 00:15:21.826 A:middle
[ Applause ]

00:15:22.326 --> 00:15:22.576 A:middle
&gt;&gt; KASIA WAWER: Hi.

00:15:22.916 --> 00:15:23.746 A:middle
My name's Kasia.

00:15:23.776 --> 00:15:26.766 A:middle
I am on the iOS Keyboards Team,
and I am here to talk to you

00:15:26.766 --> 00:15:28.966 A:middle
about proper care and
feeding of your layout engine.

00:15:28.966 --> 00:15:32.016 A:middle
It's a finicky little critter,
but it wants to do right by you.

00:15:32.016 --> 00:15:34.276 A:middle
If you treat it correctly,
it will treat you correctly.

00:15:34.966 --> 00:15:37.306 A:middle
As you have seen over of
the course of the week,

00:15:37.306 --> 00:15:39.866 A:middle
we have these new adaptive
environments as well as all

00:15:39.866 --> 00:15:43.126 A:middle
of the different iPhone
screen sizes we have.

00:15:43.126 --> 00:15:46.266 A:middle
It's critical to plan you
layout property to work

00:15:46.266 --> 00:15:47.906 A:middle
across all these environments

00:15:47.906 --> 00:15:51.026 A:middle
and not spend too
much time iterating

00:15:51.026 --> 00:15:51.956 A:middle
for every single screen.

00:15:52.386 --> 00:15:54.036 A:middle
So most people, when they are
thinking about constraints,

00:15:54.036 --> 00:15:55.756 A:middle
think of them sort of like this.

00:15:55.756 --> 00:15:58.146 A:middle
You create some views, you
create some constraints

00:15:58.146 --> 00:16:01.996 A:middle
in different ways, and you kind
of throw them into a black hole.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:58.146 --> 00:16:01.996 A:middle
in different ways, and you kind
of throw them into a black hole.

00:16:01.996 --> 00:16:02.826 A:middle
Something happens.

00:16:03.486 --> 00:16:04.816 A:middle
And a layout pops
out the other end.

00:16:05.196 --> 00:16:08.456 A:middle
Hopefully yours, possibly not.

00:16:08.756 --> 00:16:11.626 A:middle
So what I really want to do
today is try and clear up some

00:16:11.626 --> 00:16:13.866 A:middle
of this mystery here and get it

00:16:13.866 --> 00:16:16.186 A:middle
so you are hitting
your layout every time.

00:16:16.186 --> 00:16:18.486 A:middle
And we are going to start
with changing constraints.

00:16:19.756 --> 00:16:22.146 A:middle
When I talk about changing
constraints, I am mostly talking

00:16:22.146 --> 00:16:24.316 A:middle
about activating and
deactivating constraints.

00:16:24.926 --> 00:16:26.776 A:middle
Those of you who have
used Auto Layout before

00:16:26.776 --> 00:16:29.446 A:middle
and for a while may remember
we originally had the concept

00:16:29.446 --> 00:16:31.926 A:middle
of adding and removing
constraints to and from views.

00:16:32.356 --> 00:16:33.636 A:middle
Well, don't do that anymore.

00:16:33.726 --> 00:16:35.776 A:middle
Activate and deactivate
is much better.

00:16:35.776 --> 00:16:38.786 A:middle
It's a class method on NSLayout
constraint for both of them,

00:16:39.366 --> 00:16:42.706 A:middle
and there are some
really big benefits

00:16:42.706 --> 00:16:44.026 A:middle
to using activate
and deactivate.

00:16:44.366 --> 00:16:45.946 A:middle
Constraints find
their own container.

00:16:45.946 --> 00:16:47.156 A:middle
They are more efficient.

00:16:47.656 --> 00:16:49.176 A:middle
And you don't need
to own all the views

00:16:49.176 --> 00:16:50.586 A:middle
in your layout in
order to use them.

00:16:51.316 --> 00:16:53.986 A:middle
So this all really boils
down to just don't use add

00:16:53.986 --> 00:16:54.766 A:middle
and remove anymore.

00:16:55.546 --> 00:16:56.876 A:middle
Use activate and deactivate.

00:16:56.876 --> 00:17:00.656 A:middle
So there are a few other
things to keep in mind


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:56.876 --> 00:17:00.656 A:middle
So there are a few other
things to keep in mind

00:17:01.006 --> 00:17:03.356 A:middle
when you are thinking about
changing your constraints.

00:17:04.536 --> 00:17:07.366 A:middle
Number one, never
deactivate everything

00:17:07.366 --> 00:17:08.715 A:middle
in self.view.constraints.

00:17:09.205 --> 00:17:10.726 A:middle
If anybody has tried this,

00:17:10.726 --> 00:17:13.026 A:middle
you've probably seen some
really odd things happen.

00:17:13.636 --> 00:17:15.705 A:middle
Not all the constraints in
that array belong to you,

00:17:16.556 --> 00:17:18.616 A:middle
such as the ones the view
uses to set itself up,

00:17:18.616 --> 00:17:20.656 A:middle
so weird things are
going to happen.

00:17:21.246 --> 00:17:22.326 A:middle
Just please don't.

00:17:22.856 --> 00:17:24.306 A:middle
We will see why in a moment.

00:17:25.086 --> 00:17:27.665 A:middle
What you need to do instead is
keep references to constraints

00:17:27.665 --> 00:17:30.556 A:middle
that you may need to change
later, either in an array

00:17:30.556 --> 00:17:32.586 A:middle
of constraints or as
individual constraints

00:17:32.686 --> 00:17:35.046 A:middle
so that you can manage things
exactly the way you want to.

00:17:35.146 --> 00:17:37.376 A:middle
So let's take a look at
changing constraints.

00:17:44.046 --> 00:17:47.166 A:middle
So I have here an iPad app
that I've made with a bunch

00:17:47.166 --> 00:17:52.196 A:middle
of planets, and it's
been set up for iPad

00:17:52.196 --> 00:17:54.126 A:middle
and it also has an iPhone mode,

00:17:54.126 --> 00:17:55.976 A:middle
so it should work well
with multitasking.

00:17:56.616 --> 00:17:59.016 A:middle
Except that I am not actually
removing any constraints,

00:17:59.616 --> 00:18:02.536 A:middle
so when I move from my nice
vertical compact layout back


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.616 --> 00:18:02.536 A:middle
so when I move from my nice
vertical compact layout back

00:18:02.536 --> 00:18:04.906 A:middle
to my regular layout,
I have lost all

00:18:04.906 --> 00:18:06.566 A:middle
of my nice curve
that I had before.

00:18:07.316 --> 00:18:09.346 A:middle
So the first thing I might
be tempted to do to try

00:18:09.346 --> 00:18:12.176 A:middle
to rectify this is to remove all

00:18:12.176 --> 00:18:15.976 A:middle
of the constraints
in the superview.

00:18:19.456 --> 00:18:21.016 A:middle
And when I do that, I
am also going to need

00:18:21.016 --> 00:18:22.736 A:middle
to reactivate any
shared constraints.

00:18:27.046 --> 00:18:29.946 A:middle
But you will see all sorts of
exciting things happen here

00:18:30.116 --> 00:18:31.636 A:middle
if you try to take
this approach.

00:18:32.566 --> 00:18:33.846 A:middle
So here's my regular
layout again.

00:18:33.846 --> 00:18:34.306 A:middle
That's nice.

00:18:34.916 --> 00:18:36.856 A:middle
And here it is still nice.

00:18:38.836 --> 00:18:40.526 A:middle
Hmm. That's not good.

00:18:41.116 --> 00:18:43.586 A:middle
And if I move back to
the regular layout, well,

00:18:43.586 --> 00:18:46.116 A:middle
I didn't actually want to make
the planets quite that giant,

00:18:46.506 --> 00:18:47.916 A:middle
so this is not really
what I want to do.

00:18:48.576 --> 00:18:49.906 A:middle
So how do we do this properly?

00:18:49.966 --> 00:18:52.866 A:middle
I am going to take a moment to
grab this code so you don't have

00:18:52.866 --> 00:18:55.696 A:middle
to watch me type it all out.

00:18:56.116 --> 00:18:58.126 A:middle
So in your trait collection
did change, what you want

00:18:58.126 --> 00:19:02.596 A:middle
to do is check and see with each
environment whether the other


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:58.126 --> 00:19:02.596 A:middle
to do is check and see with each
environment whether the other

00:19:02.596 --> 00:19:04.716 A:middle
set of constraints that you
might need to change are active.

00:19:05.016 --> 00:19:07.156 A:middle
Here I have two arrays
with eight constraints each

00:19:07.466 --> 00:19:10.576 A:middle
that differentiate between
that vertical alignment

00:19:10.916 --> 00:19:12.736 A:middle
with the planets.

00:19:12.946 --> 00:19:14.716 A:middle
So if I check and make
sure that that's active,

00:19:14.986 --> 00:19:17.586 A:middle
remove the ones -- or deactivate
the ones I don't want anymore

00:19:17.586 --> 00:19:23.366 A:middle
and activate the new ones,
it should look much better.

00:19:23.526 --> 00:19:29.326 A:middle
Regular. Still regular.

00:19:30.626 --> 00:19:33.696 A:middle
Compact. And regular again.

00:19:34.156 --> 00:19:35.556 A:middle
So that's where I
actually want it to be.

00:19:36.516 --> 00:19:38.546 A:middle
[ Applause ]

00:19:39.046 --> 00:19:39.766 A:middle
Oh, thank you.

00:19:40.556 --> 00:19:42.546 A:middle
So a cool thing in
Auto Layout is

00:19:42.546 --> 00:19:44.846 A:middle
that you can actually animate
constraint changes as well.

00:19:45.336 --> 00:19:49.466 A:middle
Here I have a double-tap gesture
to animate between this regular

00:19:49.466 --> 00:19:53.166 A:middle
and compact layout by dropping
that activation and deactivation

00:19:53.166 --> 00:19:56.736 A:middle
into an animation block
along with a call of layout

00:19:56.736 --> 00:19:58.576 A:middle
if needed to the superview.

00:19:59.066 --> 00:20:02.756 A:middle
So you'll see if I double-tap,
I can move really nicely


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.066 --> 00:20:02.756 A:middle
So you'll see if I double-tap,
I can move really nicely

00:20:03.016 --> 00:20:05.846 A:middle
between the set of views with
just a couple lines of code.

00:20:05.936 --> 00:20:09.946 A:middle
And if you want to get fancy,
you can keep references to all

00:20:09.946 --> 00:20:12.976 A:middle
of those individual constraints
and use keyframe animations

00:20:13.636 --> 00:20:16.856 A:middle
to really kind of spice
things up in your app.

00:20:17.956 --> 00:20:19.546 A:middle
So that's activating

00:20:19.546 --> 00:20:21.466 A:middle
and deactivating
constraints properly.

00:20:21.586 --> 00:20:24.806 A:middle
So what do we know about
changing constraints?

00:20:25.436 --> 00:20:26.176 A:middle
Well, number one,

00:20:26.286 --> 00:20:28.346 A:middle
never deactivate
self.view.constraints.

00:20:28.966 --> 00:20:30.016 A:middle
We know that very well now.

00:20:30.436 --> 00:20:32.046 A:middle
Keep references to
constraints are going

00:20:32.046 --> 00:20:33.096 A:middle
to change in the future.

00:20:33.456 --> 00:20:35.446 A:middle
It will make everything
work better,

00:20:35.446 --> 00:20:36.856 A:middle
and you can do cool
things like animation.

00:20:36.856 --> 00:20:39.686 A:middle
And you can also animate
changing constraints

00:20:40.106 --> 00:20:42.166 A:middle
by just dropping it into
a View Animation block,

00:20:42.536 --> 00:20:43.136 A:middle
which is pretty cool.

00:20:43.136 --> 00:20:45.596 A:middle
So we are still at
the kind of basic part

00:20:45.596 --> 00:20:47.586 A:middle
of building our layout,
where we still have our views

00:20:47.586 --> 00:20:49.546 A:middle
and constraints and are putting
them into the layout engine.

00:20:50.106 --> 00:20:52.326 A:middle
But if we give the layout
engine more information,

00:20:52.376 --> 00:20:56.306 A:middle
we can get a lot better
results that work properly

00:20:56.306 --> 00:20:57.806 A:middle
in all these different
adaptive environments.

00:20:59.366 --> 00:21:02.366 A:middle
So we have kind of positioning
for all of our constraints,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.366 --> 00:21:02.366 A:middle
So we have kind of positioning
for all of our constraints,

00:21:02.366 --> 00:21:03.646 A:middle
and now I want to
talk about size.

00:21:04.886 --> 00:21:06.946 A:middle
So mystery number
three, view sizing.

00:21:08.326 --> 00:21:10.026 A:middle
There are a couple different
ways to size your views,

00:21:10.246 --> 00:21:11.616 A:middle
and you no longer have to say,

00:21:11.666 --> 00:21:14.746 A:middle
I want a view that's 200
points wide, 300 points tall.

00:21:15.316 --> 00:21:17.406 A:middle
Instead, you can
use different ways

00:21:17.406 --> 00:21:21.276 A:middle
to create your constraints
adaptively to, you know,

00:21:21.376 --> 00:21:23.116 A:middle
work in all of our various
environments we have

00:21:23.116 --> 00:21:26.726 A:middle
for you now, and we start with
intrinsic content size on that.

00:21:27.356 --> 00:21:29.666 A:middle
Many views have this, such
as labels and image views,

00:21:30.196 --> 00:21:32.626 A:middle
and it's basically the
size that the view would be

00:21:32.626 --> 00:21:36.216 A:middle
if it was just right
around its content.

00:21:36.216 --> 00:21:38.656 A:middle
And the engine looks at this
and tries to solve your layout

00:21:39.186 --> 00:21:44.086 A:middle
at this size, and it will
actually create the internal

00:21:44.086 --> 00:21:45.086 A:middle
size constraints for you.

00:21:45.806 --> 00:21:48.956 A:middle
But it can't guarantee the
layout size because of stuff

00:21:48.956 --> 00:21:51.436 A:middle
like adaptivity, it needs
to be able to stretch

00:21:51.436 --> 00:21:52.536 A:middle
and shrink views a little bit.

00:21:52.916 --> 00:21:55.586 A:middle
So around things like this,
the user won't see it,

00:21:55.706 --> 00:21:56.976 A:middle
but you might have
a few extra points

00:21:56.976 --> 00:21:57.896 A:middle
of padding here and there.

00:21:58.906 --> 00:22:02.126 A:middle
So you can use this in order
to lay out your views in a way


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.906 --> 00:22:02.126 A:middle
So you can use this in order
to lay out your views in a way

00:22:02.126 --> 00:22:04.076 A:middle
that means you don't
have to specify

00:22:04.076 --> 00:22:05.926 A:middle
that this label is this wide.

00:22:06.206 --> 00:22:07.976 A:middle
It will simply be as
wide as its content.

00:22:09.006 --> 00:22:11.136 A:middle
But if you need to define
a particular view size,

00:22:11.976 --> 00:22:12.956 A:middle
start with constraints.

00:22:13.916 --> 00:22:15.716 A:middle
It's very easy to
do things like,

00:22:16.076 --> 00:22:18.176 A:middle
this view should be half
the width of my superview.

00:22:18.666 --> 00:22:19.876 A:middle
This one should be
three-quarters

00:22:19.876 --> 00:22:20.776 A:middle
of the height of my superview.

00:22:21.136 --> 00:22:22.736 A:middle
This one should be equal
to the view next to it.

00:22:23.196 --> 00:22:26.486 A:middle
You can, however, override
that intrinsic content size

00:22:26.556 --> 00:22:27.706 A:middle
if you absolutely need to.

00:22:27.926 --> 00:22:30.196 A:middle
There are only a couple reasons
you might need to do that.

00:22:30.796 --> 00:22:33.086 A:middle
One is if you can't get
the size information

00:22:33.086 --> 00:22:33.786 A:middle
from the constraints.

00:22:35.026 --> 00:22:37.536 A:middle
And another might be if you
are using custom drawing

00:22:37.536 --> 00:22:37.996 A:middle
in your view.

00:22:38.286 --> 00:22:40.406 A:middle
But a lot of times you can still
just set up the constraints

00:22:40.806 --> 00:22:43.416 A:middle
for that view, and you
won't have to do anything

00:22:43.416 --> 00:22:45.396 A:middle
with overriding intrinsic
content size.

00:22:45.936 --> 00:22:47.766 A:middle
If you do override
intrinsic content size,

00:22:47.946 --> 00:22:50.086 A:middle
you are responsible
for invalidating it

00:22:50.486 --> 00:22:53.246 A:middle
in case the slide class
changes or the text changes

00:22:53.246 --> 00:22:55.666 A:middle
that you've got dynamic
text, localization,

00:22:55.666 --> 00:22:59.616 A:middle
or anything like that that
may cause your view to need

00:22:59.616 --> 00:23:01.126 A:middle
to recalculate its
internal size.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.616 --> 00:23:01.126 A:middle
to recalculate its
internal size.

00:23:02.196 --> 00:23:05.406 A:middle
So let's look at setting
up a view with constraints

00:23:05.406 --> 00:23:07.466 A:middle
without using any
particular point sizes,

00:23:07.616 --> 00:23:08.546 A:middle
all in relationships.

00:23:09.096 --> 00:23:10.346 A:middle
Here we have a standard
image view.

00:23:11.016 --> 00:23:13.136 A:middle
So what I want this to
take up most of my view,

00:23:13.766 --> 00:23:16.876 A:middle
so I want the width to be
equal to three-quarters

00:23:16.876 --> 00:23:18.426 A:middle
of the view that it's in.

00:23:18.626 --> 00:23:20.446 A:middle
That means that every
environment it's in,

00:23:20.776 --> 00:23:22.406 A:middle
the width will be
three-quarters of that view.

00:23:22.716 --> 00:23:23.666 A:middle
So I set that up first.

00:23:24.596 --> 00:23:27.986 A:middle
And then I can take that
proportion that I now have

00:23:28.066 --> 00:23:31.366 A:middle
from calculating from the
superviews with and multiply it

00:23:31.366 --> 00:23:33.046 A:middle
by one and a half
to get the height.

00:23:33.046 --> 00:23:35.356 A:middle
And this will give me
a consistent layout

00:23:35.356 --> 00:23:38.386 A:middle
across all devices and
all modes in multitasking.

00:23:39.496 --> 00:23:43.446 A:middle
So view sizing is important,
and the more you rely

00:23:43.446 --> 00:23:45.916 A:middle
on proportions, the more likely
you are to have a good layout

00:23:45.916 --> 00:23:48.436 A:middle
that will really, you know,
be easy for you to put

00:23:48.436 --> 00:23:51.166 A:middle
across all these different
screens we are giving you.

00:23:51.166 --> 00:23:52.956 A:middle
And one of the things that a
lot of people when they think

00:23:52.956 --> 00:23:55.646 A:middle
about sizing views think
about is self-sizing views,

00:23:56.216 --> 00:23:58.776 A:middle
and most particularly
self-sizing table view cells.

00:23:58.776 --> 00:24:02.746 A:middle
And these are cells that get
their height from their content


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.776 --> 00:24:02.746 A:middle
And these are cells that get
their height from their content

00:24:02.746 --> 00:24:05.696 A:middle
so that you don't have to
have one size of cell all up

00:24:05.696 --> 00:24:06.566 A:middle
and down your table view.

00:24:06.566 --> 00:24:08.626 A:middle
You can have them in
different sizes depending

00:24:08.626 --> 00:24:09.526 A:middle
on what's inside of them.

00:24:10.276 --> 00:24:11.226 A:middle
And you don't actually have

00:24:11.346 --> 00:24:13.806 A:middle
to calculate every
row height yourself.

00:24:14.226 --> 00:24:15.326 A:middle
The constraints can
help you with that.

00:24:15.696 --> 00:24:21.816 A:middle
So self-sizing needs to get
its size from your constraints.

00:24:22.486 --> 00:24:23.926 A:middle
Again, this doesn't mean points.

00:24:24.096 --> 00:24:26.016 A:middle
This means proportions
and relying on things

00:24:26.016 --> 00:24:28.726 A:middle
like intrinsic content size
to help you sort of do that.

00:24:28.726 --> 00:24:32.236 A:middle
Width is defined with table view
cells already, so you just need

00:24:32.236 --> 00:24:32.946 A:middle
to worry about height.

00:24:33.856 --> 00:24:35.686 A:middle
And you can take advantage
of proportions to do this.

00:24:36.346 --> 00:24:37.506 A:middle
Here we have a table view cell.

00:24:37.836 --> 00:24:40.776 A:middle
The label should be twice
as wide as the image view,

00:24:41.496 --> 00:24:43.706 A:middle
and they have a little bit
of padding between them.

00:24:44.976 --> 00:24:48.256 A:middle
So when I have a label that's
taller because it has more text,

00:24:49.286 --> 00:24:52.266 A:middle
the table view cell grows in
order to accommodate that.

00:24:53.196 --> 00:24:54.976 A:middle
So let's look at a quick
demo of how that's done.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:02.376 --> 00:25:04.936 A:middle
Okay. So here I have my table
view cell that I have set

00:25:04.936 --> 00:25:06.526 A:middle
up the horizontal
constraints for already.

00:25:07.126 --> 00:25:09.826 A:middle
If I were to just build
and run it the way it is,

00:25:09.826 --> 00:25:12.136 A:middle
it would not be exactly
what I was hoping for.

00:25:13.746 --> 00:25:14.976 A:middle
So everything is
kind of squished.

00:25:14.976 --> 00:25:17.806 A:middle
My estimated table
view height is 60,

00:25:17.806 --> 00:25:19.156 A:middle
so it's drawing it
there by default.

00:25:19.906 --> 00:25:22.746 A:middle
So what I want to do now
is tell the table view cell

00:25:23.326 --> 00:25:28.206 A:middle
that if the label
grows, it grows with it.

00:25:28.246 --> 00:25:33.616 A:middle
And I do that by putting their
top and bottom anchors together.

00:25:34.016 --> 00:25:36.546 A:middle
So then the label is going to go
ahead and push against the size

00:25:36.546 --> 00:25:38.306 A:middle
of the table view cell
and make it taller.

00:25:38.856 --> 00:25:42.856 A:middle
So top space and bottom
space, to container margin.

00:25:43.166 --> 00:25:43.976 A:middle
Let's see what we get here.

00:25:47.236 --> 00:25:48.266 A:middle
This is better.

00:25:49.116 --> 00:25:50.616 A:middle
But it's still not
quite what I wanted.

00:25:50.756 --> 00:25:53.096 A:middle
Because we have cells
like this one

00:25:53.436 --> 00:25:55.126 A:middle
where the image is now cut off

00:25:55.126 --> 00:25:56.476 A:middle
because the label
isn't tall enough.

00:25:57.136 --> 00:25:59.786 A:middle
So to fix this, we can
take advantage of the fact

00:25:59.906 --> 00:26:02.386 A:middle
that views can stretch beyond
their intrinsic content size


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:59.906 --> 00:26:02.386 A:middle
that views can stretch beyond
their intrinsic content size

00:26:02.386 --> 00:26:05.126 A:middle
and tell the label
that it should be

00:26:05.486 --> 00:26:08.436 A:middle
at least as tall as the image.

00:26:09.326 --> 00:26:11.706 A:middle
And so the label will get
some extra padding around it

00:26:11.786 --> 00:26:17.356 A:middle
that will allow it to -- to
start at the height of the image

00:26:17.566 --> 00:26:19.226 A:middle
and stretch beyond that
when it's tall enough.

00:26:19.226 --> 00:26:20.996 A:middle
So you don't see
that extra spacing,

00:26:20.996 --> 00:26:22.326 A:middle
and the text stays
nice and centered.

00:26:22.786 --> 00:26:25.126 A:middle
But the label is still
what's defining the height

00:26:25.126 --> 00:26:26.696 A:middle
of the table view cell.

00:26:26.696 --> 00:26:29.636 A:middle
And now that looks much better.

00:26:29.786 --> 00:26:31.786 A:middle
All of my cells are
properly sized,

00:26:32.336 --> 00:26:34.196 A:middle
and I can see everything
I wanted to see.

00:26:34.196 --> 00:26:36.596 A:middle
And that's really
all that's involved

00:26:36.596 --> 00:26:38.436 A:middle
in creating self-sizing
table view cells.

00:26:39.146 --> 00:26:41.476 A:middle
Just making sure that
everything is fully defined.

00:26:42.516 --> 00:26:46.706 A:middle
[ Applause ]

00:26:47.206 --> 00:26:48.196 A:middle
Thanks. Okay.

00:26:48.296 --> 00:26:49.436 A:middle
So view sizing.

00:26:49.506 --> 00:26:49.996 A:middle
What have we got?

00:26:50.386 --> 00:26:52.136 A:middle
Certain views have an
intrinsic content size.

00:26:52.136 --> 00:26:54.206 A:middle
You can use that when you
are defining relationships

00:26:54.206 --> 00:26:55.086 A:middle
to other views.

00:26:55.436 --> 00:26:57.826 A:middle
Constraints should define
your size when possible.

00:26:57.826 --> 00:27:00.646 A:middle
When not, you can override
intrinsic content size,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:57.826 --> 00:27:00.646 A:middle
When not, you can override
intrinsic content size,

00:27:01.006 --> 00:27:03.046 A:middle
but make sure you invalidate
intrinsic content size

00:27:03.046 --> 00:27:03.596 A:middle
when you do so.

00:27:03.896 --> 00:27:05.696 A:middle
For self-sizing views,
you just need

00:27:05.696 --> 00:27:07.356 A:middle
to define the size fully
in your constraints.

00:27:08.496 --> 00:27:09.736 A:middle
Where are we building
the layout?

00:27:09.936 --> 00:27:11.356 A:middle
We have our original
information.

00:27:11.356 --> 00:27:13.986 A:middle
We are going to add
some sizing constraints.

00:27:14.756 --> 00:27:16.616 A:middle
From the views we
just put together,

00:27:16.616 --> 00:27:17.996 A:middle
their intrinsic content sizes.

00:27:18.616 --> 00:27:19.176 A:middle
What's next?

00:27:19.746 --> 00:27:22.406 A:middle
How do we help layout
engine know what we want?

00:27:22.926 --> 00:27:23.936 A:middle
We give it some priorities.

00:27:24.866 --> 00:27:27.506 A:middle
This is mystery number 5.

00:27:27.936 --> 00:27:30.146 A:middle
If you have been doing
Auto Layout for a while,

00:27:30.146 --> 00:27:31.516 A:middle
you may have landed
in a situation

00:27:31.516 --> 00:27:34.056 A:middle
where views aren't landing
where you expect them

00:27:34.056 --> 00:27:35.756 A:middle
to in regard to their superview.

00:27:36.216 --> 00:27:38.816 A:middle
Maybe on each build and run
it's a little bit different,

00:27:39.136 --> 00:27:41.816 A:middle
or if you rotate or resize it
gets a little bit different.

00:27:42.306 --> 00:27:43.846 A:middle
So that's called ambiguity.

00:27:44.486 --> 00:27:46.106 A:middle
And it can happen for a
couple different reasons.

00:27:46.726 --> 00:27:48.496 A:middle
One is because you don't
have enough constraints

00:27:48.496 --> 00:27:50.086 A:middle
in the direction
you are looking for.

00:27:50.686 --> 00:27:54.706 A:middle
So for instance, if I had Saturn
here kind of where I wanted it

00:27:54.706 --> 00:27:57.856 A:middle
in the middle, in this dotted
line, but when I actually ran

00:27:57.856 --> 00:28:00.746 A:middle
that app it ended up way
off to the left or right,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:57.856 --> 00:28:00.746 A:middle
that app it ended up way
off to the left or right,

00:28:01.276 --> 00:28:02.856 A:middle
that might mean that I
don't have enough horizontal

00:28:02.856 --> 00:28:05.506 A:middle
constraints to tell the
engine where to put Saturn.

00:28:05.686 --> 00:28:07.496 A:middle
Vertically it seems
fine, so that's good.

00:28:07.916 --> 00:28:10.866 A:middle
And the other thing that
can cause this is equal

00:28:10.866 --> 00:28:12.046 A:middle
nonrequired priorities.

00:28:12.486 --> 00:28:15.466 A:middle
Equal required priorities often
calls unsatisfiable constraints

00:28:15.896 --> 00:28:17.726 A:middle
if the layout engine can't
solve your view that way.

00:28:18.106 --> 00:28:21.206 A:middle
Equal nonrequired priorities
means the engine has

00:28:21.256 --> 00:28:22.326 A:middle
to make a choice for you.

00:28:23.446 --> 00:28:26.016 A:middle
And it tries really hard
to make a good choice,

00:28:26.656 --> 00:28:28.456 A:middle
but it doesn't really
know what you want.

00:28:28.636 --> 00:28:30.996 A:middle
So you just need to give it
a little bit more information

00:28:30.996 --> 00:28:31.446 A:middle
to get there.

00:28:32.806 --> 00:28:33.966 A:middle
So how do priorities work?

00:28:34.636 --> 00:28:37.686 A:middle
They go from 1 to 1,000, and
we have a couple of constants

00:28:37.686 --> 00:28:40.266 A:middle
to help you balance
your priorities.

00:28:40.386 --> 00:28:42.986 A:middle
One thousand is layout
priority required.

00:28:43.666 --> 00:28:46.386 A:middle
Default high is 750,
and default low is 250.

00:28:47.056 --> 00:28:49.526 A:middle
And they look like this in
a visual format language,

00:28:49.526 --> 00:28:52.446 A:middle
you simply put an @ symbol
before the number you wish

00:28:52.446 --> 00:28:52.866 A:middle
to use.

00:28:53.086 --> 00:28:54.576 A:middle
In Interface Builder,
you can stick it right

00:28:54.576 --> 00:28:55.746 A:middle
into a text field here.

00:28:56.736 --> 00:28:59.456 A:middle
And if you are using explicit
constraints, it's a property.

00:28:59.456 --> 00:29:01.886 A:middle
And that's where you can
actually use these constants


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.456 --> 00:29:01.886 A:middle
And that's where you can
actually use these constants

00:29:02.186 --> 00:29:04.236 A:middle
or numbers or a combination
of the two.

00:29:04.856 --> 00:29:07.726 A:middle
The highest priority, when
they are competing, wins.

00:29:08.576 --> 00:29:11.636 A:middle
And we'll look at
this in the context

00:29:11.636 --> 00:29:12.896 A:middle
of content priorities
in a moment.

00:29:13.746 --> 00:29:15.216 A:middle
But an important note.

00:29:15.216 --> 00:29:17.936 A:middle
The system has some
priorities that it uses to lay

00:29:17.936 --> 00:29:18.886 A:middle
out its views internally.

00:29:19.396 --> 00:29:22.786 A:middle
On iOS, we have system layout
size fitting size at 50,

00:29:23.066 --> 00:29:26.196 A:middle
and there are several window
priorities around 500 --

00:29:26.246 --> 00:29:30.436 A:middle
490, 500, and 510
-- that OS X uses.

00:29:30.726 --> 00:29:32.626 A:middle
If you look at the
NSLayoutConstraint header,

00:29:32.696 --> 00:29:34.106 A:middle
you will see what
those numbers are.

00:29:34.106 --> 00:29:35.786 A:middle
If you set those
equal to each other,

00:29:35.856 --> 00:29:37.576 A:middle
you may end up in these
ambiguous situations

00:29:37.576 --> 00:29:38.456 A:middle
that you're about to see.

00:29:38.856 --> 00:29:40.896 A:middle
You want to use something
that's a little higher or lower

00:29:40.956 --> 00:29:42.426 A:middle
than the priorities
the system is using.

00:29:43.486 --> 00:29:44.626 A:middle
Content priorities.

00:29:45.506 --> 00:29:47.286 A:middle
These are how a view
handles its content.

00:29:47.946 --> 00:29:50.126 A:middle
By default, they are
set as Not Required,

00:29:50.816 --> 00:29:52.216 A:middle
and you should not
set them as Required.

00:29:53.096 --> 00:29:54.776 A:middle
Content needs to be able
to move a little bit.

00:29:54.976 --> 00:29:55.946 A:middle
We have dynamic text.

00:29:55.946 --> 00:29:56.936 A:middle
We have localization.

00:29:56.936 --> 00:29:59.546 A:middle
We might be able to have users
choosing different images,

00:29:59.546 --> 00:30:00.176 A:middle
stuff like that.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.546 --> 00:30:00.176 A:middle
stuff like that.

00:30:00.506 --> 00:30:02.516 A:middle
It needs to have a
little bit of wiggle room.

00:30:02.516 --> 00:30:04.226 A:middle
You can't say it always
has to be this size.

00:30:04.486 --> 00:30:05.806 A:middle
You will end up with
unsatisfiable

00:30:05.806 --> 00:30:06.716 A:middle
constraints eventually.

00:30:07.396 --> 00:30:10.286 A:middle
But equal priorities that
are not resolved can cause

00:30:10.286 --> 00:30:11.766 A:middle
ambiguity, as I said earlier.

00:30:11.766 --> 00:30:15.006 A:middle
Let's look at an example of
this using content-hugging

00:30:15.006 --> 00:30:16.636 A:middle
priorities, which is
one of the two types

00:30:16.666 --> 00:30:18.006 A:middle
of content priorities
that we have.

00:30:18.856 --> 00:30:20.716 A:middle
Here we have a text
field and button,

00:30:21.676 --> 00:30:23.636 A:middle
and the text field is all
squished off to the side,

00:30:23.636 --> 00:30:25.606 A:middle
and the button is
all spread out.

00:30:25.606 --> 00:30:28.186 A:middle
That's because they both have
a content-hugging priority

00:30:28.186 --> 00:30:30.416 A:middle
at their default, which is 250.

00:30:31.056 --> 00:30:32.256 A:middle
The engine needed
to make a choice,

00:30:32.796 --> 00:30:35.436 A:middle
and it wasn't sure whether
the answer was this or this.

00:30:36.446 --> 00:30:39.486 A:middle
So you can actually tell it what
answer it should choose every

00:30:39.486 --> 00:30:41.206 A:middle
time instead of getting one

00:30:41.206 --> 00:30:44.266 A:middle
or the other depending
on your environment.

00:30:44.616 --> 00:30:47.226 A:middle
So if you bring the button's
content-hugging priority

00:30:47.226 --> 00:30:49.666 A:middle
down to 249, you will
get the first layout.

00:30:50.266 --> 00:30:53.936 A:middle
And this is because the engine
looks at your constraints

00:30:53.936 --> 00:30:55.126 A:middle
and your priorities
and says, oh,

00:30:55.606 --> 00:30:57.836 A:middle
the text view hugging
priority is fairly important,

00:30:58.386 --> 00:31:00.596 A:middle
but the button hugging priority
is not at all important,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.386 --> 00:31:00.596 A:middle
but the button hugging priority
is not at all important,

00:31:00.926 --> 00:31:02.966 A:middle
so I can go ahead and stretch
that away from its content

00:31:03.316 --> 00:31:06.456 A:middle
to fill up this horizontal
part of your view here.

00:31:07.456 --> 00:31:08.736 A:middle
Meanwhile, if you
take the button

00:31:08.736 --> 00:31:11.176 A:middle
and you put its content-hugging
priority above that

00:31:11.226 --> 00:31:13.326 A:middle
of the text field, you
will get the other solution

00:31:13.326 --> 00:31:14.976 A:middle
because the engine says, hey,

00:31:15.186 --> 00:31:17.226 A:middle
now I want to hug this
button text really closely,

00:31:17.466 --> 00:31:19.366 A:middle
and that means that I can
stretch the text field

00:31:19.666 --> 00:31:20.826 A:middle
in order to solve your layout.

00:31:21.716 --> 00:31:23.136 A:middle
And that's really
all that's required

00:31:23.196 --> 00:31:27.016 A:middle
to adjust an ambiguous
situation like that.

00:31:27.016 --> 00:31:29.036 A:middle
The other type of
content priority is

00:31:29.036 --> 00:31:29.966 A:middle
compression resistance.

00:31:30.816 --> 00:31:34.536 A:middle
And this is how much a
view resists its content

00:31:34.536 --> 00:31:35.156 A:middle
getting squished.

00:31:36.006 --> 00:31:39.076 A:middle
So if you have -- squished is
a technical term, by the way.

00:31:39.356 --> 00:31:41.556 A:middle
Feel free to use it
whenever to impress people.

00:31:42.296 --> 00:31:45.526 A:middle
Compression resistance
priorities for image views

00:31:45.526 --> 00:31:49.216 A:middle
and labels in the horizontal
direction default at 750,

00:31:49.216 --> 00:31:51.846 A:middle
and that's a very high priority
because generally you want

00:31:51.846 --> 00:31:53.106 A:middle
to see all of your content.

00:31:53.776 --> 00:31:56.166 A:middle
But what if you localize
this app?

00:31:56.226 --> 00:31:58.296 A:middle
And you had these two
things that were competing,

00:31:58.536 --> 00:32:00.636 A:middle
and you had a language that
used a much longer word for


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.536 --> 00:32:00.636 A:middle
and you had a language that
used a much longer word for

00:32:00.636 --> 00:32:01.546 A:middle
"red," such as Polish.

00:32:02.176 --> 00:32:02.846 A:middle
It could get clipped.

00:32:03.126 --> 00:32:05.366 A:middle
This is one of the choices
that the engine has to make.

00:32:05.366 --> 00:32:08.276 A:middle
It can either shrink the
image view or clip your label.

00:32:08.276 --> 00:32:10.236 A:middle
It doesn't really know
what you want it to do,

00:32:10.676 --> 00:32:11.446 A:middle
so it makes that choice.

00:32:12.416 --> 00:32:14.526 A:middle
If you wanted the label to
always show all of its content

00:32:14.526 --> 00:32:16.986 A:middle
and it was okay to shrink that
image a little bit, again,

00:32:16.986 --> 00:32:20.526 A:middle
all you have to do is set the
labels content compression

00:32:20.526 --> 00:32:22.266 A:middle
resistance priority
slightly higher than that

00:32:22.266 --> 00:32:25.756 A:middle
of the image view, and now
you can see the whole view.

00:32:25.756 --> 00:32:29.436 A:middle
So as you localize, that's the
adjustment that's made in order

00:32:29.436 --> 00:32:31.276 A:middle
to make sure that all
of your text is visible

00:32:31.496 --> 00:32:34.276 A:middle
to your audience.

00:32:34.406 --> 00:32:36.076 A:middle
So those are priorities.

00:32:37.576 --> 00:32:39.316 A:middle
They can help you
solve unsatisfiability,

00:32:40.226 --> 00:32:42.766 A:middle
which is that thing that causes
that horrible log that you see

00:32:43.256 --> 00:32:45.376 A:middle
when you build and run
and everything is broken.

00:32:45.596 --> 00:32:48.156 A:middle
So they are really helpful,
but you want to look

00:32:48.156 --> 00:32:49.236 A:middle
out for competing priorities.

00:32:49.236 --> 00:32:51.966 A:middle
If they are competing, you can
get ambiguity, as you just saw.

00:32:52.576 --> 00:32:54.586 A:middle
Results are more
consistent across screens

00:32:54.586 --> 00:32:56.986 A:middle
and windows when you do this.

00:32:56.986 --> 00:32:58.956 A:middle
If you use content
priorities well,

00:32:58.956 --> 00:33:00.016 A:middle
you can get to the right layout.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:58.956 --> 00:33:00.016 A:middle
you can get to the right layout.

00:33:00.366 --> 00:33:02.796 A:middle
Sometimes all that's
needed is adjusting hugging

00:33:02.796 --> 00:33:05.476 A:middle
or compression resistance
a little bit.

00:33:05.526 --> 00:33:08.056 A:middle
Now in building our layout,
we have added some priorities

00:33:08.166 --> 00:33:10.206 A:middle
for your constraints
and your content.

00:33:10.986 --> 00:33:14.206 A:middle
So what else do we need in order
to finish solving this layout?

00:33:14.866 --> 00:33:15.276 A:middle
Alignment.

00:33:15.276 --> 00:33:17.996 A:middle
Again, if you have been using
Auto Layout, you are familiar

00:33:17.996 --> 00:33:18.966 A:middle
with aligning your views.

00:33:18.966 --> 00:33:21.266 A:middle
They need to have some sort
of horizontal alignment,

00:33:21.266 --> 00:33:23.536 A:middle
so they know how to relate
to each other, and some sort

00:33:23.536 --> 00:33:24.376 A:middle
of vertical alignment.

00:33:24.376 --> 00:33:28.306 A:middle
I am going to talk specifically
here about aligning text.

00:33:29.466 --> 00:33:32.606 A:middle
So first of all, with text
views, we have the concept

00:33:32.606 --> 00:33:34.866 A:middle
of a baseline, and
this is the line right

00:33:34.866 --> 00:33:38.866 A:middle
under the bottom of the text.

00:33:38.866 --> 00:33:40.586 A:middle
Text views have a first baseline

00:33:40.626 --> 00:33:45.726 A:middle
and a last baseline alignment
thing, where you can --

00:33:45.726 --> 00:33:47.716 A:middle
the first baseline runs right
under the first line of text,

00:33:47.966 --> 00:33:50.416 A:middle
and the last baseline runs right
under the last line of text.

00:33:50.966 --> 00:33:54.486 A:middle
A single-line text view has
these two equal to each other.

00:33:55.516 --> 00:33:58.156 A:middle
So it aligns text
better than top or bottom

00:33:58.156 --> 00:34:00.426 A:middle
in many circumstances
and helps with stuff


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:58.156 --> 00:34:00.426 A:middle
in many circumstances
and helps with stuff

00:34:00.426 --> 00:34:01.626 A:middle
like dynamic text sizing.

00:34:02.346 --> 00:34:05.136 A:middle
It gives you better control
over changing views as well

00:34:05.376 --> 00:34:06.606 A:middle
if something needs to grow.

00:34:06.606 --> 00:34:08.315 A:middle
For instance, if you have
a label next to a button

00:34:08.315 --> 00:34:10.916 A:middle
and they are aligned by the
bottom, the button's frame

00:34:10.916 --> 00:34:12.636 A:middle
in this instance
is a little large

00:34:12.636 --> 00:34:14.096 A:middle
because it's filling
in some extra space.

00:34:14.806 --> 00:34:18.116 A:middle
So if I add a couple of lines of
text to it, the button can sort

00:34:18.116 --> 00:34:20.436 A:middle
of end up in a nebulous area.

00:34:21.126 --> 00:34:24.525 A:middle
And I might want to center align
that, or it might be better

00:34:24.525 --> 00:34:26.406 A:middle
to have it look more
something like messages

00:34:26.795 --> 00:34:28.485 A:middle
and have it sit right
at the bottom next

00:34:28.485 --> 00:34:29.476 A:middle
to that last line of text.

00:34:29.666 --> 00:34:33.556 A:middle
So if I just align them by
last baseline, no matter what

00:34:33.556 --> 00:34:36.516 A:middle
that text view does, the
button will stay aligned

00:34:36.516 --> 00:34:37.516 A:middle
with that last baseline.

00:34:37.706 --> 00:34:39.656 A:middle
And of course, you can also
do it for the first baseline

00:34:39.656 --> 00:34:41.886 A:middle
if that's the sort
of view you desire.

00:34:41.886 --> 00:34:44.856 A:middle
So as you have a growing
view, it's staying aligned

00:34:44.856 --> 00:34:46.616 A:middle
with the views around it.

00:34:46.926 --> 00:34:50.946 A:middle
The other important part of
text alignment is leading

00:34:50.946 --> 00:34:51.476 A:middle
and trailing.

00:34:51.476 --> 00:34:53.456 A:middle
This is actually important
for all types of views,

00:34:53.876 --> 00:34:56.346 A:middle
but its big use is
for localization.

00:34:56.775 --> 00:34:59.376 A:middle
If you are in a left-to-right
language

00:34:59.376 --> 00:35:01.406 A:middle
when you are writing
your app and you use left


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.376 --> 00:35:01.406 A:middle
when you are writing
your app and you use left

00:35:01.406 --> 00:35:04.516 A:middle
and right constraints for your
layout and it gets localized

00:35:04.516 --> 00:35:06.926 A:middle
to a language that uses
right-to-left, you're going

00:35:06.926 --> 00:35:07.926 A:middle
to get some odd results.

00:35:08.076 --> 00:35:09.446 A:middle
It will look something
like this.

00:35:10.126 --> 00:35:11.576 A:middle
Everything sort of
flips in place,

00:35:12.356 --> 00:35:14.256 A:middle
but it no longer reads properly.

00:35:14.386 --> 00:35:16.436 A:middle
I was reading from the image
view over through the text,

00:35:16.436 --> 00:35:19.356 A:middle
and now I am reading the
text from the other direction

00:35:19.356 --> 00:35:20.716 A:middle
and it's going over
to the image view.

00:35:20.716 --> 00:35:23.106 A:middle
That's not really what I wanted.

00:35:23.136 --> 00:35:26.076 A:middle
If you use the exact same
constraints with leading

00:35:26.076 --> 00:35:28.856 A:middle
and trailing alignments instead,
leading for left and trailing

00:35:28.856 --> 00:35:31.596 A:middle
for right, you would end
up with the correct layout,

00:35:31.596 --> 00:35:35.036 A:middle
where everything actually reads
exactly the way you originally

00:35:35.036 --> 00:35:37.586 A:middle
designed it when you switch
to a language that goes

00:35:37.586 --> 00:35:39.846 A:middle
in a different orientation than
the one you were starting with.

00:35:40.446 --> 00:35:43.256 A:middle
So use leading and
trailing pretty much always.

00:35:43.526 --> 00:35:45.416 A:middle
There might be some
circumstances

00:35:45.416 --> 00:35:46.736 A:middle
where you still need
to use left and right.

00:35:46.906 --> 00:35:48.526 A:middle
I am not familiar
with any right now.

00:35:48.526 --> 00:35:49.786 A:middle
I am sure that you
guys have a few.

00:35:50.296 --> 00:35:52.626 A:middle
But if you do use
left and right at all,

00:35:53.196 --> 00:35:55.396 A:middle
be careful when you are mixing
and matching that with leading

00:35:55.396 --> 00:35:58.096 A:middle
and trailing because, again,
when that environment changes,

00:35:58.096 --> 00:36:00.036 A:middle
you might end up with
unsatisfiable constraints.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:58.096 --> 00:36:00.036 A:middle
you might end up with
unsatisfiable constraints.

00:36:01.446 --> 00:36:02.646 A:middle
Okay. Final piece

00:36:02.646 --> 00:36:06.016 A:middle
of our alignment puzzle
is alignment rects.

00:36:06.736 --> 00:36:08.006 A:middle
Alignment rects are important

00:36:08.006 --> 00:36:10.556 A:middle
because it's what the
engine actually calculates.

00:36:11.116 --> 00:36:12.836 A:middle
The engine takes all
of your constraints,

00:36:13.216 --> 00:36:15.636 A:middle
calculates the alignment
rects, and uses them

00:36:15.636 --> 00:36:16.846 A:middle
to actually lay out your views.

00:36:17.786 --> 00:36:20.536 A:middle
So what are alignment rects?

00:36:20.536 --> 00:36:23.236 A:middle
They are usually the frame
of the view, but not always.

00:36:24.066 --> 00:36:26.376 A:middle
Instead of just being the
frame around the view,

00:36:26.376 --> 00:36:28.496 A:middle
it includes the critical
content of the view,

00:36:28.936 --> 00:36:30.376 A:middle
which is what you
really want to align.

00:36:30.936 --> 00:36:32.416 A:middle
Here we have a checkbox,
for instance,

00:36:32.416 --> 00:36:33.896 A:middle
where if you were doing
a center x alignment

00:36:33.896 --> 00:36:35.976 A:middle
with some other view, you
would probably want to align it

00:36:35.976 --> 00:36:38.376 A:middle
by the center of the
circle and not by the center

00:36:38.376 --> 00:36:40.366 A:middle
of the checkbox,
the whole check,

00:36:40.436 --> 00:36:41.586 A:middle
which would be a
little bit too high.

00:36:42.036 --> 00:36:43.966 A:middle
Same thing with a
button that has a shadow.

00:36:44.346 --> 00:36:47.266 A:middle
It kind of gets rid of those
little extra bits and focuses

00:36:47.266 --> 00:36:48.726 A:middle
on the critical part
of the content.

00:36:49.186 --> 00:36:51.506 A:middle
It doesn't change when the
view transforms, either.

00:36:51.916 --> 00:36:53.846 A:middle
So when you lay out your
view and want to emphasize

00:36:53.846 --> 00:36:56.356 A:middle
or deemphasize something,
it won't mess up the rest

00:36:56.356 --> 00:36:58.216 A:middle
of your layout to throw
a transform in there.

00:36:59.276 --> 00:37:00.876 A:middle
If you do need to change these,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:59.276 --> 00:37:00.876 A:middle
If you do need to change these,

00:37:01.126 --> 00:37:04.536 A:middle
which you should very rarely
need to do, we have an override

00:37:04.646 --> 00:37:06.586 A:middle
for alignment rect
insets you can use.

00:37:06.986 --> 00:37:09.946 A:middle
And that basically means you
can hand the engine, say, oh,

00:37:09.946 --> 00:37:11.586 A:middle
whatever alignment rect
you are calculating,

00:37:11.786 --> 00:37:15.036 A:middle
inset it by this much
and use that instead.

00:37:15.036 --> 00:37:17.816 A:middle
You will very rarely if ever
need to do that in your layout,

00:37:17.866 --> 00:37:18.986 A:middle
but it is there if you need it.

00:37:19.076 --> 00:37:23.346 A:middle
To find out what the engine has
actually calculated for you,

00:37:23.576 --> 00:37:26.086 A:middle
you can draw it on your view
using the view debugging option

00:37:26.086 --> 00:37:27.746 A:middle
in the Debug menu of Xcode

00:37:28.616 --> 00:37:30.816 A:middle
and just selecting Show
Alignment Rectangles.

00:37:31.186 --> 00:37:33.256 A:middle
This will draw yellow alignment
rectangles on your view.

00:37:33.256 --> 00:37:36.976 A:middle
You can also get it from the
debugger using alignment rect

00:37:36.976 --> 00:37:38.636 A:middle
for frame on specific views.

00:37:39.586 --> 00:37:42.026 A:middle
We are going to talk about that
more in Part 2 when we talk

00:37:42.026 --> 00:37:44.566 A:middle
about debugging layouts,
so definitely tune in there

00:37:44.566 --> 00:37:46.496 A:middle
if you want to learn more
about how all this works.

00:37:47.386 --> 00:37:49.516 A:middle
So for alignment, we've learned

00:37:49.516 --> 00:37:52.086 A:middle
that text is a little bit
different than everything else.

00:37:52.166 --> 00:37:54.546 A:middle
You want to make sure that you
are ready for both dynamic text

00:37:54.546 --> 00:37:56.906 A:middle
and localization when you
are preparing your app,

00:37:56.906 --> 00:37:58.776 A:middle
and Auto Layout can
really help you with that.

00:37:59.306 --> 00:38:00.816 A:middle
You also have this possibility


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:59.306 --> 00:38:00.816 A:middle
You also have this possibility

00:38:00.816 --> 00:38:02.446 A:middle
of overriding alignment
rect insets

00:38:02.446 --> 00:38:05.786 A:middle
if you have very interesting,
specific views that need to sit

00:38:05.946 --> 00:38:07.366 A:middle
in a very specific frame.

00:38:08.296 --> 00:38:09.656 A:middle
So where are we in our layout?

00:38:10.226 --> 00:38:13.946 A:middle
Okay. We have now alignment,
and if we needed to,

00:38:13.946 --> 00:38:15.686 A:middle
we overrode a couple of
alignment rect insets.

00:38:16.856 --> 00:38:19.786 A:middle
Now we are ready to let
the engine do its work.

00:38:20.546 --> 00:38:21.676 A:middle
So let's throw everything
in there.

00:38:22.786 --> 00:38:24.026 A:middle
The layout engine
will think about it,

00:38:24.086 --> 00:38:27.726 A:middle
calculate your alignment rects,
and then that will be used

00:38:27.786 --> 00:38:29.276 A:middle
to actually build the layout.

00:38:30.136 --> 00:38:33.376 A:middle
Now you have a very happy layout
that's exactly what you wanted

00:38:33.706 --> 00:38:34.606 A:middle
for every screen size.

00:38:34.606 --> 00:38:35.886 A:middle
Trust me, this is your
layout that you wanted.

00:38:35.886 --> 00:38:35.976 A:middle
Okay?

00:38:36.041 --> 00:38:38.041 A:middle
[ Laughter ]

00:38:38.066 --> 00:38:39.166 A:middle
So let's see.

00:38:39.166 --> 00:38:41.046 A:middle
Let's summarize what
you've learned today.

00:38:41.836 --> 00:38:44.686 A:middle
Stack views are a great way
to build a maintainable layout

00:38:44.986 --> 00:38:49.156 A:middle
that will work well across
all of our devices and sizes.

00:38:49.156 --> 00:38:52.406 A:middle
And you can use -- if you use
activate and deactivate properly

00:38:52.406 --> 00:38:54.526 A:middle
for your constraints, you
can get really dynamic,

00:38:54.526 --> 00:38:59.116 A:middle
interesting layouts that require
less work than having to design

00:38:59.116 --> 00:39:00.086 A:middle
for every single screen.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:59.116 --> 00:39:00.086 A:middle
for every single screen.

00:39:01.176 --> 00:39:05.186 A:middle
When you determine specific
sizes, use constraints.

00:39:05.716 --> 00:39:11.156 A:middle
Override intrinsic content size
only when absolutely necessary.

00:39:11.156 --> 00:39:14.496 A:middle
Use priorities to get those last
little adjustments together.

00:39:14.826 --> 00:39:17.996 A:middle
Finally, alignment goes beyond
top, bottom, and center,

00:39:18.176 --> 00:39:20.696 A:middle
especially when you are looking
at text, keep localization

00:39:20.696 --> 00:39:21.986 A:middle
and dynamic text in mind.

00:39:22.926 --> 00:39:25.016 A:middle
For more information
about all of this,

00:39:25.016 --> 00:39:26.756 A:middle
we've got some documentation up.

00:39:27.186 --> 00:39:29.666 A:middle
You can download that planets
sample code if you want to play

00:39:29.666 --> 00:39:32.326 A:middle
around with animation,
and of course,

00:39:32.326 --> 00:39:36.836 A:middle
you can go to the forums or, in
a pinch, contact our Evangelist.

00:39:37.166 --> 00:39:40.776 A:middle
Tune in this afternoon for
Mysteries of Auto Layout Part 2,

00:39:41.056 --> 00:39:43.026 A:middle
where you will learn more
about the layout cycle in depth

00:39:43.496 --> 00:39:44.496 A:middle
and more information

00:39:44.496 --> 00:39:46.986 A:middle
about debugging a layout that's
not doing what you want it

00:39:46.986 --> 00:39:47.826 A:middle
to do.

00:39:47.826 --> 00:39:49.406 A:middle
We have some other
related sessions here.

00:39:50.216 --> 00:39:50.636 A:middle
Have a great day.

00:39:50.636 --> 00:39:50.816 A:middle
Thank you.

00:39:51.016 --> 00:39:53.000 A:middle
[ Applause ]

