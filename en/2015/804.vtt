WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:23.516 --> 00:00:28.006 A:middle
[Applause]

00:00:28.506 --> 00:00:29.076 A:middle
&gt;&gt; ANTONIO CAVEDONI:
Hi, everyone.

00:00:30.006 --> 00:00:31.256 A:middle
My name is Antonio Cavedoni.

00:00:31.906 --> 00:00:33.556 A:middle
I am a member of the team

00:00:33.636 --> 00:00:35.286 A:middle
who designed the new
San Francisco fonts,

00:00:35.506 --> 00:00:37.966 A:middle
and I am thrilled to be here
to introduce them to you.

00:00:38.596 --> 00:00:41.476 A:middle
So on the agenda today
we are going to look

00:00:41.476 --> 00:00:44.686 A:middle
at the San Francisco fonts,
how they were designed,

00:00:44.686 --> 00:00:46.066 A:middle
and what they mean
for our platforms.

00:00:46.606 --> 00:00:48.906 A:middle
We are going to look
at some new features

00:00:49.216 --> 00:00:51.816 A:middle
and how you can make your
apps more awesome with them,

00:00:52.396 --> 00:00:54.516 A:middle
both coding-wise
and design-wise.

00:00:55.506 --> 00:00:56.916 A:middle
And lastly, we are going to talk

00:00:56.916 --> 00:00:59.536 A:middle
about some potential API
pitfalls that you may run

00:00:59.536 --> 00:01:05.436 A:middle
into when adopting these
new fonts in your apps.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:59.536 --> 00:01:05.436 A:middle
into when adopting these
new fonts in your apps.

00:01:05.846 --> 00:01:06.776 A:middle
So let's get started.

00:01:09.386 --> 00:01:10.356 A:middle
Text is everywhere.

00:01:12.836 --> 00:01:17.236 A:middle
And fonts make text possible.

00:01:19.376 --> 00:01:20.966 A:middle
But fonts also have a voice.

00:01:21.496 --> 00:01:29.326 A:middle
And good fonts enhance your app
content and your user interface,

00:01:29.836 --> 00:01:34.006 A:middle
and they do not get in your way.

00:01:34.266 --> 00:01:38.086 A:middle
You read fonts all the
time, and you read them

00:01:38.386 --> 00:01:41.396 A:middle
on different screens,
on different devices,

00:01:41.896 --> 00:01:43.676 A:middle
and at different point sizes.

00:01:44.546 --> 00:01:46.796 A:middle
You also read them at
different viewing conditions,

00:01:46.796 --> 00:01:49.676 A:middle
such as light conditions
or viewing distances

00:01:50.026 --> 00:01:51.916 A:middle
or screen sizes and resolutions.

00:01:52.636 --> 00:01:58.596 A:middle
So we set out to improve on
the typography of our platform,

00:01:58.596 --> 00:02:01.806 A:middle
and we came up with
a new typeface design


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.596 --> 00:02:01.806 A:middle
and we came up with
a new typeface design

00:02:01.806 --> 00:02:03.336 A:middle
that we call San Francisco.

00:02:05.446 --> 00:02:11.036 A:middle
San Francisco is a new family
of typefaces designed by Apple

00:02:11.146 --> 00:02:17.046 A:middle
in California, and it is both
inconspicuous and beautiful.

00:02:18.586 --> 00:02:21.756 A:middle
San Francisco unifies
our platform

00:02:21.756 --> 00:02:25.646 A:middle
with a consistent typographic
voice and a reading experience.

00:02:26.756 --> 00:02:28.466 A:middle
So this is what it looks like.

00:02:28.466 --> 00:02:33.866 A:middle
San Francisco is what is called
in typography as a grotesque,

00:02:33.866 --> 00:02:35.926 A:middle
which is another word
for a sans serif.

00:02:37.236 --> 00:02:39.636 A:middle
And this is the family tree.

00:02:39.636 --> 00:02:41.866 A:middle
The San Francisco
design is comprised

00:02:41.866 --> 00:02:43.066 A:middle
of two main subfamilies.

00:02:44.336 --> 00:02:48.436 A:middle
We have SF, which ships on
iOS and OS X, and SF Compact,

00:02:48.656 --> 00:02:49.756 A:middle
which ships on the Watch.

00:02:50.306 --> 00:02:56.396 A:middle
Both families have two cuts
that are called optical sizes,

00:02:56.396 --> 00:02:58.546 A:middle
and they are text and
display, and I will talk

00:02:58.546 --> 00:02:59.826 A:middle
about these in a second.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:00.886 --> 00:03:04.246 A:middle
And all of the fonts have six
weights for the text families

00:03:04.716 --> 00:03:07.436 A:middle
and nine for the display ones.

00:03:08.416 --> 00:03:12.346 A:middle
So again, SF ships
on iOS and OS X,

00:03:13.336 --> 00:03:15.966 A:middle
and SF Compact ships
on the Watch.

00:03:18.026 --> 00:03:20.206 A:middle
So now let's look at the
difference between these two.

00:03:21.876 --> 00:03:26.416 A:middle
SF and SF Compact
are sibling designs,

00:03:26.506 --> 00:03:28.146 A:middle
meaning they are
related but not equal,

00:03:28.806 --> 00:03:30.076 A:middle
and the biggest formal
difference

00:03:30.076 --> 00:03:32.616 A:middle
between the two is how we
handle the round shapes.

00:03:34.546 --> 00:03:36.616 A:middle
In SF, they are round,
and in SF Compact,

00:03:36.616 --> 00:03:38.826 A:middle
they are actually slightly flat.

00:03:39.316 --> 00:03:41.566 A:middle
So that achieves two main goals.

00:03:42.006 --> 00:03:45.566 A:middle
The first is stylistic, but the
second one, more importantly,

00:03:45.836 --> 00:03:48.676 A:middle
is functional, so these
flat sides allow us

00:03:48.676 --> 00:03:50.036 A:middle
to have more space
between the letters,

00:03:50.306 --> 00:03:52.486 A:middle
which means they are more
legible when they are smaller.

00:03:53.306 --> 00:03:56.226 A:middle
And this seemingly
inconsequential feature repeated

00:03:56.226 --> 00:03:59.416 A:middle
over and over and over again

00:03:59.586 --> 00:04:02.036 A:middle
in text really does
make a big difference.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.586 --> 00:04:02.036 A:middle
in text really does
make a big difference.

00:04:03.786 --> 00:04:06.396 A:middle
So now let's look
at proportions,

00:04:06.456 --> 00:04:08.706 A:middle
which are actually similar
between SF and SF Compact.

00:04:08.706 --> 00:04:11.276 A:middle
So I will just focus
on SF for a minute.

00:04:11.736 --> 00:04:14.446 A:middle
I am going to go over some
typographic terms you may

00:04:14.446 --> 00:04:16.315 A:middle
already be familiar with,
so please bear with me.

00:04:17.266 --> 00:04:21.516 A:middle
Latin text lies on what
is called the baseline.

00:04:23.006 --> 00:04:26.216 A:middle
Lowercase letter align with
something that is known

00:04:26.216 --> 00:04:28.816 A:middle
as the x-height, which is the
height of the lowercase x.

00:04:29.706 --> 00:04:31.596 A:middle
And the uppercase
aligns at the cap height.

00:04:33.136 --> 00:04:36.136 A:middle
We also have a descender, which
is where lowercase letters

00:04:36.136 --> 00:04:39.666 A:middle
that are below the baseline
align, and an ascender.

00:04:40.326 --> 00:04:44.846 A:middle
Now, for proportions,

00:04:45.246 --> 00:04:48.916 A:middle
the SF family has
compatible overall metrics

00:04:49.246 --> 00:04:51.446 A:middle
with the previous UI
fonts that we shipped,

00:04:51.776 --> 00:04:54.336 A:middle
which means your apps
won't experience a lot

00:04:54.546 --> 00:04:55.866 A:middle
of vertical reflow.

00:04:55.866 --> 00:04:58.356 A:middle
In fact, they won't experience
any vertical reflow at all.

00:04:59.376 --> 00:05:02.206 A:middle
But within these
compatible vertical metrics,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.376 --> 00:05:02.206 A:middle
But within these
compatible vertical metrics,

00:05:02.606 --> 00:05:04.256 A:middle
we actually change the
proportions a little bit.

00:05:04.746 --> 00:05:08.156 A:middle
For example, we made the
uppercase shorter a little bit.

00:05:08.776 --> 00:05:10.326 A:middle
The reason we did this
is because we wanted it

00:05:10.326 --> 00:05:12.056 A:middle
to work better in
mixed-case settings.

00:05:13.226 --> 00:05:15.436 A:middle
And also, we increased
the height

00:05:15.436 --> 00:05:17.366 A:middle
of the x-height a little bit.

00:05:17.706 --> 00:05:20.046 A:middle
So we made the lowercase
go towards the uppercase.

00:05:20.926 --> 00:05:22.726 A:middle
And again, that improves
mixed-case settings

00:05:22.826 --> 00:05:24.606 A:middle
but also makes the
lowercase larger,

00:05:24.606 --> 00:05:26.006 A:middle
which is what you read the most,

00:05:26.006 --> 00:05:28.556 A:middle
and so it's for better
legibility.

00:05:29.576 --> 00:05:32.056 A:middle
And lastly, the numbers
align with the uppercase.

00:05:32.626 --> 00:05:38.876 A:middle
So SF is a pan-European font,

00:05:39.196 --> 00:05:43.246 A:middle
which means it covers the Latin
script, which includes languages

00:05:43.246 --> 00:05:48.906 A:middle
like Polish or Icelandic or
Hungarian or even languages

00:05:48.906 --> 00:05:50.966 A:middle
that need stacking
accents, like Vietnamese.

00:05:51.716 --> 00:05:54.836 A:middle
But it also covers the
Cyrillic script, which is used

00:05:54.836 --> 00:05:57.536 A:middle
in Russian, and the
Greek script.

00:05:58.226 --> 00:06:02.236 A:middle
So that's San Francisco.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:58.226 --> 00:06:02.236 A:middle
So that's San Francisco.

00:06:03.056 --> 00:06:10.016 A:middle
It is a new family of typefaces
that we designed at Apple.

00:06:10.216 --> 00:06:13.026 A:middle
iOS and OS X ship with
a font family called SF,

00:06:14.276 --> 00:06:16.526 A:middle
and SF Compact ships
on the Watch.

00:06:18.326 --> 00:06:20.036 A:middle
The families have
different proportions --

00:06:20.036 --> 00:06:23.376 A:middle
sorry, similar proportions,
but they are different designs.

00:06:24.356 --> 00:06:29.566 A:middle
Now, both fonts are available
for download for you today --

00:06:30.166 --> 00:06:32.696 A:middle
actually, right now --
and you can get them

00:06:32.806 --> 00:06:37.116 A:middle
from the Apple fonts page,
developer.apple.com/fonts.

00:06:37.806 --> 00:06:39.886 A:middle
But please remember that
these are prerelease,

00:06:40.896 --> 00:06:43.676 A:middle
so they will get finalized
once the final OSes ship.

00:06:46.426 --> 00:06:50.256 A:middle
So before I move on to talk
to you about optical sizing,

00:06:50.256 --> 00:06:53.676 A:middle
which is the big idea in the San
Francisco family of typefaces,

00:06:54.176 --> 00:06:59.556 A:middle
I need to tell you about
some principles of design.

00:06:59.726 --> 00:07:02.546 A:middle
Visual perception is
largely about illusion.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:59.726 --> 00:07:02.546 A:middle
Visual perception is
largely about illusion.

00:07:03.466 --> 00:07:06.976 A:middle
And what I mean by that is
imagine you have two shapes.

00:07:07.146 --> 00:07:08.276 A:middle
You have a square and a circle.

00:07:08.436 --> 00:07:12.286 A:middle
And you want to make people
think that they are looking

00:07:12.286 --> 00:07:13.436 A:middle
at shapes that are
the same height.

00:07:14.146 --> 00:07:16.276 A:middle
So you put them side by side,

00:07:16.276 --> 00:07:18.516 A:middle
and you align them
mathematically,

00:07:19.146 --> 00:07:21.906 A:middle
and the circle actually
looks too short.

00:07:22.756 --> 00:07:27.426 A:middle
So to address that, you actually
have to cheat, meaning you have

00:07:27.506 --> 00:07:29.736 A:middle
to make the circle larger.

00:07:30.526 --> 00:07:32.846 A:middle
In typography, we say that
you make the circle overshoot

00:07:33.006 --> 00:07:33.546 A:middle
the square.

00:07:35.046 --> 00:07:39.476 A:middle
So in other words, if you want
to make two shapes look similar,

00:07:40.006 --> 00:07:41.986 A:middle
you often have to
make them dissimilar.

00:07:43.016 --> 00:07:45.396 A:middle
Now, this does not apply just
to the shapes themselves,

00:07:46.126 --> 00:07:49.136 A:middle
but it applies to the space
around the shapes as well --

00:07:49.136 --> 00:07:51.056 A:middle
I'm going meta here and
showing you the slides --

00:07:51.576 --> 00:07:55.386 A:middle
and what I am trying to get
at here is if I put that text

00:07:55.386 --> 00:07:57.556 A:middle
in the middle of the
slide, like this,

00:07:58.206 --> 00:07:59.556 A:middle
it would actually look too low.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:00.396 --> 00:08:03.096 A:middle
So again, to make
shapes look similar,

00:08:03.216 --> 00:08:04.896 A:middle
you have to actually
make them divergent.

00:08:06.166 --> 00:08:09.166 A:middle
And as a bonus, do you guys
know what this character is,

00:08:09.246 --> 00:08:10.376 A:middle
what it's called?

00:08:11.186 --> 00:08:12.806 A:middle
The pound, the hashtag.

00:08:12.806 --> 00:08:15.006 A:middle
In Italy, we call
it the cancelletto,

00:08:15.006 --> 00:08:16.196 A:middle
which means small gate.

00:08:16.196 --> 00:08:18.956 A:middle
It is, of course,
the octothorpe,

00:08:20.046 --> 00:08:25.516 A:middle
and the octothorpe is the
intersection of four lines,

00:08:26.076 --> 00:08:27.506 A:middle
and where these four lines meet,

00:08:28.506 --> 00:08:31.516 A:middle
that area in the middle can get
very dark and actually can kind

00:08:31.516 --> 00:08:33.226 A:middle
of clog up at smaller sizes.

00:08:33.635 --> 00:08:35.885 A:middle
So if you see it small, you can
hardly notice that it's there.

00:08:36.316 --> 00:08:41.496 A:middle
So what have you to do there is
you kind of have to cheat again.

00:08:41.966 --> 00:08:43.616 A:middle
You have to not actually
make the intersection

00:08:43.616 --> 00:08:47.316 A:middle
of these four lines but
make it a larger square.

00:08:48.426 --> 00:08:52.646 A:middle
So that's the octothorpe in our
heavy weight of San Francisco,

00:08:53.076 --> 00:08:57.846 A:middle
and we do this in type
design all the time.

00:08:58.096 --> 00:09:00.516 A:middle
So again, visual
perception is about illusion.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.096 --> 00:09:00.516 A:middle
So again, visual
perception is about illusion.

00:09:01.536 --> 00:09:05.326 A:middle
And with that, I want to talk
to you about optical sizes.

00:09:06.546 --> 00:09:11.916 A:middle
Which is this branch of the
family tree that you saw before.

00:09:12.066 --> 00:09:16.346 A:middle
Imagine you have a piece of text
in two sizes in the same font.

00:09:16.826 --> 00:09:18.726 A:middle
By the way, this word doesn't
actually mean anything.

00:09:19.106 --> 00:09:22.256 A:middle
It's something that we type
designers use to look at fonts

00:09:22.256 --> 00:09:23.906 A:middle
and kind of judge their rhythm

00:09:23.906 --> 00:09:25.676 A:middle
because it has flat
and round shapes.

00:09:26.596 --> 00:09:28.126 A:middle
Anyway, you look at
it, and you may notice

00:09:28.126 --> 00:09:32.226 A:middle
that the smaller version of
this text is not really legible,

00:09:32.376 --> 00:09:35.236 A:middle
and the reason is in a
grotesque typeface like this,

00:09:35.466 --> 00:09:37.626 A:middle
where letters are nice
and close to each other,

00:09:38.506 --> 00:09:41.136 A:middle
if I simulate low vision
by blurring it out,

00:09:41.456 --> 00:09:45.156 A:middle
the smaller size font -- in the
smaller size font, letters start

00:09:45.186 --> 00:09:46.586 A:middle
to kind of blend, right?

00:09:47.096 --> 00:09:49.716 A:middle
So what you want to
do there is you want

00:09:49.716 --> 00:09:50.686 A:middle
to do something like this.

00:09:51.566 --> 00:09:53.206 A:middle
Meaning you want to
kind of adjust it

00:09:53.206 --> 00:09:54.696 A:middle
so it's more legible
when it's small.

00:09:55.796 --> 00:09:58.176 A:middle
So you may be thinking that all
I did there was just animate it

00:09:58.176 --> 00:10:00.306 A:middle
and make it slightly
wider, and actually,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.176 --> 00:10:00.306 A:middle
and make it slightly
wider, and actually,

00:10:00.526 --> 00:10:03.976 A:middle
I am changing the
outlines completely on you.

00:10:04.866 --> 00:10:06.306 A:middle
So before I show
you the differences

00:10:06.306 --> 00:10:09.366 A:middle
between these two fonts
that are called Display

00:10:09.366 --> 00:10:10.316 A:middle
and Text, by the way.

00:10:10.716 --> 00:10:14.146 A:middle
Display doesn't mean screen,
but it means typing sizes

00:10:14.146 --> 00:10:16.246 A:middle
in typography, and
text is the text sizes,

00:10:16.666 --> 00:10:18.996 A:middle
so the display font is
used for larger sizes

00:10:18.996 --> 00:10:20.156 A:middle
and text for smaller ones.

00:10:20.696 --> 00:10:24.146 A:middle
I have to tell you
about negative space,

00:10:24.526 --> 00:10:27.846 A:middle
which is the space inside
letters, around letters,

00:10:28.916 --> 00:10:30.286 A:middle
and inside the contours.

00:10:30.996 --> 00:10:32.056 A:middle
Negative space is critical

00:10:32.056 --> 00:10:35.026 A:middle
for telling shapes apart
and for reading them.

00:10:36.026 --> 00:10:38.756 A:middle
And in the example before,
actually, in the bottom --

00:10:39.046 --> 00:10:42.676 A:middle
in the text font, there was
almost twice as much the space

00:10:42.946 --> 00:10:44.706 A:middle
than in the display font.

00:10:46.346 --> 00:10:50.696 A:middle
So another thing that could be
an issue in grotesque typefaces,

00:10:50.856 --> 00:10:54.046 A:middle
such as San Francisco, is that
these shapes look beautiful

00:10:54.046 --> 00:10:58.026 A:middle
when they are really large, but
they have similar structures,

00:10:58.086 --> 00:10:59.386 A:middle
and they can become confusable.

00:10:59.886 --> 00:11:03.466 A:middle
So when you superimpose
them, you may notice


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.886 --> 00:11:03.466 A:middle
So when you superimpose
them, you may notice

00:11:03.566 --> 00:11:06.186 A:middle
that they all have the
same overall morphology,

00:11:06.186 --> 00:11:08.636 A:middle
which means they all have
these areas at the top

00:11:08.636 --> 00:11:09.836 A:middle
and at the bottom
that are curvy.

00:11:10.686 --> 00:11:15.376 A:middle
They all have these two areas
that we call counters that are

00:11:15.376 --> 00:11:17.176 A:middle
in the same -- roughly
the same position

00:11:17.176 --> 00:11:18.306 A:middle
and roughly the same size.

00:11:19.176 --> 00:11:20.826 A:middle
They also have this
semi-horizontal area

00:11:20.826 --> 00:11:24.866 A:middle
in the middle, and they are
really defined by these areas

00:11:24.866 --> 00:11:26.136 A:middle
that we call apertures.

00:11:26.836 --> 00:11:28.326 A:middle
If you imagine air
going to the letter,

00:11:28.326 --> 00:11:29.696 A:middle
that's where it would flow in.

00:11:30.946 --> 00:11:33.526 A:middle
So you really want to
change the display --

00:11:33.726 --> 00:11:37.336 A:middle
the text fonts versus the
display one, and when we do so,

00:11:37.336 --> 00:11:39.076 A:middle
let me just show
you some examples.

00:11:41.226 --> 00:11:45.716 A:middle
In a lowercase a, for example,
we actually change the size

00:11:45.716 --> 00:11:49.616 A:middle
of the overshoots because we
want the round shapes to pop

00:11:49.616 --> 00:11:52.366 A:middle
out more from the
x-height at smaller sizes.

00:11:53.176 --> 00:11:54.986 A:middle
We also open up the
aperture right there.

00:11:56.246 --> 00:11:59.236 A:middle
And we do the same at the
bottom of the lowercase g.

00:11:59.896 --> 00:12:05.286 A:middle
In the lowercase s, we open
up these apertures as well.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:59.896 --> 00:12:05.286 A:middle
In the lowercase s, we open
up these apertures as well.

00:12:06.936 --> 00:12:14.156 A:middle
We make the r nose or flag
larger, and we do the same

00:12:14.156 --> 00:12:16.816 A:middle
with the lowercase f
and the lowercase t;

00:12:16.816 --> 00:12:18.446 A:middle
they're larger and
slightly taller.

00:12:19.246 --> 00:12:21.356 A:middle
The lowercase i is
an interesting one

00:12:21.356 --> 00:12:25.826 A:middle
because what happens there is
the dot on the i visually starts

00:12:25.826 --> 00:12:29.566 A:middle
to collide with the stem
at really small sizes,

00:12:29.566 --> 00:12:32.476 A:middle
and so we actually make
it larger and higher up.

00:12:34.066 --> 00:12:38.286 A:middle
So there are two distinct font
families in SF and SF Compact.

00:12:38.506 --> 00:12:41.186 A:middle
They are called Display
and Text, and they are used

00:12:41.186 --> 00:12:42.236 A:middle
at different point sizes.

00:12:42.746 --> 00:12:45.386 A:middle
The system automatically
switches between the two for you

00:12:45.556 --> 00:12:47.146 A:middle
so you don't have to do
anything to adopt them.

00:12:48.446 --> 00:12:50.136 A:middle
And that's optical sizes.

00:12:50.736 --> 00:12:51.216 A:middle
Thank you.

00:12:52.516 --> 00:12:58.066 A:middle
[Applause]

00:12:58.566 --> 00:13:00.456 A:middle
There are two optical,
size-specific families


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.566 --> 00:13:00.456 A:middle
There are two optical,
size-specific families

00:13:00.456 --> 00:13:03.376 A:middle
in San Francisco:
Text and Display.

00:13:03.856 --> 00:13:05.916 A:middle
The system switches between
the two at 20 points,

00:13:06.136 --> 00:13:08.266 A:middle
so you don't need to know
this if you are coding

00:13:08.266 --> 00:13:10.326 A:middle
for the new platforms; however,

00:13:10.326 --> 00:13:11.536 A:middle
you do need to know
the difference

00:13:11.676 --> 00:13:14.616 A:middle
if you are designing your
app because design apps

00:13:14.616 --> 00:13:16.756 A:middle
like Photoshop, or
Sketch, or other apps

00:13:16.756 --> 00:13:18.356 A:middle
like these don't
actually do this for you,

00:13:18.546 --> 00:13:22.716 A:middle
so just know you have to
switch between these two fonts.

00:13:22.906 --> 00:13:25.236 A:middle
So now that we looked at
size-specific features

00:13:25.236 --> 00:13:28.376 A:middle
such as optical sizes, I want
to tell you about something else

00:13:28.376 --> 00:13:32.726 A:middle
which is size specific,
and that is tracking.

00:13:33.416 --> 00:13:37.796 A:middle
Tracking is a modifier on the
native spacing of letters,

00:13:38.786 --> 00:13:40.986 A:middle
and if you saw that animation
and you thought, oh, yeah,

00:13:40.986 --> 00:13:44.046 A:middle
he changed the kerning on that
string, you are almost right.

00:13:44.046 --> 00:13:46.816 A:middle
There is a subtle difference
between tracking and kerning.

00:13:47.736 --> 00:13:54.356 A:middle
Tracking applies both positively
and negatively to all the glyphs

00:13:54.356 --> 00:13:58.576 A:middle
in a font, and kerning
really only applies

00:13:58.576 --> 00:14:00.576 A:middle
to a specific pair,
individual pair.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.576 --> 00:14:00.576 A:middle
to a specific pair,
individual pair.

00:14:01.806 --> 00:14:03.246 A:middle
So that's kind of
the big difference.

00:14:04.716 --> 00:14:07.306 A:middle
Tracking is global,
and kerning is local.

00:14:08.006 --> 00:14:13.026 A:middle
Now, the San Francisco
fonts have inside

00:14:13.026 --> 00:14:17.886 A:middle
of them embedded per each
font a tracking table

00:14:17.886 --> 00:14:18.956 A:middle
which is size specific,

00:14:19.196 --> 00:14:21.506 A:middle
and it defines point
sizes and tracking values.

00:14:22.336 --> 00:14:24.256 A:middle
It achieves something
like this, right?

00:14:24.256 --> 00:14:26.486 A:middle
So it makes the smaller
text spread apart

00:14:26.686 --> 00:14:28.786 A:middle
and the bigger text
closer together.

00:14:29.996 --> 00:14:33.956 A:middle
And you don't need to know these
values, again, if you are coding

00:14:33.956 --> 00:14:36.826 A:middle
to the new San Francisco fonts,
but you do need to know them

00:14:36.826 --> 00:14:39.346 A:middle
if you are drawing your app
in Photoshop because, again,

00:14:39.346 --> 00:14:42.496 A:middle
they do not do this for you.

00:14:43.496 --> 00:14:45.586 A:middle
This tracking table is
available for download

00:14:45.586 --> 00:14:47.986 A:middle
with the system fonts
with the same page

00:14:47.986 --> 00:14:48.796 A:middle
that I showed you earlier.

00:14:50.266 --> 00:14:53.446 A:middle
So that's what tracking
is all about.

00:14:54.786 --> 00:15:00.346 A:middle
Next, I would like to
talk to you about weight.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:54.786 --> 00:15:00.346 A:middle
Next, I would like to
talk to you about weight.

00:15:04.416 --> 00:15:08.306 A:middle
Font weight is the
measure of how thick

00:15:08.306 --> 00:15:10.506 A:middle
or thin the strokes
of the letters are.

00:15:10.506 --> 00:15:16.056 A:middle
Now, the text families of
San Francisco and SF Compact

00:15:16.056 --> 00:15:20.716 A:middle
as well, SF and SF Compact, have
six weights for the text fonts

00:15:21.366 --> 00:15:24.346 A:middle
with their italics, and
they have nine weights

00:15:24.346 --> 00:15:25.296 A:middle
in the display fonts.

00:15:25.576 --> 00:15:28.836 A:middle
And you may be wondering why
it is that we have more weights

00:15:28.836 --> 00:15:32.106 A:middle
in Display than in Text.

00:15:32.186 --> 00:15:34.946 A:middle
And the reason is that
the extreme weights

00:15:34.946 --> 00:15:36.876 A:middle
of the family are really
designed for titles,

00:15:37.576 --> 00:15:39.306 A:middle
and so it wouldn't
make sense for them

00:15:39.306 --> 00:15:42.386 A:middle
to be used below 20 points.

00:15:43.126 --> 00:15:47.116 A:middle
So some of these
weights are actually new,

00:15:47.116 --> 00:15:51.346 A:middle
brand-new in our platforms, and
so previously it was hard to get

00:15:51.346 --> 00:15:53.556 A:middle
to them or the ones that
were there previously,

00:15:53.916 --> 00:15:56.756 A:middle
and now we are giving you
new APIs to actually get

00:15:56.756 --> 00:15:58.656 A:middle
to all the range of
weights and system font.

00:15:59.336 --> 00:16:01.186 A:middle
They are both in
UIKit and AppKit,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.336 --> 00:16:01.186 A:middle
They are both in
UIKit and AppKit,

00:16:01.256 --> 00:16:03.026 A:middle
and they are a new
parameter added

00:16:03.026 --> 00:16:05.236 A:middle
to the systemFontOfSize
API call,

00:16:06.586 --> 00:16:10.586 A:middle
and these are the
arguments that are taken.

00:16:12.636 --> 00:16:15.366 A:middle
Now, you have all these weights,
and you may be wondering,

00:16:15.556 --> 00:16:16.626 A:middle
how do we actually use them?

00:16:16.626 --> 00:16:18.226 A:middle
And I don't mean from
a coding point of view,

00:16:18.226 --> 00:16:19.416 A:middle
but from a design point of view.

00:16:20.256 --> 00:16:22.856 A:middle
So you have three main goals

00:16:22.856 --> 00:16:23.896 A:middle
that you can achieve
with weight.

00:16:24.266 --> 00:16:25.576 A:middle
The first one is
differentiation.

00:16:25.576 --> 00:16:27.586 A:middle
You can create difference
in a piece of text,

00:16:27.586 --> 00:16:28.936 A:middle
and you can create a hierarchy.

00:16:29.366 --> 00:16:31.916 A:middle
The second is to
achieve similitude.

00:16:32.966 --> 00:16:35.446 A:middle
And the third is a
stylistic purpose,

00:16:35.446 --> 00:16:37.556 A:middle
so you want to achieve
some sort of voice.

00:16:38.476 --> 00:16:39.256 A:middle
So let's look at these.

00:16:41.826 --> 00:16:44.886 A:middle
Imagine you have a piece of text
and you want to call out a word,

00:16:45.626 --> 00:16:48.386 A:middle
make it active, make it a
link, make it emphasized.

00:16:48.966 --> 00:16:51.246 A:middle
Weight is a great
way of doing that.

00:16:52.626 --> 00:16:55.306 A:middle
You can also have a list of
items and create a hierarchy

00:16:55.306 --> 00:16:58.976 A:middle
in there by saying the first one
actually is the one I want to --

00:16:58.976 --> 00:17:01.466 A:middle
it is the title of the list, and
the other ones are the things


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:58.976 --> 00:17:01.466 A:middle
it is the title of the list, and
the other ones are the things

00:17:01.466 --> 00:17:02.516 A:middle
that are being enumerated.

00:17:03.926 --> 00:17:06.396 A:middle
But you can also use
weight in a more subtle way,

00:17:06.396 --> 00:17:07.675 A:middle
which is to create similitude.

00:17:08.636 --> 00:17:10.445 A:middle
Consider this example,
which is kind

00:17:10.445 --> 00:17:13.136 A:middle
of vernacular to
Watch Glances UI.

00:17:13.136 --> 00:17:16.866 A:middle
You have a bigger number and
some smaller text underneath it.

00:17:17.786 --> 00:17:20.215 A:middle
Now, if you set them both
in the same font weight,

00:17:20.656 --> 00:17:22.156 A:middle
the smaller text
might look too light.

00:17:22.945 --> 00:17:25.116 A:middle
So if you want to achieve
similitude there, what you have

00:17:25.146 --> 00:17:27.306 A:middle
to do is you have to make
the weights dissimilar

00:17:27.306 --> 00:17:28.146 A:middle
to make them similar.

00:17:29.126 --> 00:17:32.606 A:middle
So you can make the bottom
font regular rather than light.

00:17:34.626 --> 00:17:37.246 A:middle
So if you follow this principle
of larger sizes, lighter weight;

00:17:37.246 --> 00:17:39.006 A:middle
and smaller sizes,
heavier weight,

00:17:39.376 --> 00:17:42.836 A:middle
you can roughly make
things go towards each other

00:17:43.356 --> 00:17:45.026 A:middle
and be harmonious.

00:17:46.256 --> 00:17:48.966 A:middle
But lastly, you can also
use weight for voice.

00:17:49.136 --> 00:17:52.006 A:middle
To show you what I mean, I
created a new revolutionary app.

00:17:52.846 --> 00:17:57.226 A:middle
It's called Bee Weather, and
it's a weather app for bees.

00:17:58.026 --> 00:18:03.726 A:middle
I really wanted to be punchy
and bold, but what I want


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.026 --> 00:18:03.726 A:middle
I really wanted to be punchy
and bold, but what I want

00:18:03.726 --> 00:18:05.676 A:middle
to show you is that if
I just take the same --

00:18:05.676 --> 00:18:09.316 A:middle
exact same layout and I
change only the font weight,

00:18:09.976 --> 00:18:11.986 A:middle
I can create a completely
different stylistic effect,

00:18:11.986 --> 00:18:12.906 A:middle
a completely different voice.

00:18:12.906 --> 00:18:15.876 A:middle
And if you are sitting there
and you are thinking, oh,

00:18:15.876 --> 00:18:19.186 A:middle
but the color is deceiving me,
I actually made Zebra Weather

00:18:19.186 --> 00:18:22.786 A:middle
as well, which -- [Laughter]
-- proves my point better.

00:18:23.286 --> 00:18:27.886 A:middle
So you can really use weight
to achieve a stylistic effect.

00:18:28.596 --> 00:18:35.066 A:middle
However, remember that fonts
are there to serve the text,

00:18:35.126 --> 00:18:37.066 A:middle
so legibility is
our first concern.

00:18:38.456 --> 00:18:39.526 A:middle
You want to establish
a hierarchy

00:18:39.526 --> 00:18:41.076 A:middle
with consistency and clarity.

00:18:41.726 --> 00:18:43.666 A:middle
And if you don't feel
comfortable doing that,

00:18:43.666 --> 00:18:45.946 A:middle
iOS already has a
system that you can adopt

00:18:46.486 --> 00:18:49.446 A:middle
that has a hierarchy embedded
within it of sizes and weights

00:18:49.586 --> 00:18:50.526 A:middle
that go along together.

00:18:51.026 --> 00:18:54.126 A:middle
These are the text style APIs
that are used for Dynamic Type,

00:18:54.306 --> 00:18:56.546 A:middle
which also give you all the
Dynamic Type advantages,

00:18:57.056 --> 00:18:59.886 A:middle
such as users can go
in their preferences,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:00.286 --> 00:19:03.576 A:middle
change their font size, and
your app will react accordingly.

00:19:04.226 --> 00:19:07.626 A:middle
When working with weight,
you also have to remember

00:19:07.716 --> 00:19:11.976 A:middle
that there is a setting
both in iOS and watchOS

00:19:12.416 --> 00:19:16.276 A:middle
to change the weight of the
fonts on people's devices,

00:19:16.906 --> 00:19:20.386 A:middle
and so if you are relying on
weights that are too bold,

00:19:20.936 --> 00:19:24.986 A:middle
you might hit a ceiling
there, and on the other hand,

00:19:24.986 --> 00:19:27.546 A:middle
if you are relying on
fonts that are too light,

00:19:27.546 --> 00:19:28.886 A:middle
text might be illegible.

00:19:29.406 --> 00:19:33.606 A:middle
So there is no hard-and-fast
rule about how to use weight.

00:19:34.336 --> 00:19:38.756 A:middle
But these rough guidelines
can give you some ideas.

00:19:40.226 --> 00:19:44.046 A:middle
So these are the weights of
the San Francisco font family.

00:19:44.046 --> 00:19:48.556 A:middle
There are new ones
available to you and APIs

00:19:48.556 --> 00:19:49.656 A:middle
that go along with them.

00:19:51.266 --> 00:19:54.476 A:middle
The same guidelines about
legibility, hierarchy,

00:19:54.776 --> 00:19:57.626 A:middle
and the elusive quality of
taste apply to their usage.

00:19:58.126 --> 00:20:03.146 A:middle
Next I want to talk to
you about another feature


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:58.126 --> 00:20:03.146 A:middle
Next I want to talk to
you about another feature

00:20:03.146 --> 00:20:07.806 A:middle
of the San Francisco family,
which are typographic features.

00:20:08.386 --> 00:20:14.746 A:middle
So features make fonts active
because they are pieces

00:20:14.746 --> 00:20:17.516 A:middle
of behavior that is
embedded inside a font.

00:20:19.036 --> 00:20:22.066 A:middle
They primarily make
complex scripts possible,

00:20:22.766 --> 00:20:23.886 A:middle
but they can also be used

00:20:24.036 --> 00:20:26.526 A:middle
to access extended
glyphs inside a font.

00:20:27.086 --> 00:20:29.296 A:middle
Sometimes they can
be the only mechanism

00:20:29.296 --> 00:20:30.856 A:middle
or sometimes they can be
a convenience mechanism

00:20:30.856 --> 00:20:32.096 A:middle
to access these extended glyphs.

00:20:32.736 --> 00:20:35.176 A:middle
So to give you an example
of what features can do,

00:20:35.646 --> 00:20:37.566 A:middle
let me tell you about fractions.

00:20:38.546 --> 00:20:41.216 A:middle
So you are looking at this, and
you are typesetting in your app,

00:20:41.216 --> 00:20:44.586 A:middle
and you are thinking, actually,
I know that there is a glyph

00:20:44.626 --> 00:20:48.896 A:middle
like that in Unicode,
and I can just go see

00:20:48.896 --> 00:20:50.526 A:middle
if San Francisco has
it, which it does,

00:20:50.526 --> 00:20:52.336 A:middle
and you typeset it,
and you are done.

00:20:53.006 --> 00:20:55.356 A:middle
Great. But what happens
when you have

00:20:55.356 --> 00:20:56.766 A:middle
to typeset something like this?

00:20:57.346 --> 00:20:59.216 A:middle
Which is not in the font
and is not in Unicode?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:00.016 --> 00:21:06.866 A:middle
So you could write code that
iterates through that string,

00:21:07.236 --> 00:21:10.686 A:middle
and moves along, and
creates some other versions

00:21:10.686 --> 00:21:13.726 A:middle
and repositioned versions
of all these glyphs,

00:21:13.806 --> 00:21:16.606 A:middle
and you may also change
the weight because you want

00:21:16.606 --> 00:21:18.886 A:middle
to make it look similar
to what's next to it.

00:21:19.476 --> 00:21:20.296 A:middle
Maybe you even remember

00:21:20.296 --> 00:21:22.426 A:middle
that there is a fraction
slash inside the font.

00:21:22.426 --> 00:21:23.636 A:middle
You go check it out
in San Francisco,

00:21:23.636 --> 00:21:25.276 A:middle
it's there, boom, you put it in.

00:21:26.346 --> 00:21:27.646 A:middle
And you just wrote
a bunch of code

00:21:27.646 --> 00:21:29.856 A:middle
that you could have
just thrown away

00:21:29.946 --> 00:21:33.626 A:middle
because the fraction
feature does exactly the same

00:21:33.696 --> 00:21:35.266 A:middle
for you automatically.

00:21:36.426 --> 00:21:39.116 A:middle
And it also works for
arbitrary fractions.

00:21:39.866 --> 00:21:45.366 A:middle
So the way this works is not by
having a ligature for 65/324.

00:21:45.776 --> 00:21:48.686 A:middle
I don't have that
glyph in my font.

00:21:48.686 --> 00:21:51.446 A:middle
I actually have smaller
versions of all these numbers

00:21:51.656 --> 00:21:56.176 A:middle
and of this fraction slash
that get assembled together

00:21:56.346 --> 00:21:58.176 A:middle
by the system based
off of the font.

00:21:58.836 --> 00:22:01.166 A:middle
And the great thing
about this is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.836 --> 00:22:01.166 A:middle
And the great thing
about this is

00:22:01.166 --> 00:22:02.276 A:middle
that these are individual
glyphs,

00:22:02.276 --> 00:22:04.526 A:middle
which means tracking will
apply to them as well.

00:22:05.936 --> 00:22:09.966 A:middle
So features are discoverable,
and you can enable them

00:22:09.966 --> 00:22:11.516 A:middle
in the Typography
panel, which is a piece

00:22:11.516 --> 00:22:14.176 A:middle
of UI inside the
Font panel of OS X.

00:22:15.106 --> 00:22:16.906 A:middle
But you can also
enable them in code,

00:22:16.906 --> 00:22:19.346 A:middle
which is the most common
scenario for you guys.

00:22:20.316 --> 00:22:25.256 A:middle
So here I am using the new
systemFontOfSize weight API

00:22:25.256 --> 00:22:26.716 A:middle
to get the light weight.

00:22:27.856 --> 00:22:29.726 A:middle
I can get a font
descriptor out of it.

00:22:30.626 --> 00:22:34.286 A:middle
Once I have that, I can actually
modify it by adding attributes

00:22:34.386 --> 00:22:37.786 A:middle
to it, and some of the
attributes can be the features.

00:22:38.456 --> 00:22:41.766 A:middle
I can turn on one feature at
a time, I can turn it off,

00:22:41.766 --> 00:22:44.396 A:middle
I can also do groups of
features all together.

00:22:45.276 --> 00:22:46.676 A:middle
And once I have that
font descriptor,

00:22:46.676 --> 00:22:48.416 A:middle
I can create another
UIFont out of it.

00:22:49.036 --> 00:22:50.306 A:middle
Or NSFont.

00:22:51.036 --> 00:22:55.006 A:middle
So other features that are
available to you are things

00:22:55.006 --> 00:23:00.266 A:middle
like superiors and superscripts
or inferiors and subscripts.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:55.006 --> 00:23:00.266 A:middle
like superiors and superscripts
or inferiors and subscripts.

00:23:01.556 --> 00:23:05.576 A:middle
Or also uppercase forms
that are used when you want

00:23:05.576 --> 00:23:07.906 A:middle
to typeset math symbols
or other symbols

00:23:07.906 --> 00:23:10.236 A:middle
in between numbers
or capital letters.

00:23:11.936 --> 00:23:13.696 A:middle
But there are some
features in San Francisco

00:23:13.696 --> 00:23:15.986 A:middle
that are really special to
this design, and I just want

00:23:15.986 --> 00:23:16.806 A:middle
to call them out to you.

00:23:17.966 --> 00:23:20.086 A:middle
The first one is the
vertically centered colon,

00:23:21.466 --> 00:23:24.776 A:middle
which is by default the colon
aligns with the lowercase,

00:23:24.776 --> 00:23:25.846 A:middle
so it sits on the baseline,

00:23:25.846 --> 00:23:28.866 A:middle
but when you are typesetting the
time, you really want it to be

00:23:28.866 --> 00:23:30.706 A:middle
in the middle of these
numbers vertically.

00:23:31.236 --> 00:23:34.866 A:middle
So we use this everywhere,
in our lock screen in iOS,

00:23:35.306 --> 00:23:39.316 A:middle
we use it on the title
bar of OS X, on the Watch,

00:23:39.906 --> 00:23:43.016 A:middle
we use it on our stopwatch
apps, so we decided

00:23:43.056 --> 00:23:45.886 A:middle
to make this automatic
because it's so common

00:23:45.886 --> 00:23:48.546 A:middle
to typeset the time
in UI design.

00:23:51.306 --> 00:23:54.406 A:middle
But you may want to opt
out of it if necessary.

00:23:54.406 --> 00:23:57.016 A:middle
The feature code to opt out
of it is the same as the one

00:23:57.016 --> 00:23:58.276 A:middle
to opt into it, essentially.

00:23:59.196 --> 00:24:02.986 A:middle
Another feature is alternate
shapes for numerals 6 and 9.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.196 --> 00:24:02.986 A:middle
Another feature is alternate
shapes for numerals 6 and 9.

00:24:03.946 --> 00:24:06.906 A:middle
So these two shapes are
beautiful when they are large

00:24:06.906 --> 00:24:09.846 A:middle
in their vernacular, their
grotesque genre; however,

00:24:09.846 --> 00:24:12.636 A:middle
they do have an issue
with confusability.

00:24:12.986 --> 00:24:15.206 A:middle
They can be confused when
they are really small either

00:24:15.206 --> 00:24:16.966 A:middle
with each other or with an 8.

00:24:17.916 --> 00:24:21.906 A:middle
So for that, we actually
designed alternate shapes of 6

00:24:21.906 --> 00:24:23.796 A:middle
and 9s inside the
San Francisco fonts

00:24:24.186 --> 00:24:27.716 A:middle
that have these flat sides,
and we use them in situations

00:24:27.716 --> 00:24:30.166 A:middle
like the small dials
on the Watch.

00:24:30.616 --> 00:24:33.946 A:middle
We use them on the serial number
on the back of your Watch.

00:24:34.136 --> 00:24:35.986 A:middle
But you can also use
them in serial numbers

00:24:35.986 --> 00:24:37.086 A:middle
where the context is not enough

00:24:37.086 --> 00:24:38.736 A:middle
to tell you what
are you looking at.

00:24:39.896 --> 00:24:42.686 A:middle
So because their usage
is context dependent,

00:24:43.116 --> 00:24:45.656 A:middle
we don't actually turn it
on for you automatically.

00:24:46.646 --> 00:24:50.166 A:middle
But it's available with the --
this feature code that you see.

00:24:50.806 --> 00:24:55.596 A:middle
And next I want to kind
of combine two ideas.

00:24:55.836 --> 00:24:58.246 A:middle
The first is typographic
features that we just saw,

00:24:58.686 --> 00:25:00.806 A:middle
and the second one is optical
sizes that we saw earlier.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.686 --> 00:25:00.806 A:middle
and the second one is optical
sizes that we saw earlier.

00:25:01.806 --> 00:25:05.046 A:middle
And so the display and text
fonts are really designed

00:25:05.046 --> 00:25:08.236 A:middle
differently, and we take into
consideration the point sizes

00:25:08.626 --> 00:25:09.516 A:middle
that they will be used at.

00:25:10.316 --> 00:25:12.896 A:middle
So if you are typesetting a
fraction in display sizes,

00:25:12.896 --> 00:25:15.886 A:middle
it's fine if you have the curly
shape of the 6, but if you are

00:25:15.886 --> 00:25:19.366 A:middle
in text fonts, you really
want the other shape

00:25:19.366 --> 00:25:22.146 A:middle
because that's -- imagine that
would be set at 12 points.

00:25:22.476 --> 00:25:24.526 A:middle
The fraction would be
probably 6 points, right?

00:25:25.086 --> 00:25:26.676 A:middle
So we actually designed
them differently

00:25:26.996 --> 00:25:28.776 A:middle
and spaced them further apart.

00:25:29.196 --> 00:25:31.406 A:middle
And we do this for a
whole host of glyphs

00:25:31.436 --> 00:25:32.786 A:middle
in our San Francisco font.

00:25:32.786 --> 00:25:34.756 A:middle
So we make them different
between text and display

00:25:35.136 --> 00:25:38.716 A:middle
on purpose to make them
either be more beautiful

00:25:38.716 --> 00:25:39.406 A:middle
or more legible.

00:25:41.916 --> 00:25:44.186 A:middle
So these are typographic
features.

00:25:44.646 --> 00:25:46.916 A:middle
They are behavior that is
embedded inside a font.

00:25:48.456 --> 00:25:51.136 A:middle
Some features are
automatically turned on for you

00:25:51.136 --> 00:25:58.836 A:middle
by System Font, and others
require you to opt into them.

00:25:59.076 --> 00:26:02.986 A:middle
So next I want to talk to you
about numbers for a second,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:59.076 --> 00:26:02.986 A:middle
So next I want to talk to you
about numbers for a second,

00:26:03.156 --> 00:26:06.376 A:middle
not the app, but actual
numbers inside the font.

00:26:07.606 --> 00:26:11.646 A:middle
So we type designers spend a lot
of time thinking about the shape

00:26:11.646 --> 00:26:13.436 A:middle
of numbers to make
them look beautiful

00:26:13.436 --> 00:26:15.306 A:middle
or functional or
all these things.

00:26:16.316 --> 00:26:18.556 A:middle
But I want to tell
you about the spacing

00:26:18.556 --> 00:26:21.566 A:middle
of numbers, their widths.

00:26:21.936 --> 00:26:25.246 A:middle
By default, on our platforms,
numbers are always monospaced,

00:26:25.286 --> 00:26:29.366 A:middle
meaning they all have the
same width, which is great

00:26:29.736 --> 00:26:33.596 A:middle
if you need typeset something
like tables, for example.

00:26:33.956 --> 00:26:35.446 A:middle
Monospaced numbers
are really handy

00:26:35.446 --> 00:26:36.986 A:middle
because they make
everything align.

00:26:36.986 --> 00:26:39.406 A:middle
You can also achieve
layouts with, like,

00:26:39.406 --> 00:26:42.186 A:middle
multiple columns with them.

00:26:42.396 --> 00:26:44.266 A:middle
However, they are
not the only numbers

00:26:44.266 --> 00:26:46.496 A:middle
in the San Francisco fonts.

00:26:46.496 --> 00:26:49.056 A:middle
We also have what are
called proportional numbers,

00:26:49.366 --> 00:26:53.086 A:middle
where each number has
its own "natural" width.

00:26:54.256 --> 00:26:56.646 A:middle
So there are situations
where, of course,

00:26:56.646 --> 00:26:59.646 A:middle
monospaced numbers are
clearly what you want.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:01.096 --> 00:27:06.426 A:middle
For example, like this, when
you have proportional numbers,

00:27:06.496 --> 00:27:08.476 A:middle
they will actually
wiggle around,

00:27:09.046 --> 00:27:10.546 A:middle
and monospace numbers
actually stay put.

00:27:11.866 --> 00:27:16.946 A:middle
But you may also typeset
numbers in static labels,

00:27:16.946 --> 00:27:20.766 A:middle
such as when typesetting
a date or a phone number

00:27:21.336 --> 00:27:26.876 A:middle
or a read count in an inbox
or an email address or a URL.

00:27:27.356 --> 00:27:31.286 A:middle
In those cases, really, you want
proportional numbers instead.

00:27:32.636 --> 00:27:36.076 A:middle
So let's take a -- do a case
study with an app like Calendar,

00:27:36.076 --> 00:27:37.846 A:middle
which is fairly numbers heavy.

00:27:38.186 --> 00:27:41.466 A:middle
And if you look at how we
use numbers in this app

00:27:41.466 --> 00:27:43.236 A:middle
and how we typeset
them, you will notice

00:27:43.236 --> 00:27:45.076 A:middle
that they don't really
align with anything else,

00:27:45.076 --> 00:27:47.036 A:middle
and they really are in
line with other text,

00:27:47.276 --> 00:27:49.906 A:middle
meaning they could use
-- they should use,

00:27:49.976 --> 00:27:52.506 A:middle
and they do use proportional
numbers.

00:27:53.516 --> 00:27:58.746 A:middle
So knowing this, we decided
to take a big leap here,

00:27:59.406 --> 00:28:02.096 A:middle
and change the default
of our platforms


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.406 --> 00:28:02.096 A:middle
and change the default
of our platforms

00:28:02.186 --> 00:28:04.516 A:middle
to actually give you
proportional numbers by default

00:28:04.516 --> 00:28:07.146 A:middle
and make you opt into
monospaced numbers.

00:28:08.406 --> 00:28:11.366 A:middle
Now, there is a precedent for
this, and that's the Watch,

00:28:11.826 --> 00:28:14.036 A:middle
which actually ships with
proportional numbers by default.

00:28:15.296 --> 00:28:17.546 A:middle
But it is a big change,
and it may affect layout.

00:28:17.826 --> 00:28:21.106 A:middle
So because of that, we
have provisions in place.

00:28:21.596 --> 00:28:25.216 A:middle
If your app is not linked
against iOS 10.11 --

00:28:25.216 --> 00:28:28.036 A:middle
sorry, OS X 10.11 and iOS 9,

00:28:28.356 --> 00:28:29.986 A:middle
you still get monospaced
numbers by default.

00:28:30.336 --> 00:28:32.526 A:middle
The system turns on the
monospace feature for you.

00:28:34.066 --> 00:28:38.876 A:middle
And -- but if you do recompile,
you get proportionals.

00:28:39.996 --> 00:28:43.746 A:middle
And there is a new shortcut API
available in AppKit that kind

00:28:43.746 --> 00:28:45.316 A:middle
of abstracts away
the feature code

00:28:45.536 --> 00:28:47.296 A:middle
that I was showing you
earlier, so it makes it easier

00:28:47.296 --> 00:28:51.896 A:middle
for you to adopt this.

00:28:51.996 --> 00:28:55.136 A:middle
So lastly, we are going to
look at some potential pitfalls

00:28:55.136 --> 00:28:57.686 A:middle
in our font APIs, both
with these new fonts

00:28:57.686 --> 00:28:58.986 A:middle
and with existing fonts.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:01.796 --> 00:29:04.636 A:middle
First of all, the curious
amongst you may have noticed

00:29:04.636 --> 00:29:09.526 A:middle
that in the preview builds of
OS X and iOS, the SF fonts ship

00:29:09.586 --> 00:29:12.766 A:middle
with a name that is --
it starts with a dot.

00:29:13.576 --> 00:29:17.176 A:middle
What that dot means is that
that name is Apple private,

00:29:17.566 --> 00:29:21.666 A:middle
so please don't rely
on it being stable.

00:29:22.336 --> 00:29:25.096 A:middle
We've also seen some
framework developers

00:29:25.196 --> 00:29:27.056 A:middle
that use their own
font-loading code,

00:29:27.056 --> 00:29:29.486 A:middle
such as game framework
developers, for example,

00:29:29.966 --> 00:29:32.196 A:middle
where they rely on the fact --

00:29:32.526 --> 00:29:34.186 A:middle
on the assumption that
fonts are going to be

00:29:34.186 --> 00:29:35.846 A:middle
in a specific place
on the file system.

00:29:36.346 --> 00:29:39.726 A:middle
Now, this is very brittle,
and we would like you

00:29:39.766 --> 00:29:45.516 A:middle
to treat font paths as opaque,
meaning you can access them

00:29:45.516 --> 00:29:47.746 A:middle
through Core text -- you can
access font through Core text,

00:29:47.746 --> 00:29:52.956 A:middle
and you don't have to go hunt
for them on the file system.

00:29:52.956 --> 00:29:56.846 A:middle
Also, if you access
system font by name,

00:29:57.416 --> 00:30:00.376 A:middle
the fontWithName API is
really meant for user fonts.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:57.416 --> 00:30:00.376 A:middle
the fontWithName API is
really meant for user fonts.

00:30:00.376 --> 00:30:02.646 A:middle
So if you have your own fonts,
you can call them that way

00:30:02.646 --> 00:30:05.176 A:middle
and that's great, but if you
instantiate a system font,

00:30:05.606 --> 00:30:07.586 A:middle
later on you extract its
name and then you try

00:30:07.586 --> 00:30:10.536 A:middle
to create another font out of
that, well, now you are opting

00:30:10.536 --> 00:30:13.346 A:middle
out of all the automatic things
that system font does for you,

00:30:13.546 --> 00:30:16.366 A:middle
such as the automatic features,
the size-specific behavior,

00:30:16.756 --> 00:30:18.616 A:middle
the automatic tracking,
and all these things,

00:30:18.616 --> 00:30:20.746 A:middle
so we recommend you
don't do this.

00:30:21.476 --> 00:30:23.966 A:middle
And instead, you can
actually use font descriptors,

00:30:24.476 --> 00:30:29.336 A:middle
which completely encapsulate
the behavior of a font,

00:30:29.576 --> 00:30:34.466 A:middle
so this is the recommended
way for using font objects.

00:30:35.206 --> 00:30:37.126 A:middle
Lastly, with optical sizes,

00:30:37.196 --> 00:30:40.916 A:middle
we are really challenging
some old assumption

00:30:40.966 --> 00:30:45.056 A:middle
as to how fonts work, so for
example, if you typeset a word

00:30:45.056 --> 00:30:49.616 A:middle
at 15 points and later on you
apply a scale to your matrix

00:30:49.616 --> 00:30:52.166 A:middle
and you reuse the same
font object, well,

00:30:52.166 --> 00:30:55.836 A:middle
you are getting a font that
is designed for 15 points at,

00:30:55.836 --> 00:30:57.686 A:middle
I don't know, 120 points.

00:30:58.446 --> 00:31:00.976 A:middle
What you really want to be doing
there is actually reinstantiate


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.446 --> 00:31:00.976 A:middle
What you really want to be doing
there is actually reinstantiate

00:31:00.976 --> 00:31:03.506 A:middle
the font again for that
specific point size,

00:31:03.506 --> 00:31:05.406 A:middle
and you will get
the right behavior.

00:31:06.806 --> 00:31:11.346 A:middle
So we really want you to
treat fonts as opaque objects

00:31:11.416 --> 00:31:13.936 A:middle
if possible, so use the
system APIs to get to them.

00:31:15.276 --> 00:31:18.846 A:middle
Fonts with optical qualities
really break old assumptions.

00:31:20.246 --> 00:31:24.306 A:middle
And relying on the system font
APIs will give you the right

00:31:24.356 --> 00:31:25.876 A:middle
behavior all the time.

00:31:25.876 --> 00:31:28.176 A:middle
So that's -- please use these.

00:31:30.116 --> 00:31:32.276 A:middle
And that's all we
have for today.

00:31:32.276 --> 00:31:33.886 A:middle
So we looked at the new
San Francisco fonts,

00:31:34.346 --> 00:31:36.336 A:middle
we looked at concepts
like optical sizes,

00:31:36.336 --> 00:31:38.176 A:middle
the big idea in San Francisco.

00:31:38.746 --> 00:31:41.546 A:middle
We looked at automatic
tracking, the weights

00:31:41.546 --> 00:31:42.856 A:middle
and the features
of San Francisco.

00:31:43.356 --> 00:31:45.716 A:middle
We looked at the big
change coming up in numbers

00:31:45.776 --> 00:31:47.076 A:middle
in our platforms, which means

00:31:47.076 --> 00:31:50.036 A:middle
that they are becoming
proportional by default.

00:31:50.526 --> 00:31:53.426 A:middle
And we looked at some
potential pitfalls in our APIs.

00:31:54.416 --> 00:31:57.896 A:middle
So if you have questions, you
can get in touch with Mike

00:31:57.896 --> 00:32:00.786 A:middle
or Curt, or go on our
Developer websites.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:57.896 --> 00:32:00.786 A:middle
or Curt, or go on our
Developer websites.

00:32:01.626 --> 00:32:04.456 A:middle
There's also a session
about Watch Design Tips

00:32:04.456 --> 00:32:07.026 A:middle
and Tricks later and
a Text and Fonts Lab

00:32:07.026 --> 00:32:08.386 A:middle
where we can answer
your questions.

00:32:08.976 --> 00:32:10.556 A:middle
So thank you very much.

00:32:11.508 --> 00:32:13.508 A:middle
[Applause]

