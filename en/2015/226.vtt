WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:07.516 --> 00:00:14.546 A:middle
[ Music ]

00:00:15.046 --> 00:00:16.026 A:middle
(Applause)

00:00:26.296 --> 00:00:33.396 A:middle
&gt;&gt; PHILIPPE HAUSLER:
Good morning.

00:00:33.566 --> 00:00:34.906 A:middle
My name is Philippe Hausler.

00:00:35.006 --> 00:00:37.616 A:middle
I work in the Frameworks
Group, on Foundation.

00:00:37.616 --> 00:00:39.516 A:middle
And today we are going to talk

00:00:39.516 --> 00:00:42.656 A:middle
about NSOperation
and NSOperationQueue.

00:00:43.516 --> 00:00:46.486 A:middle
These are two extremely
powerful classes

00:00:46.976 --> 00:00:48.946 A:middle
that can transform
your application

00:00:49.316 --> 00:00:56.626 A:middle
from running tasks linearly
to a hybrid scenario

00:00:56.926 --> 00:01:00.036 A:middle
of both the object-orientated


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:56.926 --> 00:01:00.036 A:middle
of both the object-orientated

00:01:00.036 --> 00:01:02.306 A:middle
and functionally
asynchronous concepts.

00:01:03.106 --> 00:01:05.025 A:middle
Now, I am pretty sure that all

00:01:05.025 --> 00:01:06.976 A:middle
of you have seen
this application.

00:01:09.336 --> 00:01:12.366 A:middle
The WWDC app uses NSOperation

00:01:12.366 --> 00:01:14.506 A:middle
and NSOperationQueue
extensively.

00:01:15.826 --> 00:01:22.616 A:middle
To be able to accomplish
numerous different tasks all the

00:01:23.196 --> 00:01:26.616 A:middle
way from downloading content
from the Internet all the way

00:01:26.616 --> 00:01:30.026 A:middle
to synchronizing the database
as well as even concepts

00:01:30.026 --> 00:01:33.356 A:middle
like presenting alerts
or displaying videos.

00:01:33.976 --> 00:01:37.926 A:middle
And here to take you more
in depth of NSOperation

00:01:37.956 --> 00:01:42.026 A:middle
and NSOperationQueue and how
it actually was used to be able

00:01:42.026 --> 00:01:44.906 A:middle
to implement the WWDC
app is Dave DeLong.

00:01:45.276 --> 00:01:45.426 A:middle
Dave?

00:01:46.516 --> 00:01:53.716 A:middle
[ Applause ]

00:01:54.216 --> 00:01:54.976 A:middle
&gt;&gt; DAVE DeLONG: Thanks,
Philippe.

00:01:55.516 --> 00:02:01.546 A:middle
[ Silence ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:55.516 --> 00:02:01.546 A:middle
[ Silence ]

00:02:02.046 --> 00:02:05.456 A:middle
So, my name is Dave DeLong, and
I am a Frameworks Evangelist

00:02:05.456 --> 00:02:08.045 A:middle
at Apple, and I am also
the primary engineer

00:02:08.045 --> 00:02:11.126 A:middle
on the WWDC app, which hopefully
you are all familiar with.

00:02:13.266 --> 00:02:16.776 A:middle
Today we are going to be
covering three main areas

00:02:16.916 --> 00:02:19.466 A:middle
of the WWDC app and NSOperation.

00:02:20.126 --> 00:02:23.326 A:middle
First, we are going to go over
the core concepts of NSOperation

00:02:23.526 --> 00:02:26.996 A:middle
and how you can understand
its API and take advantage

00:02:26.996 --> 00:02:28.366 A:middle
of its powerful state machine.

00:02:29.276 --> 00:02:32.686 A:middle
Next, we are going to go
beyond those basics and look

00:02:32.686 --> 00:02:35.886 A:middle
at the challenges of
the WWDC app across

00:02:36.306 --> 00:02:37.416 A:middle
and how we solved them.

00:02:38.206 --> 00:02:41.136 A:middle
And finally, we are going to
talk about some sample code

00:02:41.426 --> 00:02:43.356 A:middle
that we have provided for you.

00:02:46.356 --> 00:02:48.976 A:middle
So first, let's look
at some core concepts.

00:02:53.226 --> 00:02:55.076 A:middle
Any time you use an NSOperation,

00:02:55.076 --> 00:02:58.026 A:middle
you will always be using
an NSOperationQueue.

00:02:58.886 --> 00:03:01.886 A:middle
And the way to think about
an NSOperationQueue is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:58.886 --> 00:03:01.886 A:middle
And the way to think about
an NSOperationQueue is

00:03:01.886 --> 00:03:04.366 A:middle
that it's a high-level
dispatch queue.

00:03:04.996 --> 00:03:07.556 A:middle
Hopefully you are all
familiar with dispatch queues

00:03:07.666 --> 00:03:09.436 A:middle
from using Grand
Central Dispatch.

00:03:10.396 --> 00:03:13.446 A:middle
Now, by providing a wrapper
around an NSOperationQueue,

00:03:13.666 --> 00:03:15.516 A:middle
we can gain some
additional functionality.

00:03:17.066 --> 00:03:23.726 A:middle
For example, NSOperationQueue
makes it very easy

00:03:23.836 --> 00:03:27.806 A:middle
to cancel operations that
have not yet begun executing.

00:03:28.686 --> 00:03:31.566 A:middle
While you can perform
cancellation of dispatch blocks,

00:03:31.946 --> 00:03:33.396 A:middle
it is somewhat tricky to do so,

00:03:33.666 --> 00:03:35.976 A:middle
but NSOperationQueue
makes this quite easy.

00:03:39.046 --> 00:03:39.956 A:middle
Another thing that you get

00:03:39.956 --> 00:03:42.876 A:middle
with NSOperationQueue is
a property called the max

00:03:42.926 --> 00:03:44.506 A:middle
concurrent operation count.

00:03:44.506 --> 00:03:47.506 A:middle
And to understand what
this is, let's take a look

00:03:47.506 --> 00:03:48.716 A:middle
at a little animation.

00:03:52.156 --> 00:03:54.646 A:middle
If we set the max
concurrent operation count

00:03:54.716 --> 00:03:57.046 A:middle
of an NSOperationQueue to be 1,

00:03:58.026 --> 00:04:00.666 A:middle
then we essentially make
our NSOperationQueue


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:58.026 --> 00:04:00.666 A:middle
then we essentially make
our NSOperationQueue

00:04:00.716 --> 00:04:01.976 A:middle
into a serial operation queue.

00:04:04.266 --> 00:04:07.546 A:middle
So let's load up a bunch of
operations onto this queue.

00:04:09.336 --> 00:04:12.226 A:middle
With the max concurrent
operation count of 1,

00:04:12.766 --> 00:04:15.526 A:middle
the queue will pull off
these operations one by one

00:04:15.836 --> 00:04:17.166 A:middle
and execute them in order.

00:04:17.776 --> 00:04:20.466 A:middle
The next operation will
not begin executing

00:04:20.606 --> 00:04:22.366 A:middle
until the previous
one has finished.

00:04:23.576 --> 00:04:24.726 A:middle
That's a serial queue.

00:04:27.476 --> 00:04:30.216 A:middle
However, by default, the value

00:04:30.216 --> 00:04:32.426 A:middle
of this property
is a default value,

00:04:32.926 --> 00:04:35.766 A:middle
which means as many
as the system allows.

00:04:36.446 --> 00:04:41.896 A:middle
So this means that our operation
queue can perform multiple

00:04:41.896 --> 00:04:45.076 A:middle
operations simultaneously
as system resources allow.

00:04:46.526 --> 00:04:50.386 A:middle
So in this case, our operation
queue might be performing two

00:04:50.386 --> 00:04:51.446 A:middle
operations at once.

00:04:52.216 --> 00:04:56.306 A:middle
The ability to change the
behavior of an operation queue

00:04:56.306 --> 00:04:58.186 A:middle
like this can be very powerful.

00:04:58.496 --> 00:05:00.856 A:middle
We don't have to decide
this at creation time


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.496 --> 00:05:00.856 A:middle
We don't have to decide
this at creation time

00:05:00.966 --> 00:05:02.096 A:middle
of our operation queue.

00:05:07.516 --> 00:05:09.856 A:middle
So that's NSOperationQueue.

00:05:10.466 --> 00:05:12.386 A:middle
Now let's take a
look at NSOperation.

00:05:13.006 --> 00:05:17.546 A:middle
Where the queue is a high-level
wrapper around a dispatch queue,

00:05:17.966 --> 00:05:21.236 A:middle
you can think of an NSOperation
as a high-level wrapper

00:05:21.236 --> 00:05:22.776 A:middle
around a dispatch block.

00:05:24.416 --> 00:05:29.096 A:middle
Now, in general, NSOperations
run for a little bit longer

00:05:29.096 --> 00:05:30.916 A:middle
than you would expect
a block to run,

00:05:31.796 --> 00:05:34.866 A:middle
so blocks usually take
a few nanoseconds,

00:05:34.866 --> 00:05:37.376 A:middle
maybe at most a millisecond,
to execute.

00:05:38.356 --> 00:05:42.366 A:middle
NSOperations, on the other hand,
can be much longer, for anywhere

00:05:42.366 --> 00:05:45.156 A:middle
from a couple of milliseconds
to even several minutes,

00:05:45.236 --> 00:05:46.676 A:middle
as we will talk about later.

00:05:49.186 --> 00:05:51.896 A:middle
The other thing that's really
nice about an NSOperation is

00:05:51.986 --> 00:05:55.506 A:middle
that since it's a class,
you can subclass it

00:05:55.736 --> 00:05:59.146 A:middle
and provide your own custom
logic on how it executes.

00:05:59.836 --> 00:06:02.486 A:middle
So in order to subclass
NSOperation,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.836 --> 00:06:02.486 A:middle
So in order to subclass
NSOperation,

00:06:03.036 --> 00:06:04.796 A:middle
let's take a look
at its lifecycle.

00:06:06.096 --> 00:06:11.396 A:middle
When you create an NSOperation,
it always starts off in a state

00:06:12.736 --> 00:06:14.206 A:middle
that we call the pending state.

00:06:14.266 --> 00:06:16.526 A:middle
So this is the operation
when it's initialized

00:06:16.856 --> 00:06:19.966 A:middle
and as it's being put
onto its operation queue.

00:06:21.516 --> 00:06:24.506 A:middle
Now, at some point,
the operation is going

00:06:24.746 --> 00:06:27.606 A:middle
to become ready to execute,
and it enters the ready state.

00:06:28.356 --> 00:06:32.376 A:middle
And after it becomes ready, the
operation queue will pull it off

00:06:32.376 --> 00:06:34.266 A:middle
of the queue and
begin executing it.

00:06:34.896 --> 00:06:37.496 A:middle
And like I said, this execution
can be anywhere from a couple

00:06:37.496 --> 00:06:40.456 A:middle
of milliseconds to several
minutes to even longer.

00:06:44.436 --> 00:06:46.336 A:middle
After execution finishes,

00:06:47.766 --> 00:06:51.406 A:middle
the operation enters the
finish state, its final state.

00:06:51.986 --> 00:06:53.626 A:middle
So that's pretty simple.

00:06:54.276 --> 00:06:57.896 A:middle
The other thing that
an operation can do is

00:06:57.896 --> 00:07:01.556 A:middle
at any point, it can
enter a canceled state.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:57.896 --> 00:07:01.556 A:middle
at any point, it can
enter a canceled state.

00:07:02.936 --> 00:07:04.626 A:middle
So let's take a look
at cancellation.

00:07:08.376 --> 00:07:11.486 A:middle
Cancellation on an
NSOperation is defined

00:07:11.486 --> 00:07:14.506 A:middle
as a simple Boolean
property, is canceled.

00:07:14.506 --> 00:07:16.586 A:middle
And the important
thing to understand

00:07:16.586 --> 00:07:20.646 A:middle
about this property is that
it only changes the state

00:07:20.746 --> 00:07:21.526 A:middle
of the property.

00:07:21.906 --> 00:07:24.586 A:middle
When you cancel an operation,
all that's happening is

00:07:24.586 --> 00:07:26.416 A:middle
that a Boolean value
is getting flipped.

00:07:28.176 --> 00:07:31.716 A:middle
So as you subclass
NSOperation, it is up to you

00:07:31.716 --> 00:07:35.616 A:middle
to decide what it means for
your NSOperation to be canceled.

00:07:36.316 --> 00:07:39.396 A:middle
So, for example, if your
operation is performing a

00:07:39.396 --> 00:07:43.406 A:middle
network task, then maybe
canceling your operation is akin

00:07:43.666 --> 00:07:46.506 A:middle
to canceling your
network communication.

00:07:47.536 --> 00:07:49.096 A:middle
Or perhaps if you are
performing some sort

00:07:49.096 --> 00:07:51.636 A:middle
of database transaction
in your operation,

00:07:51.926 --> 00:07:54.736 A:middle
then perhaps canceling
your operation would be

00:07:54.736 --> 00:07:56.696 A:middle
like discarding that
transaction.

00:07:57.406 --> 00:07:59.346 A:middle
So as you subclass NSOperation,

00:07:59.636 --> 00:08:03.176 A:middle
be sure to observe this value
changing and react appropriately


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.636 --> 00:08:03.176 A:middle
be sure to observe this value
changing and react appropriately

00:08:03.466 --> 00:08:04.976 A:middle
if there's any reaction
you need to do.

00:08:07.296 --> 00:08:08.666 A:middle
The other thing to be aware

00:08:08.666 --> 00:08:11.816 A:middle
of with cancellation is it is
susceptible to race conditions.

00:08:13.276 --> 00:08:14.066 A:middle
What do I mean by this?

00:08:14.626 --> 00:08:16.966 A:middle
Well, let's consider an
operation that's executing

00:08:16.966 --> 00:08:21.916 A:middle
in the background, and maybe in
your UI you have a cancel button

00:08:22.126 --> 00:08:23.576 A:middle
that would cancel
this operation.

00:08:24.146 --> 00:08:27.036 A:middle
If the user taps
the cancel button,

00:08:27.296 --> 00:08:30.606 A:middle
it's going to take a small
amount of time for that message,

00:08:30.676 --> 00:08:33.106 A:middle
to cancel, to move
from the main queue

00:08:33.736 --> 00:08:35.296 A:middle
to the operation
in the background.

00:08:36.436 --> 00:08:38.416 A:middle
And if in that small window

00:08:38.416 --> 00:08:41.986 A:middle
of time your operation
finishes executing,

00:08:42.655 --> 00:08:45.236 A:middle
then your operation will
actually never be canceled

00:08:45.476 --> 00:08:48.346 A:middle
because an operation cannot
go from the finished state

00:08:48.666 --> 00:08:49.856 A:middle
to the canceled state.

00:08:51.136 --> 00:08:54.526 A:middle
So it is important to understand
that just because you try

00:08:54.526 --> 00:08:57.476 A:middle
to cancel an operation,
there are some cases

00:08:57.776 --> 00:08:59.446 A:middle
where it won't actually cancel.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:00.956 --> 00:09:04.036 A:middle
However, if you do need
to cancel an operation,

00:09:04.386 --> 00:09:05.936 A:middle
it is very easy to do so.

00:09:06.456 --> 00:09:08.706 A:middle
All you need to do is
call the cancel method.

00:09:11.196 --> 00:09:12.746 A:middle
So that's cancellation.

00:09:12.746 --> 00:09:16.476 A:middle
Now let's take a look at
this other interesting state

00:09:17.256 --> 00:09:18.436 A:middle
called Ready.

00:09:20.616 --> 00:09:24.826 A:middle
The readiness of an
NSOperation, like cancellation,

00:09:25.196 --> 00:09:28.356 A:middle
is defined as a simple
Boolean property, is ready.

00:09:29.806 --> 00:09:32.026 A:middle
And what this property means is

00:09:32.026 --> 00:09:34.506 A:middle
that the operation
is ready to execute.

00:09:35.366 --> 00:09:38.996 A:middle
So let's take a look at how
this interacts with operations

00:09:39.146 --> 00:09:40.256 A:middle
on an operation queue.

00:09:41.656 --> 00:09:44.566 A:middle
So again, we've got our
serial operation queue,

00:09:44.736 --> 00:09:48.126 A:middle
and we are going to load
up a bunch of operations,

00:09:48.126 --> 00:09:51.036 A:middle
and they are all in the
initial blue pending state.

00:09:52.216 --> 00:09:54.126 A:middle
Now, the first operation

00:09:54.326 --> 00:09:58.686 A:middle
to enter the ready state
is the first operation

00:09:58.686 --> 00:10:02.926 A:middle
that will be executed, even,
for example, in this case,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.686 --> 00:10:02.926 A:middle
that will be executed, even,
for example, in this case,

00:10:03.076 --> 00:10:06.346 A:middle
if it's the fourth operation
that was put onto the queue.

00:10:06.956 --> 00:10:09.936 A:middle
So once the operation is
ready, it begins executing.

00:10:11.426 --> 00:10:14.266 A:middle
Then, as other operations
become ready,

00:10:14.846 --> 00:10:17.526 A:middle
they are pulled off
the queue and executed.

00:10:19.056 --> 00:10:21.146 A:middle
And in this case, since
we have a serial queue,

00:10:21.146 --> 00:10:25.556 A:middle
only executing one at a time,
if two operations become ready

00:10:25.706 --> 00:10:28.246 A:middle
at the same time,
then the first one

00:10:28.816 --> 00:10:31.146 A:middle
that has a higher priority
will be pulled off first,

00:10:31.526 --> 00:10:33.326 A:middle
and then the second
one will be executed.

00:10:33.946 --> 00:10:37.146 A:middle
And then, as the other
operations become ready,

00:10:37.396 --> 00:10:39.976 A:middle
they are also pulled off
the queue and executed.

00:10:42.046 --> 00:10:43.346 A:middle
So that's brief look
at readiness.

00:10:46.176 --> 00:10:48.146 A:middle
Now, what can we do with this?

00:10:49.056 --> 00:10:51.916 A:middle
Well, we can make dependencies.

00:10:53.086 --> 00:10:57.086 A:middle
Dependencies are a way for us
to express a strict ordering

00:10:57.506 --> 00:10:59.686 A:middle
between our operations,
that first we want

00:10:59.686 --> 00:11:03.166 A:middle
to execute this thing, and then
we want to execute that thing.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.686 --> 00:11:03.166 A:middle
to execute this thing, and then
we want to execute that thing.

00:11:07.656 --> 00:11:08.906 A:middle
And the neat thing

00:11:08.906 --> 00:11:13.306 A:middle
about dependencies is they
provide the base definition

00:11:13.546 --> 00:11:16.586 A:middle
for what it means for an
operation to be ready.

00:11:18.606 --> 00:11:23.186 A:middle
By default, an operation
will become ready if all

00:11:23.186 --> 00:11:25.516 A:middle
of its dependencies
have finished executing.

00:11:25.516 --> 00:11:27.526 A:middle
This is behavior that
you get for free.

00:11:30.106 --> 00:11:32.826 A:middle
The other neat thing
about dependencies is

00:11:32.826 --> 00:11:36.556 A:middle
that they are not limited
by operation queues.

00:11:36.786 --> 00:11:37.626 A:middle
Now, what do I mean by this?

00:11:38.366 --> 00:11:41.536 A:middle
If you have two operation
queues in your application,

00:11:42.766 --> 00:11:46.406 A:middle
operations in the first
queue can be dependent

00:11:46.406 --> 00:11:48.996 A:middle
on the operations
in the second queue.

00:11:49.116 --> 00:11:52.826 A:middle
And we are going to see later
how this can enable some really

00:11:52.826 --> 00:11:53.806 A:middle
powerful patterns.

00:11:55.366 --> 00:11:57.766 A:middle
Now, setting up dependencies
amongst your operations,

00:11:58.316 --> 00:11:59.876 A:middle
again, is extremely simple.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:00.666 --> 00:12:04.226 A:middle
All we need to do is use
the add dependency method.

00:12:04.726 --> 00:12:08.566 A:middle
So in this case, operation
B will become dependent

00:12:08.836 --> 00:12:12.536 A:middle
on the successful
exectution of operation A.

00:12:12.536 --> 00:12:18.566 A:middle
And so operation B will not
execute until after operation A.

00:12:18.676 --> 00:12:22.306 A:middle
This is guaranteed.

00:12:22.306 --> 00:12:26.656 A:middle
Now, with dependencies, we can
run into a couple of problems,

00:12:27.356 --> 00:12:29.116 A:middle
like operation deadlock.

00:12:30.436 --> 00:12:34.276 A:middle
So if I have an operation
A and another operation B

00:12:34.626 --> 00:12:38.806 A:middle
that is dependent upon the
execution of A, this is fine.

00:12:39.866 --> 00:12:45.826 A:middle
However, if I inadvertently
make A also dependent on B,

00:12:46.756 --> 00:12:49.736 A:middle
then these two operations
will never execute

00:12:50.036 --> 00:12:52.796 A:middle
because they will both be
waiting on each other to finish,

00:12:52.796 --> 00:12:56.406 A:middle
and since they are both waiting,
they will both never start.

00:12:57.286 --> 00:12:59.006 A:middle
So as you are setting
up dependencies

00:12:59.006 --> 00:13:01.676 A:middle
in your application,
don't do this.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.006 --> 00:13:01.676 A:middle
in your application,
don't do this.

00:13:05.316 --> 00:13:08.936 A:middle
Now, the WWDC app uses
dependencies all over the place.

00:13:09.736 --> 00:13:13.356 A:middle
And a really simple example is
what happens when you tap the

00:13:13.356 --> 00:13:16.396 A:middle
"add to favorites" button
on a session in the app,

00:13:16.556 --> 00:13:18.586 A:middle
which hopefully you all
did for this session.

00:13:20.636 --> 00:13:21.776 A:middle
When you tap that button,

00:13:22.326 --> 00:13:24.386 A:middle
we're going to first create
an operation called the

00:13:24.386 --> 00:13:25.556 A:middle
login operation.

00:13:25.676 --> 00:13:30.136 A:middle
This is an operation that
guarantees that you have logged

00:13:30.136 --> 00:13:33.556 A:middle
into the app with your
developer name and password.

00:13:34.086 --> 00:13:39.316 A:middle
Next, we are going to create
another operation called the

00:13:39.946 --> 00:13:41.346 A:middle
User Info operation.

00:13:42.086 --> 00:13:45.226 A:middle
This is an operation that
guarantees that the user name

00:13:45.226 --> 00:13:48.986 A:middle
and password are actually a
developer username and password

00:13:48.986 --> 00:13:53.046 A:middle
and not, for example, your
iTunes username and password.

00:13:53.836 --> 00:13:57.706 A:middle
So your Apple ID is an
appropriate developer Apple ID.

00:13:59.076 --> 00:14:03.486 A:middle
Now, favorites in the WWDC
app are stored in CloudKit,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.076 --> 00:14:03.486 A:middle
Now, favorites in the WWDC
app are stored in CloudKit,

00:14:03.766 --> 00:14:06.246 A:middle
so we also need another
operation to make sure

00:14:06.496 --> 00:14:09.006 A:middle
that we have access to
your iCloud account.

00:14:09.726 --> 00:14:11.456 A:middle
So this happens silently,

00:14:11.756 --> 00:14:14.066 A:middle
because we are not
requesting permission

00:14:14.126 --> 00:14:16.126 A:middle
to see your first name
and last name in the app,

00:14:17.276 --> 00:14:19.326 A:middle
so we need to make sure that
you have an iCloud account.

00:14:20.106 --> 00:14:24.516 A:middle
And finally, we can set up
the save favorite operation,

00:14:24.716 --> 00:14:27.206 A:middle
and this is dependent on
the successful completion

00:14:27.256 --> 00:14:28.926 A:middle
of verifying that
you are a developer

00:14:29.346 --> 00:14:31.556 A:middle
and the successful
completion of verifying

00:14:31.786 --> 00:14:33.786 A:middle
that you have an iCloud account.

00:14:34.996 --> 00:14:36.496 A:middle
So that's a simple example.

00:14:37.006 --> 00:14:38.736 A:middle
Let's take a look at a
bit more complex one.

00:14:40.156 --> 00:14:44.146 A:middle
When the WWDC app starts
up, there's a bunch

00:14:44.146 --> 00:14:45.966 A:middle
of setup that we need to do.

00:14:47.026 --> 00:14:50.686 A:middle
First, we are going to download
a small configuration file,

00:14:51.216 --> 00:14:53.076 A:middle
and this file will
tell us small things

00:14:53.076 --> 00:14:55.426 A:middle
like what's the most
recently supported version

00:14:55.426 --> 00:14:56.326 A:middle
of the application,

00:14:56.836 --> 00:14:59.586 A:middle
what features we have
enabled, and so on.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:00.516 --> 00:15:02.966 A:middle
So after we download
this file, we are going

00:15:02.966 --> 00:15:04.716 A:middle
to perform a version
check to make sure

00:15:04.716 --> 00:15:07.336 A:middle
that you are running the
latest version of the WWDC app.

00:15:08.726 --> 00:15:11.166 A:middle
And then after we check
the version of the app,

00:15:11.656 --> 00:15:14.236 A:middle
we can start downloading
useful pieces of information,

00:15:14.696 --> 00:15:17.196 A:middle
such as the news that
we show in the News tab

00:15:17.626 --> 00:15:21.206 A:middle
and the schedule
for the conference.

00:15:21.206 --> 00:15:22.966 A:middle
After we've downloaded
the schedule,

00:15:23.476 --> 00:15:26.166 A:middle
then we can start importing
any favorites that you've saved

00:15:26.166 --> 00:15:28.716 A:middle
to iCloud, any feedback
that you've submitted

00:15:28.886 --> 00:15:31.476 A:middle
so you can see it in the
app, and we are also going

00:15:31.476 --> 00:15:34.856 A:middle
to start downloading
the list of videos.

00:15:34.936 --> 00:15:37.956 A:middle
All of these things require the
schedule to first be in place.

00:15:39.096 --> 00:15:44.306 A:middle
And then finally, we can save
our NSManaged object context,

00:15:45.116 --> 00:15:46.836 A:middle
where we are saving all
of this information.

00:15:47.816 --> 00:15:49.786 A:middle
So let's see how dependencies

00:15:50.066 --> 00:15:53.956 A:middle
and operation lifecycle
affect the execution

00:15:54.286 --> 00:15:55.286 A:middle
of these operations.

00:15:55.536 --> 00:15:56.836 A:middle
And we are going
to move them all

00:15:57.106 --> 00:15:58.976 A:middle
into the Pending
Operations state.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:00.026 --> 00:16:01.396 A:middle
Now, the first operation

00:16:01.396 --> 00:16:04.306 A:middle
to download the app
settings has no dependencies,

00:16:04.566 --> 00:16:06.876 A:middle
so it immediately
becomes ready to execute.

00:16:07.566 --> 00:16:11.216 A:middle
And so our operation queue
is going to pull it off,

00:16:11.406 --> 00:16:13.786 A:middle
execute it, and then
it's going to finish.

00:16:14.696 --> 00:16:15.736 A:middle
Now, when it finishes,

00:16:16.926 --> 00:16:20.496 A:middle
the version check operation
also immediately becomes ready

00:16:20.496 --> 00:16:22.756 A:middle
to execute, and so it's going

00:16:22.756 --> 00:16:24.686 A:middle
to get pulled off the
queue and executed.

00:16:27.046 --> 00:16:31.566 A:middle
When it finishes, the next three
operations simultaneously become

00:16:31.566 --> 00:16:32.626 A:middle
ready to execute.

00:16:33.166 --> 00:16:36.476 A:middle
So they're going
to start executing.

00:16:37.856 --> 00:16:39.436 A:middle
And as they finish executing,

00:16:40.136 --> 00:16:42.686 A:middle
more and more operations
will become ready to execute.

00:16:43.116 --> 00:16:45.456 A:middle
They will be pulled off
the queue and executed.

00:16:46.746 --> 00:16:49.646 A:middle
Now, the important thing to
realize here and to notice is

00:16:49.646 --> 00:16:51.256 A:middle
that this final operation

00:16:51.606 --> 00:16:55.496 A:middle
to save our context does
not become ready to execute

00:16:55.716 --> 00:16:58.246 A:middle
until everything else
has already finished.

00:16:58.736 --> 00:17:02.116 A:middle
By using dependencies, we can
guarantee that things happen


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:58.736 --> 00:17:02.116 A:middle
By using dependencies, we can
guarantee that things happen

00:17:02.166 --> 00:17:06.306 A:middle
in the correct order and that
nothing will get out of order.

00:17:06.925 --> 00:17:08.316 A:middle
So now that this one is ready,

00:17:08.715 --> 00:17:11.205 A:middle
it can be executed,
and it can finish.

00:17:11.386 --> 00:17:13.116 A:middle
And App Start-up can continue.

00:17:14.226 --> 00:17:15.996 A:middle
So that's a look
at dependencies.

00:17:19.526 --> 00:17:22.816 A:middle
Overall, NSOperations
are a fantastic way

00:17:22.816 --> 00:17:24.846 A:middle
to abstract logic in your code.

00:17:26.195 --> 00:17:30.676 A:middle
By putting our logic inside of
operations, it makes it easier

00:17:31.436 --> 00:17:33.946 A:middle
to simplify these logic
changes because we are dealing

00:17:33.946 --> 00:17:36.886 A:middle
with isolated pieces of
work, much like we do

00:17:36.886 --> 00:17:38.126 A:middle
when we are dealing
with a block.

00:17:38.756 --> 00:17:44.346 A:middle
As an example of this, the
WWDC app this year moved

00:17:44.346 --> 00:17:47.676 A:middle
from being -- from saving
your favorites and feedback

00:17:47.676 --> 00:17:50.806 A:middle
on a custom backend,
to being on CloudKit.

00:17:51.926 --> 00:17:53.706 A:middle
Now, at this point I want
you all to think about,

00:17:54.026 --> 00:17:58.136 A:middle
what would it take to move
your application from a custom,

00:17:58.246 --> 00:18:01.346 A:middle
from whatever service you
are using now to CloudKit?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.246 --> 00:18:01.346 A:middle
from whatever service you
are using now to CloudKit?

00:18:02.236 --> 00:18:04.986 A:middle
And if you are suddenly
panicking, and all of the places

00:18:04.986 --> 00:18:07.276 A:middle
in your code where you've
got network communication,

00:18:07.276 --> 00:18:10.506 A:middle
and all these dependencies
on, you know, the intricacies

00:18:10.506 --> 00:18:14.056 A:middle
of your server provider,
then this is a good sign

00:18:14.056 --> 00:18:15.476 A:middle
that you should be
using operations.

00:18:16.756 --> 00:18:18.336 A:middle
In the WWDC app, all

00:18:18.336 --> 00:18:21.586 A:middle
of our network communication
is hidden behind operations,

00:18:22.016 --> 00:18:24.306 A:middle
which means that in order
to change the backend

00:18:24.306 --> 00:18:27.366 A:middle
from using a custom
service to using CloudKit,

00:18:28.006 --> 00:18:31.416 A:middle
all we had to do was
rewrite four small classes.

00:18:31.606 --> 00:18:34.296 A:middle
It took us less than a day
and then a couple more days

00:18:34.296 --> 00:18:35.836 A:middle
to successfully test
our changes.

00:18:36.136 --> 00:18:38.776 A:middle
It was a simple, trivial change.

00:18:41.396 --> 00:18:43.736 A:middle
Now, in all of this, you
might be wondering, well,

00:18:43.736 --> 00:18:45.356 A:middle
what about Grand
Central Dispatch?

00:18:45.906 --> 00:18:50.346 A:middle
Grand Central Dispatch
absolutely has its place.

00:18:50.676 --> 00:18:52.616 A:middle
In fact, when you
download the sample code

00:18:52.616 --> 00:18:55.786 A:middle
for this presentation and look
through it, you will see places

00:18:55.786 --> 00:18:59.106 A:middle
where we are using Grand Central
Dispatch in that sample code


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:00.276 --> 00:19:02.976 A:middle
for things that are not really
appropriate to NSOperations.

00:19:03.556 --> 00:19:05.456 A:middle
So for example, anytime
you simply need

00:19:05.456 --> 00:19:09.636 A:middle
to bounce a method call from
one queue to another queue,

00:19:10.206 --> 00:19:12.156 A:middle
you don't need to wrap
that in an operation.

00:19:12.706 --> 00:19:15.596 A:middle
That's something you want to
keep fast and very lightweight.

00:19:16.096 --> 00:19:18.066 A:middle
Or if you are doing
anything with semaphores

00:19:18.286 --> 00:19:21.556 A:middle
or dispatch group, these
are all perfect use cases

00:19:21.766 --> 00:19:22.976 A:middle
for Grand Central Dispatch.

00:19:25.296 --> 00:19:27.466 A:middle
So that's a look at the basics.

00:19:28.726 --> 00:19:29.486 A:middle
Let's go beyond them.

00:19:32.136 --> 00:19:35.256 A:middle
Now, one of the things that
we realized in the WWDC app is

00:19:35.256 --> 00:19:40.146 A:middle
that there are places where
we want to have UI interaction

00:19:40.586 --> 00:19:43.836 A:middle
but still have it participate
in the operation chain.

00:19:44.346 --> 00:19:45.996 A:middle
So for example, authentication.

00:19:45.996 --> 00:19:48.046 A:middle
We talked earlier about
saving a favorite.

00:19:48.696 --> 00:19:50.036 A:middle
We need to make sure
that you are logged in.

00:19:50.186 --> 00:19:51.336 A:middle
But what if you are not?

00:19:52.946 --> 00:19:57.556 A:middle
Well, we realized that
we can put UI elements,

00:19:57.636 --> 00:20:01.036 A:middle
UI functionality
within our operations.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:57.636 --> 00:20:01.036 A:middle
UI functionality
within our operations.

00:20:01.366 --> 00:20:04.076 A:middle
So for example, the
authentication dialogue

00:20:04.186 --> 00:20:08.646 A:middle
that slides up in the WWDC app
is actually an NSOperation.

00:20:11.206 --> 00:20:14.496 A:middle
Or anytime that you are watching
a video in the WWDC app,

00:20:14.836 --> 00:20:19.556 A:middle
we encapsulated this inside
a "watch video" operation.

00:20:20.036 --> 00:20:22.736 A:middle
So all we need to do is
create one of these operations

00:20:22.896 --> 00:20:25.666 A:middle
with the appropriate
video asset and put it

00:20:25.666 --> 00:20:26.796 A:middle
on our operation queue,

00:20:27.056 --> 00:20:29.316 A:middle
and everything else will
just fall into place.

00:20:32.046 --> 00:20:36.896 A:middle
Even more broadly, any time you
see an alert in the WWDC app,

00:20:37.236 --> 00:20:40.196 A:middle
this is something that we
thought was also a really good

00:20:40.196 --> 00:20:43.916 A:middle
use case for putting UI
inside an NSOperation.

00:20:45.366 --> 00:20:47.986 A:middle
And we discovered that the
underlying principle we found

00:20:48.016 --> 00:20:51.796 A:middle
here was that when we're dealing
with any sort of modal UI,

00:20:52.146 --> 00:20:56.026 A:middle
so a UI that takes over
generally the entire real estate

00:20:56.156 --> 00:20:59.406 A:middle
of your application, this
is an excellent thing

00:20:59.566 --> 00:21:02.336 A:middle
to encapsulate inside
of an NSOperation.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.566 --> 00:21:02.336 A:middle
to encapsulate inside
of an NSOperation.

00:21:02.966 --> 00:21:07.646 A:middle
So to reiterate, the first
time you launch the WWDC app,

00:21:07.996 --> 00:21:10.186 A:middle
you saw this dialogue asking

00:21:10.186 --> 00:21:12.546 A:middle
if we could collect
some simple usage data

00:21:12.546 --> 00:21:14.586 A:middle
on how you are using the app.

00:21:14.826 --> 00:21:18.656 A:middle
This dialogue that appears,
this UI alert controller,

00:21:18.996 --> 00:21:21.906 A:middle
is actually being run from
inside an NSOperation.

00:21:24.396 --> 00:21:25.766 A:middle
Or the login sheet.

00:21:25.906 --> 00:21:28.946 A:middle
If you try to add something
to Favorites or leave feedback

00:21:28.946 --> 00:21:32.776 A:middle
on a session, this is
also an NSOperation.

00:21:36.716 --> 00:21:38.676 A:middle
The next thing we encountered is

00:21:39.076 --> 00:21:42.226 A:middle
that there are some times we
want to perform simple pieces

00:21:42.226 --> 00:21:46.356 A:middle
of logic as a block,
but we also wanted

00:21:46.356 --> 00:21:50.316 A:middle
to participate inside
the operation mechanism.

00:21:50.886 --> 00:21:54.336 A:middle
So we turned to block
operations, NSBlock operation

00:21:54.336 --> 00:21:56.366 A:middle
and other custom
operations that we created.

00:21:58.586 --> 00:22:01.396 A:middle
So this is really just an
NSOperation to execute a block.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.586 --> 00:22:01.396 A:middle
So this is really just an
NSOperation to execute a block.

00:22:01.426 --> 00:22:03.166 A:middle
And you may be asking, well,

00:22:03.166 --> 00:22:07.106 A:middle
if NSOperation is just an
abstraction around a block,

00:22:07.716 --> 00:22:11.766 A:middle
why would I then return to using
blocks inside an NSOperation?

00:22:13.056 --> 00:22:16.476 A:middle
And that's because by putting
a block inside an NSOperation,

00:22:16.746 --> 00:22:20.086 A:middle
you gain all of the great
features of NSOperation

00:22:21.126 --> 00:22:23.086 A:middle
for that block that you do

00:22:23.086 --> 00:22:25.446 A:middle
for NSOperation,
such as dependencies.

00:22:27.246 --> 00:22:29.196 A:middle
Let's take a look at
what we can do with this

00:22:29.666 --> 00:22:33.266 A:middle
and see what happens when you
tap the Leave Feedback button

00:22:33.576 --> 00:22:35.446 A:middle
in the WWDC app.

00:22:38.636 --> 00:22:43.666 A:middle
Well, the Leave Feedback button
wants to perform a segue.

00:22:44.206 --> 00:22:46.596 A:middle
It wants to present
the view controller

00:22:46.596 --> 00:22:49.506 A:middle
where you can leave some
five-star ratings or maybe four

00:22:49.506 --> 00:22:52.436 A:middle
if they were really good
but not truly excellent.

00:22:54.386 --> 00:22:55.636 A:middle
We want to perform this segue.

00:22:56.206 --> 00:22:58.856 A:middle
So we are going to put this
segue inside of a block,

00:22:58.856 --> 00:22:59.806 A:middle
and then we are going

00:22:59.806 --> 00:23:03.116 A:middle
to put this block inside
of a block operation.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.806 --> 00:23:03.116 A:middle
to put this block inside
of a block operation.

00:23:03.746 --> 00:23:07.316 A:middle
Now, we only want to allow
you to leave feedback

00:23:07.476 --> 00:23:08.826 A:middle
if you've signed into the app.

00:23:09.496 --> 00:23:12.266 A:middle
So we need to verify
that you've signed

00:23:12.266 --> 00:23:14.656 A:middle
in with your developer
account, just like we do

00:23:14.656 --> 00:23:17.336 A:middle
when you save a favorite.

00:23:17.446 --> 00:23:20.626 A:middle
And in order to verify that
you have a developer account,

00:23:20.846 --> 00:23:22.626 A:middle
we need to make sure that
you are logged in at all.

00:23:23.206 --> 00:23:28.306 A:middle
So by putting the
perform segue call inside

00:23:28.306 --> 00:23:32.036 A:middle
of a block operation,
we can guarantee

00:23:32.906 --> 00:23:35.926 A:middle
that we will never
present the login sheet

00:23:36.726 --> 00:23:39.296 A:middle
until after you have logged in.

00:23:40.056 --> 00:23:42.256 A:middle
This is really powerful.

00:23:42.606 --> 00:23:45.126 A:middle
We have described a
really complex behavior,

00:23:45.126 --> 00:23:47.846 A:middle
a sequence of things
that must occur simply

00:23:48.046 --> 00:23:50.546 A:middle
by using operations
and dependencies.

00:23:53.066 --> 00:23:54.466 A:middle
Now, as we were writing
the WWDC app,

00:23:54.466 --> 00:23:58.496 A:middle
we noticed that there were some
cases where we were doing a lot

00:23:58.496 --> 00:24:00.846 A:middle
of the same operations
over and over again.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.496 --> 00:24:00.846 A:middle
of the same operations
over and over again.

00:24:00.926 --> 00:24:03.466 A:middle
So for example, we've
already seen this login

00:24:03.536 --> 00:24:07.426 A:middle
and user info operation
a couple of times.

00:24:08.726 --> 00:24:12.126 A:middle
So we thought wouldn't it
be great if there were a way

00:24:12.126 --> 00:24:14.576 A:middle
where we could just
automatically have those

00:24:14.576 --> 00:24:15.716 A:middle
operations created?

00:24:16.866 --> 00:24:19.266 A:middle
So we came up with a
way for an operation

00:24:19.266 --> 00:24:21.746 A:middle
to generate its own
dependencies.

00:24:22.606 --> 00:24:26.356 A:middle
In other words, we're expressing
the idea that we never want

00:24:26.356 --> 00:24:30.986 A:middle
to execute this thing
without always executing this

00:24:30.986 --> 00:24:31.556 A:middle
other thing.

00:24:32.876 --> 00:24:36.486 A:middle
So again, let's take a look at
saving a favorite to CloudKit,

00:24:37.836 --> 00:24:40.616 A:middle
or perhaps downloading
a pass, or really,

00:24:40.616 --> 00:24:45.286 A:middle
anything in the WWDC app that
requires you to be logged in.

00:24:47.416 --> 00:24:50.416 A:middle
So when you tap the "add
to favorites" button,

00:24:50.816 --> 00:24:55.166 A:middle
all we are really doing is
creating a single operation

00:24:55.556 --> 00:24:56.696 A:middle
to save the favorite.

00:24:57.056 --> 00:24:59.466 A:middle
And this is going to
encapsulate some small pieces

00:24:59.466 --> 00:25:02.896 A:middle
of information, the session
identifier and whether


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:59.466 --> 00:25:02.896 A:middle
of information, the session
identifier and whether

00:25:02.896 --> 00:25:05.296 A:middle
or not you want it added
to favorites or removed

00:25:05.366 --> 00:25:07.066 A:middle
from favorites, a
little Boolean flag.

00:25:08.966 --> 00:25:11.656 A:middle
Now, this "save favorite"
operation knows

00:25:11.656 --> 00:25:14.076 A:middle
that it requires
permission to run,

00:25:14.626 --> 00:25:17.886 A:middle
so it is automatically going
to generate two dependencies,

00:25:18.986 --> 00:25:21.486 A:middle
the one to check that you
are a developer and the other

00:25:21.486 --> 00:25:25.286 A:middle
to guarantee that we have
access to your iCloud account.

00:25:26.106 --> 00:25:29.726 A:middle
Now, the operation to guarantee

00:25:29.726 --> 00:25:33.176 A:middle
that you are a developer
itself needs to guarantee

00:25:33.596 --> 00:25:36.786 A:middle
that you are logged in, so it
generates its own dependency

00:25:37.646 --> 00:25:39.026 A:middle
to make sure you are logged in.

00:25:39.816 --> 00:25:45.276 A:middle
And so we are able to keep
our app code quite simple.

00:25:45.276 --> 00:25:47.746 A:middle
We only need to create
a single operation,

00:25:48.526 --> 00:25:51.326 A:middle
and then it automatically
generates its own dependencies.

00:25:51.776 --> 00:25:55.836 A:middle
And perhaps later, if we decide
to remove the requirement

00:25:56.596 --> 00:25:58.636 A:middle
that you need to be logged
in to save a favorite,

00:25:58.966 --> 00:26:01.126 A:middle
then we simply remove
the small line of code


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.966 --> 00:26:01.126 A:middle
then we simply remove
the small line of code

00:26:01.466 --> 00:26:04.576 A:middle
that instructs this favorite
operation to generate

00:26:04.576 --> 00:26:07.286 A:middle
that particular dependency,
and we have now removed

00:26:07.286 --> 00:26:10.656 A:middle
that requirement across
the entire application.

00:26:11.306 --> 00:26:13.436 A:middle
We don't have to go
through every single place

00:26:13.436 --> 00:26:15.206 A:middle
where we have an "add
to favorite" button

00:26:15.496 --> 00:26:16.666 A:middle
and modify code there.

00:26:23.046 --> 00:26:27.326 A:middle
Now, we also wanted to
make sure that other kinds

00:26:27.326 --> 00:26:28.666 A:middle
of conditions were met.

00:26:30.236 --> 00:26:33.756 A:middle
We wanted to be able to expand
upon this idea of readiness,

00:26:34.156 --> 00:26:37.376 A:middle
expand upon the idea
of when we're allowed

00:26:37.666 --> 00:26:39.376 A:middle
to execute an operation.

00:26:39.906 --> 00:26:44.366 A:middle
Some examples that we came
up with include, we only want

00:26:44.456 --> 00:26:45.616 A:middle
to execute this operation

00:26:45.616 --> 00:26:47.536 A:middle
if you are actually
connected to the network.

00:26:47.746 --> 00:26:50.086 A:middle
If you try to add the
favorite in while your phone is

00:26:50.086 --> 00:26:52.556 A:middle
in airplane mode, for
example, we, of course,

00:26:52.556 --> 00:26:55.436 A:middle
don't want to try executing
our CloudKit operation.

00:26:58.416 --> 00:27:01.866 A:middle
We also want to guarantee,
perhaps, that maybe we only want


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:58.416 --> 00:27:01.866 A:middle
We also want to guarantee,
perhaps, that maybe we only want

00:27:01.976 --> 00:27:04.616 A:middle
to execute an operation if we
have access to your location.

00:27:05.476 --> 00:27:07.716 A:middle
So we need a way to
express this as well.

00:27:11.116 --> 00:27:14.216 A:middle
Or for example, we only want
to execute certain kinds

00:27:14.216 --> 00:27:17.086 A:middle
of operations if you are
actually logged into the app.

00:27:18.976 --> 00:27:22.426 A:middle
So by extending the concept of
what it means for an operation

00:27:22.426 --> 00:27:26.496 A:middle
to be ready, we can make our
operations even more powerful.

00:27:27.986 --> 00:27:31.816 A:middle
So hopefully you won't ever
see this error, but if you do,

00:27:32.396 --> 00:27:34.956 A:middle
this is an example of
an operation failing

00:27:35.186 --> 00:27:38.636 A:middle
because it was never able to
become fully ready to execute.

00:27:39.656 --> 00:27:41.846 A:middle
In this case because
it was unable

00:27:41.916 --> 00:27:43.666 A:middle
to connect to the network.

00:27:44.456 --> 00:27:47.986 A:middle
So extending the readiness
concept can also be

00:27:47.986 --> 00:27:48.816 A:middle
really powerful.

00:27:52.856 --> 00:27:56.756 A:middle
Next, there were a couple
of operations where we found

00:27:56.756 --> 00:27:59.356 A:middle
that they were always
being done together.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:00.296 --> 00:28:03.016 A:middle
So we thought, wouldn't it
be neat if instead of having

00:28:03.016 --> 00:28:06.066 A:middle
to create the same sequence of
operations over and over again,

00:28:06.066 --> 00:28:09.056 A:middle
if we could just create
one operation and then

00:28:09.056 --> 00:28:11.706 A:middle
under the hood it would
create the same sequence

00:28:11.706 --> 00:28:13.556 A:middle
of operations for us?

00:28:13.846 --> 00:28:17.916 A:middle
A common example of this is the
idea of downloading something

00:28:17.916 --> 00:28:21.506 A:middle
and then parsing it to
save into a local storage.

00:28:22.826 --> 00:28:24.996 A:middle
I am sure this is a
concept that almost all

00:28:24.996 --> 00:28:25.986 A:middle
of you are familiar with.

00:28:26.416 --> 00:28:29.336 A:middle
So let's take a look at how
we can compose operations

00:28:30.016 --> 00:28:31.006 A:middle
to make them simpler.

00:28:31.756 --> 00:28:34.666 A:middle
So let's say we have a
generic import data operation,

00:28:34.666 --> 00:28:36.376 A:middle
and then it's dependent
on something

00:28:36.376 --> 00:28:38.176 A:middle
and other things
are dependent on it.

00:28:38.966 --> 00:28:41.186 A:middle
We have this import idea.

00:28:41.856 --> 00:28:45.326 A:middle
Well, we want this to actually
do two things, so it's going

00:28:45.326 --> 00:28:50.396 A:middle
to wrap another NSOperation, and
this operation is simply going

00:28:50.396 --> 00:28:51.896 A:middle
to perform the download.

00:28:52.656 --> 00:28:55.016 A:middle
It's a single, isolated
piece of work.

00:28:56.676 --> 00:28:59.296 A:middle
And then it's going to
create a second operation

00:28:59.616 --> 00:29:04.196 A:middle
to parse whatever was
downloaded and make it dependent


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.616 --> 00:29:04.196 A:middle
to parse whatever was
downloaded and make it dependent

00:29:04.466 --> 00:29:05.626 A:middle
on the download operation

00:29:05.676 --> 00:29:08.486 A:middle
so that parsing will always
occur after downloading.

00:29:09.496 --> 00:29:13.086 A:middle
Now, by encapsulating
those two operations inside

00:29:13.086 --> 00:29:18.586 A:middle
of a larger operation, we can
now easily change perhaps,

00:29:18.726 --> 00:29:22.646 A:middle
maybe where our data is coming
from, what format it's in,

00:29:22.936 --> 00:29:24.616 A:middle
and even how we handle errors.

00:29:25.476 --> 00:29:27.676 A:middle
And we only have to
do this in one place,

00:29:28.126 --> 00:29:32.286 A:middle
inside our import operation,
because that's the only thing

00:29:32.286 --> 00:29:36.646 A:middle
that the rest of
our app knows about.

00:29:36.646 --> 00:29:39.556 A:middle
Now, you don't always know
ahead of time, perhaps,

00:29:39.816 --> 00:29:43.326 A:middle
the exact operations
that you need to perform.

00:29:44.766 --> 00:29:47.616 A:middle
In the WWDC app, we cannot know

00:29:47.736 --> 00:29:51.786 A:middle
at compile time how many
favorites you've saved

00:29:51.786 --> 00:29:54.726 A:middle
to CloudKit, so we
needed a way to be able

00:29:54.726 --> 00:29:57.446 A:middle
to dynamically compose
operations.

00:29:59.956 --> 00:30:03.636 A:middle
So we created this wrapper
called a Fetch Favorites


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.956 --> 00:30:03.636 A:middle
So we created this wrapper
called a Fetch Favorites

00:30:03.766 --> 00:30:07.366 A:middle
operation, and since
we are using CloudKit,

00:30:07.716 --> 00:30:11.826 A:middle
under the hood we are going to
perform a CK query operation,

00:30:12.636 --> 00:30:15.516 A:middle
because CloudKit is also
built on NSOperation.

00:30:16.736 --> 00:30:18.876 A:middle
So we are going to perform
our first query operation.

00:30:18.876 --> 00:30:22.616 A:middle
And maybe you have every single
session favorited at WWDC,

00:30:22.616 --> 00:30:24.716 A:middle
so this is going to indicate

00:30:24.876 --> 00:30:27.466 A:middle
that there are still
more favorites to fetch.

00:30:28.006 --> 00:30:31.216 A:middle
So we are going to keep on
executing query operations

00:30:31.566 --> 00:30:34.846 A:middle
until we have received a
response that that's all of them

00:30:34.846 --> 00:30:35.706 A:middle
and we've got them all.

00:30:36.906 --> 00:30:40.316 A:middle
So by using this
composition model,

00:30:40.596 --> 00:30:45.456 A:middle
we can still simply express our
operation chain as a single --

00:30:45.456 --> 00:30:49.986 A:middle
with a single "fetch favorites"
operation, but under the hood,

00:30:50.656 --> 00:30:53.456 A:middle
actually be performing
many operations,

00:30:53.506 --> 00:30:55.106 A:middle
potentially, in sequence.

00:30:58.076 --> 00:30:59.986 A:middle
Now, in the code, it
looks something like this.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:00.736 --> 00:31:03.576 A:middle
Our operations have
an execute method,

00:31:03.576 --> 00:31:05.776 A:middle
and this is where they all
start doing their work.

00:31:06.806 --> 00:31:11.046 A:middle
So the first time the fetch
favorite operation starts

00:31:11.046 --> 00:31:14.126 A:middle
executing, it's going to
set up the initial query.

00:31:14.166 --> 00:31:18.836 A:middle
We are going to look for session
favorite records created by you.

00:31:19.586 --> 00:31:22.686 A:middle
So we are going to construct
our query operation and pass it

00:31:22.686 --> 00:31:24.886 A:middle
to this method called
execute query operation.

00:31:25.446 --> 00:31:28.436 A:middle
And this is the execute
query operation.

00:31:29.006 --> 00:31:33.056 A:middle
As this query operation
completes, we are going

00:31:33.056 --> 00:31:36.156 A:middle
to first check, was there
an error, and if there was,

00:31:36.406 --> 00:31:38.586 A:middle
let's abort the process
and handle the error.

00:31:39.226 --> 00:31:44.146 A:middle
If there wasn't an error, but
instead, there was a cursor,

00:31:44.646 --> 00:31:46.456 A:middle
this is how CloudKit tells us

00:31:46.606 --> 00:31:48.966 A:middle
that there are still more
things for us to fetch.

00:31:49.536 --> 00:31:53.046 A:middle
So we're going to create
the next CK query operation

00:31:53.046 --> 00:31:55.016 A:middle
in the sequence using
this cursor

00:31:55.826 --> 00:32:00.476 A:middle
and semi-recursively call
this execute query operation.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:55.826 --> 00:32:00.476 A:middle
and semi-recursively call
this execute query operation.

00:32:00.886 --> 00:32:04.546 A:middle
And this is how we can be
executing many query operations.

00:32:06.506 --> 00:32:09.856 A:middle
And then if we get neither
the cursor nor the error,

00:32:10.086 --> 00:32:13.126 A:middle
this is how CloudKit indicates
that we have fetched everything,

00:32:13.416 --> 00:32:17.516 A:middle
and so we can begin
to import the records

00:32:17.516 --> 00:32:18.366 A:middle
that we have downloaded.

00:32:26.106 --> 00:32:30.786 A:middle
Next, during development, there
were some times when we came

00:32:30.786 --> 00:32:32.976 A:middle
up with some visual glitches,

00:32:33.706 --> 00:32:35.786 A:middle
the things that we thought
were visual glitches.

00:32:36.546 --> 00:32:39.336 A:middle
Now, perhaps you've all had
the experience of using an app

00:32:39.766 --> 00:32:42.546 A:middle
and an alert pops up,
and then as you are

00:32:42.546 --> 00:32:45.426 A:middle
about to tap the button,
another alert pops up.

00:32:46.136 --> 00:32:48.386 A:middle
And you think, oh, great, man,
what is even going on now?

00:32:48.806 --> 00:32:50.536 A:middle
And as you are about
to tap that button,

00:32:50.726 --> 00:32:54.136 A:middle
maybe another alert pops up,
and with all of the animations

00:32:54.136 --> 00:32:56.686 A:middle
of coming and going, you are no
longer even sure if you are back

00:32:56.686 --> 00:32:59.046 A:middle
on the first alert or if
you are now on the third.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:00.316 --> 00:33:03.966 A:middle
We really wanted to avoid
this confusing scenario.

00:33:06.196 --> 00:33:09.766 A:middle
Another thing we wanted to
do is we wanted to guarantee

00:33:10.786 --> 00:33:14.656 A:middle
that you could never,
ever try to watch more

00:33:14.656 --> 00:33:15.826 A:middle
than one video at once.

00:33:15.826 --> 00:33:18.946 A:middle
This is something that the
WWDC app does not know how

00:33:18.946 --> 00:33:21.776 A:middle
to handle correctly, so
we wanted to guarantee

00:33:21.776 --> 00:33:23.186 A:middle
that no matter what you did,

00:33:23.656 --> 00:33:27.746 A:middle
we would never allow
you to do that.

00:33:27.916 --> 00:33:30.276 A:middle
Another thing we
wanted to guarantee is

00:33:30.276 --> 00:33:34.926 A:middle
that we would never try to load
our underlying database more

00:33:34.926 --> 00:33:36.466 A:middle
than once.

00:33:37.076 --> 00:33:41.676 A:middle
So we came up with a way of
describing mutual exclusivity,

00:33:41.996 --> 00:33:44.856 A:middle
the idea that only one
of these particular kind

00:33:44.856 --> 00:33:49.556 A:middle
of operations can be
running at a time.

00:33:49.756 --> 00:33:50.906 A:middle
Now, you are probably
thinking, wow,

00:33:50.906 --> 00:33:52.686 A:middle
this is a really complex idea.

00:33:52.686 --> 00:33:54.206 A:middle
How would we even do this?

00:33:55.836 --> 00:33:57.426 A:middle
And it is really simple.

00:33:58.116 --> 00:34:00.026 A:middle
So let's go back to
the alert example.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:58.116 --> 00:34:00.026 A:middle
So let's go back to
the alert example.

00:34:01.546 --> 00:34:05.306 A:middle
Let's say we create an operation
to display alert and alert

00:34:05.306 --> 00:34:08.476 A:middle
to the user, and we put it
onto an operation queue.

00:34:08.755 --> 00:34:11.186 A:middle
And maybe it's there waiting
for something else to finish,

00:34:11.476 --> 00:34:13.966 A:middle
maybe it's already in
the middle of executing.

00:34:14.106 --> 00:34:14.376 A:middle
Who knows?

00:34:15.766 --> 00:34:18.326 A:middle
But then something
happens, and we decide

00:34:18.596 --> 00:34:20.786 A:middle
to create another
alert operation.

00:34:21.606 --> 00:34:25.735 A:middle
Well, all we need to do is
make the second alert operation

00:34:26.036 --> 00:34:28.156 A:middle
dependent on the first one.

00:34:29.146 --> 00:34:32.835 A:middle
And this is where
cross-queue dependencies are

00:34:32.835 --> 00:34:33.826 A:middle
really powerful.

00:34:34.726 --> 00:34:36.906 A:middle
Because it does not matter

00:34:37.045 --> 00:34:40.956 A:middle
which queue this alert
operation is executing on,

00:34:41.476 --> 00:34:44.815 A:middle
as long as the second operation
is dependent on the first,

00:34:45.446 --> 00:34:48.286 A:middle
then the second operation
will never execute

00:34:48.476 --> 00:34:52.106 A:middle
until after the first
operation completes.

00:34:52.966 --> 00:34:56.446 A:middle
And so for some -- if
for some insane reason,

00:34:56.446 --> 00:34:58.826 A:middle
we decide to create
more alert operations,

00:34:59.066 --> 00:35:02.176 A:middle
even more alert operations,
as long as we set


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.066 --> 00:35:02.176 A:middle
even more alert operations,
as long as we set

00:35:02.176 --> 00:35:06.046 A:middle
up these dependencies of the
next operation being dependent

00:35:06.046 --> 00:35:10.326 A:middle
on the previous, like a singly
linked list back in time,

00:35:10.826 --> 00:35:14.076 A:middle
we are guaranteeing that
our operations will be

00:35:14.076 --> 00:35:15.396 A:middle
mutually exclusive.

00:35:16.816 --> 00:35:19.026 A:middle
This is really powerful.

00:35:20.006 --> 00:35:21.536 A:middle
By using dependencies,

00:35:22.026 --> 00:35:26.246 A:middle
we can guarantee correct
behavior in our application.

00:35:26.516 --> 00:35:29.396 A:middle
We can guarantee that
you will never see more

00:35:29.396 --> 00:35:30.646 A:middle
than one alert at once.

00:35:30.766 --> 00:35:34.146 A:middle
We can guarantee that you will
never be able to watch more

00:35:34.146 --> 00:35:35.536 A:middle
than one video at a time.

00:35:35.846 --> 00:35:40.366 A:middle
We can guarantee that we will
never try to load two copies

00:35:40.366 --> 00:35:42.626 A:middle
of our data store
simultaneously.

00:35:45.416 --> 00:35:48.456 A:middle
So those are a taste of some
of the challenges that we came

00:35:48.456 --> 00:35:51.476 A:middle
up with when writing
the WWDC app.

00:35:52.066 --> 00:35:52.836 A:middle
There are more.

00:35:54.276 --> 00:35:56.466 A:middle
But we think these
ones are really cool.

00:35:56.866 --> 00:35:59.586 A:middle
And we came up with what we
thought was a pretty neat way

00:35:59.586 --> 00:36:01.926 A:middle
to solve them.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.586 --> 00:36:01.926 A:middle
to solve them.

00:36:02.136 --> 00:36:04.726 A:middle
So let's talk about
the sample code.

00:36:05.326 --> 00:36:10.306 A:middle
On the WWDC website, under
the sample code section,

00:36:10.306 --> 00:36:12.456 A:middle
you can find a piece
of sample code called

00:36:12.456 --> 00:36:13.906 A:middle
Advanced NSOperations.

00:36:14.716 --> 00:36:18.066 A:middle
And this is a simple app
to show recent earthquakes.

00:36:19.026 --> 00:36:22.706 A:middle
But under the hood, it's built
entirely on NSOperations,

00:36:23.426 --> 00:36:27.586 A:middle
and the operations that it's
using in the app is code

00:36:27.586 --> 00:36:30.536 A:middle
that we have extracted
from the WWDC app

00:36:31.166 --> 00:36:32.456 A:middle
and put into the sample.

00:36:32.456 --> 00:36:35.066 A:middle
And this is code that's
been in the app, actually,

00:36:35.116 --> 00:36:36.286 A:middle
for a couple of years.

00:36:36.536 --> 00:36:37.376 A:middle
It is stable.

00:36:40.356 --> 00:36:45.196 A:middle
Now, the primary class that this
sample code uses is operation.

00:36:45.636 --> 00:36:49.196 A:middle
And this is a basic
subclass of NSOperation.

00:36:50.096 --> 00:36:54.366 A:middle
And in the sample code, this
operation adds two key features.

00:36:55.676 --> 00:37:00.116 A:middle
The first is the
idea of a condition,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:55.676 --> 00:37:00.116 A:middle
The first is the
idea of a condition,

00:37:00.196 --> 00:37:01.426 A:middle
which we will talk
about in a second.

00:37:02.446 --> 00:37:06.146 A:middle
And the second is a concept
that we call "observers."

00:37:06.596 --> 00:37:08.896 A:middle
Now, we've got a bunch
of different kinds

00:37:08.896 --> 00:37:11.646 A:middle
of operations in
the sample code.

00:37:11.956 --> 00:37:14.646 A:middle
We have group operations,
so it's very easy

00:37:14.766 --> 00:37:18.406 A:middle
to make operations internally
perform more operations.

00:37:19.016 --> 00:37:22.486 A:middle
We also have an operation
subclass in the sample code

00:37:22.966 --> 00:37:27.046 A:middle
that allows you to take an
NSURLSession task and wrap it

00:37:27.046 --> 00:37:30.706 A:middle
up inside of an NSOperation so
that you can make it, perhaps,

00:37:30.786 --> 00:37:33.606 A:middle
dependent on something else
or make other things dependent

00:37:33.606 --> 00:37:37.376 A:middle
on this, or perhaps add
conditions or observers to it.

00:37:38.236 --> 00:37:40.986 A:middle
There's a simple operation to
request your current location.

00:37:41.326 --> 00:37:43.156 A:middle
There's one -- because
it's sometimes useful --

00:37:43.156 --> 00:37:46.176 A:middle
to just simply wait
a little bit of time.

00:37:46.176 --> 00:37:48.846 A:middle
There's even an operation
to show an alert to the user

00:37:48.986 --> 00:37:50.786 A:middle
with buttons and block handlers.

00:37:51.846 --> 00:37:54.136 A:middle
So lots of great kinds

00:37:54.136 --> 00:37:57.646 A:middle
of NSOperation subclasses
in the sample code.

00:37:58.476 --> 00:38:02.256 A:middle
Now, this operation has
a concept of a condition.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:58.476 --> 00:38:02.256 A:middle
Now, this operation has
a concept of a condition.

00:38:02.596 --> 00:38:05.226 A:middle
And a condition is a
protocol that we have defined,

00:38:05.226 --> 00:38:07.536 A:middle
and it's a way for an operation

00:38:07.536 --> 00:38:09.996 A:middle
to express how it
generates dependencies,

00:38:10.706 --> 00:38:13.376 A:middle
how it defines mutual
exclusivity,

00:38:14.926 --> 00:38:17.996 A:middle
and also how it extends
the concept of readiness.

00:38:18.886 --> 00:38:21.706 A:middle
So some kind of conditions

00:38:21.956 --> 00:38:24.116 A:middle
that we have provided
in the sample code.

00:38:24.306 --> 00:38:27.256 A:middle
One is the mutually
exclusive generic condition,

00:38:27.826 --> 00:38:29.606 A:middle
and this is a way of describing

00:38:29.876 --> 00:38:33.636 A:middle
that an operation is mutually
exclusive with other kinds

00:38:33.636 --> 00:38:36.126 A:middle
of operations with
the same generic type.

00:38:37.296 --> 00:38:40.616 A:middle
We have a reachability condition
in there, so you can simply,

00:38:40.616 --> 00:38:42.416 A:middle
with one line of code, express

00:38:42.576 --> 00:38:44.496 A:middle
that an operation
can only execute

00:38:44.776 --> 00:38:47.346 A:middle
if the network is reachable
at a very high level.

00:38:48.146 --> 00:38:51.506 A:middle
And we've got a plethora
of permission conditions,

00:38:52.196 --> 00:38:56.006 A:middle
such as only execute this
operation if we have access

00:38:56.006 --> 00:38:59.596 A:middle
to a certain CloudKit container,
or only execute this operation

00:38:59.596 --> 00:39:01.156 A:middle
if we have access
to your calendar


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:59.596 --> 00:39:01.156 A:middle
if we have access
to your calendar

00:39:01.256 --> 00:39:03.926 A:middle
or to your photo library
or to your contacts

00:39:04.536 --> 00:39:06.366 A:middle
or whatever else you'd like.

00:39:07.136 --> 00:39:08.456 A:middle
So that's conditions.

00:39:09.196 --> 00:39:12.906 A:middle
And the final piece is
operation observers.

00:39:14.776 --> 00:39:19.496 A:middle
An operation observer is again
a protocol type, and it's a way

00:39:19.496 --> 00:39:22.816 A:middle
for this value to be notified
about significant events

00:39:22.966 --> 00:39:27.126 A:middle
in operation lifecycle, such
as start or the beginning

00:39:27.126 --> 00:39:28.776 A:middle
of execution, the
end of execution,

00:39:29.116 --> 00:39:31.436 A:middle
and also if the operation
decides

00:39:31.736 --> 00:39:34.926 A:middle
to produce another operation
that should be executed later,

00:39:35.316 --> 00:39:38.726 A:middle
such as if an operation decides
that it failed and it wants

00:39:38.726 --> 00:39:43.166 A:middle
to show an alert, it can produce
or generate an alert operation.

00:39:44.876 --> 00:39:49.756 A:middle
And we have a couple of examples
of observers, such as timeouts.

00:39:50.736 --> 00:39:53.536 A:middle
By simply adding a timeout
observer to an operation,

00:39:54.396 --> 00:39:57.016 A:middle
that observer is going
to watch to make sure

00:39:57.016 --> 00:39:58.446 A:middle
that the operation completes

00:39:58.446 --> 00:40:00.726 A:middle
within whatever time
interval you specified,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:58.446 --> 00:40:00.726 A:middle
within whatever time
interval you specified,

00:40:01.136 --> 00:40:02.286 A:middle
and if it takes too long,

00:40:02.286 --> 00:40:04.826 A:middle
it's going to automatically
cancel it.

00:40:05.746 --> 00:40:08.986 A:middle
One that I think is really
neat is a background observer,

00:40:09.426 --> 00:40:12.686 A:middle
so this is an observer that
when you attach it to one

00:40:12.686 --> 00:40:16.596 A:middle
of these operations is
going to watch the state

00:40:17.126 --> 00:40:18.666 A:middle
of your UI application,

00:40:19.346 --> 00:40:21.956 A:middle
and if your application
enters the background,

00:40:21.956 --> 00:40:24.636 A:middle
it's going to automatically
begin a background task,

00:40:25.166 --> 00:40:26.836 A:middle
and then automatically end it

00:40:27.266 --> 00:40:29.026 A:middle
when the operation
finishes executing.

00:40:29.706 --> 00:40:32.006 A:middle
So if you have some sort
of critical operation,

00:40:32.006 --> 00:40:34.506 A:middle
perhaps you are uploading data
to a server and you don't want

00:40:34.506 --> 00:40:36.436 A:middle
that to be interrupted
or suspended,

00:40:37.486 --> 00:40:39.796 A:middle
one way you can accomplish
this is by adding one

00:40:39.796 --> 00:40:42.196 A:middle
of these background
observers to the operation,

00:40:42.196 --> 00:40:45.046 A:middle
and it will guarantee
that you have some time

00:40:45.046 --> 00:40:48.336 A:middle
in the background during which
you can complete this operation.

00:40:48.846 --> 00:40:53.166 A:middle
And another one that's really
cool is the network activity

00:40:53.166 --> 00:40:54.156 A:middle
indicator observer.

00:40:54.886 --> 00:40:57.926 A:middle
This is a simple observer you
can attach to an operation,

00:40:57.976 --> 00:41:00.676 A:middle
and when it begins, it's
going to increment a sort


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:57.976 --> 00:41:00.676 A:middle
and when it begins, it's
going to increment a sort

00:41:00.676 --> 00:41:05.746 A:middle
of retain count on the
activity indicator spinner

00:41:05.906 --> 00:41:08.846 A:middle
in the status bar, and then
when the operation ends,

00:41:09.216 --> 00:41:10.966 A:middle
it's going to decrement
that retain count.

00:41:11.306 --> 00:41:15.076 A:middle
So you can have multiple
networking operations in flight

00:41:15.076 --> 00:41:17.726 A:middle
at the same time, and
by simply attaching one

00:41:17.726 --> 00:41:20.796 A:middle
of these network indicator
-- or, observers --

00:41:20.866 --> 00:41:23.276 A:middle
it will automatically show

00:41:23.276 --> 00:41:26.026 A:middle
and hide the network activity
indicator as appropriate.

00:41:26.026 --> 00:41:28.146 A:middle
It is no longer this crazy --

00:41:30.456 --> 00:41:32.496 A:middle
crazy state that you
have to manage yourself.

00:41:32.496 --> 00:41:34.256 A:middle
It all kind of happens
automatically.

00:41:34.256 --> 00:41:35.156 A:middle
It's really cool.

00:41:35.156 --> 00:41:37.236 A:middle
And then there are other
observers that we have

00:41:37.556 --> 00:41:40.016 A:middle
in the sample code for
you, such as being able

00:41:40.016 --> 00:41:43.686 A:middle
to attach arbitrary blocks
to one of those three events

00:41:43.966 --> 00:41:45.806 A:middle
and have them react
appropriately.

00:41:46.896 --> 00:41:48.906 A:middle
So that's a quick look
at the sample code.

00:41:49.606 --> 00:41:52.806 A:middle
On the surface, it looks like
a really simple application,

00:41:52.806 --> 00:41:55.786 A:middle
but under the hood, there is
lots of really meaty goodness,

00:41:55.876 --> 00:41:59.966 A:middle
and I really encourage you to
download it and check it out.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:00.266 --> 00:42:03.946 A:middle
So, in summary, use operations

00:42:04.086 --> 00:42:06.356 A:middle
to abstract the logic
in your app.

00:42:06.606 --> 00:42:10.156 A:middle
By putting your logic inside of
operations, it becomes very easy

00:42:10.156 --> 00:42:13.546 A:middle
to change it later, such as
how we converted the WWDC app

00:42:13.546 --> 00:42:15.336 A:middle
to use CloudKit.

00:42:15.636 --> 00:42:17.526 A:middle
It was a simple change for us.

00:42:19.156 --> 00:42:22.436 A:middle
Use dependencies to
express the relationships

00:42:22.486 --> 00:42:23.576 A:middle
between your operations.

00:42:24.106 --> 00:42:27.526 A:middle
It makes it very simple
to guarantee certain kinds

00:42:27.526 --> 00:42:31.446 A:middle
of behaviors, that B
must always follow A.

00:42:33.496 --> 00:42:38.776 A:middle
Next, operations allow you to
describe complex behaviors,

00:42:39.476 --> 00:42:43.126 A:middle
such as mutual exclusivity
or composition.

00:42:43.496 --> 00:42:46.036 A:middle
These are all simple
with operations.

00:42:46.696 --> 00:42:50.486 A:middle
And overall NSOperation
allows you

00:42:50.486 --> 00:42:54.786 A:middle
to perform some very powerful
things with very minimal effort.

00:42:56.346 --> 00:42:58.176 A:middle
So we have a couple of
related sessions for you.

00:42:58.666 --> 00:43:02.606 A:middle
Immediately after this
session is "Building Responsive


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:58.666 --> 00:43:02.606 A:middle
Immediately after this
session is "Building Responsive

00:43:02.606 --> 00:43:03.996 A:middle
and Efficient Apps with GCD."

00:43:03.996 --> 00:43:06.726 A:middle
We don't want you
to leave GCD behind.

00:43:06.726 --> 00:43:10.186 A:middle
It is still a perfectly
appropriate technology to use.

00:43:10.186 --> 00:43:12.896 A:middle
So I encourage you to go to
this session or watch the video

00:43:13.266 --> 00:43:15.876 A:middle
and see when you should
be using GCD in your apps.

00:43:16.786 --> 00:43:17.856 A:middle
And then if you want to see more

00:43:17.856 --> 00:43:22.306 A:middle
about how our frameworks use
NSOperation, you can watch the

00:43:22.306 --> 00:43:24.856 A:middle
"CloudKit Tips and Tricks"
session from this year

00:43:25.216 --> 00:43:27.876 A:middle
or the "Advanced CloudKit"
session from last year.

00:43:31.216 --> 00:43:34.466 A:middle
Like I said, we have sample code
available on the WWDC website.

00:43:34.466 --> 00:43:35.776 A:middle
I encourage you to check it out.

00:43:36.466 --> 00:43:39.196 A:middle
I also want you to read the
'Threading Programming Guide'

00:43:39.376 --> 00:43:40.626 A:middle
in the Developer Library.

00:43:40.896 --> 00:43:44.276 A:middle
This has a lot of really great
information on other ways

00:43:44.276 --> 00:43:45.886 A:middle
that you can use NSOperation.

00:43:46.376 --> 00:43:49.206 A:middle
And if you need any technical
support, we encourage you

00:43:49.206 --> 00:43:54.056 A:middle
to post your questions in the
Developer Forums or contact DTS.

00:43:54.596 --> 00:43:56.976 A:middle
Thank you very much, and have
a great rest of the conference.

00:43:57.508 --> 00:43:59.508 A:middle
[ Applause ]

