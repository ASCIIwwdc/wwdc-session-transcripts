WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:29.356 --> 00:00:30.286 A:middle
&gt;&gt; SOPHIA TEUTSCHLER:
Good afternoon.

00:00:31.516 --> 00:00:33.796 A:middle
[ Applause ]

00:00:34.296 --> 00:00:36.576 A:middle
Welcome to App Extension
Best Practices.

00:00:36.776 --> 00:00:39.316 A:middle
I am Sophia Teutschler,
I am an engineer

00:00:39.316 --> 00:00:41.016 A:middle
in the UIKit Framework Team.

00:00:41.486 --> 00:00:43.196 A:middle
Later in this session I will
be joined by my colleague,

00:00:43.236 --> 00:00:44.446 A:middle
Ian Baird from CoreOS.

00:00:46.226 --> 00:00:49.256 A:middle
The first part of the
session I would like to talk

00:00:49.256 --> 00:00:52.106 A:middle
about the two main types
of extensions on iOS,

00:00:52.816 --> 00:00:54.196 A:middle
Action and Share extensions.

00:00:55.766 --> 00:00:57.766 A:middle
The later session, Ian
will join us to talk

00:00:57.766 --> 00:00:59.276 A:middle
about Today Widget enhancements.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:00.446 --> 00:01:02.546 A:middle
Throughout the session we
will show you many real-world

00:01:02.546 --> 00:01:04.446 A:middle
examples to help
you make the most

00:01:04.446 --> 00:01:09.626 A:middle
out of those types
of extensions.

00:01:09.626 --> 00:01:11.486 A:middle
Now, Action and Share
extensions.

00:01:11.486 --> 00:01:15.696 A:middle
Let me give you a brief
overview of the two types

00:01:15.696 --> 00:01:17.456 A:middle
of extensions, how they differ.

00:01:19.406 --> 00:01:23.736 A:middle
Now, Action extensions are all
about changing content in place,

00:01:24.376 --> 00:01:26.936 A:middle
where the Share extensions
are all about moving content

00:01:27.076 --> 00:01:28.646 A:middle
from the current
host application

00:01:28.966 --> 00:01:31.016 A:middle
to your application
or Web Service.

00:01:32.896 --> 00:01:35.776 A:middle
Now, let me give you
more examples here.

00:01:36.726 --> 00:01:37.496 A:middle
As I just mentioned,

00:01:38.006 --> 00:01:40.296 A:middle
Action extensions act
on a current content.

00:01:41.286 --> 00:01:43.756 A:middle
Because of that,
they use the content

00:01:43.756 --> 00:01:45.256 A:middle
as the main user interface.

00:01:46.376 --> 00:01:50.046 A:middle
I will show an example
later on about that.

00:01:50.256 --> 00:01:51.586 A:middle
But you also have
the opportunity

00:01:51.856 --> 00:01:54.786 A:middle
to present additional options
before you perform that action.

00:01:57.016 --> 00:02:01.476 A:middle
Also, your application
functionality can be separated


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:57.016 --> 00:02:01.476 A:middle
Also, your application
functionality can be separated

00:02:01.476 --> 00:02:03.686 A:middle
in different Action
extensions that live

00:02:03.766 --> 00:02:06.476 A:middle
within that container
application.

00:02:08.556 --> 00:02:10.576 A:middle
Now, let me show
an example here.

00:02:12.216 --> 00:02:13.046 A:middle
We are in Safari.

00:02:13.046 --> 00:02:15.336 A:middle
I am going to tap on the
action item on the top right,

00:02:15.836 --> 00:02:18.556 A:middle
bring up our Share Sheet with
our two types of extensions,

00:02:19.446 --> 00:02:20.566 A:middle
the Share extension
is on the top

00:02:20.806 --> 00:02:24.126 A:middle
and the Action extension
on the bottom.

00:02:24.126 --> 00:02:27.476 A:middle
We made this Translate
extension, and when we tap it,

00:02:27.676 --> 00:02:28.686 A:middle
the following will happen.

00:02:29.586 --> 00:02:32.196 A:middle
Safari will transfer a
webpage to that extension.

00:02:32.656 --> 00:02:37.106 A:middle
There it is translated and then
the translated corners move back

00:02:37.106 --> 00:02:38.676 A:middle
into place in Safari.

00:02:42.226 --> 00:02:43.676 A:middle
Here's a variation
of the same one.

00:02:44.266 --> 00:02:46.886 A:middle
When you tap Translate, you
bring up this form sheet

00:02:46.936 --> 00:02:48.906 A:middle
where a user can select
one of the languages.

00:02:49.546 --> 00:02:53.216 A:middle
Then when you tap Language,
we transfer the webpage

00:02:53.216 --> 00:02:57.256 A:middle
to the extension, then again
it's translated and moved back

00:02:57.256 --> 00:03:02.986 A:middle
into place in Safari So so
much about Action extensions.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:57.256 --> 00:03:02.986 A:middle
into place in Safari So so
much about Action extensions.

00:03:03.036 --> 00:03:05.226 A:middle
So how are Share
extensions different?

00:03:09.926 --> 00:03:12.396 A:middle
As I said earlier,
Share extensions are all

00:03:12.396 --> 00:03:15.566 A:middle
about sharing content
from the host application

00:03:15.776 --> 00:03:17.266 A:middle
to your app or Web Service.

00:03:19.386 --> 00:03:21.026 A:middle
And because of that,
it's very important

00:03:21.026 --> 00:03:24.266 A:middle
that you offer the user
to validate and edit

00:03:24.266 --> 00:03:26.676 A:middle
that content before it moves
out to your Web Service.

00:03:28.456 --> 00:03:29.846 A:middle
And we offer you an API for that

00:03:29.846 --> 00:03:31.556 A:middle
that I will show you a
few examples on later on.

00:03:34.586 --> 00:03:38.026 A:middle
Also, your Share extension
represents your application

00:03:38.026 --> 00:03:40.656 A:middle
in the Share Sheet, and
to prevent confusion,

00:03:40.656 --> 00:03:43.096 A:middle
we only allow you to offer
one Share extension per

00:03:43.126 --> 00:03:46.626 A:middle
containing app.

00:03:46.626 --> 00:03:49.186 A:middle
Now, let me show an example
for the Share extension here.

00:03:50.166 --> 00:03:51.956 A:middle
We have the Share in the bottom

00:03:52.266 --> 00:03:53.656 A:middle
and our Share extension
on the top.

00:03:54.986 --> 00:03:57.166 A:middle
Now, we select four
photos, and when we tap

00:03:57.256 --> 00:03:59.096 A:middle
on the iCloud Photo
Sharing extension,

00:03:59.096 --> 00:04:01.786 A:middle
the following will happen.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.096 --> 00:04:01.786 A:middle
the following will happen.

00:04:03.046 --> 00:04:06.126 A:middle
We get a little preview sheet
where a user can add a comment,

00:04:06.586 --> 00:04:10.596 A:middle
maybe tap the Shared album, and
a little preview on the right.

00:04:10.896 --> 00:04:12.576 A:middle
But we haven't transferred
any data yet.

00:04:14.286 --> 00:04:17.386 A:middle
Now, if the information is
correct, the user can decide

00:04:17.386 --> 00:04:20.576 A:middle
to either cancel out or tap Post
to actually perform the Action.

00:04:21.766 --> 00:04:24.956 A:middle
Now let's take a closer look at
this sheet here in the Center.

00:04:26.356 --> 00:04:29.196 A:middle
This is actually the API I
was talking about earlier.

00:04:29.196 --> 00:04:30.956 A:middle
It's called the
SLComposeServiceViewController.

00:04:30.956 --> 00:04:33.306 A:middle
This is how it looks
straight out of the box.

00:04:34.266 --> 00:04:36.776 A:middle
There's a text field, a
little preview on the right.

00:04:38.346 --> 00:04:41.466 A:middle
However, it's very customizable,
and for our special service,

00:04:41.466 --> 00:04:43.466 A:middle
for example, we like
to customize it

00:04:43.646 --> 00:04:45.186 A:middle
to make it look more like this.

00:04:47.446 --> 00:04:49.396 A:middle
We added a place holder,
we even added a character

00:04:49.436 --> 00:04:50.396 A:middle
remaining property.

00:04:50.546 --> 00:04:52.296 A:middle
We even change the preview view,

00:04:52.736 --> 00:04:55.336 A:middle
and we have some options
on the bottom part.

00:04:59.166 --> 00:05:02.846 A:middle
Now let's go through some
examples to build that up.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.166 --> 00:05:02.846 A:middle
Now let's go through some
examples to build that up.

00:05:04.606 --> 00:05:07.576 A:middle
First, to set a place holder,

00:05:07.576 --> 00:05:10.086 A:middle
set a place holder
property on that sheet.

00:05:13.136 --> 00:05:13.726 A:middle
There we go.

00:05:15.986 --> 00:05:18.866 A:middle
And your Web Service might
have a maximum character limit,

00:05:19.316 --> 00:05:21.166 A:middle
so we have a little indicator
on the bottom left for that.

00:05:21.396 --> 00:05:23.416 A:middle
To update it, just
set a property there.

00:05:26.366 --> 00:05:28.836 A:middle
And again, we offer you a
preview view out of the box,

00:05:28.836 --> 00:05:30.026 A:middle
but you can have your own one.

00:05:30.726 --> 00:05:34.356 A:middle
To support that simply subclass
the composer's controller

00:05:34.716 --> 00:05:36.386 A:middle
and override load preview view,

00:05:36.826 --> 00:05:40.426 A:middle
and then return your custom
view controller for the preview.

00:05:41.736 --> 00:05:43.676 A:middle
One thing to keep
in mind, however,

00:05:43.676 --> 00:05:46.536 A:middle
make sure that the view has --

00:05:46.536 --> 00:05:50.516 A:middle
otherwise it might not
show up on the sheet.

00:05:54.366 --> 00:05:57.996 A:middle
Now, there are these
options on the bottom.

00:05:59.076 --> 00:06:02.276 A:middle
Those are simply cells
with a value on the left,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.076 --> 00:06:02.276 A:middle
Those are simply cells
with a value on the left,

00:06:02.276 --> 00:06:05.486 A:middle
value on the right,
and to tap on them,

00:06:05.606 --> 00:06:07.136 A:middle
we push an option
view controller

00:06:07.136 --> 00:06:12.356 A:middle
that can select your options,
your custom options there.

00:06:13.306 --> 00:06:15.136 A:middle
Let me show you how you
set that up in code.

00:06:16.246 --> 00:06:16.896 A:middle
Pretty simple.

00:06:17.356 --> 00:06:22.726 A:middle
Subclass SL -- composer,
then override the -- method.

00:06:23.796 --> 00:06:27.546 A:middle
Each row is represented
as an SL compose sheet

00:06:27.596 --> 00:06:28.536 A:middle
configuration item.

00:06:28.946 --> 00:06:29.576 A:middle
Quite a mouthful.

00:06:30.226 --> 00:06:34.026 A:middle
On the left is the title.

00:06:34.606 --> 00:06:37.746 A:middle
The value is on the
right-hand side.

00:06:40.166 --> 00:06:44.276 A:middle
Now, if the user taps on a cell,
we call this tap handler here,

00:06:44.956 --> 00:06:46.226 A:middle
and there you are supposed

00:06:46.296 --> 00:06:48.216 A:middle
to create your custom
view controller

00:06:48.216 --> 00:06:49.786 A:middle
for your custom option.

00:06:49.786 --> 00:06:53.866 A:middle
And to push it, simply call push
configuration view controller.

00:06:54.456 --> 00:06:56.906 A:middle
This works the same
way as the API

00:06:57.066 --> 00:06:59.146 A:middle
from your navigation controller.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:01.356 --> 00:07:05.676 A:middle
And then finally,
return the area of items.

00:07:08.546 --> 00:07:11.356 A:middle
Now, we even offer you
auto complete support

00:07:11.356 --> 00:07:12.346 A:middle
on the compose sheet.

00:07:13.236 --> 00:07:16.196 A:middle
To auto complete, you
set a view controller

00:07:16.196 --> 00:07:17.876 A:middle
to update the button part here.

00:07:18.776 --> 00:07:21.686 A:middle
In this case, it's a table view
where we auto complete names,

00:07:21.876 --> 00:07:23.016 A:middle
but it could be really anything.

00:07:24.696 --> 00:07:27.736 A:middle
To set it, just set the auto
completion view property,

00:07:28.226 --> 00:07:29.736 A:middle
we do all the animations
for you.

00:07:30.126 --> 00:07:31.366 A:middle
When you are done
auto completing,

00:07:31.396 --> 00:07:35.506 A:middle
you set it back to nil.

00:07:35.846 --> 00:07:36.686 A:middle
All pretty simple.

00:07:37.416 --> 00:07:37.596 A:middle
Again,

00:07:37.596 --> 00:07:39.826 A:middle
our
SLComposeServiceViewController

00:07:39.826 --> 00:07:41.656 A:middle
provides a consistent
and familiar UI.

00:07:42.736 --> 00:07:46.086 A:middle
It's very customizable for
you to adopt it in your app.

00:07:47.076 --> 00:07:48.626 A:middle
However, if you have
different needs

00:07:48.656 --> 00:07:50.986 A:middle
for your service extension,

00:07:51.256 --> 00:07:54.166 A:middle
you can always go back
subclassing your view

00:07:54.366 --> 00:07:55.386 A:middle
controller directly.

00:07:57.346 --> 00:08:00.826 A:middle
Now, I will just show you how
to make Action Share extensions.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:57.346 --> 00:08:00.826 A:middle
Now, I will just show you how
to make Action Share extensions.

00:08:01.546 --> 00:08:02.806 A:middle
Now let's change
gears a little bit

00:08:02.956 --> 00:08:07.716 A:middle
and discuss how you can support
extensions made by someone else

00:08:08.136 --> 00:08:09.536 A:middle
in your host application.

00:08:11.316 --> 00:08:14.586 A:middle
For example, let's say we
made a text edit application,

00:08:15.236 --> 00:08:17.356 A:middle
and we'd like to share
those text documents

00:08:17.356 --> 00:08:18.556 A:middle
as well, plain text.

00:08:19.586 --> 00:08:22.476 A:middle
However, some extensions
might not understand text.

00:08:23.186 --> 00:08:24.686 A:middle
They might only support PDFs

00:08:25.556 --> 00:08:27.736 A:middle
or other extensions
might only support HTML.

00:08:29.326 --> 00:08:31.396 A:middle
Now, you would like to support
as many extensions as possible,

00:08:31.396 --> 00:08:35.116 A:middle
so a good way would be to offer
all those three file types.

00:08:36.806 --> 00:08:38.525 A:middle
But when you think about that,

00:08:39.046 --> 00:08:41.246 A:middle
those are not really
three separate documents

00:08:41.246 --> 00:08:43.116 A:middle
when you share a text document,

00:08:43.586 --> 00:08:46.586 A:middle
but what you really have
is a single document

00:08:46.676 --> 00:08:48.236 A:middle
that supports different
file formats.

00:08:49.936 --> 00:08:53.416 A:middle
And exactly for that we have
an API called NSItemProvider.

00:08:55.296 --> 00:08:58.956 A:middle
In one sentence,
NSItemProvider is a single item

00:08:59.046 --> 00:09:00.536 A:middle
with multiple representations.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.046 --> 00:09:00.536 A:middle
with multiple representations.

00:09:01.686 --> 00:09:04.266 A:middle
Let me show you a code
example to explain it better.

00:09:05.786 --> 00:09:10.846 A:middle
Now, we create NSItemProvider,
then we call register the item

00:09:10.846 --> 00:09:14.156 A:middle
for type identifier to
add a new representation

00:09:14.156 --> 00:09:15.196 A:middle
to that item provider.

00:09:16.166 --> 00:09:17.496 A:middle
In that case, it's plain text.

00:09:19.136 --> 00:09:22.906 A:middle
Now, if the extension asks for
the plain text representation,

00:09:23.336 --> 00:09:26.106 A:middle
the system will call this
load handler block here.

00:09:27.546 --> 00:09:30.226 A:middle
And there you are supposed
to create your text document

00:09:30.226 --> 00:09:32.746 A:middle
on the fly and call
the completion handler

00:09:32.746 --> 00:09:34.976 A:middle
to return the data
back to the extension.

00:09:34.976 --> 00:09:36.416 A:middle
Same for PDF.

00:09:37.106 --> 00:09:41.586 A:middle
As soon as the extension asks
for a PDF representation,

00:09:42.026 --> 00:09:45.546 A:middle
we call the load handler, there
you create your PDF on the fly

00:09:45.546 --> 00:09:47.646 A:middle
and call the completion
and let it return data back

00:09:48.106 --> 00:09:49.076 A:middle
to the extension.

00:09:51.136 --> 00:09:53.146 A:middle
To display Share Sheet,

00:09:53.506 --> 00:09:55.666 A:middle
simply create a UI
activity view controller

00:09:56.306 --> 00:10:01.786 A:middle
and offer the item provider
options in the initializer.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:56.306 --> 00:10:01.786 A:middle
and offer the item provider
options in the initializer.

00:10:03.266 --> 00:10:06.986 A:middle
Now, in the first example with
the compose sheet you saw,

00:10:07.456 --> 00:10:09.216 A:middle
we have this little
preview in the top right.

00:10:09.796 --> 00:10:11.826 A:middle
The hosts should offer
previews as well.

00:10:13.346 --> 00:10:15.696 A:middle
Those previews represent
what will be shared,

00:10:17.076 --> 00:10:19.776 A:middle
and also they need to be
simple and efficient to create.

00:10:19.776 --> 00:10:21.026 A:middle
They can't be too large.

00:10:22.966 --> 00:10:25.756 A:middle
Again, for that, we have an
API in NSItemProvider as well.

00:10:26.566 --> 00:10:28.166 A:middle
It's called preview
image handler.

00:10:29.276 --> 00:10:32.006 A:middle
And as soon as the
extension asks for a preview,

00:10:32.286 --> 00:10:34.876 A:middle
we call this block here,
and there you are supposed

00:10:34.876 --> 00:10:37.886 A:middle
to create your thumbnail or
your preview representation

00:10:37.886 --> 00:10:40.776 A:middle
as an image on the fly and
call the completion handler

00:10:40.776 --> 00:10:41.836 A:middle
to return that data back.

00:10:42.806 --> 00:10:44.936 A:middle
Now we need to change our
perspective yet again.

00:10:45.526 --> 00:10:47.616 A:middle
We talked first about
implementing extensions.

00:10:48.686 --> 00:10:51.526 A:middle
Then we talked about supporting
extensions as a host app.

00:10:52.166 --> 00:10:53.266 A:middle
Now let's look at what it's

00:10:53.266 --> 00:10:55.626 A:middle
like to be an extension
developer again and how

00:10:55.626 --> 00:10:57.306 A:middle
to declare your support
with the kind

00:10:57.306 --> 00:11:00.126 A:middle
of data the host app can
offer to your extension.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:57.306 --> 00:11:00.126 A:middle
of data the host app can
offer to your extension.

00:11:01.556 --> 00:11:04.576 A:middle
For example, maybe you like
to have full sharing service,

00:11:04.576 --> 00:11:07.086 A:middle
and you want to declare that you
are sharing extension support

00:11:07.196 --> 00:11:10.086 A:middle
images and movie.

00:11:11.656 --> 00:11:15.026 A:middle
Now, let's make three
extensions in that case.

00:11:16.096 --> 00:11:20.236 A:middle
One extension should support --
one extension supports images,

00:11:20.866 --> 00:11:22.416 A:middle
another one can handle movies,

00:11:22.736 --> 00:11:25.356 A:middle
and a third one handles
images and movies.

00:11:27.286 --> 00:11:28.116 A:middle
Now let's see what happens

00:11:28.116 --> 00:11:30.176 A:middle
if the host app shares
the single image.

00:11:31.896 --> 00:11:33.316 A:middle
In that case, the first

00:11:33.316 --> 00:11:35.456 A:middle
and third extension will
appear in the Share Sheet.

00:11:37.366 --> 00:11:39.536 A:middle
Now, same way for
the movie case.

00:11:40.176 --> 00:11:44.616 A:middle
If the host application shares
a single movie, the second

00:11:44.616 --> 00:11:47.356 A:middle
and third extension in the
Share Sheet, that makes sense.

00:11:48.286 --> 00:11:50.856 A:middle
However, what happens
if the host

00:11:51.286 --> 00:11:53.106 A:middle
of a share supports
image and movie?

00:11:53.106 --> 00:11:55.426 A:middle
You would think all the
extensions would appear

00:11:55.426 --> 00:11:58.786 A:middle
in the sheet; however, this
is currently not the case

00:11:58.856 --> 00:12:02.166 A:middle
since in iOS 8 the
implementation requires


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.856 --> 00:12:02.166 A:middle
since in iOS 8 the
implementation requires

00:12:02.276 --> 00:12:07.036 A:middle
that extension can handle all
two types of file formats.

00:12:07.036 --> 00:12:10.246 A:middle
It's a bit unfortunate

00:12:10.316 --> 00:12:14.276 A:middle
since user extension developer
would probably like to support

00:12:14.276 --> 00:12:17.856 A:middle
as many extensions as possible,
and to do that, you should offer

00:12:17.856 --> 00:12:19.866 A:middle
as many representations
as possible as well.

00:12:20.426 --> 00:12:23.226 A:middle
But in that case, you
actually get less extensions

00:12:23.226 --> 00:12:25.946 A:middle
than by just sharing a
single representation,

00:12:25.946 --> 00:12:27.526 A:middle
like movie or image.

00:12:29.176 --> 00:12:30.916 A:middle
So we added a new
behavior in iOS 9.

00:12:32.996 --> 00:12:37.606 A:middle
You can opt in by adding
the NSExtension activation

00:12:37.606 --> 00:12:38.396 A:middle
dictionary version

00:12:38.806 --> 00:12:42.426 A:middle
in new extensions info
plist, set it to two.

00:12:43.146 --> 00:12:46.836 A:middle
After that, your
extension will appear even

00:12:46.836 --> 00:12:49.146 A:middle
if the host app shares
both image and movie,

00:12:49.146 --> 00:12:51.896 A:middle
and even if you are only
interested in movies or images.

00:12:54.256 --> 00:12:56.536 A:middle
Now, those are high-level
activation rules,

00:12:57.186 --> 00:13:00.546 A:middle
but we also support activation
rules that are just predicates.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:57.186 --> 00:13:00.546 A:middle
but we also support activation
rules that are just predicates.

00:13:01.896 --> 00:13:04.366 A:middle
Again, predicates can be
very simple but also very,

00:13:04.366 --> 00:13:05.876 A:middle
very powerful like
this one here.

00:13:06.796 --> 00:13:08.566 A:middle
I won't go into details
right now,

00:13:08.666 --> 00:13:10.706 A:middle
but check out the App
Extension Developer Guide

00:13:10.706 --> 00:13:11.626 A:middle
for more information.

00:13:11.626 --> 00:13:19.546 A:middle
Now, let's talk about
icons for extensions.

00:13:19.636 --> 00:13:23.886 A:middle
As I mentioned before,

00:13:24.016 --> 00:13:26.866 A:middle
Share extensions
represents your application

00:13:26.866 --> 00:13:28.516 A:middle
of Web Service within
a Share Sheet.

00:13:29.266 --> 00:13:32.056 A:middle
Because of that, we simply
use your application icon

00:13:32.056 --> 00:13:35.156 A:middle
or a containing applications
icon as the icon

00:13:35.156 --> 00:13:37.226 A:middle
in the Share Sheet, so
there's no additional work

00:13:37.226 --> 00:13:38.606 A:middle
for you needed.

00:13:41.146 --> 00:13:44.486 A:middle
Action extensions, on the other
hand, require template images.

00:13:44.896 --> 00:13:49.916 A:middle
We require two sizes, one for
the iPad, one for the iPhone.

00:13:52.186 --> 00:13:53.746 A:middle
And they reside in
the extension bundle.

00:13:54.756 --> 00:13:57.666 A:middle
Now, let me explain how
template images work.

00:13:59.166 --> 00:14:00.976 A:middle
Think of it as, like, a stencil.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.166 --> 00:14:00.976 A:middle
Think of it as, like, a stencil.

00:14:02.006 --> 00:14:04.216 A:middle
A template image is a
black-and-white representation

00:14:04.706 --> 00:14:07.386 A:middle
with a transparent background,
and the system then takes

00:14:07.386 --> 00:14:09.316 A:middle
that stencil of that
black-and-white image

00:14:10.166 --> 00:14:14.826 A:middle
and creates the actual
icon for the Share Sheet.

00:14:15.666 --> 00:14:21.496 A:middle
And again, require two sizes,
60 points for the iPhone,

00:14:21.986 --> 00:14:23.526 A:middle
76 points for the iPad.

00:14:25.816 --> 00:14:30.076 A:middle
However, I encourage you to use
image assets in your extension

00:14:30.236 --> 00:14:33.406 A:middle
and offer all different --
all the different icon sizes

00:14:33.506 --> 00:14:35.086 A:middle
that are for application icons.

00:14:35.756 --> 00:14:39.096 A:middle
That way your app extension
will be far more future-proof.

00:14:42.896 --> 00:14:45.126 A:middle
So much about Action
Share extensions.

00:14:45.126 --> 00:14:46.876 A:middle
Let's invite Ian
on stage to talk

00:14:46.876 --> 00:14:48.136 A:middle
about Today Widget enhancements.

00:14:49.516 --> 00:14:56.826 A:middle
[ Applause ]

00:14:57.326 --> 00:14:59.386 A:middle
&gt;&gt; IAN BAIRD: Thank you, Sophia.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:00.376 --> 00:15:04.696 A:middle
Hi. I'm Ian Baird, CoreOS
engineer, and today I am going

00:15:04.696 --> 00:15:07.096 A:middle
to talk to you about
Today Widget enhancements.

00:15:08.576 --> 00:15:09.546 A:middle
First a quick recap.

00:15:10.136 --> 00:15:11.386 A:middle
As you remember from last year,

00:15:11.856 --> 00:15:15.056 A:middle
Today Widgets give you quick
information at a glance,

00:15:15.056 --> 00:15:18.236 A:middle
so your stock prices,
your sports scores.

00:15:18.686 --> 00:15:20.706 A:middle
It tells you how long
it's going to take for you

00:15:20.706 --> 00:15:22.386 A:middle
to get home from work.

00:15:23.836 --> 00:15:26.566 A:middle
So today I am going to
talk to you about how

00:15:26.566 --> 00:15:29.506 A:middle
to enhance your Today
Widget, how to make sure

00:15:29.566 --> 00:15:33.096 A:middle
that the model data is
always up-to-date and in sync

00:15:33.186 --> 00:15:34.766 A:middle
with your containing app.

00:15:35.226 --> 00:15:37.796 A:middle
I'm also going to tell
you about how to make sure

00:15:37.996 --> 00:15:40.886 A:middle
that your visual
representation is up-to-date

00:15:40.886 --> 00:15:42.966 A:middle
and reflects your
widget's content as well.

00:15:44.026 --> 00:15:47.386 A:middle
And then I am going to go over
some general best practices

00:15:47.466 --> 00:15:49.846 A:middle
that you can use for
all of your extensions,

00:15:50.076 --> 00:15:52.156 A:middle
including your Today Widgets.

00:15:53.726 --> 00:15:54.506 A:middle
Let's get started.

00:15:55.316 --> 00:15:57.636 A:middle
This is a view of the
Notification Center.

00:15:57.946 --> 00:16:00.276 A:middle
It's populated by Today Widgets.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:57.946 --> 00:16:00.276 A:middle
It's populated by Today Widgets.

00:16:00.856 --> 00:16:03.076 A:middle
You can scroll it to
see all of the widgets,

00:16:03.686 --> 00:16:07.966 A:middle
and if you want more information
about anything you can see here,

00:16:08.376 --> 00:16:12.916 A:middle
you can simply tap on the
widget, and it will take you

00:16:12.976 --> 00:16:15.156 A:middle
to the containing app
for more information.

00:16:16.156 --> 00:16:18.546 A:middle
Now, how do we facilitate
this interaction

00:16:18.746 --> 00:16:21.526 A:middle
between the Today Widget
and its containing app?

00:16:22.256 --> 00:16:25.266 A:middle
Well, we do this by
the use of URL schemes.

00:16:25.906 --> 00:16:28.136 A:middle
And now I am going to tell you
a little bit more about those.

00:16:28.826 --> 00:16:33.566 A:middle
Interactions use these URL
schemes and some open URL API

00:16:33.916 --> 00:16:38.646 A:middle
on NSExtension contexts to
take the user to the app.

00:16:38.646 --> 00:16:41.616 A:middle
Now, we have some best
practices that I'd like to talk

00:16:41.616 --> 00:16:44.766 A:middle
about today governing the
use of these URL schemes.

00:16:45.616 --> 00:16:49.016 A:middle
First, we'd really like
you to use and concentrate

00:16:49.016 --> 00:16:51.626 A:middle
on your app's registered
URL schemes.

00:16:52.196 --> 00:16:53.086 A:middle
This is great.

00:16:54.206 --> 00:16:55.246 A:middle
The next thing you want

00:16:55.246 --> 00:16:59.586 A:middle
to use is you can use system
URL schemes, like HTTPS.

00:16:59.586 --> 00:17:03.016 A:middle
That's going to open
a webpage in Safari.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.586 --> 00:17:03.016 A:middle
That's going to open
a webpage in Safari.

00:17:03.476 --> 00:17:06.976 A:middle
You can also create
messages, start phone calls,

00:17:07.366 --> 00:17:10.806 A:middle
and perform other interactions
and start interesting workflows

00:17:11.006 --> 00:17:12.346 A:middle
with system components.

00:17:12.826 --> 00:17:15.096 A:middle
And here's how you do it.

00:17:15.366 --> 00:17:19.846 A:middle
You'll notice that I am showing
a table view, did select row

00:17:19.846 --> 00:17:22.286 A:middle
at index path callback
because a lot

00:17:22.286 --> 00:17:24.096 A:middle
of widgets are simply
table views.

00:17:25.096 --> 00:17:26.336 A:middle
The first thing we
are going to want

00:17:26.376 --> 00:17:29.006 A:middle
to do is actually
construct a URL.

00:17:29.246 --> 00:17:32.956 A:middle
We are going to do this with
the myapp URL scheme here,

00:17:33.256 --> 00:17:34.816 A:middle
just for the sake of example.

00:17:35.046 --> 00:17:38.456 A:middle
This is going to take
us to my containing app.

00:17:38.816 --> 00:17:40.026 A:middle
The next thing we
are going to want

00:17:40.116 --> 00:17:42.376 A:middle
to do is we are actually
going to want to call

00:17:42.376 --> 00:17:47.766 A:middle
that open URL API that you can
find on the extension context,

00:17:48.066 --> 00:17:50.586 A:middle
which is probably attached
to your view controller.

00:17:51.586 --> 00:17:55.036 A:middle
Now, this is a little bit
different from the API we expose

00:17:55.036 --> 00:17:58.856 A:middle
on UI application in that
it takes a call-back block,

00:17:59.176 --> 00:18:02.346 A:middle
and this call-back block
has one boolean parameter


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.176 --> 00:18:02.346 A:middle
and this call-back block
has one boolean parameter

00:18:02.486 --> 00:18:04.106 A:middle
that I am going to tell
you more about now.

00:18:05.516 --> 00:18:09.256 A:middle
The success parameter is
going to be set to true

00:18:09.476 --> 00:18:12.446 A:middle
if we were able to take
you to the containing app

00:18:12.946 --> 00:18:14.816 A:middle
or to the system component,

00:18:15.106 --> 00:18:17.106 A:middle
which has registered
the URL scheme.

00:18:17.686 --> 00:18:20.936 A:middle
It's going to be set to false
if we were not able to do this,

00:18:21.486 --> 00:18:24.296 A:middle
like if the user has not
unlocked the phone and pulls

00:18:24.296 --> 00:18:26.996 A:middle
down the Notification Center
when the phone is locked.

00:18:29.076 --> 00:18:31.826 A:middle
There are many other
ways of interacting

00:18:31.926 --> 00:18:35.046 A:middle
with the containing app and
sharing data, and today I want

00:18:35.046 --> 00:18:36.716 A:middle
to tell you about
how to use defaults

00:18:36.886 --> 00:18:40.306 A:middle
with your containing
app; containers;

00:18:41.816 --> 00:18:46.096 A:middle
Keychain items; and
framework data.

00:18:46.166 --> 00:18:49.296 A:middle
Framework data is going to be
scribbled into Shared containers

00:18:49.406 --> 00:18:52.076 A:middle
on your behalf by
system frameworks.

00:18:52.776 --> 00:18:58.626 A:middle
And all of this is neatly
grouped up into app groups.

00:18:58.776 --> 00:19:00.316 A:middle
First, user defaults.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:58.776 --> 00:19:00.316 A:middle
First, user defaults.

00:19:00.706 --> 00:19:02.546 A:middle
You probably know
what user defaults are

00:19:02.676 --> 00:19:04.146 A:middle
if you've been developing
for Cocoa

00:19:04.146 --> 00:19:05.436 A:middle
or Cocoa Touch for a while.

00:19:05.676 --> 00:19:08.276 A:middle
They are small pieces
of configuration data.

00:19:08.326 --> 00:19:11.926 A:middle
They are like little
strings, numbers, booleans,

00:19:12.196 --> 00:19:15.456 A:middle
and other things that affect
the configuration of your app.

00:19:15.776 --> 00:19:18.216 A:middle
You can share these pieces
of configuration data

00:19:18.616 --> 00:19:21.516 A:middle
between your containing
app and your extensions

00:19:21.836 --> 00:19:26.436 A:middle
by using the NSUser defaults
init with suite name API.

00:19:26.436 --> 00:19:31.316 A:middle
You are going to pass the app
group identifier to this API.

00:19:31.316 --> 00:19:34.626 A:middle
Now there's an important
thing to remember about this,

00:19:35.036 --> 00:19:39.646 A:middle
this API doesn't merely unlock
your containing app's defaults,

00:19:39.806 --> 00:19:42.566 A:middle
your standard user defaults
in your containing app.

00:19:42.996 --> 00:19:45.996 A:middle
What it does is it
creates a new default suite

00:19:46.266 --> 00:19:49.356 A:middle
which your containing
app can also have access

00:19:49.356 --> 00:19:53.306 A:middle
to if it participates in the app
group, so it's super important

00:19:53.516 --> 00:19:56.456 A:middle
that you use this API, not
only in your extension,

00:19:56.666 --> 00:19:58.456 A:middle
but in your containing
app when you want

00:19:58.456 --> 00:20:01.406 A:middle
to change these configuration
items in the defaults.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:58.456 --> 00:20:01.406 A:middle
to change these configuration
items in the defaults.

00:20:02.556 --> 00:20:06.076 A:middle
The next thing I want to
talk to you about are things

00:20:06.076 --> 00:20:08.826 A:middle
that you can use inside
of the shared container

00:20:09.706 --> 00:20:14.196 A:middle
which the containing app and its
extension all have access to.

00:20:14.756 --> 00:20:17.216 A:middle
The first thing you can
keep in there is model data.

00:20:17.886 --> 00:20:22.846 A:middle
Model data is stuff like SQLite
files, core data data stores

00:20:23.186 --> 00:20:26.426 A:middle
and maybe even model
objects persisted

00:20:26.426 --> 00:20:28.116 A:middle
to things like plist files.

00:20:28.116 --> 00:20:30.466 A:middle
You can store all of this
inside of a shared container

00:20:30.856 --> 00:20:32.326 A:middle
where the containing application

00:20:32.586 --> 00:20:36.646 A:middle
and its extensions can
all have access to it.

00:20:37.286 --> 00:20:39.006 A:middle
You can also store
documents in there.

00:20:39.146 --> 00:20:42.166 A:middle
Earlier, Sophia was talking
about a text application,

00:20:42.526 --> 00:20:45.756 A:middle
and maybe this text application
should store its text documents

00:20:46.066 --> 00:20:49.086 A:middle
inside of the shared container,
where it can edit them

00:20:49.486 --> 00:20:53.306 A:middle
and the extension can edit it.

00:20:53.586 --> 00:20:58.976 A:middle
Next, you can also store
media, media items like images,

00:20:59.486 --> 00:21:03.826 A:middle
video clips, audio files, and
other things that you want


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.486 --> 00:21:03.826 A:middle
video clips, audio files, and
other things that you want

00:21:03.826 --> 00:21:06.646 A:middle
to have accessible to both
your containing application

00:21:07.086 --> 00:21:08.306 A:middle
and its extensions.

00:21:09.066 --> 00:21:11.866 A:middle
Now, if you are storing
cacheable items

00:21:11.866 --> 00:21:14.446 A:middle
in the shared container, that's
probably not all that good.

00:21:14.446 --> 00:21:17.046 A:middle
I think you want to keep that
in caches where it can be purged

00:21:17.046 --> 00:21:19.706 A:middle
if we start running
low on space.

00:21:20.306 --> 00:21:26.226 A:middle
Now, to set up core data to
use the shared container,

00:21:26.666 --> 00:21:28.926 A:middle
I want to show you a
little bit of sample code,

00:21:29.076 --> 00:21:31.746 A:middle
and this is sample code that
you are going to use both

00:21:31.746 --> 00:21:34.426 A:middle
in your containing app
and any of its extensions.

00:21:35.136 --> 00:21:39.016 A:middle
You are simply modifying the
code that Xcode already produced

00:21:39.016 --> 00:21:40.526 A:middle
for you via the template.

00:21:41.166 --> 00:21:43.906 A:middle
So the first thing you will want
to do is create a new property

00:21:44.186 --> 00:21:45.666 A:middle
or change the existing one.

00:21:46.096 --> 00:21:49.816 A:middle
And in this case, we are calling
it secure app group presentation

00:21:49.816 --> 00:21:50.706 A:middle
store URL.

00:21:52.096 --> 00:21:54.916 A:middle
Of course, the first thing we
need to do is get an instance

00:21:54.976 --> 00:21:56.306 A:middle
of the NSFile manager.

00:21:57.216 --> 00:22:01.516 A:middle
And next, on file manager, we
are going to call container URL


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:57.216 --> 00:22:01.516 A:middle
And next, on file manager, we
are going to call container URL

00:22:01.626 --> 00:22:04.976 A:middle
for security application
group identifier, and again,

00:22:05.256 --> 00:22:08.656 A:middle
pass the app group identifier
that we had set up previously.

00:22:10.006 --> 00:22:11.226 A:middle
After that, we are going

00:22:11.226 --> 00:22:15.046 A:middle
to append the store
file name to that URL.

00:22:15.416 --> 00:22:18.276 A:middle
That URL points in to
the shared container,

00:22:18.456 --> 00:22:22.976 A:middle
where both the containing app
and the extension can access it.

00:22:23.236 --> 00:22:25.976 A:middle
Now we need to use this store
URL, so we are going to set

00:22:25.976 --> 00:22:27.936 A:middle
up our persistent
store coordinator.

00:22:28.216 --> 00:22:29.356 A:middle
And the way we are
going to do this is

00:22:29.356 --> 00:22:33.696 A:middle
by first creating a store
coordinator using our manage

00:22:33.696 --> 00:22:37.126 A:middle
object model, and then we are
going to grab the instance

00:22:37.126 --> 00:22:39.256 A:middle
of the store URL
we just created.

00:22:40.526 --> 00:22:43.826 A:middle
Finally, we are going to
add this persistent store

00:22:44.136 --> 00:22:47.546 A:middle
to the store coordinator
using the URL we just created.

00:22:47.546 --> 00:22:49.166 A:middle
This is going to
point -- remember --

00:22:49.166 --> 00:22:52.466 A:middle
to the SQLite file that's
backing this persistent store

00:22:52.866 --> 00:22:53.986 A:middle
in the Shared container.

00:22:54.906 --> 00:22:56.906 A:middle
Finally, we return
it to the caller.

00:22:59.246 --> 00:23:03.186 A:middle
Lastly, we actually want to set
up the manage object context,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.246 --> 00:23:03.186 A:middle
Lastly, we actually want to set
up the manage object context,

00:23:03.266 --> 00:23:06.366 A:middle
and we will do this by grabbing
our persistent store coordinator

00:23:06.366 --> 00:23:09.466 A:middle
and then creating a
manage object context.

00:23:09.946 --> 00:23:12.266 A:middle
And then we will
set this coordinator

00:23:12.326 --> 00:23:14.216 A:middle
to be the persistent
store coordinator

00:23:14.536 --> 00:23:18.146 A:middle
for the manage object
context and then return it.

00:23:18.586 --> 00:23:21.676 A:middle
And that's all you have to
do to set up core data inside

00:23:21.676 --> 00:23:24.456 A:middle
of your containing app
and any of its extensions

00:23:24.696 --> 00:23:29.046 A:middle
to use a shared persistent
store which is located

00:23:29.296 --> 00:23:30.456 A:middle
in the shared container.

00:23:32.196 --> 00:23:37.346 A:middle
So core data may not be what
you need for your application.

00:23:37.746 --> 00:23:40.676 A:middle
Let's pretend that you are using
the plist files that I talked

00:23:40.676 --> 00:23:43.366 A:middle
about earlier to
serialize your model objects

00:23:43.656 --> 00:23:44.956 A:middle
into the shared container.

00:23:45.576 --> 00:23:47.566 A:middle
At this point, you are
going to have to worry

00:23:47.566 --> 00:23:51.836 A:middle
about synchronization, access,
and all this kind of stuff

00:23:52.196 --> 00:23:56.156 A:middle
in the shared container because
very potentially, your extension

00:23:56.596 --> 00:23:58.696 A:middle
and your application
could be attempting

00:23:58.696 --> 00:24:01.126 A:middle
to simultaneously
modify these files,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.696 --> 00:24:01.126 A:middle
to simultaneously
modify these files,

00:24:01.396 --> 00:24:03.326 A:middle
which is not good
for data consistency.

00:24:04.336 --> 00:24:08.276 A:middle
So you may actually have
to use exclusive locks.

00:24:08.586 --> 00:24:10.576 A:middle
And you need to be
really super careful

00:24:10.576 --> 00:24:13.406 A:middle
about using exclusive locks for
data in the shared container

00:24:13.906 --> 00:24:16.406 A:middle
because when an extension
is killed,

00:24:16.756 --> 00:24:20.136 A:middle
if it's suspended while
holding on to an exclusive lock.

00:24:20.766 --> 00:24:23.156 A:middle
Again, this isn't good
for data consistency.

00:24:23.926 --> 00:24:26.726 A:middle
So what do you need
to do about this?

00:24:27.456 --> 00:24:29.506 A:middle
Well, I'd like to talk
to you a little bit more

00:24:29.506 --> 00:24:30.936 A:middle
about task assertions.

00:24:31.346 --> 00:24:34.616 A:middle
Task assertions are a great
way for your extension

00:24:34.976 --> 00:24:39.046 A:middle
to tell the operating system
that, hey, I'm doing something

00:24:39.046 --> 00:24:40.986 A:middle
that you probably
shouldn't interrupt.

00:24:41.636 --> 00:24:46.456 A:middle
And if you interrupt it, well,
I'd like to get some sort

00:24:46.456 --> 00:24:48.456 A:middle
of call-back so I can
clean things up first.

00:24:49.696 --> 00:24:52.846 A:middle
Remember that extensions are
suspended pretty aggressively

00:24:52.846 --> 00:24:54.306 A:middle
when they are no longer in use.

00:24:54.816 --> 00:24:59.106 A:middle
When the user swipes down to
expose the Notification Center

00:24:59.336 --> 00:25:02.476 A:middle
and then swipes back up to
dismiss it, we are going


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:59.336 --> 00:25:02.476 A:middle
and then swipes back up to
dismiss it, we are going

00:25:02.476 --> 00:25:05.786 A:middle
to suspend all of the
extensions in play at that time.

00:25:06.366 --> 00:25:07.866 A:middle
So that could be pretty quick.

00:25:09.256 --> 00:25:12.356 A:middle
So you are going to want
to protect serialization

00:25:12.436 --> 00:25:13.846 A:middle
and other cleanup tasks

00:25:13.966 --> 00:25:16.096 A:middle
with these background
task assertions.

00:25:17.046 --> 00:25:18.596 A:middle
And I am going to
show you how to do

00:25:18.596 --> 00:25:22.316 A:middle
that now using the
NSProcess info API.

00:25:23.596 --> 00:25:25.316 A:middle
So the first thing
you are going to want

00:25:25.416 --> 00:25:28.736 A:middle
to do is get the
NSProcess info instance

00:25:29.006 --> 00:25:31.756 A:middle
by calling the process
info factory method.

00:25:32.256 --> 00:25:35.256 A:middle
Next you are going to want

00:25:35.256 --> 00:25:38.766 A:middle
to call the API perform
expiring activity with reason,

00:25:38.876 --> 00:25:41.736 A:middle
and I am going to take you
through how to set up this call.

00:25:42.336 --> 00:25:46.666 A:middle
The first parameter
you are going to pass

00:25:46.666 --> 00:25:49.106 A:middle
to this method is a
very short string.

00:25:49.676 --> 00:25:53.986 A:middle
This short string is for you,
not for the operating system.

00:25:54.336 --> 00:25:56.706 A:middle
This tells you what
you are doing inside

00:25:56.706 --> 00:25:57.876 A:middle
of the protected task.

00:25:58.666 --> 00:26:02.036 A:middle
The next thing you
are going to pass


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.666 --> 00:26:02.036 A:middle
The next thing you
are going to pass

00:26:02.036 --> 00:26:04.976 A:middle
to this API is a
call-back block,

00:26:05.646 --> 00:26:08.866 A:middle
and the call-back block is going
to be used in one of two ways.

00:26:09.136 --> 00:26:11.036 A:middle
And let me go through
the first way with you.

00:26:11.536 --> 00:26:14.916 A:middle
First, it's going to be
called if we were able

00:26:14.916 --> 00:26:17.986 A:middle
to acquire a background task
assertion on your behalf

00:26:18.236 --> 00:26:20.066 A:middle
with expired set to false.

00:26:20.516 --> 00:26:23.086 A:middle
This means to you
that it's safe for you

00:26:23.276 --> 00:26:26.976 A:middle
to perform some sensitive
task like serializing data

00:26:26.976 --> 00:26:28.596 A:middle
that you don't want
to be interrupted.

00:26:29.806 --> 00:26:32.836 A:middle
Now, since a task
assertion cannot be taken

00:26:32.836 --> 00:26:37.196 A:middle
out indefinitely, when the task
assertion is about to expire,

00:26:37.196 --> 00:26:39.606 A:middle
it's on the cusp
of being let go,

00:26:41.196 --> 00:26:44.686 A:middle
the operating system is going
to call your call-back again,

00:26:44.856 --> 00:26:47.366 A:middle
this time with expired
set to true.

00:26:47.916 --> 00:26:51.976 A:middle
This means that you need to
cancel whatever task you have

00:26:51.976 --> 00:26:56.926 A:middle
in flight and prepare
to be suspended.

00:26:57.246 --> 00:27:01.606 A:middle
Now, when you exit the
block, we are going


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:57.246 --> 00:27:01.606 A:middle
Now, when you exit the
block, we are going

00:27:01.606 --> 00:27:04.226 A:middle
to release the task
assertion on your behalf.

00:27:04.476 --> 00:27:06.456 A:middle
There's nothing else
that you need to do.

00:27:07.386 --> 00:27:11.606 A:middle
So the second way that this
can work is that we were unable

00:27:11.606 --> 00:27:14.446 A:middle
to acquire a task
assertion for you at all.

00:27:14.446 --> 00:27:17.716 A:middle
What we are going to do in
this case is we are going

00:27:17.716 --> 00:27:20.616 A:middle
to immediately call
your call-back block

00:27:20.896 --> 00:27:22.756 A:middle
with expired set to true.

00:27:23.726 --> 00:27:26.866 A:middle
You probably don't want
to take an exclusive lock

00:27:26.866 --> 00:27:28.546 A:middle
in the shared container
at this point

00:27:28.706 --> 00:27:31.996 A:middle
because if you get suspended,
nothing is protecting you.

00:27:33.586 --> 00:27:36.586 A:middle
At this point, you
want to clean up

00:27:37.206 --> 00:27:38.786 A:middle
and get ready to be suspended.

00:27:38.956 --> 00:27:42.046 A:middle
You only have a few brief
seconds to make sure

00:27:42.046 --> 00:27:43.966 A:middle
to clean everything up.

00:27:45.456 --> 00:27:52.046 A:middle
So that's a complex topic, but
I think there are three things

00:27:52.046 --> 00:27:55.306 A:middle
that you need to come away with
this talk about task assertions.

00:27:56.456 --> 00:27:58.746 A:middle
The first is that
they're released

00:27:58.816 --> 00:28:01.206 A:middle
when your code exits
the call-back block.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:58.816 --> 00:28:01.206 A:middle
when your code exits
the call-back block.

00:28:02.076 --> 00:28:05.566 A:middle
We grab one at the beginning,
and if everything's successful,

00:28:05.566 --> 00:28:08.356 A:middle
we set expired to false,
and then we hold on to

00:28:08.356 --> 00:28:10.406 A:middle
that task assertion for you

00:28:10.716 --> 00:28:13.966 A:middle
until your code exits
that block scope.

00:28:15.916 --> 00:28:18.076 A:middle
The next thing to remember is

00:28:18.076 --> 00:28:20.726 A:middle
that there is potentially
re-enter and execution

00:28:20.846 --> 00:28:22.386 A:middle
of your call-back
for the purposes

00:28:22.386 --> 00:28:25.196 A:middle
of notifying you
about expiration.

00:28:25.836 --> 00:28:28.626 A:middle
Again, we can call your
call-back block again

00:28:28.626 --> 00:28:31.846 A:middle
with expired set to true to
give you a hint that, hey,

00:28:31.846 --> 00:28:34.246 A:middle
this task assertion
is about to expire

00:28:34.246 --> 00:28:35.686 A:middle
and it's time for
you to clean up.

00:28:36.976 --> 00:28:37.816 A:middle
And then finally,

00:28:37.926 --> 00:28:41.126 A:middle
task assertions are not always
available for your extension.

00:28:41.536 --> 00:28:44.606 A:middle
Sometimes you will call and
expired will be immediately set

00:28:44.606 --> 00:28:47.306 A:middle
to true and your call-back
block will be executed that way

00:28:47.306 --> 00:28:51.726 A:middle
and you will not get a chance to
perform some critical operation.

00:28:51.726 --> 00:28:53.556 A:middle
You need to be prepared
to deal with that

00:28:54.406 --> 00:28:55.406 A:middle
because it will happen.

00:28:57.006 --> 00:29:01.256 A:middle
Next, these task assertions only
protect the code in the scope


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:57.006 --> 00:29:01.256 A:middle
Next, these task assertions only
protect the code in the scope

00:29:01.256 --> 00:29:03.376 A:middle
of that block, so they
are generally used

00:29:03.416 --> 00:29:06.536 A:middle
for very simple things,
like quick serialization,

00:29:06.536 --> 00:29:07.676 A:middle
something that's synchronous.

00:29:08.376 --> 00:29:11.866 A:middle
What do you do if you
need to coordinate

00:29:11.866 --> 00:29:13.416 A:middle
with work on another queue?

00:29:13.966 --> 00:29:17.046 A:middle
Because you remember that the
task assertions are scoped

00:29:17.106 --> 00:29:18.316 A:middle
to that call-back block.

00:29:19.316 --> 00:29:23.266 A:middle
Well, a call-back
block must synchronize

00:29:23.266 --> 00:29:25.016 A:middle
with protected work
on other queues.

00:29:25.356 --> 00:29:29.146 A:middle
So for instance, if you have
something on the main queue

00:29:29.716 --> 00:29:32.766 A:middle
that you wish to protect,
you need to make sure

00:29:32.926 --> 00:29:36.336 A:middle
that that call-back block does
not exit the original protected

00:29:36.386 --> 00:29:39.116 A:middle
block scope before that
work has completed.

00:29:39.986 --> 00:29:42.696 A:middle
So here's an example
of how not to do it.

00:29:43.266 --> 00:29:47.056 A:middle
By dispatch asyncing to the main
queue from within the block,

00:29:47.606 --> 00:29:50.076 A:middle
execution will exit
that block's scope,

00:29:50.466 --> 00:29:53.466 A:middle
possibly before perform
interrupt will work

00:29:54.006 --> 00:29:54.786 A:middle
has completed.

00:29:55.356 --> 00:29:56.286 A:middle
This is pretty bad.

00:29:56.956 --> 00:29:58.966 A:middle
So in this case,
your block needs

00:29:59.016 --> 00:30:02.876 A:middle
to synchronize via dispatch
sync or dispatch semaphores


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.016 --> 00:30:02.876 A:middle
to synchronize via dispatch
sync or dispatch semaphores

00:30:02.876 --> 00:30:06.356 A:middle
or whatever method you
choose with the main queue.

00:30:06.656 --> 00:30:08.956 A:middle
And remember that this work
that you are dispatching

00:30:09.506 --> 00:30:11.616 A:middle
to another queue -- it
doesn't necessarily have

00:30:11.656 --> 00:30:14.116 A:middle
to be the main queue --
needs to be cancelable

00:30:14.356 --> 00:30:18.426 A:middle
because we might call back your
block with expired set to true,

00:30:18.776 --> 00:30:20.586 A:middle
and at this point,
you will need to clean

00:30:20.586 --> 00:30:24.336 A:middle
up whatever you are doing, exit,
go back to the block, drop out,

00:30:24.606 --> 00:30:26.226 A:middle
and release the task assertion.

00:30:26.796 --> 00:30:31.756 A:middle
And it's actually safe
for you to do this

00:30:31.806 --> 00:30:34.476 A:middle
because this call-back
block is executing

00:30:34.476 --> 00:30:35.986 A:middle
on a private system queue.

00:30:36.386 --> 00:30:37.526 A:middle
You are not going to dead-lock

00:30:37.586 --> 00:30:39.906 A:middle
because we are not going
to call back into it.

00:30:41.236 --> 00:30:43.816 A:middle
Now, that was a lot.

00:30:44.646 --> 00:30:47.296 A:middle
I understand.

00:30:47.626 --> 00:30:50.646 A:middle
Moving along here.

00:30:50.886 --> 00:30:55.566 A:middle
In our new multitasking world,
we can now run into situations

00:30:55.906 --> 00:30:59.166 A:middle
where your extension and the
containing application are

00:30:59.166 --> 00:31:00.586 A:middle
running simultaneously.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.166 --> 00:31:00.586 A:middle
running simultaneously.

00:31:01.186 --> 00:31:03.736 A:middle
And this means that if
something happens inside

00:31:03.736 --> 00:31:06.956 A:middle
of your containing app that
changes your model data state,

00:31:07.696 --> 00:31:10.776 A:middle
potentially your extension
could be out of sync

00:31:11.276 --> 00:31:13.376 A:middle
with the model state,
and this is bad.

00:31:14.106 --> 00:31:17.776 A:middle
So one way, one thing you
can use to keep everyone

00:31:17.776 --> 00:31:20.806 A:middle
on the same page is the
Darwin Notification Center.

00:31:21.346 --> 00:31:24.236 A:middle
Now, the API is similar to
the NSNotification Center,

00:31:25.306 --> 00:31:28.056 A:middle
but it's a lot simpler, and
there's a smaller number

00:31:28.056 --> 00:31:30.036 A:middle
of use cases for
which it is applicable

00:31:30.416 --> 00:31:32.766 A:middle
to your containing
app and its extension.

00:31:33.366 --> 00:31:36.746 A:middle
For example today, we are
going to show you how to use it

00:31:36.746 --> 00:31:39.536 A:middle
to hint your extension
to reload the model.

00:31:39.536 --> 00:31:41.206 A:middle
And this is how you do it.

00:31:41.676 --> 00:31:45.226 A:middle
First, inside of that containing
app, you are going to want

00:31:45.226 --> 00:31:48.606 A:middle
to get an instance of the
Darwin Notification Center,

00:31:48.976 --> 00:31:51.916 A:middle
and you will do this by
calling CFNotificationCenter,

00:31:52.316 --> 00:31:53.926 A:middle
get Darwin notify Center.

00:31:54.956 --> 00:31:58.816 A:middle
Then you are going to pass this
notification center instance

00:31:59.116 --> 00:32:01.686 A:middle
to CFNotificationCenter
post notification.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:59.116 --> 00:32:01.686 A:middle
to CFNotificationCenter
post notification.

00:32:03.226 --> 00:32:06.276 A:middle
The next thing you are going to
want to do is to pick a string.

00:32:06.406 --> 00:32:08.956 A:middle
This string is going to
represent your notification,

00:32:09.376 --> 00:32:11.566 A:middle
and you are going to use
it in your containing app

00:32:11.946 --> 00:32:15.786 A:middle
and any extensions with which
to observe this notification.

00:32:16.756 --> 00:32:17.986 A:middle
And then you want to pass true.

00:32:19.076 --> 00:32:23.506 A:middle
In your extension, again,
you are going to want

00:32:23.506 --> 00:32:26.156 A:middle
to get an instance of the
Darwin Notification Center,

00:32:27.646 --> 00:32:29.006 A:middle
and you are going
to want to pass this

00:32:29.006 --> 00:32:31.406 A:middle
to CFNotificationCenter
at observer.

00:32:31.896 --> 00:32:35.096 A:middle
This allows you to observe
for this notification.

00:32:36.306 --> 00:32:38.616 A:middle
The next thing you are going
to want to do is you are going

00:32:38.616 --> 00:32:40.026 A:middle
to want to pass a
call-back block.

00:32:40.456 --> 00:32:43.106 A:middle
This is the call-back
block which is executed

00:32:43.466 --> 00:32:45.116 A:middle
when the system notices

00:32:45.276 --> 00:32:47.596 A:middle
that this notification
has been emitted.

00:32:48.786 --> 00:32:50.636 A:middle
Then you want to pass
the short string.

00:32:51.246 --> 00:32:54.866 A:middle
And finally, deliver
immediately.

00:32:56.016 --> 00:32:58.916 A:middle
This makes sure that
everything stays up-to-date

00:32:59.146 --> 00:33:01.836 A:middle
and the model inside of
your extension is reloaded


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.146 --> 00:33:01.836 A:middle
and the model inside of
your extension is reloaded

00:33:01.986 --> 00:33:04.296 A:middle
when the containing app
passes it this hint.

00:33:04.436 --> 00:33:08.076 A:middle
Now, remember I am calling it a
hint so you probably don't want

00:33:08.076 --> 00:33:11.856 A:middle
to use this for coordinating
locks between your extension

00:33:12.116 --> 00:33:16.816 A:middle
and your containing app because
it's not always guaranteed

00:33:17.086 --> 00:33:18.636 A:middle
that your extension
is going to be

00:33:18.636 --> 00:33:20.826 A:middle
around to receive
these notifications.

00:33:21.366 --> 00:33:28.066 A:middle
So that's how to keep your
data model up-to-date.

00:33:28.346 --> 00:33:30.506 A:middle
How do you keep your
widgets visual

00:33:30.506 --> 00:33:31.746 A:middle
representation up-to-date?

00:33:31.746 --> 00:33:33.756 A:middle
And next I would like
to tell you about that.

00:33:33.756 --> 00:33:37.146 A:middle
We are going to use something
called background refresh.

00:33:38.576 --> 00:33:42.196 A:middle
And background refresh is
a way that the system works

00:33:42.196 --> 00:33:44.866 A:middle
with your widget to
keep it up-to-date,

00:33:44.916 --> 00:33:49.716 A:middle
to keep the visual
representation of it up-to-date.

00:33:49.716 --> 00:33:52.606 A:middle
So again, we are going back
to the Notification Center,

00:33:52.896 --> 00:33:54.826 A:middle
and here you can see
our stocks widget.

00:33:55.166 --> 00:33:58.396 A:middle
The stocks widget, again,
shows the latest stock prices.

00:33:58.926 --> 00:34:08.646 A:middle
What happens if, in the course
of the day, Apple stock changes?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:58.926 --> 00:34:08.646 A:middle
What happens if, in the course
of the day, Apple stock changes?

00:34:09.366 --> 00:34:12.866 A:middle
Well, this notification
will probably be emitted

00:34:12.866 --> 00:34:17.186 A:middle
to your phone, at which point
the containing app will probably

00:34:17.186 --> 00:34:19.306 A:middle
be expected to do
something with it.

00:34:20.386 --> 00:34:23.936 A:middle
And this will probably change
the visual representation

00:34:23.936 --> 00:34:24.476 A:middle
of your widget.

00:34:25.906 --> 00:34:29.835 A:middle
Unfortunately, we will notice
here that the widget is now

00:34:29.835 --> 00:34:31.505 A:middle
out of sync with
the stock price.

00:34:31.505 --> 00:34:33.846 A:middle
It's showing $130.12.

00:34:33.846 --> 00:34:36.235 A:middle
It should be $132.12.

00:34:36.676 --> 00:34:37.835 A:middle
So how do we fix this?

00:34:37.976 --> 00:34:40.775 A:middle
How do we make sure that
our visual representation is

00:34:40.835 --> 00:34:41.676 A:middle
always up-to-date?

00:34:42.505 --> 00:34:44.696 A:middle
Well, for starters,
the system is going

00:34:44.696 --> 00:34:47.426 A:middle
to opportunistically
refresh this content.

00:34:47.746 --> 00:34:50.186 A:middle
It's going to talk to the
widgets and see if they need

00:34:50.186 --> 00:34:52.126 A:middle
to be updated without
having to pull

00:34:52.126 --> 00:34:53.565 A:middle
down the Notification Center.

00:34:55.166 --> 00:34:58.906 A:middle
Each Today Widget view
controller conforms

00:34:58.906 --> 00:35:00.466 A:middle
to NC widget providing.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:58.906 --> 00:35:00.466 A:middle
to NC widget providing.

00:35:01.246 --> 00:35:05.596 A:middle
And if the widget's view
controller implements the update

00:35:05.596 --> 00:35:08.956 A:middle
delegate method, it gets to
participate in this system,

00:35:09.086 --> 00:35:10.376 A:middle
and I will show you
how to do that now.

00:35:12.046 --> 00:35:13.846 A:middle
The first thing we are
going to do is we are going

00:35:13.846 --> 00:35:17.156 A:middle
to add widget perform update
with completion handler

00:35:17.536 --> 00:35:20.506 A:middle
to our Today Widget view
controller that conforms

00:35:20.716 --> 00:35:22.446 A:middle
to NC widget providing.

00:35:23.986 --> 00:35:26.726 A:middle
As a first step, we are
going to refresh the model,

00:35:27.216 --> 00:35:29.486 A:middle
and this is going to
do one thing for us,

00:35:29.486 --> 00:35:30.786 A:middle
one very important thing.

00:35:31.096 --> 00:35:34.276 A:middle
It's going to tell us whether
or not there is a change

00:35:34.276 --> 00:35:35.686 A:middle
in the model that is going

00:35:35.686 --> 00:35:39.526 A:middle
to materially affect the
widget's visual representation.

00:35:40.036 --> 00:35:43.936 A:middle
If it did, then we're going
to tell the view hierarchy

00:35:43.996 --> 00:35:45.196 A:middle
that it needs to redraw.

00:35:46.636 --> 00:35:49.166 A:middle
And finally, inside
of it, we are going

00:35:49.166 --> 00:35:52.046 A:middle
to take the completion
handler that was passed to us,

00:35:52.536 --> 00:35:54.956 A:middle
and if there was
a visual change,

00:35:55.036 --> 00:35:56.656 A:middle
we are going to pass new data.

00:35:57.476 --> 00:36:00.016 A:middle
If there was no material
change that was going


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:57.476 --> 00:36:00.016 A:middle
If there was no material
change that was going

00:36:00.016 --> 00:36:02.556 A:middle
to affect the visual
representation of our widget,

00:36:02.556 --> 00:36:04.276 A:middle
then we are going
to pass no data,

00:36:04.706 --> 00:36:07.156 A:middle
and this lets our
widget be a good citizen

00:36:07.366 --> 00:36:09.706 A:middle
in the Notification Center
because at this point,

00:36:09.706 --> 00:36:12.446 A:middle
we are hinting the operating
system that it doesn't need

00:36:12.446 --> 00:36:14.206 A:middle
to expend any resources

00:36:14.586 --> 00:36:17.346 A:middle
to update the visual
representation

00:36:17.736 --> 00:36:18.866 A:middle
of our Today Widget.

00:36:20.376 --> 00:36:23.056 A:middle
Since we've done this, our
widget has been updated,

00:36:23.396 --> 00:36:31.166 A:middle
and you'll notice that the
stock price is correct.

00:36:31.306 --> 00:36:32.986 A:middle
Next, networking.

00:36:34.186 --> 00:36:36.886 A:middle
Extensions are ephemeral
objects,

00:36:37.026 --> 00:36:38.456 A:middle
really ephemeral processes.

00:36:38.546 --> 00:36:39.696 A:middle
They come and they go.

00:36:39.746 --> 00:36:42.006 A:middle
Remember, I was talking
about the user swiping down

00:36:42.006 --> 00:36:43.206 A:middle
and then quickly swiping up.

00:36:43.846 --> 00:36:46.196 A:middle
And this can play havoc with
things that take a while

00:36:46.196 --> 00:36:48.456 A:middle
to work, like networking
sessions.

00:36:48.986 --> 00:36:53.206 A:middle
And widgets are expected to
call out to cloud services

00:36:53.206 --> 00:36:56.306 A:middle
and other things on the network
in order to process data.

00:36:57.046 --> 00:36:58.246 A:middle
So how do we deal with this?

00:36:59.416 --> 00:37:01.476 A:middle
Well, I'd recommend
that you take a look


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:59.416 --> 00:37:01.476 A:middle
Well, I'd recommend
that you take a look

00:37:01.476 --> 00:37:04.636 A:middle
at using NSURLSession
background sessions.

00:37:05.026 --> 00:37:05.776 A:middle
And what are these?

00:37:06.776 --> 00:37:10.226 A:middle
These are tasks, networking
tasks, that are performed

00:37:10.226 --> 00:37:12.486 A:middle
on your behalf by the system.

00:37:14.496 --> 00:37:18.366 A:middle
The updates and events are
delivered to your extension

00:37:18.416 --> 00:37:20.096 A:middle
for as long as it stays active.

00:37:20.776 --> 00:37:23.616 A:middle
But if your extension
gets suspended or killed

00:37:23.616 --> 00:37:25.236 A:middle
or for some reason
hangs up the phone

00:37:25.236 --> 00:37:27.786 A:middle
with this critical system --
or with this system component,

00:37:28.766 --> 00:37:33.526 A:middle
then the containing
application takes over error

00:37:33.526 --> 00:37:35.556 A:middle
and event handling
on its behalf.

00:37:35.556 --> 00:37:37.706 A:middle
And I will show you
how to set that up.

00:37:39.086 --> 00:37:41.616 A:middle
Inside of your extension
you are going to want

00:37:41.616 --> 00:37:46.706 A:middle
to first create an NSURLSession
configuration background session

00:37:46.706 --> 00:37:48.836 A:middle
configuration with
identifier object.

00:37:49.576 --> 00:37:50.746 A:middle
Or sorry, use the method.

00:37:51.546 --> 00:37:55.376 A:middle
And, again, following in the
pattern, you are going to want

00:37:55.376 --> 00:37:58.426 A:middle
to create an identifier
that's going to be used

00:37:58.756 --> 00:38:01.056 A:middle
by the extension and
the containing app


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:58.756 --> 00:38:01.056 A:middle
by the extension and
the containing app

00:38:01.056 --> 00:38:03.416 A:middle
which are participating in
this background session.

00:38:04.206 --> 00:38:07.646 A:middle
In our case, we are using
com.example.my downloadsession.

00:38:08.496 --> 00:38:10.146 A:middle
The next thing you
are going to want

00:38:10.146 --> 00:38:13.526 A:middle
to do is set the shared
container identifier

00:38:14.026 --> 00:38:15.956 A:middle
on the session configuration.

00:38:16.476 --> 00:38:18.196 A:middle
Otherwise, you are
going to have a lot

00:38:18.196 --> 00:38:21.166 A:middle
of fun debugging while all our
sessions come back as invalid

00:38:21.166 --> 00:38:22.356 A:middle
as soon as you start a task.

00:38:22.866 --> 00:38:23.686 A:middle
At least I know I did.

00:38:23.686 --> 00:38:29.836 A:middle
Next, you are going to want
to create an NSURLSession,

00:38:30.506 --> 00:38:32.426 A:middle
passing this session
configuration

00:38:32.836 --> 00:38:33.896 A:middle
to the initializer.

00:38:34.186 --> 00:38:36.326 A:middle
Now, you will notice that we
are using the delegate form

00:38:36.326 --> 00:38:39.546 A:middle
with the initializer because
the completion handler form

00:38:39.546 --> 00:38:42.686 A:middle
of the initializer
is not valid for use

00:38:42.686 --> 00:38:44.386 A:middle
with background URL sessions.

00:38:45.576 --> 00:38:48.146 A:middle
Next, for the sake of
the example, we are going

00:38:48.146 --> 00:38:50.706 A:middle
to download the apple.com
website.

00:38:52.116 --> 00:38:55.506 A:middle
We are going to create
the task and resume it.

00:38:56.096 --> 00:38:59.166 A:middle
And now our extension has
successfully created an

00:38:59.326 --> 00:39:03.186 A:middle
NSURLSession in the background
and handed it off to the system,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:59.326 --> 00:39:03.186 A:middle
NSURLSession in the background
and handed it off to the system,

00:39:03.486 --> 00:39:08.096 A:middle
and the system will begin to
deliver events to the extension.

00:39:08.096 --> 00:39:11.296 A:middle
Next, inside of our
containing app, as I was talking

00:39:11.296 --> 00:39:15.556 A:middle
about before, we need to prepare
it for any eventualities,

00:39:15.766 --> 00:39:19.156 A:middle
for cases where the extension
was suspended or killed

00:39:19.156 --> 00:39:22.586 A:middle
or otherwise dismissed and can
no longer handle the events

00:39:22.886 --> 00:39:25.406 A:middle
coming from the system
networking component.

00:39:25.886 --> 00:39:29.236 A:middle
We do this by adding
application, handle events

00:39:29.386 --> 00:39:33.286 A:middle
for background URL session to
our UI application delegate.

00:39:34.446 --> 00:39:35.806 A:middle
The first step we want to take

00:39:35.906 --> 00:39:38.736 A:middle
and the step I am taking here
again, for the sake of example,

00:39:39.086 --> 00:39:41.826 A:middle
is to make sure the
identifier is the identifier

00:39:41.826 --> 00:39:42.806 A:middle
that we expected.

00:39:43.156 --> 00:39:46.656 A:middle
The system is going to pass
in the identifier associated

00:39:46.866 --> 00:39:51.056 A:middle
with the NSURLSession for the
events that you are being asked

00:39:51.196 --> 00:39:53.256 A:middle
to handle in the
application delegate.

00:39:54.706 --> 00:39:57.906 A:middle
Again, just like in the
extension, we are going to set

00:39:57.906 --> 00:40:00.916 A:middle
up an NSURLSession
configuration item


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:57.906 --> 00:40:00.916 A:middle
up an NSURLSession
configuration item

00:40:01.176 --> 00:40:03.466 A:middle
by calling the background
session configuration

00:40:03.466 --> 00:40:05.626 A:middle
with identifier factory method.

00:40:07.156 --> 00:40:10.006 A:middle
And we need to set up the shared
container identifier again.

00:40:11.576 --> 00:40:14.206 A:middle
And then we need to
call NSURLSession,

00:40:14.466 --> 00:40:17.066 A:middle
passing this shared
configuration, and again,

00:40:17.146 --> 00:40:19.606 A:middle
using the delegate
variant of the initializer.

00:40:20.146 --> 00:40:23.756 A:middle
And then last but not least --
and this is very important --

00:40:23.756 --> 00:40:25.256 A:middle
you'll miss it if
you don't look --

00:40:25.966 --> 00:40:28.816 A:middle
is we are going to store
this completion handler back.

00:40:28.956 --> 00:40:31.526 A:middle
We are going to save it
back in our properties

00:40:31.756 --> 00:40:33.246 A:middle
for when we're completed,

00:40:33.246 --> 00:40:37.516 A:middle
when we are done handling
events for this URL session.

00:40:37.856 --> 00:40:39.056 A:middle
And you might ask,
how do you know

00:40:39.056 --> 00:40:40.416 A:middle
when you are done
handling events?

00:40:40.456 --> 00:40:41.456 A:middle
Well, I will show you.

00:40:42.536 --> 00:40:47.206 A:middle
In our NSURLSession delegate,
we need to add this method.

00:40:47.566 --> 00:40:50.616 A:middle
URL session did finish events
for background URL session.

00:40:50.736 --> 00:40:53.036 A:middle
It will be called when
your containing app,

00:40:53.036 --> 00:40:54.766 A:middle
or in this case the delegate

00:40:55.636 --> 00:40:59.436 A:middle
that your containing app
dutifully appointed to take care

00:40:59.436 --> 00:41:04.016 A:middle
of these events, is done
processing all the URL session


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:59.436 --> 00:41:04.016 A:middle
of these events, is done
processing all the URL session

00:41:04.166 --> 00:41:06.296 A:middle
events from the background
URL session.

00:41:06.946 --> 00:41:07.996 A:middle
And the first thing we are going

00:41:08.076 --> 00:41:10.486 A:middle
to do is get the session
configuration object,

00:41:11.316 --> 00:41:12.786 A:middle
and then we are going
to look to make sure

00:41:12.786 --> 00:41:15.796 A:middle
that the session configuration's
identifier matches the

00:41:15.796 --> 00:41:17.256 A:middle
identifier that we expect.

00:41:18.936 --> 00:41:21.116 A:middle
Then we are going to call
this completion handler

00:41:21.116 --> 00:41:22.426 A:middle
that we saved earlier

00:41:23.866 --> 00:41:25.566 A:middle
and release our reference
to the session.

00:41:25.726 --> 00:41:27.166 A:middle
And at this point, we are done.

00:41:27.616 --> 00:41:32.026 A:middle
We have successfully handled
any of the events that have come

00:41:32.156 --> 00:41:35.326 A:middle
to our containing app
from the system component

00:41:35.566 --> 00:41:38.886 A:middle
which was previously
started by the extension.

00:41:40.286 --> 00:41:42.716 A:middle
Now, you can use this
technique for any

00:41:42.716 --> 00:41:45.506 A:middle
of your other extension
types, not just Today Widgets.

00:41:45.506 --> 00:41:47.056 A:middle
It's a really great technique.

00:41:47.496 --> 00:41:50.036 A:middle
But one place where
you can't use it is

00:41:50.036 --> 00:41:52.086 A:middle
for your Watch OS 1 extensions.

00:41:52.946 --> 00:41:55.076 A:middle
Instead, we would prefer

00:41:55.076 --> 00:41:57.426 A:middle
that you use background
task assertions

00:41:57.626 --> 00:42:01.276 A:middle
to protect these small tasks,
and you can find out more


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:57.626 --> 00:42:01.276 A:middle
to protect these small tasks,
and you can find out more

00:42:01.276 --> 00:42:04.816 A:middle
about it by going to
WatchKit Tips and Tricks

00:42:05.466 --> 00:42:09.236 A:middle
in the Presidio tomorrow
at 10 a.m., given to you

00:42:09.236 --> 00:42:14.806 A:middle
by Jake Behrens, also
known as the man in plaid.

00:42:15.006 --> 00:42:19.386 A:middle
Next, when you are doing network
transactions, it's inevitable

00:42:19.386 --> 00:42:21.946 A:middle
that you are going to be
challenged for credentials.

00:42:22.686 --> 00:42:27.376 A:middle
How do you safely and securely
protect your users' privacy

00:42:28.466 --> 00:42:31.216 A:middle
by sharing these secrets
between your containing app

00:42:31.766 --> 00:42:32.706 A:middle
and its extensions?

00:42:33.666 --> 00:42:36.836 A:middle
We recommend that you use
Keychain access groups

00:42:36.836 --> 00:42:38.436 A:middle
for this, as shown here.

00:42:39.346 --> 00:42:43.206 A:middle
You set this up inside of the
capabilities for your extension

00:42:43.586 --> 00:42:45.876 A:middle
and for your containing app.

00:42:45.876 --> 00:42:48.616 A:middle
And then, using the
identifier that you set

00:42:48.616 --> 00:42:51.256 A:middle
up in your containing
app and its extensions,

00:42:52.586 --> 00:42:56.556 A:middle
you simply pass this identifier
as the value for the k --

00:42:56.626 --> 00:43:01.256 A:middle
access group key whenever you
add items to the Keychain.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:56.626 --> 00:43:01.256 A:middle
access group key whenever you
add items to the Keychain.

00:43:01.816 --> 00:43:04.876 A:middle
As shown here.

00:43:06.686 --> 00:43:09.066 A:middle
The next thing to
tell you about this is

00:43:09.066 --> 00:43:11.096 A:middle
that there's automatic
search behavior

00:43:11.276 --> 00:43:14.096 A:middle
for query API using
the Keychain API.

00:43:14.636 --> 00:43:16.406 A:middle
So sec item update.

00:43:17.116 --> 00:43:18.366 A:middle
Sec item delete.

00:43:19.036 --> 00:43:23.206 A:middle
And sec item copy matching all
automatically do the right thing

00:43:23.326 --> 00:43:26.436 A:middle
by searching every
accessible Keychain for you

00:43:26.436 --> 00:43:29.686 A:middle
so you don't have to pass the
Keychain access group identifier

00:43:30.016 --> 00:43:30.626 A:middle
to these APIs.

00:43:30.626 --> 00:43:32.396 A:middle
It's just a tip to remember.

00:43:33.396 --> 00:43:35.626 A:middle
And you can find out
more about these APIs

00:43:35.826 --> 00:43:43.416 A:middle
by watching the Security
and Your Apps video.

00:43:43.846 --> 00:43:47.746 A:middle
In summary, today Sophia
told you all about Action

00:43:47.746 --> 00:43:51.426 A:middle
and Share extensions, about
what they were meant to do

00:43:51.576 --> 00:43:54.786 A:middle
and how best to use
them to share data

00:43:54.976 --> 00:43:57.096 A:middle
with your app and the web.

00:43:58.806 --> 00:44:02.156 A:middle
She also showed you how
to use NS item provider


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:58.806 --> 00:44:02.156 A:middle
She also showed you how
to use NS item provider

00:44:02.506 --> 00:44:04.896 A:middle
to its fullest possible
extent and how

00:44:04.896 --> 00:44:08.836 A:middle
to make it do the hard work
of sharing data types for you.

00:44:10.626 --> 00:44:14.546 A:middle
She also showed you how to make
your host application a great

00:44:14.546 --> 00:44:18.266 A:middle
environment for Action and Share
extensions, and you know what?

00:44:18.686 --> 00:44:22.146 A:middle
This increases the
value of your host app.

00:44:23.156 --> 00:44:27.416 A:middle
Then I showed you how to enhance
your Today Widget by making sure

00:44:27.666 --> 00:44:31.806 A:middle
that your model objects and its
visual representation always

00:44:31.806 --> 00:44:33.566 A:middle
stayed fresh and up-to-date.

00:44:35.446 --> 00:44:37.566 A:middle
And then we showed
you a collection

00:44:37.566 --> 00:44:41.566 A:middle
of general best practices, like
how to securely share secrets

00:44:41.566 --> 00:44:43.166 A:middle
and guard your customers'
privacy.

00:44:43.306 --> 00:44:48.456 A:middle
There are the related
sessions I referenced earlier,

00:44:48.636 --> 00:44:51.966 A:middle
the WatchKit Tips and Tricks
one tomorrow, and Security

00:44:51.966 --> 00:44:53.806 A:middle
and Your Apps that you can view.

00:44:54.266 --> 00:44:59.016 A:middle
And for more information,
we'd recommend that you go

00:44:59.016 --> 00:45:01.906 A:middle
to the App Extension
Programming Guide or talk


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:59.016 --> 00:45:01.906 A:middle
to the App Extension
Programming Guide or talk

00:45:02.016 --> 00:45:04.656 A:middle
to our Evangelist, Curt Rothert.

00:45:06.916 --> 00:45:07.916 A:middle
Thanks.

00:45:09.516 --> 00:45:12.500 A:middle
[ Applause ]

