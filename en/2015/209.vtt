WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:24.516 --> 00:00:31.546 A:middle
[ Applause ]

00:00:32.046 --> 00:00:33.406 A:middle
&gt;&gt; ELIZA BLOCK: Hi,
everybody, I'm Eliza

00:00:33.406 --> 00:00:36.456 A:middle
and with me is Paul Salzman.

00:00:36.756 --> 00:00:39.746 A:middle
We will be telling you about
complications, what they are

00:00:39.746 --> 00:00:44.856 A:middle
and how you can make them.

00:00:45.046 --> 00:00:49.726 A:middle
So, complications are
small pieces of information

00:00:49.726 --> 00:00:53.086 A:middle
that appear right on your
clock face alongside the time.

00:00:54.226 --> 00:00:58.406 A:middle
On these clock faces you see
here, if we remove the time

00:00:58.406 --> 00:01:03.266 A:middle
from the equation, everything
left is a complication.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.406 --> 00:01:03.266 A:middle
from the equation, everything
left is a complication.

00:01:04.186 --> 00:01:09.136 A:middle
So the ones you see here are all
built into the OS, but starting

00:01:09.136 --> 00:01:11.996 A:middle
in watchOS 2 you can create
your own complications

00:01:11.996 --> 00:01:15.646 A:middle
for the clock face and we
will tell you how to do that,

00:01:15.646 --> 00:01:21.136 A:middle
and I'm going to use the example
of building a complication

00:01:21.136 --> 00:01:26.806 A:middle
to display the upcoming
matches in a soccer tournament.

00:01:27.396 --> 00:01:31.766 A:middle
So let's take a look
imagining you already built

00:01:31.766 --> 00:01:35.826 A:middle
such a complication at what it
would look like to go select it.

00:01:36.446 --> 00:01:39.046 A:middle
So focusing in on the
middle clock face here,

00:01:39.386 --> 00:01:41.586 A:middle
if you were to Force
Touch the screen,

00:01:41.586 --> 00:01:48.856 A:middle
you can customize the face,
swiping to the right allows you

00:01:49.346 --> 00:01:52.346 A:middle
to start tapping on your
different complications,

00:01:52.756 --> 00:01:58.526 A:middle
and turning the Digital
Crown allows you to pick one.

00:01:58.816 --> 00:02:00.806 A:middle
So if we scroll all the
way to the end of the list,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.816 --> 00:02:00.806 A:middle
So if we scroll all the
way to the end of the list,

00:02:01.266 --> 00:02:06.106 A:middle
we will see our not-yet-built
soccer tournament complication

00:02:06.106 --> 00:02:07.516 A:middle
and we could select it

00:02:07.516 --> 00:02:10.506 A:middle
and we start seeing
the live data displayed

00:02:10.506 --> 00:02:13.946 A:middle
on the clock face.

00:02:14.206 --> 00:02:16.206 A:middle
How are you going
to provide the data

00:02:16.456 --> 00:02:17.796 A:middle
to populate this complication?

00:02:18.456 --> 00:02:21.776 A:middle
As you can see from looking

00:02:21.776 --> 00:02:25.426 A:middle
at the face there is a
consistent look and feel to all

00:02:25.426 --> 00:02:26.786 A:middle
of our clock faces
and that's what part

00:02:26.786 --> 00:02:30.266 A:middle
of what makes them pleasant
to interact with so we wanted

00:02:30.266 --> 00:02:33.196 A:middle
to do this while
preserving that consistency.

00:02:34.316 --> 00:02:38.336 A:middle
So your extension
which is running

00:02:38.336 --> 00:02:41.696 A:middle
on the watch will provide the
data for these complications

00:02:42.136 --> 00:02:43.636 A:middle
in the form of text and images.

00:02:47.616 --> 00:02:51.426 A:middle
And then the clock face will
actually draw it in a way

00:02:51.426 --> 00:02:56.426 A:middle
that fits with the
rest of the face.

00:02:56.426 --> 00:03:01.806 A:middle
So if I were to install this
complication on my watch,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:56.426 --> 00:03:01.806 A:middle
So if I were to install this
complication on my watch,

00:03:03.026 --> 00:03:08.436 A:middle
I will see it right away every
time that I raise my wrist.

00:03:08.436 --> 00:03:12.166 A:middle
And that's a great thing, and
it's one of the great things

00:03:12.166 --> 00:03:14.976 A:middle
about building a complication,
but it also presents a kind

00:03:14.976 --> 00:03:17.856 A:middle
of a challenge because
as time passes

00:03:17.856 --> 00:03:19.606 A:middle
and the information
that's displayed

00:03:19.606 --> 00:03:24.156 A:middle
in this complication needs
to update, since it's visible

00:03:24.156 --> 00:03:26.746 A:middle
as soon as you raise your
wrist, that update needs

00:03:26.746 --> 00:03:29.726 A:middle
to already have happened by
the time the screen turns on.

00:03:29.726 --> 00:03:32.266 A:middle
And if you think about it,

00:03:32.266 --> 00:03:35.076 A:middle
there could be five different
complications showing

00:03:35.076 --> 00:03:36.136 A:middle
on this single watch face.

00:03:36.136 --> 00:03:38.926 A:middle
There is no way we would have
time to launch all of them,

00:03:39.626 --> 00:03:44.426 A:middle
pull for new data, potentially
involving a network request

00:03:44.816 --> 00:03:48.556 A:middle
and have all of them come back
with data in time for the screen

00:03:48.556 --> 00:03:51.126 A:middle
to come on so to
solve this problem,

00:03:51.126 --> 00:03:54.316 A:middle
what we're going do is collect
the data for your complications

00:03:54.636 --> 00:03:57.036 A:middle
in the form of a
timeline in advance.

00:03:57.726 --> 00:04:00.966 A:middle
So you will give us
a timeline of data,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:57.726 --> 00:04:00.966 A:middle
So you will give us
a timeline of data,

00:04:02.326 --> 00:04:04.956 A:middle
how much of the timeline
depends on the density

00:04:04.956 --> 00:04:06.276 A:middle
of the data for your
application.

00:04:06.806 --> 00:04:11.546 A:middle
And that way as I glance at
my wrist throughout the day,

00:04:12.236 --> 00:04:15.556 A:middle
every time I look at it, the
complication has already updated

00:04:15.556 --> 00:04:23.676 A:middle
to display the information that
makes sense at that moment.

00:04:23.676 --> 00:04:26.156 A:middle
Now, timelines are a
really powerful concept

00:04:26.156 --> 00:04:29.046 A:middle
and Paul will talk about
them later in the session,

00:04:29.296 --> 00:04:31.556 A:middle
but I wanted to mention one
other thing that this buys us,

00:04:31.896 --> 00:04:34.356 A:middle
which is the Time
Travel feature.

00:04:34.746 --> 00:04:38.676 A:middle
So Time Travel is a new feature
we introduced in watchOS 2

00:04:39.556 --> 00:04:42.586 A:middle
which allows you to turn
the Digital Crown and right

00:04:42.586 --> 00:04:45.036 A:middle
on the clock face you can see
what your complications will be

00:04:45.036 --> 00:04:46.676 A:middle
showing at different
times of the day.

00:04:46.676 --> 00:04:49.666 A:middle
So you could peek forward to see
when does the next match start

00:04:49.856 --> 00:04:54.136 A:middle
or what meeting should I have
been at an hour ago and so on.

00:04:54.676 --> 00:04:59.016 A:middle
So to see how that works
with this complication,

00:04:59.336 --> 00:05:01.686 A:middle
there is no extra work
that you had to do


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.336 --> 00:05:01.686 A:middle
there is no extra work
that you had to do

00:05:01.686 --> 00:05:03.056 A:middle
in order to make this happen.

00:05:03.056 --> 00:05:05.186 A:middle
By providing your data in
the form of a timeline,

00:05:05.826 --> 00:05:09.526 A:middle
we can just make Time
Travel happen for free.

00:05:10.736 --> 00:05:14.936 A:middle
Getting started, so when
you make a new Xcode project

00:05:15.016 --> 00:05:20.176 A:middle
or convert an old project over
for watchOS 2, you can choose

00:05:20.176 --> 00:05:23.396 A:middle
to add a complication.

00:05:23.946 --> 00:05:27.486 A:middle
You can check that box,
and that will cause Xcode

00:05:27.486 --> 00:05:30.216 A:middle
to automatically generate
the files that you need

00:05:30.216 --> 00:05:32.566 A:middle
and set things up
so it's super easy.

00:05:33.436 --> 00:05:35.296 A:middle
There is one other
thing you need to do.

00:05:36.076 --> 00:05:40.666 A:middle
If you navigate to your WatchKit
app extension's general info

00:05:40.666 --> 00:05:47.796 A:middle
pane, you provide the dataSource
class which we will talk

00:05:47.796 --> 00:05:51.416 A:middle
about later, and you
also provide checkboxes

00:05:51.546 --> 00:05:54.316 A:middle
for the families of complication
that you want to support.

00:05:54.316 --> 00:05:57.436 A:middle
So now what are these
families of complication?

00:05:59.356 --> 00:06:03.826 A:middle
Complications on watchOS
look different ways


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.356 --> 00:06:03.826 A:middle
Complications on watchOS
look different ways

00:06:03.826 --> 00:06:06.506 A:middle
on different clock faces
and we have divided this

00:06:06.506 --> 00:06:07.986 A:middle
up into five different families

00:06:07.986 --> 00:06:10.396 A:middle
and you can choose individually
whether to support each one

00:06:10.396 --> 00:06:11.656 A:middle
of these families so I want

00:06:11.656 --> 00:06:14.226 A:middle
to show you what these
families look like.

00:06:15.336 --> 00:06:16.956 A:middle
This is the Modular face,

00:06:17.816 --> 00:06:21.426 A:middle
and it has two complication
families on it.

00:06:24.276 --> 00:06:29.456 A:middle
The ModularSmall family gives
you these square-shaped small

00:06:29.456 --> 00:06:34.046 A:middle
complications, and the
ModularLarge family is the one,

00:06:34.276 --> 00:06:36.166 A:middle
one complication in
the middle of the face

00:06:36.166 --> 00:06:37.726 A:middle
that can show a fair
amount more data

00:06:37.726 --> 00:06:40.246 A:middle
so that's the one we have been
focusing on with this example.

00:06:40.856 --> 00:06:45.976 A:middle
A number of analog faces
also support complications.

00:06:46.356 --> 00:06:49.246 A:middle
And these complications are
in the Utilitarian families.

00:06:49.666 --> 00:06:54.546 A:middle
There is a UtilitarianSmall
which kind of fit in the corners

00:06:54.916 --> 00:06:58.266 A:middle
of various analog faces and
then there is UtilitarianLarge

00:06:58.536 --> 00:07:02.566 A:middle
which gets the entire
region along the bottom.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:58.536 --> 00:07:02.566 A:middle
which gets the entire
region along the bottom.

00:07:02.596 --> 00:07:07.636 A:middle
And finally, on the Color
face, there is a single family

00:07:07.636 --> 00:07:08.956 A:middle
which we have called
Circular Small.

00:07:09.186 --> 00:07:14.176 A:middle
Here is what this
looks like in code.

00:07:14.176 --> 00:07:18.966 A:middle
It's an enumeration named
as you would expect.

00:07:21.726 --> 00:07:22.276 A:middle
All right.

00:07:22.766 --> 00:07:27.126 A:middle
So when the user activates
your complication on a face,

00:07:27.426 --> 00:07:29.746 A:middle
they are going to choose it
for a particular position

00:07:29.746 --> 00:07:31.036 A:middle
that the complication can appear

00:07:31.036 --> 00:07:33.086 A:middle
and that position
will be associated

00:07:33.086 --> 00:07:34.576 A:middle
with a particular family.

00:07:35.006 --> 00:07:38.736 A:middle
So you will be told that you are
providing data for this family,

00:07:39.086 --> 00:07:40.396 A:middle
and at that point, you need

00:07:40.396 --> 00:07:42.836 A:middle
to decide how you want
to lay that data out.

00:07:43.126 --> 00:07:46.416 A:middle
And there is a number of ways
that you can lay out your data

00:07:46.496 --> 00:07:48.036 A:middle
for each one of these
families and I want

00:07:48.036 --> 00:07:49.836 A:middle
to show you the collection
of templates

00:07:49.876 --> 00:07:51.726 A:middle
that our designers have created.

00:07:52.286 --> 00:07:55.636 A:middle
So for the ModularSmall
complication family,

00:07:55.966 --> 00:07:57.416 A:middle
we have these templates.

00:07:58.336 --> 00:08:02.186 A:middle
There is a whole bunch
of different ones.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.336 --> 00:08:02.186 A:middle
There is a whole bunch
of different ones.

00:08:02.186 --> 00:08:06.416 A:middle
You can have small text, two
different rows of text, an image

00:08:06.416 --> 00:08:09.796 A:middle
and text, you can do a big
piece of text, a big image.

00:08:10.006 --> 00:08:13.476 A:middle
These ones along near the
bottom here with a ring filling

00:08:13.476 --> 00:08:16.606 A:middle
up can show you your progress
towards something in the form

00:08:16.606 --> 00:08:20.726 A:middle
of a floating point number
that can change between 0 and 1

00:08:20.726 --> 00:08:23.566 A:middle
and you can put text or
an image inside of that

00:08:23.566 --> 00:08:25.776 A:middle
and finally there is a column
template which allows you

00:08:25.776 --> 00:08:30.366 A:middle
to do something like
show a sports score.

00:08:30.486 --> 00:08:32.986 A:middle
ModularLarge also has a number

00:08:32.986 --> 00:08:35.395 A:middle
of different ways you
can layout your data.

00:08:35.395 --> 00:08:39.096 A:middle
There is a simple standard
three-line template

00:08:39.546 --> 00:08:40.785 A:middle
with an optional image.

00:08:41.836 --> 00:08:43.706 A:middle
You can do a column-style
template,

00:08:44.126 --> 00:08:47.006 A:middle
two different column-style
templates, actually.

00:08:47.536 --> 00:08:50.386 A:middle
And finally you could do a
template with a large piece

00:08:50.386 --> 00:08:52.616 A:middle
of text which is suitable for
something like a kitchen timer

00:08:52.616 --> 00:08:58.166 A:middle
or a date, many other possible
things you could do with that.

00:08:58.276 --> 00:09:01.976 A:middle
UtilitarianSmall, most
of these guys are flat


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.276 --> 00:09:01.976 A:middle
UtilitarianSmall, most
of these guys are flat

00:09:02.186 --> 00:09:03.796 A:middle
and they have an optional
image in the corner,

00:09:03.966 --> 00:09:05.556 A:middle
but you can also
have a larger image

00:09:05.556 --> 00:09:09.336 A:middle
and you can also do this ring
style with UtilitarianSmall.

00:09:10.786 --> 00:09:13.646 A:middle
UtilitarianLarge, there is
just one template for this.

00:09:13.646 --> 00:09:14.796 A:middle
There is an image
that's optional

00:09:14.796 --> 00:09:18.456 A:middle
and some text next to it.

00:09:18.456 --> 00:09:21.846 A:middle
And finally, CircularSmall
has templates that are similar

00:09:21.846 --> 00:09:23.376 A:middle
to the ModularSmall
ones although

00:09:23.376 --> 00:09:24.626 A:middle
with slightly different sizes.

00:09:24.906 --> 00:09:28.756 A:middle
So that's the templates that
you have access to in watchOS 2.

00:09:29.256 --> 00:09:34.376 A:middle
I'm going to take a look
at what that means in code.

00:09:34.616 --> 00:09:40.516 A:middle
So let's zoom in on
our soccer club digital

00:09:40.516 --> 00:09:41.716 A:middle
ModularLarge template.

00:09:42.126 --> 00:09:43.726 A:middle
This has four pieces.

00:09:45.126 --> 00:09:47.636 A:middle
There is a header image
that you can provide.

00:09:48.276 --> 00:09:50.186 A:middle
Header text.

00:09:51.136 --> 00:09:58.716 A:middle
And then there is two
lines of body text.

00:09:58.776 --> 00:10:00.966 A:middle
So you may have noticed
that there is a lot


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.776 --> 00:10:00.966 A:middle
So you may have noticed
that there is a lot

00:10:00.966 --> 00:10:01.976 A:middle
of these complication templates.

00:10:02.206 --> 00:10:05.406 A:middle
All of these correspond
to a subclass

00:10:05.406 --> 00:10:08.806 A:middle
of CLKComplicationTemplate
which is the superclass of all

00:10:08.806 --> 00:10:12.236 A:middle
of them, and you can choose
which one you want to use

00:10:12.326 --> 00:10:14.386 A:middle
and fill out its
various properties

00:10:14.386 --> 00:10:15.206 A:middle
so it's pretty simple.

00:10:15.766 --> 00:10:19.006 A:middle
So this one is the
CLKComplicationTemplate

00:10:19.006 --> 00:10:22.376 A:middle
ModularLargeStandardBody
which is a bit of a mouthful,

00:10:22.886 --> 00:10:25.556 A:middle
but it conveys one
really important piece

00:10:25.556 --> 00:10:27.346 A:middle
of information right
in the name,

00:10:27.526 --> 00:10:29.236 A:middle
which is that this template is

00:10:29.236 --> 00:10:32.676 A:middle
for the ModularLarge
complication family.

00:10:32.886 --> 00:10:35.026 A:middle
And it's really crucial
when you are asked

00:10:35.026 --> 00:10:38.016 A:middle
to provide complication
data for a particular family

00:10:38.306 --> 00:10:40.766 A:middle
that you provide a template
that matches that family,

00:10:40.766 --> 00:10:43.176 A:middle
and that's why we have built
the name of the family right

00:10:43.176 --> 00:10:44.066 A:middle
into the name of the class,

00:10:44.116 --> 00:10:45.866 A:middle
so there can be no
confusion about it.

00:10:46.506 --> 00:10:49.176 A:middle
It obviously wouldn't work to
produce a template that looks

00:10:49.176 --> 00:10:52.086 A:middle
like this to appear
on the circular face.

00:10:52.616 --> 00:10:56.046 A:middle
Now, you may have noticed
something else that's a little

00:10:56.046 --> 00:10:56.676 A:middle
strange here.

00:10:58.096 --> 00:11:01.616 A:middle
We have an image and three
text properties but instead


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.096 --> 00:11:01.616 A:middle
We have an image and three
text properties but instead

00:11:01.616 --> 00:11:05.056 A:middle
of UI images and
NSStrings in the code,

00:11:06.296 --> 00:11:10.586 A:middle
we have this imageProvider
and textProvider business.

00:11:10.706 --> 00:11:12.076 A:middle
So what's going on here?

00:11:12.136 --> 00:11:16.526 A:middle
That brings us to
our next section,

00:11:16.526 --> 00:11:18.826 A:middle
how do you provide
images and text,

00:11:18.826 --> 00:11:20.786 A:middle
and I want to explain
what these classes are for

00:11:20.786 --> 00:11:21.826 A:middle
and what they can do for you.

00:11:22.326 --> 00:11:24.936 A:middle
Let's start with images.

00:11:27.166 --> 00:11:32.616 A:middle
Here is our complication in
the color editing screen.

00:11:32.686 --> 00:11:36.606 A:middle
So the user can customize
what complications they see

00:11:36.606 --> 00:11:37.916 A:middle
and they can pick
your complication

00:11:37.916 --> 00:11:38.676 A:middle
in the course of that.

00:11:39.026 --> 00:11:41.566 A:middle
They can also customize the
look and feel of the face.

00:11:41.566 --> 00:11:43.716 A:middle
And that includes
changing the color.

00:11:44.556 --> 00:11:49.306 A:middle
So when you provide images
for your complications,

00:11:49.536 --> 00:11:52.316 A:middle
these images need to take
part in that same color scheme

00:11:52.316 --> 00:11:54.156 A:middle
that the user has
selected for their face.

00:11:54.196 --> 00:11:58.216 A:middle
So they need to be able to
change color as you see.

00:11:58.826 --> 00:12:02.986 A:middle
So there is our soccer ball
obediently turning whatever


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.826 --> 00:12:02.986 A:middle
So there is our soccer ball
obediently turning whatever

00:12:02.986 --> 00:12:04.466 A:middle
color the user is choosing.

00:12:07.216 --> 00:12:12.596 A:middle
So an image provider is a
sort of a bundle of properties

00:12:12.596 --> 00:12:14.666 A:middle
that manages to achieve
this effect.

00:12:14.926 --> 00:12:17.586 A:middle
So you can provide a background
image and you provide it

00:12:17.586 --> 00:12:19.296 A:middle
as a template image, an image

00:12:19.296 --> 00:12:22.126 A:middle
that only contains
alpha information

00:12:22.246 --> 00:12:23.556 A:middle
and no color of its own.

00:12:23.556 --> 00:12:25.976 A:middle
It can be -- the pixels can
be whatever color you want,

00:12:25.976 --> 00:12:28.056 A:middle
but we are only going to pay
attention to the alpha channel.

00:12:28.776 --> 00:12:31.986 A:middle
It will be colored depending
on the user's selected color,

00:12:32.636 --> 00:12:34.636 A:middle
but you can do a little
bit more with this.

00:12:34.906 --> 00:12:37.506 A:middle
You can also provide
a background image

00:12:38.006 --> 00:12:39.916 A:middle
and a foreground image
and these will be laid

00:12:39.916 --> 00:12:40.636 A:middle
on top of each other.

00:12:40.636 --> 00:12:42.766 A:middle
The background image will be
colored according to the color

00:12:42.766 --> 00:12:47.446 A:middle
of the face and the foreground
image will be superimposed on it

00:12:48.056 --> 00:12:50.856 A:middle
so you can get a little bit
more detail in your images.

00:12:51.096 --> 00:12:53.246 A:middle
You can also choose to make
the foreground image black.

00:12:54.326 --> 00:12:56.026 A:middle
So let's take a look
at the code for this.

00:12:56.626 --> 00:12:58.016 A:middle
You give us a background image.

00:12:58.476 --> 00:13:00.436 A:middle
You give us an optional
foreground image.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.476 --> 00:13:00.436 A:middle
You give us an optional
foreground image.

00:13:00.956 --> 00:13:06.966 A:middle
You can choose a background
color for your background image.

00:13:06.966 --> 00:13:09.526 A:middle
For the most part the color
is going to be determined

00:13:09.766 --> 00:13:11.486 A:middle
by what the user has picked

00:13:11.876 --> 00:13:14.586 A:middle
so this background color
represents what the color you

00:13:14.586 --> 00:13:17.246 A:middle
would like your background
image to be if you can choose

00:13:17.636 --> 00:13:19.946 A:middle
and there are some contexts in
which that would be honored,

00:13:20.276 --> 00:13:22.026 A:middle
but as long as this
is appearing on a face

00:13:22.026 --> 00:13:25.046 A:middle
where the user chooses the color
is will override the color you

00:13:25.046 --> 00:13:27.416 A:middle
supply here so this is
an optional property.

00:13:28.016 --> 00:13:32.776 A:middle
Okay. That's image providers.

00:13:32.836 --> 00:13:34.386 A:middle
So now what about
text providers?

00:13:35.006 --> 00:13:38.106 A:middle
These are really cool!

00:13:38.106 --> 00:13:39.936 A:middle
So I'm really excited to
get to tell you about them!

00:13:40.416 --> 00:13:44.166 A:middle
When we started out
building complications

00:13:44.166 --> 00:13:50.426 A:middle
in watchOS 1 we had
challenges which were mostly due

00:13:50.426 --> 00:13:55.046 A:middle
to the fact that complications
were tiny compared to all

00:13:55.086 --> 00:13:57.656 A:middle
of the other UI you
are used to creating

00:13:57.656 --> 00:13:58.786 A:middle
for all of our platforms.

00:13:58.786 --> 00:14:04.156 A:middle
Some of them are as small as 44
pixels square, and we are trying


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.786 --> 00:14:04.156 A:middle
Some of them are as small as 44
pixels square, and we are trying

00:14:04.156 --> 00:14:07.406 A:middle
to fit information that's of
use in this very small space,

00:14:07.716 --> 00:14:10.316 A:middle
but it can be challenging to
do that without having all

00:14:10.316 --> 00:14:11.356 A:middle
of your text truncate.

00:14:11.566 --> 00:14:16.576 A:middle
So a good example, so the idea
here for text providers is

00:14:16.576 --> 00:14:18.796 A:middle
that because the space
is very constrained,

00:14:18.966 --> 00:14:24.666 A:middle
you want to leverage some of the
work that we have already done

00:14:24.666 --> 00:14:28.106 A:middle
to figure out how to format and
fit the text in the small space.

00:14:28.646 --> 00:14:31.816 A:middle
So we are introducing text
providers as a way for you

00:14:31.816 --> 00:14:34.286 A:middle
to declare your intentions
to us rather

00:14:34.286 --> 00:14:37.466 A:middle
than always passing us an
already formatted string

00:14:37.466 --> 00:14:40.876 A:middle
and then we will handle
the details of formatting

00:14:40.876 --> 00:14:42.636 A:middle
and fitting that string for you.

00:14:43.696 --> 00:14:47.406 A:middle
So an example is
formatting dates.

00:14:48.296 --> 00:14:51.706 A:middle
There is a CLKDate text
provider that does this for you

00:14:51.706 --> 00:14:53.266 A:middle
and I want to show you
what that's useful for.

00:14:53.956 --> 00:14:56.696 A:middle
Imagine you wanted to
display the date, Wednesday,

00:14:56.696 --> 00:14:59.286 A:middle
September 23rd in one
of your complications.

00:14:59.926 --> 00:15:03.936 A:middle
Now, space is really
constrained so pretty much


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.926 --> 00:15:03.936 A:middle
Now, space is really
constrained so pretty much

00:15:03.936 --> 00:15:07.326 A:middle
in most contexts you are
more likely to see something

00:15:07.516 --> 00:15:12.746 A:middle
that looks like this, which is
obviously not very informative.

00:15:12.846 --> 00:15:15.436 A:middle
We have lost kind of the
bulk of the information.

00:15:16.106 --> 00:15:18.736 A:middle
So instead of truncating,
it would be better

00:15:18.736 --> 00:15:22.986 A:middle
if we could fall back on
increasingly narrow renditions

00:15:22.986 --> 00:15:25.116 A:middle
of this string that
were still informative.

00:15:25.176 --> 00:15:27.936 A:middle
So, for example, we could
start abbreviating some

00:15:27.936 --> 00:15:28.636 A:middle
of the elements.

00:15:28.636 --> 00:15:31.456 A:middle
You could abbreviate
more of them,

00:15:31.456 --> 00:15:35.216 A:middle
and if that still didn't fit, we
could even start dropping some

00:15:35.216 --> 00:15:36.826 A:middle
of the elements instead
of truncating,

00:15:37.636 --> 00:15:41.906 A:middle
preferable to see Sep23
versus Wed dot dot dot.

00:15:42.416 --> 00:15:47.446 A:middle
And finally, if we had way less
space to deal with we could drop

00:15:47.446 --> 00:15:49.586 A:middle
down to displaying
the day of the month.

00:15:50.426 --> 00:15:54.136 A:middle
This is what CLKDate text
provider will do for you.

00:15:55.186 --> 00:15:57.716 A:middle
You have a date you
want to display,

00:15:58.196 --> 00:16:00.916 A:middle
you have units you would
ideally like to display,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:58.196 --> 00:16:00.916 A:middle
you have units you would
ideally like to display,

00:16:01.786 --> 00:16:06.316 A:middle
in this case the weekday,
the month and the day.

00:16:06.556 --> 00:16:10.846 A:middle
You create a text provider
from these pieces and then

00:16:11.486 --> 00:16:14.216 A:middle
that very text provider
can be attached to one

00:16:14.216 --> 00:16:18.036 A:middle
of these templates and it
will look different depending

00:16:18.036 --> 00:16:18.876 A:middle
on the context.

00:16:19.146 --> 00:16:20.176 A:middle
So here it is,

00:16:21.006 --> 00:16:23.376 A:middle
in the ModularLarge
complication displaying one

00:16:23.376 --> 00:16:25.646 A:middle
of the longer renditions
of this date.

00:16:27.196 --> 00:16:30.346 A:middle
Here are two of these very
same text providers produced

00:16:30.346 --> 00:16:34.566 A:middle
with that very same code
displayed with widths

00:16:34.566 --> 00:16:37.106 A:middle
of various degrees
of further constraint

00:16:37.566 --> 00:16:42.116 A:middle
and here is the same text
provider providing a date in one

00:16:42.116 --> 00:16:43.756 A:middle
of these CircularSmall
complications

00:16:44.156 --> 00:16:46.566 A:middle
and there is no truncating
anywhere

00:16:46.566 --> 00:16:47.696 A:middle
and there is no work you have

00:16:47.696 --> 00:16:51.476 A:middle
to do beyond the code
that you see here.

00:16:51.726 --> 00:16:53.476 A:middle
That's date text providers.

00:16:54.206 --> 00:16:56.026 A:middle
There is other kinds of
text providers as well.

00:16:56.466 --> 00:16:58.756 A:middle
The one you are most
likely to use most

00:16:58.756 --> 00:17:01.316 A:middle
of the time is the simple
text provider this allows you


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:58.756 --> 00:17:01.316 A:middle
of the time is the simple
text provider this allows you

00:17:01.656 --> 00:17:04.276 A:middle
to provide arbitrary text.

00:17:05.316 --> 00:17:09.546 A:middle
And but it's better than an
NSString because in addition

00:17:09.546 --> 00:17:11.376 A:middle
to providing the text
you would like to see,

00:17:11.576 --> 00:17:14.506 A:middle
you can also provide a shorter
version and we will fall back

00:17:14.506 --> 00:17:17.616 A:middle
on the shorter version before
truncating the ideal version.

00:17:18.106 --> 00:17:20.736 A:middle
There is a time text provider

00:17:20.736 --> 00:17:23.006 A:middle
which formats times
for you nicely.

00:17:23.146 --> 00:17:25.685 A:middle
You get the nice small caps that
match the rest of the system

00:17:25.685 --> 00:17:27.266 A:middle
and will drop the a.m.

00:17:27.266 --> 00:17:29.916 A:middle
/p.m. if there isn't
room to fit it.

00:17:29.916 --> 00:17:33.046 A:middle
As you see in the
sunrise/sunset complication

00:17:33.046 --> 00:17:35.796 A:middle
which is using this text
provider at the bottom.

00:17:38.576 --> 00:17:41.766 A:middle
There is also a time
interval text provider.

00:17:42.236 --> 00:17:45.306 A:middle
This text provider is good for
formatting ranges of times.

00:17:45.576 --> 00:17:47.276 A:middle
We use it in the
calendar complication

00:17:47.716 --> 00:17:50.086 A:middle
and it has some nice
formatting features as well.

00:17:50.626 --> 00:17:54.576 A:middle
It will look like this if the
first date is in the morning

00:17:54.576 --> 00:17:56.326 A:middle
and the second date
is in the afternoon.

00:17:56.326 --> 00:17:59.396 A:middle
If they are both in the
afternoon, it's smart,

00:17:59.396 --> 00:18:01.096 A:middle
and it drops the redundant a.m.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.396 --> 00:18:01.096 A:middle
and it drops the redundant a.m.

00:18:01.156 --> 00:18:03.076 A:middle
/p.m. symbol to make
this look nicer.

00:18:03.076 --> 00:18:06.696 A:middle
It will also fall back
on narrower versions

00:18:06.696 --> 00:18:08.856 A:middle
if this rendition won't fit.

00:18:09.136 --> 00:18:13.026 A:middle
These are useful and we
encourage you to use them.

00:18:13.026 --> 00:18:17.666 A:middle
There is one more I wanted to
talk about now, and before I get

00:18:18.646 --> 00:18:22.016 A:middle
to it, let me show you
the problem it's solving.

00:18:22.586 --> 00:18:26.166 A:middle
So here you see our
moon phase digital

00:18:26.166 --> 00:18:27.936 A:middle
ModularLarge complication.

00:18:27.936 --> 00:18:33.106 A:middle
And at the bottom of
that, the third row

00:18:33.106 --> 00:18:36.066 A:middle
in that moon phase complication
it's telling us the amount

00:18:36.066 --> 00:18:39.076 A:middle
of time until the moonset in
terms of hours and minutes.

00:18:39.206 --> 00:18:42.916 A:middle
So the moonset is at 2:19
today, which is in 3 hours

00:18:42.916 --> 00:18:46.126 A:middle
and 1 minutes from 11:18.

00:18:46.336 --> 00:18:50.636 A:middle
So as time ticks by, this
string changes at 11:19,

00:18:50.636 --> 00:18:54.156 A:middle
it shows 3 hours, at 11:20
it shows 2 hours 59 minutes,

00:18:54.616 --> 00:18:55.256 A:middle
and so on.

00:18:55.866 --> 00:18:59.486 A:middle
Now, imagine if you
were creating a timeline


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:00.436 --> 00:19:01.916 A:middle
to populate this complication.

00:19:01.916 --> 00:19:06.616 A:middle
You would need to
provide a new template

00:19:06.616 --> 00:19:08.346 A:middle
for every minute
of the entire day.

00:19:08.416 --> 00:19:10.466 A:middle
That's a lot of templates.

00:19:11.686 --> 00:19:13.236 A:middle
And it could be even worse

00:19:13.536 --> 00:19:16.426 A:middle
because that's the moon
phase complication ticking

00:19:16.426 --> 00:19:17.266 A:middle
down by the minute.

00:19:17.746 --> 00:19:20.456 A:middle
What about the timer which
ticks down by the second?

00:19:20.866 --> 00:19:22.966 A:middle
Imagine how many
templates that is.

00:19:22.966 --> 00:19:25.476 A:middle
It's more than we could
possibly reasonably cache

00:19:25.946 --> 00:19:27.726 A:middle
and it's incredibly wasteful

00:19:28.196 --> 00:19:31.316 A:middle
because these strings
are derivable

00:19:31.316 --> 00:19:33.066 A:middle
from two pieces of information.

00:19:33.566 --> 00:19:36.776 A:middle
The date you are counting down
to, and the date that it is now.

00:19:37.816 --> 00:19:39.416 A:middle
And we know the date
that it is now.

00:19:39.526 --> 00:19:40.616 A:middle
That's what we are doing.

00:19:40.616 --> 00:19:41.706 A:middle
We're a clock.

00:19:42.086 --> 00:19:45.506 A:middle
So we wanted to give you a
way to produce these strings

00:19:45.706 --> 00:19:49.456 A:middle
without populating your timeline
full of just a massive quantity

00:19:49.726 --> 00:19:50.946 A:middle
of redundant information,

00:19:51.306 --> 00:19:53.466 A:middle
that's what the relative
date text provider does.

00:19:54.106 --> 00:19:58.006 A:middle
Here is what it looks like
in code if we were trying

00:19:58.006 --> 00:20:00.926 A:middle
to produce the third line
of text that you see here.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:58.006 --> 00:20:00.926 A:middle
to produce the third line
of text that you see here.

00:20:01.116 --> 00:20:03.586 A:middle
We would get the
date for the moonset.

00:20:04.776 --> 00:20:06.976 A:middle
We would choose the units
that we wanted to display

00:20:06.976 --> 00:20:09.256 A:middle
and actually I will show on
the next screen there is a lot

00:20:09.256 --> 00:20:11.326 A:middle
of different units
you can use here.

00:20:12.196 --> 00:20:13.966 A:middle
We would choose a
style, and, again,

00:20:13.966 --> 00:20:15.266 A:middle
I will show you the
possible styles.

00:20:15.306 --> 00:20:17.436 A:middle
This one you see here
is the natural style.

00:20:18.026 --> 00:20:21.816 A:middle
You would make a relative
date text provider

00:20:21.816 --> 00:20:22.946 A:middle
out of these elements.

00:20:23.946 --> 00:20:25.896 A:middle
And then you would just
set that text provider

00:20:26.146 --> 00:20:28.296 A:middle
as your body 2 text
provider for your template

00:20:29.466 --> 00:20:31.226 A:middle
and the clock face
does the rest.

00:20:31.226 --> 00:20:34.526 A:middle
It will always display the
relative date to the date

00:20:34.526 --> 00:20:37.396 A:middle
that you gave us at every
given moment without you having

00:20:37.396 --> 00:20:38.246 A:middle
to do any further work.

00:20:38.866 --> 00:20:42.376 A:middle
So these are some styles
that are available,

00:20:42.566 --> 00:20:44.596 A:middle
and as you can see if you
look at the natural and style

00:20:44.596 --> 00:20:49.946 A:middle
and the offset style, you can
get either fine grained relative

00:20:49.946 --> 00:20:52.496 A:middle
dates or very course grained
relative dates so depending

00:20:52.496 --> 00:20:54.256 A:middle
on the date that you wanted --

00:20:54.626 --> 00:20:57.616 A:middle
depending on how far it is to
the date you want to display,

00:20:57.996 --> 00:21:01.256 A:middle
we can show weeks and days,
months and years, so on,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:57.996 --> 00:21:01.256 A:middle
we can show weeks and days,
months and years, so on,

00:21:01.776 --> 00:21:03.026 A:middle
all the way down to seconds.

00:21:03.406 --> 00:21:03.706 A:middle
All right.

00:21:04.496 --> 00:21:07.356 A:middle
So that's text providers
and image providers.

00:21:07.876 --> 00:21:09.926 A:middle
So I want to sum up how it is

00:21:09.926 --> 00:21:11.486 A:middle
that you are giving
us your content.

00:21:12.496 --> 00:21:15.656 A:middle
You choose a template
from one of the number

00:21:15.656 --> 00:21:17.746 A:middle
of possible templates,
choosing one

00:21:17.746 --> 00:21:20.116 A:middle
that matches the complication
family you are being asked

00:21:20.116 --> 00:21:21.026 A:middle
to provide data for.

00:21:21.606 --> 00:21:25.156 A:middle
And then you populate
that with image providers

00:21:25.896 --> 00:21:26.786 A:middle
and text providers.

00:21:26.786 --> 00:21:31.086 A:middle
And then you are going to
hand us a whole bunch of those

00:21:31.336 --> 00:21:35.176 A:middle
in the form of a timeline and
to talk about more, to talk more

00:21:35.176 --> 00:21:37.756 A:middle
about how to form one of
these timelines I want

00:21:37.756 --> 00:21:38.636 A:middle
to invite up Paul.

00:21:39.306 --> 00:21:41.436 A:middle
Here he is.

00:21:43.466 --> 00:21:43.586 A:middle
&gt;&gt; PAUL SALZMAN: Awesome!

00:21:45.516 --> 00:21:48.646 A:middle
[ Applause ]

00:21:49.146 --> 00:21:49.706 A:middle
Hello everyone.

00:21:50.446 --> 00:21:52.876 A:middle
So as Eliza mentioned we are
going to be gathering our data

00:21:52.876 --> 00:21:54.646 A:middle
for your complication in
the form of a timeline.

00:21:55.296 --> 00:21:56.626 A:middle
This helps to support
two things:

00:21:57.106 --> 00:22:00.376 A:middle
the brand-new Time Travel
feature and we are going to able


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:57.106 --> 00:22:00.376 A:middle
the brand-new Time Travel
feature and we are going to able

00:22:00.376 --> 00:22:02.486 A:middle
to present the user with
your content immediately

00:22:02.486 --> 00:22:03.696 A:middle
on wrist raise without
any delay.

00:22:05.046 --> 00:22:06.216 A:middle
Let's take a look at
about how to think

00:22:06.216 --> 00:22:07.676 A:middle
about timelines and
complications.

00:22:08.466 --> 00:22:09.626 A:middle
We are going to start

00:22:09.736 --> 00:22:11.226 A:middle
by creating the weather
complication up here

00:22:11.226 --> 00:22:12.026 A:middle
on the bottom left corner.

00:22:12.476 --> 00:22:15.316 A:middle
We are showing 57
degrees because right now

00:22:15.626 --> 00:22:17.686 A:middle
when the watch is showing
10:00 a.m., our forecast says

00:22:17.686 --> 00:22:19.876 A:middle
that 57 degrees is the
temperature outside

00:22:19.876 --> 00:22:20.626 A:middle
for this location.

00:22:20.916 --> 00:22:23.686 A:middle
And in fact, we actually
have a forecast by hour

00:22:23.686 --> 00:22:25.586 A:middle
until 7:00 p.m. today
for this location

00:22:25.586 --> 00:22:27.956 A:middle
that we can take advantage of.

00:22:28.426 --> 00:22:31.876 A:middle
For timelines we don't describe
a range we associate the data we

00:22:31.876 --> 00:22:33.206 A:middle
want to show with
a point in time.

00:22:33.766 --> 00:22:34.926 A:middle
So let's slide these over here.

00:22:34.926 --> 00:22:37.626 A:middle
As the clock progresses
throughout the day.

00:22:38.046 --> 00:22:40.216 A:middle
We will show the most recent
data you have provided

00:22:40.216 --> 00:22:41.896 A:middle
on the timeline on
the watch face.

00:22:42.506 --> 00:22:45.576 A:middle
So as we get past 11:00 a.m.
we will update the forecast

00:22:45.576 --> 00:22:46.386 A:middle
to 55 degrees.

00:22:47.646 --> 00:22:50.276 A:middle
As we inch closer
to noon at 11:59

00:22:50.276 --> 00:22:52.766 A:middle
and 59 seconds we are
still at 55 degrees.

00:22:54.336 --> 00:22:56.076 A:middle
Once we hit noon we will
update the template.

00:22:57.156 --> 00:22:59.126 A:middle
This works similarly for
the Time Travel feature.

00:22:59.666 --> 00:23:02.646 A:middle
As the user navigates throughout
the day we will show the most


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.666 --> 00:23:02.646 A:middle
As the user navigates throughout
the day we will show the most

00:23:02.646 --> 00:23:04.786 A:middle
recent data available at
that point in your timeline.

00:23:05.646 --> 00:23:06.916 A:middle
So as we get past 1:00 p.m.,

00:23:07.076 --> 00:23:08.986 A:middle
we're going to update your
content to 54 degrees.

00:23:09.556 --> 00:23:12.876 A:middle
The other complication is
kind of an easy example

00:23:12.876 --> 00:23:14.786 A:middle
because your data
matches perfectly

00:23:15.096 --> 00:23:16.976 A:middle
to unblocked time
on the timeline.

00:23:17.876 --> 00:23:19.786 A:middle
Let's look at something
more complex by trying

00:23:19.786 --> 00:23:21.006 A:middle
to build the calendar
complication here.

00:23:22.196 --> 00:23:24.026 A:middle
If you are lucky your
calendar has plenty

00:23:24.026 --> 00:23:24.826 A:middle
of gaps throughout the day.

00:23:26.086 --> 00:23:27.426 A:middle
Today I'm going to
go have brunch

00:23:27.596 --> 00:23:28.896 A:middle
and later I will get a haircut

00:23:28.896 --> 00:23:31.086 A:middle
and when I look better
I will meet

00:23:31.086 --> 00:23:33.746 A:middle
with friends and watch a movie.

00:23:33.906 --> 00:23:35.246 A:middle
So we can be naive about this

00:23:35.666 --> 00:23:38.326 A:middle
and associate the templates we
want to display for these events

00:23:38.326 --> 00:23:40.446 A:middle
for they begin and clear
them out when the event ends.

00:23:40.446 --> 00:23:43.456 A:middle
Let's see how this
works in practice.

00:23:44.626 --> 00:23:46.626 A:middle
So at noon today we will
show that we are at a brunch,

00:23:46.816 --> 00:23:49.936 A:middle
but once brunch is over and
it's 1:00 p.m. we no longer have

00:23:49.936 --> 00:23:51.456 A:middle
content displaying
on the wrist watch.

00:23:52.006 --> 00:23:53.416 A:middle
That's a bad user experience.

00:23:54.576 --> 00:23:56.786 A:middle
What's worse though is
we get closer and closer

00:23:56.786 --> 00:23:58.996 A:middle
to 4:00 p.m. I have
no idea I need to get

00:23:58.996 --> 00:24:00.116 A:middle
into my car and get a haircut.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.996 --> 00:24:00.116 A:middle
into my car and get a haircut.

00:24:00.706 --> 00:24:02.556 A:middle
So you never want to tick
off the person that's doing

00:24:02.556 --> 00:24:02.936 A:middle
your hair.

00:24:04.276 --> 00:24:06.716 A:middle
So now it's too late and
I'm going to get a perm

00:24:06.716 --> 00:24:10.706 A:middle
and it's not going to work well.

00:24:10.706 --> 00:24:11.496 A:middle
Let's fix this.

00:24:11.496 --> 00:24:14.276 A:middle
The first mistake is
assuming we should have blocks

00:24:14.276 --> 00:24:16.656 A:middle
for unused time frames
in the timeline.

00:24:17.156 --> 00:24:19.616 A:middle
So let's get rid of those.

00:24:19.826 --> 00:24:22.256 A:middle
And showing an event
isn't useful

00:24:22.256 --> 00:24:23.346 A:middle
for a calendar complication.

00:24:23.906 --> 00:24:26.756 A:middle
We should put the templates at
the end of the previous event

00:24:26.756 --> 00:24:32.486 A:middle
so you have adequate time
to get to your next event.

00:24:32.766 --> 00:24:34.336 A:middle
So the first event
over here actually,

00:24:34.336 --> 00:24:36.446 A:middle
there is no previous event
so it might be useful

00:24:36.446 --> 00:24:39.246 A:middle
to actually tag it at midnight
to you get adequate warning

00:24:39.246 --> 00:24:40.196 A:middle
in the morning when you wake up

00:24:40.196 --> 00:24:43.566 A:middle
and on the right we should let
users know there is nothing they

00:24:43.566 --> 00:24:44.976 A:middle
should be worried about
for the rest of the day

00:24:44.976 --> 00:24:46.486 A:middle
with an indication
there is no more events.

00:24:47.176 --> 00:24:48.836 A:middle
How does this look?

00:24:48.836 --> 00:24:51.536 A:middle
At noon just like before we
will know we are at brunch

00:24:51.976 --> 00:24:54.196 A:middle
but once brunch is over
we have adequate heads-up

00:24:54.196 --> 00:24:55.596 A:middle
to know we need to
get a haircut.

00:24:56.506 --> 00:24:57.456 A:middle
We will meet with our friends

00:24:57.956 --> 00:24:59.076 A:middle
because we didn't
miss any events

00:24:59.396 --> 00:25:01.936 A:middle
and when we are done watching
a movie we can go home


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:59.396 --> 00:25:01.936 A:middle
and when we are done watching
a movie we can go home

00:25:01.936 --> 00:25:06.856 A:middle
with knowing we didn't
miss out on anything else.

00:25:06.856 --> 00:25:09.166 A:middle
So how do you get the data
points into your code?

00:25:09.806 --> 00:25:11.526 A:middle
You will use the
complication timeline entry.

00:25:12.546 --> 00:25:15.336 A:middle
So Eliza described earlier
generating templates using text

00:25:15.336 --> 00:25:18.046 A:middle
and image providers and
all we need to associate

00:25:18.046 --> 00:25:19.006 A:middle
with that is an NSState.

00:25:19.946 --> 00:25:21.356 A:middle
We will stuff the objects

00:25:21.406 --> 00:25:23.426 A:middle
into the CLKComplication
timeline entry.

00:25:24.156 --> 00:25:26.636 A:middle
When you hand that to the clock
face we will inspect the date

00:25:26.636 --> 00:25:29.186 A:middle
and make a note on the
timeline so we know

00:25:29.186 --> 00:25:30.936 A:middle
to display the template
when you reach that time.

00:25:30.936 --> 00:25:33.866 A:middle
You can see in code
what the object looks

00:25:33.866 --> 00:25:37.166 A:middle
like with the Date property and
complicationTemplate property.

00:25:37.296 --> 00:25:41.856 A:middle
So how do you actually
communicate this data to us?

00:25:42.596 --> 00:25:44.386 A:middle
You will have an
object in your project

00:25:44.386 --> 00:25:45.906 A:middle
that implements the
CLKComplication

00:25:45.906 --> 00:25:46.996 A:middle
DataSource protocol.

00:25:47.676 --> 00:25:52.686 A:middle
This object is annotated in your
Xcode WatchKit extensions target

00:25:52.686 --> 00:25:55.076 A:middle
settings as Eliza showed you
during setting up your project.

00:25:56.076 --> 00:25:58.036 A:middle
There are a bunch of callbacks
you will get on the object.

00:25:58.906 --> 00:26:00.536 A:middle
They are generally
per complication.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.906 --> 00:26:00.536 A:middle
They are generally
per complication.

00:26:00.536 --> 00:26:02.886 A:middle
And we will pass you a
CLKComplication object

00:26:03.246 --> 00:26:05.196 A:middle
that has a Family property
you will want to switch on.

00:26:05.196 --> 00:26:08.276 A:middle
At this point you will
decide is this ModularLarge?

00:26:08.276 --> 00:26:09.246 A:middle
Which template should I use?

00:26:09.306 --> 00:26:10.656 A:middle
Is this ModularSmall?

00:26:10.656 --> 00:26:14.406 A:middle
Which text providers go with the
template I'm choosing for that?

00:26:14.676 --> 00:26:17.056 A:middle
And in addition to
passing the complication

00:26:17.056 --> 00:26:18.766 A:middle
that you are interested
in providing content for,

00:26:18.766 --> 00:26:20.496 A:middle
we are also going to
give you a handler.

00:26:20.926 --> 00:26:23.176 A:middle
And you use this handler to give
us the data we have requested

00:26:23.176 --> 00:26:24.376 A:middle
and let us know you
are done running.

00:26:24.846 --> 00:26:26.286 A:middle
This is very important
because you are going

00:26:26.286 --> 00:26:28.716 A:middle
to have opportunities to refresh
your content in the background.

00:26:29.036 --> 00:26:32.046 A:middle
We want to know when
you are done running.

00:26:32.856 --> 00:26:34.306 A:middle
So let's start building
up our timeline.

00:26:34.806 --> 00:26:37.526 A:middle
You will see we have our clock
face on the left, your extension

00:26:37.526 --> 00:26:42.576 A:middle
on the right and the timeline we
want to build across the bottom.

00:26:42.736 --> 00:26:45.386 A:middle
Inside of your extension you
will have your complication

00:26:45.386 --> 00:26:46.236 A:middle
controller object.

00:26:46.716 --> 00:26:49.666 A:middle
Now, this is the default object
that Xcode will create for you

00:26:49.666 --> 00:26:52.666 A:middle
that implements the
ComplicationDataSource protocol.

00:26:52.896 --> 00:26:54.796 A:middle
This is the object we are
going to be communicating with.

00:26:55.486 --> 00:26:59.746 A:middle
So to get started, we
are going to ask you

00:26:59.746 --> 00:27:03.626 A:middle
which timeline entry should
we be displaying right now.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:59.746 --> 00:27:03.626 A:middle
which timeline entry should
we be displaying right now.

00:27:04.686 --> 00:27:07.736 A:middle
So you will package up a
timeline entry and send it

00:27:07.736 --> 00:27:10.546 A:middle
over the wire via the handler,
and then we're going to add it

00:27:10.546 --> 00:27:11.646 A:middle
onto the timeline right then.

00:27:11.646 --> 00:27:13.756 A:middle
What's important
to note with all

00:27:13.756 --> 00:27:15.616 A:middle
of these questions
we are asking you is

00:27:15.616 --> 00:27:17.116 A:middle
that we are basing
the next questions

00:27:17.116 --> 00:27:18.936 A:middle
on the information you have
given in the previous one.

00:27:19.156 --> 00:27:19.676 A:middle
So we are going

00:27:19.676 --> 00:27:21.976 A:middle
to be incrementally
building this timeline out.

00:27:22.046 --> 00:27:23.476 A:middle
We want the data to
be super accurate.

00:27:23.866 --> 00:27:25.876 A:middle
You don't want to blindly
tag the current NSDate

00:27:25.876 --> 00:27:26.496 A:middle
for this entry.

00:27:26.906 --> 00:27:30.406 A:middle
If it's 10:30 a.m. and we want
10:00 a.m. forecast data you

00:27:30.406 --> 00:27:34.926 A:middle
should tag this complication
timeline entry with 10:00 a.m.

00:27:35.086 --> 00:27:38.836 A:middle
So the function we will ask
is GetCurrentTimelineEntry

00:27:38.836 --> 00:27:39.646 A:middle
ForComplication.

00:27:40.606 --> 00:27:42.736 A:middle
Again, we are going to
pass you a CLKComplication.

00:27:43.166 --> 00:27:45.566 A:middle
This has a Family property
you should switch on to decide

00:27:45.566 --> 00:27:47.776 A:middle
which template, which text
and image providers you want

00:27:47.776 --> 00:27:51.316 A:middle
to supply, and a handler
that takes the timeline entry

00:27:51.316 --> 00:27:54.626 A:middle
that you should call when you
are done with this callback.

00:27:55.476 --> 00:27:57.646 A:middle
So now we have your
current entry and we need

00:27:57.646 --> 00:27:58.976 A:middle
to start fleshing
out your timeline

00:27:58.976 --> 00:28:00.576 A:middle
to the future and the past.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:58.976 --> 00:28:00.576 A:middle
to the future and the past.

00:28:00.576 --> 00:28:01.756 A:middle
Let's start looking
to the future.

00:28:02.876 --> 00:28:06.446 A:middle
We are going to ask you
incrementally what timelines you

00:28:06.446 --> 00:28:07.726 A:middle
have after a specific date.

00:28:08.196 --> 00:28:09.946 A:middle
This date will generally
be based off

00:28:09.946 --> 00:28:11.606 A:middle
of previous data
you have handed us

00:28:11.676 --> 00:28:13.146 A:middle
and what's still in our cache.

00:28:14.186 --> 00:28:17.866 A:middle
So we will hand you this date
and you will package up an array

00:28:17.866 --> 00:28:20.276 A:middle
of CLKComplication
timeline entries that start

00:28:20.446 --> 00:28:21.786 A:middle
after this date non-inclusively.

00:28:22.616 --> 00:28:27.036 A:middle
A good rule of thumb is
charting a day's worth of data.

00:28:27.036 --> 00:28:29.036 A:middle
When you send this data over
the wire, we will add it

00:28:29.036 --> 00:28:30.956 A:middle
to your timeline and
if we feel we need

00:28:30.956 --> 00:28:32.776 A:middle
to cache more data we
will ask you again.

00:28:33.216 --> 00:28:34.496 A:middle
In which case if
you have more data

00:28:34.496 --> 00:28:36.236 A:middle
to give us you happily
provide the array.

00:28:36.966 --> 00:28:39.456 A:middle
Let's say we keep asking you

00:28:39.456 --> 00:28:42.276 A:middle
and there is no more
content to show.

00:28:42.326 --> 00:28:44.956 A:middle
You can pass an empty
NSArray or nil

00:28:44.956 --> 00:28:46.716 A:middle
and that will give us the
hint to leave you alone.

00:28:46.716 --> 00:28:50.816 A:middle
As time progresses all of
your entries will be further

00:28:50.816 --> 00:28:52.746 A:middle
and further into the
past so it's possible

00:28:52.746 --> 00:28:54.186 A:middle
to increase our cache,
we might have

00:28:54.186 --> 00:28:55.406 A:middle
to query you again
in the future.

00:28:56.046 --> 00:29:00.276 A:middle
So the future we are calling
here is getTimelineEntries


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:56.046 --> 00:29:00.276 A:middle
So the future we are calling
here is getTimelineEntries

00:29:00.276 --> 00:29:01.006 A:middle
ForComplication.

00:29:01.296 --> 00:29:03.726 A:middle
We are always going to pass you
the complication we are curious

00:29:03.726 --> 00:29:05.226 A:middle
about, so look at
the Family property.

00:29:05.866 --> 00:29:08.186 A:middle
And then, of course,
we are going

00:29:08.186 --> 00:29:09.036 A:middle
to give you the after date.

00:29:09.036 --> 00:29:10.156 A:middle
This is the non-inclusive date.

00:29:10.156 --> 00:29:13.706 A:middle
You will package up the adjacent
forward-looking timeline entries

00:29:13.706 --> 00:29:14.286 A:middle
from this date.

00:29:14.816 --> 00:29:17.726 A:middle
And to make sure we don't
get overloaded with data,

00:29:18.176 --> 00:29:20.546 A:middle
we will pass you a
limit parameter here.

00:29:21.236 --> 00:29:24.146 A:middle
So don't put any more
content into the arrays

00:29:24.246 --> 00:29:25.916 A:middle
than this limit provided here.

00:29:26.456 --> 00:29:28.476 A:middle
If you do, we will remove
them in a way we are not going

00:29:28.476 --> 00:29:30.286 A:middle
to guarantee won't change
and you are not going

00:29:30.286 --> 00:29:31.166 A:middle
to find out what that means.

00:29:32.216 --> 00:29:34.866 A:middle
And then, of course, a
handler that takes this array.

00:29:35.506 --> 00:29:38.786 A:middle
And corresponding to go into the
future we have the before date

00:29:38.786 --> 00:29:43.726 A:middle
feature of this function that
helps flesh out the past.

00:29:43.726 --> 00:29:45.086 A:middle
So depending on the type

00:29:45.086 --> 00:29:47.106 A:middle
of complication you are
providing your needs

00:29:47.106 --> 00:29:48.416 A:middle
for Time Travel may vary.

00:29:48.906 --> 00:29:51.516 A:middle
Whether a complication that only
provides future forecast doesn't

00:29:51.516 --> 00:29:53.086 A:middle
want to Time Travel
into the past

00:29:53.356 --> 00:29:55.666 A:middle
and a stock complication can
only Time Travel to the past

00:29:56.076 --> 00:29:57.766 A:middle
because we haven't
perfected looking

00:29:57.766 --> 00:29:58.596 A:middle
into the future for that.

00:29:59.366 --> 00:30:02.096 A:middle
So we will ask you on setup
which directions you support.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.366 --> 00:30:02.096 A:middle
So we will ask you on setup
which directions you support.

00:30:03.096 --> 00:30:05.946 A:middle
So for the case of our
weather complication,

00:30:05.946 --> 00:30:07.216 A:middle
we will say we only
support the future

00:30:07.736 --> 00:30:09.736 A:middle
and that way our timeline
will only look forward.

00:30:10.036 --> 00:30:12.016 A:middle
If the user Time Travels into
the past we'll actually dim

00:30:12.016 --> 00:30:13.546 A:middle
out your content so they
know there's nothing there

00:30:13.606 --> 00:30:14.896 A:middle
to look at.

00:30:15.266 --> 00:30:16.806 A:middle
Similarly for the
stock complication,

00:30:17.116 --> 00:30:18.586 A:middle
you may say you only
provide the past.

00:30:18.646 --> 00:30:20.196 A:middle
And we will dim in
the other direction.

00:30:20.876 --> 00:30:24.926 A:middle
It's possible that you don't
want to support Time Travel,

00:30:24.926 --> 00:30:27.306 A:middle
but you still want to get
contents onto your watch face.

00:30:27.986 --> 00:30:30.446 A:middle
In that case, you want to
supply none as an option.

00:30:30.496 --> 00:30:32.476 A:middle
We will still show your
content but as soon

00:30:32.476 --> 00:30:34.416 A:middle
as we enter Time Travel
we'll actually dim it out.

00:30:35.236 --> 00:30:37.046 A:middle
It's important to note
that you might know some

00:30:37.046 --> 00:30:38.516 A:middle
of the content you want
to show in the future.

00:30:38.516 --> 00:30:40.956 A:middle
We will ask you, even though
you're not supporting Time

00:30:40.956 --> 00:30:43.716 A:middle
Travel forward, for data we
might possibly be able to cache.

00:30:43.866 --> 00:30:45.536 A:middle
We will never ask
you about the past

00:30:45.536 --> 00:30:47.236 A:middle
because right now time
doesn't travel backwards.

00:30:47.916 --> 00:30:51.996 A:middle
And if you want to a truly
bi-directional Time Travel

00:30:51.996 --> 00:30:54.386 A:middle
experience you can support
forward and backward.

00:30:55.066 --> 00:30:57.996 A:middle
So the function we will call

00:30:57.996 --> 00:31:01.016 A:middle
to get this information during
setup is getSupportedTimeTravel


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:57.996 --> 00:31:01.016 A:middle
to get this information during
setup is getSupportedTimeTravel

00:31:01.016 --> 00:31:02.136 A:middle
DirectionsForComplication.

00:31:02.136 --> 00:31:04.296 A:middle
We will pass you the
complication we are asking

00:31:04.296 --> 00:31:06.676 A:middle
about as well as a handler
that accepts these directions.

00:31:07.446 --> 00:31:09.776 A:middle
Now, giving an indication

00:31:09.776 --> 00:31:12.116 A:middle
to what directions you support
may not be the full story

00:31:12.446 --> 00:31:14.066 A:middle
for your Time Travel
complication.

00:31:14.536 --> 00:31:17.016 A:middle
For instance, our weather
complication only had a forecast

00:31:17.016 --> 00:31:19.926 A:middle
up until 7:00 p.m. but Time
Travel goes beyond that.

00:31:20.406 --> 00:31:22.736 A:middle
So let's take a look
at what happens.

00:31:22.736 --> 00:31:25.136 A:middle
As we Time Travel forward to
4:00 p.m. we still have data.

00:31:25.136 --> 00:31:26.426 A:middle
All of our complications
are updating.

00:31:26.426 --> 00:31:29.766 A:middle
But once we get to 7:09,
just past 7:00 p.m.,

00:31:30.266 --> 00:31:32.356 A:middle
we don't want our users to
think we have valid data

00:31:32.356 --> 00:31:34.606 A:middle
for the temperature in
the area so we will dim

00:31:34.606 --> 00:31:35.606 A:middle
out your complication here.

00:31:36.246 --> 00:31:39.376 A:middle
So the way that we figure
out when to actually dim

00:31:39.376 --> 00:31:41.466 A:middle
out your complication is
by querying you for the end

00:31:41.466 --> 00:31:43.086 A:middle
or beginning of your
timeline depending

00:31:43.086 --> 00:31:44.386 A:middle
on the directions you support

00:31:44.386 --> 00:31:48.146 A:middle
so we will ask you during setup
how far out into the future

00:31:48.146 --> 00:31:49.646 A:middle
if you are a forward
complication,

00:31:49.646 --> 00:31:52.226 A:middle
and you will give
us an NSDate back.

00:31:52.956 --> 00:31:55.176 A:middle
If you support Time Travel
to the past, similarly,

00:31:55.176 --> 00:31:57.226 A:middle
you can provide us another
NSDate to this question


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:01.076 --> 00:32:02.326 A:middle
and we will adjust accordingly.

00:32:02.516 --> 00:32:04.066 A:middle
We will adjust accordingly.

00:32:04.066 --> 00:32:06.356 A:middle
So the function we are going
to call to find out how far

00:32:06.356 --> 00:32:09.216 A:middle
into the future we should Time
Travel is getTimelineAndDate

00:32:09.356 --> 00:32:10.056 A:middle
ForComplication.

00:32:10.596 --> 00:32:13.336 A:middle
We will pass you the
complication and, of course,

00:32:13.476 --> 00:32:14.906 A:middle
a handler that accepts
the NSDate

00:32:14.906 --> 00:32:15.656 A:middle
for the end of your timeline.

00:32:17.076 --> 00:32:20.056 A:middle
Correspondingly, we have
getTimelineStartDate to see

00:32:20.056 --> 00:32:22.896 A:middle
when your timeline should begin.

00:32:23.146 --> 00:32:26.216 A:middle
So when a user is customizing
the complication, the watch face

00:32:26.366 --> 00:32:28.006 A:middle
and they want to select
your complication,

00:32:28.746 --> 00:32:31.116 A:middle
they will select the slot
in this case ModularLarge

00:32:31.236 --> 00:32:32.936 A:middle
and use the Digital Crown to end

00:32:32.936 --> 00:32:35.436 A:middle
up on the San Francisco
soccer club complication.

00:32:35.896 --> 00:32:37.556 A:middle
You will see here
a couple of things

00:32:37.556 --> 00:32:39.236 A:middle
about the state of
customization.

00:32:40.576 --> 00:32:42.816 A:middle
There is a caption but
your complications entry

00:32:42.816 --> 00:32:43.956 A:middle
that says your application's
name

00:32:43.956 --> 00:32:45.156 A:middle
and this is provided
by the system.

00:32:45.676 --> 00:32:48.686 A:middle
Now, that we are in the
modular large slot we are able

00:32:48.686 --> 00:32:50.436 A:middle
to provide a ModularLarge
template

00:32:50.436 --> 00:32:53.106 A:middle
that describes what
our users expect to see

00:32:53.106 --> 00:32:54.346 A:middle
and give them the right context

00:32:54.566 --> 00:32:56.586 A:middle
for why they should
select our complication.

00:32:57.176 --> 00:32:59.836 A:middle
After they select
the complication,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:00.416 --> 00:33:02.376 A:middle
go back to the switcher
and back to the live face.

00:33:02.376 --> 00:33:07.056 A:middle
We will start querying you for
data and populate the timeline.

00:33:07.056 --> 00:33:08.486 A:middle
We call those templates
we present

00:33:08.486 --> 00:33:10.456 A:middle
in customization
placeholder templates.

00:33:11.046 --> 00:33:13.526 A:middle
We will query you once
on installation and cache

00:33:13.566 --> 00:33:15.506 A:middle
that so we don't have to
launch multiple extensions

00:33:15.506 --> 00:33:16.426 A:middle
during customization.

00:33:17.366 --> 00:33:20.346 A:middle
So during installation, for all

00:33:20.566 --> 00:33:23.856 A:middle
of the complications you
support, we will query you

00:33:23.856 --> 00:33:24.916 A:middle
for your placeholder template

00:33:25.456 --> 00:33:27.756 A:middle
to which you provide us a
CLKComplicationTemplate.

00:33:28.206 --> 00:33:29.876 A:middle
There is no timeline
on the bottom,

00:33:29.986 --> 00:33:32.506 A:middle
this isn't happening live
while we are using it.

00:33:32.736 --> 00:33:34.066 A:middle
And we are not using
a timeline entry

00:33:34.066 --> 00:33:34.996 A:middle
in this callback right here,

00:33:34.996 --> 00:33:36.486 A:middle
it's just a complication
template

00:33:36.546 --> 00:33:37.986 A:middle
because there is no
date to associate.

00:33:38.866 --> 00:33:41.386 A:middle
So the function we are calling
is getPlaceholderTemplate

00:33:41.696 --> 00:33:44.956 A:middle
ForComplication with a
complication and as you are used

00:33:44.956 --> 00:33:46.606 A:middle
to with this pattern, a handler.

00:33:47.786 --> 00:33:50.706 A:middle
So now that you are very
comfortable constructing your

00:33:50.706 --> 00:33:52.316 A:middle
timeline, I would like
to bring Eliza Block

00:33:52.316 --> 00:33:53.956 A:middle
up to give you a demo of how

00:33:53.956 --> 00:33:59.976 A:middle
to construct this
in code [applause].


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:00.676 --> 00:34:00.976 A:middle
&gt;&gt; ELIZA BLOCK: Okay.

00:34:01.546 --> 00:34:03.496 A:middle
So I have got a project here

00:34:03.496 --> 00:34:05.976 A:middle
that I haven't done
very much to yet.

00:34:06.046 --> 00:34:08.025 A:middle
We are going to actually
build the complication

00:34:08.286 --> 00:34:09.516 A:middle
that we have been
showing you pictures

00:34:09.516 --> 00:34:12.656 A:middle
of throughout the session.

00:34:12.735 --> 00:34:16.226 A:middle
So let me just show you a
little bit about what's going

00:34:16.226 --> 00:34:17.426 A:middle
on with Xcode project.

00:34:17.426 --> 00:34:20.176 A:middle
I created a new project, I
dragged a couple resources in,

00:34:20.376 --> 00:34:22.406 A:middle
including a model that
I had previously written

00:34:22.585 --> 00:34:24.176 A:middle
to provide this schedule.

00:34:25.525 --> 00:34:32.016 A:middle
And I configured it to work with
complications, so if I navigate

00:34:32.016 --> 00:34:34.856 A:middle
over here to my -- oops!

00:34:38.315 --> 00:34:41.056 A:middle
General settings for
my Watch extension.

00:34:41.056 --> 00:34:41.866 A:middle
There it is.

00:34:42.545 --> 00:34:44.315 A:middle
If I zoom in, you
can see at the top

00:34:44.666 --> 00:34:46.946 A:middle
that I have got my
dataSource class.

00:34:47.045 --> 00:34:48.946 A:middle
It looks a little ugly
in Xcode at the moment

00:34:48.946 --> 00:34:51.126 A:middle
but if you click it you
can see it is pointing

00:34:51.126 --> 00:34:52.456 A:middle
to our complication class.

00:34:52.976 --> 00:34:55.706 A:middle
And then I have, for
now, unchecked all

00:34:55.706 --> 00:34:58.896 A:middle
of the supported families
except for ModularLarge just

00:34:58.936 --> 00:35:00.916 A:middle
to make things simpler in
the demo we will just focus


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:58.936 --> 00:35:00.916 A:middle
to make things simpler in
the demo we will just focus

00:35:00.916 --> 00:35:02.626 A:middle
on building the ModularLarge
complication.

00:35:02.976 --> 00:35:05.606 A:middle
We recommend that you do
try to support as many

00:35:05.606 --> 00:35:07.756 A:middle
of these different
families as you can

00:35:07.756 --> 00:35:09.886 A:middle
because your users
will be interested

00:35:09.886 --> 00:35:12.956 A:middle
in choosing different
faces and so the more

00:35:12.956 --> 00:35:14.806 A:middle
of these families you support,
the more likely they are

00:35:14.806 --> 00:35:17.706 A:middle
to be able to use your
content in their watch face.

00:35:18.476 --> 00:35:25.926 A:middle
So when you created this
Xcode project, Xcode and say

00:35:26.056 --> 00:35:27.706 A:middle
that you want to
support complications,

00:35:27.706 --> 00:35:31.606 A:middle
Xcode actually makes a
complicationController object

00:35:32.456 --> 00:35:34.206 A:middle
with stubs for all
of the methods

00:35:34.206 --> 00:35:35.436 A:middle
that you need to implement.

00:35:35.966 --> 00:35:37.616 A:middle
And this is pretty handy.

00:35:37.616 --> 00:35:40.106 A:middle
We can go through it
and just flesh it out

00:35:40.106 --> 00:35:42.496 A:middle
and have it give us the
information that we need.

00:35:42.896 --> 00:35:45.436 A:middle
So I'm going to start
at the bottom here.

00:35:45.436 --> 00:35:48.986 A:middle
I'm going to add some
extra space so we can see.

00:35:49.526 --> 00:35:52.376 A:middle
At this getPlaceholder
TemplateForComplication.

00:35:52.546 --> 00:35:55.556 A:middle
I want to do this first so
that we can actually go ahead

00:35:55.556 --> 00:35:57.666 A:middle
and pick the complication
and have it look the way

00:35:57.666 --> 00:35:59.116 A:middle
that Paul just showed
in the slides.

00:35:59.116 --> 00:36:03.546 A:middle
So I'm going to remove the
boilerplate that Xcode provided.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.116 --> 00:36:03.546 A:middle
So I'm going to remove the
boilerplate that Xcode provided.

00:36:03.986 --> 00:36:09.016 A:middle
And we are going to make an
actual complication template

00:36:09.256 --> 00:36:14.666 A:middle
of the ModularLargeStandardBody
class.

00:36:15.776 --> 00:36:18.856 A:middle
I'm going to give it an image
which is my soccer ball image.

00:36:19.066 --> 00:36:22.006 A:middle
Now, so I have got my
image as a UI image

00:36:22.006 --> 00:36:25.196 A:middle
and I'm creating an image
provider using that image

00:36:25.196 --> 00:36:27.456 A:middle
and I will not bother with
the background color for now.

00:36:28.076 --> 00:36:29.916 A:middle
Let me show you what
that image looks like.

00:36:29.916 --> 00:36:31.596 A:middle
I have it here in Xcode

00:36:31.596 --> 00:36:35.626 A:middle
and I can actually open
it up in the Finder.

00:36:35.626 --> 00:36:39.606 A:middle
And here is Preview.

00:36:39.686 --> 00:36:41.506 A:middle
Let me zoom way in.

00:36:41.506 --> 00:36:46.746 A:middle
So as you can see, this
is a template image.

00:36:46.916 --> 00:36:47.856 A:middle
It's monochrome.

00:36:48.066 --> 00:36:49.576 A:middle
It has alpha, an alpha channel

00:36:49.576 --> 00:36:51.516 A:middle
so this is the format you
want your images to be

00:36:51.516 --> 00:36:53.506 A:middle
in so they can get
properly colorized.

00:36:54.036 --> 00:36:58.236 A:middle
Okay. So there is our image

00:36:59.166 --> 00:37:02.236 A:middle
and we also need to
provide some text.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:59.166 --> 00:37:02.236 A:middle
and we also need to
provide some text.

00:37:02.236 --> 00:37:05.046 A:middle
So my header text provider is
going to say "Match schedule"

00:37:05.216 --> 00:37:07.386 A:middle
and my body 1 text
provider is going to say

00:37:07.386 --> 00:37:08.996 A:middle
"2015 Women's Tournament."

00:37:09.556 --> 00:37:11.926 A:middle
I will not provide a
body 2 text provider,

00:37:12.036 --> 00:37:13.926 A:middle
that's optional for
this template.

00:37:13.926 --> 00:37:17.526 A:middle
And my goal here is for the
text in the first line to wrap

00:37:17.756 --> 00:37:19.036 A:middle
to the second line
which will happen

00:37:19.036 --> 00:37:21.086 A:middle
if you omit the second
text provider.

00:37:21.656 --> 00:37:26.856 A:middle
We can build and run this with
only that much code added.

00:37:27.276 --> 00:37:29.026 A:middle
And then we should be able

00:37:29.026 --> 00:37:31.196 A:middle
to pick our complication
in editing.

00:37:31.966 --> 00:37:35.326 A:middle
So I will switch over
to the simulators.

00:37:36.046 --> 00:37:41.206 A:middle
And let me just double check
that the installation happened.

00:37:41.206 --> 00:37:41.986 A:middle
Yes, there is our app.

00:37:42.076 --> 00:37:42.626 A:middle
That's good.

00:37:43.236 --> 00:37:47.406 A:middle
So I'm going to force
press on the simulator,

00:37:48.696 --> 00:37:51.666 A:middle
customize, scroll over -- oops!

00:37:51.776 --> 00:37:53.066 A:middle
To the complication pane.

00:37:53.466 --> 00:37:56.016 A:middle
Actually, you know what
I'm going to do first --

00:37:56.016 --> 00:38:00.436 A:middle
as Paul mentioned we only call
this placeholder template method


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:56.016 --> 00:38:00.436 A:middle
as Paul mentioned we only call
this placeholder template method

00:38:00.436 --> 00:38:03.026 A:middle
once, when your app
is first installed,

00:38:03.396 --> 00:38:06.446 A:middle
so if you do something like
that, you are going to want

00:38:06.596 --> 00:38:10.506 A:middle
to uninstall it so that
then -- oh, this is --

00:38:11.536 --> 00:38:14.276 A:middle
make sure that it's
gone from the -- oops!

00:38:14.446 --> 00:38:14.726 A:middle
There we go.

00:38:14.836 --> 00:38:16.816 A:middle
So make sure it gets
uninstalled.

00:38:17.496 --> 00:38:20.316 A:middle
It's gone.

00:38:20.446 --> 00:38:23.906 A:middle
And then we will have
it show up again.

00:38:24.236 --> 00:38:27.586 A:middle
So that way our code
will ask you again

00:38:28.006 --> 00:38:29.096 A:middle
for the placeholder template.

00:38:29.346 --> 00:38:30.916 A:middle
So let's try this again.

00:38:40.076 --> 00:38:56.006 A:middle
So let's have it not be
there and then -- all right.

00:38:56.176 --> 00:38:59.456 A:middle
We will add it back in.

00:38:59.956 --> 00:39:14.486 A:middle
And let's try this
one more time.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:59.956 --> 00:39:14.486 A:middle
And let's try this
one more time.

00:39:14.696 --> 00:39:16.646 A:middle
Yay! Okay [applause].

00:39:18.456 --> 00:39:19.976 A:middle
All right.

00:39:20.076 --> 00:39:23.766 A:middle
So we have our template and
now we can actually select

00:39:23.766 --> 00:39:24.576 A:middle
the complication.

00:39:24.576 --> 00:39:27.726 A:middle
So I'm going to go ahead
and home out of there,

00:39:28.046 --> 00:39:29.806 A:middle
and as you can see the
complication, of course,

00:39:29.806 --> 00:39:31.796 A:middle
is not showing, switching
to showing live data

00:39:31.796 --> 00:39:33.016 A:middle
because we haven't
written the part

00:39:33.246 --> 00:39:34.446 A:middle
that provides the live data.

00:39:34.546 --> 00:39:38.396 A:middle
So the -- so it's
just going to stick

00:39:38.396 --> 00:39:39.966 A:middle
with the placeholder
template which is all

00:39:39.966 --> 00:39:41.436 A:middle
of the information
it's got so far.

00:39:41.746 --> 00:39:43.906 A:middle
Let's go back to the code
and we will add the part

00:39:43.906 --> 00:39:46.596 A:middle
that actually implements the
rest of the protocol methods.

00:39:47.236 --> 00:39:51.356 A:middle
Okay. So let me show
you about, a little bit

00:39:51.426 --> 00:39:52.956 A:middle
about the model that I'm using.

00:39:52.956 --> 00:39:54.146 A:middle
I will just switch
to the header.

00:39:54.146 --> 00:39:57.386 A:middle
I have got a model and written
my model in Objective-C.

00:39:57.716 --> 00:39:59.826 A:middle
You can mix and match
Objective-C and Swift

00:39:59.826 --> 00:40:03.766 A:middle
in projects so you can take
code written in an existing app


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:59.826 --> 00:40:03.766 A:middle
in projects so you can take
code written in an existing app

00:40:03.766 --> 00:40:07.696 A:middle
and pull it over into your
new watchOS 2 app and as long

00:40:07.696 --> 00:40:10.516 A:middle
as you include the
header for that

00:40:10.516 --> 00:40:12.596 A:middle
in your Swift bridging header,

00:40:12.596 --> 00:40:14.266 A:middle
it will just work,
which is cool.

00:40:14.266 --> 00:40:16.646 A:middle
So here is my soccer
match model object.

00:40:16.646 --> 00:40:18.826 A:middle
And these guys have a
date which is the date

00:40:18.826 --> 00:40:19.766 A:middle
that the match begins.

00:40:20.086 --> 00:40:22.786 A:middle
They have a team description
which tells you who is playing,

00:40:23.286 --> 00:40:26.446 A:middle
and what group in the
tournament this is.

00:40:26.666 --> 00:40:30.356 A:middle
And also the model can tell
me what the first match

00:40:30.356 --> 00:40:32.596 A:middle
in the schedule is,
what the last match is

00:40:32.596 --> 00:40:35.166 A:middle
and then each match can tell
me the previous and the next.

00:40:35.946 --> 00:40:40.386 A:middle
So with that handy, we can start
writing the code that's actually

00:40:40.386 --> 00:40:41.946 A:middle
going to populate
this complication.

00:40:42.566 --> 00:40:47.066 A:middle
So I'm going to write
two helper methods

00:40:47.456 --> 00:40:51.156 A:middle
to solve the two problems
that we need to figure out,

00:40:51.236 --> 00:40:53.536 A:middle
basically the two design
questions that we need to figure

00:40:53.536 --> 00:40:54.606 A:middle
out for this complication.

00:40:54.856 --> 00:40:57.906 A:middle
The first one is what should
our template actually look like?

00:40:57.906 --> 00:41:00.746 A:middle
And for that, I'm
going to write a method


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:57.906 --> 00:41:00.746 A:middle
And for that, I'm
going to write a method

00:41:00.746 --> 00:41:03.556 A:middle
that takes a soccer match

00:41:04.676 --> 00:41:08.906 A:middle
and provides a
CLKComplicationTemplate object.

00:41:09.416 --> 00:41:11.156 A:middle
So this is pretty
straightforward.

00:41:11.416 --> 00:41:15.726 A:middle
We want to build a
-- all is well --

00:41:15.726 --> 00:41:18.416 A:middle
build a ModularLarge standard
body template like we did

00:41:18.416 --> 00:41:20.746 A:middle
for the place holder and get

00:41:21.336 --> 00:41:25.416 A:middle
that same soccer ball image
provided as an image provider

00:41:25.416 --> 00:41:27.656 A:middle
and then we are going
to have three lines

00:41:27.656 --> 00:41:28.766 A:middle
of text for this one.

00:41:28.766 --> 00:41:31.416 A:middle
So the header is going to
be the time of the match.

00:41:31.606 --> 00:41:35.446 A:middle
And I'm using a CLKTime text
provider for that purpose.

00:41:35.956 --> 00:41:41.686 A:middle
And then the first line of text
underneath the header will tell

00:41:41.686 --> 00:41:44.626 A:middle
us which teams are playing and
I'm using a simple text provider

00:41:45.016 --> 00:41:49.686 A:middle
with my matches team
description, and then finally,

00:41:49.686 --> 00:41:53.826 A:middle
the third line is the
group description.

00:41:54.496 --> 00:41:55.856 A:middle
So now we have got a template.

00:41:56.906 --> 00:41:58.506 A:middle
We also have to decide
how we are going

00:41:58.506 --> 00:42:00.656 A:middle
to arrange these
templates on our timeline.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:58.506 --> 00:42:00.656 A:middle
to arrange these
templates on our timeline.

00:42:01.076 --> 00:42:04.606 A:middle
Now, the naive solution which
Paul mentioned in the context

00:42:04.606 --> 00:42:09.286 A:middle
of a calendar complication would
be to use the match start date

00:42:09.476 --> 00:42:11.326 A:middle
to be the date of
our timeline entry,

00:42:11.326 --> 00:42:14.066 A:middle
but that would have the drawback
that it has for the calendar

00:42:14.066 --> 00:42:16.146 A:middle
as well which is you
wouldn't be able to look

00:42:16.146 --> 00:42:18.436 A:middle
at your complication to see
what game is about to start.

00:42:18.436 --> 00:42:21.166 A:middle
You would only be able to see
what game has already started.

00:42:21.536 --> 00:42:23.866 A:middle
So we actually want to do
the same thing Paul did

00:42:23.866 --> 00:42:25.376 A:middle
with the calendar and move all

00:42:25.376 --> 00:42:27.116 A:middle
of these entries
farther forward.

00:42:27.116 --> 00:42:30.356 A:middle
We will have each
entry start at the time

00:42:30.356 --> 00:42:32.106 A:middle
when the previous match ended.

00:42:32.546 --> 00:42:35.146 A:middle
So for that, we have to decide
how long a soccer match is,

00:42:35.146 --> 00:42:37.496 A:middle
so I have decided that
they are about 90 minutes.

00:42:37.626 --> 00:42:41.016 A:middle
So I'm going to use a constant
that we could change later

00:42:41.016 --> 00:42:42.846 A:middle
if we discover we are wrong.

00:42:42.846 --> 00:42:45.836 A:middle
So the match duration we
will say is 90 minutes.

00:42:46.496 --> 00:42:53.256 A:middle
And then we can write a method
timelineEntryDateForMatch

00:42:53.526 --> 00:42:56.366 A:middle
that goes and figures
out for any given match

00:42:56.696 --> 00:42:58.796 A:middle
where that should
appear on the timeline.

00:42:58.956 --> 00:43:04.646 A:middle
So what we will do is we
will say, okay, match,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:58.956 --> 00:43:04.646 A:middle
So what we will do is we
will say, okay, match,

00:43:04.836 --> 00:43:06.146 A:middle
what match is before you?

00:43:06.636 --> 00:43:09.006 A:middle
And if there is one, then
we are going to use the end

00:43:09.006 --> 00:43:12.076 A:middle
of that match as the
timeline date for this match.

00:43:12.646 --> 00:43:18.876 A:middle
So if we have one, we will
return its date incremented

00:43:19.306 --> 00:43:21.156 A:middle
by the duration of a match.

00:43:21.366 --> 00:43:28.346 A:middle
And if we don't, that means it's
the first match in the schedule

00:43:28.346 --> 00:43:30.256 A:middle
and I have pretty arbitrarily
decided that I'm going

00:43:30.256 --> 00:43:33.316 A:middle
to start displaying the first
match six hours before it starts

00:43:33.386 --> 00:43:36.586 A:middle
but you could obviously do
something different here

00:43:36.586 --> 00:43:38.656 A:middle
depending on your use case.

00:43:38.656 --> 00:43:40.636 A:middle
So those are the two
methods that are kind

00:43:40.636 --> 00:43:41.966 A:middle
of doing the meat of the work.

00:43:42.276 --> 00:43:45.746 A:middle
Now, we just need to go
through and implement all

00:43:45.746 --> 00:43:47.956 A:middle
of the different protocol
methods that Paul described.

00:43:48.366 --> 00:43:49.906 A:middle
So let's start from
the beginning.

00:43:49.906 --> 00:43:51.716 A:middle
So here we have the
timeline configuration

00:43:51.716 --> 00:43:54.286 A:middle
and the first method is
getSupportedTimeTravel

00:43:54.286 --> 00:43:55.706 A:middle
DirectionsForComplication.

00:43:56.286 --> 00:44:00.066 A:middle
The default Xcode
template here is saying


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:56.286 --> 00:44:00.066 A:middle
The default Xcode
template here is saying

00:44:00.066 --> 00:44:02.366 A:middle
that your timeline extends
both forward and backwards

00:44:02.366 --> 00:44:03.656 A:middle
and that's what we
want in this case

00:44:03.736 --> 00:44:05.046 A:middle
so we will leave that one alone.

00:44:05.906 --> 00:44:07.776 A:middle
The next thing we
have to think about is

00:44:07.776 --> 00:44:09.216 A:middle
when our timeline starts.

00:44:09.596 --> 00:44:12.576 A:middle
So because we have written
these helper methods we can do

00:44:12.576 --> 00:44:13.476 A:middle
that pretty easily.

00:44:13.756 --> 00:44:15.976 A:middle
I will get rid of
the handler with nil

00:44:16.246 --> 00:44:18.356 A:middle
and instead we will
figure out a start date

00:44:18.356 --> 00:44:22.036 A:middle
which will be the entry date
of the first soccer match.

00:44:23.276 --> 00:44:26.306 A:middle
And let's not forgot
to call the handler.

00:44:26.306 --> 00:44:29.476 A:middle
And then the next thing we need

00:44:29.476 --> 00:44:31.046 A:middle
to do is figure out
the end date.

00:44:32.016 --> 00:44:34.796 A:middle
So the end date of the
timeline should probably be

00:44:34.916 --> 00:44:36.696 A:middle
after the last match is over.

00:44:37.216 --> 00:44:40.096 A:middle
So we will get the last match.

00:44:40.816 --> 00:44:44.416 A:middle
We will get its date, and we
will add the match duration

00:44:44.416 --> 00:44:46.956 A:middle
to that date and that's going
to be our timeline end date.

00:44:46.956 --> 00:44:50.886 A:middle
We will call that
with a handler.

00:44:50.976 --> 00:44:53.186 A:middle
This next method is something
we haven't actually gone

00:44:53.236 --> 00:44:55.576 A:middle
into at all in the session,
but it's an important method

00:44:55.886 --> 00:44:58.226 A:middle
if your data is in
any way sensitive.

00:44:58.596 --> 00:45:01.416 A:middle
So when your user's Watch
is locked, you don't want


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:58.596 --> 00:45:01.416 A:middle
So when your user's Watch
is locked, you don't want

00:45:01.416 --> 00:45:03.056 A:middle
to be showing sensitive
data on the screen

00:45:03.056 --> 00:45:04.976 A:middle
because that's means they
have taken it off their wrist

00:45:05.166 --> 00:45:06.496 A:middle
and somebody else
could have found it.

00:45:06.556 --> 00:45:09.496 A:middle
If you are showing sensitive
data in your complication,

00:45:09.496 --> 00:45:13.236 A:middle
you can use this method to
tell us to be sure to not show

00:45:13.236 --> 00:45:14.736 A:middle
that data when the
device is locked.

00:45:15.076 --> 00:45:18.576 A:middle
Now, the schedule of a fictional
soccer tournament is not

00:45:18.576 --> 00:45:21.376 A:middle
particularly sensitive so I
will leave this at default value

00:45:21.376 --> 00:45:25.786 A:middle
of go ahead and show this on
the lock screen no problem.

00:45:26.076 --> 00:45:31.996 A:middle
So next we get to the
timeline population.

00:45:32.636 --> 00:45:34.946 A:middle
These are the really
important ones.

00:45:34.946 --> 00:45:36.316 A:middle
We need to give the
current entry.

00:45:36.316 --> 00:45:38.756 A:middle
We need to tell us -- we
need to tell the clock how

00:45:38.756 --> 00:45:41.616 A:middle
to extend the timeline backwards
and we need to tell it how

00:45:41.616 --> 00:45:43.016 A:middle
to extend the timeline forwards.

00:45:43.386 --> 00:45:44.806 A:middle
I will start with forwards.

00:45:45.376 --> 00:45:46.836 A:middle
So let's skip down to here.

00:45:47.456 --> 00:45:51.686 A:middle
And what we want to do
is construct an array

00:45:52.006 --> 00:45:55.676 A:middle
of entries starting at the date
we were given and going forward

00:45:55.676 --> 00:45:58.336 A:middle
into the future from there.

00:45:58.546 --> 00:46:00.916 A:middle
My strategy is going
to be to make an array,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:58.546 --> 00:46:00.916 A:middle
My strategy is going
to be to make an array,

00:46:01.436 --> 00:46:04.396 A:middle
and arrange to call the
handler when we are done.

00:46:04.976 --> 00:46:12.436 A:middle
And then we want to iterate
through all of the matches

00:46:13.076 --> 00:46:15.686 A:middle
until we get one that
should start after the date

00:46:15.686 --> 00:46:17.656 A:middle
at which point we are going to
start creating the templates

00:46:17.656 --> 00:46:21.656 A:middle
for that and sticking
them in this array.

00:46:22.446 --> 00:46:27.016 A:middle
So I will start with the
first match in my tournament.

00:46:27.016 --> 00:46:29.446 A:middle
And I have made this
an optional,

00:46:29.686 --> 00:46:31.806 A:middle
not because the first
match might return nil,

00:46:32.026 --> 00:46:34.396 A:middle
but because we are
going to change this

00:46:34.396 --> 00:46:36.816 A:middle
to represent each subsequent
match and eventually we will run

00:46:36.816 --> 00:46:39.096 A:middle
out of matches it will
eventually take on the value

00:46:39.096 --> 00:46:43.476 A:middle
of nil at which point
we will know to stop.

00:46:43.686 --> 00:46:49.236 A:middle
So next we are going to -- oops!

00:46:49.466 --> 00:46:54.126 A:middle
While there is a match here,
we are going to get the date

00:46:54.126 --> 00:46:56.586 A:middle
that we should display
that match at.

00:46:56.776 --> 00:46:59.226 A:middle
That's the timeline entry date
for this particular match.

00:46:59.766 --> 00:47:04.856 A:middle
And now we are going to compare
that to the date we were given,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:59.766 --> 00:47:04.856 A:middle
And now we are going to compare
that to the date we were given,

00:47:04.856 --> 00:47:06.816 A:middle
which is the date after
which we are supposed

00:47:06.816 --> 00:47:08.326 A:middle
to be populating
timeline entries.

00:47:09.536 --> 00:47:12.136 A:middle
If they are order
descending we have gotten

00:47:12.136 --> 00:47:14.276 A:middle
into the right section of
matches and now we want

00:47:14.276 --> 00:47:16.746 A:middle
to start giving back
timeline entries for these.

00:47:17.116 --> 00:47:19.006 A:middle
So we are going to
populate a timeline entry.

00:47:19.376 --> 00:47:20.386 A:middle
It's straightforward.

00:47:20.386 --> 00:47:22.096 A:middle
We make a template
for the match.

00:47:23.176 --> 00:47:24.986 A:middle
That was our other
helper method.

00:47:25.996 --> 00:47:28.556 A:middle
We create an entry
from the entry date

00:47:28.556 --> 00:47:30.686 A:middle
that we computed
and that template.

00:47:31.216 --> 00:47:38.246 A:middle
We append it to our array,
now we need to be careful not

00:47:38.246 --> 00:47:39.476 A:middle
to make too many of these.

00:47:39.526 --> 00:47:40.676 A:middle
We have been past a limit.

00:47:41.716 --> 00:47:44.466 A:middle
We want to adhere to the limit.

00:47:44.466 --> 00:47:47.006 A:middle
So we will just check now
that we have added something

00:47:47.006 --> 00:47:50.636 A:middle
to the array, did the count
of the array reach the limit,

00:47:50.636 --> 00:47:53.456 A:middle
and if so, we will stop.

00:47:53.456 --> 00:47:56.386 A:middle
And finally, to make the
loop work, we need to go

00:47:56.386 --> 00:47:58.806 A:middle
and grab the next
match after the match

00:47:58.806 --> 00:47:59.886 A:middle
that we just dealt with.

00:47:59.886 --> 00:48:05.886 A:middle
So that's going to populate the
next N entries in the timeline


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:59.886 --> 00:48:05.886 A:middle
So that's going to populate the
next N entries in the timeline

00:48:05.966 --> 00:48:07.056 A:middle
after the date that
we were given,

00:48:07.226 --> 00:48:09.426 A:middle
and we can do something
really similar

00:48:09.736 --> 00:48:12.576 A:middle
to populate the earlier entries.

00:48:12.686 --> 00:48:14.666 A:middle
So I'm just going to copy
that code that we just wrote.

00:48:14.666 --> 00:48:17.596 A:middle
And here I'm going to move

00:48:17.596 --> 00:48:21.526 A:middle
up to the getTimelineEntries
ForComplication before

00:48:21.526 --> 00:48:22.406 A:middle
date method.

00:48:23.186 --> 00:48:25.606 A:middle
Paste it. And we need
to make three changes.

00:48:26.116 --> 00:48:28.136 A:middle
Here we are going to do the
exact same thing except we are

00:48:28.136 --> 00:48:31.486 A:middle
going to start at the last
entry and move forward

00:48:31.486 --> 00:48:34.926 A:middle
or the last match, rather, and
move back towards the first.

00:48:35.266 --> 00:48:39.536 A:middle
So we will start with the
last match and then down here

00:48:39.536 --> 00:48:42.476 A:middle
where the loop happens
we grab the previous one.

00:48:42.976 --> 00:48:47.826 A:middle
Previous. And finally we only
want to start using these

00:48:47.826 --> 00:48:50.236 A:middle
when they get before
the date we were passed.

00:48:50.236 --> 00:48:55.446 A:middle
So we need to switch from order
ascending to order descending.

00:48:56.276 --> 00:48:58.396 A:middle
That's our extension methods.

00:48:58.596 --> 00:49:03.506 A:middle
The last thing we need to write
is the getCurrentTimelineEntry


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:58.596 --> 00:49:03.506 A:middle
The last thing we need to write
is the getCurrentTimelineEntry

00:49:03.506 --> 00:49:07.556 A:middle
method and we can do something
tricky and take advantage

00:49:07.556 --> 00:49:08.956 A:middle
of the method we just wrote

00:49:09.156 --> 00:49:12.326 A:middle
because getting the current
entry is basically getting the

00:49:12.326 --> 00:49:15.266 A:middle
entry before a particular
date, namely now.

00:49:16.526 --> 00:49:18.016 A:middle
That's the one we want
to show currently.

00:49:18.386 --> 00:49:21.546 A:middle
So what I'm going to do is
call the GetTimelineEntries

00:49:21.546 --> 00:49:23.366 A:middle
ForComplication before
date method

00:49:23.366 --> 00:49:24.766 A:middle
that we just finished writing.

00:49:25.286 --> 00:49:29.816 A:middle
I'm going to pass
now as the date.

00:49:30.356 --> 00:49:34.436 A:middle
I'm going to pass a limit of one

00:49:34.436 --> 00:49:35.976 A:middle
because we only need
one entry here.

00:49:35.976 --> 00:49:41.316 A:middle
And then when I get my
handler invoked, I'm just going

00:49:41.316 --> 00:49:44.386 A:middle
to grab the first entry in
that array and pass it back

00:49:44.586 --> 00:49:47.236 A:middle
to the handler for the
getCurrentTimelineEntry method.

00:49:47.346 --> 00:49:51.986 A:middle
So we can go ahead and run
this, and what I'm going

00:49:51.986 --> 00:49:54.966 A:middle
to do is I'm going to run
it and then switch quickly

00:49:54.966 --> 00:49:57.296 A:middle
over to the simulator, which
as you can see is still running

00:49:57.296 --> 00:50:02.026 A:middle
here and still showing us
the placeholder template we


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:57.296 --> 00:50:02.026 A:middle
here and still showing us
the placeholder template we

00:50:02.026 --> 00:50:02.926 A:middle
populated earlier.

00:50:03.346 --> 00:50:07.256 A:middle
So as soon as I run this, it
will invalidate the timeline

00:50:07.776 --> 00:50:11.166 A:middle
on the simulator, at which point
it's going to go requery all

00:50:11.166 --> 00:50:13.376 A:middle
of these methods again and now
that we have implemented them,

00:50:13.376 --> 00:50:14.756 A:middle
we will actually get values.

00:50:14.826 --> 00:50:15.486 A:middle
So here we go.

00:50:15.486 --> 00:50:16.886 A:middle
Run and then swap over.

00:50:16.886 --> 00:50:22.776 A:middle
And then we should see
our stuff populate.

00:50:23.286 --> 00:50:24.996 A:middle
So there we have actual data.

00:50:24.996 --> 00:50:25.816 A:middle
This is showing us -

00:50:26.516 --> 00:50:31.546 A:middle
[ Applause ]

00:50:32.046 --> 00:50:34.646 A:middle
So this is showing us the
game that started at 11:00,

00:50:34.646 --> 00:50:37.146 A:middle
which is the right behavior if
you remember, because we wanted

00:50:37.146 --> 00:50:39.436 A:middle
to see the game that
started at 11:00

00:50:39.436 --> 00:50:41.136 A:middle
until 12:30, 90 minutes later.

00:50:41.506 --> 00:50:46.216 A:middle
If we Time Travel
forwards and reach 12:30,

00:50:46.216 --> 00:50:48.926 A:middle
we should start seeing this
change to the next game.

00:50:49.276 --> 00:50:52.316 A:middle
So Time Traveling is working if
we get all the way up to 3:00,

00:50:52.316 --> 00:50:54.056 A:middle
we should start seeing
the one after that.

00:50:54.056 --> 00:50:54.976 A:middle
Oops! I went way too far.

00:50:54.976 --> 00:50:58.296 A:middle
Our Time Travel is working.

00:50:58.476 --> 00:51:00.686 A:middle
All we had to do
was basically fill


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:58.476 --> 00:51:00.686 A:middle
All we had to do
was basically fill

00:51:00.686 --> 00:51:02.806 A:middle
out the three most
important methods

00:51:03.026 --> 00:51:04.526 A:middle
and we have a functional
complication.

00:51:05.036 --> 00:51:08.416 A:middle
So I will pass it back over
to Paul who will tell us more

00:51:08.416 --> 00:51:11.396 A:middle
about how to arrange for
your complication to update

00:51:11.586 --> 00:51:13.716 A:middle
as information changes
in the world.

00:51:14.516 --> 00:51:22.566 A:middle
[ Applause ]

00:51:23.066 --> 00:51:23.456 A:middle
&gt;&gt; PAUL SALZMAN: Thanks Eliza.

00:51:26.956 --> 00:51:30.226 A:middle
So now that we are up and
running with our complication.

00:51:30.226 --> 00:51:31.736 A:middle
We want to make sure we are
always showing something

00:51:31.736 --> 00:51:33.856 A:middle
that is accurate to
the world around us.

00:51:34.396 --> 00:51:37.916 A:middle
So in watchOS 2 there is a lot
of ways you can get contents

00:51:37.976 --> 00:51:40.176 A:middle
from the surrounding world
into your Watch extension.

00:51:41.046 --> 00:51:43.226 A:middle
You can use the new Watch
Connectivity APIs to talk

00:51:43.226 --> 00:51:46.596 A:middle
to your companion iOS app
and get data onto your Watch.

00:51:46.826 --> 00:51:50.266 A:middle
Or use NSURLSession directly
to talk to your web services

00:51:50.266 --> 00:51:51.456 A:middle
and bring content
onto the Watch.

00:51:53.006 --> 00:51:55.676 A:middle
So let's say we have our
complication timeline built up

00:51:55.936 --> 00:51:57.606 A:middle
and we go out and talk
to our web services

00:51:57.606 --> 00:52:00.306 A:middle
and get a new piece of data.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:57.606 --> 00:52:00.306 A:middle
and get a new piece of data.

00:52:00.306 --> 00:52:02.446 A:middle
If that data has invalidated
our content, we will need

00:52:02.446 --> 00:52:05.016 A:middle
to tell the clock face we
want to reload our timeline.

00:52:05.796 --> 00:52:08.196 A:middle
So within our extension,
we can get access

00:52:08.256 --> 00:52:10.276 A:middle
to the CLKComplicationsServer
object.

00:52:11.246 --> 00:52:13.236 A:middle
That object is our
interface into the clock face.

00:52:14.016 --> 00:52:15.476 A:middle
We can make a request
to the clock face

00:52:15.476 --> 00:52:18.276 A:middle
to say please reload my data
at which point we are going

00:52:18.276 --> 00:52:20.036 A:middle
to throw away all of
your existing content

00:52:20.036 --> 00:52:22.826 A:middle
and start our communication
channels over again by finding

00:52:22.826 --> 00:52:25.156 A:middle
out your current timeline and
flushing things out from there.

00:52:26.046 --> 00:52:26.856 A:middle
You might already notice

00:52:26.856 --> 00:52:30.166 A:middle
that this is a pretty
destructive action.

00:52:30.256 --> 00:52:32.466 A:middle
If you had a stocks
complication,

00:52:32.466 --> 00:52:34.696 A:middle
where all of your previous
data is still valid.

00:52:35.606 --> 00:52:37.086 A:middle
The clock face isn't
querying you right now.

00:52:37.376 --> 00:52:38.886 A:middle
It's actually your
responsibility

00:52:38.886 --> 00:52:40.906 A:middle
to let us know we
either need to invalidate

00:52:40.956 --> 00:52:42.916 A:middle
or possibly extend your content.

00:52:43.546 --> 00:52:44.766 A:middle
So instead of getting rid

00:52:44.766 --> 00:52:46.806 A:middle
of this content you can
make a request to extend.

00:52:47.456 --> 00:52:51.796 A:middle
At which point instead of
asking you to reload everything,

00:52:51.796 --> 00:52:53.876 A:middle
we are going to ask you
to append data at the end

00:52:53.876 --> 00:52:56.876 A:middle
of the most recent content
we have available from you.

00:52:57.616 --> 00:53:02.746 A:middle
So how does this
look in your code?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:57.616 --> 00:53:02.746 A:middle
So how does this
look in your code?

00:53:03.156 --> 00:53:04.826 A:middle
You can get access
to the complication,

00:53:04.906 --> 00:53:07.556 A:middle
the CLKComplicationServer
shared instance.

00:53:08.576 --> 00:53:10.746 A:middle
On the shared instance, you
can actually query for all

00:53:10.746 --> 00:53:11.956 A:middle
of the active complications.

00:53:12.436 --> 00:53:14.906 A:middle
An active complication is
actually visible right now

00:53:14.906 --> 00:53:17.006 A:middle
on your watch face if
you were to wrist up.

00:53:17.786 --> 00:53:19.966 A:middle
And given a complication, you
can actually make a request

00:53:19.966 --> 00:53:22.466 A:middle
to the server to either
extend the timeline

00:53:22.466 --> 00:53:26.336 A:middle
or alternatively
reload the timeline.

00:53:26.606 --> 00:53:27.116 A:middle
So that's great.

00:53:27.116 --> 00:53:29.876 A:middle
We know it's our responsibility
to inform the clock face we need

00:53:29.916 --> 00:53:32.026 A:middle
to update, but when do we
actually have an opportunity

00:53:32.026 --> 00:53:32.626 A:middle
to do this?

00:53:33.916 --> 00:53:36.716 A:middle
Well, basically any time you
are exception is running you can

00:53:36.716 --> 00:53:38.756 A:middle
talk over the
CLKComplicationServer

00:53:38.756 --> 00:53:39.776 A:middle
to the clock face.

00:53:40.536 --> 00:53:42.356 A:middle
This happens in a
couple of instances,

00:53:42.356 --> 00:53:44.216 A:middle
like when your watch
application is foremost.

00:53:44.216 --> 00:53:47.056 A:middle
But you have some
opportunities to run

00:53:47.056 --> 00:53:51.006 A:middle
in the background via a
locally requested wake or even

00:53:51.006 --> 00:53:54.046 A:middle
from your iOS companion
application using some new Watch

00:53:54.046 --> 00:53:56.796 A:middle
Connectivity APIs you can
actually wake the extension

00:53:56.796 --> 00:53:59.406 A:middle
from the phone so it can receive
the data you have sent over.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:54:00.956 --> 00:54:03.106 A:middle
But because the two last
calls allow you to run

00:54:03.106 --> 00:54:05.526 A:middle
in the background we
have to budget them.

00:54:05.526 --> 00:54:07.276 A:middle
If you do a lot of
expensive work

00:54:07.276 --> 00:54:09.346 A:middle
in the background calls
you can exhaust your budget

00:54:09.946 --> 00:54:12.066 A:middle
and until your budget is
replenished you may not have a

00:54:12.066 --> 00:54:13.686 A:middle
chance to update
your complication

00:54:13.686 --> 00:54:16.446 A:middle
until later in the day.

00:54:16.696 --> 00:54:20.016 A:middle
So learn more about the Watch
Connectivity APIs please go

00:54:20.016 --> 00:54:21.856 A:middle
to the Introducing Watch
Connectivity session.

00:54:22.276 --> 00:54:24.506 A:middle
There is also cool push
functionality we have added

00:54:24.506 --> 00:54:27.046 A:middle
in this release to
support complication data.

00:54:27.866 --> 00:54:29.496 A:middle
Let's talk a bit more

00:54:29.496 --> 00:54:32.256 A:middle
about locally scheduling
background wakes in order

00:54:32.256 --> 00:54:35.196 A:middle
to get your complication data
up to date via one more call

00:54:35.196 --> 00:54:36.976 A:middle
on the complicationDataSource
protocol.

00:54:36.976 --> 00:54:40.136 A:middle
All you are going to supply to
us is one date via the handler.

00:54:40.206 --> 00:54:42.716 A:middle
And we are going to make
this call across all

00:54:42.716 --> 00:54:44.546 A:middle
of your complications,
not by complication.

00:54:45.916 --> 00:54:47.586 A:middle
When we receive this date,
we are going to take this

00:54:47.586 --> 00:54:50.146 A:middle
as a hint, and when
budgetary constraints

00:54:50.146 --> 00:54:51.916 A:middle
or system conditions are
good we'll launch you

00:54:51.916 --> 00:54:52.586 A:middle
in the background.

00:54:53.256 --> 00:54:55.456 A:middle
At this point your
data delegates

00:54:55.456 --> 00:54:57.586 A:middle
from Watch Connectivity
and NSURL can come in

00:54:57.586 --> 00:55:00.566 A:middle
and it's your responsibility to
verify if anything has changed


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:54:57.586 --> 00:55:00.566 A:middle
and it's your responsibility to
verify if anything has changed

00:55:00.566 --> 00:55:03.336 A:middle
and make any requests you
need to make to the clock face

00:55:03.336 --> 00:55:04.156 A:middle
to update your content.

00:55:04.716 --> 00:55:08.526 A:middle
At this point that's wrapping
up our session on complications.

00:55:09.356 --> 00:55:12.926 A:middle
We hope you have learned that
to be comfortable with building

00:55:13.076 --> 00:55:15.206 A:middle
up a timeline and
supplying us with templates

00:55:15.206 --> 00:55:18.326 A:middle
and the appropriate providers
and to take advantage of all

00:55:18.326 --> 00:55:20.696 A:middle
of the hard work that went into
the watchOS to actually form

00:55:20.696 --> 00:55:22.756 A:middle
and fit your content in
these text providers,

00:55:24.296 --> 00:55:26.336 A:middle
to be comfortable refreshing
your data as the world

00:55:26.336 --> 00:55:30.276 A:middle
around changes you, you will
get more opportunity to run

00:55:30.276 --> 00:55:32.276 A:middle
if you are a good
citizen and do less work

00:55:32.276 --> 00:55:33.196 A:middle
in your background refreshes.

00:55:34.416 --> 00:55:35.596 A:middle
For more information
please refer

00:55:35.596 --> 00:55:37.156 A:middle
to your documentation
and sample code.

00:55:37.606 --> 00:55:40.076 A:middle
We have good technical support
and fantastic evangelists.

00:55:40.076 --> 00:55:43.086 A:middle
There are great sessions
to dig further

00:55:43.086 --> 00:55:44.536 A:middle
into WatchKit, thank you!

00:55:46.516 --> 00:56:01.570 A:middle
[ Applause ]

