WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:25.516 --> 00:00:30.566 A:middle
[Applause]

00:00:31.066 --> 00:00:32.456 A:middle
&gt;&gt; STEFAN HAFENEGER:
Welcome to session 211,

00:00:32.665 --> 00:00:33.826 A:middle
Multitasking Essentials

00:00:33.826 --> 00:00:36.036 A:middle
for Media-Based Apps
on iPad and iOS 9.

00:00:37.056 --> 00:00:40.076 A:middle
My name is Stefan Hafeneger and
today Jonathan and I will talk

00:00:40.076 --> 00:00:41.516 A:middle
about adopting Picture
in Picture

00:00:41.836 --> 00:00:43.356 A:middle
and mastering shared resources.

00:00:43.916 --> 00:00:47.616 A:middle
If you have already or plan
to integrate a media-based app

00:00:47.616 --> 00:00:50.316 A:middle
on iPad and iOS 9 this is
the right session for you.

00:00:50.946 --> 00:00:54.176 A:middle
This is the second in a
series of three sessions

00:00:54.176 --> 00:00:56.506 A:middle
about multitasking
on iPad this year.

00:00:58.396 --> 00:00:59.996 A:middle
By now you should
be familiar with all

00:00:59.996 --> 00:01:02.796 A:middle
of the iPad multitasking
features we have introduced


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:59.996 --> 00:01:02.796 A:middle
of the iPad multitasking
features we have introduced

00:01:02.796 --> 00:01:03.156 A:middle
this week.

00:01:04.166 --> 00:01:06.026 A:middle
I want to remind you
about the concept

00:01:06.026 --> 00:01:07.886 A:middle
about primary versus
secondary app.

00:01:08.136 --> 00:01:12.166 A:middle
The primary app is
always the one

00:01:12.166 --> 00:01:15.366 A:middle
on the left unless the device
is set up right to left

00:01:15.686 --> 00:01:16.696 A:middle
which means it's the opposite.

00:01:17.376 --> 00:01:20.326 A:middle
In the first session we
showed you how to get started

00:01:20.326 --> 00:01:22.376 A:middle
with multitasking
on iPad in iOS 9.

00:01:23.096 --> 00:01:27.206 A:middle
In this session, I will show you
how to adopt Picture in Picture.

00:01:27.876 --> 00:01:32.616 A:middle
When you are playing
video on an application,

00:01:32.616 --> 00:01:36.046 A:middle
in iOS 8 when you are
playing video, and you switch

00:01:36.046 --> 00:01:38.056 A:middle
to an application the
video stops playing.

00:01:38.716 --> 00:01:43.376 A:middle
With Picture in Picture in iOS 9
the video automatically animates

00:01:43.376 --> 00:01:45.876 A:middle
into a floating window
allowing you to use other apps

00:01:45.876 --> 00:01:47.966 A:middle
on the iPad while the
video keeps playing.

00:01:48.696 --> 00:01:53.056 A:middle
I'm going to say Picture in
Picture a lot in this section

00:01:53.326 --> 00:01:56.106 A:middle
so from now on I will
refer to is as PiP.

00:01:58.336 --> 00:02:02.806 A:middle
PiP is supported on all of
our latest iPads, iPad Air 2,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.336 --> 00:02:02.806 A:middle
PiP is supported on all of
our latest iPads, iPad Air 2,

00:02:02.946 --> 00:02:11.156 A:middle
iPad Air, iPad mini 2 and 3.

00:02:11.376 --> 00:02:13.416 A:middle
Now, you might be wondering
should my app adopt Picture

00:02:13.416 --> 00:02:13.836 A:middle
in Picture.

00:02:14.556 --> 00:02:19.866 A:middle
If your application provides
an immersive video playing

00:02:19.866 --> 00:02:21.266 A:middle
experience, then absolutely.

00:02:21.956 --> 00:02:26.876 A:middle
If your application provides
a kid's viewing experience

00:02:26.876 --> 00:02:28.486 A:middle
like a game, then probably not.

00:02:28.486 --> 00:02:32.316 A:middle
If you think your viewer was

00:02:32.316 --> 00:02:33.886 A:middle
like to keep videos
playing while playing

00:02:33.886 --> 00:02:35.176 A:middle
with other applications.

00:02:35.366 --> 00:02:43.226 A:middle
Let's take a look at the
video player APIs in iOS 8.

00:02:44.356 --> 00:02:45.796 A:middle
The media player
framework has been

00:02:45.796 --> 00:02:47.186 A:middle
around since the first iOS SDK.

00:02:48.846 --> 00:02:50.356 A:middle
Last year we delivered AVKit

00:02:50.356 --> 00:02:52.646 A:middle
as a new high-level media
framework, replacing parts

00:02:52.646 --> 00:02:53.686 A:middle
of the media framework.

00:02:55.416 --> 00:02:57.236 A:middle
AVFoundation is available
for clients that want

00:02:57.236 --> 00:03:01.896 A:middle
to create their own video
player with user interfaces.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:57.236 --> 00:03:01.896 A:middle
to create their own video
player with user interfaces.

00:03:02.026 --> 00:03:03.306 A:middle
[inaudible] using
their technologies.

00:03:04.006 --> 00:03:07.136 A:middle
Let's talk about the
media player for a moment.

00:03:09.416 --> 00:03:12.546 A:middle
In iOS 9 we are deprecating
MP movie player controller

00:03:12.546 --> 00:03:13.956 A:middle
and MP movie player
view controller.

00:03:15.516 --> 00:03:18.666 A:middle
In iOS 8 we are providing
AVPlayerViewController

00:03:18.666 --> 00:03:22.386 A:middle
as a replacement
for both classes.

00:03:22.516 --> 00:03:25.056 A:middle
And last year, in the Mastering
Modern Media Playback session we

00:03:25.056 --> 00:03:27.566 A:middle
showed you how easy it is
to adopt AVKit instead.

00:03:28.186 --> 00:03:29.916 A:middle
In this session we
are focusing on AVKit,

00:03:29.916 --> 00:03:31.236 A:middle
AVFoundation and WebKit.

00:03:32.176 --> 00:03:35.436 A:middle
All three media frameworks
rely on AVPlayerLayer

00:03:35.436 --> 00:03:36.506 A:middle
to display video content.

00:03:37.146 --> 00:03:39.446 A:middle
Let me show you how PiP works.

00:03:40.016 --> 00:03:43.626 A:middle
We start with an AVPlayerLayer
in your application.

00:03:44.236 --> 00:03:46.626 A:middle
In order for the
video to keep playing

00:03:46.666 --> 00:03:49.096 A:middle
when the application transitions
to the background we need

00:03:49.096 --> 00:03:50.786 A:middle
to reroute the video frames
to a different process.

00:03:50.786 --> 00:03:55.526 A:middle
For that, the system
adds a new layer

00:03:55.526 --> 00:03:57.086 A:middle
that can host your
video content.

00:03:57.766 --> 00:04:03.616 A:middle
When PiP is started, a PiP
window is created in this layer


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:57.766 --> 00:04:03.616 A:middle
When PiP is started, a PiP
window is created in this layer

00:04:04.446 --> 00:04:05.896 A:middle
and positioned over
an AVPlayerLayer.

00:04:06.686 --> 00:04:09.826 A:middle
Now, the video frames
can be rerouted.

00:04:09.826 --> 00:04:13.376 A:middle
There is a seamless transition

00:04:13.376 --> 00:04:14.796 A:middle
and the video will
just keep playing.

00:04:16.435 --> 00:04:18.426 A:middle
To be clear, we are not
touching the AVPlayerLayer

00:04:18.426 --> 00:04:19.276 A:middle
on your application.

00:04:19.716 --> 00:04:23.736 A:middle
We just stopped delivering
video frames.

00:04:23.886 --> 00:04:25.256 A:middle
Now, assistant can position

00:04:25.256 --> 00:04:26.946 A:middle
and size the PiP
window however needed,

00:04:27.306 --> 00:04:30.546 A:middle
and the video currently
keeps playing even

00:04:31.756 --> 00:04:33.886 A:middle
when your application
transitions to the background.

00:04:34.606 --> 00:04:39.966 A:middle
So which of our modern
video players support PiP?

00:04:40.496 --> 00:04:45.896 A:middle
I'm happy to announce
all of them.

00:04:45.896 --> 00:04:48.886 A:middle
In the first part of the session
I will show you how to adopt PiP

00:04:48.886 --> 00:04:51.646 A:middle
in your applications using
all three media frameworks

00:04:52.656 --> 00:04:57.996 A:middle
and we will start with AVKit.

00:04:57.996 --> 00:04:59.556 A:middle
AVKit's main API
for video playback

00:04:59.556 --> 00:05:00.676 A:middle
is AVPlayerViewController.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.556 --> 00:05:00.676 A:middle
is AVPlayerViewController.

00:05:01.686 --> 00:05:03.186 A:middle
A modern AV controller subclass

00:05:03.186 --> 00:05:05.536 A:middle
that provides standard
controls and behaviors.

00:05:06.296 --> 00:05:10.056 A:middle
In iOS 9 AV view controller
smarts Picture in Picture

00:05:10.196 --> 00:05:12.236 A:middle
and it's a button
in the lower bar.

00:05:12.586 --> 00:05:16.976 A:middle
When the user taps this button
the video automatically animates

00:05:16.976 --> 00:05:17.706 A:middle
into the PiP window.

00:05:18.356 --> 00:05:23.146 A:middle
My colleague Felix will show you
now what exactly you have to do

00:05:23.146 --> 00:05:24.806 A:middle
in your AVPlayerController
application

00:05:25.046 --> 00:05:27.226 A:middle
for the PiP button to show up.

00:05:29.516 --> 00:05:34.806 A:middle
[Applause]

00:05:35.306 --> 00:05:36.106 A:middle
&gt;&gt; FELIX HEIDRICH:
Hello, everyone,

00:05:36.296 --> 00:05:39.246 A:middle
I'm excited to show you the
new Picture in Picture support

00:05:39.386 --> 00:05:40.716 A:middle
of AVPlayerViewController.

00:05:41.406 --> 00:05:44.656 A:middle
For this I have a demo
application running

00:05:44.656 --> 00:05:46.796 A:middle
in the simulator that
shows a collection

00:05:46.796 --> 00:05:49.016 A:middle
of videos using a
collection view controller.

00:05:49.746 --> 00:05:51.166 A:middle
I can tap on one of the videos

00:05:51.296 --> 00:05:54.026 A:middle
to reveal detailed
information about it.

00:05:54.246 --> 00:05:57.776 A:middle
I can also tap the big
play button to bring

00:05:57.776 --> 00:06:00.526 A:middle
up AVPlayerViewController
and start video playback


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:57.776 --> 00:06:00.526 A:middle
up AVPlayerViewController
and start video playback

00:06:00.746 --> 00:06:05.106 A:middle
in full screen, but as you can
see, the user interface does not

00:06:05.106 --> 00:06:07.536 A:middle
yet contain a PiP button
in the lower right corner.

00:06:08.276 --> 00:06:11.056 A:middle
For the button to appear, two
simple steps are required.

00:06:11.236 --> 00:06:12.926 A:middle
Let me show them
to you in Xcode.

00:06:14.406 --> 00:06:17.016 A:middle
The first step is to set
the apps background modes.

00:06:17.736 --> 00:06:20.246 A:middle
For this, I switch to
the project settings,

00:06:20.526 --> 00:06:23.436 A:middle
select the targets, and go
to the capabilities tab.

00:06:24.496 --> 00:06:30.766 A:middle
Here under background notes
need to be enabled and the audio

00:06:30.766 --> 00:06:33.036 A:middle
and air play check box
needs to be selected.

00:06:34.316 --> 00:06:38.946 A:middle
The second step is to set
the app's audio category.

00:06:39.156 --> 00:06:41.216 A:middle
For this I go to
the app delegate

00:06:41.466 --> 00:06:43.656 A:middle
and first import AVFoundation.

00:06:45.056 --> 00:06:48.186 A:middle
Next, an application did
finish launching this option.

00:06:48.926 --> 00:06:51.126 A:middle
I can set the audio
session category

00:06:53.046 --> 00:06:56.656 A:middle
by asking AV audio session
for its shared instance

00:06:57.226 --> 00:06:58.816 A:middle
and then setting the category

00:06:58.816 --> 00:07:00.806 A:middle
to AV audio session
category playback.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:58.816 --> 00:07:00.806 A:middle
to AV audio session
category playback.

00:07:01.886 --> 00:07:06.106 A:middle
With this code in place,
let's launch the demo again.

00:07:08.016 --> 00:07:13.846 A:middle
I again select the video,
start playback in full screen,

00:07:14.076 --> 00:07:15.856 A:middle
and now in the lower
right corner,

00:07:16.246 --> 00:07:17.696 A:middle
the PiP button is present.

00:07:19.256 --> 00:07:22.886 A:middle
When I tap the button,
the video starts to play

00:07:22.886 --> 00:07:23.706 A:middle
in Picture in Picture.

00:07:25.106 --> 00:07:27.946 A:middle
The user interface in the PiP
window contains three buttons,

00:07:28.326 --> 00:07:31.346 A:middle
the central button toggles video
playback and I will talk more

00:07:31.346 --> 00:07:32.956 A:middle
about the other two
buttons in a bit.

00:07:34.186 --> 00:07:36.936 A:middle
Also notice that there is a
playback progress indicator

00:07:36.936 --> 00:07:37.886 A:middle
present in the UI.

00:07:39.066 --> 00:07:41.876 A:middle
Now, while the video is
playing, I can navigate back

00:07:41.936 --> 00:07:45.156 A:middle
to the collection of video,
of videos and, for example,

00:07:45.426 --> 00:07:47.516 A:middle
look at detailed information
of a different video.

00:07:48.276 --> 00:07:51.266 A:middle
I can also simulate
pressing the home button

00:07:53.466 --> 00:07:56.806 A:middle
and launch a different app
all while the video continues

00:07:56.876 --> 00:07:57.196 A:middle
to play.

00:07:58.046 --> 00:08:00.766 A:middle
On the left button in the PiP
window should return video


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.046 --> 00:08:00.766 A:middle
On the left button in the PiP
window should return video

00:08:00.836 --> 00:08:02.136 A:middle
playback to the application.

00:08:02.786 --> 00:08:05.546 A:middle
When I tap this button, the
demo app is brought back

00:08:05.626 --> 00:08:08.056 A:middle
to the foreground,
but as you just saw,

00:08:08.056 --> 00:08:10.526 A:middle
the PiP window is simply
dismissed and that's

00:08:10.596 --> 00:08:14.056 A:middle
because our PiP machinery does
not know if the app is ready

00:08:14.056 --> 00:08:15.116 A:middle
to handle video playback.

00:08:15.566 --> 00:08:18.646 A:middle
Let me show new Xcode how to
restore the user interface

00:08:18.696 --> 00:08:21.536 A:middle
to handle video playback just
as you're users will expect it.

00:08:22.316 --> 00:08:25.006 A:middle
For this I switch to the
collection view controller.

00:08:26.156 --> 00:08:29.416 A:middle
New in iOS 9, we are
adding a delegate property

00:08:29.416 --> 00:08:30.826 A:middle
to AVPlayerViewController

00:08:31.126 --> 00:08:34.426 A:middle
and in this code I already made
the collection view controller

00:08:34.426 --> 00:08:36.456 A:middle
the delegate of
AVPlayerViewController.

00:08:37.376 --> 00:08:40.785 A:middle
To reinstall the user interface
the collection view controller

00:08:40.785 --> 00:08:44.196 A:middle
needs to implement a simple
delegate message has a very

00:08:44.196 --> 00:08:47.386 A:middle
descriptive name and is
called player view controller,

00:08:47.586 --> 00:08:50.296 A:middle
restore user interface for
Picture in Picture stop

00:08:50.456 --> 00:08:51.436 A:middle
with completion handler.

00:08:52.376 --> 00:08:55.376 A:middle
In this code, I ask the
navigation controller

00:08:55.376 --> 00:08:58.816 A:middle
for its top view controller, and
then use the top view controller

00:08:58.816 --> 00:09:01.396 A:middle
to present the player
view controller


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.816 --> 00:09:01.396 A:middle
to present the player
view controller

00:09:01.396 --> 00:09:02.646 A:middle
that the delegate provided.

00:09:03.356 --> 00:09:05.216 A:middle
The other thing in the code is

00:09:05.286 --> 00:09:09.716 A:middle
to call the completion handler
once the player view controller

00:09:09.716 --> 00:09:10.976 A:middle
is presented on screen.

00:09:11.286 --> 00:09:13.316 A:middle
By doing this our
PiP machinery know

00:09:13.516 --> 00:09:16.396 A:middle
that it can start animating
the video back into place.

00:09:17.376 --> 00:09:19.036 A:middle
So let's run the demo again.

00:09:20.146 --> 00:09:26.526 A:middle
I again tap on one of the
videos, play it in full screen,

00:09:27.266 --> 00:09:34.276 A:middle
switch to Picture in Picture and
now when I return video playback

00:09:34.276 --> 00:09:34.716 A:middle
to the app,

00:09:34.716 --> 00:09:37.176 A:middle
AVPlayerViewController
is presented

00:09:37.576 --> 00:09:40.286 A:middle
and the video nicely
animates back into place.

00:09:41.636 --> 00:09:43.986 A:middle
Another thing I want to
show you is what happens

00:09:43.986 --> 00:09:46.586 A:middle
when I leave the application
while the video is playing

00:09:46.586 --> 00:09:47.346 A:middle
in full screen.

00:09:47.646 --> 00:09:51.116 A:middle
For example, if I now simulate
pressing the home button,

00:09:52.156 --> 00:09:55.286 A:middle
in this case, we automatically
start Picture in Picture

00:09:55.416 --> 00:09:57.126 A:middle
so that the video
continues to play.

00:09:58.266 --> 00:10:01.376 A:middle
At any time users may tap
the right close button


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.266 --> 00:10:01.376 A:middle
At any time users may tap
the right close button

00:10:01.746 --> 00:10:04.816 A:middle
to dismiss the PiP
window and that's Picture

00:10:04.816 --> 00:10:06.816 A:middle
in Picture support of
AVPlayerViewController.

00:10:07.026 --> 00:10:07.476 A:middle
Thank you.

00:10:08.016 --> 00:10:09.616 A:middle
[Applause]

00:10:09.616 --> 00:10:11.096 A:middle
&gt;&gt; STEFAN HAFENEGER: So let's
review what you just saw.

00:10:12.426 --> 00:10:13.536 A:middle
You have to do two things.

00:10:14.226 --> 00:10:17.756 A:middle
First, you have to enable
the correct background mode

00:10:18.606 --> 00:10:20.786 A:middle
otherwise your application
won't be able to keep playing

00:10:21.066 --> 00:10:22.246 A:middle
when it transitions
to the background.

00:10:23.316 --> 00:10:24.956 A:middle
You do this in Xcode
[inaudible] capabilities.

00:10:26.196 --> 00:10:27.966 A:middle
Audio and air play is the
one you need to enable.

00:10:28.076 --> 00:10:32.416 A:middle
In the future iOS 9
[inaudible] rename to audio play

00:10:32.416 --> 00:10:35.396 A:middle
and Picture in Picture.

00:10:35.476 --> 00:10:38.656 A:middle
Second, you need to set a valid
AV audio session category.

00:10:39.676 --> 00:10:42.546 A:middle
A good place to do this is did
finish launching with options.

00:10:43.306 --> 00:10:45.876 A:middle
You ask for the shared
audio session,

00:10:45.876 --> 00:10:49.936 A:middle
and then set the category to AV
audio session category playback.

00:10:50.376 --> 00:10:53.416 A:middle
If the application also
supports audio recording,

00:10:53.416 --> 00:10:57.466 A:middle
you can alternatively use AV
audio session play and record.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:01.396 --> 00:11:04.296 A:middle
If the application
supports background audio

00:11:04.296 --> 00:11:07.696 A:middle
on air play iOS 8 you are
already doing both things.

00:11:07.696 --> 00:11:10.936 A:middle
If you think the application
should not support Picture

00:11:10.936 --> 00:11:13.526 A:middle
in Picture in iOS 9
we have a new option

00:11:13.526 --> 00:11:16.586 A:middle
on AVPlayerViewController
that allows you to disable it.

00:11:18.676 --> 00:11:20.826 A:middle
Notice how Picture in Picture
is automatically started

00:11:20.916 --> 00:11:22.616 A:middle
when the user taps on
the message notification.

00:11:23.756 --> 00:11:24.396 A:middle
Why does this happen?

00:11:25.186 --> 00:11:30.036 A:middle
When the primary application
transitions to the background,

00:11:30.636 --> 00:11:32.916 A:middle
an AVPlayerViewerController
is presented full screen,

00:11:33.596 --> 00:11:36.246 A:middle
the system starts Picture in
Picture on the user's behalf.

00:11:37.076 --> 00:11:39.616 A:middle
If the video [inaudible]
is playing, then Picture

00:11:39.616 --> 00:11:40.496 A:middle
in Picture is possible.

00:11:41.176 --> 00:11:45.026 A:middle
Keep in mind though that the
user can turn off this behavior

00:11:45.026 --> 00:11:47.636 A:middle
in settings in general
multitasking persistent

00:11:47.636 --> 00:11:48.246 A:middle
video overlay.

00:11:48.316 --> 00:11:53.196 A:middle
Felix showed in the demo

00:11:53.196 --> 00:11:55.906 A:middle
that you automatically dismiss
the AVPlayerViewController

00:11:55.906 --> 00:11:59.076 A:middle
and the user starts
Picture in Picture.

00:11:59.116 --> 00:12:00.826 A:middle
We don't know the
structure of the application,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:59.116 --> 00:12:00.826 A:middle
We don't know the
structure of the application,

00:12:00.906 --> 00:12:03.046 A:middle
or where the user navigated
to when it was active,

00:12:03.946 --> 00:12:06.216 A:middle
so we need your help to
restore the AV viewer controller

00:12:06.216 --> 00:12:07.866 A:middle
by implementing this
delegate method.

00:12:08.536 --> 00:12:12.086 A:middle
In a simple case you could
just call presentViewController

00:12:12.086 --> 00:12:14.886 A:middle
animated, by using
the [inaudible].

00:12:15.826 --> 00:12:19.436 A:middle
A few applications have
more sophisticated structure

00:12:19.436 --> 00:12:21.256 A:middle
than the demo application,
you might have

00:12:21.256 --> 00:12:22.926 A:middle
to do a few more things.

00:12:24.356 --> 00:12:26.876 A:middle
In either case, don't forget
to call the completionHandler

00:12:26.876 --> 00:12:27.856 A:middle
when you are done
with the restore.

00:12:28.486 --> 00:12:31.536 A:middle
And that's AVKit and
AVPlayerViewController.

00:12:32.136 --> 00:12:35.426 A:middle
Next let me show you
how to do Picture

00:12:35.426 --> 00:12:36.996 A:middle
in Picture using AVFoundation.

00:12:37.536 --> 00:12:42.666 A:middle
As a client of AVFoundation
you have an AVPlayerLayer

00:12:42.816 --> 00:12:44.596 A:middle
and most likely player controls.

00:12:45.376 --> 00:12:48.866 A:middle
I'm going to show you what you
have to do and get from here

00:12:49.696 --> 00:12:51.956 A:middle
to here in your applications.

00:12:52.296 --> 00:12:57.416 A:middle
In iOS 9 we have a new
class called AV Picture

00:12:57.506 --> 00:12:58.256 A:middle
in Picture controller.

00:12:58.256 --> 00:13:02.606 A:middle
It allows you to implement same
PiP viewers I just showed you,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.256 --> 00:13:02.606 A:middle
It allows you to implement same
PiP viewers I just showed you,

00:13:02.776 --> 00:13:04.616 A:middle
but using your own
user interface.

00:13:05.266 --> 00:13:09.646 A:middle
Before I create an
instance of an AV Picture

00:13:09.646 --> 00:13:12.736 A:middle
in Picture controller you
should check whether Picture

00:13:12.736 --> 00:13:16.996 A:middle
in Picture is supported
on the current device.

00:13:17.156 --> 00:13:18.586 A:middle
You create an AV Picture
in Picture controller

00:13:18.586 --> 00:13:20.246 A:middle
by providing an AVPlayerLayer.

00:13:20.246 --> 00:13:24.376 A:middle
Think of AV Picture in Picture
controller as an objects

00:13:24.376 --> 00:13:26.286 A:middle
that allows to present
the content

00:13:26.286 --> 00:13:30.416 A:middle
of the AVPlayerLayer
in the PiP window.

00:13:30.556 --> 00:13:33.096 A:middle
Setting a delegate is
optional but it is very likely

00:13:33.096 --> 00:13:36.376 A:middle
that you will need it.

00:13:36.636 --> 00:13:38.786 A:middle
Next, you have the PiP
button to use interface.

00:13:38.786 --> 00:13:43.516 A:middle
So that the user can
start Picture in Picture.

00:13:43.656 --> 00:13:44.736 A:middle
You should only add the button

00:13:44.816 --> 00:13:49.076 A:middle
if the device supports
Picture in Picture though.

00:13:49.306 --> 00:13:50.836 A:middle
There are situations
where starting Picture

00:13:50.836 --> 00:13:52.386 A:middle
in Picture is currently
not possible,

00:13:52.906 --> 00:13:54.506 A:middle
even though the device
supports it in general.

00:13:55.696 --> 00:13:59.356 A:middle
In this case, you should
disable your PiP button.

00:13:59.486 --> 00:14:01.466 A:middle
For that we have a property
on the PiP controller


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.486 --> 00:14:01.466 A:middle
For that we have a property
on the PiP controller

00:14:01.466 --> 00:14:05.196 A:middle
that you can observe and
then update the enable set

00:14:05.196 --> 00:14:09.086 A:middle
of your PiP button.

00:14:09.236 --> 00:14:11.176 A:middle
The implementation of your
PiP button action will look

00:14:11.176 --> 00:14:13.916 A:middle
something like this.

00:14:14.136 --> 00:14:15.976 A:middle
You first make sure that
PiP is not already active.

00:14:16.796 --> 00:14:19.766 A:middle
And then you can start Picture
in Picture in the pipController.

00:14:21.356 --> 00:14:23.186 A:middle
Do not call this method
without user interaction.

00:14:23.996 --> 00:14:28.206 A:middle
If you use this inappropriately
the App Store team will

00:14:28.206 --> 00:14:28.986 A:middle
reject submissions.

00:14:29.676 --> 00:14:34.696 A:middle
If the application provides
additional content while PiP is

00:14:34.696 --> 00:14:37.376 A:middle
active you may want to
dismiss the video player viewer

00:14:37.376 --> 00:14:38.566 A:middle
controller after PiP is started.

00:14:39.976 --> 00:14:42.016 A:middle
In order to do so could
implement the did start delegate

00:14:42.016 --> 00:14:45.406 A:middle
method and then call
dismissViewControllerAnimated

00:14:45.576 --> 00:14:46.706 A:middle
on your controller.

00:14:47.406 --> 00:14:50.686 A:middle
When you do this
though make sure

00:14:50.686 --> 00:14:52.336 A:middle
that you don't release
your PiP controller.

00:14:53.306 --> 00:14:57.426 A:middle
Because if it does happen,
the PiP window will disappear.

00:14:57.826 --> 00:15:00.676 A:middle
So make sure you structure
your application accordingly.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:57.826 --> 00:15:00.676 A:middle
So make sure you structure
your application accordingly.

00:15:01.386 --> 00:15:06.766 A:middle
AV Picture in Picture
controller has a delegate method

00:15:06.766 --> 00:15:08.336 A:middle
for restoring your
view controller.

00:15:09.186 --> 00:15:12.686 A:middle
In a simple case you could
just call present view

00:15:12.686 --> 00:15:14.366 A:middle
controller animated.

00:15:15.306 --> 00:15:18.206 A:middle
Again, make sure you call
the completionHandler

00:15:18.206 --> 00:15:20.676 A:middle
when you are done
with the restore.

00:15:20.676 --> 00:15:23.186 A:middle
Because when you call the
completionHandler it is assumed

00:15:23.186 --> 00:15:24.236 A:middle
that the AVPlayerLayer used

00:15:24.236 --> 00:15:26.526 A:middle
to initialize the PiP
controller is back on screen.

00:15:27.216 --> 00:15:30.406 A:middle
If this is not the
case, we won't animate

00:15:30.406 --> 00:15:37.226 A:middle
to video frame spec. Your
AVPlayerLayer won't show

00:15:37.226 --> 00:15:38.966 A:middle
on video frames while
PiP is active

00:15:38.966 --> 00:15:42.446 A:middle
so if the application provides a
non-modal view player experience

00:15:42.446 --> 00:15:45.336 A:middle
like this example you might want
to update the user interface.

00:15:46.116 --> 00:15:49.736 A:middle
AV player viewer controller
shows [inaudible] like this

00:15:49.736 --> 00:15:51.666 A:middle
and hides viewer controls.

00:15:53.186 --> 00:15:54.346 A:middle
This behavior is not required

00:15:54.346 --> 00:15:56.226 A:middle
but we highly recommend
this for consistency.

00:15:56.296 --> 00:16:00.606 A:middle
In order to do this you could
implement the start delegate


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:56.296 --> 00:16:00.606 A:middle
In order to do this you could
implement the start delegate

00:16:00.606 --> 00:16:03.636 A:middle
method, hide your
player controls

00:16:04.666 --> 00:16:05.726 A:middle
and show your place
holder art work.

00:16:06.526 --> 00:16:08.966 A:middle
When PiP stops you
do the opposite,

00:16:08.966 --> 00:16:12.086 A:middle
you implement the did
stop delegate method,

00:16:13.156 --> 00:16:14.696 A:middle
hide your placeholder art work

00:16:15.026 --> 00:16:16.126 A:middle
and show your player
controls again.

00:16:17.296 --> 00:16:18.576 A:middle
Very simple.

00:16:20.836 --> 00:16:23.686 A:middle
Finally if you want to allow
PiP to automatically start

00:16:23.686 --> 00:16:26.446 A:middle
when application transitions to
background you have to be sure

00:16:26.446 --> 00:16:29.116 A:middle
that the AVPlayerLayer
covers the entire UIWindow.

00:16:29.896 --> 00:16:33.546 A:middle
If this is the case, and
the video is playing,

00:16:34.096 --> 00:16:35.446 A:middle
and PiP is currently possible,

00:16:35.626 --> 00:16:37.226 A:middle
the system automatically
starts Picture in Picture

00:16:37.226 --> 00:16:38.076 A:middle
on your user's behalf.

00:16:38.816 --> 00:16:41.906 A:middle
And you will see all
of this in action,

00:16:42.046 --> 00:16:44.176 A:middle
we have brought a great sample
project you should check

00:16:44.176 --> 00:16:45.786 A:middle
out after the session.

00:16:47.336 --> 00:16:49.236 A:middle
So you saw how easy
it is to adopt Picture

00:16:49.236 --> 00:16:52.176 A:middle
in Picture using
AVFoundation as well.

00:16:52.386 --> 00:16:54.616 A:middle
Finally, let me show you
Picture in Picture with WebKit.

00:16:55.216 --> 00:17:02.716 A:middle
WebKit's main API for
video play is WKWebView.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:55.216 --> 00:17:02.716 A:middle
WebKit's main API for
video play is WKWebView.

00:17:02.716 --> 00:17:08.286 A:middle
This part of the session is for
those among you using WebKit

00:17:08.286 --> 00:17:12.726 A:middle
to present your [inaudible]
web technologies.

00:17:12.726 --> 00:17:15.366 A:middle
In iOS 9 WKWebView
supports Picture in Picture

00:17:15.695 --> 00:17:17.736 A:middle
for HTML5 video if
the application is set

00:17:17.736 --> 00:17:19.705 A:middle
up the same way as
for the other APIs.

00:17:19.976 --> 00:17:22.826 A:middle
If your web content
uses iOS default

00:17:22.826 --> 00:17:24.766 A:middle
in the playback controls,
PiP will just work.

00:17:24.766 --> 00:17:29.256 A:middle
If you are a website
developer interesting

00:17:29.426 --> 00:17:32.706 A:middle
in incorporating a PiP button
into your controls check

00:17:32.706 --> 00:17:35.366 A:middle
out section 501 what's new

00:17:35.366 --> 00:17:37.046 A:middle
for web developers
in WebKit and Safari.

00:17:37.816 --> 00:17:42.356 A:middle
If you want to support
background audio air play

00:17:42.406 --> 00:17:44.616 A:middle
but don't want to allow
Picture in Picture,

00:17:44.616 --> 00:17:47.486 A:middle
we'll have a property in
WKWebViewConfiguration

00:17:47.536 --> 00:17:51.716 A:middle
in the future iOS 9 seed
that allows you to do so.

00:17:52.386 --> 00:17:53.726 A:middle
And that's WebKit.

00:17:55.056 --> 00:17:57.766 A:middle
So you saw how easy and straight
forward it is to adopt Picture

00:17:57.766 --> 00:18:00.486 A:middle
in Picture in your applications
for all three media frameworks.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:57.766 --> 00:18:00.486 A:middle
in Picture in your applications
for all three media frameworks.

00:18:00.656 --> 00:18:03.296 A:middle
I can't wait to see
PiP support in all

00:18:03.296 --> 00:18:04.846 A:middle
of your iPad video
player applications.

00:18:04.846 --> 00:18:11.316 A:middle
Picture in Picture is a
lot like background audio.

00:18:11.446 --> 00:18:13.656 A:middle
If the application
is not on screen

00:18:13.756 --> 00:18:16.156 A:middle
but the user is enjoying
your media.

00:18:16.936 --> 00:18:19.666 A:middle
The same rules apply
to background audio

00:18:19.666 --> 00:18:21.166 A:middle
and air play apply here as well.

00:18:22.776 --> 00:18:25.876 A:middle
For instance, do not perform
any task unrelated to playback

00:18:25.876 --> 00:18:28.646 A:middle
and limit your memory
usage to only these tasks

00:18:28.646 --> 00:18:30.416 A:middle
when the application
is in the background.

00:18:31.996 --> 00:18:34.776 A:middle
Properly sharing resources is
critical not only for PiP apps,

00:18:34.776 --> 00:18:36.066 A:middle
but for all iPad applications.

00:18:36.806 --> 00:18:41.356 A:middle
And to discuss this further let
me welcome Jonathan on stage

00:18:41.356 --> 00:18:43.296 A:middle
to tell you everything you
need to know about this topic.

00:18:43.946 --> 00:18:44.196 A:middle
Thank you.

00:18:45.206 --> 00:18:47.206 A:middle
[Applause]

00:18:47.396 --> 00:18:50.436 A:middle
&gt;&gt; JONATHAN BENNETT:
Thanks Stefan multitasking

00:18:50.436 --> 00:18:54.766 A:middle
on an iPad allows you to use
multiple apps onscreen at once.

00:18:55.156 --> 00:18:59.406 A:middle
But hardware resources are
still shared between all

00:18:59.406 --> 00:19:00.946 A:middle
of the presented apps.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.406 --> 00:19:00.946 A:middle
of the presented apps.

00:19:01.496 --> 00:19:06.246 A:middle
I would like to explore with you
some of the iOS media policies

00:19:06.766 --> 00:19:11.666 A:middle
and updated best practices you
can use to manage audio, video,

00:19:11.666 --> 00:19:16.036 A:middle
and camera in your applications
with multitasking on iPad.

00:19:18.536 --> 00:19:20.186 A:middle
The good news is that some

00:19:20.186 --> 00:19:23.226 A:middle
of these best practices
should already be familiar.

00:19:23.226 --> 00:19:27.036 A:middle
And many apply to all
iOS devices so it's easy

00:19:27.036 --> 00:19:28.946 A:middle
to make your app
shine everywhere.

00:19:30.076 --> 00:19:32.826 A:middle
Now, before I dive into
specific media resources,

00:19:33.296 --> 00:19:35.136 A:middle
I'd like to take a few
moments to discuss some

00:19:35.136 --> 00:19:38.446 A:middle
of the roles your
app may take on iPad.

00:19:39.696 --> 00:19:42.916 A:middle
In iOS 8 apps are
presented full screen.

00:19:43.516 --> 00:19:47.866 A:middle
And new in iOS 9 you can have up
to three apps on screen at once

00:19:48.406 --> 00:19:49.956 A:middle
with the new multitasking modes.

00:19:51.106 --> 00:19:55.176 A:middle
These apps may be vying for
some of the shared resources

00:19:55.176 --> 00:19:58.846 A:middle
so to help manage that, the
system categorizes your app

00:19:58.846 --> 00:20:00.936 A:middle
into one of three roles.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:58.846 --> 00:20:00.936 A:middle
into one of three roles.

00:20:02.636 --> 00:20:04.636 A:middle
Full screen apps are
considered primary.

00:20:05.316 --> 00:20:09.506 A:middle
And they continue to be so when
a secondary app is presented

00:20:09.506 --> 00:20:10.516 A:middle
in slide-over.

00:20:11.116 --> 00:20:15.486 A:middle
The full screen app also remains
primary when it's resized

00:20:15.646 --> 00:20:19.096 A:middle
to fit next to a pinned
app in split view.

00:20:19.336 --> 00:20:22.676 A:middle
And a Picture in Picture
application can be put

00:20:22.676 --> 00:20:25.276 A:middle
into the background while
the video remains visible

00:20:25.276 --> 00:20:25.976 A:middle
to the user.

00:20:26.646 --> 00:20:29.626 A:middle
In this case your app's
considered background media.

00:20:30.256 --> 00:20:34.606 A:middle
For certain shared resources
these roles help define the

00:20:34.606 --> 00:20:37.396 A:middle
system's policies and
your app's capabilities.

00:20:37.986 --> 00:20:40.196 A:middle
So let's dig into some
of these resources.

00:20:41.536 --> 00:20:42.516 A:middle
Starting with audio.

00:20:44.596 --> 00:20:47.596 A:middle
The audio system on
iOS is well-suited

00:20:47.596 --> 00:20:48.856 A:middle
for multiple applications.

00:20:49.586 --> 00:20:51.276 A:middle
If your app currently
using audio,

00:20:51.506 --> 00:20:55.706 A:middle
you have configured the AV audio
session API to state the nature

00:20:55.706 --> 00:20:57.226 A:middle
of the audio in your
application.

00:20:58.756 --> 00:21:02.246 A:middle
The system uses this to figure


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.756 --> 00:21:02.246 A:middle
The system uses this to figure

00:21:02.246 --> 00:21:04.806 A:middle
out how your app's
audio mixes with,

00:21:04.806 --> 00:21:08.206 A:middle
docks or interrupts other
app audio on the system.

00:21:08.836 --> 00:21:13.016 A:middle
The good news is a properly
configured AV audio session

00:21:13.016 --> 00:21:15.966 A:middle
should just work with
multitasking on iPad.

00:21:16.776 --> 00:21:22.956 A:middle
To this end, never change
your audio configuration based

00:21:22.956 --> 00:21:25.466 A:middle
on how your app is
presented on screen.

00:21:26.296 --> 00:21:31.596 A:middle
It's all about the audio.

00:21:31.976 --> 00:21:33.426 A:middle
With that, I would
like to go over some

00:21:33.426 --> 00:21:36.696 A:middle
of the audio session best
practices most relevant

00:21:36.696 --> 00:21:38.866 A:middle
to multitasking on iPad.

00:21:39.416 --> 00:21:41.516 A:middle
If you are not following
these practices,

00:21:41.516 --> 00:21:43.836 A:middle
your app may have
worked okay on iOS 8

00:21:43.836 --> 00:21:45.406 A:middle
but showed issues on iOS 9.

00:21:47.316 --> 00:21:50.766 A:middle
First off, only activate
your audio session

00:21:50.766 --> 00:21:52.236 A:middle
when audio is first needed.

00:21:52.986 --> 00:21:54.376 A:middle
This is especially true

00:21:54.376 --> 00:21:58.456 A:middle
if you have an application whose
audio interrupts other apps

00:21:58.536 --> 00:22:03.716 A:middle
such as music or video
application using audio sessions


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.536 --> 00:22:03.716 A:middle
such as music or video
application using audio sessions

00:22:04.306 --> 00:22:05.966 A:middle
playback category.

00:22:09.826 --> 00:22:13.536 A:middle
Never solely determine to
activate your audio just

00:22:13.536 --> 00:22:17.276 A:middle
because your app launched
or came into the foreground.

00:22:17.526 --> 00:22:19.196 A:middle
Wait until the user interacts

00:22:19.196 --> 00:22:21.796 A:middle
with your audio feature before
activating your session.

00:22:24.916 --> 00:22:29.436 A:middle
For example, a music and
video application would wait

00:22:29.436 --> 00:22:31.066 A:middle
until the user taps
the play button.

00:22:31.426 --> 00:22:36.756 A:middle
Next, there is a huge category
of apps that don't need

00:22:36.756 --> 00:22:38.046 A:middle
to interrupt other audio.

00:22:38.926 --> 00:22:42.436 A:middle
For example, if you have a game
or have other ancillary audio

00:22:42.436 --> 00:22:45.976 A:middle
like sound effects, you should
use the ambient audio category,

00:22:46.796 --> 00:22:49.176 A:middle
this category provides
appropriate behaviors

00:22:49.176 --> 00:22:53.396 A:middle
for this kind of audio including
mixing with other applications.

00:22:54.326 --> 00:22:57.466 A:middle
This is critical for these
kind of applications on,

00:22:57.766 --> 00:23:00.466 A:middle
with multitasking on iPad,
because your app may remain


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:57.766 --> 00:23:00.466 A:middle
with multitasking on iPad,
because your app may remain

00:23:00.466 --> 00:23:03.086 A:middle
in the foreground while
other apps come and go.

00:23:03.316 --> 00:23:07.606 A:middle
And you don't want your
game audio interrupted

00:23:07.606 --> 00:23:11.326 A:middle
and having the user have to
restart your app in order

00:23:11.326 --> 00:23:14.696 A:middle
to get its audio back.

00:23:14.926 --> 00:23:18.616 A:middle
Lastly, some apps have
secondary audio Soundtracks.

00:23:18.616 --> 00:23:20.946 A:middle
An example of this
is if you have a game

00:23:20.946 --> 00:23:23.496 A:middle
with bold sound effects
and a music Soundtrack

00:23:23.536 --> 00:23:24.556 A:middle
that plays during the game.

00:23:24.556 --> 00:23:28.386 A:middle
Now, if the user is
already listening to music

00:23:28.386 --> 00:23:29.856 A:middle
in another application,

00:23:30.076 --> 00:23:32.826 A:middle
you would like to silence
your secondary Soundtrack.

00:23:33.406 --> 00:23:35.996 A:middle
So that the user it
continue listening

00:23:35.996 --> 00:23:39.086 A:middle
to their music while your
sound effects still mix in.

00:23:39.636 --> 00:23:44.486 A:middle
We provided a great way in
iOS 8 to know when to do this.

00:23:45.266 --> 00:23:49.206 A:middle
Simply check AV audio sessions
secondary Audio Should Be

00:23:49.246 --> 00:23:54.446 A:middle
Silenced Hint and listen to its
began and ended notifications.

00:23:55.086 --> 00:23:58.936 A:middle
So these are some of the
most important best practices

00:23:58.936 --> 00:24:00.696 A:middle
for using audio on iPad,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.936 --> 00:24:00.696 A:middle
for using audio on iPad,

00:24:00.696 --> 00:24:04.126 A:middle
and as a bonus following these
will insure a great experience

00:24:04.126 --> 00:24:05.796 A:middle
on all iOS devices.

00:24:06.246 --> 00:24:08.866 A:middle
If you would like to learn more

00:24:08.866 --> 00:24:11.106 A:middle
about configuring your audio
session, there is a bunch

00:24:11.106 --> 00:24:13.536 A:middle
of great tips in last
year's Core Audio talk

00:24:13.536 --> 00:24:17.736 A:middle
and in our detailed
programming guide.

00:24:17.906 --> 00:24:19.746 A:middle
Next up, video.

00:24:19.786 --> 00:24:24.486 A:middle
And first off, a lot of video
has audio associated with it.

00:24:25.096 --> 00:24:32.126 A:middle
So if you have an app that
provides movies or TV shows,

00:24:32.126 --> 00:24:35.376 A:middle
you will want to properly
configure your AV audio session.

00:24:35.996 --> 00:24:37.646 A:middle
In that example, you will want

00:24:37.646 --> 00:24:40.866 A:middle
to set audio session's
category to play back.

00:24:42.376 --> 00:24:46.266 A:middle
Next. If you support air
playing video in the background

00:24:46.406 --> 00:24:49.886 A:middle
or add the new PiP support
or add the new PiP feature

00:24:49.976 --> 00:24:54.236 A:middle
in your application, you will
be considered a background media

00:24:54.236 --> 00:24:57.266 A:middle
app when you are playing
media in the background.

00:24:58.976 --> 00:25:02.656 A:middle
This means that you will have
lower maximum memory limits


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.976 --> 00:25:02.656 A:middle
This means that you will have
lower maximum memory limits

00:25:02.856 --> 00:25:07.346 A:middle
so it's really important that
you discard any unnecessary data

00:25:07.426 --> 00:25:14.466 A:middle
such as view controllers, views,
images, and other data caches

00:25:14.506 --> 00:25:16.456 A:middle
that aren't necessary when
your app is off screen.

00:25:17.056 --> 00:25:19.166 A:middle
You will want to do
this proactively.

00:25:19.446 --> 00:25:22.516 A:middle
Don't wait for a memory
warning to do this.

00:25:24.216 --> 00:25:26.156 A:middle
You will also want
to limit yourself

00:25:26.156 --> 00:25:31.036 A:middle
to performing just the task
necessary to perform playback

00:25:31.036 --> 00:25:35.556 A:middle
in order to help share the CPU.

00:25:35.756 --> 00:25:42.286 A:middle
Now, many iOS video apps
provide their content via HTTP

00:25:42.526 --> 00:25:43.306 A:middle
live streaming.

00:25:43.756 --> 00:25:46.146 A:middle
If you have a streaming
video application,

00:25:46.146 --> 00:25:47.496 A:middle
you will want to do two things.

00:25:48.076 --> 00:25:52.016 A:middle
First, make sure that you are
providing multiple variants

00:25:52.016 --> 00:25:54.506 A:middle
in your stream including
a smaller resolution,

00:25:54.646 --> 00:25:55.956 A:middle
low bandwidth variant.

00:25:57.136 --> 00:26:00.776 A:middle
And second, make sure you are
annotating all of your variants


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:57.136 --> 00:26:00.776 A:middle
And second, make sure you are
annotating all of your variants

00:26:00.836 --> 00:26:03.576 A:middle
with the resolution attribute
in the master play list.

00:26:04.986 --> 00:26:08.126 A:middle
Now, if you get your video
from an external vendor,

00:26:08.406 --> 00:26:10.896 A:middle
be sure to check with them to
see if they are providing you

00:26:10.896 --> 00:26:13.646 A:middle
with these diverse
well-annotated variants.

00:26:13.956 --> 00:26:16.106 A:middle
And this is important
for three reasons.

00:26:16.916 --> 00:26:23.706 A:middle
On iPad and iOS 9 your video may
not take up the entire screen.

00:26:24.606 --> 00:26:27.446 A:middle
Providing well annotated
variants allows iOS

00:26:27.546 --> 00:26:29.316 A:middle
to choose the right-sized video

00:26:29.376 --> 00:26:30.906 A:middle
for how it's currently
presented.

00:26:32.356 --> 00:26:34.106 A:middle
And when it's presented
in Picture

00:26:34.106 --> 00:26:38.036 A:middle
in Picture a smaller resolution
low bandwidth variant lowers

00:26:38.036 --> 00:26:41.666 A:middle
your memory footprint, and
helps avoid terminating apps due

00:26:41.666 --> 00:26:42.496 A:middle
to memory pressure.

00:26:43.666 --> 00:26:49.506 A:middle
And lastly, following these
practices help users avoid

00:26:50.156 --> 00:26:52.256 A:middle
unnecessary data plan usage.

00:26:52.686 --> 00:26:54.746 A:middle
And they will really
appreciate that.

00:26:58.636 --> 00:27:01.566 A:middle
The last topic I would like
to talk about today is camera.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:58.636 --> 00:27:01.566 A:middle
The last topic I would like
to talk about today is camera.

00:27:04.216 --> 00:27:07.556 A:middle
In iOS 9 only one app can
use the camera at a time.

00:27:08.746 --> 00:27:14.116 A:middle
In addition, for certain camera
features they may only be

00:27:14.116 --> 00:27:16.936 A:middle
available when one app
is visible on screen.

00:27:18.836 --> 00:27:21.486 A:middle
This means that camera
availability can change

00:27:21.486 --> 00:27:24.696 A:middle
at any time and your app's
camera usage could be

00:27:24.696 --> 00:27:26.746 A:middle
interrupted because
the user is interacting

00:27:26.746 --> 00:27:28.846 A:middle
with other app using
multitasking.

00:27:29.446 --> 00:27:32.406 A:middle
For this reason, it's important

00:27:32.406 --> 00:27:35.426 A:middle
to consider how people
use your application

00:27:36.156 --> 00:27:37.756 A:middle
and its camera features.

00:27:38.296 --> 00:27:42.946 A:middle
If you have a camera centric
application, you may want

00:27:42.946 --> 00:27:44.686 A:middle
to consider being
full screen only.

00:27:45.766 --> 00:27:48.196 A:middle
Our camera app is a
great example of this.

00:27:48.576 --> 00:27:51.456 A:middle
If your users expect an
experience like this,

00:27:51.836 --> 00:27:55.766 A:middle
you can add the UI requires full
screen key to your info P list.

00:27:56.936 --> 00:27:59.756 A:middle
This will help let
users get quick access

00:27:59.756 --> 00:28:01.746 A:middle
to the camera inside
your application


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.756 --> 00:28:01.746 A:middle
to the camera inside
your application

00:28:01.996 --> 00:28:04.246 A:middle
and use the entire
iPad as a view finder.

00:28:06.116 --> 00:28:09.506 A:middle
Now, if using the camera
is not the primary feature

00:28:09.506 --> 00:28:11.426 A:middle
of your application,
you will likely want

00:28:11.426 --> 00:28:16.136 A:middle
to adopt the multitasking
enhancements on iPad.

00:28:16.806 --> 00:28:19.126 A:middle
Our notes app is a
great example of this.

00:28:19.726 --> 00:28:21.646 A:middle
People are going to
love the flexibility

00:28:21.646 --> 00:28:24.186 A:middle
of using the new
notes features inside

00:28:24.186 --> 00:28:26.136 A:middle
of slide-over and
split-view modes.

00:28:27.126 --> 00:28:28.346 A:middle
However, this mean that's some

00:28:28.346 --> 00:28:31.716 A:middle
of the app's camera features
may not always be available.

00:28:32.896 --> 00:28:35.346 A:middle
So let's take a look
at how our camera

00:28:35.506 --> 00:28:38.776 A:middle
and notes apps handle
camera availability on iPad

00:28:38.776 --> 00:28:46.186 A:middle
and how your apps
can do the same.

00:28:46.396 --> 00:28:47.886 A:middle
When one app is on the screen,

00:28:48.166 --> 00:28:53.506 A:middle
UI image picker can let you
see a preview, take a photo,

00:28:53.506 --> 00:28:55.416 A:middle
or do a video capture,
just like today.

00:28:55.416 --> 00:28:58.776 A:middle
And when multiple
apps are on screen,

00:28:58.776 --> 00:29:01.646 A:middle
you can still see a preview
and take a photo, however,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:58.776 --> 00:29:01.646 A:middle
you can still see a preview
and take a photo, however,

00:29:01.646 --> 00:29:04.096 A:middle
video capture will be disabled.

00:29:05.296 --> 00:29:07.236 A:middle
So let's dig into this case.

00:29:09.586 --> 00:29:11.156 A:middle
Here we have full screen maps

00:29:11.656 --> 00:29:13.516 A:middle
with your app presented
in slide-over.

00:29:14.286 --> 00:29:18.116 A:middle
The UI image picker is in photo
mode so you can see a preview

00:29:18.386 --> 00:29:21.016 A:middle
and the user can take a photo
if they tap the shutter button.

00:29:21.816 --> 00:29:23.996 A:middle
When the user swipes
over to the video mode,

00:29:23.996 --> 00:29:26.546 A:middle
they will see a message that
says your app needs to be

00:29:26.546 --> 00:29:28.596 A:middle
in full screen in
order to take video.

00:29:28.596 --> 00:29:31.416 A:middle
What does this mean
for your application?

00:29:34.256 --> 00:29:38.626 A:middle
First off, active video captures
can be interrupted at any time.

00:29:39.296 --> 00:29:44.286 A:middle
An example of this is if you
are recording video full screen

00:29:44.286 --> 00:29:48.126 A:middle
and an app slides over a new
app in the slide-over feature.

00:29:48.656 --> 00:29:54.666 A:middle
Your video will be interrupted
and it's important to note

00:29:54.666 --> 00:29:56.866 A:middle
that this kind of
interruption can happen

00:29:56.866 --> 00:29:59.216 A:middle
to any video capture
app regardless

00:29:59.216 --> 00:30:02.536 A:middle
if you support the multitasking
modes or full screen only.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.216 --> 00:30:02.536 A:middle
if you support the multitasking
modes or full screen only.

00:30:03.006 --> 00:30:12.286 A:middle
Next, the UI image pickers start
video capture method may fail

00:30:12.286 --> 00:30:14.566 A:middle
because we are in a multitasking
mode that doesn't support it.

00:30:16.076 --> 00:30:18.636 A:middle
If you are not currently paying
attention to this return value,

00:30:18.956 --> 00:30:19.996 A:middle
now is the time to do so.

00:30:22.536 --> 00:30:25.126 A:middle
So these are some of the
things for UI image picker.

00:30:25.126 --> 00:30:27.916 A:middle
Let's transition to
AV capture session now

00:30:27.916 --> 00:30:31.186 A:middle
and see how the API differs.

00:30:34.056 --> 00:30:35.766 A:middle
When one app is on the screen,

00:30:36.136 --> 00:30:38.136 A:middle
you can still have full
access to the camera.

00:30:39.186 --> 00:30:42.686 A:middle
And because AV capture session
is a flexible low level API,

00:30:42.686 --> 00:30:46.026 A:middle
you can do more than just these
three features listed here.

00:30:46.686 --> 00:30:49.006 A:middle
And we have been amazed
at some of the creative

00:30:49.146 --> 00:30:53.456 A:middle
and powerful features you have
added in your applications.

00:30:57.006 --> 00:31:01.916 A:middle
In order to ensure that we
can offer you the resources


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:57.006 --> 00:31:01.916 A:middle
In order to ensure that we
can offer you the resources

00:31:01.916 --> 00:31:05.956 A:middle
necessary to provide the highest
quality camera experience inside

00:31:05.956 --> 00:31:10.376 A:middle
your application, an AV capture
session using the camera will

00:31:10.556 --> 00:31:13.936 A:middle
only be available when one
app is visible on screen.

00:31:15.196 --> 00:31:18.176 A:middle
This means that whenever
slide-over, split view,

00:31:18.406 --> 00:31:19.886 A:middle
or Picture in Picture is active,

00:31:20.396 --> 00:31:22.736 A:middle
your camera's session
will be interrupted.

00:31:24.036 --> 00:31:26.966 A:middle
You should handle these
interruptions and communicate

00:31:26.966 --> 00:31:29.886 A:middle
to your users that the camera
is currently unavailable.

00:31:30.766 --> 00:31:32.846 A:middle
Let's see how you can do this.

00:31:34.416 --> 00:31:37.776 A:middle
The first step is to listen

00:31:37.776 --> 00:31:40.286 A:middle
to AV capture sessions
interruption reason

00:31:40.536 --> 00:31:43.036 A:middle
or excuse me, was
interrupted notification.

00:31:43.536 --> 00:31:48.266 A:middle
And new in iOS 9,

00:31:48.796 --> 00:31:52.846 A:middle
the notification's user info
dictionary states a reason

00:31:54.336 --> 00:31:57.566 A:middle
stating why your
camera was interrupted.

00:31:58.366 --> 00:32:00.506 A:middle
There is multiple reasons
you could be interrupted


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.366 --> 00:32:00.506 A:middle
There is multiple reasons
you could be interrupted

00:32:00.506 --> 00:32:01.846 A:middle
but when it's due
to multitasking

00:32:01.846 --> 00:32:05.496 A:middle
on iPad you will be told that
the video device is unavailable

00:32:05.496 --> 00:32:07.156 A:middle
with multiple foreground apps.

00:32:08.046 --> 00:32:10.296 A:middle
This is your opportunity
to adjust your UI

00:32:10.296 --> 00:32:14.586 A:middle
by disabling any capture
buttons and also identifying

00:32:14.586 --> 00:32:16.336 A:middle
that the camera is
currently unavailable.

00:32:16.856 --> 00:32:21.756 A:middle
Now that you have handled
these interruptions,

00:32:21.806 --> 00:32:22.936 A:middle
what do you do when they end?

00:32:25.106 --> 00:32:27.926 A:middle
When an interruption ends,

00:32:27.926 --> 00:32:30.566 A:middle
AV capture session automatically
resumes the session,

00:32:30.646 --> 00:32:32.686 A:middle
there is no need to
manually restart it.

00:32:33.196 --> 00:32:36.246 A:middle
You can be notified of this

00:32:36.296 --> 00:32:39.536 A:middle
by observing the
interruption ended notification.

00:32:41.036 --> 00:32:43.036 A:middle
And, again, this
is your opportunity

00:32:43.036 --> 00:32:46.486 A:middle
to restore your camera UI by
re-enabling any of the buttons

00:32:46.486 --> 00:32:47.726 A:middle
that you previously disabled.

00:32:54.346 --> 00:32:59.166 A:middle
Be sure to check out our updated
AV cam sample code for examples

00:32:59.166 --> 00:33:02.516 A:middle
on using these new interruption
reasons inside your application.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.166 --> 00:33:02.516 A:middle
on using these new interruption
reasons inside your application.

00:33:03.886 --> 00:33:10.626 A:middle
So in review, Picture in
Picture is a great new feature

00:33:10.626 --> 00:33:12.556 A:middle
for video playback applications.

00:33:13.956 --> 00:33:15.896 A:middle
You can adopt it easily with any

00:33:15.896 --> 00:33:19.016 A:middle
of our modern playback
frameworks and remember

00:33:19.016 --> 00:33:20.956 A:middle
that if you are using
MediaPlayer framework

00:33:20.956 --> 00:33:24.996 A:middle
for video playback to transition
over to AVKit to get the benefit

00:33:24.996 --> 00:33:27.316 A:middle
of PiP and other great features.

00:33:29.016 --> 00:33:31.986 A:middle
Also be sure to follow best
practices Stefan talked

00:33:31.986 --> 00:33:34.176 A:middle
about to ensure a
great experience inside

00:33:34.176 --> 00:33:35.086 A:middle
your application.

00:33:35.896 --> 00:33:38.406 A:middle
As an example, make
sure to restore your UI

00:33:38.476 --> 00:33:41.226 A:middle
so that the video animates
right back into your app.

00:33:43.316 --> 00:33:47.146 A:middle
Multitasking on iPad
provides the power

00:33:47.146 --> 00:33:49.206 A:middle
to use multiple applications
at once.

00:33:49.426 --> 00:33:50.136 A:middle
However, this comes

00:33:50.136 --> 00:33:52.836 A:middle
with a responsibility
of sharing resources.

00:33:53.986 --> 00:33:55.796 A:middle
Three things you can do are

00:33:55.796 --> 00:33:58.236 A:middle
to properly configure
your audio session,

00:33:58.506 --> 00:34:00.256 A:middle
provide adaptive video streams


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:58.506 --> 00:34:00.256 A:middle
provide adaptive video streams

00:34:00.896 --> 00:34:04.026 A:middle
and handle the new camera
interruption reasons.

00:34:06.176 --> 00:34:09.656 A:middle
For more information, get
in touch with our evangelist

00:34:09.656 --> 00:34:10.775 A:middle
and check out the forum.

00:34:11.996 --> 00:34:17.186 A:middle
And also we provided a new
document called adopting

00:34:17.186 --> 00:34:21.656 A:middle
multitasking enhancements
on iPad.

00:34:21.866 --> 00:34:24.136 A:middle
Now, sharing media
resources is only part

00:34:24.136 --> 00:34:26.996 A:middle
of the story for
shared resources.

00:34:27.476 --> 00:34:29.295 A:middle
Be sure to check out
the optimizing your app

00:34:29.295 --> 00:34:34.036 A:middle
for multitasking session
happening next up in Presidio.

00:34:34.815 --> 00:34:37.025 A:middle
There is also a great
Friday talk

00:34:37.025 --> 00:34:39.516 A:middle
on delivering performance
on iOS.

00:34:40.856 --> 00:34:41.696 A:middle
And if you missed it,

00:34:41.696 --> 00:34:47.186 A:middle
the getting started session
is a great place to learn

00:34:47.186 --> 00:34:52.036 A:middle
about adopting adaptive
UI in your apps.

00:34:53.025 --> 00:34:56.676 A:middle
On behalf of Stefan,
Felix and myself.

00:34:56.676 --> 00:34:58.556 A:middle
It's been great to talk
to you this afternoon.

00:34:59.436 --> 00:35:00.976 A:middle
Thanks, and have a
great rest of the week!


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.436 --> 00:35:00.976 A:middle
Thanks, and have a
great rest of the week!

00:35:01.516 --> 00:35:04.500 A:middle
[Applause]

