WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:25.516 --> 00:00:33.796 A:middle
[Applause]

00:00:34.296 --> 00:00:34.986 A:middle
&gt;&gt; CHRIS EDSTROM:
Good afternoon.

00:00:35.156 --> 00:00:35.886 A:middle
My name is Chris.

00:00:36.166 --> 00:00:38.256 A:middle
I'm the manager of
ICloud Web Services

00:00:39.066 --> 00:00:41.276 A:middle
and I couldn't be happier
to be here today to tell you

00:00:41.526 --> 00:00:44.326 A:middle
about the number one feature
request we received last year

00:00:44.326 --> 00:00:46.236 A:middle
for CloudKit, which
is web services.

00:00:47.516 --> 00:00:53.126 A:middle
[Applause]

00:00:53.626 --> 00:00:56.136 A:middle
So this talk expects a
little bit of familiarity

00:00:56.136 --> 00:00:58.746 A:middle
with CloudKit I will be
giving you a brief overview

00:00:58.966 --> 00:01:02.006 A:middle
of the architecture but if you
want a more deep dive we had a


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.966 --> 00:01:02.006 A:middle
of the architecture but if you
want a more deep dive we had a

00:01:02.006 --> 00:01:03.146 A:middle
couple of sessions last year.

00:01:03.536 --> 00:01:05.196 A:middle
You can go back and
review those sessions.

00:01:06.046 --> 00:01:11.976 A:middle
So in CloudKit, all of your data
is stored within a container.

00:01:12.526 --> 00:01:16.416 A:middle
Inside of this container
we have a public database

00:01:16.816 --> 00:01:20.236 A:middle
for your app data and
a private database

00:01:20.416 --> 00:01:21.686 A:middle
where your user date is stored.

00:01:22.256 --> 00:01:26.236 A:middle
In the public database,
you have the default zone,

00:01:27.516 --> 00:01:30.986 A:middle
which has records, and
in the private database,

00:01:31.116 --> 00:01:32.486 A:middle
you also have a default zone,

00:01:32.486 --> 00:01:37.136 A:middle
but you can also create custom
zones which add sync semantics

00:01:37.556 --> 00:01:40.136 A:middle
which allow you to answer
the question what has changed

00:01:40.136 --> 00:01:42.696 A:middle
since a given point in time.

00:01:42.846 --> 00:01:45.346 A:middle
Of course, you can create
records in both of these zones.

00:01:45.846 --> 00:01:50.556 A:middle
From the API perspective,
we have the CloudKit Server,

00:01:51.936 --> 00:01:54.186 A:middle
and on the native side we
have the CloudKit Framework,

00:01:55.396 --> 00:01:57.456 A:middle
which your app uses to
interface with the server.

00:01:58.696 --> 00:02:01.536 A:middle
We are introducing
CloudKit Web Services today,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.696 --> 00:02:01.536 A:middle
We are introducing
CloudKit Web Services today,

00:02:02.696 --> 00:02:04.966 A:middle
which we have used to
bill the Notes Web app,

00:02:04.966 --> 00:02:09.446 A:middle
and today you can use
to build your web app.

00:02:10.735 --> 00:02:15.036 A:middle
So what exactly is the
CloudKit Web Service?

00:02:15.196 --> 00:02:16.116 A:middle
Well, it's three things.

00:02:16.366 --> 00:02:18.906 A:middle
Number one, it's a JSON
interface to CloudKit.

00:02:19.886 --> 00:02:25.296 A:middle
Number two, it's a web sign-in
with Apple ID and number three,

00:02:25.976 --> 00:02:27.086 A:middle
it's a JavaScript library.

00:02:28.716 --> 00:02:31.396 A:middle
So let's take a look at
the JSON API features.

00:02:33.856 --> 00:02:38.326 A:middle
So your full public and private
database access, you can,

00:02:38.326 --> 00:02:41.926 A:middle
of course, create, read,
update, and delete records.

00:02:41.926 --> 00:02:44.636 A:middle
You can upload and
download assets.

00:02:45.906 --> 00:02:46.946 A:middle
You can query your data.

00:02:48.656 --> 00:02:51.056 A:middle
You can create subscriptions
and receive call backs

00:02:51.606 --> 00:02:55.756 A:middle
when your data changes, you
have user discoverability

00:02:55.756 --> 00:02:57.206 A:middle
where you can find
users' real names.

00:02:57.766 --> 00:03:02.656 A:middle
You can do sync and we
provide authentication.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:57.766 --> 00:03:02.656 A:middle
You can do sync and we
provide authentication.

00:03:03.246 --> 00:03:06.776 A:middle
So this is a long list,
and in fact it means

00:03:06.876 --> 00:03:09.426 A:middle
that we have feature parity
between the native API

00:03:09.426 --> 00:03:12.176 A:middle
and the JavaScript API.

00:03:13.516 --> 00:03:18.466 A:middle
[Applause]

00:03:18.966 --> 00:03:21.696 A:middle
So everything you can do in
the native API you can do

00:03:21.696 --> 00:03:25.016 A:middle
through the JSON API and we have
gone so far to make sure things

00:03:25.016 --> 00:03:27.996 A:middle
like field names and
parameters have the same names

00:03:27.996 --> 00:03:29.666 A:middle
in JavaScript.

00:03:30.686 --> 00:03:35.936 A:middle
And JavaScript promises
to provide completions.

00:03:36.866 --> 00:03:38.616 A:middle
Your code ends up
looking similar

00:03:38.616 --> 00:03:40.646 A:middle
between JavaScript and Swift.

00:03:41.146 --> 00:03:43.576 A:middle
I know many of you

00:03:43.576 --> 00:03:46.596 A:middle
in the audience may already
have a CloudKit application,

00:03:46.916 --> 00:03:49.866 A:middle
but if you don't, let's look
quickly about how to get started

00:03:49.946 --> 00:03:51.556 A:middle
with a new CloudKit application.

00:03:52.126 --> 00:03:55.336 A:middle
So the first thing to do
is to create a container.

00:03:56.306 --> 00:03:59.046 A:middle
You can do this either
through the WWDR portal

00:03:59.516 --> 00:04:00.286 A:middle
or through Xcode.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.516 --> 00:04:00.286 A:middle
or through Xcode.

00:04:01.516 --> 00:04:03.416 A:middle
Once you have the container
you need to create a schema.

00:04:03.416 --> 00:04:07.706 A:middle
You can do this either
through the iCloud dashboard

00:04:08.286 --> 00:04:11.066 A:middle
or your native Apple
create it on demand.

00:04:12.576 --> 00:04:14.886 A:middle
So now you have your CloudKit
application up and running.

00:04:15.566 --> 00:04:16.946 A:middle
Let's enable web access.

00:04:18.005 --> 00:04:19.346 A:middle
This is a three-step process.

00:04:20.005 --> 00:04:22.956 A:middle
Number one, you need to generate
a web service API token.

00:04:23.786 --> 00:04:27.796 A:middle
Number two, you need to set
your login call back mechanism,

00:04:28.456 --> 00:04:32.086 A:middle
and number three, you need to
define your domain restrictions.

00:04:32.086 --> 00:04:36.206 A:middle
So let's take a closer
look at these three steps.

00:04:37.266 --> 00:04:39.396 A:middle
So here is the CloudKit
dashboard.

00:04:39.396 --> 00:04:43.016 A:middle
As you can see, we have added
a new pane called API tokens

00:04:43.406 --> 00:04:45.136 A:middle
and I have already created
my first token here.

00:04:50.076 --> 00:04:54.366 A:middle
So at the top is the token
ID, which is what you pass

00:04:54.366 --> 00:04:57.386 A:middle
in when you make a
web service call,

00:04:58.466 --> 00:05:01.486 A:middle
below that I have chosen post
message as my login call back.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.466 --> 00:05:01.486 A:middle
below that I have chosen post
message as my login call back.

00:05:01.986 --> 00:05:03.866 A:middle
It is for JavaScript
applications I will get a

00:05:03.866 --> 00:05:05.966 A:middle
JavaScript call back
when the user logs in.

00:05:06.786 --> 00:05:11.966 A:middle
Alternatively I could have
chosen to have a URL redirect.

00:05:13.296 --> 00:05:15.666 A:middle
Below that I can set the
origins that are allowed

00:05:15.666 --> 00:05:18.656 A:middle
to access my CloudKit
data through web services.

00:05:18.656 --> 00:05:21.736 A:middle
I have here chosen that any
domain can access my data

00:05:22.436 --> 00:05:24.546 A:middle
but for added security
I could have restricted

00:05:24.546 --> 00:05:28.846 A:middle
to viewer domains so now we
have enabled web services.

00:05:29.556 --> 00:05:31.616 A:middle
Let's get some users to log in.

00:05:33.316 --> 00:05:36.446 A:middle
So authentication is
handled transparently.

00:05:37.056 --> 00:05:39.506 A:middle
What I mean by that is
when a user calls an API

00:05:39.506 --> 00:05:41.436 A:middle
that requires authentication,

00:05:41.666 --> 00:05:43.646 A:middle
we will return a
specially formed payload

00:05:44.026 --> 00:05:47.236 A:middle
with a redirect URL that
you can send your users to.

00:05:47.896 --> 00:05:51.176 A:middle
They then authenticate
with an existing Apple ID

00:05:51.496 --> 00:05:55.126 A:middle
or they can create a new Apple
ID right in the sign-in flow.

00:05:56.256 --> 00:05:59.556 A:middle
And to protect users' privacy
we don't provide user name

00:05:59.556 --> 00:06:00.936 A:middle
or password to your app.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.556 --> 00:06:00.936 A:middle
or password to your app.

00:06:01.756 --> 00:06:04.536 A:middle
Instead we give you a
stable anonymous identifier

00:06:04.686 --> 00:06:05.186 A:middle
for the user.

00:06:05.266 --> 00:06:09.216 A:middle
So let's put all of
these things together

00:06:09.286 --> 00:06:11.826 A:middle
and let's build a
quick example app.

00:06:14.276 --> 00:06:16.466 A:middle
So we are going to
build a tasks app.

00:06:16.756 --> 00:06:22.136 A:middle
It stores tasks, and the com
dot example dot tasks container.

00:06:23.466 --> 00:06:27.876 A:middle
So let's create our first task.

00:06:28.616 --> 00:06:36.996 A:middle
So what I will do is I will
call the records modify API,

00:06:38.646 --> 00:06:39.826 A:middle
and pass in a JSON body.

00:06:40.446 --> 00:06:43.336 A:middle
This JSON body says to create
a new task it has a unique

00:06:43.336 --> 00:06:47.746 A:middle
identifier task one and the
value of the task is buy milk.

00:06:48.736 --> 00:06:51.946 A:middle
Let's go ahead and send
that over to the server.

00:06:52.026 --> 00:06:54.386 A:middle
So we didn't have an
authenticated user.

00:06:55.186 --> 00:06:58.816 A:middle
So in the response
we get a redirect URL

00:06:58.816 --> 00:07:00.846 A:middle
where we can send the
user to authenticate.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:58.816 --> 00:07:00.846 A:middle
where we can send the
user to authenticate.

00:07:01.406 --> 00:07:04.556 A:middle
Let's go ahead and
follow that URL.

00:07:04.766 --> 00:07:05.766 A:middle
So here is the sign-in UI.

00:07:05.856 --> 00:07:09.786 A:middle
You will notice it has the
app name and the app icon

00:07:10.266 --> 00:07:13.286 A:middle
and the ability to create
a new Apple ID right here.

00:07:14.596 --> 00:07:17.636 A:middle
We already have one, so
let's go ahead and sign in.

00:07:18.536 --> 00:07:21.786 A:middle
Now, once the user is signed in,
you will get a session ID back

00:07:22.096 --> 00:07:24.396 A:middle
to your application through
the call back mechanism you

00:07:24.396 --> 00:07:25.096 A:middle
defined earlier.

00:07:25.746 --> 00:07:30.216 A:middle
So we can go ahead and append
this session ID to the URL

00:07:30.216 --> 00:07:32.666 A:middle
and send the same request again.

00:07:34.836 --> 00:07:35.696 A:middle
Much better.

00:07:36.736 --> 00:07:39.496 A:middle
Now we receive back a
successful creation.

00:07:39.756 --> 00:07:41.646 A:middle
You can see that the
record name is there,

00:07:42.146 --> 00:07:44.846 A:middle
the change tag is there,
the fields are there

00:07:44.906 --> 00:07:46.546 A:middle
and some more metadata
about the record.

00:07:47.526 --> 00:07:50.336 A:middle
This is a lot of JSON
parsing and you have to worry

00:07:50.336 --> 00:07:53.686 A:middle
about error handling and
throttling and we want

00:07:53.686 --> 00:07:55.826 A:middle
to make this API as
easy to use as possible.

00:07:56.476 --> 00:08:01.346 A:middle
So we are proud to introduce
CloudKit JS a wrapper


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:56.476 --> 00:08:01.346 A:middle
So we are proud to introduce
CloudKit JS a wrapper

00:08:01.346 --> 00:08:02.706 A:middle
on top of the JSON.

00:08:02.706 --> 00:08:04.626 A:middle
To talk about this I would

00:08:04.626 --> 00:08:06.436 A:middle
like to invite Onar
Vikingstad to the stage.

00:08:07.256 --> 00:08:07.323 A:middle
I'm.

00:08:13.566 --> 00:08:16.556 A:middle
&gt;&gt; ONAR VIKINGSTAD:
Engineering Manager at iCloud.

00:08:16.556 --> 00:08:21.196 A:middle
And I'm here to talk
about CloudKit JS.

00:08:21.196 --> 00:08:26.076 A:middle
CloudKit JS lets you connect
to CloudKit from JavaScript

00:08:27.146 --> 00:08:30.956 A:middle
and it's a small self-contained
library that works well

00:08:30.956 --> 00:08:33.876 A:middle
with any framework or library
you might already be using

00:08:33.905 --> 00:08:34.405 A:middle
on the web.

00:08:35.816 --> 00:08:36.806 A:middle
It's also important to note

00:08:36.806 --> 00:08:39.626 A:middle
that this is a low level
transport API which means

00:08:39.626 --> 00:08:42.395 A:middle
that it doesn't really
intend to be a data store.

00:08:42.395 --> 00:08:45.196 A:middle
It doesn't allow a lot
of abstraction on top

00:08:45.196 --> 00:08:48.526 A:middle
of the JSON API so if you are
already using a data store

00:08:48.986 --> 00:08:53.596 A:middle
please keep using that
and you should be able

00:08:53.596 --> 00:08:56.066 A:middle
to plug CloudKit JS
straight into it.

00:08:57.296 --> 00:08:59.576 A:middle
Also it allows for
an easy transition

00:08:59.576 --> 00:09:00.656 A:middle
from CloudKit Framework.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.576 --> 00:09:00.656 A:middle
from CloudKit Framework.

00:09:01.266 --> 00:09:03.886 A:middle
So you might already be using
CloudKit Framework on iOS

00:09:03.886 --> 00:09:07.966 A:middle
and OS X in the terms and
concepts, method names

00:09:07.966 --> 00:09:09.416 A:middle
and class names are
going to be the same

00:09:10.046 --> 00:09:12.436 A:middle
so it will be an
easy transition.

00:09:13.346 --> 00:09:15.426 A:middle
That said, there will
be some differences.

00:09:15.766 --> 00:09:18.026 A:middle
This is the web, after
all, and it's JavaScript

00:09:18.026 --> 00:09:20.246 A:middle
so there will be
a few differences,

00:09:20.246 --> 00:09:22.976 A:middle
for instance we are using
JavaScript promises for all

00:09:22.976 --> 00:09:24.176 A:middle
of the asynchronous behavior

00:09:24.676 --> 00:09:30.316 A:middle
and we will see examples
of that later on.

00:09:31.036 --> 00:09:34.436 A:middle
In terms of browser
support, we support all

00:09:34.436 --> 00:09:38.996 A:middle
of the major browsers you would
expect Safari, FireFox, Chrome,

00:09:39.486 --> 00:09:41.716 A:middle
Internet Explorer and
the new Microsoft Edge.

00:09:42.606 --> 00:09:47.586 A:middle
We support Note JS if
you want to do server

00:09:47.586 --> 00:09:53.816 A:middle
to server connections
on behalf of the user.

00:09:53.816 --> 00:09:56.136 A:middle
So before we start looking more

00:09:56.136 --> 00:09:58.296 A:middle
at the API let me
give you a quick demo.

00:09:58.296 --> 00:10:11.726 A:middle
So what we are looking at here
is the CloudKit catalog sample


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.296 --> 00:10:11.726 A:middle
So what we are looking at here
is the CloudKit catalog sample

00:10:11.726 --> 00:10:12.356 A:middle
code project.

00:10:13.106 --> 00:10:15.576 A:middle
This is available both as
a downloadable zip file,

00:10:15.576 --> 00:10:17.336 A:middle
you can get this on
the developer website,

00:10:17.336 --> 00:10:20.446 A:middle
but what we are looking at
here is the hosted version

00:10:20.446 --> 00:10:21.576 A:middle
which is also available.

00:10:21.886 --> 00:10:24.246 A:middle
So it is providing
live code examples

00:10:24.246 --> 00:10:25.846 A:middle
that you can execute
in any browser.

00:10:26.616 --> 00:10:29.076 A:middle
You will see a list of
features on the left.

00:10:29.076 --> 00:10:30.746 A:middle
We are looking at
the ReadMe right now.

00:10:31.306 --> 00:10:33.406 A:middle
This is giving you some
instructions on how

00:10:33.406 --> 00:10:36.026 A:middle
to get started on CloudKit JS.

00:10:36.236 --> 00:10:38.556 A:middle
Let's move to the first
section called authentication.

00:10:39.076 --> 00:10:41.096 A:middle
So you will notice each of these
sections have a description

00:10:41.096 --> 00:10:43.016 A:middle
on top and this example
is telling you how

00:10:43.056 --> 00:10:47.446 A:middle
to use authentication, and below
that you have a code example.

00:10:47.836 --> 00:10:51.286 A:middle
So this code snippet
specifically is checking

00:10:51.286 --> 00:10:52.896 A:middle
for authentication
state of the user.

00:10:53.256 --> 00:10:55.366 A:middle
If the user is not
already signed in,

00:10:55.366 --> 00:10:58.536 A:middle
it's going to present
a signed in button.

00:10:58.816 --> 00:11:01.556 A:middle
And you can actually go ahead
on top here and run this code.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.816 --> 00:11:01.556 A:middle
And you can actually go ahead
on top here and run this code.

00:11:01.556 --> 00:11:03.636 A:middle
So if I click this
run code button,

00:11:04.166 --> 00:11:06.846 A:middle
it's going to execute this code,
and you will see it scrolls

00:11:06.846 --> 00:11:08.016 A:middle
down through a section

00:11:08.436 --> 00:11:10.656 A:middle
and it tells us we aren
unauthenticated user

00:11:10.656 --> 00:11:13.516 A:middle
at this point and we look
at the sign-in button.

00:11:13.516 --> 00:11:16.856 A:middle
I can go ahead and click
the sign-in button.

00:11:17.576 --> 00:11:24.806 A:middle
I type in any Apple
ID and password.

00:11:28.886 --> 00:11:32.116 A:middle
And you notice the
window closed.

00:11:32.116 --> 00:11:34.946 A:middle
And that was the Apple
hosted authentication page.

00:11:35.336 --> 00:11:37.476 A:middle
So at this point your web
application is signed in.

00:11:37.476 --> 00:11:40.806 A:middle
This is the sample app and
you see we have the name

00:11:40.806 --> 00:11:43.166 A:middle
of the user, first
and last name as well

00:11:43.166 --> 00:11:46.886 A:middle
as the sign-out button
instead of the sign-in button.

00:11:46.886 --> 00:11:48.356 A:middle
This is another feature
of CloudKit

00:11:48.356 --> 00:11:49.646 A:middle
which is discoverability.

00:11:50.136 --> 00:11:53.726 A:middle
If the user has opted in, the
user can choose to share first

00:11:53.726 --> 00:11:57.386 A:middle
and last name with a developer
as well as being discoverable

00:11:57.386 --> 00:11:59.576 A:middle
in the container for
other users to find them.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:00.426 --> 00:12:02.576 A:middle
So now that we have the first
and last name we are using

00:12:02.576 --> 00:12:05.666 A:middle
that here to populate
the top right corner.

00:12:06.236 --> 00:12:07.076 A:middle
All right.

00:12:07.266 --> 00:12:11.446 A:middle
So now that we are signed
in, we can do some operations

00:12:11.446 --> 00:12:12.516 A:middle
so let's go to records.

00:12:14.086 --> 00:12:15.976 A:middle
And this is showing you
how we can save a record

00:12:15.976 --> 00:12:17.126 A:middle
in the private database.

00:12:18.096 --> 00:12:20.366 A:middle
So we see a few fields
on the top here.

00:12:20.826 --> 00:12:21.826 A:middle
We have the record name,

00:12:21.896 --> 00:12:23.846 A:middle
which is the unique
identifier of the record.

00:12:24.666 --> 00:12:27.016 A:middle
We have a zone name
which is the default zone

00:12:27.016 --> 00:12:29.166 A:middle
but it will be any custom
zone that you set up,

00:12:29.596 --> 00:12:32.556 A:middle
and if you have three custom
field names that are defined

00:12:32.556 --> 00:12:33.436 A:middle
in the CloudKit schema.

00:12:34.326 --> 00:12:36.416 A:middle
So in this example,
we have a name field

00:12:36.416 --> 00:12:37.526 A:middle
which is the string value.

00:12:37.616 --> 00:12:40.476 A:middle
We have a location field,
which is the geo location value

00:12:40.476 --> 00:12:44.566 A:middle
and then we have an asset field
which lets you upload a file.

00:12:44.566 --> 00:12:47.736 A:middle
So I will go ahead
and choose a file.

00:12:47.736 --> 00:12:52.866 A:middle
I will choose this green
field landscape J Peg.

00:12:53.786 --> 00:12:55.496 A:middle
And I'm going to
go back up on top

00:12:55.496 --> 00:12:58.876 A:middle
and give this the
name landscape 1.

00:12:58.876 --> 00:13:01.086 A:middle
This is the record name which
is the unique identifier.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.876 --> 00:13:01.086 A:middle
This is the record name which
is the unique identifier.

00:13:01.706 --> 00:13:05.006 A:middle
And I will change the name here
to just called it green field.

00:13:05.446 --> 00:13:09.446 A:middle
So now that I have the field
filled out I can run the code

00:13:09.446 --> 00:13:12.106 A:middle
and it will save the record
to the database as well

00:13:12.106 --> 00:13:13.846 A:middle
as upload assets
to asset storage.

00:13:14.596 --> 00:13:18.416 A:middle
So you see when it's completed
we are left with a result

00:13:18.416 --> 00:13:21.036 A:middle
and this is actually what
the server responded with,

00:13:21.416 --> 00:13:24.026 A:middle
effectively with the JSON
we are representing it here

00:13:24.026 --> 00:13:24.526 A:middle
in the table.

00:13:25.096 --> 00:13:27.956 A:middle
We have a few metadata
fields as well

00:13:27.956 --> 00:13:29.356 A:middle
as the three custom feel fields.

00:13:29.406 --> 00:13:32.476 A:middle
The green field, the
location and the link

00:13:32.476 --> 00:13:33.286 A:middle
to download the asset.

00:13:33.356 --> 00:13:40.056 A:middle
So just to show you this
actually got stored we can go

00:13:40.056 --> 00:13:47.746 A:middle
to fetch record and I can type
in landscape 1, run this code,

00:13:47.746 --> 00:13:50.056 A:middle
and we have the same
record again.

00:13:50.056 --> 00:13:52.426 A:middle
That's how simple it
is to save records

00:13:52.426 --> 00:13:54.956 A:middle
with CloudKit, with CloudKit JS.

00:13:55.096 --> 00:14:00.296 A:middle
Now, let's go and do another
feature called querying.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:55.096 --> 00:14:00.296 A:middle
Now, let's go and do another
feature called querying.

00:14:00.396 --> 00:14:04.586 A:middle
So to do that, I will first go
ahead and sign the user out.

00:14:05.876 --> 00:14:09.856 A:middle
So queries allow you
to get subset of data

00:14:09.856 --> 00:14:12.876 A:middle
from the database, and
in this code example,

00:14:12.876 --> 00:14:14.946 A:middle
we are showing you how we
can query the public database

00:14:15.426 --> 00:14:17.866 A:middle
and if you set up the
security roles appropriately

00:14:17.866 --> 00:14:20.726 A:middle
on the schema, you can
actually query for data

00:14:20.726 --> 00:14:23.376 A:middle
in the public database even if
the user is not authenticated

00:14:23.786 --> 00:14:25.836 A:middle
that we are showing here.

00:14:25.836 --> 00:14:27.796 A:middle
I can go ahead and run this code

00:14:27.796 --> 00:14:32.646 A:middle
and this example is basically
using the current location

00:14:32.706 --> 00:14:37.816 A:middle
in a Monscone center to send
a query and sort results based

00:14:37.816 --> 00:14:40.106 A:middle
on proximity to where
we are currently.

00:14:40.176 --> 00:14:43.476 A:middle
I can go ahead and run the code.

00:14:44.656 --> 00:14:45.936 A:middle
And I get back two records.

00:14:46.426 --> 00:14:49.486 A:middle
The first one being Iceland,
and the second one being Italy.

00:14:49.486 --> 00:14:52.046 A:middle
And Iceland is closer
to where we are

00:14:52.046 --> 00:14:53.566 A:middle
than Italy, so that makes sense.

00:14:53.566 --> 00:14:57.106 A:middle
And so I'm not going
to go through all

00:14:57.106 --> 00:14:58.086 A:middle
of the additional features

00:14:58.636 --> 00:15:00.526 A:middle
but we encourage
you to check it out.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:58.636 --> 00:15:00.526 A:middle
but we encourage
you to check it out.

00:15:00.526 --> 00:15:03.306 A:middle
You can go to
developer@Apple.com/CloudKit

00:15:03.766 --> 00:15:07.576 A:middle
and you can run this on
any browser yourself.

00:15:10.516 --> 00:15:18.886 A:middle
[Applause]

00:15:19.386 --> 00:15:24.486 A:middle
So CloudKit is the foundation
for a lot of our new services

00:15:24.486 --> 00:15:27.666 A:middle
at Apple including iCloud
drive and iCloud photo library.

00:15:28.436 --> 00:15:32.276 A:middle
This year we also
introduced a notes application

00:15:32.706 --> 00:15:35.026 A:middle
for iOS and OS X.

00:15:35.106 --> 00:15:37.386 A:middle
This is also coming to
the CloudKit platform,

00:15:37.386 --> 00:15:39.666 A:middle
but in addition to
the notes application

00:15:39.666 --> 00:15:46.686 A:middle
on native we have a notes
web application on Apple.com.

00:15:46.826 --> 00:15:50.766 A:middle
In fact, it's using CloudKit JS
in exactly the same way as you

00:15:50.766 --> 00:15:52.146 A:middle
as a developer can now use it.

00:15:52.636 --> 00:15:54.676 A:middle
There is no additional
Apple magic here.

00:15:55.416 --> 00:15:59.376 A:middle
So hopefully you are as excited
about CloudKit JS as we are

00:15:59.376 --> 00:16:01.966 A:middle
and see a lot of new
possibilities here and want


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.376 --> 00:16:01.966 A:middle
and see a lot of new
possibilities here and want

00:16:01.966 --> 00:16:03.046 A:middle
to know how to get started.

00:16:04.346 --> 00:16:05.586 A:middle
So let's take a look.

00:16:06.886 --> 00:16:12.096 A:middle
So first off, we need to make
sure you insert a script tag

00:16:12.096 --> 00:16:15.656 A:middle
on your web page, and
you do this by pointing

00:16:15.656 --> 00:16:18.276 A:middle
to the CD unhosted
version of CloudKit JS.

00:16:18.586 --> 00:16:23.046 A:middle
So this will get CloudKit JS
included, and then secondly,

00:16:23.046 --> 00:16:24.776 A:middle
you need to configure
the CloudKit instance.

00:16:24.776 --> 00:16:27.576 A:middle
So you are going to have the
CloudKit name space available

00:16:27.576 --> 00:16:30.376 A:middle
and you can call the
CloudKit configure method

00:16:30.956 --> 00:16:32.776 A:middle
and you give it a
container identifier

00:16:33.256 --> 00:16:34.676 A:middle
that your application is using.

00:16:35.116 --> 00:16:37.306 A:middle
The environment you want to
target, either production

00:16:37.306 --> 00:16:40.266 A:middle
or development, and then
you specify the API token

00:16:40.436 --> 00:16:43.206 A:middle
that you saw Chris generate
through the CloudKit dashboard.

00:16:43.756 --> 00:16:44.616 A:middle
That's all you need.

00:16:44.616 --> 00:16:51.336 A:middle
At this point you are ready to
start making CloudKit API calls.

00:16:51.516 --> 00:16:55.126 A:middle
Next, you probably want to
authenticate your users just

00:16:55.126 --> 00:16:56.606 A:middle
like we saw in the sample app.

00:16:57.526 --> 00:17:01.306 A:middle
So on iOS and OS X this is
straight forward with CloudKit.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:57.526 --> 00:17:01.306 A:middle
So on iOS and OS X this is
straight forward with CloudKit.

00:17:01.986 --> 00:17:04.925 A:middle
All you need to do since
most users are already signed

00:17:04.925 --> 00:17:09.935 A:middle
into iCloud on the device is
to call the fetch user method

00:17:09.935 --> 00:17:12.596 A:middle
on the container and you
get back a user record

00:17:13.276 --> 00:17:16.066 A:middle
and this user record is going
to have a stable identifier.

00:17:16.826 --> 00:17:19.056 A:middle
So this is all you really need
to do to authenticate users

00:17:19.056 --> 00:17:21.046 A:middle
through CloudKit on
the native devices.

00:17:21.566 --> 00:17:23.986 A:middle
There is no explicit
login, there is no UI.

00:17:24.126 --> 00:17:25.336 A:middle
It's all seamless.

00:17:25.976 --> 00:17:30.686 A:middle
On the web, however, it's going
to work a little bit differently

00:17:31.116 --> 00:17:33.076 A:middle
in that the browser is not
already going to be signed

00:17:33.076 --> 00:17:36.526 A:middle
in so you have to provide a
location for the sign-in button.

00:17:36.616 --> 00:17:38.156 A:middle
Like we saw on the sample app,

00:17:38.156 --> 00:17:40.216 A:middle
clicking it will
open the new window.

00:17:40.216 --> 00:17:42.556 A:middle
There is an Apple hosted
authentication page

00:17:43.316 --> 00:17:46.796 A:middle
and you notice on this
page we have both the iCon

00:17:46.796 --> 00:17:49.186 A:middle
of the application as well as
the name of the application,

00:17:49.476 --> 00:17:51.546 A:middle
and this is coming
out of ITunes Connect

00:17:51.546 --> 00:17:53.516 A:middle
and it's published
in the App Store.

00:17:54.086 --> 00:17:57.696 A:middle
And the user types in their
user name and credentials.

00:17:57.696 --> 00:17:59.586 A:middle
This obviously only
goes back to Apple.

00:17:59.586 --> 00:18:02.116 A:middle
There is also a two-step
verification


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.586 --> 00:18:02.116 A:middle
There is also a two-step
verification

00:18:02.116 --> 00:18:03.926 A:middle
if the account is
set up for that.

00:18:04.496 --> 00:18:08.366 A:middle
And when this process completes,
the window is going to close

00:18:08.366 --> 00:18:10.126 A:middle
and it's going to send
back a post message

00:18:10.166 --> 00:18:13.556 A:middle
to the opener window and it will
contain the CloudKit session.

00:18:13.556 --> 00:18:16.616 A:middle
So at this point
your CloudKit JS,

00:18:16.616 --> 00:18:18.266 A:middle
your web application
is going to be able

00:18:18.266 --> 00:18:21.296 A:middle
to start making authenticated
calls to CloudKit.

00:18:24.536 --> 00:18:29.236 A:middle
So to implement authentication
on your page, you first have

00:18:29.236 --> 00:18:31.106 A:middle
to provide a location
for a sign in button.

00:18:31.726 --> 00:18:34.856 A:middle
So you set a development to give
it the ID Apple sign-in button.

00:18:36.376 --> 00:18:39.306 A:middle
Secondly, you have to call
the method called set up off,

00:18:39.306 --> 00:18:40.756 A:middle
and this is going to check

00:18:40.756 --> 00:18:42.296 A:middle
for the authentication
state of the user.

00:18:42.296 --> 00:18:47.066 A:middle
So if the user is already signed
in, a user info object is going

00:18:47.066 --> 00:18:50.526 A:middle
to come back, and that's
all you need to look for.

00:18:50.816 --> 00:18:53.626 A:middle
In addition to user info object
is going to have a record name

00:18:53.926 --> 00:18:55.806 A:middle
and this is the stable
identifier

00:18:55.806 --> 00:18:57.056 A:middle
that we just looked at.

00:18:57.056 --> 00:18:59.956 A:middle
So this stable identifier
is going to be the same now

00:18:59.956 --> 00:19:02.926 A:middle
on the web as it is on iOS
and OS X so you have a way


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.956 --> 00:19:02.926 A:middle
on the web as it is on iOS
and OS X so you have a way

00:19:02.926 --> 00:19:06.326 A:middle
of referencing the same user
across all of the platforms.

00:19:06.956 --> 00:19:11.616 A:middle
So in addition to checking
for authentication state,

00:19:11.616 --> 00:19:14.036 A:middle
you also need to
handle what happens

00:19:14.036 --> 00:19:15.646 A:middle
when user signs in or signs out.

00:19:16.716 --> 00:19:20.266 A:middle
So you call when user
signs in on the container,

00:19:20.616 --> 00:19:23.956 A:middle
and you get back a promise,
and it's going to resolve

00:19:23.956 --> 00:19:25.286 A:middle
as soon as the user signs in.

00:19:25.826 --> 00:19:30.806 A:middle
And it's exactly the same
for when the user signs out.

00:19:32.516 --> 00:19:36.546 A:middle
So beyond those default
capabilities in CloudKit JS

00:19:36.546 --> 00:19:37.586 A:middle
around authentication.

00:19:37.936 --> 00:19:39.986 A:middle
We also provide toggles and ways

00:19:40.066 --> 00:19:42.626 A:middle
to customize how you
handle authentication.

00:19:43.176 --> 00:19:47.746 A:middle
So this next example is showing
you how you can actually persist

00:19:47.746 --> 00:19:51.066 A:middle
the AUTH between sessions
so CloudKit is not going

00:19:51.066 --> 00:19:54.806 A:middle
to write cookies on your
domain so if you want a cookie

00:19:54.806 --> 00:19:57.376 A:middle
to be written to store
the AUTH session,

00:19:57.376 --> 00:19:59.176 A:middle
you have to set the
persist property

00:19:59.176 --> 00:20:00.676 A:middle
to true in the configuration.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.176 --> 00:20:00.676 A:middle
to true in the configuration.

00:20:01.976 --> 00:20:05.516 A:middle
Now, instead of cookies,
you might actually want

00:20:05.516 --> 00:20:06.976 A:middle
to store the session
in some other way.

00:20:07.626 --> 00:20:11.726 A:middle
So this is showing you a couple
of hooks in the configuration.

00:20:11.726 --> 00:20:14.636 A:middle
So we have a put token and a get
token method and these are going

00:20:14.636 --> 00:20:18.696 A:middle
to get called anytime for put
token anytime cloud JS receives

00:20:18.696 --> 00:20:20.936 A:middle
token from the server.

00:20:20.936 --> 00:20:28.676 A:middle
So one example here might be
you want to store the session

00:20:28.676 --> 00:20:31.166 A:middle
in local storage or perhaps
you might want to store it

00:20:31.166 --> 00:20:33.346 A:middle
in your own server so
you can make server

00:20:33.346 --> 00:20:36.046 A:middle
to server calls based
on behalf of the user.

00:20:40.096 --> 00:20:42.806 A:middle
So next let's talk
about record operations.

00:20:43.686 --> 00:20:47.156 A:middle
And just like Chris showed
you earlier with the JSON.

00:20:47.866 --> 00:20:51.986 A:middle
A record in CloudKit JS is
basically an object like this.

00:20:52.636 --> 00:20:56.196 A:middle
So we have a record with
a record named task 1.

00:20:56.876 --> 00:20:57.916 A:middle
We have record type tasks,

00:20:57.916 --> 00:21:02.226 A:middle
and we have some metadata
fields created and modified


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:57.916 --> 00:21:02.226 A:middle
and we have some metadata
fields created and modified

00:21:02.226 --> 00:21:05.616 A:middle
which will contain the user that
created and modified the record

00:21:05.616 --> 00:21:08.016 A:middle
as well as the time stamp.

00:21:08.016 --> 00:21:11.006 A:middle
The record change tag, which
is the version of this record

00:21:11.656 --> 00:21:14.656 A:middle
for conflict resolution,
and then comes all

00:21:14.656 --> 00:21:16.466 A:middle
of your custom fields below

00:21:16.466 --> 00:21:17.896 A:middle
that that you have
defined in the schema.

00:21:18.376 --> 00:21:22.776 A:middle
In this example we just have one
task name, it's a type string

00:21:22.776 --> 00:21:24.196 A:middle
and the value of buy milk.

00:21:24.756 --> 00:21:31.286 A:middle
Now, obviously you might want
to store other types of fields

00:21:31.396 --> 00:21:36.406 A:middle
than strings so this is
giving you a comparison

00:21:36.446 --> 00:21:38.596 A:middle
of what those look like
compared to iOS and OS X.

00:21:39.396 --> 00:21:41.166 A:middle
So in CloudKit framework
we have a string

00:21:41.166 --> 00:21:43.626 A:middle
but in CloudKit JS we just
use JavaScript strings.

00:21:44.276 --> 00:21:45.556 A:middle
Same thing for number,

00:21:46.516 --> 00:21:49.506 A:middle
for NS data we use basic
code 64 and coded binary.

00:21:49.506 --> 00:21:52.526 A:middle
NS data we have a
JavaScript number

00:21:52.526 --> 00:21:54.826 A:middle
which is unit time
in milliseconds.

00:21:56.306 --> 00:21:59.366 A:middle
So for the more complex
objects like CL location,

00:21:59.366 --> 00:22:03.156 A:middle
we have a location object,
and a reference object


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.366 --> 00:22:03.156 A:middle
we have a location object,
and a reference object

00:22:03.156 --> 00:22:06.276 A:middle
and also an asset object,
and we ask you to look

00:22:06.276 --> 00:22:12.806 A:middle
in the documentation for how
each one of these are defined.

00:22:12.946 --> 00:22:16.456 A:middle
So in terms of creating a
record, you can go ahead

00:22:16.456 --> 00:22:18.056 A:middle
and define one of
these object literals.

00:22:18.206 --> 00:22:21.166 A:middle
In this example we're just
saying record type is tasks

00:22:22.136 --> 00:22:26.516 A:middle
and we have one field task
name with a value of buy milk

00:22:26.516 --> 00:22:29.806 A:middle
and you can go ahead and
call the save record method

00:22:30.376 --> 00:22:32.426 A:middle
on the database object.

00:22:32.996 --> 00:22:35.966 A:middle
You notice though in this case
we didn't actually give it the

00:22:35.966 --> 00:22:36.446 A:middle
record name.

00:22:36.916 --> 00:22:39.126 A:middle
So the record name is unique
identifier of a record.

00:22:39.526 --> 00:22:41.716 A:middle
So by not specifying that
the server is actually going

00:22:41.716 --> 00:22:43.656 A:middle
to go ahead and generate
one for us.

00:22:44.206 --> 00:22:48.046 A:middle
Also we don't specify the string
type for this particular field,

00:22:48.586 --> 00:22:50.586 A:middle
so CloudKit JS will do
some type inference here

00:22:50.586 --> 00:22:53.736 A:middle
and it will figure out that
this value is fully a string

00:22:53.736 --> 00:22:56.986 A:middle
to you have to specify this for
all of the basic types we have.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:01.416 --> 00:23:05.646 A:middle
So next we want to talk about
queries, and this is going

00:23:05.646 --> 00:23:08.396 A:middle
to work a little bit
different on the web

00:23:08.396 --> 00:23:09.896 A:middle
through the JavaScript API.

00:23:10.956 --> 00:23:15.456 A:middle
So on iOS and OS X in foundation
framework we have NSPredicate.

00:23:16.256 --> 00:23:22.016 A:middle
And NSPredicate is great but
it's not really that natural

00:23:22.016 --> 00:23:25.026 A:middle
for the web and it
doesn't really conform well

00:23:25.026 --> 00:23:27.556 A:middle
to the JSON API we are exposing
through the web services

00:23:28.486 --> 00:23:31.106 A:middle
so we have something that looks
very similar to Java literals

00:23:31.106 --> 00:23:34.126 A:middle
for records in that you just
define a query like this.

00:23:34.246 --> 00:23:36.796 A:middle
In this example we are
saying record type is tasks

00:23:37.666 --> 00:23:41.156 A:middle
and we call perform query on
the database, and we are going

00:23:41.156 --> 00:23:45.336 A:middle
to get back all of the
records of type tasks.

00:23:45.506 --> 00:23:48.156 A:middle
Now, you can do something
a bit more sophisticated.

00:23:48.236 --> 00:23:50.746 A:middle
So in this next example we
are providing some options

00:23:51.406 --> 00:23:52.736 A:middle
to the perform query method.

00:23:53.336 --> 00:23:55.086 A:middle
So we are saying this
hard key is task name.

00:23:55.086 --> 00:23:57.226 A:middle
We are only going to get
back the task name field

00:23:57.226 --> 00:23:57.976 A:middle
from every record.

00:23:57.976 --> 00:24:03.406 A:middle
We are limiting the result set
to ten and we will limit records


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:57.976 --> 00:24:03.406 A:middle
We are limiting the result set
to ten and we will limit records

00:24:03.486 --> 00:24:09.296 A:middle
in the all task custom zone.

00:24:09.506 --> 00:24:13.786 A:middle
So queries also allow you
to go and specify a filter.

00:24:14.536 --> 00:24:17.956 A:middle
So in this next example, we
are saying still, you know,

00:24:17.956 --> 00:24:20.616 A:middle
we want to look for record
types of tasks but we only want

00:24:20.616 --> 00:24:22.286 A:middle
to get back tasks
of priority one.

00:24:23.276 --> 00:24:24.826 A:middle
And we call it perform query

00:24:24.916 --> 00:24:27.386 A:middle
and we get back all
task with priority one.

00:24:28.326 --> 00:24:31.096 A:middle
You notice here we are
using the equals comparators

00:24:31.096 --> 00:24:33.606 A:middle
and we have a lot more
comparators available

00:24:33.606 --> 00:24:36.296 A:middle
and it depends on the field
type you are querying on so look

00:24:36.296 --> 00:24:38.066 A:middle
in the field documentation

00:24:38.066 --> 00:24:43.626 A:middle
for where each one
of those are defined.

00:24:43.626 --> 00:24:46.356 A:middle
As you saw earlier, we were
limiting the result set

00:24:46.656 --> 00:24:49.056 A:middle
and so the question
is how do you paginate

00:24:49.056 --> 00:24:50.156 A:middle
through the results.

00:24:50.156 --> 00:24:53.516 A:middle
So this is showing
one example of that.

00:24:53.516 --> 00:24:54.876 A:middle
So results limits at 10.

00:24:54.876 --> 00:24:58.966 A:middle
So we will get back
the first 10 records

00:24:58.966 --> 00:25:02.616 A:middle
when this promise resolves but
there is more coming property


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.966 --> 00:25:02.616 A:middle
when this promise resolves but
there is more coming property

00:25:02.616 --> 00:25:03.576 A:middle
on the response object.

00:25:03.576 --> 00:25:05.996 A:middle
So this is telling
us more records

00:25:05.996 --> 00:25:07.956 A:middle
to fetch beyond the
10 we just got

00:25:08.446 --> 00:25:11.716 A:middle
so we can pass the response
object back to perform query

00:25:11.986 --> 00:25:15.006 A:middle
and CloudKit JS will do all of
the work here for us in terms

00:25:15.006 --> 00:25:17.966 A:middle
of fetching the next set of
ten records from where we are.

00:25:18.666 --> 00:25:21.286 A:middle
And in this example we are
showing should we can chain

00:25:21.286 --> 00:25:22.306 A:middle
these promises together.

00:25:22.306 --> 00:25:26.786 A:middle
So next assets.

00:25:26.956 --> 00:25:32.046 A:middle
So assets work a little
bit differently in CloudKit

00:25:32.216 --> 00:25:34.526 A:middle
than the other field types.

00:25:35.326 --> 00:25:38.266 A:middle
So assets are actually not
stored with the record itself,

00:25:38.266 --> 00:25:41.396 A:middle
assets are stored outside in
something we call asset storage.

00:25:41.776 --> 00:25:43.406 A:middle
So the record simply
has a reference

00:25:43.436 --> 00:25:44.846 A:middle
to the asset and asset storage.

00:25:45.766 --> 00:25:49.136 A:middle
The good news is CloudKit JS
handles this seamlessly for you.

00:25:49.886 --> 00:25:53.286 A:middle
In this example we have a
web page with input element

00:25:53.656 --> 00:25:55.726 A:middle
and lets users select
a file like this one

00:25:55.726 --> 00:25:57.266 A:middle
in the CloudKit catalogue app.

00:25:58.246 --> 00:26:00.306 A:middle
So when a file is selected,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.246 --> 00:26:00.306 A:middle
So when a file is selected,

00:26:00.506 --> 00:26:03.576 A:middle
the handle file select
function is going to get called,

00:26:04.466 --> 00:26:06.746 A:middle
and all we need to do is just
get a reference to the file,

00:26:07.526 --> 00:26:09.056 A:middle
and we can use that as the value

00:26:09.056 --> 00:26:11.466 A:middle
for the asset field
we are saving.

00:26:11.996 --> 00:26:14.416 A:middle
So CloudKit JS is here going
to do the work for us in terms

00:26:14.416 --> 00:26:17.886 A:middle
of uploading the asset to asset
storage and then save the record

00:26:18.256 --> 00:26:25.876 A:middle
in the database with a
reference to the asset.

00:26:26.096 --> 00:26:29.626 A:middle
Downloading assets even simpler
in that when you are asking

00:26:29.626 --> 00:26:32.356 A:middle
for a field that has
an asset, you are going

00:26:32.356 --> 00:26:33.786 A:middle
to get back a download URL.

00:26:33.786 --> 00:26:37.606 A:middle
In this example we are fetching
one record, a user record,

00:26:38.326 --> 00:26:42.136 A:middle
and you notice here the value
has a download URL property,

00:26:42.516 --> 00:26:44.906 A:middle
and you can go ahead and
fetch the bits from there

00:26:44.906 --> 00:26:46.486 A:middle
or maybe use this as the source

00:26:46.616 --> 00:26:48.846 A:middle
of your image element,
for instance.

00:26:52.716 --> 00:26:55.666 A:middle
So another great feature of
CloudKit is subscriptions

00:26:55.666 --> 00:26:56.636 A:middle
and push notifications.

00:26:57.886 --> 00:27:01.436 A:middle
And all pushes to
Apple devices go


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:57.886 --> 00:27:01.436 A:middle
And all pushes to
Apple devices go

00:27:01.436 --> 00:27:03.096 A:middle
through Apple Push
Notification Service.

00:27:03.946 --> 00:27:06.916 A:middle
Now, traditionally
you had to set

00:27:06.916 --> 00:27:09.906 A:middle
up your own third party
server for this to work.

00:27:09.906 --> 00:27:13.196 A:middle
So you had to get your own
server with your own certificate

00:27:13.256 --> 00:27:16.106 A:middle
with your own server
logic and you had to push,

00:27:16.106 --> 00:27:18.496 A:middle
send pushes through that way.

00:27:19.616 --> 00:27:22.666 A:middle
However, with CloudKit,
there is no longer necessary.

00:27:22.666 --> 00:27:26.906 A:middle
You can simply set up CloudKit
Subscriptions and these act

00:27:27.056 --> 00:27:28.256 A:middle
like triggers in a database.

00:27:28.256 --> 00:27:31.156 A:middle
So these are going to look
for changes in data and send

00:27:31.156 --> 00:27:33.236 A:middle
out pushes accordingly
when they happen.

00:27:34.296 --> 00:27:36.966 A:middle
And now with CloudKit JS the
web will be another client

00:27:36.966 --> 00:27:37.496 A:middle
in this mix.

00:27:38.106 --> 00:27:40.276 A:middle
So we are going to able to
receive the exact same pushes

00:27:40.276 --> 00:27:45.396 A:middle
to the web as we
are to iOS and OS X.

00:27:45.696 --> 00:27:48.656 A:middle
So to receive pushes you
have to set up subscriptions.

00:27:49.446 --> 00:27:52.656 A:middle
This first example is showing
you a zone subscription.

00:27:53.376 --> 00:27:58.456 A:middle
To subscription type is zone,
subscription ID is change tasks

00:27:59.126 --> 00:28:01.536 A:middle
and we give is zone
ID of all tasks.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.126 --> 00:28:01.536 A:middle
and we give is zone
ID of all tasks.

00:28:01.666 --> 00:28:05.276 A:middle
I would go ahead and save the
subscription with the database.

00:28:06.246 --> 00:28:08.136 A:middle
So this will start
looking for changes

00:28:08.196 --> 00:28:11.316 A:middle
so any time something changes
in the all tasks custom zone.

00:28:11.626 --> 00:28:12.716 A:middle
It will send pushes

00:28:12.786 --> 00:28:18.406 A:middle
to all clients connected
to the same account.

00:28:19.616 --> 00:28:23.066 A:middle
So subscriptions also allow
you to base them on a query

00:28:23.956 --> 00:28:26.306 A:middle
so this next example we are
setting up a subscription,

00:28:26.306 --> 00:28:29.396 A:middle
a query subscription that will
fire anything that's created,

00:28:29.396 --> 00:28:32.676 A:middle
updated or deleted in
the all task custom zone

00:28:33.206 --> 00:28:36.126 A:middle
and then we specify a query
so this particular query is

00:28:36.156 --> 00:28:39.506 A:middle
like when we fetch for
records any time a task

00:28:39.506 --> 00:28:42.816 A:middle
of priority one is
created, updated or deleted,

00:28:43.316 --> 00:28:49.556 A:middle
a push will get sent out and
that's all we have to do.

00:28:49.826 --> 00:28:53.446 A:middle
So on the website, you have
to implement two things,

00:28:54.186 --> 00:28:57.086 A:middle
first you have to implement
register for notifications.

00:28:57.536 --> 00:29:00.116 A:middle
This will go ahead and fetch
a token from the server


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:57.536 --> 00:29:00.116 A:middle
This will go ahead and fetch
a token from the server

00:29:00.116 --> 00:29:02.036 A:middle
that we can use with Apple
Push Notification Service

00:29:02.296 --> 00:29:03.656 A:middle
and also park the connection

00:29:04.086 --> 00:29:06.456 A:middle
with Apple Push Connection
Service.

00:29:07.206 --> 00:29:12.076 A:middle
And secondly, you need to
call add notification listener

00:29:12.376 --> 00:29:15.366 A:middle
which is going to get called any
time a notification is received

00:29:15.366 --> 00:29:16.096 A:middle
on a web page.

00:29:20.996 --> 00:29:25.906 A:middle
So last, let me cover a few
best practices with CloudKit JS.

00:29:26.476 --> 00:29:29.796 A:middle
So as we saw earlier, you
should dynamically link

00:29:29.796 --> 00:29:31.636 A:middle
to the CDN hosted
version of CloudKit JS.

00:29:31.636 --> 00:29:34.286 A:middle
This is important to you
get the latest updates

00:29:34.286 --> 00:29:36.516 A:middle
and security fixes as
we make them available

00:29:36.796 --> 00:29:40.166 A:middle
and it also insures a low
latency delivery of this asset

00:29:40.336 --> 00:29:42.816 A:middle
through our vast accomplished
distribution network

00:29:43.156 --> 00:29:45.526 A:middle
and it's all for
free which is great.

00:29:46.496 --> 00:29:49.196 A:middle
Secondly, you should
consider loading CloudKit JS

00:29:49.196 --> 00:29:50.866 A:middle
asynchronously on your page.

00:29:50.936 --> 00:29:52.426 A:middle
This is a good suggestion

00:29:52.426 --> 00:29:55.106 A:middle
for any third party library
you might load on the web page

00:29:55.686 --> 00:29:59.256 A:middle
and it will avoid any blocking
and impact on user experience

00:29:59.406 --> 00:30:05.396 A:middle
and last you want to make sure
you handle the request responses


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.406 --> 00:30:05.396 A:middle
and last you want to make sure
you handle the request responses

00:30:05.966 --> 00:30:07.156 A:middle
so the new free limits

00:30:07.156 --> 00:30:10.526 A:middle
of CloudKit are really
generous including the limits

00:30:10.526 --> 00:30:11.216 A:middle
for requests.

00:30:11.926 --> 00:30:14.616 A:middle
That said you might be
retrieving bursts of traffic

00:30:14.616 --> 00:30:16.076 A:middle
to your website, so
you want to make sure

00:30:16.076 --> 00:30:17.586 A:middle
that your client is
properly backing up.

00:30:18.096 --> 00:30:21.516 A:middle
If it's retrieving requests
through all responses.

00:30:22.236 --> 00:30:25.646 A:middle
So you can also look into how
it can batch multiple operations

00:30:25.646 --> 00:30:28.106 A:middle
in a single request and
we do have a batch API

00:30:28.826 --> 00:30:32.096 A:middle
with CloudKit JS and
if you are interested

00:30:32.096 --> 00:30:34.626 A:middle
in topic you should go
to the CloudKit tips

00:30:34.626 --> 00:30:35.766 A:middle
and tricks session tomorrow.

00:30:36.126 --> 00:30:39.196 A:middle
They will talk more about the
request throttling across all

00:30:39.196 --> 00:30:41.016 A:middle
of CloudKit and not
just web specifically.

00:30:41.746 --> 00:30:42.946 A:middle
So that's it.

00:30:43.066 --> 00:30:44.706 A:middle
That's CloudKit JS.

00:30:44.706 --> 00:30:47.026 A:middle
We really look forward to
seeing what you are going

00:30:47.026 --> 00:30:47.586 A:middle
to be building with it.

00:30:47.826 --> 00:30:50.006 A:middle
Please stop by the labs with
any questions you might have.

00:30:50.006 --> 00:30:51.826 A:middle
And now I will hand
it back to Chris.

00:30:52.516 --> 00:31:02.116 A:middle
[Applause]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:52.516 --> 00:31:02.116 A:middle
[Applause]

00:31:02.616 --> 00:31:03.416 A:middle
&gt;&gt; CHRIS EDSTROM: Thanks Onar.

00:31:04.596 --> 00:31:11.246 A:middle
So in summary, the CloudKit Web
Services provide a full parity

00:31:11.246 --> 00:31:14.066 A:middle
interface to interact with
your CloudKit data on the web.

00:31:15.396 --> 00:31:17.916 A:middle
They are often on a
per container basis.

00:31:18.556 --> 00:31:22.276 A:middle
We handle authentication,
metadata storage,

00:31:22.496 --> 00:31:25.506 A:middle
and asset upload and download.

00:31:25.616 --> 00:31:27.776 A:middle
You handle hosting
your static assets

00:31:28.176 --> 00:31:30.546 A:middle
and your JavaScript
application code.

00:31:31.236 --> 00:31:33.176 A:middle
And finally we have
brought you CloudKit JS

00:31:33.586 --> 00:31:35.046 A:middle
to make this as easy
as possible.

00:31:35.596 --> 00:31:41.366 A:middle
You can visit us on the web at
developer.Apple.com/cloudKit

00:31:42.546 --> 00:31:44.696 A:middle
and for any questions you
have you can visit the Apple

00:31:44.696 --> 00:31:48.156 A:middle
Developer Forums or Apple
developer technical support.

00:31:48.346 --> 00:31:51.166 A:middle
If you still have questions
beyond that you can reach us

00:31:51.166 --> 00:31:55.446 A:middle
at CloudKit@Apple.com.

00:31:55.646 --> 00:31:56.926 A:middle
There are a few related
sessions.

00:31:56.926 --> 00:31:59.556 A:middle
We had what's new in CloudKit
yesterday which is available

00:31:59.556 --> 00:32:02.956 A:middle
on line and tomorrow as Onar
mentioned we have CloudKit tips


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:59.556 --> 00:32:02.956 A:middle
on line and tomorrow as Onar
mentioned we have CloudKit tips

00:32:02.956 --> 00:32:03.326 A:middle
and tricks.

00:32:03.326 --> 00:32:04.456 A:middle
I hope to see you there.

00:32:04.456 --> 00:32:04.976 A:middle
And thank you very much.

00:32:05.516 --> 00:32:10.500 A:middle
[Applause]

