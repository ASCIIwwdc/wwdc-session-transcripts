WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:24.516 --> 00:00:28.066 A:middle
[Applause]

00:00:28.566 --> 00:00:29.226 A:middle
&gt;&gt; JAKE BEHRENS: Good morning.

00:00:30.786 --> 00:00:32.936 A:middle
Welcome to "WatchKit
Tips and Tricks."

00:00:32.996 --> 00:00:34.296 A:middle
My name is Jake Behrens,

00:00:34.296 --> 00:00:36.946 A:middle
and I am the watchOS
Frameworks Evangelist at Apple.

00:00:38.046 --> 00:00:40.456 A:middle
Now, today we are going
to talk about various ways

00:00:40.456 --> 00:00:44.396 A:middle
that you can optimize your
existing watchOS applications

00:00:44.396 --> 00:00:45.756 A:middle
under watchOS 1.

00:00:45.926 --> 00:00:48.746 A:middle
There are going to be many
things that we're going to talk

00:00:48.746 --> 00:00:52.666 A:middle
about that are equally
applicable to watchOS 2,

00:00:52.666 --> 00:00:55.156 A:middle
and I will point those
out as we move along.

00:00:55.156 --> 00:01:00.786 A:middle
Now, leading up to the
release of Apple Watch,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:55.156 --> 00:01:00.786 A:middle
Now, leading up to the
release of Apple Watch,

00:01:01.376 --> 00:01:03.296 A:middle
we worked with many developers

00:01:03.366 --> 00:01:06.326 A:middle
on their first Watch
app experience,

00:01:07.606 --> 00:01:11.866 A:middle
and we learned a lot along
that way, and today I am going

00:01:11.866 --> 00:01:13.736 A:middle
to share a lot of this with you,

00:01:15.086 --> 00:01:17.466 A:middle
things like optimizing
your networking,

00:01:17.946 --> 00:01:22.156 A:middle
how you can decrease your
loading times, and much more.

00:01:23.536 --> 00:01:25.946 A:middle
So let's start with
data and communication.

00:01:26.826 --> 00:01:30.036 A:middle
As I mentioned previously,
this is essential

00:01:30.316 --> 00:01:33.216 A:middle
for getting information
from your web service,

00:01:33.636 --> 00:01:37.026 A:middle
or from the containing iPhone
app, so that you have something

00:01:37.026 --> 00:01:38.926 A:middle
to actually display to the user.

00:01:40.946 --> 00:01:44.156 A:middle
Now, imagine that your user
is waiting at the bus station.

00:01:44.766 --> 00:01:46.906 A:middle
They raise their wrist,
they are interacting

00:01:46.906 --> 00:01:50.096 A:middle
with your application, and you
kick off a network request.

00:01:51.026 --> 00:01:53.146 A:middle
Suddenly, the bus comes
around the corner,

00:01:53.656 --> 00:01:55.516 A:middle
so they put their arm
down, they get their stuff,

00:01:55.516 --> 00:01:59.096 A:middle
they are hurrying to the
bus, and then they get

00:01:59.096 --> 00:02:00.276 A:middle
on the bus and get settled.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:59.096 --> 00:02:00.276 A:middle
on the bus and get settled.

00:02:01.046 --> 00:02:03.366 A:middle
Well, you want to make
sure that the next time

00:02:03.366 --> 00:02:05.976 A:middle
that they raise their wrist to
go back to your application,

00:02:06.286 --> 00:02:08.356 A:middle
that that data is there
and waiting for them,

00:02:08.906 --> 00:02:11.166 A:middle
not that you have to
refetch it all over again.

00:02:11.986 --> 00:02:13.576 A:middle
So how do you do
this effectively?

00:02:14.446 --> 00:02:17.436 A:middle
Well, the first part is you
need to have a network request.

00:02:18.116 --> 00:02:19.996 A:middle
This is how you are going
to get your information.

00:02:19.996 --> 00:02:24.296 A:middle
The next thing that you need
to do is you actually need

00:02:24.296 --> 00:02:27.016 A:middle
to ask the system for
what's called a background

00:02:27.016 --> 00:02:28.036 A:middle
task assertion.

00:02:28.616 --> 00:02:33.076 A:middle
This is a way to ask the system
and say, 'hey, I need some time

00:02:33.616 --> 00:02:36.536 A:middle
because I may need to finish
some process once you start

00:02:36.536 --> 00:02:38.356 A:middle
suspending my WatchKit
extension.'

00:02:40.536 --> 00:02:44.176 A:middle
Even further, if you get that
background task assertion,

00:02:44.506 --> 00:02:46.156 A:middle
you are going to
need to hold it open

00:02:46.506 --> 00:02:49.226 A:middle
so that your network
request actually finishes.

00:02:49.926 --> 00:02:52.706 A:middle
So how are we going
to do these things?

00:02:53.166 --> 00:02:54.476 A:middle
We are going to walk
through it together.

00:02:55.646 --> 00:02:56.996 A:middle
The first thing that
you are going to need

00:02:56.996 --> 00:03:01.506 A:middle
to do is get your network
request set up, and for this,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:56.996 --> 00:03:01.506 A:middle
to do is get your network
request set up, and for this,

00:03:01.606 --> 00:03:04.346 A:middle
we are going to use a
default NSURLSession.

00:03:05.276 --> 00:03:09.466 A:middle
Now, recognize that I am not
using a background NSURLSession

00:03:09.816 --> 00:03:11.016 A:middle
because in that case,

00:03:11.016 --> 00:03:13.086 A:middle
if our WatchKit extension
was suspended,

00:03:13.356 --> 00:03:14.886 A:middle
then the completion
would come back

00:03:14.976 --> 00:03:16.506 A:middle
to our containing iPhone app.

00:03:17.056 --> 00:03:19.616 A:middle
We want to do everything
we can right

00:03:19.616 --> 00:03:21.306 A:middle
in the WatchKit extension
itself.

00:03:21.926 --> 00:03:26.286 A:middle
So next we need to ask for
that background task assertion.

00:03:26.656 --> 00:03:28.426 A:middle
How are we going to do that?

00:03:29.196 --> 00:03:34.746 A:middle
We are going to do that by
using 'perform expiring activity

00:03:34.746 --> 00:03:38.316 A:middle
with reason,' which is a
method on NSProcessInfo.

00:03:39.336 --> 00:03:42.976 A:middle
This is going to ask the system
for a background task assertion

00:03:42.976 --> 00:03:46.546 A:middle
and say, 'hey, I may need to
still do something once you go

00:03:46.546 --> 00:03:48.216 A:middle
to suspend the WatchKit
extension.'

00:03:49.316 --> 00:03:53.636 A:middle
So what happens is you
pass in a debugging string.

00:03:53.706 --> 00:03:54.956 A:middle
Here it says networkReq.

00:03:55.736 --> 00:03:57.776 A:middle
And then this block is executed.

00:03:58.586 --> 00:04:02.226 A:middle
Now, this block is going
to be called immediately


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:58.586 --> 00:04:02.226 A:middle
Now, this block is going
to be called immediately

00:04:02.426 --> 00:04:05.156 A:middle
when 'perform expiring
activity with reason' is called.

00:04:05.936 --> 00:04:08.086 A:middle
Now, there are some
things to keep in mind

00:04:08.086 --> 00:04:09.586 A:middle
that are really important
about this.

00:04:10.196 --> 00:04:13.956 A:middle
The first thing is that this
block is going to execute

00:04:13.956 --> 00:04:15.386 A:middle
on an asynchronous queue.

00:04:16.216 --> 00:04:19.636 A:middle
So your main queue is still
freed up, the user can interact

00:04:19.636 --> 00:04:21.505 A:middle
with the interface,
there's no problem there.

00:04:21.815 --> 00:04:25.046 A:middle
The user doesn't recognize that
anything different is going on.

00:04:26.086 --> 00:04:30.746 A:middle
And if expired is set to
false, then that means

00:04:30.816 --> 00:04:32.906 A:middle
that our time has not expired.

00:04:33.186 --> 00:04:36.406 A:middle
So the system has given us
a background task assertion.

00:04:37.516 --> 00:04:40.766 A:middle
However, if expired is
true, then this means

00:04:40.766 --> 00:04:42.156 A:middle
that the system was unable

00:04:42.156 --> 00:04:44.146 A:middle
to give us a background
task assertion.

00:04:44.846 --> 00:04:47.046 A:middle
This means that it said no.

00:04:48.076 --> 00:04:51.676 A:middle
However, if it said that we
did have a background task

00:04:51.676 --> 00:04:55.266 A:middle
assertion, it could later
execute this block again

00:04:55.516 --> 00:04:59.846 A:middle
with expired set to true because
maybe the system has decided we

00:04:59.846 --> 00:05:01.466 A:middle
are completely out of time now.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.846 --> 00:05:01.466 A:middle
are completely out of time now.

00:05:02.096 --> 00:05:06.866 A:middle
And so you're given a moment
to make sure that you clean

00:05:06.866 --> 00:05:08.236 A:middle
up any state that you have.

00:05:08.576 --> 00:05:09.916 A:middle
Or something that you may need

00:05:09.916 --> 00:05:12.656 A:middle
to do before the WatchKit
extension fully suspends.

00:05:14.456 --> 00:05:18.536 A:middle
So as I said, the key thing
here is that this block executes

00:05:18.536 --> 00:05:19.846 A:middle
on an asynchronous queue.

00:05:20.416 --> 00:05:24.096 A:middle
The second really
important piece of this is

00:05:24.096 --> 00:05:27.656 A:middle
that once this block
finishes executing,

00:05:28.136 --> 00:05:30.206 A:middle
then your time goes away.

00:05:30.456 --> 00:05:32.586 A:middle
It gives up that
background task assertion.

00:05:33.286 --> 00:05:36.736 A:middle
So how are we going
to actually make sure

00:05:36.736 --> 00:05:39.466 A:middle
that we have enough time to
finish our network request?

00:05:40.356 --> 00:05:41.686 A:middle
Could take two seconds.

00:05:42.036 --> 00:05:43.496 A:middle
Could take ten seconds.

00:05:44.126 --> 00:05:44.876 A:middle
Could take more.

00:05:45.576 --> 00:05:50.276 A:middle
We are going to use something
called dispatch semaphore.

00:05:51.166 --> 00:05:54.966 A:middle
Dispatch semaphore is part of
Grand Central Dispatch, or GCD,

00:05:54.966 --> 00:06:01.146 A:middle
and this essentially allows us
a way to pause execution over on


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:54.966 --> 00:06:01.146 A:middle
and this essentially allows us
a way to pause execution over on

00:06:01.146 --> 00:06:03.646 A:middle
that asynchronous queue.

00:06:03.846 --> 00:06:06.836 A:middle
So you call 'dispatch
semaphore wait,

00:06:07.206 --> 00:06:09.386 A:middle
and that will pause execution.

00:06:10.046 --> 00:06:13.516 A:middle
But then, when you need to
get going again and resume,

00:06:13.696 --> 00:06:15.966 A:middle
you can call 'dispatch
semaphore signal.'

00:06:17.036 --> 00:06:19.426 A:middle
Now, notice in the way
I'm passing in a time,

00:06:19.776 --> 00:06:21.546 A:middle
this is essentially a time out.

00:06:22.366 --> 00:06:24.076 A:middle
I have set it to
30 seconds here,

00:06:24.076 --> 00:06:26.126 A:middle
and it could be any
number; however,

00:06:26.126 --> 00:06:29.486 A:middle
I want to make sure that, you
know, once it hits 30 seconds,

00:06:29.936 --> 00:06:32.746 A:middle
I should have either gotten my
data or I'm calling it lost.

00:06:33.376 --> 00:06:40.366 A:middle
So this is a little abstract,
and it's a little bit

00:06:40.366 --> 00:06:41.666 A:middle
of an advanced concept.

00:06:41.916 --> 00:06:51.436 A:middle
So let's actually take a
look at the code in practice.

00:06:51.536 --> 00:06:57.586 A:middle
Okay. So here I have a WatchKit
extension built for watchOS 1.

00:06:58.506 --> 00:07:01.976 A:middle
And I am here in a subclass
WK interface controller.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:58.506 --> 00:07:01.976 A:middle
And I am here in a subclass
WK interface controller.

00:07:03.006 --> 00:07:06.356 A:middle
You can see that the first thing
that I do is I create a property

00:07:06.356 --> 00:07:08.376 A:middle
for an NSURLSession data task.

00:07:09.066 --> 00:07:11.336 A:middle
This is the data task
that we are going to use

00:07:11.756 --> 00:07:17.026 A:middle
to get our information
down from our web service.

00:07:17.176 --> 00:07:19.186 A:middle
Next in will activate --

00:07:19.636 --> 00:07:21.966 A:middle
and realize you can do
this wherever you are going

00:07:21.966 --> 00:07:23.526 A:middle
to do your networking code.

00:07:23.696 --> 00:07:25.866 A:middle
For simplicity's
sake, in this example,

00:07:25.866 --> 00:07:27.586 A:middle
I am doing it in will activate.

00:07:28.696 --> 00:07:31.846 A:middle
First I am checking the state
of the data task, and I am going

00:07:31.846 --> 00:07:33.536 A:middle
to see if it is already running,

00:07:34.266 --> 00:07:37.926 A:middle
because if the user raised
their wrist, started interacting

00:07:37.926 --> 00:07:40.996 A:middle
and kicked off a network
request, put their wrist down,

00:07:41.206 --> 00:07:44.826 A:middle
had background time going, and
then raised their wrist again

00:07:44.826 --> 00:07:46.946 A:middle
and it hadn't completed
yet, I don't want

00:07:46.946 --> 00:07:48.936 A:middle
to just kick off
another network request.

00:07:49.556 --> 00:07:51.796 A:middle
I only want to do
another network request

00:07:51.796 --> 00:07:53.456 A:middle
if I don't currently
have one going.

00:07:53.456 --> 00:07:59.216 A:middle
So next I am going
to create a URL,

00:07:59.216 --> 00:08:01.776 A:middle
and now this is just
pointed to my web service.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.216 --> 00:08:01.776 A:middle
and now this is just
pointed to my web service.

00:08:01.776 --> 00:08:04.996 A:middle
Here it's pointed to the
metadata on the App Store.

00:08:06.176 --> 00:08:09.706 A:middle
Once I have this URL,
I create my semaphore

00:08:10.096 --> 00:08:12.096 A:middle
by calling 'dispatch
semaphore create.'

00:08:14.056 --> 00:08:18.026 A:middle
Next I am calling a method
that I wrote called 'ask

00:08:18.026 --> 00:08:19.596 A:middle
for assertion with semaphore,

00:08:19.596 --> 00:08:21.806 A:middle
passing in this newly
created semaphore.

00:08:23.116 --> 00:08:26.306 A:middle
So if we look down here at
what's going on in this method,

00:08:26.496 --> 00:08:29.096 A:middle
this is where we are actually
calling 'perform expiring

00:08:29.266 --> 00:08:30.336 A:middle
activity with reason.'

00:08:30.516 --> 00:08:34.206 A:middle
We are passing in our debugging
string, and if expired is set

00:08:34.206 --> 00:08:35.416 A:middle
to false, then that means

00:08:35.466 --> 00:08:37.405 A:middle
that we've gotten
some background time,

00:08:37.826 --> 00:08:40.176 A:middle
and I am passing in my timeout,

00:08:40.385 --> 00:08:42.366 A:middle
and I am calling
'dispatch semaphore wait.'

00:08:42.956 --> 00:08:46.036 A:middle
Remember, this is going
to pause the execution

00:08:46.086 --> 00:08:47.556 A:middle
of that asynchronous queue.

00:08:48.096 --> 00:08:51.736 A:middle
The user can still interact with
the application, no problem.

00:08:51.896 --> 00:08:53.266 A:middle
It's just holding there,

00:08:53.436 --> 00:08:55.376 A:middle
ensuring that we
have enough time

00:08:55.666 --> 00:08:58.956 A:middle
to finish our network request
if the WatchKit extension were

00:08:58.956 --> 00:09:00.146 A:middle
to go into the background.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.956 --> 00:09:00.146 A:middle
to go into the background.

00:09:00.726 --> 00:09:04.636 A:middle
Now, if expired is set to true,

00:09:04.836 --> 00:09:07.626 A:middle
which means that we either were
not given a background task

00:09:07.626 --> 00:09:09.416 A:middle
assertion or maybe we were

00:09:09.416 --> 00:09:12.896 A:middle
but now the system has called it
again saying you're out of time,

00:09:13.316 --> 00:09:15.056 A:middle
well, we're going
to call a method

00:09:15.056 --> 00:09:18.246 A:middle
that I created called 'release
assertion with semaphore,

00:09:18.276 --> 00:09:20.256 A:middle
again, passing in
that semaphore.

00:09:21.246 --> 00:09:24.096 A:middle
And all this method does
is actually call 'dispatch

00:09:24.096 --> 00:09:25.146 A:middle
semaphore signal.'

00:09:25.686 --> 00:09:29.976 A:middle
This allows execution to
resume, and it allows the block

00:09:29.976 --> 00:09:33.996 A:middle
to complete, and this is
also very crucial to call

00:09:33.996 --> 00:09:38.586 A:middle
because if we halt execution for
too long, the system might think

00:09:38.586 --> 00:09:41.666 A:middle
that our process has just
hung, and that's no good

00:09:41.906 --> 00:09:45.246 A:middle
because eventually it's just
going to kill it outright.

00:09:45.596 --> 00:09:49.086 A:middle
So we don't get any opportunity
to save state or do any cleanup.

00:09:49.406 --> 00:09:50.776 A:middle
We just get killed.

00:09:50.776 --> 00:09:55.806 A:middle
Okay. So let's go
back to will activate.

00:09:56.676 --> 00:09:58.656 A:middle
So we've asked for
our task assertion.

00:09:58.656 --> 00:10:01.996 A:middle
And the next thing we are going
to do is we are going to create


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.656 --> 00:10:01.996 A:middle
And the next thing we are going
to do is we are going to create

00:10:01.996 --> 00:10:04.226 A:middle
that data task with
the URL that we have.

00:10:04.986 --> 00:10:07.466 A:middle
Now, notice that I
am not gating this

00:10:07.466 --> 00:10:10.846 A:middle
on whether I have a background
task assertion or not.

00:10:11.726 --> 00:10:14.706 A:middle
The background task
assertion technique is a means

00:10:14.766 --> 00:10:16.936 A:middle
to get some borrowed
time, right?

00:10:17.166 --> 00:10:19.886 A:middle
I mean, it's not
guaranteed, but we're hoping

00:10:19.886 --> 00:10:21.356 A:middle
for a better experience here.

00:10:21.746 --> 00:10:24.576 A:middle
So I'm just going to
create my network request

00:10:24.576 --> 00:10:27.106 A:middle
because probably the
user is interacting

00:10:27.316 --> 00:10:28.776 A:middle
with the app at that time.

00:10:29.196 --> 00:10:31.626 A:middle
The network request has
kicked off and come back

00:10:31.626 --> 00:10:33.786 A:middle
in mere moments, and
everything's great.

00:10:35.176 --> 00:10:36.466 A:middle
You'll also see here

00:10:36.466 --> 00:10:38.716 A:middle
that there's a convenience
completion handler

00:10:38.786 --> 00:10:42.136 A:middle
for the data task, so
when the request finishes,

00:10:42.136 --> 00:10:44.596 A:middle
I am going to call in
to 'release assertion

00:10:44.596 --> 00:10:47.346 A:middle
with semaphore,' passing
in that semaphore again.

00:10:47.816 --> 00:10:51.226 A:middle
So we're allowing
execution to resume

00:10:51.226 --> 00:10:54.346 A:middle
on that asynchronous queue,
which lets that block complete,

00:10:54.346 --> 00:10:57.046 A:middle
and then the WatchKit
extension can fully suspend.

00:10:57.966 --> 00:11:00.646 A:middle
This ensures that the
system doesn't think


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:57.966 --> 00:11:00.646 A:middle
This ensures that the
system doesn't think

00:11:00.726 --> 00:11:02.856 A:middle
that our process has hung.

00:11:03.086 --> 00:11:06.026 A:middle
Okay. So once we have
created our data task,

00:11:06.606 --> 00:11:08.566 A:middle
then we are just going
to call resume on it

00:11:08.566 --> 00:11:11.166 A:middle
to actually start it, so
it can go to the network,

00:11:11.556 --> 00:11:19.966 A:middle
grab the information, and
we'll take care of the rest.

00:11:19.966 --> 00:11:25.986 A:middle
So now you've seen a little
bit of a nice technique

00:11:25.986 --> 00:11:30.066 A:middle
that you can use to try and do
all of your networking right

00:11:30.066 --> 00:11:32.826 A:middle
from within the WatchKit
extension itself.

00:11:33.466 --> 00:11:37.196 A:middle
This is really great because
moving on to watchOS 2,

00:11:37.706 --> 00:11:40.646 A:middle
there's a whole lot of stuff for
you to take advantage of there.

00:11:40.646 --> 00:11:42.586 A:middle
And we'll talk about
that in a little bit.

00:11:42.916 --> 00:11:45.796 A:middle
But if you're already
moving your networking

00:11:45.876 --> 00:11:48.086 A:middle
to the WatchKit extension
itself, this is going

00:11:48.086 --> 00:11:51.046 A:middle
to prepare you so that things
are already broken apart.

00:11:51.496 --> 00:11:56.096 A:middle
I've seen many examples where
open parent application is used

00:11:56.336 --> 00:11:59.406 A:middle
to have the containing
iPhone app actually do all


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:00.006 --> 00:12:00.966 A:middle
the networking.

00:12:00.996 --> 00:12:05.706 A:middle
This breaks that bridge.

00:12:05.896 --> 00:12:10.206 A:middle
Now, in some cases our data
isn't on a web service,

00:12:10.606 --> 00:12:14.406 A:middle
and our data is actually in
the containing iPhone app

00:12:14.406 --> 00:12:15.666 A:middle
and we need to get that.

00:12:15.926 --> 00:12:20.046 A:middle
So we actually need to reach
across the process in watchOS 1

00:12:20.046 --> 00:12:23.346 A:middle
from the WatchKit extension
to the containing iPhone app.

00:12:24.336 --> 00:12:27.596 A:middle
We can do this by using
'open parent application,

00:12:27.986 --> 00:12:30.966 A:middle
and this is a method on
WK interface controller

00:12:31.256 --> 00:12:34.026 A:middle
that allows us to send a
dictionary of information

00:12:34.356 --> 00:12:37.396 A:middle
over to the iPhone app,
launch it in the background,

00:12:37.726 --> 00:12:40.956 A:middle
allow it to do some processing,
and then send a response.

00:12:42.536 --> 00:12:44.596 A:middle
So on UI application delegate,

00:12:44.736 --> 00:12:47.806 A:middle
we have 'handle WatchKit
extension request reply.'

00:12:48.556 --> 00:12:51.066 A:middle
This is going to take in that
dictionary of information,

00:12:51.606 --> 00:12:54.996 A:middle
do some processing, and
then send back a reply.

00:12:56.346 --> 00:12:58.926 A:middle
There are some things to think
about when you are using this.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:00.136 --> 00:13:03.806 A:middle
First, if you are doing
any asynchronous work

00:13:03.806 --> 00:13:07.306 A:middle
in 'handle WatchKit extension
request,' you should make sure

00:13:07.506 --> 00:13:10.126 A:middle
that you're creating
a background task.

00:13:11.286 --> 00:13:12.536 A:middle
You want to do that right away,

00:13:12.606 --> 00:13:14.246 A:middle
right when you enter
into this method.

00:13:14.716 --> 00:13:17.676 A:middle
The reason why is because
if you go off and decide

00:13:17.676 --> 00:13:20.316 A:middle
to do some asynchronous
work, no matter how trivial,

00:13:20.626 --> 00:13:22.736 A:middle
the system is going
to say, 'oh, well,

00:13:22.736 --> 00:13:25.726 A:middle
I guess we are not actually
doing some work, so I am going

00:13:25.726 --> 00:13:28.326 A:middle
to go ahead and suspend
the iPhone app.'

00:13:28.746 --> 00:13:30.236 A:middle
And then you are not
going to get the chance

00:13:30.316 --> 00:13:32.186 A:middle
to send the reply back.

00:13:32.896 --> 00:13:36.236 A:middle
The other thing is when you
are going to send your reply,

00:13:36.896 --> 00:13:38.746 A:middle
if you are using custom objects,

00:13:39.036 --> 00:13:41.586 A:middle
you should be turning
those into NSData.

00:13:42.156 --> 00:13:45.386 A:middle
If you have a custom binary
format that you can use,

00:13:45.436 --> 00:13:47.816 A:middle
that you can unpackage in
the WatchKit extension,

00:13:47.986 --> 00:13:50.726 A:middle
that's even better because
the name of the game here is

00:13:50.786 --> 00:13:53.226 A:middle
to make the data as
small as possible

00:13:53.496 --> 00:13:58.236 A:middle
so that transmission
is quickest.

00:13:58.336 --> 00:14:03.116 A:middle
Now, for true device-to-device
communication, we've got a lot.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.336 --> 00:14:03.116 A:middle
Now, for true device-to-device
communication, we've got a lot.

00:14:04.316 --> 00:14:07.296 A:middle
Now, 'open parent application'
is marked as unavailable

00:14:07.296 --> 00:14:09.136 A:middle
in watchOS 2, and this is

00:14:09.136 --> 00:14:10.926 A:middle
because it's no longer
necessary.

00:14:11.226 --> 00:14:12.286 A:middle
It's no longer needed.

00:14:12.776 --> 00:14:16.276 A:middle
Because we now have the
WatchConnectivity framework.

00:14:16.976 --> 00:14:20.606 A:middle
The WatchConnectivity
framework gives you so much.

00:14:21.116 --> 00:14:24.436 A:middle
Not only can you send
messages between the iPhone app

00:14:24.436 --> 00:14:27.026 A:middle
and the Watch app, but
you can transfer files.

00:14:27.376 --> 00:14:29.976 A:middle
You can also -- and
should also --

00:14:30.246 --> 00:14:34.166 A:middle
take advantage of the
application context.

00:14:34.936 --> 00:14:37.476 A:middle
So you can update this context

00:14:37.476 --> 00:14:40.006 A:middle
with whatever your
newest information is,

00:14:40.976 --> 00:14:44.246 A:middle
and that allows you to get some
information in your Watch app

00:14:44.526 --> 00:14:47.506 A:middle
from the network -- maybe it's
the latest in your feed --

00:14:48.116 --> 00:14:50.016 A:middle
and then you can say, 'well,
the iPhone app is going

00:14:50.016 --> 00:14:52.436 A:middle
to need this later, so I
am going to pass that off.'

00:14:52.756 --> 00:14:54.586 A:middle
It's going to be
transferred over,

00:14:54.996 --> 00:14:56.896 A:middle
but the iPhone app
isn't launched

00:14:56.946 --> 00:14:59.656 A:middle
because it doesn't actually need
to process anything right now.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:00.396 --> 00:15:02.676 A:middle
So in this case, it's
just waiting there

00:15:02.796 --> 00:15:04.896 A:middle
for next time the
iPhone app launches.

00:15:05.376 --> 00:15:07.466 A:middle
This is a much more
efficient way

00:15:07.466 --> 00:15:10.076 A:middle
to do your communication
between devices.

00:15:11.586 --> 00:15:13.646 A:middle
Now, there's an awesome
session called

00:15:13.646 --> 00:15:15.366 A:middle
"Introducing Watch
Connectivity,"

00:15:15.576 --> 00:15:18.256 A:middle
and you should definitely check
it out if you haven't already.

00:15:20.576 --> 00:15:24.556 A:middle
Now, once we have our data, then
we're going to want to manage it

00:15:24.876 --> 00:15:28.326 A:middle
and take care of however
we need to have it on disk.

00:15:29.586 --> 00:15:31.776 A:middle
Under watchOS 1, making use

00:15:31.776 --> 00:15:33.866 A:middle
of app groups is a
great way to do this.

00:15:34.746 --> 00:15:36.966 A:middle
You can use the shared
app group container

00:15:37.196 --> 00:15:40.446 A:middle
to store some model data
or some shared assets

00:15:40.766 --> 00:15:42.716 A:middle
that both the containing
iPhone app

00:15:42.836 --> 00:15:49.096 A:middle
and the WatchKit extension
can both point to and find.

00:15:49.276 --> 00:15:52.906 A:middle
Now, you can also use
shared NSUser defaults,

00:15:53.626 --> 00:15:57.246 A:middle
but you should probably be
using this for small state data,

00:15:57.386 --> 00:15:59.886 A:middle
like a Boolean configuration
or something like that,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:00.236 --> 00:16:01.556 A:middle
not for your model data.

00:16:01.866 --> 00:16:04.396 A:middle
Your model data is
probably pretty large,

00:16:04.616 --> 00:16:09.646 A:middle
and it's probably best if it's
sitting there as a flat file

00:16:09.646 --> 00:16:15.786 A:middle
of some sort in your shared
container or in your data store.

00:16:15.986 --> 00:16:19.706 A:middle
In general, for watchOS
1 or watchOS 2,

00:16:19.976 --> 00:16:23.226 A:middle
you should definitely think
about simplifying your model.

00:16:24.426 --> 00:16:26.946 A:middle
The experience on Apple
Watch is very different

00:16:26.946 --> 00:16:28.506 A:middle
from the experience on iPhone.

00:16:28.886 --> 00:16:30.536 A:middle
And so you want to make sure

00:16:30.536 --> 00:16:33.506 A:middle
that you only are actually
getting the information there

00:16:33.506 --> 00:16:34.276 A:middle
that you need.

00:16:35.326 --> 00:16:37.876 A:middle
An example of this
is the WWDC app.

00:16:38.746 --> 00:16:41.536 A:middle
So over the years
in the WWDC app,

00:16:41.756 --> 00:16:44.066 A:middle
we've ended up adding
quite a few entities

00:16:44.106 --> 00:16:45.266 A:middle
to our Core Data models.

00:16:46.386 --> 00:16:50.276 A:middle
And when we went to go create
our experience for Apple Watch,

00:16:51.136 --> 00:16:52.446 A:middle
I looked at it and I said, well,

00:16:52.976 --> 00:16:55.606 A:middle
we don't actually need
all of this on the Watch.

00:16:56.236 --> 00:16:59.236 A:middle
And so we discussed it, and we
realized at the end of the day

00:16:59.236 --> 00:17:02.556 A:middle
that all we needed was a
simplified version of this data.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.236 --> 00:17:02.556 A:middle
that all we needed was a
simplified version of this data.

00:17:03.576 --> 00:17:06.286 A:middle
We just needed a simple
list of the sessions,

00:17:06.396 --> 00:17:09.455 A:middle
which are the sessions
and labs, and favorites.

00:17:11.076 --> 00:17:15.086 A:middle
So what we did was we created a
process where any time the data

00:17:15.086 --> 00:17:16.925 A:middle
in the containing
iPhone app changes,

00:17:17.386 --> 00:17:20.896 A:middle
it exports a simplified
set of JSON files

00:17:20.896 --> 00:17:22.736 A:middle
into the shared group container

00:17:23.026 --> 00:17:25.455 A:middle
that the WatchKit
extension can then just read

00:17:25.455 --> 00:17:26.556 A:middle
and display to you.

00:17:27.695 --> 00:17:31.226 A:middle
This worked really well.

00:17:31.416 --> 00:17:32.646 A:middle
One final means

00:17:32.726 --> 00:17:37.606 A:middle
of device-to-device
communication is using Handoff.

00:17:38.366 --> 00:17:41.386 A:middle
Handoff is an awesome
way to allow your user

00:17:41.386 --> 00:17:44.936 A:middle
to continue an activity
from Apple Watch to iPhone.

00:17:46.086 --> 00:17:47.866 A:middle
So an example of this would be,

00:17:48.116 --> 00:17:51.826 A:middle
say you go to the WWDC
app on Apple Watch.

00:17:52.666 --> 00:17:55.956 A:middle
Then you will notice on the
lock screen of the iPhone

00:17:56.116 --> 00:17:58.776 A:middle
at specific areas,
you are going to see

00:17:58.776 --> 00:18:02.456 A:middle
in the bottom left-hand corner
the icon for the WWDC app.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.776 --> 00:18:02.456 A:middle
in the bottom left-hand corner
the icon for the WWDC app.

00:18:03.736 --> 00:18:06.496 A:middle
Now, if you swipe up from
that bottom left-hand corner,

00:18:06.736 --> 00:18:09.066 A:middle
it puts you exactly
where you need to be

00:18:09.306 --> 00:18:11.756 A:middle
within the WWDC app on iPhone.

00:18:12.856 --> 00:18:14.786 A:middle
This is really great for users.

00:18:16.776 --> 00:18:19.176 A:middle
And using Handoff
is really simple.

00:18:20.566 --> 00:18:22.576 A:middle
You use update user activity,

00:18:22.906 --> 00:18:24.986 A:middle
which is on WK interface
controller,

00:18:25.586 --> 00:18:28.646 A:middle
and you can send over,
for the user info,

00:18:28.646 --> 00:18:30.336 A:middle
an NS dictionary of data.

00:18:30.766 --> 00:18:33.036 A:middle
Now keep in mind that
this dictionary needs

00:18:33.096 --> 00:18:36.236 A:middle
to include everything
that you may need in order

00:18:36.326 --> 00:18:38.966 A:middle
for the iPhone app to
get the user exactly

00:18:38.966 --> 00:18:40.056 A:middle
where they need to be.

00:18:40.446 --> 00:18:43.456 A:middle
So whatever small data and
bits of data you need in there,

00:18:43.696 --> 00:18:46.166 A:middle
you need to send that
across in that dictionary.

00:18:46.746 --> 00:18:53.066 A:middle
Now, the system is going to do
a lot for you automatically,

00:18:53.446 --> 00:18:55.266 A:middle
and one of those
things is it's going

00:18:55.266 --> 00:18:58.426 A:middle
to automatically
invalidate the user activity

00:18:58.626 --> 00:18:59.836 A:middle
after some moments.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:00.646 --> 00:19:02.876 A:middle
And so you don't
need to do anything.

00:19:02.926 --> 00:19:05.686 A:middle
It's going to give the
user enough time to take

00:19:05.686 --> 00:19:08.016 A:middle
out their phone, get to
where they need to be.

00:19:08.456 --> 00:19:11.416 A:middle
Or if you call 'update
user activity' again,

00:19:11.656 --> 00:19:14.056 A:middle
then that's going to be
the current activity.

00:19:14.676 --> 00:19:17.006 A:middle
Or if they switch to
another application

00:19:17.196 --> 00:19:19.076 A:middle
and that calls 'update
user activity,

00:19:19.226 --> 00:19:20.856 A:middle
that will be the
current activity.

00:19:21.396 --> 00:19:25.586 A:middle
Now, if you've called
'update user activity'

00:19:25.856 --> 00:19:28.826 A:middle
but then the user is interacting
with your application,

00:19:29.196 --> 00:19:31.906 A:middle
they tap a button and the
context really changes,

00:19:32.786 --> 00:19:35.356 A:middle
you can actually manually
invalidate the user

00:19:35.356 --> 00:19:36.386 A:middle
activity yourself.

00:19:37.956 --> 00:19:41.306 A:middle
If that's not the situation,
you don't have to do anything.

00:19:41.886 --> 00:19:45.556 A:middle
So that's enough about data.

00:19:46.786 --> 00:19:51.556 A:middle
I hope that the technique for
watchOS 1 is useful for you,

00:19:51.706 --> 00:19:54.586 A:middle
especially since it's
going to help you get

00:19:54.586 --> 00:19:55.686 A:middle
through that migration

00:19:55.686 --> 00:19:58.996 A:middle
to watchOS 2 once you start
using the WatchConnectivity

00:19:58.996 --> 00:19:59.916 A:middle
framework over there.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:01.136 --> 00:20:03.136 A:middle
Now let's talk about
interface elements.

00:20:04.116 --> 00:20:05.656 A:middle
The last thing that
you want your user

00:20:05.656 --> 00:20:10.816 A:middle
to experience is the loading
indicator while you invent the

00:20:10.816 --> 00:20:13.376 A:middle
world and you are
creating all this data,

00:20:13.376 --> 00:20:16.036 A:middle
you are creating all these
things for a controller.

00:20:16.456 --> 00:20:18.946 A:middle
Everything the user
may ever want or need.

00:20:19.546 --> 00:20:24.626 A:middle
Let's look at some ways that we
can optimize that experience.

00:20:25.066 --> 00:20:26.656 A:middle
How can we load quicker?

00:20:26.656 --> 00:20:30.666 A:middle
One of the ways that
we can do this is

00:20:30.666 --> 00:20:34.896 A:middle
by prioritizing how the
content loads and when it loads.

00:20:35.246 --> 00:20:38.616 A:middle
So you can see here the
Weather app for watchOS 1,

00:20:39.116 --> 00:20:41.996 A:middle
and we have this big,
beautiful ring of information.

00:20:42.656 --> 00:20:45.956 A:middle
Right? And we want to get
this to the user immediately.

00:20:46.506 --> 00:20:50.096 A:middle
But we also have
this 10-day forecast,

00:20:51.076 --> 00:20:53.986 A:middle
and this 10-day forecast
includes additional images,

00:20:54.386 --> 00:20:58.506 A:middle
table rows, data, and we don't
necessarily want the user

00:20:58.506 --> 00:21:01.726 A:middle
to be waiting while we
load all of this as well.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.506 --> 00:21:01.726 A:middle
to be waiting while we
load all of this as well.

00:21:03.156 --> 00:21:06.416 A:middle
So we used a technique where
we load this 10-day forecast

00:21:06.786 --> 00:21:10.306 A:middle
within a 'dispatch async'
call within will activate.

00:21:10.866 --> 00:21:14.516 A:middle
Now, doing this allows
will activate to finish,

00:21:14.656 --> 00:21:16.066 A:middle
and once we have that graphic,

00:21:16.246 --> 00:21:18.136 A:middle
that's the first thing
that gets displayed.

00:21:18.496 --> 00:21:21.086 A:middle
So we get that in will
activate, it finishes,

00:21:21.336 --> 00:21:24.146 A:middle
and then that 10-day
forecast gets loaded,

00:21:24.276 --> 00:21:25.596 A:middle
right immediately after.

00:21:25.656 --> 00:21:28.806 A:middle
So the user doesn't actually
see anything different.

00:21:29.016 --> 00:21:30.656 A:middle
By the time they go to scroll

00:21:30.656 --> 00:21:32.966 A:middle
down to the 10-day
forecast, it's already there.

00:21:33.696 --> 00:21:36.646 A:middle
But we've been able to
give this impression

00:21:36.646 --> 00:21:38.946 A:middle
that all the data has
loaded immediately

00:21:38.946 --> 00:21:41.796 A:middle
and a little bit quicker.

00:21:42.026 --> 00:21:45.236 A:middle
Something else you can do is
load fewer table cells up front.

00:21:46.136 --> 00:21:49.816 A:middle
Right? If you have really
complex cells that have images

00:21:49.816 --> 00:21:54.596 A:middle
and data, then you might only
need four or five of these cells

00:21:54.596 --> 00:21:56.596 A:middle
up front to display to the user.

00:21:57.046 --> 00:21:59.536 A:middle
You're probably going to
be able to load in the rest


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:00.006 --> 00:22:01.416 A:middle
after those have been loaded.

00:22:01.966 --> 00:22:05.526 A:middle
So take a look at that.

00:22:05.726 --> 00:22:07.756 A:middle
Also, only update
the information

00:22:07.756 --> 00:22:09.246 A:middle
that has actually changed.

00:22:09.476 --> 00:22:11.976 A:middle
I have seen many
occurrences where one tiny bit

00:22:11.976 --> 00:22:14.986 A:middle
of data has changed and
everything is reloaded.

00:22:15.626 --> 00:22:16.736 A:middle
There's no need for that.

00:22:17.046 --> 00:22:19.856 A:middle
Just only update
what actually needs

00:22:19.856 --> 00:22:21.136 A:middle
to be updated on the screen.

00:22:23.026 --> 00:22:26.546 A:middle
Now, once we move into Interface
Builder, you can see here

00:22:26.546 --> 00:22:29.286 A:middle
that I've started creating
my layout for a controller.

00:22:30.056 --> 00:22:32.556 A:middle
And I'm using a lot
of different groups.

00:22:32.556 --> 00:22:34.486 A:middle
I am hiding and showing
different groups

00:22:34.486 --> 00:22:37.686 A:middle
because depending on
certain data or heuristics,

00:22:37.686 --> 00:22:42.296 A:middle
I am only going to show one at
a time or maybe two at a time.

00:22:42.456 --> 00:22:45.306 A:middle
But what happens is I actually
have all of these objects

00:22:45.306 --> 00:22:48.456 A:middle
in my controller, which means
that the system is going

00:22:48.456 --> 00:22:50.436 A:middle
to instantiate these
all up front

00:22:51.006 --> 00:22:53.896 A:middle
because we actually don't know
when you are going to decide

00:22:53.896 --> 00:22:55.406 A:middle
to hide things or show things.

00:22:55.866 --> 00:22:59.326 A:middle
And so you can optimize this
a little bit in some scenarios

00:22:59.556 --> 00:23:02.046 A:middle
by breaking these out
into separate controllers.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.556 --> 00:23:02.046 A:middle
by breaking these out
into separate controllers.

00:23:02.756 --> 00:23:05.506 A:middle
If you have the ability to
load whichever controller you

00:23:05.506 --> 00:23:07.146 A:middle
actually need when you need it,

00:23:07.436 --> 00:23:08.906 A:middle
then that's going
to be most optimal.

00:23:12.016 --> 00:23:14.816 A:middle
Now, moving through
our interface elements,

00:23:15.376 --> 00:23:18.806 A:middle
one that you probably
use a lot are images.

00:23:19.686 --> 00:23:23.586 A:middle
And images should be properly
sized from your server

00:23:23.776 --> 00:23:25.086 A:middle
or the containing iPhone app.

00:23:25.986 --> 00:23:27.196 A:middle
I've seen many cases

00:23:27.196 --> 00:23:30.096 A:middle
where there's a bigger
image that's even bigger

00:23:30.096 --> 00:23:33.426 A:middle
than the dimensions of
the 42-millimeter watch,

00:23:33.866 --> 00:23:36.926 A:middle
and it's just reused
and rescaled everywhere.

00:23:37.696 --> 00:23:40.296 A:middle
I mean, there is additional
performance implications here

00:23:40.296 --> 00:23:43.896 A:middle
for the scaling, and also
that image isn't going to look

00:23:43.896 --> 00:23:46.166 A:middle
as good as it could look
because you didn't give it

00:23:46.166 --> 00:23:48.186 A:middle
at exactly the size
you needed to.

00:23:48.866 --> 00:23:51.706 A:middle
So give properly sized assets.

00:23:52.306 --> 00:23:56.936 A:middle
In watchOS 2, this also is
going to be crucial for video.

00:23:57.466 --> 00:24:01.916 A:middle
You can also optimize
your images


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:57.466 --> 00:24:01.916 A:middle
You can also optimize
your images

00:24:02.306 --> 00:24:05.846 A:middle
by using 'set image data'
instead of just 'set image.'

00:24:07.226 --> 00:24:10.176 A:middle
In this case, 'set
image' is just going

00:24:10.176 --> 00:24:12.886 A:middle
to use whatever default
compression we use.

00:24:13.716 --> 00:24:16.266 A:middle
With 'set image data,'
you have the ability

00:24:16.336 --> 00:24:20.296 A:middle
to have specific PNG
compression or JPG compression,

00:24:20.706 --> 00:24:23.716 A:middle
and then that turns it
into this NS data blob

00:24:24.146 --> 00:24:26.116 A:middle
for transmitting
over to the Watch.

00:24:26.406 --> 00:24:28.696 A:middle
So you can ensure that
it's getting as small

00:24:28.696 --> 00:24:32.176 A:middle
as you may need it to be.

00:24:32.176 --> 00:24:35.266 A:middle
Also -- and I'm sure you have
heard people banging this drum

00:24:35.266 --> 00:24:37.206 A:middle
-- you should be
using asset catalogs.

00:24:38.046 --> 00:24:40.846 A:middle
Asset catalogs are
not only a great way

00:24:40.846 --> 00:24:44.006 A:middle
to organize your content,
but they also do a lot

00:24:44.006 --> 00:24:45.206 A:middle
of other things for you.

00:24:45.706 --> 00:24:50.626 A:middle
You can set which specific
devices that this asset is for,

00:24:51.306 --> 00:24:56.146 A:middle
and you can set and easily see,
'okay, I've got a 2x asset here,

00:24:56.536 --> 00:25:00.466 A:middle
a version for 38 millimeter, and
a version for 42 millimeter.'


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:56.536 --> 00:25:00.466 A:middle
a version for 38 millimeter, and
a version for 42 millimeter.'

00:25:00.466 --> 00:25:06.096 A:middle
Now, I have been asked by
many developers when and where

00:25:06.236 --> 00:25:07.886 A:middle
to use each of these slots.

00:25:08.396 --> 00:25:09.716 A:middle
So let's go through
these together.

00:25:10.866 --> 00:25:13.516 A:middle
The first is the 2x asset.

00:25:13.586 --> 00:25:18.406 A:middle
And this is going to be used for
an image that you want to use

00:25:18.606 --> 00:25:20.716 A:middle
at the same size
on both devices.

00:25:21.216 --> 00:25:23.216 A:middle
So if that's the case,
you can just put it

00:25:23.216 --> 00:25:25.326 A:middle
in the 2x slot, you
are good to go.

00:25:25.326 --> 00:25:27.106 A:middle
It will be used the
same everywhere.

00:25:27.656 --> 00:25:33.336 A:middle
You can also provide a specific
asset for 38 millimeter.

00:25:34.406 --> 00:25:36.666 A:middle
Now, this will probably
be the same image

00:25:36.666 --> 00:25:39.386 A:middle
that you would have put in
the 2x slot, and that's okay.

00:25:39.976 --> 00:25:44.466 A:middle
And then you can
provide a specific asset

00:25:44.466 --> 00:25:48.056 A:middle
for 42 millimeter, which will
probably be a little larger,

00:25:48.056 --> 00:25:49.086 A:middle
something will be different.

00:25:50.026 --> 00:25:53.146 A:middle
Now, it's okay if you
have a 38 millimeter

00:25:53.146 --> 00:25:57.146 A:middle
and a 42 millimeter version,
it's okay to have that 2x asset

00:25:57.146 --> 00:26:01.046 A:middle
as well because we are going
to fall back to that asset.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:57.146 --> 00:26:01.046 A:middle
as well because we are going
to fall back to that asset.

00:26:01.376 --> 00:26:04.806 A:middle
So if there's a situation
where we can't use that 38

00:26:04.806 --> 00:26:06.956 A:middle
or 42 millimeter
version, we are going

00:26:06.956 --> 00:26:08.806 A:middle
to fall back to that 2x asset.

00:26:09.646 --> 00:26:15.206 A:middle
So that helps you
future-proof your code base.

00:26:15.406 --> 00:26:18.256 A:middle
One other technique, and
we've found this really useful

00:26:18.256 --> 00:26:21.986 A:middle
in the WWDC app, is using PDFs.

00:26:22.696 --> 00:26:26.716 A:middle
By using PDFs you
can get a whole lot

00:26:26.996 --> 00:26:28.976 A:middle
of free work out of the tools.

00:26:30.196 --> 00:26:32.406 A:middle
First, you can set
the scale factors.

00:26:33.816 --> 00:26:37.546 A:middle
You can also set the
type of image rendering

00:26:37.776 --> 00:26:40.796 A:middle
as template image, so if
you are tinting this image,

00:26:40.996 --> 00:26:43.426 A:middle
then it's just going to look
at the alpha value of the PDF.

00:26:44.986 --> 00:26:46.866 A:middle
Or you can set it
to original image

00:26:46.956 --> 00:26:48.756 A:middle
if you still want those colors

00:26:48.756 --> 00:26:51.136 A:middle
that you specifically
put into your asset.

00:26:52.376 --> 00:26:57.896 A:middle
The neat thing here is that when
the system builds your package,

00:26:57.936 --> 00:27:01.476 A:middle
when you go ahead and build it,
we are going to cut this PDF


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:57.936 --> 00:27:01.476 A:middle
when you go ahead and build it,
we are going to cut this PDF

00:27:01.476 --> 00:27:04.966 A:middle
at all the sizes and
scales that you need

00:27:04.966 --> 00:27:06.316 A:middle
for the devices you support.

00:27:07.106 --> 00:27:09.006 A:middle
So that's a whole lot
of work just free.

00:27:10.326 --> 00:27:12.926 A:middle
The other cool thing is
that you can actually mix

00:27:12.926 --> 00:27:15.796 A:middle
and match PDFs and bitmaps.

00:27:16.576 --> 00:27:20.406 A:middle
So you could have that 2x
asset be a fall back PDF,

00:27:21.526 --> 00:27:26.076 A:middle
and you can have very specific
assets as bitmaps for the 38

00:27:26.076 --> 00:27:27.676 A:middle
and 42 millimeter versions.

00:27:30.836 --> 00:27:35.676 A:middle
Moving from images, let's
talk about animated images.

00:27:36.286 --> 00:27:39.536 A:middle
In watchOS 1, we have an
animated image sequence

00:27:39.886 --> 00:27:41.536 A:middle
that you can take
full advantage of.

00:27:41.976 --> 00:27:43.926 A:middle
You can do this in
watchOS 2 as well.

00:27:44.976 --> 00:27:48.046 A:middle
Just know that if you have
multiple animated images

00:27:48.106 --> 00:27:50.756 A:middle
on screen at the
same time, well,

00:27:50.756 --> 00:27:53.496 A:middle
that means more processing
and more rendering.

00:27:54.056 --> 00:27:59.126 A:middle
The other thing is that
you should try and reduce

00:27:59.636 --> 00:28:03.176 A:middle
and restrain yourself
with the amount of frames


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.636 --> 00:28:03.176 A:middle
and restrain yourself
with the amount of frames

00:28:03.226 --> 00:28:05.036 A:middle
that you have for an animation.

00:28:05.906 --> 00:28:09.236 A:middle
Now, I have seen cases where
for a two-second animation,

00:28:09.236 --> 00:28:10.676 A:middle
there are 300 frames.

00:28:11.446 --> 00:28:12.666 A:middle
Seems a little overkill.

00:28:13.506 --> 00:28:16.406 A:middle
You would be really
amazed with what you can do

00:28:16.406 --> 00:28:18.826 A:middle
with fewer frames and still get

00:28:18.826 --> 00:28:20.366 A:middle
that effect that
you really want.

00:28:20.766 --> 00:28:23.246 A:middle
Another thing that you can do

00:28:23.246 --> 00:28:25.896 A:middle
with these animated image
sequences is run them

00:28:25.896 --> 00:28:26.506 A:middle
in reverse.

00:28:27.346 --> 00:28:29.646 A:middle
You don't have to create
a whole other image set.

00:28:30.156 --> 00:28:32.426 A:middle
You can just take one
that you are already using

00:28:32.656 --> 00:28:34.916 A:middle
and set the duration
to a negative value.

00:28:35.996 --> 00:28:38.636 A:middle
Now, you do this when
calling 'start animating

00:28:38.636 --> 00:28:39.886 A:middle
with images in range.'

00:28:40.386 --> 00:28:42.406 A:middle
You provide that
negative duration.

00:28:43.486 --> 00:28:46.576 A:middle
Notice that my range is
still forward looking.

00:28:47.176 --> 00:28:50.466 A:middle
It's going from location
0 to a length of 15.

00:28:50.606 --> 00:28:51.656 A:middle
I haven't changed that.

00:28:52.496 --> 00:28:53.516 A:middle
Just the duration.

00:28:54.126 --> 00:28:59.866 A:middle
Now, if you like animations,
there are a lot of things

00:28:59.896 --> 00:29:01.776 A:middle
that you can do under watchOS 2.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.896 --> 00:29:01.776 A:middle
that you can do under watchOS 2.

00:29:02.796 --> 00:29:05.916 A:middle
With watchOS 2, we are
introducing an animation API

00:29:06.066 --> 00:29:10.596 A:middle
as part of WatchKit, and this
allows you to make really fluid,

00:29:10.596 --> 00:29:12.706 A:middle
great effects within
your Watch apps.

00:29:13.966 --> 00:29:16.866 A:middle
This is similar to how
UIView animations work,

00:29:17.346 --> 00:29:20.506 A:middle
so you have a duration that you
set, and then you have a block

00:29:20.506 --> 00:29:22.836 A:middle
where you can reset
some properties

00:29:22.836 --> 00:29:24.556 A:middle
and they'll all be
animated together.

00:29:25.766 --> 00:29:30.216 A:middle
You can animate things such
as height, width, alpha,

00:29:30.576 --> 00:29:32.636 A:middle
content insets, and much more.

00:29:32.986 --> 00:29:35.906 A:middle
I've seen some really incredible
things that people have done

00:29:35.906 --> 00:29:39.686 A:middle
with this so far, just using
spacer groups and moving items.

00:29:39.856 --> 00:29:41.046 A:middle
It's really, really great.

00:29:42.346 --> 00:29:45.746 A:middle
There's a lot more if you want
to check it out in "Layout

00:29:45.746 --> 00:29:47.666 A:middle
and Animation Techniques
for WatchKit."

00:29:48.776 --> 00:29:53.956 A:middle
And as far as the image
handling, I encourage you

00:29:53.956 --> 00:29:56.006 A:middle
to check out the
"Apple Watch Design Tips

00:29:56.006 --> 00:29:57.246 A:middle
and Tricks" session today.

00:29:57.616 --> 00:29:59.416 A:middle
It's going to take a
lot of those aspects

00:29:59.416 --> 00:30:02.696 A:middle
from the designer mentality,
and they are going to talk


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.416 --> 00:30:02.696 A:middle
from the designer mentality,
and they are going to talk

00:30:02.696 --> 00:30:04.646 A:middle
about a ton of other
great things

00:30:04.646 --> 00:30:06.286 A:middle
that you can do and be aware of.

00:30:06.726 --> 00:30:09.006 A:middle
So check it out.

00:30:09.286 --> 00:30:12.696 A:middle
One final piece of
configuration is the use

00:30:12.696 --> 00:30:14.336 A:middle
of the text input controller.

00:30:15.736 --> 00:30:18.736 A:middle
Now, I've been asked by many
developers how can I get the

00:30:18.736 --> 00:30:23.266 A:middle
user from my UI directly
into the dictation UI?

00:30:24.096 --> 00:30:27.836 A:middle
They don't want their
users to be having to get

00:30:27.896 --> 00:30:30.666 A:middle
to this intermediate screen
and tapping on the microphone.

00:30:31.056 --> 00:30:33.426 A:middle
This is really, really
straightforward.

00:30:34.356 --> 00:30:37.046 A:middle
All you do is when you call
'present text input controller

00:30:37.046 --> 00:30:39.946 A:middle
with suggestions,' you set
the suggestions to nil,

00:30:40.596 --> 00:30:43.786 A:middle
and then you set the
'allowed input mode' to plain.

00:30:44.676 --> 00:30:47.496 A:middle
This is going to take the
user right from your app right

00:30:47.496 --> 00:30:51.016 A:middle
into the dictation UI and then
right back to your app again.

00:30:51.666 --> 00:30:52.636 A:middle
Super easy.

00:30:56.536 --> 00:30:59.026 A:middle
So let's also talk
about notifications.

00:30:59.586 --> 00:31:02.946 A:middle
Notifications are a really
meaningful experience


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.586 --> 00:31:02.946 A:middle
Notifications are a really
meaningful experience

00:31:02.946 --> 00:31:05.736 A:middle
on Apple Watch, and a
huge part of what makes it

00:31:05.866 --> 00:31:07.686 A:middle
so convenient and so amazing.

00:31:08.246 --> 00:31:12.306 A:middle
Let's take a look at
an example payload

00:31:12.616 --> 00:31:14.406 A:middle
for a remote notification.

00:31:14.846 --> 00:31:17.136 A:middle
Let's go over some things
that you should make sure

00:31:17.136 --> 00:31:20.116 A:middle
that you are using in
order to deliver the best

00:31:20.116 --> 00:31:22.566 A:middle
and greatest experience
to your user's wrist.

00:31:23.696 --> 00:31:25.556 A:middle
The first thing to note is

00:31:25.556 --> 00:31:27.946 A:middle
that you should be using
the dictionary value

00:31:27.946 --> 00:31:29.106 A:middle
for the alert key.

00:31:29.926 --> 00:31:32.426 A:middle
This allows you to not
only provide a body,

00:31:32.786 --> 00:31:34.676 A:middle
but also a title.

00:31:35.666 --> 00:31:37.356 A:middle
And this title is
going to be used

00:31:37.356 --> 00:31:38.986 A:middle
in the short-look notification.

00:31:39.656 --> 00:31:43.446 A:middle
So when the user receives the
notification on Apple Watch,

00:31:43.536 --> 00:31:47.376 A:middle
the first thing that they are
going to see is your app's big

00:31:47.376 --> 00:31:50.176 A:middle
and beautiful icon,
and then it's going

00:31:50.176 --> 00:31:51.796 A:middle
to see your app name
at the bottom.

00:31:52.466 --> 00:31:55.306 A:middle
If you've provided a title in
your payload, then you are going

00:31:55.306 --> 00:31:58.976 A:middle
to see that title between
the icon and the app name.

00:31:59.676 --> 00:32:03.216 A:middle
This is an amazing way to
provide a lot more context


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:59.676 --> 00:32:03.216 A:middle
This is an amazing way to
provide a lot more context

00:32:03.936 --> 00:32:07.736 A:middle
to the notification because a
lot of users are going to look

00:32:07.736 --> 00:32:10.456 A:middle
at their wrist, they are
going to see that notification

00:32:10.516 --> 00:32:13.496 A:middle
and decide off that information
whether they are going

00:32:13.496 --> 00:32:15.536 A:middle
to continue to the
long-look notification

00:32:15.916 --> 00:32:18.256 A:middle
or whether they are going to
put it down and visit it later

00:32:18.256 --> 00:32:19.436 A:middle
in Notification Center.

00:32:20.396 --> 00:32:22.666 A:middle
So take advantage of this.

00:32:23.596 --> 00:32:26.186 A:middle
The other thing to be
using is the category.

00:32:26.796 --> 00:32:29.346 A:middle
Categories allow you to specify

00:32:29.506 --> 00:32:33.686 A:middle
which specific controller you
want to use from your storyboard

00:32:33.906 --> 00:32:36.096 A:middle
for which type of notification.

00:32:36.926 --> 00:32:40.086 A:middle
So if you click on the
notification category object,

00:32:40.506 --> 00:32:42.506 A:middle
you can see here that
you can set its name

00:32:42.506 --> 00:32:46.896 A:middle
to that same name used in
the payload, and so you can,

00:32:46.896 --> 00:32:51.256 A:middle
per notification type, set a
sash color and a title color.

00:32:51.546 --> 00:32:55.666 A:middle
So you can provide
other means of intricacy

00:32:55.666 --> 00:32:57.526 A:middle
into your notifications

00:32:57.956 --> 00:32:59.886 A:middle
to really give the user
a great experience.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:00.546 --> 00:33:06.226 A:middle
Now finally, if you want them
to receive the notification

00:33:06.426 --> 00:33:10.126 A:middle
and hear that notification sound
and receive haptic feedback,

00:33:10.636 --> 00:33:13.886 A:middle
you need to set the
sound value to default.

00:33:15.036 --> 00:33:16.406 A:middle
This is going to make sure

00:33:16.676 --> 00:33:19.286 A:middle
that they receive the
sound and feedback.

00:33:19.996 --> 00:33:24.486 A:middle
Now, I'm excited to tell you
that you can do all of this

00:33:24.486 --> 00:33:26.546 A:middle
with UI local notifications
as well.

00:33:27.076 --> 00:33:29.816 A:middle
So it's not just for
remote notifications.

00:33:30.426 --> 00:33:36.426 A:middle
Now, with notifications,
you have two concepts.

00:33:37.246 --> 00:33:39.616 A:middle
The first is the
dynamic notification.

00:33:39.866 --> 00:33:42.226 A:middle
Maybe you receive some
information in that payload,

00:33:42.436 --> 00:33:44.906 A:middle
you need to process it,
you need to get an asset,

00:33:44.906 --> 00:33:47.296 A:middle
you need to do something,
and then you load

00:33:47.296 --> 00:33:50.796 A:middle
that more rich content into
your dynamic notification.

00:33:51.486 --> 00:33:53.466 A:middle
There's also a static
notification,

00:33:53.816 --> 00:33:57.056 A:middle
and I have been asked many
times where that's kind of used.

00:33:57.916 --> 00:34:01.426 A:middle
So a static notification
is always going to be used


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:57.916 --> 00:34:01.426 A:middle
So a static notification
is always going to be used

00:34:01.756 --> 00:34:03.046 A:middle
from Notification Center.

00:34:03.686 --> 00:34:07.056 A:middle
So if the user taps
on the notification

00:34:07.606 --> 00:34:08.906 A:middle
from Notification Center,

00:34:08.985 --> 00:34:11.626 A:middle
they will always see the
static representation.

00:34:12.045 --> 00:34:13.085 A:middle
So you should make sure

00:34:13.085 --> 00:34:15.226 A:middle
that that experience
is also a great one.

00:34:16.406 --> 00:34:19.196 A:middle
The other time that the
static notification is going

00:34:19.196 --> 00:34:23.335 A:middle
to be used is if your dynamic
notification is taking too long

00:34:23.335 --> 00:34:23.896 A:middle
to load.

00:34:24.396 --> 00:34:27.956 A:middle
Maybe you are processing some
data, retrieving some asset

00:34:27.956 --> 00:34:30.656 A:middle
from the network, and
it's just taking too long.

00:34:31.016 --> 00:34:33.295 A:middle
Then we're going to
just call it a loss

00:34:33.666 --> 00:34:36.496 A:middle
and give the user some
meaningful information right now

00:34:36.735 --> 00:34:38.556 A:middle
in the means of the
static notification.

00:34:39.146 --> 00:34:44.216 A:middle
Now finally, let's
talk about Glances.

00:34:45.696 --> 00:34:49.936 A:middle
With Glances, it's a great
way to provide your users

00:34:49.985 --> 00:34:53.036 A:middle
with meaningful,
timely information.

00:34:54.485 --> 00:34:58.406 A:middle
Now, maybe you've seen this,
where you come to a Glance

00:34:58.406 --> 00:35:01.526 A:middle
that you haven't viewed in
a little while, and it shows


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:58.406 --> 00:35:01.526 A:middle
that you haven't viewed in
a little while, and it shows

00:35:01.566 --> 00:35:03.416 A:middle
that it's updating the content.

00:35:03.876 --> 00:35:07.636 A:middle
You see this updated last
title string at the bottom,

00:35:07.896 --> 00:35:10.356 A:middle
and you see this spinning
progress indicator

00:35:10.356 --> 00:35:11.196 A:middle
in the top right.

00:35:12.316 --> 00:35:15.786 A:middle
But maybe while it's been
loading, you've seen this.

00:35:16.896 --> 00:35:18.356 A:middle
So let's see that again.

00:35:19.046 --> 00:35:21.646 A:middle
You're loading in the content,
everything's going great,

00:35:21.686 --> 00:35:24.806 A:middle
and then, oh, where did
content go, and then boom,

00:35:24.806 --> 00:35:26.756 A:middle
it slams in when it updates.

00:35:28.096 --> 00:35:29.076 A:middle
Why does this happen?

00:35:29.966 --> 00:35:32.936 A:middle
This happens because 'will
activate' should be treated a

00:35:32.936 --> 00:35:35.636 A:middle
little bit differently within
your Glance controller.

00:35:36.656 --> 00:35:37.926 A:middle
So what happens is

00:35:37.926 --> 00:35:41.546 A:middle
that system-provided snapshot is
going to be removed from the UI

00:35:41.546 --> 00:35:44.036 A:middle
when 'will activate' finishes.

00:35:44.896 --> 00:35:49.056 A:middle
So a little contrary to what you
do within the Watch app itself,

00:35:49.396 --> 00:35:50.946 A:middle
here you want to make sure

00:35:50.946 --> 00:35:53.476 A:middle
that you are doing your
full setup before 'will

00:35:53.636 --> 00:35:54.626 A:middle
activate' finishes.

00:35:55.036 --> 00:35:56.866 A:middle
You want to get all the
information you need,

00:35:57.246 --> 00:36:00.606 A:middle
set it so that the UI is
up and ready to go so that


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:57.246 --> 00:36:00.606 A:middle
set it so that the UI is
up and ready to go so that

00:36:00.666 --> 00:36:03.576 A:middle
when we remove that
snapshot, it's right there.

00:36:03.886 --> 00:36:07.406 A:middle
There's no in-between state of
the whole screen disappearing.

00:36:07.676 --> 00:36:11.046 A:middle
You might have placeholder
text in your storyboard

00:36:11.166 --> 00:36:13.086 A:middle
that you might see or
something to that effect.

00:36:13.086 --> 00:36:15.776 A:middle
That doesn't really
provide a great experience.

00:36:17.576 --> 00:36:20.086 A:middle
The other thing that you
should do is reload the

00:36:20.086 --> 00:36:21.296 A:middle
content deliberately.

00:36:21.756 --> 00:36:25.056 A:middle
As a user is swiping
between Glances, well,

00:36:25.866 --> 00:36:28.176 A:middle
'will activate' is going
to get called on yours,

00:36:28.176 --> 00:36:31.106 A:middle
and so if they swipe past yours

00:36:31.106 --> 00:36:34.306 A:middle
and in 'will activate' you're
loading a whole bunch of stuff,

00:36:34.336 --> 00:36:37.926 A:middle
doing some processing, doing
a network request, well,

00:36:37.926 --> 00:36:40.206 A:middle
that's probably not the
most efficient you could be

00:36:40.206 --> 00:36:40.726 A:middle
doing that.

00:36:40.996 --> 00:36:43.986 A:middle
So make sure that you are
reloading very deliberately,

00:36:44.176 --> 00:36:47.136 A:middle
depending on other circumstances
and not just, 'hey,

00:36:47.136 --> 00:36:48.156 A:middle
they looked at my content.'

00:36:48.676 --> 00:36:52.696 A:middle
The other thing, as
in with Watch apps,

00:36:52.696 --> 00:36:54.656 A:middle
is to limit the number
of alternate layouts.

00:36:55.146 --> 00:36:56.586 A:middle
Because again, we
are going to need

00:36:56.586 --> 00:37:02.076 A:middle
to instantiate all
those objects up front.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:56.586 --> 00:37:02.076 A:middle
to instantiate all
those objects up front.

00:37:02.176 --> 00:37:05.726 A:middle
Finally, you should be using
WK interface date labels

00:37:06.096 --> 00:37:10.116 A:middle
or absolute times and dates
if you're displaying that kind

00:37:10.116 --> 00:37:11.496 A:middle
of content in your Glance.

00:37:12.976 --> 00:37:14.876 A:middle
So if you look here
at an example,

00:37:15.096 --> 00:37:18.046 A:middle
it says that this session
started 35 minutes ago,

00:37:18.626 --> 00:37:23.226 A:middle
and if this is at 1:00 p.m.,
well, it's kind of confusing.

00:37:23.226 --> 00:37:24.926 A:middle
I am seeing that it's updating.

00:37:24.986 --> 00:37:27.126 A:middle
I know. But it started
35 minutes ago,

00:37:27.126 --> 00:37:28.286 A:middle
and it's giving me kind of like

00:37:28.356 --> 00:37:29.896 A:middle
that knee-jerk reaction
of, like, wait.

00:37:30.236 --> 00:37:31.716 A:middle
What time is it actually?

00:37:32.596 --> 00:37:36.516 A:middle
So the better thing to do here
would be to give an absolute.

00:37:36.926 --> 00:37:38.616 A:middle
It started at 10:00.

00:37:39.006 --> 00:37:42.196 A:middle
This allows me already
that affordance of, 'oh,

00:37:42.196 --> 00:37:45.206 A:middle
it was earlier today because
now it's 1:00 or 3:00.'

00:37:45.206 --> 00:37:46.476 A:middle
I am not confused.

00:37:46.696 --> 00:37:50.766 A:middle
That content is loading
in, and it's all good.

00:37:51.036 --> 00:37:53.996 A:middle
So we've talked about
a lot of stuff.

00:37:54.736 --> 00:37:56.276 A:middle
First, we talked about ways

00:37:56.276 --> 00:37:59.466 A:middle
that you can already start
optimizing your watchOS 1

00:37:59.466 --> 00:38:02.376 A:middle
application's networking
so that the transition


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:59.466 --> 00:38:02.376 A:middle
application's networking
so that the transition

00:38:02.376 --> 00:38:04.446 A:middle
to watchOS 2 is even easier,

00:38:04.806 --> 00:38:08.296 A:middle
and hopefully this will really
help you in your application.

00:38:08.836 --> 00:38:12.436 A:middle
Then we talked about ways that
you can improve your layouts

00:38:12.436 --> 00:38:15.466 A:middle
for performance to
take down that amount

00:38:15.466 --> 00:38:17.576 A:middle
of loading time and
do much more.

00:38:18.926 --> 00:38:21.156 A:middle
Then we talked about
how to ensure

00:38:21.156 --> 00:38:23.476 A:middle
that your Glance always
has content visible

00:38:23.766 --> 00:38:25.936 A:middle
so that you are not
leaving an empty screen

00:38:25.936 --> 00:38:26.896 A:middle
in front of the user.

00:38:28.636 --> 00:38:33.386 A:middle
Finally, there's a ton to
check into in watchOS 2.

00:38:33.736 --> 00:38:39.106 A:middle
Aside from updates to watchOS 2
in WatchKit, we've got ClockKit

00:38:39.166 --> 00:38:42.146 A:middle
to create complications
for clock faces.

00:38:42.466 --> 00:38:44.896 A:middle
We've also got the
WatchConnectivity framework

00:38:45.176 --> 00:38:47.916 A:middle
to do all this device-to-device
communication.

00:38:48.186 --> 00:38:50.836 A:middle
And you can still take
full advantage of NSURL

00:38:50.896 --> 00:38:52.626 A:middle
from the WatchKit
extension itself.

00:38:54.516 --> 00:38:58.046 A:middle
If you'd like more information,
we have great documentation.

00:38:58.276 --> 00:38:59.426 A:middle
We've got sample code.

00:38:59.666 --> 00:39:03.106 A:middle
If you have technical
questions, the Forums are there,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:59.666 --> 00:39:03.106 A:middle
If you have technical
questions, the Forums are there,

00:39:03.266 --> 00:39:06.356 A:middle
as is Developer Technical
Support for one-on-one help.

00:39:07.176 --> 00:39:09.216 A:middle
Finally, if you have
any general questions,

00:39:09.216 --> 00:39:10.606 A:middle
please feel free
to reach out to me.

00:39:10.666 --> 00:39:11.566 A:middle
My email is there.

00:39:13.036 --> 00:39:17.716 A:middle
Today we still have one amazing
design session for Apple Watch,

00:39:17.796 --> 00:39:20.076 A:middle
and that's "Apple Watch
Design Tips and Tricks."

00:39:20.216 --> 00:39:22.026 A:middle
They are going to
go over a whole lot

00:39:22.026 --> 00:39:23.926 A:middle
of really awesome information

00:39:24.166 --> 00:39:26.656 A:middle
to help you create
great Watch apps.

00:39:27.466 --> 00:39:30.236 A:middle
We also had the "Designing
for Apple Watch" session,

00:39:30.586 --> 00:39:34.446 A:middle
the "Introduction to WatchKit
for watchOS 2," and much more.

00:39:34.476 --> 00:39:35.936 A:middle
With that, thank you very much.

00:39:36.516 --> 00:39:39.500 A:middle
[Applause]

