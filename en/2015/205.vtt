WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:24.016 --> 00:00:25.146 A:middle
[Applause]

00:00:25.146 --> 00:00:28.776 A:middle
&gt;&gt; Peter Hajas: I am so excited
to be here today to talk to you

00:00:28.876 --> 00:00:30.976 A:middle
about multitasking on iPad.

00:00:32.066 --> 00:00:36.016 A:middle
My name is Peter Hajas, I'm
a UIKit Frameworks Engineer,

00:00:36.916 --> 00:00:39.376 A:middle
and later on I'll be
joined by my colleagues,

00:00:40.046 --> 00:00:42.346 A:middle
Jacob Xiao and Kurt Revis.

00:00:42.566 --> 00:00:47.226 A:middle
So you can see that even UIKit
is multitasking for this talk.

00:00:47.436 --> 00:00:49.796 A:middle
Multitasking is a giant feature,

00:00:50.366 --> 00:00:52.946 A:middle
and so we have split
it among three talks,

00:00:53.446 --> 00:00:54.666 A:middle
of which this is the first.

00:00:56.046 --> 00:00:58.226 A:middle
Tomorrow afternoon
you can hear all

00:00:58.226 --> 00:01:00.866 A:middle
about the great new
media enhancements


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.226 --> 00:01:00.866 A:middle
about the great new
media enhancements

00:01:00.926 --> 00:01:03.346 A:middle
that we have brought
to iPad and iOS 9,

00:01:04.066 --> 00:01:06.466 A:middle
and learn about
picture-in-picture video

00:01:07.016 --> 00:01:10.736 A:middle
and how your app can use the
camera alongside other apps

00:01:10.736 --> 00:01:11.626 A:middle
in multitasking.

00:01:12.876 --> 00:01:15.576 A:middle
Later that same day
is a really great talk

00:01:15.776 --> 00:01:20.336 A:middle
about how your app can be a
great citizen alongside other

00:01:20.336 --> 00:01:22.856 A:middle
apps that are multitasking
on iPad.

00:01:23.466 --> 00:01:25.556 A:middle
I really encourage
you to check out both

00:01:25.556 --> 00:01:27.066 A:middle
of these talks tomorrow.

00:01:29.836 --> 00:01:33.456 A:middle
Today we're going to
go over three topics.

00:01:35.036 --> 00:01:39.926 A:middle
The first, multitasking
in your app: what is it,

00:01:40.546 --> 00:01:43.416 A:middle
why should you adopt it,
how you can adopt it,

00:01:44.086 --> 00:01:46.196 A:middle
and what does it mean
at the UIKit level?

00:01:47.636 --> 00:01:51.516 A:middle
The second is changes
that we have made to UIKit

00:01:52.326 --> 00:01:55.806 A:middle
to make your multitasking
adoption experience really easy.

00:01:57.176 --> 00:02:00.496 A:middle
And the third is making
the most of the latest


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:57.176 --> 00:02:00.496 A:middle
And the third is making
the most of the latest

00:02:00.496 --> 00:02:04.776 A:middle
and greatest UIKit APIs to make
sure your app really shines

00:02:05.456 --> 00:02:06.296 A:middle
in multitasking.

00:02:06.816 --> 00:02:12.656 A:middle
Let's get started.

00:02:12.756 --> 00:02:14.056 A:middle
As you saw in the keynote,

00:02:14.376 --> 00:02:19.326 A:middle
multitasking brings a great new
experience to users on iPad.

00:02:19.916 --> 00:02:22.016 A:middle
They can be doing one of
their favorite things,

00:02:22.216 --> 00:02:25.356 A:middle
like browsing the web, and
slide in from the right

00:02:25.766 --> 00:02:27.586 A:middle
to interact with another app.

00:02:29.166 --> 00:02:32.666 A:middle
We call this mode 'slide over.'

00:02:41.656 --> 00:02:46.026 A:middle
The user can then tap the
divider to the left of the slide

00:02:46.026 --> 00:02:50.386 A:middle
over tap to pin the
apps side by side.

00:02:50.966 --> 00:02:55.386 A:middle
As you saw on the keynote, we
call this mode 'split view.'

00:02:56.796 --> 00:02:59.446 A:middle
Being that you're all
iOS developers I'm sure

00:02:59.446 --> 00:03:03.126 A:middle
that you're really familiar with
our UISplitview Controller API.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.446 --> 00:03:03.126 A:middle
that you're really familiar with
our UISplitview Controller API.

00:03:04.146 --> 00:03:06.676 A:middle
And I can assure you that
that's completely different

00:03:06.676 --> 00:03:07.326 A:middle
from split view.

00:03:08.181 --> 00:03:10.181 A:middle
[Laughter]

00:03:10.346 --> 00:03:11.906 A:middle
&gt;&gt; Peter Hajas: The user
can grab the divider

00:03:12.016 --> 00:03:15.416 A:middle
between the two applications
and resize them

00:03:15.586 --> 00:03:18.636 A:middle
for a 50/50 split view UI.

00:03:25.156 --> 00:03:28.606 A:middle
They can then take the divider
and keep dragging to the left

00:03:29.406 --> 00:03:34.406 A:middle
to promote the side app, in this
case, Maps, to be full screen.

00:03:34.966 --> 00:03:38.616 A:middle
Then they may choose to
slide in another app,

00:03:38.926 --> 00:03:41.136 A:middle
or the same one,
again from the side.

00:03:42.506 --> 00:03:47.706 A:middle
With multitasking on iPad in
iOS 9 the user is in control

00:03:47.876 --> 00:03:51.996 A:middle
of the experience, the apps
that are running, and the sizes

00:03:51.996 --> 00:03:54.286 A:middle
that those apps are running at.

00:03:54.956 --> 00:03:59.966 A:middle
There is another really cool
feature of multitasking in iOS 9


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:00.196 --> 00:04:04.506 A:middle
on iPad, and that's
picture-in-picture video,

00:04:05.636 --> 00:04:08.966 A:middle
which you can hear all
about at tomorrow's media

00:04:08.966 --> 00:04:10.096 A:middle
multitasking talk.

00:04:11.566 --> 00:04:16.356 A:middle
Today we'll be covering how your
applications can adopt split

00:04:16.356 --> 00:04:17.966 A:middle
view and slide over.

00:04:19.276 --> 00:04:23.156 A:middle
In order to understand how to
adopt those, it is important

00:04:23.156 --> 00:04:26.176 A:middle
that we talk about something
that's become increasingly

00:04:26.176 --> 00:04:29.976 A:middle
important in UIKit apps
and that's adaptivity.

00:04:38.146 --> 00:04:40.356 A:middle
In the past, we have
encouraged you

00:04:40.406 --> 00:04:42.636 A:middle
to make your applications
universal.

00:04:43.346 --> 00:04:49.696 A:middle
This means the same app can run
on the iPhone and on the iPad.

00:04:49.886 --> 00:04:53.876 A:middle
Last year we introduced
a simplified way for you

00:04:53.876 --> 00:04:55.536 A:middle
to do the check for what type

00:04:55.536 --> 00:04:57.686 A:middle
of interface you should
be providing to your user,

00:04:57.686 --> 00:05:05.206 A:middle
through the introduction of
the horizontal size class.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:57.686 --> 00:05:05.206 A:middle
through the introduction of
the horizontal size class.

00:05:05.386 --> 00:05:10.006 A:middle
Last year, iPhones in portrait
have the compact horizontal

00:05:10.126 --> 00:05:10.886 A:middle
size class.

00:05:12.116 --> 00:05:15.216 A:middle
They traditionally display,
for example, a single column

00:05:15.396 --> 00:05:20.756 A:middle
of content, whereas iPads
have the regular horizontal

00:05:20.916 --> 00:05:21.446 A:middle
size class.

00:05:22.666 --> 00:05:26.116 A:middle
Many of Apple's own system
apps use this to indicate

00:05:26.116 --> 00:05:28.886 A:middle
that they should show
multiple columns of content

00:05:30.156 --> 00:05:32.166 A:middle
and change the information
architecture

00:05:32.426 --> 00:05:36.486 A:middle
that they present to the user.

00:05:36.646 --> 00:05:39.666 A:middle
Also with the devices at last
year's Worldwide Developer

00:05:39.666 --> 00:05:43.966 A:middle
Conference, this held true
while the devices were held

00:05:43.966 --> 00:05:47.966 A:middle
in landscape, compact
horizontal for the iPhone,

00:05:48.586 --> 00:05:52.636 A:middle
and regular horizontal
for the iPad.

00:05:52.856 --> 00:05:56.316 A:middle
So that was last year's
Worldwide Developer Conference.

00:05:56.846 --> 00:05:59.876 A:middle
But if you look closely,

00:05:59.936 --> 00:06:02.896 A:middle
there was another message last
year that's really obvious


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.936 --> 00:06:02.896 A:middle
there was another message last
year that's really obvious

00:06:02.896 --> 00:06:06.206 A:middle
if you use a microscope;
we were telling you

00:06:06.206 --> 00:06:11.566 A:middle
to get ready for the iPhone 6+.

00:06:11.776 --> 00:06:13.716 A:middle
Like our existing iPhones,

00:06:14.226 --> 00:06:19.186 A:middle
the iPhone 6+ has a compact
horizontal size class.

00:06:19.936 --> 00:06:22.026 A:middle
But when rotated into landscape,

00:06:23.006 --> 00:06:26.056 A:middle
it has the regular
horizontal size class.

00:06:27.016 --> 00:06:30.956 A:middle
This is the first time that
an app can have different size

00:06:30.956 --> 00:06:32.716 A:middle
classes while it's running.

00:06:33.346 --> 00:06:37.956 A:middle
And that brings us to this year.

00:06:38.156 --> 00:06:40.806 A:middle
Similarly, if you take
this year's invitation

00:06:40.806 --> 00:06:43.106 A:middle
and draw the lines and rotate it

00:06:43.106 --> 00:06:45.796 A:middle
where you know it logically
makes sense, it forms a P,

00:06:46.136 --> 00:06:49.716 A:middle
the P of iPad multitasking;
it is obvious.

00:06:50.516 --> 00:06:55.836 A:middle
[Laughter]

00:06:56.336 --> 00:06:57.036 A:middle
&gt;&gt; Thank you.

00:06:57.756 --> 00:07:01.396 A:middle
So how does iPad multitasking
work with adaptivity?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:57.756 --> 00:07:01.396 A:middle
So how does iPad multitasking
work with adaptivity?

00:07:01.866 --> 00:07:06.826 A:middle
Let's take an example
of a slide over app.

00:07:07.456 --> 00:07:10.236 A:middle
The user slides over from
the right side of the display

00:07:10.236 --> 00:07:16.046 A:middle
and the app comes up in a
compact horizontal size class.

00:07:17.216 --> 00:07:19.546 A:middle
It shows what we would
traditionally refer

00:07:19.546 --> 00:07:21.666 A:middle
to as the iPhone experience.

00:07:22.046 --> 00:07:25.696 A:middle
Then the user may choose
to resize their app

00:07:25.696 --> 00:07:28.076 A:middle
to be full screen and
then it will change

00:07:28.436 --> 00:07:31.226 A:middle
into the regular
horizontal size class

00:07:31.646 --> 00:07:34.386 A:middle
and display its traditional
iPad UI.

00:07:35.616 --> 00:07:37.376 A:middle
Two new things happened here

00:07:37.596 --> 00:07:39.776 A:middle
that never have been
possible before on iPad.

00:07:41.066 --> 00:07:46.766 A:middle
First, the app began its life as
a compact horizontal size class,

00:07:47.286 --> 00:07:49.956 A:middle
something that has never
been possible on iPad before.

00:07:51.016 --> 00:07:54.316 A:middle
Second, the app changed
size classes

00:07:54.586 --> 00:07:55.776 A:middle
when the user resized it.

00:07:56.286 --> 00:07:58.896 A:middle
This is also brand new to iOS 9.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:06.176 --> 00:08:09.876 A:middle
So what does this mean for
your app and your users?

00:08:10.976 --> 00:08:13.396 A:middle
Let's look at it from
those users' perspectives.

00:08:15.116 --> 00:08:18.796 A:middle
They could be browsing the
web and want to interact

00:08:18.966 --> 00:08:21.456 A:middle
with another one of their
favorite apps on iPad.

00:08:22.666 --> 00:08:25.026 A:middle
So they'll slide in from
the right and they'll want

00:08:25.026 --> 00:08:28.426 A:middle
to see your app in this list.

00:08:30.236 --> 00:08:35.246 A:middle
By adopting multitasking in
your app on iPad and iOS 9,

00:08:36.206 --> 00:08:40.966 A:middle
you will let users get into
your app more, spend more time

00:08:40.966 --> 00:08:44.476 A:middle
in your app while they use it
alongside their other favorite

00:08:44.476 --> 00:08:48.666 A:middle
apps on iPad, and use
your app in brand-new ways

00:08:48.666 --> 00:08:51.556 A:middle
that you may have never
imagined in concert

00:08:51.556 --> 00:08:52.576 A:middle
with their other apps.

00:08:53.676 --> 00:08:56.216 A:middle
Users will expect that all apps

00:08:56.216 --> 00:08:58.496 A:middle
on their iPad support
multitasking,

00:08:59.006 --> 00:09:00.996 A:middle
and we're here to
help you adopt it.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.006 --> 00:09:00.996 A:middle
and we're here to
help you adopt it.

00:09:02.396 --> 00:09:04.526 A:middle
Let's go through
just how easy it is

00:09:04.526 --> 00:09:07.196 A:middle
to add multitasking
to your iOS app.

00:09:08.196 --> 00:09:10.726 A:middle
I have got great news for
you: it is really easy.

00:09:11.816 --> 00:09:16.146 A:middle
All you have to do is
use the Xcode 7 beta

00:09:16.146 --> 00:09:17.356 A:middle
and create a new project.

00:09:18.196 --> 00:09:19.806 A:middle
All new projects created

00:09:19.806 --> 00:09:23.696 A:middle
in Xcode 7 have iPad
multitasking enabled by default,

00:09:24.256 --> 00:09:26.176 A:middle
and all the code you
write will be running

00:09:26.176 --> 00:09:27.936 A:middle
in multitasking, and that's it.

00:09:28.026 --> 00:09:28.946 A:middle
Just make a new project.

00:09:29.126 --> 00:09:31.126 A:middle
[Laughter]

00:09:31.236 --> 00:09:33.586 A:middle
&gt;&gt; Peter Hajas: Now, right
before this talk, off stage,

00:09:33.586 --> 00:09:35.486 A:middle
some of my colleagues
reminded me that there are one

00:09:35.486 --> 00:09:38.946 A:middle
or two existing apps that may
choose to adopt multitasking.

00:09:39.666 --> 00:09:42.166 A:middle
And for those apps,
it is easy also.

00:09:42.586 --> 00:09:45.776 A:middle
You just need to follow
three simple steps.

00:09:46.756 --> 00:09:50.676 A:middle
First, build your app
with the iOS 9 SDK.

00:09:51.586 --> 00:09:55.026 A:middle
You can do so in the build
settings of your Xcode project.

00:09:56.816 --> 00:10:03.686 A:middle
Second, support all orientations
in the iPad version of your app.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:56.816 --> 00:10:03.686 A:middle
Second, support all orientations
in the iPad version of your app.

00:10:04.466 --> 00:10:07.866 A:middle
At last year's conference,
we encouraged you to think

00:10:08.006 --> 00:10:11.926 A:middle
of orientation changes as
simple bounds size changes.

00:10:12.506 --> 00:10:15.056 A:middle
And this advice continues
with iOS 9,

00:10:16.216 --> 00:10:20.386 A:middle
because a multitasking resize is
just that, a bounds size change.

00:10:20.906 --> 00:10:23.936 A:middle
But because the user
is in control

00:10:24.986 --> 00:10:27.396 A:middle
of what orientation they're
holding their iPad in,

00:10:27.716 --> 00:10:29.966 A:middle
in multitasking it is important

00:10:29.966 --> 00:10:33.276 A:middle
that your iPad app
supports all orientations.

00:10:35.096 --> 00:10:37.616 A:middle
Finally, the third
thing you'll need

00:10:37.616 --> 00:10:40.426 A:middle
to do is use Launch Storyboards.

00:10:41.766 --> 00:10:45.586 A:middle
Introduced last year, Launch
Storyboards are a great way

00:10:45.586 --> 00:10:48.006 A:middle
for you to specify
one storyboard

00:10:48.476 --> 00:10:51.986 A:middle
as the launch appearance
for your app in all sizes,

00:10:52.396 --> 00:10:57.036 A:middle
configurations, orientations,
and devices that iOS supports.

00:10:58.196 --> 00:11:01.856 A:middle
With all the different sizes
supported by iPad multitasking,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.196 --> 00:11:01.856 A:middle
With all the different sizes
supported by iPad multitasking,

00:11:02.416 --> 00:11:06.146 A:middle
using Launch Storyboards is
a requirement for adding it.

00:11:06.856 --> 00:11:08.306 A:middle
One important note here --

00:11:09.056 --> 00:11:11.736 A:middle
if your app requires a
full-screen experience,

00:11:12.156 --> 00:11:15.836 A:middle
you can opt out by using the
UI Requires Fullscreen key

00:11:16.246 --> 00:11:17.446 A:middle
in your info.plist.

00:11:25.156 --> 00:11:27.886 A:middle
Now that we've gone
over just how easy it is

00:11:28.176 --> 00:11:30.736 A:middle
to create a new project
with multitasking or add it

00:11:30.736 --> 00:11:33.876 A:middle
to your existing project,
let's go through how it works

00:11:33.876 --> 00:11:35.746 A:middle
in your app at the UIKit level.

00:11:36.316 --> 00:11:37.986 A:middle
There are some very
important changes

00:11:38.046 --> 00:11:39.026 A:middle
that you should be aware of.

00:11:39.716 --> 00:11:46.456 A:middle
In the past, UIScreen Bounds
has returned the visible bounds

00:11:46.456 --> 00:11:48.686 A:middle
of the entire display
of the device.

00:11:49.716 --> 00:11:51.776 A:middle
And this continues in iOS 9.

00:11:53.076 --> 00:11:58.006 A:middle
Whether your app is running
in full screen or is resized

00:11:58.206 --> 00:12:02.976 A:middle
for multitasking, one
really important change is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.206 --> 00:12:02.976 A:middle
for multitasking, one
really important change is

00:12:02.976 --> 00:12:06.776 A:middle
that UI Window Bounds, well, it
returns your window's bounds.

00:12:07.526 --> 00:12:11.086 A:middle
But your window's bounds will
no longer always be the same

00:12:11.236 --> 00:12:14.056 A:middle
as the screen bounds of
the device, for example,

00:12:14.526 --> 00:12:17.116 A:middle
when your app is
resized in multitasking.

00:12:18.546 --> 00:12:20.896 A:middle
Another important change is

00:12:20.896 --> 00:12:25.776 A:middle
that your window's frame origin
is always in the top left,

00:12:26.256 --> 00:12:29.556 A:middle
(0,0), whether you're
running on the left side

00:12:29.746 --> 00:12:33.706 A:middle
of the screen or
on the right side.

00:12:34.976 --> 00:12:38.456 A:middle
We don't want you to have
to worry about which side

00:12:38.456 --> 00:12:41.106 A:middle
of the screen you're on or what
other apps you might be running

00:12:41.106 --> 00:12:41.626 A:middle
next to.

00:12:42.086 --> 00:12:46.386 A:middle
We only want you to focus on
the experience in your app.

00:12:47.736 --> 00:12:50.696 A:middle
Now let's talk about the
different types of transitions

00:12:51.246 --> 00:12:54.326 A:middle
that can take place when
your app is being resized.

00:12:55.116 --> 00:12:58.916 A:middle
We'll use an example, an app
that's great with multitasking

00:12:58.916 --> 00:13:03.106 A:middle
in iOS 9, the brand-new
Notes app.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.916 --> 00:13:03.106 A:middle
in iOS 9, the brand-new
Notes app.

00:13:03.676 --> 00:13:05.796 A:middle
This is the new Notes
app running

00:13:05.796 --> 00:13:08.136 A:middle
as a slide over app on iPad.

00:13:09.406 --> 00:13:11.096 A:middle
You will notice that
it looks a lot

00:13:11.166 --> 00:13:12.856 A:middle
like the Notes app on iPhone.

00:13:13.996 --> 00:13:16.406 A:middle
It shows a single column of UI.

00:13:16.996 --> 00:13:24.396 A:middle
We call this the
horizontally compact size class.

00:13:24.586 --> 00:13:27.196 A:middle
Later on, the user
may resize our app

00:13:28.376 --> 00:13:32.646 A:middle
and at a certain point
we'll change what class

00:13:32.646 --> 00:13:36.946 A:middle
of experience we should
be providing to the user.

00:13:37.116 --> 00:13:40.896 A:middle
Notice that Notes now displays
two columns of content.

00:13:42.216 --> 00:13:46.506 A:middle
This is that same
horizontally regular size class

00:13:46.506 --> 00:13:47.696 A:middle
that we saw earlier.

00:13:50.536 --> 00:13:54.136 A:middle
Notice how Notes has changed
the information architecture

00:13:54.246 --> 00:13:57.386 A:middle
of the app to show your
notes list on the left

00:13:58.106 --> 00:13:59.486 A:middle
and a note on the right.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:00.376 --> 00:14:01.746 A:middle
This is the type of change

00:14:02.166 --> 00:14:05.696 A:middle
that you should use size class
transitions to influence.

00:14:07.896 --> 00:14:11.786 A:middle
One important thing to note
about these transitions is

00:14:11.786 --> 00:14:15.606 A:middle
that not all resizes will
trigger a size class change.

00:14:16.996 --> 00:14:21.856 A:middle
For example, if Notes is
running in split view on iPad

00:14:21.856 --> 00:14:25.256 A:middle
and the user resizes
the app a little bit,

00:14:26.766 --> 00:14:28.906 A:middle
it won't change size classes.

00:14:30.146 --> 00:14:35.796 A:middle
It still shows a
single column of UI.

00:14:35.996 --> 00:14:38.116 A:middle
Instead of changing
the experience class,

00:14:39.206 --> 00:14:40.896 A:middle
Notes uses this new size

00:14:40.896 --> 00:14:44.106 A:middle
to influence its view's
positioning and layout.

00:14:44.776 --> 00:14:48.426 A:middle
Look again as we make the
app a little bit smaller.

00:14:49.206 --> 00:14:54.076 A:middle
Still a single column of UI.

00:14:54.276 --> 00:14:57.846 A:middle
UIKit has made some important
changes to our current API

00:14:58.486 --> 00:15:00.696 A:middle
to make this really easy
for your app to adopt.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:58.486 --> 00:15:00.696 A:middle
to make this really easy
for your app to adopt.

00:15:02.016 --> 00:15:03.816 A:middle
One of these technologies
that we encourage you

00:15:03.816 --> 00:15:07.396 A:middle
to use is Auto Layout, UIKit

00:15:07.396 --> 00:15:10.316 A:middle
and AppKit's declarative
view layout system.

00:15:11.546 --> 00:15:13.186 A:middle
Auto Layout allows you

00:15:13.286 --> 00:15:16.426 A:middle
to position your views
using constraints,

00:15:17.086 --> 00:15:18.626 A:middle
and then when bounds changes,

00:15:18.996 --> 00:15:21.176 A:middle
Auto Layout will
reset their centers

00:15:21.176 --> 00:15:22.456 A:middle
and frames appropriately.

00:15:22.506 --> 00:15:24.236 A:middle
It is really easy to use.

00:15:25.466 --> 00:15:30.456 A:middle
New in iOS 9, we have added some
great new constraint convenience

00:15:30.456 --> 00:15:34.316 A:middle
API that makes it really easy to
create Auto Layout constraints.

00:15:35.466 --> 00:15:39.626 A:middle
Also if you use the leading
and trailing layout attributes,

00:15:40.286 --> 00:15:40.866 A:middle
you'll get a lot

00:15:40.866 --> 00:15:52.866 A:middle
of the right-to-left language
support for free in your app.

00:15:53.136 --> 00:15:55.846 A:middle
Another area of importance
that we saw

00:15:56.196 --> 00:16:01.146 A:middle
for helping apps handle resizing
is in the form of legibility.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:56.196 --> 00:16:01.146 A:middle
for helping apps handle resizing
is in the form of legibility.

00:16:02.476 --> 00:16:05.556 A:middle
We're introducing a
new API on UIView,

00:16:06.246 --> 00:16:07.596 A:middle
'readable content guide.'

00:16:08.956 --> 00:16:11.156 A:middle
This will return
a UI layout guide,

00:16:11.686 --> 00:16:15.256 A:middle
which represents the
legible region in a UIView.

00:16:16.806 --> 00:16:20.026 A:middle
This means that if you use
this readable content guide

00:16:20.786 --> 00:16:22.186 A:middle
to position your views,

00:16:22.446 --> 00:16:24.876 A:middle
they will always be
at a legible width.

00:16:25.606 --> 00:16:29.056 A:middle
For example, in this sample app,

00:16:29.206 --> 00:16:33.416 A:middle
which uses readable content
guide, the view is full size,

00:16:33.416 --> 00:16:35.086 A:middle
it is the size of
the whole iPad.

00:16:36.006 --> 00:16:39.126 A:middle
But the readable content guide
has given it some generous

00:16:39.126 --> 00:16:43.646 A:middle
margins to make sure that the
lines are really easy to read.

00:16:44.756 --> 00:16:47.796 A:middle
A great feature of using
readable content guide is it

00:16:47.796 --> 00:16:51.586 A:middle
will automatically adjust
depending on what size

00:16:51.966 --> 00:16:54.206 A:middle
and device the app
is running on.

00:16:55.186 --> 00:16:57.936 A:middle
It also works great
with dynamic type,

00:16:58.236 --> 00:17:00.966 A:middle
something that we
encourage all apps to adopt.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:58.236 --> 00:17:00.966 A:middle
something that we
encourage all apps to adopt.

00:17:02.166 --> 00:17:05.396 A:middle
You can also use it with
or without Auto Layout.

00:17:05.986 --> 00:17:11.116 A:middle
A common component in many
iOS apps is UI Table View.

00:17:11.656 --> 00:17:14.915 A:middle
And we wanted to make legibility
really easy there too.

00:17:16.006 --> 00:17:19.126 A:middle
So we have introduced a new
property on UITableView,

00:17:19.826 --> 00:17:22.906 A:middle
'cell layout margins
follow readable width.'

00:17:24.256 --> 00:17:25.955 A:middle
When this property
is set to yes,

00:17:26.705 --> 00:17:30.976 A:middle
your table view's cells' content
view will have layout margins

00:17:31.236 --> 00:17:35.736 A:middle
set such that content laid out
relative to those margins is

00:17:35.736 --> 00:17:38.686 A:middle
at a comfortable, legible
width for the user.

00:17:40.016 --> 00:17:43.496 A:middle
This means that by simply
using the layout margins

00:17:43.616 --> 00:17:47.886 A:middle
in your UITableView cells'
content view, the contents

00:17:47.886 --> 00:17:49.236 A:middle
in your cells will be

00:17:49.236 --> 00:17:55.546 A:middle
at a comfortable width whether
running in full screen on iPad

00:17:55.766 --> 00:17:58.676 A:middle
or in a smaller screen such
as an iPhone in portrait.

00:17:58.676 --> 00:18:03.476 A:middle
Now that we have talked about
some of the great improvements


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.676 --> 00:18:03.476 A:middle
Now that we have talked about
some of the great improvements

00:18:03.826 --> 00:18:06.906 A:middle
for multitasking, I would like
to hand it off to my friend

00:18:06.906 --> 00:18:09.696 A:middle
and colleague, Jacob
Xiao, who is going to talk

00:18:09.696 --> 00:18:12.556 A:middle
about what's changed in
UIKit and some best practices

00:18:12.556 --> 00:18:13.476 A:middle
for your apps to follow.

00:18:13.726 --> 00:18:13.966 A:middle
Jacob?

00:18:14.516 --> 00:18:20.106 A:middle
[Applause]

00:18:20.606 --> 00:18:21.096 A:middle
&gt;&gt; Jacob Xiao: Thanks, Peter.

00:18:22.256 --> 00:18:25.686 A:middle
I would like to tell you
some of the changes to iOS

00:18:26.276 --> 00:18:29.476 A:middle
to support multitasking,
and also some best practices

00:18:30.166 --> 00:18:32.636 A:middle
for working with those
changes in your apps.

00:18:33.776 --> 00:18:37.126 A:middle
So, last year, we asked to
you make your apps adaptive

00:18:37.766 --> 00:18:39.866 A:middle
by using traits and
size classes.

00:18:40.926 --> 00:18:43.186 A:middle
And you can see more
information about that in the

00:18:43.186 --> 00:18:45.926 A:middle
"Building Adaptive Apps with
UIKit" talk from last year.

00:18:47.476 --> 00:18:51.416 A:middle
So now that iPad multitasking
is here, what has changed?

00:18:52.406 --> 00:18:54.446 A:middle
Well, the answer is not much.

00:18:55.526 --> 00:18:56.226 A:middle
That's all for us.

00:18:56.226 --> 00:18:57.156 A:middle
Enjoy the conference.

00:18:58.031 --> 00:19:00.031 A:middle
[Laughter]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:58.031 --> 00:19:00.031 A:middle
[Laughter]

00:19:00.046 --> 00:19:01.686 A:middle
&gt;&gt; Jacob Xiao: Okay, so, there
are a few important changes

00:19:01.686 --> 00:19:02.716 A:middle
that you want to keep in mind

00:19:03.076 --> 00:19:05.366 A:middle
to give your app a great
experience with multitasking.

00:19:05.366 --> 00:19:07.086 A:middle
And let's talk about
a few of those.

00:19:08.426 --> 00:19:09.966 A:middle
Let's start with orientation.

00:19:10.526 --> 00:19:13.036 A:middle
How many of you have
code in your app

00:19:13.036 --> 00:19:14.106 A:middle
that looks something like this?

00:19:14.106 --> 00:19:15.766 A:middle
It is okay.

00:19:15.766 --> 00:19:16.936 A:middle
This is a judgment-free zone.

00:19:17.526 --> 00:19:20.726 A:middle
This kind of code made a
lot of sense in the past,

00:19:21.986 --> 00:19:24.606 A:middle
to give your app a different
layout when it was in portrait

00:19:25.186 --> 00:19:28.326 A:middle
or landscape, to really make
the best use of the space

00:19:28.326 --> 00:19:29.346 A:middle
that was available to you.

00:19:30.816 --> 00:19:32.936 A:middle
But you want to think
about how that should work

00:19:33.186 --> 00:19:34.406 A:middle
with iPad multitasking.

00:19:35.226 --> 00:19:38.916 A:middle
For example, here, although the
iPad itself is in landscape,

00:19:39.976 --> 00:19:41.826 A:middle
we don't really want to
use the landscape version

00:19:41.826 --> 00:19:44.066 A:middle
of our layout here,
because we have

00:19:44.116 --> 00:19:45.476 A:middle
so much more vertical space.

00:19:46.226 --> 00:19:48.886 A:middle
It makes a lot more sense
to use the previous layout

00:19:48.886 --> 00:19:50.466 A:middle
that we would have called
the portrait layout.

00:19:51.816 --> 00:19:54.426 A:middle
So with multitasking it is
better to avoid thinking

00:19:54.426 --> 00:19:55.276 A:middle
about things in terms

00:19:55.276 --> 00:19:57.366 A:middle
of the interface
orientation specifically.

00:19:58.186 --> 00:20:00.046 A:middle
Let's take a look at
what you can use instead


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:58.186 --> 00:20:00.046 A:middle
Let's take a look at
what you can use instead

00:20:00.176 --> 00:20:01.156 A:middle
for these kinds of changes.

00:20:01.716 --> 00:20:05.216 A:middle
To get a better idea of this,
let's take a closer look

00:20:05.296 --> 00:20:07.236 A:middle
at what happens during rotation.

00:20:08.246 --> 00:20:10.446 A:middle
First let's take a look
at an iPhone rotation.

00:20:11.716 --> 00:20:14.256 A:middle
As the device rotates,
your app is resized

00:20:14.786 --> 00:20:15.736 A:middle
and rotates along with it.

00:20:15.736 --> 00:20:18.676 A:middle
But we can actually break
apart this transition

00:20:18.966 --> 00:20:21.986 A:middle
into two changes
that make it up.

00:20:22.256 --> 00:20:25.756 A:middle
First, your app is resized
to be the new content size,

00:20:25.756 --> 00:20:28.946 A:middle
and then it is actually
rotated to face

00:20:28.946 --> 00:20:29.866 A:middle
where the user is looking.

00:20:30.256 --> 00:20:33.886 A:middle
Now we can do something
similar with rotation

00:20:33.886 --> 00:20:35.936 A:middle
on iPad including
with multitasking.

00:20:37.086 --> 00:20:39.996 A:middle
Once again, this is what the
rotation itself looks like,

00:20:40.946 --> 00:20:44.586 A:middle
and we can break it apart into
first, that content resize,

00:20:45.216 --> 00:20:47.216 A:middle
and then, the rotation.

00:20:47.786 --> 00:20:51.326 A:middle
Now, when the user is
actually viewing this rotation,

00:20:51.416 --> 00:20:53.156 A:middle
these two changes
happen at the same time.

00:20:53.256 --> 00:20:56.486 A:middle
But it is useful to think about
them as two independent changes.

00:20:57.406 --> 00:20:59.016 A:middle
And one of the great
things about doing that is

00:20:59.016 --> 00:21:02.436 A:middle
that you can really share a
lot with multitasking resizes.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.016 --> 00:21:02.436 A:middle
that you can really share a
lot with multitasking resizes.

00:21:03.256 --> 00:21:05.016 A:middle
Here the same kind of
thing is happening,

00:21:05.406 --> 00:21:07.926 A:middle
but just the resize
portion, not the rotation.

00:21:08.786 --> 00:21:10.386 A:middle
So as the user resizes your app,

00:21:11.556 --> 00:21:13.626 A:middle
it is just a content
bounds size change.

00:21:14.276 --> 00:21:18.066 A:middle
So, in the past, if you were
using the interface orientation

00:21:18.066 --> 00:21:20.916 A:middle
explicitly, I would
encourage you instead to think

00:21:20.916 --> 00:21:24.166 A:middle
about how you want to deal in
terms of the view size changing

00:21:24.606 --> 00:21:25.896 A:middle
for these kinds of
layout changes.

00:21:26.856 --> 00:21:29.426 A:middle
Another good option to
consider is the vertical

00:21:29.426 --> 00:21:32.376 A:middle
or horizontal size
class, and by using either

00:21:32.376 --> 00:21:34.426 A:middle
of these approaches
your app will work great

00:21:34.426 --> 00:21:35.226 A:middle
with multitasking.

00:21:35.846 --> 00:21:39.396 A:middle
So next, let's take a
closer look at transitions

00:21:39.776 --> 00:21:42.166 A:middle
like rotation and
multitasking resizes.

00:21:43.516 --> 00:21:47.486 A:middle
Previously we had callbacks for
your app related to rotation.

00:21:48.926 --> 00:21:51.046 A:middle
But these callbacks work
specifically in terms

00:21:51.046 --> 00:21:52.706 A:middle
of the interface
orientation changing.

00:21:53.416 --> 00:21:57.446 A:middle
So instead, in iOS 8, we
introduced new callbacks related

00:21:57.446 --> 00:21:59.816 A:middle
to the trait collection
or the view size changing,

00:21:59.816 --> 00:22:02.596 A:middle
and we strongly encourage
you to use these instead.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.816 --> 00:22:02.596 A:middle
and we strongly encourage
you to use these instead.

00:22:04.006 --> 00:22:06.266 A:middle
Now, to get a better
idea about how this kind

00:22:06.266 --> 00:22:10.456 A:middle
of rotation transitions happen,
let's take a look at a timeline

00:22:10.756 --> 00:22:11.816 A:middle
of one of those transitions.

00:22:12.816 --> 00:22:13.826 A:middle
Let's start with rotation.

00:22:15.236 --> 00:22:17.766 A:middle
Now we can divide this
rotation transition

00:22:17.856 --> 00:22:19.126 A:middle
into a few different stages.

00:22:20.176 --> 00:22:22.866 A:middle
First, we'll set up for the
change that's about to occur.

00:22:24.096 --> 00:22:26.506 A:middle
Then, we'll create the
animations we'll be showing

00:22:26.506 --> 00:22:27.166 A:middle
to the user.

00:22:27.166 --> 00:22:29.846 A:middle
And then we'll actually
run those animations.

00:22:30.106 --> 00:22:32.766 A:middle
And this stage is the part
that the user actually sees

00:22:32.916 --> 00:22:33.986 A:middle
as the rotation happened.

00:22:35.216 --> 00:22:38.346 A:middle
Then, when everything is done,
we'll perform some clean up.

00:22:38.906 --> 00:22:41.336 A:middle
Now the point during this
transition where the size

00:22:41.336 --> 00:22:43.336 A:middle
and size classes actually
change for your app,

00:22:43.676 --> 00:22:45.696 A:middle
is just at the end
of the 'setup' stage.

00:22:47.136 --> 00:22:48.726 A:middle
So now that we have seen
the different stages

00:22:48.726 --> 00:22:51.396 A:middle
of this transition, let's see
how those callbacks fit in.

00:22:52.866 --> 00:22:55.646 A:middle
Both of the transition
callbacks happen as part

00:22:55.646 --> 00:22:57.976 A:middle
of the 'setup' stage
of these transitions.

00:22:59.316 --> 00:23:01.626 A:middle
Now, similarly, as the
size class is changing,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.316 --> 00:23:01.626 A:middle
Now, similarly, as the
size class is changing,

00:23:02.306 --> 00:23:04.326 A:middle
the 'trait collection did
change' method is called

00:23:04.526 --> 00:23:06.216 A:middle
on your views and
view controllers.

00:23:06.786 --> 00:23:10.986 A:middle
Now the two transition
callbacks will not only give you

00:23:10.986 --> 00:23:13.246 A:middle
information about the change
that's about to occur,

00:23:13.766 --> 00:23:16.016 A:middle
they also pass your app
a transition coordinator.

00:23:16.016 --> 00:23:19.386 A:middle
And transition coordinators
have great API that you can use

00:23:19.386 --> 00:23:22.616 A:middle
to add your own alongside
animation blocks to be run

00:23:22.616 --> 00:23:24.016 A:middle
as part of the main animation.

00:23:24.896 --> 00:23:26.336 A:middle
And if you do those,
they'll be set

00:23:26.336 --> 00:23:28.866 A:middle
up during the 'create
animations' stage.

00:23:29.596 --> 00:23:31.836 A:middle
Similarly, if you
add completion blocks

00:23:31.956 --> 00:23:34.546 A:middle
to the transition coordinator,
those'll be run at the end,

00:23:34.546 --> 00:23:36.006 A:middle
as part of the 'cleanup' stage.

00:23:36.826 --> 00:23:38.346 A:middle
Now, notice that there
aren't any callbacks

00:23:38.346 --> 00:23:40.896 A:middle
to your app during the 'run
animations' stage specifically.

00:23:40.896 --> 00:23:43.146 A:middle
And that's because it
is generally better

00:23:43.146 --> 00:23:45.836 A:middle
to perform the work that
you want to do either

00:23:45.836 --> 00:23:48.526 A:middle
at the very beginning or the
very end of these transitions.

00:23:49.936 --> 00:23:51.956 A:middle
So now that we have seen
the rotation transition

00:23:51.956 --> 00:23:54.746 A:middle
and the timeline for what
happens, let's take a look

00:23:54.946 --> 00:23:56.256 A:middle
at a multitasking resize.

00:23:57.696 --> 00:24:00.906 A:middle
Now, during this transition,
we first perform some setup,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:57.696 --> 00:24:00.906 A:middle
Now, during this transition,
we first perform some setup,

00:24:01.776 --> 00:24:03.206 A:middle
then we create some
animations --

00:24:03.996 --> 00:24:05.766 A:middle
well, hopefully you
see the pattern here.

00:24:05.766 --> 00:24:08.776 A:middle
These are the exact same
stages, and the callbacks happen

00:24:08.776 --> 00:24:11.236 A:middle
in the exact same way
with multitasking resizes.

00:24:11.236 --> 00:24:14.156 A:middle
And that's what's really great
about these new callbacks.

00:24:14.846 --> 00:24:17.776 A:middle
They allow you to use the
same code between rotation

00:24:17.776 --> 00:24:19.426 A:middle
and multitasking resizes.

00:24:20.086 --> 00:24:23.086 A:middle
Now, there is one
important thing to keep

00:24:23.086 --> 00:24:25.796 A:middle
in mind specifically
about resize transitions.

00:24:25.796 --> 00:24:29.336 A:middle
And that's that your app has
only a limited amount of time

00:24:29.406 --> 00:24:31.266 A:middle
to perform the changes
that it wants to do.

00:24:32.356 --> 00:24:35.146 A:middle
Just like with app start up,
if your app takes too long

00:24:35.146 --> 00:24:37.156 A:middle
to make these changes,
then it will be terminated.

00:24:38.226 --> 00:24:41.826 A:middle
But I'm sure that won't
happen to any of you.

00:24:42.086 --> 00:24:44.006 A:middle
So, one important
thing to keep in mind,

00:24:44.186 --> 00:24:45.536 A:middle
if you're implementing
both of these

00:24:45.536 --> 00:24:47.976 A:middle
to your transition callbacks,
is that 'will transition

00:24:47.976 --> 00:24:50.256 A:middle
to trait collection' will
be called before 'view will

00:24:50.256 --> 00:24:51.166 A:middle
transition to size.'

00:24:51.166 --> 00:24:52.886 A:middle
And this is useful
to keep in mind.

00:24:53.856 --> 00:24:55.596 A:middle
However, as Peter
mentioned earlier,

00:24:55.596 --> 00:24:57.846 A:middle
there are some multitasking
resizes

00:24:58.176 --> 00:24:59.906 A:middle
where only the size
will change in your app

00:24:59.906 --> 00:25:02.016 A:middle
and the size class
will stay the same.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:59.906 --> 00:25:02.016 A:middle
and the size class
will stay the same.

00:25:02.946 --> 00:25:05.416 A:middle
When this happens, the trait
collections don't change,

00:25:05.906 --> 00:25:08.296 A:middle
and so we won't call the trait
collection change callback

00:25:08.296 --> 00:25:11.266 A:middle
methods, we'll only call 'view
will transition to size.'

00:25:12.216 --> 00:25:16.016 A:middle
You can still use the
transition coordinator APIs

00:25:16.126 --> 00:25:18.576 A:middle
to add alongside animation
and completion blocks.

00:25:19.246 --> 00:25:21.776 A:middle
Now, similarly, there
are some cases

00:25:22.086 --> 00:25:24.196 A:middle
where only the trait collection
of your app will change,

00:25:24.376 --> 00:25:25.586 A:middle
but the size will stay the same.

00:25:26.406 --> 00:25:27.496 A:middle
This can happen, for example,

00:25:27.496 --> 00:25:29.236 A:middle
when you're overwriting
the trait collection

00:25:29.236 --> 00:25:29.996 A:middle
of a view controller.

00:25:31.516 --> 00:25:33.036 A:middle
So as you're implementing
these callbacks,

00:25:33.486 --> 00:25:35.326 A:middle
make sure that you don't
assume that just because one

00:25:35.326 --> 00:25:37.316 A:middle
of them is called, the others
will be called as well.

00:25:37.406 --> 00:25:39.486 A:middle
And that's transitions.

00:25:39.486 --> 00:25:43.026 A:middle
Next, let's take
a look at windows

00:25:43.256 --> 00:25:45.056 A:middle
and specifically UIWindow.

00:25:46.616 --> 00:25:50.076 A:middle
Generally, when your app starts
up, you'll create a new UIWindow

00:25:50.076 --> 00:25:53.146 A:middle
and give it a frame
that's equal to the bounds

00:25:53.366 --> 00:25:54.746 A:middle
of your main UI screen.

00:25:56.046 --> 00:25:56.816 A:middle
Now, when that happens,

00:25:56.816 --> 00:25:59.746 A:middle
if the user resizes your
app during multitasking,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:00.096 --> 00:26:02.886 A:middle
then that UI window's frame
will automatically be resized

00:26:03.166 --> 00:26:04.606 A:middle
to match the new
size of your app.

00:26:04.606 --> 00:26:07.316 A:middle
And that will continue as long

00:26:07.316 --> 00:26:09.016 A:middle
as the user is resizing
your app.

00:26:10.356 --> 00:26:12.116 A:middle
However, if you create
a UIWindow

00:26:12.116 --> 00:26:14.626 A:middle
that has a size that's different
from the screen's bounds,

00:26:15.296 --> 00:26:17.676 A:middle
then we'll leave that
window to have the same size

00:26:17.726 --> 00:26:19.106 A:middle
as your app is resized.

00:26:19.106 --> 00:26:24.496 A:middle
As Peter mentioned, the origin
of UI windows is in the top left

00:26:24.496 --> 00:26:26.366 A:middle
of your app even
as they're resized.

00:26:26.736 --> 00:26:28.716 A:middle
So all of these UIWindows
will move along

00:26:28.716 --> 00:26:30.146 A:middle
with the rest of your app.

00:26:30.916 --> 00:26:34.736 A:middle
Now, generally, in the past, to
make a full-screen sized window,

00:26:35.606 --> 00:26:38.256 A:middle
you would create the UIWindow
and explicitly give it a frame

00:26:38.256 --> 00:26:40.576 A:middle
that was equal to the
main UI screen's bounds.

00:26:41.486 --> 00:26:43.686 A:middle
And you can still do that
with iPad multitasking,

00:26:44.386 --> 00:26:46.506 A:middle
but in iOS 9 we've
made this even easier.

00:26:47.276 --> 00:26:49.346 A:middle
Now you can just
create a new UIWindow

00:26:49.536 --> 00:26:51.066 A:middle
without passing any
explicit frame,

00:26:51.616 --> 00:26:52.806 A:middle
and we'll make it
the correct size

00:26:52.806 --> 00:26:54.156 A:middle
that your app is
using right now,

00:26:54.156 --> 00:26:56.516 A:middle
and automatically
resize it along

00:26:56.516 --> 00:26:58.266 A:middle
with all multitasking resizes.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:00.046 --> 00:27:05.836 A:middle
Okay. Now let's take a
look at presentations.

00:27:05.836 --> 00:27:08.656 A:middle
In iOS 8, we introduced UI
Presentation Controller.

00:27:08.656 --> 00:27:11.976 A:middle
And this is a great class for
making custom presentations

00:27:12.486 --> 00:27:14.596 A:middle
or for working with
system-provided presentations.

00:27:15.416 --> 00:27:18.096 A:middle
And you can see "A Look Inside
Presentation Controllers,"

00:27:18.096 --> 00:27:21.666 A:middle
a talk from last year's
WWDC, for more information

00:27:21.666 --> 00:27:24.106 A:middle
about using this class.

00:27:24.256 --> 00:27:26.686 A:middle
One of the great things about
presentation controllers

00:27:27.056 --> 00:27:29.566 A:middle
with multitasking is their
support for adaptivity.

00:27:29.986 --> 00:27:36.026 A:middle
So, for example, you can show a
popover presentation on an iPad,

00:27:37.216 --> 00:27:40.286 A:middle
and when your app size
class changes, in this case

00:27:40.286 --> 00:27:42.146 A:middle
to the compact horizontal
size class,

00:27:42.216 --> 00:27:44.836 A:middle
it will automatically
transform that presentation

00:27:45.086 --> 00:27:46.756 A:middle
into a style that makes sense.

00:27:47.646 --> 00:27:50.076 A:middle
So, here, we have adapted to
a modal full screen style.

00:27:50.126 --> 00:27:53.136 A:middle
And this happens
between devices as well.

00:27:53.866 --> 00:27:57.026 A:middle
For example, if you perform
that same popover presentation

00:27:57.066 --> 00:27:59.256 A:middle
on an iPhone, it will
automatically show it

00:27:59.256 --> 00:28:01.666 A:middle
as a modal full screen
presentation there as well.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.256 --> 00:28:01.666 A:middle
as a modal full screen
presentation there as well.

00:28:03.276 --> 00:28:05.826 A:middle
On an iPhone 6+ in
landscape, we'll also make

00:28:05.826 --> 00:28:08.396 A:middle
that presentation a form
sheet presentation for you.

00:28:09.546 --> 00:28:12.396 A:middle
And all of these changes happen
automatically in your app just

00:28:12.396 --> 00:28:14.046 A:middle
by using 'view controller
presentations.'

00:28:14.486 --> 00:28:23.006 A:middle
However, you may
want to interact

00:28:23.006 --> 00:28:25.336 A:middle
with how these changes
occur as well.

00:28:26.836 --> 00:28:28.076 A:middle
For example, in this app,

00:28:28.786 --> 00:28:31.356 A:middle
as we're showing a popover
presentation when we're

00:28:31.356 --> 00:28:33.906 A:middle
in the modal full screen
style, we'll want to show a

00:28:33.906 --> 00:28:35.896 A:middle
"Done" button inside
of a navigation bar

00:28:35.896 --> 00:28:38.186 A:middle
so that the user can
dismiss this presentation.

00:28:39.056 --> 00:28:42.006 A:middle
But when we're using the native
popover presentation style,

00:28:42.006 --> 00:28:43.726 A:middle
we don't need to show
that "Done" button,

00:28:44.086 --> 00:28:45.966 A:middle
since the user can just
tap anywhere outside

00:28:45.966 --> 00:28:47.086 A:middle
of the popover to dismiss it.

00:28:47.086 --> 00:28:50.016 A:middle
And we can make these
kinds of changes

00:28:50.016 --> 00:28:52.976 A:middle
with the 'adaptive presentation
controller delegate' API.

00:28:54.446 --> 00:28:56.156 A:middle
In fact, we introduced
some new methods

00:28:56.156 --> 00:28:58.766 A:middle
to this protocol in iOS 8.3.

00:28:59.566 --> 00:29:02.246 A:middle
These methods allow you a lot
of control over the changes


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.566 --> 00:29:02.246 A:middle
These methods allow you a lot
of control over the changes

00:29:02.246 --> 00:29:04.806 A:middle
that happen as your view
controller presentation

00:29:04.916 --> 00:29:05.546 A:middle
is adapted.

00:29:06.616 --> 00:29:09.466 A:middle
So you can do things like
hide and show navigation bars

00:29:09.466 --> 00:29:12.066 A:middle
or whatever other changes
make sense for your app.

00:29:13.236 --> 00:29:15.336 A:middle
Now, one last thing to
keep in mind specifically

00:29:15.336 --> 00:29:18.816 A:middle
about popover presentations,
it is to always make sure

00:29:18.886 --> 00:29:20.496 A:middle
that the arrow from
the popover points

00:29:20.496 --> 00:29:22.266 A:middle
to the right source
for that popover.

00:29:23.496 --> 00:29:27.476 A:middle
This is particularly important
as your app is adapting

00:29:27.476 --> 00:29:31.526 A:middle
between the horizontally compact
and regular size classes.

00:29:32.446 --> 00:29:33.626 A:middle
You can easily do this

00:29:33.626 --> 00:29:35.556 A:middle
with a popover presentation
controller API.

00:29:36.466 --> 00:29:37.916 A:middle
Either set the barButtonItem

00:29:38.306 --> 00:29:40.406 A:middle
or set the sourceView
in sourceRect.

00:29:41.936 --> 00:29:42.826 A:middle
So that's presentations.

00:29:43.796 --> 00:29:45.906 A:middle
The last thing I'd like to
tell you about is some changes

00:29:45.906 --> 00:29:47.836 A:middle
to the keyboard with
multitasking.

00:29:48.446 --> 00:29:51.876 A:middle
Now, when the user is
multitasking with your app,

00:29:52.936 --> 00:29:55.626 A:middle
if they tap on a text field,
like the search bar in Maps,

00:29:56.506 --> 00:29:59.176 A:middle
then the keyboard will actually
be shown over top both apps

00:29:59.356 --> 00:30:00.466 A:middle
that the user is
interacting with.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.356 --> 00:30:00.466 A:middle
that the user is
interacting with.

00:30:00.466 --> 00:30:02.786 A:middle
And this means it is
really important for you

00:30:02.786 --> 00:30:04.956 A:middle
to consider whether you want
to move pieces of your app

00:30:04.956 --> 00:30:06.316 A:middle
out of the way of the keyboard

00:30:06.586 --> 00:30:08.186 A:middle
so that the user can
still interact with them.

00:30:09.176 --> 00:30:12.236 A:middle
You can do that by using the
UIKeyboard Notification API,

00:30:12.806 --> 00:30:15.316 A:middle
just as you had in the past.

00:30:15.496 --> 00:30:18.386 A:middle
You can use these notifications
to make changes to your app

00:30:18.836 --> 00:30:21.276 A:middle
like setting scroll
views content insets

00:30:21.446 --> 00:30:24.146 A:middle
or moving important UI
elements to stay visible.

00:30:25.156 --> 00:30:26.326 A:middle
So, for example, in this app,

00:30:26.966 --> 00:30:30.036 A:middle
we may want to move the comment
field and the ratings view

00:30:30.036 --> 00:30:31.856 A:middle
to still be visible by the user.

00:30:33.196 --> 00:30:34.736 A:middle
And this is a really
important change

00:30:34.926 --> 00:30:36.656 A:middle
because in the past
the only time

00:30:36.656 --> 00:30:38.756 A:middle
that your app would
interact with the keyboard is

00:30:38.756 --> 00:30:40.606 A:middle
when it had explicitly
shown it itself.

00:30:41.216 --> 00:30:43.366 A:middle
But now, with multitasking,
the other app

00:30:43.366 --> 00:30:46.266 A:middle
that the user is using can
cause the keyboard to appear.

00:30:46.486 --> 00:30:48.536 A:middle
So you'll want to consider
whether any of the views

00:30:48.536 --> 00:30:51.796 A:middle
in your app need to move pieces
of their UI to stay visible

00:30:51.796 --> 00:30:52.676 A:middle
as the keyboard is shown.

00:30:53.386 --> 00:30:56.516 A:middle
So those are some
changes and best practices

00:30:56.516 --> 00:30:57.626 A:middle
for iPad multitasking.

00:30:58.346 --> 00:31:01.506 A:middle
A few important things to
remember are to consider size


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.346 --> 00:31:01.506 A:middle
A few important things to
remember are to consider size

00:31:01.506 --> 00:31:03.916 A:middle
and size classes
instead of orientation

00:31:04.066 --> 00:31:05.236 A:middle
as your app is rotating.

00:31:05.236 --> 00:31:09.066 A:middle
And to think about how you shall
want to respond to transitions

00:31:09.236 --> 00:31:11.736 A:middle
like rotations and
multitasking resizes.

00:31:12.476 --> 00:31:15.056 A:middle
And finally, to use
adaptive presentations

00:31:15.156 --> 00:31:18.026 A:middle
to make your app work great
on all of our devices and all

00:31:18.026 --> 00:31:20.026 A:middle
of the different
contexts that it is used.

00:31:21.036 --> 00:31:23.126 A:middle
Now I would like to
turn things over to Kurt

00:31:23.126 --> 00:31:25.326 A:middle
to tell you how you can make
the most out of multitasking.

00:31:26.516 --> 00:31:30.666 A:middle
[Applause]

00:31:31.166 --> 00:31:31.456 A:middle
&gt;&gt; Kurt Revis: Thank you.

00:31:32.316 --> 00:31:32.906 A:middle
Thank you, Jacob.

00:31:32.906 --> 00:31:33.476 A:middle
Thank you, Peter.

00:31:34.656 --> 00:31:38.816 A:middle
So now you know how and why
your app can adopt multitasking.

00:31:39.556 --> 00:31:41.216 A:middle
You know what's changed
-- not much.

00:31:41.796 --> 00:31:44.076 A:middle
You know what to
do, what not to do.

00:31:44.266 --> 00:31:46.836 A:middle
So I'm here to tell you how
your app can make the most

00:31:46.836 --> 00:31:49.426 A:middle
out of multitasking and
deliver a great experience

00:31:49.496 --> 00:31:50.336 A:middle
to your users.

00:31:51.816 --> 00:31:55.636 A:middle
So really your app needs to
be designed for adaptivity.

00:31:56.086 --> 00:31:58.206 A:middle
And I'll reiterate three
things we talked about earlier.

00:31:58.886 --> 00:32:01.046 A:middle
First, your app should
be universal;


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.886 --> 00:32:01.046 A:middle
First, your app should
be universal;

00:32:01.276 --> 00:32:03.686 A:middle
your app should run
on iPhone and iPad.

00:32:05.186 --> 00:32:08.586 A:middle
Second, don't think of those
user experiences as being iPhone

00:32:08.586 --> 00:32:11.686 A:middle
and iPad anymore; think of
them as being for compact

00:32:12.196 --> 00:32:14.066 A:middle
and regular widths, because now

00:32:14.066 --> 00:32:16.756 A:middle
that compact width experience
can happen on the iPad.

00:32:18.236 --> 00:32:21.806 A:middle
And then last, use adaptivity
to change between them

00:32:21.916 --> 00:32:23.706 A:middle
when the user changes
the size of your app.

00:32:24.946 --> 00:32:26.416 A:middle
So, the challenge when designing

00:32:26.416 --> 00:32:28.666 A:middle
for adaptivity is
making your app adapt

00:32:29.256 --> 00:32:30.686 A:middle
to these dynamic size changes.

00:32:31.756 --> 00:32:35.616 A:middle
And I'll give you two things,
actually six strategies

00:32:36.666 --> 00:32:40.156 A:middle
that your app can adopt in
order to make it flexible

00:32:40.156 --> 00:32:43.216 A:middle
and make it handle dynamic size
changes, and then I'll talk

00:32:43.216 --> 00:32:44.756 A:middle
about some finer points
that will come up,

00:32:45.306 --> 00:32:47.436 A:middle
some things you will run into
when you adopt multitasking

00:32:47.756 --> 00:32:49.566 A:middle
and some guidelines of how
to handle those things.

00:32:50.396 --> 00:32:51.506 A:middle
So let's get started.

00:32:52.016 --> 00:32:54.786 A:middle
The first strategy: be flexible.

00:32:55.886 --> 00:32:57.226 A:middle
Don't hard code sizes.

00:32:57.266 --> 00:32:58.246 A:middle
Don't make assumptions.

00:32:58.546 --> 00:33:00.856 A:middle
Your app should look
at what size it is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:58.546 --> 00:33:00.856 A:middle
Your app should look
at what size it is

00:33:01.726 --> 00:33:02.876 A:middle
and do something based on that.

00:33:03.856 --> 00:33:05.976 A:middle
And it should also react
to changes in its size.

00:33:07.076 --> 00:33:09.826 A:middle
So the only way to find out
if your app is really flexible

00:33:09.826 --> 00:33:11.896 A:middle
or not is really to try
it out, try stretching.

00:33:12.366 --> 00:33:14.396 A:middle
So let's do a little exercise
here, a little warm-up.

00:33:14.396 --> 00:33:16.636 A:middle
You will find there's a yoga
mat under your seats in front

00:33:16.636 --> 00:33:17.896 A:middle
of you, so please get that out!

00:33:18.626 --> 00:33:20.936 A:middle
No. Unfortunately, I'm only
talking about your app.

00:33:21.016 --> 00:33:22.156 A:middle
But we'll do the same thing.

00:33:22.716 --> 00:33:24.626 A:middle
We'll take your app
through a warm-up exercise.

00:33:25.546 --> 00:33:27.646 A:middle
We'll run through all
the multitasking cases

00:33:27.646 --> 00:33:31.476 A:middle
and we'll watch your
app's UI carefully.

00:33:31.636 --> 00:33:32.246 A:middle
Take notes.

00:33:32.366 --> 00:33:34.126 A:middle
What works; what doesn't work?

00:33:34.896 --> 00:33:37.156 A:middle
When you're doing this,
concentrate on the layout

00:33:37.336 --> 00:33:39.186 A:middle
of what your views are,
don't worry so much

00:33:39.186 --> 00:33:40.916 A:middle
about the animations
or anything like that,

00:33:40.916 --> 00:33:42.366 A:middle
especially if you're
doing it in the simulator,

00:33:42.456 --> 00:33:44.856 A:middle
because the experience will
be different on a real device.

00:33:46.106 --> 00:33:46.676 A:middle
So let's start.

00:33:48.196 --> 00:33:49.846 A:middle
Your app has adopted
multitasking

00:33:50.716 --> 00:33:52.366 A:middle
and you can start
it by sliding over.

00:33:53.626 --> 00:33:54.766 A:middle
Then resize your app bigger.

00:33:54.936 --> 00:33:55.856 A:middle
That's a size change.

00:33:56.786 --> 00:33:57.496 A:middle
Make it bigger again.

00:33:57.666 --> 00:33:59.546 A:middle
It will be full screen,
another size change.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:00.476 --> 00:34:01.786 A:middle
Now Slide Over another app

00:34:02.476 --> 00:34:03.956 A:middle
and press the button
to use Split View.

00:34:04.336 --> 00:34:05.296 A:middle
Your app will get smaller.

00:34:06.566 --> 00:34:10.826 A:middle
Finally let's rotate the whole
iPad, so we'll get a size change

00:34:11.456 --> 00:34:13.936 A:middle
and the rotation will happen,
the orientation will change,

00:34:14.216 --> 00:34:15.226 A:middle
and that will be animated.

00:34:16.306 --> 00:34:18.025 A:middle
So these are all things
that can happen to your app

00:34:18.025 --> 00:34:21.146 A:middle
and you should try out every
place everywhere in your app

00:34:21.536 --> 00:34:22.886 A:middle
to make sure that it
can handle these things.

00:34:23.815 --> 00:34:25.626 A:middle
When you try this, probably
you'll find some things work,

00:34:25.626 --> 00:34:26.386 A:middle
some things don't.

00:34:27.235 --> 00:34:31.565 A:middle
So for help on fixing the things
that don't work, keep listening.

00:34:32.116 --> 00:34:35.656 A:middle
The second strategy:
use Auto Layout.

00:34:35.656 --> 00:34:37.716 A:middle
This should be no
surprise; this is the way

00:34:37.835 --> 00:34:39.446 A:middle
to make your app's UI flexible.

00:34:40.606 --> 00:34:43.106 A:middle
All you have to do is
provide views and constraints,

00:34:43.726 --> 00:34:45.496 A:middle
the system will consider
all those constraints

00:34:46.045 --> 00:34:47.795 A:middle
and set your views'
frames based on those.

00:34:47.795 --> 00:34:49.326 A:middle
So you don't have to
hard code anything.

00:34:50.706 --> 00:34:54.315 A:middle
You can also use the margins and
the guides that UIKit gives you

00:34:54.545 --> 00:34:55.826 A:middle
to construct these constraints.

00:34:56.856 --> 00:34:59.226 A:middle
And also in iOS 9,
there's new APIs

00:34:59.226 --> 00:35:01.046 A:middle
to make this whole process
much more convenient.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.226 --> 00:35:01.046 A:middle
to make this whole process
much more convenient.

00:35:02.536 --> 00:35:05.916 A:middle
So, to find out more about that,
see the two Auto Layout talks

00:35:05.916 --> 00:35:09.006 A:middle
on Thursday; I guarantee
you'll learn a lot.

00:35:10.256 --> 00:35:12.946 A:middle
So let's run through this
example that we saw earlier.

00:35:16.736 --> 00:35:18.406 A:middle
We have -- excuse me.

00:35:20.456 --> 00:35:23.326 A:middle
We have this app
showing some text,

00:35:23.326 --> 00:35:24.806 A:middle
and it is using those
readable margins.

00:35:25.566 --> 00:35:30.516 A:middle
Now, how this works is
your view size is large,

00:35:30.596 --> 00:35:32.376 A:middle
but the readable
content guide is smaller.

00:35:33.326 --> 00:35:34.566 A:middle
We don't want your
app to have to worry

00:35:34.566 --> 00:35:36.656 A:middle
about thinking, 'This
is an iPad.

00:35:36.656 --> 00:35:38.056 A:middle
It is big; it is wide.

00:35:38.056 --> 00:35:39.916 A:middle
I need to handle these
margins differently.'

00:35:40.046 --> 00:35:42.106 A:middle
You just use the guide and
it will work automatically.

00:35:42.896 --> 00:35:44.146 A:middle
So here is how to
do this in code.

00:35:45.696 --> 00:35:48.126 A:middle
First, make a label; we'll
put our text inside of that.

00:35:49.416 --> 00:35:51.506 A:middle
Second, the label goes
in some super view

00:35:52.126 --> 00:35:53.836 A:middle
and we'll get the
readable content guide

00:35:54.046 --> 00:35:54.826 A:middle
from that super view.

00:35:56.146 --> 00:35:57.666 A:middle
Now we'll set up some
constraints to make

00:35:57.666 --> 00:35:59.836 A:middle
that label match that
readable content guide.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:00.736 --> 00:36:03.266 A:middle
So the constraints is an
array, and the first one

00:36:03.266 --> 00:36:05.626 A:middle
that we do is make the
label's leading anchor,

00:36:05.626 --> 00:36:06.676 A:middle
that's the leading side,

00:36:07.296 --> 00:36:10.306 A:middle
equal to the readable content
guide's leading anchor,

00:36:10.306 --> 00:36:11.046 A:middle
the leading side.

00:36:12.306 --> 00:36:15.016 A:middle
This is, note -- note that
this is using the new iOS 9

00:36:15.066 --> 00:36:15.826 A:middle
convenience API.

00:36:17.086 --> 00:36:19.726 A:middle
We do the same thing for the
trailing anchor on both sides.

00:36:19.966 --> 00:36:22.536 A:middle
So now, that label's width
will match the readable content

00:36:22.536 --> 00:36:23.086 A:middle
guide's width.

00:36:24.316 --> 00:36:27.136 A:middle
Then all we have to do is
activate those two constraints

00:36:27.486 --> 00:36:28.586 A:middle
and Auto Layout does the rest.

00:36:28.926 --> 00:36:31.786 A:middle
We didn't have to do anything.

00:36:31.786 --> 00:36:33.456 A:middle
So I could have also
done this in Xcode.

00:36:33.456 --> 00:36:35.816 A:middle
I could have set this up in
my storyboard, which leads me

00:36:35.816 --> 00:36:38.226 A:middle
to the next strategy:
take advantage

00:36:38.356 --> 00:36:40.176 A:middle
of the size class
support in Xcode.

00:36:40.976 --> 00:36:42.866 A:middle
You can set up your UI
to do different things

00:36:43.006 --> 00:36:44.056 A:middle
in different size classes.

00:36:44.996 --> 00:36:46.746 A:middle
For instance, using
interface builder

00:36:47.036 --> 00:36:50.386 A:middle
when you're editing a storyboard
or a XIB file, you can add

00:36:50.386 --> 00:36:53.336 A:middle
or remove user constraints
from different size classes,

00:36:54.416 --> 00:36:56.146 A:middle
and you can also
change the attributes

00:36:56.146 --> 00:36:57.616 A:middle
of views like the font size.

00:36:58.086 --> 00:37:00.886 A:middle
You can also take
advantage of asset catalogs


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:58.086 --> 00:37:00.886 A:middle
You can also take
advantage of asset catalogs

00:37:00.966 --> 00:37:04.056 A:middle
to make different versions
of images that are used

00:37:04.056 --> 00:37:05.136 A:middle
in different size classes.

00:37:06.256 --> 00:37:07.646 A:middle
And note that this
applies not only

00:37:07.646 --> 00:37:10.316 A:middle
when you're initially loading
your UI the first time,

00:37:10.776 --> 00:37:12.726 A:middle
but also when dynamic
size changes happen.

00:37:13.156 --> 00:37:14.856 A:middle
We remember all of this
stuff behind the scenes

00:37:14.856 --> 00:37:17.906 A:middle
and we'll apply these things
when a size change happens.

00:37:18.576 --> 00:37:19.736 A:middle
So I'll give an example.

00:37:20.556 --> 00:37:22.156 A:middle
Here I've made this
storyboard and I've set

00:37:22.156 --> 00:37:24.116 A:middle
up a UI with two views.

00:37:24.366 --> 00:37:25.526 A:middle
There is an image and some text.

00:37:25.526 --> 00:37:28.226 A:middle
I put them side by side; I made
the constraints to do this.

00:37:29.666 --> 00:37:31.846 A:middle
I'm working on the
default UI for my app;

00:37:32.266 --> 00:37:33.866 A:middle
that's using the
'any width' class.

00:37:33.866 --> 00:37:36.996 A:middle
I would like to make a version
that's a little bit different

00:37:37.046 --> 00:37:38.196 A:middle
for compact width class.

00:37:38.196 --> 00:37:40.266 A:middle
So what I do is I
click that control,

00:37:40.266 --> 00:37:41.476 A:middle
I change it to compact width.

00:37:42.606 --> 00:37:45.416 A:middle
I have got the same two views,
but I changed my constraints

00:37:45.416 --> 00:37:46.776 A:middle
around to make the
layout different.

00:37:47.036 --> 00:37:49.146 A:middle
Now the image is on top,
the text is on the bottom.

00:37:50.616 --> 00:37:52.706 A:middle
I did that by clicking
that control at the bottom,

00:37:52.706 --> 00:37:55.896 A:middle
changing it to compact, and you
see there's blue telling me I'm

00:37:56.046 --> 00:37:58.456 A:middle
in a different, more
specialized mode.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:00.336 --> 00:38:02.216 A:middle
Now I could at this
point run my app

00:38:02.606 --> 00:38:04.146 A:middle
and try resizing it
and see what happens.

00:38:04.976 --> 00:38:06.956 A:middle
But the nice thing is I don't
actually have to do that.

00:38:07.066 --> 00:38:09.866 A:middle
I can see a live
preview inside of Xcode.

00:38:10.946 --> 00:38:15.126 A:middle
Just use the assistant pane in
Xcode and you can bring up more

00:38:15.126 --> 00:38:18.346 A:middle
than one preview at a
time of your storyboard

00:38:18.536 --> 00:38:19.676 A:middle
in different configurations.

00:38:20.516 --> 00:38:22.226 A:middle
So here I have got
iPad one-third width,

00:38:22.496 --> 00:38:24.016 A:middle
that's what happens when
you Slide Over your app,

00:38:24.776 --> 00:38:26.066 A:middle
that's using the compact layout.

00:38:27.186 --> 00:38:28.396 A:middle
At the same time I'm looking

00:38:28.606 --> 00:38:30.666 A:middle
at iPad full screen,
the other layout.

00:38:31.686 --> 00:38:33.696 A:middle
So you can make as many of
these previews as you want,

00:38:33.996 --> 00:38:37.316 A:middle
just press the "+" button in
the corner, and choose any size

00:38:37.316 --> 00:38:40.316 A:middle
of iPhone, any size of iPad
multitasking configuration.

00:38:40.316 --> 00:38:49.066 A:middle
You can see them all at
once and they're all live.

00:38:49.356 --> 00:38:50.816 A:middle
We can also use asset catalogs.

00:38:51.666 --> 00:38:52.556 A:middle
I'll show how that works.

00:38:53.206 --> 00:38:54.396 A:middle
Here I've got an asset catalog;

00:38:54.396 --> 00:38:55.856 A:middle
I'm looking at one
particular asset.

00:38:56.846 --> 00:38:59.536 A:middle
I'll set this thing
up to be universal;

00:38:59.786 --> 00:39:00.886 A:middle
it'll work on all devices.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:59.786 --> 00:39:00.886 A:middle
it'll work on all devices.

00:39:01.796 --> 00:39:04.026 A:middle
And then I'll do much the
same process as before,

00:39:04.026 --> 00:39:05.586 A:middle
I'll set up two different
versions of it.

00:39:06.186 --> 00:39:07.946 A:middle
One for any width, the default.

00:39:08.426 --> 00:39:09.486 A:middle
And one for compact width.

00:39:10.876 --> 00:39:12.466 A:middle
Now you see I have got
those two images there,

00:39:12.606 --> 00:39:13.606 A:middle
that's the two different
versions.

00:39:14.446 --> 00:39:16.746 A:middle
I can drag in a large
star to work

00:39:16.746 --> 00:39:19.716 A:middle
for the any regular
width configuration.

00:39:20.586 --> 00:39:24.406 A:middle
I drag in a smaller image
to be the compact width.

00:39:25.436 --> 00:39:26.516 A:middle
So that's Xcode.

00:39:27.396 --> 00:39:29.996 A:middle
Now, you can also drop down
and do this in texture,

00:39:30.306 --> 00:39:32.846 A:middle
in code yourself, if
you would like to.

00:39:33.346 --> 00:39:35.456 A:middle
Just take advantage of
the adaptivity callbacks.

00:39:35.456 --> 00:39:37.406 A:middle
So here is how to do this.

00:39:37.956 --> 00:39:39.026 A:middle
If you are in a view controller,

00:39:39.716 --> 00:39:42.576 A:middle
you would override 'will
transition to trait collection.'

00:39:43.346 --> 00:39:44.986 A:middle
We'll give you the
new collection

00:39:44.986 --> 00:39:46.266 A:middle
that we're going to change to.

00:39:47.806 --> 00:39:50.436 A:middle
Or you can override 'view
will transition to size,

00:39:50.436 --> 00:39:51.416 A:middle
and we'll give you the new size

00:39:51.416 --> 00:39:52.556 A:middle
that we're going
to transition to.

00:39:53.926 --> 00:39:57.036 A:middle
Now let's say I want my app
to have different UI depending

00:39:57.036 --> 00:39:58.526 A:middle
on the horizontal size class.

00:39:58.526 --> 00:39:59.186 A:middle
That's pretty normal.

00:39:59.876 --> 00:40:02.776 A:middle
How we'll do that is
override 'will transition


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:59.876 --> 00:40:02.776 A:middle
How we'll do that is
override 'will transition

00:40:02.776 --> 00:40:03.516 A:middle
to trait collection.'

00:40:04.996 --> 00:40:07.676 A:middle
And the first thing we
should do is call 'super,

00:40:07.996 --> 00:40:09.756 A:middle
let the system do what it
would normally would do.

00:40:10.996 --> 00:40:11.816 A:middle
Then we'll add our code.

00:40:12.576 --> 00:40:14.966 A:middle
We'll look at the new
collection's horizontal size

00:40:15.066 --> 00:40:17.876 A:middle
class, and depending
on what that is,

00:40:18.266 --> 00:40:19.076 A:middle
we'll do something different.

00:40:20.106 --> 00:40:21.316 A:middle
So here is where you
put your code in.

00:40:22.616 --> 00:40:26.356 A:middle
If it is compact, change
your UI for a compact width.

00:40:26.356 --> 00:40:29.546 A:middle
If it's regular, change
your UI for a regular width.

00:40:30.226 --> 00:40:32.066 A:middle
If it's unspecified, that
means we're in the middle

00:40:32.066 --> 00:40:33.846 A:middle
of setting things up
or tearing them down,

00:40:34.076 --> 00:40:34.896 A:middle
and just don't do anything.

00:40:36.856 --> 00:40:39.486 A:middle
Now let's say I have that
similar change, but I want it

00:40:39.486 --> 00:40:42.346 A:middle
to animate alongside other
things, like the case

00:40:42.346 --> 00:40:45.296 A:middle
when I rotated the iPad,
I would like my change

00:40:45.326 --> 00:40:47.606 A:middle
to animate alongside that
rotation, at the same time.

00:40:48.576 --> 00:40:48.976 A:middle
Here is how.

00:40:50.136 --> 00:40:51.786 A:middle
We start out exactly
the same way.

00:40:52.626 --> 00:40:54.136 A:middle
Override the same
method; call super.

00:40:54.946 --> 00:40:57.146 A:middle
Then, instead of making
the change directly,

00:40:57.536 --> 00:41:01.026 A:middle
we'll provide a block and
we'll put our changes inside


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:57.536 --> 00:41:01.026 A:middle
we'll provide a block and
we'll put our changes inside

00:41:01.026 --> 00:41:01.606 A:middle
of that block.

00:41:02.366 --> 00:41:03.886 A:middle
So, here we've got a
block, called 'animation,

00:41:03.886 --> 00:41:08.016 A:middle
and we'll put our code to
change the UI inside of there.

00:41:08.216 --> 00:41:09.396 A:middle
Then pass that block

00:41:09.796 --> 00:41:12.356 A:middle
to the coordinator's 'animate
alongside transition' method.

00:41:13.316 --> 00:41:15.806 A:middle
It will take care of remembering
that block and calling it

00:41:15.806 --> 00:41:18.546 A:middle
at the right time, once
the animation is set up.

00:41:19.126 --> 00:41:20.316 A:middle
And any changes you make inside

00:41:20.316 --> 00:41:22.026 A:middle
that block will automatically
get animated.

00:41:22.506 --> 00:41:26.056 A:middle
So that's how to do it at
the low level, in code.

00:41:27.146 --> 00:41:28.776 A:middle
I'll talk about some
of the high-level API

00:41:28.776 --> 00:41:34.756 A:middle
that UIKit provides to you.

00:41:35.586 --> 00:41:36.966 A:middle
First, as Jacob mentioned
earlier,

00:41:36.966 --> 00:41:38.686 A:middle
there is adaptive
presentation controllers.

00:41:39.976 --> 00:41:41.166 A:middle
Second, there is the classics --

00:41:41.856 --> 00:41:43.696 A:middle
UI Table View, UI
Collection View.

00:41:43.746 --> 00:41:46.546 A:middle
These let you build up a
larger UI out of small things

00:41:46.546 --> 00:41:49.376 A:middle
like a single row or a
single item in a collection.

00:41:50.946 --> 00:41:53.666 A:middle
Also new in iOS 9,
there is UI Stack View.

00:41:54.476 --> 00:41:56.426 A:middle
This lets you take a list
of views and put them

00:41:56.426 --> 00:41:58.656 A:middle
in a vertical stack
or a horizontal row,

00:41:58.656 --> 00:42:01.146 A:middle
and set up some parameters
on how they get laid out.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:58.656 --> 00:42:01.146 A:middle
and set up some parameters
on how they get laid out.

00:42:01.906 --> 00:42:03.436 A:middle
Again, to find out
more about that,

00:42:03.546 --> 00:42:05.626 A:middle
check out the first
Auto Layout talk.

00:42:06.636 --> 00:42:09.976 A:middle
The last bit of high-level API
is big enough it deserves its

00:42:09.976 --> 00:42:10.386 A:middle
own number.

00:42:11.006 --> 00:42:12.716 A:middle
And that's UI Split
View Controller.

00:42:13.856 --> 00:42:16.176 A:middle
We use this in a lot
of our apps like Mail

00:42:16.266 --> 00:42:17.356 A:middle
and Messages and Notes.

00:42:18.296 --> 00:42:21.986 A:middle
And if it makes sense
for your app too, use it.

00:42:22.536 --> 00:42:24.276 A:middle
I'll give you Mail
as an example.

00:42:24.486 --> 00:42:27.286 A:middle
Here we're looking at full
screen iPad and you see

00:42:27.286 --> 00:42:29.426 A:middle
that the app is divided
into two parts.

00:42:29.976 --> 00:42:31.346 A:middle
And note that this
isn't the same thing

00:42:31.346 --> 00:42:33.986 A:middle
as split view multitasking where
you're looking at two apps.

00:42:34.056 --> 00:42:35.526 A:middle
This is one app.

00:42:36.556 --> 00:42:40.176 A:middle
So, we have on one side a
list of messages to look at.

00:42:40.486 --> 00:42:41.126 A:middle
You can pick one.

00:42:42.216 --> 00:42:45.786 A:middle
On the other side, we have a
view that shows the details.

00:42:46.276 --> 00:42:47.856 A:middle
In this case it is a
particular message.

00:42:48.426 --> 00:42:53.346 A:middle
So if your app can handle a
configuration like that or works

00:42:53.396 --> 00:42:55.356 A:middle
that way, we really
highly recommend

00:42:55.356 --> 00:42:57.126 A:middle
that you adopt Split
View Controller,

00:42:57.126 --> 00:42:59.996 A:middle
because it will do a lot of work
for you in multitasking cases.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:00.066 --> 00:43:01.586 A:middle
I'll show you that
a little bit later.

00:43:02.586 --> 00:43:03.776 A:middle
But first, here is
how you adopt it.

00:43:04.946 --> 00:43:07.256 A:middle
You make a UI Split View
Controller in your app.

00:43:07.666 --> 00:43:09.406 A:middle
That's typically the
root view controller,

00:43:09.476 --> 00:43:11.126 A:middle
so the top level of your UI.

00:43:11.666 --> 00:43:15.116 A:middle
And it is a container view
controller, so it has children.

00:43:15.466 --> 00:43:18.566 A:middle
We call these the primary and
the secondary view controllers.

00:43:19.926 --> 00:43:24.366 A:middle
In Mail, these are a table
view that contains that list

00:43:24.366 --> 00:43:27.606 A:middle
of messages, and on
the secondary side,

00:43:27.766 --> 00:43:29.706 A:middle
a custom view showing a message.

00:43:30.236 --> 00:43:31.586 A:middle
In your app you fill these in.

00:43:31.836 --> 00:43:33.096 A:middle
You provide the view
controllers.

00:43:33.996 --> 00:43:37.486 A:middle
UI Split View Controller is
responsible for deciding where

00:43:37.686 --> 00:43:40.546 A:middle
and when to show these
two view controllers.

00:43:42.146 --> 00:43:45.256 A:middle
Going back to Mail, in full
screen we have got lots of room;

00:43:45.256 --> 00:43:47.076 A:middle
we can show both of
these side by side.

00:43:48.076 --> 00:43:51.656 A:middle
What happens if the user
switches to a different app

00:43:51.656 --> 00:43:53.846 A:middle
and then slides Mail
over in from the side?

00:43:54.986 --> 00:43:57.956 A:middle
In that case it is a compact
width, there is less room,

00:43:58.576 --> 00:44:00.666 A:middle
so the Split View
Controller adapts to this.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:58.576 --> 00:44:00.666 A:middle
so the Split View
Controller adapts to this.

00:44:01.046 --> 00:44:03.886 A:middle
It decides it will show the
secondary view controller

00:44:03.886 --> 00:44:05.296 A:middle
to start that mail message,

00:44:06.226 --> 00:44:09.096 A:middle
and it also provides
navigation controls to go back

00:44:09.886 --> 00:44:11.326 A:middle
to the other list,
the primary list.

00:44:12.336 --> 00:44:14.866 A:middle
Once the user picks one of
those, they can go forward again

00:44:14.866 --> 00:44:15.736 A:middle
to the secondary list.

00:44:17.176 --> 00:44:19.126 A:middle
So those view controllers
are still independent;

00:44:19.226 --> 00:44:20.666 A:middle
they didn't have to make
any of these choices.

00:44:22.426 --> 00:44:25.546 A:middle
So the thing to note here is

00:44:25.546 --> 00:44:27.986 A:middle
that these are the same
exact two view controllers

00:44:28.016 --> 00:44:29.186 A:middle
that we were looking at earlier.

00:44:29.576 --> 00:44:33.966 A:middle
The differences are, they're
smaller, and we're navigating

00:44:33.966 --> 00:44:35.236 A:middle
between them in a different way.

00:44:37.166 --> 00:44:39.716 A:middle
So if you want to try this out,
you have already got the code

00:44:39.716 --> 00:44:40.606 A:middle
on your computer, in fact.

00:44:40.956 --> 00:44:44.756 A:middle
Just make a new Xcode, in Xcode
make a new iOS application,

00:44:45.316 --> 00:44:47.506 A:middle
and use the 'master-detail
application' template.

00:44:48.006 --> 00:44:49.816 A:middle
It is automatically set
up with a storyboard

00:44:49.906 --> 00:44:51.616 A:middle
that contains a Split
View Controller

00:44:52.166 --> 00:44:53.526 A:middle
and view controllers
for each side.

00:44:54.406 --> 00:44:56.286 A:middle
You can build on this
to make your own app

00:44:56.656 --> 00:44:58.346 A:middle
or you can just use it
as a test bed to play

00:44:58.346 --> 00:45:02.306 A:middle
with Split View Controller
and see what it can do.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:58.346 --> 00:45:02.306 A:middle
with Split View Controller
and see what it can do.

00:45:02.306 --> 00:45:03.816 A:middle
So those are the 6
strategies I'll give you.

00:45:04.766 --> 00:45:12.046 A:middle
And please mix and match these
however makes sense in your app.

00:45:12.046 --> 00:45:13.366 A:middle
You can take a look
at our sample code

00:45:13.366 --> 00:45:14.596 A:middle
to see all of them in action.

00:45:15.006 --> 00:45:16.776 A:middle
This is an app called
'Adaptive Photos.'

00:45:16.776 --> 00:45:18.276 A:middle
You can search for it
on the developer site.

00:45:19.716 --> 00:45:22.856 A:middle
Try it out in all sizes
of iPhone and iPad

00:45:22.856 --> 00:45:25.116 A:middle
and iPad multitasking
and see what it can do.

00:45:25.726 --> 00:45:28.326 A:middle
So that's the strategies.

00:45:28.326 --> 00:45:31.046 A:middle
If you use these, your app
will start resizing nicely;

00:45:31.146 --> 00:45:32.666 A:middle
it will probably
work pretty well.

00:45:33.206 --> 00:45:35.056 A:middle
But you will run into some
new things that happen.

00:45:36.316 --> 00:45:38.026 A:middle
So once you adopt multitasking,

00:45:38.026 --> 00:45:39.586 A:middle
these new things may
be a little tricky.

00:45:40.126 --> 00:45:42.056 A:middle
I'll give you some guidelines
on how to handle them.

00:45:43.256 --> 00:45:45.026 A:middle
The first guideline,
most important,

00:45:45.956 --> 00:45:47.866 A:middle
the user controls
your app's size.

00:45:48.856 --> 00:45:51.266 A:middle
The user is always in
control of how big things are.

00:45:52.266 --> 00:45:54.926 A:middle
So your app cannot prevent
size changes from happening.

00:45:55.166 --> 00:45:56.576 A:middle
I know sometimes
it is inconvenient

00:45:56.636 --> 00:45:57.856 A:middle
but your app can't prevent it.

00:45:58.896 --> 00:46:01.716 A:middle
Also your app can't
cause a size change.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:58.896 --> 00:46:01.716 A:middle
Also your app can't
cause a size change.

00:46:02.256 --> 00:46:04.666 A:middle
You can't say, 'My app wants
to be full screen now.'

00:46:04.666 --> 00:46:05.436 A:middle
It doesn't work that way.

00:46:06.946 --> 00:46:10.346 A:middle
And we really do mean that size
changes can happen at any time.

00:46:10.516 --> 00:46:13.646 A:middle
The user might choose to
resize the apps any time.

00:46:13.886 --> 00:46:15.046 A:middle
It's just like pressing
the Home button.

00:46:15.266 --> 00:46:17.656 A:middle
They can do that any time.

00:46:17.656 --> 00:46:19.256 A:middle
So how do we react
to size changes?

00:46:19.396 --> 00:46:22.456 A:middle
Well, our guideline is
keep the user oriented.

00:46:23.036 --> 00:46:24.206 A:middle
Don't let the user get lost.

00:46:25.416 --> 00:46:27.796 A:middle
I'll illustrate that with a
concrete example of a real app.

00:46:27.796 --> 00:46:29.936 A:middle
I have got a To-Do List app.

00:46:30.816 --> 00:46:32.736 A:middle
It has got a bunch of
items I need to check off.

00:46:32.736 --> 00:46:34.776 A:middle
And I have got them
in three categories:

00:46:35.006 --> 00:46:36.686 A:middle
home, work, and school.

00:46:36.686 --> 00:46:41.326 A:middle
Now I'll put on my designer hat
and I'll choose to make some UIs

00:46:41.326 --> 00:46:43.536 A:middle
for regular width
and compact width.

00:46:44.926 --> 00:46:46.776 A:middle
In regular width, I think,
'Well, it makes sense

00:46:46.806 --> 00:46:47.996 A:middle
to put these all
in a scroll view.

00:46:47.996 --> 00:46:49.196 A:middle
We'll put them on
top of each other.

00:46:49.786 --> 00:46:52.006 A:middle
We'll let the user
scroll through them.'

00:46:54.356 --> 00:46:57.826 A:middle
In compact width, I think,
'Well, let's just show one

00:46:58.326 --> 00:47:02.906 A:middle
of these categories at a
time, each on a separate page,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:58.326 --> 00:47:02.906 A:middle
of these categories at a
time, each on a separate page,

00:47:03.086 --> 00:47:05.046 A:middle
and let the user scroll
from page to page.

00:47:05.486 --> 00:47:08.696 A:middle
But only one is visible
at a time.'

00:47:08.926 --> 00:47:09.546 A:middle
So that's great.

00:47:09.756 --> 00:47:10.786 A:middle
I have got two UIs.

00:47:10.786 --> 00:47:13.056 A:middle
But now I need to think
about how to change

00:47:13.176 --> 00:47:14.006 A:middle
from one to the other.

00:47:15.226 --> 00:47:17.246 A:middle
Let's say I'm looking
at School right now.

00:47:18.486 --> 00:47:21.166 A:middle
And the user resizes the
app to be regular width.

00:47:21.466 --> 00:47:21.896 A:middle
What do I do?

00:47:23.116 --> 00:47:26.366 A:middle
Well, by default, if I just
go and make a new scroll view,

00:47:26.366 --> 00:47:28.886 A:middle
and put my stuff into it, it's
probably going to be scrolled

00:47:28.886 --> 00:47:30.426 A:middle
to the very top, at (0,0),

00:47:31.046 --> 00:47:32.856 A:middle
and now School isn't
visible anymore.

00:47:33.566 --> 00:47:34.586 A:middle
So the user might get lost.

00:47:34.796 --> 00:47:35.556 A:middle
We don't want to do that.

00:47:36.426 --> 00:47:39.336 A:middle
The app should choose and make
a good decision and scroll

00:47:39.336 --> 00:47:40.846 A:middle
so that the same thing
is visible again.

00:47:41.006 --> 00:47:41.936 A:middle
So School is visible.

00:47:43.016 --> 00:47:44.916 A:middle
This doesn't happen
automatically; your app needs

00:47:44.916 --> 00:47:46.116 A:middle
to make this kind of decision.

00:47:46.806 --> 00:47:49.936 A:middle
Let's say the user keeps
working with the app,

00:47:50.006 --> 00:47:51.076 A:middle
they scroll down a little bit.

00:47:51.746 --> 00:47:53.346 A:middle
They write some code;
they check that off.

00:47:53.376 --> 00:47:54.496 A:middle
Great. Wrote some code today.

00:47:55.236 --> 00:47:59.256 A:middle
And then they decide to
resize the app to be compact.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:00.416 --> 00:48:00.846 A:middle
What do we do?

00:48:00.846 --> 00:48:04.586 A:middle
You will see that all three
categories are visible

00:48:04.586 --> 00:48:06.106 A:middle
on the screen at the same time.

00:48:06.106 --> 00:48:08.416 A:middle
So we could make a case for
any one of them to be visible.

00:48:09.316 --> 00:48:10.826 A:middle
But in this case it
probably makes sense,

00:48:11.056 --> 00:48:12.756 A:middle
since they last checked
something off in Work,

00:48:13.916 --> 00:48:14.966 A:middle
and they're still looking at it

00:48:14.966 --> 00:48:16.076 A:middle
and they haven't
controlled away,

00:48:16.426 --> 00:48:18.076 A:middle
that we should choose
to go to that page.

00:48:18.846 --> 00:48:20.856 A:middle
But again, that's a
decision the app had to make.

00:48:21.016 --> 00:48:24.946 A:middle
And your app will have to
make decisions just like this.

00:48:25.426 --> 00:48:32.886 A:middle
So to keep the user oriented,
don't make abrupt changes

00:48:33.286 --> 00:48:35.026 A:middle
when the size changes
from one thing to another.

00:48:35.226 --> 00:48:36.566 A:middle
Try to keep the same
things visible.

00:48:37.916 --> 00:48:39.546 A:middle
You might have to be
smart in new ways.

00:48:40.146 --> 00:48:41.796 A:middle
You might have to do
something like keep track

00:48:41.796 --> 00:48:44.226 A:middle
of what the user most
recently looked at or touched

00:48:44.676 --> 00:48:47.316 A:middle
that you didn't have
to do before.

00:48:47.486 --> 00:48:49.586 A:middle
And also it is especially
important when you're going

00:48:49.586 --> 00:48:52.476 A:middle
from large sizes to small sizes,
because you can't show all

00:48:52.476 --> 00:48:53.856 A:middle
of the stuff that you
were showing before.

00:48:55.726 --> 00:48:58.446 A:middle
So speaking of resizing,
here is another new thing

00:48:58.446 --> 00:48:59.926 A:middle
that can happen with --


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:00.166 --> 00:49:02.056 A:middle
once your app has
adopted multitasking.

00:49:03.066 --> 00:49:04.186 A:middle
Let's say your app
becomes inactive;

00:49:04.226 --> 00:49:05.496 A:middle
the user presses
the Home button.

00:49:06.616 --> 00:49:09.406 A:middle
After that happens, your
app's size may change.

00:49:09.716 --> 00:49:11.466 A:middle
The system might want
to take a snapshot

00:49:11.466 --> 00:49:12.926 A:middle
of your app in a different size.

00:49:14.486 --> 00:49:16.886 A:middle
When that happens, the
same adaptivity methods

00:49:16.886 --> 00:49:20.266 A:middle
as before will get called,
but nothing will be visible,

00:49:20.416 --> 00:49:21.556 A:middle
the user won't see any of this.

00:49:22.596 --> 00:49:25.246 A:middle
When it is done, the
system will restore you back

00:49:25.286 --> 00:49:26.166 A:middle
to the original size.

00:49:27.226 --> 00:49:28.686 A:middle
Now this can be a little
tricky to deal with,

00:49:28.756 --> 00:49:30.496 A:middle
but I'll give you some
guidelines on how to handle it.

00:49:30.626 --> 00:49:31.896 A:middle
And I'll show you
a concrete example.

00:49:32.646 --> 00:49:33.536 A:middle
I have got my app again.

00:49:34.606 --> 00:49:36.896 A:middle
I'm active; it is
in compact width

00:49:36.896 --> 00:49:38.196 A:middle
and I'm looking at
that Work page.

00:49:38.986 --> 00:49:40.426 A:middle
Now the user presses
the Home button.

00:49:41.836 --> 00:49:44.326 A:middle
And the system will take
a snapshot right now.

00:49:44.976 --> 00:49:48.206 A:middle
Now, this is not a new thing; we
have done this for a long time.

00:49:48.886 --> 00:49:50.916 A:middle
What's going to happen is
the user takes that snapshot

00:49:51.026 --> 00:49:54.336 A:middle
and then when the app comes
back active, we'll first show

00:49:54.336 --> 00:49:57.526 A:middle
that snapshot and then we'll
fade into the live app as it is.

00:49:58.096 --> 00:49:59.496 A:middle
So remember this
snapshot right here,

00:49:59.496 --> 00:50:00.616 A:middle
we're purple, we're at Work.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:59.496 --> 00:50:00.616 A:middle
we're purple, we're at Work.

00:50:02.176 --> 00:50:06.316 A:middle
Now, with multitasking, the
system will resize us to regular

00:50:06.586 --> 00:50:08.476 A:middle
and take a snapshot
for its own purposes.

00:50:10.056 --> 00:50:12.556 A:middle
And now the system is going
to resize us back to compact.

00:50:13.546 --> 00:50:15.436 A:middle
Now here is the point where
the app has to make a decision.

00:50:15.616 --> 00:50:17.866 A:middle
And I'll show you what happens
when we make a bad decision

00:50:18.086 --> 00:50:20.896 A:middle
and then a good decision, and
the ramifications of both.

00:50:21.416 --> 00:50:22.856 A:middle
Let's make the bad
decision first.

00:50:24.326 --> 00:50:26.386 A:middle
We go back to compact,
and my app decides, 'well,

00:50:26.386 --> 00:50:28.366 A:middle
Home was at the top, so
we'll show Home again.'

00:50:29.656 --> 00:50:32.296 A:middle
The app stays inactive for
a while; the user comes back

00:50:32.646 --> 00:50:33.446 A:middle
and activates the app.

00:50:34.516 --> 00:50:37.346 A:middle
Then the system shows that
snapshot again from Step 3.

00:50:38.006 --> 00:50:38.936 A:middle
Remember, we were at Work.

00:50:39.106 --> 00:50:39.606 A:middle
It's purple.

00:50:39.606 --> 00:50:40.616 A:middle
It's that same snapshot.

00:50:41.976 --> 00:50:46.376 A:middle
And now the system will
crossfade from that

00:50:46.376 --> 00:50:47.936 A:middle
into the live app,
which is at Home.

00:50:48.756 --> 00:50:49.546 A:middle
So that looked bad.

00:50:49.866 --> 00:50:52.266 A:middle
It was a really ugly
animation, and it didn't use --

00:50:52.566 --> 00:50:53.736 A:middle
do what the user wanted.

00:50:54.226 --> 00:50:55.926 A:middle
They were in one place,
they left the app,

00:50:56.016 --> 00:50:57.486 A:middle
they came back, it
is somewhere else.

00:50:57.646 --> 00:50:58.086 A:middle
That's no good.

00:50:58.086 --> 00:51:01.826 A:middle
So what we should do,
backing all the way up....


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:58.086 --> 00:51:01.826 A:middle
So what we should do,
backing all the way up....

00:51:02.926 --> 00:51:04.626 A:middle
We're in regular width;
the system is going

00:51:04.626 --> 00:51:05.996 A:middle
to resize us back to compact.

00:51:06.986 --> 00:51:10.176 A:middle
We should resize -- we should
change the app back to the state

00:51:10.226 --> 00:51:12.836 A:middle
that it was in when
we were inactivated.

00:51:12.836 --> 00:51:16.416 A:middle
And then going forward,
user activates the app;

00:51:17.176 --> 00:51:19.116 A:middle
system shows the snapshot;
it is the same thing.

00:51:19.776 --> 00:51:21.816 A:middle
We fade into the live
app, it is the same thing.

00:51:21.816 --> 00:51:22.626 A:middle
It is seamless.

00:51:23.676 --> 00:51:26.776 A:middle
So that's the way you
want to handle things.

00:51:27.146 --> 00:51:30.266 A:middle
When the app is inactive,
maintain the same appearance

00:51:30.526 --> 00:51:31.246 A:middle
when the size changes.

00:51:31.246 --> 00:51:35.896 A:middle
You can do this by, when
the app is deactivated,

00:51:35.976 --> 00:51:39.146 A:middle
remember your size and state,
remember what page you're on.

00:51:39.696 --> 00:51:42.686 A:middle
When you get a size change,
and you're still inactive,

00:51:43.226 --> 00:51:45.536 A:middle
and it is sizing back
to that original size,

00:51:46.276 --> 00:51:47.726 A:middle
then apply that state
that you remembered,

00:51:47.946 --> 00:51:51.206 A:middle
go back to that original page.

00:51:53.536 --> 00:51:58.036 A:middle
So we're down to the last two
guidelines, and these will touch

00:51:58.036 --> 00:51:58.906 A:middle
on some things that we'll talk

00:51:58.906 --> 00:52:01.396 A:middle
about in the later multitasking
talks, but first I need


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:58.906 --> 00:52:01.396 A:middle
about in the later multitasking
talks, but first I need

00:52:01.396 --> 00:52:02.596 A:middle
to introduce some terminology.

00:52:03.796 --> 00:52:04.806 A:middle
So, there is two apps running.

00:52:05.666 --> 00:52:09.066 A:middle
The primary app is the one
that starts out in full screen;

00:52:09.456 --> 00:52:10.706 A:middle
it is what you think
of traditionally

00:52:10.706 --> 00:52:12.106 A:middle
as the app that's running.

00:52:13.216 --> 00:52:16.066 A:middle
When you Slide Over another app
we call that the secondary app.

00:52:17.316 --> 00:52:20.036 A:middle
Now no matter how you resize the
apps, they keep this identity;

00:52:20.096 --> 00:52:22.386 A:middle
they're always the same.

00:52:22.386 --> 00:52:24.976 A:middle
And normally we treat these
apps exactly the same.

00:52:25.046 --> 00:52:26.496 A:middle
There really are not
too many differences.

00:52:27.036 --> 00:52:29.686 A:middle
The differences come in when
we're talking about resources

00:52:29.736 --> 00:52:32.096 A:middle
that can't be shared
easily across both apps.

00:52:33.186 --> 00:52:35.276 A:middle
One of those might be
an external display.

00:52:36.286 --> 00:52:40.176 A:middle
If you plug in a TV to your
iPad or use Airplane Mirroring

00:52:40.346 --> 00:52:45.446 A:middle
with an Apple TV, you can
show UI both on the iPad

00:52:45.516 --> 00:52:46.586 A:middle
and that external display.

00:52:47.936 --> 00:52:51.226 A:middle
With multitasking only the
primary app will see the

00:52:51.226 --> 00:52:53.046 A:middle
external display,
not the secondary --

00:52:53.146 --> 00:52:54.146 A:middle
not the secondary app.

00:52:55.886 --> 00:52:58.586 A:middle
So normally apps that use the
external display will split

00:52:58.586 --> 00:53:01.646 A:middle
their UI across the iPad
and the external screen


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:58.586 --> 00:53:01.646 A:middle
their UI across the iPad
and the external screen

00:53:01.646 --> 00:53:04.156 A:middle
when a screen is activated, when
the user plugs something in.

00:53:04.156 --> 00:53:05.486 A:middle
And they are expecting that.

00:53:05.646 --> 00:53:07.746 A:middle
They just plug something in and
they expect something to happen.

00:53:08.316 --> 00:53:10.426 A:middle
There is a quirk with
multitasking now though.

00:53:11.356 --> 00:53:12.846 A:middle
Let's say your app
is the secondary app

00:53:12.846 --> 00:53:17.066 A:middle
and the user quickly resizes
it to become the primary app,

00:53:17.296 --> 00:53:18.116 A:middle
once it is full screen.

00:53:19.576 --> 00:53:22.346 A:middle
When that happens, your
app will get a notification

00:53:22.456 --> 00:53:24.086 A:middle
that that screen
is now available,

00:53:24.296 --> 00:53:25.826 A:middle
the external display
is now available.

00:53:26.866 --> 00:53:29.146 A:middle
And if your app chooses
to immediately take its UI

00:53:29.236 --> 00:53:31.876 A:middle
and split it across the
iPad and the other screen,

00:53:32.276 --> 00:53:34.676 A:middle
the user might not be expecting
that, depending on your app.

00:53:35.596 --> 00:53:36.836 A:middle
So try that out in your app.

00:53:37.186 --> 00:53:39.706 A:middle
Make sure you do something
that makes sense to the user.

00:53:40.596 --> 00:53:43.346 A:middle
The last guideline
is about performance.

00:53:43.416 --> 00:53:44.856 A:middle
And, again, we have
a whole talk on this,

00:53:44.856 --> 00:53:46.146 A:middle
so I'll only touch
on some high points.

00:53:47.316 --> 00:53:49.916 A:middle
As we said before, if
your app doesn't react

00:53:49.916 --> 00:53:52.406 A:middle
to a size change fast enough,
it will get terminated.

00:53:52.746 --> 00:53:54.806 A:middle
So when the size
changes, do as little work

00:53:54.926 --> 00:53:56.586 A:middle
as you can get away with.

00:53:57.666 --> 00:54:00.866 A:middle
If you have anything slow to
do, use the completion block


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:57.666 --> 00:54:00.866 A:middle
If you have anything slow to
do, use the completion block

00:54:01.506 --> 00:54:02.946 A:middle
and 'view will transition
to size'

00:54:02.946 --> 00:54:04.406 A:middle
or 'will transition
to trait collection.'

00:54:05.616 --> 00:54:07.226 A:middle
And also, in the
animation block,

00:54:08.266 --> 00:54:11.126 A:middle
don't do any extra layouts;
don't call 'layout if needed.'

00:54:11.806 --> 00:54:14.366 A:middle
The system is going to do a
layout at the appropriate time,

00:54:14.836 --> 00:54:15.766 A:middle
and take advantage of that.

00:54:16.156 --> 00:54:18.616 A:middle
Just call 'set needs layout'
and let the layout happen,

00:54:18.616 --> 00:54:20.126 A:middle
because layouts can
be time consuming.

00:54:20.626 --> 00:54:24.936 A:middle
So that's the strategies;
that's the guidelines.

00:54:24.966 --> 00:54:26.406 A:middle
Now you know a lot about how

00:54:26.406 --> 00:54:28.416 A:middle
to make your app work
great with multitasking.

00:54:30.486 --> 00:54:35.716 A:middle
Now you know how and why to
adopt multitasking in your app.

00:54:35.716 --> 00:54:38.336 A:middle
You know that adaptivity
has been around since iOS 8;

00:54:38.336 --> 00:54:40.806 A:middle
it is not a big stretch
what we're doing in iOS 9.

00:54:41.776 --> 00:54:46.116 A:middle
And you know how to deliver
a great user experience.

00:54:46.366 --> 00:54:47.336 A:middle
You have the technology.

00:54:48.336 --> 00:54:51.886 A:middle
So your users want to use
multitasking; let them have it.

00:54:53.706 --> 00:54:55.726 A:middle
For more information, check
out our documentation,

00:54:55.726 --> 00:54:58.106 A:middle
especially "Adopting
Multitasking Enhancements

00:54:58.196 --> 00:54:58.716 A:middle
on iPad."

00:54:59.396 --> 00:55:00.396 A:middle
Check out our sample code.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:54:59.396 --> 00:55:00.396 A:middle
Check out our sample code.

00:55:01.286 --> 00:55:04.166 A:middle
You can talk to tech support,
the developer forums, DTS.

00:55:04.946 --> 00:55:07.526 A:middle
For general inquiries, talk to
Curt Rothert, our Evangelist.

00:55:08.196 --> 00:55:10.486 A:middle
And if you have more questions,
we have more sessions.

00:55:11.246 --> 00:55:13.396 A:middle
Again, if you want to find
out about picture-in-picture

00:55:13.396 --> 00:55:16.256 A:middle
or sharing the camera, go
to "Multitasking Essentials

00:55:16.256 --> 00:55:17.126 A:middle
for Media-Based Apps."

00:55:18.016 --> 00:55:20.076 A:middle
If you want to find out
how to be a good citizen

00:55:20.236 --> 00:55:23.456 A:middle
and share resources like CPU
and memory across the apps,

00:55:24.386 --> 00:55:26.136 A:middle
go to "Optimizing Your
App for Multitasking."

00:55:27.356 --> 00:55:29.846 A:middle
Last, visit us in the "Cocoa
Touch and Multitasking Lab."

00:55:29.846 --> 00:55:32.526 A:middle
We'll help you out
with your app.

00:55:32.526 --> 00:55:33.406 A:middle
So thank you for coming.

00:55:33.526 --> 00:55:34.926 A:middle
Go forth and multitask.

