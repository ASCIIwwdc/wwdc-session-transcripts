WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:20.516 --> 00:00:23.106 A:middle
[ Applause ]

00:00:23.606 --> 00:00:24.436 A:middle
&gt;&gt; BRIAN WEINSTEIN:
Hi, everyone.

00:00:24.776 --> 00:00:25.876 A:middle
I'm Brian Weinstein.

00:00:25.996 --> 00:00:29.456 A:middle
I'm a Safari and WebKit engineer
and here to talk to you guys

00:00:29.626 --> 00:00:32.066 A:middle
about What's New In
Safari Extensibility.

00:00:33.386 --> 00:00:37.006 A:middle
Today we are announcing a few
new ways you can extend Safari.

00:00:37.596 --> 00:00:42.196 A:middle
You can write content
blockers for iOS and OS X.

00:00:42.196 --> 00:00:44.686 A:middle
There are changes to the
Safari Extensions Gallery.

00:00:45.786 --> 00:00:48.336 A:middle
And a new type of
app extension for you

00:00:48.336 --> 00:00:51.556 A:middle
to put your content directly
in Safari's Shared Links.

00:00:53.216 --> 00:00:55.956 A:middle
Let's get started and
jump right into talking

00:00:55.956 --> 00:00:56.976 A:middle
about content blockers.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:00.166 --> 00:01:01.876 A:middle
Let's start with the
big question here:

00:01:02.176 --> 00:01:03.616 A:middle
What are content blockers?

00:01:04.186 --> 00:01:08.686 A:middle
Content blockers identify
subsets of content or resources

00:01:08.686 --> 00:01:12.036 A:middle
on a page to not
show or even load.

00:01:12.576 --> 00:01:15.176 A:middle
I'm sure you can all imagine
content you might want to block

00:01:15.176 --> 00:01:16.096 A:middle
when browsing the Web.

00:01:17.466 --> 00:01:20.526 A:middle
There are two main ways you
can block content using a

00:01:20.526 --> 00:01:21.396 A:middle
content blocker.

00:01:21.926 --> 00:01:25.396 A:middle
You can hide elements on a
page or you can block resources

00:01:25.396 --> 00:01:26.516 A:middle
from loading altogether.

00:01:26.836 --> 00:01:29.226 A:middle
You have been able
to do this for awhile

00:01:29.396 --> 00:01:32.706 A:middle
with Safari extensions on OS
X, but today we are bringing

00:01:32.706 --> 00:01:34.206 A:middle
that capability to iOS.

00:01:35.046 --> 00:01:38.586 A:middle
Apps will tell Safari the
content they want to block ahead

00:01:38.586 --> 00:01:42.016 A:middle
of time instead of
Safari consulting

00:01:42.016 --> 00:01:44.946 A:middle
with the app during the
actual loading process.

00:01:45.366 --> 00:01:48.106 A:middle
This new model is very
fast and efficient

00:01:48.386 --> 00:01:50.376 A:middle
because Safari doesn't
have to consult

00:01:50.576 --> 00:01:52.216 A:middle
with the app during loading,

00:01:52.586 --> 00:01:56.156 A:middle
and the content blockers
are compiled into byte code

00:01:56.306 --> 00:01:58.296 A:middle
that can be evaluated
very efficiently.

00:01:58.846 --> 00:02:02.486 A:middle
Additionally this new model is
great for your user's privacy


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.846 --> 00:02:02.486 A:middle
Additionally this new model is
great for your user's privacy

00:02:02.746 --> 00:02:05.986 A:middle
because content blockers have
no knowledge of the browsing

00:02:06.096 --> 00:02:07.356 A:middle
that its users are doing.

00:02:08.746 --> 00:02:12.116 A:middle
And to get started creating a
content blocker you will create

00:02:12.116 --> 00:02:16.596 A:middle
an app extension on iOS
that will return a list,

00:02:16.596 --> 00:02:18.686 A:middle
a JSON string containing
the list

00:02:18.686 --> 00:02:21.956 A:middle
of rules describing the
content that you want to block.

00:02:23.326 --> 00:02:27.236 A:middle
So there's this website I go to
regularly where the author talks

00:02:27.236 --> 00:02:29.106 A:middle
about different golf
courses he's played

00:02:29.356 --> 00:02:30.996 A:middle
and posts some beautiful
pictures.

00:02:31.536 --> 00:02:34.586 A:middle
However, there are a few things
that annoy me about this site.

00:02:35.096 --> 00:02:36.746 A:middle
I would like to write
a content blocker

00:02:37.046 --> 00:02:38.746 A:middle
to block the content
that bothered me.

00:02:39.256 --> 00:02:41.726 A:middle
The most obvious
annoyance is this list

00:02:41.726 --> 00:02:43.286 A:middle
of click bait links on the left.

00:02:44.816 --> 00:02:47.826 A:middle
They even follow me around
on the page when I scroll.

00:02:48.166 --> 00:02:50.496 A:middle
So let's write a rule that
will hide this element.

00:02:53.356 --> 00:02:56.616 A:middle
So we get started by seeing
which element we should hide.

00:02:56.946 --> 00:03:00.436 A:middle
Looking at web inspector we see
there's a div with ID leaks.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:56.946 --> 00:03:00.436 A:middle
Looking at web inspector we see
there's a div with ID leaks.

00:03:00.436 --> 00:03:03.296 A:middle
When that is selected
in web inspector,

00:03:04.106 --> 00:03:10.186 A:middle
we actually get an overlay
on the device itself showing

00:03:10.186 --> 00:03:12.846 A:middle
that this is the correct
element that we want to hide.

00:03:13.366 --> 00:03:15.906 A:middle
So now that we know the
element we want to hide,

00:03:16.246 --> 00:03:17.676 A:middle
let's write a rule to do it.

00:03:19.346 --> 00:03:23.276 A:middle
So each rule, each content
blocking rule is a JSON object

00:03:23.536 --> 00:03:26.436 A:middle
containing action and
trigger dictionaries.

00:03:26.576 --> 00:03:30.726 A:middle
The action tells Safari what to
do when the trigger is matched

00:03:31.096 --> 00:03:32.816 A:middle
and the trigger tells Safari

00:03:32.816 --> 00:03:35.146 A:middle
when it should perform
the corresponding action.

00:03:35.816 --> 00:03:39.026 A:middle
So let's start by taking a
look at our action dictionary

00:03:39.226 --> 00:03:41.206 A:middle
to hide the element,
to hide this element.

00:03:41.686 --> 00:03:45.826 A:middle
Our action has the
type CSS display none

00:03:46.126 --> 00:03:48.806 A:middle
which means we are applying
the display none style

00:03:49.006 --> 00:03:50.526 A:middle
to an element on the page.

00:03:50.896 --> 00:03:54.236 A:middle
When the action type
is CSS display none,

00:03:54.476 --> 00:03:57.466 A:middle
a selector is required
in the action dictionary.

00:03:57.876 --> 00:04:00.136 A:middle
All selectors that are
supported by Safari


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:57.876 --> 00:04:00.136 A:middle
All selectors that are
supported by Safari

00:04:00.136 --> 00:04:02.706 A:middle
and WebKit are supported
by content blockers.

00:04:03.106 --> 00:04:05.096 A:middle
So for this example we want

00:04:05.096 --> 00:04:07.746 A:middle
to block the content
with the ID Links.

00:04:08.886 --> 00:04:11.986 A:middle
Now we define when we want
this action to take place.

00:04:12.306 --> 00:04:15.786 A:middle
The trigger dictionary
is used for that.

00:04:16.016 --> 00:04:19.766 A:middle
Since Links is a pretty generic
selector and could be used

00:04:19.766 --> 00:04:24.366 A:middle
for real content on other pages,
I only want this rule to apply

00:04:24.576 --> 00:04:28.276 A:middle
when the user is on a page
on bigbearsgolfblog.com.

00:04:28.866 --> 00:04:31.646 A:middle
If I wanted this rule to
apply when the user was

00:04:31.646 --> 00:04:34.686 A:middle
on any site except
bigbearsgolfblog.com,

00:04:35.146 --> 00:04:38.906 A:middle
I would just replace the if
domain key with unless domain

00:04:38.986 --> 00:04:40.426 A:middle
and keep the value the same.

00:04:41.196 --> 00:04:44.656 A:middle
And I would like this action to
apply when loading any resource.

00:04:44.836 --> 00:04:48.396 A:middle
Once again, as long as I'm
on bigbearsgolfblog.com,

00:04:48.696 --> 00:04:52.906 A:middle
so I set my URL filter which is
a regular expression that is run

00:04:52.906 --> 00:04:55.686 A:middle
against the URL of every
resource being loaded

00:04:55.946 --> 00:04:57.396 A:middle
to match all URLs.

00:04:57.666 --> 00:04:58.706 A:middle
And we'll talk a little more

00:04:58.706 --> 00:05:01.006 A:middle
about URL filter
in a later example.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.706 --> 00:05:01.006 A:middle
about URL filter
in a later example.

00:05:01.806 --> 00:05:04.316 A:middle
So let's see what this rule
looks like all together.

00:05:05.356 --> 00:05:08.096 A:middle
We have our action
type, CSS display none,

00:05:08.336 --> 00:05:09.986 A:middle
which says that we
are hiding an element.

00:05:11.046 --> 00:05:14.036 A:middle
Our selector which describes
the element we are hiding.

00:05:14.576 --> 00:05:16.866 A:middle
And then in our trigger,

00:05:17.046 --> 00:05:21.626 A:middle
we specify which domains we
want this style to apply to.

00:05:21.846 --> 00:05:24.826 A:middle
And which resources we want
to apply it to when loading.

00:05:25.986 --> 00:05:28.876 A:middle
So when the content
blocker is applied,

00:05:29.146 --> 00:05:30.436 A:middle
here's what the page looks like.

00:05:31.576 --> 00:05:34.256 A:middle
The list of links is
gone and I can just focus

00:05:34.256 --> 00:05:36.216 A:middle
on the content that
interests me.

00:05:39.156 --> 00:05:41.626 A:middle
However, when looking
at Web inspector,

00:05:41.896 --> 00:05:43.996 A:middle
I found another annoyance
on the page.

00:05:44.916 --> 00:05:47.306 A:middle
If you look at the
resources on this page,

00:05:47.716 --> 00:05:50.476 A:middle
you can see that there's a
script loaded called Tracking

00:05:50.476 --> 00:05:55.126 A:middle
script.JS from example.com and
this script actually tracks me

00:05:55.126 --> 00:05:58.786 A:middle
across various pages that I
visit and can build up a profile

00:05:58.786 --> 00:06:00.576 A:middle
about me from my
browsing history.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:58.786 --> 00:06:00.576 A:middle
about me from my
browsing history.

00:06:00.966 --> 00:06:04.596 A:middle
When I look in the console
it also helpfully warns me

00:06:04.596 --> 00:06:05.596 A:middle
that I'm being tracked.

00:06:06.616 --> 00:06:07.726 A:middle
Thanks, Tracking script.

00:06:08.376 --> 00:06:12.386 A:middle
Let's block this script
from loading altogether.

00:06:15.316 --> 00:06:18.486 A:middle
We start by defining the
action for this rule.

00:06:21.956 --> 00:06:26.066 A:middle
The action type is block, which
means we will block the load

00:06:26.066 --> 00:06:28.976 A:middle
of any resource matching
the corresponding trigger.

00:06:29.276 --> 00:06:30.726 A:middle
So let's take a look
at that trigger.

00:06:31.686 --> 00:06:34.626 A:middle
The trigger defines when
the action should fire.

00:06:34.976 --> 00:06:37.626 A:middle
So in this case we've
defined a URL filter,

00:06:37.956 --> 00:06:40.036 A:middle
a resource type,
and a load type.

00:06:40.556 --> 00:06:43.886 A:middle
The trigger will file when
all three, the URL filter,

00:06:44.056 --> 00:06:47.056 A:middle
the resource type, and
the load type all match.

00:06:47.876 --> 00:06:50.216 A:middle
Let's start by talking
about the URL filter.

00:06:50.966 --> 00:06:54.326 A:middle
It is a regular expression
that is run against each URL

00:06:54.326 --> 00:06:55.356 A:middle
that is being requested.

00:06:55.896 --> 00:06:58.446 A:middle
So in this case it
will match any URLs

00:06:58.726 --> 00:07:01.676 A:middle
that contain the string
Tracking underscore script.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:58.726 --> 00:07:01.676 A:middle
that contain the string
Tracking underscore script.

00:07:02.026 --> 00:07:06.636 A:middle
This will match
example.com/Tracking script.js.

00:07:07.986 --> 00:07:10.106 A:middle
The rest of the components

00:07:10.106 --> 00:07:13.396 A:middle
of the trigger increase the
specificity of the trigger

00:07:13.706 --> 00:07:16.086 A:middle
so we don't block more
content than we want to.

00:07:17.386 --> 00:07:20.206 A:middle
The first way we do this
is by specifying a list

00:07:20.206 --> 00:07:22.076 A:middle
of resource types
to match against.

00:07:22.216 --> 00:07:26.016 A:middle
In this case we only want to
block the loading of scripts.

00:07:26.406 --> 00:07:29.736 A:middle
So we pass script as the one
resource type we want to match.

00:07:30.526 --> 00:07:34.076 A:middle
Lastly, we specify a
load type of third-party.

00:07:34.596 --> 00:07:36.816 A:middle
There are two possible
values for load type.

00:07:37.226 --> 00:07:39.426 A:middle
There's first party
and third party.

00:07:39.656 --> 00:07:42.466 A:middle
A load is considered
first party when it comes

00:07:42.466 --> 00:07:44.736 A:middle
from the same scheme, domain,

00:07:44.896 --> 00:07:47.626 A:middle
and port as the main
resource on the page.

00:07:48.056 --> 00:07:50.676 A:middle
In our case, we only
want to block the loading

00:07:50.676 --> 00:07:53.296 A:middle
of tracking script when
it is a third-party load.

00:07:53.626 --> 00:07:56.446 A:middle
So this means if the
user was on example.com,

00:07:56.746 --> 00:07:58.646 A:middle
this script would still
load successfully.

00:07:58.646 --> 00:08:02.316 A:middle
So let's see what the rule
looks like all put together.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.646 --> 00:08:02.316 A:middle
So let's see what the rule
looks like all put together.

00:08:03.566 --> 00:08:06.716 A:middle
And when we reload the page
with this content blocking rule,

00:08:07.216 --> 00:08:13.106 A:middle
you can see that we are not
loading Tracking script.js

00:08:13.106 --> 00:08:17.066 A:middle
at all and there are no
warnings in the console

00:08:17.326 --> 00:08:18.346 A:middle
that we're being tracked.

00:08:19.376 --> 00:08:19.736 A:middle
Great!

00:08:20.516 --> 00:08:25.556 A:middle
[ Applause ]

00:08:26.056 --> 00:08:29.826 A:middle
So your content blockers
will just be JSON arrays

00:08:29.826 --> 00:08:30.786 A:middle
of these rules.

00:08:30.786 --> 00:08:33.436 A:middle
Now that you've described the
content that you want to block,

00:08:33.895 --> 00:08:36.456 A:middle
the next step is to get
your content blocker

00:08:36.596 --> 00:08:37.866 A:middle
on an iOS device.

00:08:38.385 --> 00:08:41.926 A:middle
As I mentioned before, content
blockers on iOS are loaded

00:08:41.926 --> 00:08:42.926 A:middle
from an app extension.

00:08:43.226 --> 00:08:45.256 A:middle
It is very simple
to make your own.

00:08:45.496 --> 00:08:48.486 A:middle
To begin, you just need to add
a new target to your project

00:08:48.936 --> 00:08:51.946 A:middle
and select content blocker
extension from the list

00:08:51.946 --> 00:08:53.766 A:middle
of iOS application extensions.

00:08:54.236 --> 00:08:57.006 A:middle
This app extension
will be instantiated

00:08:57.066 --> 00:08:59.336 A:middle
when your content blocker
is enabled in settings.

00:08:59.846 --> 00:09:01.846 A:middle
And like all other
app extensions,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.846 --> 00:09:01.846 A:middle
And like all other
app extensions,

00:09:01.896 --> 00:09:03.116 A:middle
it's disabled by default.

00:09:04.156 --> 00:09:07.156 A:middle
Your rules will be compiled
into byte code by Safari

00:09:07.156 --> 00:09:08.456 A:middle
so they can can be loaded

00:09:08.456 --> 00:09:11.536 A:middle
and evaluated quickly each
time Safari is launched.

00:09:12.116 --> 00:09:14.456 A:middle
Once you've created
your app extension,

00:09:14.616 --> 00:09:18.006 A:middle
you'll have an action
request handler

00:09:18.236 --> 00:09:19.566 A:middle
that looks something like this.

00:09:20.316 --> 00:09:24.506 A:middle
All this app extension
does is return the contents

00:09:24.556 --> 00:09:27.356 A:middle
of blocker list.JSON to Safari

00:09:27.456 --> 00:09:29.516 A:middle
when your app extension
is instantiated.

00:09:29.866 --> 00:09:32.836 A:middle
And blocker list.JSON
is automatically

00:09:33.236 --> 00:09:35.596 A:middle
in your extensions target,
so all you have to do

00:09:35.596 --> 00:09:37.346 A:middle
to write your own
content blocker is

00:09:37.346 --> 00:09:38.806 A:middle
to fill in this JSON file.

00:09:39.976 --> 00:09:45.146 A:middle
And content blockers are
automatically applied in Safari

00:09:45.366 --> 00:09:47.686 A:middle
or any apps that use
Safari View Controller.

00:09:47.856 --> 00:09:51.386 A:middle
If you have an app that displays
Web content you should check

00:09:51.386 --> 00:09:54.116 A:middle
out the talk from earlier
this week introducing Safari

00:09:54.116 --> 00:09:54.856 A:middle
View Controller.

00:09:55.266 --> 00:10:00.006 A:middle
However, a static block
list might not be enough


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:55.266 --> 00:10:00.006 A:middle
However, a static block
list might not be enough

00:10:00.006 --> 00:10:01.046 A:middle
for some of your apps.

00:10:01.376 --> 00:10:03.176 A:middle
You might want to
provide customization

00:10:03.176 --> 00:10:06.496 A:middle
of your content blockers, either
by letting your users select

00:10:06.496 --> 00:10:08.276 A:middle
from multiple different
block lists

00:10:08.616 --> 00:10:11.536 A:middle
or by letting your users pick
certain sites they don't want it

00:10:11.536 --> 00:10:12.276 A:middle
to apply to.

00:10:12.816 --> 00:10:16.736 A:middle
To do this, just like with other
app extensions we recommend

00:10:16.736 --> 00:10:20.016 A:middle
that you put your management
settings in your app.

00:10:20.016 --> 00:10:22.976 A:middle
When your users perform actions
that would change the contents

00:10:22.976 --> 00:10:26.176 A:middle
of your block list, all you
need to do is tell Safari

00:10:26.386 --> 00:10:28.296 A:middle
to re-instantiate
your app extension,

00:10:28.416 --> 00:10:30.946 A:middle
which will cause your content
blocker to be recompiled.

00:10:31.796 --> 00:10:34.216 A:middle
To do this, we've
added a new API

00:10:34.376 --> 00:10:38.556 A:middle
in the Safari services framework
called SF content blocker

00:10:38.556 --> 00:10:41.606 A:middle
manager reload content
blocker with identifier.

00:10:42.126 --> 00:10:44.996 A:middle
All you need to do is pass
it the bundle identifier

00:10:44.996 --> 00:10:46.106 A:middle
of your content blocker.

00:10:46.446 --> 00:10:49.506 A:middle
This will cause Safari to
rerun your app extension

00:10:49.696 --> 00:10:51.486 A:middle
and update the byte
code generated

00:10:51.486 --> 00:10:53.046 A:middle
from parsing your
content blocker.

00:10:54.116 --> 00:10:57.266 A:middle
That was just some of the things
that content blockers can do

00:10:57.346 --> 00:10:59.836 A:middle
and how easy it is to get
started making your own.

00:10:59.836 --> 00:11:02.836 A:middle
I would like to bring up Alex
Christensen to show us a demo.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.836 --> 00:11:02.836 A:middle
I would like to bring up Alex
Christensen to show us a demo.

00:11:03.186 --> 00:11:03.646 A:middle
Alex?

00:11:04.516 --> 00:11:10.246 A:middle
[ Applause ]

00:11:10.746 --> 00:11:11.276 A:middle
&gt;&gt; ALEX CHRISTENSEN:
Thanks, Brian.

00:11:13.376 --> 00:11:15.656 A:middle
I'm Alex Christensen from
the Safari and WebKit team.

00:11:15.656 --> 00:11:18.526 A:middle
I'm going to show you how to
make a content blocker in iOS.

00:11:19.306 --> 00:11:21.496 A:middle
We will block content
in two ways,

00:11:22.106 --> 00:11:24.006 A:middle
we're going to hide some
elements on a Web page

00:11:24.006 --> 00:11:25.106 A:middle
and we're going to
block some loads.

00:11:26.986 --> 00:11:31.016 A:middle
Now, I don't know about you,
but I surf the Web all the time

00:11:31.086 --> 00:11:35.296 A:middle
and I feel like I can really
enhance a user's experience

00:11:35.296 --> 00:11:37.246 A:middle
by making an extension

00:11:37.246 --> 00:11:39.266 A:middle
that removes some
content from the page.

00:11:39.266 --> 00:11:42.806 A:middle
Now, let me show you one
of my favorite Web pages.

00:11:43.246 --> 00:11:44.326 A:middle
You'll see what I'm
talking about.

00:11:50.146 --> 00:11:51.296 A:middle
There we go.

00:11:51.486 --> 00:11:56.766 A:middle
Oh! Now, I just love
Web pages like this.

00:11:56.766 --> 00:12:01.076 A:middle
I got to stay up to date with
what's going on in the world


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:56.766 --> 00:12:01.076 A:middle
I got to stay up to date with
what's going on in the world

00:12:01.076 --> 00:12:02.386 A:middle
of cute puppy dog pictures.

00:12:02.966 --> 00:12:09.556 A:middle
So I check one of these at
least every day and I only have

00:12:09.556 --> 00:12:12.196 A:middle
so much valuable screen space.

00:12:13.886 --> 00:12:17.996 A:middle
The comments here are kind of
annoying and they are taking

00:12:17.996 --> 00:12:20.576 A:middle
up the valuable screen
space that I want to use

00:12:20.626 --> 00:12:21.916 A:middle
for cute puppy dog pictures.

00:12:22.836 --> 00:12:24.796 A:middle
Let's go to the Web inspector

00:12:24.796 --> 00:12:26.676 A:middle
and see what we can
do about this problem.

00:12:28.106 --> 00:12:32.456 A:middle
Open up Safari on Mac.

00:12:32.536 --> 00:12:35.686 A:middle
If we go to the develop
menu, simulator,

00:12:36.316 --> 00:12:37.706 A:middle
cute puppies and cats.com.

00:12:37.826 --> 00:12:39.386 A:middle
You can see we are going

00:12:39.386 --> 00:12:41.356 A:middle
to inspect this iOS
simulator instance.

00:12:42.606 --> 00:12:45.476 A:middle
If we hold our mouse
over this we can see

00:12:45.476 --> 00:12:47.736 A:middle
that this is the div
that I want to hide.

00:12:50.106 --> 00:12:52.246 A:middle
It has a class comment.

00:12:53.436 --> 00:12:56.516 A:middle
And if we explore the structure
of this Web page we can see

00:12:56.516 --> 00:12:59.096 A:middle
that all the other
divs that I want

00:12:59.096 --> 00:13:00.796 A:middle
to hide also have
the class comment.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.096 --> 00:13:00.796 A:middle
to hide also have
the class comment.

00:13:00.906 --> 00:13:04.236 A:middle
It's pretty easy to write
a selector div.comments

00:13:04.706 --> 00:13:08.156 A:middle
that finds all of the
elements I want to hide

00:13:08.156 --> 00:13:14.226 A:middle
on this page using the
CSS display none style.

00:13:14.226 --> 00:13:17.356 A:middle
Let's make a rule that does
that in an iOS content blocker.

00:13:24.546 --> 00:13:29.976 A:middle
Open up Xcode, create
a new project, iOS,

00:13:31.276 --> 00:13:32.966 A:middle
single view application for now.

00:13:33.816 --> 00:13:38.126 A:middle
My app. Hopefully you have
a better name than "my app".

00:13:38.956 --> 00:13:40.846 A:middle
Create it on the
desktop for now.

00:13:41.036 --> 00:13:42.846 A:middle
All right.

00:13:43.396 --> 00:13:52.336 A:middle
So from here we go to file,
new, target, and under iOS,

00:13:53.436 --> 00:13:57.486 A:middle
application extension, we have
the content blocker extension

00:13:57.486 --> 00:13:59.546 A:middle
template that Brian
just mentioned.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:04.556 --> 00:14:05.706 A:middle
My content blocker.

00:14:06.306 --> 00:14:10.016 A:middle
Let's not activate this
scheme because we will want

00:14:10.016 --> 00:14:12.246 A:middle
to run our app in
the iOS simulator.

00:14:13.126 --> 00:14:16.866 A:middle
Now, adding that new
target made this right here:

00:14:16.916 --> 00:14:17.896 A:middle
mycontentblocker.

00:14:19.136 --> 00:14:22.616 A:middle
Inside of this, it made
this blocker list.JSON.

00:14:22.616 --> 00:14:25.086 A:middle
This is where we want
to put the rules.

00:14:27.446 --> 00:14:39.986 A:middle
Now, I have a rule that applies
the selector div.comments

00:14:40.966 --> 00:14:44.896 A:middle
and applies the style
CSS display none to all

00:14:44.896 --> 00:14:48.566 A:middle
of the elements in the page
that match that selector.

00:14:54.126 --> 00:14:57.246 A:middle
And let's have this
apply everywhere for now.

00:14:57.326 --> 00:15:01.506 A:middle
So we have the dot star regular
expression, meaning everywhere.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:57.326 --> 00:15:01.506 A:middle
So we have the dot star regular
expression, meaning everywhere.

00:15:03.706 --> 00:15:05.306 A:middle
Let's run this in simulator.

00:15:06.126 --> 00:15:06.796 A:middle
Here is my app.

00:15:09.076 --> 00:15:19.316 A:middle
Okay. Now if we go to settings,
Safari, content blockers,

00:15:20.506 --> 00:15:22.116 A:middle
here is my app's
content blocker.

00:15:22.996 --> 00:15:29.166 A:middle
Let's turn this on and reload
this page and see what it did.

00:15:30.516 --> 00:15:35.736 A:middle
[ Applause ]

00:15:36.236 --> 00:15:39.756 A:middle
All those comments are gone
and I can use the screen space

00:15:39.756 --> 00:15:42.906 A:middle
for the cute puppy dog pictures,
why I came to the site.

00:15:42.906 --> 00:15:47.096 A:middle
If you look really carefully,
you might notice something else

00:15:47.096 --> 00:15:49.866 A:middle
that is also not a
cute puppy dog picture.

00:15:51.236 --> 00:15:55.366 A:middle
Now, I've always been more of
a dog person than a cat person

00:15:56.006 --> 00:16:02.386 A:middle
and I don't want to
see these cat pictures.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:56.006 --> 00:16:02.386 A:middle
and I don't want to
see these cat pictures.

00:16:02.826 --> 00:16:06.426 A:middle
(Laughter) I don't want to wait
for the cat pictures to load

00:16:06.426 --> 00:16:08.226 A:middle
and don't want to
use my bandwidth

00:16:08.806 --> 00:16:11.376 A:middle
to download cat pictures
that I didn't want to see

00:16:11.376 --> 00:16:15.366 A:middle
in the first place, so let's
block these loads completely.

00:16:21.946 --> 00:16:24.456 A:middle
Back in the Web inspector
and the resources tab,

00:16:25.936 --> 00:16:32.146 A:middle
you can see that the resources
on this page have some names

00:16:32.146 --> 00:16:34.226 A:middle
that I can write regular
expressions to recognize.

00:16:34.686 --> 00:16:39.616 A:middle
If it contains slash cat,
probably a cat picture.

00:16:42.186 --> 00:16:43.486 A:middle
So let's block those loads.

00:16:47.376 --> 00:16:49.806 A:middle
Here we have another rule.

00:16:51.926 --> 00:16:59.646 A:middle
Action type block, and if it
matches the regular expression

00:16:59.646 --> 00:17:01.666 A:middle
slash cat, let's block it.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.646 --> 00:17:01.666 A:middle
slash cat, let's block it.

00:17:01.996 --> 00:17:04.036 A:middle
I think this is a
little bit too generic.

00:17:04.036 --> 00:17:06.346 A:middle
I think this will probably
block things on pages

00:17:06.346 --> 00:17:09.326 A:middle
that I'm not expecting, like
if there's slash category

00:17:09.326 --> 00:17:11.506 A:middle
in the URL anywhere on
the, this will block it

00:17:11.506 --> 00:17:12.955 A:middle
but that could cause problems.

00:17:13.536 --> 00:17:14.396 A:middle
Let's just have it

00:17:14.396 --> 00:17:17.546 A:middle
on cutepuppiesandcats.com cause
I'm pretty sure that anything

00:17:17.546 --> 00:17:19.396 A:middle
on this website that
has slash cat

00:17:19.396 --> 00:17:22.195 A:middle
in its URL is probably a cat
picture that I want to block.

00:17:22.516 --> 00:17:26.486 A:middle
All right, let's run this
and see what happens.

00:17:34.046 --> 00:17:35.896 A:middle
Let's go back to
settings and toggle this

00:17:35.896 --> 00:17:37.436 A:middle
to recompile the
content blocker.

00:17:37.836 --> 00:17:41.606 A:middle
You can also use the API to
do this from within your app.

00:17:44.176 --> 00:17:48.496 A:middle
Go back to Safari, reload
the page, there we go.

00:17:48.496 --> 00:17:52.236 A:middle
The cat pictures are gone, but
something has gone wrong here.

00:17:52.576 --> 00:17:55.486 A:middle
My dog picture is too big.

00:17:55.746 --> 00:17:57.116 A:middle
I have no background color.

00:17:57.436 --> 00:17:59.156 A:middle
It looks like the
CSS is also gone.

00:17:59.706 --> 00:18:03.636 A:middle
(Laughter) That's
definitely not what we wanted.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.706 --> 00:18:03.636 A:middle
(Laughter) That's
definitely not what we wanted.

00:18:03.636 --> 00:18:05.616 A:middle
Let's go back to
the Web inspector

00:18:05.616 --> 00:18:09.046 A:middle
and see what's going on.

00:18:09.306 --> 00:18:14.766 A:middle
Right here, you can see
that my CSS also starts

00:18:14.766 --> 00:18:17.556 A:middle
with /cat in its URL.

00:18:17.876 --> 00:18:18.906 A:middle
It's cats and dogs.css.

00:18:19.486 --> 00:18:21.586 A:middle
We are blocking that
unintentionally.

00:18:22.256 --> 00:18:26.886 A:middle
There are a couple ways
we could let this through.

00:18:27.016 --> 00:18:32.966 A:middle
We can have the other rule
only apply to images or --

00:18:33.546 --> 00:18:39.506 A:middle
well, be creative, but I'm
going to make it so that

00:18:40.586 --> 00:18:42.356 A:middle
if it also matches
cats and dogs,

00:18:42.876 --> 00:18:45.866 A:middle
we want to ignore this
rule that would block it.

00:18:51.196 --> 00:18:51.936 A:middle
There we go.

00:18:51.936 --> 00:18:55.446 A:middle
Has cats and dogs in it,
ignore the previous rules.

00:18:55.826 --> 00:18:58.926 A:middle
This will block the cat
pictures, which is what I want

00:18:58.926 --> 00:19:02.676 A:middle
to do, but it will let the
cats and dogs.css through.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:58.926 --> 00:19:02.676 A:middle
to do, but it will let the
cats and dogs.css through.

00:19:06.586 --> 00:19:08.726 A:middle
All right, let's rerun this.

00:19:16.726 --> 00:19:19.916 A:middle
Toggle this to recompile
the content blocker

00:19:20.696 --> 00:19:25.046 A:middle
and reload the page.

00:19:26.766 --> 00:19:27.416 A:middle
There we go.

00:19:28.516 --> 00:19:31.636 A:middle
[ Applause ]

00:19:32.136 --> 00:19:35.016 A:middle
This is how I want users
of my content blocker

00:19:35.346 --> 00:19:36.566 A:middle
to view web pages like this,

00:19:37.036 --> 00:19:38.776 A:middle
straight to the puppy
dog pictures.

00:19:39.086 --> 00:19:40.426 A:middle
All right.

00:19:41.736 --> 00:19:45.956 A:middle
so today we blocked some cat
pictures, we hid some comments.

00:19:46.636 --> 00:19:49.476 A:middle
Who knows what you might
want to block tomorrow?

00:19:49.476 --> 00:19:50.626 A:middle
So give it a shot.

00:19:50.706 --> 00:19:52.936 A:middle
Try making a content
blocker on iOS.

00:19:53.206 --> 00:19:53.976 A:middle
Brian, come on back.

00:19:54.516 --> 00:20:01.096 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:54.516 --> 00:20:01.096 A:middle
[ Applause ]

00:20:01.596 --> 00:20:02.636 A:middle
&gt;&gt; BRIAN WEINSTEIN:
Thanks, Alex.

00:20:03.076 --> 00:20:04.526 A:middle
So that was an overview of how

00:20:04.526 --> 00:20:06.536 A:middle
to create a content
blocker on iOS.

00:20:06.936 --> 00:20:08.876 A:middle
And just some of the
things you can do with them.

00:20:11.306 --> 00:20:14.626 A:middle
So since we think that this
block list model is the best way

00:20:14.626 --> 00:20:17.496 A:middle
to block content on the Web
we've brought the same model

00:20:17.496 --> 00:20:20.106 A:middle
back to the Mac via
the traditional Safari

00:20:20.106 --> 00:20:20.836 A:middle
extensions API.

00:20:20.836 --> 00:20:24.576 A:middle
You have been able to block
content using Safari extensions

00:20:24.786 --> 00:20:27.126 A:middle
for a few years now,
but the current model

00:20:27.126 --> 00:20:30.466 A:middle
of blocking can actually
adversely affect performance

00:20:30.616 --> 00:20:31.826 A:middle
of your users' browsing.

00:20:32.316 --> 00:20:36.186 A:middle
With this new block list
model, since Safari knows

00:20:36.186 --> 00:20:38.856 A:middle
about the block list before
any loading takes place,

00:20:39.176 --> 00:20:40.366 A:middle
it is a lot faster.

00:20:40.646 --> 00:20:43.726 A:middle
Since we've optimized our
compiled byte code that each

00:20:43.726 --> 00:20:45.086 A:middle
of these block lists creates,

00:20:45.286 --> 00:20:46.986 A:middle
it's a lot more memory
efficient.

00:20:47.946 --> 00:20:51.346 A:middle
So if anyone has written
extensions using --

00:20:51.346 --> 00:20:54.366 A:middle
if anyone has written content
blocking extensions in the past,

00:20:54.956 --> 00:20:56.576 A:middle
they know about the
can load method

00:20:57.186 --> 00:20:59.446 A:middle
and so we are deprecating
the can load method

00:20:59.786 --> 00:21:03.086 A:middle
and if your Safari extension
specifies a block list,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.786 --> 00:21:03.086 A:middle
and if your Safari extension
specifies a block list,

00:21:03.406 --> 00:21:06.646 A:middle
calls to can load will become
no ops in your extension.

00:21:06.646 --> 00:21:11.526 A:middle
To add a content blocker to your
Safari extension, all you have

00:21:11.586 --> 00:21:14.036 A:middle
to do is set the
content blocker file

00:21:14.386 --> 00:21:17.156 A:middle
in Safari's extension builder.

00:21:17.476 --> 00:21:22.166 A:middle
This can be the exact same JSON
file that your iOS app uses.

00:21:23.566 --> 00:21:26.026 A:middle
However, if you would
like to provide your users

00:21:26.026 --> 00:21:28.956 A:middle
with customization options
for what content to block,

00:21:29.256 --> 00:21:32.206 A:middle
once again letting them choose
between different block lists

00:21:32.466 --> 00:21:35.376 A:middle
or making a block list
not apply when a user is

00:21:35.376 --> 00:21:38.126 A:middle
on a certain page, we've
added a JavaScript API

00:21:38.576 --> 00:21:41.516 A:middle
to configure your content
blocker dynamically.

00:21:42.346 --> 00:21:46.186 A:middle
You can call
Safari.extension.set content

00:21:46.186 --> 00:21:48.526 A:middle
blocker from your
extensions global page

00:21:48.756 --> 00:21:51.386 A:middle
and pass it your
content blocker.

00:21:51.876 --> 00:21:55.176 A:middle
And the content blocker
can either be an object

00:21:55.516 --> 00:21:56.686 A:middle
or a JSON string.

00:21:56.876 --> 00:21:57.976 A:middle
This API accepts both.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:00.456 --> 00:22:02.456 A:middle
So that was an overview

00:22:02.456 --> 00:22:06.166 A:middle
of content blockers
for iOS and OS X.

00:22:06.166 --> 00:22:07.176 A:middle
And while we are talking

00:22:07.176 --> 00:22:09.996 A:middle
about traditional Safari
extensions we've made some

00:22:09.996 --> 00:22:11.976 A:middle
changes to the Safari
Extensions Gallery.

00:22:18.056 --> 00:22:20.516 A:middle
And so for anyone
who is not familiar

00:22:20.516 --> 00:22:23.386 A:middle
with the Safari Extensions
Gallery, it is the best place

00:22:23.386 --> 00:22:25.976 A:middle
for your users to find
your Safari extensions.

00:22:26.346 --> 00:22:28.966 A:middle
It is directly accessible
from Safari's menu

00:22:29.266 --> 00:22:31.496 A:middle
and from Safari's
extensions preferences

00:22:31.986 --> 00:22:33.546 A:middle
and it is the only place

00:22:33.546 --> 00:22:37.406 A:middle
that your users can install your
extensions with only one click.

00:22:38.616 --> 00:22:41.206 A:middle
If you're serious about
making Safari extensions,

00:22:41.346 --> 00:22:42.846 A:middle
you are already in the gallery.

00:22:43.106 --> 00:22:45.966 A:middle
Like I said before, it is the
easiest way for your users

00:22:46.176 --> 00:22:48.236 A:middle
to discover and install
your extensions.

00:22:48.916 --> 00:22:51.546 A:middle
To make things even more
secure for our users,

00:22:51.776 --> 00:22:53.536 A:middle
coming soon all extensions

00:22:53.536 --> 00:22:57.176 A:middle
in the gallery will be both
signed and hosted by Apple.

00:22:57.426 --> 00:22:59.716 A:middle
To take advantage of
this, all you have

00:22:59.776 --> 00:23:02.566 A:middle
to do is resubmit your
extensions to the gallery.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.776 --> 00:23:02.566 A:middle
to do is resubmit your
extensions to the gallery.

00:23:03.576 --> 00:23:06.066 A:middle
And another great
thing about this is

00:23:06.066 --> 00:23:09.076 A:middle
that once you've submitted
a version to the gallery,

00:23:09.436 --> 00:23:12.756 A:middle
if you submit an update your
users will get automatic updates

00:23:12.756 --> 00:23:14.426 A:middle
of your extension for free.

00:23:14.866 --> 00:23:17.266 A:middle
You don't have to write an
update manifest anymore.

00:23:18.236 --> 00:23:20.776 A:middle
But if you have a version
that is not in the gallery,

00:23:21.286 --> 00:23:25.196 A:middle
when you want your users to
update to your newest version

00:23:25.226 --> 00:23:28.486 A:middle
in the gallery, you
need to add a new flag

00:23:28.516 --> 00:23:31.926 A:middle
to your update manifest
saying that we,

00:23:31.926 --> 00:23:33.906 A:middle
Safari should update
your extension

00:23:34.096 --> 00:23:35.376 A:middle
to the version in the gallery.

00:23:35.786 --> 00:23:39.946 A:middle
Also coming soon, the automatic
updates will only be available

00:23:40.016 --> 00:23:42.916 A:middle
for extensions in the
Extensions Gallery.

00:23:43.456 --> 00:23:47.306 A:middle
So those were the changes to
the Safari Extensions Gallery.

00:23:47.666 --> 00:23:50.256 A:middle
I would like to move on to
the last topic of the session,

00:23:50.536 --> 00:23:52.056 A:middle
Shared Links app extensions.

00:23:55.136 --> 00:23:59.126 A:middle
Shared Links is a Safari feature
that shows up next to your list

00:23:59.126 --> 00:24:00.956 A:middle
of bookmarks and reading lists.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.126 --> 00:24:00.956 A:middle
of bookmarks and reading lists.

00:24:01.206 --> 00:24:02.926 A:middle
It contains a stream of links

00:24:03.336 --> 00:24:05.276 A:middle
from various sources
you are interested in.

00:24:05.976 --> 00:24:08.946 A:middle
Links will show up from
your Twitter, LinkedIn,

00:24:09.006 --> 00:24:10.836 A:middle
and Weibo accounts
automatically.

00:24:11.416 --> 00:24:14.786 A:middle
Additionally, in iOS 8
and Safari for Yosemite,

00:24:15.116 --> 00:24:17.736 A:middle
we added the ability
for users to subscribe

00:24:17.736 --> 00:24:21.156 A:middle
to their favorite websites'
RSS feeds to get them to show

00:24:21.156 --> 00:24:22.816 A:middle
up directly in Shared Links.

00:24:23.346 --> 00:24:26.236 A:middle
In this screen shot you can see
links from my Twitter account

00:24:26.516 --> 00:24:29.466 A:middle
and some websites I
subscribe to, interspersed.

00:24:29.946 --> 00:24:35.546 A:middle
In iOS 9 and Safari for OS X El
Capitan, we're adding a new way

00:24:35.546 --> 00:24:38.086 A:middle
for you to get your
content directly

00:24:38.086 --> 00:24:39.476 A:middle
into Safari's Shared Links,

00:24:39.846 --> 00:24:41.806 A:middle
and they are Shared
Links app extensions.

00:24:42.186 --> 00:24:43.926 A:middle
It's a new type of app extension

00:24:44.206 --> 00:24:47.736 A:middle
that has the same
API for iOS and OS X.

00:24:48.746 --> 00:24:51.996 A:middle
To get started you create
a new app extension just

00:24:51.996 --> 00:24:53.826 A:middle
like we talked about
for content blocking.

00:24:54.326 --> 00:24:58.666 A:middle
You create a new target, and
select Shared Links extension

00:24:58.846 --> 00:25:00.476 A:middle
on the platform you're
interested in.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.846 --> 00:25:00.476 A:middle
on the platform you're
interested in.

00:25:01.366 --> 00:25:06.126 A:middle
How an app extension works
on a high level is that,

00:25:06.336 --> 00:25:09.716 A:middle
your app extension is
called at the right time

00:25:09.896 --> 00:25:13.076 A:middle
and you return a list
of NSExtension items.

00:25:13.596 --> 00:25:15.706 A:middle
In the case of a Shared
Links app extension,

00:25:16.586 --> 00:25:19.246 A:middle
every NSExtension
item turns directly

00:25:19.296 --> 00:25:21.346 A:middle
into a Shared Links item.

00:25:21.666 --> 00:25:24.226 A:middle
We have a blank slate
of an NSExtension item

00:25:25.286 --> 00:25:27.816 A:middle
and we have the Shared Links
item we are trying to create.

00:25:27.936 --> 00:25:30.646 A:middle
I would like to take you
through the code to do this.

00:25:31.086 --> 00:25:34.806 A:middle
We start by defining some user
info on the NSExtension item,

00:25:35.266 --> 00:25:37.936 A:middle
and the first thing we
define is an identifier

00:25:37.986 --> 00:25:39.496 A:middle
for each NSExtension item.

00:25:39.936 --> 00:25:41.806 A:middle
No two NSExtension items

00:25:41.866 --> 00:25:45.136 A:middle
that your app extension returns
can have the same identifier.

00:25:46.166 --> 00:25:50.336 A:middle
Next we define the URL string
and this is just what's loaded

00:25:50.516 --> 00:25:53.696 A:middle
when the user selects your
Shared Links item in Safari.

00:25:54.136 --> 00:25:59.146 A:middle
Next, we define the published
date of the Shared Links item

00:25:59.486 --> 00:26:03.156 A:middle
and Safari uses the date of
each item to intersperse items


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:59.486 --> 00:26:03.156 A:middle
and Safari uses the date of
each item to intersperse items

00:26:03.156 --> 00:26:07.726 A:middle
from various sources inside
of your user Shared Links.

00:26:08.526 --> 00:26:12.866 A:middle
Lastly, you can define a display
name which shows up at the top

00:26:12.866 --> 00:26:13.926 A:middle
of the Shared Links item.

00:26:14.466 --> 00:26:15.726 A:middle
A couple notes.

00:26:16.046 --> 00:26:18.636 A:middle
Unique identifier
must be consistent

00:26:18.766 --> 00:26:21.676 A:middle
across multiple instantiations
of your extension.

00:26:22.096 --> 00:26:24.976 A:middle
So if your extension gets
called multiple times

00:26:24.976 --> 00:26:27.046 A:middle
and returns the same
Shared Links item,

00:26:27.466 --> 00:26:30.566 A:middle
the unique identifier needs
to be the same both times

00:26:31.076 --> 00:26:33.646 A:middle
and display name is
completely optional.

00:26:34.656 --> 00:26:37.986 A:middle
If it is not set, Safari will
just use the display name

00:26:38.196 --> 00:26:39.826 A:middle
of your Shared Links
app extension.

00:26:39.826 --> 00:26:44.476 A:middle
Next, we define the title
of the Shared Links item,

00:26:44.726 --> 00:26:48.626 A:middle
which is just the attributed the
title of the NSExtension item.

00:26:49.576 --> 00:26:53.046 A:middle
Then we define the description
text of the Shared Links item,

00:26:53.606 --> 00:26:55.836 A:middle
which is just the
attributed content text

00:26:55.836 --> 00:26:58.006 A:middle
of the NSExtension item.

00:26:58.006 --> 00:27:00.556 A:middle
Both of these will be
automatically ellipsized


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:58.006 --> 00:27:00.556 A:middle
Both of these will be
automatically ellipsized

00:27:00.556 --> 00:27:02.186 A:middle
for you if they are too long.

00:27:02.716 --> 00:27:05.976 A:middle
So that was all the text
of the Shared Links item.

00:27:06.286 --> 00:27:07.876 A:middle
What about the images
that we see?

00:27:08.096 --> 00:27:11.376 A:middle
The icon in the top left
corner is the first entry

00:27:11.376 --> 00:27:13.836 A:middle
in the NSExtension
items attachments array.

00:27:14.486 --> 00:27:17.926 A:middle
In this example I'm using an
image from my extensions bundle

00:27:18.086 --> 00:27:20.386 A:middle
but you could fetch an
image from the Web here.

00:27:20.786 --> 00:27:24.606 A:middle
And the icon in the top right
corner is just your apps icon.

00:27:24.956 --> 00:27:27.586 A:middle
So if you're returning
multiple Shared Links items

00:27:28.126 --> 00:27:30.016 A:middle
and with different
display names,

00:27:30.976 --> 00:27:35.296 A:middle
the icon in the top right corner
will provide your app's branding

00:27:35.996 --> 00:27:41.496 A:middle
and to let your users know that
this content is from your app.

00:27:41.496 --> 00:27:45.066 A:middle
A pro tip, if this is your first
time using NSExtension item,

00:27:45.466 --> 00:27:47.736 A:middle
all of the properties
on NSExtension item,

00:27:48.046 --> 00:27:50.666 A:middle
the attributed title, the
attributed content text

00:27:50.826 --> 00:27:54.536 A:middle
and attachment, must be set
after setting the user info.

00:27:55.616 --> 00:27:59.026 A:middle
That's all it takes to get your
content inside Shared Links.

00:27:59.026 --> 00:28:01.726 A:middle
I would like to bring Alex
back up to give another demo.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.026 --> 00:28:01.726 A:middle
I would like to bring Alex
back up to give another demo.

00:28:02.316 --> 00:28:02.826 A:middle
Alex?

00:28:03.516 --> 00:28:10.036 A:middle
[ Applause ]

00:28:10.536 --> 00:28:13.216 A:middle
&gt;&gt; ALEX CHRISTENSEN: All right.

00:28:13.726 --> 00:28:17.336 A:middle
I have some content that I want
to put in with the Shared Links.

00:28:17.536 --> 00:28:19.116 A:middle
I'm going to make a
Shared Links extension.

00:28:20.396 --> 00:28:21.696 A:middle
Let me show you what
I'm talking about first.

00:28:27.076 --> 00:28:27.446 A:middle
All right.

00:28:30.476 --> 00:28:34.166 A:middle
If we open up Safari, you
can see here in the side bar

00:28:34.956 --> 00:28:39.896 A:middle
that I have a bunch of
links from my Twitter feed.

00:28:40.546 --> 00:28:43.996 A:middle
This is where I want to
put my content for users

00:28:44.446 --> 00:28:45.786 A:middle
of my Shared Links extension.

00:28:46.826 --> 00:28:48.686 A:middle
So let's make a Shared
Links extension.

00:28:51.046 --> 00:28:51.926 A:middle
Open up Xcode.

00:28:53.446 --> 00:28:55.796 A:middle
Create a new project.

00:28:55.796 --> 00:28:58.296 A:middle
Let's make it for OS X, but you
can do the same thing for iOS.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:06.766 --> 00:29:08.386 A:middle
Put it on the desktop for now.

00:29:10.546 --> 00:29:15.936 A:middle
Okay. Now, from here we
go to file, new, target,

00:29:17.366 --> 00:29:22.726 A:middle
and under OS X application
extension we have the Shared

00:29:22.726 --> 00:29:24.896 A:middle
Links extension template
that Brian just showed you.

00:29:27.606 --> 00:29:28.376 A:middle
Let's go to next.

00:29:29.596 --> 00:29:33.596 A:middle
My Shared Links extension.

00:29:34.986 --> 00:29:35.636 A:middle
That's a good name.

00:29:37.006 --> 00:29:40.326 A:middle
Activate my extension scheme.

00:29:40.946 --> 00:29:42.316 A:middle
Yeah, let's activate
it, because we'll want

00:29:42.316 --> 00:29:44.766 A:middle
to run the extension
with Safari.

00:29:47.756 --> 00:29:50.636 A:middle
Now, that new target -- whoa --

00:29:50.636 --> 00:29:53.786 A:middle
made this My Shared
Links extension

00:29:54.796 --> 00:29:57.526 A:middle
and it put some template
Swift right here.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:00.226 --> 00:30:03.406 A:middle
And this Swift is
pretty straightforward.

00:30:04.306 --> 00:30:09.456 A:middle
It just creates an NSExtension
item, populates its user info,

00:30:10.516 --> 00:30:13.476 A:middle
gives it an attributed
title and some context text.

00:30:14.856 --> 00:30:16.316 A:middle
Content text, excuse me.

00:30:16.736 --> 00:30:21.516 A:middle
And it calls complete request
returning items with an array

00:30:21.516 --> 00:30:23.296 A:middle
of in this case one item.

00:30:25.346 --> 00:30:26.666 A:middle
Let's see what it does
right out of the box.

00:30:30.196 --> 00:30:31.766 A:middle
Let's run it with Safari.

00:30:36.056 --> 00:30:37.646 A:middle
We are debugging
this with Xcode.

00:30:37.806 --> 00:30:39.736 A:middle
Instruments wants to
know what's going on.

00:30:46.076 --> 00:30:47.416 A:middle
There we go.

00:30:47.416 --> 00:30:52.096 A:middle
Now, right here we
have something

00:30:52.096 --> 00:30:56.086 A:middle
from My Shared Links
extension and if I click on it,

00:30:57.316 --> 00:31:00.766 A:middle
then it takes me to
Apple.com, which is great.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:57.316 --> 00:31:00.766 A:middle
then it takes me to
Apple.com, which is great.

00:31:00.896 --> 00:31:02.416 A:middle
That's what the template
said to do.

00:31:03.296 --> 00:31:08.326 A:middle
Now, this is where I want
to put my content, though.

00:31:08.376 --> 00:31:13.926 A:middle
So I'm going to modify
this Swift a little bit.

00:31:18.166 --> 00:31:22.916 A:middle
And let me go through
with you what this does.

00:31:22.916 --> 00:31:23.866 A:middle
It's pretty straightforward,

00:31:24.076 --> 00:31:30.466 A:middle
it just sends an NSURL
request to my server.

00:31:31.396 --> 00:31:34.396 A:middle
HTTPS, make sure you use HTTPS,

00:31:34.396 --> 00:31:39.806 A:middle
cutepuppiesandcats.com
slash data.JSON.

00:31:39.806 --> 00:31:42.586 A:middle
Let me show you the data
that will be received

00:31:42.736 --> 00:31:43.846 A:middle
when this request is sent.

00:31:46.756 --> 00:31:50.506 A:middle
It is just a JSON API with
some links and some content

00:31:50.506 --> 00:31:53.336 A:middle
that I might want to put
into the Shared Links.

00:31:55.506 --> 00:32:00.796 A:middle
All right, so it will make
a request, get this JSON.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:55.506 --> 00:32:00.796 A:middle
All right, so it will make
a request, get this JSON.

00:32:01.656 --> 00:32:06.316 A:middle
It will parse that
JSON and for each value

00:32:06.316 --> 00:32:08.006 A:middle
in that parsed JSON array,

00:32:08.896 --> 00:32:11.856 A:middle
it will get some
strings out of there.

00:32:12.766 --> 00:32:16.056 A:middle
And it will populate
an NSExtension item

00:32:16.056 --> 00:32:19.146 A:middle
that it just made
with some things.

00:32:19.326 --> 00:32:25.396 A:middle
I used my URL as my unique
identifier because I know

00:32:25.396 --> 00:32:26.796 A:middle
that for my data
they are all unique.

00:32:27.416 --> 00:32:30.106 A:middle
If that's not true for
your data, then find a way

00:32:30.106 --> 00:32:32.476 A:middle
to get unique values
for each of these.

00:32:33.716 --> 00:32:43.026 A:middle
I have an icon that
I need to add.

00:32:43.796 --> 00:32:44.776 A:middle
There we go.

00:32:45.336 --> 00:32:47.206 A:middle
There's my puppy icon.

00:32:48.396 --> 00:32:49.556 A:middle
I put it in the wrong place.

00:32:51.126 --> 00:32:52.626 A:middle
Let's put it in this demo.

00:32:55.516 --> 00:32:57.276 A:middle
I need to add it.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:02.426 --> 00:33:03.606 A:middle
Adding puppy icon.

00:33:05.486 --> 00:33:09.616 A:middle
And I need to also
add it to this target,

00:33:10.116 --> 00:33:11.246 A:middle
My Shared Links extension,

00:33:11.246 --> 00:33:14.536 A:middle
so My Shared Links extension
has access to this icon.

00:33:17.356 --> 00:33:18.876 A:middle
And let's run this.

00:33:18.876 --> 00:33:19.836 A:middle
Let's see what it does.

00:33:24.426 --> 00:33:25.556 A:middle
Let's close Safari first.

00:33:29.296 --> 00:33:31.616 A:middle
There we go.

00:33:32.106 --> 00:33:33.966 A:middle
Let's run this and
see what it does.

00:33:36.466 --> 00:33:38.886 A:middle
Instruments still wants
to know what's going on.

00:33:45.046 --> 00:33:47.866 A:middle
And my content is
not showing up.

00:33:48.016 --> 00:33:48.976 A:middle
Let's see what went wrong.

00:33:49.956 --> 00:33:55.456 A:middle
If you see right here, we
have a bunch of errors.

00:33:55.456 --> 00:33:58.876 A:middle
If you open up the
console and look

00:33:58.876 --> 00:34:02.196 A:middle
at the sys log console
you'll see a bunch


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:58.876 --> 00:34:02.196 A:middle
at the sys log console
you'll see a bunch

00:34:04.066 --> 00:34:05.576 A:middle
of sandbox exceptions.

00:34:06.486 --> 00:34:09.966 A:middle
And that's because my
extension is sandboxed;

00:34:10.206 --> 00:34:12.226 A:middle
to keep users safe,

00:34:13.056 --> 00:34:15.436 A:middle
these extensions only have
access to what they need to.

00:34:15.585 --> 00:34:18.775 A:middle
This particular extension
right now does not have access

00:34:18.775 --> 00:34:19.235 A:middle
to the network.

00:34:19.735 --> 00:34:23.126 A:middle
So we are trying to
make an NSURL request,

00:34:23.126 --> 00:34:26.636 A:middle
we definitely need
access to the network.

00:34:26.636 --> 00:34:29.906 A:middle
So if I click on
the project here,

00:34:31.146 --> 00:34:37.005 A:middle
and then go to capabilities,
right here I need

00:34:37.005 --> 00:34:38.525 A:middle
to check outgoing connections

00:34:39.196 --> 00:34:44.376 A:middle
to let this extension have
the ability to be able to send

00:34:44.376 --> 00:34:46.835 A:middle
and initiate outgoing
connections

00:34:46.886 --> 00:34:49.136 A:middle
to get this JSON data.

00:34:51.996 --> 00:34:53.716 A:middle
All right.

00:34:54.476 --> 00:34:55.326 A:middle
Now, let's run it.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:08.296 --> 00:35:09.216 A:middle
There we go!

00:35:10.516 --> 00:35:14.306 A:middle
[ Applause ]

00:35:14.806 --> 00:35:16.206 A:middle
Right where we wanted it.

00:35:16.206 --> 00:35:20.446 A:middle
Now we have my content
and links to my content

00:35:20.816 --> 00:35:23.776 A:middle
so I can take users
to my website

00:35:24.116 --> 00:35:26.096 A:middle
from the Safari Shared Links.

00:35:27.396 --> 00:35:29.016 A:middle
So if you have some
content that you want to put

00:35:29.016 --> 00:35:32.686 A:middle
in the Safari Shared Links, try
making a Shared Links extension.

00:35:32.686 --> 00:35:34.766 A:middle
All right, back to you, Brian!

00:35:35.516 --> 00:35:44.196 A:middle
[ Applause ]

00:35:44.696 --> 00:35:45.566 A:middle
&gt;&gt; BRIAN WEINSTEIN:
Thanks, Alex,

00:35:45.566 --> 00:35:47.606 A:middle
for showing us just
how easy it is

00:35:47.796 --> 00:35:51.076 A:middle
to help your users discover
your content using Shared Links

00:35:51.076 --> 00:35:51.776 A:middle
app extensions.

00:35:52.686 --> 00:35:54.286 A:middle
So what have we talked
about today?

00:35:54.836 --> 00:35:56.396 A:middle
We've unleashed the
ability for you

00:35:56.396 --> 00:35:58.126 A:middle
to write content
blockers for iOS.

00:35:58.816 --> 00:36:00.976 A:middle
If you have a content
blocker on the Mac,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:58.816 --> 00:36:00.976 A:middle
If you have a content
blocker on the Mac,

00:36:01.316 --> 00:36:03.106 A:middle
you should definitely
adopt this new API.

00:36:03.106 --> 00:36:05.756 A:middle
It will give your
users a much faster

00:36:05.956 --> 00:36:08.266 A:middle
and more memory efficient
browsing experience.

00:36:08.906 --> 00:36:12.906 A:middle
And if you have an extension in
the Safari Extensions Gallery,

00:36:13.146 --> 00:36:16.286 A:middle
please submit it again so
your new version can be signed

00:36:16.286 --> 00:36:17.426 A:middle
and hosted by Apple.

00:36:17.886 --> 00:36:19.336 A:middle
If you don't have
an extension there,

00:36:19.566 --> 00:36:21.056 A:middle
this is a great time to start.

00:36:21.746 --> 00:36:24.596 A:middle
Lastly, if you have a set
of links that makes sense

00:36:24.636 --> 00:36:28.006 A:middle
in Shared Links, you now have
the power to put them directly

00:36:28.006 --> 00:36:30.726 A:middle
into Safari where your
users can discover them

00:36:30.726 --> 00:36:32.076 A:middle
and go back to your website.

00:36:32.456 --> 00:36:37.126 A:middle
If you have any more
questions, contact John Davis,

00:36:37.126 --> 00:36:41.706 A:middle
the Web technologies
evangelist and coming soon,

00:36:41.706 --> 00:36:45.056 A:middle
we will have a blog
post detailing all

00:36:45.056 --> 00:36:48.856 A:middle
of the capabilities of
content blocking for Safari

00:36:49.186 --> 00:36:51.136 A:middle
on the WebKit.org blog.

00:36:51.506 --> 00:36:55.416 A:middle
Feel free to contact us on
the Apple developer forums.

00:36:56.626 --> 00:36:59.876 A:middle
Related sessions,
if you have an app

00:36:59.916 --> 00:37:01.796 A:middle
that displays Web content check


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:59.916 --> 00:37:01.796 A:middle
that displays Web content check

00:37:01.796 --> 00:37:04.256 A:middle
out the talk Introducing
Safari View Controller.

00:37:04.256 --> 00:37:07.146 A:middle
As you saw, we used
Web inspector

00:37:07.146 --> 00:37:09.636 A:middle
to help create content blockers.

00:37:09.636 --> 00:37:11.416 A:middle
For more information
about Web inspector,

00:37:11.706 --> 00:37:14.246 A:middle
check out Using Safari
to Deliver

00:37:14.246 --> 00:37:18.686 A:middle
and Debug a Responsive Web
Design, and I will be --

00:37:18.686 --> 00:37:22.296 A:middle
Alex and I will be in Media
Lab A directly after this.

00:37:22.566 --> 00:37:24.286 A:middle
Come find us if you
have any questions.

00:37:25.576 --> 00:37:26.036 A:middle
Thank you!

00:37:26.036 --> 00:37:26.976 A:middle
Enjoy the rest of your Friday.

00:37:27.516 --> 00:37:30.500 A:middle
[ Applause ]

