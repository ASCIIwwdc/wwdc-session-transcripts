WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:24.516 --> 00:00:29.896 A:middle
[ Applause ]

00:00:30.396 --> 00:00:31.506 A:middle
&gt;&gt; SARA RADI: Good
afternoon, everyone!

00:00:31.506 --> 00:00:33.296 A:middle
Welcome to the new UIKit support

00:00:33.296 --> 00:00:35.506 A:middle
for international user
interfaces session,

00:00:35.566 --> 00:00:38.616 A:middle
my name is Sara Radi I'm a
international utilization

00:00:38.616 --> 00:00:41.276 A:middle
software engineer, and
I'm one of those people

00:00:41.276 --> 00:00:43.316 A:middle
who would really love
to use your amazing app

00:00:43.316 --> 00:00:47.046 A:middle
in my native language, but
I just can't find great apps

00:00:47.046 --> 00:00:48.536 A:middle
in the App Store localized.

00:00:49.356 --> 00:00:53.506 A:middle
My native language is Arabic.

00:00:53.506 --> 00:00:55.426 A:middle
And I grew up in a country,

00:00:55.426 --> 00:00:57.166 A:middle
where we didn't write
right from right to left.

00:00:57.886 --> 00:01:01.436 A:middle
And before Smart Phones became
so popular, we didn't have


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:57.886 --> 00:01:01.436 A:middle
And before Smart Phones became
so popular, we didn't have

00:01:01.496 --> 00:01:03.486 A:middle
to think about layout
in right to left.

00:01:03.936 --> 00:01:07.626 A:middle
So basically just
supporting the text rendering

00:01:07.936 --> 00:01:09.366 A:middle
and the font was enough.

00:01:10.196 --> 00:01:13.606 A:middle
However, today, with all of
these electronic devices,

00:01:14.026 --> 00:01:16.026 A:middle
people are using
more and more eBooks,

00:01:16.476 --> 00:01:19.106 A:middle
and they are interacting more
and more with their devices.

00:01:19.856 --> 00:01:23.276 A:middle
So supporting just the text
in your apps is not enough

00:01:23.446 --> 00:01:26.716 A:middle
and it becomes very important
to think about the layout

00:01:27.076 --> 00:01:30.706 A:middle
and the flow of your app when
supporting these localizations.

00:01:31.296 --> 00:01:36.886 A:middle
And just like me, there are
a million of users who wants

00:01:36.886 --> 00:01:38.846 A:middle
to use their apps in
their native language.

00:01:39.716 --> 00:01:43.376 A:middle
This is a huge opportunity
for you to grow your markets

00:01:43.376 --> 00:01:44.726 A:middle
in these areas of the world.

00:01:45.306 --> 00:01:49.676 A:middle
This is an example of an
Apple ad in Dubai in one

00:01:49.676 --> 00:01:51.876 A:middle
of the largest buildings
in the world,

00:01:52.406 --> 00:01:54.136 A:middle
and this gives you an idea

00:01:54.136 --> 00:01:56.726 A:middle
of Apple's presence
in the Middle East.

00:01:58.116 --> 00:02:00.586 A:middle
So what are we going
to talk about today?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.116 --> 00:02:00.586 A:middle
So what are we going
to talk about today?

00:02:01.056 --> 00:02:07.366 A:middle
So mainly we are going
to focus -- I'm sorry.

00:02:07.366 --> 00:02:09.336 A:middle
Mainly we are going to focus

00:02:09.336 --> 00:02:11.946 A:middle
on right-to-left user
interface challenges,

00:02:11.946 --> 00:02:15.616 A:middle
and then we are going to
introduce the new UIKit support.

00:02:16.366 --> 00:02:18.226 A:middle
We added the native
UIKit support

00:02:18.226 --> 00:02:21.066 A:middle
for right-to-left languages so
we made it seize easy for you

00:02:21.066 --> 00:02:24.186 A:middle
to support right-to-left
with no effort.

00:02:24.186 --> 00:02:27.256 A:middle
And then we are going to
talk about your custom layout

00:02:27.256 --> 00:02:29.666 A:middle
and how can you add
right-to-left support

00:02:29.666 --> 00:02:32.896 A:middle
in your custom layout with auto
layout, and then we are going

00:02:32.896 --> 00:02:37.996 A:middle
to introduce new APIs that we
just added on iOS 9 and talk

00:02:37.996 --> 00:02:40.796 A:middle
about exception cases
and hopefully by the end

00:02:40.796 --> 00:02:44.886 A:middle
of the session, I want to see
more apps localized in Arabic

00:02:44.886 --> 00:02:46.466 A:middle
in the App Store, and Hebrew.

00:02:46.466 --> 00:02:47.016 A:middle
I'm sorry.

00:02:47.016 --> 00:02:51.686 A:middle
So let's get started
with an overview.

00:02:52.536 --> 00:02:55.546 A:middle
So when you are designing your
app in left-to-right languages

00:02:56.046 --> 00:02:59.106 A:middle
or in English, for
example, you always start

00:02:59.646 --> 00:03:02.836 A:middle
by placing the most
important elements


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.646 --> 00:03:02.836 A:middle
by placing the most
important elements

00:03:02.836 --> 00:03:04.346 A:middle
on the left side of the screen.

00:03:05.106 --> 00:03:07.066 A:middle
And then you if have,
like other elements,

00:03:07.176 --> 00:03:09.186 A:middle
so they would flow
naturally left to right.

00:03:09.496 --> 00:03:11.056 A:middle
And the reason why we do that,

00:03:11.056 --> 00:03:14.246 A:middle
is because the layout itself it
starts to, [follow] the reading

00:03:14.246 --> 00:03:16.176 A:middle
and the writing direction
of the script.

00:03:16.646 --> 00:03:20.076 A:middle
So it makes total sense if you
are designing your app in right

00:03:20.076 --> 00:03:23.786 A:middle
to left, to flip the layout and
this is because the scripts read

00:03:23.786 --> 00:03:25.046 A:middle
and write from right to left.

00:03:25.556 --> 00:03:30.936 A:middle
And the UI mirroring
concept does not only apply

00:03:30.936 --> 00:03:32.076 A:middle
to static UI.

00:03:32.266 --> 00:03:34.056 A:middle
It also applies to dynamic UI.

00:03:34.706 --> 00:03:36.136 A:middle
For example, in your app,

00:03:36.136 --> 00:03:39.196 A:middle
if you have navigation
gestures and animations.

00:03:39.486 --> 00:03:42.116 A:middle
For example, so here the
back button is always

00:03:42.176 --> 00:03:43.726 A:middle
on the left side of the screen.

00:03:44.076 --> 00:03:44.996 A:middle
So when writing

00:03:44.996 --> 00:03:47.886 A:middle
in a right-to-left environment
not only the back button should

00:03:47.886 --> 00:03:50.336 A:middle
be on the right side,
but also the gesture

00:03:50.336 --> 00:03:52.746 A:middle
and the animation
that comes with it.

00:03:54.896 --> 00:03:56.666 A:middle
So what's new in UIKit.

00:03:57.876 --> 00:04:02.256 A:middle
So on iOS 9 UIKit sender
controls fully support user


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:57.876 --> 00:04:02.256 A:middle
So on iOS 9 UIKit sender
controls fully support user

00:04:02.256 --> 00:04:03.426 A:middle
interface mirroring.

00:04:03.576 --> 00:04:05.426 A:middle
Which means when
your apps are running

00:04:05.546 --> 00:04:08.676 A:middle
in right-to-left localizations
they will flip automatically

00:04:08.676 --> 00:04:09.096 A:middle
for you.

00:04:09.316 --> 00:04:13.236 A:middle
Also the whole system and all
our native apps fully support

00:04:13.236 --> 00:04:16.606 A:middle
right-to-left UI so your
apps should be consistent.

00:04:17.755 --> 00:04:20.106 A:middle
So let's go through
some standard controls

00:04:20.366 --> 00:04:21.435 A:middle
in our native apps.

00:04:22.176 --> 00:04:24.276 A:middle
Let's start with UI table view.

00:04:25.476 --> 00:04:28.266 A:middle
So this is an example
from the Settings app,

00:04:28.336 --> 00:04:31.166 A:middle
where we are using a
stock UI table view.

00:04:31.376 --> 00:04:34.586 A:middle
As you can see here we are
running the device in English,

00:04:34.586 --> 00:04:37.666 A:middle
so the icons are on the
left side of the screen,

00:04:37.846 --> 00:04:41.146 A:middle
the labels are left aligned, and
the table view accessories are

00:04:41.146 --> 00:04:44.286 A:middle
on the right side, so
changing my language to Hebrew,

00:04:44.286 --> 00:04:48.706 A:middle
for example, will flip the table
view cells automatically for me

00:04:49.016 --> 00:04:51.496 A:middle
so all of the icons now
are on the right side.

00:04:51.746 --> 00:04:55.566 A:middle
The text labels are right
aligned on left of the icons,

00:04:55.566 --> 00:04:59.466 A:middle
and the table accessories
are on the left side.

00:04:59.676 --> 00:05:01.376 A:middle
Next navigation controller.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.676 --> 00:05:01.376 A:middle
Next navigation controller.

00:05:01.376 --> 00:05:04.096 A:middle
And this is an example
from the phone app

00:05:04.376 --> 00:05:07.266 A:middle
where you can see the back
button now is on the right side

00:05:07.266 --> 00:05:09.666 A:middle
of the screen and also
the navigation gesture

00:05:09.666 --> 00:05:12.166 A:middle
and animation comes from the
right edge of the screen.

00:05:12.496 --> 00:05:15.176 A:middle
If you look closely,
also the UI table,

00:05:15.346 --> 00:05:18.196 A:middle
the UI tab at the
bottom also flips

00:05:18.366 --> 00:05:20.226 A:middle
so now favorite is
on the right side.

00:05:20.926 --> 00:05:25.336 A:middle
Next, tracking gestures,
this is another example

00:05:25.396 --> 00:05:29.666 A:middle
of a UI table view in the clock
app where you can see the slide,

00:05:29.976 --> 00:05:32.046 A:middle
the swipe to the lead
gesture is coming

00:05:32.046 --> 00:05:33.486 A:middle
from the left edge
of the screen.

00:05:34.426 --> 00:05:37.476 A:middle
If you use a stock UI table
view and enable the swipe

00:05:37.476 --> 00:05:39.156 A:middle
to the lead gesture --
that comes for free.

00:05:39.906 --> 00:05:43.946 A:middle
So, how can you enable
right-to-left support

00:05:43.946 --> 00:05:44.476 A:middle
in your apps?

00:05:44.996 --> 00:05:47.536 A:middle
If you already have this
localizations in your app,

00:05:48.026 --> 00:05:50.656 A:middle
all you need to do
is link against iOS 9

00:05:51.036 --> 00:05:52.696 A:middle
and test your apps, make sure

00:05:52.696 --> 00:05:55.266 A:middle
that your custom layout
works as expected.

00:05:56.946 --> 00:05:59.526 A:middle
However, if you are
adding this localizations

00:05:59.526 --> 00:06:01.516 A:middle
for the first time,
so we recommend


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.526 --> 00:06:01.516 A:middle
for the first time,
so we recommend

00:06:01.516 --> 00:06:04.866 A:middle
that you move your
storyboards to base approach

00:06:04.866 --> 00:06:08.216 A:middle
with auto layout and when
you add the localizations,

00:06:08.396 --> 00:06:12.456 A:middle
XCode with create basically
strings fast for you

00:06:12.566 --> 00:06:15.236 A:middle
so you can export them,
send them to translations.

00:06:15.426 --> 00:06:18.836 A:middle
When you get them back, you
can import them via XCode again

00:06:19.256 --> 00:06:22.426 A:middle
and when you run your app
at run time, you will see

00:06:22.426 --> 00:06:25.816 A:middle
that your translation is
integrated automatically as well

00:06:25.816 --> 00:06:27.726 A:middle
as your layout is flipped.

00:06:28.936 --> 00:06:31.046 A:middle
So now let's talk about testing.

00:06:31.626 --> 00:06:36.716 A:middle
So XCode makes it so easy for
you to test right-to-left layout

00:06:36.716 --> 00:06:39.006 A:middle
without even having
the localizations

00:06:39.006 --> 00:06:40.666 A:middle
or integrating the translations.

00:06:41.066 --> 00:06:42.816 A:middle
So if you go to XCode scheme

00:06:43.086 --> 00:06:46.236 A:middle
and you change your application
language from system language

00:06:46.236 --> 00:06:48.166 A:middle
to right-to-left to do language,

00:06:48.166 --> 00:06:50.506 A:middle
that will simulate a
right-to-left environment

00:06:50.506 --> 00:06:53.466 A:middle
for you and you will have
an idea if your app is ready

00:06:53.586 --> 00:06:55.816 A:middle
to ship or not with
right to left.

00:06:56.436 --> 00:06:59.096 A:middle
And to show you, all what
we just talked about now.

00:06:59.096 --> 00:07:01.736 A:middle
I am going to call my
colleague Aaltan Ahmad


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:59.096 --> 00:07:01.736 A:middle
I am going to call my
colleague Aaltan Ahmad

00:07:01.736 --> 00:07:03.056 A:middle
on stage to give you a demo.

00:07:15.506 --> 00:07:17.296 A:middle
&gt;&gt; AALTAN AHMAD:
Great, thank you, Sara.

00:07:17.456 --> 00:07:23.296 A:middle
I am going to show you an
example of an app that I wrote,

00:07:23.406 --> 00:07:26.106 A:middle
a simple recipes app
that I wrote that I want

00:07:26.106 --> 00:07:28.526 A:middle
to add a right-to-left
localization for

00:07:28.526 --> 00:07:30.556 A:middle
and I will show you
how easy that can be

00:07:31.216 --> 00:07:34.196 A:middle
with the new stuff we
have added to iOS 9.

00:07:34.286 --> 00:07:35.406 A:middle
Here is the app.

00:07:35.406 --> 00:07:37.436 A:middle
It's pretty straight forward.

00:07:37.506 --> 00:07:39.986 A:middle
There is a table view,
a tab bar at the bottom.

00:07:40.596 --> 00:07:43.136 A:middle
If we tap one of the
cells we get taken

00:07:43.136 --> 00:07:44.746 A:middle
to the details view
for the recipe.

00:07:45.026 --> 00:07:47.566 A:middle
Here we have some custom
labels and stuff like that laid

00:07:47.566 --> 00:07:51.046 A:middle
out using auto layout
and a collection view

00:07:51.046 --> 00:07:54.756 A:middle
to show off some pictures of
the recipe that the user is

00:07:54.756 --> 00:07:56.326 A:middle
about to make hopefully.

00:07:57.896 --> 00:08:04.546 A:middle
So now that we are ready to add
a right-to-left localization


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:57.896 --> 00:08:04.546 A:middle
So now that we are ready to add
a right-to-left localization

00:08:04.546 --> 00:08:06.926 A:middle
to our app we actually want to
see what it looks like first,

00:08:06.926 --> 00:08:10.046 A:middle
before even integrating any of
the translations, or doing any

00:08:10.046 --> 00:08:12.056 A:middle
of that work, we want to
see what our app looks

00:08:12.056 --> 00:08:14.006 A:middle
like with the new
changes we have added.

00:08:14.816 --> 00:08:17.866 A:middle
To do that as Sara mentioned I
will go to the edit screen menu

00:08:17.986 --> 00:08:22.766 A:middle
in XCode and from the
application language drop-down,

00:08:22.806 --> 00:08:25.236 A:middle
will select right-to-left
pseudolanguage.

00:08:25.876 --> 00:08:29.496 A:middle
This basically has the effect
of bringing in those UI changes

00:08:29.496 --> 00:08:31.206 A:middle
without loading any
of the translations.

00:08:31.656 --> 00:08:33.836 A:middle
And it has the added bonus

00:08:33.836 --> 00:08:36.716 A:middle
of if I'm not a native
right-to-left language speaker I

00:08:36.716 --> 00:08:39.706 A:middle
can see my app in English
with the right-to-left UI

00:08:39.706 --> 00:08:41.806 A:middle
and not need to learn
those languages

00:08:41.806 --> 00:08:45.486 A:middle
or have a native review
before I do any translations.

00:08:45.866 --> 00:08:50.526 A:middle
So I'm going to close that
and I will run the app again.

00:08:51.376 --> 00:08:51.786 A:middle
That's it.

00:08:51.786 --> 00:08:56.056 A:middle
So without writing a single line
of code, I have introduced all

00:08:56.056 --> 00:08:57.566 A:middle
of these changes into
my app and I can see

00:08:57.566 --> 00:08:58.886 A:middle
that things look great.

00:08:59.376 --> 00:09:04.096 A:middle
So let's go through our app
and see what changes we got.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.376 --> 00:09:04.096 A:middle
So let's go through our app
and see what changes we got.

00:09:04.096 --> 00:09:07.006 A:middle
So because I was using a
standard table view cell type,

00:09:07.736 --> 00:09:11.116 A:middle
I, the text label is
over on the right side.

00:09:11.706 --> 00:09:14.506 A:middle
The Chevron is on the left
side and points to the left.

00:09:14.956 --> 00:09:16.706 A:middle
Even the tab bar at
the bottom is flipped.

00:09:16.706 --> 00:09:19.846 A:middle
So the first tab is now
on the right-most side

00:09:19.986 --> 00:09:21.496 A:middle
as a right-to-left
user would expect.

00:09:22.186 --> 00:09:26.056 A:middle
If you look at the navigation
bar, the navigation button

00:09:26.056 --> 00:09:27.766 A:middle
that was on the right side
is it now flipped over.

00:09:27.766 --> 00:09:29.896 A:middle
And if I tap on one
of the cells,

00:09:30.266 --> 00:09:32.226 A:middle
I can see that because
I was using auto layout,

00:09:32.226 --> 00:09:33.666 A:middle
with leading-to-trailing
constraints,

00:09:33.976 --> 00:09:37.136 A:middle
that entire UI is flipped
along with the text alignments.

00:09:37.806 --> 00:09:40.946 A:middle
The cool thing here to notice
is that the collection view --

00:09:40.946 --> 00:09:42.726 A:middle
because I was using a
stock collection view

00:09:42.726 --> 00:09:46.156 A:middle
with the default collection view
flow layout -- has also flipped.

00:09:46.156 --> 00:09:48.506 A:middle
So the first picture is
now on the right side

00:09:48.506 --> 00:09:52.706 A:middle
and the subsequent items
follow to the left.

00:09:53.136 --> 00:09:55.846 A:middle
As Sara pointed out, the
navigation is also reversed.

00:09:55.846 --> 00:09:59.096 A:middle
If I click this back button,
you can see it takes me,

00:09:59.416 --> 00:10:01.826 A:middle
the navigation comes over from
the right edge, and in fact,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.416 --> 00:10:01.826 A:middle
the navigation comes over from
the right edge, and in fact,

00:10:02.206 --> 00:10:05.166 A:middle
if we try to swipe, we
see the same effect.

00:10:06.036 --> 00:10:06.916 A:middle
So, great.

00:10:06.916 --> 00:10:10.036 A:middle
I have checked out my app with
these new right-to-left changes

00:10:10.036 --> 00:10:12.026 A:middle
and I have seen it looks
great and I'm ready

00:10:12.026 --> 00:10:13.276 A:middle
to add the translations.

00:10:13.596 --> 00:10:15.316 A:middle
So let's add the translations

00:10:15.316 --> 00:10:17.386 A:middle
and see what the
process looks like.

00:10:17.386 --> 00:10:20.316 A:middle
So, I am going to
select my project,

00:10:20.316 --> 00:10:23.516 A:middle
in the project navigator, I
will head to the editor men,

00:10:23.516 --> 00:10:26.456 A:middle
and here you can see there
is a few localization-related

00:10:26.456 --> 00:10:29.176 A:middle
options, so I will go
to add localization

00:10:29.426 --> 00:10:30.496 A:middle
and I will pick Arabic.

00:10:31.606 --> 00:10:36.276 A:middle
So XCode presents me with a
dialogue and it does its thing.

00:10:36.276 --> 00:10:40.156 A:middle
This basically creates the
localizable resource files

00:10:40.156 --> 00:10:42.646 A:middle
that I need to have translated.

00:10:43.606 --> 00:10:47.796 A:middle
The next step is to
actually export the strings

00:10:47.796 --> 00:10:50.416 A:middle
from my project, so we go
back to the editor menu

00:10:50.416 --> 00:10:51.926 A:middle
and hit export for localization.

00:10:52.356 --> 00:10:54.206 A:middle
XCode asks me where
I want to do that.

00:10:54.206 --> 00:10:57.346 A:middle
I select the desk
top, and hit save.

00:10:58.196 --> 00:11:01.976 A:middle
XCode has now taken the all of
the strings from my project,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.196 --> 00:11:01.976 A:middle
XCode has now taken the all of
the strings from my project,

00:11:02.306 --> 00:11:04.196 A:middle
packaged them up
into an XLIFF file

00:11:04.236 --> 00:11:07.376 A:middle
which is a common file format
for software translations,

00:11:07.656 --> 00:11:09.036 A:middle
and put that file on my desktop.

00:11:09.666 --> 00:11:14.236 A:middle
I can take that file and send
it to a translator, who will go

00:11:14.356 --> 00:11:16.716 A:middle
and make the correct
translations for me

00:11:16.716 --> 00:11:18.896 A:middle
and send me back a
translated XLIFF file.

00:11:20.046 --> 00:11:24.406 A:middle
So very sweet, the
translator, they do the work.

00:11:25.726 --> 00:11:27.246 A:middle
I'm ready to import
the localizations,

00:11:27.246 --> 00:11:29.886 A:middle
I go back to editor,
import localizations,

00:11:30.866 --> 00:11:34.286 A:middle
go to my translated XLIFF
folder, and here is my Arabic

00:11:34.286 --> 00:11:37.566 A:middle
or XLIFF with the
translations, hit Enter.

00:11:38.616 --> 00:11:42.776 A:middle
XCode goes and takes all
of those translations

00:11:42.776 --> 00:11:44.126 A:middle
and integrates them
into my project.

00:11:45.136 --> 00:11:49.806 A:middle
And now we have both the UI, and
the translations ready to go.

00:11:51.096 --> 00:11:55.006 A:middle
So final step, I'm going to go
back to the edit scheme menu,

00:11:55.006 --> 00:11:56.836 A:middle
and this time instead

00:11:56.836 --> 00:11:59.866 A:middle
of right-to-left pseudolanguage
I will select Arabic,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:00.176 --> 00:12:02.136 A:middle
which shows up because I
wrote the localization.

00:12:04.616 --> 00:12:10.786 A:middle
Close. Run the app again.

00:12:10.946 --> 00:12:11.656 A:middle
So there you have it.

00:12:12.006 --> 00:12:13.906 A:middle
Now, I have my translated
strings,

00:12:13.906 --> 00:12:16.346 A:middle
my navigation controller
title is translated.

00:12:16.746 --> 00:12:20.516 A:middle
My tab bar items are also
translated into Arabic

00:12:20.516 --> 00:12:23.276 A:middle
as the user would
expect, and I'm able

00:12:23.276 --> 00:12:27.526 A:middle
to offer a complete
right-to-left user experience

00:12:27.526 --> 00:12:29.166 A:middle
for my Arabic-speaking
customers,

00:12:29.506 --> 00:12:31.306 A:middle
and in fact the bonus
item here is

00:12:31.306 --> 00:12:35.116 A:middle
because I was using date
component formatters

00:12:35.646 --> 00:12:38.976 A:middle
to format my prep time
and cook time durations,

00:12:39.146 --> 00:12:42.406 A:middle
I actually get localized
versions of those as well.

00:12:42.406 --> 00:12:46.236 A:middle
So shameless plug for using
number and date formatters.

00:12:46.696 --> 00:12:48.626 A:middle
And that's it.

00:12:48.626 --> 00:12:50.716 A:middle
That's how easy it can
be to bring your app,

00:12:50.716 --> 00:12:53.736 A:middle
your existing right-to-left--
, existing left-to-right apps

00:12:53.796 --> 00:12:55.196 A:middle
over to right-to-left.

00:12:55.326 --> 00:12:56.456 A:middle
To talk to you a little bit more

00:12:56.456 --> 00:12:58.936 A:middle
about how you can bring
your custom UI over,

00:12:59.296 --> 00:13:00.546 A:middle
I will hand it over to Paul.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.296 --> 00:13:00.546 A:middle
I will hand it over to Paul.

00:13:01.516 --> 00:13:10.586 A:middle
[ Applause ]

00:13:11.086 --> 00:13:13.556 A:middle
&gt;&gt; PAUL BOROKHOV: So as you
just saw from Sara and Aaltan,

00:13:13.556 --> 00:13:17.086 A:middle
if you are using stock UIKit
controls it is very easy for you

00:13:17.086 --> 00:13:18.866 A:middle
to add a right-to-left
localization

00:13:18.866 --> 00:13:19.616 A:middle
to your application.

00:13:19.966 --> 00:13:22.546 A:middle
But what if you have something
a little bit more complex?

00:13:23.426 --> 00:13:26.616 A:middle
First, before we jump in, I just
want to go over some API changes

00:13:26.616 --> 00:13:29.176 A:middle
that we have made, if you
are customizing UI controls,

00:13:29.456 --> 00:13:30.666 A:middle
that make it easier for you

00:13:30.666 --> 00:13:32.136 A:middle
to support right-to-left
localizations.

00:13:32.746 --> 00:13:36.216 A:middle
If you are using UI text
fields, left view, right view,

00:13:36.316 --> 00:13:38.896 A:middle
left view mode and left view
mode are automatically mirrored

00:13:38.896 --> 00:13:40.886 A:middle
for you in right to left, so you
don't need to do anything else.

00:13:41.316 --> 00:13:44.056 A:middle
The only thing to be aware of
is that rect for bounds methods,

00:13:44.056 --> 00:13:44.966 A:middle
they'll stay unchanged.

00:13:46.576 --> 00:13:49.266 A:middle
For table views if you are
setting separatorInsets,

00:13:49.616 --> 00:13:51.666 A:middle
the left and right measurements
will automatically be flipped

00:13:51.666 --> 00:13:53.906 A:middle
for you, with no
additional work on your part.

00:13:55.316 --> 00:13:58.156 A:middle
If you are using a
slider, the minimum

00:13:58.156 --> 00:14:00.766 A:middle
and maximum value images are
automatically flipped for you,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.156 --> 00:14:00.766 A:middle
and maximum value images are
automatically flipped for you,

00:14:00.766 --> 00:14:02.216 A:middle
because in a right-to-left
context,

00:14:02.216 --> 00:14:03.806 A:middle
the minimum of a
slider is on the right.

00:14:04.946 --> 00:14:07.946 A:middle
The only thing you need to
be aware of is that the rect

00:14:07.946 --> 00:14:09.906 A:middle
for bounds methods,
while they are flipped,

00:14:10.016 --> 00:14:13.086 A:middle
if you are customizing
the offsets on the x-axis,

00:14:13.086 --> 00:14:15.506 A:middle
you'll need to make sure
those are properly accounting

00:14:15.506 --> 00:14:17.926 A:middle
for right to left, if you
are running in that context.

00:14:18.806 --> 00:14:21.666 A:middle
And finally for a navigation
bar like you saw in the demo,

00:14:22.326 --> 00:14:25.866 A:middle
we are flipping left bar button
items and right bar button items

00:14:25.866 --> 00:14:29.586 A:middle
for you automatically, but if
you are adding subviews outside

00:14:29.586 --> 00:14:31.696 A:middle
of those APIs, you
will want to make sure

00:14:31.696 --> 00:14:33.016 A:middle
that those are properly
positioned,

00:14:33.016 --> 00:14:35.766 A:middle
as otherwise you are going
to have overlapping content.

00:14:36.576 --> 00:14:40.046 A:middle
So let's talk about some
different types of custom UI

00:14:40.046 --> 00:14:41.496 A:middle
that you might have on
your application and how

00:14:41.496 --> 00:14:42.446 A:middle
to handle those correctly.

00:14:42.966 --> 00:14:45.286 A:middle
So like you saw earlier,
standard cell types will flip

00:14:45.286 --> 00:14:47.246 A:middle
for you automatically with
no additional work needed.

00:14:47.856 --> 00:14:49.946 A:middle
What that means is that,
if you have custom layouts,

00:14:50.016 --> 00:14:51.746 A:middle
you will want to make sure
those are flipped as well,

00:14:52.096 --> 00:14:53.786 A:middle
to be consistent with
the rest of the OS,

00:14:54.096 --> 00:14:56.456 A:middle
as well as potentially,
other table view cell types

00:14:56.456 --> 00:14:57.496 A:middle
in your own application.

00:14:57.956 --> 00:15:01.326 A:middle
You can of course do this by
simply mirroring the frames


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:57.956 --> 00:15:01.326 A:middle
You can of course do this by
simply mirroring the frames

00:15:01.416 --> 00:15:04.086 A:middle
in your layout, but the
recommendation that we give is

00:15:04.086 --> 00:15:05.736 A:middle
that you simply use
auto layout with leading

00:15:05.736 --> 00:15:08.386 A:middle
and trailing constraints because
this requires no additional work

00:15:08.386 --> 00:15:11.066 A:middle
on your part, and you can
have the exact same interface

00:15:11.066 --> 00:15:14.066 A:middle
and code handling both left
to right and right to left.

00:15:14.836 --> 00:15:17.056 A:middle
The story is quite similar
for collection views.

00:15:17.476 --> 00:15:18.626 A:middle
So, like we saw in the demo,

00:15:18.626 --> 00:15:21.166 A:middle
collection vew flow layout
automatically supports right

00:15:21.166 --> 00:15:23.026 A:middle
to left and just
reorders the items

00:15:23.026 --> 00:15:24.046 A:middle
to flow from right to left.

00:15:24.776 --> 00:15:25.586 A:middle
What that means if that

00:15:25.586 --> 00:15:28.206 A:middle
if you are doing a custom
collection view layout you will

00:15:28.206 --> 00:15:30.926 A:middle
want to make sure it's properly
flipped on the x-axis as well.

00:15:31.596 --> 00:15:34.956 A:middle
Generally, what we recommend
today is you subclass collection

00:15:34.956 --> 00:15:36.106 A:middle
view flow layout instead

00:15:36.106 --> 00:15:38.486 A:middle
of writing your own
layout code from scratch.

00:15:39.256 --> 00:15:41.756 A:middle
And there is actually a session
that will happen tomorrow

00:15:41.756 --> 00:15:44.386 A:middle
in the afternoon that talks
about how to do this well,

00:15:44.386 --> 00:15:46.606 A:middle
as well as other
customizations you may want

00:15:46.606 --> 00:15:47.416 A:middle
to do in Cocoa Touch.

00:15:48.026 --> 00:15:51.996 A:middle
Now, we have said the
word auto layout a lot

00:15:51.996 --> 00:15:53.996 A:middle
of times already
throughout this presentation,

00:15:53.996 --> 00:15:55.806 A:middle
but maybe you are not
familiar with this technology.

00:15:56.436 --> 00:16:00.126 A:middle
So Auto Layout is a way to
position elements in your UI,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:56.436 --> 00:16:00.126 A:middle
So Auto Layout is a way to
position elements in your UI,

00:16:00.376 --> 00:16:02.576 A:middle
instead of using frames,
using a set of constraints.

00:16:02.886 --> 00:16:06.966 A:middle
It's been available since iOS 6
it makes it much easier for you

00:16:06.966 --> 00:16:10.766 A:middle
to support different screen
sizes both iPhone and iPad,

00:16:10.886 --> 00:16:12.556 A:middle
as well as different
size classes.

00:16:13.046 --> 00:16:14.966 A:middle
With the new split-view
multitasking,

00:16:15.226 --> 00:16:18.606 A:middle
it makes it that much easier to
make your application compatible

00:16:18.606 --> 00:16:19.596 A:middle
with this new technology.

00:16:20.906 --> 00:16:22.896 A:middle
Finally, even before
right to left,

00:16:23.466 --> 00:16:25.136 A:middle
Auto Layout makes
it easier for you

00:16:25.226 --> 00:16:26.966 A:middle
to support additional
localizations

00:16:27.326 --> 00:16:29.266 A:middle
because once you have a
good set of constraints,

00:16:29.596 --> 00:16:31.556 A:middle
adding a new localization
is just a matter

00:16:31.556 --> 00:16:33.496 A:middle
of translating strings,
and you don't need

00:16:33.496 --> 00:16:35.836 A:middle
to write any special code to
properly handle the layout.

00:16:35.836 --> 00:16:38.836 A:middle
If these are the constraints
that I have in XCode,

00:16:39.596 --> 00:16:41.566 A:middle
it looks exactly the same
in English, of course.

00:16:42.226 --> 00:16:44.216 A:middle
When I'm running in Russian
is might look like this,

00:16:44.656 --> 00:16:46.846 A:middle
and if I go and decide
to add a localization

00:16:46.846 --> 00:16:49.316 A:middle
for a language that's double
the length of the English one,

00:16:49.566 --> 00:16:50.836 A:middle
I don't need to do
anything extra,

00:16:50.836 --> 00:16:52.426 A:middle
because the constraints
are handling all

00:16:52.426 --> 00:16:53.886 A:middle
of the positioning
of the UI for me.

00:16:54.506 --> 00:16:57.586 A:middle
Today there is one more
reason for right to left.

00:16:58.616 --> 00:17:03.166 A:middle
Now, your layout will also
just automatically flip,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:58.616 --> 00:17:03.166 A:middle
Now, your layout will also
just automatically flip,

00:17:03.166 --> 00:17:04.705 A:middle
and you don't need
to do anything extra.

00:17:05.256 --> 00:17:07.896 A:middle
Now, you can use auto
layout both in storyboards,

00:17:08.236 --> 00:17:10.786 A:middle
as well as in code, as well
as a combination of the two.

00:17:10.976 --> 00:17:13.596 A:middle
So you can have outlets to your
constraints and storyboard,

00:17:13.906 --> 00:17:16.616 A:middle
and then manipulate them
programmatically when you need

00:17:16.616 --> 00:17:20.376 A:middle
to change your UI
for some reason.

00:17:20.556 --> 00:17:22.776 A:middle
So we have talked about
leading and trailing.

00:17:22.776 --> 00:17:24.715 A:middle
Again, maybe this is something
you are not familiar with.

00:17:25.425 --> 00:17:27.796 A:middle
Basically if you have
two labels side by side

00:17:28.185 --> 00:17:29.656 A:middle
and you have horizontal
constrains

00:17:29.656 --> 00:17:32.436 A:middle
between them you can specify
them either as left to right

00:17:32.746 --> 00:17:33.726 A:middle
or leading to trailing.

00:17:34.086 --> 00:17:36.066 A:middle
The difference is that
left to right stays left

00:17:36.066 --> 00:17:36.966 A:middle
to right all of the time.

00:17:37.576 --> 00:17:40.446 A:middle
Leading to trailing on the other
hand, looks like left to right

00:17:40.446 --> 00:17:41.766 A:middle
in a left to right localization,

00:17:42.006 --> 00:17:44.296 A:middle
but it will actually
mirror your UI and layout

00:17:44.516 --> 00:17:45.786 A:middle
in a right-to-left localization.

00:17:47.076 --> 00:17:49.056 A:middle
If you are creating
constraints in storyboards,

00:17:49.326 --> 00:17:51.686 A:middle
when you create horizontal
constraints by the default,

00:17:52.096 --> 00:17:54.156 A:middle
they will already be
leading to trailing

00:17:54.156 --> 00:17:55.446 A:middle
so you don't need
to do anything else.

00:17:56.836 --> 00:17:59.066 A:middle
Similarly if you are
creating constraints in code

00:17:59.066 --> 00:18:00.786 A:middle
and you are using the
visual format language,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.066 --> 00:18:00.786 A:middle
and you are using the
visual format language,

00:18:01.196 --> 00:18:03.636 A:middle
there again the default for
horizontal constraints is going

00:18:03.636 --> 00:18:04.576 A:middle
to be leading to trailing.

00:18:05.046 --> 00:18:07.726 A:middle
However, if you are creating
constraints explicitly,

00:18:08.126 --> 00:18:10.826 A:middle
or using the new layout
anchors API in iOS 9,

00:18:11.406 --> 00:18:12.426 A:middle
there you will want to make sure

00:18:12.426 --> 00:18:14.336 A:middle
that you are selecting
the correct attribute

00:18:14.336 --> 00:18:18.196 A:middle
when you are creating
your constraints.

00:18:18.196 --> 00:18:21.696 A:middle
Animations, as you saw in the
demos, are flipped for all

00:18:21.696 --> 00:18:22.616 A:middle
of the stock controls.

00:18:22.966 --> 00:18:25.226 A:middle
What that means is that if
you have custom animation

00:18:25.226 --> 00:18:26.616 A:middle
in your UI, you will want

00:18:26.616 --> 00:18:28.276 A:middle
to make sure that's
properly flipped as well.

00:18:28.846 --> 00:18:30.976 A:middle
Again, of course, you can
use frames if you want,

00:18:31.466 --> 00:18:35.686 A:middle
but the recommendation that we
have is that you use Auto Layout

00:18:35.686 --> 00:18:37.286 A:middle
with leading and trailing
constraints instead,

00:18:37.286 --> 00:18:40.506 A:middle
and simply change the constant
value of those constraints,

00:18:40.726 --> 00:18:42.796 A:middle
which will automatically do
the right thing for both left

00:18:42.796 --> 00:18:43.726 A:middle
to right and right to left

00:18:44.016 --> 00:18:45.436 A:middle
without requiring
any additional code.

00:18:46.236 --> 00:18:47.926 A:middle
Here is an example of
how this would look.

00:18:48.466 --> 00:18:51.276 A:middle
Let's say I want to
change the constant value

00:18:51.276 --> 00:18:52.286 A:middle
of one of my constraints.

00:18:53.076 --> 00:18:54.156 A:middle
I have a duration here.

00:18:54.646 --> 00:18:56.746 A:middle
I will change the offset
to a different value.

00:18:57.676 --> 00:19:00.116 A:middle
Before doing the animation,
I call layoutIfNeeded,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:57.676 --> 00:19:00.116 A:middle
Before doing the animation,
I call layoutIfNeeded,

00:19:00.116 --> 00:19:01.206 A:middle
to make sure that the frames are

00:19:01.206 --> 00:19:02.546 A:middle
in the correct position
to begin with.

00:19:03.406 --> 00:19:05.486 A:middle
Then I call an implicit
animation block,

00:19:05.486 --> 00:19:08.166 A:middle
inside which I change
the actual constant value

00:19:08.166 --> 00:19:10.886 A:middle
of the constraint, and
call layoutIfNeeded again.

00:19:10.886 --> 00:19:12.096 A:middle
This will update the frames

00:19:12.396 --> 00:19:14.626 A:middle
and because it's inside the
implicit animation block,

00:19:14.626 --> 00:19:16.026 A:middle
it will also animate
that change.

00:19:16.426 --> 00:19:19.286 A:middle
You will notice here that there
is no special casing for right

00:19:19.286 --> 00:19:22.486 A:middle
to left, or left to right,
it's just a single set of code

00:19:22.486 --> 00:19:24.346 A:middle
that works perfectly
in both contexts.

00:19:24.346 --> 00:19:27.526 A:middle
Now, let's talk about gestures.

00:19:27.566 --> 00:19:30.616 A:middle
Now, like you saw again for
table views and for navigation,

00:19:30.616 --> 00:19:31.976 A:middle
we flip the standard gestures.

00:19:32.406 --> 00:19:36.166 A:middle
However, the gesture recognizer
API itself remains unchanged.

00:19:36.396 --> 00:19:38.646 A:middle
The reason for that is
because gesture recognizers

00:19:38.646 --> 00:19:40.476 A:middle
on their own are
fairly abstract,

00:19:40.476 --> 00:19:42.596 A:middle
and at the framework
level, we have no way

00:19:42.596 --> 00:19:45.086 A:middle
of knowing what your using
the gesture recognizer for.

00:19:46.036 --> 00:19:49.876 A:middle
So what that means for you as a
developer, is that you just need

00:19:49.876 --> 00:19:52.086 A:middle
to be aware of when you are
using gesture recognizers,

00:19:52.086 --> 00:19:54.066 A:middle
and when you are
responding to gesture events,

00:19:54.786 --> 00:19:56.346 A:middle
what you are actually
using them for.

00:19:57.326 --> 00:19:59.486 A:middle
So, for example, if you are
using your gesture recognizer

00:19:59.776 --> 00:20:02.786 A:middle
to draw on the screen, you
will want to keep that as is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.776 --> 00:20:02.786 A:middle
to draw on the screen, you
will want to keep that as is

00:20:02.856 --> 00:20:03.556 A:middle
because speakers

00:20:03.556 --> 00:20:05.406 A:middle
of right-to-left languages
don't draw backwards.

00:20:06.276 --> 00:20:08.966 A:middle
However, if you have a
custom gesture recognizer

00:20:08.966 --> 00:20:11.386 A:middle
for your table view cells,
for example, you will want

00:20:11.386 --> 00:20:12.876 A:middle
to make sure you flip
that because the layout

00:20:12.876 --> 00:20:16.366 A:middle
of the table view style
has been flipped as well.

00:20:16.606 --> 00:20:20.836 A:middle
Similarly if you are
using navigation gestures,

00:20:20.836 --> 00:20:22.946 A:middle
you will want to flip those,
since like we saw earlier,

00:20:22.946 --> 00:20:24.576 A:middle
back and forward are
actually reversed.

00:20:25.696 --> 00:20:27.006 A:middle
The main thing to
remember here is

00:20:27.006 --> 00:20:29.806 A:middle
that no matter what you are
doing you will want to make sure

00:20:29.806 --> 00:20:32.946 A:middle
that the gesture tracks the UI
that's under it appropriately,

00:20:33.196 --> 00:20:35.936 A:middle
and you don't get a situation
where you are swiping from left

00:20:35.936 --> 00:20:37.826 A:middle
to right but the UI
moves from right to left,

00:20:37.866 --> 00:20:39.086 A:middle
because that would
be very confusing.

00:20:39.756 --> 00:20:42.806 A:middle
If you use Auto Layout this
will make your job much easier.

00:20:42.806 --> 00:20:45.606 A:middle
I would like now to invite
Aaltan back up on stage

00:20:45.606 --> 00:20:47.566 A:middle
to give you a demo of the stuff
that we just talked about.

00:20:48.516 --> 00:20:53.986 A:middle
[ Applause ]

00:20:54.486 --> 00:20:54.936 A:middle
&gt;&gt; AALTAN AHMAD: Thanks, Paul.

00:20:56.736 --> 00:21:02.196 A:middle
So while Paul was talking,
I thought a little bit


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:56.736 --> 00:21:02.196 A:middle
So while Paul was talking,
I thought a little bit

00:21:02.196 --> 00:21:04.726 A:middle
about my app and I
decided that I wanted

00:21:05.866 --> 00:21:08.676 A:middle
to add some more custom UI.

00:21:09.266 --> 00:21:14.196 A:middle
So I went ahead and created
a cool custom table view cell

00:21:14.196 --> 00:21:16.236 A:middle
subclass that I laid
out using Auto Layout.

00:21:16.566 --> 00:21:17.536 A:middle
It's pretty straight forward.

00:21:17.536 --> 00:21:20.406 A:middle
There is some more informative
text labels in the row

00:21:20.716 --> 00:21:23.076 A:middle
and there's a nice image so
the user can see a picture

00:21:23.076 --> 00:21:24.146 A:middle
of what they are about to cook.

00:21:24.226 --> 00:21:29.336 A:middle
There is also this cool little
favorites view on the left side

00:21:29.336 --> 00:21:31.986 A:middle
that the user can drag out
by swiping across the cell,

00:21:32.316 --> 00:21:35.906 A:middle
similar to the stock
swipeToDelete gesture

00:21:35.906 --> 00:21:37.576 A:middle
that we have on table
view cells right now.

00:21:38.086 --> 00:21:41.676 A:middle
If they pull far enough, a
little star appears on top

00:21:41.676 --> 00:21:43.066 A:middle
of the image in order
to show them

00:21:43.066 --> 00:21:45.516 A:middle
that they favorited this recipe.

00:21:46.816 --> 00:21:49.406 A:middle
So let's look at what this looks

00:21:49.406 --> 00:21:52.566 A:middle
like in left to right,
in English.

00:21:53.126 --> 00:21:58.626 A:middle
So, great, my app looks
like lot more vibrant

00:21:58.626 --> 00:22:01.746 A:middle
and inviting right now,
so there is a picture,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.626 --> 00:22:01.746 A:middle
and inviting right now,
so there is a picture,

00:22:02.136 --> 00:22:07.416 A:middle
there's some more text labels,
and in fact, if I pull the cell

00:22:07.416 --> 00:22:10.336 A:middle
out far enough, the
favorite view is revealed,

00:22:10.336 --> 00:22:14.146 A:middle
and if I complete the gesture,
the little star shows up.

00:22:14.376 --> 00:22:18.686 A:middle
Great. And while Paul was
also talking I had a chance

00:22:18.686 --> 00:22:21.536 A:middle
to learn the entire
Hebrew language

00:22:21.886 --> 00:22:24.496 A:middle
and add a Hebrew
localization to my app as well,

00:22:24.946 --> 00:22:27.606 A:middle
so for this demo we are
going to be running in Hebrew

00:22:27.876 --> 00:22:29.566 A:middle
as our right-to-left language.

00:22:29.906 --> 00:22:32.276 A:middle
So I will go back to
the edit scheme menu,

00:22:32.656 --> 00:22:39.546 A:middle
and this time select Hebrew,
hit enter and run the app.

00:22:39.806 --> 00:22:42.366 A:middle
Wow! It's because I was using
auto layout with leading

00:22:42.366 --> 00:22:44.776 A:middle
and trailing constraints,
everything just flips.

00:22:44.776 --> 00:22:47.086 A:middle
The image is now over
on the right side.

00:22:47.306 --> 00:22:48.786 A:middle
The text labels are
all right-aligned

00:22:48.786 --> 00:22:49.896 A:middle
in the correct position.

00:22:50.236 --> 00:22:53.686 A:middle
The Chevron, of course, is
stock so that stays where it is,

00:22:54.036 --> 00:22:57.786 A:middle
and again, formatters
plug, my durations

00:22:57.786 --> 00:23:00.836 A:middle
and numbers are correctly
localized for Hebrew.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:57.786 --> 00:23:00.836 A:middle
and numbers are correctly
localized for Hebrew.

00:23:01.616 --> 00:23:03.376 A:middle
But we didn't look
at the custom gesture

00:23:03.376 --> 00:23:05.436 A:middle
yet so let's check that out.

00:23:05.726 --> 00:23:08.486 A:middle
Because the entire cell is
laid out from right to left,

00:23:08.826 --> 00:23:12.726 A:middle
the user is also expecting that
the swipe for favorites will be

00:23:12.726 --> 00:23:16.846 A:middle
in that direction as well,
and more so because the swipe

00:23:16.846 --> 00:23:18.816 A:middle
to delete gesture
system-wide, is flipped.

00:23:19.246 --> 00:23:20.926 A:middle
So they are going to
know that that comes

00:23:20.926 --> 00:23:21.786 A:middle
over from the left edge

00:23:21.786 --> 00:23:23.566 A:middle
and whatever your custom
gesture was they are going

00:23:23.566 --> 00:23:24.736 A:middle
to be expecting it
from the right.

00:23:25.436 --> 00:23:27.976 A:middle
So let's swipe in that
direction and see what happens

00:23:28.016 --> 00:23:31.186 A:middle
for a right-to-left
user in that case.

00:23:31.836 --> 00:23:34.416 A:middle
And you can see that things
don't work as expected.

00:23:34.656 --> 00:23:38.006 A:middle
I swiped, but instead
of revealing that view,

00:23:38.006 --> 00:23:39.906 A:middle
the table view cell
thought I was tapping on it,

00:23:40.326 --> 00:23:42.046 A:middle
and instead presented
the details view.

00:23:42.046 --> 00:23:43.426 A:middle
It doesn't make too much sense.

00:23:44.406 --> 00:23:46.366 A:middle
And the reason this
is happening is

00:23:46.366 --> 00:23:49.876 A:middle
because there is an implicit
assumption in my code,

00:23:50.226 --> 00:23:52.246 A:middle
off the directionality
of that swipe.

00:23:52.826 --> 00:23:55.696 A:middle
I'm expecting the swipe
to go from left to right.

00:23:56.126 --> 00:23:58.316 A:middle
Or, in other words, in
a positive X direction.

00:23:59.236 --> 00:24:02.306 A:middle
In fact, if I go and
swipe in that direction,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.236 --> 00:24:02.306 A:middle
In fact, if I go and
swipe in that direction,

00:24:02.306 --> 00:24:04.296 A:middle
you can see that the
view does reveal itself.

00:24:04.586 --> 00:24:07.536 A:middle
However, it reveals itself
in the direction opposite

00:24:07.536 --> 00:24:09.676 A:middle
to the direction that
I'm dragging my finger,

00:24:10.056 --> 00:24:12.576 A:middle
and that doesn't really
make any sense to the user.

00:24:12.976 --> 00:24:16.106 A:middle
And you really want to
avoid situations like this.

00:24:16.856 --> 00:24:20.126 A:middle
So let's jump into the table
view cell subclass and see

00:24:20.126 --> 00:24:23.506 A:middle
if we can figure out
what's going on here.

00:24:24.366 --> 00:24:26.786 A:middle
So here you can see
I have two gesture

00:24:26.786 --> 00:24:28.236 A:middle
recognizer-related methods.

00:24:28.236 --> 00:24:30.786 A:middle
So the first is this gesture
recognizer should begin method.

00:24:31.416 --> 00:24:33.446 A:middle
And the reason I have
to implement this is

00:24:33.446 --> 00:24:35.426 A:middle
because like I said,
I want to support both

00:24:35.426 --> 00:24:38.096 A:middle
that custom gesture, as well
as a stock table view gesture.

00:24:38.646 --> 00:24:41.506 A:middle
What goes on here if the
user swipes in the direction

00:24:41.506 --> 00:24:44.826 A:middle
of my gesture, I allow my
gesture recognizer to begin,

00:24:45.136 --> 00:24:47.736 A:middle
and if they swipe in the
direction of the swipeToDelete,

00:24:47.736 --> 00:24:50.046 A:middle
I don't do anything and I let
table view handle that stuff.

00:24:50.916 --> 00:24:53.666 A:middle
So right here you can see
I have the X translation

00:24:53.966 --> 00:24:56.676 A:middle
of the gesture recognizer and
if that translation is greater

00:24:56.676 --> 00:24:59.586 A:middle
than zero, or left
to right, I go ahead

00:24:59.586 --> 00:25:00.996 A:middle
and begin my gesture recognizer.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:59.586 --> 00:25:00.996 A:middle
and begin my gesture recognizer.

00:25:01.316 --> 00:25:03.716 A:middle
So what we really need to do
here, is check if we are running

00:25:03.716 --> 00:25:07.036 A:middle
in a right-to-left localization,
and if we are, we need to look

00:25:07.036 --> 00:25:10.126 A:middle
for translation in the
opposite direction.

00:25:10.376 --> 00:25:13.476 A:middle
In order to figure out whether
I'm running in a localization

00:25:13.476 --> 00:25:16.466 A:middle
in a right-to-left localization
or not, I will use new API

00:25:16.576 --> 00:25:19.086 A:middle
that we added in iOS that
Paul is actually going to talk

00:25:19.086 --> 00:25:21.936 A:middle
about shortly, but since it's
exactly what we need right now,

00:25:21.936 --> 00:25:23.016 A:middle
I will go ahead and use it.

00:25:23.066 --> 00:25:28.806 A:middle
So I will declare a new constant
called isLeftToRightLayout

00:25:30.316 --> 00:25:33.966 A:middle
And I'm going to use a new
user interface layout direction

00:25:33.966 --> 00:25:38.036 A:middle
for semantic content attribute,
API, that we added in iOS 9

00:25:38.306 --> 00:25:41.886 A:middle
and I am going to parse in my
view semantic content attribute.

00:25:42.146 --> 00:25:45.266 A:middle
This returns the resolved
layout direction, left to right

00:25:45.266 --> 00:25:50.096 A:middle
or right to left for this view,
and if that direction comes back

00:25:50.096 --> 00:25:51.906 A:middle
as left to right,
I know I'm running

00:25:51.906 --> 00:25:53.176 A:middle
in a left-to-right localization.

00:25:54.416 --> 00:25:57.916 A:middle
So next step before
checking that translation,

00:25:57.916 --> 00:26:00.466 A:middle
I will look at my
isLeftToRight variable.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:57.916 --> 00:26:00.466 A:middle
I will look at my
isLeftToRight variable.

00:26:00.806 --> 00:26:03.346 A:middle
If it's left to right,
we continue as usual.

00:26:04.276 --> 00:26:07.416 A:middle
If it's right to left, we look
for a translation for less

00:26:07.416 --> 00:26:09.056 A:middle
than zero or in the negative X.

00:26:09.556 --> 00:26:14.716 A:middle
The second method here, is this
updateFavoriteButtonPosition

00:26:14.716 --> 00:26:15.066 A:middle
method.

00:26:15.986 --> 00:26:19.296 A:middle
So here is where we actually
manipulate the constants

00:26:19.296 --> 00:26:22.296 A:middle
of the constraints and
show that view on screen.

00:26:22.296 --> 00:26:25.246 A:middle
Here you can see against I have
should allow dragging favorite

00:26:25.246 --> 00:26:28.316 A:middle
button constant that allows--

00:26:28.356 --> 00:26:30.396 A:middle
that tells the following
code whether it should start

00:26:30.396 --> 00:26:33.666 A:middle
revealing that view, and, again,
similar thing, we are checking

00:26:33.666 --> 00:26:35.256 A:middle
for a positive X translation.

00:26:35.636 --> 00:26:38.206 A:middle
Solution is also similar, we
can just pick up this check,

00:26:39.536 --> 00:26:46.186 A:middle
bring it over here, and check
for the left to right layout,

00:26:46.186 --> 00:26:47.876 A:middle
and check for translation

00:26:47.876 --> 00:26:49.756 A:middle
in the opposite direction,
and right to left.

00:26:50.846 --> 00:26:53.986 A:middle
The last bit over here is
this distancePulled variable.

00:26:53.986 --> 00:26:58.476 A:middle
So the distancePulled
variable, or constant,

00:26:58.476 --> 00:27:02.666 A:middle
is telling the following code
how far the user has dragged


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:58.476 --> 00:27:02.666 A:middle
is telling the following code
how far the user has dragged

00:27:02.666 --> 00:27:03.946 A:middle
their finger across the cell.

00:27:04.346 --> 00:27:07.006 A:middle
Now that we can accept a
negative translation it doesn't

00:27:07.006 --> 00:27:10.056 A:middle
really make sense for the
distancePulled variable

00:27:10.056 --> 00:27:12.466 A:middle
to also be negative
because it's conveying sort

00:27:12.466 --> 00:27:15.736 A:middle
of an absolute value, so to
rectify that, we are going

00:27:15.736 --> 00:27:19.496 A:middle
to just take the absolute value
of the translation as well.

00:27:19.866 --> 00:27:21.406 A:middle
That solved that problem for us.

00:27:22.166 --> 00:27:25.066 A:middle
With those few changes
let's run the app again.

00:27:25.566 --> 00:27:29.486 A:middle
And see where that got us.

00:27:29.716 --> 00:27:31.956 A:middle
Okay. Things look
good here still.

00:27:32.266 --> 00:27:37.576 A:middle
Now, if I drag my finger
over, things work as a right

00:27:37.576 --> 00:27:38.696 A:middle
to left user would expect.

00:27:38.896 --> 00:27:40.406 A:middle
So really that's it,
you really just need

00:27:40.406 --> 00:27:42.746 A:middle
to make sure you are
watching out for these kinds

00:27:42.746 --> 00:27:45.466 A:middle
of assumptions in your code,
and really just accommodating

00:27:45.466 --> 00:27:47.756 A:middle
for the right-to-left keys,
which oftentimes turns

00:27:47.756 --> 00:27:50.106 A:middle
out to be something that's
really just that simple.

00:27:50.556 --> 00:27:55.666 A:middle
And that's all it takes to bring
your custom gestures and UI

00:27:55.666 --> 00:27:56.506 A:middle
over to right to left.

00:27:56.506 --> 00:27:59.216 A:middle
To talk to you a little bit
more about some exceptions

00:27:59.216 --> 00:28:01.416 A:middle
and best practices,
back over to Paul.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.216 --> 00:28:01.416 A:middle
and best practices,
back over to Paul.

00:28:02.516 --> 00:28:07.686 A:middle
[ Applause ]

00:28:08.186 --> 00:28:11.366 A:middle
&gt;&gt; PAUL BOROKHOV:
Alright, Thanks Aaltan.

00:28:12.316 --> 00:28:14.276 A:middle
So let's talk about
some exceptions and some

00:28:14.276 --> 00:28:16.426 A:middle
of the new API that we
have introduced in iOS 9.

00:28:17.526 --> 00:28:18.856 A:middle
One of the things we saw

00:28:18.856 --> 00:28:21.926 A:middle
in Aaltan's demo was the
semantic content attribute API

00:28:22.056 --> 00:28:23.846 A:middle
so before we get
into that let's talk

00:28:23.846 --> 00:28:25.556 A:middle
about what semantic
content attributes are.

00:28:26.536 --> 00:28:29.576 A:middle
The semantic content attribute
is a new property on UI view,

00:28:30.306 --> 00:28:34.236 A:middle
and it's there to make sure that
all UI looks correct in right

00:28:34.236 --> 00:28:37.986 A:middle
to left and left to right
because in some cases not all

00:28:37.986 --> 00:28:40.106 A:middle
of the UI flips and
we need to make sure

00:28:40.106 --> 00:28:42.346 A:middle
that we have a way
to specify that.

00:28:42.786 --> 00:28:44.586 A:middle
Now, the default
semantic content attribute

00:28:44.586 --> 00:28:45.506 A:middle
is unspecified.

00:28:46.716 --> 00:28:49.316 A:middle
This will flip in a
right-to-left localization

00:28:49.316 --> 00:28:51.826 A:middle
and stay as is in a left
to right localization.

00:28:52.766 --> 00:28:55.366 A:middle
But we have some
additional attribute types

00:28:55.406 --> 00:28:57.626 A:middle
that you can set, that
will prevent the flipping

00:28:57.626 --> 00:29:01.046 A:middle
from happening, for a number of
historical and other reasons,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:57.626 --> 00:29:01.046 A:middle
from happening, for a number of
historical and other reasons,

00:29:01.326 --> 00:29:03.536 A:middle
but they manage the expectations
of right-to-left users.

00:29:04.416 --> 00:29:06.736 A:middle
Finally, the resolution
of leading

00:29:06.736 --> 00:29:08.576 A:middle
and trailing constraints
is actually based

00:29:08.576 --> 00:29:10.046 A:middle
on the semantic content
attribute.

00:29:10.606 --> 00:29:12.476 A:middle
So that's just something
to keep in mind.

00:29:13.186 --> 00:29:15.056 A:middle
So the first one is playback.

00:29:15.606 --> 00:29:19.516 A:middle
The idea here is if you have
some sort of playback control,

00:29:19.786 --> 00:29:22.066 A:middle
you sub the semantic content
attribute of that control,

00:29:22.066 --> 00:29:24.076 A:middle
or that group of
controls, to be playback,

00:29:24.076 --> 00:29:25.666 A:middle
and that will keep
them left to right.

00:29:25.666 --> 00:29:28.806 A:middle
So you can see here
in the new music app,

00:29:28.806 --> 00:29:32.516 A:middle
we have the progress bar as
well as the playback controls,

00:29:32.516 --> 00:29:33.416 A:middle
they stay left to right.

00:29:33.416 --> 00:29:34.806 A:middle
They do not flip.

00:29:35.876 --> 00:29:37.466 A:middle
The next one is spatial.

00:29:37.956 --> 00:29:41.356 A:middle
This is for annotating controls
that correspond to some sort

00:29:41.356 --> 00:29:44.886 A:middle
of direct UI manipulation
where maybe you have a D pad

00:29:44.886 --> 00:29:47.636 A:middle
in your game and you
press up and it goes up.

00:29:47.636 --> 00:29:51.046 A:middle
You press left, it goes left,
or similarly for text alignment.

00:29:51.396 --> 00:29:54.896 A:middle
So here we have on the pages
app, a segmental control

00:29:54.896 --> 00:29:56.466 A:middle
that lets you set the
alignment of your text.

00:29:56.896 --> 00:29:59.346 A:middle
Left-aligned text will
still stay on the left side,

00:29:59.346 --> 00:30:01.306 A:middle
even when running in a
right-to-left localization,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.346 --> 00:30:01.306 A:middle
even when running in a
right-to-left localization,

00:30:01.626 --> 00:30:04.286 A:middle
so we keep that as is.

00:30:04.686 --> 00:30:07.176 A:middle
Finally, for those of you
who want to be more explicit,

00:30:08.046 --> 00:30:09.506 A:middle
we have these forceLeftToRight

00:30:09.506 --> 00:30:12.166 A:middle
and -RightToLeftand
right-to-left attribute types,

00:30:12.166 --> 00:30:14.226 A:middle
and they just do what you
would expect from the name.

00:30:14.776 --> 00:30:16.706 A:middle
The forceRighToLeft one
will actually affect layout

00:30:16.706 --> 00:30:17.916 A:middle
in a left-to-right localization.

00:30:17.916 --> 00:30:19.526 A:middle
All the others only
have an impact

00:30:19.526 --> 00:30:20.616 A:middle
when you are running
in right to left.

00:30:20.616 --> 00:30:23.656 A:middle
And the only thing that I will
say about these is if you feel

00:30:23.656 --> 00:30:25.386 A:middle
like you want to use them,
please come talk to us

00:30:25.386 --> 00:30:27.016 A:middle
on the lab or post
on the dev forums

00:30:27.016 --> 00:30:29.916 A:middle
to just make sure you
are doing the right thing

00:30:29.916 --> 00:30:32.516 A:middle
and that the existing
API doesn't quite satisfy

00:30:32.516 --> 00:30:32.956 A:middle
your needs.

00:30:32.956 --> 00:30:35.166 A:middle
or maybe we are missing API,
there is another type we need

00:30:35.166 --> 00:30:37.766 A:middle
to add, and you can
tell us that.

00:30:39.156 --> 00:30:43.316 A:middle
I want to talk about some
best practices for UI and text

00:30:43.316 --> 00:30:45.436 A:middle
when you are supporting
right to left.

00:30:46.016 --> 00:30:48.576 A:middle
One of the things you want to
make sure you are doing all

00:30:48.576 --> 00:30:51.456 A:middle
of the time (and like we saw in
the demos) is to use formatters.

00:30:51.756 --> 00:30:53.666 A:middle
For Arabic this is
particularly important

00:30:53.666 --> 00:30:56.016 A:middle
because different Arabic
speaking countries will use

00:30:56.016 --> 00:30:59.266 A:middle
actually use different words
for the months of the year.

00:30:59.506 --> 00:31:01.696 A:middle
So you will want to make sure
that you display those correctly


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.506 --> 00:31:01.696 A:middle
So you will want to make sure
that you display those correctly

00:31:01.696 --> 00:31:03.536 A:middle
to all of your users,
no matter what region

00:31:03.536 --> 00:31:05.496 A:middle
or language they are using.

00:31:05.496 --> 00:31:06.856 A:middle
In fact, there is a What's New

00:31:06.856 --> 00:31:09.176 A:middle
in Internationalization talk
tomorrow, bright and early

00:31:09.176 --> 00:31:12.006 A:middle
at 9:00 in the morning, where
they will talk about all

00:31:12.006 --> 00:31:13.576 A:middle
of the existing formatters
as well as some

00:31:13.576 --> 00:31:18.466 A:middle
of the new formatter APIs
that are available in iOS 9.

00:31:18.666 --> 00:31:21.126 A:middle
However, you will want to make
sure that if you have some sort

00:31:21.346 --> 00:31:24.506 A:middle
of layout or logic
branching like we saw

00:31:24.506 --> 00:31:27.656 A:middle
for the gesture recognizer,
you never want to use NSLocale

00:31:27.656 --> 00:31:30.666 A:middle
or NSbundle or NSFormatter
for determining that.

00:31:31.776 --> 00:31:33.626 A:middle
So perhaps you have
seen code like this.

00:31:34.226 --> 00:31:35.276 A:middle
You want to figure
out if you are running

00:31:35.276 --> 00:31:36.576 A:middle
in a right-to-left localization.

00:31:36.576 --> 00:31:38.996 A:middle
You look up the preferred
languages, you pick the top one

00:31:39.486 --> 00:31:41.626 A:middle
and if its writing direction
is right to left, boom!

00:31:42.736 --> 00:31:44.576 A:middle
This is something that you
literally never want to do.

00:31:45.146 --> 00:31:47.366 A:middle
There is many ways
that this can break.

00:31:48.136 --> 00:31:50.296 A:middle
It's just not what
you want to be doing.

00:31:50.296 --> 00:31:52.466 A:middle
If you want to find out that
your application is running

00:31:52.466 --> 00:31:52.926 A:middle
right to left.

00:31:53.596 --> 00:31:56.326 A:middle
Instead, you'll want to use
this new API we saw in the demo.

00:31:56.716 --> 00:31:59.236 A:middle
User interface layout direction
for semantic content attribute,

00:31:59.816 --> 00:32:02.516 A:middle
and pass in the semantic
content attribute of the view


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:59.816 --> 00:32:02.516 A:middle
and pass in the semantic
content attribute of the view

00:32:02.516 --> 00:32:04.706 A:middle
that you are interested
in figuring

00:32:04.706 --> 00:32:05.886 A:middle
out how it's being laid out.

00:32:05.886 --> 00:32:09.646 A:middle
And that will give you either
left to right or right to left

00:32:09.646 --> 00:32:10.566 A:middle
as the UI layout direction.

00:32:11.116 --> 00:32:14.146 A:middle
Of course, the converse is that
you shouldn't be using this

00:32:14.146 --> 00:32:15.926 A:middle
for regional or format settings.

00:32:16.866 --> 00:32:20.356 A:middle
Now, here is a sample that
matches sort of the intent

00:32:20.356 --> 00:32:22.206 A:middle
of the previous slide
but is actually correct.

00:32:22.616 --> 00:32:24.596 A:middle
We get the semantic
attribute of the view,

00:32:25.186 --> 00:32:27.876 A:middle
we ask for the layout direction,
and if that happens to be right

00:32:27.876 --> 00:32:31.796 A:middle
to left, we do custom
logic, perhaps.

00:32:31.926 --> 00:32:34.176 A:middle
Now, when dealing with
text, what you will want

00:32:34.176 --> 00:32:36.716 A:middle
to do is just leave
alignment and directionalty

00:32:36.716 --> 00:32:38.546 A:middle
at their default
values most of the time.

00:32:39.056 --> 00:32:42.566 A:middle
So, new in iOS 9, natural
alignment is now the default

00:32:42.566 --> 00:32:44.896 A:middle
so you don't need to do
anything to have text

00:32:44.896 --> 00:32:47.386 A:middle
that is left-aligned in
left-to-right languages,

00:32:47.386 --> 00:32:49.046 A:middle
and right-aligned, in
right-to-left languages.

00:32:50.116 --> 00:32:52.626 A:middle
Similarly the base writing
direction is something you

00:32:52.626 --> 00:32:55.016 A:middle
should never have to touch
unless you are writing a

00:32:55.016 --> 00:32:55.626 A:middle
text editor.

00:32:56.016 --> 00:32:57.666 A:middle
That has been the
default since iOS 7.

00:32:57.986 --> 00:33:01.306 A:middle
For probably 99% of applications
there is no reason you should


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:57.986 --> 00:33:01.306 A:middle
For probably 99% of applications
there is no reason you should

00:33:01.306 --> 00:33:03.596 A:middle
ever need to touch this value
and change it from default.

00:33:04.526 --> 00:33:09.116 A:middle
Again, you don't want to use
these for layout code branching.

00:33:09.116 --> 00:33:11.756 A:middle
Instead use the API that we
saw in the previous slide.

00:33:13.636 --> 00:33:17.186 A:middle
Finally, I would like to talk
about images so we have new API

00:33:17.186 --> 00:33:19.486 A:middle
and UI image called
imageflipped for right

00:33:19.486 --> 00:33:20.496 A:middle
to left layout direction.

00:33:21.146 --> 00:33:23.736 A:middle
What this will do is this will
horizontally flip the image

00:33:23.736 --> 00:33:26.076 A:middle
automatically for you when you
are in a right-to-left context.

00:33:26.486 --> 00:33:28.006 A:middle
So an image flipped

00:33:28.006 --> 00:33:30.086 A:middle
for right-to-left layout
direction will stay as is

00:33:30.086 --> 00:33:32.066 A:middle
in left to right, and then
flip in right to left.

00:33:32.596 --> 00:33:34.616 A:middle
This also based on the
semantic content attribute

00:33:34.616 --> 00:33:36.616 A:middle
of the image view that
contains the image

00:33:37.066 --> 00:33:40.186 A:middle
and generally speaking, you
will want to use this only

00:33:40.186 --> 00:33:41.906 A:middle
for directional images
or something

00:33:41.906 --> 00:33:43.906 A:middle
that conveys some sort of UI.

00:33:44.086 --> 00:33:46.546 A:middle
So people who speak
right-to-left languages they

00:33:46.546 --> 00:33:48.106 A:middle
don't look at all their
photos in the mirror.

00:33:48.756 --> 00:33:52.466 A:middle
So if you see errors or
Chevrons in your application,

00:33:52.466 --> 00:33:55.216 A:middle
like for example, we have in
the Safari toolbar, for the back

00:33:55.216 --> 00:33:57.576 A:middle
and forward buttons, you want
to make sure that those flip,

00:33:57.826 --> 00:33:59.026 A:middle
because all

00:33:59.026 --> 00:34:02.826 A:middle
of the directionality concepts
have flipped from right to left.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.026 --> 00:34:02.826 A:middle
of the directionality concepts
have flipped from right to left.

00:34:02.966 --> 00:34:05.826 A:middle
Similarly, if you have some
sort of icons that represent UI,

00:34:07.006 --> 00:34:10.156 A:middle
for example, a list,
so in the new maps app

00:34:10.156 --> 00:34:13.275 A:middle
in the transit feature,
we have this icon

00:34:13.275 --> 00:34:16.206 A:middle
that lets you see the list
of steps because that sort

00:34:16.206 --> 00:34:18.696 A:middle
of represents the table
view, and in the table view,

00:34:18.696 --> 00:34:19.966 A:middle
the icons are on the right side.

00:34:19.966 --> 00:34:21.545 A:middle
You can see the icon
has been flipped,

00:34:22.196 --> 00:34:24.406 A:middle
and more subtly we have
also flipped the person

00:34:24.606 --> 00:34:26.946 A:middle
for the walking directions
because if we didn't,

00:34:26.946 --> 00:34:29.096 A:middle
it would look like the person
was just walking off the edge

00:34:29.096 --> 00:34:30.916 A:middle
of the screen, and it
wouldn't really match the rest

00:34:30.916 --> 00:34:31.585 A:middle
of the layout file.

00:34:32.206 --> 00:34:35.906 A:middle
So I would like to invite
Aaltan back up on stage

00:34:35.906 --> 00:34:37.226 A:middle
to give you a quick
demo of that.

00:34:38.516 --> 00:34:43.545 A:middle
[ Applause ]

00:34:44.045 --> 00:34:47.696 A:middle
&gt;&gt; AALTAN AHMAD:
Last demo, I promise.

00:34:56.335 --> 00:34:56.946 A:middle
All right.

00:34:57.216 --> 00:34:58.696 A:middle
So, great!

00:34:58.806 --> 00:35:02.386 A:middle
I just learned a lot about the
new, cool new APIs we added


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:58.806 --> 00:35:02.386 A:middle
I just learned a lot about the
new, cool new APIs we added

00:35:02.386 --> 00:35:05.056 A:middle
and I decided to take
the customization

00:35:05.056 --> 00:35:08.016 A:middle
of my custom table view
cell to the next level,

00:35:08.376 --> 00:35:12.766 A:middle
by adding a custom Chevron
that is indeed a pizza slice,

00:35:13.696 --> 00:35:18.706 A:middle
so the pizza slice will be
directing our users to go

00:35:18.706 --> 00:35:19.716 A:middle
on to the next screen.

00:35:20.216 --> 00:35:23.186 A:middle
And since we are all really
familiar with the right to left

00:35:23.186 --> 00:35:26.066 A:middle
by now, let's run our
app directly in Arabic

00:35:26.766 --> 00:35:29.196 A:middle
without showing you what
it looks like in English,

00:35:29.196 --> 00:35:34.166 A:middle
since we are past that point.

00:35:34.326 --> 00:35:38.476 A:middle
Great. So because I put in that
image view with the pizza slice,

00:35:38.476 --> 00:35:40.546 A:middle
using auto layout and leading
to trailing constraints,

00:35:40.806 --> 00:35:42.516 A:middle
it actually is in
the correct position.

00:35:42.516 --> 00:35:45.336 A:middle
It's over on the left side of
the cell, where a user on right

00:35:45.336 --> 00:35:46.326 A:middle
to left would expect it.

00:35:46.646 --> 00:35:50.406 A:middle
However, clearly you can see
that the pizza slice is pointing

00:35:50.406 --> 00:35:51.476 A:middle
in the wrong direction.

00:35:52.096 --> 00:35:54.836 A:middle
And this is exactly the
kind of directional image

00:35:54.836 --> 00:35:56.316 A:middle
that Paul was talking
about earlier,

00:35:56.606 --> 00:35:58.576 A:middle
that we can use the
image flipping API

00:35:58.696 --> 00:36:00.116 A:middle
in order to rectify.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:58.696 --> 00:36:00.116 A:middle
in order to rectify.

00:36:00.856 --> 00:36:03.756 A:middle
So let's go back to that
table view cell subclass.

00:36:04.296 --> 00:36:07.466 A:middle
And here you can see I have
my [unintelligible] method

00:36:07.466 --> 00:36:11.376 A:middle
where all of those outlets, all
of my outlets will be loaded

00:36:12.046 --> 00:36:14.416 A:middle
and ready to go, so the
first thing I'm going

00:36:14.416 --> 00:36:17.286 A:middle
to do is get a reference
to my custom Chevron image.

00:36:18.336 --> 00:36:21.106 A:middle
customChevronImageView.image.

00:36:21.606 --> 00:36:25.346 A:middle
Now that I have that,
I'm going to put it back

00:36:25.346 --> 00:36:30.196 A:middle
in the image view, except
with one small change,

00:36:30.196 --> 00:36:32.186 A:middle
which is I'm going to
call the image flip

00:36:32.186 --> 00:36:33.936 A:middle
for right-to-left
layout direction method

00:36:33.976 --> 00:36:35.376 A:middle
on the UI image itself.

00:36:36.386 --> 00:36:38.436 A:middle
And this basically
has the effect

00:36:38.436 --> 00:36:41.906 A:middle
of leaving your image alone in
a left to right localization,

00:36:42.276 --> 00:36:45.266 A:middle
but flipping it horizontally in
a right-to-left localization.

00:36:45.266 --> 00:36:46.616 A:middle
And the important
thing to note here,

00:36:46.906 --> 00:36:50.806 A:middle
is that because the method
does the right thing for you,

00:36:50.806 --> 00:36:53.826 A:middle
you don't need to worry about
gating it around, and is it left

00:36:53.826 --> 00:36:57.216 A:middle
to right or is it right to left
check, as I was doing earlier.

00:36:57.646 --> 00:36:59.826 A:middle
So you can do call this
method with confidence

00:36:59.826 --> 00:37:01.576 A:middle
in any localization,
and you can be sure


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:59.826 --> 00:37:01.576 A:middle
in any localization,
and you can be sure

00:37:01.576 --> 00:37:02.646 A:middle
that it will do the right thing.

00:37:03.666 --> 00:37:05.056 A:middle
And that's it, that's
all we need to do.

00:37:05.656 --> 00:37:07.586 A:middle
With that change, let's
run the app again.

00:37:10.836 --> 00:37:11.906 A:middle
Pizza perfection.

00:37:12.176 --> 00:37:14.616 A:middle
So our Chevron is
flipped [applause].

00:37:15.046 --> 00:37:15.816 A:middle
Thank you.

00:37:19.246 --> 00:37:21.016 A:middle
Our Chevron is flipped,
our app looks great,

00:37:21.066 --> 00:37:24.456 A:middle
we have the translations,
custom gesture looks beautiful,

00:37:24.636 --> 00:37:25.466 A:middle
and we are ready to go.

00:37:25.776 --> 00:37:28.786 A:middle
That's how easy it can be to
localize your apps right to left

00:37:29.106 --> 00:37:32.656 A:middle
and back to Sara to finish
up the session for you guys.

00:37:38.046 --> 00:37:39.726 A:middle
&gt;&gt; SARA RADI: Thank you
Aaltan for the great demo.

00:37:39.936 --> 00:37:42.306 A:middle
So just to let you know we
will be posting the demo

00:37:42.306 --> 00:37:45.276 A:middle
that Aaltan gave us
today online soon,

00:37:45.336 --> 00:37:47.796 A:middle
so if you missed anything during
the session, please feel free

00:37:47.796 --> 00:37:50.906 A:middle
to download the simple
code and look at it.

00:37:51.526 --> 00:37:56.376 A:middle
So to summarize before closing
the session, keep in mind

00:37:56.376 --> 00:37:58.786 A:middle
when you are designing your
app for right-to-left languages

00:37:58.786 --> 00:38:03.256 A:middle
that natives of these language
expect right-to-left UI,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:58.786 --> 00:38:03.256 A:middle
that natives of these language
expect right-to-left UI,

00:38:03.256 --> 00:38:04.706 A:middle
and this is a perfect
opportunity

00:38:04.706 --> 00:38:08.046 A:middle
with the new native UIKit
support that we add it on iOS 9,

00:38:08.556 --> 00:38:11.576 A:middle
it's a great opportunity for
you to add this localizations.

00:38:11.576 --> 00:38:16.166 A:middle
It takes no effort, and we also
added new APIs that will make it

00:38:16.296 --> 00:38:21.026 A:middle
so easy not only for non-native-
the native developers,

00:38:21.026 --> 00:38:22.966 A:middle
but also for non-native
developers.

00:38:23.576 --> 00:38:26.416 A:middle
And also it's your
opportunity to reach millions

00:38:26.416 --> 00:38:27.876 A:middle
of users and new markets.

00:38:28.556 --> 00:38:34.136 A:middle
And for more information, please
visit our documentation website

00:38:34.136 --> 00:38:36.836 A:middle
at developer.Apple.com
we have documentation

00:38:36.836 --> 00:38:39.766 A:middle
for internationalization
and also for localization

00:38:40.026 --> 00:38:42.866 A:middle
and if you have questions, also
post them in the Dev forums.

00:38:44.586 --> 00:38:46.256 A:middle
We also recommend that you go

00:38:46.256 --> 00:38:47.716 A:middle
and watch these relates
sessions.

00:38:47.866 --> 00:38:49.356 A:middle
I highly recommend
the What's New

00:38:49.356 --> 00:38:52.386 A:middle
in Internationalization tomorrow
at 9:00 a.m. so thank you,

00:38:52.386 --> 00:38:56.016 A:middle
thank you so much for coming
and have a great afternoon!

00:38:56.206 --> 00:38:56.646 A:middle
Thanks!

00:38:58.516 --> 00:39:09.790 A:middle
[ Applause ]

