WEBVTT

00:00:07.370 --> 00:00:09.880
>> Kerry Hazelgren: Good afternoon!

00:00:09.880 --> 00:00:14.550
This is Developing Your App with
Xcode 4 and I am Kerry Hazelgren.

00:00:14.550 --> 00:00:16.610
Helps to show that.

00:00:16.610 --> 00:00:26.410
So today, as you've probably seen by now, Xcode 4 is
a pretty major redesign of the product and my team

00:00:26.410 --> 00:00:33.530
in particular one of the things we've focused
on is the workflow of editing source code.

00:00:33.530 --> 00:00:40.580
Editing, maintaining, debugging, anything to
do with your source code, the whole workflow.

00:00:40.580 --> 00:00:45.340
Those are some of the things that we looked at
in the new design and some of the primary goals

00:00:45.340 --> 00:00:54.550
that we had were better navigation, smarter navigation to
provide more information and more accurate information.

00:00:54.550 --> 00:00:58.890
Overall basically to make you more
efficient when you're doing your developing.

00:00:58.890 --> 00:01:06.700
Some of the things we'll talk about today, if
you were in the intro session just before us,

00:01:06.700 --> 00:01:09.240
you may have seen some of these things introduced.

00:01:09.240 --> 00:01:12.280
We'll go more into detail on them.

00:01:12.280 --> 00:01:17.320
They got to go first so they kind of got to
seal our thunder but their demos crashed so.

00:01:17.320 --> 00:01:19.420
[ Laughter ]

00:01:19.420 --> 00:01:23.330
I'm pretty confident that ours
won't but with fingers crossed.

00:01:23.330 --> 00:01:26.070
We'll start talking about source control.

00:01:26.070 --> 00:01:27.340
Now, don't leave.

00:01:27.340 --> 00:01:33.860
I mean, I know it's normally not a very interesting
topic but in Xcode 4, I think we've done,

00:01:33.860 --> 00:01:38.310
we've done a lot to make it interesting and I
think we are doing some innovative new things.

00:01:38.310 --> 00:01:43.630
We'll also talk about the Source Editor
and improvements that we've made there.

00:01:43.630 --> 00:01:51.250
Find/replace when you want to do large scale changes
to your source code and off with the version editor

00:01:51.250 --> 00:01:58.900
which really shows the polish of the STM integration
so, we're going to be pretty demo heavy today.

00:01:58.900 --> 00:02:01.540
We're not going to have a lot of
slides because I think it's best

00:02:01.540 --> 00:02:09.740
to actually show you so, I'm going
to get over to a demo here.

00:02:09.740 --> 00:02:14.690
OK, so here I am with Xcode and I
want to start working with a project.

00:02:14.690 --> 00:02:21.310
I've got a project here that I checked out from its old
version repository but I did that on another machine

00:02:21.310 --> 00:02:27.920
and I copied it over here and I don't have that
repository information configured in Xcode.

00:02:27.920 --> 00:02:35.360
Normally, you have to go to repositories and set that all
up and type in these long URLs which I don't like to do,

00:02:35.360 --> 00:02:41.410
and let me just verify that I don't have that by
going to the repositories pane in the organizer.

00:02:41.410 --> 00:02:45.930
You can get there by going to the Window
menu and coming down to Organizer.

00:02:45.930 --> 00:02:49.600
And here's my repository's pane, nothing there.

00:02:49.600 --> 00:02:52.040
So, what am I going to do?

00:02:52.040 --> 00:03:00.170
Well, in Xcode 4, all I have to do is open the project.

00:03:00.170 --> 00:03:05.290
Now, if I can see in just second if
the network's cooperating, there we go.

00:03:05.290 --> 00:03:07.520
We're already getting status information.

00:03:07.520 --> 00:03:09.360
So, how is that possible?

00:03:09.360 --> 00:03:16.380
Well, in Xcode 4, if I go back to the repository viewer,
you can see, it's been configured automatically for you.

00:03:16.380 --> 00:03:23.340
So, all I have to do really is, let Xcode
take care of it but that's aversion.

00:03:23.340 --> 00:03:24.920
What about Gits?

00:03:24.920 --> 00:03:27.230
How many people out there use Git?

00:03:27.230 --> 00:03:29.010
Quite a few.

00:03:29.010 --> 00:03:30.320
[ Applause ]

00:03:30.320 --> 00:03:30.840
Quite a few.

00:03:30.840 --> 00:03:32.080
Git is the new hotness.

00:03:32.080 --> 00:03:32.740
[ Laughter ]

00:03:32.740 --> 00:03:41.440
It is. So, what I want to do is get a Git project
and I'm going to do that by going to GitHub.

00:03:41.440 --> 00:03:51.220
Now if you're not familiar with GitHub, it is a website
which hosts Git repositories of open source software.

00:03:51.220 --> 00:03:55.120
Now, there's one repository in
particular that I'm interested in.

00:03:55.120 --> 00:04:01.480
It is called Handshake, it's an iPhone application.

00:04:01.480 --> 00:04:10.990
So what I'm going to do is just take this URL here and copy
it and then I'm going to come back to Xcode and add this,

00:04:10.990 --> 00:04:20.970
type in the name Handshake and paste
the URL, here we go, and click At.

00:04:20.970 --> 00:04:25.000
Now, the only thing we really did there was
just-- was add a bookmark to that repository.

00:04:25.000 --> 00:04:31.800
But once I have that down here, I can click this
Clone button in the Toolbar to clone that repository

00:04:31.800 --> 00:04:40.530
and I will choose a location and hit Clone and it's
going to start checking it out and when it's done,

00:04:40.530 --> 00:04:44.510
it senses that there's an Xcode project
in there and all I have to do is hit Open.

00:04:44.510 --> 00:04:53.070
[ Applause ]

00:04:53.070 --> 00:05:00.040
So it's really easy to use GitHub with Xcode to check
out or rather clone projects and start using them.

00:05:00.040 --> 00:05:05.120
Now, before I begin to edit this project,
I'm just going to give it a quick build

00:05:05.120 --> 00:05:08.440
so that I know if I introduce any changes.

00:05:08.440 --> 00:05:14.100
It looks there are a few issues with this project but
they're not mine, I'm not going to worry about them

00:05:14.100 --> 00:05:21.900
and we can see the nice new activity viewer
here in Xcode showing us our progress

00:05:21.900 --> 00:05:25.570
and the app comes up and launches just fine.

00:05:25.570 --> 00:05:27.620
Great! So it's a good starting point.

00:05:27.620 --> 00:05:30.420
We're going to begin to edit our project.

00:05:30.420 --> 00:05:36.630
So, I would like to introduce Daniel
Gobera to talk about the Source Editor.

00:05:36.630 --> 00:05:38.160
>> Daniel Gobera: I like to guide you now through some

00:05:38.160 --> 00:05:42.570
of the improvements we have in
the source code editor in Xcode 4.

00:05:42.570 --> 00:05:49.830
We have a ton of new stuff so I'm going to concentrate
in just three main areas, that's going to be navigation.

00:05:49.830 --> 00:05:54.790
How you navigate through the files of your project,
how do you find the one you're looking for?

00:05:54.790 --> 00:06:02.290
I'm going to talk about editing, writing the code
of your application and how can Xcode help you.

00:06:02.290 --> 00:06:05.160
And finally, I want to talk about error checking.

00:06:05.160 --> 00:06:13.280
How Xcode can help you, not only find but also
prevent and even correct errors in the code.

00:06:13.280 --> 00:06:20.330
So I'm going to jump directly into the
demo and show you those features in action.

00:06:20.330 --> 00:06:27.770
So, for Xcode 4 we asked ourselves, what
are the most common navigation patterns

00:06:27.770 --> 00:06:31.130
that people follow when working in a project?

00:06:31.130 --> 00:06:40.250
What we found is that one of the most common things is to
work in the implementation and the interphase of a class.

00:06:40.250 --> 00:06:46.250
Jumping back and forth all the time between those, so you
declare a method in the header go to the implementation

00:06:46.250 --> 00:06:48.830
and you will write the code for that method, back and forth.

00:06:48.830 --> 00:06:58.680
Well, we wanted to support that kind of navigation pattern
better so what we came up with is the Assistant Editor.

00:06:58.680 --> 00:07:05.550
So what you're seeing here is the Assistant,
it's going to show you a secondary editor.

00:07:05.550 --> 00:07:13.730
Next to the main one that is going to show a related
file to the one you're working on, on the main editor.

00:07:13.730 --> 00:07:16.340
By default, it's going to show you the counterpart

00:07:16.340 --> 00:07:21.040
but the Assistant has a deep knowledge
of the structure of your code.

00:07:21.040 --> 00:07:22.960
So it can show you a lot more than that.

00:07:22.960 --> 00:07:27.260
It can show you the superclasses, the subclasses, siblings.

00:07:27.260 --> 00:07:31.720
It can show you other classes that inherent
from the same superclass so in this case,

00:07:31.720 --> 00:07:36.130
I can see all the view controllers
that I have in my project.

00:07:36.130 --> 00:07:42.100
And something that is really cool, it can
show you not only the files I'm including

00:07:42.100 --> 00:07:46.210
but the files that are including my own file.

00:07:46.210 --> 00:07:51.860
So, if I were to make a change to this
header, I wonder who may I be breaking

00:07:51.860 --> 00:07:56.800
and it will show me, OK, this other file is including it.

00:07:56.800 --> 00:08:04.870
Now, the Assistant as you navigate around your project
is going to-- not including I want counterpart.

00:08:04.870 --> 00:08:10.480
It's going to track live whatever
you load on the main editor.

00:08:10.480 --> 00:08:18.570
Now, where this really shines is that it not only applies
to source code, it applies to all kinds of editors.

00:08:18.570 --> 00:08:22.100
The most common case is when you're working
in the interphase of your application.

00:08:22.100 --> 00:08:29.680
Let's say you're working on a name on the
interphase and this case it's an e-mail model view

00:08:29.680 --> 00:08:36.320
and the Assistant is going to show you
the code that directly affects this view.

00:08:36.320 --> 00:08:43.090
In this case, the view controller so you can write
the code, write there that affects this interphase.

00:08:43.090 --> 00:08:50.560
It will show you also the headers of other
views you may be using in this interphase.

00:08:50.560 --> 00:08:57.740
Alright, I want to show you a little
trick when using the Assistant.

00:08:57.740 --> 00:09:04.830
So, whenever you press the Option Key and perform
some kind of navigation, let's say clicking on a file

00:09:04.830 --> 00:09:12.650
in the navigator, it will open it in the secondary
editor so you can keep working on your main file

00:09:12.650 --> 00:09:16.360
and open something else for reference
in the secondary editor.

00:09:16.360 --> 00:09:19.230
Now, this works for all kinds of navigation.

00:09:19.230 --> 00:09:22.120
Not just when clicking on a file in the navigator.

00:09:22.120 --> 00:09:28.930
You may know that when you press Command and double
click on a symbol, it would take you to the declaration

00:09:28.930 --> 00:09:35.940
of that symbol while if you press again with the
Option key so Command option and double click,

00:09:35.940 --> 00:09:43.510
it will open it in the secondary editor so it
doesn't throw you far away from your context.

00:09:43.510 --> 00:09:49.250
[ Applause ]

00:09:49.250 --> 00:09:54.090
So you can keep working on your main
file, open something else for reference.

00:09:54.090 --> 00:09:58.040
Alright. This also works when you're using Open Quickly.

00:09:58.040 --> 00:10:09.270
So in this case, I want to open,
I don't know NSArray, alright.

00:10:09.270 --> 00:10:15.220
So if I press Option and open it again
it's going to open the second writer.

00:10:15.220 --> 00:10:19.760
So, remember the Option key is going
to open things in the secondary.

00:10:19.760 --> 00:10:24.210
Now, that is the Assistant Editor.

00:10:24.210 --> 00:10:27.580
I would like to talk a bit about code completion.

00:10:27.580 --> 00:10:33.430
In Xcode 4, we have a completely new
back end to generate completions.

00:10:33.430 --> 00:10:41.270
The really nice thing about it is that is ties directly
with the LLVM compiler and who knows better what is valid

00:10:41.270 --> 00:10:44.240
at certain points in the code than the compiler.

00:10:44.240 --> 00:10:50.120
So, we are able to generate much more accurate completions
and of course something I know a lot of you are going

00:10:50.120 --> 00:10:56.510
to like is C++ completions so full
support for C++ which is pretty cool.

00:10:56.510 --> 00:11:00.380
[ Applause ]

00:11:00.380 --> 00:11:04.860
Let me show some of that in a demo.

00:11:04.860 --> 00:11:10.540
So, I'm working on the same project.

00:11:10.540 --> 00:11:13.700
Let me open counterpart.

00:11:13.700 --> 00:11:19.270
So normally, when you're working in
the interface and implementation, well,

00:11:19.270 --> 00:11:22.190
let's say you're adding a new method to this class.

00:11:22.190 --> 00:11:36.140
So I want this to return an image and let's say its called
image of size its going to receive a size parameter.

00:11:36.140 --> 00:11:40.590
Now, normally what you would do is just select this,

00:11:40.590 --> 00:11:45.520
copy it and paste it in the implementations
to actually write the code for it.

00:11:45.520 --> 00:11:53.330
Well, that is last century because we have what I
think is a better way of doing this kind of thing.

00:11:53.330 --> 00:12:01.540
If you just start typing the name of the method,
and press CTRL-Space to bring up the completion,

00:12:01.540 --> 00:12:05.920
it actually knows what methods you
have not implemented in this class yet.

00:12:05.920 --> 00:12:09.510
And it will suggest them as completions.

00:12:09.510 --> 00:12:15.280
[ Applause ]

00:12:15.280 --> 00:12:17.380
So, I think that's going to save you a lot of time.

00:12:17.380 --> 00:12:18.630
It's actually pretty cool to use.

00:12:18.630 --> 00:12:25.090
So all you have to do is accept the completion
and yeah, let's implement that later.

00:12:25.090 --> 00:12:27.260
For now, I will just return here.

00:12:27.260 --> 00:12:29.430
So, that's one thing about code completion.

00:12:29.430 --> 00:12:31.450
Let me show you C++.

00:12:31.450 --> 00:12:36.550
I have a C++ file on this project.

00:12:36.550 --> 00:12:44.060
So now you can do things like, I don't know, using namespace

00:12:44.060 --> 00:12:48.930
and it will tell you what are the
available namespaces you can use here.

00:12:48.930 --> 00:12:50.930
So, you can accept the completion.

00:12:50.930 --> 00:12:57.820
It can also tell you what is available
for a certain namespace.

00:12:57.820 --> 00:13:06.620
So well, I'm actually not really a C++ guy so it's
kind of a lame demo but please try it out for yourself.

00:13:06.620 --> 00:13:09.340
You'll find that it's pretty cool.

00:13:10.570 --> 00:13:13.630
One more thing I want to show you about code completion.

00:13:13.630 --> 00:13:20.260
You may notice that some of the
completions have this gray icon.

00:13:20.260 --> 00:13:22.300
This stuff they showed in the previous session.

00:13:22.300 --> 00:13:31.700
These come from the snippets library and the
snippets library is over here on the right.

00:13:31.700 --> 00:13:39.310
It is second top to the right and
snippets are little fragments of code

00:13:39.310 --> 00:13:42.770
that you can reuse over and over in your application.

00:13:42.770 --> 00:13:51.520
In a way, they are similar to the Xcode 3 Macros
but they have a couple of huge advantages.

00:13:51.520 --> 00:13:56.320
We have received a ton of feedback and
one of the biggest things people want

00:13:56.320 --> 00:14:00.920
to do is being able to create and edit them easily.

00:14:00.920 --> 00:14:03.570
So now, they are part of your workspace.

00:14:03.570 --> 00:14:06.580
They are part of the IDE itself.

00:14:06.580 --> 00:14:09.390
Let me show you an example.

00:14:09.390 --> 00:14:17.450
So, if anybody has to use Grand Central
Dispatch, there's a ton of very useful stuff.

00:14:17.450 --> 00:14:19.970
One of my favorite functions is something called Dispatch.

00:14:19.970 --> 00:14:27.820
Once that will guarantee that some code is executed only
once and that it's executed in a thread safe manner.

00:14:27.820 --> 00:14:30.780
The problem is that it requires quite a bit of setup.

00:14:30.780 --> 00:14:33.920
You have to declare a static token.

00:14:33.920 --> 00:14:36.960
So, let's say it is Dispatch Once T.

00:14:36.960 --> 00:14:44.030
Let's call these ones and then in
the next line, you call the function.

00:14:44.030 --> 00:14:52.830
So, it's Dispatch Once, that's the function I
want and the-- its first parameter is the token.

00:14:52.830 --> 00:14:58.510
You send a pointer to the token and a block.

00:14:58.510 --> 00:15:04.260
When using blocks, it maybe easy to forget the semicolon.

00:15:04.260 --> 00:15:09.070
So, this is quite some setup that we
have to do and it's the same every time.

00:15:09.070 --> 00:15:13.050
I don't want to ever have to type this again.

00:15:13.050 --> 00:15:21.040
All you have to do is select it, drag it to the
Library and it's going to be yours to keep forever.

00:15:21.040 --> 00:15:23.880
So, it's right here, you can go edit.

00:15:23.880 --> 00:15:29.820
Let's give it a name, its called Dispatch Once.

00:15:29.820 --> 00:15:34.300
And if you notice, there's something
called the completion shortcut.

00:15:34.300 --> 00:15:44.460
This is going to be a keyword that you choose that is going
to be used to invoke these snippets from code completion.

00:15:44.460 --> 00:15:48.700
So, in this case, I'm going to call this dionce.

00:15:48.700 --> 00:15:53.110
Well, if you want to get fancy,
you can call it dioncÃ©.

00:15:55.070 --> 00:15:57.130
[Laughter] So that's going to be my snippet.

00:15:57.130 --> 00:16:05.470
Later on, you're working on some other code, and until you
want to use it, all you have to do is start typing the name

00:16:05.470 --> 00:16:07.950
in both code completion, and it's going to there.

00:16:07.950 --> 00:16:12.510
You choose it from the list and
it will auto complete to that.

00:16:12.510 --> 00:16:17.780
[ Applause ]

00:16:17.780 --> 00:16:19.330
Let me show one final trick.

00:16:19.330 --> 00:16:27.460
You may want to have placeholders for tokens of,
you know, where-- whenever you use this completion,

00:16:27.460 --> 00:16:30.270
this snippet, where should you put your code?

00:16:30.270 --> 00:16:40.610
So, if you type the secret sauce, it is opening
in the bracket the cast tag and then close it.

00:16:40.610 --> 00:16:43.240
That's going to turn into a token.

00:16:43.240 --> 00:16:54.800
So, when you use it, let's see, it's going to insert a
token ready for you to edit, and you can have as many tokens

00:16:54.800 --> 00:16:59.490
as you want and you jump to them with tab.

00:17:00.510 --> 00:17:05.940
[ Applause ]

00:17:05.940 --> 00:17:09.440
Alright. So, those are some of the
improvements to code completion.

00:17:09.440 --> 00:17:13.700
I want to show one final feature of the Source Editor.

00:17:13.700 --> 00:17:17.860
Usually, you have to wait until
you build your project to find

00:17:17.860 --> 00:17:21.980
out about errors and warnings you may have in your code.

00:17:21.980 --> 00:17:28.570
Well, in Xcode 4, it's going to be reading and
analyzing what you type in the background all the time,

00:17:28.570 --> 00:17:33.570
and they can tell you immediately
if you have a problem in your code.

00:17:33.570 --> 00:17:40.690
So, for example, in this method, I have a--
to do that, I have to generated a preview.

00:17:40.690 --> 00:17:45.570
So, all I have to do is call the self-method.

00:17:45.570 --> 00:17:51.810
It was called, I think, generate preview.

00:17:51.810 --> 00:17:54.730
Well, and a yellow underline appears.

00:17:54.730 --> 00:17:58.460
That's telling me there is something wrong in this code.

00:17:58.460 --> 00:18:03.040
And when you see a yellow underline,
you really, really have to listen to it,

00:18:03.040 --> 00:18:06.560
this is going to save you a trip to the Issues Navigator.

00:18:06.560 --> 00:18:11.020
It's going to save you a full bill cycle
just to find that you have a problem.

00:18:11.020 --> 00:18:17.010
It may save you from an embarrassing crash when
you're trying to show the new code to someone.

00:18:17.010 --> 00:18:21.520
It may save you from causing a time continuum paradox.

00:18:21.520 --> 00:18:24.060
[Laughter] So, please listen to the yellow underline.

00:18:24.060 --> 00:18:28.650
And if you click on the icon, it's
going to tell you, "What's the problem?"

00:18:28.650 --> 00:18:32.240
"Oh, it's not that but, I just
forgot to implement that method."

00:18:32.240 --> 00:18:35.840
So, I'm going to implement it later.

00:18:35.840 --> 00:18:46.290
Now, that is one-- the Fix-it that is running in the
background is able to catch a wide variety of problems.

00:18:46.290 --> 00:18:47.560
That is one of them.

00:18:47.560 --> 00:18:51.030
It can also catch other things like, I don't know.

00:18:51.030 --> 00:19:00.610
If anybody here is new to Objective-C, you may find
that strings are not the same as what you're used to.

00:19:00.610 --> 00:19:09.210
So, if you want to set the title of this view,
in this case, it's giving me a red underline

00:19:09.210 --> 00:19:14.090
that means it not only found the problem,
but it actually has a suggestion for me.

00:19:14.090 --> 00:19:22.320
In this case, it's telling me, "Hey, you need an @
symbol before this string because this is not a C-string,

00:19:22.320 --> 00:19:26.700
this is an NSString that you use in
Cocoa, so please add an @ symbol."

00:19:26.700 --> 00:19:31.510
And you can actually tell it, "OK, well, you
know, the fix, so please apply it for me."

00:19:31.510 --> 00:19:38.650
[ Applause ]

00:19:38.650 --> 00:19:40.250
And that is Fix-it.

00:19:40.250 --> 00:19:46.350
We hope that saves you a lot of time and
a lot of headaches when writing your code.

00:19:46.350 --> 00:19:50.290
So, just to summarize what we saw, the Assistant Editor,

00:19:50.290 --> 00:19:54.910
it can show you related files in
the secondary editor all the time.

00:19:54.910 --> 00:19:59.010
It will save you a lot of jumping
around, a lot of navigation.

00:19:59.010 --> 00:20:02.230
Things will be right there where you need it.

00:20:02.230 --> 00:20:08.050
Improvements of code completion using the LLVM
backend to produce more accurate completions,

00:20:08.050 --> 00:20:14.420
not having to save the files, the header files,
and they will still be included in the completions.

00:20:14.420 --> 00:20:16.980
And of course C++ completions.

00:20:16.980 --> 00:20:25.160
Code snippets, being able to save the fragments of
code you use over and over and how to integrate them

00:20:25.160 --> 00:20:27.880
with code completion with a completion shortcut.

00:20:27.880 --> 00:20:39.470
And of course, Fix-it, being able to find and even
correct common problems in the code as you type it.

00:20:39.470 --> 00:20:45.200
OK. Now, I would like to call Chris Ryan and he's going
to talk to you about improvements to Find/Replace.

00:20:45.200 --> 00:20:46.250
>> Christopher Ryan: Thank you, Daniel.

00:20:46.250 --> 00:20:52.230
So, you've seen how we can use great new features in Xcode
4 and the Source Editor to improve your code workflow.

00:20:52.230 --> 00:20:58.200
One of the workflows that many of you will use after
you've written some of your code is Find/Replace.

00:20:58.200 --> 00:21:01.340
We've done a bunch of things to help improve that workflow.

00:21:01.340 --> 00:21:03.850
I'm going to talk about a few of them today.

00:21:03.850 --> 00:21:10.300
The first one is updates to our in-editor find script,
which allows you to quickly search within a single editor,

00:21:10.300 --> 00:21:14.340
and you saw some demos of that earlier today.

00:21:14.340 --> 00:21:16.070
The second one is the Search Navigator.

00:21:16.070 --> 00:21:18.550
The Search Navigator is the place you go in Xcode

00:21:18.550 --> 00:21:22.350
to do searches throughout all your
files within your workspace or projects.

00:21:22.350 --> 00:21:27.480
And finally, anybody who went to the last
session saw the Find/Replace preview,

00:21:27.480 --> 00:21:32.420
and that's really the thing you can use to preview
your replace before you hit that Replace button.

00:21:32.420 --> 00:21:37.190
It really helps make sure that you know what's going
to happen before you press that Replace button.

00:21:37.190 --> 00:21:40.540
So, I've been talking about that,
let's give you a quick demo.

00:21:40.540 --> 00:21:42.410
So, we're in our window here.

00:21:42.410 --> 00:21:49.790
Before I start, I just want to talk a little bit
about the filter on the bottom here, there you go.

00:21:49.790 --> 00:21:55.460
There are several ways you can filter the Project
Navigator, and this is a great way to work

00:21:55.460 --> 00:21:57.780
with your project on the files that you use often.

00:21:57.780 --> 00:22:00.950
The first one is the recently edited files.

00:22:00.950 --> 00:22:06.550
As you can see, here are all the files
we've used throughout our demo today.

00:22:06.550 --> 00:22:11.420
The second one are all the files with the
SCM status, so this is the file we've edited.

00:22:11.420 --> 00:22:15.930
And of course if you had updates on your
server you'd see those as well here.

00:22:15.930 --> 00:22:20.630
The third one are all the files that are unsaved.

00:22:20.630 --> 00:22:23.540
And finally, you can just type in filter by name.

00:22:23.540 --> 00:22:26.990
And sometimes, you might have a set of files
with all similar name that you want to work on.

00:22:26.990 --> 00:22:29.390
It's such a great way to get to those.

00:22:29.390 --> 00:22:33.770
So, I'm going to filter that right and real quick.

00:22:33.770 --> 00:22:36.530
So, the Find bar.

00:22:36.530 --> 00:22:38.770
The Find bar is introduced in Xcode 3.2.

00:22:38.770 --> 00:22:42.250
It allows you to easily and quickly search
throughout things within your editors.

00:22:42.250 --> 00:22:46.890
And as we've seen, it works in Source
Editors as well as other editors in Xcode 4.

00:22:46.890 --> 00:22:51.570
It's simple to use, just use command
F to bring it up, and start typing.

00:22:51.570 --> 00:22:57.350
As you start typing, we search and find all the results
that match and jumped to the results that make sense,

00:22:57.350 --> 00:23:02.140
and I continue to type and find eleven results here.

00:23:02.140 --> 00:23:08.100
Now, one of the big things that we got a lot of feedback on
was it was hard to know exactly what the find bar was doing

00:23:08.100 --> 00:23:11.560
when it did its search, what the
configuration was for the search.

00:23:11.560 --> 00:23:13.660
So, we've made it much easier to see the Find options.

00:23:13.660 --> 00:23:18.360
We can just show the Find options and see them at all times,
so you know exactly what's happening when you do your find.

00:23:18.360 --> 00:23:20.390
So, I'm going to go here.

00:23:20.390 --> 00:23:23.110
I'm just going to change the case sensitivity.

00:23:23.110 --> 00:23:25.880
Instead of ignoring case, we're going to match case.

00:23:25.880 --> 00:23:29.660
As you can see when I do that, I now only have nine results.

00:23:29.660 --> 00:23:35.480
Now, one of the other places we've gotten feedback about
is about reasons in jumping back to our recent searches.

00:23:35.480 --> 00:23:41.050
Typically, it only shows the recent text that you typed,
but you may have change around different configurations

00:23:41.050 --> 00:23:44.790
and change the way you're searching, searching
for a whole word or beginning of a word.

00:23:44.790 --> 00:23:46.750
We've made that much easier as well.

00:23:46.750 --> 00:23:50.760
So, I go here, I see all the different
characters and text that I typed as well

00:23:50.760 --> 00:23:53.220
as the different criteria for the search.

00:23:53.220 --> 00:23:55.160
I'll zoom it up real quick and show you.

00:23:55.160 --> 00:23:59.440
So, here is our first, first search
with handshake ignoring the case.

00:23:59.440 --> 00:24:04.160
As I click that, we find the eleven results again.

00:24:04.160 --> 00:24:06.760
So that's a brief update on the Find bar.

00:24:06.760 --> 00:24:11.630
The next thing I'll talk about is the Search Navigator.

00:24:11.630 --> 00:24:14.110
This is really the place you're
going to use to do all your searching

00:24:14.110 --> 00:24:16.770
within your project throughout all your files and system.

00:24:16.770 --> 00:24:24.920
I'm going to go and I'm just going to do quick searches
in the same criteria we did before, handshake, right?

00:24:26.190 --> 00:24:28.370
So, it's found 94 results.

00:24:28.370 --> 00:24:31.910
And one of the first things you may notice
is the first result is the property list.

00:24:31.910 --> 00:24:33.940
So, we do searches within property list.

00:24:33.940 --> 00:24:39.140
And as I select each one, it opens up individual
items, so you can see where the result is located.

00:24:39.140 --> 00:24:43.990
As we scroll down, of course, we're
finding results within source files.

00:24:43.990 --> 00:24:52.810
And if you look closely at this result here, you may notice
that it's got a special icon and the entire word is in bold,

00:24:52.810 --> 00:25:01.760
and that's because this result handshake was found within
a variable of the K-- HSK, we can get handshake URL touch.

00:25:01.760 --> 00:25:05.130
So, we can detect different symbols
that your search results within.

00:25:05.130 --> 00:25:09.960
So it's really easy to scrub down and look at your
search results and see that your search is found

00:25:09.960 --> 00:25:13.000
within a function name or method name or variable.

00:25:13.000 --> 00:25:19.680
But if we scroll all the way down, you'll notice we're
also finding things within your project settings.

00:25:19.680 --> 00:25:24.100
This is a great way-- and so, if we want
to rename our project, we have Handshake.

00:25:24.100 --> 00:25:28.050
We might search throughout all our source and rename
all the places that where Handshake is located.

00:25:28.050 --> 00:25:32.240
But sometimes, there's hidden settings and
different things within our project settings.

00:25:32.240 --> 00:25:37.510
And you can go in, find them, and also do
a replace right here in the Find Navigator.

00:25:37.510 --> 00:25:43.650
[ Applause ]

00:25:43.650 --> 00:25:47.460
So many of you are probably saying, "I
don't want to see results all those places.

00:25:47.460 --> 00:25:49.730
I just want to see them in many particular set of files."

00:25:49.730 --> 00:25:51.590
We've made this really easy.

00:25:51.590 --> 00:25:59.030
Just like the In-editor Find bar, we can show our options,
we can specify different configurations for our search,

00:25:59.030 --> 00:26:02.290
and we can also specify specific
scope that we want to search in.

00:26:02.290 --> 00:26:04.610
So by default, it's the entire workspace.

00:26:04.610 --> 00:26:07.910
I can also add all the link-- all the
headers in the linked framework as well.

00:26:07.910 --> 00:26:10.810
But I want to create a new scope.

00:26:10.810 --> 00:26:14.740
Let's create a scope that searches within
all of these source implementation files.

00:26:14.740 --> 00:26:18.510
So let's name that appropriately.

00:26:21.570 --> 00:26:25.960
OK. So the first criteria that's going
to search within the entire workspace.

00:26:25.960 --> 00:26:29.170
Now, if I'd want to create a search scope
that's without-- outside the workspace, I can.

00:26:29.170 --> 00:26:31.790
And I can search within user include, for example.

00:26:31.790 --> 00:26:38.610
But when I search in the workspace, I'm going to
add in a second criteria, I want to search by type.

00:26:38.610 --> 00:26:42.940
So I want to find all the files in the
workspace that our source code files.

00:26:42.940 --> 00:26:46.100
But I only want to show the implementation files.

00:26:46.100 --> 00:26:47.420
I don't want to show the headers.

00:26:47.420 --> 00:26:56.070
So let's change-- add another criteria, and we're going
to find all of the files that are not header files.

00:26:56.070 --> 00:26:59.780
So it's really easy to create a scope,
specifically for what are you looking for.

00:26:59.780 --> 00:27:00.810
Click Done.

00:27:00.810 --> 00:27:08.000
Now, as Xcode automatically sets your scope as a scope that
is used for your search, and we can just hit Enter here.

00:27:08.000 --> 00:27:12.990
And now, we have only 38 results
only within our implementation files.

00:27:12.990 --> 00:27:14.680
There you go.

00:27:14.680 --> 00:27:14.920
So--

00:27:14.920 --> 00:27:15.800
[ Applause ]

00:27:15.800 --> 00:27:18.280
You can clap.

00:27:20.500 --> 00:27:23.760
So we've done some finds, and that's
great, and we can find different pieces

00:27:23.760 --> 00:27:27.730
within our project, within plist files and source files.

00:27:27.730 --> 00:27:30.350
But the next thing you want to do is replace.

00:27:30.350 --> 00:27:37.060
So to make this interesting, we started this
project out and we started to replace all instances

00:27:37.060 --> 00:27:39.500
of NSLocalizedString with our own custom version.

00:27:39.500 --> 00:27:42.270
I'm going to bring that up right now.

00:27:42.270 --> 00:27:43.720
Use open quickly here.

00:27:43.720 --> 00:27:47.000
One of the cool features is that--
I didn't show that off very well.

00:27:47.000 --> 00:27:52.670
You can-- can't use this fuzzy logic and I can
magic in something that's not the exact name there.

00:27:52.670 --> 00:27:54.300
Open that up.

00:27:54.300 --> 00:27:58.360
So here's our new version of NSLocalizedString that
we want to use for debugging within our project.

00:27:58.360 --> 00:28:05.750
And if you look closely here, you have three arguments: the
key, a default value, that's a value you want to specify

00:28:05.750 --> 00:28:10.160
if the key can't be found, it's not
translated, as well as the comment.

00:28:10.160 --> 00:28:13.860
So that's what we want to make
all versions of NSLocalizedString.

00:28:13.860 --> 00:28:19.480
So I'm going to go now and we're going to go
search for NSLocalizedString in our project.

00:28:19.480 --> 00:28:22.470
So let's look at one of those.

00:28:22.470 --> 00:28:28.170
So-- and here's NSLocalizedString,
and it's got two arguments.

00:28:28.170 --> 00:28:32.380
It's got the key and the comment.

00:28:32.380 --> 00:28:39.970
So we need to come up with a search that can find
all NSLocalizedString, take the first argument

00:28:39.970 --> 00:28:45.270
and the second argument, and properly places
into the new call of our new function.

00:28:45.270 --> 00:28:51.090
So to do that, we're going to Replace mode here, I'm
going to write a regular expression, it's going to--

00:28:51.090 --> 00:28:53.900
hopefully, I can get this right on stage here.

00:28:53.900 --> 00:29:01.900
So we're going to match-- do a sub-expression
match to find the first argument.

00:29:03.090 --> 00:29:08.270
Second argument, and close out that function hall.

00:29:08.270 --> 00:29:13.640
And one thing you may notice is that Xcode automatically
detects that whatever written is a valid regular expression,

00:29:13.640 --> 00:29:16.240
and it allows me to change my search strategy.

00:29:16.240 --> 00:29:21.630
So I'm not only searching for a textual exact match here,
but now, I can change to a regular expression match.

00:29:21.630 --> 00:29:24.070
So let's select that.

00:29:24.070 --> 00:29:25.950
So here are the results that it's found.

00:29:25.950 --> 00:29:31.340
And it's also-- it's prepared to allow--
it's set up so we can easily do the replace.

00:29:31.340 --> 00:29:32.830
So let's do that right now.

00:29:32.830 --> 00:29:41.890
When it take HSLocalizedString, and we want the
first sub-expression found to be the first argument.

00:29:41.890 --> 00:29:45.830
And the new default value argument,
we don't have a value for here.

00:29:45.830 --> 00:29:47.840
So we're going to set that as No.

00:29:47.840 --> 00:29:50.290
Actually zoom in so it's easy to read.

00:29:50.290 --> 00:29:54.680
And then the third argument is going to be
the second argument for NSLocalizedString.

00:29:54.680 --> 00:29:58.390
So let's zoom out.

00:29:58.390 --> 00:30:01.840
Alright. So I only have 13 results
here, but it's still kind of scary.

00:30:01.840 --> 00:30:04.820
I don't know if I got this exactly right.

00:30:04.820 --> 00:30:10.050
But we have something called the Find/Replace preview that
makes it really easy to preview what's going to happen.

00:30:10.050 --> 00:30:12.250
So, let's try that.

00:30:12.250 --> 00:30:19.890
So, on the left hand side you're going to see the
documents, the code as it is in your document right now

00:30:19.890 --> 00:30:24.850
and on the right hand side it's a preview of
what will happen when you hit the Replace button.

00:30:24.850 --> 00:30:28.940
So, let's quickly look through here
and see if it's done the right thing.

00:30:28.940 --> 00:30:30.270
We have NSLocalizedString.

00:30:30.270 --> 00:30:37.330
We have our two arguments and we have
HSKLocalizedString and we have three arguments.

00:30:37.330 --> 00:30:40.090
So, we've got this just right and that's great.

00:30:40.090 --> 00:30:46.480
So now we can go through and just select the results
that we like and simply hit the Replace button.

00:30:46.480 --> 00:30:51.780
So to replace those two results, on the left
hand side here, we have a check mark to tell us

00:30:51.780 --> 00:31:00.770
that we've replaced those results and on the left hand
side of our editor we have the update of our results

00:31:00.770 --> 00:31:04.660
because this is what it looks like within the current file.

00:31:04.660 --> 00:31:07.170
It's going to hide the preview mode here.

00:31:07.170 --> 00:31:09.390
And one of the thing you can do, you
might have seen in the state of union is.

00:31:09.390 --> 00:31:14.640
When you're done with the result, I can just delete
them and easily pair down my working set then continue

00:31:14.640 --> 00:31:17.410
to work on that data as I need to over time.

00:31:17.410 --> 00:31:20.510
So that is the Find/Replace Preview.

00:31:20.510 --> 00:31:27.090
[ Applause ]

00:31:27.090 --> 00:31:30.740
So one other thing when Kerry did the build in
the beginning he had this nice hud that came

00:31:30.740 --> 00:31:32.760
up and told them that the build was done.

00:31:32.760 --> 00:31:35.280
I don't have that in Find I'm a little jealous.

00:31:35.280 --> 00:31:38.400
So I'm going to show you something cool called the Alerts.

00:31:38.400 --> 00:31:42.330
Now the Alerts allow you to specify
specific Alerts for specific events.

00:31:42.330 --> 00:31:48.060
So we have Alerts for build, Build, Failure or Succeed,
testing, running and device store being complete.

00:31:48.060 --> 00:31:50.290
But I want to set an Alert for Find.

00:31:50.290 --> 00:31:55.870
So I'm going to show a Bessel Alert
and, you know, you can do other things.

00:31:55.870 --> 00:32:00.680
For example I could show the Find Navigator so if
you're doing a long running find and you go back

00:32:00.680 --> 00:32:04.520
to your code you continue to edit, you might want to
show the Find Navigator when the find is complete.

00:32:04.520 --> 00:32:09.220
But I'm going to one up Kerry and
have it speak the results here.

00:32:09.220 --> 00:32:10.750
Alex sounds good.

00:32:10.750 --> 00:32:13.290
So, let's try this again.

00:32:13.290 --> 00:32:16.510
Do a regular text search, and let's look for Handshake.

00:32:16.510 --> 00:32:24.130
[ Pause ]

00:32:24.130 --> 00:32:25.990
So, if you guys could hear the mouse over here.

00:32:25.990 --> 00:32:32.270
The little mouse voice, defined the Xcode
spoke the results here, unfortunately,

00:32:32.270 --> 00:32:35.140
it wasn't hooked up to the speakers but you get the idea.

00:32:35.140 --> 00:32:40.120
So, you can easily customize different events that
happened within Xcode so you know exactly what's going on.

00:32:40.120 --> 00:32:45.060
Alright, so just to summarize, we talked about some
of the small changes we've made to In-editor Find bar.

00:32:45.060 --> 00:32:48.960
We've heard lots of feedback from you guys on what works
and what doesn't work and we're going to continue to iterate

00:32:48.960 --> 00:32:51.870
on that and make this a great experience.

00:32:51.870 --> 00:32:54.340
We talked about the Search Navigator.

00:32:54.340 --> 00:32:59.390
This is the place you go within Xcode to search
throughout all the files in your workspace or projects

00:32:59.390 --> 00:33:01.780
and finding all different types of files.

00:33:01.780 --> 00:33:08.090
We showed you how you can easily scope that find so you can
search in only specific areas or specific types of files.

00:33:08.090 --> 00:33:12.420
And also how Xcode can detect regular
expressions, easily allow you to jump back

00:33:12.420 --> 00:33:15.310
and fourth between different search strategies.

00:33:15.310 --> 00:33:21.960
Finally, we showed you how Find/Replace preview gives you
a little more confidence in hitting that Replace button

00:33:21.960 --> 00:33:23.770
when you're changing a lot of things inside your project.

00:33:23.770 --> 00:33:29.790
So, next stop, I'm going to bring Ian
Baird to talk about the Version Editor.

00:33:29.790 --> 00:33:30.320
>> Ian Baird: Hi.

00:33:30.320 --> 00:33:35.240
I'm Ian Baird Xcode Software Engineer and today I'd
like to introduce you to what I consider to be one

00:33:35.240 --> 00:33:39.900
of the coolest new features of Xcode 4, the Version Editor.

00:33:39.900 --> 00:33:45.230
Much like many of you, I started as an NT Developer
and one of the hurdles that I faced was getting

00:33:45.230 --> 00:33:49.270
to use this raft of SCM tools Git, subversion.

00:33:49.270 --> 00:33:51.380
They don't have the easiest term, no interface.

00:33:51.380 --> 00:33:56.990
And many of you have known this and I think our team
has done a really good job and made just great strides

00:33:56.990 --> 00:34:01.420
for making this easier for you and getting
that information right up in your editor

00:34:01.420 --> 00:34:04.290
where you're going to be able to put it to great use.

00:34:04.290 --> 00:34:06.010
So, let's begin.

00:34:08.290 --> 00:34:13.400
The Version Editor consists of three main pieces.

00:34:13.400 --> 00:34:18.150
The first one is the Log Mode which brings
all of the revisions in your repository,

00:34:18.150 --> 00:34:20.380
right up into the editor where you can see them.

00:34:20.380 --> 00:34:23.040
It's truly awesome to be able to see this.

00:34:23.040 --> 00:34:28.860
You can see who committed it, when they committed it,
and why they committed it if you can deduce, you know,

00:34:28.860 --> 00:34:30.850
what their intention was from the commit message.

00:34:30.850 --> 00:34:37.820
Sometimes it could be difficult depending on
how much tequila was had the night before.

00:34:37.820 --> 00:34:40.160
Next there's Blame Mode.

00:34:40.160 --> 00:34:42.010
Awesome, awesome feature.

00:34:42.010 --> 00:34:47.020
Allows you to go through, block by block in
your file, show you again who committed it,

00:34:47.020 --> 00:34:49.670
when it was committed and why it was committed.

00:34:49.670 --> 00:34:53.320
Very sweet feature and you'll see why later.

00:34:53.320 --> 00:34:59.280
And finally there's a Comparison Mode which allows
you to take two revisions from your repository.

00:34:59.280 --> 00:35:04.610
Any arbitrary revision and compare them in a
file-merge style interface, it's really cool.

00:35:04.610 --> 00:35:05.820
But you know what?

00:35:05.820 --> 00:35:11.030
I know like you guys, talk is cheap, let's go to the demo.

00:35:11.030 --> 00:35:13.000
Chris made a couple of replacements.

00:35:13.000 --> 00:35:15.620
Let's take a look and see what he did.

00:35:15.620 --> 00:35:22.900
Going up here is the Version Editor,
loading, loading, excellent.

00:35:22.900 --> 00:35:26.320
HSKLocalizedString that looks good.

00:35:26.320 --> 00:35:30.170
You know what since this is an
editor, I should be able to do one

00:35:30.170 --> 00:35:34.960
or two really interesting things with it like make edits.

00:35:34.960 --> 00:35:42.270
I think since Handshake has been there, it's done that,
this should probably be changed to Handshake Rides Again.

00:35:42.270 --> 00:35:49.590
And as you can see the diff pops right
showing you exactly what was changed.

00:35:49.590 --> 00:35:54.710
You can even delete, add some spaces, do whatever you want.

00:35:54.710 --> 00:35:59.690
The next thing I'd like to draw your
attention to up here is the Jump Bar.

00:35:59.690 --> 00:36:04.720
The Jump Bar gives you a view into
the revisions in your repository.

00:36:04.720 --> 00:36:06.060
Let's go to a really old one.

00:36:06.060 --> 00:36:12.360
Let's find one from this Kyle guy to see what he did.

00:36:12.360 --> 00:36:19.070
Let's go older and older still.

00:36:19.070 --> 00:36:21.860
Well, that's the way the ball bounces.

00:36:21.860 --> 00:36:25.100
Sometimes with these demos things
don't necessarily come right out.

00:36:25.100 --> 00:36:29.130
So, you know what, let's move on to the next feature.

00:36:29.130 --> 00:36:33.400
If you're not a person who likes to twiddle the
Jump Bars to find revisions and you tend to think

00:36:33.400 --> 00:36:37.560
of things structured in a date, sort of centric way.

00:36:37.560 --> 00:36:44.350
Maybe you'd like to try out one of my personal
favorite features the Version Timeline accessible here

00:36:44.350 --> 00:36:48.690
with this handy little clock icon, in the center.

00:36:48.690 --> 00:36:53.030
You can see the revision on the left
and you can select any revision you'd

00:36:53.030 --> 00:36:56.340
like to, going back through time on the right.

00:36:56.340 --> 00:37:02.220
The thicker bars that stand for revision,
the thinner bars divide the dates.

00:37:02.220 --> 00:37:13.480
You can move left and right, changing the revisions
and the diffs will update most of the time.

00:37:13.480 --> 00:37:16.830
So here we go, let's dismiss the bar.

00:37:16.830 --> 00:37:19.690
And let's see it again, I kind of like that feature.

00:37:19.690 --> 00:37:28.330
If you hold Shift it goes extra slow,
kind of like my diffing engine right now.

00:37:28.330 --> 00:37:30.270
Anyway, that's a cool feature.

00:37:30.270 --> 00:37:36.330
Let's next go to the Log Mode that we talked about
earlier and view some of the revisions in our repository.

00:37:36.330 --> 00:37:44.320
Looking here, I made some call more efficient, obviously
it wasn't but let's jump back and see what it was.

00:37:44.320 --> 00:37:50.770
The Action button takes me back to the comparison
view so you can review your local file on the left

00:37:50.770 --> 00:37:57.870
of whichever file you had selected, in this case it was
head, versus the revision out of the Log Mode on the right.

00:37:57.870 --> 00:38:04.230
It's really cool, very, very useful for seeing what has gone
on in your repository especially if you're a consultant.

00:38:04.230 --> 00:38:06.480
You've just sat down with the new code base and you want

00:38:06.480 --> 00:38:10.620
to see how the code base has changed
overtime, super useful feature.

00:38:10.620 --> 00:38:18.550
So, I've been talking about a few of these
really awesome features that we have.

00:38:18.550 --> 00:38:21.600
I gave you a quick overview of the Comparison Mode.

00:38:21.600 --> 00:38:22.710
We navigate around.

00:38:22.710 --> 00:38:29.420
We used the Jump Bar, we used the Timeline Mode to review
some features and we also took a look at the Log Viewer

00:38:29.420 --> 00:38:34.140
to be able to view all the revisions in
the repository at the touch of a button.

00:38:34.140 --> 00:38:36.770
The next thing I'd like to show you and in my opinion.

00:38:36.770 --> 00:38:39.810
I've sort of saved the best for last is the Blame Mode.

00:38:39.810 --> 00:38:44.410
The Blame Mode is super useful and to
start with I'd like to paint you a picture.

00:38:44.410 --> 00:38:53.050
I'm working with my partner on this application and she
has added a new feature and the feature is pretty awesome

00:38:53.050 --> 00:38:57.220
in her mind but it was done a little bit late at night.

00:38:57.220 --> 00:39:02.140
So, I'm going to see if the application
continues to run, let's built and run,

00:39:02.140 --> 00:39:10.230
test it and see if it continues to
work the way I expect it to at least.

00:39:10.230 --> 00:39:16.520
Go up here, send my card, oh man, crash.

00:39:16.520 --> 00:39:20.670
We've seen a few of these today.

00:39:20.670 --> 00:39:29.560
Go back and it appears, well everything
looks right, this is really strange.

00:39:29.560 --> 00:39:35.120
All right, well, I think I'm going to use our new
Blame View to figure out exactly what happened.

00:39:35.120 --> 00:39:42.720
We're going to look, Line 184, go back
to Aversion mode and Blame and let's see.

00:39:45.750 --> 00:39:50.750
You can see on Line 184, the program
counter appears right there and you can see

00:39:50.750 --> 00:39:54.560
that Sarah Lightwater was
instrumenting our calls to release

00:39:54.560 --> 00:39:56.960
and she says she was going to remove it when done.

00:39:56.960 --> 00:39:58.400
I guess she just forgot.

00:39:58.400 --> 00:39:59.960
Let's see if we can fix it.

00:39:59.960 --> 00:40:07.900
We'll tap the Action button which shows us how the file
looked before the change and then after the change.

00:40:07.900 --> 00:40:18.050
Let's grab this from over here, use the Jump Bar or the
Version Timeline Mode to go back to the Local Revision

00:40:18.050 --> 00:40:33.510
under the changed, saved, stop, build,
run, and try it again and it works.

00:40:33.510 --> 00:40:40.060
[ Applause ]

00:40:40.060 --> 00:40:47.400
In summary, you have seen the three major
components of the Version Editor Mode.

00:40:47.400 --> 00:40:51.520
You have seen the integrated version
history which is incredibly cool.

00:40:51.520 --> 00:40:57.890
It brings all of the revisions from your repository up
front and center into your editor where you can interact

00:40:57.890 --> 00:41:02.690
with them, see them, and become informed by them.

00:41:02.690 --> 00:41:06.580
You can also view your changes
using the two app Comparison Mode.

00:41:06.580 --> 00:41:08.540
You can see the diffs left to right.

00:41:08.540 --> 00:41:13.430
You can change the revision that you're
looking at and you can even make live edits.

00:41:13.430 --> 00:41:21.250
And the coolest feature that you saw today or again in
my opinion the coolest feature was how you could find

00:41:21.250 --> 00:41:26.400
and fix regression using the Blame Mode
as integrated into the Versions Editor.

00:41:26.400 --> 00:41:31.360
Next, I would like to bring on
Kerry Hazelgren to finish this off.

00:41:31.360 --> 00:41:36.450
>> Kerry Hazelgren: I'm going to show you the
commit sheet because it's, well I'm just going to--

00:41:36.450 --> 00:41:45.220
in typical managerial fashion, commit the changes that were
made up here under my name so that I get credit for them.

00:41:45.220 --> 00:41:47.610
No offense to my manager who is in the audience.

00:41:47.610 --> 00:41:54.040
OK. So, there's a couple of different ways that I can
review the changes and we just saw it's really good

00:41:54.040 --> 00:41:58.090
to check all of your changes before you commit them.

00:41:58.090 --> 00:42:00.160
I can filter the Structure Navigator.

00:42:00.160 --> 00:42:05.710
I think we've shown this already
by clicking on, let me X out that.

00:42:05.710 --> 00:42:15.210
By clicking on the SCM icon in the Filter Bar and if
I'm in Version Mode I can just click through the files

00:42:15.210 --> 00:42:19.480
to view my changes, view and review them.

00:42:19.480 --> 00:42:23.860
But I prefer like when I'm reviewing them to be able to--

00:42:23.860 --> 00:42:28.100
to be crafting my commit message so
I don't miss any important notes.

00:42:28.100 --> 00:42:32.270
If I'm going to go right into the
commit sheet by going to the file menu

00:42:32.270 --> 00:42:36.700
and the source control sub menu and hit Commit.

00:42:36.700 --> 00:42:39.910
So, while in the commit sheet I
can actually do the same thing.

00:42:39.910 --> 00:42:47.700
I can look through each of my files, review my diffs
and be typing my commit message as I'm doing that.

00:42:47.700 --> 00:42:56.050
Let's see I'll just say, I fixed the
crash, I had no help from anyone.

00:42:56.050 --> 00:42:56.110
[ Laughter ]

00:42:56.110 --> 00:43:03.050
Before I commit let me just show you, you
can look at your files a few different ways.

00:43:03.050 --> 00:43:08.340
Here we're just looking at a flat list of the
files that I'm going to commit but I can also

00:43:08.340 --> 00:43:17.250
in the project view see the files in the structure
that they are organized and in our project or I can go

00:43:17.250 --> 00:43:21.950
to the file view to see the files as
they are organized on the file system.

00:43:21.950 --> 00:43:27.250
So, it might be a little helpful for you to know
what, you know, what files you're looking at.

00:43:27.250 --> 00:43:32.780
You cal also choose not to commit some files in here
if you decided that the changes are not what you want.

00:43:32.780 --> 00:43:41.570
So, when I hit Commit it will process the commit and
then when it's done it will auto dismiss the sheet.

00:43:41.570 --> 00:43:49.060
If there had been an error or the commit had failed, it
would've presented that error and let me change my commit.

00:43:49.060 --> 00:43:55.080
If for any reason though I need to refer back
to what just happened if I want to make sure

00:43:55.080 --> 00:44:01.510
that I committed all the right files and I want
just to for sanity sake to check that, I can.

00:44:01.510 --> 00:44:03.550
There's a log of it in the Log Navigator.

00:44:03.550 --> 00:44:13.230
Let me go to the Standard Editor here and there's an entry
here that says you made a commit at this time at 5:15 PM

00:44:13.230 --> 00:44:15.920
and these are the files that were committed with that.

00:44:15.920 --> 00:44:20.200
So, sanity sake there's a record of what we've done.

00:44:20.200 --> 00:44:23.040
So, in summary what have we learned today?

00:44:23.040 --> 00:44:28.460
We've learned about integrating source control
where you can review changes to your files.

00:44:28.460 --> 00:44:33.210
And I really think that we're making
source control fun and interesting.

00:44:33.210 --> 00:44:39.080
We've learned about the standard and assistant editors
that help you to navigate around your source code file

00:44:39.080 --> 00:44:45.020
and also talked about all of great new
improvements that we've made to them.

00:44:45.020 --> 00:44:52.980
Then there's the Search Navigator with its cool
Find/Replace preview and finally the Version Editor

00:44:52.980 --> 00:44:55.320
with great ways to view changes to your files.

00:44:55.320 --> 00:45:01.350
I mean, this stuff is like from
a fairy tale don't you think?

00:45:01.350 --> 00:45:05.630
There should be ponies and unicorns coming out of here.

00:45:05.630 --> 00:45:08.880
I've been using Blame Mode and I think
that's my favorite feature of Xcode 4.

00:45:08.880 --> 00:45:13.930
It's been very useful to find and
track down problems and please be nice

00:45:13.930 --> 00:45:16.510
when you've identified the person who made the problem.

00:45:16.510 --> 00:45:19.450
I don't want to start any flame wars or anything.

00:45:21.300 --> 00:45:25.640
For related sessions we had an intro
to Xcode 4 just before this one.

00:45:25.640 --> 00:45:32.100
Tomorrow there will be two sessions about Building your
App and using Interface Builder and then again on Friday,

00:45:32.100 --> 00:45:35.610
another one regarding Debugging with LLDB.

00:45:35.610 --> 00:45:45.060
So, to finalized if you have any question, please contact
Michael Jurewitz, he's a real nice guy and very helpful.

00:45:45.060 --> 00:45:47.870
Use the Developer Forums.

00:45:47.870 --> 00:45:51.890
Apple Engineers monitor those and
should be able to answer your questions.

