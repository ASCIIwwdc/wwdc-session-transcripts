WEBVTT

00:00:06.380 --> 00:00:12.880
>> Mark Miller: Good afternoon, and welcome to the iTunes
and App Store Affiliate Tools and Technologies session.

00:00:12.880 --> 00:00:13.800
My name is Mark Miller.

00:00:13.800 --> 00:00:20.650
I work for the iTunes Store on the Engineering team,
and today we've got a lot of great stuff to talk

00:00:20.650 --> 00:00:28.880
about with the affiliate program, and the tools and
services you can use to use the affiliate program.

00:00:28.880 --> 00:00:35.590
So, this is our first time presenting at WWDC about the
program, so we'll give a quick overview, what it is,

00:00:35.590 --> 00:00:40.420
how it works, just so everybody's caught up.

00:00:40.420 --> 00:00:44.860
Following that, we'll kind of go into some common use cases,

00:00:45.990 --> 00:00:52.420
mistakes people make when they first join the
program, just to try and alleviate any errors.

00:00:52.420 --> 00:00:58.570
And then, finally, we'll dive down into some of the
really cool tools that you can use to generate links

00:00:58.570 --> 00:01:02.520
and find content for your customers on the iTunes Store.

00:01:02.520 --> 00:01:05.910
So, what is the affiliate program?

00:01:05.910 --> 00:01:14.040
It is a great way for helping you promote
your apps and other content on the Store.

00:01:14.040 --> 00:01:17.010
Along the way, it allows you to earn money for referrals.

00:01:17.010 --> 00:01:19.080
That money is called a bounty.

00:01:19.080 --> 00:01:19.750
It's a commission.

00:01:19.750 --> 00:01:28.210
It's based on the percentage of the sale that is
made after a user clicks a link and makes a purchase.

00:01:28.210 --> 00:01:33.330
The program also provides some metrics for you
to judge the effectiveness of your marketing.

00:01:33.330 --> 00:01:43.330
So, you can say this link on page 2 of my website is working
really well, while this other link in my app isn't working.

00:01:43.330 --> 00:01:49.910
And as I alluded to, it works both on your
apps, and in your apps, and on your websites.

00:01:49.910 --> 00:01:56.730
So, quick cast of characters, so
we know who we're talking about.

00:01:56.730 --> 00:02:03.000
First of all, we've got the iTunes and App Store
servers, then we have affiliate publishers.

00:02:03.000 --> 00:02:07.830
That would be you in the audience,
hopefully, at the end of this session.

00:02:07.830 --> 00:02:11.570
And kind of bridging the gap between
us, there's the affiliate networks.

00:02:11.570 --> 00:02:14.730
I'll get into what they do in just a second.

00:02:14.730 --> 00:02:20.090
And, finally, we have customers: your
customers and customers on the iTunes Store.

00:02:20.090 --> 00:02:29.030
So, the affiliate networks kind of fill in and provide
some services for you, the publisher, that iTunes can't.

00:02:29.030 --> 00:02:33.290
And to do that, we partner with
different organizations around the globe.

00:02:33.290 --> 00:02:41.510
In the U.S., the affiliate network is LinkShare, while
in Europe, the affiliate network is TradeDoubler.

00:02:41.510 --> 00:02:50.940
In Japan, again, we go with LinkShare,
and DGM covers Australia and New Zealand.

00:02:50.940 --> 00:02:56.230
The affiliate networks, they will
vary in their terms and conditions.

00:02:56.230 --> 00:02:58.680
You do need to sign up with each, in turn.

00:02:58.680 --> 00:03:07.200
The bounty percentage is going to vary a little bit,
but, for the most part, it's going to be five percent,

00:03:07.200 --> 00:03:16.030
and the bounty window, meaning the time between a click
and the time between a purchase, is three days, worldwide.

00:03:16.030 --> 00:03:19.690
So, how does this all work?

00:03:19.690 --> 00:03:26.290
It is all about the links, the links that you
create for your customers and that they click on.

00:03:26.290 --> 00:03:31.000
Here's a basic iTunes link to an app called Remote.

00:03:31.000 --> 00:03:37.170
And we need to annotate that link with some
affiliate data, so that you can get a bounty.

00:03:37.170 --> 00:03:41.730
So, let's go into that.

00:03:41.730 --> 00:03:45.670
The first query parameter that's
really important is the partnerId.

00:03:45.670 --> 00:03:52.020
The partnerId identifies the affiliate network, either
LinkShare, or TradeDoubler, or DGM, what have you.

00:03:52.020 --> 00:03:55.310
And the second piece of information is the affiliate token.

00:03:55.310 --> 00:04:00.810
This is sort of an opaque string to the iTunes
Store that identifies you to the affiliate network.

00:04:00.810 --> 00:04:04.850
So, you'll get an affiliate token from the network.

00:04:04.850 --> 00:04:09.410
Some concrete examples here.

00:04:09.410 --> 00:04:16.360
For LinkShare, the partnerId is 30,
and the affiliate token name is siteID.

00:04:16.360 --> 00:04:20.900
So, this is the actual query parameter that
will be on the URL, and it's called siteID.

00:04:20.900 --> 00:04:23.470
You can see here an example.

00:04:23.470 --> 00:04:27.240
It's sort of a strange string, CBIMI.

00:04:27.240 --> 00:04:33.990
For TradeDoubler, the partnerId is 2003,
and the affiliate token name is tduid.

00:04:33.990 --> 00:04:37.330
You'll notice that this is all lower case.

00:04:37.330 --> 00:04:44.520
These query parameters are case sensitive, so make sure
you get them right when you're constructing your URLs.

00:04:46.100 --> 00:04:56.610
And DGM, finally, the partnerId is 1002,
and the affiliate token name is affToken.

00:04:56.610 --> 00:05:03.610
So, we saw some basic links right there that will allow you
to get a bounty for a purchase made on the iTunes Store,

00:05:03.610 --> 00:05:12.640
but you can also do a more complicated link, such as this,
that will allow you to get reports on clicks, impressions,

00:05:12.640 --> 00:05:16.520
and other information, via the affiliate network.

00:05:16.520 --> 00:05:22.730
So, what this URL does is, when a user clicks
on it, it goes through the affiliate network.

00:05:22.730 --> 00:05:24.720
The affiliate network tracks that a little bit,

00:05:24.720 --> 00:05:29.340
redirects them to the iTunes Store,
and they don't see anything different.

00:05:29.340 --> 00:05:34.310
So, what happens when your user clicks on an affiliate link?

00:05:34.310 --> 00:05:35.230
Well, it's pretty simple.

00:05:35.230 --> 00:05:40.260
Here, we have a webpage, and they click on
a link, and they get into the iTunes Store.

00:05:40.260 --> 00:05:43.940
It's the same thing as an unaffiliated link.

00:05:43.940 --> 00:05:49.060
Under the covers, though, a little
something different is happening.

00:05:49.060 --> 00:05:52.090
So, over on the left, we've got Mobile Safari.

00:05:52.090 --> 00:06:00.330
This is just kind of playing the role of either your
app, or a desktop browser, or even a desktop app.

00:06:00.330 --> 00:06:06.000
And then there's iTunes, the client, the
affiliate network, and the iTunes Store.

00:06:06.000 --> 00:06:10.190
So, when the browser makes a request,
clicks on an affiliated URL,

00:06:10.190 --> 00:06:15.500
it's going to go to the affiliate
networks redirection server.

00:06:15.500 --> 00:06:21.200
That network will record the click and redirect
or send a redirect back to the browser.

00:06:21.200 --> 00:06:29.140
The browser will then launch iTunes, which makes a
similar affiliated request directly to the iTunes Store.

00:06:29.140 --> 00:06:40.010
iTunes will take the URL off the affiliate data off the
URL, put it into a cookie, and send it back to iTunes.

00:06:40.010 --> 00:06:43.280
So, at this point, we're in the bounty window.

00:06:43.280 --> 00:06:48.510
The user has clicked a URL, and
he or she is browsing the Store.

00:06:48.510 --> 00:06:53.490
Hopefully, within the next three
days, she'll make a purchase.

00:06:53.490 --> 00:06:56.150
So, let's do that.

00:06:56.150 --> 00:06:57.060
The purchase is made.

00:06:57.060 --> 00:06:58.120
The product is downloaded.

00:06:58.120 --> 00:07:00.040
The customer's happy.

00:07:00.040 --> 00:07:04.200
iTunes Store reports the sale to the affiliate network.

00:07:04.200 --> 00:07:14.050
After this, you'll see the purchase happen, and
eventually you'll get credited with that bounty.

00:07:14.050 --> 00:07:25.940
So, given that's how it works, let's go into some
use case scenarios of where this might be applicable.

00:07:25.940 --> 00:07:29.940
In your app, you can use it to promote
similar apps or companion apps.

00:07:29.940 --> 00:07:35.440
If you've got a game, and there's another game that you
think your users will like, go ahead and link to that game

00:07:35.440 --> 00:07:38.060
in your app, and make it an affiliated link.

00:07:38.060 --> 00:07:43.550
Now, it doesn't have to be-- you don't
have to link to content that you created.

00:07:43.550 --> 00:07:45.240
It could be other links.

00:07:45.240 --> 00:07:53.640
If you have an app that recommends other apps, or maybe
an app that recommends TV shows that a user would like,

00:07:53.640 --> 00:07:59.030
make those links affiliated and
earn the affiliate revenue that way.

00:07:59.030 --> 00:08:03.510
Finally, you want to connect your
customers with the content that they want.

00:08:03.510 --> 00:08:11.110
If, at a certain point in your app, you know that your
user is looking for some TV episode, or some music video,

00:08:11.110 --> 00:08:19.990
or some song or album, go ahead and give them that
link, so that they have the option to get it right then.

00:08:19.990 --> 00:08:23.740
On your website, the situation is very similar.

00:08:23.740 --> 00:08:32.530
You might have a website that's promoting your
application to maybe someone who's searching online.

00:08:32.530 --> 00:08:36.240
Make those links affiliated, and
then you can track how they're doing,

00:08:36.240 --> 00:08:40.680
see what works to really get people buying your app.

00:08:40.680 --> 00:08:44.520
You might link to similar or some sort of complementary app.

00:08:44.520 --> 00:08:49.790
If you've got some productivity software that works
really well with another piece of software, link to that.

00:08:49.790 --> 00:08:52.970
It's sort of a custom package that
your customers will appreciate.

00:08:52.970 --> 00:09:02.140
And, finally, you can link just any random
content to that content on the iTunes Store.

00:09:02.140 --> 00:09:13.520
So, if you run a streaming radio station, or maybe
you have some sort of channel listing for TV shows,

00:09:13.520 --> 00:09:23.690
or a music recommendation engine, link that content to the
iTunes Store and get the affiliate revenue, based on that.

00:09:23.690 --> 00:09:28.560
These are some of the common pitfalls that
people run into, when they first get started.

00:09:28.560 --> 00:09:37.080
The number one thing is not checking the URL for
the existence of a query string before modifying it.

00:09:37.080 --> 00:09:42.710
So, here we have a URL that doesn't have a question
mark identifying the start of a query string,

00:09:42.710 --> 00:09:47.750
and this user has just appended &partnerId=30.

00:09:47.750 --> 00:09:53.050
That's not going to work, and it
probably won't even load to a webpage.

00:09:53.050 --> 00:09:59.040
Better is to check for the question mark
and append the affiliate data that way.

00:09:59.040 --> 00:10:01.530
The same holds true in reverse.

00:10:01.530 --> 00:10:05.930
If there's already a question mark, you need to
use ampersand to separate your query parameters.

00:10:05.930 --> 00:10:15.600
So, here's a link with a question mark already
on it, and we use ampersand to add the partnerId

00:10:15.600 --> 00:10:20.210
and the affiliate token, siteID in this case.

00:10:20.210 --> 00:10:26.240
This is another issue that might be a little unexpected.

00:10:26.240 --> 00:10:30.410
If you have users in a particular storefront,

00:10:30.410 --> 00:10:34.890
you need to use the affiliate network
that's associated with that storefront.

00:10:34.890 --> 00:10:42.340
So, if you have French users, you need to provide
them with a TradeDoubler URL, because if they buy--

00:10:42.340 --> 00:10:52.180
if they click, say, a LinkShare, U.S. link, and make a
purchase, we can't send that data to LinkShare from Europe.

00:10:52.180 --> 00:10:59.370
So, it's important that you create
the right URL for your customers.

00:10:59.370 --> 00:11:02.820
And, finally, this is just sort
of the simple generic advice.

00:11:02.820 --> 00:11:04.370
Test the links.

00:11:04.370 --> 00:11:11.360
If you're rolling out a new feature, or you're doing some
sort of big push, make sure that when the URL is clicked on,

00:11:11.360 --> 00:11:16.960
it winds up at the right place,
and your users will be happier.

00:11:16.960 --> 00:11:23.120
Also, if it's a really big thing, go ahead,
click that link, and make a purchase.

00:11:23.120 --> 00:11:25.320
You can purchase any cheap content.

00:11:25.320 --> 00:11:32.060
It doesn't have to be for your high-priced app.

00:11:32.060 --> 00:11:34.950
The sale will bounty, regardless.

00:11:34.950 --> 00:11:41.600
So, that's kind of the overview.

00:11:41.600 --> 00:11:46.410
Let's go into some of the tools and services we provide.

00:11:46.410 --> 00:11:53.680
You might have noticed that the URLs can be complicated,
and so we really want to make that easier on you.

00:11:53.680 --> 00:11:56.590
And for that, we have a tool called Link Maker.

00:11:56.590 --> 00:11:59.890
Link Maker is the simplest way
to generate an affiliated URL.

00:11:59.890 --> 00:12:06.860
All you do is search for content
and get an affiliated URL back.

00:12:06.860 --> 00:12:09.180
But, obviously, that doesn't really scale.

00:12:09.180 --> 00:12:12.830
Once you're generating more than 50 links or so,

00:12:12.830 --> 00:12:19.240
you might want to come up with something
more dynamic, and for that you've got RSS.

00:12:19.240 --> 00:12:26.040
RSS is the same service that feeds your
newsreaders, and weblogs, and what have you.

00:12:26.040 --> 00:12:33.150
But we use RSS to promote popular content on the Store.

00:12:33.150 --> 00:12:41.790
We have feeds for new content, recently
featured content, and the popular stuff.

00:12:41.790 --> 00:12:50.140
Now, once you have RSS, you might
find yourself a little bit not too--

00:12:50.140 --> 00:12:55.240
you might need something more responsive to your users.

00:12:55.240 --> 00:13:05.240
For that, we have a Search API, so you can actually generate
searches against the iTunes Store over the web and get back,

00:13:05.240 --> 00:13:09.920
programmatically, the content that
you or they are looking for.

00:13:09.920 --> 00:13:14.080
It's a great way to add some interactivity.

00:13:14.080 --> 00:13:23.490
So then we might want to graduate to the
next level of technicality, if you will.

00:13:23.490 --> 00:13:30.290
The Search API is great, but it doesn't scale well if
you're making a million queries an hour or whatever.

00:13:30.290 --> 00:13:36.210
You might want to have all that data within your
systems integrated so that you can do custom queries.

00:13:36.210 --> 00:13:38.160
For that, we have Enterprise Partner Feeds.

00:13:38.160 --> 00:13:48.120
It's a bulk data download that you pull down over HTTP,
integrate into your databases, and you can access that way.

00:13:48.120 --> 00:13:58.320
And, finally, once we have this library of music or library
of other content that you want to link to the iTunes Store,

00:13:58.320 --> 00:14:07.820
you might want to construct a custom playlist for your
users, so that they can buy a mix of their favorite genre

00:14:07.820 --> 00:14:12.870
of music, and you can create that, because,
presumably, you know what they're interested in.

00:14:12.870 --> 00:14:18.590
Web iMix is a great solution for this, because it
gives them a customized playlist on the iTunes Store.

00:14:18.590 --> 00:14:26.840
So, let's take a look at Link Maker,
see how it works and what it does.

00:14:26.840 --> 00:14:33.180
Link Maker, as I said, is the simplest
way to create links on the iTunes Store.

00:14:33.180 --> 00:14:38.570
You put in a search term, and you
get back affiliated search results.

00:14:38.570 --> 00:14:50.030
You can access it at itunes.apple.com/linkmaker, and
we just launched the new version an hour or so ago.

00:14:50.030 --> 00:14:55.780
So, if you want to check it out, I encourage it.

00:14:55.780 --> 00:14:57.450
Link Maker is a very simple tool.

00:14:57.450 --> 00:15:04.530
You put in a search term, and specify some
parameters, and you get back search results.

00:15:04.530 --> 00:15:15.630
If you click the link on the right, you'll get an overlay,
which provides the affiliated URL, along with a custom HTML

00:15:15.630 --> 00:15:17.680
that you can drop into a webpage, if you need to.

00:15:17.680 --> 00:15:23.250
And we offer three variations on the URL, so that--
I'm sorry-- on the HTML, so you can get a text link,

00:15:23.250 --> 00:15:28.040
or a text link with a picture, or
a badge, and that sort of thing.

00:15:28.040 --> 00:15:31.110
And this is what that overlay looks like.

00:15:31.110 --> 00:15:39.240
You've got - it gives you the encoded link,
and, below it, the HTML allows you to copy/paste

00:15:39.240 --> 00:15:46.550
that into a webpage or into your app, if you need to.

00:15:47.600 --> 00:15:54.470
Obviously, though, that's a one link at a time sort
of tool, and we might want to have a whole bunch

00:15:54.470 --> 00:15:58.630
of links coming in, and that's where RSS comes in.

00:15:58.630 --> 00:16:09.850
RSS provides you a feed of dynamic, constantly updating
content that is a great way to spice up any place

00:16:09.850 --> 00:16:14.870
where you feel like the content you have is too static.

00:16:14.870 --> 00:16:23.160
You can put this on a website or in your app, and
there are a number of feeds: popular content, new,

00:16:23.160 --> 00:16:29.110
and recently added content, recently added, being
back-cataloged stuff that only recently appeared

00:16:29.110 --> 00:16:31.850
on the iTunes Store, and we also have featured content.

00:16:31.850 --> 00:16:38.970
So, it's the stuff that's being
promoted on the pages right now.

00:16:38.970 --> 00:16:40.900
Here's what an RSS link looks like.

00:16:40.900 --> 00:16:47.320
For music, for example, we have a
top albums feed and a top songs feed.

00:16:47.320 --> 00:16:54.010
Perhaps, on the other hand, we have the top paid
applications, and there's actually a number of feeds,

00:16:54.010 --> 00:16:59.870
in this case, where you can get the top free
applications or the top-grossing applications, as well.

00:16:59.870 --> 00:17:03.740
All those are different feed URLs.

00:17:03.740 --> 00:17:07.420
As far as content types, we cover a wide variety.

00:17:07.420 --> 00:17:12.650
There's podcasts, movies, music
videos, audiobooks, TV shows.

00:17:12.650 --> 00:17:14.690
There's a lot there.

00:17:14.690 --> 00:17:20.270
You can get the full list of the
RSS content at itunes.apple.com/rss.

00:17:20.270 --> 00:17:23.780
We have a little generator there that will allow you

00:17:23.780 --> 00:17:28.140
to specify some parameters and
generate a feed URL for you to use.

00:17:28.140 --> 00:17:34.290
So, we saw those basic URLs, but
maybe we want to customize it a bit.

00:17:34.290 --> 00:17:38.660
If we're interested in the top albums in France,
well, we just put in the French country code

00:17:38.660 --> 00:17:42.890
at the first element in the path, and that all works.

00:17:42.890 --> 00:17:50.780
You might be more interested in the top albums
in a particular genre; in this case, Blues.

00:17:50.780 --> 00:17:52.590
Well, that's easy, too.

00:17:52.590 --> 00:17:58.320
We put in, as an option, genre=2, 2
being the genre ID of the Blues genre.

00:17:58.320 --> 00:18:03.370
There's a full list of all the genres
available, available at the resource site

00:18:03.370 --> 00:18:05.210
that I'll mention at the end of this talk.

00:18:05.210 --> 00:18:13.720
We can also extend or contract the number of
items in the RSS feed that we see at a given time.

00:18:13.720 --> 00:18:25.000
And with that, it's called limit, and you say limit=200, and
you'll get the top 200 albums in the Blues genre in France.

00:18:25.000 --> 00:18:29.200
And, finally, we can get to the advanced options.

00:18:29.200 --> 00:18:32.830
The standard feed format that you're going to get is Atom,

00:18:32.830 --> 00:18:38.260
and that's specified by the xml
extension at the end of the URL.

00:18:38.260 --> 00:18:40.190
We also offer JSON output.

00:18:40.190 --> 00:18:43.470
This is Javascript Object Notation,
that you may be familiar with.

00:18:43.470 --> 00:18:48.750
That's available just by changing the extension to json.

00:18:48.750 --> 00:18:53.600
If you want to learn more about Javascript
Object Notation, you can check out JSON.org.

00:18:53.600 --> 00:18:57.190
But, in essence, it's a interchange
format that's very similar

00:18:57.190 --> 00:19:02.910
to the old style plists, if you're familiar with those.

00:19:02.910 --> 00:19:10.120
We also provide JavaScript callbacks, via the
callback parameter, and this allows the JSON format

00:19:10.120 --> 00:19:15.610
to integrate with JavaScript on your websites.

00:19:15.610 --> 00:19:26.020
And so to give a demo of what you can do with RSS,
we've got Joe Hwang, my colleague on the iTunes Store.

00:19:26.020 --> 00:19:33.440
He's going to give us a quick tour of a music
blog that needs some pizzazz, if you will.

00:19:33.440 --> 00:19:34.750
So, I'll turn it over to Joe.

00:19:34.750 --> 00:19:35.180
>> Joe Hwang: Thanks, Mark.

00:19:35.180 --> 00:19:37.600
Nice to see all you guys here today.

00:19:37.600 --> 00:19:38.350
[applause] Thank you.

00:19:38.350 --> 00:19:46.730
So, in the beginning, Mark talked about affiliated links,
and so how you can earn a bounty on links that are driven

00:19:46.730 --> 00:19:54.570
to the Store, and he also talked about RSS, which
is a way that you can grab content from the Store.

00:19:54.570 --> 00:20:01.270
So, let's figure out a way to put those two things
together and spruce up our little music blog here.

00:20:01.270 --> 00:20:08.000
So, we have a music blog, and it's kind of nice, and you
can talk about the latest music thing that's going on.

00:20:08.000 --> 00:20:11.540
But let's say we want to make this
a little bit more dynamic.

00:20:11.540 --> 00:20:20.920
So, we can do that by adding a splash banner on top
of the top five albums in the iTunes Store today.

00:20:20.920 --> 00:20:22.720
So, this is the same page.

00:20:22.720 --> 00:20:30.010
We just added the splash banner on top, and these
are the top six albums in iTunes Store right now.

00:20:30.010 --> 00:20:33.240
And so there are a lot of advantages to this.

00:20:33.240 --> 00:20:37.660
The first thing is that all of this data is dynamic.

00:20:37.660 --> 00:20:45.850
You can just set up the code once, and it's an RSS feed,
so it'll constantly update with all the latest stuff.

00:20:45.850 --> 00:20:48.610
It also looks pretty cool.

00:20:48.610 --> 00:20:54.410
You get all the cover art, and you get
all the metadata that comes with it.

00:20:54.410 --> 00:21:00.910
So, from this example, we're pulling down the
five most popular songs from each of these albums.

00:21:00.910 --> 00:21:07.240
And, of course, these links are also affiliated.

00:21:07.240 --> 00:21:10.970
So, if you take a look here, here's the affiliated link.

00:21:10.970 --> 00:21:14.500
This is the click tracking that
Mark talked about in the beginning.

00:21:14.500 --> 00:21:18.950
And if anyone clicks on one of these
links, and gets driven to the Store,

00:21:18.950 --> 00:21:22.400
and then buys something, then you
get a bounty, which is great.

00:21:22.400 --> 00:21:26.180
So, let's take a look at some of the code for this.

00:21:26.180 --> 00:21:29.900
One thing to note is that it's very simple.

00:21:29.900 --> 00:21:31.400
It's very easy to do.

00:21:31.400 --> 00:21:38.320
So, here's our script, where, first,
we have the feed URL here.

00:21:38.320 --> 00:21:44.070
And if you notice, it is slightly different from
the feed URL that Mark gave a little bit earlier.

00:21:44.070 --> 00:21:49.010
That's because the demo was written
before all the URLs were updated.

00:21:49.010 --> 00:21:52.750
And we're pulling down the top Alternative albums.

00:21:52.750 --> 00:21:57.580
So, this is the genre ID here,
and we're grabbing the top albums.

00:21:57.580 --> 00:22:05.610
Again, you can customize this however you like with whatever
genre or whatever type of media type you want to do.

00:22:05.610 --> 00:22:09.190
Here, we have the partnerId, which
is, in this case, LinkShare.

00:22:09.190 --> 00:22:15.080
PartnerId 30 is LinkShare, and
the URL prefix for click tracking.

00:22:15.080 --> 00:22:24.410
So, we put all that together, and we're calling this method
here RSS.getsimplifiedfeed, and this method, pretty much,

00:22:24.410 --> 00:22:32.920
what it does, it'll call the URL, get the JSON back,
which is an easy way to do object notation in Javascript,

00:22:32.920 --> 00:22:39.230
and go through each of those rows, getting
the fields from each of those rows,

00:22:39.230 --> 00:22:45.230
and then creating some HTML markup
to output into what you saw earlier.

00:22:45.230 --> 00:22:48.540
So, again, it's really simple to do.

00:22:48.540 --> 00:22:50.340
It's dynamic.

00:22:50.340 --> 00:22:54.570
It'll always update with whatever
is there, and you get the bounty.

00:22:54.570 --> 00:22:58.220
So, yeah, just an example of how
you can put those things together.

00:22:58.220 --> 00:22:59.460
>> Mark Miller: Great.

00:22:59.460 --> 00:23:00.810
Thanks, Joe.

00:23:05.860 --> 00:23:13.630
[applause] Oh, and just a quick
reminder, all the sample code

00:23:13.630 --> 00:23:17.390
that we're demoing here today is
available, and it's attached to the session.

00:23:17.390 --> 00:23:25.370
There was a little problem at first, so you
might want to check again, if you're interested.

00:23:25.370 --> 00:23:29.020
So, RSS, it's a great way to get a feed of content,

00:23:29.020 --> 00:23:32.760
but maybe you want something more
of a conversation interactivity.

00:23:32.760 --> 00:23:37.230
How do we search through the Store
for something in particular?

00:23:37.230 --> 00:23:43.460
That's where the Search API comes into play.

00:23:43.460 --> 00:23:49.900
The Search API provides search
and metadata lookup on the web.

00:23:49.900 --> 00:23:56.120
The responses are in the JSON format,
and there's two main actions.

00:23:56.120 --> 00:23:56.800
There's Search.

00:23:56.800 --> 00:23:59.830
This is where you provide a search term of some sort.

00:23:59.830 --> 00:24:00.990
And then there's a Lookup.

00:24:00.990 --> 00:24:03.080
A lookup is an ID-based lookup.

00:24:03.080 --> 00:24:11.940
So, if you have iTunes IDs already from some other system
or some other source, you can look up that content,

00:24:11.940 --> 00:24:19.400
using that ID, and get up-to-date pricing, availability
information, and all sorts of metadata, as well.

00:24:19.400 --> 00:24:27.260
So, here's some of the data that you can
get, if you do use the JSON Search API.

00:24:27.260 --> 00:24:35.780
This is an example for an application, but you can see
that there's the artist ID is available, the price,

00:24:35.780 --> 00:24:40.850
a URL where you can download it,
the supported devices, description.

00:24:40.850 --> 00:24:43.290
There's a lot of information there, and it's pretty rich.

00:24:43.290 --> 00:24:53.710
So, how do we actually construct
a Search URL to get this data?

00:24:53.710 --> 00:25:00.590
The simplest possible way to do that is to just use
the query parameter called "term," but there's a lot

00:25:00.590 --> 00:25:07.540
of modifiers available, so that you can dig pretty
deep into the Store to find what you're looking for.

00:25:07.540 --> 00:25:09.080
First and easiest is "country."

00:25:09.080 --> 00:25:14.190
The country specifies which country you're
interested in, and if an item is not available

00:25:14.190 --> 00:25:17.360
in that country, then you won't get the result.

00:25:17.360 --> 00:25:19.710
You can also specify the "language."

00:25:19.710 --> 00:25:26.740
So, if we have a localization or a localized
title in that language, you can specify that.

00:25:26.740 --> 00:25:32.110
"Media" is an interesting thing where you can say-- it's
a broad term, but you can specify that you're interested

00:25:32.110 --> 00:25:39.280
in music content, as opposed to application
content, or maybe it's TV content.

00:25:39.280 --> 00:25:41.890
All that can be handled with media.

00:25:41.890 --> 00:25:46.000
If you want to get more specific,
though, you can specify the "entity."

00:25:46.000 --> 00:25:55.370
The entity distinguishes, say, between an album
and a song, or a TV episode and a TV season.

00:25:55.370 --> 00:26:06.780
You can also specify the "attributes," so this is
the aspect of the entity that you're searching on.

00:26:06.780 --> 00:26:09.640
We'll get to that in a minute with an example.

00:26:09.640 --> 00:26:15.560
As in RSS, we also provide a "limit," so you
can specify how many results you want back.

00:26:15.560 --> 00:26:21.320
And also, like RSS, we have a "callback," so that allows
you to use this from JavaScript on a remote website.

00:26:21.320 --> 00:26:28.640
And the results come back as JSON dictionaries, and
in the search case, they're sorted by relevancy.

00:26:28.640 --> 00:26:32.230
So, the top item is supposed to be
the most relevant to your search.

00:26:32.230 --> 00:26:37.970
So, let's take a simple example.

00:26:37.970 --> 00:26:40.530
We're searching for Madonna.

00:26:40.530 --> 00:26:41.600
Well, that URL is pretty simple.

00:26:41.600 --> 00:26:48.290
You say, term=madonna, and you're good to go, but
say we're actually interested in Madonna's books.

00:26:48.290 --> 00:26:50.260
She's also an author.

00:26:50.260 --> 00:26:59.790
So, we specify that the media we're interested in is
audiobook, and we want five results back, so we add limit=5.

00:26:59.790 --> 00:27:04.860
Now maybe we rollback a little bit and say,
"No, let's get the music albums instead."

00:27:04.860 --> 00:27:10.420
For that, it's media=music, and the entity=album.

00:27:11.650 --> 00:27:19.230
A little more advanced, we might want
songs named Madonna, not songs by Madonna.

00:27:19.230 --> 00:27:22.170
In that case, we can use attribute=songTerm.

00:27:22.170 --> 00:27:30.260
So, that means that the search will be applied to the song
name, rather than the artist associated with the song.

00:27:30.260 --> 00:27:38.760
So, this can be very powerful when you want to get
very particular about the searches you're doing.

00:27:38.760 --> 00:27:43.770
So, that's Search, in a nutshell, but if we
already have the IDs that we're looking for,

00:27:43.770 --> 00:27:52.810
and we just want to query some things about it, Lookup comes
into play, and Lookup takes an iTunes ID in an "id" param.

00:27:52.810 --> 00:27:59.530
And if you want to specify multiple IDs in a single
request, you can do that with just a comma separator.

00:27:59.530 --> 00:28:01.530
You can also use different IDs.

00:28:01.530 --> 00:28:12.630
So, if you have the UPC for an item, you can use that, and
if you have All Music Guide IDs, we also offer that mapping.

00:28:12.630 --> 00:28:18.350
So, Lookup query parameters, mostly the same
as Search: country, language, limit, callback.

00:28:18.350 --> 00:28:19.620
All these are familiar.

00:28:19.620 --> 00:28:23.860
"Entity" is the same, but we use it differently,
and I'll get to that in just a moment.

00:28:23.860 --> 00:28:25.370
We also allow you to "sort."

00:28:25.370 --> 00:28:28.890
So, what is this for?

00:28:28.890 --> 00:28:31.760
So, we might do a simple lookup for Madonna.

00:28:31.760 --> 00:28:43.870
We already know her artist ID is 20044, so we put together
a URL like this, and we get that single result back.

00:28:43.870 --> 00:28:46.440
Now we might want to fetch Madonna's top songs.

00:28:46.440 --> 00:28:47.740
Well, how do we do that?

00:28:47.740 --> 00:28:56.870
In that case, we specify the artist
ID, but you include the entity as song.

00:28:56.870 --> 00:29:05.050
What that will do is fetch the artist, and then look
on the artist's songs and return those, as well.

00:29:05.050 --> 00:29:11.790
We also are applying a sort to this URL,
and we're saying rank it by popularity,

00:29:11.790 --> 00:29:15.530
so you'll get the top five songs for
Madonna with just this one query.

00:29:15.530 --> 00:29:18.170
You can also change that.

00:29:18.170 --> 00:29:21.570
If you're not interested in the most
popular songs, but maybe the most recent,

00:29:21.570 --> 00:29:25.200
we can give you the most recent songs with sort=recent.

00:29:25.200 --> 00:29:28.630
This can also be very powerful
for up-to-the-minute sort of data.

00:29:28.630 --> 00:29:35.160
And to give us another demo of the Search API and what
you can do with it, I'm going to turn it over back to Joe.

00:29:35.160 --> 00:29:36.440
Thanks, Joe.

00:29:37.970 --> 00:29:45.770
>> Joe Hwang: All right, so just to show off the Search API
a little bit, here we have, again, our simple music blog,

00:29:45.770 --> 00:29:49.920
and you can spruce it up with a search field here.

00:29:49.920 --> 00:29:57.370
And this is just going to be calling the
WS search that Mark just talked about.

00:29:57.370 --> 00:30:02.830
So, here, if we search for Madonna,
here we can get these results back,

00:30:02.830 --> 00:30:07.480
and these are all coming directly from the Store.

00:30:07.480 --> 00:30:12.490
And, again, we have beautiful cover art
that you can format however you like.

00:30:12.490 --> 00:30:18.870
All the metadata, that's there, and, again,
importantly, all of these links are affiliated links,

00:30:18.870 --> 00:30:24.770
so that people who click on these and buy things
on the Store, you'll get a bounty for that.

00:30:24.770 --> 00:30:26.550
So, let's take a look at the code again.

00:30:26.550 --> 00:30:30.220
It's very simple, very similar to before.

00:30:30.220 --> 00:30:37.330
We have our partnerId and our URL prefix,
and we're calling here, do search.

00:30:37.330 --> 00:30:43.810
So, in this JavaScript method, we're setting
up our query here with limits, and, you know,

00:30:43.810 --> 00:30:46.160
all the other delimiters that you want to add.

00:30:46.160 --> 00:30:54.370
We're asking for all tracks, so songs, and here's
the URL that we're going to be sending a query to.

00:30:54.370 --> 00:31:05.630
We get the JSON back from that query, and, once again,
we're going to go ahead and format all of the markup

00:31:05.630 --> 00:31:08.120
with the JSON objects that we received back.

00:31:08.120 --> 00:31:12.710
So, once again, it's very simple to do, and it looks great.

00:31:12.710 --> 00:31:14.140
>> Mark Miller: Thanks, Joe.

00:31:14.140 --> 00:31:15.200
>> Joe Hwang: All right.

00:31:15.200 --> 00:31:18.890
>> Mark Miller: So, that's a quick taste of what you can do.

00:31:18.890 --> 00:31:28.470
Again, this is all provided in sample code, that you're
welcome to customize and use on your sites or in your apps.

00:31:28.470 --> 00:31:36.750
But, again, the Search API might not scale well,
if you're doing a very large number of queries,

00:31:36.750 --> 00:31:43.880
or if you're just trying to get a better sense of
what you're trying, a better sense of what's going

00:31:43.880 --> 00:31:46.820
on in the Store, and maybe you need to do more analysis.

00:31:46.820 --> 00:31:50.330
For that, we've got the Enterprise Partner Feeds.

00:31:50.330 --> 00:31:55.680
The Enterprise Partner Feed, or EPF, as
it's called, it comes in two flavors.

00:31:55.680 --> 00:32:00.800
There's EPF Relational, which is
a format that's very suited,

00:32:00.800 --> 00:32:07.140
very well suited for relational
databases like MySQL, Postgres, whatever.

00:32:07.140 --> 00:32:10.840
It also comes in a Flat flavor.

00:32:10.840 --> 00:32:18.070
This is all of the data for a given
content type and country in a single file,

00:32:18.070 --> 00:32:22.540
and there's some applications that
you can use that for, as well.

00:32:22.540 --> 00:32:28.180
So, let's take a look at EPF Relational.

00:32:28.180 --> 00:32:37.200
EPF Relational has a lot of very rich
metadata about virtually all iTunes content.

00:32:37.200 --> 00:32:44.530
It's intended, as I said, to be imported into a
relational database, so it comes in multiple files,

00:32:44.530 --> 00:32:52.680
each one representing a database table, and it's aimed
at organizations that need to run custom queries,

00:32:52.680 --> 00:33:00.870
so if you need to run some SQL, that gives
you prices or whatever, all that data's there.

00:33:00.870 --> 00:33:02.830
It's a great tool.

00:33:04.010 --> 00:33:06.160
So, what data is available?

00:33:06.160 --> 00:33:12.090
And the answer is most anything that you can
see on the iTunes Store is going to be an EPF.

00:33:12.090 --> 00:33:21.140
So, just anything that you can see on
these pages is going to be in there.

00:33:21.140 --> 00:33:27.030
For some more concrete example, we can take a
look at apps, near and dear to all our hearts.

00:33:27.030 --> 00:33:32.700
You've got the basics, the app name, developer, the
price, and the URL, which you can access the app,

00:33:32.700 --> 00:33:40.810
but you can also get the app description, the
recommended age, screenshot URLs, copyright information,

00:33:40.810 --> 00:33:45.830
that sort of thing, and you can
also get device requirements,

00:33:45.830 --> 00:33:53.850
the popularity for an app-- a lot of rich data there.

00:33:53.850 --> 00:33:57.390
So, how does it work?

00:33:57.390 --> 00:34:05.700
EPF comes out every week as a full export, so this
is as near a complete dump of the data that we have

00:34:05.700 --> 00:34:09.600
in the iTunes database onto disc and into files.

00:34:09.600 --> 00:34:14.860
We also do a daily incremental export
that's relative to the full export.

00:34:14.860 --> 00:34:21.110
The incrementals are data that's new or
that has changed since the last export.

00:34:21.110 --> 00:34:27.720
So, if the full export arrives on Wednesday,
the Thursday incremental will have all

00:34:27.720 --> 00:34:31.400
of the deltas corresponding to Wednesday.

00:34:31.400 --> 00:34:34.690
Now, this also applies to Friday, Saturday, Sunday, as well.

00:34:34.690 --> 00:34:42.820
On Sunday, it will be a cumulative export
of anything that's changed since Wednesday.

00:34:42.820 --> 00:34:47.280
Now, where do you get these files?

00:34:47.280 --> 00:34:50.610
You download them over HTTP.

00:34:50.610 --> 00:34:58.000
There's a server that you can, that we'll
mention, that's available on the Resources site.

00:35:00.050 --> 00:35:09.260
So, the structure of what you're downloading--
data is organized into purpose-specific archives.

00:35:09.260 --> 00:35:15.980
These are grouped into iTunes, which is
just the basic metadata that you'd expect,

00:35:15.980 --> 00:35:19.640
app name, album name, that sort of thing.

00:35:19.640 --> 00:35:24.070
Matching, which is great, it provides
all the UPC, ISRC, ISAM.

00:35:24.070 --> 00:35:33.080
Any sort of standard ID that we have,
we export in the matching archive.

00:35:33.080 --> 00:35:40.800
The pricing archive has prices across all
countries, and there's a new popularity archive,

00:35:40.800 --> 00:35:48.670
which gives you the popularity per
genre of various bits of content.

00:35:48.670 --> 00:35:54.560
Now, within the archives, there are files,
and those represent the database tables.

00:35:54.560 --> 00:35:55.820
So, here's an example.

00:35:55.820 --> 00:36:02.270
We have the artist table, and we
also have the application table.

00:36:02.270 --> 00:36:07.330
Now, artist is the term that we use
to describe you, the app developer.

00:36:07.330 --> 00:36:10.210
We're all artists here, so, you, too, are an artist.

00:36:10.210 --> 00:36:12.860
To link them, we have a join table.

00:36:12.860 --> 00:36:16.980
This is just like your Database 101 class.

00:36:16.980 --> 00:36:19.280
It's the same sort of schema you'd expect.

00:36:19.280 --> 00:36:22.900
So, we have the artist application join table.

00:36:22.900 --> 00:36:28.890
Now, the file format, if you're going
to be processing, this is important.

00:36:28.890 --> 00:36:33.050
EPF files are formatted by records and fields.

00:36:33.050 --> 00:36:40.910
The field separator is ASCII char 1, and the
record separator is ASCII char 2 + a new line.

00:36:40.910 --> 00:36:50.590
This is a good match for readability within the
file, and the delimiters are not actually printable,

00:36:50.590 --> 00:36:53.490
so they won't interfere with the actual content.

00:36:53.490 --> 00:36:55.840
We also have a comment record.

00:36:55.840 --> 00:36:59.980
That's just a record whose first character is hash.

00:36:59.980 --> 00:37:06.120
We use comments to provide metadata
about a particular table/file.

00:37:06.120 --> 00:37:11.060
So, that includes the column names,
some database type information,

00:37:11.060 --> 00:37:16.300
primary keys that you might want to
set up, a lot of useful stuff there.

00:37:16.300 --> 00:37:19.490
So, that's EPF Relational.

00:37:19.490 --> 00:37:22.780
We can take a quick look at EPF Flat, as well.

00:37:23.830 --> 00:37:27.410
EPF Flat is a simpler approach.

00:37:27.410 --> 00:37:34.280
For a given country plus content type, there's
exactly one file that you have to download,

00:37:34.280 --> 00:37:41.860
and EPF Flat uses a tab-separated values format,
so it's compatible with spreadsheet applications.

00:37:41.860 --> 00:37:45.730
So, if you need to select a portion of
the file, paste it into a spreadsheet,

00:37:45.730 --> 00:37:48.060
and manipulate the data that way, you can.

00:37:48.060 --> 00:37:49.430
It's very easy.

00:37:49.430 --> 00:37:51.580
Now, these files are very large.

00:37:51.580 --> 00:38:01.210
There's a large number of songs on the Store, so it's
not going to be simple just to open up the whole file

00:38:01.210 --> 00:38:05.570
in a spreadsheet, but you can do a subset.

00:38:05.570 --> 00:38:16.260
There's no schema, no relational tables,
none of that sort of academic type stuff.

00:38:16.260 --> 00:38:20.870
All of the data for a given object appears in a single row.

00:38:20.870 --> 00:38:25.590
So, if you want to find some data
about an app, you search for the name.

00:38:25.590 --> 00:38:27.390
The price is going to be right there.

00:38:27.390 --> 00:38:32.600
And EPF Flat is great for populating
a non-relational data store.

00:38:32.600 --> 00:38:38.990
So, if you're using CouchDB or
Memcached, all of these kind of popular,

00:38:38.990 --> 00:38:45.510
no SQL key value stores, EPF Flat
is a great candidate for that.

00:38:45.510 --> 00:38:48.400
So, that's EPF Flat.

00:38:49.450 --> 00:38:54.520
And, fortunately, all this complexity,
we've come up with a tool

00:38:54.520 --> 00:39:00.490
that helps you pull this data down
and import it into your databases.

00:39:00.490 --> 00:39:09.100
So, EPF Importer is a cross-platform Python
app that imports EPF into a MySQL database.

00:39:09.100 --> 00:39:14.890
It handles both Relational and Flat
style data, and it's self-configuring.

00:39:14.890 --> 00:39:21.190
It actually reads those comments I mentioned
and figures out what it needs to do.

00:39:21.190 --> 00:39:26.050
On the command line, you can restrict the
imports with a whitelist or blacklist,

00:39:26.050 --> 00:39:30.620
and it also supports resume, so it's production ready.

00:39:30.620 --> 00:39:35.280
If you need to run this in a high availability
production environment and something happens to it,

00:39:35.280 --> 00:39:40.370
it'll pick right up where it left
off, if something happens, that is.

00:39:40.370 --> 00:39:42.010
And it's released as sample code.

00:39:42.010 --> 00:39:45.450
It should be attached to the session,
so I urge you to check it out.

00:39:45.450 --> 00:39:47.610
It's great stuff.

00:39:48.760 --> 00:39:54.540
And to give you a quick demo of EPF and EPF Importer,
we've got Rick Rubenstein, a colleague on the QA team.

00:39:54.540 --> 00:39:59.670
He's also the author of EPF Import,
so perfect for talking about it.

00:39:59.670 --> 00:40:00.860
>> Rick Rubenstein: Thank you, Mark.

00:40:00.860 --> 00:40:03.100
[applause] Thank you.

00:40:05.630 --> 00:40:11.710
So, as Mark said, EPF Importer is a
relatively simple Python tool, cross-platform,

00:40:11.710 --> 00:40:17.260
imports EPF files of any sort into a MySQL database.

00:40:17.260 --> 00:40:23.880
Before we actually run EPF Importer itself and take a
look at that, let's take a quick look at what you'll see

00:40:23.880 --> 00:40:29.350
if you download and unarchive one
of the EPF Relational feeds.

00:40:29.350 --> 00:40:39.050
So, here we have the iTunes feed, which contains all of
the basic metadata on all different content types, artists,

00:40:39.050 --> 00:40:45.640
genres, etc. There's about 40 files
in this particular download.

00:40:45.640 --> 00:40:49.060
And even though this is everything on the
iTunes Store, it's not a huge amount of data.

00:40:49.060 --> 00:40:54.260
It's a few gigabytes, compressed,
so not at all difficult to handle.

00:40:54.260 --> 00:40:57.220
Let's take a look at the same thing here.

00:40:57.220 --> 00:40:58.430
So, again, here's the list.

00:40:58.430 --> 00:41:05.490
We have, for example, an artist table, collection,
various joined tables, as Mark mentioned.

00:41:05.490 --> 00:41:14.060
So, let's take a quick look at the actual
content of one of these downloaded files.

00:41:14.060 --> 00:41:16.550
Let's look at the genre file, which is relatively simple,

00:41:16.550 --> 00:41:21.840
and just take a look at the first
eight rows of the genre file.

00:41:21.840 --> 00:41:27.380
So, up here at the top, well, the first thing that you'll
notice is these funny-looking characters jumping out.

00:41:27.380 --> 00:41:32.910
Those are the record and field delimiters
that Mark mentioned, ASCII 1 and ASCII 2.

00:41:32.910 --> 00:41:37.880
At the top here, we have a number of comment rows.

00:41:37.880 --> 00:41:45.170
So, the first comment row, by the definition
of the EPF spec, is always a list of column

00:41:45.170 --> 00:41:50.240
or record names for that particular exported file.

00:41:50.240 --> 00:41:54.650
There's always an export date, so you can make
sure that you always have the most recent;

00:41:54.650 --> 00:42:00.160
in this case, genre ID, parent ID, and name.

00:42:00.160 --> 00:42:01.680
Primary key is genre ID.

00:42:01.680 --> 00:42:06.260
Every genre ID in the genre feed will be unique.

00:42:06.260 --> 00:42:15.830
DB types is the data types associated with each column or
record, which you would use when creating your database

00:42:15.830 --> 00:42:20.210
to make sure that the record type matches the data type.

00:42:20.210 --> 00:42:23.010
And, finally, the export mode, which in this case is full.

00:42:23.010 --> 00:42:27.390
This is a full EPF Relational export,
as opposed to an incremental export.

00:42:27.390 --> 00:42:33.790
And EPF Importer knows how to automatically distinguish
between the two and do the proper type of import,

00:42:33.790 --> 00:42:40.350
either replacing the entire content of the
database table or updating it in place.

00:42:40.350 --> 00:42:47.190
And here we have just the first few
rows of content of the genre feed.

00:42:47.190 --> 00:42:55.690
So, we have the genre number, the parent genre, which, in
this case, would be music, and Jazz, Latin, New Age, Pop,

00:42:55.690 --> 00:42:58.310
etc., what you would expect to find in here.

00:42:58.310 --> 00:43:04.230
So, let's take a quick look at how
this looks from the database side.

00:43:04.230 --> 00:43:10.230
So, let's switch over to a database visualizer
here and connect to our EPF database,

00:43:10.230 --> 00:43:16.640
where we've already imported files from pretty
much the entire EPF relational set of feeds.

00:43:16.640 --> 00:43:21.230
So, here we have the list of all the different
feeds over on the left, already imported.

00:43:21.230 --> 00:43:26.520
Let's take a quick look at the
genre table that we were looking at.

00:43:26.520 --> 00:43:30.570
So, here we have the structure of
it, again, just four simple fields.

00:43:30.570 --> 00:43:36.380
We have the primary key defined over here as genre ID, etc.,

00:43:36.380 --> 00:43:39.520
and here's what the content looks
like from the database side.

00:43:39.520 --> 00:43:42.930
So, as I said, the genre feed is a fairly simple one.

00:43:42.930 --> 00:43:44.360
There are only a few columns.

00:43:44.360 --> 00:43:45.140
It's not very large.

00:43:45.140 --> 00:43:49.710
Let's take a look at application,
which is a little more complex.

00:43:49.710 --> 00:43:52.190
You're going to feel a good structure here.

00:43:52.190 --> 00:43:57.280
You've got maybe, oh, 16-20 different columns.

00:43:57.280 --> 00:44:01.880
This is what the application would
look like, application feed would look

00:44:01.880 --> 00:44:05.060
like after being imported into the EPF database.

00:44:05.060 --> 00:44:13.190
So, now, for demonstration purposes, we're going to
actually go ahead and delete this application table,

00:44:13.190 --> 00:44:17.220
and then we're going to recreate
it by doing an actual EPF import

00:44:17.220 --> 00:44:21.450
of the downloaded and unarchived application data feed.

00:44:21.450 --> 00:44:25.590
Normally, you wouldn't actually have to
delete it from the database beforehand,

00:44:25.590 --> 00:44:28.500
EPF Importer would take care of that itself.

00:44:28.500 --> 00:44:36.400
So, let's switch back over to the command line here.

00:44:36.400 --> 00:44:43.080
So, this is a typical command for running
the EPF Importer tool, to do what we want.

00:44:43.080 --> 00:44:49.400
So, it's invoked, just as you would invoke any
ordinary command line script, EPFImporter.pi.

00:44:49.400 --> 00:44:51.820
-w indicates that we're using a whitelist.

00:44:51.820 --> 00:44:56.160
We don't want to import here during the
demo, all of the files that we downloaded.

00:44:56.160 --> 00:44:58.880
We only want the application file.

00:44:58.880 --> 00:45:01.330
So, that's specified here.

00:45:01.330 --> 00:45:06.120
You may notice the little carat and dollar sign.

00:45:06.120 --> 00:45:15.860
The whitelist is defined as a set of regular expressions,
for those of you familiar with regular expressions.

00:45:15.860 --> 00:45:20.690
So, you can quite sophisticatedly filter out
which files you would or wouldn't want to import.

00:45:20.690 --> 00:45:23.220
For those of you not familiar with
regular expressions, don't worry.

00:45:23.220 --> 00:45:27.040
You need to learn very little of
them in order to use EPF Importer.

00:45:27.040 --> 00:45:33.150
And, finally, here, we have simply the
path to the directory of the set of files

00:45:33.150 --> 00:45:35.050
of which we're going to import an application.

00:45:35.050 --> 00:45:42.090
So, let's go ahead and run this right now and
begin an EPF import of the application feed.

00:45:42.090 --> 00:45:43.200
So, it's running now.

00:45:43.200 --> 00:45:44.440
It logs a number of things.

00:45:44.440 --> 00:45:50.700
EPF Importer is configured to log both to the
console and also to a rotating set of log files.

00:45:50.700 --> 00:45:54.050
Each time you do an import, it creates
a new log file, very easily searchable.

00:45:54.050 --> 00:45:58.730
This is going to take just a little bit of time to
import, so while we're waiting for that to complete,

00:45:58.730 --> 00:46:05.310
let's take a look just briefly at
the code of EPF Importer itself.

00:46:05.310 --> 00:46:09.750
EPF Importer is written in file, Python.

00:46:09.750 --> 00:46:11.000
It's not terribly long.

00:46:11.000 --> 00:46:16.330
It's going to be a couple of thousand lines
of code, total, consists of three modules.

00:46:16.330 --> 00:46:22.880
EPF Parser, this is the part of the code that
knows how to parse the data from the EPF files.

00:46:22.880 --> 00:46:29.760
It parses the metadata directly from those comment headers
at the top, and knows how the table will need to be created,

00:46:29.760 --> 00:46:37.490
based on that metadata, applying the primary key
constraints, etc. EPF Ingester is the part of the code

00:46:37.490 --> 00:46:40.020
that communicates with the MySQL database.

00:46:40.020 --> 00:46:45.290
It knows how to connect to it, and it also knows
how to actually create and populate the tables

00:46:45.290 --> 00:46:51.070
in the correct manner, using the data
that it retrieves from the parser.

00:46:51.070 --> 00:46:55.760
So, we mentioned that this is released as sample code.

00:46:55.760 --> 00:47:00.150
One obvious modification you would make, if you
wanted to import into some other kind of a database,

00:47:00.150 --> 00:47:05.750
rather than MySQL-- we chose that simply because it's freely
available, well supported-- but if you wanted to use, say,

00:47:05.750 --> 00:47:13.240
a Postgres database or an Oracle database, this would be
the Python module that you would be modifying or replacing.

00:47:13.240 --> 00:47:16.970
And, finally, EPF Importer, itself, is
what you call from the command line.

00:47:16.970 --> 00:47:25.660
It parses the command line arguments, applies constraints
from a config file, which you can supply, etc. So,

00:47:25.660 --> 00:47:29.870
the import is probably finished by now,
so let's go back to determine here.

00:47:29.870 --> 00:47:30.520
There we go.

00:47:30.520 --> 00:47:30.990
It's finished.

00:47:30.990 --> 00:47:35.700
Total import time for all directories
about 42 seconds, not too shabby.

00:47:35.700 --> 00:47:40.960
And now let's take a look at what
we've actually accomplished here.

00:47:40.960 --> 00:47:51.120
Let's do a quick refresh of our table list, and now
application has returned, and here it is in all its glory.

00:47:51.120 --> 00:47:55.030
Here we have about 210,000 rows.

00:47:55.030 --> 00:47:56.600
This is actually not production data.

00:47:56.600 --> 00:47:59.790
If it was, we'd have 225,000.

00:47:59.790 --> 00:48:03.010
Anyway, so this has all been repopulated automatically.

00:48:03.010 --> 00:48:05.590
All of the constraints have been
applied, the primary key, everything else.

00:48:05.590 --> 00:48:12.620
The table is recreated, required virtually
no human configuration of the MySQL database.

00:48:12.620 --> 00:48:19.540
So, once you have all of this data imported into your own
personal database, what sorts of things can you do with it?

00:48:19.540 --> 00:48:23.870
Well, you can, you know, do whatever you
want, but, as a couple of concrete examples,

00:48:23.870 --> 00:48:27.470
we have a couple of queries prepared here.

00:48:27.470 --> 00:48:37.160
So, first query here would be to find the most popular
apps in the U.S. Store, the genre of productivity

00:48:37.160 --> 00:48:41.020
that contain "keynote" in the description field.

00:48:41.020 --> 00:48:44.090
And I won't go into too much detail on the actual SQL.

00:48:44.090 --> 00:48:50.450
Those of you who know SQL will see some familiar
things, but you're selecting a certain number of fields,

00:48:50.450 --> 00:48:56.280
performing a join on a different table from the
table list, etc. So, let's go ahead and run this.

00:48:56.280 --> 00:49:00.480
And it goes very quickly, and here we have 16 rows,

00:49:00.480 --> 00:49:04.510
which are all of the applications
that meets this set of parameters.

00:49:04.510 --> 00:49:08.650
So, let's now do a slightly more sophisticated query.

00:49:08.650 --> 00:49:15.340
We didn't pull down all of the available rows from this, but
one that's not in the table that we were querying is price.

00:49:15.340 --> 00:49:22.640
That exists in another table, so
let's take a look at a second query.

00:49:22.640 --> 00:49:27.310
This will actually retrieve, essentially,
the same set of data as before,

00:49:27.310 --> 00:49:32.210
but this time it will also retrieve the
prices from the separate price table.

00:49:32.210 --> 00:49:37.980
Let's go ahead and run this, and there
we have the list of the same apps,

00:49:37.980 --> 00:49:42.800
but with their retail price over there on the side.

00:49:42.800 --> 00:49:46.540
So, that's just scratching the surface of the kind

00:49:46.540 --> 00:49:51.110
of things you can do using EPF Importer
and the EPF Relational or Flat feeds.

00:49:51.110 --> 00:49:52.140
Back to you, Mark.

00:49:52.140 --> 00:49:52.910
Thanks.

00:49:52.910 --> 00:49:54.240
>> Mark Miller: Thanks, Rick.

00:49:59.040 --> 00:50:01.970
[applause] So, yeah, a lot of stuff
you can do with EPF and EPF Importer.

00:50:01.970 --> 00:50:03.390
Again, sample code, check it out.

00:50:03.390 --> 00:50:05.750
A lot of possibilities.

00:50:06.880 --> 00:50:11.860
So, next on the list, we have Web iMix.

00:50:11.860 --> 00:50:15.880
Web iMix is a way for you to dynamically generate playlists.

00:50:15.880 --> 00:50:20.960
If you have a library of content, and you know
your customers are interested in some subset,

00:50:20.960 --> 00:50:27.120
you could put that all together in a playlist
just for them, and they can buy it with one click.

00:50:27.120 --> 00:50:31.760
The important part here is that you
can do it just by creating a URL.

00:50:31.760 --> 00:50:35.750
It's not like the regular iMix feature
that you might be familiar with.

00:50:35.750 --> 00:50:39.650
You don't have to pre-upload or
predefine anything, via the iTunes client.

00:50:39.650 --> 00:50:41.700
It's all done by the URL.

00:50:41.700 --> 00:50:45.620
And here's what it looks like in the iTunes client.

00:50:45.620 --> 00:50:50.110
So, how do we do that?

00:50:50.110 --> 00:50:57.300
Well, here's an example URL, and it's obviously pretty
complicated, but let's highlight some key features.

00:50:57.300 --> 00:50:58.970
First of all, we've got a description.

00:50:58.970 --> 00:51:06.890
The description is URL encoded, added to the
URL, and it appears in the iTunes client.

00:51:06.890 --> 00:51:16.950
We also have a title that titles the playlist and a list
of IDs that specify what content we want in this playlist.

00:51:16.950 --> 00:51:26.420
Now, you can add songs, and albums, and music
videos, and movies, I believe, to this list.

00:51:26.420 --> 00:51:31.530
Now, here's where this is the meat of how a Web iMix works.

00:51:31.530 --> 00:51:35.500
You need to create a special affiliate
account with iTunes first,

00:51:35.500 --> 00:51:40.590
and there'll be a link for you to
do that, an email address, rather.

00:51:40.590 --> 00:51:52.050
What that will get you is a WD ID that identifies you as a
Web iMix affiliate, and you apply that to the URL you create

00:51:52.050 --> 00:52:02.280
and then sign the URL with a secret that we share,
and attach that hash to the URL in the key parameter.

00:52:02.280 --> 00:52:06.680
And that's Web iMix.

00:52:06.680 --> 00:52:10.480
It's a simple feature, but you can
do a lot of great stuff with it.

00:52:10.480 --> 00:52:17.480
And, finally, we have a special feature
that might be the most powerful tool

00:52:17.480 --> 00:52:21.210
in this whole arsenal, and that's this Resources website.

00:52:21.210 --> 00:52:29.730
We launched it about a few months ago, and
it's at apple.com/itunes/affiliates/resources.

00:52:29.730 --> 00:52:36.980
It is a great way for you to stay on
top of new features, any sort of news,

00:52:36.980 --> 00:52:41.840
tips and tricks that we can come up with, FAQs.

00:52:41.840 --> 00:52:47.870
There's a lot of information there, so I
urge you to check it out and bookmark it.

00:52:47.870 --> 00:52:50.140
Add it to your RSS list.

00:52:50.140 --> 00:52:53.870
Lots of information, and it's updated frequently.

00:52:53.870 --> 00:52:58.700
So, that's our Tools and Services.

00:52:58.700 --> 00:53:06.070
In summary, the affiliate program is a great
way to earn bounties and promote your content.

00:53:06.070 --> 00:53:10.140
To get started, check out Link Maker,
great way to create a few links.

00:53:10.140 --> 00:53:13.950
But if you find that doesn't really scale
to what your needs are, there's other tools.

00:53:13.950 --> 00:53:18.760
RSS lets you keep track of what's hot on the iTunes Store.

00:53:18.760 --> 00:53:23.800
With Search API, you can come up
with queries to find what's going

00:53:23.800 --> 00:53:29.490
on in a particular artist's realm or something like that.

00:53:29.490 --> 00:53:34.680
EPF for doing some heavyweight data processing, and
there's EPF Importer to help you get started with that.

00:53:34.680 --> 00:53:38.660
And, finally, Web iMix for creating custom playlists.

00:53:38.660 --> 00:53:43.590
And, again, really, this website is a great
way-- I really urge you to check it out.

00:53:43.590 --> 00:53:50.400
If you're interested in what's available, the
Resources website is a great way to start.

00:53:50.400 --> 00:53:53.230
And if you haven't yet, sign up with an affiliate network.

00:53:53.230 --> 00:53:56.490
Get started in this process, and
start earning some bounties.

00:53:56.490 --> 00:54:06.490
As I said, third time, for documentation
and news, affiliate resources.

00:54:06.490 --> 00:54:09.730
And our evangelist for this session is Mark Malone.

