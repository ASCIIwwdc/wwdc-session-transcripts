WEBVTT

00:00:06.460 --> 00:00:10.940
>> Welcome to Session 101, What's New in Cocoa Touch.

00:00:10.940 --> 00:00:11.400
Good morning.

00:00:11.400 --> 00:00:13.040
My name is Chris Parker.

00:00:13.040 --> 00:00:18.030
I work on the UIKit Framework, and
today I'll be talking about everything

00:00:18.030 --> 00:00:21.820
that we've been working on for the last year.

00:00:21.820 --> 00:00:33.750
So, in 2009, we introduced iPhone OS 3 and that had a
bunch of new things for everyone to use, obviously.

00:00:33.750 --> 00:00:37.410
In April of 2010, we introduced iPhone OS 3.2.

00:00:37.410 --> 00:00:43.630
We shipped the iPad and you guys did just an
absolutely fantastic job of downloading the betas,

00:00:43.630 --> 00:00:47.360
getting your apps ready for the iPad,
and sending us a lot of great bugs.

00:00:47.360 --> 00:00:49.210
So, thank you very much.

00:00:49.210 --> 00:00:54.430
And today, yesterday actually,
you heard Steve talked about iOS 4

00:00:54.430 --> 00:00:58.060
and all of the support that we've
put in it for the hardware.

00:00:58.060 --> 00:01:01.270
We also have a lot of support for a number of new features.

00:01:01.270 --> 00:01:04.600
So, today I'm going to talk about
everything that we've done since last year.

00:01:04.600 --> 00:01:10.010
We'll go over some of the stuff for 3.2 and
then talk about some of the new things for 4.0.

00:01:10.010 --> 00:01:18.430
So iPhone OS 3.2 supports the iPad and the pad's
larger screen allows a lot of new ways for your users

00:01:18.430 --> 00:01:20.030
to be able to interact with their information.

00:01:20.030 --> 00:01:23.270
You'll be able to bring things
several taps closer to your users.

00:01:23.270 --> 00:01:29.570
The way they'll navigate through your application
probably has changed fairly significantly.

00:01:29.570 --> 00:01:34.770
We also really encourage you to write your application
so that they rotate to all directions, right.

00:01:34.770 --> 00:01:38.900
I certainly caught myself using the iPad and suddenly
discovering that the Home button wound up on top

00:01:38.900 --> 00:01:43.020
and I keep tapping on the bottom and I can't go Home.

00:01:43.020 --> 00:01:46.150
So if you're finding that, that's actually
a pretty good sign because it means

00:01:46.150 --> 00:01:49.930
that your users can use the iPad in any orientation.

00:01:49.930 --> 00:01:53.310
And we had introduced some non-full
screen UI elements, right.

00:01:53.310 --> 00:01:57.470
We finally have something that's big enough
that the full screen transitions that happen

00:01:57.470 --> 00:02:01.880
on the iPhone don't really translate very
well to a screen the size of the iPad.

00:02:01.880 --> 00:02:04.990
And we also introduced document sharings.

00:02:04.990 --> 00:02:08.050
There are ways to not only share
documents from your desktop to your iPad

00:02:08.050 --> 00:02:13.040
but also among the applications that are on your iPad.

00:02:13.040 --> 00:02:19.140
iOS 4 introduces two really big
features, multitasking and HiDPI

00:02:19.140 --> 00:02:22.310
and we've got support in UIKit for both of those things.

00:02:22.310 --> 00:02:26.740
There are some basic things you'll do to
adopt those technologies and then if you want

00:02:26.740 --> 00:02:31.020
to make your app far more sophisticated
about those things, you can do that as well.

00:02:31.020 --> 00:02:34.680
So let's talk about what's in iPhone OS 3.2.

00:02:34.680 --> 00:02:40.870
UIPopoverController is a non-full
screen transient UI element.

00:02:40.870 --> 00:02:46.410
It's designed to put things on the screen that the
user may interact with briefly and then dismiss, right.

00:02:46.410 --> 00:02:49.810
So, you present these things, they come
up with a view controller inside them.

00:02:49.810 --> 00:02:52.880
The user taps outside of them, they go away.

00:02:52.880 --> 00:02:58.680
Or they tap something inside the popover, they've
made a selection and you go ahead and dismiss it.

00:02:58.680 --> 00:03:02.140
It is not itself a UIViewController subclass.

00:03:02.140 --> 00:03:08.390
It's its own controller class and you create one of these
things just by calling initWithContentViewController.

00:03:08.390 --> 00:03:12.510
So, the UIPopoverController is
going to host a view controller.

00:03:12.510 --> 00:03:14.250
It has a bunch of different properties.

00:03:14.250 --> 00:03:19.560
If you change the content view controller while it's
up, we'll go ahead and crossfade between the two.

00:03:19.560 --> 00:03:24.010
There's also a variant of this that you
can do the change without animation.

00:03:24.010 --> 00:03:28.780
You can change the popover content size
from outside the popover or actually

00:03:28.780 --> 00:03:31.470
from inside in your UIViewController subclass.

00:03:31.470 --> 00:03:33.410
You can also set some things called passthroughViews.

00:03:33.410 --> 00:03:37.860
And passthroughViews are a way that you can have
the popover up and then the user can interact

00:03:37.860 --> 00:03:40.920
with other UI elements while the popover is up.

00:03:40.920 --> 00:03:43.890
Normally, they tap outside, it would go away.

00:03:43.890 --> 00:03:46.680
You can also have interaction while the popover is up.

00:03:46.680 --> 00:03:51.870
And that's actually if you've used the Mail
application on the iPad in portrait orientation.

00:03:51.870 --> 00:03:57.890
When the popover is up and you start deleting three or four
email messages, grab the messages behind it with two fingers

00:03:57.890 --> 00:04:01.030
and pull the messages out from underneath the popover.

00:04:01.030 --> 00:04:04.970
You can read the messages so that you can see,
make sure that you are deleting the right things.

00:04:04.970 --> 00:04:08.580
So, that's actually how they do that in Mail.

00:04:08.580 --> 00:04:15.770
So presentation and dismissal for
UIPopover-- The Earth move for you guys too?

00:04:15.770 --> 00:04:17.410
[ Laughter ]

00:04:17.410 --> 00:04:23.010
Presentation and dismissal for UIPopoverController, you
present these things from a rect inside a view, right.

00:04:23.010 --> 00:04:25.180
So you may have a large canvass the user taps,

00:04:25.180 --> 00:04:30.580
you'd like to be able to choose a rect inside a
larger view that the popover is presented from.

00:04:30.580 --> 00:04:35.800
You'll call popover, presentPopoverFromRect,
inView, permittedArrowDirections, animated.

00:04:35.800 --> 00:04:45.270
One cagey note about this, the rect that you provide to
this method should be in the coordinate system of the view.

00:04:45.270 --> 00:04:46.010
I've done it too.

00:04:46.010 --> 00:04:48.730
I went ahead and passed view frame
to this thing and couldn't figure

00:04:48.730 --> 00:04:52.270
out why the popover was coming up in the wrong spot.

00:04:52.270 --> 00:04:55.450
You probably want the bounds of the view, right.

00:04:55.450 --> 00:04:59.440
Otherwise you are tapping here and the
popover is showing up someplace over here.

00:04:59.440 --> 00:05:06.020
The permittedArrowDirections allows you to tune
where the algorithm chooses to lay your popover out.

00:05:06.020 --> 00:05:10.990
So, we actually try to figure out how
to position the popover in such a way

00:05:10.990 --> 00:05:13.830
that it shows the maximum area on the screen.

00:05:13.830 --> 00:05:20.950
So, usually you'll pass UIPopoverArrowDirectionAny
to this but you can pass up, down.

00:05:20.950 --> 00:05:24.030
You know, it's a bit field so you get
to choose what directions you want.

00:05:24.030 --> 00:05:27.960
So if you only want it to appear from
the top or the bottom, you can do that.

00:05:27.960 --> 00:05:34.950
There's also specific API for presenting from
UIToolBars, specifically Bar Button items in UIToolBars.

00:05:34.950 --> 00:05:41.470
So presentPopoverFromBarButtonItem is the API if
you are going to drop something from a UIToolBar.

00:05:41.470 --> 00:05:46.910
And remember on OS 3.2 now you can have
UIToolBars at the top of your views, right.

00:05:46.910 --> 00:05:50.830
We used to say you had them at the bottom,
now you can have them at the top as well.

00:05:50.830 --> 00:05:56.920
When you dismiss a UIPopover, if the user dismisses
your popover you get some delegate callbacks.

00:05:56.920 --> 00:05:59.110
One of them says should dismiss popover.

00:05:59.110 --> 00:06:01.170
If you returned yes, it will go ahead and dismiss.

00:06:01.170 --> 00:06:03.900
If you return no, it won't dismiss at that time.

00:06:03.900 --> 00:06:10.240
If you call dismissPopoverAnimated, we're not
going to call those delegate callbacks, right.

00:06:10.240 --> 00:06:16.290
The delegate callbacks are specifically
for the user action to dismiss the popover.

00:06:16.290 --> 00:06:20.700
dismissPopoverAnimated is your action and we assume
that if you're calling this, you know it's going away.

00:06:20.700 --> 00:06:23.250
You probably don't need to-- you want it to go away.

00:06:23.250 --> 00:06:27.610
So we're not going to call the delegate methods for that.

00:06:27.610 --> 00:06:32.510
There are some specific additions to
support popovers on UIViewController itself.

00:06:32.510 --> 00:06:40.580
So, the content size for viewing popover property is how
you tell UIPopoverController how big you want the popover

00:06:40.580 --> 00:06:43.040
to be for that particular view controller.

00:06:43.040 --> 00:06:50.340
So we'll go ahead and call that and figure out
what size you'll be-- the popover view will be.

00:06:50.340 --> 00:06:51.350
There we go.

00:06:51.350 --> 00:06:57.380
And this is a read-write property, so typically,
you'll set this probably and viewWillAppear.

00:06:57.380 --> 00:07:03.390
That you can use this dynamically as well so if you
have a view that changes size depending on its content,

00:07:03.390 --> 00:07:09.320
you'll be able to just say, you know, the height might
be the height of the view that's contained in it.

00:07:09.320 --> 00:07:15.780
Also if you call this while the popover is
up, we'll animate the resize for you, right.

00:07:15.780 --> 00:07:18.060
So, you don't need a back reference
to the popover controller.

00:07:18.060 --> 00:07:23.040
If you're doing this stuff, you can just call
contentSizeForViewInPopover as your view changes size.

00:07:23.040 --> 00:07:25.330
We'll go ahead and if it's in a popover we'll resize it.

00:07:25.330 --> 00:07:28.090
If it's not in a popover we'll ignore it.

00:07:28.090 --> 00:07:31.010
There's also a setting for modality.

00:07:31.010 --> 00:07:35.720
One example of this is actually the
AB people person-- person people.

00:07:35.720 --> 00:07:37.270
I can never remember the name of this thing.

00:07:37.270 --> 00:07:41.750
It's the thing that displays Address Book cards, right.

00:07:41.750 --> 00:07:45.320
And if you tap Edit that same view shifts into an edit mode.

00:07:45.320 --> 00:07:48.270
It doesn't push a new view to be the editor.

00:07:48.270 --> 00:07:51.350
And when you go into that edit mode it becomes modal.

00:07:51.350 --> 00:07:53.300
You can't tap outside it.

00:07:53.300 --> 00:07:54.200
That's how they do this.

00:07:54.200 --> 00:07:57.780
It's with the isModalInPopover
property or the modalInPopover property.

00:07:57.780 --> 00:08:01.200
So if you have state where you really
don't want the user dismissing this

00:08:01.200 --> 00:08:04.970
until they finish something inside your popover, use this.

00:08:04.970 --> 00:08:09.100
For the most part, popovers aren't modal things.

00:08:09.100 --> 00:08:10.490
They are very transient things.

00:08:10.490 --> 00:08:16.570
So, things you are going to tap on,
user interacts with and they go away.

00:08:16.570 --> 00:08:21.200
UISplitViewController is the other big
new UI element that supports the iPad.

00:08:21.200 --> 00:08:23.260
So, it's a full screen UI element.

00:08:23.260 --> 00:08:26.310
This is in fact a subclass of UIViewController.

00:08:26.310 --> 00:08:29.790
So, it goes through the same rotation,
checks and everything else.

00:08:29.790 --> 00:08:31.360
It keeps track of two view controllers.

00:08:31.360 --> 00:08:34.730
It also manages a popover controller for you.

00:08:34.730 --> 00:08:36.020
And we'll see how that works in a minute.

00:08:36.020 --> 00:08:38.720
Typically, you'll use these for master detail views.

00:08:38.720 --> 00:08:41.210
The Mail application uses one of these, right.

00:08:41.210 --> 00:08:43.480
Your Mail inbox is on the left.

00:08:43.480 --> 00:08:47.030
The message content is on the right.

00:08:47.030 --> 00:08:52.620
This is actually a version of the Core Data
books example that we'll use in a minute.

00:08:52.620 --> 00:08:55.840
Typically you will create these things from NIBs, right.

00:08:55.840 --> 00:08:59.550
When you drive one of these out in Interface
Builder, it shows up, a nice big window comes up.

00:08:59.550 --> 00:09:07.140
It has a full layout for everything with all of the
view controllers already set up, a navigation controller

00:09:07.140 --> 00:09:09.230
in one side, a view controller on the other.

00:09:09.230 --> 00:09:14.410
You can create them just by calling alloc init obviously.

00:09:14.410 --> 00:09:15.780
It does have some new properties.

00:09:15.780 --> 00:09:18.220
One of them is an array of view controllers.

00:09:18.220 --> 00:09:21.070
Right now that's-- you get two.

00:09:21.070 --> 00:09:28.170
So the object at index 0 for this NSArray
is the narrower sort of the master view

00:09:28.170 --> 00:09:33.050
and the one in object at index 1 is the detail view.

00:09:33.050 --> 00:09:37.760
And the delegate controls, you get
notifications on the delegate depending

00:09:37.760 --> 00:09:41.450
on what events are happening as the user rotates the device.

00:09:41.450 --> 00:09:47.750
So there are three UIViewController
delegate methods, SplitViewController,

00:09:47.750 --> 00:09:53.100
willHideViewController, withBarButtonItem,
forPopoverController.

00:09:53.100 --> 00:09:56.730
We do try to be descriptive in all of these methods.

00:09:56.730 --> 00:09:59.630
The SplitViewController obviously
is what's doing the rotations.

00:09:59.630 --> 00:10:05.040
willHideViewController, this is the
landscape to portrait transition, right.

00:10:05.040 --> 00:10:07.300
So we go from landscape to portrait.

00:10:07.300 --> 00:10:10.310
We're going to hide that master view controller. Right?

00:10:10.310 --> 00:10:12.210
We're going to give you a UIBarButtonItem.

00:10:12.210 --> 00:10:15.460
That BarButtonItem is the thing that
you are going to put up in the Toolbar

00:10:15.460 --> 00:10:18.920
in what will be the only view visible in portrait.

00:10:18.920 --> 00:10:23.500
And for popover controller we're actually also going to give
you a reference to the popover controller in case you want

00:10:23.500 --> 00:10:26.220
to adjust its content size or something like that.

00:10:26.220 --> 00:10:30.600
The SplitView does own that popover
controller so don't go doing something crazy

00:10:30.600 --> 00:10:34.130
like tweaking its delegate or anything like that.

00:10:34.130 --> 00:10:39.030
SplitViewController will show a view
controller invalidating BarButtonItem.

00:10:39.030 --> 00:10:39.750
That's the other way.

00:10:39.750 --> 00:10:41.910
We're going from portrait to landscape.

00:10:41.910 --> 00:10:44.650
We're going to show the master view
controller and we're also telling you

00:10:44.650 --> 00:10:47.180
that BarButtonItem we gave you
before, yeah, that's no good anymore.

00:10:47.180 --> 00:10:48.240
Get rid of that.

00:10:48.240 --> 00:10:53.250
So that's how you can govern what's
happening in SplitViewController.

00:10:53.250 --> 00:10:56.590
And SplitViewController, PopoverController
will present popover controller.

00:10:56.590 --> 00:10:58.440
This is-- will present view controller.

00:10:58.440 --> 00:11:03.450
This is where the user is going to go ahead and tap on
that button in portrait and we're going to tell you we're

00:11:03.450 --> 00:11:08.210
about to display so if you have any other actions you want
to take like maybe setting its passthroughViews or something

00:11:08.210 --> 00:11:10.430
like that, this is your opportunity to do so.

00:11:10.430 --> 00:11:19.210
I actually have a small demo about how to at least
show you code about how to manage your BarButtonItems.

00:11:19.210 --> 00:11:29.730
And the Universal Core Data Books example
is something that I'll be using later

00:11:29.730 --> 00:11:33.120
in the iPad Development Overview at 4:30 today.

00:11:33.120 --> 00:11:36.200
So if you're going to be coming to
that you'll see a lot of this method.

00:11:36.200 --> 00:11:40.370
Let me run this in the simulator.

00:11:40.370 --> 00:11:44.830
This is a little small for the iPad, isn't it?

00:11:44.830 --> 00:11:47.160
Let's run it in the other simulator.

00:11:47.160 --> 00:11:54.410
And actually I'm going to stop here for a second.

00:11:54.410 --> 00:11:59.460
If you are watching closely when I built that,
this is the same simulator binary running

00:11:59.460 --> 00:12:02.990
in both the 3.2 simulator and the 4.0 simulator.

00:12:02.990 --> 00:12:09.530
We've recompiled the system frameworks for
the iPhone OS with a new Objective-C runtime.

00:12:09.530 --> 00:12:13.470
So this means that you get full
synthesized ivars in the simulator.

00:12:13.470 --> 00:12:19.290
You'll be able to run your simulator binaries
across both SDKs so you don't have to keep having

00:12:19.290 --> 00:12:22.250
to recompile everything and keep
separate versions of everything.

00:12:22.250 --> 00:12:25.440
So this is actually really handy.

00:12:25.440 --> 00:12:26.640
So--

00:12:26.640 --> 00:12:30.010
[ Applause ]

00:12:30.010 --> 00:12:31.210
Some of you have done that then.

00:12:31.210 --> 00:12:35.590
Good. Let's take a look at this application here.

00:12:35.590 --> 00:12:38.090
This is the Universal Core Data Books application.

00:12:38.090 --> 00:12:43.170
If I tap on a particular book it shows
me a nice detailed view of the book.

00:12:43.170 --> 00:12:46.770
And as I rotate watch what happens
in that button at the top here.

00:12:46.770 --> 00:12:48.620
I get this popover controller.

00:12:48.620 --> 00:12:53.640
The code for this all lives right
now in book DetailViewController

00:12:53.640 --> 00:12:59.250
and here are the SplitViewController methods.

00:12:59.250 --> 00:13:00.940
There are three of them.

00:13:00.940 --> 00:13:03.600
This is the willHideViewController with BarButtonItem.

00:13:03.600 --> 00:13:08.190
You will just grab your BarButtonItem,
give it a nice title, call it Books.

00:13:08.190 --> 00:13:13.830
We'll go ahead and make a copy of that
toolbar items array insert the object.

00:13:13.830 --> 00:13:28.370
Set the items, release the toolbar items because we don't
want a leak and we'll grab a copy of the popover controller

00:13:28.370 --> 00:13:31.020
because there may be times, for instance,
if you want to interact with something,

00:13:31.020 --> 00:13:32.770
you may want to just dismiss the popover controller.

00:13:32.770 --> 00:13:34.400
So, you can tell it to dismiss.

00:13:34.400 --> 00:13:35.350
That's okay.

00:13:35.350 --> 00:13:39.550
Call it again, here the splitView:willShowViewController.

00:13:39.550 --> 00:13:44.070
Same thing-- I almost forgot same leak.

00:13:44.070 --> 00:13:48.630
Remove the item at the index and pull it out.

00:13:48.630 --> 00:13:56.840
We do recommend that you put the button that you are
going to use at object at index 0 in your toolbar

00:13:56.840 --> 00:14:02.800
because that turns out to be the left most
item in that toolbar and it will be closest

00:14:02.800 --> 00:14:05.850
to the view controller when it rotates back in.

00:14:05.850 --> 00:14:09.770
Oh, and this pop-- I just put an NSLog in here,
the popover controller will present view controller

00:14:09.770 --> 00:14:14.620
but you can do anything you want in there within a reason.

00:14:14.620 --> 00:14:17.470
We've also introduced UIDocumentInteractionController.

00:14:17.470 --> 00:14:28.810
And this is a-- basically how it we're managing
the UI for doing document interchange on the iPad.

00:14:28.810 --> 00:14:34.870
So, when you are going to send somebody a
document, you've seen this in Mail, right.

00:14:34.870 --> 00:14:39.550
You hold down your finger on a particular
document, you get the little popover controller.

00:14:39.550 --> 00:14:43.700
It comes up, it's got an open end menu
you probably have several options here.

00:14:43.700 --> 00:14:45.640
It is the UI for opening documents.

00:14:45.640 --> 00:14:47.760
It is the UI for previewing documents.

00:14:47.760 --> 00:14:53.980
It uses universal type identifiers and the
way you specify what documents you can open

00:14:53.980 --> 00:14:56.220
in your application is the same
way you do it on the desktop.

00:14:56.220 --> 00:15:02.180
In fact, it's the same Launch Services key
for expressing interest in document formats.

00:15:02.180 --> 00:15:06.000
So, you'll specify which UTIs your app opens.

00:15:06.000 --> 00:15:08.190
We figure out what's installed on the machine.

00:15:08.190 --> 00:15:10.950
We put your app in this list.

00:15:10.950 --> 00:15:18.720
So UIDocumentInteractionController, you can create these
things from just by saying interactionControllerWithURL.

00:15:18.720 --> 00:15:21.740
It will give us the URL, that URL
is probably something that's

00:15:21.740 --> 00:15:26.860
in your applications documents
directory or in your app wrapper.

00:15:26.860 --> 00:15:30.160
The properties are things like well,
obviously, you can read the URL.

00:15:30.160 --> 00:15:34.470
We also do some introspection and
figure out based on the file extension

00:15:34.470 --> 00:15:37.610
and things like that what the UTI, the document is.

00:15:37.610 --> 00:15:39.110
And then we'll check the name.

00:15:39.110 --> 00:15:42.700
This is suitable for display to the user.

00:15:42.700 --> 00:15:47.600
The array of icons is just a bunch
of UIImages in increasing size.

00:15:47.600 --> 00:15:51.540
So, if you've got a limited amount of space,
probably is one of the earlier items in the array.

00:15:51.540 --> 00:15:56.640
If you've got a whole bunch of space you
can use one of the later items in the array.

00:15:56.640 --> 00:16:01.480
And you can set your own annotations
on these things as well.

00:16:01.480 --> 00:16:08.850
There is an Options menu that's the open in
menu, presentOptionsMenuFromRect, InView.

00:16:08.850 --> 00:16:13.550
That should look familiar because it's in a popover,
it's the same kind of rules that go with the rect

00:16:13.550 --> 00:16:15.130
and the view that you're presenting there.

00:16:15.130 --> 00:16:17.420
And presentOptionsMenuFromBarButtonItems.

00:16:17.420 --> 00:16:18.360
Same thing.

00:16:18.360 --> 00:16:19.370
This works in both.

00:16:19.370 --> 00:16:21.100
There is a version for 3.2.

00:16:21.100 --> 00:16:26.730
And there is also in iOS 4, a version
that comes up as an action sheet

00:16:26.730 --> 00:16:31.310
and you can put your own UI for tapping on the document.

00:16:31.310 --> 00:16:37.230
dismissMenuAnimated, same kind of
thing, when you tap in it you'll--

00:16:37.230 --> 00:16:39.820
if you call this, you'll tell us
that you want it to go away.

00:16:39.820 --> 00:16:44.470
You can also present a preview, right.

00:16:44.470 --> 00:16:48.870
So, the user can preview the things that we know
about, things like PDFs and Keynote documents

00:16:48.870 --> 00:16:50.890
and Numbers documents and things like that.

00:16:50.890 --> 00:16:56.260
You'll be able to present a preview from your application
directly so if you don't want to launch another app

00:16:56.260 --> 00:17:01.860
or if the user doesn't want to launch another app,
you can just put a preview up of what's been selected.

00:17:01.860 --> 00:17:06.590
And you can also dismiss the preview
in an animated fashion as well.

00:17:06.590 --> 00:17:19.810
One of the really difficult things that we found that we
got feedback about was trying to track gestures, right.

00:17:19.810 --> 00:17:24.530
So, the user taps and you are trying to recognize a swipe
and you have to keep track of a touch and where it went down

00:17:24.530 --> 00:17:29.900
and how long it was and whether it was perfectly
horizontal or it started to drift, things like that.

00:17:29.900 --> 00:17:37.770
UIGestureRecognizer introduced in 3.2 allows you
to associate an action with a gesture, right.

00:17:37.770 --> 00:17:44.910
So, we have built-in gesture recognizers for swipes,
rotation, long presses, pinches, taps, and pans.

00:17:44.910 --> 00:17:48.910
The rotation, right, is put two
fingers down, rotate like this.

00:17:48.910 --> 00:17:50.200
Swipes obviously.

00:17:50.200 --> 00:17:55.690
These allow you to match all of our
metrics for all of these gestures.

00:17:55.690 --> 00:18:02.980
So if you use the built-in gesture recognizers
you're getting the same metrics and trigger behavior

00:18:02.980 --> 00:18:08.520
that we use for photos and mail and all of our apps.

00:18:08.520 --> 00:18:10.530
They're really easy to create.

00:18:10.530 --> 00:18:13.200
You set it up with an initWithTarget action.

00:18:13.200 --> 00:18:19.930
So, you'll have a target object and an action which is a
selector and the automatic ones you can just create right

00:18:19.930 --> 00:18:23.660
out of-- the built in ones rather, you
can just create right off the headers.

00:18:23.660 --> 00:18:26.920
This is part of your subclasses.

00:18:26.920 --> 00:18:32.790
So you can write your own UIGestureRecognizers
to recognize different kinds of interaction.

00:18:32.790 --> 00:18:35.280
They have a bunch of different properties.

00:18:35.280 --> 00:18:36.540
It's a big state machine.

00:18:36.540 --> 00:18:40.840
There's a I've began recognizing state
and there's a I'm still recognizing state.

00:18:40.840 --> 00:18:43.210
And there's oh, I recognized something and I fired state.

00:18:43.210 --> 00:18:49.200
So, you'll be able to find out a lot about the state
there through the UIGesture, through the state property.

00:18:49.200 --> 00:18:50.090
There's a delegate.

00:18:50.090 --> 00:18:52.480
It has some delegate methods that we'll get to in a second.

00:18:52.480 --> 00:18:54.780
You can enable or disable them, right.

00:18:54.780 --> 00:18:59.010
So, if you don't want it to recognize under
particular conditions you can turn it off entirely.

00:18:59.010 --> 00:19:00.740
They get attached to a particular view.

00:19:00.740 --> 00:19:04.650
Once it's been attached you can call the
view accessory to find out where it went.

00:19:04.650 --> 00:19:08.950
And cancelsTouchesInView there controls the behavior

00:19:08.950 --> 00:19:14.310
when the gesture recognizer no longer is
able to recognize a particular gesture.

00:19:14.310 --> 00:19:17.310
On UIView you just attach these things, right.

00:19:17.310 --> 00:19:23.080
So, there's API on UIView that says once you've
got a UIGestureRecognizer, add it to this view,

00:19:23.080 --> 00:19:26.240
and you can remove UIGestureRecognizer
that's been put on to a view.

00:19:26.240 --> 00:19:28.340
The delegate methods are pretty straightforward.

00:19:28.340 --> 00:19:34.310
Gesture recognizers should begin--
is your opportunity to say yes or no.

00:19:34.310 --> 00:19:38.940
Gesture recognizers should recognize
simultaneously with gesture recognizer,

00:19:38.940 --> 00:19:42.880
another one of those descriptive delegate
methods but it ties two delegates.

00:19:42.880 --> 00:19:44.680
It ties two gesture recognizers together.

00:19:44.680 --> 00:19:46.840
So you can decide how they act in concert.

00:19:46.840 --> 00:19:52.190
So, you can set up relationships between gesture recognizers
and say when this one is active, this one is not.

00:19:52.190 --> 00:19:55.790
Do not have these working together at the same time.

00:19:55.790 --> 00:19:59.000
And gesture recognizers should receive
touch, right, another delegate method.

00:19:59.000 --> 00:20:04.410
As touches start to get added to the event
sequence, this is your opportunity to decide whether

00:20:04.410 --> 00:20:07.500
or not the gesture recognizers are going to see it.

00:20:07.500 --> 00:20:10.370
This is a big topic.

00:20:10.370 --> 00:20:11.750
We actually have two talks on this.

00:20:11.750 --> 00:20:19.250
Simplifying Touch Event Handling with Gesture Recognizers
is in Pacific Heights tomorrow at, what's that, 3:15.

00:20:19.250 --> 00:20:25.460
And if you stay in your chairs for another
hour you can get Advanced Gesture Recognizer,

00:20:25.460 --> 00:20:28.780
Advanced Gesture Recognition in the same room.

00:20:28.780 --> 00:20:33.630
So if you are doing a lot of gesture
work, we're talking about that tomorrow.

00:20:33.630 --> 00:20:39.960
We now support multiple screens for
iPhone OS 3.2 and in iPhone OS 4.

00:20:39.960 --> 00:20:44.330
Actually, much of what I'm talking about
here applies to both operating systems.

00:20:44.330 --> 00:20:49.200
The multiple screen support is basically how
we're doing things like TV out for Keynote.

00:20:49.200 --> 00:20:51.920
Alright, so you can find out what
screens are attached to the device.

00:20:51.920 --> 00:20:54.820
There are some notifications that tell
you that screens are coming and going.

00:20:54.820 --> 00:20:57.410
And the screens had different modes.

00:20:57.410 --> 00:20:59.780
One of them is the availableModes array.

00:20:59.780 --> 00:21:05.650
You get a list of all of the modes that are supported
and this is very similar to what you see on the desktop

00:21:05.650 --> 00:21:12.340
with the projection business and you plug in a display
and you get to choose which resolutions are available.

00:21:12.340 --> 00:21:17.970
The modes array here is an array,
an NSArray of UIScreenMode object.

00:21:17.970 --> 00:21:22.760
Those objects all contain information
about the current mode.

00:21:22.760 --> 00:21:25.350
The currentMode is obviously whatever
is being displayed there.

00:21:25.350 --> 00:21:26.970
The mode objects are pretty simple.

00:21:26.970 --> 00:21:29.410
They have two things in them.

00:21:29.410 --> 00:21:36.250
One is the width and height of the screen and
the other is the aspect ratio or the pixel.

00:21:36.250 --> 00:21:40.040
It turns out it's awfully convenient to think of pixels
as squares but there are a lot of things you can plug

00:21:40.040 --> 00:21:42.240
in to your devices that do not have square pixels.

00:21:42.240 --> 00:21:47.160
So, that is your opportunity also to decide whether or
not you need to tune your drawing for particular screen.

00:21:47.160 --> 00:21:55.950
So we now also have support for custom input
views, custom keyboards and custom accessory views.

00:21:55.950 --> 00:21:59.070
This has been a big request.

00:21:59.070 --> 00:22:01.590
We have the Numbers screen shot here.

00:22:01.590 --> 00:22:04.590
This is the text inputAccessoryView.

00:22:04.590 --> 00:22:06.410
It shows up above the keyboard.

00:22:06.410 --> 00:22:10.730
It you create one of these and
attach it to a UIResponder subclass.

00:22:10.730 --> 00:22:14.840
As the keyboard comes and goes for that responder
we bring that view up automatically as part

00:22:14.840 --> 00:22:18.290
of the same animation with the keyboard, right.

00:22:18.290 --> 00:22:22.560
So you don't have to try and synch up
with us and get that view in place.

00:22:22.560 --> 00:22:25.630
You can just attach it to your UIResponder subclass.

00:22:25.630 --> 00:22:31.000
We'll go ahead and move it for you and it's
the same thing for a custom keyboard itself.

00:22:31.000 --> 00:22:33.650
So, this is the standard keyboard.

00:22:33.650 --> 00:22:37.120
Numbers also supports a date and
time keyboard, for instance.

00:22:37.120 --> 00:22:41.170
So there are a bunch of different
kinds of input that you can capture

00:22:41.170 --> 00:22:43.940
from the user just by providing a custom keyboard.

00:22:43.940 --> 00:22:49.050
And this is the, it looks like the money input.

00:22:49.050 --> 00:22:52.570
Yes, numbers, dollars, ratings, things like that.

00:22:52.570 --> 00:22:55.180
I actually have a really, oh.

00:22:55.180 --> 00:22:56.380
UIResponder input view.

00:22:56.380 --> 00:23:03.060
On the UIResponderView subclass itself, there are
two properties, inputView and inputAccessoryView.

00:23:03.060 --> 00:23:04.930
They're read only.

00:23:04.930 --> 00:23:10.450
So if you are writing your own responder subclass
you'll override these and return your own inputView

00:23:10.450 --> 00:23:17.240
or you own inputAccessoryView that will come
along with the keyboard as it comes in and out.

00:23:17.240 --> 00:23:24.040
But if you want to tinker around with it or if
you are working with text views specifically,

00:23:24.040 --> 00:23:31.360
the text view has redeclared the
property as read-write, okay.

00:23:31.360 --> 00:23:37.890
So let's stop looking at Universal Core Data
Books here and go for the input view demo.

00:23:42.010 --> 00:23:45.930
This is a very, very simple demo.

00:23:45.930 --> 00:23:48.060
That's just a straight UITextField.

00:23:48.060 --> 00:23:53.370
If I tap in it, hey look, the Home
button is at the top, put that back.

00:23:53.370 --> 00:23:57.060
If I just tap in it, the keyboard comes up.

00:23:57.060 --> 00:24:00.420
I've got a simple accessory view here
that has just three buttons in it.

00:24:00.420 --> 00:24:06.130
I can type in the view, that's fine, and then the three
buttons just go ahead and change the background color.

00:24:06.130 --> 00:24:08.610
The code though for these is really simple.

00:24:08.610 --> 00:24:14.420
It is a fairly tight relationship between
the input views or the input accessory views

00:24:14.420 --> 00:24:16.930
and the view that's going to receive those events.

00:24:16.930 --> 00:24:20.320
So let me show you what the demo accessory view looks like.

00:24:20.320 --> 00:24:23.670
I just have an initWithFrame here
and it's got three buttons.

00:24:23.670 --> 00:24:26.670
I go ahead and put the buttons in too.

00:24:26.670 --> 00:24:27.550
I set their targets.

00:24:27.550 --> 00:24:30.860
I go ahead and set their titles, set their frames.

00:24:30.860 --> 00:24:33.960
So I have to do the layout and
then I go and add the subviews

00:24:33.960 --> 00:24:37.880
and what I've done here is just added a background color.

00:24:37.880 --> 00:24:47.480
If I don't add that I wind up getting just this
blank space here which is fine but in general,

00:24:47.480 --> 00:24:50.320
we probably want to put some chrome there
to make sure that everybody understands

00:24:50.320 --> 00:24:55.160
that this is a paired view that
goes along with the keyboard, so.

00:24:55.160 --> 00:24:59.710
And just in terms of setting, I have
a controlled view property here.

00:24:59.710 --> 00:25:03.290
In terms of setting the controlled view
color we just set a background color.

00:25:03.290 --> 00:25:08.160
And just depending on which button got hit, we
just send the appropriate message that says,

00:25:08.160 --> 00:25:11.940
hey set color to, you know, red, green or blue.

00:25:11.940 --> 00:25:14.440
That's the accessory view itself.

00:25:14.440 --> 00:25:20.270
In the input demo view controller here, all I
did was create one of these demo accessory views

00:25:20.270 --> 00:25:25.370
with the right frame and attached it to the text field.

00:25:25.370 --> 00:25:30.200
So if all you're using are text
fields in order to get custom input,

00:25:30.200 --> 00:25:32.130
you can just go ahead and attach them directly.

00:25:32.130 --> 00:25:36.040
If you are writing your own responder
subclasses you should make sure

00:25:36.040 --> 00:25:39.990
that you override that method and return your view.

00:25:39.990 --> 00:25:43.970
So we added some new things to UIMenuController.

00:25:43.970 --> 00:25:45.050
Remember what used to happen, right.

00:25:45.050 --> 00:25:46.470
You tap in a UIMenu.

00:25:46.470 --> 00:25:47.920
You tap in some text.

00:25:47.920 --> 00:25:50.720
You get the Select or Select All
options and then you choose.

00:25:50.720 --> 00:25:53.290
From the selection you get Cut, Copy or Paste.

00:25:53.290 --> 00:25:56.990
You can now add your own items to UIMenuControllers.

00:25:56.990 --> 00:26:02.610
This includes you know, if you wanted to put
something to trigger a search, to look up a word.

00:26:02.610 --> 00:26:06.610
Anything you that you can do with the text
you'll be able to add some actions to that text.

00:26:06.610 --> 00:26:08.470
So you can add your items.

00:26:08.470 --> 00:26:11.650
You add them by just creating a new UIMenuItem object.

00:26:11.650 --> 00:26:14.060
That UIMenuItem object has a title.

00:26:14.060 --> 00:26:16.220
That is what gets displayed in the menu controller.

00:26:16.220 --> 00:26:22.370
It has an action selector as well and that gets sent up to
responder chain the same way the cut, copy, paste ones do.

00:26:22.370 --> 00:26:29.020
So you will be able to govern what appears the same
way you govern your behavior for cut, copy, and paste.

00:26:29.020 --> 00:26:31.730
There is also a new Delete item that got added.

00:26:31.730 --> 00:26:33.820
That is an automatic thing.

00:26:33.820 --> 00:26:36.530
So now you got copy, copy, paste, delete.

00:26:36.530 --> 00:26:41.630
The Delete item just takes a selection and removes it
without actually putting anything up on the pasteboard.

00:26:41.630 --> 00:26:45.930
It turns out that that is really
handy so we've added that as well.

00:26:45.930 --> 00:26:52.560
In order to support the iPad's larger screen, we have
introduced some new ways of doing modal presentation

00:26:52.560 --> 00:26:55.250
that don't take up the entire screen, right.

00:26:55.250 --> 00:27:00.920
So having a big modal sheet that slides up all
over everything turns out to be a little jarring.

00:27:00.920 --> 00:27:06.900
So NS-- UI-- NS, boy, you can take the
guy out of foundation but you can't...

00:27:06.900 --> 00:27:12.150
UIModalPresentationCurrentContext says, when
you present this view controller modally,

00:27:12.150 --> 00:27:16.030
these are all things that you pass to present modal.

00:27:16.030 --> 00:27:21.700
When you present this view controller
modally, do it in the same context.

00:27:21.700 --> 00:27:24.700
So if it is a full screen presentation,
make it a full screen presentation.

00:27:24.700 --> 00:27:27.780
If it is in a popover, keep it in the popover, alright.

00:27:27.780 --> 00:27:32.440
If it is part of a form sheet, keep it as a form sheet.

00:27:32.440 --> 00:27:37.100
The page sheet and form sheet variants are what
we're using in a couple of different applications.

00:27:37.100 --> 00:27:39.570
This is what a page sheet looks like, right.

00:27:39.570 --> 00:27:45.630
The page sheet controller is the width of the
screen when it is in portrait orientation.

00:27:45.630 --> 00:27:47.250
It is not quite full screen.

00:27:47.250 --> 00:27:53.580
The edges get dimmed out and if there is a keyboard,
we'll just bring the keyboard up over the bottom of it

00:27:53.580 --> 00:27:57.490
and you'll be responsible for making
sure that the area is still visible.

00:27:57.490 --> 00:28:01.840
But if you are to tap Send here, the
top would go-- it would go off the top.

00:28:01.840 --> 00:28:04.690
If you were to tap Cancel, it would go off the bottom.

00:28:04.690 --> 00:28:09.130
But page sheets are basically a way to be able
to put a large modal item up on the screen

00:28:09.130 --> 00:28:12.600
without taking up the entire screen width.

00:28:12.600 --> 00:28:17.380
A form sheet is something much smaller and it is
designed for things that you're going to fill in.

00:28:17.380 --> 00:28:23.720
It is basically acquiring some small amount of information
but it's not worth, again, eating the whole screen over.

00:28:23.720 --> 00:28:30.300
And we slide these up when you call present modal
and this is actually the form sheet that we're using

00:28:30.300 --> 00:28:33.150
in the app store when you configure your account.

00:28:33.150 --> 00:28:37.100
I did scroll my account details off the top, sorry.

00:28:38.440 --> 00:28:40.630
Foundation has actually been a little bit busy.

00:28:40.630 --> 00:28:43.220
They have added regular expressions in OS 3.2.

00:28:43.220 --> 00:28:48.510
And the regular expression searching for
Foundation is pretty straightforward.

00:28:48.510 --> 00:28:53.500
There is a new StringCompareOption,
NSRegularExpressionSearch and you will pass this

00:28:53.500 --> 00:28:59.660
to the rangeOfString APIs and where you would have
passed a literal string for a range of string there,

00:28:59.660 --> 00:29:02.560
instead you can pass an ICU compatible regular expression.

00:29:02.560 --> 00:29:07.600
And that will return the range
that matched in that string, right.

00:29:07.600 --> 00:29:14.320
And if we peek ahead just a little bit to
iPhone OS 4, they've actually gone ahead

00:29:14.320 --> 00:29:17.790
and put in a full NSRegularExpression subclass.

00:29:17.790 --> 00:29:20.190
So you can create regular expressions.

00:29:20.190 --> 00:29:22.690
When you create it, it is compiled at that time.

00:29:22.690 --> 00:29:25.460
You can reuse that regular expression multiple times.

00:29:25.460 --> 00:29:27.900
So you'll create a regular expression with pattern options.

00:29:27.900 --> 00:29:36.060
The options include thing like case insensitive comparison
and going the full text and, you know, being greedy match.

00:29:36.060 --> 00:29:39.120
How greedy you want the match to
be and the error just gets returned

00:29:39.120 --> 00:29:42.900
if you gave us a pattern instead of
options that do not make any sense.

00:29:42.900 --> 00:29:47.420
And you can enumerate the matches and the
matches get enumerated by using something

00:29:47.420 --> 00:29:50.830
like enumerateMatchesInString, options, range, usingBlock.

00:29:50.830 --> 00:29:58.940
You will get repeated invocations of the block you gave us
with NSTextCheckingResults that represent what got matched.

00:29:58.940 --> 00:30:08.050
So the advanced text handling talk for iPhone OS
is in Nob Hill on Tuesday, later today at 4:30.

00:30:08.050 --> 00:30:14.860
If you are doing any kind of text processing, there are
a lot of great features that are now on iPhone OS 4,

00:30:14.860 --> 00:30:17.720
iOS 4 that you will be able to take advantage of.

00:30:17.720 --> 00:30:19.060
So they are talking about this.

00:30:19.060 --> 00:30:20.150
They are talking about Cortex.

00:30:20.150 --> 00:30:21.830
They are talking about data detection.

00:30:21.830 --> 00:30:26.740
It's all kinds of things that you should
go see if you are doing text on the phone.

00:30:26.740 --> 00:30:31.580
So, alright, let us talk about iOS 4.

00:30:31.580 --> 00:30:39.940
Multitasking is of course one of the
big features of iOS 4 and basically,

00:30:39.940 --> 00:30:43.650
there are three classes of multitasking applications.

00:30:43.650 --> 00:30:45.020
There are audio applications.

00:30:45.020 --> 00:30:51.150
So you saw Steve demoing an audio application that kept
playing in the background yesterday as he was browsing mail

00:30:51.150 --> 00:30:53.790
and looking at his threaded messages
and everything like that.

00:30:53.790 --> 00:30:55.490
There are location applications.

00:30:55.490 --> 00:31:00.680
If you are a background location application,
you have registered with Core Location

00:31:00.680 --> 00:31:03.990
to receive notifications about what we're calling geofences.

00:31:03.990 --> 00:31:11.260
Basically, you can set up boundaries using
coordinates and the user will be told as they move in

00:31:11.260 --> 00:31:16.490
and out of those areas, you know, you'll get a local
notification that says, "Hey something happened."

00:31:16.490 --> 00:31:20.380
So you'll be able to set up location
applications for the background

00:31:20.380 --> 00:31:24.380
and Voice over IP applications, VoIP applications.

00:31:24.380 --> 00:31:29.830
You opt in to these by doing, using the
UIBackgroundModes key in your info.plist.

00:31:29.830 --> 00:31:32.960
And that winds up being an NS-- an array of strings.

00:31:32.960 --> 00:31:34.220
Those are the strings.

00:31:34.220 --> 00:31:38.010
You can actually find them in the documentation as well.

00:31:38.010 --> 00:31:42.110
Actually, I think the string should all be lower case, so.

00:31:42.110 --> 00:31:46.000
The multitasking application lifecycle
is a little different, right.

00:31:46.000 --> 00:31:49.040
So remember what happened prior to iOS 4.

00:31:49.040 --> 00:31:51.350
You launched your app or the user would launch your app.

00:31:51.350 --> 00:31:52.840
They have used it for a while.

00:31:52.840 --> 00:31:54.520
They'd hit the Home button.

00:31:54.520 --> 00:31:56.360
You get told, hey you're going away.

00:31:56.360 --> 00:32:00.380
You got a few seconds to write some stuff out
so that you can pick up where you left off

00:32:00.380 --> 00:32:04.400
and then we pretty much kill your app, yeah.

00:32:04.400 --> 00:32:09.660
And then when you come back up, you've got a--
you got a sort of unfreeze, dry all that state.

00:32:09.660 --> 00:32:12.790
The application lifecycle changes under multitasking.

00:32:12.790 --> 00:32:14.970
You will basically go through three states.

00:32:14.970 --> 00:32:19.230
You will go through an active state, an
inactive state and a background state.

00:32:19.230 --> 00:32:23.700
So when you launch you will get your usual
application didFinishLaunchingWithOptions

00:32:23.700 --> 00:32:26.720
and then you will get an applicationDidbecomeactive message.

00:32:26.720 --> 00:32:31.010
These are messages that are sent
to your app delegate, right.

00:32:31.010 --> 00:32:37.070
Then when you're going to background, you're going to
go through the inactive state into the background state.

00:32:37.070 --> 00:32:38.600
So application will resign active.

00:32:38.600 --> 00:32:42.950
You've probably seen this message before
occasionally and in certain circumstances.

00:32:42.950 --> 00:32:44.920
And then applicationDidEnterBackground.

00:32:44.920 --> 00:32:49.500
So this is where we tell you actually
you went into a background state.

00:32:49.500 --> 00:32:52.110
Some other application is in front of the user right now.

00:32:52.110 --> 00:32:53.730
You are no longer there.

00:32:53.730 --> 00:33:00.320
We do a bunch of things behind the scenes in order to do
things like reduce drawing load so if you actually try

00:33:00.320 --> 00:33:02.860
to draw, those drawing methods go nowhere.

00:33:02.860 --> 00:33:08.720
We take care of a bunch of things in the background to
try and minimize battery life while you're back there.

00:33:08.720 --> 00:33:13.290
And if you spend long enough on the
background you don't get a whole lot of time.

00:33:13.290 --> 00:33:14.140
It is the same kind of thing.

00:33:14.140 --> 00:33:20.660
You get a certain amount of time to do some cleanup
work and then we will go ahead and suspend your task.

00:33:20.660 --> 00:33:21.790
We're not going to kill you outright.

00:33:21.790 --> 00:33:24.730
We'll just suspend you for a bit.

00:33:24.730 --> 00:33:29.860
So that when you come back you will
be basically right where you left off.

00:33:29.860 --> 00:33:34.650
You, however, may get killed while you are suspended.

00:33:34.650 --> 00:33:39.860
Because as the user uses the device maybe they do not
come back to your app for a while and we need the memory

00:33:39.860 --> 00:33:44.290
for something else and since you
don't have a 60-gig hard drive hooked

00:33:44.290 --> 00:33:48.680
up to swap to, we're just going to kill an application.

00:33:48.680 --> 00:33:53.020
So we'll find an app that hasn't
been used in a while, we'll kill it.

00:33:53.020 --> 00:33:58.090
That's why you can use, oh, and when
you come back to the foreground,

00:33:58.090 --> 00:34:02.300
you will get applicationWillEnterForeground,
DidBecomeActive.

00:34:02.300 --> 00:34:04.970
You can use this other API.

00:34:04.970 --> 00:34:08.910
beginBackgroundTaskWithExpirationHandler, endBackgroundTask.

00:34:08.910 --> 00:34:14.340
And this is your opportunity to tell us that when you are
going to go in the background you need a little more time.

00:34:14.340 --> 00:34:16.670
I'm almost done, I haven't written out everything.

00:34:16.670 --> 00:34:19.450
I haven't sent my goodbye packets to my remote server.

00:34:19.450 --> 00:34:22.220
I haven't finished downloading this file, right.

00:34:22.220 --> 00:34:26.720
So what you'll do is you'll bracket
that work between these two calls:

00:34:26.720 --> 00:34:30.650
beginBackgroundTaskWithExpirationHandler endBackgroundTask.

00:34:30.650 --> 00:34:37.790
The expiration handler is a block that we copy
and if you're really just taking too long, right.

00:34:37.790 --> 00:34:39.390
We're not going to give you all the time in the world here.

00:34:39.390 --> 00:34:41.190
We do actually need the task to suspend you.

00:34:41.190 --> 00:34:44.750
We will fire that handler, right.

00:34:44.750 --> 00:34:51.160
So if you are downloading a file and you get three
quarters away through and you run out of time,

00:34:51.160 --> 00:34:53.160
there is an expiration limit on these things.

00:34:53.160 --> 00:34:54.180
We will fire that handler.

00:34:54.180 --> 00:35:00.590
That is your opportunity to say, I pick up this
download at 82 percent or wherever you've left off or,

00:35:00.590 --> 00:35:01.930
you know, whatever else you need to write out.

00:35:01.930 --> 00:35:05.660
That is your opportunity to do it, so.

00:35:05.660 --> 00:35:10.650
As part of multitasking, you'll also be able to
send-- to register to send local notifications.

00:35:10.650 --> 00:35:17.060
So what you'll do is before you get suspended you can
say, create one of these UILocalNotification classes.

00:35:17.060 --> 00:35:19.770
They are just model, they are basically model objects.

00:35:19.770 --> 00:35:21.330
They have got a fire date.

00:35:21.330 --> 00:35:22.490
They have repeat intervals.

00:35:22.490 --> 00:35:25.000
You can change the icon of your application.

00:35:25.000 --> 00:35:27.000
There are all kinds of things you can do with this.

00:35:27.000 --> 00:35:30.050
It is in the UILocalNotification.h header.

00:35:30.050 --> 00:35:34.130
And this is very similar to the push notifications.

00:35:34.130 --> 00:35:37.990
Except, instead of push notifications
coming from some remote server some place,

00:35:37.990 --> 00:35:41.980
these come from your application
or on behalf of your application.

00:35:41.980 --> 00:35:46.150
User will get a little dialog and they can
choose to launch your app at that point or not.

00:35:46.150 --> 00:35:54.010
There is a lot to do with multitasking so if you really
want to be an incredible multitasking application,

00:35:54.010 --> 00:35:59.230
you're going want to go to the Adopting
Multitasking on iPhone OS talks, Parts 1 and 2.

00:35:59.230 --> 00:36:01.930
One just before lunch in the Presidio.

00:36:01.930 --> 00:36:04.370
It is not as convenient as the gesture recognizers talk.

00:36:04.370 --> 00:36:07.660
You'll actually have to get up and
go some place else to get part 2.

00:36:07.660 --> 00:36:13.130
But part 2 is in the Mission Tuesday
at 3:15, so later today.

00:36:13.130 --> 00:36:17.190
If you're going to be doing multitasking, if you are
going to be taking advantage of background audio playing,

00:36:17.190 --> 00:36:21.570
if you are going to be doing location
work, please go see these talks.

00:36:21.570 --> 00:36:26.710
They'll talk about everything you'll need to do
in order to be a good multitasking application.

00:36:26.710 --> 00:36:31.260
And finally, let's talk about high
resolution for iPhone OS 4.

00:36:31.260 --> 00:36:33.410
I've stood up here.

00:36:33.410 --> 00:36:35.560
I have said things like this before.

00:36:35.560 --> 00:36:40.810
One point no longer equals 1 pixel.

00:36:40.810 --> 00:36:49.810
So on the iPhone 3GS your screen is 320 x 480 pixels.

00:36:49.810 --> 00:37:01.510
On the iPhone 4 your screen is 640 x 960 pixels which if
you are keeping track, I think they said that was 326 DPI.

00:37:01.510 --> 00:37:06.860
The Apple LaserWriter that shipped with
the original Apple Macintosh was 300 DPI.

00:37:06.860 --> 00:37:10.110
So you now have better than camera
ready output in your pocket.

00:37:10.110 --> 00:37:16.240
It is amazing it fits in there
with the rest of the internet, so.

00:37:16.240 --> 00:37:17.300
[ Laughter ]

00:37:17.300 --> 00:37:19.600
The catch here is this.

00:37:19.600 --> 00:37:22.480
UIKit thinks in points.

00:37:22.480 --> 00:37:25.970
It is actually not a catch, it is a big bonus for you guys.

00:37:25.970 --> 00:37:29.100
They are the same size and points.

00:37:29.100 --> 00:37:36.280
So an iPhone 3GS 320 x 480 points,
an iPhone 4 320 x 480 points.

00:37:36.280 --> 00:37:42.410
All of your layout is the same because
toolbars are 44 points tall, right.

00:37:42.410 --> 00:37:46.870
All the buttons are the same number
of points in both situations, right.

00:37:46.870 --> 00:37:51.310
So we had this idea of scale that
we introduced in order to help out.

00:37:51.310 --> 00:37:59.130
So UIScreen, UIImage, all of these things for the sizes,
balance, things like that, those are all in points.

00:37:59.130 --> 00:38:05.810
It means that your layout code runs
on the iPhone 4 the same way, right.

00:38:05.810 --> 00:38:13.930
And you heard Steve talk about how for applications that are
not native iOS 4 apps we go ahead and render all the text

00:38:13.930 --> 00:38:16.580
at full resolution so it looks really crisp.

00:38:16.580 --> 00:38:19.530
It's actually really impressive.

00:38:19.530 --> 00:38:27.510
On UIScreen scale is a float, a float, and
this is going to be 2.0 on an iPhone 4.

00:38:27.510 --> 00:38:32.220
It will be 1.0 on iPhone 3GS's.

00:38:32.220 --> 00:38:34.310
The scale for UIImage is always non-zero.

00:38:34.310 --> 00:38:37.080
You will be able to find out what
scale the image is drawing at.

00:38:37.080 --> 00:38:41.140
You will be able to set the scale for your own images.

00:38:41.140 --> 00:38:48.610
You should never really hard code things like
640 x 480 or 320 x 480, any of those numbers.

00:38:48.610 --> 00:38:54.450
If you are not actually asking for the size, asking
for the scale and basing your computations on that,

00:38:54.450 --> 00:39:02.420
if you're hard wiring things that gets you into some trouble
because if you think that the screen is always 320 x 480 or,

00:39:02.420 --> 00:39:08.500
you know, 1024 x 768 for the iPads, things like that,
you can actually paint yourself into a bit of a corner.

00:39:08.500 --> 00:39:13.960
We're giving a talk called Future Proofing Your Application
which is going to talk about ways that you can sort

00:39:13.960 --> 00:39:17.260
of code defensibly to make sure that
a lot of these things do not happen.

00:39:17.260 --> 00:39:21.000
You know, if you are going to ask for an image
size, find out its actual size, that kind of thing.

00:39:21.000 --> 00:39:26.910
That is in Pacific Heights Tuesday at 2,
I am sorry, Thursday at 2, Thursday at 2.

00:39:26.910 --> 00:39:34.710
And that will be a really good talk to go to in order
to think ahead to, you know, programming for the pad,

00:39:34.710 --> 00:39:39.540
the phone, all the different variants of
the phone that we are currently shipping.

00:39:39.540 --> 00:39:44.030
Images turn out to be a little interesting
here and this has to do with resources

00:39:44.030 --> 00:39:46.850
and the resources that you put in your applications.

00:39:46.850 --> 00:39:50.650
So if I take, say, some text and I just blow it up.

00:39:50.650 --> 00:39:52.930
This is just a PNG file that I have.

00:39:52.930 --> 00:39:56.260
I may just have decided that I need to use a
font that isn't available or something like that.

00:39:56.260 --> 00:39:57.780
So I'm going to use a picture to do it.

00:39:57.780 --> 00:40:01.520
If I just blow that up, this may be a little
hard to see here, but it's kind of blurry.

00:40:01.520 --> 00:40:04.040
It's not really as crisp as it could be.

00:40:04.040 --> 00:40:13.360
We do this on the iPhone 4 because the iPhone 4's
resolution is twice in each dimension that of the 3GS.

00:40:13.360 --> 00:40:18.700
It looks no worse than it does on the 3GS but it
doesn't look as good as it could either, right.

00:40:18.700 --> 00:40:21.510
And we really want your applications to look great.

00:40:21.510 --> 00:40:31.910
So, this is a full, the guy over here is a full resolution
version of that text and oh, you'll figure it out.

00:40:31.910 --> 00:40:35.930
What you can do is name your resources appropriately.

00:40:35.930 --> 00:40:45.050
So, if you have a picture called SplashText.png you can have
another version of that image that says Splash Text@2x.png.

00:40:45.050 --> 00:40:51.670
And all of our APIs that go through and do resource
searching know about this naming convention.

00:40:51.670 --> 00:40:55.620
So on the appropriate device, we'll
go ahead and load the right resource.

00:40:55.620 --> 00:41:00.270
So, yes you'll have to go back to your designers and
you'll say please, I know you just did this for me,

00:41:00.270 --> 00:41:03.790
but I need 2x versions of everything, right.

00:41:03.790 --> 00:41:06.580
But if you name them properly you
shouldn't have to do a whole lot of work

00:41:06.580 --> 00:41:09.410
in getting them incorporated in to your code.

00:41:09.410 --> 00:41:20.120
And in order to support drawing in the graphics context, we
have to add some information to UIGraphicsBeginImageContext.

00:41:20.120 --> 00:41:25.520
So we've got UIGraphicsBeginImageContextWithOptions
and this takes into account a couple of things,

00:41:25.520 --> 00:41:28.130
scale and whether or not the drawing is opaque.

00:41:28.130 --> 00:41:31.340
So, the size you'll give us is in points, right?

00:41:31.340 --> 00:41:33.200
Excellent.

00:41:33.200 --> 00:41:36.770
You can tell us whether or not what you're
drawing is going to be opaque, alright.

00:41:36.770 --> 00:41:42.640
We have 4 times as many pixels to push on the
iPhone 4 so this is your opportunity to say well,

00:41:42.640 --> 00:41:45.860
I'm drawing as opaque so you don't
have to worry about compositing.

00:41:45.860 --> 00:41:48.810
This is an opportunity to tell
us something about your drawing

00:41:48.810 --> 00:41:52.370
and you'll tell us what the scale
is of what you're drawing, right.

00:41:52.370 --> 00:41:55.230
So, you'll be able to do scale sensitive drawing here.

00:41:55.230 --> 00:42:02.180
One important thing is if you're doing work with
both UIKit and Core Graphics, right, the CG calls.

00:42:02.180 --> 00:42:04.780
UIKit thinks in terms of points.

00:42:04.780 --> 00:42:07.460
CG is really a bitmap-oriented framework.

00:42:07.460 --> 00:42:08.860
It thinks in terms of pixels.

00:42:08.860 --> 00:42:13.100
So, if you're going to be doing things across the
two frameworks you'll have to keep the scale in mind

00:42:13.100 --> 00:42:16.730
as you do specific things with Core Graphics, okay.

00:42:16.730 --> 00:42:20.580
And this is thread-safe in iOS 4.

00:42:20.580 --> 00:42:24.310
[ Applause ]

00:42:24.310 --> 00:42:28.450
So, we'll be able to do context
drawing back on a background thread.

00:42:28.450 --> 00:42:35.590
I recall my office mate working on this and just running
a multithreaded thing with a bunch of views in it

00:42:35.590 --> 00:42:39.240
and he left it running overnight
and overnight and overnight.

00:42:39.240 --> 00:42:40.730
It was really impressive.

00:42:40.730 --> 00:42:42.350
So, you'll be able to draw back on threads.

00:42:42.350 --> 00:42:45.500
This doesn't mean that the rest
of UIKit is thread-safe, right.

00:42:45.500 --> 00:42:48.740
You can't call back into UIButton on a
background thread or anything like that but you'll

00:42:48.740 --> 00:42:50.910
at least be able to do your background drawing there.

00:42:50.910 --> 00:42:56.660
We have a high resolution talk, Optimize
Your iPhone App for the Retina Display.

00:42:56.660 --> 00:43:02.090
It's in the Presidio, on a really
big screen, Thursday at 3:15.

00:43:02.090 --> 00:43:06.040
HiDPI is a huge part of a great iPhone OS--

00:43:06.040 --> 00:43:12.150
iPhone 4 experience and if you're going to be doing
anything that's going to involve drawing or making sure

00:43:12.150 --> 00:43:16.890
that your app is going to look great on
that display, please go to this talk.

00:43:16.890 --> 00:43:21.370
So, but wait, there's more, a little more at least.

00:43:21.370 --> 00:43:25.630
We have some new ways to be able to do some UIEvents stuff.

00:43:25.630 --> 00:43:29.010
If you, you know, you heard Steve
talk about the controls that show

00:43:29.010 --> 00:43:33.750
up on the iPhone 4 or on the 3GS when you're running iOS 4.

00:43:33.750 --> 00:43:36.440
If you double tap the Home button and
you get that interface that comes up,

00:43:36.440 --> 00:43:39.420
you swipe left and you get the audio controls.

00:43:39.420 --> 00:43:44.200
These are wired to these UIEvents subtypes
and these are also how you can get events off

00:43:44.200 --> 00:43:47.020
of the remote that comes with the iPhone, right.

00:43:47.020 --> 00:43:53.030
So, when the user double clicks on the remote,
you'll get a play or a pause event, things like that.

00:43:53.030 --> 00:43:57.920
These go up the responder chain so you
can choose to respond to these depending

00:43:57.920 --> 00:44:01.570
on what view controller is being presented, alright.

00:44:01.570 --> 00:44:07.810
So, you'll be able to switch your view controllers
out and deal with remote events subtypes on your own.

00:44:09.210 --> 00:44:14.190
We've also added some new API to support
animations and using blocks in iOS 4.

00:44:14.190 --> 00:44:20.870
iOS 4 does include all the block stuff:
animateWithDuration, delay, options, animations, completion.

00:44:20.870 --> 00:44:23.830
So, we've got a-- you know, you can specify duration.

00:44:23.830 --> 00:44:25.810
How long you wanted to wait before it starts.

00:44:25.810 --> 00:44:32.510
Options specifies whether or not something that you do
here inherits from its containing animation context.

00:44:32.510 --> 00:44:40.060
The animations block is where you would have put something
between UIView beginAnimations and UIView endAnimations.

00:44:40.060 --> 00:44:42.600
Just put your animations in this block.

00:44:42.600 --> 00:44:44.230
We'll copy that block off the stack.

00:44:44.230 --> 00:44:47.180
When we're ready to execute it we'll
go ahead and just run through that.

00:44:47.180 --> 00:44:52.000
And then the completion handler takes
a Boolean when it gives invoked.

00:44:52.000 --> 00:44:58.440
You'll find out whether the animation is complete
or not and you can take action based on that.

00:44:58.440 --> 00:45:06.950
animateWithDuration, animations, completion, the short
version if you don't need delay or specific options.

00:45:06.950 --> 00:45:10.510
And again, an even shorter version,
animateWithDuration, animations.

00:45:10.510 --> 00:45:17.840
So, some really basic things to try and make the
animation API a little bit more convenient for you.

00:45:17.840 --> 00:45:23.970
UIView, view transitions, you know it's
very common to switch views in and out.

00:45:23.970 --> 00:45:26.960
These APIs are class method on UIView.

00:45:26.960 --> 00:45:34.560
transitionWithView, duration, options, animation, completion
so you can set up your transitions and transitionFromView,

00:45:34.560 --> 00:45:40.830
toView allows you to just switch a view in and out and this
takes care of doing things like removing the fromView

00:45:40.830 --> 00:45:46.800
from it's superview and putting the toView in
automatically, right, so the whole setting the alphas

00:45:46.800 --> 00:45:54.760
and pulling this stuff out afterwards is made a
lot easier with transitionFromView, toView, so.

00:45:54.760 --> 00:45:56.390
There are a lot of new APIs.

00:45:56.390 --> 00:46:03.140
I could spend a lot of time just going through and finding
all of the stuff that is tagged as new in iPhone OS 4.

00:46:03.140 --> 00:46:08.590
There are new things like in UIVideo in
the image capture controller that you can--

00:46:08.590 --> 00:46:11.510
on the iPhone 4 you'll be able
to switch between both cameras.

00:46:11.510 --> 00:46:16.030
You'll be able to grab video right off of
the video controller, things like that.

00:46:16.030 --> 00:46:21.910
Please go through the headers, they've been
annotated with the OS X availability macros

00:46:21.910 --> 00:46:23.630
that tell you when things were introduced.

00:46:23.630 --> 00:46:29.200
A good way to search through all that is just grab
through the stuff that says iPhone 4, alright.

00:46:29.200 --> 00:46:30.960
There are a number of new frameworks.

00:46:30.960 --> 00:46:34.540
We have a lot of talks that go
along with those new frameworks.

00:46:34.540 --> 00:46:37.910
UIAutomation, it's not really a framework,
it's actually an instruments plug-in.

00:46:37.910 --> 00:46:44.900
You are able to write JavaScript-based scripts
for your application to automate user testing.

00:46:44.900 --> 00:46:51.130
Things that the user would do by tapping along on buttons
and running through scenarios, you can run in Instruments.

00:46:51.130 --> 00:46:55.850
The great thing about this is because you can run
it in Instruments, you can run it alongside all

00:46:55.850 --> 00:46:58.810
of the other performance tracking systems.

00:46:58.810 --> 00:47:05.500
So, you can run through user scenario and check
for leaks and you can do that reproducibly, right.

00:47:05.500 --> 00:47:10.190
So, if somebody says hey, I've got this weird scenario
where you tap on this on 19 things and rather than having

00:47:10.190 --> 00:47:14.380
to do it yourself all the time you can write up a
script that does that and then run it against Shark.

00:47:14.380 --> 00:47:19.970
Run it against the MallocDebug instrument, run
it against all these others to check for leaks.

00:47:19.970 --> 00:47:22.240
So, you'll be able to do all of that.

00:47:22.240 --> 00:47:25.200
If you do a lot of this kind of testing,
Automating User Interface Testing

00:47:25.200 --> 00:47:27.440
with Instruments in the Marina, Wednesday at 2.

00:47:27.440 --> 00:47:33.800
That's going to be a great talk especially if you're
really into using Instruments, this is a big help.

00:47:33.800 --> 00:47:37.600
The AssetsLibrary framework, Incorporating
the Camera and Photo Library

00:47:37.600 --> 00:47:40.640
in Your Application in the Presidio, Thursday at 9.

00:47:40.640 --> 00:47:45.040
This is a way to be able to interact
with the user's content.

00:47:45.040 --> 00:47:49.490
AV Foundation, you know you saw the iMovie for iPhone demo.

00:47:49.490 --> 00:47:54.760
If you'd like to be able to do a number of those kinds of
things in your application this is the framework for you.

00:47:54.760 --> 00:48:01.030
So this is how you're going to be able to get full
control over video playback frame by frame notifications.

00:48:01.030 --> 00:48:05.730
Control over video recording, you have direct
access to the video cameras through AV Foundations

00:48:05.730 --> 00:48:08.530
so you'll be able to capture right off the camera.

00:48:08.530 --> 00:48:11.660
You can put your own layers over
the views that are drawing, right.

00:48:11.660 --> 00:48:16.270
So rather than putting up an MP media player
controller and trying to get stuff in front of that,

00:48:16.270 --> 00:48:21.450
this is the supported way to be able to do video
playback with your own drawing on top of it.

00:48:21.450 --> 00:48:26.030
Discovering AV Foundation in Presidio, Tuesday at 2.

00:48:26.030 --> 00:48:30.240
This will all be a great talk if you do a
lot of media handling in your frameworks.

00:48:30.240 --> 00:48:35.440
EventKit, you now have access to the calendars
that are available on the device, right.

00:48:35.440 --> 00:48:37.790
So you'll be able to search for
events in the user's calendars.

00:48:37.790 --> 00:48:41.750
You'll be able to get record change notifications
about the fact that the user changed something.

00:48:41.750 --> 00:48:43.530
You can edit and create events.

00:48:43.530 --> 00:48:50.400
You can set them up on the local calendars that are on the
device or you can edit things that are on the user's server.

00:48:50.400 --> 00:48:56.450
So, for instance, if you've got a CalDAV calendar
some place you'll be able to create CalDAV events.

00:48:56.450 --> 00:48:59.220
Calendar Integration with EventKit in the Mission.

00:48:59.220 --> 00:49:00.750
That's, I guess that's here.

00:49:00.750 --> 00:49:02.890
Thursday at 4:30.

00:49:02.890 --> 00:49:07.300
So, if you're doing anything that involves
the calendar, we have talks for that.

00:49:07.300 --> 00:49:11.390
iAds. Alright, you've heard Steve talk
about the iAd advertising framework.

00:49:11.390 --> 00:49:15.440
This takes care of everything about loading and
presenting the ads, responding to events inside the ads,

00:49:15.440 --> 00:49:19.690
the user interactions, what they've tapped
on, how to test them, things like that.

00:49:19.690 --> 00:49:23.050
Integrating Ads with iAds in the Presidio Wednesday at 9.

00:49:23.050 --> 00:49:28.550
This is a great opportunity for you to get some
fantastic advertising into your applications.

00:49:28.550 --> 00:49:37.100
Game Center, as a developer preview on iOS 4, there
is a social networking gaming system on your betas.

00:49:37.100 --> 00:49:44.660
It does things like achievements, tracking games
over the network, finding who else to play with.

00:49:44.660 --> 00:49:49.640
There's an Introduction to Game Center
talk in Pacific Heights, Tuesday at 2.

00:49:49.640 --> 00:49:51.830
So, if you're going to be working on
a game that's going to involve some

00:49:51.830 --> 00:49:55.780
of these social gaming aspects, you
probably want to go to that talk.

00:49:55.780 --> 00:49:57.830
CoreMotions, sensors on the device.

00:49:57.830 --> 00:50:03.650
You heard Steve show you the gyroscope so, you know, if you
wanted to come up with an application that's only visible

00:50:03.650 --> 00:50:08.960
from the southwest or something like
that you can do that with the gyroscope.

00:50:08.960 --> 00:50:10.200
There is a talk about this.

00:50:10.200 --> 00:50:13.640
I think it's called Sensing Motion-- Sensing Device Motion.

00:50:13.640 --> 00:50:14.760
Please look it up in your schedules.

00:50:14.760 --> 00:50:17.420
It wasn't available to me when
we put the slides together, so.

00:50:17.420 --> 00:50:21.890
But if you are going to be taking advantage of the gyroscope
or the accelerometer, you know the high level events

00:50:21.890 --> 00:50:25.480
that are in UIKit are pretty good
for sort of general applications.

00:50:25.480 --> 00:50:31.710
This is what you'll go to if you want really fine grain
control over the data coming off of all of those sensors.

00:50:31.710 --> 00:50:38.330
It's a great way to introduce new ways of interacting
with your data so please take advantage of that.

00:50:38.330 --> 00:50:44.690
CF and Foundation have actually been brought
up to basically Snow Leopard levels in iOS 4.

00:50:44.690 --> 00:50:47.760
So that includes blocks, it includes
the regular expression stuff.

00:50:47.760 --> 00:50:52.570
All of those API's that were introduced in
Snow Leopard are now available on iOS 4.

00:50:52.570 --> 00:50:55.290
The Foundation team will be giving
the What's New in Foundation

00:50:55.290 --> 00:50:59.410
for iOS 4 talk in Pacific Heights on Tuesday at 10:15.

00:50:59.410 --> 00:51:04.260
They're also giving a couple of other talks
for tips and tricks and things like that.

00:51:04.260 --> 00:51:05.140
Go see those.

00:51:05.140 --> 00:51:10.610
Foundation is a tremendously powerful framework that
can save a lot of time and there are some really,

00:51:10.610 --> 00:51:15.880
really great things that are now available to
you on the phone that were not available before.

00:51:15.880 --> 00:51:18.170
We have labs.

00:51:18.170 --> 00:51:19.440
Oh boy, do we have labs.

00:51:19.440 --> 00:51:22.900
We have four Cocoa Touch Labs.

00:51:22.900 --> 00:51:25.320
We almost made it all the way around the alphabet soup here.

00:51:25.320 --> 00:51:33.830
In Application Frameworks Lab D, we've got Labs Tuesday
at 2, Wednesday at 11:30, Thursday at 9:00, Friday at 9:00

00:51:33.830 --> 00:51:38.710
and Wednesday at 9 we're doing a getting
started with iPad development lab.

00:51:38.710 --> 00:51:42.660
We're here, you heard Steve say there
a thousand Apple Engineers here.

00:51:42.660 --> 00:51:44.590
We can probably answer your questions.

00:51:44.590 --> 00:51:46.460
Please come to the labs.

00:51:46.460 --> 00:51:49.860
Please bring code with you so that we can take a look at it.

00:51:49.860 --> 00:51:52.620
We're really excited to be able to help you
guys out with everything that's happening--

