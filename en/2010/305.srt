1
00:00:06,410 --> 00:00:08,380
>> Rob Marini: Good Afternoon.

2
00:00:08,380 --> 00:00:13,140
Welcome to Session #305, Designing
Apps with Interface Builder.

3
00:00:13,140 --> 00:00:14,240
My name is Rob Marini.

4
00:00:14,240 --> 00:00:18,210
I'm an engineer on the Interface Builder team
and I will be joined on stage later today

5
00:00:18,210 --> 00:00:23,150
with Barry Langdon-Lassagne, one of my colleagues.

6
00:00:23,150 --> 00:00:28,720
It's been twelve months since the last time we all got
together and talked about Interface Builder and what it was

7
00:00:28,720 --> 00:00:32,380
and how to use it and what a year it's been.

8
00:00:32,380 --> 00:00:40,870
First, our platform expanded with the release of the iPad
and then matured to unprecedented levels with the release

9
00:00:40,870 --> 00:00:49,760
of iPhone 4 and iOS 4 and today we're going to talk
about how to take advantage of those two products.

10
00:00:49,760 --> 00:00:56,920
So, one way you can do that is by using
something that we refer to as a universal app.

11
00:00:56,920 --> 00:01:05,240
It's one binary that can be run on any device
that runs the iOS and if you have an iPhone app

12
00:01:05,240 --> 00:01:10,140
and you're considering writing an iPad app, this lets
you take advantage of your existing customer base.

13
00:01:10,140 --> 00:01:16,810
All of your iPhone customers who purchase an iPad
can just use your iPad app and just that easy.

14
00:01:16,810 --> 00:01:24,420
They plug into iTunes, it syncs over, it's great and
if you're writing an iPad app, by making it universal

15
00:01:24,420 --> 00:01:28,370
and having an iPhone version you're
exposing yourself to a larger audience.

16
00:01:28,370 --> 00:01:31,690
Anyone with an iPhone can also purchase your app.

17
00:01:31,690 --> 00:01:36,810
As an added perk since it's a single
application, it's a single apps to review.

18
00:01:36,810 --> 00:01:44,000
You're one review away from all of your customers on all of
our devices having the latest and greatest of your product.

19
00:01:44,000 --> 00:01:51,070
The other road you can take is to create two separate
apps from the same source base and this is useful

20
00:01:51,070 --> 00:01:54,020
if the two applications are very platform specific.

21
00:01:54,020 --> 00:02:00,340
Maybe you have some sort of content creation app
on the iPad and a reader of some sort on the phone.

22
00:02:00,340 --> 00:02:04,490
This is you know the really type
of thing that this is great for.

23
00:02:04,490 --> 00:02:08,080
Or maybe you want to take advantage of per-device pricing.

24
00:02:08,080 --> 00:02:12,860
Maybe your iPhone app has less functionality than your
iPad app and you'd like to offer it to those customers

25
00:02:12,860 --> 00:02:19,670
at a lower price and maybe you have a game and it
has lots of high-resolution images and you want

26
00:02:19,670 --> 00:02:26,130
to make sure your iPhone customers are only getting
the content that they need for their game to run.

27
00:02:26,130 --> 00:02:32,360
So this is a quote I came across in a blog a few
days ago, Universal Apps are far more appealing

28
00:02:32,360 --> 00:02:35,690
to users than apps that target just one platform.

29
00:02:35,690 --> 00:02:37,940
This is from the developers of iTeleport.

30
00:02:37,940 --> 00:02:41,450
It's a screen-sharing app for the iPhone and
the iPad, and they actually went the route

31
00:02:41,450 --> 00:02:47,010
of having two separate applications and then later created
a Universal App and you know they have some numbers

32
00:02:47,010 --> 00:02:50,800
and all kinds of quotes and stuff on their blog.

33
00:02:50,800 --> 00:02:54,780
I'd encourage you to read it and you know
if you're thinking about going to the route

34
00:02:54,780 --> 00:02:58,010
of two separate applications this might change your mind.

35
00:02:58,010 --> 00:03:04,250
So now that we decided that we're going to
create a Universal App what does one look like?

36
00:03:04,250 --> 00:03:07,930
Well, this is what an iPhone app usually looks like.

37
00:03:07,930 --> 00:03:10,840
You have the core functionality
of your app in the infrastructure.

38
00:03:10,840 --> 00:03:16,960
You probably have some resources and you have your
user interface, the things that the user touches,

39
00:03:16,960 --> 00:03:21,230
gets to interact with and really comes to care about.

40
00:03:21,230 --> 00:03:23,870
Well, what do two separate apps look like?

41
00:03:23,870 --> 00:03:25,460
They look something like this.

42
00:03:25,460 --> 00:03:32,480
Same infrastructure and resources and two separate
user interfaces packaged as two separate applications.

43
00:03:32,480 --> 00:03:34,800
Let's make it universal.

44
00:03:34,800 --> 00:03:40,260
Well, we had to take advantage of the fact that it's
a single app so we're sharing the infrastructure.

45
00:03:40,260 --> 00:03:48,090
We're sharing the resources and just the things
that need to be platform specific are the UI.

46
00:03:48,090 --> 00:03:51,790
Let's peek into each of these for a bit.

47
00:03:51,790 --> 00:03:54,420
So first the infrastructure.

48
00:03:54,420 --> 00:03:56,910
This is what allows your app to function.

49
00:03:56,910 --> 00:04:03,020
It's the core, the heart and it's the thing that's going
to be the same no matter where your application is running.

50
00:04:03,020 --> 00:04:08,360
You probably also have a lot of resources that
you can share between the iPhone and the iPad.

51
00:04:08,360 --> 00:04:11,710
Maybe you have some TableView Cells that
you've designed in Interface Builder.

52
00:04:11,710 --> 00:04:14,330
You can easily load those on both platforms.

53
00:04:14,330 --> 00:04:17,020
Maybe you have some images and some data that you used

54
00:04:17,020 --> 00:04:20,480
to start your application up, some
simple views in view controllers.

55
00:04:20,480 --> 00:04:27,820
All of these things can be shared and
then of course the core through UI.

56
00:04:27,820 --> 00:04:33,230
These are the things that really need to be targeted
for the platform they're being displayed on.

57
00:04:33,230 --> 00:04:42,170
You have to give your user the best possible experience
when they're running your app and this is how you do it.

58
00:04:42,170 --> 00:04:46,230
So when you're going through the
process of creating a Universal App,

59
00:04:46,230 --> 00:04:53,440
you might wonder well should I share this class between
all my platforms or should I create two separate ones,

60
00:04:53,440 --> 00:04:57,570
one for the iPad and one for the
iPhone and so when you're thinking

61
00:04:57,570 --> 00:05:02,710
about creating a per-platform class the
reasons you should do it are you know.

62
00:05:02,710 --> 00:05:05,110
It serves a specific purpose on a platform.

63
00:05:05,110 --> 00:05:11,540
Maybe it's a view controller that manages a view, the
design is very different between the iPhone and the iPad,

64
00:05:11,540 --> 00:05:18,670
and maybe you have a class that's customized and tailored
for the specific capabilities of a particular device.

65
00:05:18,670 --> 00:05:22,740
You only really want it to run in that device
and maybe you have some code that you want

66
00:05:22,740 --> 00:05:26,510
to make sure will only ever execute on a particular device.

67
00:05:26,510 --> 00:05:29,080
This is one way to do that.

68
00:05:29,080 --> 00:05:31,190
When do you share your classes?

69
00:05:31,190 --> 00:05:39,040
Well, a lot of our code has very little to do with
the platform and when it does we probably just want

70
00:05:39,040 --> 00:05:44,040
to change the behavior of something a little bit and so
you can use some runtime checks to change that behavior.

71
00:05:44,040 --> 00:05:46,680
You know, you could say am I running an iPad?

72
00:05:46,680 --> 00:05:50,640
If I am, do this and we'll show an
example of this later in the Demo.

73
00:05:50,640 --> 00:05:56,140
So how do we adopt the features of the iPad?

74
00:05:56,140 --> 00:05:59,180
How do we go about creating a Universal App?

75
00:05:59,180 --> 00:06:02,940
Well today, this is the application we're going to use.

76
00:06:02,940 --> 00:06:07,600
It's a very simple recipe catalog
and behaves like most iPhone apps.

77
00:06:07,600 --> 00:06:10,590
You tap on a TableViewCell, a new view slides in.

78
00:06:10,590 --> 00:06:12,110
Really simple.

79
00:06:12,110 --> 00:06:14,300
Let's look at the structure of this.

80
00:06:14,300 --> 00:06:20,060
We have a navigation controller and that's managing
a stack of view controllers, pretty simple.

81
00:06:20,060 --> 00:06:22,970
We have a list of recipes and some details about them.

82
00:06:22,970 --> 00:06:25,100
Let's make a run at the iPad.

83
00:06:25,100 --> 00:06:27,400
Well it's probably going to look like this.

84
00:06:27,400 --> 00:06:30,400
We've decided we wanted to use a SplitView Controller.

85
00:06:30,400 --> 00:06:35,090
This is a class that's new for the iPad
and it is designed for the UI of the iPad.

86
00:06:35,090 --> 00:06:39,140
It presents two view controllers on
the screen and it is really fantastic.

87
00:06:39,140 --> 00:06:40,770
Lots of our apps use them.

88
00:06:40,770 --> 00:06:46,790
Lots of third-party apps use it and so on the
left side here you can see we've just taken part

89
00:06:46,790 --> 00:06:48,970
of our iPhone app and put it there.

90
00:06:48,970 --> 00:06:53,750
It's the same code, on the right we have the
information about the recipe, we've designed it

91
00:06:53,750 --> 00:06:59,900
and tailored it specifically for that platform,
and this is it running on the iPad Simulator.

92
00:06:59,900 --> 00:07:08,380
So when we look at our project we have to decide
what we want to share and what we want to separate.

93
00:07:08,380 --> 00:07:13,740
So things that we want to share our models
and TableViewCells, TableViewController.

94
00:07:13,740 --> 00:07:17,310
We have a Navigation Controller that's not
even a subclass of UI Navigation Controller.

95
00:07:17,310 --> 00:07:18,470
It just manages a stack.

96
00:07:18,470 --> 00:07:25,000
It's the same across platforms and the real
key to our UI is our, the detail of our recipe.

97
00:07:25,000 --> 00:07:30,590
The information about it so that we want to target for each
platform and we have our MainWindow and our AppDelegate

98
00:07:30,590 --> 00:07:35,570
which allow us to present that to the user so we're
separating that based on the platform that we're on.

99
00:07:35,570 --> 00:07:38,460
Then we also have a SplitView Controller which is iPad only.

100
00:07:38,460 --> 00:07:43,340
So how do we create a Universal
App now that we know that we do?

101
00:07:43,340 --> 00:07:48,870
Well, in Xcode you can go to your side of
your project and right-click on the target.

102
00:07:48,870 --> 00:07:53,500
It gives you an option to Upgrade your
Current Target for iPad and when you click

103
00:07:53,500 --> 00:07:56,850
that a sheet drops down and you have two options.

104
00:07:56,850 --> 00:07:59,090
These are the two things that we talked about earlier.

105
00:07:59,090 --> 00:08:03,570
You can upgrade your current target for iPad
or you can choose to create two separate apps.

106
00:08:03,570 --> 00:08:09,850
This is the point where you make that decision and today
we're going to create a Universal App so we'll pick that.

107
00:08:09,850 --> 00:08:12,450
Then you need to upgrade your user interface.

108
00:08:12,450 --> 00:08:16,350
So if you have some Interface Builder
documents you have two options.

109
00:08:16,350 --> 00:08:21,950
You can open them one by one in Interface Builder and under
the File Menus select Create iPad version and save them

110
00:08:21,950 --> 00:08:27,160
to disc or you can batch process all of your
Interface Builder documents on the command line

111
00:08:27,160 --> 00:08:30,580
and there's a tool that's documented in
the release notes that you can consult.

112
00:08:30,580 --> 00:08:34,110
We're not going to talk about it here.

113
00:08:34,110 --> 00:08:39,260
Now that you've done that it's time to think about
what your user interface is going to look like.

114
00:08:39,260 --> 00:08:41,230
You should probably adopt your UI paradigms.

115
00:08:41,230 --> 00:08:48,240
You don't want to give your iPad customer a giant iPhone
app on that device, probably want a SplitView Controller

116
00:08:48,240 --> 00:08:53,920
if you've been using a Navigation Controller and you
know you can consider at this point what you can share

117
00:08:53,920 --> 00:09:00,290
between the two platforms and we've decided we're going to
use a SplitView Controller and we have this TableViewCell

118
00:09:00,290 --> 00:09:04,040
that we use and we think we can share between the two.

119
00:09:04,040 --> 00:09:09,610
So now I'd like to show you taking our
existing iPhone app and bringing it to life

120
00:09:09,610 --> 00:09:13,280
on the iPad and here we have our application.

121
00:09:13,280 --> 00:09:17,130
Build and Run show you it works.

122
00:09:17,130 --> 00:09:19,150
Got some recipes here.

123
00:09:19,150 --> 00:09:20,370
Can select one.

124
00:09:20,370 --> 00:09:28,250
Great. Quit the simulator for now and I'm going to
Right-click on the target and select to Upgrade for iPad

125
00:09:28,250 --> 00:09:32,060
and as I've said I'll pick a Universal App.

126
00:09:32,060 --> 00:09:35,830
OK. This has gone ahead and created some files for us.

127
00:09:35,830 --> 00:09:38,940
We talked earlier about what files
we were going to keep shared

128
00:09:38,940 --> 00:09:42,370
and what we're going to split up across the platforms.

129
00:09:42,370 --> 00:09:45,170
So I've already done that.

130
00:09:45,170 --> 00:09:53,030
Going to go ahead and launch that project and what
I've done here is to take a RecipeDetailViewController,

131
00:09:53,030 --> 00:09:55,750
our AppDelegate and just copied them and rename them.

132
00:09:55,750 --> 00:09:58,070
I haven't actually touched any code.

133
00:09:58,070 --> 00:10:05,760
So the first thing we're going to do is
to Open our iPad version of our MainWindow

134
00:10:05,760 --> 00:10:08,790
and you can see this is the iPad version of a window.

135
00:10:08,790 --> 00:10:15,910
I mentioned we were going to take advantage of the
SplitView Controller so I'm going to drag one in.

136
00:10:15,910 --> 00:10:20,010
You can see it there and if you disclose the contents

137
00:10:20,010 --> 00:10:24,720
of the SplitView Controller you can see
it contains a navigation controller.

138
00:10:24,720 --> 00:10:28,820
Well we already created one for our
iPhone app so I'm just going to replace it

139
00:10:28,820 --> 00:10:33,720
by dragging it over and you can see there it is.

140
00:10:33,720 --> 00:10:36,290
So that's the left side of our SplitView Controller.

141
00:10:36,290 --> 00:10:37,910
Now we want to talk about the right.

142
00:10:37,910 --> 00:10:45,820
So I'm going to go back to Xcode and I
have an iPhone Interface Builder document

143
00:10:45,820 --> 00:10:47,670
which is our RecipeDetailViewController.

144
00:10:47,670 --> 00:10:53,620
I'm going to go ahead now and create
an iPad version of this.

145
00:10:53,620 --> 00:10:59,880
There we go and so we knew on our iPhone
application that we were running inside

146
00:10:59,880 --> 00:11:02,790
of the context of a navigation controller.

147
00:11:02,790 --> 00:11:04,300
That's not the case any more.

148
00:11:04,300 --> 00:11:11,110
So, I'm going to get rid of our simulated top bar and I'm
actually going to put a toolbar up there so I'll drag one

149
00:11:11,110 --> 00:11:15,650
out of the library, put it up here
and since the toolbar is on the top,

150
00:11:15,650 --> 00:11:20,120
I want to pin it there for when we
rotate and turn off any to the bottom.

151
00:11:20,120 --> 00:11:25,760
Going to move things around to make it look
a little better, get a bigger image of you.

152
00:11:25,760 --> 00:11:27,670
That's a little too big.

153
00:11:27,670 --> 00:11:30,510
Let me make it 300.

154
00:11:30,510 --> 00:11:39,950
Make this text view a little wider
and move this one down to the left.

155
00:11:39,950 --> 00:11:45,980
Now earlier we were running inside of a Navigation
Controller so we got to put our title in the NavBar.

156
00:11:45,980 --> 00:11:56,340
We don't have a NavBar any more so I'm going to drag in
a label and I'll put it just up here, make it pretty big,

157
00:11:56,340 --> 00:12:03,000
and Helvetica it's a great font but
it's not the most eye-catching font.

158
00:12:03,000 --> 00:12:06,240
I'm going to do something much more dramatic.

159
00:12:06,240 --> 00:12:14,570
I am going to pick Zepthino [assumed
spelling] and let's make it oh 52 high.

160
00:12:14,570 --> 00:12:19,340
We want our min size to be something
a little bit bigger, maybe 27.

161
00:12:19,340 --> 00:12:21,500
We want to center it.

162
00:12:21,500 --> 00:12:30,290
Let's give it a shadow, offset the shadow
by 1 and we'll make the text white.

163
00:12:30,290 --> 00:12:37,010
Great. When we rotate we want the label
to resize so we'll turn that on here.

164
00:12:37,010 --> 00:12:38,660
Excellent.

165
00:12:38,660 --> 00:12:41,720
So now we need to save this.

166
00:12:41,720 --> 00:12:50,010
So we're going to go to my desktop where I have
this project and select my prebaked converted one.

167
00:12:50,010 --> 00:12:54,340
Select Resources iPad and let's give it a name.

168
00:12:54,340 --> 00:13:01,080
Cool. Now Interface Builder hopefully notices that
there's an Xcode project in that file structure

169
00:13:01,080 --> 00:13:03,670
and asks if you want to add it to your target.

170
00:13:03,670 --> 00:13:06,620
As a matter of fact I do so I'm going to say Yes.

171
00:13:06,620 --> 00:13:12,570
Add it. So now when we go back to
Xcode you can see it appears here.

172
00:13:12,570 --> 00:13:20,770
I'm going to drag it up just to keep things organized and
previously I had duplicated the file for the view controller

173
00:13:20,770 --> 00:13:25,740
that managed this view and since I've added new
things in my UI I want to create Outlets to them.

174
00:13:25,740 --> 00:13:26,430
I'll do that now.

175
00:13:26,430 --> 00:13:30,070
I have a toolbar and a label.

176
00:13:30,070 --> 00:13:33,040
Create some instance variables to back them.

177
00:13:33,040 --> 00:13:35,690
Let's jump to our Implementation File.

178
00:13:35,690 --> 00:13:37,450
We want to synthesize our properties.

179
00:13:37,450 --> 00:13:39,210
Get rid of that extra space.

180
00:13:39,210 --> 00:13:47,470
Clean up after ourselves and now I have this method
configure view and this gets called every time

181
00:13:47,470 --> 00:13:54,900
that the recipe changes so here I want to
set the title of a recipe, just like that.

182
00:13:54,900 --> 00:13:58,850
Go back to IB and we want to connect these Outlets.

183
00:13:58,850 --> 00:14:05,250
Our file's owner is still our old iPhone version of this
class so I'm going to make that be the iPad version just

184
00:14:05,250 --> 00:14:13,180
by changing the class in the Identity inspector and now if
I Control click on it you can see I have the connection hud.

185
00:14:13,180 --> 00:14:23,250
I'm just going to drag connections to the label and to
the toolbar and that is the UI we designed for the iPad.

186
00:14:23,250 --> 00:14:31,030
I'm going to close this now and go back to our
MainWindow because we set up the left side earlier.

187
00:14:31,030 --> 00:14:32,490
Now we need to set up the right.

188
00:14:32,490 --> 00:14:37,380
So, presently it's an instance of UI View
Controller, we want to make it an instance

189
00:14:37,380 --> 00:14:41,230
of the View Controller we just designed the U4.

190
00:14:41,230 --> 00:14:45,800
So I'll do that here and I've added a SplitView Controller.

191
00:14:45,800 --> 00:14:49,620
I've moved around the Nav Controller and
I put in this RecipeDetailViewController.

192
00:14:49,620 --> 00:14:57,180
I'd like to have Outlets to all of them and so
previously our AppDelegate had the Outlets to MainWindow.

193
00:14:57,180 --> 00:14:58,970
I've created a version for the iPad.

194
00:14:58,970 --> 00:15:05,520
As you can see it's the same code
as for the iPhone, just renamed.

195
00:15:05,520 --> 00:15:08,150
That's not the right file.

196
00:15:08,150 --> 00:15:18,260
That is. So I'll put in my properties, my
instance variables, need to declare that class

197
00:15:18,260 --> 00:15:25,910
and now we'll synthesize the properties,
release the instance variables

198
00:15:25,910 --> 00:15:30,620
and there's this method application to finish with options.

199
00:15:30,620 --> 00:15:37,020
This is what gets called when your app launches and it
adds the subview of a view controller to your window.

200
00:15:37,020 --> 00:15:40,970
Previously we added the view of the navigation controller.

201
00:15:40,970 --> 00:15:46,870
We want to use our SplitView Controller
so I'm going to go ahead and select that

202
00:15:46,870 --> 00:15:49,420
and replace it with SplitView Controller.

203
00:15:49,420 --> 00:15:56,960
So now we need to go back to Interface
Builder and connect these.

204
00:15:56,960 --> 00:16:02,990
So here's the AppDelegate and the same thing like
we did earlier, we go to the Identity inspector

205
00:16:02,990 --> 00:16:10,670
and just replace the name of the class to be our iPad
version and we can Control click on it and drag connections

206
00:16:10,670 --> 00:16:15,050
to our DetailViewController and to our SplitView Controller.

207
00:16:15,050 --> 00:16:17,010
Save that.

208
00:16:17,010 --> 00:16:24,880
Go into IB, Xcode rather and I'm going to simulate
this on the iPad Simulator so Build and Run

209
00:16:24,880 --> 00:16:30,090
and as you can see this isn't quite what we had in mind.

210
00:16:30,090 --> 00:16:34,430
Nothing is actually showing up on the screen
when you hit the button in the toolbar.

211
00:16:34,430 --> 00:16:39,500
If you're familiar with any iPhone apps like Mail or if
you've used a bunch of their Party apps generally the way

212
00:16:39,500 --> 00:16:41,670
that a SplitView controller works is when you're

213
00:16:41,670 --> 00:16:44,750
in landscape it shows the View
controller on the left and the right.

214
00:16:44,750 --> 00:16:49,390
When you rotate to portrait, the one on the left
animates out and this button appears on the top left

215
00:16:49,390 --> 00:16:54,190
that when you tap on it, it shows you the View
controller that was previously on the left.

216
00:16:54,190 --> 00:17:01,470
We want that behavior and if we rotate the simulator you
can see we have our recipes on the left like we expected.

217
00:17:01,470 --> 00:17:06,220
When we tap on them doesn't quite
behave the way that we wanted.

218
00:17:06,220 --> 00:17:08,680
I don't think we had this design in mind.

219
00:17:08,680 --> 00:17:10,800
We didn't want it to slide in on the side.

220
00:17:10,800 --> 00:17:13,490
We wanted it to replace the area in the middle.

221
00:17:13,490 --> 00:17:22,960
So I'm going to quit the simulator and now we're going
to add some polish and make this a really great app.

222
00:17:22,960 --> 00:17:31,700
So I have a class which is RecipeTableViewController and
there's a method in here called did TableView did Select Row

223
00:17:31,700 --> 00:17:36,490
at index path and this gets called every
time that you tap on a TableView cell.

224
00:17:36,490 --> 00:17:41,290
So I'm going to write some code in here
and what we're doing here is checking

225
00:17:41,290 --> 00:17:45,890
to see we're asking the device if we're an iPad.

226
00:17:45,890 --> 00:17:51,820
If we are, we're setting the Recipe that's
displayed by our RecipeDetailController.

227
00:17:51,820 --> 00:18:00,640
Otherwise we want to take the code that we previously
had there, just cut it, move that over and paste.

228
00:18:00,640 --> 00:18:06,300
So now if you're on an iPhone and you select TableViewCell,
it'll push a new view controller onto the stack

229
00:18:06,300 --> 00:18:10,160
like it did before where if you're on
an iPad it'll just show it on the right.

230
00:18:10,160 --> 00:18:15,730
The next thing that we wanted to do was to
get that button on the top left to work.

231
00:18:15,730 --> 00:18:23,820
So to do that, we're going to take advantage of the fact
that the SplitView Controller class has a delegate protocol

232
00:18:23,820 --> 00:18:31,300
that we can implement and two of the methods from there
are called when the view on the left shows and hides.

233
00:18:31,300 --> 00:18:36,160
So, that's going to be where we're
going to configure that button.

234
00:18:36,160 --> 00:18:41,350
So I'm going to make my Detail View
controller be the delegate for that

235
00:18:41,350 --> 00:18:45,950
and I'll add an instance variable for a popover.

236
00:18:45,950 --> 00:18:54,020
Maybe I'll add a property in case I want to access
it from someplace else inside of the M file.

237
00:18:54,020 --> 00:19:01,610
I want to synthesize that and take care of releasing it.

238
00:19:01,610 --> 00:19:03,600
We also now need to write some code.

239
00:19:03,600 --> 00:19:06,330
As I mentioned there were two methods
that we were interested in.

240
00:19:06,330 --> 00:19:07,260
These are them.

241
00:19:07,260 --> 00:19:11,760
SplitView will hide View Controller with
bar button item for popover controller

242
00:19:11,760 --> 00:19:15,810
and SplitView Controller will show View
Controller in validating bar button item

243
00:19:15,810 --> 00:19:17,870
and here we're setting the title of the bar button item.

244
00:19:17,870 --> 00:19:24,570
We're giving it a pop we're taking the popover that's passed
into us by this method, setting our popover to be that

245
00:19:24,570 --> 00:19:28,450
and hiding it when the view on the left shows.

246
00:19:28,450 --> 00:19:34,160
Great. The other thing that was wrong
with our app was when we first launched,

247
00:19:34,160 --> 00:19:37,470
we wanted a recipe to show up, not just white.

248
00:19:37,470 --> 00:19:44,280
So view did load is the method that gets called the first
time the view on the right is shown so I'm going to go ahead

249
00:19:44,280 --> 00:19:51,790
and in here set our recipe to be
the first one in our recipe list.

250
00:19:51,790 --> 00:19:57,580
Great and the final thing that I need to
do is back in Interface Builder I need

251
00:19:57,580 --> 00:20:03,100
to let the SplitView controller know that the
RecipeDetailViewController is its delegate.

252
00:20:03,100 --> 00:20:08,040
I'm going to do that by Control
clicking on SplitView Controller.

253
00:20:08,040 --> 00:20:13,080
You can see there's a delegate item here and
I'm just going to drag a connection from that

254
00:20:13,080 --> 00:20:16,870
to the DetailViewController and I'll Save.

255
00:20:16,870 --> 00:20:21,340
Go back to Xcode and Build and Run and great.

256
00:20:21,340 --> 00:20:23,430
You can see that works.

257
00:20:23,430 --> 00:20:24,250
We have our app.

258
00:20:24,250 --> 00:20:25,270
We're seeing a recipe.

259
00:20:25,270 --> 00:20:34,390
We tap on the button, we can see the popover, take a recipe,
here's some cheese that I made the other day, maybe a BLT.

260
00:20:34,390 --> 00:20:37,330
Could go for some right now.

261
00:20:38,390 --> 00:20:40,310
Rotate it.

262
00:20:40,310 --> 00:20:42,280
Recipes are still there on the left.

263
00:20:42,280 --> 00:20:46,210
Works. Let's quit the simulator.

264
00:20:46,210 --> 00:20:53,910
Go back. Pick the iPhone and Build and Run and you can
see it still works on the iPhone just like it did before.

265
00:20:53,910 --> 00:20:59,400
Let's go back to the slides.

266
00:20:59,400 --> 00:21:02,680
So, let's talk about what we just did.

267
00:21:02,680 --> 00:21:09,980
We took an existing iPhone app and upgraded it
to be universal and in doing so we took advantage

268
00:21:09,980 --> 00:21:16,090
of new technologies that are available and
tailored for the iPad and even though we added all

269
00:21:16,090 --> 00:21:25,000
of this iPad-specific support, we continued to keep our
app functioning just as it had before on the iPhone.

270
00:21:25,000 --> 00:21:31,530
So now we're going to talk about adopting features from
iOS 4 and to do that I'd like to call on to stage one

271
00:21:31,530 --> 00:21:33,700
of my colleagues, Barry Langdon-Lassagne.

272
00:21:33,700 --> 00:21:34,440
Barry?

273
00:21:34,440 --> 00:21:39,250
[ Applause ]

274
00:21:39,250 --> 00:21:40,290
>> Barry Langdon-Lassagne: Thank you Rob.

275
00:21:40,290 --> 00:21:44,150
So adopting iOS 4 features.

276
00:21:44,150 --> 00:21:48,870
Before I talk about adopting iOS 4 features I want
to talk a little bit about maintaining compatibility

277
00:21:48,870 --> 00:21:53,500
because if you think about what we're about to do
we're about to add new features to a Universal App

278
00:21:53,500 --> 00:21:55,490
but only to one side of that Universal App.

279
00:21:55,490 --> 00:21:59,010
The iPad doesn't have iOS 4 yet.

280
00:21:59,010 --> 00:22:02,380
So, let me talk about maintaining compatibility.

281
00:22:02,380 --> 00:22:09,970
The first thing is in Xcode in your project info
there are a couple fields I want to point out here

282
00:22:09,970 --> 00:22:18,180
in the Main Build Info and in the
Secondary Window you'll see two fields.

283
00:22:18,180 --> 00:22:22,480
One is iPhone OS Deployment target and that is,

284
00:22:22,480 --> 00:22:26,930
you can think of that as being the earliest
version of the iOS that you want to support.

285
00:22:26,930 --> 00:22:35,680
In our case it's 3.2 the iPad OS and then we have
Base SDK for All versions and that is the build,

286
00:22:35,680 --> 00:22:39,790
that's the version of the SDK you're going to be
building against so it's the latest and greatest.

287
00:22:39,790 --> 00:22:44,390
You can think of it as the newest because it is the
newest at the moment version that you're going to support

288
00:22:44,390 --> 00:22:47,470
but you can support anything from there and beyond.

289
00:22:47,470 --> 00:22:54,520
So in a way you can think of that as the range
of OS versions that you're supporting and in fact

290
00:22:54,520 --> 00:22:59,510
in Xcode 4 you could see this as
a slider, graphically as a slider

291
00:22:59,510 --> 00:23:02,360
where you can choose the range
which is a very nice presentation.

292
00:23:02,360 --> 00:23:09,650
OK. Now I want to talk about some of those
runtime checks that Rob described and they're sort

293
00:23:09,650 --> 00:23:13,830
of loosely broken up into three categories here.

294
00:23:13,830 --> 00:23:18,880
The first one [UIDevice userInterfaceIdiom]
is one that Rob showed in the demo

295
00:23:18,880 --> 00:23:23,140
and that's just the big switch am
I on an iPhone or am I on an iPad.

296
00:23:23,140 --> 00:23:27,710
I have lots of screen real estate or am I more
constrained and so you'd use that any time you want

297
00:23:27,710 --> 00:23:33,850
to do something specific like in Rob's, in the
case of Rob's Demo he was changing the behavior

298
00:23:33,850 --> 00:23:36,250
of the TableViewController to use a SplitView.

299
00:23:36,250 --> 00:23:40,110
The next two NSClassFromString() and

300
00:23:40,110 --> 00:23:42,890
[NSObject responds ToSelector:] are much more specific.

301
00:23:42,890 --> 00:23:49,640
NSClassFromString() will give you a
reference to a class if it exists.

302
00:23:49,640 --> 00:23:55,150
So you do this at runtime to check in your shared code
whether a class exists so that you can use the class.

303
00:23:55,150 --> 00:23:59,020
All of these things are things that
you would want to do in shared code.

304
00:23:59,020 --> 00:24:04,730
If you've already factored your code between iPad and
iPhone generally you won't need to do runtime checks.

305
00:24:04,730 --> 00:24:10,600
So NSClassFromString() is one that I will
demo when I start adding iOS 4 features.

306
00:24:10,600 --> 00:24:11,480
The other one,

307
00:24:11,480 --> 00:24:17,210
[NSObject responds ToSelector:] is the most sort
of the most precise runtime check you can do.

308
00:24:17,210 --> 00:24:21,130
This is checking if an object actually
has a method that you're interested in.

309
00:24:21,130 --> 00:24:30,590
So if you've, if you know the iOS has been upgraded, more
API is available, what do we have 1500 new API with iOS 4

310
00:24:30,590 --> 00:24:35,160
so NSObject you're going to have more functionality and
you can check for the specific functionality that you care

311
00:24:35,160 --> 00:24:39,970
about at runtime and then take
advantage of it if it's there.

312
00:24:39,970 --> 00:24:46,620
The last one [UIDevice systemVersion], this is checking
to see what version of the OS you're running on.

313
00:24:46,620 --> 00:24:52,790
Generally you probably won't need this but we actually
ran into a case in our Demo where we needed it

314
00:24:52,790 --> 00:24:58,990
and the particular case that we needed is we're
going to be accessing a class that used to exist.

315
00:24:58,990 --> 00:25:05,270
It existed in previous versions of the iOS but it was
private and as of iOS 4 it's now public so we're going

316
00:25:05,270 --> 00:25:10,250
to need to check to see if we're on iOS 4
before we try to use that particular class.

317
00:25:10,250 --> 00:25:13,110
So those are some runtime checks
that you'll use in your shared code

318
00:25:13,110 --> 00:25:20,290
and for maintaining compatibility there are new
frameworks with new versions of the OS and when you bring

319
00:25:20,290 --> 00:25:27,780
in new frameworks in a Universal App and you want to
support versions that don't have a particular framework,

320
00:25:27,780 --> 00:25:33,780
in this case the iAd framework, you're going to want to weak
link those against your applications so that they don't load

321
00:25:33,780 --> 00:25:36,860
on versions where that framework does not exist.

322
00:25:36,860 --> 00:25:42,900
So the four features that I want to talk about
today and I'm going to be integrating these

323
00:25:42,900 --> 00:25:46,130
into the Universal App that you saw Rob building.

324
00:25:46,130 --> 00:25:49,250
First one is iAd.

325
00:25:49,250 --> 00:25:52,080
So iAd is just a view.

326
00:25:52,080 --> 00:25:53,460
Go to Interface Builder.

327
00:25:53,460 --> 00:25:56,030
Now you have a new type of view called Ad Banner View.

328
00:25:56,030 --> 00:25:58,290
Drag and drop it into your interface.

329
00:25:58,290 --> 00:26:05,430
Wire it up in Interface Builder just like you do any
other view and the things that I do with iAd you can do,

330
00:26:05,430 --> 00:26:10,030
you'll do pretty much exactly the same
thing no matter what view you're adding.

331
00:26:10,030 --> 00:26:16,430
For instance if you wanted to add MapKit or some other
view that comes out in a newer version, Drag and drop.

332
00:26:16,430 --> 00:26:24,040
You wire it up and you'll want to handle in code the case
of rotating the phone so that it gets the notification

333
00:26:24,040 --> 00:26:28,380
that it's been rotated and I'll show you that
in the demo and we've weak linked the framework

334
00:26:28,380 --> 00:26:36,330
because it's a new framework and it doesn't exist
on iPad so we'll want to continue to work on iPad.

335
00:26:36,330 --> 00:26:42,160
So, the next iOS 4 feature I want
to add is something called UINib.

336
00:26:42,160 --> 00:26:44,300
UINib is a class in UIKit.

337
00:26:44,300 --> 00:26:49,900
It's a class whose purpose in life is optimizing
the performance of frequently used NIBs.

338
00:26:49,900 --> 00:26:54,280
So anytime you're using the same NIB
over and over again in your application,

339
00:26:54,280 --> 00:26:57,050
you can get a performance boost from using UINib.

340
00:26:57,050 --> 00:27:04,020
The classic example of this is a TableView where you're
using a TableView cell over and over on your screen

341
00:27:04,020 --> 00:27:08,210
and when we did testing we found that you could
load twice as many NIBs in the same amount

342
00:27:08,210 --> 00:27:12,070
of time using UINib as you could using the older method.

343
00:27:12,070 --> 00:27:15,980
Third thing that I'm going to talk
about is IBOutletCollections.

344
00:27:15,980 --> 00:27:19,980
IBOutletCollections are a new type of
Outlet that Interface Builder can use

345
00:27:19,980 --> 00:27:23,040
to connect multiple user interface
elements at the same time.

346
00:27:23,040 --> 00:27:29,770
So here you see an example of connecting up an array
of TextViews to all of the TextViews in our interface.

347
00:27:29,770 --> 00:27:35,220
You can use it to refer to multiple elements simultaneously
that generally you'd do it for the same type of element

348
00:27:35,220 --> 00:27:37,950
but you can also connect to multiple
types of elements at the same time.

349
00:27:37,950 --> 00:27:41,890
So I'm going to talk about the syntax
of IBOutletCollection a little bit.

350
00:27:41,890 --> 00:27:43,040
Here's an IBOutlet.

351
00:27:43,040 --> 00:27:49,700
You should all be familiar with this if you've used
Interface Builder for the last what fifteen years?

352
00:27:49,700 --> 00:27:52,810
Here we have a UILabel instance variable.

353
00:27:52,810 --> 00:27:57,040
It's identified as an IBOutlet, which means
in Interface Builder it'll go oh IBOutlet.

354
00:27:57,040 --> 00:28:02,660
I bet you want to wire that up to a label and it will
let you connect things to connect the label to labels.

355
00:28:02,660 --> 00:28:06,140
IBOutletCollection is very familiar, is very similar.

356
00:28:06,140 --> 00:28:11,260
Only the type is specified in parentheses
so here we have an NSArray of labels

357
00:28:11,260 --> 00:28:14,770
and we're telling Interface Builder we
just want to connect this to UILabels.

358
00:28:14,770 --> 00:28:17,500
So if you wanted to connect it
to different types of elements,

359
00:28:17,500 --> 00:28:22,070
you'd specify id in parenthesis
or leave the parenthesis blank.

360
00:28:22,070 --> 00:28:29,470
The fourth and last feature of iOS 4 I'd like to
talk about briefly today is UI Automation testing.

361
00:28:29,470 --> 00:28:34,120
This is a new feature in iOS 4 that allows
you to automate testing of your applications.

362
00:28:34,120 --> 00:28:40,010
It's based on JavaScript which probably many
of you already know and it runs in instruments

363
00:28:40,010 --> 00:28:43,170
which means you can be instrumenting
your code at the same time

364
00:28:43,170 --> 00:28:47,110
as you're stressing your code,
as you're exercising your code.

365
00:28:47,110 --> 00:28:52,240
So for example if you want to do performance testing
you could write a script that goes through your app,

366
00:28:52,240 --> 00:28:57,350
does different things and you could put in some
performance instrumentation in instruments and run it over

367
00:28:57,350 --> 00:29:02,490
and over again and as you modify your application
you can be seeing the performance improvements

368
00:29:02,490 --> 00:29:07,010
and you know you have confidence that you're doing the exact
same thing every time because you're using a script to do

369
00:29:07,010 --> 00:29:14,170
that rather than a hand going through each of
the steps and UI Automation uses accessibility

370
00:29:14,170 --> 00:29:19,870
so it uses the built-in accessibility that's already
there for voiceover support on the phone and the iPad

371
00:29:19,870 --> 00:29:26,810
and last year with Interface Builder we added support
for setting the traits in accessibility directly

372
00:29:26,810 --> 00:29:31,240
in Interface Builder and I'll be
showing that in the Demo as well.

373
00:29:31,240 --> 00:29:33,080
So those are the things I want to show you.

374
00:29:33,080 --> 00:29:38,640
I'm going to switch over to the
demo machine and make them work.

375
00:29:38,640 --> 00:29:45,650
So here we have the project just as Rob left
it and this probably don't need to be running.

376
00:29:45,650 --> 00:29:52,440
So let's add iAd Support first and I think now I'm going
to close up these iPad folders because I'm only going

377
00:29:52,440 --> 00:29:54,340
to be working on the iPhone side of things.

378
00:29:54,340 --> 00:30:00,070
It's really nice that Rob segmented this up between
iPhone and iPad so it's easier to find stuff.

379
00:30:00,070 --> 00:30:02,130
I'll do some stuff in shared classes.

380
00:30:02,130 --> 00:30:05,730
I'll do some stuff in the iPhone
classes and in the iPhone resources.

381
00:30:05,730 --> 00:30:07,940
So let's Open up the RecipeDetailView here.

382
00:30:07,940 --> 00:30:16,150
It's the iPhone version and I'm going to put an iAd here
so I need to make a little bit of space in my interface.

383
00:30:16,150 --> 00:30:24,350
Just going to move these text fields
up and here's iAd in the Library

384
00:30:24,350 --> 00:30:27,320
and I'm just going to drag and drop it into my interface.

385
00:30:27,320 --> 00:30:34,010
I want to pin it to the bottom so just going to unhook
it from the top and stick, pin it to the bottom.

386
00:30:34,010 --> 00:30:40,360
We'll Save that and then back to
the project iAd is a new framework.

387
00:30:40,360 --> 00:30:47,460
It's not available on the iPad so I'm
going to add iAd here to the target.

388
00:30:47,460 --> 00:30:54,110
So if I Double-click on the target for the
Recipes application you'll see down here is a list

389
00:30:54,110 --> 00:30:56,650
of all the linked libraries, all
the frameworks that we're adding.

390
00:30:56,650 --> 00:30:58,720
Just going to add iAd here.

391
00:30:58,720 --> 00:31:00,230
I will add iAd.

392
00:31:00,230 --> 00:31:03,070
It's a little bit redundant.

393
00:31:03,070 --> 00:31:08,480
Click here and because it's only available in iOS
4 I'm going to weak link this so that the iPad side

394
00:31:08,480 --> 00:31:11,360
of the application continues to build and run.

395
00:31:11,360 --> 00:31:15,310
So now let's Build and Run.

396
00:31:15,310 --> 00:31:16,740
So there's our recipes.

397
00:31:16,740 --> 00:31:22,010
I'm going to Click on BLT here and you'll see the
iAd, it'll test advertisement appears at the bottom.

398
00:31:22,010 --> 00:31:22,800
I can click on it.

399
00:31:22,800 --> 00:31:24,500
It takes over the screen.

400
00:31:24,500 --> 00:31:25,600
You're still in your app.

401
00:31:25,600 --> 00:31:26,350
You can close it.

402
00:31:26,350 --> 00:31:27,320
You're still there.

403
00:31:27,320 --> 00:31:28,600
Works great.

404
00:31:28,600 --> 00:31:30,970
Works great unless you rotate the phone.

405
00:31:30,970 --> 00:31:35,690
If I rotate the phone you'll see the iAd
didn't get the message that the phone rotated.

406
00:31:35,690 --> 00:31:37,540
The view doesn't know we're in a new layout.

407
00:31:37,540 --> 00:31:44,040
So I'm going to do some work in code
here to tell it what just what happened.

408
00:31:44,040 --> 00:31:48,060
Alright. So, this is in the DetailViewController.

409
00:31:48,060 --> 00:31:50,300
I'm going to go to the header file here.

410
00:31:50,300 --> 00:31:53,690
This is an iPhone only class so I don't
have to worry about runtime checks here.

411
00:31:53,690 --> 00:32:01,550
I can put in things that are specific to iOS 4 so I'm going
to import the iAd headers and I want to add a new Outlet

412
00:32:01,550 --> 00:32:10,040
so that I can refer to this Ad Banner View from
within code and I need an instance variable.

413
00:32:10,040 --> 00:32:14,680
Save that and I want to synthesize.

414
00:32:14,680 --> 00:32:21,900
Great and do my housekeeping.

415
00:32:21,900 --> 00:32:23,730
Excellent.

416
00:32:23,730 --> 00:32:28,390
OK. So now I need to tell it that it's going to rotate.

417
00:32:28,390 --> 00:32:34,380
Well if you've already rotated the phone and you click and
you tap a TableViewCell it's going to go to your DetailView

418
00:32:34,380 --> 00:32:36,920
and it'll execute the configure
view method that Rob showed you

419
00:32:36,920 --> 00:32:41,760
if you have an iPad version of this on the iPad source file.

420
00:32:41,760 --> 00:32:43,930
I'm going to add here.

421
00:32:45,330 --> 00:32:48,380
Well ifSame [assumed spelling] just
checks to see what's my orientation.

422
00:32:48,380 --> 00:32:56,010
If I'm landscape I want to use the 480x32 version
and if I'm portrait I want to use the 320x50 version.

423
00:32:56,010 --> 00:33:01,040
So that takes care of one of the two cases that
you have to take care of and that's the case

424
00:33:01,040 --> 00:33:03,500
where you're already rotated and
you move into the DetailView.

425
00:33:03,500 --> 00:33:08,650
The other case is what if you're looking at it
in portrait mode and you turn the phone sideways.

426
00:33:08,650 --> 00:33:15,970
Well in that case, in that case you want
to get notified that the phone rotated.

427
00:33:15,970 --> 00:33:21,420
Your view will get can be notified using this
particular method will rotate to interface orientation

428
00:33:21,420 --> 00:33:28,540
and in this case we're going to get the notification
that we rotated and here we'll call ConfigureView.

429
00:33:28,540 --> 00:33:32,600
So let me, one more step.

430
00:33:32,600 --> 00:33:40,620
I need to go back to my ZIB and I need
to Connect up that Outlet that I created in the header file.

431
00:33:40,620 --> 00:33:45,120
So if I Control-click on File's Owner you'll
see there's an Outlet here bannerView.

432
00:33:45,120 --> 00:33:49,660
I'm just going to drag connect that
up to bannerView and now when I Build

433
00:33:49,660 --> 00:33:58,410
and Run you should see there's the
advertisement and then when I rotate the phone,

434
00:33:58,410 --> 00:34:01,970
you can see it adjusts to the new orientation of the phone.

435
00:34:01,970 --> 00:34:08,150
If I'm already in the RecipeView and I
want some tomatoes you can see it knows

436
00:34:08,150 --> 00:34:11,750
that I'm rotated and it shows the proper orientation.

437
00:34:11,750 --> 00:34:17,360
So that's adding iAd support to our Universal
Application and handling the case of rotation

438
00:34:17,360 --> 00:34:20,880
and again as I said this will be true for
any kind of view that you're going to add

439
00:34:20,880 --> 00:34:24,360
to your iPhone app so this stuff is pretty general useful.

440
00:34:24,360 --> 00:34:26,650
Alright. So that's iAd.

441
00:34:26,650 --> 00:34:29,510
Now let's do a little bit of performance optimization.

442
00:34:29,510 --> 00:34:34,760
Let's use this new UINib class to make our
TableViewCells load a little bit faster.

443
00:34:34,760 --> 00:34:37,370
That's going to be in shared code.

444
00:34:37,370 --> 00:34:42,930
So here we have the RecipeTableViewController.

445
00:34:42,930 --> 00:34:44,860
This. Let me.

446
00:34:44,860 --> 00:34:47,470
Don't need this space here.

447
00:34:47,470 --> 00:34:52,540
This contains a method called CellforRowIndexPath
[assumed spelling].

448
00:34:52,540 --> 00:34:57,290
This is if you've ever used TableViews this
is like the workhorse method for TableViews.

449
00:34:57,290 --> 00:35:02,500
This is where all the stuff happens to load those
individual TableViews and the particular piece we're going

450
00:35:02,500 --> 00:35:04,950
to focus on is this little if statement here.

451
00:35:04,950 --> 00:35:08,700
Test to see if recipe cell is nil and loads it if it is nil.

452
00:35:08,700 --> 00:35:16,040
So there's already been an optimization in the iPhone
OS for a long time and that optimization is if you look

453
00:35:16,040 --> 00:35:22,890
at the interface of the TableView it's really only showing
in our case about half a dozen cells at any given time.

454
00:35:22,890 --> 00:35:28,660
So really we only need to load about half a dozen cells and
as you scroll we can de-queue the ones we don't care about

455
00:35:28,660 --> 00:35:31,580
and queue up the ones that we do care about and reuse those.

456
00:35:31,580 --> 00:35:36,860
So this code here that's been in here where
we have a cell identifier and we're getting,

457
00:35:36,860 --> 00:35:42,460
we're de-queuing a reusable cell, it'll give us a new cell
as we need them and it will de-queue and hold onto them.

458
00:35:42,460 --> 00:35:47,370
It's a pretty good optimization
but we can do better than that.

459
00:35:47,370 --> 00:35:51,620
This loads 6 or 7 instances of RecipeCell.

460
00:35:51,620 --> 00:35:57,440
We can make it so that it only has to load
it once and we'll do that using UINib.

461
00:35:57,440 --> 00:36:04,470
So, I need an instance variable so I'm going to just
stick one here called RecipeNIB and I'm making it id just

462
00:36:04,470 --> 00:36:07,570
to be careful because we're in
share code here and I don't want

463
00:36:07,570 --> 00:36:11,270
to do anything that's specific
to iOS 4 without a runtime check.

464
00:36:11,270 --> 00:36:19,810
So if I make this ID it's a little bit easier and
then I want to create an accessor for that RecipeNIB.

465
00:36:19,810 --> 00:36:21,600
Oops, got to get my housekeeping.

466
00:36:21,600 --> 00:36:25,260
Put that down here.

467
00:36:29,410 --> 00:36:35,880
I'm going to create an accessor for the RecipeNIB
and this is where the runtime checks are.

468
00:36:35,880 --> 00:36:42,230
First runtime check is that one I told you you're not going
to need very often and that is getting the system version.

469
00:36:42,230 --> 00:36:45,690
So why do we need to get the system version here?

470
00:36:45,690 --> 00:36:52,640
Well it turns out UINib actually existed in previous
versions of the iPhone OS, the iOS, only it was private.

471
00:36:52,640 --> 00:36:57,800
It had different behavior so now that there's
a public UINib we have to check to see if we're

472
00:36:57,800 --> 00:37:01,600
on 4.0 or later before we attempt to use it.

473
00:37:01,600 --> 00:37:03,850
So, we're testing to see if we're on 4.0.

474
00:37:03,850 --> 00:37:10,730
If we are then we're going to do NSClassFromString() which
is another one of the runtime useful runtime functions

475
00:37:10,730 --> 00:37:17,050
that gets us an instance of that class, sorry, gives
us reference to that class and then we can use it.

476
00:37:17,050 --> 00:37:23,280
So here we're initializing RecipeNIB using this
NIB with NIB name method to get this TableViewCell.

477
00:37:23,280 --> 00:37:29,100
It's going to load it once and then once we've loaded
it, you'll see this code actually just falls through the

478
00:37:29,100 --> 00:37:32,640
IF because the RecipeNIB will exist and it'll
just return it every time you ask for it.

479
00:37:32,640 --> 00:37:34,260
So it never loads it again.

480
00:37:34,260 --> 00:37:35,720
It just does the instantiation.

481
00:37:35,720 --> 00:37:42,020
Yeah, it just does the instantiation which we'll do
down here in self-erode in its path in this little

482
00:37:42,020 --> 00:37:44,890
IF area that I was telling you was so important.

483
00:37:44,890 --> 00:37:51,090
So let me make a little space here
and I'm going to paste in an IF.

484
00:37:51,090 --> 00:37:52,490
Very simple.

485
00:37:52,490 --> 00:37:56,710
If I can get that RecipeNIB that
means I'm on 4.0 so I can use it.

486
00:37:56,710 --> 00:37:58,290
I can instantiate it.

487
00:37:58,290 --> 00:38:02,790
If I can't get it I must be on 3.2 so I'm
going to do the same thing I've been doing.

488
00:38:02,790 --> 00:38:12,160
So I'm just going to cut this line of code out that I had
here before and paste it in where I want it to run on 3.2.

489
00:38:12,160 --> 00:38:15,540
So now I'm going to Build and Run
and what you'll see when you run this

490
00:38:15,540 --> 00:38:20,180
on the device is zippier scrolling
and that's exactly what you want.

491
00:38:20,180 --> 00:38:21,510
That's what your users want.

492
00:38:21,510 --> 00:38:23,130
Nice, smooth scrolling.

493
00:38:23,130 --> 00:38:26,850
You really can't tell on the simulator because
the performance characteristics are different.

494
00:38:26,850 --> 00:38:29,970
It's actually much faster here running in the simulator.

495
00:38:29,970 --> 00:38:33,060
So that's UINib.

496
00:38:33,060 --> 00:38:38,420
Performance optimization inside
shared code with runtime checks.

497
00:38:38,420 --> 00:38:40,680
Next up IBOutletCollection.

498
00:38:40,680 --> 00:38:44,240
Let's take a look at that DetailView
that I've been working on.

499
00:38:44,240 --> 00:38:51,870
I added an iAd so I'm thinking I'm using this recipe app,
I'm in the kitchen and the phone is sitting on the table

500
00:38:51,870 --> 00:38:54,870
and I'm over here with the blender and
the mixer and I want to see the recipe.

501
00:38:54,870 --> 00:39:00,950
It'd be kind of nice if I can change the font size
really easily so I'm going to add a slider in here

502
00:39:00,950 --> 00:39:03,610
because I'm going to want to change
the font size of these TextViews.

503
00:39:03,610 --> 00:39:07,210
I think don't need to make it that much smaller.

504
00:39:07,210 --> 00:39:12,490
Let's throw a slider in here and I'm going to
give it some values that make sense for fonts.

505
00:39:12,490 --> 00:39:19,930
I'll start at 8 point and maybe go to 24 point and then
I think the default should be right in the middle, 16.

506
00:39:19,930 --> 00:39:26,290
so I've got a slider and I've got some TextViews and I
could create a separate Outlet for every TextView here

507
00:39:26,290 --> 00:39:30,220
and wire it all up in Interface Builder you
know the way we've been doing it all along

508
00:39:30,220 --> 00:39:32,250
but I'm going to use an IBOutletCollection.

509
00:39:32,250 --> 00:39:36,720
You can imagine if you have a more complicated
layout IBOutletCollections will be more useful

510
00:39:36,720 --> 00:39:39,680
because you'll have more things that
you'll want to wire up simultaneously.

511
00:39:39,680 --> 00:39:41,610
We've only got two here.

512
00:39:41,610 --> 00:39:47,690
So, we're in the TableView sorry the
DetailViewController so let me switch on over to the header

513
00:39:47,690 --> 00:39:52,570
for the DetailViewController and here
I'm going to add the IBOutletCollection.

514
00:39:52,570 --> 00:39:58,630
So you can see I'm telling it that
I want an array of TextViews.

515
00:39:58,630 --> 00:40:02,480
I'm specifying UITextView because
that's what I want to connect to

516
00:40:02,480 --> 00:40:13,480
and I need an instance variable
and I need to do my housekeeping.

517
00:40:15,710 --> 00:40:23,650
Great and now I need an IBAction to use for that
slider so let me put an IBAction right here.

518
00:40:23,650 --> 00:40:26,170
It's fairly simple.

519
00:40:26,170 --> 00:40:29,850
This IBAction is going to be connected
to a slider and what it's going

520
00:40:29,850 --> 00:40:31,640
to do is it's going to get the value from the slider.

521
00:40:31,640 --> 00:40:38,790
I set it between 8 and 24, nice font sizes and it's
going to use set value for key on the TextViewsArray

522
00:40:38,790 --> 00:40:42,220
and just set the font size for everything it finds.

523
00:40:42,220 --> 00:40:45,640
Alright. Let me go to the Header.

524
00:40:45,640 --> 00:40:51,400
I want to specify my IBAction here
so the Interface Builder sees it.

525
00:40:51,400 --> 00:40:55,120
Switch back to Interface Builder and you'll see over here.

526
00:40:55,120 --> 00:40:56,960
Let me just bring that up again.

527
00:40:56,960 --> 00:40:59,140
This is the highlight for the File's Owner.

528
00:40:59,140 --> 00:41:02,940
You'll see OutletCollections has just
shown up so this is a new section

529
00:41:02,940 --> 00:41:05,760
that shows up and it shows your OutletCollections.

530
00:41:05,760 --> 00:41:11,510
This one is the TextView one and you can see as I drag over
to my interface only the TextViews are going to highlight.

531
00:41:11,510 --> 00:41:12,570
The image view doesn't highlight.

532
00:41:12,570 --> 00:41:17,570
The slider doesn't highlight so I
just wire this up, all of the elements

533
00:41:17,570 --> 00:41:19,950
and here you can see all of the elements that it's wired to.

534
00:41:19,950 --> 00:41:28,590
It's very, very nicely presented and then got my slider
and I want my slider to run that IBAction that I created

535
00:41:28,590 --> 00:41:31,900
so I'm going to Control drag from
the slider onto File's Owner.

536
00:41:31,900 --> 00:41:34,280
It'll bring me a list of all my IBActions.

537
00:41:34,280 --> 00:41:35,950
Click on Change font size.

538
00:41:35,950 --> 00:41:47,860
Save. Now Build and Run, and they'll click on BLT and drag

539
00:41:47,860 --> 00:41:52,340
and you can see it's changing the font
size for all the TextViews simultaneously.

540
00:41:52,340 --> 00:41:55,500
So that's IBOutletCollection.

541
00:41:55,500 --> 00:42:01,360
[ Applause ]

542
00:42:01,360 --> 00:42:06,920
So the last thing I want to show you
in the Demo is UI Automation Testing.

543
00:42:06,920 --> 00:42:11,050
You should be thinking about testing
whenever you're doing development

544
00:42:11,050 --> 00:42:14,410
and I just added a new control to my application.

545
00:42:14,410 --> 00:42:19,600
So I probably want to test it and hey I added the new
control and I probably haven't made that accessible

546
00:42:19,600 --> 00:42:21,300
yet so I should do that at the same time.

547
00:42:21,300 --> 00:42:21,740
This is great.

548
00:42:21,740 --> 00:42:23,590
I get two things for one.

549
00:42:23,590 --> 00:42:25,900
Alright. So we'll go back to the interface.

550
00:42:25,900 --> 00:42:30,300
Oh that's not the right one.

551
00:42:30,300 --> 00:42:37,290
Go back to here and my slider is already selected so I'm
just going to Click over here on the Identity inspector

552
00:42:37,290 --> 00:42:41,890
and here's that accessibility section I was telling
you we added a year ago to Interface Builder.

553
00:42:41,890 --> 00:42:44,910
So this is where you set the Label and
the hints for accessibility and I'm going

554
00:42:44,910 --> 00:42:49,060
to just give this slider a nice human readable title.

555
00:42:49,060 --> 00:42:51,470
I'm going to call it Slider for Font Size.

556
00:42:51,470 --> 00:42:57,620
So not only will that be the thing that says when you run
voiceover in your app, it's also the unique identifier

557
00:42:57,620 --> 00:42:59,760
to refer to that slider in your test code.

558
00:42:59,760 --> 00:43:05,110
So if you have multiple sliders you'd probably want to
give them names that made sense to people using voiceover

559
00:43:05,110 --> 00:43:11,000
and those names because they're unique will also
be great for referring to in your automated testing

560
00:43:11,000 --> 00:43:13,390
because they'll keep working even
if you rearrange your interface.

561
00:43:13,390 --> 00:43:15,800
You're not referring to the x y coordinates of things.

562
00:43:15,800 --> 00:43:17,570
You're not clicking blindly.

563
00:43:17,570 --> 00:43:19,520
You're actually looking where you're clicking.

564
00:43:19,520 --> 00:43:22,200
You're clicking on things that you know the name of.

565
00:43:22,200 --> 00:43:24,620
OK. So I've given it a name.

566
00:43:24,620 --> 00:43:31,380
I've given it a Label and I'm just going to rebuild
the project to make sure everything's up to date.

567
00:43:31,380 --> 00:43:33,970
Now I'm going to switch to instruments.

568
00:43:33,970 --> 00:43:43,360
In Instruments you'll see there's a new template
for automation so I'm going to choose that

569
00:43:43,360 --> 00:43:48,310
and since I've already run this once on this
machine, let me just hide stuff in the background.

570
00:43:48,310 --> 00:43:53,670
Since I've already run it, it's actually already
referring to my Quick Test JavaScript that I wrote.

571
00:43:53,670 --> 00:43:56,480
I'm not going to take time to show
you guys how to write tests here.

572
00:43:56,480 --> 00:44:01,580
There's actually another session for writing
UI Automation testing that covers this in much,

573
00:44:01,580 --> 00:44:03,940
much more detail than I would have time to cover here.

574
00:44:03,940 --> 00:44:08,950
The important thing that I did to this Quick Test
is I referred to that slider by the same name that's

575
00:44:08,950 --> 00:44:16,320
in accessibility but you can just take my word for it and
then I want to choose the process that I'm running against.

576
00:44:16,320 --> 00:44:19,540
In this case I'm going to choose
recipes app in the simulator.

577
00:44:19,540 --> 00:44:27,180
You can also run against the phone or eventually
against the iPad and then I'm just going to hit Record.

578
00:44:27,180 --> 00:44:32,140
So now I'm running instruments and you can imagine
I might be putting other instrumentation in here.

579
00:44:32,140 --> 00:44:33,700
I might want to check for leaks.

580
00:44:33,700 --> 00:44:35,440
I might want to do performance inspection.

581
00:44:35,440 --> 00:44:37,520
I might want to look for over-releases.

582
00:44:37,520 --> 00:44:41,620
Whatever you want to do in Instruments you can do at
the same time as you're running an automated script

583
00:44:41,620 --> 00:44:47,970
and you can see it's dragging that slider for
every single TableViewCell in my application.

584
00:44:47,970 --> 00:44:51,950
It's just going to keep on going through until it
gets to the bottom and you know I could have looped it

585
00:44:51,950 --> 00:45:00,170
so it could have just kept on going for a long time and
I'm logging a little bit of data here in Instruments

586
00:45:00,170 --> 00:45:04,100
and now I can go take a break and I'm still doing work.

587
00:45:04,100 --> 00:45:04,530
I love it.

588
00:45:04,530 --> 00:45:04,590
[ Applause ]

589
00:45:04,590 --> 00:45:15,760
We've got too many recipes.

590
00:45:15,760 --> 00:45:20,610
I was going to let it get to the end but
it will say pass when it gets to the end.

591
00:45:20,610 --> 00:45:27,060
Let me switch back to slides.

592
00:45:27,060 --> 00:45:31,820
OK. So what I just showed you I added
iAd support to our Universal Application.

593
00:45:31,820 --> 00:45:35,620
Weak linking the framework so that
it'll continue to work on the iPad.

594
00:45:35,620 --> 00:45:39,290
I added UINib for performance optimization
to share code during runtime checks

595
00:45:39,290 --> 00:45:43,520
to make sure they behaved correctly
on both the iPad and the iPhone.

596
00:45:43,520 --> 00:45:49,860
I used the new IBOutletCollections to connect multiple
user interface elements at the same time and change them

597
00:45:49,860 --> 00:45:55,050
at the same time and I gave you a
little peek of UI Automation testing

598
00:45:55,050 --> 00:46:01,560
so that you can be testing your applications
while you're off taking a drinking break here.

599
00:46:01,560 --> 00:46:05,000
OK and that's everything we wanted to cover today.

600
00:46:05,000 --> 00:46:10,510
So, Rob took our existing iPhone
application, he made it universal.

601
00:46:10,510 --> 00:46:12,830
He factored it into two pieces.

602
00:46:12,830 --> 00:46:18,830
We then took the iPhone side of that Universal
app and we added the iPhone iOS 4 features

603
00:46:18,830 --> 00:46:25,010
to the application all the while keeping an
eye on maintaining compatibility in our app.

604
00:46:25,010 --> 00:46:26,070
So now it's your turn.

605
00:46:26,070 --> 00:46:29,080
Take the things you've learned here,
apply them to your applications,

606
00:46:29,080 --> 00:46:32,220
your development process and make some great applications.

607
00:46:32,220 --> 00:46:33,750
Thank you very much.

608
00:46:33,750 --> 00:46:41,110
[ Applause ]

609
00:46:41,110 --> 00:46:43,730
There are some related session's tomorrow afternoon;

610
00:46:43,730 --> 00:46:47,560
Interface Builder in Xcode 4 is
something you really should catch.

611
00:46:47,560 --> 00:46:48,980
Xcode 4 and Interface Builder.

612
00:46:48,980 --> 00:46:53,230
Xcode and Interface Builder have
been reunited and or have been united

613
00:46:53,230 --> 00:46:58,200
and seeing how you can use Interface
Builder in Xcode is really amazing.

614
00:46:58,200 --> 00:47:03,120
Also the Automating UI Interface session actually is
happening at the same time as this session so you'll want

615
00:47:03,120 --> 00:47:09,020
to catch that on video and Integrating iAds
there's a repeat next or this Friday morning

616
00:47:09,020 --> 00:47:11,160
so you should take a look at those sessions.

617
00:47:11,160 --> 00:47:15,010
Here are a couple more resources
that you might be interested in.

618
00:47:15,010 --> 00:47:17,500
Thank you very much.

619
00:47:17,500 --> 00:47:20,640
[ Applause ]

