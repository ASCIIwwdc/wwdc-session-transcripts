1
00:00:06,060 --> 00:00:07,260
>> My name is Jing.

2
00:00:07,260 --> 00:00:11,000
I will show you how you can create
some great transitional animations

3
00:00:11,000 --> 00:00:16,410
that you would normally associate
with plug-ins, with just CSS.

4
00:00:16,410 --> 00:00:23,920
If you already have a site that works on the iPad, I
will show you how you can use CSS to create effects

5
00:00:23,920 --> 00:00:30,000
that replaces the need for images, and your
site will load faster and use less bandwidth.

6
00:00:30,000 --> 00:00:36,560
So, first, I would like to take you
through a very brief history of the Web,

7
00:00:36,560 --> 00:00:41,590
to show you why using these open Web
technologies have become necessary.

8
00:00:41,590 --> 00:00:49,420
So, in the olden days, websites were mostly about
how much information you could get to the user.

9
00:00:49,420 --> 00:00:57,400
And the challenge designers faced were how do I get
all this text, all these documents, to the user.

10
00:00:57,400 --> 00:01:03,170
But as the Web advanced, and there
is more and more information,

11
00:01:03,170 --> 00:01:08,480
the challenges designers face are more
of How do I organize this information?

12
00:01:08,480 --> 00:01:15,740
and How do I attract the user and make an immersive
experience so the user can absorb this information?

13
00:01:15,740 --> 00:01:24,570
So, for a while, Web technologies have lagged behind
these needs, so people had to turn to plug-ins like Flash

14
00:01:24,570 --> 00:01:28,960
to implement some of these great animated experiences.

15
00:01:28,960 --> 00:01:36,070
But now, these open Web technologies have advanced enough
that you can use them to create some very immersive sites.

16
00:01:36,070 --> 00:01:39,600
And one of the advantages of using these technologies is

17
00:01:39,600 --> 00:01:47,280
that you will have a consistently immersive
experience both on the Mac and on the iPad.

18
00:01:47,280 --> 00:01:49,660
I keep saying open Web technologies.

19
00:01:49,660 --> 00:01:52,880
Specifically, I am talking about HTML5 technologies.

20
00:01:52,880 --> 00:01:56,770
You may be familiar with that term in two different ways.

21
00:01:56,770 --> 00:02:06,730
It could mean the HTML specification, or, in this case, I'm
using it to mean the technologies HTML, CSS and JavaScript.

22
00:02:06,730 --> 00:02:14,600
In addition to working on the iPad, these
technologies have a lot of benefits.

23
00:02:14,600 --> 00:02:19,140
For example, they're lightweight,
because they replace images and plug-ins.

24
00:02:19,140 --> 00:02:24,860
That means your site will be smaller, it
will load faster onto your user's browser,

25
00:02:24,860 --> 00:02:33,190
and especially for your mobile users, that means
they'll see less money on their monthly bill.

26
00:02:33,190 --> 00:02:41,070
They're also faster, because these technologies are built
into the browser, and therefore optimized by the browser.

27
00:02:41,070 --> 00:02:48,320
They're accessible, because all the text is searchable,
indexable by search engines, and readable by screen readers.

28
00:02:48,320 --> 00:02:52,940
And lastly, they intergrate well with older browsers.

29
00:02:52,940 --> 00:02:58,660
So to show you some of these advantages,
we've built a sample Web page,

30
00:02:58,660 --> 00:03:03,970
and I'd like to invite my colleague Mike Thole, who
is also an engineer on the Safari and WebKit team,

31
00:03:03,970 --> 00:03:06,510
to show you how we created this great page.

32
00:03:06,510 --> 00:03:09,170
[ Applause ]

33
00:03:09,170 --> 00:03:10,680
>> Thanks, Jing.

34
00:03:10,680 --> 00:03:15,540
So, like Jing said, we've created a demo site
to show off some of these great technologies.

35
00:03:15,540 --> 00:03:19,620
And we call it The CSS Site of Awesomeness.

36
00:03:19,620 --> 00:03:26,760
The name may be just a little bit over-the-top, but it does
a great job of showing off some of CSS's awesome powers.

37
00:03:26,760 --> 00:03:29,940
So when you look at this page, the
first thing that I want you to know is

38
00:03:29,940 --> 00:03:32,870
that there are absolutely no images used in this page.

39
00:03:32,870 --> 00:03:35,480
It's all just CSS styling.

40
00:03:35,480 --> 00:03:40,060
So let's take a look at a few of the elements,
starting with this red badge on the left.

41
00:03:40,060 --> 00:03:45,560
You'll notice it has a shadow, as well as a
reflection, and it gives it some visual depth.

42
00:03:45,560 --> 00:03:48,560
It actually looks like it's sitting on a plane.

43
00:03:48,560 --> 00:03:53,730
If we look at the sticky, we can see a
subtle light gradient on the bottom portion

44
00:03:53,730 --> 00:03:56,480
of the sticky, and a shadow underneath it.

45
00:03:56,480 --> 00:04:02,960
And we combine these effects to make it look like
the bottom width of the sticky is actually curled up.

46
00:04:02,960 --> 00:04:06,900
The sticky itself looks like it's stuck to the page.

47
00:04:06,900 --> 00:04:10,650
Even the paragraphs for the text
have some visual depth to them.

48
00:04:10,650 --> 00:04:14,660
They look like they're stamped into
the page, using this Inset Shadow.

49
00:04:14,660 --> 00:04:17,820
Next, let's look at the headline.

50
00:04:17,820 --> 00:04:19,680
The CSS Site of Awesomeness.

51
00:04:19,680 --> 00:04:26,200
You probably don't recognize this font, and that's because
it's not a standard font that is usually used on websites.

52
00:04:26,200 --> 00:04:32,020
It's not installed on most users' systems,
so you generally wouldn't be able to use it.

53
00:04:32,020 --> 00:04:36,780
Traditionally, if you wanted to be able to use
a custom font like this, to brand your site,

54
00:04:36,780 --> 00:04:41,170
or get just the look you wanted, you
would need to basically render your text

55
00:04:41,170 --> 00:04:45,400
into an image and then use that image on your page.

56
00:04:45,400 --> 00:04:50,070
Here, what we're using is a CSS font face,
which instructs the browser to go out,

57
00:04:50,070 --> 00:04:56,040
download the actual font, and use it to render this text.

58
00:04:56,040 --> 00:04:58,610
So next, let's look at these buttons.

59
00:04:58,610 --> 00:05:03,130
They have some nice, smooth interactions, where they
-- it's called the accordian effect,

60
00:05:03,130 --> 00:05:06,730
where the one we hover over is
expanded and the others contract.

61
00:05:06,730 --> 00:05:10,770
And we implemented a variety of
different submenu animations.

62
00:05:10,770 --> 00:05:16,070
Please don't make four different animations on your
own site; this is just for demonstrative purposes.

63
00:05:16,070 --> 00:05:17,420
[Laughter].

64
00:05:17,420 --> 00:05:19,120
I like that one; we'll see it again.

65
00:05:19,120 --> 00:05:22,170
It's called the zoom-down animation.

66
00:05:22,170 --> 00:05:25,470
So usually when you see these kinds of
smooth interactions, you think, Well,

67
00:05:25,470 --> 00:05:28,330
that's not HTML; that must be some sort of a plug-in.

68
00:05:28,330 --> 00:05:32,470
But with CSS transitions, you can
do this all in the browser.

69
00:05:32,470 --> 00:05:39,480
And another great thing about that -- it works
on the iPhone, the iPad, and on the desktop.

70
00:05:39,480 --> 00:05:45,370
So, as I mentioned at the beginning, this
site is all done with CSS -- no images.

71
00:05:45,370 --> 00:05:48,340
One advantage of that is that it
makes your site more accessible.

72
00:05:48,340 --> 00:05:52,720
I'm going to do a Find On Page for the word "awesome".

73
00:05:52,720 --> 00:05:57,530
If that headline were rendered as an
image, we wouldn't be able to find that.

74
00:05:57,530 --> 00:06:02,680
I'm also going to look for the word "Javascript",
or "avascript" since I'm missing my "J",

75
00:06:02,680 --> 00:06:06,140
and you'll see that it finds it
even in that graphical red badge.

76
00:06:06,140 --> 00:06:08,930
This isn't just useful for Find On Page.

77
00:06:08,930 --> 00:06:16,560
It's also useful for search engines that are indexing
your site, and for Voiceover, which is a screen reader,

78
00:06:16,560 --> 00:06:22,040
or any screen reader, to make your site
more accessible for the visually-impaired.

79
00:06:22,040 --> 00:06:26,890
And finally, another advantage of using these
technologies is that it makes your site more lightweight.

80
00:06:26,890 --> 00:06:31,110
So I just opened up the Web Inspector, which
is a built-in developer tool in Safari,

81
00:06:31,110 --> 00:06:36,850
and you can see all the resources
that we used to create this page.

82
00:06:36,850 --> 00:06:41,010
You can see I have an index page,
the HTML, a little bit of JavaScript,

83
00:06:41,010 --> 00:06:46,050
a couple of CSS files, and then the Lobster Web font.

84
00:06:46,050 --> 00:06:49,670
Everything all together comes in a little over 70 kilobytes.

85
00:06:49,670 --> 00:06:51,950
The vast majority of that is actually the Web font.

86
00:06:51,950 --> 00:06:57,270
So without the Web font this would be
like 15 kilobytes, which is really small.

87
00:06:57,270 --> 00:07:00,680
If you took the more traditional approach of
cutting up your images into a bunch of pieces

88
00:07:00,680 --> 00:07:09,320
and using that to render your page, which we did, it took 28
different images and weighed about 190 kilobytes at the end.

89
00:07:09,320 --> 00:07:16,610
So this is less than half the amount of bandwidth necessary
to give this page, which is really important especially

90
00:07:16,610 --> 00:07:22,190
on a 3G connection, where those 100
kilobytes could be several seconds.

91
00:07:22,190 --> 00:07:29,510
And with that, I'll turn it back over to Jing, and she'll
show you how to use these technologies on your own sites.

92
00:07:29,510 --> 00:07:35,040
[ Applause ]

93
00:07:35,040 --> 00:07:36,300
>> Thanks, Mike.

94
00:07:36,300 --> 00:07:44,760
So Mike just showed you this really pretty page
we've implemented with just HTML, CSS and JavaScript.

95
00:07:44,760 --> 00:07:50,290
And in today's session, I will show
you how to do three different things.

96
00:07:50,290 --> 00:07:55,660
First, I'll show you how you can create
some of these rich visual effects you see

97
00:07:55,660 --> 00:08:00,330
on this page for your site, without using any images.

98
00:08:00,330 --> 00:08:06,870
Then, I'll be talking about giving you some
tips and tricks you can use to make the text

99
00:08:06,870 --> 00:08:10,760
on your site searchable, accessible,
and easily maintainable.

100
00:08:10,760 --> 00:08:17,850
And lastly, I will show you how to create
those animations you just saw in the menus.

101
00:08:17,850 --> 00:08:22,500
So first, let's look at what types
of visual effects are on this page.

102
00:08:22,500 --> 00:08:31,120
For example, there's this effect on these paragraphs, where
the paragraphs look like they're stamped into the page.

103
00:08:31,120 --> 00:08:39,920
And there's also the gradient, the shine
on the top navigational menu buttons,

104
00:08:39,920 --> 00:08:42,430
something that you've probably seen around the Web.

105
00:08:42,430 --> 00:08:48,080
And then here's this really graphically-rich
badge that's really eye-catching.

106
00:08:48,080 --> 00:08:56,060
So I'll show you how to do each of those things.

107
00:08:56,060 --> 00:09:02,740
So perhaps you've tried to create this paragraph style
before, and if you tried to create this with images,

108
00:09:02,740 --> 00:09:07,320
you probably know that you need a total of
nine different images to create such an effect.

109
00:09:07,320 --> 00:09:11,990
And after you upload those images, you still
have to position them correctly in your page,

110
00:09:11,990 --> 00:09:15,880
and it's just really a pain to implement and to maintain.

111
00:09:15,880 --> 00:09:21,520
So, with CSS, you can do this exact
effect with only two lines of code.

112
00:09:21,520 --> 00:09:31,170
So with the first line of code, all you need to do is use
the Border Radius property to add the rounded corners.

113
00:09:31,170 --> 00:09:38,320
And this gives you the same rounded
corners on all four corners.

114
00:09:38,320 --> 00:09:45,790
So if you wanted different types of corners on each
side, you could also specify a different radius

115
00:09:45,790 --> 00:09:49,750
on each different corner, giving
you some kind of really funky shape.

116
00:09:49,750 --> 00:09:53,840
Even cooler than that is that you
can specify a different horizontal

117
00:09:53,840 --> 00:10:00,240
and vertical radii to make some kind of leaflet page look.

118
00:10:00,240 --> 00:10:04,170
So this is really, really useful.

119
00:10:04,170 --> 00:10:11,170
You can use this to create something similar to
the sticky effect that we've created on our site.

120
00:10:11,170 --> 00:10:14,660
All right, but let's go back to the
basics, just having the round corners.

121
00:10:14,660 --> 00:10:17,990
Now, the next thing you need to do is add the shadow on.

122
00:10:17,990 --> 00:10:20,440
And you can use the Box Shadow property.

123
00:10:20,440 --> 00:10:25,570
You may know this, but here the
Box Shadow has a -webkit prefix.

124
00:10:25,570 --> 00:10:31,710
I will explain why it has a prefix later, but all you need
to know now is, you can start using this property now,

125
00:10:31,710 --> 00:10:34,750
and it will work on all current
and future versions of Safari.

126
00:10:34,750 --> 00:10:44,670
So, to add the box shadow, just specify the style,
which means you want a shadow on the inside; the color,

127
00:10:44,670 --> 00:10:50,830
the horizontal offset, the vertical
offset and the blur radius.

128
00:10:50,830 --> 00:10:58,410
And this gives you a shadow, when put on top of a
lighter background image, you get this inset look.

129
00:10:58,410 --> 00:11:04,140
So say if you wanted your paragraph to jump out
from the page, instead of set into the page.

130
00:11:04,140 --> 00:11:07,490
You can still use the Box Shadow
property without the Inset style.

131
00:11:07,490 --> 00:11:11,440
And that will help you create a drop shadow.

132
00:11:11,440 --> 00:11:20,390
So with only two lines of CSS code, you can
create this awesome inset paragraph effect.

133
00:11:20,390 --> 00:11:25,090
Now, let's take a look at an effect that you
might have seen somewhere on the Internet,

134
00:11:25,090 --> 00:11:32,130
where navigational menu buttons look like they're
shiny because they have this glossy sheen to them.

135
00:11:32,130 --> 00:11:38,360
And you might have seen how they were made.

136
00:11:38,360 --> 00:11:44,000
Usually they're made with a different background
color and a semi-transparent image on top.

137
00:11:44,000 --> 00:11:47,650
And together, they make this nice gradient.

138
00:11:47,650 --> 00:11:53,750
So you can get rid of that image by
replacing it with a WebKit gradient.

139
00:11:53,750 --> 00:11:56,370
And it's very easy to do.

140
00:11:56,370 --> 00:12:02,000
Just specify the type of gradient, the starting and ending
points of the gradient, and the starting and ending colors.

141
00:12:02,000 --> 00:12:09,120
So this creates a smooth gradient, which, if you're
looking for the sheen look, is probably not enough.

142
00:12:09,120 --> 00:12:15,770
So to add that sharpness to it, you can use a
color stop between the front and ending colors.

143
00:12:15,770 --> 00:12:21,940
So color stop, you specify where you want it
to be and what color should be at that point.

144
00:12:21,940 --> 00:12:25,720
So adding a few color stops, you
can create this sharp sheen, which,

145
00:12:25,720 --> 00:12:29,020
applied to the background color,
looks like the button you want.

146
00:12:29,020 --> 00:12:33,570
And you can just replace that background
image with this code.

147
00:12:33,570 --> 00:12:40,930
And in fact, CSS gradients can replace
any images you're using in the CSS styles.

148
00:12:40,930 --> 00:12:48,380
So, you may be thinking that if you already had
this made as an image, it's not really worth it

149
00:12:48,380 --> 00:12:51,480
to learn the actual line of code
and to have to change all of it.

150
00:12:51,480 --> 00:12:55,770
But CSS gradients can do some things
that bitmap images can't.

151
00:12:55,770 --> 00:13:03,270
For example, if you had a diagonal image, and you
wanted to scale your element up really, really big,

152
00:13:03,270 --> 00:13:07,110
if you're using CSS gradients, you're
preserving the quality of the gradient.

153
00:13:07,110 --> 00:13:13,620
You still get that sharp line, which you
can't reasonably do with bitmap images.

154
00:13:14,730 --> 00:13:25,070
So, with just that one line of gradient,
you've created an image for your glossy button.

155
00:13:25,070 --> 00:13:27,320
Now let's look at this shiny badge.

156
00:13:27,320 --> 00:13:34,130
This badge is really useful for calling out important
things on your site, because it's very eye-catching.

157
00:13:34,130 --> 00:13:43,180
It's very visually pleasing, and it's really useful for,
say, highlighting a new feature or something like that.

158
00:13:43,180 --> 00:13:48,040
So I'll show you how you can have
a similar badge on your page.

159
00:13:48,040 --> 00:13:50,860
So for this badge, there are several different effects.

160
00:13:50,860 --> 00:13:59,620
There is a gradient that comes down from the top, there's
this embossed border looking thing around the badge,

161
00:13:59,620 --> 00:14:08,020
and there's a reflection and a shadow, which together
make the badge look like it's sitting on the flat plane.

162
00:14:08,020 --> 00:14:11,220
So I'll show you how to do each
of those four things in turn.

163
00:14:11,220 --> 00:14:17,090
But first, if you're wondering
how did I get the round thing,

164
00:14:17,090 --> 00:14:20,480
this is just applying a border radius to a square element.

165
00:14:20,480 --> 00:14:27,250
That's the easiest way you can make a round element in HTML.

166
00:14:27,250 --> 00:14:30,750
Now, let's look at the shine.

167
00:14:30,750 --> 00:14:37,520
You're only seeing part of the effect here, because the
rest of it is being clipped by the borders of the element.

168
00:14:37,520 --> 00:14:42,880
So if you want to see the whole
thing, it actually looks like that.

169
00:14:42,880 --> 00:14:47,580
And this can be created using a CSS radial gradient.

170
00:14:47,580 --> 00:14:55,230
And it's similar to a linear gradient, so you specify
the type first, then you specify the starting circle

171
00:14:55,230 --> 00:15:00,330
for your colors, and then you specify
the ending circle for your colors.

172
00:15:00,330 --> 00:15:07,040
And just like linear gradients, you
specify the starting and ending colors.

173
00:15:07,040 --> 00:15:14,700
And all of this is being clipped by the borders
of your element, creating a nice smooth gradient.

174
00:15:14,700 --> 00:15:21,900
So to create that shine look, we'll do the same thing we
did with the linear gradient, by adding some color stops.

175
00:15:21,900 --> 00:15:28,250
And to make it off to one side, just adjust the radius
a little bit and move the centers of the gradient off

176
00:15:28,250 --> 00:15:36,330
to the bottom right, so that you can only see the top
left, giving you this very nice-looking shine effect.

177
00:15:36,330 --> 00:15:40,170
So, radial gradients are great
for creating a shine like this,

178
00:15:40,170 --> 00:15:45,530
but they're also great for creating
dynamic borders on your round elements.

179
00:15:45,530 --> 00:15:52,080
For example, this embossed border is actually a
second radio gradient applied to your elements.

180
00:15:52,080 --> 00:15:57,450
And you can do this by just comma-separating your
radial gradients inside the background image.

181
00:15:58,500 --> 00:16:00,730
Okay, so let's see what you've learned.

182
00:16:00,730 --> 00:16:06,700
I've shown you how to create that shine
and that border on your round elements.

183
00:16:06,700 --> 00:16:12,660
So just with those two, you already have a very
eye-catching, non-standard element on your page.

184
00:16:12,660 --> 00:16:17,930
To go a step further, you can create
some feel of three-dimensionality

185
00:16:17,930 --> 00:16:23,760
by using the addition of a reflection and the bottom shadow.

186
00:16:23,760 --> 00:16:28,090
So let's look at the reflection first.

187
00:16:28,090 --> 00:16:32,460
Using the Box Reflect property, you can
specify where you want your reflection to be,

188
00:16:32,460 --> 00:16:36,130
how far it is from your element, and the mask for it.

189
00:16:36,130 --> 00:16:41,240
The easiest thing to do is to make a white mask, and
that just shows you a completely opaque reflection,

190
00:16:41,240 --> 00:16:43,010
which doesn't really look like a reflection.

191
00:16:43,010 --> 00:16:45,980
So, to make it look realistic,
you need something that fades out.

192
00:16:45,980 --> 00:16:54,220
So you could use an image that has a color that slowly
fades from black to gray, but as I mentioned before,

193
00:16:54,220 --> 00:16:57,910
you can use CSS gradients anywhere you use images.

194
00:16:57,910 --> 00:17:04,210
So instead of embedding another image,
let's just use a CSS gradient for this.

195
00:17:04,210 --> 00:17:10,340
And that gives you the desired reflection look.

196
00:17:10,340 --> 00:17:16,020
So the last thing you need to make this badge look
like it's standing on the floor is the shadow.

197
00:17:16,020 --> 00:17:22,530
And since you want the shadow to be a different shape than
your badge element, the easiest thing to do is probably

198
00:17:22,530 --> 00:17:26,750
to just create another element using
the CSS after pseudo-element.

199
00:17:26,750 --> 00:17:34,210
And to make it look like a shadow, just
give it a black to transparent gradient.

200
00:17:34,210 --> 00:17:38,970
Now, now that we want to squish
this, the way we would do this

201
00:17:38,970 --> 00:17:43,160
in an image editing program is
to just drag the top knob down.

202
00:17:43,160 --> 00:17:49,080
Well, you can do this kind of transforms
also in CSS, using the Transform property.

203
00:17:49,080 --> 00:17:54,760
So, there's four different things
you can do with Transforms.

204
00:17:54,760 --> 00:18:06,130
You can rotate your elements, you can skew the elements and
slant them, you can make your elements bigger or smaller,

205
00:18:06,130 --> 00:18:13,980
also only bigger in one dimension, and
you can also move your elements around.

206
00:18:13,980 --> 00:18:22,440
And this is really convenient because Transforms
don't change the layout of anything else on the page.

207
00:18:22,440 --> 00:18:27,960
So going back to the shadow, all we need is
a scale y to make the shadow really short.

208
00:18:27,960 --> 00:18:32,290
And that looks like the shadow we want,
but that's probably not what you want.

209
00:18:32,290 --> 00:18:35,540
Because it's right behind your badge.

210
00:18:35,540 --> 00:18:40,890
So to make it below your badge, just
give it a transform origin of Bottom.

211
00:18:40,890 --> 00:18:51,510
And there you have this nice, shiny badge that
looks like it's standing on the flat plane.

212
00:18:51,510 --> 00:19:02,040
[ Applause ]

213
00:19:02,040 --> 00:19:06,170
So I've shown you how you can use some CSS
effects to create some very graphical looks.

214
00:19:06,170 --> 00:19:11,750
And actually, the things I've shown you are
the only CSS properties you need to create all

215
00:19:11,750 --> 00:19:14,790
of the graphical effects you see on this page.

216
00:19:14,790 --> 00:19:16,740
We did a little experiment.

217
00:19:16,740 --> 00:19:21,540
How much more efficient is this, compared to using images?

218
00:19:21,540 --> 00:19:30,890
We built this exact same design using images and we
ended up with a total of 28 images and 190 kilobytes.

219
00:19:30,890 --> 00:19:34,060
That's a lot of images to be managing.

220
00:19:34,060 --> 00:19:40,770
So by using CSS, we've reduced the size
of the page to zero images and half --

221
00:19:40,770 --> 00:19:45,130
less than half of the size of what it had before.

222
00:19:45,130 --> 00:19:49,300
And this was a really simple site
that only had a few visual effects.

223
00:19:49,300 --> 00:19:54,230
So imagine what you could do with your site.

224
00:19:54,230 --> 00:20:02,180
Okay, so I've shown you how to create some rich visuals, and
eliminate some unnecessary images, making your site faster.

225
00:20:02,180 --> 00:20:08,570
Now, let's talk about how you can make some
nice-looking text that's also maintainable.

226
00:20:08,570 --> 00:20:21,320
So, as you can see, for the title of my page,
I'm using a custom font, and also a glow effect.

227
00:20:21,320 --> 00:20:26,510
And if you were doing this with images,
you'd have a couple of challenges.

228
00:20:26,510 --> 00:20:32,240
And one is that this font can only be used for
static text; it can't be used for body text,

229
00:20:32,240 --> 00:20:36,160
or anything that is changing or is duplicated.

230
00:20:36,160 --> 00:20:40,850
And you know, if you wanted to change, if you found
a spelling mistake and you wanted to change it,

231
00:20:40,850 --> 00:20:44,930
then you would have to re-render
the image and upload it again.

232
00:20:44,930 --> 00:20:48,900
And this is a problem that a lot of designers face today.

233
00:20:48,900 --> 00:20:52,940
It is how can you get pretty-looking fonts on your page,

234
00:20:52,940 --> 00:20:58,650
when there are only about a dozen
common fonts between Windows and Mac?

235
00:20:58,650 --> 00:21:06,940
So the great thing about CSS is that you
can embed a custom font into your page.

236
00:21:06,940 --> 00:21:10,960
So I had this font file, and before you
embed, you should check to make sure

237
00:21:10,960 --> 00:21:12,790
that you have the rights to embed your file.

238
00:21:12,790 --> 00:21:15,400
So I had this Lobster Font file
that I have the rights to embed.

239
00:21:15,400 --> 00:21:23,870
And all you have to do is specify the font face rule
with the font family and the URL to that font file.

240
00:21:23,870 --> 00:21:30,770
And using this font will be exactly the same
as using any other font that you've been using,

241
00:21:30,770 --> 00:21:44,110
and this gives you a custom font that's still text,
still easily editable, searchable and accessible.

242
00:21:44,110 --> 00:21:49,830
Just one more small thing to really make your
text stand out and give a really subtle glow:

243
00:21:49,830 --> 00:21:53,040
glows are done with the same thing
as shadows, using Text Shadow.

244
00:21:53,040 --> 00:22:01,290
So you just use the Text Shadow property with a
white color and no offset, and that's your glow.

245
00:22:04,360 --> 00:22:08,600
So in addition to being able to create shadows
and glows with the Text Shadow property,

246
00:22:08,600 --> 00:22:11,900
you can also create another, different effect for your text.

247
00:22:11,900 --> 00:22:18,140
Here in this badge, you see that the text
looks like it's engraved into the badge,

248
00:22:18,140 --> 00:22:23,420
and that's just using a text shadow
that's offset to the left and top.

249
00:22:23,420 --> 00:22:28,170
It's that easy.

250
00:22:28,170 --> 00:22:40,070
So those are just some tips to get your text working
well, accessible, searchable, and easily editable.

251
00:22:40,070 --> 00:22:42,020
Now let's talk about animations.

252
00:22:42,020 --> 00:22:48,190
I said it earlier in the presentation: nowadays
you really need animations to draw in your users.

253
00:22:48,190 --> 00:22:54,480
And so far, you've done so much work making a great
site that goes fast, that has accessible text,

254
00:22:54,480 --> 00:22:58,170
so you just need to add that final
polish and really engage your users

255
00:22:58,170 --> 00:23:01,760
with animations when they're interacting with your site.

256
00:23:01,760 --> 00:23:07,730
And we showed you four different
effects we made with animations.

257
00:23:07,730 --> 00:23:14,850
There's the menu that fades in, there's the
drop-down menu, there's one that comes in one

258
00:23:14,850 --> 00:23:17,230
after another, and there's another one that goes "Bam!"

259
00:23:17,230 --> 00:23:17,870
or something.

260
00:23:17,870 --> 00:23:24,280
So I'll show you -- Mike and I, actually,
together, will show you how to do some of these.

261
00:23:24,280 --> 00:23:26,880
And they're really, really easy.

262
00:23:26,880 --> 00:23:29,780
So first, let me explain how this is done.

263
00:23:29,780 --> 00:23:32,980
All of these are done with the CSS Transition property.

264
00:23:32,980 --> 00:23:46,650
And the Transition is something that makes an instantaneous
state change into one that can happen over a period of time.

265
00:23:46,650 --> 00:23:56,180
So let's look at this fading menu in slow motion
to see what type of effect you can create.

266
00:23:56,180 --> 00:23:59,460
So the menu is waiting for a button
to expand fully and fading in.

267
00:23:59,460 --> 00:24:05,180
And when the user hovers out of the
menu, it disappears immediately.

268
00:24:05,180 --> 00:24:16,360
So, to create this effect, the first thing you need to do is
to define the starting and ending states for your animation.

269
00:24:16,360 --> 00:24:21,970
And for a menu like this, your starting
state would be the Mouse Out state,

270
00:24:21,970 --> 00:24:25,720
and the ending state would be the Hover state.

271
00:24:25,720 --> 00:24:29,020
So on the starting state, you want
your menu to be transparent,

272
00:24:29,020 --> 00:24:31,710
and on your ending state, you want
it to be completely opaque.

273
00:24:31,710 --> 00:24:39,110
Now, to transition between the two, all you need is
the Transition property with the CSS property you want

274
00:24:39,110 --> 00:24:44,440
to transition, and the duration for which you transition it.

275
00:24:44,440 --> 00:24:47,480
And this is a shorthand way for
writing these two properties.

276
00:24:47,480 --> 00:24:52,900
If you wanted to write them out separately, you
can also use the Transition Property property,

277
00:24:52,900 --> 00:24:55,760
and the Transition Duration property.

278
00:24:55,760 --> 00:24:59,660
So let's take a look at what this code does.

279
00:25:02,090 --> 00:25:04,970
So it looks like the menu is fading in.

280
00:25:04,970 --> 00:25:08,560
But it's not waiting for the button to expand fully.

281
00:25:08,560 --> 00:25:17,360
So to chain your animations together, to make them wait
for one another, you can use the Transition Delay property.

282
00:25:17,360 --> 00:25:26,060
And here I know that button expands for a
quarter-second, so I'll just add Delay of a quarter-second.

283
00:25:26,060 --> 00:25:33,890
So now, what will happen is, when the user mouses into
your button, your button would wait a quarter-second,

284
00:25:33,890 --> 00:25:38,350
and then become opaque over a period of a quarter-second.

285
00:25:38,350 --> 00:25:42,980
When the user mouses out of your button,
it will do exactly the same thing,

286
00:25:42,980 --> 00:25:46,480
because you're applying the same cell to both states.

287
00:25:46,480 --> 00:25:52,710
So if you want a different animation on Mouse Out,
you know, Mouse In, you can separate the animation.

288
00:25:52,710 --> 00:25:59,220
So for example here, I want no animation on Mouse Out
So what I would do is to take the Transition Duration

289
00:25:59,220 --> 00:26:02,800
and Delay and put it in the Active state.

290
00:26:02,800 --> 00:26:09,230
That means when you're going from the Inactive
state to the Active state, the transitions defined

291
00:26:09,230 --> 00:26:15,280
in the Active state will be used, and when you're
going from the Active state to the Inactive state,

292
00:26:15,280 --> 00:26:23,130
the transitions defined in the Inactive
state, in this case nothing, will be used.

293
00:26:23,130 --> 00:26:27,010
So that's all you need to create this fade-in menu.

294
00:26:27,010 --> 00:26:30,920
Now let's look at something that's
a completely different effect.

295
00:26:30,920 --> 00:26:32,450
This drop-down menu.

296
00:26:32,450 --> 00:26:41,060
And let's look at it again in slow
motion to see what it does.

297
00:26:41,060 --> 00:26:44,320
So it looks like the button is getting
bigger, the same as the Fade In menu,

298
00:26:44,320 --> 00:26:48,250
and then your menu items slowly get taller.

299
00:26:48,250 --> 00:26:54,660
And the easiest way to do this is probably
to just change the height of the entire menu.

300
00:26:54,660 --> 00:26:58,190
And if you already have your fade-in
menu, there's very little you need

301
00:26:58,190 --> 00:27:01,380
to change to get this completely different effect.

302
00:27:01,380 --> 00:27:06,880
Just change the Opacities to webpage
Transforms, and the Transition Property --

303
00:27:06,880 --> 00:27:09,170
change the Transition property to the Transforms.

304
00:27:09,170 --> 00:27:13,480
So you're transforming from a height
of 0 to a normal height.

305
00:27:13,480 --> 00:27:22,560
And that's just two and a half lines of changing code,
and you end up with a completely different menu effect.

306
00:27:22,560 --> 00:27:28,750
So CSS transitions are a great way to
use, to prototype and to experiment

307
00:27:28,750 --> 00:27:33,170
with what types of effects you can have on your page.

308
00:27:33,170 --> 00:27:35,240
Now, I want to show you the last two effects.

309
00:27:35,240 --> 00:27:38,050
Those are really cool because they're coming individually.

310
00:27:38,050 --> 00:27:44,510
But you're probably tired of hearing me talk, so I'm going
to invite Mike back on stage to show you these things.

311
00:27:44,510 --> 00:27:52,070
[ Applause ]

312
00:27:52,070 --> 00:27:53,390
>> Thanks, Jing.

313
00:27:53,390 --> 00:27:58,800
So like Jing said, I'm going to work you through
implementing the third and fourth transitions.

314
00:27:58,800 --> 00:28:01,240
Here I have the demo site.

315
00:28:01,240 --> 00:28:03,430
We learned how to make these two,
and now I'm going to show you how

316
00:28:03,430 --> 00:28:06,910
to make the Blinds transition Let's
look at that one more time.

317
00:28:06,910 --> 00:28:11,640
Do you see how each item comes in slightly after
the previous animation begins, so it's one,

318
00:28:11,640 --> 00:28:14,210
two, three, four, rather than all at once?

319
00:28:14,210 --> 00:28:18,820
And we have the same kind of effect here, except
that they're zooming in, one, two, three, four.

320
00:28:18,820 --> 00:28:25,430
So we have a second demo site, which looks
exactly the same, except for these third

321
00:28:25,430 --> 00:28:27,880
and fourth buttons aren't yet implemented.

322
00:28:27,880 --> 00:28:31,740
You can see, it just comes in instantly
when I hover in this area.

323
00:28:31,740 --> 00:28:33,820
So let's open the site up in TextMate.

324
00:28:33,820 --> 00:28:48,730
So I've separated out the CSS for the transitions into this
pretty small file, to make things a little easier to follow.

325
00:28:48,730 --> 00:28:54,310
And I've got two selectors here, for the Blinds transition.

326
00:28:54,310 --> 00:29:00,950
First here is the starting state, the standard
state when the button is not hovered over.

327
00:29:00,950 --> 00:29:05,350
And we're selecting each list item of the Blinds submenu.

328
00:29:05,350 --> 00:29:10,660
And what we do to it is, we set Opacity to zero,
its Height to zero, and we modify the Padding

329
00:29:10,660 --> 00:29:13,360
and Margins so its vertical dimension is zero.

330
00:29:13,360 --> 00:29:17,750
This basically compresses each
individual list item to a height of zero,

331
00:29:17,750 --> 00:29:24,520
which will move it up directly underneath
the button and make it invisible.

332
00:29:24,520 --> 00:29:30,480
For the destination state, when we hover over it,
we want to of course restore the Opacity to 1,

333
00:29:30,480 --> 00:29:34,800
and we want to restore the Height, Padding
and Margin back to its default value.

334
00:29:34,800 --> 00:29:36,660
That's what we see today when we hover over this.

335
00:29:36,660 --> 00:29:37,560
The menu looks right.

336
00:29:37,560 --> 00:29:40,010
There just isn't a transition.

337
00:29:40,010 --> 00:29:50,220
So, in a very small amount of code, I'm going to follow my
nice to-do here, and add the WebKit transition property.

338
00:29:50,220 --> 00:29:55,770
What we want to transition is the
Opacity, Height, Padding and Margin,

339
00:29:55,770 --> 00:29:58,380
and we're going to set a Transition
Duration of a quarter-second.

340
00:29:58,380 --> 00:30:04,710
Just like we did for the other menu items, and we'll use a
delay of a quarter-second, again, just like the other items.

341
00:30:04,710 --> 00:30:08,880
So I'm going to save, go back to
the demo, and now when I mouse in,

342
00:30:08,880 --> 00:30:12,340
you'll see we get a Blinds effect,
but it's not exactly what we want yet.

343
00:30:12,340 --> 00:30:13,920
They're all coming in at once.

344
00:30:13,920 --> 00:30:16,220
We want them to come in one, two, three, four.

345
00:30:16,220 --> 00:30:21,600
So to do that, what we really want to
do is for each individual list item,

346
00:30:21,600 --> 00:30:25,230
to give it a different transition delay property.

347
00:30:25,230 --> 00:30:28,860
So that each one is slightly longer than the one before it.

348
00:30:28,860 --> 00:30:34,270
Now, we could do that manually, but I think it would be
a little bit cleaner to use some JavaScript to do that.

349
00:30:34,270 --> 00:30:41,320
So I have a JavaScript file here, and I already have a
function stubbed out called SetIncreasingTransitionDelay.

350
00:30:41,320 --> 00:30:46,510
It takes a container element, which is going to be
the container of the list items, the initial delay,

351
00:30:46,510 --> 00:30:53,120
and the delay increment, which is going to be how much
time we want to pause between one, two, three, four.

352
00:30:53,120 --> 00:30:56,780
So let's implement this stub function.

353
00:30:56,780 --> 00:31:02,900
I will cheat to avoid typos.

354
00:31:02,900 --> 00:31:09,710
So, all we're doing is getting an array of
the children, writing a varisome For loop.

355
00:31:09,710 --> 00:31:13,570
For each child, it's going to set
the transition delay property

356
00:31:13,570 --> 00:31:20,720
to be the initial delay plus the delay increment
times the iterator, and we're going to append S

357
00:31:20,720 --> 00:31:23,200
because the units we're using here are seconds.

358
00:31:23,200 --> 00:31:25,950
So that looks good.

359
00:31:25,950 --> 00:31:29,350
But of course we need to actually call that somewhere.

360
00:31:29,350 --> 00:31:33,720
So I've already got this in a thing called
Load, which is called when the page loads.

361
00:31:33,720 --> 00:31:40,730
And inside of it, I'm going to get the Blinds
submenu, just using Document.GetElementByID.

362
00:31:40,730 --> 00:31:47,480
And we're going to call the SetIncreasingTransitionDelay
helper function on it, passing in the Blinds submenu,

363
00:31:47,480 --> 00:31:52,840
and we're going to use a quarter-second initial
delay, and a .15 second delay increment.

364
00:31:52,840 --> 00:31:58,760
So it's just that little bit of JavaScript,
which is just setting up the CSS property.

365
00:31:58,760 --> 00:32:02,070
It's not actually doing anything at animation time.

366
00:32:02,070 --> 00:32:05,970
We can go back here, and there we go.

367
00:32:05,970 --> 00:32:07,510
One, two, three, four.

368
00:32:07,510 --> 00:32:14,120
[ Applause ]

369
00:32:14,120 --> 00:32:17,540
And we're going to do this fourth button as well,
and we're going to go back to the completed site

370
00:32:17,540 --> 00:32:19,510
to remind you of what it should look like.

371
00:32:19,510 --> 00:32:22,490
And because I love seeing it.

372
00:32:22,490 --> 00:32:25,850
So notice that when it starts out, the items are very large.

373
00:32:25,850 --> 00:32:29,930
And then they get smaller, and zoom into place.

374
00:32:29,930 --> 00:32:36,070
So what we're going to want to do is go back to
our Transition CSS, go down to the Zoom area.

375
00:32:36,070 --> 00:32:43,050
I have these same two selectors, one for the
Unselected state and one for the Selected state.

376
00:32:43,050 --> 00:32:49,040
And right now, I'm transitioning the
Opacity from 0 to 1, but it's instantaneous.

377
00:32:49,040 --> 00:32:51,650
There's not yet a transition here.

378
00:32:51,650 --> 00:32:55,380
So the first thing we need to do
is to make our items very large.

379
00:32:55,380 --> 00:33:01,440
And we're going to use a Transform property to do that,

380
00:33:01,440 --> 00:33:03,880
and we're going to make it five
times as large in both directions.

381
00:33:03,880 --> 00:33:06,980
So that's the Transform property, where we scale 5 by 5.

382
00:33:06,980 --> 00:33:13,140
I'm also going to make the Transform Origin be the top
center, so that they all align underneath the button.

383
00:33:13,140 --> 00:33:19,620
So if we just do this, we'll get
something pretty ridiculous looking.

384
00:33:19,620 --> 00:33:21,190
Whoops, wrong one.

385
00:33:21,190 --> 00:33:25,150
We'll get something pretty ridiculous looking.

386
00:33:25,150 --> 00:33:30,600
That's actually what we want as a starting
state, obviously not as an ending state.

387
00:33:33,350 --> 00:33:41,120
So let's modify the Destination CSS and
reset this Transform back to a scale of 1 1.

388
00:33:41,120 --> 00:33:45,440
So now, when we hover over it, we'll
just see this standard, boring menu.

389
00:33:45,440 --> 00:33:50,390
That's because we haven't yet implemented
the transition to make the state change,

390
00:33:50,390 --> 00:33:53,290
transition nicely, rather than be atomic.

391
00:33:53,290 --> 00:33:59,930
So that's very easy to do, as you've already seen,
and we're just going to add the Transition property,

392
00:33:59,930 --> 00:34:08,040
this time with the WebKit Transform and Opacity as its
value, and again with a duration of a quarter-second.

393
00:34:08,040 --> 00:34:12,760
So with that change, we now have all
of the items zooming down at once,

394
00:34:12,760 --> 00:34:16,290
which is pretty neat, but that's
still not the effect we want.

395
00:34:16,290 --> 00:34:18,090
And I bet you can guess what we're going to do now.

396
00:34:18,090 --> 00:34:28,530
We just need to use our Helper function again, and
set up a delay for each of those different list items.

397
00:34:28,530 --> 00:34:32,730
So we get the Zoom-down submenu,
just like we got the Blinds submenu.

398
00:34:32,730 --> 00:34:37,930
We call our helper function, use the same
quarter-second initial delay where we're going

399
00:34:37,930 --> 00:34:40,960
to make the delay increment a little bit smaller,

400
00:34:40,960 --> 00:34:46,470
because for this particular effect I just think
it looks a little bit better if it's pretty fast.

401
00:34:46,470 --> 00:34:51,510
So with that change, I'll reload, and there we go!

402
00:34:51,510 --> 00:34:58,040
[ Applause ]

403
00:34:58,040 --> 00:35:02,030
So you saw how we got four different effects
with just the few lines of CSS, and it was all,

404
00:35:02,030 --> 00:35:05,290
I think, pretty simple to understand and explain.

405
00:35:05,290 --> 00:35:09,010
So with that, I'll turn it back over to Jing.

406
00:35:09,010 --> 00:35:09,460
[ Applause ]

407
00:35:09,460 --> 00:35:10,290
>> Thanks, Mike.

408
00:35:10,290 --> 00:35:15,080
That was awesome, wasn't it?

409
00:35:15,080 --> 00:35:18,270
I hit the slide.

410
00:35:18,270 --> 00:35:22,200
So, Mike just showed you how to
create some really cool transitions,

411
00:35:22,200 --> 00:35:28,230
and you saw that there really wasn't a
lot of code involved, and this is great.

412
00:35:28,230 --> 00:35:33,360
Okay. So I'm going to go back to something
I referred to earlier in the presentation.

413
00:35:33,360 --> 00:35:39,730
I told you that I will talk about why some
of these properties have the -webkit prefix.

414
00:35:39,730 --> 00:35:47,780
And that's because CSS properties take a very long time to
finalize, and during revisions, their syntax can change,

415
00:35:47,780 --> 00:35:52,600
and different properties, and different
parameters could change meanings.

416
00:35:52,600 --> 00:35:57,670
And as Web developers, you don't want your
site to break if you're using these properties.

417
00:35:57,670 --> 00:36:01,970
So that's why browsers have browser-specific prefixes.

418
00:36:01,970 --> 00:36:05,900
This differentiates them from the finalized CSS syntax,

419
00:36:05,900 --> 00:36:11,740
so you can start implementing using these
properties now, and have them work in the future.

420
00:36:14,170 --> 00:36:22,390
All right, so we've bombarded you with a lot of information,
and just as a summary, if you learned nothing else,

421
00:36:22,390 --> 00:36:27,410
remember that you can create a lot
of rich visuals with CSS properties.

422
00:36:27,410 --> 00:36:33,210
You don't -- for all the things that you think
you might need images for, you actually don't.

423
00:36:33,210 --> 00:36:40,890
You can also make your text more searchable, more accessible
to screen readers, better indexed by search engines,

424
00:36:40,890 --> 00:36:45,540
and more easily maintainable by using custom text effects.

425
00:36:45,540 --> 00:36:52,570
And you can really add polish to your site and
differentiate it from the millions of other sites out there

426
00:36:52,570 --> 00:36:58,460
by using these transitions when interacting with the user.

427
00:36:58,460 --> 00:37:01,760
So this is just a really small sample
of all the things you can do with CSS.

428
00:37:01,760 --> 00:37:09,670
And if you're interested in learning more, you should refer
to the CSS specifications that have all the properties,

429
00:37:09,670 --> 00:37:14,770
and if you're a Web designer, A List Apart, if you
haven't heard of it, is a really good resource site,

430
00:37:14,770 --> 00:37:20,310
talking about how to create great designs
on the Web with open Web technologies.

431
00:37:20,310 --> 00:37:29,360
And the Font Squirrel is also a really good resource
for finding fonts that you can embed into a Web page,

432
00:37:29,360 --> 00:37:31,340
and they even generate the embedding code for you.

433
00:37:31,340 --> 00:37:34,150
So all you do is click, copy, paste, and you're done.

434
00:37:34,150 --> 00:37:42,030
If you have questions for us, you can contact
our Safari technology evangelist, Vicki Murley.

435
00:37:42,030 --> 00:37:46,230
You should also check out the HTML5
demos if you haven't already done so,

436
00:37:46,230 --> 00:37:51,340
and obviously also go to the Safari
dev center and development forums

437
00:37:51,340 --> 00:37:54,330
to learn about all the features that we support.

438
00:37:56,890 --> 00:38:02,770
And we also have many sessions coming up
this week to help you build a great website.

439
00:38:02,770 --> 00:38:08,180
So right after this session in this same room is
CSS Effects Part 2, in which you will learn how

440
00:38:08,180 --> 00:38:16,350
to create amazing 3D transforms and keyframed
animations, things that you see a lot in photo galleries.

441
00:38:16,350 --> 00:38:22,740
If you're interested in how to really integrate your
website with the iPhone OS, you should attend the Touch

442
00:38:22,740 --> 00:38:26,880
and Gesture Detection that happens tomorrow afternoon.

443
00:38:26,880 --> 00:38:32,100
And we've shown you how you can inspect
how much space your Web page is taking

444
00:38:32,100 --> 00:38:34,790
and how fast it's loading using Web Inspector.

445
00:38:34,790 --> 00:38:40,800
And there's a session tomorrow morning here that
teaches you how you can really take advantage of it

446
00:38:40,800 --> 00:38:43,020
to more streamline your Web development process.

