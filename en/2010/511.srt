1
00:00:06,050 --> 00:00:09,830
>> Antoine Quint: I'm one of the software engineers
working on iAd JS and we're all part of the iOS Apps

2
00:00:09,830 --> 00:00:16,740
and Framework team and this is part 2 of our session
on creating content with iAd JS and we're going

3
00:00:16,740 --> 00:00:19,710
to focus only on the iAd JS Framework today.

4
00:00:19,710 --> 00:00:23,810
Dean did a very good job at covering how you
actually build ad content structure and all that.

5
00:00:23,810 --> 00:00:27,530
We're really refocusing on the
development and technologies here.

6
00:00:27,530 --> 00:00:29,200
So there are 4 things we're going to talk about.

7
00:00:29,200 --> 00:00:35,330
First, I want to share a little bit, what our motivations
and objectives were when we're building iAd JS.

8
00:00:35,330 --> 00:00:43,990
Then we'll discuss some of the few JavaScript
enhancements we made for core programming features.

9
00:00:43,990 --> 00:00:48,840
Then we'll discuss the most important parts,
which is how you deal with using controls,

10
00:00:48,840 --> 00:00:52,310
the things that you actually show
on display and interact with.

11
00:00:52,310 --> 00:00:57,860
And we'll wrap up and extend what Dean was talking about
in the first part and go in depth about view controllers.

12
00:00:57,860 --> 00:01:01,410
How they work, their lifecycle and
what value they provide to your ad.

13
00:01:01,410 --> 00:01:07,620
It is important if you're here that you know
and understand the roles and the features

14
00:01:07,620 --> 00:01:10,720
of the various web technologies we'll be discussing today.

15
00:01:10,720 --> 00:01:15,990
So things like HTML, CSS, JavaScript and the DOM APIs.

16
00:01:15,990 --> 00:01:19,500
It also helps if you have familiarity with UIKit.

17
00:01:19,500 --> 00:01:23,720
In fact, if you're a native app developer, I
think this talk will be very good for you as well.

18
00:01:23,720 --> 00:01:28,190
You'll be able to pick up on the web programming part of it.

19
00:01:28,190 --> 00:01:32,540
So let's talk about what we did with iAd JS.

20
00:01:32,540 --> 00:01:40,090
We sort of looked at iAd and instantly we knew that
what we need to provide is a way to convey great emotion

21
00:01:40,090 --> 00:01:47,250
through the ad for the advertisers and also which you
engage with the interactivity with the brand contents

22
00:01:47,250 --> 00:01:50,650
that the user can really interact with the ad.

23
00:01:50,650 --> 00:01:54,100
And we try to translate that in terms of
technology to know what we need to address.

24
00:01:54,100 --> 00:01:56,970
And I think we came up with 4 distinctive areas.

25
00:01:56,970 --> 00:01:59,560
The first one is media playback and
that's really important for the emotion.

26
00:01:59,560 --> 00:02:05,580
A great video will convey so much emotion,
which is maybe hard to convey in machine code.

27
00:02:05,580 --> 00:02:12,300
Then the advertisers probably are showing off a strong
brand and these come with you know rich graphics.

28
00:02:12,300 --> 00:02:17,890
They want to have the full extent of what they can do in
Photoshop, stuff like that and translate that into their ad.

29
00:02:17,890 --> 00:02:23,530
And to really bring a little bit more of emotion
to that, we want to add motion to those graphics.

30
00:02:23,530 --> 00:02:27,700
That's I think really key and that makes the
graphics become just another form of media

31
00:02:27,700 --> 00:02:29,760
within your page along with audio and video.

32
00:02:29,760 --> 00:02:34,240
And finally, for interactivity, because we're
on iPhone, the key to the iPhone experience,

33
00:02:34,240 --> 00:02:40,010
what makes it stand out among all other computer products
is the multi-touch interface and how fast a response it is.

34
00:02:40,010 --> 00:02:47,550
So these are the 4 components that we identify that the core
features or the core things we're trying to do with iAd JS.

35
00:02:47,550 --> 00:02:52,780
And to me, if I was trying to summarize that with
a single well, two words, it will be Rich Media.

36
00:02:52,780 --> 00:02:56,940
This is the 4 components for a rich media experience.

37
00:02:56,940 --> 00:03:00,670
In a rich media experience translates
in term of technology to HTML5.

38
00:03:00,670 --> 00:03:03,080
The HTML is kind of a buzzword now.

39
00:03:03,080 --> 00:03:08,830
HTML5 has features and et cetera, but it's really just
a set of technologies that we've talked about nowadays.

40
00:03:08,830 --> 00:03:12,780
And all these technologies are
key features in WebKit on iPhone.

41
00:03:12,780 --> 00:03:17,060
So for example, HTML5 provides audio and video.

42
00:03:17,060 --> 00:03:22,000
The slides you integrate media in your web
page just along with any kind of web content.

43
00:03:22,000 --> 00:03:24,290
Just like you would deal with an image,
you can deal with audio and video,

44
00:03:24,290 --> 00:03:27,480
overlay things scripted with the
DOM and JavaScript, et cetera.

45
00:03:27,480 --> 00:03:29,800
First class citizens doing webpage.

46
00:03:29,800 --> 00:03:32,860
Of course we have CSS3 and they've
been some great talks this week by some

47
00:03:32,860 --> 00:03:38,770
of our colleagues discussing CSS effects using
gradients, reflections, masks, et cetera,

48
00:03:38,770 --> 00:03:44,530
but I think 3 core CSS3 technologies that
are worth highlighting are first, Transforms,

49
00:03:44,530 --> 00:03:48,700
lets you transform any part of your web page both in 2D

50
00:03:48,700 --> 00:03:52,640
and 3D to re-bring dramatic effects
on top of your rich graphics.

51
00:03:52,640 --> 00:03:58,750
And I think Transforms ties in fantastically with
Transitions, which lets you go from one state

52
00:03:58,750 --> 00:04:01,330
to the other with a nice implicit animation.

53
00:04:01,330 --> 00:04:05,190
You're just saying, here's my start value,
here's my end value, just do something pretty.

54
00:04:05,190 --> 00:04:09,700
And when you combine this with 3D effects and I think Dean
showed some interesting demos of that in the first session,

55
00:04:09,700 --> 00:04:12,470
you really are building tremendous experiences.

56
00:04:12,470 --> 00:04:14,830
There should be a little bit more
control over your transitions.

57
00:04:14,830 --> 00:04:17,630
You need special key frames in the middle of the animation.

58
00:04:17,630 --> 00:04:20,370
When you can use CSS animations,
we'll give you the full control

59
00:04:20,370 --> 00:04:23,200
over the animation that's being performed for you by WebKit.

60
00:04:23,200 --> 00:04:30,150
And as far as interactivity is concerned, I
said so, what really matters is multi-touch.

61
00:04:30,150 --> 00:04:33,360
And WebKit on iPhone provides multi-touch events.

62
00:04:33,360 --> 00:04:34,630
They're just special DOM events.

63
00:04:34,630 --> 00:04:39,760
Just like you would deal with mouse on the desktop,
you can deal with multi-touch directly on your phone.

64
00:04:39,760 --> 00:04:47,130
But what makes these technologies stand out specifically
on iPhone is how well they are integrated into the hardware

65
00:04:47,130 --> 00:04:52,690
so that we have tremendous performance and
we fully integrate with GPU acceleration.

66
00:04:52,690 --> 00:04:56,530
That means you can use all of these
features and get incredible performance

67
00:04:56,530 --> 00:04:59,040
from something that just fits in the palm of your hand.

68
00:04:59,040 --> 00:05:01,620
And I think that really amazes me still today.

69
00:05:01,620 --> 00:05:08,760
So that's HTML5, the core of our
rich media experience on iPhone.

70
00:05:08,760 --> 00:05:12,940
But I've used the term rich media but it's
just, you know one-- it's kind of a straw man.

71
00:05:12,940 --> 00:05:17,660
It's just one term we can use to characterize
what we're trying to do with ads in iAd.

72
00:05:17,660 --> 00:05:21,160
But if you're a native ad developer, you're
probably looking at this and thinking,

73
00:05:21,160 --> 00:05:23,710
these are more like mini applications, mini apps.

74
00:05:23,710 --> 00:05:27,740
And if you're thinking of apps, you're not
really thinking about HTML5 primarily maybe.

75
00:05:27,740 --> 00:05:29,560
You're thinking maybe more about Cocoa Touch.

76
00:05:29,560 --> 00:05:30,990
You're thinking about UIKit.

77
00:05:30,990 --> 00:05:36,850
You're thinking about table views, scrolling
components, really rich dynamic user interfaces

78
00:05:36,850 --> 00:05:39,890
that come built-in where you have little code to write.

79
00:05:39,890 --> 00:05:42,310
And that's exactly what we're trying to do with iAd JS.

80
00:05:42,310 --> 00:05:50,410
We're trying to combine rich media and mini apps or
rather HTML5 and UIKit into one seamless integration.

81
00:05:50,410 --> 00:05:55,870
So that's what we're trying to do with iAd JS.

82
00:05:55,870 --> 00:06:01,000
The first thing we really want is to make it
so easy for you to write these really rich ads.

83
00:06:01,000 --> 00:06:04,480
We want to streamline the creation of
those rich ads and that's the core value

84
00:06:04,480 --> 00:06:07,510
of iAd JS, is make things a lot simpler for you.

85
00:06:07,510 --> 00:06:13,130
The second thing we want is to ensure that we code
the best practices so that we leverage as much

86
00:06:13,130 --> 00:06:17,120
of the high performance that WebKit on
iPhone provides, this hardware acceleration.

87
00:06:17,120 --> 00:06:23,910
You don't really have to know all that much about how
it works to get the most performance by using iAd JS.

88
00:06:23,910 --> 00:06:28,240
So some of the core features we baked into the framework
we're going to go in depth about this is first,

89
00:06:28,240 --> 00:06:33,010
for the user experience, it's key that we have a
design that's as close to what we do in native code.

90
00:06:33,010 --> 00:06:37,250
So we're actually looking at UIKit
and we ripped completely the design

91
00:06:37,250 --> 00:06:40,320
and its features and re-implement all that in JavaScript.

92
00:06:40,320 --> 00:06:45,360
And because we're in the web technologies
world, it's HTML5, it's CSS.

93
00:06:45,360 --> 00:06:47,880
That's not really an imperative programming model.

94
00:06:47,880 --> 00:06:48,700
This is declarative.

95
00:06:48,700 --> 00:06:53,000
You're just really writing out things that should
happen but you're not really writing code as such.

96
00:06:53,000 --> 00:06:57,690
We want to combine that with the UIKit
foundation, which is something that's pretty novel.

97
00:06:57,690 --> 00:07:03,150
And finally, those-- as we're building a
recombination of strains, they're little modules.

98
00:07:03,150 --> 00:07:09,850
So we want to make that modular architecture is at the core
of iAd JS so that we can put things together incrementally

99
00:07:09,850 --> 00:07:14,590
when we put things on display and we'll get back to that
much later in this talk when we deal with view controllers.

100
00:07:14,590 --> 00:07:23,420
And how we did that is by using the same technologies you'll
be using when altering content 100 percent web standards.

101
00:07:23,420 --> 00:07:27,960
We haven't used a single line of native code
to provide all this functionality to you.

102
00:07:27,960 --> 00:07:32,780
In fact, any of you if you had time and willingness,
you can actually write this all yourself.

103
00:07:32,780 --> 00:07:35,000
We're just using HTML5, CSS, and JavaScript.

104
00:07:35,000 --> 00:07:41,430
All open standards, all documented, all for you, so
we're dealing at the same level as you are so we know

105
00:07:41,430 --> 00:07:45,370
that this is the best integration we
can provide inside of web content.

106
00:07:45,370 --> 00:07:49,090
So that is my introduction to iAd JS.

107
00:07:49,090 --> 00:07:52,620
Now let's talk about some of the
core JavaScript enhancements we made.

108
00:07:52,620 --> 00:07:55,940
And I want to talk about two things, ADClass and ADObject.

109
00:07:55,940 --> 00:08:00,520
I feel bad about this slide because
it starts off JavaScript limitations.

110
00:08:00,520 --> 00:08:02,960
Well, it turns out JavaScript is amazing.

111
00:08:02,960 --> 00:08:05,810
I live everyday in JavaScript.

112
00:08:05,810 --> 00:08:09,060
I write JavaScript all day long and actually love it.

113
00:08:09,060 --> 00:08:13,450
I think their port type or this port
type concept of programming is fantastic.

114
00:08:13,450 --> 00:08:15,100
It's so rich and dynamic.

115
00:08:15,100 --> 00:08:16,300
You can insert code.

116
00:08:16,300 --> 00:08:18,530
It's just completely amazing.

117
00:08:18,530 --> 00:08:21,460
It's so flexible.

118
00:08:21,460 --> 00:08:22,920
Someone loves JavaScript.

119
00:08:22,920 --> 00:08:25,000
But it has some limitations.

120
00:08:25,000 --> 00:08:27,250
And these are actually not limitations even in JavaScript.

121
00:08:27,250 --> 00:08:29,040
They're more at the syntax level.

122
00:08:29,040 --> 00:08:35,610
Things you'd want to do a bit easier and
these things are for example inheritance.

123
00:08:35,610 --> 00:08:38,740
There is no explicit support for
traditional inheritance in JavaScript.

124
00:08:38,740 --> 00:08:42,830
What I mean by that is there's no clear
relationship between a class or a superclass.

125
00:08:42,830 --> 00:08:45,310
Even the concept of class is sort of loose in JavaScript.

126
00:08:45,310 --> 00:08:48,150
And there's no super keyword like you
would have in Objective-C so you can get

127
00:08:48,150 --> 00:08:51,630
to the superclasses implementation of a method.

128
00:08:51,630 --> 00:08:53,550
Nothing that we don't have in JavaScript,

129
00:08:53,550 --> 00:08:57,840
which is completely pervasive throughout
UIKit is the concept of property synthesis.

130
00:08:57,840 --> 00:09:03,800
That is a JavaScript property which is you're just wrapping
a complex piece of code that'll be running in the background

131
00:09:03,800 --> 00:09:08,190
so that you have a nice expressive API using
properties but you're really running methods.

132
00:09:08,190 --> 00:09:11,150
And there's no built-in support in
the syntax of JavaScript for that.

133
00:09:11,150 --> 00:09:13,500
So that's another area that we'd like to target.

134
00:09:13,500 --> 00:09:21,210
And finally to combine with the property synthesis, there's
another great mechanism in Objective-C, which lets you--

135
00:09:21,210 --> 00:09:27,280
it's called key value coding, which lets you run callbacks
based on when it probably changes on another object.

136
00:09:27,280 --> 00:09:31,160
That's the kind of stuff that JavaScript doesn't
give you for free with a couple lines of code.

137
00:09:31,160 --> 00:09:32,250
You have to do a bit more.

138
00:09:32,250 --> 00:09:34,940
So we want to address those 3 areas with iAd JS.

139
00:09:34,940 --> 00:09:41,730
And the way we do that is with a load of syntactic shooter.

140
00:09:41,730 --> 00:09:45,470
So let's look at some of those Core
JavaScript enhancements and how they work.

141
00:09:45,470 --> 00:09:48,480
The first thing you've got to know
about is the ADClass Utility.

142
00:09:48,480 --> 00:09:53,560
You might have seen this being used on some of Dean's
slide and what it lets you do is to process your class

143
00:09:53,560 --> 00:09:57,050
and just make sure the syntactic shooter
that we add is actually interpreted

144
00:09:57,050 --> 00:10:00,250
and applied to your class in a background magically.

145
00:10:00,250 --> 00:10:02,530
So first thing, for example, you
want to do set up inheritance.

146
00:10:02,530 --> 00:10:05,480
Well, inheritance should just be
saying, I'm extending this class.

147
00:10:05,480 --> 00:10:06,040
That's all there is to it.

148
00:10:06,040 --> 00:10:08,220
Do whatever it takes to make it happen.

149
00:10:08,220 --> 00:10:11,220
Well, we can do that with superclass property
and we'll see about that in a minute.

150
00:10:11,220 --> 00:10:12,610
Same goes for synthesis.

151
00:10:12,610 --> 00:10:18,960
You can just say, here are a list of properties I want to
synthesize, they're in array, just make whatever it needs

152
00:10:18,960 --> 00:10:23,610
to be done so that they bind to
some methods in the background.

153
00:10:23,610 --> 00:10:29,080
And to complement this ADClass Utility, we have
a foundation ADObject Class that most if not all

154
00:10:29,080 --> 00:10:33,890
of the iAd JS objects extend that tie into ADClass Utility.

155
00:10:33,890 --> 00:10:38,260
For example, what's the point of having
inheritance if we don't have a callSuper method.

156
00:10:38,260 --> 00:10:41,230
So we provide that directly in ADObject.

157
00:10:41,230 --> 00:10:42,820
The same goes with synthesized properties.

158
00:10:42,820 --> 00:10:48,890
It'd be great to have notifications happen automatically
when you actually update a synthesized property

159
00:10:48,890 --> 00:10:51,740
so you can be notified when that property changes.

160
00:10:51,740 --> 00:10:54,040
That's completely automated with synthesis.

161
00:10:54,040 --> 00:10:58,370
Of course, we have APIs for you to do that
manually as well but as you opt into synthesis,

162
00:10:58,370 --> 00:11:00,660
the notifications happen magically
for you in the background.

163
00:11:00,660 --> 00:11:02,350
You don't have to worry about it.

164
00:11:02,350 --> 00:11:05,120
So let's take a concrete example.

165
00:11:05,120 --> 00:11:07,080
Here, I'm creating MyClass.

166
00:11:07,080 --> 00:11:08,370
It's pretty standard code.

167
00:11:08,370 --> 00:11:10,580
I couldn't come up with anything smarter here.

168
00:11:10,580 --> 00:11:12,770
And I want to make sure it extends ADObject.

169
00:11:12,770 --> 00:11:17,230
So that's single line, just say
MyClass is superclass is ADObject.

170
00:11:17,230 --> 00:11:19,140
In fact you don't even have to write that line.

171
00:11:19,140 --> 00:11:22,500
By default, when a class is interpreted by ADClass,

172
00:11:22,500 --> 00:11:26,480
we assume if there's no explicit
superclass it's just a subclass of ADObject.

173
00:11:26,480 --> 00:11:29,030
So you can even imagine this wasn't here.

174
00:11:29,030 --> 00:11:34,550
Then we have to make sure in our constructor that we
call whatever the default constructor of ADObject does,

175
00:11:34,550 --> 00:11:37,790
it actually sets up a bunch of things for you in
the background and you really want to make sure

176
00:11:37,790 --> 00:11:40,120
that that ADObject constructor is called.

177
00:11:40,120 --> 00:11:45,620
So here we call callSuper and callSuper no matter if it's a
constructor, an instance method, will do all the magic work

178
00:11:45,620 --> 00:11:49,420
to make sure it gets to the superclass'
implementation of that method and calls it.

179
00:11:49,420 --> 00:11:51,200
You can pass parameters that will return to value.

180
00:11:51,200 --> 00:11:55,560
It does everything you expect from a callSuper type of call.

181
00:11:55,560 --> 00:11:58,070
And here we got just a standard instance method declaration.

182
00:11:58,070 --> 00:11:58,990
There's nothing fancy here.

183
00:11:58,990 --> 00:12:01,720
It's just how you do instance method in JavaScript.

184
00:12:01,720 --> 00:12:06,520
And finally, very important, we need to
make sure we process this class to ADClass.

185
00:12:06,520 --> 00:12:09,060
So we just call ADClass with MyClass.

186
00:12:09,060 --> 00:12:13,030
This is just an example of how you can arrange
things so that you can, you know it's JavaScript,

187
00:12:13,030 --> 00:12:17,630
you can write your code in any way you want to as
long as your class is processed through ADClass.

188
00:12:17,630 --> 00:12:20,590
Now let's talk about synthesized properties.

189
00:12:20,590 --> 00:12:24,840
Let's say I want to synthesize a property foo on MyClass.

190
00:12:24,840 --> 00:12:30,000
I set the synthesizedProperties to a list
of strings or the name of my properties.

191
00:12:30,000 --> 00:12:31,080
In this case, I only have 1.

192
00:12:31,080 --> 00:12:32,850
You can have as many as you wish.

193
00:12:32,850 --> 00:12:35,310
Just to make things simple, we're dealing with 1 here.

194
00:12:35,310 --> 00:12:38,470
When ADClass processes MyClass,
it's connected to two things.

195
00:12:38,470 --> 00:12:41,420
The first thing is it looks for
a getFoo method on a prototype.

196
00:12:41,420 --> 00:12:42,590
This is a convention.

197
00:12:42,590 --> 00:12:45,660
If you provide getFoo, that means you have a custom getter

198
00:12:45,660 --> 00:12:48,960
and so what we do is we automatically
bind any getting of foo.

199
00:12:48,960 --> 00:12:54,600
So for example you have an instance of MyClass and you said
.foo on it, this actually calls getFoo in the background.

200
00:12:54,600 --> 00:12:57,920
That lets you compute the value of foo
dynamically as the user requests it.

201
00:12:57,920 --> 00:13:01,630
This is like a virtual variable as you will.

202
00:13:01,630 --> 00:13:10,420
If you did not provide a special getter, we assume that all
you want to do is actually set the _foo instance variable.

203
00:13:10,420 --> 00:13:11,890
This is another convention.

204
00:13:11,890 --> 00:13:16,210
You'd take the name of your property,
in that case foo, add the "_" prefix

205
00:13:16,210 --> 00:13:20,340
and that will get set automatically if
you do not provide a default getter.

206
00:13:20,340 --> 00:13:22,260
For setting, we do pretty much the same thing.

207
00:13:22,260 --> 00:13:24,990
We look for a setFoo method on our prototype.

208
00:13:24,990 --> 00:13:31,590
If we have it, we bind the setting of foo to setFoo, that
means if your user as an instance MyClass and sets .foo

209
00:13:31,590 --> 00:13:36,730
on it, whatever value you're setting is actually passed
to the setFoo method and it's up to you to deal with that

210
00:13:36,730 --> 00:13:39,660
and likely record it into an instance variable as well.

211
00:13:39,660 --> 00:13:45,590
And if you don't do anything again here, we
just assign as default to an _foo property.

212
00:13:45,590 --> 00:13:47,920
In fact, you don't need to provide either getters or setter.

213
00:13:47,920 --> 00:13:52,430
You can provide nothing to say, it is a synthesized
property and the reason you'd want to do that is

214
00:13:52,430 --> 00:13:55,410
because you get automatic notifications being triggered.

215
00:13:55,410 --> 00:13:57,050
So that's even worth doing.

216
00:13:57,050 --> 00:14:01,480
So let's look at how we could provide a custom setter,
pretty classic thing for a synthesized property.

217
00:14:01,480 --> 00:14:05,710
So first, we set synthesizedProperties,
pass it an array of strings,

218
00:14:05,710 --> 00:14:07,940
which are the name of the properties we want to synthesize.

219
00:14:07,940 --> 00:14:11,340
In that case, it's only going to be foo.

220
00:14:11,340 --> 00:14:15,880
Since we are actually not-- we
want to set the real value for foo.

221
00:14:15,880 --> 00:14:19,120
Foo is like a nonexistent property.

222
00:14:19,120 --> 00:14:22,010
It's just going to be bound to our setter.

223
00:14:22,010 --> 00:14:28,950
So we want to make sure we implement a special instance
variable or an ivar and add an "_" prefix in the name

224
00:14:28,950 --> 00:14:33,520
of the variable so we just set _foo, default value to be 0.

225
00:14:33,520 --> 00:14:38,610
Then all we got to do is implement that setFoo method
as a convention set and the name of the property.

226
00:14:38,610 --> 00:14:40,240
And there's a single argument being passed here.

227
00:14:40,240 --> 00:14:42,460
That's actually the new value of foo we're trying to set.

228
00:14:42,460 --> 00:14:50,530
And here you'd really be setting a whole bunch of things,
running special code, refreshing, drawing or something.

229
00:14:50,530 --> 00:14:51,890
I don't even know.

230
00:14:51,890 --> 00:14:56,460
What you do-- what you have to remember is to make sure you
keep actually the value of _foo because when the user tries

231
00:14:56,460 --> 00:15:02,370
to get foo, since you're now providing a special
getter here, it will return _foo automatically.

232
00:15:02,370 --> 00:15:04,250
So for custom getter it's very simple.

233
00:15:04,250 --> 00:15:10,350
The same synthesized property declaration, but here
we're just implementing getFoo and returning a variable.

234
00:15:10,350 --> 00:15:14,870
You'll notice here we don't even have an instance variable
because likely we don't even have a real property for foo.

235
00:15:14,870 --> 00:15:18,510
We just compute it as we go on the fly when required.

236
00:15:18,510 --> 00:15:24,150
So to tie into synthesis, we have
automated property observation.

237
00:15:24,150 --> 00:15:32,150
So let's create an instance of MyClass on a
control object and call that property MyObject.

238
00:15:32,150 --> 00:15:38,350
Then we want to be notified whenever foo changes on that
object and be called back in the context of a controller.

239
00:15:38,350 --> 00:15:41,950
So we get a pointer to my object,
call addPropertyObserver on it.

240
00:15:41,950 --> 00:15:46,870
The first parameter is the name of the property we want
to synthesize and the second parameter is the object

241
00:15:46,870 --> 00:15:53,640
of the called back whenever that property changes since
this is this in this context that means our controller.

242
00:15:53,640 --> 00:15:59,530
So now all we got to do is we have to opt into the
contract that tells us to implement handlePropertyChange.

243
00:15:59,530 --> 00:16:04,270
That is the expected callback for whatever
object is best as a property handler.

244
00:16:04,270 --> 00:16:08,830
So handlePropertyChange got 2 parameters,
first one is observedObject.

245
00:16:08,830 --> 00:16:10,420
The second one is propertyName.

246
00:16:10,420 --> 00:16:14,480
This lets you have a single handler for a bunch
of property observer and be able to switch based

247
00:16:14,480 --> 00:16:17,690
on the originating object and the originating property name.

248
00:16:17,690 --> 00:16:20,600
Now all we got left to do is to handle the change.

249
00:16:20,600 --> 00:16:25,170
But let's say we actually know exactly what method we
want to call back, just a little bit more convenience.

250
00:16:25,170 --> 00:16:29,680
Well you can have a third parameter,
which is the string referring to the name

251
00:16:29,680 --> 00:16:33,230
of the callback for that specific property change.

252
00:16:33,230 --> 00:16:36,960
So that means we only have to implement fooDidChange
and notice here we don't have any parameter

253
00:16:36,960 --> 00:16:42,030
because we already know exactly why we're getting that
callback and then we can do whatever we want here.

254
00:16:42,030 --> 00:16:46,940
So these were the 3 core JavaScript enhancements
we've made and there are not a lot of them.

255
00:16:46,940 --> 00:16:49,600
That just speaks to the value of JavaScript.

256
00:16:49,600 --> 00:16:55,010
We provided first traditional inheritance with
the superclass property and callSuper method.

257
00:16:55,010 --> 00:16:59,410
We built in synthesis with the synthesizedProperties
completely declaratively, just-- it's like a here file.

258
00:16:59,410 --> 00:17:02,430
You're just saying, here a bunch of
properties I want to be synthesized.

259
00:17:02,430 --> 00:17:08,590
And we automated the property change
notifications so that synthesis process.

260
00:17:08,590 --> 00:17:13,230
So these are all the changes we made-- well
extensions if you will we made to JavaScript.

261
00:17:13,230 --> 00:17:15,330
Again, we haven't touched the JavaScript engine.

262
00:17:15,330 --> 00:17:20,280
Within the JavaScript runtime, we've extended
these features using simply JavaScript.

263
00:17:20,280 --> 00:17:21,480
Let's talk about views and controls.

264
00:17:21,480 --> 00:17:23,880
That's when you get into the meat of things.

265
00:17:23,880 --> 00:17:28,040
And there are 2 main classes I want
to discuss here, ADView and ADControl.

266
00:17:28,040 --> 00:17:32,280
So ADView is just a complete rip on UIView and UIKit.

267
00:17:32,280 --> 00:17:34,080
It provides the same methods, the same properties,

268
00:17:34,080 --> 00:17:38,250
the same behavior that breed the
intent of what we're trying to do here.

269
00:17:38,250 --> 00:17:42,070
And ADView is just a base class for anything
that's going to render on your screen.

270
00:17:42,070 --> 00:17:44,430
When you want to put something on display,
you got to make sure there's an ADView

271
00:17:44,430 --> 00:17:46,800
and it's actually added to the view hierarchy.

272
00:17:46,800 --> 00:17:49,340
But we're dealing with WAP technologies here.

273
00:17:49,340 --> 00:17:54,270
And if you're familiar with WAP technologies, you
know that the concept of rendering is somewhat opaque.

274
00:17:54,270 --> 00:17:59,640
We're really just dealing with a tree of objects,
elements and just manipulating them and putting them

275
00:17:59,640 --> 00:18:04,290
in different places and stunning them with
CSS is what actually renders on screen.

276
00:18:04,290 --> 00:18:07,840
So it's no surprise that ADView, since
it is rendering content on the screen,

277
00:18:07,840 --> 00:18:10,710
is really just a wrapper for a DOM element.

278
00:18:10,710 --> 00:18:12,470
And that element is what we call the layer.

279
00:18:12,470 --> 00:18:17,910
And that is basically the element
that will be the root of the hierarchy

280
00:18:17,910 --> 00:18:20,830
of that specific view that will be inserted into the DOM.

281
00:18:20,830 --> 00:18:23,290
We'll look at that in a minute and see what it looks like.

282
00:18:23,290 --> 00:18:26,910
Now let's say you want to contain
other views instead of your views.

283
00:18:26,910 --> 00:18:28,150
It's pretty classic.

284
00:18:28,150 --> 00:18:31,380
For example, you have a scroll view
and you want to have a bunch of buttons

285
00:18:31,380 --> 00:18:34,580
within a scroll view so you can scroll through them.

286
00:18:34,580 --> 00:18:39,290
If we were pending elements directly into the
layer, we couldn't actually scroll this content

287
00:18:39,290 --> 00:18:41,380
because the scroll view has a lot of different elements.

288
00:18:41,380 --> 00:18:46,230
It has scroll indicators and it has an area
that actually scrolls when you touch on it.

289
00:18:46,230 --> 00:18:47,730
That is why we call the hostingLayer.

290
00:18:47,730 --> 00:18:52,500
This is the layer that we want to be containing
subviews and et cetera, and we'll look in--

291
00:18:52,500 --> 00:18:55,860
again I have a little example in a minute.

292
00:18:55,860 --> 00:19:00,020
Something that is really important to us is that
we want to make it very easy for you to be dealing

293
00:19:00,020 --> 00:19:03,620
with something more complex aspects of rich media content.

294
00:19:03,620 --> 00:19:05,340
And one of these aspects is Transitions.

295
00:19:05,340 --> 00:19:09,920
When they're really complex and you want callbacks
and et cetera, it's a lot of work to do on your own.

296
00:19:09,920 --> 00:19:13,000
So we actually build all that directly in ADView.

297
00:19:13,000 --> 00:19:17,590
And on top of that, because you don't really know
when your transitions are run in which piece of code,

298
00:19:17,590 --> 00:19:23,000
in which run loop, we actually provided transaction
system so you can say, here's a transaction that starts.

299
00:19:23,000 --> 00:19:26,950
There may be X number of transitions it
completes and all that is going to happen

300
00:19:26,950 --> 00:19:30,010
in complete synchronization in your engine.

301
00:19:30,010 --> 00:19:35,910
And finally, there's a special kind of view that gets
created automatically for you when you load iAd JS

302
00:19:35,910 --> 00:19:42,240
in your content and it basically wraps a view around the
body elements and we call that the root view and you can get

303
00:19:42,240 --> 00:19:46,820
to it using ADRootView.sharedRoot and that's
really the root of your view hierarchy.

304
00:19:46,820 --> 00:19:49,280
If you're familiar with UIKit, it's like the window.

305
00:19:49,280 --> 00:19:54,830
So let's look at building a scroll
view with those JavaScript APIs.

306
00:19:54,830 --> 00:19:59,420
First thing we do is we create a variable scroll
view and we create a new ADScrollView object.

307
00:19:59,420 --> 00:20:05,240
AD is the prefix you'll see for all the
specific two iAd JS JavaScript classes.

308
00:20:05,240 --> 00:20:11,510
We set this position in size so that it's displayed
20 pixels margins on either side and it takes most

309
00:20:11,510 --> 00:20:13,210
of the width from the height of the window.

310
00:20:13,210 --> 00:20:18,540
And notice here we have helper little data types like
ADPoint and ADSize to make it even more convenient for you

311
00:20:18,540 --> 00:20:21,650
to deal with those kinds of geometric properties.

312
00:20:21,650 --> 00:20:24,180
Then we set up some of the call
properties of the scroll view.

313
00:20:24,180 --> 00:20:26,080
We're going to turn off vertical scrolling.

314
00:20:26,080 --> 00:20:29,950
We're only interested in horizontal
scrolling in that example, I'm sorry,

315
00:20:29,950 --> 00:20:33,950
and we want to make sure we don't show any of the
scroll indicators either, so we just set that on that.

316
00:20:33,950 --> 00:20:40,550
And then to make sure we actually display the scroll view,
we get to point it to our share group and we addSubview,

317
00:20:40,550 --> 00:20:44,070
well we just add a scroll view as a
subview with a single method call.

318
00:20:44,070 --> 00:20:47,980
So what this does behind the scene is
actually generates all this markup.

319
00:20:47,980 --> 00:20:51,980
This is actually pretty simple example but some
views are incredibly complex and require a lot

320
00:20:51,980 --> 00:20:54,040
of code and you don't want to know about this.

321
00:20:54,040 --> 00:20:55,330
You'll notice here a couple of things.

322
00:20:55,330 --> 00:20:57,960
So the div at the top levels are layered.

323
00:20:57,960 --> 00:21:02,210
You'll see a div with a class hosting layer, that's
actually a piece of content that's going to scroll,

324
00:21:02,210 --> 00:21:04,320
and this is going to hold all the content.

325
00:21:04,320 --> 00:21:06,870
You'll see all the things that are
generated you have nothing to do with.

326
00:21:06,870 --> 00:21:08,520
For example, the scroll indicators.

327
00:21:08,520 --> 00:21:11,260
These are all very private to ADScrollView.

328
00:21:11,260 --> 00:21:12,890
You don't need to know about this.

329
00:21:12,890 --> 00:21:15,190
Why did we have to write so much code?

330
00:21:15,190 --> 00:21:19,060
We're trying to make the best of both HTML and UIKit.

331
00:21:19,060 --> 00:21:20,880
So we've already provided the UIKit part.

332
00:21:20,880 --> 00:21:23,510
But why do I have to write so much JavaScript?

333
00:21:23,510 --> 00:21:28,120
I think if you're a web author, what you really want to
do is to be dealing with markup and style with HTML CSS.

334
00:21:28,120 --> 00:21:34,130
And that really builds a case for what we call the
declarative approach, the declarative layer that we build

335
00:21:34,130 --> 00:21:39,080
on top of those APIs for you to make it super
easy to build using controls within just markup.

336
00:21:39,080 --> 00:21:41,780
And there are 2 key points that makes this very compelling.

337
00:21:41,780 --> 00:21:44,570
First is the ease of authoring.

338
00:21:44,570 --> 00:21:48,950
Say you want to style your scroll view.

339
00:21:48,950 --> 00:21:51,850
You want to change the background
color, all that kind of stuff.

340
00:21:51,850 --> 00:21:53,640
That's the value of using CSS, right.

341
00:21:53,640 --> 00:21:55,610
It's so easy to style content.

342
00:21:55,610 --> 00:21:59,340
But if you're using an opaque JavaScript
class and it generates a bunch of markup,

343
00:21:59,340 --> 00:22:00,910
you don't even know what that markup looks like.

344
00:22:00,910 --> 00:22:05,630
In fact, we don't want you to know what that markup looks
like because if we want to change that implementation

345
00:22:05,630 --> 00:22:09,800
in the future, we don't want you to rely
on things that we consider to be private.

346
00:22:09,800 --> 00:22:12,310
So we need to know what the markup
structure is and if you were laying

347
00:22:12,310 --> 00:22:16,270
out the structure yourself, you
know exactly how to style it.

348
00:22:16,270 --> 00:22:20,630
Then it's just good sense to want to separate
the logic, which belongs in JavaScript

349
00:22:20,630 --> 00:22:23,950
with the content, which belongs in HTML CSS.

350
00:22:23,950 --> 00:22:27,040
And on top of that, it also goes back to performance.

351
00:22:27,040 --> 00:22:32,410
And remember I said one of our primary concerns in iAd
JS to make sure things are streaming and we make sure

352
00:22:32,410 --> 00:22:37,370
that it's easy for you to get the
best performance out of your app.

353
00:22:37,370 --> 00:22:42,680
So if you're dealing with those JavaScript object, they're
doing all kinds of manipulation that you don't know

354
00:22:42,680 --> 00:22:45,600
about to the DOM tree when you're creating
a layer, when you're putting it somewhere.

355
00:22:45,600 --> 00:22:46,880
You don't even know what's going on.

356
00:22:46,880 --> 00:22:51,370
And if you're trying to optimize things,
obviously, this is going to-- it's how you control.

357
00:22:51,370 --> 00:22:54,750
If you have all your markup laid
out already, all the CSS created,

358
00:22:54,750 --> 00:22:57,210
that's just less time spent rendering, fewer manipulation.

359
00:22:57,210 --> 00:23:02,440
The engine can just deal with that in like one
monolithic block and just-- it's just a lot faster.

360
00:23:02,440 --> 00:23:06,550
So that's the kind of benefits that
we get out of a declarative approach.

361
00:23:06,550 --> 00:23:08,510
So let's go back to the code we built.

362
00:23:08,510 --> 00:23:10,620
This looks similar, but it's different.

363
00:23:10,620 --> 00:23:14,280
The first thing you'll notice is we
have a body and a class of ADRootView.

364
00:23:14,280 --> 00:23:14,930
That rings a bell.

365
00:23:14,930 --> 00:23:18,690
That reminds me about the sharedRoot, the
thing we build automatically with the body.

366
00:23:18,690 --> 00:23:21,620
Well if you're using the declarative
layer, this is the entry point.

367
00:23:21,620 --> 00:23:26,590
Having an element with an ADRootView class
on it means I'm using the declarative layer

368
00:23:26,590 --> 00:23:31,430
and when you process this subtree for
any content that has an AD-prefix class

369
00:23:31,430 --> 00:23:35,840
so that you can create those rich JavaScript projects
that will control those, all those using controls.

370
00:23:35,840 --> 00:23:38,570
So in that case, we're putting down
the body, pretty typical example.

371
00:23:38,570 --> 00:23:41,790
You can have it on a subtree elsewhere, that's fine.

372
00:23:41,790 --> 00:23:43,890
So now we need to create a scroll view.

373
00:23:43,890 --> 00:23:47,350
So we set up its class to be ADScrollView,
that's just an element.

374
00:23:47,350 --> 00:23:50,450
Having ADRootView on the body will make
sure we look at all the children and figure

375
00:23:50,450 --> 00:23:54,450
out which one has an ADScrollView
class so that we can process it.

376
00:23:54,450 --> 00:23:56,560
Then we want to set the properties of our scroll view.

377
00:23:56,560 --> 00:23:58,250
And we can do that declaratively as well.

378
00:23:58,250 --> 00:23:59,790
No need to write to JavaScript here.

379
00:23:59,790 --> 00:24:04,550
So if you want to throw them out vertical
scrolling, we just AD-vertical-scroll-enabled.

380
00:24:04,550 --> 00:24:07,420
And notice here, we're extending HTML attributes.

381
00:24:07,420 --> 00:24:12,380
I was fairly conflicted about that but I think the
value of doing this is so great for you as a developer

382
00:24:12,380 --> 00:24:17,670
that as long as-- I think as long as we add an AD-prefix,
I think we're in the clear and it's clear enough for you

383
00:24:17,670 --> 00:24:23,120
that this is not a core HTML attribute
but just an extension specific to iAd JS.

384
00:24:23,120 --> 00:24:24,670
Now what about position and size.

385
00:24:24,670 --> 00:24:27,590
We don't have an ADPosition or an ADSize here.

386
00:24:27,590 --> 00:24:31,610
That's because CSS already does a great
job of positioning and sizing things.

387
00:24:31,610 --> 00:24:35,240
We want to integrate as well as
possible with the core web technologies.

388
00:24:35,240 --> 00:24:40,380
So instead of having those custom attributes, we
actually just look at the styling of your element.

389
00:24:40,380 --> 00:24:45,270
So here we use left, up, right, bottom to
actually position it and make its scale

390
00:24:45,270 --> 00:24:48,900
to be you know 20 pixels margin on either hand.

391
00:24:48,900 --> 00:24:53,020
And it's not even just about the style
attribute here, which is a core HTML attribute.

392
00:24:53,020 --> 00:24:57,680
You can have all this information in CSS style sheets
that are loading in the penalty of the element, all that.

393
00:24:57,680 --> 00:25:02,420
We're looking at the computed style when we're trying
to figure out the stylistic information related to view

394
00:25:02,420 --> 00:25:06,240
and finally, we put in our hostingLayer and
we'll just put whatever content we need in there

395
00:25:06,240 --> 00:25:08,740
and we'll see about that in demo later on.

396
00:25:08,740 --> 00:25:10,910
You'll notice we don't talk about scroll indicators here.

397
00:25:10,910 --> 00:25:13,460
This will get added to the tree later on.

398
00:25:13,460 --> 00:25:18,010
In fact there's so much that can be added to the tree you
don't even want to know about, but that gives you a good way

399
00:25:18,010 --> 00:25:21,880
to know what the structure is and so you
create all of this using simply markup.

400
00:25:21,880 --> 00:25:23,570
So that was views.

401
00:25:23,570 --> 00:25:25,330
Now let's talk about controls.

402
00:25:25,330 --> 00:25:32,800
And controls are all instances of the ADControl class which
is just a subclass of ADView so all the features you know

403
00:25:32,800 --> 00:25:38,300
from ADView that's declarative approach, all these
APIs and et cetera, this comes for free in ADControl.

404
00:25:38,300 --> 00:25:40,040
It's just an extension of it.

405
00:25:40,040 --> 00:25:43,970
And what they do is that they provide
advance and automatic touch tracking.

406
00:25:43,970 --> 00:25:49,630
We're really trying to make it so you don't have to deal
with the interaction private so you have control yourself.

407
00:25:49,630 --> 00:25:52,260
We try to do as much as we can on our own.

408
00:25:52,260 --> 00:25:56,930
And the way we do that is we actually extend
the set of built-in multi-touch DOM events

409
00:25:56,930 --> 00:25:59,870
and add a little bit more granularity to them.

410
00:25:59,870 --> 00:26:04,380
So let's step back and let's see
what developing on the desktop.

411
00:26:04,380 --> 00:26:09,790
I'm sure a lot of you are more familiar with desktop
web programming and here we're dealing with the mouse.

412
00:26:09,790 --> 00:26:12,240
That's the input method.

413
00:26:12,240 --> 00:26:18,510
So mouse events on the desktop are always related
to target element and that makes really easy

414
00:26:18,510 --> 00:26:21,050
to program interactivity based on an element.

415
00:26:21,050 --> 00:26:25,900
It's easy to know when the mouse over is onto it and
when the mouse leaves it or click on it, super easy.

416
00:26:25,900 --> 00:26:32,490
So we get all these elements, all these events, I'm
sorry, which are all related to a specific target element.

417
00:26:32,490 --> 00:26:34,830
So let's focus on iPhone here.

418
00:26:34,830 --> 00:26:37,870
Let's say we're developing a web app for Safari on iPhone.

419
00:26:37,870 --> 00:26:40,930
It has this great multi-touch DOM events.

420
00:26:40,930 --> 00:26:44,320
But these events really only provide
you with the raw touches.

421
00:26:44,320 --> 00:26:47,630
You get all the information you need there though.

422
00:26:47,630 --> 00:26:48,500
It's really important.

423
00:26:48,500 --> 00:26:49,580
This is all we really need.

424
00:26:49,580 --> 00:26:53,820
We can tell how many fingers on the
screen, where they are, how they're moving,

425
00:26:53,820 --> 00:26:55,210
when touch starts and ends and et cetera.

426
00:26:55,210 --> 00:26:57,390
We get this touchstart event when the touch starts,

427
00:26:57,390 --> 00:27:01,310
the touchmove when the touch moves
and the touchend when it's over.

428
00:27:01,310 --> 00:27:06,820
But we don't actually get the information, the granularity
we'd get on the desktop, at least not so easily.

429
00:27:06,820 --> 00:27:11,380
We don't get like the equivalent of mousemove or a
mouseout when we're touching over an element or out.

430
00:27:11,380 --> 00:27:15,760
We need to do a little bit of extra work and that's
exactly what ADControl does for you for free.

431
00:27:15,760 --> 00:27:17,330
You don't have to worry about any of these.

432
00:27:17,330 --> 00:27:22,810
And so what we do is that we introduce another
set of control events that are specific to iAd JS.

433
00:27:22,810 --> 00:27:27,050
And that's all clean and kosher
because DOM events were built

434
00:27:27,050 --> 00:27:29,600
so that ostensibly you can create
your own events and dispatch them.

435
00:27:29,600 --> 00:27:30,580
It's an open process.

436
00:27:30,580 --> 00:27:33,890
So it completely ties in to the
good practices of web development.

437
00:27:33,890 --> 00:27:40,170
So what controls do is they basically listen to all the
touches, analyze them and trigger additional touch events,

438
00:27:40,170 --> 00:27:42,520
which are a lot more informative about what's going on.

439
00:27:42,520 --> 00:27:44,670
So for example, you can listen to TouchDragEnter.

440
00:27:44,670 --> 00:27:47,970
That means within a touch, we started
touching over a given element.

441
00:27:47,970 --> 00:27:51,170
But when we exit that element, we get TouchDragExit.

442
00:27:51,170 --> 00:27:54,040
TouchUpInside as well when we've
tapped an element, this kind of events.

443
00:27:54,040 --> 00:27:54,980
And we got a lot more.

444
00:27:54,980 --> 00:28:00,630
And you notice they're all prefixed with control so you
know exactly they're related to control to ADControl.

445
00:28:00,630 --> 00:28:05,200
And I'd like to refer you to a great
session that happened yesterday.

446
00:28:05,200 --> 00:28:07,630
You'll be able to download on a
video later on which were all

447
00:28:07,630 --> 00:28:11,040
about detecting touch and gestures in webpages on iPhone OS.

448
00:28:11,040 --> 00:28:16,270
It was great and I really urge you
to look into that in greater depth.

449
00:28:16,270 --> 00:28:18,100
So now let's talk about actions.

450
00:28:18,100 --> 00:28:21,020
And again, we're dealing here with DOM events.

451
00:28:21,020 --> 00:28:24,200
Control is here to react to user interaction exactly, right.

452
00:28:24,200 --> 00:28:30,620
So in UIKit, the way to be responding to an action on
a control is usually with the action-target mechanism.

453
00:28:30,620 --> 00:28:32,420
That's a great mechanism but it's one to one.

454
00:28:32,420 --> 00:28:36,620
There's nothing bad with that specifically
but in the context of web development,

455
00:28:36,620 --> 00:28:41,040
you're dealing with an interaction
with the one-to-many process.

456
00:28:41,040 --> 00:28:45,470
So many different observers can listen
to a mouse even on a given element

457
00:28:45,470 --> 00:28:47,810
and they don't have to worry about what each other do.

458
00:28:47,810 --> 00:28:49,030
You can add as many as you want.

459
00:28:49,030 --> 00:28:51,410
So we want to do the exact same
thing in our case for actions.

460
00:28:51,410 --> 00:28:56,710
So when a control that you changes, for example, say you
have the slider and you're dragging it around the screen,

461
00:28:56,710 --> 00:29:02,870
whenever that slider's position changes, it will trigger
a control that you change event that lets you know

462
00:29:02,870 --> 00:29:06,720
that control scroll value has changed
and we do that using DOM events.

463
00:29:06,720 --> 00:29:10,640
So it's a single API for any kind
of interaction tracking in your ad.

464
00:29:10,640 --> 00:29:13,810
So let's talk a little bit about DOM event handling.

465
00:29:13,810 --> 00:29:19,320
Let's say we have our slider and want to be told whenever
the control that you changes, so we use addEventListener.

466
00:29:19,320 --> 00:29:22,230
Remember it's the exact same API we use with just the DOM

467
00:29:22,230 --> 00:29:25,180
and here even though it's an ADControl
instance we can use that same API.

468
00:29:25,180 --> 00:29:26,340
We make it that easy.

469
00:29:26,340 --> 00:29:30,410
What we do is we actually forward that
event listener to that controls layer.

470
00:29:30,410 --> 00:29:34,650
So first the parameter is going to be the name of the event
that we're interested in so it's control that you change

471
00:29:34,650 --> 00:29:38,780
and the second object is going to
be handler, callback or whatever,

472
00:29:38,780 --> 00:29:41,840
and then probably that just says
we're not using the capture phase.

473
00:29:41,840 --> 00:29:44,320
That's the detail you don't really need to worry about.

474
00:29:44,320 --> 00:29:47,310
So let's consider your user drags the
slider around the screen and the control

475
00:29:47,310 --> 00:29:49,950
that you changes even start firing on that slider.

476
00:29:49,950 --> 00:29:51,790
So 2 things that may happen here.

477
00:29:51,790 --> 00:29:57,390
A, the handler parameter, the second parameter to
addEventListener is a function, and what happens here is

478
00:29:57,390 --> 00:30:00,460
that we get a pointer to that function
and we just make a callback.

479
00:30:00,460 --> 00:30:01,420
We don't even actually do that.

480
00:30:01,420 --> 00:30:03,000
WebKit does that for you.

481
00:30:03,000 --> 00:30:04,240
And there's no context here.

482
00:30:04,240 --> 00:30:06,050
It doesn't even know what this-- it's just a function.

483
00:30:06,050 --> 00:30:11,860
So, it just calls it in a global context of the
JavaScript program environment which is Window.

484
00:30:11,860 --> 00:30:15,690
When you're dealing the interactions, pretty likely
that you're doing that in the context of a controller.

485
00:30:15,690 --> 00:30:19,850
You have an object that needs to respond to that
action so it can do something else with, you know,

486
00:30:19,850 --> 00:30:23,400
with respect to certain properties that
are specific to that controller object.

487
00:30:23,400 --> 00:30:28,960
So, in that case, what you want to do is make sure
that the handler parameter is actually an object.

488
00:30:28,960 --> 00:30:34,530
And what that means is that you enter in a contract that
you have to implement a handle event method on that object

489
00:30:34,530 --> 00:30:37,240
and that gets called back with
the context being your handler.

490
00:30:37,240 --> 00:30:42,030
So, if you have a controller object, you just need
to implement controller.handleevent, for example,

491
00:30:42,030 --> 00:30:45,970
and it gets called and that this object,
the context object is just your controller.

492
00:30:45,970 --> 00:30:47,210
And that's really the best practice.

493
00:30:47,210 --> 00:30:51,620
That's-- I would argue in 100 percent
of cases that's what you want to do.

494
00:30:51,620 --> 00:30:57,010
So, controls are various states, selected,
enabled or disabled, and highlighted.

495
00:30:57,010 --> 00:31:02,560
I want to talk a little bit about highlighted because
this ties into this touch tracking I was talking about.

496
00:31:02,560 --> 00:31:07,230
Traditionally, you'd say OK, I want to react--
I want to change the state of my controller

497
00:31:07,230 --> 00:31:12,540
and my custom controller based on its being
highlighted or not so you'd be subclassing ADControl

498
00:31:12,540 --> 00:31:15,730
and overwriting the said highlighted method for example.

499
00:31:15,730 --> 00:31:17,960
Well, that's one way to do it and that is fine.

500
00:31:17,960 --> 00:31:21,650
But we wanted to-- we want to make it a bit easier
for you and what we're going to do is we're going

501
00:31:21,650 --> 00:31:26,670
to synchronize the highlighted state with touch tracking so
we obviously do that behind the scene but on top of that,

502
00:31:26,670 --> 00:31:30,550
we're going to make sure that change
of state is reflected directly in CSS.

503
00:31:30,550 --> 00:31:31,760
So let's look at what that means.

504
00:31:31,760 --> 00:31:34,070
We're actually going to build a
custom control in a single slide.

505
00:31:34,070 --> 00:31:36,640
Let's start with a markup.

506
00:31:36,640 --> 00:31:41,660
Just like we can instantiate a view, we can
instantiate an ADControl and in that case,

507
00:31:41,660 --> 00:31:45,670
we also want to make sure it's our custom control
so we add another custom name on top of that.

508
00:31:45,670 --> 00:31:49,190
You notice we don't have ADView on
here even though it inherits from that.

509
00:31:49,190 --> 00:31:53,990
We actually, when we build in the declarative
approach, we automatically add the classes as needed

510
00:31:53,990 --> 00:31:56,190
when we're parsing the attribute, the elements.

511
00:31:56,190 --> 00:32:00,330
So, you don't have to worry about
the superclasses of your element.

512
00:32:00,330 --> 00:32:01,080
Next one is styling.

513
00:32:01,080 --> 00:32:06,130
So the first thing we do is to create a CSS selector that
will match both the ADControl class and MyClass control.

514
00:32:06,130 --> 00:32:08,250
So, they will match our development right here.

515
00:32:08,250 --> 00:32:13,000
We want to make sure we only match controls
that are accustomed to our application.

516
00:32:13,000 --> 00:32:14,470
So, here I do very basic styling.

517
00:32:14,470 --> 00:32:15,910
You can do so much with these obviously.

518
00:32:15,910 --> 00:32:20,120
You can use CSS effects to full extent to
make awesome looking bonds of controls.

519
00:32:20,120 --> 00:32:22,850
So, in that case, we have a background
color to be white and color to be red.

520
00:32:22,850 --> 00:32:25,810
And what we want to do is we want to invert
that when the control is highlighted,

521
00:32:25,810 --> 00:32:29,310
when the user has a finger on top of that element.

522
00:32:29,310 --> 00:32:34,060
So to do that, I had just, actually just
add this CSS class name called highlighted

523
00:32:34,060 --> 00:32:37,290
on your element whenever it is
highlighted so you don't need a subclass.

524
00:32:37,290 --> 00:32:42,890
All you got to do is write another more specific
CSS selector that looks into the highlighted class

525
00:32:42,890 --> 00:32:46,870
and just invert the values of background color
and color to give it that highlighted state.

526
00:32:46,870 --> 00:32:49,130
No need to write any JavaScript
here for your custom control.

527
00:32:49,130 --> 00:32:50,730
You can do it all in markup in pure CSS.

528
00:32:50,730 --> 00:32:54,660
So, let's look at some code to see
how we can make all that happen

529
00:32:54,660 --> 00:32:58,720
and what we're doing here is we're building
a full gallery for my world renowned cat.

530
00:32:58,720 --> 00:32:59,920
And it's like the weather app.

531
00:32:59,920 --> 00:33:05,790
So we have the scroll view that will snap to different pages
and at the bottom of the screen, we'll have a page control.

532
00:33:05,790 --> 00:33:09,910
These 4 little dots that are synchronized to the scroll
view and that lets us go from one page to the other

533
00:33:09,910 --> 00:33:13,160
by a tap of the finger as opposed to dragging.

534
00:33:13,160 --> 00:33:15,920
OK. So, we're going to get started by building some markup.

535
00:33:15,920 --> 00:33:17,360
We've already mostly done that.

536
00:33:17,360 --> 00:33:21,500
We set up our root view to be our body, easy enough,
then we'll start processing all the subviews.

537
00:33:21,500 --> 00:33:23,050
So, for example, the scroll view.

538
00:33:23,050 --> 00:33:25,890
You notice here one new property which is paging enabled.

539
00:33:25,890 --> 00:33:30,620
That says that we have to snap in pages' worth of
content while we're scrolling through that scroll view.

540
00:33:30,620 --> 00:33:32,600
Again, we do that all magically for you.

541
00:33:32,600 --> 00:33:35,700
You don't have to worry about the
touch tracking here to make that work.

542
00:33:35,700 --> 00:33:37,300
We do it all for you.

543
00:33:37,300 --> 00:33:39,820
Then we want to put in some content into our hostingLayer.

544
00:33:39,820 --> 00:33:45,680
So, in that case, we'll just have 4 images, one
for each page of our-- with our cat's picture.

545
00:33:45,680 --> 00:33:48,220
Then we have to build a page control, which is new.

546
00:33:48,220 --> 00:33:51,230
So, class ADPageControl, simple enough.

547
00:33:51,230 --> 00:33:56,200
Set the number of pages to be 4, that's the number
of images we're actually dealing with and something

548
00:33:56,200 --> 00:34:00,300
that I may not advocate but I think is really
worth telling to re-show you the full extent

549
00:34:00,300 --> 00:34:04,730
of the declarative layer is to
put in an inline event handler.

550
00:34:04,730 --> 00:34:10,520
So, if you're dealing with desktop content with web content,
you're likely have seen people putting like on mouseover,

551
00:34:10,520 --> 00:34:14,180
on mousemove or whatever, event
listeners directly on an element

552
00:34:14,180 --> 00:34:16,980
and we can do the exact same thing even
though we're dealing with custom events.

553
00:34:16,980 --> 00:34:21,240
So, here we're setting up a special event
handler for control that you've changed.

554
00:34:21,240 --> 00:34:25,870
All we need to do is prefix 80-on to the name of our events

555
00:34:25,870 --> 00:34:29,330
and we can automatically create an
event listener for that declaratively.

556
00:34:29,330 --> 00:34:34,250
So, here that means later on we have to implement
controllers method, page control that you changed.

557
00:34:34,250 --> 00:34:37,130
OK. Now, let's lay this out.

558
00:34:37,130 --> 00:34:43,440
Take a scroll view, match it with CSS, set its width,
set its height to be just little low gap at the bottom

559
00:34:43,440 --> 00:34:48,640
for our page control, which is going to be laid up
flush with its subproperty in width and height again.

560
00:34:48,640 --> 00:34:49,130
It's easy.

561
00:34:49,130 --> 00:34:52,710
Now, we need to lay out the scrollable content.

562
00:34:52,710 --> 00:34:54,630
So, first of all, we'll get a hosting layer.

563
00:34:54,630 --> 00:34:57,040
You might want to have a more specific
selector here of course,

564
00:34:57,040 --> 00:35:00,070
but you know we'll just use the
global ones to make the code easy.

565
00:35:00,070 --> 00:35:03,790
I want to make sure it's 4 times the size of a single page.

566
00:35:03,790 --> 00:35:08,660
So, 4 times 320 pixels is 1280 and we
want to make sure to lay out each image

567
00:35:08,660 --> 00:35:11,730
to have a little bit margin on the
right, except for the last one.

568
00:35:11,730 --> 00:35:12,400
No margin there.

569
00:35:12,400 --> 00:35:15,020
We want to snap to the last image really nicely.

570
00:35:15,020 --> 00:35:19,550
So, now we have to write a little
bit of code but not too much.

571
00:35:19,550 --> 00:35:22,890
So, we want to get started whenever
the DOM content is loaded.

572
00:35:22,890 --> 00:35:27,850
That means the DOM is fully interactive and ready for us
to interact and that means iAd JS has done all its work

573
00:35:27,850 --> 00:35:32,070
and set up all the views and controls that are
already laid out in the content using markup.

574
00:35:32,070 --> 00:35:35,090
So, we call that init method just
like main in your native code

575
00:35:35,090 --> 00:35:37,590
and we called another init method on a controller object.

576
00:35:37,590 --> 00:35:42,870
That's the object that'll be responsible for dealing
with all the interaction within little mini apps.

577
00:35:42,870 --> 00:35:46,010
So, we're going to point at your page control and scroll
view because we want to connect those two together

578
00:35:46,010 --> 00:35:49,800
and we have to do a little work to bind them together.

579
00:35:49,800 --> 00:35:55,130
So, we're going to point at your sharedRoot and we want
to ask our sharedRoot, "Give me all the page controls

580
00:35:55,130 --> 00:35:57,000
so that I can get one that's interesting."

581
00:35:57,000 --> 00:36:01,210
So, we provide these special properties
that are called collection accessors.

582
00:36:01,210 --> 00:36:06,570
They are automatically generated based
on what content is within that subview.

583
00:36:06,570 --> 00:36:10,940
So, if you ask for page control, they'll give
you all the page controls under that sharedRoot.

584
00:36:10,940 --> 00:36:15,640
So, we get the first one, we only have one, so it's
pretty easy, we'll do the same for scroll view.

585
00:36:15,640 --> 00:36:20,200
And for scroll view, we want to be told whenever
we snap to a new page by dragging the scroll view

586
00:36:20,200 --> 00:36:22,620
so we implement a delegate property here.

587
00:36:22,620 --> 00:36:25,270
And if you're familiar with UIKit,
you know exactly what this is.

588
00:36:25,270 --> 00:36:27,570
If you're not, I'm going to summarize real quick.

589
00:36:27,570 --> 00:36:34,260
A delegate is an object that's supporting your element
and extends and pipes into its interaction flow.

590
00:36:34,260 --> 00:36:38,760
So, here we're setting our controller object,
this, to be our scroll view's delegate.

591
00:36:38,760 --> 00:36:43,830
That means that controller will receive
callback that it can implement that will tell

592
00:36:43,830 --> 00:36:45,960
that object what's going on with the scroll view.

593
00:36:45,960 --> 00:36:47,370
So, let's actually just do that.

594
00:36:47,370 --> 00:36:49,750
Let's implement some of that scroll view delegation.

595
00:36:49,750 --> 00:36:54,540
So, there are 2 ways you can snap to a page
using a scroll view with paging enabled.

596
00:36:54,540 --> 00:36:59,250
The first one is you may start to drag the
scroll view, stop for a little bit and release.

597
00:36:59,250 --> 00:37:01,490
You want to snap to a page with nice little animation.

598
00:37:01,490 --> 00:37:02,630
There was no momentum here.

599
00:37:02,630 --> 00:37:04,460
That's another type of interaction.

600
00:37:04,460 --> 00:37:08,880
So, for that first type, we want to implement
the scrollViewDidEndScrollingAnimation delegate,

601
00:37:08,880 --> 00:37:10,610
very descriptive.

602
00:37:10,610 --> 00:37:15,810
And when that happens, we want to make sure we sync
the page control to the scroll view using that method.

603
00:37:15,810 --> 00:37:17,250
We'll have to implement that later.

604
00:37:17,250 --> 00:37:19,080
Now, let's listen to the other delegate.

605
00:37:19,080 --> 00:37:25,810
That one happens when you do a nice little flick, there's
momentum so we do nice little friction-based deceleration

606
00:37:25,810 --> 00:37:29,830
so that it snaps nicely to the next
page with the speed of your gesture.

607
00:37:29,830 --> 00:37:35,280
So, again we call the same method to sync the control
page to scroll view-- the page control, I'm sorry.

608
00:37:35,280 --> 00:37:38,310
So, what we do here is we do 2 simple things.

609
00:37:38,310 --> 00:37:43,430
We get the content offset of our scroll
view, that's the amount of pixels,

610
00:37:43,430 --> 00:37:48,700
the content within the scroll view has been scrolled
and we divide that by the width of the scroll view.

611
00:37:48,700 --> 00:37:50,190
That's the page's worth of content.

612
00:37:50,190 --> 00:37:52,910
Doing that, we actually get the
page number that we are on now.

613
00:37:52,910 --> 00:37:57,410
Just make sure we round it so there's no rounding error
and we just design it to page control's current page.

614
00:37:57,410 --> 00:37:58,750
That's all there is to do.

615
00:37:58,750 --> 00:38:03,960
That alone ensures that our scroll
view is bound to our-- I'm sorry--

616
00:38:03,960 --> 00:38:05,570
that our page control is bound to the scroll view.

617
00:38:05,570 --> 00:38:09,180
Whenever we interact with a scroll view,
the page control is updated in sync.

618
00:38:09,180 --> 00:38:10,960
Now, let's do the other way around.

619
00:38:10,960 --> 00:38:15,870
You remember that in a markup, we already bound to
the control that you change event on a page control.

620
00:38:15,870 --> 00:38:22,710
That event triggers whenever the current page property
changes so we have to look at the current page,

621
00:38:22,710 --> 00:38:26,840
multiply that by the width and we get
the new X-property that we need to assign

622
00:38:26,840 --> 00:38:28,530
to the content offset of the scroll view.

623
00:38:28,530 --> 00:38:32,770
Current page has just changed in there the instance so
exactly what we want to be looking at and all we got

624
00:38:32,770 --> 00:38:39,890
to do is set the ContentOffsetAnimated, get a point with
the X-coordinate and just pass through as the animated flag.

625
00:38:39,890 --> 00:38:45,110
They'll make sure our scroll view nicely
animates with the single method call.

626
00:38:45,110 --> 00:38:46,310
And that's what we did.

627
00:38:46,310 --> 00:38:49,420
We did a mini app in a very small amount of code.

628
00:38:49,420 --> 00:38:50,760
So, let me summarize using controls.

629
00:38:50,760 --> 00:38:55,570
I think the key thing, which is one thing that I
remember today is that we have these 2 techniques.

630
00:38:55,570 --> 00:39:01,810
We have this rich API based on UIKit that lets you
have full programming control and how you create,

631
00:39:01,810 --> 00:39:04,680
lay out and et cetera, all these great views and controls.

632
00:39:04,680 --> 00:39:09,940
But on top of that, there's a declarative layer that makes
it super easy for you to build all this with HTML CSS.

633
00:39:09,940 --> 00:39:11,910
There's a lot more than that.

634
00:39:11,910 --> 00:39:13,530
There's a lot more than what we've seen.

635
00:39:13,530 --> 00:39:19,770
You've seen from this session there's a bunch of different
views and control that come for free by just using iAd JS.

636
00:39:19,770 --> 00:39:24,440
OK. So, we've seen like a scroll view which is
obviously a big deal but we do so much more.

637
00:39:24,440 --> 00:39:27,460
We do sliders, we do carousel views,
which are accustomed to iAd JS.

638
00:39:27,460 --> 00:39:28,750
We don't even have the in UIKit.

639
00:39:28,750 --> 00:39:34,670
We have the nice little 3D rotating carousels that
Steve showed in the Toy Story demo back in April.

640
00:39:34,670 --> 00:39:35,670
We have rating control.

641
00:39:35,670 --> 00:39:36,250
We have start control.

642
00:39:36,250 --> 00:39:37,740
We got all these cool stuff.

643
00:39:37,740 --> 00:39:41,440
We even do color flow, which sounds
amazing but we just do that and you get it

644
00:39:41,440 --> 00:39:44,160
for free by just laying out of HTML in your page.

645
00:39:44,160 --> 00:39:45,740
It's pretty awesome.

646
00:39:45,740 --> 00:39:47,970
So, that was views and control.

647
00:39:47,970 --> 00:39:54,720
Now I'd like to wrap this up and discuss view controllers
and this is all about the ADViewController class.

648
00:39:54,720 --> 00:39:58,720
So, let's go back to the demo that Dean was building.

649
00:39:58,720 --> 00:40:01,440
This is our ad and it just looks like a webpage.

650
00:40:01,440 --> 00:40:02,140
Well, it is.

651
00:40:02,140 --> 00:40:07,650
I mean, an ad is just a web view layered on top
of your application with interactive content.

652
00:40:07,650 --> 00:40:10,390
If you're thinking about web content,
you're thinking about a webpage.

653
00:40:10,390 --> 00:40:16,050
A webpage is just, you know, a big block of markup
and some stuff and if you want to do interactivity,

654
00:40:16,050 --> 00:40:21,070
you can just double the visibility of different
elements in the tree and that, you know, that's awesome.

655
00:40:21,070 --> 00:40:28,570
Well, if you look at that ad you might actually think
that this is not really 1 page but is several pages.

656
00:40:28,570 --> 00:40:33,460
We have the menu, we have the photos, we have the maps
and if you just start thinking from an architectural point

657
00:40:33,460 --> 00:40:39,540
of view, it's important that the interactivity you're
dealing with are specific to each of the screens.

658
00:40:39,540 --> 00:40:44,590
The menu doesn't need to know about what goes on within
the map, the annotations or where the usual occasion is.

659
00:40:44,590 --> 00:40:50,120
It's only the map's job to figure out what's going
on here and make sure the interactivity is correct.

660
00:40:50,120 --> 00:40:51,540
This is really a modular architecture.

661
00:40:51,540 --> 00:40:56,310
These are all little modules, screens,
pages, whatever you want to call them.

662
00:40:56,310 --> 00:41:02,820
I want to make sure we address that in iAd JS and there are
some important performance considerations taken into account

663
00:41:02,820 --> 00:41:05,340
that really makes the case for the architecture.

664
00:41:05,340 --> 00:41:09,240
The first one is if you're building
an ad and you load a lot of content.

665
00:41:09,240 --> 00:41:14,820
Let's say you load all that content upfront, all those
images, all those script, all those styles, all of that.

666
00:41:14,820 --> 00:41:21,770
That's a lot of network content to get and that may just
take a long time to download your ad and that's not good.

667
00:41:21,770 --> 00:41:26,340
The user taps on the banner and he wants to be
able to see the content as soon as possible.

668
00:41:26,340 --> 00:41:27,280
It's not just about that.

669
00:41:27,280 --> 00:41:32,580
It's also if you have a lot of stuff even if it's loaded
quick and, you know, fast enough, you have a lot of content

670
00:41:32,580 --> 00:41:36,940
in your DOM tree and this may have very bad
implications from rendering performance.

671
00:41:36,940 --> 00:41:40,840
I mean the iPhone is amazing but you know
there's only so much a device can do.

672
00:41:40,840 --> 00:41:43,750
So, you want to make sure you're not
dealing with too much of that stuff as well.

673
00:41:43,750 --> 00:41:48,150
So, they mix the case where 2 core features
that we want to add to make things easy for you.

674
00:41:48,150 --> 00:41:53,570
The first one, we want to make sure incremental
download of your ad's content is really easy

675
00:41:53,570 --> 00:41:58,580
and the second one is we want to make
incremental display of your ad just as easy.

676
00:41:58,580 --> 00:42:05,780
So, let's look at the implication of a
modular architecture on view controllers.

677
00:42:05,780 --> 00:42:09,980
The first thing we want to do is we want to obstruct
the loading of all these resources, all these styles,

678
00:42:09,980 --> 00:42:15,560
all these scripts, all these images so you don't have to
do this work and make sure this just happens automatically.

679
00:42:15,560 --> 00:42:21,270
I want to make sure that we add and remove
views or DOM elements if you will only as needed

680
00:42:21,270 --> 00:42:24,770
so that we only have a minimal amount
of content in the DOM tree at any time

681
00:42:24,770 --> 00:42:27,870
to just render what needs to be rendered on screen.

682
00:42:27,870 --> 00:42:31,820
So, let's look at how a view controller is
structured, the anatomy of view controller.

683
00:42:31,820 --> 00:42:36,670
It's really like a bundle of resources for
your page of your screen or your module.

684
00:42:36,670 --> 00:42:39,160
It all starts with the JavaScript
file which is your view controller.

685
00:42:39,160 --> 00:42:40,540
That's the programming logic.

686
00:42:40,540 --> 00:42:42,160
That's where everything happens.

687
00:42:42,160 --> 00:42:44,960
Usually, you probably have that link
from the original webpage right away.

688
00:42:44,960 --> 00:42:46,360
But you can inject it at anytime.

689
00:42:46,360 --> 00:42:47,030
That is no problem.

690
00:42:47,030 --> 00:42:48,970
JavaScript is dynamic in that way.

691
00:42:48,970 --> 00:42:52,420
What the view controller does is going
to point to a bunch of resources.

692
00:42:52,420 --> 00:42:57,840
It can point, for example, for HTML fragment
file, which will just be your views content.

693
00:42:57,840 --> 00:43:00,590
It can point to a series of style sheets.

694
00:43:00,590 --> 00:43:01,820
It can use several style sheets.

695
00:43:01,820 --> 00:43:07,250
A good way to build a modular approach in web content is to
separate style sheets in different box so you can link them

696
00:43:07,250 --> 00:43:10,340
at anyone time to have the minimal amount of style needed.

697
00:43:10,340 --> 00:43:14,470
And you might have a bunch of images that you want
to have pre-loaded when the view comes on the screen

698
00:43:14,470 --> 00:43:18,010
so that there's no empty gaps on
the screen that load on that layer.

699
00:43:18,010 --> 00:43:22,680
So, we have to make that easy for you and we do
that using just a single simple configuration.

700
00:43:22,680 --> 00:43:27,530
Again, we're trying to make like this declarative
type of id comes to life even in JavaScript.

701
00:43:27,530 --> 00:43:30,270
So the first thing we do, we implement
our menu controller here.

702
00:43:30,270 --> 00:43:32,330
We make it super class to be ADViewController.

703
00:43:32,330 --> 00:43:35,230
We want to have all the great features
of the ADViewController come

704
00:43:35,230 --> 00:43:38,500
for free so we make sure we just extend it.

705
00:43:38,500 --> 00:43:45,220
Then we call the default constructor of
ADViewController with the configuration object and we want

706
00:43:45,220 --> 00:43:47,560
to describe the various files that we're interested in.

707
00:43:47,560 --> 00:43:49,880
So we're going to talk about the content view.

708
00:43:49,880 --> 00:43:51,250
We want a given style sheet.

709
00:43:51,250 --> 00:43:53,050
It could be many to different style sheets.

710
00:43:53,050 --> 00:43:56,300
We want a bunch of images to be
pre-loaded with the rest of the content.

711
00:43:56,300 --> 00:43:58,610
So, let's look at what happens behind the scenes.

712
00:43:58,610 --> 00:43:59,960
So, we have a phone.

713
00:43:59,960 --> 00:44:02,210
Let's pretend it has an ad loaded into it.

714
00:44:02,210 --> 00:44:07,030
There's a view controller on one end and that view
controller is a delegate that's going to get message

715
00:44:07,030 --> 00:44:09,370
as the view controller's view is being loaded.

716
00:44:09,370 --> 00:44:15,850
So you can easily have another object be
monitoring, the loading of a given view controller.

717
00:44:15,850 --> 00:44:22,540
So, let's consider now your user interacts with the phone
and wants to put that view controller's view on screen.

718
00:44:22,540 --> 00:44:25,210
Well, that means we need to start creating a view for it.

719
00:44:25,210 --> 00:44:26,280
Yeah, first.

720
00:44:26,280 --> 00:44:29,480
The view controller manages a view so as
soon as you need it, you need to get it back.

721
00:44:29,480 --> 00:44:31,200
You notice here we're not actually getting the content view.

722
00:44:31,200 --> 00:44:32,540
We're just getting a view.

723
00:44:32,540 --> 00:44:36,580
We need to give that back so if the user wants to put
the view on the screen right away, you can do that.

724
00:44:36,580 --> 00:44:39,460
It won't have the content, but
that will come later, you'll see.

725
00:44:39,460 --> 00:44:45,650
So, it gets a viewDidLoad message onto its view controller
class and that says that the process is starting.

726
00:44:45,650 --> 00:44:51,520
So, a loading delegate is getting another delegate
method that says that loading is starting as well.

727
00:44:51,520 --> 00:44:53,360
So, that's one we might want to start putting

728
00:44:53,360 --> 00:44:57,040
like a little animation spinner say,
well, we're loading stuff in background.

729
00:44:57,040 --> 00:45:02,110
That's when a view controller automatically starts sending
all those requests to the background using XMLHttpRequest.

730
00:45:02,110 --> 00:45:03,090
You don't have to worry about this.

731
00:45:03,090 --> 00:45:09,840
This just happens for free and the server assembles
those files and starts sending them down to our device.

732
00:45:09,840 --> 00:45:11,630
So, we're going to get all those files one by one.

733
00:45:11,630 --> 00:45:15,060
We don't even know which order and you don't need
to worry about that but you'll get notifications

734
00:45:15,060 --> 00:45:16,770
in your loading delegate as that happens.

735
00:45:16,770 --> 00:45:18,930
It tells you well, here, I've got a new file.

736
00:45:18,930 --> 00:45:21,660
Here it is, here's its URL and that is very useful.

737
00:45:21,660 --> 00:45:26,710
So, if you want to put like a little progress bar you
can have it fill in gradually as you get those messages.

738
00:45:26,710 --> 00:45:30,270
So, we're getting towards the end
of our content loading here.

739
00:45:30,270 --> 00:45:35,960
What we need now is one last image and
we'll be ready to set the whole view up.

740
00:45:35,960 --> 00:45:37,560
Here we go.

741
00:45:37,560 --> 00:45:43,050
So now we start with one last message to our
delegate saying we've loaded a required file.

742
00:45:43,050 --> 00:45:45,450
And now we can start doing something interesting.

743
00:45:45,450 --> 00:45:49,120
We tell the loading delegate one
last time we finished loading file

744
00:45:49,120 --> 00:45:51,560
so you can even listen to just the start and the end.

745
00:45:51,560 --> 00:45:55,770
You don't have to worry about the ones
that are coming for each individual file.

746
00:45:55,770 --> 00:46:00,150
And now we get another message just like we
have viewDidLoad that says contentViewDidLoad.

747
00:46:00,150 --> 00:46:04,400
What that means is that we've done an immense
amount of work for you behind the scenes.

748
00:46:04,400 --> 00:46:10,480
We've actually taken the HTML, we've parsed it, we get in
the string, we've created the DOM elements out of that,

749
00:46:10,480 --> 00:46:12,790
we've created a view with the DOM elements.

750
00:46:12,790 --> 00:46:16,120
We've done all that automatically
for free for you and we've created

751
00:46:16,120 --> 00:46:19,820
that content view that we just put into our existing view.

752
00:46:19,820 --> 00:46:22,210
We've also taken the style sheets, put in the tree,

753
00:46:22,210 --> 00:46:25,040
loaded it up and made sure all the
images were ready to be displayed.

754
00:46:25,040 --> 00:46:27,040
We've done all that for you automatically.

755
00:46:27,040 --> 00:46:28,810
So, that's it.

756
00:46:28,810 --> 00:46:31,190
Our loading mechanism is all done.

757
00:46:31,190 --> 00:46:35,480
So, if we go back to the configuration
that we had, we also had this ID property.

758
00:46:35,480 --> 00:46:40,010
This ID property is short but it's very,
very, very significant and meaningful.

759
00:46:40,010 --> 00:46:43,160
What it does is it just provides a
unique identifier for view controller

760
00:46:43,160 --> 00:46:47,030
so you can identify this view controller among
all the other view controllers that you have.

761
00:46:47,030 --> 00:46:52,660
You may have a bunch of screens in your ad and you want to
get the pointers to that specific one from anywhere else.

762
00:46:52,660 --> 00:46:58,610
Well, because we're given an ID of menu, we can just
look into the ADViewController that extends its array

763
00:46:58,610 --> 00:47:04,260
and that compiles all the instances of ADViewController
out there and just using the name of the--

764
00:47:04,260 --> 00:47:06,730
the ID of our view controller, we can get a pointer to it.

765
00:47:06,730 --> 00:47:08,640
So, in that case just .menu.

766
00:47:08,640 --> 00:47:09,440
Very simple.

767
00:47:09,440 --> 00:47:14,480
But it has more added values and it really
again ties into these declarative features.

768
00:47:14,480 --> 00:47:17,520
It makes it so easy, for example, to match CSS.

769
00:47:17,520 --> 00:47:23,300
Remember when we loaded our view controller we created
a view automatically to host all of our content.

770
00:47:23,300 --> 00:47:24,320
Well, you didn't create that view.

771
00:47:24,320 --> 00:47:25,820
You didn't even put a class name on it.

772
00:47:25,820 --> 00:47:30,060
You could do that in code actually if you wanted but, you
know, you don't want to do extra work when it's not needed.

773
00:47:30,060 --> 00:47:34,150
Because behind the scenes we make
sure we reflect that ID property

774
00:47:34,150 --> 00:47:36,640
of your view controller on the content view and the view.

775
00:47:36,640 --> 00:47:42,550
So, your content view, if it doesn't already have an
ID attribute, will have an ID attribute as its menu.

776
00:47:42,550 --> 00:47:47,090
And the view that contains the content view
that was created automatically for you will use

777
00:47:47,090 --> 00:47:49,710
that same ID and add a -container suffix to it.

778
00:47:49,710 --> 00:47:52,860
So, you can start writing styles for
content that you didn't even create

779
00:47:52,860 --> 00:47:55,810
because we just tell you here's the ID it's going to be.

780
00:47:55,810 --> 00:47:56,990
That's all automated for you.

781
00:47:56,990 --> 00:48:01,560
We talked a lot about coding features but a lot of
more declarative features about view controller.

782
00:48:01,560 --> 00:48:05,960
Again, we want to make sure we have really
great integration with web technologies.

783
00:48:05,960 --> 00:48:10,470
And the reason for that is we want to add
more convenience for you to be dealing

784
00:48:10,470 --> 00:48:12,280
with these view controllers and interactivity.

785
00:48:12,280 --> 00:48:15,380
So, let's look at some common programming
tasks when dealing with view controllers.

786
00:48:15,380 --> 00:48:20,130
A, you're dealing with a view and a view's
content so you'll probably want to reference

787
00:48:20,130 --> 00:48:23,030
to different objects that you want
to update as you go along.

788
00:48:23,030 --> 00:48:28,390
Then you also really wanted to react to the interaction
within your views so the user taps on a button,

789
00:48:28,390 --> 00:48:32,590
updates the label of another object
that you'll get a reference in step 1.

790
00:48:32,590 --> 00:48:34,980
Well, that's really kind of common.

791
00:48:34,980 --> 00:48:38,930
And the third thing is one of the
design pattern that we think is going

792
00:48:38,930 --> 00:48:45,100
to be pervasive throughout ads is the transitions
between various screens, the various modules.

793
00:48:45,100 --> 00:48:51,260
So, these are a fair amount of code and some are
really easy but repetitive and some are really hard

794
00:48:51,260 --> 00:48:52,970
like managing a transition is a lot of work.

795
00:48:52,970 --> 00:48:55,610
So we're going to address this with 3 features.

796
00:48:55,610 --> 00:48:58,640
The first one is outlets.

797
00:48:58,640 --> 00:49:05,030
That's the same terminology we use in Objective-C coding
and what it does is it automatically creates references

798
00:49:05,030 --> 00:49:07,580
to views or elements in your content view.

799
00:49:07,580 --> 00:49:13,420
Notice here I say view and element because we treat
both elements that are managed by an ADView and elements

800
00:49:13,420 --> 00:49:16,210
that are just regular HTML elements the same.

801
00:49:16,210 --> 00:49:20,280
And you can point to either of
those using the same technique.

802
00:49:20,280 --> 00:49:26,760
And that technique is using AD-outlet attribute, just give
it a name and that makes it easy for you to get a reference

803
00:49:26,760 --> 00:49:29,540
to that object on the outlets property
of your view controller.

804
00:49:29,540 --> 00:49:32,610
So you can do this.outlets.title and
you get a pointer to that element.

805
00:49:32,610 --> 00:49:33,780
You don't need to do get on with ID.

806
00:49:33,780 --> 00:49:35,190
You don't need to do any of that.

807
00:49:35,190 --> 00:49:38,570
In fact you've noticed here, we
don't even use the ID attribute.

808
00:49:38,570 --> 00:49:42,660
That would be a good way to do things except
we're dealing again with a modular architecture.

809
00:49:42,660 --> 00:49:45,560
Even though all these things will end
up in the same document at some point,

810
00:49:45,560 --> 00:49:50,150
to make sure there's not any ID clashing which
is supposed to be unique to the whole document.

811
00:49:50,150 --> 00:49:56,700
We want to make sure we have an ID that may be
repeated but just specific to that one view controller.

812
00:49:56,700 --> 00:49:57,860
So let's talk about actions.

813
00:49:57,860 --> 00:50:01,420
It would be great if you could bind actions
to your view controller just as easily.

814
00:50:01,420 --> 00:50:02,790
Well we provide a way to do that.

815
00:50:02,790 --> 00:50:06,980
We automatically register callback in
the context of a view's view controller

816
00:50:06,980 --> 00:50:10,070
by just adding one attribute, the AD-action attribute.

817
00:50:10,070 --> 00:50:14,190
And by saying this that means my view
controller needs to implement a playAudio method

818
00:50:14,190 --> 00:50:16,790
and that gets called back automatically
in the context of view controller.

819
00:50:16,790 --> 00:50:18,650
You don't have to worry about getting a reference to it.

820
00:50:18,650 --> 00:50:20,050
This is all done automatically.

821
00:50:20,050 --> 00:50:23,870
All you got to do is focus on implementing
that method, that's it.

822
00:50:23,870 --> 00:50:25,040
Let's talk about transitions.

823
00:50:25,040 --> 00:50:27,970
Transitions are like a specific type of actions.

824
00:50:27,970 --> 00:50:29,680
So, we've already simplified things for you.

825
00:50:29,680 --> 00:50:33,590
You can get pointed to your elements and you can
know when an element has actually been activated.

826
00:50:33,590 --> 00:50:37,530
So at that point you should be able to
just trigger transition using JavaScript.

827
00:50:37,530 --> 00:50:39,910
Well, that's not what we want you to do.

828
00:50:39,910 --> 00:50:44,330
It's so pervasive in what we think people are going
to build at, that we want to make it super easy.

829
00:50:44,330 --> 00:50:49,190
So since our view controllers already
have IDs, it should be easy to say well,

830
00:50:49,190 --> 00:50:51,730
this should just transition to that view controller.

831
00:50:51,730 --> 00:50:56,180
And we just do that using the AD-transition-to attribute.

832
00:50:56,180 --> 00:51:01,720
You can just give the ID of a controller, for example,
maps and will automatically transition to that element.

833
00:51:01,720 --> 00:51:03,180
And this abstracts so many things.

834
00:51:03,180 --> 00:51:05,280
First, it abstracts the loading of the view controller.

835
00:51:05,280 --> 00:51:12,020
We load the view controller's content dynamically when are
needed so we don't spend too much time on loading the app.

836
00:51:12,020 --> 00:51:14,420
And when we do transition we got to do so much.

837
00:51:14,420 --> 00:51:15,920
We got to load that content.

838
00:51:15,920 --> 00:51:17,930
We got to add its view when it's ready.

839
00:51:17,930 --> 00:51:22,990
We need to make sure we have the transitions happen
in sync for both of them and then when it's done,

840
00:51:22,990 --> 00:51:24,760
we need to remove the object controller's view, et cetera.

841
00:51:24,760 --> 00:51:27,910
And it's just a lot of work to
trigger all the notifications.

842
00:51:27,910 --> 00:51:28,950
You don't want to deal with that.

843
00:51:28,950 --> 00:51:30,850
So we do that all automatically for you.

844
00:51:30,850 --> 00:51:34,700
So to summarize the core features of view
controller is first of all the automatic loading

845
00:51:34,700 --> 00:51:38,500
of all the screen resources as if they were
a single bundle loaded through a network.

846
00:51:38,500 --> 00:51:40,760
You don't have to worry about any HTTP connection.

847
00:51:40,760 --> 00:51:42,020
It's all done for you.

848
00:51:42,020 --> 00:51:45,700
And then when you're actually building
your scene, this is all done incrementally

849
00:51:45,700 --> 00:51:48,890
with automated transitions for a great effect.

850
00:51:48,890 --> 00:51:54,850
We've gone further and just standardized even like petty
little common coding test to make it even easier for you so,

851
00:51:54,850 --> 00:51:57,700
and we've done all that very easily
with more declarative features

852
00:51:57,700 --> 00:52:01,670
so you can write less code and
create less errors in your code.

853
00:52:01,670 --> 00:52:02,550
So that's it.

854
00:52:02,550 --> 00:52:04,500
That was our 4 key points today.

855
00:52:04,500 --> 00:52:10,430
We started discussing the motivation of iAd JS, the
mix of rich media and mini apps, HTML5 and UIKit.

856
00:52:10,430 --> 00:52:16,100
Some of the core JavaScript enhancements we've made should
make inheritance easier, property synthesis, and et cetera.

857
00:52:16,100 --> 00:52:20,170
Dealing with views and control, putting things
on screen, both with a rich JavaScript API

858
00:52:20,170 --> 00:52:23,910
and a super simple declarative approach with CSS and HTML.

859
00:52:23,910 --> 00:52:26,330
And finally, dealing with view
controllers, which we have just talked about.

860
00:52:26,330 --> 00:52:32,970
I want to go back to the original slide when
we were discussing rich media and mini apps.

861
00:52:32,970 --> 00:52:40,670
Really this framework is all about this, revealing
all this with web technologies, HTML5 and UIKit,

862
00:52:40,670 --> 00:52:45,200
100 percent web standards coming together to build iAd JS.

863
00:52:45,200 --> 00:52:46,510
Thank you.

864
00:52:46,510 --> 00:52:52,150
[ Applause ]

865
00:52:52,150 --> 00:52:55,470
So for more information, you can
contact our Evangelist Vicki Murley.

866
00:52:55,470 --> 00:53:00,200
You can download the iAdDeveloper Package, you can download
our documentation, which is still a work in progress

867
00:53:00,200 --> 00:53:03,690
but we're working hard to make sure
everything that's rich framework is documented.

868
00:53:03,690 --> 00:53:07,140
And we're building some forums for you to discuss iAd JS on.

869
00:53:07,140 --> 00:53:09,270
There were some great sessions.

870
00:53:09,270 --> 00:53:13,750
Dean was just here before me giving me a
more practical approach at how to build ads.

871
00:53:13,750 --> 00:53:17,970
We had a session about integrating ads
with iAd and it's being repeated tomorrow.

872
00:53:17,970 --> 00:53:19,870
There are a bunch of great sessions this week.

873
00:53:19,870 --> 00:53:24,860
Some being repeated tomorrow morning about audio and
video, CSS effects, HTML5, Touch Events, and et cetera.

