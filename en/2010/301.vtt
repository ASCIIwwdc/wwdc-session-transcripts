WEBVTT

00:00:06.230 --> 00:00:08.530
>>Todd Fernandez: Good afternoon everyone.

00:00:08.530 --> 00:00:14.620
Welcome to Session 301, Mastering Xcode
for iPhone OS, I mean iOS development.

00:00:14.620 --> 00:00:21.990
I'm Todd Fernandez and I manage the Xcode iPhone tools
and Dash Code teams, and I am very happy to be here

00:00:21.990 --> 00:00:28.570
with you today to tell you about all the great
new features in the tools in the new SDK.

00:00:28.570 --> 00:00:32.450
But I'd like to start the session by posing a question.

00:00:32.450 --> 00:00:35.370
Why are you all here?

00:00:35.370 --> 00:00:37.460
I'll even hazard an answer.

00:00:37.460 --> 00:00:41.840
I believe you're here to learn how to get
the most out of your development tools,

00:00:41.840 --> 00:00:45.060
so you can create and app that earns a Five-Star review.

00:00:45.060 --> 00:00:46.040
Am I close?

00:00:46.040 --> 00:00:48.190
All right.

00:00:48.190 --> 00:00:54.510
But let's be honest, what are those five
stars, what are they really all about?

00:00:54.510 --> 00:00:59.590
[ Laughter ]

00:00:59.590 --> 00:01:01.730
But how do you get there?

00:01:01.730 --> 00:01:07.580
Well, I think you've made a great start by
coming to WWDC10, the center of the app universe.

00:01:07.580 --> 00:01:12.610
And for the next hour, I'd like to be your guide on
a journey through the iPhone development experience,

00:01:12.610 --> 00:01:19.750
iPhone development universe, where I will orient those of
you new to the platform, as well as tell all of you all

00:01:19.750 --> 00:01:22.710
about the great new features that
we've added and the new tools.

00:01:22.710 --> 00:01:29.080
Now, as an aside before we really get going here, for those
of you Star Trek fans, I confess that I was much happier

00:01:29.080 --> 00:01:34.270
about this journey to the stars metaphor before I
knew I was going to be wearing a red shirt on stage.

00:01:36.710 --> 00:01:40.920
I'm just really hoping that the stage represents the
bridge of the Enterprise and not an exotic planet

00:01:40.920 --> 00:01:44.050
where I've been sent as part of an away team.

00:01:44.050 --> 00:01:50.070
And then I've got this weird earphone, I feel like I'm
part of the Borg to, that's the end of my Star Trek.

00:01:50.070 --> 00:01:52.440
Let's get started.

00:01:52.440 --> 00:01:55.990
So, in fact, this is the first
of a two-part series of sessions.

00:01:55.990 --> 00:02:02.180
Again, this afternoon I'm going to give you a tour of the
complete development cycle, and then tomorrow morning,

00:02:02.180 --> 00:02:09.480
we're going to go deeper in several critical areas, which
I'll identify as I go through the content this afternoon.

00:02:09.480 --> 00:02:12.160
Again, today we're going to start
with a tour of the complete cycle.

00:02:12.160 --> 00:02:19.670
I also want to make clear at that outset that I'm
not going to talk about Xcode 4 this afternoon.

00:02:19.670 --> 00:02:25.840
While we're very excited about Xcode 4 and we hope all
of you are as well, today we want to help you get ready

00:02:25.840 --> 00:02:29.310
to get your app into the App Store
as quickly as possible, and for that,

00:02:29.310 --> 00:02:34.350
you're going to be using the new
iPhone, iPhone SDK 4 and Xcode 3.

00:02:34.350 --> 00:02:39.020
All right, well, how does one get started on this journey?

00:02:39.020 --> 00:02:42.800
We're going to start by talking about developing your app.

00:02:42.800 --> 00:02:46.100
And, what's the first thing you need to develop a great app?

00:02:46.100 --> 00:02:47.650
A great idea.

00:02:47.650 --> 00:02:53.140
Now, I can't help you much with that, but once you
have your great idea, that's where the tools come in.

00:02:53.140 --> 00:03:02.410
And, Xcode provides a number of different templates to
get you started to turn that great idea into a great app.

00:03:02.410 --> 00:03:07.500
There are number of different template types, depending
upon what kind of application you're building.

00:03:07.500 --> 00:03:13.710
You can also decide whether you want to create an iPhone
version of that template, iPad, or we hope universal,

00:03:13.710 --> 00:03:18.030
which will then run on all of the iPhone OS devices.

00:03:18.030 --> 00:03:22.120
All of our templates create working apps right
out of the box, so it's very easy for you

00:03:22.120 --> 00:03:26.820
to get something working immediately and start
experimenting as you start learning the frameworks,

00:03:26.820 --> 00:03:30.280
and add new to functionality that
your particular idea needs.

00:03:30.280 --> 00:03:34.920
For those of you with existing iPhone
projects, we also make it very easy to upgrade

00:03:34.920 --> 00:03:38.700
that project to also build a version of it for iPad.

00:03:38.700 --> 00:03:43.320
Simply select the Upgrade Current Target
for iPad menu item from the project menu,

00:03:43.320 --> 00:03:45.850
and you're ready to start customizing it for iPad.

00:03:45.850 --> 00:03:54.120
There are a number of important build settings
that control, first, what API's your app uses,

00:03:54.120 --> 00:03:56.810
and we'd really encourage you to always use the latest SDK.

00:03:56.810 --> 00:04:03.970
And a couple of other settings that control which
devices and which OS versions your app supports,

00:04:03.970 --> 00:04:06.980
and were going to talk a lot more about this tomorrow.

00:04:08.990 --> 00:04:11.810
Finally, this is where your expertise comes in.

00:04:11.810 --> 00:04:18.190
Where you actually use the tools to start creating
the user interface, the behavior of your application,

00:04:18.190 --> 00:04:20.190
and there's a variety of great tools to do so.

00:04:20.190 --> 00:04:26.780
For an Xcode source editor and all the productivity features
to help you write that code from, and learn the frameworks

00:04:26.780 --> 00:04:34.250
and new API's, Interface Builder to build
your user interface, Xcode's build system

00:04:34.250 --> 00:04:40.840
and especially the Static Analyzer, which you can use
to find complicated bugs in your code and then walk,

00:04:40.840 --> 00:04:47.380
have Xcode explain how, in fact, the bug
occurs so that you can understand and fix it.

00:04:47.380 --> 00:04:52.490
And finally, the integrated documentation, especially
Quick Help, which is great as you're learning UIKit

00:04:52.490 --> 00:04:56.420
and the other frameworks you need
to create great iPhone apps.

00:04:56.420 --> 00:05:00.370
It's very easy to access that information
right from the Source Editor.

00:05:00.370 --> 00:05:06.380
But instead of talking more about this, I thought it would
be better to have Jacob Xaio come up and give you a demo.

00:05:06.380 --> 00:05:07.790
Take it away Jacob.

00:05:07.790 --> 00:05:10.310
>>Jacob Xiao: Thanks Todd.

00:05:10.310 --> 00:05:14.760
Okay, let's get started by creating
our new iPhone app project.

00:05:14.760 --> 00:05:20.340
So, we use one of these templates, and
as you can see, they're quite a few here.

00:05:20.340 --> 00:05:29.070
Some of them are iPhone only, and some of them are iPad
only, for a few of them, you can pick between either an iPad

00:05:29.070 --> 00:05:33.890
or an iPhone version, but I'm going to
use the Window based application template,

00:05:33.890 --> 00:05:36.940
because I want to create a universal application.

00:05:41.940 --> 00:05:45.130
Ok and here's our new app project.

00:05:45.130 --> 00:05:50.710
And one of the great things about these templates
is that they're ready to go right out of the box,

00:05:50.710 --> 00:05:56.940
so I can just hit the Build and Run
button and it will launch into simulator.

00:05:56.940 --> 00:06:02.720
And you can see this is using our new iPhone 4
simulator, so it looks great, but it's a little blank now,

00:06:02.720 --> 00:06:06.260
so that's where your great idea comes in.

00:06:06.260 --> 00:06:14.200
Ok, let's see what this template has set up for us We have
a shared group, where you can put your code and resources

00:06:14.200 --> 00:06:20.930
that you want to share between the iPhone and the
iPad version of the app, then you have an iPhone group

00:06:20.930 --> 00:06:28.080
where you can put your iPhone specific code, and you
can see we already have an app delegate and an interface

00:06:28.080 --> 00:06:31.100
that will be used for the iPhone version.

00:06:31.100 --> 00:06:37.630
And similarly, we have the iPad group where we
have the iPad's app delegate and its own interface.

00:06:37.630 --> 00:06:40.810
Okay, let's get started with the iPhone version.

00:06:46.050 --> 00:06:53.030
I'd like for my application to have a translucent
status bar, so let's set that up here at launch.

00:06:53.030 --> 00:06:56.840
Okay, I'll send a message to application, and you can see

00:06:56.840 --> 00:07:02.530
that Xcode does auto-completing the Xcode
application of the application variable name.

00:07:02.530 --> 00:07:09.470
And the same thing happens when I set
the, with the Set Status Bar style method.

00:07:09.470 --> 00:07:18.620
In fact, even this enumerated type, I can just hit
Option-Escape and I see all the possible completions

00:07:18.620 --> 00:07:23.080
for that, and this is really great for
going through an enumerated type like this.

00:07:23.080 --> 00:07:26.910
I can just see which one I want, which is black translucent.

00:07:26.910 --> 00:07:34.990
Okay, next let's add a method here to show
some information about our application.

00:07:39.300 --> 00:07:49.710
And I'm going to use a UIAlertView to
show information about the iPhone app.

00:07:49.710 --> 00:07:54.050
Oh, I forgot to add the first bracket
here, but Xcode can do that for me too

00:07:54.050 --> 00:07:57.190
if I just add the completed, the end bracket here.

00:07:57.190 --> 00:08:00.650
It'll just insert that for me.

00:08:00.650 --> 00:08:08.450
And now, I have this init method, and you can see
it has these placeholders for me to put my content,

00:08:08.450 --> 00:08:19.570
and I can hit Control-Slash to quickly jump between
those, and it makes it easy to fill out this long method.

00:08:22.390 --> 00:08:25.980
Okay, now let me show the alert.

00:08:27.180 --> 00:08:30.850
And another great feature that
Xcode has is Build and Analyze.

00:08:30.850 --> 00:08:34.850
I can just choose that and it will build my application

00:08:34.850 --> 00:08:38.700
and look for any potential problems,
which it looks like it's found one.

00:08:38.700 --> 00:08:44.410
Says we may be leaking an object here, and I can
just click on that and it will show me the flow

00:08:44.410 --> 00:08:47.700
of the application and where the potential problem is.

00:08:47.700 --> 00:08:53.260
So it looks like we're creating this alert view here,
but then when we're done with it, we're not releasing it,

00:08:53.260 --> 00:09:04.770
so let me just add the release method here, and we'll
build and analyze again, great and the problem's gone.

00:09:04.770 --> 00:09:10.860
Now I'd like to trigger this method from Interface Builder
in a button, so to get it to show up in Interface Builder,

00:09:10.860 --> 00:09:18.370
I just use the IBAction return value,
and copy this method into my header.

00:09:18.370 --> 00:09:36.300
Now I can open up the interface file in Interface Builder,
add a button and when I control drag it to my app delegate,

00:09:36.300 --> 00:09:42.220
you can see the method I added right here.

00:09:42.220 --> 00:09:45.980
Ok, now let's build and run this
new version of the application.

00:09:48.190 --> 00:09:55.380
Great, here's our translucent menu Status
Bar and the Info button with our alert.

00:09:55.380 --> 00:10:01.570
Now I'll go Home and back to Xcode, but Xcode
says that the applications still running,

00:10:01.570 --> 00:10:08.660
and that's because of the new multi-tasking in iOS 4,
so the application really is still running suspended.

00:10:08.660 --> 00:10:14.830
And, if I want to confirm that, I think one of these
methods is related to that, I think it's this one,

00:10:14.830 --> 00:10:21.860
but if I want to find out more, I can Command double-click
on the method to jump right to it in the header file,

00:10:21.860 --> 00:10:28.030
here in UIApplication.H. If I want to see
more information, I can Option double-click

00:10:28.030 --> 00:10:32.620
and I get the Quick Help popup,
tells me a little information here.

00:10:32.620 --> 00:10:36.580
But if I really want to see all of the
documentation, I can just click on the book,

00:10:36.580 --> 00:10:39.850
and that brings up the full documentation here.

00:10:39.850 --> 00:10:45.580
Yeah, this looks like the one I want, so
I'll just go back and set a break point here,

00:10:45.580 --> 00:10:51.250
and now when I bring the application
to the foreground again, yep,

00:10:51.250 --> 00:10:57.360
sure enough, it's stopping here at the break point.

00:10:57.360 --> 00:11:01.320
Okay, now let's work on the iPad version.

00:11:01.320 --> 00:11:10.750
I'll just copy this method in, and of course, I need to
change iPhone to iPad, and you know, on second thought,

00:11:10.750 --> 00:11:16.580
this iPhone alert is not the best variable name here,
so I should probably change that to be more general,

00:11:16.580 --> 00:11:23.230
and for that I can use Edit All In Scope, by selecting
this variable name and then just picking the Edit All

00:11:23.230 --> 00:11:29.720
In Scope menu item, and this, for this Xcode, we'll
go through and find all occurrence of this variable

00:11:29.720 --> 00:11:34.390
in the current scope, and as you can see,
its changing them all at the same time.

00:11:34.390 --> 00:11:52.970
Ok, now let me go to the iPad interface, and add the
button, and when I Control drag, it's not showing up here.

00:11:52.970 --> 00:11:56.370
That's because I didn't add it to
the header file, that was my mistake.

00:11:56.370 --> 00:12:06.070
Let me just copy it, and use the Go to Counter Part
button, which instantly just takes me to the header file.

00:12:06.070 --> 00:12:14.920
Ok, now I should be able to just
Control drag in, and there it is.

00:12:14.920 --> 00:12:21.940
Then I can use the Overview popup to switch from the
iPhone simulator to the iPad simulator, and when I build

00:12:21.940 --> 00:12:27.050
and run again, the simulator will change to
the iPad mode and here's the iPad version

00:12:27.050 --> 00:12:31.640
of my app with the popup, with the alert view.

00:12:31.640 --> 00:12:35.510
Ok, back to you Todd.

00:12:35.510 --> 00:12:41.090
[ Applause ]

00:12:41.090 --> 00:12:41.930
>>Todd: Thank you Jacob.

00:12:41.930 --> 00:12:47.680
So just to recap, we've seen using a template
to create a new universal app project,

00:12:47.680 --> 00:12:52.900
we've seen several of the important source code and
interface editing workflows as Jacob built user interface

00:12:52.900 --> 00:12:58.470
for that app and wired it up to his source code, he
used Quick Help and the Integrated Documentation Viewer

00:12:58.470 --> 00:13:07.680
to explore the delegate method that gets called
when the app is unsuspended, as well as a little bit

00:13:07.680 --> 00:13:10.170
of building and debugging in the iPhone simulator.

00:13:10.170 --> 00:13:12.730
So, let's continue on our journey.

00:13:12.730 --> 00:13:15.630
We've started developing our app and
we've done a little bit of building,

00:13:15.630 --> 00:13:17.710
but let's talk a little bit more about building.

00:13:17.710 --> 00:13:25.740
So, the device versus simulator; Jacob used the Overview
popup to switch between which simulator he was running in,

00:13:25.740 --> 00:13:30.100
but we've also just greatly simplified
that choice between device and simulator.

00:13:30.100 --> 00:13:35.580
You just chose your destination device and
then if you've got more than one device,

00:13:35.580 --> 00:13:39.270
you can choose a specific device
right from the Overview popup.

00:13:39.270 --> 00:13:43.420
And, in fact, depending on how you have those build
settings I mentioned earlier, like deployment target,

00:13:43.420 --> 00:13:51.340
that will control which devices appear here, for example, if
your app is configured to build, to have a deployment target

00:13:51.340 --> 00:13:58.430
of OS3.2 and you have a iPhone running
3.1.3, it would not appear in this list.

00:13:58.430 --> 00:14:05.100
Similarly, you can choose Simulator at the top and
then if your deployment target is set appropriately,

00:14:05.100 --> 00:14:09.860
you'll see all the simulator versions
that are compatible with that version.

00:14:09.860 --> 00:14:16.310
Like Jacob built, the universal app, which is
configured with a deployment target of OS3.2,

00:14:16.310 --> 00:14:20.390
which show both the iPad simulator
and the iPhone simulator 4.0.

00:14:20.390 --> 00:14:23.450
There are few new things in the simulator in iOS 4.

00:14:23.450 --> 00:14:29.680
You can now build once and then simulate on multiple
OS versions, just like Jacob just showed you.

00:14:29.680 --> 00:14:38.160
The reason this is possible now in the OS4 SDK is that it's
the simulators now using the modern objective C run time.

00:14:38.160 --> 00:14:41.450
You get many benefits from that, but one of
the most noteworthy is you no longer have

00:14:41.450 --> 00:14:44.970
to declare your instance variable for properties.

00:14:44.970 --> 00:14:49.750
However, there is a cost for that benefit as well as
again the ability to simulate on multiple OS versions

00:14:49.750 --> 00:14:55.260
with the same build, in that, this is an ABI change, so
that any code that you have compiled for the simulator,

00:14:55.260 --> 00:15:00.670
libraries, other code that you're using
will need to be recompiled with the new SDK.

00:15:00.670 --> 00:15:04.850
Moving back to the device, this
was actually introduced in 3.2 SDK,

00:15:04.850 --> 00:15:09.890
where we now incrementally upload your
app to the device as you make changes.

00:15:09.890 --> 00:15:12.620
Only the change bits are uploaded.

00:15:12.620 --> 00:15:18.450
For those of you who have large resources, whether
its audio, video, photos, what have you in your app,

00:15:18.450 --> 00:15:23.190
this can save you a lot of time and give you much
faster turnaround as your Edit, Build and Bug cycles.

00:15:23.190 --> 00:15:26.500
Course, since the simulators running
right on your development system,

00:15:26.500 --> 00:15:31.220
it's still going to offer you faster
turnaround then uploading it to the device.

00:15:31.220 --> 00:15:34.830
But you really need to test your
app on every model you support.

00:15:34.830 --> 00:15:37.020
Although you can save a little bit of time,

00:15:37.020 --> 00:15:41.100
I don't think you need to test both the
iPhone for white, and the iPhone for black.

00:15:41.100 --> 00:15:47.840
To further motivate you to test on devices,
let's talk about why it's important to do so.

00:15:47.840 --> 00:15:51.680
Well, some of this may seem obvious,
but let's talk about it.

00:15:51.680 --> 00:15:54.970
The Mac, of course, where the simulator's
running, is a far more powerful

00:15:54.970 --> 00:15:58.360
and less resource-constrained device than any mobile device.

00:15:58.360 --> 00:16:05.560
And what that means is that performance analysis you do
on, in the simulator, which can absolutely help you find

00:16:05.560 --> 00:16:08.590
and fix serious bugs in your application, is still not going

00:16:08.590 --> 00:16:13.440
to accurately represent the behavior
of app running on devices.

00:16:15.010 --> 00:16:22.240
Further, a lot of the hardware capabilities that the device
has, whether it's a compass, the GPS system, the camera,

00:16:22.240 --> 00:16:26.840
or now on iPhone 4, the gyroscope, those just
aren't available in the iPhone simulator,

00:16:26.840 --> 00:16:32.270
so if your app uses those facilities, you'll need
to do, you'll need to test them on the device.

00:16:32.270 --> 00:16:39.380
And finally, though the iPhone simulator does a good job
of trying to allow you to simulate multi-touch gestures,

00:16:39.380 --> 00:16:44.300
there's really nothing to substitute for
actually interacting with your app on a device

00:16:44.300 --> 00:16:47.230
to really understand how it's going to feel for your users.

00:16:47.230 --> 00:16:52.560
Now again, it's your, you need to decide exactly which older
OS versions and devices that your app is going to support.

00:16:52.560 --> 00:16:58.300
If you are supporting those older devices, you need
to know how your app performs for all of your users.

00:16:58.300 --> 00:17:03.560
And what that means is that you need to keep devices
running older OS versions, because it's not possible

00:17:03.560 --> 00:17:10.700
to rollback the OS version to an
earlier version on a device.

00:17:10.700 --> 00:17:16.670
So I think this, I'll just let you gaze on this for a while
as a public service, you may not have seen this before,

00:17:16.670 --> 00:17:21.690
but this is the device line-up as well as the
OS versions that are supported on each one,

00:17:21.690 --> 00:17:24.380
including the new iPhone 4 there next to the iPad.

00:17:24.380 --> 00:17:28.880
Just kind of, drink it in.

00:17:28.880 --> 00:17:33.420
There will be a pop quiz later.

00:17:33.420 --> 00:17:38.650
All right, well we talked about building on the iPhone
simulator and a little bit on the device, but, of course,

00:17:38.650 --> 00:17:42.910
to build for the device, you need
to have your device provision.

00:17:42.910 --> 00:17:45.120
So, let's continue on our journey.

00:17:45.120 --> 00:17:52.670
So provisioning profile you need on your development system
in order of Xcode to sign your apps so that it can run

00:17:52.670 --> 00:17:56.330
on a device, and you also need that
same provisioning profile on our device

00:17:56.330 --> 00:17:59.780
so that it will authenticate that
app and allow it to be run.

00:17:59.780 --> 00:18:01.210
Now, I want to ask a question.

00:18:01.210 --> 00:18:04.820
How many of you wish the provisioning
was as simple as that animation?

00:18:04.820 --> 00:18:08.720
I have some good news for you.

00:18:08.720 --> 00:18:14.870
Hopefully some of you saw my demo yesterday, but we've
added automatic device provisioning in the new SDK.

00:18:14.870 --> 00:18:19.270
We've worked really hard to make those
simple cases simple and allow you

00:18:19.270 --> 00:18:23.190
to get started developing on a
device as quickly as possible.

00:18:23.190 --> 00:18:26.000
You joined the developer program and everything else is

00:18:26.000 --> 00:18:32.440
on the iPhone provisioning portal,
and everything else is done in Xcode.

00:18:32.440 --> 00:18:36.980
Use that same login information from joining the
program, you enter it into Xcode, and, in fact,

00:18:36.980 --> 00:18:41.940
Xcode will prompt you for this when you add a new
device and you don't have provisioning information.

00:18:41.940 --> 00:18:46.730
Once you've entered that login information,
Xcode will communicate with the portal,

00:18:46.730 --> 00:18:49.320
determine that yes in fact you are a member of the program,

00:18:49.320 --> 00:18:53.750
and then check to see if you already
have provisioning information.

00:18:53.750 --> 00:19:00.020
If you don't, Xcode will ask if you'd like to get started
creating the code sign in request that you'll need

00:19:00.020 --> 00:19:05.080
to get your development certificate and it
will create it for you, upload that request,

00:19:05.080 --> 00:19:09.880
as well as your device information from the
device you've connected, up to the portal,

00:19:09.880 --> 00:19:14.270
which will create the certificate, create a
provisioning profile containing that device

00:19:14.270 --> 00:19:18.880
and certificate and download it to your Mac.

00:19:21.050 --> 00:19:26.300
Now for those of you who are working in teams,
this same process works for multiple certificates,

00:19:26.300 --> 00:19:29.540
multiple engineers, and multiple devices.

00:19:29.540 --> 00:19:36.840
And the way it works is it adds a wildcard app ID so
that this particular provisioning profile can be used

00:19:36.840 --> 00:19:42.670
to develop any application, and all of
that gets wrapped up into a single profile,

00:19:42.670 --> 00:19:49.520
which is then downloaded and installed by Xcode on your Mac.

00:19:49.520 --> 00:19:55.460
Now, once you're making some changes, whether it's
your team's growing, you're adding a new engineer,

00:19:55.460 --> 00:20:00.790
or you're buying now iPhone 4, so you can
test on those and you need to add new devices,

00:20:00.790 --> 00:20:04.500
Xcode will automatically update that,
upload that information to the portal,

00:20:04.500 --> 00:20:09.060
where a new provisioning profile will be
generated and downloaded back to your system.

00:20:09.060 --> 00:20:14.960
And at any time, any of your team members can simply click
the refresh button in the provisioning profiles source

00:20:14.960 --> 00:20:19.670
in the organizer to get the latest
profile or profiles for your team.

00:20:19.670 --> 00:20:26.020
Now I say profiles, because once you get past the simple
cases, there are actually some reasons where you still need

00:20:26.020 --> 00:20:30.130
to create a custom profile on the
iPhone provisioning portal.

00:20:30.130 --> 00:20:37.250
In certain, for certain iOS features, such as
Push Notifications, they actually aren't supported

00:20:37.250 --> 00:20:44.950
with a wildcard app ID, so you'll need to create a custom
profile containing and app ID for your application.

00:20:44.950 --> 00:20:47.770
Another reason is distribution-provisioning profiles.

00:20:47.770 --> 00:20:50.850
Once you're getting ready to distribute
your app, you'll need one of those,

00:20:50.850 --> 00:20:53.140
and that needs to be created on the portal.

00:20:53.140 --> 00:20:57.900
But there's still more good news, because Xcode will still
manage those for you once you've created them on the portal,

00:20:57.900 --> 00:21:01.750
it will download them automatically for
you, and as changes are made to them,

00:21:01.750 --> 00:21:07.280
they will be kept in sync with your development systems.

00:21:08.430 --> 00:21:14.280
Developer Profiles are a great new feature
we added in the previous SDK release, 3.2.

00:21:14.280 --> 00:21:18.610
And what Developer Profiles are is
all of the Code Signed Certificates

00:21:18.610 --> 00:21:21.960
and Provisioning Profiles on your development system.

00:21:21.960 --> 00:21:27.470
You can export that into a single file, which you
then take to another system, so that if you get,

00:21:27.470 --> 00:21:31.570
you've been working on a desktop and now you've got
a new laptop, you can just export your provisioning,

00:21:31.570 --> 00:21:36.240
your Developer Profile from your working
development system, move it over to the other system,

00:21:36.240 --> 00:21:39.820
and you're immediately provisioned
and ready to go develop there.

00:21:39.820 --> 00:21:43.670
Finally, I want to give a brief commercial
for some more sessions coming this week.

00:21:43.670 --> 00:21:49.770
There's some great debugging features in Xcode,
especially targeting some unique features

00:21:49.770 --> 00:21:52.390
about iPhone OS, such as Push Notifications.

00:21:52.390 --> 00:21:57.930
The Xcode Debugger allows you to configure your apps
so that when you launch it, it actually doesn't launch

00:21:57.930 --> 00:22:03.980
until it receives a Push Notification, at which time
the debugger will attach and allow you to debug.

00:22:03.980 --> 00:22:09.260
Instruments is an extremely powerful tool that
makes it really easy to gather a huge amount of data

00:22:09.260 --> 00:22:15.060
about your apps behavior, running it in the iPhone
simulator or on the device, and then also help you analyze

00:22:15.060 --> 00:22:21.430
and make sense of it, to find and fix
performance problems in your code.

00:22:21.430 --> 00:22:27.330
There's also something new in iPhone OS 4, a new UI
automation feature that is part of Instruments as well.

00:22:27.330 --> 00:22:34.530
There's a new Instrument supporting that that allows you to
run a script against the application running on the device

00:22:34.530 --> 00:22:37.490
so that you can automate your user interface testing.

00:22:37.490 --> 00:22:43.520
And we think that's a great addition to Instruments,
especially in combination with the other Instruments

00:22:43.520 --> 00:22:48.960
that can gather information about memory usage
and performance while those tests are being run.

00:22:48.960 --> 00:22:53.770
And with that, I would like to ask Chris
Skogen to come up and give you a demo

00:22:53.770 --> 00:22:55.980
of these last two sections about provisioning and building.

00:22:55.980 --> 00:23:00.120
>>Chris Skogen: So I'm going to give you guys
a quick demo of debugging and using Instruments

00:23:00.120 --> 00:23:02.700
on the app that Jacob started in his previous demo.

00:23:02.700 --> 00:23:07.080
So we're going to bring up Xcode, here's Jacob's demo.

00:23:07.080 --> 00:23:12.700
We're going to start by running the simulator
and looking for issues that we might have found

00:23:12.700 --> 00:23:16.490
or might see in the process of running it.

00:23:16.490 --> 00:23:21.380
Here's Jacob's app, oh my goodness, that's a horrible typo.

00:23:21.380 --> 00:23:22.910
All right, so let's go fix that.

00:23:22.910 --> 00:23:26.080
Now, I'm sure somebody will see where the bug is right away,

00:23:26.080 --> 00:23:28.950
but I'm a bit of an idiot, so I'm
going to put a breakpoint here.

00:23:28.950 --> 00:23:31.510
I'm going to go up and enable breakpoints
and I'm going to hit Build

00:23:31.510 --> 00:23:37.390
And Run on the simulator, and I
will stop when I get to that spot.

00:23:37.390 --> 00:23:40.740
Wow, what could be wrong here?

00:23:40.740 --> 00:23:46.810
Oh look, I'm going to change this to app, perfect.

00:23:46.810 --> 00:23:49.830
All right let's remove this breakpoint.

00:23:49.830 --> 00:23:57.110
We'll stop it, and we'll run it again on the simulator.

00:23:57.110 --> 00:23:58.630
Great, pretty straight forward.

00:23:58.630 --> 00:24:04.150
I know you guys write much more sophisticated
code than I do, so , you'll have to bear with me.

00:24:04.150 --> 00:24:07.880
Now we're going to go up to the Overview popup, now
that we see that its working right on the device.

00:24:07.880 --> 00:24:10.500
We're going to go up to the Overview
popup and we're going to switch

00:24:10.500 --> 00:24:13.370
over to an actual device and see what this thing looks like.

00:24:13.370 --> 00:24:21.390
So I just choose Device, make sure my
breakpoints are enabled, hit Build And Debug.

00:24:21.390 --> 00:24:31.250
Wow, look at all those fingerprints.

00:24:31.250 --> 00:24:40.080
Now we're waiting for it to run, oh, something happened,

00:24:40.080 --> 00:24:47.890
doesn't look like it's actually
run, yep, bad access, where is it?

00:24:47.890 --> 00:24:53.910
I was accessing my mutable data here and I was setting
zeros in every 10, 24th position, don't ask me why,

00:24:53.910 --> 00:24:59.480
and it seems to have crashed, so I'm going to
roll back up and, holy cow, I activated the,

00:24:59.480 --> 00:25:03.560
I allocated way too much data for a device.

00:25:03.560 --> 00:25:06.480
This is actually a good point,
back to what a good reference back

00:25:06.480 --> 00:25:10.370
to the point Todd was making about
always build and run on device.

00:25:10.370 --> 00:25:15.120
This app ran fine in the simulator, the minute
I put it on the device, the device cannot stand

00:25:15.120 --> 00:25:18.200
that big of an allocation, it just doesn't run.

00:25:18.200 --> 00:25:29.650
So, I'm going to go ahead and fix that, stop it, I'm
going to build and run on the device again, here it comes,

00:25:29.650 --> 00:25:37.080
or there it is, and now I can go ahead and
hit Show Info, this is my iPhone app, perfect.

00:25:37.080 --> 00:25:40.050
My app seems to run fine on the device now.

00:25:40.050 --> 00:25:46.740
So let's go ahead, stop that and let's take a look
at Instruments and let's try to profile this app.

00:25:46.740 --> 00:25:52.780
We've actually gone ahead and pre-set up a template for
Instruments that's going to use the UI Automation tools,

00:25:52.780 --> 00:25:58.680
and the new Time Profiler, so I've got
that here in Automated Time Profile.

00:25:58.680 --> 00:26:04.080
I went up here, go back here, we'll start over.

00:26:04.080 --> 00:26:09.830
>>Todd: See it's an automations script,
so you want to run it multiple times.

00:26:09.830 --> 00:26:14.500
>>Chris:Exactly. So I just went up to Run with
Performance Tool, choose Automated Time Profile.

00:26:14.500 --> 00:26:17.360
Now it's going to launch Instruments,
it's going to set Instruments

00:26:17.360 --> 00:26:22.110
up with a UI Automation tool and also the new Time Profiler.

00:26:22.110 --> 00:26:27.700
Down here you can the Java script that we wrote
to actually put the app through its paces.

00:26:27.700 --> 00:26:32.390
It's basically just going to go ahead and tap
the button for us, and take a screen shot before

00:26:32.390 --> 00:26:37.390
and after tapping the button and record the results.

00:26:37.390 --> 00:26:45.490
So right now it is actually already running and you see
down here, here's the Tap Show Info button, before the tap,

00:26:45.490 --> 00:26:50.960
there's the screenshot that we took
after the tap, there's the screenshot

00:26:50.960 --> 00:26:55.810
and the Show Info button tapped test actually passed.

00:26:55.810 --> 00:26:57.890
Script is completed so we can go ahead and stop that.

00:26:57.890 --> 00:27:05.000
And if you guys want to see the automation on the
device, I'm going to run the same process again,

00:27:05.000 --> 00:27:16.390
and we should see the device automatically push
the button, show that, close it and we're done.

00:27:16.390 --> 00:27:19.800
So what is in this Time Profiler that we can see now?

00:27:19.800 --> 00:27:27.190
Well, we can actually see, if I go over here on the left and
I click, Hide Missing Symbols, and Hide System Libraries,

00:27:27.190 --> 00:27:32.460
I'll just see all of the entries for the code in
my project as they were running on the device.

00:27:32.460 --> 00:27:39.330
So here, we can see most of the time, 72% was
in Show Info, so if I double-click on that,

00:27:39.330 --> 00:27:45.720
it will actually show me the code in my
Xcode project that I was using at the time.

00:27:45.720 --> 00:27:50.070
So, that's it, that's a pretty quick tour of
the new Instruments features and also debugging

00:27:50.070 --> 00:27:54.190
on both the simulator and the device, back to you Todd.

00:27:54.190 --> 00:27:59.900
[ Applause ]

00:27:59.900 --> 00:28:01.550
>>Todd: Thank you Chris.

00:28:03.230 --> 00:28:05.160
Thank you.

00:28:05.160 --> 00:28:10.250
So just again to recap, Chris built the
device and debugged and device in simulator,

00:28:10.250 --> 00:28:12.740
and gave you a brief peek at Instruments.

00:28:12.740 --> 00:28:18.810
I hope, again, you'll be encouraged to go check that
out in sessions later this week and also in the labs.

00:28:18.810 --> 00:28:24.120
And the combination with your new UI Automation
Instrument and all the existing Instruments as well

00:28:24.120 --> 00:28:29.870
as the Time Profiler Instrument that's new in iPhone
OS SDK4, just make Instruments even more powerful

00:28:29.870 --> 00:28:35.360
and that time line there you can add multiple
Instruments and be able to correlate all that information

00:28:35.360 --> 00:28:41.330
with individual events that you're sending with
your UI Automation script, it's very powerful.

00:28:42.730 --> 00:28:46.790
All right, well we've developed
our app, we've built it on devices

00:28:46.790 --> 00:28:50.050
that have been provisioned, now
our app is clearly ready to go.

00:28:50.050 --> 00:28:52.880
You remember that great idea I said
you were going to come up with?

00:28:52.880 --> 00:28:55.140
Well clearly we don't have it.

00:28:55.140 --> 00:28:58.340
Now it's time to distribute our app.

00:28:59.450 --> 00:29:05.720
So one of the great new things that we added in
iPhone SDK 3.2, is that instead of previously

00:29:05.720 --> 00:29:11.530
when Xcode was pretty much done helping you once it built
your dot app, we now have first class support for a variety

00:29:11.530 --> 00:29:16.040
of powerful distribution options
in Xcode and the latest SDK's.

00:29:16.040 --> 00:29:20.680
It all starts with allowing you to
create archives of your application.

00:29:20.680 --> 00:29:23.420
You can think of this as kind of a frozen build of your app.

00:29:23.420 --> 00:29:28.510
One of the things that you have hopefully
known to do, that we documented, is that,

00:29:28.510 --> 00:29:33.410
in order to be able to symbolicate crash reports that are
generated by that particular release of your application,

00:29:33.410 --> 00:29:38.790
you need to preserve the descend that was created
from that specific build of your application.

00:29:38.790 --> 00:29:42.880
Without it, you can't get it back and you
can't symbolicate those crash reports,

00:29:42.880 --> 00:29:45.500
so you've probably been doing that manually.

00:29:45.500 --> 00:29:49.730
Well archives do that automatically for you in Xcode.

00:29:49.730 --> 00:29:57.590
Another huge advantage of using archives, is that previously
it was only possible to prepare your app for distribution

00:29:57.590 --> 00:30:03.040
by building it and signing it in one-step in
Xcode, which meant that you couldn't actually test

00:30:03.040 --> 00:30:08.440
that final release build of your app that you
were going to submit to the store or distribute.

00:30:08.440 --> 00:30:15.120
Archives separate those two steps so that you can freeze
that build of your app, test it thoroughly and make sure

00:30:15.120 --> 00:30:21.780
that those bits are good, and once you're sure they are,
then you can use that frozen build of your app as the source

00:30:21.780 --> 00:30:24.940
for a distribution without having to rebuild.

00:30:24.940 --> 00:30:30.280
Steve made clear that one of the most common reasons that
your apps aren't approved within that first seven days is

00:30:30.280 --> 00:30:36.210
because the app actually crashes, and with archives
we've made it really easy for you to avoid that.

00:30:36.210 --> 00:30:41.580
You simply choose the Build and Archive menu item
from the Build menu, and it creates your archive.

00:30:41.580 --> 00:30:44.510
So what actually is an archive?

00:30:44.510 --> 00:30:50.930
It's your app, your dot app bundle, and that unique
descend that was built when that app bundle was build,

00:30:50.930 --> 00:30:56.990
and the Xcode creates a POS with metadata, so
that it appears correctly in the organizer,

00:30:56.990 --> 00:31:00.830
so you can look that and find it, that's what it is today.

00:31:00.830 --> 00:31:06.020
You may be wondering what's the difference
between this new archive and a snapshot

00:31:06.020 --> 00:31:10.030
or a tag of my source that build that app in my repository.

00:31:10.030 --> 00:31:14.650
Well, even if you have the exact source code that
was used to build that released version of your app,

00:31:14.650 --> 00:31:20.770
each build is unique, and if you rebuild that same source,
you will not get an equivalent descend that would allow you

00:31:20.770 --> 00:31:25.640
to symbolicate crash reports, so that your
source code cannot replace an archive.

00:31:25.640 --> 00:31:31.140
Once you have your archive, you can use
the new validation features in Xcode.

00:31:31.140 --> 00:31:37.320
Validation performs many of the same tests that will be
run on your app once you submit it for app store review.

00:31:37.320 --> 00:31:42.520
It detects many common problems,
and often suggests fixes for them.

00:31:42.520 --> 00:31:45.050
We really encourage you to take
advantage of this functionality

00:31:45.050 --> 00:31:49.820
and validate early and often in your development cycle.

00:31:49.820 --> 00:31:55.620
We have several different ways to do so, you can
actually, there's a way to run validation always

00:31:55.620 --> 00:31:59.030
on build, and we'll talk about that more tomorrow.

00:31:59.030 --> 00:32:06.630
And then there's when your preparing to distribute,
when you can run a validation on an archive.

00:32:06.630 --> 00:32:12.820
Before you can run the validation on an archive from
the organizer, you will need to have configured your app

00:32:12.820 --> 00:32:18.190
in iTunes Connect, which I'm sure you're all
familiar with, but the manager application areas

00:32:18.190 --> 00:32:20.840
where you would set your application, its bundle identifier

00:32:20.840 --> 00:32:24.630
and all that information before
you can actually validate your app.

00:32:24.630 --> 00:32:31.560
I just want to briefly mention another important
organizer functionality, the ability to take screenshot

00:32:31.560 --> 00:32:34.120
of your device, which can be used for many purposes,

00:32:34.120 --> 00:32:37.930
including setting up your marketing
information on iTunes Connect.

00:32:37.930 --> 00:32:42.900
You can also use it as the source or
literally the launch image for you application.

00:32:42.900 --> 00:32:48.310
It's often useful for debugging, we saw taking
screenshots as part of our automation testing, and,

00:32:48.310 --> 00:32:50.350
of course, very useful for documentation.

00:32:50.350 --> 00:32:55.960
And, Xcode organizer makes it very easy
for you to take screenshots of your device.

00:32:55.960 --> 00:33:02.720
Returning to validation, in the new archived application
source, you'll see all of your archives at the top,

00:33:02.720 --> 00:33:07.540
organized by bundle identifier, and at the
bottom, there are three different buttons

00:33:07.540 --> 00:33:11.750
for different sharing options;
first being Validate Application.

00:33:11.750 --> 00:33:18.650
When I click that button, Xcode will ask you
for your iTunes Connect login information,

00:33:20.590 --> 00:33:27.300
then ask you for which distribution provisioning profile
you want to re-sign your app for this particular validation

00:33:27.300 --> 00:33:30.900
and which application you want to validate.

00:33:30.900 --> 00:33:35.980
It will then re-sign your app with that
distribution provisioning profile, package it up,

00:33:35.980 --> 00:33:44.020
upload it to iTunes Connect, the test will be run there,
and it will be reported back to you right here in Xcode.

00:33:45.450 --> 00:33:50.580
There are many different types of errors that can be
found an reported this way, and we'll talk more in detail

00:33:50.580 --> 00:33:57.390
about all of them tomorrow, but in fact this
one, I just am missing that iPad sized icon

00:33:57.390 --> 00:34:01.540
and where I need to fix that in my info plist.

00:34:01.540 --> 00:34:07.390
So once, once I validated my application,
there are many different options for sharing.

00:34:07.390 --> 00:34:11.190
You can use your Ad Hoc distribution provisioning
profiles for these to do your beta testing

00:34:11.190 --> 00:34:14.670
or distribute your app to a limited audience.

00:34:14.670 --> 00:34:20.720
Xcode will re-sign your app, package it up again, and attach
it to an email, if that's how you want to send it out,

00:34:20.720 --> 00:34:25.150
or alternatively you can just have it save that
package to discs so that you can post it on a website

00:34:25.150 --> 00:34:30.390
or distribute it however you choose,
sneaker net if you must.

00:34:30.390 --> 00:34:33.510
When you go to a larger audience,
you may want to take advantage

00:34:33.510 --> 00:34:37.140
of the new Enterprise Distribution
feature that was introduced in iOS 4.

00:34:37.140 --> 00:34:45.710
Xcode will actually help you create those files, and
again, we'll go into more detail about that tomorrow.

00:34:45.710 --> 00:34:49.370
This scales much better that Ad Hoc
Distribution and can support, you know,

00:34:49.370 --> 00:34:54.820
larger enterprises with getting your app
directly wirelessly to your employee's devices.

00:34:54.820 --> 00:35:01.560
And , in fact, there's a session immediately following
this session where Chris will be performing another demo,

00:35:01.560 --> 00:35:07.280
immediately following in Nob Hill about managing mobile
devices, where they will also discuss this feature.

00:35:07.280 --> 00:35:09.930
They also have a lab coming up later this week.

00:35:09.930 --> 00:35:15.050
Finally, once you've insured that this application is
good, it's the one you want to send out to your users,

00:35:15.050 --> 00:35:19.980
you can use the final option, Submit
Your App to iTunes Connect.

00:35:19.980 --> 00:35:23.540
We'll, again, perform the same test
that validate application does,

00:35:23.540 --> 00:35:26.680
and then forward your app for App Store review.

00:35:26.680 --> 00:35:32.040
So that it can get to its ultimate
destination, the App Store.

00:35:32.040 --> 00:35:39.660
So with that, I would like to ask Clark to come up
and show you a demo of the demonstration features,

00:35:39.660 --> 00:35:44.700
as well as a little bit more about the organizer features
that are very useful to you in developing your apps.

00:35:44.700 --> 00:35:48.930
>>Clark: So I'm going to start by
opening this app you may have seen before

00:35:48.930 --> 00:35:53.330
in Todd's demos yesterday, it's just the Picture Viewer App.

00:35:53.330 --> 00:36:02.410
Now, say I'm ready to start distributing this app to a
group of beta testers or just some friends, whatever,

00:36:02.410 --> 00:36:14.370
I can start by choosing the Build an Archive command.

00:36:14.370 --> 00:36:22.690
Because I didn't have the appropriate provisioning
profiles on here, I can go, just hit Refresh,

00:36:22.690 --> 00:36:28.100
and because I've already logged into the
portal, it downloads them all for me, and now,

00:36:28.100 --> 00:36:34.540
I can come back to Picture Viewer, that builds fine.

00:36:34.540 --> 00:36:43.190
So, I go to Build An Archive, you see it added another
archive to this list, I made a few earlier today,

00:36:43.190 --> 00:36:51.940
and say for instance I wanted to go validate it,
so I enter my iTunes Connect info, hit Validate,

00:36:51.940 --> 00:36:58.620
it defaults to choosing a distribution certificate, which
is what I want in this case and Picture Viewer is the name

00:36:58.620 --> 00:37:03.180
of app on iTunes Connect, so I hit Validate.

00:37:03.180 --> 00:37:10.800
And, just as in Todd's example, this app doesn't
have an iPad-sized icon, and to fix that I would,

00:37:10.800 --> 00:37:14.710
of course, go add one and add it to the plist.

00:37:14.710 --> 00:37:20.350
Now, say for instance I wanted to, as I said
before, share this with a group of beta testers.

00:37:20.350 --> 00:37:27.330
I went to Share Application, again, you'll see that it has
this selected by default, if it didn't select the right one

00:37:27.330 --> 00:37:36.900
by default, I could just explicitly choose my Ad Hoc
profile, and in this case, I'll chose save to disc,

00:37:36.900 --> 00:37:48.130
I want to put it on the desktop, give it a name, and
its created all I need to send out, it's the IPA file,

00:37:48.130 --> 00:37:56.090
I can just email that, put it on a
webpage, whatever, get it to my audience.

00:37:56.090 --> 00:38:01.530
Additionally, there are other options, email would have
created the same file and just opened up mail with it

00:38:01.530 --> 00:38:04.450
as an attachment ready for, ready to be sent out.

00:38:04.450 --> 00:38:10.970
I also have the Enterprise Distribution option, which
will query me for all the information that I need

00:38:10.970 --> 00:38:19.870
in the manifest.plist file, of course there will be more
about this in the, in the managing devices session later.

00:38:21.260 --> 00:38:29.250
Now also, submit to iTunes Connect is basically identical to
validate in every way, except that after validation passes,

00:38:29.250 --> 00:38:34.980
it actually goes and does the final step of
submitting it to the App Store for review.

00:38:36.040 --> 00:38:40.110
That's generally what's involved now with distribution.

00:38:40.110 --> 00:38:44.800
There's a lot fewer steps than before, and
they are a lot more simple and straightforward.

00:38:44.800 --> 00:38:52.350
Now I'm going to show you some other things in
the organizer that we've added in 3.2 and 4.0.

00:38:52.350 --> 00:38:56.480
One is the Developer Profile, which Todd mentioned before.

00:38:56.480 --> 00:39:01.670
These are all of the signed certificates and
provisioning profiles I have on my system.

00:39:01.670 --> 00:39:08.850
If I were to export this, give it a password,

00:39:08.850 --> 00:39:13.990
because this does contain private keys
so it's important that it's protected.

00:39:13.990 --> 00:39:21.090
Now I could take this file, import it on any other machine,
even that had never been set up for iPhone development yet,

00:39:21.090 --> 00:39:30.050
and I would get this same set of profiles and
signed certificates, and I'd be up and running.

00:39:30.050 --> 00:39:38.320
Additionally, as you saw before, if I
say deleted one of these accidentally,

00:39:38.320 --> 00:39:43.670
I could still refresh and get it right back.

00:39:43.670 --> 00:39:48.190
And with that, I'll give it back to Todd.

00:39:48.190 --> 00:39:52.970
[ Applause ]

00:39:52.970 --> 00:39:54.190
>>Todd: Thank you Clark.

00:39:54.190 --> 00:40:00.300
Just to recap again, we've seen the various
distribution features, including validation and sharing

00:40:00.300 --> 00:40:05.010
through Enterprise Distribution as well as
simply packaging up for Ad Hoc Distribution.

00:40:05.010 --> 00:40:11.180
There are a number of other features in the organizer;
taking screenshots, symbolicating your crash logs,

00:40:11.180 --> 00:40:16.320
which you can simply drag into the Organizer Crash
Logs tab, that's where you restore your devices,

00:40:16.320 --> 00:40:21.220
and of course you've accessed the device console
for debugging message or seeing what going

00:40:21.220 --> 00:40:23.630
on in your device while you're working with it.

00:40:23.630 --> 00:40:29.460
Of course, all of this works with Xcode 4 as well, and we're
really looking forward to your feedback on how Xcode 4 works

00:40:29.460 --> 00:40:35.090
for you for your iPhone development, but again,
you still need to use Xcode 3 for your work

00:40:35.090 --> 00:40:38.510
to actually submit your apps to the Store.

00:40:38.510 --> 00:40:44.350
I also want to emphasize that we made it very easy for you
to experiment with Xcode 4 because its completely compatible

00:40:44.350 --> 00:40:50.010
with the Xcode 3 project format, so it's very easy
for you to work on your same project with Xcode 4

00:40:50.010 --> 00:40:55.670
to see how it works for you and give us feedback and then
to go back and build your app in Xcode 3 when you're ready

00:40:55.670 --> 00:41:02.780
to submit, and ultimately get your app in
the Store and earn that Five-Star review.

00:41:02.780 --> 00:41:07.230
So with that, I will conclude and
point out some of the references.

00:41:07.230 --> 00:41:12.080
The Dev Center, which has lots of great
resources for you as iPhone developers.

00:41:12.080 --> 00:41:16.380
The developer forums, which I definitely encourage
you to go and check out and help each other out

00:41:16.380 --> 00:41:18.570
and we will certainly help you there as well.

00:41:18.570 --> 00:41:26.200
Michael Jerkewitz is our developer tools evangelist, and
you can submit questions and comments to him as well.

00:41:26.200 --> 00:41:30.430
We've got a number of great sessions later this
week, and I wanted to kind of give you a commercial

00:41:30.430 --> 00:41:37.290
for many different features that we've just touched on in
this session, whether it's Instruments, Interface Builder,

00:41:37.290 --> 00:41:53.000
Xcode 4, the user interface testing and of course
the second half of the session tomorrow morning.

