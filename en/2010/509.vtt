WEBVTT

00:00:07.340 --> 00:00:12.710
>> Chris Marrin: Welcome to our talk on Creating
Info Graphics using Standard Web Technologies.

00:00:12.710 --> 00:00:17.170
I want to start by asking you all a question.

00:00:17.170 --> 00:00:21.080
How many people here have to build websites?

00:00:21.080 --> 00:00:23.310
That's good.

00:00:23.310 --> 00:00:25.580
That means I'm in the right presentation.

00:00:25.580 --> 00:00:30.660
And so let me ask you one other question.

00:00:30.660 --> 00:00:33.370
How many have to have data?

00:00:33.370 --> 00:00:37.420
Have to present data to their users,
to their visitors to their website?

00:00:37.420 --> 00:00:39.990
So that's good.

00:00:39.990 --> 00:00:43.830
That means that you're in the right presentation.

00:00:43.830 --> 00:00:46.680
So we want to say why are we going to do Info Graphics?

00:00:46.680 --> 00:00:48.820
Well Info Graphics is all about data.

00:00:48.820 --> 00:00:56.310
It's all about presenting data, presenting it in interesting
and engaging ways for the visitors to your websites.

00:00:56.310 --> 00:00:58.540
There's a lot of ways to present data.

00:00:58.540 --> 00:01:03.960
You know you could certainly present it this way.

00:01:03.960 --> 00:01:04.930
[ Laughter ]

00:01:04.930 --> 00:01:06.390
There's a lot of data here.

00:01:06.390 --> 00:01:11.710
And it's useful data, its good data, it's interesting,
it's something that people really want to know.

00:01:11.710 --> 00:01:15.710
But this is probably not the best way to present it.

00:01:15.710 --> 00:01:21.100
Because it doesn't give you any context, it
doesn't really give you much kind of relationships

00:01:21.100 --> 00:01:24.970
between all the different pieces
of information that are there.

00:01:24.970 --> 00:01:29.140
So here's another way to present some
graphics, or to present some data.

00:01:29.140 --> 00:01:30.650
It's graphically.

00:01:30.650 --> 00:01:37.820
It not only gives you much more compact representation of
that information, but it shows you a lot of relationships.

00:01:37.820 --> 00:01:42.250
This is some population data for
all the states, county by county.

00:01:42.250 --> 00:01:49.570
And it really allows you to see sort of you know where
the population concentrations are and things like that.

00:01:49.570 --> 00:01:56.560
And so Info Graphics allows us to present
information in interesting and engaging ways.

00:01:56.560 --> 00:02:01.750
This information could be in a
magazine or a newspaper or a book even.

00:02:01.750 --> 00:02:04.680
It's just sort of static data.

00:02:04.680 --> 00:02:13.300
So what would we, what could we bring to the party
if we can put these Info Graphics on a web page?

00:02:13.300 --> 00:02:17.680
Well for one thing we can interact with the graphs.

00:02:17.680 --> 00:02:21.680
Here maybe we have some users who are
going to roll over and look at information

00:02:21.680 --> 00:02:24.510
about the different states and the populations there.

00:02:24.510 --> 00:02:25.680
And maybe other information too.

00:02:25.680 --> 00:02:28.740
Maybe links off of Wikipedia pages for each state.

00:02:28.740 --> 00:02:34.760
And so you can add a lot of interesting
interaction for the users.

00:02:34.760 --> 00:02:36.960
Make it more engaging for them.

00:02:36.960 --> 00:02:40.200
Another thing that we can do is
we can make the graph dynamic.

00:02:40.200 --> 00:02:48.240
Here we've changed the data to some newer information
that shows kind of where populations are moving.

00:02:48.240 --> 00:02:55.230
So putting Info Graphics on the
web allows us to engage the users.

00:02:55.230 --> 00:02:59.060
Allow to bring them into the experience.

00:02:59.060 --> 00:03:03.340
So why would we want to use Standard
Web Technologies to do these?

00:03:03.340 --> 00:03:05.750
There's a lot of different ways you can do it.

00:03:05.750 --> 00:03:10.300
But with Standard Web Technologies
we can do it all without plug-ins.

00:03:10.300 --> 00:03:17.880
We can have it so that it'll display on the
iPad and the iPod Touch and on the iPhone.

00:03:17.880 --> 00:03:24.120
But more than that, we can use a lot
of other Standard Web Technologies.

00:03:24.120 --> 00:03:26.550
These graphs can interact with the Dom.

00:03:26.550 --> 00:03:34.370
They can use CSS to style the Info Graphics elements
just like they're styling the rest of the page.

00:03:34.370 --> 00:03:37.740
You're probably using CSS to do a lot of style on your page.

00:03:37.740 --> 00:03:43.240
You can use that same CSS to do
the style on your graphics as well.

00:03:43.240 --> 00:03:47.910
It also allows us to very easily do accessibility.

00:03:47.910 --> 00:03:54.000
Accessibility with Standard Web Technologies
is either free or very easy to do.

00:03:54.000 --> 00:03:56.310
Easy to add.

00:03:56.310 --> 00:04:05.330
And so let's talk about, I just want to
get you started on doing Info Graphics.

00:04:05.330 --> 00:04:08.200
We're certainly not going to go into all the details here.

00:04:08.200 --> 00:04:13.990
But what we're going to talk about today is, first of all
how we're going to take that data that we're going to start

00:04:13.990 --> 00:04:17.950
with and bring it into the client so
that we can use it and I'm going to give

00:04:17.950 --> 00:04:23.550
as an example just a really simple bar chart, just
to kind of get us started with how to use that data.

00:04:23.550 --> 00:04:26.980
And then Sam is going to talk to
us about how we can go further.

00:04:26.980 --> 00:04:28.550
Do more rich visualizations.

00:04:28.550 --> 00:04:33.520
He's going to give some examples of different
kinds of charts that go beyond just the boxes

00:04:33.520 --> 00:04:35.520
and text that we can do with HTML and CSS.

00:04:35.520 --> 00:04:42.420
And then he'll tell you about going further
than just using graphic representations,

00:04:42.420 --> 00:04:45.960
going into actually putting the data in context.

00:04:45.960 --> 00:04:49.370
So we'll use a U.S. map as an example of that.

00:04:49.370 --> 00:04:50.750
He'll show you how to do some of those things.

00:04:50.750 --> 00:04:56.290
So let's go ahead and get started.

00:04:56.290 --> 00:04:58.340
First thing I want to do is we talked about data.

00:04:58.340 --> 00:05:01.400
We talked about the fact that data is where we start.

00:05:01.400 --> 00:05:07.020
And so how do we get that data into the
client so that we can start making graphs?

00:05:07.020 --> 00:05:13.640
Well the first question is where does the data come from?

00:05:13.640 --> 00:05:17.510
And I'm sure a lot of you, for a
lot of you, that's not the problem.

00:05:17.510 --> 00:05:18.280
You already have data.

00:05:18.280 --> 00:05:21.000
You've got some data from your
company that you want to show.

00:05:21.000 --> 00:05:27.010
Or you've got some information that you've collected that
you have and all you need is a way to show it to users.

00:05:27.010 --> 00:05:28.350
So you might have that.

00:05:28.350 --> 00:05:32.070
And so that's real easy to be able
to get that into a client.

00:05:32.070 --> 00:05:41.450
But also you might want to go out and find some data in
the public and create interesting Info Graphics that kind

00:05:41.450 --> 00:05:43.840
of show some relationships that you've thought about.

00:05:43.840 --> 00:05:45.360
And so I'm going to show you.

00:05:45.360 --> 00:05:52.780
In fact, the demos we're doing today, we've got some data
from Data.gov which is a good U.S. government resource.

00:05:52.780 --> 00:05:54.440
It has tons and tons of data.

00:05:54.440 --> 00:06:00.180
We've chosen some population data from the last
census, and we're going to use that as our example.

00:06:00.180 --> 00:06:06.870
What kind of formats do we have available to us?

00:06:06.870 --> 00:06:09.280
Again, there are a lot of them.

00:06:09.280 --> 00:06:12.640
Some of them are really pretty web friendly.

00:06:12.640 --> 00:06:14.840
XML, you know that we all know and love.

00:06:14.840 --> 00:06:19.780
It's very easy to bring that into a client
and then you know use the Dom to dig

00:06:19.780 --> 00:06:23.440
through it and get the data out that we need.

00:06:23.440 --> 00:06:24.490
JSON is another way.

00:06:24.490 --> 00:06:27.220
This is kind of a newer technology.

00:06:27.220 --> 00:06:28.710
A lot of web browsers support it.

00:06:28.710 --> 00:06:31.500
It's really just a JavaScript notation.

00:06:31.500 --> 00:06:37.820
But there are a lot of new technologies that are
in WebKit that make it very fast and efficient

00:06:37.820 --> 00:06:41.070
to use JSON, so it's another really good choice.

00:06:41.070 --> 00:06:47.160
CSV is an example of a lot of other
formats that you can get things in.

00:06:47.160 --> 00:06:51.110
If you go to Data.gov there are a lot of different formats.

00:06:51.110 --> 00:06:53.260
And sometimes it's the only format you can get it in.

00:06:53.260 --> 00:07:02.600
So I'll show you a couple things that we can do to try
to adapt that data into the client so that we can use it.

00:07:02.600 --> 00:07:05.740
Well which format is the best one to use?

00:07:05.740 --> 00:07:07.850
And of course that depends on the source.

00:07:07.850 --> 00:07:11.390
Maybe you have data in one source
and you got to deal with that.

00:07:11.390 --> 00:07:15.730
Sometimes that data is in a format that maybe you can't use.

00:07:15.730 --> 00:07:23.420
And so I've actually, for this demo, found a very nice
offline tool, the data that we got was in CSV format.

00:07:23.420 --> 00:07:25.360
Not really very easy to use that.

00:07:25.360 --> 00:07:33.110
So I used a tool to convert into JSON and now
we've got a really easy format to use for our demo.

00:07:33.110 --> 00:07:42.880
Now you could use CSV or even an Excel spreadsheet
format directly and write some client side code to parse

00:07:42.880 --> 00:07:45.210
that then get it into a form that you can use.

00:07:45.210 --> 00:07:53.350
I don't really recommend doing this because those
formats can be very, you know, kind of randomly different

00:07:53.350 --> 00:07:57.420
in the way that they represent their records.

00:07:57.420 --> 00:07:59.440
And so you can get a lot of education.

00:07:59.440 --> 00:08:01.400
They're going to be really hard to take care of.

00:08:01.400 --> 00:08:07.310
And so sticking with the web standard formats
is going to be a lot easier for you to use.

00:08:07.310 --> 00:08:12.330
There are a lot of server side tools, so if you're
using, if you have your own database especially,

00:08:12.330 --> 00:08:17.710
and it's got you know Sequel access or you have some
way to access it, there are a lot of server side tools

00:08:17.710 --> 00:08:23.180
that allow you to make queries on that data, get
some XML records, bring them into the client,

00:08:23.180 --> 00:08:25.230
parse them, get into that data and use it.

00:08:25.230 --> 00:08:32.070
So that's a really good choice if you've got
an online database you're trying to access.

00:08:32.070 --> 00:08:40.290
Whatever you're using, whether it's JSON or XML,
XMLHttpRequest is the typical way that you get data

00:08:40.290 --> 00:08:47.710
into the client so that you can start
using JavaScript to work with that data.

00:08:47.710 --> 00:08:54.270
So JSON is this pretty new format I was
mentioning before that it has a really fast parser.

00:08:54.270 --> 00:09:01.140
A specific JSON parser in Safari that
allows you to very quickly parse data.

00:09:01.140 --> 00:09:07.830
So this data set that we're using for the U.S. Government,
it's a huge data set, it's a really a lot of text.

00:09:07.830 --> 00:09:13.320
And so JSON is able to parse it almost instantaneously
so you don't have to worry about the size of the data

00:09:13.320 --> 00:09:16.370
and trying to pare it down or anything like that.

00:09:16.370 --> 00:09:20.600
Here's a little graphic of what we're going to do.

00:09:20.600 --> 00:09:21.340
It's pretty simple.

00:09:21.340 --> 00:09:25.390
It's, you know, all another way that
you would access any data on the web.

00:09:25.390 --> 00:09:28.180
You're going to do an XMLHttpRequest.

00:09:28.180 --> 00:09:33.890
Get the data out of some database, get it back
in some form, in our demo example we're going

00:09:33.890 --> 00:09:36.910
to be using JSON, but it could also be XML.

00:09:36.910 --> 00:09:46.810
And then you're going to use JavaScript to use that
data and convert it dynamically into some kind of chart.

00:09:46.810 --> 00:09:51.970
So let's get into how we actually
are going to access this data.

00:09:51.970 --> 00:09:54.520
The first thing we need to do is we need to request it.

00:09:54.520 --> 00:09:59.630
That means we create an XMLHttpRequest Object.

00:09:59.630 --> 00:10:05.530
We need to tell that object what
to do when the request is ready.

00:10:05.530 --> 00:10:12.890
And in this case we're going to say call this process
response function and we will process it from there.

00:10:12.890 --> 00:10:16.810
The next thing you do is you set up
the query that you're going to do.

00:10:16.810 --> 00:10:21.420
In this case all we're going to do
is apt test this JavaScript file

00:10:21.420 --> 00:10:26.000
that true bullion value there,
that says do it asynchronously.

00:10:26.000 --> 00:10:28.990
So we're going to send off the request,
it's going to return immediately.

00:10:28.990 --> 00:10:30.570
We're going to go off and do something else.

00:10:30.570 --> 00:10:35.830
Later on the process we request is going to get called
and we're going to do all the rest of our job there.

00:10:35.830 --> 00:10:40.000
And then the last thing is, we just call send.

00:10:40.000 --> 00:10:44.670
And we, that sends off the request and then we go off.

00:10:44.670 --> 00:10:47.500
At some point process response is going to come in.

00:10:47.500 --> 00:10:52.210
Process response gets called a lot of
times to give us progress and to tell us,

00:10:52.210 --> 00:10:55.200
you know the kind of status of the request that we've made.

00:10:55.200 --> 00:11:01.400
But at some point it's going to give us a done
message and that's going to say that the data's ready.

00:11:01.400 --> 00:11:04.720
We're going to call the JSON parse message to,

00:11:04.720 --> 00:11:09.570
method to parse that into a JavaScript
data structure that we can access later.

00:11:09.570 --> 00:11:14.310
And then we're going to call some function
that's going to dynamically construct a chart.

00:11:14.310 --> 00:11:15.630
And that's really all there is to it.

00:11:15.630 --> 00:11:17.070
That's, we've accessed the data.

00:11:17.070 --> 00:11:21.630
We have it on our client, we can
do anything we want with it.

00:11:21.630 --> 00:11:28.700
So like I said, let's make a really simple
bar chart just to show how easy it is to,

00:11:28.700 --> 00:11:32.340
to actually create the data, use
the data to create a bar chart.

00:11:32.340 --> 00:11:37.950
So a lot of you have seen this kind of code before.

00:11:37.950 --> 00:11:40.540
It's all pretty simple.

00:11:40.540 --> 00:11:44.050
We're going to dynamically create some HTML elements.

00:11:44.050 --> 00:11:49.270
We have a loop here and so I'm displaying
data for each region of the United States.

00:11:49.270 --> 00:11:54.050
There's four regions I'm going to go into a
loop and construct four bars that are going

00:11:54.050 --> 00:11:57.020
to show the population in each of those regions.

00:11:57.020 --> 00:11:58.550
So I'm going through this loop.

00:11:58.550 --> 00:12:04.120
First thing I'm going to do is I'm going to go and
access my JavaScript object and I'm going to pull

00:12:04.120 --> 00:12:08.280
out the population for the region that I'm asking for.

00:12:08.280 --> 00:12:12.690
And then I'm going to create a little group of elements.

00:12:12.690 --> 00:12:18.280
It's going to have a root that's going
to contain the bar and the title.

00:12:18.280 --> 00:12:19.870
And it's going to be very simple.

00:12:19.870 --> 00:12:28.450
I'm using CSS to style it all so that I don't have to
change this JavaScript when I want to restyle the object.

00:12:28.450 --> 00:12:34.750
I can just go and change my CSS and
I can give it a very different look.

00:12:34.750 --> 00:12:36.730
Next I'm going to create the bar.

00:12:36.730 --> 00:12:41.100
This is going to be the actual bar that's going to show
the height that's going to correspond to the population.

00:12:41.100 --> 00:12:43.210
I'm going to style it as well.

00:12:43.210 --> 00:12:48.830
And for it I'm going to set its height
corresponding to the population of that region.

00:12:48.830 --> 00:12:52.890
And then I'm going to append that to
the container that I've just created.

00:12:52.890 --> 00:12:58.950
Similarly, I'm going to create an object for the bar title.

00:12:58.950 --> 00:13:00.590
I'm going to give it a class.

00:13:00.590 --> 00:13:04.180
And then I'm going to put the string
which is the region name in it.

00:13:04.180 --> 00:13:08.300
Append that, and then finally I'm
going to add that to the list

00:13:08.300 --> 00:13:14.990
of the other bars I've got, and
eventually I get a bar chart.

00:13:14.990 --> 00:13:18.530
But that gives you a static bar
chart, which could be useful.

00:13:18.530 --> 00:13:22.340
You know that might be all you need
to show your users what you need.

00:13:22.340 --> 00:13:26.210
But it's really better if we can add some interaction to it.

00:13:26.210 --> 00:13:32.460
So let me do a real quick demo
to try to show you some of that.

00:13:35.390 --> 00:13:39.290
Didn't do it.

00:13:39.290 --> 00:13:40.300
What is this machine?

00:13:40.300 --> 00:13:44.520
I thought so.

00:13:44.520 --> 00:13:48.410
Okay. So here we have our bar chart,
showed you a picture of this.

00:13:48.410 --> 00:13:50.680
It's got four regions that it's representing.

00:13:50.680 --> 00:13:54.840
But if we roll over this, you can
see it has a nice little pop up.

00:13:54.840 --> 00:13:58.720
And I'm showing all the states that are in
that region just so the user can find that out

00:13:58.720 --> 00:14:01.860
and I'm highlighting the bar so
you really know what's going on.

00:14:01.860 --> 00:14:06.500
And when you do the other ones, one
goes away and the other one comes in.

00:14:06.500 --> 00:14:08.920
It, you know, you can do it really fast.

00:14:08.920 --> 00:14:12.330
And all the animation works really well.

00:14:12.330 --> 00:14:14.570
So how do we do that?

00:14:14.570 --> 00:14:15.970
It seems complicated, but it's not.

00:14:15.970 --> 00:14:18.750
And if you've been seeing any of the CSS talks this week,

00:14:18.750 --> 00:14:21.890
you've seen that that's actually
really, really simple to do.

00:14:21.890 --> 00:14:30.650
So let's go back to the slides and see how we did that.

00:14:30.650 --> 00:14:34.620
So that's all done with CSS transitions.

00:14:34.620 --> 00:14:37.290
This is a very simple effect.

00:14:37.290 --> 00:14:42.200
What I've done is in that loop that you
just saw, I've added another object.

00:14:42.200 --> 00:14:43.520
It's going to be a pop up object.

00:14:43.520 --> 00:14:48.880
I've put in it, in this case, just a
simple image of the states in that region.

00:14:48.880 --> 00:14:53.590
But I'm calling it bar pop up, that's just its CSS name.

00:14:53.590 --> 00:15:00.020
Then I'm doing some standard styling stuff to give it some
nice borders and rounded corners and things like that.

00:15:00.020 --> 00:15:04.320
But the interesting parts are I'm
setting, so passage is zero.

00:15:04.320 --> 00:15:05.860
So you're not going to see it.

00:15:05.860 --> 00:15:08.980
And I'm also scaling it and rotating it.

00:15:08.980 --> 00:15:13.950
Putting it in a position that it's
going to zoom up from when I select it.

00:15:13.950 --> 00:15:21.170
And then this little piece is the thing that
actually causes all of the animation to take place.

00:15:21.170 --> 00:15:26.930
I'm saying, I want the opacity to change over one second,

00:15:26.930 --> 00:15:29.840
and I want the transform to actually
change over half second.

00:15:29.840 --> 00:15:33.810
So it's going to zoom into place and then
kind of just smoothly fade in after that bit.

00:15:33.810 --> 00:15:38.520
So I think it's going to be a nice
effect and you saw it just a second ago.

00:15:38.520 --> 00:15:43.710
Then the other thing we need to do is we add
another style selector which is going to say,

00:15:43.710 --> 00:15:48.850
whenever I hover over the bar, hover is
one of the pseudo classes that allows you

00:15:48.850 --> 00:15:55.450
to very automatically do something
when the mouse goes over some object.

00:15:55.450 --> 00:16:02.680
I'm going to say when I hover over that bar I want
this, this style to be added to the pop up object.

00:16:02.680 --> 00:16:10.260
And that style is setting zero passe to one and basically
taking away the transform that's going to cause the object

00:16:10.260 --> 00:16:13.180
to fade in and kind of zoom up and like you saw.

00:16:13.180 --> 00:16:18.300
And the nice thing about it is when you
take that away it's going to slide back.

00:16:18.300 --> 00:16:22.880
And if you go over another object, both of those
animations can be happening at the same time.

00:16:22.880 --> 00:16:27.750
You don't have to worry about dealing with, you know, having
one start after the other one stops or anything like that.

00:16:27.750 --> 00:16:30.620
It's all taken care of with CSS transitions.

00:16:30.620 --> 00:16:35.490
And you'll notice this required no additional JavaScript.

00:16:35.490 --> 00:16:42.970
This was all very simple to do and it's all done in CSS so
very easy to change if you want to change to a new style,

00:16:42.970 --> 00:16:47.650
a new animation style or a new kind of visual style.

00:16:47.650 --> 00:16:50.440
But what about the iPhone and the iPad?

00:16:50.440 --> 00:16:56.110
Well let's take a quick look at how we
would, how this would look on those.

00:16:56.110 --> 00:16:59.940
So here's the same bar chart.

00:16:59.940 --> 00:17:02.370
Move it this way so you can see it better.

00:17:02.370 --> 00:17:09.700
So same bar chart, but here, well when we roll over it,
you know you don't really roll over on iPad and iPhone.

00:17:09.700 --> 00:17:12.830
So here we got to click.

00:17:12.830 --> 00:17:15.790
But when you click, you get the same effect.

00:17:15.790 --> 00:17:20.770
Everything works pretty much the
same and the same highlight happens.

00:17:20.770 --> 00:17:22.980
But how do you do that?

00:17:22.980 --> 00:17:27.160
Well let's take a look.

00:17:27.160 --> 00:17:29.180
So you do that with Touch Events.

00:17:29.180 --> 00:17:35.630
Like I said, hover doesn't really work with those
devices because you're not really moving a mouse around,

00:17:35.630 --> 00:17:37.910
you're using your finger and so you got to touch.

00:17:37.910 --> 00:17:42.010
And so the way we do that is with these Touch Events.

00:17:42.010 --> 00:17:45.940
The events we use are touch start and touch end.

00:17:45.940 --> 00:17:54.720
So when I'm doing that loop where I'm constructing
the bars, I add a couple lines of JavaScript.

00:17:54.720 --> 00:17:57.500
I add an EventListener for the touchstart event.

00:17:57.500 --> 00:18:07.350
And I say, when the touchstart event happens I want
to add this bar-show class name to, to the bar.

00:18:07.350 --> 00:18:11.620
And when I lift my finger up I
want to take away that class name.

00:18:11.620 --> 00:18:13.240
That's all the JavaScript we needed to add.

00:18:13.240 --> 00:18:16.040
And then we add one more small thing.

00:18:16.040 --> 00:18:22.550
Here is the style selector that
caused the hover animation to happen.

00:18:22.550 --> 00:18:24.570
And we're going to add one other thing to that.

00:18:24.570 --> 00:18:27.830
We're going to say not only when you hover over the bar,

00:18:27.830 --> 00:18:34.070
but when this bar-show style appears,
we also want to run this animation.

00:18:34.070 --> 00:18:35.730
And that's all there is to it.

00:18:35.730 --> 00:18:42.800
So the iPad and the iPhone can have the same effects with
just a small change that causes it to work in both places.

00:18:42.800 --> 00:18:50.480
So that was just a simple bar chart and
I showed you how to get the data in.

00:18:50.480 --> 00:18:56.510
And now Sam's going to come up and tell
you how to do even cooler bars and graphs.

00:18:56.510 --> 00:19:00.180
[ Applause ]

00:19:00.180 --> 00:19:01.190
>> Sam Weinig: Thanks Chris.

00:19:01.190 --> 00:19:08.540
So that's Chris Marrin and I'm Sam Weinig and I'm going to
be talking to you about how to make Richer Visualizations.

00:19:08.540 --> 00:19:14.770
So what Chris is talking about so far is how to
take data that is already sitting on your servers,

00:19:14.770 --> 00:19:18.560
get it into your web page and then
use it to create a simple graph.

00:19:18.560 --> 00:19:20.870
And in this case he used the bar chart.

00:19:20.870 --> 00:19:25.360
But for most data visualizations
we don't want to use a bar chart.

00:19:25.360 --> 00:19:27.540
It's just not the best kind of graph.

00:19:27.540 --> 00:19:30.370
There are lots better graphs for things.

00:19:30.370 --> 00:19:37.050
For instance, if we have data that is, we want to
see in comparison to the whole, we use the pie chart.

00:19:37.050 --> 00:19:43.690
For data along two axes, often you know time
is one of them, we'd want to use a line chart.

00:19:43.690 --> 00:19:49.980
For scientific data a scatter chart, which is
also along two axes are, is pretty powerful.

00:19:49.980 --> 00:19:56.300
But HTML and CSS as you know it today is not
the best technology to do these kind of things.

00:19:56.300 --> 00:19:59.810
You can't make a circle out of squares.

00:19:59.810 --> 00:20:08.510
Fortunately, there is a technology that's available
in WebKit across our entire platform called Canvas.

00:20:08.510 --> 00:20:12.360
And Canvas is a part of HTML5.

00:20:12.360 --> 00:20:14.590
But it actually hasn't always been.

00:20:14.590 --> 00:20:18.130
Canvas started as something we needed for Dashboard.

00:20:18.130 --> 00:20:21.850
Are you all familiar with the Dashboard
program on Microsend?

00:20:21.850 --> 00:20:23.270
Well it's okay.

00:20:23.270 --> 00:20:25.900
If you are or you aren't it is there.

00:20:25.900 --> 00:20:31.310
And what we found when we were making Dashboard
was to make the Widgets that we wanted,

00:20:31.310 --> 00:20:36.160
we needed something beyond images if we
wanted them to be interactive and dynamic.

00:20:36.160 --> 00:20:42.090
For instance, to make the hands of the clock, we needed
something to draw the hands and the circle around it.

00:20:42.090 --> 00:20:50.550
To draw the flight plan of a plane we really needed
a path and the same was true for the stock ticker.

00:20:50.550 --> 00:20:59.380
So we decided to create an API that we were familiar
with and so what we did was we based a JavaScript API

00:20:59.380 --> 00:21:05.300
on the CG context API that we have
on Mac OS 10 and iPhone and iPad.

00:21:05.300 --> 00:21:09.680
So if you're familiar with it, you're probably
going to be pretty familiar with how Canvas works.

00:21:09.680 --> 00:21:16.150
It actually was really popular and
we, it was picked up as part of HTML5

00:21:16.150 --> 00:21:20.350
and it's actually now available in most major browsers.

00:21:20.350 --> 00:21:25.100
The one exception is our favorite browser Internet Explorer.

00:21:25.100 --> 00:21:26.820
But there actually is a solution.

00:21:26.820 --> 00:21:30.920
Many people use the EXCanvas.JS, JavaScript

00:21:30.920 --> 00:21:39.770
to get Canvas-like functionality based
on Microsoft proprietary technologies.

00:21:39.770 --> 00:21:46.690
So let's take a look at a demo of what we
can do with Canvas to create a nice chart.

00:21:46.690 --> 00:21:47.940
Now we have a circle.

00:21:47.940 --> 00:21:52.780
Which is something that Chris couldn't
have done with the CSS he was showing you.

00:21:52.780 --> 00:21:59.100
Just to prove to you that it's not an image,
we can do some dynamic things like this.

00:21:59.100 --> 00:22:02.930
[ Applause ]

00:22:02.930 --> 00:22:08.550
We can also inspect it and show you
that it is indeed a Canvas element.

00:22:08.550 --> 00:22:12.950
These dibs that you see below here
are the pop-ups that are popping in.

00:22:12.950 --> 00:22:16.370
And they've just been transformed off the side of the page.

00:22:16.370 --> 00:22:23.520
The thing to note, while we highlight the Canvas
is that it is the entire area of the circle,

00:22:23.520 --> 00:22:28.950
but it doesn't include the text on the side.

00:22:28.950 --> 00:22:35.030
So let's talk about what Canvas is for those of
you who aren't familiar with the CG Context, API.

00:22:35.030 --> 00:22:43.110
Canvas is an immediate mode of graphics drawing
API, which means that it's as if you have a canvas

00:22:43.110 --> 00:22:45.070
and you're taking a pen and drawing on to it.

00:22:45.070 --> 00:22:50.790
And as soon as you draw on to it, you no
longer know where you've drawn explicitly.

00:22:50.790 --> 00:22:57.200
So it's not like HTML where you have a Div, and as you
move that Div WebKit will keep redrawing it for you.

00:22:57.200 --> 00:23:03.060
With Canvas, if you want to change what's drawn into
it, you actually have to redraw the scene yourself.

00:23:03.060 --> 00:23:06.060
So let's take a look at how you do that.

00:23:06.060 --> 00:23:09.250
The first step to using Canvas is
to just create a canvas element.

00:23:09.250 --> 00:23:12.950
Just like you would an image element
or a Div or anything else.

00:23:12.950 --> 00:23:18.120
Then from JavaScript you're actually
going to obtain what's called its context.

00:23:18.120 --> 00:23:22.610
You do this using the Get Context
method passing 2D as the argument.

00:23:22.610 --> 00:23:28.170
Canvas is designed to be extensible in the future, so if we
decide to use other kinds of context we have that option.

00:23:28.170 --> 00:23:33.170
In this case we're just using HTML Dimensional context.

00:23:33.170 --> 00:23:39.040
We've illustrated that you have the context by drawing a
small black border inside the Canvas area to show that it,

00:23:39.040 --> 00:23:42.810
it takes up the entire area and you
have that entire area to draw in.

00:23:42.810 --> 00:23:49.820
To create a circle, which is our goal for right
now, we use a path, which we end on each side

00:23:49.820 --> 00:23:52.390
with the begin and a closed path methods.

00:23:52.390 --> 00:23:57.170
And in the middle we use the Art Command
to draw 360 degrees around a circle.

00:23:57.170 --> 00:24:02.670
Before we can actually draw it, we have to
tell Canvas what we want it to look like.

00:24:02.670 --> 00:24:07.710
In this case we're going to set a line width
and a color of sort of a transparent red,

00:24:07.710 --> 00:24:09.550
because that's the kind of circle I like.

00:24:09.550 --> 00:24:15.700
And then we're going to call stroke, which just draws
around the edge of the circle, not filling it in.

00:24:15.700 --> 00:24:17.910
So this is pretty simple.

00:24:17.910 --> 00:24:22.100
But you can also draw a text.

00:24:22.100 --> 00:24:26.760
For instance if you want to draw
this text you would set a font.

00:24:26.760 --> 00:24:31.880
You don't actually have to learn a new Syntax as the comment
says, it uses a Syntax you're familiar with from CSS.

00:24:31.880 --> 00:24:41.280
And then you use fill text just like you use stroke to
draw the text at the position provided by the X and Y.

00:24:41.280 --> 00:24:43.690
We didn't draw a circle, we drew a pie.

00:24:43.690 --> 00:24:49.040
So let's see what that is because it's very
similar and it's going to use a path as well.

00:24:49.040 --> 00:24:55.070
So we start in the path by moving
our pen to the center of the circle.

00:24:55.070 --> 00:24:59.790
Now move to won't draw any lines, it will
just move where you're going to start drawing.

00:24:59.790 --> 00:25:04.620
We then create an Arc out to the edge
of the circle and around the portion

00:25:04.620 --> 00:25:07.020
that we want to draw for this particular slice.

00:25:07.020 --> 00:25:11.600
We then draw a line back to the center and close the path.

00:25:11.600 --> 00:25:14.650
We set a fill style and we fill it.

00:25:14.650 --> 00:25:21.090
Like stroke, fill just uses the path as
a guide and draws it on to the context.

00:25:21.090 --> 00:25:25.920
To draw the rest of the pie we're
going to simply iterate this process.

00:25:25.920 --> 00:25:33.270
The thing to note in this slide is the save and
restore that bracket the call to draw a pie slice.

00:25:33.270 --> 00:25:40.200
What we are doing here is if drawPieSlice were
to do anything fancy, like transform the Canvas,

00:25:40.200 --> 00:25:42.270
which is in API, we're not going to get into today.

00:25:42.270 --> 00:25:49.080
It would allow the graphic state of the Canvas to be reset
so that the next call to drawPieSlice is not affected by it.

00:25:49.080 --> 00:25:54.670
This is something you're probably familiar with
if you're familiar with the CG context of APIs.

00:25:54.670 --> 00:25:59.550
Now I should not that our Canvas was interactive.

00:25:59.550 --> 00:26:04.040
And so far everything I've told you has
been in that it's an immediate mode of API.

00:26:04.040 --> 00:26:06.620
You have to redraw everything.

00:26:06.620 --> 00:26:09.130
It's just an image like thing.

00:26:09.130 --> 00:26:10.620
It's a scriptable bitmap.

00:26:10.620 --> 00:26:15.470
So how did we do those hover effects where
we knew which Pie Slice we were over?

00:26:15.470 --> 00:26:17.900
Now we could probably do the math ourselves.

00:26:17.900 --> 00:26:21.700
Since the Canvas is going to be, sorry
the Dom Event System is actually going

00:26:21.700 --> 00:26:24.830
to provide an offset into the Canvas where we were.

00:26:24.830 --> 00:26:27.820
But it won't tell us which Pie Slice we're hovering over.

00:26:27.820 --> 00:26:30.950
So we could do the math ourselves and
figure out where, which Pie Slice we are,

00:26:30.950 --> 00:26:34.430
but that means we have to actually
remember high school math.

00:26:34.430 --> 00:26:38.200
Which we don't want to, because, you know.

00:26:38.200 --> 00:26:41.500
But Canvas actually now provides an API to do this.

00:26:41.500 --> 00:26:44.120
Because it already knows about the paths you're drawing.

00:26:44.120 --> 00:26:49.020
You can actually use the same technique to
construct a path like we did for this Pie Slice.

00:26:49.020 --> 00:26:54.670
But instead of calling fill, we can actually
test whether a specific point is in that path.

00:26:54.670 --> 00:26:58.200
And Canvas will do the heavy lifting
to tell us whether it's true.

00:26:58.200 --> 00:27:01.210
So for our example, we would just
iterate all the Pie Slices,

00:27:01.210 --> 00:27:04.920
just like we did when we were hit
testing, I'm sorry, when we were painting.

00:27:04.920 --> 00:27:08.710
But instead this time it tests the Pie Slices.

00:27:08.710 --> 00:27:15.080
When we found which Pie Slice returns true, we can then
redraw the scene with the Pie Slice slightly extracted

00:27:15.080 --> 00:27:18.190
from the pie, giving us that nice effect.

00:27:18.190 --> 00:27:25.300
At the same time, we would probably set the position of
the popover that you saw fly in to the correct position,

00:27:25.300 --> 00:27:30.300
thus allowing the CSS animation to perform at the same time.

00:27:30.300 --> 00:27:32.450
There's actually a lot more to Canvas.

00:27:32.450 --> 00:27:37.290
Since it's based on pixels, some of the coolest
things you can do are pixel manipulation.

00:27:37.290 --> 00:27:42.370
And there are two APIs to do that to get image
data and set image data which allow you to get a,

00:27:42.370 --> 00:27:45.870
basically a pixel buffer that you can poke at yourself.

00:27:45.870 --> 00:27:49.210
And this is really useful for creating
cool effects like filters.

00:27:49.210 --> 00:27:57.110
But also doing very neat things like creating fluid
dynamic simulations as one of my colleagues did.

00:27:57.110 --> 00:28:01.350
There's also the ability to save
the entire Canvas as an image.

00:28:01.350 --> 00:28:07.360
Since it's basically an image that you're drawing, we give
you the ability to save it out to disk or send to a server

00:28:07.360 --> 00:28:13.950
as a data URL in the format of PNG or JPEG or any
other image format that we support natively.

00:28:13.950 --> 00:28:18.870
You can see a really cool demo about
how to use these on Safari Demos.

00:28:18.870 --> 00:28:23.750
I believe it's Developer.Apple.com.

00:28:23.750 --> 00:28:28.540
There are a lot of resources for using
Canvas, including the HTML5 Specification.

00:28:28.540 --> 00:28:35.470
But I want to call out two APIs that are really great
for constructing simple graphs like the one I showed you

00:28:35.470 --> 00:28:43.870
that do most of the work for you, but provide enough hooks
to allow you to do a lot of styling and hooks for putting

00:28:43.870 --> 00:28:46.500
in your own data and interaction into these graphs.

00:28:46.500 --> 00:28:48.820
And that's the Flot and Flotr library.

00:28:48.820 --> 00:28:51.980
Though very similar in name, they are slightly different.

00:28:51.980 --> 00:28:54.230
I believe, sorry, they are quite different.

00:28:54.230 --> 00:28:57.450
One is more prototype based and the other is JQuery based.

00:28:57.450 --> 00:29:02.090
So depending on what type of API you're
familiar with or comfortable with,

00:29:02.090 --> 00:29:05.290
you might want to choose one over the other.

00:29:05.290 --> 00:29:07.630
So that was Canvas.

00:29:07.630 --> 00:29:10.550
And it was showing you how to make nicer graphs.

00:29:10.550 --> 00:29:14.760
But I mean graphs are just, you know, graphs.

00:29:14.760 --> 00:29:16.670
They're map class.

00:29:16.670 --> 00:29:19.690
And graphs are great for showing data.

00:29:19.690 --> 00:29:22.930
But they're not the whole picture
when it comes to Info Graphics.

00:29:22.930 --> 00:29:29.470
And in fact the really important part about
Info Graphics is showing data in context.

00:29:29.470 --> 00:29:35.770
So let's take a look at a couple
examples of what I mean by that.

00:29:35.770 --> 00:29:41.560
In this example, we're showing immigration
data, who's coming into the United States.

00:29:41.560 --> 00:29:47.670
And what they're doing is they're using the American
flag to both, you know, show that it's something

00:29:47.670 --> 00:29:52.720
about national identity, at the same time
giving you the important data that you need.

00:29:52.720 --> 00:29:58.000
Who are these different nationalities
that are immigrating to the United States?

00:29:58.000 --> 00:29:59.500
It doesn't have to be that heavy.

00:29:59.500 --> 00:30:03.380
It can be just a, you know, visualization
of how to make different coffees.

00:30:03.380 --> 00:30:09.230
But there, there are things that you
wouldn't necessarily want to do in HTML

00:30:09.230 --> 00:30:14.590
or Canvas because they're probably
something you want to do in PhotoShop.

00:30:14.590 --> 00:30:21.200
So traditionally you would probably just use an
image, slap it on your website and call it a day.

00:30:21.200 --> 00:30:27.680
That's great, but it doesn't have all the virtues that
Chris was espousing of, you know, Standard Web Technologies.

00:30:27.680 --> 00:30:30.420
It's not accessible, there's no way to make it dynamic.

00:30:30.420 --> 00:30:32.570
You can't add interaction.

00:30:32.570 --> 00:30:41.130
But there actually is an image format that WebKit knows
how to deal with natively that allows you to do this.

00:30:41.130 --> 00:30:47.140
And that's called SVG and it's a big scary
technology, but we do support it across our platform.

00:30:47.140 --> 00:30:54.090
So it works really well in WebKit and
it even works on the iPhone really well.

00:30:54.090 --> 00:30:58.810
So SVG unlike Canvas is a retain mode API.

00:30:58.810 --> 00:31:00.620
So it's not immediate mode, it's retain mode.

00:31:00.620 --> 00:31:07.440
It's a lot like HTML in that there's a model,
there's a circle element that WebKit knows about.

00:31:07.440 --> 00:31:12.240
And as you change its properties, WebKit is going
to do the job of drawing it on the screen for you.

00:31:12.240 --> 00:31:16.880
In this case, when we change the
size of the radius, the circle grows.

00:31:16.880 --> 00:31:19.330
And there's much rejoicing.

00:31:19.330 --> 00:31:22.860
It's pretty easy to draw basic shapes.

00:31:22.860 --> 00:31:27.680
SVG as you note in this example
is a lot like an HTML document.

00:31:27.680 --> 00:31:32.130
So instead of starting it with HTML, we start with SVG.

00:31:32.130 --> 00:31:38.960
And we, again, draw a circle and
we give it a position and a color.

00:31:38.960 --> 00:31:43.960
So instead of giving it attributes like
you know a title or alternate text,

00:31:43.960 --> 00:31:47.870
we're giving it information that
describes how we want it to draw.

00:31:47.870 --> 00:31:50.330
Animation is also part of the bread and butter of SVG.

00:31:50.330 --> 00:31:56.470
And adding on to that previous example,
we can simply animate it down just

00:31:56.470 --> 00:32:01.660
by adding an animation animate motion tag beneath it.

00:32:01.660 --> 00:32:09.070
So SVG is a document format so you can't like
just stick it in your HTML, how do you use it?

00:32:09.070 --> 00:32:12.050
There are actually three ways to do that.

00:32:12.050 --> 00:32:14.390
The first way is to reference it as an image.

00:32:14.390 --> 00:32:20.590
And this is actually a really cool technique
because first you can just use it as an image tag,

00:32:20.590 --> 00:32:23.830
but you can also use it anywhere you use images in CSS.

00:32:23.830 --> 00:32:27.900
And we use this to great effect
with the WebKit Mask property.

00:32:27.900 --> 00:32:35.000
So if you create a Starburst or something like that using
SVG, you can then apply it as a Mask to your HTML content.

00:32:35.000 --> 00:32:41.000
Otherwise you would have to create a PNG on the server
side, or you know on your find side and upload that.

00:32:41.000 --> 00:32:45.100
So this way you can actually do it dynamically.

00:32:45.100 --> 00:32:47.420
You can also reference it as a document.

00:32:47.420 --> 00:32:52.780
So the downside of referencing it as an image
is that any dynamic capability such as animation

00:32:52.780 --> 00:32:55.960
or scripts that run in the SVG don't work.

00:32:55.960 --> 00:33:01.490
However when you reference it as a document,
all scripts and animation are fully functional.

00:33:01.490 --> 00:33:07.830
The two ways to reference it are
as an iFrame, or an Object tag.

00:33:07.830 --> 00:33:10.100
These both work equally well.

00:33:10.100 --> 00:33:10.970
There's actually another way.

00:33:10.970 --> 00:33:17.000
I said you couldn't reference it from HTML, but you
actually can reference it directly inline with XHTML.

00:33:17.000 --> 00:33:18.290
And this is very easy.

00:33:18.290 --> 00:33:22.080
You just take your Div Tag and slap in some SVG.

00:33:22.080 --> 00:33:31.150
This is probably not going to be too useful for most
of you as I image most of you are sending HTML still.

00:33:31.150 --> 00:33:32.250
And that's a good thing.

00:33:32.250 --> 00:33:36.760
There are plenty of other ways to use SVG in your document.

00:33:36.760 --> 00:33:43.250
So we talked about paths with Canvas and paths
are just as important with SVG if we want

00:33:43.250 --> 00:33:48.220
to create those complex mugs of coffee that we showed you.

00:33:48.220 --> 00:33:53.340
Or if we want to create the state of New York,
my home state, the lovely state of New York.

00:33:53.340 --> 00:33:54.560
We have to do something like this.

00:33:54.560 --> 00:34:00.220
And I've actually alighted you
know maybe 200 lines of path data.

00:34:00.220 --> 00:34:02.410
And I didn't write it by hand.

00:34:02.410 --> 00:34:03.990
There's no way I could write it by hand.

00:34:03.990 --> 00:34:07.040
So am I, you know, selling you snake oil here?

00:34:07.040 --> 00:34:09.360
Is this something you can actually use?

00:34:09.360 --> 00:34:14.740
And of course it is because with SVG
you also have content creation tools.

00:34:14.740 --> 00:34:20.130
There's actually a lot you can do in tools that
you're pretty familiar with, including Illustrator.

00:34:20.130 --> 00:34:23.360
Or the Inkscape Tool which I'm going to show you today,

00:34:23.360 --> 00:34:27.750
which allow you to export SVG and
use these natively in WebKit.

00:34:27.750 --> 00:34:31.430
So let's take a look at a demo of exporting SVG.

00:34:31.430 --> 00:34:37.790
So this is Inkscape, it's a image editor
that's very similar to Illustrator,

00:34:37.790 --> 00:34:41.600
except it's really tuned towards creating SVG documents.

00:34:41.600 --> 00:34:47.660
Just to prove to you that this is in fact a image
editor and is working on objects and not just,

00:34:47.660 --> 00:34:50.900
you know a photo that I've taken
I'm going to make some changes.

00:34:50.900 --> 00:34:55.640
I'm going to move California to
where it'll be in a couple years.

00:34:55.640 --> 00:34:58.850
Get rid of Arizona.

00:34:58.850 --> 00:35:03.370
You know. [Applause] This is Michigan,
the home state of Vicky Murley.

00:35:03.370 --> 00:35:04.520
And I don't know.

00:35:04.520 --> 00:35:05.740
There's not much we're going to do here.

00:35:05.740 --> 00:35:12.740
But, what we're going to do is we're just
going to export this image as an SVG.

00:35:12.740 --> 00:35:17.190
You can imagine that this isn't just a
map, but is something very complexly drawn

00:35:17.190 --> 00:35:21.410
such as the American flag with
the different immigration data.

00:35:21.410 --> 00:35:25.120
I'm not a graphics artist, a graphic artist.

00:35:25.120 --> 00:35:27.650
I, you know, a lowly computer engineer.

00:35:27.650 --> 00:35:33.840
And, but I do know that many graphic artists do do a
lot of these sort of contextualized visualizations.

00:35:33.840 --> 00:35:36.690
So they know how to make cool things.

00:35:36.690 --> 00:35:39.720
So for this demo we've just made
a map that I've, you know, traced.

00:35:39.720 --> 00:35:41.580
But if you can imagine it's something else.

00:35:41.580 --> 00:35:47.830
So I'm just going to save that onto the
desktop and we're going to call it the map.

00:35:47.830 --> 00:35:50.310
We're going to save it as a plain SVG.

00:35:50.310 --> 00:35:55.080
And we're going to minimize this.

00:35:55.080 --> 00:35:58.620
We're just going to open it in Safari.

00:35:58.620 --> 00:36:00.950
It's right here.

00:36:00.950 --> 00:36:05.380
And as you can see it, Safari can deal with
it just well, just as well as it could.

00:36:05.380 --> 00:36:12.110
And if you look at the Inspector, it's just
like an HTML file, it's totally inspectible.

00:36:12.110 --> 00:36:16.970
Now of course these aren't things that you would
write normally, but you know, that's the case.

00:36:16.970 --> 00:36:22.330
Another thing I want to note is that all
of these objects have properties in them.

00:36:22.330 --> 00:36:27.550
So looking in the Object Properties we can
see that Wyoming has a label and an ID.

00:36:27.550 --> 00:36:34.590
What this means is that from our scripts we'll
be able to reference these objects directly.

00:36:34.590 --> 00:36:37.840
This is really important if you want to create interaction.

00:36:40.130 --> 00:36:46.840
What we've done is we've taken those objects
and we've combined them with our census data

00:36:46.840 --> 00:36:49.400
to create a more compelling visualization.

00:36:49.400 --> 00:36:52.260
Now it's not as good as what you know
a great graphics artist could do,

00:36:52.260 --> 00:36:54.520
but it's what Chris and I could do in the time.

00:36:54.520 --> 00:37:00.510
So you know just as we hover over we can
scale the SVG up with no loss in precision.

00:37:00.510 --> 00:37:12.990
[ Applause ]

00:37:12.990 --> 00:37:16.150
Okay. So I showed you the interaction.

00:37:16.150 --> 00:37:17.540
How do we do that interaction?

00:37:17.540 --> 00:37:21.130
Do I need 20 slides to teach you interaction with SVG?

00:37:21.130 --> 00:37:24.330
Fortunately the answer is no.

00:37:24.330 --> 00:37:30.120
It's actually the same JavaScript and Dom and
Event Model that you're familiar with from HTML.

00:37:30.120 --> 00:37:37.260
So we use Elements by Tag Name, we use Add
Event Listener to add Mouse Over events.

00:37:37.260 --> 00:37:38.760
And it all just works.

00:37:38.760 --> 00:37:42.850
And it all will just work across our devices.

00:37:42.850 --> 00:37:47.640
There's actually a lot more to SVG
that we're not going to get into.

00:37:47.640 --> 00:37:54.550
And a couple of them that I really want you to know
about but I don't have time to go into are SVG Fonts.

00:37:54.550 --> 00:38:01.950
Which allow you to define custom glyphs for fonts that
you not only can use from SVG but also from HTML and CSS.

00:38:01.950 --> 00:38:09.450
I want to note an important point is that on the iPhone
and iPad, the only way to reference external fonts,

00:38:09.450 --> 00:38:12.870
other than the ones available on
the system, is to use SVG fonts.

00:38:12.870 --> 00:38:15.670
So this is an important thing to know about.

00:38:15.670 --> 00:38:22.790
There's also text on a path, which can be really useful
in creating compelling visualization of your data.

00:38:22.790 --> 00:38:28.380
Using arbitrary paths this text is
completely accessible and selectable.

00:38:28.380 --> 00:38:34.480
So even your less cited users and screen
reader users will be able to interact with it.

00:38:34.480 --> 00:38:42.310
And finally there's Spriting using the use element, which
allows you to take a single animation or a complex shape

00:38:42.310 --> 00:38:46.590
that you've created and stamp it across your web page.

00:38:46.590 --> 00:38:49.810
This is useful in certain types of animations.

00:38:49.810 --> 00:38:54.810
There are a bunch of resources for SVG.

00:38:54.810 --> 00:38:58.240
The image editor I used is Open Source and Free.

00:38:58.240 --> 00:39:00.720
And it's available at InkScape.org.

00:39:00.720 --> 00:39:11.610
A great library that abstracts some of the really
jarring complexities of SVG is the Rafael JS Library.

00:39:11.610 --> 00:39:17.800
And so if you're interested in SVG, but a little scared
of it, as I am, you might want to check that out.

00:39:17.800 --> 00:39:19.490
He has some really cool demos.

00:39:19.490 --> 00:39:25.800
And for those of you who are super bold, the SVG
specification is available from the WFreeSave.

00:39:25.800 --> 00:39:34.850
Let's go over a little bit of what I've talked about
just so we know which technology we want to use.

00:39:34.850 --> 00:39:35.720
Canvas or SVG.

00:39:35.720 --> 00:39:39.810
You can use both, but let's talk
about why you would use one.

00:39:39.810 --> 00:39:44.400
As I noted, Canvas is an immediate
mode API whereas SVG is retained.

00:39:44.400 --> 00:39:51.650
So if you're just doing a simple drawing and it's
based on data that is really accessible to you,

00:39:51.650 --> 00:39:55.510
and you can use to create the relationships,
Canvas might be where you go.

00:39:55.510 --> 00:40:00.800
But if you want to use animations, and
interaction, SVG might be a little easier.

00:40:00.800 --> 00:40:07.050
But they both can create arbitrarily complex paths for you.

00:40:07.050 --> 00:40:12.880
Canvas has a great support for pixel manipulation
as that's really its bread and butter.

00:40:12.880 --> 00:40:16.360
And in the end you can also save out these Canvases to disk.

00:40:16.360 --> 00:40:22.950
So if you really need the ability to save the
graphs that you're creating to your users' home,

00:40:22.950 --> 00:40:27.000
to the disk, Canvas may be what you need to use.

00:40:27.000 --> 00:40:32.060
Whereas, SVG has built in support for accessibility.

00:40:32.060 --> 00:40:34.720
It has animation support.

00:40:34.720 --> 00:40:38.060
And it also has the offering tools backing it.

00:40:38.060 --> 00:40:42.830
So if you want to create complex
relationships and you really want

00:40:42.830 --> 00:40:46.400
to show your data in context, SVG is where you want to go.

00:40:46.400 --> 00:40:52.510
So with that, I'm actually going to hand it back to Chris,
because we lied, and there's actually one more thing.

00:40:52.510 --> 00:40:59.200
[ Applause ]

00:40:59.200 --> 00:41:00.310
>> Chris Marrin: Thanks a lot Sam.

00:41:00.310 --> 00:41:02.230
That was some pretty cool stuff.

00:41:02.230 --> 00:41:03.820
I hope you liked it.

00:41:03.820 --> 00:41:06.430
But we have one more thing to show you.

00:41:06.430 --> 00:41:11.510
All those things are available in Safari.

00:41:11.510 --> 00:41:21.310
[ Silence ]

00:41:21.310 --> 00:41:26.190
But this is something that we're working on in WebKit.

00:41:26.190 --> 00:41:30.630
This looks like the map that Sam was showing you in SVG.

00:41:30.630 --> 00:41:33.090
But it's not done in SVG.

00:41:33.090 --> 00:41:36.960
It's done in something new that we're working on.

00:41:36.960 --> 00:41:39.510
Which is called.

00:41:39.510 --> 00:41:48.310
[ Applause ]

00:41:48.310 --> 00:41:53.720
This is in a new 3D technology that we're
working on that's available in WebKit Nightlies.

00:41:53.720 --> 00:41:58.960
You can see that it's showing you the data in this really
kind of visceral way where you're seeing the height

00:41:58.960 --> 00:42:01.410
of the state, telling you what its population is.

00:42:01.410 --> 00:42:05.580
So you can really quickly see you know where
everybody is and you know where everybody isn't

00:42:05.580 --> 00:42:09.630
and you know whether your state's
better than the next state or whatever.

00:42:09.630 --> 00:42:12.500
[Chuckles] So it makes it really easy to see.

00:42:12.500 --> 00:42:16.510
So that's WebGL.

00:42:16.510 --> 00:42:24.950
[ Applause ]

00:42:24.950 --> 00:42:28.610
Didn't think it was going to work.

00:42:28.610 --> 00:42:31.070
So WebGL. This is something that we're working on.

00:42:31.070 --> 00:42:32.120
This is an experiment.

00:42:32.120 --> 00:42:33.880
It lets you do a lot of very cool things.

00:42:33.880 --> 00:42:38.770
You know simple graphics, it does
really high polygon count stuff.

00:42:38.770 --> 00:42:42.260
You can integrate it with the web page
which is really one cool thing about it.

00:42:42.260 --> 00:42:45.250
And then I showed you that Info Graphic piece.

00:42:45.250 --> 00:42:51.730
So there's a lot of stuff you're going to be able to do with
it if you go and experiment with it in the WebKit Nightlies.

00:42:51.730 --> 00:42:53.580
So what is WebGL?

00:42:53.580 --> 00:43:01.280
Well it's something that we're working on in Khronos which
is a group that controls the Open GL and Open GLES specs

00:43:01.280 --> 00:43:04.280
as well as KLot and a bunch of other things.

00:43:04.280 --> 00:43:11.200
So we've based WebGL on Open GLES so that it,
it's using some standard libraries that a lot

00:43:11.200 --> 00:43:14.340
of 3D programs are already familiar with.

00:43:14.340 --> 00:43:18.790
It's a collaboration between Apple,
Google and Mozilla are involved,

00:43:18.790 --> 00:43:22.990
as well as several other companies
that are interested in this space.

00:43:22.990 --> 00:43:27.390
I'm the spec editor, and so we're really excited about this.

00:43:27.390 --> 00:43:30.940
It's really something that I'm having a lot of fun with.

00:43:30.940 --> 00:43:33.780
And the spec went to public review in December.

00:43:33.780 --> 00:43:35.320
So all of you can look at it.

00:43:35.320 --> 00:43:41.060
I encourage you to go check out the spec. There's a
Wiki, it's a public Wiki it shows you a lot of demos,

00:43:41.060 --> 00:43:45.700
a lot of libraries and a lot of things
that you can start playing with.

00:43:45.700 --> 00:43:48.360
And like I said, it's available in WebKit Nightly Builds.

00:43:48.360 --> 00:43:57.430
I did a blog post a little bit ago to introduce
it, talk about how you can use it in WebKit on Mac.

00:43:57.430 --> 00:44:01.330
So that's our talk.

00:44:01.330 --> 00:44:06.150
In summary, let me just say you
know a few things we talked about.

00:44:06.150 --> 00:44:08.500
Info Graphics are engaging and informative.

00:44:08.500 --> 00:44:12.940
It allows you to kind of see data in a
really kind of rich, interesting way.

00:44:12.940 --> 00:44:19.920
Putting Info Graphics on the web allows you to do
interaction and animation really draws your users

00:44:19.920 --> 00:44:23.270
into the experience of looking at that Info Graphic.

00:44:23.270 --> 00:44:29.530
And using Standard Web Technologies allow you
to run it everywhere without using plug-ins.

00:44:29.530 --> 00:44:32.990
Allows you to do all the other Web Technology stuff.

00:44:32.990 --> 00:44:35.520
And it gives you good accessibility.

00:44:35.520 --> 00:44:39.800
And there are many Standard Web
Technologies that are available in WebKit.

00:44:39.800 --> 00:44:44.810
We've shown you a few, including
HTML and CSS, Canvas and SCG.

00:44:44.810 --> 00:44:50.790
I hope you all go out and do some great graphics.

00:44:50.790 --> 00:44:57.400
Here is some information if you want to talk
about Safari, Vicki Murley is our Evangelist.

00:44:57.400 --> 00:44:59.200
She can really help you a lot.

00:44:59.200 --> 00:45:03.370
The Safari Dev Center has got a lot of resources.

00:45:03.370 --> 00:45:05.270
Some of our demos will be there.

00:45:05.270 --> 00:45:11.830
And there's some general HTML5 demos and the Apple
Developer Forum is someplace you can go and ask questions,

00:45:11.830 --> 00:45:15.120
and you know, interact with us and stuff.

00:45:15.120 --> 00:45:17.490
There are some related sessions,
all of which have happened already.

00:45:17.490 --> 00:45:21.640
But on Monday you'll be able to
watch all of them and see them.

00:45:21.640 --> 00:45:23.310
I hope that you saw a lot of these.

00:45:23.310 --> 00:45:24.360
They were really great.

00:45:24.360 --> 00:45:31.480
I think that it really gives you a really good perspective
on all the different things that you can do with Safari.

00:45:31.480 --> 00:45:33.810
And we still have some labs coming up.

00:45:33.810 --> 00:45:37.310
We have some iPhone labs that are happening tomorrow.

00:45:37.310 --> 00:45:40.110
And another Safari Open Lab that you can come to on Friday.

