1
00:00:06,350 --> 00:00:14,060
>> Vicki Murley: Hi everyone I'm Vicki Murley the Safari
Technologies Evangelist at Apple is this is Session 501:

2
00:00:14,060 --> 00:00:18,830
Delivering Audio and Video using Web Standards Part 1.

3
00:00:18,830 --> 00:00:25,090
So how many of you out in the audience are
using a plug-in to display audio or video?

4
00:00:25,090 --> 00:00:27,320
If you could just show of hands please.

5
00:00:27,320 --> 00:00:36,040
Ok great and how many of you are using
HTML5 on iPad but a plug-in everywhere else?

6
00:00:36,040 --> 00:00:38,500
How many people are in that boat?

7
00:00:38,500 --> 00:00:40,120
Ok a couple.

8
00:00:40,120 --> 00:00:47,660
And how many of you are using HTML5 everywhere you possibly
can, in every browser, on every platform that supports it?

9
00:00:47,660 --> 00:00:49,790
Can I get a show of hands?

10
00:00:49,790 --> 00:00:51,940
Ok small group that last one.

11
00:00:51,940 --> 00:00:57,720
Ok well whichever group you happen to be in I can guarantee
you're going to learn something in this session today

12
00:00:57,720 --> 00:01:03,650
that you can go back and implement immediately once
you leave this session or leave the conference.

13
00:01:03,650 --> 00:01:09,700
So you've probably been hearing a lot about HTML5 these
days, in fact you have been hearing a lot about it

14
00:01:09,700 --> 00:01:19,380
and there's one thing that kind of caused people to sit
up and take notice with regard to HTML5 and that's iPad.

15
00:01:19,380 --> 00:01:27,420
So iPad is technically a mobile device but like
iPhone OS like iPhone it does not support plug-ins,

16
00:01:27,420 --> 00:01:32,580
however it has this very large
screen, so users browsing the web

17
00:01:32,580 --> 00:01:38,900
on iPad are really expecting a desktop
caliber, full fledged browsing experience.

18
00:01:38,900 --> 00:01:43,750
If you have audio or video on your
website, they want to see it on iPad.

19
00:01:43,750 --> 00:01:51,100
So since there are no plug-ins on iPad this really - this is
a device that caused a lot of website developers to sit up

20
00:01:51,100 --> 00:01:55,960
and take notice and take a good hard
look at web standards for the first time.

21
00:01:55,960 --> 00:01:58,580
So you've probably seen this site before.

22
00:01:58,580 --> 00:02:04,740
apple.com/ipad/ready-for-ipad and if you've
ever surfed the web you've probably seen

23
00:02:04,740 --> 00:02:07,240
at least one of the sites that are listed here.

24
00:02:07,240 --> 00:02:18,620
So there's quite a few: CNN, Vinio, NPR, People.com,
Life, America's Finest News Source, theonion.com.

25
00:02:18,620 --> 00:02:26,440
These are all websites that are moving to HTML5 to deliver
a great experience on iPad and in particular HTML5 audio

26
00:02:26,440 --> 00:02:29,590
and video elements to deliver a great experience.

27
00:02:29,590 --> 00:02:36,300
So I actually worked with quite a few of these
developers to get them started with HTML5 audio and video

28
00:02:36,300 --> 00:02:41,420
and that's what I'm going to do with
you today, help you do the same thing.

29
00:02:41,420 --> 00:02:47,800
So in this session I'm going to cover 3
main areas: the first is pretty simple,

30
00:02:47,800 --> 00:02:50,470
just adding media to your web pages with HTML5.

31
00:02:50,470 --> 00:02:58,670
After that I'm going to talk about how to optimize
that experience with standard web technologies

32
00:02:58,670 --> 00:03:06,550
and finally I'm going to discuss how you can
use built-in functions to control your media.

33
00:03:06,550 --> 00:03:15,310
As I mentioned I work with developers a lot so along
the way as we're going through those 3 main topics,

34
00:03:15,310 --> 00:03:20,880
I'm going to address some of the most common questions
that I've heard from developers just like you.

35
00:03:20,880 --> 00:03:30,230
So let's get started talking about
adding media to web pages with HTML5.

36
00:03:30,230 --> 00:03:35,360
So in this section I'm going to tell you
how you can specify fall back content,

37
00:03:35,360 --> 00:03:39,920
how you can write cross browser compatible
code and I'm also going to talk to you

38
00:03:39,920 --> 00:03:44,410
about some platform specific considerations
if you're deploying media

39
00:03:44,410 --> 00:03:52,020
with HTML5 on iPad or iPhone versus the desktop.

40
00:03:52,020 --> 00:03:53,450
So let's get started with the basics.

41
00:03:53,450 --> 00:04:00,150
So this is just one line of code and with this
boom you're done, you have video in your webpage.

42
00:04:00,150 --> 00:04:01,400
It's pretty great.

43
00:04:01,400 --> 00:04:08,620
I want to just take one moment to point out that everything
I'm going to talk about today is true for both the video tag

44
00:04:08,620 --> 00:04:16,660
and the audio tag so there's really only 5 attributes
that are different, that are unique to the video tag,

45
00:04:16,660 --> 00:04:20,240
poster image, height and width
and video height and video width,

46
00:04:20,240 --> 00:04:23,900
those last two are the native height and width of the video.

47
00:04:23,900 --> 00:04:28,220
Everything else is the same for the
two elements but most of my examples

48
00:04:28,220 --> 00:04:31,360
and code snippets et cetera are
going to focus on the video tag.

49
00:04:31,360 --> 00:04:35,640
So let's get back to our basic tag again.

50
00:04:35,640 --> 00:04:42,660
If we want to display some fall back content in web
browsers that don't support the HTML5 video tag,

51
00:04:42,660 --> 00:04:47,360
we simply nest that content in
between the opening and closing tags

52
00:04:47,360 --> 00:04:51,500
so here we're falling back to a
plug-in to display our movie.

53
00:04:51,500 --> 00:04:57,300
Here we're just showing a static image
and here we're showing some text.

54
00:04:57,300 --> 00:05:02,450
You can really put anything you like in
between these opening and closing elements.

55
00:05:02,450 --> 00:05:08,870
Also on our simple example here we have a
source attribute and you can really throw a lot

56
00:05:08,870 --> 00:05:11,840
at this source attribute and it just works.

57
00:05:11,840 --> 00:05:19,260
So for example, in Safari on the desktop the video and
audio elements will play any linear codec supported

58
00:05:19,260 --> 00:05:24,450
by QuickTime and this includes user installed codecs.

59
00:05:24,450 --> 00:05:33,750
In Safari on iOS you can play H.264 video
with a baseline profile, uncompressed WAV

60
00:05:33,750 --> 00:05:40,000
and AIF audio, and MP3 AAC-LC and HE-AAC audio.

61
00:05:40,000 --> 00:05:42,910
It's also worth noting there are
a couple of other types of media

62
00:05:42,910 --> 00:05:46,800
that you can provide to that source
attribute that just work.

63
00:05:46,800 --> 00:05:50,440
Those are QuickTime reference movies and also HTTP Streams.

64
00:05:50,440 --> 00:05:57,990
So you can point that source attribute at your streaming
media, at that URL and it will just work in Safari.

65
00:05:57,990 --> 00:06:04,010
Ok back to our simple example one more time.

66
00:06:04,010 --> 00:06:12,350
So we have this opening video tag, closing video tag and our
fallback content in between which just is a line of text.

67
00:06:12,350 --> 00:06:19,470
So it's worth noting and it trips people up a little
bit sometimes that this text is only displayed

68
00:06:19,470 --> 00:06:30,280
if the browser does not implement, does not support
the HTML5 video tag at all so in cases where you point

69
00:06:30,280 --> 00:06:35,120
to a media resource that can't be played, or
something like that because it's in a codec

70
00:06:35,120 --> 00:06:39,470
that the browser doesn't understand,
that fallback text won't be shown.

71
00:06:39,470 --> 00:06:43,810
It's only shown if the browser
doesn't implement the video tag.

72
00:06:43,810 --> 00:06:46,210
So how can we deal with that?

73
00:06:46,210 --> 00:06:51,820
Well one answer is to use the source tag and
you can put source tags in between your opening

74
00:06:51,820 --> 00:06:59,890
and closing video elements, video tags and what happens is
the browser sees these and they iterate through this list

75
00:06:59,890 --> 00:07:04,960
of source tags and they play the
first encoding that they can play.

76
00:07:04,960 --> 00:07:12,850
A couple of tips when you're using the source
tag is number 1, to specify a type attribute.

77
00:07:12,850 --> 00:07:19,300
So if you don't specify a type attribute, the browser
actually has to download a piece of the video to see

78
00:07:19,300 --> 00:07:25,070
if it can play it before it can move onto the next
one so you can avoid unnecessary network requests

79
00:07:25,070 --> 00:07:31,450
and optimize performance a little
bit if you always specify a type.

80
00:07:31,450 --> 00:07:37,000
You should also include in that type attribute
you can include a string of codecs so basically

81
00:07:37,000 --> 00:07:41,950
with this source tag you're asking the
browser a question: Can you play this video?

82
00:07:41,950 --> 00:07:45,850
The more information you give the
browser, the better answer it can provide.

83
00:07:45,850 --> 00:07:52,590
So if you provide additional information here like
codec information, the better answer you will get.

84
00:07:52,590 --> 00:07:56,870
So here we have 2 different codecs, they're both H.264 video

85
00:07:56,870 --> 00:08:01,790
but one is a baseline profile and
the other is a high profile.

86
00:08:04,710 --> 00:08:12,680
Another tip for using the source tag - it's really great
for just multiple media resources in general so just

87
00:08:12,680 --> 00:08:19,930
like you might use a CSS media query to serve different
CSS files to different devices iPhone, or iPad,

88
00:08:19,930 --> 00:08:26,160
or the desktop you can use those same queries
here in the media attribute on a source tag.

89
00:08:26,160 --> 00:08:34,520
So in this first example here I'm serving this smaller
file, maybe it's a smaller dimensions to a device

90
00:08:34,520 --> 00:08:42,990
that is probably an iPhone and in the second source tag
here I have a different file, it's larger dimensions,

91
00:08:42,990 --> 00:08:45,130
I want to serve that to anything bigger than an iPhone.

92
00:08:45,130 --> 00:08:56,630
Ok so we've talked about using the source tag
to go through different encodings to see whether

93
00:08:56,630 --> 00:09:04,340
or not the browser can play that given encoding but what
if you just want to have one encoding and you want to see

94
00:09:04,340 --> 00:09:10,520
if the browser can play that encoding
and supports the HTML5 video tag?

95
00:09:10,520 --> 00:09:12,010
Well here's what you do.

96
00:09:12,010 --> 00:09:18,460
The first step is to detect whether or not the
current browser supports the HTML5 video element

97
00:09:18,460 --> 00:09:22,310
so you can just check HTMLVideoElement in window here.

98
00:09:22,310 --> 00:09:31,530
The next step is to detect whether or not the browser
can play your media using the canplay type function

99
00:09:31,530 --> 00:09:36,910
so here we've checked to see if
the browser supports HTML5 video.

100
00:09:36,910 --> 00:09:43,090
Now we've created a video element and on
that video element we're calling canplay type

101
00:09:43,090 --> 00:09:48,250
and just like you saw the type attribute earlier on
the source tag we're going to specify the same type

102
00:09:48,250 --> 00:09:53,230
of string here, a mime type and a string of codecs.

103
00:09:53,230 --> 00:09:58,920
So this string that you're passing to
canPlayType it has a lot of information in it

104
00:09:58,920 --> 00:10:02,860
but it doesn't have all the information
that the browser needs to in order

105
00:10:02,860 --> 00:10:05,210
to determine whether or not it can play the video.

106
00:10:05,210 --> 00:10:11,150
For example, we can't know the bit rate, so
canPlayType can't conclusively tell you whether

107
00:10:11,150 --> 00:10:20,010
or not it can play the video but it can get pretty
close, it provides one of three answers: probably, maybe,

108
00:10:20,010 --> 00:10:25,500
and no are the three return values from canPlayType.

109
00:10:25,500 --> 00:10:27,170
Codecs they're crazy.

110
00:10:27,170 --> 00:10:35,130
So if it's maybe or probably you're in pretty good shape
so I'm going to set some extra attributes on my video tag

111
00:10:35,130 --> 00:10:44,560
or video element that I created earlier and then
I'm going to append that element to the body.

112
00:10:44,560 --> 00:10:50,070
Ok so now we're moving onto some
platform-specific differences between Safari

113
00:10:50,070 --> 00:10:53,480
on the desktop and Safari on iPad and iPhone.

114
00:10:53,480 --> 00:11:02,230
So here's my basic video tag once again with just a little
bit of text for fall back content and if I loaded that file

115
00:11:02,230 --> 00:11:08,510
in Safari on the desktop, Safari on iPad,
and Safari on iPhone here's what I would see.

116
00:11:08,510 --> 00:11:11,200
So the first thing that you're going to notice is

117
00:11:11,200 --> 00:11:15,600
that on the far right you're going
to see that controls are displayed.

118
00:11:15,600 --> 00:11:18,230
So iPhone always displays controls.

119
00:11:18,230 --> 00:11:23,840
The video is played in full screen mode all
the time and we always show our own controls

120
00:11:23,840 --> 00:11:28,450
over the video, so controls are always shown on iPhone.

121
00:11:28,450 --> 00:11:34,260
The second thing you're going to notice is that these
videos are different sizes so I haven't specified a height

122
00:11:34,260 --> 00:11:42,850
and width on my video tag and so on iPad and iPhone
we get a default height and width of 150x300 pixels

123
00:11:42,850 --> 00:11:50,660
and this is per the HTML5 spec. What's happening here
behind the scenes is the default behavior on the desktop is

124
00:11:50,660 --> 00:11:54,420
to auto buffer download and auto buffer the video.

125
00:11:54,420 --> 00:12:00,400
So even though we haven't specified a height and width,
the browser knows the height and width of the video,

126
00:12:00,400 --> 00:12:04,370
just like when you specify a image in a webpage
and you don't specify a height and width.

127
00:12:04,370 --> 00:12:10,350
The browser can infer that information
from the media, in that case the image.

128
00:12:10,350 --> 00:12:15,230
So on iPad and iPhone there's no automatic buffering.

129
00:12:15,230 --> 00:12:22,400
We don't want our users to be on a cellular
network and incur involuntary data charges

130
00:12:22,400 --> 00:12:27,450
so we don't auto buffer this media on iPad and iPhone so in

131
00:12:27,450 --> 00:12:32,760
that case we can't infer the dimensions
and we have to give a default dimension.

132
00:12:32,760 --> 00:12:39,410
So luckily it's very easy to make one simple change
to this video tag to make all of these look the same.

133
00:12:39,410 --> 00:12:46,220
I'm just going to specify a height of 240, a width of
320 and I'm also going to add the controls attribute

134
00:12:46,220 --> 00:12:53,770
which is a boolean attribute so even the existence of it
turns it on so I could even have controls equals false here

135
00:12:53,770 --> 00:12:58,390
but it would still be there, it's boolean attribute
so the controls would still be on in that case.

136
00:12:58,390 --> 00:13:05,990
Here I've just set it with no value whatsoever and doing
that will cause my video to look like this on all platforms.

137
00:13:05,990 --> 00:13:13,950
All the same size that we would expect it to be and controls
that match the platform, so some controls on the desktop

138
00:13:13,950 --> 00:13:18,000
and then same controls on iPad and iPhone.

139
00:13:20,140 --> 00:13:24,370
Ok so that's one sort of platform-specific detail.

140
00:13:24,370 --> 00:13:27,930
Let me tell you about a few more.

141
00:13:27,930 --> 00:13:35,050
Safari on Mac OS X in windows is optimized for
concurrent playback of multiple media resources

142
00:13:35,050 --> 00:13:42,220
so you can play two videos at once, an audio and a video
file at once, two audio files at once, more than two,

143
00:13:42,220 --> 00:13:48,660
whatever you want to do, you can play multiple
files at the same time on the desktop.

144
00:13:48,660 --> 00:13:54,470
You also have programmatic volume control on the desktop
so you would set change the volume via the volume

145
00:13:54,470 --> 00:14:00,000
and muted properties on the video or audio
element and that is available on the desktop.

146
00:14:00,000 --> 00:14:06,470
And as I mentioned before automatic buffering
is enabled by default so things like autoplay,

147
00:14:06,470 --> 00:14:13,790
the autoplay attribute on an audio or video tag which will
start your video automatically, or calling the play function

148
00:14:13,790 --> 00:14:20,540
from an on-load handler or something like that, something
where the user has not explicitly triggered playback,

149
00:14:20,540 --> 00:14:25,840
both of those things will work on the desktop.

150
00:14:25,840 --> 00:14:35,420
On iOS, iOS is optimized for playback from a single
media resource, so only one media resource at a time.

151
00:14:35,420 --> 00:14:37,770
Volume is under user control.

152
00:14:37,770 --> 00:14:43,270
You notice that in this screen shot I don't have the little
volume control that I had on my previous screen shot,

153
00:14:43,270 --> 00:14:47,630
these are my own controls that I
drew myself and on iOS I removed them

154
00:14:47,630 --> 00:14:51,110
because the volume cannot be changed programmatically.

155
00:14:51,110 --> 00:14:55,230
This is true for native iOS applications as well.

156
00:14:55,230 --> 00:15:00,590
You don't want one of the apps that you installed
or a script from a webpage muting your volume

157
00:15:00,590 --> 00:15:07,920
and missing a phone call so volume is under user
control on iOS and finally, as I mentioned earlier,

158
00:15:07,920 --> 00:15:14,840
there's no automatic buffering on iOS and this
means that things like autoplay do not work.

159
00:15:14,840 --> 00:15:20,290
Again we don't want our users to incur data
charges involuntarily and if you call play

160
00:15:20,290 --> 00:15:33,190
from your on-load handler not a result of a explicit user
action to click a play button, that will not work on iOS.

161
00:15:33,190 --> 00:15:39,980
Ok so that covers the first section:
Adding Media to Your Web Pages with HTML5,

162
00:15:39,980 --> 00:15:46,030
now let's move onto Optimizing the Media
Experience with Standard Web Technologies.

163
00:15:49,130 --> 00:15:57,590
Ok so I mentioned a couple of times that autoplay or calling
the play function in line is only supported on the desktop

164
00:15:57,590 --> 00:16:04,360
and I want to give you a real world example of how
that affects the different events that are emitted

165
00:16:04,360 --> 00:16:09,490
by the HTML5 audio and video tags so
I'm going to switch to the demo machine.

166
00:16:14,620 --> 00:16:21,430
Ok can barely see you guys now but oh well.

167
00:16:21,430 --> 00:16:30,050
So I'm going to load this simple file and this is basically
a simple video tag, I have the controls attribute set

168
00:16:30,050 --> 00:16:38,000
and then I have a bunch of event listeners added that
log a message to the page whenever an event is emitted.

169
00:16:38,000 --> 00:16:44,720
So here you can see load start and duration change
have fired, I'm going to show some notes here

170
00:16:44,720 --> 00:16:48,350
and explain a couple of the non-obvious ones.

171
00:16:48,350 --> 00:16:50,270
Load in metadata is very important.

172
00:16:50,270 --> 00:16:53,390
At this point you know the height and width of the video.

173
00:16:53,390 --> 00:16:59,000
Loaded data tells us that the browser can render
the media data at the current playback position.

174
00:16:59,000 --> 00:17:01,560
In this case its zero time.

175
00:17:01,560 --> 00:17:07,010
Progress tells us it's fetching the
media, this is a pretty small file,

176
00:17:07,010 --> 00:17:10,410
it's only 42 seconds so we only
have one progress event here.

177
00:17:10,410 --> 00:17:16,510
Canplay tells us we can play the media but we might
have to buffer to play it all the way to the end

178
00:17:16,510 --> 00:17:20,720
and canplaythrough tells us we can play it all
the way through and won't have to buffer anymore.

179
00:17:20,720 --> 00:17:29,980
So I'm just going to start playing this media and you can
see a couple of things have happened we got this play event

180
00:17:29,980 --> 00:17:34,080
which tells us we just returned from the play
function, playing tells us playback has started

181
00:17:34,080 --> 00:17:38,660
and we received several time update events here as well.

182
00:17:38,660 --> 00:17:45,060
So time update is emitted anywhere
from 3-5 times per second here.

183
00:17:45,060 --> 00:17:54,280
So I'm just going to collapse those and then I'm
going to load the same file on iOS on iPhone.

184
00:17:54,280 --> 00:18:02,180
So you can see right away that the first frame of
this video is black and also we get two events here:

185
00:18:02,180 --> 00:18:08,500
We get a load start event and a suspend event so the
load start tells us that media has started downloading

186
00:18:08,500 --> 00:18:14,090
and the suspend event tells us that loading has
stopped but not all of the media has downloaded.

187
00:18:14,090 --> 00:18:21,700
So now I'm going to play this video,
its Johnny talking about iPad

188
00:18:21,700 --> 00:18:26,890
and now full screen mode which is the default on iPhone.

189
00:18:26,890 --> 00:18:33,950
So I'm just going to click done and the
interesting thing that you should note here is

190
00:18:33,950 --> 00:18:40,070
that JavaScript is still running even when my video is
playing in full screen mode so I'm still getting all

191
00:18:40,070 --> 00:18:48,010
of the events that you would expect to get, even when
you know the video is taking over the whole screen.

192
00:18:48,010 --> 00:18:55,800
So here we had our load start and suspend, we click the
Play button here, we were waiting a little bit for some

193
00:18:55,800 --> 00:19:03,090
of the media, we got a duration change event, a lot
of these are the same as the desktop, loaded metadata

194
00:19:03,090 --> 00:19:09,570
and loaded data, canplay so at this point
we immediately start playing the media

195
00:19:09,570 --> 00:19:13,170
because we clicked the Play button way back here.

196
00:19:13,170 --> 00:19:19,400
We get a progress event telling us that the media is
being fetched, canplay through, load and then pause

197
00:19:19,400 --> 00:19:23,880
and of course all of these time update events as well.

198
00:19:23,880 --> 00:19:36,410
So that's it in a nutshell how events work with
the video tag in Safari on the desktop and on iOS.

199
00:19:36,410 --> 00:19:43,540
So this is actually really important because understanding
when these events are emitted are really critical

200
00:19:43,540 --> 00:19:49,920
if you want to kind of enhance the user experience,
create your own controls, add a progress indicator,

201
00:19:49,920 --> 00:19:54,850
anything like that you need to have a good
understanding of when these events are firing.

202
00:19:54,850 --> 00:20:02,980
So the sample that I just showed should be associated with
this session as sample code and I would really encourage you

203
00:20:02,980 --> 00:20:10,400
to experiment with that file, try out
different devices, different media sources,

204
00:20:10,400 --> 00:20:14,150
try a streaming source, try a very large resource.

205
00:20:14,150 --> 00:20:19,270
Here we just got one progress event but if you
had a very large resource you would get many

206
00:20:19,270 --> 00:20:21,690
and also software versions.

207
00:20:21,690 --> 00:20:26,400
The HTML5 spec for video is changing a little bit.

208
00:20:26,400 --> 00:20:35,950
One concrete example is that the load event has been removed
so that is something that may change in the future in Safari

209
00:20:35,950 --> 00:20:41,330
so try different software versions as well.

210
00:20:41,330 --> 00:20:46,800
Ok so we saw just now the default
behavior on both platforms.

211
00:20:46,800 --> 00:20:55,320
Auto buffered on the desktop, not auto buffered on iOS
but what if I wanted to disable automatic buffering

212
00:20:55,320 --> 00:21:02,410
on the desktop, so maybe I have a video blog and I have
like 10 videos on the front page and I don't want them all

213
00:21:02,410 --> 00:21:07,410
to start downloading at once because that would use up
a lot of bandwidth and it wouldn't be great performance

214
00:21:07,410 --> 00:21:10,870
so I want to just disable automatic buffering.

215
00:21:10,870 --> 00:21:19,370
Well there is a new attribute that is available in Safari
5 and it's this pre-load attribute and you can just set it

216
00:21:19,370 --> 00:21:24,360
to none and auto buffering is disabled, which is great.

217
00:21:24,360 --> 00:21:30,600
So that's new in Safari 5 but what
about users who may still have Safari 4?

218
00:21:30,600 --> 00:21:34,770
You might want to disable auto
buffering for those users as well.

219
00:21:34,770 --> 00:21:42,420
Well thanks to the power of JavaScript that's easy to do
as well so here we have our video element and you'll notice

220
00:21:42,420 --> 00:21:47,600
that the source attribute is blank,
it's just an empty string so basically

221
00:21:47,600 --> 00:21:53,830
when the browser encounters a video tag it'll look at that
source attribute and if there's anything there it's going

222
00:21:53,830 --> 00:21:57,050
to try to start pulling that media immediately.

223
00:21:57,050 --> 00:22:03,710
If there's nothing there it has nothing to pull so
we also set a little event handler here for a click

224
00:22:03,710 --> 00:22:09,490
and when we click on this video element
we call this set source function.

225
00:22:09,490 --> 00:22:18,150
We get our video element and we just set the source
attribute to the URL of our media, in this case iPad.m4v.

226
00:22:18,150 --> 00:22:26,920
Then we programmatically play and everything is great,
no automatic buffering in older versions of Safari.

227
00:22:26,920 --> 00:22:34,180
A couple of other, I want to point out a
couple of other useful things about events,

228
00:22:34,180 --> 00:22:38,540
basically when you should do what as far as events go.

229
00:22:38,540 --> 00:22:46,440
So loaded metadata is a really important one so
here we are setting height and width on the fly.

230
00:22:46,440 --> 00:22:52,910
Earlier in this discussion I mentioned how you'll get
a default height and width if you don't specify one.

231
00:22:52,910 --> 00:22:58,310
Sometimes it's not always possible to hard
code that height and width into your video tag.

232
00:22:58,310 --> 00:23:02,560
You might be serving the video on the
fly and not know the height and width.

233
00:23:02,560 --> 00:23:09,420
So you can set these attributes on the fly and resize
your video pretty easily so here we're listening

234
00:23:09,420 --> 00:23:16,340
for a loaded metadata event and when we get it we're
going to set height and width, very straight forward,

235
00:23:16,340 --> 00:23:22,620
we're just getting our video element and we're
looking at the native video height and video width

236
00:23:22,620 --> 00:23:26,190
and we're setting the height and
width attributes accordingly.

237
00:23:26,190 --> 00:23:29,230
So this will resize your height and width on the fly.

238
00:23:29,230 --> 00:23:35,810
Loaded metadata is also really important
if you want to trigger full screen mode.

239
00:23:35,810 --> 00:23:39,330
So this is now supported in Safari 5, its new.

240
00:23:39,330 --> 00:23:42,490
Saw it at the State of the Union
yesterday, it was mentioned.

241
00:23:42,490 --> 00:23:49,920
This is really cool so we have again our simple
video tag listening for loaded metadata event

242
00:23:49,920 --> 00:23:54,700
in this case we're calling a function
called checkFullscreenSupport.

243
00:23:54,700 --> 00:24:00,790
We also have a button on this page, this button is
actually what's triggering full screen mode and it's doing

244
00:24:00,790 --> 00:24:07,260
that by getting our video element
and calling webkitEnterFullscreen.

245
00:24:07,260 --> 00:24:12,560
So this is our button that's triggering
full screen mode in our user controls.

246
00:24:12,560 --> 00:24:19,340
So back to our check full screen support function
here which is called once the metadata is loaded,

247
00:24:19,340 --> 00:24:27,590
at this point you need to check and see if the
video element, or it could even be an audio element,

248
00:24:27,590 --> 00:24:34,060
if that supports full screen mode so if it
doesn't support full screen mode I'm going

249
00:24:34,060 --> 00:24:36,510
to want to hide that button that triggers it.

250
00:24:36,510 --> 00:24:41,860
So if you're drawing your own custom controls this
is a really great technique you you know don't want

251
00:24:41,860 --> 00:24:45,880
to present controls to the users that
don't work so always check to see

252
00:24:45,880 --> 00:24:52,730
if full screen mode is supported
for those types of controls.

253
00:24:52,730 --> 00:25:01,980
Ok other useful events that are emitted by HTML5 media
elements are canplay, canplaythrough and waiting.

254
00:25:01,980 --> 00:25:07,360
These are great opportunities to show a
progress indicator to let your user know

255
00:25:07,360 --> 00:25:10,420
that something's happening but they
just have to wait a little bit.

256
00:25:10,420 --> 00:25:16,020
We're not going to show any code snippets for this one
because Beth Dakin is going to walk us through the code step

257
00:25:16,020 --> 00:25:22,510
by step and show us exactly how to listen for these
events and optimize the user experience so Beth.

258
00:25:22,510 --> 00:25:29,100
[ applause ]

259
00:25:29,100 --> 00:25:31,260
>> Beth Dakin: Thanks Vicki.

260
00:25:31,260 --> 00:25:35,570
So I put together a little webpage
today that just shows a video,

261
00:25:35,570 --> 00:25:38,980
I'd like to share it with you and
it's really pretty straight forward.

262
00:25:38,980 --> 00:25:43,360
So let's just dive straight into the code.

263
00:25:45,130 --> 00:25:51,580
So here's my HTML file I just have
14 lines of HTML, very simple stuff,

264
00:25:51,580 --> 00:25:54,350
this should look pretty familiar at this point.

265
00:25:54,350 --> 00:25:59,250
Here's my video element I just have
an ID on it, a width and a height.

266
00:25:59,250 --> 00:26:03,930
I specify the controls attribute so that I
get the default controls on each platform.

267
00:26:03,930 --> 00:26:11,190
I have the source pointing to my media resource which is
a beautiful short film called Dartmoore by James Watson -

268
00:26:11,190 --> 00:26:18,340
highly recommend it - and finally I've specified the poster
attribute to have pointing to a ping that I have that I want

269
00:26:18,340 --> 00:26:22,290
to display as a poster image and I have
a little bit of fall back content too

270
00:26:22,290 --> 00:26:28,320
and then I just have a link down
here to James Watson's webpage.

271
00:26:28,320 --> 00:26:37,270
I just have a tiny bit of CSS, which isn't especially
relevant to this so we won't really focus on it

272
00:26:37,270 --> 00:26:39,510
so let's take a look at what this looks like in iPad.

273
00:26:39,510 --> 00:26:46,590
[ pause in speaking ]

274
00:26:46,590 --> 00:26:54,510
So here you go I have my poster image displayed
here, I get the default controls and I can

275
00:26:54,510 --> 00:27:01,790
[ music ]

276
00:27:01,790 --> 00:27:03,600
Let's take a look at this in Safari 5.

277
00:27:03,600 --> 00:27:13,120
So you may have noticed a little something different here.

278
00:27:13,120 --> 00:27:17,050
We're no longer showing a poster image so let
me explain what's going on there a little bit,

279
00:27:17,050 --> 00:27:22,940
the HTML5 specification defines a poster image as
something that shows when no data is available,

280
00:27:22,940 --> 00:27:28,910
so as Vicki explained earlier the default behavior
on Safari on the desktop is to auto buffer the video.

281
00:27:28,910 --> 00:27:34,570
So once enough of the video has auto buffered
the poster image won't display anymore

282
00:27:34,570 --> 00:27:42,510
and so what we're seeing instead is the first frame of the
video which happens to be black so now I can play my video

283
00:27:42,510 --> 00:27:48,140
[ music ]

284
00:27:48,140 --> 00:27:48,990
There you go.

285
00:27:48,990 --> 00:27:56,240
So with just a few lines of HTML I've got a really good
out of the box experience here for the HTML5 video element

286
00:27:56,240 --> 00:28:02,480
but the fact that this is so good out of the box is really
only half of what's awesome about HTML5 video element.

287
00:28:02,480 --> 00:28:08,450
Really the other half is that it's totally customizable,
it's within your power and control as a designer

288
00:28:08,450 --> 00:28:13,190
to make this look however you want so there
are a few things that I want to change here.

289
00:28:13,190 --> 00:28:18,740
First of all I don't think I want a poster image, what I
really want is an image overlay that's going to display

290
00:28:18,740 --> 00:28:24,830
over the video until the user starts playing it and
instead of just disappearing and going to the first frame

291
00:28:24,830 --> 00:28:31,000
of the video like a poster image, I want it to fade out
nicely which is an effect we can easily achieve with CSS

292
00:28:31,000 --> 00:28:36,590
and I also want a custom play button that will be
the same on all platforms so that's kind of a lot

293
00:28:36,590 --> 00:28:42,470
so let me show you what I want to achieve
and then I'll show you the code to do it.

294
00:28:42,470 --> 00:28:45,680
Ok so this is what I want here we are on Safari 5.

295
00:28:45,680 --> 00:28:51,270
We still have that image because it's not a
poster image, it's instead an image overlay

296
00:28:51,270 --> 00:28:53,820
and it's still there and I have my custom button.

297
00:28:53,820 --> 00:28:55,510
So let's take a look at the code.

298
00:28:55,510 --> 00:29:05,240
[ pause in speaking ]

299
00:29:05,240 --> 00:29:10,840
Ok here's my HTML it has not changed
much, it's only a few lines longer.

300
00:29:10,840 --> 00:29:14,990
We have 20 lines of HTML now instead of 14.

301
00:29:14,990 --> 00:29:18,320
My video element should look pretty much the same.

302
00:29:18,320 --> 00:29:20,500
I've removed the poster image attribute.

303
00:29:20,500 --> 00:29:27,010
Here I've added a DIV element that I'm calling my status
DIV this is going to be that click to play button.

304
00:29:27,010 --> 00:29:32,920
I also have an image element, this is the image
overlay, it's pointing to the same ping resource

305
00:29:32,920 --> 00:29:39,750
that I was formally using as a poster image but
now it's my image overlay and I've also added

306
00:29:39,750 --> 00:29:46,340
to my body tag here I've added an on load handler I'll call
a function init and I've also added a little job script file

307
00:29:46,340 --> 00:29:48,520
so let's take a look at that init function.

308
00:29:48,520 --> 00:29:52,080
Here it is in my JavaScript file.

309
00:29:52,080 --> 00:29:58,370
Basically the point of this function is to just add a few
event listeners for various events that I want to handle

310
00:29:58,370 --> 00:30:05,270
when that click to play button is clicked so I have
a little bit of local variable stuff here at the top,

311
00:30:05,270 --> 00:30:13,030
just to take care of most down, most up, touch start,
touch end etc, cover all my bases with desktop and iOS

312
00:30:13,030 --> 00:30:20,220
and then the first one here when I get any
of those up events I want to call load video

313
00:30:20,220 --> 00:30:22,580
so that's a function I've defined right here.

314
00:30:22,580 --> 00:30:24,250
Let's take a look at that.

315
00:30:24,250 --> 00:30:29,190
Load video will just get that video, add an
event listener to the video itself so that

316
00:30:29,190 --> 00:30:33,290
if we get the canplay event then we'll
call another function play video.

317
00:30:33,290 --> 00:30:38,450
We also load the video here and here we're setting
the controls attribute on the fly instead of doing it

318
00:30:38,450 --> 00:30:42,290
in the HTML and this is just so our
click to play button is clickable,

319
00:30:42,290 --> 00:30:49,520
we don't want the default controls handling those clicks
so we're just going to set this when the video is loading.

320
00:30:49,520 --> 00:30:53,780
So the play video function is the one
we'll call when we get that canplay event

321
00:30:53,780 --> 00:31:01,080
and here what we're doing is just changing class names
for the image overlay and the click to play button,

322
00:31:01,080 --> 00:31:06,800
the status DIV and then I'm telling the video to play
programmatically but this is a really common technique

323
00:31:06,800 --> 00:31:11,930
that any of you familiar with web development, which
is probably a lot of you, are probably familiar with

324
00:31:11,930 --> 00:31:16,320
but basically we're just switching out class
names here, what we really want to achieve

325
00:31:16,320 --> 00:31:23,320
in this function is just changing around some CSS and
rather than writing out a bunch of lines of JavaScript

326
00:31:23,320 --> 00:31:28,750
to individually manipulate the CSS attributes on
each of these elements, I'm just changing class names

327
00:31:28,750 --> 00:31:33,930
so changing these [inaudible] class names hidden which I
have defined in my style sheet will just cause their opacity

328
00:31:33,930 --> 00:31:41,400
to be 0, their Z index -1, they'll be out of the way and
basically all the rest of the JavaScript in this function,

329
00:31:41,400 --> 00:31:48,590
excuse me this file is just devoted to toggling
the appearance of that click to play button

330
00:31:48,590 --> 00:31:56,430
so that it disappears appropriately and one other thing I
want to point out here is I've also defined some transitions

331
00:31:56,430 --> 00:32:01,450
in my CSS just here so that my image
overlay and my click to play button

332
00:32:01,450 --> 00:32:06,270
at status DIV will fade out nicely with the transition.

333
00:32:06,270 --> 00:32:08,880
It's really this simple, if you
don't know about transitions,

334
00:32:08,880 --> 00:32:13,510
or you want to know more there are two sessions
later today: CSS Effects Part 1 and Part 2

335
00:32:13,510 --> 00:32:17,850
that I strongly encourage you to
attend to learn more about that.

336
00:32:17,850 --> 00:32:21,080
So let's take a look at this in action

337
00:32:21,080 --> 00:32:22,100
[ Background music ]

338
00:32:22,100 --> 00:32:29,220
So there we go I have a poster image
and it faded out nicely [inaudible].

339
00:32:29,220 --> 00:32:36,060
And we have the same experience on iPad

340
00:32:37,510 --> 00:32:42,860
[ music ]

341
00:32:42,860 --> 00:32:51,690
So we have a pretty fast network right now and so this
video is loading pretty quickly but you can imagine

342
00:32:51,690 --> 00:32:56,220
that if we were on some kind of cellular
network, or having some kind of network problems,

343
00:32:56,220 --> 00:33:01,530
this might take awhile to load and it might be a little
bit confusing to users who just clicked that button

344
00:33:01,530 --> 00:33:04,140
and see nothing happening yet cause
the video is not ready to play.

345
00:33:04,140 --> 00:33:08,760
So I think I want to enhance this some
more by adding some progress indication.

346
00:33:08,760 --> 00:33:14,540
Also if the resource wasn't available it seems
like my user would get a pretty bad experience too.

347
00:33:14,540 --> 00:33:25,010
So if I just change the source attribute on my video to
something that doesn't exist and then I reload this page

348
00:33:25,010 --> 00:33:27,780
and try to play it, nothing's happening here.

349
00:33:27,780 --> 00:33:33,510
So this is not a great experience so I think
we should add some error handling as well.

350
00:33:33,510 --> 00:33:40,290
[ pause in speaking ]

351
00:33:40,290 --> 00:33:42,880
So let's take a look at that.

352
00:33:42,880 --> 00:33:51,430
So I'm going to add some progress indication and error
handling so I don't' need to change my HTML to do that.

353
00:33:51,430 --> 00:33:55,900
Over here in the JavaScript I don't need to
change either of these functions up here in it,

354
00:33:55,900 --> 00:33:58,870
our toggle button appearance so I've just collapsed them.

355
00:33:58,870 --> 00:34:04,380
Here I'm taking I'm doing some more of that class
name manipulation I mentioned earlier and I'm going

356
00:34:04,380 --> 00:34:09,700
to change the class name of that status DIV
which was our click to play button to progress.

357
00:34:09,700 --> 00:34:17,310
So if we look over at our CSS file to see what progress
is that's going to change the content of that progress DIV

358
00:34:17,310 --> 00:34:26,180
to an animated gif so if we look at my resources that's
just this simple animated gif with a few frames that I have

359
00:34:26,180 --> 00:34:32,410
of like a spinning progress indicator
back here in the script.

360
00:34:32,410 --> 00:34:39,610
I also wanted to add error handling so I'm adding another
event listener here for the error event and if we get

361
00:34:39,610 --> 00:34:45,840
that event then we will call our new report error
function which also just does class name manipulation

362
00:34:45,840 --> 00:34:53,500
on that status DIV and we'll change the class name to error
where instead of that animated gif we'll have some text.

363
00:34:53,500 --> 00:34:54,550
So let's take a look at this.

364
00:34:54,550 --> 00:35:05,100
[Background music] So there we have the nice progress
indication; we got to see the video is loading,

365
00:35:05,100 --> 00:35:12,100
it took awhile, but it would make
a lot more sense to our users.

366
00:35:12,100 --> 00:35:24,080
And finally if the resource is actually not available
then we also get some nice indication to that

367
00:35:24,080 --> 00:35:28,120
and again this all works the same on an iPad.

368
00:35:28,120 --> 00:35:41,510
[music] So that's all for now I think I'll
hand it back to Vicki thanks everybody.

369
00:35:41,510 --> 00:35:51,430
[ applause ]

370
00:35:51,430 --> 00:35:54,450
>> Vicki: Al right thanks Beth.

371
00:35:54,450 --> 00:35:58,010
That was pretty cool.

372
00:35:58,010 --> 00:36:02,310
So there are a lot of pretty cool things about that demo.

373
00:36:02,310 --> 00:36:05,480
I just wanted to point a couple of them out.

374
00:36:05,480 --> 00:36:11,470
First, we basically we're noticing that HTML5
video is just like any other web page element.

375
00:36:11,470 --> 00:36:13,480
You can layer it with other elements; here we have

376
00:36:13,480 --> 00:36:18,200
that button overlaying an image
which was overlaid over the video.

377
00:36:18,200 --> 00:36:24,070
You can style it with CSS, not sure if you noticed
but there was a little box shadow around the video,

378
00:36:24,070 --> 00:36:30,930
that was just CSS applied directly to the video
element and also it can be manipulated with JavaScript.

379
00:36:30,930 --> 00:36:36,710
Now the power of JavaScript in the DOM here
allowed us to add a lot of enhancements

380
00:36:36,710 --> 00:36:42,710
to that basic video tag pretty quickly
so that was pretty cool thank you Beth.

381
00:36:42,710 --> 00:36:50,640
Ok so that covers Part 2 Optimizing Your Media Experience
with Standard Web Technologies and now we're going to move

382
00:36:50,640 --> 00:36:56,920
onto the final section here: Using
Built in Functions to Control Media.

383
00:36:56,920 --> 00:37:06,450
So a lot of websites out there are doing a really great
job just using basic, the built in standard controls

384
00:37:06,450 --> 00:37:12,760
so here's America's finest news
source, The Onion displaying video

385
00:37:12,760 --> 00:37:17,490
with just the controls attribute, no custom controls at all.

386
00:37:17,490 --> 00:37:22,450
But it's actually pretty simple to add your
own custom controls and we're going to look

387
00:37:22,450 --> 00:37:26,820
at a very common control here, a play/pause button.

388
00:37:26,820 --> 00:37:29,870
So it's pretty simple to do.

389
00:37:29,870 --> 00:37:34,400
We basically have our video tag
at the bottom, is that built in?

390
00:37:34,400 --> 00:37:35,430
Yes it is.

391
00:37:35,430 --> 00:37:38,260
So we have our video tag at the bottom.

392
00:37:38,260 --> 00:37:44,250
We have a button here which says play/pause
on it and when it's clicked we're going

393
00:37:44,250 --> 00:37:50,480
to call this play/pause function here and this
is basically getting our video and checking

394
00:37:50,480 --> 00:37:54,260
to see if it's paused via the pause property.

395
00:37:54,260 --> 00:37:59,840
If it is paused, we're going to play it and
otherwise we're going to programmatically pause it.

396
00:37:59,840 --> 00:38:08,490
So pretty straight forward, not very many lines of
code and to show us exactly how that works I want

397
00:38:08,490 --> 00:38:12,510
to bring Beth back to the stage to add a Play/Pause button

398
00:38:12,510 --> 00:38:17,040
[ applause ]

399
00:38:17,040 --> 00:38:21,250
>> Beth: Thanks Vicki.

400
00:38:24,530 --> 00:38:31,220
Let's see ok so we're going to
add a play/pause button to this.

401
00:38:31,220 --> 00:38:37,920
So here's my HTML again and it hasn't changed
much, I've added one more element here,

402
00:38:37,920 --> 00:38:43,210
another DIV and this one has the ID play/pause button.

403
00:38:43,210 --> 00:38:54,080
If we look in our script file here I've rewritten this init
function a little bit because now I have a lot of buttons

404
00:38:54,080 --> 00:38:59,150
so I've added this for loop so that all
of my buttons do these first two things,

405
00:38:59,150 --> 00:39:05,560
which is to toggle the button appearance so that I
don't have to rewrite adding those event listeners

406
00:39:05,560 --> 00:39:09,120
for every single button manually
and then for the special buttons

407
00:39:09,120 --> 00:39:12,070
that need some extra event listeners
I've added this switch statement.

408
00:39:12,070 --> 00:39:16,930
So this status case is an event listener that we
added before, we don't need to talk about that

409
00:39:16,930 --> 00:39:23,210
but what's new is here we've also added a case for the
play/pause button so we'll add an additional event listener

410
00:39:23,210 --> 00:39:30,840
for that button that whenever we get the up event we'll
call toggle, play, pause and so that I've defined down here.

411
00:39:30,840 --> 00:39:36,910
I'm not going to get into this too much because it's
basically identical to what Vicki showed you on her slide,

412
00:39:36,910 --> 00:39:42,040
it's pretty straight forward here we're just
programmatically calling play or pause as appropriate

413
00:39:42,040 --> 00:39:49,480
and I'm also switching out some class names again to
get the appearance that I want further in the play case

414
00:39:49,480 --> 00:39:57,820
or the pause case and the only other thing I want to point
out here is that I have also gotten rid of my line of code

415
00:39:57,820 --> 00:40:00,620
that used to set that controls attribute programmatically,

416
00:40:00,620 --> 00:40:05,020
because now we're drawing custom controls
so we don't want default controls.

417
00:40:05,020 --> 00:40:07,500
So I'm just commenting out that line of code.

418
00:40:07,500 --> 00:40:15,030
Oh and then the other thing is that I'm just
telling the play/pause button here to show

419
00:40:15,030 --> 00:40:20,340
because initially it's not showing until we start playing
the video so I want to tell it to show here and it will fade

420
00:40:20,340 --> 00:40:24,540
in nicely because I've added a
transition to my CSS file for that.

421
00:40:24,540 --> 00:40:26,510
So let's take a look at this.

422
00:40:26,510 --> 00:40:31,150
[ pause in speaking ]

423
00:40:31,150 --> 00:40:36,950
[background music] So there you go you can see my custom
pause button in the corner there, no default controls.

424
00:40:36,950 --> 00:40:41,500
I can click Pause and it toggles appropriately.

425
00:40:41,500 --> 00:40:46,610
[background music] I can click Play again and you'll
see it has it's semi-opaque so it has this nice effect,

426
00:40:46,610 --> 00:40:51,440
you can see the video playing behind it, it's
just another element layered on top of the video

427
00:40:51,440 --> 00:40:59,510
and we can see the same thing whoops in iPad.

428
00:40:59,510 --> 00:41:05,070
[ pause in speaking ]

429
00:41:05,070 --> 00:41:08,510
[background music] There we go

430
00:41:08,510 --> 00:41:14,040
[ applause and music ]

431
00:41:14,040 --> 00:41:15,840
Thanks. Back to you Vicki.

432
00:41:15,840 --> 00:41:22,650
>> Vicki: Beth oh you know what though like it
would have been really cool if you had added

433
00:41:22,650 --> 00:41:28,450
like a full screen button too since that's new in
Safari 5, like that Play/Pause button was pretty cool

434
00:41:28,450 --> 00:41:31,510
but it would have been really cool if
you added a full screen button too.

435
00:41:31,510 --> 00:41:37,050
>> Beth: Actually Vicki I do have a version
of the demo with a full screen button.

436
00:41:37,050 --> 00:41:40,510
Why don't I show everybody?

437
00:41:40,510 --> 00:41:44,230
[ pause in speaking ]

438
00:41:44,230 --> 00:41:48,550
Ok so to add a full screen button again
we just need to add a few more lines.

439
00:41:48,550 --> 00:41:56,410
Here in my HTML I've added another DIV,
this one has the ID full screen button.

440
00:41:56,410 --> 00:42:03,800
If we looked over in the JavaScript
here we add another special case

441
00:42:03,800 --> 00:42:06,630
for our full screen button, a special case event listener.

442
00:42:06,630 --> 00:42:13,900
When we get that up event on the full screen button we will
enter full screen but you may recall you may have noticed

443
00:42:13,900 --> 00:42:21,580
in my HTML the default the initial behavior of that
DIV that's the full screen button is to be hidden

444
00:42:21,580 --> 00:42:25,880
so what we really want to control here is when
we show that full screen button and we want

445
00:42:25,880 --> 00:42:29,940
to make sure we only show it when
we have full screen capabilities.

446
00:42:29,940 --> 00:42:36,320
So we add the event listener here cause we want the
capability to always be there but we're only going

447
00:42:36,320 --> 00:42:44,890
to show it down here in our play video function
so you may recall that play video is only called

448
00:42:44,890 --> 00:42:49,520
when we get the canplay event so by the
time we get the canplay event we will know

449
00:42:49,520 --> 00:42:56,170
if we have full screen video capabilities so
if we have it then we will show the button.

450
00:42:56,170 --> 00:42:57,050
So let's take a look at that.

451
00:42:57,050 --> 00:43:03,580
[background music] Click to play, I get my custom controls.

452
00:43:03,580 --> 00:43:06,730
I have my new full screen button in the corner.

453
00:43:06,730 --> 00:43:13,250
I can press it, we go full screen, then
I can collapse by clicking this button

454
00:43:13,250 --> 00:43:19,510
or pressing escape and that's it, full screen button.

455
00:43:19,510 --> 00:43:24,120
[ applause ]

456
00:43:24,120 --> 00:43:26,160
>> Vicki: Thanks Beth that was pretty cool.

457
00:43:26,160 --> 00:43:31,230
You know that was pretty cool how it like scaled
in and everything but this video it's kind

458
00:43:31,230 --> 00:43:36,940
of big it would have been cool if our video was a little
smaller so that people could really see the scaling effect.

459
00:43:36,940 --> 00:43:42,420
I mean no offense; it would have been
cool if we had something like that.

460
00:43:42,420 --> 00:43:44,220
>> Beth: I do actually.

461
00:43:44,220 --> 00:43:46,390
I can show everybody.

462
00:43:46,390 --> 00:43:48,540
How about I do that?

463
00:43:48,540 --> 00:43:55,280
[background music] So here's a version of my movie that's
kind of small but I can click it and go full screen.

464
00:43:55,280 --> 00:44:00,080
Why don't we watch that slow motion?

465
00:44:00,080 --> 00:44:09,130
There you can really see how nice that transition
is and that's just out of the box experience there.

466
00:44:09,130 --> 00:44:18,510
You can see it's scaling up slowly, you can also
see the background fading out, it's pretty sweet.

467
00:44:18,510 --> 00:44:27,040
[ applause ]

468
00:44:27,040 --> 00:44:29,180
Ok I think I'll go back to your slides now if that's ok.

469
00:44:29,180 --> 00:44:32,590
>> Vicki: All right sounds good.

470
00:44:32,590 --> 00:44:35,150
All right thanks Beth.

471
00:44:35,150 --> 00:44:44,310
So pretty quickly added our own custom play/pause button
that matched the look and feel of our video, pretty cool.

472
00:44:44,310 --> 00:44:53,160
So just to recap what I've gone over today: First I
talked about adding media to your web pages with HTML5;

473
00:44:53,160 --> 00:44:58,750
really simple to just add one line
of code and simple fallback as well.

474
00:44:58,750 --> 00:45:06,280
After that we talked about optimizing the media delivery
experience with standard web technologies, just using CSS,

475
00:45:06,280 --> 00:45:14,930
JavaScript the DOM to make your media look great and finally
we just really quickly cause it was really simple went

476
00:45:14,930 --> 00:45:18,730
over how to use built-in functions
to create custom media controls,

477
00:45:18,730 --> 00:45:21,850
in this case we just did a simple play/pause button.

478
00:45:21,850 --> 00:45:29,780
So just a couple of thoughts to take
with you today when you leave this room:

479
00:45:29,780 --> 00:45:35,860
I want you to remember that it's really easy
to add media to your web pages with HTML5.

480
00:45:35,860 --> 00:45:41,780
Lots of websites are just doing it with one line
of code, using the default controls, super easy.

481
00:45:41,780 --> 00:45:46,750
You can make it as basic or as sophisticated as you like.

482
00:45:46,750 --> 00:45:55,830
You saw when Beth was you know building up our demo code
that she started with just one video tag and then added

483
00:45:55,830 --> 00:46:02,180
to it as she went and made it pretty
sophisticated, pretty quickly and finally

484
00:46:02,180 --> 00:46:09,400
if you're a web programmer you're already an expert at using
HTML5 audio and video, it's just another web page element

485
00:46:09,400 --> 00:46:18,570
that you can style with CSS, manipulate with
JavaScript and get started with something pretty cool.

486
00:46:18,570 --> 00:46:23,050
So for more information if you have
any questions you can contact me,

487
00:46:23,050 --> 00:46:27,380
the Safari Technologies Evangelist at Vicki@apple.com.

488
00:46:27,380 --> 00:46:34,740
There's some great documentation on the Safari Dev
center which his at developer.apple.com/safari.

489
00:46:34,740 --> 00:46:40,230
Specifically, I would want to point out
the Safari HTML5 Audio and Video Guide.

490
00:46:40,230 --> 00:46:44,080
It's a great document that tells you
everything you're going to need to know

491
00:46:44,080 --> 00:46:48,270
about HTML5 media in Safari on all platforms.

492
00:46:48,270 --> 00:46:56,570
The HTML5 Spec is always a great resource to see what
the latest and greatest is around HTML5 and finally,

493
00:46:56,570 --> 00:47:04,580
announced yesterday we have Apple Developer Forums for
web developers just join the Safari Developer Program

494
00:47:04,580 --> 00:47:08,400
and access is totally free which is pretty cool.

495
00:47:09,690 --> 00:47:18,690
There are a lot of great sessions coming up this week
related to HTML5 media and web technologies in general.

496
00:47:18,690 --> 00:47:21,630
A couple of specific ones that I wanted to point out to you:

497
00:47:21,630 --> 00:47:28,360
In this room following this session we have
Delivering Audio and Video Using Web Standards Part 2.

498
00:47:28,360 --> 00:47:33,220
We also have - I think its right after
that one, Advances in HTTP Streaming,

499
00:47:33,220 --> 00:47:38,020
so if you want to set up streaming
media, don't miss that session.

500
00:47:38,020 --> 00:47:44,140
This afternoon also in this room
we have CSS Effects Part 1 and 2.

501
00:47:44,140 --> 00:47:46,190
These sessions are amazing.

502
00:47:46,190 --> 00:47:47,430
You don't want to miss them.

503
00:47:47,430 --> 00:47:53,320
They're going to show you how to add some really cool CSS
effects to your web pages, which also could apply to video

504
00:47:53,320 --> 00:47:58,490
and finally on Wednesday there's
another great session on adding touch

505
00:47:58,490 --> 00:48:01,870
and gesture detection to your web pages on iPhone OS.

506
00:48:01,870 --> 00:48:10,080
So here we just had a really simple example where we used
touch down, I'm sorry, touch start and touch end instead

507
00:48:10,080 --> 00:48:16,040
of mouse down and mouse up to just get really
direct manipulation of those buttons in our example.

508
00:48:16,040 --> 00:48:19,890
This session is going to go way beyond that
to tell you everything that you need to know

509
00:48:19,890 --> 00:48:23,110
and implement some pretty cool
stuff around down touch events.

