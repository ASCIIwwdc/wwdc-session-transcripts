WEBVTT

00:00:06.260 --> 00:00:07.320
>> Emilie Kim: Good morning.

00:00:07.320 --> 00:00:08.220
My name is Emilie.

00:00:08.220 --> 00:00:11.280
I'm an engineer on the photos team
and I'd like to welcome you here

00:00:11.280 --> 00:00:15.000
to Incorporating the Camera and Photo Library in Your App.

00:00:15.000 --> 00:00:19.840
So, I'd like to start off by first saying
thank you to you guys for creating more

00:00:19.840 --> 00:00:26.100
than 3,500 photography-related
applications in the app store already, so.

00:00:26.100 --> 00:00:29.690
[ Applause ]

00:00:29.690 --> 00:00:35.900
So, with already 3,500 photography apps in
the app store, you might be asking yourself,

00:00:35.900 --> 00:00:41.770
"How can I make my application stand out
amongst the sea of other applications?"

00:00:41.770 --> 00:00:45.800
So, it's a good thing you're here today because
that's exactly what we're going to be talking about.

00:00:45.800 --> 00:00:51.210
We're going to be talking about how you can really make
your application shine among the rest of the applications.

00:00:51.210 --> 00:00:55.880
So first, we're going to be talking about how you
can customize the camera experience in your app

00:00:55.880 --> 00:01:01.070
to really make it feel like it's a part of your
application and the user is never left at all.

00:01:01.070 --> 00:01:05.950
After that, we'll be talking about a new framework
that we've added for iOS 4 and this allows you

00:01:05.950 --> 00:01:08.660
to do things like build your own image picker.

00:01:08.660 --> 00:01:13.240
After that, we'll be talking about how to go even beyond
an image picker and to really interact with photos

00:01:13.240 --> 00:01:16.260
and videos in new ways in your application.

00:01:16.260 --> 00:01:19.430
So first, let's talk about the camera.

00:01:19.430 --> 00:01:23.850
As most of you already know, if you want to
add camera functionality to your application,

00:01:23.850 --> 00:01:27.850
what you want to do is use the
UIImagePickerController using the camera source.

00:01:27.850 --> 00:01:29.450
That's pretty straightforward.

00:01:29.450 --> 00:01:35.780
What we've done in iOS 4 is we've added new APIs to
allow you to even further customize the camera experience

00:01:35.780 --> 00:01:39.410
by allowing you to programmatically
control even more features of the camera

00:01:39.410 --> 00:01:42.810
as well as even create your own camera controls.

00:01:42.810 --> 00:01:47.490
So, a lot of you might be asking yourself well, what
about the iPhone 4 that was announced on Monday?

00:01:47.490 --> 00:01:49.270
How can I interact with that?

00:01:49.270 --> 00:01:51.990
So first, let's talk about Flash mode.

00:01:51.990 --> 00:01:56.920
We've added a new property to UIImagePickerController
called CameraFlashMode and what this allows you

00:01:56.920 --> 00:02:01.500
to do is obviously interact with
the flash on the back of the camera.

00:02:01.500 --> 00:02:06.240
You can turn the flash on which will fire the flash
when you take a photo as well as turn it into torch

00:02:06.240 --> 00:02:11.840
when you take video and you can also turn the
flash off which is pretty straightforward.

00:02:11.840 --> 00:02:15.750
You can also have the flash fire
automatically but why stop here?

00:02:15.750 --> 00:02:18.310
You can be really creative with this flash in your app.

00:02:18.310 --> 00:02:20.850
You could be the first app in the
store that creates a strobe light

00:02:20.850 --> 00:02:23.430
or maybe a paparazzi effect in your application.

00:02:23.430 --> 00:02:25.920
You can go crazy with the flash.

00:02:25.920 --> 00:02:30.400
So, now that we've talked about flash, what's the other
great new feature that was announced in the iPhone 4?

00:02:30.400 --> 00:02:32.620
Well, that was the front-facing camera.

00:02:32.620 --> 00:02:36.250
So, we've also exposed camera device
in the UIImagePickerController.

00:02:36.250 --> 00:02:41.760
So now, you can not only take pictures and shoot video
with the back camera, but you can also take pictures

00:02:41.760 --> 00:02:44.810
and video with the front camera
and you now have control over this.

00:02:44.810 --> 00:02:48.200
So, maybe you don't like the way that the
flipper switch looks on the camera UI.

00:02:48.200 --> 00:02:51.650
You can create your own switch
and tie it to the camera device.

00:02:51.650 --> 00:02:55.190
Now, let's talk about Capture mode.

00:02:55.190 --> 00:03:00.700
Video is not new in iOS 4 but what we've now
allowed you to do is programmatically switch

00:03:00.700 --> 00:03:04.140
between taking a photo and taking a video.

00:03:04.140 --> 00:03:07.610
Before, you had to rely on the user to
switch these themselves in the UI but now,

00:03:07.610 --> 00:03:15.040
you can create your own control or programmatically
tie it to something like shaking the camera.

00:03:15.040 --> 00:03:18.640
So now, let's talk about video quality a little bit.

00:03:18.640 --> 00:03:22.290
Before iOS 4, there were three types of video quality.

00:03:22.290 --> 00:03:26.690
You had low, medium, and high, pretty straightforward.

00:03:26.690 --> 00:03:32.210
We've added a new quality type which is 640x480
and let me explain the reason we added this.

00:03:32.210 --> 00:03:35.150
Relative qualities are actually device dependent.

00:03:35.150 --> 00:03:37.880
So, let's take for example quality type high.

00:03:37.880 --> 00:03:41.890
On an iPhone 3GS, this would record video at 640x480 VGA.

00:03:41.890 --> 00:03:47.550
However, on an iPhone 4, the same quality
type would actually record a video in 720p HD

00:03:47.550 --> 00:03:51.330
because as we know, iPhone 4 can record video in HD.

00:03:51.330 --> 00:03:55.750
So on top of this, relative qualities
are also camera dependent.

00:03:55.750 --> 00:04:03.890
So, on top of the iPhone 3GS and the iPhone 4, the
iPhone 4's front camera will actually record video

00:04:03.890 --> 00:04:07.890
at 640x480 VGA with the same quality type high.

00:04:07.890 --> 00:04:13.100
So, what this really boils down to is you should use the
quality type that's appropriate for your application.

00:04:13.100 --> 00:04:18.580
Keep in mind that low quality type is appropriate for
cellular transmission, the medium quality type is good

00:04:18.580 --> 00:04:25.210
for Wi-Fi, and 640x480 and high are both pretty big
videos and so, that's really only appropriate for syncing

00:04:25.210 --> 00:04:27.850
that from the user's device to their computer.

00:04:27.850 --> 00:04:32.170
So, that's really what you have to keep
in mind when you're using quality types.

00:04:32.170 --> 00:04:35.540
So now, let's talk about programmatic capture.

00:04:35.540 --> 00:04:40.920
We had previously exposed to take picture which allowed
you to take a photo programmatically from the camera.

00:04:40.920 --> 00:04:46.510
We're now allowing you to start video
recording programmatically and so,

00:04:46.510 --> 00:04:51.630
what this allows you to do is maybe you don't want to
record to actually start when the user pushes the button

00:04:51.630 --> 00:04:56.300
but maybe you want to do some kind of custom
animation before the recording actually starts.

00:04:56.300 --> 00:04:59.430
Maybe this is part of your movie taking app or something.

00:04:59.430 --> 00:05:04.510
You can now do this because we're allowing you to
record video and stop recording programmatically.

00:05:04.510 --> 00:05:09.800
So last, let's talk about the custom overlay view.

00:05:09.800 --> 00:05:16.380
The custom overlay view is new in 3.1 but we're talking
about it now because what this allows you to do is

00:05:16.380 --> 00:05:20.850
to take your own view hierarchy on top
of the existing camera preview view.

00:05:20.850 --> 00:05:23.440
So, this allows you to do something
like build your own camera controls.

00:05:23.440 --> 00:05:27.510
If you're upset with the UI that we have in the
camera, you can create your own controls hopefully,

00:05:27.510 --> 00:05:31.230
not as ugly as these and stick them on the preview view.

00:05:31.230 --> 00:05:34.390
You can also really create an immersive camera experience

00:05:34.390 --> 00:05:39.050
like maybe using augmented reality
to show in your camera preview view.

00:05:39.050 --> 00:05:43.540
So with that, talk is kind of cheap.

00:05:43.540 --> 00:05:48.760
So, I'm going to invite Hernan, another photos engineer, up
on stage to show you a demo of the new feature we've added

00:05:48.760 --> 00:05:51.120
to the UIImagePickerController for the camera.

00:05:51.120 --> 00:05:54.840
Hernan is going to show you how you can
programmatically control video capture

00:05:54.840 --> 00:06:00.340
and how you can also create a custom overlay view to
really make the camera feel like part of your application

00:06:00.340 --> 00:06:04.840
and also how to expose custom video
quality settings in your app.

00:06:04.840 --> 00:06:06.110
>> Hernan Eguiluz: Thank you very much, Emilie.

00:06:06.110 --> 00:06:08.540
[ Applause ]

00:06:08.540 --> 00:06:12.030
Good morning everybody, my name is Hernan
and I will be doing all the demos today.

00:06:12.030 --> 00:06:16.240
The first one is, as Emilie said, simple
application that would show you how

00:06:16.240 --> 00:06:18.840
to create your custom UI and control video capture.

00:06:18.840 --> 00:06:26.860
So as you can see, this is an overlay view with a button
switch cameras to enable and disable flash and to switch

00:06:26.860 --> 00:06:34.490
between recording and some definition for-- for
the app, this is 640x480 or high definition 720p.

00:06:34.490 --> 00:06:38.840
The overall UI requires is a double
tap and it starts recording

00:06:38.840 --> 00:06:44.750
and then when the user is done
recording, you can double tap again.

00:06:44.750 --> 00:06:53.110
What we do is we save the video to the camera
roll and I can show you this in a second.

00:06:53.110 --> 00:06:58.890
See we have the video that has been recorded.

00:06:58.890 --> 00:07:05.450
So, let me show you now in the Mac
with code how easy this is to do.

00:07:06.910 --> 00:07:12.550
By the way, with all the demos that we have,
have a lot of scaffolding code for the UI.

00:07:12.550 --> 00:07:18.810
Given the time that we have, what I'm going to do is
concentrate only on the code that pertains to the talk.

00:07:18.810 --> 00:07:25.110
You can download all the sample code by the end of the week
and you can see all the other parts if you're interested.

00:07:25.110 --> 00:07:28.690
So, the first thing that we need
to do is set up the image picker.

00:07:28.690 --> 00:07:35.230
We need to set the capture mode
to video and you have to remember

00:07:35.230 --> 00:07:39.180
to explicitly set the media types in this case, to movie.

00:07:39.180 --> 00:07:46.030
Because by default, the media types are
set up for camera shooting and still shots.

00:07:46.030 --> 00:07:54.050
We set default values for the camera device,
rear, flash off and what I call center definition

00:07:54.050 --> 00:08:03.560
and all these properties are basically set every time
that the user taps on the controls on the screen.

00:08:03.560 --> 00:08:10.880
When the user selects to start recording, we just
tell the image picker to start video capture.

00:08:10.880 --> 00:08:15.540
When it double taps, the user double
taps again, we stop video capture.

00:08:15.540 --> 00:08:23.990
We have to delegate to the ImagePickerController so we
get a delegate callback, didFinishPickingMediaWithInfo.

00:08:23.990 --> 00:08:28.610
We take the path of the video that was
recorded by the camera and we just save it

00:08:28.610 --> 00:08:32.860
into the camera roll on the saved photos album.

00:08:32.860 --> 00:08:46.180
And that's all that you need to create your own custom UI
and your custom camera experience, Emilie, back to you.

00:08:46.180 --> 00:08:46.240
[ Applause ]

00:08:46.240 --> 00:08:47.500
>> Emilie Kim: Thanks Hernan.

00:08:47.500 --> 00:08:54.810
So what Hernan showed you in his demo is really how fully
customizable you can make the camera in your application.

00:08:54.810 --> 00:09:00.790
You can make the controls look however you want and because
of the new APIs that we've added to UIImagePickerController,

00:09:00.790 --> 00:09:05.240
you can really control pretty much
every aspects of the camera now.

00:09:05.240 --> 00:09:06.950
It's also really easy to use.

00:09:06.950 --> 00:09:12.360
It's pretty much just a matter of setting certain properties
and now, you have a fully functioning camera in your app

00:09:12.360 --> 00:09:15.350
which leaves you more time to actually
develop your application

00:09:15.350 --> 00:09:18.740
and less time trying to figure out how to use the camera.

00:09:18.740 --> 00:09:23.610
Now, if you really want even more control for you
power junkies out there, I encourage you to check

00:09:23.610 --> 00:09:29.680
out the AVFoundation framework which is also new in iOS 4
and there's a session using the camera with AVFoundation

00:09:29.680 --> 00:09:32.050
which I encourage you check out
on video after the conference.

00:09:32.050 --> 00:09:38.050
So now, we've talked about how you can really
customize the camera experience in your app.

00:09:38.050 --> 00:09:41.160
But what happens after you've taken that picture?

00:09:41.160 --> 00:09:44.430
What if you want access to the user's photo library?

00:09:44.430 --> 00:09:47.610
Traditionally, this has been done
with UIImagePickerController.

00:09:47.610 --> 00:09:52.020
You bring up the UIImagePicker and
you allow the user to choose a photo.

00:09:52.020 --> 00:09:56.420
Now, this is really great for basic
photo picking but as evidenced by all

00:09:56.420 --> 00:09:59.920
of your feature requests, this isn't enough for you guys.

00:09:59.920 --> 00:10:05.510
Among your feature requests, you guys really want
more control over the behavior of the image picker.

00:10:05.510 --> 00:10:10.220
You also have more control over the look and
feel as well as access to full-sized images,

00:10:10.220 --> 00:10:15.350
not the little dinky images we give back,
as well as access to the image metadata.

00:10:15.350 --> 00:10:21.840
Now for those of you eagle-eyed viewers in the audience,
when you saw the iMovie demo on Monday in the keynote,

00:10:21.840 --> 00:10:27.630
you might have noticed that they were actually picking
photos and videos out of the photo library on the device.

00:10:27.630 --> 00:10:33.670
So, but you might be saying to yourself, I never actually
saw the white table of the UIImagePicker come up or anything

00:10:33.670 --> 00:10:36.260
and that's because they weren't
using UIImagePickerController.

00:10:36.260 --> 00:10:43.340
iMovie has actually built their own image picker using
a new framework that we've added to iOS 4 and so now,

00:10:43.340 --> 00:10:47.670
we're going to talk about how you
too can build your own image picker.

00:10:47.670 --> 00:10:52.400
So, we're now going to talk about the new
framework which is the Assets Library Framework.

00:10:52.400 --> 00:10:57.760
This is a new framework like I said that we added in
iOS 4 and this gives you access to photo library images

00:10:57.760 --> 00:11:01.220
and videos just like an image picker
but what else does it give you.

00:11:01.220 --> 00:11:07.560
You also have access to the original photo and video data as
well as the metadata but before we get too much into that,

00:11:07.560 --> 00:11:12.740
I promise we'll talk about that but let's
take a step back and talk about the basics.

00:11:12.740 --> 00:11:16.600
When you're thinking about how to structure a
Photo Library Framework, you're probably thinking

00:11:16.600 --> 00:11:19.560
of something that's very similar to the existing photo app.

00:11:19.560 --> 00:11:23.270
So, you have a library and a library contains album.

00:11:23.270 --> 00:11:27.880
Within each album, you have photos
and then within each photo,

00:11:27.880 --> 00:11:32.380
you have certain data that you can
get such as the full-size image.

00:11:32.380 --> 00:11:34.860
So, let's talk about the classes.

00:11:34.860 --> 00:11:41.180
We have five new classes in the Assets Library
Framework; ALAssetsLibrary, ALAssetsGroup,

00:11:41.180 --> 00:11:44.860
ALAssetsFilter, ALAsset, and ALAssetRepresentation.

00:11:44.860 --> 00:11:46.760
That's very hard to say.

00:11:46.760 --> 00:11:50.300
So, we're going to talk about each more,
each one of these classes in more detail.

00:11:50.300 --> 00:11:52.740
Let's first talk about ALAssetsLibrary.

00:11:52.740 --> 00:11:57.070
This is the root photo library object
that contains the user's photos

00:11:57.070 --> 00:12:00.450
but before you can actually enumerate
through the user's photo albums.

00:12:00.450 --> 00:12:04.920
The user first has to grant your application
permission and the reason for this is

00:12:04.920 --> 00:12:09.340
because photos can contain potentially
sensitive information such as the date

00:12:09.340 --> 00:12:13.200
and time that they were taken or
the location where they were taken.

00:12:13.200 --> 00:12:18.260
So, the first time your application tries to enumerate
through the user's photo library, a dialogue is presented

00:12:18.260 --> 00:12:23.370
on behalf of the application to ask the
user if it's OK to access this data.

00:12:23.370 --> 00:12:27.280
I'd like to point out that this does
not affect the UIImagePickerController

00:12:27.280 --> 00:12:33.190
because the UIImagePickerController has not and
continues to not bend potentially sensitive information.

00:12:33.190 --> 00:12:39.550
After the user has granted your application access, they
can also revoke it or re-enable it in the settings app.

00:12:39.550 --> 00:12:42.670
So, the user grants your application permission.

00:12:42.670 --> 00:12:46.700
Now, you have access to the user's photo library.

00:12:46.700 --> 00:12:49.720
So, once you have, you can enumerate through the photo album

00:12:49.720 --> 00:12:53.470
and once you have a photo album, you
have what's called an ALAssetsGroup.

00:12:53.470 --> 00:12:56.220
This is analogous to a photo album object.

00:12:56.220 --> 00:12:59.380
There are five different kinds of groups that you can get.

00:12:59.380 --> 00:13:01.350
First is the saved photos album.

00:13:01.350 --> 00:13:06.250
This is like the camera roll on an iPhone
or the saved photos album on an iPod Touch.

00:13:06.250 --> 00:13:11.120
You also have access to the photo library which is a
synthesized album that contains all of the synced photos

00:13:11.120 --> 00:13:14.680
and videos that came from iPhoto through iTunes.

00:13:14.680 --> 00:13:20.970
You also have access to the albums that come from iPhoto
as well as new events and faces that also come from iPhoto.

00:13:20.970 --> 00:13:26.980
So now that you have group types, maybe you want to
filter the kinds of assets that are in your group.

00:13:26.980 --> 00:13:29.930
Maybe you want just photos or just the videos.

00:13:29.930 --> 00:13:34.050
You can do that by setting a filter
on the group using an ALAssetsFilter

00:13:34.050 --> 00:13:37.280
which Hernan will talk about more in the demo.

00:13:37.280 --> 00:13:41.880
There's also group property that you can get on a
group which are appropriate for displaying in the UI.

00:13:41.880 --> 00:13:45.110
So, if you're going to create your own image
picker, you want the name of the album.

00:13:45.110 --> 00:13:49.440
So, we've exposed the name as well as the
count which is actually dependent on the filter

00:13:49.440 --> 00:13:52.050
that you've set as well as the album thumbnail.

00:13:52.050 --> 00:13:55.570
Again, appropriate for displaying in your own image picker.

00:13:55.570 --> 00:13:58.610
So now, how do you actually get
the assets that are in a group?

00:13:58.610 --> 00:14:04.690
We've exposed some blocks-based enumeration API which is
actually very similar to the ones that are now in NSArray.

00:14:04.690 --> 00:14:11.580
So, if you're already familiar with the NSArray enumeration
APIs then you already know how to get the assets in a group.

00:14:11.580 --> 00:14:17.950
You can enumerate chronologically or by setting the
right enumeration options, you can actually go in reverse

00:14:17.950 --> 00:14:22.750
and display maybe the most recent photos first or maybe
you really want to optimize scrolling performance.

00:14:22.750 --> 00:14:25.680
You can enumerate certain ranges
and assets at a time by just--

00:14:25.680 --> 00:14:28.620
by setting the index set that you
want and then you can only--

00:14:28.620 --> 00:14:33.800
you only have to load certain assets at a time
as the user is scrolling through your app.

00:14:33.800 --> 00:14:36.020
So now, let's talk about an asset.

00:14:36.020 --> 00:14:37.380
An asset isn't what you think.

00:14:37.380 --> 00:14:39.560
It's not just a photo or just a video.

00:14:39.560 --> 00:14:43.000
An asset actually contains multiple representations.

00:14:43.000 --> 00:14:44.650
Now, let's talk a little bit more about this.

00:14:44.650 --> 00:14:48.580
Let's say you had a camera that shoots both RAW and JPG.

00:14:48.580 --> 00:14:52.660
So, it's really the same picture
just in two different formats.

00:14:52.660 --> 00:14:57.320
So, another example of this is actually AVI + THM.

00:14:57.320 --> 00:15:00.420
Let's say you have an AVI movie
and then you have the THM file

00:15:00.420 --> 00:15:02.780
which is the thumbnail that's associated with that movie.

00:15:02.780 --> 00:15:06.510
These are two different representations
but they are really about the same video

00:15:06.510 --> 00:15:08.300
or the same photo in the case of RAW + JPG.

00:15:08.300 --> 00:15:12.940
So, an asset is really just a container
for these multiple representations.

00:15:12.940 --> 00:15:16.990
We give you access to the default representation
which is what we think you really want access to.

00:15:16.990 --> 00:15:23.470
So, in the case of RAW + JPG, this is the JPG and in
the case AVI + THM, this would be the AVI movie file.

00:15:23.470 --> 00:15:25.180
But you probably know better than we do.

00:15:25.180 --> 00:15:30.350
So if your application really actually wants
to access the RAW file or the THM file,

00:15:30.350 --> 00:15:32.540
you can also have access to all the representations.

00:15:32.540 --> 00:15:39.440
Assets also have properties which are generic to all of
the representations that are contained within the asset.

00:15:39.440 --> 00:15:43.140
This includes the thumbnail as well as
the date and the location which we'll talk

00:15:43.140 --> 00:15:45.400
about more in the third part of the session.

00:15:45.400 --> 00:15:53.860
So, if you want even more information, we have an
ALAssetRepresentation which is the representation object.

00:15:53.860 --> 00:15:58.250
You can ask for a persistent URL for this
asset representation and this is really key,

00:15:58.250 --> 00:16:05.310
because what this allows you to do is restore state in your
application as well as retrieve previously accessed assets.

00:16:05.310 --> 00:16:10.100
So, if your user has decided that they like these
three assets and you want to store those away,

00:16:10.100 --> 00:16:13.780
all you have to do is store the URL and
the next time the user launches your app,

00:16:13.780 --> 00:16:17.250
you can just bring back the assets for them.

00:16:19.240 --> 00:16:23.710
You can also get at the full screen
image for an asset representation

00:16:23.710 --> 00:16:27.810
and this is a CGImage that's appropriate
for displaying an image full screen.

00:16:27.810 --> 00:16:32.630
I'd like to point out that this does not mean that
the image is exactly the size of the device screen.

00:16:32.630 --> 00:16:36.840
It's actually a little bit bigger so you
can allow the user to zoom in a little bit.

00:16:36.840 --> 00:16:41.870
This also means that the dimensions of the image
are not or are actually hardware dependent.

00:16:41.870 --> 00:16:46.780
So, we've talked about the five classes in ALAsset Library.

00:16:46.780 --> 00:16:48.770
So now, I'd like to invite Hernan up on stage again

00:16:48.770 --> 00:16:53.210
to show you how you can use these five
classes to create your own image picker.

00:16:53.210 --> 00:16:57.940
What you're going to see is how you can create your own
image picker by enumerating through the different groups

00:16:57.940 --> 00:17:01.120
and assets as well as filtering the group's contents.

00:17:01.120 --> 00:17:04.660
You can also display full screen images
just like you can in the image picker

00:17:04.660 --> 00:17:08.330
and Hernan will also show you how you
can handle error conditions, Hernan.

00:17:08.330 --> 00:17:09.160
[ Applause ]

00:17:09.160 --> 00:17:10.280
>> Hernan Eguiluz: Thank you Emilie.

00:17:10.280 --> 00:17:14.850
[ Applause ]

00:17:14.850 --> 00:17:25.080
So as Emilie said, what we did is using the ALAsset
Library created a simple replacement for the image picker.

00:17:25.080 --> 00:17:31.700
So at the top level, we have a list of all the
albums, events, faces, if we had any data for that.

00:17:31.700 --> 00:17:36.560
That is basically an enumeration of
all the groups in the AssetsLibrary.

00:17:36.560 --> 00:17:41.830
What you would expect is when you
select one of the groups or the albums,

00:17:41.830 --> 00:17:49.430
what we do is we retrieve all the assets associated with
them, we get their thumbnails and display them in a grid.

00:17:49.430 --> 00:17:54.830
Tapping one and we go into the full
screen image not the full-size image.

00:17:54.830 --> 00:17:58.060
We, as you can see, you can zoom in but not too much.

00:17:58.060 --> 00:18:05.770
It's optimized for displaying basically on the device
and that's basically, that's a simple UIImagePicker.

00:18:05.770 --> 00:18:08.290
Let me show you in code how you can do this.

00:18:08.290 --> 00:18:13.780
Let's switch over to the Mac.

00:18:13.780 --> 00:18:18.720
The first thing that we need to do
is create an ALAsset Library object.

00:18:18.720 --> 00:18:24.490
Once we have that, we can start the enumeration.

00:18:25.720 --> 00:18:31.200
We basically select what group types we want,
in this case, all the albums, events and faces.

00:18:31.200 --> 00:18:33.300
You could also say saved camera albums.

00:18:33.300 --> 00:18:35.040
What do you want in the library?

00:18:35.040 --> 00:18:38.010
These ones were correct for this demo.

00:18:38.010 --> 00:18:44.800
So we call-- EnumerateGroupsWithTypes in the
AssetsLibrary as in the groups and two blocks.

00:18:44.800 --> 00:18:48.980
One of the blocks is the one that is going to
be receiving results from the AssetsLibrary

00:18:48.980 --> 00:18:54.150
and the other one is used for handling failures or errors.

00:18:54.150 --> 00:18:58.190
So, let me show you what they look like.

00:19:01.260 --> 00:19:03.330
The enumeration one is very simple.

00:19:03.330 --> 00:19:08.470
For each one of the ALAsset group that we get
which is for the mean and array and update the UI.

00:19:08.470 --> 00:19:14.760
What I want to point out here is that we have
to check whether this is really a valid object

00:19:14.760 --> 00:19:20.330
because the termination condition is
that the group pass in here is nil

00:19:20.330 --> 00:19:25.310
and then you can detect that the enumeration is finished.

00:19:25.310 --> 00:19:39.180
For the failure block, the important thing to know here is
that we, in cases where you can not contact the framework

00:19:39.180 --> 00:19:45.920
or particularly when the user has denied access either
to your application or all the applications to our data.

00:19:45.920 --> 00:19:49.950
You will get called back in through
the failure block with an error.

00:19:49.950 --> 00:19:54.440
We already provide you with a localized description
and a recovery suggestion that you can use in the UI

00:19:54.440 --> 00:20:02.930
so that you can tell the user what to do if they want to see
content and in this case, well we just put up a special UI

00:20:02.930 --> 00:20:08.170
that tells this information to the user and
you should probably handle this differently

00:20:08.170 --> 00:20:10.480
than the other cases and you want to communicate.

00:20:10.480 --> 00:20:12.400
You don't, you shouldn't be dropping this on the floor.

00:20:12.400 --> 00:20:18.130
You'd really want to communicate
this information to the user.

00:20:18.130 --> 00:20:25.940
The last thing that we need to do at the group level
is get information that we display in the cell.

00:20:25.940 --> 00:20:32.970
We ask the group for its name and then for
its poster image which is a CGImage so we need

00:20:32.970 --> 00:20:37.780
to create a UIImage out of it and put it in the UI.

00:20:37.780 --> 00:20:44.780
For assets, once the user has selected one of
the groups, the first thing that we want to do

00:20:44.780 --> 00:20:48.340
for this demo is create a filter
that would only show photos.

00:20:48.340 --> 00:20:56.680
So we ask the ALAssetsFilter class for the all photo
filter and just set it in the group that we got

00:20:56.680 --> 00:21:07.890
from the root view controller then we call
enumerate assets using block on the group

00:21:07.890 --> 00:21:15.120
and the enumeration here works pretty
much like in the case of groups.

00:21:15.120 --> 00:21:21.710
It's a little bit more involved because you get a result but
again, it will be nil when we have finished the enumeration,

00:21:21.710 --> 00:21:28.210
but it also can pass you back an index of
which asset for the group that you are getting

00:21:28.210 --> 00:21:32.280
because we have special enumeration
APIs where you can pass ranges.

00:21:32.280 --> 00:21:36.880
As Emilie said, maybe you want to do that to
optimize the performance of your application.

00:21:36.880 --> 00:21:50.380
In order to display the thumbnail on screen which has
asked the assets for this thumbnail, again it's a CGImage.

00:21:50.380 --> 00:21:54.330
We convert into a UIImage and we put it in the UIImageView.

00:21:55.490 --> 00:22:07.760
Finally, when displaying the full screen image, keep in
mind that you need to do this from an asset representation.

00:22:07.760 --> 00:22:14.120
For the demo I'm just using the default one but
you can access any of them using the UTI types.

00:22:14.120 --> 00:22:19.540
We get the full screen image from the representation
scale and an orientation because we need

00:22:19.540 --> 00:22:25.210
to preserve the orientation that will go from the camera and
then we have this convenience method in UIImage which is new

00:22:25.210 --> 00:22:30.040
to iOS 4.0, image with CGImage scale and orientation.

00:22:30.040 --> 00:22:33.460
Then you set that in the UI and you're
basically done and this is all the code

00:22:33.460 --> 00:22:36.370
that you need to create your own image picker.

00:22:36.370 --> 00:22:37.000
Back to you Emilie.

00:22:37.000 --> 00:22:38.160
[ Applause ]

00:22:38.160 --> 00:22:44.370
>> Emilie Kim: Thanks Hernan.

00:22:44.370 --> 00:22:49.890
So, what Hernan just showed you is how you can build
your own image picker using really simple and concise API

00:22:49.890 --> 00:22:53.510
that we've provided you in the AssetsLibrary framework.

00:22:53.510 --> 00:22:57.720
Now, some points to remember, you should always
provide the failure block so you can fail gracefully

00:22:57.720 --> 00:23:03.000
in case the user denies access to your
application and that the image data really comes

00:23:03.000 --> 00:23:06.450
from the asset representation not the asset.

00:23:06.450 --> 00:23:09.400
So, now you've built your own image picker.

00:23:09.400 --> 00:23:12.900
That's cool but there's already
an image picker on the system.

00:23:12.900 --> 00:23:15.220
Why would you build something that's exactly the same?

00:23:15.220 --> 00:23:20.100
So now, let's talk about how you can go even beyond
the image picker and really customize the photo

00:23:20.100 --> 00:23:21.760
and video experience in your application.

00:23:21.760 --> 00:23:27.340
The first thing you can do is create an image picker

00:23:27.340 --> 00:23:31.580
but really customize the behavior to
do exactly what you want it to do.

00:23:31.580 --> 00:23:37.170
You can also access full-sized images as well
as integrate with other system technologies.

00:23:37.170 --> 00:23:43.880
Finally, you can create innovative UI based on the
metadata that we provided in the AssetsLibrary framework.

00:23:43.880 --> 00:23:47.090
So first, let's talk about customizing
image picker behavior.

00:23:47.090 --> 00:23:52.300
Many of you have requested the ability to select
multiple images when using the image picker.

00:23:52.300 --> 00:23:57.910
Well, with the AssetsLibrary framework, if you build
your own image picker, you can just do this yourself.

00:23:57.910 --> 00:24:01.630
So, if you want to implement multiple
selection, you can do that.

00:24:01.630 --> 00:24:05.740
Many of you have also requested the ability to
have custom image sources in your application.

00:24:05.740 --> 00:24:10.420
So, if you want to bundle some resources in your app
and then have the user pick from them as well as photos

00:24:10.420 --> 00:24:14.870
in their photo library, there's no way
to do that using UIImagePickerController

00:24:14.870 --> 00:24:19.020
but using the AssetsLibrary framework,
you have full control over the UI.

00:24:19.020 --> 00:24:22.730
If you want your image source to be a
first class citizen along with the rest

00:24:22.730 --> 00:24:26.380
of the user's photo library, you can do that.

00:24:26.380 --> 00:24:29.210
What this really means is you can do whatever you want.

00:24:29.210 --> 00:24:32.620
If you want the photo to spin before
going into full screen, I hope you don't.

00:24:32.620 --> 00:24:36.170
That's kind of weird looking but
if you want it to do that, you can.

00:24:36.170 --> 00:24:39.350
It's your app, your image picker behavior.

00:24:39.350 --> 00:24:42.830
To bring up the iMovie demo again, you never even notice

00:24:42.830 --> 00:24:47.770
that you had left iMovie even though they were really
picking images and videos out of the user's photo library

00:24:47.770 --> 00:24:52.570
and this is because they customize the look and
feel of their image picker so that it really felt

00:24:52.570 --> 00:24:56.240
like it was one continual iMovie experience.

00:24:56.240 --> 00:24:58.060
This is what you can do now in your app also.

00:24:58.060 --> 00:25:02.650
So now, let's talk about full-sized images.

00:25:02.650 --> 00:25:05.700
Many of you want access to the full-sized image.

00:25:05.700 --> 00:25:07.120
So now, we're giving it to you.

00:25:07.120 --> 00:25:10.660
You can get the full resolution image
which is a CGImage that's appropriate

00:25:10.660 --> 00:25:13.490
or that contains the original image content.

00:25:13.490 --> 00:25:17.000
However, you really want to make sure
you only use the full-sized image

00:25:17.000 --> 00:25:19.430
when it's really necessary for your application.

00:25:19.430 --> 00:25:21.380
These images can be really big.

00:25:21.380 --> 00:25:26.490
So, you don't want to load them just to display
full screen when a full-screen image would do.

00:25:26.490 --> 00:25:31.230
This also depends on our ability to decode
the kind of media that you've chosen.

00:25:31.230 --> 00:25:36.080
If the hardware can not decode the certain
RAW type that you're trying to choose,

00:25:36.080 --> 00:25:38.900
then you're not going to get a CGImage back.

00:25:38.900 --> 00:25:44.150
But don't worry, we also give you
access to the raw bytes of the data.

00:25:44.150 --> 00:25:48.140
You can now read in large images
and videos using raw byte as well

00:25:48.140 --> 00:25:50.990
as image formats that we can't decode into a CGImage.

00:25:50.990 --> 00:25:54.710
You don't have to worry about handling
file descriptors or anything like that.

00:25:54.710 --> 00:25:58.570
You just pass in a buffer and a range
and then we give you bytes back.

00:25:58.570 --> 00:26:00.210
It's pretty straightforward.

00:26:00.210 --> 00:26:03.390
So now, let's talk about framework integration.

00:26:03.390 --> 00:26:09.850
Because the AssetsLibrary framework is new in iOS 4,
you can now integrate with many other system frameworks.

00:26:09.850 --> 00:26:11.640
So, let's take ImageIO for example.

00:26:11.640 --> 00:26:15.160
This is another framework that's
new in iOS 4 and what this--

00:26:15.160 --> 00:26:19.360
you can use ImageIO to create custom
thumbnails, for example.

00:26:19.360 --> 00:26:23.500
Maybe you don't like the square thumbnails that
come back from the AssetsLibrary framework.

00:26:23.500 --> 00:26:28.620
You can now create maybe aspect thumbnails if you want
or maybe you want the thumbnails to be even bigger.

00:26:28.620 --> 00:26:29.990
You can do that too using ImageIO.

00:26:29.990 --> 00:26:36.020
I encourage you to read the developer
documentation for more information about ImageIO.

00:26:36.020 --> 00:26:38.420
Another framework that's new in iOS 4 is AVFoundation.

00:26:38.420 --> 00:26:46.850
You can use the persistent URL from an asset representation
like I mentioned earlier to create an AVURLAsset

00:26:46.850 --> 00:26:50.570
and using this AVURLAsset, you can
work with the AVFoundation framework

00:26:50.570 --> 00:26:52.930
to really do anything you want to videos.

00:26:52.930 --> 00:26:58.020
You can play, compose, edit, whatever
your application wants to do and so,

00:26:58.020 --> 00:27:02.510
I encourage you to attend the Discovering
AVFoundation session which is later today.

00:27:02.510 --> 00:27:05.610
So now, let's talk about metadata.

00:27:05.610 --> 00:27:08.690
All of you have wanted metadata return with the images.

00:27:08.690 --> 00:27:10.430
So now, you can do this.

00:27:10.430 --> 00:27:13.690
Maybe you want a badge some thumbnails
that are in your image picker.

00:27:13.690 --> 00:27:17.560
We expose duration for videos so you can badge duration.

00:27:17.560 --> 00:27:21.200
We've also exposed the kinds of formats
that the representations are in.

00:27:21.200 --> 00:27:26.030
So, if you want to badge the thumbnails
that way, you can do that as well.

00:27:26.030 --> 00:27:29.190
You can also, maybe you want to filter on photo orientation.

00:27:29.190 --> 00:27:31.470
Maybe you just want to display the landscape photos.

00:27:31.470 --> 00:27:33.340
You can do that using the orientation metadata.

00:27:33.340 --> 00:27:38.960
You can also create a timeline with the
date and time metadata that we return you.

00:27:38.960 --> 00:27:44.020
This is something that you couldn't do with the
image picker before and now, you can do this.

00:27:44.020 --> 00:27:47.860
You can also display images geographically much
like the new places feature that we've added

00:27:47.860 --> 00:27:52.360
to the photos application using the GPS
location information that we return in photos.

00:27:52.360 --> 00:27:57.610
Finally, you actually have full access
to the EXIF metadata in the image.

00:27:57.610 --> 00:28:00.780
So, maybe you want to filter your
images based on exposure, I don't know.

00:28:00.780 --> 00:28:02.930
You can do whatever you want to do.

00:28:02.930 --> 00:28:06.740
So with that in mind, I'd like to invite
Hernan back up on stage for one more demo

00:28:06.740 --> 00:28:11.710
to show you just exactly how powerful the
AssetLibrary framework is in enabling you

00:28:11.710 --> 00:28:14.700
to build whatever applications you want to build.

00:28:14.700 --> 00:28:18.510
First, he's going to show you how you can
store and retrieve assets using an asset URL

00:28:18.510 --> 00:28:22.430
as well as how to create a custom image source.

00:28:22.430 --> 00:28:25.140
After that, he'll show you how
you can read original image data

00:28:25.140 --> 00:28:29.050
and explore the metadata that's associated with an asset.

00:28:29.050 --> 00:28:30.570
So, Hernan.

00:28:30.570 --> 00:28:33.090
>> Hernan Eguiluz: Thank you Emilie.

00:28:33.090 --> 00:28:35.730
[ Applause ]

00:28:35.730 --> 00:28:41.380
So for this third demo we were thinking of how can we
make-- how can we give the user a different user experience

00:28:41.380 --> 00:28:45.270
and how can we have something different than
what the image picker gives you all the time.

00:28:45.270 --> 00:28:47.180
How can we be different?

00:28:47.180 --> 00:28:55.180
And we centered our demo on using metadata in different
ways and also in a couple of things for the user experience.

00:28:55.180 --> 00:28:58.510
The first one is when you list the albums
you don't have to have small thumbnails.

00:28:58.510 --> 00:28:59.530
You can have big ones.

00:28:59.530 --> 00:29:02.370
So, the user-- it's easier for the user to select them.

00:29:02.370 --> 00:29:08.120
In the normal ImagePickerController,
when album and thumbnails is selected,

00:29:08.120 --> 00:29:11.930
when an album is selected, you go into a grid of photos.

00:29:11.930 --> 00:29:12.890
So, why do that?

00:29:12.890 --> 00:29:22.180
Why not just go into a map where we show you
each one of the assets where it was taken.

00:29:22.180 --> 00:29:24.730
But, you know, this is something
similar to one of the photos up there.

00:29:24.730 --> 00:29:27.470
So, I think that we can do better than that.

00:29:27.470 --> 00:29:31.070
How about we'll show the user the path of how the photos

00:29:31.070 --> 00:29:35.800
and when the photos were taken given
that we know when the photo was taken.

00:29:35.800 --> 00:29:45.200
So, we added this Play button basically using MapKit overlay API which is new in iOS 4.0,

00:29:45.200 --> 00:29:51.360
shows you how I took the photos in this case
around the main campus an infinite look.

00:29:51.360 --> 00:29:55.920
Another case, these I went for a hike.

00:29:55.920 --> 00:30:06.550
You know, where did I hike, how did I move around, I got
lost, came back, got lost again and then found my car.

00:30:06.550 --> 00:30:08.750
[ Laughter ]

00:30:08.750 --> 00:30:15.550
When you select one of the images,
basically, we have a standard MapKit call out.

00:30:15.550 --> 00:30:23.300
We leverage in the thumbnail that we already have for the
asset and we can show you in this case the full-sized image.

00:30:23.300 --> 00:30:28.370
See, we can really, really zoom in and out on this image.

00:30:28.370 --> 00:30:34.800
Another thing that we can do that the photos application
doesn't give you is show you all the metadata associated

00:30:34.800 --> 00:30:36.850
with the file.

00:30:36.850 --> 00:30:43.540
For example, in this case, the GPS, pixel
height, pixel width, Y density, et cetera.

00:30:43.540 --> 00:30:47.630
And this is basically I'm going to
show you in the code in a minute.

00:30:47.630 --> 00:30:51.460
This is just a dictionary that we get from ImageIO
that we passed back to you and you have to interpret,

00:30:51.460 --> 00:30:58.170
so we don't do any interpretation and what information is
here is dependent with the camera that took that photo.

00:30:58.170 --> 00:31:04.020
But I mentioned before that it will be cool to all support
other kinds of user interactions to the application.

00:31:04.020 --> 00:31:11.710
So we thought well, leveraging the idea of the persistent
URLs, we could create our own groups or our own albums.

00:31:11.710 --> 00:31:15.020
So, we came up with the idea of favorites album.

00:31:15.020 --> 00:31:24.690
So, as you can see at the bottom, left corner of this star
which let us tap it and mark this photo as a favorite.

00:31:24.690 --> 00:31:32.470
So, when we go back, now we have in the list of albums
a list of favorite albums-- favorite photos, sorry.

00:31:32.470 --> 00:31:39.620
Like when you select, we basically retrieve all the
assets from the AssetsLibrary using the persistent URL.

00:31:39.620 --> 00:31:48.200
So, with that, let me show you the highlights of this demo
in code so, let's switch back to the Mac please and again,

00:31:48.200 --> 00:31:52.670
I'm not going to go over the enumeration of
groups and things like that I already covered.

00:31:52.670 --> 00:31:57.870
Basically, when we get-- when we
enumerate assets, we get the location.

00:31:57.870 --> 00:32:02.670
We need to check that the location is valid
because there are photos in your photo library

00:32:02.670 --> 00:32:08.420
that may not have location information and then
only those that are valid will be added to the map

00:32:08.420 --> 00:32:11.540
as a map annotation, standard annotation.

00:32:15.800 --> 00:32:26.030
When the user taps in a color view, and we display the
full-sized image, what we want to do is in this case,

00:32:26.030 --> 00:32:29.920
use the get bytes from off the length or API.

00:32:29.920 --> 00:32:36.550
We basically need to pass in a buffer of the
right length for the asset that you're reading.

00:32:36.550 --> 00:32:40.580
In this case because we know that it's a small
image, we can just pass a buffer that is big enough

00:32:40.580 --> 00:32:45.360
so we say read it from the beginning in all of the image.

00:32:45.360 --> 00:32:50.860
If you are not going to display the image or if you are
maybe within a video that you don't know how big it is.

00:32:50.860 --> 00:32:56.560
So, if it's really big, we will recommend it so you
read it in chunks, process and keep reading like that

00:32:56.560 --> 00:32:59.100
because you're going to run out of memory otherwise.

00:33:00.110 --> 00:33:06.250
Once we have the data, we create an NSData out of
it and then we go through the normal CGImage APIs

00:33:06.250 --> 00:33:09.720
to build a UIImage and display that in the UI.

00:33:09.720 --> 00:33:18.650
For metadata, that screen that I
showed you is extremely simple.

00:33:18.650 --> 00:33:21.490
Again, the metadata is coming from
a particular representation,

00:33:21.490 --> 00:33:26.880
not from the asset itself so we get the full representation.

00:33:26.880 --> 00:33:34.550
You could be getting a different one if you want it and then
just ask for the metadata and that is just normal dictionary

00:33:34.550 --> 00:33:39.490
but then, in this case with the demo which is formatted
somewhat quickly to display on the UI but basically

00:33:39.490 --> 00:33:43.770
at that point, you have it EXIF, TIFF, et
cetera, all that information available to you.

00:33:43.770 --> 00:33:54.990
And the last thing that I want to show you is in the asset's
list, which is an object that manages what the map displays.

00:33:54.990 --> 00:33:57.840
When we are enumerating based on the favorites group.

00:33:57.840 --> 00:34:02.680
Basically, we don't have a-- it's
if you will as a synthesized group.

00:34:02.680 --> 00:34:05.670
Something that we created is not
stored in the AssetsLibrary.

00:34:05.670 --> 00:34:07.870
So, we won't have an ALAssets group.

00:34:07.870 --> 00:34:13.170
We just have in this case an array
of URLs, of persistent URLs.

00:34:13.170 --> 00:34:18.490
So, what we do is we call the AssetsLibraryAssetForURL
and then we have a return block

00:34:18.490 --> 00:34:25.730
that we basically are adding our ALAsset objects
into an array and please do use the failure block

00:34:25.730 --> 00:34:35.900
because this one can also trigger the request for access
to a user and with this code plus the code that you've seen

00:34:35.900 --> 00:34:42.630
in the previous demo, you can basically create whatever
you want for displaying information to the users

00:34:42.630 --> 00:34:46.870
in whichever way makes more sense for
your application and for your users.

00:34:46.870 --> 00:34:53.270
Back to you Emilie.

00:34:53.270 --> 00:34:53.330
[ Applause ]

00:34:53.330 --> 00:34:54.600
>> Emilie Kim: Thanks Hernan.

00:34:54.600 --> 00:34:57.470
So, what Hernan showed you was really cool.

00:34:57.470 --> 00:35:02.080
You can basically take images from the
user's photo library and put them on a map,

00:35:02.080 --> 00:35:05.080
really customizing your image picker behavior.

00:35:05.080 --> 00:35:09.550
Now keep in mind, you want to use the full
resolution images only when it's really appropriate.

00:35:09.550 --> 00:35:11.850
So, maybe you're uploading to a
printing service or something,

00:35:11.850 --> 00:35:13.920
that's really when you need the full resolution image.

00:35:13.920 --> 00:35:17.150
Any other time, the full screen image will probably suffice.

00:35:17.150 --> 00:35:23.850
You can also create new and interesting
UIs in your application using the metadata.

00:35:23.850 --> 00:35:26.620
I mean, really, you can go crazy with the metadata.

00:35:26.620 --> 00:35:29.080
If the picture has it, why not use it?

00:35:29.080 --> 00:35:33.110
So with that, we're really looking forward to see
how you guys are going to interact with photos

00:35:33.110 --> 00:35:36.230
and videos in new ways in your application?

00:35:36.230 --> 00:35:40.970
So now, coming back to how to make
your applications stand out.

00:35:40.970 --> 00:35:44.170
There are so many photography-related apps in the app store.

00:35:44.170 --> 00:35:46.260
How do you make yours shine?

00:35:46.260 --> 00:35:50.180
Well, we've armed you with all of the
knowledge you need to know in this session

00:35:50.180 --> 00:35:52.430
to really make your applications stand out.

00:35:52.430 --> 00:35:58.970
You can build and design your own camera controls really
creating an immersive experience in your application.

00:35:58.970 --> 00:36:04.260
You can also take advantage of the AssetsLibrary
framework and do amazing things like well,

00:36:04.260 --> 00:36:08.070
building your own image picker, that's not really
that amazing, but really customizing the behavior

00:36:08.070 --> 00:36:13.600
to make it yours, customizing the look and feel so the
user feels like they've never left your application.

00:36:13.600 --> 00:36:17.640
You can enrich your application with
access to full-sized images if appropriate.

00:36:17.640 --> 00:36:20.690
You can also take it to the next
level with system integration.

00:36:20.690 --> 00:36:26.920
ImageIO and AVFoundation are only two of the system
frameworks that AssetsLibrary can play well with.

00:36:26.920 --> 00:36:30.690
Obviously, you just saw in the third
demo that you can also use MapKit really

00:36:30.690 --> 00:36:34.030
and integrate really well with the AssetsLibrary framework.

00:36:34.030 --> 00:36:39.430
So, the system is at your fingertips now that
you have access to these photos and videos.

00:36:39.430 --> 00:36:43.010
Now, we're really looking forward to see what you
guys are going to come up with using the metadata.

00:36:43.010 --> 00:36:45.440
This is something you guys have
been asking for for a long time

00:36:45.440 --> 00:36:48.180
and we're really excited to see what you can come up with.

00:36:48.180 --> 00:36:53.400
So for more information, please contact Mark Malone
who is our Integration Technologies Evangelist.

00:36:53.400 --> 00:36:57.540
I also encourage you to read the
documentation at developer.apple.com as well

00:36:57.540 --> 00:37:01.070
as ask question on the Apple developer forums.

00:37:01.070 --> 00:37:07.200
For related sessions, if you're interested in learning more
about AVFoundation, there are three AVFoundation sessions

00:37:07.200 --> 00:37:09.250
that you should definitely check out on video.

00:37:09.250 --> 00:37:13.770
One of which will be repeated this afternoon
as well as customizing maps with overlays.

00:37:13.770 --> 00:37:20.150
If you're interested in how we implemented the third demo,
I encourage you to attend that session later this morning.

