WEBVTT

00:00:07.040 --> 00:00:07.290
>> Welcome.

00:00:07.290 --> 00:00:10.690
I'm glad to see so many people interested in Game Center.

00:00:10.690 --> 00:00:16.810
We're going to talk about some techniques
on how you enable your Game Center game.

00:00:16.810 --> 00:00:23.400
I'm guessing most of you are around for
Mike's session that was just before.

00:00:23.400 --> 00:00:30.300
But I'll go over a simple review of what Game Center is.

00:00:30.300 --> 00:00:39.940
And then I'll go into some details about how you actually
turn your games, your applications, into Game Center.

00:00:39.940 --> 00:00:40.610
I'm Gabriel.

00:00:40.610 --> 00:00:43.100
I'm part of the team.

00:00:43.100 --> 00:00:44.110
We're here all week.

00:00:44.110 --> 00:00:45.500
We have a lab.

00:00:45.500 --> 00:00:54.080
Tomorrow we have another session in this room right
after this where we'll be going into some more details.

00:00:54.080 --> 00:00:56.340
So, Game Center.

00:00:56.340 --> 00:01:02.170
Game Center is Apple's social gaming community.

00:01:02.170 --> 00:01:08.050
It provides a whole bunch of features:
friends, friends' lists.

00:01:08.050 --> 00:01:13.180
It allows you to play with your friends;
compete with your friends offline and online

00:01:13.180 --> 00:01:18.050
through leaderboards, achievements, and multiplayer gaming.

00:01:18.050 --> 00:01:21.470
Peer-to-peer multiplayer gaming is really neat.

00:01:21.470 --> 00:01:23.600
You'll see more of that later today.

00:01:23.600 --> 00:01:26.900
I'm going to be focusing more on
the first three of those slides --

00:01:26.900 --> 00:01:30.520
bullet points: friends, leaderboards, achievements.

00:01:30.520 --> 00:01:35.940
What you're going to learn today, Game Center API basics.

00:01:35.940 --> 00:01:41.640
I'll go over a little bit about how our API is
structured, how we can use this in some simple cases,

00:01:41.640 --> 00:01:46.780
how to authenticate, how you can remember.

00:01:46.780 --> 00:01:49.430
You can use the player ID, which was mentioned before.

00:01:49.430 --> 00:01:50.120
It's persistent.

00:01:50.120 --> 00:01:53.620
You can use this to remember your
players across different sessions.

00:01:53.620 --> 00:01:55.130
You can store data.

00:01:55.130 --> 00:02:01.140
I'll show you how you can report high scores, how
you can access and show a leaderboard in game,

00:02:01.140 --> 00:02:07.840
how you can access the data from a leaderboard
if you want to use custom UI, and achievements.

00:02:07.840 --> 00:02:14.990
So I'll also show you how you can report achievements
from your game; how you can show achievements

00:02:14.990 --> 00:02:23.110
in your game using the standard UI; how to query data
from the achievements, your users' achievements; and,

00:02:23.110 --> 00:02:26.590
lastly, how to reset a user's achievements.

00:02:26.590 --> 00:02:28.190
We've seen this slide.

00:02:28.190 --> 00:02:31.520
It's an overview of what Game Center actually looks like.

00:02:31.520 --> 00:02:33.560
There's a Game Center application.

00:02:33.560 --> 00:02:35.690
Obviously, there's Your Games.

00:02:35.690 --> 00:02:38.310
And the GameKit framework.

00:02:38.310 --> 00:02:41.680
The GameKit framework is comprised
of three different pieces.

00:02:41.680 --> 00:02:45.630
There's parts that are only available
from the Game Center application.

00:02:45.630 --> 00:02:48.340
There's the piece in the middle which we're calling General,

00:02:48.340 --> 00:02:51.720
which is Authentication, Friends,
Leaderboards, and Achievements.

00:02:51.720 --> 00:02:55.730
That's what I'm going to be focusing on in this session.

00:02:55.730 --> 00:03:00.120
And, lastly, there's the Multiplayer features
which we'll go over in the next session.

00:03:00.120 --> 00:03:07.770
So I'm going to be focusing on these four things today, and
I'll be going through each of these sections in more detail.

00:03:07.770 --> 00:03:12.790
To start off with, I want to take a
little digression and talk about blocks.

00:03:12.790 --> 00:03:14.610
Blocks are new in iOS4.

00:03:14.610 --> 00:03:18.180
They were introduced in Snow Leopard.

00:03:18.180 --> 00:03:22.190
A block is essentially an anonymous function.

00:03:22.190 --> 00:03:28.840
In other languages, you might have
heard them called closures or lambdas.

00:03:28.840 --> 00:03:32.240
You can see here we have declared a block.

00:03:32.240 --> 00:03:34.490
It's like any other C variable.

00:03:34.490 --> 00:03:40.650
It follows the definition of a function pointer.

00:03:40.650 --> 00:03:44.260
Instead of using an asterisks, it uses a caret.

00:03:44.260 --> 00:03:48.670
One of the interesting things is that it
actually captures enclosing variables.

00:03:48.670 --> 00:03:53.180
So you'll notice in the block where
we make reference to x, y, and z,

00:03:53.180 --> 00:03:57.590
z being passed in as a parameter, x and y are captured.

00:03:57.590 --> 00:04:03.870
So when we get to this last line,
it will print out 123, 456, 789.

00:04:03.870 --> 00:04:10.720
A note that I want to make, we're
only using static types here.

00:04:10.720 --> 00:04:12.920
But you can also use objects.

00:04:12.920 --> 00:04:20.500
And when you use objects, when you reference
enclosing objects, it will automatically retain them.

00:04:20.500 --> 00:04:26.490
And there's a particular note that I want to
make about using instance variables because,

00:04:26.490 --> 00:04:31.840
when you reference an instance variable,
you're making an implicit reference to self.

00:04:31.840 --> 00:04:34.590
And so self will be retained inside the block.

00:04:34.590 --> 00:04:39.780
If you're also retaining the block inside
the object, then you have a retain loop.

00:04:39.780 --> 00:04:45.000
And this is something that you need to be
concerned about or you should watch for.

00:04:45.000 --> 00:04:47.240
There's a lot more information on blocks.

00:04:47.240 --> 00:04:48.300
There's another session.

00:04:48.300 --> 00:04:51.900
I'll give you some details at the end of
here where you can find out about blocks.

00:04:51.900 --> 00:04:54.080
But we use blocks quite extensively.

00:04:54.080 --> 00:04:56.940
And I'll show you exactly how we use blocks.

00:04:56.940 --> 00:05:03.660
So this is not a real call but it's
a template of how we're using blocks.

00:05:03.660 --> 00:05:06.390
We use basically blocks as callbacks.

00:05:06.390 --> 00:05:15.260
Most of the functions in GameKit are asynchronous, which
means that an action is performed and you will be notified

00:05:15.260 --> 00:05:17.710
at the end once said action has completed.

00:05:17.710 --> 00:05:22.130
And the way that we do that is we do that using blocks.

00:05:22.130 --> 00:05:26.980
Here are some of the errors that you'll see.

00:05:26.980 --> 00:05:33.340
GKErrorCancelled will happen if the user decides that
they were going to cancel the event which you started.

00:05:33.340 --> 00:05:40.600
CommunicationsFailure, if we have
trouble; if the network is unresponsive.

00:05:40.600 --> 00:05:49.450
InvalidCredentials, if the user that is using your
game doesn't remember his user name and password.

00:05:49.450 --> 00:05:53.100
NotAuthenticated, Mike mentioned authentication before.

00:05:53.100 --> 00:06:02.080
I'll mention again right after here, all the features
of Game Center require that your user is authenticated.

00:06:02.080 --> 00:06:04.140
AuthenticationInProgress.

00:06:04.140 --> 00:06:11.740
Since authentication is asynchronous, you might be tempted
to try authentication if you're not already authenticated.

00:06:11.740 --> 00:06:14.960
And you might actually try again.

00:06:14.960 --> 00:06:22.530
If the user is in the middle of authentication and
we receive a call to some function, we'll notify you.

00:06:22.530 --> 00:06:31.590
ScoreNotSet, you'll see when we're dealing with
leaderboards if you try to report a score that has no value.

00:06:31.590 --> 00:06:37.520
ParentalControlsBlocked, something that
you'll get back if there are restrictions.

00:06:37.520 --> 00:06:46.820
We have -- built into the iOS there's restrictions
that can be placed on which features are available.

00:06:46.820 --> 00:06:49.860
And the last one is a MatchRequestInvalid.

00:06:49.860 --> 00:06:56.020
So when you see matching, which we'll do in the next
session, there are some parameters which you can set

00:06:56.020 --> 00:07:03.350
up with matches, and match has to -- has certain
restrictions about how you can set up a match request.

00:07:03.350 --> 00:07:04.990
And Nate will go over that.

00:07:04.990 --> 00:07:05.960
So here we are.

00:07:05.960 --> 00:07:06.870
We're at this list.

00:07:06.870 --> 00:07:12.550
I'm going to focus on authentication, and this
is the first class that I'm going to talk about.

00:07:12.550 --> 00:07:15.990
This is GKLocalPlayer.

00:07:15.990 --> 00:07:22.320
GKLocalPlayer represents the player
on the device who's playing your game.

00:07:22.320 --> 00:07:27.330
It has three pieces of information
associated with that player.

00:07:27.330 --> 00:07:32.860
He's got a player ID that is unique and persistent.

00:07:32.860 --> 00:07:35.950
You can use this to store data about your players.

00:07:35.950 --> 00:07:41.740
You can use this to extend the
community, extend our feature set.

00:07:41.740 --> 00:07:45.470
You have an alias, which is the
nickname that Mike talked about.

00:07:45.470 --> 00:07:47.640
It is unique but it's not persistent.

00:07:47.640 --> 00:07:51.070
The user always has the ability to change their nickname.

00:07:51.070 --> 00:07:59.580
And, then, underage flag to give you an indication that this
user is underage and you might want to behave appropriately.

00:07:59.580 --> 00:08:03.740
You also use GKLocalPlayer to perform authentication --

00:08:03.740 --> 00:08:08.980
I'll show you that in just a moment
-- and access your friends' list.

00:08:10.000 --> 00:08:15.700
So here's the first piece of real code
that we see to perform authentication.

00:08:15.700 --> 00:08:22.920
Authentication is required to use any of the other
features for -- any of the other features of Game Center.

00:08:22.920 --> 00:08:28.520
So you need to do this as early as possible in your game.

00:08:28.520 --> 00:08:30.160
It may present UI.

00:08:30.160 --> 00:08:36.580
It will give the ability for the user to present their
credentials if they haven't already been authenticated.

00:08:36.580 --> 00:08:40.570
We share authentication across all games in the Game Center.

00:08:40.570 --> 00:08:45.180
So it might be that you call authentication
and your user is authenticated.

00:08:45.180 --> 00:08:49.170
You'll notice this block here, indication of an error.

00:08:49.170 --> 00:08:53.290
First thing that we need to do is we
need to allocate the local player.

00:08:53.290 --> 00:09:04.690
We use this -- we do this using a class method called
localPlayer on GKLocalPlayer, and we store it for later use.

00:09:04.690 --> 00:09:05.650
On this object,

00:09:05.650 --> 00:09:11.980
we now call authenticateWithCompletionHandler,
and we give it a parameter, this block.

00:09:11.980 --> 00:09:16.180
This block is going to get run sometime in the future.

00:09:16.180 --> 00:09:17.440
It's a callback.

00:09:17.440 --> 00:09:20.160
We're using them as callbacks instead of delegates.

00:09:20.160 --> 00:09:24.440
We find this to be much easier
to do and much easier to write.

00:09:24.440 --> 00:09:27.780
So the actual block of the code gets run at a later time.

00:09:27.780 --> 00:09:34.300
It might look quite linear as your reading it,
but this code actually gets run in the future.

00:09:34.300 --> 00:09:39.860
So here we have the response coming
back from authentication with an error.

00:09:39.860 --> 00:09:42.090
If there was not an error, that
means your user is authenticated.

00:09:42.090 --> 00:09:45.660
You should enable your GameKit features.

00:09:45.660 --> 00:09:51.140
You should allow the user to use invites and leaderboards.

00:09:52.470 --> 00:09:58.040
Otherwise, if there has been an error, you
should turn off Game Center Enable Features.

00:09:58.040 --> 00:10:00.150
Doesn't mean that you should stop your game.

00:10:00.150 --> 00:10:01.550
Please continue your game.

00:10:01.550 --> 00:10:07.730
Maybe the user has decided that they don't want to play
online or they don't want to use Game Center and features.

00:10:07.730 --> 00:10:12.310
And they've notified this -- they've
told you this by canceling the operation.

00:10:12.310 --> 00:10:15.230
But your game should continue on.

00:10:18.090 --> 00:10:21.920
So this is what it will look like to your user.

00:10:21.920 --> 00:10:28.380
If he's not already authenticated, he'll be given this
opportunity to either sign in using an existing account

00:10:28.380 --> 00:10:31.570
that he's already created or to create a new account.

00:10:31.570 --> 00:10:36.550
If he signs in using an existing
account, it's the iTunes account.

00:10:36.550 --> 00:10:41.440
And he's given a place to sign in.

00:10:41.440 --> 00:10:47.100
If the user's already signed in, has already
been authenticated through another application

00:10:47.100 --> 00:10:52.800
or having used your game earlier, then you'll
see this welcome back message that comes in.

00:10:52.800 --> 00:11:01.710
Then you can enable the buttons to do invites, matching,
leaderboards, etc. Now I'm going to talk a little bit

00:11:01.710 --> 00:11:07.940
about friends, how you access your friends'
list, what you can do with the friends' list.

00:11:08.950 --> 00:11:10.810
And we hit our second class.

00:11:10.810 --> 00:11:13.260
This one's called GKPlayer.

00:11:14.330 --> 00:11:21.820
GKPlayer represents everybody else in the
community who's not the user on your device.

00:11:21.820 --> 00:11:29.960
We have two pieces of information
that we have about this player.

00:11:29.960 --> 00:11:36.190
We have a player ID, which we can see is persistent.

00:11:36.190 --> 00:11:45.210
You can use it to keep track of data for those users,
and you can keep track of those players over time.

00:11:45.210 --> 00:11:49.790
The alias should be used in your
game to display the user's name.

00:11:49.790 --> 00:11:55.000
So, when you're in a match and you get matched
with somebody, you should use the alias to show -

00:11:55.000 --> 00:11:57.180
hey, you're now playing with this person.

00:11:57.180 --> 00:12:02.570
This is who's blue, this is who's red, that kind of thing.

00:12:02.570 --> 00:12:04.900
This is how you get your friends' list.

00:12:04.900 --> 00:12:11.980
The first thing that we need to do
is, again, start with localPlayer.

00:12:11.980 --> 00:12:16.000
If you've already done this, you could use the same object.

00:12:17.820 --> 00:12:20.580
We call loadFriendsWithCompletionHandler.

00:12:20.580 --> 00:12:26.400
This block is a little bit different than the last one
that we saw, because it has two parameters in it now:

00:12:26.400 --> 00:12:32.220
one for the array of friends, which gets
returned to you; and one for an error.

00:12:32.220 --> 00:12:38.970
You'll notice in the block where I'm actually
handling both cases, if, for instance,

00:12:38.970 --> 00:12:43.530
there is a communications failure, we
might have that friends' list cached.

00:12:43.530 --> 00:12:47.570
So we'll return that to you, even
though you can't access the server.

00:12:47.570 --> 00:12:51.960
It might be slightly out of date, but
it's the best information that you have,

00:12:51.960 --> 00:12:55.450
as well as also return you an indication
that there was an error.

00:12:55.450 --> 00:12:57.610
You should handle both cases.

00:12:57.610 --> 00:13:03.510
So, in this case, the friends' list that's
returned to you is an array of GKPlayers.

00:13:03.510 --> 00:13:10.050
[ Pause ]

00:13:10.050 --> 00:13:10.860
What to do with the friends' list.

00:13:10.860 --> 00:13:16.740
I've already told you that you can associate custom
data on your own servers with the player IDs.

00:13:16.740 --> 00:13:22.460
And here are some ideas that you can do, you
can use to extend the Game Center functionality.

00:13:22.460 --> 00:13:23.400
Virtual goods.

00:13:23.400 --> 00:13:29.250
If you want to gift things to other friends, you can
use the friends' list to find out who your friends are.

00:13:29.250 --> 00:13:31.250
You can give them things.

00:13:31.250 --> 00:13:35.470
This is outside of the features that we provide you.

00:13:35.470 --> 00:13:37.240
Cross-session messaging.

00:13:37.240 --> 00:13:45.630
If you have virtual worlds, you have friends, you can
leave messages for other player IDs on your servers.

00:13:45.630 --> 00:13:50.460
When the user starts your game and they log
in, they can have this information to them.

00:13:50.460 --> 00:13:53.540
You can use a social graph as part of your gameplay.

00:13:53.540 --> 00:13:57.290
You can have your users visit each other.

00:13:57.290 --> 00:13:59.950
This doesn't have to happen online.

00:13:59.950 --> 00:14:06.510
And you can use the connections to
enhance the character's virtual abilities.

00:14:06.510 --> 00:14:11.160
[ Pause ]

00:14:11.160 --> 00:14:14.580
Now I'm going to go into leaderboards.

00:14:14.580 --> 00:14:20.360
A little bit longer than the last
section but still quite easy to do.

00:14:20.360 --> 00:14:24.790
So there are three classes now that we
need to talk about for leaderboards.

00:14:24.790 --> 00:14:28.020
GKScore is the actual score.

00:14:28.020 --> 00:14:34.550
A GKLeaderboard is a class that you can use
to access the data inside the leaderboard.

00:14:34.550 --> 00:14:37.260
And there's a GKLeaderboardViewController.

00:14:37.260 --> 00:14:43.310
The view controller is the standard
UI that we provide to you so --

00:14:43.310 --> 00:14:51.560
to make it very easy for you to show leaderboards
inside your game in a few lines of code.

00:14:51.560 --> 00:14:57.160
I'll go through each of the different
things that you can do.

00:14:57.160 --> 00:14:59.430
First of all, what is a leaderboard?

00:14:59.430 --> 00:15:00.750
There's a screenshot of a leaderboard.

00:15:00.750 --> 00:15:03.110
A leaderboard's a list of high scores.

00:15:03.110 --> 00:15:12.930
There's filters -- Mike alluded to those --
friends, all players, different time possibilities.

00:15:12.930 --> 00:15:15.770
We're also providing categories.

00:15:15.770 --> 00:15:19.080
Categories are a way to provide multiple leaderboards.

00:15:19.080 --> 00:15:21.290
This is something that a lot of people had asked for.

00:15:21.290 --> 00:15:26.010
So you can separate your leaderboards
into easy, medium, and hard.

00:15:26.010 --> 00:15:28.900
You can have different tracks or different levels.

00:15:28.900 --> 00:15:36.910
In addition to that, you can have one global leaderboard,
where any score to any of the categories that you provide,

00:15:36.910 --> 00:15:40.190
you'll have one leaderboard which shows you overall scores.

00:15:40.190 --> 00:15:44.760
Steps to using leaderboards.

00:15:44.760 --> 00:15:46.490
You have to set it up first.

00:15:46.490 --> 00:15:50.200
So there's a server-side setup component.

00:15:50.200 --> 00:15:53.660
There's reporting scores.

00:15:53.660 --> 00:15:58.530
There's showing the scores using the
standard UI, showing the leaderboards.

00:15:58.530 --> 00:16:00.750
And there's querying leaderboard data.

00:16:00.750 --> 00:16:03.650
You would want to do this if you
want to build your own custom UI

00:16:03.650 --> 00:16:08.730
so it's a little bit more integrated
into your game and the style.

00:16:09.830 --> 00:16:12.250
First I'll talk about server-side setup.

00:16:12.250 --> 00:16:15.700
This is done in iTunes Connect.

00:16:15.700 --> 00:16:20.440
You need to enable leaderboards for your
game, and then you need to set them up.

00:16:20.440 --> 00:16:25.170
And a leaderboard consists of a few different
properties that you set in iTunes Connect.

00:16:25.170 --> 00:16:29.720
There's a leaderboard identifier, which is a string.

00:16:29.720 --> 00:16:33.070
There's a sort order, ascending or descending.

00:16:33.070 --> 00:16:35.950
And this is the order that shows up in the leaderboard.

00:16:35.950 --> 00:16:43.660
So, if I have a descending, it means that higher scores are
better because, as you go down the list, they get lower.

00:16:43.660 --> 00:16:45.380
Ascending, the other way around.

00:16:45.380 --> 00:16:49.490
So if you have a golf game, for
instance, lower scores would be better.

00:16:49.490 --> 00:16:52.820
And you can localize this in many different languages.

00:16:52.820 --> 00:16:56.870
There's a format for your score:
integer values or time values,

00:16:56.870 --> 00:17:02.240
how you want to represent the score;
and a suffix in many languages.

00:17:02.240 --> 00:17:04.160
More languages are better.

00:17:04.160 --> 00:17:07.470
It helps sell your game.

00:17:07.470 --> 00:17:09.100
More people are interested.

00:17:09.100 --> 00:17:12.210
More people will be able to play it.

00:17:12.210 --> 00:17:16.130
This is a screenshot of iTunes Connect.

00:17:16.130 --> 00:17:19.260
You can see there's a place for a leaderboard ID.

00:17:19.260 --> 00:17:20.490
This is an ascending one.

00:17:20.490 --> 00:17:21.890
You can set the sorting.

00:17:21.890 --> 00:17:24.250
And all the languages are below.

00:17:24.250 --> 00:17:29.040
In this case, it's only in English and
Spanish using integer values for gold coins.

00:17:29.040 --> 00:17:33.730
But I suggest you use as many languages as you possibly can.

00:17:33.730 --> 00:17:39.510
This will show based upon the locale of the
user who's using the game on their device.

00:17:39.510 --> 00:17:42.060
[ Pause ]

00:17:42.060 --> 00:17:46.170
I want to talk a little bit about
formatting because it's interesting.

00:17:46.170 --> 00:17:56.370
I have a few different selected formatters here and some
examples, the first one being an integer value, 123,456.

00:17:56.370 --> 00:17:59.560
It will format it with a comma.

00:17:59.560 --> 00:18:04.580
Depending upon your locale, we have different
formats that you can choose for an integer value.

00:18:04.580 --> 00:18:06.230
Time values, I've shown two here.

00:18:06.230 --> 00:18:08.200
The first one is in minutes.

00:18:08.200 --> 00:18:13.690
So the value that you submit would be 792
as an integer, but it's represented --

00:18:13.690 --> 00:18:16.590
it's interpreted as the number of minutes.

00:18:16.590 --> 00:18:22.090
So, when it's presented, it actually
shows up as 13 hours and 12 minutes.

00:18:22.090 --> 00:18:29.010
Similarly, when you have a second value, you can
choose to have your value represented as seconds.

00:18:29.010 --> 00:18:36.220
So you have here 3,723 seconds, which shows
up as an hour 2 minutes and 3 seconds.

00:18:36.220 --> 00:18:43.550
And money, 1,042 shows up with a
dollar sign and comma, as appropriate.

00:18:43.550 --> 00:18:46.200
There's about 17 formatters in all.

00:18:46.200 --> 00:18:53.110
You can see these on iTunes Connect
when you choose to do the localization.

00:18:55.060 --> 00:18:56.990
So reporting a score.

00:18:56.990 --> 00:18:58.730
It's quite easy.

00:18:58.730 --> 00:19:01.520
You allocate a GKScore.

00:19:01.520 --> 00:19:08.010
You set a value, you set a category if you're using
multiple leaderboards, and you report the score.

00:19:08.010 --> 00:19:13.320
A note: If you're offline and there's an error in
communicating with the server, it's your responsibility

00:19:13.320 --> 00:19:20.450
to save that score and attempt to report it at a later
time when the network conditions are more favorable.

00:19:20.450 --> 00:19:23.320
We make it easy for you.

00:19:23.320 --> 00:19:25.330
I'll show you that when I get to the code.

00:19:25.330 --> 00:19:27.080
These are the properties of a GKScore.

00:19:27.080 --> 00:19:28.680
Some of them are read only.

00:19:28.680 --> 00:19:31.510
They'll be returned to you when
you ask for leaderboard data.

00:19:31.510 --> 00:19:34.440
A value is the integer value of the score.

00:19:34.440 --> 00:19:42.200
A formatted value is a string formatted by the server based
upon the properties that you've set in iTunes Connect,

00:19:42.200 --> 00:19:47.060
how that score is interpreted,
and the optional language suffix.

00:19:47.060 --> 00:19:50.460
Category, if you're using multiple leaderboards.

00:19:50.460 --> 00:19:55.550
A date, which is the date, the
time that the score was created.

00:19:55.550 --> 00:19:58.380
The player who actually created that score.

00:19:58.380 --> 00:20:01.870
And a rank where it fits on the leaderboard.

00:20:01.870 --> 00:20:06.500
This is how you report a score.

00:20:06.500 --> 00:20:11.010
You start off allocating a player
score -- allocating a GKScore.

00:20:11.010 --> 00:20:13.770
Here we call it myPlayerScore.

00:20:13.770 --> 00:20:17.480
We set a value for the score, 12345.

00:20:17.480 --> 00:20:23.120
And we report the score using this
function, reportScoreWithCompletionHandler.

00:20:23.120 --> 00:20:29.790
There's no result returned, just an indication of the error.

00:20:29.790 --> 00:20:32.270
If there was an error, that would make it easy for you.

00:20:32.270 --> 00:20:35.540
It's an encodable object so you can use NSKeyedArchiver.

00:20:35.540 --> 00:20:40.790
So, to serialize this, you can store it
offline so that you can try again either

00:20:40.790 --> 00:20:45.670
when the next time your user plays
the game or later in the play session.

00:20:45.670 --> 00:20:48.280
If there was no error, you're done.

00:20:48.280 --> 00:20:50.040
The score was submitted successfully.

00:20:50.040 --> 00:20:52.750
You can see it.

00:20:52.750 --> 00:20:57.720
Which brings me to the next point: How
do you show these to the user, right?

00:20:57.720 --> 00:20:59.870
You have a list of scores.

00:20:59.870 --> 00:21:02.440
This is using the leaderboard standard UI.

00:21:02.440 --> 00:21:05.420
There's a class called GKLeaderboardViewController.

00:21:05.420 --> 00:21:07.010
It's a modal view controller.

00:21:07.010 --> 00:21:09.660
There's a button at the top right which says done

00:21:09.660 --> 00:21:13.320
so that the user can indicate, I'm
finished looking at the leaderboard.

00:21:13.320 --> 00:21:16.970
And so there's a delegate method
which you have to implement.

00:21:16.970 --> 00:21:18.980
I'll start off with that.

00:21:18.980 --> 00:21:20.780
leaderboardDidPressDismiss.

00:21:20.780 --> 00:21:25.200
All we're doing is we're dismissing the modal view
controller, which will take it off the screen.

00:21:25.200 --> 00:21:28.340
This will appear on top of your view.

00:21:28.340 --> 00:21:33.830
So, to show the leaderboard, we've created
this function called showLeaderboard.

00:21:33.830 --> 00:21:41.150
The first thing it does is it allocates
GKLeaderboardViewController.

00:21:41.150 --> 00:21:44.660
It initializes it with some filters.

00:21:44.660 --> 00:21:49.960
In this case, we're interested in all the
scores over the last week for my friends.

00:21:49.960 --> 00:21:55.790
And we set the delegate to ourselves so
that we'll know when they're finished,

00:21:55.790 --> 00:21:59.190
and we present the -- we present the view controller.

00:21:59.190 --> 00:22:00.770
I think that's fairly simple.

00:22:00.770 --> 00:22:12.540
We also give you the ability if you want to create
your own custom UI to query the leaderboard.

00:22:12.540 --> 00:22:17.150
To do this, you use the GKLeaderboard class.

00:22:17.150 --> 00:22:21.290
You set the scopes similarly to how
we just -- how I just showed you.

00:22:21.290 --> 00:22:23.920
You set a range of ranks that you're interested in.

00:22:23.920 --> 00:22:27.900
As Mike said, you don't want to load the whole leaderboard.

00:22:27.900 --> 00:22:30.280
There might be thousands or millions of entries.

00:22:30.280 --> 00:22:33.810
It's an asynchronous operation
that communicates with our server.

00:22:33.810 --> 00:22:41.290
It could take a fair amount of time, especially if the
list is really long; and that's a poor user experience.

00:22:41.290 --> 00:22:47.540
Lastly, you can set a category if you're using
multiple leaderboards; and you can query the data.

00:22:47.540 --> 00:22:50.580
It returns an array of GKScores.

00:22:50.580 --> 00:22:51.470
We've seen this before.

00:22:51.470 --> 00:22:54.530
But just to reiterate, these are
the ones that you're interested in.

00:22:54.530 --> 00:23:02.880
The player who scored that score, you can get their player
ID and their alias; the rank where it fits in the list;

00:23:02.880 --> 00:23:11.990
the value, the formatted value which comes from
the iTunes Connect properties; and the date.

00:23:11.990 --> 00:23:17.040
So here we actually see some code,
how to query the leaderboard.

00:23:17.040 --> 00:23:22.610
So we start off with allocating a GKLeaderboard object.

00:23:22.610 --> 00:23:26.530
We set the properties that we're
interested in -- again, friends only --

00:23:26.530 --> 00:23:30.930
and the scope is week, so all the scores over the last week.

00:23:30.930 --> 00:23:33.880
And I'm just going to take a look
at the top of the leaderboard.

00:23:33.880 --> 00:23:35.570
I'm using a range here.

00:23:35.570 --> 00:23:41.470
Normally, ranges start with index values;
but leaderboard values start with 1.

00:23:41.470 --> 00:23:46.040
So, in this case, we're looking at
25 values starting at the value 1.

00:23:46.040 --> 00:23:50.980
So it will show you the top 25 list.

00:23:50.980 --> 00:23:55.100
And then we call loadScoresWithCompletionHandler.

00:23:55.100 --> 00:24:02.260
It returns to you an NSArray of scores,
GKScores, to be precise; and an error.

00:24:02.260 --> 00:24:06.980
Again, we might pass you back some cached
data in the case of a communications error.

00:24:06.980 --> 00:24:11.300
So you should be prepared for both
those values to be returned to you.

00:24:11.300 --> 00:24:17.740
If there's scores using -- in this case, I'm
just doing a fast enumeration across the list,

00:24:17.740 --> 00:24:21.880
and you'll want to do something with
it to show it in your own custom UI.

00:24:21.880 --> 00:24:24.750
If there's an error, you might
want to indicate that to the user.

00:24:24.750 --> 00:24:29.170
You might want to try again, depending on what the error is.

00:24:29.170 --> 00:24:32.830
That's querying a leaderboard.

00:24:32.830 --> 00:24:35.950
So I have a few screenshots of
what the leaderboard looks like.

00:24:35.950 --> 00:24:39.240
We provide both landscape and portrait views.

00:24:39.240 --> 00:24:43.240
So this is what it looks like in landscape.

00:24:43.240 --> 00:24:45.030
You can see here there's two sections.

00:24:45.030 --> 00:24:50.980
There's a friends section, an all player section, and,
across the top, you have the ability to change the filters.

00:24:50.980 --> 00:24:53.270
This is would what it would look like in your game.

00:24:53.270 --> 00:24:57.660
If you choose to do a custom UI,
you could do something like this.

00:24:57.660 --> 00:24:58.750
This is from Onward.

00:24:58.750 --> 00:25:01.030
It's a game that we've been using inside for testing.

00:25:01.030 --> 00:25:03.560
And here you can see they've done
something slightly different.

00:25:03.560 --> 00:25:11.100
What they do is they actually show two different time scopes
at once, scores over the last week and all time scores.

00:25:11.100 --> 00:25:16.350
It's chosen not to separate that between friends
but, as a developer, you can do whatever you want.

00:25:16.350 --> 00:25:19.470
And I'm really interested to see what you do.

00:25:19.470 --> 00:25:24.150
Landscape, it looks slightly different
but pretty much the same.

00:25:24.150 --> 00:25:29.810
You have that two sections, one for friends and
one for all players and the filters across the top.

00:25:29.810 --> 00:25:32.520
And, likewise, you can easily do custom.

00:25:32.520 --> 00:25:35.510
This comes from Quest.

00:25:35.510 --> 00:25:37.780
That's leaderboards.

00:25:37.780 --> 00:25:42.960
I think I'm going a little fast.

00:25:44.240 --> 00:25:45.330
Here we go.

00:25:45.330 --> 00:25:48.970
We're going to talk about achievements.

00:25:48.970 --> 00:25:51.070
Achievements, coming soon.

00:25:51.070 --> 00:25:52.470
Not all of it is available.

00:25:52.470 --> 00:25:55.140
Particularly what's missing is the server-side setup.

00:25:55.140 --> 00:25:58.410
The APIs are there if you want to test your code.

00:25:58.410 --> 00:26:05.550
There are three classes involved:
GKAchievementDescription is a list

00:26:05.550 --> 00:26:10.480
of all the achievements for your game across all users.

00:26:10.480 --> 00:26:20.340
There's a GKAchievement, which is the list of achievements
recorded by the user, the GKLocalUser in this case.

00:26:20.340 --> 00:26:27.820
And GKAchievementViewController, which is the standard UI.

00:26:28.860 --> 00:26:32.870
So what is an achievement?

00:26:32.870 --> 00:26:37.470
An achievement is something of significance,
something your player's done inside your game

00:26:37.470 --> 00:26:41.230
that you want to record, maybe reward them for.

00:26:41.230 --> 00:26:47.630
Examples: finishing a level really fast;
finding all the treasure in a dungeon.

00:26:47.630 --> 00:26:49.490
Come into our labs tomorrow.

00:26:49.490 --> 00:26:51.730
Please come to our labs tomorrow.

00:26:51.730 --> 00:26:55.080
It increases the engagement.

00:26:55.080 --> 00:26:58.270
Players will want to come and complete all the achievements.

00:26:58.270 --> 00:27:00.970
They'll want to get all the achievements
that you have possible.

00:27:00.970 --> 00:27:02.260
They'll want to finish your game.

00:27:02.260 --> 00:27:04.620
They want to get to 100 percent complete.

00:27:04.620 --> 00:27:06.960
It also encourages competition.

00:27:06.960 --> 00:27:13.800
Inside the Game Center application, you've seen you
can compare the achievements between your friends.

00:27:13.800 --> 00:27:17.050
You want to say to your friends, I got this achievement.

00:27:17.050 --> 00:27:19.390
You should go get this achievement.

00:27:19.390 --> 00:27:22.060
Helps engage your game.

00:27:22.060 --> 00:27:24.340
Helps keep your game last.

00:27:24.340 --> 00:27:29.300
People want to play the game.

00:27:29.300 --> 00:27:33.220
These are the steps involved in using achievements.

00:27:33.220 --> 00:27:34.390
There's a server-side setup.

00:27:34.390 --> 00:27:36.800
I'll go over that a little bit.

00:27:36.800 --> 00:27:38.560
You can report achievements.

00:27:38.560 --> 00:27:45.690
You can access the descriptions for your achievements.

00:27:45.690 --> 00:27:48.640
You can query your achievements for custom UIs.

00:27:48.640 --> 00:27:50.900
You can show your achievements to your users.

00:27:50.900 --> 00:27:51.760
There's a standard UI.

00:27:51.760 --> 00:27:53.280
I'll show you that.

00:27:53.280 --> 00:27:57.310
And there's the ability for you
to create your own custom UI.

00:27:57.310 --> 00:28:02.410
And, lastly, there's a way to reset the achievements.

00:28:02.410 --> 00:28:06.000
Somebody in the earlier session asked,
"What happens if I add more achievements?"

00:28:06.000 --> 00:28:11.240
If you add more achievements and somebody's already finished
your game and they want to go back and play it again,

00:28:11.240 --> 00:28:14.510
this is a perfect opportunity for
them to reset their achievements.

00:28:14.510 --> 00:28:18.400
The server-side setup is done in iTunes Connect.

00:28:18.400 --> 00:28:23.010
You can enable achievements in your game.

00:28:23.010 --> 00:28:26.160
And you describe each of your achievements.

00:28:26.160 --> 00:28:28.410
This is what you need to do for each achievement.

00:28:28.410 --> 00:28:29.610
There's an achievement ID.

00:28:29.610 --> 00:28:33.050
It must be unique within your game.

00:28:33.050 --> 00:28:41.080
We suggest using an inverse DNS, something
like com.myCompany.myGame.achievementX.

00:28:41.080 --> 00:28:44.270
There's a title for the achievement.

00:28:44.270 --> 00:28:49.070
There are two descriptions for the achievement,
one that shows up before the user's achieved it

00:28:49.070 --> 00:28:52.560
and one that shows up after the user's achieved it.

00:28:52.560 --> 00:28:55.500
There's a point value associated with each achievement.

00:28:55.500 --> 00:29:02.930
There's a hidden flag -- I'll talk
about that in a minute -- and an icon.

00:29:02.930 --> 00:29:11.210
The hidden flag, as mentioned before, will allow
you to set some of your achievements as hidden.

00:29:11.210 --> 00:29:17.530
So they might be secret achievements that you
want your users to discover by playing your game.

00:29:17.530 --> 00:29:23.720
They might be achievements that you don't want them to
see because they haven't bought the rest of your game

00:29:23.720 --> 00:29:28.750
if you have some in-app purchase which has extra content.

00:29:28.750 --> 00:29:33.710
You can unhide those achievements once
the user has purchased that content.

00:29:33.710 --> 00:29:36.280
But it's fairly flexible.

00:29:36.280 --> 00:29:43.600
This is what you'll see inside the code, right?

00:29:43.600 --> 00:29:52.530
It's similar to what you put into iTunes Connect, but
it's a list of -- each achievement has a description.

00:29:52.530 --> 00:30:01.080
And these are the properties that
you'll see from the framework.

00:30:01.080 --> 00:30:06.170
So there's a unique ID we talked about
is a string, preferably inverse DNS.

00:30:06.170 --> 00:30:12.800
You'll use this to reference your achievements,
either reporting them or visualizing them.

00:30:12.800 --> 00:30:14.050
There's a title.

00:30:14.050 --> 00:30:15.350
There's an icon.

00:30:15.350 --> 00:30:18.330
The icon only shows up once the user's achieved it.

00:30:18.330 --> 00:30:20.480
You'll see in this case there's a few different cases,

00:30:20.480 --> 00:30:25.080
the question mark where he doesn't have
the achievement, a partial achievement.

00:30:25.080 --> 00:30:31.360
There's two descriptions, again, one
which you'll see before you've achieved it

00:30:31.360 --> 00:30:34.040
and one which you'll see after you've achieved it.

00:30:34.040 --> 00:30:39.510
There's point values associated with each one,
and there's a flag to hide the achievement.

00:30:39.510 --> 00:30:46.080
[ Pause ]

00:30:46.080 --> 00:30:53.960
A GKAchievement, this is the record of the achievements
that are made by the user, the GKLocalPlayer.

00:30:53.960 --> 00:30:58.620
The unique ID is the same.

00:30:58.620 --> 00:31:07.560
Percentage complete, how far along that achievement has
the user progressed; the hidden flag; a completed flag,

00:31:07.560 --> 00:31:14.290
which is set once the user has completed the
achievement; the date that this record has been reported;

00:31:14.290 --> 00:31:22.120
and the number of points that the
user's been given for this achievement.

00:31:22.120 --> 00:31:25.250
So first we'll talk about reporting an achievement.

00:31:25.250 --> 00:31:30.300
Similarly to leaderboards, it's very easy to do.

00:31:30.300 --> 00:31:36.510
We use GKAchievement using the
achievement ID to identify it.

00:31:36.510 --> 00:31:40.660
We set a percentComplete and we report it.

00:31:40.660 --> 00:31:46.020
As the developer, you're responsible for
retrying if there's communications failure.

00:31:46.020 --> 00:31:50.820
The object GKAchievement is a codable object.

00:31:50.820 --> 00:31:53.730
It's quite simple to store for later use.

00:31:53.730 --> 00:32:01.210
And this is actually how we do it.

00:32:01.210 --> 00:32:05.530
We start allocating a GKAchievement.

00:32:05.530 --> 00:32:09.210
We initialize it with the identifier.

00:32:09.210 --> 00:32:15.690
More explicitly in this case, we see
com.myCompany.myGame.achievementX.

00:32:15.690 --> 00:32:18.330
We set a percentComplete.

00:32:18.330 --> 00:32:22.030
So I'm 50 percent done; I'm halfway
through this achievement.

00:32:22.030 --> 00:32:26.600
And we report it.

00:32:26.600 --> 00:32:28.540
Again, this is a block.

00:32:28.540 --> 00:32:35.060
The body of the block, although it looks
like it's linear, it's actually a callback.

00:32:35.060 --> 00:32:37.400
There's an error if there's an indication of an error.

00:32:37.400 --> 00:32:44.190
If there was an error, in this case, what you
want to do is you want to archive the achievement

00:32:44.190 --> 00:32:48.340
so that you can reuse it and you can try to report it.

00:32:48.340 --> 00:32:56.200
If there was no error, the achievement was submitted
successfully and the hidden flag will be unset.

00:32:56.200 --> 00:33:02.480
If you hide an achievement and the user reports the
achievement, that means they found out about it.

00:33:02.480 --> 00:33:03.510
And so we unhide it.

00:33:03.510 --> 00:33:12.380
[ Pause ]

00:33:12.380 --> 00:33:14.100
Achievements Standard UI.

00:33:14.100 --> 00:33:17.940
This is a GKAchievementViewController.

00:33:17.940 --> 00:33:21.020
It's a modal view controller.

00:33:21.020 --> 00:33:22.690
It requires a delegate.

00:33:22.690 --> 00:33:25.050
There's a done button.

00:33:25.050 --> 00:33:30.090
This is what the delegate look
like, achievementsDidPressDismiss.

00:33:30.090 --> 00:33:33.210
In this case, we just dismissed the modal view controller.

00:33:33.210 --> 00:33:44.840
We have a function here called showAchievements.

00:33:44.840 --> 00:33:50.660
So the first thing that we do is we
allocate the GKAchievement controller.

00:33:50.660 --> 00:33:54.880
There's no properties that we need to initialize it with.

00:33:54.880 --> 00:34:02.200
We need to set the delegate to ourself and then we
show the delegate -- we show the modal view controller.

00:34:02.200 --> 00:34:03.510
It's quite simple.

00:34:03.510 --> 00:34:10.040
[ Pause ]

00:34:10.040 --> 00:34:11.300
Getting Achievements Descriptions.

00:34:11.300 --> 00:34:15.190
So now I'll talk a little bit about
achievements and how you would want

00:34:15.190 --> 00:34:22.260
to create your own custom achievements
or custom UI for achievements, rather.

00:34:22.260 --> 00:34:28.370
Achievement descriptions, as I mentioned before, is
basically the list of achievements for your game.

00:34:28.370 --> 00:34:32.040
So, in this case, they're the same
for all the users of the game.

00:34:32.040 --> 00:34:39.880
I want to start off by loading up this achievements
description table so that I can use it later on in my game.

00:34:39.880 --> 00:34:41.730
It's a dictionary.

00:34:41.730 --> 00:34:45.460
We start off by loading the achievements.

00:34:45.460 --> 00:34:52.720
It's a class method on GKAchievementDescription,
loadAchievementDescriptionsWithCompletionHandler.

00:34:52.720 --> 00:35:04.490
And it returns to us in the form of a block callback an
array of descriptions and an indication of the error.

00:35:05.510 --> 00:35:10.380
In this case, what we're doing is I'm
just loading up this description table.

00:35:10.380 --> 00:35:15.630
Now, I'm using the IDs as keys into
this dictionary so I can refer to them.

00:35:15.630 --> 00:35:22.260
When I ask for the achievements, you'll see that
the achievements come back with an achievement ID.

00:35:22.260 --> 00:35:25.710
The achievement ID is the same
ID that we set in iTunes Connect.

00:35:25.710 --> 00:35:30.890
It's the same ID that's used here, so it will
allow me to cross-reference the achievements

00:35:30.890 --> 00:35:34.040
that my user has used with the achievement descriptions.

00:35:34.040 --> 00:35:37.890
And I can use both the data in the UI that I'm creating.

00:35:37.890 --> 00:35:43.050
If there's an error, you'll want to
indicate this to your user somehow.

00:35:43.050 --> 00:35:48.880
You'll want to try again, something like that.

00:35:48.880 --> 00:35:59.630
Once we have those descriptions in the description table,
then we can actually look at the achievements for that user.

00:35:59.630 --> 00:36:04.030
You'll notice that the first line is the
same first line as was on the last screen.

00:36:04.030 --> 00:36:07.160
In fact, it's just a repeat; but it's the same object.

00:36:07.160 --> 00:36:10.310
It's a dictionary that I loaded with the descriptions

00:36:10.310 --> 00:36:15.850
so that I can reference that in
the body of the block coming up.

00:36:15.850 --> 00:36:22.220
So here we see we're using now a GKAchievement
as opposed to a GKAchievementDescription,

00:36:22.220 --> 00:36:26.450
because I want to look at the user's achievements.

00:36:26.450 --> 00:36:35.450
So I start off with a loadAchievementsWithCompletionHandler,
and it returns to me a list of achievements and an error.

00:36:35.450 --> 00:36:36.980
This will happen in the future.

00:36:36.980 --> 00:36:39.240
It's an asynchronous call.

00:36:39.240 --> 00:36:42.060
All of the calls we've seen today are asynchronous.

00:36:42.060 --> 00:36:45.480
They all look quite similar.

00:36:45.480 --> 00:36:49.190
If there are achievements, I'm
going to loop over the achievements.

00:36:49.190 --> 00:36:51.080
I'm using fast enumeration here.

00:36:51.080 --> 00:36:55.620
You'll see first I pull out the
description from that dictionary.

00:36:55.620 --> 00:36:58.670
And, then, in this case, I'm just printing out a log.

00:36:58.670 --> 00:37:08.800
What you'll want to do is create a UI object, an entry in
a table view or something like that where I'm using some

00:37:08.800 --> 00:37:11.380
of the values from both the description and the achievement.

00:37:11.380 --> 00:37:17.990
So here I'd be printing out how many points out of how
many maximum points and I'm printing out the title.

00:37:17.990 --> 00:37:19.580
There's lots of other properties there.

00:37:19.580 --> 00:37:21.810
There's a percent complete.

00:37:21.810 --> 00:37:24.740
There's descriptions.

00:37:24.740 --> 00:37:29.510
You might want to hide them yourself
for the ones that are hidden.

00:37:29.510 --> 00:37:32.510
You can do lots of interesting things.

00:37:32.510 --> 00:37:37.230
[ Pause ]

00:37:37.230 --> 00:37:41.450
And, lastly, we get to resetting user achievements.

00:37:41.450 --> 00:37:46.470
Again, I mentioned that you want to give
your users the ability to start over.

00:37:46.470 --> 00:37:47.420
Maybe they missed something.

00:37:47.420 --> 00:37:54.460
They missed something on level 2 and, in order to get
back to that, they want to reset their achievements.

00:37:54.460 --> 00:38:01.130
There's a simple method here called
resetAchievementsWithCompletionHandler with a block.

00:38:01.130 --> 00:38:03.170
You see it like this.

00:38:03.170 --> 00:38:12.280
The block returns an error, and an indication
of whether or not the list was actually reset.

00:38:12.280 --> 00:38:17.740
If there was an error, you might want to try
again or indicate to your user in some fashion

00:38:17.740 --> 00:38:22.270
that there was an error, that their
achievements were not actually reset.

00:38:22.270 --> 00:38:27.050
Otherwise, there's nothing for us to do.

00:38:27.050 --> 00:38:28.740
Thank you.

00:38:28.740 --> 00:38:31.140
I'm going to show you a few screenshots now.

00:38:31.140 --> 00:38:33.720
This is the standard UI.

00:38:33.720 --> 00:38:36.030
You'll notice various different styles.

00:38:36.030 --> 00:38:39.360
There's one at the top which is 70 percent complete.

00:38:39.360 --> 00:38:45.870
There's one in the middle, Sailor's Mark, which
you have not achieved point values for each one.

00:38:45.870 --> 00:38:51.040
And also we can see what it might look like inside a game.

00:38:51.040 --> 00:38:52.480
This comes from Quest.

00:38:52.480 --> 00:38:55.490
They've done a pretty job.

00:38:55.490 --> 00:38:58.640
You'll see the Demon Slayer one,
which is partially achieved.

00:38:58.640 --> 00:39:06.410
You'll see what they did with the
hidden one is they marked it as secret.

00:39:06.410 --> 00:39:10.480
So, in summary, what we talked about, blocks.

00:39:10.480 --> 00:39:16.620
Blocks are an important part of
GameKit, Game Center's framework.

00:39:16.620 --> 00:39:24.590
Most of the calls that you've seen are asynchronous, which
means you make the call so you ask for a leaderboard.

00:39:24.590 --> 00:39:31.590
You say get leaderboards with -- leader scores with
completion handler and your block is run asynchronously.

00:39:31.590 --> 00:39:37.650
So we'll communicate with the server and we'll
report back to you when we have that data.

00:39:37.650 --> 00:39:41.850
So it may happen at any time, and
you need to be aware of this.

00:39:41.850 --> 00:39:44.910
Authentication is really important.

00:39:44.910 --> 00:39:53.380
All the other features rely on your user being
authenticated, so you should do this early in your game.

00:39:53.380 --> 00:39:59.290
However, your game should continue if the user has
chosen not to authenticate or can't authenticate.

00:39:59.290 --> 00:40:04.230
You just won't be able to use any
of the Game Center features.

00:40:04.230 --> 00:40:06.770
We've seen how to report a high score.

00:40:06.770 --> 00:40:14.850
We've seen how to access the leaderboard data, either
in the form of a standard UI or the data itself

00:40:14.850 --> 00:40:18.400
so that you can create your own custom UI.

00:40:18.400 --> 00:40:22.960
We've seen, similarly, for achievements, a
little bit more detailed in achievements.

00:40:22.960 --> 00:40:30.050
But we've seen how to record achievements; we've seen
how you can use the standard UI for achievements;

00:40:30.050 --> 00:40:32.650
how you can access the data from the achievements

00:40:32.650 --> 00:40:37.650
so you can create your own standard UIs;
and, lastly, how to reset achievements.

00:40:37.650 --> 00:40:39.450
A note about achievements.

00:40:39.450 --> 00:40:45.390
I mentioned previously, the API is in the developer
seats, but you won't actually have the ability to set

00:40:45.390 --> 00:40:51.850
up your achievement lists until later this year
when they add that functionality to iTunes Connect.

00:40:53.370 --> 00:40:55.410
I'm sorry I didn't take more time.

00:40:55.410 --> 00:40:58.940
But if you want more information, Allan is available.

00:40:58.940 --> 00:41:01.220
Here's his email address.

00:41:01.220 --> 00:41:08.840
There's lots more documentation both on blocks
and on Game Center at the iPhone Dev Center.

