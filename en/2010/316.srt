1
00:00:06,190 --> 00:00:07,330
>>Ken Orr: My name is Ken Orr.

2
00:00:07,330 --> 00:00:10,280
I work on the Debugger User Interface Team.

3
00:00:10,280 --> 00:00:16,350
And this morning, I'm excited to be able
to show you the new Debugger UI in Xcode 4.

4
00:00:16,350 --> 00:00:24,480
Before we do that, before we jump in, I want
to talk a little bit about the motivation.

5
00:00:24,480 --> 00:00:31,970
So Debugging is really central to
what we do as developers everyday.

6
00:00:31,970 --> 00:00:38,200
I want you to take a second, and I want you to think
about just how much time you spend each day debugging.

7
00:00:38,200 --> 00:00:42,220
So go ahead and think about that.

8
00:00:42,220 --> 00:00:45,210
Maybe it's 50 percent, perhaps even more.

9
00:00:45,210 --> 00:00:53,050
And that's why it's so important that we provide
you with a really great debugging user experience.

10
00:00:53,050 --> 00:00:57,700
And that's what we've tried to do with Xcode 4.

11
00:00:57,700 --> 00:01:03,500
And a few things we focused on to make
that happen are first, the workflow.

12
00:01:03,500 --> 00:01:10,400
So that means putting the user interface that
you need in the right place at the right time.

13
00:01:10,400 --> 00:01:16,370
So we want the UI to fade into background so that
what you're doing is what you're focusing on.

14
00:01:16,370 --> 00:01:18,290
So you don't have to worry about the UI.

15
00:01:18,290 --> 00:01:22,820
That's the first thing, probably the most important thing.

16
00:01:22,820 --> 00:01:30,390
Secondly, there's a lot of information there when
you're debugging, variables, threads, all these things,

17
00:01:30,390 --> 00:01:33,870
all this information that we have to process.

18
00:01:33,870 --> 00:01:39,360
And to make it easier to process that information
all throughout Xcode 4, you're going to see things

19
00:01:39,360 --> 00:01:45,940
like Filter Bars, Scoping Bars, so that you can
drill all the way down into the details that you need

20
00:01:45,940 --> 00:01:51,970
without seeing the information that you don't need to
see, and then you can back right back out really quickly.

21
00:01:51,970 --> 00:01:54,780
So you'll see that all throughout Xcode 4.

22
00:01:56,450 --> 00:02:02,370
And also, especially for debugging,
we live in a multithreaded world.

23
00:02:02,370 --> 00:02:07,490
So all of our apps are multithreaded, you
need to be able to debug a multithreaded app.

24
00:02:07,490 --> 00:02:12,750
So it was important that we built in support
for multithreadedness from the ground up.

25
00:02:12,750 --> 00:02:19,680
And we've done that all the way down at LLDB, up
through the UI, and we'll see a couple of examples

26
00:02:19,680 --> 00:02:24,180
of that as we go through the UI this morning.

27
00:02:24,180 --> 00:02:25,180
So let's dive right in.

28
00:02:25,180 --> 00:02:30,200
First we're going to go over, we're going
to give you a high level view of Xcode 4,

29
00:02:30,200 --> 00:02:36,490
what it looks like when you're running it for the first
time, and then we're going to go in and we're going to focus

30
00:02:36,490 --> 00:02:43,840
on each of the components in the debugging workflow,
and we'll talk about the pieces of those UI components.

31
00:02:43,840 --> 00:02:46,920
So here is Xcode 4.

32
00:02:46,920 --> 00:02:50,370
This is what it's going to look
like the first time you open it up.

33
00:02:50,370 --> 00:02:55,760
So you'll see on the left side here,
that's what we call the Navigator area.

34
00:02:55,760 --> 00:03:00,700
By default, you'll see the Project Navigator that
shows all the files that are in your project.

35
00:03:00,700 --> 00:03:04,230
In the center right area, that's the Editor area.

36
00:03:04,230 --> 00:03:06,100
So that has your source code.

37
00:03:06,100 --> 00:03:09,650
It's the focus of what you're doing, the focus of your work.

38
00:03:09,650 --> 00:03:16,910
So now, when you are-- when you're ready to run for the
first time, you're going to look up to the top left,

39
00:03:16,910 --> 00:03:20,830
and you're going to click that
Play button, straight forward.

40
00:03:20,830 --> 00:03:25,210
And when you do that, this is what
Xcode's going to look like.

41
00:03:25,210 --> 00:03:28,200
OK, so what changed here?

42
00:03:28,200 --> 00:03:35,170
Well, if you look down towards the bottom of the UI,
you'll see that the Debugger Bar popped in to view.

43
00:03:35,170 --> 00:03:39,130
So the Debugger Bar will show up anytime you're running.

44
00:03:39,130 --> 00:03:43,930
So it's kind of your visual cue
to say, "OK, we're running now."

45
00:03:43,930 --> 00:03:50,380
And if you look towards the left side of that
component, you'll see this little upward facing arrow

46
00:03:50,380 --> 00:03:58,250
with some color behind it, and that's the
button you clicked to expand the Debugger area.

47
00:03:58,250 --> 00:04:03,080
But what that little icon tells you, by
being colored like it is, is it says,

48
00:04:03,080 --> 00:04:07,370
"You have consult output waiting
for you that you haven't read yet."

49
00:04:07,370 --> 00:04:12,080
And this is a nice little affordance
to indicate that information to you

50
00:04:12,080 --> 00:04:15,440
without actually disturbing what you're doing.

51
00:04:15,440 --> 00:04:18,570
So we won't interrupt you and pop
the UI up and show you that.

52
00:04:18,570 --> 00:04:20,150
we'll just kind of gently hint it.

53
00:04:20,150 --> 00:04:22,820
And that's what that button does.

54
00:04:22,820 --> 00:04:31,060
Now, if we move more towards to the right here,
we'll bump into the thread stepping controls.

55
00:04:31,060 --> 00:04:34,760
Not much new there, we've had thread
stepping controls in Xcode 3.

56
00:04:34,760 --> 00:04:40,920
But what we've added in Xcode 4 is a couple
of new ways to step through your code.

57
00:04:40,920 --> 00:04:44,400
So if you hold down the Control button and you click one

58
00:04:44,400 --> 00:04:51,150
of these thread stepping controls,
you can step by a single instruction.

59
00:04:51,150 --> 00:04:51,870
That's interesting.

60
00:04:51,870 --> 00:04:59,140
But what's more interesting is if you hold down
the Shift button and the Control button and click,

61
00:04:59,140 --> 00:05:05,110
that will let you step by-- that will let
you step and suspend all the other threads.

62
00:05:05,110 --> 00:05:07,970
Now, why do you want to do that?

63
00:05:07,970 --> 00:05:15,310
Well, you might not know, but when you normally step
sometimes all the other threads are given a chance to run.

64
00:05:15,310 --> 00:05:19,480
And we do that to prevent deadlocks and various things.

65
00:05:19,480 --> 00:05:25,570
So what can happen is if one of those threads
has a breakpoint, it hits a breakpoint,

66
00:05:25,570 --> 00:05:31,720
you can be context-switched to that other file,
and that can be very jarring, very confusing,

67
00:05:31,720 --> 00:05:34,870
it's not always clear what happened and why it happened.

68
00:05:34,870 --> 00:05:40,670
So if you're in a situation where you know you just want to
step in a single thread, you want to prevent anybody else

69
00:05:40,670 --> 00:05:48,010
from running, you can now do that in
Xcode 4, really powerful way to debug.

70
00:05:48,010 --> 00:05:48,680
All right.

71
00:05:48,680 --> 00:05:50,970
So we've started up our app.

72
00:05:50,970 --> 00:05:55,160
And now, we're ready to set a breakpoint for the first time.

73
00:05:55,160 --> 00:05:57,600
Not much has changed here since Xcode 3.

74
00:05:57,600 --> 00:06:03,170
You can see that we just click in the Source
Code Editor Margin, like we've always done.

75
00:06:03,170 --> 00:06:10,450
But you'll also notice this button here
in the top tool bar area has toggled down.

76
00:06:10,450 --> 00:06:13,820
That button is the Breakpoints Activated button.

77
00:06:13,820 --> 00:06:19,700
That lets you quickly activate or
deactivate all your breakpoints.

78
00:06:19,700 --> 00:06:24,060
So you're debugging along maybe for a
couple of hours, you're setting breakpoints,

79
00:06:24,060 --> 00:06:26,670
you're tweaking it, trying to find out what's going wrong.

80
00:06:26,670 --> 00:06:30,460
You finally get to the point where you
think, "OK, I've solved this problem."

81
00:06:30,460 --> 00:06:32,970
and you want to deactivate all of your breakpoints.

82
00:06:32,970 --> 00:06:35,640
Now, you don't want to have to go
through and disable each breakpoint.

83
00:06:35,640 --> 00:06:39,370
You want to be able to have a big switch to do that.

84
00:06:39,370 --> 00:06:44,680
And in Xcode 4, we have that, and that's
this Breakpoints Activated button.

85
00:06:46,250 --> 00:06:46,860
All right.

86
00:06:46,860 --> 00:06:53,390
So we've set our breakpoint, we've done something in
our application, we've hit the breakpoint, and now,

87
00:06:53,390 --> 00:06:56,770
we've stopped edit here in the Source Code Editor.

88
00:06:56,770 --> 00:07:02,400
So let's take a quick look at what happened
in Xcode when we hit that breakpoint.

89
00:07:02,400 --> 00:07:09,380
The first thing to notice is that when you hit a breakpoint
you'll be automatically switched to the Debug Navigator.

90
00:07:09,380 --> 00:07:12,880
We'll talk about the Debug Navigator
in the minute in more detail.

91
00:07:12,880 --> 00:07:20,240
And a little bit later on, we'll show how you can change
what happens when certain Xcode events occur in the system.

92
00:07:20,240 --> 00:07:27,320
But just know by default, when you hit a breakpoint,
you'll be switched to the Debug Navigator.

93
00:07:27,320 --> 00:07:31,420
Also, you'll see that the Debug area has slid into view.

94
00:07:31,420 --> 00:07:38,510
So the Debug area shows us our variables, and
it shows us the consoles, the console output.

95
00:07:38,510 --> 00:07:44,370
[ Pause ]

96
00:07:44,370 --> 00:07:51,960
OK. So now, we've made debugging for a while,
we've set some breakpoints, and we're ready to kind

97
00:07:51,960 --> 00:07:56,000
of manage our breakpoints in a little bit more detail.

98
00:07:56,000 --> 00:07:59,270
It's convenient to do that using
the new Breakpoint Navigator.

99
00:07:59,270 --> 00:08:05,060
And you can see that's the navigator
with that little Breakpoint button on it.

100
00:08:05,060 --> 00:08:11,490
This shows you all your breakpoints grouped together,
you can see them all in one nice, neat place, and again,

101
00:08:11,490 --> 00:08:16,940
we'll talk about that one in a
little more detail in the minute.

102
00:08:16,940 --> 00:08:17,310
All right.

103
00:08:17,310 --> 00:08:23,010
So let's dive down, that's kind of the whirlwind tour of
Xcode 4 and what it'll look like the first time you debug.

104
00:08:23,010 --> 00:08:27,810
But let's look in detail at each of these components.

105
00:08:27,810 --> 00:08:34,750
So here's the Debug Navigator that we saw a minute
ago, and the Debug Navigator shows you all the threads

106
00:08:34,750 --> 00:08:38,400
that are active at a current line of code when you stop.

107
00:08:38,400 --> 00:08:45,680
So you stop at a line of code, this will show you all
the threads that are existing at that moment and time.

108
00:08:45,680 --> 00:08:49,010
So you have a couple different ways
that you can look at that information.

109
00:08:49,010 --> 00:08:53,980
You can look at that information grouped
by queue, so we're seeing that here,

110
00:08:53,980 --> 00:08:56,190
we're seeing it grouped by Grand Central Dispatch queue.

111
00:08:56,190 --> 00:09:02,290
So a thread will be put in its GCD bucket.

112
00:09:02,290 --> 00:09:12,550
So that can be a really useful way to look at things
if have a-- if you're using GCD in your application.

113
00:09:12,550 --> 00:09:15,580
You can also look at things just by threads.

114
00:09:15,580 --> 00:09:20,790
So you can kind of flatten out the list a
little bit more and just see a group by thread.

115
00:09:20,790 --> 00:09:24,600
Now, you won't actually lose the GCD information.

116
00:09:24,600 --> 00:09:30,530
If you look underneath the thread name,
you'll see another little subtitle there,

117
00:09:30,530 --> 00:09:33,180
that's actually the Grand Central Dispatch queue name.

118
00:09:33,180 --> 00:09:38,000
So you can still see that information, but we've
kind of lost a little bit of the hierarchy,

119
00:09:38,000 --> 00:09:43,710
and that can be useful sometimes as well.

120
00:09:43,710 --> 00:09:44,560
So this is great.

121
00:09:44,560 --> 00:09:50,160
We have all of our threads here, we
can see them all now at the same time.

122
00:09:50,160 --> 00:09:55,450
But sometimes, this list can get really, really long.

123
00:09:55,450 --> 00:09:59,280
And I don't have great attentions span, so I need to--

124
00:09:59,280 --> 00:10:05,900
I need the UI to help and get rid of things
that maybe don't matter to my debugging task.

125
00:10:05,900 --> 00:10:11,640
And in Xcode 4, we've added a bunch
of different ways to help you focus

126
00:10:11,640 --> 00:10:15,040
in on the information that you need to see right now.

127
00:10:15,040 --> 00:10:19,410
So the first thing we have here is
we have this Thread Filter button.

128
00:10:19,410 --> 00:10:25,760
So a lot of times, you're going to have Threads that
show up in this view and it's going to have stack frames,

129
00:10:25,760 --> 00:10:28,220
none of which you have debug symbols for.

130
00:10:28,220 --> 00:10:30,100
You know, there are System Threads there.

131
00:10:30,100 --> 00:10:35,150
They're not really relevant to what your debugging,
and thechances that there's any problems in there

132
00:10:35,150 --> 00:10:37,780
that you are looking for actively are not good.

133
00:10:37,780 --> 00:10:42,660
So we can go ahead and we can click that
button, and we can get rid of all those threads.

134
00:10:42,660 --> 00:10:43,470
So that's great.

135
00:10:43,470 --> 00:10:48,060
We've really narrowed down what we have to look at here.

136
00:10:48,060 --> 00:10:50,950
So that's the first really nice thing.

137
00:10:50,950 --> 00:10:54,930
Now, that's great, but we can do even better.

138
00:10:54,930 --> 00:11:01,110
We can get rid of stack frames that
we don't have debug symbols for.

139
00:11:01,110 --> 00:11:05,090
So we have a thread, it has a whole bunch of
stack frames in it, some of them are ours.

140
00:11:05,090 --> 00:11:08,130
So that's code that's our code, we can debug into it.

141
00:11:08,130 --> 00:11:14,750
But a lot of the stack frames of app kits calling into
you, maybe you don't always need to see that information.

142
00:11:14,750 --> 00:11:21,980
And as you use this little filter scrubber here, you can--
you could of course, scrub it all the way to the right.

143
00:11:21,980 --> 00:11:24,680
That means show me as much details as there is.

144
00:11:24,680 --> 00:11:28,140
So to fill you all the stack frames that exists.

145
00:11:28,140 --> 00:11:31,060
But you probably don't need that much detail.

146
00:11:31,060 --> 00:11:34,350
So as you scrub to the left, we'll start taking away stuff.

147
00:11:34,350 --> 00:11:39,270
So in the midpoint here, we're showing you your stack
frames with a little bit of context around that.

148
00:11:39,270 --> 00:11:42,970
So we're showing you some of the system stack
frame that you don't have debug symbols for,

149
00:11:42,970 --> 00:11:48,020
but you can get even less detail if you want
that, by scrubbing all the way to the left.

150
00:11:48,020 --> 00:11:54,680
And that will show you only stack frame zero,
and that can be useful sometimes as well.

151
00:11:54,680 --> 00:11:55,320
Ah-- great.

152
00:11:55,320 --> 00:11:57,500
[ Applause ]

153
00:11:57,500 --> 00:12:03,900
So these are two really nice ways to kind of
really drill down into the information you need

154
00:12:03,900 --> 00:12:07,940
for what you're debugging, and it's really
easy to toggle between different views.

155
00:12:07,940 --> 00:12:14,850
So let's take a little bit deeper
look at the Breakpoint Navigator.

156
00:12:14,850 --> 00:12:18,880
So the Breakpoint Navigator shows you all
the breakpoints you have set in your project,

157
00:12:18,880 --> 00:12:22,630
and it shows you those breakpoints grouped by file.

158
00:12:22,630 --> 00:12:26,900
As you can see here, all the File
Breakpoints are listed first.

159
00:12:26,900 --> 00:12:33,490
And then underneath those, we list the Symbolic
Breakpoints, followed by the Exception Breakpoints.

160
00:12:33,490 --> 00:12:41,640
The Breakpoint Navigator is a really convenient
way to go through and disable or enable breakpoints

161
00:12:41,640 --> 00:12:45,790
because you can see them all at once, and
you just click on the little Breakpoint icon,

162
00:12:45,790 --> 00:12:49,920
it's that little blue icon there,
to disable it or enable it.

163
00:12:49,920 --> 00:12:52,210
Really, really handy.

164
00:12:52,210 --> 00:12:58,680
The Breakpoint Navigator's also the place where you
go when you want to edit a breakpoint's-- its details.

165
00:12:58,680 --> 00:13:04,830
So here, we've double clicked on a File Breakpoint,
and we see this little Pop-Up Editor show up.

166
00:13:04,830 --> 00:13:07,700
So that's the file Breakpoint's Pop-Up Editor.

167
00:13:07,700 --> 00:13:12,960
So in that editor, we can do things like change
the enablement, we can set the condition,

168
00:13:12,960 --> 00:13:16,240
set the ignore account, could also add actions.

169
00:13:16,240 --> 00:13:21,530
So we can do things like print a
variable out, we can play a sound,

170
00:13:21,530 --> 00:13:24,190
we can run an AppleScript, we can do all sorts of things.

171
00:13:24,190 --> 00:13:26,050
That's really powerful.

172
00:13:26,050 --> 00:13:32,830
In conjunction with the actions, you can do this thing
where you automatically continue after actions are run.

173
00:13:32,830 --> 00:13:35,630
Why would you want to automatically
continue after the actions are run?

174
00:13:35,630 --> 00:13:42,620
Aren't breakpoints meant so that you can just stop and
introspect and look at your code, look at your state?

175
00:13:42,620 --> 00:13:48,950
Well, it turns out you can print out a variable and
automatically continue, and essentially put a print

176
00:13:48,950 --> 00:13:52,010
out in your code without actually
putting a print out in your code.

177
00:13:52,010 --> 00:13:55,450
That's another really powerful technique
that you can use to debug your apps.

178
00:13:55,450 --> 00:14:00,860
Now, down here at the bottom of the UI, we'll see this--

179
00:14:00,860 --> 00:14:06,130
the ability to add Exception Breakpoints,
and also Symbolic Breakpoints.

180
00:14:06,130 --> 00:14:13,190
So you can do this all right from the Breakpoint
Navigator now, which is very convenient.

181
00:14:13,190 --> 00:14:20,330
If we take a quick look at the Pop-Up Editors, so the
Exception type Breakpoint has it own custom Pop-Up Editor

182
00:14:20,330 --> 00:14:23,330
where you can change the kind of exception.

183
00:14:23,330 --> 00:14:25,420
So by default, you're going to stop in all exceptions.

184
00:14:25,420 --> 00:14:29,450
But if you just want to stop on
Objective-C exceptions, you can do that.

185
00:14:29,450 --> 00:14:33,110
Or if you want to just stop on C++
exceptions, you can specify that.

186
00:14:33,110 --> 00:14:38,670
You can also specify whether we break when the
exception is thrown versus whether-when it's caught.

187
00:14:38,670 --> 00:14:41,140
So you have that choice as well.

188
00:14:41,140 --> 00:14:45,260
And you could also add actions to these breakpoints
just like you can with file type breakpoints.

189
00:14:45,260 --> 00:14:49,170
Here's what the Symbolic Breakpoint
Pop-Up Editor looks like.

190
00:14:49,170 --> 00:14:52,490
So you can put a function name in, you
don't have to know where that function is,

191
00:14:52,490 --> 00:14:55,340
we'll just stop anytime that function is called.

192
00:14:55,340 --> 00:15:01,140
This is a really nice type of breakpoint
to use in some cases.

193
00:15:01,140 --> 00:15:06,330
OK. So we've got-- I got that overview, a
flavor of what these components look like.

194
00:15:06,330 --> 00:15:11,470
Now, Hahn Ming is going to give us
a great demo of those components in action.

195
00:15:11,470 --> 00:15:11,890
Hahn Ming?

196
00:15:11,890 --> 00:15:11,990
[ Applause ]

197
00:15:11,990 --> 00:15:15,930
>> Hahn Ming Wong: Hi there.

198
00:15:15,930 --> 00:15:17,010
My name is Hahn Ming Wong.

199
00:15:17,010 --> 00:15:19,110
I'm one of Debugger UI Engineers.

200
00:15:19,110 --> 00:15:22,060
So a few words about the demo I'm going to do next.

201
00:15:22,060 --> 00:15:28,650
If you have been to our previous WWDC sessions, debugging
sessions, usually, we take a project, it has a bug in it,

202
00:15:28,650 --> 00:15:34,550
or rather, we introduce a bug in it, and then we bring to
bear all of Xcode Debugging Tools, and then we solve it,

203
00:15:34,550 --> 00:15:37,580
and all of you will applause, and
there would be world peace.

204
00:15:37,580 --> 00:15:40,840
But there will no world peace today.

205
00:15:40,840 --> 00:15:42,140
Not in my demo.

206
00:15:42,140 --> 00:15:49,580
Because we think Xcode 4 is so full of new, you know,
debugging UI and gestures that we think it's worth while

207
00:15:49,580 --> 00:15:55,460
to showcase to you the last two things that Ken
mentioned, so that when you play with it on your laptop,

208
00:15:55,460 --> 00:16:00,750
on your flight back home today, or you know, later on
in the lab, you'll have a better idea on how it works.

209
00:16:00,750 --> 00:16:02,460
I'm going to bring up the target.

210
00:16:02,460 --> 00:16:08,260
Whenever I refer to the target, although
inferior, because he is so superior,

211
00:16:08,260 --> 00:16:13,880
but the target is the application
that is under the debugging session.

212
00:16:13,880 --> 00:16:16,440
And surprise to say, today we're looking mipmap.

213
00:16:16,440 --> 00:16:19,240
You may have seen this in other demo sessions.

214
00:16:19,240 --> 00:16:27,450
It is an application that takes in a lot of large
images and shrink them down into small images.

215
00:16:27,450 --> 00:16:29,570
So I'm going to bring up the preferences.

216
00:16:29,570 --> 00:16:37,060
And you can see, what it does is it makes use of eitherGCD
or pthreads, you know, the two systems of threads

217
00:16:37,060 --> 00:16:42,110
on Mac OS X, and in this case, I'm choosing
pthreads first, and I'm going to make use

218
00:16:42,110 --> 00:16:46,700
of two course together where the scaling image work done.

219
00:16:46,700 --> 00:16:47,770
All righty.

220
00:16:47,770 --> 00:16:49,380
Let's-- OK.

221
00:16:49,380 --> 00:16:58,340
So let's go back to Xcode 4 now, and let's bring
up the Breakpoints Navigator that Ken talked about.

222
00:16:58,340 --> 00:17:04,380
Here, we have-- I already have two breakpoints
that I set early on that's disabled.

223
00:17:04,380 --> 00:17:08,850
So the Breakpoints Navigator is a central place
where you come and manage all the breakpoints

224
00:17:08,850 --> 00:17:11,840
that you have set early on, or going to set next.

225
00:17:11,840 --> 00:17:18,350
For some of you breakpoints collectors out there,
this is the place that you will visit quite often.

226
00:17:18,350 --> 00:17:25,240
So a navigator-- well, being a navigator, when you click
on it, will bring up the source code for this breakpoint

227
00:17:25,240 --> 00:17:30,130
and scroll to that line so that, you know,
you're sure you are breaking at the right line.

228
00:17:30,130 --> 00:17:33,750
So you know, when you double-click
on that, it brings out the editor,

229
00:17:33,750 --> 00:17:37,820
the little window for you to set conditions and what not.

230
00:17:37,820 --> 00:17:43,990
My favorite feature here is the fact that
I can easily set an Exception Breakpoint.

231
00:17:43,990 --> 00:17:46,450
In Xcode 3, you have to go through a couple of places.

232
00:17:46,450 --> 00:17:49,430
Now, you know, OK, the first time
is activating it, OK, great.

233
00:17:49,430 --> 00:17:50,630
There you go.

234
00:17:50,630 --> 00:17:56,930
Right. And setting the Exception Breakpoint is really
important, at least for me, because when there's Exception

235
00:17:56,930 --> 00:18:03,580
in your application, there is a problem, and you want to
catch it live because you have live stack frames for you

236
00:18:03,580 --> 00:18:06,250
to poke at, you know, variables for you to explore.

237
00:18:06,250 --> 00:18:11,220
So I really encourage you to just set it on and leave it
there, and this is what we're going to do for the demo.

238
00:18:11,220 --> 00:18:12,430
All right.

239
00:18:12,430 --> 00:18:14,480
Next thing-=-and we're almost ready to debug.

240
00:18:14,480 --> 00:18:21,610
So I'm going to enable this breakpoint right
here by either clicking on the icon here,

241
00:18:21,610 --> 00:18:27,890
or I can do it in the gutter, just
like what you can do in Xcode 3.

242
00:18:27,890 --> 00:18:31,950
OK. Let's go back to the target and I'm going to start.

243
00:18:31,950 --> 00:18:37,630
I can see that, like Ken mentioned, the Debug
Navigator is showing now, and I want you to--

244
00:18:37,630 --> 00:18:44,090
well, I want you to focus on the Debug Navigator
while I run a continue a couple of times,

245
00:18:44,090 --> 00:18:49,320
so that I get a feel of what this
multithreaded application is doing.

246
00:18:49,320 --> 00:18:53,530
It looks like it's sometimes alternating
between Thread 7 and Thread 8,

247
00:18:53,530 --> 00:18:56,110
and sometimes doing it twice in one of the threads.

248
00:18:56,110 --> 00:18:58,800
This is Multithreaded Debug application running.

249
00:18:58,800 --> 00:19:02,230
So a little bit of it-- or a lot of it is unpredictable.

250
00:19:02,230 --> 00:19:06,060
So we are capturing a snapshot of
it and giving you a live view of it.

251
00:19:06,060 --> 00:19:11,520
Let's see what I can get into a state
where sometimes, it will-- maybe not.

252
00:19:11,520 --> 00:19:15,690
OK. Sometimes, what happen is it
will stop in Thread 8 twice.

253
00:19:15,690 --> 00:19:20,480
And in the Editor, you'll see a little
annotation like the numbers of threads

254
00:19:20,480 --> 00:19:23,330
that are now currently stopped in this Breakpoint.

255
00:19:23,330 --> 00:19:24,900
Again, we take a snapshot of it.

256
00:19:24,900 --> 00:19:27,430
I cannot control what the computer does, so you know.

257
00:19:27,430 --> 00:19:30,830
So again Thread 7 and Thread 8 are showing.

258
00:19:30,830 --> 00:19:35,390
Now, if you remember, Xcode 3, those of you who's have been
using for a little while, there's a little pop-up there,

259
00:19:35,390 --> 00:19:39,860
and you have to enumerate through each
of the threads and show the stack frames.

260
00:19:39,860 --> 00:19:43,950
By the time you're looking at thread
frame 1, you forgot what thread-- sorry.

261
00:19:43,950 --> 00:19:47,880
Thread 1, you forgot what Thread 8, you know, is doing.

262
00:19:47,880 --> 00:19:51,250
Here, we're giving you everything so you can look at it.

263
00:19:51,250 --> 00:19:57,810
However, because we are giving you a lot of stuff, you
know, some of you were comfortable with drinking water

264
00:19:57,810 --> 00:20:00,350
out of a fire hydrant, more power to you.

265
00:20:00,350 --> 00:20:07,610
But the truth is, you know, some of these stack frames may
not be that useful to you right now because you're trying

266
00:20:07,610 --> 00:20:11,040
to figure out why this thing is not working well.

267
00:20:11,040 --> 00:20:13,030
This-- OK.

268
00:20:13,030 --> 00:20:19,320
Again, if you can read this, I hope, like a book, you
know, you're great, but I prefer to focus on my own code.

269
00:20:19,320 --> 00:20:21,650
So again, I'm going to switch back to Thread 7,

270
00:20:21,650 --> 00:20:30,920
the stack frame zero to stack frame
7, these are system frameworks code.

271
00:20:30,920 --> 00:20:34,430
So that's why we have some filters at the
bottom here that can help you out with that.

272
00:20:34,430 --> 00:20:40,540
The first one is the Stack Frame Compression Filter, and
it is-- now, it is scrubbed all the way to the right.

273
00:20:40,540 --> 00:20:42,400
It means, it's showing you everything.

274
00:20:42,400 --> 00:20:47,460
But you start scrubbing to the left, we start
compressing based on setting heuristics.

275
00:20:47,460 --> 00:20:52,600
If you have feedback on the heuristics, follow--
and ends when request, and we'll look at it.

276
00:20:52,600 --> 00:20:56,210
So we can see that zero to seven have been compressed down.

277
00:20:56,210 --> 00:20:59,690
Now, those of you who are doing UIKit or AppKit, sometimes,

278
00:20:59,690 --> 00:21:04,640
the compression could be really great
because it's from one to, you know, 80.

279
00:21:04,640 --> 00:21:09,310
We still show you the entry and the
exit frame to give you in a context.

280
00:21:09,310 --> 00:21:11,950
And now, we are left with your code.

281
00:21:11,950 --> 00:21:20,550
The reason why it's your code is because there's a batch
showing with your face on it, so-- and then the project is--

282
00:21:20,550 --> 00:21:25,610
the source code is a file in a workspace.

283
00:21:25,610 --> 00:21:31,180
OK, and the other button, Filter
Button is the Thread Filter button.

284
00:21:31,180 --> 00:21:32,700
I'm going to toggle and untoggle it.

285
00:21:32,700 --> 00:21:35,120
And again, pay attention to the Debug Navigator.

286
00:21:35,120 --> 00:21:36,070
All right.

287
00:21:36,070 --> 00:21:40,670
It looks like Thread 2 disappears, and if we open it-- OK.

288
00:21:40,670 --> 00:21:42,960
So this is the libdispatch-manager thread.

289
00:21:42,960 --> 00:21:50,500
So unless you are a libdispatch engineer,
you're probably not too interested in that.

290
00:21:50,500 --> 00:21:52,790
So we usually-- sorry.

291
00:21:52,790 --> 00:21:56,690
In this case, so we-- when you toggle,
the Thread Filter button is gone.

292
00:21:56,690 --> 00:22:02,750
So we can see that while we're presenting you more
information, we are presenting you a concise view of it.

293
00:22:02,750 --> 00:22:08,620
A little oxymoronic, but if you play with it, I
think you'll appreciate how it actually works.

294
00:22:08,620 --> 00:22:14,690
I'm going to go back to the Breakpoint
Navigator and disable the breakpoint.

295
00:22:14,690 --> 00:22:18,140
I'll continue and go back to the Target Application.

296
00:22:18,140 --> 00:22:22,490
Because the next thing I want to do is to make use of GCD.

297
00:22:22,490 --> 00:22:26,360
This is not a GCD session, so I won't
get too deep into it, but essentially,

298
00:22:26,360 --> 00:22:31,400
it is a very elastic way of helping
you with a multithreaded job.

299
00:22:31,400 --> 00:22:37,960
It spawns off as many threads as it thinks when the
system is not under a load, so that in this case,

300
00:22:37,960 --> 00:22:41,640
it will help you with your scaling image work.

301
00:22:41,640 --> 00:22:44,990
I'm going to switch-- I'll limit it on currency.

302
00:22:44,990 --> 00:22:45,940
All right.

303
00:22:45,940 --> 00:22:52,540
So we enable the breakpoint, and let's
switch back to the target and start.

304
00:22:52,540 --> 00:22:58,270
So a similar thing will happen, if you like it, I'll stop.

305
00:22:58,270 --> 00:23:06,680
OK. I'm going to-- again, I'm going to run--
well, let me show all threads, All right.

306
00:23:06,680 --> 00:23:10,230
I'm going to run a few times, so that you have a feel of it.

307
00:23:10,230 --> 00:23:13,180
The thing about GCD again, you can see
it's spawning more and more threads

308
00:23:13,180 --> 00:23:17,670
because I'm not running iTunes,
I'm not running Flash and Safari.

309
00:23:17,670 --> 00:23:18,660
So the system is OK.

310
00:23:18,660 --> 00:23:20,060
I'm just doing demo.

311
00:23:20,060 --> 00:23:22,730
So you know, it's spawning more and
more threads to help with me my work.

312
00:23:22,730 --> 00:23:30,370
But as you can see when I'm working GCD, when I have
more threads, there's a lot more information coming

313
00:23:30,370 --> 00:23:35,630
in which is why we think when you're working
with GCD, if you look at it by queue view,

314
00:23:35,630 --> 00:23:41,120
it may help you a little bit more because
we organized the threads into queues.

315
00:23:41,120 --> 00:23:42,460
We put them into queues.

316
00:23:42,460 --> 00:23:44,770
Let's look at-- quickly look at some of the queues.

317
00:23:44,770 --> 00:23:50,770
This is the main queue, named the Main
Thread, and this is Dispatch Manager Queue,

318
00:23:50,770 --> 00:23:53,680
and there are two concurrent queues
that are being used right now.

319
00:23:53,680 --> 00:24:00,180
GCD has three concurrent queues; the high priority,
the default priority, and the low priority.

320
00:24:00,180 --> 00:24:07,960
The default priority has one thread, and this just happens
to be the Image Processor Controller Thread that is

321
00:24:07,960 --> 00:24:12,080
in the default queue, and the developer
of this application is pretty smart

322
00:24:12,080 --> 00:24:16,740
to put all the scaling work into the low priority queue.

323
00:24:16,740 --> 00:24:22,880
So we can see that-- and then we have a thread over here.

324
00:24:22,880 --> 00:24:25,880
What that just means is this thread--
let's look at it actually.

325
00:24:25,880 --> 00:24:30,700
OK. It's just a worker thread has been spawned off,
but it has not been put into one of the queues.

326
00:24:30,700 --> 00:24:35,120
If you toggle this button, it will
go away because it's not interesting.

327
00:24:35,120 --> 00:24:38,350
And with that, I'm going to hand you back to Ken.

328
00:24:38,350 --> 00:24:38,700
Thank you.

329
00:24:38,700 --> 00:24:40,430
>> Ken Orr: Great.

330
00:24:40,430 --> 00:24:45,310
So let's a take a quick tour of the Variables View now.

331
00:24:45,310 --> 00:24:51,050
Here's what it looks like, and of course, it shows us all
our variables that are available on a current line of code.

332
00:24:51,050 --> 00:24:54,590
So by default, you're going to see
all the variables in local scope.

333
00:24:54,590 --> 00:24:57,670
Now, that can be a rather long list.

334
00:24:57,670 --> 00:25:02,570
So here, it's pretty long, but
it can get a lot worse than this.

335
00:25:02,570 --> 00:25:08,630
And like I said before, I want the UI
to help me see what it is I need to see.

336
00:25:08,630 --> 00:25:13,490
And in Xcode 4, we can do that by using this new View Mode.

337
00:25:13,490 --> 00:25:17,980
So, if you look up here, we have this View
Mode, and you can toggle that to auto.

338
00:25:17,980 --> 00:25:21,280
And what Xcode is going to do is it's going to say, "OK.

339
00:25:21,280 --> 00:25:23,450
Here's the line of code you stopped at.

340
00:25:23,450 --> 00:25:25,570
What are the variables around that line of code?"

341
00:25:25,570 --> 00:25:30,740
It's just going to look before, it's going to look after,
and it's going to figure out which things are changing.

342
00:25:30,740 --> 00:25:34,930
And so, probably, those are the
things that you need to see right now.

343
00:25:34,930 --> 00:25:39,090
And so, that helps us whittle down this list a little bit.

344
00:25:39,090 --> 00:25:39,740
And that's great.

345
00:25:39,740 --> 00:25:42,250
And so, we still have 6 things here.

346
00:25:42,250 --> 00:25:47,000
We can probably do better if we jump
over here and use the filter bar.

347
00:25:47,000 --> 00:25:50,630
So as you might guess, the filter bar, you
can type a variable name, and of course,

348
00:25:50,630 --> 00:25:54,280
that will filter out everything without that variable name.

349
00:25:54,280 --> 00:25:57,650
But what's more powerful about the
Variables View here in the filter bar is

350
00:25:57,650 --> 00:26:00,930
that you can actually type in a variable value.

351
00:26:00,930 --> 00:26:08,310
So I've typed in document.graphics, and it turns out
that these two variables have that in their value.

352
00:26:08,310 --> 00:26:13,060
So this is a very powerful way to look into your variables.

353
00:26:13,060 --> 00:26:19,370
Also, the Variables View is the launching
point for the new Memory Browser.

354
00:26:19,370 --> 00:26:24,360
So the Memory Browser has a completely new UI, and
you can get to it by right-clicking on a variable,

355
00:26:24,360 --> 00:26:30,750
and then you go down and select view
memory, and that will take us here.

356
00:26:30,750 --> 00:26:34,610
So we'll see the new Memory Browser
open up in the editor area.

357
00:26:34,610 --> 00:26:38,360
So that's that central area where you're working.

358
00:26:38,360 --> 00:26:44,560
And if we take a little bit closer look, so we can see
it has a completely new UI, and one of the nice features

359
00:26:44,560 --> 00:26:49,800
about the new Memory Browser is that as you select
things in the center, so you're selecting the hex,

360
00:26:49,800 --> 00:26:52,370
will track the selection on the right and the left.

361
00:26:52,370 --> 00:26:56,850
So we'll show you which addresses correspond
to that, we'll show you what the ASCII version

362
00:26:56,850 --> 00:26:59,580
of that hex you have selected is as well.

363
00:26:59,580 --> 00:27:03,040
Of course, you can type the memory
address in and then page through memory

364
00:27:03,040 --> 00:27:06,200
so you can look at any pieces of memory that you want.

365
00:27:06,200 --> 00:27:09,820
That's a really powerful way to look at your data.

366
00:27:09,820 --> 00:27:13,130
And now, Hahn Ming is going to give us a quick demo of that.

367
00:27:13,130 --> 00:27:13,730
>> Hahn Ming Wong: Hi.

368
00:27:13,730 --> 00:27:18,830
I'm back. Welcome back to the third half of the demo.

369
00:27:18,830 --> 00:27:22,860
So this part here, I'm supposed
to show you the Variables View.

370
00:27:22,860 --> 00:27:23,950
All righty.

371
00:27:23,950 --> 00:27:33,850
So I'm going to start, and I have re-enabled the
breakpoint that is in the image processor file that I talked

372
00:27:33,850 --> 00:27:39,120
about earlier, the one that was
in the default priority queue.

373
00:27:39,120 --> 00:27:47,550
So I'm paused right now, and you can see in the Variables
View, like Ken said, I'm showing you a list of variables.

374
00:27:47,550 --> 00:27:54,840
It started in alphabetical order, but it's still a long
list, you know, and which is why the filter comes in handy.

375
00:27:54,840 --> 00:27:59,110
What I want to know is the thumb size nail to
make sure I'm scaling down to the right size.

376
00:27:59,110 --> 00:28:02,680
So I can nail the size-- there you, go size 48, yeah.

377
00:28:02,680 --> 00:28:03,720
That's what I want.

378
00:28:03,720 --> 00:28:10,430
That's still eight characters too many for me because
I'm derived user typing on a freaking standard keyboard.

379
00:28:10,430 --> 00:28:15,070
What I really want is the auto-view.

380
00:28:15,070 --> 00:28:19,010
So I switched to that, what it's doing
again, is using heuristics to find

381
00:28:19,010 --> 00:28:22,300
out all the relevant variables for this PC.

382
00:28:22,300 --> 00:28:23,860
In this case, it's showing four.

383
00:28:23,860 --> 00:28:25,420
Or sometimes, it's shows five.

384
00:28:25,420 --> 00:28:29,040
I can deal with four or five, and it's right here 48.

385
00:28:29,040 --> 00:28:32,400
And without typing in anything,
it helps you streamline a workflow

386
00:28:32,400 --> 00:28:35,690
to find the relevant information,
even though there's a lot of it.

387
00:28:35,690 --> 00:28:39,820
And last thing before I hand you back to Ken
is this is the-- on the right hand side--

388
00:28:39,820 --> 00:28:45,140
on your right is the console area
where you interact with the debugger.

389
00:28:45,140 --> 00:28:49,660
I won't talk too much about it, except the fact
that I'm using LLDB for my debugging needs.

390
00:28:49,660 --> 00:28:52,790
If it didn't crash for me, it will not crash for you.

391
00:28:52,790 --> 00:28:55,880
So go use it and file backs when you find it.

392
00:28:55,880 --> 00:28:57,570
Thank you very much.

393
00:28:57,570 --> 00:28:57,850
>> Ken Orr: OK.

394
00:28:57,850 --> 00:29:02,660
So, so far what we've look at is we looked
at the Core UIComponents that you're going

395
00:29:02,660 --> 00:29:05,130
to be using every day when you're debugging.

396
00:29:05,130 --> 00:29:08,950
But what I'm want to do now is I want to show
you kind of a few things, maybe on the periphery,

397
00:29:08,950 --> 00:29:15,750
that is you get more comfortable with Xcode 4, you'll
discover these features and maybe try them out.

398
00:29:15,750 --> 00:29:20,190
So the first one I want to show
you is the Floating Debugger.

399
00:29:20,190 --> 00:29:25,730
So the Floating Debugger is very useful
if you're debugging graphics code.

400
00:29:25,730 --> 00:29:31,600
So if you have overridden a draw method
and you want to debug through that,

401
00:29:31,600 --> 00:29:35,920
what you don't want to happen is you don't want to
click on Xcode and you don't want to become activated

402
00:29:35,920 --> 00:29:38,440
because that causes events to go your app.

403
00:29:38,440 --> 00:29:41,230
And when you activate your app,
it's going to cause more events,

404
00:29:41,230 --> 00:29:44,470
and drawing is going to happen and that's not what you want.

405
00:29:44,470 --> 00:29:50,940
You want Xcode to stay on top, and you
want it to not get these activation events.

406
00:29:50,940 --> 00:29:54,720
And you can do that by selecting this Xcode Infront option.

407
00:29:54,720 --> 00:30:00,210
And when you do-- when you select that, Xcode will shrink
down to this little-- it's like a palette-type window,

408
00:30:00,210 --> 00:30:04,740
and it always stays on top, and it won't
ever take-- it won't ever steal focus.

409
00:30:04,740 --> 00:30:11,190
So it will stay in this light gray tool bar mode.

410
00:30:11,190 --> 00:30:16,450
But it turns outs that sometimes,
maybe you do want to give it focus.

411
00:30:16,450 --> 00:30:20,110
So, you're debugging along, you're
looking at your drawing code, and now,

412
00:30:20,110 --> 00:30:23,090
you want to look at the value of a particular variable.

413
00:30:23,090 --> 00:30:26,320
Something's gone wrong, you want to print that out.

414
00:30:26,320 --> 00:30:29,190
In Xcode 4, you can actually do that now.

415
00:30:29,190 --> 00:30:30,350
So you can say, "OK.

416
00:30:30,350 --> 00:30:30,910
I'm ready.

417
00:30:30,910 --> 00:30:35,080
I want Xcode 4 to get keyboard focus
in this Floating Debugger mode."

418
00:30:35,080 --> 00:30:39,470
And you indicate that by clicking
on this little keyboard icon.

419
00:30:39,470 --> 00:30:44,610
And when you click on that icon, you
can also click on the Console button

420
00:30:44,610 --> 00:30:48,020
which will show you the console,
and now, you can type in here.

421
00:30:48,020 --> 00:30:51,780
While it's still on the small mini
mode, you can print out your variable

422
00:30:51,780 --> 00:30:53,490
or do whatever it is you want to do from the console.

423
00:30:53,490 --> 00:31:00,950
Of course, you can always leave the console up
when you have Xcode in the don't-activate-me mode,

424
00:31:00,950 --> 00:31:04,240
and you can look at print outs or various other things.

425
00:31:04,240 --> 00:31:10,730
But when you use these two things in conjunction,
it gives you that power that you haven't had before.

426
00:31:10,730 --> 00:31:13,370
So that's a Floating Debugger.

427
00:31:13,370 --> 00:31:18,900
Another thing we have to show you
is this new Schemes concept.

428
00:31:18,900 --> 00:31:20,400
So what are Schemes?

429
00:31:20,400 --> 00:31:26,870
Schemes are everything about building,
testing and launching your application.

430
00:31:26,870 --> 00:31:32,580
And it's all in this nice neat package,
in this nice sheet that will slide

431
00:31:32,580 --> 00:31:36,050
down when we option click on the Play button.

432
00:31:36,050 --> 00:31:39,060
So here's what that sheet looks like.

433
00:31:39,060 --> 00:31:43,650
And from that sheet, we can do things
like we can select a new debugger.

434
00:31:43,650 --> 00:31:48,180
So if you want to try out LLDB,
you can do that right from here.

435
00:31:48,180 --> 00:31:50,320
If we switch to the Arguments tab, this is where you--

436
00:31:50,320 --> 00:31:54,900
if you want to pass an argument to your
application, you can do that right from the sheet.

437
00:31:54,900 --> 00:31:58,410
You can also set environment variables.

438
00:31:58,410 --> 00:32:05,200
If we go all the way to the right, to the Logging
tab, this is where we now expose some features

439
00:32:05,200 --> 00:32:09,220
that were hidden before behind environment variables.

440
00:32:09,220 --> 00:32:13,910
So things like Guard Mallet, some of
the more advanced logging features.

441
00:32:13,910 --> 00:32:18,090
Now, you can just click on the check
box and turn that functionality on.

442
00:32:18,090 --> 00:32:20,850
So it's really easy to get at that functionality.

443
00:32:20,850 --> 00:32:22,340
All right.

444
00:32:23,630 --> 00:32:26,970
Before we wrap up, I want to show you a few things

445
00:32:26,970 --> 00:32:31,750
that will maybe make Xcode 4 a little
more fun for you to use every day.

446
00:32:31,750 --> 00:32:36,140
The first one is now you can set
all the colors in the console.

447
00:32:36,140 --> 00:32:40,700
So before, you've been able to set the text colors,
hadn't been able to set the background color.

448
00:32:40,700 --> 00:32:42,930
Now, you can set all that stuff.

449
00:32:42,930 --> 00:32:46,500
We'll track the theme that you have selected.

450
00:32:46,500 --> 00:32:51,520
So if you want to choose like a dark theme,
we'll track those colors in the console for you.

451
00:32:51,520 --> 00:32:56,030
So, yeah. This feature is especially useful if
you're one of those people that likes the dark theme.

452
00:32:56,030 --> 00:33:04,450
Another thing that we've added is you can
actually get at-- the history of old runs.

453
00:33:04,450 --> 00:33:10,440
So you want to see the output from a previous run,
you can do that now by going to the Log Navigator.

454
00:33:10,440 --> 00:33:13,250
It's that navigator with that little button there.

455
00:33:13,250 --> 00:33:17,250
And you can see two runs ago, you can
look at an exception that occurred,

456
00:33:17,250 --> 00:33:19,510
and you don't have to go try to recreate that exception.

457
00:33:19,510 --> 00:33:21,860
You can just go back to that previous run and see it.

458
00:33:21,860 --> 00:33:23,630
So that's a big time saver.

459
00:33:23,630 --> 00:33:30,510
And finally, this is probably the most
powerful feature I think in Xcode 4,

460
00:33:30,510 --> 00:33:34,060
and it's my most favorite feature,
and this is what I alluded to earlier.

461
00:33:34,060 --> 00:33:37,030
This is the Alert System in Xcode 4.

462
00:33:37,030 --> 00:33:41,570
So you can actually control the
way Xcode behaves a little bit.

463
00:33:41,570 --> 00:33:45,220
So when system events occur, you can
say, I want such and such to happen.

464
00:33:45,220 --> 00:33:49,610
So when you hit a breakpoint for
example, so that's that run pause.

465
00:33:49,610 --> 00:33:52,510
By default, we're going to show you the debugger.

466
00:33:52,510 --> 00:33:54,010
Well, you can have other things happen.

467
00:33:54,010 --> 00:34:01,050
If you want to play a sound or show a bezel alert, or
just run some generic AppleScript, you can do all that.

468
00:34:01,050 --> 00:34:06,320
Now you can make Xcode work around
you, make it work the way you work.

469
00:34:06,320 --> 00:34:09,730
So that's why I think this is such a
powerful feature, such a great feature.

470
00:34:09,730 --> 00:34:14,050
OK. So that's Xcode 4.

471
00:34:14,050 --> 00:34:16,900
That's the smooth new debugging experience.

472
00:34:16,900 --> 00:34:17,850
I hope you've enjoyed that.

473
00:34:17,850 --> 00:34:20,620
We, of course, encourage you to go download it.

474
00:34:20,620 --> 00:34:23,130
If you haven't already, go download it, try it out.

475
00:34:23,130 --> 00:34:24,470
We want you to submit bugs.

476
00:34:24,470 --> 00:34:25,600
We want to see the bugs.

477
00:34:25,600 --> 00:34:30,680
But we also want to see how the useability
is for you, how the new workflow is.

478
00:34:30,680 --> 00:34:35,250
So if you can submit bugs including
that information as well.

479
00:34:35,250 --> 00:34:37,490
And of course, you can download it right there.

480
00:34:37,490 --> 00:34:48,610
And with that, I will turn it over to Greg
Clayton, who's going to talk to about LLDB.

481
00:34:48,610 --> 00:34:49,300
Well, Thank you.

482
00:34:49,300 --> 00:34:49,360
[ Applause ]

483
00:34:49,360 --> 00:34:49,610
>> Greg Clayton: All right.

484
00:34:49,610 --> 00:34:50,440
Thanks, Ken.

485
00:34:50,440 --> 00:34:54,800
Now that you guys have seen some of the great things
that the engineers have been working on the Xcode UI,

486
00:34:54,800 --> 00:34:59,210
let's take a little look of what
we've been working on under covers.

487
00:34:59,210 --> 00:35:03,500
Talk about a little bit what I'm going to go over today.

488
00:35:03,500 --> 00:35:06,150
LLDB? Why did we write a new debugger?

489
00:35:06,150 --> 00:35:13,000
What are some of the details about the debugger
and give a little overview of the architecture.

490
00:35:13,000 --> 00:35:15,760
We'll give you a brief demo and then we'll wrap things up.

491
00:35:15,760 --> 00:35:20,220
So to start off, we want to talk about why we wrote LLDB.

492
00:35:20,220 --> 00:35:23,130
We wanted to concentrate on 5 key things.

493
00:35:23,130 --> 00:35:25,540
First and foremost was speed.

494
00:35:25,540 --> 00:35:31,380
We also want to make sure that we're efficient with the
memory resources that we take up while we're running

495
00:35:31,380 --> 00:35:35,300
and then talk about how we can be more
accurate when it comes to setting breakpoints,

496
00:35:35,300 --> 00:35:39,710
evaluating your expressions and
just overall debugging experience.

497
00:35:39,710 --> 00:35:45,300
And we designed things that they're extensible so in
the future we can kind of keep up with a lot of things

498
00:35:45,300 --> 00:35:47,480
that you know, a lot of the different
targets that we're moving on to.

499
00:35:47,480 --> 00:35:49,000
We currently have desktop.

500
00:35:49,000 --> 00:35:51,140
We've got iPhone, got iPad.

501
00:35:51,140 --> 00:35:54,720
Who knows what we have in the future
and we want to be ready for it.

502
00:35:54,720 --> 00:35:56,910
And we also want to make sure that we can reuse our code.

503
00:35:56,910 --> 00:36:00,380
We put a lot of work over the years into GDB.

504
00:36:00,380 --> 00:36:06,540
GDB has been, you know served us very well but when one of
the unfortunate consequences is we can't share that code.

505
00:36:06,540 --> 00:36:11,220
It's in a command line utility and we
can't use that for other developer tools.

506
00:36:11,220 --> 00:36:16,180
So we'll talk about-expand on that a little bit and
we'll go over a little bit about the architecture.

507
00:36:16,180 --> 00:36:20,460
LLDB is a framework that can be used of course from Xcode 4.

508
00:36:20,460 --> 00:36:23,430
You've seen the debugging screens a little bit, so far.

509
00:36:23,430 --> 00:36:30,340
We also for the people who prefer not to do command line
debugging or who prefer not to debug in the UI but prefer

510
00:36:30,340 --> 00:36:32,590
to be in the command line, we've
got an LLDB Command Line Tool.

511
00:36:32,590 --> 00:36:34,380
I'll talk about that in a little bit.

512
00:36:34,380 --> 00:36:37,190
And we also have Scripting Interface.

513
00:36:37,190 --> 00:36:42,120
These all have access to the entire API inside of LLDB.

514
00:36:42,120 --> 00:36:46,940
And of course, under the hood, we've got the Core of LLDB
which has got a lot of plug-ins and a lot of these things

515
00:36:46,940 --> 00:36:52,620
that you guys don't need to worry about but it
kind of goes back to the modularity of the design.

516
00:36:52,620 --> 00:36:56,170
Next, we'll talk about performance.

517
00:36:56,170 --> 00:36:59,870
One of the big problems that we've got in
debuggers is there's a lot of information.

518
00:36:59,870 --> 00:37:01,170
You guys have simple files.

519
00:37:01,170 --> 00:37:06,450
You have a lot of information that we need to index
and archive and look up in a variety of different ways,

520
00:37:06,450 --> 00:37:11,360
looking up things by address, looking up things
by file line or looking up things by name.

521
00:37:11,360 --> 00:37:15,780
We want to make sure that we index that
information appropriately and make sure

522
00:37:15,780 --> 00:37:20,500
that we can access everything and do it in a speedy fashion.

523
00:37:20,500 --> 00:37:27,700
And the modularity of the design allows us to kind of use
the multiple threads that you've got in your desktop core

524
00:37:27,700 --> 00:37:33,240
by spawning new threads to index
the information a little quicker.

525
00:37:33,240 --> 00:37:37,650
Efficiency is one of the big things that we
want to make sure that we're not taking too much

526
00:37:37,650 --> 00:37:40,610
of the memory when we parse up this information.

527
00:37:40,610 --> 00:37:42,830
We do that by parsing the information a little smarter.

528
00:37:42,830 --> 00:37:49,460
We want to make sure that when we ingest parts of
the debug information we don't parse it all up front.

529
00:37:49,460 --> 00:37:51,360
We like to call it Don't Ask, Don't Parse.

530
00:37:51,360 --> 00:37:55,160
If we don't need to know the information
we won't go off and track it down.

531
00:37:55,160 --> 00:37:58,410
And also we try and parse the information
to finer granularity.

532
00:37:58,410 --> 00:38:01,910
It means, if we can go down to access information

533
00:38:01,910 --> 00:38:05,470
about single functions we don't
have to ingest large chunks of data.

534
00:38:05,470 --> 00:38:09,880
That helps us keep our memory footprint
down and keeps our performance up.

535
00:38:09,880 --> 00:38:14,320
We also think that we can do a great
job with Multithreaded Debugging.

536
00:38:14,320 --> 00:38:19,180
Today's cores have got, or today's machines have
got a lot of CPUs and as we go into the future,

537
00:38:19,180 --> 00:38:22,430
there's just going to be more and
more threads to worry about.

538
00:38:22,430 --> 00:38:27,540
So, we ought to be better at showing you exactly
what your threads are up to and why they stopped.

539
00:38:27,540 --> 00:38:34,020
And per-thread states help us show you
exactly what every thread was up to.

540
00:38:34,020 --> 00:38:40,550
In GDB, GDB like to have a notion that there's one reason
that your program has stopped and oftentimes in reality,

541
00:38:40,550 --> 00:38:44,630
your program can hit a lot of breakpoints
- another thread might throw an exception.

542
00:38:44,630 --> 00:38:48,820
We want to make sure that we're able
to convey that information to you.

543
00:38:48,820 --> 00:38:53,170
Also, controlling threads individually
is another thing that we concentrated on.

544
00:38:53,170 --> 00:38:58,980
We want to make sure that we can of course suspend and
resume threads as well as do complex control actions

545
00:38:58,980 --> 00:39:04,290
with your threads such as stepping in, stepping
out and stepping over your source code.

546
00:39:04,290 --> 00:39:09,870
If you run and hit a breakpoint at one location
and in some section of code and then you run,

547
00:39:09,870 --> 00:39:13,710
you're stepping over the source line
and eventually end up somewhere else.

548
00:39:13,710 --> 00:39:17,640
Well, you're kind of interested in the first task
that you were doing but you also stops somewhere else

549
00:39:17,640 --> 00:39:20,970
because you set a breakpoint there and you
obviously wanted to stop and take a look around.

550
00:39:20,970 --> 00:39:25,510
We want to make sure that the actions such as
the stepping that you are doing are stackable.

551
00:39:25,510 --> 00:39:28,330
So, you stop one place, you end up somewhere else.

552
00:39:28,330 --> 00:39:33,250
You step around and when you resume, you can kind of
get back to that initial step that you were doing.

553
00:39:33,250 --> 00:39:39,320
This kind of helps multithreaded
debugging workflow a little easier.

554
00:39:39,320 --> 00:39:43,520
Compiler integration was an important
thing that we wanted to concentrate on.

555
00:39:43,520 --> 00:39:45,900
We'll talk a little bit about why.

556
00:39:45,900 --> 00:39:52,100
First off, a lot of debuggers go out and
invent their own functions and their own types

557
00:39:52,100 --> 00:39:53,990
and their own variables, and this is great.

558
00:39:53,990 --> 00:39:58,490
That's their internal representation then
they take that internal representation

559
00:39:58,490 --> 00:40:02,030
and make an expression parser based off of it.

560
00:40:02,030 --> 00:40:06,190
Well, one big chunk of work that we didn't want to
do in the debugger was write an expression parser.

561
00:40:06,190 --> 00:40:11,010
We happen to think the compilers are a
little better at the job than we can be.

562
00:40:11,010 --> 00:40:14,460
So we decided to integrate with LLVM.

563
00:40:14,460 --> 00:40:16,270
So how do we do that?

564
00:40:16,270 --> 00:40:21,990
First off, we start up by, when we're parsing through debug
information we translate everything into an internal format

565
00:40:21,990 --> 00:40:26,560
that matches exactly what Clang
and the LLVM tool chain wants.

566
00:40:26,560 --> 00:40:28,300
How does that help us?

567
00:40:28,300 --> 00:40:31,060
Well, we can let Clang do the expression parsing for us.

568
00:40:31,060 --> 00:40:41,170
We already have everything in the exact format that LLVM and
Clang needs and they can definitely parse the information

569
00:40:41,170 --> 00:40:47,730
and give us better and more accurate language support for
all the variety of languages that they currently support.

570
00:40:47,730 --> 00:40:52,890
And also the errors that you're used to seeing
up in the Xcode UI will be very familiar to you.

571
00:40:52,890 --> 00:40:59,680
You'll get those same errors back when you write
an expression that's got some issues with it.

572
00:40:59,680 --> 00:41:01,930
The new compiler features have come out.

573
00:41:01,930 --> 00:41:03,390
We automatically get to support them.

574
00:41:03,390 --> 00:41:04,590
We update our sources.

575
00:41:04,590 --> 00:41:08,560
We kind of-- we get-- you know, for example, we've come
up with block support over the past couple of years

576
00:41:08,560 --> 00:41:11,370
and I'm sure there are many features
that are in the compiler.

577
00:41:11,370 --> 00:41:16,980
We don't need to be worried in the debugger group about
re-implementing something that's already been done for us.

578
00:41:16,980 --> 00:41:21,200
And one of the exciting things,
too, is Just in Time Compilation.

579
00:41:21,200 --> 00:41:26,810
When we parse up these expressions, they're in a format that
are ready to be ingested and compiled up into little chunks

580
00:41:26,810 --> 00:41:29,170
of code that we can put down in your program.

581
00:41:29,170 --> 00:41:37,300
We currently have a few uses for those right now in stepping
and other things that aren't anything that users tend to see

582
00:41:37,300 --> 00:41:39,460
but something that's happening behind the scenes.

583
00:41:39,460 --> 00:41:43,630
Stepping into Objective-C functions is
one of the things that's hard for us.

584
00:41:43,630 --> 00:41:46,540
Doesn't seem like much to the average user.

585
00:41:46,540 --> 00:41:49,720
But we also want to be able to take
advantage of jigging up some code.

586
00:41:49,720 --> 00:41:53,940
Maybe taking a snippet of code, downloading
it down to the target and being able to run

587
00:41:53,940 --> 00:41:57,990
that for say data formatters or
injecting code into your application.

588
00:41:57,990 --> 00:42:02,380
There's a whole variety of uses that we haven't
touched on yet but we'd love to get to in the future.

589
00:42:02,380 --> 00:42:06,550
We also want to make sure that
everything in LLDB was scriptable.

590
00:42:06,550 --> 00:42:08,200
This kind of goes back to reuse.

591
00:42:08,200 --> 00:42:10,530
We've got a debugger UI plug-in.

592
00:42:10,530 --> 00:42:15,130
We've got a command line and we can
also access things through Python.

593
00:42:15,130 --> 00:42:20,940
We made our APIs such that they're very easy
to hand off to some of the script interpreters.

594
00:42:20,940 --> 00:42:28,900
The Script Interpreter Tool such as SWIG that allows
us to give you guys the full access to the LLDB API.

595
00:42:28,900 --> 00:42:35,090
So from Python, you can start up the target, you can set
some breakpoints, you can run, it can help you do things

596
00:42:35,090 --> 00:42:43,750
for unit testing and a lot of other, and also for accessing
all of your debug session internals while you're running.

597
00:42:43,750 --> 00:42:45,660
So Python access where it's available from.

598
00:42:45,660 --> 00:42:50,750
Well, we've got a command line tool, LLDB which
can be started up and you type the script command,

599
00:42:50,750 --> 00:42:53,880
it drops you into the Python Scripting Interpreter.

600
00:42:53,880 --> 00:42:57,210
We also have-- we can also access it through Python.

601
00:42:57,210 --> 00:43:04,260
If we point Python into the directory that contains our
LLDB module, start up Python and tell it to import LLDB.

602
00:43:04,260 --> 00:43:09,060
We can then program using the API in there.

603
00:43:09,060 --> 00:43:14,100
We also have access to it through the debugger console
which is again, just the LLDB command line that you saw

604
00:43:14,100 --> 00:43:18,130
in Hahn Ming's demo and you've got
access to the script command there.

605
00:43:18,130 --> 00:43:20,920
You also have the ability to attach scripts to breakpoints.

606
00:43:20,920 --> 00:43:27,560
So, if we set a breakpoint in LLDB and then attach
a script to it using the breakpoint command add,

607
00:43:27,560 --> 00:43:30,620
you can add Python scripting to a breakpoint.

608
00:43:30,620 --> 00:43:32,770
And why would you want to do this?

609
00:43:32,770 --> 00:43:36,350
Well, if you stop somewhere, if you wanted
to look up at the stack frames above you

610
00:43:36,350 --> 00:43:42,210
and see if the function name was the same or match the name
of the function that you think that was causing your issue,

611
00:43:42,210 --> 00:43:46,770
you now have programmatic access to be able to kind
of navigate around your processes, your threads,

612
00:43:46,770 --> 00:43:53,080
your frames and any of the variables
so that's scriptability.

613
00:43:53,080 --> 00:43:57,260
Breakpoint Resolution, we want to make sure
we concentrated on setting your breakpoints.

614
00:43:57,260 --> 00:44:01,040
Make sure that we stored them more
symbolically for breakpoints that were set

615
00:44:01,040 --> 00:44:03,660
by file line or by name or by regular expression.

616
00:44:03,660 --> 00:44:05,810
What do we mean by symbolically?

617
00:44:05,810 --> 00:44:11,170
We want to make sure that as we go along, one
breakpoint might turn in to many breakpoints

618
00:44:11,170 --> 00:44:17,390
and if you set a breakpoint by a name or by a file line,
that file line might be in a file that contains inline code.

619
00:44:17,390 --> 00:44:21,330
And we never stop looking for locations
to set your breakpoint.

620
00:44:21,330 --> 00:44:23,280
So as shared libraries get loaded and unloaded,

621
00:44:23,280 --> 00:44:27,750
we'll continue to look for file
inlines that match your original query.

622
00:44:27,750 --> 00:44:32,900
Also, I want to make sure individual
locations can be enabled and disabled.

623
00:44:32,900 --> 00:44:36,720
If you set a breakpoint and say
standard template library header file,

624
00:44:36,720 --> 00:44:40,560
you might hit a bunch of template instantiations
for types that you don't care about.

625
00:44:40,560 --> 00:44:46,880
Under the same breakpoint you can see all the locations
that got set using the Breakpoint List command.

626
00:44:46,880 --> 00:44:52,770
And under there, you can then enable and disable individual
locations so that you can still see all the locations

627
00:44:52,770 --> 00:44:58,160
that were hit by the breakpoint but
you don't need to stop at all of them.

628
00:44:58,160 --> 00:45:04,890
You also can limit the scope of the breakpoint to certain
shared libraries that's used with the breakpoint command

629
00:45:04,890 --> 00:45:08,850
and that allows us to only look
into certain locations, you know.

630
00:45:08,850 --> 00:45:13,930
If you know your breakpoint for main is in your application,
you can tell us to only look in that application.

631
00:45:13,930 --> 00:45:18,770
That helps to save you some memory and saves some
time when we're parsing up the debug information.

632
00:45:18,770 --> 00:45:23,250
We want to work on a consistent command syntax.

633
00:45:23,250 --> 00:45:26,720
We started off with-- and we want
to make sure that was easy to learn.

634
00:45:26,720 --> 00:45:30,140
Start off with something that is
noun-verb for example, breakpoint set.

635
00:45:30,140 --> 00:45:34,510
In each breakpoint, each command could also have options.

636
00:45:34,510 --> 00:45:41,190
In this case, we set-- can set a breakpoint by
file in line, by name, or by regular expression.

637
00:45:41,190 --> 00:45:45,900
The options really help us make sure that
the commands that you enter are unambiguous.

638
00:45:45,900 --> 00:45:49,090
In GDB, oftentimes the GB has got a break command.

639
00:45:49,090 --> 00:45:53,540
You enter in a big long string and we hope
that GDB interprets that string correctly.

640
00:45:53,540 --> 00:45:54,640
Sometimes, it gets it wrong.

641
00:45:54,640 --> 00:45:58,390
Most of the time it gets it right but by
providing command syntax it allows you

642
00:45:58,390 --> 00:46:00,960
to specify exactly what your thoughts were.

643
00:46:00,960 --> 00:46:04,280
We can make sure that we do the right thing for you.

644
00:46:04,280 --> 00:46:09,190
We also have Autocompletion- type
in part of a command and hit tab

645
00:46:09,190 --> 00:46:11,480
and the LLDB command line we can complete that for you.

646
00:46:11,480 --> 00:46:15,450
It will help you discover your commands and also
be a little quicker in and around the command line.

647
00:46:15,450 --> 00:46:18,580
We've got some help.

648
00:46:18,580 --> 00:46:20,760
The help command can be typed in.

649
00:46:20,760 --> 00:46:24,690
You can get help on any of the various
commands that are inside of LLDB.

650
00:46:24,690 --> 00:46:29,190
The different options that go with the
commands know which options they go with.

651
00:46:29,190 --> 00:46:35,250
So, when you type help, not only do you get a little blurb
about what the command can do, but you also get information

652
00:46:35,250 --> 00:46:38,350
about which commands-- which command options go together.

653
00:46:38,350 --> 00:46:43,560
For example, you wouldn't want to try and set a
breakpoint at file in line and also by a name.

654
00:46:43,560 --> 00:46:49,430
So, when you see the syntax and the usage coming from
the commands, we'll show you the common sets of commands

655
00:46:49,430 --> 00:46:54,010
in the options that go together so you can
see how the commands were intended to be used.

656
00:46:54,010 --> 00:47:00,150
We also have an apropos command that allows you to type
in one or more keywords and the keywords will be looked up

657
00:47:00,150 --> 00:47:07,290
and we'll find the commands that match those in case
you're lost in looking for the command, you can find those.

658
00:47:08,620 --> 00:47:13,860
I want to make sure that we let the people who like the
command line know that we didn't forget about you guys.

659
00:47:13,860 --> 00:47:17,560
We've got a command line tool that's
available in Xcode 4 user bin.

660
00:47:17,560 --> 00:47:26,950
It can easily be set up to launch a file for yourself, set
a breakpoint and run but instead of showing you some slides

661
00:47:26,950 --> 00:47:29,550
about this, why don't we turn things
over to show Sean Callanan.

662
00:47:29,550 --> 00:47:32,910
He's going to give you a brief
demo of the LLDB Command Line Tool.

663
00:47:32,910 --> 00:47:38,060
[ Applause ]

664
00:47:38,060 --> 00:47:38,920
>> Sean Callanan: Thank you, Greg.

665
00:47:38,920 --> 00:47:45,070
Hi. I'm very excited about LLDB and it's a
great honor to be able to demo it for you today.

666
00:47:45,070 --> 00:47:51,640
So, I'm going to show you sort
of the command line side of LLDB.

667
00:47:51,640 --> 00:47:58,120
So, you've already seen from Hahn Ming how to use the
debugger from the UI but for those of you who, you know,

668
00:47:58,120 --> 00:48:03,620
who've been using GDB for a long time, you'll probably
want to be able to use the command line as well.

669
00:48:03,620 --> 00:48:13,840
So, it's as Greg told you, you can start
LLDB simply by typing /Xcode4/usr/bin/lldb.

670
00:48:14,920 --> 00:48:22,610
Now, if you've used GDB for a while, you're going to expect
to have certain basic features to help you find your way

671
00:48:22,610 --> 00:48:27,900
around the command line and if you're new, you're
going to want to figure out what you can do here.

672
00:48:27,900 --> 00:48:31,880
So, as Greg told you, you can use the apropos command.

673
00:48:31,880 --> 00:48:36,200
Now, notice that I didn't specify what
program I wanted to debug on the command line.

674
00:48:36,200 --> 00:48:38,270
That's because I can load it.

675
00:48:38,270 --> 00:48:42,690
I can load the program in using an
LLDB command, but how do I do it?

676
00:48:42,690 --> 00:48:46,070
So, I'm going to use apropos to help me find out.

677
00:48:46,070 --> 00:48:55,010
So, if I type apropos executable, it tells me all
the commands that are related to loading executables

678
00:48:55,010 --> 00:49:01,400
into the debugger and also some other commands
that you might also have been looking for.

679
00:49:01,400 --> 00:49:04,530
But in this case, we care about the file command.

680
00:49:04,530 --> 00:49:14,170
But before I use the file command, I want to give you a demo
of a new feature that we have in LLDB which is the Alias.

681
00:49:14,170 --> 00:49:21,800
The user-defined aliases can be set not
only for commands but also for commands

682
00:49:21,800 --> 00:49:24,700
and whatever options you use for them commonly.

683
00:49:24,700 --> 00:49:30,400
So, if I want to set an alias for
apropos, let's say that I'm very forgetful.

684
00:49:32,420 --> 00:49:38,530
Now, I can type question mark executable
and I get the same result.

685
00:49:38,530 --> 00:49:41,790
So, that's very handy if you want--
if you spend a lot of time

686
00:49:41,790 --> 00:49:44,620
on the command line and don't want to have to type too much.

687
00:49:44,620 --> 00:49:55,670
So, in-- just as in GDB, you have access to the Help
command which by the way shows you all your aliases as well

688
00:49:55,670 --> 00:49:59,800
and all the commands that you have access to regularly.

689
00:49:59,800 --> 00:50:04,250
All right, well enough of showing you around
the-- just around our help facilities.

690
00:50:04,250 --> 00:50:06,160
Let's actually do something.

691
00:50:06,160 --> 00:50:16,660
So I'm going to load a WWDC demo up into the LLDB,
and I'll use the file command as I found earlier.

692
00:50:17,870 --> 00:50:21,900
Now, in order to launch it, I could
launch it straight with--

693
00:50:21,900 --> 00:50:26,490
straight inside LLDB but this is a command
line app that I'm going to be running.

694
00:50:26,490 --> 00:50:30,580
So, I'd like to show you another feature of LLDB which is

695
00:50:30,580 --> 00:50:35,370
that I can use the LLDB command
line while the program is running.

696
00:50:35,370 --> 00:50:41,280
So, I'm going to attach-- I'm actually
going to attach to the program externally.

697
00:50:41,280 --> 00:50:48,370
So, you type the process, attach command,
and then I want to attach by name.

698
00:50:48,370 --> 00:50:57,630
I could also attach by PID by the way, and I provide
the wait for command option which indicates to LLDB

699
00:50:57,630 --> 00:51:00,130
that it should wait for me to start the program.

700
00:51:00,130 --> 00:51:03,170
So, now I'll start the program in this other terminal.

701
00:51:06,700 --> 00:51:11,480
All right, now the program has
printed some out but LLDB stopped it.

702
00:51:11,480 --> 00:51:15,590
So, now we need to type Continue to let the program run.

703
00:51:15,590 --> 00:51:18,700
So, first of all, what does this little program do?

704
00:51:18,700 --> 00:51:25,660
It's a little thing I hacked together that where you type
in a number and it computes the factorial of that number.

705
00:51:25,660 --> 00:51:28,960
That is if I type 3, it prints 1 times 2 times 3.

706
00:51:28,960 --> 00:51:34,800
If I type 4, it computes 1 times 2
times 3 times 4, not rocket science here

707
00:51:34,800 --> 00:51:38,010
but what's interesting is that I'm doing it one of two ways.

708
00:51:38,010 --> 00:51:45,980
An iterative way which simply uses a while loop and a tabled
way which uses a recursive function that looks in a table

709
00:51:45,980 --> 00:51:50,160
to see if it's already computed
the result for a particular number.

710
00:51:51,470 --> 00:51:57,370
Now, if I want to set a breakpoint on both
implementations of the factorial function,

711
00:51:57,370 --> 00:52:03,400
I can use the breakpoint set command
but I pass it a regular expression.

712
00:52:03,400 --> 00:52:12,190
So, I typed breakpoint set --func_regex
and I type fact.

713
00:52:12,190 --> 00:52:17,600
Now, LLDB will hunt through and find all the
functions that match this regular expression.

714
00:52:17,600 --> 00:52:19,460
In this case, it's found two.

715
00:52:19,460 --> 00:52:27,270
So, if I want to see which-- where it actually
set breakpoints, I can type breakpoint info.

716
00:52:27,270 --> 00:52:37,690
And as you can see, it set one breakpoint on the iterative
factorial function and one on the recursive tabled one.

717
00:52:37,690 --> 00:52:39,480
That's all very well and good.

718
00:52:39,480 --> 00:52:42,480
Let's actually see it hit those breakpoints.

719
00:52:42,480 --> 00:52:44,540
So, I'll type in five.

720
00:52:44,540 --> 00:52:47,270
Now, I've hit the iterative factorial function.

721
00:52:47,270 --> 00:52:56,320
Now, notice that LLDB provides you with several lines of
source code context whenever you step or hit a breakpoint.

722
00:52:56,320 --> 00:53:00,960
This is so that you don't lose track of where you are.

723
00:53:00,960 --> 00:53:10,330
Our ultimate goal with LLDB of course is to
completely phase out any Xcode 4 UI nonsense, so.

724
00:53:10,330 --> 00:53:11,470
[ Applause ]

725
00:53:11,470 --> 00:53:23,690
So, in this case, if I wanted to see
more lines of source, I can type--

726
00:53:23,690 --> 00:53:27,840
I can tell it exactly where to start and
how many lines to print and in this--

727
00:53:27,840 --> 00:53:30,710
and you see the iterative factorial function.

728
00:53:30,710 --> 00:53:35,500
In this case, I'm implementing it using a while
loop, you know, nothing too exciting here.

729
00:53:35,500 --> 00:53:48,490
But if I type Continue and now hit the recursive version,
now I can show you that entire function and notice

730
00:53:48,490 --> 00:53:53,190
that this first checks if the input is 0.

731
00:53:53,190 --> 00:53:56,670
If so, it returns the standard
recursive base case which is 1.

732
00:53:56,670 --> 00:54:00,020
The factorial of 0 is defined to be 1 by somebody.

733
00:54:00,020 --> 00:54:08,880
Otherwise, if the table entry hasn't been filled in yet,
it computes the necessary value making a recursive call.

734
00:54:08,880 --> 00:54:13,380
And finally, if the-- finally,
it returns what's in the table.

735
00:54:13,380 --> 00:54:17,200
However, we can do more than just look at the source code.

736
00:54:17,200 --> 00:54:21,710
We can actually inspect the data structure
since this is after all a running program.

737
00:54:21,710 --> 00:54:29,990
So, the first thing we can do is I can simply type
variable list to see what variables are available.

738
00:54:29,990 --> 00:54:33,830
So, the first variable you're interested
in of course is the input variable.

739
00:54:33,830 --> 00:54:36,900
That's what we typed.

740
00:54:36,900 --> 00:54:41,130
Then you see we have the table-- we have our table.

741
00:54:41,130 --> 00:54:46,620
Now, notice that the first 5 entries,
0 through 4 are already filled in.

742
00:54:46,620 --> 00:54:53,840
That's because when we typed 3 and 4 in earlier, it computed
all those factorial values as part of its recursion.

743
00:54:53,840 --> 00:54:58,280
Notice, however, that number 5 hasn't been filled in yet.

744
00:54:58,280 --> 00:55:03,360
Well, we could let the program do it but, I
mean, we don't want a work our programs too hard.

745
00:55:03,360 --> 00:55:09,230
So, let's help it out by using
the Clang-based expression parser.

746
00:55:09,230 --> 00:55:15,330
So, if I type xpr that triggers the expression parser.

747
00:55:15,330 --> 00:55:24,290
Now, I can type fact sub N and notice that this table
entry has, I told you, hasn't been filled in yet.

748
00:55:27,820 --> 00:55:32,800
But if I type in fact sub N equals
fact sub N minus 1 times N

749
00:55:32,800 --> 00:55:38,130
which is the recursive step then it
fills in that entry in the array.

750
00:55:38,130 --> 00:55:45,090
It's using Clang to compile this expression
and then we can execute it very simply.

751
00:55:45,090 --> 00:55:49,130
This is what Greg was talking about when
he was talking about LLVM integration.

752
00:55:50,640 --> 00:55:56,350
Now, let's make sure that I'm not hiding
anything behind my back and actually step

753
00:55:56,350 --> 00:55:59,230
through this and see that this actually worked.

754
00:55:59,230 --> 00:56:05,010
So, if I type next, first of all, it checks that
N equals 0, N was 5 so that's not going to happen.

755
00:56:05,010 --> 00:56:07,690
Now, it checks if the entry in the table is blank.

756
00:56:07,690 --> 00:56:16,060
Well, actually, since we used the Clang-based expression
parser to fill our table entry in, we're perfectly fine.

757
00:56:16,060 --> 00:56:23,880
So now I can finish to step out and type Continue
and as you can see, we've got the correct result

758
00:56:23,880 --> 00:56:28,340
but we used the Clang-based expression parser to get it.

759
00:56:28,340 --> 00:56:34,700
So, now before I hand you back to Greg, I'd like
to show you one more exciting feature about LLDB.

760
00:56:34,700 --> 00:56:42,150
I've shown you our integration with Clang but now I
also want to show you the integration with Python.

761
00:56:42,150 --> 00:56:48,090
Python-based scripting is going to make your debugging
experience a lot easier and you'll be and if you happen

762
00:56:48,090 --> 00:56:53,350
to have a lot of things that you do repeatedly,
this is going to really help you out.

763
00:56:53,350 --> 00:56:59,600
So, right from the LLDB command line,
you have access to the script command.

764
00:56:59,600 --> 00:57:05,660
The script command dumps you into this little
command prompt that has 3 greater than signs.

765
00:57:05,660 --> 00:57:11,440
If you're familiar with Python, this
command prompt will be very familiar to you.

766
00:57:11,440 --> 00:57:14,780
This is a standard Python interpreter.

767
00:57:14,780 --> 00:57:22,370
So, in particular, I can pull in external functions.

768
00:57:22,370 --> 00:57:31,350
Now, since the particular demo I'm going to show you
is a little-- this involves a slightly long command.

769
00:57:31,350 --> 00:57:36,070
I'm not going to type that all in
but I'm going to import it for me.

770
00:57:36,070 --> 00:57:40,090
Now, to show you that I'm not doing
anything, pulling a fast one on you,

771
00:57:40,090 --> 00:57:52,800
I'm actually going to use the Python
standard interface to print that script.

772
00:57:52,800 --> 00:58:03,100
What this script is doing is using the LLDB public
API to do things like get the target, get the process,

773
00:58:03,100 --> 00:58:13,330
then get the current thread, look at the top-- look at
the topmost stack frame in that thread and get its name

774
00:58:13,330 --> 00:58:17,080
and then see how many frames on the stack, match that name.

775
00:58:17,080 --> 00:58:27,110
So, you're getting the recursion
depth and now I'm going to use this.

776
00:58:27,110 --> 00:58:30,360
And I'm going to use it as a breakpoint action.

777
00:58:30,360 --> 00:58:33,360
Now, this is where things get exciting.

778
00:58:33,360 --> 00:58:38,080
I'm going to disable the breakpoint
on the non-recursive function.

779
00:58:38,080 --> 00:58:41,760
Remember when I showed you the breakpoint
where there 2 parts to that breakpoint

780
00:58:41,760 --> 00:58:49,500
so I'm disabling one and now, I'm going to add a command.

781
00:58:49,500 --> 00:59:05,280
[ Pause ]

782
00:59:05,280 --> 00:59:14,550
And now if I type a 7 here, notice that I hit
the breakpoint 3 times, one with a depth of 0,

783
00:59:14,550 --> 00:59:17,260
one with a depth of 1, and one with a depth of 2.

784
00:59:17,260 --> 00:59:21,770
>> Greg Clayton: All right, so, in
conclusion, developer preview with Xcode 4,

785
00:59:21,770 --> 00:59:27,630
we've got an LLDB command line debugger for
you guys, Python integration, Open source now.

786
00:59:27,630 --> 00:59:32,000
Anyone who's willing to help, please
feel free to head over to lldb.llvm.org.

787
00:59:32,000 --> 00:59:34,210
If you guys have any questions,
see us down in the dev tools lab.

788
00:59:34,210 --> 00:59:35,550
Thanks a lot.

