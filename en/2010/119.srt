1
00:00:07,350 --> 00:00:08,710
>> Alexandre Aybes: Good afternoon everyone.

2
00:00:08,710 --> 00:00:14,640
I'm Alexandre Aybes I'm a software
engineer on the iPhone Team.

3
00:00:14,640 --> 00:00:19,610
Last week I was busy filling in your mailboxes.

4
00:00:19,610 --> 00:00:22,950
Today I'm going to focus on Address Book.

5
00:00:22,950 --> 00:00:31,070
More and more, nowadays, people want social features in
their applications, in your applications so we're going

6
00:00:31,070 --> 00:00:37,200
to talk about a few easy ways you can
actually put people in your application

7
00:00:37,200 --> 00:00:42,480
and then include some of those social features in there.

8
00:00:42,480 --> 00:00:45,290
So what are we going to cover today?

9
00:00:45,290 --> 00:00:49,940
Four things: We're going to start off
with a little overview of Address Book.

10
00:00:49,940 --> 00:00:53,000
For those of you who have never seen Address
Book we're going to make sure we're talking

11
00:00:53,000 --> 00:00:56,560
about the same things, highlight the main objects in there.

12
00:00:56,560 --> 00:01:02,680
For those of you who have used Address Book, whether
it be on the desktop, Mac OS X or on previous version

13
00:01:02,680 --> 00:01:09,060
of iPhone iOS we're going to I'm going
to highlight a few new features of iOS 4.

14
00:01:09,060 --> 00:01:16,020
Once we're done with the overview, we're
actually going to put that in practice and write,

15
00:01:16,020 --> 00:01:21,000
we've written a really cool little
demo that we're going to show you.

16
00:01:21,000 --> 00:01:25,560
Once we're done with the iPhone demo we're going to take
a look at some of the things you need to do for the iPad

17
00:01:25,560 --> 00:01:36,980
and then finally talk about a few user experience
improvements we can make to the app, namely responsiveness

18
00:01:36,980 --> 00:01:40,310
and now the exciting new world of multitasking.

19
00:01:40,310 --> 00:01:43,810
Some of the things you need to do in that context.

20
00:01:43,810 --> 00:01:46,800
So that's what I'm going to talk about.

21
00:01:46,800 --> 00:01:57,420
I'm not going to go over every single bit of API in
the framework, so no long API listings in my slides,

22
00:01:57,420 --> 00:02:03,720
you'll see a lot of code in the demo though but
what that means is that I'm going to need you

23
00:02:03,720 --> 00:02:13,310
to read the fantastic documentation that's
available online, also available in Xcode.

24
00:02:13,310 --> 00:02:17,370
So with that let's actually get started.

25
00:02:17,370 --> 00:02:19,550
So what's Address Book?

26
00:02:19,550 --> 00:02:21,910
There are two parts to Address Book.

27
00:02:21,910 --> 00:02:25,950
At the lower level we have the Address Book framework.

28
00:02:25,950 --> 00:02:28,530
It's a C framework based on Core Foundation.

29
00:02:28,530 --> 00:02:35,800
We have a huge C frameworks on the iPhone whether it be
core graphics, Core Foundation obviously and Address Book.

30
00:02:35,800 --> 00:02:42,140
If you're not too familiar with C or Core Foundation most
of the objects returned by Address Book can be tie cast

31
00:02:42,140 --> 00:02:48,110
to their objective C equivalent and be used
that way in objective C so it's really easy.

32
00:02:48,110 --> 00:02:55,740
On top of that framework, we have the Address
Book UI framework, so two separate frameworks.

33
00:02:55,740 --> 00:03:00,840
The Address Book UI framework provides a lot of U
controllers you can just plug directly into your app

34
00:03:00,840 --> 00:03:04,720
and we're going to cover those in just a bit.

35
00:03:04,720 --> 00:03:07,890
So with that let's get started the Address Book framework.

36
00:03:07,890 --> 00:03:13,530
At the beginning there is the Address Book.

37
00:03:13,530 --> 00:03:17,110
From that you're going to find sources.

38
00:03:17,110 --> 00:03:22,030
Sources or a source it's something new we added in iOS 4.

39
00:03:22,030 --> 00:03:27,520
I'm just going to tell you where the contacts
come from but I'll get back to that in a minute.

40
00:03:27,520 --> 00:03:34,530
Inside the source, you're going to find a number
of groups, this case my friends and my co-workers.

41
00:03:34,530 --> 00:03:44,110
In each of those groups you're going to find people,
three friends and one co-worker, actually two co-workers.

42
00:03:44,110 --> 00:03:49,440
You can see we have people who
are in multiple groups as well.

43
00:03:49,440 --> 00:03:54,310
You can also have people who are in no groups
at all directly attached to the source.

44
00:03:54,310 --> 00:03:58,880
So they're the four main groups of object you're
going to find in the Address Book framework.

45
00:03:58,880 --> 00:04:03,360
Let's take a look at that first one: the Address Book.

46
00:04:03,360 --> 00:04:07,370
So what is the Address Book?

47
00:04:07,370 --> 00:04:14,630
Well it's your starting point for
anything that has to do with people in iOS.

48
00:04:14,630 --> 00:04:17,080
It's your connection to the database.

49
00:04:17,080 --> 00:04:22,860
Without it you can't access the contacts.

50
00:04:22,860 --> 00:04:26,400
You can actually have multiple Address Book instances.

51
00:04:26,400 --> 00:04:29,980
The Address Book object you can
create multiple ones of those

52
00:04:29,980 --> 00:04:35,840
and they all access the same database,
the same set of contacts on the device.

53
00:04:35,840 --> 00:04:40,450
So that's the Address Book.

54
00:04:40,450 --> 00:04:43,810
The second one in there is a source.

55
00:04:43,810 --> 00:04:49,690
As I mentioned the source is new to iOS 4.

56
00:04:49,690 --> 00:05:00,180
It represents, it indicates where contacts
come from, it's the source of contacts.

57
00:05:00,180 --> 00:05:05,740
In this particular screen shot
we have two sources highlighted.

58
00:05:05,740 --> 00:05:10,830
On my iPhone on top an exchange at the bottom.

59
00:05:10,830 --> 00:05:21,710
We have a number of different source types available in iOS
4, those include the local one, in this case on my iPhone,

60
00:05:21,710 --> 00:05:28,020
Mobile Me is another type of source, Exchange and CardDAV.

61
00:05:28,020 --> 00:05:34,300
CardDAV is the technology behind the
Mac OS X server Address Book server.

62
00:05:34,300 --> 00:05:43,330
We also have a couple other like the global
address list and exchange and LDAT I believe.

63
00:05:43,330 --> 00:05:45,890
There's one thing to note about sources.

64
00:05:45,890 --> 00:05:50,320
There is a one too many relationship
between the source and the people.

65
00:05:50,320 --> 00:05:56,880
What this means is that if you delete a source all the
people associated with that source also get deleted

66
00:05:56,880 --> 00:05:59,840
so there's a strong relationship between those two.

67
00:05:59,840 --> 00:06:02,190
So that's the source.

68
00:06:02,190 --> 00:06:09,620
The next thing we can look at is the person.

69
00:06:09,620 --> 00:06:12,390
So what is a person?

70
00:06:12,390 --> 00:06:21,110
You've all seen it on the phone in this case in
the contacts application this is the view for Kate.

71
00:06:21,110 --> 00:06:26,310
The person object in the Address Book
framework can represent either an individual,

72
00:06:26,310 --> 00:06:29,990
in this case Kate, or an organization like Apple.

73
00:06:29,990 --> 00:06:39,670
It's a collection of properties; those properties can
either have a single value, like in the case of the name

74
00:06:39,670 --> 00:06:44,110
at the top, the birthday down at
the bottom, or even the image.

75
00:06:44,110 --> 00:06:45,970
All of those are single value properties.

76
00:06:45,970 --> 00:06:51,470
You'll see a little later in the demos how to access those.

77
00:06:51,470 --> 00:06:54,170
You can also have multi-value properties.

78
00:06:54,170 --> 00:07:00,680
In this case Kate has two phone
numbers, a mobile and a main phone number

79
00:07:00,680 --> 00:07:05,820
so that's pretty much what I cover for a particular person.

80
00:07:05,820 --> 00:07:07,670
We'll see more in the demos.

81
00:07:07,670 --> 00:07:14,570
There's one more thing, I've mentioned sources, I
mentioned person, well there's something new in iOS 4

82
00:07:14,570 --> 00:07:17,080
that I want to highlight now and it's linking.

83
00:07:17,080 --> 00:07:19,400
What is linking?

84
00:07:19,400 --> 00:07:26,520
As I said you can have a corporate source where
you get contacts from your exchange server.

85
00:07:26,520 --> 00:07:33,050
Let's say I'm also friends with Kate so I also have
her personal information in my MobileMe account.

86
00:07:33,050 --> 00:07:35,690
There you go the personal version.

87
00:07:35,690 --> 00:07:44,770
So in iOS4 now we will actually link those two records
and present the user with a unified version of the cards.

88
00:07:44,770 --> 00:07:46,300
So what does that mean for you?

89
00:07:46,300 --> 00:07:55,560
Like I said you have multiple records, this
is important, you have the corporate source,

90
00:07:55,560 --> 00:08:03,290
the exchange source bringing you one record and you
have the MobileMe one bringing you another record.

91
00:08:03,290 --> 00:08:08,020
Those two are automatically linked by the framework.

92
00:08:09,790 --> 00:08:15,790
The user can also link them manually if they chose to.

93
00:08:15,790 --> 00:08:18,330
How do you access those?

94
00:08:18,330 --> 00:08:24,500
There's a simple API call that I'll show in more
detail in the demos which is essentially just this:

95
00:08:24,500 --> 00:08:26,720
AD person copy array of all linked people.

96
00:08:26,720 --> 00:08:30,000
You pass a person get all the main people.

97
00:08:30,000 --> 00:08:33,630
So in the demos we'll go over this in a little more detail.

98
00:08:33,630 --> 00:08:36,390
So that's linking.

99
00:08:36,390 --> 00:08:42,770
The last final object I want to mention in
the Address Book framework is the group.

100
00:08:42,770 --> 00:08:49,480
You're probably all familiar with it, this
is again the same screen shot as earlier.

101
00:08:49,480 --> 00:08:51,970
The top level contacts application.

102
00:08:51,970 --> 00:08:57,570
In this case we have two groups:
The friends and the co-workers.

103
00:08:57,570 --> 00:09:01,910
The group, excuse me, the group
is a many-to-many relationship.

104
00:09:01,910 --> 00:09:09,630
Like I mentioned early on you can multiple people in
a group obviously, otherwise they wouldn't be a group

105
00:09:09,630 --> 00:09:12,620
and you can have people who are in multiple groups.

106
00:09:12,620 --> 00:09:16,720
There's no ownership between the person and the group.

107
00:09:16,720 --> 00:09:19,780
If you delete all the people from
a group, the groups still there,

108
00:09:19,780 --> 00:09:23,430
if you delete the group the people
are still in your Address Book.

109
00:09:23,430 --> 00:09:31,180
There's one thing I want to mention, I want to highlight
rather, is that not all source types support groups.

110
00:09:31,180 --> 00:09:37,720
For example it's the exchange source type does not have
any groups, instead we represent if you're familiar

111
00:09:37,720 --> 00:09:43,700
with exchange you have folders in exchange, those
folders are represented by individual sources.

112
00:09:43,700 --> 00:09:51,310
The reason for that is that in exchange you cannot
have an actual record be in multiple sources at once.

113
00:09:51,310 --> 00:09:53,900
It ends up being a copy of that record.

114
00:09:53,900 --> 00:10:01,360
If you change one the other one doesn't automatically
get updated so to represent that we made folders sources.

115
00:10:01,360 --> 00:10:07,060
Alright that's pretty much all I wanted
to cover in the Address Book framework.

116
00:10:07,060 --> 00:10:11,810
Let's take a look at the UI layer,
the Address Book UI framework.

117
00:10:11,810 --> 00:10:16,340
In that framework we provide to
you a lot of view controllers

118
00:10:16,340 --> 00:10:19,730
that you can just plug into your
app and reuse really easily.

119
00:10:19,730 --> 00:10:23,030
I'm going to highlight three of those.

120
00:10:23,030 --> 00:10:27,950
The first one is the PeoplePickerNavigationController.

121
00:10:27,950 --> 00:10:32,460
It's there it's pretty much the entire list of contacts.

122
00:10:32,460 --> 00:10:39,470
It's there for you to allow the user to pick a particular
person or to pick a particular phone number for example.

123
00:10:39,470 --> 00:10:44,380
The second one is the Person View Controller.

124
00:10:44,380 --> 00:10:52,990
It allows you to present a contact, present
their information and a little editing

125
00:10:52,990 --> 00:11:00,040
so that the user can make changes and the final
one is the Unknown Person View Controller.

126
00:11:00,040 --> 00:11:08,860
You've probably seen this, this exact one in mail when
you're actually getting an email from somebody who's not

127
00:11:08,860 --> 00:11:13,910
in your Address Book if you tap the little
chevron you'll be presented with a name,

128
00:11:13,910 --> 00:11:18,620
an email, and options to add to the Address Book.

129
00:11:18,620 --> 00:11:22,220
So this is done using the ABUnknownPersonViewController.

130
00:11:22,220 --> 00:11:27,810
Alright that's pretty much the end of the overview,

131
00:11:27,810 --> 00:11:32,030
now we're actually going to put
this together into a little demo.

132
00:11:32,030 --> 00:11:38,230
So we wrote these really cool apps that's all about
photo cutouts with a lot of help from our intern

133
00:11:38,230 --> 00:11:44,380
who apparently is not here, oh he's here, I lost him.

134
00:11:44,380 --> 00:11:52,120
So photo cutouts, photo cutouts you might be familiar
with them, you see them in fairs and carnivals,

135
00:11:52,120 --> 00:11:56,710
big giant cardboard images of silly
things with the hole to stick your head

136
00:11:56,710 --> 00:12:02,620
through so your friends can take silly pictures
of you and then black mail you later with them.

137
00:12:02,620 --> 00:12:03,700
It looks something like this.

138
00:12:03,700 --> 00:12:10,630
So what are we going to actually do in this demo?

139
00:12:10,630 --> 00:12:19,950
We're going to let the user pick a cutout then take
an actual contact, then take the contacts image,

140
00:12:19,950 --> 00:12:26,140
put it in the cutout and then finally we're going
to present the contact information to your user.

141
00:12:26,140 --> 00:12:31,260
And to do this I'd like to introduce Clare on stage.

142
00:12:31,260 --> 00:12:33,360
She'll do this.

143
00:12:33,360 --> 00:12:34,510
Thank you

144
00:12:34,510 --> 00:12:40,080
[ applause ]

145
00:12:40,080 --> 00:12:40,910
>> Clare Kasemset: Hi everyone.

146
00:12:40,910 --> 00:12:47,030
My name is Clare Kasemset and I'm going to be showing you
how to use the Address Book in your app in three ways.

147
00:12:47,030 --> 00:12:55,290
First, we'll see how to use the People Picker to display
a contact list inside your app and also take user input.

148
00:12:55,290 --> 00:13:02,040
Second, we'll see how to use the Person View Controller
to display contact information within your app

149
00:13:02,040 --> 00:13:07,990
and third we'll take a look at the
new API provided in iPhone OS 4 yes

150
00:13:07,990 --> 00:13:10,710
to take advantage of data from linked contacts.

151
00:13:10,710 --> 00:13:18,800
So let's get started.

152
00:13:18,800 --> 00:13:25,040
So we've already written some code for this application
but we're missing many of the Address Book portions

153
00:13:25,040 --> 00:13:28,060
so I'm going to build and run what we have so far.

154
00:13:30,990 --> 00:13:38,360
As you can see there's a button in the top right and
when I tap it I'm given the choice between many frames

155
00:13:38,360 --> 00:13:42,570
so I can swipe between them and I can tap one to select it.

156
00:13:42,570 --> 00:13:51,960
So at this point in the app we like to have it so
when the user taps the cutout a contact list slides

157
00:13:51,960 --> 00:13:55,680
up so they can choose one of their
friends to put inside the cutout.

158
00:13:55,680 --> 00:13:58,870
So let's write the code to do that.

159
00:13:58,870 --> 00:14:05,140
Going back into Xcode, now the last screen
we just saw was a cutout view controller

160
00:14:05,140 --> 00:14:08,270
and we're viewing the .M file for that right now.

161
00:14:08,270 --> 00:14:12,930
There's a method called PhotoTap which
gets called when the user taps the cutout.

162
00:14:12,930 --> 00:14:20,690
So here's where we want to create the people picker
so we do that using the usual alloc init incantation.

163
00:14:20,690 --> 00:14:28,520
Next, we'll set the Address Book on the People Picker
to the Address Book that we're using in our app

164
00:14:28,520 --> 00:14:31,490
and that way when the user chooses people.

165
00:14:31,490 --> 00:14:38,530
The People Picker can tell us about
people from our Address Book.

166
00:14:38,530 --> 00:14:45,630
Next, we'll present the people picker so sliding
it up modally and finally let's not forget

167
00:14:45,630 --> 00:14:47,880
to release it so that we don't leak memory.

168
00:14:47,880 --> 00:14:54,230
So that's the code to present the People Picker but
now to do something meaningful with the People Picker,

169
00:14:54,230 --> 00:14:57,430
we need to have a way for us to communicate with it,

170
00:14:57,430 --> 00:15:01,810
so in order to do that we'll declare
ourselves as a people picker delegate.

171
00:15:01,810 --> 00:15:08,740
To do that I'll open up the header
file for this class and declare

172
00:15:08,740 --> 00:15:12,680
that we implement the People Picker delegate protocol.

173
00:15:12,680 --> 00:15:23,500
Once we've done that let's go back to the .M file
and set ourselves as the People Picker's delegate.

174
00:15:23,500 --> 00:15:31,110
Now we've just promised to implement the People
Picker delegate protocol which means we need

175
00:15:31,110 --> 00:15:35,550
to write three methods, so let's
go ahead and write those now.

176
00:15:35,550 --> 00:15:43,980
We set aside a section just for those
methods to keep our code organized.

177
00:15:43,980 --> 00:15:45,660
The first method is the easiest to write.

178
00:15:45,660 --> 00:15:52,970
This method gets called when the user cancels
the People Picker and in that case all we need

179
00:15:52,970 --> 00:15:58,390
to do is dismiss the People Picker since we presented it.

180
00:15:58,390 --> 00:16:05,730
The second method gets called when the user
selects a person from their contact list.

181
00:16:05,730 --> 00:16:11,270
Now you'll notice that this method returns a boolean
and that's because really this is a question.

182
00:16:11,270 --> 00:16:16,830
The People Picker is asking us should I
continue after the user selects a person?

183
00:16:16,830 --> 00:16:24,600
If we say yes then the People Picker will slide a card for
that person onto the screen but if we say no then it's going

184
00:16:24,600 --> 00:16:26,930
to stop where it is and let us handle it.

185
00:16:26,930 --> 00:16:33,020
So in our case we don't want to show the person's
card, we only care about the photo on the person's card

186
00:16:33,020 --> 00:16:38,960
which we're going to put in the
cutout so here we would return no.

187
00:16:40,670 --> 00:16:46,760
This is also our opportunity to take whatever data we
need from the person so you can see that the person

188
00:16:46,760 --> 00:16:54,330
that the user chose is passes an argument to the callback
so in our case we'd like to copy the image data off

189
00:16:54,330 --> 00:16:58,480
of that person using the Address Book
framework call AV person copy image data.

190
00:16:58,480 --> 00:17:05,990
Now if the person that the user chose does have
a photo we can do something meaningful here,

191
00:17:05,990 --> 00:17:11,140
we can set a couple of the properties on the cutout view
controller that will take care of displaying the image

192
00:17:11,140 --> 00:17:16,710
on the screen and letting the user move it or scale it.

193
00:17:16,710 --> 00:17:20,970
Just as before, we also need to remember to
dismiss the People Picker when we're done with it.

194
00:17:20,970 --> 00:17:27,820
Now in the case where the user chooses
a person who doesn't have a photo,

195
00:17:27,820 --> 00:17:33,060
we can simply display an alert telling the
user that they should choose someone else.

196
00:17:34,610 --> 00:17:38,170
So that's two out of the three
People Picker delegate methods.

197
00:17:38,170 --> 00:17:41,500
The third one is not actually important in our case.

198
00:17:41,500 --> 00:17:47,180
So the third one would get called if the user were
viewing a card in the People Picker and decided

199
00:17:47,180 --> 00:17:49,770
to tap a phone number or an email address in it.

200
00:17:49,770 --> 00:17:55,160
But since we're not showing cards in our People Picker
we don't have to do anything special here we just need

201
00:17:55,160 --> 00:17:58,760
to implement the method so that we fulfill our promise.

202
00:17:58,760 --> 00:18:03,920
So there we've just implemented the
People Picker delegate protocol.

203
00:18:03,920 --> 00:18:10,970
Now let's build and run the app to see what we have.

204
00:18:10,970 --> 00:18:18,110
Again I'm going to tap the plus button, I'm going to
swipe until I find a frame I like and then I'll tap that.

205
00:18:18,110 --> 00:18:24,580
Now this time when I tap to add
a photo a contact list slides up

206
00:18:24,580 --> 00:18:29,800
and if I chose my good friend Ana,
her photo will go on the screen.

207
00:18:29,800 --> 00:18:38,270
I can scale it, using two fingers and move
it into place and there is our first cutout.

208
00:18:38,270 --> 00:18:41,210
So that's how you use the People Picker.

209
00:18:41,210 --> 00:18:45,870
Now the second thing we're going to do is display
contact information directly within our app

210
00:18:45,870 --> 00:18:48,170
and to do that we'll use the person view controller.

211
00:18:48,170 --> 00:18:53,010
So let's go back into Xcode.

212
00:18:53,010 --> 00:18:58,310
We'd like to have the person do controller
slide in when the user taps the cutout,

213
00:18:58,310 --> 00:19:02,530
so let's go back to that photo tap
method we were looking at before.

214
00:19:02,530 --> 00:19:08,090
You might notice from the structure of this code that
there are two states on our cutout view controller.

215
00:19:08,090 --> 00:19:13,660
Either it's editable which means the user is
in the middle of creating a cutout and that's

216
00:19:13,660 --> 00:19:18,620
where we show the People Picker but this time when
we're looking at a finished cutout we want to bring

217
00:19:18,620 --> 00:19:22,620
up the contact information so let's
create a Person View Controller.

218
00:19:22,620 --> 00:19:27,910
Next, we need to set the displayed person property on it

219
00:19:27,910 --> 00:19:35,600
that way the Person View Controller knows
whose information to show on the card.

220
00:19:35,600 --> 00:19:39,670
Next, we can set the allows editing
property on the Person View Controller.

221
00:19:39,670 --> 00:19:45,230
So this is pretty cool: With no work on our part we can
get the person view controller to show an edit button

222
00:19:45,230 --> 00:19:54,360
in the top right that the user can use to
edit this contact information within our app.

223
00:19:54,360 --> 00:20:01,060
Next, we'll display the Person View Controller by pushing
it onto the navigation stack and finally, as usual,

224
00:20:01,060 --> 00:20:05,860
we need to release the person view
controller when we're done with it.

225
00:20:05,860 --> 00:20:09,700
So as you can see we've written exactly five lines of code.

226
00:20:09,700 --> 00:20:13,880
Now let's build and run the app to see what that buys us.

227
00:20:16,850 --> 00:20:24,380
So I'll tap the plus button and swipe till
I find a frame I like and tap that one,

228
00:20:24,380 --> 00:20:28,210
I'll tap to choose a friend, this time I'll choose David.

229
00:20:28,210 --> 00:20:36,390
I'll scale the picture and move it into place and
this time after I tap Save I'm going to tap the cutout

230
00:20:36,390 --> 00:20:39,980
and David Taylor's contact information slides in.

231
00:20:39,980 --> 00:20:47,230
The UI looks just like what you'd expect from the phone or
from the contacts app and I can even tap the Edit button

232
00:20:47,230 --> 00:20:55,200
and maybe I want to change his phone number and when
I press Done that change gets saved to my data base.

233
00:20:55,200 --> 00:21:02,350
So that's how you use a Person View Controller and think
looking pretty good but now let's do the third thing

234
00:21:02,350 --> 00:21:06,860
which is taking advantage of least contact data in our app.

235
00:21:09,010 --> 00:21:13,370
So going back to Xcode there are
two ways we can do this in our app.

236
00:21:13,370 --> 00:21:20,440
The first way is have it so when the user chooses
one of their friends from the People Picker maybe

237
00:21:20,440 --> 00:21:25,590
that friend has multiple contacts in their
data base that have different photos so we'd

238
00:21:25,590 --> 00:21:30,160
like to let the user chose which one to put in the cutout.

239
00:21:30,160 --> 00:21:37,150
So to do that let's go back to that People Picker
delegate method, should continue after selecting person.

240
00:21:37,150 --> 00:21:43,510
Now originally we wrote code to copy the image off of
the person that's passed to us by the People Picker.

241
00:21:43,510 --> 00:21:50,440
But this time let's copy images not just from
that person but from all of its linked contacts.

242
00:21:50,440 --> 00:21:54,550
We've written a helper method here called
AllImagesPerPerson which can do that for us.

243
00:21:54,550 --> 00:22:00,600
Now let's take a look at it to see what it's doing.

244
00:22:00,600 --> 00:22:08,190
First, it's calling ABPersonCopyArrayOfAllLinkedPeople
which gets us a list of the linked contacts for the person

245
00:22:08,190 --> 00:22:12,860
and after that it basically does the same thing we
were doing before where it copies the image data.

246
00:22:12,860 --> 00:22:20,550
It just now this time it takes images from all
of the contacts and throws them into an array.

247
00:22:20,550 --> 00:22:29,110
So going back to our delegate method so on the first line
we get all of the linked images, next we'll count them

248
00:22:29,110 --> 00:22:36,240
and if it's at least one we can do something
meaningful here, so we can set the person property

249
00:22:36,240 --> 00:22:40,220
and there are two cases to deal with
now, either they're exactly one photo

250
00:22:40,220 --> 00:22:44,030
in which case we can do basically
what we've been doing up till now,

251
00:22:44,030 --> 00:22:48,780
that is setting the person image
property and dismissing the people figure.

252
00:22:48,780 --> 00:22:53,710
But if there's more than one image let's
present the user with a choice so we can do

253
00:22:53,710 --> 00:22:58,820
that using a class we've written especially for
this app, which is the same class you saw earlier

254
00:22:58,820 --> 00:23:01,390
when you were selecting one of the frames.

255
00:23:01,390 --> 00:23:07,700
So that's the way we can take advantage
of linked contacts the first way.

256
00:23:07,700 --> 00:23:15,850
The second way, is using the Person View Controller we can
actually display information not just from the person we set

257
00:23:15,850 --> 00:23:20,730
as a display person but all the linked
contacts as well so let's go back

258
00:23:20,730 --> 00:23:32,930
to where we recreate the person view
controller in photo taps so how do we get it

259
00:23:32,930 --> 00:23:34,780
to pull information from multiple records?

260
00:23:34,780 --> 00:23:42,120
I mean there's only a display person property here but
we can do this pretty easily by setting another property

261
00:23:42,120 --> 00:23:47,150
that should show linked people property to yes
and that tells the Person View Controller look

262
00:23:47,150 --> 00:23:54,590
for a displayed persons linked contacts as well
and display all their information in a single card.

263
00:23:54,590 --> 00:23:57,830
So that's how you use linked contacts.

264
00:23:57,830 --> 00:24:03,740
Now let's build and run to see what we have.

265
00:24:03,740 --> 00:24:08,520
Again I'm going to tap the + button and at
this point I'm sure some of you are wishing

266
00:24:08,520 --> 00:24:14,670
that we could save what we've done before, so
let's tap this frame and I'll tap to add a photo.

267
00:24:14,670 --> 00:24:22,730
This time out through the contacts who I know
has 2 contacts in my Address Book, so Kate Bell,

268
00:24:22,730 --> 00:24:30,450
so when I tap Kate Bell I now get a choice between
her sad professional photo and her fun photo.

269
00:24:30,450 --> 00:24:38,130
If I tap that photo it goes onto the cutout view controller
and I can scale it and move it as usual and press Save.

270
00:24:38,130 --> 00:24:46,510
Now when I tap the cutout you can see that this Person
View Controller is showing unified info which means

271
00:24:46,510 --> 00:24:52,280
that the information is coming from multiple
records and if I scroll down the card I can even see

272
00:24:52,280 --> 00:24:54,920
from which records this information is coming.

273
00:24:54,920 --> 00:24:58,220
So there you have it, our app is looking pretty good.

274
00:24:58,220 --> 00:25:02,160
It takes advantage of the People
Picker, the Person View Controller

275
00:25:02,160 --> 00:25:04,990
and linked contacts to add some great functionality.

276
00:25:04,990 --> 00:25:06,510
Thank you

277
00:25:06,510 --> 00:25:14,400
[ applause ]

278
00:25:14,400 --> 00:25:17,180
>> Alexandre Aybes: Go back to the slides here.

279
00:25:17,180 --> 00:25:19,380
Alright so that was a pretty cool demo.

280
00:25:19,380 --> 00:25:22,670
Just to highlight a few things.

281
00:25:22,670 --> 00:25:25,480
Like I've mentioned earlier we have
a lot of view controllers built

282
00:25:25,480 --> 00:25:29,380
into the Address Book UI framework
that you can just plug into your app.

283
00:25:29,380 --> 00:25:37,620
Whether it be the People Picker to present a list
of contacts and allow the user to pick something

284
00:25:37,620 --> 00:25:43,880
or the Person View Controller that allows
you to just present information for a contact

285
00:25:43,880 --> 00:25:48,270
and even lets you easily let the user edit that person.

286
00:25:48,270 --> 00:25:53,350
It will take care of all the saving, all the
editing, all the formatting and everything.

287
00:25:53,350 --> 00:25:57,950
The other thing Clare mentioned is linking.

288
00:25:57,950 --> 00:26:10,950
It's a new feature in iOS 4, pretty sure everyone with
excuse me just been informed my microphone fell out.

289
00:26:10,950 --> 00:26:12,910
Alright okay.

290
00:26:12,910 --> 00:26:21,920
So the linked people, it's a new feature in iOS 4 and
I'm pretty sure most people with multiple sources,

291
00:26:21,920 --> 00:26:27,970
multiple accounts will actually really enjoy it so
I encourage you to actually take advantage of it

292
00:26:27,970 --> 00:26:33,930
and again there's just a simple function
code ABPersonCopyArrayOfAllLinkedPeople.

293
00:26:33,930 --> 00:26:37,680
So that was the first part of our demo.

294
00:26:37,680 --> 00:26:43,320
Pretty cool little app but there
are a few things we could add.

295
00:26:43,320 --> 00:26:49,640
As you might have noticed when Clare was demoing every time
she launches the app all the previous cutouts she's built

296
00:26:49,640 --> 00:26:57,450
are gone so we should definitely take a look at saving those
beautiful cutouts we create, So we're going to take a look

297
00:26:57,450 --> 00:27:06,130
at what it takes to save record related and contact related
information for in your local storage, in your application.

298
00:27:06,130 --> 00:27:13,430
The next thing we're going to do it's more for
more people so we're going to actually look

299
00:27:13,430 --> 00:27:18,170
at sharing those user creations,
sending them to somebody else.

300
00:27:18,170 --> 00:27:23,040
What is involved when you want to share
contact information to another device?

301
00:27:23,040 --> 00:27:28,510
And to do this I'd like to invite Eric on stage, Eric.

302
00:27:28,510 --> 00:27:36,100
[ pause in speaking ]

303
00:27:36,100 --> 00:27:36,580
>> Eric Gillum: Thank you.

304
00:27:36,580 --> 00:27:40,920
Hi everybody my name is Eric Gillum and I'm going
to be talking to you about saving and sharing.

305
00:27:40,920 --> 00:27:47,290
So we've already been using you know address framework
and Address Book UI framework and these allow us

306
00:27:47,290 --> 00:27:51,680
to create cutouts for our users and
display the users contact information

307
00:27:51,680 --> 00:27:53,130
and we want to take it a little bit further.

308
00:27:53,130 --> 00:27:55,540
We want to be able to save the
cutouts and share the cutouts.

309
00:27:55,540 --> 00:28:00,750
So I'm going to be talking to you about the bits you
need to write to disk when you're saving a cutout

310
00:28:00,750 --> 00:28:04,000
and the bits you need to send across
the wire when you're sharing a cutout.

311
00:28:04,000 --> 00:28:09,580
So let's get started in Xcode.

312
00:28:09,580 --> 00:28:12,740
Now no surprise we're taking an
object oriented approach here

313
00:28:12,740 --> 00:28:16,790
and we've created a class called
cutout that represents a cutout.

314
00:28:16,790 --> 00:28:24,350
So let's take a look at the header file and you can see
it's a basic NS object here and we've got a person object

315
00:28:24,350 --> 00:28:29,000
that we'll be working with, that's usually chosen
by the People Picker and we've got the image

316
00:28:29,000 --> 00:28:34,630
which is the combined person photo and the
cutout background, super imposed upon each other,

317
00:28:34,630 --> 00:28:37,730
and we've got the thumbnail which is a miniature
version of that, you'll see that in a bit,

318
00:28:37,730 --> 00:28:44,390
and then finally an image name which is
a path on the device to that image data.

319
00:28:44,390 --> 00:28:50,880
So when our application wants to save a cutout we need
a representation that's suitable to be put on disk

320
00:28:50,880 --> 00:28:58,450
so what we're going to do is use a basic dictionary in
our case and have the cutout know how to represent itself

321
00:28:58,450 --> 00:29:04,960
in dictionary format, so we're going to implement this
method together, I'm going to jump to it so now we're

322
00:29:04,960 --> 00:29:10,080
in cutout.m. The first thing we're
going to need to do is get a dictionary.

323
00:29:10,080 --> 00:29:15,420
So we are locking it ourselves a dictionary and
now we need to figure out what we want to save

324
00:29:15,420 --> 00:29:18,760
from that person object as far as getting it on disk.

325
00:29:18,760 --> 00:29:22,660
Well the first thing that's a good thing
to hang onto is the record ID of a person.

326
00:29:22,660 --> 00:29:28,800
So here you see we call ABRecordGetRecordID
for the person object we're working with.

327
00:29:28,800 --> 00:29:35,630
We wrap that up in an NS number and then we set that on
our dictionary and the record ID is basically something

328
00:29:35,630 --> 00:29:40,360
that every saved person object in the Address Book
has, it's a unique identifier with which you can pull

329
00:29:40,360 --> 00:29:43,800
out that person information from the
Address Book you're working with.

330
00:29:43,800 --> 00:29:47,100
However, you don't want to rely only on the record ID.

331
00:29:47,100 --> 00:29:50,410
For instance what if your user deletes that contact?

332
00:29:50,410 --> 00:29:56,760
You don't want to be dead in the water with your cutout
object and no longer able to associate contact information

333
00:29:56,760 --> 00:30:01,490
with it so we'll save a little bit more information
to be able to help us there and one thing,

334
00:30:01,490 --> 00:30:05,340
it's a good thing to hold onto
is a composite name of a person.

335
00:30:05,340 --> 00:30:13,550
ABRecordCopyCompositeName will give us a string format of
basically the first name, the last name, the middle name,

336
00:30:13,550 --> 00:30:20,110
if it was set, several name properties that could have been
set on this person object in as I said in a string format

337
00:30:20,110 --> 00:30:26,030
so all we have to do is set that on our dictionary as well
and then we'll break this part up a bit, we'll go ahead

338
00:30:26,030 --> 00:30:31,670
and get the fist name in a similar fashion with a slightly
different call, ABRecordCopyValue and then we pass

339
00:30:31,670 --> 00:30:36,530
in the specific property we're interested
in, the first name property and we set

340
00:30:36,530 --> 00:30:39,500
that on our dictionary and the last name as well.

341
00:30:39,500 --> 00:30:42,220
These are both probably in the
composite name but you'll see why we want

342
00:30:42,220 --> 00:30:45,070
to break it up momentarily but same sort of deal.

343
00:30:45,070 --> 00:30:51,430
Last name, grab it form the record, set it on
the dictionary, and we want to take a little time

344
00:30:51,430 --> 00:30:57,470
to save one more bit of information and for our
applications purposes the emails will do very nicely.

345
00:30:57,470 --> 00:31:03,560
So here I'm creating an array to hold all of the emails and
Clare and Alex have mentioned linked people so we're going

346
00:31:03,560 --> 00:31:08,110
to get all of the emails for all of the people
linked to this person object so we go ahead

347
00:31:08,110 --> 00:31:13,310
and do that function call ABPersonCopyArrayOfAllLinkedPeople
and for each one

348
00:31:13,310 --> 00:31:16,680
of them we're going to work with the emails.

349
00:31:16,680 --> 00:31:20,140
Now a record can have more than one email.

350
00:31:20,140 --> 00:31:26,010
So it should return a multi value when you call
ABRecordCopyValue and pass in the email property.

351
00:31:26,010 --> 00:31:31,910
So preparing ourselves to work with a multi-value we're
going to do something that makes it a little simpler

352
00:31:31,910 --> 00:31:39,480
and stay in objective C land by calling this function,
ABMultivalveCopyArrayOfAllValues and casting to an NS array

353
00:31:39,480 --> 00:31:47,030
which is toll free bridged with a CF array so once we have
those we can add all of them to the existing array of emails

354
00:31:47,030 --> 00:31:53,400
that we're keeping track of and in this way we've
got all of the emails for all of the linked contacts

355
00:31:53,400 --> 00:31:56,920
and then last step there we set it on the dictionary.

356
00:31:56,920 --> 00:32:02,550
Now I'm going to do three more things that because we're
working with image data have to be done but they're not all

357
00:32:02,550 --> 00:32:04,960
that interesting from an Address Book point of view.

358
00:32:04,960 --> 00:32:11,700
We're basically going to get the image if we have that and
set that on our dictionary, get the thumbnail as well set

359
00:32:11,700 --> 00:32:16,220
that on our dictionary and finally that
image name, set that on the dictionary.

360
00:32:16,220 --> 00:32:21,930
So now we have a nice representation of a cutout object
in dictionary format and we can save that to disk.

361
00:32:21,930 --> 00:32:27,660
All we have to do is to allow the application or whoever
is responsible for saving call dictionary representation

362
00:32:27,660 --> 00:32:31,260
on this cutout object but that's only half of the puzzle.

363
00:32:31,260 --> 00:32:37,300
If you know how to save you also need to know how
to load and it won't be too surprising I'm sure

364
00:32:37,300 --> 00:32:41,490
if loading consists of basically doing the reverse right?

365
00:32:41,490 --> 00:32:47,410
Now that we've saved dictionary representations onto disk,
we'll pull them off of disk and create cutouts from them.

366
00:32:47,410 --> 00:32:49,210
So that's what this method does here.

367
00:32:49,210 --> 00:32:52,710
Still in cutout.m with dictionary representation

368
00:32:52,710 --> 00:32:56,150
and you see we're also passing along the
Address Book that we're working with.

369
00:32:56,150 --> 00:33:02,460
Why? Because the first thing we're going to do is pull
up the record ID from that dictionary representation.

370
00:33:02,460 --> 00:33:07,940
Remember it was wrapped in an NS number so we
have to unwrap it but then we call this function:

371
00:33:07,940 --> 00:33:13,040
AB Address Book get person with record ID and we
pass in the Address Book that we're working with.

372
00:33:13,040 --> 00:33:18,600
This will basically look up that person object by ID and
give it right back to us so it's a straight forward way

373
00:33:18,600 --> 00:33:24,580
to load up a cutout with the person information
we're interested in and then because we're dealing

374
00:33:24,580 --> 00:33:28,330
with image data we go ahead and
grab the image and the thumbnail

375
00:33:28,330 --> 00:33:32,120
and we reconstruct the image portions of this cutout object.

376
00:33:32,120 --> 00:33:35,330
But as far as saving and loading that should be it.

377
00:33:35,330 --> 00:33:39,590
Put it into a representation, write that
to disk, pull it out of the representation

378
00:33:39,590 --> 00:33:41,700
and you've got a cutout object in memory.

379
00:33:41,700 --> 00:33:45,480
So let's build and run and see this in action.

380
00:33:47,430 --> 00:33:50,470
So our familiar home screen with nothing saved.

381
00:33:50,470 --> 00:34:01,950
Tap +, chose a cutout, tap to add a photo,
let's go ahead and use Ana, make it look nice

382
00:34:01,950 --> 00:34:10,180
and tap Save now the true test here will be if the user
say shuts down their phone, here I've just killed the app

383
00:34:10,180 --> 00:34:16,830
but say the user shuts down their phone and then launches it
and launches your app again we've still got the saved cutout

384
00:34:16,830 --> 00:34:21,150
and moreover it's still attached to
the relevant contact information.

385
00:34:21,150 --> 00:34:23,390
So that's saving.

386
00:34:23,390 --> 00:34:27,120
A great way to extend your app, your
users will really appreciate that

387
00:34:27,120 --> 00:34:29,270
and I'm also going to talk to you about sharing.

388
00:34:29,270 --> 00:34:34,190
Basically sending a cutout from one device to
another one and so the first ting we're going

389
00:34:34,190 --> 00:34:41,930
to need right away is a share button so I'm going to jump
to the cutout view controller which we've seen before

390
00:34:41,930 --> 00:34:48,230
and we've basically got a stubbed out
method where we can add the share button,

391
00:34:49,330 --> 00:34:54,340
update save share button I've got a nice little
slot where I can just put in a share button.

392
00:34:54,340 --> 00:35:01,040
That'll replace the save button in the case that the user
has already saved their cutout and now they want to share it

393
00:35:01,040 --> 00:35:06,040
and as far as what we need to do to share well
again it shouldn't be too much of a surprise,

394
00:35:06,040 --> 00:35:12,500
I'm going to jump to a class called the gallery view
controller which that's actually the home screen table view

395
00:35:12,500 --> 00:35:19,140
that we always launch to in our app and you can see
here our cutout view controller will say it's ready

396
00:35:19,140 --> 00:35:23,980
to share the cutout and it passes the
person object that it's working with.

397
00:35:23,980 --> 00:35:29,660
Well all we need to do to send that out across the
wire is create a dictionary representation of it

398
00:35:29,660 --> 00:35:33,340
with two important things that
we need to keep track of here.

399
00:35:33,340 --> 00:35:38,300
We don't want to send along the image name because
that's on the device, on the sending device,

400
00:35:38,300 --> 00:35:43,140
it's not specific to the receiving device at all so we
pull that out of our representation and don't deal with it

401
00:35:43,140 --> 00:35:48,990
when sending across the network, likewise we
don't want to send the record ID because that came

402
00:35:48,990 --> 00:35:51,310
from the Address Book on the sending device.

403
00:35:51,310 --> 00:35:58,250
The receiving device has a completely different Address
Book and record IDs are not transferrable between devices.

404
00:35:58,250 --> 00:36:00,960
So we don't mess with those items in a representation.

405
00:36:00,960 --> 00:36:05,370
We go ahead and strip them out
but that's it as far as sending.

406
00:36:05,370 --> 00:36:07,630
It's very straight forward.

407
00:36:07,630 --> 00:36:13,610
But now imagine we've just sent a cutout and we're on
the receiving end well our application is responsible

408
00:36:13,610 --> 00:36:21,610
for pulling those bits in and showing a cutout
and you'll remember in the cutout object.

409
00:36:21,610 --> 00:36:24,910
We were only prepared to work with record numbers so far.

410
00:36:24,910 --> 00:36:30,040
Well now since we've specifically stripped out the
record number it won't come to us on the receiving side,

411
00:36:30,040 --> 00:36:34,000
we need to be prepared to do something else to
associate the contact information with the cutout.

412
00:36:34,000 --> 00:36:39,380
So if we don't have a record number to
work with we can pull other information

413
00:36:39,380 --> 00:36:42,360
from that representation and work with that.

414
00:36:42,360 --> 00:36:48,190
In this case we've got the composite name and the emails and
with those we'll be able to match against the Address Book

415
00:36:48,190 --> 00:36:51,500
that we're working with on the receiving side.

416
00:36:51,500 --> 00:36:56,910
So I've got a helper function here, copy
person, matching name, emails in Address Book.

417
00:36:56,910 --> 00:37:00,250
Let's jump to that and see how we would implement that.

418
00:37:00,250 --> 00:37:08,180
So still in the cutout object we start without a
match and right away we can call this handy function,

419
00:37:08,180 --> 00:37:15,330
ABAddressBook CpyPeopleWithName and that'll give us an array
of people all of which will match the name that we pass in

420
00:37:15,330 --> 00:37:19,620
and since we've passed in composite name you
know first, last or whatever properties were set

421
00:37:19,620 --> 00:37:22,890
on that contact we'll likely get a match.

422
00:37:22,890 --> 00:37:29,040
So given that we have some people to work with if we've got
1 match we can be fairly certain that this is the person

423
00:37:29,040 --> 00:37:32,580
that we're trying to match and just
return that out of this function.

424
00:37:32,580 --> 00:37:38,390
The possibility that there are multiple people
means what we should do is try and hone that search

425
00:37:38,390 --> 00:37:41,320
and in this case what we can do is use the emails.

426
00:37:41,320 --> 00:37:47,440
So for each person that we're working with that
match that name go ahead and work with the emails

427
00:37:47,440 --> 00:37:52,780
which again are multi-values so we
grab the emails from that record

428
00:37:52,780 --> 00:37:58,850
and in objective C land we call this function
ABMultiValueCopyArrayOfAllValues, that gives us the emails

429
00:37:58,850 --> 00:38:06,520
and an array format and then from there it's just array by
array matching so these couple of lines here we basically go

430
00:38:06,520 --> 00:38:11,890
through all the emails in that array, try and
match against the emails sent across the wire

431
00:38:11,890 --> 00:38:17,490
and if we've got an email match given that we've also
got a name match, excuse me, we can be pretty certain

432
00:38:17,490 --> 00:38:20,350
that that's the person that we're thinking about.

433
00:38:20,350 --> 00:38:25,770
So jumping back to the init method.

434
00:38:25,770 --> 00:38:30,570
There we are we've got a person by
matching the composite name and emails.

435
00:38:30,570 --> 00:38:32,950
There's one more case to consider.

436
00:38:32,950 --> 00:38:35,660
What if I've just made a cut out of my mom and I send it

437
00:38:35,660 --> 00:38:41,490
to my dad's sisters cousins you know
wife, twice removed on her mother's side?

438
00:38:41,490 --> 00:38:48,200
She knows my mother but my mother is probably not in
her Address Book so we would like to allow the user

439
00:38:48,200 --> 00:38:53,210
to ultimately add this person into their Address Book
without having to you know jump away from your app

440
00:38:53,210 --> 00:38:57,730
and go into the contacts app and you know
it should all be done right from your app.

441
00:38:57,730 --> 00:39:02,190
So in the case that we didn't match a person
because it wasn't actually in the Address Book

442
00:39:02,190 --> 00:39:05,980
on the receiving side, we can create a person.

443
00:39:05,980 --> 00:39:10,390
So if we haven't got a person what we
can do is use again some information

444
00:39:10,390 --> 00:39:13,620
from that dictionary representation to construct a person.

445
00:39:13,620 --> 00:39:21,170
In this case we'll be using the first and last name
specially and the emails and here's another helper function

446
00:39:21,170 --> 00:39:25,480
that we're going to implement that creates
a new person with those properties.

447
00:39:25,480 --> 00:39:28,620
So let's jump to that and see what we can do.

448
00:39:28,620 --> 00:39:35,680
So the first thing we need to do is create a
person object and this function does just that.

449
00:39:35,680 --> 00:39:40,830
It gives us a valid person object that isn't
necessarily associated with an Address Book yet

450
00:39:40,830 --> 00:39:47,830
but we can set properties on it, so we set the
first and last name, fairly straight forward,

451
00:39:47,830 --> 00:39:56,050
set the first name property with the relevant data
and the last name same way and of course the emails.

452
00:39:56,050 --> 00:40:01,440
Since emails are given to us as multi values we should
be working with multi values when setting emails

453
00:40:01,440 --> 00:40:07,960
on a record we create ourselves a mutable multi value
of string property type because emails are represented

454
00:40:07,960 --> 00:40:16,330
as strings and then set each email in the array
to that multi value and then once they're all

455
00:40:16,330 --> 00:40:22,270
in the multi value we set the actual multi value
on the person passing in the email property.

456
00:40:22,270 --> 00:40:30,370
So now we've got a person object in memory
that has s first and last name and some emails.

457
00:40:30,370 --> 00:40:36,670
So summing up here: No matter how we get to this
method, no matter who is asking us to create a cutout

458
00:40:36,670 --> 00:40:41,970
with a representation, we're always working with a
person object, whether it's by looking it up by ID,

459
00:40:41,970 --> 00:40:47,570
matching it by name and email, or creating a
new one entirely and the only thing we have left

460
00:40:47,570 --> 00:40:52,370
to do really is allow the user to add
this person to their Address Book.

461
00:40:52,370 --> 00:40:57,520
So in this specific case here we want them to
be able to update their contact information

462
00:40:57,520 --> 00:41:00,950
with this new information sent across the wire.

463
00:41:00,950 --> 00:41:10,450
So if we go back to the cutout view controller what
we'll want to do is give the user a means to add

464
00:41:10,450 --> 00:41:16,420
to their Address Book and we'll do that
with an Unknown Person View Controller.

465
00:41:16,420 --> 00:41:21,320
So back to this photo tapped method where
you can see Clare's wonderful 6 lines of code

466
00:41:21,320 --> 00:41:24,820
that you know handle the known person
case with a Person View Controller.

467
00:41:24,820 --> 00:41:32,440
I'm going to wrap that in an if else clause, so here it
is, same 6 lines but now it's for the case that we know

468
00:41:32,440 --> 00:41:35,220
that we're working with a person from our Address Book.

469
00:41:35,220 --> 00:41:42,860
If we call ABRecordGetRecordID on a person object and
it's equal to the invalid record ID then we can be sure

470
00:41:42,860 --> 00:41:48,250
that this person is not associated with our Address Book
and we should show an unknown Person View Controller.

471
00:41:48,250 --> 00:41:57,030
So let's create ourselves one and right away we should
set the allows adding to Address Book property to yes

472
00:41:57,030 --> 00:42:01,870
because at the point of this exercise is to allow
the user to update their contact information,

473
00:42:01,870 --> 00:42:07,040
then much like with the person view controller, set the
displayed person on our unknown Person View Controller

474
00:42:07,040 --> 00:42:14,680
to that person that has the first name and the last name
and the emails, set ourselves as the delegate and then push

475
00:42:14,680 --> 00:42:17,850
that view controller just like we
pushed a Person View Controller.

476
00:42:17,850 --> 00:42:24,160
And a word on this as the delegate we're responsible
for at least one method and we've implemented it here.

477
00:42:24,160 --> 00:42:30,310
Its Unknown Person View Controller did result
to person which passes a valid person object

478
00:42:30,310 --> 00:42:36,110
and in that case what we're responsible for doing is again
setting some properties on our cutout view controller

479
00:42:36,110 --> 00:42:42,450
but moreover simply saving just like if we were
creating our own cutout view controller locally.

480
00:42:42,450 --> 00:42:47,850
All we need to do is go through the same motion of saving
that person object, which will go through the routine

481
00:42:47,850 --> 00:42:52,530
of creating a representation associating that record
ID with it because now that they've been added

482
00:42:52,530 --> 00:43:00,290
to the Address Book they have a record ID, packaging
it up and then it'll be saved on the receiving device.

483
00:43:00,290 --> 00:43:01,450
So that's sharing.

484
00:43:01,450 --> 00:43:08,580
I'm going to demo this for you and in order to be
able to demo it, I'm going to switch to a device

485
00:43:08,580 --> 00:43:13,620
because what we've done is implement the sharing
stuff with email attachments and to be able

486
00:43:13,620 --> 00:43:16,580
to use email I'm going to switch to this device here.

487
00:43:16,580 --> 00:43:17,680
Can everybody see that ok?

488
00:43:17,680 --> 00:43:20,300
I guess my shadows in the way.

489
00:43:20,300 --> 00:43:27,600
Anyway first I'll show you how to share so I open our app
and here you can see Anna Haro which we saved earlier.

490
00:43:27,600 --> 00:43:31,290
Tap on her, notice the Share button in the top right here.

491
00:43:31,290 --> 00:43:38,010
If I tap Share we slide up a mail controller which allows
you to send an email to somebody with an attachment,

492
00:43:38,010 --> 00:43:40,940
which his basically a cutout representation.

493
00:43:40,940 --> 00:43:47,170
So it wouldn't make much sense to send it
to myself for the purposes of this demo,

494
00:43:47,170 --> 00:43:52,430
instead we've got some emails, use
that, we've got some emails sent.

495
00:43:52,430 --> 00:43:55,990
If I look at this one John Appleseed,
well he's in my Address Book.

496
00:43:55,990 --> 00:44:03,760
If I tap that and open that attachment in my
application, photo book we'll see it loads up the cutout

497
00:44:03,760 --> 00:44:11,350
and there's John inside of the cutout, if I tap
the cutout it'll show John's contact information.

498
00:44:11,350 --> 00:44:17,200
That was the matching with the
composite name and the emails.

499
00:44:17,200 --> 00:44:24,570
Now if I go back to mail and back to my inbox and check
out Tina Fam well I know her she's a friend of a friend

500
00:44:24,570 --> 00:44:34,600
so if I tap that email and again open the attachment in my
application, here it is, the cutouts loaded and here's Tina

501
00:44:34,600 --> 00:44:40,820
and if I tap on her cutout I'm given an unknown Person View
Controller where I have the option to create a new contact

502
00:44:40,820 --> 00:44:45,790
and that's exactly what I as a user want to do because
I know Tina but she's not yet in my Address Book.

503
00:44:45,790 --> 00:44:49,740
So create new contact and now we see
that because we set the displayed person

504
00:44:49,740 --> 00:44:56,440
on the unknown Person View Controller we already have her
first name and last name filled in as well as her email

505
00:44:56,440 --> 00:45:03,930
so as a user I don't need to do anything else really I can
just tap done and the Address Book UI takes care of saving

506
00:45:03,930 --> 00:45:11,560
that to my Address Book so now when I tap Tina it shows her
contact information with a Person View Controller this time

507
00:45:11,560 --> 00:45:14,700
and I can edit it as I want, she's in my data base.

508
00:45:14,700 --> 00:45:18,700
So that's sharing, another way to extend your app.

509
00:45:20,590 --> 00:45:21,510
Thanks

510
00:45:21,510 --> 00:45:25,040
[ applause ]

511
00:45:25,040 --> 00:45:28,860
>> Alexandre Aybes: Thank you Eric.

512
00:45:28,860 --> 00:45:30,130
Can be outside.

513
00:45:30,130 --> 00:45:34,630
Alright so we have a pretty cool app now and just
to recap some of the things Eric just showed you.

514
00:45:34,630 --> 00:45:40,310
The first thing he did was save, so save some information.

515
00:45:40,310 --> 00:45:44,190
What do you need to save when you're
trying to save contact information?

516
00:45:44,190 --> 00:45:53,860
Like he said the record ID is the main way you can get back
at an actual record in Address Book so save the record ID.

517
00:45:53,860 --> 00:46:00,270
He also mentioned that's not quite enough you
might want to save additional information.

518
00:46:00,270 --> 00:46:05,980
The main reason is that the user could
delete that contact from their Address Book

519
00:46:05,980 --> 00:46:08,720
and you'd end up being stuck with just this number.

520
00:46:08,720 --> 00:46:10,980
So saving extra information helps.

521
00:46:10,980 --> 00:46:14,870
In our case we save the name as well as the email addresses.

522
00:46:14,870 --> 00:46:19,400
In your application, maybe you want to
save phone numbers, or street address,

523
00:46:19,400 --> 00:46:21,520
depends on what you're actually doing in there.

524
00:46:21,520 --> 00:46:23,860
So that's worth saving locally.

525
00:46:23,860 --> 00:46:35,910
When you want to send information, send contact related
information, you need to not send the record ID.

526
00:46:35,910 --> 00:46:44,070
The record ID is as Eric mentioned valid only on one
device so when you're sending it do not send that across,

527
00:46:44,070 --> 00:46:47,550
it's not going to make sense in the receiving Address Book.

528
00:46:47,550 --> 00:46:55,400
So instead you want to send this extra information
you saved and on the receiving side you want to match,

529
00:46:55,400 --> 00:46:58,770
just try to find that contact in the Address Book.

530
00:46:58,770 --> 00:47:04,760
One good way to match is through the
name, records ID don't' sent them.

531
00:47:04,760 --> 00:47:08,040
So match using the name.

532
00:47:08,040 --> 00:47:11,040
How does that work?

533
00:47:11,040 --> 00:47:11,750
How does that work?

534
00:47:11,750 --> 00:47:18,050
There's one handy function to do this in
the Address Book copy people with name,

535
00:47:18,050 --> 00:47:21,610
that'll get you all the people matching a particular name.

536
00:47:21,610 --> 00:47:28,540
We'll do our best to actually find people even with partial
names so if you only have the first name and last name

537
00:47:28,540 --> 00:47:35,880
but this local Address Book as a prefix, a
suffix, the title, etc. will still match those.

538
00:47:35,880 --> 00:47:42,850
So once you've matched using the name,
if in case you get multiple people,

539
00:47:42,850 --> 00:47:48,210
you can refine that search using
the extra information you've saved

540
00:47:48,210 --> 00:47:51,540
and sent across like email addresses in our case.

541
00:47:51,540 --> 00:48:00,290
So that's good now you can be pretty sure of
finding that record on the receiving side.

542
00:48:00,290 --> 00:48:08,680
But in case that record is just not on the receivers
Address Book, the ABUnknownPersonViewController is there

543
00:48:08,680 --> 00:48:15,100
so that you can allow your N user the user to actually
add that record and all the information you've packaged

544
00:48:15,100 --> 00:48:22,450
and sent to their own Address Book and the Address Book
UI framework will take care of all the details of saving,

545
00:48:22,450 --> 00:48:28,430
adding, allow the user to edit etc. It's really easy to use.

546
00:48:28,430 --> 00:48:29,200
This is good.

547
00:48:29,200 --> 00:48:32,250
We have a good iPhone app.

548
00:48:32,250 --> 00:48:37,420
Let's take a very quick look at some of
the things we want to do for the iPad.

549
00:48:37,420 --> 00:48:42,180
What is it going to look like on the iPad?

550
00:48:42,180 --> 00:48:46,500
The sample code associated with the session already
has all these changes including the iPad changes

551
00:48:46,500 --> 00:48:49,150
so you can definitely I recommend you check it out.

552
00:48:49,150 --> 00:48:56,940
It looks something like this and the main thing
with change with regards to Address Book is that now

553
00:48:56,940 --> 00:49:01,780
when we're presenting the Person View Controller,
this person information we're presenting it

554
00:49:01,780 --> 00:49:06,390
in a popover, so it looks something like this.

555
00:49:06,390 --> 00:49:14,270
The rest as you can see it's still the unified info, the
rest is very similar, but rather than presenting full screen

556
00:49:14,270 --> 00:49:18,580
and card Person View Controller defiantly use the popovers.

557
00:49:18,580 --> 00:49:23,100
So overall it's very few changes as
far as Address Book is concerned.

558
00:49:23,100 --> 00:49:30,020
There are a few changes for the UI, a couple of different
nibs but as far as Address Book there's very few changes.

559
00:49:30,020 --> 00:49:36,850
The main one being using popovers, the
rest the Address Book UI framework,

560
00:49:36,850 --> 00:49:41,420
the Address Book framework will take
care of; it's mostly the same thing.

561
00:49:41,420 --> 00:49:48,020
We'll even take care of some of the details of how the
Person View Controller behaves once its inside a popover.

562
00:49:48,020 --> 00:49:52,970
Alright so that's the iPad, it's pretty easy.

563
00:49:52,970 --> 00:50:02,580
The last thing I want to talk about today is some user
experience and some improvements we can make in that area.

564
00:50:02,580 --> 00:50:07,740
The first one is going to be responsiveness.

565
00:50:07,740 --> 00:50:20,110
There's nothing worse than launching an app, waiting,
waiting, waiting, and being back at the home screen

566
00:50:20,110 --> 00:50:22,710
because the app got killed because
it took too long to launch.

567
00:50:22,710 --> 00:50:27,910
So we're going to take a look at some ways you
can improve that and avoid that preferably.

568
00:50:27,910 --> 00:50:35,650
The other thing we're going to look at is like I mentioned
earlier the multitasking world means your application is

569
00:50:35,650 --> 00:50:40,890
going to stay around, suspended,
eventually for a much longer time.

570
00:50:40,890 --> 00:50:44,440
So that means that other applications could
change the Address Book while you're running

571
00:50:44,440 --> 00:50:47,420
so you need to respond to background changes.

572
00:50:47,420 --> 00:50:52,860
So let's take a look at that first one, responsiveness.

573
00:50:52,860 --> 00:50:57,080
What is the lengthiest thing we're doing in this demo?

574
00:50:57,080 --> 00:51:01,500
In this particular case it's matching
against the Address Book.

575
00:51:01,500 --> 00:51:08,330
It's all fine and dandy when you're on your own device
and you're testing at work with your 100 contacts.

576
00:51:08,330 --> 00:51:14,780
When you're a corporate user with this
massive contact data base of 150,000 people,

577
00:51:14,780 --> 00:51:19,380
I've seen a data base like that it's
frightening, when you're trying to match

578
00:51:19,380 --> 00:51:22,620
against that it will take a little bit longer.

579
00:51:22,620 --> 00:51:27,840
So one way to avoid getting killed
immediately on launch is to do the matching

580
00:51:27,840 --> 00:51:31,270
in the background, so on a background thread.

581
00:51:31,270 --> 00:51:33,260
What is involved?

582
00:51:33,260 --> 00:51:40,270
There's one trick to matching in the background and in
the Address Book framework and the main thing you have

583
00:51:40,270 --> 00:51:46,920
to be aware of is that the Address Book object,
the AB Address Book is not thread safe in the sense

584
00:51:46,920 --> 00:51:53,040
that you cannot use it on one thread and then
continue using it at same time on another thread.

585
00:51:53,040 --> 00:51:59,800
Instead, you need to create a new instance of
Address Book so that you can have one let's say

586
00:51:59,800 --> 00:52:02,940
in the main thread and one in the background thread.

587
00:52:02,940 --> 00:52:06,860
This is true of the Address Book, this is also
true of records, any record you pull out of

588
00:52:06,860 --> 00:52:10,680
that Address Book any record you
match, you cannot pass that record

589
00:52:10,680 --> 00:52:14,870
to the other thread instead you need to pass record IDs.

590
00:52:14,870 --> 00:52:22,120
The record ID is just a number and you can
use it to find that record in the main thread.

591
00:52:22,120 --> 00:52:28,240
You can also pass actual values if you want like the
first name, the last name or the email addresses.

592
00:52:28,240 --> 00:52:31,720
Those are also ok just not the record.

593
00:52:31,720 --> 00:52:34,510
So what does is look like in code?

594
00:52:34,510 --> 00:52:40,460
The first thing we're going to do is detach
a new thread with a particular selector

595
00:52:40,460 --> 00:52:46,860
in this case our background matching method is
going to run in the background, makes sense.

596
00:52:46,860 --> 00:52:49,310
What does the background matching look like?

597
00:52:49,310 --> 00:52:56,200
First thing we're going to create an Address
Book to use in that background thread,

598
00:52:56,200 --> 00:53:01,110
then we're going to call this handy function to
match people with that particular Address Book

599
00:53:01,110 --> 00:53:07,630
and this is all code that's similar to what we saw
earlier, inside that match people with Address Book.

600
00:53:07,630 --> 00:53:15,040
So that will return to us an array of records, an
actual Address Book records so what we want to do

601
00:53:15,040 --> 00:53:20,240
with those extract all the record ID so
we could go through all of those records,

602
00:53:20,240 --> 00:53:26,040
pull the record IDs and build an array out of that.

603
00:53:26,040 --> 00:53:30,580
Again once we have those record IDs we
can send them back to the main thread.

604
00:53:30,580 --> 00:53:37,480
Those are safe to pass around threads and then
once we're done passing it back to the main thread,

605
00:53:37,480 --> 00:53:43,110
release the Address Book instance, we're done
with it, we don't need to worry about it anymore.

606
00:53:43,110 --> 00:53:46,840
On the main thread you're best
friends going to be AB Address Book,

607
00:53:46,840 --> 00:53:51,590
get person with record ID passing
the main threads Address Book.

608
00:53:51,590 --> 00:53:55,320
That way you will get records you
can use in the main thread.

609
00:53:55,320 --> 00:53:58,020
So that's good.

610
00:53:58,020 --> 00:54:04,730
Now we're matching in the background, we can take all
the time we want to match those 700 million contacts

611
00:54:04,730 --> 00:54:10,570
in that data base and we're good, we're still
not going to get killed on launch, that's good.

612
00:54:10,570 --> 00:54:15,450
So the other thing I mentioned I
wanted to talk about is multitasking.

613
00:54:15,450 --> 00:54:20,510
How does this affect you now that
iOS 4 supports multitasking?

614
00:54:20,510 --> 00:54:28,640
Your apps live longer and stay around so that means that you
need to be aware of changes that happen in the background

615
00:54:28,640 --> 00:54:38,180
and for that we have a simple function to allow you
to register for callbacks when something changes.

616
00:54:38,180 --> 00:54:39,850
That functions pretty simple.

617
00:54:39,850 --> 00:54:43,710
AB Address Book register, external change callback.

618
00:54:43,710 --> 00:54:49,280
Keep passing the function pointer that gets called
whenever something changes in another application.

619
00:54:49,280 --> 00:54:55,290
This is also true by the way in different threads, when
you have different threads operating on Address Book,

620
00:54:55,290 --> 00:55:00,000
you can register for changes from one thread
to the other, so you can get call backs

621
00:55:00,000 --> 00:55:02,030
when something changes on different thread.

622
00:55:02,030 --> 00:55:07,100
Once you get that callback what do you want to do?

623
00:55:07,100 --> 00:55:11,410
Revert. There's one simple call, ABAddressBookRevert.

624
00:55:11,410 --> 00:55:12,400
What does this do?

625
00:55:12,400 --> 00:55:19,120
Well it will drop all the caches that are already
in memory and force Address Book to reload

626
00:55:19,120 --> 00:55:23,290
from the data base next time you
ask for any of the properties.

627
00:55:23,290 --> 00:55:31,050
This means that you get fresh data out
of the data base when you query for it.

628
00:55:31,050 --> 00:55:34,240
So once we've reverted, the next thing we want to do

629
00:55:34,240 --> 00:55:39,970
in our case is redo the people
matching in the background, it's good.

630
00:55:39,970 --> 00:55:44,900
Once we're done with the people matching if we
had changes we'd probably want to refresh the UI.

631
00:55:44,900 --> 00:55:50,880
This one thing I want to mention about
ABAddressBookRevert that's important to remember is

632
00:55:50,880 --> 00:55:55,270
that not only does it drop the caches
but any unsaved information you have

633
00:55:55,270 --> 00:56:04,200
in that Address Book will also get reverted so if you
do have unsaved changes, you might not want to revert.

634
00:56:04,200 --> 00:56:08,300
Instead you can actually save, save those changes.

635
00:56:08,300 --> 00:56:15,280
Address Book framework will do its best to actually
handle any conflicts that might have happened.

636
00:56:15,280 --> 00:56:23,940
In 99% of the cases it'll be just fine, the rest
we'll do our best, be sure the last one wins.

637
00:56:23,940 --> 00:56:30,400
The call to save ABAddressBook Save could
return you an error if something wrong happens.

638
00:56:30,400 --> 00:56:34,340
Alright so that's all I wanted
to mention about multitasking.

639
00:56:34,340 --> 00:56:38,190
I'm just going to summarize a couple of things.

640
00:56:38,190 --> 00:56:41,520
The first thing this new really cool new feature: Linking.

641
00:56:41,520 --> 00:56:46,030
Really I want to encourage you to take advantage of it.

642
00:56:46,030 --> 00:56:51,870
It's a subtle change but for those people with many
accounts or many records from multiple accounts,

643
00:56:51,870 --> 00:56:59,020
it's really going to make their life as an N user better
so I really encourage you to play nice with the linking.

644
00:56:59,020 --> 00:57:06,500
Multitasking of course it was a highly requested feature,
now it's there and now you need to pay attention to it.

645
00:57:06,500 --> 00:57:10,600
So background changes, you know
make sure to register for those.

646
00:57:10,600 --> 00:57:16,430
And the last thing I want to point out is
that we have a lot of functionality in there,

647
00:57:16,430 --> 00:57:20,470
a lot of view controls that we
provide, a lot of APIs for Address Book

648
00:57:20,470 --> 00:57:25,960
so that you can fairly easily we've seen some
cases fine line the code you can edit a contact,

649
00:57:25,960 --> 00:57:31,740
you can integrate those into your application really
easily, really makes your app feel at home on the phone

650
00:57:31,740 --> 00:57:37,730
and lets you use the users contacts and
everything, it's really, really nice.

651
00:57:37,730 --> 00:57:44,860
For more info I encourage you to email Mark,
our Evangelist, he loves to get emails.

652
00:57:44,860 --> 00:57:48,820
Check out the documentation, big slide
on documentation, it's really good.

653
00:57:48,820 --> 00:57:55,260
It's available on the website, it's also available in
Xcode and finally you're all in the developer forums

654
00:57:55,260 --> 00:57:59,010
so you can ask each other questions and even
ask us questions on the developer forums.

655
00:57:59,010 --> 00:58:06,170
A couple of sessions: Multitasking, I love to
talk about multitasking Friday in the morning,

656
00:58:06,170 --> 00:58:10,210
if you're still awake after the beer bash at 9
a.m. you can go check out multitasking repeat

657
00:58:10,210 --> 00:58:14,950
if you haven't already seen the one I
believe it was yesterday or this morning

658
00:58:14,950 --> 00:58:17,290
so two repeats of the multitasking sessions.

