WEBVTT

00:00:06.280 --> 00:00:07.520
>> Joseph Pecoraro: I'm Joe Pecoraro.

00:00:07.520 --> 00:00:14.130
I'm a Safari Engineer-- a Safari iPhone OS Engineer,
I'm a WebKit Engineer, and I'm an expert on the tools

00:00:14.130 --> 00:00:15.720
that we're going to be talking about today.

00:00:15.720 --> 00:00:17.870
I'm an expert for a couple of reasons.

00:00:17.870 --> 00:00:22.320
I've been working in these tools for a while, a
lot longer than actually I have been here at Apple,

00:00:22.320 --> 00:00:24.430
because they're part of a WebKit Open Source Project.

00:00:24.430 --> 00:00:29.790
And the second reason, I, like
many of you, am a web developer.

00:00:29.790 --> 00:00:35.750
The tools-- I mean, the features that I've added
and improved on in these tools are ones that, I,

00:00:35.750 --> 00:00:40.830
as a web developer, wanted and needed, so they're
ones that you probably wanted and needed as well.

00:00:40.830 --> 00:00:42.090
So let's get started.

00:00:42.090 --> 00:00:49.730
Getting the most out of Safari's Developer Tools is a great
title, because it's easy to get distracted by a cool feature

00:00:49.730 --> 00:00:52.980
of the tools that doesn't really
relate to your day-to-day work.

00:00:52.980 --> 00:00:55.440
And that's not really getting the most out of the tools.

00:00:55.440 --> 00:00:59.360
So we took a step back, and we said,
"What do we know about you guys?"

00:00:59.360 --> 00:01:08.510
You guys build great web applications using standards
open web technologies like HTML, CSS, and JavaScript.

00:01:08.510 --> 00:01:16.350
And by building applications using these
features, you automatically get a wide range

00:01:16.350 --> 00:01:20.030
of support on all kinds of platforms and devices.

00:01:20.030 --> 00:01:26.470
So, not just desktop computers and laptops, but
also mobile devices like the iPhone and already

00:01:26.470 --> 00:01:29.010
on more than two million devices like the iPad.

00:01:29.010 --> 00:01:34.700
And the great part about building using these
technologies for these types of devices,

00:01:34.700 --> 00:01:42.680
is they all have a really great browser, Safari,
running all those technologies including--

00:01:42.680 --> 00:01:50.880
and actually, Safari is leading the field in
HTML support, CSS support, and HTML5, and CSS3.

00:01:50.880 --> 00:01:57.440
So when you're working with Safari, you need tools
that work with the latest feature, the latest tools.

00:01:57.440 --> 00:01:59.940
And that's exactly what we're talking about today.

00:01:59.940 --> 00:02:04.250
The tools built into Safari that
are going to improve your work flow.

00:02:04.250 --> 00:02:07.480
So we're going to look at three different pieces today.

00:02:07.480 --> 00:02:13.210
There's so much that we can cover with these
tools that we just have to limit ourselves.

00:02:13.210 --> 00:02:17.500
So the first section is going to be
exploring and developing web content.

00:02:17.500 --> 00:02:20.630
This is how you can learn from the web itself.

00:02:20.630 --> 00:02:24.850
And that's an absolutely vital
thing you need as a web developer.

00:02:24.850 --> 00:02:28.240
Next, we're going to look into
advanced JavaScript debugging.

00:02:28.240 --> 00:02:33.500
What turns a webpage into a web application is JavaScript.

00:02:33.500 --> 00:02:37.020
It's what makes the user feel like
they're using a desktop application.

00:02:37.020 --> 00:02:42.790
And for that reason, it is important that we look
at JavaScript, that's typically complex to debug,

00:02:42.790 --> 00:02:44.730
we're going to show you how to make it simple.

00:02:44.730 --> 00:02:50.910
And finally, we're going to tie this back to you and
your users by looking at improving page load times,

00:02:50.910 --> 00:02:56.200
and how you can make your websites optimize
really well across all kind of devices.

00:02:56.200 --> 00:03:00.570
So the first section, explore and develop web content.

00:03:00.570 --> 00:03:06.210
This is my favorite part of about the developer tools,
because it deals with two things that I do every single day,

00:03:06.210 --> 00:03:09.240
and it's two things that I know you guys do as well.

00:03:09.240 --> 00:03:11.920
The first is browse the web.

00:03:11.920 --> 00:03:15.810
Last week, I came across this webpage,
and I thought it was really cool.

00:03:15.810 --> 00:03:25.070
It's giving a nice graphical display of different
browsers in which HTML and CSS features they support.

00:03:25.070 --> 00:03:29.680
So when I came across this, the first thing
that I thought was, "How did the do that?"

00:03:29.680 --> 00:03:32.880
right? It looks really cool, how did they do it?

00:03:32.880 --> 00:03:36.780
Well, as developers, the answer is there for you.

00:03:36.780 --> 00:03:38.460
The source code is open.

00:03:38.460 --> 00:03:42.010
It's in the HTML, it's in the CSS, it's in the JavaScript.

00:03:42.010 --> 00:03:47.390
But if you want to find out how a particular portion
of the page works, it could be a lot of work, right?

00:03:47.390 --> 00:03:52.100
You have to manually dig through all the
files to find out what affects a portion

00:03:52.100 --> 00:03:54.360
of the page, and that's not very efficient.

00:03:54.360 --> 00:04:01.550
So we're going to show you how you can use the tools to
inspect a portion of the page that you're interested in,

00:04:01.550 --> 00:04:07.030
and have the browser compile all the relevant
information for that section of the page,

00:04:07.030 --> 00:04:11.570
including information that wouldn't be
available to you in those source files, such as,

00:04:11.570 --> 00:04:18.770
the browser's user agent styles, and the second part of
this section, developing web content, is exactly that,

00:04:18.770 --> 00:04:21.370
you guessed it, offering web applications.

00:04:21.370 --> 00:04:26.900
So when we see developers offering a web application,
they tend to break the page down into chunks.

00:04:26.900 --> 00:04:32.380
It's a tried and tested developing
technique that seems to work very, very well.

00:04:32.380 --> 00:04:34.390
So let's focus in on one of these chunks.

00:04:34.390 --> 00:04:39.050
So there's a bunch, there's browser colors, there's
the sun rays, there's JavaScript interactivity.

00:04:39.050 --> 00:04:46.060
Well, one that we find is pretty useful is
developing just one chunk, like a list of elements.

00:04:46.060 --> 00:04:48.660
And we see developers working on this.

00:04:48.660 --> 00:04:51.990
They get the mark up and the content pretty easily, right?

00:04:51.990 --> 00:04:54.510
It's just a list of elements.

00:04:54.510 --> 00:04:59.040
The difficulty we find for developers is styling that list,

00:04:59.040 --> 00:05:03.620
positioning it on the page correctly,
laying it out in the text formatting.

00:05:03.620 --> 00:05:08.140
And we're going to run through how we see
developers typically working on a feature like this.

00:05:08.140 --> 00:05:12.700
It's how I use to do it, it's how many of you
might be doing it right now, and we're going to try

00:05:12.700 --> 00:05:18.310
and show you how you can reduce that workflow,
improve it using the tools built in the browser.

00:05:18.310 --> 00:05:21.720
So to build this list, you start out in your editor.

00:05:21.720 --> 00:05:24.390
You write the markup for the list, that's pretty easy.

00:05:24.390 --> 00:05:29.150
You then load it into your browser, and
you see, "OK, the content looks right.

00:05:29.150 --> 00:05:30.910
Now it's time to style."

00:05:30.910 --> 00:05:36.680
So you go back to your editor, you tweak some
CSS, and you go back and you refresh your browser.

00:05:36.680 --> 00:05:38.290
Not quite perfect yet.

00:05:38.290 --> 00:05:44.700
So you go back and this tweak and refresh cycle continues
and it repeats, and you can come back to the browser,

00:05:44.700 --> 00:05:47.380
and it wouldn't even look like anything's changed.

00:05:47.380 --> 00:05:49.950
These context switches are costly.

00:05:49.950 --> 00:05:51.740
They are a waste of development time sometimes.

00:05:51.740 --> 00:05:54.790
And the problem is these refreshes.

00:05:54.790 --> 00:06:01.900
So we want to cut out some of those refreshes, allowing you
to do the work in the browser, get the right CSS values,

00:06:01.900 --> 00:06:07.020
get the right positioning, and take
those back in one go to your editor.

00:06:07.020 --> 00:06:12.850
And the tools built into Safari right now that
allow you to do that are the Web Inspector.

00:06:12.850 --> 00:06:16.710
And the best way I can show this
to you is by going into a demo.

00:06:16.710 --> 00:06:20.810
So we're just going to see some pictures of
it right now, and I can prep you for the demo.

00:06:20.810 --> 00:06:25.450
We are going to be looking at a Safari 5 extension,
which if you were at the sessions earlier,

00:06:25.450 --> 00:06:31.970
if you've heard about it this week, they're just
web content, they're just HTML, CSS, JavaScript.

00:06:31.970 --> 00:06:36.480
Inspecting an extension is exactly like inspecting a page.

00:06:36.480 --> 00:06:43.450
And the second point is we're going to try and
focus on new features from Safari 4 to Safari 5.

00:06:43.450 --> 00:06:47.770
So for those of you that are new to the Web
Inspector, we are going to cover the basics.

00:06:47.770 --> 00:06:51.480
We're going to get you up to speed and
comfortable with the Web Inspector itself.

00:06:51.480 --> 00:06:56.910
But for advanced developers, we are going to cover some
of those features that maybe you didn't know about before.

00:06:56.910 --> 00:06:59.460
And here, we are running Safari 5.

00:06:59.460 --> 00:07:06.070
It's running the Twitter flow extension from earlier
which consists of an Extension bar, a Toolbar item,

00:07:06.070 --> 00:07:10.650
and when you click the Toolbar item,
it brings up this full page experience.

00:07:10.650 --> 00:07:14.000
And some of you are probably wondering right
now, "Hey, that's a pretty cool effect.

00:07:14.000 --> 00:07:15.420
How do they do that?"

00:07:15.420 --> 00:07:20.120
And to answer that question, just right-click on
what interests you and choose inspect element,

00:07:20.120 --> 00:07:22.300
and that's going to bring up the Web Inspector.

00:07:22.300 --> 00:07:24.720
So here it is, docked to the bottom of the screen.

00:07:24.720 --> 00:07:27.780
If this is your first time seeing it,
you'll see there's a lot going on,

00:07:27.780 --> 00:07:33.550
there's a lot of different panels giving you different
ways to view information about the inspected page.

00:07:33.550 --> 00:07:37.660
For this part of the demo, we're just
going to be focusing on the Elements panel.

00:07:37.660 --> 00:07:42.510
The Elements panel consists of two major components.

00:07:42.510 --> 00:07:49.740
On the left we have this DOM tree, on the right, we
have contextual information for that selected element.

00:07:49.740 --> 00:07:55.180
And something really cool to note about this DOM
tree, is it's not what you see in your editor,

00:07:55.180 --> 00:07:58.350
in your HTML editor when you try
to let's say, write the page.

00:07:58.350 --> 00:08:02.590
It's actually a live representation
of what's on the page right now.

00:08:02.590 --> 00:08:09.330
And you can see that as the elements are adding
and-- being added and removed from the DOM.

00:08:09.330 --> 00:08:15.870
This is a great advance to working in the inspector in
the browser compared to your editor because you're going

00:08:15.870 --> 00:08:21.140
to have access to DOM elements that were
probably generated through JavaScript,

00:08:21.140 --> 00:08:24.340
which you won't be able to find in your editor.

00:08:24.340 --> 00:08:33.310
So something neat about this DOM hierarchy is as you hover
over the elements, they actually highlight on the page.

00:08:33.310 --> 00:08:39.350
So some that move might not work perfectly, but here, if
we hover over the header and we go in on the input element,

00:08:39.350 --> 00:08:43.920
you will see "Hey, this is the
exact element that we wanted."

00:08:43.920 --> 00:08:48.620
As you're exploring pages, you're going to be able
to pick the exact ones that you're interested in.

00:08:48.620 --> 00:08:52.710
If you're developing pages, you'll
also get width information and margins

00:08:52.710 --> 00:08:56.240
and paddings that are useful to you as a developer.

00:08:56.240 --> 00:09:00.990
So let's select the input element and look
at what kind of style information we can see.

00:09:00.990 --> 00:09:06.100
So I'm going to zoom in the sidebar,
pan, get that right, OK.

00:09:06.100 --> 00:09:08.070
So we've got the input element selected.

00:09:08.070 --> 00:09:09.890
What styles are affecting it?

00:09:09.890 --> 00:09:12.480
Well, if we expand the computed style section,

00:09:12.480 --> 00:09:16.940
this is that list of all the styles
that are finally affecting this element.

00:09:16.940 --> 00:09:19.810
But in most cases, that's not what you're interested in.

00:09:19.810 --> 00:09:24.120
You don't want to know just what the styles
are, but also where did they come from,

00:09:24.120 --> 00:09:30.990
in what order are they being applied, and that's what
the rest of the style section is actually showing you.

00:09:30.990 --> 00:09:37.870
So the-- by-- this information is actually
coming from the browser's engine, WebKit.

00:09:37.870 --> 00:09:45.250
So while CSS cascading rules and specificity are
quite complex, it's difficult to do manually.

00:09:45.250 --> 00:09:49.500
And here, the tool is showing you
exactly what the browser is applying.

00:09:49.500 --> 00:09:53.670
So we see the margin top is defined
in three different places.

00:09:53.670 --> 00:09:59.610
We've got 5 pixels, 50 pixels, and 100 pixels, and we
see the order of top to bottom of how they are applied,

00:09:59.610 --> 00:10:04.220
and we see the 5 pixels is over ruling the other two.

00:10:04.220 --> 00:10:13.060
The 5 pixel rule was actually defined in this
external file, tweetflow.css, specifically on line 24.

00:10:13.060 --> 00:10:17.840
And that's actually a link that would take you
to the resource in another panel in the Inspector

00:10:17.840 --> 00:10:20.480
and highlight the line where the selector is.

00:10:20.480 --> 00:10:25.120
It's a-- that is a feature that has
really been asked for from designers.

00:10:25.120 --> 00:10:30.830
And we see, as we go down, the margin top of
50 pixels is defining the inline style sheet.

00:10:30.830 --> 00:10:33.050
And if you think about the cascading rules,

00:10:33.050 --> 00:10:38.480
inline style sheets are normally more
specific than external style sheets.

00:10:38.480 --> 00:10:44.070
So here, because we have got a stronger selector,
it is actually overruling a more general selector.

00:10:44.070 --> 00:10:50.000
And if you are just again manually looking at the
files, it would be difficult information to deal with.

00:10:50.000 --> 00:10:53.640
You'd probably think that the 50 pixels might be applying.

00:10:53.640 --> 00:10:57.180
So if you scroll down more, we
see here our user agent styles.

00:10:57.180 --> 00:11:00.960
That's information about Safari's default styles itself,

00:11:00.960 --> 00:11:04.010
that is information you would not
get from the source code files.

00:11:04.010 --> 00:11:07.900
And we scroll down farther and we
see here's something new in Safari 5.

00:11:07.900 --> 00:11:09.550
We have got inherit information.

00:11:09.550 --> 00:11:16.330
In this case, from the search elements,
black containers of header and body.

00:11:16.330 --> 00:11:20.350
And also, even cooler, we have got pseudo element styles.

00:11:20.350 --> 00:11:25.790
And here is again, if you are exploring the web or
even offering your own page, you might not have known

00:11:25.790 --> 00:11:33.260
about pseudo elements like the placeholder element, and
even less seem to know that you can style those elements.

00:11:33.260 --> 00:11:37.730
But by using the Inspector, you can see,
OK, here is the selector I would need

00:11:37.730 --> 00:11:40.260
to style a placeholder text style and input element.

00:11:40.260 --> 00:11:43.030
And here is what the default user agent style is.

00:11:43.030 --> 00:11:46.500
So maybe you do want to do this on your
own page and change it a little bit.

00:11:46.500 --> 00:11:49.610
So you want to make the color just a little bit darker.

00:11:49.610 --> 00:11:52.390
Well, what does dark grey represent in color values?

00:11:52.390 --> 00:11:55.870
Well, you can actually flip through
the different color representations

00:11:55.870 --> 00:11:59.250
by hovering the color swatch and just clicking through.

00:11:59.250 --> 00:12:03.960
So Hex, RGB, HSL, and back around into the nickname.

00:12:03.960 --> 00:12:08.350
Use the tools to work for you and
get you exactly what you want.

00:12:08.350 --> 00:12:11.210
So let's take a look at the other sections.

00:12:11.210 --> 00:12:15.330
Down here, we had metrics and properties
and event listeners.

00:12:15.330 --> 00:12:22.220
The metrics section shows you box model layout information,
such as the positioning, margin, border, padding,

00:12:22.220 --> 00:12:28.350
all exactly as you would expect it, and you can actually
go in and edit it like a lot of values in the Inspector.

00:12:28.350 --> 00:12:34.660
We are going to skip over properties and focus on event
listeners because those are new again, to Safari 5.

00:12:34.660 --> 00:12:40.620
So we have got the search element selected, and we
see that there is a search event with listeners,

00:12:40.620 --> 00:12:47.450
and there are two listeners registered
on-- for this search event.

00:12:47.450 --> 00:12:52.970
The first is registered on the input element
itself, and it runs the change party function.

00:12:52.970 --> 00:12:57.850
And that bubbles up to the body
running the flat for event function.

00:12:57.850 --> 00:13:04.030
And take a moment, body.happy is just showing you the
most accurate selector for the body element at the time

00:13:04.030 --> 00:13:07.830
that this was expanded and this information was gone.

00:13:07.830 --> 00:13:10.930
And what is really cool to note
about this, event listeners section,

00:13:10.930 --> 00:13:15.380
is it's information that you cannot
actually get through JavaScript on the page.

00:13:15.380 --> 00:13:21.750
And because it is coming from the engine
itself, you get the exact capturing on target

00:13:21.750 --> 00:13:26.010
and a bubbling event listener phase
that the events are going to go through.

00:13:26.010 --> 00:13:31.920
So we can expand these and see a little bit
more information about the listeners themselves.

00:13:31.920 --> 00:13:36.910
When you actually input a search term and hit
Enter, what is going to happen on this page?

00:13:36.910 --> 00:13:41.420
Well first, it is going to run this change query
event listener, and it is going to dispatch a message

00:13:41.420 --> 00:13:47.280
because this is an extension up to the global
page to cause a Twitter search for more terms.

00:13:47.280 --> 00:13:53.440
Sending a bubble up to flash for event, and that is going
to change the background color to this slight grey color.

00:13:53.440 --> 00:13:56.200
Well, let's follow this even further.

00:13:56.200 --> 00:14:02.130
We go to the body and we should just click on the element
and jump directly to it in DOM tree, and we will see up here

00:14:02.130 --> 00:14:05.510
at the top that the background
color has a WebKit transition,

00:14:05.510 --> 00:14:09.440
and it has got a transition that's
going to last for half of a second.

00:14:09.440 --> 00:14:13.670
And down to-- bottom, because we already
had that event listener section open,

00:14:13.670 --> 00:14:20.620
we see there is a WebKit transition end function with
a listener, and an anonymous function has registered,

00:14:20.620 --> 00:14:24.070
and it is going to bring the background
color back down to black.

00:14:24.070 --> 00:14:26.960
So let's play around with this a little.

00:14:26.960 --> 00:14:31.720
We have seen the JavaScript to change the background
color, and we've seen that there is a WebKit transition

00:14:31.720 --> 00:14:34.620
on it, so let's actually run some JavaScript.

00:14:34.620 --> 00:14:40.120
I am going to open up the console, the
JavaScript console, built into the Inspector,

00:14:40.120 --> 00:14:43.850
and actually just going to slide up from the bottom.

00:14:43.850 --> 00:14:49.870
This allows you to run JavaScript directly on the
page, and it is also-- it's really, really neat.

00:14:49.870 --> 00:14:51.540
I find myself in here a lot.

00:14:51.540 --> 00:14:59.910
So let's start typing, document.body.style, and
you see it is giving us this nice autocompletion,

00:14:59.910 --> 00:15:05.180
and I find this autocompletion is the best
it can possibly be, much better than editors.

00:15:05.180 --> 00:15:09.900
And that is because again, it is
getting information right from the page.

00:15:09.900 --> 00:15:15.590
It knows the objects that you have got, it has the
actual object, and it can enumerate all the properties,

00:15:15.590 --> 00:15:18.820
anything that you have customly added or removed.

00:15:18.820 --> 00:15:24.610
So we could type document.body.style,
but that is kind of long, right?

00:15:24.610 --> 00:15:28.180
We have already got the body element
selected here in the DOM tree.

00:15:28.180 --> 00:15:37.110
We can just do special variable $0, and this is part of
the command line API that a lot of web developer tools use.

00:15:37.110 --> 00:15:41.590
It is similar to the console API,
like console.log, etcetera.

00:15:41.590 --> 00:15:49.830
$0 represents the current selected element,
$1 is the last, all the way up to $4.

00:15:49.830 --> 00:15:54.620
So let's go to the Dedicated Console
panel, to remove some of the distraction,

00:15:54.620 --> 00:15:58.800
and see what happens when we actually
change the background color on the body.

00:15:58.800 --> 00:16:02.210
So we saw the JavaScript to do that.

00:16:02.210 --> 00:16:03.890
I am going to do something obvious.

00:16:03.890 --> 00:16:05.910
I am going to make it just white.

00:16:05.910 --> 00:16:09.740
And when I hit Enter, the background
color of this page should flash to white

00:16:09.740 --> 00:16:12.990
for half a second, and come back down to black.

00:16:12.990 --> 00:16:15.820
And of course, I forgot the equal sign.

00:16:15.820 --> 00:16:17.410
There we go.

00:16:17.410 --> 00:16:19.100
That is a little bit too strong.

00:16:19.100 --> 00:16:20.360
We saw the 333.

00:16:20.360 --> 00:16:26.440
But let's try and say, we are offering this page and
we want to come up with our own style to work better.

00:16:26.440 --> 00:16:30.040
let's try 456, a nice teal color that I know.

00:16:30.040 --> 00:16:36.640
And OK that is cool, that could be what we actually
want, and we can then take this value back to our editor.

00:16:36.640 --> 00:16:43.640
And one thing to know is how much faster it is working
with the JavaScript console to just poke the page

00:16:43.640 --> 00:16:48.390
than doing the traditional update
file, refresh the page cycle.

00:16:48.390 --> 00:16:54.200
We have to update a JavaScript file, reload up
the extension, put in a search term, hit Enter,

00:16:54.200 --> 00:16:59.740
and we'd only have been able to see that individual
style and not compare it to anything really quick.

00:16:59.740 --> 00:17:08.500
Here, because we are just poking at the page, we can
do a lot really fast, really compare different styles.

00:17:08.500 --> 00:17:10.400
So there is one last thing I wanted to look at.

00:17:10.400 --> 00:17:17.730
So I am going to come back to the Elements panel and
remove the console, and you have got this DOM tree

00:17:17.730 --> 00:17:22.960
and this style sidebar, you can
actually edit those directly.

00:17:22.960 --> 00:17:27.460
So if you find something you are interested in, just
start double-clicking it, just start editing it.

00:17:27.460 --> 00:17:33.110
You can tab through, you can edit tag names,
attributes, you can even add an attribute,

00:17:33.110 --> 00:17:39.140
if you don't make the display none, and
remove the input element on the page.

00:17:39.140 --> 00:17:44.280
And you know, if you are really ambitious and
you want to actually add HTML to the page,

00:17:44.280 --> 00:17:47.890
you can choose Edit as HTML, and get this free form editor.

00:17:47.890 --> 00:17:53.490
Enter will give you new lines,
Command Enter will commit your change.

00:17:53.490 --> 00:17:55.730
Also, you can do the same thing to styles.

00:17:55.730 --> 00:17:57.870
let's try and do something a little bit cooler.

00:17:57.870 --> 00:18:01.610
We have seen that there is a color
around the edge of some of these Tweets.

00:18:01.610 --> 00:18:05.870
And we have seen that the body's
class has been changing, sad, happy,

00:18:05.870 --> 00:18:10.970
and normal, based on the text in the Tweet itself.

00:18:10.970 --> 00:18:16.760
So we can style something on the page, say,
add a selector to the page and start styling.

00:18:16.760 --> 00:18:19.400
let's do that with this text up here at the top.

00:18:19.400 --> 00:18:22.450
It is static, it is not going to change throughout the demo.

00:18:22.450 --> 00:18:27.350
So I am going to zoom in a bit more on the sidebar,
and let's increase this text size so you can see it.

00:18:27.350 --> 00:18:32.550
So we have got the font size down here, I will just
double-click it, and because this is in numerical value,

00:18:32.550 --> 00:18:42.700
I can just use the up and down arrows to increase
the size immediately right in front of you.

00:18:42.700 --> 00:18:42.760
[ Applause ]

00:18:42.760 --> 00:18:43.940
So I just tab through.

00:18:43.940 --> 00:18:48.530
I'll make a WebKit transition on
the color for about three seconds,

00:18:48.530 --> 00:18:53.660
and zoom out a bit, I can actually add a new style rule.

00:18:53.660 --> 00:18:59.010
So this is allowing me to add a selector
to the page and start styling the elements.

00:18:59.010 --> 00:19:03.730
So I am going to say when the body
is sad, let's make the color red.

00:19:03.730 --> 00:19:09.050
And it is grayed out right now because it is not
currently affecting the element when I created it.

00:19:09.050 --> 00:19:16.080
And we see right now the body is
happy, I can make the color green.

00:19:16.080 --> 00:19:22.060
Of course, I just missed it, but here is red,
the sad, and you see that transition happening.

00:19:22.060 --> 00:19:24.950
This is really a great tool for designers.

00:19:24.950 --> 00:19:29.920
When they are starting with a blank canvas
and they want to just create a whole bunch

00:19:29.920 --> 00:19:33.720
of styles to customize the page just perfectly.

00:19:33.720 --> 00:19:36.540
They do not have to do a lot of back and forth editing.

00:19:36.540 --> 00:19:41.200
They can just quickly apply styles
and see how it affects the page.

00:19:41.200 --> 00:19:48.370
So with that I will go back to the slides and do a recap.

00:19:48.370 --> 00:19:56.190
So what we just looked at was learning from the web,
exploring, and being able to just inspect portions

00:19:56.190 --> 00:20:04.480
of the page, view the DOM elements, view the CSS styles, and
view any other contextual information like event listeners.

00:20:04.480 --> 00:20:08.130
Basically answering the question, "How did they do that?"

00:20:08.130 --> 00:20:14.660
We also looked at how you can interact with the page
and just directly edit the DOM tree, the styles,

00:20:14.660 --> 00:20:21.120
use the JavaScript console to poke at the page
itself and really save some development time.

00:20:21.120 --> 00:20:27.500
So with that, I'm going to pass things over to
Brian, my coworker, to talk about JavaScript.

00:20:27.500 --> 00:20:32.500
[ Applause ]

00:20:32.500 --> 00:20:33.430
>> Brian Weinstein: Hi, guys.

00:20:33.430 --> 00:20:34.820
I'm Brian Weinstein.

00:20:34.820 --> 00:20:39.600
I worked on the Web Inspector and extensions for Safari 5,

00:20:39.600 --> 00:20:43.370
and I would like to now talk to
you guys debugging JavaScript.

00:20:43.370 --> 00:20:50.450
So let's get a little bit of the show of hands here right
before lunch, who has written some JavaScript, proofread it,

00:20:50.450 --> 00:20:54.600
loaded it up in the browser, and
then saw that nothing has happened?

00:20:54.600 --> 00:20:57.480
And I don't believe the rest of you.

00:20:57.480 --> 00:20:58.710
[ Laughter ]

00:20:58.710 --> 00:20:59.340
All right.

00:20:59.340 --> 00:21:05.540
So there are two kinds of errors that you'll see
relatively commonly when you're writing a lot of JavaScript.

00:21:05.540 --> 00:21:08.430
You'll see parse errors and runtime errors.

00:21:08.430 --> 00:21:11.520
I'm going to start talking about parse errors.

00:21:11.520 --> 00:21:18.080
Parse errors are what happens when the interpreter
does not know what to do to with your code.

00:21:18.080 --> 00:21:21.220
I have few examples of these that we can run through.

00:21:21.220 --> 00:21:28.710
You might have mismatched quotes where this would just
confuse-- this would just confused the interpreter.

00:21:28.710 --> 00:21:31.990
You might have missing commas in an object decoration.

00:21:31.990 --> 00:21:36.050
This could happen really easily if you're
adding a new property to an object.

00:21:36.050 --> 00:21:41.010
Or you might have unbalanced tokens, like
when you want to log something to the console

00:21:41.010 --> 00:21:45.540
and you forget your closing parentheses
around your console-- around your console.log.

00:21:45.540 --> 00:21:50.600
I'm going to run through a few-- run a few
screenshots here with the Web Inspector

00:21:50.600 --> 00:21:54.130
to show you how easy it is to find and fix these errors.

00:21:54.130 --> 00:22:02.750
So you load a page that has-- you load a
page that has a parse error on the site.

00:22:02.750 --> 00:22:09.950
When you look at-- right above me at the-- in the
bottom-- your bottom right hand corner of the Inspector,

00:22:09.950 --> 00:22:14.300
you'll see that there's a little badge
saying that there's one error on the page.

00:22:14.300 --> 00:22:20.400
You can click that and it will open the console, and
it will show you the error, and if we get a little bit

00:22:20.400 --> 00:22:24.570
of a closer look at that, you'll-- it
will give you a line number on the file

00:22:24.570 --> 00:22:27.750
and tell you that, "Yeah, it really was a parse error."

00:22:27.750 --> 00:22:35.030
So you can click on the line-- you can click on the
filename, and it will take you directly to that file,

00:22:35.030 --> 00:22:40.650
and to that line, and it will actually show
you with a little nice yellow highlight,

00:22:40.650 --> 00:22:47.100
that there was a parse error right there, it takes you to
the actual line, and when we take a closer look at that,

00:22:47.100 --> 00:22:53.190
you can see that we're missing a comma between
mouseover and globalWindow.pauseTweets.

00:22:53.190 --> 00:22:56.550
It's something that would be very
easy to miss when you're writing code,

00:22:56.550 --> 00:23:01.130
but we make it very easy to find and fix this error.

00:23:01.130 --> 00:23:05.570
The ones that are a little more tricky
to find and diagnose are runtime errors.

00:23:05.570 --> 00:23:13.380
This is when the interpreter correctly understands the
code, but something during execution throws an exception.

00:23:13.380 --> 00:23:17.050
So let's take a look at a few ways this can happen.

00:23:17.050 --> 00:23:22.640
You might have-- you might try and-- you might try
to be referencing an undefined or null property

00:23:22.640 --> 00:23:27.560
by calling document.nonexistent.bar
that will give you an exception.

00:23:27.560 --> 00:23:34.460
You might have some-- you might throw an explicit
exception if you're defining an API and someone calls it

00:23:34.460 --> 00:23:39.700
with an incorrect number of arguments,
or you might find an error like this

00:23:39.700 --> 00:23:45.970
where this will actually throw a DOM exception because
you are not allow to append children to the document.

00:23:45.970 --> 00:23:52.310
You either would probably want to append the
child to the document.body or document.head.

00:23:52.310 --> 00:24:00.590
So now, I'm going to take as through a demo of how
to find and fix these JavaScript errors when your--

00:24:00.590 --> 00:24:07.550
and we're actually be using an extension, which as was
mentioned before, is all HTML, CSS, and JavaScript.

00:24:07.550 --> 00:24:10.440
So let's go over to the demo machine.

00:24:10.440 --> 00:24:14.020
And that worked, step one.

00:24:14.020 --> 00:24:16.220
All right.

00:24:16.220 --> 00:24:23.830
So right after I'd seen this demo-- after I'd seen the demos
by Tim and Adam about extensions, I decided, "Oh, All right.

00:24:23.830 --> 00:24:35.660
I bet before our presentation, I can add a Next
button to the-- I can add a Next button to the bar."

00:24:35.660 --> 00:24:41.840
And I added a Next button, but I didn't
get far enough as to make it working.

00:24:41.840 --> 00:24:47.010
When you click the Next button,
you'll see that nothing is happening.

00:24:47.010 --> 00:24:52.010
So let's take a look at the Inspector
and see if we can see what is going on.

00:24:52.010 --> 00:24:57.480
So we inspect the element, and this is
the window version of the Inspector.

00:24:57.480 --> 00:25:02.420
It's not doc into the page because it wouldn't
really make much sense to dock it into the bar.

00:25:02.420 --> 00:25:07.540
And I got a little click-happy, so we can
see that there are seven errors on the page,

00:25:07.540 --> 00:25:11.420
and let's take a look at those,
and to take-- we'll zoom in a bit.

00:25:11.420 --> 00:25:17.340
And our error is that Safari.globalpage is not an object.

00:25:17.340 --> 00:25:20.500
So this happened on 1ine 54 of bar.JS.

00:25:20.500 --> 00:25:23.630
So let's take a look of that.

00:25:23.630 --> 00:25:29.970
And it's where we call-- it's the Next button's
click handler, and that is being called when--

00:25:29.970 --> 00:25:36.550
and we call
Safari.globalpage.content.window.immediatelyShowNextTweet.

00:25:36.550 --> 00:25:44.850
So let's go into the Scripts panel, and we're going to turn
on a pretty cool feature that lets you break on exception.

00:25:44.850 --> 00:25:49.920
So what this will do is this will pause-- this
will pause the execution of the JavaScript

00:25:49.920 --> 00:25:53.380
in the debugger right before an exception is thrown.

00:25:53.380 --> 00:25:56.910
So seven times that-- I believe
I clicked the button seven times.

00:25:56.910 --> 00:26:02.250
So it's pretty much a one-to-one correspondence between
when I click the button and when it threw an exception.

00:26:02.250 --> 00:26:03.990
So let's see what happens.

00:26:03.990 --> 00:26:11.050
We click the Next button, and it's broken
for us in the debugger, and it has--

00:26:11.050 --> 00:26:14.460
and we are now stopped on our line that has been breaking.

00:26:14.460 --> 00:26:16.980
So let's take a look at some of the variable state.

00:26:16.980 --> 00:26:22.060
New to Safari 5, we have this variable
state popover that shows you the value

00:26:22.060 --> 00:26:26.420
of any variables when the execution is paused.

00:26:26.420 --> 00:26:30.370
So our error is telling us Safari.globalpage is undefined.

00:26:30.370 --> 00:26:34.470
So let's put our mouse over Safari.globalpage,
and look at that.

00:26:34.470 --> 00:26:36.020
It is undefined.

00:26:36.020 --> 00:26:38.590
So this is probably where our issue was coming from.

00:26:38.590 --> 00:26:41.860
Now, I'm pretty sure that I'm able to use Safari like that.

00:26:41.860 --> 00:26:47.100
So let's take a closer look at the Safari
object, and we see all of its properties.

00:26:47.100 --> 00:26:52.520
And this is just really cool and makes it
really easy to debug JavaScript on the fly.

00:26:52.520 --> 00:26:55.070
And as was mentioned in the earlier presentations,

00:26:55.070 --> 00:27:01.640
you see there's a Safari.application,
a Safari.extension, and a Safari.self.

00:27:01.640 --> 00:27:07.500
We can open all of these and take
a little bit closer look at it.

00:27:07.500 --> 00:27:11.710
And so, we can see that there is no Safari.globalpage.

00:27:11.710 --> 00:27:14.630
So us was getting the error is expected.

00:27:14.630 --> 00:27:20.880
But if we look at the extension object, we can
see that Safari extension has a global page.

00:27:20.880 --> 00:27:24.910
And inside the global page, there is that content window.

00:27:24.910 --> 00:27:28.740
And that content window has-- and that's a DOM window.

00:27:28.740 --> 00:27:35.040
So let's try-- let's go into the console and
take a look at our code and try and write this--

00:27:35.040 --> 00:27:37.790
try and write the function of this should be.

00:27:37.790 --> 00:27:46.480
So let say Safari.extension.globalpage, and
it's autocompleting or us, which is a good sign.

00:27:46.480 --> 00:27:55.850
It means we're probably on the right track,
.contentwindow.immediatelyShowNextTweet.

00:27:55.850 --> 00:28:02.140
So-- and this is actually-- this is really exciting, because
what this is doing is we're currently debugging a bar,

00:28:02.140 --> 00:28:08.060
but this is actually autocompleting functions for us
on the global page, and that's just really exciting

00:28:08.060 --> 00:28:13.550
and will make your life a lot easier to debug
web applications, or to debug extensions.

00:28:13.550 --> 00:28:15.620
So let's run this function.

00:28:15.620 --> 00:28:19.780
Look at that.

00:28:19.780 --> 00:28:24.670
It is going to the next Tweet when we run this function.

00:28:24.670 --> 00:28:25.340
All right.

00:28:25.340 --> 00:28:25.540
Let's--

00:28:25.540 --> 00:28:26.270
[ Applause ]

00:28:26.270 --> 00:28:27.480
Thank you.

00:28:27.480 --> 00:28:28.950
All right.

00:28:30.000 --> 00:28:38.550
So now, let's open our bar file and where we call
Safari.globalpagecontentwindowimmediatelyShowNextTweet,

00:28:38.550 --> 00:28:43.840
we just say Safari.extension.globalpage.

00:28:43.840 --> 00:28:47.310
contentwindow.immediatelyShowNextTweet.

00:28:47.310 --> 00:28:52.040
We go back-- we go to the extension
builder, and we reload our extension.

00:28:52.040 --> 00:29:04.410
And I know exactly what I did, and-- but
now, we go back and the Next button works.

00:29:04.410 --> 00:29:10.790
And it will keep cycling us through-- and it
will keep cycling us through out Tweets as we go.

00:29:10.790 --> 00:29:16.980
And now, it should go back to showing
them every 10 seconds, but it's not.

00:29:16.980 --> 00:29:21.080
It is just cycling through them way too fast.

00:29:21.080 --> 00:29:24.830
So let's take a look at what is going on here.

00:29:24.830 --> 00:29:31.130
So let's open the extension builder, let's was reload the
global page just to clean up our state a little bit here,

00:29:31.130 --> 00:29:41.190
and we'll go into the extension builder, and we-- and since
global page, as was mentioned before, is just HTML, CSS,

00:29:41.190 --> 00:29:44.770
and JavaScript, we can inspect the global page.

00:29:44.770 --> 00:29:48.370
And now, am going to get to show
you something that it is exciting.

00:29:48.370 --> 00:29:50.410
It is the Timeline panel.

00:29:50.410 --> 00:29:55.520
So what this-- what the Timeline panel does, it
was mentioned in the Safari State of the Union,

00:29:55.520 --> 00:29:59.310
it shows you where your web page is spending time.

00:29:59.310 --> 00:30:04.400
It shows you when scripts are running, when network
access is happening, and when resources are loading.

00:30:04.400 --> 00:30:06.340
So let's start the Timeline panel and we'll start recording.

00:30:06.340 --> 00:30:11.620
So let's start the Timeline panel,
and we'll start recording.

00:30:11.620 --> 00:30:18.500
We will click Next a few times, and let's
take a look at what is happening here.

00:30:18.500 --> 00:30:26.060
[ Pause ]

00:30:26.060 --> 00:30:26.660
All right.

00:30:26.660 --> 00:30:30.800
So we now-- we saw our bug, and this is really interesting.

00:30:30.800 --> 00:30:37.410
So what is happening is that we are installing
timers each time the next button is clicked,

00:30:37.410 --> 00:30:40.190
and they are firing 10 seconds later.

00:30:40.190 --> 00:30:45.860
But every time the Next button is
clicked, we're creating a new timer that--

00:30:45.860 --> 00:30:48.690
we're creating a new timer that is never cleared.

00:30:48.690 --> 00:30:52.150
And each time the Next button is
clicked, we should be clearing the timer.

00:30:52.150 --> 00:30:57.950
So right now, we have like a lot of timers running.

00:30:57.950 --> 00:31:06.040
And so, let's take a look at our code where the timers
are handled, let's go to the global HTML page, and so,

00:31:06.040 --> 00:31:12.810
when immediately show next Tweet is called, we are
clearing the-- we are clearing timers.rotate intervalID.

00:31:12.810 --> 00:31:19.650
But when we are calling set interval, we are
setting timers.rotate interval identifier.

00:31:19.650 --> 00:31:27.930
That is probably what is going on, so
let's use the same variable in both places.

00:31:27.930 --> 00:31:35.930
let's close these files out, open the extension
builder again, and reload our extension,

00:31:35.930 --> 00:31:44.610
and then we are able to click Next a few times, and they
will not show up until-- and now, the timers have been--

00:31:44.610 --> 00:31:52.730
are being cleared correctly, and they will only
show up every 10 seconds, which is what we want.

00:31:52.730 --> 00:31:53.910
[ Applause ]

00:31:53.910 --> 00:31:54.460
All right.

00:31:54.460 --> 00:31:56.640
Thank you, guys.

00:31:56.640 --> 00:31:59.360
let's go back to the slides.

00:31:59.360 --> 00:32:05.900
And so, what we just discussed here is we showed
how efficient the Web Inspector is at finding

00:32:05.900 --> 00:32:11.120
and fixing parse errors, and then we showed
a little demo of debugging runtime errors,

00:32:11.120 --> 00:32:16.590
learning how to break on exceptions, and showed
off some exciting new features of Safari 5,

00:32:16.590 --> 00:32:20.030
like the debugging state popover and the Timeline panel.

00:32:20.030 --> 00:32:25.000
I am going to give it back to Joe to talk
about how to improve page load times.

00:32:25.000 --> 00:32:27.310
[ Applause ]

00:32:27.310 --> 00:32:33.320
>> Joseph Pecoraro: So improving page load times is
all about improving the page for you and your users.

00:32:33.320 --> 00:32:38.710
Your users are the ones who are using your page a lot,
so you want them to have the best experience possible.

00:32:38.710 --> 00:32:41.190
And there's a lot of different page load issues.

00:32:41.190 --> 00:32:46.200
I have just picked out four here; large
resources, a large number of resources,

00:32:46.200 --> 00:32:49.730
sequential dependencies, and non-responsive interfaces.

00:32:49.730 --> 00:32:52.770
And the thing is, you probably know about a lot of these.

00:32:52.770 --> 00:32:55.310
You probably know how to fix them as well.

00:32:55.310 --> 00:32:57.040
So why is this part going to be useful to you?

00:32:57.040 --> 00:33:03.810
It is going to be useful because the problems
that developers have is not how to fix these,

00:33:03.810 --> 00:33:08.470
it is how to find them, how to detect
and diagnose them on your own pages.

00:33:08.470 --> 00:33:09.410
And that is what we are going to do.

00:33:09.410 --> 00:33:15.560
We are going to show you how you can use the Web
Inspector to find these problems and then fix them.

00:33:15.560 --> 00:33:18.840
So we can really break these down
into two different sections.

00:33:18.840 --> 00:33:22.630
The top two are related to size or quantity.

00:33:22.630 --> 00:33:26.600
And there is a view of the ones
back there that will do just that.

00:33:26.600 --> 00:33:30.110
So here is the Resources panel of the Web Inspector.

00:33:30.110 --> 00:33:35.620
I've chosen the size graph, so we are
viewing the resources based on their sizes.

00:33:35.620 --> 00:33:41.410
If this is your first time viewing the Web Inspector's
Resources panel, you will see it is very visual.

00:33:41.410 --> 00:33:45.520
There are a lot of colors, there
is a lot of information going on.

00:33:45.520 --> 00:33:49.420
These colors are actually representing
different resource types.

00:33:49.420 --> 00:33:57.170
So in the summery up at the top, you can see that this page
consists of a lot of purple resources, which are images,

00:33:57.170 --> 00:34:02.470
and orange resources, which are scripts,
which is kind of what we would expect.

00:34:02.470 --> 00:34:05.160
This is the apple.com homepage.

00:34:05.160 --> 00:34:11.040
And down below we see the resources
sorted in size from largest to smallest.

00:34:11.040 --> 00:34:14.340
And we see that the largest resource is in fact, that image,

00:34:14.340 --> 00:34:18.130
but we see this kind of two-tone
color for the script beneath it.

00:34:18.130 --> 00:34:19.930
So let's zoom in on that.

00:34:19.930 --> 00:34:25.390
As you hover over the resource in the
Inspector, it is going to show you these numbers.

00:34:25.390 --> 00:34:27.820
It is going to give you a detailed overview.

00:34:27.820 --> 00:34:34.520
So on the left, in the bold potion, the 32 kilobytes
represents the transfer size of the resource.

00:34:34.520 --> 00:34:42.760
Extending out with the transparent portion up to 120
kilobytes is the total size, the real size of the resource.

00:34:42.760 --> 00:34:48.630
And what this is showing you is that when it was
transferred over the wire, this resource was compressed.

00:34:48.630 --> 00:34:52.960
This is something that you want to see when
you view your resources in the Web Inspector,

00:34:52.960 --> 00:34:55.350
because you definitely want the resource to be compressed.

00:34:55.350 --> 00:35:01.370
Look just here how you can visually see how
much smaller it was when it was compressed.

00:35:01.370 --> 00:35:04.690
Likewise, when you have a large
resource, you can minimize it.

00:35:04.690 --> 00:35:13.290
So if you-- if this resource were not minimized, you could
improve it on your own page and see the exact values before

00:35:13.290 --> 00:35:16.130
and after, because you got them right here.

00:35:16.130 --> 00:35:24.090
So let's zoom out and scroll down the view to
see what I meant by a large number of requests.

00:35:24.090 --> 00:35:27.570
So here, we have got seven scripts highlighted.

00:35:27.570 --> 00:35:29.700
All seven are really small.

00:35:29.700 --> 00:35:32.630
They are just less than 3 kilobytes in size.

00:35:32.630 --> 00:35:38.450
This means that the page is doing seven separate
requests for each of these individual resources.

00:35:38.450 --> 00:35:43.210
And if you think about it, requests take
up a large portion of the page load.

00:35:43.210 --> 00:35:45.680
So when you can minimize a number of requests,

00:35:45.680 --> 00:35:50.640
you are minimizing your application's
dependency on latency, for instance.

00:35:50.640 --> 00:35:56.210
So let's say, five of these were static, you might
be able to combine those into an individual resource,

00:35:56.210 --> 00:36:01.930
and request that, and therefore,
reduce the page load a little bit.

00:36:01.930 --> 00:36:04.530
This doesn't have to be with just scripts.

00:36:04.530 --> 00:36:06.240
It can be images as well.

00:36:06.240 --> 00:36:13.030
If you see a lot of small images, typically icons,
you may be able to combine those into a sprite,

00:36:13.030 --> 00:36:17.200
for instance, which is a great way to improve a page.

00:36:17.200 --> 00:36:20.960
Now, size is typically pretty easy.

00:36:20.960 --> 00:36:25.020
Where we find that developers struggle
is time-related resources,

00:36:25.020 --> 00:36:30.200
because seeing the network overtime is
difficult and it will likely change every time.

00:36:30.200 --> 00:36:36.350
So these other two deal with time, and
they really deal with the user experience.

00:36:36.350 --> 00:36:42.300
When your user comes to the page, they want it to load
quickly, they want it to feel like it is loading quickly,

00:36:42.300 --> 00:36:46.220
they want it to be interactive as early
as possible so they can start using it.

00:36:46.220 --> 00:36:49.270
And that is exactly what these two are.

00:36:49.270 --> 00:36:52.910
So the largest time-related problem is latency.

00:36:52.910 --> 00:36:56.730
Now although, you do not have control over
latency, you can minimize its effects.

00:36:56.730 --> 00:36:59.990
So you can actually view latency in the Inspector.

00:36:59.990 --> 00:37:02.090
Here is again, the Resources panel.

00:37:02.090 --> 00:37:07.500
We have chosen the time graph, and down at
the bottom, I have chosen to sort by latency.

00:37:07.500 --> 00:37:12.760
And just with size, this is sorting the
elements, largest latency down to smallest.

00:37:12.760 --> 00:37:15.520
So let's zoom in on the top three.

00:37:15.520 --> 00:37:19.660
Here again, when you hover with your
mouse, you are going to get that number.

00:37:19.660 --> 00:37:22.990
And again, there's two-tones, but
here, they have been flipped.

00:37:22.990 --> 00:37:27.010
On the left, we see the transparent
portion leading up to the bold portion.

00:37:27.010 --> 00:37:31.930
And so, these values are representing
the left-edge of the transparent portion,

00:37:31.930 --> 00:37:34.280
is when the browser requests the resources.

00:37:34.280 --> 00:37:39.060
That request goes on until the bold
portion, about 2.3 seconds later,

00:37:39.060 --> 00:37:43.060
that is when the browser starts
receiving the data for that resource.

00:37:43.060 --> 00:37:48.220
And the bold portion continues until the
entire resource is downloaded and completed.

00:37:48.220 --> 00:37:51.680
So what I found very interesting about this is

00:37:51.680 --> 00:37:59.630
that these three highest latency items were not actually
coming directly from the page that I requested, apple.com.

00:37:59.630 --> 00:38:03.650
The top resource, the largest latency,
came from metrics.apple.com.

00:38:03.650 --> 00:38:05.870
And the other two are a third party altogether.

00:38:05.870 --> 00:38:10.620
And what that showed me is no matter
how much you can optimize your own page,

00:38:10.620 --> 00:38:17.630
if you a dependency on third parties, they may be affecting
your page load, they may be delaying events on your page

00:38:17.630 --> 00:38:20.170
because you have to wait for their resources.

00:38:20.170 --> 00:38:26.960
And say you actually did own one of these servers, you
could, you know, have diagnosed a server-side issue.

00:38:26.960 --> 00:38:29.720
One of your servers is affecting the latency.

00:38:29.720 --> 00:38:35.490
You may be able to switch a closer server, a better
server, or a content delivery network that is going

00:38:35.490 --> 00:38:38.760
to make the latency just a little bit smaller.

00:38:38.760 --> 00:38:44.720
Latency is a real big issue for
mobile devices, not so much, desktop.

00:38:44.720 --> 00:38:49.110
So what I've switch to is my favorite view of resources.

00:38:49.110 --> 00:38:54.390
And to get to this point, I have turned off the large
icons, I have clicked the icon down in the bottom,

00:38:54.390 --> 00:38:59.110
and I have switched to the small view, and that is
going to allow me to fit a lot on the page at once.

00:38:59.110 --> 00:39:02.170
I have also chosen to sort by response time.

00:39:02.170 --> 00:39:07.320
And what this shows you is exactly what
you wanted to see, the page as it loads,

00:39:07.320 --> 00:39:10.620
as resources are requested, and as they are downloaded.

00:39:10.620 --> 00:39:16.580
And what I really love about this is you do not have
to read any of the text to understand what is going on.

00:39:16.580 --> 00:39:18.760
You just see a lot of colors and a lot of lines.

00:39:18.760 --> 00:39:23.870
And speaking of lines, there are two
new lines, these two vertical lines.

00:39:23.870 --> 00:39:30.170
The blue line represents the DOMContentReady or
the DOMContentLoaded Event, firing on the page.

00:39:30.170 --> 00:39:35.440
And this will fire after the original document
has been parsed, inline scripts have been run.

00:39:35.440 --> 00:39:37.680
So the DOM is now interactive.

00:39:37.680 --> 00:39:44.020
You can interact with it in JavaScript, you can register
your listeners, you can start working with the page.

00:39:44.020 --> 00:39:50.790
The red line, 5 seconds later at about the
10-second mark, is the unload event firing.

00:39:50.790 --> 00:39:55.290
And this cannot fire until the
original subresources have loaded.

00:39:55.290 --> 00:39:59.380
So external style sheets, scripts, images, to name a few.

00:39:59.380 --> 00:40:07.030
And you can see the huge discrepancy in this case
because of the network speed and the large image.

00:40:07.030 --> 00:40:14.270
And we've seen a trend of developers moving from unload
to DOMContentReady, or inline scripts, for instance.

00:40:14.270 --> 00:40:19.270
And that is a really, really good
thing, because as your page loads,

00:40:19.270 --> 00:40:24.090
the page is going to be interactive far
earlier than the unload event in some cases.

00:40:24.090 --> 00:40:29.330
So say, you have your own JavaScript navigation
menu, you want it to be interactive for the user

00:40:29.330 --> 00:40:32.380
so they can start using it as early as possible.

00:40:32.380 --> 00:40:37.070
The last thing that I want to talk
about was sequential dependencies.

00:40:37.070 --> 00:40:40.730
And there is even one more.

00:40:40.730 --> 00:40:45.160
If you just look at the colors of this, you
will see orange resources up at the top,

00:40:45.160 --> 00:40:48.880
those are scripts loading, and
purple resources down at the bottom.

00:40:48.880 --> 00:40:50.320
Those are the images loading.

00:40:50.320 --> 00:40:53.720
And there's three images in particular
that I find interesting.

00:40:53.720 --> 00:40:57.740
These make up the main content on apple.com.

00:40:57.740 --> 00:41:01.110
This is the hero graphic in the
center, this is the navigation menu

00:41:01.110 --> 00:41:03.920
at the top, and the promo image down the corner.

00:41:03.920 --> 00:41:10.680
And what you can see here is because they are so low in
this view, they are actually not even being requested

00:41:10.680 --> 00:41:14.960
until about 3 seconds later, and downloaded at about 4.

00:41:14.960 --> 00:41:20.860
So when the images start loading, is something that
the user is definitely going to be worried about,

00:41:20.860 --> 00:41:24.020
because that is their view of the page as it is loading.

00:41:24.020 --> 00:41:29.040
And by using this view, you might be able to shuffle
things around on your page, move scripts later down

00:41:29.040 --> 00:41:37.950
closer to the body of the body's closing tag to delay
their load, and potentially bring up these image loads

00:41:37.950 --> 00:41:44.160
so that they load a little bit sooner, and the user
sees the page start filling in a little bit faster.

00:41:44.160 --> 00:41:48.970
So back to sequential dependencies,
there's always one sequential dependency.

00:41:48.970 --> 00:41:53.450
And we can look up at the top, this
is the initial page request, right?

00:41:53.450 --> 00:41:59.630
So I went to apple.com, started loading the
index page, that is that blue line at the top,

00:41:59.630 --> 00:42:03.970
the request took 863 milliseconds until I got the resource.

00:42:03.970 --> 00:42:11.080
And as soon as I got that data, the browser started
parsing, and it said, "Hey, I need these scripts."

00:42:11.080 --> 00:42:15.500
And you can literally draw a line right
down where this sequential dependency is.

00:42:15.500 --> 00:42:24.840
And this is what I call a visual property of the Inspector,
as you can just easily see this dependency right here.

00:42:24.840 --> 00:42:27.860
And it doesn't just have to be that initial request.

00:42:27.860 --> 00:42:29.230
Here is another example.

00:42:29.230 --> 00:42:30.600
I went to a mail client.

00:42:30.600 --> 00:42:37.080
And if I zoom in, there were 5 different redirects
just to get me the original page that I wanted.

00:42:37.080 --> 00:42:39.260
There's a total over 1 second.

00:42:39.260 --> 00:42:43.700
As a user, I was just sitting there and the page was blank.

00:42:43.700 --> 00:42:49.430
Sequential dependencies don't have to start
at page low like we just saw in the redirect.

00:42:49.430 --> 00:42:54.190
It could be with external style sheets
requiring images or something like that.

00:42:54.190 --> 00:43:00.040
And they do affect the page load because they are
compounding all of those latencies, all of those requests.

00:43:00.040 --> 00:43:05.180
So when you can remove those sequential dependencies
and replace them with, you know, parallel request,

00:43:05.180 --> 00:43:07.640
you are going to be able to improve your page loads.

00:43:07.640 --> 00:43:13.770
So with that, we have looked at some time-related
issues, and some size-related issues, all of the network,

00:43:13.770 --> 00:43:16.690
so that you can improve your page load times.

00:43:16.690 --> 00:43:21.140
And let's summarize everything we
have gone through this talk so far.

00:43:21.140 --> 00:43:28.450
First section, explore and develop web content was all about
how you, as a developer, can learn from the web itself.

00:43:28.450 --> 00:43:30.630
There are so many examples out there.

00:43:30.630 --> 00:43:35.130
And if you come across something and you ever
think the question, "How did they do that?"

00:43:35.130 --> 00:43:36.710
you know exactly what to do.

00:43:36.710 --> 00:43:41.640
Right-click on what interests you, you open up the
Web Inspector, and you start exploring the page.

00:43:41.640 --> 00:43:45.900
As a web developer, this is a really,
really vital thing that you can do.

00:43:45.900 --> 00:43:50.530
It helps you grow and it helps the web
improve by everyone learning from each other.

00:43:50.530 --> 00:43:58.760
We showed how you could reduce your development time by
using the Web Inspector to just edit the page manually.

00:43:58.760 --> 00:44:04.880
This reduces the back and forth contact switches,
it reduces the number of wasted refreshes,

00:44:04.880 --> 00:44:09.970
you can even debug JavaScript in the
inspector, which has traditionally been complex,

00:44:09.970 --> 00:44:13.140
but we just showed you it is really, really cool.

00:44:13.140 --> 00:44:17.100
And last, we talked about improving
your page load times, which is again,

00:44:17.100 --> 00:44:20.440
how you can optimize your page for all your users.

00:44:20.440 --> 00:44:25.140
Not just your desktop users or the ones
using laptops, but also mobile devices,

00:44:25.140 --> 00:44:29.200
like websites for the iPhone and the iPad.

00:44:29.200 --> 00:44:34.980
So if you have any questions and you would want to
ask them, not just now, but later you think of them,

00:44:34.980 --> 00:44:39.540
you can email them to Vicki Murley,
the Safari Technologies Evangelist.

00:44:39.540 --> 00:44:46.870
If you want documentation on the Web Inspector, you
can actually go to the Developer Center for Apple.

00:44:46.870 --> 00:44:53.010
And again, the tool that we showed
you, the Web Inspector, is Open Source.

00:44:53.010 --> 00:44:56.270
If you thought about some cool features
that you want, if you want to improve it

00:44:56.270 --> 00:44:59.690
or just view its source code, you
can check it out at webkit.org.

00:44:59.690 --> 00:45:04.350
There's developers working on it 24 hours a
day, we've got a great team here in California,

00:45:04.350 --> 00:45:09.640
we've got some people in Russia, I mean, 24
hours a day, someone is available to you.

00:45:09.640 --> 00:45:15.780
And if you want to ask any questions about it, there
is the web-- the Apple Developer Forums as well,

00:45:15.780 --> 00:45:18.630
in any of these sessions, and any of the labs.

00:45:18.630 --> 00:45:22.500
So related sessions, definitely,
because we just showed you extensions.

00:45:22.500 --> 00:45:28.310
If you want to check out those videos when they go up,
because they were earlier today, you can check those out.

00:45:28.310 --> 00:45:34.830
And later today-- tomorrow, there
is a session on off line storage.

00:45:34.830 --> 00:45:38.450
Although we did not show it to you, there
is a great panel in the Web Inspector

00:45:38.450 --> 00:45:40.880
for viewing client size storage information.

00:45:40.880 --> 00:45:43.330
So if you go to that session, that may interest you.

